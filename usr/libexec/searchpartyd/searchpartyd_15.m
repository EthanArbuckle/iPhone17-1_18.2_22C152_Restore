uint64_t sub_100A672FC()
{
  uint64_t v0;
  uint64_t result;
  void *v2;
  uint64_t (__cdecl *v3)();
  uint64_t v4;

  static Task<>.checkCancellation()();
  if (qword_1016375E8 != -1) {
    swift_once();
  }
  swift_beginAccess();
  result = sub_1000977C4((uint64_t)&xmmword_10166E8F0, v0 + 136);
  if (*(void *)(v0 + 160))
  {
    sub_10001CEB0((long long *)(v0 + 136), v0 + 56);
    sub_10001CD44((void *)(v0 + 56), *(void *)(v0 + 80));
    v3 = (uint64_t (__cdecl *)())((char *)&dword_101639150 + dword_101639150);
    v2 = (void *)swift_task_alloc();
    *(void *)(v0 + 528) = v2;
    *v2 = v0;
    v2[1] = sub_100A674F8;
    return v3();
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_100A674F8(uint64_t a1)
{
  *(void *)(*(void *)v1 + 536) = a1;
  swift_task_dealloc();
  return _swift_task_switch(sub_100A675F8, 0, 0);
}

uint64_t sub_100A675F8()
{
  uint64_t v1 = *(void *)(v0 + 536);
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v0 + 56);
  if (v1)
  {
    uint64_t v2 = *(void *)(v0 + 536);
    return _swift_task_switch(sub_100A677D4, v2, 0);
  }
  else
  {
    if (qword_101636F20 != -1) {
      swift_once();
    }
    uint64_t v3 = type metadata accessor for Logger();
    sub_100010324(v3, (uint64_t)qword_10170E9A8);
    v4 = Logger.logObject.getter();
    os_log_type_t v5 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v4, v5))
    {
      v6 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v6 = 0;
      _os_log_impl((void *)&_mh_execute_header, v4, v5, "Missing CloudStorageService!", v6, 2u);
      swift_slowDealloc();
    }

    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    v7 = *(uint64_t (**)(void))(v0 + 8);
    return v7();
  }
}

uint64_t sub_100A677D4()
{
  uint64_t v1 = *(void *)(*(void *)(v0 + 536) + 128);
  *(void *)(v0 + 544) = v1;
  return _swift_task_switch(sub_100A677F8, v1, 0);
}

uint64_t sub_100A677F8()
{
  uint64_t v2 = v0[61];
  uint64_t v1 = v0[62];
  uint64_t v3 = v0[60];
  swift_allocObject();
  swift_weakInit();
  (*(void (**)(uint64_t, void, uint64_t))(v2 + 104))(v1, enum case for AsyncStream.Continuation.BufferingPolicy.unbounded<A>(_:), v3);
  AsyncStream.init(_:bufferingPolicy:_:)();
  swift_release();
  return _swift_task_switch(sub_100A67900, 0, 0);
}

uint64_t sub_100A67900()
{
  AsyncStream.makeAsyncIterator()();
  uint64_t v1 = (void *)swift_task_alloc();
  v0[69] = v1;
  *uint64_t v1 = v0;
  v1[1] = sub_100A679B4;
  uint64_t v2 = v0[56];
  uint64_t v3 = v0[57];
  return AsyncStream.Iterator.next(isolation:)(v2, 0, 0, v3);
}

uint64_t sub_100A679B4()
{
  swift_task_dealloc();
  return _swift_task_switch(sub_100A67AB0, 0, 0);
}

uint64_t sub_100A67AB0()
{
  v58 = v0;
  uint64_t v1 = v0[56];
  if ((*(unsigned int (**)(uint64_t, uint64_t, void))(v0[54] + 48))(v1, 1, v0[53]) == 1)
  {
    uint64_t v2 = v0[65];
    uint64_t v3 = v0[63];
    uint64_t v4 = v0[64];
    uint64_t v6 = v0[58];
    uint64_t v5 = v0[59];
    uint64_t v7 = v0[57];
    swift_release();
    (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v5, v7);
    (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v2, v3);
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    v8 = (uint64_t (*)(void))v0[1];
    return v8();
  }
  sub_100A68E20(v1, v0[55], type metadata accessor for CloudStorageStore.State);
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload)
  {
    if (EnumCaseMultiPayload == 1)
    {
      (*(void (**)(void, void, void))(v0[46] + 32))(v0[48], v0[55], v0[45]);
      if (qword_101636F20 != -1) {
        swift_once();
      }
      uint64_t v11 = v0[47];
      uint64_t v12 = v0[48];
      uint64_t v13 = v0[45];
      uint64_t v14 = v0[46];
      uint64_t v15 = type metadata accessor for Logger();
      sub_100010324(v15, (uint64_t)qword_10170E9A8);
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v14 + 16))(v11, v12, v13);
      v16 = Logger.logObject.getter();
      os_log_type_t v17 = static os_log_type_t.default.getter();
      BOOL v18 = os_log_type_enabled(v16, v17);
      uint64_t v19 = v0[47];
      uint64_t v20 = v0[48];
      uint64_t v21 = v0[45];
      uint64_t v22 = v0[46];
      if (v18)
      {
        uint64_t v23 = swift_slowAlloc();
        uint64_t v57 = swift_slowAlloc();
        *(_DWORD *)uint64_t v23 = 136315394;
        *(void *)(v23 + 4) = sub_1008FA0F0(0xD000000000000019, 0x8000000101410B20, &v57);
        *(_WORD *)(v23 + 12) = 2080;
        sub_10028B80C();
        uint64_t v24 = dispatch thunk of CustomStringConvertible.description.getter();
        *(void *)(v23 + 14) = sub_1008FA0F0(v24, v25, &v57);
        swift_bridgeObjectRelease();
        v26 = *(void (**)(uint64_t, uint64_t))(v22 + 8);
        v26(v19, v21);
        _os_log_impl((void *)&_mh_execute_header, v16, v17, "Deleted CK record type: %s id:%s", (uint8_t *)v23, 0x16u);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();

        v26(v20, v21);
      }
      else
      {

        v33 = *(void (**)(uint64_t, uint64_t))(v22 + 8);
        v33(v19, v21);
        v33(v20, v21);
      }
    }
    goto LABEL_22;
  }
  sub_10001CEB0((long long *)v0[55], (uint64_t)(v0 + 22));
  if (qword_101636F20 != -1) {
    swift_once();
  }
  uint64_t v27 = type metadata accessor for Logger();
  sub_100010324(v27, (uint64_t)qword_10170E9A8);
  sub_10001D010((uint64_t)(v0 + 22), (uint64_t)(v0 + 27));
  v28 = Logger.logObject.getter();
  os_log_type_t v29 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v28, v29))
  {
    uint64_t v30 = swift_slowAlloc();
    uint64_t v57 = swift_slowAlloc();
    *(_DWORD *)uint64_t v30 = 136315138;
    sub_10001D010((uint64_t)(v0 + 27), (uint64_t)(v0 + 12));
    sub_10000588C(&qword_10164E8D0);
    uint64_t v31 = String.init<A>(describing:)();
    *(void *)(v30 + 4) = sub_1008FA0F0(v31, v32, &v57);
    swift_bridgeObjectRelease();
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)(v0 + 27));
    _os_log_impl((void *)&_mh_execute_header, v28, v29, "Received modified CK record: [%s]", (uint8_t *)v30, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)(v0 + 27));
  }

  uint64_t v34 = v0[51];
  sub_10001D010((uint64_t)(v0 + 22), (uint64_t)(v0 + 32));
  sub_10000588C(&qword_10164E8D0);
  char v35 = swift_dynamicCast();
  v36 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v34 + 56);
  if ((v35 & 1) == 0)
  {
    uint64_t v53 = v0[49];
    v36(v53, 1, 1, v0[50]);
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)(v0 + 22));
    sub_10001DAB4(v53, (uint64_t *)&unk_10163B1D0);
LABEL_22:
    v54 = (void *)swift_task_alloc();
    v0[69] = v54;
    void *v54 = v0;
    v54[1] = sub_100A679B4;
    uint64_t v55 = v0[56];
    uint64_t v56 = v0[57];
    return AsyncStream.Iterator.next(isolation:)(v55, 0, 0, v56);
  }
  uint64_t v37 = v0[52];
  uint64_t v38 = v0[49];
  uint64_t v39 = v0[50];
  v36(v38, 0, 1, v39);
  sub_100A68E20(v38, v37, (uint64_t (*)(void))type metadata accessor for LocalFindableAccessoryRecord);
  id v40 = [objc_allocWithZone((Class)SPPeripheralConnectionMaterial) init];
  v0[70] = v40;
  uint64_t v41 = v37 + *(int *)(v39 + 52);
  v42 = (uint64_t *)(v41 + *(int *)(type metadata accessor for PeripheralConnectionMaterial(0) + 20));
  uint64_t v43 = *v42;
  unint64_t v44 = v42[1];
  sub_1000361E0(*v42, v44);
  Class isa = Data._bridgeToObjectiveC()().super.isa;
  sub_10001CFB8(v43, v44);
  [v40 setIrkData:isa];

  uint64_t v46 = MACAddress.bluetoothAddressWithType.getter();
  unint64_t v48 = v47;
  Class v49 = Data._bridgeToObjectiveC()().super.isa;
  sub_10001CFB8(v46, v48);
  [v40 setBtAddressWithTypeData:v49];

  v50 = (void *)swift_task_alloc();
  v0[71] = v50;
  uint64_t v51 = sub_10000588C(&qword_101656E28);
  void *v50 = v0;
  v50[1] = sub_100A68274;
  uint64_t v52 = v0[44];
  return withCheckedContinuation<A>(isolation:function:_:)(v0 + 40, 0, 0, 0x736553636E797361, 0xED0000736E6F6973, sub_100A68E88, v52, v51);
}

uint64_t sub_100A68274()
{
  swift_task_dealloc();
  return _swift_task_switch(sub_100A68370, 0, 0);
}

uint64_t sub_100A68370(uint64_t a1, uint64_t (*a2)(void), uint64_t a3)
{
  uint64_t v4 = *(void *)(v3 + 320);
  if ((v4 & 0xC000000000000001) != 0)
  {
    __CocoaSet.makeIterator()();
    sub_10000588C(&qword_101656E30);
    sub_100A68E90();
    a1 = Set.Iterator.init(_cocoa:)();
    uint64_t v4 = *(void *)(v3 + 16);
    uint64_t v5 = *(void *)(v3 + 24);
    uint64_t v6 = *(void *)(v3 + 32);
    uint64_t v7 = *(void *)(v3 + 40);
    unint64_t v8 = *(void *)(v3 + 48);
    *(void *)(v3 + 592) = v6;
    *(void *)(v3 + 584) = v5;
    *(void *)(v3 + 576) = v4;
    if (v4 < 0)
    {
      uint64_t v23 = __CocoaSet.Iterator.next()();
      if (!v23) {
        goto LABEL_30;
      }
      *(void *)(v3 + 344) = v23;
      swift_unknownObjectRetain();
      sub_10000588C(&qword_101656E30);
      swift_dynamicCast();
      uint64_t v12 = *(void *)(v3 + 336);
      swift_unknownObjectRelease();
      uint64_t v11 = v7;
      uint64_t v9 = v8;
      goto LABEL_6;
    }
    if (v8) {
      goto LABEL_4;
    }
  }
  else
  {
    uint64_t v7 = 0;
    uint64_t v14 = -1;
    uint64_t v15 = -1 << *(unsigned char *)(v4 + 32);
    uint64_t v6 = ~v15;
    uint64_t v5 = v4 + 56;
    uint64_t v16 = *(void *)(v4 + 56);
    uint64_t v17 = -v15;
    BOOL v18 = v17 < 64;
    uint64_t v19 = -1 << v17;
    *(void *)(v3 + 592) = v6;
    if (v18) {
      uint64_t v14 = ~v19;
    }
    unint64_t v8 = v14 & v16;
    *(void *)(v3 + 584) = v5;
    *(void *)(v3 + 576) = v4;
    if ((v14 & v16) != 0)
    {
LABEL_4:
      uint64_t v9 = (v8 - 1) & v8;
      unint64_t v10 = __clz(__rbit64(v8)) | (v7 << 6);
      uint64_t v11 = v7;
LABEL_5:
      uint64_t v12 = *(void *)(*(void *)(v4 + 48) + 8 * v10);
      swift_retain();
LABEL_6:
      *(void *)(v3 + 616) = v9;
      *(void *)(v3 + 608) = v11;
      *(void *)(v3 + 600) = v12;
      if (v12)
      {
        uint64_t v13 = (void *)swift_task_alloc();
        *(void *)(v3 + 624) = v13;
        *uint64_t v13 = v3;
        v13[1] = sub_100A686F0;
        a2 = SharingCircleWildAdvertisementKey.init(key:);
        a1 = v3 + 328;
        a3 = 0;
        return XPCSession.proxy(errorHandler:)(a1, a2, a3);
      }
      goto LABEL_30;
    }
  }
  int64_t v20 = v7 + 1;
  if (__OFADD__(v7, 1))
  {
    __break(1u);
    return XPCSession.proxy(errorHandler:)(a1, a2, a3);
  }
  int64_t v21 = (unint64_t)(v6 + 64) >> 6;
  if (v20 < v21)
  {
    unint64_t v22 = *(void *)(v5 + 8 * v20);
    uint64_t v11 = v7 + 1;
    if (!v22)
    {
      uint64_t v11 = v7 + 2;
      if (v7 + 2 >= v21) {
        goto LABEL_30;
      }
      unint64_t v22 = *(void *)(v5 + 8 * v11);
      if (!v22)
      {
        uint64_t v11 = v7 + 3;
        if (v7 + 3 >= v21) {
          goto LABEL_30;
        }
        unint64_t v22 = *(void *)(v5 + 8 * v11);
        if (!v22)
        {
          uint64_t v11 = v7 + 4;
          if (v7 + 4 >= v21) {
            goto LABEL_30;
          }
          unint64_t v22 = *(void *)(v5 + 8 * v11);
          if (!v22)
          {
            uint64_t v24 = v7 + 5;
            while (v21 != v24)
            {
              unint64_t v22 = *(void *)(v5 + 8 * v24++);
              if (v22)
              {
                uint64_t v11 = v24 - 1;
                goto LABEL_17;
              }
            }
            goto LABEL_30;
          }
        }
      }
    }
LABEL_17:
    uint64_t v9 = (v22 - 1) & v22;
    unint64_t v10 = __clz(__rbit64(v22)) + (v11 << 6);
    goto LABEL_5;
  }
LABEL_30:
  uint64_t v25 = *(void *)(v3 + 416);

  sub_100132C20();
  sub_100A68EEC(v25);
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v3 + 176);
  v26 = (void *)swift_task_alloc();
  *(void *)(v3 + 552) = v26;
  void *v26 = v3;
  v26[1] = sub_100A679B4;
  uint64_t v27 = *(void *)(v3 + 448);
  uint64_t v28 = *(void *)(v3 + 456);
  return AsyncStream.Iterator.next(isolation:)(v27, 0, 0, v28);
}

uint64_t sub_100A686F0()
{
  swift_task_dealloc();
  return _swift_task_switch(sub_100A687EC, 0, 0);
}

uint64_t sub_100A687EC()
{
  uint64_t v1 = (void *)v0[41];
  if (v1)
  {
    uint64_t v2 = v0[70];
    Class isa = UUID._bridgeToObjectiveC()().super.isa;
    [v1 updatedConnectionMaterialForAccessory:isa connectionMaterial:v2];
    swift_release();

    uint64_t v4 = swift_unknownObjectRelease();
  }
  else
  {
    uint64_t v4 = swift_release();
  }
  unint64_t v7 = v0[77];
  uint64_t v8 = v0[76];
  uint64_t v9 = v0[72];
  if (v9 < 0)
  {
    uint64_t v14 = __CocoaSet.Iterator.next()();
    if (!v14) {
      goto LABEL_28;
    }
    v0[43] = v14;
    swift_unknownObjectRetain();
    sub_10000588C(&qword_101656E30);
    swift_dynamicCast();
    uint64_t v13 = v0[42];
    swift_unknownObjectRelease();
    uint64_t v12 = v8;
    uint64_t v10 = v7;
    goto LABEL_10;
  }
  if (v7)
  {
    uint64_t v10 = (v7 - 1) & v7;
    unint64_t v11 = __clz(__rbit64(v7)) | (v8 << 6);
    uint64_t v12 = v0[76];
LABEL_7:
    uint64_t v13 = *(void *)(*(void *)(v9 + 48) + 8 * v11);
    swift_retain();
LABEL_10:
    v0[77] = v10;
    v0[76] = v12;
    v0[75] = v13;
    if (v13)
    {
      uint64_t v15 = (void *)swift_task_alloc();
      v0[78] = v15;
      *uint64_t v15 = v0;
      v15[1] = sub_100A686F0;
      uint64_t v5 = SharingCircleWildAdvertisementKey.init(key:);
      uint64_t v4 = (uint64_t)(v0 + 41);
      uint64_t v6 = 0;
      return XPCSession.proxy(errorHandler:)(v4, v5, v6);
    }
    goto LABEL_28;
  }
  int64_t v16 = v8 + 1;
  if (__OFADD__(v8, 1))
  {
    __break(1u);
    return XPCSession.proxy(errorHandler:)(v4, v5, v6);
  }
  int64_t v17 = (unint64_t)(v0[74] + 64) >> 6;
  if (v16 < v17)
  {
    uint64_t v18 = v0[73];
    unint64_t v19 = *(void *)(v18 + 8 * v16);
    uint64_t v12 = v8 + 1;
    if (!v19)
    {
      uint64_t v12 = v8 + 2;
      if (v8 + 2 >= v17) {
        goto LABEL_28;
      }
      unint64_t v19 = *(void *)(v18 + 8 * v12);
      if (!v19)
      {
        uint64_t v12 = v8 + 3;
        if (v8 + 3 >= v17) {
          goto LABEL_28;
        }
        unint64_t v19 = *(void *)(v18 + 8 * v12);
        if (!v19)
        {
          uint64_t v12 = v8 + 4;
          if (v8 + 4 >= v17) {
            goto LABEL_28;
          }
          unint64_t v19 = *(void *)(v18 + 8 * v12);
          if (!v19)
          {
            uint64_t v20 = v8 + 5;
            while (v17 != v20)
            {
              unint64_t v19 = *(void *)(v18 + 8 * v20++);
              if (v19)
              {
                uint64_t v12 = v20 - 1;
                goto LABEL_17;
              }
            }
            goto LABEL_28;
          }
        }
      }
    }
LABEL_17:
    uint64_t v10 = (v19 - 1) & v19;
    unint64_t v11 = __clz(__rbit64(v19)) + (v12 << 6);
    goto LABEL_7;
  }
LABEL_28:
  uint64_t v21 = v0[52];

  sub_100132C20();
  sub_100A68EEC(v21);
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)(v0 + 22));
  unint64_t v22 = (void *)swift_task_alloc();
  v0[69] = v22;
  *unint64_t v22 = v0;
  v22[1] = sub_100A679B4;
  uint64_t v23 = v0[56];
  uint64_t v24 = v0[57];
  return AsyncStream.Iterator.next(isolation:)(v23, 0, 0, v24);
}

uint64_t sub_100A68B30()
{
  return swift_release();
}

uint64_t sub_100A68B38()
{
  swift_bridgeObjectRelease();
  swift_release();

  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for LocalFindableConnectionMaterialMonitoringSession()
{
  uint64_t result = qword_101656CE8;
  if (!qword_101656CE8) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t sub_100A68BD4()
{
  return swift_initClassMetadata2();
}

uint64_t sub_100A68C18()
{
  swift_release();

  return _swift_deallocObject(v0, 32, 7);
}

uint64_t sub_100A68C50()
{
  uint64_t v2 = *(void *)(v0 + 16);
  uint64_t v3 = *(void *)(v0 + 24);
  uint64_t v4 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v4;
  void *v4 = v1;
  v4[1] = sub_10001D2E4;
  return sub_100A66E3C(v2, v3);
}

uint64_t sub_100A68CE8()
{
  swift_unknownObjectRelease();
  swift_release();

  return _swift_deallocObject(v0, 48, 7);
}

uint64_t sub_100A68D28(uint64_t a1)
{
  uint64_t v4 = v1[2];
  uint64_t v5 = v1[3];
  uint64_t v6 = v1[4];
  unint64_t v7 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v7;
  *unint64_t v7 = v2;
  v7[1] = sub_10001D2E4;
  return sub_100A66FF4(a1, v4, v5, v6);
}

uint64_t sub_100A68DE8()
{
  swift_weakDestroy();

  return _swift_deallocObject(v0, 24, 7);
}

uint64_t sub_100A68E20(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 32))(a2, a1, v5);
  return a2;
}

uint64_t sub_100A68E88(uint64_t a1)
{
  return sub_1009C48DC(a1, v1);
}

unint64_t sub_100A68E90()
{
  unint64_t result = qword_10165F110;
  if (!qword_10165F110)
  {
    sub_10000592C(&qword_101656E30);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10165F110);
  }
  return result;
}

uint64_t sub_100A68EEC(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for LocalFindableAccessoryRecord();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

ValueMetadata *type metadata accessor for MetricsResponse()
{
  return &type metadata for MetricsResponse;
}

uint64_t sub_100A68F58(uint64_t a1)
{
  unint64_t v2 = sub_100A690E0();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_100A68F94(uint64_t a1)
{
  unint64_t v2 = sub_100A690E0();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_100A68FD0(void *a1)
{
  uint64_t v2 = sub_10000588C(&qword_101656E38);
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  uint64_t v5 = (char *)&v7 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10001CD44(a1, a1[3]);
  sub_100A690E0();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  return (*(uint64_t (**)(char *, uint64_t))(v3 + 8))(v5, v2);
}

unint64_t sub_100A690E0()
{
  unint64_t result = qword_101656E40;
  if (!qword_101656E40)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_101656E40);
  }
  return result;
}

ValueMetadata *type metadata accessor for MetricsResponse.CodingKeys()
{
  return &type metadata for MetricsResponse.CodingKeys;
}

unint64_t sub_100A69148()
{
  unint64_t result = qword_101656E48;
  if (!qword_101656E48)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_101656E48);
  }
  return result;
}

unint64_t sub_100A691A0()
{
  unint64_t result = qword_101656E50;
  if (!qword_101656E50)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_101656E50);
  }
  return result;
}

uint64_t sub_100A691F4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int64_t v5 = 0;
  *(void *)(v3 + 24) = a1;
  *(void *)(v3 + 32) = a2;
  uint64_t v6 = a3 + 64;
  uint64_t v7 = 1 << *(unsigned char *)(a3 + 32);
  uint64_t v8 = -1;
  if (v7 < 64) {
    uint64_t v8 = ~(-1 << v7);
  }
  unint64_t v9 = v8 & *(void *)(a3 + 64);
  int64_t v56 = (unint64_t)(v7 + 63) >> 6;
  uint64_t v10 = _swiftEmptyDictionarySingleton;
  uint64_t v55 = a3 + 64;
  while (v9)
  {
    unint64_t v13 = __clz(__rbit64(v9));
    v9 &= v9 - 1;
    unint64_t v14 = v13 | (v5 << 6);
LABEL_20:
    uint64_t v18 = (uint64_t *)(*(void *)(a3 + 48) + 16 * v14);
    uint64_t v19 = *v18;
    unint64_t v20 = v18[1];
    uint64_t v12 = HIBYTE(v20) & 0xF;
    uint64_t v21 = v19 & 0xFFFFFFFFFFFFLL;
    if ((v20 & 0x2000000000000000) != 0) {
      uint64_t v22 = HIBYTE(v20) & 0xF;
    }
    else {
      uint64_t v22 = v19 & 0xFFFFFFFFFFFFLL;
    }
    if (v22)
    {
      uint64_t v23 = *(void *)(*(void *)(a3 + 56) + 8 * v14);
      if ((v20 & 0x1000000000000000) != 0)
      {
        swift_bridgeObjectRetain();
        uint64_t v11 = sub_10048CBF0(v19, v20, 10);
        char v52 = v51;
        swift_bridgeObjectRelease();
        if ((v52 & 1) == 0)
        {
LABEL_30:
          char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
          v57[0] = v10;
          unint64_t v29 = sub_100723EF4(v11);
          uint64_t v30 = v10[2];
          BOOL v31 = (v28 & 1) == 0;
          uint64_t v32 = v30 + v31;
          if (__OFADD__(v30, v31)) {
            goto LABEL_92;
          }
          char v33 = v28;
          if (v10[3] >= v32)
          {
            if ((isUniquelyReferenced_nonNull_native & 1) == 0) {
              sub_100E805C8();
            }
          }
          else
          {
            sub_100E69AB0(v32, isUniquelyReferenced_nonNull_native);
            unint64_t v34 = sub_100723EF4(v11);
            if ((v33 & 1) != (v35 & 1)) {
              goto LABEL_94;
            }
            unint64_t v29 = v34;
          }
          uint64_t v6 = v55;
          uint64_t v10 = (void *)v57[0];
          if (v33)
          {
            *(void *)(*(void *)(v57[0] + 56) + 8 * v29) = v23;
          }
          else
          {
            *(void *)(v57[0] + 8 * (v29 >> 6) + 64) |= 1 << v29;
            uint64_t v48 = 8 * v29;
            *(void *)(v10[6] + v48) = v11;
            *(void *)(v10[7] + v48) = v23;
            uint64_t v49 = v10[2];
            BOOL v15 = __OFADD__(v49, 1);
            uint64_t v50 = v49 + 1;
            if (v15) {
              goto LABEL_93;
            }
            v10[2] = v50;
          }
          swift_bridgeObjectRelease();
        }
      }
      else if ((v20 & 0x2000000000000000) != 0)
      {
        v57[0] = v19;
        v57[1] = v20 & 0xFFFFFFFFFFFFFFLL;
        if (v19 == 43)
        {
          if (!v12) {
            goto LABEL_90;
          }
          if (v12 == 1)
          {
LABEL_86:
            uint64_t v11 = 0;
            goto LABEL_6;
          }
          if ((BYTE1(v19) - 48) <= 9u)
          {
            uint64_t v11 = (BYTE1(v19) - 48);
            if (v12 == 2) {
              goto LABEL_56;
            }
            if ((BYTE2(v19) - 48) <= 9u)
            {
              uint64_t v11 = 10 * (BYTE1(v19) - 48) + (BYTE2(v19) - 48);
              uint64_t v36 = v12 - 3;
              if (v12 == 3) {
                goto LABEL_56;
              }
              uint64_t v37 = (unsigned __int8 *)v57 + 3;
              while (1)
              {
                unsigned int v38 = *v37 - 48;
                if (v38 > 9) {
                  break;
                }
                uint64_t v39 = 10 * v11;
                if ((unsigned __int128)(v11 * (__int128)10) >> 64 != (10 * v11) >> 63) {
                  break;
                }
                uint64_t v11 = v39 + v38;
                if (__OFADD__(v39, v38)) {
                  break;
                }
                LOBYTE(v12) = 0;
                ++v37;
                if (!--v36) {
                  goto LABEL_6;
                }
              }
            }
          }
        }
        else if (v19 == 45)
        {
          if (!v12) {
            goto LABEL_89;
          }
          if (v12 == 1) {
            goto LABEL_86;
          }
          if ((BYTE1(v19) - 48) <= 9u)
          {
            if (v12 == 2)
            {
              LOBYTE(v12) = 0;
              uint64_t v11 = -(uint64_t)(BYTE1(v19) - 48);
              goto LABEL_6;
            }
            if ((BYTE2(v19) - 48) <= 9u)
            {
              uint64_t v11 = -10 * (BYTE1(v19) - 48) - (BYTE2(v19) - 48);
              uint64_t v40 = v12 - 3;
              if (v12 == 3) {
                goto LABEL_56;
              }
              uint64_t v41 = (unsigned __int8 *)v57 + 3;
              while (1)
              {
                unsigned int v42 = *v41 - 48;
                if (v42 > 9) {
                  break;
                }
                uint64_t v43 = 10 * v11;
                if ((unsigned __int128)(v11 * (__int128)10) >> 64 != (10 * v11) >> 63) {
                  break;
                }
                uint64_t v11 = v43 - v42;
                if (__OFSUB__(v43, v42)) {
                  break;
                }
                LOBYTE(v12) = 0;
                ++v41;
                if (!--v40) {
                  goto LABEL_6;
                }
              }
            }
          }
        }
        else if (v12 && (v19 - 48) <= 9u)
        {
          uint64_t v11 = (v19 - 48);
          if (v12 == 1) {
            goto LABEL_56;
          }
          if ((BYTE1(v19) - 48) <= 9u)
          {
            uint64_t v11 = 10 * (v19 - 48) + (BYTE1(v19) - 48);
            uint64_t v44 = v12 - 2;
            if (v12 == 2)
            {
LABEL_56:
              LOBYTE(v12) = 0;
              goto LABEL_6;
            }
            v45 = (unsigned __int8 *)v57 + 2;
            while (1)
            {
              unsigned int v46 = *v45 - 48;
              if (v46 > 9) {
                break;
              }
              uint64_t v47 = 10 * v11;
              if ((unsigned __int128)(v11 * (__int128)10) >> 64 != (10 * v11) >> 63) {
                break;
              }
              uint64_t v11 = v47 + v46;
              if (__OFADD__(v47, v46)) {
                break;
              }
              LOBYTE(v12) = 0;
              ++v45;
              if (!--v44) {
                goto LABEL_6;
              }
            }
          }
        }
        uint64_t v11 = 0;
        LOBYTE(v12) = 1;
LABEL_6:
        if ((v12 & 1) == 0) {
          goto LABEL_30;
        }
      }
      else
      {
        if ((v19 & 0x1000000000000000) != 0) {
          uint64_t v24 = (unsigned __int8 *)((v20 & 0xFFFFFFFFFFFFFFFLL) + 32);
        }
        else {
          uint64_t v24 = (unsigned __int8 *)_StringObject.sharedUTF8.getter();
        }
        uint64_t v25 = sub_10048C9FC(v24, v21, 10);
        if ((v26 & 1) == 0)
        {
          uint64_t v11 = (uint64_t)v25;
          goto LABEL_30;
        }
      }
    }
  }
  BOOL v15 = __OFADD__(v5++, 1);
  if (v15)
  {
    __break(1u);
LABEL_89:
    __break(1u);
LABEL_90:
    __break(1u);
    goto LABEL_91;
  }
  if (v5 >= v56) {
    goto LABEL_87;
  }
  unint64_t v16 = *(void *)(v6 + 8 * v5);
  if (v16)
  {
LABEL_19:
    unint64_t v9 = (v16 - 1) & v16;
    unint64_t v14 = __clz(__rbit64(v16)) + (v5 << 6);
    goto LABEL_20;
  }
  int64_t v17 = v5 + 1;
  if (v5 + 1 >= v56) {
    goto LABEL_87;
  }
  unint64_t v16 = *(void *)(v6 + 8 * v17);
  if (v16) {
    goto LABEL_18;
  }
  int64_t v17 = v5 + 2;
  if (v5 + 2 >= v56) {
    goto LABEL_87;
  }
  unint64_t v16 = *(void *)(v6 + 8 * v17);
  if (v16) {
    goto LABEL_18;
  }
  int64_t v17 = v5 + 3;
  if (v5 + 3 >= v56)
  {
LABEL_87:
    swift_release();
    uint64_t result = v54;
    *(void *)(v54 + 16) = v10;
    return result;
  }
  unint64_t v16 = *(void *)(v6 + 8 * v17);
  if (v16)
  {
LABEL_18:
    int64_t v5 = v17;
    goto LABEL_19;
  }
  while (1)
  {
    int64_t v5 = v17 + 1;
    if (__OFADD__(v17, 1)) {
      break;
    }
    if (v5 >= v56) {
      goto LABEL_87;
    }
    unint64_t v16 = *(void *)(v6 + 8 * v5);
    ++v17;
    if (v16) {
      goto LABEL_19;
    }
  }
LABEL_91:
  __break(1u);
LABEL_92:
  __break(1u);
LABEL_93:
  __break(1u);
LABEL_94:
  uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

unint64_t sub_100A69714()
{
  swift_beginAccess();
  uint64_t v1 = v0[2];
  uint64_t v2 = *(void *)(v1 + 64);
  uint64_t v32 = v1 + 64;
  uint64_t v3 = 1 << *(unsigned char *)(v1 + 32);
  uint64_t v4 = -1;
  if (v3 < 64) {
    uint64_t v4 = ~(-1 << v3);
  }
  unint64_t v5 = v4 & v2;
  int64_t v33 = (unint64_t)(v3 + 63) >> 6;
  uint64_t v34 = v0[2];
  swift_bridgeObjectRetain();
  int64_t v6 = 0;
  while (1)
  {
    if (v5)
    {
      unint64_t v7 = __clz(__rbit64(v5));
      v5 &= v5 - 1;
      unint64_t v8 = v7 | (v6 << 6);
    }
    else
    {
      int64_t v9 = v6 + 1;
      if (__OFADD__(v6, 1)) {
        goto LABEL_36;
      }
      if (v9 >= v33)
      {
LABEL_33:
        swift_release();
        sub_10000588C(&qword_101657070);
        uint64_t inited = swift_initStackObject();
        *(_OWORD *)(inited + 16) = xmmword_101342130;
        uint64_t v30 = v0[4];
        *(void *)(inited + 32) = v0[3];
        *(void *)(inited + 40) = v30;
        *(void *)(inited + 48) = _swiftEmptyDictionarySingleton;
        swift_bridgeObjectRetain();
        return sub_10092E1AC(inited);
      }
      unint64_t v10 = *(void *)(v32 + 8 * v9);
      ++v6;
      if (!v10)
      {
        int64_t v6 = v9 + 1;
        if (v9 + 1 >= v33) {
          goto LABEL_33;
        }
        unint64_t v10 = *(void *)(v32 + 8 * v6);
        if (!v10)
        {
          int64_t v6 = v9 + 2;
          if (v9 + 2 >= v33) {
            goto LABEL_33;
          }
          unint64_t v10 = *(void *)(v32 + 8 * v6);
          if (!v10)
          {
            int64_t v11 = v9 + 3;
            if (v11 >= v33) {
              goto LABEL_33;
            }
            unint64_t v10 = *(void *)(v32 + 8 * v11);
            if (!v10)
            {
              while (1)
              {
                int64_t v6 = v11 + 1;
                if (__OFADD__(v11, 1)) {
                  goto LABEL_37;
                }
                if (v6 >= v33) {
                  goto LABEL_33;
                }
                unint64_t v10 = *(void *)(v32 + 8 * v6);
                ++v11;
                if (v10) {
                  goto LABEL_21;
                }
              }
            }
            int64_t v6 = v11;
          }
        }
      }
LABEL_21:
      unint64_t v5 = (v10 - 1) & v10;
      unint64_t v8 = __clz(__rbit64(v10)) + (v6 << 6);
    }
    uint64_t v12 = *(void *)(*(void *)(v34 + 56) + 8 * v8);
    uint64_t v13 = dispatch thunk of CustomStringConvertible.description.getter();
    uint64_t v15 = v14;
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    unint64_t v18 = sub_100723FF4(v13, v15);
    uint64_t v19 = _swiftEmptyDictionarySingleton[2];
    BOOL v20 = (v17 & 1) == 0;
    uint64_t v21 = v19 + v20;
    if (__OFADD__(v19, v20)) {
      break;
    }
    char v22 = v17;
    if (_swiftEmptyDictionarySingleton[3] >= v21)
    {
      if (isUniquelyReferenced_nonNull_native)
      {
        if (v17) {
          goto LABEL_4;
        }
      }
      else
      {
        sub_100E7F96C();
        if (v22) {
          goto LABEL_4;
        }
      }
    }
    else
    {
      sub_100E68000(v21, isUniquelyReferenced_nonNull_native);
      uint64_t v23 = sub_100723FF4(v13, v15);
      if ((v22 & 1) != (v24 & 1)) {
        goto LABEL_38;
      }
      unint64_t v18 = v23;
      if (v22)
      {
LABEL_4:
        *(void *)(_swiftEmptyDictionarySingleton[7] + 8 * v18) = v12;
        goto LABEL_5;
      }
    }
    _swiftEmptyDictionarySingleton[(v18 >> 6) + 8] |= 1 << v18;
    uint64_t v25 = (uint64_t *)(_swiftEmptyDictionarySingleton[6] + 16 * v18);
    *uint64_t v25 = v13;
    v25[1] = v15;
    *(void *)(_swiftEmptyDictionarySingleton[7] + 8 * v18) = v12;
    uint64_t v26 = _swiftEmptyDictionarySingleton[2];
    BOOL v27 = __OFADD__(v26, 1);
    uint64_t v28 = v26 + 1;
    if (v27) {
      goto LABEL_35;
    }
    _swiftEmptyDictionarySingleton[2] = v28;
    swift_bridgeObjectRetain();
LABEL_5:
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  __break(1u);
LABEL_35:
  __break(1u);
LABEL_36:
  __break(1u);
LABEL_37:
  __break(1u);
LABEL_38:
  unint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

uint64_t sub_100A69A38()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for Failure()
{
  return self;
}

uint64_t sub_100A69A9C()
{
  type metadata accessor for FirmwareUpdateAlertCoordinator();
  uint64_t v0 = swift_allocObject();
  uint64_t result = sub_100A69AD8();
  qword_10170E9C0 = v0;
  return result;
}

uint64_t sub_100A69AD8()
{
  uint64_t v1 = sub_10000588C(&qword_101638CF0);
  __chkstk_darwin(v1 - 8);
  uint64_t v3 = (char *)&v65 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v80 = type metadata accessor for UUID();
  uint64_t v4 = *(void *)(v80 - 8);
  uint64_t v5 = __chkstk_darwin(v80);
  v75 = (char *)&v65 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = __chkstk_darwin(v5);
  int64_t v9 = (char *)&v65 - v8;
  __chkstk_darwin(v7);
  uint64_t v81 = (uint64_t)&v65 - v10;
  v0[2] = 0xD00000000000001BLL;
  v0[3] = 0x8000000101410C10;
  sub_10000588C(&qword_10163FFA8);
  uint64_t inited = swift_initStackObject();
  long long v79 = xmmword_101347BA0;
  *(_OWORD *)(inited + 16) = xmmword_101347BA0;
  *(void *)(inited + 32) = static String._unconditionallyBridgeFromObjectiveC(_:)();
  *(void *)(inited + 40) = v12;
  sub_10000588C((uint64_t *)&unk_101657C90);
  uint64_t v13 = swift_allocObject();
  *(_OWORD *)(v13 + 16) = v79;
  *(_OWORD *)(v13 + 32) = xmmword_101375B00;
  *(void *)(inited + 48) = v13;
  strcpy((char *)(inited + 56), "FirmwareUpdate");
  *(unsigned char *)(inited + 71) = -18;
  *(void *)(inited + 72) = &off_1015A0BE0;
  v0[5] = sub_10092E18C(inited);
  uint64_t v14 = swift_initStackObject();
  *(_OWORD *)(v14 + 16) = xmmword_101342130;
  *(void *)(v14 + 32) = static String._unconditionallyBridgeFromObjectiveC(_:)();
  *(void *)(v14 + 40) = v15;
  uint64_t v16 = swift_allocObject();
  *(_OWORD *)(v16 + 16) = xmmword_101347500;
  *(_OWORD *)(v16 + 32) = xmmword_101351D10;
  *(void *)(v16 + 48) = 3;
  *(void *)(v14 + 48) = v16;
  v0[6] = sub_10092E18C(v14);
  unint64_t v85 = sub_10092E198((uint64_t)_swiftEmptyArrayStorage);
  id v17 = [self standardUserDefaults];
  NSString v18 = String._bridgeToObjectiveC()();
  id v19 = [v17 objectForKey:v18];

  if (v19)
  {
    _bridgeAnyObjectToAny(_:)();
    swift_unknownObjectRelease();
  }
  else
  {
    memset(v83, 0, 32);
  }
  sub_10001D608((uint64_t)v83, (uint64_t)v84, (uint64_t *)&unk_101644360);
  uint64_t v20 = v80;
  if (!v84[3])
  {
    sub_10001DAB4((uint64_t)v84, (uint64_t *)&unk_101644360);
    goto LABEL_68;
  }
  sub_10000588C(&qword_101657078);
  if ((swift_dynamicCast() & 1) == 0)
  {
LABEL_68:
    v0[4] = v85;
    return (uint64_t)v0;
  }
  uint64_t result = v82;
  if (!*(void *)(v82 + 16))
  {
    swift_bridgeObjectRelease();
    goto LABEL_68;
  }
  v76 = v9;
  v66 = v0;
  int64_t v22 = 0;
  uint64_t v23 = *(void *)(v82 + 64);
  uint64_t v69 = v82 + 64;
  uint64_t v24 = 1 << *(unsigned char *)(v82 + 32);
  if (v24 < 64) {
    uint64_t v25 = ~(-1 << v24);
  }
  else {
    uint64_t v25 = -1;
  }
  unint64_t v26 = v25 & v23;
  int64_t v70 = (unint64_t)(v24 + 63) >> 6;
  v72 = (unsigned int (**)(char *, uint64_t, uint64_t))(v4 + 48);
  v68 = (uint64_t (**)(uint64_t, char *, uint64_t))(v4 + 32);
  BOOL v27 = (void (**)(uint64_t, uint64_t, uint64_t))(v4 + 16);
  uint64_t v28 = (void (**)(uint64_t, uint64_t))(v4 + 8);
  long long v79 = xmmword_101347EF0;
  uint64_t v29 = (uint64_t)v75;
  v67 = v3;
  uint64_t v71 = v82;
  while (1)
  {
    if (v26)
    {
      uint64_t v73 = (v26 - 1) & v26;
      int64_t v74 = v22;
      unint64_t v30 = __clz(__rbit64(v26)) | (v22 << 6);
      goto LABEL_29;
    }
    int64_t v31 = v22 + 1;
    if (__OFADD__(v22, 1)) {
      goto LABEL_71;
    }
    if (v31 >= v70)
    {
LABEL_66:
      swift_release();
      uint64_t v0 = v66;
      goto LABEL_68;
    }
    unint64_t v32 = *(void *)(v69 + 8 * v31);
    int64_t v33 = v22 + 1;
    if (v32) {
      goto LABEL_28;
    }
    int64_t v33 = v22 + 2;
    if (v22 + 2 >= v70) {
      goto LABEL_66;
    }
    unint64_t v32 = *(void *)(v69 + 8 * v33);
    if (v32) {
      goto LABEL_28;
    }
    int64_t v33 = v22 + 3;
    if (v22 + 3 >= v70) {
      goto LABEL_66;
    }
    unint64_t v32 = *(void *)(v69 + 8 * v33);
    if (v32) {
      goto LABEL_28;
    }
    uint64_t v34 = v22 + 4;
    if (v22 + 4 >= v70) {
      goto LABEL_66;
    }
    unint64_t v32 = *(void *)(v69 + 8 * v34);
    if (!v32) {
      break;
    }
    int64_t v33 = v22 + 4;
LABEL_28:
    uint64_t v73 = (v32 - 1) & v32;
    int64_t v74 = v33;
    unint64_t v30 = __clz(__rbit64(v32)) + (v33 << 6);
LABEL_29:
    uint64_t v35 = *(void *)(*(void *)(result + 56) + 8 * v30);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    UUID.init(uuidString:)();
    swift_bridgeObjectRelease();
    if ((*v72)(v3, 1, v20) == 1)
    {
      swift_bridgeObjectRelease();
      sub_10001DAB4((uint64_t)v3, &qword_101638CF0);
      goto LABEL_12;
    }
    uint64_t result = (*v68)(v81, v3, v20);
    int64_t v36 = 0;
    uint64_t v37 = *(void *)(v35 + 64);
    uint64_t v77 = v35 + 64;
    uint64_t v38 = 1 << *(unsigned char *)(v35 + 32);
    if (v38 < 64) {
      uint64_t v39 = ~(-1 << v38);
    }
    else {
      uint64_t v39 = -1;
    }
    unint64_t v40 = v39 & v37;
    int64_t v78 = (unint64_t)(v38 + 63) >> 6;
    if ((v39 & v37) != 0)
    {
      do
      {
        while (1)
        {
          unint64_t v45 = __clz(__rbit64(v40));
          v40 &= v40 - 1;
          unint64_t v46 = v45 | (v36 << 6);
LABEL_51:
          uint64_t v50 = (uint64_t *)(*(void *)(v35 + 48) + 16 * v46);
          uint64_t v51 = *v50;
          uint64_t v52 = v50[1];
          uint64_t v53 = *(void *)(*(void *)(v35 + 56) + 8 * v46);
          type metadata accessor for Failure();
          uint64_t v54 = swift_allocObject();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          sub_100A691F4(v51, v52, v53);
          unint64_t v55 = v85;
          uint64_t v20 = v80;
          if (!*(void *)(v85 + 16)) {
            goto LABEL_35;
          }
          unint64_t v56 = sub_1007240CC(v81);
          if ((v57 & 1) == 0) {
            goto LABEL_35;
          }
          unint64_t v58 = *(void *)(*(void *)(v55 + 56) + 8 * v56);
          if (!(v58 >> 62)) {
            break;
          }
          swift_bridgeObjectRetain();
          uint64_t v64 = _CocoaArrayWrapper.endIndex.getter();
          swift_bridgeObjectRelease();
          if (v64) {
            goto LABEL_55;
          }
LABEL_35:
          (*v27)(v29, v81, v20);
          sub_10000588C(&qword_10166BD20);
          uint64_t v41 = swift_allocObject();
          *(_OWORD *)(v41 + 16) = v79;
          *(void *)(v41 + 32) = v54;
          v84[0] = v41;
          specialized Array._endMutation()();
          uint64_t v42 = v84[0];
          swift_retain();
          unint64_t v43 = v85;
          char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
          v84[0] = v43;
          sub_10016D3B0(v42, v29, isUniquelyReferenced_nonNull_native);
          unint64_t v85 = v84[0];
          swift_bridgeObjectRelease();
          (*v28)(v29, v20);
          uint64_t result = swift_release();
          if (!v40) {
            goto LABEL_37;
          }
        }
        if (!*(void *)((v58 & 0xFFFFFFFFFFFFFF8) + 0x10)) {
          goto LABEL_35;
        }
LABEL_55:
        uint64_t v59 = v76;
        (*v27)((uint64_t)v76, v81, v20);
        uint64_t v60 = v20;
        v62 = sub_1010DBCA4(v84);
        if (*v61)
        {
          v63 = v61;
          swift_retain();
          specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
          if (*(void *)((*v63 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((*v63 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
            specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
          }
          specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
          specialized Array._endMutation()();
          ((void (*)(void *, void))v62)(v84, 0);
          swift_release();
          uint64_t v20 = v80;
          uint64_t result = ((uint64_t (*)(char *, uint64_t))*v28)(v76, v80);
        }
        else
        {
          ((void (*)(void *, void))v62)(v84, 0);
          swift_release();
          uint64_t result = ((uint64_t (*)(char *, uint64_t))*v28)(v59, v60);
          uint64_t v20 = v60;
        }
        uint64_t v29 = (uint64_t)v75;
      }
      while (v40);
    }
LABEL_37:
    int64_t v47 = v36 + 1;
    if (__OFADD__(v36, 1))
    {
      __break(1u);
LABEL_70:
      __break(1u);
LABEL_71:
      __break(1u);
      goto LABEL_72;
    }
    if (v47 < v78)
    {
      unint64_t v48 = *(void *)(v77 + 8 * v47);
      ++v36;
      if (v48) {
        goto LABEL_50;
      }
      int64_t v36 = v47 + 1;
      if (v47 + 1 < v78)
      {
        unint64_t v48 = *(void *)(v77 + 8 * v36);
        if (v48) {
          goto LABEL_50;
        }
        int64_t v36 = v47 + 2;
        if (v47 + 2 < v78)
        {
          unint64_t v48 = *(void *)(v77 + 8 * v36);
          if (v48) {
            goto LABEL_50;
          }
          int64_t v49 = v47 + 3;
          if (v49 < v78)
          {
            unint64_t v48 = *(void *)(v77 + 8 * v49);
            if (v48)
            {
              int64_t v36 = v49;
LABEL_50:
              unint64_t v40 = (v48 - 1) & v48;
              unint64_t v46 = __clz(__rbit64(v48)) + (v36 << 6);
              goto LABEL_51;
            }
            while (1)
            {
              int64_t v36 = v49 + 1;
              if (__OFADD__(v49, 1)) {
                goto LABEL_70;
              }
              if (v36 >= v78) {
                break;
              }
              unint64_t v48 = *(void *)(v77 + 8 * v36);
              ++v49;
              if (v48) {
                goto LABEL_50;
              }
            }
          }
        }
      }
    }
    swift_release();
    (*v28)(v81, v20);
    uint64_t v3 = v67;
LABEL_12:
    uint64_t result = v71;
    int64_t v22 = v74;
    unint64_t v26 = v73;
  }
  while (1)
  {
    int64_t v33 = v34 + 1;
    if (__OFADD__(v34, 1)) {
      break;
    }
    if (v33 >= v70) {
      goto LABEL_66;
    }
    unint64_t v32 = *(void *)(v69 + 8 * v33);
    ++v34;
    if (v32) {
      goto LABEL_28;
    }
  }
LABEL_72:
  __break(1u);
  return result;
}

void sub_100A6A540()
{
  uint64_t v1 = type metadata accessor for UUID();
  uint64_t v2 = *(void *)(v1 - 8);
  __chkstk_darwin(v1);
  uint64_t v52 = (char *)&v38 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = sub_10000588C(&qword_101657058);
  uint64_t v5 = __chkstk_darwin(v4 - 8);
  uint64_t v7 = (char *)&v38 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5);
  int64_t v9 = (char *)&v38 - v8;
  unint64_t v10 = sub_10092E1B8((uint64_t)_swiftEmptyArrayStorage);
  uint64_t v11 = *(void *)(v0 + 32);
  uint64_t v12 = *(void *)(v11 + 64);
  uint64_t v39 = v0;
  uint64_t v40 = v11 + 64;
  uint64_t v13 = 1 << *(unsigned char *)(v11 + 32);
  uint64_t v14 = -1;
  if (v13 < 64) {
    uint64_t v14 = ~(-1 << v13);
  }
  unint64_t v15 = v14 & v12;
  uint64_t v42 = v2 + 16;
  uint64_t v43 = v2;
  int64_t v49 = (void (**)(char *, char *, uint64_t))(v2 + 32);
  uint64_t v44 = v11;
  unint64_t v45 = (void (**)(char *, uint64_t))(v2 + 8);
  int64_t v41 = (unint64_t)(v13 + 63) >> 6;
  int64_t v38 = v41 - 1;
  swift_bridgeObjectRetain();
  int64_t v50 = 0;
  int64_t v47 = v7;
  uint64_t v48 = v1;
  unint64_t v46 = v9;
  while (1)
  {
    if (v15)
    {
      unint64_t v16 = __clz(__rbit64(v15));
      uint64_t v17 = (v15 - 1) & v15;
      unint64_t v18 = v16 | (v50 << 6);
LABEL_7:
      uint64_t v19 = v44;
      (*(void (**)(char *, unint64_t, uint64_t))(v43 + 16))(v7, *(void *)(v44 + 48) + *(void *)(v43 + 72) * v18, v1);
      uint64_t v20 = *(void *)(v19 + 56);
      uint64_t v21 = sub_10000588C(&qword_101657060);
      *(void *)&v7[*(int *)(v21 + 48)] = *(void *)(v20 + 8 * v18);
      (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v21 - 8) + 56))(v7, 0, 1, v21);
      swift_bridgeObjectRetain();
      goto LABEL_26;
    }
    int64_t v22 = v50 + 1;
    if (__OFADD__(v50, 1)) {
      goto LABEL_39;
    }
    if (v22 < v41)
    {
      unint64_t v23 = *(void *)(v40 + 8 * v22);
      if (v23) {
        goto LABEL_11;
      }
      int64_t v24 = v50 + 2;
      ++v50;
      if (v22 + 1 < v41)
      {
        unint64_t v23 = *(void *)(v40 + 8 * v24);
        if (v23) {
          goto LABEL_14;
        }
        int64_t v50 = v22 + 1;
        if (v22 + 2 < v41)
        {
          unint64_t v23 = *(void *)(v40 + 8 * (v22 + 2));
          if (v23)
          {
            v22 += 2;
            goto LABEL_11;
          }
          int64_t v24 = v22 + 3;
          int64_t v50 = v22 + 2;
          if (v22 + 3 < v41) {
            break;
          }
        }
      }
    }
LABEL_25:
    uint64_t v25 = sub_10000588C(&qword_101657060);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v25 - 8) + 56))(v7, 1, 1, v25);
    uint64_t v17 = 0;
LABEL_26:
    sub_10001D608((uint64_t)v7, (uint64_t)v9, &qword_101657058);
    uint64_t v26 = sub_10000588C(&qword_101657060);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v26 - 8) + 48))(v9, 1, v26) == 1)
    {
      swift_release();
      id v35 = [self standardUserDefaults];
      sub_10000588C(&qword_101657068);
      Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
      swift_bridgeObjectRelease();
      NSString v37 = String._bridgeToObjectiveC()();
      [v35 setObject:isa forKey:v37];

      return;
    }
    unint64_t v27 = *(void *)&v9[*(int *)(v26 + 48)];
    (*v49)(v52, v9, v1);
    if (v27 >> 62)
    {
      swift_bridgeObjectRetain();
      uint64_t v28 = _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
      unint64_t v51 = v17;
      if (!v28) {
        goto LABEL_4;
      }
    }
    else
    {
      uint64_t v28 = *(void *)((v27 & 0xFFFFFFFFFFFFFF8) + 0x10);
      unint64_t v51 = v17;
      if (!v28) {
        goto LABEL_4;
      }
    }
    if (v28 < 1)
    {
      __break(1u);
LABEL_39:
      __break(1u);
      goto LABEL_40;
    }
    uint64_t v29 = 0;
    do
    {
      if ((v27 & 0xC000000000000001) != 0) {
        specialized _ArrayBuffer._getElementSlowPath(_:)();
      }
      else {
        swift_retain();
      }
      ++v29;
      uint64_t v30 = UUID.uuidString.getter();
      uint64_t v32 = v31;
      unint64_t v33 = sub_100A69714();
      char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      unint64_t v53 = v10;
      sub_10016D3F0(v33, v30, v32, isUniquelyReferenced_nonNull_native);
      unint64_t v10 = v53;
      swift_release();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
    }
    while (v28 != v29);
LABEL_4:
    swift_bridgeObjectRelease();
    uint64_t v1 = v48;
    (*v45)(v52, v48);
    int64_t v9 = v46;
    uint64_t v7 = v47;
    unint64_t v15 = v51;
  }
  unint64_t v23 = *(void *)(v40 + 8 * v24);
  if (v23)
  {
LABEL_14:
    int64_t v22 = v24;
LABEL_11:
    uint64_t v17 = (v23 - 1) & v23;
    unint64_t v18 = __clz(__rbit64(v23)) + (v22 << 6);
    int64_t v50 = v22;
    goto LABEL_7;
  }
  while (1)
  {
    int64_t v22 = v24 + 1;
    if (__OFADD__(v24, 1)) {
      break;
    }
    if (v22 >= v41)
    {
      int64_t v50 = v38;
      goto LABEL_25;
    }
    unint64_t v23 = *(void *)(v40 + 8 * v22);
    ++v24;
    if (v23) {
      goto LABEL_11;
    }
  }
LABEL_40:
  __break(1u);
}

void sub_100A6AB04(uint64_t a1)
{
  uint64_t v2 = *(void *)(v1 + 32);
  if (*(void *)(v2 + 16))
  {
    swift_bridgeObjectRetain();
    unint64_t v4 = sub_1007240CC(a1);
    if (v5)
    {
      unint64_t v6 = *(void *)(*(void *)(v2 + 56) + 8 * v4);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      if (v6 >> 62) {
        goto LABEL_56;
      }
      uint64_t v7 = *(void *)((v6 & 0xFFFFFFFFFFFFFF8) + 0x10);
      swift_bridgeObjectRetain();
      uint64_t v39 = v7;
      if (v7)
      {
        do
        {
          uint64_t v8 = 0;
          unint64_t v40 = v6 & 0xC000000000000001;
          unint64_t v38 = v6 + 32;
          while (1)
          {
            if (v40)
            {
              unint64_t v6 = specialized _ArrayBuffer._getElementSlowPath(_:)();
              BOOL v9 = __OFADD__(v8, 1);
              uint64_t v10 = v8 + 1;
              if (v9) {
                break;
              }
              goto LABEL_12;
            }
            unint64_t v6 = *(void *)(v38 + 8 * v8);
            swift_retain();
            BOOL v9 = __OFADD__(v8, 1);
            uint64_t v10 = v8 + 1;
            if (v9) {
              break;
            }
LABEL_12:
            uint64_t v41 = v10;
            uint64_t v11 = (void *)(v6 + 16);
            swift_beginAccess();
            uint64_t v12 = *(void *)(v6 + 16);
            uint64_t v13 = v12 + 64;
            uint64_t v14 = 1 << *(unsigned char *)(v12 + 32);
            if (v14 < 64) {
              uint64_t v15 = ~(-1 << v14);
            }
            else {
              uint64_t v15 = -1;
            }
            unint64_t v16 = v15 & *(void *)(v12 + 64);
            int64_t v42 = (unint64_t)(v14 + 63) >> 6;
            swift_bridgeObjectRetain_n();
            int64_t v17 = 0;
            while (1)
            {
              if (v16)
              {
                unint64_t v18 = __clz(__rbit64(v16));
                v16 &= v16 - 1;
                unint64_t v19 = v18 | (v17 << 6);
                goto LABEL_38;
              }
              int64_t v20 = v17 + 1;
              if (__OFADD__(v17, 1)) {
                goto LABEL_53;
              }
              if (v20 >= v42) {
                break;
              }
              unint64_t v21 = *(void *)(v13 + 8 * v20);
              ++v17;
              if (!v21)
              {
                int64_t v17 = v20 + 1;
                if (v20 + 1 >= v42) {
                  break;
                }
                unint64_t v21 = *(void *)(v13 + 8 * v17);
                if (!v21)
                {
                  int64_t v17 = v20 + 2;
                  if (v20 + 2 >= v42) {
                    break;
                  }
                  unint64_t v21 = *(void *)(v13 + 8 * v17);
                  if (!v21)
                  {
                    int64_t v17 = v20 + 3;
                    if (v20 + 3 >= v42) {
                      break;
                    }
                    unint64_t v21 = *(void *)(v13 + 8 * v17);
                    if (!v21)
                    {
                      int64_t v17 = v20 + 4;
                      if (v20 + 4 >= v42) {
                        break;
                      }
                      unint64_t v21 = *(void *)(v13 + 8 * v17);
                      if (!v21)
                      {
                        int64_t v22 = v20 + 5;
                        if (v22 >= v42) {
                          break;
                        }
                        unint64_t v21 = *(void *)(v13 + 8 * v22);
                        if (!v21)
                        {
                          while (1)
                          {
                            int64_t v17 = v22 + 1;
                            if (__OFADD__(v22, 1)) {
                              goto LABEL_55;
                            }
                            if (v17 >= v42) {
                              goto LABEL_6;
                            }
                            unint64_t v21 = *(void *)(v13 + 8 * v17);
                            ++v22;
                            if (v21) {
                              goto LABEL_37;
                            }
                          }
                        }
                        int64_t v17 = v22;
                      }
                    }
                  }
                }
              }
LABEL_37:
              unint64_t v16 = (v21 - 1) & v21;
              unint64_t v19 = __clz(__rbit64(v21)) + (v17 << 6);
LABEL_38:
              uint64_t v23 = *(void *)(*(void *)(v12 + 48) + 8 * v19);
              swift_beginAccess();
              char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
              uint64_t v43 = (void *)*v11;
              unint64_t v6 = (unint64_t)v43;
              *uint64_t v11 = 0x8000000000000000;
              unint64_t v26 = sub_100723EF4(v23);
              uint64_t v27 = *(void *)(v6 + 16);
              BOOL v28 = (v25 & 1) == 0;
              uint64_t v29 = v27 + v28;
              if (__OFADD__(v27, v28))
              {
                __break(1u);
LABEL_52:
                __break(1u);
LABEL_53:
                __break(1u);
                goto LABEL_54;
              }
              char v30 = v25;
              if (*(void *)(v6 + 24) >= v29)
              {
                if (isUniquelyReferenced_nonNull_native)
                {
                  unint64_t v33 = v43;
                  if (v25) {
                    goto LABEL_16;
                  }
                }
                else
                {
                  unint64_t v6 = (unint64_t)&v43;
                  sub_100E805C8();
                  unint64_t v33 = v43;
                  if (v30) {
                    goto LABEL_16;
                  }
                }
              }
              else
              {
                sub_100E69AB0(v29, isUniquelyReferenced_nonNull_native);
                unint64_t v6 = (unint64_t)v43;
                unint64_t v31 = sub_100723EF4(v23);
                if ((v30 & 1) != (v32 & 1))
                {
                  KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
                  __break(1u);
                  return;
                }
                unint64_t v26 = v31;
                unint64_t v33 = v43;
                if (v30)
                {
LABEL_16:
                  *(void *)(v33[7] + 8 * v26) = 0;
                  goto LABEL_17;
                }
              }
              v33[(v26 >> 6) + 8] |= 1 << v26;
              uint64_t v34 = 8 * v26;
              *(void *)(v33[6] + v34) = v23;
              *(void *)(v33[7] + v34) = 0;
              uint64_t v35 = v33[2];
              BOOL v9 = __OFADD__(v35, 1);
              uint64_t v36 = v35 + 1;
              if (v9) {
                goto LABEL_52;
              }
              v33[2] = v36;
LABEL_17:
              *uint64_t v11 = v33;
              swift_bridgeObjectRelease();
              swift_endAccess();
            }
LABEL_6:
            swift_release();
            swift_bridgeObjectRelease();
            swift_release();
            uint64_t v8 = v41;
            if (v41 == v39) {
              goto LABEL_57;
            }
          }
LABEL_54:
          __break(1u);
LABEL_55:
          __break(1u);
LABEL_56:
          swift_bridgeObjectRetain_n();
          uint64_t v37 = _CocoaArrayWrapper.endIndex.getter();
          swift_bridgeObjectRelease();
          uint64_t v39 = v37;
        }
        while (v37);
      }
LABEL_57:
      swift_bridgeObjectRelease_n();
    }
    else
    {
      swift_bridgeObjectRelease();
    }
  }
  sub_100A6A540();
}

uint64_t sub_100A6AF24()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for FirmwareUpdateAlertCoordinator()
{
  return self;
}

uint64_t sub_100A6AF98()
{
  uint64_t v1 = type metadata accessor for OS_dispatch_queue.Attributes();
  __chkstk_darwin(v1);
  uint64_t v2 = type metadata accessor for DispatchQoS();
  __chkstk_darwin(v2 - 8);
  uint64_t v3 = type metadata accessor for OS_dispatch_queue.AutoreleaseFrequency();
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  unint64_t v6 = &v10[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)];
  *(void *)(v0 + 16) = 0x403E000000000000;
  sub_10000588C((uint64_t *)&unk_101638CE0);
  uint64_t v7 = swift_allocObject();
  *(_DWORD *)(v7 + 16) = 0;
  *(void *)(v0 + 24) = v7;
  sub_10000584C();
  (*(void (**)(unsigned char *, void, uint64_t))(v4 + 104))(v6, enum case for OS_dispatch_queue.AutoreleaseFrequency.workItem(_:), v3);
  static DispatchQoS.unspecified.getter();
  uint64_t v11 = _swiftEmptyArrayStorage;
  sub_10041ECCC((unint64_t *)&qword_101638CC0, (void (*)(uint64_t))&type metadata accessor for OS_dispatch_queue.Attributes);
  sub_10000588C((uint64_t *)&unk_1016376F0);
  sub_1001BF100((unint64_t *)&qword_101638CD0, (uint64_t *)&unk_1016376F0);
  dispatch thunk of SetAlgebra.init<A>(_:)();
  *(void *)(v0 + 32) = OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)();
  v10[7] = 0;
  sub_10000588C(&qword_101657190);
  swift_allocObject();
  *(void *)(v0 + 40) = CurrentValueSubject.init(_:)();
  *(unsigned char *)(v0 + 48) = 0;
  *(void *)(v0 + 56) = 0;
  swift_retain();
  uint64_t v8 = CurrentValueSubject.eraseToAnyCurrentValuePublisher()();
  swift_release();
  *(void *)(v0 + 64) = v8;
  return v0;
}

uint64_t sub_100A6B254()
{
  return sub_100A6B730("markActive()");
}

uint64_t sub_100A6B274(uint64_t a1)
{
  uint64_t v23 = type metadata accessor for DispatchTimeInterval();
  uint64_t v21 = *(void *)(v23 - 8);
  __chkstk_darwin(v23);
  uint64_t v4 = (uint64_t *)((char *)&v18 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v24 = type metadata accessor for DispatchTime();
  uint64_t v22 = *(void *)(v24 - 8);
  uint64_t v5 = __chkstk_darwin(v24);
  unint64_t v19 = (char *)&v18 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5);
  int64_t v20 = (char *)&v18 - v7;
  uint64_t v8 = type metadata accessor for DispatchWorkItemFlags();
  __chkstk_darwin(v8);
  if ((*(unsigned char *)(a1 + 48) & 1) == 0) {
    os_activity(name:block:)();
  }
  uint64_t v25 = v1;
  *(unsigned char *)(a1 + 48) = 1;
  if (*(void *)(a1 + 56))
  {
    swift_retain();
    dispatch thunk of DispatchWorkItem.cancel()();
    swift_release();
  }
  uint64_t v9 = swift_allocObject();
  swift_weakInit();
  aBlock[4] = sub_100A6BA60;
  aBlock[5] = v9;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_1004B5480;
  aBlock[3] = &unk_1015E5E58;
  _Block_copy(aBlock);
  aBlock[7] = _swiftEmptyArrayStorage;
  sub_10041ECCC((unint64_t *)&qword_10163B7E0, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
  swift_retain();
  sub_10000588C((uint64_t *)&unk_10163F350);
  sub_1001BF100((unint64_t *)&qword_10163B7F0, (uint64_t *)&unk_10163F350);
  dispatch thunk of SetAlgebra.init<A>(_:)();
  type metadata accessor for DispatchWorkItem();
  swift_allocObject();
  uint64_t v10 = DispatchWorkItem.init(flags:block:)();
  swift_release();
  swift_release();
  *(void *)(a1 + 56) = v10;
  swift_retain();
  swift_release();
  uint64_t v11 = v19;
  static DispatchTime.now()();
  void *v4 = 30;
  uint64_t v12 = v21;
  uint64_t v13 = v23;
  (*(void (**)(void *, void, uint64_t))(v21 + 104))(v4, enum case for DispatchTimeInterval.seconds(_:), v23);
  uint64_t v14 = v20;
  + infix(_:_:)();
  (*(void (**)(void *, uint64_t))(v12 + 8))(v4, v13);
  uint64_t v15 = *(void (**)(char *, uint64_t))(v22 + 8);
  uint64_t v16 = v24;
  v15(v11, v24);
  OS_dispatch_queue.asyncAfter(deadline:execute:)();
  swift_release();
  return ((uint64_t (*)(char *, uint64_t))v15)(v14, v16);
}

uint64_t sub_100A6B6B8()
{
  swift_beginAccess();
  uint64_t result = swift_weakLoadStrong();
  if (result)
  {
    sub_100A6B710();
    return swift_release();
  }
  return result;
}

uint64_t sub_100A6B710()
{
  return sub_100A6B730("markInactive()");
}

uint64_t sub_100A6B730(const char *a1)
{
  if (qword_101636F30 != -1) {
    swift_once();
  }
  uint64_t v2 = type metadata accessor for Logger();
  sub_100010324(v2, (uint64_t)qword_10170E9C8);
  uint64_t v3 = Logger.logObject.getter();
  os_log_type_t v4 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v3, v4))
  {
    uint64_t v5 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v5 = 0;
    _os_log_impl((void *)&_mh_execute_header, v3, v4, a1, v5, 2u);
    swift_slowDealloc();
  }

  return OSAllocatedUnfairLock.callAsFunction<A>(_:)();
}

uint64_t sub_100A6B844()
{
  swift_release();

  swift_release();
  swift_release();
  swift_release();

  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for AppActivity()
{
  return self;
}

uint64_t sub_100A6B8C0()
{
  uint64_t v0 = type metadata accessor for Logger();
  sub_10001E384(v0, qword_10170E9C8);
  sub_100010324(v0, (uint64_t)qword_10170E9C8);
  return Logger.init(subsystem:category:)();
}

uint64_t sub_100A6B940()
{
  if (*(unsigned char *)(v0 + 48) == 1) {
    uint64_t result = os_activity(name:block:)();
  }
  *(unsigned char *)(v0 + 48) = 0;
  return result;
}

uint64_t sub_100A6B990()
{
  return CurrentValueSubject.send(_:)();
}

uint64_t sub_100A6B9CC()
{
  return sub_100A6B274(v0);
}

uint64_t sub_100A6B9E8()
{
  return CurrentValueSubject.send(_:)();
}

uint64_t sub_100A6BA28()
{
  swift_weakDestroy();

  return _swift_deallocObject(v0, 24, 7);
}

uint64_t sub_100A6BA60()
{
  return sub_100A6B6B8();
}

uint64_t sub_100A6BA68(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_100A6BA78()
{
  return swift_release();
}

uint64_t sub_100A6BA80()
{
  return 131;
}

uint64_t sub_100A6BA88()
{
  return sub_100A6BAEC(0xD000000000000034, 0x8000000101410EA0, type metadata accessor for DelegatedShareExpirationUserNotification);
}

uint64_t sub_100A6BACC()
{
  return sub_100A6BDC8();
}

uint64_t sub_100A6BAEC(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = type metadata accessor for LocalizationUtility.Table();
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v8 = (char *)&v15 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, void, uint64_t))(v6 + 104))(v8, enum case for LocalizationUtility.Table.delegatedSharing(_:), v5);
  static LocalizationUtility.localizedString(key:table:)();
  (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  sub_10000588C((uint64_t *)&unk_10163AD00);
  uint64_t v9 = swift_allocObject();
  *(_OWORD *)(v9 + 16) = xmmword_101342130;
  uint64_t v10 = (uint64_t *)(v3 + *(int *)(a3(0) + 24));
  uint64_t v12 = *v10;
  uint64_t v11 = v10[1];
  *(void *)(v9 + 56) = &type metadata for String;
  *(void *)(v9 + 64) = sub_10000B4CC();
  *(void *)(v9 + 32) = v12;
  *(void *)(v9 + 40) = v11;
  swift_bridgeObjectRetain();
  uint64_t v13 = String.init(format:arguments:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v13;
}

uint64_t sub_100A6BC90()
{
  return 160;
}

uint64_t sub_100A6BC98()
{
  return sub_100A6BAEC(0xD000000000000038, 0x8000000101410E20, type metadata accessor for DelegatedShareOwnerReunitedUserNotification);
}

uint64_t sub_100A6BCDC()
{
  return sub_100A6BDC8();
}

uint64_t sub_100A6BCF8()
{
  return 161;
}

uint64_t sub_100A6BD00()
{
  return sub_100A6BAEC(0xD000000000000039, 0x8000000101410DA0, type metadata accessor for DelegatedShareShareeReunitedShareeUserNotification);
}

uint64_t sub_100A6BD44()
{
  return sub_100A6BDC8();
}

uint64_t sub_100A6BD60()
{
  return 162;
}

uint64_t sub_100A6BD68()
{
  return sub_100A6BAEC(0xD00000000000002ELL, 0x8000000101410D30, type metadata accessor for DelegatedSharMaxViewsUserNotification);
}

uint64_t sub_100A6BDAC()
{
  return sub_100A6BDC8();
}

uint64_t sub_100A6BDC8()
{
  uint64_t v0 = type metadata accessor for LocalizationUtility.Table();
  uint64_t v1 = *(void *)(v0 - 8);
  __chkstk_darwin(v0);
  uint64_t v3 = (char *)&v6 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, void, uint64_t))(v1 + 104))(v3, enum case for LocalizationUtility.Table.delegatedSharing(_:), v0);
  uint64_t v4 = static LocalizationUtility.localizedString(key:table:)();
  (*(void (**)(char *, uint64_t))(v1 + 8))(v3, v0);
  return v4;
}

unint64_t sub_100A6BED8()
{
  sub_10000588C((uint64_t *)&unk_101637F00);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_101342130;
  *(void *)(inited + 32) = 0xD000000000000010;
  *(void *)(inited + 40) = 0x80000001013EE1B0;
  uint64_t v1 = UUID.uuidString.getter();
  *(void *)(inited + 72) = &type metadata for String;
  *(void *)(inited + 48) = v1;
  *(void *)(inited + 56) = v2;
  return sub_10092CEEC(inited);
}

uint64_t type metadata accessor for DelegatedSharMaxViewsUserNotification(uint64_t a1)
{
  return sub_1000F4EA4(a1, qword_1016573B8);
}

uint64_t type metadata accessor for DelegatedShareShareeReunitedShareeUserNotification(uint64_t a1)
{
  return sub_1000F4EA4(a1, qword_101657320);
}

uint64_t type metadata accessor for DelegatedShareOwnerReunitedUserNotification(uint64_t a1)
{
  return sub_1000F4EA4(a1, qword_101657288);
}

uint64_t type metadata accessor for DelegatedShareExpirationUserNotification(uint64_t a1)
{
  return sub_1000F4EA4(a1, qword_1016571F0);
}

uint64_t sub_100A6C004(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_100A6C018);
}

uint64_t sub_100A6C01C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_100A6C030);
}

uint64_t sub_100A6C038(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_100A6C04C);
}

uint64_t sub_100A6C050(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_100A6C064);
}

uint64_t sub_100A6C068(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_100A6C07C);
}

uint64_t sub_100A6C080(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_100A6C094);
}

uint64_t *sub_100A6C098(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v13 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v13 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v7 = type metadata accessor for UUID();
    uint64_t v8 = *(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v7 - 8) + 16);
    v8(a1, a2, v7);
    v8((uint64_t *)((char *)a1 + *(int *)(a3 + 20)), (uint64_t *)((char *)a2 + *(int *)(a3 + 20)), v7);
    uint64_t v9 = *(int *)(a3 + 24);
    uint64_t v10 = (uint64_t *)((char *)a1 + v9);
    uint64_t v11 = (uint64_t *)((char *)a2 + v9);
    uint64_t v12 = v11[1];
    *uint64_t v10 = *v11;
    v10[1] = v12;
    swift_bridgeObjectRetain();
  }
  return a1;
}

uint64_t sub_100A6C198(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for UUID();
  int v5 = *(void (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8);
  v5(a1, v4);
  v5(a1 + *(int *)(a2 + 20), v4);

  return swift_bridgeObjectRelease();
}

uint64_t sub_100A6C23C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for UUID();
  uint64_t v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 16);
  v7(a1, a2, v6);
  v7(a1 + *(int *)(a3 + 20), a2 + *(int *)(a3 + 20), v6);
  uint64_t v8 = *(int *)(a3 + 24);
  uint64_t v9 = (void *)(a1 + v8);
  uint64_t v10 = (void *)(a2 + v8);
  uint64_t v11 = v10[1];
  *uint64_t v9 = *v10;
  v9[1] = v11;
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t sub_100A6C2EC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for UUID();
  uint64_t v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 24);
  v7(a1, a2, v6);
  v7(a1 + *(int *)(a3 + 20), a2 + *(int *)(a3 + 20), v6);
  uint64_t v8 = *(int *)(a3 + 24);
  uint64_t v9 = (void *)(a1 + v8);
  uint64_t v10 = (void *)(a2 + v8);
  *uint64_t v9 = *v10;
  v9[1] = v10[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t sub_100A6C3B0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for UUID();
  uint64_t v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 32);
  v7(a1, a2, v6);
  v7(a1 + *(int *)(a3 + 20), a2 + *(int *)(a3 + 20), v6);
  *(_OWORD *)(a1 + *(int *)(a3 + 24)) = *(_OWORD *)(a2 + *(int *)(a3 + 24));
  return a1;
}

uint64_t sub_100A6C454(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for UUID();
  uint64_t v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 40);
  v7(a1, a2, v6);
  v7(a1 + *(int *)(a3 + 20), a2 + *(int *)(a3 + 20), v6);
  uint64_t v8 = *(int *)(a3 + 24);
  uint64_t v9 = (void *)(a1 + v8);
  uint64_t v10 = (uint64_t *)(a2 + v8);
  uint64_t v12 = *v10;
  uint64_t v11 = v10[1];
  *uint64_t v9 = v12;
  v9[1] = v11;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t sub_100A6C508(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_100A6C51C);
}

uint64_t sub_100A6C520(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for UUID();
  uint64_t v7 = *(void *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == a2)
  {
    uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    return v8(a1, a2, v6);
  }
  else
  {
    unint64_t v10 = *(void *)(a1 + *(int *)(a3 + 24) + 8);
    if (v10 >= 0xFFFFFFFF) {
      LODWORD(v10) = -1;
    }
    return (v10 + 1);
  }
}

uint64_t sub_100A6C5E4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_100A6C5F8);
}

uint64_t sub_100A6C5FC(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result = type metadata accessor for UUID();
  uint64_t v9 = *(void *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    unint64_t v10 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    return v10(a1, a2, a2, result);
  }
  else
  {
    *(void *)(a1 + *(int *)(a4 + 24) + 8) = (a2 - 1);
  }
  return result;
}

uint64_t sub_100A6C6BC()
{
  uint64_t result = type metadata accessor for UUID();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t sub_100A6C754(uint64_t a1, uint64_t (*a2)(void))
{
  return a2();
}

uint64_t sub_100A6C77C(void (*a1)(unsigned char *), uint64_t a2, uint64_t a3)
{
  sub_10000588C((uint64_t *)&unk_101657880);
  OSAllocatedUnfairLock.callAsFunction<A>(_:)();
  sub_100A75314((uint64_t)v10, (uint64_t)v8);
  if (v8[40] == 255)
  {
    sub_10001DAB4((uint64_t)v8, (uint64_t *)&unk_101657880);
    Strong = (char *)swift_unknownObjectUnownedLoadStrong();
    id v6 = *(id *)&Strong[OBJC_IVAR____TtC12searchpartyd10Peripheral_underlyingObject];

    [v6 readValueForCharacteristic:*(void *)(a3 + 40)];
  }
  else
  {
    sub_10006105C((uint64_t)v8, (uint64_t)v9);
    sub_1000610B8((uint64_t)v9, (uint64_t)v8);
    v8[41] = 1;
    a1(v8);
    sub_10001DAB4((uint64_t)v8, (uint64_t *)&unk_101655B40);
    sub_100061288((uint64_t)v9);
  }
  return sub_10001DAB4((uint64_t)v10, (uint64_t *)&unk_101657880);
}

uint64_t sub_100A6C8D0@<X0>(void *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  if (a1[9] || a1[13])
  {
    *(void *)a4 = a1;
    *(unsigned char *)(a4 + 40) = 6;
    return swift_retain();
  }
  else
  {
    a1[9] = a2;
    a1[10] = a3;
    swift_retain();
    uint64_t result = sub_1000A1534(0);
    *(void *)(a4 + 32) = 0;
    *(_OWORD *)a4 = 0u;
    *(_OWORD *)(a4 + 16) = 0u;
    *(unsigned char *)(a4 + 40) = -1;
  }
  return result;
}

uint64_t sub_100A6C94C(uint64_t a1, unint64_t a2)
{
  uint64_t v3 = v2;
  if (qword_101637690 != -1) {
    swift_once();
  }
  uint64_t v6 = type metadata accessor for Logger();
  sub_100010324(v6, (uint64_t)qword_10170F8C0);
  sub_1000361E0(a1, a2);
  swift_retain();
  sub_1000361E0(a1, a2);
  swift_retain();
  uint64_t v7 = Logger.logObject.getter();
  os_log_type_t v8 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v7, v8))
  {
    uint64_t v9 = swift_slowAlloc();
    uint64_t v19 = swift_slowAlloc();
    *(_DWORD *)uint64_t v9 = 136315394;
    sub_1000361E0(a1, a2);
    uint64_t v10 = Data.description.getter();
    unint64_t v12 = v11;
    sub_10001CFB8(a1, a2);
    sub_1008FA0F0(v10, v12, &v19);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    sub_10001CFB8(a1, a2);
    sub_10001CFB8(a1, a2);
    *(_WORD *)(v9 + 12) = 2080;
    swift_retain();
    uint64_t v13 = sub_100A6DA6C();
    unint64_t v15 = v14;
    swift_release();
    sub_1008FA0F0(v13, v15, &v19);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release_n();
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v7, v8, "Writing %s to %s", (uint8_t *)v9, 0x16u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    sub_10001CFB8(a1, a2);
    sub_10001CFB8(a1, a2);

    swift_release_n();
  }
  uint64_t v16 = (void *)swift_allocObject();
  v16[2] = v3;
  v16[3] = a1;
  v16[4] = a2;
  sub_10000588C(&qword_101657AE8);
  swift_allocObject();
  sub_1000361E0(a1, a2);
  swift_retain();
  uint64_t v19 = Future.init(_:)();
  sub_100062734((unint64_t *)&unk_101657AF0, &qword_101657AE8);
  uint64_t v17 = Publisher.eraseToAnyPublisher()();
  swift_release();
  return v17;
}

uint64_t sub_100A6CC98(void (*a1)(unsigned char *), uint64_t a2, uint64_t a3)
{
  sub_10000588C((uint64_t *)&unk_101657880);
  OSAllocatedUnfairLock.callAsFunction<A>(_:)();
  sub_100A75314((uint64_t)v11, (uint64_t)v9);
  if (v9[40] == 255)
  {
    sub_10001DAB4((uint64_t)v9, (uint64_t *)&unk_101657880);
    Strong = (char *)swift_unknownObjectUnownedLoadStrong();
    id v6 = *(id *)&Strong[OBJC_IVAR____TtC12searchpartyd10Peripheral_underlyingObject];

    Class isa = Data._bridgeToObjectiveC()().super.isa;
    [v6 writeValue:isa forCharacteristic:*(void *)(a3 + 40) type:0];
  }
  else
  {
    sub_10006105C((uint64_t)v9, (uint64_t)v10);
    sub_1000610B8((uint64_t)v10, (uint64_t)v9);
    v9[41] = 1;
    a1(v9);
    sub_10001DAB4((uint64_t)v9, &qword_10163C5F8);
    sub_100061288((uint64_t)v10);
  }
  return sub_10001DAB4((uint64_t)v11, (uint64_t *)&unk_101657880);
}

uint64_t sub_100A6CE24@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  if (*(void *)(a1 + 88))
  {
    *(void *)a4 = a1;
    *(unsigned char *)(a4 + 40) = 6;
    return swift_retain();
  }
  else
  {
    *(void *)(a1 + 88) = a2;
    *(void *)(a1 + 96) = a3;
    swift_retain();
    uint64_t result = sub_1000A1534(0);
    *(void *)(a4 + 32) = 0;
    *(_OWORD *)a4 = 0u;
    *(_OWORD *)(a4 + 16) = 0u;
    *(unsigned char *)(a4 + 40) = -1;
  }
  return result;
}

uint64_t sub_100A6CE98@<X0>(void *a1@<X0>, uint64_t *a2@<X8>)
{
  if (a1[13])
  {
    sub_10000588C((uint64_t *)&unk_101657990);
    sub_100062734((unint64_t *)&unk_101671D30, (uint64_t *)&unk_101657990);
    uint64_t result = Publisher.eraseToAnyPublisher()();
    *a2 = result;
  }
  else if (a1[9])
  {
    sub_100061234();
    swift_allocError();
    *(void *)uint64_t v5 = a1;
    *(unsigned char *)(v5 + 40) = 6;
    swift_retain();
    return swift_willThrow();
  }
  else
  {
    sub_10000588C((uint64_t *)&unk_101657990);
    swift_allocObject();
    a1[13] = PassthroughSubject.init()();
    swift_retain();
    swift_release();
    Strong = (char *)swift_unknownObjectUnownedLoadStrong();
    id v7 = *(id *)&Strong[OBJC_IVAR____TtC12searchpartyd10Peripheral_underlyingObject];

    [v7 setNotifyValue:1 forCharacteristic:a1[5]];
    sub_100062734((unint64_t *)&unk_101671D30, (uint64_t *)&unk_101657990);
    uint64_t v8 = Publisher.eraseToAnyPublisher()();
    uint64_t result = swift_release();
    *a2 = v8;
  }
  return result;
}

uint64_t sub_100A6D054(uint64_t a1)
{
  Strong = (char *)swift_unknownObjectUnownedLoadStrong();
  id v3 = *(id *)&Strong[OBJC_IVAR____TtC12searchpartyd10Peripheral_underlyingObject];

  [v3 setNotifyValue:0 forCharacteristic:*(void *)(a1 + 40)];
  if (*(void *)(a1 + 104))
  {
    uint64_t v6 = 0;
    memset(v5, 0, sizeof(v5));
    char v7 = -1;
    swift_retain();
    PassthroughSubject.send(completion:)();
    swift_release();
    sub_10001DAB4((uint64_t)v5, (uint64_t *)&unk_101649EF0);
  }
  *(void *)(a1 + 104) = 0;
  return swift_release();
}

uint64_t sub_100A6D128(uint64_t a1)
{
  sub_10000588C(&qword_101657AE0);
  OSAllocatedUnfairLock.callAsFunction<A>(_:)();
  uint64_t v2 = v37;
  long long v31 = *(_OWORD *)((char *)v38 + 8);
  if (v37)
  {
    uint64_t v3 = *(void *)&v38[0];
    uint64_t v4 = swift_allocObject();
    *(void *)(v4 + 16) = v37;
    *(void *)(v4 + 24) = v3;
    uint64_t v5 = sub_100A753D0;
    uint64_t v6 = v31;
    if ((void)v31) {
      goto LABEL_3;
    }
  }
  else
  {
    uint64_t v5 = 0;
    uint64_t v6 = *((void *)&v38[0] + 1);
    if (*((void *)&v38[0] + 1))
    {
LABEL_3:
      *(_OWORD *)(swift_allocObject() + 16) = v31;
      char v7 = sub_100A75470;
      uint64_t v8 = &qword_101637000;
      if (!v2) {
        goto LABEL_4;
      }
LABEL_11:
      uint64_t v19 = qword_1016374D0;
      swift_retain();
      if (v19 != -1) {
        swift_once();
      }
      uint64_t v20 = type metadata accessor for Logger();
      sub_100010324(v20, (uint64_t)qword_10170F3B8);
      sub_1000610B8(a1, (uint64_t)&v37);
      swift_retain_n();
      uint64_t v21 = Logger.logObject.getter();
      os_log_type_t v22 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v21, v22))
      {
        char v30 = v7;
        uint64_t v23 = swift_slowAlloc();
        unint64_t v33 = v5;
        uint64_t v24 = (void *)swift_slowAlloc();
        uint64_t v36 = swift_slowAlloc();
        *(_DWORD *)uint64_t v23 = 136446466;
        swift_retain();
        uint64_t v25 = sub_100A6DA6C();
        unint64_t v27 = v26;
        swift_release();
        sub_1008FA0F0(v25, v27, &v36);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_release_n();
        swift_bridgeObjectRelease();
        *(_WORD *)(v23 + 12) = 2112;
        sub_100061234();
        swift_allocError();
        sub_1000610B8((uint64_t)&v37, v28);
        uint64_t v35 = _swift_stdlib_bridgeErrorToNSError();
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        *uint64_t v24 = v35;
        sub_100061288((uint64_t)&v37);
        _os_log_impl((void *)&_mh_execute_header, v21, v22, "%{public}s: Sending %@ failure to readPromise", (uint8_t *)v23, 0x16u);
        sub_10000588C((uint64_t *)&unk_101638EA0);
        swift_arrayDestroy();
        uint64_t v5 = v33;
        swift_slowDealloc();
        swift_arrayDestroy();
        swift_slowDealloc();
        char v7 = v30;
        swift_slowDealloc();
      }
      else
      {
        swift_release_n();
        sub_100061288((uint64_t)&v37);
      }

      uint64_t v37 = 11;
      memset(v38, 0, sizeof(v38));
      __int16 v39 = 267;
      ((void (*)(uint64_t *))v5)(&v37);
      sub_1000A1534((uint64_t)v5);
      sub_10001DAB4((uint64_t)&v37, (uint64_t *)&unk_101655B40);
      uint64_t v8 = &qword_101637000;
      if (v6) {
        goto LABEL_5;
      }
      return sub_1000A1534((uint64_t)v5);
    }
  }
  char v7 = 0;
  uint64_t v8 = &qword_101637000;
  if (v2) {
    goto LABEL_11;
  }
LABEL_4:
  if (!v6) {
    return sub_1000A1534((uint64_t)v5);
  }
LABEL_5:
  uint64_t v9 = v8[154];
  swift_retain();
  if (v9 != -1) {
    swift_once();
  }
  uint64_t v10 = type metadata accessor for Logger();
  sub_100010324(v10, (uint64_t)qword_10170F3B8);
  sub_1000610B8(a1, (uint64_t)&v37);
  swift_retain_n();
  unint64_t v11 = Logger.logObject.getter();
  os_log_type_t v12 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v11, v12))
  {
    uint64_t v13 = swift_slowAlloc();
    char v32 = v5;
    unint64_t v14 = (void *)swift_slowAlloc();
    uint64_t v36 = swift_slowAlloc();
    *(_DWORD *)uint64_t v13 = 136446466;
    swift_retain();
    uint64_t v15 = sub_100A6DA6C();
    unint64_t v17 = v16;
    swift_release();
    sub_1008FA0F0(v15, v17, &v36);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release_n();
    swift_bridgeObjectRelease();
    *(_WORD *)(v13 + 12) = 2112;
    sub_100061234();
    swift_allocError();
    sub_1000610B8((uint64_t)&v37, v18);
    uint64_t v34 = _swift_stdlib_bridgeErrorToNSError();
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *unint64_t v14 = v34;
    sub_100061288((uint64_t)&v37);
    _os_log_impl((void *)&_mh_execute_header, v11, v12, "%{public}s: Sending %@ failure to writePromise", (uint8_t *)v13, 0x16u);
    sub_10000588C((uint64_t *)&unk_101638EA0);
    swift_arrayDestroy();
    uint64_t v5 = v32;
    swift_slowDealloc();
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    swift_release_n();
    sub_100061288((uint64_t)&v37);
  }

  uint64_t v37 = 11;
  memset(v38, 0, sizeof(v38));
  __int16 v39 = 267;
  ((void (*)(uint64_t *))v7)(&v37);
  sub_1000A1534((uint64_t)v7);
  sub_1000A1534((uint64_t)v7);
  sub_1000A1534((uint64_t)v5);
  return sub_10001DAB4((uint64_t)&v37, &qword_10163C5F8);
}

uint64_t sub_100A6D7C8@<X0>(void *a1@<X0>, uint64_t (**a2)()@<X8>)
{
  uint64_t v4 = (uint64_t (*)())a1[9];
  uint64_t v5 = a1[10];
  a1[9] = 0;
  a1[10] = 0;
  sub_1000BD0E8((uint64_t)v4);
  sub_1000A1534((uint64_t)v4);
  uint64_t v6 = a1[11];
  uint64_t v7 = a1[12];
  a1[11] = 0;
  a1[12] = 0;
  sub_1000BD0E8(v6);
  sub_1000A1534(v6);
  if (!v4)
  {
    uint64_t v8 = 0;
    if (v6) {
      goto LABEL_3;
    }
LABEL_5:
    uint64_t v10 = 0;
    uint64_t result = 0;
    goto LABEL_6;
  }
  uint64_t v8 = swift_allocObject();
  *(void *)(v8 + 16) = v4;
  *(void *)(v8 + 24) = v5;
  uint64_t v4 = sub_1007AFAF8;
  if (!v6) {
    goto LABEL_5;
  }
LABEL_3:
  uint64_t result = swift_allocObject();
  *(void *)(result + 16) = v6;
  *(void *)(result + 24) = v7;
  uint64_t v10 = sub_1007B31E4;
LABEL_6:
  *a2 = v4;
  a2[1] = (uint64_t (*)())v8;
  a2[2] = v10;
  a2[3] = (uint64_t (*)())result;
  return result;
}

uint64_t sub_100A6D8C8()
{
  swift_release();
  swift_unknownObjectUnownedDestroy();
  swift_unownedRelease();

  swift_bridgeObjectRelease();
  sub_1000A1534(*(void *)(v0 + 56));
  sub_1000A1534(*(void *)(v0 + 72));
  sub_1000A1534(*(void *)(v0 + 88));
  swift_release();
  return v0;
}

uint64_t sub_100A6D928()
{
  sub_100A6D8C8();

  return swift_deallocClassInstance();
}

Swift::Int sub_100A6D95C()
{
  return Hasher._finalize()();
}

void sub_100A6D9A4()
{
  id v1 = *(id *)(*(void *)v0 + 40);
  NSObject.hash(into:)();
}

Swift::Int sub_100A6DA00()
{
  Hasher.init(_seed:)();
  id v1 = *(id *)(*(void *)v0 + 40);
  NSObject.hash(into:)();

  return Hasher._finalize()();
}

BOOL sub_100A6DA50(uint64_t a1, uint64_t a2)
{
  return *(void *)(*(void *)a1 + 40) == *(void *)(*(void *)a2 + 40);
}

uint64_t sub_100A6DA6C()
{
  uint64_t v1 = type metadata accessor for CharacteristicUUID(0);
  __chkstk_darwin(v1);
  uint64_t v3 = (char *)&v21 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v23 = 0;
  unint64_t v24 = 0xE000000000000000;
  _StringGuts.grow(_:)(29);
  v4._countAndFlagsBits = 60;
  v4._object = (void *)0xE100000000000000;
  String.append(_:)(v4);
  uint64_t v22 = v0;
  type metadata accessor for Characteristic();
  sub_100A745B8(&qword_1016576C8);
  v5._countAndFlagsBits = CustomStringConvertible.typeDescription.getter();
  String.append(_:)(v5);
  swift_bridgeObjectRelease();
  v6._countAndFlagsBits = 32;
  v6._object = (void *)0xE100000000000000;
  String.append(_:)(v6);
  v7._countAndFlagsBits = CustomStringConvertible<>.addressDescription.getter();
  String.append(_:)(v7);
  swift_bridgeObjectRelease();
  v8._countAndFlagsBits = 8250;
  v8._object = (void *)0xE200000000000000;
  String.append(_:)(v8);
  uint64_t v9 = *(void **)(v0 + 40);
  id v10 = [v9 UUID];
  sub_100BBC528((unint64_t)v3);

  _print_unlocked<A, B>(_:_:)();
  sub_100A745F8((uint64_t)v3);
  v11._countAndFlagsBits = 0x796669746F6E203ALL;
  v11._object = (void *)0xED0000203A676E69;
  String.append(_:)(v11);
  unsigned int v12 = [v9 isNotifying];
  BOOL v13 = v12 == 0;
  if (v12) {
    uint64_t v14 = 1702195828;
  }
  else {
    uint64_t v14 = 0x65736C6166;
  }
  if (v13) {
    unint64_t v15 = 0xE500000000000000;
  }
  else {
    unint64_t v15 = 0xE400000000000000;
  }
  unint64_t v16 = v15;
  String.append(_:)(*(Swift::String *)&v14);
  swift_bridgeObjectRelease();
  v17._countAndFlagsBits = 32;
  v17._object = (void *)0xE100000000000000;
  String.append(_:)(v17);
  v18._countAndFlagsBits = CBCharacteristicProperties.description.getter((__int16)[v9 properties]);
  String.append(_:)(v18);
  swift_bridgeObjectRelease();
  v19._countAndFlagsBits = 62;
  v19._object = (void *)0xE100000000000000;
  String.append(_:)(v19);
  return v23;
}

uint64_t CBCharacteristicProperties.description.getter(__int16 a1)
{
  if ((a1 & 1) == 0)
  {
    uint64_t v2 = _swiftEmptyArrayStorage;
    if ((a1 & 2) == 0) {
      goto LABEL_12;
    }
    goto LABEL_7;
  }
  uint64_t v2 = sub_100A6E25C(0, 1, 1, _swiftEmptyArrayStorage);
  unint64_t v4 = v2[2];
  unint64_t v3 = v2[3];
  if (v4 >= v3 >> 1) {
    uint64_t v2 = sub_100A6E25C((void *)(v3 > 1), v4 + 1, 1, v2);
  }
  v2[2] = v4 + 1;
  Swift::String v5 = &v2[2 * v4];
  v5[4] = 0x616364616F72622ELL;
  v5[5] = 0xEA00000000007473;
  if ((a1 & 2) != 0)
  {
LABEL_7:
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
      uint64_t v2 = sub_100A6E25C(0, v2[2] + 1, 1, v2);
    }
    unint64_t v7 = v2[2];
    unint64_t v6 = v2[3];
    if (v7 >= v6 >> 1) {
      uint64_t v2 = sub_100A6E25C((void *)(v6 > 1), v7 + 1, 1, v2);
    }
    v2[2] = v7 + 1;
    Swift::String v8 = &v2[2 * v7];
    v8[4] = 0x646165722ELL;
    v8[5] = 0xE500000000000000;
  }
LABEL_12:
  if ((a1 & 4) != 0)
  {
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
      uint64_t v2 = sub_100A6E25C(0, v2[2] + 1, 1, v2);
    }
    unint64_t v10 = v2[2];
    unint64_t v9 = v2[3];
    if (v10 >= v9 >> 1) {
      uint64_t v2 = sub_100A6E25C((void *)(v9 > 1), v10 + 1, 1, v2);
    }
    v2[2] = v10 + 1;
    Swift::String v11 = &v2[2 * v10];
    v11[4] = 0xD000000000000015;
    v11[5] = 0x8000000101410F60;
    if ((a1 & 8) == 0)
    {
LABEL_14:
      if ((a1 & 0x10) == 0) {
        goto LABEL_15;
      }
      goto LABEL_31;
    }
  }
  else if ((a1 & 8) == 0)
  {
    goto LABEL_14;
  }
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    uint64_t v2 = sub_100A6E25C(0, v2[2] + 1, 1, v2);
  }
  unint64_t v13 = v2[2];
  unint64_t v12 = v2[3];
  if (v13 >= v12 >> 1) {
    uint64_t v2 = sub_100A6E25C((void *)(v12 > 1), v13 + 1, 1, v2);
  }
  v2[2] = v13 + 1;
  uint64_t v14 = &v2[2 * v13];
  v14[4] = 0x65746972772ELL;
  v14[5] = 0xE600000000000000;
  if ((a1 & 0x10) == 0)
  {
LABEL_15:
    if ((a1 & 0x20) == 0) {
      goto LABEL_16;
    }
    goto LABEL_36;
  }
LABEL_31:
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    uint64_t v2 = sub_100A6E25C(0, v2[2] + 1, 1, v2);
  }
  unint64_t v16 = v2[2];
  unint64_t v15 = v2[3];
  if (v16 >= v15 >> 1) {
    uint64_t v2 = sub_100A6E25C((void *)(v15 > 1), v16 + 1, 1, v2);
  }
  v2[2] = v16 + 1;
  Swift::String v17 = &v2[2 * v16];
  v17[4] = 0x796669746F6E2ELL;
  v17[5] = 0xE700000000000000;
  if ((a1 & 0x20) == 0)
  {
LABEL_16:
    if ((a1 & 0x40) == 0) {
      goto LABEL_17;
    }
    goto LABEL_41;
  }
LABEL_36:
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    uint64_t v2 = sub_100A6E25C(0, v2[2] + 1, 1, v2);
  }
  unint64_t v19 = v2[2];
  unint64_t v18 = v2[3];
  if (v19 >= v18 >> 1) {
    uint64_t v2 = sub_100A6E25C((void *)(v18 > 1), v19 + 1, 1, v2);
  }
  v2[2] = v19 + 1;
  uint64_t v20 = &v2[2 * v19];
  v20[4] = 0x74616369646E692ELL;
  v20[5] = 0xE900000000000065;
  if ((a1 & 0x40) == 0)
  {
LABEL_17:
    if ((a1 & 0x80) == 0) {
      goto LABEL_18;
    }
    goto LABEL_46;
  }
LABEL_41:
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    uint64_t v2 = sub_100A6E25C(0, v2[2] + 1, 1, v2);
  }
  unint64_t v22 = v2[2];
  unint64_t v21 = v2[3];
  if (v22 >= v21 >> 1) {
    uint64_t v2 = sub_100A6E25C((void *)(v21 > 1), v22 + 1, 1, v2);
  }
  v2[2] = v22 + 1;
  uint64_t v23 = &v2[2 * v22];
  v23[4] = 0xD00000000000001ALL;
  v23[5] = 0x8000000101410F40;
  if ((a1 & 0x80) == 0)
  {
LABEL_18:
    if ((a1 & 0x100) == 0) {
      goto LABEL_19;
    }
    goto LABEL_51;
  }
LABEL_46:
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    uint64_t v2 = sub_100A6E25C(0, v2[2] + 1, 1, v2);
  }
  unint64_t v25 = v2[2];
  unint64_t v24 = v2[3];
  if (v25 >= v24 >> 1) {
    uint64_t v2 = sub_100A6E25C((void *)(v24 > 1), v25 + 1, 1, v2);
  }
  v2[2] = v25 + 1;
  unint64_t v26 = &v2[2 * v25];
  v26[4] = 0xD000000000000013;
  v26[5] = 0x8000000101410F20;
  if ((a1 & 0x100) == 0)
  {
LABEL_19:
    if ((a1 & 0x200) == 0) {
      goto LABEL_61;
    }
    goto LABEL_56;
  }
LABEL_51:
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    uint64_t v2 = sub_100A6E25C(0, v2[2] + 1, 1, v2);
  }
  unint64_t v28 = v2[2];
  unint64_t v27 = v2[3];
  if (v28 >= v27 >> 1) {
    uint64_t v2 = sub_100A6E25C((void *)(v27 > 1), v28 + 1, 1, v2);
  }
  v2[2] = v28 + 1;
  uint64_t v29 = &v2[2 * v28];
  v29[4] = 0xD000000000000019;
  v29[5] = 0x8000000101410F00;
  if ((a1 & 0x200) != 0)
  {
LABEL_56:
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
      uint64_t v2 = sub_100A6E25C(0, v2[2] + 1, 1, v2);
    }
    unint64_t v31 = v2[2];
    unint64_t v30 = v2[3];
    if (v31 >= v30 >> 1) {
      uint64_t v2 = sub_100A6E25C((void *)(v30 > 1), v31 + 1, 1, v2);
    }
    v2[2] = v31 + 1;
    char v32 = &v2[2 * v31];
    v32[4] = 0xD00000000000001BLL;
    v32[5] = 0x8000000101410EE0;
  }
LABEL_61:
  uint64_t v33 = Array.description.getter();
  swift_bridgeObjectRelease();
  return v33;
}

uint64_t sub_100A6E230()
{
  return sub_100A6DA6C();
}

uint64_t sub_100A6E254()
{
  return CBCharacteristicProperties.description.getter(*v0);
}

void *sub_100A6E25C(void *result, int64_t a2, char a3, void *a4)
{
  char v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    uint64_t v7 = a2;
    goto LABEL_8;
  }
  unint64_t v6 = a4[3];
  uint64_t v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2) {
    goto LABEL_8;
  }
  if (v7 + 0x4000000000000000 >= 0)
  {
    uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
      uint64_t v7 = a2;
    }
LABEL_8:
    uint64_t v8 = a4[2];
    if (v7 <= v8) {
      uint64_t v9 = a4[2];
    }
    else {
      uint64_t v9 = v7;
    }
    if (v9)
    {
      sub_10000588C(&qword_1016552B0);
      unint64_t v10 = (void *)swift_allocObject();
      int64_t v11 = j__malloc_size(v10);
      uint64_t v12 = v11 - 32;
      if (v11 < 32) {
        uint64_t v12 = v11 - 17;
      }
      v10[2] = v8;
      v10[3] = 2 * (v12 >> 4);
      unint64_t v13 = v10 + 4;
      if (v5) {
        goto LABEL_15;
      }
    }
    else
    {
      unint64_t v10 = _swiftEmptyArrayStorage;
      unint64_t v13 = &_swiftEmptyArrayStorage[4];
      if (result)
      {
LABEL_15:
        if (v10 != a4 || v13 >= &a4[2 * v8 + 4]) {
          memmove(v13, a4 + 4, 16 * v8);
        }
        a4[2] = 0;
        goto LABEL_24;
      }
    }
    sub_100A7295C(0, v8, (unint64_t)v13, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

uint64_t type metadata accessor for Characteristic()
{
  return self;
}

{
  return type metadata accessor for Characteristic();
}

uint64_t sub_100A6E390()
{
  return sub_100A745B8(&qword_1016575D0);
}

void *sub_100A6E3C4(void *result, int64_t a2, char a3, void *a4)
{
  char v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    uint64_t v7 = a2;
    goto LABEL_8;
  }
  unint64_t v6 = a4[3];
  uint64_t v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2) {
    goto LABEL_8;
  }
  if (v7 + 0x4000000000000000 >= 0)
  {
    uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
      uint64_t v7 = a2;
    }
LABEL_8:
    uint64_t v8 = a4[2];
    if (v7 <= v8) {
      uint64_t v9 = a4[2];
    }
    else {
      uint64_t v9 = v7;
    }
    if (v9)
    {
      sub_10000588C(&qword_1016575E8);
      unint64_t v10 = (void *)swift_allocObject();
      int64_t v11 = j__malloc_size(v10);
      uint64_t v12 = v11 - 32;
      if (v11 < 32) {
        uint64_t v12 = v11 - 1;
      }
      v10[2] = v8;
      v10[3] = 2 * (v12 >> 5);
      unint64_t v13 = v10 + 4;
      if (v5) {
        goto LABEL_15;
      }
    }
    else
    {
      unint64_t v10 = _swiftEmptyArrayStorage;
      unint64_t v13 = &_swiftEmptyArrayStorage[4];
      if (result)
      {
LABEL_15:
        if (v10 != a4 || v13 >= &a4[4 * v8 + 4]) {
          memmove(v13, a4 + 4, 32 * v8);
        }
        a4[2] = 0;
        goto LABEL_24;
      }
    }
    sub_100A72B48(0, v8, (unint64_t)v13, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

void *sub_100A6E4D4(void *result, int64_t a2, char a3, void *a4)
{
  char v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    uint64_t v7 = a2;
    goto LABEL_8;
  }
  unint64_t v6 = a4[3];
  uint64_t v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2) {
    goto LABEL_8;
  }
  if (v7 + 0x4000000000000000 >= 0)
  {
    uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
      uint64_t v7 = a2;
    }
LABEL_8:
    uint64_t v8 = a4[2];
    if (v7 <= v8) {
      uint64_t v9 = a4[2];
    }
    else {
      uint64_t v9 = v7;
    }
    if (v9)
    {
      sub_10000588C((uint64_t *)&unk_1016575F0);
      unint64_t v10 = (void *)swift_allocObject();
      size_t v11 = j__malloc_size(v10);
      v10[2] = v8;
      v10[3] = 2 * ((uint64_t)(v11 - 32) / 40);
      uint64_t v12 = v10 + 4;
      if (v5)
      {
LABEL_13:
        if (v10 != a4 || v12 >= &a4[5 * v8 + 4]) {
          memmove(v12, a4 + 4, 40 * v8);
        }
        a4[2] = 0;
        goto LABEL_22;
      }
    }
    else
    {
      unint64_t v10 = _swiftEmptyArrayStorage;
      uint64_t v12 = &_swiftEmptyArrayStorage[4];
      if (result) {
        goto LABEL_13;
      }
    }
    sub_100A72A50(0, v8, (unint64_t)v12, (uint64_t)a4);
LABEL_22:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

uint64_t sub_100A6E5F8(char a1, int64_t a2, char a3, unint64_t a4)
{
  return sub_100A6E660(a1, a2, a3, a4, &qword_10163AB28, (uint64_t (*)(void))type metadata accessor for LeaderDevice, (uint64_t (*)(void))type metadata accessor for LeaderDevice);
}

uint64_t sub_100A6E62C(char a1, int64_t a2, char a3, unint64_t a4)
{
  return sub_100A6E660(a1, a2, a3, a4, &qword_10163A9D8, type metadata accessor for KeyDropJoinToken, type metadata accessor for KeyDropJoinToken);
}

uint64_t sub_100A6E660(char a1, int64_t a2, char a3, unint64_t a4, uint64_t *a5, uint64_t (*a6)(void), uint64_t (*a7)(void))
{
  if (a3)
  {
    unint64_t v11 = *(void *)(a4 + 24);
    uint64_t v12 = v11 >> 1;
    if ((uint64_t)(v11 >> 1) < a2)
    {
      if (v12 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_29;
      }
      uint64_t v12 = v11 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v11 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        uint64_t v12 = a2;
      }
    }
  }
  else
  {
    uint64_t v12 = a2;
  }
  uint64_t v13 = *(void *)(a4 + 16);
  if (v12 <= v13) {
    uint64_t v14 = *(void *)(a4 + 16);
  }
  else {
    uint64_t v14 = v12;
  }
  if (!v14)
  {
    unint64_t v18 = _swiftEmptyArrayStorage;
    goto LABEL_19;
  }
  sub_10000588C(a5);
  uint64_t v15 = *(void *)(a6(0) - 8);
  uint64_t v16 = *(void *)(v15 + 72);
  unint64_t v17 = (*(unsigned __int8 *)(v15 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v15 + 80);
  unint64_t v18 = (void *)swift_allocObject();
  size_t v19 = j__malloc_size(v18);
  if (!v16 || (v19 - v17 == 0x8000000000000000 ? (BOOL v20 = v16 == -1) : (BOOL v20 = 0), v20))
  {
LABEL_29:
    uint64_t result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
    return result;
  }
  v18[2] = v13;
  v18[3] = 2 * ((uint64_t)(v19 - v17) / v16);
LABEL_19:
  uint64_t v21 = *(void *)(a6(0) - 8);
  unint64_t v22 = (*(unsigned __int8 *)(v21 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v21 + 80);
  unint64_t v23 = (unint64_t)v18 + v22;
  if (a1)
  {
    if ((unint64_t)v18 < a4 || v23 >= a4 + v22 + *(void *)(v21 + 72) * v13)
    {
      swift_arrayInitWithTakeFrontToBack();
    }
    else if (v18 != (void *)a4)
    {
      swift_arrayInitWithTakeBackToFront();
    }
    *(void *)(a4 + 16) = 0;
  }
  else
  {
    sub_100A750A4(0, v13, v23, a4, a7);
  }
  swift_bridgeObjectRelease();
  return (uint64_t)v18;
}

void *sub_100A6E8E0(void *a1, int64_t a2, char a3, void *a4)
{
  return sub_100A6F08C(a1, a2, a3, a4, &qword_10163AA90, &qword_101657C00);
}

void *sub_100A6E8F4(void *a1, int64_t a2, char a3, void *a4)
{
  return sub_100A6E940(a1, a2, a3, a4, &qword_101657D20);
}

uint64_t sub_100A6E900(char a1, int64_t a2, char a3, unint64_t a4)
{
  return sub_100A6E660(a1, a2, a3, a4, &qword_10163AAA8, (uint64_t (*)(void))&type metadata accessor for Date, (uint64_t (*)(void))&type metadata accessor for Date);
}

void *sub_100A6E934(void *a1, int64_t a2, char a3, void *a4)
{
  return sub_100A6E940(a1, a2, a3, a4, &qword_101657D38);
}

void *sub_100A6E940(void *result, int64_t a2, char a3, void *a4, uint64_t *a5)
{
  char v6 = (char)result;
  if ((a3 & 1) == 0)
  {
    int64_t v8 = a2;
    goto LABEL_8;
  }
  unint64_t v7 = a4[3];
  int64_t v8 = v7 >> 1;
  if ((uint64_t)(v7 >> 1) >= a2) {
    goto LABEL_8;
  }
  if (v8 + 0x4000000000000000 >= 0)
  {
    int64_t v8 = v7 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v7 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
      int64_t v8 = a2;
    }
LABEL_8:
    int64_t v9 = a4[2];
    if (v8 <= v9) {
      int64_t v10 = a4[2];
    }
    else {
      int64_t v10 = v8;
    }
    if (v10)
    {
      sub_10000588C(a5);
      unint64_t v11 = (void *)swift_allocObject();
      size_t v12 = j__malloc_size(v11);
      v11[2] = v9;
      v11[3] = 2 * v12 - 64;
      uint64_t v13 = v11 + 4;
      if (v6)
      {
LABEL_13:
        if (v11 != a4 || v13 >= (void *)((char *)a4 + v9 + 32)) {
          memmove(v13, a4 + 4, v9);
        }
        a4[2] = 0;
        goto LABEL_22;
      }
    }
    else
    {
      unint64_t v11 = _swiftEmptyArrayStorage;
      uint64_t v13 = &_swiftEmptyArrayStorage[4];
      if (result) {
        goto LABEL_13;
      }
    }
    sub_100A741DC(0, v9, (char *)v13, (uint64_t)a4);
LABEL_22:
    swift_bridgeObjectRelease();
    return v11;
  }
  __break(1u);
  return result;
}

void *sub_100A6EA38(void *result, int64_t a2, char a3, void *a4)
{
  char v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    uint64_t v7 = a2;
    goto LABEL_8;
  }
  unint64_t v6 = a4[3];
  uint64_t v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2) {
    goto LABEL_8;
  }
  if (v7 + 0x4000000000000000 >= 0)
  {
    uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
      uint64_t v7 = a2;
    }
LABEL_8:
    uint64_t v8 = a4[2];
    if (v7 <= v8) {
      uint64_t v9 = a4[2];
    }
    else {
      uint64_t v9 = v7;
    }
    if (v9)
    {
      sub_10000588C(&qword_101657710);
      int64_t v10 = (void *)swift_allocObject();
      int64_t v11 = j__malloc_size(v10);
      uint64_t v12 = v11 - 32;
      if (v11 < 32) {
        uint64_t v12 = v11 - 17;
      }
      v10[2] = v8;
      v10[3] = 2 * (v12 >> 4);
      uint64_t v13 = v10 + 4;
      if (v5) {
        goto LABEL_15;
      }
    }
    else
    {
      int64_t v10 = _swiftEmptyArrayStorage;
      uint64_t v13 = &_swiftEmptyArrayStorage[4];
      if (result)
      {
LABEL_15:
        if (v10 != a4 || v13 >= &a4[2 * v8 + 4]) {
          memmove(v13, a4 + 4, 16 * v8);
        }
        a4[2] = 0;
        goto LABEL_24;
      }
    }
    sub_100A72D34(0, v8, (unint64_t)v13, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

void *sub_100A6EB48(void *a1, int64_t a2, char a3, void *a4)
{
  return sub_100A704A8(a1, a2, a3, a4, &qword_10163A7F0);
}

uint64_t sub_100A6EB5C(char a1, int64_t a2, char a3, unint64_t a4)
{
  return sub_100A6EE0C(a1, a2, a3, a4, (uint64_t *)&unk_101657610, &qword_10163F7B0);
}

void *sub_100A6EB70(void *result, int64_t a2, char a3, void *a4)
{
  char v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    uint64_t v7 = a2;
    goto LABEL_8;
  }
  unint64_t v6 = a4[3];
  uint64_t v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2) {
    goto LABEL_8;
  }
  if (v7 + 0x4000000000000000 >= 0)
  {
    uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
      uint64_t v7 = a2;
    }
LABEL_8:
    uint64_t v8 = a4[2];
    if (v7 <= v8) {
      uint64_t v9 = a4[2];
    }
    else {
      uint64_t v9 = v7;
    }
    if (v9)
    {
      sub_10000588C((uint64_t *)&unk_101657A20);
      int64_t v10 = (void *)swift_allocObject();
      int64_t v11 = j__malloc_size(v10);
      uint64_t v12 = v11 - 32;
      if (v11 < 32) {
        uint64_t v12 = v11 - 1;
      }
      v10[2] = v8;
      v10[3] = 2 * (v12 >> 5);
      uint64_t v13 = v10 + 4;
      if (v5) {
        goto LABEL_15;
      }
    }
    else
    {
      int64_t v10 = _swiftEmptyArrayStorage;
      uint64_t v13 = &_swiftEmptyArrayStorage[4];
      if (result)
      {
LABEL_15:
        if (v10 != a4 || v13 >= &a4[4 * v8 + 4]) {
          memmove(v13, a4 + 4, 32 * v8);
        }
        a4[2] = 0;
        goto LABEL_24;
      }
    }
    sub_100A73248(0, v8, (char *)v13, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

uint64_t sub_100A6EC80(char a1, int64_t a2, char a3, unint64_t a4)
{
  return sub_100A6E660(a1, a2, a3, a4, &qword_10163A878, (uint64_t (*)(void))type metadata accessor for SharingCircleSecret, (uint64_t (*)(void))type metadata accessor for SharingCircleSecret);
}

uint64_t sub_100A6ECB4(char a1, int64_t a2, char a3, unint64_t a4)
{
  return sub_100A6E660(a1, a2, a3, a4, &qword_101657A18, type metadata accessor for SharingCircleKeyManager.SharingCircleContent.Member, type metadata accessor for SharingCircleKeyManager.SharingCircleContent.Member);
}

void *sub_100A6ECE8(void *result, int64_t a2, char a3, void *a4)
{
  char v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    uint64_t v7 = a2;
    goto LABEL_8;
  }
  unint64_t v6 = a4[3];
  uint64_t v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2) {
    goto LABEL_8;
  }
  if (v7 + 0x4000000000000000 >= 0)
  {
    uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
      uint64_t v7 = a2;
    }
LABEL_8:
    uint64_t v8 = a4[2];
    if (v7 <= v8) {
      uint64_t v9 = a4[2];
    }
    else {
      uint64_t v9 = v7;
    }
    if (v9)
    {
      sub_10000588C(&qword_101657A10);
      int64_t v10 = (void *)swift_allocObject();
      int64_t v11 = j__malloc_size(v10);
      uint64_t v12 = v11 - 32;
      if (v11 < 32) {
        uint64_t v12 = v11 - 25;
      }
      v10[2] = v8;
      v10[3] = 2 * (v12 >> 3);
      uint64_t v13 = v10 + 4;
      if (v5) {
        goto LABEL_15;
      }
    }
    else
    {
      int64_t v10 = _swiftEmptyArrayStorage;
      uint64_t v13 = &_swiftEmptyArrayStorage[4];
      if (result)
      {
LABEL_15:
        if (v10 != a4 || v13 >= &a4[v8 + 4]) {
          memmove(v13, a4 + 4, 8 * v8);
        }
        a4[2] = 0;
        goto LABEL_24;
      }
    }
    sub_100A7391C(0, v8, (unint64_t)v13, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

uint64_t sub_100A6EDF8(char a1, int64_t a2, char a3, unint64_t a4)
{
  return sub_100A6EE0C(a1, a2, a3, a4, (uint64_t *)&unk_101657820, &qword_10163BA20);
}

uint64_t sub_100A6EE0C(char a1, int64_t a2, char a3, unint64_t a4, uint64_t *a5, uint64_t *a6)
{
  if (a3)
  {
    unint64_t v9 = *(void *)(a4 + 24);
    uint64_t v10 = v9 >> 1;
    if ((uint64_t)(v9 >> 1) < a2)
    {
      if (v10 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_29;
      }
      uint64_t v10 = v9 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v9 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        uint64_t v10 = a2;
      }
    }
  }
  else
  {
    uint64_t v10 = a2;
  }
  uint64_t v11 = *(void *)(a4 + 16);
  if (v10 <= v11) {
    uint64_t v12 = *(void *)(a4 + 16);
  }
  else {
    uint64_t v12 = v10;
  }
  if (!v12)
  {
    uint64_t v16 = &_swiftEmptyArrayStorage;
    goto LABEL_19;
  }
  sub_10000588C(a5);
  uint64_t v13 = *(void *)(sub_10000588C(a6) - 8);
  uint64_t v14 = *(void *)(v13 + 72);
  unint64_t v15 = (*(unsigned __int8 *)(v13 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v13 + 80);
  uint64_t v16 = (void *)swift_allocObject();
  size_t v17 = j__malloc_size(v16);
  if (!v14 || (v17 - v15 == 0x8000000000000000 ? (BOOL v18 = v14 == -1) : (BOOL v18 = 0), v18))
  {
LABEL_29:
    uint64_t result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
    return result;
  }
  v16[2] = v11;
  v16[3] = 2 * ((uint64_t)(v17 - v15) / v14);
LABEL_19:
  uint64_t v19 = *(void *)(sub_10000588C(a6) - 8);
  unint64_t v20 = (*(unsigned __int8 *)(v19 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v19 + 80);
  unint64_t v21 = (unint64_t)v16 + v20;
  if (a1)
  {
    if ((unint64_t)v16 < a4 || v21 >= a4 + v20 + *(void *)(v19 + 72) * v11)
    {
      swift_arrayInitWithTakeFrontToBack();
    }
    else if (v16 != (void *)a4)
    {
      swift_arrayInitWithTakeBackToFront();
    }
    *(void *)(a4 + 16) = 0;
  }
  else
  {
    sub_100A74F4C(0, v11, v21, a4, a6);
  }
  swift_bridgeObjectRelease();
  return (uint64_t)v16;
}

void *sub_100A6F078(void *a1, int64_t a2, char a3, void *a4)
{
  return sub_100A6F08C(a1, a2, a3, a4, &qword_101657A48, (uint64_t *)&unk_101657A50);
}

void *sub_100A6F08C(void *result, int64_t a2, char a3, void *a4, uint64_t *a5, uint64_t *a6)
{
  char v8 = (char)result;
  if ((a3 & 1) == 0)
  {
    uint64_t v10 = a2;
    goto LABEL_8;
  }
  unint64_t v9 = a4[3];
  uint64_t v10 = v9 >> 1;
  if ((uint64_t)(v9 >> 1) >= a2) {
    goto LABEL_8;
  }
  if (v10 + 0x4000000000000000 >= 0)
  {
    uint64_t v10 = v9 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v9 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
      uint64_t v10 = a2;
    }
LABEL_8:
    uint64_t v11 = a4[2];
    if (v10 <= v11) {
      uint64_t v12 = a4[2];
    }
    else {
      uint64_t v12 = v10;
    }
    if (v12)
    {
      sub_10000588C(a5);
      uint64_t v13 = (void *)swift_allocObject();
      size_t v14 = j__malloc_size(v13);
      v13[2] = v11;
      v13[3] = 2 * ((uint64_t)(v14 - 32) / 40);
      unint64_t v15 = v13 + 4;
      if (v8)
      {
LABEL_13:
        if (v13 != a4 || v15 >= &a4[5 * v11 + 4]) {
          memmove(v15, a4 + 4, 40 * v11);
        }
        a4[2] = 0;
        goto LABEL_22;
      }
    }
    else
    {
      uint64_t v13 = _swiftEmptyArrayStorage;
      unint64_t v15 = &_swiftEmptyArrayStorage[4];
      if (result) {
        goto LABEL_13;
      }
    }
    sub_100A744AC(0, v11, (unint64_t)v15, (uint64_t)a4, a6);
LABEL_22:
    swift_bridgeObjectRelease();
    return v13;
  }
  __break(1u);
  return result;
}

uint64_t sub_100A6F1BC(char a1, int64_t a2, char a3, unint64_t a4)
{
  return sub_100A6EE0C(a1, a2, a3, a4, &qword_101657C28, &qword_101657C30);
}

void *sub_100A6F1D0(void *result, int64_t a2, char a3, void *a4)
{
  char v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    uint64_t v7 = a2;
    goto LABEL_8;
  }
  unint64_t v6 = a4[3];
  uint64_t v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2) {
    goto LABEL_8;
  }
  if (v7 + 0x4000000000000000 >= 0)
  {
    uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
      uint64_t v7 = a2;
    }
LABEL_8:
    uint64_t v8 = a4[2];
    if (v7 <= v8) {
      uint64_t v9 = a4[2];
    }
    else {
      uint64_t v9 = v7;
    }
    if (v9)
    {
      sub_10000588C(&qword_101657C38);
      uint64_t v10 = (void *)swift_allocObject();
      size_t v11 = j__malloc_size(v10);
      v10[2] = v8;
      v10[3] = 2 * ((uint64_t)(v11 - 32) / 40);
      uint64_t v12 = v10 + 4;
      if (v5)
      {
LABEL_13:
        if (v10 != a4 || v12 >= &a4[5 * v8 + 4]) {
          memmove(v12, a4 + 4, 40 * v8);
        }
        a4[2] = 0;
        goto LABEL_22;
      }
    }
    else
    {
      uint64_t v10 = _swiftEmptyArrayStorage;
      uint64_t v12 = &_swiftEmptyArrayStorage[4];
      if (result) {
        goto LABEL_13;
      }
    }
    sub_100A73A10(0, v8, (unint64_t)v12, (uint64_t)a4);
LABEL_22:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

uint64_t sub_100A6F2F4(char a1, int64_t a2, char a3, unint64_t a4)
{
  return sub_100A6E660(a1, a2, a3, a4, &qword_101657700, (uint64_t (*)(void))type metadata accessor for OwnerSharingCircle, (uint64_t (*)(void))type metadata accessor for OwnerSharingCircle);
}

uint64_t sub_100A6F328(char a1, int64_t a2, char a3, unint64_t a4)
{
  return sub_100A6E660(a1, a2, a3, a4, &qword_101657A08, type metadata accessor for KeyDropInterface.KeyPackage, type metadata accessor for KeyDropInterface.KeyPackage);
}

void *sub_100A6F35C(void *result, int64_t a2, char a3, void *a4)
{
  char v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    uint64_t v7 = a2;
    goto LABEL_8;
  }
  unint64_t v6 = a4[3];
  uint64_t v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2) {
    goto LABEL_8;
  }
  if (v7 + 0x4000000000000000 >= 0)
  {
    uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
      uint64_t v7 = a2;
    }
LABEL_8:
    uint64_t v8 = a4[2];
    if (v7 <= v8) {
      uint64_t v9 = a4[2];
    }
    else {
      uint64_t v9 = v7;
    }
    if (v9)
    {
      sub_10000588C(&qword_101657678);
      uint64_t v10 = (void *)swift_allocObject();
      int64_t v11 = j__malloc_size(v10);
      uint64_t v12 = v11 - 32;
      if (v11 < 32) {
        uint64_t v12 = v11 - 17;
      }
      v10[2] = v8;
      v10[3] = 2 * (v12 >> 4);
      uint64_t v13 = v10 + 4;
      if (v5) {
        goto LABEL_15;
      }
    }
    else
    {
      uint64_t v10 = _swiftEmptyArrayStorage;
      uint64_t v13 = &_swiftEmptyArrayStorage[4];
      if (result)
      {
LABEL_15:
        if (v10 != a4 || v13 >= &a4[2 * v8 + 4]) {
          memmove(v13, a4 + 4, 16 * v8);
        }
        a4[2] = 0;
        goto LABEL_24;
      }
    }
    sub_100A73B20(0, v8, (char *)v13, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

uint64_t sub_100A6F46C(char a1, int64_t a2, char a3, unint64_t a4)
{
  return sub_100A6E660(a1, a2, a3, a4, &qword_101657930, (uint64_t (*)(void))type metadata accessor for TimeBasedKey, (uint64_t (*)(void))type metadata accessor for TimeBasedKey);
}

uint64_t sub_100A6F4A0(char a1, int64_t a2, char a3, unint64_t a4)
{
  return sub_100A6E660(a1, a2, a3, a4, &qword_10163A960, (uint64_t (*)(void))_s18ConnectionKeyGroupVMa, (uint64_t (*)(void))_s18ConnectionKeyGroupVMa);
}

void *sub_100A6F4D4(void *result, int64_t a2, char a3, void *a4)
{
  char v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    uint64_t v7 = a2;
    goto LABEL_8;
  }
  unint64_t v6 = a4[3];
  uint64_t v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2) {
    goto LABEL_8;
  }
  if (v7 + 0x4000000000000000 >= 0)
  {
    uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
      uint64_t v7 = a2;
    }
LABEL_8:
    uint64_t v8 = a4[2];
    if (v7 <= v8) {
      uint64_t v9 = a4[2];
    }
    else {
      uint64_t v9 = v7;
    }
    if (v9)
    {
      sub_10000588C(&qword_101657A00);
      uint64_t v10 = (void *)swift_allocObject();
      size_t v11 = j__malloc_size(v10);
      v10[2] = v8;
      v10[3] = 2 * ((uint64_t)(v11 - 32) / 72);
      uint64_t v12 = v10 + 4;
      if (v5)
      {
LABEL_13:
        if (v10 != a4 || v12 >= &a4[9 * v8 + 4]) {
          memmove(v12, a4 + 4, 72 * v8);
        }
        a4[2] = 0;
        goto LABEL_22;
      }
    }
    else
    {
      uint64_t v10 = _swiftEmptyArrayStorage;
      uint64_t v12 = &_swiftEmptyArrayStorage[4];
      if (result) {
        goto LABEL_13;
      }
    }
    sub_100A72C3C(0, v8, (unint64_t)v12, (uint64_t)a4);
LABEL_22:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

uint64_t sub_100A6F600(char a1, int64_t a2, char a3, unint64_t a4)
{
  return sub_100A6E660(a1, a2, a3, a4, (uint64_t *)&unk_1016577B0, type metadata accessor for KeyDropCreateRequest.Member, type metadata accessor for KeyDropCreateRequest.Member);
}

uint64_t sub_100A6F634(char a1, int64_t a2, char a3, unint64_t a4)
{
  return sub_100A6E660(a1, a2, a3, a4, &qword_1016577A8, type metadata accessor for PeerTrustEnvelopeV1, type metadata accessor for PeerTrustEnvelopeV1);
}

uint64_t sub_100A6F668(char a1, int64_t a2, char a3, unint64_t a4)
{
  return sub_100A6E660(a1, a2, a3, a4, &qword_10163BC50, (uint64_t (*)(void))&type metadata accessor for UUID, (uint64_t (*)(void))&type metadata accessor for UUID);
}

uint64_t sub_100A6F69C(char a1, int64_t a2, char a3, unint64_t a4)
{
  return sub_100A6EE0C(a1, a2, a3, a4, (uint64_t *)&unk_101657C60, &qword_10163A050);
}

uint64_t sub_100A6F6B0(char a1, int64_t a2, char a3, unint64_t a4)
{
  return sub_100A6EE0C(a1, a2, a3, a4, (uint64_t *)&unk_101657D10, &qword_10163A030);
}

uint64_t sub_100A6F6C4(char a1, int64_t a2, char a3, unint64_t a4)
{
  return sub_100A6E660(a1, a2, a3, a4, (uint64_t *)&unk_101657640, (uint64_t (*)(void))type metadata accessor for OwnedBeaconRecord, (uint64_t (*)(void))type metadata accessor for OwnedBeaconRecord);
}

void *sub_100A6F6F8(void *a1, int64_t a2, char a3, void *a4)
{
  return sub_100A7090C(a1, a2, a3, a4, &qword_10164C958, type metadata accessor for SPDisabledReason);
}

uint64_t sub_100A6F718(char a1, int64_t a2, char a3, unint64_t a4)
{
  return sub_100A6E660(a1, a2, a3, a4, &qword_1016576B8, (uint64_t (*)(void))type metadata accessor for BeaconStoreFileRecord, (uint64_t (*)(void))type metadata accessor for BeaconStoreFileRecord);
}

uint64_t sub_100A6F74C(char a1, int64_t a2, char a3, unint64_t a4)
{
  return sub_100A6E660(a1, a2, a3, a4, &qword_10163A7E0, type metadata accessor for SharedBeaconRecord, type metadata accessor for SharedBeaconRecord);
}

uint64_t sub_100A6F780(char a1, int64_t a2, char a3, unint64_t a4)
{
  return sub_100A6EE0C(a1, a2, a3, a4, &qword_1016578E8, &qword_1016578F0);
}

uint64_t sub_100A6F794(char a1, int64_t a2, char a3, unint64_t a4)
{
  return sub_100A6EE0C(a1, a2, a3, a4, &qword_1016578D8, &qword_1016578E0);
}

uint64_t sub_100A6F7A8(char a1, int64_t a2, char a3, unint64_t a4)
{
  return sub_100A6EE0C(a1, a2, a3, a4, &qword_1016578C8, &qword_1016578D0);
}

uint64_t sub_100A6F7BC(char a1, int64_t a2, char a3, unint64_t a4)
{
  return sub_100A6E660(a1, a2, a3, a4, &qword_10163A760, (uint64_t (*)(void))type metadata accessor for DefaultConfigurationLayer, (uint64_t (*)(void))type metadata accessor for DefaultConfigurationLayer);
}

void *sub_100A6F7F0(void *a1, int64_t a2, char a3, void *a4)
{
  return sub_100A6F08C(a1, a2, a3, a4, (uint64_t *)&unk_101657630, (uint64_t *)&unk_10164DBF0);
}

uint64_t sub_100A6F804(char a1, int64_t a2, char a3, unint64_t a4)
{
  return sub_100A6EE0C(a1, a2, a3, a4, &qword_10163A750, (uint64_t *)&unk_1016488F0);
}

uint64_t sub_100A6F818(char a1, int64_t a2, char a3, unint64_t a4)
{
  return sub_100A6E660(a1, a2, a3, a4, &qword_101657918, (uint64_t (*)(void))&type metadata accessor for Destination, (uint64_t (*)(void))&type metadata accessor for Destination);
}

uint64_t sub_100A6F84C(char a1, int64_t a2, char a3, unint64_t a4)
{
  return sub_100A6E660(a1, a2, a3, a4, (uint64_t *)&unk_101657800, (uint64_t (*)(void))type metadata accessor for OwnerPeerTrust, (uint64_t (*)(void))type metadata accessor for OwnerPeerTrust);
}

void *sub_100A6F880(void *result, int64_t a2, char a3, void *a4)
{
  char v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    uint64_t v7 = a2;
    goto LABEL_8;
  }
  unint64_t v6 = a4[3];
  uint64_t v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2) {
    goto LABEL_8;
  }
  if (v7 + 0x4000000000000000 >= 0)
  {
    uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
      uint64_t v7 = a2;
    }
LABEL_8:
    uint64_t v8 = a4[2];
    if (v7 <= v8) {
      uint64_t v9 = a4[2];
    }
    else {
      uint64_t v9 = v7;
    }
    if (v9)
    {
      sub_10000588C(&qword_10163BAB0);
      uint64_t v10 = (void *)swift_allocObject();
      size_t v11 = j__malloc_size(v10);
      v10[2] = v8;
      v10[3] = 2 * ((uint64_t)(v11 - 32) / 24);
      uint64_t v12 = v10 + 4;
      if (v5)
      {
LABEL_13:
        if (v10 != a4 || v12 >= &a4[3 * v8 + 4]) {
          memmove(v12, a4 + 4, 24 * v8);
        }
        a4[2] = 0;
        goto LABEL_22;
      }
    }
    else
    {
      uint64_t v10 = _swiftEmptyArrayStorage;
      uint64_t v12 = &_swiftEmptyArrayStorage[4];
      if (result) {
        goto LABEL_13;
      }
    }
    sub_100A73334(0, v8, (unint64_t)v12, (uint64_t)a4);
LABEL_22:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

uint64_t sub_100A6F9A8(char a1, int64_t a2, char a3, unint64_t a4)
{
  return sub_100A6E660(a1, a2, a3, a4, &qword_10163A9F8, (uint64_t (*)(void))type metadata accessor for MemberPeerTrust, (uint64_t (*)(void))type metadata accessor for MemberPeerTrust);
}

void *sub_100A6F9DC(void *a1, int64_t a2, char a3, void *a4)
{
  return sub_100A6F08C(a1, a2, a3, a4, (uint64_t *)&unk_1016576F0, &qword_10163BCC0);
}

uint64_t sub_100A6F9F0(char a1, int64_t a2, char a3, unint64_t a4)
{
  return sub_100A6EE0C(a1, a2, a3, a4, &qword_1016577D0, &qword_10163BA10);
}

uint64_t sub_100A6FA04(char a1, int64_t a2, char a3, unint64_t a4)
{
  return sub_100A6E660(a1, a2, a3, a4, (uint64_t *)&unk_101657810, (uint64_t (*)(void))type metadata accessor for BeaconNamingRecord, (uint64_t (*)(void))type metadata accessor for BeaconNamingRecord);
}

uint64_t sub_100A6FA38(char a1, int64_t a2, char a3, unint64_t a4)
{
  return sub_100A6EE0C(a1, a2, a3, a4, (uint64_t *)&unk_101657BE0, &qword_10163BBC0);
}

uint64_t sub_100A6FA4C(char a1, int64_t a2, char a3, unint64_t a4)
{
  return sub_100A6E660(a1, a2, a3, a4, &qword_10163AA00, type metadata accessor for OwnedBeaconGroup, type metadata accessor for OwnedBeaconGroup);
}

uint64_t sub_100A6FA80(char a1, int64_t a2, char a3, unint64_t a4)
{
  return sub_100A6EE0C(a1, a2, a3, a4, &qword_101657CF8, (uint64_t *)&unk_101657D00);
}

void *sub_100A6FA94(void *a1, int64_t a2, char a3, void *a4)
{
  return sub_100A6FAA0(a1, a2, a3, a4, &qword_101657738);
}

void *sub_100A6FAA0(void *result, int64_t a2, char a3, void *a4, uint64_t *a5)
{
  char v6 = (char)result;
  if ((a3 & 1) == 0)
  {
    uint64_t v8 = a2;
    goto LABEL_8;
  }
  unint64_t v7 = a4[3];
  uint64_t v8 = v7 >> 1;
  if ((uint64_t)(v7 >> 1) >= a2) {
    goto LABEL_8;
  }
  if (v8 + 0x4000000000000000 >= 0)
  {
    uint64_t v8 = v7 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v7 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
      uint64_t v8 = a2;
    }
LABEL_8:
    uint64_t v9 = a4[2];
    if (v8 <= v9) {
      uint64_t v10 = a4[2];
    }
    else {
      uint64_t v10 = v8;
    }
    if (v10)
    {
      sub_10000588C(a5);
      size_t v11 = (void *)swift_allocObject();
      int64_t v12 = j__malloc_size(v11);
      uint64_t v13 = v12 - 32;
      if (v12 < 32) {
        uint64_t v13 = v12 - 25;
      }
      v11[2] = v9;
      v11[3] = 2 * (v13 >> 3);
      size_t v14 = v11 + 4;
      if (v6) {
        goto LABEL_15;
      }
    }
    else
    {
      size_t v11 = _swiftEmptyArrayStorage;
      size_t v14 = &_swiftEmptyArrayStorage[4];
      if (result)
      {
LABEL_15:
        if (v11 != a4 || v14 >= &a4[v9 + 4]) {
          memmove(v14, a4 + 4, 8 * v9);
        }
        a4[2] = 0;
        goto LABEL_24;
      }
    }
    sub_100A7362C(0, v9, (char *)v14, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease();
    return v11;
  }
  __break(1u);
  return result;
}

uint64_t sub_100A6FBAC(char a1, int64_t a2, char a3, unint64_t a4)
{
  return sub_100A6EE0C(a1, a2, a3, a4, (uint64_t *)&unk_101657620, &qword_10163A790);
}

uint64_t sub_100A6FBC0(char a1, int64_t a2, char a3, unint64_t a4)
{
  return sub_100A6E660(a1, a2, a3, a4, &qword_10163AB50, type metadata accessor for PairingErrorRecord, type metadata accessor for PairingErrorRecord);
}

uint64_t sub_100A6FBF4(char a1, int64_t a2, char a3, unint64_t a4)
{
  return sub_100A6E660(a1, a2, a3, a4, &qword_10163AB48, (uint64_t (*)(void))type metadata accessor for UpdateDeviceState, (uint64_t (*)(void))type metadata accessor for UpdateDeviceState);
}

uint64_t sub_100A6FC28(char a1, int64_t a2, char a3, unint64_t a4)
{
  return sub_100A6E660(a1, a2, a3, a4, &qword_10163A7D0, type metadata accessor for ObservedAdvertisement, type metadata accessor for ObservedAdvertisement);
}

uint64_t sub_100A6FC5C(char a1, int64_t a2, char a3, unint64_t a4)
{
  return sub_100A6E660(a1, a2, a3, a4, (uint64_t *)&unk_101657600, (uint64_t (*)(void))&type metadata accessor for URL, (uint64_t (*)(void))&type metadata accessor for URL);
}

void *sub_100A6FC90(void *result, int64_t a2, char a3, void *a4)
{
  char v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    uint64_t v7 = a2;
    goto LABEL_8;
  }
  unint64_t v6 = a4[3];
  uint64_t v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2) {
    goto LABEL_8;
  }
  if (v7 + 0x4000000000000000 >= 0)
  {
    uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
      uint64_t v7 = a2;
    }
LABEL_8:
    uint64_t v8 = a4[2];
    if (v7 <= v8) {
      uint64_t v9 = a4[2];
    }
    else {
      uint64_t v9 = v7;
    }
    if (v9)
    {
      sub_10000588C(&qword_101657708);
      uint64_t v10 = (void *)swift_allocObject();
      size_t v11 = j__malloc_size(v10);
      v10[2] = v8;
      v10[3] = 2 * ((uint64_t)(v11 - 32) / 5);
      int64_t v12 = v10 + 4;
      if (v5)
      {
LABEL_13:
        if (v10 != a4 || v12 >= (void *)((char *)a4 + 5 * v8 + 32)) {
          memmove(v12, a4 + 4, 5 * v8);
        }
        a4[2] = 0;
        goto LABEL_22;
      }
    }
    else
    {
      uint64_t v10 = _swiftEmptyArrayStorage;
      int64_t v12 = &_swiftEmptyArrayStorage[4];
      if (result) {
        goto LABEL_13;
      }
    }
    sub_100A73E10(0, v8, (char *)v12, (uint64_t)a4);
LABEL_22:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

void *sub_100A6FDA8(void *result, int64_t a2, char a3, void *a4)
{
  char v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    uint64_t v7 = a2;
    goto LABEL_8;
  }
  unint64_t v6 = a4[3];
  uint64_t v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2) {
    goto LABEL_8;
  }
  if (v7 + 0x4000000000000000 >= 0)
  {
    uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
      uint64_t v7 = a2;
    }
LABEL_8:
    uint64_t v8 = a4[2];
    if (v7 <= v8) {
      uint64_t v9 = a4[2];
    }
    else {
      uint64_t v9 = v7;
    }
    if (v9)
    {
      sub_10000588C((uint64_t *)&unk_101657D50);
      uint64_t v10 = (void *)swift_allocObject();
      int64_t v11 = j__malloc_size(v10);
      uint64_t v12 = v11 - 32;
      if (v11 < 32) {
        uint64_t v12 = v11 - 1;
      }
      v10[2] = v8;
      v10[3] = 2 * (v12 >> 5);
      uint64_t v13 = v10 + 4;
      if (v5) {
        goto LABEL_15;
      }
    }
    else
    {
      uint64_t v10 = _swiftEmptyArrayStorage;
      uint64_t v13 = &_swiftEmptyArrayStorage[4];
      if (result)
      {
LABEL_15:
        if (v10 != a4 || v13 >= &a4[4 * v8 + 4]) {
          memmove(v13, a4 + 4, 32 * v8);
        }
        a4[2] = 0;
        goto LABEL_24;
      }
    }
    sub_100A73EFC(0, v8, (unint64_t)v13, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

uint64_t sub_100A6FEB8(char a1, int64_t a2, char a3, unint64_t a4)
{
  return sub_100A6E660(a1, a2, a3, a4, (uint64_t *)&unk_101657840, (uint64_t (*)(void))&type metadata accessor for URLQueryItem, (uint64_t (*)(void))&type metadata accessor for URLQueryItem);
}

void *sub_100A6FEEC(void *result, int64_t a2, char a3, void *a4)
{
  char v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    uint64_t v7 = a2;
    goto LABEL_8;
  }
  unint64_t v6 = a4[3];
  uint64_t v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2) {
    goto LABEL_8;
  }
  if (v7 + 0x4000000000000000 >= 0)
  {
    uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
      uint64_t v7 = a2;
    }
LABEL_8:
    uint64_t v8 = a4[2];
    if (v7 <= v8) {
      uint64_t v9 = a4[2];
    }
    else {
      uint64_t v9 = v7;
    }
    if (v9)
    {
      sub_10000588C(&qword_101657B40);
      uint64_t v10 = (void *)swift_allocObject();
      size_t v11 = j__malloc_size(v10);
      v10[2] = v8;
      v10[3] = 2 * ((uint64_t)(v11 - 32) / 40);
      uint64_t v12 = v10 + 4;
      if (v5)
      {
LABEL_13:
        if (v10 != a4 || v12 >= &a4[5 * v8 + 4]) {
          memmove(v12, a4 + 4, 40 * v8);
        }
        a4[2] = 0;
        goto LABEL_22;
      }
    }
    else
    {
      uint64_t v10 = _swiftEmptyArrayStorage;
      uint64_t v12 = &_swiftEmptyArrayStorage[4];
      if (result) {
        goto LABEL_13;
      }
    }
    sub_100A73FF0(0, v8, (unint64_t)v12, (uint64_t)a4);
LABEL_22:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

uint64_t sub_100A70010(char a1, int64_t a2, char a3, unint64_t a4)
{
  return sub_100A6E660(a1, a2, a3, a4, &qword_101657B48, type metadata accessor for SharingCircleKeyManager.MemberDeviceDecryptionKey, type metadata accessor for SharingCircleKeyManager.MemberDeviceDecryptionKey);
}

uint64_t sub_100A70044(char a1, int64_t a2, char a3, unint64_t a4)
{
  return sub_100A6E660(a1, a2, a3, a4, &qword_101657B38, type metadata accessor for KeyDropFetchItem, type metadata accessor for KeyDropFetchItem);
}

uint64_t sub_100A70078(char a1, int64_t a2, char a3, unint64_t a4)
{
  return sub_100A6E660(a1, a2, a3, a4, &qword_101657B30, type metadata accessor for KeyDropFetchRequest.SharedFetchItem, type metadata accessor for KeyDropFetchRequest.SharedFetchItem);
}

uint64_t sub_100A700AC(char a1, int64_t a2, char a3, unint64_t a4)
{
  return sub_100A6E660(a1, a2, a3, a4, &qword_101657970, (uint64_t (*)(void))type metadata accessor for MemberSharingCircle, (uint64_t (*)(void))type metadata accessor for MemberSharingCircle);
}

uint64_t sub_100A700E0(char a1, int64_t a2, char a3, unint64_t a4)
{
  return sub_100A6E660(a1, a2, a3, a4, (uint64_t *)&unk_101657780, (uint64_t (*)(void))type metadata accessor for OwnedDeviceKeyRecord, (uint64_t (*)(void))type metadata accessor for OwnedDeviceKeyRecord);
}

uint64_t sub_100A70114(char a1, int64_t a2, char a3, unint64_t a4)
{
  return sub_100A6E660(a1, a2, a3, a4, &qword_101657A98, (uint64_t (*)(void))type metadata accessor for LostModeRecord, (uint64_t (*)(void))type metadata accessor for LostModeRecord);
}

uint64_t sub_100A70148(char a1, int64_t a2, char a3, unint64_t a4)
{
  return sub_100A6E660(a1, a2, a3, a4, &qword_10163A970, (uint64_t (*)(void))type metadata accessor for LocationProvider, (uint64_t (*)(void))type metadata accessor for LocationProvider);
}

uint64_t sub_100A7017C(char a1, int64_t a2, char a3, unint64_t a4)
{
  return sub_100A6E660(a1, a2, a3, a4, &qword_101657AB0, (uint64_t (*)(void))type metadata accessor for KeyAlignmentRecord, (uint64_t (*)(void))type metadata accessor for KeyAlignmentRecord);
}

uint64_t sub_100A701B0(char a1, int64_t a2, char a3, unint64_t a4)
{
  return sub_100A6E660(a1, a2, a3, a4, (uint64_t *)&unk_101657920, (uint64_t (*)(void))type metadata accessor for ShareRecord, (uint64_t (*)(void))type metadata accessor for ShareRecord);
}

uint64_t sub_100A701E4(char a1, int64_t a2, char a3, unint64_t a4)
{
  return sub_100A6E660(a1, a2, a3, a4, &qword_1016579E0, (uint64_t (*)(void))type metadata accessor for SafeLocation, (uint64_t (*)(void))type metadata accessor for SafeLocation);
}

uint64_t sub_100A70218(char a1, int64_t a2, char a3, unint64_t a4)
{
  return sub_100A6E660(a1, a2, a3, a4, (uint64_t *)&unk_101657AA0, (uint64_t (*)(void))type metadata accessor for LeashRecord, (uint64_t (*)(void))type metadata accessor for LeashRecord);
}

uint64_t sub_100A7024C(char a1, int64_t a2, char a3, unint64_t a4)
{
  return sub_100A6E660(a1, a2, a3, a4, (uint64_t *)&unk_101657CC0, (uint64_t (*)(void))type metadata accessor for NotifyMeRequest.Subscription, (uint64_t (*)(void))type metadata accessor for NotifyMeRequest.Subscription);
}

uint64_t sub_100A70280(char a1, int64_t a2, char a3, unint64_t a4)
{
  return sub_100A6EE0C(a1, a2, a3, a4, &qword_1016412A8, (uint64_t *)&unk_101657CD0);
}

uint64_t sub_100A70294(char a1, int64_t a2, char a3, unint64_t a4)
{
  return sub_100A6E660(a1, a2, a3, a4, &qword_101657698, (uint64_t (*)(void))type metadata accessor for AccessoryProductInfo, (uint64_t (*)(void))type metadata accessor for AccessoryProductInfo);
}

uint64_t sub_100A702C8(char a1, int64_t a2, char a3, unint64_t a4)
{
  return sub_100A6EE0C(a1, a2, a3, a4, (uint64_t *)&unk_1016577F0, &qword_1016554F8);
}

uint64_t sub_100A702DC(char a1, int64_t a2, char a3, unint64_t a4)
{
  return sub_100A6EE0C(a1, a2, a3, a4, (uint64_t *)&unk_1016577E0, &qword_101640970);
}

uint64_t sub_100A702F0(char a1, int64_t a2, char a3, unint64_t a4)
{
  return sub_100A6EE0C(a1, a2, a3, a4, (uint64_t *)&unk_1016577C0, &qword_10163A888);
}

uint64_t sub_100A70304(char a1, int64_t a2, char a3, unint64_t a4)
{
  return sub_100A6E660(a1, a2, a3, a4, &qword_1016576C0, type metadata accessor for AirPodsUnpairData.DeviceUnpairData, type metadata accessor for AirPodsUnpairData.DeviceUnpairData);
}

void *sub_100A70338(void *result, int64_t a2, char a3, void *a4)
{
  char v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    uint64_t v7 = a2;
    goto LABEL_8;
  }
  unint64_t v6 = a4[3];
  uint64_t v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2) {
    goto LABEL_8;
  }
  if (v7 + 0x4000000000000000 >= 0)
  {
    uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
      uint64_t v7 = a2;
    }
LABEL_8:
    uint64_t v8 = a4[2];
    if (v7 <= v8) {
      uint64_t v9 = a4[2];
    }
    else {
      uint64_t v9 = v7;
    }
    if (v9)
    {
      sub_10000588C((uint64_t *)&unk_1016576A0);
      uint64_t v10 = (void *)swift_allocObject();
      size_t v11 = j__malloc_size(v10);
      v10[2] = v8;
      v10[3] = 2 * ((uint64_t)(v11 - 32) / 48);
      uint64_t v12 = v10 + 4;
      if (v5)
      {
LABEL_13:
        if (v10 != a4 || v12 >= &a4[6 * v8 + 4]) {
          memmove(v12, a4 + 4, 48 * v8);
        }
        a4[2] = 0;
        goto LABEL_22;
      }
    }
    else
    {
      uint64_t v10 = _swiftEmptyArrayStorage;
      uint64_t v12 = &_swiftEmptyArrayStorage[4];
      if (result) {
        goto LABEL_13;
      }
    }
    sub_100A73824(0, v8, (unint64_t)v12, (uint64_t)a4);
LABEL_22:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

uint64_t sub_100A70460(char a1, int64_t a2, char a3, unint64_t a4)
{
  return sub_100A6E660(a1, a2, a3, a4, &qword_101657CA8, (uint64_t (*)(void))type metadata accessor for BluetoothManagerDevice, (uint64_t (*)(void))type metadata accessor for BluetoothManagerDevice);
}

void *sub_100A70494(void *a1, int64_t a2, char a3, void *a4)
{
  return sub_100A704A8(a1, a2, a3, a4, (uint64_t *)&unk_101657CB0);
}

void *sub_100A704A8(void *result, int64_t a2, char a3, void *a4, uint64_t *a5)
{
  char v6 = (char)result;
  if ((a3 & 1) == 0)
  {
    uint64_t v8 = a2;
    goto LABEL_8;
  }
  unint64_t v7 = a4[3];
  uint64_t v8 = v7 >> 1;
  if ((uint64_t)(v7 >> 1) >= a2) {
    goto LABEL_8;
  }
  if (v8 + 0x4000000000000000 >= 0)
  {
    uint64_t v8 = v7 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v7 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
      uint64_t v8 = a2;
    }
LABEL_8:
    uint64_t v9 = a4[2];
    if (v8 <= v9) {
      uint64_t v10 = a4[2];
    }
    else {
      uint64_t v10 = v8;
    }
    if (v10)
    {
      sub_10000588C(a5);
      size_t v11 = (void *)swift_allocObject();
      int64_t v12 = j__malloc_size(v11);
      uint64_t v13 = v12 - 32;
      if (v12 < 32) {
        uint64_t v13 = v12 - 17;
      }
      v11[2] = v9;
      v11[3] = 2 * (v13 >> 4);
      size_t v14 = v11 + 4;
      if (v6) {
        goto LABEL_15;
      }
    }
    else
    {
      size_t v11 = _swiftEmptyArrayStorage;
      size_t v14 = &_swiftEmptyArrayStorage[4];
      if (result)
      {
LABEL_15:
        if (v11 != a4 || v14 >= &a4[2 * v9 + 4]) {
          memmove(v14, a4 + 4, 16 * v9);
        }
        a4[2] = 0;
        goto LABEL_24;
      }
    }
    sub_100A7342C(0, v9, (unint64_t)v14, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease();
    return v11;
  }
  __break(1u);
  return result;
}

void *sub_100A705C4(void *result, int64_t a2, char a3, void *a4)
{
  char v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    uint64_t v7 = a2;
    goto LABEL_8;
  }
  unint64_t v6 = a4[3];
  uint64_t v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2) {
    goto LABEL_8;
  }
  if (v7 + 0x4000000000000000 >= 0)
  {
    uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
      uint64_t v7 = a2;
    }
LABEL_8:
    uint64_t v8 = a4[2];
    if (v7 <= v8) {
      uint64_t v9 = a4[2];
    }
    else {
      uint64_t v9 = v7;
    }
    if (v9)
    {
      sub_10000588C((uint64_t *)&unk_101657BB0);
      uint64_t v10 = (void *)swift_allocObject();
      size_t v11 = j__malloc_size(v10);
      v10[2] = v8;
      v10[3] = 2 * ((uint64_t)(v11 - 32) / 48);
      int64_t v12 = v10 + 4;
      if (v5)
      {
LABEL_13:
        if (v10 != a4 || v12 >= &a4[6 * v8 + 4]) {
          memmove(v12, a4 + 4, 48 * v8);
        }
        a4[2] = 0;
        goto LABEL_22;
      }
    }
    else
    {
      uint64_t v10 = _swiftEmptyArrayStorage;
      int64_t v12 = &_swiftEmptyArrayStorage[4];
      if (result) {
        goto LABEL_13;
      }
    }
    sub_100A7351C(0, v8, (unint64_t)v12, (uint64_t)a4);
LABEL_22:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

void *sub_100A706EC(void *a1, int64_t a2, char a3, void *a4)
{
  return sub_100A6E940(a1, a2, a3, a4, &qword_101657BC0);
}

uint64_t sub_100A706F8(char a1, int64_t a2, char a3, unint64_t a4)
{
  return sub_100A6E660(a1, a2, a3, a4, &qword_101657690, (uint64_t (*)(void))type metadata accessor for LocalFindableAccessoryRecord, (uint64_t (*)(void))type metadata accessor for LocalFindableAccessoryRecord);
}

void *sub_100A7072C(void *result, int64_t a2, char a3, void *a4)
{
  char v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    uint64_t v7 = a2;
    goto LABEL_8;
  }
  unint64_t v6 = a4[3];
  uint64_t v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2) {
    goto LABEL_8;
  }
  if (v7 + 0x4000000000000000 >= 0)
  {
    uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
      uint64_t v7 = a2;
    }
LABEL_8:
    uint64_t v8 = a4[2];
    if (v7 <= v8) {
      uint64_t v9 = a4[2];
    }
    else {
      uint64_t v9 = v7;
    }
    if (v9)
    {
      sub_10000588C(&qword_101657B80);
      uint64_t v10 = (void *)swift_allocObject();
      int64_t v11 = j__malloc_size(v10);
      uint64_t v12 = v11 - 32;
      if (v11 < 32) {
        uint64_t v12 = v11 - 17;
      }
      v10[2] = v8;
      v10[3] = 2 * (v12 >> 4);
      uint64_t v13 = v10 + 4;
      if (v5) {
        goto LABEL_15;
      }
    }
    else
    {
      uint64_t v10 = _swiftEmptyArrayStorage;
      uint64_t v13 = &_swiftEmptyArrayStorage[4];
      if (result)
      {
LABEL_15:
        if (v10 != a4 || v13 >= &a4[2 * v8 + 4]) {
          memmove(v13, a4 + 4, 16 * v8);
        }
        a4[2] = 0;
        goto LABEL_24;
      }
    }
    sub_100A740E8(0, v8, (unint64_t)v13, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

uint64_t sub_100A7083C(char a1, int64_t a2, char a3, unint64_t a4)
{
  return sub_100A6E660(a1, a2, a3, a4, &qword_101657AB8, (uint64_t (*)(void))type metadata accessor for SharedBeaconGroup, (uint64_t (*)(void))type metadata accessor for SharedBeaconGroup);
}

void *sub_100A70870(void *a1, int64_t a2, char a3, void *a4)
{
  return sub_100A6F08C(a1, a2, a3, a4, &qword_10163A928, (uint64_t *)&unk_101657950);
}

uint64_t sub_100A70884(char a1, int64_t a2, char a3, unint64_t a4)
{
  return sub_100A6E660(a1, a2, a3, a4, &qword_1016576B0, (uint64_t (*)(void))type metadata accessor for BeaconEstimatedLocation, (uint64_t (*)(void))type metadata accessor for BeaconEstimatedLocation);
}

uint64_t sub_100A708B8(char a1, int64_t a2, char a3, unint64_t a4)
{
  return sub_100A6E660(a1, a2, a3, a4, &qword_101657B50, type metadata accessor for FetchRequestBeacon, type metadata accessor for FetchRequestBeacon);
}

void *sub_100A708EC(void *a1, int64_t a2, char a3, void *a4)
{
  return sub_100A7090C(a1, a2, a3, a4, (uint64_t *)&unk_101657940, type metadata accessor for SPBeaconTaskName);
}

void *sub_100A7090C(void *result, int64_t a2, char a3, void *a4, uint64_t *a5, void (*a6)(void))
{
  char v8 = (char)result;
  if ((a3 & 1) == 0)
  {
    uint64_t v10 = a2;
    goto LABEL_8;
  }
  unint64_t v9 = a4[3];
  uint64_t v10 = v9 >> 1;
  if ((uint64_t)(v9 >> 1) >= a2) {
    goto LABEL_8;
  }
  if (v10 + 0x4000000000000000 >= 0)
  {
    uint64_t v10 = v9 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v9 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
      uint64_t v10 = a2;
    }
LABEL_8:
    uint64_t v11 = a4[2];
    if (v10 <= v11) {
      uint64_t v12 = a4[2];
    }
    else {
      uint64_t v12 = v10;
    }
    if (v12)
    {
      sub_10000588C(a5);
      uint64_t v13 = (void *)swift_allocObject();
      int64_t v14 = j__malloc_size(v13);
      uint64_t v15 = v14 - 32;
      if (v14 < 32) {
        uint64_t v15 = v14 - 25;
      }
      v13[2] = v11;
      v13[3] = 2 * (v15 >> 3);
      uint64_t v16 = v13 + 4;
      if (v8) {
        goto LABEL_15;
      }
    }
    else
    {
      uint64_t v13 = _swiftEmptyArrayStorage;
      uint64_t v16 = &_swiftEmptyArrayStorage[4];
      if (result)
      {
LABEL_15:
        if (v13 != a4 || v16 >= &a4[v11 + 4]) {
          memmove(v16, a4 + 4, 8 * v11);
        }
        a4[2] = 0;
        goto LABEL_24;
      }
    }
    sub_100A73C0C(0, v11, (unint64_t)v16, (uint64_t)a4, a6);
LABEL_24:
    swift_bridgeObjectRelease();
    return v13;
  }
  __break(1u);
  return result;
}

uint64_t sub_100A70A28(char a1, int64_t a2, char a3, unint64_t a4)
{
  return sub_100A6EE0C(a1, a2, a3, a4, (uint64_t *)&unk_101657960, &qword_10163A958);
}

void *sub_100A70A3C(void *result, int64_t a2, char a3, void *a4)
{
  char v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    uint64_t v7 = a2;
    goto LABEL_8;
  }
  unint64_t v6 = a4[3];
  uint64_t v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2) {
    goto LABEL_8;
  }
  if (v7 + 0x4000000000000000 >= 0)
  {
    uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
      uint64_t v7 = a2;
    }
LABEL_8:
    uint64_t v8 = a4[2];
    if (v7 <= v8) {
      uint64_t v9 = a4[2];
    }
    else {
      uint64_t v9 = v7;
    }
    if (v9)
    {
      sub_10000588C(&qword_101657AC0);
      uint64_t v10 = (void *)swift_allocObject();
      int64_t v11 = j__malloc_size(v10);
      uint64_t v12 = v11 - 32;
      if (v11 < 32) {
        uint64_t v12 = v11 - 25;
      }
      v10[2] = v8;
      v10[3] = 2 * (v12 >> 3);
      uint64_t v13 = v10 + 4;
      if (v5) {
        goto LABEL_15;
      }
    }
    else
    {
      uint64_t v10 = _swiftEmptyArrayStorage;
      uint64_t v13 = &_swiftEmptyArrayStorage[4];
      if (result)
      {
LABEL_15:
        if (v10 != a4 || v13 >= &a4[v8 + 4]) {
          memmove(v13, a4 + 4, 8 * v8);
        }
        a4[2] = 0;
        goto LABEL_24;
      }
    }
    sub_100A7362C(0, v8, (char *)v13, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

uint64_t sub_100A70B4C(char a1, int64_t a2, char a3, unint64_t a4)
{
  return sub_100A6E660(a1, a2, a3, a4, &qword_101657A70, type metadata accessor for WildModeAssociationRecord, type metadata accessor for WildModeAssociationRecord);
}

uint64_t sub_100A70B80(char a1, int64_t a2, char a3, unint64_t a4)
{
  return sub_100A6E660(a1, a2, a3, a4, &qword_1016578C0, type metadata accessor for AirPodsLostModeContent.Device, type metadata accessor for AirPodsLostModeContent.Device);
}

uint64_t sub_100A70BB4(char a1, int64_t a2, char a3, unint64_t a4)
{
  return sub_100A6EE0C(a1, a2, a3, a4, &qword_10163AB00, &qword_101657CA0);
}

void *sub_100A70BC8(void *a1, int64_t a2, char a3, void *a4)
{
  return sub_100A71928(a1, a2, a3, a4, (uint64_t *)&unk_101657D28, &qword_101648A30);
}

uint64_t sub_100A70BDC(char a1, int64_t a2, char a3, unint64_t a4)
{
  return sub_100A6E660(a1, a2, a3, a4, &qword_10163A778, (uint64_t (*)(void))type metadata accessor for BeaconObservation, (uint64_t (*)(void))type metadata accessor for BeaconObservation);
}

uint64_t sub_100A70C10(char a1, int64_t a2, char a3, unint64_t a4)
{
  return sub_100A6EE0C(a1, a2, a3, a4, (uint64_t *)&unk_1016576D0, &qword_101642760);
}

void *sub_100A70C24(void *a1, int64_t a2, char a3, void *a4)
{
  return sub_100A6FAA0(a1, a2, a3, a4, (uint64_t *)&unk_101657C90);
}

void *sub_100A70C30(void *a1, int64_t a2, char a3, void *a4)
{
  return sub_100A6F08C(a1, a2, a3, a4, (uint64_t *)&unk_101657C80, &qword_1016390A0);
}

uint64_t sub_100A70C44(char a1, int64_t a2, char a3, unint64_t a4)
{
  return sub_100A6EE0C(a1, a2, a3, a4, &qword_1016575D8, &qword_1016575E0);
}

void *sub_100A70C58(void *a1, int64_t a2, char a3, void *a4)
{
  return sub_100A6E940(a1, a2, a3, a4, &qword_10163A788);
}

uint64_t sub_100A70C64(char a1, int64_t a2, char a3, unint64_t a4)
{
  return sub_100A6E660(a1, a2, a3, a4, &qword_101657A40, type metadata accessor for DeviceEvent, type metadata accessor for DeviceEvent);
}

uint64_t sub_100A70C98(char a1, int64_t a2, char a3, unint64_t a4)
{
  return sub_100A6E660(a1, a2, a3, a4, &qword_10163AA18, (uint64_t (*)(void))type metadata accessor for RawSearchResult, (uint64_t (*)(void))type metadata accessor for RawSearchResult);
}

void *sub_100A70CCC(void *result, int64_t a2, char a3, void *a4)
{
  char v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    uint64_t v7 = a2;
    goto LABEL_8;
  }
  unint64_t v6 = a4[3];
  uint64_t v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2) {
    goto LABEL_8;
  }
  if (v7 + 0x4000000000000000 >= 0)
  {
    uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
      uint64_t v7 = a2;
    }
LABEL_8:
    uint64_t v8 = a4[2];
    if (v7 <= v8) {
      uint64_t v9 = a4[2];
    }
    else {
      uint64_t v9 = v7;
    }
    if (v9)
    {
      sub_10000588C(&qword_10163AA38);
      uint64_t v10 = (void *)swift_allocObject();
      int64_t v11 = j__malloc_size(v10);
      uint64_t v12 = v11 - 32;
      if (v11 < 32) {
        uint64_t v12 = v11 - 1;
      }
      v10[2] = v8;
      v10[3] = 2 * (v12 >> 5);
      uint64_t v13 = v10 + 4;
      if (v5) {
        goto LABEL_15;
      }
    }
    else
    {
      uint64_t v10 = _swiftEmptyArrayStorage;
      uint64_t v13 = &_swiftEmptyArrayStorage[4];
      if (result)
      {
LABEL_15:
        if (v10 != a4 || v13 >= &a4[4 * v8 + 4]) {
          memmove(v13, a4 + 4, 32 * v8);
        }
        a4[2] = 0;
        goto LABEL_24;
      }
    }
    sub_100A72E28(0, v8, (unint64_t)v13, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

void *sub_100A70DDC(void *result, int64_t a2, char a3, void *a4)
{
  char v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    uint64_t v7 = a2;
    goto LABEL_8;
  }
  unint64_t v6 = a4[3];
  uint64_t v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2) {
    goto LABEL_8;
  }
  if (v7 + 0x4000000000000000 >= 0)
  {
    uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
      uint64_t v7 = a2;
    }
LABEL_8:
    uint64_t v8 = a4[2];
    if (v7 <= v8) {
      uint64_t v9 = a4[2];
    }
    else {
      uint64_t v9 = v7;
    }
    if (v9)
    {
      sub_10000588C(&qword_10163AA10);
      uint64_t v10 = (void *)swift_allocObject();
      size_t v11 = j__malloc_size(v10);
      v10[2] = v8;
      v10[3] = 2 * ((uint64_t)(v11 - 32) / 48);
      uint64_t v12 = v10 + 4;
      if (v5)
      {
LABEL_13:
        if (v10 != a4 || v12 >= &a4[6 * v8 + 4]) {
          memmove(v12, a4 + 4, 48 * v8);
        }
        a4[2] = 0;
        goto LABEL_22;
      }
    }
    else
    {
      uint64_t v10 = _swiftEmptyArrayStorage;
      uint64_t v12 = &_swiftEmptyArrayStorage[4];
      if (result) {
        goto LABEL_13;
      }
    }
    sub_100A73D18(0, v8, (unint64_t)v12, (uint64_t)a4);
LABEL_22:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

void *sub_100A70F04(void *a1, int64_t a2, char a3, void *a4)
{
  return sub_100A6F08C(a1, a2, a3, a4, (uint64_t *)&unk_10164E7A0, (uint64_t *)&unk_101657B00);
}

void *sub_100A70F18(void *a1, int64_t a2, char a3, void *a4)
{
  return sub_100A70F40(a1, a2, a3, a4, &qword_101657B10, &qword_101657B18);
}

void *sub_100A70F2C(void *a1, int64_t a2, char a3, void *a4)
{
  return sub_100A70F40(a1, a2, a3, a4, &qword_101657B20, &qword_101657B28);
}

void *sub_100A70F40(void *result, int64_t a2, char a3, void *a4, uint64_t *a5, uint64_t *a6)
{
  char v8 = (char)result;
  if ((a3 & 1) == 0)
  {
    uint64_t v10 = a2;
    goto LABEL_8;
  }
  unint64_t v9 = a4[3];
  uint64_t v10 = v9 >> 1;
  if ((uint64_t)(v9 >> 1) >= a2) {
    goto LABEL_8;
  }
  if (v10 + 0x4000000000000000 >= 0)
  {
    uint64_t v10 = v9 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v9 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
      uint64_t v10 = a2;
    }
LABEL_8:
    uint64_t v11 = a4[2];
    if (v10 <= v11) {
      uint64_t v12 = a4[2];
    }
    else {
      uint64_t v12 = v10;
    }
    if (v12)
    {
      sub_10000588C(a5);
      uint64_t v13 = (void *)swift_allocObject();
      int64_t v14 = j__malloc_size(v13);
      uint64_t v15 = v14 - 32;
      if (v14 < 32) {
        uint64_t v15 = v14 - 25;
      }
      v13[2] = v11;
      v13[3] = 2 * (v15 >> 3);
      uint64_t v16 = v13 + 4;
      if (v8) {
        goto LABEL_15;
      }
    }
    else
    {
      uint64_t v13 = _swiftEmptyArrayStorage;
      uint64_t v16 = &_swiftEmptyArrayStorage[4];
      if (result)
      {
LABEL_15:
        if (v13 != a4 || v16 >= &a4[v11 + 4]) {
          memmove(v16, a4 + 4, 8 * v11);
        }
        a4[2] = 0;
        goto LABEL_24;
      }
    }
    sub_100A74E44(0, v11, (unint64_t)v16, (uint64_t)a4, a6);
LABEL_24:
    swift_bridgeObjectRelease();
    return v13;
  }
  __break(1u);
  return result;
}

uint64_t sub_100A7105C(char a1, int64_t a2, char a3, unint64_t a4)
{
  return sub_100A6E660(a1, a2, a3, a4, &qword_101657B58, type metadata accessor for FetchRequestBeacon_OwnedDevice, type metadata accessor for FetchRequestBeacon_OwnedDevice);
}

uint64_t sub_100A71090(char a1, int64_t a2, char a3, unint64_t a4)
{
  return sub_100A6EE0C(a1, a2, a3, a4, (uint64_t *)&unk_101657B70, &qword_1016497E0);
}

void *sub_100A710A4(void *result, int64_t a2, char a3, void *a4)
{
  char v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    uint64_t v7 = a2;
    goto LABEL_8;
  }
  unint64_t v6 = a4[3];
  uint64_t v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2) {
    goto LABEL_8;
  }
  if (v7 + 0x4000000000000000 >= 0)
  {
    uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
      uint64_t v7 = a2;
    }
LABEL_8:
    uint64_t v8 = a4[2];
    if (v7 <= v8) {
      uint64_t v9 = a4[2];
    }
    else {
      uint64_t v9 = v7;
    }
    if (v9)
    {
      sub_10000588C(&qword_101657860);
      uint64_t v10 = (void *)swift_allocObject();
      int64_t v11 = j__malloc_size(v10);
      uint64_t v12 = v11 - 32;
      if (v11 < 32) {
        uint64_t v12 = v11 - 17;
      }
      v10[2] = v8;
      v10[3] = 2 * (v12 >> 4);
      uint64_t v13 = v10 + 4;
      if (v5) {
        goto LABEL_15;
      }
    }
    else
    {
      uint64_t v10 = _swiftEmptyArrayStorage;
      uint64_t v13 = &_swiftEmptyArrayStorage[4];
      if (result)
      {
LABEL_15:
        if (v10 != a4 || v13 >= &a4[2 * v8 + 4]) {
          memmove(v13, a4 + 4, 16 * v8);
        }
        a4[2] = 0;
        goto LABEL_24;
      }
    }
    sub_100A73718(0, v8, (unint64_t)v13, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

void *sub_100A711B4(void *result, int64_t a2, char a3, void *a4)
{
  char v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    uint64_t v7 = a2;
    goto LABEL_8;
  }
  unint64_t v6 = a4[3];
  uint64_t v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2) {
    goto LABEL_8;
  }
  if (v7 + 0x4000000000000000 >= 0)
  {
    uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
      uint64_t v7 = a2;
    }
LABEL_8:
    uint64_t v8 = a4[2];
    if (v7 <= v8) {
      uint64_t v9 = a4[2];
    }
    else {
      uint64_t v9 = v7;
    }
    if (v9)
    {
      sub_10000588C((uint64_t *)&unk_101657870);
      uint64_t v10 = (void *)swift_allocObject();
      int64_t v11 = j__malloc_size(v10);
      uint64_t v12 = v11 - 32;
      if (v11 < 32) {
        uint64_t v12 = v11 - 1;
      }
      v10[2] = v8;
      v10[3] = 2 * (v12 >> 5);
      uint64_t v13 = v10 + 4;
      if (v5) {
        goto LABEL_15;
      }
    }
    else
    {
      uint64_t v10 = _swiftEmptyArrayStorage;
      uint64_t v13 = &_swiftEmptyArrayStorage[4];
      if (result)
      {
LABEL_15:
        if (v10 != a4 || v13 >= &a4[4 * v8 + 4]) {
          memmove(v13, a4 + 4, 32 * v8);
        }
        a4[2] = 0;
        goto LABEL_24;
      }
    }
    sub_100A72F34(0, v8, (unint64_t)v13, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

uint64_t sub_100A712C4(char a1, int64_t a2, char a3, unint64_t a4)
{
  return sub_100A6E660(a1, a2, a3, a4, &qword_10163AA80, (uint64_t (*)(void))type metadata accessor for SecureLocation, (uint64_t (*)(void))type metadata accessor for SecureLocation);
}

uint64_t sub_100A712F8(char a1, int64_t a2, char a3, unint64_t a4)
{
  return sub_100A6E660(a1, a2, a3, a4, &qword_101657A78, (uint64_t (*)(void))type metadata accessor for SecureLocationsCachedPayload, (uint64_t (*)(void))type metadata accessor for SecureLocationsCachedPayload);
}

void *sub_100A7132C(void *result, int64_t a2, char a3, void *a4)
{
  char v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    uint64_t v7 = a2;
    goto LABEL_8;
  }
  unint64_t v6 = a4[3];
  uint64_t v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2) {
    goto LABEL_8;
  }
  if (v7 + 0x4000000000000000 >= 0)
  {
    uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
      uint64_t v7 = a2;
    }
LABEL_8:
    uint64_t v8 = a4[2];
    if (v7 <= v8) {
      uint64_t v9 = a4[2];
    }
    else {
      uint64_t v9 = v7;
    }
    if (v9)
    {
      sub_10000588C(&qword_101657A80);
      uint64_t v10 = (void *)swift_allocObject();
      size_t v11 = j__malloc_size(v10);
      v10[2] = v8;
      v10[3] = 2 * ((uint64_t)(v11 - 32) / 88);
      uint64_t v12 = v10 + 4;
      if (v5)
      {
LABEL_13:
        if (v10 != a4 || v12 >= &a4[11 * v8 + 4]) {
          memmove(v12, a4 + 4, 88 * v8);
        }
        a4[2] = 0;
        goto LABEL_22;
      }
    }
    else
    {
      uint64_t v10 = _swiftEmptyArrayStorage;
      uint64_t v12 = &_swiftEmptyArrayStorage[4];
      if (result) {
        goto LABEL_13;
      }
    }
    sub_100A742C4(0, v8, (unint64_t)v12, (uint64_t)a4);
LABEL_22:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

uint64_t sub_100A71458(char a1, int64_t a2, char a3, unint64_t a4)
{
  return sub_100A6E660(a1, a2, a3, a4, &qword_10163CF10, (uint64_t (*)(void))&type metadata accessor for Setter, (uint64_t (*)(void))&type metadata accessor for Setter);
}

uint64_t sub_100A7148C(char a1, int64_t a2, char a3, unint64_t a4)
{
  return sub_100A6E660(a1, a2, a3, a4, (uint64_t *)&unk_101657A60, (uint64_t (*)(void))type metadata accessor for NotifyWhenFoundRecord, (uint64_t (*)(void))type metadata accessor for NotifyWhenFoundRecord);
}

uint64_t sub_100A714C0(char a1, int64_t a2, char a3, unint64_t a4)
{
  return sub_100A6E660(a1, a2, a3, a4, &qword_101657A90, (uint64_t (*)(void))type metadata accessor for LostModeInfoRecord, (uint64_t (*)(void))type metadata accessor for LostModeInfoRecord);
}

void *sub_100A714F4(void *a1, int64_t a2, char a3, void *a4)
{
  return sub_100A6FAA0(a1, a2, a3, a4, &qword_101657670);
}

uint64_t sub_100A71500(char a1, int64_t a2, char a3, unint64_t a4)
{
  return sub_100A6E660(a1, a2, a3, a4, &qword_10163A940, (uint64_t (*)(void))type metadata accessor for KeySyncMetadataDisplay, (uint64_t (*)(void))type metadata accessor for KeySyncMetadataDisplay);
}

uint64_t sub_100A71534(char a1, int64_t a2, char a3, unint64_t a4)
{
  return sub_100A6E660(a1, a2, a3, a4, &qword_101657C78, (uint64_t (*)(void))type metadata accessor for LegacyBeaconState, (uint64_t (*)(void))type metadata accessor for LegacyBeaconState);
}

void *sub_100A71568(void *a1, int64_t a2, char a3, void *a4)
{
  return sub_100A72830(a1, a2, a3, a4, (uint64_t *)&unk_101657BA0);
}

uint64_t sub_100A7157C(char a1, int64_t a2, char a3, unint64_t a4)
{
  return sub_100A6EE0C(a1, a2, a3, a4, &qword_1016578B0, &qword_1016578B8);
}

void *sub_100A71590(void *result, int64_t a2, char a3, void *a4)
{
  char v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    uint64_t v7 = a2;
    goto LABEL_8;
  }
  unint64_t v6 = a4[3];
  uint64_t v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2) {
    goto LABEL_8;
  }
  if (v7 + 0x4000000000000000 >= 0)
  {
    uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
      uint64_t v7 = a2;
    }
LABEL_8:
    uint64_t v8 = a4[2];
    if (v7 <= v8) {
      uint64_t v9 = a4[2];
    }
    else {
      uint64_t v9 = v7;
    }
    if (v9)
    {
      sub_10000588C((uint64_t *)&unk_101657C50);
      uint64_t v10 = (void *)swift_allocObject();
      int64_t v11 = j__malloc_size(v10);
      uint64_t v12 = v11 - 32;
      if (v11 < 32) {
        uint64_t v12 = v11 - 1;
      }
      v10[2] = v8;
      v10[3] = 2 * (v12 >> 5);
      uint64_t v13 = v10 + 4;
      if (v5) {
        goto LABEL_15;
      }
    }
    else
    {
      uint64_t v10 = _swiftEmptyArrayStorage;
      uint64_t v13 = &_swiftEmptyArrayStorage[4];
      if (result)
      {
LABEL_15:
        if (v10 != a4 || v13 >= &a4[4 * v8 + 4]) {
          memmove(v13, a4 + 4, 32 * v8);
        }
        a4[2] = 0;
        goto LABEL_24;
      }
    }
    sub_100A743B8(0, v8, (unint64_t)v13, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

uint64_t sub_100A716A0(char a1, int64_t a2, char a3, unint64_t a4)
{
  return sub_100A6E660(a1, a2, a3, a4, &qword_101657A88, type metadata accessor for SecureLocationsCachedSharedKey, type metadata accessor for SecureLocationsCachedSharedKey);
}

uint64_t sub_100A716D4(char a1, int64_t a2, char a3, unint64_t a4)
{
  return sub_100A6E660(a1, a2, a3, a4, &qword_10163A8A0, type metadata accessor for WildModeTrackingLocation, type metadata accessor for WildModeTrackingLocation);
}

void *sub_100A71708(void *a1, int64_t a2, char a3, void *a4)
{
  return sub_100A70F40(a1, a2, a3, a4, &qword_101648238, &qword_101657CE0);
}

uint64_t sub_100A7171C(char a1, int64_t a2, char a3, unint64_t a4)
{
  return sub_100A6EE0C(a1, a2, a3, a4, (uint64_t *)&unk_101657650, &qword_10163A798);
}

uint64_t sub_100A71730(char a1, int64_t a2, char a3, unint64_t a4)
{
  return sub_100A6EE0C(a1, a2, a3, a4, &qword_10163AAB0, &qword_101657C20);
}

uint64_t sub_100A71744(char a1, int64_t a2, char a3, unint64_t a4)
{
  return sub_100A6EE0C(a1, a2, a3, a4, &qword_10163AA58, (uint64_t *)&unk_10164E820);
}

uint64_t sub_100A71758(char a1, int64_t a2, char a3, unint64_t a4)
{
  return sub_100A6EE0C(a1, a2, a3, a4, &qword_10164E838, (uint64_t *)&unk_10164E790);
}

uint64_t sub_100A7176C(char a1, int64_t a2, char a3, unint64_t a4)
{
  return sub_100A6E660(a1, a2, a3, a4, &qword_101657938, (uint64_t (*)(void))type metadata accessor for SoundPlaybackManager.PlaybackCoordinator, (uint64_t (*)(void))type metadata accessor for SoundPlaybackManager.PlaybackCoordinator);
}

uint64_t sub_100A717A0(char a1, int64_t a2, char a3, unint64_t a4)
{
  return sub_100A6E660(a1, a2, a3, a4, &qword_1016579C0, (uint64_t (*)(void))type metadata accessor for LocalFindablePreferences, (uint64_t (*)(void))type metadata accessor for LocalFindablePreferences);
}

void *sub_100A717D4(void *a1, int64_t a2, char a3, void *a4)
{
  return sub_100A6F08C(a1, a2, a3, a4, &qword_101657C08, (uint64_t *)&unk_101657C10);
}

void *sub_100A717E8(void *result, int64_t a2, char a3, void *a4)
{
  char v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    uint64_t v7 = a2;
    goto LABEL_8;
  }
  unint64_t v6 = a4[3];
  uint64_t v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2) {
    goto LABEL_8;
  }
  if (v7 + 0x4000000000000000 >= 0)
  {
    uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
      uint64_t v7 = a2;
    }
LABEL_8:
    uint64_t v8 = a4[2];
    if (v7 <= v8) {
      uint64_t v9 = a4[2];
    }
    else {
      uint64_t v9 = v7;
    }
    if (v9)
    {
      sub_10000588C(&qword_10163AAA0);
      uint64_t v10 = (void *)swift_allocObject();
      size_t v11 = j__malloc_size(v10);
      v10[2] = v8;
      v10[3] = 2 * ((uint64_t)(v11 - 32) / 56);
      uint64_t v12 = v10 + 4;
      if (v5)
      {
LABEL_13:
        if (v10 != a4 || v12 >= &a4[7 * v8 + 4]) {
          memmove(v12, a4 + 4, 56 * v8);
        }
        a4[2] = 0;
        goto LABEL_22;
      }
    }
    else
    {
      uint64_t v10 = _swiftEmptyArrayStorage;
      uint64_t v12 = &_swiftEmptyArrayStorage[4];
      if (result) {
        goto LABEL_13;
      }
    }
    sub_100A73040(0, v8, (unint64_t)v12, (uint64_t)a4);
LABEL_22:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

void *sub_100A71914(void *a1, int64_t a2, char a3, void *a4)
{
  return sub_100A71928(a1, a2, a3, a4, (uint64_t *)&unk_101657BF0, &qword_10163A860);
}

void *sub_100A71928(void *result, int64_t a2, char a3, void *a4, uint64_t *a5, uint64_t *a6)
{
  char v8 = (char)result;
  if ((a3 & 1) == 0)
  {
    uint64_t v10 = a2;
    goto LABEL_8;
  }
  unint64_t v9 = a4[3];
  uint64_t v10 = v9 >> 1;
  if ((uint64_t)(v9 >> 1) >= a2) {
    goto LABEL_8;
  }
  if (v10 + 0x4000000000000000 >= 0)
  {
    uint64_t v10 = v9 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v9 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
      uint64_t v10 = a2;
    }
LABEL_8:
    uint64_t v11 = a4[2];
    if (v10 <= v11) {
      uint64_t v12 = a4[2];
    }
    else {
      uint64_t v12 = v10;
    }
    if (v12)
    {
      sub_10000588C(a5);
      uint64_t v13 = (void *)swift_allocObject();
      int64_t v14 = j__malloc_size(v13);
      uint64_t v15 = v14 - 32;
      if (v14 < 32) {
        uint64_t v15 = v14 - 17;
      }
      v13[2] = v11;
      v13[3] = 2 * (v15 >> 4);
      uint64_t v16 = v13 + 4;
      if (v8) {
        goto LABEL_15;
      }
    }
    else
    {
      uint64_t v13 = _swiftEmptyArrayStorage;
      uint64_t v16 = &_swiftEmptyArrayStorage[4];
      if (result)
      {
LABEL_15:
        if (v13 != a4 || v16 >= &a4[2 * v11 + 4]) {
          memmove(v16, a4 + 4, 16 * v11);
        }
        a4[2] = 0;
        goto LABEL_24;
      }
    }
    sub_100A74D3C(0, v11, (unint64_t)v16, (uint64_t)a4, a6);
LABEL_24:
    swift_bridgeObjectRelease();
    return v13;
  }
  __break(1u);
  return result;
}

uint64_t sub_100A71A44(char a1, int64_t a2, char a3, unint64_t a4)
{
  return sub_100A6E660(a1, a2, a3, a4, (uint64_t *)&unk_101657680, type metadata accessor for BeaconKeyServiceBuilder.KeyIndexMapInfo, type metadata accessor for BeaconKeyServiceBuilder.KeyIndexMapInfo);
}

void *sub_100A71A78(void *a1, int64_t a2, char a3, void *a4)
{
  return sub_100A70F40(a1, a2, a3, a4, (uint64_t *)&unk_101657660, &qword_101650660);
}

uint64_t sub_100A71A8C(char a1, int64_t a2, char a3, unint64_t a4)
{
  return sub_100A6E660(a1, a2, a3, a4, &qword_1016577A0, type metadata accessor for BeaconKeyManager.IndexInformation, type metadata accessor for BeaconKeyManager.IndexInformation);
}

uint64_t sub_100A71AC0(char a1, int64_t a2, char a3, unint64_t a4)
{
  return sub_100A6EE0C(a1, a2, a3, a4, &qword_10163A8D0, &qword_101657910);
}

uint64_t sub_100A71AD4(char a1, int64_t a2, char a3, unint64_t a4)
{
  return sub_100A6E660(a1, a2, a3, a4, (uint64_t *)&unk_101657BD0, type metadata accessor for BeaconKeyServiceBuilder.WorkItem, type metadata accessor for BeaconKeyServiceBuilder.WorkItem);
}

void *sub_100A71B08(void *result, int64_t a2, char a3, void *a4)
{
  char v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    uint64_t v7 = a2;
    goto LABEL_8;
  }
  unint64_t v6 = a4[3];
  uint64_t v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2) {
    goto LABEL_8;
  }
  if (v7 + 0x4000000000000000 >= 0)
  {
    uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
      uint64_t v7 = a2;
    }
LABEL_8:
    uint64_t v8 = a4[2];
    if (v7 <= v8) {
      uint64_t v9 = a4[2];
    }
    else {
      uint64_t v9 = v7;
    }
    if (v9)
    {
      sub_10000588C(&qword_101657BC8);
      uint64_t v10 = (void *)swift_allocObject();
      int64_t v11 = j__malloc_size(v10);
      uint64_t v12 = v11 - 32;
      if (v11 < 32) {
        uint64_t v12 = v11 - 29;
      }
      v10[2] = v8;
      v10[3] = 2 * (v12 >> 2);
      uint64_t v13 = v10 + 4;
      if (v5) {
        goto LABEL_15;
      }
    }
    else
    {
      uint64_t v10 = _swiftEmptyArrayStorage;
      uint64_t v13 = &_swiftEmptyArrayStorage[4];
      if (result)
      {
LABEL_15:
        if (v10 != a4 || v13 >= (void *)((char *)a4 + 4 * v8 + 32)) {
          memmove(v13, a4 + 4, 4 * v8);
        }
        a4[2] = 0;
        goto LABEL_24;
      }
    }
    sub_100A74654(0, v8, (char *)v13, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

uint64_t sub_100A71C18(char a1, int64_t a2, char a3, unint64_t a4)
{
  return sub_100A6E660(a1, a2, a3, a4, &qword_1016579C8, (uint64_t (*)(void))type metadata accessor for AccessoryConnectionService.Event, (uint64_t (*)(void))type metadata accessor for AccessoryConnectionService.Event);
}

void *sub_100A71C4C(void *result, int64_t a2, char a3, void *a4)
{
  char v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    uint64_t v7 = a2;
    goto LABEL_8;
  }
  unint64_t v6 = a4[3];
  uint64_t v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2) {
    goto LABEL_8;
  }
  if (v7 + 0x4000000000000000 >= 0)
  {
    uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
      uint64_t v7 = a2;
    }
LABEL_8:
    uint64_t v8 = a4[2];
    if (v7 <= v8) {
      uint64_t v9 = a4[2];
    }
    else {
      uint64_t v9 = v7;
    }
    if (v9)
    {
      sub_10000588C(&qword_101657C70);
      uint64_t v10 = (void *)swift_allocObject();
      size_t v11 = j__malloc_size(v10);
      v10[2] = v8;
      v10[3] = 2 * ((uint64_t)(v11 - 32) / 24);
      uint64_t v12 = v10 + 4;
      if (v5)
      {
LABEL_13:
        if (v10 != a4 || v12 >= &a4[3 * v8 + 4]) {
          memmove(v12, a4 + 4, 24 * v8);
        }
        a4[2] = 0;
        goto LABEL_22;
      }
    }
    else
    {
      uint64_t v10 = _swiftEmptyArrayStorage;
      uint64_t v12 = &_swiftEmptyArrayStorage[4];
      if (result) {
        goto LABEL_13;
      }
    }
    sub_100A74740(0, v8, (unint64_t)v12, (uint64_t)a4);
LABEL_22:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

uint64_t sub_100A71D74(char a1, int64_t a2, char a3, unint64_t a4)
{
  return sub_100A6EE0C(a1, a2, a3, a4, &qword_10163A898, (uint64_t *)&unk_101657850);
}

void *sub_100A71D88(void *result, int64_t a2, char a3, void *a4)
{
  char v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    uint64_t v7 = a2;
    goto LABEL_8;
  }
  unint64_t v6 = a4[3];
  uint64_t v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2) {
    goto LABEL_8;
  }
  if (v7 + 0x4000000000000000 >= 0)
  {
    uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
      uint64_t v7 = a2;
    }
LABEL_8:
    uint64_t v8 = a4[2];
    if (v7 <= v8) {
      uint64_t v9 = a4[2];
    }
    else {
      uint64_t v9 = v7;
    }
    if (v9)
    {
      sub_10000588C((uint64_t *)&unk_101653CD0);
      uint64_t v10 = (void *)swift_allocObject();
      size_t v11 = j__malloc_size(v10);
      v10[2] = v8;
      v10[3] = 2 * ((uint64_t)(v11 - 32) / 48);
      uint64_t v12 = v10 + 4;
      if (v5)
      {
LABEL_13:
        if (v10 != a4 || v12 >= &a4[6 * v8 + 4]) {
          memmove(v12, a4 + 4, 48 * v8);
        }
        a4[2] = 0;
        goto LABEL_22;
      }
    }
    else
    {
      uint64_t v10 = _swiftEmptyArrayStorage;
      uint64_t v12 = &_swiftEmptyArrayStorage[4];
      if (result) {
        goto LABEL_13;
      }
    }
    sub_100A73138(0, v8, (unint64_t)v12, (uint64_t)a4);
LABEL_22:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

uint64_t sub_100A71EB0(char a1, int64_t a2, char a3, unint64_t a4)
{
  return sub_100A6EE0C(a1, a2, a3, a4, &qword_101657CE8, &qword_101657CF0);
}

uint64_t sub_100A71EC4(char a1, int64_t a2, char a3, unint64_t a4)
{
  return sub_100A6E660(a1, a2, a3, a4, &qword_10163A7E8, (uint64_t (*)(void))type metadata accessor for ManagedCBPeripheralBeaconInfo, (uint64_t (*)(void))type metadata accessor for ManagedCBPeripheralBeaconInfo);
}

void *sub_100A71EF8(void *a1, int64_t a2, char a3, void *a4)
{
  return sub_100A6F08C(a1, a2, a3, a4, (uint64_t *)&unk_101657830, &qword_10163A890);
}

uint64_t sub_100A71F0C(char a1, int64_t a2, char a3, unint64_t a4)
{
  return sub_100A6E660(a1, a2, a3, a4, &qword_101657D48, (uint64_t (*)(void))&type metadata accessor for Bit, (uint64_t (*)(void))&type metadata accessor for Bit);
}

uint64_t sub_100A71F40(char a1, int64_t a2, char a3, unint64_t a4)
{
  return sub_100A6E660(a1, a2, a3, a4, &qword_1016579B8, (uint64_t (*)(void))type metadata accessor for SharingCircleSecretValue, (uint64_t (*)(void))type metadata accessor for SharingCircleSecretValue);
}

uint64_t sub_100A71F74(char a1, int64_t a2, char a3, unint64_t a4)
{
  return sub_100A6EE0C(a1, a2, a3, a4, &qword_101657AC8, (uint64_t *)&unk_101657AD0);
}

void *sub_100A71F88(void *result, int64_t a2, char a3, void *a4)
{
  char v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    uint64_t v7 = a2;
    goto LABEL_8;
  }
  unint64_t v6 = a4[3];
  uint64_t v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2) {
    goto LABEL_8;
  }
  if (v7 + 0x4000000000000000 >= 0)
  {
    uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
      uint64_t v7 = a2;
    }
LABEL_8:
    uint64_t v8 = a4[2];
    if (v7 <= v8) {
      uint64_t v9 = a4[2];
    }
    else {
      uint64_t v9 = v7;
    }
    if (v9)
    {
      sub_10000588C(&qword_1016579F8);
      uint64_t v10 = (void *)swift_allocObject();
      size_t v11 = j__malloc_size(v10);
      v10[2] = v8;
      v10[3] = 2 * ((uint64_t)(v11 - 32) / 88);
      uint64_t v12 = v10 + 4;
      if (v5)
      {
LABEL_13:
        if (v10 != a4 || v12 >= &a4[11 * v8 + 4]) {
          memmove(v12, a4 + 4, 88 * v8);
        }
        a4[2] = 0;
        goto LABEL_22;
      }
    }
    else
    {
      uint64_t v10 = _swiftEmptyArrayStorage;
      uint64_t v12 = &_swiftEmptyArrayStorage[4];
      if (result) {
        goto LABEL_13;
      }
    }
    sub_100A74838(0, v8, (unint64_t)v12, (uint64_t)a4);
LABEL_22:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

void *sub_100A720B4(void *result, int64_t a2, char a3, void *a4)
{
  char v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    uint64_t v7 = a2;
    goto LABEL_8;
  }
  unint64_t v6 = a4[3];
  uint64_t v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2) {
    goto LABEL_8;
  }
  if (v7 + 0x4000000000000000 >= 0)
  {
    uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
      uint64_t v7 = a2;
    }
LABEL_8:
    uint64_t v8 = a4[2];
    if (v7 <= v8) {
      uint64_t v9 = a4[2];
    }
    else {
      uint64_t v9 = v7;
    }
    if (v9)
    {
      sub_10000588C(&qword_1016577D8);
      uint64_t v10 = (void *)swift_allocObject();
      size_t v11 = j__malloc_size(v10);
      v10[2] = v8;
      v10[3] = 2 * ((uint64_t)(v11 - 32) / 40);
      uint64_t v12 = v10 + 4;
      if (v5)
      {
LABEL_13:
        if (v10 != a4 || v12 >= &a4[5 * v8 + 4]) {
          memmove(v12, a4 + 4, 40 * v8);
        }
        a4[2] = 0;
        goto LABEL_22;
      }
    }
    else
    {
      uint64_t v10 = _swiftEmptyArrayStorage;
      uint64_t v12 = &_swiftEmptyArrayStorage[4];
      if (result) {
        goto LABEL_13;
      }
    }
    sub_100A7492C(0, v8, (unint64_t)v12, (uint64_t)a4);
LABEL_22:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

void *sub_100A721D8(void *result, int64_t a2, char a3, void *a4)
{
  char v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    uint64_t v7 = a2;
    goto LABEL_8;
  }
  unint64_t v6 = a4[3];
  uint64_t v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2) {
    goto LABEL_8;
  }
  if (v7 + 0x4000000000000000 >= 0)
  {
    uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
      uint64_t v7 = a2;
    }
LABEL_8:
    uint64_t v8 = a4[2];
    if (v7 <= v8) {
      uint64_t v9 = a4[2];
    }
    else {
      uint64_t v9 = v7;
    }
    if (v9)
    {
      sub_10000588C(&qword_10163AC58);
      uint64_t v10 = (void *)swift_allocObject();
      size_t v11 = j__malloc_size(v10);
      v10[2] = v8;
      v10[3] = 2 * ((uint64_t)(v11 - 32) / 24);
      uint64_t v12 = v10 + 4;
      if (v5)
      {
LABEL_13:
        if (v10 != a4 || v12 >= &a4[3 * v8 + 4]) {
          memmove(v12, a4 + 4, 24 * v8);
        }
        a4[2] = 0;
        goto LABEL_22;
      }
    }
    else
    {
      uint64_t v10 = _swiftEmptyArrayStorage;
      uint64_t v12 = &_swiftEmptyArrayStorage[4];
      if (result) {
        goto LABEL_13;
      }
    }
    sub_100A74A24(0, v8, (unint64_t)v12, (uint64_t)a4);
LABEL_22:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

uint64_t sub_100A722FC(char a1, int64_t a2, char a3, unint64_t a4)
{
  return sub_100A6E660(a1, a2, a3, a4, &qword_101657D40, (uint64_t (*)(void))type metadata accessor for FetchResponse.SearchResult, (uint64_t (*)(void))type metadata accessor for FetchResponse.SearchResult);
}

uint64_t sub_100A72330(char a1, int64_t a2, char a3, unint64_t a4)
{
  return sub_100A6EE0C(a1, a2, a3, a4, (uint64_t *)&unk_1016576E0, &qword_10163A9E8);
}

uint64_t sub_100A72344(char a1, int64_t a2, char a3, unint64_t a4)
{
  return sub_100A6E660(a1, a2, a3, a4, &qword_101657A38, type metadata accessor for UTInfoPublishRequestBody.State, type metadata accessor for UTInfoPublishRequestBody.State);
}

uint64_t sub_100A72378(char a1, int64_t a2, char a3, unint64_t a4)
{
  return sub_100A6E660(a1, a2, a3, a4, &qword_101657A30, (uint64_t (*)(void))type metadata accessor for KeyGenerationBeaconInfo, (uint64_t (*)(void))type metadata accessor for KeyGenerationBeaconInfo);
}

uint64_t sub_100A723AC(char a1, int64_t a2, char a3, unint64_t a4)
{
  return sub_100A6EE0C(a1, a2, a3, a4, &qword_1016579E8, &qword_1016579F0);
}

uint64_t sub_100A723C0(char a1, int64_t a2, char a3, unint64_t a4)
{
  return sub_100A6E660(a1, a2, a3, a4, (uint64_t *)&unk_1016579A0, (uint64_t (*)(void))&type metadata accessor for MACAddress, (uint64_t (*)(void))&type metadata accessor for MACAddress);
}

uint64_t sub_100A723F4(char a1, int64_t a2, char a3, unint64_t a4)
{
  return sub_100A6E660(a1, a2, a3, a4, &qword_10163A868, type metadata accessor for BeaconKeyManager.PersistenceInstruction, type metadata accessor for BeaconKeyManager.PersistenceInstruction);
}

void *sub_100A72428(void *result, int64_t a2, char a3, void *a4)
{
  char v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    uint64_t v7 = a2;
    goto LABEL_8;
  }
  unint64_t v6 = a4[3];
  uint64_t v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2) {
    goto LABEL_8;
  }
  if (v7 + 0x4000000000000000 >= 0)
  {
    uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
      uint64_t v7 = a2;
    }
LABEL_8:
    uint64_t v8 = a4[2];
    if (v7 <= v8) {
      uint64_t v9 = a4[2];
    }
    else {
      uint64_t v9 = v7;
    }
    if (v9)
    {
      sub_10000588C((uint64_t *)&unk_101657B60);
      uint64_t v10 = (void *)swift_allocObject();
      size_t v11 = j__malloc_size(v10);
      v10[2] = v8;
      v10[3] = 2 * ((uint64_t)(v11 - 32) / 24);
      uint64_t v12 = v10 + 4;
      if (v5)
      {
LABEL_13:
        if (v10 != a4 || v12 >= &a4[3 * v8 + 4]) {
          memmove(v12, a4 + 4, 24 * v8);
        }
        a4[2] = 0;
        goto LABEL_22;
      }
    }
    else
    {
      uint64_t v10 = _swiftEmptyArrayStorage;
      uint64_t v12 = &_swiftEmptyArrayStorage[4];
      if (result) {
        goto LABEL_13;
      }
    }
    sub_100A74B1C(0, v8, (unint64_t)v12, (uint64_t)a4);
LABEL_22:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

uint64_t sub_100A72550(char a1, int64_t a2, char a3, unint64_t a4)
{
  return sub_100A6E660(a1, a2, a3, a4, &qword_1016579B0, (uint64_t (*)(void))type metadata accessor for LocationOfInterestProvider.RemappingOperation, (uint64_t (*)(void))type metadata accessor for LocationOfInterestProvider.RemappingOperation);
}

uint64_t sub_100A72584(char a1, int64_t a2, char a3, unint64_t a4)
{
  return sub_100A6EE0C(a1, a2, a3, a4, &qword_101657718, &qword_101657720);
}

uint64_t sub_100A72598(char a1, int64_t a2, char a3, unint64_t a4)
{
  return sub_100A6EE0C(a1, a2, a3, a4, &qword_101657978, (uint64_t *)&unk_101657980);
}

void *sub_100A725AC(void *result, int64_t a2, char a3, void *a4)
{
  char v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    uint64_t v7 = a2;
    goto LABEL_8;
  }
  unint64_t v6 = a4[3];
  uint64_t v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2) {
    goto LABEL_8;
  }
  if (v7 + 0x4000000000000000 >= 0)
  {
    uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
      uint64_t v7 = a2;
    }
LABEL_8:
    uint64_t v8 = a4[2];
    if (v7 <= v8) {
      uint64_t v9 = a4[2];
    }
    else {
      uint64_t v9 = v7;
    }
    if (v9)
    {
      sub_10000588C(&qword_1016578F8);
      uint64_t v10 = (void *)swift_allocObject();
      size_t v11 = j__malloc_size(v10);
      v10[2] = v8;
      v10[3] = 2 * ((uint64_t)(v11 - 32) / 24);
      uint64_t v12 = v10 + 4;
      if (v5)
      {
LABEL_13:
        if (v10 != a4 || v12 >= &a4[3 * v8 + 4]) {
          memmove(v12, a4 + 4, 24 * v8);
        }
        a4[2] = 0;
        goto LABEL_22;
      }
    }
    else
    {
      uint64_t v10 = _swiftEmptyArrayStorage;
      uint64_t v12 = &_swiftEmptyArrayStorage[4];
      if (result) {
        goto LABEL_13;
      }
    }
    sub_100A74C2C(0, v8, (unint64_t)v12, (uint64_t)a4);
LABEL_22:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

void *sub_100A726D4(void *a1, int64_t a2, char a3, void *a4)
{
  return sub_100A71928(a1, a2, a3, a4, (uint64_t *)&unk_1016578A0, &qword_10163A860);
}

uint64_t sub_100A726E8(char a1, int64_t a2, char a3, unint64_t a4)
{
  return sub_100A6E660(a1, a2, a3, a4, &qword_101649E60, type metadata accessor for AccessoryMetadata, type metadata accessor for AccessoryMetadata);
}

uint64_t sub_100A7271C(char a1, int64_t a2, char a3, unint64_t a4)
{
  return sub_100A6E660(a1, a2, a3, a4, (uint64_t *)&unk_101657890, (uint64_t (*)(void))type metadata accessor for BeaconProductInfoRecord, (uint64_t (*)(void))type metadata accessor for BeaconProductInfoRecord);
}

void *sub_100A72750(void *a1, int64_t a2, char a3, void *a4)
{
  return sub_100A70F40(a1, a2, a3, a4, (uint64_t *)&unk_101657728, &qword_10163BD60);
}

uint64_t sub_100A72764(char a1, int64_t a2, char a3, unint64_t a4)
{
  return sub_100A6EE0C(a1, a2, a3, a4, &qword_101657B88, (uint64_t *)&unk_101657B90);
}

uint64_t sub_100A72778(char a1, int64_t a2, char a3, unint64_t a4)
{
  return sub_100A6EE0C(a1, a2, a3, a4, &qword_1016579D0, &qword_1016579D8);
}

uint64_t sub_100A7278C(char a1, int64_t a2, char a3, unint64_t a4)
{
  return sub_100A6EE0C(a1, a2, a3, a4, (uint64_t *)&unk_101657740, &qword_10163A838);
}

uint64_t sub_100A727A0(char a1, int64_t a2, char a3, unint64_t a4)
{
  return sub_100A6E660(a1, a2, a3, a4, (uint64_t *)&unk_101657770, type metadata accessor for BeaconKeyManager.KeyIndexMapInfo, type metadata accessor for BeaconKeyManager.KeyIndexMapInfo);
}

uint64_t sub_100A727D4(char a1, int64_t a2, char a3, unint64_t a4)
{
  return sub_100A6E660(a1, a2, a3, a4, &qword_10163A870, type metadata accessor for BeaconKeyManager.KeyMapInfo, type metadata accessor for BeaconKeyManager.KeyMapInfo);
}

void *sub_100A72808(void *a1, int64_t a2, char a3, void *a4)
{
  return sub_100A70F40(a1, a2, a3, a4, (uint64_t *)&unk_101657750, &qword_1016506B0);
}

void *sub_100A7281C(void *a1, int64_t a2, char a3, void *a4)
{
  return sub_100A72830(a1, a2, a3, a4, (uint64_t *)&unk_101657760);
}

void *sub_100A72830(void *result, int64_t a2, char a3, void *a4, uint64_t *a5)
{
  char v6 = (char)result;
  if ((a3 & 1) == 0)
  {
    uint64_t v8 = a2;
    goto LABEL_8;
  }
  unint64_t v7 = a4[3];
  uint64_t v8 = v7 >> 1;
  if ((uint64_t)(v7 >> 1) >= a2) {
    goto LABEL_8;
  }
  if (v8 + 0x4000000000000000 >= 0)
  {
    uint64_t v8 = v7 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v7 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
      uint64_t v8 = a2;
    }
LABEL_8:
    uint64_t v9 = a4[2];
    if (v8 <= v9) {
      uint64_t v10 = a4[2];
    }
    else {
      uint64_t v10 = v8;
    }
    if (v10)
    {
      sub_10000588C(a5);
      size_t v11 = (void *)swift_allocObject();
      size_t v12 = j__malloc_size(v11);
      v11[2] = v9;
      v11[3] = 2 * ((uint64_t)(v12 - 32) / 40);
      uint64_t v13 = v11 + 4;
      if (v6)
      {
LABEL_13:
        if (v11 != a4 || v13 >= &a4[5 * v9 + 4]) {
          memmove(v13, a4 + 4, 40 * v9);
        }
        a4[2] = 0;
        goto LABEL_22;
      }
    }
    else
    {
      size_t v11 = _swiftEmptyArrayStorage;
      uint64_t v13 = &_swiftEmptyArrayStorage[4];
      if (result) {
        goto LABEL_13;
      }
    }
    sub_100A75200(0, v9, (unint64_t)v13, (uint64_t)a4);
LABEL_22:
    swift_bridgeObjectRelease();
    return v11;
  }
  __break(1u);
  return result;
}

uint64_t sub_100A7295C(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    unint64_t v5 = a4 + 16 * a1 + 32;
    unint64_t v6 = a3 + 16 * v4;
    if (v5 >= v6 || v5 + 16 * v4 <= a3)
    {
      swift_arrayInitWithCopy();
      return v6;
    }
  }
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_100A72A50(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    unint64_t v5 = a4 + 40 * a1 + 32;
    unint64_t v6 = a3 + 40 * v4;
    if (v5 >= v6 || v5 + 40 * v4 <= a3)
    {
      swift_arrayInitWithCopy();
      return v6;
    }
  }
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_100A72B48(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    unint64_t v5 = a4 + 32 * a1 + 32;
    unint64_t v6 = a3 + 32 * v4;
    if (v5 >= v6 || v5 + 32 * v4 <= a3)
    {
      swift_arrayInitWithCopy();
      return v6;
    }
  }
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_100A72C3C(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    unint64_t v5 = a4 + 72 * a1 + 32;
    unint64_t v6 = a3 + 72 * v4;
    if (v5 >= v6 || v5 + 72 * v4 <= a3)
    {
      swift_arrayInitWithCopy();
      return v6;
    }
  }
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_100A72D34(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    unint64_t v5 = a4 + 16 * a1 + 32;
    unint64_t v6 = a3 + 16 * v4;
    if (v5 >= v6 || v5 + 16 * v4 <= a3)
    {
      swift_arrayInitWithCopy();
      return v6;
    }
  }
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_100A72E28(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    unint64_t v5 = a4 + 32 * a1 + 32;
    unint64_t v6 = a3 + 32 * v4;
    if (v5 >= v6 || v5 + 32 * v4 <= a3)
    {
      sub_10000588C((uint64_t *)&unk_101657790);
      swift_arrayInitWithCopy();
      return v6;
    }
  }
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_100A72F34(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    unint64_t v5 = a4 + 32 * a1 + 32;
    unint64_t v6 = a3 + 32 * v4;
    if (v5 >= v6 || v5 + 32 * v4 <= a3)
    {
      sub_10000588C(&qword_1016455E0);
      swift_arrayInitWithCopy();
      return v6;
    }
  }
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_100A73040(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    unint64_t v5 = a4 + 56 * a1 + 32;
    unint64_t v6 = a3 + 56 * v4;
    if (v5 >= v6 || v5 + 56 * v4 <= a3)
    {
      swift_arrayInitWithCopy();
      return v6;
    }
  }
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_100A73138(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    unint64_t v5 = a4 + 48 * a1 + 32;
    unint64_t v6 = a3 + 48 * v4;
    if (v5 >= v6 || v5 + 48 * v4 <= a3)
    {
      sub_10000588C((uint64_t *)&unk_101653CE0);
      swift_arrayInitWithCopy();
      return v6;
    }
  }
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

char *sub_100A73248(uint64_t a1, uint64_t a2, char *__dst, uint64_t a4)
{
  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    unint64_t v5 = (char *)(a4 + 32 * a1 + 32);
    size_t v6 = 32 * v4;
    unint64_t v7 = &__dst[v6];
    if (v5 >= &__dst[v6] || &v5[v6] <= __dst)
    {
      memcpy(__dst, v5, v6);
      return v7;
    }
  }
  uint64_t result = (char *)_fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_100A73334(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    unint64_t v5 = a4 + 24 * a1 + 32;
    unint64_t v6 = a3 + 24 * v4;
    if (v5 >= v6 || v5 + 24 * v4 <= a3)
    {
      swift_arrayInitWithCopy();
      return v6;
    }
  }
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_100A7342C(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    unint64_t v5 = a4 + 16 * a1 + 32;
    unint64_t v6 = a3 + 16 * v4;
    if (v5 >= v6 || v5 + 16 * v4 <= a3)
    {
      swift_arrayInitWithCopy();
      return v6;
    }
  }
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_100A7351C(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    unint64_t v5 = a4 + 48 * a1 + 32;
    unint64_t v6 = a3 + 48 * v4;
    if (v5 >= v6 || v5 + 48 * v4 <= a3)
    {
      sub_10000588C((uint64_t *)&unk_101651D00);
      swift_arrayInitWithCopy();
      return v6;
    }
  }
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

char *sub_100A7362C(uint64_t a1, uint64_t a2, char *__dst, uint64_t a4)
{
  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    unint64_t v5 = (char *)(a4 + 8 * a1 + 32);
    size_t v6 = 8 * v4;
    unint64_t v7 = &__dst[v6];
    if (v5 >= &__dst[v6] || &v5[v6] <= __dst)
    {
      memcpy(__dst, v5, v6);
      return v7;
    }
  }
  uint64_t result = (char *)_fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_100A73718(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    unint64_t v5 = a4 + 16 * a1 + 32;
    unint64_t v6 = a3 + 16 * v4;
    if (v5 >= v6 || v5 + 16 * v4 <= a3)
    {
      sub_10000588C(&qword_101657868);
      swift_arrayInitWithCopy();
      return v6;
    }
  }
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_100A73824(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    unint64_t v5 = a4 + 48 * a1 + 32;
    unint64_t v6 = a3 + 48 * v4;
    if (v5 >= v6 || v5 + 48 * v4 <= a3)
    {
      swift_arrayInitWithCopy();
      return v6;
    }
  }
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_100A7391C(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    unint64_t v5 = a4 + 8 * a1 + 32;
    unint64_t v6 = a3 + 8 * v4;
    if (v5 >= v6 || v5 + 8 * v4 <= a3)
    {
      swift_arrayInitWithCopy();
      return v6;
    }
  }
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_100A73A10(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    unint64_t v5 = a4 + 40 * a1 + 32;
    unint64_t v6 = a3 + 40 * v4;
    if (v5 >= v6 || v5 + 40 * v4 <= a3)
    {
      sub_10000588C((uint64_t *)&unk_101657C40);
      swift_arrayInitWithCopy();
      return v6;
    }
  }
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

char *sub_100A73B20(uint64_t a1, uint64_t a2, char *__dst, uint64_t a4)
{
  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    unint64_t v5 = (char *)(a4 + 16 * a1 + 32);
    size_t v6 = 16 * v4;
    unint64_t v7 = &__dst[v6];
    if (v5 >= &__dst[v6] || &v5[v6] <= __dst)
    {
      memcpy(__dst, v5, v6);
      return v7;
    }
  }
  uint64_t result = (char *)_fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_100A73C0C(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, void (*a5)(void))
{
  uint64_t v5 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v5 & 0x8000000000000000) == 0)
  {
    unint64_t v6 = a4 + 8 * a1 + 32;
    unint64_t v7 = a3 + 8 * v5;
    if (v6 >= v7 || v6 + 8 * v5 <= a3)
    {
      a5(0);
      swift_arrayInitWithCopy();
      return v7;
    }
  }
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_100A73D18(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    unint64_t v5 = a4 + 48 * a1 + 32;
    unint64_t v6 = a3 + 48 * v4;
    if (v5 >= v6 || v5 + 48 * v4 <= a3)
    {
      swift_arrayInitWithCopy();
      return v6;
    }
  }
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

char *sub_100A73E10(uint64_t a1, uint64_t a2, char *__dst, uint64_t a4)
{
  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    unint64_t v5 = (char *)(a4 + 5 * a1 + 32);
    size_t v6 = 5 * v4;
    unint64_t v7 = &__dst[v6];
    if (v5 >= &__dst[v6] || &v5[v6] <= __dst)
    {
      memcpy(__dst, v5, v6);
      return v7;
    }
  }
  uint64_t result = (char *)_fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_100A73EFC(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    unint64_t v5 = a4 + 32 * a1 + 32;
    unint64_t v6 = a3 + 32 * v4;
    if (v5 >= v6 || v5 + 32 * v4 <= a3)
    {
      swift_arrayInitWithCopy();
      return v6;
    }
  }
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_100A73FF0(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    unint64_t v5 = a4 + 40 * a1 + 32;
    unint64_t v6 = a3 + 40 * v4;
    if (v5 >= v6 || v5 + 40 * v4 <= a3)
    {
      swift_arrayInitWithCopy();
      return v6;
    }
  }
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_100A740E8(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    unint64_t v5 = a4 + 16 * a1 + 32;
    unint64_t v6 = a3 + 16 * v4;
    if (v5 >= v6 || v5 + 16 * v4 <= a3)
    {
      swift_arrayInitWithCopy();
      return v6;
    }
  }
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

char *sub_100A741DC(uint64_t a1, uint64_t a2, char *__dst, uint64_t a4)
{
  size_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    unint64_t v5 = (char *)(a4 + a1 + 32);
    unint64_t v6 = &__dst[v4];
    if (v5 >= &__dst[v4] || &v5[v4] <= __dst)
    {
      memcpy(__dst, v5, v4);
      return v6;
    }
  }
  uint64_t result = (char *)_fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_100A742C4(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    unint64_t v5 = a4 + 88 * a1 + 32;
    unint64_t v6 = a3 + 88 * v4;
    if (v5 >= v6 || v5 + 88 * v4 <= a3)
    {
      swift_arrayInitWithCopy();
      return v6;
    }
  }
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_100A743B8(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    unint64_t v5 = a4 + 32 * a1 + 32;
    unint64_t v6 = a3 + 32 * v4;
    if (v5 >= v6 || v5 + 32 * v4 <= a3)
    {
      swift_arrayInitWithCopy();
      return v6;
    }
  }
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_100A744AC(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, uint64_t *a5)
{
  uint64_t v5 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v5 & 0x8000000000000000) == 0)
  {
    unint64_t v6 = a4 + 40 * a1 + 32;
    unint64_t v7 = a3 + 40 * v5;
    if (v6 >= v7 || v6 + 40 * v5 <= a3)
    {
      sub_10000588C(a5);
      swift_arrayInitWithCopy();
      return v7;
    }
  }
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_100A745B8(unint64_t *a1)
{
  uint64_t result = *a1;
  if (!result)
  {
    type metadata accessor for Characteristic();
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_100A745F8(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for CharacteristicUUID(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

char *sub_100A74654(uint64_t a1, uint64_t a2, char *__dst, uint64_t a4)
{
  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    uint64_t v5 = (char *)(a4 + 4 * a1 + 32);
    size_t v6 = 4 * v4;
    unint64_t v7 = &__dst[v6];
    if (v5 >= &__dst[v6] || &v5[v6] <= __dst)
    {
      memcpy(__dst, v5, v6);
      return v7;
    }
  }
  uint64_t result = (char *)_fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_100A74740(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    unint64_t v5 = a4 + 24 * a1 + 32;
    unint64_t v6 = a3 + 24 * v4;
    if (v5 >= v6 || v5 + 24 * v4 <= a3)
    {
      swift_arrayInitWithCopy();
      return v6;
    }
  }
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_100A74838(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    unint64_t v5 = a4 + 88 * a1 + 32;
    unint64_t v6 = a3 + 88 * v4;
    if (v5 >= v6 || v5 + 88 * v4 <= a3)
    {
      swift_arrayInitWithCopy();
      return v6;
    }
  }
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_100A7492C(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    unint64_t v5 = a4 + 40 * a1 + 32;
    unint64_t v6 = a3 + 40 * v4;
    if (v5 >= v6 || v5 + 40 * v4 <= a3)
    {
      swift_arrayInitWithCopy();
      return v6;
    }
  }
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_100A74A24(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    unint64_t v5 = a4 + 24 * a1 + 32;
    unint64_t v6 = a3 + 24 * v4;
    if (v5 >= v6 || v5 + 24 * v4 <= a3)
    {
      swift_arrayInitWithCopy();
      return v6;
    }
  }
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_100A74B1C(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    unint64_t v5 = a4 + 24 * a1 + 32;
    unint64_t v6 = a3 + 24 * v4;
    if (v5 >= v6 || v5 + 24 * v4 <= a3)
    {
      sub_10000588C(&qword_10163AA40);
      swift_arrayInitWithCopy();
      return v6;
    }
  }
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_100A74C2C(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    unint64_t v5 = a4 + 24 * a1 + 32;
    unint64_t v6 = a3 + 24 * v4;
    if (v5 >= v6 || v5 + 24 * v4 <= a3)
    {
      sub_10000588C((uint64_t *)&unk_101657900);
      swift_arrayInitWithCopy();
      return v6;
    }
  }
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_100A74D3C(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, uint64_t *a5)
{
  uint64_t v5 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v5 & 0x8000000000000000) == 0)
  {
    unint64_t v6 = a4 + 16 * a1 + 32;
    unint64_t v7 = a3 + 16 * v5;
    if (v6 >= v7 || v6 + 16 * v5 <= a3)
    {
      sub_10000588C(a5);
      swift_arrayInitWithCopy();
      return v7;
    }
  }
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_100A74E44(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, uint64_t *a5)
{
  uint64_t v5 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v5 & 0x8000000000000000) == 0)
  {
    unint64_t v6 = a4 + 8 * a1 + 32;
    unint64_t v7 = a3 + 8 * v5;
    if (v6 >= v7 || v6 + 8 * v5 <= a3)
    {
      sub_10000588C(a5);
      swift_arrayInitWithCopy();
      return v7;
    }
  }
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_100A74F4C(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, uint64_t *a5)
{
  uint64_t v5 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v5 & 0x8000000000000000) == 0)
  {
    uint64_t v9 = *(void *)(sub_10000588C(a5) - 8);
    uint64_t v10 = a4 + ((*(unsigned __int8 *)(v9 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80));
    uint64_t v11 = *(void *)(v9 + 72);
    unint64_t v12 = v10 + v11 * a1;
    unint64_t v13 = a3 + v11 * v5;
    if (v12 >= v13 || v12 + v11 * v5 <= a3)
    {
      swift_arrayInitWithCopy();
      return v13;
    }
  }
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_100A750A4(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, uint64_t (*a5)(void))
{
  uint64_t v5 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v5 & 0x8000000000000000) == 0)
  {
    uint64_t v9 = *(void *)(a5(0) - 8);
    uint64_t v10 = a4 + ((*(unsigned __int8 *)(v9 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80));
    uint64_t v11 = *(void *)(v9 + 72);
    unint64_t v12 = v10 + v11 * a1;
    unint64_t v13 = a3 + v11 * v5;
    if (v12 >= v13 || v12 + v11 * v5 <= a3)
    {
      swift_arrayInitWithCopy();
      return v13;
    }
  }
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_100A75200(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    unint64_t v5 = a4 + 40 * a1 + 32;
    unint64_t v6 = a3 + 40 * v4;
    if (v5 >= v6 || v5 + 40 * v4 <= a3)
    {
      swift_arrayInitWithCopy();
      return v6;
    }
  }
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_100A752F4@<X0>(uint64_t a1@<X8>)
{
  return sub_100A6C8D0(*(void **)(v1 + 16), *(void *)(v1 + 24), *(void *)(v1 + 32), a1);
}

uint64_t sub_100A75314(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_10000588C((uint64_t *)&unk_101657880);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_100A7537C@<X0>(uint64_t (**a1)()@<X8>)
{
  return sub_100A6D7C8(v1, a1);
}

uint64_t sub_100A75398()
{
  swift_release();

  return _swift_deallocObject(v0, 32, 7);
}

uint64_t sub_100A753D0()
{
  return (*(uint64_t (**)(void))(v0 + 16))();
}

uint64_t sub_100A753F8()
{
  swift_release();
  sub_10001CFB8(*(void *)(v0 + 24), *(void *)(v0 + 32));

  return _swift_deallocObject(v0, 40, 7);
}

uint64_t sub_100A75438(void (*a1)(unsigned char *), uint64_t a2)
{
  return sub_100A6CC98(a1, a2, *(void *)(v2 + 16));
}

uint64_t sub_100A75444@<X0>(uint64_t a1@<X8>)
{
  return sub_100A6CE24(v1[2], v1[3], v1[4], a1);
}

void *sub_100A75474(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v4 = (void *)a1;
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v11 = *a2;
    void *v4 = *a2;
    uint64_t v4 = (void *)(v11 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    *(_WORD *)a1 = *(_WORD *)a2;
    *(_DWORD *)(a1 + 2) = *(_DWORD *)((char *)a2 + 2);
    *(unsigned char *)(a1 + 6) = *((unsigned char *)a2 + 6);
    uint64_t v7 = *(int *)(a3 + 32);
    uint64_t v8 = a1 + v7;
    uint64_t v9 = (uint64_t)a2 + v7;
    uint64_t v10 = type metadata accessor for Bit();
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 16))(v8, v9, v10);
    *((unsigned char *)v4 + *(int *)(a3 + 36)) = *((unsigned char *)a2 + *(int *)(a3 + 36));
  }
  return v4;
}

uint64_t sub_100A7556C(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = a1 + *(int *)(a2 + 32);
  uint64_t v3 = type metadata accessor for Bit();
  uint64_t v4 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8);

  return v4(v2, v3);
}

uint64_t sub_100A755D4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(_WORD *)a1 = *(_WORD *)a2;
  *(_DWORD *)(a1 + 2) = *(_DWORD *)(a2 + 2);
  *(unsigned char *)(a1 + 6) = *(unsigned char *)(a2 + 6);
  uint64_t v6 = *(int *)(a3 + 32);
  uint64_t v7 = a1 + v6;
  uint64_t v8 = a2 + v6;
  uint64_t v9 = type metadata accessor for Bit();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 16))(v7, v8, v9);
  *(unsigned char *)(a1 + *(int *)(a3 + 36)) = *(unsigned char *)(a2 + *(int *)(a3 + 36));
  return a1;
}

unsigned char *sub_100A7567C(unsigned char *a1, unsigned char *a2, uint64_t a3)
{
  *a1 = *a2;
  a1[1] = a2[1];
  a1[2] = a2[2];
  a1[3] = a2[3];
  a1[4] = a2[4];
  a1[5] = a2[5];
  a1[6] = a2[6];
  uint64_t v6 = *(int *)(a3 + 32);
  uint64_t v7 = &a1[v6];
  uint64_t v8 = &a2[v6];
  uint64_t v9 = type metadata accessor for Bit();
  (*(void (**)(unsigned char *, unsigned char *, uint64_t))(*(void *)(v9 - 8) + 24))(v7, v8, v9);
  a1[*(int *)(a3 + 36)] = a2[*(int *)(a3 + 36)];
  return a1;
}

uint64_t sub_100A75744(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(_WORD *)a1 = *(_WORD *)a2;
  *(_DWORD *)(a1 + 2) = *(_DWORD *)(a2 + 2);
  *(unsigned char *)(a1 + 6) = *(unsigned char *)(a2 + 6);
  uint64_t v6 = *(int *)(a3 + 32);
  uint64_t v7 = a1 + v6;
  uint64_t v8 = a2 + v6;
  uint64_t v9 = type metadata accessor for Bit();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 32))(v7, v8, v9);
  *(unsigned char *)(a1 + *(int *)(a3 + 36)) = *(unsigned char *)(a2 + *(int *)(a3 + 36));
  return a1;
}

uint64_t sub_100A757EC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  *(_WORD *)(a1 + 1) = *(_WORD *)(a2 + 1);
  *(unsigned char *)(a1 + 3) = *(unsigned char *)(a2 + 3);
  *(unsigned char *)(a1 + 4) = *(unsigned char *)(a2 + 4);
  *(unsigned char *)(a1 + 5) = *(unsigned char *)(a2 + 5);
  *(unsigned char *)(a1 + 6) = *(unsigned char *)(a2 + 6);
  uint64_t v6 = *(int *)(a3 + 32);
  uint64_t v7 = a1 + v6;
  uint64_t v8 = a2 + v6;
  uint64_t v9 = type metadata accessor for Bit();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 40))(v7, v8, v9);
  *(unsigned char *)(a1 + *(int *)(a3 + 36)) = *(unsigned char *)(a2 + *(int *)(a3 + 36));
  return a1;
}

uint64_t sub_100A758AC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_100A758C0);
}

uint64_t sub_100A758C0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a2 == 254)
  {
    unsigned int v4 = *(unsigned __int8 *)(a1 + 3);
    BOOL v5 = v4 >= 2;
    int v6 = (v4 + 2147483646) & 0x7FFFFFFF;
    if (v5) {
      return (v6 + 1);
    }
    else {
      return 0;
    }
  }
  else
  {
    uint64_t v10 = type metadata accessor for Bit();
    uint64_t v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 48);
    uint64_t v12 = v10;
    uint64_t v13 = a1 + *(int *)(a3 + 32);
    return v11(v13, a2, v12);
  }
}

uint64_t sub_100A75970(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_100A75984);
}

uint64_t sub_100A75984(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5 = result;
  if (a3 == 254)
  {
    *(unsigned char *)(result + 3) = a2 + 1;
  }
  else
  {
    uint64_t v7 = type metadata accessor for Bit();
    uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56);
    uint64_t v9 = v7;
    uint64_t v10 = v5 + *(int *)(a4 + 32);
    return v8(v10, a2, a2, v9);
  }
  return result;
}

uint64_t type metadata accessor for BeaconPayloadMetaDataV2()
{
  uint64_t result = qword_101657DB8;
  if (!qword_101657DB8) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t sub_100A75A74()
{
  uint64_t result = type metadata accessor for Bit();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t sub_100A75B2C(void *a1)
{
  sub_10001CD44(a1, a1[3]);
  dispatch thunk of BinaryEncoding.container()();
  if (((*(unsigned __int8 *)(v1 + 6) - 1) & 0xFFFFFF00) != 0)
  {
    __break(1u);
    goto LABEL_11;
  }
  sub_10006145C();
  uint64_t v22 = FixedWidthInteger.bits()();
  if (*(void *)(v22 + 16) < 2uLL)
  {
LABEL_11:
    __break(1u);
    goto LABEL_12;
  }
  uint64_t v21 = type metadata accessor for Bit();
  uint64_t v2 = *(void *)(v21 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v20 = FixedWidthInteger.bits()();
  if (*(void *)(v20 + 16) < 2uLL)
  {
LABEL_12:
    __break(1u);
    goto LABEL_13;
  }
  uint64_t v19 = FixedWidthInteger.bits()();
  if (*(void *)(v19 + 16) < 3uLL)
  {
LABEL_13:
    __break(1u);
    goto LABEL_14;
  }
  uint64_t v4 = FixedWidthInteger.bits()();
  if (*(void *)(v4 + 16) < 4uLL)
  {
LABEL_14:
    __break(1u);
LABEL_15:
    __break(1u);
    __break(1u);
LABEL_17:
    __break(1u);
  }
  uint64_t v5 = v4;
  uint64_t v6 = (v3 + 32) & ~v3;
  sub_10000588C(&qword_101657D48);
  uint64_t v7 = swift_allocObject();
  *(_OWORD *)(v7 + 16) = xmmword_101342130;
  uint64_t v8 = v7 + v6;
  uint64_t v9 = type metadata accessor for BeaconPayloadMetaDataV2();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v2 + 16))(v8, v1 + *(int *)(v9 + 32), v21);
  uint64_t v10 = FixedWidthInteger.bits()();
  if (*(void *)(v10 + 16) < 4uLL) {
    goto LABEL_15;
  }
  uint64_t v11 = v10;
  swift_bridgeObjectRetain();
  uint64_t v12 = (void *)swift_bridgeObjectRetain();
  sub_1010AA3D4(v12, v20 + v6, 0, 5uLL);
  swift_bridgeObjectRelease();
  uint64_t v13 = (void *)swift_unknownObjectRetain();
  sub_1010AA3D4(v13, v19 + v6, 0, 7uLL);
  swift_bridgeObjectRelease();
  int64_t v14 = (void *)swift_unknownObjectRetain();
  sub_1010AA3D4(v14, v5 + v6, 0, 9uLL);
  swift_bridgeObjectRelease();
  if (__OFADD__(2, 1)) {
    goto LABEL_17;
  }
  sub_100A71F0C(0, 3, 0, (unint64_t)_swiftEmptyArrayStorage);
  int64_t v15 = swift_unknownObjectRetain();
  sub_100445D78(v15, v22 + v6, 0, 5uLL);
  uint64_t v16 = swift_bridgeObjectRetain();
  sub_1004463E8(v16);
  swift_unknownObjectRelease();
  swift_setDeallocating();
  swift_arrayDestroy();
  swift_deallocClassInstance();
  int64_t v17 = swift_unknownObjectRetain();
  sub_100445D78(v17, v11 + v6, 0, 9uLL);
  sub_100179818();
  FixedWidthInteger.init(bits:)();
  sub_1000BD078((uint64_t)v23, v24);
  dispatch thunk of BinaryEncodingContaining.encode<A>(_:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)v23);
}

uint64_t sub_100A75F80(void *a1)
{
  return sub_100A75B2C(a1);
}

uint64_t sub_100A75F98(uint64_t a1)
{
  return sub_1001368D0(a1, qword_101657E00);
}

uint64_t sub_100A75FA4(uint64_t a1)
{
  return sub_1001368D0(a1, qword_101657E18);
}

uint64_t sub_100A75FB0(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v4 = v3;
  unint64_t v30 = a3;
  uint64_t v32 = a1;
  uint64_t v33 = a2;
  uint64_t v5 = type metadata accessor for UUID();
  __chkstk_darwin(v5 - 8);
  unint64_t v31 = (char *)&v30 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for OS_dispatch_queue.Attributes();
  __chkstk_darwin(v7);
  uint64_t v8 = type metadata accessor for DispatchQoS();
  __chkstk_darwin(v8 - 8);
  uint64_t v9 = type metadata accessor for OS_dispatch_queue.AutoreleaseFrequency();
  uint64_t v10 = *(void *)(v9 - 8);
  __chkstk_darwin(v9);
  uint64_t v12 = (char *)&v30 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10000584C();
  (*(void (**)(char *, void, uint64_t))(v10 + 104))(v12, enum case for OS_dispatch_queue.AutoreleaseFrequency.workItem(_:), v9);
  static DispatchQoS.unspecified.getter();
  uint64_t v34 = _swiftEmptyArrayStorage;
  sub_100A872C8((unint64_t *)&qword_101638CC0, (void (*)(uint64_t))&type metadata accessor for OS_dispatch_queue.Attributes);
  sub_10000588C((uint64_t *)&unk_1016376F0);
  sub_100062734((unint64_t *)&qword_101638CD0, (uint64_t *)&unk_1016376F0);
  dispatch thunk of SetAlgebra.init<A>(_:)();
  *(void *)(v3 + 16) = OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)();
  *(void *)(v3 + 80) = &_swiftEmptySetSingleton;
  *(_OWORD *)(v3 + 88) = 0u;
  *(_OWORD *)(v3 + 104) = 0u;
  *(void *)(v3 + 120) = 0;
  *(void *)(v3 + 128) = 0xF000000000000000;
  *(void *)(v3 + 136) = _swiftEmptyArrayStorage;
  static os_log_type_t.debug.getter();
  if (qword_101637308 != -1) {
    swift_once();
  }
  os_log(_:dso:log:_:_:)();
  uint64_t v14 = v32;
  uint64_t v13 = v33;
  *(void *)(v3 + 24) = v32;
  *(void *)(v3 + 40) = v13;
  type metadata accessor for AccessoryPairingValidator();
  uint64_t v15 = swift_allocObject();
  type metadata accessor for DeviceIdentityUtility();
  uint64_t v16 = swift_allocObject();
  swift_retain();
  swift_retain();
  swift_defaultActor_initialize();
  uint64_t v17 = v16 + OBJC_IVAR____TtC12searchpartyd21DeviceIdentityUtility_certExpiryDate;
  uint64_t v18 = type metadata accessor for Date();
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v18 - 8) + 56))(v17, 1, 1, v18);
  *(void *)(v16 + OBJC_IVAR____TtC12searchpartyd21DeviceIdentityUtility_refKey) = 0;
  *(void *)(v16 + OBJC_IVAR____TtC12searchpartyd21DeviceIdentityUtility_certs) = _swiftEmptyArrayStorage;
  *(unsigned char *)(v16 + OBJC_IVAR____TtC12searchpartyd21DeviceIdentityUtility_signingType) = 9;
  *(void *)(v15 + 16) = v16;
  *(void *)(v15 + 24) = 0;
  uint64_t v19 = v30;
  *(void *)(v4 + 56) = v15;
  *(void *)(v4 + 64) = v19;
  type metadata accessor for AccessoryPairingErrorManager();
  swift_allocObject();
  swift_retain();
  uint64_t v20 = v19;
  *(void *)(v4 + 48) = sub_1001BDD70(v14);
  id v21 = [*(id *)&v20[OBJC_IVAR____TtC12searchpartyd10Peripheral_underlyingObject] identifier];
  uint64_t v22 = (uint64_t)v31;
  static UUID._unconditionallyBridgeFromObjectiveC(_:)();

  uint64_t v23 = *(void *)(v4 + 56);
  uint64_t v24 = *(void **)(v4 + 16);
  type metadata accessor for AccessoryPairingCoordinator();
  swift_allocObject();
  swift_retain();
  uint64_t v25 = sub_101141B24(v22, v23, v24);
  uint64_t v26 = v25;
  if (v25)
  {
    *(void *)(v4 + 72) = v25;
    swift_retain();
    sub_10000588C((uint64_t *)&unk_10165F6A0);
    unsafeFromAsyncTask<A>(_:)();
    unint64_t v27 = v34;
    if (v34)
    {
      swift_release();
      swift_release();
      swift_release();

      *(void *)(v4 + 32) = v27;
      return v4;
    }
    sub_100061234();
    swift_allocError();
    *(void *)uint64_t v28 = 15;
    *(_OWORD *)(v28 + 8) = 0u;
    *(_OWORD *)(v28 + 24) = 0u;
    *(unsigned char *)(v28 + 40) = 11;
    swift_willThrow();
    swift_errorRelease();
    static os_log_type_t.error.getter();
    os_log(_:dso:log:_:_:)();
    swift_release();
  }
  swift_release();
  swift_release();

  swift_release();
  swift_release();
  swift_release();
  swift_release();

  if (v26) {
    swift_release();
  }
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  sub_1000A1534(*(void *)(v4 + 104));
  sub_100037A24(*(void *)(v4 + 120), *(void *)(v4 + 128));
  swift_bridgeObjectRelease();
  type metadata accessor for AccessoryPairingSession();
  swift_deallocPartialClassInstance();
  return 0;
}

uint64_t sub_100A765F0()
{
  static os_log_type_t.debug.getter();
  if (qword_101637308 != -1) {
    swift_once();
  }
  os_log(_:dso:log:_:_:)();

  swift_release();
  swift_release();
  swift_release();
  swift_release();

  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  sub_1000A1534(*(void *)(v0 + 104));
  sub_100037A24(*(void *)(v0 + 120), *(void *)(v0 + 128));
  swift_bridgeObjectRelease();
  return v0;
}

uint64_t sub_100A766E8()
{
  sub_100A765F0();

  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for AccessoryPairingSession()
{
  return self;
}

void sub_100A76740(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v64 = a2;
  uint64_t v65 = a3;
  uint64_t v5 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v62 = *(void *)(v5 - 8);
  uint64_t v63 = v5;
  __chkstk_darwin(v5);
  uint64_t v59 = (char *)&v54 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for DispatchQoS();
  uint64_t v60 = *(void *)(v7 - 8);
  uint64_t v61 = v7;
  __chkstk_darwin(v7);
  unint64_t v58 = (char *)&v54 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = type metadata accessor for DispatchQoS.QoSClass();
  uint64_t v56 = *(void *)(v9 - 8);
  uint64_t v57 = v9;
  __chkstk_darwin(v9);
  uint64_t v11 = (char *)&v54 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = sub_10000588C(&qword_10164DBB0);
  __chkstk_darwin(v12 - 8);
  unint64_t v55 = (char *)&v54 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  static os_log_type_t.default.getter();
  if (qword_101637308 != -1) {
    swift_once();
  }
  sub_10000588C((uint64_t *)&unk_10163AD00);
  uint64_t v14 = swift_allocObject();
  long long v54 = xmmword_101347BA0;
  *(_OWORD *)(v14 + 16) = xmmword_101347BA0;
  *(void *)&long long aBlock = *v3;
  sub_10000588C(&qword_101658188);
  uint64_t v15 = String.init<A>(describing:)();
  uint64_t v17 = v16;
  *(void *)(v14 + 56) = &type metadata for String;
  unint64_t v18 = sub_10000B4CC();
  *(void *)(v14 + 32) = v15;
  *(void *)(v14 + 40) = v17;
  *(void *)(v14 + 96) = &type metadata for String;
  *(void *)(v14 + 104) = v18;
  *(void *)(v14 + 64) = v18;
  *(void *)(v14 + 72) = 0xD000000000000021;
  *(void *)(v14 + 80) = 0x8000000101411AF0;
  os_log(_:dso:log:_:_:)();
  swift_bridgeObjectRelease();
  if ([a1 isBatteryTooLow])
  {
    sub_10000584C();
    uint64_t v20 = v56;
    uint64_t v19 = v57;
    (*(void (**)(char *, void, uint64_t))(v56 + 104))(v11, enum case for DispatchQoS.QoSClass.default(_:), v57);
    id v21 = (void *)static OS_dispatch_queue.global(qos:)();
    (*(void (**)(char *, uint64_t))(v20 + 8))(v11, v19);
    uint64_t v22 = swift_allocObject();
    uint64_t v23 = v65;
    *(void *)(v22 + 16) = v64;
    *(void *)(v22 + 24) = v23;
    uint64_t v71 = sub_100A87130;
    uint64_t v72 = v22;
    *(void *)&long long aBlock = _NSConcreteStackBlock;
    *((void *)&aBlock + 1) = 1107296256;
    uint64_t v69 = sub_1004B5480;
    int64_t v70 = &unk_1015E68C0;
    uint64_t v24 = _Block_copy(&aBlock);
    swift_retain();
    uint64_t v25 = v58;
    static DispatchQoS.unspecified.getter();
    uint64_t v67 = (uint64_t)_swiftEmptyArrayStorage;
    sub_100A872C8((unint64_t *)&qword_10163B7E0, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
    sub_10000588C((uint64_t *)&unk_10163F350);
    sub_100062734((unint64_t *)&qword_10163B7F0, (uint64_t *)&unk_10163F350);
    uint64_t v26 = v59;
    uint64_t v27 = v63;
    dispatch thunk of SetAlgebra.init<A>(_:)();
    OS_dispatch_queue.async(group:qos:flags:execute:)();
    _Block_release(v24);

    (*(void (**)(char *, uint64_t))(v62 + 8))(v26, v27);
    (*(void (**)(char *, uint64_t))(v60 + 8))(v25, v61);
    swift_release();
    type metadata accessor for SPPairingSessionError(0);
    uint64_t v67 = 15;
    sub_1004A0BC8((uint64_t)_swiftEmptyArrayStorage);
    sub_100A872C8(&qword_101638770, type metadata accessor for SPPairingSessionError);
    _BridgedStoredNSError.init(_:userInfo:)();
    uint64_t v28 = (void *)aBlock;
    sub_1001BDFB8();
  }
  else
  {
    uint64_t v29 = v3;
    if (qword_101636CD8 != -1) {
      swift_once();
    }
    OS_dispatch_queue.sync<A>(execute:)();
    uint64_t v30 = sub_1010AAFD0(aBlock);
    swift_bridgeObjectRelease();
    uint64_t v31 = v3[3];
    uint64_t v32 = sub_100AD4584();
    if (v32 >= v30)
    {
      uint64_t v39 = v32;
      static os_log_type_t.error.getter();
      uint64_t v40 = swift_allocObject();
      *(_OWORD *)(v40 + 16) = v54;
      *(void *)(v40 + 56) = &type metadata for Int;
      *(void *)(v40 + 64) = &protocol witness table for Int;
      *(void *)(v40 + 32) = v30;
      *(void *)(v40 + 96) = &type metadata for Int;
      *(void *)(v40 + 104) = &protocol witness table for Int;
      *(void *)(v40 + 72) = v39;
      os_log(_:dso:log:_:_:)();
      swift_bridgeObjectRelease();
      sub_10000584C();
      uint64_t v42 = v56;
      uint64_t v41 = v57;
      (*(void (**)(char *, void, uint64_t))(v56 + 104))(v11, enum case for DispatchQoS.QoSClass.default(_:), v57);
      uint64_t v43 = (void *)static OS_dispatch_queue.global(qos:)();
      (*(void (**)(char *, uint64_t))(v42 + 8))(v11, v41);
      uint64_t v44 = swift_allocObject();
      uint64_t v45 = v65;
      *(void *)(v44 + 16) = v64;
      *(void *)(v44 + 24) = v45;
      uint64_t v71 = sub_100A87074;
      uint64_t v72 = v44;
      *(void *)&long long aBlock = _NSConcreteStackBlock;
      *((void *)&aBlock + 1) = 1107296256;
      uint64_t v69 = sub_1004B5480;
      int64_t v70 = &unk_1015E6820;
      unint64_t v46 = _Block_copy(&aBlock);
      swift_retain();
      int64_t v47 = v58;
      static DispatchQoS.unspecified.getter();
      uint64_t v67 = (uint64_t)_swiftEmptyArrayStorage;
      sub_100A872C8((unint64_t *)&qword_10163B7E0, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
      sub_10000588C((uint64_t *)&unk_10163F350);
      sub_100062734((unint64_t *)&qword_10163B7F0, (uint64_t *)&unk_10163F350);
      uint64_t v65 = v39;
      uint64_t v48 = v59;
      uint64_t v49 = v63;
      dispatch thunk of SetAlgebra.init<A>(_:)();
      OS_dispatch_queue.async(group:qos:flags:execute:)();
      _Block_release(v46);

      (*(void (**)(char *, uint64_t))(v62 + 8))(v48, v49);
      (*(void (**)(char *, uint64_t))(v60 + 8))(v47, v61);
      swift_release();
      type metadata accessor for SPPairingSessionError(0);
      *(void *)&long long aBlock = 17;
      sub_1004A0BC8((uint64_t)_swiftEmptyArrayStorage);
      sub_100A872C8(&qword_101638770, type metadata accessor for SPPairingSessionError);
      _BridgedStoredNSError.init(_:userInfo:)();
      int64_t v50 = (void *)v67;
      *(void *)&long long aBlock = 0;
      *((void *)&aBlock + 1) = 0xE000000000000000;
      _StringGuts.grow(_:)(35);
      swift_bridgeObjectRelease();
      strcpy((char *)&aBlock, "Limit reached ");
      HIBYTE(aBlock) = -18;
      uint64_t v66 = v30;
      v51._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
      String.append(_:)(v51);
      swift_bridgeObjectRelease();
      v52._object = (void *)0x8000000101411B20;
      v52._countAndFlagsBits = 0xD000000000000011;
      String.append(_:)(v52);
      uint64_t v66 = v65;
      v53._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
      String.append(_:)(v53);
      swift_bridgeObjectRelease();
      sub_1001BDFB8();

      swift_bridgeObjectRelease();
    }
    else
    {
      uint64_t v33 = (void *)swift_allocObject();
      uint64_t v34 = v65;
      v33[2] = v64;
      v33[3] = v34;
      v33[4] = v29;
      v33[5] = a1;
      uint64_t v35 = type metadata accessor for TaskPriority();
      uint64_t v36 = (uint64_t)v55;
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v35 - 8) + 56))(v55, 1, 1, v35);
      uint64_t v37 = (void *)swift_allocObject();
      v37[2] = 0;
      v37[3] = 0;
      v37[4] = v31;
      v37[5] = sub_100A870DC;
      v37[6] = v33;
      swift_retain();
      swift_retain();
      id v38 = a1;
      swift_retain();
      swift_retain();
      sub_1008F5E44(v36, (uint64_t)&unk_101642910, (uint64_t)v37);
      swift_release();
      swift_release();
    }
  }
}

void sub_100A77268(void (*a1)())
{
  type metadata accessor for SPPairingSessionError(0);
  sub_1004A0BC8((uint64_t)_swiftEmptyArrayStorage);
  sub_100A872C8(&qword_101638770, type metadata accessor for SPPairingSessionError);
  _BridgedStoredNSError.init(_:userInfo:)();
  a1();
}

void sub_100A77324(char a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5)
{
  uint64_t v34 = a5;
  uint64_t v35 = a3;
  uint64_t v8 = type metadata accessor for DispatchQoS.QoSClass();
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  uint64_t v11 = (char *)&v30 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v36 = *(void *)(v12 - 8);
  __chkstk_darwin(v12);
  uint64_t v14 = (char *)&v30 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = type metadata accessor for DispatchQoS();
  uint64_t v16 = *(void *)(v15 - 8);
  uint64_t v17 = __chkstk_darwin(v15);
  uint64_t v19 = (char *)&v30 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (a1)
  {
    uint64_t v20 = v17;
    id v21 = (void *)swift_allocObject();
    uint64_t v22 = v34;
    v21[2] = v34;
    v21[3] = a4;
    v21[4] = a2;
    v21[5] = v35;
    uint64_t v42 = sub_100A871B8;
    uint64_t v43 = v21;
    long long aBlock = _NSConcreteStackBlock;
    uint64_t v39 = 1107296256;
    uint64_t v40 = sub_1004B5480;
    uint64_t v41 = &unk_1015E6960;
    uint64_t v23 = _Block_copy(&aBlock);
    id v24 = v22;
    swift_retain();
    swift_retain();
    static DispatchQoS.unspecified.getter();
    uint64_t v37 = (uint64_t)_swiftEmptyArrayStorage;
    sub_100A872C8((unint64_t *)&qword_10163B7E0, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
    sub_10000588C((uint64_t *)&unk_10163F350);
    sub_100062734((unint64_t *)&qword_10163B7F0, (uint64_t *)&unk_10163F350);
    dispatch thunk of SetAlgebra.init<A>(_:)();
    OS_dispatch_queue.async(group:qos:flags:execute:)();
    _Block_release(v23);
    (*(void (**)(char *, uint64_t))(v36 + 8))(v14, v12);
    (*(void (**)(char *, uint64_t))(v16 + 8))(v19, v20);
    swift_release();
  }
  else
  {
    uint64_t v31 = a2;
    uint64_t v32 = a4;
    uint64_t v33 = v16;
    uint64_t v34 = (void *)v17;
    static os_log_type_t.error.getter();
    if (qword_101637308 != -1) {
      swift_once();
    }
    os_log(_:dso:log:_:_:)();
    sub_10000584C();
    (*(void (**)(char *, void, uint64_t))(v9 + 104))(v11, enum case for DispatchQoS.QoSClass.default(_:), v8);
    uint64_t v25 = (void *)static OS_dispatch_queue.global(qos:)();
    (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v8);
    uint64_t v26 = swift_allocObject();
    uint64_t v27 = v35;
    *(void *)(v26 + 16) = v31;
    *(void *)(v26 + 24) = v27;
    uint64_t v42 = sub_100A87150;
    uint64_t v43 = (void *)v26;
    long long aBlock = _NSConcreteStackBlock;
    uint64_t v39 = 1107296256;
    uint64_t v40 = sub_1004B5480;
    uint64_t v41 = &unk_1015E6910;
    uint64_t v28 = _Block_copy(&aBlock);
    swift_retain();
    static DispatchQoS.unspecified.getter();
    uint64_t v37 = (uint64_t)_swiftEmptyArrayStorage;
    sub_100A872C8((unint64_t *)&qword_10163B7E0, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
    sub_10000588C((uint64_t *)&unk_10163F350);
    sub_100062734((unint64_t *)&qword_10163B7F0, (uint64_t *)&unk_10163F350);
    dispatch thunk of SetAlgebra.init<A>(_:)();
    OS_dispatch_queue.async(group:qos:flags:execute:)();
    _Block_release(v28);

    (*(void (**)(char *, uint64_t))(v36 + 8))(v14, v12);
    (*(void (**)(char *, void *))(v33 + 8))(v19, v34);
    swift_release();
    type metadata accessor for SPPairingSessionError(0);
    uint64_t v37 = 20;
    sub_1004A0BC8((uint64_t)_swiftEmptyArrayStorage);
    sub_100A872C8(&qword_101638770, type metadata accessor for SPPairingSessionError);
    _BridgedStoredNSError.init(_:userInfo:)();
    uint64_t v29 = aBlock;
    sub_1001BDFB8();
  }
}

uint64_t sub_100A77984(void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v92 = a3;
  uint64_t v93 = a4;
  uint64_t v96 = a2;
  uint64_t v5 = sub_10000588C(&qword_10163C6C8);
  __chkstk_darwin(v5 - 8);
  uint64_t v73 = (char *)v62 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v68 = (void *)sub_10000588C(&qword_1016417E0);
  uint64_t v69 = (void (**)(char *, void))*(v68 - 1);
  __chkstk_darwin(v68);
  uint64_t v8 = (char *)v62 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v71 = sub_10000588C(&qword_1016417E8);
  uint64_t v72 = *(void *)(v71 - 8);
  __chkstk_darwin(v71);
  uint64_t v67 = (char *)v62 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v76 = sub_10000588C(&qword_1016417F0);
  uint64_t v75 = *(void *)(v76 - 8);
  __chkstk_darwin(v76);
  int64_t v74 = (char *)v62 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v83 = sub_10000588C(&qword_1016417F8);
  uint64_t v80 = *(void *)(v83 - 8);
  __chkstk_darwin(v83);
  uint64_t v77 = (char *)v62 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v85 = sub_10000588C(&qword_101641800);
  uint64_t v82 = *(void *)(v85 - 8);
  __chkstk_darwin(v85);
  long long v79 = (char *)v62 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v84 = sub_10000588C(&qword_101643D38);
  uint64_t v81 = *(void *)(v84 - 8);
  __chkstk_darwin(v84);
  int64_t v78 = (char *)v62 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = sub_10000588C(&qword_101643D40);
  uint64_t v87 = *(void *)(v14 - 8);
  uint64_t v88 = v14;
  __chkstk_darwin(v14);
  v86 = (char *)v62 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = sub_10000588C(&qword_101643D48);
  uint64_t v90 = *(void *)(v16 - 8);
  uint64_t v91 = v16;
  __chkstk_darwin(v16);
  v89 = (char *)v62 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v18 = type metadata accessor for UUID();
  uint64_t v19 = *(void *)(v18 - 8);
  __chkstk_darwin(v18);
  id v21 = (char *)v62 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  static os_log_type_t.default.getter();
  if (qword_101637308 != -1) {
    swift_once();
  }
  sub_10000588C((uint64_t *)&unk_10163AD00);
  uint64_t v22 = swift_allocObject();
  *(_OWORD *)(v22 + 16) = xmmword_101342130;
  id v23 = [a1 identifier];
  int64_t v70 = a1;
  id v24 = v23;
  static UUID._unconditionallyBridgeFromObjectiveC(_:)();

  uint64_t v25 = UUID.uuidString.getter();
  uint64_t v27 = v26;
  (*(void (**)(char *, uint64_t))(v19 + 8))(v21, v18);
  *(void *)(v22 + 56) = &type metadata for String;
  *(void *)(v22 + 64) = sub_10000B4CC();
  *(void *)(v22 + 32) = v25;
  *(void *)(v22 + 40) = v27;
  os_log(_:dso:log:_:_:)();
  swift_bridgeObjectRelease();
  uint64_t v28 = v96;
  id v97 = (id)sub_1013285F8(*(char **)(v96 + 64), 0);
  id v98 = *(id *)(v28 + 16);
  id v29 = v98;
  uint64_t v66 = type metadata accessor for OS_dispatch_queue.SchedulerOptions();
  uint64_t v30 = *(void *)(v66 - 8);
  v94 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v30 + 56);
  uint64_t v95 = v30 + 56;
  uint64_t v31 = (uint64_t)v73;
  v94(v73, 1, 1, v66);
  id v63 = v29;
  uint64_t v32 = sub_10000588C((uint64_t *)&unk_101649C90);
  unint64_t v33 = sub_10000584C();
  uint64_t v34 = sub_100062734((unint64_t *)&unk_101649CA0, (uint64_t *)&unk_101649C90);
  uint64_t v35 = sub_100A872C8((unint64_t *)&qword_10166C020, (void (*)(uint64_t))sub_10000584C);
  v62[3] = v32;
  unint64_t v65 = v33;
  v62[4] = v34;
  uint64_t v64 = v35;
  Publisher.receive<A>(on:options:)();
  sub_10001DAB4(v31, &qword_10163C6C8);

  swift_release();
  static Subscribers.Demand.unlimited.getter();
  v62[1] = type metadata accessor for Peripheral();
  v62[2] = &protocol conformance descriptor for Publishers.ReceiveOn<A, B>;
  sub_100062734(&qword_101641830, &qword_1016417E0);
  uint64_t v36 = v67;
  uint64_t v37 = v68;
  Publisher.flatMap<A, B>(maxPublishers:_:)();
  ((void (**)(char *, void *))v69)[1](v8, v37);
  id v38 = v63;
  id v97 = v63;
  uint64_t v39 = v66;
  v94((char *)v31, 1, 1, v66);
  uint64_t v69 = (void (**)(char *, void))&protocol conformance descriptor for Publishers.FlatMap<A, B>;
  sub_100062734(&qword_101641838, &qword_1016417E8);
  v68 = v38;
  uint64_t v40 = v74;
  uint64_t v41 = v71;
  Publisher.receive<A>(on:options:)();
  sub_10001DAB4(v31, &qword_10163C6C8);

  (*(void (**)(char *, uint64_t))(v72 + 8))(v36, v41);
  swift_allocObject();
  swift_weakInit();
  static Subscribers.Demand.unlimited.getter();
  sub_100062734(&qword_101641840, &qword_1016417F0);
  uint64_t v42 = v77;
  uint64_t v43 = v76;
  Publisher.flatMap<A, B>(maxPublishers:_:)();
  swift_release();
  (*(void (**)(char *, uint64_t))(v75 + 8))(v40, v43);
  uint64_t v44 = v68;
  id v97 = v68;
  v94((char *)v31, 1, 1, v39);
  sub_100062734(&qword_101641848, &qword_1016417F8);
  id v45 = v44;
  unint64_t v46 = v79;
  uint64_t v47 = v83;
  Publisher.receive<A>(on:options:)();
  sub_10001DAB4(v31, &qword_10163C6C8);

  (*(void (**)(char *, uint64_t))(v80 + 8))(v42, v47);
  sub_100062734(&qword_101641850, &qword_101641800);
  uint64_t v48 = v78;
  uint64_t v49 = v85;
  Publisher.compactMap<A>(_:)();
  (*(void (**)(char *, uint64_t))(v82 + 8))(v46, v49);
  sub_10000588C(&qword_101655B50);
  int64_t v50 = v86;
  uint64_t v51 = v84;
  Publishers.CompactMap.map<A>(_:)();
  (*(void (**)(char *, uint64_t))(v81 + 8))(v48, v51);
  sub_10000588C(&qword_10163C890);
  sub_100062734(&qword_101643D50, &qword_101643D40);
  sub_100062734(&qword_10163C8A0, &qword_10163C890);
  uint64_t v52 = v88;
  Swift::String v53 = v89;
  Publisher.catch<A>(_:)();
  (*(void (**)(char *, uint64_t))(v87 + 8))(v50, v52);
  uint64_t v54 = swift_allocObject();
  swift_weakInit();
  unint64_t v55 = (void *)swift_allocObject();
  uint64_t v56 = v92;
  uint64_t v57 = v93;
  v55[2] = v54;
  v55[3] = v56;
  unint64_t v58 = v70;
  v55[4] = v57;
  v55[5] = v58;
  sub_100062734(&qword_101643D58, &qword_101643D48);
  swift_retain();
  id v59 = v58;
  uint64_t v60 = v91;
  Publisher<>.sink(receiveValue:)();
  swift_release();
  (*(void (**)(char *, uint64_t))(v90 + 8))(v53, v60);
  swift_beginAccess();
  AnyCancellable.store(in:)();
  swift_endAccess();
  return swift_release();
}

uint64_t sub_100A786E4@<X0>(void **a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v22 = a2;
  uint64_t v3 = sub_10000588C(&qword_10163C8B0);
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  uint64_t v6 = (char *)&v21 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = sub_10000588C((uint64_t *)&unk_101649E80);
  uint64_t v8 = *(void *)(v7 - 8);
  __chkstk_darwin(v7);
  uint64_t v10 = (char *)&v21 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = (char *)*a1;
  v27[3] = &type metadata for BAServiceIdentifier;
  v27[4] = &off_1015CE038;
  LOBYTE(v27[0]) = 1;
  uint64_t v12 = (uint64_t *)&v11[OBJC_IVAR____TtC12searchpartyd10Peripheral_services];
  swift_beginAccess();
  uint64_t v13 = *v12;
  id v24 = v27;
  swift_bridgeObjectRetain();
  uint64_t v14 = sub_100E4E988((uint64_t (*)(uint64_t *))sub_10015AF64, (uint64_t)v23, v13);
  swift_bridgeObjectRelease();
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)v27);
  if (v14)
  {
    uint64_t v15 = sub_100A9B7E0((uint64_t)&off_1015A58C8);
    uint64_t v16 = swift_allocObject();
    *(void *)(v16 + 16) = v14;
    *(void *)(v16 + 24) = v15;
    sub_10000588C((uint64_t *)&unk_101649E90);
    swift_allocObject();
    swift_retain();
    swift_bridgeObjectRetain();
    v27[0] = Future.init(_:)();
    sub_100062734((unint64_t *)&qword_101671CE0, (uint64_t *)&unk_101649E90);
    uint64_t v17 = Publisher.eraseToAnyPublisher()();
    swift_bridgeObjectRelease();
    swift_release();
    uint64_t result = swift_release();
  }
  else
  {
    static os_log_type_t.error.getter();
    if (qword_101637308 != -1) {
      swift_once();
    }
    os_log(_:dso:log:_:_:)();
    swift_beginAccess();
    if (swift_weakLoadStrong())
    {
      swift_retain();
      swift_release();
      type metadata accessor for SPPairingSessionError(0);
      uint64_t v25 = 7;
      sub_1004A0BC8((uint64_t)_swiftEmptyArrayStorage);
      sub_100A872C8(&qword_101638770, type metadata accessor for SPPairingSessionError);
      _BridgedStoredNSError.init(_:userInfo:)();
      uint64_t v19 = v26;
      sub_1001BDFB8();

      swift_release();
    }
    uint64_t v26 = v11;
    type metadata accessor for Peripheral();
    uint64_t v20 = v11;
    Just.init(_:)();
    sub_100061234();
    Just.setFailureType<A>(to:)();
    (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
    sub_100062734(&qword_10163C8B8, (uint64_t *)&unk_101649E80);
    uint64_t v17 = Publisher.eraseToAnyPublisher()();
    uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v8 + 8))(v10, v7);
  }
  *uint64_t v22 = v17;
  return result;
}

uint64_t sub_100A78BA0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v45 = a5;
  uint64_t v51 = a4;
  uint64_t v50 = a3;
  uint64_t v6 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  uint64_t v9 = (char *)&v43 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = type metadata accessor for DispatchQoS();
  uint64_t v49 = *(void *)(v10 - 8);
  __chkstk_darwin(v10);
  uint64_t v12 = (char *)&v43 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = type metadata accessor for DispatchQoS.QoSClass();
  uint64_t v14 = *(void *)(v13 - 8);
  __chkstk_darwin(v13);
  uint64_t v16 = (char *)&v43 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_beginAccess();
  uint64_t Strong = swift_weakLoadStrong();
  if (Strong)
  {
    uint64_t v48 = Strong;
    sub_10001D074(a1, (uint64_t)v61, &qword_101655B50);
    uint64_t v47 = v7;
    uint64_t v46 = v10;
    if (v62)
    {
      uint64_t v44 = v6;
      sub_10006105C((uint64_t)v61, (uint64_t)v60);
      static os_log_type_t.error.getter();
      if (qword_101637308 != -1) {
        swift_once();
      }
      sub_10000588C((uint64_t *)&unk_10163AD00);
      uint64_t v18 = swift_allocObject();
      *(_OWORD *)(v18 + 16) = xmmword_101342130;
      uint64_t v19 = sub_101321420();
      uint64_t v21 = v20;
      *(void *)(v18 + 56) = &type metadata for String;
      *(void *)(v18 + 64) = sub_10000B4CC();
      *(void *)(v18 + 32) = v19;
      *(void *)(v18 + 40) = v21;
      os_log(_:dso:log:_:_:)();
      swift_bridgeObjectRelease();
      sub_10000584C();
      (*(void (**)(char *, void, uint64_t))(v14 + 104))(v16, enum case for DispatchQoS.QoSClass.default(_:), v13);
      uint64_t v22 = (void *)static OS_dispatch_queue.global(qos:)();
      (*(void (**)(char *, uint64_t))(v14 + 8))(v16, v13);
      uint64_t v23 = swift_allocObject();
      uint64_t v24 = v51;
      *(void *)(v23 + 16) = v50;
      *(void *)(v23 + 24) = v24;
      unint64_t v58 = sub_100A87220;
      uint64_t v59 = v23;
      long long aBlock = _NSConcreteStackBlock;
      uint64_t v55 = 1107296256;
      uint64_t v56 = sub_1004B5480;
      uint64_t v57 = (ValueMetadata *)&unk_1015E69D8;
      uint64_t v25 = _Block_copy(&aBlock);
      swift_retain();
      static DispatchQoS.unspecified.getter();
      uint64_t v52 = _swiftEmptyArrayStorage;
      sub_100A872C8((unint64_t *)&qword_10163B7E0, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
      sub_10000588C((uint64_t *)&unk_10163F350);
      sub_100062734((unint64_t *)&qword_10163B7F0, (uint64_t *)&unk_10163F350);
      uint64_t v26 = v44;
      dispatch thunk of SetAlgebra.init<A>(_:)();
      OS_dispatch_queue.async(group:qos:flags:execute:)();
      _Block_release(v25);
      swift_release();

      (*(void (**)(char *, uint64_t))(v47 + 8))(v9, v26);
      (*(void (**)(char *, uint64_t))(v49 + 8))(v12, v46);
      sub_100061288((uint64_t)v60);
      return swift_release();
    }
    uint64_t v57 = &type metadata for BAServiceIdentifier;
    unint64_t v58 = (void (*)())&off_1015CE038;
    LOBYTE(aBlock) = 1;
    id v43 = (id)v61[0];
    uint64_t v28 = (uint64_t *)(v61[0] + OBJC_IVAR____TtC12searchpartyd10Peripheral_services);
    uint64_t v29 = swift_beginAccess();
    uint64_t v30 = *v28;
    __chkstk_darwin(v29);
    *(&v43 - 2) = &aBlock;
    swift_bridgeObjectRetain();
    uint64_t v31 = sub_100E4E988((uint64_t (*)(uint64_t *))sub_10015AF64, (uint64_t)(&v43 - 4), v30);
    swift_bridgeObjectRelease();
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)&aBlock);
    if (v31)
    {
      uint64_t v44 = v6;
      uint64_t v57 = &type metadata for BACharacteristicIdentifier.FindMy;
      unint64_t v58 = (void (*)())&off_1015CE018;
      LOBYTE(aBlock) = 0;
      uint64_t v32 = swift_beginAccess();
      uint64_t v33 = *(void *)(v31 + 40);
      __chkstk_darwin(v32);
      *(&v43 - 2) = &aBlock;
      swift_bridgeObjectRetain();
      uint64_t v34 = sub_100E4E9E4((uint64_t (*)(uint64_t *))sub_100332E60, (uint64_t)(&v43 - 4), v33);
      swift_bridgeObjectRelease();
      _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)&aBlock);
      if (v34)
      {
        uint64_t v35 = v45;
        uint64_t v36 = v50;
        uint64_t v37 = v51;
        sub_100A7E238(v45, v34, v50, v51);
        sub_100A7D014(v35, v34, v36, v37);

        swift_release();
        swift_release();
        return swift_release();
      }
      swift_release();
      uint64_t v6 = v44;
    }
    static os_log_type_t.error.getter();
    if (qword_101637308 != -1) {
      swift_once();
    }
    os_log(_:dso:log:_:_:)();
    type metadata accessor for SPPairingSessionError(0);
    uint64_t v53 = 7;
    sub_1004A0BC8((uint64_t)_swiftEmptyArrayStorage);
    sub_100A872C8(&qword_101638770, type metadata accessor for SPPairingSessionError);
    _BridgedStoredNSError.init(_:userInfo:)();
    id v38 = aBlock;
    sub_1001BDFB8();

    sub_10000584C();
    (*(void (**)(char *, void, uint64_t))(v14 + 104))(v16, enum case for DispatchQoS.QoSClass.default(_:), v13);
    uint64_t v39 = (void *)static OS_dispatch_queue.global(qos:)();
    (*(void (**)(char *, uint64_t))(v14 + 8))(v16, v13);
    uint64_t v40 = swift_allocObject();
    uint64_t v41 = v51;
    *(void *)(v40 + 16) = v50;
    *(void *)(v40 + 24) = v41;
    unint64_t v58 = sub_100A87240;
    uint64_t v59 = v40;
    long long aBlock = _NSConcreteStackBlock;
    uint64_t v55 = 1107296256;
    uint64_t v56 = sub_1004B5480;
    uint64_t v57 = (ValueMetadata *)&unk_1015E6A28;
    uint64_t v42 = _Block_copy(&aBlock);
    swift_retain();
    static DispatchQoS.unspecified.getter();
    uint64_t v53 = (uint64_t)_swiftEmptyArrayStorage;
    sub_100A872C8((unint64_t *)&qword_10163B7E0, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
    sub_10000588C((uint64_t *)&unk_10163F350);
    sub_100062734((unint64_t *)&qword_10163B7F0, (uint64_t *)&unk_10163F350);
    dispatch thunk of SetAlgebra.init<A>(_:)();
    OS_dispatch_queue.async(group:qos:flags:execute:)();

    _Block_release(v42);
    swift_release();

    (*(void (**)(char *, uint64_t))(v47 + 8))(v9, v6);
    (*(void (**)(char *, uint64_t))(v49 + 8))(v12, v46);
    return swift_release();
  }
  static os_log_type_t.error.getter();
  if (qword_101637308 != -1) {
    swift_once();
  }
  return os_log(_:dso:log:_:_:)();
}

uint64_t sub_100A7963C(void *a1, void *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = v4;
  uint64_t v28 = a4;
  uint64_t v29 = a2;
  uint64_t v26 = a3;
  uint64_t v27 = a1;
  uint64_t v6 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v32 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  uint64_t v8 = (char *)&v26 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = type metadata accessor for DispatchQoS();
  uint64_t v30 = *(void *)(v9 - 8);
  uint64_t v31 = v9;
  __chkstk_darwin(v9);
  uint64_t v11 = (char *)&v26 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  static os_log_type_t.default.getter();
  if (qword_101637308 != -1) {
    swift_once();
  }
  sub_10000588C((uint64_t *)&unk_10163AD00);
  uint64_t v12 = swift_allocObject();
  *(_OWORD *)(v12 + 16) = xmmword_101347BA0;
  aBlock[0] = *v4;
  sub_10000588C(&qword_101658188);
  uint64_t v13 = String.init<A>(describing:)();
  uint64_t v15 = v14;
  *(void *)(v12 + 56) = &type metadata for String;
  unint64_t v16 = sub_10000B4CC();
  *(void *)(v12 + 32) = v13;
  *(void *)(v12 + 40) = v15;
  *(void *)(v12 + 96) = &type metadata for String;
  *(void *)(v12 + 104) = v16;
  *(void *)(v12 + 64) = v16;
  *(void *)(v12 + 72) = 0xD00000000000002FLL;
  *(void *)(v12 + 80) = 0x8000000101411970;
  os_log(_:dso:log:_:_:)();
  swift_bridgeObjectRelease();
  uint64_t v17 = (void *)swift_allocObject();
  uint64_t v18 = v26;
  uint64_t v19 = v27;
  v17[2] = v27;
  v17[3] = v5;
  uint64_t v21 = v28;
  uint64_t v20 = v29;
  v17[4] = v18;
  v17[5] = v21;
  v17[6] = v20;
  aBlock[4] = sub_100A86FAC;
  aBlock[5] = v17;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_1004B5480;
  aBlock[3] = &unk_1015E6690;
  uint64_t v22 = _Block_copy(aBlock);
  id v23 = v19;
  swift_retain();
  swift_retain();
  id v24 = v20;
  static DispatchQoS.unspecified.getter();
  uint64_t v33 = _swiftEmptyArrayStorage;
  sub_100A872C8((unint64_t *)&qword_10163B7E0, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
  sub_10000588C((uint64_t *)&unk_10163F350);
  sub_100062734((unint64_t *)&qword_10163B7F0, (uint64_t *)&unk_10163F350);
  dispatch thunk of SetAlgebra.init<A>(_:)();
  OS_dispatch_queue.async(group:qos:flags:execute:)();
  _Block_release(v22);
  (*(void (**)(char *, uint64_t))(v32 + 8))(v8, v6);
  (*(void (**)(char *, uint64_t))(v30 + 8))(v11, v31);
  return swift_release();
}

void sub_100A79A38(void *a1, void *a2, uint64_t a3, uint64_t a4, void *a5)
{
  v101 = a5;
  uint64_t v112 = a3;
  uint64_t v113 = a4;
  uint64_t v7 = type metadata accessor for OwnedBeaconRecord();
  __chkstk_darwin(v7 - 8);
  uint64_t v98 = (uint64_t)v95 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v108 = *(void *)(v9 - 8);
  uint64_t v109 = v9;
  __chkstk_darwin(v9);
  v106 = (char *)v95 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = type metadata accessor for DispatchQoS();
  uint64_t v110 = *(void *)(v11 - 8);
  uint64_t v111 = v11;
  __chkstk_darwin(v11);
  v107 = (char *)v95 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = type metadata accessor for DispatchQoS.QoSClass();
  uint64_t v104 = *(void *)(v13 - 8);
  uint64_t v105 = v13;
  __chkstk_darwin(v13);
  v103 = (char *)v95 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v99 = sub_10000588C((uint64_t *)&unk_101656900);
  uint64_t v15 = __chkstk_darwin(v99);
  v100 = (void **)((char *)v95 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0));
  __chkstk_darwin(v15);
  v102 = (void *)((char *)v95 - v17);
  uint64_t v18 = type metadata accessor for UUID();
  uint64_t v19 = *(void *)(v18 - 8);
  __chkstk_darwin(v18);
  uint64_t v21 = (char *)v95 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  static os_log_type_t.default.getter();
  if (qword_101637308 != -1) {
    swift_once();
  }
  uint64_t v97 = sub_10000588C((uint64_t *)&unk_10163AD00);
  uint64_t v22 = swift_allocObject();
  long long v96 = xmmword_101342130;
  *(_OWORD *)(v22 + 16) = xmmword_101342130;
  v114 = a1;
  id v23 = [a1 identifier];
  static UUID._unconditionallyBridgeFromObjectiveC(_:)();

  uint64_t v24 = UUID.uuidString.getter();
  uint64_t v26 = v25;
  (*(void (**)(char *, uint64_t))(v19 + 8))(v21, v18);
  *(void *)(v22 + 56) = &type metadata for String;
  unint64_t v27 = sub_10000B4CC();
  *(void *)(v22 + 64) = v27;
  *(void *)(v22 + 32) = v24;
  *(void *)(v22 + 40) = v26;
  os_log(_:dso:log:_:_:)();
  swift_bridgeObjectRelease();
  uint64_t v28 = a2[9];
  uint64_t v29 = v28 + OBJC_IVAR____TtC12searchpartyd27AccessoryPairingCoordinator_pairingOwnerContext;
  swift_beginAccess();
  sub_10001D074(v29, (uint64_t)&aBlock, &qword_101639A40);
  uint64_t v30 = a2;
  if (!*((void *)&v125 + 1))
  {
    sub_10001DAB4((uint64_t)&aBlock, &qword_101639A40);
    uint64_t v42 = v112;
    uint64_t v32 = (uint64_t)v114;
LABEL_11:
    static os_log_type_t.error.getter();
    os_log(_:dso:log:_:_:)();
    sub_100A7B3A8(v32, 0, 0);
    sub_10000584C();
    uint64_t v44 = v103;
    uint64_t v43 = v104;
    uint64_t v45 = v105;
    (*(void (**)(char *, void, uint64_t))(v104 + 104))(v103, enum case for DispatchQoS.QoSClass.default(_:), v105);
    uint64_t v46 = (void *)static OS_dispatch_queue.global(qos:)();
    (*(void (**)(char *, uint64_t))(v43 + 8))(v44, v45);
    uint64_t v47 = swift_allocObject();
    uint64_t v48 = v113;
    *(void *)(v47 + 16) = v42;
    *(void *)(v47 + 24) = v48;
    *(void *)&long long v126 = sub_100A86FF4;
    *((void *)&v126 + 1) = v47;
    *(void *)&long long aBlock = _NSConcreteStackBlock;
    *((void *)&aBlock + 1) = 1107296256;
    *(void *)&long long v125 = sub_1004B5480;
    *((void *)&v125 + 1) = &unk_1015E66E0;
    uint64_t v49 = _Block_copy(&aBlock);
    swift_retain();
    uint64_t v50 = v107;
    static DispatchQoS.unspecified.getter();
    *(void *)&long long v116 = _swiftEmptyArrayStorage;
    sub_100A872C8((unint64_t *)&qword_10163B7E0, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
    sub_10000588C((uint64_t *)&unk_10163F350);
    sub_100062734((unint64_t *)&qword_10163B7F0, (uint64_t *)&unk_10163F350);
    uint64_t v51 = v106;
    uint64_t v52 = v109;
    dispatch thunk of SetAlgebra.init<A>(_:)();
    OS_dispatch_queue.async(group:qos:flags:execute:)();
    _Block_release(v49);

    (*(void (**)(char *, uint64_t))(v108 + 8))(v51, v52);
    (*(void (**)(char *, uint64_t))(v110 + 8))(v50, v111);
    swift_release();
    type metadata accessor for SPPairingSessionError(0);
    *(void *)&long long v116 = 7;
    sub_1004A0BC8((uint64_t)_swiftEmptyArrayStorage);
    sub_100A872C8(&qword_101638770, type metadata accessor for SPPairingSessionError);
    _BridgedStoredNSError.init(_:userInfo:)();
    uint64_t v53 = (void *)aBlock;
    sub_1001BDFB8();

    return;
  }
  sub_10000588C(&qword_101639C60);
  type metadata accessor for CollaborativeKeyGen.v1.OwnerContext();
  char v31 = swift_dynamicCast();
  uint64_t v32 = (uint64_t)v114;
  if ((v31 & 1) == 0)
  {
LABEL_10:
    uint64_t v42 = v112;
    goto LABEL_11;
  }
  uint64_t v33 = v116;
  uint64_t v34 = *(void *)(v28 + OBJC_IVAR____TtC12searchpartyd27AccessoryPairingCoordinator_pairingInfo)
      + OBJC_IVAR____TtC12searchpartyd20AccessoryPairingInfo_collaborativeKeyC3;
  swift_beginAccess();
  sub_10001D074(v34, (uint64_t)&aBlock, &qword_101639B78);
  if (!*((void *)&v125 + 1))
  {
    swift_release();
    sub_10001DAB4((uint64_t)&aBlock, &qword_101639B78);
    goto LABEL_10;
  }
  v95[0] = v27;
  sub_10001CEB0(&aBlock, (uint64_t)v121);
  uint64_t v36 = v122;
  uint64_t v35 = v123;
  sub_10001CD44(v121, v122);
  uint64_t v37 = (*(uint64_t (**)(uint64_t))(*(void *)(*(void *)(v35 + 8) + 8) + 40))(v36);
  unint64_t v39 = v38;
  uint64_t v40 = CCCKGGetOpeningSize();
  uint64_t v41 = v40;
  v95[1] = v33;
  switch(v39 >> 62)
  {
    case 1uLL:
      uint64_t v54 = v40;
      if (v37 >> 32 < (int)v37)
      {
        __break(1u);
        goto LABEL_27;
      }
      swift_retain_n();
      sub_1000361E0(v37, v39);
      sub_100394158((int)v37, v37 >> 32, v33, v54, (uint64_t)&v116);
      sub_10001CFB8(v37, v39);
LABEL_17:
      sub_10001CFB8(v37, v39);
      swift_release_n();
LABEL_18:
      long long v126 = v118;
      long long v127 = v119;
      long long v128 = v120;
      long long aBlock = v116;
      long long v125 = v117;
      unint64_t v58 = (char *)v30[3];
      sub_100AB24F0();
      QueueSynchronizer.conditionalSync<A>(_:)();
      swift_release();
      if (v116)
      {
        uint64_t v59 = v102;
        uint64_t v60 = (uint64_t)v114;
        sub_100A82EA8(v114, &aBlock, v101, v102);
        uint64_t v61 = v100;
        sub_10001D074((uint64_t)v59, (uint64_t)v100, (uint64_t *)&unk_101656900);
        if (swift_getEnumCaseMultiPayload() == 1)
        {
          char v62 = *v61;
          sub_100A7B3A8(v60, 0, 0);
          static os_log_type_t.error.getter();
          uint64_t v63 = swift_allocObject();
          *(_OWORD *)(v63 + 16) = v96;
          v101 = v62;
          *(void *)&long long v116 = v62;
          swift_errorRetain();
          sub_10000588C(&qword_101638D40);
          uint64_t v64 = String.init<A>(describing:)();
          uint64_t v65 = v95[0];
          *(void *)(v63 + 56) = &type metadata for String;
          *(void *)(v63 + 64) = v65;
          *(void *)(v63 + 32) = v64;
          *(void *)(v63 + 40) = v66;
          os_log(_:dso:log:_:_:)();
          swift_bridgeObjectRelease();
          sub_10000584C();
          v68 = v103;
          uint64_t v67 = v104;
          uint64_t v69 = v105;
          (*(void (**)(char *, void, uint64_t))(v104 + 104))(v103, enum case for DispatchQoS.QoSClass.default(_:), v105);
          int64_t v70 = (void *)static OS_dispatch_queue.global(qos:)();
          (*(void (**)(char *, uint64_t))(v67 + 8))(v68, v69);
          uint64_t v71 = swift_allocObject();
          uint64_t v72 = v113;
          *(void *)(v71 + 16) = v112;
          *(void *)(v71 + 24) = v72;
          *(void *)&long long v118 = sub_100A87054;
          *((void *)&v118 + 1) = v71;
          *(void *)&long long v116 = _NSConcreteStackBlock;
          *((void *)&v116 + 1) = 1107296256;
          *(void *)&long long v117 = sub_1004B5480;
          *((void *)&v117 + 1) = &unk_1015E67D0;
          uint64_t v73 = _Block_copy(&v116);
          swift_retain();
          int64_t v74 = v107;
          static DispatchQoS.unspecified.getter();
          uint64_t v115 = (uint64_t)_swiftEmptyArrayStorage;
          sub_100A872C8((unint64_t *)&qword_10163B7E0, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
          sub_10000588C((uint64_t *)&unk_10163F350);
          sub_100062734((unint64_t *)&qword_10163B7F0, (uint64_t *)&unk_10163F350);
          uint64_t v75 = v106;
          uint64_t v76 = v109;
          dispatch thunk of SetAlgebra.init<A>(_:)();
          OS_dispatch_queue.async(group:qos:flags:execute:)();
          _Block_release(v73);

          (*(void (**)(char *, uint64_t))(v108 + 8))(v75, v76);
          (*(void (**)(char *, uint64_t))(v110 + 8))(v74, v111);
          swift_release();
          type metadata accessor for SPPairingSessionError(0);
          uint64_t v115 = 11;
          sub_1004A0BC8((uint64_t)_swiftEmptyArrayStorage);
          sub_100A872C8(&qword_101638770, type metadata accessor for SPPairingSessionError);
          _BridgedStoredNSError.init(_:userInfo:)();
          uint64_t v77 = (void *)v116;
          sub_1001BDFB8();

          swift_release();
          sub_1003B4428((uint64_t *)&aBlock);
          swift_errorRelease();
LABEL_24:
          sub_10001DAB4((uint64_t)v102, (uint64_t *)&unk_101656900);
          goto LABEL_25;
        }
        uint64_t v89 = v98;
        sub_100A84E60((uint64_t)v61, v98, (uint64_t (*)(void))type metadata accessor for OwnedBeaconRecord);
        id v90 = sub_100398B08(v89, v58);
        uint64_t v91 = sub_101142B60(v90, v112, v113);
        if (*(unsigned char *)(v30[4] + OBJC_IVAR____TtC12searchpartyd14CentralManager_isSharedPairingAgent) == 1)
        {
          uint64_t v92 = (void *)v30[8];
          __chkstk_darwin(v91);
          v95[-2] = v93;
          type metadata accessor for SharedPairingAgent();
          Lock.callAsFunction<A>(_:)();
          v94 = (void *)v116;
          sub_101070634(v92);
          swift_release();

          sub_1003B4428((uint64_t *)&aBlock);
          sub_100A853E0(v89, (uint64_t (*)(void))type metadata accessor for OwnedBeaconRecord);
          goto LABEL_24;
        }
LABEL_27:
        __break(1u);
      }
      static os_log_type_t.error.getter();
      os_log(_:dso:log:_:_:)();
      sub_100A7B3A8((uint64_t)v114, 0, 0);
      sub_10000584C();
      long long v79 = v103;
      uint64_t v78 = v104;
      uint64_t v80 = v105;
      (*(void (**)(char *, void, uint64_t))(v104 + 104))(v103, enum case for DispatchQoS.QoSClass.default(_:), v105);
      uint64_t v81 = (void *)static OS_dispatch_queue.global(qos:)();
      (*(void (**)(char *, uint64_t))(v78 + 8))(v79, v80);
      uint64_t v82 = swift_allocObject();
      uint64_t v83 = v113;
      *(void *)(v82 + 16) = v112;
      *(void *)(v82 + 24) = v83;
      *(void *)&long long v118 = sub_100A87034;
      *((void *)&v118 + 1) = v82;
      *(void *)&long long v116 = _NSConcreteStackBlock;
      *((void *)&v116 + 1) = 1107296256;
      *(void *)&long long v117 = sub_1004B5480;
      *((void *)&v117 + 1) = &unk_1015E6780;
      uint64_t v84 = _Block_copy(&v116);
      swift_retain();
      uint64_t v85 = v107;
      static DispatchQoS.unspecified.getter();
      uint64_t v115 = (uint64_t)_swiftEmptyArrayStorage;
      sub_100A872C8((unint64_t *)&qword_10163B7E0, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
      sub_10000588C((uint64_t *)&unk_10163F350);
      sub_100062734((unint64_t *)&qword_10163B7F0, (uint64_t *)&unk_10163F350);
      v86 = v106;
      uint64_t v87 = v109;
      dispatch thunk of SetAlgebra.init<A>(_:)();
      OS_dispatch_queue.async(group:qos:flags:execute:)();
      _Block_release(v84);

      (*(void (**)(char *, uint64_t))(v108 + 8))(v86, v87);
      (*(void (**)(char *, uint64_t))(v110 + 8))(v85, v111);
      swift_release();
      type metadata accessor for SPPairingSessionError(0);
      uint64_t v115 = 10;
      sub_1004A0BC8((uint64_t)_swiftEmptyArrayStorage);
      sub_100A872C8(&qword_101638770, type metadata accessor for SPPairingSessionError);
      _BridgedStoredNSError.init(_:userInfo:)();
      uint64_t v88 = (void *)v116;
      sub_1001BDFB8();
      swift_release();
      sub_1003B4428((uint64_t *)&aBlock);

LABEL_25:
      _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)v121);
      return;
    case 2uLL:
      uint64_t v55 = v40;
      uint64_t v56 = *(void *)(v37 + 16);
      uint64_t v57 = *(void *)(v37 + 24);
      swift_retain_n();
      swift_retain();
      swift_retain();
      sub_100394158(v56, v57, v33, v55, (uint64_t)&v116);
      swift_release();
      swift_release();
      goto LABEL_17;
    case 3uLL:
      *(void *)((char *)&aBlock + 6) = 0;
      *(void *)&long long aBlock = 0;
      swift_retain_n();
      goto LABEL_16;
    default:
      *(void *)&long long aBlock = v37;
      WORD4(aBlock) = v39;
      BYTE10(aBlock) = BYTE2(v39);
      BYTE11(aBlock) = BYTE3(v39);
      BYTE12(aBlock) = BYTE4(v39);
      BYTE13(aBlock) = BYTE5(v39);
      swift_retain_n();
LABEL_16:
      sub_100A915E8((uint64_t)&aBlock, v33, v41, (uint64_t)&v116);
      sub_10001CFB8(v37, v39);
      swift_release_n();
      goto LABEL_18;
  }
}

void sub_100A7B00C(void (*a1)(void))
{
  type metadata accessor for SPPairingSessionError(0);
  sub_1004A0BC8((uint64_t)_swiftEmptyArrayStorage);
  sub_100A872C8(&qword_101638770, type metadata accessor for SPPairingSessionError);
  _BridgedStoredNSError.init(_:userInfo:)();
  a1(0);
}

uint64_t sub_100A7B0CC(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = v3;
  uint64_t v8 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  uint64_t v11 = (char *)v20 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = type metadata accessor for DispatchQoS();
  uint64_t v13 = *(void *)(v12 - 8);
  __chkstk_darwin(v12);
  uint64_t v15 = (char *)v20 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v20[0] = *(void *)(v4 + 16);
  uint64_t v16 = (void *)swift_allocObject();
  v16[2] = v4;
  v16[3] = a1;
  v16[4] = a2;
  v16[5] = a3;
  aBlock[4] = sub_100A86F30;
  aBlock[5] = v16;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_1004B5480;
  aBlock[3] = &unk_1015E6640;
  uint64_t v17 = _Block_copy(aBlock);
  swift_retain();
  id v18 = a1;
  swift_retain();
  static DispatchQoS.unspecified.getter();
  v20[1] = _swiftEmptyArrayStorage;
  sub_100A872C8((unint64_t *)&qword_10163B7E0, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
  sub_10000588C((uint64_t *)&unk_10163F350);
  sub_100062734((unint64_t *)&qword_10163B7F0, (uint64_t *)&unk_10163F350);
  dispatch thunk of SetAlgebra.init<A>(_:)();
  OS_dispatch_queue.async(group:qos:flags:execute:)();
  _Block_release(v17);
  (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v8);
  (*(void (**)(char *, uint64_t))(v13 + 8))(v15, v12);
  return swift_release();
}

uint64_t sub_100A7B3A8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v7 = *v3;
  uint64_t v8 = type metadata accessor for DispatchPredicate();
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  uint64_t v11 = &v16[-((v10 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v12 = (void *)v3[2];
  *uint64_t v11 = v12;
  (*(void (**)(void *, void, uint64_t))(v9 + 104))(v11, enum case for DispatchPredicate.onQueue(_:), v8);
  id v13 = v12;
  LOBYTE(v12) = _dispatchPreconditionTest(_:)();
  uint64_t result = (*(uint64_t (**)(void *, uint64_t))(v9 + 8))(v11, v8);
  if (v12)
  {
    uint64_t v15 = type metadata accessor for Transaction();
    __chkstk_darwin(v15);
    *(void *)&v16[-48] = v3;
    *(void *)&v16[-40] = a1;
    *(void *)&v16[-32] = a2;
    *(void *)&v16[-24] = a3;
    *(void *)&v16[-16] = v7;
    return static Transaction.named<A>(_:with:)();
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_100A7B574(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v76 = a4;
  uint64_t v77 = a5;
  uint64_t v75 = a1;
  uint64_t v7 = sub_10000588C(&qword_10163C6C8);
  __chkstk_darwin(v7 - 8);
  uint64_t v9 = (char *)v53 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = sub_10000588C(&qword_101658128);
  uint64_t v78 = *(void *)(v10 - 8);
  __chkstk_darwin(v10);
  uint64_t v12 = (char *)v53 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = sub_10000588C(&qword_101658130);
  uint64_t v14 = *(void *)(v13 - 8);
  uint64_t v62 = v13;
  uint64_t v63 = v14;
  __chkstk_darwin(v13);
  uint64_t v54 = (char *)v53 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = sub_10000588C(&qword_101658138);
  uint64_t v65 = *(void *)(v16 - 8);
  uint64_t v66 = v16;
  __chkstk_darwin(v16);
  uint64_t v60 = (char *)v53 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v18 = sub_10000588C(&qword_101658140);
  uint64_t v67 = *(void *)(v18 - 8);
  uint64_t v68 = v18;
  __chkstk_darwin(v18);
  uint64_t v64 = (char *)v53 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v20 = sub_10000588C(&qword_101658148);
  uint64_t v70 = *(void *)(v20 - 8);
  uint64_t v71 = v20;
  __chkstk_darwin(v20);
  uint64_t v69 = (char *)v53 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v22 = sub_10000588C(&qword_101658150);
  uint64_t v73 = *(void *)(v22 - 8);
  uint64_t v74 = v22;
  __chkstk_darwin(v22);
  uint64_t v72 = (char *)v53 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  id v79 = (id)sub_10114218C();
  id v80 = *(id *)(a2 + 16);
  id v24 = v80;
  uint64_t v25 = type metadata accessor for OS_dispatch_queue.SchedulerOptions();
  uint64_t v26 = *(void *)(v25 - 8);
  unint64_t v27 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v26 + 56);
  uint64_t v59 = v25;
  uint64_t v57 = v27;
  uint64_t v56 = v26 + 56;
  ((void (*)(char *, uint64_t, uint64_t))v27)(v9, 1, 1);
  id v55 = v24;
  sub_10000588C(&qword_101657AE8);
  unint64_t v28 = sub_10000584C();
  sub_100062734((unint64_t *)&unk_101657AF0, &qword_101657AE8);
  uint64_t v29 = sub_100A872C8((unint64_t *)&qword_10166C020, (void (*)(uint64_t))sub_10000584C);
  unint64_t v58 = v28;
  v53[1] = v29;
  Publisher.receive<A>(on:options:)();
  sub_10001DAB4((uint64_t)v9, &qword_10163C6C8);

  swift_release();
  uint64_t v30 = swift_allocObject();
  *(void *)(v30 + 16) = a2;
  *(void *)(v30 + 24) = a3;
  uint64_t v31 = swift_allocObject();
  *(void *)(v31 + 16) = sub_100A86C60;
  *(void *)(v31 + 24) = v30;
  swift_retain();
  id v61 = a3;
  static Subscribers.Demand.unlimited.getter();
  sub_100062734(&qword_101658158, &qword_101658128);
  uint64_t v32 = v54;
  Publisher.flatMap<A, B>(maxPublishers:_:)();
  swift_release();
  (*(void (**)(char *, uint64_t))(v78 + 8))(v12, v10);
  uint64_t v33 = swift_allocObject();
  *(void *)(v33 + 16) = sub_100A86CB8;
  *(void *)(v33 + 24) = a2;
  uint64_t v78 = a2;
  swift_retain();
  static Subscribers.Demand.unlimited.getter();
  type metadata accessor for Peripheral();
  sub_10000588C((uint64_t *)&unk_101649C90);
  sub_100062734(&qword_101658160, &qword_101658130);
  uint64_t v34 = v60;
  sub_100062734((unint64_t *)&unk_101649CA0, (uint64_t *)&unk_101649C90);
  uint64_t v35 = v62;
  Publisher.flatMap<A, B>(maxPublishers:_:)();
  swift_release();
  (*(void (**)(char *, uint64_t))(v63 + 8))(v32, v35);
  if (qword_101636F40 != -1) {
    swift_once();
  }
  uint64_t v36 = type metadata accessor for OS_dispatch_queue.SchedulerTimeType.Stride();
  sub_100010324(v36, (uint64_t)qword_101657E18);
  uint64_t v37 = v55;
  id v79 = v55;
  v57(v9, 1, 1, v59);
  sub_100062734(&qword_101658168, &qword_101658138);
  id v38 = v37;
  unint64_t v39 = v64;
  uint64_t v40 = v66;
  Publisher.timeout<A>(_:scheduler:options:customError:)();
  sub_10001DAB4((uint64_t)v9, &qword_10163C6C8);

  (*(void (**)(char *, uint64_t))(v65 + 8))(v34, v40);
  sub_10000588C(&qword_101655B50);
  sub_100062734(&qword_101658170, &qword_101658140);
  uint64_t v41 = v68;
  uint64_t v42 = v69;
  Publisher.map<A>(_:)();
  (*(void (**)(char *, uint64_t))(v67 + 8))(v39, v41);
  sub_10000588C(&qword_10163C890);
  sub_100062734(&qword_101658178, &qword_101658148);
  sub_100062734(&qword_10163C8A0, &qword_10163C890);
  uint64_t v43 = v71;
  uint64_t v44 = v72;
  Publisher.catch<A>(_:)();
  (*(void (**)(char *, uint64_t))(v70 + 8))(v42, v43);
  uint64_t v45 = swift_allocObject();
  swift_weakInit();
  uint64_t v46 = (void *)swift_allocObject();
  uint64_t v48 = v75;
  uint64_t v47 = v76;
  v46[2] = v45;
  v46[3] = v48;
  uint64_t v49 = v61;
  v46[4] = v61;
  v46[5] = v47;
  v46[6] = v77;
  id v50 = v49;
  swift_retain();
  sub_1000BD0E8(v47);
  sub_100062734(&qword_101658180, &qword_101658150);
  uint64_t v51 = v74;
  Publisher<>.sink(receiveValue:)();
  swift_release();
  (*(void (**)(char *, uint64_t))(v73 + 8))(v44, v51);
  swift_beginAccess();
  AnyCancellable.store(in:)();
  swift_endAccess();
  return swift_release();
}

void sub_100A7C00C(uint64_t a1, uint64_t a2, uint64_t a3, void *a4, uint64_t a5, uint64_t a6)
{
  uint64_t v49 = a6;
  uint64_t v48 = a5;
  uint64_t v55 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v54 = *(void *)(v55 - 8);
  __chkstk_darwin(v55);
  uint64_t v51 = (char *)v47 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v53 = type metadata accessor for DispatchQoS();
  uint64_t v52 = *(void *)(v53 - 8);
  __chkstk_darwin(v53);
  id v50 = (char *)v47 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = type metadata accessor for DispatchQoS.QoSClass();
  uint64_t v11 = *(void *)(v10 - 8);
  __chkstk_darwin(v10);
  uint64_t v13 = (char *)v47 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = type metadata accessor for UUID();
  uint64_t v15 = *(void *)(v14 - 8);
  __chkstk_darwin(v14);
  uint64_t v17 = (char *)v47 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_beginAccess();
  uint64_t Strong = swift_weakLoadStrong();
  if (Strong)
  {
    Transaction.capture()();
    sub_10001D074(a1, (uint64_t)v66, &qword_101655B50);
    if ((v67 & 1) == 0)
    {

      v47[1] = static os_log_type_t.default.getter();
      if (qword_101637308 != -1) {
        swift_once();
      }
      sub_10000588C((uint64_t *)&unk_10163AD00);
      uint64_t v29 = swift_allocObject();
      *(_OWORD *)(v29 + 16) = xmmword_101342130;
      id v30 = [a4 identifier];
      static UUID._unconditionallyBridgeFromObjectiveC(_:)();

      uint64_t v31 = UUID.uuidString.getter();
      uint64_t v33 = v32;
      (*(void (**)(char *, uint64_t))(v15 + 8))(v17, v14);
      *(void *)(v29 + 56) = &type metadata for String;
      *(void *)(v29 + 64) = sub_10000B4CC();
      *(void *)(v29 + 32) = v31;
      *(void *)(v29 + 40) = v33;
      os_log(_:dso:log:_:_:)();
      swift_bridgeObjectRelease();
      sub_10000584C();
      (*(void (**)(char *, void, uint64_t))(v11 + 104))(v13, enum case for DispatchQoS.QoSClass.default(_:), v10);
      uint64_t v34 = (void *)static OS_dispatch_queue.global(qos:)();
      (*(void (**)(char *, uint64_t))(v11 + 8))(v13, v10);
      uint64_t v35 = swift_allocObject();
      uint64_t v36 = v48;
      uint64_t v37 = v49;
      *(void *)(v35 + 16) = v48;
      *(void *)(v35 + 24) = v37;
      uint64_t v62 = sub_100A86EB4;
      uint64_t v63 = v35;
      long long aBlock = _NSConcreteStackBlock;
      uint64_t v59 = 1107296256;
      uint64_t v60 = sub_1004B5480;
      id v61 = &unk_1015E65F0;
      id v38 = _Block_copy(&aBlock);
      sub_1000BD0E8(v36);
      unint64_t v39 = v50;
      static DispatchQoS.unspecified.getter();
      v65[0] = _swiftEmptyArrayStorage;
      sub_100A872C8((unint64_t *)&qword_10163B7E0, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
      sub_10000588C((uint64_t *)&unk_10163F350);
      sub_100062734((unint64_t *)&qword_10163B7F0, (uint64_t *)&unk_10163F350);
      uint64_t v40 = v51;
      uint64_t v11 = v55;
      dispatch thunk of SetAlgebra.init<A>(_:)();
      OS_dispatch_queue.async(group:qos:flags:execute:)();
      _Block_release(v38);

      (*(void (**)(char *, uint64_t))(v54 + 8))(v40, v11);
      (*(void (**)(char *, uint64_t))(v52 + 8))(v39, v53);
      goto LABEL_8;
    }
    sub_10006105C((uint64_t)v66, (uint64_t)v65);
    static os_log_type_t.error.getter();
    if (qword_101637308 != -1) {
      goto LABEL_12;
    }
    while (1)
    {
      sub_10000588C((uint64_t *)&unk_10163AD00);
      uint64_t v18 = swift_allocObject();
      *(_OWORD *)(v18 + 16) = xmmword_101342130;
      uint64_t v19 = sub_101321420();
      uint64_t v21 = v20;
      *(void *)(v18 + 56) = &type metadata for String;
      *(void *)(v18 + 64) = sub_10000B4CC();
      *(void *)(v18 + 32) = v19;
      *(void *)(v18 + 40) = v21;
      os_log(_:dso:log:_:_:)();
      swift_bridgeObjectRelease();
      sub_10000584C();
      (*(void (**)(char *, void, uint64_t))(v11 + 104))(v13, enum case for DispatchQoS.QoSClass.default(_:), v10);
      uint64_t v22 = (void *)static OS_dispatch_queue.global(qos:)();
      (*(void (**)(char *, uint64_t))(v11 + 8))(v13, v10);
      sub_1000610B8((uint64_t)v65, (uint64_t)v64);
      uint64_t v23 = swift_allocObject();
      uint64_t v24 = v48;
      uint64_t v25 = v49;
      *(void *)(v23 + 16) = v48;
      *(void *)(v23 + 24) = v25;
      sub_10006105C((uint64_t)v64, v23 + 32);
      uint64_t v62 = sub_100A86E68;
      uint64_t v63 = v23;
      long long aBlock = _NSConcreteStackBlock;
      uint64_t v59 = 1107296256;
      uint64_t v60 = sub_1004B5480;
      id v61 = &unk_1015E65A0;
      uint64_t v26 = _Block_copy(&aBlock);
      sub_1000BD0E8(v24);
      unint64_t v27 = v50;
      static DispatchQoS.unspecified.getter();
      uint64_t v57 = _swiftEmptyArrayStorage;
      sub_100A872C8((unint64_t *)&qword_10163B7E0, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
      sub_10000588C((uint64_t *)&unk_10163F350);
      sub_100062734((unint64_t *)&qword_10163B7F0, (uint64_t *)&unk_10163F350);
      unint64_t v28 = v51;
      uint64_t v11 = v55;
      dispatch thunk of SetAlgebra.init<A>(_:)();
      OS_dispatch_queue.async(group:qos:flags:execute:)();
      _Block_release(v26);

      (*(void (**)(char *, uint64_t))(v54 + 8))(v28, v11);
      (*(void (**)(char *, uint64_t))(v52 + 8))(v27, v53);
      sub_100061288((uint64_t)v65);
LABEL_8:
      uint64_t v41 = swift_release();
      uint64_t v42 = *(unsigned char **)(Strong + 32);
      if (v42[OBJC_IVAR____TtC12searchpartyd14CentralManager_isSharedPairingAgent] == 1) {
        break;
      }
      __break(1u);
LABEL_12:
      swift_once();
    }
    uint64_t v43 = *(void **)(Strong + 64);
    __chkstk_darwin(v41);
    *(void *)&v47[-4] = v42;
    type metadata accessor for SharedPairingAgent();
    uint64_t v44 = v42;
    id v45 = v43;
    Lock.callAsFunction<A>(_:)();
    uint64_t v46 = aBlock;
    sub_101070634(v45);
    swift_release();
  }
}

uint64_t sub_100A7CA00(uint64_t result, uint64_t a2, uint64_t a3)
{
  if (result)
  {
    uint64_t v4 = (void (*)(uint64_t))result;
    sub_100061234();
    uint64_t v5 = swift_allocError();
    sub_1000610B8(a3, v6);
    v4(v5);
    return swift_errorRelease();
  }
  return result;
}

uint64_t sub_100A7CA80(void *a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = type metadata accessor for UUID();
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v7 = v30 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0) + 40;
  uint64_t v8 = type metadata accessor for DispatchPredicate();
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  uint64_t v11 = v30 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0) + 40;
  uint64_t v12 = *(void **)(v2 + 16);
  *uint64_t v11 = v12;
  (*(void (**)(void *, void, uint64_t))(v9 + 104))(v11, enum case for DispatchPredicate.onQueue(_:), v8);
  id v13 = v12;
  LOBYTE(v12) = _dispatchPreconditionTest(_:)();
  (*(void (**)(void *, uint64_t))(v9 + 8))(v11, v8);
  if (v12)
  {
    static os_log_type_t.default.getter();
    if (qword_101637308 == -1) {
      goto LABEL_3;
    }
  }
  else
  {
    __break(1u);
  }
  swift_once();
LABEL_3:
  sub_10000588C((uint64_t *)&unk_10163AD00);
  uint64_t v14 = swift_allocObject();
  *(_OWORD *)(v14 + 16) = xmmword_101342130;
  id v15 = [a1 identifier];
  static UUID._unconditionallyBridgeFromObjectiveC(_:)();

  uint64_t v16 = UUID.uuidString.getter();
  uint64_t v18 = v17;
  (*(void (**)(unsigned char *, uint64_t))(v5 + 8))(v7, v4);
  *(void *)(v14 + 56) = &type metadata for String;
  *(void *)(v14 + 64) = sub_10000B4CC();
  *(void *)(v14 + 32) = v16;
  *(void *)(v14 + 40) = v18;
  os_log(_:dso:log:_:_:)();
  swift_bridgeObjectRelease();
  sub_1009DC7CC();
  BinaryDecodable.init(data:)();
  uint64_t v33 = 1;
  long long v34 = 0u;
  long long v35 = 0u;
  long long v36 = 0u;
  long long v37 = 0u;
  uint64_t v38 = 0x2000000000000000;
  uint64_t v19 = *(void *)(v2 + 64);
  uint64_t v31 = &type metadata for BAServiceIdentifier;
  uint64_t v32 = &off_1015CE038;
  v30[0] = 1;
  uint64_t v20 = (uint64_t *)(v19 + OBJC_IVAR____TtC12searchpartyd10Peripheral_services);
  uint64_t v21 = swift_beginAccess();
  uint64_t v22 = *v20;
  __chkstk_darwin(v21);
  *(&v29 - 2) = (uint64_t)v30;
  swift_bridgeObjectRetain();
  uint64_t v23 = sub_100E4E988((uint64_t (*)(uint64_t *))sub_100158AAC, (uint64_t)(&v29 - 4), v22);
  swift_bridgeObjectRelease();
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)v30);
  if (!v23)
  {
LABEL_7:
    static os_log_type_t.error.getter();
    os_log(_:dso:log:_:_:)();
    sub_10000588C(&qword_101657AE8);
    swift_allocObject();
    return Future.init(_:)();
  }
  uint64_t v31 = &type metadata for BACharacteristicIdentifier.FindMy;
  uint64_t v32 = &off_1015CE018;
  v30[0] = 1;
  uint64_t v24 = swift_beginAccess();
  uint64_t v25 = *(void *)(v23 + 40);
  __chkstk_darwin(v24);
  *(&v29 - 2) = (uint64_t)v30;
  swift_bridgeObjectRetain();
  uint64_t v26 = sub_100E4E9E4((uint64_t (*)(uint64_t *))sub_100158ACC, (uint64_t)(&v29 - 4), v25);
  swift_bridgeObjectRelease();
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)v30);
  if (!v26)
  {
    swift_release();
    goto LABEL_7;
  }
  uint64_t v27 = sub_100A7FFF8((uint64_t)&v33, v26);
  swift_release();
  swift_release();
  return v27;
}

uint64_t sub_100A7CFB8(void (*a1)(_OWORD *))
{
  uint64_t v3 = 0;
  memset(v2, 0, sizeof(v2));
  __int16 v4 = 267;
  a1(v2);
  return sub_10001DAB4((uint64_t)v2, &qword_10163C5F8);
}

uint64_t sub_100A7D014(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v9 = *v4;
  uint64_t v10 = type metadata accessor for DispatchPredicate();
  uint64_t v11 = *(void *)(v10 - 8);
  __chkstk_darwin(v10);
  id v13 = &v18[-((v12 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v14 = (void *)v4[2];
  *id v13 = v14;
  (*(void (**)(void *, void, uint64_t))(v11 + 104))(v13, enum case for DispatchPredicate.onQueue(_:), v10);
  id v15 = v14;
  LOBYTE(v14) = _dispatchPreconditionTest(_:)();
  uint64_t result = (*(uint64_t (**)(void *, uint64_t))(v11 + 8))(v13, v10);
  if (v14)
  {
    uint64_t v17 = type metadata accessor for Transaction();
    __chkstk_darwin(v17);
    *(void *)&v18[-48] = a1;
    *(void *)&v18[-40] = v4;
    *(void *)&v18[-32] = a2;
    *(void *)&v18[-24] = a3;
    *(void *)&v18[-16] = a4;
    *(void *)&v18[-8] = v9;
    return static Transaction.named<A>(_:with:)();
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_100A7D1E4(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v76 = a6;
  uint64_t v74 = a5;
  uint64_t v60 = a4;
  uint64_t v75 = a1;
  uint64_t v8 = sub_10000588C(&qword_10163C6C8);
  __chkstk_darwin(v8 - 8);
  uint64_t v10 = (char *)v54 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = sub_10000588C(&qword_10163C6D0);
  uint64_t v12 = *(void *)(v11 - 8);
  uint64_t v61 = v11;
  uint64_t v62 = v12;
  __chkstk_darwin(v11);
  uint64_t v14 = (char *)v54 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = sub_10000588C(&qword_1016580E8);
  uint64_t v64 = *(void *)(v15 - 8);
  uint64_t v65 = v15;
  __chkstk_darwin(v15);
  uint64_t v59 = (char *)v54 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v17 = sub_10000588C(&qword_1016580F0);
  uint64_t v66 = *(void *)(v17 - 8);
  uint64_t v67 = v17;
  __chkstk_darwin(v17);
  uint64_t v63 = (char *)v54 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v19 = sub_10000588C(&qword_1016580F8);
  uint64_t v69 = *(void *)(v19 - 8);
  uint64_t v70 = v19;
  __chkstk_darwin(v19);
  uint64_t v68 = (char *)v54 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v21 = sub_10000588C(&qword_101658100);
  uint64_t v72 = *(void *)(v21 - 8);
  uint64_t v73 = v21;
  __chkstk_darwin(v21);
  uint64_t v71 = (char *)v54 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  id v23 = [a2 discoveredMetadata];
  id v24 = [v23 manufacturerName];

  static String._unconditionallyBridgeFromObjectiveC(_:)();
  Swift::String v25 = String.lowercased()();
  swift_bridgeObjectRelease();
  Swift::String v80 = v25;
  uint64_t v78 = 0x6C6F6F747073;
  unint64_t v79 = 0xE600000000000000;
  sub_1000336D4();
  char v26 = StringProtocol.contains<A>(_:)();
  swift_bridgeObjectRelease();
  v80._countAndFlagsBits = sub_101320FA8(v26 & 1, *(char **)(a3 + 64));
  uint64_t v78 = *(void *)(a3 + 16);
  id v27 = (id)v78;
  uint64_t v28 = type metadata accessor for OS_dispatch_queue.SchedulerOptions();
  uint64_t v29 = *(void *)(v28 - 8);
  uint64_t v57 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v29 + 56);
  uint64_t v56 = v29 + 56;
  v57(v10, 1, 1, v28);
  id v55 = v27;
  sub_10000588C(&qword_10163C5E8);
  unint64_t v30 = sub_10000584C();
  sub_100062734(&qword_10163C5F0, &qword_10163C5E8);
  uint64_t v31 = sub_100A872C8((unint64_t *)&qword_10166C020, (void (*)(uint64_t))sub_10000584C);
  unint64_t v58 = v30;
  v54[1] = v31;
  Publisher.receive<A>(on:options:)();
  sub_10001DAB4((uint64_t)v10, &qword_10163C6C8);

  swift_release();
  uint64_t v32 = (void *)swift_allocObject();
  v32[2] = a3;
  v32[3] = a2;
  v32[4] = v60;
  uint64_t v77 = a3;
  swift_retain();
  id v33 = a2;
  swift_retain();
  static Subscribers.Demand.unlimited.getter();
  sub_10000588C(&qword_101657AE8);
  sub_100062734(&qword_10163C6F8, &qword_10163C6D0);
  sub_100062734((unint64_t *)&unk_101657AF0, &qword_101657AE8);
  long long v34 = v59;
  uint64_t v35 = v61;
  Publisher.flatMap<A, B>(maxPublishers:_:)();
  swift_release();
  (*(void (**)(char *, uint64_t))(v62 + 8))(v14, v35);
  if (qword_101636F40 != -1) {
    swift_once();
  }
  uint64_t v36 = type metadata accessor for OS_dispatch_queue.SchedulerTimeType.Stride();
  sub_100010324(v36, (uint64_t)qword_101657E18);
  long long v37 = v55;
  v80._countAndFlagsBits = (uint64_t)v55;
  v57(v10, 1, 1, v28);
  sub_100062734(&qword_101658108, &qword_1016580E8);
  id v38 = v37;
  unint64_t v39 = v63;
  uint64_t v40 = v65;
  Publisher.timeout<A>(_:scheduler:options:customError:)();
  sub_10001DAB4((uint64_t)v10, &qword_10163C6C8);

  (*(void (**)(char *, uint64_t))(v64 + 8))(v34, v40);
  sub_10000588C(&qword_10163C5F8);
  sub_100062734(&qword_101658110, &qword_1016580F0);
  uint64_t v41 = v67;
  uint64_t v42 = v68;
  Publisher.map<A>(_:)();
  (*(void (**)(char *, uint64_t))(v66 + 8))(v39, v41);
  sub_10000588C(&qword_10164AC38);
  sub_100062734(&qword_101658118, &qword_1016580F8);
  sub_100062734(&qword_10164AC48, &qword_10164AC38);
  uint64_t v43 = v70;
  uint64_t v44 = v71;
  Publisher.catch<A>(_:)();
  (*(void (**)(char *, uint64_t))(v69 + 8))(v42, v43);
  uint64_t v45 = swift_allocObject();
  uint64_t v46 = v77;
  swift_weakInit();
  uint64_t v47 = (void *)swift_allocObject();
  uint64_t v48 = v74;
  uint64_t v49 = v75;
  _DWORD v47[2] = v45;
  v47[3] = v49;
  uint64_t v50 = v76;
  v47[4] = v48;
  v47[5] = v50;
  sub_100062734(&qword_101658120, &qword_101658100);
  swift_retain();
  swift_retain();
  uint64_t v51 = v73;
  uint64_t v52 = Publisher<>.sink(receiveValue:)();
  swift_release();
  (*(void (**)(char *, uint64_t))(v72 + 8))(v44, v51);
  *(void *)(v46 + 96) = v52;
  return swift_release();
}

uint64_t sub_100A7DB84@<X0>(void *a1@<X2>, uint64_t a2@<X3>, uint64_t *a3@<X8>)
{
  sub_100A82A8C(a1, (uint64_t)v7);
  uint64_t v5 = sub_100A827A4((uint64_t)v7, a2);
  uint64_t result = sub_10001DAB4((uint64_t)v7, &qword_101658070);
  *a3 = v5;
  return result;
}

uint64_t sub_100A7DBEC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v30 = a5;
  uint64_t v29 = a4;
  uint64_t v6 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  uint64_t v9 = (char *)v26 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v32 = type metadata accessor for DispatchQoS();
  uint64_t v31 = *(void *)(v32 - 8);
  __chkstk_darwin(v32);
  uint64_t v11 = (char *)v26 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = type metadata accessor for DispatchQoS.QoSClass();
  uint64_t v13 = *(void *)(v12 - 8);
  __chkstk_darwin(v12);
  uint64_t v15 = (char *)v26 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_beginAccess();
  uint64_t result = swift_weakLoadStrong();
  if (result)
  {
    Transaction.capture()();
    sub_10001D074(a1, (uint64_t)v37, &qword_10163C5F8);
    if (v37[41])
    {
      uint64_t v27 = v7;
      uint64_t v28 = v6;
      sub_10006105C((uint64_t)v37, (uint64_t)v36);
      v26[1] = static os_log_type_t.error.getter();
      if (qword_101637308 != -1) {
        swift_once();
      }
      sub_10000588C((uint64_t *)&unk_10163AD00);
      uint64_t v17 = swift_allocObject();
      *(_OWORD *)(v17 + 16) = xmmword_101342130;
      uint64_t v18 = sub_101321420();
      uint64_t v20 = v19;
      *(void *)(v17 + 56) = &type metadata for String;
      *(void *)(v17 + 64) = sub_10000B4CC();
      *(void *)(v17 + 32) = v18;
      *(void *)(v17 + 40) = v20;
      os_log(_:dso:log:_:_:)();
      swift_bridgeObjectRelease();
      sub_100A7F0FC(1);
      sub_10000584C();
      (*(void (**)(char *, void, uint64_t))(v13 + 104))(v15, enum case for DispatchQoS.QoSClass.default(_:), v12);
      uint64_t v21 = (void *)static OS_dispatch_queue.global(qos:)();
      (*(void (**)(char *, uint64_t))(v13 + 8))(v15, v12);
      sub_1000610B8((uint64_t)v36, (uint64_t)v35);
      uint64_t v22 = swift_allocObject();
      uint64_t v23 = v30;
      *(void *)(v22 + 16) = v29;
      *(void *)(v22 + 24) = v23;
      sub_10006105C((uint64_t)v35, v22 + 32);
      aBlock[4] = sub_100A86C2C;
      aBlock[5] = v22;
      aBlock[0] = _NSConcreteStackBlock;
      aBlock[1] = 1107296256;
      aBlock[2] = sub_1004B5480;
      aBlock[3] = &unk_1015E64B0;
      id v24 = _Block_copy(aBlock);
      swift_retain();
      static DispatchQoS.unspecified.getter();
      id v33 = _swiftEmptyArrayStorage;
      sub_100A872C8((unint64_t *)&qword_10163B7E0, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
      sub_10000588C((uint64_t *)&unk_10163F350);
      sub_100062734((unint64_t *)&qword_10163B7F0, (uint64_t *)&unk_10163F350);
      uint64_t v25 = v28;
      dispatch thunk of SetAlgebra.init<A>(_:)();
      OS_dispatch_queue.async(group:qos:flags:execute:)();
      swift_release();
      _Block_release(v24);

      (*(void (**)(char *, uint64_t))(v27 + 8))(v9, v25);
      (*(void (**)(char *, uint64_t))(v31 + 8))(v11, v32);
      sub_100061288((uint64_t)v36);
    }
    else
    {
      static os_log_type_t.default.getter();
      if (qword_101637308 != -1) {
        swift_once();
      }
      os_log(_:dso:log:_:_:)();
    }
    return swift_release();
  }
  return result;
}

uint64_t sub_100A7E1C0(void (*a1)(uint64_t), uint64_t a2, uint64_t a3)
{
  sub_100061234();
  uint64_t v5 = swift_allocError();
  sub_1000610B8(a3, v6);
  a1(v5);

  return swift_errorRelease();
}

uint64_t sub_100A7E238(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v9 = *v4;
  uint64_t v10 = type metadata accessor for DispatchPredicate();
  uint64_t v11 = *(void *)(v10 - 8);
  __chkstk_darwin(v10);
  uint64_t v13 = &v18[-((v12 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v14 = (void *)v4[2];
  *uint64_t v13 = v14;
  (*(void (**)(void *, void, uint64_t))(v11 + 104))(v13, enum case for DispatchPredicate.onQueue(_:), v10);
  id v15 = v14;
  LOBYTE(v14) = _dispatchPreconditionTest(_:)();
  uint64_t result = (*(uint64_t (**)(void *, uint64_t))(v11 + 8))(v13, v10);
  if (v14)
  {
    uint64_t v17 = type metadata accessor for Transaction();
    __chkstk_darwin(v17);
    *(void *)&v18[-48] = v4;
    *(void *)&v18[-40] = a2;
    *(void *)&v18[-32] = a1;
    *(void *)&v18[-24] = a3;
    *(void *)&v18[-16] = a4;
    *(void *)&v18[-8] = v9;
    return static Transaction.named<A>(_:with:)();
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_100A7E408(uint64_t a1, uint64_t a2, uint64_t a3, void *a4, uint64_t a5, uint64_t a6)
{
  uint64_t v100 = a2;
  uint64_t v96 = a1;
  uint64_t v97 = a6;
  uint64_t v95 = a5;
  id v85 = a4;
  uint64_t v7 = sub_10000588C(&qword_10163C6C8);
  __chkstk_darwin(v7 - 8);
  uint64_t v98 = (char *)v67 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v81 = sub_10000588C(&qword_10163C738);
  uint64_t v80 = *(void *)(v81 - 8);
  __chkstk_darwin(v81);
  unint64_t v79 = (char *)v67 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = sub_10000588C(&qword_10163C740);
  uint64_t v83 = *(void *)(v10 - 8);
  uint64_t v84 = v10;
  __chkstk_darwin(v10);
  uint64_t v82 = (char *)v67 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = sub_10000588C(&qword_101658098);
  uint64_t v88 = *(void *)(v12 - 8);
  uint64_t v89 = v12;
  __chkstk_darwin(v12);
  uint64_t v87 = (char *)v67 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = sub_10000588C(&qword_1016580A0);
  uint64_t v90 = *(void *)(v14 - 8);
  uint64_t v91 = v14;
  __chkstk_darwin(v14);
  v86 = (char *)v67 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = sub_10000588C(&qword_1016580A8);
  uint64_t v93 = *(void *)(v16 - 8);
  __chkstk_darwin(v16);
  uint64_t v18 = (char *)v67 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v19 = sub_10000588C(&qword_1016580B0);
  uint64_t v94 = *(void *)(v19 - 8);
  __chkstk_darwin(v19);
  uint64_t v21 = (char *)v67 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v22 = sub_10000588C(&qword_1016580B8);
  uint64_t v23 = *(void *)(v22 - 8);
  __chkstk_darwin(v22);
  uint64_t v25 = (char *)v67 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v26 = sub_10000588C((uint64_t *)&unk_101649D00);
  uint64_t v92 = a3;
  uint64_t v78 = (char *)&type metadata for () + 8;
  unint64_t v77 = v26;
  uint64_t v27 = v99;
  OSAllocatedUnfairLock.callAsFunction<A>(_:)();
  if (v27)
  {
    swift_errorRelease();
    uint64_t v28 = 0;
    uint64_t v29 = v100;
  }
  else
  {
    uint64_t v70 = v18;
    uint64_t v71 = v16;
    uint64_t v72 = v21;
    uint64_t v73 = v19;
    uint64_t v74 = 0;
    uint64_t v75 = v25;
    uint64_t v76 = v23;
    uint64_t v99 = v22;
    uint64_t v29 = v100;
    id v101 = *(id *)(v100 + 16);
    id v30 = v101;
    uint64_t v31 = type metadata accessor for OS_dispatch_queue.SchedulerOptions();
    uint64_t v32 = *(void *)(v31 - 8);
    id v33 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v32 + 56);
    uint64_t v34 = (uint64_t)v98;
    uint64_t v69 = v31;
    uint64_t v68 = v33;
    v67[2] = v32 + 56;
    ((void (*)(char *, uint64_t, uint64_t))v33)(v98, 1, 1);
    unint64_t v35 = sub_10000584C();
    sub_100062734(&qword_101649D10, (uint64_t *)&unk_101649D00);
    uint64_t v36 = sub_100A872C8((unint64_t *)&qword_10166C020, (void (*)(uint64_t))sub_10000584C);
    v67[0] = v30;
    long long v37 = v79;
    unint64_t v77 = v35;
    v67[1] = v36;
    Publisher.receive<A>(on:options:)();
    sub_10001DAB4(v34, &qword_10163C6C8);

    swift_release();
    swift_retain();
    static Subscribers.Demand.unlimited.getter();
    sub_10000588C(&qword_101639B58);
    sub_10000588C(&qword_10163C628);
    sub_100062734(&qword_10163C778, &qword_10163C738);
    sub_100062734(&qword_10163C780, &qword_10163C628);
    uint64_t v38 = v81;
    unint64_t v39 = v82;
    Publisher.flatMap<A, B>(maxPublishers:_:)();
    swift_release();
    (*(void (**)(char *, uint64_t))(v80 + 8))(v37, v38);
    uint64_t v40 = swift_allocObject();
    uint64_t v41 = v85;
    *(void *)(v40 + 16) = v29;
    *(void *)(v40 + 24) = v41;
    swift_retain();
    id v85 = v41;
    sub_10000588C(&qword_101658070);
    sub_100062734(&qword_10163C788, &qword_10163C740);
    uint64_t v42 = v87;
    uint64_t v43 = v84;
    Publisher.map<A>(_:)();
    swift_release();
    (*(void (**)(char *, uint64_t))(v83 + 8))(v39, v43);
    uint64_t v44 = swift_allocObject();
    uint64_t v45 = v92;
    *(void *)(v44 + 16) = v29;
    *(void *)(v44 + 24) = v45;
    swift_retain();
    swift_retain();
    static Subscribers.Demand.unlimited.getter();
    sub_10000588C(&qword_101657AE8);
    sub_100062734(&qword_1016580C0, &qword_101658098);
    sub_100062734((unint64_t *)&unk_101657AF0, &qword_101657AE8);
    uint64_t v46 = v86;
    uint64_t v47 = v89;
    Publisher.flatMap<A, B>(maxPublishers:_:)();
    swift_release();
    (*(void (**)(char *, uint64_t))(v88 + 8))(v42, v47);
    if (qword_101636F38 != -1) {
      swift_once();
    }
    uint64_t v48 = type metadata accessor for OS_dispatch_queue.SchedulerTimeType.Stride();
    sub_100010324(v48, (uint64_t)qword_101657E00);
    uint64_t v49 = (void *)v67[0];
    id v102 = (id)v67[0];
    uint64_t v50 = (uint64_t)v98;
    v68(v98, 1, 1, v69);
    sub_100062734(&qword_1016580C8, &qword_1016580A0);
    id v51 = v49;
    uint64_t v52 = v70;
    uint64_t v53 = v91;
    Publisher.timeout<A>(_:scheduler:options:customError:)();
    sub_10001DAB4(v50, &qword_10163C6C8);

    (*(void (**)(char *, uint64_t))(v90 + 8))(v46, v53);
    sub_10000588C(&qword_10163C5F8);
    sub_100062734(&qword_1016580D0, &qword_1016580A8);
    uint64_t v54 = v72;
    uint64_t v55 = v71;
    Publisher.map<A>(_:)();
    (*(void (**)(char *, uint64_t))(v93 + 8))(v52, v55);
    sub_10000588C(&qword_10164AC38);
    sub_100062734(&qword_1016580D8, &qword_1016580B0);
    sub_100062734(&qword_10164AC48, &qword_10164AC38);
    uint64_t v56 = v75;
    uint64_t v57 = v73;
    Publisher.catch<A>(_:)();
    (*(void (**)(char *, uint64_t))(v94 + 8))(v54, v57);
    uint64_t v58 = swift_allocObject();
    swift_weakInit();
    uint64_t v59 = (void *)swift_allocObject();
    uint64_t v60 = v95;
    uint64_t v61 = v96;
    v59[2] = v58;
    v59[3] = v61;
    uint64_t v62 = v85;
    v59[4] = v85;
    v59[5] = v45;
    uint64_t v63 = v97;
    v59[6] = v60;
    v59[7] = v63;
    sub_100062734(&qword_1016580E0, &qword_1016580B8);
    id v64 = v62;
    swift_retain();
    swift_retain();
    swift_retain();
    uint64_t v65 = v99;
    uint64_t v28 = Publisher<>.sink(receiveValue:)();
    swift_release();
    (*(void (**)(char *, uint64_t))(v76 + 8))(v56, v65);
  }
  *(void *)(v29 + 88) = v28;
  return swift_release();
}

uint64_t sub_100A7F068(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  swift_beginAccess();
  uint64_t result = swift_weakLoadStrong();
  if (result)
  {
    Transaction.capture()();
    sub_100A85574(a1, a5, a6, a7);
    return swift_release();
  }
  return result;
}

void sub_100A7F0FC(char a1)
{
  v1[11] = 0;
  swift_release();
  v1[12] = 0;
  uint64_t v3 = swift_release();
  if (a1)
  {
    if (*(unsigned char *)(v1[4] + OBJC_IVAR____TtC12searchpartyd14CentralManager_isSharedPairingAgent) == 1)
    {
      __int16 v4 = (void *)v1[8];
      __chkstk_darwin(v3);
      type metadata accessor for SharedPairingAgent();
      Lock.callAsFunction<A>(_:)();
      sub_101070634(v4);
    }
    else
    {
      __break(1u);
    }
  }
}

uint64_t sub_100A7F1E0(uint64_t a1, unint64_t a2)
{
  uint64_t v5 = type metadata accessor for DispatchPredicate();
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v8 = (uint64_t *)((char *)&v19 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v9 = *(void **)(v2 + 16);
  *uint64_t v8 = v9;
  (*(void (**)(void *, void, uint64_t))(v6 + 104))(v8, enum case for DispatchPredicate.onQueue(_:), v5);
  id v10 = v9;
  LOBYTE(v9) = _dispatchPreconditionTest(_:)();
  (*(void (**)(void *, uint64_t))(v6 + 8))(v8, v5);
  if ((v9 & 1) == 0)
  {
    __break(1u);
    goto LABEL_10;
  }
  static os_log_type_t.debug.getter();
  if (qword_101637308 != -1) {
LABEL_10:
  }
    swift_once();
  sub_10000588C((uint64_t *)&unk_10163AD00);
  uint64_t v11 = swift_allocObject();
  *(_OWORD *)(v11 + 16) = xmmword_101342130;
  uint64_t v12 = 0;
  switch(a2 >> 62)
  {
    case 1uLL:
      LODWORD(v12) = HIDWORD(a1) - a1;
      if (__OFSUB__(HIDWORD(a1), a1))
      {
        __break(1u);
LABEL_12:
        __break(1u);
        JUMPOUT(0x100A7F48CLL);
      }
      uint64_t v12 = (int)v12;
LABEL_8:
      *(void *)(v11 + 56) = &type metadata for Int;
      *(void *)(v11 + 64) = &protocol witness table for Int;
      *(void *)(v11 + 32) = v12;
      os_log(_:dso:log:_:_:)();
      swift_bridgeObjectRelease();
      uint64_t v16 = swift_allocObject();
      swift_weakInit();
      uint64_t v17 = (void *)swift_allocObject();
      v17[2] = v16;
      v17[3] = a1;
      v17[4] = a2;
      sub_10000588C(&qword_10163C628);
      swift_allocObject();
      sub_1000361E0(a1, a2);
      return Future.init(_:)();
    case 2uLL:
      uint64_t v14 = *(void *)(a1 + 16);
      uint64_t v13 = *(void *)(a1 + 24);
      BOOL v15 = __OFSUB__(v13, v14);
      uint64_t v12 = v13 - v14;
      if (!v15) {
        goto LABEL_8;
      }
      goto LABEL_12;
    case 3uLL:
      goto LABEL_8;
    default:
      uint64_t v12 = BYTE6(a2);
      goto LABEL_8;
  }
}

uint64_t sub_100A7F49C(void (*a1)(long long *), uint64_t a2, uint64_t a3, uint64_t a4, unint64_t a5)
{
  uint64_t v9 = type metadata accessor for BinaryDecodingError();
  uint64_t v93 = *(void *)(v9 - 8);
  __chkstk_darwin(v9);
  uint64_t v96 = (uint64_t)&v81 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = type metadata accessor for BinaryDecoder();
  uint64_t v12 = *(void *)(v11 - 8);
  __chkstk_darwin(v11);
  uint64_t v89 = (char *)&v81 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = sub_10000588C(&qword_10163C630);
  __chkstk_darwin(v14 - 8);
  uint64_t v92 = (uint64_t)&v81 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = type metadata accessor for Bit();
  uint64_t v17 = *(void *)(v16 - 8);
  uint64_t v94 = v16;
  uint64_t v95 = v17;
  uint64_t v18 = __chkstk_darwin(v16);
  uint64_t v90 = (char *)&v81 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v18);
  uint64_t v21 = (char *)&v81 - v20;
  swift_beginAccess();
  uint64_t Strong = swift_weakLoadStrong();
  if (!Strong)
  {
    unint64_t v99 = 0;
    long long v97 = 0u;
    long long v98 = 0u;
    LOBYTE(v100) = 11;
    LOBYTE(v101) = 1;
    a1(&v97);
    return sub_10001DAB4((uint64_t)&v97, &qword_10163C638);
  }
  uint64_t v23 = Strong;
  uint64_t v83 = v21;
  uint64_t v81 = v12;
  uint64_t v82 = v11;
  uint64_t v91 = v9;
  uint64_t v87 = a2;
  uint64_t v88 = a1;
  uint64_t v24 = *(void *)(Strong + 120);
  unint64_t v25 = *(void *)(Strong + 128);
  if (v25 >> 60 == 15) {
    uint64_t v26 = 0;
  }
  else {
    uint64_t v26 = *(void *)(Strong + 120);
  }
  unint64_t v27 = 0xC000000000000000;
  if (v25 >> 60 != 15) {
    unint64_t v27 = *(void *)(Strong + 128);
  }
  uint64_t v106 = v26;
  unint64_t v107 = v27;
  sub_1000361E0(a4, a5);
  sub_100037A38(v24, v25);
  sub_100EFD6B8(1, a4, a5, (uint64_t *)&v97);
  long long v28 = v97;
  unint64_t v29 = a5;
  Data.append(_:)();
  sub_10001CFB8(v28, *((unint64_t *)&v28 + 1));
  uint64_t v30 = v106;
  unint64_t v31 = v107;
  uint64_t v33 = *(void *)(v23 + 120);
  unint64_t v32 = *(void *)(v23 + 128);
  *(void *)(v23 + 120) = v106;
  *(void *)(v23 + 128) = v31;
  sub_1000361E0(v30, v31);
  sub_100037A24(v33, v32);
  static os_log_type_t.info.getter();
  uint64_t v34 = a4;
  if (qword_101637308 != -1) {
    swift_once();
  }
  uint64_t v86 = sub_10000588C((uint64_t *)&unk_10163AD00);
  uint64_t v35 = swift_allocObject();
  long long v85 = xmmword_101342130;
  *(_OWORD *)(v35 + 16) = xmmword_101342130;
  sub_1000361E0(v30, v31);
  uint64_t v36 = Data.description.getter();
  uint64_t v38 = v37;
  sub_10001CFB8(v30, v31);
  *(void *)(v35 + 56) = &type metadata for String;
  unint64_t v84 = sub_10000B4CC();
  *(void *)(v35 + 64) = v84;
  *(void *)(v35 + 32) = v36;
  *(void *)(v35 + 40) = v38;
  os_log(_:dso:log:_:_:)();
  swift_bridgeObjectRelease();
  sub_1000361E0(v34, v29);
  __int16 v39 = sub_10115B26C(v34, v29);
  sub_10001CFB8(v34, v29);
  unint64_t v40 = v29;
  uint64_t v41 = v91;
  if ((v39 & 0x100) == 0)
  {
    LOBYTE(v97) = v39;
    sub_10006145C();
    uint64_t v42 = FixedWidthInteger.bits()();
    if (*(void *)(v42 + 16))
    {
      uint64_t v43 = v94;
      uint64_t v44 = v95;
      uint64_t v45 = v92;
      (*(void (**)(uint64_t, unint64_t, uint64_t))(v95 + 16))(v92, v42 + ((*(unsigned __int8 *)(v95 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v95 + 80)), v94);
      uint64_t v46 = 0;
    }
    else
    {
      uint64_t v46 = 1;
      uint64_t v43 = v94;
      uint64_t v44 = v95;
      uint64_t v45 = v92;
    }
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v44 + 56))(v45, v46, 1, v43);
    swift_bridgeObjectRelease();
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v44 + 48))(v45, 1, v43) != 1)
    {
      uint64_t v92 = v34;
      uint64_t v49 = v83;
      (*(void (**)(char *, uint64_t, uint64_t))(v44 + 32))(v83, v45, v43);
      uint64_t v50 = v90;
      (*(void (**)(char *, void, uint64_t))(v44 + 104))(v90, enum case for Bit.one(_:), v43);
      sub_100A872C8((unint64_t *)&qword_10163B220, (void (*)(uint64_t))&type metadata accessor for Bit);
      dispatch thunk of RawRepresentable.rawValue.getter();
      dispatch thunk of RawRepresentable.rawValue.getter();
      int v51 = v97;
      int v52 = v105;
      uint64_t v55 = *(void (**)(char *, uint64_t))(v44 + 8);
      uint64_t v53 = v44 + 8;
      uint64_t v54 = v55;
      v55(v50, v43);
      if (v51 == v52)
      {
        uint64_t v95 = v53;
        BinaryDecoder.init()();
        uint64_t v57 = v106;
        unint64_t v56 = v107;
        sub_1000361E0(v106, v107);
        unint64_t v58 = sub_100A867FC();
        BinaryDecoder.decode<A>(_:from:)();
        sub_10001CFB8(v57, v56);
        long long v70 = v97;
        long long v71 = v98;
        uint64_t v73 = v99;
        unint64_t v72 = v100;
        uint64_t v96 = v101;
        uint64_t v93 = v102;
        unint64_t v74 = v104;
        uint64_t v92 = v103;
        uint64_t v75 = *(void *)(v23 + 120);
        unint64_t v76 = *(void *)(v23 + 128);
        *(_OWORD *)(v23 + 120) = xmmword_101347BB0;
        sub_100037A24(v75, v76);
        *((void *)&v98 + 1) = &type metadata for AccessoryPairingCommand;
        unint64_t v99 = v58;
        unint64_t v100 = sub_100A85520();
        uint64_t v77 = swift_allocObject();
        *(void *)&long long v97 = v77;
        *(_OWORD *)(v77 + 16) = v70;
        *(_OWORD *)(v77 + 32) = v71;
        *(void *)(v77 + 48) = v73;
        *(void *)(v77 + 56) = v72;
        uint64_t v78 = v96;
        uint64_t v79 = v93;
        *(void *)(v77 + 64) = v96;
        *(void *)(v77 + 72) = v79;
        uint64_t v80 = v92;
        *(void *)(v77 + 80) = v92;
        *(void *)(v77 + 88) = v74;
        LOBYTE(v101) = 0;
        sub_100A84CDC(v70, *((uint64_t *)&v70 + 1), v71, *((unint64_t *)&v71 + 1), v73, v72, v78, v79, v80, v74, (void (*)(void))sub_1000361E0);
        v88(&v97);
        swift_release();
        sub_100A84CDC(v70, *((uint64_t *)&v70 + 1), v71, *((unint64_t *)&v71 + 1), v73, v72, v96, v93, v92, v74, (void (*)(void))sub_10001CFB8);
        (*(void (**)(char *, uint64_t))(v81 + 8))(v89, v82);
        v54(v83, v94);
        sub_10001CFB8(v106, v107);
        return sub_10001DAB4((uint64_t)&v97, &qword_10163C638);
      }
      sub_100A872C8((unint64_t *)&qword_101639630, (void (*)(uint64_t))&type metadata accessor for BinaryDecodingError);
      uint64_t v47 = swift_allocError();
      (*(void (**)(uint64_t, void, uint64_t))(v93 + 104))(v59, enum case for BinaryDecodingError.insufficientData(_:), v41);
      swift_willThrow();
      v54(v49, v43);
      sub_10001CFB8(v106, v107);
      uint64_t v34 = v92;
      goto LABEL_20;
    }
    sub_10001DAB4(v45, &qword_10163C630);
  }
  sub_100A867A8();
  uint64_t v47 = swift_allocError();
  *uint64_t v48 = 1;
  swift_willThrow();
  sub_10001CFB8(v106, v107);
LABEL_20:
  *(void *)&long long v97 = v47;
  swift_errorRetain();
  sub_10000588C(&qword_101638D40);
  uint64_t v60 = v96;
  if (swift_dynamicCast())
  {
    uint64_t v61 = v93;
    if ((*(unsigned int (**)(uint64_t, uint64_t))(v93 + 88))(v60, v41) == enum case for BinaryDecodingError.insufficientData(_:))
    {
      swift_errorRelease();
      static os_log_type_t.info.getter();
      os_log(_:dso:log:_:_:)();
      swift_release();
      return swift_errorRelease();
    }
    (*(void (**)(uint64_t, uint64_t))(v61 + 8))(v60, v41);
  }
  swift_errorRelease();
  static os_log_type_t.error.getter();
  uint64_t v63 = swift_allocObject();
  *(_OWORD *)(v63 + 16) = v85;
  sub_1000361E0(v34, v40);
  uint64_t v64 = Data.description.getter();
  uint64_t v66 = v65;
  sub_10001CFB8(v34, v40);
  unint64_t v67 = v84;
  *(void *)(v63 + 56) = &type metadata for String;
  *(void *)(v63 + 64) = v67;
  *(void *)(v63 + 32) = v64;
  *(void *)(v63 + 40) = v66;
  os_log(_:dso:log:_:_:)();
  swift_bridgeObjectRelease();
  uint64_t v68 = *(void *)(v23 + 120);
  unint64_t v69 = *(void *)(v23 + 128);
  *(_OWORD *)(v23 + 120) = xmmword_101347BB0;
  sub_100037A24(v68, v69);
  *(void *)&long long v97 = v47;
  LOBYTE(v100) = 10;
  LOBYTE(v101) = 1;
  swift_errorRetain();
  v88(&v97);
  swift_release();
  swift_errorRelease();
  return sub_10001DAB4((uint64_t)&v97, &qword_10163C638);
}

uint64_t sub_100A7FFF8(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = type metadata accessor for DispatchPredicate();
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v8 = (uint64_t *)((char *)&v14 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v9 = *(void **)(v2 + 16);
  *uint64_t v8 = v9;
  (*(void (**)(void *, void, uint64_t))(v6 + 104))(v8, enum case for DispatchPredicate.onQueue(_:), v5);
  id v10 = v9;
  LOBYTE(v9) = _dispatchPreconditionTest(_:)();
  uint64_t result = (*(uint64_t (**)(void *, uint64_t))(v6 + 8))(v8, v5);
  if (v9)
  {
    uint64_t v12 = swift_allocObject();
    swift_weakInit();
    uint64_t v13 = swift_allocObject();
    *(void *)(v13 + 16) = v12;
    sub_100A84C2C(a1, v13 + 24);
    *(void *)(v13 + 104) = a2;
    sub_10000588C(&qword_101657AE8);
    swift_allocObject();
    sub_100A84C88(a1, (void (*)(void))sub_1000361E0);
    swift_retain();
    return Future.init(_:)();
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_100A801C0(void (*a1)(_OWORD *), uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v9 = type metadata accessor for BinaryEncoder();
  uint64_t v10 = *(void *)(v9 - 8);
  __chkstk_darwin(v9);
  uint64_t v12 = (char *)&v24 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_beginAccess();
  uint64_t Strong = swift_weakLoadStrong();
  if (Strong)
  {
    uint64_t v25 = v10;
    uint64_t v14 = *(void *)(Strong + 104);
    *(void *)(Strong + 104) = a1;
    *(void *)(Strong + 112) = a2;
    swift_retain();
    sub_1000A1534(v14);
    BinaryEncoder.init()();
    sub_100A84C2C(a4, (uint64_t)v27);
    sub_100A85520();
    uint64_t v15 = BinaryEncoder.encode<A>(_:)();
    uint64_t v26 = v9;
    uint64_t v17 = v15;
    unint64_t v19 = v18;
    __chkstk_darwin(v15);
    *(&v24 - 2) = (uint64_t)v20;
    id v21 = v20;
    OSAllocatedUnfairLock.callAsFunction<A>(_:)();

    uint64_t result = *(void *)&v27[0] - 1;
    if (__OFSUB__(*(void *)&v27[0], 1))
    {
      __break(1u);
    }
    else
    {
      uint64_t v22 = Data.chunked(into:)();
      uint64_t v23 = sub_1001554FC(v22);
      swift_bridgeObjectRelease();
      swift_beginAccess();
      sub_100442E40((uint64_t)v23);
      swift_endAccess();
      sub_100A80594(a5);
      sub_10001CFB8(v17, v19);
      swift_release();
      return (*(uint64_t (**)(char *, uint64_t))(v25 + 8))(v12, v26);
    }
  }
  else
  {
    uint64_t v28 = 0;
    memset(v27, 0, sizeof(v27));
    __int16 v29 = 267;
    a1(v27);
    return sub_10001DAB4((uint64_t)v27, &qword_10163C5F8);
  }
  return result;
}

uint64_t sub_100A80594(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = sub_10000588C(&qword_10163C6C8);
  __chkstk_darwin(v4 - 8);
  uint64_t v6 = (char *)&v38 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = sub_10000588C(&qword_10163C6D0);
  uint64_t v41 = *(void *)(v7 - 8);
  uint64_t v42 = v7;
  __chkstk_darwin(v7);
  unint64_t v40 = (char *)&v38 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = sub_10000588C(&qword_10164AC28);
  uint64_t v44 = *(void *)(v9 - 8);
  uint64_t v45 = v9;
  __chkstk_darwin(v9);
  uint64_t v43 = (char *)&v38 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = sub_10000588C(&qword_10164AC30);
  uint64_t v47 = *(void *)(v11 - 8);
  __chkstk_darwin(v11);
  uint64_t v46 = (char *)&v38 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = type metadata accessor for DispatchPredicate();
  uint64_t v14 = *(void *)(v13 - 8);
  __chkstk_darwin(v13);
  uint64_t v16 = (uint64_t *)((char *)&v38 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v17 = (void *)v2[2];
  void *v16 = v17;
  (*(void (**)(void *, void, uint64_t))(v14 + 104))(v16, enum case for DispatchPredicate.onQueue(_:), v13);
  id v18 = v17;
  unint64_t v19 = _dispatchPreconditionTest(_:)();
  (*(void (**)(void *, uint64_t))(v14 + 8))(v16, v13);
  if ((v19 & 1) == 0)
  {
    __break(1u);
    goto LABEL_9;
  }
  uint64_t result = swift_beginAccess();
  id v21 = (void *)v2[17];
  if (v21[2])
  {
    uint64_t v39 = v11;
    uint64_t v48 = a1;
    uint64_t v16 = (void *)v21[4];
    unint64_t v19 = v21[5];
    sub_1000361E0((uint64_t)v16, v19);
    static os_log_type_t.debug.getter();
    if (qword_101637308 == -1)
    {
LABEL_4:
      sub_10000588C((uint64_t *)&unk_10163AD00);
      uint64_t v22 = swift_allocObject();
      *(_OWORD *)(v22 + 16) = xmmword_101342130;
      sub_1000361E0((uint64_t)v16, v19);
      uint64_t v23 = Data.description.getter();
      uint64_t v25 = v24;
      sub_10001CFB8((uint64_t)v16, v19);
      *(void *)(v22 + 56) = &type metadata for String;
      *(void *)(v22 + 64) = sub_10000B4CC();
      *(void *)(v22 + 32) = v23;
      *(void *)(v22 + 40) = v25;
      os_log(_:dso:log:_:_:)();
      swift_bridgeObjectRelease();
      uint64_t v38 = sub_100A6C94C((uint64_t)v16, v19);
      v49[0] = v38;
      id v51 = v18;
      uint64_t v26 = type metadata accessor for OS_dispatch_queue.SchedulerOptions();
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v26 - 8) + 56))(v6, 1, 1, v26);
      id v27 = v18;
      sub_10000588C(&qword_10163C5E8);
      sub_10000584C();
      sub_100062734(&qword_10163C5F0, &qword_10163C5E8);
      sub_100A872C8((unint64_t *)&qword_10166C020, (void (*)(uint64_t))sub_10000584C);
      uint64_t v28 = v40;
      Publisher.receive<A>(on:options:)();
      sub_10001DAB4((uint64_t)v6, &qword_10163C6C8);

      sub_10000588C(&qword_10163C5F8);
      sub_100062734(&qword_10163C6F8, &qword_10163C6D0);
      uint64_t v29 = v42;
      uint64_t v30 = v43;
      Publisher.map<A>(_:)();
      (*(void (**)(char *, uint64_t))(v41 + 8))(v28, v29);
      sub_10000588C(&qword_10164AC38);
      sub_100062734(&qword_10164AC40, &qword_10164AC28);
      sub_100062734(&qword_10164AC48, &qword_10164AC38);
      uint64_t v32 = v45;
      unint64_t v31 = v46;
      Publisher.catch<A>(_:)();
      (*(void (**)(char *, uint64_t))(v44 + 8))(v30, v32);
      uint64_t v33 = swift_allocObject();
      swift_weakInit();
      uint64_t v34 = swift_allocObject();
      uint64_t v35 = v48;
      *(void *)(v34 + 16) = v33;
      *(void *)(v34 + 24) = v35;
      sub_100062734(&qword_10164AC50, &qword_10164AC30);
      swift_retain();
      uint64_t v36 = v39;
      Publisher<>.sink(receiveValue:)();
      swift_release();
      (*(void (**)(char *, uint64_t))(v47 + 8))(v31, v36);
      swift_beginAccess();
      AnyCancellable.store(in:)();
      swift_endAccess();
      swift_release();
      swift_release();
      return sub_10001CFB8((uint64_t)v16, v19);
    }
LABEL_9:
    swift_once();
    goto LABEL_4;
  }
  uint64_t v37 = (void (*)(void *))v2[13];
  if (v37)
  {
    char v50 = 0;
    swift_retain();
    v37(v49);
    sub_1000A1534((uint64_t)v37);
    return sub_10001DAB4((uint64_t)v49, &qword_10163C5F8);
  }
  return result;
}

uint64_t sub_100A80D40(uint64_t a1, uint64_t a2, uint64_t a3)
{
  swift_beginAccess();
  uint64_t result = swift_weakLoadStrong();
  if (result)
  {
    uint64_t v6 = result;
    sub_10001D074(a1, (uint64_t)v20, &qword_10163C5F8);
    if (v20[41])
    {
      sub_10006105C((uint64_t)v20, (uint64_t)v19);
      static os_log_type_t.error.getter();
      if (qword_101637308 != -1) {
        swift_once();
      }
      sub_10000588C((uint64_t *)&unk_10163AD00);
      uint64_t v7 = swift_allocObject();
      *(_OWORD *)(v7 + 16) = xmmword_101342130;
      uint64_t v8 = sub_101321420();
      uint64_t v10 = v9;
      *(void *)(v7 + 56) = &type metadata for String;
      *(void *)(v7 + 64) = sub_10000B4CC();
      *(void *)(v7 + 32) = v8;
      *(void *)(v7 + 40) = v10;
      os_log(_:dso:log:_:_:)();
      swift_bridgeObjectRelease();
      uint64_t v11 = *(void (**)(uint64_t *))(v6 + 104);
      if (v11)
      {
        uint64_t v15 = 4;
        long long v16 = 0u;
        long long v17 = 0u;
        __int16 v18 = 267;
        swift_retain();
        v11(&v15);
        sub_1000A1534((uint64_t)v11);
        swift_release();
        sub_10001DAB4((uint64_t)&v15, &qword_10163C5F8);
        return sub_100061288((uint64_t)v19);
      }
      sub_100061288((uint64_t)v19);
    }
    else
    {
      static os_log_type_t.debug.getter();
      if (qword_101637308 != -1) {
        swift_once();
      }
      os_log(_:dso:log:_:_:)();
      uint64_t result = swift_beginAccess();
      uint64_t v12 = *(void **)(v6 + 136);
      if (!v12[2])
      {
        __break(1u);
        return result;
      }
      uint64_t v14 = v12[4];
      unint64_t v13 = v12[5];
      sub_1000361E0(v14, v13);
      sub_100A29D94(0, 1);
      swift_endAccess();
      sub_10001CFB8(v14, v13);
      sub_100A80594(a3);
    }
    return swift_release();
  }
  return result;
}

double sub_100A80FD4@<D0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = v2;
  uint64_t v6 = type metadata accessor for DispatchPredicate();
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  uint64_t v9 = (uint64_t *)((char *)&v49 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v10 = *(void **)(v3 + 16);
  *uint64_t v9 = v10;
  (*(void (**)(void *, void, uint64_t))(v7 + 104))(v9, enum case for DispatchPredicate.onQueue(_:), v6);
  id v11 = v10;
  LOBYTE(v10) = _dispatchPreconditionTest(_:)();
  (*(void (**)(void *, uint64_t))(v7 + 8))(v9, v6);
  if ((v10 & 1) == 0)
  {
    __break(1u);
    goto LABEL_24;
  }
  sub_10005F6AC(a1, (uint64_t)v60);
  sub_10000588C(&qword_101639B58);
  if (!swift_dynamicCast())
  {
    static os_log_type_t.error.getter();
    if (qword_101637308 == -1)
    {
LABEL_10:
      sub_10000588C((uint64_t *)&unk_10163AD00);
      uint64_t v19 = swift_allocObject();
      *(_OWORD *)(v19 + 16) = xmmword_101342130;
      sub_10005F6AC(a1, (uint64_t)&v52);
      uint64_t v20 = String.init<A>(describing:)();
      uint64_t v22 = v21;
      *(void *)(v19 + 56) = &type metadata for String;
      *(void *)(v19 + 64) = sub_10000B4CC();
      *(void *)(v19 + 32) = v20;
      *(void *)(v19 + 40) = v22;
      os_log(_:dso:log:_:_:)();
      swift_bridgeObjectRelease();
LABEL_16:
      uint64_t v29 = 6;
LABEL_18:
      *(void *)a2 = v29;
      double result = 0.0;
      *(_OWORD *)(a2 + 8) = 0u;
      *(_OWORD *)(a2 + 24) = 0u;
      *(unsigned char *)(a2 + 40) = 11;
LABEL_19:
      *(unsigned char *)(a2 + 80) = 1;
      return result;
    }
LABEL_24:
    swift_once();
    goto LABEL_10;
  }
  sub_100A84C2C((uint64_t)&v52, (uint64_t)v59);
  sub_100A84C2C((uint64_t)v59, (uint64_t)v60);
  int v12 = (v62 >> 59) & 6 | ((v61 & 0x2000000000000000) != 0);
  if (v12 == 3)
  {
    v61 &= ~0x2000000000000000uLL;
    v62 &= 0xCFFFFFFFFFFFFFFFLL;
    static os_log_type_t.default.getter();
    if (qword_101637308 != -1) {
      swift_once();
    }
    os_log(_:dso:log:_:_:)();
    uint64_t v23 = *(void *)(v3 + 72);
    *(unsigned char *)(v23 + OBJC_IVAR____TtC12searchpartyd27AccessoryPairingCoordinator_pairingState) = 5;
    sub_100F7C734(v58);
    sub_10000588C(&qword_101639B68);
    if (swift_dynamicCast())
    {
      long long v24 = v52;
      uint64_t v25 = v54;
      long long v51 = v53;
      unint64_t v26 = *((void *)&v54 + 1);
      uint64_t v27 = OBJC_IVAR____TtC12searchpartyd27AccessoryPairingCoordinator_pairingInfo;
      uint64_t v28 = *(void *)(v23 + OBJC_IVAR____TtC12searchpartyd27AccessoryPairingCoordinator_pairingInfo);
      swift_retain();
      sub_1000361E0(v25, v26);
      sub_100435774(v25, v26, (uint64_t *)&v52);
      uint64_t v34 = *(void *)(v28 + 72);
      unint64_t v35 = *(void *)(v28 + 80);
      *(_OWORD *)(v28 + 72) = v52;
      sub_100037A24(v34, v35);
      swift_release();
      uint64_t v36 = *(void *)(v23 + v27);
      *((void *)&v53 + 1) = &type metadata for CollaborativeKeyGen.v1.C3;
      *(void *)&long long v54 = sub_10005FE44();
      swift_retain();
      sub_1000361E0(v24, *((unint64_t *)&v24 + 1));
      sub_1004352BC(v24, *((unint64_t *)&v24 + 1), (uint64_t *)&v52);
      uint64_t v49 = v25;
      unint64_t v50 = v26;
      sub_10001D608((uint64_t)&v52, (uint64_t)v58, &qword_101639B78);
      uint64_t v37 = v36 + OBJC_IVAR____TtC12searchpartyd20AccessoryPairingInfo_collaborativeKeyC3;
      swift_beginAccess();
      sub_100062604((uint64_t)v58, v37, &qword_101639B78);
      swift_endAccess();
      swift_release();
      uint64_t v38 = (uint64_t *)(*(void *)(v23 + v27) + OBJC_IVAR____TtC12searchpartyd20AccessoryPairingInfo_status);
      uint64_t v39 = *v38;
      unint64_t v40 = v38[1];
      long long v41 = v51;
      *(_OWORD *)uint64_t v38 = v51;
      sub_1000361E0(v41, *((unint64_t *)&v41 + 1));
      sub_100037A24(v39, v40);
      static Data.random(bytes:)();
      sub_1004B8F8C();
      BinaryDecodable.init(data:)();
      sub_10001CFB8(v24, *((unint64_t *)&v24 + 1));
      sub_10001CFB8(v41, *((unint64_t *)&v41 + 1));
      sub_10001CFB8(v49, v50);
      sub_100A84C88((uint64_t)v59, (void (*)(void))sub_10001CFB8);
      double result = 0.0;
      *(_OWORD *)a2 = 0u;
      *(_OWORD *)(a2 + 16) = 0u;
      *(_OWORD *)(a2 + 32) = 0u;
      *(_OWORD *)(a2 + 48) = 0u;
      *(void *)(a2 + 64) = 0;
      *(void *)(a2 + 72) = 0x2000000000000000;
      *(unsigned char *)(a2 + 80) = 0;
      return result;
    }
    goto LABEL_17;
  }
  if (v12 != 1)
  {
    sub_100A84C88((uint64_t)v59, (void (*)(void))sub_10001CFB8);
    goto LABEL_16;
  }
  v61 &= ~0x2000000000000000uLL;
  v62 &= 0xCFFFFFFFFFFFFFFFLL;
  static os_log_type_t.default.getter();
  if (qword_101637308 != -1) {
    swift_once();
  }
  os_log(_:dso:log:_:_:)();
  sub_100F7C734((uint64_t *)&v52);
  sub_10000588C(&qword_101639B68);
  if (!swift_dynamicCast())
  {
LABEL_17:
    static os_log_type_t.error.getter();
    os_log(_:dso:log:_:_:)();
    sub_100A84C88((uint64_t)v59, (void (*)(void))sub_10001CFB8);
    uint64_t v29 = 9;
    goto LABEL_18;
  }
  unint64_t v13 = v58[1];
  *((void *)&v51 + 1) = v58[0];
  uint64_t v15 = v58[2];
  unint64_t v14 = v58[3];
  uint64_t v16 = *(void *)(v3 + 72);
  *(unsigned char *)(v16 + OBJC_IVAR____TtC12searchpartyd27AccessoryPairingCoordinator_pairingState) = 3;
  uint64_t v17 = OBJC_IVAR____TtC12searchpartyd27AccessoryPairingCoordinator_pairingInfo;
  uint64_t v18 = *(void *)(v16 + OBJC_IVAR____TtC12searchpartyd27AccessoryPairingCoordinator_pairingInfo);
  swift_retain();
  sub_1000361E0(v15, v14);
  unint64_t v50 = v15;
  *(void *)&long long v51 = v14;
  sub_100435658(v15, v14, (uint64_t *)&v52);
  uint64_t v30 = *(void *)(v18 + 56);
  unint64_t v31 = *(void *)(v18 + 64);
  *(_OWORD *)(v18 + 56) = v52;
  sub_100037A24(v30, v31);
  swift_release();
  uint64_t v32 = *(void *)(v16 + v17);
  swift_retain();
  uint64_t v33 = *((void *)&v51 + 1);
  sub_1000361E0(*((uint64_t *)&v51 + 1), v13);
  sub_100434DF4(v33, v13, (uint64_t *)&v52);
  uint64_t v43 = v50;
  unint64_t v42 = v51;
  uint64_t v44 = *(void *)(v32 + OBJC_IVAR____TtC12searchpartyd20AccessoryPairingInfo_collaborativeKeyC1);
  unint64_t v45 = *(void *)(v32 + OBJC_IVAR____TtC12searchpartyd20AccessoryPairingInfo_collaborativeKeyC1 + 8);
  *(_OWORD *)(v32 + OBJC_IVAR____TtC12searchpartyd20AccessoryPairingInfo_collaborativeKeyC1) = v52;
  sub_100037A24(v44, v45);
  swift_release();
  sub_100A8186C((uint64_t)&v52);
  if (v57)
  {
    sub_10006105C((uint64_t)&v52, a2);
    static os_log_type_t.error.getter();
    os_log(_:dso:log:_:_:)();
    sub_10001CFB8(v33, v13);
    sub_10001CFB8(v43, v42);
    sub_100A84C88((uint64_t)v59, (void (*)(void))sub_10001CFB8);
    goto LABEL_19;
  }
  sub_10001CFB8(v33, v13);
  sub_10001CFB8(v43, v42);
  sub_100A84C88((uint64_t)v59, (void (*)(void))sub_10001CFB8);
  long long v46 = v53;
  *(_OWORD *)a2 = v52;
  *(_OWORD *)(a2 + 16) = v46;
  long long v47 = v55;
  *(_OWORD *)(a2 + 32) = v54;
  *(_OWORD *)(a2 + 48) = v47;
  double result = *(double *)&v56;
  *(_OWORD *)(a2 + 64) = v56;
  *(unsigned char *)(a2 + 80) = 0;
  return result;
}

void sub_100A8186C(uint64_t a1@<X8>)
{
  uint64_t v2 = v1;
  uint64_t v4 = sub_10000588C(&qword_101638CF0);
  uint64_t v5 = __chkstk_darwin(v4 - 8);
  uint64_t v99 = (uint64_t)&v81 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5);
  long long v98 = (char *)&v81 - v7;
  uint64_t v97 = type metadata accessor for AccessoryPairingLockCheckResponse();
  __chkstk_darwin(v97);
  uint64_t v9 = (uint64_t *)((char *)&v81 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v100 = sub_10000588C(&qword_101642DB8);
  __chkstk_darwin(v100);
  uint64_t v101 = (void **)((char *)&v81 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v11 = type metadata accessor for HashAlgorithm();
  unint64_t v102 = *(void *)(v11 - 8);
  __chkstk_darwin(v11);
  unint64_t v13 = (char *)&v81 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = type metadata accessor for DispatchPredicate();
  uint64_t v15 = *(void *)(v14 - 8);
  __chkstk_darwin(v14);
  uint64_t v17 = (void *)((char *)&v81 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v18 = *(void **)(v2 + 16);
  *uint64_t v17 = v18;
  (*(void (**)(void *, void, uint64_t))(v15 + 104))(v17, enum case for DispatchPredicate.onQueue(_:), v14);
  id v19 = v18;
  LOBYTE(v18) = _dispatchPreconditionTest(_:)();
  (*(void (**)(void *, uint64_t))(v15 + 8))(v17, v14);
  if ((v18 & 1) == 0)
  {
    __break(1u);
    goto LABEL_23;
  }
  uint64_t v20 = OBJC_IVAR____TtC12searchpartyd27AccessoryPairingCoordinator_pairingInfo;
  uint64_t v21 = (uint64_t *)(*(void *)(*(void *)(v2 + 72)
                              + OBJC_IVAR____TtC12searchpartyd27AccessoryPairingCoordinator_pairingInfo)
                  + OBJC_IVAR____TtC12searchpartyd20AccessoryPairingInfo_collaborativeKeyC1);
  unint64_t v22 = v21[1];
  if (v22 >> 60 == 15)
  {
    static os_log_type_t.error.getter();
    if (qword_101637308 == -1)
    {
LABEL_4:
      os_log(_:dso:log:_:_:)();
      unint64_t v23 = 0xD00000000000001ALL;
      long long v24 = "BeaconStoreActor";
LABEL_7:
      *(void *)a1 = v23;
      *(void *)(a1 + 8) = (unint64_t)v24 | 0x8000000000000000;
      char v31 = 9;
      goto LABEL_8;
    }
LABEL_23:
    swift_once();
    goto LABEL_4;
  }
  uint64_t v95 = *(void *)(v2 + 72);
  uint64_t v96 = a1;
  uint64_t v25 = *v21;
  sub_1000361E0(*v21, v22);
  sub_1000361E0(v25, v22);
  uint64_t v26 = sub_100A8AEE4(v25, v22);
  unint64_t v28 = v27;
  uint64_t v93 = v25;
  uint64_t v94 = v29;
  uint64_t v90 = v9;
  uint64_t v30 = v26;
  sub_100037A24(v25, v22);
  sub_1000361E0(v30, v28);
  sub_100435190(v30, v28, (uint64_t *)&v108);
  unint64_t v91 = v28;
  uint64_t v92 = v30;
  unint64_t v33 = *((void *)&v108 + 1);
  uint64_t v34 = v20;
  uint64_t v35 = v108;
  uint64_t v36 = v95;
  uint64_t v87 = v34;
  uint64_t v37 = *(void *)(v95 + v34);
  *((void *)&v109 + 1) = &type metadata for CollaborativeKeyGen.v1.C2;
  *(void *)&long long v110 = sub_100061FCC();
  *(void *)&long long v108 = v35;
  *((void *)&v108 + 1) = v33;
  sub_10001D608((uint64_t)&v108, (uint64_t)v107, &qword_101639BC0);
  uint64_t v38 = v37 + OBJC_IVAR____TtC12searchpartyd20AccessoryPairingInfo_collaborativeKeyC2;
  swift_beginAccess();
  swift_retain();
  sub_1000361E0(v35, v33);
  sub_100062604((uint64_t)v107, v38, &qword_101639BC0);
  swift_endAccess();
  swift_release();
  *((void *)&v109 + 1) = type metadata accessor for CollaborativeKeyGen.v1.OwnerContext();
  *(void *)&long long v110 = &off_1015E6CC0;
  *(void *)&long long v108 = v94;
  sub_10001D608((uint64_t)&v108, (uint64_t)v107, &qword_101639A40);
  uint64_t v39 = v36 + OBJC_IVAR____TtC12searchpartyd27AccessoryPairingCoordinator_pairingOwnerContext;
  swift_beginAccess();
  swift_retain();
  sub_100062604((uint64_t)v107, v39, &qword_101639A40);
  swift_endAccess();
  static os_log_type_t.debug.getter();
  a1 = v96;
  if (qword_101637308 != -1) {
    swift_once();
  }
  uint64_t v86 = qword_10170F060;
  uint64_t v82 = sub_10000588C((uint64_t *)&unk_10163AD00);
  uint64_t v40 = swift_allocObject();
  long long v81 = xmmword_101342130;
  *(_OWORD *)(v40 + 16) = xmmword_101342130;
  uint64_t v41 = Data.hexString.getter();
  uint64_t v84 = v42;
  uint64_t v85 = v41;
  *(void *)(v40 + 56) = &type metadata for String;
  unint64_t v83 = sub_10000B4CC();
  *(void *)(v40 + 64) = v83;
  uint64_t v43 = v84;
  *(void *)(v40 + 32) = v85;
  *(void *)(v40 + 40) = v43;
  os_log(_:dso:log:_:_:)();
  swift_bridgeObjectRelease();
  unint64_t v44 = v102;
  (*(void (**)(char *, void, uint64_t))(v102 + 104))(v13, enum case for HashAlgorithm.sha256(_:), v11);
  sub_1000361E0(v35, v33);
  uint64_t v45 = Data.hash(algorithm:)();
  unint64_t v46 = v33;
  uint64_t v88 = v35;
  unint64_t v89 = v33;
  uint64_t v47 = v35;
  uint64_t v48 = v45;
  unint64_t v50 = v49;
  sub_10001CFB8(v47, v46);
  long long v51 = v13;
  uint64_t v52 = v48;
  (*(void (**)(char *, uint64_t))(v44 + 8))(v51, v11);
  uint64_t v53 = v87;
  unint64_t v54 = v50;
  swift_retain();
  sub_1001C906C(v52, v50, (uint64_t)v103);
  swift_release();
  sub_10001D608((uint64_t)v103, (uint64_t)v107, &qword_10163E580);
  int v55 = sub_1003B4138((uint64_t)v107);
  uint64_t v57 = v88;
  unint64_t v56 = v89;
  if (v55 == 1)
  {
    static os_log_type_t.error.getter();
    os_log(_:dso:log:_:_:)();
    swift_release();
    sub_10001CFB8(v57, v56);
    sub_100037A24(v93, v22);
    sub_10001CFB8(v92, v91);
    sub_10001CFB8(v52, v54);
    unint64_t v23 = 0xD00000000000001ALL;
    unint64_t v58 = "Invalid E2 from accessory!";
LABEL_6:
    long long v24 = v58 - 32;
    goto LABEL_7;
  }
  uint64_t v86 = v52;
  unint64_t v102 = v54;
  long long v114 = v107[6];
  long long v115 = v107[7];
  long long v116 = v107[8];
  long long v110 = v107[2];
  long long v111 = v107[3];
  long long v112 = v107[4];
  long long v113 = v107[5];
  long long v108 = v107[0];
  long long v109 = v107[1];
  uint64_t v59 = v101;
  sub_100A824CC((uint64_t)&v108, (uint64_t)v101);
  if (swift_getEnumCaseMultiPayload() != 1)
  {
    unint64_t v67 = v90;
    sub_100A84E60((uint64_t)v59, (uint64_t)v90, (uint64_t (*)(void))type metadata accessor for AccessoryPairingLockCheckResponse);
    static os_log_type_t.default.getter();
    os_log(_:dso:log:_:_:)();
    uint64_t v68 = v95;
    uint64_t v69 = *(void *)(v95 + v53);
    long long v70 = (char *)v67 + *(int *)(v97 + 32);
    uint64_t v71 = type metadata accessor for UUID();
    uint64_t v72 = *(void *)(v71 - 8);
    uint64_t v73 = v98;
    (*(void (**)(char *, char *, uint64_t))(v72 + 16))(v98, v70, v71);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v72 + 56))(v73, 0, 1, v71);
    uint64_t v74 = (uint64_t)v73;
    uint64_t v75 = v99;
    sub_10001D608(v74, v99, &qword_101638CF0);
    uint64_t v76 = v69 + OBJC_IVAR____TtC12searchpartyd20AccessoryPairingInfo_fmnaId;
    swift_beginAccess();
    swift_retain();
    sub_100062604(v75, v76, &qword_101638CF0);
    swift_endAccess();
    swift_release();
    uint64_t v77 = *(void *)(v68 + v87);
    uint64_t v78 = v67[7];
    *(void *)(v77 + 120) = v67[6];
    *(void *)(v77 + 128) = v78;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    unint64_t v80 = v91;
    uint64_t v79 = v92;
    sub_100A84EC8(v67, v92, v91, (uint64_t)v104);
    sub_10001D608((uint64_t)v104, (uint64_t)v105, &qword_101658078);
    if ((~(v105[1] & v105[3] & v105[5] & v105[7] & v105[9]) & 0x3000000000000000) != 0)
    {
      sub_100A84C2C((uint64_t)v105, (uint64_t)v106);
      sub_100A853E0((uint64_t)v67, (uint64_t (*)(void))type metadata accessor for AccessoryPairingLockCheckResponse);
      swift_release();
      sub_10001CFB8(v88, v89);
      sub_100037A24(v93, v22);
      sub_10001CFB8(v79, v80);
      sub_100A852AC((uint64_t)v103);
      sub_10001CFB8(v86, v102);
      sub_100A84C2C((uint64_t)v106, a1);
      char v32 = 0;
      goto LABEL_10;
    }
    sub_100037A24(v93, v22);
    sub_100A852AC((uint64_t)v103);
    sub_10001CFB8(v86, v102);
    swift_release();
    sub_10001CFB8(v88, v89);
    sub_10001CFB8(v79, v80);
    sub_100A853E0((uint64_t)v67, (uint64_t (*)(void))type metadata accessor for AccessoryPairingLockCheckResponse);
    unint64_t v23 = 0xD000000000000019;
    unint64_t v58 = "Invalid token from server";
    goto LABEL_6;
  }
  uint64_t v60 = *v59;
  static os_log_type_t.error.getter();
  uint64_t v61 = swift_allocObject();
  *(_OWORD *)(v61 + 16) = v81;
  v106[0] = v60;
  type metadata accessor for SPPairingSessionError(0);
  id v62 = v60;
  uint64_t v63 = String.init<A>(describing:)();
  unint64_t v64 = v83;
  *(void *)(v61 + 56) = &type metadata for String;
  *(void *)(v61 + 64) = v64;
  *(void *)(v61 + 32) = v63;
  *(void *)(v61 + 40) = v65;
  os_log(_:dso:log:_:_:)();
  swift_bridgeObjectRelease();
  v105[0] = v62;
  sub_100A872C8(&qword_101638770, type metadata accessor for SPPairingSessionError);
  id v66 = v62;
  _BridgedStoredNSError.code.getter();
  sub_10001CFB8(v92, v91);
  swift_release();
  sub_10001CFB8(v88, v89);
  sub_100037A24(v93, v22);
  sub_100A852AC((uint64_t)v103);
  sub_10001CFB8(v86, v102);

  if (v106[0] != 18)
  {
    *(void *)a1 = v66;
    *(unsigned char *)(a1 + 40) = 0;
    goto LABEL_9;
  }

  *(void *)a1 = 8;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  char v31 = 11;
LABEL_8:
  *(unsigned char *)(a1 + 40) = v31;
LABEL_9:
  char v32 = 1;
LABEL_10:
  *(unsigned char *)(a1 + 80) = v32;
}

uint64_t sub_100A824CC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = v2;
  uint64_t v6 = type metadata accessor for DispatchPredicate();
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  uint64_t v9 = (void *)((char *)v19 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v10 = *(void **)(v3 + 16);
  *uint64_t v9 = v10;
  (*(void (**)(void *, void, uint64_t))(v7 + 104))(v9, enum case for DispatchPredicate.onQueue(_:), v6);
  id v11 = v10;
  LOBYTE(v10) = _dispatchPreconditionTest(_:)();
  uint64_t result = (*(uint64_t (**)(void *, uint64_t))(v7 + 8))(v9, v6);
  if (v10)
  {
    sub_10000588C(&qword_101642DB8);
    uint64_t v13 = swift_allocBox();
    uint64_t v15 = v14;
    type metadata accessor for SPPairingSessionError(0);
    v19[3] = 1;
    sub_1004A0BC8((uint64_t)_swiftEmptyArrayStorage);
    sub_100A872C8(&qword_101638770, type metadata accessor for SPPairingSessionError);
    _BridgedStoredNSError.init(_:userInfo:)();
    *uint64_t v15 = v19[0];
    swift_storeEnumTagMultiPayload();
    uint64_t v16 = dispatch_group_create();
    dispatch_group_enter(v16);
    uint64_t v17 = swift_allocObject();
    *(void *)(v17 + 16) = v13;
    *(void *)(v17 + 24) = v16;
    swift_retain();
    uint64_t v18 = v16;
    sub_1003BF704(a1, sub_100A84E58, v17);
    swift_release();
    OS_dispatch_group.wait()();

    swift_beginAccess();
    sub_10001D074((uint64_t)v15, a2, &qword_101642DB8);
    return swift_release();
  }
  else
  {
    __break(1u);
  }
  return result;
}

void sub_100A82738(uint64_t a1, uint64_t a2, NSObject *a3)
{
  uint64_t v5 = swift_projectBox();
  swift_beginAccess();
  sub_100156D3C(a1, v5, &qword_101642DB8);
  dispatch_group_leave(a3);
}

uint64_t sub_100A827A4(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = type metadata accessor for DispatchPredicate();
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v8 = &v19[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  uint64_t v9 = *(void **)(v2 + 16);
  *uint64_t v8 = v9;
  (*(void (**)(void *, void, uint64_t))(v6 + 104))(v8, enum case for DispatchPredicate.onQueue(_:), v5);
  id v10 = v9;
  LOBYTE(v9) = _dispatchPreconditionTest(_:)();
  (*(void (**)(void *, uint64_t))(v6 + 8))(v8, v5);
  if ((v9 & 1) == 0)
  {
    __break(1u);
    goto LABEL_8;
  }
  sub_10001D074(a1, (uint64_t)v20, &qword_101658070);
  if ((v20[80] & 1) == 0)
  {
    sub_100A84C2C((uint64_t)v20, (uint64_t)v21);
    static os_log_type_t.default.getter();
    if (qword_101637308 == -1)
    {
LABEL_5:
      sub_10000588C((uint64_t *)&unk_10163AD00);
      uint64_t v13 = swift_allocObject();
      *(_OWORD *)(v13 + 16) = xmmword_101342130;
      sub_100A84C2C((uint64_t)v21, (uint64_t)v19);
      sub_100A84C88((uint64_t)v21, (void (*)(void))sub_1000361E0);
      uint64_t v14 = String.init<A>(describing:)();
      uint64_t v16 = v15;
      *(void *)(v13 + 56) = &type metadata for String;
      *(void *)(v13 + 64) = sub_10000B4CC();
      *(void *)(v13 + 32) = v14;
      *(void *)(v13 + 40) = v16;
      os_log(_:dso:log:_:_:)();
      swift_bridgeObjectRelease();
      uint64_t v12 = sub_100A7FFF8((uint64_t)v21, a2);
      sub_100A84C88((uint64_t)v21, (void (*)(void))sub_10001CFB8);
      return v12;
    }
LABEL_8:
    swift_once();
    goto LABEL_5;
  }
  sub_10006105C((uint64_t)v20, (uint64_t)v21);
  sub_1000610B8((uint64_t)v21, (uint64_t)v19);
  uint64_t v11 = swift_allocObject();
  sub_10006105C((uint64_t)v19, v11 + 16);
  sub_10000588C(&qword_101657AE8);
  swift_allocObject();
  uint64_t v12 = Future.init(_:)();
  sub_100061288((uint64_t)v21);
  return v12;
}

uint64_t sub_100A82A8C@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v5 = type metadata accessor for DispatchPredicate();
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v8 = (uint64_t *)((char *)&v46 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v9 = *(void **)(v2 + 16);
  *uint64_t v8 = v9;
  (*(void (**)(void *, void, uint64_t))(v6 + 104))(v8, enum case for DispatchPredicate.onQueue(_:), v5);
  id v10 = v9;
  LOBYTE(v9) = _dispatchPreconditionTest(_:)();
  (*(void (**)(void *, uint64_t))(v6 + 8))(v8, v5);
  if ((v9 & 1) == 0)
  {
    __break(1u);
    goto LABEL_16;
  }
  uint64_t v11 = *(void *)(v2 + 72);
  uint64_t v12 = OBJC_IVAR____TtC12searchpartyd27AccessoryPairingCoordinator_pairingInfo;
  swift_retain();
  id v13 = [a1 productInformation];
  if (v13
    && (uint64_t v14 = v13, v15 = [v13 encryptionKeyE1],
                   v14,
                   v15))
  {
    uint64_t v16 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
    unint64_t v18 = v17;
  }
  else
  {
    uint64_t v16 = 0;
    unint64_t v18 = 0xF000000000000000;
  }
  uint64_t v19 = sub_1001C89D4(v16, v18);
  unint64_t v21 = v20;
  sub_100037A24(v16, v18);
  swift_release();
  if (v21 >> 60 == 15)
  {
    static os_log_type_t.error.getter();
    if (qword_101637308 == -1)
    {
LABEL_8:
      uint64_t result = os_log(_:dso:log:_:_:)();
      *(void *)(a2 + 32) = 0;
      *(_OWORD *)a2 = 0u;
      *(_OWORD *)(a2 + 16) = 0u;
LABEL_13:
      *(unsigned char *)(a2 + 40) = 11;
      *(unsigned char *)(a2 + 80) = 1;
      return result;
    }
LABEL_16:
    swift_once();
    goto LABEL_8;
  }
  uint64_t v47 = v19;
  uint64_t v23 = *(void *)(v11 + v12);
  swift_retain();
  id v24 = [a1 discoveredMetadata];
  id v25 = [v24 firmwareVersion];

  uint64_t v26 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v28 = v27;

  *(void *)(v23 + 88) = v26;
  *(void *)(v23 + 96) = v28;
  swift_release();
  swift_bridgeObjectRelease();
  id v29 = [a1 discoveredMetadata];
  id v30 = [v29 productData];

  uint64_t v31 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
  unint64_t v33 = v32;

  uint64_t v34 = sub_1002AB228(v31, v33);
  if (v35 >> 60 == 15)
  {
    static os_log_type_t.error.getter();
    uint64_t v36 = v47;
    if (qword_101637308 != -1) {
      swift_once();
    }
    os_log(_:dso:log:_:_:)();
    uint64_t result = sub_100037A24(v36, v21);
    *(void *)a2 = 13;
    *(_OWORD *)(a2 + 8) = 0u;
    *(_OWORD *)(a2 + 24) = 0u;
    goto LABEL_13;
  }
  uint64_t v37 = *(void *)(v11 + v12);
  uint64_t v38 = *(void *)(v37 + 104);
  unint64_t v39 = *(void *)(v37 + 112);
  *(void *)(v37 + 104) = v34;
  *(void *)(v37 + 112) = v35;
  sub_100037A24(v38, v39);
  uint64_t v40 = *(void *)(v11 + v12);
  uint64_t v41 = *(void *)(v40 + 16);
  unint64_t v42 = *(void *)(v40 + 24);
  *(void *)a2 = sub_100D12C04(v41, v42, v47, v21);
  *(void *)(a2 + 8) = v43;
  *(void *)(a2 + 16) = v44;
  *(void *)(a2 + 24) = v45;
  *(_OWORD *)(a2 + 32) = 0u;
  *(_OWORD *)(a2 + 48) = 0u;
  *(_OWORD *)(a2 + 64) = 0u;
  *(unsigned char *)(a2 + 80) = 0;
  return sub_1000361E0(v41, v42);
}

uint64_t sub_100A82EA8@<X0>(void *a1@<X0>, long long *a2@<X1>, void *a3@<X2>, void *a4@<X8>)
{
  id v104 = a3;
  long long v112 = a2;
  id v113 = a1;
  unint64_t v107 = a4;
  uint64_t v5 = type metadata accessor for PairingConfig();
  __chkstk_darwin(v5);
  uint64_t v7 = (uint64_t *)((char *)&v95 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v8 = sub_10000588C((uint64_t *)&unk_10166BFA0);
  uint64_t v9 = __chkstk_darwin(v8 - 8);
  uint64_t v103 = (uint64_t)&v95 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9);
  uint64_t v108 = (uint64_t)&v95 - v11;
  uint64_t v12 = sub_10000588C(&qword_10163B9F0);
  __chkstk_darwin(v12 - 8);
  long long v109 = (char *)&v95 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = type metadata accessor for OwnedBeaconRecord();
  uint64_t v110 = *(void *)(v14 - 8);
  uint64_t v111 = v14;
  __chkstk_darwin(v14);
  uint64_t v114 = (uint64_t)&v95 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v98 = type metadata accessor for StableIdentifier();
  __chkstk_darwin(v98);
  uint64_t v99 = (char *)&v95 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v17 = sub_10000588C(&qword_101638CF0);
  __chkstk_darwin(v17 - 8);
  uint64_t v19 = (char *)&v95 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v20 = type metadata accessor for UUID();
  uint64_t v21 = *(void *)(v20 - 8);
  __chkstk_darwin(v20);
  unsigned __int8 v105 = (char *)&v95 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v23 = type metadata accessor for DispatchPredicate();
  uint64_t v24 = *(void *)(v23 - 8);
  __chkstk_darwin(v23);
  uint64_t v26 = (uint64_t *)((char *)&v95 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v27 = (void *)v4[2];
  void *v26 = v27;
  (*(void (**)(void *, void, uint64_t))(v24 + 104))(v26, enum case for DispatchPredicate.onQueue(_:), v23);
  id v28 = v27;
  LOBYTE(v27) = _dispatchPreconditionTest(_:)();
  (*(void (**)(void *, uint64_t))(v24 + 8))(v26, v23);
  if ((v27 & 1) == 0)
  {
    __break(1u);
    goto LABEL_29;
  }
  uint64_t v101 = v5;
  unint64_t v102 = v7;
  uint64_t v100 = v4[5];
  uint64_t v29 = v4[9];
  uint64_t v30 = OBJC_IVAR____TtC12searchpartyd27AccessoryPairingCoordinator_pairingInfo;
  uint64_t v31 = *(void *)(v29 + OBJC_IVAR____TtC12searchpartyd27AccessoryPairingCoordinator_pairingInfo);
  unint64_t v32 = *(void *)(v31 + 128);
  uint64_t v106 = v4;
  if (v32)
  {
    uint64_t v33 = *(void *)(v31 + 120);
    uint64_t v34 = v31 + OBJC_IVAR____TtC12searchpartyd20AccessoryPairingInfo_fmnaId;
    swift_beginAccess();
    sub_10001D074(v34, (uint64_t)v19, &qword_101638CF0);
    uint64_t v35 = v20;
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v21 + 48))(v19, 1, v20) == 1)
    {
      sub_10001DAB4((uint64_t)v19, &qword_101638CF0);
    }
    else
    {
      uint64_t v36 = v105;
      (*(void (**)(char *, char *, uint64_t))(v21 + 32))(v105, v19, v35);
      uint64_t v37 = HIBYTE(v32) & 0xF;
      if ((v32 & 0x2000000000000000) == 0) {
        uint64_t v37 = v33 & 0xFFFFFFFFFFFFLL;
      }
      if (v37)
      {
        uint64_t v38 = (int *)sub_10000588C(&qword_1016555E0);
        unint64_t v39 = v36;
        uint64_t v40 = v21;
        uint64_t v41 = (uint64_t)v99;
        unint64_t v42 = &v99[v38[12]];
        uint64_t v43 = &v99[v38[16]];
        uint64_t v44 = &v99[v38[20]];
        uint64_t v96 = v38[24];
        uint64_t v45 = v35;
        uint64_t v46 = &v99[v38[28]];
        uint64_t v47 = *(void (**)(char *, char *))(v40 + 16);
        uint64_t v97 = v45;
        v47(v99, v39);
        *(void *)unint64_t v42 = 0;
        *((void *)v42 + 1) = 0;
        *(void *)uint64_t v43 = 0;
        *((void *)v43 + 1) = 0;
        *(void *)uint64_t v44 = v33;
        *((void *)v44 + 1) = v32;
        *(_WORD *)(v41 + v96) = 256;
        *(void *)uint64_t v46 = 0;
        *((void *)v46 + 1) = 0;
        swift_storeEnumTagMultiPayload();
        swift_bridgeObjectRetain();
        static os_log_type_t.default.getter();
        if (qword_101637308 != -1) {
          swift_once();
        }
        sub_10000588C((uint64_t *)&unk_10163AD00);
        uint64_t v48 = swift_allocObject();
        *(_OWORD *)(v48 + 16) = xmmword_101342130;
        uint64_t v49 = sub_101110C7C();
        uint64_t v51 = v50;
        *(void *)(v48 + 56) = &type metadata for String;
        *(void *)(v48 + 64) = sub_10000B4CC();
        *(void *)(v48 + 32) = v49;
        *(void *)(v48 + 40) = v51;
        os_log(_:dso:log:_:_:)();
        swift_bridgeObjectRelease();
        uint64_t v52 = dispatch_group_create();
        dispatch_group_enter(v52);
        uint64_t v53 = v106;
        unint64_t v54 = (uint64_t *)v106[3];
        int v55 = v52;
        sub_1003AAADC(v41, v54, v55);

        OS_dispatch_group.wait()();
        uint64_t v4 = v53;
        sub_100A853E0(v41, (uint64_t (*)(void))type metadata accessor for StableIdentifier);
        (*(void (**)(char *, uint64_t))(v40 + 8))(v105, v97);
      }
      else
      {
        (*(void (**)(char *, uint64_t))(v21 + 8))(v36, v35);
      }
    }
  }
  unint64_t v56 = (char *)v4[3];
  uint64_t v57 = *(void **)(v29 + v30);
  swift_retain();
  id v58 = v113;
  id v59 = [v113 productInformation];
  if (v59)
  {
    uint64_t v60 = v59;
    uint64_t v61 = v108;
    sub_1011DE574(v108);

    uint64_t v62 = type metadata accessor for AccessoryProductInfo();
    (*(void (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v62 - 8) + 56))(v61, 0, 1, v62);
  }
  else
  {
    uint64_t v63 = type metadata accessor for AccessoryProductInfo();
    uint64_t v61 = v108;
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v63 - 8) + 56))(v108, 1, 1, v63);
  }
  unint64_t v64 = v109;
  sub_10009108C(v112, v57, v61, v109);
  swift_release();
  sub_10001DAB4(v61, (uint64_t *)&unk_10166BFA0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v110 + 48))(v64, 1, v111) == 1)
  {
    sub_10001DAB4((uint64_t)v64, &qword_10163B9F0);
    static os_log_type_t.error.getter();
    if (qword_101637308 == -1)
    {
LABEL_17:
      os_log(_:dso:log:_:_:)();
      type metadata accessor for SPPairingSessionError(0);
      uint64_t v116 = 11;
      sub_1004A0BC8((uint64_t)_swiftEmptyArrayStorage);
      sub_100A872C8(&qword_101638770, type metadata accessor for SPPairingSessionError);
      _BridgedStoredNSError.init(_:userInfo:)();
      void *v107 = v115;
      sub_10000588C((uint64_t *)&unk_101656900);
      return swift_storeEnumTagMultiPayload();
    }
LABEL_29:
    swift_once();
    goto LABEL_17;
  }
  sub_100A84E60((uint64_t)v64, v114, (uint64_t (*)(void))type metadata accessor for OwnedBeaconRecord);
  id v66 = dispatch_group_create();
  dispatch_group_enter(v66);
  sub_10000588C((uint64_t *)&unk_101656900);
  long long v112 = (long long *)swift_allocBox();
  uint64_t v68 = v67;
  type metadata accessor for SPPairingSessionError(0);
  uint64_t v116 = 1;
  sub_1004A0BC8((uint64_t)_swiftEmptyArrayStorage);
  sub_100A872C8(&qword_101638770, type metadata accessor for SPPairingSessionError);
  _BridgedStoredNSError.init(_:userInfo:)();
  void *v68 = v115;
  swift_storeEnumTagMultiPayload();
  id v69 = v104;
  id v70 = [v104 name];
  unsigned __int8 v105 = v56;
  if (v70)
  {
    uint64_t v71 = v70;
    uint64_t v72 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    unint64_t v74 = v73;
  }
  else
  {
    uint64_t v72 = 0;
    unint64_t v74 = 0xE000000000000000;
  }
  id v75 = [v69 roleId];
  id v76 = [v69 roleEmoji];
  if (v76)
  {
    uint64_t v77 = v76;
    uint64_t v78 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v80 = v79;
  }
  else
  {
    uint64_t v78 = 0;
    uint64_t v80 = 0;
  }
  id v81 = [v58 productInformation];
  if (v81)
  {
    uint64_t v82 = v81;
    uint64_t v83 = v103;
    sub_1011DE574(v103);

    uint64_t v84 = v83;
    uint64_t v85 = type metadata accessor for AccessoryProductInfo();
    (*(void (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v85 - 8) + 56))(v83, 0, 1, v85);
  }
  else
  {
    uint64_t v86 = type metadata accessor for AccessoryProductInfo();
    uint64_t v84 = v103;
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v86 - 8) + 56))(v103, 1, 1, v86);
  }
  uint64_t v87 = (uint64_t)v107;
  uint64_t v88 = v101;
  unint64_t v89 = v102;
  uint64_t *v102 = v72;
  v89[1] = v74;
  v89[2] = (uint64_t)v75;
  v89[3] = v78;
  v89[4] = v80;
  sub_10001D608(v84, (uint64_t)v89 + *(int *)(v88 + 28), (uint64_t *)&unk_10166BFA0);
  uint64_t v90 = (void *)swift_allocObject();
  unint64_t v91 = v112;
  v90[2] = v66;
  v90[3] = v91;
  uint64_t v92 = v106;
  v90[4] = v100;
  v90[5] = v92;
  uint64_t v93 = v66;
  swift_retain();
  swift_retain();
  swift_retain();
  uint64_t v94 = v114;
  sub_100AA0654(v114, v89, (uint64_t)sub_100A84728, (uint64_t)v90);
  swift_release();
  OS_dispatch_group.wait()();

  sub_100A853E0((uint64_t)v89, (uint64_t (*)(void))type metadata accessor for PairingConfig);
  sub_100A853E0(v94, (uint64_t (*)(void))type metadata accessor for OwnedBeaconRecord);
  swift_beginAccess();
  sub_10001D074((uint64_t)v68, v87, (uint64_t *)&unk_101656900);
  return swift_release();
}

void sub_100A83AA0(uint64_t a1, uint64_t a2, NSObject *a3, uint64_t a4, uint64_t a5, NSObject *a6)
{
  v32[0] = a3;
  uint64_t v8 = type metadata accessor for OwnedBeaconRecord();
  uint64_t v9 = __chkstk_darwin(v8);
  uint64_t v11 = (char *)v32 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9);
  uint64_t v13 = (char *)v32 - v12;
  uint64_t v14 = sub_10000588C((uint64_t *)&unk_101656900);
  __chkstk_darwin(v14);
  uint64_t v16 = (dispatch_group_t *)((char *)v32 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v17 = swift_projectBox();
  swift_beginAccess();
  sub_100156D3C(a1, v17, (uint64_t *)&unk_101656900);
  sub_10001D074(a1, (uint64_t)v16, (uint64_t *)&unk_101656900);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v18 = *v16;
    static os_log_type_t.error.getter();
    if (qword_101637308 != -1) {
      swift_once();
    }
    sub_10000588C((uint64_t *)&unk_10163AD00);
    uint64_t v19 = swift_allocObject();
    *(_OWORD *)(v19 + 16) = xmmword_101342130;
    v32[2] = v18;
    swift_errorRetain();
    sub_10000588C(&qword_101638D40);
    uint64_t v20 = String.init<A>(describing:)();
    uint64_t v22 = v21;
    *(void *)(v19 + 56) = &type metadata for String;
    *(void *)(v19 + 64) = sub_10000B4CC();
    *(void *)(v19 + 32) = v20;
    *(void *)(v19 + 40) = v22;
    os_log(_:dso:log:_:_:)();
    swift_bridgeObjectRelease();
    swift_errorRelease();
  }
  else
  {
    sub_100A84E60((uint64_t)v16, (uint64_t)v13, (uint64_t (*)(void))type metadata accessor for OwnedBeaconRecord);
    static os_log_type_t.default.getter();
    if (qword_101637308 != -1) {
      swift_once();
    }
    sub_10000588C((uint64_t *)&unk_10163AD00);
    uint64_t v23 = swift_allocObject();
    *(_OWORD *)(v23 + 16) = xmmword_101342130;
    sub_100A84754((uint64_t)v13, (uint64_t)v11, (uint64_t (*)(void))type metadata accessor for OwnedBeaconRecord);
    uint64_t v24 = String.init<A>(describing:)();
    uint64_t v26 = v25;
    *(void *)(v23 + 56) = &type metadata for String;
    *(void *)(v23 + 64) = sub_10000B4CC();
    *(void *)(v23 + 32) = v24;
    *(void *)(v23 + 40) = v26;
    os_log(_:dso:log:_:_:)();
    swift_bridgeObjectRelease();
    sub_100A632C8((uint64_t)v13);
    uint64_t v27 = (NSObject **)(*(void *)((char *)a6[9].isa
                                  + OBJC_IVAR____TtC12searchpartyd27AccessoryPairingCoordinator_locationMonitor)
                      + OBJC_IVAR____TtC12searchpartyd22CurrentLocationMonitor_currentLocation);
    swift_beginAccess();
    id v28 = *v27;
    if (*v27)
    {
      uint64_t v29 = &v13[*(int *)(v8 + 20)];
      uint64_t v30 = type metadata accessor for Transaction();
      __chkstk_darwin(v30);
      v32[-4] = v29;
      v32[-3] = v28;
      v32[-2] = a6;
      uint64_t v31 = v28;
      static Transaction.named<A>(_:with:)();
    }
    else
    {
      static os_log_type_t.error.getter();
      os_log(_:dso:log:_:_:)();
    }
    sub_100A853E0((uint64_t)v13, (uint64_t (*)(void))type metadata accessor for OwnedBeaconRecord);
  }
  dispatch_group_leave(v32[0]);
}

uint64_t sub_100A83F1C(uint64_t a1, uint64_t a2, void *a3, uint64_t a4)
{
  uint64_t v41 = a1;
  uint64_t v39 = a4;
  uint64_t v34 = a2;
  uint64_t v6 = type metadata accessor for UUID();
  uint64_t v35 = *(void *)(v6 - 8);
  uint64_t v7 = v35;
  uint64_t v40 = *(void *)(v35 + 64);
  __chkstk_darwin(v6);
  uint64_t v38 = (char *)&v33 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = type metadata accessor for BeaconEstimatedLocation();
  uint64_t v10 = (int *)(v9 - 8);
  uint64_t v37 = *(void *)(v9 - 8);
  uint64_t v11 = *(void *)(v37 + 64);
  uint64_t v12 = __chkstk_darwin(v9);
  uint64_t v36 = (uint64_t)&v33 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v12);
  uint64_t v14 = (char *)&v33 - v13;
  UUID.init()();
  uint64_t v15 = *(void (**)(char *, uint64_t, uint64_t))(v7 + 16);
  v15(&v14[v10[8]], a2, v6);
  [a3 coordinate];
  uint64_t v17 = v16;
  [a3 coordinate];
  uint64_t v19 = v18;
  [a3 horizontalAccuracy];
  uint64_t v21 = v20;
  id v22 = [a3 timestamp];
  static Date._unconditionallyBridgeFromObjectiveC(_:)();

  uint64_t v23 = &v14[v10[14]];
  uint64_t v24 = type metadata accessor for Date();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v24 - 8) + 56))(v23, 1, 1, v24);
  *(_OWORD *)uint64_t v14 = xmmword_101348180;
  *(void *)&v14[v10[9]] = v17;
  *(void *)&v14[v10[10]] = v19;
  *(void *)&v14[v10[11]] = v21;
  v14[v10[13]] = 1;
  *(void *)&v14[v10[15]] = 0;
  uint64_t v39 = *(void *)(v39 + 24);
  uint64_t v25 = v36;
  sub_100A84754((uint64_t)v14, v36, (uint64_t (*)(void))type metadata accessor for BeaconEstimatedLocation);
  uint64_t v26 = v38;
  uint64_t v27 = v6;
  v15(v38, v34, v6);
  unint64_t v28 = (*(unsigned __int8 *)(v37 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v37 + 80);
  uint64_t v29 = v35;
  unint64_t v30 = (v11 + *(unsigned __int8 *)(v35 + 80) + v28) & ~(unint64_t)*(unsigned __int8 *)(v35 + 80);
  uint64_t v31 = swift_allocObject();
  *(void *)(v31 + 16) = v41;
  sub_100A84E60(v25, v31 + v28, (uint64_t (*)(void))type metadata accessor for BeaconEstimatedLocation);
  (*(void (**)(unint64_t, char *, uint64_t))(v29 + 32))(v31 + v30, v26, v27);
  swift_retain();
  sub_100AB6E00((uint64_t)v14, (uint64_t)sub_100A84A10, v31);
  swift_release();
  return sub_100A853E0((uint64_t)v14, (uint64_t (*)(void))type metadata accessor for BeaconEstimatedLocation);
}

uint64_t sub_100A842DC(uint64_t a1)
{
  uint64_t v2 = sub_10000588C(&qword_1016428D8);
  __chkstk_darwin(v2);
  uint64_t v4 = (void *)((char *)v23 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0));
  Transaction.capture()();
  sub_10001D074(a1, (uint64_t)v4, &qword_1016428D8);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v5 = *v4;
    static os_log_type_t.error.getter();
    if (qword_101637308 != -1) {
      swift_once();
    }
    sub_10000588C((uint64_t *)&unk_10163AD00);
    uint64_t v6 = swift_allocObject();
    *(_OWORD *)(v6 + 16) = xmmword_101347500;
    type metadata accessor for BeaconEstimatedLocation();
    type metadata accessor for Date();
    sub_100A872C8((unint64_t *)&qword_101638DA0, (void (*)(uint64_t))&type metadata accessor for Date);
    uint64_t v7 = dispatch thunk of CustomStringConvertible.description.getter();
    uint64_t v9 = v8;
    *(void *)(v6 + 56) = &type metadata for String;
    unint64_t v10 = sub_10000B4CC();
    *(void *)(v6 + 64) = v10;
    *(void *)(v6 + 32) = v7;
    *(void *)(v6 + 40) = v9;
    type metadata accessor for UUID();
    sub_100A872C8((unint64_t *)&qword_101638B10, (void (*)(uint64_t))&type metadata accessor for UUID);
    uint64_t v11 = dispatch thunk of CustomStringConvertible.description.getter();
    *(void *)(v6 + 96) = &type metadata for String;
    *(void *)(v6 + 104) = v10;
    *(void *)(v6 + 72) = v11;
    *(void *)(v6 + 80) = v12;
    v23[1] = v5;
    swift_errorRetain();
    sub_10000588C(&qword_101638D40);
    uint64_t v13 = String.init<A>(describing:)();
    *(void *)(v6 + 136) = &type metadata for String;
    *(void *)(v6 + 144) = v10;
    *(void *)(v6 + 112) = v13;
    *(void *)(v6 + 120) = v14;
    os_log(_:dso:log:_:_:)();
    swift_bridgeObjectRelease();
    return swift_errorRelease();
  }
  else
  {
    static os_log_type_t.default.getter();
    if (qword_101637308 != -1) {
      swift_once();
    }
    sub_10000588C((uint64_t *)&unk_10163AD00);
    uint64_t v16 = swift_allocObject();
    *(_OWORD *)(v16 + 16) = xmmword_101347BA0;
    type metadata accessor for BeaconEstimatedLocation();
    type metadata accessor for Date();
    sub_100A872C8((unint64_t *)&qword_101638DA0, (void (*)(uint64_t))&type metadata accessor for Date);
    uint64_t v17 = dispatch thunk of CustomStringConvertible.description.getter();
    uint64_t v19 = v18;
    *(void *)(v16 + 56) = &type metadata for String;
    unint64_t v20 = sub_10000B4CC();
    *(void *)(v16 + 64) = v20;
    *(void *)(v16 + 32) = v17;
    *(void *)(v16 + 40) = v19;
    type metadata accessor for UUID();
    sub_100A872C8((unint64_t *)&qword_101638B10, (void (*)(uint64_t))&type metadata accessor for UUID);
    uint64_t v21 = dispatch thunk of CustomStringConvertible.description.getter();
    *(void *)(v16 + 96) = &type metadata for String;
    *(void *)(v16 + 104) = v20;
    *(void *)(v16 + 72) = v21;
    *(void *)(v16 + 80) = v22;
    os_log(_:dso:log:_:_:)();
    swift_bridgeObjectRelease();
    return sub_10001DAB4((uint64_t)v4, &qword_1016428D8);
  }
}

uint64_t sub_100A846D8()
{
  swift_release();
  swift_release();
  swift_release();

  return _swift_deallocObject(v0, 48, 7);
}

void sub_100A84728(uint64_t a1, uint64_t a2)
{
  sub_100A83AA0(a1, a2, *(NSObject **)(v2 + 16), *(void *)(v2 + 24), *(void *)(v2 + 32), *(NSObject **)(v2 + 40));
}

uint64_t sub_100A84734(uint64_t a1)
{
  return sub_100A83F1C(a1, *(void *)(v1 + 16), *(void **)(v1 + 24), *(void *)(v1 + 32));
}

uint64_t sub_100A84754(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

uint64_t sub_100A847BC()
{
  uint64_t v1 = (int *)type metadata accessor for BeaconEstimatedLocation();
  uint64_t v17 = *(unsigned __int8 *)(*((void *)v1 - 1) + 80);
  uint64_t v15 = *(void *)(*((void *)v1 - 1) + 64);
  uint64_t v2 = type metadata accessor for UUID();
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t v14 = *(unsigned __int8 *)(v3 + 80);
  uint64_t v13 = *(void *)(v3 + 64);
  swift_release();
  uint64_t v18 = v0;
  uint64_t v16 = (v17 + 24) & ~v17;
  uint64_t v4 = v0 + v16;
  sub_10001CFB8(*(void *)(v0 + v16), *(void *)(v0 + v16 + 8));
  uint64_t v5 = *(void (**)(uint64_t, uint64_t))(v3 + 8);
  v5(v0 + v16 + v1[5], v2);
  v5(v0 + v16 + v1[6], v2);
  uint64_t v6 = v0 + v16 + v1[10];
  uint64_t v7 = type metadata accessor for Date();
  uint64_t v8 = *(void *)(v7 - 8);
  uint64_t v9 = *(void (**)(uint64_t, uint64_t))(v8 + 8);
  v9(v6, v7);
  uint64_t v10 = v4 + v1[12];
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v8 + 48))(v10, 1, v7)) {
    v9(v10, v7);
  }
  uint64_t v11 = (v16 + v15 + v14) & ~v14;
  swift_bridgeObjectRelease();
  v5(v18 + v11, v2);

  return _swift_deallocObject(v18, v11 + v13, v17 | v14 | 7);
}

uint64_t sub_100A84A10(uint64_t a1)
{
  type metadata accessor for BeaconEstimatedLocation();
  type metadata accessor for UUID();

  return sub_100A842DC(a1);
}

uint64_t sub_100A84AE8()
{
  uint64_t v1 = (id *)(v0 + 16);
  switch(*(unsigned char *)(v0 + 56))
  {
    case 0:
    case 7:
    case 0xA:
      goto LABEL_7;
    case 1:
      _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)v1);
      break;
    case 2:

      goto LABEL_7;
    case 3:

      break;
    case 4:
    case 5:
    case 6:
      swift_release();
      break;
    case 8:
      swift_release();
LABEL_7:
      swift_errorRelease();
      break;
    case 9:
      swift_bridgeObjectRelease();
      break;
    default:
      break;
  }

  return _swift_deallocObject(v0, 57, 7);
}

uint64_t sub_100A84BC4(void (*a1)(unsigned char *))
{
  sub_1000610B8(v1 + 16, (uint64_t)v4);
  v4[41] = 1;
  a1(v4);
  return sub_10001DAB4((uint64_t)v4, &qword_10163C5F8);
}

uint64_t sub_100A84C2C(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t sub_100A84C88(uint64_t a1, void (*a2)(void))
{
  return a1;
}

void sub_100A84CDC(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, unint64_t a10, void (*a11)(void))
{
  switch((a10 >> 59) & 6 | ((a8 & 0x2000000000000000) != 0))
  {
    case 0uLL:
    case 1uLL:
      a11();
      uint64_t v15 = a3;
      unint64_t v16 = a4;
      goto LABEL_5;
    case 2uLL:
      unint64_t v18 = a8 & 0xDFFFFFFFFFFFFFFFLL;
      a11();
      ((void (*)(uint64_t, unint64_t))a11)(a3, a4);
      ((void (*)(uint64_t, unint64_t))a11)(a5, a6);
      ((void (*)(uint64_t, unint64_t))a11)(a7, v18);
      uint64_t v15 = a9;
      unint64_t v16 = a10 & 0xCFFFFFFFFFFFFFFFLL;
      goto LABEL_5;
    case 3uLL:
      a11();
      ((void (*)(uint64_t, unint64_t))a11)(a3, a4);
      uint64_t v15 = a5;
      unint64_t v16 = a6;
LABEL_5:
      ((void (*)(uint64_t, unint64_t))a11)(v15, v16);
      break;
    default:
      return;
  }
}

void sub_100A84E58(uint64_t a1)
{
  sub_100A82738(a1, *(void *)(v1 + 16), *(NSObject **)(v1 + 24));
}

uint64_t sub_100A84E60(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 32))(a2, a1, v5);
  return a2;
}

uint64_t sub_100A84EC8@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, unint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v8 = type metadata accessor for String.Encoding();
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  uint64_t v11 = (char *)&v41 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for AccessoryPairingLockCheckResponse();
  static String.Encoding.utf8.getter();
  uint64_t v12 = String.data(using:allowLossyConversion:)();
  unint64_t v14 = v13;
  (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v8);
  if (v14 >> 60 == 15)
  {
    static os_log_type_t.error.getter();
    if (qword_101637308 != -1) {
      swift_once();
    }
    uint64_t result = os_log(_:dso:log:_:_:)();
    uint64_t v16 = 0;
    long long v17 = xmmword_101347BC0;
    uint64_t v18 = 0x3000000000000000;
    long long v19 = xmmword_101347BC0;
    long long v20 = xmmword_101347BC0;
    long long v21 = xmmword_101347BC0;
  }
  else
  {
    uint64_t v48 = v12;
    unint64_t v49 = v14;
    uint64_t v22 = a1[2];
    unint64_t v23 = a1[3];
    uint64_t v46 = v22;
    unint64_t v47 = v23;
    uint64_t v24 = 0;
    switch(v14 >> 62)
    {
      case 1uLL:
        LODWORD(v24) = HIDWORD(v12) - v12;
        if (__OFSUB__(HIDWORD(v12), v12)) {
          goto LABEL_21;
        }
        uint64_t v24 = (int)v24;
LABEL_10:
        uint64_t v28 = 60 - v24;
        if (__OFSUB__(60, v24))
        {
          __break(1u);
LABEL_20:
          __break(1u);
LABEL_21:
          __break(1u);
LABEL_22:
          __break(1u);
LABEL_23:
          __break(1u);
LABEL_24:
          __break(1u);
          JUMPOUT(0x100A8528CLL);
        }
        uint64_t v45 = a2;
        sub_1000361E0(v22, v23);
        *(void *)&v50[0] = sub_10085E9A4(v28);
        *((void *)&v50[0] + 1) = v29;
        sub_10072AD40((uint64_t *)v50, 0);
        long long v30 = v50[0];
        Data.append(_:)();
        sub_10001CFB8(v30, *((unint64_t *)&v30 + 1));
        uint64_t v31 = 0;
        uint64_t v32 = v45;
        switch(v23 >> 62)
        {
          case 1uLL:
            LODWORD(v31) = HIDWORD(v22) - v22;
            if (__OFSUB__(HIDWORD(v22), v22)) {
              goto LABEL_23;
            }
            uint64_t v31 = (int)v31;
LABEL_16:
            if (__OFSUB__(100, v31)) {
              goto LABEL_20;
            }
            *(void *)&v50[0] = sub_10085E9A4(100 - v31);
            *((void *)&v50[0] + 1) = v35;
            sub_10072AD40((uint64_t *)v50, 0);
            long long v36 = v50[0];
            Data.append(_:)();
            sub_10001CFB8(v36, *((unint64_t *)&v36 + 1));
            uint64_t v37 = a1[4];
            unint64_t v38 = a1[5];
            uint64_t v39 = *a1;
            unint64_t v40 = a1[1];
            sub_1006E699C(v32, a3, v37, v38, v39, v40, v48, v49, v50, v46, v47);
            long long v43 = v50[1];
            long long v44 = v50[0];
            long long v42 = v50[2];
            long long v41 = v50[3];
            uint64_t v16 = v51;
            uint64_t v18 = v52 | 0x1000000000000000;
            sub_1000361E0(v32, a3);
            sub_1000361E0(v37, v38);
            uint64_t result = sub_1000361E0(v39, v40);
            long long v21 = v41;
            long long v20 = v42;
            long long v19 = v43;
            long long v17 = v44;
            break;
          case 2uLL:
            uint64_t v34 = *(void *)(v22 + 16);
            uint64_t v33 = *(void *)(v22 + 24);
            BOOL v27 = __OFSUB__(v33, v34);
            uint64_t v31 = v33 - v34;
            if (!v27) {
              goto LABEL_16;
            }
            goto LABEL_24;
          case 3uLL:
            goto LABEL_16;
          default:
            uint64_t v31 = BYTE6(v23);
            goto LABEL_16;
        }
        break;
      case 2uLL:
        uint64_t v26 = *(void *)(v12 + 16);
        uint64_t v25 = *(void *)(v12 + 24);
        BOOL v27 = __OFSUB__(v25, v26);
        uint64_t v24 = v25 - v26;
        if (!v27) {
          goto LABEL_10;
        }
        goto LABEL_22;
      case 3uLL:
        goto LABEL_10;
      default:
        uint64_t v24 = BYTE6(v14);
        goto LABEL_10;
    }
  }
  *(_OWORD *)a4 = v17;
  *(_OWORD *)(a4 + 16) = v19;
  *(_OWORD *)(a4 + 32) = v20;
  *(_OWORD *)(a4 + 48) = v21;
  *(void *)(a4 + 64) = v16;
  *(void *)(a4 + 72) = v18;
  return result;
}

uint64_t sub_100A852AC(uint64_t a1)
{
  return a1;
}

uint64_t sub_100A85308(uint64_t result, unint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, unint64_t a12, uint64_t a13, unint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, unint64_t a18)
{
  if (a6)
  {
    sub_10001CFB8(result, a2);
    sub_10001CFB8(a3, a4);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    sub_10001CFB8(a11, a12);
    sub_10001CFB8(a13, a14);
    swift_bridgeObjectRelease();
    return sub_100037A24(a17, a18);
  }
  return result;
}

uint64_t sub_100A853E0(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t sub_100A85440()
{
  swift_weakDestroy();

  return _swift_deallocObject(v0, 24, 7);
}

uint64_t sub_100A85478()
{
  return sub_100A87278((void (*)(void))&_swift_release);
}

uint64_t sub_100A85490(uint64_t a1)
{
  return sub_100A80D40(a1, *(void *)(v1 + 16), *(void *)(v1 + 24));
}

uint64_t sub_100A85498()
{
  swift_release();
  sub_100A84CDC(*(void *)(v0 + 24), *(void *)(v0 + 32), *(void *)(v0 + 40), *(void *)(v0 + 48), *(void *)(v0 + 56), *(void *)(v0 + 64), *(void *)(v0 + 72), *(void *)(v0 + 80), *(void *)(v0 + 88), *(void *)(v0 + 96), (void (*)(void))sub_10001CFB8);
  swift_release();

  return _swift_deallocObject(v0, 112, 7);
}

uint64_t sub_100A85510(void (*a1)(_OWORD *), uint64_t a2)
{
  return sub_100A801C0(a1, a2, *(void *)(v2 + 16), v2 + 24, *(void *)(v2 + 104));
}

unint64_t sub_100A85520()
{
  unint64_t result = qword_101658080;
  if (!qword_101658080)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_101658080);
  }
  return result;
}

uint64_t sub_100A85574(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v64 = a4;
  uint64_t v63 = a3;
  uint64_t v6 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v69 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  id v66 = (char *)&v59 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v68 = type metadata accessor for DispatchQoS();
  uint64_t v67 = *(void *)(v68 - 8);
  __chkstk_darwin(v68);
  uint64_t v65 = (char *)&v59 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v62 = type metadata accessor for DispatchQoS.QoSClass();
  uint64_t v9 = *(void *)(v62 - 8);
  __chkstk_darwin(v62);
  uint64_t v11 = (char *)&v59 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = type metadata accessor for DispatchPredicate();
  uint64_t v13 = *(void *)(v12 - 8);
  __chkstk_darwin(v12);
  uint64_t v15 = (uint64_t *)((char *)&v59 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0));
  sub_10001D074(a1, (uint64_t)v78, &qword_10163C5F8);
  if (v78[41])
  {
    uint64_t v61 = v6;
    sub_10006105C((uint64_t)v78, (uint64_t)v77);
    os_log_type_t v16 = static os_log_type_t.error.getter();
    if (qword_101637308 != -1) {
      swift_once();
    }
    long long v17 = qword_10170F060;
    sub_1000610B8((uint64_t)v77, (uint64_t)&aBlock);
    if (os_log_type_enabled(v17, v16))
    {
      uint64_t v18 = (uint8_t *)swift_slowAlloc();
      unint64_t v74 = (void *)swift_slowAlloc();
      *(_DWORD *)uint64_t v18 = 136446210;
      uint64_t v19 = sub_101321420();
      uint64_t v76 = sub_1008FA0F0(v19, v20, (uint64_t *)&v74);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      sub_100061288((uint64_t)&aBlock);
      _os_log_impl((void *)&_mh_execute_header, v17, v16, "Pairing error %{public}s", v18, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      sub_100061288((uint64_t)&aBlock);
    }
    sub_1000610B8((uint64_t)v77, (uint64_t)&aBlock);
    uint64_t v26 = aBlock;
    if (v73 == 9)
    {
      long long v44 = (void *)v71.i64[0];
      type metadata accessor for SPPairingSessionError(0);
      uint64_t v76 = 3;
      sub_1004A0BC8((uint64_t)_swiftEmptyArrayStorage);
      sub_100A872C8(&qword_101638770, type metadata accessor for SPPairingSessionError);
      _BridgedStoredNSError.init(_:userInfo:)();
      uint64_t v29 = v74;
      unint64_t v74 = 0;
      unint64_t v75 = 0xE000000000000000;
      _StringGuts.grow(_:)(42);
      swift_bridgeObjectRelease();
      unint64_t v74 = (void *)0xD000000000000028;
      unint64_t v75 = 0x8000000101411690;
      v45._countAndFlagsBits = v26;
      v45._object = v44;
      String.append(_:)(v45);
      swift_bridgeObjectRelease();
      uint64_t v60 = v74;
    }
    else
    {
      if (v73 != 11) {
        goto LABEL_36;
      }
      int8x16_t v27 = vorrq_s8(v71, v72);
      int8x8_t v28 = vorr_s8(*(int8x8_t *)v27.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v27, v27, 8uLL));
      if (aBlock == 4 && !*(void *)&v28)
      {
        type metadata accessor for SPPairingSessionError(0);
        uint64_t v76 = 12;
        sub_1004A0BC8((uint64_t)_swiftEmptyArrayStorage);
        sub_100A872C8(&qword_101638770, type metadata accessor for SPPairingSessionError);
        _BridgedStoredNSError.init(_:userInfo:)();
        uint64_t v29 = v74;
        unint64_t v74 = 0;
        unint64_t v75 = 0xE000000000000000;
        _StringGuts.grow(_:)(52);
        v30._countAndFlagsBits = 0xD000000000000032;
        v30._object = (void *)0x80000001014116C0;
        String.append(_:)(v30);
LABEL_28:
        v46._countAndFlagsBits = sub_1011418C0(*(unsigned char *)(*(void *)(v4 + 72)
                                                        + OBJC_IVAR____TtC12searchpartyd27AccessoryPairingCoordinator_pairingState));
        String.append(_:)(v46);
        swift_bridgeObjectRelease();
        uint64_t v60 = v74;
        goto LABEL_37;
      }
      if (aBlock == 6 && !*(void *)&v28)
      {
        type metadata accessor for SPPairingSessionError(0);
        uint64_t v76 = 6;
        sub_1004A0BC8((uint64_t)_swiftEmptyArrayStorage);
        sub_100A872C8(&qword_101638770, type metadata accessor for SPPairingSessionError);
        _BridgedStoredNSError.init(_:userInfo:)();
        uint64_t v29 = v74;
        unint64_t v74 = 0;
        unint64_t v75 = 0xE000000000000000;
        _StringGuts.grow(_:)(35);
        swift_bridgeObjectRelease();
        unint64_t v74 = (void *)0xD000000000000021;
        unint64_t v75 = 0x8000000101411630;
        goto LABEL_28;
      }
      if (aBlock == 8 && !*(void *)&v28)
      {
        type metadata accessor for SPPairingSessionError(0);
        uint64_t v76 = 18;
        sub_1004A0BC8((uint64_t)_swiftEmptyArrayStorage);
        sub_100A872C8(&qword_101638770, type metadata accessor for SPPairingSessionError);
        _BridgedStoredNSError.init(_:userInfo:)();
        uint64_t v29 = v74;
        uint64_t v60 = (void *)0xD00000000000002DLL;
        goto LABEL_37;
      }
      if (aBlock != 10 || *(void *)&v28)
      {
LABEL_36:
        type metadata accessor for SPPairingSessionError(0);
        uint64_t v76 = 12;
        sub_1004A0BC8((uint64_t)_swiftEmptyArrayStorage);
        sub_100A872C8(&qword_101638770, type metadata accessor for SPPairingSessionError);
        _BridgedStoredNSError.init(_:userInfo:)();
        uint64_t v29 = v74;
        unint64_t v74 = 0;
        unint64_t v75 = 0xE000000000000000;
        _StringGuts.grow(_:)(55);
        v47._countAndFlagsBits = 0xD000000000000035;
        v47._object = (void *)0x80000001014115F0;
        String.append(_:)(v47);
        v48._countAndFlagsBits = sub_1011418C0(*(unsigned char *)(*(void *)(v4 + 72)
                                                        + OBJC_IVAR____TtC12searchpartyd27AccessoryPairingCoordinator_pairingState));
        String.append(_:)(v48);
        swift_bridgeObjectRelease();
        uint64_t v60 = v74;
        sub_100061288((uint64_t)&aBlock);
        goto LABEL_37;
      }
      if (*(unsigned __int8 *)(*(void *)(v4 + 72)
                              + OBJC_IVAR____TtC12searchpartyd27AccessoryPairingCoordinator_pairingState) > 5u)
        return sub_100061288((uint64_t)v77);
      uint64_t v60 = (void *)0xD000000000000020;
      type metadata accessor for SPPairingSessionError(0);
      uint64_t v76 = 13;
      sub_1004A0BC8((uint64_t)_swiftEmptyArrayStorage);
      sub_100A872C8(&qword_101638770, type metadata accessor for SPPairingSessionError);
      _BridgedStoredNSError.init(_:userInfo:)();
      uint64_t v29 = v74;
    }
LABEL_37:
    unint64_t v49 = v29;
    sub_100A7F0FC(1);
    sub_10000584C();
    uint64_t v50 = v62;
    (*(void (**)(char *, void, uint64_t))(v9 + 104))(v11, enum case for DispatchQoS.QoSClass.default(_:), v62);
    uint64_t v51 = (void *)static OS_dispatch_queue.global(qos:)();
    (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v50);
    uint64_t v52 = (void *)swift_allocObject();
    uint64_t v53 = v64;
    v52[2] = v63;
    v52[3] = v53;
    v52[4] = v49;
    v72.i64[1] = (uint64_t)sub_10027B0F4;
    unint64_t v73 = v52;
    uint64_t aBlock = (uint64_t)_NSConcreteStackBlock;
    v71.i64[0] = 1107296256;
    v71.i64[1] = (uint64_t)sub_1004B5480;
    v72.i64[0] = (uint64_t)&unk_1015E6370;
    unint64_t v54 = _Block_copy(&aBlock);
    swift_retain();
    int v55 = v49;
    unint64_t v56 = v65;
    static DispatchQoS.unspecified.getter();
    unint64_t v74 = _swiftEmptyArrayStorage;
    sub_100A872C8((unint64_t *)&qword_10163B7E0, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
    sub_10000588C((uint64_t *)&unk_10163F350);
    sub_100062734((unint64_t *)&qword_10163B7F0, (uint64_t *)&unk_10163F350);
    uint64_t v57 = v66;
    uint64_t v58 = v61;
    dispatch thunk of SetAlgebra.init<A>(_:)();
    OS_dispatch_queue.async(group:qos:flags:execute:)();
    _Block_release(v54);

    (*(void (**)(char *, uint64_t))(v69 + 8))(v57, v58);
    (*(void (**)(char *, uint64_t))(v67 + 8))(v56, v68);
    swift_release();
    sub_1001BDFB8();

    swift_bridgeObjectRelease();
    return sub_100061288((uint64_t)v77);
  }
  uint64_t v21 = v4;
  uint64_t v22 = *(void *)(v4 + 72);
  uint64_t v23 = OBJC_IVAR____TtC12searchpartyd27AccessoryPairingCoordinator_pairingState;
  int v24 = *(unsigned __int8 *)(v22 + OBJC_IVAR____TtC12searchpartyd27AccessoryPairingCoordinator_pairingState);
  if (v24 == 5)
  {
    uint64_t v61 = v6;
    static os_log_type_t.default.getter();
    if (qword_101637308 != -1) {
      swift_once();
    }
    os_log(_:dso:log:_:_:)();
    *(unsigned char *)(v22 + v23) = 6;
    *(void *)(v21 + 88) = 0;
    swift_release();
    *(void *)(v21 + 96) = 0;
    swift_release();
    uint64_t v31 = *(void **)(v22 + 24);
    *uint64_t v15 = v31;
    (*(void (**)(void *, void, uint64_t))(v13 + 104))(v15, enum case for DispatchPredicate.onQueue(_:), v12);
    id v32 = v31;
    LOBYTE(v31) = _dispatchPreconditionTest(_:)();
    uint64_t v34 = *(void (**)(void *, uint64_t))(v13 + 8);
    uint64_t v33 = v13 + 8;
    v34(v15, v12);
    if (v31)
    {
      static os_log_type_t.default.getter();
      os_log(_:dso:log:_:_:)();
      *(unsigned char *)(v22 + v23) = 8;
      sub_101143490(0, 0);
      OSAllocatedUnfairLock.callAsFunction<A>(_:)();
      uint64_t aBlock = 12;
      int8x16_t v71 = 0u;
      int8x16_t v72 = 0u;
      LOBYTE(v73) = 11;
      sub_100A6D128((uint64_t)&aBlock);
      sub_100061288((uint64_t)&aBlock);
      sub_10000584C();
      uint64_t v35 = v62;
      (*(void (**)(char *, void, uint64_t))(v9 + 104))(v11, enum case for DispatchQoS.QoSClass.default(_:), v62);
      long long v36 = (void *)static OS_dispatch_queue.global(qos:)();
      (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v35);
      uint64_t v37 = swift_allocObject();
      uint64_t v38 = v64;
      *(void *)(v37 + 16) = v63;
      *(void *)(v37 + 24) = v38;
      v72.i64[1] = (uint64_t)sub_1003C6214;
      unint64_t v73 = (void *)v37;
      uint64_t aBlock = (uint64_t)_NSConcreteStackBlock;
      v71.i64[0] = 1107296256;
      v71.i64[1] = (uint64_t)sub_1004B5480;
      v72.i64[0] = (uint64_t)&unk_1015E6410;
      uint64_t v39 = _Block_copy(&aBlock);
      swift_retain();
      unint64_t v40 = v65;
      static DispatchQoS.unspecified.getter();
      v77[0] = _swiftEmptyArrayStorage;
      sub_100A872C8((unint64_t *)&qword_10163B7E0, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
      sub_10000588C((uint64_t *)&unk_10163F350);
      sub_100062734((unint64_t *)&qword_10163B7F0, (uint64_t *)&unk_10163F350);
      long long v41 = v66;
      uint64_t v23 = v61;
LABEL_23:
      dispatch thunk of SetAlgebra.init<A>(_:)();
      OS_dispatch_queue.async(group:qos:flags:execute:)();
      _Block_release(v39);

      (*(void (**)(char *, uint64_t))(v69 + 8))(v41, v23);
      (*(void (**)(char *, uint64_t))(v67 + 8))(v40, v68);
      return swift_release();
    }
    __break(1u);
    goto LABEL_40;
  }
  if (v24 != 3)
  {
    uint64_t v33 = v64;
    uint64_t v23 = v6;
    static os_log_type_t.error.getter();
    if (qword_101637308 == -1)
    {
LABEL_22:
      os_log(_:dso:log:_:_:)();
      sub_100A7F0FC(1);
      sub_10000584C();
      uint64_t v42 = v62;
      (*(void (**)(char *, void, uint64_t))(v9 + 104))(v11, enum case for DispatchQoS.QoSClass.default(_:), v62);
      long long v36 = (void *)static OS_dispatch_queue.global(qos:)();
      (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v42);
      uint64_t v43 = swift_allocObject();
      *(void *)(v43 + 16) = v63;
      *(void *)(v43 + 24) = v33;
      v72.i64[1] = (uint64_t)sub_100A87484;
      unint64_t v73 = (void *)v43;
      uint64_t aBlock = (uint64_t)_NSConcreteStackBlock;
      v71.i64[0] = 1107296256;
      v71.i64[1] = (uint64_t)sub_1004B5480;
      v72.i64[0] = (uint64_t)&unk_1015E63C0;
      uint64_t v39 = _Block_copy(&aBlock);
      swift_retain();
      unint64_t v40 = v65;
      static DispatchQoS.unspecified.getter();
      v77[0] = _swiftEmptyArrayStorage;
      sub_100A872C8((unint64_t *)&qword_10163B7E0, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
      sub_10000588C((uint64_t *)&unk_10163F350);
      sub_100062734((unint64_t *)&qword_10163B7F0, (uint64_t *)&unk_10163F350);
      long long v41 = v66;
      goto LABEL_23;
    }
LABEL_40:
    swift_once();
    goto LABEL_22;
  }
  static os_log_type_t.default.getter();
  if (qword_101637308 != -1) {
    swift_once();
  }
  uint64_t result = os_log(_:dso:log:_:_:)();
  *(unsigned char *)(v22 + v23) = 4;
  return result;
}

uint64_t sub_100A8675C()
{
  swift_release();
  sub_10001CFB8(*(void *)(v0 + 24), *(void *)(v0 + 32));

  return _swift_deallocObject(v0, 40, 7);
}

uint64_t sub_100A8679C(void (*a1)(long long *), uint64_t a2)
{
  return sub_100A7F49C(a1, a2, *(void *)(v2 + 16), *(void *)(v2 + 24), *(void *)(v2 + 32));
}

unint64_t sub_100A867A8()
{
  unint64_t result = qword_101658088;
  if (!qword_101658088)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_101658088);
  }
  return result;
}

unint64_t sub_100A867FC()
{
  unint64_t result = qword_101658090;
  if (!qword_101658090)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_101658090);
  }
  return result;
}

uint64_t sub_100A86850()
{
  sub_100A84CDC(*(void *)(v0 + 16), *(void *)(v0 + 24), *(void *)(v0 + 32), *(void *)(v0 + 40), *(void *)(v0 + 48), *(void *)(v0 + 56), *(void *)(v0 + 64), *(void *)(v0 + 72), *(void *)(v0 + 80), *(void *)(v0 + 88), (void (*)(void))sub_10001CFB8);

  return _swift_deallocObject(v0, 96, 7);
}

uint64_t sub_100A868B8(uint64_t a1)
{
  return sub_100A86A74(a1, (uint64_t (*)(uint64_t, void, void, void, void, void, void))sub_100A7E408);
}

uint64_t sub_100A868E4@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = sub_100A7F1E0(*(void *)a1, *(void *)(a1 + 8));
  *a2 = result;
  return result;
}

double sub_100A86918@<D0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_100A80FD4(a1, a2);
}

uint64_t sub_100A86940()
{
  return sub_100A87278((void (*)(void))&_swift_release);
}

uint64_t sub_100A86958@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = sub_100A827A4(a1, *(void *)(v2 + 24));
  *a2 = result;
  return result;
}

uint64_t sub_100A86988()
{
  swift_release();
  swift_release();

  swift_release();
  swift_release();

  return _swift_deallocObject(v0, 64, 7);
}

uint64_t sub_100A869E0(uint64_t a1)
{
  return sub_100A7F068(a1, v1[2], v1[3], v1[4], v1[5], v1[6], v1[7]);
}

uint64_t sub_100A869F0()
{
  swift_release();

  return _swift_deallocObject(v0, 40, 7);
}

uint64_t sub_100A86A30(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_100A86A40()
{
  return swift_release();
}

uint64_t sub_100A86A48(uint64_t a1)
{
  return sub_100A86A74(a1, (uint64_t (*)(uint64_t, void, void, void, void, void, void))sub_100A7D1E4);
}

uint64_t sub_100A86A74(uint64_t a1, uint64_t (*a2)(uint64_t, void, void, void, void, void, void))
{
  return a2(a1, v2[2], v2[3], v2[4], v2[5], v2[6], v2[7]);
}

uint64_t sub_100A86AA0()
{
  swift_release();

  swift_release();

  return _swift_deallocObject(v0, 40, 7);
}

uint64_t sub_100A86AE8@<X0>(uint64_t *a1@<X8>)
{
  return sub_100A7DB84(*(void **)(v1 + 24), *(void *)(v1 + 32), a1);
}

uint64_t sub_100A86AF4()
{
  swift_release();
  swift_release();
  swift_release();

  return _swift_deallocObject(v0, 48, 7);
}

uint64_t sub_100A86B3C(uint64_t a1)
{
  return sub_100A7DBEC(a1, v1[2], v1[3], v1[4], v1[5]);
}

uint64_t sub_100A86B48()
{
  swift_release();
  uint64_t v1 = (id *)(v0 + 32);
  switch(*(unsigned char *)(v0 + 72))
  {
    case 0:
    case 7:
    case 0xA:
      goto LABEL_7;
    case 1:
      _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)v1);
      break;
    case 2:

      goto LABEL_7;
    case 3:

      break;
    case 4:
    case 5:
    case 6:
      swift_release();
      break;
    case 8:
      swift_release();
LABEL_7:
      swift_errorRelease();
      break;
    case 9:
      swift_bridgeObjectRelease();
      break;
    default:
      break;
  }

  return _swift_deallocObject(v0, 73, 7);
}

uint64_t sub_100A86C2C()
{
  return sub_100A7E1C0(*(void (**)(uint64_t))(v0 + 16), *(void *)(v0 + 24), v0 + 32);
}

uint64_t sub_100A86C38(uint64_t a1)
{
  return sub_100A7B574(a1, *(void *)(v1 + 16), *(void **)(v1 + 24), *(void *)(v1 + 32), *(void *)(v1 + 40));
}

uint64_t sub_100A86C60()
{
  return sub_100A7CA80(*(void **)(v0 + 24));
}

uint64_t sub_100A86C88@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))(v1 + 16))();
  *a1 = result;
  return result;
}

uint64_t sub_100A86CB8()
{
  return sub_101329270(*(void **)(v0 + 64));
}

uint64_t sub_100A86CE4@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))(v1 + 16))();
  *a1 = result;
  return result;
}

uint64_t sub_100A86D14()
{
  swift_release();
  swift_release();

  if (*(void *)(v0 + 40)) {
    swift_release();
  }

  return _swift_deallocObject(v0, 56, 7);
}

void sub_100A86D6C(uint64_t a1)
{
  sub_100A7C00C(a1, *(void *)(v1 + 16), *(void *)(v1 + 24), *(void **)(v1 + 32), *(void *)(v1 + 40), *(void *)(v1 + 48));
}

uint64_t sub_100A86D7C()
{
  if (*(void *)(v0 + 16)) {
    swift_release();
  }
  uint64_t v1 = (id *)(v0 + 32);
  switch(*(unsigned char *)(v0 + 72))
  {
    case 0:
    case 7:
    case 0xA:
      goto LABEL_9;
    case 1:
      _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)v1);
      break;
    case 2:

      goto LABEL_9;
    case 3:

      break;
    case 4:
    case 5:
    case 6:
      swift_release();
      break;
    case 8:
      swift_release();
LABEL_9:
      swift_errorRelease();
      break;
    case 9:
      swift_bridgeObjectRelease();
      break;
    default:
      break;
  }

  return _swift_deallocObject(v0, 73, 7);
}

uint64_t sub_100A86E68()
{
  return sub_100A7CA00(*(void *)(v0 + 16), *(void *)(v0 + 24), v0 + 32);
}

uint64_t sub_100A86E74()
{
  if (*(void *)(v0 + 16)) {
    swift_release();
  }

  return _swift_deallocObject(v0, 32, 7);
}

uint64_t sub_100A86EB4()
{
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 16);
  if (v1) {
    return v1(0);
  }
  return result;
}

uint64_t sub_100A86EE8()
{
  swift_release();

  swift_release();

  return _swift_deallocObject(v0, 48, 7);
}

uint64_t sub_100A86F30()
{
  return sub_100A7B3A8(v0[3], v0[4], v0[5]);
}

uint64_t sub_100A86F5C()
{
  swift_release();
  swift_release();

  return _swift_deallocObject(v0, 56, 7);
}

void sub_100A86FAC()
{
  sub_100A79A38(*(void **)(v0 + 16), *(void **)(v0 + 24), *(void *)(v0 + 32), *(void *)(v0 + 40), *(void **)(v0 + 48));
}

uint64_t sub_100A86FBC()
{
  swift_release();

  return _swift_deallocObject(v0, 32, 7);
}

void sub_100A86FF4()
{
  sub_100A7B00C(*(void (**)(void))(v0 + 16));
}

void sub_100A87014()
{
  sub_100A7B00C(*(void (**)(void))(v0 + 16));
}

void sub_100A87034()
{
  sub_100A7B00C(*(void (**)(void))(v0 + 16));
}

void sub_100A87054()
{
  sub_100A7B00C(*(void (**)(void))(v0 + 16));
}

void sub_100A87074()
{
  sub_100A77268(*(void (**)())(v0 + 16));
}

uint64_t sub_100A87094()
{
  swift_release();
  swift_release();

  return _swift_deallocObject(v0, 48, 7);
}

void sub_100A870DC(char a1)
{
  sub_100A77324(a1, *(void *)(v1 + 16), *(void *)(v1 + 24), *(void *)(v1 + 32), *(void **)(v1 + 40));
}

uint64_t sub_100A870E8()
{
  swift_unknownObjectRelease();
  swift_release();
  swift_release();

  return _swift_deallocObject(v0, 56, 7);
}

void sub_100A87130()
{
  sub_100A77268(*(void (**)())(v0 + 16));
}

void sub_100A87150()
{
  sub_100A77268(*(void (**)())(v0 + 16));
}

uint64_t sub_100A87170()
{
  swift_release();
  swift_release();

  return _swift_deallocObject(v0, 48, 7);
}

uint64_t sub_100A871B8()
{
  return sub_100A77984(*(void **)(v0 + 16), *(void *)(v0 + 24), *(void *)(v0 + 32), *(void *)(v0 + 40));
}

uint64_t sub_100A871C4@<X0>(void **a1@<X0>, uint64_t *a2@<X8>)
{
  return sub_100A786E4(a1, a2);
}

uint64_t sub_100A871CC()
{
  swift_release();
  swift_release();

  return _swift_deallocObject(v0, 48, 7);
}

uint64_t sub_100A87214(uint64_t a1)
{
  return sub_100A78BA0(a1, v1[2], v1[3], v1[4], v1[5]);
}

void sub_100A87220()
{
  sub_100A77268(*(void (**)())(v0 + 16));
}

void sub_100A87240()
{
  sub_100A77268(*(void (**)())(v0 + 16));
}

uint64_t sub_100A87260()
{
  return sub_100A87278((void (*)(void))&_swift_bridgeObjectRelease);
}

uint64_t sub_100A87278(void (*a1)(void))
{
  swift_release();
  a1(*(void *)(v1 + 24));

  return _swift_deallocObject(v1, 32, 7);
}

uint64_t sub_100A872C8(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

unsigned char *storeEnumTagSinglePayload for AccessoryPairingSession.AccessoryPairingSessionError(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFE)
  {
    unsigned int v6 = ((a2 - 255) >> 8) + 1;
    *uint64_t result = a2 + 1;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x100A873DCLL);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 1;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for AccessoryPairingSession.AccessoryPairingSessionError()
{
  return &type metadata for AccessoryPairingSession.AccessoryPairingSessionError;
}

unint64_t sub_100A87418()
{
  unint64_t result = qword_101658190;
  if (!qword_101658190)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_101658190);
  }
  return result;
}

id sub_100A8746C@<X0>(void *a1@<X8>)
{
  return sub_100157FA4(a1);
}

uint64_t sub_100A87544(void *a1)
{
  int v3 = v1;
  uint64_t v5 = type metadata accessor for HashAlgorithm();
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v8 = (char *)&v47 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10001CD44(a1, a1[3]);
  dispatch thunk of BinaryEncoding.container()();
  uint64_t v53 = sub_100A4399C();
  unint64_t v10 = v9;
  uint64_t v12 = *v3;
  unint64_t v11 = v3[1];
  sub_1000361E0(v12, v11);
  uint64_t v13 = sub_100A948F8(v12, v11);
  if (v2)
  {
    sub_10001CFB8(v12, v11);
    static os_log_type_t.error.getter();
    if (qword_101636F48 != -1) {
      swift_once();
    }
    sub_10000588C((uint64_t *)&unk_10163AD00);
    uint64_t v18 = swift_allocObject();
    *(_OWORD *)(v18 + 16) = xmmword_101342130;
    uint64_t v54 = v2;
    swift_errorRetain();
    sub_10000588C(&qword_101638D40);
    uint64_t v19 = String.init<A>(describing:)();
    uint64_t v21 = v20;
    *(void *)(v18 + 56) = &type metadata for String;
    *(void *)(v18 + 64) = sub_10000B4CC();
    *(void *)(v18 + 32) = v19;
    *(void *)(v18 + 40) = v21;
    os_log(_:dso:log:_:_:)();
    swift_bridgeObjectRelease();
    sub_100130148();
    swift_allocError();
    *uint64_t v22 = 1;
    swift_willThrow();
    swift_errorRelease();
    uint64_t v23 = v53;
    uint64_t v24 = v23;
    goto LABEL_7;
  }
  uint64_t v14 = v13;
  uint64_t v50 = v3;
  uint64_t v51 = v6;
  sub_10001CFB8(v12, v11);
  uint64_t v15 = sub_100A90C58(v14, 0);
  unint64_t v17 = v16;
  CCECCryptorRelease();
  uint64_t v26 = sub_10043A38C(v15, v17);
  unint64_t v28 = v27;
  sub_1000361E0(v26, v27);
  uint64_t v48 = v26;
  unint64_t v49 = v28;
  uint64_t v30 = v53;
  sub_100A932C4(&v54);
  uint64_t v32 = v48;
  unint64_t v31 = v49;
  sub_10001CFB8(v48, v49);
  sub_10001CFB8(v32, v31);
  uint64_t v33 = v54;
  unint64_t v49 = v55;
  sub_10001CFB8(v30, v10);
  uint64_t v34 = v51;
  (*(void (**)(char *, void, uint64_t))(v51 + 104))(v8, enum case for HashAlgorithm.sha256(_:), v5);
  uint64_t v35 = Data.hash(algorithm:)();
  unint64_t v37 = v36;
  (*(void (**)(char *, uint64_t))(v34 + 8))(v8, v5);
  uint64_t v54 = v35;
  unint64_t v55 = v37;
  unint64_t v10 = v58;
  sub_1000BD078((uint64_t)v56, v57);
  sub_100135A44();
  dispatch thunk of BinaryEncodingContaining.encode<A>(sequence:)();
  sub_10001CFB8(v35, v37);
  uint64_t v53 = v33;
  unint64_t v38 = v49;
  uint64_t v39 = type metadata accessor for BeaconPayloadV2();
  uint64_t v40 = (uint64_t)v50;
  Date.timeIntervalSinceReferenceDate.getter();
  if ((~*(void *)&v41 & 0x7FF0000000000000) == 0)
  {
    __break(1u);
    goto LABEL_19;
  }
  if (v41 <= -1.0)
  {
LABEL_19:
    __break(1u);
    goto LABEL_20;
  }
  if (v41 < 4294967300.0)
  {
    LODWORD(v54) = bswap32(v41);
    sub_1000BD078((uint64_t)v56, v57);
    sub_100060568();
    dispatch thunk of BinaryEncodingContaining.encode<A>(_:)();
    uint64_t v40 = v39;
    sub_1000BD078((uint64_t)v56, v57);
    type metadata accessor for BeaconPayloadMetaDataV2();
    sub_100A89304();
    dispatch thunk of BinaryEncodingContaining.encode<A>(_:)();
    uint64_t v54 = v53;
    unint64_t v55 = v38;
    unint64_t v10 = v38;
    sub_1000BD078((uint64_t)v56, v57);
    dispatch thunk of BinaryEncodingContaining.encode<A>(sequence:)();
    if (qword_101636CD8 == -1) {
      goto LABEL_12;
    }
    goto LABEL_21;
  }
LABEL_20:
  __break(1u);
LABEL_21:
  swift_once();
LABEL_12:
  OS_dispatch_queue.sync<A>(execute:)();
  char v42 = sub_1010AC6A4(v54);
  swift_bridgeObjectRelease();
  uint64_t v43 = v53;
  long long v44 = v50;
  if (v42) {
    goto LABEL_16;
  }
  if (qword_1016371D8 != -1) {
    swift_once();
  }
  uint64_t v54 = 0x7365547265646E75;
  unint64_t v55 = 0xE900000000000074;
  SynchronousCache.cachedValue<A>(key:computeBlock:)();
  swift_bridgeObjectRelease();
  if (v59 == 1)
  {
LABEL_16:
    Swift::String v45 = (int *)((char *)v44 + *(int *)(v40 + 40));
    int v46 = *v45;
    BYTE4(v54) = *((unsigned char *)v45 + 4);
    LODWORD(v54) = v46;
    sub_1000BD078((uint64_t)v56, v57);
    sub_100A8935C();
    dispatch thunk of BinaryEncodingContaining.encode<A>(_:)();
  }
  uint64_t v24 = v43;
LABEL_7:
  sub_10001CFB8(v24, v10);
  return _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)v56);
}

uint64_t sub_100A87C5C(void *a1)
{
  return sub_100A87544(a1);
}

uint64_t sub_100A87C74@<X0>(uint64_t a1@<X0>, char *a2@<X8>)
{
  uint64_t v4 = type metadata accessor for Date();
  uint64_t v67 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  id v66 = &v50[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v6 = type metadata accessor for Bit();
  uint64_t v64 = *(void *)(v6 - 8);
  uint64_t v65 = v6;
  uint64_t v7 = __chkstk_darwin(v6);
  uint64_t v61 = &v50[-((v8 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __chkstk_darwin(v7);
  uint64_t v63 = &v50[-v9];
  uint64_t v62 = type metadata accessor for BeaconPayloadMetaDataV2();
  __chkstk_darwin(v62);
  unint64_t v11 = &v50[-((v10 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v12 = sub_10000588C(&qword_10163CF50);
  __chkstk_darwin(v12 - 8);
  uint64_t v14 = &v50[-((v13 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v15 = type metadata accessor for ObservedAdvertisement.Location(0);
  uint64_t v16 = *(void *)(v15 - 8);
  __chkstk_darwin(v15);
  uint64_t v18 = (double *)&v50[-((v17 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v19 = type metadata accessor for ObservedAdvertisement(0);
  sub_100A88398(a1 + *(int *)(v19 + 48), (uint64_t)v14);
  if ((*(unsigned int (**)(unsigned char *, uint64_t, uint64_t))(v16 + 48))(v14, 1, v15) == 1)
  {
    sub_100A88400((uint64_t)v14);
    sub_100A88460();
    swift_allocError();
    *uint64_t v20 = 0;
    swift_willThrow();
    return sub_100A884B4(a1, type metadata accessor for ObservedAdvertisement);
  }
  else
  {
    sub_100A88560((uint64_t)v14, (uint64_t)v18, type metadata accessor for ObservedAdvertisement.Location);
    unint64_t v22 = *(void *)(a1 + 24);
    if ((v22 & 0x2000000000000000) != 0)
    {
      sub_100A88460();
      swift_allocError();
      unsigned char *v26 = 1;
      swift_willThrow();
      sub_100A884B4(a1, type metadata accessor for ObservedAdvertisement);
      return sub_100A884B4((uint64_t)v18, type metadata accessor for ObservedAdvertisement.Location);
    }
    else
    {
      uint64_t v56 = *(void *)(a1 + 16);
      unint64_t v57 = v22;
      sub_1000361E0(v56, v22);
      if (qword_101636CD8 != -1) {
        swift_once();
      }
      uint64_t v23 = v60;
      OS_dispatch_queue.sync<A>(execute:)();
      uint64_t v60 = v23;
      char v24 = sub_1010AC6A4(v68);
      swift_bridgeObjectRelease();
      uint64_t v58 = v4;
      char v59 = a2;
      if ((v24 & 1) == 0)
      {
        if (qword_1016371D8 != -1) {
          swift_once();
        }
        uint64_t v68 = 0x7365547265646E75;
        unint64_t v69 = 0xE900000000000074;
        SynchronousCache.cachedValue<A>(key:computeBlock:)();
        swift_bridgeObjectRelease();
        if (v70 != 1) {
          goto LABEL_11;
        }
      }
      if ((*(unsigned char *)(a1 + 35) & 1) == 0)
      {
        uint64_t v27 = 2;
        if (*(unsigned char *)(a1 + *(int *)(v19 + 56))) {
          uint64_t v27 = 0;
        }
        unint64_t v25 = v27 | ((unint64_t)*(unsigned __int8 *)(a1 + 33) << 24) | ((unint64_t)*(unsigned __int8 *)(a1 + 34) << 32);
      }
      else
      {
LABEL_11:
        unint64_t v25 = 3;
      }
      uint64_t v52 = v19;
      unint64_t v55 = v25;
      if (v25 == 3) {
        int v28 = 1;
      }
      else {
        int v28 = 2;
      }
      int v54 = v28;
      double v29 = v18[2];
      int v53 = sub_1002A08EC(v29);
      unsigned int v30 = *(unsigned __int8 *)(a1 + 32);
      int v51 = (v30 >> 4) & 3;
      int v31 = sub_1000D07F4(v30 & 0xB);
      uint64_t v33 = v64;
      uint64_t v32 = v65;
      if (*(unsigned char *)(a1 + *(int *)(v19 + 56))) {
        uint64_t v34 = (unsigned int *)&enum case for Bit.one(_:);
      }
      else {
        uint64_t v34 = (unsigned int *)&enum case for Bit.zero(_:);
      }
      uint64_t v35 = v61;
      (*(void (**)(unsigned char *, void, uint64_t))(v64 + 104))(v61, *v34, v65);
      unint64_t v36 = *(void (**)(unsigned char *, unsigned char *, uint64_t))(v33 + 32);
      unint64_t v37 = v63;
      v36(v63, v35, v32);
      *unint64_t v11 = v53;
      v11[1] = v51;
      v11[2] = v31;
      v11[3] = BYTE1(v31) & 1;
      v11[4] = BYTE2(v31) & 1;
      v11[5] = HIBYTE(v31) & 1;
      v11[6] = v54;
      uint64_t v38 = v62;
      v36(&v11[*(int *)(v62 + 32)], v37, v32);
      v11[*(int *)(v38 + 36)] = 0;
      uint64_t v40 = v66;
      uint64_t v39 = v67;
      uint64_t v41 = v58;
      (*(void (**)(unsigned char *, uint64_t, uint64_t))(v67 + 16))(v66, a1 + *(int *)(v52 + 44), v58);
      double v42 = *v18;
      uint64_t v43 = *((void *)v18 + 1);
      sub_100A884B4((uint64_t)v18, type metadata accessor for ObservedAdvertisement.Location);
      char v44 = *(unsigned char *)(a1 + 32);
      sub_100A884B4(a1, type metadata accessor for ObservedAdvertisement);
      Swift::String v45 = v59;
      unint64_t v46 = v57;
      *(void *)char v59 = v56;
      *((void *)v45 + 1) = v46;
      uint64_t v47 = (int *)type metadata accessor for BeaconPayloadV2();
      (*(void (**)(char *, unsigned char *, uint64_t))(v39 + 32))(&v45[v47[5]], v40, v41);
      *(double *)&v45[v47[6]] = v42;
      *(void *)&v45[v47[7]] = v43;
      *(double *)&v45[v47[8]] = v29;
      v45[v47[9]] = v44;
      uint64_t v48 = &v45[v47[10]];
      int v49 = v55;
      v48[4] = BYTE4(v55);
      *(_DWORD *)uint64_t v48 = v49;
      return sub_100A88560((uint64_t)v11, (uint64_t)&v45[v47[11]], (uint64_t (*)(void))type metadata accessor for BeaconPayloadMetaDataV2);
    }
  }
}

uint64_t sub_100A88398(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_10000588C(&qword_10163CF50);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_100A88400(uint64_t a1)
{
  uint64_t v2 = sub_10000588C(&qword_10163CF50);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

unint64_t sub_100A88460()
{
  unint64_t result = qword_101658198;
  if (!qword_101658198)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_101658198);
  }
  return result;
}

uint64_t sub_100A884B4(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t type metadata accessor for BeaconPayloadV2()
{
  uint64_t result = qword_1016581F8;
  if (!qword_1016581F8) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t sub_100A88560(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 32))(a2, a1, v5);
  return a2;
}

unsigned char *storeEnumTagSinglePayload for BeaconPayloadV2.BeaconPayloadV2Error(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFE)
  {
    unsigned int v6 = ((a2 - 255) >> 8) + 1;
    *uint64_t result = a2 + 1;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x100A88694);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 1;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for BeaconPayloadV2.BeaconPayloadV2Error()
{
  return &type metadata for BeaconPayloadV2.BeaconPayloadV2Error;
}

uint64_t *sub_100A886CC(uint64_t *a1, uint64_t *a2, int *a3)
{
  int v5 = *(_DWORD *)(*((void *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v26 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v26 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v7 = *a2;
    unint64_t v8 = a2[1];
    sub_1000361E0(*a2, v8);
    *a1 = v7;
    a1[1] = v8;
    uint64_t v9 = a3[5];
    uint64_t v10 = (char *)a1 + v9;
    unint64_t v11 = (char *)a2 + v9;
    uint64_t v12 = type metadata accessor for Date();
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v12 - 8) + 16))(v10, v11, v12);
    uint64_t v13 = a3[7];
    *(uint64_t *)((char *)a1 + a3[6]) = *(uint64_t *)((char *)a2 + a3[6]);
    *(uint64_t *)((char *)a1 + v13) = *(uint64_t *)((char *)a2 + v13);
    uint64_t v14 = a3[9];
    *(uint64_t *)((char *)a1 + a3[8]) = *(uint64_t *)((char *)a2 + a3[8]);
    *((unsigned char *)a1 + v14) = *((unsigned char *)a2 + v14);
    uint64_t v15 = a3[10];
    uint64_t v16 = a3[11];
    uint64_t v17 = (char *)a1 + v15;
    uint64_t v18 = (char *)a2 + v15;
    *(_DWORD *)uint64_t v17 = *(_DWORD *)v18;
    v17[4] = v18[4];
    uint64_t v19 = (char *)a1 + v16;
    uint64_t v20 = (char *)a2 + v16;
    *uint64_t v19 = *((unsigned char *)a2 + v16);
    v19[1] = *((unsigned char *)a2 + v16 + 1);
    *(_DWORD *)(v19 + 2) = *(_DWORD *)((char *)a2 + v16 + 2);
    v19[6] = *((unsigned char *)a2 + v16 + 6);
    uint64_t v21 = type metadata accessor for BeaconPayloadMetaDataV2();
    uint64_t v22 = *(int *)(v21 + 32);
    uint64_t v23 = &v19[v22];
    char v24 = &v20[v22];
    uint64_t v25 = type metadata accessor for Bit();
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v25 - 8) + 16))(v23, v24, v25);
    v19[*(int *)(v21 + 36)] = v20[*(int *)(v21 + 36)];
  }
  return a1;
}

uint64_t sub_100A88880(uint64_t a1, uint64_t a2)
{
  sub_10001CFB8(*(void *)a1, *(void *)(a1 + 8));
  uint64_t v4 = a1 + *(int *)(a2 + 20);
  uint64_t v5 = type metadata accessor for Date();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8))(v4, v5);
  uint64_t v6 = a1 + *(int *)(a2 + 44);
  uint64_t v7 = v6 + *(int *)(type metadata accessor for BeaconPayloadMetaDataV2() + 32);
  uint64_t v8 = type metadata accessor for Bit();
  uint64_t v9 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v8 - 8) + 8);

  return v9(v7, v8);
}

uint64_t *sub_100A88954(uint64_t *a1, uint64_t *a2, int *a3)
{
  uint64_t v6 = *a2;
  unint64_t v7 = a2[1];
  sub_1000361E0(*a2, v7);
  *a1 = v6;
  a1[1] = v7;
  uint64_t v8 = a3[5];
  uint64_t v9 = (char *)a1 + v8;
  uint64_t v10 = (char *)a2 + v8;
  uint64_t v11 = type metadata accessor for Date();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v11 - 8) + 16))(v9, v10, v11);
  uint64_t v12 = a3[7];
  *(uint64_t *)((char *)a1 + a3[6]) = *(uint64_t *)((char *)a2 + a3[6]);
  *(uint64_t *)((char *)a1 + v12) = *(uint64_t *)((char *)a2 + v12);
  uint64_t v13 = a3[9];
  *(uint64_t *)((char *)a1 + a3[8]) = *(uint64_t *)((char *)a2 + a3[8]);
  *((unsigned char *)a1 + v13) = *((unsigned char *)a2 + v13);
  uint64_t v14 = a3[10];
  uint64_t v15 = a3[11];
  uint64_t v16 = (char *)a1 + v14;
  uint64_t v17 = (char *)a2 + v14;
  *(_DWORD *)uint64_t v16 = *(_DWORD *)v17;
  v16[4] = v17[4];
  uint64_t v18 = (char *)a1 + v15;
  uint64_t v19 = (char *)a2 + v15;
  *uint64_t v18 = *((unsigned char *)a2 + v15);
  v18[1] = *((unsigned char *)a2 + v15 + 1);
  *(_DWORD *)(v18 + 2) = *(_DWORD *)((char *)a2 + v15 + 2);
  v18[6] = *((unsigned char *)a2 + v15 + 6);
  uint64_t v20 = type metadata accessor for BeaconPayloadMetaDataV2();
  uint64_t v21 = *(int *)(v20 + 32);
  uint64_t v22 = &v18[v21];
  uint64_t v23 = &v19[v21];
  uint64_t v24 = type metadata accessor for Bit();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v24 - 8) + 16))(v22, v23, v24);
  v18[*(int *)(v20 + 36)] = v19[*(int *)(v20 + 36)];
  return a1;
}

uint64_t *sub_100A88AB8(uint64_t *a1, uint64_t *a2, int *a3)
{
  uint64_t v6 = *a2;
  unint64_t v7 = a2[1];
  sub_1000361E0(*a2, v7);
  uint64_t v8 = *a1;
  unint64_t v9 = a1[1];
  *a1 = v6;
  a1[1] = v7;
  sub_10001CFB8(v8, v9);
  uint64_t v10 = a3[5];
  uint64_t v11 = (char *)a1 + v10;
  uint64_t v12 = (char *)a2 + v10;
  uint64_t v13 = type metadata accessor for Date();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v13 - 8) + 24))(v11, v12, v13);
  *(uint64_t *)((char *)a1 + a3[6]) = *(uint64_t *)((char *)a2 + a3[6]);
  *(uint64_t *)((char *)a1 + a3[7]) = *(uint64_t *)((char *)a2 + a3[7]);
  *(uint64_t *)((char *)a1 + a3[8]) = *(uint64_t *)((char *)a2 + a3[8]);
  *((unsigned char *)a1 + a3[9]) = *((unsigned char *)a2 + a3[9]);
  uint64_t v14 = a3[10];
  uint64_t v15 = (char *)a1 + v14;
  uint64_t v16 = (char *)a2 + v14;
  char v17 = v16[4];
  *(_DWORD *)uint64_t v15 = *(_DWORD *)v16;
  v15[4] = v17;
  uint64_t v18 = a3[11];
  uint64_t v19 = (char *)a1 + v18;
  uint64_t v20 = (char *)a2 + v18;
  *uint64_t v19 = *((unsigned char *)a2 + v18);
  v19[1] = *((unsigned char *)a2 + v18 + 1);
  v19[2] = *((unsigned char *)a2 + v18 + 2);
  v19[3] = *((unsigned char *)a2 + v18 + 3);
  void v19[4] = *((unsigned char *)a2 + v18 + 4);
  v19[5] = *((unsigned char *)a2 + v18 + 5);
  v19[6] = *((unsigned char *)a2 + v18 + 6);
  uint64_t v21 = type metadata accessor for BeaconPayloadMetaDataV2();
  uint64_t v22 = *(int *)(v21 + 32);
  uint64_t v23 = &v19[v22];
  uint64_t v24 = &v20[v22];
  uint64_t v25 = type metadata accessor for Bit();
  (*(void (**)(unsigned char *, char *, uint64_t))(*(void *)(v25 - 8) + 24))(v23, v24, v25);
  v19[*(int *)(v21 + 36)] = v20[*(int *)(v21 + 36)];
  return a1;
}

_OWORD *sub_100A88C48(_OWORD *a1, _OWORD *a2, int *a3)
{
  *a1 = *a2;
  uint64_t v6 = a3[5];
  unint64_t v7 = (char *)a1 + v6;
  uint64_t v8 = (char *)a2 + v6;
  uint64_t v9 = type metadata accessor for Date();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v9 - 8) + 32))(v7, v8, v9);
  uint64_t v10 = a3[7];
  *(void *)((char *)a1 + a3[6]) = *(void *)((char *)a2 + a3[6]);
  *(void *)((char *)a1 + v10) = *(void *)((char *)a2 + v10);
  uint64_t v11 = a3[9];
  *(void *)((char *)a1 + a3[8]) = *(void *)((char *)a2 + a3[8]);
  *((unsigned char *)a1 + v11) = *((unsigned char *)a2 + v11);
  uint64_t v12 = a3[10];
  uint64_t v13 = a3[11];
  uint64_t v14 = (char *)a1 + v12;
  uint64_t v15 = (char *)a2 + v12;
  *(_DWORD *)uint64_t v14 = *(_DWORD *)v15;
  v14[4] = v15[4];
  uint64_t v16 = (char *)a1 + v13;
  char v17 = (char *)a2 + v13;
  char *v16 = *((unsigned char *)a2 + v13);
  v16[1] = *((unsigned char *)a2 + v13 + 1);
  *(_DWORD *)(v16 + 2) = *(_DWORD *)((char *)a2 + v13 + 2);
  v16[6] = *((unsigned char *)a2 + v13 + 6);
  uint64_t v18 = type metadata accessor for BeaconPayloadMetaDataV2();
  uint64_t v19 = *(int *)(v18 + 32);
  uint64_t v20 = &v16[v19];
  uint64_t v21 = &v17[v19];
  uint64_t v22 = type metadata accessor for Bit();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v22 - 8) + 32))(v20, v21, v22);
  v16[*(int *)(v18 + 36)] = v17[*(int *)(v18 + 36)];
  return a1;
}

uint64_t *sub_100A88DA0(uint64_t *a1, _OWORD *a2, int *a3)
{
  uint64_t v6 = *a1;
  unint64_t v7 = a1[1];
  *(_OWORD *)a1 = *a2;
  sub_10001CFB8(v6, v7);
  uint64_t v8 = a3[5];
  uint64_t v9 = (char *)a1 + v8;
  uint64_t v10 = (char *)a2 + v8;
  uint64_t v11 = type metadata accessor for Date();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v11 - 8) + 40))(v9, v10, v11);
  uint64_t v12 = a3[7];
  *(uint64_t *)((char *)a1 + a3[6]) = *(void *)((char *)a2 + a3[6]);
  *(uint64_t *)((char *)a1 + v12) = *(void *)((char *)a2 + v12);
  uint64_t v13 = a3[9];
  *(uint64_t *)((char *)a1 + a3[8]) = *(void *)((char *)a2 + a3[8]);
  *((unsigned char *)a1 + v13) = *((unsigned char *)a2 + v13);
  uint64_t v14 = a3[10];
  uint64_t v15 = a3[11];
  uint64_t v16 = (char *)a1 + v14;
  char v17 = (char *)a2 + v14;
  *(_DWORD *)uint64_t v16 = *(_DWORD *)v17;
  v16[4] = v17[4];
  uint64_t v18 = (char *)a1 + v15;
  uint64_t v19 = (char *)a2 + v15;
  *uint64_t v18 = *((unsigned char *)a2 + v15);
  v18[1] = *((unsigned char *)a2 + v15 + 1);
  v18[2] = *((unsigned char *)a2 + v15 + 2);
  v18[3] = *((unsigned char *)a2 + v15 + 3);
  v18[4] = *((unsigned char *)a2 + v15 + 4);
  v18[5] = *((unsigned char *)a2 + v15 + 5);
  v18[6] = *((unsigned char *)a2 + v15 + 6);
  uint64_t v20 = type metadata accessor for BeaconPayloadMetaDataV2();
  uint64_t v21 = *(int *)(v20 + 32);
  uint64_t v22 = &v18[v21];
  uint64_t v23 = &v19[v21];
  uint64_t v24 = type metadata accessor for Bit();
  (*(void (**)(unsigned char *, char *, uint64_t))(*(void *)(v24 - 8) + 40))(v22, v23, v24);
  v18[*(int *)(v20 + 36)] = v19[*(int *)(v20 + 36)];
  return a1;
}

uint64_t sub_100A88F1C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_100A88F30);
}

uint64_t sub_100A88F30(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for Date();
  uint64_t v7 = *(void *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == a2)
  {
    uint64_t v8 = v6;
    uint64_t v9 = a1 + a3[5];
    uint64_t v10 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    return v10(v9, a2, v8);
  }
  else if (a2 == 252)
  {
    unsigned int v12 = *(unsigned __int8 *)(a1 + a3[10]);
    if (v12 >= 2) {
      int v13 = ((v12 + 2147483646) & 0x7FFFFFFF) - 1;
    }
    else {
      int v13 = -2;
    }
    return v13 & ~(v13 >> 31);
  }
  else
  {
    uint64_t v14 = type metadata accessor for BeaconPayloadMetaDataV2();
    uint64_t v15 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v14 - 8) + 48);
    uint64_t v16 = v14;
    uint64_t v17 = a1 + a3[11];
    return v15(v17, a2, v16);
  }
}

uint64_t sub_100A89070(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_100A89084);
}

uint64_t sub_100A89084(uint64_t a1, uint64_t a2, int a3, int *a4)
{
  uint64_t result = type metadata accessor for Date();
  uint64_t v9 = *(void *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    uint64_t v10 = result;
    uint64_t v11 = a1 + a4[5];
    unsigned int v12 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    return v12(v11, a2, a2, v10);
  }
  else if (a3 == 252)
  {
    *(unsigned char *)(a1 + a4[10]) = a2 + 3;
  }
  else
  {
    uint64_t v13 = type metadata accessor for BeaconPayloadMetaDataV2();
    uint64_t v14 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v13 - 8) + 56);
    uint64_t v15 = v13;
    uint64_t v16 = a1 + a4[11];
    return v14(v16, a2, a2, v15);
  }
  return result;
}

uint64_t sub_100A891B0()
{
  uint64_t result = type metadata accessor for Date();
  if (v1 <= 0x3F)
  {
    uint64_t result = type metadata accessor for BeaconPayloadMetaDataV2();
    if (v2 <= 0x3F)
    {
      swift_initStructMetadata();
      return 0;
    }
  }
  return result;
}

unint64_t sub_100A892B0()
{
  unint64_t result = qword_101658248;
  if (!qword_101658248)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_101658248);
  }
  return result;
}

unint64_t sub_100A89304()
{
  unint64_t result = qword_101658250;
  if (!qword_101658250)
  {
    type metadata accessor for BeaconPayloadMetaDataV2();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_101658250);
  }
  return result;
}

unint64_t sub_100A8935C()
{
  unint64_t result = qword_101658258;
  if (!qword_101658258)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_101658258);
  }
  return result;
}

uint64_t sub_100A893B0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  v7[4] = a6;
  v7[5] = a7;
  v7[2] = a4;
  v7[3] = a5;
  return _swift_task_switch(sub_100A893D4, 0, 0);
}

uint64_t sub_100A893D4()
{
  unint64_t v1 = (void *)swift_task_alloc();
  *(void *)(v0 + 48) = v1;
  *unint64_t v1 = v0;
  v1[1] = sub_100A89478;
  uint64_t v2 = *(void *)(v0 + 24);
  return sub_100F388BC(v2);
}

uint64_t sub_100A89478()
{
  *(void *)(*(void *)v1 + 56) = v0;
  swift_task_dealloc();
  if (v0) {
    uint64_t v2 = sub_100A895F4;
  }
  else {
    uint64_t v2 = sub_100A8958C;
  }
  return _swift_task_switch(v2, 0, 0);
}

uint64_t sub_100A8958C()
{
  (*(void (**)(void))(v0 + 32))(0);
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_100A895F4()
{
  uint64_t v1 = v0[7];
  uint64_t v2 = (void (*)(uint64_t))v0[4];
  swift_errorRetain();
  v2(v1);
  swift_errorRelease();
  swift_errorRelease();
  ((void (*)(void))v0[4])(0);
  uint64_t v3 = (uint64_t (*)(void))v0[1];
  return v3();
}

uint64_t sub_100A896FC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  v6[3] = a5;
  v6[4] = a6;
  v6[2] = a4;
  return _swift_task_switch(sub_100A89720, 0, 0);
}

uint64_t sub_100A89720()
{
  uint64_t v1 = (void *)swift_task_alloc();
  *(void *)(v0 + 40) = v1;
  *uint64_t v1 = v0;
  v1[1] = sub_100A897BC;
  return sub_100F38BE0();
}

uint64_t sub_100A897BC()
{
  *(void *)(*(void *)v1 + 48) = v0;
  swift_task_dealloc();
  if (v0) {
    uint64_t v2 = sub_100A89938;
  }
  else {
    uint64_t v2 = sub_100A898D0;
  }
  return _swift_task_switch(v2, 0, 0);
}

uint64_t sub_100A898D0()
{
  (*(void (**)(void))(v0 + 24))(0);
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_100A89938()
{
  uint64_t v1 = v0[6];
  uint64_t v2 = (void (*)(uint64_t))v0[3];
  swift_errorRetain();
  v2(v1);
  swift_errorRelease();
  swift_errorRelease();
  ((void (*)(void))v0[3])(0);
  uint64_t v3 = (uint64_t (*)(void))v0[1];
  return v3();
}

uint64_t sub_100A89B34(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  v7[5] = a6;
  v7[6] = a7;
  v7[3] = a4;
  v7[4] = a5;
  return _swift_task_switch(sub_100A89B58, 0, 0);
}

uint64_t sub_100A89B58()
{
  uint64_t v1 = (void *)swift_task_alloc();
  *(void *)(v0 + 56) = v1;
  *uint64_t v1 = v0;
  v1[1] = sub_100A89BFC;
  uint64_t v2 = *(void *)(v0 + 32);
  return sub_100F38ED0(v2);
}

uint64_t sub_100A89BFC(uint64_t a1, char a2)
{
  uint64_t v5 = *v3;
  uint64_t v6 = *v3;
  *(void *)(*v3 + 64) = a1;
  swift_task_dealloc();
  if (v2)
  {
    uint64_t v7 = *(uint64_t (**)(void))(v6 + 8);
    return v7();
  }
  else
  {
    *(unsigned char *)(v5 + 72) = a2;
    return _swift_task_switch(sub_100A89D4C, 0, 0);
  }
}

uint64_t sub_100A89D4C()
{
  uint64_t v1 = *(void **)(v0 + 64);
  uint64_t v2 = *(void (**)(void *, void *))(v0 + 40);
  if (*(unsigned char *)(v0 + 72))
  {
    *(void *)(v0 + 16) = v1;
    swift_errorRetain();
    sub_10000588C(&qword_101638D40);
    swift_willThrowTypedImpl();
    swift_errorRetain();
    v2(0, v1);
    sub_100173E7C(v1, 1);
    sub_100173E7C(v1, 1);
    swift_errorRelease();
  }
  else
  {
    id v3 = v1;
    v2(v1, 0);
    sub_100173E7C(v1, 0);
    sub_100173E7C(v1, 0);
  }
  uint64_t v4 = *(uint64_t (**)(void))(v0 + 8);
  return v4();
}

id sub_100A8A11C()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for LocalFindableConnectionMaterialTrampoline();
  return [super dealloc];
}

uint64_t type metadata accessor for LocalFindableConnectionMaterialTrampoline()
{
  return self;
}

uint64_t sub_100A8A184()
{
  _Block_release(*(const void **)(v0 + 16));

  return _swift_deallocObject(v0, 24, 7);
}

uint64_t sub_100A8A1BC()
{
  uint64_t v1 = type metadata accessor for UUID();
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 40) & ~v3;
  uint64_t v5 = v3 | 7;
  unint64_t v6 = ((*(void *)(v2 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8) + 16;
  swift_unknownObjectRelease();

  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  swift_release();

  return _swift_deallocObject(v0, v6, v5);
}

uint64_t sub_100A8A2B0()
{
  uint64_t v2 = *(void *)(type metadata accessor for UUID() - 8);
  unint64_t v3 = (*(unsigned __int8 *)(v2 + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  unint64_t v4 = (*(void *)(v2 + 64) + v3 + 7) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v5 = *(void *)(v0 + 32);
  uint64_t v6 = v0 + v3;
  uint64_t v7 = swift_task_alloc();
  long long v8 = *(_OWORD *)(v0 + v4);
  *(void *)(v1 + 16) = v7;
  *(void *)uint64_t v7 = v1;
  *(void *)(v7 + 8) = sub_10001D2E4;
  *(_OWORD *)(v7 + 40) = v8;
  *(void *)(v7 + 24) = v5;
  *(void *)(v7 + 32) = v6;
  return _swift_task_switch(sub_100A89B58, 0, 0);
}

uint64_t sub_100A8A3D0()
{
  swift_unknownObjectRelease();

  swift_release();

  return _swift_deallocObject(v0, 56, 7);
}

uint64_t sub_100A8A418()
{
  uint64_t v2 = *(void *)(v0 + 48);
  uint64_t v3 = swift_task_alloc();
  long long v4 = *(_OWORD *)(v0 + 32);
  *(void *)(v1 + 16) = v3;
  *(void *)uint64_t v3 = v1;
  *(void *)(v3 + 8) = sub_10001D2E4;
  *(void *)(v3 + 32) = v2;
  *(_OWORD *)(v3 + 16) = v4;
  return _swift_task_switch(sub_100A89720, 0, 0);
}

void sub_100A8A4CC(void *a1, void (**a2)(void, void))
{
  uint64_t v4 = sub_10000588C(&qword_10164DBB0);
  __chkstk_darwin(v4 - 8);
  uint64_t v6 = (char *)v16 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = swift_allocObject();
  *(void *)(v7 + 16) = a2;
  long long v8 = self;
  _Block_copy(a2);
  id v9 = [v8 currentConnection];
  if (v9)
  {
    id v10 = v9;
    uint64_t v11 = type metadata accessor for TaskPriority();
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v11 - 8) + 56))(v6, 1, 1, v11);
    unsigned int v12 = (void *)swift_allocObject();
    v12[2] = 0;
    v12[3] = 0;
    v12[4] = a1;
    v12[5] = v10;
    v12[6] = sub_1001E06E0;
    v12[7] = v7;
    id v13 = a1;
    swift_retain();
    sub_1008F5E44((uint64_t)v6, (uint64_t)&unk_101658330, (uint64_t)v12);
    swift_release();
    swift_release();
  }
  else
  {
    type metadata accessor for SPLocalFindableConnectionMaterialMonitoringSessionError(0);
    v16[0] = 1;
    sub_1004A0BC8((uint64_t)_swiftEmptyArrayStorage);
    sub_100A8A6CC();
    _BridgedStoredNSError.init(_:userInfo:)();
    uint64_t v14 = (void *)v16[1];
    uint64_t v15 = (void *)_convertErrorToNSError(_:)();
    ((void (**)(void, void *))a2)[2](a2, v15);
    swift_release();
  }
}

unint64_t sub_100A8A6CC()
{
  unint64_t result = qword_101638450;
  if (!qword_101638450)
  {
    type metadata accessor for SPLocalFindableConnectionMaterialMonitoringSessionError(255);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_101638450);
  }
  return result;
}

uint64_t sub_100A8A724()
{
  swift_unknownObjectRelease();

  swift_release();

  return _swift_deallocObject(v0, 64, 7);
}

uint64_t sub_100A8A774()
{
  uint64_t v2 = swift_task_alloc();
  long long v3 = *(_OWORD *)(v0 + 32);
  long long v4 = *(_OWORD *)(v0 + 48);
  *(void *)(v1 + 16) = v2;
  *(void *)uint64_t v2 = v1;
  *(void *)(v2 + 8) = sub_100033F68;
  *(_OWORD *)(v2 + 16) = v3;
  *(_OWORD *)(v2 + 32) = v4;
  return _swift_task_switch(sub_100A893D4, 0, 0);
}

uint64_t sub_100A8A828(uint64_t a1, unint64_t a2)
{
  uint64_t v5 = sub_10000588C(&qword_10163F758);
  __chkstk_darwin(v5 - 8);
  uint64_t v7 = (char *)v35 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  CCCKG2ParamsP224Sha256Version2();
  uint64_t v39 = 0;
  int v8 = CCCKG2OwnerCreate();
  int v36 = v8;
  if (v8 || (uint64_t v17 = v39) == 0)
  {
    static os_log_type_t.error.getter();
    if (qword_101636F48 != -1) {
      swift_once();
    }
    sub_10000588C((uint64_t *)&unk_10163AD00);
    uint64_t v9 = swift_allocObject();
    *(_OWORD *)(v9 + 16) = xmmword_101342130;
    *(void *)(v9 + 56) = &type metadata for Int32;
    *(void *)(v9 + 64) = &protocol witness table for Int32;
    *(_DWORD *)(v9 + 32) = v8;
    os_log(_:dso:log:_:_:)();
    swift_bridgeObjectRelease();
    CryptoError.init(rawValue:)();
    uint64_t v10 = type metadata accessor for CryptoError();
    sub_100A992D8((unint64_t *)&qword_1016605B0, (void (*)(uint64_t))&type metadata accessor for CryptoError);
    swift_allocError();
    uint64_t v12 = v11;
    uint64_t v13 = *(void *)(v10 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v13 + 48))(v7, 1, v10) == 1)
    {
      uint64_t v14 = *(void (**)(uint64_t, void, uint64_t))(v13 + 104);
      a2 = v13 + 104;
      v14(v12, enum case for CryptoError.unspecifiedError(_:), v10);
      sub_100A99278((uint64_t)v7);
    }
    else
    {
      uint64_t v15 = *(void (**)(uint64_t, char *, uint64_t))(v13 + 32);
      a2 = v13 + 32;
      v15(v12, v7, v10);
    }
    swift_willThrow();
    return a2;
  }
  type metadata accessor for CollaborativeKeyGen.v2.OwnerContext();
  *(void *)(swift_allocObject() + 16) = v17;
  CCCKG2GetCommitmentSize();
  int ShareSize = CCCKG2GetShareSize();
  int v19 = ShareSize;
  switch(a2 >> 62)
  {
    case 1uLL:
      if ((int)a1 > a1 >> 32)
      {
        __break(1u);
LABEL_34:
        __break(1u);
LABEL_35:
        __break(1u);
      }
      sub_1000361E0(a1, a2);
      if (!__DataStorage._bytes.getter())
      {
        __DataStorage._length.getter();
        uint64_t v33 = type metadata accessor for CryptoError();
        sub_100A992D8((unint64_t *)&qword_1016605B0, (void (*)(uint64_t))&type metadata accessor for CryptoError);
        swift_allocError();
        (*(void (**)(uint64_t, void, uint64_t))(*(void *)(v33 - 8) + 104))(v34, enum case for CryptoError.memoryFailure(_:), v33);
        swift_willThrow();
LABEL_27:
        uint64_t v21 = a1;
        unint64_t v22 = a2;
LABEL_28:
        sub_10001CFB8(v21, v22);
        goto LABEL_29;
      }
      if (__OFSUB__((int)a1, __DataStorage._offset.getter())) {
        goto LABEL_34;
      }
      __DataStorage._length.getter();
      uint64_t v37 = sub_10085E9A4(v19);
      unint64_t v38 = v23;
      sub_100A95B1C(&v37, &v36);
      if (v2)
      {
        sub_10001CFB8(v37, v38);
        goto LABEL_27;
      }
      sub_10001CFB8(a1, a2);
      return v37;
    case 2uLL:
      uint64_t v24 = *(void *)(a1 + 16);
      swift_retain();
      swift_retain();
      uint64_t v25 = __DataStorage._bytes.getter();
      if (v25)
      {
        uint64_t v26 = v25;
        uint64_t v27 = __DataStorage._offset.getter();
        BOOL v28 = __OFSUB__(v24, v27);
        uint64_t v29 = v24 - v27;
        if (v28) {
          goto LABEL_35;
        }
        __DataStorage._length.getter();
        a2 = v26 + v29;
        uint64_t v37 = sub_10085E9A4(v19);
        unint64_t v38 = v30;
        sub_100A95B1C(&v37, &v36);
        if (!v2)
        {
          a2 = v37;
          swift_release();
          swift_release();
          return a2;
        }
        sub_10001CFB8(v37, v38);
      }
      else
      {
        __DataStorage._length.getter();
        a2 = type metadata accessor for CryptoError();
        sub_100A992D8((unint64_t *)&qword_1016605B0, (void (*)(uint64_t))&type metadata accessor for CryptoError);
        swift_allocError();
        (*(void (**)(uint64_t, void, unint64_t))(*(void *)(a2 - 8) + 104))(v32, enum case for CryptoError.memoryFailure(_:), a2);
        swift_willThrow();
      }
      swift_release();
      swift_release();
LABEL_29:
      swift_release();
      return a2;
    case 3uLL:
      memset(&v35[1], 0, 14);
      uint64_t v37 = sub_10085E9A4(ShareSize);
      unint64_t v38 = v31;
      sub_100A95B1C(&v37, &v36);
      if (!v2) {
        return v37;
      }
      uint64_t v21 = v37;
      unint64_t v22 = v38;
      goto LABEL_28;
    default:
      v35[1] = a1;
      LOWORD(v35[2]) = a2;
      BYTE2(v35[2]) = BYTE2(a2);
      BYTE3(v35[2]) = BYTE3(a2);
      BYTE4(v35[2]) = BYTE4(a2);
      BYTE5(v35[2]) = BYTE5(a2);
      uint64_t v37 = sub_10085E9A4(ShareSize);
      unint64_t v38 = v20;
      sub_100A95B1C(&v37, &v36);
      a2 = v37;
      if (!v2) {
        return a2;
      }
      uint64_t v21 = v37;
      unint64_t v22 = v38;
      goto LABEL_28;
  }
}

uint64_t sub_100A8AEE4(uint64_t a1, unint64_t a2)
{
  uint64_t v5 = sub_10000588C(&qword_10163F758);
  __chkstk_darwin(v5 - 8);
  uint64_t v7 = (char *)v35 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v39 = 0;
  int v8 = CCCKGOwnerCreate();
  int v36 = v8;
  if (v8 || (uint64_t v17 = v39) == 0)
  {
    static os_log_type_t.error.getter();
    if (qword_101636F48 != -1) {
      swift_once();
    }
    sub_10000588C((uint64_t *)&unk_10163AD00);
    uint64_t v9 = swift_allocObject();
    *(_OWORD *)(v9 + 16) = xmmword_101342130;
    *(void *)(v9 + 56) = &type metadata for Int32;
    *(void *)(v9 + 64) = &protocol witness table for Int32;
    *(_DWORD *)(v9 + 32) = v8;
    os_log(_:dso:log:_:_:)();
    swift_bridgeObjectRelease();
    CryptoError.init(rawValue:)();
    uint64_t v10 = type metadata accessor for CryptoError();
    sub_100A992D8((unint64_t *)&qword_1016605B0, (void (*)(uint64_t))&type metadata accessor for CryptoError);
    swift_allocError();
    uint64_t v12 = v11;
    uint64_t v13 = *(void *)(v10 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v13 + 48))(v7, 1, v10) == 1)
    {
      uint64_t v14 = *(void (**)(uint64_t, void, uint64_t))(v13 + 104);
      a2 = v13 + 104;
      v14(v12, enum case for CryptoError.unspecifiedError(_:), v10);
      sub_100A99278((uint64_t)v7);
    }
    else
    {
      uint64_t v15 = *(void (**)(uint64_t, char *, uint64_t))(v13 + 32);
      a2 = v13 + 32;
      v15(v12, v7, v10);
    }
    swift_willThrow();
    return a2;
  }
  type metadata accessor for CollaborativeKeyGen.v1.OwnerContext();
  *(void *)(swift_allocObject() + 16) = v17;
  int v18 = CCCKGGetShareSize();
  int v19 = v18;
  switch(a2 >> 62)
  {
    case 1uLL:
      if ((int)a1 > a1 >> 32)
      {
        __break(1u);
LABEL_34:
        __break(1u);
LABEL_35:
        __break(1u);
      }
      sub_1000361E0(a1, a2);
      if (!__DataStorage._bytes.getter())
      {
        __DataStorage._length.getter();
        uint64_t v33 = type metadata accessor for CryptoError();
        sub_100A992D8((unint64_t *)&qword_1016605B0, (void (*)(uint64_t))&type metadata accessor for CryptoError);
        swift_allocError();
        (*(void (**)(uint64_t, void, uint64_t))(*(void *)(v33 - 8) + 104))(v34, enum case for CryptoError.memoryFailure(_:), v33);
        swift_willThrow();
LABEL_27:
        uint64_t v21 = a1;
        unint64_t v22 = a2;
LABEL_28:
        sub_10001CFB8(v21, v22);
        goto LABEL_29;
      }
      if (__OFSUB__((int)a1, __DataStorage._offset.getter())) {
        goto LABEL_34;
      }
      __DataStorage._length.getter();
      uint64_t v37 = sub_10085E9A4(v19);
      unint64_t v38 = v23;
      sub_100A95D84(&v37, &v36);
      if (v2)
      {
        sub_10001CFB8(v37, v38);
        goto LABEL_27;
      }
      sub_10001CFB8(a1, a2);
      return v37;
    case 2uLL:
      uint64_t v24 = *(void *)(a1 + 16);
      swift_retain();
      swift_retain();
      uint64_t v25 = __DataStorage._bytes.getter();
      if (v25)
      {
        uint64_t v26 = v25;
        uint64_t v27 = __DataStorage._offset.getter();
        BOOL v28 = __OFSUB__(v24, v27);
        uint64_t v29 = v24 - v27;
        if (v28) {
          goto LABEL_35;
        }
        __DataStorage._length.getter();
        a2 = v26 + v29;
        uint64_t v37 = sub_10085E9A4(v19);
        unint64_t v38 = v30;
        sub_100A95D84(&v37, &v36);
        if (!v2)
        {
          a2 = v37;
          swift_release();
          swift_release();
          return a2;
        }
        sub_10001CFB8(v37, v38);
      }
      else
      {
        __DataStorage._length.getter();
        a2 = type metadata accessor for CryptoError();
        sub_100A992D8((unint64_t *)&qword_1016605B0, (void (*)(uint64_t))&type metadata accessor for CryptoError);
        swift_allocError();
        (*(void (**)(uint64_t, void, unint64_t))(*(void *)(a2 - 8) + 104))(v32, enum case for CryptoError.memoryFailure(_:), a2);
        swift_willThrow();
      }
      swift_release();
      swift_release();
LABEL_29:
      swift_release();
      return a2;
    case 3uLL:
      memset(&v35[1], 0, 14);
      uint64_t v37 = sub_10085E9A4(v18);
      unint64_t v38 = v31;
      sub_100A95D84(&v37, &v36);
      if (!v2) {
        return v37;
      }
      uint64_t v21 = v37;
      unint64_t v22 = v38;
      goto LABEL_28;
    default:
      v35[1] = a1;
      LOWORD(v35[2]) = a2;
      BYTE2(v35[2]) = BYTE2(a2);
      BYTE3(v35[2]) = BYTE3(a2);
      BYTE4(v35[2]) = BYTE4(a2);
      BYTE5(v35[2]) = BYTE5(a2);
      uint64_t v37 = sub_10085E9A4(v18);
      unint64_t v38 = v20;
      sub_100A95D84(&v37, &v36);
      a2 = v37;
      if (!v2) {
        return a2;
      }
      uint64_t v21 = v37;
      unint64_t v22 = v38;
      goto LABEL_28;
  }
}

uint64_t sub_100A8B580@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unint64_t a3@<X2>, _OWORD *a4@<X8>)
{
  uint64_t v5 = v4;
  CCCKG2ParamsP224Sha256Version2();
  uint64_t OpeningSize = CCCKG2GetOpeningSize();
  switch(a3 >> 62)
  {
    case 1uLL:
      if (a2 >> 32 < (int)a2) {
        __break(1u);
      }
      swift_retain();
      sub_1000361E0(a2, a3);
      sub_100A965D4((int)a2, a2 >> 32, a1, OpeningSize, (uint64_t)v19);
      uint64_t result = sub_10001CFB8(a2, a3);
      if (!v4) {
        goto LABEL_10;
      }
      return result;
    case 2uLL:
      uint64_t v12 = *(void *)(a2 + 16);
      uint64_t v13 = *(void *)(a2 + 24);
      swift_retain();
      swift_retain();
      swift_retain();
      sub_100A965D4(v12, v13, a1, OpeningSize, (uint64_t)v19);
      swift_release();
      goto LABEL_9;
    case 3uLL:
      memset(v18, 0, 14);
      swift_retain();
      goto LABEL_8;
    default:
      v18[0] = a2;
      LOWORD(v18[1]) = a3;
      BYTE2(v18[1]) = BYTE2(a3);
      BYTE3(v18[1]) = BYTE3(a3);
      BYTE4(v18[1]) = BYTE4(a3);
      BYTE5(v18[1]) = BYTE5(a3);
      swift_retain();
LABEL_8:
      sub_100A92998((uint64_t)v18, a1, OpeningSize, (void (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))sub_100A92C10, (uint64_t)v19);
LABEL_9:
      uint64_t result = swift_release();
      if (!v5)
      {
LABEL_10:
        long long v14 = v19[1];
        long long v15 = v19[2];
        long long v16 = v19[3];
        long long v17 = v19[4];
        *a4 = v19[0];
        a4[1] = v14;
        a4[2] = v15;
        a4[3] = v16;
        a4[4] = v17;
      }
      return result;
  }
}

uint64_t sub_100A8B808@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unint64_t a3@<X2>, _OWORD *a4@<X8>)
{
  uint64_t v5 = v4;
  uint64_t v10 = CCCKGGetOpeningSize();
  switch(a3 >> 62)
  {
    case 1uLL:
      if (a2 >> 32 < (int)a2) {
        __break(1u);
      }
      swift_retain();
      sub_1000361E0(a2, a3);
      sub_100394158((int)a2, a2 >> 32, a1, v10, (uint64_t)v19);
      uint64_t result = sub_10001CFB8(a2, a3);
      if (!v4) {
        goto LABEL_10;
      }
      return result;
    case 2uLL:
      uint64_t v12 = *(void *)(a2 + 16);
      uint64_t v13 = *(void *)(a2 + 24);
      swift_retain();
      swift_retain();
      swift_retain();
      sub_100394158(v12, v13, a1, v10, (uint64_t)v19);
      swift_release();
      goto LABEL_9;
    case 3uLL:
      memset(v18, 0, 14);
      swift_retain();
      goto LABEL_8;
    default:
      v18[0] = a2;
      LOWORD(v18[1]) = a3;
      BYTE2(v18[1]) = BYTE2(a3);
      BYTE3(v18[1]) = BYTE3(a3);
      BYTE4(v18[1]) = BYTE4(a3);
      BYTE5(v18[1]) = BYTE5(a3);
      swift_retain();
LABEL_8:
      sub_100A92998((uint64_t)v18, a1, v10, (void (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))sub_100A91614, (uint64_t)v19);
LABEL_9:
      uint64_t result = swift_release();
      if (!v5)
      {
LABEL_10:
        long long v14 = v19[1];
        long long v15 = v19[2];
        long long v16 = v19[3];
        long long v17 = v19[4];
        *a4 = v19[0];
        a4[1] = v14;
        a4[2] = v15;
        a4[3] = v16;
        a4[4] = v17;
      }
      return result;
  }
}

uint64_t sub_100A8BA94(uint64_t a1, unint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5, unint64_t a6, uint64_t a7, int a8, unint64_t *a9, unint64_t a10, void **a11)
{
  if (qword_1016371D8 != -1) {
    swift_once();
  }
  uint64_t v35 = 0x7365547265646E75;
  unint64_t v36 = 0xE900000000000074;
  SynchronousCache.cachedValue<A>(key:computeBlock:)();
  swift_bridgeObjectRelease();
  if ((a8 & 1) != 0 || v44)
  {
    uint64_t result = sub_100A8CDA8(a5, a6, a7);
    if (!v11)
    {
      uint64_t v20 = result;
      unint64_t v21 = v19;
      uint64_t v35 = result;
      unint64_t v36 = v19;
      for (int i = a8; ; LOBYTE(a8) = i)
      {
        sub_1000361E0(v20, v21);
        sub_100A8EE88(a1, a2, a3, a4, v20, v21, a8 & 1, &v35, &v37);
        sub_10001CFB8(v20, v21);
        uint64_t v20 = v35;
        unint64_t v21 = v36;
        sub_10001D608((uint64_t)&v37, (uint64_t)v42, &qword_1016434F8);
        long long v41 = v38;
        sub_10001D608((uint64_t)&v39, (uint64_t)v40, &qword_10164A358);
        unint64_t v23 = *a11;
        sub_1000361E0(v20, v21);
        sub_1000361E0(v20, v21);
        sub_100091B38((uint64_t)v42);
        sub_100061E54((uint64_t)&v41);
        sub_100091B38((uint64_t)v40);
        sub_100A99374(&v37, (void (*)(void, void))sub_1006CD4D8, (void (*)(uint64_t, uint64_t))sub_1000361E0, (void (*)(uint64_t, uint64_t))sub_100037A38);
        char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
        *a11 = v23;
        if ((isUniquelyReferenced_nonNull_native & 1) == 0)
        {
          unint64_t v23 = sub_100A70DDC(0, v23[2] + 1, 1, v23);
          *a11 = v23;
        }
        unint64_t v26 = v23[2];
        unint64_t v25 = v23[3];
        if (v26 >= v25 >> 1) {
          unint64_t v23 = sub_100A70DDC((void *)(v25 > 1), v26 + 1, 1, v23);
        }
        void v23[2] = v26 + 1;
        uint64_t v27 = &v23[6 * v26];
        long long v28 = v37;
        long long v29 = v39;
        v27[3] = v38;
        v27[4] = v29;
        _OWORD v27[2] = v28;
        *a11 = v23;
        sub_100A99374(&v37, (void (*)(void, void))sub_10015AF5C, (void (*)(uint64_t, uint64_t))sub_10001CFB8, (void (*)(uint64_t, uint64_t))sub_100037A24);
        sub_10001CFB8(v20, v21);
        if (*a9 >= a10) {
          break;
        }
        ++*a9;
        sub_100A99374(&v37, (void (*)(void, void))sub_10015AF5C, (void (*)(uint64_t, uint64_t))sub_10001CFB8, (void (*)(uint64_t, uint64_t))sub_100037A24);
        sub_10001CFB8(v20, v21);
      }
      sub_100A99374(&v37, (void (*)(void, void))sub_10015AF5C, (void (*)(uint64_t, uint64_t))sub_10001CFB8, (void (*)(uint64_t, uint64_t))sub_100037A24);
      sub_10001CFB8(v20, v21);
      return sub_10001CFB8(v20, v21);
    }
  }
  else
  {
    id v16 = [self sharedInstance];
    unsigned int v17 = [v16 isInternalBuild];

    if (v17) {
      static os_log_type_t.fault.getter();
    }
    else {
      static os_log_type_t.error.getter();
    }
    if (qword_101636F48 != -1) {
      swift_once();
    }
    os_log(_:dso:log:_:_:)();
    sub_100130148();
    swift_allocError();
    *unint64_t v30 = 3;
    return swift_willThrow();
  }
  return result;
}

uint64_t sub_100A8BF70(uint64_t a1, unint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5, unint64_t a6, uint64_t a7, char a8, uint64_t *a9, uint64_t *a10, uint64_t a11)
{
  if (qword_1016371D8 != -1) {
    swift_once();
  }
  uint64_t v44 = 0x7365547265646E75;
  unint64_t v45 = 0xE900000000000074;
  SynchronousCache.cachedValue<A>(key:computeBlock:)();
  swift_bridgeObjectRelease();
  if ((a8 & 1) != 0 || v50)
  {
    uint64_t result = sub_100A8CDA8(a5, a6, a7);
    if (!v11)
    {
      uint64_t v23 = result;
      unint64_t v24 = v22;
      uint64_t v44 = result;
      unint64_t v45 = v22;
      sub_1000361E0(v23, v24);
      sub_100A8EE88(a1, a2, a3, a4, v23, v24, a8 & 1, &v44, &v46);
      uint64_t v43 = v25;
      uint64_t v27 = v47;
      long long v36 = v48;
      long long v37 = v46;
      uint64_t v28 = v49;
      sub_10001CFB8(v23, v24);
      uint64_t v29 = v44;
      unint64_t v30 = v45;
      unint64_t v40 = a9[1];
      uint64_t v41 = *a9;
      unint64_t v31 = a9[3];
      uint64_t v32 = a9[4];
      unint64_t v38 = a9[5];
      uint64_t v39 = a9[2];
      *(_OWORD *)a9 = v37;
      a9[2] = v27;
      *(_OWORD *)(a9 + 3) = v36;
      a9[5] = v28;
      sub_1000361E0(v29, v30);
      sub_100A99374(&v46, (void (*)(void, void))sub_1006CD4D8, (void (*)(uint64_t, uint64_t))sub_1000361E0, (void (*)(uint64_t, uint64_t))sub_100037A38);
      sub_1003DCF8C(v41, v40, v39, v31, v32, v38);
      uint64_t v33 = *a10;
      uint64_t v34 = a10[1];
      unint64_t v35 = a10[2];
      *a10 = a11;
      a10[1] = v29;
      a10[2] = v30;
      sub_1000361E0(v29, v30);
      sub_1003DCEB0(v33, v34, v35);
      sub_100A99374(&v46, (void (*)(void, void))sub_10015AF5C, (void (*)(uint64_t, uint64_t))sub_10001CFB8, (void (*)(uint64_t, uint64_t))sub_100037A24);
      sub_10001CFB8(v29, v30);
      return sub_10001CFB8(v29, v30);
    }
  }
  else
  {
    id v19 = [self sharedInstance];
    unsigned int v20 = [v19 isInternalBuild];

    if (v20) {
      static os_log_type_t.fault.getter();
    }
    else {
      static os_log_type_t.error.getter();
    }
    if (qword_101636F48 != -1) {
      swift_once();
    }
    os_log(_:dso:log:_:_:)();
    sub_100130148();
    swift_allocError();
    unsigned char *v26 = 3;
    return swift_willThrow();
  }
  return result;
}

uint64_t sub_100A8C33C(uint64_t a1, unint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5, unint64_t a6, uint64_t a7, char a8, void (*a9)(uint64_t, unint64_t, _OWORD *, char *))
{
  if (qword_1016371D8 != -1) {
    swift_once();
  }
  uint64_t v27 = 0x7365547265646E75;
  unint64_t v28 = 0xE900000000000074;
  SynchronousCache.cachedValue<A>(key:computeBlock:)();
  swift_bridgeObjectRelease();
  if ((a8 & 1) != 0 || v30)
  {
    uint64_t result = sub_100A8CDA8(a5, a6, a7);
    if (!v9)
    {
      uint64_t v19 = result;
      unint64_t v20 = v18;
      uint64_t v27 = result;
      unint64_t v28 = v18;
      char v30 = 0;
      do
      {
        sub_1000361E0(v19, v20);
        sub_100A8EE88(a1, a2, a3, a4, v19, v20, a8 & 1, &v27, v29);
        sub_10001CFB8(v19, v20);
        uint64_t v19 = v27;
        unint64_t v20 = v28;
        sub_1000361E0(v27, v28);
        a9(v19, v20, v29, &v30);
        sub_100A99374(v29, (void (*)(void, void))sub_10015AF5C, (void (*)(uint64_t, uint64_t))sub_10001CFB8, (void (*)(uint64_t, uint64_t))sub_100037A24);
        sub_10001CFB8(v19, v20);
        char v22 = v30;
      }
      while ((v22 & 1) == 0);
      return sub_10001CFB8(v19, v20);
    }
  }
  else
  {
    id v15 = [self sharedInstance];
    unsigned int v16 = [v15 isInternalBuild];

    if (v16) {
      static os_log_type_t.fault.getter();
    }
    else {
      static os_log_type_t.error.getter();
    }
    if (qword_101636F48 != -1) {
      swift_once();
    }
    os_log(_:dso:log:_:_:)();
    sub_100130148();
    swift_allocError();
    *uint64_t v23 = 3;
    return swift_willThrow();
  }
  return result;
}

uint64_t sub_100A8C640()
{
  long long v7 = *(_OWORD *)(v0 + 16);
  long long v1 = v7;
  sub_100061E54((uint64_t)&v7);
  uint64_t v2 = sub_100A94760(v1, *((unint64_t *)&v1 + 1));
  unint64_t v4 = v3;
  sub_1000CE9DC((uint64_t)&v7);
  sub_100434E0C(v2, v4, &v6);
  return v6;
}

uint64_t sub_100A8C768(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, const __CFString *a7)
{
  sub_10000588C((uint64_t *)&unk_101637F00);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_101347500;
  *(void *)(inited + 32) = static String._unconditionallyBridgeFromObjectiveC(_:)();
  *(void *)(inited + 40) = v9;
  type metadata accessor for CFString(0);
  uint64_t v11 = v10;
  *(void *)(inited + 72) = v10;
  *(void *)(inited + 48) = kSecAttrKeyClassPublic;
  *(void *)(inited + 80) = static String._unconditionallyBridgeFromObjectiveC(_:)();
  *(void *)(inited + 88) = v12;
  *(void *)(inited + 120) = v11;
  *(void *)(inited + 96) = kSecAttrKeyTypeEC;
  *(void *)(inited + 128) = static String._unconditionallyBridgeFromObjectiveC(_:)();
  *(void *)(inited + 136) = v13;
  *(void *)(inited + 168) = &type metadata for Int;
  *(void *)(inited + 144) = 256;
  CFStringRef v14 = (id)kSecAttrKeyClassPublic;
  CFStringRef v15 = (id)kSecAttrKeyTypeEC;
  sub_10092CEEC(inited);
  CFErrorRef error = 0;
  CFDataRef isa = Data._bridgeToObjectiveC()().super.isa;
  CFDictionaryRef v17 = Dictionary._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  unint64_t v18 = SecKeyCreateWithData(isa, v17, &error);

  if (v18)
  {
    if (SecKeyIsAlgorithmSupported(v18, kSecKeyOperationTypeVerify, a7))
    {
      CFErrorRef v40 = 0;
      CFDataRef v19 = Data._bridgeToObjectiveC()().super.isa;
      CFDataRef v20 = Data._bridgeToObjectiveC()().super.isa;
      int v21 = SecKeyVerifySignature(v18, a7, v19, v20, &v40);

      if (v21)
      {
LABEL_17:

        return 1;
      }
      static os_log_type_t.error.getter();
      if (qword_101636F48 != -1) {
        swift_once();
      }
      sub_10000588C((uint64_t *)&unk_10163AD00);
      uint64_t v22 = swift_allocObject();
      *(_OWORD *)(v22 + 16) = xmmword_101342130;
      sub_10000588C(&qword_1016454C0);
      uint64_t v23 = String.init<A>(describing:)();
      uint64_t v25 = v24;
      *(void *)(v22 + 56) = &type metadata for String;
      *(void *)(v22 + 64) = sub_10000B4CC();
      *(void *)(v22 + 32) = v23;
      *(void *)(v22 + 40) = v25;
      os_log(_:dso:log:_:_:)();
      swift_bridgeObjectRelease();
      CFErrorRef v26 = error;
      if (error)
      {
        type metadata accessor for CFError(0);
        sub_100A992D8(&qword_1016585F8, type metadata accessor for CFError);
        swift_allocError();
        *uint64_t v27 = v26;
        unint64_t v28 = v26;
        swift_willThrow();

        goto LABEL_17;
      }
    }
    else
    {
      static os_log_type_t.error.getter();
      if (qword_101636F48 != -1) {
        swift_once();
      }
      os_log(_:dso:log:_:_:)();
    }
    uint64_t v35 = type metadata accessor for CryptoError();
    sub_100A992D8((unint64_t *)&qword_1016605B0, (void (*)(uint64_t))&type metadata accessor for CryptoError);
    swift_allocError();
    (*(void (**)(uint64_t, void, uint64_t))(*(void *)(v35 - 8) + 104))(v36, enum case for CryptoError.unspecifiedError(_:), v35);
    swift_willThrow();
    goto LABEL_17;
  }
  static os_log_type_t.error.getter();
  if (qword_101636F48 != -1) {
    swift_once();
  }
  sub_10000588C((uint64_t *)&unk_10163AD00);
  uint64_t v29 = swift_allocObject();
  *(_OWORD *)(v29 + 16) = xmmword_101342130;
  CFErrorRef v30 = error;
  CFErrorRef v40 = error;
  sub_10000588C(&qword_1016454C0);
  uint64_t v31 = String.init<A>(describing:)();
  uint64_t v33 = v32;
  *(void *)(v29 + 56) = &type metadata for String;
  *(void *)(v29 + 64) = sub_10000B4CC();
  *(void *)(v29 + 32) = v31;
  *(void *)(v29 + 40) = v33;
  os_log(_:dso:log:_:_:)();
  swift_bridgeObjectRelease();
  if (v30)
  {
    type metadata accessor for CFError(0);
    sub_100A992D8(&qword_1016585F8, type metadata accessor for CFError);
    swift_allocError();
    *uint64_t v34 = v30;
  }
  else
  {
    uint64_t v38 = type metadata accessor for CryptoError();
    sub_100A992D8((unint64_t *)&qword_1016605B0, (void (*)(uint64_t))&type metadata accessor for CryptoError);
    swift_allocError();
    (*(void (**)(uint64_t, void, uint64_t))(*(void *)(v38 - 8) + 104))(v39, enum case for CryptoError.invalidKey(_:), v38);
  }
  swift_willThrow();
  return 1;
}

uint64_t sub_100A8CDA8(uint64_t a1, unint64_t a2, uint64_t a3)
{
  uint64_t v6 = sub_10000588C(&qword_10163F758);
  __chkstk_darwin(v6 - 8);
  int v8 = (char *)&v110 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1000361E0(a1, a2);
  uint64_t v9 = String.utf8Data.getter();
  uint64_t v11 = v9;
  unint64_t v12 = v10;
  if (!a3)
  {
    sub_10001CFB8(v9, v10);
    return a1;
  }
  id v113 = v8;
  uint64_t v123 = v9 >> 32;
  uint64_t v124 = (int)v9;
  unint64_t v125 = HIDWORD(v9);
  BOOL v13 = __OFSUB__(HIDWORD(v9), v9);
  BOOL v115 = v13;
  uint64_t v114 = HIDWORD(v9) - (int)v9;
  unint64_t v121 = v10 >> 40;
  uint64_t v122 = BYTE6(v10);
  unint64_t v119 = v10 >> 24;
  unint64_t v120 = HIDWORD(v10);
  unint64_t v118 = v10 >> 16;
  unint64_t v117 = v10 >> 8;
  unint64_t v116 = HIBYTE(v9);
  unint64_t v128 = v10;
  unint64_t v129 = v10 >> 62;
  uint64_t v126 = v10 & 0x3FFFFFFFFFFFFFFFLL;
  while (2)
  {
    int v14 = type metadata accessor for __DataStorage();
    swift_allocObject();
    unint64_t v15 = a2 >> 62;
    sub_1000361E0(a1, a2);
    uint64_t v16 = __DataStorage.init(length:)();
    uint64_t v134 = 0x2000000000;
    unint64_t v135 = v16 | 0x4000000000000000;
    uint64_t v17 = v16;
    switch(v129)
    {
      case 1uLL:
        uint64_t v18 = v124;
        if (v123 < v124) {
          goto LABEL_168;
        }
        sub_1000361E0(v11, v12);
        if (!__DataStorage._bytes.getter())
        {
          __DataStorage._length.getter();
          uint64_t v92 = type metadata accessor for CryptoError();
          sub_100A992D8((unint64_t *)&qword_1016605B0, (void (*)(uint64_t))&type metadata accessor for CryptoError);
          swift_allocError();
          (*(void (**)(uint64_t, void, uint64_t))(*(void *)(v92 - 8) + 104))(v93, enum case for CryptoError.memoryFailure(_:), v92);
          swift_willThrow();
LABEL_140:
          unint64_t v12 = v128;
          sub_10001CFB8(v11, v128);
          goto LABEL_151;
        }
        if (__OFSUB__(v18, __DataStorage._offset.getter())) {
          goto LABEL_170;
        }
        __DataStorage._length.getter();
        v132[0] = 0;
        if (v115) {
          goto LABEL_172;
        }
        if (CCKDFParametersCreateAnsiX963())
        {
          sub_10001CFB8(v11, v128);
          int v14 = -4300;
          goto LABEL_124;
        }
        unint64_t v12 = v128;
        switch((int)v15)
        {
          case 1:
            if ((int)a1 > a1 >> 32) {
              goto LABEL_186;
            }
            swift_retain();
            uint64_t v53 = __DataStorage._bytes.getter();
            if (!v53)
            {
              __DataStorage._length.getter();
              uint64_t v108 = type metadata accessor for CryptoError();
              sub_100A992D8((unint64_t *)&qword_1016605B0, (void (*)(uint64_t))&type metadata accessor for CryptoError);
              swift_allocError();
              (*(void (**)(uint64_t, void, uint64_t))(*(void *)(v108 - 8) + 104))(v109, enum case for CryptoError.memoryFailure(_:), v108);
              swift_willThrow();
              sub_10001CFB8(a1, a2);
              goto LABEL_140;
            }
            uint64_t v54 = v53;
            uint64_t v55 = __DataStorage._offset.getter();
            uint64_t v56 = (int)a1 - v55;
            if (__OFSUB__((int)a1, v55)) {
              goto LABEL_191;
            }
            __DataStorage._length.getter();
            sub_1000361E0(a1, a2);
            uint64_t v57 = v127;
            int v58 = sub_100A969B4(&v134, (uint64_t)v132, v54 + v56, a1, a2);
            uint64_t v127 = v57;
            if (!v57)
            {
              int v14 = v58;
              sub_10001CFB8(a1, a2);
              sub_10001CFB8(a1, a2);
              goto LABEL_86;
            }
            sub_10001CFB8(a1, a2);
            sub_10001CFB8(a1, a2);
LABEL_164:
            uint64_t v96 = v11;
            unint64_t v12 = v128;
LABEL_165:
            sub_10001CFB8(v96, v12);
LABEL_151:
            sub_10001CFB8(v134, v135);
            sub_10001CFB8(a1, a2);
LABEL_152:
            sub_10001CFB8(v11, v12);
            sub_10001CFB8(a1, a2);
            return a1;
          case 2:
            uint64_t v59 = *(void *)(a1 + 16);
            swift_retain();
            swift_retain();
            uint64_t v60 = __DataStorage._bytes.getter();
            if (v60)
            {
              uint64_t v61 = v60;
              uint64_t v62 = __DataStorage._offset.getter();
              BOOL v30 = __OFSUB__(v59, v62);
              uint64_t v63 = v59 - v62;
              if (v30) {
                goto LABEL_190;
              }
              __DataStorage._length.getter();
              sub_1000361E0(a1, a2);
              uint64_t v64 = v127;
              int v65 = sub_100A969B4(&v134, (uint64_t)v132, v61 + v63, a1, a2);
              uint64_t v127 = v64;
              if (v64)
              {
                sub_10001CFB8(a1, a2);
                swift_release();
                swift_release();
                goto LABEL_164;
              }
              int v14 = v65;
              sub_10001CFB8(a1, a2);
              swift_release();
              swift_release();
LABEL_86:
              uint64_t v66 = v11;
              unint64_t v12 = v128;
LABEL_90:
              sub_10001CFB8(v66, v12);
              if (v14) {
                goto LABEL_124;
              }
              goto LABEL_111;
            }
            __DataStorage._length.getter();
            uint64_t v106 = type metadata accessor for CryptoError();
            sub_100A992D8((unint64_t *)&qword_1016605B0, (void (*)(uint64_t))&type metadata accessor for CryptoError);
            swift_allocError();
            (*(void (**)(uint64_t, void, uint64_t))(*(void *)(v106 - 8) + 104))(v107, enum case for CryptoError.memoryFailure(_:), v106);
            swift_willThrow();
            swift_release();
            swift_release();
            goto LABEL_140;
          case 3:
            memset(v131, 0, 14);
            goto LABEL_88;
          default:
            v131[0] = a1;
            LOWORD(v131[1]) = a2;
            BYTE2(v131[1]) = BYTE2(a2);
            BYTE3(v131[1]) = BYTE3(a2);
            BYTE4(v131[1]) = BYTE4(a2);
            BYTE5(v131[1]) = BYTE5(a2);
LABEL_88:
            sub_1000361E0(a1, a2);
            uint64_t v67 = v127;
            int v68 = sub_100A969B4(&v134, (uint64_t)v132, (uint64_t)v131, a1, a2);
            uint64_t v127 = v67;
            if (v67)
            {
              sub_10001CFB8(a1, a2);
              uint64_t v96 = v11;
              goto LABEL_165;
            }
            int v14 = v68;
            sub_10001CFB8(a1, a2);
            uint64_t v66 = v11;
            goto LABEL_90;
        }
      case 2uLL:
        uint64_t v19 = *(void *)(v11 + 16);
        swift_retain();
        int v14 = v126;
        swift_retain();
        if (!__DataStorage._bytes.getter())
        {
          __DataStorage._length.getter();
          uint64_t v90 = type metadata accessor for CryptoError();
          sub_100A992D8((unint64_t *)&qword_1016605B0, (void (*)(uint64_t))&type metadata accessor for CryptoError);
          swift_allocError();
          (*(void (**)(uint64_t, void, uint64_t))(*(void *)(v90 - 8) + 104))(v91, enum case for CryptoError.memoryFailure(_:), v90);
          swift_willThrow();
LABEL_149:
          swift_release();
          swift_release();
          goto LABEL_150;
        }
        if (__OFSUB__(v19, __DataStorage._offset.getter())) {
          goto LABEL_169;
        }
        __DataStorage._length.getter();
        v132[0] = 0;
        if (__OFSUB__(*(void *)(v11 + 24), *(void *)(v11 + 16))) {
          goto LABEL_171;
        }
        if (CCKDFParametersCreateAnsiX963())
        {
          swift_release();
          swift_release();
          int v14 = -4300;
        }
        else
        {
          unint64_t v12 = v128;
          switch((int)v15)
          {
            case 1:
              if ((int)a1 > a1 >> 32) {
                goto LABEL_184;
              }
              swift_retain();
              uint64_t v38 = __DataStorage._bytes.getter();
              if (!v38)
              {
                __DataStorage._length.getter();
                uint64_t v104 = type metadata accessor for CryptoError();
                sub_100A992D8((unint64_t *)&qword_1016605B0, (void (*)(uint64_t))&type metadata accessor for CryptoError);
                swift_allocError();
                (*(void (**)(uint64_t, void, uint64_t))(*(void *)(v104 - 8) + 104))(v105, enum case for CryptoError.memoryFailure(_:), v104);
                swift_willThrow();
                sub_10001CFB8(a1, a2);
                goto LABEL_149;
              }
              uint64_t v39 = v38;
              uint64_t v40 = __DataStorage._offset.getter();
              uint64_t v41 = (int)a1 - v40;
              if (__OFSUB__((int)a1, v40)) {
                goto LABEL_189;
              }
              __DataStorage._length.getter();
              sub_1000361E0(a1, a2);
              uint64_t v42 = v127;
              int v43 = sub_100A969B4(&v134, (uint64_t)v132, v39 + v41, a1, a2);
              uint64_t v127 = v42;
              if (v42)
              {
                sub_10001CFB8(a1, a2);
                sub_10001CFB8(a1, a2);
                swift_release();
                goto LABEL_160;
              }
              int v14 = v43;
              sub_10001CFB8(a1, a2);
              sub_10001CFB8(a1, a2);
              swift_release();
              swift_release();
              goto LABEL_110;
            case 2:
              uint64_t v44 = *(void *)(a1 + 16);
              swift_retain();
              swift_retain();
              uint64_t v45 = __DataStorage._bytes.getter();
              if (!v45)
              {
                __DataStorage._length.getter();
                uint64_t v101 = type metadata accessor for CryptoError();
                sub_100A992D8((unint64_t *)&qword_1016605B0, (void (*)(uint64_t))&type metadata accessor for CryptoError);
                swift_allocError();
                (*(void (**)(uint64_t, void, uint64_t))(*(void *)(v101 - 8) + 104))(v102, enum case for CryptoError.memoryFailure(_:), v101);
                swift_willThrow();
                swift_release();
                swift_release();
                goto LABEL_149;
              }
              uint64_t v46 = v45;
              uint64_t v47 = __DataStorage._offset.getter();
              BOOL v30 = __OFSUB__(v44, v47);
              uint64_t v48 = v44 - v47;
              if (v30) {
                goto LABEL_188;
              }
              __DataStorage._length.getter();
              sub_1000361E0(a1, a2);
              uint64_t v49 = v127;
              int v50 = sub_100A969B4(&v134, (uint64_t)v132, v46 + v48, a1, a2);
              uint64_t v127 = v49;
              if (v49)
              {
                sub_10001CFB8(a1, a2);
                swift_release();
                swift_release();
LABEL_158:
                swift_release();
LABEL_160:
                swift_release();
                goto LABEL_161;
              }
              int v14 = v50;
              sub_10001CFB8(a1, a2);
              swift_release();
              swift_release();
              break;
            case 3:
              memset(v131, 0, 14);
              goto LABEL_74;
            default:
              v131[0] = a1;
              LOWORD(v131[1]) = a2;
              BYTE2(v131[1]) = BYTE2(a2);
              BYTE3(v131[1]) = BYTE3(a2);
              BYTE4(v131[1]) = BYTE4(a2);
              BYTE5(v131[1]) = BYTE5(a2);
LABEL_74:
              sub_1000361E0(a1, a2);
              uint64_t v51 = v127;
              int v52 = sub_100A969B4(&v134, (uint64_t)v132, (uint64_t)v131, a1, a2);
              uint64_t v127 = v51;
              if (v51)
              {
                sub_10001CFB8(a1, a2);
                swift_release();
                swift_release();
                goto LABEL_151;
              }
              int v14 = v52;
              sub_10001CFB8(a1, a2);
              swift_release();
              swift_release();
              if (v14) {
                goto LABEL_124;
              }
              goto LABEL_111;
          }
LABEL_72:
          swift_release();
          swift_release();
        }
LABEL_110:
        unint64_t v12 = v128;
        if (v14) {
          goto LABEL_124;
        }
LABEL_111:
        sub_10001CFB8(a1, a2);
        uint64_t v73 = v134;
        unint64_t v74 = v135;
        unint64_t v75 = v135 >> 62;
        switch(v135 >> 62)
        {
          case 1uLL:
            LODWORD(v76) = HIDWORD(v134) - v134;
            if (__OFSUB__(HIDWORD(v134), v134))
            {
              __break(1u);
LABEL_167:
              __break(1u);
LABEL_168:
              __break(1u);
LABEL_169:
              __break(1u);
LABEL_170:
              __break(1u);
LABEL_171:
              __break(1u);
LABEL_172:
              __break(1u);
LABEL_173:
              swift_once();
LABEL_125:
              sub_10000588C((uint64_t *)&unk_10163AD00);
              uint64_t v80 = swift_allocObject();
              *(_OWORD *)(v80 + 16) = xmmword_101342130;
              *(void *)(v80 + 56) = &type metadata for Int32;
              *(void *)(v80 + 64) = &protocol witness table for Int32;
              *(_DWORD *)(v80 + 32) = v14;
              os_log(_:dso:log:_:_:)();
              swift_bridgeObjectRelease();
              uint64_t v81 = (uint64_t)v113;
              CryptoError.init(rawValue:)();
              uint64_t v82 = type metadata accessor for CryptoError();
              sub_100A992D8((unint64_t *)&qword_1016605B0, (void (*)(uint64_t))&type metadata accessor for CryptoError);
              swift_allocError();
              uint64_t v84 = v83;
              uint64_t v85 = *(void *)(v82 - 8);
              if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v85 + 48))(v81, 1, v82) == 1)
              {
                (*(void (**)(uint64_t, void, uint64_t))(v85 + 104))(v84, enum case for CryptoError.unspecifiedError(_:), v82);
                sub_100A99278(v81);
              }
              else
              {
                (*(void (**)(uint64_t, uint64_t, uint64_t))(v85 + 32))(v84, v81, v82);
              }
              swift_willThrow();
              goto LABEL_150;
            }
            uint64_t v76 = (int)v76;
LABEL_116:
            if (v76 != 32)
            {
              if (!v75)
              {
                uint64_t v86 = BYTE6(v135);
                goto LABEL_137;
              }
              if (v75 != 1)
              {
                uint64_t v88 = *(void *)(v134 + 16);
                uint64_t v87 = *(void *)(v134 + 24);
                uint64_t v86 = v87 - v88;
                if (!__OFSUB__(v87, v88)) {
                  goto LABEL_137;
                }
LABEL_193:
                __break(1u);
LABEL_194:
                __break(1u);
LABEL_195:
                __break(1u);
LABEL_196:
                __break(1u);
LABEL_197:
                __break(1u);
LABEL_198:
                __break(1u);
              }
              if (!__OFSUB__(HIDWORD(v134), v134))
              {
                uint64_t v86 = HIDWORD(v134) - (int)v134;
LABEL_137:
                sub_10013019C();
                swift_allocError();
                *(void *)uint64_t v89 = 32;
                *(void *)(v89 + 8) = v86;
                *(unsigned char *)(v89 + 16) = 0;
                swift_willThrow();
                sub_10001CFB8(v73, v74);
                unint64_t v12 = v128;
                goto LABEL_152;
              }
LABEL_192:
              __break(1u);
              goto LABEL_193;
            }
            sub_10001CFB8(a1, a2);
            a1 = v73;
            a2 = v74;
            if (!--a3)
            {
              sub_10001CFB8(v11, v12);
              return v73;
            }
            break;
          case 2uLL:
            uint64_t v78 = *(void *)(v134 + 16);
            uint64_t v77 = *(void *)(v134 + 24);
            BOOL v30 = __OFSUB__(v77, v78);
            uint64_t v76 = v77 - v78;
            if (!v30) {
              goto LABEL_116;
            }
            goto LABEL_167;
          case 3uLL:
            uint64_t v86 = 0;
            goto LABEL_137;
          default:
            uint64_t v76 = BYTE6(v135);
            goto LABEL_116;
        }
        continue;
      case 3uLL:
        memset(v131, 0, 14);
        uint64_t v133 = 0;
        if (CCKDFParametersCreateAnsiX963()) {
          goto LABEL_25;
        }
        switch((int)v15)
        {
          case 1:
            if ((int)a1 > a1 >> 32) {
              goto LABEL_175;
            }
            sub_1000361E0(a1, a2);
            uint64_t v32 = __DataStorage._bytes.getter();
            if (!v32)
            {
              __DataStorage._length.getter();
              uint64_t v99 = type metadata accessor for CryptoError();
              sub_100A992D8((unint64_t *)&qword_1016605B0, (void (*)(uint64_t))&type metadata accessor for CryptoError);
              swift_allocError();
              (*(void (**)(uint64_t, void, uint64_t))(*(void *)(v99 - 8) + 104))(v100, enum case for CryptoError.memoryFailure(_:), v99);
              swift_willThrow();
              sub_10001CFB8(a1, a2);
              goto LABEL_151;
            }
            uint64_t v112 = v32;
            if (__OFSUB__((int)a1, __DataStorage._offset.getter())) {
              goto LABEL_183;
            }
            __DataStorage._length.getter();
            if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
            {
              if (__DataStorage._bytes.getter() && __OFSUB__(0, __DataStorage._offset.getter())) {
                goto LABEL_198;
              }
              swift_allocObject();
              uint64_t v79 = __DataStorage.init(bytes:length:copy:deallocator:offset:)();
              swift_release();
              uint64_t v17 = v79;
            }
            if (!__DataStorage._bytes.getter()) {
              goto LABEL_203;
            }
            uint64_t v111 = v11;
            if (__OFSUB__(0, __DataStorage._offset.getter())) {
              goto LABEL_185;
            }
            __DataStorage._length.getter();
            if (__OFSUB__(HIDWORD(a1), a1)) {
              goto LABEL_187;
            }
            int v14 = CCDeriveKey();
            CCKDFParametersDestroy();
            sub_10001CFB8(a1, a2);
            uint64_t v134 = 0x2000000000;
            unint64_t v135 = v17 | 0x4000000000000000;
            unint64_t v12 = v128;
            uint64_t v11 = v111;
            if (v14) {
              goto LABEL_124;
            }
            break;
          case 2:
            uint64_t v33 = *(void *)(a1 + 16);
            swift_retain();
            swift_retain();
            uint64_t v34 = __DataStorage._bytes.getter();
            if (!v34) {
              goto LABEL_141;
            }
            uint64_t v28 = v34;
            uint64_t v35 = __DataStorage._offset.getter();
            BOOL v30 = __OFSUB__(v33, v35);
            uint64_t v31 = v33 - v35;
            if (!v30) {
              goto LABEL_57;
            }
            goto LABEL_181;
          case 3:
            memset(v132, 0, 14);
            if (swift_isUniquelyReferenced_nonNull_native()) {
              goto LABEL_107;
            }
            if (__DataStorage._bytes.getter() && __OFSUB__(0, __DataStorage._offset.getter())) {
              goto LABEL_197;
            }
            swift_allocObject();
            uint64_t v72 = __DataStorage.init(bytes:length:copy:deallocator:offset:)();
            swift_release();
            uint64_t v17 = v72;
LABEL_107:
            if (!__DataStorage._bytes.getter()) {
              goto LABEL_202;
            }
            if (!__OFSUB__(0, __DataStorage._offset.getter())) {
              goto LABEL_109;
            }
            goto LABEL_179;
          default:
            v132[0] = a1;
            LOWORD(v132[1]) = a2;
            BYTE2(v132[1]) = BYTE2(a2);
            BYTE3(v132[1]) = BYTE3(a2);
            BYTE4(v132[1]) = BYTE4(a2);
            BYTE5(v132[1]) = BYTE5(a2);
            if (swift_isUniquelyReferenced_nonNull_native()) {
              goto LABEL_98;
            }
            if (__DataStorage._bytes.getter() && __OFSUB__(0, __DataStorage._offset.getter())) {
              goto LABEL_195;
            }
            swift_allocObject();
            uint64_t v70 = __DataStorage.init(bytes:length:copy:deallocator:offset:)();
            swift_release();
            uint64_t v17 = v70;
LABEL_98:
            if (!__DataStorage._bytes.getter()) {
              goto LABEL_200;
            }
            if (!__OFSUB__(0, __DataStorage._offset.getter())) {
              goto LABEL_109;
            }
            goto LABEL_177;
        }
        goto LABEL_111;
      default:
        LOWORD(v131[0]) = v11;
        BYTE2(v131[0]) = BYTE2(v11);
        BYTE3(v131[0]) = BYTE3(v11);
        BYTE4(v131[0]) = v125;
        BYTE5(v131[0]) = BYTE5(v11);
        BYTE6(v131[0]) = BYTE6(v11);
        HIBYTE(v131[0]) = v116;
        LOBYTE(v131[1]) = v12;
        BYTE1(v131[1]) = v117;
        BYTE2(v131[1]) = v118;
        BYTE3(v131[1]) = v119;
        BYTE4(v131[1]) = v120;
        BYTE5(v131[1]) = v121;
        uint64_t v133 = 0;
        if (CCKDFParametersCreateAnsiX963())
        {
LABEL_25:
          int v14 = -4300;
LABEL_124:
          static os_log_type_t.error.getter();
          if (qword_101636F48 == -1) {
            goto LABEL_125;
          }
          goto LABEL_173;
        }
        switch((int)v15)
        {
          case 1:
            if ((int)a1 > a1 >> 32)
            {
              __break(1u);
LABEL_175:
              __break(1u);
LABEL_176:
              __break(1u);
LABEL_177:
              __break(1u);
LABEL_178:
              __break(1u);
LABEL_179:
              __break(1u);
LABEL_180:
              __break(1u);
LABEL_181:
              __break(1u);
LABEL_182:
              __break(1u);
LABEL_183:
              __break(1u);
LABEL_184:
              __break(1u);
LABEL_185:
              __break(1u);
LABEL_186:
              __break(1u);
LABEL_187:
              __break(1u);
LABEL_188:
              __break(1u);
LABEL_189:
              __break(1u);
LABEL_190:
              __break(1u);
LABEL_191:
              __break(1u);
              goto LABEL_192;
            }
            sub_1000361E0(a1, a2);
            uint64_t v20 = __DataStorage._bytes.getter();
            if (!v20)
            {
              __DataStorage._length.getter();
              uint64_t v97 = type metadata accessor for CryptoError();
              sub_100A992D8((unint64_t *)&qword_1016605B0, (void (*)(uint64_t))&type metadata accessor for CryptoError);
              swift_allocError();
              (*(void (**)(uint64_t, void, uint64_t))(*(void *)(v97 - 8) + 104))(v98, enum case for CryptoError.memoryFailure(_:), v97);
              swift_willThrow();
              sub_10001CFB8(a1, a2);
LABEL_150:
              unint64_t v12 = v128;
              goto LABEL_151;
            }
            uint64_t v21 = v20;
            uint64_t v22 = __DataStorage._offset.getter();
            uint64_t v23 = (int)a1 - v22;
            if (__OFSUB__((int)a1, v22)) {
              goto LABEL_182;
            }
            __DataStorage._length.getter();
            sub_1000361E0(a1, a2);
            uint64_t v24 = v127;
            int v25 = sub_100A969B4(&v134, (uint64_t)&v133, v21 + v23, a1, a2);
            uint64_t v127 = v24;
            if (v24)
            {
              sub_10001CFB8(a1, a2);
              sub_10001CFB8(a1, a2);
LABEL_161:
              unint64_t v12 = v128;
              goto LABEL_151;
            }
            int v14 = v25;
            sub_10001CFB8(a1, a2);
            sub_10001CFB8(a1, a2);
            goto LABEL_110;
          case 2:
            uint64_t v26 = *(void *)(a1 + 16);
            swift_retain();
            swift_retain();
            uint64_t v27 = __DataStorage._bytes.getter();
            if (!v27)
            {
LABEL_141:
              __DataStorage._length.getter();
              uint64_t v94 = type metadata accessor for CryptoError();
              sub_100A992D8((unint64_t *)&qword_1016605B0, (void (*)(uint64_t))&type metadata accessor for CryptoError);
              swift_allocError();
              (*(void (**)(uint64_t, void, uint64_t))(*(void *)(v94 - 8) + 104))(v95, enum case for CryptoError.memoryFailure(_:), v94);
              swift_willThrow();
              goto LABEL_149;
            }
            uint64_t v28 = v27;
            uint64_t v29 = __DataStorage._offset.getter();
            BOOL v30 = __OFSUB__(v26, v29);
            uint64_t v31 = v26 - v29;
            if (v30) {
              goto LABEL_180;
            }
LABEL_57:
            __DataStorage._length.getter();
            sub_1000361E0(a1, a2);
            uint64_t v36 = v127;
            int v37 = sub_100A969B4(&v134, (uint64_t)&v133, v28 + v31, a1, a2);
            uint64_t v127 = v36;
            if (v36)
            {
              sub_10001CFB8(a1, a2);
              goto LABEL_158;
            }
            int v14 = v37;
            sub_10001CFB8(a1, a2);
            break;
          case 3:
            memset(v132, 0, 14);
            if (swift_isUniquelyReferenced_nonNull_native()) {
              goto LABEL_102;
            }
            if (__DataStorage._bytes.getter() && __OFSUB__(0, __DataStorage._offset.getter())) {
              goto LABEL_196;
            }
            swift_allocObject();
            uint64_t v71 = __DataStorage.init(bytes:length:copy:deallocator:offset:)();
            swift_release();
            uint64_t v17 = v71;
LABEL_102:
            if (!__DataStorage._bytes.getter()) {
              goto LABEL_201;
            }
            if (!__OFSUB__(0, __DataStorage._offset.getter())) {
              goto LABEL_109;
            }
            goto LABEL_178;
          default:
            v132[0] = a1;
            LOWORD(v132[1]) = a2;
            BYTE2(v132[1]) = BYTE2(a2);
            BYTE3(v132[1]) = BYTE3(a2);
            BYTE4(v132[1]) = BYTE4(a2);
            BYTE5(v132[1]) = BYTE5(a2);
            if (swift_isUniquelyReferenced_nonNull_native()) {
              goto LABEL_93;
            }
            if (__DataStorage._bytes.getter() && __OFSUB__(0, __DataStorage._offset.getter())) {
              goto LABEL_194;
            }
            swift_allocObject();
            uint64_t v69 = __DataStorage.init(bytes:length:copy:deallocator:offset:)();
            swift_release();
            uint64_t v17 = v69;
LABEL_93:
            if (!__DataStorage._bytes.getter())
            {
              __break(1u);
LABEL_200:
              __break(1u);
LABEL_201:
              __break(1u);
LABEL_202:
              __break(1u);
LABEL_203:
              __break(1u);
              JUMPOUT(0x100A8E76CLL);
            }
            if (__OFSUB__(0, __DataStorage._offset.getter())) {
              goto LABEL_176;
            }
LABEL_109:
            __DataStorage._length.getter();
            int v14 = CCDeriveKey();
            CCKDFParametersDestroy();
            uint64_t v134 = 0x2000000000;
            unint64_t v135 = v17 | 0x4000000000000000;
            goto LABEL_110;
        }
        goto LABEL_72;
    }
  }
}

uint64_t sub_100A8E7CC@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X2>, unint64_t a4@<X3>, uint64_t a5@<X4>, unint64_t a6@<X5>, char a7@<W6>, void *a8@<X7>, _OWORD *a9@<X8>, uint64_t *a10)
{
  if (qword_1016371D8 != -1) {
    swift_once();
  }
  uint64_t v67 = 0x7365547265646E75;
  unint64_t v68 = 0xE900000000000074;
  SynchronousCache.cachedValue<A>(key:computeBlock:)();
  swift_bridgeObjectRelease();
  if ((a7 & 1) != 0 || v71)
  {
    uint64_t result = sub_100A8CDA8(a5, a6, 1);
    if (!v10)
    {
      uint64_t v21 = result;
      unint64_t v22 = v20;
      uint64_t v62 = a9;
      uint64_t v23 = String.utf8Data.getter();
      unint64_t v25 = v24;
      sub_1000361E0(v21, v22);
      unint64_t v26 = v22;
      uint64_t v28 = sub_100A941DC(v21, v22, v23, v25, 72);
      unint64_t v30 = v29;
      uint64_t v60 = v21;
      unint64_t v61 = v26;
      sub_10001CFB8(v21, v26);
      sub_100434CC8(v28, v30, &v67);
      sub_10001CFB8(v23, v25);
      uint64_t v32 = v67;
      unint64_t v31 = v68;
      unint64_t v33 = a2;
      if (a2 >> 60 == 15)
      {
        sub_1000361E0(v67, v68);
        sub_1000361E0(a3, a4);
        uint64_t v34 = sub_100A948F8(a3, a4);
        uint64_t v35 = v60;
        int v37 = sub_100A95320(v34, 0, v32, v31);
        CCECCryptorRelease();
        sub_10001CFB8(a3, a4);
        sub_10001CFB8(v32, v31);
        uint64_t v42 = sub_100A90C58((uint64_t)v37, 0);
        unint64_t v44 = v43;
        sub_1000361E0(v42, v43);
        uint64_t v45 = sub_10043A38C(v42, v44);
        unint64_t v46 = v61;
        unint64_t v58 = v50;
        uint64_t v59 = v45;
        CCECCryptorRelease();
        sub_10001CFB8(v42, v44);
        uint64_t v51 = a1;
      }
      else
      {
        sub_100037A38(a1, a2);
        sub_1000361E0(v32, v31);
        uint64_t v36 = sub_100A948F8(a1, a2);
        uint64_t v35 = v60;
        unint64_t v46 = v61;
        uint64_t v38 = sub_100A95320(v36, 1, v32, v31);
        CCECCryptorRelease();
        sub_10001CFB8(v32, v31);
        uint64_t v39 = sub_100A90C58((uint64_t)v38, 1);
        unint64_t v41 = v40;
        uint64_t v65 = sub_100A90C58((uint64_t)v38, 0);
        unint64_t v57 = v47;
        sub_1000361E0(v39, v41);
        uint64_t v48 = sub_10043A040(v39, v41);
        unint64_t v55 = v49;
        uint64_t v56 = v48;
        sub_1000361E0(v65, v57);
        uint64_t v53 = sub_10043A38C(v65, v57);
        unint64_t v58 = v54;
        uint64_t v59 = v53;
        CCECCryptorRelease();
        sub_10001CFB8(v65, v57);
        sub_10001CFB8(v39, v41);
        sub_100037A24(a1, v33);
        unint64_t v33 = v55;
        uint64_t v51 = v56;
      }
      v70[0] = v51;
      v70[1] = v33;
      v70[2] = v59;
      v70[3] = v58;
      v70[4] = v35;
      v70[5] = v46;
      sub_1000361E0(v35, v46);
      sub_100037A38(v59, v58);
      sub_100037A38(v51, v33);
      sub_1009DBF48((uint64_t)v70, a8, a10, (uint64_t *)v69);
      sub_100037A24(v51, v33);
      sub_100037A24(v59, v58);
      sub_10001CFB8(v35, v46);
      sub_100037A24(v51, v33);
      sub_10001CFB8(v59, v58);
      sub_10001CFB8(v35, v46);
      uint64_t result = sub_10001CFB8(v32, v31);
      long long v52 = v69[1];
      *uint64_t v62 = v69[0];
      v62[1] = v52;
      v62[2] = v69[2];
    }
  }
  else
  {
    id v17 = [self sharedInstance];
    unsigned int v18 = [v17 isInternalBuild];

    if (v18) {
      static os_log_type_t.fault.getter();
    }
    else {
      static os_log_type_t.error.getter();
    }
    if (qword_101636F48 != -1) {
      swift_once();
    }
    os_log(_:dso:log:_:_:)();
    sub_100130148();
    swift_allocError();
    *uint64_t v27 = 3;
    return swift_willThrow();
  }
  return result;
}

uint64_t sub_100A8EE88@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X2>, unint64_t a4@<X3>, uint64_t a5@<X4>, unint64_t a6@<X5>, char a7@<W6>, uint64_t *a8@<X7>, _OWORD *a9@<X8>)
{
  if (qword_1016371D8 != -1) {
    swift_once();
  }
  uint64_t v66 = 0x7365547265646E75;
  unint64_t v67 = 0xE900000000000074;
  SynchronousCache.cachedValue<A>(key:computeBlock:)();
  swift_bridgeObjectRelease();
  if ((a7 & 1) != 0 || v70)
  {
    uint64_t result = sub_100A8CDA8(a5, a6, 1);
    if (!v9)
    {
      uint64_t v20 = result;
      unint64_t v21 = v19;
      unint64_t v61 = a9;
      uint64_t v22 = String.utf8Data.getter();
      unint64_t v24 = v23;
      sub_1000361E0(v20, v21);
      unint64_t v25 = v21;
      uint64_t v27 = sub_100A941DC(v20, v21, v22, v24, 72);
      unint64_t v29 = v28;
      uint64_t v59 = v20;
      unint64_t v60 = v25;
      sub_10001CFB8(v20, v25);
      sub_100434CC8(v27, v29, &v66);
      sub_10001CFB8(v22, v24);
      uint64_t v31 = v66;
      unint64_t v30 = v67;
      unint64_t v32 = a2;
      if (a2 >> 60 == 15)
      {
        sub_1000361E0(v66, v67);
        sub_1000361E0(a3, a4);
        uint64_t v33 = sub_100A948F8(a3, a4);
        uint64_t v34 = v59;
        uint64_t v36 = sub_100A95320(v33, 0, v31, v30);
        CCECCryptorRelease();
        sub_10001CFB8(a3, a4);
        sub_10001CFB8(v31, v30);
        uint64_t v41 = sub_100A90C58((uint64_t)v36, 0);
        unint64_t v43 = v42;
        sub_1000361E0(v41, v42);
        uint64_t v44 = sub_10043A38C(v41, v43);
        unint64_t v45 = v60;
        unint64_t v57 = v49;
        uint64_t v58 = v44;
        CCECCryptorRelease();
        sub_10001CFB8(v41, v43);
        uint64_t v50 = a1;
      }
      else
      {
        sub_100037A38(a1, a2);
        sub_1000361E0(v31, v30);
        uint64_t v35 = sub_100A948F8(a1, a2);
        uint64_t v34 = v59;
        unint64_t v45 = v60;
        int v37 = sub_100A95320(v35, 1, v31, v30);
        CCECCryptorRelease();
        sub_10001CFB8(v31, v30);
        uint64_t v38 = sub_100A90C58((uint64_t)v37, 1);
        unint64_t v40 = v39;
        uint64_t v64 = sub_100A90C58((uint64_t)v37, 0);
        unint64_t v56 = v46;
        sub_1000361E0(v38, v40);
        uint64_t v47 = sub_10043A040(v38, v40);
        unint64_t v54 = v48;
        uint64_t v55 = v47;
        sub_1000361E0(v64, v56);
        uint64_t v52 = sub_10043A38C(v64, v56);
        unint64_t v57 = v53;
        uint64_t v58 = v52;
        CCECCryptorRelease();
        sub_10001CFB8(v64, v56);
        sub_10001CFB8(v38, v40);
        sub_100037A24(a1, v32);
        unint64_t v32 = v54;
        uint64_t v50 = v55;
      }
      v69[0] = v50;
      v69[1] = v32;
      v69[2] = v58;
      _OWORD v69[3] = v57;
      v69[4] = v34;
      v69[5] = v45;
      sub_1000361E0(v34, v45);
      sub_100037A38(v58, v57);
      sub_100037A38(v50, v32);
      sub_100A9317C((uint64_t)v69, a8, (uint64_t *)v68);
      sub_100037A24(v50, v32);
      sub_100037A24(v58, v57);
      sub_10001CFB8(v34, v45);
      sub_100037A24(v50, v32);
      sub_10001CFB8(v58, v57);
      sub_10001CFB8(v34, v45);
      uint64_t result = sub_10001CFB8(v31, v30);
      long long v51 = v68[1];
      _OWORD *v61 = v68[0];
      v61[1] = v51;
      v61[2] = v68[2];
    }
  }
  else
  {
    id v16 = [self sharedInstance];
    unsigned int v17 = [v16 isInternalBuild];

    if (v17) {
      static os_log_type_t.fault.getter();
    }
    else {
      static os_log_type_t.error.getter();
    }
    if (qword_101636F48 != -1) {
      swift_once();
    }
    os_log(_:dso:log:_:_:)();
    sub_100130148();
    swift_allocError();
    unsigned char *v26 = 3;
    return swift_willThrow();
  }
  return result;
}

uint64_t sub_100A8F53C()
{
  sub_10001D4B0(0, (unint64_t *)&qword_10163AE70);
  uint64_t result = OS_os_log.init(subsystem:category:)();
  qword_10170E9E0 = result;
  return result;
}

uint64_t sub_100A8F5A8(void *a1)
{
  unint64_t v3 = v1;
  uint64_t v5 = sub_10000588C(&qword_101658668);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  int v8 = (char *)&v11 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10001CD44(a1, a1[3]);
  sub_100A99C64();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  long long v11 = *v3;
  *(void *)&long long v12 = *((void *)v3 + 2);
  char v14 = 0;
  sub_100A99D60();
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  if (!v2)
  {
    long long v9 = *(long long *)((char *)v3 + 40);
    long long v11 = *(long long *)((char *)v3 + 24);
    long long v12 = v9;
    long long v13 = *(long long *)((char *)v3 + 56);
    char v14 = 1;
    sub_100A99DB4();
    KeyedEncodingContainer.encode<A>(_:forKey:)();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
}

Swift::Int sub_100A8F74C()
{
  Hasher.init(_seed:)();
  long long v11 = *v0;
  uint64_t v12 = *((void *)v0 + 2);
  Hasher._combine(_:)(v11);
  sub_100A99C04((uint64_t)&v11);
  Data.hash(into:)();
  sub_100A99C34((uint64_t)&v11);
  long long v1 = *(long long *)((char *)v0 + 40);
  long long v7 = *(long long *)((char *)v0 + 24);
  long long v8 = v1;
  long long v9 = *(long long *)((char *)v0 + 56);
  unint64_t v2 = *((void *)&v7 + 1);
  if (*((void *)&v7 + 1) >> 60 == 15)
  {
    Hasher._combine(_:)(0);
    sub_100A99374(&v7, (void (*)(void, void))sub_1006CD4D8, (void (*)(uint64_t, uint64_t))sub_1000361E0, (void (*)(uint64_t, uint64_t))sub_100037A38);
  }
  else
  {
    uint64_t v3 = v7;
    Hasher._combine(_:)(1u);
    sub_100A99374(&v7, (void (*)(void, void))sub_1006CD4D8, (void (*)(uint64_t, uint64_t))sub_1000361E0, (void (*)(uint64_t, uint64_t))sub_100037A38);
    sub_100037A38(v3, v2);
    Data.hash(into:)();
    sub_100037A24(v3, v2);
  }
  long long v10 = v8;
  sub_100061E54((uint64_t)&v10);
  Data.hash(into:)();
  sub_1000CE9DC((uint64_t)&v10);
  unint64_t v4 = *((void *)&v9 + 1);
  if (*((void *)&v9 + 1) >> 60 == 15)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    uint64_t v5 = v9;
    Hasher._combine(_:)(1u);
    sub_1000361E0(v5, v4);
    Data.hash(into:)();
    sub_100037A24(v5, v4);
  }
  sub_100A99374(&v7, (void (*)(void, void))sub_10015AF5C, (void (*)(uint64_t, uint64_t))sub_10001CFB8, (void (*)(uint64_t, uint64_t))sub_100037A24);
  return Hasher._finalize()();
}

uint64_t sub_100A8F98C(void *a1)
{
  uint64_t v3 = v1;
  uint64_t v5 = sub_10000588C(&qword_101658610);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  long long v8 = (char *)&v10 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10001CD44(a1, a1[3]);
  sub_100A99320();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  sub_10001D608(v3, (uint64_t)v14, &qword_1016434F8);
  sub_10001D608((uint64_t)v14, (uint64_t)&v12, &qword_1016434F8);
  char v11 = 0;
  sub_10043D4A8();
  KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)();
  if (!v2)
  {
    long long v12 = *(_OWORD *)(v3 + 16);
    char v11 = 1;
    sub_10043C654();
    KeyedEncodingContainer.encode<A>(_:forKey:)();
    sub_10001D608(v3 + 32, (uint64_t)v13, &qword_10164A358);
    sub_10001D608((uint64_t)v13, (uint64_t)&v12, &qword_10164A358);
    char v11 = 2;
    sub_10043C164();
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
}

Swift::Int sub_100A8FB9C()
{
  Hasher.init(_seed:)();
  unint64_t v1 = *(void *)(v0 + 8);
  if (v1 >> 60 == 15)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    uint64_t v2 = *(void *)v0;
    Hasher._combine(_:)(1u);
    sub_1000361E0(v2, v1);
    Data.hash(into:)();
    sub_100037A24(v2, v1);
  }
  long long v6 = *(_OWORD *)(v0 + 16);
  sub_100061E54((uint64_t)&v6);
  Data.hash(into:)();
  sub_1000CE9DC((uint64_t)&v6);
  unint64_t v3 = *(void *)(v0 + 40);
  if (v3 >> 60 == 15)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    uint64_t v4 = *(void *)(v0 + 32);
    Hasher._combine(_:)(1u);
    sub_1000361E0(v4, v3);
    Data.hash(into:)();
    sub_100037A24(v4, v3);
  }
  return Hasher._finalize()();
}

uint64_t sub_100A8FCBC(void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v13 = a4;
  uint64_t v7 = sub_10000588C(&qword_101658690);
  uint64_t v8 = *(void *)(v7 - 8);
  __chkstk_darwin(v7);
  uint64_t v10 = (char *)&v12 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10001CD44(a1, a1[3]);
  sub_100A99E08();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  LOBYTE(v14) = 0;
  KeyedEncodingContainer.encode(_:forKey:)();
  if (!v4)
  {
    uint64_t v14 = a3;
    uint64_t v15 = v13;
    char v16 = 1;
    sub_1002A89B4();
    KeyedEncodingContainer.encode<A>(_:forKey:)();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v8 + 8))(v10, v7);
}

uint64_t sub_100A8FE44()
{
  if (*v0) {
    return 0xD000000000000013;
  }
  else {
    return 1953393000;
  }
}

uint64_t sub_100A8FE7C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_100A976D4(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_100A8FEA4(uint64_t a1)
{
  unint64_t v2 = sub_100A99C64();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_100A8FEE0(uint64_t a1)
{
  unint64_t v2 = sub_100A99C64();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_100A8FF20()
{
  uint64_t v1 = v0[1];
  unint64_t v3 = v0[2];
  uint64_t v2 = v0[3];
  unint64_t v5 = v0[4];
  uint64_t v4 = v0[5];
  unint64_t v7 = v0[6];
  uint64_t v6 = v0[7];
  unint64_t v8 = v0[8];
  Hasher._combine(_:)(*v0);
  sub_1000361E0(v1, v3);
  Data.hash(into:)();
  sub_10001CFB8(v1, v3);
  if (v5 >> 60 == 15)
  {
    Hasher._combine(_:)(0);
    sub_100037A38(v2, v5);
    sub_1000361E0(v4, v7);
    sub_100037A38(v6, v8);
  }
  else
  {
    Hasher._combine(_:)(1u);
    sub_100037A38(v2, v5);
    sub_1000361E0(v4, v7);
    sub_100037A38(v6, v8);
    sub_100037A38(v2, v5);
    Data.hash(into:)();
    sub_100037A24(v2, v5);
  }
  sub_1000361E0(v4, v7);
  Data.hash(into:)();
  sub_10001CFB8(v4, v7);
  if (v8 >> 60 == 15)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    Hasher._combine(_:)(1u);
    sub_1000361E0(v6, v8);
    Data.hash(into:)();
    sub_100037A24(v6, v8);
  }
  sub_100037A24(v2, v5);
  sub_10001CFB8(v4, v7);

  return sub_100037A24(v6, v8);
}

Swift::Int sub_100A900E4()
{
  Swift::UInt64 v1 = *v0;
  uint64_t v2 = v0[1];
  unint64_t v4 = v0[2];
  uint64_t v3 = v0[3];
  unint64_t v6 = v0[4];
  uint64_t v5 = v0[5];
  unint64_t v8 = v0[6];
  uint64_t v7 = v0[7];
  unint64_t v9 = v0[8];
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  sub_1000361E0(v2, v4);
  Data.hash(into:)();
  sub_10001CFB8(v2, v4);
  if (v6 >> 60 == 15)
  {
    Hasher._combine(_:)(0);
    sub_100037A38(v3, v6);
    sub_1000361E0(v5, v8);
    sub_100037A38(v7, v9);
  }
  else
  {
    Hasher._combine(_:)(1u);
    sub_100037A38(v3, v6);
    sub_1000361E0(v5, v8);
    sub_100037A38(v7, v9);
    sub_100037A38(v3, v6);
    Data.hash(into:)();
    sub_100037A24(v3, v6);
  }
  sub_1000361E0(v5, v8);
  Data.hash(into:)();
  sub_10001CFB8(v5, v8);
  if (v9 >> 60 == 15)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    Hasher._combine(_:)(1u);
    sub_1000361E0(v7, v9);
    Data.hash(into:)();
    sub_100037A24(v7, v9);
  }
  sub_100037A24(v3, v6);
  sub_10001CFB8(v5, v8);
  sub_100037A24(v7, v9);
  return Hasher._finalize()();
}

__n128 sub_100A902AC@<Q0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  sub_100A977B4(a1, (uint64_t *)v6);
  if (!v2)
  {
    long long v5 = v6[3];
    *(_OWORD *)(a2 + 32) = v6[2];
    *(_OWORD *)(a2 + 48) = v5;
    *(void *)(a2 + 64) = v7;
    __n128 result = (__n128)v6[1];
    *(_OWORD *)a2 = v6[0];
    *(__n128 *)(a2 + 16) = result;
  }
  return result;
}

uint64_t sub_100A90300(void *a1)
{
  return sub_100A8F5A8(a1);
}

BOOL sub_100A90318(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2 = *a1;
  uint64_t v3 = a1[1];
  unint64_t v4 = a1[2];
  long long v5 = *(_OWORD *)(a1 + 5);
  v15[0] = *(_OWORD *)(a1 + 3);
  v15[1] = v5;
  long long v6 = *(_OWORD *)(a1 + 7);
  uint64_t v7 = *a2;
  uint64_t v8 = a2[1];
  unint64_t v9 = a2[2];
  long long v10 = *(_OWORD *)(a2 + 7);
  long long v11 = *(_OWORD *)(a2 + 3);
  v16[1] = *(_OWORD *)(a2 + 5);
  void v16[2] = v10;
  v15[2] = v6;
  v16[0] = v11;
  BOOL v13 = v2 == v7
     && (sub_1000361E0(v3, v4),
         sub_1000361E0(v8, v9),
         char v12 = _s12searchpartyd24KeyRepresentableInternalV23__derived_struct_equalsySbAC_ACtFZ_0(v3, v4, v8, v9),
         sub_10001CFB8(v8, v9),
         sub_10001CFB8(v3, v4),
         (v12 & 1) != 0)
     && sub_100A966A4((uint64_t)v15, (uint64_t)v16);
  return v13;
}

uint64_t sub_100A903EC()
{
  uint64_t v1 = 0x654B63696C627570;
  if (*v0 != 1) {
    uint64_t v1 = 0x4B65746176697270;
  }
  if (*v0) {
    return v1;
  }
  else {
    return 0x64656D7265746E69;
  }
}

uint64_t sub_100A9045C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_100A97A64(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_100A90484(uint64_t a1)
{
  unint64_t v2 = sub_100A99320();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_100A904C0(uint64_t a1)
{
  unint64_t v2 = sub_100A99320();

  return CodingKey.debugDescription.getter(a1, v2);
}

void sub_100A90500()
{
  unint64_t v2 = v0[1];
  uint64_t v1 = v0[2];
  unint64_t v4 = v0[3];
  uint64_t v3 = v0[4];
  unint64_t v5 = v0[5];
  if (v2 >> 60 == 15)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    uint64_t v6 = *v0;
    Hasher._combine(_:)(1u);
    sub_1000361E0(v6, v2);
    Data.hash(into:)();
    sub_100037A24(v6, v2);
  }
  sub_1000361E0(v1, v4);
  Data.hash(into:)();
  sub_10001CFB8(v1, v4);
  if (v5 >> 60 == 15)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    Hasher._combine(_:)(1u);
    sub_1000361E0(v3, v5);
    Data.hash(into:)();
    sub_100037A24(v3, v5);
  }
}

Swift::Int sub_100A90630()
{
  uint64_t v1 = *v0;
  unint64_t v2 = v0[1];
  uint64_t v3 = v0[2];
  unint64_t v4 = v0[3];
  uint64_t v5 = v0[4];
  unint64_t v6 = v0[5];
  Hasher.init(_seed:)();
  if (v2 >> 60 == 15)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    Hasher._combine(_:)(1u);
    sub_1000361E0(v1, v2);
    Data.hash(into:)();
    sub_100037A24(v1, v2);
  }
  sub_1000361E0(v3, v4);
  Data.hash(into:)();
  sub_10001CFB8(v3, v4);
  if (v6 >> 60 == 15)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    Hasher._combine(_:)(1u);
    sub_1000361E0(v5, v6);
    Data.hash(into:)();
    sub_100037A24(v5, v6);
  }
  return Hasher._finalize()();
}

double sub_100A90748@<D0>(void *a1@<X0>, _OWORD *a2@<X8>)
{
  sub_100A97BF8(a1, (uint64_t *)v6);
  if (!v2)
  {
    long long v5 = v6[1];
    *a2 = v6[0];
    a2[1] = v5;
    double result = *(double *)&v7;
    a2[2] = v7;
  }
  return result;
}

uint64_t sub_100A9078C(void *a1)
{
  return sub_100A8F98C(a1);
}

BOOL sub_100A907C8(_OWORD *a1, long long *a2)
{
  long long v2 = a1[1];
  v7[0] = *a1;
  v7[1] = v2;
  long long v3 = *a2;
  long long v4 = a2[1];
  v7[2] = a1[2];
  v8[0] = v3;
  long long v5 = a2[2];
  v8[1] = v4;
  v8[2] = v5;
  return sub_100A966A4((uint64_t)v7, (uint64_t)v8);
}

uint64_t sub_100A90810()
{
  if (*v0) {
    return 0x6553646572616873;
  }
  else {
    return 0x7865646E69;
  }
}

uint64_t sub_100A90850@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_100A97F2C(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_100A90878(uint64_t a1)
{
  unint64_t v2 = sub_100A99E08();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_100A908B4(uint64_t a1)
{
  unint64_t v2 = sub_100A99E08();

  return CodingKey.debugDescription.getter(a1, v2);
}

Swift::Int sub_100A908F0()
{
  Swift::UInt64 v1 = *v0;
  uint64_t v2 = v0[1];
  unint64_t v3 = v0[2];
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  sub_1000361E0(v2, v3);
  Data.hash(into:)();
  sub_10001CFB8(v2, v3);
  return Hasher._finalize()();
}

uint64_t sub_100A9096C()
{
  uint64_t v1 = v0[1];
  unint64_t v2 = v0[2];
  Hasher._combine(_:)(*v0);
  sub_1000361E0(v1, v2);
  Data.hash(into:)();

  return sub_10001CFB8(v1, v2);
}

Swift::Int sub_100A909D8()
{
  Swift::UInt64 v1 = *v0;
  uint64_t v2 = v0[1];
  unint64_t v3 = v0[2];
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  sub_1000361E0(v2, v3);
  Data.hash(into:)();
  sub_10001CFB8(v2, v3);
  return Hasher._finalize()();
}

uint64_t sub_100A90A50@<X0>(void *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = sub_100A98030(a1);
  if (!v2)
  {
    *a2 = result;
    a2[1] = v5;
    a2[2] = v6;
  }
  return result;
}

uint64_t sub_100A90A80(void *a1)
{
  return sub_100A8FCBC(a1, *v1, v1[1], v1[2]);
}

uint64_t sub_100A90AA0(void *a1, void *a2)
{
  if (*a1 != *a2) {
    return 0;
  }
  uint64_t v3 = a2[1];
  unint64_t v2 = a2[2];
  uint64_t v5 = a1[1];
  unint64_t v4 = a1[2];
  sub_1000361E0(v5, v4);
  sub_1000361E0(v3, v2);
  char v6 = _s12searchpartyd24KeyRepresentableInternalV23__derived_struct_equalsySbAC_ACtFZ_0(v5, v4, v3, v2);
  sub_10001CFB8(v3, v2);
  sub_10001CFB8(v5, v4);
  return v6 & 1;
}

uint64_t CollaborativeKeyGen.v1.OwnerContext.deinit()
{
  CCCKGOwnerDestroy();
  return v0;
}

uint64_t CollaborativeKeyGen.v1.OwnerContext.__deallocating_deinit()
{
  return sub_100A90C18((void (*)(void))&_CCCKGOwnerDestroy);
}

uint64_t CollaborativeKeyGen.v1.ContributorContext.deinit()
{
  CCCKGContributorDestroy();
  return v0;
}

uint64_t CollaborativeKeyGen.v1.ContributorContext.__deallocating_deinit()
{
  return sub_100A90C18((void (*)(void))&_CCCKGContributorDestroy);
}

uint64_t CollaborativeKeyGen.v2.OwnerContext.deinit()
{
  CCCKG2OwnerDestroy();
  return v0;
}

uint64_t CollaborativeKeyGen.v2.OwnerContext.__deallocating_deinit()
{
  return sub_100A90C18((void (*)(void))&_CCCKG2OwnerDestroy);
}

uint64_t CollaborativeKeyGen.v2.ContributorContext.deinit()
{
  CCCKG2ContributorDestroy();
  return v0;
}

uint64_t CollaborativeKeyGen.v2.ContributorContext.__deallocating_deinit()
{
  return sub_100A90C18((void (*)(void))&_CCCKG2ContributorDestroy);
}

uint64_t sub_100A90C18(void (*a1)(void))
{
  a1(*(void *)(v1 + 16));

  return swift_deallocClassInstance();
}

uint64_t sub_100A90C58(uint64_t a1, int a2)
{
  uint64_t v4 = sub_10000588C(&qword_10163F758);
  __chkstk_darwin(v4 - 8);
  char v6 = (char *)&v17 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (a2 == 1) {
    uint64_t v7 = 85;
  }
  else {
    uint64_t v7 = 57;
  }
  uint64_t v17 = v7;
  uint64_t v19 = sub_10085E9A4(v7);
  unint64_t v20 = v8;
  int v9 = sub_100691E90(&v19);
  if (!v2)
  {
    int v10 = v9;
    if (!v9)
    {
      sub_100435A9C(v17, v19, v20, &v18);
      return v18;
    }
    static os_log_type_t.error.getter();
    if (qword_101636F48 != -1) {
      swift_once();
    }
    sub_10000588C((uint64_t *)&unk_10163AD00);
    uint64_t v11 = swift_allocObject();
    *(_OWORD *)(v11 + 16) = xmmword_101342130;
    *(void *)(v11 + 56) = &type metadata for Int32;
    *(void *)(v11 + 64) = &protocol witness table for Int32;
    *(_DWORD *)(v11 + 32) = v10;
    os_log(_:dso:log:_:_:)();
    swift_bridgeObjectRelease();
    CryptoError.init(rawValue:)();
    uint64_t v12 = type metadata accessor for CryptoError();
    sub_100A992D8((unint64_t *)&qword_1016605B0, (void (*)(uint64_t))&type metadata accessor for CryptoError);
    swift_allocError();
    uint64_t v14 = v13;
    uint64_t v15 = *(void *)(v12 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v15 + 48))(v6, 1, v12) == 1)
    {
      (*(void (**)(uint64_t, void, uint64_t))(v15 + 104))(v14, enum case for CryptoError.unspecifiedError(_:), v12);
      sub_100A99278((uint64_t)v6);
    }
    else
    {
      (*(void (**)(uint64_t, char *, uint64_t))(v15 + 32))(v14, v6, v12);
    }
    swift_willThrow();
  }
  return sub_10001CFB8(v19, v20);
}

uint64_t sub_100A90F40()
{
  uint64_t v1 = 0x4B65746176697270;
  if (*v0 != 1) {
    uint64_t v1 = 0x6553646572616873;
  }
  if (*v0) {
    return v1;
  }
  else {
    return 0x654B63696C627570;
  }
}

uint64_t sub_100A90FAC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_100A981F0(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_100A90FD4(uint64_t a1)
{
  unint64_t v2 = sub_100A9121C();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_100A91010(uint64_t a1)
{
  unint64_t v2 = sub_100A9121C();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t RootKey.encode(to:)(void *a1)
{
  uint64_t v3 = v1;
  uint64_t v5 = sub_10000588C(&qword_101658340);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  unint64_t v8 = (char *)&v10 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10001CD44(a1, a1[3]);
  sub_100A9121C();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  long long v12 = *v3;
  char v11 = 0;
  sub_10043C654();
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  if (!v2)
  {
    long long v12 = v3[1];
    char v11 = 1;
    sub_10043C164();
    KeyedEncodingContainer.encode<A>(_:forKey:)();
    long long v12 = v3[2];
    char v11 = 2;
    sub_1002A89B4();
    KeyedEncodingContainer.encode<A>(_:forKey:)();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
}

unint64_t sub_100A9121C()
{
  unint64_t result = qword_101658348;
  if (!qword_101658348)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_101658348);
  }
  return result;
}

double RootKey.init(from:)@<D0>(void *a1@<X0>, _OWORD *a2@<X8>)
{
  sub_100A98378(a1, (uint64_t *)v6);
  if (!v2)
  {
    long long v5 = v6[1];
    *a2 = v6[0];
    a2[1] = v5;
    double result = *(double *)&v7;
    a2[2] = v7;
  }
  return result;
}

uint64_t sub_100A912B4(void *a1)
{
  return RootKey.encode(to:)(a1);
}

uint64_t sub_100A912CC(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v5 = sub_10000588C(&qword_10163F758);
  __chkstk_darwin(v5 - 8);
  long long v7 = (char *)&v17 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (a1)
  {
    uint64_t result = CCCKGOwnerGenerateShare();
    *a3 = result;
    if (!result) {
      return result;
    }
    static os_log_type_t.error.getter();
    if (qword_101636F48 != -1) {
      swift_once();
    }
    sub_10000588C((uint64_t *)&unk_10163AD00);
    uint64_t v9 = swift_allocObject();
    *(_OWORD *)(v9 + 16) = xmmword_101342130;
    int v10 = *a3;
    *(void *)(v9 + 56) = &type metadata for Int32;
    *(void *)(v9 + 64) = &protocol witness table for Int32;
    *(_DWORD *)(v9 + 32) = v10;
    os_log(_:dso:log:_:_:)();
    swift_bridgeObjectRelease();
    CryptoError.init(rawValue:)();
    uint64_t v11 = type metadata accessor for CryptoError();
    sub_100A992D8((unint64_t *)&qword_1016605B0, (void (*)(uint64_t))&type metadata accessor for CryptoError);
    swift_allocError();
    uint64_t v13 = v12;
    uint64_t v14 = *(void *)(v11 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v14 + 48))(v7, 1, v11) == 1)
    {
      (*(void (**)(uint64_t, void, uint64_t))(v14 + 104))(v13, enum case for CryptoError.unspecifiedError(_:), v11);
      sub_100A99278((uint64_t)v7);
    }
    else
    {
      (*(void (**)(uint64_t, char *, uint64_t))(v14 + 32))(v13, v7, v11);
    }
  }
  else
  {
    uint64_t v15 = type metadata accessor for CryptoError();
    sub_100A992D8((unint64_t *)&qword_1016605B0, (void (*)(uint64_t))&type metadata accessor for CryptoError);
    swift_allocError();
    (*(void (**)(uint64_t, void, uint64_t))(*(void *)(v15 - 8) + 104))(v16, enum case for CryptoError.memoryFailure(_:), v15);
  }
  return swift_willThrow();
}

uint64_t sub_100A915E8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X8>)
{
  return sub_100A92998(a1, a2, a3, (void (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))sub_100A91614, a4);
}

uint64_t sub_100A91614@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v5 = sub_10000588C(&qword_10163F758);
  __chkstk_darwin(v5 - 8);
  long long v7 = (char *)&v36 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (!a1)
  {
    uint64_t v15 = type metadata accessor for CryptoError();
    sub_100A992D8((unint64_t *)&qword_1016605B0, (void (*)(uint64_t))&type metadata accessor for CryptoError);
    swift_allocError();
    (*(void (**)(uint64_t, void, uint64_t))(*(void *)(v15 - 8) + 104))(v16, enum case for CryptoError.memoryFailure(_:), v15);
    return swift_willThrow();
  }
  uint64_t v38 = 0;
  int v8 = CCCKGOwnerFinish();
  if (v8)
  {
    int v9 = v8;
    static os_log_type_t.error.getter();
    if (qword_101636F48 != -1) {
      swift_once();
    }
    sub_10000588C((uint64_t *)&unk_10163AD00);
    uint64_t v10 = swift_allocObject();
    *(_OWORD *)(v10 + 16) = xmmword_101342130;
    *(void *)(v10 + 56) = &type metadata for Int32;
    *(void *)(v10 + 64) = &protocol witness table for Int32;
    *(_DWORD *)(v10 + 32) = v9;
    os_log(_:dso:log:_:_:)();
    swift_bridgeObjectRelease();
    CryptoError.init(rawValue:)();
    uint64_t v11 = type metadata accessor for CryptoError();
    sub_100A992D8((unint64_t *)&qword_1016605B0, (void (*)(uint64_t))&type metadata accessor for CryptoError);
    swift_allocError();
    uint64_t v13 = v12;
    uint64_t v14 = *(void *)(v11 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v14 + 48))(v7, 1, v11) == 1)
    {
      (*(void (**)(uint64_t, void, uint64_t))(v14 + 104))(v13, enum case for CryptoError.unspecifiedError(_:), v11);
      sub_100A99278((uint64_t)v7);
    }
    else
    {
      (*(void (**)(uint64_t, char *, uint64_t))(v14 + 32))(v13, v7, v11);
    }
  }
  else
  {
    uint64_t v18 = v38;
    if (v38)
    {
      uint64_t PublicKeyFromPrivateKey = CCECCryptorGetPublicKeyFromPrivateKey();
      if (PublicKeyFromPrivateKey)
      {
        uint64_t v20 = PublicKeyFromPrivateKey;
        uint64_t v21 = sub_100A90C58(v18, 1);
        if (!v2)
        {
          uint64_t v23 = v21;
          unint64_t v24 = v22;
          uint64_t v25 = sub_100A90C58(v20, 0);
          unint64_t v27 = v26;
          sub_1000361E0(v23, v24);
          uint64_t v30 = sub_10043A040(v23, v24);
          uint64_t v37 = v31;
          uint64_t v32 = sub_10043A38C(v25, v27);
          uint64_t v34 = v33;
          sub_10001CFB8(v23, v24);
          uint64_t v35 = v37;
          *a2 = v30;
          a2[1] = v35;
          a2[2] = v32;
          a2[3] = v34;
        }
        CCECCryptorRelease();
        return CCECCryptorRelease();
      }
    }
    static os_log_type_t.error.getter();
    if (qword_101636F48 != -1) {
      swift_once();
    }
    os_log(_:dso:log:_:_:)();
    uint64_t v28 = type metadata accessor for CryptoError();
    sub_100A992D8((unint64_t *)&qword_1016605B0, (void (*)(uint64_t))&type metadata accessor for CryptoError);
    swift_allocError();
    (*(void (**)(uint64_t, void, uint64_t))(*(void *)(v28 - 8) + 104))(v29, enum case for CryptoError.invalidKey(_:), v28);
  }
  swift_willThrow();
  uint64_t result = v38;
  if (v38) {
    return CCECCryptorRelease();
  }
  return result;
}

uint64_t sub_100A91B84()
{
  uint64_t v1 = sub_10000588C(&qword_10163F758);
  __chkstk_darwin(v1 - 8);
  uint64_t v3 = (char *)&v14 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v18 = 0;
  int v4 = CCCKGContributorCreate();
  int v15 = v4;
  if (v4 || (uint64_t v11 = v18) == 0)
  {
    static os_log_type_t.error.getter();
    if (qword_101636F48 != -1) {
      swift_once();
    }
    sub_10000588C((uint64_t *)&unk_10163AD00);
    uint64_t v5 = swift_allocObject();
    *(_OWORD *)(v5 + 16) = xmmword_101342130;
    *(void *)(v5 + 56) = &type metadata for Int32;
    *(void *)(v5 + 64) = &protocol witness table for Int32;
    *(_DWORD *)(v5 + 32) = v4;
    os_log(_:dso:log:_:_:)();
    swift_bridgeObjectRelease();
    CryptoError.init(rawValue:)();
    uint64_t v6 = type metadata accessor for CryptoError();
    sub_100A992D8((unint64_t *)&qword_1016605B0, (void (*)(uint64_t))&type metadata accessor for CryptoError);
    swift_allocError();
    uint64_t v8 = v7;
    uint64_t v9 = *(void *)(v6 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v3, 1, v6) == 1)
    {
      (*(void (**)(uint64_t, void, uint64_t))(v9 + 104))(v8, enum case for CryptoError.unspecifiedError(_:), v6);
      sub_100A99278((uint64_t)v3);
    }
    else
    {
      (*(void (**)(uint64_t, char *, uint64_t))(v9 + 32))(v8, v3, v6);
    }
    return swift_willThrow();
  }
  else
  {
    type metadata accessor for CollaborativeKeyGen.v1.ContributorContext();
    *(void *)(swift_allocObject() + 16) = v11;
    int v12 = CCCKGGetCommitmentSize();
    uint64_t v16 = sub_10085E9A4(v12);
    unint64_t v17 = v13;
    swift_retain();
    sub_100A95FE4(&v16, &v15);
    uint64_t result = v16;
    if (v0)
    {
      sub_10001CFB8(v16, v17);
      return swift_release();
    }
  }
  return result;
}

uint64_t sub_100A91E94(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v5 = sub_10000588C(&qword_10163F758);
  __chkstk_darwin(v5 - 8);
  uint64_t v7 = (char *)&v17 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (a1)
  {
    uint64_t result = CCCKGContributorCommit();
    *a3 = result;
    if (!result) {
      return result;
    }
    static os_log_type_t.error.getter();
    if (qword_101636F48 != -1) {
      swift_once();
    }
    sub_10000588C((uint64_t *)&unk_10163AD00);
    uint64_t v9 = swift_allocObject();
    *(_OWORD *)(v9 + 16) = xmmword_101342130;
    int v10 = *a3;
    *(void *)(v9 + 56) = &type metadata for Int32;
    *(void *)(v9 + 64) = &protocol witness table for Int32;
    *(_DWORD *)(v9 + 32) = v10;
    os_log(_:dso:log:_:_:)();
    swift_bridgeObjectRelease();
    CryptoError.init(rawValue:)();
    uint64_t v11 = type metadata accessor for CryptoError();
    sub_100A992D8((unint64_t *)&qword_1016605B0, (void (*)(uint64_t))&type metadata accessor for CryptoError);
    swift_allocError();
    uint64_t v13 = v12;
    uint64_t v14 = *(void *)(v11 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v14 + 48))(v7, 1, v11) == 1)
    {
      (*(void (**)(uint64_t, void, uint64_t))(v14 + 104))(v13, enum case for CryptoError.unspecifiedError(_:), v11);
      sub_100A99278((uint64_t)v7);
    }
    else
    {
      (*(void (**)(uint64_t, char *, uint64_t))(v14 + 32))(v13, v7, v11);
    }
  }
  else
  {
    uint64_t v15 = type metadata accessor for CryptoError();
    sub_100A992D8((unint64_t *)&qword_1016605B0, (void (*)(uint64_t))&type metadata accessor for CryptoError);
    swift_allocError();
    (*(void (**)(uint64_t, void, uint64_t))(*(void *)(v15 - 8) + 104))(v16, enum case for CryptoError.memoryFailure(_:), v15);
  }
  return swift_willThrow();
}

uint64_t sub_100A9219C@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  if (a1)
  {
    CCCKGGetShareSize();
    int v4 = CCCKGGetOpeningSize();
    uint64_t v10 = sub_10085E9A4(v4);
    unint64_t v11 = v5;
    swift_retain();
    sub_10114A2F4(&v10);
    uint64_t result = v10;
    unint64_t v7 = v11;
    if (v2)
    {
      return sub_10001CFB8(v10, v11);
    }
    else
    {
      *a2 = v10;
      a2[1] = v7;
    }
  }
  else
  {
    uint64_t v8 = type metadata accessor for CryptoError();
    sub_100A992D8((unint64_t *)&qword_1016605B0, (void (*)(uint64_t))&type metadata accessor for CryptoError);
    swift_allocError();
    (*(void (**)(uint64_t, void, uint64_t))(*(void *)(v8 - 8) + 104))(v9, enum case for CryptoError.memoryFailure(_:), v8);
    return swift_willThrow();
  }
  return result;
}

uint64_t sub_100A922EC(uint64_t a1)
{
  uint64_t v2 = sub_10000588C(&qword_10163F758);
  __chkstk_darwin(v2 - 8);
  int v4 = (char *)&v14 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (a1)
  {
    uint64_t v14 = 0;
    uint64_t result = CCCKGContributorFinish();
    if (!result) {
      return result;
    }
    int v6 = result;
    static os_log_type_t.error.getter();
    if (qword_101636F48 != -1) {
      swift_once();
    }
    sub_10000588C((uint64_t *)&unk_10163AD00);
    uint64_t v7 = swift_allocObject();
    *(_OWORD *)(v7 + 16) = xmmword_101342130;
    *(void *)(v7 + 56) = &type metadata for Int32;
    *(void *)(v7 + 64) = &protocol witness table for Int32;
    *(_DWORD *)(v7 + 32) = v6;
    os_log(_:dso:log:_:_:)();
    swift_bridgeObjectRelease();
    CryptoError.init(rawValue:)();
    uint64_t v8 = type metadata accessor for CryptoError();
    sub_100A992D8((unint64_t *)&qword_1016605B0, (void (*)(uint64_t))&type metadata accessor for CryptoError);
    swift_allocError();
    uint64_t v10 = v9;
    uint64_t v11 = *(void *)(v8 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v11 + 48))(v4, 1, v8) == 1)
    {
      (*(void (**)(uint64_t, void, uint64_t))(v11 + 104))(v10, enum case for CryptoError.unspecifiedError(_:), v8);
      sub_100A99278((uint64_t)v4);
    }
    else
    {
      (*(void (**)(uint64_t, char *, uint64_t))(v11 + 32))(v10, v4, v8);
    }
  }
  else
  {
    uint64_t v12 = type metadata accessor for CryptoError();
    sub_100A992D8((unint64_t *)&qword_1016605B0, (void (*)(uint64_t))&type metadata accessor for CryptoError);
    swift_allocError();
    (*(void (**)(uint64_t, void, uint64_t))(*(void *)(v12 - 8) + 104))(v13, enum case for CryptoError.memoryFailure(_:), v12);
  }
  return swift_willThrow();
}

uint64_t sub_100A9264C(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v5 = sub_10000588C(&qword_10163F758);
  __chkstk_darwin(v5 - 8);
  uint64_t v7 = (char *)&v17 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (a1)
  {
    uint64_t result = CCCKG2OwnerGenerateShare();
    *a3 = result;
    if (!result) {
      return result;
    }
    static os_log_type_t.error.getter();
    if (qword_101636F48 != -1) {
      swift_once();
    }
    sub_10000588C((uint64_t *)&unk_10163AD00);
    uint64_t v9 = swift_allocObject();
    *(_OWORD *)(v9 + 16) = xmmword_101342130;
    int v10 = *a3;
    *(void *)(v9 + 56) = &type metadata for Int32;
    *(void *)(v9 + 64) = &protocol witness table for Int32;
    *(_DWORD *)(v9 + 32) = v10;
    os_log(_:dso:log:_:_:)();
    swift_bridgeObjectRelease();
    CryptoError.init(rawValue:)();
    uint64_t v11 = type metadata accessor for CryptoError();
    sub_100A992D8((unint64_t *)&qword_1016605B0, (void (*)(uint64_t))&type metadata accessor for CryptoError);
    swift_allocError();
    uint64_t v13 = v12;
    uint64_t v14 = *(void *)(v11 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v14 + 48))(v7, 1, v11) == 1)
    {
      (*(void (**)(uint64_t, void, uint64_t))(v14 + 104))(v13, enum case for CryptoError.unspecifiedError(_:), v11);
      sub_100A99278((uint64_t)v7);
    }
    else
    {
      (*(void (**)(uint64_t, char *, uint64_t))(v14 + 32))(v13, v7, v11);
    }
  }
  else
  {
    uint64_t v15 = type metadata accessor for CryptoError();
    sub_100A992D8((unint64_t *)&qword_1016605B0, (void (*)(uint64_t))&type metadata accessor for CryptoError);
    swift_allocError();
    (*(void (**)(uint64_t, void, uint64_t))(*(void *)(v15 - 8) + 104))(v16, enum case for CryptoError.memoryFailure(_:), v15);
  }
  return swift_willThrow();
}

uint64_t sub_100A9296C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X8>)
{
  return sub_100A92998(a1, a2, a3, (void (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))sub_100A92C10, a4);
}

uint64_t sub_100A92998@<X0>(uint64_t a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X3>, void (*a4)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t)@<X4>, uint64_t a5@<X8>)
{
  if (a1)
  {
    type metadata accessor for __DataStorage();
    swift_allocObject();
    uint64_t v22 = 0x4000000000;
    unint64_t v23 = __DataStorage.init(length:)();
    swift_retain();
    sub_100A964F0((int *)&v22, a2, a1, a3, 64, a4);
    if (v5)
    {
      return swift_release();
    }
    else
    {
      uint64_t v14 = v22;
      unint64_t v15 = v23 | 0x4000000000000000;
      long long v16 = v24;
      uint64_t v18 = v25;
      uint64_t v17 = v26;
      sub_1000361E0(v22, v23 | 0x4000000000000000);
      sub_100435A9C(32, v14, v15, &v22);
      sub_100434DF4(v22, v23, (uint64_t *)&v24);
      uint64_t v27 = *((void *)&v24 + 1);
      uint64_t v21 = v24;
      sub_1000361E0(v14, v15);
      sub_100886210(32, v14, v15, &v22);
      sub_100434DF4(v22, v23, (uint64_t *)&v24);
      uint64_t result = swift_release();
      long long v19 = v24;
      *(_OWORD *)a5 = v16;
      *(void *)(a5 + 16) = v18;
      *(void *)(a5 + 24) = v17;
      uint64_t v20 = v27;
      *(void *)(a5 + 32) = v21;
      *(void *)(a5 + 40) = v20;
      *(_OWORD *)(a5 + 48) = v19;
      *(_OWORD *)(a5 + 64) = xmmword_101347BB0;
    }
  }
  else
  {
    uint64_t v12 = type metadata accessor for CryptoError();
    sub_100A992D8((unint64_t *)&qword_1016605B0, (void (*)(uint64_t))&type metadata accessor for CryptoError);
    swift_allocError();
    (*(void (**)(uint64_t, void, uint64_t))(*(void *)(v12 - 8) + 104))(v13, enum case for CryptoError.memoryFailure(_:), v12);
    return swift_willThrow();
  }
  return result;
}

uint64_t sub_100A92C10@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v5 = sub_10000588C(&qword_10163F758);
  __chkstk_darwin(v5 - 8);
  uint64_t v7 = (char *)&v36 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (!a1)
  {
    uint64_t v15 = type metadata accessor for CryptoError();
    sub_100A992D8((unint64_t *)&qword_1016605B0, (void (*)(uint64_t))&type metadata accessor for CryptoError);
    swift_allocError();
    (*(void (**)(uint64_t, void, uint64_t))(*(void *)(v15 - 8) + 104))(v16, enum case for CryptoError.memoryFailure(_:), v15);
    return swift_willThrow();
  }
  uint64_t v38 = 0;
  int v8 = CCCKG2OwnerFinish();
  if (v8)
  {
    uint64_t v9 = v8;
    static os_log_type_t.error.getter();
    if (qword_101636F48 != -1) {
      swift_once();
    }
    sub_10000588C((uint64_t *)&unk_10163AD00);
    uint64_t v10 = swift_allocObject();
    *(_OWORD *)(v10 + 16) = xmmword_101342130;
    *(void *)(v10 + 56) = &type metadata for Int;
    *(void *)(v10 + 64) = &protocol witness table for Int;
    *(void *)(v10 + 32) = v9;
    os_log(_:dso:log:_:_:)();
    swift_bridgeObjectRelease();
    CryptoError.init(rawValue:)();
    uint64_t v11 = type metadata accessor for CryptoError();
    sub_100A992D8((unint64_t *)&qword_1016605B0, (void (*)(uint64_t))&type metadata accessor for CryptoError);
    swift_allocError();
    uint64_t v13 = v12;
    uint64_t v14 = *(void *)(v11 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v14 + 48))(v7, 1, v11) == 1)
    {
      (*(void (**)(uint64_t, void, uint64_t))(v14 + 104))(v13, enum case for CryptoError.unspecifiedError(_:), v11);
      sub_100A99278((uint64_t)v7);
    }
    else
    {
      (*(void (**)(uint64_t, char *, uint64_t))(v14 + 32))(v13, v7, v11);
    }
  }
  else
  {
    uint64_t v18 = v38;
    if (v38)
    {
      uint64_t PublicKeyFromPrivateKey = CCECCryptorGetPublicKeyFromPrivateKey();
      if (PublicKeyFromPrivateKey)
      {
        uint64_t v20 = PublicKeyFromPrivateKey;
        uint64_t v21 = sub_100A90C58(v18, 1);
        if (!v2)
        {
          uint64_t v23 = v21;
          unint64_t v24 = v22;
          uint64_t v25 = sub_100A90C58(v20, 0);
          unint64_t v27 = v26;
          sub_1000361E0(v23, v24);
          uint64_t v30 = sub_10043A040(v23, v24);
          uint64_t v37 = v31;
          uint64_t v32 = sub_10043A38C(v25, v27);
          uint64_t v34 = v33;
          sub_10001CFB8(v23, v24);
          uint64_t v35 = v37;
          *a2 = v30;
          a2[1] = v35;
          a2[2] = v32;
          a2[3] = v34;
        }
        CCECCryptorRelease();
        return CCECCryptorRelease();
      }
    }
    static os_log_type_t.error.getter();
    if (qword_101636F48 != -1) {
      swift_once();
    }
    os_log(_:dso:log:_:_:)();
    uint64_t v28 = type metadata accessor for CryptoError();
    sub_100A992D8((unint64_t *)&qword_1016605B0, (void (*)(uint64_t))&type metadata accessor for CryptoError);
    swift_allocError();
    (*(void (**)(uint64_t, void, uint64_t))(*(void *)(v28 - 8) + 104))(v29, enum case for CryptoError.invalidKey(_:), v28);
  }
  swift_willThrow();
  uint64_t result = v38;
  if (v38) {
    return CCECCryptorRelease();
  }
  return result;
}

uint64_t sub_100A9317C@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t *a3@<X8>)
{
  long long v24 = *(_OWORD *)(a1 + 32);
  uint64_t v6 = *a2;
  unint64_t v7 = a2[1];
  *(_OWORD *)a2 = v24;
  sub_100061E54((uint64_t)&v24);
  sub_10001CFB8(v6, v7);
  uint64_t v8 = String.utf8Data.getter();
  unint64_t v10 = v9;
  long long v11 = v24;
  sub_100061E54((uint64_t)&v24);
  uint64_t v12 = sub_100A941DC(v11, *((unint64_t *)&v11 + 1), v8, v10, 32);
  if (v3)
  {
    sub_10001CFB8(v8, v10);
    return sub_1000CE9DC((uint64_t)&v24);
  }
  else
  {
    uint64_t v15 = v12;
    unint64_t v16 = v13;
    sub_1000CE9DC((uint64_t)&v24);
    sub_100434DF4(v15, v16, v23);
    sub_10001CFB8(v8, v10);
    uint64_t v17 = v23[0];
    uint64_t v18 = v23[1];
    uint64_t v19 = *(void *)(a1 + 16);
    unint64_t v20 = *(void *)(a1 + 24);
    uint64_t v22 = *(void *)a1;
    unint64_t v21 = *(void *)(a1 + 8);
    sub_1000361E0(v19, v20);
    uint64_t result = sub_100037A38(v22, v21);
    *a3 = v17;
    a3[1] = v18;
    a3[2] = v19;
    a3[3] = v20;
    a3[4] = v22;
    a3[5] = v21;
  }
  return result;
}

void sub_100A932C4(uint64_t *a1@<X8>)
{
  type metadata accessor for CFString(0);
  uint64_t v2 = v1;
  uint64_t v31 = v1;
  error[0] = (CFErrorRef)kSecAttrKeyTypeEC;
  sub_100173E4C(error, v29);
  uint64_t v3 = (id)kSecAttrKeyType;
  CFStringRef v4 = (id)kSecAttrKeyTypeEC;
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  sub_10016D21C(v29, v3, isUniquelyReferenced_nonNull_native);

  swift_bridgeObjectRelease();
  uint64_t v31 = v2;
  error[0] = (CFErrorRef)kSecAttrKeyClassPublic;
  sub_100173E4C(error, v29);
  uint64_t v6 = (id)kSecAttrKeyClass;
  CFStringRef v7 = (id)kSecAttrKeyClassPublic;
  char v8 = swift_isUniquelyReferenced_nonNull_native();
  sub_10016D21C(v29, v6, v8);

  swift_bridgeObjectRelease();
  error[0] = 0;
  CFDataRef isa = Data._bridgeToObjectiveC()().super.isa;
  sub_10001D4B0(0, (unint64_t *)&qword_10165F5D0);
  sub_1004424C4();
  CFDictionaryRef v10 = Dictionary._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  long long v11 = SecKeyCreateWithData(isa, v10, error);

  if (v11)
  {
    v29[0] = 0;
    CFDataRef v12 = Data._bridgeToObjectiveC()().super.isa;
    CFDataRef EncryptedData = SecKeyCreateEncryptedData(v11, kSecKeyAlgorithmECIESEncryptionStandardVariableIVX963SHA256AESGCM, v12, v29);

    CFErrorRef v14 = v29[0];
    if (v29[0])
    {
      type metadata accessor for CFError(0);
      sub_100A992D8(&qword_1016585F8, type metadata accessor for CFError);
      swift_allocError();
      *uint64_t v15 = v14;
      static os_log_type_t.error.getter();
      if (qword_101636F48 != -1) {
        swift_once();
      }
      sub_10000588C((uint64_t *)&unk_10163AD00);
      uint64_t v16 = swift_allocObject();
      *(_OWORD *)(v16 + 16) = xmmword_101342130;
      swift_errorRetain();
      sub_10000588C(&qword_101638D40);
      uint64_t v17 = String.init<A>(describing:)();
      uint64_t v19 = v18;
      *(void *)(v16 + 56) = &type metadata for String;
      *(void *)(v16 + 64) = sub_10000B4CC();
      *(void *)(v16 + 32) = v17;
      *(void *)(v16 + 40) = v19;
      os_log(_:dso:log:_:_:)();
      swift_bridgeObjectRelease();
      swift_willThrow();

LABEL_6:
      return;
    }
    if (!EncryptedData)
    {
      static os_log_type_t.error.getter();
      if (qword_101636F48 != -1) {
        swift_once();
      }
      os_log(_:dso:log:_:_:)();
      uint64_t v26 = type metadata accessor for CryptoError();
      sub_100A992D8((unint64_t *)&qword_1016605B0, (void (*)(uint64_t))&type metadata accessor for CryptoError);
      swift_allocError();
      (*(void (**)(uint64_t, void, uint64_t))(*(void *)(v26 - 8) + 104))(v27, enum case for CryptoError.encodeError(_:), v26);
      swift_willThrow();
      goto LABEL_6;
    }
    CFDataRef v22 = EncryptedData;
    uint64_t v23 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v25 = v24;

    *a1 = v23;
    a1[1] = v25;
  }
  else
  {
    static os_log_type_t.error.getter();
    if (qword_101636F48 != -1) {
      swift_once();
    }
    os_log(_:dso:log:_:_:)();
    uint64_t v20 = type metadata accessor for CryptoError();
    sub_100A992D8((unint64_t *)&qword_1016605B0, (void (*)(uint64_t))&type metadata accessor for CryptoError);
    swift_allocError();
    (*(void (**)(uint64_t, void, uint64_t))(*(void *)(v20 - 8) + 104))(v21, enum case for CryptoError.encodeError(_:), v20);
    swift_willThrow();
  }
}

void sub_100A93880(uint64_t *a1@<X8>)
{
  type metadata accessor for CFString(0);
  uint64_t v2 = v1;
  uint64_t v36 = v1;
  error[0] = (CFErrorRef)kSecAttrKeyTypeEC;
  sub_100173E4C(error, v34);
  uint64_t v3 = (id)kSecAttrKeyType;
  CFStringRef v4 = (id)kSecAttrKeyTypeEC;
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  sub_10016D21C(v34, v3, isUniquelyReferenced_nonNull_native);

  swift_bridgeObjectRelease();
  uint64_t v36 = v2;
  error[0] = (CFErrorRef)kSecAttrKeyClassPrivate;
  sub_100173E4C(error, v34);
  uint64_t v6 = (id)kSecAttrKeyClass;
  CFStringRef v7 = (id)kSecAttrKeyClassPrivate;
  char v8 = swift_isUniquelyReferenced_nonNull_native();
  sub_10016D21C(v34, v6, v8);

  swift_bridgeObjectRelease();
  error[0] = 0;
  CFDataRef isa = Data._bridgeToObjectiveC()().super.isa;
  sub_10001D4B0(0, (unint64_t *)&qword_10165F5D0);
  sub_1004424C4();
  CFDictionaryRef v10 = Dictionary._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  SecKeyRef v11 = SecKeyCreateWithData(isa, v10, error);

  if (!v11) {
    goto LABEL_4;
  }
  if (error[0])
  {

LABEL_4:
    sub_10000588C((uint64_t *)&unk_10163AD00);
    uint64_t v12 = swift_allocObject();
    *(_OWORD *)(v12 + 16) = xmmword_101342130;
    v34[0] = error[0];
    sub_10000588C(&qword_1016454C0);
    uint64_t v13 = String.init<A>(describing:)();
    uint64_t v15 = v14;
    *(void *)(v12 + 56) = &type metadata for String;
    *(void *)(v12 + 64) = sub_10000B4CC();
    *(void *)(v12 + 32) = v13;
    *(void *)(v12 + 40) = v15;
    sub_10001D4B0(0, (unint64_t *)&qword_10163AE70);
    uint64_t v16 = (void *)static OS_os_log.default.getter();
    static os_log_type_t.default.getter();
    os_log(_:dso:log:type:_:)();
    swift_bridgeObjectRelease();

    uint64_t v17 = type metadata accessor for CryptoError();
    sub_100A992D8((unint64_t *)&qword_1016605B0, (void (*)(uint64_t))&type metadata accessor for CryptoError);
    swift_allocError();
    (*(void (**)(uint64_t, void, uint64_t))(*(void *)(v17 - 8) + 104))(v18, enum case for CryptoError.decodeError(_:), v17);
    swift_willThrow();
    return;
  }
  v34[0] = 0;
  CFDataRef v19 = Data._bridgeToObjectiveC()().super.isa;
  CFDataRef DecryptedData = SecKeyCreateDecryptedData(v11, kSecKeyAlgorithmECIESEncryptionStandardVariableIVX963SHA256AESGCM, v19, v34);

  CFErrorRef v21 = v34[0];
  if (v34[0])
  {
    type metadata accessor for CFError(0);
    sub_100A992D8(&qword_1016585F8, type metadata accessor for CFError);
    swift_allocError();
    *CFDataRef v22 = v21;
    static os_log_type_t.error.getter();
    if (qword_101636F48 != -1) {
      swift_once();
    }
    sub_10000588C((uint64_t *)&unk_10163AD00);
    uint64_t v23 = swift_allocObject();
    *(_OWORD *)(v23 + 16) = xmmword_101342130;
    swift_errorRetain();
    sub_10000588C(&qword_101638D40);
    uint64_t v24 = String.init<A>(describing:)();
    uint64_t v26 = v25;
    *(void *)(v23 + 56) = &type metadata for String;
    *(void *)(v23 + 64) = sub_10000B4CC();
    *(void *)(v23 + 32) = v24;
    *(void *)(v23 + 40) = v26;
    os_log(_:dso:log:_:_:)();
    swift_bridgeObjectRelease();
    swift_willThrow();
  }
  else if (DecryptedData)
  {
    CFDataRef v27 = DecryptedData;
    uint64_t v28 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v30 = v29;

    *a1 = v28;
    a1[1] = v30;
  }
  else
  {
    static os_log_type_t.error.getter();
    if (qword_101636F48 != -1) {
      swift_once();
    }
    os_log(_:dso:log:_:_:)();
    uint64_t v31 = type metadata accessor for CryptoError();
    sub_100A992D8((unint64_t *)&qword_1016605B0, (void (*)(uint64_t))&type metadata accessor for CryptoError);
    swift_allocError();
    (*(void (**)(uint64_t, void, uint64_t))(*(void *)(v31 - 8) + 104))(v32, enum case for CryptoError.decodeError(_:), v31);
    swift_willThrow();
  }
}

void sub_100A93EA8(__SecKey *a1@<X0>, uint64_t *a2@<X8>)
{
  CFErrorRef error = 0;
  CFDataRef isa = Data._bridgeToObjectiveC()().super.isa;
  CFDataRef v5 = SecKeyCreateDecryptedData(a1, kSecKeyAlgorithmECIESEncryptionStandardVariableIVX963SHA256AESGCM, isa, &error);

  CFErrorRef v6 = error;
  if (error)
  {
    type metadata accessor for CFError(0);
    sub_100A992D8(&qword_1016585F8, type metadata accessor for CFError);
    swift_allocError();
    *CFStringRef v7 = v6;
    static os_log_type_t.error.getter();
    if (qword_101636F48 != -1) {
      swift_once();
    }
    sub_10000588C((uint64_t *)&unk_10163AD00);
    uint64_t v8 = swift_allocObject();
    *(_OWORD *)(v8 + 16) = xmmword_101342130;
    swift_errorRetain();
    sub_10000588C(&qword_101638D40);
    uint64_t v9 = String.init<A>(describing:)();
    uint64_t v11 = v10;
    *(void *)(v8 + 56) = &type metadata for String;
    *(void *)(v8 + 64) = sub_10000B4CC();
    *(void *)(v8 + 32) = v9;
    *(void *)(v8 + 40) = v11;
    os_log(_:dso:log:_:_:)();
    swift_bridgeObjectRelease();
    swift_willThrow();
  }
  else if (v5)
  {
    CFDataRef v12 = v5;
    uint64_t v13 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v15 = v14;

    *a2 = v13;
    a2[1] = v15;
  }
  else
  {
    static os_log_type_t.error.getter();
    if (qword_101636F48 != -1) {
      swift_once();
    }
    os_log(_:dso:log:_:_:)();
    uint64_t v16 = type metadata accessor for CryptoError();
    sub_100A992D8((unint64_t *)&qword_1016605B0, (void (*)(uint64_t))&type metadata accessor for CryptoError);
    swift_allocError();
    (*(void (**)(uint64_t, void, uint64_t))(*(void *)(v16 - 8) + 104))(v17, enum case for CryptoError.decodeError(_:), v16);
    swift_willThrow();
  }
}

uint64_t sub_100A941DC(uint64_t a1, unint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5)
{
  uint64_t v11 = sub_10000588C(&qword_10163F758);
  __chkstk_darwin(v11 - 8);
  uint64_t v13 = (uint64_t)&v24 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v28 = sub_10085E9A4(a5);
  unint64_t v29 = v14;
  switch(a4 >> 62)
  {
    case 1uLL:
      uint64_t v25 = v13;
      uint64_t v13 = a3 >> 32;
      if (a3 >> 32 < (int)a3)
      {
        __break(1u);
        goto LABEL_23;
      }
      sub_1000361E0(a1, a2);
      sub_1000361E0(a3, a4);
      LODWORD(a5) = sub_100A96FBC((int)a3, a3 >> 32, a4 & 0x3FFFFFFFFFFFFFFFLL, a3, a4, a1, a2, &v28);
      sub_10001CFB8(a3, a4);
      sub_10001CFB8(a1, a2);
      if (v5) {
        return sub_10001CFB8(v28, v29);
      }
      uint64_t v13 = v25;
      if (a5) {
        goto LABEL_16;
      }
      return v28;
    case 2uLL:
      uint64_t v25 = v13;
      uint64_t v16 = *(void *)(a3 + 16);
      uint64_t v15 = *(void *)(a3 + 24);
      sub_1000361E0(a1, a2);
      sub_1000361E0(a3, a4);
      swift_retain();
      swift_retain();
      int v17 = sub_100A96FBC(v16, v15, a4 & 0x3FFFFFFFFFFFFFFFLL, a3, a4, a1, a2, &v28);
      if (v5)
      {
        swift_release();
        swift_release();
LABEL_11:
        sub_10001CFB8(a3, a4);
        sub_10001CFB8(a1, a2);
      }
      else
      {
        LODWORD(a5) = v17;
        swift_release();
        swift_release();
        sub_10001CFB8(a3, a4);
        sub_10001CFB8(a1, a2);
        uint64_t v13 = v25;
        if (!a5) {
          return v28;
        }
LABEL_16:
        static os_log_type_t.error.getter();
        if (qword_101636F48 != -1) {
LABEL_23:
        }
          swift_once();
        sub_10000588C((uint64_t *)&unk_10163AD00);
        uint64_t v19 = swift_allocObject();
        *(_OWORD *)(v19 + 16) = xmmword_101342130;
        *(void *)(v19 + 56) = &type metadata for Int32;
        *(void *)(v19 + 64) = &protocol witness table for Int32;
        *(_DWORD *)(v19 + 32) = a5;
        os_log(_:dso:log:_:_:)();
        swift_bridgeObjectRelease();
        CryptoError.init(rawValue:)();
        uint64_t v20 = type metadata accessor for CryptoError();
        sub_100A992D8((unint64_t *)&qword_1016605B0, (void (*)(uint64_t))&type metadata accessor for CryptoError);
        swift_allocError();
        uint64_t v22 = v21;
        uint64_t v23 = *(void *)(v20 - 8);
        if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v23 + 48))(v13, 1, v20) == 1)
        {
          (*(void (**)(uint64_t, void, uint64_t))(v23 + 104))(v22, enum case for CryptoError.unspecifiedError(_:), v20);
          sub_100A99278(v13);
        }
        else
        {
          (*(void (**)(uint64_t, uint64_t, uint64_t))(v23 + 32))(v22, v13, v20);
        }
        swift_willThrow();
      }
      return sub_10001CFB8(v28, v29);
    case 3uLL:
      memset(v27, 0, 14);
      sub_1000361E0(a1, a2);
      sub_100A94FD0((uint64_t)v27, a3, a4, a1, a2, &v28, &v26);
      if (v5) {
        goto LABEL_11;
      }
      sub_10001CFB8(a3, a4);
      sub_10001CFB8(a1, a2);
LABEL_15:
      LODWORD(a5) = v26;
      if (v26) {
        goto LABEL_16;
      }
      return v28;
    default:
      v27[0] = a3;
      LOWORD(v27[1]) = a4;
      BYTE2(v27[1]) = BYTE2(a4);
      BYTE3(v27[1]) = BYTE3(a4);
      BYTE4(v27[1]) = BYTE4(a4);
      BYTE5(v27[1]) = BYTE5(a4);
      sub_1000361E0(a1, a2);
      sub_100A94FD0((uint64_t)v27, a3, a4, a1, a2, &v28, &v26);
      sub_10001CFB8(a3, a4);
      sub_10001CFB8(a1, a2);
      if (!v5) {
        goto LABEL_15;
      }
      return sub_10001CFB8(v28, v29);
  }
}

uint64_t sub_100A94760(uint64_t a1, unint64_t a2)
{
  uint64_t v3 = sub_100A948F8(a1, a2);
  if (v2)
  {
    static os_log_type_t.error.getter();
    if (qword_101636F48 != -1) {
      swift_once();
    }
    uint64_t v10 = qword_10170E9E0;
    sub_10000588C((uint64_t *)&unk_10163AD00);
    uint64_t v4 = swift_allocObject();
    *(_OWORD *)(v4 + 16) = xmmword_101342130;
    swift_errorRetain();
    sub_10000588C(&qword_101638D40);
    uint64_t v5 = String.init<A>(describing:)();
    uint64_t v7 = v6;
    *(void *)(v4 + 56) = &type metadata for String;
    *(void *)(v4 + 64) = sub_10000B4CC();
    *(void *)(v4 + 32) = v5;
    *(void *)(v4 + 40) = v7;
    os_log(_:dso:log:_:_:)();
    swift_bridgeObjectRelease();
    sub_100130148();
    swift_allocError();
    *uint64_t v8 = 0;
    swift_willThrow();
    swift_errorRelease();
  }
  else
  {
    uint64_t v10 = sub_100A90C58(v3, 0);
    CCECCryptorRelease();
  }
  return v10;
}

uint64_t sub_100A948F8(uint64_t a1, unint64_t a2)
{
  uint64_t v4 = sub_10000588C(&qword_10163F758);
  __chkstk_darwin(v4 - 8);
  uint64_t v6 = (char *)v22 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v23 = 0;
  switch(a2 >> 62)
  {
    case 1uLL:
      if ((int)a1 > a1 >> 32)
      {
        __break(1u);
        goto LABEL_28;
      }
      sub_1000361E0(a1, a2);
      if (__DataStorage._bytes.getter())
      {
        uint64_t v7 = __DataStorage._offset.getter();
        v22[1] = (int)a1 - v7;
        if (__OFSUB__((int)a1, v7)) {
          goto LABEL_29;
        }
        __DataStorage._length.getter();
        if (__OFSUB__(HIDWORD(a1), a1)) {
          goto LABEL_30;
        }
        int v8 = CCECCryptorImportKey();
        sub_10001CFB8(a1, a2);
        if (v8) {
          goto LABEL_18;
        }
        goto LABEL_13;
      }
      __DataStorage._length.getter();
      uint64_t v20 = type metadata accessor for CryptoError();
      sub_100A992D8((unint64_t *)&qword_1016605B0, (void (*)(uint64_t))&type metadata accessor for CryptoError);
      swift_allocError();
      (*(void (**)(uint64_t, void, uint64_t))(*(void *)(v20 - 8) + 104))(v21, enum case for CryptoError.memoryFailure(_:), v20);
      swift_willThrow();
      return sub_10001CFB8(a1, a2);
    case 2uLL:
      uint64_t v9 = *(void *)(a1 + 16);
      swift_retain();
      swift_retain();
      if (!__DataStorage._bytes.getter())
      {
        __DataStorage._length.getter();
        uint64_t v18 = type metadata accessor for CryptoError();
        sub_100A992D8((unint64_t *)&qword_1016605B0, (void (*)(uint64_t))&type metadata accessor for CryptoError);
        swift_allocError();
        (*(void (**)(uint64_t, void, uint64_t))(*(void *)(v18 - 8) + 104))(v19, enum case for CryptoError.memoryFailure(_:), v18);
        swift_willThrow();
        swift_release();
        return swift_release();
      }
      if (__OFSUB__(v9, __DataStorage._offset.getter()))
      {
LABEL_28:
        __break(1u);
LABEL_29:
        __break(1u);
LABEL_30:
        __break(1u);
        goto LABEL_31;
      }
      __DataStorage._length.getter();
      if (__OFSUB__(*(void *)(a1 + 24), *(void *)(a1 + 16)))
      {
LABEL_31:
        __break(1u);
        goto LABEL_32;
      }
      int v8 = CCECCryptorImportKey();
      swift_release();
      swift_release();
      if (v8) {
        goto LABEL_18;
      }
LABEL_13:
      uint64_t result = v23;
      if (!v23)
      {
        static os_log_type_t.error.getter();
        if (qword_101636F48 != -1) {
LABEL_32:
        }
          swift_once();
        os_log(_:dso:log:_:_:)();
        uint64_t v11 = type metadata accessor for CryptoError();
        sub_100A992D8((unint64_t *)&qword_1016605B0, (void (*)(uint64_t))&type metadata accessor for CryptoError);
        swift_allocError();
        (*(void (**)(uint64_t, void, uint64_t))(*(void *)(v11 - 8) + 104))(v12, enum case for CryptoError.unspecifiedError(_:), v11);
        return swift_willThrow();
      }
      return result;
    case 3uLL:
      memset(&v22[2], 0, 14);
      goto LABEL_17;
    default:
      v22[2] = a1;
      LOWORD(v22[3]) = a2;
      BYTE2(v22[3]) = BYTE2(a2);
      BYTE3(v22[3]) = BYTE3(a2);
      BYTE4(v22[3]) = BYTE4(a2);
      BYTE5(v22[3]) = BYTE5(a2);
LABEL_17:
      int v8 = CCECCryptorImportKey();
      if (!v8) {
        goto LABEL_13;
      }
LABEL_18:
      static os_log_type_t.error.getter();
      if (qword_101636F48 != -1) {
        swift_once();
      }
      sub_10000588C((uint64_t *)&unk_10163AD00);
      uint64_t v13 = swift_allocObject();
      *(_OWORD *)(v13 + 16) = xmmword_101342130;
      *(void *)(v13 + 56) = &type metadata for Int32;
      *(void *)(v13 + 64) = &protocol witness table for Int32;
      *(_DWORD *)(v13 + 32) = v8;
      os_log(_:dso:log:_:_:)();
      swift_bridgeObjectRelease();
      CryptoError.init(rawValue:)();
      uint64_t v14 = type metadata accessor for CryptoError();
      sub_100A992D8((unint64_t *)&qword_1016605B0, (void (*)(uint64_t))&type metadata accessor for CryptoError);
      swift_allocError();
      uint64_t v16 = v15;
      uint64_t v17 = *(void *)(v14 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v17 + 48))(v6, 1, v14) == 1)
      {
        (*(void (**)(uint64_t, void, uint64_t))(v17 + 104))(v16, enum case for CryptoError.unspecifiedError(_:), v14);
        sub_100A99278((uint64_t)v6);
      }
      else
      {
        (*(void (**)(uint64_t, char *, uint64_t))(v17 + 32))(v16, v6, v14);
      }
      return swift_willThrow();
  }
}

uint64_t sub_100A94FD0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X2>, unint64_t a3@<X3>, uint64_t a4@<X4>, unint64_t a5@<X5>, uint64_t *a6@<X6>, int *a7@<X8>)
{
  if (a1)
  {
    uint64_t v18 = 0;
    switch(a3 >> 62)
    {
      case 1uLL:
        if (!__OFSUB__(HIDWORD(a2), a2)) {
          goto LABEL_7;
        }
        __break(1u);
LABEL_22:
        __break(1u);
LABEL_23:
        __break(1u);
        return result;
      case 2uLL:
        if (!__OFSUB__(*(void *)(a2 + 24), *(void *)(a2 + 16))) {
          goto LABEL_7;
        }
        goto LABEL_22;
      default:
LABEL_7:
        uint64_t result = CCKDFParametersCreateAnsiX963();
        if (!result)
        {
          switch(a5 >> 62)
          {
            case 1uLL:
              if ((int)a4 > a4 >> 32) {
                goto LABEL_23;
              }
              sub_1000361E0(a4, a5);
              uint64_t result = sub_100A96E34((int)a4, a5 & 0x3FFFFFFFFFFFFFFFLL, a6, (uint64_t)&v18, a4, a5);
              if (!v7) {
                *a7 = result;
              }
              return result;
            case 2uLL:
              uint64_t v16 = *(void *)(a4 + 16);
              sub_1000361E0(a4, a5);
              swift_retain();
              swift_retain();
              int v15 = sub_100A96E34(v16, a5 & 0x3FFFFFFFFFFFFFFFLL, a6, (uint64_t)&v18, a4, a5);
              swift_release();
              uint64_t result = swift_release();
              if (!v7) {
                goto LABEL_9;
              }
              return result;
            case 3uLL:
              memset(v17, 0, 14);
              goto LABEL_19;
            default:
              v17[0] = a4;
              LOWORD(v17[1]) = a5;
              BYTE2(v17[1]) = BYTE2(a5);
              BYTE3(v17[1]) = BYTE3(a5);
              BYTE4(v17[1]) = BYTE4(a5);
              BYTE5(v17[1]) = BYTE5(a5);
LABEL_19:
              int v15 = sub_100A969B4(a6, (uint64_t)&v18, (uint64_t)v17, a4, a5);
              uint64_t result = sub_10001CFB8(a4, a5);
              if (!v7) {
                goto LABEL_9;
              }
              return result;
          }
        }
        int v15 = -4300;
LABEL_9:
        *a7 = v15;
        break;
    }
  }
  else
  {
    uint64_t v12 = type metadata accessor for CryptoError();
    sub_100A992D8((unint64_t *)&qword_1016605B0, (void (*)(uint64_t))&type metadata accessor for CryptoError);
    swift_allocError();
    (*(void (**)(uint64_t, void, uint64_t))(*(void *)(v12 - 8) + 104))(v13, enum case for CryptoError.memoryFailure(_:), v12);
    return swift_willThrow();
  }
  return result;
}

char *sub_100A95320(uint64_t a1, int a2, uint64_t a3, unint64_t a4)
{
  uint64_t v9 = sub_10000588C(&qword_10163F758);
  __chkstk_darwin(v9 - 8);
  uint64_t v11 = (char *)v27 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v31 = 0;
  long long v30 = xmmword_101348180;
  Data.append(_:)();
  unint64_t v12 = *((void *)&v30 + 1);
  uint64_t v13 = v30;
  switch(*((void *)&v30 + 1) >> 62)
  {
    case 1:
      int v28 = a2;
      v27[1] = a1;
      void v27[2] = v4;
      uint64_t v14 = *((void *)&v30 + 1) & 0x3FFFFFFFFFFFFFFFLL;
      uint64_t v15 = (uint64_t)v30 >> 32;
      if (swift_isUniquelyReferenced_nonNull_native()) {
        goto LABEL_32;
      }
      v27[0] = v15 - (int)v13;
      if (v15 < (int)v13)
      {
        __break(1u);
      }
      else if (!__DataStorage._bytes.getter() || !__OFSUB__((int)v13, __DataStorage._offset.getter()))
      {
        type metadata accessor for __DataStorage();
        swift_allocObject();
        uint64_t v24 = __DataStorage.init(bytes:length:copy:deallocator:offset:)();
        swift_release();
        uint64_t v14 = v24;
LABEL_32:
        if (v15 >= (int)v13)
        {
          if (__DataStorage._bytes.getter())
          {
            if (!__OFSUB__((int)v13, __DataStorage._offset.getter()))
            {
              __DataStorage._length.getter();
              switch(a4 >> 62)
              {
                case 1uLL:
                  if (!__OFSUB__(HIDWORD(a3), a3)) {
                    goto LABEL_39;
                  }
                  goto LABEL_58;
                case 2uLL:
                  if (!__OFSUB__(*(void *)(a3 + 24), *(void *)(a3 + 16))) {
                    goto LABEL_39;
                  }
                  goto LABEL_59;
                default:
LABEL_39:
                  int v18 = CCECCryptorTwinDiversifyKey();
                  unint64_t v12 = v14 | 0x4000000000000000;
                  *((void *)&v30 + 1) = v14 | 0x4000000000000000;
                  if (!v18) {
                    goto LABEL_40;
                  }
                  goto LABEL_26;
              }
            }
            goto LABEL_48;
          }
LABEL_61:
          __break(1u);
          JUMPOUT(0x100A95ACCLL);
        }
LABEL_47:
        __break(1u);
LABEL_48:
        __break(1u);
        goto LABEL_49;
      }
      __break(1u);
LABEL_52:
      __break(1u);
LABEL_53:
      __break(1u);
LABEL_54:
      __break(1u);
LABEL_55:
      __break(1u);
LABEL_56:
      __break(1u);
LABEL_57:
      __break(1u);
LABEL_58:
      __break(1u);
LABEL_59:
      __break(1u);
      return result;
    case 2:
      int v28 = a2;
      *(void *)&long long v29 = v30;
      *((void *)&v29 + 1) = *((void *)&v30 + 1) & 0x3FFFFFFFFFFFFFFFLL;
      Data.LargeSlice.ensureUniqueReference()();
      uint64_t v16 = *((void *)&v29 + 1);
      uint64_t v13 = v29;
      uint64_t v17 = *(void *)(v29 + 16);
      if (!__DataStorage._bytes.getter())
      {
        __break(1u);
        goto LABEL_61;
      }
      if (__OFSUB__(v17, __DataStorage._offset.getter()))
      {
        __break(1u);
        goto LABEL_47;
      }
      __DataStorage._length.getter();
      switch(a4 >> 62)
      {
        case 1uLL:
          if (!__OFSUB__(HIDWORD(a3), a3)) {
            goto LABEL_24;
          }
          goto LABEL_56;
        case 2uLL:
          if (!__OFSUB__(*(void *)(a3 + 24), *(void *)(a3 + 16))) {
            goto LABEL_24;
          }
          goto LABEL_57;
        default:
LABEL_24:
          int v18 = CCECCryptorTwinDiversifyKey();
          unint64_t v12 = v16 | 0x8000000000000000;
          break;
      }
LABEL_25:
      *(void *)&long long v30 = v13;
      *((void *)&v30 + 1) = v12;
      if (v18)
      {
LABEL_26:
        static os_log_type_t.error.getter();
        if (qword_101636F48 != -1) {
          swift_once();
        }
        sub_10000588C((uint64_t *)&unk_10163AD00);
        uint64_t v19 = swift_allocObject();
        *(_OWORD *)(v19 + 16) = xmmword_101342130;
        *(void *)(v19 + 56) = &type metadata for Int32;
        *(void *)(v19 + 64) = &protocol witness table for Int32;
        *(_DWORD *)(v19 + 32) = v18;
        os_log(_:dso:log:_:_:)();
        swift_bridgeObjectRelease();
        CryptoError.init(rawValue:)();
        uint64_t v20 = type metadata accessor for CryptoError();
        sub_100A992D8((unint64_t *)&qword_1016605B0, (void (*)(uint64_t))&type metadata accessor for CryptoError);
        swift_allocError();
        uint64_t v22 = v21;
        uint64_t v23 = *(void *)(v20 - 8);
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v23 + 48))(v11, 1, v20) == 1)
        {
          (*(void (**)(uint64_t, void, uint64_t))(v23 + 104))(v22, enum case for CryptoError.unspecifiedError(_:), v20);
          sub_100A99278((uint64_t)v11);
        }
        else
        {
          (*(void (**)(uint64_t, char *, uint64_t))(v23 + 32))(v22, v11, v20);
        }
        goto LABEL_44;
      }
LABEL_40:
      uint64_t v11 = v31;
      if (!v31)
      {
        static os_log_type_t.error.getter();
        if (qword_101636F48 == -1)
        {
LABEL_43:
          os_log(_:dso:log:_:_:)();
          uint64_t v11 = (char *)type metadata accessor for CryptoError();
          sub_100A992D8((unint64_t *)&qword_1016605B0, (void (*)(uint64_t))&type metadata accessor for CryptoError);
          swift_allocError();
          (*(void (**)(uint64_t, void, char *))(*((void *)v11 - 1) + 104))(v25, enum case for CryptoError.unspecifiedError(_:), v11);
LABEL_44:
          swift_willThrow();
          sub_10001CFB8(v30, *((unint64_t *)&v30 + 1));
          return v11;
        }
LABEL_49:
        swift_once();
        goto LABEL_43;
      }
      sub_10001CFB8(v13, v12);
      return v11;
    case 3:
      *(void *)((char *)&v29 + 7) = 0;
      *(void *)&long long v29 = 0;
      switch(a4 >> 62)
      {
        case 1uLL:
          if (!__OFSUB__(HIDWORD(a3), a3)) {
            goto LABEL_19;
          }
          goto LABEL_54;
        case 2uLL:
          if (!__OFSUB__(*(void *)(a3 + 24), *(void *)(a3 + 16))) {
            goto LABEL_19;
          }
          goto LABEL_55;
        default:
LABEL_19:
          int v18 = CCECCryptorTwinDiversifyKey();
          if (!v18) {
            goto LABEL_40;
          }
          goto LABEL_26;
      }
    default:
      LODWORD(v29) = v30;
      WORD2(v29) = WORD2(v30);
      *(void *)((char *)&v29 + 6) = *(void *)((char *)&v30 + 6);
      BYTE14(v29) = BYTE14(v30);
      switch(a4 >> 62)
      {
        case 1uLL:
          if (!__OFSUB__(HIDWORD(a3), a3)) {
            goto LABEL_15;
          }
          goto LABEL_52;
        case 2uLL:
          if (!__OFSUB__(*(void *)(a3 + 24), *(void *)(a3 + 16))) {
            goto LABEL_15;
          }
          goto LABEL_53;
        default:
LABEL_15:
          int v18 = CCECCryptorTwinDiversifyKey();
          uint64_t v13 = v29;
          unint64_t v12 = DWORD2(v29) | ((unint64_t)BYTE12(v29) << 32) | ((unint64_t)BYTE13(v29) << 40) | ((unint64_t)BYTE14(v29) << 48);
          break;
      }
      goto LABEL_25;
  }
}

void sub_100A95B1C(void *a1, int *a2)
{
  unint64_t v2 = a1[1];
  switch(v2 >> 62)
  {
    case 1uLL:
      *(void *)&long long v18 = *a1;
      *((void *)&v18 + 1) = v2 & 0x3FFFFFFFFFFFFFFFLL;
      sub_100A9627C((int *)&v18, a2);
      uint64_t v5 = v18;
      unint64_t v6 = *((void *)&v18 + 1) | 0x4000000000000000;
      goto LABEL_4;
    case 2uLL:
      *(void *)&long long v18 = *a1;
      *((void *)&v18 + 1) = v2 & 0x3FFFFFFFFFFFFFFFLL;
      Data.LargeSlice.ensureUniqueReference()();
      uint64_t v7 = *((void *)&v18 + 1);
      uint64_t v8 = *(void *)(v18 + 16);
      uint64_t v17 = *(void *)(v18 + 24);
      uint64_t v9 = __DataStorage._bytes.getter();
      if (!v9)
      {
        __break(1u);
        JUMPOUT(0x100A95D74);
      }
      uint64_t v10 = v9;
      uint64_t v11 = __DataStorage._offset.getter();
      uint64_t v12 = v8 - v11;
      if (__OFSUB__(v8, v11))
      {
        __break(1u);
LABEL_15:
        __break(1u);
      }
      BOOL v13 = __OFSUB__(v17, v8);
      uint64_t v14 = v17 - v8;
      if (v13) {
        goto LABEL_15;
      }
      uint64_t v15 = __DataStorage._length.getter();
      if (v15 >= v14) {
        uint64_t v16 = v14;
      }
      else {
        uint64_t v16 = v15;
      }
      sub_100A9264C(v10 + v12, v10 + v12 + v16, a2);
      *a1 = v18;
      a1[1] = v7 | 0x8000000000000000;
      return;
    case 3uLL:
      *(void *)((char *)&v18 + 7) = 0;
      *(void *)&long long v18 = 0;
      sub_100A9264C((uint64_t)&v18, (uint64_t)&v18, a2);
      return;
    default:
      *(void *)&long long v18 = *a1;
      WORD4(v18) = v2;
      BYTE10(v18) = BYTE2(v2);
      BYTE11(v18) = BYTE3(v2);
      BYTE12(v18) = BYTE4(v2);
      BYTE13(v18) = BYTE5(v2);
      BYTE14(v18) = BYTE6(v2);
      sub_100A9264C((uint64_t)&v18, (uint64_t)&v18 + BYTE6(v2), a2);
      uint64_t v5 = v18;
      unint64_t v6 = DWORD2(v18) | ((unint64_t)BYTE12(v18) << 32) | ((unint64_t)BYTE13(v18) << 40) | ((unint64_t)BYTE14(v18) << 48);
LABEL_4:
      *a1 = v5;
      a1[1] = v6;
      return;
  }
}

void sub_100A95D84(void *a1, int *a2)
{
  unint64_t v2 = a1[1];
  switch(v2 >> 62)
  {
    case 1uLL:
      *(void *)&long long v18 = *a1;
      *((void *)&v18 + 1) = v2 & 0x3FFFFFFFFFFFFFFFLL;
      sub_100A9634C((int *)&v18, a2);
      uint64_t v5 = v18;
      unint64_t v6 = *((void *)&v18 + 1) | 0x4000000000000000;
      goto LABEL_4;
    case 2uLL:
      *(void *)&long long v18 = *a1;
      *((void *)&v18 + 1) = v2 & 0x3FFFFFFFFFFFFFFFLL;
      Data.LargeSlice.ensureUniqueReference()();
      uint64_t v7 = *((void *)&v18 + 1);
      uint64_t v8 = *(void *)(v18 + 16);
      uint64_t v17 = *(void *)(v18 + 24);
      uint64_t v9 = __DataStorage._bytes.getter();
      if (!v9)
      {
        __break(1u);
        JUMPOUT(0x100A95FD4);
      }
      uint64_t v10 = v9;
      uint64_t v11 = __DataStorage._offset.getter();
      uint64_t v12 = v8 - v11;
      if (__OFSUB__(v8, v11))
      {
        __break(1u);
LABEL_15:
        __break(1u);
      }
      BOOL v13 = __OFSUB__(v17, v8);
      uint64_t v14 = v17 - v8;
      if (v13) {
        goto LABEL_15;
      }
      uint64_t v15 = __DataStorage._length.getter();
      if (v15 >= v14) {
        uint64_t v16 = v14;
      }
      else {
        uint64_t v16 = v15;
      }
      sub_100A912CC(v10 + v12, v10 + v12 + v16, a2);
      *a1 = v18;
      a1[1] = v7 | 0x8000000000000000;
      return;
    case 3uLL:
      *(void *)((char *)&v18 + 7) = 0;
      *(void *)&long long v18 = 0;
      sub_100A912CC((uint64_t)&v18, (uint64_t)&v18, a2);
      return;
    default:
      *(void *)&long long v18 = *a1;
      WORD4(v18) = v2;
      BYTE10(v18) = BYTE2(v2);
      BYTE11(v18) = BYTE3(v2);
      BYTE12(v18) = BYTE4(v2);
      BYTE13(v18) = BYTE5(v2);
      BYTE14(v18) = BYTE6(v2);
      sub_100A912CC((uint64_t)&v18, (uint64_t)&v18 + BYTE6(v2), a2);
      uint64_t v5 = v18;
      unint64_t v6 = DWORD2(v18) | ((unint64_t)BYTE12(v18) << 32) | ((unint64_t)BYTE13(v18) << 40) | ((unint64_t)BYTE14(v18) << 48);
LABEL_4:
      *a1 = v5;
      a1[1] = v6;
      return;
  }
}

uint64_t sub_100A95FE4(void *a1, int *a2)
{
  unint64_t v2 = a1[1];
  switch(v2 >> 62)
  {
    case 1uLL:
      *(void *)&long long v23 = *a1;
      *((void *)&v23 + 1) = v2 & 0x3FFFFFFFFFFFFFFFLL;
      swift_retain();
      sub_100A96420((int *)&v23, a2);
      uint64_t result = swift_release();
      uint64_t v11 = *((void *)&v23 + 1) | 0x4000000000000000;
      *a1 = v23;
      a1[1] = v11;
      return result;
    case 2uLL:
      *(void *)&long long v23 = *a1;
      *((void *)&v23 + 1) = v2 & 0x3FFFFFFFFFFFFFFFLL;
      Data.LargeSlice.ensureUniqueReference()();
      uint64_t v12 = *((void *)&v23 + 1);
      uint64_t v13 = *(void *)(v23 + 16);
      uint64_t v22 = *(void *)(v23 + 24);
      uint64_t v14 = __DataStorage._bytes.getter();
      if (!v14)
      {
        __break(1u);
        JUMPOUT(0x100A9626CLL);
      }
      uint64_t v15 = v14;
      uint64_t v16 = __DataStorage._offset.getter();
      uint64_t v17 = v13 - v16;
      if (__OFSUB__(v13, v16))
      {
        __break(1u);
LABEL_14:
        __break(1u);
      }
      BOOL v18 = __OFSUB__(v22, v13);
      uint64_t v19 = v22 - v13;
      if (v18) {
        goto LABEL_14;
      }
      uint64_t v20 = __DataStorage._length.getter();
      if (v20 >= v19) {
        uint64_t v21 = v19;
      }
      else {
        uint64_t v21 = v20;
      }
      sub_100A91E94(v15 + v17, v15 + v17 + v21, a2);
      uint64_t result = swift_release();
      *a1 = v23;
      a1[1] = v12 | 0x8000000000000000;
      return result;
    case 3uLL:
      *(void *)((char *)&v23 + 7) = 0;
      *(void *)&long long v23 = 0;
      sub_100A91E94((uint64_t)&v23, (uint64_t)&v23, a2);
      return swift_release();
    default:
      *(void *)&long long v23 = *a1;
      WORD4(v23) = v2;
      BYTE10(v23) = BYTE2(v2);
      BYTE11(v23) = BYTE3(v2);
      BYTE12(v23) = BYTE4(v2);
      BYTE13(v23) = BYTE5(v2);
      BYTE14(v23) = BYTE6(v2);
      sub_100A91E94((uint64_t)&v23, (uint64_t)&v23 + BYTE6(v2), a2);
      uint64_t v5 = v23;
      uint64_t v6 = DWORD2(v23);
      uint64_t v7 = BYTE12(v23);
      uint64_t v8 = BYTE13(v23);
      uint64_t v9 = BYTE14(v23);
      uint64_t result = swift_release();
      *a1 = v5;
      a1[1] = v6 | (v7 << 32) | (v8 << 40) | (v9 << 48);
      return result;
  }
}

void sub_100A9627C(int *a1, int *a2)
{
  Data.InlineSlice.ensureUniqueReference()();
  uint64_t v4 = *a1;
  uint64_t v5 = a1[1];
  if ((int)v5 < (int)v4)
  {
    __break(1u);
    goto LABEL_9;
  }
  uint64_t v13 = a2;
  uint64_t v6 = __DataStorage._bytes.getter();
  if (!v6)
  {
LABEL_10:
    __break(1u);
    return;
  }
  uint64_t v7 = v6;
  uint64_t v8 = __DataStorage._offset.getter();
  uint64_t v9 = v4 - v8;
  if (__OFSUB__(v4, v8))
  {
LABEL_9:
    __break(1u);
    goto LABEL_10;
  }
  uint64_t v10 = v5 - v4;
  uint64_t v11 = __DataStorage._length.getter();
  if (v11 >= v10) {
    uint64_t v12 = v10;
  }
  else {
    uint64_t v12 = v11;
  }
  sub_100A9264C(v7 + v9, v7 + v9 + v12, v13);
}

void sub_100A9634C(int *a1, int *a2)
{
  Data.InlineSlice.ensureUniqueReference()();
  uint64_t v5 = *a1;
  uint64_t v4 = a1[1];
  if ((int)v4 < (int)v5)
  {
    __break(1u);
    goto LABEL_9;
  }
  uint64_t v13 = a2;
  uint64_t v6 = __DataStorage._bytes.getter();
  if (!v6)
  {
LABEL_10:
    __break(1u);
    return;
  }
  uint64_t v7 = v6;
  uint64_t v8 = __DataStorage._offset.getter();
  uint64_t v9 = v5 - v8;
  if (__OFSUB__(v5, v8))
  {
LABEL_9:
    __break(1u);
    goto LABEL_10;
  }
  uint64_t v10 = v4 - v5;
  uint64_t v11 = __DataStorage._length.getter();
  if (v11 >= v10) {
    uint64_t v12 = v10;
  }
  else {
    uint64_t v12 = v11;
  }
  sub_100A912CC(v7 + v9, v7 + v9 + v12, v13);
}

void sub_100A96420(int *a1, int *a2)
{
  Data.InlineSlice.ensureUniqueReference()();
  uint64_t v4 = *a1;
  uint64_t v5 = a1[1];
  if ((int)v5 < (int)v4)
  {
    __break(1u);
    goto LABEL_9;
  }
  uint64_t v6 = __DataStorage._bytes.getter();
  if (!v6)
  {
LABEL_10:
    __break(1u);
    return;
  }
  uint64_t v7 = v6;
  uint64_t v8 = __DataStorage._offset.getter();
  uint64_t v9 = v4 - v8;
  if (__OFSUB__(v4, v8))
  {
LABEL_9:
    __break(1u);
    goto LABEL_10;
  }
  uint64_t v10 = v5 - v4;
  uint64_t v11 = __DataStorage._length.getter();
  if (v11 >= v10) {
    uint64_t v12 = v10;
  }
  else {
    uint64_t v12 = v11;
  }
  sub_100A91E94(v7 + v9, v7 + v9 + v12, a2);
  swift_release();
}

void sub_100A964F0(int *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, void (*a6)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))
{
  Data.InlineSlice.ensureUniqueReference()();
  uint64_t v12 = *a1;
  uint64_t v13 = a1[1];
  if ((int)v13 < (int)v12)
  {
    __break(1u);
    goto LABEL_9;
  }
  uint64_t v21 = a3;
  uint64_t v22 = a6;
  uint64_t v14 = __DataStorage._bytes.getter();
  if (!v14)
  {
LABEL_10:
    __break(1u);
    return;
  }
  uint64_t v15 = v14;
  uint64_t v16 = __DataStorage._offset.getter();
  uint64_t v17 = v12 - v16;
  if (__OFSUB__(v12, v16))
  {
LABEL_9:
    __break(1u);
    goto LABEL_10;
  }
  uint64_t v18 = v13 - v12;
  uint64_t v19 = __DataStorage._length.getter();
  if (v19 >= v18) {
    uint64_t v20 = v18;
  }
  else {
    uint64_t v20 = v19;
  }
  v22(v15 + v17, v15 + v17 + v20, a2, v21, a4, a5);
  swift_release();
}

uint64_t sub_100A965D4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X3>, uint64_t a4@<X4>, uint64_t a5@<X8>)
{
  uint64_t result = __DataStorage._bytes.getter();
  uint64_t v11 = result;
  if (result)
  {
    uint64_t result = __DataStorage._offset.getter();
    if (__OFSUB__(a1, result)) {
      goto LABEL_7;
    }
    v11 += a1 - result;
  }
  if (!__OFSUB__(a2, a1))
  {
    __DataStorage._length.getter();
    sub_100A92998(v11, a3, a4, (void (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))sub_100A92C10, a5);
    return swift_release();
  }
  __break(1u);
LABEL_7:
  __break(1u);
  return result;
}

BOOL sub_100A966A4(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)a1;
  unint64_t v5 = *(void *)(a1 + 8);
  uint64_t v6 = *(void *)a2;
  unint64_t v7 = *(void *)(a2 + 8);
  if (v5 >> 60 == 15)
  {
    if (v7 >> 60 == 15) {
      goto LABEL_8;
    }
LABEL_5:
    sub_100037A38(*(void *)a1, v5);
    sub_100037A38(v6, v7);
    sub_100037A24(v4, v5);
    uint64_t v8 = v6;
    unint64_t v9 = v7;
LABEL_6:
    sub_100037A24(v8, v9);
    return 0;
  }
  if (v7 >> 60 == 15) {
    goto LABEL_5;
  }
  sub_100037A38(*(void *)a1, v5);
  sub_100037A38(v6, v7);
  char v10 = _s12searchpartyd24KeyRepresentableInternalV23__derived_struct_equalsySbAC_ACtFZ_0(v4, v5, v6, v7);
  sub_100037A24(v6, v7);
  sub_100037A24(v4, v5);
  if ((v10 & 1) == 0) {
    return 0;
  }
LABEL_8:
  long long v11 = *(_OWORD *)(a1 + 16);
  long long v21 = *(_OWORD *)(a2 + 16);
  long long v22 = v11;
  unint64_t v13 = *((void *)&v11 + 1);
  uint64_t v12 = v11;
  long long v14 = v21;
  sub_100061E54((uint64_t)&v22);
  sub_100061E54((uint64_t)&v21);
  LOBYTE(v12) = _s12searchpartyd24KeyRepresentableInternalV23__derived_struct_equalsySbAC_ACtFZ_0(v12, v13, v14, *((unint64_t *)&v14 + 1));
  sub_1000CE9DC((uint64_t)&v21);
  sub_1000CE9DC((uint64_t)&v22);
  if ((v12 & 1) == 0) {
    return 0;
  }
  uint64_t v16 = *(void *)(a1 + 32);
  unint64_t v15 = *(void *)(a1 + 40);
  uint64_t v18 = *(void *)(a2 + 32);
  unint64_t v17 = *(void *)(a2 + 40);
  if (v15 >> 60 == 15)
  {
    if (v17 >> 60 == 15) {
      return 1;
    }
    goto LABEL_13;
  }
  if (v17 >> 60 == 15)
  {
LABEL_13:
    sub_100037A38(v16, v15);
    sub_100037A38(v18, v17);
    sub_100037A24(v16, v15);
    uint64_t v8 = v18;
    unint64_t v9 = v17;
    goto LABEL_6;
  }
  sub_100037A38(v16, v15);
  sub_100037A38(v18, v17);
  char v19 = _s12searchpartyd24KeyRepresentableInternalV23__derived_struct_equalsySbAC_ACtFZ_0(v16, v15, v18, v17);
  sub_100037A24(v18, v17);
  sub_100037A24(v16, v15);
  return (v19 & 1) != 0;
}

uint64_t sub_100A968A0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, unint64_t a6)
{
  if (!__DataStorage._bytes.getter()) {
    goto LABEL_11;
  }
  if (__OFSUB__(a1, __DataStorage._offset.getter()))
  {
    __break(1u);
LABEL_9:
    __break(1u);
LABEL_10:
    __break(1u);
LABEL_11:
    __break(1u);
    JUMPOUT(0x100A969A4);
  }
  __DataStorage._length.getter();
  switch(a6 >> 62)
  {
    case 1uLL:
      if (!__OFSUB__(HIDWORD(a5), a5)) {
        goto LABEL_7;
      }
      goto LABEL_9;
    case 2uLL:
      if (!__OFSUB__(*(void *)(a5 + 24), *(void *)(a5 + 16))) {
        goto LABEL_7;
      }
      goto LABEL_10;
    default:
LABEL_7:
      uint64_t v9 = CCDeriveKey();
      CCKDFParametersDestroy();
      return v9;
  }
}

uint64_t sub_100A969B4(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, unint64_t a5)
{
  uint64_t v6 = *a1;
  unint64_t v5 = a1[1];
  switch(v5 >> 62)
  {
    case 1uLL:
      uint64_t v12 = v5 & 0x3FFFFFFFFFFFFFFFLL;
      *(_OWORD *)a1 = xmmword_101348180;
      sub_1000361E0(a4, a5);
      sub_1000361E0(a4, a5);
      char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      uint64_t v14 = v6 >> 32;
      if (isUniquelyReferenced_nonNull_native) {
        goto LABEL_19;
      }
      if (v14 < (int)v6) {
        goto LABEL_23;
      }
      uint64_t v15 = a3;
      if (__DataStorage._bytes.getter() && __OFSUB__((int)v6, __DataStorage._offset.getter())) {
        goto LABEL_24;
      }
      type metadata accessor for __DataStorage();
      swift_allocObject();
      uint64_t v19 = __DataStorage.init(bytes:length:copy:deallocator:offset:)();
      swift_release();
      uint64_t v12 = v19;
      uint64_t v14 = v6 >> 32;
      a3 = v15;
LABEL_19:
      if (v14 < (int)v6)
      {
        __break(1u);
LABEL_23:
        __break(1u);
LABEL_24:
        __break(1u);
LABEL_25:
        __break(1u);
LABEL_26:
        __break(1u);
LABEL_27:
        __break(1u);
LABEL_28:
        __break(1u);
      }
      sub_1000361E0(a4, a5);
      uint64_t v18 = sub_100A968A0((int)v6, v12, a2, a3, a4, a5);
      sub_10001CFB8(a4, a5);
      sub_10001CFB8(a4, a5);
      sub_10001CFB8(a4, a5);
      *a1 = v6;
      a1[1] = v12 | 0x4000000000000000;
      return v18;
    case 2uLL:
      uint64_t v22 = *a1;
      uint64_t v24 = v5 & 0x3FFFFFFFFFFFFFFFLL;
      sub_1000361E0(a4, a5);
      sub_1000361E0(a4, a5);
      uint64_t v16 = a3;
      Data.LargeSlice.ensureUniqueReference()();
      uint64_t v17 = *(void *)(v22 + 16);
      sub_1000361E0(a4, a5);
      uint64_t v18 = sub_100A968A0(v17, v24, a2, v16, a4, a5);
      sub_10001CFB8(a4, a5);
      sub_10001CFB8(a4, a5);
      sub_10001CFB8(a4, a5);
      *a1 = v22;
      a1[1] = v24 | 0x8000000000000000;
      return v18;
    case 3uLL:
      switch(a5 >> 62)
      {
        case 1uLL:
          if (!__OFSUB__(HIDWORD(a4), a4)) {
            goto LABEL_17;
          }
          goto LABEL_27;
        case 2uLL:
          if (!__OFSUB__(*(void *)(a4 + 24), *(void *)(a4 + 16))) {
            goto LABEL_17;
          }
          goto LABEL_28;
        default:
LABEL_17:
          uint64_t v18 = CCDeriveKey();
          CCKDFParametersDestroy();
          break;
      }
      return v18;
    default:
      LOWORD(v23) = a1[1];
      BYTE2(v23) = BYTE2(a1[1]);
      HIBYTE(v23) = BYTE3(a1[1]);
      __int16 v25 = WORD2(a1[1]);
      unsigned __int8 v26 = BYTE6(a1[1]);
      switch(a5 >> 62)
      {
        case 1uLL:
          if (!__OFSUB__(HIDWORD(a4), a4)) {
            goto LABEL_13;
          }
          goto LABEL_25;
        case 2uLL:
          if (!__OFSUB__(*(void *)(a4 + 24), *(void *)(a4 + 16))) {
            goto LABEL_13;
          }
          goto LABEL_26;
        default:
LABEL_13:
          uint64_t v18 = CCDeriveKey();
          CCKDFParametersDestroy();
          *a1 = v6;
          a1[1] = v23 | ((unint64_t)v25 << 32) | ((unint64_t)HIBYTE(v25) << 40) | ((unint64_t)v26 << 48);
          break;
      }
      return v18;
  }
}

uint64_t sub_100A96E34(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4, uint64_t a5, unint64_t a6)
{
  uint64_t v11 = __DataStorage._bytes.getter();
  if (!v11)
  {
    __DataStorage._length.getter();
    uint64_t v16 = type metadata accessor for CryptoError();
    sub_100A992D8((unint64_t *)&qword_1016605B0, (void (*)(uint64_t))&type metadata accessor for CryptoError);
    swift_allocError();
    (*(void (**)(uint64_t, void, uint64_t))(*(void *)(v16 - 8) + 104))(v17, enum case for CryptoError.memoryFailure(_:), v16);
    swift_willThrow();
    sub_10001CFB8(a5, a6);
    return v16;
  }
  uint64_t v12 = v11;
  uint64_t result = __DataStorage._offset.getter();
  BOOL v14 = __OFSUB__(a1, result);
  uint64_t v15 = a1 - result;
  if (!v14)
  {
    __DataStorage._length.getter();
    sub_1000361E0(a5, a6);
    uint64_t v16 = sub_100A969B4(a3, a4, v12 + v15, a5, a6);
    sub_10001CFB8(a5, a6);
    sub_10001CFB8(a5, a6);
    return v16;
  }
  __break(1u);
  return result;
}

uint64_t sub_100A96FBC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unint64_t a5, uint64_t a6, unint64_t a7, uint64_t *a8)
{
  uint64_t result = __DataStorage._bytes.getter();
  uint64_t v16 = result;
  if (result)
  {
    uint64_t result = __DataStorage._offset.getter();
    if (__OFSUB__(a1, result))
    {
LABEL_9:
      __break(1u);
      return result;
    }
    v16 += a1 - result;
  }
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
    goto LABEL_9;
  }
  __DataStorage._length.getter();
  uint64_t result = sub_100A94FD0(v16, a4, a5, a6, a7, a8, (int *)&v18);
  if (!v17) {
    return v18;
  }
  return result;
}

uint64_t sub_100A9709C@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v3 = sub_10000588C(&qword_10163F758);
  __chkstk_darwin(v3 - 8);
  unint64_t v5 = (char *)&v36 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v44 = 0;
  uint64_t v45 = 0;
  int Pair = CCECCryptorGeneratePair();
  if (Pair)
  {
    int v7 = Pair;
    static os_log_type_t.error.getter();
    if (qword_101636F48 != -1) {
      swift_once();
    }
    sub_10000588C((uint64_t *)&unk_10163AD00);
    uint64_t v8 = swift_allocObject();
    *(_OWORD *)(v8 + 16) = xmmword_101342130;
    *(void *)(v8 + 56) = &type metadata for Int32;
    *(void *)(v8 + 64) = &protocol witness table for Int32;
    *(_DWORD *)(v8 + 32) = v7;
    os_log(_:dso:log:_:_:)();
    swift_bridgeObjectRelease();
    CryptoError.init(rawValue:)();
    uint64_t v9 = type metadata accessor for CryptoError();
    sub_100A992D8((unint64_t *)&qword_1016605B0, (void (*)(uint64_t))&type metadata accessor for CryptoError);
    swift_allocError();
    uint64_t v11 = v10;
    uint64_t v12 = *(void *)(v9 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v12 + 48))(v5, 1, v9) == 1)
    {
      (*(void (**)(uint64_t, void, uint64_t))(v12 + 104))(v11, enum case for CryptoError.unspecifiedError(_:), v9);
      sub_100A99278((uint64_t)v5);
    }
    else
    {
      (*(void (**)(uint64_t, char *, uint64_t))(v12 + 32))(v11, v5, v9);
    }
    return swift_willThrow();
  }
  if (!v44)
  {
    static os_log_type_t.error.getter();
    if (qword_101636F48 != -1) {
      swift_once();
    }
    os_log(_:dso:log:_:_:)();
    uint64_t v23 = type metadata accessor for CryptoError();
    sub_100A992D8((unint64_t *)&qword_1016605B0, (void (*)(uint64_t))&type metadata accessor for CryptoError);
    swift_allocError();
    (*(void (**)(uint64_t, void, uint64_t))(*(void *)(v23 - 8) + 104))(v24, enum case for CryptoError.invalidKey(_:), v23);
    return swift_willThrow();
  }
  uint64_t v13 = sub_100A90C58(v44, 1);
  if (!v1)
  {
    uint64_t v15 = v13;
    unint64_t v16 = v14;
    if (v45)
    {
      uint64_t v17 = sub_100A90C58(v45, 0);
      unint64_t v42 = v18;
      uint64_t v19 = static Data.random(bytes:)();
      unint64_t v21 = v20;
      sub_1000361E0(v15, v16);
      uint64_t v22 = sub_10043A040(v15, v16);
      uint64_t v40 = v19;
      unint64_t v41 = v21;
      uint64_t v38 = v22;
      uint64_t v39 = v27;
      unint64_t v28 = v42;
      sub_1000361E0(v17, v42);
      uint64_t v29 = sub_10043A38C(v17, v28);
      uint64_t v31 = v30;
      uint64_t v37 = v29;
      sub_100434DF4(v40, v41, v43);
      sub_10001CFB8(v17, v28);
      uint64_t v32 = v43[0];
      uint64_t v33 = v43[1];
      CCECCryptorRelease();
      sub_10001CFB8(v15, v16);
      uint64_t result = CCECCryptorRelease();
      *a1 = v37;
      a1[1] = v31;
      uint64_t v35 = v39;
      a1[2] = v38;
      a1[3] = v35;
      a1[4] = v32;
      a1[5] = v33;
      return result;
    }
    static os_log_type_t.error.getter();
    if (qword_101636F48 != -1) {
      swift_once();
    }
    os_log(_:dso:log:_:_:)();
    uint64_t v25 = type metadata accessor for CryptoError();
    sub_100A992D8((unint64_t *)&qword_1016605B0, (void (*)(uint64_t))&type metadata accessor for CryptoError);
    swift_allocError();
    (*(void (**)(uint64_t, void, uint64_t))(*(void *)(v25 - 8) + 104))(v26, enum case for CryptoError.invalidKey(_:), v25);
    swift_willThrow();
    sub_10001CFB8(v15, v16);
  }
  return CCECCryptorRelease();
}

uint64_t sub_100A976D4(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 1953393000 && a2 == 0xE400000000000000;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0xD000000000000013 && a2 == 0x80000001014126E0)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else
  {
    char v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v6) {
      return 1;
    }
    else {
      return 2;
    }
  }
}

uint64_t sub_100A977B4@<X0>(void *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v5 = sub_10000588C(&qword_101658648);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v8 = (char *)&v21 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10001CD44(a1, a1[3]);
  sub_100A99C64();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v2) {
    return _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)a1);
  }
  char v31 = 0;
  sub_100A99CB8();
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  uint64_t v9 = v26;
  uint64_t v24 = v25;
  unint64_t v10 = v27;
  char v31 = 1;
  sub_1000361E0(v26, v27);
  sub_100A99D0C();
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  uint64_t v11 = v25;
  unint64_t v12 = v26;
  unint64_t v13 = v27;
  unint64_t v21 = v28;
  uint64_t v22 = v25;
  unint64_t v14 = v30;
  uint64_t v23 = v29;
  sub_1000361E0(v9, v10);
  sub_100037A38(v11, v12);
  uint64_t v15 = v13;
  uint64_t v16 = v13;
  unint64_t v17 = v21;
  sub_1000361E0(v16, v21);
  sub_100037A38(v23, v14);
  sub_10001CFB8(v9, v10);
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)a1);
  sub_10001CFB8(v9, v10);
  sub_100037A24(v22, v12);
  sub_10001CFB8(v15, v17);
  uint64_t v18 = v23;
  uint64_t result = sub_100037A24(v23, v14);
  *a2 = v24;
  a2[1] = v9;
  uint64_t v20 = v22;
  a2[2] = v10;
  a2[3] = v20;
  a2[4] = v12;
  a2[5] = v15;
  a2[6] = v17;
  a2[7] = v18;
  a2[8] = v14;
  return result;
}

uint64_t sub_100A97A64(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 0x64656D7265746E69 && a2 == 0xEF79654B65746169;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x654B63696C627570 && a2 == 0xE900000000000079 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0x4B65746176697270 && a2 == 0xEA00000000007965)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else
  {
    char v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v6) {
      return 2;
    }
    else {
      return 3;
    }
  }
}

uint64_t sub_100A97BF8@<X0>(void *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v5 = sub_10000588C(&qword_101658600);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v8 = (char *)&v20 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10001CD44(a1, a1[3]);
  sub_100A99320();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v2) {
    return _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)a1);
  }
  char v26 = 0;
  sub_10043D454();
  KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
  uint64_t v10 = v24;
  unint64_t v9 = v25;
  char v26 = 1;
  sub_100037A38(v24, v25);
  sub_10043C600();
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  uint64_t v22 = v10;
  unint64_t v23 = v9;
  uint64_t v11 = v24;
  char v26 = 2;
  unint64_t v12 = v25;
  sub_1000361E0(v24, v25);
  sub_10043C110();
  unint64_t v21 = 0;
  KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
  (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  uint64_t v13 = v24;
  unint64_t v21 = v25;
  uint64_t v14 = v11;
  uint64_t v16 = v22;
  unint64_t v15 = v23;
  sub_100037A38(v22, v23);
  unint64_t v17 = v12;
  sub_1000361E0(v14, v12);
  unint64_t v18 = v21;
  sub_100037A38(v13, v21);
  sub_10001CFB8(v14, v17);
  sub_100037A24(v16, v15);
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)a1);
  sub_100037A24(v16, v15);
  sub_10001CFB8(v14, v17);
  uint64_t result = sub_100037A24(v13, v18);
  *a2 = v16;
  a2[1] = v15;
  a2[2] = v14;
  a2[3] = v17;
  a2[4] = v13;
  a2[5] = v18;
  return result;
}

uint64_t sub_100A97F2C(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 0x7865646E69 && a2 == 0xE500000000000000;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x6553646572616873 && a2 == 0xEC00000074657263)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else
  {
    char v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v6) {
      return 1;
    }
    else {
      return 2;
    }
  }
}

uint64_t sub_100A98030(void *a1)
{
  uint64_t v3 = sub_10000588C(&qword_101658680);
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  char v6 = &v9[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v7 = a1[3];
  sub_10001CD44(a1, v7);
  sub_100A99E08();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (!v1)
  {
    v9[16] = 0;
    uint64_t v7 = KeyedDecodingContainer.decode(_:forKey:)();
    v9[15] = 1;
    sub_1002A87F4();
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    (*(void (**)(unsigned char *, uint64_t))(v4 + 8))(v6, v3);
  }
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)a1);
  return v7;
}

uint64_t sub_100A981F0(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 0x654B63696C627570 && a2 == 0xE900000000000079;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x4B65746176697270 && a2 == 0xEA00000000007965 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0x6553646572616873 && a2 == 0xEC00000074657263)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else
  {
    char v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v6) {
      return 2;
    }
    else {
      return 3;
    }
  }
}

uint64_t sub_100A98378@<X0>(void *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v5 = sub_10000588C(&qword_101658618);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v8 = (char *)&v20 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10001CD44(a1, a1[3]);
  sub_100A9121C();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v2) {
    return _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)a1);
  }
  char v26 = 0;
  sub_10043C600();
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  uint64_t v10 = v24;
  unint64_t v9 = v25;
  char v26 = 1;
  sub_1000361E0(v24, v25);
  sub_10043C110();
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  uint64_t v22 = v10;
  unint64_t v23 = v9;
  uint64_t v11 = v24;
  char v26 = 2;
  unint64_t v12 = v25;
  sub_1000361E0(v24, v25);
  sub_1002A87F4();
  unint64_t v21 = 0;
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  uint64_t v13 = v24;
  unint64_t v21 = v25;
  uint64_t v14 = v11;
  uint64_t v16 = v22;
  unint64_t v15 = v23;
  sub_1000361E0(v22, v23);
  unint64_t v17 = v12;
  sub_1000361E0(v14, v12);
  unint64_t v18 = v21;
  sub_1000361E0(v13, v21);
  sub_10001CFB8(v14, v17);
  sub_10001CFB8(v16, v15);
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)a1);
  sub_10001CFB8(v16, v15);
  sub_10001CFB8(v14, v17);
  uint64_t result = sub_10001CFB8(v13, v18);
  *a2 = v16;
  a2[1] = v15;
  a2[2] = v14;
  a2[3] = v17;
  a2[4] = v13;
  a2[5] = v18;
  return result;
}

ValueMetadata *type metadata accessor for CollaborativeKeyGen()
{
  return &type metadata for CollaborativeKeyGen;
}

ValueMetadata *type metadata accessor for CollaborativeKeyGen.v1()
{
  return &type metadata for CollaborativeKeyGen.v1;
}

uint64_t type metadata accessor for CollaborativeKeyGen.v1.OwnerContext()
{
  return self;
}

uint64_t type metadata accessor for CollaborativeKeyGen.v1.ContributorContext()
{
  return self;
}

ValueMetadata *type metadata accessor for CollaborativeKeyGen.v2()
{
  return &type metadata for CollaborativeKeyGen.v2;
}

uint64_t type metadata accessor for CollaborativeKeyGen.v2.OwnerContext()
{
  return self;
}

uint64_t type metadata accessor for CollaborativeKeyGen.v2.ContributorContext()
{
  return self;
}

ValueMetadata *type metadata accessor for RootKey()
{
  return &type metadata for RootKey;
}

uint64_t destroy for DiversifiedRootKeys(uint64_t *a1)
{
  unint64_t v2 = a1[1];
  if (v2 >> 60 != 15) {
    sub_10001CFB8(*a1, v2);
  }
  uint64_t result = sub_10001CFB8(a1[2], a1[3]);
  unint64_t v4 = a1[5];
  if (v4 >> 60 != 15)
  {
    uint64_t v5 = a1[4];
    return sub_10001CFB8(v5, v4);
  }
  return result;
}

uint64_t initializeWithCopy for DiversifiedRootKeys(uint64_t a1, uint64_t *a2)
{
  unint64_t v4 = a2[1];
  if (v4 >> 60 == 15)
  {
    *(_OWORD *)a1 = *(_OWORD *)a2;
  }
  else
  {
    uint64_t v5 = *a2;
    sub_1000361E0(*a2, a2[1]);
    *(void *)a1 = v5;
    *(void *)(a1 + 8) = v4;
  }
  uint64_t v6 = a2[2];
  unint64_t v7 = a2[3];
  sub_1000361E0(v6, v7);
  *(void *)(a1 + 16) = v6;
  *(void *)(a1 + 24) = v7;
  uint64_t v8 = a2 + 4;
  unint64_t v9 = a2[5];
  if (v9 >> 60 == 15)
  {
    *(_OWORD *)(a1 + 32) = *(_OWORD *)v8;
  }
  else
  {
    uint64_t v10 = *v8;
    sub_1000361E0(*v8, v9);
    *(void *)(a1 + 32) = v10;
    *(void *)(a1 + 40) = v9;
  }
  return a1;
}

uint64_t *assignWithCopy for DiversifiedRootKeys(uint64_t *a1, uint64_t *a2)
{
  unint64_t v4 = a2[1];
  if ((unint64_t)a1[1] >> 60 == 15)
  {
    if (v4 >> 60 != 15)
    {
      uint64_t v5 = *a2;
      sub_1000361E0(*a2, a2[1]);
      *a1 = v5;
      a1[1] = v4;
      goto LABEL_8;
    }
    goto LABEL_6;
  }
  if (v4 >> 60 == 15)
  {
    sub_100A989D4((uint64_t)a1);
LABEL_6:
    *(_OWORD *)a1 = *(_OWORD *)a2;
    goto LABEL_8;
  }
  uint64_t v6 = *a2;
  sub_1000361E0(*a2, a2[1]);
  uint64_t v7 = *a1;
  unint64_t v8 = a1[1];
  *a1 = v6;
  a1[1] = v4;
  sub_10001CFB8(v7, v8);
LABEL_8:
  uint64_t v9 = a2[2];
  unint64_t v10 = a2[3];
  sub_1000361E0(v9, v10);
  uint64_t v11 = a1[2];
  unint64_t v12 = a1[3];
  a1[2] = v9;
  a1[3] = v10;
  sub_10001CFB8(v11, v12);
  uint64_t v13 = a2 + 4;
  unint64_t v14 = a2[5];
  if ((unint64_t)a1[5] >> 60 != 15)
  {
    if (v14 >> 60 != 15)
    {
      uint64_t v16 = *v13;
      sub_1000361E0(*v13, v14);
      uint64_t v17 = a1[4];
      unint64_t v18 = a1[5];
      a1[4] = v16;
      a1[5] = v14;
      sub_10001CFB8(v17, v18);
      return a1;
    }
    sub_10042BA84((uint64_t)(a1 + 4));
    goto LABEL_13;
  }
  if (v14 >> 60 == 15)
  {
LABEL_13:
    *((_OWORD *)a1 + 2) = *(_OWORD *)v13;
    return a1;
  }
  uint64_t v15 = *v13;
  sub_1000361E0(*v13, v14);
  a1[4] = v15;
  a1[5] = v14;
  return a1;
}

uint64_t sub_100A989D4(uint64_t a1)
{
  return a1;
}

uint64_t assignWithTake for DiversifiedRootKeys(uint64_t a1, uint64_t a2)
{
  unint64_t v4 = *(void *)(a1 + 8);
  if (v4 >> 60 == 15) {
    goto LABEL_4;
  }
  unint64_t v5 = *(void *)(a2 + 8);
  if (v5 >> 60 == 15)
  {
    sub_100A989D4(a1);
LABEL_4:
    *(_OWORD *)a1 = *(_OWORD *)a2;
    goto LABEL_6;
  }
  uint64_t v6 = *(void *)a1;
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v5;
  sub_10001CFB8(v6, v4);
LABEL_6:
  uint64_t v7 = *(void *)(a1 + 16);
  unint64_t v8 = *(void *)(a1 + 24);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  sub_10001CFB8(v7, v8);
  uint64_t v9 = (void *)(a2 + 32);
  unint64_t v10 = *(void *)(a1 + 40);
  if (v10 >> 60 != 15)
  {
    unint64_t v11 = *(void *)(a2 + 40);
    if (v11 >> 60 != 15)
    {
      uint64_t v12 = *(void *)(a1 + 32);
      *(void *)(a1 + 32) = *v9;
      *(void *)(a1 + 40) = v11;
      sub_10001CFB8(v12, v10);
      return a1;
    }
    sub_10042BA84(a1 + 32);
  }
  *(_OWORD *)(a1 + 32) = *(_OWORD *)v9;
  return a1;
}

uint64_t getEnumTagSinglePayload for DiversifiedRootKeys(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0xD && *(unsigned char *)(a1 + 48)) {
    return (*(_DWORD *)a1 + 13);
  }
  unsigned int v3 = (((*(void *)(a1 + 24) >> 60) >> 2) & 0xFFFFFFF3 | (4 * ((*(void *)(a1 + 24) >> 60) & 3))) ^ 0xF;
  if (v3 >= 0xC) {
    unsigned int v3 = -1;
  }
  return v3 + 1;
}

uint64_t storeEnumTagSinglePayload for DiversifiedRootKeys(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xC)
  {
    *(void *)(result + 40) = 0;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)uint64_t result = a2 - 13;
    if (a3 >= 0xD) {
      *(unsigned char *)(result + 48) = 1;
    }
  }
  else
  {
    if (a3 >= 0xD) {
      *(unsigned char *)(result + 48) = 0;
    }
    if (a2)
    {
      *(void *)(result + 16) = 0;
      *(void *)(result + 24) = (unint64_t)(((-a2 >> 2) & 3) - 4 * a2) << 60;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for DiversifiedRootKeys()
{
  return &type metadata for DiversifiedRootKeys;
}

uint64_t destroy for InitialPairingInfo(uint64_t *a1)
{
  sub_10001CFB8(*a1, a1[1]);
  sub_10001CFB8(a1[2], a1[3]);
  uint64_t result = sub_10001CFB8(a1[4], a1[5]);
  unint64_t v3 = a1[7];
  if (v3 >> 60 != 15) {
    uint64_t result = sub_10001CFB8(a1[6], v3);
  }
  unint64_t v4 = a1[9];
  if (v4 >> 60 != 15)
  {
    uint64_t v5 = a1[8];
    return sub_10001CFB8(v5, v4);
  }
  return result;
}

uint64_t initializeWithCopy for InitialPairingInfo(uint64_t a1, uint64_t *a2)
{
  uint64_t v4 = *a2;
  unint64_t v5 = a2[1];
  sub_1000361E0(*a2, v5);
  *(void *)a1 = v4;
  *(void *)(a1 + 8) = v5;
  uint64_t v6 = a2[2];
  unint64_t v7 = a2[3];
  sub_1000361E0(v6, v7);
  *(void *)(a1 + 16) = v6;
  *(void *)(a1 + 24) = v7;
  uint64_t v8 = a2[4];
  unint64_t v9 = a2[5];
  sub_1000361E0(v8, v9);
  *(void *)(a1 + 32) = v8;
  *(void *)(a1 + 40) = v9;
  unint64_t v10 = a2 + 6;
  unint64_t v11 = a2[7];
  if (v11 >> 60 == 15)
  {
    *(_OWORD *)(a1 + 48) = *(_OWORD *)v10;
  }
  else
  {
    uint64_t v12 = *v10;
    sub_1000361E0(*v10, a2[7]);
    *(void *)(a1 + 48) = v12;
    *(void *)(a1 + 56) = v11;
  }
  uint64_t v13 = a2 + 8;
  unint64_t v14 = a2[9];
  if (v14 >> 60 == 15)
  {
    *(_OWORD *)(a1 + 64) = *(_OWORD *)v13;
  }
  else
  {
    uint64_t v15 = *v13;
    sub_1000361E0(*v13, v14);
    *(void *)(a1 + 64) = v15;
    *(void *)(a1 + 72) = v14;
  }
  return a1;
}

uint64_t *assignWithCopy for InitialPairingInfo(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4 = *a2;
  unint64_t v5 = a2[1];
  sub_1000361E0(*a2, v5);
  uint64_t v6 = *a1;
  unint64_t v7 = a1[1];
  *a1 = v4;
  a1[1] = v5;
  sub_10001CFB8(v6, v7);
  uint64_t v8 = a2[2];
  unint64_t v9 = a2[3];
  sub_1000361E0(v8, v9);
  uint64_t v10 = a1[2];
  unint64_t v11 = a1[3];
  a1[2] = v8;
  a1[3] = v9;
  sub_10001CFB8(v10, v11);
  uint64_t v12 = a2[4];
  unint64_t v13 = a2[5];
  sub_1000361E0(v12, v13);
  uint64_t v14 = a1[4];
  unint64_t v15 = a1[5];
  a1[4] = v12;
  a1[5] = v13;
  sub_10001CFB8(v14, v15);
  uint64_t v16 = a2 + 6;
  unint64_t v17 = a2[7];
  if ((unint64_t)a1[7] >> 60 == 15)
  {
    if (v17 >> 60 != 15)
    {
      uint64_t v18 = *v16;
      sub_1000361E0(*v16, a2[7]);
      a1[6] = v18;
      a1[7] = v17;
      goto LABEL_8;
    }
    goto LABEL_6;
  }
  if (v17 >> 60 == 15)
  {
    sub_1002C0990((uint64_t)(a1 + 6));
LABEL_6:
    *((_OWORD *)a1 + 3) = *(_OWORD *)v16;
    goto LABEL_8;
  }
  uint64_t v19 = *v16;
  sub_1000361E0(*v16, a2[7]);
  uint64_t v20 = a1[6];
  unint64_t v21 = a1[7];
  a1[6] = v19;
  a1[7] = v17;
  sub_10001CFB8(v20, v21);
LABEL_8:
  uint64_t v22 = a2 + 8;
  unint64_t v23 = a2[9];
  if ((unint64_t)a1[9] >> 60 != 15)
  {
    if (v23 >> 60 != 15)
    {
      uint64_t v25 = *v22;
      sub_1000361E0(*v22, v23);
      uint64_t v26 = a1[8];
      unint64_t v27 = a1[9];
      a1[8] = v25;
      a1[9] = v23;
      sub_10001CFB8(v26, v27);
      return a1;
    }
    sub_1002C0990((uint64_t)(a1 + 8));
    goto LABEL_13;
  }
  if (v23 >> 60 == 15)
  {
LABEL_13:
    *((_OWORD *)a1 + 4) = *(_OWORD *)v22;
    return a1;
  }
  uint64_t v24 = *v22;
  sub_1000361E0(*v22, v23);
  a1[8] = v24;
  a1[9] = v23;
  return a1;
}

uint64_t assignWithTake for InitialPairingInfo(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)a1;
  unint64_t v5 = *(void *)(a1 + 8);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  sub_10001CFB8(v4, v5);
  uint64_t v6 = *(void *)(a1 + 16);
  unint64_t v7 = *(void *)(a1 + 24);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  sub_10001CFB8(v6, v7);
  uint64_t v8 = *(void *)(a1 + 32);
  unint64_t v9 = *(void *)(a1 + 40);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  sub_10001CFB8(v8, v9);
  uint64_t v10 = (_OWORD *)(a2 + 48);
  unint64_t v11 = *(void *)(a1 + 56);
  if (v11 >> 60 == 15) {
    goto LABEL_4;
  }
  unint64_t v12 = *(void *)(a2 + 56);
  if (v12 >> 60 == 15)
  {
    sub_1002C0990(a1 + 48);
LABEL_4:
    *(_OWORD *)(a1 + 48) = *v10;
    goto LABEL_6;
  }
  uint64_t v13 = *(void *)(a1 + 48);
  *(void *)(a1 + 48) = *(void *)v10;
  *(void *)(a1 + 56) = v12;
  sub_10001CFB8(v13, v11);
LABEL_6:
  uint64_t v14 = (void *)(a2 + 64);
  unint64_t v15 = *(void *)(a1 + 72);
  if (v15 >> 60 != 15)
  {
    unint64_t v16 = *(void *)(a2 + 72);
    if (v16 >> 60 != 15)
    {
      uint64_t v17 = *(void *)(a1 + 64);
      *(void *)(a1 + 64) = *v14;
      *(void *)(a1 + 72) = v16;
      sub_10001CFB8(v17, v15);
      return a1;
    }
    sub_1002C0990(a1 + 64);
  }
  *(_OWORD *)(a1 + 64) = *(_OWORD *)v14;
  return a1;
}

ValueMetadata *type metadata accessor for InitialPairingInfo()
{
  return &type metadata for InitialPairingInfo;
}

ValueMetadata *type metadata accessor for RootKey.CodingKeys()
{
  return &type metadata for RootKey.CodingKeys;
}

unsigned char *storeEnumTagSinglePayload for CryptoTokenError(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 3 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 3) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFD) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFC)
  {
    unsigned int v6 = ((a2 - 253) >> 8) + 1;
    *uint64_t result = a2 + 3;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x100A99088);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 3;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for CryptoTokenError()
{
  return &type metadata for CryptoTokenError;
}

unint64_t sub_100A990C4()
{
  unint64_t result = qword_1016585D0;
  if (!qword_1016585D0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1016585D0);
  }
  return result;
}

unint64_t sub_100A9911C()
{
  unint64_t result = qword_1016585D8;
  if (!qword_1016585D8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1016585D8);
  }
  return result;
}

unint64_t sub_100A99174()
{
  unint64_t result = qword_1016585E0;
  if (!qword_1016585E0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1016585E0);
  }
  return result;
}

unint64_t sub_100A991CC()
{
  unint64_t result = qword_1016585E8;
  if (!qword_1016585E8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1016585E8);
  }
  return result;
}

unint64_t sub_100A99224()
{
  unint64_t result = qword_1016585F0;
  if (!qword_1016585F0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1016585F0);
  }
  return result;
}

uint64_t sub_100A99278(uint64_t a1)
{
  uint64_t v2 = sub_10000588C(&qword_10163F758);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_100A992D8(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

unint64_t sub_100A99320()
{
  unint64_t result = qword_101658608;
  if (!qword_101658608)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_101658608);
  }
  return result;
}

void *sub_100A99374(void *a1, void (*a2)(void, void), void (*a3)(uint64_t, uint64_t), void (*a4)(uint64_t, uint64_t))
{
  uint64_t v7 = a1[2];
  uint64_t v8 = a1[3];
  uint64_t v9 = a1[4];
  uint64_t v10 = a1[5];
  a2(*a1, a1[1]);
  a3(v7, v8);
  a4(v9, v10);
  return a1;
}

unsigned char *_s12searchpartyd7RootKeyV10CodingKeysOwst_0(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 2 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 2) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFE) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFD)
  {
    unsigned int v6 = ((a2 - 254) >> 8) + 1;
    *unint64_t result = a2 + 2;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x100A994C0);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 2;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for DiversifiedRootKeys.CodingKeys()
{
  return &type metadata for DiversifiedRootKeys.CodingKeys;
}

uint64_t destroy for GeneratedTokens(void *a1)
{
  sub_10001CFB8(a1[1], a1[2]);
  unint64_t v2 = a1[4];
  if (v2 >> 60 != 15) {
    sub_10001CFB8(a1[3], v2);
  }
  uint64_t result = sub_10001CFB8(a1[5], a1[6]);
  unint64_t v4 = a1[8];
  if (v4 >> 60 != 15)
  {
    uint64_t v5 = a1[7];
    return sub_10001CFB8(v5, v4);
  }
  return result;
}

uint64_t initializeWithCopy for GeneratedTokens(uint64_t a1, void *a2)
{
  uint64_t v4 = a2[1];
  *(void *)a1 = *a2;
  unint64_t v5 = a2[2];
  sub_1000361E0(v4, v5);
  *(void *)(a1 + 8) = v4;
  *(void *)(a1 + 16) = v5;
  unsigned int v6 = a2 + 3;
  unint64_t v7 = a2[4];
  if (v7 >> 60 == 15)
  {
    *(_OWORD *)(a1 + 24) = *(_OWORD *)v6;
  }
  else
  {
    uint64_t v8 = *v6;
    sub_1000361E0(*v6, a2[4]);
    *(void *)(a1 + 24) = v8;
    *(void *)(a1 + 32) = v7;
  }
  uint64_t v9 = a2[5];
  unint64_t v10 = a2[6];
  sub_1000361E0(v9, v10);
  *(void *)(a1 + 40) = v9;
  *(void *)(a1 + 48) = v10;
  unint64_t v11 = a2 + 7;
  unint64_t v12 = a2[8];
  if (v12 >> 60 == 15)
  {
    *(_OWORD *)(a1 + 56) = *(_OWORD *)v11;
  }
  else
  {
    uint64_t v13 = *v11;
    sub_1000361E0(*v11, v12);
    *(void *)(a1 + 56) = v13;
    *(void *)(a1 + 64) = v12;
  }
  return a1;
}

void *assignWithCopy for GeneratedTokens(void *a1, void *a2)
{
  *a1 = *a2;
  uint64_t v4 = a2[1];
  unint64_t v5 = a2[2];
  sub_1000361E0(v4, v5);
  uint64_t v6 = a1[1];
  unint64_t v7 = a1[2];
  a1[1] = v4;
  a1[2] = v5;
  sub_10001CFB8(v6, v7);
  uint64_t v8 = a2 + 3;
  unint64_t v9 = a2[4];
  if (a1[4] >> 60 == 15)
  {
    if (v9 >> 60 != 15)
    {
      uint64_t v10 = *v8;
      sub_1000361E0(*v8, a2[4]);
      a1[3] = v10;
      a1[4] = v9;
      goto LABEL_8;
    }
    goto LABEL_6;
  }
  if (v9 >> 60 == 15)
  {
    sub_100A989D4((uint64_t)(a1 + 3));
LABEL_6:
    *(_OWORD *)(a1 + 3) = *(_OWORD *)v8;
    goto LABEL_8;
  }
  uint64_t v11 = *v8;
  sub_1000361E0(*v8, a2[4]);
  uint64_t v12 = a1[3];
  unint64_t v13 = a1[4];
  a1[3] = v11;
  a1[4] = v9;
  sub_10001CFB8(v12, v13);
LABEL_8:
  uint64_t v14 = a2[5];
  unint64_t v15 = a2[6];
  sub_1000361E0(v14, v15);
  uint64_t v16 = a1[5];
  unint64_t v17 = a1[6];
  a1[5] = v14;
  a1[6] = v15;
  sub_10001CFB8(v16, v17);
  uint64_t v18 = a2 + 7;
  unint64_t v19 = a2[8];
  if (a1[8] >> 60 != 15)
  {
    if (v19 >> 60 != 15)
    {
      uint64_t v21 = *v18;
      sub_1000361E0(*v18, v19);
      uint64_t v22 = a1[7];
      unint64_t v23 = a1[8];
      a1[7] = v21;
      a1[8] = v19;
      sub_10001CFB8(v22, v23);
      return a1;
    }
    sub_10042BA84((uint64_t)(a1 + 7));
    goto LABEL_13;
  }
  if (v19 >> 60 == 15)
  {
LABEL_13:
    *(_OWORD *)(a1 + 7) = *(_OWORD *)v18;
    return a1;
  }
  uint64_t v20 = *v18;
  sub_1000361E0(*v18, v19);
  a1[7] = v20;
  a1[8] = v19;
  return a1;
}

uint64_t assignWithTake for GeneratedTokens(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 16);
  uint64_t v5 = *(void *)(a1 + 8);
  unint64_t v6 = *(void *)(a1 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(void *)(a1 + 16) = v4;
  sub_10001CFB8(v5, v6);
  unint64_t v7 = (_OWORD *)(a2 + 24);
  unint64_t v8 = *(void *)(a1 + 32);
  if (v8 >> 60 == 15) {
    goto LABEL_4;
  }
  unint64_t v9 = *(void *)(a2 + 32);
  if (v9 >> 60 == 15)
  {
    sub_100A989D4(a1 + 24);
LABEL_4:
    *(_OWORD *)(a1 + 24) = *v7;
    goto LABEL_6;
  }
  uint64_t v10 = *(void *)(a1 + 24);
  *(void *)(a1 + 24) = *(void *)v7;
  *(void *)(a1 + 32) = v9;
  sub_10001CFB8(v10, v8);
LABEL_6:
  uint64_t v11 = *(void *)(a1 + 40);
  unint64_t v12 = *(void *)(a1 + 48);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  sub_10001CFB8(v11, v12);
  unint64_t v13 = (void *)(a2 + 56);
  unint64_t v14 = *(void *)(a1 + 64);
  if (v14 >> 60 != 15)
  {
    unint64_t v15 = *(void *)(a2 + 64);
    if (v15 >> 60 != 15)
    {
      uint64_t v16 = *(void *)(a1 + 56);
      *(void *)(a1 + 56) = *v13;
      *(void *)(a1 + 64) = v15;
      sub_10001CFB8(v16, v14);
      return a1;
    }
    sub_10042BA84(a1 + 56);
  }
  *(_OWORD *)(a1 + 56) = *(_OWORD *)v13;
  return a1;
}

ValueMetadata *type metadata accessor for GeneratedTokens()
{
  return &type metadata for GeneratedTokens;
}

void *sub_100A998BC(void *a1, void *a2)
{
  uint64_t v3 = a2[1];
  *a1 = *a2;
  unint64_t v4 = a2[2];
  sub_1000361E0(v3, v4);
  a1[1] = v3;
  a1[2] = v4;
  return a1;
}

void *assignWithCopy for KeyGenerationHint(void *a1, void *a2)
{
  *a1 = *a2;
  uint64_t v3 = a2[1];
  unint64_t v4 = a2[2];
  sub_1000361E0(v3, v4);
  uint64_t v5 = a1[1];
  unint64_t v6 = a1[2];
  a1[1] = v3;
  a1[2] = v4;
  sub_10001CFB8(v5, v6);
  return a1;
}

uint64_t assignWithTake for KeyGenerationHint(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 16);
  uint64_t v4 = *(void *)(a1 + 8);
  unint64_t v5 = *(void *)(a1 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(void *)(a1 + 16) = v3;
  sub_10001CFB8(v4, v5);
  return a1;
}

uint64_t getEnumTagSinglePayload for KeyGenerationHint(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0xD && *(unsigned char *)(a1 + 24)) {
    return (*(_DWORD *)a1 + 13);
  }
  unsigned int v3 = (((*(void *)(a1 + 16) >> 60) >> 2) & 0xFFFFFFF3 | (4 * ((*(void *)(a1 + 16) >> 60) & 3))) ^ 0xF;
  if (v3 >= 0xC) {
    unsigned int v3 = -1;
  }
  return v3 + 1;
}

uint64_t storeEnumTagSinglePayload for KeyGenerationHint(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xC)
  {
    *(void *)(result + 8) = 0;
    *(void *)(result + 16) = 0;
    *(void *)uint64_t result = a2 - 13;
    if (a3 >= 0xD) {
      *(unsigned char *)(result + 24) = 1;
    }
  }
  else
  {
    if (a3 >= 0xD) {
      *(unsigned char *)(result + 24) = 0;
    }
    if (a2)
    {
      *(void *)(result + 8) = 0;
      *(void *)(result + 16) = (unint64_t)(((-a2 >> 2) & 3) - 4 * a2) << 60;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for KeyGenerationHint()
{
  return &type metadata for KeyGenerationHint;
}

unint64_t sub_100A99A50()
{
  unint64_t result = qword_101658620;
  if (!qword_101658620)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_101658620);
  }
  return result;
}

unint64_t sub_100A99AA8()
{
  unint64_t result = qword_101658628;
  if (!qword_101658628)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_101658628);
  }
  return result;
}

unint64_t sub_100A99B00()
{
  unint64_t result = qword_101658630;
  if (!qword_101658630)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_101658630);
  }
  return result;
}

unint64_t sub_100A99B58()
{
  unint64_t result = qword_101658638;
  if (!qword_101658638)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_101658638);
  }
  return result;
}

unint64_t sub_100A99BB0()
{
  unint64_t result = qword_101658640;
  if (!qword_101658640)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_101658640);
  }
  return result;
}

uint64_t sub_100A99C04(uint64_t a1)
{
  return a1;
}

uint64_t sub_100A99C34(uint64_t a1)
{
  return a1;
}

unint64_t sub_100A99C64()
{
  unint64_t result = qword_101658650;
  if (!qword_101658650)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_101658650);
  }
  return result;
}

unint64_t sub_100A99CB8()
{
  unint64_t result = qword_101658658;
  if (!qword_101658658)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_101658658);
  }
  return result;
}

unint64_t sub_100A99D0C()
{
  unint64_t result = qword_101658660;
  if (!qword_101658660)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_101658660);
  }
  return result;
}

unint64_t sub_100A99D60()
{
  unint64_t result = qword_101658670;
  if (!qword_101658670)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_101658670);
  }
  return result;
}

unint64_t sub_100A99DB4()
{
  unint64_t result = qword_101658678;
  if (!qword_101658678)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_101658678);
  }
  return result;
}

unint64_t sub_100A99E08()
{
  unint64_t result = qword_101658688;
  if (!qword_101658688)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_101658688);
  }
  return result;
}

ValueMetadata *type metadata accessor for KeyGenerationHint.CodingKeys()
{
  return &type metadata for KeyGenerationHint.CodingKeys;
}

unsigned char *_s12searchpartyd17KeyGenerationHintV10CodingKeysOwst_0(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFE)
  {
    unsigned int v6 = ((a2 - 255) >> 8) + 1;
    *unint64_t result = a2 + 1;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x100A99F3CLL);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 1;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for GeneratedTokens.CodingKeys()
{
  return &type metadata for GeneratedTokens.CodingKeys;
}

unint64_t sub_100A99F78()
{
  unint64_t result = qword_101658698;
  if (!qword_101658698)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_101658698);
  }
  return result;
}

unint64_t sub_100A99FD0()
{
  unint64_t result = qword_1016586A0;
  if (!qword_1016586A0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1016586A0);
  }
  return result;
}

unint64_t sub_100A9A028()
{
  unint64_t result = qword_1016586A8;
  if (!qword_1016586A8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1016586A8);
  }
  return result;
}

unint64_t sub_100A9A080()
{
  unint64_t result = qword_1016586B0;
  if (!qword_1016586B0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1016586B0);
  }
  return result;
}

unint64_t sub_100A9A0D8()
{
  unint64_t result = qword_1016586B8;
  if (!qword_1016586B8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1016586B8);
  }
  return result;
}

unint64_t sub_100A9A130()
{
  unint64_t result = qword_1016586C0;
  if (!qword_1016586C0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1016586C0);
  }
  return result;
}

ValueMetadata *type metadata accessor for AccessoryTXPowerResponsePayload()
{
  return &type metadata for AccessoryTXPowerResponsePayload;
}

uint64_t sub_100A9A194(void *a1)
{
  sub_10001CD44(a1, a1[3]);
  dispatch thunk of BinaryEncoding.container()();
  sub_1006430FC();
  uint64_t v1 = FixedWidthInteger.data.getter();
  unint64_t v3 = v2;
  sub_1000BD078((uint64_t)v5, v6);
  sub_100135A44();
  dispatch thunk of BinaryEncodingContaining.encode<A>(sequence:)();
  sub_10001CFB8(v1, v3);
  return _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)v5);
}

uint64_t sub_100A9A26C@<X0>(void *a1@<X0>, unsigned char *a2@<X8>)
{
  uint64_t result = sub_100A9A338(a1);
  if (!v2) {
    *a2 = result;
  }
  return result;
}

unint64_t sub_100A9A298(uint64_t a1)
{
  *(void *)(a1 + 8) = sub_100A9A2C8();
  unint64_t result = sub_1002A57C0();
  *(void *)(a1 + 16) = result;
  return result;
}

unint64_t sub_100A9A2C8()
{
  unint64_t result = qword_1016586C8;
  if (!qword_1016586C8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1016586C8);
  }
  return result;
}

uint64_t sub_100A9A31C(void *a1)
{
  return sub_100A9A194(a1);
}

uint64_t sub_100A9A338(void *a1)
{
  uint64_t v3 = type metadata accessor for Endianness();
  __chkstk_darwin(v3 - 8);
  sub_10001CD44(a1, a1[3]);
  dispatch thunk of BinaryDecoding.container()();
  uint64_t v4 = sub_1000BD078((uint64_t)v13, v14);
  uint64_t v5 = dispatch thunk of BinaryDecodingContaining.decode(length:)();
  if (!v1)
  {
    uint64_t v7 = v5;
    unint64_t v8 = v6;
    sub_1000361E0(v5, v6);
    static Endianness.current.getter();
    sub_1006430FC();
    FixedWidthInteger.init(data:ofEndianness:)();
    if (v12 != 1)
    {
      uint64_t v4 = v11;
      sub_10001CFB8(v7, v8);
      _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)v13);
      _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)a1);
      return v4;
    }
    uint64_t v4 = type metadata accessor for BinaryDecodingError();
    sub_100499A70();
    swift_allocError();
    (*(void (**)(uint64_t, void, uint64_t))(*(void *)(v4 - 8) + 104))(v9, enum case for BinaryDecodingError.decodingError(_:), v4);
    swift_willThrow();
    sub_10001CFB8(v7, v8);
  }
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)v13);
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)a1);
  return v4;
}

void *sub_100A9A508(uint64_t a1)
{
  int64_t v1 = *(void *)(a1 + 16);
  uint64_t v2 = _swiftEmptyArrayStorage;
  if (v1)
  {
    unint64_t v13 = _swiftEmptyArrayStorage;
    sub_1000B7180(0, v1, 0);
    uint64_t v2 = _swiftEmptyArrayStorage;
    uint64_t v4 = (uint64_t *)(a1 + 40);
    do
    {
      uint64_t v6 = *(v4 - 1);
      uint64_t v5 = *v4;
      unint64_t v13 = v2;
      unint64_t v7 = v2[2];
      unint64_t v8 = v2[3];
      swift_bridgeObjectRetain();
      if (v7 >= v8 >> 1)
      {
        sub_1000B7180(v8 > 1, v7 + 1, 1);
        uint64_t v2 = v13;
      }
      v4 += 2;
      unsigned __int8 v11 = &type metadata for String;
      unint64_t v12 = sub_10000B4CC();
      *(void *)&long long v10 = v6;
      *((void *)&v10 + 1) = v5;
      _OWORD v2[2] = v7 + 1;
      sub_10001CEB0(&v10, (uint64_t)&v2[5 * v7 + 4]);
      --v1;
    }
    while (v1);
  }
  return v2;
}

uint64_t sub_100A9A604(unint64_t a1)
{
  return sub_100A9BB28(a1, &qword_1016595D0);
}

void *sub_100A9A618(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for OwnedBeaconRecord();
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  uint64_t v5 = (char *)&v14 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  int64_t v6 = *(void *)(a1 + 16);
  unint64_t v7 = _swiftEmptyArrayStorage;
  if (v6)
  {
    unint64_t v17 = _swiftEmptyArrayStorage;
    sub_1000B7570(0, v6, 0);
    unint64_t v7 = v17;
    uint64_t v8 = a1 + ((*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80));
    uint64_t v9 = *(void *)(v3 + 72);
    do
    {
      sub_100B30D0C(v8, (uint64_t)v5, (uint64_t (*)(void))type metadata accessor for OwnedBeaconRecord);
      unint64_t v17 = v7;
      unint64_t v11 = v7[2];
      unint64_t v10 = v7[3];
      if (v11 >= v10 >> 1)
      {
        sub_1000B7570(v10 > 1, v11 + 1, 1);
        unint64_t v7 = v17;
      }
      uint64_t v15 = v2;
      uint64_t v16 = sub_100B22DA4(&qword_101638DD0, (void (*)(uint64_t))type metadata accessor for OwnedBeaconRecord);
      unint64_t v12 = sub_10001D958((uint64_t *)&v14);
      sub_100B30D0C((uint64_t)v5, (uint64_t)v12, (uint64_t (*)(void))type metadata accessor for OwnedBeaconRecord);
      v7[2] = v11 + 1;
      sub_10001CEB0(&v14, (uint64_t)&v7[5 * v11 + 4]);
      sub_100B310AC((uint64_t)v5, (uint64_t (*)(void))type metadata accessor for OwnedBeaconRecord);
      v8 += v9;
      --v6;
    }
    while (v6);
  }
  return v7;
}

void *sub_100A9A81C(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for SharedBeaconRecord(0);
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  uint64_t v5 = (char *)&v14 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  int64_t v6 = *(void *)(a1 + 16);
  unint64_t v7 = _swiftEmptyArrayStorage;
  if (v6)
  {
    unint64_t v17 = _swiftEmptyArrayStorage;
    sub_1000B7570(0, v6, 0);
    unint64_t v7 = v17;
    uint64_t v8 = a1 + ((*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80));
    uint64_t v9 = *(void *)(v3 + 72);
    do
    {
      sub_100B30D0C(v8, (uint64_t)v5, type metadata accessor for SharedBeaconRecord);
      unint64_t v17 = v7;
      unint64_t v11 = v7[2];
      unint64_t v10 = v7[3];
      if (v11 >= v10 >> 1)
      {
        sub_1000B7570(v10 > 1, v11 + 1, 1);
        unint64_t v7 = v17;
      }
      uint64_t v15 = v2;
      uint64_t v16 = sub_100B22DA4(&qword_101639EA0, (void (*)(uint64_t))type metadata accessor for SharedBeaconRecord);
      unint64_t v12 = sub_10001D958((uint64_t *)&v14);
      sub_100B30D0C((uint64_t)v5, (uint64_t)v12, type metadata accessor for SharedBeaconRecord);
      v7[2] = v11 + 1;
      sub_10001CEB0(&v14, (uint64_t)&v7[5 * v11 + 4]);
      sub_100B310AC((uint64_t)v5, type metadata accessor for SharedBeaconRecord);
      v8 += v9;
      --v6;
    }
    while (v6);
  }
  return v7;
}

void *sub_100A9AA20(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for LocalFindableAccessoryRecord();
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  uint64_t v5 = (char *)&v14 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  int64_t v6 = *(void *)(a1 + 16);
  unint64_t v7 = _swiftEmptyArrayStorage;
  if (v6)
  {
    unint64_t v17 = _swiftEmptyArrayStorage;
    sub_1000B7570(0, v6, 0);
    unint64_t v7 = v17;
    uint64_t v8 = a1 + ((*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80));
    uint64_t v9 = *(void *)(v3 + 72);
    do
    {
      sub_100B30D0C(v8, (uint64_t)v5, (uint64_t (*)(void))type metadata accessor for LocalFindableAccessoryRecord);
      unint64_t v17 = v7;
      unint64_t v11 = v7[2];
      unint64_t v10 = v7[3];
      if (v11 >= v10 >> 1)
      {
        sub_1000B7570(v10 > 1, v11 + 1, 1);
        unint64_t v7 = v17;
      }
      uint64_t v15 = v2;
      uint64_t v16 = sub_100B22DA4(&qword_101642930, (void (*)(uint64_t))type metadata accessor for LocalFindableAccessoryRecord);
      unint64_t v12 = sub_10001D958((uint64_t *)&v14);
      sub_100B30D0C((uint64_t)v5, (uint64_t)v12, (uint64_t (*)(void))type metadata accessor for LocalFindableAccessoryRecord);
      v7[2] = v11 + 1;
      sub_10001CEB0(&v14, (uint64_t)&v7[5 * v11 + 4]);
      sub_100B310AC((uint64_t)v5, (uint64_t (*)(void))type metadata accessor for LocalFindableAccessoryRecord);
      v8 += v9;
      --v6;
    }
    while (v6);
  }
  return v7;
}

void *sub_100A9AC24(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for OwnerPeerTrust();
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  uint64_t v5 = (char *)&v14 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  int64_t v6 = *(void *)(a1 + 16);
  unint64_t v7 = _swiftEmptyArrayStorage;
  if (v6)
  {
    unint64_t v17 = _swiftEmptyArrayStorage;
    sub_1000B75D0(0, v6, 0);
    unint64_t v7 = v17;
    uint64_t v8 = a1 + ((*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80));
    uint64_t v9 = *(void *)(v3 + 72);
    do
    {
      sub_100B30D0C(v8, (uint64_t)v5, (uint64_t (*)(void))type metadata accessor for OwnerPeerTrust);
      unint64_t v17 = v7;
      unint64_t v11 = v7[2];
      unint64_t v10 = v7[3];
      if (v11 >= v10 >> 1)
      {
        sub_1000B75D0(v10 > 1, v11 + 1, 1);
        unint64_t v7 = v17;
      }
      uint64_t v15 = v2;
      uint64_t v16 = sub_100B22DA4(&qword_101659290, (void (*)(uint64_t))type metadata accessor for OwnerPeerTrust);
      unint64_t v12 = sub_10001D958((uint64_t *)&v14);
      sub_100B30D0C((uint64_t)v5, (uint64_t)v12, (uint64_t (*)(void))type metadata accessor for OwnerPeerTrust);
      v7[2] = v11 + 1;
      sub_10001CEB0(&v14, (uint64_t)&v7[5 * v11 + 4]);
      sub_100B310AC((uint64_t)v5, (uint64_t (*)(void))type metadata accessor for OwnerPeerTrust);
      v8 += v9;
      --v6;
    }
    while (v6);
  }
  return v7;
}

void *sub_100A9AE28(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for MemberPeerTrust();
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  uint64_t v5 = (char *)&v14 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  int64_t v6 = *(void *)(a1 + 16);
  unint64_t v7 = _swiftEmptyArrayStorage;
  if (v6)
  {
    unint64_t v17 = _swiftEmptyArrayStorage;
    sub_1000B75D0(0, v6, 0);
    unint64_t v7 = v17;
    uint64_t v8 = a1 + ((*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80));
    uint64_t v9 = *(void *)(v3 + 72);
    do
    {
      sub_100B30D0C(v8, (uint64_t)v5, (uint64_t (*)(void))type metadata accessor for MemberPeerTrust);
      unint64_t v17 = v7;
      unint64_t v11 = v7[2];
      unint64_t v10 = v7[3];
      if (v11 >= v10 >> 1)
      {
        sub_1000B75D0(v10 > 1, v11 + 1, 1);
        unint64_t v7 = v17;
      }
      uint64_t v15 = v2;
      uint64_t v16 = sub_100B22DA4(&qword_101659288, (void (*)(uint64_t))type metadata accessor for MemberPeerTrust);
      unint64_t v12 = sub_10001D958((uint64_t *)&v14);
      sub_100B30D0C((uint64_t)v5, (uint64_t)v12, (uint64_t (*)(void))type metadata accessor for MemberPeerTrust);
      v7[2] = v11 + 1;
      sub_10001CEB0(&v14, (uint64_t)&v7[5 * v11 + 4]);
      sub_100B310AC((uint64_t)v5, (uint64_t (*)(void))type metadata accessor for MemberPeerTrust);
      v8 += v9;
      --v6;
    }
    while (v6);
  }
  return v7;
}

void *sub_100A9B02C(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for SharingCircleSecret();
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  uint64_t v5 = (char *)&v14 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  int64_t v6 = *(void *)(a1 + 16);
  unint64_t v7 = _swiftEmptyArrayStorage;
  if (v6)
  {
    unint64_t v17 = _swiftEmptyArrayStorage;
    sub_1000B75D0(0, v6, 0);
    unint64_t v7 = v17;
    uint64_t v8 = a1 + ((*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80));
    uint64_t v9 = *(void *)(v3 + 72);
    do
    {
      sub_100B30D0C(v8, (uint64_t)v5, (uint64_t (*)(void))type metadata accessor for SharingCircleSecret);
      unint64_t v17 = v7;
      unint64_t v11 = v7[2];
      unint64_t v10 = v7[3];
      if (v11 >= v10 >> 1)
      {
        sub_1000B75D0(v10 > 1, v11 + 1, 1);
        unint64_t v7 = v17;
      }
      uint64_t v15 = v2;
      uint64_t v16 = sub_100B22DA4(&qword_101659270, (void (*)(uint64_t))type metadata accessor for SharingCircleSecret);
      unint64_t v12 = sub_10001D958((uint64_t *)&v14);
      sub_100B30D0C((uint64_t)v5, (uint64_t)v12, (uint64_t (*)(void))type metadata accessor for SharingCircleSecret);
      v7[2] = v11 + 1;
      sub_10001CEB0(&v14, (uint64_t)&v7[5 * v11 + 4]);
      sub_100B310AC((uint64_t)v5, (uint64_t (*)(void))type metadata accessor for SharingCircleSecret);
      v8 += v9;
      --v6;
    }
    while (v6);
  }
  return v7;
}

void *sub_100A9B230(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for SharedBeaconRecord(0);
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  uint64_t v5 = (char *)&v14 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  int64_t v6 = *(void *)(a1 + 16);
  unint64_t v7 = _swiftEmptyArrayStorage;
  if (v6)
  {
    unint64_t v17 = _swiftEmptyArrayStorage;
    sub_1000B75D0(0, v6, 0);
    unint64_t v7 = v17;
    uint64_t v8 = a1 + ((*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80));
    uint64_t v9 = *(void *)(v3 + 72);
    do
    {
      sub_100B30D0C(v8, (uint64_t)v5, type metadata accessor for SharedBeaconRecord);
      unint64_t v17 = v7;
      unint64_t v11 = v7[2];
      unint64_t v10 = v7[3];
      if (v11 >= v10 >> 1)
      {
        sub_1000B75D0(v10 > 1, v11 + 1, 1);
        unint64_t v7 = v17;
      }
      uint64_t v15 = v2;
      uint64_t v16 = sub_100B22DA4(&qword_101642730, (void (*)(uint64_t))type metadata accessor for SharedBeaconRecord);
      unint64_t v12 = sub_10001D958((uint64_t *)&v14);
      sub_100B30D0C((uint64_t)v5, (uint64_t)v12, type metadata accessor for SharedBeaconRecord);
      v7[2] = v11 + 1;
      sub_10001CEB0(&v14, (uint64_t)&v7[5 * v11 + 4]);
      sub_100B310AC((uint64_t)v5, type metadata accessor for SharedBeaconRecord);
      v8 += v9;
      --v6;
    }
    while (v6);
  }
  return v7;
}

void *sub_100A9B434(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for BeaconNamingRecord();
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  uint64_t v5 = (char *)&v14 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  int64_t v6 = *(void *)(a1 + 16);
  unint64_t v7 = _swiftEmptyArrayStorage;
  if (v6)
  {
    unint64_t v17 = _swiftEmptyArrayStorage;
    sub_1000B75D0(0, v6, 0);
    unint64_t v7 = v17;
    uint64_t v8 = a1 + ((*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80));
    uint64_t v9 = *(void *)(v3 + 72);
    do
    {
      sub_100B30D0C(v8, (uint64_t)v5, (uint64_t (*)(void))type metadata accessor for BeaconNamingRecord);
      unint64_t v17 = v7;
      unint64_t v11 = v7[2];
      unint64_t v10 = v7[3];
      if (v11 >= v10 >> 1)
      {
        sub_1000B75D0(v10 > 1, v11 + 1, 1);
        unint64_t v7 = v17;
      }
      uint64_t v15 = v2;
      uint64_t v16 = sub_100B22DA4(&qword_1016426F8, (void (*)(uint64_t))type metadata accessor for BeaconNamingRecord);
      unint64_t v12 = sub_10001D958((uint64_t *)&v14);
      sub_100B30D0C((uint64_t)v5, (uint64_t)v12, (uint64_t (*)(void))type metadata accessor for BeaconNamingRecord);
      v7[2] = v11 + 1;
      sub_10001CEB0(&v14, (uint64_t)&v7[5 * v11 + 4]);
      sub_100B310AC((uint64_t)v5, (uint64_t (*)(void))type metadata accessor for BeaconNamingRecord);
      v8 += v9;
      --v6;
    }
    while (v6);
  }
  return v7;
}

void *sub_100A9B638(uint64_t a1)
{
  int64_t v1 = *(void *)(a1 + 16);
  uint64_t v2 = _swiftEmptyArrayStorage;
  if (v1)
  {
    uint64_t v22 = _swiftEmptyArrayStorage;
    sub_1000B767C(0, v1, 0);
    uint64_t v2 = _swiftEmptyArrayStorage;
    uint64_t v4 = (char *)(a1 + 32);
    do
    {
      char v5 = *v4++;
      uint64_t v20 = &type metadata for BAServiceIdentifier;
      uint64_t v21 = &off_1015CE038;
      v19[0] = v5;
      uint64_t v22 = v2;
      unint64_t v7 = v2[2];
      unint64_t v6 = v2[3];
      uint64_t v8 = &type metadata for BAServiceIdentifier;
      if (v7 >= v6 >> 1)
      {
        sub_1000B767C(v6 > 1, v7 + 1, 1);
        uint64_t v8 = v20;
        uint64_t v2 = v22;
      }
      uint64_t v9 = sub_1000BD078((uint64_t)v19, (uint64_t)v8);
      __chkstk_darwin(v9);
      unint64_t v11 = (char *)&v15 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
      (*(void (**)(char *))(v12 + 16))(v11);
      char v13 = *v11;
      unint64_t v17 = &type metadata for BAServiceIdentifier;
      uint64_t v18 = &off_1015CE038;
      LOBYTE(v16) = v13;
      _OWORD v2[2] = v7 + 1;
      sub_10001CEB0(&v16, (uint64_t)&v2[5 * v7 + 4]);
      _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)v19);
      --v1;
    }
    while (v1);
  }
  return v2;
}

void *sub_100A9B7E0(uint64_t a1)
{
  return sub_100A9C998(a1, (uint64_t)&type metadata for BACharacteristicIdentifier.FindMy, (uint64_t)&off_1015CE018);
}

void *sub_100A9B7F4(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for SPCachedAdvertisement();
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  char v5 = (char *)&v14 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  int64_t v6 = *(void *)(a1 + 16);
  unint64_t v7 = _swiftEmptyArrayStorage;
  if (v6)
  {
    unint64_t v17 = _swiftEmptyArrayStorage;
    sub_1000B7888(0, v6, 0);
    unint64_t v7 = v17;
    uint64_t v8 = a1 + ((*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80));
    uint64_t v9 = *(void *)(v3 + 72);
    do
    {
      sub_100B30D0C(v8, (uint64_t)v5, (uint64_t (*)(void))type metadata accessor for SPCachedAdvertisement);
      unint64_t v17 = v7;
      unint64_t v11 = v7[2];
      unint64_t v10 = v7[3];
      if (v11 >= v10 >> 1)
      {
        sub_1000B7888(v10 > 1, v11 + 1, 1);
        unint64_t v7 = v17;
      }
      uint64_t v15 = v2;
      long long v16 = &off_1015BBA88;
      uint64_t v12 = sub_10001D958((uint64_t *)&v14);
      sub_100B30D0C((uint64_t)v5, (uint64_t)v12, (uint64_t (*)(void))type metadata accessor for SPCachedAdvertisement);
      v7[2] = v11 + 1;
      sub_10001CEB0(&v14, (uint64_t)&v7[5 * v11 + 4]);
      sub_100B310AC((uint64_t)v5, (uint64_t (*)(void))type metadata accessor for SPCachedAdvertisement);
      v8 += v9;
      --v6;
    }
    while (v6);
  }
  return v7;
}

void *sub_100A9B9C4(uint64_t a1)
{
  int64_t v1 = *(void *)(a1 + 16);
  if (v1)
  {
    sub_1000B7A1C(0, v1, 0);
    uint64_t v3 = (void **)(a1 + 32);
    type metadata accessor for SPPairingSessionError(0);
    sub_100B22DA4(&qword_1016381E8, type metadata accessor for SPPairingSessionError);
    do
    {
      uint64_t v4 = *v3;
      uint64_t v5 = swift_allocError();
      void *v6 = v4;
      id v7 = v4;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
        sub_1000B7A1C(0, _swiftEmptyArrayStorage[2] + 1, 1);
      }
      unint64_t v9 = _swiftEmptyArrayStorage[2];
      unint64_t v8 = _swiftEmptyArrayStorage[3];
      if (v9 >= v8 >> 1) {
        sub_1000B7A1C(v8 > 1, v9 + 1, 1);
      }
      _swiftEmptyArrayStorage[2] = v9 + 1;
      _swiftEmptyArrayStorage[v9 + 4] = v5;
      ++v3;
      --v1;
    }
    while (v1);
  }
  return _swiftEmptyArrayStorage;
}

uint64_t sub_100A9BB14(unint64_t a1)
{
  return sub_100A9BB28(a1, &qword_101647428);
}

uint64_t sub_100A9BB28(unint64_t a1, unint64_t *a2)
{
  if (a1 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v4 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v4 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
  }
  uint64_t v5 = _swiftEmptyArrayStorage;
  if (!v4) {
    return (uint64_t)v5;
  }
  uint64_t v15 = _swiftEmptyArrayStorage;
  uint64_t result = sub_1000B74B8(0, v4 & ~(v4 >> 63), 0);
  if ((v4 & 0x8000000000000000) == 0)
  {
    if ((a1 & 0xC000000000000001) != 0)
    {
      for (uint64_t i = 0; i != v4; ++i)
      {
        specialized _ArrayBuffer._getElementSlowPath(_:)();
        sub_10001D4B0(0, a2);
        swift_dynamicCast();
        uint64_t v5 = v15;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        {
          sub_1000B74B8(0, v5[2] + 1, 1);
          uint64_t v5 = v15;
        }
        unint64_t v9 = v5[2];
        unint64_t v8 = v5[3];
        if (v9 >= v8 >> 1)
        {
          sub_1000B74B8(v8 > 1, v9 + 1, 1);
          uint64_t v5 = v15;
        }
        _OWORD v5[2] = v9 + 1;
        sub_100173E4C(v14, &v5[4 * v9 + 4]);
      }
    }
    else
    {
      unint64_t v10 = (id *)(a1 + 32);
      sub_10001D4B0(0, a2);
      do
      {
        id v11 = *v10;
        swift_dynamicCast();
        uint64_t v5 = v15;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        {
          sub_1000B74B8(0, v5[2] + 1, 1);
          uint64_t v5 = v15;
        }
        unint64_t v13 = v5[2];
        unint64_t v12 = v5[3];
        if (v13 >= v12 >> 1)
        {
          sub_1000B74B8(v12 > 1, v13 + 1, 1);
          uint64_t v5 = v15;
        }
        _OWORD v5[2] = v13 + 1;
        sub_100173E4C(v14, &v5[4 * v13 + 4]);
        ++v10;
        --v4;
      }
      while (v4);
    }
    return (uint64_t)v5;
  }
  __break(1u);
  return result;
}

void *sub_100A9BD7C(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for BeaconEstimatedLocation();
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  uint64_t v5 = (char *)&v14 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  int64_t v6 = *(void *)(a1 + 16);
  id v7 = _swiftEmptyArrayStorage;
  if (v6)
  {
    unint64_t v17 = _swiftEmptyArrayStorage;
    sub_1000B7B58(0, v6, 0);
    id v7 = v17;
    uint64_t v8 = a1 + ((*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80));
    uint64_t v9 = *(void *)(v3 + 72);
    do
    {
      sub_100B30D0C(v8, (uint64_t)v5, (uint64_t (*)(void))type metadata accessor for BeaconEstimatedLocation);
      unint64_t v17 = v7;
      unint64_t v11 = v7[2];
      unint64_t v10 = v7[3];
      if (v11 >= v10 >> 1)
      {
        sub_1000B7B58(v10 > 1, v11 + 1, 1);
        id v7 = v17;
      }
      uint64_t v15 = v2;
      long long v16 = &off_1015BBDC8;
      unint64_t v12 = sub_10001D958((uint64_t *)&v14);
      sub_100B30D0C((uint64_t)v5, (uint64_t)v12, (uint64_t (*)(void))type metadata accessor for BeaconEstimatedLocation);
      v7[2] = v11 + 1;
      sub_10001CEB0(&v14, (uint64_t)&v7[5 * v11 + 4]);
      sub_100B310AC((uint64_t)v5, (uint64_t (*)(void))type metadata accessor for BeaconEstimatedLocation);
      v8 += v9;
      --v6;
    }
    while (v6);
  }
  return v7;
}

void *sub_100A9BF4C(uint64_t a1)
{
  int64_t v1 = *(void *)(a1 + 16);
  uint64_t v2 = _swiftEmptyArrayStorage;
  if (v1)
  {
    uint64_t v9 = _swiftEmptyArrayStorage;
    sub_1000B74B8(0, v1, 0);
    uint64_t v4 = a1 + 32;
    uint64_t v2 = _swiftEmptyArrayStorage;
    do
    {
      ++v4;
      swift_dynamicCast();
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        sub_1000B74B8(0, v2[2] + 1, 1);
        uint64_t v2 = v9;
      }
      unint64_t v6 = v2[2];
      unint64_t v5 = v2[3];
      if (v6 >= v5 >> 1)
      {
        sub_1000B74B8(v5 > 1, v6 + 1, 1);
        uint64_t v2 = v9;
      }
      _OWORD v2[2] = v6 + 1;
      sub_100173E4C(&v8, &v2[4 * v6 + 4]);
      --v1;
    }
    while (v1);
  }
  return v2;
}

void *sub_100A9C06C(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for OwnedBeaconGroup(0);
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  unint64_t v5 = (char *)&v14 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  int64_t v6 = *(void *)(a1 + 16);
  id v7 = _swiftEmptyArrayStorage;
  if (v6)
  {
    unint64_t v17 = _swiftEmptyArrayStorage;
    sub_1000B7BC4(0, v6, 0);
    id v7 = v17;
    uint64_t v8 = a1 + ((*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80));
    uint64_t v9 = *(void *)(v3 + 72);
    do
    {
      sub_100B30D0C(v8, (uint64_t)v5, type metadata accessor for OwnedBeaconGroup);
      unint64_t v17 = v7;
      unint64_t v11 = v7[2];
      unint64_t v10 = v7[3];
      if (v11 >= v10 >> 1)
      {
        sub_1000B7BC4(v10 > 1, v11 + 1, 1);
        id v7 = v17;
      }
      uint64_t v15 = v2;
      long long v16 = &off_1015C78A8;
      unint64_t v12 = sub_10001D958((uint64_t *)&v14);
      sub_100B30D0C((uint64_t)v5, (uint64_t)v12, type metadata accessor for OwnedBeaconGroup);
      v7[2] = v11 + 1;
      sub_10001CEB0(&v14, (uint64_t)&v7[5 * v11 + 4]);
      sub_100B310AC((uint64_t)v5, type metadata accessor for OwnedBeaconGroup);
      v8 += v9;
      --v6;
    }
    while (v6);
  }
  return v7;
}

void *sub_100A9C23C(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for SharedBeaconGroup();
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  unint64_t v5 = (char *)&v14 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  int64_t v6 = *(void *)(a1 + 16);
  id v7 = _swiftEmptyArrayStorage;
  if (v6)
  {
    unint64_t v17 = _swiftEmptyArrayStorage;
    sub_1000B7BC4(0, v6, 0);
    id v7 = v17;
    uint64_t v8 = a1 + ((*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80));
    uint64_t v9 = *(void *)(v3 + 72);
    do
    {
      sub_100B30D0C(v8, (uint64_t)v5, (uint64_t (*)(void))type metadata accessor for SharedBeaconGroup);
      unint64_t v17 = v7;
      unint64_t v11 = v7[2];
      unint64_t v10 = v7[3];
      if (v11 >= v10 >> 1)
      {
        sub_1000B7BC4(v10 > 1, v11 + 1, 1);
        id v7 = v17;
      }
      uint64_t v15 = v2;
      long long v16 = &off_1015BEB88;
      unint64_t v12 = sub_10001D958((uint64_t *)&v14);
      sub_100B30D0C((uint64_t)v5, (uint64_t)v12, (uint64_t (*)(void))type metadata accessor for SharedBeaconGroup);
      v7[2] = v11 + 1;
      sub_10001CEB0(&v14, (uint64_t)&v7[5 * v11 + 4]);
      sub_100B310AC((uint64_t)v5, (uint64_t (*)(void))type metadata accessor for SharedBeaconGroup);
      v8 += v9;
      --v6;
    }
    while (v6);
  }
  return v7;
}

void *sub_100A9C40C(uint64_t a1)
{
  int64_t v1 = *(void *)(a1 + 16);
  if (v1)
  {
    sub_1000B7E68(0, v1, 0);
    uint64_t v3 = (unint64_t *)(a1 + 64);
    do
    {
      uint64_t v4 = *(v3 - 1);
      unint64_t v5 = *v3;
      swift_bridgeObjectRetain();
      sub_100037A38(v4, v5);
      sub_10000588C(&qword_10163A8F0);
      sub_10000588C(&qword_10163A8E0);
      swift_dynamicCast();
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
        sub_1000B7E68(0, _swiftEmptyArrayStorage[2] + 1, 1);
      }
      unint64_t v7 = _swiftEmptyArrayStorage[2];
      unint64_t v6 = _swiftEmptyArrayStorage[3];
      if (v7 >= v6 >> 1) {
        sub_1000B7E68(v6 > 1, v7 + 1, 1);
      }
      _swiftEmptyArrayStorage[2] = v7 + 1;
      uint64_t v8 = &_swiftEmptyArrayStorage[5 * v7];
      *((unsigned char *)v8 + 32) = v10;
      v3 += 5;
      v8[5] = v11;
      v8[6] = v12;
      v8[7] = v13;
      v8[8] = v14;
      --v1;
    }
    while (v1);
  }
  return _swiftEmptyArrayStorage;
}

void *sub_100A9C570(uint64_t a1)
{
  uint64_t v16 = sub_10000588C(&qword_1016497E0);
  uint64_t v2 = *(void *)(v16 - 8);
  __chkstk_darwin(v16);
  uint64_t v4 = (char *)&v16 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = sub_10000588C(&qword_10163AA50);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v8 = (char *)&v16 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  int64_t v9 = *(void *)(a1 + 16);
  char v10 = _swiftEmptyArrayStorage;
  if (v9)
  {
    unint64_t v17 = _swiftEmptyArrayStorage;
    sub_1000B7EC8(0, v9, 0);
    uint64_t v11 = a1 + ((*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80));
    uint64_t v12 = *(void *)(v2 + 72);
    char v10 = v17;
    do
    {
      sub_10001D074(v11, (uint64_t)v4, &qword_1016497E0);
      swift_dynamicCast();
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        sub_1000B7EC8(0, v10[2] + 1, 1);
        char v10 = v17;
      }
      unint64_t v14 = v10[2];
      unint64_t v13 = v10[3];
      if (v14 >= v13 >> 1)
      {
        sub_1000B7EC8(v13 > 1, v14 + 1, 1);
        char v10 = v17;
      }
      v10[2] = v14 + 1;
      sub_10001D608((uint64_t)v8, (uint64_t)v10+ ((*(unsigned __int8 *)(v6 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80))+ *(void *)(v6 + 72) * v14, &qword_10163AA50);
      v11 += v12;
      --v9;
    }
    while (v9);
  }
  return v10;
}

void *sub_100A9C7B4(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for RawSearchResult();
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  uint64_t v5 = (char *)&v14 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  int64_t v6 = *(void *)(a1 + 16);
  uint64_t v7 = _swiftEmptyArrayStorage;
  if (v6)
  {
    unint64_t v17 = _swiftEmptyArrayStorage;
    sub_1000B7B58(0, v6, 0);
    uint64_t v7 = v17;
    uint64_t v8 = a1 + ((*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80));
    uint64_t v9 = *(void *)(v3 + 72);
    do
    {
      sub_100B30D0C(v8, (uint64_t)v5, (uint64_t (*)(void))type metadata accessor for RawSearchResult);
      unint64_t v17 = v7;
      unint64_t v11 = v7[2];
      unint64_t v10 = v7[3];
      if (v11 >= v10 >> 1)
      {
        sub_1000B7B58(v10 > 1, v11 + 1, 1);
        uint64_t v7 = v17;
      }
      uint64_t v15 = v2;
      uint64_t v16 = &off_1015BBDF0;
      uint64_t v12 = sub_10001D958((uint64_t *)&v14);
      sub_100B30D0C((uint64_t)v5, (uint64_t)v12, (uint64_t (*)(void))type metadata accessor for RawSearchResult);
      v7[2] = v11 + 1;
      sub_10001CEB0(&v14, (uint64_t)&v7[5 * v11 + 4]);
      sub_100B310AC((uint64_t)v5, (uint64_t (*)(void))type metadata accessor for RawSearchResult);
      v8 += v9;
      --v6;
    }
    while (v6);
  }
  return v7;
}

void *sub_100A9C984(uint64_t a1)
{
  return sub_100A9C998(a1, (uint64_t)&type metadata for BACharacteristicIdentifier.AccessoryInformation, (uint64_t)&off_1015CE028);
}

void *sub_100A9C998(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int64_t v3 = *(void *)(a1 + 16);
  uint64_t v4 = _swiftEmptyArrayStorage;
  if (v3)
  {
    unint64_t v17 = _swiftEmptyArrayStorage;
    sub_1000B76AC(0, v3, 0);
    uint64_t v4 = _swiftEmptyArrayStorage;
    uint64_t v8 = (char *)(a1 + 32);
    do
    {
      char v10 = *v8++;
      char v9 = v10;
      unint64_t v17 = v4;
      unint64_t v12 = v4[2];
      unint64_t v11 = v4[3];
      if (v12 >= v11 >> 1)
      {
        sub_1000B76AC(v11 > 1, v12 + 1, 1);
        uint64_t v4 = v17;
      }
      uint64_t v15 = a2;
      uint64_t v16 = a3;
      LOBYTE(v14) = v9;
      v4[2] = v12 + 1;
      sub_10001CEB0(&v14, (uint64_t)&v4[5 * v12 + 4]);
      --v3;
    }
    while (v3);
  }
  return v4;
}

uint64_t sub_100A9CA80(unint64_t a1)
{
  if (a1 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v2 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v2 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
  }
  int64_t v3 = _swiftEmptyArrayStorage;
  if (!v2) {
    return (uint64_t)v3;
  }
  unint64_t v17 = _swiftEmptyArrayStorage;
  uint64_t result = sub_1000B80A4(0, v2 & ~(v2 >> 63), 0);
  if ((v2 & 0x8000000000000000) == 0)
  {
    int64_t v3 = v17;
    if ((a1 & 0xC000000000000001) != 0)
    {
      uint64_t v5 = 0;
      do
      {
        uint64_t v6 = specialized _ArrayBuffer._getElementSlowPath(_:)();
        unint64_t v17 = v3;
        unint64_t v8 = v3[2];
        unint64_t v7 = v3[3];
        if (v8 >= v7 >> 1)
        {
          sub_1000B80A4(v7 > 1, v8 + 1, 1);
          int64_t v3 = v17;
        }
        ++v5;
        uint64_t v15 = sub_10001D4B0(0, (unint64_t *)&qword_1016608B0);
        uint64_t v16 = sub_10033149C(&qword_1016592C0, (unint64_t *)&qword_1016608B0);
        *(void *)&long long v14 = v6;
        v3[2] = v8 + 1;
        sub_10001CEB0(&v14, (uint64_t)&v3[5 * v8 + 4]);
      }
      while (v2 != v5);
    }
    else
    {
      char v9 = (void **)(a1 + 32);
      do
      {
        char v10 = *v9;
        unint64_t v17 = v3;
        unint64_t v12 = v3[2];
        unint64_t v11 = v3[3];
        id v13 = v10;
        if (v12 >= v11 >> 1)
        {
          sub_1000B80A4(v11 > 1, v12 + 1, 1);
          int64_t v3 = v17;
        }
        uint64_t v15 = sub_10001D4B0(0, (unint64_t *)&qword_1016608B0);
        uint64_t v16 = sub_10033149C(&qword_1016592C0, (unint64_t *)&qword_1016608B0);
        *(void *)&long long v14 = v13;
        v3[2] = v12 + 1;
        sub_10001CEB0(&v14, (uint64_t)&v3[5 * v12 + 4]);
        ++v9;
        --v2;
      }
      while (v2);
    }
    return (uint64_t)v3;
  }
  __break(1u);
  return result;
}

void *sub_100A9CCCC(uint64_t a1)
{
  int64_t v1 = *(void *)(a1 + 16);
  uint64_t v2 = _swiftEmptyArrayStorage;
  if (v1)
  {
    uint64_t v20 = _swiftEmptyArrayStorage;
    sub_1000B8278(0, v1, 0);
    uint64_t v2 = _swiftEmptyArrayStorage;
    uint64_t v4 = (void *)(a1 + 80);
    do
    {
      uint64_t v5 = *(v4 - 6);
      unint64_t v6 = *(v4 - 5);
      char v16 = *((unsigned char *)v4 - 32);
      uint64_t v7 = *(v4 - 2);
      uint64_t v15 = *(v4 - 3);
      char v13 = *((unsigned char *)v4 - 7);
      char v14 = *((unsigned char *)v4 - 8);
      uint64_t v8 = *v4;
      sub_1000361E0(v5, v6);
      uint64_t v20 = v2;
      unint64_t v9 = v2[2];
      unint64_t v10 = v2[3];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      if (v9 >= v10 >> 1)
      {
        sub_1000B8278(v10 > 1, v9 + 1, 1);
        uint64_t v2 = v20;
      }
      uint64_t v18 = &type metadata for OwnSubmitPayload;
      unint64_t v19 = sub_10001CF1C();
      uint64_t v11 = swift_allocObject();
      *(void *)&long long v17 = v11;
      *(void *)(v11 + 16) = v5;
      *(void *)(v11 + 24) = v6;
      *(unsigned char *)(v11 + 32) = v16;
      *(void *)(v11 + 40) = v15;
      *(void *)(v11 + 48) = v7;
      *(unsigned char *)(v11 + 56) = v14;
      *(unsigned char *)(v11 + 57) = v13;
      *(void *)(v11 + 64) = v8;
      _OWORD v2[2] = v9 + 1;
      sub_10001CEB0(&v17, (uint64_t)&v2[5 * v9 + 4]);
      v4 += 7;
      --v1;
    }
    while (v1);
  }
  return v2;
}

void *sub_100A9CE38(uint64_t a1)
{
  uint64_t v16 = type metadata accessor for BeaconKeyManager.IndexInformation(0);
  uint64_t v2 = *(void *)(v16 - 8);
  __chkstk_darwin(v16);
  uint64_t v4 = (char *)&v16 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = sub_10000588C(&qword_101657910);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v8 = (char *)&v16 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  int64_t v9 = *(void *)(a1 + 16);
  unint64_t v10 = _swiftEmptyArrayStorage;
  if (v9)
  {
    long long v17 = _swiftEmptyArrayStorage;
    sub_1000B8304(0, v9, 0);
    uint64_t v11 = a1 + ((*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80));
    uint64_t v12 = *(void *)(v2 + 72);
    do
    {
      sub_100B30D0C(v11, (uint64_t)v4, type metadata accessor for BeaconKeyManager.IndexInformation);
      swift_dynamicCast();
      unint64_t v10 = v17;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        sub_1000B8304(0, v10[2] + 1, 1);
        unint64_t v10 = v17;
      }
      unint64_t v14 = v10[2];
      unint64_t v13 = v10[3];
      if (v14 >= v13 >> 1)
      {
        sub_1000B8304(v13 > 1, v14 + 1, 1);
        unint64_t v10 = v17;
      }
      v10[2] = v14 + 1;
      sub_10001D608((uint64_t)v8, (uint64_t)v10+ ((*(unsigned __int8 *)(v6 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80))+ *(void *)(v6 + 72) * v14, &qword_101657910);
      v11 += v12;
      --v9;
    }
    while (v9);
  }
  return v10;
}

uint64_t sub_100A9D084(unint64_t a1)
{
  if (a1 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v2 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v2 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
  }
  uint64_t v3 = _swiftEmptyArrayStorage;
  if (!v2) {
    return (uint64_t)v3;
  }
  long long v17 = _swiftEmptyArrayStorage;
  uint64_t result = sub_1000B8624(0, v2 & ~(v2 >> 63), 0);
  if ((v2 & 0x8000000000000000) == 0)
  {
    uint64_t v3 = v17;
    if ((a1 & 0xC000000000000001) != 0)
    {
      uint64_t v5 = 0;
      do
      {
        uint64_t v6 = specialized _ArrayBuffer._getElementSlowPath(_:)();
        long long v17 = v3;
        unint64_t v8 = v3[2];
        unint64_t v7 = v3[3];
        if (v8 >= v7 >> 1)
        {
          sub_1000B8624(v7 > 1, v8 + 1, 1);
          uint64_t v3 = v17;
        }
        ++v5;
        uint64_t v15 = sub_10001D4B0(0, &qword_1016595D8);
        uint64_t v16 = &off_1015FB600;
        *(void *)&long long v14 = v6;
        v3[2] = v8 + 1;
        sub_10001CEB0(&v14, (uint64_t)&v3[5 * v8 + 4]);
      }
      while (v2 != v5);
    }
    else
    {
      int64_t v9 = (void **)(a1 + 32);
      do
      {
        unint64_t v10 = *v9;
        long long v17 = v3;
        unint64_t v12 = v3[2];
        unint64_t v11 = v3[3];
        id v13 = v10;
        if (v12 >= v11 >> 1)
        {
          sub_1000B8624(v11 > 1, v12 + 1, 1);
          uint64_t v3 = v17;
        }
        uint64_t v15 = sub_10001D4B0(0, &qword_1016595D8);
        uint64_t v16 = &off_1015FB600;
        *(void *)&long long v14 = v13;
        v3[2] = v12 + 1;
        sub_10001CEB0(&v14, (uint64_t)&v3[5 * v12 + 4]);
        ++v9;
        --v2;
      }
      while (v2);
    }
    return (uint64_t)v3;
  }
  __break(1u);
  return result;
}

void *sub_100A9D278(uint64_t a1)
{
  int64_t v1 = *(void *)(a1 + 16);
  uint64_t v2 = _swiftEmptyArrayStorage;
  if (v1)
  {
    int64_t v9 = _swiftEmptyArrayStorage;
    sub_1000B74B8(0, v1, 0);
    uint64_t v2 = _swiftEmptyArrayStorage;
    uint64_t v4 = a1 + 40;
    do
    {
      swift_bridgeObjectRetain();
      swift_dynamicCast();
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        sub_1000B74B8(0, v2[2] + 1, 1);
        uint64_t v2 = v9;
      }
      unint64_t v6 = v2[2];
      unint64_t v5 = v2[3];
      if (v6 >= v5 >> 1)
      {
        sub_1000B74B8(v5 > 1, v6 + 1, 1);
        uint64_t v2 = v9;
      }
      v4 += 16;
      _OWORD v2[2] = v6 + 1;
      sub_100173E4C(&v8, &v2[4 * v6 + 4]);
      --v1;
    }
    while (v1);
  }
  return v2;
}

uint64_t sub_100A9D3A0(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for UUID();
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = __chkstk_darwin(v4);
  char v70 = &v50[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v8 = __chkstk_darwin(v6);
  uint64_t v73 = &v50[-v9];
  __chkstk_darwin(v8);
  unint64_t v11 = &v50[-v10];
  uint64_t v12 = sub_10000588C(&qword_101638CF0);
  uint64_t v13 = __chkstk_darwin(v12 - 8);
  uint64_t v15 = &v50[-((v14 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __chkstk_darwin(v13);
  long long v17 = &v50[-v16];
  uint64_t v18 = *(void *)(a1 + 56);
  uint64_t v51 = a1 + 56;
  uint64_t v19 = 1 << *(unsigned char *)(a1 + 32);
  if (v19 < 64) {
    uint64_t v20 = ~(-1 << v19);
  }
  else {
    uint64_t v20 = -1;
  }
  unint64_t v21 = v20 & v18;
  int64_t v52 = (unint64_t)(v19 + 63) >> 6;
  uint64_t v69 = (void (**)(unsigned char *, uint64_t, uint64_t, uint64_t))(v5 + 56);
  uint64_t v57 = v5 + 48;
  uint64_t v61 = v5 + 32;
  unint64_t v74 = (void (**)(unsigned char *, uint64_t))(v5 + 8);
  uint64_t result = swift_bridgeObjectRetain();
  int64_t v23 = 0;
  long long v53 = xmmword_101342130;
  uint64_t v58 = a1;
  uint64_t v55 = v5;
  uint64_t v56 = a2;
  unint64_t v60 = v11;
  uint64_t v62 = v15;
  unint64_t v54 = v17;
  uint64_t v72 = v5 + 16;
  while (1)
  {
    if (v21)
    {
      uint64_t v25 = v17;
      uint64_t v66 = (v21 - 1) & v21;
      int64_t v67 = v23;
      unint64_t v26 = __clz(__rbit64(v21)) | (v23 << 6);
      goto LABEL_25;
    }
    int64_t v27 = v23 + 1;
    if (__OFADD__(v23, 1))
    {
      __break(1u);
      goto LABEL_38;
    }
    if (v27 >= v52) {
      goto LABEL_35;
    }
    unint64_t v28 = *(void *)(v51 + 8 * v27);
    int64_t v29 = v23 + 1;
    if (!v28)
    {
      int64_t v29 = v23 + 2;
      if (v23 + 2 >= v52) {
        goto LABEL_35;
      }
      unint64_t v28 = *(void *)(v51 + 8 * v29);
      if (!v28)
      {
        int64_t v29 = v23 + 3;
        if (v23 + 3 >= v52) {
          goto LABEL_35;
        }
        unint64_t v28 = *(void *)(v51 + 8 * v29);
        if (!v28)
        {
          int64_t v29 = v23 + 4;
          if (v23 + 4 >= v52) {
            goto LABEL_35;
          }
          unint64_t v28 = *(void *)(v51 + 8 * v29);
          if (!v28) {
            break;
          }
        }
      }
    }
LABEL_24:
    uint64_t v25 = v17;
    uint64_t v66 = (v28 - 1) & v28;
    int64_t v67 = v29;
    unint64_t v26 = __clz(__rbit64(v28)) + (v29 << 6);
LABEL_25:
    uint64_t v31 = *(void *)(v5 + 72);
    uint64_t v32 = *(void (**)(unsigned char *, unint64_t, uint64_t))(v5 + 16);
    v32(v25, *(void *)(a1 + 48) + v31 * v26, v4);
    uint64_t v33 = *(void (**)(unsigned char *, uint64_t, uint64_t, uint64_t))(v5 + 56);
    v33(v25, 0, 1, v4);
    uint64_t v65 = *(unsigned int (**)(unsigned char *, uint64_t, uint64_t))(v5 + 48);
    if (v65(v25, 1, v4) == 1) {
      return swift_release();
    }
    unint64_t v68 = v33;
    uint64_t v34 = v60;
    uint64_t v59 = *(void (**)(unsigned char *, unsigned char *, uint64_t))(v5 + 32);
    v59(v60, v25, v4);
    sub_10000588C(&qword_10163BC50);
    unint64_t v35 = (*(unsigned __int8 *)(v5 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
    uint64_t v71 = v31;
    uint64_t v36 = swift_allocObject();
    *(_OWORD *)(v36 + 16) = v53;
    uint64_t v64 = v36;
    unint64_t v37 = v36 + v35;
    v32((unsigned char *)(v36 + v35), (unint64_t)v34, v4);
    sub_100B22DA4(&qword_10163BC60, (void (*)(uint64_t))&type metadata accessor for UUID);
    uint64_t v38 = v62;
    uint64_t v39 = Set.init(minimumCapacity:)();
    unint64_t v63 = v37;
    v32(v38, v37, v4);
    v68(v38, 0, 1, v4);
    if (v65(v38, 1, v4) == 1)
    {
      long long v17 = v54;
      uint64_t v24 = v34;
      a1 = v58;
    }
    else
    {
      v59(v73, v38, v4);
      swift_bridgeObjectRetain();
      uint64_t v40 = dispatch thunk of Hashable._rawHashValue(seed:)();
      uint64_t v41 = -1 << *(unsigned char *)(v39 + 32);
      unint64_t v42 = v40 & ~v41;
      if ((*(void *)(v39 + 56 + ((v42 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v42))
      {
        uint64_t v43 = ~v41;
        while (1)
        {
          uint64_t v44 = v70;
          v32(v70, *(void *)(v39 + 48) + v42 * v71, v4);
          sub_100B22DA4((unint64_t *)&qword_10163B8F0, (void (*)(uint64_t))&type metadata accessor for UUID);
          char v45 = dispatch thunk of static Equatable.== infix(_:_:)();
          unint64_t v46 = (uint64_t (*)(unsigned char *, uint64_t))*v74;
          (*v74)(v44, v4);
          if (v45) {
            break;
          }
          unint64_t v42 = (v42 + 1) & v43;
          if (((*(void *)(v39 + 56 + ((v42 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v42) & 1) == 0) {
            goto LABEL_31;
          }
        }
        swift_bridgeObjectRelease();
        v46(v73, v4);
        uint64_t v24 = v60;
      }
      else
      {
LABEL_31:
        swift_bridgeObjectRelease();
        char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
        uint64_t v48 = (uint64_t)v70;
        unint64_t v49 = v73;
        v32(v70, (unint64_t)v73, v4);
        uint64_t v75 = v39;
        sub_100DDDE60(v48, v42, isUniquelyReferenced_nonNull_native);
        uint64_t v39 = v75;
        swift_bridgeObjectRelease();
        (*v74)(v49, v4);
        uint64_t v24 = v60;
      }
      v68(v62, 1, 1, v4);
      a1 = v58;
      long long v17 = v54;
    }
    swift_setDeallocating();
    swift_arrayDestroy();
    swift_deallocClassInstance();
    sub_100DD0C54(&v75, v39);
    swift_bridgeObjectRelease();
    uint64_t result = ((uint64_t (*)(unsigned char *, uint64_t))*v74)(v24, v4);
    uint64_t v5 = v55;
    unint64_t v21 = v66;
    int64_t v23 = v67;
  }
  uint64_t v30 = v23 + 5;
  if (v23 + 5 >= v52)
  {
LABEL_35:
    (*v69)(v17, 1, 1, v4);
    return swift_release();
  }
  unint64_t v28 = *(void *)(v51 + 8 * v30);
  if (v28)
  {
    int64_t v29 = v23 + 5;
    goto LABEL_24;
  }
  while (1)
  {
    int64_t v29 = v30 + 1;
    if (__OFADD__(v30, 1)) {
      break;
    }
    if (v29 >= v52) {
      goto LABEL_35;
    }
    unint64_t v28 = *(void *)(v51 + 8 * v29);
    ++v30;
    if (v28) {
      goto LABEL_24;
    }
  }
LABEL_38:
  __break(1u);
  return result;
}

uint64_t sub_100A9DB34@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = sub_10000588C(&qword_101649E40);
  __chkstk_darwin(v2 - 8);
  uint64_t v4 = &v29[-((v3 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v5 = type metadata accessor for URL();
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v7 = __chkstk_darwin(v5);
  uint64_t v9 = &v29[-((v8 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __chkstk_darwin(v7);
  unint64_t v11 = &v29[-v10];
  if (qword_1016371D8 != -1) {
    swift_once();
  }
  uint64_t v31 = 0x7365547265646E75;
  unint64_t v32 = 0xE900000000000074;
  SynchronousCache.cachedValue<A>(key:computeBlock:)();
  swift_bridgeObjectRelease();
  if (v30)
  {
    id v12 = [objc_allocWithZone((Class)NSProcessInfo) init];
    unsigned int v13 = [v12 processIdentifier];

    uint64_t v31 = 0;
    unint64_t v32 = 0xE000000000000000;
    _StringGuts.grow(_:)(31);
    uint64_t v14 = NSTemporaryDirectory();
    uint64_t v15 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    unint64_t v17 = v16;
    swift_bridgeObjectRelease();

    uint64_t v31 = v15;
    unint64_t v32 = v17;
    v18._countAndFlagsBits = 0x2D7473657463782FLL;
    v18._object = (void *)0xE800000000000000;
    String.append(_:)(v18);
    unsigned int v30 = v13;
    v19._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v19);
    swift_bridgeObjectRelease();
    v20._object = (void *)0x8000000101409010;
    v20._countAndFlagsBits = 0xD000000000000011;
    String.append(_:)(v20);
    if (qword_101636F70 != -1) {
      swift_once();
    }
    uint64_t v21 = type metadata accessor for UUID();
    sub_100010324(v21, (uint64_t)qword_1016586D0);
    sub_100B22DA4((unint64_t *)&qword_101638B10, (void (*)(uint64_t))&type metadata accessor for UUID);
    v22._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v22);
    swift_bridgeObjectRelease();
    URL.init(fileURLWithPath:isDirectory:)();
    return swift_bridgeObjectRelease();
  }
  else
  {
    id v24 = [self defaultManager];
    uint64_t v25 = 1;
    id v26 = [v24 URLsForDirectory:5 inDomains:1];

    uint64_t v27 = static Array._unconditionallyBridgeFromObjectiveC(_:)();
    if (*(void *)(v27 + 16))
    {
      (*(void (**)(unsigned char *, unint64_t, uint64_t))(v6 + 16))(v4, v27 + ((*(unsigned __int8 *)(v6 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80)), v5);
      uint64_t v25 = 0;
    }
    (*(void (**)(unsigned char *, uint64_t, uint64_t, uint64_t))(v6 + 56))(v4, v25, 1, v5);
    swift_bridgeObjectRelease();
    if ((*(unsigned int (**)(unsigned char *, uint64_t, uint64_t))(v6 + 48))(v4, 1, v5) == 1)
    {
      sub_10001DAB4((uint64_t)v4, &qword_101649E40);
      uint64_t result = _assertionFailure(_:_:file:line:flags:)();
      __break(1u);
    }
    else
    {
      unint64_t v28 = *(uint64_t (**)(uint64_t, unsigned char *, uint64_t))(v6 + 32);
      v28((uint64_t)v11, v4, v5);
      URL.appendingPathComponent(_:isDirectory:)();
      (*(void (**)(unsigned char *, uint64_t))(v6 + 8))(v11, v5);
      return v28(a1, v9, v5);
    }
  }
  return result;
}

void *sub_100A9E050(uint64_t a1)
{
  uint64_t v16 = type metadata accessor for UUID();
  uint64_t v3 = *(void *)(v16 - 8);
  __chkstk_darwin(v16);
  uint64_t v5 = (char *)&v15 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  int64_t v6 = *(void *)(a1 + 16);
  uint64_t v7 = _swiftEmptyArrayStorage;
  if (v6)
  {
    uint64_t v15 = v1;
    unint64_t v17 = _swiftEmptyArrayStorage;
    sub_1000B7034(0, v6, 0);
    uint64_t v7 = v17;
    uint64_t v8 = (void *)(a1 + 32);
    do
    {
      uint64_t v10 = v8[3];
      uint64_t v9 = v8[4];
      sub_10001CD44(v8, v10);
      (*(void (**)(uint64_t))(*(void *)(*(void *)(v9 + 8) + 8) + 32))(v10);
      char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      unint64_t v17 = v7;
      if ((isUniquelyReferenced_nonNull_native & 1) == 0)
      {
        sub_1000B7034(0, v7[2] + 1, 1);
        uint64_t v7 = v17;
      }
      unint64_t v13 = v7[2];
      unint64_t v12 = v7[3];
      if (v13 >= v12 >> 1)
      {
        sub_1000B7034(v12 > 1, v13 + 1, 1);
        uint64_t v7 = v17;
      }
      v7[2] = v13 + 1;
      (*(void (**)(unint64_t, char *, uint64_t))(v3 + 32))((unint64_t)v7+ ((*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80))+ *(void *)(v3 + 72) * v13, v5, v16);
      unint64_t v17 = v7;
      v8 += 5;
      --v6;
    }
    while (v6);
  }
  return v7;
}

void *sub_100A9E234(uint64_t a1)
{
  uint64_t v3 = type metadata accessor for UUID();
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  int64_t v6 = (char *)v15 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  int64_t v7 = *(void *)(a1 + 16);
  uint64_t v8 = _swiftEmptyArrayStorage;
  if (v7)
  {
    v15[0] = v1;
    Swift::String v18 = _swiftEmptyArrayStorage;
    sub_1000B7034(0, v7, 0);
    uint64_t v8 = v18;
    uint64_t v9 = *(void *)(type metadata accessor for BeaconKeyManager.IndexInformation(0) - 8);
    uint64_t v10 = a1 + ((*(unsigned __int8 *)(v9 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80));
    uint64_t v17 = *(void *)(v9 + 72);
    unint64_t v11 = *(void (**)(char *, uint64_t, uint64_t))(v4 + 16);
    v15[1] = v4 + 32;
    uint64_t v16 = v11;
    do
    {
      v16(v6, v10, v3);
      Swift::String v18 = v8;
      unint64_t v13 = v8[2];
      unint64_t v12 = v8[3];
      if (v13 >= v12 >> 1)
      {
        sub_1000B7034(v12 > 1, v13 + 1, 1);
        uint64_t v8 = v18;
      }
      v8[2] = v13 + 1;
      (*(void (**)(unint64_t, char *, uint64_t))(v4 + 32))((unint64_t)v8+ ((*(unsigned __int8 *)(v4 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80))+ *(void *)(v4 + 72) * v13, v6, v3);
      v10 += v17;
      --v7;
    }
    while (v7);
  }
  return v8;
}

uint64_t sub_100A9E43C@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = type metadata accessor for Date();
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  uint64_t v5 = (char *)&v22 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = sub_10000588C((uint64_t *)&unk_10163AC90);
  __chkstk_darwin(v6 - 8);
  uint64_t v8 = (char *)&v22 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  id v9 = [self sharedInstance];
  unsigned int v10 = [v9 isInternalBuild];

  if (!v10) {
    return static Date.trustedNow.getter(a1);
  }
  id v11 = [self standardUserDefaults];
  NSString v12 = String._bridgeToObjectiveC()();
  id v13 = [v11 stringForKey:v12];

  if (!v13) {
    return static Date.trustedNow.getter(a1);
  }
  id v14 = [objc_allocWithZone((Class)NSISO8601DateFormatter) init];
  id v15 = [v14 dateFromString:v13];

  if (!v15)
  {
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v3 + 56))(v8, 1, 1, v2);
    goto LABEL_9;
  }
  static Date._unconditionallyBridgeFromObjectiveC(_:)();

  uint64_t v16 = *(void (**)(char *, char *, uint64_t))(v3 + 32);
  v16(v8, v5, v2);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v3 + 56))(v8, 0, 1, v2);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v3 + 48))(v8, 1, v2) == 1)
  {
LABEL_9:
    sub_10001DAB4((uint64_t)v8, (uint64_t *)&unk_10163AC90);
    return static Date.trustedNow.getter(a1);
  }
  v16((char *)a1, v8, v2);
  static os_log_type_t.error.getter();
  if (qword_101637260 != -1) {
    swift_once();
  }
  sub_10000588C((uint64_t *)&unk_10163AD00);
  uint64_t v17 = swift_allocObject();
  *(_OWORD *)(v17 + 16) = xmmword_101342130;
  sub_100B22DA4((unint64_t *)&qword_101638DA0, (void (*)(uint64_t))&type metadata accessor for Date);
  uint64_t v18 = dispatch thunk of CustomStringConvertible.description.getter();
  uint64_t v20 = v19;
  *(void *)(v17 + 56) = &type metadata for String;
  *(void *)(v17 + 64) = sub_10000B4CC();
  *(void *)(v17 + 32) = v18;
  *(void *)(v17 + 40) = v20;
  os_log(_:dso:log:_:_:)();
  return swift_bridgeObjectRelease();
}

uint64_t sub_100A9E7EC(uint64_t a1)
{
  uint64_t v2 = sub_10000588C(&qword_10164DBB0);
  __chkstk_darwin(v2 - 8);
  uint64_t v4 = (char *)&v18 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = sub_1011587C4((uint64_t)&off_10159F410);
  char v6 = sub_100DC6050(a1, v5);
  swift_bridgeObjectRelease();
  if (qword_101636F50 != -1) {
    swift_once();
  }
  uint64_t v7 = type metadata accessor for Logger();
  sub_100010324(v7, (uint64_t)qword_10170E9E8);
  uint64_t v8 = Logger.logObject.getter();
  os_log_type_t v9 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v8, v9))
  {
    uint64_t v10 = swift_slowAlloc();
    *(_DWORD *)uint64_t v10 = 134218240;
    uint64_t v18 = a1;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v10 + 12) = 1024;
    LODWORD(v18) = v6 & 1;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl((void *)&_mh_execute_header, v8, v9, "Posting SPBeaconsChangedNotification for reason %ld, bypass rate-limit %{BOOL}d", (uint8_t *)v10, 0x12u);
    swift_slowDealloc();
  }

  dispatch thunk of DarwinNotificationHelper.post(bypassRateLimit:)();
  uint64_t v11 = sub_1011587C4((uint64_t)&off_10159F440);
  char v12 = sub_100DC6050(a1, v11);
  swift_bridgeObjectRelease();
  if (v12) {
    sub_100B30768();
  }
  uint64_t v13 = sub_1011587C4((uint64_t)&off_10159F468);
  char v14 = sub_100DC6050(a1, v13);
  uint64_t result = swift_bridgeObjectRelease();
  if (v14)
  {
    type metadata accessor for Transaction();
    uint64_t result = static Transaction.asyncTask(name:block:)();
  }
  if (a1 == 7)
  {
    uint64_t v16 = type metadata accessor for TaskPriority();
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v16 - 8) + 56))(v4, 1, 1, v16);
    uint64_t v17 = swift_allocObject();
    *(void *)(v17 + 16) = 0;
    *(void *)(v17 + 24) = 0;
    sub_1008F5E44((uint64_t)v4, (uint64_t)&unk_101659198, v17);
    return swift_release();
  }
  return result;
}

uint64_t sub_100A9EAD8()
{
  uint64_t v1 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v16 = *(void *)(v1 - 8);
  __chkstk_darwin(v1);
  uint64_t v3 = (char *)&v14 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = type metadata accessor for DispatchQoS();
  uint64_t v4 = *(void *)(v15 - 8);
  __chkstk_darwin(v15);
  char v6 = (char *)&v14 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for DispatchQoS.QoSClass();
  uint64_t v8 = *(void *)(v7 - 8);
  __chkstk_darwin(v7);
  uint64_t v10 = (char *)&v14 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10001D4B0(0, (unint64_t *)&qword_1016376E0);
  (*(void (**)(char *, void, uint64_t))(v8 + 104))(v10, enum case for DispatchQoS.QoSClass.default(_:), v7);
  uint64_t v11 = (void *)static OS_dispatch_queue.global(qos:)();
  (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v7);
  aBlock[4] = sub_100B52A78;
  uint64_t v19 = v0;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_1004B5480;
  aBlock[3] = &unk_1015E78B8;
  char v12 = _Block_copy(aBlock);
  swift_retain();
  static DispatchQoS.unspecified.getter();
  uint64_t v17 = _swiftEmptyArrayStorage;
  sub_100B22DA4((unint64_t *)&qword_10163B7E0, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
  sub_10000588C((uint64_t *)&unk_10163F350);
  sub_100062734((unint64_t *)&qword_10163B7F0, (uint64_t *)&unk_10163F350);
  dispatch thunk of SetAlgebra.init<A>(_:)();
  OS_dispatch_queue.async(group:qos:flags:execute:)();
  _Block_release(v12);

  (*(void (**)(char *, uint64_t))(v16 + 8))(v3, v1);
  (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v15);
  swift_release();
  type metadata accessor for Transaction();
  return static Transaction.asyncTask(name:block:)();
}

uint64_t sub_100A9EE98()
{
  uint64_t v1 = sub_100AD4584();
  uint64_t result = sub_100B308A8();
  if (v1 > 0 != (result & 1))
  {
    static os_log_type_t.default.getter();
    if (qword_101637260 != -1) {
      swift_once();
    }
    char v3 = v1 > 0;
    sub_10000588C((uint64_t *)&unk_10163AD00);
    uint64_t v4 = swift_allocObject();
    *(_OWORD *)(v4 + 16) = xmmword_101347BA0;
    char v5 = sub_100B308A8();
    *(void *)(v4 + 56) = &type metadata for Bool;
    *(void *)(v4 + 64) = &protocol witness table for Bool;
    *(unsigned char *)(v4 + 32) = v5 & 1;
    *(void *)(v4 + 96) = &type metadata for Bool;
    *(void *)(v4 + 104) = &protocol witness table for Bool;
    *(unsigned char *)(v4 + 72) = v3;
    os_log(_:dso:log:_:_:)();
    swift_bridgeObjectRelease();
    sub_100B30B88(v3);
    uint64_t result = CurrentValueSubject.send(_:)();
  }
  char v6 = *(void (**)(uint64_t))(v0 + OBJC_IVAR____TtC12searchpartyd11BeaconStore_beaconStoreChanged);
  if (v6)
  {
    swift_retain();
    v6(v0);
    return sub_1000A1534((uint64_t)v6);
  }
  return result;
}

BOOL sub_100A9F008()
{
  return (dispatch thunk of static Comparable.< infix(_:_:)() & 1) == 0;
}

uint64_t sub_100A9F094(id *a1, uint64_t a2)
{
  uint64_t v3 = v2;
  uint64_t v65 = sub_10000588C((uint64_t *)&unk_10165C700);
  __chkstk_darwin(v65);
  uint64_t v66 = (uint64_t)v61 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = sub_10000588C((uint64_t *)&unk_10163AC90);
  uint64_t v8 = __chkstk_darwin(v7 - 8);
  uint64_t v64 = (uint64_t)v61 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = __chkstk_darwin(v8);
  uint64_t v63 = (uint64_t)v61 - v11;
  __chkstk_darwin(v10);
  uint64_t v67 = (uint64_t)v61 - v12;
  uint64_t v13 = type metadata accessor for Date();
  uint64_t v71 = *(void *)(v13 - 8);
  __chkstk_darwin(v13);
  uint64_t v15 = (char *)v61 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = type metadata accessor for UUID();
  uint64_t v17 = *(void *)(v16 - 8);
  __chkstk_darwin(v16);
  uint64_t v19 = (char *)v61 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v20 = (int *)type metadata accessor for ShareRecord();
  __chkstk_darwin(v20);
  uint64_t v22 = (char *)v61 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100B30D0C(a2, (uint64_t)v22, (uint64_t (*)(void))type metadata accessor for ShareRecord);
  id v69 = [*a1 encryptedValues];
  uint64_t ObjectType = swift_getObjectType();
  (*(void (**)(char *, uint64_t, uint64_t))(v17 + 16))(v19, v3 + v20[6], v16);
  sub_100B22DA4((unint64_t *)&qword_10163B8F0, (void (*)(uint64_t))&type metadata accessor for UUID);
  LOBYTE(a1) = dispatch thunk of static Equatable.== infix(_:_:)();
  (*(void (**)(char *, uint64_t))(v17 + 8))(v19, v16);
  if ((a1 & 1) == 0)
  {
    uint64_t v23 = UUID.uuidString.getter();
    *((void *)&v73 + 1) = &type metadata for String;
    unint64_t v74 = &protocol witness table for String;
    *(void *)&long long v72 = v23;
    *((void *)&v72 + 1) = v24;
    CKRecordKeyValueSetting.subscript.setter();
  }
  uint64_t v25 = v20[7];
  uint64_t v70 = v3;
  uint64_t v26 = v71;
  uint64_t v27 = *(void (**)(char *, uint64_t, uint64_t))(v71 + 16);
  v27(v15, v3 + v25, v13);
  unint64_t v28 = &v22[v20[7]];
  v61[1] = sub_100B22DA4(&qword_10163AFA0, (void (*)(uint64_t))&type metadata accessor for Date);
  char v29 = dispatch thunk of static Equatable.== infix(_:_:)();
  uint64_t v62 = *(void (**)(char *, uint64_t))(v26 + 8);
  v62(v15, v13);
  if ((v29 & 1) == 0)
  {
    *((void *)&v73 + 1) = v13;
    unint64_t v74 = &protocol witness table for Date;
    unsigned int v30 = sub_10001D958((uint64_t *)&v72);
    v27((char *)v30, (uint64_t)v28, v13);
    CKRecordKeyValueSetting.subscript.setter();
  }
  uint64_t v31 = v67;
  sub_10001D074(v70 + v20[8], v67, (uint64_t *)&unk_10163AC90);
  uint64_t v32 = (uint64_t)&v22[v20[8]];
  uint64_t v33 = v66;
  uint64_t v34 = v66 + *(int *)(v65 + 48);
  sub_10001D074(v31, v66, (uint64_t *)&unk_10163AC90);
  uint64_t v65 = v32;
  sub_10001D074(v32, v34, (uint64_t *)&unk_10163AC90);
  unint64_t v35 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v71 + 48);
  if (v35(v33, 1, v13) == 1)
  {
    sub_10001DAB4(v31, (uint64_t *)&unk_10163AC90);
    if (v35(v34, 1, v13) == 1)
    {
      sub_10001DAB4(v33, (uint64_t *)&unk_10163AC90);
      uint64_t v36 = v70;
      goto LABEL_16;
    }
  }
  else
  {
    uint64_t v37 = v63;
    sub_10001D074(v33, v63, (uint64_t *)&unk_10163AC90);
    if (v35(v34, 1, v13) != 1)
    {
      (*(void (**)(char *, uint64_t, uint64_t))(v71 + 32))(v15, v34, v13);
      char v38 = dispatch thunk of static Equatable.== infix(_:_:)();
      uint64_t v39 = v15;
      uint64_t v40 = (void (*)(uint64_t, uint64_t))v62;
      v62(v39, v13);
      sub_10001DAB4(v67, (uint64_t *)&unk_10163AC90);
      v40(v37, v13);
      sub_10001DAB4(v66, (uint64_t *)&unk_10163AC90);
      uint64_t v36 = v70;
      if (v38) {
        goto LABEL_16;
      }
      goto LABEL_12;
    }
    sub_10001DAB4(v67, (uint64_t *)&unk_10163AC90);
    v62((char *)v37, v13);
  }
  sub_10001DAB4(v33, (uint64_t *)&unk_10165C700);
  uint64_t v36 = v70;
LABEL_12:
  uint64_t v41 = v64;
  sub_10001D074(v65, v64, (uint64_t *)&unk_10163AC90);
  if (v35(v41, 1, v13) == 1)
  {
    sub_10001DAB4(v41, (uint64_t *)&unk_10163AC90);
    long long v72 = 0u;
    long long v73 = 0u;
    unint64_t v74 = 0;
  }
  else
  {
    *((void *)&v73 + 1) = v13;
    unint64_t v74 = &protocol witness table for Date;
    unint64_t v42 = sub_10001D958((uint64_t *)&v72);
    (*(void (**)(uint64_t *, uint64_t, uint64_t))(v71 + 32))(v42, v41, v13);
  }
  CKRecordKeyValueSetting.subscript.setter();
LABEL_16:
  uint64_t v43 = v20[9];
  int v44 = *(unsigned __int8 *)(v36 + v43);
  uint64_t v46 = *(void *)(v36 + v43 + 8);
  uint64_t v45 = *(void *)(v36 + v43 + 16);
  uint64_t v47 = &v22[v43];
  if (v44 != *v47
    || (v46 != *((void *)v47 + 1) || v45 != *((void *)v47 + 2))
    && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
  {
    *((void *)&v73 + 1) = &type metadata for String;
    unint64_t v74 = &protocol witness table for String;
    *(void *)&long long v72 = v46;
    *((void *)&v72 + 1) = v45;
    swift_bridgeObjectRetain();
    CKRecordKeyValueSetting.subscript.setter();
  }
  uint64_t v48 = v20[10];
  uint64_t v49 = *(void *)(v36 + v48);
  uint64_t v50 = *(void *)(v36 + v48 + 8);
  uint64_t v51 = &v22[v48];
  uint64_t v53 = *(void *)v51;
  uint64_t v52 = *((void *)v51 + 1);
  if ((v49 != *(void *)v51 || v50 != v52) && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
  {
    *((void *)&v73 + 1) = &type metadata for String;
    unint64_t v74 = &protocol witness table for String;
    *(void *)&long long v72 = v53;
    *((void *)&v72 + 1) = v52;
    swift_bridgeObjectRetain();
    CKRecordKeyValueSetting.subscript.setter();
  }
  uint64_t v54 = v20[11];
  uint64_t v55 = *(void *)(v36 + v54);
  uint64_t v56 = *(void *)&v22[v54];
  if (v55 != v56)
  {
    *((void *)&v73 + 1) = &type metadata for UInt64;
    unint64_t v74 = &protocol witness table for UInt64;
    *(void *)&long long v72 = v56;
    CKRecordKeyValueSetting.subscript.setter();
  }
  uint64_t v57 = v20[12];
  int v58 = *(unsigned __int8 *)(v36 + v57);
  uint64_t v59 = v22[v57];
  if (v58 == v59)
  {
    sub_100B310AC((uint64_t)v22, (uint64_t (*)(void))type metadata accessor for ShareRecord);
    return swift_unknownObjectRelease();
  }
  else
  {
    *((void *)&v73 + 1) = &type metadata for Int;
    unint64_t v74 = &protocol witness table for Int;
    *(void *)&long long v72 = v59;
    CKRecordKeyValueSetting.subscript.setter();
    swift_unknownObjectRelease();
    return sub_100B310AC((uint64_t)v22, (uint64_t (*)(void))type metadata accessor for ShareRecord);
  }
}

BOOL sub_100A9F998(uint64_t (*a1)(char *), uint64_t a2, uint64_t a3)
{
  uint64_t v4 = v3;
  char v38 = a1;
  uint64_t v39 = type metadata accessor for UUID();
  uint64_t v6 = *(void *)(v39 - 8);
  __chkstk_darwin(v39);
  uint64_t v8 = (char *)v29 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = sub_10000588C(&qword_101638CF0);
  __chkstk_darwin(v9 - 8);
  uint64_t v11 = (char *)v29 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = *(void *)(a3 + 16);
  if (v12)
  {
    uint64_t v14 = *(void (**)(char *, uint64_t, uint64_t))(v6 + 16);
    uint64_t v13 = v6 + 16;
    uint64_t v37 = v14;
    uint64_t v15 = a3 + ((*(unsigned __int8 *)(v13 + 64) + 32) & ~(unint64_t)*(unsigned __int8 *)(v13 + 64));
    uint64_t v16 = *(void *)(v13 + 56);
    uint64_t v34 = v8;
    unint64_t v35 = (uint64_t (**)(char *, uint64_t, uint64_t))(v13 + 32);
    uint64_t v31 = v16;
    uint64_t v32 = (void (**)(char *))(v13 + 16);
    uint64_t v33 = (void (**)(char *, uint64_t))(v13 - 8);
    v29[2] = a3;
    swift_bridgeObjectRetain();
    uint64_t v36 = (void (**)(char *, uint64_t, uint64_t, uint64_t))(v13 + 40);
    v29[1] = (v13 + 40) & 0xFFFFFFFFFFFFLL | 0xA0D1000000000000;
    while (1)
    {
      uint64_t v17 = v39;
      uint64_t v18 = v13;
      v37(v11, v15, v39);
      uint64_t v19 = *v36;
      (*v36)(v11, 0, 1, v17);
      int v20 = (*v35)(v11, 1, v17);
      BOOL v21 = v20 != 1;
      if (v20 == 1) {
        break;
      }
      unsigned int v30 = v19;
      uint64_t v22 = v11;
      uint64_t v23 = v34;
      uint64_t v24 = v22;
      (*v32)(v34);
      char v25 = v38(v23);
      if (v4)
      {
        (*v33)(v23, v17);
        swift_bridgeObjectRelease();
        return v21;
      }
      char v26 = v25;
      (*v33)(v23, v17);
      if (v26) {
        break;
      }
      v15 += v31;
      --v12;
      uint64_t v4 = 0;
      uint64_t v13 = v18;
      uint64_t v11 = v24;
      if (!v12)
      {
        v30(v24, 1, 1, v39);
        goto LABEL_9;
      }
    }
  }
  else
  {
    uint64_t v27 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v6 + 56);
    swift_bridgeObjectRetain();
    v27(v11, 1, 1, v39);
LABEL_9:
    BOOL v21 = 0;
  }
  swift_bridgeObjectRelease();
  return v21;
}

uint64_t sub_100A9FC78(uint64_t (*a1)(char *), uint64_t a2, uint64_t a3)
{
  uint64_t v6 = a3 + 64;
  uint64_t v7 = 1 << *(unsigned char *)(a3 + 32);
  uint64_t v8 = -1;
  if (v7 < 64) {
    uint64_t v8 = ~(-1 << v7);
  }
  unint64_t v9 = v8 & *(void *)(a3 + 64);
  int64_t v10 = (unint64_t)(v7 + 63) >> 6;
  uint64_t result = swift_bridgeObjectRetain();
  int64_t v12 = 0;
  while (1)
  {
    if (v9)
    {
      unint64_t v13 = __clz(__rbit64(v9));
      v9 &= v9 - 1;
      unint64_t v14 = v13 | (v12 << 6);
      goto LABEL_19;
    }
    if (__OFADD__(v12++, 1)) {
      break;
    }
    if (v12 >= v10) {
      goto LABEL_27;
    }
    unint64_t v16 = *(void *)(v6 + 8 * v12);
    if (!v16)
    {
      int64_t v17 = v12 + 1;
      if (v12 + 1 >= v10) {
        goto LABEL_27;
      }
      unint64_t v16 = *(void *)(v6 + 8 * v17);
      if (!v16)
      {
        int64_t v17 = v12 + 2;
        if (v12 + 2 >= v10) {
          goto LABEL_27;
        }
        unint64_t v16 = *(void *)(v6 + 8 * v17);
        if (!v16)
        {
          int64_t v17 = v12 + 3;
          if (v12 + 3 >= v10) {
            goto LABEL_27;
          }
          unint64_t v16 = *(void *)(v6 + 8 * v17);
          if (!v16)
          {
            int64_t v17 = v12 + 4;
            if (v12 + 4 >= v10)
            {
LABEL_27:
              swift_release();
              char v18 = 0;
              return v18 & 1;
            }
            unint64_t v16 = *(void *)(v6 + 8 * v17);
            if (!v16)
            {
              while (1)
              {
                int64_t v12 = v17 + 1;
                if (__OFADD__(v17, 1)) {
                  goto LABEL_30;
                }
                if (v12 >= v10) {
                  goto LABEL_27;
                }
                unint64_t v16 = *(void *)(v6 + 8 * v12);
                ++v17;
                if (v16) {
                  goto LABEL_18;
                }
              }
            }
          }
        }
      }
      int64_t v12 = v17;
    }
LABEL_18:
    unint64_t v9 = (v16 - 1) & v16;
    unint64_t v14 = __clz(__rbit64(v16)) + (v12 << 6);
LABEL_19:
    char v19 = *(unsigned char *)(*(void *)(a3 + 56) + v14);
    uint64_t result = a1(&v19);
    if (v3)
    {
      swift_release();
      return v18 & 1;
    }
    if (result)
    {
      swift_release();
      char v18 = 1;
      return v18 & 1;
    }
  }
  __break(1u);
LABEL_30:
  __break(1u);
  return result;
}

uint64_t sub_100A9FE20@<X0>(long long *a1@<X0>, void *a2@<X1>, _OWORD *a3@<X8>)
{
  uint64_t v66 = a1;
  uint64_t v70 = a3;
  uint64_t v4 = type metadata accessor for Date();
  uint64_t v67 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v6 = (char *)&v57 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = sub_10000588C(&qword_101638CF0);
  __chkstk_darwin(v7 - 8);
  unint64_t v9 = (char *)&v57 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = type metadata accessor for UUID();
  uint64_t v68 = *(void *)(v10 - 8);
  __chkstk_darwin(v10);
  int64_t v12 = (char *)&v57 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = type metadata accessor for StableIdentifier();
  uint64_t v14 = __chkstk_darwin(v13);
  unint64_t v16 = (char *)&v57 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v14);
  char v18 = (uint64_t *)((char *)&v57 - v17);
  id v19 = [a2 systemVersion];
  if (!v19) {
    goto LABEL_20;
  }
  int v20 = v19;
  uint64_t v65 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v69 = v21;

  if ((uint64_t)[a2 vendorId] < 1
    || (uint64_t)[a2 productId] < 1
    || (id v22 = [a2 ecid]) == 0)
  {
LABEL_19:
    swift_bridgeObjectRelease();
LABEL_20:
    static os_log_type_t.error.getter();
    if (qword_1016372A8 != -1) {
      swift_once();
    }
    os_log(_:dso:log:_:_:)();
    uint64_t v50 = type metadata accessor for OwnedBeaconRecord();
    uint64_t v51 = *(uint64_t (**)(_OWORD *, uint64_t, uint64_t, uint64_t))(*(void *)(v50 - 8) + 56);
    uint64_t v52 = v50;
    uint64_t v53 = v70;
    goto LABEL_23;
  }
  uint64_t v23 = v22;
  uint64_t v63 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
  unint64_t v64 = v24;

  id v25 = [a2 chipId];
  if (!v25)
  {
LABEL_18:
    sub_10001CFB8(v63, v64);
    goto LABEL_19;
  }
  char v26 = v25;
  uint64_t v61 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
  unint64_t v62 = v27;

  id v28 = [a2 serialNumber];
  if (!v28)
  {
    sub_10001CFB8(v61, v62);
    goto LABEL_18;
  }
  char v29 = v28;
  uint64_t v58 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  unint64_t v60 = v30;

  uint64_t v31 = Data.hexString.getter();
  uint64_t v33 = HIBYTE(v32) & 0xF;
  unint64_t v59 = v32;
  if ((v32 & 0x2000000000000000) == 0) {
    uint64_t v33 = v31 & 0xFFFFFFFFFFFFLL;
  }
  if (v33)
  {
    uint64_t v34 = v31;
    uint64_t v35 = Data.hexString.getter();
    uint64_t v37 = HIBYTE(v36) & 0xF;
    if ((v36 & 0x2000000000000000) == 0) {
      uint64_t v37 = v35 & 0xFFFFFFFFFFFFLL;
    }
    if (v37)
    {
      unint64_t v38 = v60;
      uint64_t v39 = HIBYTE(v60) & 0xF;
      uint64_t v40 = v58;
      if ((v60 & 0x2000000000000000) == 0) {
        uint64_t v39 = v58 & 0xFFFFFFFFFFFFLL;
      }
      if (v39)
      {
        uint64_t v41 = v59;
        *char v18 = v34;
        v18[1] = v41;
        void v18[2] = v35;
        v18[3] = v36;
        v18[4] = v40;
        v18[5] = v38;
        swift_storeEnumTagMultiPayload();
        UUID.init()();
        sub_100B30D0C((uint64_t)v18, (uint64_t)v16, (uint64_t (*)(void))type metadata accessor for StableIdentifier);
        (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v68 + 56))(v9, 1, 1, v10);
        sub_100A9E43C((uint64_t)v6);
        unint64_t v42 = v66;
        long long v75 = v66[2];
        sub_10001D608((uint64_t)(v66 + 3), (uint64_t)v74, &qword_10163A138);
        sub_10001D608((uint64_t)(v42 + 4), (uint64_t)v73, &qword_10163A138);
        long long v43 = *v42;
        long long v71 = v42[1];
        long long v72 = v43;
        sub_100061E54((uint64_t)&v75);
        sub_100091B38((uint64_t)v74);
        sub_100091B38((uint64_t)v73);
        sub_100061E54((uint64_t)&v72);
        sub_100061E54((uint64_t)&v71);
        uint64_t v66 = (long long *)[a2 vendorId];
        unint64_t v60 = (unint64_t)[a2 productId];
        LODWORD(v59) = sub_1012D6614((unint64_t)[a2 batteryLevel]);
        unsigned __int8 v44 = [a2 isZeus];
        sub_10001CFB8(v63, v64);
        sub_10001CFB8(v61, v62);
        sub_100B310AC((uint64_t)v18, (uint64_t (*)(void))type metadata accessor for StableIdentifier);
        uint64_t v45 = (char *)v70;
        *uint64_t v70 = xmmword_101348180;
        uint64_t v46 = (int *)type metadata accessor for OwnedBeaconRecord();
        (*(void (**)(char *, char *, uint64_t))(v68 + 32))(&v45[v46[5]], v12, v10);
        sub_100B30DB4((uint64_t)v16, (uint64_t)&v45[v46[6]], (uint64_t (*)(void))type metadata accessor for StableIdentifier);
        sub_10001D608((uint64_t)v9, (uint64_t)&v45[v46[7]], &qword_101638CF0);
        (*(void (**)(char *, char *, uint64_t))(v67 + 32))(&v45[v46[8]], v6, v4);
        *(_OWORD *)&v45[v46[9]] = v75;
        sub_10001D608((uint64_t)v74, (uint64_t)&v45[v46[10]], &qword_10163A138);
        sub_10001D608((uint64_t)v73, (uint64_t)&v45[v46[11]], &qword_10163A138);
        *(_OWORD *)&v45[v46[12]] = v72;
        *(_OWORD *)&v45[v46[13]] = v71;
        uint64_t v47 = &v45[v46[14]];
        *(void *)uint64_t v47 = 0;
        *((void *)v47 + 1) = 0xE000000000000000;
        uint64_t v48 = (uint64_t *)&v45[v46[15]];
        *uint64_t v48 = v65;
        v48[1] = v69;
        *(void *)&v45[v46[16]] = v66;
        *(void *)&v45[v46[17]] = v60;
        v45[v46[18]] = 3;
        v45[v46[19]] = v59;
        v45[v46[20]] = v44;
        return (*(uint64_t (**)(char *, void, uint64_t, int *))(*((void *)v46 - 1) + 56))(v45, 0, 1, v46);
      }
      unint64_t v60 = v36;
      uint64_t v54 = v70;
    }
    else
    {
      uint64_t v54 = v70;
    }
    swift_bridgeObjectRelease();
    uint64_t v55 = v61;
  }
  else
  {
    uint64_t v54 = v70;
    uint64_t v55 = v61;
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  static os_log_type_t.error.getter();
  if (qword_1016372A8 != -1) {
    swift_once();
  }
  os_log(_:dso:log:_:_:)();
  sub_10001CFB8(v63, v64);
  sub_10001CFB8(v55, v62);
  uint64_t v56 = type metadata accessor for OwnedBeaconRecord();
  uint64_t v51 = *(uint64_t (**)(_OWORD *, uint64_t, uint64_t, uint64_t))(*(void *)(v56 - 8) + 56);
  uint64_t v52 = v56;
  uint64_t v53 = v54;
LABEL_23:

  return v51(v53, 1, 1, v52);
}

uint64_t sub_100AA0654(uint64_t a1, void *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v236 = a4;
  uint64_t v235 = a3;
  uint64_t v7 = type metadata accessor for OwnedBeaconRecord();
  uint64_t v8 = v7 - 8;
  uint64_t v226 = *(void *)(v7 - 8);
  __chkstk_darwin(v7);
  uint64_t v227 = v9;
  uint64_t v228 = (uint64_t)&v210 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = type metadata accessor for BeaconProductInfoRecord();
  __chkstk_darwin(v10 - 8);
  uint64_t v215 = (uint64_t)&v210 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = sub_10000588C((uint64_t *)&unk_10166BFA0);
  __chkstk_darwin(v12 - 8);
  uint64_t v218 = (uint64_t)&v210 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v217 = type metadata accessor for AccessoryProductInfo();
  uint64_t v216 = *(void *)(v217 - 8);
  uint64_t v14 = __chkstk_darwin(v217);
  uint64_t v212 = (uint64_t)&v210 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v14);
  uint64_t v214 = (uint64_t)&v210 - v16;
  uint64_t v239 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v240 = *(void *)(v239 - 8);
  __chkstk_darwin(v239);
  v237 = (char *)&v210 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v241 = type metadata accessor for DispatchQoS();
  uint64_t v242 = *(void *)(v241 - 8);
  __chkstk_darwin(v241);
  v238 = (char *)&v210 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v251 = type metadata accessor for DispatchTime();
  uint64_t v253 = *(void *)(v251 - 8);
  uint64_t v19 = __chkstk_darwin(v251);
  v249 = ((char *)&v210 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0));
  __chkstk_darwin(v19);
  v250 = ((char *)&v210 - v21);
  v248 = (int *)type metadata accessor for KeySyncMetadata();
  uint64_t v222 = *((void *)v248 - 1);
  uint64_t v22 = __chkstk_darwin(v248);
  uint64_t v229 = (uint64_t)&v210 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v223 = v23;
  __chkstk_darwin(v22);
  uint64_t v260 = (uint64_t)&v210 - v24;
  uint64_t v244 = type metadata accessor for KeyAlignmentRecord();
  uint64_t v219 = *(void *)(v244 - 8);
  uint64_t v25 = __chkstk_darwin(v244);
  uint64_t v221 = (uint64_t)&v210 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v220 = v26;
  __chkstk_darwin(v25);
  v261 = (long long *)((char *)&v210 - v27);
  id v28 = (int *)type metadata accessor for BeaconNamingRecord();
  uint64_t v245 = *((void *)v28 - 1);
  uint64_t v29 = __chkstk_darwin(v28);
  uint64_t v247 = (uint64_t)&v210 - ((v30 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v246 = v30;
  __chkstk_darwin(v29);
  v265 = (char *)&v210 - v31;
  uint64_t v256 = type metadata accessor for Date();
  uint64_t v257 = *(void *)(v256 - 8);
  __chkstk_darwin(v256);
  uint64_t v33 = (char *)&v210 - ((v32 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v34 = type metadata accessor for UUID();
  uint64_t v35 = __chkstk_darwin(v34);
  v213 = (char *)&v210 - ((v36 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v37 = __chkstk_darwin(v35);
  uint64_t v39 = (char *)&v210 - v38;
  uint64_t v40 = __chkstk_darwin(v37);
  v232 = (char *)&v210 - v41;
  uint64_t v42 = __chkstk_darwin(v40);
  v234 = (char *)&v210 - v43;
  uint64_t v44 = __chkstk_darwin(v42);
  v259 = (char *)&v210 - v45;
  uint64_t v46 = __chkstk_darwin(v44);
  v258 = (void (*)(unint64_t, char *, uint64_t))((char *)&v210 - v47);
  uint64_t v230 = v48;
  __chkstk_darwin(v46);
  uint64_t v49 = *(int *)(v8 + 28);
  uint64_t v231 = a1;
  uint64_t v50 = a1 + v49;
  uint64_t v262 = v51;
  uint64_t v52 = *(void (**)(void))(v51 + 16);
  v267 = (char *)&v210 - v53;
  uint64_t v224 = v50;
  v263 = v52;
  uint64_t v264 = v51 + 16;
  v52();
  v255 = v33;
  sub_100A9E43C((uint64_t)v33);
  if (a2[2]) {
    uint64_t v54 = a2[2];
  }
  else {
    uint64_t v54 = SPBeaconRoleIdUndefined;
  }
  if (qword_101636CD8 != -1) {
    swift_once();
  }
  uint64_t v55 = 0;
  OS_dispatch_queue.sync<A>(execute:)();
  uint64_t v56 = sub_1010AB754((uint64_t)aBlock);
  swift_bridgeObjectRelease();
  unint64_t v57 = a2[4];
  uint64_t v254 = v34;
  uint64_t v225 = 0;
  v233 = a2;
  v211 = v39;
  if (v57 && v54 == SPBeaconRoleIdOther)
  {
    uint64_t v58 = (int *)a2[3];
    goto LABEL_27;
  }
  int64_t v59 = *(void *)(v56 + 16);
  if (!v59)
  {
    swift_bridgeObjectRelease();
    unint64_t v62 = _swiftEmptyArrayStorage;
    if (_swiftEmptyArrayStorage[2]) {
      goto LABEL_26;
    }
LABEL_44:
    swift_bridgeObjectRelease();
    v243 = 0;
    unint64_t v57 = 0xE000000000000000;
    goto LABEL_28;
  }
  v243 = v28;
  uint64_t aBlock = _swiftEmptyArrayStorage;
  unint64_t v60 = v56;
  sub_1000B76FC(0, v59, 0);
  uint64_t v61 = 0;
  unint64_t v62 = aBlock;
  v210 = v60;
  uint64_t v63 = v60 + 4;
  *(void *)&long long v266 = v60 + 4;
  do
  {
    Class isa = v63[4 * v61 + 3].isa;
    uint64_t v65 = *((void *)isa + 2);
    if (!v65) {
      goto LABEL_19;
    }
    if (*((void *)isa + 4) != v54)
    {
      if (v65 != 1)
      {
        uint64_t v66 = (unint64_t *)((char *)isa + 104);
        uint64_t v70 = 1;
        while (1)
        {
          uint64_t v71 = v70 + 1;
          if (__OFADD__(v70, 1)) {
            break;
          }
          if (*(v66 - 4) == v54)
          {
            uint64_t v69 = (uint64_t *)(v66 - 3);
            uint64_t v68 = (id *)(v66 - 2);
            uint64_t v67 = v66 - 1;
            goto LABEL_21;
          }
          v66 += 5;
          ++v70;
          if (v71 == v65) {
            goto LABEL_19;
          }
        }
        __break(1u);
        goto LABEL_58;
      }
LABEL_19:
      unint64_t v72 = 0;
      unint64_t v4 = 0xE000000000000000;
      uint64_t v55 = 0x4E206D6F74737543;
      unint64_t v60 = 0xEB00000000656D61;
      goto LABEL_22;
    }
    uint64_t v66 = (unint64_t *)((char *)isa + 64);
    uint64_t v67 = (unint64_t *)((char *)isa + 56);
    uint64_t v68 = (id *)((char *)isa + 48);
    uint64_t v69 = (uint64_t *)((char *)isa + 40);
LABEL_21:
    unint64_t v72 = *v67;
    uint64_t v55 = *v69;
    unint64_t v4 = *v66;
    unint64_t v60 = *v68;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    uint64_t v63 = v266;
LABEL_22:
    uint64_t aBlock = v62;
    unint64_t v74 = v62[2];
    unint64_t v73 = v62[3];
    if (v74 >= v73 >> 1)
    {
      sub_1000B76FC(v73 > 1, v74 + 1, 1);
      uint64_t v63 = v266;
      unint64_t v62 = aBlock;
    }
    ++v61;
    v62[2] = v74 + 1;
    long long v75 = &v62[5 * v74];
    v75[4] = v54;
    v75[5] = v55;
    v75[6] = v60;
    v75[7] = v72;
    v75[8] = v4;
  }
  while (v61 != v59);
  swift_bridgeObjectRelease();
  uint64_t v34 = v254;
  a2 = v233;
  id v28 = v243;
  if (!v62[2]) {
    goto LABEL_44;
  }
LABEL_26:
  uint64_t v58 = (int *)v62[7];
  unint64_t v57 = v62[8];
LABEL_27:
  v243 = v58;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
LABEL_28:
  UUID.init()();
  ((void (*)(char *, char *, uint64_t))v263)(v259, v267, v34);
  if (a2[1])
  {
    uint64_t v76 = *a2;
    unint64_t v77 = a2[1];
  }
  else
  {
    uint64_t v76 = 0;
    unint64_t v77 = 0xE000000000000000;
  }
  long long v266 = xmmword_101348180;
  uint64_t v78 = v265;
  *(_OWORD *)v265 = xmmword_101348180;
  uint64_t v79 = (char *)(v262 + 32);
  uint64_t v80 = *(void (**)(char *, char *, uint64_t))(v262 + 32);
  v80(&v78[v28[5]], (char *)v258, v34);
  uint64_t v81 = &v78[v28[6]];
  uint64_t v82 = v259;
  v259 = v79;
  v258 = (void (*)(unint64_t, char *, uint64_t))v80;
  v80(v81, v82, v34);
  *(void *)&v78[v28[7]] = v54;
  uint64_t v83 = &v78[v28[8]];
  *(void *)uint64_t v83 = v76;
  *((void *)v83 + 1) = v77;
  uint64_t v84 = (int **)&v78[v28[9]];
  *uint64_t v84 = v243;
  v84[1] = (int *)v57;
  uint64_t v85 = (int *)v244;
  uint64_t v86 = v261;
  swift_bridgeObjectRetain();
  UUID.init()();
  uint64_t v87 = v267;
  uint64_t v88 = v263;
  ((void (*)(char *, char *, uint64_t))v263)((char *)v86 + v85[6], v267, v34);
  uint64_t v89 = *(void (**)(char *, char *, uint64_t))(v257 + 16);
  uint64_t v90 = v34;
  uint64_t v91 = v255;
  uint64_t v92 = v256;
  v89((char *)v86 + v85[8], v255, v256);
  long long *v86 = v266;
  *(void *)((char *)v86 + v85[7]) = 1;
  uint64_t v93 = v260;
  ((void (*)(uint64_t, char *, uint64_t))v88)(v260, v87, v90);
  uint64_t v94 = v248;
  uint64_t v95 = (void *)(v93 + v248[6]);
  v95[3] = &type metadata for PrimaryIndex;
  v95[4] = sub_1001A1640();
  *uint64_t v95 = 1;
  v89((char *)(v93 + v94[7]), v91, v92);
  *(unsigned char *)(v93 + v94[5]) = 1;
  uint64_t v96 = swift_allocObject();
  *(void *)(v96 + 16) = 0;
  uint64_t v97 = (uint64_t *)(v96 + 16);
  uint64_t v98 = dispatch_group_create();
  dispatch_group_enter(v98);
  uint64_t v99 = v265;
  uint64_t v100 = v247;
  sub_100B30D0C((uint64_t)v265, v247, (uint64_t (*)(void))type metadata accessor for BeaconNamingRecord);
  unint64_t v101 = (*(unsigned __int8 *)(v245 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v245 + 80);
  unint64_t v102 = (v246 + v101 + 7) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v103 = swift_allocObject();
  *(void *)(v103 + 16) = v98;
  sub_100B30DB4(v100, v103 + v101, (uint64_t (*)(void))type metadata accessor for BeaconNamingRecord);
  *(void *)(v103 + v102) = v96;
  uint64_t v104 = v98;
  swift_retain();
  uint64_t v105 = v252;
  sub_100ABBA30((uint64_t)v99, 0, (uint64_t)sub_100B56CEC, v103);
  swift_release();
  uint64_t v106 = v249;
  static DispatchTime.now()();
  uint64_t v107 = v250;
  + infix(_:_:)();
  uint64_t v109 = v253 + 8;
  uint64_t v108 = *(void (**)(NSObject *, uint64_t))(v253 + 8);
  uint64_t v110 = v251;
  v108(v106, v251);
  OS_dispatch_group.wait(timeout:)();
  v108(v107, v110);
  if (static DispatchTimeoutResult.== infix(_:_:)())
  {
    *(void *)&long long v266 = v96;
    if (qword_101637310 != -1) {
      swift_once();
    }
    uint64_t v111 = type metadata accessor for Logger();
    sub_100010324(v111, (uint64_t)qword_10170F068);
    uint64_t v112 = v234;
    uint64_t v113 = v254;
    ((void (*)(char *, char *, uint64_t))v263)(v234, v267, v254);
    uint64_t v114 = Logger.logObject.getter();
    os_log_type_t v115 = static os_log_type_t.error.getter();
    BOOL v116 = os_log_type_enabled(v114, v115);
    v248 = (int *)v104;
    if (v116)
    {
      unint64_t v117 = v112;
      uint64_t v118 = swift_slowAlloc();
      uint64_t aBlock = (void *)swift_slowAlloc();
      *(_DWORD *)uint64_t v118 = 141558275;
      uint64_t v275 = 1752392040;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v118 + 12) = 2081;
      sub_100B22DA4((unint64_t *)&qword_101638B10, (void (*)(uint64_t))&type metadata accessor for UUID);
      uint64_t v119 = dispatch thunk of CustomStringConvertible.description.getter();
      uint64_t v275 = sub_1008FA0F0(v119, v120, (uint64_t *)&aBlock);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      unint64_t v121 = *(void (**)(char *, uint64_t))(v262 + 8);
      v121(v117, v113);
      _os_log_impl((void *)&_mh_execute_header, v114, v115, "Timed out saving beacon naming record for beacon %{private,mask.hash}s", (uint8_t *)v118, 0x16u);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      unint64_t v121 = *(void (**)(char *, uint64_t))(v262 + 8);
      v121(v112, v113);
    }

    uint64_t v129 = swift_allocObject();
    uint64_t v130 = v236;
    *(void *)(v129 + 16) = v235;
    *(void *)(v129 + 24) = v130;
    v273 = sub_100B576C4;
    v274 = (void *)v129;
    uint64_t aBlock = _NSConcreteStackBlock;
    uint64_t v270 = 1107296256;
    v271 = sub_1004B5480;
    v272 = &unk_1015E8218;
    v131 = _Block_copy(&aBlock);
    swift_retain();
    v132 = v238;
    static DispatchQoS.unspecified.getter();
    uint64_t v275 = (uint64_t)_swiftEmptyArrayStorage;
    sub_100B22DA4((unint64_t *)&qword_10163B7E0, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
    sub_10000588C((uint64_t *)&unk_10163F350);
    sub_100062734((unint64_t *)&qword_10163B7F0, (uint64_t *)&unk_10163F350);
    uint64_t v133 = v237;
    uint64_t v134 = v239;
    dispatch thunk of SetAlgebra.init<A>(_:)();
    OS_dispatch_queue.async(group:qos:flags:execute:)();
    _Block_release(v131);

    (*(void (**)(char *, uint64_t))(v240 + 8))(v133, v134);
    (*(void (**)(char *, uint64_t))(v242 + 8))(v132, v241);
    sub_100B310AC(v260, (uint64_t (*)(void))type metadata accessor for KeySyncMetadata);
    sub_100B310AC((uint64_t)v261, (uint64_t (*)(void))type metadata accessor for KeyAlignmentRecord);
    sub_100B310AC((uint64_t)v265, (uint64_t (*)(void))type metadata accessor for BeaconNamingRecord);
    (*(void (**)(char *, uint64_t))(v257 + 8))(v255, v256);
    unint64_t v135 = v267;
    uint64_t v136 = v113;
    goto LABEL_40;
  }
  swift_beginAccess();
  uint64_t v122 = *v97;
  if (*v97)
  {
    uint64_t v123 = (void *)swift_allocObject();
    uint64_t v124 = v236;
    v123[2] = v235;
    v123[3] = v124;
    v123[4] = v122;
    v273 = sub_100B576A4;
    v274 = v123;
    uint64_t aBlock = _NSConcreteStackBlock;
    uint64_t v270 = 1107296256;
    v271 = sub_1004B5480;
    v272 = &unk_1015E81C8;
    unint64_t v125 = _Block_copy(&aBlock);
    swift_errorRetain();
    swift_retain();
    swift_errorRetain();
    uint64_t v126 = v238;
    static DispatchQoS.unspecified.getter();
    uint64_t v268 = (uint64_t)_swiftEmptyArrayStorage;
    sub_100B22DA4((unint64_t *)&qword_10163B7E0, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
    sub_10000588C((uint64_t *)&unk_10163F350);
    sub_100062734((unint64_t *)&qword_10163B7F0, (uint64_t *)&unk_10163F350);
    uint64_t v127 = v237;
    uint64_t v128 = v239;
    dispatch thunk of SetAlgebra.init<A>(_:)();
    OS_dispatch_queue.async(group:qos:flags:execute:)();
    _Block_release(v125);
    swift_errorRelease();

    (*(void (**)(char *, uint64_t))(v240 + 8))(v127, v128);
    (*(void (**)(char *, uint64_t))(v242 + 8))(v126, v241);
    sub_100B310AC(v260, (uint64_t (*)(void))type metadata accessor for KeySyncMetadata);
    sub_100B310AC((uint64_t)v261, (uint64_t (*)(void))type metadata accessor for KeyAlignmentRecord);
    sub_100B310AC((uint64_t)v265, (uint64_t (*)(void))type metadata accessor for BeaconNamingRecord);
    (*(void (**)(char *, uint64_t))(v257 + 8))(v255, v256);
    (*(void (**)(char *, uint64_t))(v262 + 8))(v267, v254);
    goto LABEL_41;
  }
  uint64_t v253 = v109;
  if (sub_100D1CA38())
  {
    uint64_t v138 = type metadata accessor for PairingConfig();
    uint64_t v139 = v218;
    sub_10001D074((uint64_t)v233 + *(int *)(v138 + 28), v218, (uint64_t *)&unk_10166BFA0);
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v216 + 48))(v139, 1, v217) == 1)
    {
      sub_10001DAB4(v139, (uint64_t *)&unk_10166BFA0);
      static os_log_type_t.error.getter();
      if (qword_101637308 != -1) {
        swift_once();
      }
      os_log(_:dso:log:_:_:)();

      sub_100B310AC(v260, (uint64_t (*)(void))type metadata accessor for KeySyncMetadata);
      sub_100B310AC((uint64_t)v261, (uint64_t (*)(void))type metadata accessor for KeyAlignmentRecord);
      sub_100B310AC((uint64_t)v265, (uint64_t (*)(void))type metadata accessor for BeaconNamingRecord);
      (*(void (**)(char *, uint64_t))(v257 + 8))(v255, v256);
      (*(void (**)(char *, uint64_t))(v262 + 8))(v267, v254);
      return swift_release();
    }
    uint64_t v140 = v139;
    uint64_t v141 = v214;
    sub_100B30DB4(v140, v214, (uint64_t (*)(void))type metadata accessor for AccessoryProductInfo);
    uint64_t v142 = v212;
    sub_100B30D0C(v141, v212, (uint64_t (*)(void))type metadata accessor for AccessoryProductInfo);
    uint64_t v143 = (uint64_t)v232;
    ((void (*)(char *, char *, uint64_t))v263)(v232, v267, v254);
    uint64_t v144 = v215;
    sub_1008538C8(v142, v143, v215);
    dispatch_group_enter(v104);
    uint64_t v145 = swift_allocObject();
    *(void *)(v145 + 16) = v104;
    *(void *)(v145 + 24) = v96;
    unint64_t v60 = v104;
    swift_retain();
    sub_100D33898(v144, (uint64_t)sub_100B5766C, v145);
    swift_release();
    v146 = v249;
    static DispatchTime.now()();
    v147 = v250;
    + infix(_:_:)();
    uint64_t v148 = v251;
    v108(v146, v251);
    OS_dispatch_group.wait(timeout:)();
    v108(v147, v148);
    if (static DispatchTimeoutResult.== infix(_:_:)())
    {
      if (qword_101637310 != -1) {
        swift_once();
      }
      uint64_t v149 = type metadata accessor for Logger();
      sub_100010324(v149, (uint64_t)qword_10170F068);
      unint64_t v4 = (unint64_t)v211;
      ((void (*)(char *, char *, uint64_t))v263)(v211, v267, v254);
      uint64_t v55 = Logger.logObject.getter();
      os_log_type_t v150 = static os_log_type_t.error.getter();
      BOOL v151 = os_log_type_enabled((os_log_t)v55, v150);
      *(void *)&long long v266 = v96;
      if (v151)
      {
        uint64_t v152 = swift_slowAlloc();
        v153 = (void *)swift_slowAlloc();
        *(_DWORD *)uint64_t v152 = 141558275;
        uint64_t v268 = 1752392040;
        uint64_t aBlock = v153;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        *(_WORD *)(v152 + 12) = 2081;
        sub_100B22DA4((unint64_t *)&qword_101638B10, (void (*)(uint64_t))&type metadata accessor for UUID);
        uint64_t v154 = v254;
        uint64_t v155 = dispatch thunk of CustomStringConvertible.description.getter();
        uint64_t v268 = sub_1008FA0F0(v155, v156, (uint64_t *)&aBlock);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        unint64_t v121 = *(void (**)(char *, uint64_t))(v262 + 8);
        v121((char *)v4, v154);
        _os_log_impl((void *)&_mh_execute_header, (os_log_t)v55, v150, "Timed out saving productInfoRecord for beacon %{private,mask.hash}s", (uint8_t *)v152, 0x16u);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
      }
      else
      {
LABEL_58:
        unint64_t v121 = *(void (**)(char *, uint64_t))(v262 + 8);
        v121((char *)v4, v254);
      }

      uint64_t v164 = swift_allocObject();
      uint64_t v165 = v236;
      *(void *)(v164 + 16) = v235;
      *(void *)(v164 + 24) = v165;
      v273 = sub_100B640FC;
      v274 = (void *)v164;
      uint64_t aBlock = _NSConcreteStackBlock;
      uint64_t v270 = 1107296256;
      v271 = sub_1004B5480;
      v272 = &unk_1015E8178;
      v166 = _Block_copy(&aBlock);
      swift_retain();
      v167 = v238;
      static DispatchQoS.unspecified.getter();
      uint64_t v268 = (uint64_t)_swiftEmptyArrayStorage;
      sub_100B22DA4((unint64_t *)&qword_10163B7E0, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
      sub_10000588C((uint64_t *)&unk_10163F350);
      sub_100062734((unint64_t *)&qword_10163B7F0, (uint64_t *)&unk_10163F350);
      v168 = v237;
      uint64_t v169 = v239;
      dispatch thunk of SetAlgebra.init<A>(_:)();
      OS_dispatch_queue.async(group:qos:flags:execute:)();
      _Block_release(v166);

      (*(void (**)(char *, uint64_t))(v240 + 8))(v168, v169);
      (*(void (**)(char *, uint64_t))(v242 + 8))(v167, v241);
      sub_100B310AC(v215, (uint64_t (*)(void))type metadata accessor for BeaconProductInfoRecord);
      sub_100B310AC(v214, (uint64_t (*)(void))type metadata accessor for AccessoryProductInfo);
      sub_100B310AC(v260, (uint64_t (*)(void))type metadata accessor for KeySyncMetadata);
      sub_100B310AC((uint64_t)v261, (uint64_t (*)(void))type metadata accessor for KeyAlignmentRecord);
      sub_100B310AC((uint64_t)v265, (uint64_t (*)(void))type metadata accessor for BeaconNamingRecord);
      (*(void (**)(char *, uint64_t))(v257 + 8))(v255, v256);
      unint64_t v135 = v267;
      uint64_t v136 = v254;
LABEL_40:
      v121(v135, v136);
      goto LABEL_41;
    }
    uint64_t v157 = *v97;
    if (v157)
    {
      v158 = (void *)swift_allocObject();
      uint64_t v159 = v236;
      v158[2] = v235;
      v158[3] = v159;
      v158[4] = v157;
      v273 = sub_100B6443C;
      v274 = v158;
      uint64_t aBlock = _NSConcreteStackBlock;
      uint64_t v270 = 1107296256;
      v271 = sub_1004B5480;
      v272 = &unk_1015E8128;
      v160 = _Block_copy(&aBlock);
      swift_errorRetain();
      swift_retain();
      swift_errorRetain();
      v161 = v238;
      static DispatchQoS.unspecified.getter();
      uint64_t v268 = (uint64_t)_swiftEmptyArrayStorage;
      sub_100B22DA4((unint64_t *)&qword_10163B7E0, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
      sub_10000588C((uint64_t *)&unk_10163F350);
      sub_100062734((unint64_t *)&qword_10163B7F0, (uint64_t *)&unk_10163F350);
      v162 = v237;
      uint64_t v163 = v239;
      dispatch thunk of SetAlgebra.init<A>(_:)();
      OS_dispatch_queue.async(group:qos:flags:execute:)();
      _Block_release(v160);
      swift_errorRelease();

      (*(void (**)(char *, uint64_t))(v240 + 8))(v162, v163);
      (*(void (**)(char *, uint64_t))(v242 + 8))(v161, v241);
      sub_100B310AC(v215, (uint64_t (*)(void))type metadata accessor for BeaconProductInfoRecord);
      sub_100B310AC(v214, (uint64_t (*)(void))type metadata accessor for AccessoryProductInfo);
      sub_100B310AC(v260, (uint64_t (*)(void))type metadata accessor for KeySyncMetadata);
      sub_100B310AC((uint64_t)v261, (uint64_t (*)(void))type metadata accessor for KeyAlignmentRecord);
      sub_100B310AC((uint64_t)v265, (uint64_t (*)(void))type metadata accessor for BeaconNamingRecord);
      (*(void (**)(char *, uint64_t))(v257 + 8))(v255, v256);
      (*(void (**)(char *, uint64_t))(v262 + 8))(v267, v254);
LABEL_41:
      swift_release();
      return swift_release();
    }
    sub_100B310AC(v215, (uint64_t (*)(void))type metadata accessor for BeaconProductInfoRecord);
    sub_100B310AC(v214, (uint64_t (*)(void))type metadata accessor for AccessoryProductInfo);
  }
  dispatch_group_enter(v104);
  uint64_t v170 = v221;
  sub_100B30D0C((uint64_t)v261, v221, (uint64_t (*)(void))type metadata accessor for KeyAlignmentRecord);
  sub_100B30D0C(v260, v229, (uint64_t (*)(void))type metadata accessor for KeySyncMetadata);
  ((void (*)(char *, char *, uint64_t))v263)(v232, v267, v254);
  unint64_t v171 = (*(unsigned __int8 *)(v219 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v219 + 80);
  unint64_t v172 = (v220 + *(unsigned __int8 *)(v222 + 80) + v171) & ~(unint64_t)*(unsigned __int8 *)(v222 + 80);
  unint64_t v173 = (v223 + *(unsigned __int8 *)(v262 + 80) + v172) & ~(unint64_t)*(unsigned __int8 *)(v262 + 80);
  uint64_t v247 = *(unsigned __int8 *)(v262 + 80);
  unint64_t v174 = (v230 + v173 + 7) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v175 = swift_allocObject();
  *(void *)(v175 + 16) = v104;
  *(void *)(v175 + 24) = v105;
  uint64_t v176 = v175 + v171;
  uint64_t v177 = v231;
  sub_100B30DB4(v170, v176, (uint64_t (*)(void))type metadata accessor for KeyAlignmentRecord);
  sub_100B30DB4(v229, v175 + v172, (uint64_t (*)(void))type metadata accessor for KeySyncMetadata);
  v258(v175 + v173, v232, v254);
  *(void *)(v175 + v174) = v96;
  v178 = v104;
  swift_retain();
  swift_retain();
  sub_100ABC198(v177, 0, (uint64_t)sub_100B5705C, v175);
  swift_release();
  v179 = v249;
  static DispatchTime.now()();
  v180 = v250;
  + infix(_:_:)();
  uint64_t v181 = v251;
  v108(v179, v251);
  v249 = v178;
  OS_dispatch_group.wait(timeout:)();
  v108(v180, v181);
  char v182 = static DispatchTimeoutResult.== infix(_:_:)();
  *(void *)&long long v266 = v96;
  if (v182)
  {
    if (qword_101637310 != -1) {
      swift_once();
    }
    uint64_t v183 = type metadata accessor for Logger();
    sub_100010324(v183, (uint64_t)qword_10170F068);
    v184 = v213;
    uint64_t v185 = v254;
    ((void (*)(char *, char *, uint64_t))v263)(v213, v267, v254);
    v186 = Logger.logObject.getter();
    os_log_type_t v187 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v186, v187))
    {
      uint64_t v188 = swift_slowAlloc();
      v189 = (void *)swift_slowAlloc();
      *(_DWORD *)uint64_t v188 = 141558275;
      uint64_t v268 = 1752392040;
      uint64_t aBlock = v189;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v188 + 12) = 2081;
      sub_100B22DA4((unint64_t *)&qword_101638B10, (void (*)(uint64_t))&type metadata accessor for UUID);
      uint64_t v190 = dispatch thunk of CustomStringConvertible.description.getter();
      uint64_t v268 = sub_1008FA0F0(v190, v191, (uint64_t *)&aBlock);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      (*(void (**)(char *, uint64_t))(v262 + 8))(v184, v185);
      _os_log_impl((void *)&_mh_execute_header, v186, v187, "Timed out saving new beacon %{private,mask.hash}s", (uint8_t *)v188, 0x16u);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      (*(void (**)(char *, uint64_t))(v262 + 8))(v184, v185);
    }

    uint64_t v177 = v231;
  }
  uint64_t v192 = v247;
  uint64_t v251 = ~v247;
  static os_log_type_t.default.getter();
  if (qword_101637260 != -1) {
    swift_once();
  }
  sub_10000588C((uint64_t *)&unk_10163AD00);
  uint64_t v193 = swift_allocObject();
  *(_OWORD *)(v193 + 16) = xmmword_101342130;
  uint64_t v194 = UUID.uuidString.getter();
  uint64_t v196 = v195;
  *(void *)(v193 + 56) = &type metadata for String;
  *(void *)(v193 + 64) = sub_10000B4CC();
  *(void *)(v193 + 32) = v194;
  *(void *)(v193 + 40) = v196;
  os_log(_:dso:log:_:_:)();
  swift_bridgeObjectRelease();
  uint64_t v253 = *(void *)(v252 + 128);
  v197 = v232;
  uint64_t v198 = v254;
  ((void (*)(char *, char *, uint64_t))v263)(v232, v267, v254);
  uint64_t v199 = v228;
  sub_100B30D0C(v177, v228, (uint64_t (*)(void))type metadata accessor for OwnedBeaconRecord);
  uint64_t v200 = (v192 + 40) & v251;
  unint64_t v201 = (v200 + v230 + *(unsigned __int8 *)(v226 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v226 + 80);
  v202 = (void *)swift_allocObject();
  uint64_t v203 = v235;
  v202[2] = v266;
  v202[3] = v203;
  v202[4] = v236;
  v258((unint64_t)v202 + v200, v197, v198);
  sub_100B30DB4(v199, (uint64_t)v202 + v201, (uint64_t (*)(void))type metadata accessor for OwnedBeaconRecord);
  v273 = sub_100B57594;
  v274 = v202;
  uint64_t aBlock = _NSConcreteStackBlock;
  uint64_t v270 = 1107296256;
  v271 = sub_1004B5480;
  v272 = &unk_1015E80B0;
  v204 = _Block_copy(&aBlock);
  swift_retain();
  swift_retain();
  v205 = v238;
  static DispatchQoS.unspecified.getter();
  uint64_t v268 = (uint64_t)_swiftEmptyArrayStorage;
  sub_100B22DA4((unint64_t *)&qword_10163B7E0, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
  sub_10000588C((uint64_t *)&unk_10163F350);
  sub_100062734((unint64_t *)&qword_10163B7F0, (uint64_t *)&unk_10163F350);
  v206 = v237;
  uint64_t v207 = v239;
  dispatch thunk of SetAlgebra.init<A>(_:)();
  OS_dispatch_queue.async(group:qos:flags:execute:)();
  _Block_release(v204);
  (*(void (**)(char *, uint64_t))(v240 + 8))(v206, v207);
  (*(void (**)(char *, uint64_t))(v242 + 8))(v205, v241);
  swift_release();
  uint64_t v208 = v225;
  QueueSynchronizer.conditionalSync<A>(_:)();
  sub_100A9E7EC(3);
  sub_100AACCCC();
  dispatch thunk of DarwinNotificationHelper.post(bypassRateLimit:)();
  if (v208) {
    swift_errorRelease();
  }
  v209 = v249;
  type metadata accessor for Transaction();
  static Transaction.asyncTask(name:block:)();
  static Transaction.named<A>(_:with:)();

  sub_100B310AC(v260, (uint64_t (*)(void))type metadata accessor for KeySyncMetadata);
  sub_100B310AC((uint64_t)v261, (uint64_t (*)(void))type metadata accessor for KeyAlignmentRecord);
  sub_100B310AC((uint64_t)v265, (uint64_t (*)(void))type metadata accessor for BeaconNamingRecord);
  (*(void (**)(char *, uint64_t))(v257 + 8))(v255, v256);
  (*(void (**)(char *, uint64_t))(v262 + 8))(v267, v254);
  return swift_release();
}

uint64_t sub_100AA3034()
{
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for DispatchPredicate();
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  uint64_t v5 = (NSObject **)((char *)v21 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0));
  if (qword_101636F50 != -1) {
    swift_once();
  }
  uint64_t v6 = type metadata accessor for Logger();
  sub_100010324(v6, (uint64_t)qword_10170E9E8);
  uint64_t v7 = Logger.logObject.getter();
  os_log_type_t v8 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v7, v8))
  {
    uint64_t v9 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v9 = 0;
    _os_log_impl((void *)&_mh_execute_header, v7, v8, "Attempting to purge beacon store files.", v9, 2u);
    swift_slowDealloc();
  }

  uint64_t v10 = *(uint64_t **)(v1 + 160);
  v21[1] = v1;
  uint64_t v11 = sub_100AB24F0();
  uint64_t v12 = v10[2];
  uint64_t v13 = (void *)swift_allocObject();
  v13[2] = v10;
  v13[3] = sub_100B7039C;
  v13[4] = 0;
  uint64_t v14 = swift_allocObject();
  *(void *)(v14 + 16) = sub_100B59DD8;
  *(void *)(v14 + 24) = v13;
  aBlock[4] = sub_100132424;
  void aBlock[5] = v14;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_1000A70B0;
  aBlock[3] = &unk_1015E8600;
  uint64_t v15 = _Block_copy(aBlock);
  swift_retain();
  swift_retain();
  swift_release();
  dispatch_sync(v12, v15);
  _Block_release(v15);
  LOBYTE(v15) = swift_isEscapingClosureAtFileLocation();
  uint64_t result = swift_release();
  if (v15)
  {
    __break(1u);
  }
  else
  {
    *uint64_t v5 = v12;
    (*(void (**)(NSObject **, void, uint64_t))(v3 + 104))(v5, enum case for DispatchPredicate.notOnQueue(_:), v2);
    uint64_t v17 = v12;
    char v18 = _dispatchPreconditionTest(_:)();
    uint64_t result = (*(uint64_t (**)(NSObject **, uint64_t))(v3 + 8))(v5, v2);
    if (v18)
    {
      uint64_t v19 = dispatch_group_create();
      dispatch_group_enter(v19);
      swift_retain();
      uint64_t v20 = v19;
      sub_101021028(0, v11, v10, v20);
      swift_release();
      swift_release();
      swift_release();

      return QueueSynchronizer.conditionalSync<A>(_:)();
    }
  }
  __break(1u);
  return result;
}

uint64_t sub_100AA33CC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = v2;
  uint64_t v85 = type metadata accessor for StableIdentifier();
  __chkstk_darwin(v85);
  uint64_t v7 = (char *)&v75 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v77 = type metadata accessor for OwnedBeaconGroup(0);
  uint64_t v8 = __chkstk_darwin(v77);
  uint64_t v76 = (uint64_t)&v75 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8);
  uint64_t v79 = (uint64_t)&v75 - v10;
  uint64_t v11 = type metadata accessor for URL();
  unint64_t v12 = *(void *)(v11 - 8);
  uint64_t v99 = v11;
  unint64_t v100 = v12;
  __chkstk_darwin(v11);
  uint64_t v98 = (char *)&v75 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v97 = sub_10000588C(&qword_10163BBB0);
  __chkstk_darwin(v97);
  uint64_t v96 = (char *)&v75 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = type metadata accessor for BeaconProductInfoRecord();
  uint64_t v88 = *(unsigned int (***)(uint64_t, uint64_t, uint64_t))(v15 - 8);
  __chkstk_darwin(v15);
  uint64_t v82 = (uint64_t)&v75 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v17 = type metadata accessor for OwnedBeaconRecord();
  uint64_t v18 = *(void *)(v17 - 8);
  __chkstk_darwin(v17);
  uint64_t v20 = (char *)&v75 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v80 = a1;
  uint64_t v21 = sub_1004D1434();
  swift_retain();
  uint64_t v22 = sub_100B33F6C(v21, v3);
  swift_release();
  swift_bridgeObjectRelease();
  uint64_t v84 = v22[2];
  if (!v84)
  {
    swift_bridgeObjectRelease();
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v18 + 56))(a2, 1, 1, v17);
  }
  uint64_t v78 = a2;
  unint64_t v23 = 0;
  uint64_t v92 = (char *)v22 + ((*(unsigned __int8 *)(v18 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v18 + 80));
  uint64_t v91 = *(void *)(v3 + 160);
  uint64_t v81 = v7 + 8;
  uint64_t v89 = (void (**)(char *, uint64_t))(v100 + 8);
  uint64_t v90 = (void (**)(char *, uint64_t, uint64_t))(v100 + 16);
  uint64_t v87 = (void *)0x8000000101402BA0;
  v88 += 6;
  uint64_t v94 = v20;
  uint64_t v95 = v17;
  uint64_t v86 = v18;
  uint64_t v83 = v7;
  uint64_t v93 = v22;
  while (2)
  {
    if (v23 < v22[2])
    {
      uint64_t v24 = v15;
      uint64_t v25 = *(void *)(v18 + 72);
      unint64_t v100 = v23;
      sub_100B30D0C((uint64_t)&v92[v25 * v23], (uint64_t)v20, (uint64_t (*)(void))type metadata accessor for OwnedBeaconRecord);
      uint64_t v26 = *(int *)(v17 + 20);
      if (qword_101636D10 != -1) {
        swift_once();
      }
      uint64_t v27 = v99;
      uint64_t v28 = sub_100010324(v99, (uint64_t)qword_10170E3E8);
      uint64_t v29 = v98;
      (*v90)(v98, v28, v27);
      v30._countAndFlagsBits = 0xD000000000000014;
      v30._object = v87;
      prohibitAsyncContext(functionName:)(v30);
      v102[0] = v24;
      sub_10000588C(&qword_101659208);
      uint64_t v31 = String.init<A>(describing:)();
      uint64_t v33 = v32;
      __chkstk_darwin(v34);
      *(&v75 - 6) = v35;
      *(&v75 - 5) = (uint64_t)&v20[v26];
      *(&v75 - 4) = (uint64_t)v29;
      *(&v75 - 3) = v31;
      *(&v75 - 2) = v33;
      uint64_t v36 = (uint64_t)v96;
      OS_dispatch_queue.sync<A>(execute:)();
      swift_bridgeObjectRelease();
      uint64_t v37 = v27;
      uint64_t v15 = v24;
      (*v89)(v29, v37);
      if ((*v88)(v36, 1, v24) == 1)
      {
        sub_10001DAB4(v36, &qword_10163BBB0);
        uint64_t v20 = v94;
        uint64_t v17 = v95;
        uint64_t v22 = v93;
        unint64_t v38 = v100;
        goto LABEL_21;
      }
      uint64_t v39 = v82;
      sub_100B30DB4(v36, v82, (uint64_t (*)(void))type metadata accessor for BeaconProductInfoRecord);
      uint64_t v40 = *(void *)(v39 + *(int *)(v24 + 72));
      uint64_t v20 = v94;
      uint64_t v17 = v95;
      unint64_t v38 = v100;
      if (v40)
      {
        uint64_t v41 = *(void *)(v40 + 16);
        uint64_t v22 = v93;
        if (v41)
        {
          uint64_t v42 = 88;
          uint64_t v43 = 1;
          while (1)
          {
            int v44 = *(unsigned __int8 *)(v40 + v42);
            if (v44 != 2 && (v44 & 1) != 0) {
              break;
            }
            if (v41 == v43) {
              goto LABEL_19;
            }
            v42 += 64;
            if (__OFADD__(v43++, 1))
            {
              __break(1u);
              goto LABEL_42;
            }
          }
          swift_bridgeObjectRetain();
          swift_bridgeObjectRelease();
          if (qword_101636F60 == -1) {
            goto LABEL_28;
          }
          goto LABEL_43;
        }
LABEL_19:
        sub_100B310AC(v39, (uint64_t (*)(void))type metadata accessor for BeaconProductInfoRecord);
      }
      else
      {
        sub_100B310AC(v39, (uint64_t (*)(void))type metadata accessor for BeaconProductInfoRecord);
        uint64_t v22 = v93;
      }
LABEL_21:
      unint64_t v23 = v38 + 1;
      uint64_t v46 = (uint64_t)v83;
      sub_100B30D0C((uint64_t)&v20[*(int *)(v17 + 24)], (uint64_t)v83, (uint64_t (*)(void))type metadata accessor for StableIdentifier);
      switch(swift_getEnumCaseMultiPayload())
      {
        case 2u:
          uint64_t v47 = sub_10000588C(&qword_1016555E0);
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          uint64_t v48 = (unsigned __int8 *)(v46 + *(int *)(v47 + 96));
          int v49 = *v48;
          LODWORD(v100) = v48[1];
          swift_bridgeObjectRelease();
          uint64_t v50 = type metadata accessor for UUID();
          (*(void (**)(uint64_t, uint64_t))(*(void *)(v50 - 8) + 8))(v46, v50);
          if ((v100 & 1) != 0 || v49 != 2) {
            goto LABEL_4;
          }
          goto LABEL_36;
        case 3u:
          uint64_t v51 = sub_10000588C((uint64_t *)&unk_1016565E0);
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          int v52 = *(unsigned __int8 *)(v46 + *(int *)(v51 + 96));
          uint64_t v53 = type metadata accessor for UUID();
          (*(void (**)(uint64_t, uint64_t))(*(void *)(v53 - 8) + 8))(v46, v53);
          if (v52 != 2) {
            goto LABEL_4;
          }
LABEL_36:
          swift_bridgeObjectRelease();
          if (qword_101636F60 != -1) {
            swift_once();
          }
          uint64_t v68 = type metadata accessor for Logger();
          sub_100010324(v68, (uint64_t)qword_10170EA18);
          uint64_t v69 = v76;
          sub_100B30D0C(v80, v76, type metadata accessor for OwnedBeaconGroup);
          uint64_t v70 = Logger.logObject.getter();
          os_log_type_t v71 = static os_log_type_t.default.getter();
          if (os_log_type_enabled(v70, v71))
          {
            uint64_t v72 = swift_slowAlloc();
            v102[0] = swift_slowAlloc();
            *(_DWORD *)uint64_t v72 = 16777987;
            LOBYTE(v101) = 2;
            UnsafeMutableRawBufferPointer.copyMemory(from:)();
            *(_WORD *)(v72 + 5) = 2160;
            uint64_t v101 = 1752392040;
            UnsafeMutableRawBufferPointer.copyMemory(from:)();
            *(_WORD *)(v72 + 15) = 2081;
            type metadata accessor for UUID();
            sub_100B22DA4((unint64_t *)&qword_101638B10, (void (*)(uint64_t))&type metadata accessor for UUID);
            uint64_t v20 = v94;
            uint64_t v73 = dispatch thunk of CustomStringConvertible.description.getter();
            uint64_t v101 = sub_1008FA0F0(v73, v74, v102);
            uint64_t v17 = v95;
            UnsafeMutableRawBufferPointer.copyMemory(from:)();
            swift_bridgeObjectRelease();
            sub_100B310AC(v69, type metadata accessor for OwnedBeaconGroup);
            _os_log_impl((void *)&_mh_execute_header, v70, v71, "AlphaWasp: hardcoding primary part %hhu for group %{private,mask.hash}s.", (uint8_t *)v72, 0x19u);
            swift_arrayDestroy();
            swift_slowDealloc();
            swift_slowDealloc();
          }
          else
          {
            sub_100B310AC(v69, type metadata accessor for OwnedBeaconGroup);
          }

          goto LABEL_33;
        default:
          sub_100B310AC(v46, (uint64_t (*)(void))type metadata accessor for StableIdentifier);
LABEL_4:
          sub_100B310AC((uint64_t)v20, (uint64_t (*)(void))type metadata accessor for OwnedBeaconRecord);
          uint64_t v18 = v86;
          if (v23 != v84) {
            continue;
          }
          swift_bridgeObjectRelease();
          a2 = v78;
          break;
      }
      return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v18 + 56))(a2, 1, 1, v17);
    }
    break;
  }
LABEL_42:
  __break(1u);
LABEL_43:
  swift_once();
LABEL_28:
  uint64_t v54 = type metadata accessor for Logger();
  sub_100010324(v54, (uint64_t)qword_10170EA18);
  uint64_t v55 = v79;
  sub_100B30D0C(v80, v79, type metadata accessor for OwnedBeaconGroup);
  swift_bridgeObjectRetain();
  uint64_t v56 = Logger.logObject.getter();
  os_log_type_t v57 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v56, v57))
  {
    uint64_t v58 = swift_slowAlloc();
    uint64_t v59 = swift_slowAlloc();
    *(_DWORD *)uint64_t v58 = 141558531;
    uint64_t v101 = 1752392040;
    v102[0] = v59;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v58 + 12) = 2081;
    type metadata accessor for UUID();
    sub_100B22DA4((unint64_t *)&qword_101638B10, (void (*)(uint64_t))&type metadata accessor for UUID);
    uint64_t v60 = dispatch thunk of CustomStringConvertible.description.getter();
    uint64_t v101 = sub_1008FA0F0(v60, v61, v102);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    sub_100B310AC(v55, type metadata accessor for OwnedBeaconGroup);
    *(_WORD *)(v58 + 22) = 2080;
    swift_bridgeObjectRetain();
    uint64_t v62 = Array.description.getter();
    unint64_t v64 = v63;
    swift_bridgeObjectRelease();
    uint64_t v101 = sub_1008FA0F0(v62, v64, v102);
    uint64_t v17 = v95;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    uint64_t v20 = v94;
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v56, v57, "Group %{private,mask.hash}s multipart layout template: %s", (uint8_t *)v58, 0x20u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    swift_bridgeObjectRelease_n();

    sub_100B310AC(v55, type metadata accessor for OwnedBeaconGroup);
  }
  sub_100B310AC(v82, (uint64_t (*)(void))type metadata accessor for BeaconProductInfoRecord);
LABEL_33:
  uint64_t v65 = v86;
  uint64_t v66 = v78;
  sub_100B30DB4((uint64_t)v20, v78, (uint64_t (*)(void))type metadata accessor for OwnedBeaconRecord);
  return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(v65 + 56))(v66, 0, 1, v17);
}

uint64_t sub_100AA4198(uint64_t a1)
{
  uint64_t v156 = a1;
  uint64_t v2 = sub_10000588C(&qword_10163D038);
  uint64_t v3 = __chkstk_darwin(v2 - 8);
  uint64_t v157 = (uint64_t)v154 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v3);
  uint64_t v158 = (uint64_t)v154 - v5;
  uint64_t v6 = sub_10000588C(&qword_10163A790);
  uint64_t v170 = *(void *)(v6 - 8);
  uint64_t v7 = __chkstk_darwin(v6);
  uint64_t v155 = (uint64_t)v154 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = __chkstk_darwin(v7);
  uint64_t v171 = (uint64_t)v154 - v10;
  uint64_t v11 = __chkstk_darwin(v9);
  uint64_t v174 = (uint64_t)v154 - v12;
  uint64_t v13 = __chkstk_darwin(v11);
  uint64_t v15 = (char *)v154 - v14;
  uint64_t v16 = __chkstk_darwin(v13);
  uint64_t v178 = (uint64_t)v154 - v17;
  uint64_t v18 = __chkstk_darwin(v16);
  uint64_t v164 = (uint64_t)v154 - v19;
  uint64_t v20 = __chkstk_darwin(v18);
  uint64_t v163 = (uint64_t)v154 - v21;
  uint64_t v22 = __chkstk_darwin(v20);
  uint64_t v24 = (char *)v154 - v23;
  uint64_t v25 = __chkstk_darwin(v22);
  uint64_t v173 = (uint64_t)v154 - v26;
  __chkstk_darwin(v25);
  uint64_t v28 = (char *)v154 - v27;
  v166 = v1;
  uint64_t v29 = *v1;
  v179 = _swiftEmptyArrayStorage;
  uint64_t v30 = *(void *)(v29 + 16);
  uint64_t v31 = swift_bridgeObjectRetain();
  uint64_t v175 = v6;
  uint64_t v176 = v24;
  unint64_t v172 = v15;
  uint64_t v169 = v30;
  if (v30)
  {
    unint64_t v32 = 0;
    uint64_t v33 = _swiftEmptyArrayStorage;
    uint64_t v168 = v31;
    do
    {
      if (v32 >= *(void *)(v31 + 16))
      {
        __break(1u);
LABEL_86:
        __break(1u);
LABEL_87:
        __break(1u);
LABEL_88:
        __break(1u);
LABEL_89:
        __break(1u);
LABEL_90:
        __break(1u);
        goto LABEL_91;
      }
      uint64_t v34 = *(void *)(v170 + 72);
      unint64_t v177 = (*(unsigned __int8 *)(v170 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v170 + 80);
      sub_10001D074(v31 + v177 + v34 * v32, (uint64_t)v28, &qword_10163A790);
      uint64_t v35 = v175;
      uint64_t v36 = &v28[*(int *)(v175 + 40)];
      uint64_t v38 = *((void *)v36 + 3);
      uint64_t v37 = *((void *)v36 + 4);
      sub_10001CD44(v36, v38);
      if ((*(uint64_t (**)(char *, uint64_t, uint64_t))(v37 + 32))(&v28[*(int *)(v35 + 36)], v38, v37))
      {
        sub_10001DAB4((uint64_t)v28, &qword_10163A790);
      }
      else
      {
        sub_10001D608((uint64_t)v28, v173, &qword_10163A790);
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          sub_1000B7980(0, v33[2] + 1, 1);
        }
        uint64_t v33 = v179;
        unint64_t v40 = v179[2];
        unint64_t v39 = v179[3];
        if (v40 >= v39 >> 1)
        {
          sub_1000B7980(v39 > 1, v40 + 1, 1);
          uint64_t v33 = v179;
        }
        v33[2] = v40 + 1;
        sub_10001D608(v173, (uint64_t)v33 + v177 + v40 * v34, &qword_10163A790);
      }
      ++v32;
      uint64_t v31 = v168;
      uint64_t v24 = v176;
    }
    while (v169 != v32);
    uint64_t v41 = v179;
    uint64_t v6 = v175;
    uint64_t v15 = v172;
  }
  else
  {
    uint64_t v41 = _swiftEmptyArrayStorage;
  }
  uint64_t v42 = swift_bridgeObjectRelease();
  __chkstk_darwin(v42);
  uint64_t v43 = v167;
  v154[-2] = v166;
  uint64_t v44 = sub_1000A4650((uint64_t (*)(char *))sub_100B3573C, &v154[-4], (uint64_t)v41);
  v154[1] = v43;
  uint64_t v45 = *(void *)(v44 + 16);
  if (v45)
  {
    uint64_t v46 = *(unsigned __int8 *)(v170 + 80);
    uint64_t v47 = (v46 + 32) & ~v46;
    uint64_t v48 = v44 + v47;
    int v49 = *(void **)(v170 + 72);
    uint64_t v173 = v47;
    uint64_t v165 = v44;
    v166 = v49;
    uint64_t v168 = v46 | 7;
    uint64_t v169 = (uint64_t)v49 + v47;
    swift_bridgeObjectRetain();
    uint64_t v50 = _swiftEmptyDictionarySingleton;
    long long v167 = xmmword_101342130;
    while (1)
    {
      unint64_t v177 = v48;
      sub_10001D074(v48, (uint64_t)v24, &qword_10163A790);
      uint64_t v53 = &v24[*(int *)(v175 + 40)];
      uint64_t v54 = *((void *)v53 + 3);
      uint64_t v55 = *((void *)v53 + 4);
      sub_10001CD44(v53, v54);
      unsigned __int8 v56 = (*(uint64_t (**)(uint64_t, uint64_t))(v55 + 16))(v54, v55);
      if (v50[2])
      {
        unint64_t v57 = sub_100724678(v56);
        if (v58)
        {
          uint64_t v59 = *(void **)(v50[7] + 8 * v57);
          uint64_t v60 = *((void *)v53 + 3);
          uint64_t v61 = *((void *)v53 + 4);
          sub_10001CD44(v53, v60);
          uint64_t v62 = *(uint64_t (**)(uint64_t, uint64_t))(v61 + 16);
          swift_bridgeObjectRetain();
          unsigned __int8 v63 = v62(v60, v61);
          sub_10000588C((uint64_t *)&unk_101657620);
          uint64_t v64 = swift_allocObject();
          *(_OWORD *)(v64 + 16) = v167;
          sub_10001D074((uint64_t)v24, v64 + v173, &qword_10163A790);
          v179 = v59;
          sub_100443B14(v64);
          uint64_t v65 = v179;
          char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
          v179 = v50;
          unint64_t v68 = sub_100724678(v63);
          uint64_t v69 = v50[2];
          BOOL v70 = (v67 & 1) == 0;
          uint64_t v71 = v69 + v70;
          if (__OFADD__(v69, v70)) {
            goto LABEL_89;
          }
          char v72 = v67;
          if (v50[3] >= v71)
          {
            if ((isUniquelyReferenced_nonNull_native & 1) == 0) {
              sub_100E805BC();
            }
          }
          else
          {
            sub_100E697E0(v71, isUniquelyReferenced_nonNull_native);
            unint64_t v73 = sub_100724678(v63);
            if ((v72 & 1) != (v74 & 1)) {
              goto LABEL_92;
            }
            unint64_t v68 = v73;
          }
          uint64_t v93 = v179;
          if (v72)
          {
            uint64_t v50 = v179;
            uint64_t v94 = v179[7];
            swift_bridgeObjectRelease();
            *(void *)(v94 + 8 * v68) = v65;
          }
          else
          {
            v179[(v68 >> 6) + 8] |= 1 << v68;
            *(unsigned char *)(v93[6] + v68) = v63;
            *(void *)(v93[7] + 8 * v68) = v65;
            uint64_t v95 = v93[2];
            BOOL v91 = __OFADD__(v95, 1);
            uint64_t v96 = v95 + 1;
            if (v91) {
              goto LABEL_90;
            }
            uint64_t v50 = v93;
            v93[2] = v96;
          }
          swift_bridgeObjectRelease();
          uint64_t v24 = v176;
          unint64_t v52 = v177;
          goto LABEL_18;
        }
      }
      uint64_t v75 = *((void *)v53 + 3);
      uint64_t v76 = *((void *)v53 + 4);
      sub_10001CD44(v53, v75);
      unsigned __int8 v77 = (*(uint64_t (**)(uint64_t, uint64_t))(v76 + 16))(v75, v76);
      sub_10000588C((uint64_t *)&unk_101657620);
      uint64_t v78 = swift_allocObject();
      *(_OWORD *)(v78 + 16) = v167;
      unsigned __int8 v79 = v77;
      sub_10001D074((uint64_t)v24, v78 + v173, &qword_10163A790);
      char v80 = swift_isUniquelyReferenced_nonNull_native();
      v179 = v50;
      unint64_t v82 = sub_100724678(v77);
      uint64_t v83 = v50[2];
      BOOL v84 = (v81 & 1) == 0;
      uint64_t v85 = v83 + v84;
      if (__OFADD__(v83, v84)) {
        goto LABEL_87;
      }
      char v86 = v81;
      if (v50[3] >= v85)
      {
        if (v80)
        {
          uint64_t v89 = v179;
          if ((v81 & 1) == 0) {
            goto LABEL_32;
          }
        }
        else
        {
          sub_100E805BC();
          uint64_t v89 = v179;
          if ((v86 & 1) == 0) {
            goto LABEL_32;
          }
        }
      }
      else
      {
        sub_100E697E0(v85, v80);
        unint64_t v87 = sub_100724678(v79);
        if ((v86 & 1) != (v88 & 1))
        {
LABEL_92:
          uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
          __break(1u);
          return result;
        }
        unint64_t v82 = v87;
        uint64_t v89 = v179;
        if ((v86 & 1) == 0)
        {
LABEL_32:
          v89[(v82 >> 6) + 8] |= 1 << v82;
          *(unsigned char *)(v89[6] + v82) = v79;
          *(void *)(v89[7] + 8 * v82) = v78;
          uint64_t v90 = v89[2];
          BOOL v91 = __OFADD__(v90, 1);
          uint64_t v92 = v90 + 1;
          if (v91) {
            goto LABEL_88;
          }
          uint64_t v50 = v89;
          v89[2] = v92;
          goto LABEL_17;
        }
      }
      uint64_t v50 = v89;
      uint64_t v51 = v89[7];
      swift_bridgeObjectRelease();
      *(void *)(v51 + 8 * v82) = v78;
LABEL_17:
      swift_bridgeObjectRelease();
      unint64_t v52 = v177;
LABEL_18:
      sub_10001DAB4((uint64_t)v24, &qword_10163A790);
      uint64_t v48 = (uint64_t)v166 + v52;
      if (!--v45)
      {
        swift_bridgeObjectRelease_n();
        uint64_t v6 = v175;
        uint64_t v15 = v172;
        uint64_t v97 = v50;
        goto LABEL_45;
      }
    }
  }
  swift_bridgeObjectRelease();
  uint64_t v97 = _swiftEmptyDictionarySingleton;
LABEL_45:
  v179 = _swiftEmptyArrayStorage;
  uint64_t v98 = v97[8];
  uint64_t v159 = v97 + 8;
  uint64_t v99 = 1 << *((unsigned char *)v97 + 32);
  uint64_t v100 = -1;
  if (v99 < 64) {
    uint64_t v100 = ~(-1 << v99);
  }
  unint64_t v101 = v100 & v98;
  int64_t v160 = (unint64_t)(v99 + 63) >> 6;
  swift_bridgeObjectRetain();
  int64_t v102 = 0;
  long long v161 = xmmword_101342130;
  v162 = v97;
  uint64_t v103 = v178;
  while (v101)
  {
    unint64_t v108 = __clz(__rbit64(v101));
    v101 &= v101 - 1;
    unint64_t v109 = v108 | (v102 << 6);
LABEL_69:
    uint64_t v113 = *(void *)(v97[7] + 8 * v109);
    uint64_t v114 = *(void *)(v113 + 16);
    if (v114)
    {
      v166 = (void *)v101;
      *(void *)&long long v167 = v102;
      uint64_t v165 = *(unsigned __int8 *)(v170 + 80);
      uint64_t v115 = v113;
      uint64_t v168 = (v165 + 32) & ~v165;
      sub_10001D074(v113 + v168, v178, &qword_10163A790);
      uint64_t v169 = v115;
      swift_bridgeObjectRetain();
      unint64_t v116 = v114 - 1;
      if (v114 != 1)
      {
        uint64_t v173 = *(void *)(v170 + 72);
        uint64_t v117 = v169 + v173 + v168;
        while (1)
        {
          uint64_t v176 = (char *)v117;
          unint64_t v177 = v116;
          sub_10001D074(v117, (uint64_t)v15, &qword_10163A790);
          uint64_t v118 = &v15[*(int *)(v6 + 40)];
          uint64_t v119 = *((void *)v118 + 3);
          uint64_t v120 = *((void *)v118 + 4);
          sub_10001CD44(v118, v119);
          int v121 = (*(unsigned __int8 (**)(uint64_t, uint64_t))(v120 + 16))(v119, v120);
          uint64_t v122 = (void *)(v103 + *(int *)(v6 + 40));
          uint64_t v124 = v122[3];
          uint64_t v123 = v122[4];
          sub_10001CD44(v122, v124);
          unsigned __int8 v125 = (*(uint64_t (**)(uint64_t, uint64_t))(v123 + 16))(v124, v123);
          uint64_t v126 = v174;
          sub_10001D074((uint64_t)v15, v174, &qword_10163A790);
          uint64_t v127 = v171;
          sub_10001D074(v103, v171, &qword_10163A790);
          if (v121 == v125) {
            break;
          }
          uint64_t v128 = v175;
          uint64_t v129 = (void *)(v126 + *(int *)(v175 + 40));
          uint64_t v130 = v129[3];
          uint64_t v131 = v129[4];
          sub_10001CD44(v129, v130);
          uint64_t v132 = (*(uint64_t (**)(uint64_t, uint64_t))(v131 + 8))(v130, v131);
          uint64_t v133 = (void *)(v127 + *(int *)(v128 + 40));
          uint64_t v135 = v133[3];
          uint64_t v134 = v133[4];
          sub_10001CD44(v133, v135);
          uint64_t v136 = (*(uint64_t (**)(uint64_t, uint64_t))(v134 + 8))(v135, v134);
          sub_10001DAB4(v174, &qword_10163A790);
          sub_10001DAB4(v127, &qword_10163A790);
          if (v132 == v136) {
            goto LABEL_77;
          }
          uint64_t v137 = *((void *)v118 + 3);
          uint64_t v138 = *((void *)v118 + 4);
          sub_10001CD44(v118, v137);
          uint64_t v139 = (*(uint64_t (**)(uint64_t, uint64_t))(v138 + 8))(v137, v138);
          uint64_t v140 = v122[3];
          uint64_t v141 = v122[4];
          sub_10001CD44(v122, v140);
          uint64_t v142 = (*(uint64_t (**)(uint64_t, uint64_t))(v141 + 8))(v140, v141);
          uint64_t v6 = v175;
          uint64_t v15 = v172;
          if (v139 < v142)
          {
LABEL_80:
            uint64_t v143 = v178;
            sub_10001DAB4(v178, &qword_10163A790);
            sub_10001D608((uint64_t)v15, v143, &qword_10163A790);
            goto LABEL_73;
          }
LABEL_72:
          sub_10001DAB4((uint64_t)v15, &qword_10163A790);
LABEL_73:
          uint64_t v117 = (uint64_t)&v176[v173];
          unint64_t v116 = v177 - 1;
          if (v177 == 1) {
            goto LABEL_48;
          }
        }
        sub_10001DAB4(v126, &qword_10163A790);
        sub_10001DAB4(v127, &qword_10163A790);
LABEL_77:
        uint64_t v6 = v175;
        uint64_t v15 = v172;
        if (static Date.> infix(_:_:)()) {
          goto LABEL_80;
        }
        goto LABEL_72;
      }
LABEL_48:
      uint64_t v104 = v164;
      sub_10001D608(v178, v164, &qword_10163A790);
      uint64_t v105 = v163;
      sub_10001D608(v104, v163, &qword_10163A790);
      sub_10000588C((uint64_t *)&unk_101657620);
      uint64_t v106 = v168;
      uint64_t v107 = swift_allocObject();
      *(_OWORD *)(v107 + 16) = v161;
      sub_10001D074(v105, v107 + v106, &qword_10163A790);
      sub_100443B14(v107);
      sub_10001DAB4(v105, &qword_10163A790);
      swift_bridgeObjectRelease();
      uint64_t v97 = v162;
      unint64_t v101 = (unint64_t)v166;
      int64_t v102 = v167;
    }
  }
  int64_t v110 = v102 + 1;
  if (__OFADD__(v102, 1)) {
    goto LABEL_86;
  }
  if (v110 < v160)
  {
    unint64_t v111 = v159[v110];
    ++v102;
    if (!v111)
    {
      int64_t v102 = v110 + 1;
      if (v110 + 1 >= v160) {
        goto LABEL_81;
      }
      unint64_t v111 = v159[v102];
      if (!v111)
      {
        int64_t v102 = v110 + 2;
        if (v110 + 2 >= v160) {
          goto LABEL_81;
        }
        unint64_t v111 = v159[v102];
        if (!v111)
        {
          int64_t v102 = v110 + 3;
          if (v110 + 3 >= v160) {
            goto LABEL_81;
          }
          unint64_t v111 = v159[v102];
          if (!v111)
          {
            int64_t v102 = v110 + 4;
            if (v110 + 4 >= v160) {
              goto LABEL_81;
            }
            unint64_t v111 = v159[v102];
            if (!v111)
            {
              int64_t v112 = v110 + 5;
              if (v112 >= v160) {
                goto LABEL_81;
              }
              unint64_t v111 = v159[v112];
              if (!v111)
              {
                while (1)
                {
                  int64_t v102 = v112 + 1;
                  if (__OFADD__(v112, 1)) {
                    break;
                  }
                  if (v102 >= v160) {
                    goto LABEL_81;
                  }
                  unint64_t v111 = v159[v102];
                  ++v112;
                  if (v111) {
                    goto LABEL_68;
                  }
                }
LABEL_91:
                __break(1u);
              }
              int64_t v102 = v112;
            }
          }
        }
      }
    }
LABEL_68:
    unint64_t v101 = (v111 - 1) & v111;
    unint64_t v109 = __clz(__rbit64(v111)) + (v102 << 6);
    goto LABEL_69;
  }
LABEL_81:
  swift_release();
  swift_bridgeObjectRelease();
  uint64_t v144 = v158;
  sub_1002A1534((uint64_t)v179, v158);
  swift_bridgeObjectRelease();
  uint64_t v145 = v157;
  sub_10001D074(v144, v157, &qword_10163D038);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v170 + 48))(v145, 1, v6) == 1)
  {
    uint64_t v146 = v145;
    uint64_t v147 = (uint64_t)&qword_10163D038;
    sub_10001DAB4(v146, &qword_10163D038);
    sub_10000588C(&qword_10163D068);
    sub_100062734(&qword_10163D070, &qword_10163D068);
    swift_allocError();
    swift_willThrow();
    sub_10001DAB4(v144, &qword_10163D038);
  }
  else
  {
    uint64_t v148 = v145;
    uint64_t v149 = v6;
    uint64_t v150 = v155;
    sub_10001D608(v148, v155, &qword_10163A790);
    BOOL v151 = (void *)(v150 + *(int *)(v149 + 40));
    uint64_t v147 = v151[3];
    uint64_t v152 = v151[4];
    sub_10001CD44(v151, v147);
    LOBYTE(v147) = (*(uint64_t (**)(uint64_t, uint64_t))(v152 + 24))(v147, v152);
    sub_10001DAB4(v144, &qword_10163D038);
    sub_100B30D0C(v150, v156, type metadata accessor for DeviceEvent);
    sub_10001DAB4(v150, &qword_10163A790);
  }
  return v147 & 1;
}

uint64_t sub_100AA5110(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for UUID();
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v30 = (char *)&v30 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = sub_10000588C((uint64_t *)&unk_10166EAF0);
  uint64_t v8 = v7 - 8;
  __chkstk_darwin(v7);
  uint64_t v10 = (char *)&v30 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = sub_10000588C(&qword_101638CF0);
  uint64_t v12 = __chkstk_darwin(v11 - 8);
  uint64_t v31 = (uint64_t)&v30 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = __chkstk_darwin(v12);
  uint64_t v16 = (char *)&v30 - v15;
  __chkstk_darwin(v14);
  uint64_t v18 = (char *)&v30 - v17;
  uint64_t v19 = sub_10000588C(&qword_10163A790);
  sub_10001D074(a1 + *(int *)(v19 + 44), (uint64_t)v18, &qword_101638CF0);
  uint64_t v20 = sub_10000588C((uint64_t *)&unk_10164E870);
  (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))(v16, a2 + *(int *)(v20 + 36), v4);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v5 + 56))(v16, 0, 1, v4);
  uint64_t v21 = (uint64_t)&v10[*(int *)(v8 + 56)];
  sub_10001D074((uint64_t)v18, (uint64_t)v10, &qword_101638CF0);
  sub_10001D074((uint64_t)v16, v21, &qword_101638CF0);
  uint64_t v22 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v5 + 48);
  if (v22((uint64_t)v10, 1, v4) == 1)
  {
    sub_10001DAB4((uint64_t)v16, &qword_101638CF0);
    sub_10001DAB4((uint64_t)v18, &qword_101638CF0);
    int v23 = v22(v21, 1, v4);
    if (v23 == 1) {
      uint64_t v24 = &qword_101638CF0;
    }
    else {
      uint64_t v24 = (uint64_t *)&unk_10166EAF0;
    }
    if (v23 == 1) {
      char v25 = -1;
    }
    else {
      char v25 = 0;
    }
  }
  else
  {
    uint64_t v26 = v31;
    sub_10001D074((uint64_t)v10, v31, &qword_101638CF0);
    if (v22(v21, 1, v4) == 1)
    {
      sub_10001DAB4((uint64_t)v16, &qword_101638CF0);
      sub_10001DAB4((uint64_t)v18, &qword_101638CF0);
      (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v26, v4);
      char v25 = 0;
      uint64_t v24 = (uint64_t *)&unk_10166EAF0;
    }
    else
    {
      uint64_t v27 = v30;
      (*(void (**)(char *, uint64_t, uint64_t))(v5 + 32))(v30, v21, v4);
      sub_100B22DA4((unint64_t *)&qword_10163B8F0, (void (*)(uint64_t))&type metadata accessor for UUID);
      char v25 = dispatch thunk of static Equatable.== infix(_:_:)();
      uint64_t v28 = *(void (**)(char *, uint64_t))(v5 + 8);
      v28(v27, v4);
      uint64_t v24 = &qword_101638CF0;
      sub_10001DAB4((uint64_t)v16, &qword_101638CF0);
      sub_10001DAB4((uint64_t)v18, &qword_101638CF0);
      v28((char *)v26, v4);
    }
  }
  sub_10001DAB4((uint64_t)v10, v24);
  return v25 & 1;
}

uint64_t sub_100AA5514()
{
  if (qword_101636F50 != -1) {
    swift_once();
  }
  uint64_t v0 = type metadata accessor for Logger();
  sub_100010324(v0, (uint64_t)qword_10170E9E8);
  uint64_t v1 = Logger.logObject.getter();
  os_log_type_t v2 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v1, v2))
  {
    uint64_t v3 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v3 = 0;
    _os_log_impl((void *)&_mh_execute_header, v1, v2, "Requesting SPUnknownBeaconsChangedNotification to be posted before rate limit.", v3, 2u);
    swift_slowDealloc();
  }

  return dispatch thunk of DarwinNotificationHelper.post(bypassRateLimit:)();
}

uint64_t sub_100AA5634@<X0>(void *a1@<X0>, uint64_t a2@<X1>, int a3@<W2>, int a4@<W3>, uint64_t *a5@<X8>)
{
  int v19 = a3;
  int v20 = a4;
  uint64_t v17 = a5;
  uint64_t v18 = a2;
  uint64_t v6 = type metadata accessor for Date();
  uint64_t v22 = *(void *)(v6 - 8);
  uint64_t v23 = v6;
  __chkstk_darwin(v6);
  uint64_t v8 = (char *)&v17 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v21 = type metadata accessor for UUID();
  uint64_t v9 = *(void *)(v21 - 8);
  __chkstk_darwin(v21);
  uint64_t v11 = (char *)&v17 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for BeaconKeyManager(0);
  OSAllocatedUnfairLock.callAsFunction<A>(_:)();
  uint64_t v13 = a1[3];
  uint64_t v12 = a1[4];
  sub_10001CD44(a1, v13);
  (*(void (**)(uint64_t))(*(void *)(*(void *)(v12 + 8) + 8) + 32))(v13);
  uint64_t v15 = a1[3];
  uint64_t v14 = a1[4];
  sub_10001CD44(a1, v15);
  (*(void (**)(uint64_t, uint64_t))(v14 + 184))(v15, v14);
  sub_100B029E4((uint64_t)v11, v8, v18, v19, v20, v17);
  swift_release();
  (*(void (**)(char *, uint64_t))(v22 + 8))(v8, v23);
  return (*(uint64_t (**)(char *, uint64_t))(v9 + 8))(v11, v21);
}

uint64_t sub_100AA5890(void *a1, uint64_t *a2, unint64_t a3, int a4, char a5)
{
  uint64_t v99 = type metadata accessor for UUID();
  uint64_t v10 = *(void *)(v99 - 8);
  __chkstk_darwin(v99);
  uint64_t v105 = (uint64_t)v82 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = type metadata accessor for TimeBasedKey();
  uint64_t v13 = *(void *)(v12 - 8);
  uint64_t v91 = v12;
  uint64_t v92 = v13;
  uint64_t v14 = __chkstk_darwin(v12);
  unint64_t v98 = (unint64_t)v82 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = __chkstk_darwin(v14);
  unint64_t v101 = (void *)((char *)v82 - v17);
  uint64_t v18 = __chkstk_darwin(v16);
  uint64_t v90 = (uint64_t)v82 - v19;
  __chkstk_darwin(v18);
  uint64_t v104 = (uint64_t **)((char *)v82 - v20);
  uint64_t v93 = type metadata accessor for Date();
  uint64_t v97 = *(void **)(v93 - 8);
  uint64_t v21 = __chkstk_darwin(v93);
  uint64_t v100 = (void (*)(uint64_t, uint64_t))((char *)v82 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0));
  __chkstk_darwin(v21);
  uint64_t v89 = (char *)v82 - v23;
  uint64_t v103 = type metadata accessor for DateInterval();
  uint64_t v24 = *(void *)(v103 - 8);
  __chkstk_darwin(v103);
  uint64_t v102 = (uint64_t)v82 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v26 = type metadata accessor for BeaconKeyManager.KeyCriteria(0);
  uint64_t result = __chkstk_darwin(v26);
  uint64_t v29 = (char *)v82 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v94 = a1;
  unint64_t v106 = a3;
  if (a5)
  {
    uint64_t v88 = sub_1006DD094(a4);
    uint64_t v30 = a1[3];
    uint64_t v31 = a1[4];
    sub_10001CD44(a1, v30);
    uint64_t v32 = v30;
    unint64_t v33 = v106;
    uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)(*(void *)(v31 + 8) + 8) + 32))(v32);
    if (v33 < (unint64_t)a2)
    {
LABEL_29:
      __break(1u);
      goto LABEL_30;
    }
    v29[*(int *)(v26 + 20)] = a4;
    uint64_t v34 = (uint64_t **)&v29[*(int *)(v26 + 24)];
    unint64_t v101 = a2;
    *uint64_t v34 = a2;
    v34[1] = (uint64_t *)v33;
    type metadata accessor for BeaconKeyManager(0);
    uint64_t v35 = v84;
    OSAllocatedUnfairLock.callAsFunction<A>(_:)();
    uint64_t v84 = v35;
    uint64_t v83 = v29;
    uint64_t v36 = sub_1012E5838((uint64_t)v29);
    swift_release();
    uint64_t v37 = (void (**)(uint64_t, uint64_t))v36[2];
    v82[1] = v36;
    if (v37)
    {
      unint64_t v87 = (void (**)(char *, uint64_t))(v97 + 1);
      char v86 = (void (**)(uint64_t, uint64_t, uint64_t))(v24 + 16);
      uint64_t v85 = (uint64_t (**)(uint64_t, uint64_t))(v24 + 8);
      uint64_t v38 = v36 + 9;
      unint64_t v39 = (char *)_swiftEmptyArrayStorage;
      while (1)
      {
        uint64_t v95 = v38;
        uint64_t v96 = v37;
        uint64_t v41 = *(v38 - 5);
        unint64_t v98 = *(v38 - 4);
        unint64_t v40 = v98;
        uint64_t v99 = (uint64_t)v39;
        unint64_t v42 = *(v38 - 2);
        uint64_t v107 = *(v38 - 3);
        uint64_t v43 = v107;
        uint64_t v105 = v41;
        unint64_t v106 = v42;
        uint64_t v45 = *(v38 - 1);
        unint64_t v44 = *v38;
        uint64_t v47 = v94[3];
        uint64_t v46 = v94[4];
        uint64_t v97 = sub_10001CD44(v94, v47);
        uint64_t v100 = *(void (**)(uint64_t, uint64_t))(v46 + 184);
        sub_100037A38(v41, v40);
        sub_1000361E0(v43, v42);
        unint64_t v48 = v44;
        sub_100037A38(v45, v44);
        int v49 = v89;
        v100(v47, v46);
        uint64_t v51 = v101;
        uint64_t v50 = v102;
        sub_1008B2794(v49, (uint64_t)v101, v102);
        (*v87)(v49, v93);
        uint64_t v52 = v91;
        uint64_t v53 = v104;
        (*v86)((uint64_t)v104 + *(int *)(v91 + 20), v50, v103);
        *uint64_t v53 = v51;
        uint64_t v54 = (uint64_t **)((char *)v53 + *(int *)(v52 + 24));
        uint64_t v55 = v105;
        unint64_t v56 = v106;
        unint64_t v57 = v98;
        void *v54 = v105;
        v54[1] = v57;
        uint64_t v58 = v107;
        void v54[2] = v107;
        v54[3] = v56;
        v54[4] = v45;
        v54[5] = v48;
        uint64_t v59 = v90;
        sub_100B30D0C((uint64_t)v53, v90, (uint64_t (*)(void))type metadata accessor for TimeBasedKey);
        sub_100037A38(v55, v57);
        sub_1000361E0(v58, v56);
        uint64_t v100 = (void (*)(uint64_t, uint64_t))v48;
        sub_100037A38(v45, v48);
        unint64_t v39 = (char *)v99;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          unint64_t v39 = (char *)sub_100A6F46C(0, *((void *)v39 + 2) + 1, 1, (unint64_t)v39);
        }
        unint64_t v61 = *((void *)v39 + 2);
        unint64_t v60 = *((void *)v39 + 3);
        if (v61 >= v60 >> 1) {
          unint64_t v39 = (char *)sub_100A6F46C(v60 > 1, v61 + 1, 1, (unint64_t)v39);
        }
        *((void *)v39 + 2) = v61 + 1;
        sub_100B30DB4(v59, (uint64_t)&v39[((*(unsigned __int8 *)(v92 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v92 + 80))+ *(void *)(v92 + 72) * v61], (uint64_t (*)(void))type metadata accessor for TimeBasedKey);
        sub_100037A24(v105, v57);
        sub_10001CFB8(v107, v106);
        sub_100037A24(v45, (unint64_t)v100);
        sub_100B310AC((uint64_t)v104, (uint64_t (*)(void))type metadata accessor for TimeBasedKey);
        uint64_t result = (*v85)(v102, v103);
        BOOL v62 = __CFADD__(v51, 1);
        unsigned __int8 v63 = (uint64_t *)((char *)v51 + 1);
        if (v62) {
          break;
        }
        unint64_t v101 = v63;
        uint64_t v38 = v95 + 6;
        uint64_t v37 = (void (**)(uint64_t, uint64_t))((char *)v96 - 1);
        if (v96 == (void (**)(uint64_t, uint64_t))1) {
          goto LABEL_25;
        }
      }
      __break(1u);
LABEL_28:
      __break(1u);
      goto LABEL_29;
    }
    unint64_t v39 = (char *)_swiftEmptyArrayStorage;
LABEL_25:
    swift_bridgeObjectRelease();
    sub_100B310AC((uint64_t)v83, type metadata accessor for BeaconKeyManager.KeyCriteria);
    return (uint64_t)v39;
  }
  LODWORD(v104) = a4;
  if (a3 >= (unint64_t)a2)
  {
    uint64_t v64 = (uint64_t)a2;
    uint64_t v103 = *(void *)(v107 + OBJC_IVAR____TtC12searchpartyd11BeaconStore_beaconKeyManagerLock);
    uint64_t v102 = type metadata accessor for BeaconKeyManager(0);
    uint64_t v95 = v97 + 1;
    uint64_t v96 = (void (**)(uint64_t, uint64_t))(v10 + 8);
    unint64_t v39 = (char *)_swiftEmptyArrayStorage;
    uint64_t v97 = (void *)((char *)&type metadata for () + 8);
    uint64_t v65 = v84;
    while (1)
    {
      unint64_t v66 = (unint64_t)v39;
      OSAllocatedUnfairLock.callAsFunction<A>(_:)();
      uint64_t v67 = v65;
      unint64_t v68 = v94;
      uint64_t v70 = v94[3];
      uint64_t v69 = v94[4];
      sub_10001CD44(v94, v70);
      uint64_t v71 = v105;
      (*(void (**)(uint64_t))(*(void *)(*(void *)(v69 + 8) + 8) + 32))(v70);
      uint64_t v73 = v68[3];
      uint64_t v72 = v68[4];
      char v74 = v68;
      uint64_t v75 = v71;
      sub_10001CD44(v74, v73);
      uint64_t v76 = v73;
      unint64_t v39 = (char *)v100;
      (*(void (**)(uint64_t, uint64_t))(v72 + 184))(v76, v72);
      unsigned __int8 v77 = v101;
      sub_100B029E4(v75, v39, v64, (int)v104, 0, v101);
      uint64_t v65 = v67;
      if (v67) {
        break;
      }
      swift_release();
      ((void (*)(char *, uint64_t))*v95)(v39, v93);
      (*v96)(v75, v99);
      uint64_t v78 = v98;
      sub_100B30D0C((uint64_t)v77, v98, (uint64_t (*)(void))type metadata accessor for TimeBasedKey);
      unint64_t v39 = (char *)v66;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
        unint64_t v39 = (char *)sub_100A6F46C(0, *(void *)(v66 + 16) + 1, 1, v66);
      }
      unint64_t v79 = v106;
      unint64_t v81 = *((void *)v39 + 2);
      unint64_t v80 = *((void *)v39 + 3);
      if (v81 >= v80 >> 1) {
        unint64_t v39 = (char *)sub_100A6F46C(v80 > 1, v81 + 1, 1, (unint64_t)v39);
      }
      *((void *)v39 + 2) = v81 + 1;
      sub_100B30DB4(v78, (uint64_t)&v39[((*(unsigned __int8 *)(v92 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v92 + 80))+ *(void *)(v92 + 72) * v81], (uint64_t (*)(void))type metadata accessor for TimeBasedKey);
      uint64_t result = sub_100B310AC((uint64_t)v77, (uint64_t (*)(void))type metadata accessor for TimeBasedKey);
      if (v79 == v64) {
        return (uint64_t)v39;
      }
      BOOL v62 = __CFADD__(v64++, 1);
      if (v62) {
        goto LABEL_28;
      }
    }
    swift_release();
    ((void (*)(char *, uint64_t))*v95)(v39, v93);
    (*v96)(v75, v99);
    swift_bridgeObjectRelease();
    return (uint64_t)v39;
  }
LABEL_30:
  __break(1u);
  return result;
}

uint64_t sub_100AA6280(void (*a1)(uint64_t *__return_ptr))
{
  a1(&v12);
  type metadata accessor for JSONEncoder();
  swift_allocObject();
  JSONEncoder.init()();
  sub_100B63D44();
  uint64_t v1 = dispatch thunk of JSONEncoder.encode<A>(_:)();
  unint64_t v3 = v2;
  uint64_t v4 = self;
  Class isa = Data._bridgeToObjectiveC()().super.isa;
  v11[0] = 0;
  id v6 = [v4 JSONObjectWithData:isa options:4 error:v11];

  id v7 = v11[0];
  if (!v6)
  {
    uint64_t v9 = v7;
    _convertNSErrorToError(_:)();

    swift_willThrow();
    swift_errorRelease();
    goto LABEL_5;
  }
  _bridgeAnyObjectToAny(_:)();
  swift_unknownObjectRelease();
  sub_10000588C((uint64_t *)&unk_101664240);
  if ((swift_dynamicCast() & 1) == 0)
  {
LABEL_5:
    swift_release();
    sub_10001CFB8(v1, v3);
    swift_release();
    return 0;
  }
  uint64_t v8 = sub_100653C34((uint64_t)v11[0]);
  swift_release();
  sub_10001CFB8(v1, v3);
  swift_bridgeObjectRelease();
  swift_release();
  return v8;
}

uint64_t sub_100AA6468(void (*a1)(uint64_t *__return_ptr))
{
  a1(&v12);
  type metadata accessor for JSONEncoder();
  swift_allocObject();
  JSONEncoder.init()();
  sub_10000588C(&qword_101649660);
  sub_100B5FE90();
  uint64_t v1 = dispatch thunk of JSONEncoder.encode<A>(_:)();
  unint64_t v3 = v2;
  uint64_t v4 = self;
  Class isa = Data._bridgeToObjectiveC()().super.isa;
  v11[0] = 0;
  id v6 = [v4 JSONObjectWithData:isa options:4 error:v11];

  id v7 = v11[0];
  if (!v6)
  {
    uint64_t v9 = v7;
    _convertNSErrorToError(_:)();

    swift_willThrow();
    swift_errorRelease();
    goto LABEL_5;
  }
  _bridgeAnyObjectToAny(_:)();
  swift_unknownObjectRelease();
  sub_10000588C((uint64_t *)&unk_101664240);
  if ((swift_dynamicCast() & 1) == 0)
  {
LABEL_5:
    swift_release();
    sub_10001CFB8(v1, v3);
    swift_bridgeObjectRelease();
    return 0;
  }
  uint64_t v8 = sub_100653C34((uint64_t)v11[0]);
  swift_release();
  sub_10001CFB8(v1, v3);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v8;
}

uint64_t sub_100AA665C(void (*a1)(uint64_t *__return_ptr))
{
  a1(&v12);
  type metadata accessor for JSONEncoder();
  swift_allocObject();
  JSONEncoder.init()();
  sub_100B63C14();
  uint64_t v1 = dispatch thunk of JSONEncoder.encode<A>(_:)();
  unint64_t v3 = v2;
  uint64_t v4 = self;
  Class isa = Data._bridgeToObjectiveC()().super.isa;
  v11[0] = 0;
  id v6 = [v4 JSONObjectWithData:isa options:4 error:v11];

  id v7 = v11[0];
  if (!v6)
  {
    uint64_t v9 = v7;
    _convertNSErrorToError(_:)();

    swift_willThrow();
    swift_errorRelease();
    goto LABEL_5;
  }
  _bridgeAnyObjectToAny(_:)();
  swift_unknownObjectRelease();
  sub_10000588C((uint64_t *)&unk_101664240);
  if ((swift_dynamicCast() & 1) == 0)
  {
LABEL_5:
    swift_release();
    sub_10001CFB8(v1, v3);
    swift_bridgeObjectRelease();
    return 0;
  }
  uint64_t v8 = sub_100653C34((uint64_t)v11[0]);
  swift_release();
  sub_10001CFB8(v1, v3);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v8;
}

uint64_t sub_100AA6844(void (*a1)(uint64_t *__return_ptr))
{
  a1(&v12);
  type metadata accessor for JSONEncoder();
  swift_allocObject();
  JSONEncoder.init()();
  sub_100B63BC0();
  uint64_t v1 = dispatch thunk of JSONEncoder.encode<A>(_:)();
  unint64_t v3 = v2;
  uint64_t v4 = self;
  Class isa = Data._bridgeToObjectiveC()().super.isa;
  v11[0] = 0;
  id v6 = [v4 JSONObjectWithData:isa options:4 error:v11];

  id v7 = v11[0];
  if (!v6)
  {
    uint64_t v9 = v7;
    _convertNSErrorToError(_:)();

    swift_willThrow();
    swift_errorRelease();
    goto LABEL_5;
  }
  _bridgeAnyObjectToAny(_:)();
  swift_unknownObjectRelease();
  sub_10000588C((uint64_t *)&unk_101664240);
  if ((swift_dynamicCast() & 1) == 0)
  {
LABEL_5:
    swift_release();
    sub_10001CFB8(v1, v3);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    return 0;
  }
  uint64_t v8 = sub_100653C34((uint64_t)v11[0]);
  swift_release();
  sub_10001CFB8(v1, v3);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v8;
}

uint64_t sub_100AA6A4C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v97 = a2;
  uint64_t v103 = sub_10000588C((uint64_t *)&unk_101660670);
  __chkstk_darwin(v103);
  uint64_t v100 = &v93[-((v3 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v4 = (int *)type metadata accessor for OwnedDeviceKeyRecord();
  uint64_t v110 = *((void *)v4 - 1);
  uint64_t v5 = __chkstk_darwin(v4);
  uint64_t v107 = &v93[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v7 = __chkstk_darwin(v5);
  uint64_t v99 = &v93[-v8];
  uint64_t v9 = __chkstk_darwin(v7);
  unint64_t v101 = &v93[-v10];
  uint64_t v11 = __chkstk_darwin(v9);
  unint64_t v108 = &v93[-v12];
  __chkstk_darwin(v11);
  uint64_t v113 = &v93[-v13];
  uint64_t v14 = type metadata accessor for UUID();
  uint64_t v15 = *(void *)(v14 - 8);
  uint64_t v16 = *(void *)(v15 + 64);
  uint64_t v17 = __chkstk_darwin(v14);
  uint64_t v18 = __chkstk_darwin(v17);
  unint64_t v98 = &v93[-v19];
  uint64_t v20 = __chkstk_darwin(v18);
  uint64_t v105 = &v93[-v21];
  uint64_t v22 = __chkstk_darwin(v20);
  uint64_t v102 = &v93[-v23];
  __chkstk_darwin(v22);
  uint64_t v25 = &v93[-v24];
  if (qword_101637660 != -1) {
    swift_once();
  }
  unint64_t v106 = &v93[-((v16 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v26 = type metadata accessor for Logger();
  uint64_t v27 = sub_100010324(v26, (uint64_t)qword_10170F838);
  uint64_t v28 = *(void (**)(char *, uint64_t, uint64_t))(v15 + 16);
  uint64_t v114 = v15 + 16;
  uint64_t v115 = a1;
  uint64_t v117 = v28;
  v28(v25, a1, v14);
  uint64_t v29 = v15;
  uint64_t v109 = v27;
  uint64_t v30 = Logger.logObject.getter();
  os_log_type_t v31 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v30, v31))
  {
    uint64_t v32 = swift_slowAlloc();
    uint64_t v116 = v29;
    uint64_t v33 = v32;
    uint64_t v96 = swift_slowAlloc();
    v119[0] = v96;
    *(_DWORD *)uint64_t v33 = 141558275;
    uint64_t v123 = 1752392040;
    unint64_t v111 = v4;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v33 + 12) = 2081;
    sub_100B22DA4((unint64_t *)&qword_101638B10, (void (*)(uint64_t))&type metadata accessor for UUID);
    uint64_t v34 = dispatch thunk of CustomStringConvertible.description.getter();
    uint64_t v123 = sub_1008FA0F0(v34, v35, v119);
    uint64_t v4 = v111;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    uint64_t v36 = v116;
    uint64_t v37 = *(void (**)(char *, uint64_t))(v116 + 8);
    v37(v25, v14);
    _os_log_impl((void *)&_mh_execute_header, v30, v31, "BeaconStore createNewOwnedDeviceKeyRecord called with deviceIdentifier:%{private,mask.hash}s", (uint8_t *)v33, 0x16u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    uint64_t v29 = v36;
  }
  else
  {
    uint64_t v37 = *(void (**)(char *, uint64_t))(v29 + 8);
    v37(v25, v14);
  }
  uint64_t v38 = v112;
  uint64_t result = sub_100A9709C((uint64_t *)v120);
  if (!v38)
  {
    uint64_t v95 = 0;
    int64_t v112 = v37;
    unint64_t v40 = v113;
    UUID.init()();
    uint64_t v41 = (char *)v40 + v4[6];
    uint64_t v42 = v115;
    uint64_t v116 = v29;
    v117(v41, v115, v14);
    long long v121 = v120[1];
    long long v122 = v120[0];
    sub_100061E54((uint64_t)&v122);
    sub_100061E54((uint64_t)&v121);
    sub_100B55F50((uint64_t *)v120);
    *unint64_t v40 = xmmword_101348180;
    *(_OWORD *)((char *)v40 + v4[7]) = v122;
    *(_OWORD *)((char *)v40 + v4[8]) = v121;
    uint64_t v43 = dispatch_group_create();
    uint64_t v96 = (uint64_t)v43;
    uint64_t v44 = swift_allocBox();
    uint64_t v45 = *(void (**)(uint64_t, uint64_t, uint64_t, int *))(v110 + 56);
    uint64_t v103 = v46;
    v45(v46, 1, 1, v4);
    dispatch_group_enter(v43);
    uint64_t v47 = v102;
    v117(v102, v42, v14);
    uint64_t v48 = v116;
    unint64_t v49 = (*(unsigned __int8 *)(v116 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v116 + 80);
    unint64_t v50 = (v16 + v49 + 7) & 0xFFFFFFFFFFFFFFF8;
    uint64_t v51 = swift_allocObject();
    unint64_t v111 = v4;
    uint64_t v52 = v51;
    uint64_t v53 = (void *)v96;
    *(void *)(v51 + 16) = v96;
    (*(void (**)(unint64_t, unsigned char *, uint64_t))(v48 + 32))(v51 + v49, v47, v14);
    *(void *)(v52 + v50) = v44;
    uint64_t v54 = v53;
    uint64_t v96 = v44;
    swift_retain();
    sub_100ABC900((uint64_t)v40, 0, (uint64_t)sub_100B56098, v52);
    swift_release();
    uint64_t v55 = v105;
    v117(v105, v115, v14);
    unint64_t v56 = v108;
    sub_100B30D0C((uint64_t)v40, (uint64_t)v108, (uint64_t (*)(void))type metadata accessor for OwnedDeviceKeyRecord);
    unint64_t v57 = Logger.logObject.getter();
    os_log_type_t v58 = static os_log_type_t.default.getter();
    int v59 = v58;
    BOOL v60 = os_log_type_enabled(v57, v58);
    uint64_t v102 = v54;
    if (v60)
    {
      uint64_t v61 = swift_slowAlloc();
      uint64_t v104 = swift_slowAlloc();
      v119[0] = v104;
      *(_DWORD *)uint64_t v61 = 141558787;
      uint64_t v123 = 1752392040;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v61 + 12) = 2081;
      sub_100B22DA4((unint64_t *)&qword_101638B10, (void (*)(uint64_t))&type metadata accessor for UUID);
      int v94 = v59;
      uint64_t v62 = dispatch thunk of CustomStringConvertible.description.getter();
      uint64_t v123 = sub_1008FA0F0(v62, v63, v119);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      v112(v55, v14);
      *(_WORD *)(v61 + 22) = 2160;
      uint64_t v123 = 1752392040;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v61 + 32) = 2081;
      uint64_t v64 = v111;
      uint64_t v65 = v108;
      uint64_t v66 = dispatch thunk of CustomStringConvertible.description.getter();
      uint64_t v123 = sub_1008FA0F0(v66, v67, v119);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      sub_100B310AC((uint64_t)v65, (uint64_t (*)(void))type metadata accessor for OwnedDeviceKeyRecord);
      _os_log_impl((void *)&_mh_execute_header, v57, (os_log_type_t)v94, "Waiting for the new record to be saved to the cloud %{private,mask.hash}s uuid: %{private,mask.hash}s.", (uint8_t *)v61, 0x2Au);
      swift_arrayDestroy();
      swift_slowDealloc();
      uint64_t v54 = v102;
      swift_slowDealloc();

      uint64_t v68 = (uint64_t)v107;
      uint64_t v69 = (uint64_t)v100;
      uint64_t v70 = v64;
    }
    else
    {
      v112(v55, v14);
      sub_100B310AC((uint64_t)v56, (uint64_t (*)(void))type metadata accessor for OwnedDeviceKeyRecord);

      uint64_t v68 = (uint64_t)v107;
      uint64_t v69 = (uint64_t)v100;
      uint64_t v70 = v111;
    }
    OS_dispatch_group.wait()();
    uint64_t v71 = v103;
    swift_beginAccess();
    sub_10001D074(v71, v69, (uint64_t *)&unk_101660670);
    int v72 = (*(uint64_t (**)(uint64_t, uint64_t, int *))(v110 + 48))(v69, 1, v70);
    uint64_t v73 = v106;
    if (v72 == 1)
    {
      sub_10001DAB4(v69, (uint64_t *)&unk_101660670);
      v117(v73, v115, v14);
      sub_100B30D0C((uint64_t)v113, v68, (uint64_t (*)(void))type metadata accessor for OwnedDeviceKeyRecord);
      char v74 = Logger.logObject.getter();
      os_log_type_t v75 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v74, v75))
      {
        uint64_t v76 = swift_slowAlloc();
        uint64_t v117 = (void (*)(char *, uint64_t, uint64_t))swift_slowAlloc();
        uint64_t v123 = (uint64_t)v117;
        *(_DWORD *)uint64_t v76 = 141558787;
        uint64_t v118 = 1752392040;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        *(_WORD *)(v76 + 12) = 2081;
        sub_100B22DA4((unint64_t *)&qword_101638B10, (void (*)(uint64_t))&type metadata accessor for UUID);
        uint64_t v77 = dispatch thunk of CustomStringConvertible.description.getter();
        uint64_t v118 = sub_1008FA0F0(v77, v78, &v123);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        v112(v73, v14);
        *(_WORD *)(v76 + 22) = 2160;
        uint64_t v118 = 1752392040;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        *(_WORD *)(v76 + 32) = 2081;
        uint64_t v79 = (uint64_t)v107;
        uint64_t v54 = v102;
        uint64_t v80 = dispatch thunk of CustomStringConvertible.description.getter();
        uint64_t v118 = sub_1008FA0F0(v80, v81, &v123);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        sub_100B310AC(v79, (uint64_t (*)(void))type metadata accessor for OwnedDeviceKeyRecord);
        _os_log_impl((void *)&_mh_execute_header, v74, v75, "OwnedDeviceKeyRecord save failed for %{private,mask.hash}s uuid: %{private,mask.hash}s", (uint8_t *)v76, 0x2Au);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
      }
      else
      {
        v112(v73, v14);
        sub_100B310AC(v68, (uint64_t (*)(void))type metadata accessor for OwnedDeviceKeyRecord);
      }

      sub_10009FD9C();
      swift_allocError();
      *uint64_t v92 = 13;
      swift_willThrow();

      sub_100B310AC((uint64_t)v113, (uint64_t (*)(void))type metadata accessor for OwnedDeviceKeyRecord);
    }
    else
    {
      sub_100B30DB4(v69, (uint64_t)v101, (uint64_t (*)(void))type metadata accessor for OwnedDeviceKeyRecord);
      unint64_t v82 = v98;
      v117(v98, v115, v14);
      uint64_t v83 = v99;
      sub_100B30D0C((uint64_t)v113, (uint64_t)v99, (uint64_t (*)(void))type metadata accessor for OwnedDeviceKeyRecord);
      uint64_t v84 = Logger.logObject.getter();
      os_log_type_t v85 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v84, v85))
      {
        uint64_t v86 = swift_slowAlloc();
        uint64_t v117 = (void (*)(char *, uint64_t, uint64_t))swift_slowAlloc();
        uint64_t v123 = (uint64_t)v117;
        *(_DWORD *)uint64_t v86 = 141558787;
        uint64_t v118 = 1752392040;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        *(_WORD *)(v86 + 12) = 2081;
        sub_100B22DA4((unint64_t *)&qword_101638B10, (void (*)(uint64_t))&type metadata accessor for UUID);
        uint64_t v87 = dispatch thunk of CustomStringConvertible.description.getter();
        uint64_t v118 = sub_1008FA0F0(v87, v88, &v123);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        v112(v82, v14);
        *(_WORD *)(v86 + 22) = 2160;
        uint64_t v118 = 1752392040;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        *(_WORD *)(v86 + 32) = 2081;
        uint64_t v89 = v99;
        uint64_t v90 = dispatch thunk of CustomStringConvertible.description.getter();
        uint64_t v118 = sub_1008FA0F0(v90, v91, &v123);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        sub_100B310AC((uint64_t)v89, (uint64_t (*)(void))type metadata accessor for OwnedDeviceKeyRecord);
        _os_log_impl((void *)&_mh_execute_header, v84, v85, "OwnedDeviceKeyRecord saved to CloudKit for: %{private,mask.hash}s uuid: %{private,mask.hash}s.", (uint8_t *)v86, 0x2Au);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
      }
      else
      {

        sub_100B310AC((uint64_t)v83, (uint64_t (*)(void))type metadata accessor for OwnedDeviceKeyRecord);
        v112(v82, v14);
      }
      sub_100B310AC((uint64_t)v113, (uint64_t (*)(void))type metadata accessor for OwnedDeviceKeyRecord);
      sub_100B30DB4((uint64_t)v101, v97, (uint64_t (*)(void))type metadata accessor for OwnedDeviceKeyRecord);
    }
    return swift_release();
  }
  return result;
}

uint64_t sub_100AA7B10@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v55 = a1;
  uint64_t v47 = a2;
  uint64_t v2 = sub_10000588C(&qword_101638CF0);
  uint64_t v3 = __chkstk_darwin(v2 - 8);
  uint64_t v5 = (char *)&v44 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v3);
  uint64_t v7 = (char *)&v44 - v6;
  uint64_t v64 = type metadata accessor for UUID();
  uint64_t v48 = *(void *)(v64 - 8);
  __chkstk_darwin(v64);
  uint64_t v54 = (char *)&v44 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = type metadata accessor for URL();
  uint64_t v10 = *(void *)(v9 - 8);
  uint64_t v11 = __chkstk_darwin(v9);
  unint64_t v49 = (char *)&v44 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = __chkstk_darwin(v11);
  uint64_t v15 = (char *)&v44 - v14;
  __chkstk_darwin(v13);
  uint64_t v17 = (char *)&v44 - v16;
  uint64_t v18 = sub_10000588C(&qword_101649E40);
  __chkstk_darwin(v18 - 8);
  uint64_t v20 = (char *)&v44 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v21 = type metadata accessor for DirectorySequence();
  uint64_t v45 = *(void *)(v21 - 8);
  uint64_t v46 = v21;
  __chkstk_darwin(v21);
  uint64_t v23 = (char *)&v44 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  id v24 = [self defaultManager];
  if (qword_101636B38 != -1) {
    swift_once();
  }
  sub_100010324(v9, (uint64_t)qword_10170DF58);
  NSFileManager.deepSequence(at:includingPropertiesForKeys:options:)();

  DirectorySequence.next()();
  uint64_t v62 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48);
  uint64_t v63 = v10 + 48;
  if (v62(v20, 1, v9) != 1)
  {
    uint64_t v30 = *(void (**)(char *, char *, uint64_t))(v10 + 32);
    uint64_t v29 = v10 + 32;
    os_log_type_t v31 = (void (**)(char *, uint64_t))(v29 - 24);
    uint64_t v52 = (void (**)(char *, uint64_t))(v48 + 8);
    uint64_t v53 = (void (**)(void))(v48 + 32);
    BOOL v60 = "shold: %{public}@";
    uint64_t v61 = v30;
    unint64_t v57 = 0x80000001013FB020;
    os_log_type_t v58 = (unsigned int (**)(char *, uint64_t, uint64_t))(v48 + 48);
    uint64_t v51 = v7;
    unint64_t v56 = v20;
    int v59 = v23;
    do
    {
      uint64_t v33 = v15;
      v61(v17, v20, v9);
      if (URL.pathExtension.getter() == 0xD000000000000010 && v34 == v57)
      {
        swift_bridgeObjectRelease();
      }
      else
      {
        char v35 = _stringCompareWithSmolCheck(_:_:expecting:)();
        swift_bridgeObjectRelease();
        if ((v35 & 1) == 0)
        {
          (*v31)(v17, v9);
          uint64_t v15 = v33;
          goto LABEL_9;
        }
      }
      uint64_t v36 = v29;
      uint64_t v15 = v33;
      URL.deletingPathExtension()();
      URL.lastPathComponent.getter();
      UUID.init(uuidString:)();
      swift_bridgeObjectRelease();
      uint64_t v37 = *v58;
      uint64_t v38 = v64;
      if ((*v58)(v7, 1, v64) == 1)
      {
        uint64_t v32 = *v31;
        (*v31)(v33, v9);
        v32(v17, v9);
        sub_10001DAB4((uint64_t)v7, &qword_101638CF0);
      }
      else
      {
        unint64_t v39 = v54;
        unint64_t v50 = *v53;
        v50();
        if (static UUID.== infix(_:_:)())
        {
          unint64_t v40 = v49;
          URL.deletingLastPathComponent()();
          URL.lastPathComponent.getter();
          UUID.init(uuidString:)();
          swift_bridgeObjectRelease();
          uint64_t v41 = *v31;
          uint64_t v42 = v40;
          uint64_t v15 = v33;
          (*v31)(v42, v9);
          (*v52)(v39, v64);
          v41(v33, v9);
          v41(v17, v9);
          uint64_t v27 = v64;
          if (v37(v5, 1, v64) != 1)
          {
            (*(void (**)(char *, uint64_t))(v45 + 8))(v59, v46);
            uint64_t v26 = v47;
            ((void (*)(uint64_t, char *, uint64_t))v50)(v47, v5, v27);
            uint64_t v25 = 0;
            return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v48 + 56))(v26, v25, 1, v27);
          }
          sub_10001DAB4((uint64_t)v5, &qword_101638CF0);
        }
        else
        {
          (*v52)(v39, v38);
          uint64_t v43 = *v31;
          (*v31)(v33, v9);
          v43(v17, v9);
        }
        uint64_t v7 = v51;
      }
      uint64_t v29 = v36;
      uint64_t v20 = v56;
LABEL_9:
      uint64_t v23 = v59;
      DirectorySequence.next()();
    }
    while (v62(v20, 1, v9) != 1);
  }
  (*(void (**)(char *, uint64_t))(v45 + 8))(v23, v46);
  uint64_t v25 = 1;
  uint64_t v26 = v47;
  uint64_t v27 = v64;
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v48 + 56))(v26, v25, 1, v27);
}

uint64_t sub_100AA81F8@<X0>(void *a1@<X0>, uint64_t a2@<X1>, char a3@<W2>, uint64_t a4@<X8>)
{
  uint64_t v8 = type metadata accessor for Date();
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  uint64_t v11 = (char *)&v18 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (a3)
  {
    char v12 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if ((v12 & 1) == 0)
    {
      if (qword_101636CD8 != -1) {
        swift_once();
      }
      OS_dispatch_queue.sync<A>(execute:)();
      uint64_t v13 = sub_1010AB688(v19);
      goto LABEL_10;
    }
  }
  else
  {
    swift_bridgeObjectRelease();
  }
  if (qword_101636CD8 != -1) {
    swift_once();
  }
  OS_dispatch_queue.sync<A>(execute:)();
  uint64_t v13 = sub_1010AAFA8(v19);
LABEL_10:
  uint64_t v14 = v13;
  swift_bridgeObjectRelease();
  uint64_t v15 = a1[3];
  uint64_t v16 = a1[4];
  sub_10001CD44(a1, v15);
  (*(void (**)(uint64_t, uint64_t))(v16 + 184))(v15, v16);
  if (v14 < 0)
  {
    uint64_t result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  else
  {
    sub_1008B2794(v11, a2, a4);
    return (*(uint64_t (**)(char *, uint64_t))(v9 + 8))(v11, v8);
  }
  return result;
}

Swift::Int sub_100AA84EC(void **a1)
{
  uint64_t v2 = *(void *)(type metadata accessor for BeaconEstimatedLocation() - 8);
  uint64_t v3 = *a1;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    uint64_t v3 = (void *)sub_100B73624(v3);
  }
  uint64_t v4 = v3[2];
  v6[0] = (uint64_t)v3 + ((*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80));
  v6[1] = v4;
  Swift::Int result = sub_100B23ECC(v6);
  *a1 = v3;
  return result;
}

Swift::Int sub_100AA8594(void **a1)
{
  uint64_t v2 = *(void *)(type metadata accessor for OwnedBeaconRecord() - 8);
  uint64_t v3 = *a1;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    uint64_t v3 = (void *)sub_100B736B0(v3);
  }
  uint64_t v4 = v3[2];
  v6[0] = (char *)v3 + ((*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80));
  v6[1] = v4;
  Swift::Int result = sub_100B24E94(v6);
  *a1 = v3;
  return result;
}

Swift::Int sub_100AA863C(uint64_t (*a1)(uint64_t, uint64_t), uint64_t a2)
{
  type metadata accessor for BeaconStatus(0);
  uint64_t v5 = *v2;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    uint64_t v5 = (void *)sub_100B73714(v5);
  }
  Swift::Int result = sub_100B25970(a1, a2);
  *uint64_t v2 = v5;
  return result;
}

uint64_t sub_100AA86FC()
{
  if (qword_101636F50 != -1) {
    swift_once();
  }
  uint64_t v0 = type metadata accessor for Logger();
  sub_100010324(v0, (uint64_t)qword_10170E9E8);
  uint64_t v1 = Logger.logObject.getter();
  os_log_type_t v2 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v1, v2))
  {
    uint64_t v3 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v3 = 0;
    _os_log_impl((void *)&_mh_execute_header, v1, v2, "Requesting SPUnknownBeaconsSetChangedNotification to be posted before rate limit.", v3, 2u);
    swift_slowDealloc();
  }

  return dispatch thunk of DarwinNotificationHelper.post(bypassRateLimit:)();
}

void *sub_100AA881C(uint64_t a1)
{
  uint64_t v272 = type metadata accessor for Date();
  uint64_t v2 = *(void *)(v272 - 8);
  uint64_t v3 = __chkstk_darwin(v272);
  uint64_t v271 = (uint64_t)&v249 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v3);
  uint64_t v270 = (char *)&v249 - v5;
  uint64_t v6 = sub_10000588C((uint64_t *)&unk_1016511A0);
  __chkstk_darwin(v6 - 8);
  v285 = (char *)&v249 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for OwnedBeaconGroup(0);
  uint64_t v9 = __chkstk_darwin(v8);
  uint64_t v11 = (char *)&v249 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = __chkstk_darwin(v9);
  uint64_t v252 = (uint64_t)&v249 - v13;
  uint64_t v14 = __chkstk_darwin(v12);
  v258 = (char *)&v249 - v15;
  uint64_t v16 = __chkstk_darwin(v14);
  uint64_t v257 = (uint64_t)&v249 - v17;
  uint64_t v18 = __chkstk_darwin(v16);
  uint64_t v298 = (uint64_t)&v249 - v19;
  __chkstk_darwin(v18);
  uint64_t v254 = (uint64_t)&v249 - v20;
  uint64_t v21 = sub_10000588C(&qword_10163BBB0);
  __chkstk_darwin(v21 - 8);
  uint64_t v279 = (uint64_t)&v249 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v278 = type metadata accessor for BeaconProductInfoRecord();
  uint64_t v23 = *(char **)(v278 - 8);
  __chkstk_darwin(v278);
  uint64_t v273 = (uint64_t)&v249 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v25 = sub_10000588C(&qword_10163B9F0);
  __chkstk_darwin(v25 - 8);
  uint64_t v294 = (uint64_t)&v249 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v293 = type metadata accessor for OwnedBeaconRecord();
  uint64_t v27 = *(void *)(v293 - 8);
  __chkstk_darwin(v293);
  uint64_t v301 = (uint64_t)&v249 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v29 = type metadata accessor for BeaconStatus(0);
  uint64_t v30 = __chkstk_darwin(v29);
  uint64_t v263 = (uint64_t)&v249 - ((v31 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v32 = __chkstk_darwin(v30);
  uint64_t v262 = (uint64_t)&v249 - v33;
  uint64_t v34 = __chkstk_darwin(v32);
  uint64_t v292 = (uint64_t)&v249 - v35;
  uint64_t v36 = __chkstk_darwin(v34);
  uint64_t v291 = (uint64_t)&v249 - v37;
  uint64_t v38 = __chkstk_darwin(v36);
  uint64_t v269 = (uint64_t)&v249 - v39;
  uint64_t v40 = __chkstk_darwin(v38);
  uint64_t v42 = (char *)&v249 - v41;
  __chkstk_darwin(v40);
  uint64_t v286 = (uint64_t)&v249 - v43;
  uint64_t v44 = type metadata accessor for UUID();
  uint64_t v309 = *(void *)(v44 - 8);
  uint64_t v310 = v44;
  uint64_t v45 = __chkstk_darwin(v44);
  uint64_t v253 = (char *)&v249 - ((v46 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v47 = __chkstk_darwin(v45);
  v277 = (char *)&v249 - v48;
  uint64_t v49 = __chkstk_darwin(v47);
  uint64_t v268 = (char *)&v249 - v50;
  uint64_t v51 = __chkstk_darwin(v49);
  v261 = (char *)&v249 - v52;
  uint64_t v53 = __chkstk_darwin(v51);
  uint64_t v55 = (char *)&v249 - v54;
  __chkstk_darwin(v53);
  unint64_t v57 = (char *)&v249 - v56;
  uint64_t v58 = sub_10000588C(&qword_101638CF0);
  uint64_t v59 = __chkstk_darwin(v58 - 8);
  uint64_t v60 = __chkstk_darwin(v59);
  uint64_t v256 = (char *)&v249 - v61;
  uint64_t v62 = __chkstk_darwin(v60);
  v297 = (char *)&v249 - v63;
  __chkstk_darwin(v62);
  uint64_t v276 = (uint64_t)&v249 - v65;
  uint64_t v266 = v8;
  unint64_t v66 = *(void *)(*(void *)(a1 + *(int *)(v8 + 40)) + 16);
  if (v66 >= 0x100)
  {
    _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
    JUMPOUT(0x100AAB5E4);
  }
  uint64_t v282 = a1;
  if (v66 == 1)
  {
    if (qword_101636F60 != -1) {
      goto LABEL_112;
    }
    goto LABEL_4;
  }
  uint64_t v73 = v2;
  uint64_t v74 = v27;
  v308 = (char *)v73;
  v306 = v23;
  v302 = (int *)v29;
  uint64_t v250 = v64;
  if (qword_101636CD8 != -1) {
    swift_once();
  }
  OS_dispatch_queue.sync<A>(execute:)();
  sub_1010AB718(v311);
  swift_bridgeObjectRelease();
  uint64_t v315 = (uint64_t)&_swiftEmptySetSingleton;
  uint64_t v75 = v309 + 56;
  v299 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v309 + 56);
  v299(v276, 1, 1, v310);
  uint64_t v76 = sub_1004D1434();
  int64_t v77 = 0;
  uint64_t v78 = *(void *)(v76 + 56);
  uint64_t v283 = v76 + 56;
  uint64_t v295 = v76;
  uint64_t v79 = 1 << *(unsigned char *)(v76 + 32);
  uint64_t v80 = -1;
  if (v79 < 64) {
    uint64_t v80 = ~(-1 << v79);
  }
  unint64_t v81 = v80 & v78;
  int64_t v284 = (unint64_t)(v79 + 63) >> 6;
  v303 = (char *)(v75 - 40);
  v296 = (uint64_t (**)(uint64_t, uint64_t, uint64_t))(v75 - 8);
  v307 = (void (**)(char *, uint64_t, uint64_t))(v75 - 24);
  v288 = (unsigned int (**)(uint64_t, uint64_t, uint64_t))(v74 + 48);
  uint64_t v275 = (unsigned int (**)(uint64_t, uint64_t, uint64_t))(v306 + 48);
  v280 = &v315;
  uint64_t v260 = (char *)&v314 + 1;
  uint64_t v264 = (void (**)(uint64_t, uint64_t))(v308 + 8);
  uint64_t v300 = v75;
  v290 = (void (**)(char *, uint64_t))(v75 - 48);
  long long v287 = xmmword_1013540A0;
  long long v274 = 0x8700203uLL;
  v265 = (char *)&type metadata for Any + 8;
  long long v259 = 0x1000303uLL;
  long long v255 = 0x8700303uLL;
  v281 = v42;
  uint64_t v82 = v286;
  v306 = v55;
  uint64_t v83 = v289;
  v308 = v57;
  uint64_t v84 = v297;
  while (1)
  {
    uint64_t v91 = v298;
    if (v81)
    {
      unint64_t v92 = __clz(__rbit64(v81));
      uint64_t v93 = (v81 - 1) & v81;
      int64_t v305 = v77;
      unint64_t v94 = v92 | (v77 << 6);
      goto LABEL_30;
    }
    int64_t v95 = v77 + 1;
    uint64_t v11 = v303;
    if (__OFADD__(v77, 1))
    {
LABEL_110:
      __break(1u);
      goto LABEL_111;
    }
    if (v95 >= v284) {
      goto LABEL_88;
    }
    unint64_t v96 = *(void *)(v283 + 8 * v95);
    int64_t v97 = v77 + 1;
    if (!v96)
    {
      int64_t v97 = v77 + 2;
      if (v77 + 2 >= v284) {
        goto LABEL_88;
      }
      unint64_t v96 = *(void *)(v283 + 8 * v97);
      if (!v96)
      {
        int64_t v97 = v77 + 3;
        if (v77 + 3 >= v284) {
          goto LABEL_88;
        }
        unint64_t v96 = *(void *)(v283 + 8 * v97);
        if (!v96) {
          break;
        }
      }
    }
LABEL_29:
    uint64_t v93 = (v96 - 1) & v96;
    int64_t v305 = v97;
    unint64_t v94 = __clz(__rbit64(v96)) + (v97 << 6);
LABEL_30:
    uint64_t v99 = v309;
    uint64_t v100 = v310;
    uint64_t v101 = *(void *)(v309 + 72);
    uint64_t v102 = *(void (**)(char *, unint64_t, uint64_t))(v309 + 16);
    v102(v84, *(void *)(v295 + 48) + v101 * v94, v310);
    v299((uint64_t)v84, 0, 1, v100);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v99 + 48))(v84, 1, v100) == 1) {
      goto LABEL_89;
    }
    unint64_t v304 = v93;
    uint64_t v103 = *v307;
    uint64_t v104 = v84;
    uint64_t v105 = (uint64_t)v308;
    uint64_t v106 = v310;
    (*v307)(v308, (uint64_t)v104, v310);
    v102((char *)v82, v105, v106);
    uint64_t v107 = v302;
    static Date.distantPast.getter();
    *(unsigned char *)(v82 + v107[5]) = 0;
    *(_OWORD *)(v82 + v107[7]) = v287;
    *(unsigned char *)(v82 + v107[8]) = 0;
    *(void *)(v82 + v107[9]) = 0;
    uint64_t v108 = v294;
    sub_100ACD178(v294);
    if ((*v288)(v108, 1, v293) == 1)
    {
      sub_10001DAB4(v108, &qword_10163B9F0);
      if (qword_101636F60 != -1) {
        swift_once();
      }
      uint64_t v109 = type metadata accessor for Logger();
      sub_100010324(v109, (uint64_t)qword_10170EA18);
      uint64_t v110 = v277;
      v102(v277, (unint64_t)v308, v310);
      unint64_t v111 = Logger.logObject.getter();
      os_log_type_t v112 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v111, v112))
      {
        uint64_t v113 = v110;
        uint64_t v114 = swift_slowAlloc();
        uint64_t v311 = swift_slowAlloc();
        *(_DWORD *)uint64_t v114 = v274;
        uint64_t v314 = 1752392040;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        *(_WORD *)(v114 + 12) = 2081;
        sub_100B22DA4((unint64_t *)&qword_101638B10, (void (*)(uint64_t))&type metadata accessor for UUID);
        uint64_t v115 = v310;
        uint64_t v116 = dispatch thunk of CustomStringConvertible.description.getter();
        uint64_t v314 = sub_1008FA0F0(v116, v117, &v311);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        uint64_t v86 = *v290;
        (*v290)(v113, v115);
        _os_log_impl((void *)&_mh_execute_header, v111, v112, "No beacon record for %{private,mask.hash}s", (uint8_t *)v114, 0x16u);
        swift_arrayDestroy();
        uint64_t v82 = v286;
        uint64_t v85 = v289;
        swift_slowDealloc();
        swift_slowDealloc();
      }
      else
      {
        uint64_t v85 = v83;
        uint64_t v86 = *v290;
        (*v290)(v110, v310);
      }

      uint64_t v84 = v297;
      int64_t v77 = v305;
      unint64_t v81 = v304;
      uint64_t v87 = v292;
      sub_100B30D0C(v82, v292, type metadata accessor for BeaconStatus);
      uint64_t v88 = v291;
      sub_100DD0DE8(v291, v87);
      uint64_t v89 = v88;
      uint64_t v90 = type metadata accessor for BeaconStatus;
      goto LABEL_13;
    }
    sub_100B30DB4(v108, v301, (uint64_t (*)(void))type metadata accessor for OwnedBeaconRecord);
    uint64_t v118 = v279;
    sub_100AE311C(v105, v279);
    uint64_t v119 = v118;
    uint64_t v120 = v118;
    uint64_t v121 = v278;
    if ((*v275)(v120, 1, v278) == 1)
    {
      sub_10001DAB4(v119, &qword_10163BBB0);
      long long v122 = v302;
      uint64_t v123 = (uint64_t)v285;
    }
    else
    {
      uint64_t v124 = v119;
      uint64_t v125 = v273;
      sub_100B30DB4(v124, v273, (uint64_t (*)(void))type metadata accessor for BeaconProductInfoRecord);
      uint64_t v11 = *(char **)(v125 + *(int *)(v121 + 72));
      long long v122 = v302;
      uint64_t v123 = (uint64_t)v285;
      if (v11)
      {
        uint64_t v126 = *((void *)v11 + 2);
        if (v126)
        {
          uint64_t v127 = 88;
          uint64_t v128 = 1;
          while (1)
          {
            int v129 = v11[v127];
            if (v129 != 2 && (v129 & 1) != 0) {
              break;
            }
            if (v126 == v128) {
              goto LABEL_47;
            }
            v127 += 64;
            if (__OFADD__(v128++, 1))
            {
              __break(1u);
              goto LABEL_110;
            }
          }
          uint64_t v194 = qword_101636F60;
          swift_bridgeObjectRetain();
          if (v194 != -1) {
            swift_once();
          }
          uint64_t v195 = type metadata accessor for Logger();
          sub_100010324(v195, (uint64_t)qword_10170EA18);
          uint64_t v196 = v254;
          sub_100B30D0C(v282, v254, type metadata accessor for OwnedBeaconGroup);
          swift_bridgeObjectRetain();
          v197 = Logger.logObject.getter();
          os_log_type_t v198 = static os_log_type_t.default.getter();
          LODWORD(v267) = v198;
          if (os_log_type_enabled(v197, v198))
          {
            uint64_t v199 = swift_slowAlloc();
            uint64_t v249 = swift_slowAlloc();
            uint64_t v311 = v249;
            *(_DWORD *)uint64_t v199 = v255;
            uint64_t v314 = 1752392040;
            UnsafeMutableRawBufferPointer.copyMemory(from:)();
            *(_WORD *)(v199 + 12) = 2081;
            os_log_t v251 = v197;
            sub_100B22DA4((unint64_t *)&qword_101638B10, (void (*)(uint64_t))&type metadata accessor for UUID);
            uint64_t v200 = dispatch thunk of CustomStringConvertible.description.getter();
            uint64_t v314 = sub_1008FA0F0(v200, v201, &v311);
            UnsafeMutableRawBufferPointer.copyMemory(from:)();
            swift_bridgeObjectRelease();
            sub_100B310AC(v196, type metadata accessor for OwnedBeaconGroup);
            *(_WORD *)(v199 + 22) = 2080;
            swift_bridgeObjectRetain();
            uint64_t v202 = Array.description.getter();
            unint64_t v204 = v203;
            swift_bridgeObjectRelease();
            uint64_t v314 = sub_1008FA0F0(v202, v204, &v311);
            UnsafeMutableRawBufferPointer.copyMemory(from:)();
            swift_bridgeObjectRelease_n();
            uint64_t v123 = (uint64_t)v285;
            swift_bridgeObjectRelease();
            os_log_t v205 = v251;
            _os_log_impl((void *)&_mh_execute_header, v251, (os_log_type_t)v267, "Group %{private,mask.hash}s multipart layout template: %s", (uint8_t *)v199, 0x20u);
            swift_arrayDestroy();
            swift_slowDealloc();
            uint64_t v82 = v286;
            uint64_t v83 = v289;
            swift_slowDealloc();
          }
          else
          {
            swift_bridgeObjectRelease_n();

            sub_100B310AC(v196, type metadata accessor for OwnedBeaconGroup);
          }
          sub_100B310AC(v273, (uint64_t (*)(void))type metadata accessor for BeaconProductInfoRecord);
          uint64_t v137 = v276;
          sub_10001DAB4(v276, &qword_101638CF0);
          goto LABEL_55;
        }
      }
LABEL_47:
      sub_100B310AC(v125, (uint64_t (*)(void))type metadata accessor for BeaconProductInfoRecord);
    }
    if ((sub_100D1C588() & 0x1FF) == 2)
    {
      if (qword_101636F60 != -1) {
        swift_once();
      }
      uint64_t v131 = type metadata accessor for Logger();
      sub_100010324(v131, (uint64_t)qword_10170EA18);
      sub_100B30D0C(v282, v91, type metadata accessor for OwnedBeaconGroup);
      uint64_t v132 = Logger.logObject.getter();
      os_log_type_t v133 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v132, v133))
      {
        uint64_t v134 = swift_slowAlloc();
        uint64_t v311 = swift_slowAlloc();
        *(_DWORD *)uint64_t v134 = v259;
        LOBYTE(v314) = 2;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        *(_WORD *)(v134 + 5) = 2160;
        uint64_t v314 = 1752392040;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        *(_WORD *)(v134 + 15) = 2081;
        sub_100B22DA4((unint64_t *)&qword_101638B10, (void (*)(uint64_t))&type metadata accessor for UUID);
        uint64_t v135 = dispatch thunk of CustomStringConvertible.description.getter();
        uint64_t v314 = sub_1008FA0F0(v135, v136, &v311);
        long long v122 = v302;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        sub_100B310AC(v298, type metadata accessor for OwnedBeaconGroup);
        _os_log_impl((void *)&_mh_execute_header, v132, v133, "AlphaWasp: hardcoding primary part %hhu for group %{private,mask.hash}s.", (uint8_t *)v134, 0x19u);
        swift_arrayDestroy();
        uint64_t v82 = v286;
        uint64_t v83 = v289;
        swift_slowDealloc();
        uint64_t v137 = v276;
        swift_slowDealloc();
      }
      else
      {

        sub_100B310AC(v91, type metadata accessor for OwnedBeaconGroup);
        uint64_t v137 = v276;
      }
      sub_10001DAB4(v137, &qword_101638CF0);
      uint64_t v123 = (uint64_t)v285;
LABEL_55:
      uint64_t v138 = v310;
      v102((char *)v137, (unint64_t)v308, v310);
      v299(v137, 0, 1, v138);
    }
    sub_100AE9138((uint64_t)v308, v123);
    uint64_t v139 = sub_10000588C(&qword_1016511B0);
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v139 - 8) + 48))(v123, 1, v139) == 1)
    {
      sub_10001DAB4(v123, (uint64_t *)&unk_1016511A0);
      if (qword_101636F60 != -1) {
        swift_once();
      }
      uint64_t v140 = type metadata accessor for Logger();
      sub_100010324(v140, (uint64_t)qword_10170EA18);
      uint64_t v141 = v268;
      v102(v268, (unint64_t)v308, v310);
      uint64_t v142 = Logger.logObject.getter();
      os_log_type_t v143 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v142, v143))
      {
        uint64_t v144 = v141;
        uint64_t v145 = swift_slowAlloc();
        uint64_t v311 = swift_slowAlloc();
        *(_DWORD *)uint64_t v145 = v274;
        uint64_t v314 = 1752392040;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        *(_WORD *)(v145 + 12) = 2081;
        sub_100B22DA4((unint64_t *)&qword_101638B10, (void (*)(uint64_t))&type metadata accessor for UUID);
        uint64_t v146 = v310;
        uint64_t v147 = dispatch thunk of CustomStringConvertible.description.getter();
        uint64_t v314 = sub_1008FA0F0(v147, v148, &v311);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        uint64_t v86 = *v290;
        (*v290)(v144, v146);
        _os_log_impl((void *)&_mh_execute_header, v142, v143, "No beacon status for %{private,mask.hash}s", (uint8_t *)v145, 0x16u);
        swift_arrayDestroy();
        uint64_t v82 = v286;
        uint64_t v85 = v289;
        swift_slowDealloc();
        swift_slowDealloc();
      }
      else
      {
        uint64_t v85 = v83;
        uint64_t v86 = *v290;
        (*v290)(v141, v310);
      }

      uint64_t v84 = v297;
      int64_t v77 = v305;
      unint64_t v81 = v304;
      uint64_t v167 = v292;
      sub_100B30D0C(v82, v292, type metadata accessor for BeaconStatus);
      uint64_t v168 = v291;
      sub_100DD0DE8(v291, v167);
      sub_100B310AC(v168, type metadata accessor for BeaconStatus);
      uint64_t v90 = (uint64_t (*)(void))type metadata accessor for OwnedBeaconRecord;
      uint64_t v89 = v301;
LABEL_13:
      sub_100B310AC(v89, v90);
      sub_100B310AC(v82, type metadata accessor for BeaconStatus);
      v86(v308, v310);
      uint64_t v83 = v85;
    }
    else
    {
      uint64_t v267 = (uint64_t)v103;
      uint64_t v149 = v269;
      sub_100B30DB4(v123, v269, type metadata accessor for BeaconStatus);
      uint64_t v150 = (uint64_t)v281;
      sub_100B30DB4(v149, (uint64_t)v281, type metadata accessor for BeaconStatus);
      BOOL v151 = v270;
      Date.addingTimeInterval(_:)();
      uint64_t v152 = v271;
      static Date.trustedNow.getter(v271);
      char v153 = static Date.> infix(_:_:)();
      uint64_t v154 = *v264;
      uint64_t v155 = v152;
      uint64_t v156 = v272;
      (*v264)(v155, v272);
      v154((uint64_t)v151, v156);
      if (v153)
      {
        unsigned int v157 = sub_1000D07F4(*(unsigned char *)(v150 + v122[5]) & 0xB);
        uint64_t v158 = sub_100B37FD8(v301, (v157 >> 8) & 1, HIWORD(v157) & 1, HIBYTE(v157) & 1, v289);
        int64_t v159 = v158[2];
        if (v159)
        {
          uint64_t v314 = (uint64_t)_swiftEmptyArrayStorage;
          sub_1000B7034(0, v159, 0);
          uint64_t v160 = (uint64_t)(v158 + 4);
          long long v161 = (char *)v314;
          v162 = (void (*)(char *, char *, uint64_t))v267;
          do
          {
            sub_10001D010(v160, (uint64_t)&v311);
            uint64_t v164 = v312;
            uint64_t v163 = v313;
            sub_10001CD44(&v311, v312);
            (*(void (**)(uint64_t))(*(void *)(*(void *)(v163 + 8) + 8) + 32))(v164);
            _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)&v311);
            if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
            {
              sub_1000B7034(0, *((void *)v161 + 2) + 1, 1);
              long long v161 = (char *)v314;
            }
            unint64_t v166 = *((void *)v161 + 2);
            unint64_t v165 = *((void *)v161 + 3);
            if (v166 >= v165 >> 1)
            {
              sub_1000B7034(v165 > 1, v166 + 1, 1);
              long long v161 = (char *)v314;
            }
            *((void *)v161 + 2) = v166 + 1;
            v162(&v161[((*(unsigned __int8 *)(v309 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v309 + 80))+ v166 * v101], v306, v310);
            uint64_t v314 = (uint64_t)v161;
            v160 += 40;
            --v159;
          }
          while (v159);
          swift_bridgeObjectRelease();
          long long v122 = v302;
        }
        else
        {
          swift_bridgeObjectRelease();
          long long v161 = (char *)_swiftEmptyArrayStorage;
        }
        uint64_t v186 = (uint64_t)v281;
        uint64_t v187 = v291;
        sub_100B30D0C((uint64_t)v281, v291, type metadata accessor for BeaconStatus);
        uint64_t v188 = sub_101158244((uint64_t)v161);
        swift_bridgeObjectRelease();
        uint64_t v189 = v122[9];
        swift_bridgeObjectRelease();
        *(void *)(v187 + v189) = v188;
        uint64_t v190 = v262;
        sub_100B30D0C(v187, v262, type metadata accessor for BeaconStatus);
        uint64_t v191 = v292;
        sub_100DD0DE8(v292, v190);
        sub_100B310AC(v191, type metadata accessor for BeaconStatus);
        sub_100B310AC(v186, type metadata accessor for BeaconStatus);
        sub_100B310AC(v301, (uint64_t (*)(void))type metadata accessor for OwnedBeaconRecord);
        uint64_t v192 = v286;
        sub_100B310AC(v286, type metadata accessor for BeaconStatus);
        (*v290)(v308, v310);
        uint64_t v193 = v187;
        uint64_t v82 = v192;
        sub_100B310AC(v193, type metadata accessor for BeaconStatus);
        uint64_t v83 = v289;
        uint64_t v84 = v297;
        int64_t v77 = v305;
        unint64_t v81 = v304;
      }
      else
      {
        if (qword_101636F60 != -1) {
          swift_once();
        }
        uint64_t v169 = type metadata accessor for Logger();
        sub_100010324(v169, (uint64_t)qword_10170EA18);
        uint64_t v170 = v261;
        v102(v261, (unint64_t)v308, v310);
        uint64_t v171 = v263;
        sub_100B30D0C((uint64_t)v281, v263, type metadata accessor for BeaconStatus);
        unint64_t v172 = Logger.logObject.getter();
        os_log_type_t v173 = static os_log_type_t.default.getter();
        int v174 = v173;
        BOOL v175 = os_log_type_enabled(v172, v173);
        unint64_t v81 = v304;
        if (v175)
        {
          uint64_t v176 = swift_slowAlloc();
          uint64_t v267 = swift_slowAlloc();
          uint64_t v311 = v267;
          *(_DWORD *)uint64_t v176 = v255;
          uint64_t v314 = 1752392040;
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          *(_WORD *)(v176 + 12) = 2081;
          sub_100B22DA4((unint64_t *)&qword_101638B10, (void (*)(uint64_t))&type metadata accessor for UUID);
          LODWORD(v251) = v174;
          uint64_t v177 = v310;
          uint64_t v178 = dispatch thunk of CustomStringConvertible.description.getter();
          uint64_t v314 = sub_1008FA0F0(v178, v179, &v311);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease();
          uint64_t v180 = v177;
          uint64_t v181 = *v290;
          (*v290)(v170, v180);
          *(_WORD *)(v176 + 22) = 2080;
          sub_1000D07F4(*(unsigned char *)(v171 + v302[5]) & 0xB);
          uint64_t v182 = sub_1000D0108();
          uint64_t v314 = sub_1008FA0F0(v182, v183, &v311);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease();
          sub_100B310AC(v171, type metadata accessor for BeaconStatus);
          _os_log_impl((void *)&_mh_execute_header, v172, (os_log_type_t)v251, "Beacon status for %{private,mask.hash}s expired. %s", (uint8_t *)v176, 0x20u);
          swift_arrayDestroy();
          swift_slowDealloc();
          swift_slowDealloc();
        }
        else
        {
          uint64_t v181 = *v290;
          (*v290)(v170, v310);
          sub_100B310AC(v171, type metadata accessor for BeaconStatus);
        }

        uint64_t v82 = v286;
        int64_t v77 = v305;
        uint64_t v184 = v292;
        sub_100B30D0C(v286, v292, type metadata accessor for BeaconStatus);
        uint64_t v185 = v291;
        sub_100DD0DE8(v291, v184);
        sub_100B310AC(v185, type metadata accessor for BeaconStatus);
        sub_100B310AC((uint64_t)v281, type metadata accessor for BeaconStatus);
        sub_100B310AC(v301, (uint64_t (*)(void))type metadata accessor for OwnedBeaconRecord);
        sub_100B310AC(v82, type metadata accessor for BeaconStatus);
        v181(v308, v310);
        uint64_t v84 = v297;
        uint64_t v83 = v289;
      }
    }
  }
  uint64_t v98 = v77 + 4;
  if (v77 + 4 >= v284)
  {
LABEL_88:
    v299((uint64_t)v84, 1, 1, v310);
LABEL_89:
    swift_release();
    uint64_t v208 = sub_100AFB97C(v315, v276);
    swift_bridgeObjectRelease();
    if (qword_101636F60 != -1) {
      swift_once();
    }
    uint64_t v209 = type metadata accessor for Logger();
    sub_100010324(v209, (uint64_t)qword_10170EA18);
    uint64_t v210 = v257;
    sub_100B30D0C(v282, v257, type metadata accessor for OwnedBeaconGroup);
    swift_bridgeObjectRetain_n();
    v211 = Logger.logObject.getter();
    os_log_type_t v212 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v211, v212))
    {
      uint64_t v213 = swift_slowAlloc();
      uint64_t v311 = swift_slowAlloc();
      *(_DWORD *)uint64_t v213 = v255;
      uint64_t v314 = 1752392040;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v213 + 12) = 2081;
      sub_100B22DA4((unint64_t *)&qword_101638B10, (void (*)(uint64_t))&type metadata accessor for UUID);
      uint64_t v214 = dispatch thunk of CustomStringConvertible.description.getter();
      uint64_t v314 = sub_1008FA0F0(v214, v215, &v311);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      sub_100B310AC(v210, type metadata accessor for OwnedBeaconGroup);
      *(_WORD *)(v213 + 22) = 2080;
      swift_bridgeObjectRetain();
      sub_10000588C((uint64_t *)&unk_101653DC0);
      sub_100062734(&qword_101659310, (uint64_t *)&unk_101653DC0);
      uint64_t v216 = Set.description.getter();
      unint64_t v218 = v217;
      swift_bridgeObjectRelease();
      uint64_t v314 = sub_1008FA0F0(v216, v218, &v311);
      uint64_t v219 = v276;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v211, v212, "MultipartStatus for %{private,mask.hash}s: %s)", (uint8_t *)v213, 0x20u);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      uint64_t v220 = (uint64_t)v258;
      uint64_t v221 = (uint64_t)v256;
    }
    else
    {
      sub_100B310AC(v210, type metadata accessor for OwnedBeaconGroup);

      swift_bridgeObjectRelease_n();
      uint64_t v220 = (uint64_t)v258;
      uint64_t v221 = (uint64_t)v256;
      uint64_t v219 = v276;
    }
    sub_10001D074(v219, v221, &qword_101638CF0);
    int v222 = (*v296)(v221, 1, v310);
    uint64_t v223 = v282;
    if (v222 == 1)
    {
      sub_10001DAB4(v221, &qword_101638CF0);
      sub_100B30D0C(v223, v220, type metadata accessor for OwnedBeaconGroup);
      uint64_t v224 = Logger.logObject.getter();
      os_log_type_t v225 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v224, v225))
      {
        uint64_t v226 = swift_slowAlloc();
        uint64_t v311 = swift_slowAlloc();
        *(_DWORD *)uint64_t v226 = v274;
        uint64_t v314 = 1752392040;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        *(_WORD *)(v226 + 12) = 2081;
        sub_100B22DA4((unint64_t *)&qword_101638B10, (void (*)(uint64_t))&type metadata accessor for UUID);
        uint64_t v227 = dispatch thunk of CustomStringConvertible.description.getter();
        uint64_t v314 = sub_1008FA0F0(v227, v228, &v311);
        uint64_t v219 = v276;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        sub_100B310AC(v220, type metadata accessor for OwnedBeaconGroup);
        _os_log_impl((void *)&_mh_execute_header, v224, v225, "No primary beacon in group %{private,mask.hash}s.", (uint8_t *)v226, 0x16u);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
      }
      else
      {
        sub_100B310AC(v220, type metadata accessor for OwnedBeaconGroup);
      }

      uint64_t v233 = v282;
      uint64_t v234 = sub_100AE5AA8(v282);
      if (v234 == 3)
      {
        sub_10001DAB4(v219, &qword_101638CF0);
        return v208;
      }
      uint64_t v236 = v234;
      uint64_t v237 = v250;
      v299(v250, 1, 1, v310);
      uint64_t v207 = (uint64_t)sub_100B38580((uint64_t)v208, v237);
      swift_bridgeObjectRelease();
      sub_10001DAB4(v237, &qword_101638CF0);
      uint64_t v238 = v252;
      sub_100B30D0C(v233, v252, type metadata accessor for OwnedBeaconGroup);
      swift_bridgeObjectRetain_n();
      uint64_t v239 = Logger.logObject.getter();
      os_log_type_t v240 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v239, v240))
      {
        uint64_t v241 = swift_slowAlloc();
        uint64_t v309 = swift_slowAlloc();
        uint64_t v311 = v309;
        *(_DWORD *)uint64_t v241 = 141558787;
        uint64_t v314 = 1752392040;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        *(_WORD *)(v241 + 12) = 2081;
        sub_100B22DA4((unint64_t *)&qword_101638B10, (void (*)(uint64_t))&type metadata accessor for UUID);
        uint64_t v242 = dispatch thunk of CustomStringConvertible.description.getter();
        uint64_t v314 = sub_1008FA0F0(v242, v243, &v311);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        sub_100B310AC(v238, type metadata accessor for OwnedBeaconGroup);
        *(_WORD *)(v241 + 22) = 2080;
        uint64_t v244 = 0x6574617261706573;
        unint64_t v245 = 0xE900000000000064;
        switch(v236)
        {
          case 1:
            break;
          case 2:
            unint64_t v245 = 0xE700000000000000;
            uint64_t v244 = 0x646570756F7267;
            break;
          case 4:
            unint64_t v245 = 0xEF657361436E4964;
            break;
          default:
            unint64_t v245 = 0xE700000000000000;
            uint64_t v244 = 0x6E776F6E6B6E75;
            break;
        }
        uint64_t v314 = sub_1008FA0F0(v244, v245, &v311);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        *(_WORD *)(v241 + 32) = 2080;
        swift_bridgeObjectRetain();
        sub_10000588C((uint64_t *)&unk_101653DC0);
        sub_100062734(&qword_101659310, (uint64_t *)&unk_101653DC0);
        uint64_t v246 = Set.description.getter();
        unint64_t v248 = v247;
        swift_bridgeObjectRelease();
        uint64_t v314 = sub_1008FA0F0(v246, v248, &v311);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease_n();
        swift_bridgeObjectRelease();
        _os_log_impl((void *)&_mh_execute_header, v239, v240, "Group %{private,mask.hash}s legacy status: %s. After separated: %s.", (uint8_t *)v241, 0x2Au);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();

        uint64_t v232 = v276;
      }
      else
      {
        swift_bridgeObjectRelease_n();

        sub_100B310AC(v238, type metadata accessor for OwnedBeaconGroup);
        uint64_t v232 = v219;
      }
    }
    else
    {
      uint64_t v229 = v253;
      uint64_t v230 = v310;
      (*v307)(v253, v221, v310);
      uint64_t v231 = v250;
      (*(void (**)(uint64_t, char *, uint64_t))v303)(v250, v229, v230);
      v299(v231, 0, 1, v230);
      uint64_t v207 = (uint64_t)sub_100B38580((uint64_t)v208, v231);
      swift_bridgeObjectRelease();
      sub_10001DAB4(v231, &qword_101638CF0);
      (*v290)(v229, v230);
      uint64_t v232 = v219;
    }
    sub_10001DAB4(v232, &qword_101638CF0);
    return (void *)v207;
  }
  unint64_t v96 = *(void *)(v283 + 8 * v98);
  if (v96)
  {
    int64_t v97 = v77 + 4;
    goto LABEL_29;
  }
  while (1)
  {
    int64_t v97 = v98 + 1;
    if (__OFADD__(v98, 1)) {
      break;
    }
    if (v97 >= v284) {
      goto LABEL_88;
    }
    unint64_t v96 = *(void *)(v283 + 8 * v97);
    ++v98;
    if (v96) {
      goto LABEL_29;
    }
  }
LABEL_111:
  __break(1u);
LABEL_112:
  swift_once();
LABEL_4:
  uint64_t v67 = type metadata accessor for Logger();
  sub_100010324(v67, (uint64_t)qword_10170EA18);
  sub_100B30D0C(v282, (uint64_t)v11, type metadata accessor for OwnedBeaconGroup);
  uint64_t v68 = Logger.logObject.getter();
  os_log_type_t v69 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v68, v69))
  {
    uint64_t v70 = swift_slowAlloc();
    uint64_t v311 = swift_slowAlloc();
    *(_DWORD *)uint64_t v70 = 141558275;
    uint64_t v315 = 1752392040;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v70 + 12) = 2081;
    sub_100B22DA4((unint64_t *)&qword_101638B10, (void (*)(uint64_t))&type metadata accessor for UUID);
    uint64_t v71 = dispatch thunk of CustomStringConvertible.description.getter();
    uint64_t v315 = sub_1008FA0F0(v71, v72, &v311);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    sub_100B310AC((uint64_t)v11, type metadata accessor for OwnedBeaconGroup);
    _os_log_impl((void *)&_mh_execute_header, v68, v69, "%{private,mask.hash}s is a single beacon group, returning default set of 1 beacon", (uint8_t *)v70, 0x16u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    sub_100B310AC((uint64_t)v11, type metadata accessor for OwnedBeaconGroup);
  }

  sub_10000588C(&qword_101659318);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_101342130;
  *(void *)(inited + 32) = sub_1004D1434();
  uint64_t v207 = sub_1011592A4(inited);
  swift_setDeallocating();
  sub_10000588C((uint64_t *)&unk_101653DC0);
  swift_arrayDestroy();
  return (void *)v207;
}

uint64_t sub_100AAB5F8(uint64_t a1)
{
  uint64_t v154 = (char *)a1;
  uint64_t v2 = sub_10000588C(&qword_10163BBB0);
  __chkstk_darwin(v2 - 8);
  uint64_t v140 = (char *)&v135 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v139 = type metadata accessor for BeaconProductInfoRecord();
  uint64_t v137 = *(void *)(v139 - 8);
  __chkstk_darwin(v139);
  uint64_t v135 = (uint64_t)&v135 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = sub_10000588C(&qword_10163BB20);
  __chkstk_darwin(v5 - 8);
  uint64_t v142 = (uint64_t)&v135 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v144 = type metadata accessor for OwnedBeaconGroup(0);
  uint64_t v141 = *(void *)(v144 - 8);
  __chkstk_darwin(v144);
  uint64_t v143 = (uint64_t)&v135 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = sub_10000588C(&qword_101638CF0);
  __chkstk_darwin(v8 - 8);
  uint64_t v147 = (uint64_t)&v135 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = type metadata accessor for UUID();
  uint64_t v152 = *(void *)(v10 - 8);
  uint64_t v153 = v10;
  uint64_t v11 = __chkstk_darwin(v10);
  BOOL v151 = (char *)&v135 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = __chkstk_darwin(v11);
  unint64_t v148 = (char *)&v135 - v14;
  uint64_t v15 = __chkstk_darwin(v13);
  uint64_t v146 = (char *)&v135 - v16;
  uint64_t v17 = __chkstk_darwin(v15);
  uint64_t v138 = (char *)&v135 - v18;
  uint64_t v19 = __chkstk_darwin(v17);
  unint64_t v136 = (char *)&v135 - v20;
  __chkstk_darwin(v19);
  uint64_t v145 = (char *)&v135 - v21;
  uint64_t v22 = sub_10000588C(&qword_10163B9F0);
  __chkstk_darwin(v22 - 8);
  uint64_t v24 = (char *)&v135 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v150 = type metadata accessor for OwnedBeaconRecord();
  uint64_t v25 = *(void *)(v150 - 8);
  __chkstk_darwin(v150);
  uint64_t v149 = (uint64_t)&v135 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v27 = sub_10000588C(&qword_10163B9E0);
  __chkstk_darwin(v27);
  uint64_t v29 = (char *)&v135 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v30 = type metadata accessor for BeaconNamingRecord();
  uint64_t v31 = *(void *)(v30 - 8);
  __chkstk_darwin(v30);
  uint64_t v33 = (char *)&v135 - ((v32 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v155 = v1;
  uint64_t v34 = (uint64_t)v154;
  uint64_t v156 = (uint64_t)v154;
  QueueSynchronizer.conditionalSync<A>(_:)();
  uint64_t v35 = (char *)v30;
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v31 + 48))(v29, 1, v30) == 1)
  {
    sub_10001DAB4((uint64_t)v29, &qword_10163B9E0);
    if (qword_101636F50 != -1) {
      swift_once();
    }
    uint64_t v36 = type metadata accessor for Logger();
    sub_100010324(v36, (uint64_t)qword_10170E9E8);
    uint64_t v37 = v151;
    uint64_t v38 = v152;
    uint64_t v39 = v153;
    (*(void (**)(char *, uint64_t, uint64_t))(v152 + 16))(v151, v34, v153);
    uint64_t v40 = Logger.logObject.getter();
    os_log_type_t v41 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v40, v41))
    {
      uint64_t v42 = swift_slowAlloc();
      uint64_t v157 = swift_slowAlloc();
      *(_DWORD *)uint64_t v42 = 141558275;
      uint64_t v159 = 1752392040;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v42 + 12) = 2081;
      sub_100B22DA4((unint64_t *)&qword_101638B10, (void (*)(uint64_t))&type metadata accessor for UUID);
      uint64_t v43 = dispatch thunk of CustomStringConvertible.description.getter();
      uint64_t v159 = sub_1008FA0F0(v43, v44, &v157);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      (*(void (**)(char *, uint64_t))(v38 + 8))(v37, v39);
      _os_log_impl((void *)&_mh_execute_header, v40, v41, "groupedBeaconDisplayName: No beacon naming record for beacon %{private,mask.hash}s", (uint8_t *)v42, 0x16u);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      (*(void (**)(char *, uint64_t))(v38 + 8))(v37, v39);
    }

    return 0;
  }
  sub_100B30DB4((uint64_t)v29, (uint64_t)v33, (uint64_t (*)(void))type metadata accessor for BeaconNamingRecord);
  uint64_t v45 = v34;
  sub_100ACD178((uint64_t)v24);
  uint64_t v46 = v150;
  uint64_t v47 = (uint64_t)v33;
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v25 + 48))(v24, 1, v150) == 1)
  {
    sub_10001DAB4((uint64_t)v24, &qword_10163B9F0);
    uint64_t v48 = v153;
    if (qword_101636F50 != -1) {
      swift_once();
    }
    uint64_t v49 = type metadata accessor for Logger();
    sub_100010324(v49, (uint64_t)qword_10170E9E8);
    uint64_t v50 = v152;
    uint64_t v51 = v148;
    (*(void (**)(char *, uint64_t, uint64_t))(v152 + 16))(v148, v45, v48);
    uint64_t v52 = Logger.logObject.getter();
    os_log_type_t v53 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v52, v53))
    {
      uint64_t v54 = swift_slowAlloc();
      BOOL v151 = v35;
      uint64_t v55 = v54;
      uint64_t v56 = swift_slowAlloc();
      uint64_t v154 = v33;
      uint64_t v157 = v56;
      *(_DWORD *)uint64_t v55 = 141558275;
      uint64_t v159 = 1752392040;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v55 + 12) = 2081;
      sub_100B22DA4((unint64_t *)&qword_101638B10, (void (*)(uint64_t))&type metadata accessor for UUID);
      uint64_t v57 = dispatch thunk of CustomStringConvertible.description.getter();
      uint64_t v159 = sub_1008FA0F0(v57, v58, &v157);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      (*(void (**)(char *, uint64_t))(v50 + 8))(v51, v48);
      _os_log_impl((void *)&_mh_execute_header, v52, v53, "groupedBeaconDisplayName: No beacon record for beacon identifier %{private,mask.hash}s", (uint8_t *)v55, 0x16u);
      swift_arrayDestroy();
      uint64_t v47 = (uint64_t)v154;
      swift_slowDealloc();
      uint64_t v35 = v151;
      swift_slowDealloc();
    }
    else
    {
      (*(void (**)(char *, uint64_t))(v50 + 8))(v51, v48);
    }

LABEL_25:
    uint64_t v59 = *(void *)(v47 + *((int *)v35 + 8));
    swift_bridgeObjectRetain();
    goto LABEL_26;
  }
  uint64_t v60 = (uint64_t)v24;
  uint64_t v61 = v149;
  sub_100B30DB4(v60, v149, (uint64_t (*)(void))type metadata accessor for OwnedBeaconRecord);
  uint64_t v62 = v61 + *(int *)(v46 + 28);
  uint64_t v63 = v147;
  sub_10001D074(v62, v147, &qword_101638CF0);
  uint64_t v65 = v152;
  uint64_t v64 = v153;
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v152 + 48))(v63, 1, v153) == 1)
  {
    unint64_t v66 = &qword_101638CF0;
LABEL_19:
    sub_10001DAB4(v63, v66);
    os_log_type_t v69 = v146;
    if (qword_101636F50 != -1) {
      swift_once();
    }
    uint64_t v70 = type metadata accessor for Logger();
    sub_100010324(v70, (uint64_t)qword_10170E9E8);
    (*(void (**)(char *, uint64_t, uint64_t))(v65 + 16))(v69, v45, v64);
    uint64_t v71 = Logger.logObject.getter();
    os_log_type_t v72 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v71, v72))
    {
      uint64_t v73 = swift_slowAlloc();
      BOOL v151 = v35;
      uint64_t v74 = v73;
      uint64_t v157 = swift_slowAlloc();
      *(_DWORD *)uint64_t v74 = 141558275;
      uint64_t v159 = 1752392040;
      uint64_t v154 = (char *)v47;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v74 + 12) = 2081;
      sub_100B22DA4((unint64_t *)&qword_101638B10, (void (*)(uint64_t))&type metadata accessor for UUID);
      uint64_t v75 = dispatch thunk of CustomStringConvertible.description.getter();
      uint64_t v159 = sub_1008FA0F0(v75, v76, &v157);
      uint64_t v47 = (uint64_t)v154;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      (*(void (**)(char *, uint64_t))(v65 + 8))(v69, v64);
      _os_log_impl((void *)&_mh_execute_header, v71, v72, "groupedBeaconDisplayName: Beacon %{private,mask.hash}s does not belong to an item group or group record is missing.", (uint8_t *)v74, 0x16u);
      swift_arrayDestroy();
      swift_slowDealloc();
      uint64_t v35 = v151;
      swift_slowDealloc();

      uint64_t v77 = v149;
    }
    else
    {

      (*(void (**)(char *, uint64_t))(v65 + 8))(v69, v64);
      uint64_t v77 = v61;
    }
    sub_100B310AC(v77, (uint64_t (*)(void))type metadata accessor for OwnedBeaconRecord);
    goto LABEL_25;
  }
  uint64_t v67 = (uint64_t)v145;
  (*(void (**)(char *, uint64_t, uint64_t))(v65 + 32))(v145, v63, v64);
  uint64_t v63 = v142;
  sub_100AE75E0(v67, v142);
  uint64_t v68 = v144;
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v141 + 48))(v63, 1, v144) == 1)
  {
    (*(void (**)(uint64_t, uint64_t))(v65 + 8))(v67, v64);
    unint64_t v66 = &qword_10163BB20;
    goto LABEL_19;
  }
  uint64_t v81 = v143;
  sub_100B30DB4(v63, v143, type metadata accessor for OwnedBeaconGroup);
  unint64_t v82 = *(void *)(*(void *)(v81 + *(int *)(v68 + 40)) + 16);
  if (v82 < 0x100)
  {
    uint64_t v83 = (uint64_t)v140;
    if (v82 == 1)
    {
      if (qword_101636F50 != -1) {
        swift_once();
      }
      uint64_t v84 = type metadata accessor for Logger();
      sub_100010324(v84, (uint64_t)qword_10170E9E8);
      uint64_t v85 = v138;
      (*(void (**)(char *, char *, uint64_t))(v65 + 16))(v138, v154, v64);
      uint64_t v86 = Logger.logObject.getter();
      os_log_type_t v87 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v86, v87))
      {
        uint64_t v88 = v85;
        uint64_t v89 = swift_slowAlloc();
        uint64_t v90 = swift_slowAlloc();
        uint64_t v154 = (char *)v47;
        BOOL v151 = (char *)v90;
        uint64_t v157 = v90;
        *(_DWORD *)uint64_t v89 = 141558275;
        uint64_t v159 = 1752392040;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        *(_WORD *)(v89 + 12) = 2081;
        sub_100B22DA4((unint64_t *)&qword_101638B10, (void (*)(uint64_t))&type metadata accessor for UUID);
        uint64_t v91 = dispatch thunk of CustomStringConvertible.description.getter();
        uint64_t v159 = sub_1008FA0F0(v91, v92, &v157);
        uint64_t v68 = v144;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        uint64_t v93 = *(void (**)(char *, uint64_t))(v65 + 8);
        v93(v88, v64);
        _os_log_impl((void *)&_mh_execute_header, v86, v87, "groupedBeaconDisplayName: Beacon %{private,mask.hash}s is from a single group.", (uint8_t *)v89, 0x16u);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();

        v93(v145, v64);
        sub_100B310AC(v149, (uint64_t (*)(void))type metadata accessor for OwnedBeaconRecord);
        uint64_t v94 = (uint64_t)v154;
      }
      else
      {

        uint64_t v99 = *(void (**)(char *, uint64_t))(v65 + 8);
        v99(v85, v64);
        v99((char *)v67, v64);
        sub_100B310AC(v61, (uint64_t (*)(void))type metadata accessor for OwnedBeaconRecord);
        uint64_t v94 = v47;
      }
      sub_100B310AC(v94, (uint64_t (*)(void))type metadata accessor for BeaconNamingRecord);
      uint64_t v100 = v143;
      uint64_t v59 = *(void *)(v143 + *(int *)(v68 + 36));
      swift_bridgeObjectRetain();
      uint64_t v78 = type metadata accessor for OwnedBeaconGroup;
      uint64_t v79 = v100;
      goto LABEL_27;
    }
    uint64_t v95 = sub_100B354CC(v61);
    sub_100AE311C((uint64_t)v154, v83);
    uint64_t v96 = (uint64_t)v140;
    uint64_t v97 = v139;
    int v98 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v137 + 48))(v140, 1, v139);
    if (v98 == 1)
    {
      sub_10001DAB4(v96, &qword_10163BBB0);
    }
    else
    {
      uint64_t v101 = v96;
      uint64_t v102 = v135;
      sub_100B30DB4(v101, v135, (uint64_t (*)(void))type metadata accessor for BeaconProductInfoRecord);
      uint64_t v103 = *(void *)(v102 + *(int *)(v97 + 72));
      if (v103)
      {
        uint64_t v104 = *(void *)(v103 + 16);
        if (v104)
        {
          uint64_t v105 = v103 + 48;
          while (v95 != *(unsigned __int8 *)(v105 - 16))
          {
            v105 += 64;
            if (!--v104) {
              goto LABEL_45;
            }
          }
          uint64_t v126 = *(void *)(v105 + 8);
          uint64_t v127 = *(void **)(v105 + 16);
          uint64_t v154 = (char *)v47;
          uint64_t v128 = *(int *)(v68 + 36);
          uint64_t v129 = v143;
          uint64_t v130 = (uint64_t *)(v143 + v128);
          uint64_t v131 = v102;
          uint64_t v132 = v130[1];
          uint64_t v157 = *v130;
          uint64_t v158 = v132;
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          v133._countAndFlagsBits = 2108704;
          v133._object = (void *)0xE300000000000000;
          String.append(_:)(v133);
          swift_bridgeObjectRetain();
          v134._countAndFlagsBits = v126;
          v134._object = v127;
          String.append(_:)(v134);
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease_n();
          swift_bridgeObjectRelease();
          uint64_t v59 = v157;
          sub_100B310AC(v131, (uint64_t (*)(void))type metadata accessor for BeaconProductInfoRecord);
          sub_100B310AC(v129, type metadata accessor for OwnedBeaconGroup);
          (*(void (**)(char *, uint64_t))(v65 + 8))(v145, v64);
          sub_100B310AC(v61, (uint64_t (*)(void))type metadata accessor for OwnedBeaconRecord);
          uint64_t v78 = (uint64_t (*)(void))type metadata accessor for BeaconNamingRecord;
          uint64_t v79 = (uint64_t)v154;
          goto LABEL_27;
        }
      }
LABEL_45:
      sub_100B310AC(v102, (uint64_t (*)(void))type metadata accessor for BeaconProductInfoRecord);
    }
    uint64_t v106 = (uint64_t)v154;
    uint64_t v107 = v136;
    if (qword_101636F50 != -1) {
      swift_once();
    }
    uint64_t v108 = type metadata accessor for Logger();
    sub_100010324(v108, (uint64_t)qword_10170E9E8);
    (*(void (**)(char *, uint64_t, uint64_t))(v65 + 16))(v107, v106, v64);
    uint64_t v109 = v107;
    uint64_t v110 = Logger.logObject.getter();
    os_log_type_t v111 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v110, v111))
    {
      uint64_t v112 = swift_slowAlloc();
      BOOL v151 = v35;
      uint64_t v113 = v112;
      uint64_t v114 = swift_slowAlloc();
      uint64_t v154 = (char *)v47;
      uint64_t v150 = v114;
      uint64_t v157 = v114;
      *(_DWORD *)uint64_t v113 = 141558275;
      uint64_t v159 = 1752392040;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v113 + 12) = 2081;
      sub_100B22DA4((unint64_t *)&qword_101638B10, (void (*)(uint64_t))&type metadata accessor for UUID);
      uint64_t v115 = dispatch thunk of CustomStringConvertible.description.getter();
      uint64_t v159 = sub_1008FA0F0(v115, v116, &v157);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      unint64_t v117 = *(void (**)(char *, uint64_t))(v65 + 8);
      v117(v109, v64);
      _os_log_impl((void *)&_mh_execute_header, v110, v111, "groupedBeaconDisplayName: No product info or partInfo for %{private,mask.hash}s.", (uint8_t *)v113, 0x16u);
      swift_arrayDestroy();
      uint64_t v47 = (uint64_t)v154;
      uint64_t v61 = v149;
      swift_slowDealloc();
      uint64_t v35 = v151;
      swift_slowDealloc();
    }
    else
    {
      unint64_t v117 = *(void (**)(char *, uint64_t))(v65 + 8);
      v117(v109, v64);
    }

    uint64_t v118 = v143;
    uint64_t v119 = (uint64_t *)(v143 + *(int *)(v144 + 36));
    uint64_t v120 = v119[1];
    uint64_t v157 = *v119;
    uint64_t v158 = v120;
    swift_bridgeObjectRetain();
    v121._countAndFlagsBits = 2108704;
    v121._object = (void *)0xE300000000000000;
    String.append(_:)(v121);
    long long v122 = (uint64_t *)(v47 + *((int *)v35 + 8));
    uint64_t v123 = *v122;
    uint64_t v124 = (void *)v122[1];
    swift_bridgeObjectRetain();
    v125._countAndFlagsBits = v123;
    v125._object = v124;
    String.append(_:)(v125);
    swift_bridgeObjectRelease();
    uint64_t v59 = v157;
    sub_100B310AC(v118, type metadata accessor for OwnedBeaconGroup);
    v117(v145, v64);
    sub_100B310AC(v61, (uint64_t (*)(void))type metadata accessor for OwnedBeaconRecord);
LABEL_26:
    uint64_t v78 = (uint64_t (*)(void))type metadata accessor for BeaconNamingRecord;
    uint64_t v79 = v47;
LABEL_27:
    sub_100B310AC(v79, v78);
    return v59;
  }
  uint64_t result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

void sub_100AACBB8(uint64_t a1, uint64_t a2, NSObject *a3, uint64_t *a4, uint64_t *a5)
{
  uint64_t v9 = sub_10000588C(a4);
  __chkstk_darwin(v9 - 8);
  uint64_t v11 = (char *)&v14 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = swift_projectBox();
  sub_10001D074(a1, (uint64_t)v11, a5);
  uint64_t v13 = sub_10000588C(a5);
  (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v13 - 8) + 56))(v11, 0, 1, v13);
  swift_beginAccess();
  sub_100062604((uint64_t)v11, v12, a4);
  dispatch_group_leave(a3);
}

uint64_t sub_100AACCCC()
{
  uint64_t v1 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v16 = *(void *)(v1 - 8);
  __chkstk_darwin(v1);
  uint64_t v3 = (char *)&v14 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = type metadata accessor for DispatchQoS();
  uint64_t v4 = *(void *)(v15 - 8);
  __chkstk_darwin(v15);
  uint64_t v6 = (char *)&v14 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for DispatchQoS.QoSClass();
  uint64_t v8 = *(void *)(v7 - 8);
  __chkstk_darwin(v7);
  uint64_t v10 = (char *)&v14 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10001D4B0(0, (unint64_t *)&qword_1016376E0);
  (*(void (**)(char *, void, uint64_t))(v8 + 104))(v10, enum case for DispatchQoS.QoSClass.default(_:), v7);
  uint64_t v11 = (void *)static OS_dispatch_queue.global(qos:)();
  (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v7);
  aBlock[4] = sub_100B3FE00;
  uint64_t v19 = v0;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_1004B5480;
  aBlock[3] = &unk_1015E73E0;
  uint64_t v12 = _Block_copy(aBlock);
  swift_retain();
  static DispatchQoS.unspecified.getter();
  uint64_t v17 = _swiftEmptyArrayStorage;
  sub_100B22DA4((unint64_t *)&qword_10163B7E0, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
  sub_10000588C((uint64_t *)&unk_10163F350);
  sub_100062734((unint64_t *)&qword_10163B7F0, (uint64_t *)&unk_10163F350);
  dispatch thunk of SetAlgebra.init<A>(_:)();
  OS_dispatch_queue.async(group:qos:flags:execute:)();
  _Block_release(v12);

  (*(void (**)(char *, uint64_t))(v16 + 8))(v3, v1);
  (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v15);
  return swift_release();
}

char *sub_100AAD054()
{
  uint64_t v1 = type metadata accessor for UUID();
  uint64_t v2 = *(void *)(v1 - 8);
  __chkstk_darwin(v1);
  uint64_t v4 = (char *)&v20 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = sub_10000588C(&qword_101638CF0);
  __chkstk_darwin(v5 - 8);
  uint64_t v7 = (char *)&v20 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v22 = v0;
  if (qword_101637030 == -1) {
    goto LABEL_2;
  }
LABEL_30:
  swift_once();
LABEL_2:
  uint64_t v8 = type metadata accessor for URL();
  sub_100010324(v8, (uint64_t)qword_10170EB70);
  uint64_t result = sub_100B1EB4C();
  int64_t v10 = 0;
  uint64_t v11 = *((void *)result + 8);
  uint64_t v20 = result + 64;
  uint64_t v12 = 1 << result[32];
  uint64_t v13 = -1;
  if (v12 < 64) {
    uint64_t v13 = ~(-1 << v12);
  }
  unint64_t v14 = v13 & v11;
  int64_t v21 = (unint64_t)(v12 + 63) >> 6;
  uint64_t v24 = v2 + 16;
  uint64_t v25 = result;
  uint64_t v23 = v2 + 48;
  if ((v13 & v11) != 0)
  {
LABEL_5:
    unint64_t v15 = __clz(__rbit64(v14));
    v14 &= v14 - 1;
    unint64_t v16 = v15 | (v10 << 6);
    goto LABEL_24;
  }
  while (1)
  {
    int64_t v17 = v10 + 1;
    if (__OFADD__(v10, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v17 >= v21) {
      goto LABEL_27;
    }
    unint64_t v18 = *(void *)&v20[8 * v17];
    ++v10;
    if (!v18)
    {
      int64_t v10 = v17 + 1;
      if (v17 + 1 >= v21) {
        goto LABEL_27;
      }
      unint64_t v18 = *(void *)&v20[8 * v10];
      if (!v18)
      {
        int64_t v10 = v17 + 2;
        if (v17 + 2 >= v21) {
          goto LABEL_27;
        }
        unint64_t v18 = *(void *)&v20[8 * v10];
        if (!v18)
        {
          int64_t v10 = v17 + 3;
          if (v17 + 3 >= v21) {
            goto LABEL_27;
          }
          unint64_t v18 = *(void *)&v20[8 * v10];
          if (!v18)
          {
            int64_t v10 = v17 + 4;
            if (v17 + 4 >= v21) {
              goto LABEL_27;
            }
            unint64_t v18 = *(void *)&v20[8 * v10];
            if (!v18) {
              break;
            }
          }
        }
      }
    }
LABEL_23:
    unint64_t v14 = (v18 - 1) & v18;
    unint64_t v16 = __clz(__rbit64(v18)) + (v10 << 6);
LABEL_24:
    (*(void (**)(char *, unint64_t, uint64_t))(v2 + 16))(v7, *((void *)v25 + 6) + *(void *)(v2 + 72) * v16, v1);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v2 + 56))(v7, 0, 1, v1);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v2 + 48))(v7, 1, v1) == 1) {
      return (char *)swift_release();
    }
    (*(void (**)(char *, char *, uint64_t))(v2 + 32))(v4, v7, v1);
    sub_100AF3304((uint64_t)v4);
    uint64_t result = (char *)(*(uint64_t (**)(char *, uint64_t))(v2 + 8))(v4, v1);
    if (v14) {
      goto LABEL_5;
    }
  }
  int64_t v19 = v17 + 5;
  if (v19 >= v21)
  {
LABEL_27:
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v2 + 56))(v7, 1, 1, v1);
    return (char *)swift_release();
  }
  unint64_t v18 = *(void *)&v20[8 * v19];
  if (v18)
  {
    int64_t v10 = v19;
    goto LABEL_23;
  }
  while (1)
  {
    int64_t v10 = v19 + 1;
    if (__OFADD__(v19, 1)) {
      break;
    }
    if (v10 >= v21) {
      goto LABEL_27;
    }
    unint64_t v18 = *(void *)&v20[8 * v10];
    ++v19;
    if (v18) {
      goto LABEL_23;
    }
  }
  __break(1u);
  return result;
}

void *sub_100AAD3F8()
{
  uint64_t v1 = type metadata accessor for UUID();
  uint64_t v2 = *(void *)(v1 - 8);
  __chkstk_darwin(v1);
  uint64_t v4 = (char *)&v20 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = sub_10000588C(&qword_101638CF0);
  __chkstk_darwin(v5 - 8);
  uint64_t v7 = (char *)&v20 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v22 = v0;
  if (qword_101637638 == -1) {
    goto LABEL_2;
  }
LABEL_30:
  swift_once();
LABEL_2:
  uint64_t v8 = type metadata accessor for URL();
  sub_100010324(v8, (uint64_t)qword_10170F7E8);
  uint64_t result = sub_100B1F590();
  int64_t v10 = 0;
  uint64_t v11 = result[8];
  uint64_t v20 = result + 8;
  uint64_t v12 = 1 << *((unsigned char *)result + 32);
  uint64_t v13 = -1;
  if (v12 < 64) {
    uint64_t v13 = ~(-1 << v12);
  }
  unint64_t v14 = v13 & v11;
  int64_t v21 = (unint64_t)(v12 + 63) >> 6;
  uint64_t v24 = v2 + 16;
  uint64_t v25 = result;
  uint64_t v23 = v2 + 48;
  if ((v13 & v11) != 0)
  {
LABEL_5:
    unint64_t v15 = __clz(__rbit64(v14));
    v14 &= v14 - 1;
    unint64_t v16 = v15 | (v10 << 6);
    goto LABEL_24;
  }
  while (1)
  {
    int64_t v17 = v10 + 1;
    if (__OFADD__(v10, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v17 >= v21) {
      goto LABEL_27;
    }
    unint64_t v18 = v20[v17];
    ++v10;
    if (!v18)
    {
      int64_t v10 = v17 + 1;
      if (v17 + 1 >= v21) {
        goto LABEL_27;
      }
      unint64_t v18 = v20[v10];
      if (!v18)
      {
        int64_t v10 = v17 + 2;
        if (v17 + 2 >= v21) {
          goto LABEL_27;
        }
        unint64_t v18 = v20[v10];
        if (!v18)
        {
          int64_t v10 = v17 + 3;
          if (v17 + 3 >= v21) {
            goto LABEL_27;
          }
          unint64_t v18 = v20[v10];
          if (!v18)
          {
            int64_t v10 = v17 + 4;
            if (v17 + 4 >= v21) {
              goto LABEL_27;
            }
            unint64_t v18 = v20[v10];
            if (!v18) {
              break;
            }
          }
        }
      }
    }
LABEL_23:
    unint64_t v14 = (v18 - 1) & v18;
    unint64_t v16 = __clz(__rbit64(v18)) + (v10 << 6);
LABEL_24:
    (*(void (**)(char *, unint64_t, uint64_t))(v2 + 16))(v7, v25[6] + *(void *)(v2 + 72) * v16, v1);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v2 + 56))(v7, 0, 1, v1);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v2 + 48))(v7, 1, v1) == 1) {
      return (void *)swift_release();
    }
    (*(void (**)(char *, char *, uint64_t))(v2 + 32))(v4, v7, v1);
    sub_100AF3CEC((uint64_t)v4);
    uint64_t result = (void *)(*(uint64_t (**)(char *, uint64_t))(v2 + 8))(v4, v1);
    if (v14) {
      goto LABEL_5;
    }
  }
  int64_t v19 = v17 + 5;
  if (v19 >= v21)
  {
LABEL_27:
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v2 + 56))(v7, 1, 1, v1);
    return (void *)swift_release();
  }
  unint64_t v18 = v20[v19];
  if (v18)
  {
    int64_t v10 = v19;
    goto LABEL_23;
  }
  while (1)
  {
    int64_t v10 = v19 + 1;
    if (__OFADD__(v19, 1)) {
      break;
    }
    if (v10 >= v21) {
      goto LABEL_27;
    }
    unint64_t v18 = v20[v10];
    ++v19;
    if (v18) {
      goto LABEL_23;
    }
  }
  __break(1u);
  return result;
}

uint64_t sub_100AAD79C(uint64_t a1)
{
  return sub_10044B124(a1, qword_10170E9E8);
}

uint64_t sub_100AAD7C4(uint64_t a1)
{
  return sub_10044B124(a1, qword_10170EA00);
}

uint64_t sub_100AAD7E4(uint64_t a1)
{
  return sub_10044B124(a1, qword_10170EA18);
}

uint64_t sub_100AAD808()
{
  _StringGuts.grow(_:)(31);
  swift_bridgeObjectRelease();
  type metadata accessor for UUID();
  sub_100B22DA4((unint64_t *)&qword_101638B10, (void (*)(uint64_t))&type metadata accessor for UUID);
  v0._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  String.append(_:)(v0);
  swift_bridgeObjectRelease();
  v1._countAndFlagsBits = 0x203A737265657020;
  v1._object = (void *)0xE800000000000000;
  String.append(_:)(v1);
  type metadata accessor for BeaconStatus(0);
  sub_100B22DA4(&qword_10163BC60, (void (*)(uint64_t))&type metadata accessor for UUID);
  swift_bridgeObjectRetain();
  v2._countAndFlagsBits = Set.description.getter();
  String.append(_:)(v2);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v3._countAndFlagsBits = 0x203A6574616420;
  v3._object = (void *)0xE700000000000000;
  String.append(_:)(v3);
  v4._countAndFlagsBits = Date.localISO8601.getter();
  String.append(_:)(v4);
  swift_bridgeObjectRelease();
  return 0x64496E6F63616562;
}

Swift::Int sub_100AAD9BC()
{
  return Hasher._finalize()();
}

uint64_t sub_100AADAA8()
{
  return dispatch thunk of Hashable.hash(into:)();
}

Swift::Int sub_100AADB7C()
{
  return Hasher._finalize()();
}

uint64_t sub_100AADC64()
{
  return static Date.< infix(_:_:)();
}

BOOL sub_100AADC74()
{
  return (static Date.< infix(_:_:)() & 1) == 0;
}

BOOL sub_100AADCA4()
{
  return (static Date.< infix(_:_:)() & 1) == 0;
}

uint64_t sub_100AADCD0()
{
  return static Date.< infix(_:_:)();
}

uint64_t sub_100AADCEC()
{
  uint64_t v1 = v0;
  uint64_t v2 = sub_10000588C(&qword_10164DBB0);
  __chkstk_darwin(v2 - 8);
  Swift::String v4 = (char *)v10 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_101636CD8 != -1) {
    swift_once();
  }
  OS_dispatch_queue.sync<A>(execute:)();
  sub_1010AC7AC(v10[1]);
  uint64_t v6 = v5;
  swift_bridgeObjectRelease();
  uint64_t v7 = type metadata accessor for TaskPriority();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56))(v4, 1, 1, v7);
  uint64_t v8 = (void *)swift_allocObject();
  v8[2] = 0;
  _OWORD v8[3] = 0;
  v8[4] = v1;
  v8[5] = v6;
  swift_retain();
  sub_1000212B0((uint64_t)v4, (uint64_t)&unk_101659540, (uint64_t)v8);
  swift_release();
  return sub_10001DAB4((uint64_t)v4, &qword_10164DBB0);
}

uint64_t sub_100AADE88(double a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  *(double *)(v5 + 128) = a1;
  *(void *)(v5 + 120) = a5;
  type metadata accessor for DispatchQoS();
  *(void *)(v5 + 136) = swift_task_alloc();
  return _swift_task_switch(sub_100AADF1C, 0, 0);
}

uint64_t sub_100AADF1C()
{
  uint64_t v1 = qword_1016375E8;
  swift_retain();
  if (v1 != -1) {
    swift_once();
  }
  swift_beginAccess();
  uint64_t result = sub_10001D074((uint64_t)&xmmword_10166E8F0, v0 + 56, (uint64_t *)&unk_101638D30);
  if (*(void *)(v0 + 80))
  {
    sub_10001CEB0((long long *)(v0 + 56), v0 + 16);
    swift_release();
    sub_10001CD44((void *)(v0 + 16), *(void *)(v0 + 40));
    Swift::String v4 = (uint64_t (__cdecl *)())((char *)&dword_1016390D8 + dword_1016390D8);
    uint64_t v3 = (void *)swift_task_alloc();
    *(void *)(v0 + 144) = v3;
    *uint64_t v3 = v0;
    v3[1] = sub_100AAE06C;
    return v4();
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_100AAE06C(uint64_t a1)
{
  *(void *)(*(void *)v1 + 152) = a1;
  swift_task_dealloc();
  return _swift_task_switch(sub_100AAE16C, 0, 0);
}

uint64_t sub_100AAE16C()
{
  uint64_t v1 = (uint64_t)(v0 + 2);
  uint64_t v2 = v0[19];
  if (v2)
  {
    uint64_t v3 = v0[16];
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v1);
    type metadata accessor for XPCActivity();
    static DispatchQoS.background.getter();
    uint64_t v4 = swift_allocObject();
    *(void *)(v4 + 16) = v3;
    swift_retain();
    uint64_t v5 = (void *)swift_task_alloc();
    v0[20] = v5;
    *uint64_t v5 = v0;
    v5[1] = sub_100AAE3A8;
    uint64_t v6 = v0[17];
    return XPCActivity.__allocating_init(name:qos:criteriaBlock:handler:)(0xD000000000000022, 0x8000000101414690, v6, &unk_101659550, v4, &unk_101659560, v2);
  }
  else
  {
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v1);
    if (qword_101636F50 != -1) {
      swift_once();
    }
    uint64_t v7 = type metadata accessor for Logger();
    sub_100010324(v7, (uint64_t)qword_10170E9E8);
    uint64_t v8 = Logger.logObject.getter();
    os_log_type_t v9 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v8, v9))
    {
      int64_t v10 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)int64_t v10 = 0;
      _os_log_impl((void *)&_mh_execute_header, v8, v9, "Missing BeaconStoreActor!", v10, 2u);
      swift_slowDealloc();
    }

    swift_task_dealloc();
    uint64_t v11 = (uint64_t (*)(void))v0[1];
    return v11();
  }
}

uint64_t sub_100AAE3A8(uint64_t a1)
{
  *(void *)(*(void *)v1 + 168) = a1;
  swift_task_dealloc();
  return _swift_task_switch(sub_100AAE4A8, 0, 0);
}

uint64_t sub_100AAE4A8()
{
  uint64_t v1 = v0[21];
  uint64_t v2 = v0[15];
  swift_release();
  *(void *)(v2 + 40) = v1;
  swift_release();
  swift_task_dealloc();
  uint64_t v3 = (uint64_t (*)(void))v0[1];
  return v3();
}

uint64_t sub_100AAE524(uint64_t a1, uint64_t a2, double a3)
{
  *(double *)(v3 + 40) = a3;
  *(void *)(v3 + 24) = a1;
  *(void *)(v3 + 32) = a2;
  uint64_t v4 = type metadata accessor for XPCActivity.Criteria.Options();
  *(void *)(v3 + 48) = v4;
  *(void *)(v3 + 56) = *(void *)(v4 - 8);
  *(void *)(v3 + 64) = swift_task_alloc();
  uint64_t v5 = type metadata accessor for XPCActivity.Priority();
  *(void *)(v3 + 72) = v5;
  *(void *)(v3 + 80) = *(void *)(v5 - 8);
  *(void *)(v3 + 88) = swift_task_alloc();
  sub_10000588C(&qword_101641270);
  *(void *)(v3 + 96) = swift_task_alloc();
  uint64_t v6 = type metadata accessor for XPCActivity.Criteria();
  *(void *)(v3 + 104) = v6;
  *(void *)(v3 + 112) = *(void *)(v6 - 8);
  *(void *)(v3 + 120) = swift_task_alloc();
  return _swift_task_switch(sub_100AAE6D0, 0, 0);
}

uint64_t sub_100AAE6D0()
{
  uint64_t v1 = *(void *)(v0 + 104);
  uint64_t v2 = *(void *)(v0 + 112);
  uint64_t v3 = *(void *)(v0 + 96);
  sub_10001D074(*(void *)(v0 + 32), v3, &qword_101641270);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v2 + 48))(v3, 1, v1) != 1)
  {
    uint64_t v13 = *(void *)(v0 + 112);
    uint64_t v12 = *(void *)(v0 + 120);
    uint64_t v14 = *(void *)(v0 + 104);
    uint64_t v15 = *(void *)(v0 + 24);
    unint64_t v16 = *(void (**)(uint64_t, uint64_t, uint64_t))(v13 + 32);
    v16(v12, *(void *)(v0 + 96), v14);
    v16(v15, v12, v14);
    (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v13 + 56))(v15, 0, 1, v14);
    goto LABEL_7;
  }
  uint64_t v4 = *(void *)(v0 + 88);
  uint64_t v5 = *(void *)(v0 + 72);
  uint64_t v6 = *(void *)(v0 + 80);
  double v7 = *(double *)(v0 + 40);
  sub_10001DAB4(*(void *)(v0 + 96), &qword_101641270);
  uint64_t result = (*(uint64_t (**)(uint64_t, void, uint64_t))(v6 + 104))(v4, enum case for XPCActivity.Priority.utility(_:), v5);
  double v9 = v7 * 0.5;
  if ((~COERCE__INT64(v7 * 0.5) & 0x7FF0000000000000) == 0)
  {
    __break(1u);
    goto LABEL_11;
  }
  if (v9 <= -9.22337204e18)
  {
LABEL_11:
    __break(1u);
    goto LABEL_12;
  }
  if (v9 >= 9.22337204e18)
  {
LABEL_12:
    __break(1u);
    return result;
  }
  uint64_t v10 = *(void *)(v0 + 112);
  uint64_t v19 = *(void *)(v0 + 104);
  uint64_t v18 = *(void *)(v0 + 24);
  sub_10000588C(&qword_101641288);
  uint64_t v11 = swift_allocObject();
  *(_OWORD *)(v11 + 16) = xmmword_101347500;
  static XPCActivity.Criteria.Options.requiresNetwork.getter();
  static XPCActivity.Criteria.Options.requiresClassC.getter();
  static XPCActivity.Criteria.Options.allowBattery.getter();
  *(void *)(v0 + 16) = v11;
  sub_100B22DA4(&qword_1016394C0, (void (*)(uint64_t))&type metadata accessor for XPCActivity.Criteria.Options);
  sub_10000588C(&qword_101641290);
  sub_100062734((unint64_t *)&qword_101641298, &qword_101641290);
  dispatch thunk of SetAlgebra.init<A>(_:)();
  XPCActivity.Criteria.init(priority:repeating:delay:gracePeriod:interval:options:)();
  (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v10 + 56))(v18, 0, 1, v19);
LABEL_7:
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  int64_t v17 = *(uint64_t (**)(void))(v0 + 8);
  return v17();
}

uint64_t sub_100AAE9F4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v3[3] = a2;
  v3[4] = a3;
  v3[2] = a1;
  uint64_t v4 = type metadata accessor for XPCActivity.State();
  v3[5] = v4;
  v3[6] = *(void *)(v4 - 8);
  v3[7] = swift_task_alloc();
  return _swift_task_switch(sub_100AAEAB8, 0, 0);
}

uint64_t sub_100AAEAB8()
{
  uint64_t v2 = v0[6];
  uint64_t v1 = v0[7];
  uint64_t v3 = v0[5];
  (*(void (**)(uint64_t, void, uint64_t))(v2 + 16))(v1, v0[3], v3);
  int v4 = (*(uint64_t (**)(uint64_t, uint64_t))(v2 + 88))(v1, v3);
  if (v4 != enum case for XPCActivity.State.checkIn(_:) && v4 != enum case for XPCActivity.State.wait(_:))
  {
    if (v4 == enum case for XPCActivity.State.run(_:))
    {
      if (sub_100B4AA7C())
      {
        if (qword_101636F58 != -1) {
          swift_once();
        }
        uint64_t v8 = type metadata accessor for Logger();
        sub_100010324(v8, (uint64_t)qword_10170EA00);
        double v9 = Logger.logObject.getter();
        os_log_type_t v10 = static os_log_type_t.default.getter();
        if (os_log_type_enabled(v9, v10))
        {
          uint64_t v11 = (uint8_t *)swift_slowAlloc();
          *(_WORD *)uint64_t v11 = 0;
          _os_log_impl((void *)&_mh_execute_header, v9, v10, "Calling postMetrics()", v11, 2u);
          swift_slowDealloc();
        }

        uint64_t v12 = (void *)swift_task_alloc();
        v0[8] = v12;
        *uint64_t v12 = v0;
        v12[1] = sub_100AAEE88;
        return sub_100AAF058();
      }
      type metadata accessor for XPCActivity();
      sub_100B22DA4(&qword_101639498, (void (*)(uint64_t))&type metadata accessor for XPCActivity);
      uint64_t v13 = dispatch thunk of Actor.unownedExecutor.getter();
      uint64_t v15 = v17;
      unint64_t v16 = sub_100AAEFF0;
      goto LABEL_21;
    }
    if (v4 == enum case for XPCActivity.State.defer(_:))
    {
      type metadata accessor for XPCActivity();
      sub_100B22DA4(&qword_101639498, (void (*)(uint64_t))&type metadata accessor for XPCActivity);
      uint64_t v13 = dispatch thunk of Actor.unownedExecutor.getter();
      uint64_t v15 = v14;
      unint64_t v16 = sub_100AAEE20;
LABEL_21:
      return _swift_task_switch(v16, v13, v15);
    }
    if (v4 != enum case for XPCActivity.State.continue(_:)
      && v4 != enum case for XPCActivity.State.done(_:)
      && v4 != enum case for XPCActivity.State.invalidated(_:))
    {
      (*(void (**)(void, void))(v0[6] + 8))(v0[7], v0[5]);
    }
  }
  swift_task_dealloc();
  uint64_t v6 = (uint64_t (*)(void))v0[1];
  return v6();
}

uint64_t sub_100AAEE20()
{
  dispatch thunk of XPCActivity.defer()();
  return _swift_task_switch(sub_100B64444, 0, 0);
}

uint64_t sub_100AAEE88()
{
  swift_task_dealloc();
  type metadata accessor for XPCActivity();
  sub_100B22DA4(&qword_101639498, (void (*)(uint64_t))&type metadata accessor for XPCActivity);
  uint64_t v1 = dispatch thunk of Actor.unownedExecutor.getter();
  return _swift_task_switch(sub_100AAEFF0, v1, v0);
}

uint64_t sub_100AAEFF0()
{
  dispatch thunk of XPCActivity.done()();
  return _swift_task_switch(sub_100B64444, 0, 0);
}

uint64_t sub_100AAF058()
{
  v1[27] = v0;
  sub_10000588C((uint64_t *)&unk_10163AC90);
  v1[28] = swift_task_alloc();
  v1[29] = swift_task_alloc();
  sub_10000588C(&qword_101638CF0);
  v1[30] = swift_task_alloc();
  uint64_t v2 = type metadata accessor for UUID();
  v1[31] = v2;
  v1[32] = *(void *)(v2 - 8);
  v1[33] = swift_task_alloc();
  v1[34] = swift_task_alloc();
  v1[35] = swift_task_alloc();
  v1[36] = type metadata accessor for StableIdentifier();
  v1[37] = swift_task_alloc();
  v1[38] = swift_task_alloc();
  v1[39] = swift_task_alloc();
  v1[40] = swift_task_alloc();
  v1[41] = swift_task_alloc();
  v1[42] = swift_task_alloc();
  v1[43] = swift_task_alloc();
  v1[44] = swift_task_alloc();
  v1[45] = swift_task_alloc();
  v1[46] = swift_task_alloc();
  v1[47] = swift_task_alloc();
  v1[48] = swift_task_alloc();
  v1[49] = swift_task_alloc();
  v1[50] = swift_task_alloc();
  v1[51] = swift_task_alloc();
  v1[52] = swift_task_alloc();
  uint64_t v3 = type metadata accessor for OwnedBeaconRecord();
  v1[53] = v3;
  v1[54] = *(void *)(v3 - 8);
  v1[55] = swift_task_alloc();
  v1[56] = swift_task_alloc();
  v1[57] = swift_task_alloc();
  v1[58] = swift_task_alloc();
  v1[59] = swift_task_alloc();
  return _swift_task_switch(sub_100AAF31C, v0, 0);
}

uint64_t sub_100AAF31C()
{
  if (qword_1016375E8 != -1) {
    swift_once();
  }
  swift_beginAccess();
  uint64_t result = sub_10001D074((uint64_t)&xmmword_10166E8F0, v0 + 104, (uint64_t *)&unk_101638D30);
  if (*(void *)(v0 + 128))
  {
    sub_10001CEB0((long long *)(v0 + 104), v0 + 64);
    sub_10001CD44((void *)(v0 + 64), *(void *)(v0 + 88));
    uint64_t v3 = (uint64_t (__cdecl *)())((char *)&dword_101639270 + dword_101639270);
    uint64_t v2 = (void *)swift_task_alloc();
    *(void *)(v0 + 480) = v2;
    *uint64_t v2 = v0;
    v2[1] = sub_100AAF458;
    return v3();
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_100AAF458(uint64_t a1)
{
  uint64_t v2 = *(void *)(*(void *)v1 + 216);
  *(void *)(*(void *)v1 + 488) = a1;
  swift_task_dealloc();
  return _swift_task_switch(sub_100AAF570, v2, 0);
}

uint64_t sub_100AAF570()
{
  uint64_t v1 = (uint64_t)(v0 + 8);
  if (v0[61])
  {
    uint64_t v2 = v0[27];
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v1);
    v0[62] = *(void *)(v2 + 136);
    swift_retain();
    return _swift_task_switch(sub_100AAF860, 0, 0);
  }
  else
  {
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v1);
    if (qword_101636F50 != -1) {
      swift_once();
    }
    uint64_t v3 = type metadata accessor for Logger();
    sub_100010324(v3, (uint64_t)qword_10170E9E8);
    uint64_t v4 = Logger.logObject.getter();
    os_log_type_t v5 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v4, v5))
    {
      uint64_t v6 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v6 = 0;
      _os_log_impl((void *)&_mh_execute_header, v4, v5, "Missing FMIPService!", v6, 2u);
      swift_slowDealloc();
    }

    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    double v7 = (uint64_t (*)(void))v0[1];
    return v7();
  }
}

uint64_t sub_100AAF860()
{
  uint64_t v1 = v0[62];
  uint64_t v2 = v0[27];
  uint64_t v3 = (void *)swift_task_alloc();
  v0[63] = v3;
  v3[2] = v1;
  v3[3] = sub_1000909A4;
  v3[4] = v2;
  uint64_t v4 = (void *)swift_task_alloc();
  v0[64] = v4;
  uint64_t v5 = sub_10000588C((uint64_t *)&unk_101660AA0);
  void *v4 = v0;
  v4[1] = sub_100AAF97C;
  return withCheckedContinuation<A>(isolation:function:_:)(v0 + 26, 0, 0, 0xD000000000000012, 0x80000001013F1870, sub_1000909AC, v3, v5);
}

uint64_t sub_100AAF97C()
{
  uint64_t v1 = *v0;
  uint64_t v2 = *(void *)(*v0 + 216);
  swift_task_dealloc();
  swift_release();
  swift_task_dealloc();
  *(void *)(v1 + 520) = *(void *)(v1 + 208);
  return _swift_task_switch(sub_100AAFAD8, v2, 0);
}

void sub_100AAFAD8()
{
  uint64_t v1 = v0[65];
  uint64_t v2 = _swiftEmptyArrayStorage;
  uint64_t v127 = *(void *)(v1 + 16);
  if (v127)
  {
    unint64_t v3 = 0;
    uint64_t v123 = v0[53];
    uint64_t v125 = v0[54];
    uint64_t v118 = (void (**)(uint64_t, uint64_t))(v0[32] + 8);
    uint64_t v121 = v0[65];
    while (1)
    {
      if (v3 >= *(void *)(v1 + 16))
      {
        __break(1u);
LABEL_101:
        __break(1u);
LABEL_102:
        __break(1u);
LABEL_103:
        __break(1u);
LABEL_104:
        __break(1u);
LABEL_105:
        __break(1u);
LABEL_106:
        __break(1u);
        return;
      }
      uint64_t v6 = v2;
      uint64_t v7 = v0[59];
      uint64_t v9 = v0[38];
      uint64_t v8 = v0[39];
      unint64_t v10 = (*(unsigned __int8 *)(v125 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v125 + 80);
      uint64_t v11 = *(void *)(v125 + 72);
      sub_100B30D0C(v0[65] + v10 + v11 * v3, v7, (uint64_t (*)(void))type metadata accessor for OwnedBeaconRecord);
      uint64_t v12 = v7 + *(int *)(v123 + 24);
      sub_100B30D0C(v12, v8, (uint64_t (*)(void))type metadata accessor for StableIdentifier);
      int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
      sub_100B310AC(v8, (uint64_t (*)(void))type metadata accessor for StableIdentifier);
      sub_100B30D0C(v12, v9, (uint64_t (*)(void))type metadata accessor for StableIdentifier);
      uint64_t v14 = v0[38];
      if (EnumCaseMultiPayload == 1) {
        break;
      }
      sub_100B30D0C(v0[38], v0[37], (uint64_t (*)(void))type metadata accessor for StableIdentifier);
      int v15 = swift_getEnumCaseMultiPayload();
      if (v15 == 2)
      {
        sub_10000588C(&qword_1016555E0);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        uint64_t v2 = v6;
LABEL_12:
        uint64_t v1 = v121;
        uint64_t v16 = v0[37];
        uint64_t v14 = v0[38];
        uint64_t v17 = v0[31];
        swift_bridgeObjectRelease();
        (*v118)(v16, v17);
LABEL_13:
        sub_100B310AC(v14, (uint64_t (*)(void))type metadata accessor for StableIdentifier);
        sub_100B30DB4(v0[59], v0[55], (uint64_t (*)(void))type metadata accessor for OwnedBeaconRecord);
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        {
          sub_1000B74D8(0, v2[2] + 1, 1);
          uint64_t v2 = _swiftEmptyArrayStorage;
        }
        unint64_t v19 = v2[2];
        unint64_t v18 = v2[3];
        if (v19 >= v18 >> 1)
        {
          sub_1000B74D8(v18 > 1, v19 + 1, 1);
          uint64_t v2 = _swiftEmptyArrayStorage;
        }
        uint64_t v20 = v0[55];
        _OWORD v2[2] = v19 + 1;
        sub_100B30DB4(v20, (uint64_t)v2 + v10 + v19 * v11, (uint64_t (*)(void))type metadata accessor for OwnedBeaconRecord);
        goto LABEL_4;
      }
      uint64_t v2 = v6;
      if (v15 == 3)
      {
        sub_10000588C((uint64_t *)&unk_1016565E0);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        goto LABEL_12;
      }
      uint64_t v4 = v0[59];
      uint64_t v5 = v0[38];
      sub_100B310AC(v0[37], (uint64_t (*)(void))type metadata accessor for StableIdentifier);
      sub_100B310AC(v5, (uint64_t (*)(void))type metadata accessor for StableIdentifier);
      sub_100B310AC(v4, (uint64_t (*)(void))type metadata accessor for OwnedBeaconRecord);
      uint64_t v1 = v121;
LABEL_4:
      if (v127 == ++v3) {
        goto LABEL_18;
      }
    }
    uint64_t v2 = v6;
    uint64_t v1 = v121;
    goto LABEL_13;
  }
LABEL_18:
  swift_bridgeObjectRelease();
  v0[24] = &_swiftEmptySetSingleton;
  uint64_t v120 = v2[2];
  if (v120)
  {
    uint64_t v22 = (int *)v0[53];
    uint64_t v21 = v0[54];
    uint64_t v23 = v0[32];
    uint64_t v119 = (char *)v2 + ((*(unsigned __int8 *)(v21 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v21 + 80));
    uint64_t v117 = *(void *)(v21 + 72);
    uint64_t v128 = (void (**)(uint64_t, uint64_t))(v23 + 8);
    uint64_t v110 = (unsigned int (**)(uint64_t, uint64_t, uint64_t))(v23 + 48);
    uint64_t v106 = (void (**)(void, void, void))(v23 + 32);
    uint64_t v105 = v23;
    long long v122 = (void (**)(char *, uint64_t, uint64_t))(v23 + 16);
    swift_retain();
    uint64_t v24 = 0;
    uint64_t v107 = 0;
    uint64_t v108 = 0;
    uint64_t v112 = 0;
    uint64_t v113 = 0;
    uint64_t v109 = 0;
    uint64_t v114 = 0;
    os_log_type_t v111 = v22;
    while (1)
    {
      uint64_t v27 = (uint64_t)&v119[v24 * v117];
      uint64_t v126 = v27 + v22[6];
      sub_100B30D0C(v126, v0[52], (uint64_t (*)(void))type metadata accessor for StableIdentifier);
      int v28 = swift_getEnumCaseMultiPayload();
      if (v28 == 3)
      {
        sub_10000588C((uint64_t *)&unk_1016565E0);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
      }
      else
      {
        if (v28 != 2)
        {
          uint64_t v33 = v24;
          uint64_t v34 = v0[51];
          uint64_t v35 = v0[50];
          sub_100B310AC(v0[52], (uint64_t (*)(void))type metadata accessor for StableIdentifier);
          uint64_t v36 = v126;
          sub_100B30D0C(v126, v34, (uint64_t (*)(void))type metadata accessor for StableIdentifier);
          int v37 = swift_getEnumCaseMultiPayload();
          uint64_t v22 = v111;
          sub_100B310AC(v34, (uint64_t (*)(void))type metadata accessor for StableIdentifier);
          sub_100B30D0C(v126, v35, (uint64_t (*)(void))type metadata accessor for StableIdentifier);
          if (v37 != 1)
          {
            sub_100B30D0C(v0[50], v0[49], (uint64_t (*)(void))type metadata accessor for StableIdentifier);
            int v38 = swift_getEnumCaseMultiPayload();
            if (v38 == 2)
            {
              sub_10000588C(&qword_1016555E0);
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
            }
            else
            {
              if (v38 != 3)
              {
                uint64_t v73 = v0[50];
                sub_100B310AC(v0[49], (uint64_t (*)(void))type metadata accessor for StableIdentifier);
                uint64_t v71 = v73;
                uint64_t v70 = type metadata accessor for StableIdentifier;
                goto LABEL_61;
              }
              sub_10000588C((uint64_t *)&unk_1016565E0);
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
            }
            uint64_t v63 = v0[49];
            uint64_t v64 = v0[31];
            swift_bridgeObjectRelease();
            (*v128)(v63, v64);
            uint64_t v36 = v126;
          }
          uint64_t v65 = v0[58];
          uint64_t v66 = v0[48];
          sub_100B310AC(v0[50], (uint64_t (*)(void))type metadata accessor for StableIdentifier);
          sub_100B30D0C(v36, v66, (uint64_t (*)(void))type metadata accessor for StableIdentifier);
          int v67 = swift_getEnumCaseMultiPayload();
          sub_100B310AC(v66, (uint64_t (*)(void))type metadata accessor for StableIdentifier);
          sub_100B30D0C(v27, v65, (uint64_t (*)(void))type metadata accessor for OwnedBeaconRecord);
          uint64_t v68 = v0[58];
          if (v67 != 1)
          {
            uint64_t v70 = type metadata accessor for OwnedBeaconRecord;
            uint64_t v71 = v0[58];
LABEL_61:
            sub_100B310AC(v71, (uint64_t (*)(void))v70);
            uint64_t v25 = v33;
LABEL_62:
            BOOL v26 = __OFADD__(v113++, 1);
            if (v26) {
              goto LABEL_101;
            }
            goto LABEL_22;
          }
          os_log_type_t v69 = (void *)(v68 + v111[15]);
          if (*v69 == 0x3830332E302E32 && v69[1] == 0xE700000000000000)
          {
            sub_100B310AC(v0[58], (uint64_t (*)(void))type metadata accessor for OwnedBeaconRecord);
            uint64_t v25 = v33;
          }
          else
          {
            char v72 = _stringCompareWithSmolCheck(_:_:expecting:)();
            sub_100B310AC(v68, (uint64_t (*)(void))type metadata accessor for OwnedBeaconRecord);
            uint64_t v25 = v33;
            if ((v72 & 1) == 0) {
              goto LABEL_62;
            }
          }
          BOOL v26 = __OFADD__(v108++, 1);
          if (v26) {
            goto LABEL_105;
          }
          goto LABEL_22;
        }
        sub_10000588C(&qword_1016555E0);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
      }
      uint64_t v29 = v0[52];
      uint64_t v30 = v0[31];
      swift_bridgeObjectRelease();
      uint64_t v124 = *v128;
      (*v128)(v29, v30);
      if (*(void *)(v27 + v22[16]) == 76)
      {
        uint64_t v32 = v0[30];
        uint64_t v31 = v0[31];
        sub_10001D074(v27 + v22[7], v32, &qword_101638CF0);
        uint64_t v115 = (uint64_t)&v119[v24 * v117];
        uint64_t v116 = v24;
        if ((*v110)(v32, 1, v31) == 1)
        {
          sub_10001DAB4(v0[30], &qword_101638CF0);
        }
        else
        {
          (*v106)(v0[35], v0[30], v0[31]);
          uint64_t v45 = v0[24];
          if (*(void *)(v45 + 16))
          {
            sub_100B22DA4(&qword_10163BC60, (void (*)(uint64_t))&type metadata accessor for UUID);
            swift_bridgeObjectRetain();
            uint64_t v46 = dispatch thunk of Hashable._rawHashValue(seed:)();
            uint64_t v47 = -1 << *(unsigned char *)(v45 + 32);
            unint64_t v48 = v46 & ~v47;
            if ((*(void *)(v45 + 56 + ((v48 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v48))
            {
              uint64_t v49 = ~v47;
              uint64_t v50 = *(void *)(v105 + 72);
              uint64_t v51 = *(void (**)(uint64_t, unint64_t, uint64_t))(v105 + 16);
              while (1)
              {
                uint64_t v52 = v0[34];
                uint64_t v53 = v0[31];
                v51(v52, *(void *)(v45 + 48) + v48 * v50, v53);
                sub_100B22DA4((unint64_t *)&qword_10163B8F0, (void (*)(uint64_t))&type metadata accessor for UUID);
                char v54 = dispatch thunk of static Equatable.== infix(_:_:)();
                v124(v52, v53);
                if (v54) {
                  break;
                }
                unint64_t v48 = (v48 + 1) & v49;
                if (((*(void *)(v45 + 56 + ((v48 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v48) & 1) == 0) {
                  goto LABEL_43;
                }
              }
              uint64_t v96 = v0[35];
              uint64_t v97 = v0[31];
              swift_bridgeObjectRelease();
              v124(v96, v97);
              uint64_t v22 = v111;
              uint64_t v25 = v116;
              goto LABEL_22;
            }
LABEL_43:
            swift_bridgeObjectRelease();
            uint64_t v22 = v111;
          }
          uint64_t v56 = v0[34];
          uint64_t v55 = v0[35];
          uint64_t v57 = (char *)v0[33];
          uint64_t v58 = v0[31];
          (*v122)(v57, v55, v58);
          sub_100DC8CB8(v56, v57);
          v124(v56, v58);
          v124(v55, v58);
        }
        uint64_t v60 = v0[42];
        uint64_t v59 = v0[43];
        sub_100B30D0C(v126, v59, (uint64_t (*)(void))type metadata accessor for StableIdentifier);
        int v61 = swift_getEnumCaseMultiPayload();
        sub_100B310AC(v59, (uint64_t (*)(void))type metadata accessor for StableIdentifier);
        sub_100B30D0C(v126, v60, (uint64_t (*)(void))type metadata accessor for StableIdentifier);
        if (v61 != 1)
        {
          sub_100B30D0C(v0[42], v0[41], (uint64_t (*)(void))type metadata accessor for StableIdentifier);
          int v62 = swift_getEnumCaseMultiPayload();
          if (v62 == 2)
          {
            sub_10000588C(&qword_1016555E0);
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
          }
          else
          {
            if (v62 != 3)
            {
              uint64_t v95 = v0[42];
              sub_100B310AC(v0[41], (uint64_t (*)(void))type metadata accessor for StableIdentifier);
              uint64_t v93 = v95;
              unint64_t v92 = type metadata accessor for StableIdentifier;
              goto LABEL_90;
            }
            sub_10000588C((uint64_t *)&unk_1016565E0);
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
          }
          uint64_t v85 = v0[41];
          uint64_t v86 = v0[31];
          swift_bridgeObjectRelease();
          v124(v85, v86);
        }
        uint64_t v87 = v0[56];
        uint64_t v88 = v0[40];
        sub_100B310AC(v0[42], (uint64_t (*)(void))type metadata accessor for StableIdentifier);
        sub_100B30D0C(v126, v88, (uint64_t (*)(void))type metadata accessor for StableIdentifier);
        int v89 = swift_getEnumCaseMultiPayload();
        sub_100B310AC(v88, (uint64_t (*)(void))type metadata accessor for StableIdentifier);
        sub_100B30D0C(v115, v87, (uint64_t (*)(void))type metadata accessor for OwnedBeaconRecord);
        uint64_t v90 = v0[56];
        if (v89 != 1)
        {
          unint64_t v92 = type metadata accessor for OwnedBeaconRecord;
          uint64_t v93 = v0[56];
LABEL_90:
          sub_100B310AC(v93, (uint64_t (*)(void))v92);
          uint64_t v25 = v116;
LABEL_91:
          BOOL v26 = __OFADD__(v112++, 1);
          if (v26) {
            goto LABEL_103;
          }
          goto LABEL_22;
        }
        uint64_t v91 = (void *)(v90 + v22[15]);
        uint64_t v25 = v116;
        if (*v91 == 0x3830332E302E32 && v91[1] == 0xE700000000000000)
        {
          sub_100B310AC(v0[56], (uint64_t (*)(void))type metadata accessor for OwnedBeaconRecord);
        }
        else
        {
          char v94 = _stringCompareWithSmolCheck(_:_:expecting:)();
          sub_100B310AC(v90, (uint64_t (*)(void))type metadata accessor for OwnedBeaconRecord);
          if ((v94 & 1) == 0) {
            goto LABEL_91;
          }
        }
        BOOL v26 = __OFADD__(v107++, 1);
        if (v26) {
          goto LABEL_106;
        }
      }
      else
      {
        uint64_t v39 = v24;
        uint64_t v41 = v0[46];
        uint64_t v40 = v0[47];
        uint64_t v42 = v126;
        sub_100B30D0C(v126, v40, (uint64_t (*)(void))type metadata accessor for StableIdentifier);
        int v43 = swift_getEnumCaseMultiPayload();
        sub_100B310AC(v40, (uint64_t (*)(void))type metadata accessor for StableIdentifier);
        sub_100B30D0C(v126, v41, (uint64_t (*)(void))type metadata accessor for StableIdentifier);
        if (v43 != 1)
        {
          sub_100B30D0C(v0[46], v0[45], (uint64_t (*)(void))type metadata accessor for StableIdentifier);
          int v44 = swift_getEnumCaseMultiPayload();
          if (v44 == 2)
          {
            sub_10000588C(&qword_1016555E0);
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
          }
          else
          {
            if (v44 != 3)
            {
              uint64_t v84 = v0[46];
              sub_100B310AC(v0[45], (uint64_t (*)(void))type metadata accessor for StableIdentifier);
              uint64_t v83 = v84;
              unint64_t v82 = type metadata accessor for StableIdentifier;
              goto LABEL_74;
            }
            sub_10000588C((uint64_t *)&unk_1016565E0);
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
          }
          uint64_t v74 = v0[45];
          uint64_t v75 = v0[31];
          swift_bridgeObjectRelease();
          v124(v74, v75);
          uint64_t v42 = v126;
        }
        uint64_t v76 = v0[57];
        uint64_t v77 = v0[44];
        sub_100B310AC(v0[46], (uint64_t (*)(void))type metadata accessor for StableIdentifier);
        sub_100B30D0C(v42, v77, (uint64_t (*)(void))type metadata accessor for StableIdentifier);
        int v78 = swift_getEnumCaseMultiPayload();
        sub_100B310AC(v77, (uint64_t (*)(void))type metadata accessor for StableIdentifier);
        sub_100B30D0C(v27, v76, (uint64_t (*)(void))type metadata accessor for OwnedBeaconRecord);
        uint64_t v79 = v0[57];
        if (v78 != 1)
        {
          unint64_t v82 = type metadata accessor for OwnedBeaconRecord;
          uint64_t v83 = v0[57];
LABEL_74:
          sub_100B310AC(v83, (uint64_t (*)(void))v82);
          uint64_t v25 = v39;
LABEL_75:
          BOOL v26 = __OFADD__(v114++, 1);
          if (v26) {
            goto LABEL_102;
          }
          goto LABEL_22;
        }
        uint64_t v80 = (void *)(v79 + v22[15]);
        if (*v80 == 0x3830332E302E32 && v80[1] == 0xE700000000000000)
        {
          sub_100B310AC(v0[57], (uint64_t (*)(void))type metadata accessor for OwnedBeaconRecord);
          uint64_t v25 = v39;
        }
        else
        {
          char v81 = _stringCompareWithSmolCheck(_:_:expecting:)();
          sub_100B310AC(v79, (uint64_t (*)(void))type metadata accessor for OwnedBeaconRecord);
          uint64_t v25 = v39;
          if ((v81 & 1) == 0) {
            goto LABEL_75;
          }
        }
        BOOL v26 = __OFADD__(v109++, 1);
        if (v26) {
          goto LABEL_104;
        }
      }
LABEL_22:
      uint64_t v24 = v25 + 1;
      if (v24 == v120)
      {
        swift_release_n();
        uint64_t v98 = v112;
        uint64_t v99 = v113;
        uint64_t v101 = v108;
        uint64_t v100 = v109;
        uint64_t v102 = v114;
        uint64_t v103 = v107;
        goto LABEL_97;
      }
    }
  }
  swift_release();
  uint64_t v103 = 0;
  uint64_t v98 = 0;
  uint64_t v100 = 0;
  uint64_t v102 = 0;
  uint64_t v101 = 0;
  uint64_t v99 = 0;
LABEL_97:
  v0[2] = v99;
  v0[3] = v101;
  v0[4] = v102;
  v0[5] = v100;
  v0[6] = v98;
  v0[7] = v103;
  uint64_t v104 = (void *)swift_task_alloc();
  v0[66] = v104;
  *uint64_t v104 = v0;
  v104[1] = sub_100AB0CBC;
  sub_1000957F8((uint64_t)(v0 + 2));
}

uint64_t sub_100AB0CBC()
{
  uint64_t v2 = *v1;
  *(void *)(*v1 + 536) = v0;
  swift_task_dealloc();
  uint64_t v3 = *(void *)(v2 + 216);
  if (v0) {
    uint64_t v4 = sub_100AB10B8;
  }
  else {
    uint64_t v4 = sub_100AB0DE8;
  }
  return _swift_task_switch(v4, v3, 0);
}

uint64_t sub_100AB0DE8()
{
  uint64_t v1 = v0[29];
  Date.init()();
  uint64_t v2 = type metadata accessor for Date();
  (*(void (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v2 - 8) + 56))(v1, 0, 1, v2);
  if (qword_101636F90 != -1) {
    swift_once();
  }
  uint64_t v3 = v0[28];
  uint64_t v4 = v0[29];
  uint64_t v5 = sub_10000588C(&qword_101659570);
  sub_100010324(v5, (uint64_t)qword_101658728);
  sub_10001D074(v4, v3, (uint64_t *)&unk_10163AC90);
  swift_beginAccess();
  ManagedDefault.wrappedValue.setter();
  swift_endAccess();
  sub_10001DAB4(v4, (uint64_t *)&unk_10163AC90);
  swift_release();
  swift_bridgeObjectRelease();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v6 = (uint64_t (*)(void))v0[1];
  return v6();
}

uint64_t sub_100AB10B8()
{
  if (qword_101636F58 != -1) {
    swift_once();
  }
  uint64_t v1 = type metadata accessor for Logger();
  sub_100010324(v1, (uint64_t)qword_10170EA00);
  swift_errorRetain();
  swift_errorRetain();
  uint64_t v2 = Logger.logObject.getter();
  os_log_type_t v3 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v2, v3))
  {
    uint64_t v4 = (uint8_t *)swift_slowAlloc();
    uint64_t v5 = (void *)swift_slowAlloc();
    *(_DWORD *)uint64_t v4 = 138543362;
    swift_errorRetain();
    uint64_t v6 = _swift_stdlib_bridgeErrorToNSError();
    *(void *)(v0 + 200) = v6;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *uint64_t v5 = v6;
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl((void *)&_mh_execute_header, v2, v3, "Error from postMetrics: %{public}@", v4, 0xCu);
    sub_10000588C((uint64_t *)&unk_101638EA0);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
    swift_release();

    swift_errorRelease();
  }
  else
  {
    swift_release();
    swift_errorRelease();
    swift_errorRelease();
    swift_errorRelease();
  }
  swift_bridgeObjectRelease();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v7 = *(uint64_t (**)(void))(v0 + 8);
  return v7();
}

uint64_t sub_100AB142C(uint64_t a1)
{
  *(void *)(v1 + 16) = a1;
  type metadata accessor for DispatchQoS();
  *(void *)(v1 + 24) = swift_task_alloc();
  return _swift_task_switch(sub_100AB14BC, 0, 0);
}

uint64_t sub_100AB14BC()
{
  type metadata accessor for XPCActivity();
  static DispatchQoS.background.getter();
  swift_retain();
  uint64_t v1 = (void *)swift_task_alloc();
  v0[4] = v1;
  *uint64_t v1 = v0;
  v1[1] = sub_100AB15C4;
  uint64_t v3 = v0[2];
  uint64_t v2 = v0[3];
  return XPCActivity.__allocating_init(name:qos:criteriaBlock:handler:)(0xD000000000000012, 0x8000000101413440, v2, &unk_101659220, 0, &unk_101659230, v3);
}

uint64_t sub_100AB15C4(uint64_t a1)
{
  *(void *)(*(void *)v1 + 40) = a1;
  swift_task_dealloc();
  return _swift_task_switch(sub_100AB16C4, 0, 0);
}

uint64_t sub_100AB16C4()
{
  *(void *)(v0[2] + 32) = v0[5];
  swift_release();
  swift_task_dealloc();
  uint64_t v1 = (uint64_t (*)(void))v0[1];
  return v1();
}

uint64_t sub_100AB1738(uint64_t a1, uint64_t a2)
{
  v2[3] = a1;
  v2[4] = a2;
  uint64_t v3 = type metadata accessor for XPCActivity.Criteria.Options();
  v2[5] = v3;
  v2[6] = *(void *)(v3 - 8);
  v2[7] = swift_task_alloc();
  uint64_t v4 = type metadata accessor for XPCActivity.Priority();
  v2[8] = v4;
  v2[9] = *(void *)(v4 - 8);
  v2[10] = swift_task_alloc();
  sub_10000588C(&qword_101641270);
  v2[11] = swift_task_alloc();
  uint64_t v5 = type metadata accessor for XPCActivity.Criteria();
  v2[12] = v5;
  v2[13] = *(void *)(v5 - 8);
  v2[14] = swift_task_alloc();
  return _swift_task_switch(sub_100AB18E0, 0, 0);
}

uint64_t sub_100AB18E0()
{
  uint64_t v1 = v0[12];
  uint64_t v2 = v0[13];
  uint64_t v3 = v0[11];
  sub_10001D074(v0[4], v3, &qword_101641270);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v2 + 48))(v3, 1, v1) == 1)
  {
    uint64_t v4 = v0[13];
    uint64_t v17 = v0[12];
    uint64_t v5 = v0[10];
    uint64_t v6 = v0[8];
    uint64_t v7 = v0[9];
    uint64_t v8 = v0[3];
    sub_10001DAB4(v0[11], &qword_101641270);
    (*(void (**)(uint64_t, void, uint64_t))(v7 + 104))(v5, enum case for XPCActivity.Priority.maintenance(_:), v6);
    sub_10000588C(&qword_101641288);
    uint64_t v9 = swift_allocObject();
    *(_OWORD *)(v9 + 16) = xmmword_101342130;
    static XPCActivity.Criteria.Options.requiresNetwork.getter();
    v0[2] = v9;
    sub_100B22DA4(&qword_1016394C0, (void (*)(uint64_t))&type metadata accessor for XPCActivity.Criteria.Options);
    sub_10000588C(&qword_101641290);
    sub_100062734((unint64_t *)&qword_101641298, &qword_101641290);
    dispatch thunk of SetAlgebra.init<A>(_:)();
    XPCActivity.Criteria.init(priority:repeating:delay:gracePeriod:interval:options:)();
    (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v4 + 56))(v8, 0, 1, v17);
  }
  else
  {
    uint64_t v11 = v0[13];
    uint64_t v10 = v0[14];
    uint64_t v12 = v0[12];
    uint64_t v13 = v0[3];
    uint64_t v14 = *(void (**)(uint64_t, uint64_t, uint64_t))(v11 + 32);
    v14(v10, v0[11], v12);
    v14(v13, v10, v12);
    (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v11 + 56))(v13, 0, 1, v12);
  }
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  int v15 = (uint64_t (*)(void))v0[1];
  return v15();
}

uint64_t sub_100AB1B84(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v3[3] = a2;
  v3[4] = a3;
  v3[2] = a1;
  uint64_t v4 = type metadata accessor for XPCActivity.State();
  v3[5] = v4;
  v3[6] = *(void *)(v4 - 8);
  v3[7] = swift_task_alloc();
  return _swift_task_switch(sub_100AB1C48, 0, 0);
}

uint64_t sub_100AB1C48()
{
  uint64_t v2 = v0[6];
  uint64_t v1 = v0[7];
  uint64_t v3 = v0[5];
  (*(void (**)(uint64_t, void, uint64_t))(v2 + 16))(v1, v0[3], v3);
  int v4 = (*(uint64_t (**)(uint64_t, uint64_t))(v2 + 88))(v1, v3);
  if (v4 == enum case for XPCActivity.State.run(_:))
  {
    sub_100AB1F00();
    type metadata accessor for XPCActivity();
    sub_100B22DA4(&qword_101639498, (void (*)(uint64_t))&type metadata accessor for XPCActivity);
    uint64_t v5 = dispatch thunk of Actor.unownedExecutor.getter();
    uint64_t v7 = v6;
    uint64_t v8 = sub_100AB1E38;
LABEL_5:
    return _swift_task_switch(v8, v5, v7);
  }
  if (v4 == enum case for XPCActivity.State.defer(_:))
  {
    type metadata accessor for XPCActivity();
    sub_100B22DA4(&qword_101639498, (void (*)(uint64_t))&type metadata accessor for XPCActivity);
    uint64_t v5 = dispatch thunk of Actor.unownedExecutor.getter();
    uint64_t v7 = v9;
    uint64_t v8 = sub_100AAEE20;
    goto LABEL_5;
  }
  (*(void (**)(void, void))(v0[6] + 8))(v0[7], v0[5]);
  swift_task_dealloc();
  uint64_t v10 = (uint64_t (*)(void))v0[1];
  return v10();
}

uint64_t sub_100AB1E38()
{
  dispatch thunk of XPCActivity.done()();
  return _swift_task_switch(sub_100AB1EA0, 0, 0);
}

uint64_t sub_100AB1EA0()
{
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_100AB1F00()
{
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v23 = *(void *)(v2 - 8);
  uint64_t v24 = v2;
  __chkstk_darwin(v2);
  uint64_t v21 = (char *)&v19 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v22 = type metadata accessor for DispatchQoS();
  uint64_t v20 = *(void *)(v22 - 8);
  __chkstk_darwin(v22);
  uint64_t v5 = (char *)&v19 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = sub_10000588C(&qword_10164DBB0);
  __chkstk_darwin(v6 - 8);
  uint64_t v8 = (char *)&v19 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = sub_100AB24F0();
  swift_retain_n();
  QueueSynchronizer.conditionalSync<A>(_:)();
  int v10 = LOBYTE(aBlock[0]);
  static os_log_type_t.default.getter();
  if (qword_101637270 != -1) {
    swift_once();
  }
  sub_10000588C((uint64_t *)&unk_10163AD00);
  uint64_t v11 = swift_allocObject();
  *(_OWORD *)(v11 + 16) = xmmword_101342130;
  *(void *)(v11 + 56) = &type metadata for Bool;
  *(void *)(v11 + 64) = &protocol witness table for Bool;
  *(unsigned char *)(v11 + 32) = v10;
  os_log(_:dso:log:_:_:)();
  swift_bridgeObjectRelease();
  static os_log_type_t.default.getter();
  os_log(_:dso:log:_:_:)();
  if (v10)
  {
    uint64_t v12 = type metadata accessor for TaskPriority();
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v12 - 8) + 56))(v8, 1, 1, v12);
    uint64_t v13 = (void *)swift_allocObject();
    v13[2] = 0;
    v13[3] = 0;
    v13[4] = v1;
    swift_retain();
    sub_1008F5E44((uint64_t)v8, (uint64_t)&unk_101659240, (uint64_t)v13);
  }
  else
  {
    static os_log_type_t.default.getter();
    os_log(_:dso:log:_:_:)();
    uint64_t v14 = (void *)swift_allocObject();
    _OWORD v14[2] = v9;
    v14[3] = sub_100B53ABC;
    v14[4] = v0;
    aBlock[4] = sub_100B53AE0;
    void aBlock[5] = v14;
    aBlock[0] = _NSConcreteStackBlock;
    aBlock[1] = 1107296256;
    aBlock[2] = sub_1004B5480;
    aBlock[3] = &unk_1015E7B10;
    int v15 = _Block_copy(aBlock);
    swift_retain();
    swift_retain();
    static DispatchQoS.unspecified.getter();
    uint64_t v25 = _swiftEmptyArrayStorage;
    sub_100B22DA4((unint64_t *)&qword_10163B7E0, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
    sub_10000588C((uint64_t *)&unk_10163F350);
    sub_100062734((unint64_t *)&qword_10163B7F0, (uint64_t *)&unk_10163F350);
    uint64_t v16 = v21;
    uint64_t v17 = v24;
    dispatch thunk of SetAlgebra.init<A>(_:)();
    OS_dispatch_queue.async(group:qos:flags:execute:)();
    _Block_release(v15);
    (*(void (**)(char *, uint64_t))(v23 + 8))(v16, v17);
    (*(void (**)(char *, uint64_t))(v20 + 8))(v5, v22);
  }
  swift_release();
  swift_release_n();
  return swift_release();
}

unint64_t sub_100AB244C@<X0>(unint64_t *a1@<X0>, unsigned char *a2@<X8>)
{
  unint64_t result = sub_100B44310(*a1);
  *a2 = result;
  return result;
}

CKRecordZoneID sub_100AB2478()
{
  sub_10001D4B0(0, (unint64_t *)&unk_10165F040);
  v0._countAndFlagsBits = static String._unconditionallyBridgeFromObjectiveC(_:)();
  v0._object = v1;
  v2._countAndFlagsBits = 0x74536E6F63616542;
  v2._object = (void *)0xEB0000000065726FLL;
  result.super.Class isa = CKRecordZoneID.init(zoneName:ownerName:)(v2, v0).super.isa;
  qword_10170EA30 = (uint64_t)result.super.isa;
  return result;
}

uint64_t sub_100AB24F0()
{
  if (*(void *)(v0 + 208))
  {
    uint64_t v1 = *(void *)(v0 + 208);
  }
  else
  {
    type metadata accessor for CloudKitCoordinator();
    OSAllocatedUnfairLock.callAsFunction<A>(_:)();
    uint64_t v1 = v3;
    *(void *)(v0 + 208) = v3;
    swift_retain();
    swift_release();
  }
  swift_retain();
  return v1;
}

void sub_100AB2594(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  int v15 = a2;
  uint64_t v3 = type metadata accessor for OS_dispatch_queue.Attributes();
  __chkstk_darwin(v3);
  uint64_t v4 = type metadata accessor for DispatchQoS();
  __chkstk_darwin(v4 - 8);
  uint64_t v5 = type metadata accessor for OS_dispatch_queue.AutoreleaseFrequency();
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v8 = (char *)&v13 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = *(void *)(a1 + 216);
  uint64_t v14 = *(void *)(a1 + 184);
  uint64_t v13 = sub_10001D4B0(0, (unint64_t *)&qword_1016376E0);
  (*(void (**)(char *, void, uint64_t))(v6 + 104))(v8, enum case for OS_dispatch_queue.AutoreleaseFrequency.workItem(_:), v5);
  swift_retain();
  swift_retain();
  static DispatchQoS.unspecified.getter();
  uint64_t v16 = _swiftEmptyArrayStorage;
  sub_100B22DA4((unint64_t *)&qword_101638CC0, (void (*)(uint64_t))&type metadata accessor for OS_dispatch_queue.Attributes);
  sub_10000588C((uint64_t *)&unk_1016376F0);
  sub_100062734((unint64_t *)&qword_101638CD0, (uint64_t *)&unk_1016376F0);
  dispatch thunk of SetAlgebra.init<A>(_:)();
  int v10 = (void *)OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)();
  type metadata accessor for CloudKitCoordinator();
  uint64_t v11 = swift_allocObject();
  swift_retain();
  uint64_t v12 = sub_100B4AF00(v9, a1, v14, v10, v11);
  swift_release();
  swift_release();
  swift_release();

  *int v15 = v12;
}

id sub_100AB287C()
{
  uint64_t v1 = OBJC_IVAR____TtC12searchpartyd11BeaconStore____lazy_storage___locationStateCapture;
  Swift::String v2 = *(void **)(v0 + OBJC_IVAR____TtC12searchpartyd11BeaconStore____lazy_storage___locationStateCapture);
  if (v2)
  {
    id v3 = *(id *)(v0 + OBJC_IVAR____TtC12searchpartyd11BeaconStore____lazy_storage___locationStateCapture);
  }
  else
  {
    id v4 = objc_allocWithZone((Class)FMStateCapture);
    swift_retain();
    id v5 = [v4 init];
    uint64_t v6 = swift_allocObject();
    *(void *)(v6 + 16) = sub_100B5FE80;
    *(void *)(v6 + 24) = v0;
    v11[4] = sub_100B5FE88;
    v11[5] = v6;
    v11[0] = _NSConcreteStackBlock;
    v11[1] = 1107296256;
    id v11[2] = sub_1000B6B9C;
    v11[3] = &unk_1015E9730;
    uint64_t v7 = _Block_copy(v11);
    swift_retain();
    swift_release();
    [v5 setStateCaptureBlock:v7];
    _Block_release(v7);
    swift_release();
    uint64_t v8 = *(void **)(v0 + v1);
    *(void *)(v0 + v1) = v5;
    id v3 = v5;

    Swift::String v2 = 0;
  }
  id v9 = v2;
  return v3;
}

char *sub_100AB29D8@<X0>(char **a1@<X8>)
{
  if (qword_101637030 != -1) {
    swift_once();
  }
  uint64_t v2 = type metadata accessor for URL();
  sub_100010324(v2, (uint64_t)qword_10170EB70);
  CKRecordZoneID result = sub_100B1EB4C();
  *a1 = result;
  return result;
}

uint64_t sub_100AB2A48()
{
  uint64_t v1 = OBJC_IVAR____TtC12searchpartyd11BeaconStore____lazy_storage___sharedBeaconKeysUpdatedPublisher;
  if (*(void *)(v0 + OBJC_IVAR____TtC12searchpartyd11BeaconStore____lazy_storage___sharedBeaconKeysUpdatedPublisher))
  {
    uint64_t v2 = *(void *)(v0 + OBJC_IVAR____TtC12searchpartyd11BeaconStore____lazy_storage___sharedBeaconKeysUpdatedPublisher);
  }
  else
  {
    uint64_t v3 = v0;
    type metadata accessor for BeaconKeyManager(0);
    OSAllocatedUnfairLock.callAsFunction<A>(_:)();
    swift_retain();
    swift_release();
    sub_10000588C(&qword_101659518);
    sub_100062734(&qword_101659520, &qword_101659518);
    uint64_t v2 = Publisher.eraseToAnyPublisher()();
    swift_release();
    *(void *)(v3 + v1) = v2;
    swift_retain();
    swift_release();
  }
  swift_retain();
  return v2;
}

uint64_t sub_100AB2B80()
{
  uint64_t v1 = OBJC_IVAR____TtC12searchpartyd11BeaconStore____lazy_storage____beaconKeyManager;
  if (*(void *)(v0 + OBJC_IVAR____TtC12searchpartyd11BeaconStore____lazy_storage____beaconKeyManager))
  {
    uint64_t v2 = *(void *)(v0 + OBJC_IVAR____TtC12searchpartyd11BeaconStore____lazy_storage____beaconKeyManager);
  }
  else
  {
    uint64_t v3 = v0;
    type metadata accessor for BeaconKeyManager(0);
    swift_allocObject();
    uint64_t v4 = swift_retain();
    uint64_t v2 = sub_1012D8C54(v4);
    *(void *)(v3 + v1) = v2;
    swift_retain();
    swift_release();
  }
  swift_retain();
  return v2;
}

uint64_t sub_100AB2C04@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = sub_100AB2B80();
  *a1 = result;
  return result;
}

uint64_t sub_100AB2C40()
{
  if (*(void *)(v0 + OBJC_IVAR____TtC12searchpartyd11BeaconStore____lazy_storage___recordPublisher))
  {
    uint64_t v1 = *(void *)(v0 + OBJC_IVAR____TtC12searchpartyd11BeaconStore____lazy_storage___recordPublisher);
  }
  else
  {
    uint64_t v1 = *(void *)(*(void *)(v0 + 160) + 56);
    *(void *)(v0 + OBJC_IVAR____TtC12searchpartyd11BeaconStore____lazy_storage___recordPublisher) = v1;
    swift_retain_n();
  }
  swift_retain();
  return v1;
}

void *sub_100AB2C98(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  uint64_t v99 = a4;
  uint64_t v105 = a3;
  uint64_t v106 = a1;
  uint64_t v107 = a2;
  uint64_t v104 = *v4;
  uint64_t v5 = sub_10000588C(&qword_10163C6C8);
  __chkstk_darwin(v5 - 8);
  uint64_t v100 = (char *)&v95 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v103 = sub_10000588C(&qword_101659598);
  uint64_t v102 = *(void *)(v103 - 8);
  __chkstk_darwin(v103);
  uint64_t v101 = (char *)&v95 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  id v118 = (id)type metadata accessor for OS_dispatch_queue.Attributes();
  __chkstk_darwin(v118);
  uint64_t v8 = type metadata accessor for DispatchQoS();
  __chkstk_darwin(v8 - 8);
  int v10 = (char *)&v95 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = type metadata accessor for OS_dispatch_queue.AutoreleaseFrequency();
  uint64_t v12 = *(void *)(v11 - 8);
  __chkstk_darwin(v11);
  uint64_t v14 = (char *)&v95 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4[2] = 0x74536E6F63616542;
  v4[3] = 0xEB0000000065726FLL;
  v4[4] = 0;
  v4[5] = 0;
  LOBYTE(aBlock[0]) = 0;
  sub_10000588C(&qword_101657190);
  swift_allocObject();
  v4[6] = CurrentValueSubject.init(_:)();
  uint64_t v15 = sub_10001D4B0(0, (unint64_t *)&qword_1016376E0);
  unsigned int v115 = enum case for OS_dispatch_queue.AutoreleaseFrequency.workItem(_:);
  uint64_t v16 = *(void (**)(char *))(v12 + 104);
  uint64_t v111 = v12 + 104;
  v16(v14);
  static DispatchQoS.unspecified.getter();
  aBlock[0] = (uint64_t)_swiftEmptyArrayStorage;
  uint64_t v114 = sub_100B22DA4((unint64_t *)&qword_101638CC0, (void (*)(uint64_t))&type metadata accessor for OS_dispatch_queue.Attributes);
  uint64_t v113 = sub_10000588C((uint64_t *)&unk_1016376F0);
  uint64_t v17 = sub_100062734((unint64_t *)&qword_101638CD0, (uint64_t *)&unk_1016376F0);
  dispatch thunk of SetAlgebra.init<A>(_:)();
  uint64_t v117 = (const char *)v15;
  uint64_t v18 = OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)();
  uint64_t v109 = v4;
  v4[8] = v18;
  v4[10] = 0;
  uint64_t v19 = v115;
  uint64_t v116 = v11;
  ((void (*)(char *, void, uint64_t))v16)(v14, v115, v11);
  static DispatchQoS.unspecified.getter();
  aBlock[0] = (uint64_t)_swiftEmptyArrayStorage;
  uint64_t v110 = v17;
  dispatch thunk of SetAlgebra.init<A>(_:)();
  unint64_t v98 = 0xD00000000000003BLL;
  v109[11] = OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)();
  uint64_t v20 = v16;
  uint64_t v112 = (void (*)(char *, uint64_t, uint64_t))v16;
  ((void (*)(char *, uint64_t, uint64_t))v16)(v14, v19, v11);
  static DispatchQoS.unspecified.getter();
  aBlock[0] = (uint64_t)_swiftEmptyArrayStorage;
  dispatch thunk of SetAlgebra.init<A>(_:)();
  uint64_t v21 = OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)();
  uint64_t v22 = v109;
  v109[12] = v21;
  v22[13] = 0;
  v22[14] = 0;
  v22[15] = 0;
  uint64_t v23 = v115;
  ((void (*)(char *, void, uint64_t))v20)(v14, v115, v116);
  static DispatchQoS.unspecified.getter();
  aBlock[0] = (uint64_t)_swiftEmptyArrayStorage;
  dispatch thunk of SetAlgebra.init<A>(_:)();
  uint64_t v24 = OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)();
  uint64_t v25 = v109;
  v109[17] = v24;
  BOOL v26 = v25;
  v112(v14, v23, v116);
  static DispatchQoS.unspecified.getter();
  aBlock[0] = (uint64_t)_swiftEmptyArrayStorage;
  dispatch thunk of SetAlgebra.init<A>(_:)();
  unint64_t v97 = 0xD000000000000031;
  uint64_t v108 = v10;
  v26[18] = OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)();
  if (qword_101636F68 != -1) {
    swift_once();
  }
  uint64_t v27 = (void *)qword_10170EA30;
  v26[19] = qword_10170EA30;
  v26[21] = 0;
  uint64_t v96 = sub_10000588C((uint64_t *)&unk_101638CE0);
  uint64_t v28 = swift_allocObject();
  *(_DWORD *)(v28 + 16) = 0;
  v26[22] = v28;
  v26[25] = &_swiftEmptySetSingleton;
  unint64_t v98 = (unint64_t)(v26 + 25);
  v26[26] = 0;
  uint64_t v29 = (void *)SPBeaconsChangedNotification;
  type metadata accessor for DarwinNotificationHelper();
  swift_allocObject();
  id v30 = v27;
  id v31 = v29;
  v26[28] = DarwinNotificationHelper.init(notificationName:rateLimit:)();
  uint64_t v32 = (void *)SPUnknownBeaconsChangedNotification;
  swift_allocObject();
  id v33 = v32;
  v26[29] = DarwinNotificationHelper.init(notificationName:rateLimit:)();
  uint64_t v34 = (void *)SPUnknownBeaconsSetChangedNotification;
  swift_allocObject();
  id v35 = v34;
  v26[30] = DarwinNotificationHelper.init(notificationName:rateLimit:)();
  uint64_t v36 = (void *)SPSeparationMonitoringBeaconsChangedNotification;
  swift_allocObject();
  id v37 = v36;
  v26[31] = DarwinNotificationHelper.init(notificationName:rateLimit:)();
  int v38 = (void *)SPSeparationMonitoringStateChangedNotification;
  swift_allocObject();
  id v39 = v38;
  v26[32] = DarwinNotificationHelper.init(notificationName:rateLimit:)();
  uint64_t v40 = (void *)SPAccessoryDidPairNotification;
  swift_allocObject();
  id v41 = v40;
  uint64_t v42 = DarwinNotificationHelper.init(notificationName:rateLimit:)();
  v26[34] = 0;
  v26[35] = 0;
  v26[33] = v42;
  v112(v14, v115, v116);
  static DispatchQoS.unspecified.getter();
  aBlock[0] = (uint64_t)_swiftEmptyArrayStorage;
  dispatch thunk of SetAlgebra.init<A>(_:)();
  v26[36] = OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)();
  v26[37] = _swiftEmptyDictionarySingleton;
  v26[38] = _swiftEmptyDictionarySingleton;
  PressuredExitTransactionManager.init()();
  *(void *)((char *)v26 + OBJC_IVAR____TtC12searchpartyd11BeaconStore____lazy_storage___locationStateCapture) = 0;
  int v43 = (void *)((char *)v26 + OBJC_IVAR____TtC12searchpartyd11BeaconStore_resetHandler);
  *int v43 = 0;
  v43[1] = 0;
  int v44 = (void *)((char *)v26 + OBJC_IVAR____TtC12searchpartyd11BeaconStore_beaconStoreChanged);
  *int v44 = 0;
  v44[1] = 0;
  *(void *)((char *)v26 + OBJC_IVAR____TtC12searchpartyd11BeaconStore_instructionEventCoalescer) = 0;
  *(void *)((char *)v26
            + OBJC_IVAR____TtC12searchpartyd11BeaconStore____lazy_storage___sharedBeaconKeysUpdatedPublisher) = 0;
  *(void *)((char *)v26 + OBJC_IVAR____TtC12searchpartyd11BeaconStore____lazy_storage____beaconKeyManager) = 0;
  uint64_t v45 = OBJC_IVAR____TtC12searchpartyd11BeaconStore_beaconKeyManagerLock;
  uint64_t v46 = swift_allocObject();
  *(_DWORD *)(v46 + 16) = 0;
  *(void *)((char *)v26 + v45) = v46;
  *(void *)((char *)v26 + OBJC_IVAR____TtC12searchpartyd11BeaconStore____lazy_storage___recordPublisher) = 0;
  uint64_t v47 = OBJC_IVAR____TtC12searchpartyd11BeaconStore_estimatedLocationSubject;
  sub_10000588C(&qword_1016567A8);
  swift_allocObject();
  *(void *)((char *)v26 + v47) = PassthroughSubject.init()();
  uint64_t v48 = OBJC_IVAR____TtC12searchpartyd11BeaconStore_recordDeletedSubject;
  uint64_t v96 = OBJC_IVAR____TtC12searchpartyd11BeaconStore_recordDeletedSubject;
  sub_10000588C(&qword_1016595A0);
  swift_allocObject();
  *(void *)((char *)v26 + v48) = PassthroughSubject.init()();
  uint64_t v49 = OBJC_IVAR____TtC12searchpartyd11BeaconStore_changeSetSequence;
  type metadata accessor for Sequencer();
  *(void *)((char *)v26 + v49) = Sequencer.__allocating_init(name:softTimeout:hardTimeout:)();
  uint64_t v50 = OBJC_IVAR____TtC12searchpartyd11BeaconStore_sharedBeaconUUIDMapper;
  _s22SharedBeaconUUIDMapperCMa();
  uint64_t v51 = swift_allocObject();
  *(void *)(v51 + 16) = _swiftEmptyDictionarySingleton;
  *(void *)(v51 + 24) = _swiftEmptyDictionarySingleton;
  *(void *)((char *)v26 + v50) = v51;
  uint64_t v52 = OBJC_IVAR____TtC12searchpartyd11BeaconStore_hiddenBeaconCoordinator;
  _s23HiddenBeaconCoordinatorCMa();
  uint64_t v53 = swift_allocObject();
  swift_defaultActor_initialize();
  *(void *)(v53 + 112) = &_swiftEmptySetSingleton;
  *(void *)((char *)v26 + v52) = v53;
  uint64_t v54 = OBJC_IVAR____TtC12searchpartyd11BeaconStore_cachedBeaconRecordsQueue;
  v112(v14, v115, v116);
  static DispatchQoS.unspecified.getter();
  aBlock[0] = (uint64_t)_swiftEmptyArrayStorage;
  dispatch thunk of SetAlgebra.init<A>(_:)();
  uint64_t v55 = (void *)OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)();
  *(void *)((char *)v26 + v54) = v55;
  *(void *)((char *)v26 + OBJC_IVAR____TtC12searchpartyd11BeaconStore_cachedOwnedBeaconRecords) = 0;
  *(void *)((char *)v26 + OBJC_IVAR____TtC12searchpartyd11BeaconStore_cachedSharedBeaconRecords) = 0;
  *(void *)((char *)v26 + OBJC_IVAR____TtC12searchpartyd11BeaconStore_beaconNamingRecordCache) = _swiftEmptyDictionarySingleton;
  uint64_t v56 = (void *)v26[8];
  type metadata accessor for QueueSynchronizer();
  swift_allocObject();
  id v57 = v56;
  v26[9] = QueueSynchronizer.init(queue:)();
  swift_allocObject();
  id v58 = v55;
  *(void *)((char *)v26 + OBJC_IVAR____TtC12searchpartyd11BeaconStore_cachedBeaconRecordsQueueSynchronizer) = QueueSynchronizer.init(queue:)();
  uint64_t v60 = v106;
  uint64_t v59 = v107;
  v26[27] = v106;
  uint64_t v61 = v105;
  v26[23] = v59;
  v26[24] = v61;
  type metadata accessor for BeaconStoreFileManager();
  swift_allocObject();
  swift_retain_n();
  swift_retain();
  swift_retain();
  v26[20] = sub_100B68260(v60);
  uint64_t v62 = v26[6];
  sub_10000588C(&qword_1016595A8);
  uint64_t v63 = swift_allocObject();
  *(void *)(v63 + 16) = v62;
  v26[7] = v63;
  uint64_t v64 = v99;
  v26[16] = v99;
  aBlock[0] = *(void *)((char *)v26 + v96);
  sub_100062734(&qword_1016595B0, &qword_1016595A0);
  swift_retain();
  id v118 = v64;
  *(void *)((char *)v26 + OBJC_IVAR____TtC12searchpartyd11BeaconStore_recordDeletedPublisher) = Publisher.eraseToAnyPublisher()();
  aBlock[0] = *(void *)(v61 + 64);
  id v120 = v57;
  uint64_t v65 = type metadata accessor for OS_dispatch_queue.SchedulerOptions();
  uint64_t v66 = (uint64_t)v100;
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v65 - 8) + 56))(v100, 1, 1, v65);
  id v67 = v57;
  swift_retain();
  sub_10000588C(&qword_101648908);
  sub_100062734(&qword_101648910, &qword_101648908);
  sub_10033149C((unint64_t *)&qword_10166C020, (unint64_t *)&qword_1016376E0);
  uint64_t v68 = v101;
  Publisher.receive<A>(on:options:)();
  sub_10001DAB4(v66, &qword_10163C6C8);

  swift_release();
  swift_allocObject();
  swift_weakInit();
  sub_100062734(&qword_1016595B8, &qword_101659598);
  uint64_t v69 = v103;
  Publisher<>.sink(receiveValue:)();
  swift_release();
  (*(void (**)(char *, uint64_t))(v102 + 8))(v68, v69);
  swift_beginAccess();
  AnyCancellable.store(in:)();
  swift_endAccess();
  swift_release();
  type metadata accessor for InstructionEventCoalescer();
  swift_allocObject();
  uint64_t v70 = swift_retain();
  uint64_t v71 = sub_100EB24D8(v70);
  swift_release();
  *(void *)((char *)v26 + OBJC_IVAR____TtC12searchpartyd11BeaconStore_instructionEventCoalescer) = v71;
  swift_release();

  uint64_t v72 = (uint64_t)v108;
  static DispatchQoS.background.getter();
  uint64_t v73 = swift_allocObject();
  *(void *)(v73 + 16) = v104;
  type metadata accessor for XPCActivity();
  swift_allocObject();
  swift_retain();
  uint64_t v74 = sub_1009D9B34(0xD00000000000002BLL, (void *)0x8000000101414930, v72, (uint64_t)sub_100B63C80, v73, (uint64_t)sub_100B63CC4, (uint64_t)v26);
  swift_release();
  swift_release();
  v26[35] = v74;
  swift_release();
  uint64_t v75 = self;
  uint64_t v76 = &selRef_fetchEncryptedPayloadForUnknownBeacon_completion_;
  id v77 = [v75 standardUserDefaults];
  NSString v78 = String._bridgeToObjectiveC()();
  id v79 = [v77 stringForKey:v78];

  if (v79)
  {
    uint64_t v80 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    unint64_t v82 = v81;

    if (qword_101636F50 != -1) {
      swift_once();
    }
    uint64_t v83 = type metadata accessor for Logger();
    sub_100010324(v83, (uint64_t)qword_10170E9E8);
    swift_bridgeObjectRetain();
    uint64_t v84 = Logger.logObject.getter();
    os_log_type_t v85 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v84, v85))
    {
      uint64_t v116 = v80;
      uint64_t v86 = (uint8_t *)swift_slowAlloc();
      uint64_t v87 = swift_slowAlloc();
      uint64_t v117 = "removeGhostBeacons()";
      aBlock[0] = v87;
      *(_DWORD *)uint64_t v86 = 136446210;
      swift_bridgeObjectRetain();
      id v120 = (id)sub_1008FA0F0(v116, v82, aBlock);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      _os_log_impl((void *)&_mh_execute_header, v84, v85, "Previous daemon crashed during transaction: %{public}s", v86, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      uint64_t v76 = &selRef_fetchEncryptedPayloadForUnknownBeacon_completion_;
      swift_slowDealloc();
    }
    else
    {

      swift_bridgeObjectRelease_n();
    }
    id v89 = [v75 v76[54]];
    NSString v90 = String._bridgeToObjectiveC()();
    [v89 setBool:1 forKey:v90];

    id v91 = [v75 v76[54]];
    NSString v92 = String._bridgeToObjectiveC()();
    [v91 removeObjectForKey:v92];

    NSString v88 = String._bridgeToObjectiveC()();
    aBlock[4] = (uint64_t)sub_100AB4150;
    void aBlock[5] = 0;
    aBlock[0] = (uint64_t)_NSConcreteStackBlock;
    aBlock[1] = 1107296256;
    aBlock[2] = (uint64_t)sub_1010DBEE0;
    aBlock[3] = (uint64_t)&unk_1015EA068;
    uint64_t v93 = _Block_copy(aBlock);
    AnalyticsSendEventLazy();
    swift_release();
    swift_release();
    swift_release();

    _Block_release(v93);
  }
  else
  {
    swift_release();
    swift_release();
    swift_release();
    NSString v88 = v118;
  }

  return v26;
}

uint64_t sub_100AB3F8C()
{
  swift_beginAccess();
  uint64_t result = swift_weakLoadStrong();
  if (result)
  {
    sub_100ACCBC8();
    return swift_release();
  }
  return result;
}

void sub_100AB3FE4(uint64_t a1, uint64_t a2, char a3)
{
  Transaction.capture()();
  if (a3 == 3)
  {
    sub_1009D7368();
  }
  else if (a3 == 2)
  {
    if (qword_101636F50 != -1) {
      swift_once();
    }
    uint64_t v4 = type metadata accessor for Logger();
    sub_100010324(v4, (uint64_t)qword_10170E9E8);
    uint64_t v5 = Logger.logObject.getter();
    os_log_type_t v6 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v5, v6))
    {
      uint64_t v7 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v7 = 0;
      _os_log_impl((void *)&_mh_execute_header, v5, v6, "XPC activity fired for BeaconStore", v7, 2u);
      swift_slowDealloc();
    }

    type metadata accessor for Transaction();
    static Transaction.named<A>(_:with:)();
    sub_1009D7390();
  }
}

unint64_t sub_100AB4150()
{
  sub_10000588C(&qword_1016595C0);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_101342130;
  *(void *)(inited + 32) = 0xD000000000000019;
  *(void *)(inited + 40) = 0x80000001014149D0;
  sub_10001D4B0(0, (unint64_t *)&qword_10164DC40);
  *(NSNumber *)(inited + 48) = NSNumber.init(BOOLeanLiteral:)(1);
  return sub_10092FFD8(inited);
}

uint64_t sub_100AB41E4()
{
  uint64_t v1 = v0;
  uint64_t v2 = swift_allocObject();
  swift_weakInit();
  type metadata accessor for CryptorRepairTool();
  uint64_t v3 = (void *)swift_allocObject();
  sub_10000588C(&qword_1016594D0);
  swift_allocObject();
  swift_retain();
  v3[2] = KeyedThrottle.init(throttleInterval:)();
  sub_10000588C((uint64_t *)&unk_101638CE0);
  uint64_t v4 = swift_allocObject();
  *(_DWORD *)(v4 + 16) = 0;
  v3[3] = v4;
  v3[4] = 0;
  v3[5] = 0;
  v3[6] = 0;
  v3[7] = sub_100B5EF14;
  v3[8] = v2;
  swift_release();
  *(void *)(*(void *)(v0 + 160) + 32) = v3;
  swift_retain();
  swift_release();
  if (qword_1016371D8 != -1) {
    swift_once();
  }
  SynchronousCache.cachedValue<A>(key:computeBlock:)();
  uint64_t result = swift_bridgeObjectRelease();
  if ((v15 & 1) == 0)
  {
    sub_100AB24F0();
    sub_10100E04C();
    sub_10100E2B8(1);
    sub_10100EA80();
    type metadata accessor for Transaction();
    static Transaction.named<A>(_:with:)();
    uint64_t result = swift_release();
  }
  if (*(void *)(v0 + OBJC_IVAR____TtC12searchpartyd11BeaconStore_instructionEventCoalescer))
  {
    type metadata accessor for BeaconKeyManager(0);
    swift_retain();
    OSAllocatedUnfairLock.callAsFunction<A>(_:)();
    os_log_type_t v6 = *(void **)(OBJC_IVAR____TtC12searchpartyd16BeaconKeyManager_publisher + 0x7365547265646E75);
    swift_retain();
    swift_release();
    sub_100EB0528(v6);
    swift_release();
    swift_release();
    OSAllocatedUnfairLock.callAsFunction<A>(_:)();
    uint64_t v7 = MEMORY[0x7365547265646E85];
    swift_unownedRetainStrong();
    swift_retain();
    if (v7)
    {
      sub_100B48EDC(v7, (void (*)(uint64_t))sub_100B5EF38, 0x7365547265646E75);
      swift_release();
    }
    else
    {
      sub_1012DB6A4(0x7365547265646E75);
    }
    swift_release_n();
    uint64_t v8 = swift_retain();
    sub_100B49888(v8, v0);
    swift_release();
    sub_10000588C((uint64_t *)&unk_10163EAB8);
    uint64_t inited = swift_initStackObject();
    *(_OWORD *)(inited + 16) = xmmword_101342130;
    if (qword_101637478 != -1) {
      swift_once();
    }
    uint64_t v10 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v12 = v11;
    uint64_t v13 = swift_allocObject();
    swift_weakInit();
    uint64_t v14 = swift_allocObject();
    *(void *)(v14 + 16) = sub_100B5EF40;
    *(void *)(v14 + 24) = v13;
    *(void *)(inited + 32) = v10;
    *(void *)(inited + 40) = v12;
    *(void *)(inited + 48) = sub_1001DF664;
    *(void *)(inited + 56) = v14;
    sub_10092E16C(inited);
    type metadata accessor for DarwinNotificationHelper();
    swift_allocObject();
    *(void *)(v1 + 272) = DarwinNotificationHelper.init(notificationHandlers:)();
    swift_release();
    type metadata accessor for Transaction();
    swift_retain();
    static Transaction.asyncTask(name:block:)();
    swift_release();
    return swift_release();
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_100AB46A4()
{
  swift_beginAccess();
  uint64_t result = swift_weakLoadStrong();
  if (result)
  {
    uint64_t v1 = type metadata accessor for Transaction();
    __chkstk_darwin(v1);
    static Transaction.named<A>(_:with:)();
    return swift_release();
  }
  return result;
}

uint64_t sub_100AB4774(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v7 = (char *)v14 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = type metadata accessor for DispatchQoS();
  uint64_t v8 = *(void *)(v15 - 8);
  __chkstk_darwin(v15);
  uint64_t v10 = (char *)v14 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14[1] = *(void *)(a2 + 64);
  uint64_t v11 = swift_allocObject();
  *(void *)(v11 + 16) = a1;
  *(void *)(v11 + 24) = a2;
  aBlock[4] = sub_100B5F95C;
  void aBlock[5] = v11;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_1004B5480;
  aBlock[3] = &unk_1015E9500;
  uint64_t v12 = _Block_copy(aBlock);
  swift_retain();
  swift_retain();
  static DispatchQoS.unspecified.getter();
  void aBlock[7] = _swiftEmptyArrayStorage;
  sub_100B22DA4((unint64_t *)&qword_10163B7E0, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
  sub_10000588C((uint64_t *)&unk_10163F350);
  sub_100062734((unint64_t *)&qword_10163B7F0, (uint64_t *)&unk_10163F350);
  dispatch thunk of SetAlgebra.init<A>(_:)();
  OS_dispatch_queue.async(group:qos:flags:execute:)();
  _Block_release(v12);
  (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v15);
  return swift_release();
}

uint64_t sub_100AB4A48(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  uint64_t v4 = type metadata accessor for DispatchPredicate();
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v7 = &v12[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v8 = (void *)a2[8];
  *uint64_t v7 = v8;
  (*(void (**)(void *, void, uint64_t))(v5 + 104))(v7, enum case for DispatchPredicate.onQueue(_:), v4);
  id v9 = v8;
  LOBYTE(v8) = _dispatchPreconditionTest(_:)();
  uint64_t result = (*(uint64_t (**)(void *, uint64_t))(v5 + 8))(v7, v4);
  if (v8)
  {
    uint64_t v11 = type metadata accessor for Transaction();
    __chkstk_darwin(v11);
    *(void *)&v12[-16] = a2;
    *(void *)&v12[-8] = v3;
    return static Transaction.named<A>(_:with:)();
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_100AB4BF4(uint64_t a1)
{
  *(void *)(v1 + 120) = a1;
  return _swift_task_switch(sub_100AB4C14, 0, 0);
}

uint64_t sub_100AB4C14()
{
  if (qword_1016375E8 != -1) {
    swift_once();
  }
  swift_beginAccess();
  uint64_t result = sub_10001D074((uint64_t)&xmmword_10166E8F0, v0 + 56, (uint64_t *)&unk_101638D30);
  if (*(void *)(v0 + 80))
  {
    sub_10001CEB0((long long *)(v0 + 56), v0 + 16);
    sub_10001CD44((void *)(v0 + 16), *(void *)(v0 + 40));
    uint64_t v3 = (uint64_t (__cdecl *)())((char *)&dword_101639198 + dword_101639198);
    uint64_t v2 = (void *)swift_task_alloc();
    *(void *)(v0 + 128) = v2;
    *uint64_t v2 = v0;
    v2[1] = sub_100AB4D50;
    return v3();
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_100AB4D50(uint64_t a1)
{
  *(void *)(*(void *)v1 + 136) = a1;
  swift_task_dealloc();
  return _swift_task_switch(sub_100AB4E50, 0, 0);
}

uint64_t sub_100AB4E50()
{
  *(void *)(v0[15] + 168) = v0[17];
  swift_release();
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)(v0 + 2));
  uint64_t v1 = (uint64_t (*)(void))v0[1];
  return v1();
}

uint64_t sub_100AB4EC8()
{
  swift_beginAccess();
  uint64_t result = swift_weakLoadStrong();
  if (result)
  {
    type metadata accessor for Transaction();
    swift_retain();
    static Transaction.asyncTask(name:block:)();
    return swift_release_n();
  }
  return result;
}

void sub_100AB4F60(uint64_t a1, char a2)
{
  Transaction.capture()();
  if ((a2 & 1) == 0)
  {
    int64_t v4 = 0;
    uint64_t v5 = 0;
    uint64_t v6 = a1 + 64;
    uint64_t v7 = 1 << *(unsigned char *)(a1 + 32);
    uint64_t v8 = -1;
    if (v7 < 64) {
      uint64_t v8 = ~(-1 << v7);
    }
    unint64_t v9 = v8 & *(void *)(a1 + 64);
    uint64_t v10 = *(void *)(a1 + 16);
    int64_t v11 = (unint64_t)(v7 + 63) >> 6;
    while (1)
    {
      if (v9)
      {
        unint64_t v12 = __clz(__rbit64(v9));
        v9 &= v9 - 1;
        unint64_t v13 = v12 | (v4 << 6);
      }
      else
      {
        int64_t v16 = v4 + 1;
        if (__OFADD__(v4, 1)) {
          goto LABEL_40;
        }
        if (v16 >= v11)
        {
LABEL_29:
          sub_10015B6F0(a1, 0);
          swift_release();
          if (qword_101636F50 != -1) {
            swift_once();
          }
          uint64_t v24 = type metadata accessor for Logger();
          sub_100010324(v24, (uint64_t)qword_10170E9E8);
          uint64_t v25 = Logger.logObject.getter();
          os_log_type_t v26 = static os_log_type_t.default.getter();
          if (os_log_type_enabled(v25, v26))
          {
            uint64_t v27 = (uint8_t *)swift_slowAlloc();
            aBlock[0] = swift_slowAlloc();
            *(_DWORD *)uint64_t v27 = 136446210;
            sub_1008FA0F0(0xD000000000000038, 0x8000000101414A10, aBlock);
            UnsafeMutableRawBufferPointer.copyMemory(from:)();
            _os_log_impl((void *)&_mh_execute_header, v25, v26, "Publishing %{public}s analytics event.", v27, 0xCu);
            swift_arrayDestroy();
            swift_slowDealloc();
            swift_slowDealloc();
          }

          NSString v28 = String._bridgeToObjectiveC()();
          uint64_t v29 = swift_allocObject();
          *(void *)(v29 + 16) = v10;
          *(void *)(v29 + 24) = v5;
          *(unsigned char *)(v29 + 32) = v10 != v5;
          aBlock[4] = (uint64_t)sub_100B63D38;
          void aBlock[5] = v29;
          aBlock[0] = (uint64_t)_NSConcreteStackBlock;
          aBlock[1] = 1107296256;
          aBlock[2] = (uint64_t)sub_1010DBEE0;
          aBlock[3] = (uint64_t)&unk_1015EA0B8;
          id v30 = _Block_copy(aBlock);
          swift_release();
          AnalyticsSendEventLazy();
          _Block_release(v30);

          if (v10 != v5)
          {
            id v31 = Logger.logObject.getter();
            os_log_type_t v32 = static os_log_type_t.fault.getter();
            if (os_log_type_enabled(v31, v32))
            {
              uint64_t v33 = swift_slowAlloc();
              *(_DWORD *)uint64_t v33 = 134218240;
              aBlock[0] = v5;
              UnsafeMutableRawBufferPointer.copyMemory(from:)();
              *(_WORD *)(v33 + 12) = 2048;
              aBlock[0] = v10;
              UnsafeMutableRawBufferPointer.copyMemory(from:)();
              _os_log_impl((void *)&_mh_execute_header, v31, v32, "DUPLICATE BEACONS DETECTED -- beaconCount: %ld stableIdentifierCount: %ld", (uint8_t *)v33, 0x16u);
              swift_slowDealloc();
            }
          }
          return;
        }
        unint64_t v17 = *(void *)(v6 + 8 * v16);
        ++v4;
        if (!v17)
        {
          int64_t v4 = v16 + 1;
          if (v16 + 1 >= v11) {
            goto LABEL_29;
          }
          unint64_t v17 = *(void *)(v6 + 8 * v4);
          if (!v17)
          {
            int64_t v4 = v16 + 2;
            if (v16 + 2 >= v11) {
              goto LABEL_29;
            }
            unint64_t v17 = *(void *)(v6 + 8 * v4);
            if (!v17)
            {
              int64_t v4 = v16 + 3;
              if (v16 + 3 >= v11) {
                goto LABEL_29;
              }
              unint64_t v17 = *(void *)(v6 + 8 * v4);
              if (!v17)
              {
                int64_t v4 = v16 + 4;
                if (v16 + 4 >= v11) {
                  goto LABEL_29;
                }
                unint64_t v17 = *(void *)(v6 + 8 * v4);
                if (!v17)
                {
                  int64_t v18 = v16 + 5;
                  if (v18 >= v11) {
                    goto LABEL_29;
                  }
                  unint64_t v17 = *(void *)(v6 + 8 * v18);
                  if (!v17)
                  {
                    while (1)
                    {
                      int64_t v4 = v18 + 1;
                      if (__OFADD__(v18, 1)) {
                        break;
                      }
                      if (v4 >= v11) {
                        goto LABEL_29;
                      }
                      unint64_t v17 = *(void *)(v6 + 8 * v4);
                      ++v18;
                      if (v17) {
                        goto LABEL_25;
                      }
                    }
                    __break(1u);
                    return;
                  }
                  int64_t v4 = v18;
                }
              }
            }
          }
        }
LABEL_25:
        unint64_t v9 = (v17 - 1) & v17;
        unint64_t v13 = __clz(__rbit64(v17)) + (v4 << 6);
      }
      uint64_t v14 = *(void *)(*(void *)(a1 + 56) + 8 * v13);
      BOOL v15 = __OFADD__(v5, v14);
      v5 += v14;
      if (v15)
      {
        __break(1u);
LABEL_40:
        __break(1u);
        goto LABEL_41;
      }
    }
  }
  aBlock[0] = a1;
  swift_errorRetain();
  sub_10000588C(&qword_101638D40);
  swift_willThrowTypedImpl();
  if (qword_101636F50 != -1) {
LABEL_41:
  }
    swift_once();
  uint64_t v19 = type metadata accessor for Logger();
  sub_100010324(v19, (uint64_t)qword_10170E9E8);
  swift_errorRetain();
  uint64_t v20 = Logger.logObject.getter();
  os_log_type_t v21 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v20, v21))
  {
    uint64_t v22 = (uint8_t *)swift_slowAlloc();
    uint64_t v23 = (void *)swift_slowAlloc();
    *(_DWORD *)uint64_t v22 = 138543362;
    aBlock[0] = _convertErrorToNSError(_:)();
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *uint64_t v23 = aBlock[0];
    sub_10015B4A8(a1, 1);
    _os_log_impl((void *)&_mh_execute_header, v20, v21, "duplicateReport error: %{public}@", v22, 0xCu);
    sub_10000588C((uint64_t *)&unk_101638EA0);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    sub_10015B4A8(a1, 1);
  }
  else
  {
    sub_10015B4A8(a1, 1);
    sub_10015B4A8(a1, 1);
  }
}

unint64_t sub_100AB5558()
{
  sub_10000588C(&qword_1016595C0);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_101347500;
  *(void *)(inited + 32) = 0xD00000000000001FLL;
  *(void *)(inited + 40) = 0x8000000101414A50;
  *(NSNumber *)(inited + 48) = Int._bridgeToObjectiveC()();
  *(void *)(inited + 56) = 0x664F7265626D756ELL;
  *(void *)(inited + 64) = 0xEF736E6F63616542;
  *(NSNumber *)(inited + 72) = Int._bridgeToObjectiveC()();
  *(void *)(inited + 80) = 0xD000000000000013;
  *(void *)(inited + 88) = 0x8000000101414A70;
  *(NSNumber *)(inited + 96) = Bool._bridgeToObjectiveC()();
  return sub_10092FFD8(inited);
}

uint64_t sub_100AB5640(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  v6[3] = a5;
  _OWORD v6[4] = a6;
  void v6[2] = a4;
  return _swift_task_switch(sub_100AB5664, 0, 0);
}

uint64_t sub_100AB5664()
{
  uint64_t v1 = sub_100AB24F0();
  *(void *)(v0 + 40) = v1;
  uint64_t v2 = (void *)swift_task_alloc();
  *(void *)(v0 + 48) = v2;
  *uint64_t v2 = v0;
  v2[1] = sub_100AB5750;
  return withCheckedContinuation<A>(isolation:function:_:)(v0 + 72, 0, 0, 0xD000000000000014, 0x80000001013FBC20, sub_100414CC8, v1, &type metadata for Bool);
}

uint64_t sub_100AB5750()
{
  swift_task_dealloc();
  return _swift_task_switch(sub_100AB584C, 0, 0);
}

uint64_t sub_100AB584C()
{
  uint64_t v1 = *(void *)(v0 + 32);
  uint64_t v2 = *(void *)(v0 + 24);
  swift_release();
  char v3 = *(unsigned char *)(v0 + 72);
  uint64_t v4 = swift_allocObject();
  *(void *)(v0 + 56) = v4;
  *(void *)(v4 + 16) = v2;
  *(void *)(v4 + 24) = v1;
  *(unsigned char *)(v4 + 32) = v3;
  swift_retain();
  uint64_t v5 = (void *)swift_task_alloc();
  *(void *)(v0 + 64) = v5;
  *uint64_t v5 = v0;
  v5[1] = sub_100AB5948;
  return unsafeBlocking<A>(_:)(v5, sub_10028789C, v4, (char *)&type metadata for () + 8);
}

uint64_t sub_100AB5948()
{
  swift_task_dealloc();
  swift_release();
  return _swift_task_switch(sub_1003D0344, 0, 0);
}

void *sub_100AB5A60(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for SharedBeaconRecord(0);
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t v4 = __chkstk_darwin(v2);
  uint64_t v77 = (uint64_t)&v69 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = __chkstk_darwin(v4);
  uint64_t v78 = (uint64_t)&v69 - v7;
  uint64_t v8 = __chkstk_darwin(v6);
  uint64_t v10 = (char *)&v69 - v9;
  __chkstk_darwin(v8);
  unint64_t v12 = (char *)&v69 - v11;
  uint64_t v13 = type metadata accessor for Date();
  __chkstk_darwin(v13 - 8);
  BOOL v15 = (char *)&v69 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v88 = type metadata accessor for DateInterval();
  uint64_t v16 = *(void *)(v88 - 8);
  uint64_t v17 = __chkstk_darwin(v88);
  os_log_type_t v85 = (char *)&v69 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v86 = v18;
  __chkstk_darwin(v17);
  uint64_t v20 = (char *)&v69 - v19;
  static Date.trustedNow.getter((uint64_t)v15);
  uint64_t v87 = v20;
  DateInterval.init(start:duration:)();
  uint64_t v73 = *(void *)(a1 + 16);
  if (!v73)
  {
    id v67 = _swiftEmptyArrayStorage;
    goto LABEL_37;
  }
  uint64_t v70 = OBJC_IVAR____TtC12searchpartyd11BeaconStore_beaconKeyManagerLock;
  unint64_t v76 = (*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  uint64_t v71 = a1 + v76;
  uint64_t v79 = *(void *)(v3 + 72);
  uint64_t v84 = v16 + 16;
  uint64_t v83 = v16 + 32;
  uint64_t v69 = a1;
  swift_bridgeObjectRetain();
  uint64_t v21 = 0;
  uint64_t v22 = 0;
  uint64_t v93 = _swiftEmptyArrayStorage;
  unint64_t v82 = (char *)&type metadata for () + 8;
  long long v81 = xmmword_101342130;
  uint64_t v94 = v2;
  uint64_t v72 = v10;
  uint64_t v80 = v12;
  uint64_t v92 = v16;
  do
  {
    uint64_t v75 = v21;
    sub_100B30D0C(v71 + v79 * v21, (uint64_t)v12, type metadata accessor for SharedBeaconRecord);
    uint64_t v23 = *(void *)&v12[*(int *)(v2 + 44)];
    sub_100B30D0C((uint64_t)v12, (uint64_t)v10, type metadata accessor for SharedBeaconRecord);
    if (v23 == -1)
    {
      sub_100B310AC((uint64_t)v10, type metadata accessor for SharedBeaconRecord);
    }
    else
    {
      uint64_t v24 = *(void *)&v10[*(int *)(v2 + 48)];
      sub_100B310AC((uint64_t)v10, type metadata accessor for SharedBeaconRecord);
      uint64_t v25 = &off_1015A5878;
      if (v24 != -1) {
        goto LABEL_9;
      }
    }
    uint64_t v25 = &off_1015A58A0;
LABEL_9:
    os_log_type_t v26 = (char *)v25[2];
    uint64_t v74 = v25;
    if (v26)
    {
      uint64_t v90 = *(void *)(v91 + v70);
      uint64_t v27 = (char *)(v25 + 4);
      uint64_t v89 = sub_100B22DA4(&qword_101639EA0, (void (*)(uint64_t))type metadata accessor for SharedBeaconRecord);
      do
      {
        char v33 = *v27;
        uint64_t v96 = v27 + 1;
        v99[3] = v2;
        v99[4] = v89;
        uint64_t v34 = sub_10001D958(v99);
        uint64_t v35 = (uint64_t)v12;
        sub_100B30D0C((uint64_t)v12, (uint64_t)v34, type metadata accessor for SharedBeaconRecord);
        type metadata accessor for BeaconKeyManager(0);
        OSAllocatedUnfairLock.callAsFunction<A>(_:)();
        uint64_t v95 = v22;
        uint64_t v36 = v97;
        sub_10001D010((uint64_t)v99, (uint64_t)&v97);
        uint64_t v37 = v92;
        int v38 = v85;
        uint64_t v39 = v88;
        (*(void (**)(char *, char *, uint64_t))(v92 + 16))(v85, v87, v88);
        unint64_t v40 = (*(unsigned __int8 *)(v37 + 80) + 64) & ~(unint64_t)*(unsigned __int8 *)(v37 + 80);
        uint64_t v41 = v40 + v86;
        uint64_t v42 = swift_allocObject();
        *(void *)(v42 + 16) = v36;
        sub_10001CEB0(&v97, v42 + 24);
        (*(void (**)(unint64_t, char *, uint64_t))(v37 + 32))(v42 + v40, v38, v39);
        uint64_t v43 = v42 + v41;
        *(unsigned char *)uint64_t v43 = v33;
        *(_WORD *)(v43 + 1) = 0;
        swift_retain();
        unsafeFromAsyncTask<A>(_:)();
        swift_release();
        swift_release();
        long long v44 = v97;
        uint64_t v45 = v98;
        _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)v99);
        switch(v45)
        {
          case 1:
            static os_log_type_t.default.getter();
            if (qword_101637260 != -1) {
              swift_once();
            }
            sub_10000588C((uint64_t *)&unk_10163AD00);
            uint64_t v28 = swift_allocObject();
            *(_OWORD *)(v28 + 16) = v81;
            uint64_t v2 = v94;
            uint64_t v29 = v80;
            uint64_t v30 = UUID.uuidString.getter();
            uint64_t v32 = v31;
            *(void *)(v28 + 56) = &type metadata for String;
            *(void *)(v28 + 64) = sub_10000B4CC();
            *(void *)(v28 + 32) = v30;
            *(void *)(v28 + 40) = v32;
            os_log(_:dso:log:_:_:)();
            sub_1002F6A08(v44, *((uint64_t *)&v44 + 1), 1u);
            unint64_t v12 = v29;
            goto LABEL_14;
          case 2:
            static os_log_type_t.default.getter();
            if (qword_101637260 != -1) {
              swift_once();
            }
            sub_10000588C((uint64_t *)&unk_10163AD00);
            uint64_t v55 = swift_allocObject();
            *(_OWORD *)(v55 + 16) = v81;
            uint64_t v56 = v80;
            uint64_t v57 = UUID.uuidString.getter();
            uint64_t v59 = v58;
            *(void *)(v55 + 56) = &type metadata for String;
            *(void *)(v55 + 64) = sub_10000B4CC();
            *(void *)(v55 + 32) = v57;
            *(void *)(v55 + 40) = v59;
            uint64_t v2 = v94;
            unint64_t v12 = v56;
            os_log(_:dso:log:_:_:)();
            sub_1002F6A08(v44, *((uint64_t *)&v44 + 1), 2u);
LABEL_14:
            swift_bridgeObjectRelease();
            goto LABEL_15;
          case 3:
            static os_log_type_t.default.getter();
            if (qword_101637260 != -1) {
              swift_once();
            }
            sub_10000588C((uint64_t *)&unk_10163AD00);
            uint64_t v60 = swift_allocObject();
            *(_OWORD *)(v60 + 16) = v81;
            uint64_t v2 = v94;
            unint64_t v12 = (char *)v35;
            uint64_t v61 = UUID.uuidString.getter();
            uint64_t v63 = v62;
            *(void *)(v60 + 56) = &type metadata for String;
            *(void *)(v60 + 64) = sub_10000B4CC();
            *(void *)(v60 + 32) = v61;
            *(void *)(v60 + 40) = v63;
            os_log(_:dso:log:_:_:)();
            swift_bridgeObjectRelease();
            sub_100B30D0C(v35, v77, type metadata accessor for SharedBeaconRecord);
            unint64_t v64 = (unint64_t)v93;
            if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
              unint64_t v64 = sub_100A6F74C(0, *(void *)(v64 + 16) + 1, 1, v64);
            }
            unint64_t v66 = *(void *)(v64 + 16);
            unint64_t v65 = *(void *)(v64 + 24);
            if (v66 >= v65 >> 1) {
              unint64_t v64 = sub_100A6F74C(v65 > 1, v66 + 1, 1, v64);
            }
            *(void *)(v64 + 16) = v66 + 1;
            uint64_t v93 = (void *)v64;
            sub_100B30DB4(v77, v64 + v76 + v66 * v79, type metadata accessor for SharedBeaconRecord);
LABEL_15:
            uint64_t v22 = v95;
            break;
          default:
            static os_log_type_t.default.getter();
            if (qword_101637260 != -1) {
              swift_once();
            }
            sub_10000588C((uint64_t *)&unk_10163AD00);
            uint64_t v46 = swift_allocObject();
            *(_OWORD *)(v46 + 16) = v81;
            uint64_t v47 = (uint64_t)v80;
            uint64_t v48 = UUID.uuidString.getter();
            uint64_t v50 = v49;
            *(void *)(v46 + 56) = &type metadata for String;
            *(void *)(v46 + 64) = sub_10000B4CC();
            *(void *)(v46 + 32) = v48;
            *(void *)(v46 + 40) = v50;
            unint64_t v12 = (char *)v47;
            os_log(_:dso:log:_:_:)();
            swift_bridgeObjectRelease();
            sub_100B30D0C(v47, v78, type metadata accessor for SharedBeaconRecord);
            unint64_t v51 = (unint64_t)v93;
            if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
              unint64_t v51 = sub_100A6F74C(0, *(void *)(v51 + 16) + 1, 1, v51);
            }
            uint64_t v2 = v94;
            uint64_t v22 = v95;
            unint64_t v53 = *(void *)(v51 + 16);
            unint64_t v52 = *(void *)(v51 + 24);
            uint64_t v93 = (void *)v51;
            if (v53 >= v52 >> 1) {
              uint64_t v93 = (void *)sub_100A6F74C(v52 > 1, v53 + 1, 1, (unint64_t)v93);
            }
            uint64_t v54 = v93;
            v93[2] = v53 + 1;
            sub_100B30DB4(v78, (uint64_t)v54 + v76 + v53 * v79, type metadata accessor for SharedBeaconRecord);
            sub_1002F6A08(v44, *((uint64_t *)&v44 + 1), 0);
            break;
        }
        --v26;
        uint64_t v27 = v96;
      }
      while (v26);
    }
    uint64_t v21 = v75 + 1;
    swift_bridgeObjectRelease();
    sub_100B310AC((uint64_t)v12, type metadata accessor for SharedBeaconRecord);
    uint64_t v10 = v72;
    uint64_t v16 = v92;
  }
  while (v21 != v73);
  swift_bridgeObjectRelease();
  id v67 = v93;
LABEL_37:
  (*(void (**)(char *, uint64_t))(v16 + 8))(v87, v88);
  return v67;
}

uint64_t sub_100AB65DC()
{
  uint64_t v0 = sub_10000588C(&qword_10164DBB0);
  __chkstk_darwin(v0 - 8);
  uint64_t v61 = (char *)&v61 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v2 = type metadata accessor for DispatchPredicate();
  uint64_t v64 = *(void *)(v2 - 8);
  uint64_t v65 = v2;
  __chkstk_darwin(v2);
  uint64_t v63 = (char **)((char *)&v61 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v4 = type metadata accessor for URL();
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = __chkstk_darwin(v4);
  uint64_t v8 = (char *)&v61 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = __chkstk_darwin(v6);
  uint64_t v11 = (char *)&v61 - v10;
  uint64_t v12 = __chkstk_darwin(v9);
  uint64_t v14 = (char *)&v61 - v13;
  __chkstk_darwin(v12);
  uint64_t v16 = (char *)&v61 - v15;
  id v62 = self;
  id v17 = [v62 standardUserDefaults];
  NSString v18 = String._bridgeToObjectiveC()();
  id v67 = [v17 integerForKey:v18];

  uint64_t v19 = v4;
  type metadata accessor for BeaconStore(0);
  sub_100A9DB34((uint64_t)v11);
  URL.appendingPathComponent(_:isDirectory:)();
  uint64_t v20 = *(void (**)(char *, uint64_t))(v5 + 8);
  v20(v11, v19);
  URL.appendingPathComponent(_:)();
  v20(v14, v19);
  if (qword_101636F68 != -1) {
    swift_once();
  }
  uint64_t v21 = (void *)qword_10170EA30;
  sub_100A9DB34((uint64_t)v14);
  URL.appendingPathComponent(_:isDirectory:)();
  uint64_t v66 = v19;
  v20(v14, v19);
  v22._uint64_t countAndFlagsBits = 0x65746176697250;
  v22._object = (void *)0xE700000000000000;
  URL.appendPathComponent(_:)(v22);
  id v23 = [v21 ownerName];
  uint64_t v24 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  os_log_type_t v26 = v25;

  v27._uint64_t countAndFlagsBits = v24;
  v27._object = v26;
  URL.appendPathComponent(_:)(v27);
  swift_bridgeObjectRelease();
  id v28 = [v21 zoneName];
  uint64_t v29 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v31 = v30;

  v70._uint64_t countAndFlagsBits = v29;
  v70._object = v31;
  v32._uint64_t countAndFlagsBits = 0x6E656B6F742ELL;
  v32._object = (void *)0xE600000000000000;
  String.append(_:)(v32);
  URL.appendPathComponent(_:)(v70);
  swift_bridgeObjectRelease();
  uint64_t v69 = v16;
  Swift::Bool v33 = URL.checkResourceIsReachable()();
  if (v34)
  {
    swift_errorRelease();
    Swift::Bool v35 = 0;
  }
  else
  {
    Swift::Bool v35 = v33;
  }
  uint64_t v36 = v68;
  Swift::Bool v37 = URL.checkResourceIsReachable()();
  if (v38)
  {
    swift_errorRelease();
    uint64_t v39 = v69;
    if (!v35) {
      goto LABEL_15;
    }
  }
  else
  {
    uint64_t v39 = v69;
    if (v37 || !v35) {
      goto LABEL_15;
    }
  }
  if (qword_101636F50 != -1) {
    swift_once();
  }
  uint64_t v40 = type metadata accessor for Logger();
  sub_100010324(v40, (uint64_t)qword_10170E9E8);
  uint64_t v41 = Logger.logObject.getter();
  os_log_type_t v42 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v41, v42))
  {
    uint64_t v43 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v43 = 0;
    _os_log_impl((void *)&_mh_execute_header, v41, v42, "Recovering from 110328093", v43, 2u);
    uint64_t v36 = v68;
    swift_slowDealloc();
  }

  id v44 = [v62 standardUserDefaults];
  NSString v45 = String._bridgeToObjectiveC()();
  [v44 removeObjectForKey:v45];

  uint64_t v39 = v69;
LABEL_15:
  if (v67 == (id)28)
  {
LABEL_20:
    uint64_t v60 = v66;
    v20(v8, v66);
    return ((uint64_t (*)(char *, uint64_t))v20)(v39, v60);
  }
  uint64_t v68 = v20;
  static os_log_type_t.default.getter();
  if (qword_101637260 != -1) {
    swift_once();
  }
  os_log(_:dso:log:_:_:)();
  uint64_t v46 = (uint64_t *)*((void *)v36 + 20);
  uint64_t v47 = sub_100AB24F0();
  uint64_t v48 = (void *)v46[2];
  uint64_t v50 = v63;
  uint64_t v49 = v64;
  void *v63 = v48;
  uint64_t v51 = v65;
  (*(void (**)(void *, void, uint64_t))(v49 + 104))(v50, enum case for DispatchPredicate.notOnQueue(_:), v65);
  id v52 = v48;
  LOBYTE(v48) = _dispatchPreconditionTest(_:)();
  uint64_t result = (*(uint64_t (**)(void *, uint64_t))(v49 + 8))(v50, v51);
  if (v48)
  {
    uint64_t v54 = dispatch_group_create();
    dispatch_group_enter(v54);
    swift_retain();
    uint64_t v55 = v54;
    sub_101021028(0, v47, v46, v55);
    swift_release();
    swift_release();

    type metadata accessor for BeaconKeyManager(0);
    OSAllocatedUnfairLock.callAsFunction<A>(_:)();
    uint64_t countAndFlagsBits = v70._countAndFlagsBits;
    uint64_t v57 = type metadata accessor for TaskPriority();
    uint64_t v58 = (uint64_t)v61;
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v57 - 8) + 56))(v61, 1, 1, v57);
    uint64_t v59 = (void *)swift_allocObject();
    v59[2] = 0;
    v59[3] = 0;
    v59[4] = countAndFlagsBits;
    swift_retain();
    sub_1008F5E44(v58, (uint64_t)&unk_101642990, (uint64_t)v59);
    swift_release();
    type metadata accessor for Transaction();
    static Transaction.named<A>(_:with:)();
    swift_release();
    sub_100B3FCB8();
    uint64_t v20 = v68;
    uint64_t v39 = v69;
    goto LABEL_20;
  }
  __break(1u);
  return result;
}

uint64_t sub_100AB6E00(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v45 = a3;
  uint64_t v43 = a2;
  uint64_t v4 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v50 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v48 = (char *)&v37 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v49 = type metadata accessor for DispatchQoS();
  uint64_t v47 = *(void *)(v49 - 8);
  __chkstk_darwin(v49);
  uint64_t v46 = (char *)&v37 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for BeaconEstimatedLocation();
  uint64_t v8 = *(void *)(v7 - 8);
  uint64_t v9 = *(void *)(v8 + 64);
  uint64_t v10 = __chkstk_darwin(v7);
  uint64_t v11 = (char *)&v37 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = __chkstk_darwin(v10);
  uint64_t v14 = (char *)&v37 - v13;
  __chkstk_darwin(v12);
  uint64_t v16 = (char *)&v37 - v15;
  if (qword_101636F50 != -1) {
    swift_once();
  }
  uint64_t v17 = type metadata accessor for Logger();
  sub_100010324(v17, (uint64_t)qword_10170E9E8);
  sub_100B30D0C(a1, (uint64_t)v16, (uint64_t (*)(void))type metadata accessor for BeaconEstimatedLocation);
  sub_100B30D0C(a1, (uint64_t)v14, (uint64_t (*)(void))type metadata accessor for BeaconEstimatedLocation);
  NSString v18 = Logger.logObject.getter();
  os_log_type_t v19 = static os_log_type_t.default.getter();
  int v20 = v19;
  if (os_log_type_enabled(v18, v19))
  {
    uint64_t v21 = swift_slowAlloc();
    int v39 = v20;
    uint64_t v22 = v21;
    uint64_t v40 = swift_slowAlloc();
    aBlock[0] = v40;
    *(_DWORD *)uint64_t v22 = 136315651;
    os_log_t v38 = v18;
    sub_100B30D0C((uint64_t)v16, (uint64_t)v11, (uint64_t (*)(void))type metadata accessor for BeaconEstimatedLocation);
    uint64_t v23 = String.init<A>(describing:)();
    uint64_t v42 = v4;
    uint64_t v51 = sub_1008FA0F0(v23, v24, aBlock);
    uint64_t v41 = v8;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    sub_100B310AC((uint64_t)v16, (uint64_t (*)(void))type metadata accessor for BeaconEstimatedLocation);
    *(_WORD *)(v22 + 12) = 2160;
    uint64_t v51 = 1752392040;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v22 + 22) = 2081;
    type metadata accessor for UUID();
    sub_100B22DA4((unint64_t *)&qword_101638B10, (void (*)(uint64_t))&type metadata accessor for UUID);
    uint64_t v25 = dispatch thunk of CustomStringConvertible.description.getter();
    uint64_t v51 = sub_1008FA0F0(v25, v26, aBlock);
    uint64_t v8 = v41;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    uint64_t v4 = v42;
    sub_100B310AC((uint64_t)v14, (uint64_t (*)(void))type metadata accessor for BeaconEstimatedLocation);
    NSString v18 = v38;
    _os_log_impl((void *)&_mh_execute_header, v38, (os_log_type_t)v39, "Saving BeaconEstimatedLocation record %s,\nbeacon %{private,mask.hash}s.", (uint8_t *)v22, 0x20u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    sub_100B310AC((uint64_t)v16, (uint64_t (*)(void))type metadata accessor for BeaconEstimatedLocation);
    sub_100B310AC((uint64_t)v14, (uint64_t (*)(void))type metadata accessor for BeaconEstimatedLocation);
  }

  uint64_t v27 = v44;
  sub_100B30D0C(a1, (uint64_t)v11, (uint64_t (*)(void))type metadata accessor for BeaconEstimatedLocation);
  unint64_t v28 = (*(unsigned __int8 *)(v8 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80);
  unint64_t v29 = (v9 + v28 + 7) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v30 = swift_allocObject();
  sub_100B30DB4((uint64_t)v11, v30 + v28, (uint64_t (*)(void))type metadata accessor for BeaconEstimatedLocation);
  *(void *)(v30 + v29) = v27;
  uint64_t v31 = (void *)(v30 + ((v29 + 15) & 0xFFFFFFFFFFFFFFF8));
  uint64_t v32 = v45;
  *uint64_t v31 = v43;
  v31[1] = v32;
  aBlock[4] = (uint64_t)sub_100B5E5B8;
  void aBlock[5] = v30;
  aBlock[0] = (uint64_t)_NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = (uint64_t)sub_1004B5480;
  aBlock[3] = (uint64_t)&unk_1015E9190;
  Swift::Bool v33 = _Block_copy(aBlock);
  swift_retain();
  swift_retain();
  uint64_t v34 = v46;
  static DispatchQoS.unspecified.getter();
  uint64_t v51 = (uint64_t)_swiftEmptyArrayStorage;
  sub_100B22DA4((unint64_t *)&qword_10163B7E0, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
  sub_10000588C((uint64_t *)&unk_10163F350);
  sub_100062734((unint64_t *)&qword_10163B7F0, (uint64_t *)&unk_10163F350);
  Swift::Bool v35 = v48;
  dispatch thunk of SetAlgebra.init<A>(_:)();
  OS_dispatch_queue.async(group:qos:flags:execute:)();
  _Block_release(v33);
  (*(void (**)(char *, uint64_t))(v50 + 8))(v35, v4);
  (*(void (**)(char *, uint64_t))(v47 + 8))(v34, v49);
  return swift_release();
}

void sub_100AB74E4(uint64_t a1, uint64_t a2, void (*a3)(uint64_t), void (*a4)(uint64_t))
{
  uint64_t v114 = a3;
  unsigned int v115 = a4;
  uint64_t v118 = a2;
  uint64_t v5 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v111 = *(void *)(v5 - 8);
  uint64_t v112 = v5;
  __chkstk_darwin(v5);
  uint64_t v109 = (char *)&v97 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v110 = type metadata accessor for DispatchQoS();
  uint64_t v108 = *(void *)(v110 - 8);
  __chkstk_darwin(v110);
  uint64_t v107 = (char *)&v97 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v102 = sub_10000588C(&qword_1016428D8);
  __chkstk_darwin(v102);
  uint64_t v101 = (uint64_t *)((char *)&v97 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v9 = type metadata accessor for BeaconEstimatedLocation();
  uint64_t v106 = *(void *)(v9 - 8);
  uint64_t v10 = *(void *)(v106 + 64);
  uint64_t v11 = __chkstk_darwin(v9);
  uint64_t v113 = (uint64_t *)((char *)&v97 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v12 = __chkstk_darwin(v11);
  uint64_t v14 = (char *)&v97 - v13;
  uint64_t v15 = __chkstk_darwin(v12);
  uint64_t v116 = (uint64_t)&v97 - v16;
  uint64_t v17 = __chkstk_darwin(v15);
  uint64_t v103 = (uint64_t)&v97 - v18;
  __chkstk_darwin(v17);
  uint64_t v100 = (uint64_t)&v97 - v19;
  uint64_t v20 = sub_10000588C((uint64_t *)&unk_10163AC90);
  uint64_t v21 = __chkstk_darwin(v20 - 8);
  uint64_t v23 = (char *)&v97 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v21);
  uint64_t v25 = (char *)&v97 - v24;
  uint64_t v26 = type metadata accessor for Date();
  uint64_t v27 = *(void *)(v26 - 8);
  uint64_t v28 = *(void *)(v27 + 64);
  uint64_t v29 = __chkstk_darwin(v26);
  uint64_t v105 = (char *)&v97 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v30 = __chkstk_darwin(v29);
  uint64_t v117 = (char *)&v97 - v31;
  uint64_t v32 = __chkstk_darwin(v30);
  uint64_t v99 = (char *)&v97 - v33;
  __chkstk_darwin(v32);
  uint64_t v104 = (char *)&v97 - v34;
  if (sub_100FC0630())
  {
    if (qword_101636F50 != -1) {
      swift_once();
    }
    uint64_t v35 = type metadata accessor for Logger();
    sub_100010324(v35, (uint64_t)qword_10170E9E8);
    sub_100B30D0C(a1, (uint64_t)v14, (uint64_t (*)(void))type metadata accessor for BeaconEstimatedLocation);
    uint64_t v36 = a1;
    uint64_t v37 = (uint64_t (*)(void, void, void))v113;
    sub_100B30D0C(v36, (uint64_t)v113, (uint64_t (*)(void))type metadata accessor for BeaconEstimatedLocation);
    os_log_t v38 = Logger.logObject.getter();
    os_log_type_t v39 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v38, v39))
    {
      uint64_t v40 = swift_slowAlloc();
      uint64_t v118 = swift_slowAlloc();
      aBlock[0] = v118;
      *(_DWORD *)uint64_t v40 = 136315651;
      sub_100B30D0C((uint64_t)v14, v116, (uint64_t (*)(void))type metadata accessor for BeaconEstimatedLocation);
      uint64_t v41 = String.init<A>(describing:)();
      uint64_t v119 = sub_1008FA0F0(v41, v42, aBlock);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      sub_100B310AC((uint64_t)v14, (uint64_t (*)(void))type metadata accessor for BeaconEstimatedLocation);
      *(_WORD *)(v40 + 12) = 2160;
      uint64_t v119 = 1752392040;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v40 + 22) = 2081;
      type metadata accessor for UUID();
      sub_100B22DA4((unint64_t *)&qword_101638B10, (void (*)(uint64_t))&type metadata accessor for UUID);
      uint64_t v43 = dispatch thunk of CustomStringConvertible.description.getter();
      uint64_t v119 = sub_1008FA0F0(v43, v44, aBlock);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      sub_100B310AC((uint64_t)v37, (uint64_t (*)(void))type metadata accessor for BeaconEstimatedLocation);
      _os_log_impl((void *)&_mh_execute_header, v38, v39, "Not saving blocked region BeaconEstimatedLocation record %s,\nbeacon %{private,mask.hash}s.", (uint8_t *)v40, 0x20u);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      sub_100B310AC((uint64_t)v14, (uint64_t (*)(void))type metadata accessor for BeaconEstimatedLocation);
      sub_100B310AC((uint64_t)v37, (uint64_t (*)(void))type metadata accessor for BeaconEstimatedLocation);
    }

    return;
  }
  int v45 = *(unsigned __int8 *)(a1 + *(int *)(v9 + 44));
  uint64_t v97 = a1 + *(int *)(v9 + 24);
  sub_100AB8404(v97, v45, (uint64_t)v25);
  uint64_t v113 = *(uint64_t **)(v27 + 48);
  int v46 = ((uint64_t (*)(char *, uint64_t, uint64_t))v113)(v25, 1, v26);
  uint64_t v47 = v27;
  uint64_t v98 = a1;
  if (v46 == 1)
  {
    sub_10001DAB4((uint64_t)v25, (uint64_t *)&unk_10163AC90);
    uint64_t v48 = v26;
LABEL_12:
    uint64_t v52 = v118;
    unint64_t v53 = sub_100B6E218(v97);
    sub_100AB9858((uint64_t)v53, 0x13u, (uint64_t)v23);
    swift_bridgeObjectRelease();
    int v54 = ((uint64_t (*)(char *, uint64_t, uint64_t))v113)(v23, 1, v48);
    uint64_t v55 = v98;
    if (v54 == 1)
    {
      uint64_t v56 = v117;
      static Date.distantPast.getter();
      sub_10001DAB4((uint64_t)v23, (uint64_t *)&unk_10163AC90);
      uint64_t v57 = v27;
    }
    else
    {
      uint64_t v57 = v27;
      uint64_t v56 = v117;
      (*(void (**)(char *, char *, uint64_t))(v27 + 32))(v117, v23, v48);
    }
    uint64_t v113 = *(uint64_t **)(v52 + 64);
    uint64_t v58 = v52;
    uint64_t v59 = v116;
    sub_100B30D0C(v55, v116, (uint64_t (*)(void))type metadata accessor for BeaconEstimatedLocation);
    uint64_t v60 = v105;
    (*(void (**)(char *, char *, uint64_t))(v57 + 16))(v105, v56, v48);
    unint64_t v61 = (*(unsigned __int8 *)(v106 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v106 + 80);
    uint64_t v62 = v48;
    unint64_t v63 = (v10 + *(unsigned __int8 *)(v57 + 80) + v61) & ~(unint64_t)*(unsigned __int8 *)(v57 + 80);
    unint64_t v64 = (v28 + v63 + 7) & 0xFFFFFFFFFFFFFFF8;
    uint64_t v65 = v57;
    uint64_t v66 = swift_allocObject();
    *(void *)(v66 + 16) = v58;
    sub_100B30DB4(v59, v66 + v61, (uint64_t (*)(void))type metadata accessor for BeaconEstimatedLocation);
    (*(void (**)(unint64_t, char *, uint64_t))(v65 + 32))(v66 + v63, v60, v62);
    id v67 = (void (**)(uint64_t))(v66 + v64);
    uint64_t v68 = v115;
    void *v67 = v114;
    v67[1] = v68;
    aBlock[4] = (uint64_t)sub_100B5E89C;
    void aBlock[5] = v66;
    aBlock[0] = (uint64_t)_NSConcreteStackBlock;
    aBlock[1] = 1107296256;
    aBlock[2] = (uint64_t)sub_1004B5480;
    aBlock[3] = (uint64_t)&unk_1015E91E0;
    uint64_t v69 = _Block_copy(aBlock);
    swift_retain();
    swift_retain();
    Swift::String v70 = v107;
    static DispatchQoS.unspecified.getter();
    uint64_t v119 = (uint64_t)_swiftEmptyArrayStorage;
    sub_100B22DA4((unint64_t *)&qword_10163B7E0, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
    sub_10000588C((uint64_t *)&unk_10163F350);
    sub_100062734((unint64_t *)&qword_10163B7F0, (uint64_t *)&unk_10163F350);
    uint64_t v71 = v109;
    uint64_t v72 = v112;
    dispatch thunk of SetAlgebra.init<A>(_:)();
    OS_dispatch_queue.async(group:qos:flags:execute:)();
    _Block_release(v69);
    (*(void (**)(char *, uint64_t))(v111 + 8))(v71, v72);
    (*(void (**)(char *, uint64_t))(v108 + 8))(v70, v110);
    (*(void (**)(char *, uint64_t))(v65 + 8))(v117, v62);
    swift_release();
    return;
  }
  uint64_t v49 = *(void (**)(char *, char *, uint64_t))(v27 + 32);
  uint64_t v50 = v104;
  v49(v104, v25, v26);
  uint64_t v48 = v26;
  if (static Date.> infix(_:_:)())
  {
    uint64_t v51 = v50;
    uint64_t v27 = v47;
    (*(void (**)(char *, uint64_t))(v47 + 8))(v51, v26);
    goto LABEL_12;
  }
  uint64_t v73 = v47;
  uint64_t v117 = (char *)v9;
  if (qword_101636F50 != -1) {
    swift_once();
  }
  uint64_t v74 = type metadata accessor for Logger();
  sub_100010324(v74, (uint64_t)qword_10170E9E8);
  uint64_t v75 = v99;
  (*(void (**)(char *, char *, uint64_t))(v47 + 16))(v99, v50, v26);
  uint64_t v76 = v98;
  uint64_t v77 = v100;
  sub_100B30D0C(v98, v100, (uint64_t (*)(void))type metadata accessor for BeaconEstimatedLocation);
  uint64_t v78 = v103;
  sub_100B30D0C(v76, v103, (uint64_t (*)(void))type metadata accessor for BeaconEstimatedLocation);
  uint64_t v79 = Logger.logObject.getter();
  os_log_type_t v80 = static os_log_type_t.default.getter();
  int v81 = v80;
  if (os_log_type_enabled(v79, v80))
  {
    uint64_t v82 = swift_slowAlloc();
    uint64_t v83 = (uint64_t *)swift_slowAlloc();
    uint64_t v118 = v26;
    uint64_t v113 = v83;
    aBlock[0] = (uint64_t)v83;
    *(_DWORD *)uint64_t v82 = 136446979;
    sub_100B22DA4((unint64_t *)&qword_101638DA0, (void (*)(uint64_t))&type metadata accessor for Date);
    LODWORD(v112) = v81;
    uint64_t v84 = dispatch thunk of CustomStringConvertible.description.getter();
    uint64_t v119 = sub_1008FA0F0(v84, v85, aBlock);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    uint64_t v86 = v75;
    uint64_t v87 = *(void (**)(char *, uint64_t))(v73 + 8);
    v87(v86, v118);
    *(_WORD *)(v82 + 12) = 2160;
    uint64_t v119 = 1752392040;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v82 + 22) = 2081;
    type metadata accessor for UUID();
    sub_100B22DA4((unint64_t *)&qword_101638B10, (void (*)(uint64_t))&type metadata accessor for UUID);
    uint64_t v88 = dispatch thunk of CustomStringConvertible.description.getter();
    uint64_t v119 = sub_1008FA0F0(v88, v89, aBlock);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    sub_100B310AC(v77, (uint64_t (*)(void))type metadata accessor for BeaconEstimatedLocation);
    *(_WORD *)(v82 + 32) = 2080;
    uint64_t v90 = v103;
    sub_100B30D0C(v103, v116, (uint64_t (*)(void))type metadata accessor for BeaconEstimatedLocation);
    uint64_t v91 = String.init<A>(describing:)();
    uint64_t v119 = sub_1008FA0F0(v91, v92, aBlock);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    sub_100B310AC(v90, (uint64_t (*)(void))type metadata accessor for BeaconEstimatedLocation);
    _os_log_impl((void *)&_mh_execute_header, v79, (os_log_type_t)v112, "Not saving outdated (latestLocationDate: %{public}s,\nbeacon %{private,mask.hash}s,\nBeaconEstimatedLocation record %s.", (uint8_t *)v82, 0x2Au);
    swift_arrayDestroy();
    uint64_t v48 = v118;
    swift_slowDealloc();
    uint64_t v50 = v104;
    swift_slowDealloc();
  }
  else
  {
    uint64_t v93 = v75;
    uint64_t v87 = *(void (**)(char *, uint64_t))(v73 + 8);
    v87(v93, v26);
    sub_100B310AC(v77, (uint64_t (*)(void))type metadata accessor for BeaconEstimatedLocation);
    sub_100B310AC(v78, (uint64_t (*)(void))type metadata accessor for BeaconEstimatedLocation);
  }

  sub_10009FD9C();
  uint64_t v94 = swift_allocError();
  *uint64_t v95 = 8;
  uint64_t v96 = (uint64_t)v101;
  uint64_t *v101 = v94;
  swift_storeEnumTagMultiPayload();
  v114(v96);
  sub_10001DAB4(v96, &qword_1016428D8);
  v87(v50, v48);
}

uint64_t sub_100AB8404@<X0>(uint64_t a1@<X0>, int a2@<W1>, uint64_t a3@<X8>)
{
  LODWORD(v170) = a2;
  uint64_t v140 = a3;
  uint64_t v5 = sub_10000588C(&qword_101649E40);
  __chkstk_darwin(v5 - 8);
  BOOL v151 = (char *)&v135 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v150 = type metadata accessor for BeaconStoreFileRecord();
  uint64_t v138 = *(void *)(v150 - 8);
  __chkstk_darwin(v150);
  uint64_t v156 = (char *)&v135 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for URL();
  uint64_t v141 = *(void *)(v8 - 8);
  uint64_t v9 = __chkstk_darwin(v8);
  uint64_t v11 = (char *)&v135 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9);
  unint64_t v166 = (char *)&v135 - v12;
  uint64_t v169 = type metadata accessor for UUID();
  uint64_t v146 = *(void *)(v169 - 8);
  uint64_t v13 = __chkstk_darwin(v169);
  uint64_t v15 = (char *)&v135 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v13);
  uint64_t v17 = (char *)&v135 - v16;
  uint64_t v18 = type metadata accessor for Date();
  uint64_t v19 = *(void *)(v18 - 8);
  uint64_t v20 = __chkstk_darwin(v18);
  uint64_t v163 = (char *)&v135 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v20);
  uint64_t v174 = (uint64_t)&v135 - v22;
  uint64_t v173 = type metadata accessor for BeaconEstimatedLocation();
  uint64_t v159 = *(void *)(v173 - 8);
  uint64_t v23 = __chkstk_darwin(v173);
  uint64_t v165 = (uint64_t)&v135 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v25 = __chkstk_darwin(v23);
  uint64_t v152 = (char *)&v135 - v26;
  __chkstk_darwin(v25);
  uint64_t v142 = (uint64_t)&v135 - v27;
  uint64_t v28 = sub_10000588C((uint64_t *)&unk_10163AC90);
  uint64_t v29 = __chkstk_darwin(v28 - 8);
  v162 = (uint64_t *)((char *)&v135 - ((v30 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v31 = __chkstk_darwin(v29);
  long long v161 = (uint64_t *)((char *)&v135 - v32);
  __chkstk_darwin(v31);
  uint64_t v172 = (uint64_t)&v135 - v33;
  sub_100AF3304(a1);
  if (qword_101636CD8 != -1) {
    swift_once();
  }
  OS_dispatch_queue.sync<A>(execute:)();
  uint64_t v145 = sub_1010AB884((uint64_t)v177);
  swift_bridgeObjectRelease();
  uint64_t v34 = a1;
  uint64_t v164 = *(void *)(v3 + 160);
  uint64_t v35 = sub_100B6E250();
  uint64_t v143 = v36;
  uint64_t v177 = v35;
  swift_bridgeObjectRetain();
  sub_100AA84EC(&v177);
  uint64_t v37 = v177;
  uint64_t v175 = 0;
  uint64_t v38 = v19;
  os_log_type_t v39 = *(void **)(v19 + 56);
  uint64_t v160 = (void (**)(char *, uint64_t))(v19 + 56);
  uint64_t v158 = v39;
  ((void (*)(uint64_t, uint64_t, uint64_t, uint64_t))v39)(v172, 1, 1, v18);
  uint64_t v40 = v37[2];
  uint64_t v157 = v8;
  uint64_t v149 = v11;
  uint64_t v167 = v34;
  uint64_t v168 = v15;
  *(void *)&long long v171 = v40;
  uint64_t v144 = v17;
  uint64_t v139 = v35;
  if (v40)
  {
    int v41 = v170;
    unint64_t v136 = (*(unsigned __int8 *)(v159 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v159 + 80);
    unint64_t v42 = (char *)v37 + v136;
    int v43 = *((unsigned __int8 *)v37 + v136 + *(int *)(v173 + 44));
    uint64_t v170 = (void (**)(uint64_t, char *, uint64_t))(v38 + 16);
    uint64_t v154 = (char *)(v38 + 48);
    uint64_t v147 = (void (**)(char *, void (*)(void, void), uint64_t))(v38 + 32);
    uint64_t v153 = (void (**)(char *, uint64_t))(v38 + 8);
    uint64_t v137 = v37;
    swift_retain();
    uint64_t v44 = 0;
    unint64_t v148 = _swiftEmptyArrayStorage;
    uint64_t v45 = 1;
    int v46 = (uint64_t *)&unk_10163AC90;
    LODWORD(v155) = v41;
LABEL_5:
    uint64_t v47 = v45;
    int v48 = v43;
    uint64_t v49 = v173;
    uint64_t v50 = v159;
    while (1)
    {
      if (v48 == v41)
      {
        uint64_t v51 = *v170;
        (*v170)(v174, &v42[*(void *)(v50 + 72) * v44 + *(int *)(v49 + 40)], v18);
        uint64_t v52 = (void (*)(void, void))v162;
        sub_10001D074(v172, (uint64_t)v162, v46);
        int v53 = (*(uint64_t (**)(void (*)(void, void), uint64_t, uint64_t))v154)(v52, 1, v18);
        int v54 = v163;
        if (v53 == 1)
        {
          static Date.distantPast.getter();
          sub_10001DAB4((uint64_t)v52, v46);
        }
        else
        {
          (*v147)(v163, v52, v18);
        }
        uint64_t v55 = v46;
        sub_100B22DA4((unint64_t *)&qword_1016605E0, (void (*)(uint64_t))&type metadata accessor for Date);
        uint64_t v56 = v174;
        uint64_t v57 = v54;
        if (dispatch thunk of static Comparable.>= infix(_:_:)()) {
          uint64_t v58 = v54;
        }
        else {
          uint64_t v58 = (char *)v56;
        }
        uint64_t v59 = (uint64_t)v161;
        v51((uint64_t)v161, v58, v18);
        uint64_t v60 = *v153;
        (*v153)(v57, v18);
        v60((char *)v56, v18);
        ((void (*)(uint64_t, void, uint64_t, uint64_t))v158)(v59, 0, 1, v18);
        sub_100062604(v59, v172, v55);
        uint64_t v49 = v173;
        uint64_t v50 = v159;
        int v41 = v155;
        int v46 = v55;
      }
      if ((void)v171 == v47) {
        break;
      }
      uint64_t v61 = *(void *)(v50 + 72);
      uint64_t v62 = *(int *)(v49 + 44);
      int v43 = v42[v61 * v44 + v62];
      uint64_t v63 = (uint64_t)&v42[v61 * v47];
      uint64_t v45 = v47 + 1;
      int v48 = *(unsigned __int8 *)(v63 + v62);
      uint64_t v44 = v47++;
      if (v43 == v48)
      {
        sub_100B30D0C(v63, v142, (uint64_t (*)(void))type metadata accessor for BeaconEstimatedLocation);
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          unint64_t v148 = (void *)sub_100A70884(0, v148[2] + 1, 1, (unint64_t)v148);
        }
        unint64_t v65 = v148[2];
        unint64_t v64 = v148[3];
        if (v65 >= v64 >> 1) {
          unint64_t v148 = (void *)sub_100A70884(v64 > 1, v65 + 1, 1, (unint64_t)v148);
        }
        uint64_t v44 = v45 - 1;
        uint64_t v66 = v148;
        v148[2] = v65 + 1;
        sub_100B30DB4(v142, (uint64_t)v66 + v136 + v65 * v61, (uint64_t (*)(void))type metadata accessor for BeaconEstimatedLocation);
        goto LABEL_5;
      }
    }
    swift_release();
    uint64_t v8 = v157;
    uint64_t v67 = v167;
    uint64_t v68 = v148;
    uint64_t v17 = v144;
  }
  else
  {
    uint64_t v68 = _swiftEmptyArrayStorage;
    uint64_t v67 = v34;
  }
  swift_release();
  uint64_t v69 = v68[2];
  uint64_t v70 = v145;
  if (v145 >= v69) {
    uint64_t v70 = v68[2];
  }
  uint64_t v71 = v146;
  uint64_t v174 = v70;
  if (v70 < 0)
  {
    __break(1u);
  }
  else
  {
    uint64_t v72 = qword_101636B10;
    swift_bridgeObjectRetain();
    if (v72 == -1) {
      goto LABEL_27;
    }
  }
  swift_once();
LABEL_27:
  uint64_t v73 = type metadata accessor for Logger();
  uint64_t v74 = sub_100010324(v73, (uint64_t)qword_10170DEB8);
  uint64_t v75 = *(char **)(v71 + 16);
  uint64_t v76 = v17;
  uint64_t v77 = v169;
  uint64_t v170 = (void (**)(uint64_t, char *, uint64_t))(v71 + 16);
  uint64_t v163 = v75;
  ((void (*)(char *, uint64_t, uint64_t))v75)(v76, v67, v169);
  uint64_t v78 = v139;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  *(void *)&long long v171 = v74;
  uint64_t v79 = Logger.logObject.getter();
  os_log_type_t v80 = static os_log_type_t.default.getter();
  BOOL v81 = os_log_type_enabled(v79, v80);
  unint64_t v148 = v68;
  if (v81)
  {
    uint64_t v82 = swift_slowAlloc();
    long long v161 = (void *)swift_slowAlloc();
    uint64_t v177 = v161;
    *(_DWORD *)uint64_t v82 = 134218755;
    uint64_t v176 = v69 - v174;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    *(_WORD *)(v82 + 12) = 2048;
    uint64_t v83 = v78[2];
    swift_bridgeObjectRelease();
    uint64_t v176 = v83;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    *(_WORD *)(v82 + 22) = 2160;
    uint64_t v176 = 1752392040;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v82 + 32) = 2081;
    sub_100B22DA4((unint64_t *)&qword_101638B10, (void (*)(uint64_t))&type metadata accessor for UUID);
    uint64_t v84 = v144;
    uint64_t v85 = dispatch thunk of CustomStringConvertible.description.getter();
    uint64_t v176 = sub_1008FA0F0(v85, v86, (uint64_t *)&v177);
    uint64_t v8 = v157;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    v162 = *(uint64_t **)(v146 + 8);
    ((void (*)(char *, uint64_t))v162)(v84, v77);
    _os_log_impl((void *)&_mh_execute_header, v79, v80, "Decimating %ld of %ld locations for beacon %{private,mask.hash}s.", (uint8_t *)v82, 0x2Au);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease_n();
    v162 = *(uint64_t **)(v71 + 8);
    ((void (*)(char *, uint64_t))v162)(v144, v77);
  }

  uint64_t v87 = (uint64_t)v151;
  uint64_t v88 = v150;
  unint64_t v89 = v168;
  if (v69 > v145)
  {
    unint64_t v90 = (*(unsigned __int8 *)(v159 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v159 + 80);
    long long v161 = (void *)(v146 + 8);
    uint64_t v160 = (void (**)(char *, uint64_t))(v141 + 8);
    uint64_t v91 = *(void *)(v159 + 72);
    uint64_t v92 = swift_bridgeObjectRetain();
    uint64_t v93 = (void (**)(void, uint64_t, uint64_t))(v69 - v174);
    uint64_t v159 = v91;
    uint64_t v94 = v92 + v90 + v91 * v174;
    *(void *)&long long v95 = 141558787;
    long long v155 = v95;
    uint64_t v154 = (char *)&type metadata for Any + 8;
    uint64_t v96 = (uint64_t)v152;
    do
    {
      uint64_t v174 = (uint64_t)v93;
      sub_100B30D0C(v94, v96, (uint64_t (*)(void))type metadata accessor for BeaconEstimatedLocation);
      uint64_t v97 = v165;
      sub_100B30D0C(v96, v165, (uint64_t (*)(void))type metadata accessor for BeaconEstimatedLocation);
      uint64_t v98 = v169;
      ((void (*)(char *, uint64_t, uint64_t))v163)(v89, v167, v169);
      uint64_t v99 = Logger.logObject.getter();
      os_log_type_t v100 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v99, v100))
      {
        uint64_t v101 = swift_slowAlloc();
        uint64_t v158 = (void *)swift_slowAlloc();
        uint64_t v177 = v158;
        *(_DWORD *)uint64_t v101 = v155;
        *(void *)(v101 + 4) = 1752392040;
        *(_WORD *)(v101 + 12) = 2081;
        uint64_t v102 = v173;
        sub_100B22DA4((unint64_t *)&qword_101638B10, (void (*)(uint64_t))&type metadata accessor for UUID);
        uint64_t v103 = dispatch thunk of CustomStringConvertible.description.getter();
        *(void *)(v101 + 14) = sub_1008FA0F0(v103, v104, (uint64_t *)&v177);
        swift_bridgeObjectRelease();
        uint64_t v96 = (uint64_t)v152;
        sub_100B310AC(v97, (uint64_t (*)(void))type metadata accessor for BeaconEstimatedLocation);
        *(_WORD *)(v101 + 22) = 2160;
        *(void *)(v101 + 24) = 1752392040;
        *(_WORD *)(v101 + 32) = 2081;
        uint64_t v105 = dispatch thunk of CustomStringConvertible.description.getter();
        *(void *)(v101 + 34) = sub_1008FA0F0(v105, v106, (uint64_t *)&v177);
        swift_bridgeObjectRelease();
        ((void (*)(char *, uint64_t))v162)(v89, v98);
        _os_log_impl((void *)&_mh_execute_header, v99, v100, "Decimating beacon BeaconEstimatedLocation %{private,mask.hash}s for beacon %{private,mask.hash}s.", (uint8_t *)v101, 0x2Au);
        swift_arrayDestroy();
        uint64_t v107 = v157;
        swift_slowDealloc();
        swift_slowDealloc();
      }
      else
      {
        uint64_t v107 = v8;
        sub_100B310AC(v97, (uint64_t (*)(void))type metadata accessor for BeaconEstimatedLocation);
        ((void (*)(char *, uint64_t))v162)(v89, v98);

        uint64_t v102 = v173;
      }
      uint64_t v108 = *(int *)(v102 + 20);
      if (qword_101637030 != -1) {
        swift_once();
      }
      uint64_t v8 = v107;
      sub_100010324(v107, (uint64_t)qword_10170EB70);
      UUID.uuidString.getter();
      uint64_t v110 = v166;
      URL.appendingPathComponent(_:)();
      swift_bridgeObjectRelease();
      __chkstk_darwin(v111);
      *(&v135 - 4) = v112;
      *(&v135 - 3) = v96 + v108;
      *(&v135 - 2) = (uint64_t)v110;
      uint64_t v113 = v175;
      OS_dispatch_queue.sync<A>(execute:)();
      uint64_t v175 = v113;
      (*v160)(v110, v107);
      sub_100B310AC(v96, (uint64_t (*)(void))type metadata accessor for BeaconEstimatedLocation);
      v94 += v159;
      uint64_t v93 = (void (**)(void, uint64_t, uint64_t))(v174 - 1);
      unint64_t v89 = v168;
    }
    while (v174 != 1);
    swift_bridgeObjectRelease();
    uint64_t v87 = (uint64_t)v151;
    uint64_t v88 = v150;
  }
  uint64_t v114 = *(void *)(v143 + 16);
  if (v114)
  {
    uint64_t v115 = v143 + ((*(unsigned __int8 *)(v138 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v138 + 80));
    uint64_t v116 = (unsigned int (**)(uint64_t, uint64_t, uint64_t))(v141 + 48);
    uint64_t v117 = *(void *)(v138 + 72);
    uint64_t v173 = v141 + 8;
    uint64_t v174 = v141 + 32;
    long long v171 = xmmword_101342130;
    uint64_t v118 = (uint64_t)v156;
    uint64_t v119 = v149;
    uint64_t v175 = v117;
    do
    {
      sub_100B30D0C(v115, v118, (uint64_t (*)(void))type metadata accessor for BeaconStoreFileRecord);
      sub_10001D074(v118 + *(int *)(v88 + 20), v87, &qword_101649E40);
      if ((*v116)(v87, 1, v8) == 1)
      {
        sub_10001DAB4(v87, &qword_101649E40);
      }
      else
      {
        (*(void (**)(char *, uint64_t, uint64_t))v174)(v119, v87, v8);
        id v120 = [self defaultManager];
        URL._bridgeToObjectiveC()(v121);
        uint64_t v123 = v122;
        uint64_t v177 = 0;
        uint64_t v124 = v119;
        unsigned __int8 v125 = [v120 removeItemAtURL:v122 error:&v177];

        if (v125)
        {
          uint64_t v126 = *(void (**)(char *, uint64_t))v173;
          uint64_t v127 = v177;
          v126(v124, v8);
          uint64_t v118 = (uint64_t)v156;
          uint64_t v119 = v124;
        }
        else
        {
          uint64_t v128 = v177;
          uint64_t v129 = (void *)_convertNSErrorToError(_:)();

          swift_willThrow();
          static os_log_type_t.default.getter();
          if (qword_101637260 != -1) {
            swift_once();
          }
          sub_10000588C((uint64_t *)&unk_10163AD00);
          uint64_t v130 = swift_allocObject();
          *(_OWORD *)(v130 + 16) = v171;
          uint64_t v177 = v129;
          swift_errorRetain();
          sub_10000588C(&qword_101638D40);
          uint64_t v131 = String.init<A>(describing:)();
          uint64_t v133 = v132;
          *(void *)(v130 + 56) = &type metadata for String;
          *(void *)(v130 + 64) = sub_10000B4CC();
          *(void *)(v130 + 32) = v131;
          *(void *)(v130 + 40) = v133;
          os_log(_:dso:log:_:_:)();
          swift_bridgeObjectRelease();
          swift_errorRelease();
          uint64_t v119 = v149;
          uint64_t v8 = v157;
          (*(void (**)(char *, uint64_t))v173)(v149, v157);
          uint64_t v87 = (uint64_t)v151;
          uint64_t v88 = v150;
          uint64_t v118 = (uint64_t)v156;
        }
        uint64_t v117 = v175;
      }
      sub_100B310AC(v118, (uint64_t (*)(void))type metadata accessor for BeaconStoreFileRecord);
      v115 += v117;
      --v114;
    }
    while (v114);
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_10001D608(v172, v140, (uint64_t *)&unk_10163AC90);
  return swift_bridgeObjectRelease();
}

uint64_t sub_100AB9858@<X0>(uint64_t a1@<X0>, unsigned __int8 a2@<W1>, uint64_t a3@<X8>)
{
  uint64_t v42 = a3;
  uint64_t v5 = type metadata accessor for BeaconEstimatedLocation();
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v7 = __chkstk_darwin(v5);
  uint64_t v44 = (char *)&v39 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = __chkstk_darwin(v7);
  uint64_t v11 = (char *)&v39 - v10;
  uint64_t v12 = __chkstk_darwin(v9);
  uint64_t v43 = (uint64_t)&v39 - v13;
  __chkstk_darwin(v12);
  uint64_t v15 = (char *)&v39 - v14;
  uint64_t v16 = sub_10000588C((uint64_t *)&unk_101638D50);
  __chkstk_darwin(v16 - 8);
  uint64_t v18 = (char *)&v39 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v19 = _swiftEmptyArrayStorage;
  int v46 = _swiftEmptyArrayStorage;
  uint64_t v20 = *(void *)(a1 + 16);
  swift_bridgeObjectRetain();
  if (v20)
  {
    uint64_t v40 = v18;
    uint64_t v41 = v6;
    uint64_t v45 = v5;
    int v21 = a2;
    unint64_t v22 = (*(unsigned __int8 *)(v6 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80);
    uint64_t v23 = *(void *)(v6 + 72);
    uint64_t v39 = a1;
    uint64_t v24 = a1 + v22;
    do
    {
      sub_100B30D0C(v24, (uint64_t)v15, (uint64_t (*)(void))type metadata accessor for BeaconEstimatedLocation);
      if (v21 == 19 || v15[*(int *)(v45 + 44)] == v21)
      {
        sub_100B30DB4((uint64_t)v15, (uint64_t)v11, (uint64_t (*)(void))type metadata accessor for BeaconEstimatedLocation);
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          sub_1000B7B88(0, v19[2] + 1, 1);
        }
        uint64_t v19 = v46;
        unint64_t v26 = v46[2];
        unint64_t v25 = v46[3];
        if (v26 >= v25 >> 1)
        {
          sub_1000B7B88(v25 > 1, v26 + 1, 1);
          uint64_t v19 = v46;
        }
        v19[2] = v26 + 1;
        sub_100B30DB4((uint64_t)v11, (uint64_t)v19 + v22 + v26 * v23, (uint64_t (*)(void))type metadata accessor for BeaconEstimatedLocation);
      }
      else
      {
        sub_100B310AC((uint64_t)v15, (uint64_t (*)(void))type metadata accessor for BeaconEstimatedLocation);
      }
      v24 += v23;
      --v20;
    }
    while (v20);
    uint64_t v5 = v45;
    uint64_t v19 = v46;
    uint64_t v18 = v40;
    uint64_t v6 = v41;
  }
  swift_bridgeObjectRelease();
  uint64_t v27 = v19[2];
  uint64_t v29 = v43;
  uint64_t v28 = (uint64_t)v44;
  if (!v27)
  {
    uint64_t v32 = 1;
LABEL_17:
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v6 + 56))(v18, v32, 1, v5);
    swift_release();
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v6 + 48))(v18, 1, v5) == 1)
    {
      sub_10001DAB4((uint64_t)v18, (uint64_t *)&unk_101638D50);
      uint64_t v33 = type metadata accessor for Date();
      return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v33 - 8) + 56))(v42, 1, 1, v33);
    }
    else
    {
      uint64_t v34 = &v18[*(int *)(v5 + 40)];
      uint64_t v35 = type metadata accessor for Date();
      uint64_t v36 = *(void *)(v35 - 8);
      uint64_t v37 = v42;
      (*(void (**)(uint64_t, char *, uint64_t))(v36 + 16))(v42, v34, v35);
      sub_100B310AC((uint64_t)v18, (uint64_t (*)(void))type metadata accessor for BeaconEstimatedLocation);
      return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(v36 + 56))(v37, 0, 1, v35);
    }
  }
  uint64_t v30 = (uint64_t)v19 + ((*(unsigned __int8 *)(v6 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80));
  sub_100B30D0C(v30, v43, (uint64_t (*)(void))type metadata accessor for BeaconEstimatedLocation);
  uint64_t result = swift_retain();
  if (v27 == 1)
  {
LABEL_15:
    swift_release();
    sub_100B30DB4(v29, (uint64_t)v18, (uint64_t (*)(void))type metadata accessor for BeaconEstimatedLocation);
    uint64_t v32 = 0;
    goto LABEL_17;
  }
  unint64_t v38 = 1;
  while (v38 < v19[2])
  {
    sub_100B30D0C(v30 + *(void *)(v6 + 72) * v38, v28, (uint64_t (*)(void))type metadata accessor for BeaconEstimatedLocation);
    if (static Date.< infix(_:_:)())
    {
      sub_100B310AC(v29, (uint64_t (*)(void))type metadata accessor for BeaconEstimatedLocation);
      uint64_t result = sub_100B30DB4(v28, v29, (uint64_t (*)(void))type metadata accessor for BeaconEstimatedLocation);
    }
    else
    {
      uint64_t result = sub_100B310AC(v28, (uint64_t (*)(void))type metadata accessor for BeaconEstimatedLocation);
    }
    if (v27 == ++v38) {
      goto LABEL_15;
    }
  }
  __break(1u);
  return result;
}

uint64_t sub_100AB9DBC(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(uint64_t), uint64_t a5)
{
  uint64_t v84 = a5;
  uint64_t v85 = a4;
  uint64_t v78 = a3;
  uint64_t v82 = sub_10000588C(&qword_1016428D8);
  __chkstk_darwin(v82);
  uint64_t v83 = (char *)&v63 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v77 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v76 = *(void *)(v77 - 8);
  __chkstk_darwin(v77);
  uint64_t v75 = (char *)&v63 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v72 = type metadata accessor for DispatchQoS();
  uint64_t v74 = *(void *)(v72 - 8);
  __chkstk_darwin(v72);
  uint64_t v10 = (char *)&v63 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = type metadata accessor for BeaconObservation();
  uint64_t v79 = *(void *)(v11 - 8);
  __chkstk_darwin(v11);
  uint64_t v13 = (char *)&v63 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v81 = type metadata accessor for BeaconEstimatedLocation();
  uint64_t v73 = *(void *)(v81 - 8);
  uint64_t v14 = *(void *)(v73 + 64);
  uint64_t v15 = __chkstk_darwin(v81);
  os_log_type_t v80 = (char *)&v63 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = __chkstk_darwin(v15);
  uint64_t v18 = (char *)&v63 - v17;
  uint64_t v19 = __chkstk_darwin(v16);
  int v21 = (char *)&v63 - v20;
  __chkstk_darwin(v19);
  uint64_t v23 = (char *)&v63 - v22;
  uint64_t v87 = *(void *)(a1 + 160);
  uint64_t v86 = a2;
  uint64_t v88 = a2;
  OS_dispatch_queue.sync<A>(execute:)();
  uint64_t v67 = v23;
  uint64_t v68 = 0;
  uint64_t v70 = v11;
  uint64_t v71 = v13;
  uint64_t v65 = v14;
  os_log_type_t v80 = v18;
  uint64_t v69 = a1;
  uint64_t v66 = v10;
  if (qword_101636F50 != -1) {
    swift_once();
  }
  uint64_t v24 = type metadata accessor for Logger();
  sub_100010324(v24, (uint64_t)qword_10170E9E8);
  uint64_t v25 = v86;
  uint64_t v26 = (uint64_t)v67;
  sub_100B30D0C(v86, (uint64_t)v67, (uint64_t (*)(void))type metadata accessor for BeaconEstimatedLocation);
  sub_100B30D0C(v25, (uint64_t)v21, (uint64_t (*)(void))type metadata accessor for BeaconEstimatedLocation);
  uint64_t v27 = Logger.logObject.getter();
  os_log_type_t v28 = static os_log_type_t.default.getter();
  BOOL v29 = os_log_type_enabled(v27, v28);
  uint64_t v30 = (uint64_t)v80;
  if (v29)
  {
    uint64_t v31 = swift_slowAlloc();
    uint64_t v64 = swift_slowAlloc();
    *(void *)&long long aBlock = v64;
    *(_DWORD *)uint64_t v31 = 136315651;
    sub_100B30D0C(v26, v30, (uint64_t (*)(void))type metadata accessor for BeaconEstimatedLocation);
    uint64_t v32 = String.init<A>(describing:)();
    uint64_t v97 = sub_1008FA0F0(v32, v33, (uint64_t *)&aBlock);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    sub_100B310AC(v26, (uint64_t (*)(void))type metadata accessor for BeaconEstimatedLocation);
    *(_WORD *)(v31 + 12) = 2160;
    uint64_t v97 = 1752392040;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v31 + 22) = 2081;
    type metadata accessor for UUID();
    sub_100B22DA4((unint64_t *)&qword_101638B10, (void (*)(uint64_t))&type metadata accessor for UUID);
    uint64_t v34 = dispatch thunk of CustomStringConvertible.description.getter();
    uint64_t v97 = sub_1008FA0F0(v34, v35, (uint64_t *)&aBlock);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    sub_100B310AC((uint64_t)v21, (uint64_t (*)(void))type metadata accessor for BeaconEstimatedLocation);
    _os_log_impl((void *)&_mh_execute_header, v27, v28, "Saved BeaconEstimatedLocation record %s\nfor beacon %{private,mask.hash}s.", (uint8_t *)v31, 0x20u);
    swift_arrayDestroy();
    swift_slowDealloc();
    uint64_t v25 = v86;
    swift_slowDealloc();
  }
  else
  {
    sub_100B310AC(v26, (uint64_t (*)(void))type metadata accessor for BeaconEstimatedLocation);
    sub_100B310AC((uint64_t)v21, (uint64_t (*)(void))type metadata accessor for BeaconEstimatedLocation);
  }

  uint64_t v36 = (uint64_t)v71;
  uint64_t v37 = v79;
  uint64_t v38 = v70;
  if (qword_101636CB8 != -1) {
    swift_once();
  }
  uint64_t v39 = qword_10170E330;
  uint64_t v40 = v81;
  uint64_t v41 = v25 + *(int *)(v81 + 24);
  uint64_t v42 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v42 - 8) + 16))(v36, v41, v42);
  uint64_t v43 = v25 + *(int *)(v40 + 40);
  uint64_t v44 = v36 + *(int *)(v38 + 20);
  uint64_t v45 = type metadata accessor for Date();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v45 - 8) + 16))(v44, v43, v45);
  *(unsigned char *)(v36 + *(int *)(v38 + 24)) = 0;
  sub_10000588C(&qword_10163A778);
  unint64_t v46 = (*(unsigned __int8 *)(v37 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v37 + 80);
  uint64_t v47 = swift_allocObject();
  *(_OWORD *)(v47 + 16) = xmmword_101342130;
  sub_100B30D0C(v36, v47 + v46, (uint64_t (*)(void))type metadata accessor for BeaconObservation);
  uint64_t v48 = type metadata accessor for Transaction();
  __chkstk_darwin(v48);
  *(&v63 - 4) = v39;
  *(&v63 - 3) = v47;
  *(&v63 - 2) = 0;
  *(&v63 - 1) = 0;
  static Transaction.named<A>(_:with:)();
  swift_bridgeObjectRelease();
  sub_100B310AC(v36, (uint64_t (*)(void))type metadata accessor for BeaconObservation);
  uint64_t v49 = v69;
  sub_100ACCD98(v41, (uint64_t)&v97);
  sub_10001D074((uint64_t)&v97, (uint64_t)&aBlock, (uint64_t *)&unk_10163BBE0);
  if (!v92)
  {
    sub_10001DAB4((uint64_t)&aBlock, (uint64_t *)&unk_10163BBE0);
LABEL_13:
    uint64_t v60 = v85;
    uint64_t v61 = (uint64_t)v83;
    uint64_t v50 = v25;
    goto LABEL_14;
  }
  sub_10001CEB0(&aBlock, (uint64_t)v96);
  if ((static Date.> infix(_:_:)() & 1) == 0)
  {
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)v96);
    goto LABEL_13;
  }
  uint64_t v50 = v25;
  uint64_t v51 = v25;
  uint64_t v52 = (uint64_t)v80;
  sub_100B30D0C(v51, (uint64_t)v80, (uint64_t (*)(void))type metadata accessor for BeaconEstimatedLocation);
  sub_10001D010((uint64_t)v96, (uint64_t)&v95);
  unint64_t v53 = (*(unsigned __int8 *)(v73 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v73 + 80);
  unint64_t v54 = (v65 + v53 + 7) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v55 = swift_allocObject();
  *(void *)(v55 + 16) = v49;
  sub_100B30DB4(v52, v55 + v53, (uint64_t (*)(void))type metadata accessor for BeaconEstimatedLocation);
  sub_10001CEB0(&v95, v55 + v54);
  uint64_t v93 = sub_100B5EBAC;
  uint64_t v94 = v55;
  *(void *)&long long aBlock = _NSConcreteStackBlock;
  *((void *)&aBlock + 1) = 1107296256;
  uint64_t v91 = sub_1004B5480;
  uint64_t v92 = &unk_1015E9230;
  uint64_t v56 = _Block_copy(&aBlock);
  swift_retain();
  uint64_t v57 = v66;
  static DispatchQoS.unspecified.getter();
  unint64_t v89 = _swiftEmptyArrayStorage;
  sub_100B22DA4((unint64_t *)&qword_10163B7E0, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
  sub_10000588C((uint64_t *)&unk_10163F350);
  sub_100062734((unint64_t *)&qword_10163B7F0, (uint64_t *)&unk_10163F350);
  uint64_t v58 = v75;
  uint64_t v59 = v77;
  dispatch thunk of SetAlgebra.init<A>(_:)();
  OS_dispatch_queue.async(group:qos:flags:execute:)();
  _Block_release(v56);
  (*(void (**)(char *, uint64_t))(v76 + 8))(v58, v59);
  (*(void (**)(char *, uint64_t))(v74 + 8))(v57, v72);
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)v96);
  swift_release();
  uint64_t v60 = v85;
  uint64_t v61 = (uint64_t)v83;
LABEL_14:
  sub_100B30D0C(v50, v61, (uint64_t (*)(void))type metadata accessor for BeaconEstimatedLocation);
  swift_storeEnumTagMultiPayload();
  v60(v61);
  sub_10001DAB4(v61, &qword_1016428D8);
  return sub_10001DAB4((uint64_t)&v97, (uint64_t *)&unk_10163BBE0);
}

uint64_t sub_100ABACC8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = sub_10000588C((uint64_t *)&unk_1016569B0);
  uint64_t v6 = __chkstk_darwin(v5 - 8);
  uint64_t v8 = (char *)&v11 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = (uint64_t)&v8[*(int *)(v6 + 56)];
  sub_100B30D0C(a2, (uint64_t)v8, (uint64_t (*)(void))type metadata accessor for BeaconEstimatedLocation);
  sub_10001D010(a3, v9);
  PassthroughSubject.send(_:)();
  return sub_10001DAB4((uint64_t)v8, (uint64_t *)&unk_1016569B0);
}

uint64_t sub_100ABADA4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = sub_10000588C((uint64_t *)&unk_1016565A0);
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v7 = *(void *)(v6 + 64);
  __chkstk_darwin(v5);
  (*(void (**)(char *, uint64_t, uint64_t))(v6 + 16))((char *)&v11 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0), a1, v5);
  unint64_t v8 = (*(unsigned __int8 *)(v6 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80);
  uint64_t v9 = swift_allocObject();
  (*(void (**)(unint64_t, char *, uint64_t))(v6 + 32))(v9 + v8, (char *)&v11 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0), v5);
  sub_100ABAF50(a3, (uint64_t (*)(void, void))sub_100B546A4, v9);
  return swift_release();
}

uint64_t sub_100ABAEEC(uint64_t a1, char a2)
{
  if (a2)
  {
    swift_errorRetain();
    sub_10000588C((uint64_t *)&unk_1016565A0);
    return CheckedContinuation.resume(throwing:)();
  }
  else
  {
    sub_10000588C((uint64_t *)&unk_1016565A0);
    return CheckedContinuation.resume(returning:)();
  }
}

uint64_t sub_100ABAF50(uint64_t a1, uint64_t (*a2)(void, void), uint64_t a3)
{
  uint64_t v30 = a3;
  os_log_type_t v28 = a2;
  uint64_t v26 = *v3;
  uint64_t v29 = type metadata accessor for UUID();
  uint64_t v5 = *(void *)(v29 - 8);
  __chkstk_darwin(v29);
  uint64_t v27 = (char *)&v25 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = sub_10000588C(&qword_101639E88);
  __chkstk_darwin(v7 - 8);
  uint64_t v9 = (char *)&v25 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = type metadata accessor for CloudKitChangeSet(0);
  uint64_t v11 = *(void *)(v10 - 8);
  uint64_t v12 = *(void *)(v11 + 64);
  uint64_t v13 = __chkstk_darwin(v10);
  uint64_t v14 = (char *)&v25 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v13);
  uint64_t v16 = (char *)&v25 - v15;
  sub_10001D074(a1, (uint64_t)v9, &qword_101639E88);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v11 + 48))(v9, 1, v10) == 1)
  {
    sub_10001DAB4((uint64_t)v9, &qword_101639E88);
    return v28(0, 0);
  }
  else
  {
    sub_100B30DB4((uint64_t)v9, (uint64_t)v16, type metadata accessor for CloudKitChangeSet);
    uint64_t v25 = *(uint64_t *)((char *)v3 + OBJC_IVAR____TtC12searchpartyd11BeaconStore_changeSetSequence);
    (*(void (**)(char *, char *, uint64_t))(v5 + 16))(v27, v16, v29);
    sub_100B30D0C((uint64_t)v16, (uint64_t)v14, type metadata accessor for CloudKitChangeSet);
    unint64_t v18 = (*(unsigned __int8 *)(v11 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v11 + 80);
    unint64_t v19 = (v12 + v18 + 7) & 0xFFFFFFFFFFFFFFF8;
    unint64_t v20 = (v19 + 15) & 0xFFFFFFFFFFFFFFF8;
    uint64_t v21 = swift_allocObject();
    sub_100B30DB4((uint64_t)v14, v21 + v18, type metadata accessor for CloudKitChangeSet);
    *(void *)(v21 + v19) = v3;
    uint64_t v22 = (void *)(v21 + v20);
    uint64_t v23 = v30;
    *uint64_t v22 = v28;
    v22[1] = v23;
    *(void *)(v21 + ((v20 + 23) & 0xFFFFFFFFFFFFFFF8)) = v26;
    swift_retain();
    swift_retain();
    uint64_t v24 = v27;
    Sequencer.perform(identifier:_:enqueueCompletion:)();
    swift_release();
    (*(void (**)(char *, uint64_t))(v5 + 8))(v24, v29);
    return sub_100B310AC((uint64_t)v16, type metadata accessor for CloudKitChangeSet);
  }
}

id sub_100ABB2E8(uint64_t a1, int a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8 = sub_10000588C(&qword_10163C650);
  __chkstk_darwin(v8);
  uint64_t v10 = (char *)&v37 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = type metadata accessor for OwnedBeaconGroup(0);
  __chkstk_darwin(v11 - 8);
  uint64_t v13 = (char *)&v37 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_101636F50 != -1) {
    swift_once();
  }
  uint64_t v14 = type metadata accessor for Logger();
  sub_100010324(v14, (uint64_t)qword_10170E9E8);
  uint64_t v15 = Logger.logObject.getter();
  os_log_type_t v16 = static os_log_type_t.default.getter();
  BOOL v17 = os_log_type_enabled(v15, v16);
  uint64_t v39 = v8;
  uint64_t v40 = a4;
  if (v17)
  {
    unint64_t v18 = (uint8_t *)swift_slowAlloc();
    *(_DWORD *)unint64_t v18 = 67109120;
    LODWORD(v42) = a2 & 1;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl((void *)&_mh_execute_header, v15, v16, "Saving record. Disk First? %{BOOL}d", v18, 8u);
    swift_slowDealloc();
  }

  if (qword_101637188 != -1) {
    swift_once();
  }
  unint64_t v19 = (void *)qword_10170EE68;
  id v20 = [self sharedInstance];
  unsigned int v21 = [v20 isInternalBuild];

  if (v21)
  {
    NSString v22 = String._bridgeToObjectiveC()();
    unsigned int v23 = [v19 BOOLForKey:v22];
  }
  else
  {
    unsigned int v23 = 0;
  }
  id result = [self defaultStore];
  if (result)
  {
    uint64_t v25 = result;
    id v26 = [result aa_primaryAppleAccount];

    if (v26 && (v26, ((a2 | v23) & 1) == 0))
    {
      return (id)sub_100AC3F6C(a1, a3, v40);
    }
    else
    {
      uint64_t v27 = sub_100B30D0C(a1, (uint64_t)v13, type metadata accessor for OwnedBeaconGroup);
      __chkstk_darwin(v27);
      *(&v37 - 2) = v28;
      *(&v37 - 1) = (uint64_t)v13;
      OS_dispatch_queue.sync<A>(execute:)();
      uint64_t v38 = (void (*)(char *))a3;
      uint64_t v29 = Logger.logObject.getter();
      os_log_type_t v30 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v29, v30))
      {
        uint64_t v31 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)uint64_t v31 = 0;
        _os_log_impl((void *)&_mh_execute_header, v29, v30, "Saved LocalStorageBacked record. Calling completion.", v31, 2u);
        swift_slowDealloc();
      }

      sub_100B30D0C(a1, (uint64_t)v10, type metadata accessor for OwnedBeaconGroup);
      swift_storeEnumTagMultiPayload();
      v38(v10);
      sub_10001DAB4((uint64_t)v10, &qword_10163C650);
      if (((v26 != 0) & ~v23) != 0)
      {
        uint64_t v36 = type metadata accessor for Transaction();
        __chkstk_darwin(v36);
        *(&v37 - 4) = v41;
        *(&v37 - 3) = a1;
        *(&v37 - 2) = (uint64_t)v13;
        static Transaction.named<A>(_:with:)();
      }
      else
      {
        uint64_t v32 = Logger.logObject.getter();
        os_log_type_t v33 = static os_log_type_t.info.getter();
        if (os_log_type_enabled(v32, v33))
        {
          BOOL v34 = v26 != 0;
          uint64_t v35 = swift_slowAlloc();
          *(_DWORD *)uint64_t v35 = 67109376;
          LODWORD(v42) = v23;
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          *(_WORD *)(v35 + 8) = 1024;
          LODWORD(v42) = v34;
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          _os_log_impl((void *)&_mh_execute_header, v32, v33, "Skipping save to cloud. skipCloudSave: %{BOOL}d, isiCloudSignedIn %{BOOL}d", (uint8_t *)v35, 0xEu);
          swift_slowDealloc();
        }
      }
      return (id)sub_100B310AC((uint64_t)v13, type metadata accessor for OwnedBeaconGroup);
    }
  }
  else
  {
    __break(1u);
  }
  return result;
}

id sub_100ABBA30(uint64_t a1, int a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = v4;
  uint64_t v43 = a1;
  uint64_t v9 = sub_10000588C(&qword_10164B300);
  __chkstk_darwin(v9);
  uint64_t v11 = (char *)&v39 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = type metadata accessor for BeaconNamingRecord();
  __chkstk_darwin(v12 - 8);
  uint64_t v14 = (char *)&v39 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_101636F50 != -1) {
    swift_once();
  }
  uint64_t v15 = type metadata accessor for Logger();
  sub_100010324(v15, (uint64_t)qword_10170E9E8);
  os_log_type_t v16 = Logger.logObject.getter();
  os_log_type_t v17 = static os_log_type_t.default.getter();
  BOOL v18 = os_log_type_enabled(v16, v17);
  uint64_t v41 = v9;
  uint64_t v42 = a4;
  if (v18)
  {
    unint64_t v19 = (uint8_t *)swift_slowAlloc();
    *(_DWORD *)unint64_t v19 = 67109120;
    LODWORD(v44) = a2 & 1;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl((void *)&_mh_execute_header, v16, v17, "Saving record. Disk First? %{BOOL}d", v19, 8u);
    swift_slowDealloc();
  }

  if (qword_101637188 != -1) {
    swift_once();
  }
  id v20 = (void *)qword_10170EE68;
  id v21 = [self sharedInstance];
  unsigned int v22 = [v21 isInternalBuild];

  if (v22)
  {
    NSString v23 = String._bridgeToObjectiveC()();
    unsigned int v24 = [v20 BOOLForKey:v23];
  }
  else
  {
    unsigned int v24 = 0;
  }
  id result = [self defaultStore];
  if (result)
  {
    id v26 = result;
    id v27 = [result aa_primaryAppleAccount];

    if (v27 && (v27, ((a2 | v24) & 1) == 0))
    {
      return (id)sub_100AC43A4(v43, a3, v42);
    }
    else
    {
      uint64_t v40 = (void (*)(char *))a3;
      sub_100B30D0C(v43, (uint64_t)v14, (uint64_t (*)(void))type metadata accessor for BeaconNamingRecord);
      uint64_t v28 = QueueSynchronizer.conditionalSync<A>(_:)();
      __chkstk_darwin(v28);
      *(&v39 - 2) = v29;
      *(&v39 - 1) = (uint64_t)v14;
      OS_dispatch_queue.sync<A>(execute:)();
      os_log_type_t v30 = Logger.logObject.getter();
      os_log_type_t v31 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v30, v31))
      {
        uint64_t v32 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)uint64_t v32 = 0;
        _os_log_impl((void *)&_mh_execute_header, v30, v31, "Saved LocalStorageBacked record. Calling completion.", v32, 2u);
        swift_slowDealloc();
      }

      uint64_t v33 = v43;
      sub_100B30D0C(v43, (uint64_t)v11, (uint64_t (*)(void))type metadata accessor for BeaconNamingRecord);
      swift_storeEnumTagMultiPayload();
      v40(v11);
      sub_10001DAB4((uint64_t)v11, &qword_10164B300);
      if (((v27 != 0) & ~v24) != 0)
      {
        uint64_t v38 = type metadata accessor for Transaction();
        __chkstk_darwin(v38);
        *(&v39 - 4) = v5;
        *(&v39 - 3) = v33;
        *(&v39 - 2) = (uint64_t)v14;
        static Transaction.named<A>(_:with:)();
      }
      else
      {
        BOOL v34 = Logger.logObject.getter();
        os_log_type_t v35 = static os_log_type_t.info.getter();
        if (os_log_type_enabled(v34, v35))
        {
          BOOL v36 = v27 != 0;
          uint64_t v37 = swift_slowAlloc();
          *(_DWORD *)uint64_t v37 = 67109376;
          LODWORD(v44) = v24;
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          *(_WORD *)(v37 + 8) = 1024;
          LODWORD(v44) = v36;
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          _os_log_impl((void *)&_mh_execute_header, v34, v35, "Skipping save to cloud. skipCloudSave: %{BOOL}d, isiCloudSignedIn %{BOOL}d", (uint8_t *)v37, 0xEu);
          swift_slowDealloc();
        }
      }
      return (id)sub_100B310AC((uint64_t)v14, (uint64_t (*)(void))type metadata accessor for BeaconNamingRecord);
    }
  }
  else
  {
    __break(1u);
  }
  return result;
}

id sub_100ABC198(uint64_t a1, int a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = v4;
  uint64_t v43 = a1;
  uint64_t v9 = sub_10000588C((uint64_t *)&unk_101656900);
  __chkstk_darwin(v9);
  uint64_t v11 = (char *)&v39 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = type metadata accessor for OwnedBeaconRecord();
  __chkstk_darwin(v12 - 8);
  uint64_t v14 = (char *)&v39 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_101636F50 != -1) {
    swift_once();
  }
  uint64_t v15 = type metadata accessor for Logger();
  sub_100010324(v15, (uint64_t)qword_10170E9E8);
  os_log_type_t v16 = Logger.logObject.getter();
  os_log_type_t v17 = static os_log_type_t.default.getter();
  BOOL v18 = os_log_type_enabled(v16, v17);
  uint64_t v41 = v9;
  uint64_t v42 = a4;
  if (v18)
  {
    unint64_t v19 = (uint8_t *)swift_slowAlloc();
    *(_DWORD *)unint64_t v19 = 67109120;
    LODWORD(v44) = a2 & 1;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl((void *)&_mh_execute_header, v16, v17, "Saving record. Disk First? %{BOOL}d", v19, 8u);
    swift_slowDealloc();
  }

  if (qword_101637188 != -1) {
    swift_once();
  }
  id v20 = (void *)qword_10170EE68;
  id v21 = [self sharedInstance];
  unsigned int v22 = [v21 isInternalBuild];

  if (v22)
  {
    NSString v23 = String._bridgeToObjectiveC()();
    unsigned int v24 = [v20 BOOLForKey:v23];
  }
  else
  {
    unsigned int v24 = 0;
  }
  id result = [self defaultStore];
  if (result)
  {
    id v26 = result;
    id v27 = [result aa_primaryAppleAccount];

    if (v27 && (v27, ((a2 | v24) & 1) == 0))
    {
      return (id)sub_100AC4188(v43, a3, v42);
    }
    else
    {
      uint64_t v40 = (void (*)(char *))a3;
      sub_100B30D0C(v43, (uint64_t)v14, (uint64_t (*)(void))type metadata accessor for OwnedBeaconRecord);
      uint64_t v28 = QueueSynchronizer.conditionalSync<A>(_:)();
      __chkstk_darwin(v28);
      *(&v39 - 2) = v29;
      *(&v39 - 1) = (uint64_t)v14;
      OS_dispatch_queue.sync<A>(execute:)();
      os_log_type_t v30 = Logger.logObject.getter();
      os_log_type_t v31 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v30, v31))
      {
        uint64_t v32 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)uint64_t v32 = 0;
        _os_log_impl((void *)&_mh_execute_header, v30, v31, "Saved LocalStorageBacked record. Calling completion.", v32, 2u);
        swift_slowDealloc();
      }

      uint64_t v33 = v43;
      sub_100B30D0C(v43, (uint64_t)v11, (uint64_t (*)(void))type metadata accessor for OwnedBeaconRecord);
      swift_storeEnumTagMultiPayload();
      v40(v11);
      sub_10001DAB4((uint64_t)v11, (uint64_t *)&unk_101656900);
      if (((v27 != 0) & ~v24) != 0)
      {
        uint64_t v38 = type metadata accessor for Transaction();
        __chkstk_darwin(v38);
        *(&v39 - 4) = v5;
        *(&v39 - 3) = v33;
        *(&v39 - 2) = (uint64_t)v14;
        static Transaction.named<A>(_:with:)();
      }
      else
      {
        BOOL v34 = Logger.logObject.getter();
        os_log_type_t v35 = static os_log_type_t.info.getter();
        if (os_log_type_enabled(v34, v35))
        {
          BOOL v36 = v27 != 0;
          uint64_t v37 = swift_slowAlloc();
          *(_DWORD *)uint64_t v37 = 67109376;
          LODWORD(v44) = v24;
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          *(_WORD *)(v37 + 8) = 1024;
          LODWORD(v44) = v36;
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          _os_log_impl((void *)&_mh_execute_header, v34, v35, "Skipping save to cloud. skipCloudSave: %{BOOL}d, isiCloudSignedIn %{BOOL}d", (uint8_t *)v37, 0xEu);
          swift_slowDealloc();
        }
      }
      return (id)sub_100B310AC((uint64_t)v14, (uint64_t (*)(void))type metadata accessor for OwnedBeaconRecord);
    }
  }
  else
  {
    __break(1u);
  }
  return result;
}

id sub_100ABC900(uint64_t a1, int a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8 = sub_10000588C(&qword_1016592B0);
  __chkstk_darwin(v8);
  uint64_t v10 = (char *)&v37 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = type metadata accessor for OwnedDeviceKeyRecord();
  __chkstk_darwin(v11 - 8);
  uint64_t v13 = (char *)&v37 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_101636F50 != -1) {
    swift_once();
  }
  uint64_t v14 = type metadata accessor for Logger();
  sub_100010324(v14, (uint64_t)qword_10170E9E8);
  uint64_t v15 = Logger.logObject.getter();
  os_log_type_t v16 = static os_log_type_t.default.getter();
  BOOL v17 = os_log_type_enabled(v15, v16);
  uint64_t v39 = v8;
  uint64_t v40 = a4;
  if (v17)
  {
    BOOL v18 = (uint8_t *)swift_slowAlloc();
    *(_DWORD *)BOOL v18 = 67109120;
    LODWORD(v42) = a2 & 1;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl((void *)&_mh_execute_header, v15, v16, "Saving record. Disk First? %{BOOL}d", v18, 8u);
    swift_slowDealloc();
  }

  if (qword_101637188 != -1) {
    swift_once();
  }
  unint64_t v19 = (void *)qword_10170EE68;
  id v20 = [self sharedInstance];
  unsigned int v21 = [v20 isInternalBuild];

  if (v21)
  {
    NSString v22 = String._bridgeToObjectiveC()();
    unsigned int v23 = [v19 BOOLForKey:v22];
  }
  else
  {
    unsigned int v23 = 0;
  }
  id result = [self defaultStore];
  if (result)
  {
    uint64_t v25 = result;
    id v26 = [result aa_primaryAppleAccount];

    if (v26 && (v26, ((a2 | v23) & 1) == 0))
    {
      return (id)sub_100AC45C0(a1, a3, v40);
    }
    else
    {
      uint64_t v27 = sub_100B30D0C(a1, (uint64_t)v13, (uint64_t (*)(void))type metadata accessor for OwnedDeviceKeyRecord);
      __chkstk_darwin(v27);
      *(&v37 - 2) = v28;
      *(&v37 - 1) = (uint64_t)v13;
      OS_dispatch_queue.sync<A>(execute:)();
      uint64_t v38 = (void (*)(char *))a3;
      uint64_t v29 = Logger.logObject.getter();
      os_log_type_t v30 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v29, v30))
      {
        os_log_type_t v31 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)os_log_type_t v31 = 0;
        _os_log_impl((void *)&_mh_execute_header, v29, v30, "Saved LocalStorageBacked record. Calling completion.", v31, 2u);
        swift_slowDealloc();
      }

      sub_100B30D0C(a1, (uint64_t)v10, (uint64_t (*)(void))type metadata accessor for OwnedDeviceKeyRecord);
      swift_storeEnumTagMultiPayload();
      v38(v10);
      sub_10001DAB4((uint64_t)v10, &qword_1016592B0);
      if (((v26 != 0) & ~v23) != 0)
      {
        uint64_t v36 = type metadata accessor for Transaction();
        __chkstk_darwin(v36);
        *(&v37 - 4) = v41;
        *(&v37 - 3) = a1;
        *(&v37 - 2) = (uint64_t)v13;
        static Transaction.named<A>(_:with:)();
      }
      else
      {
        uint64_t v32 = Logger.logObject.getter();
        os_log_type_t v33 = static os_log_type_t.info.getter();
        if (os_log_type_enabled(v32, v33))
        {
          BOOL v34 = v26 != 0;
          uint64_t v35 = swift_slowAlloc();
          *(_DWORD *)uint64_t v35 = 67109376;
          LODWORD(v42) = v23;
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          *(_WORD *)(v35 + 8) = 1024;
          LODWORD(v42) = v34;
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          _os_log_impl((void *)&_mh_execute_header, v32, v33, "Skipping save to cloud. skipCloudSave: %{BOOL}d, isiCloudSignedIn %{BOOL}d", (uint8_t *)v35, 0xEu);
          swift_slowDealloc();
        }
      }
      return (id)sub_100B310AC((uint64_t)v13, (uint64_t (*)(void))type metadata accessor for OwnedDeviceKeyRecord);
    }
  }
  else
  {
    __break(1u);
  }
  return result;
}

id sub_100ABD048(uint64_t a1, int a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8 = sub_10000588C(&qword_101651918);
  __chkstk_darwin(v8);
  uint64_t v10 = (char *)&v37 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = type metadata accessor for LostModeRecord();
  __chkstk_darwin(v11 - 8);
  uint64_t v13 = (char *)&v37 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_101636F50 != -1) {
    swift_once();
  }
  uint64_t v14 = type metadata accessor for Logger();
  sub_100010324(v14, (uint64_t)qword_10170E9E8);
  uint64_t v15 = Logger.logObject.getter();
  os_log_type_t v16 = static os_log_type_t.default.getter();
  BOOL v17 = os_log_type_enabled(v15, v16);
  uint64_t v39 = v8;
  uint64_t v40 = a4;
  if (v17)
  {
    BOOL v18 = (uint8_t *)swift_slowAlloc();
    *(_DWORD *)BOOL v18 = 67109120;
    LODWORD(v42) = a2 & 1;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl((void *)&_mh_execute_header, v15, v16, "Saving record. Disk First? %{BOOL}d", v18, 8u);
    swift_slowDealloc();
  }

  if (qword_101637188 != -1) {
    swift_once();
  }
  unint64_t v19 = (void *)qword_10170EE68;
  id v20 = [self sharedInstance];
  unsigned int v21 = [v20 isInternalBuild];

  if (v21)
  {
    NSString v22 = String._bridgeToObjectiveC()();
    unsigned int v23 = [v19 BOOLForKey:v22];
  }
  else
  {
    unsigned int v23 = 0;
  }
  id result = [self defaultStore];
  if (result)
  {
    uint64_t v25 = result;
    id v26 = [result aa_primaryAppleAccount];

    if (v26 && (v26, ((a2 | v23) & 1) == 0))
    {
      return (id)sub_100AC47DC(a1, a3, v40);
    }
    else
    {
      uint64_t v27 = sub_100B30D0C(a1, (uint64_t)v13, (uint64_t (*)(void))type metadata accessor for LostModeRecord);
      __chkstk_darwin(v27);
      *(&v37 - 2) = v28;
      *(&v37 - 1) = (uint64_t)v13;
      OS_dispatch_queue.sync<A>(execute:)();
      uint64_t v38 = (void (*)(char *))a3;
      uint64_t v29 = Logger.logObject.getter();
      os_log_type_t v30 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v29, v30))
      {
        os_log_type_t v31 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)os_log_type_t v31 = 0;
        _os_log_impl((void *)&_mh_execute_header, v29, v30, "Saved LocalStorageBacked record. Calling completion.", v31, 2u);
        swift_slowDealloc();
      }

      sub_100B30D0C(a1, (uint64_t)v10, (uint64_t (*)(void))type metadata accessor for LostModeRecord);
      swift_storeEnumTagMultiPayload();
      v38(v10);
      sub_10001DAB4((uint64_t)v10, &qword_101651918);
      if (((v26 != 0) & ~v23) != 0)
      {
        uint64_t v36 = type metadata accessor for Transaction();
        __chkstk_darwin(v36);
        *(&v37 - 4) = v41;
        *(&v37 - 3) = a1;
        *(&v37 - 2) = (uint64_t)v13;
        static Transaction.named<A>(_:with:)();
      }
      else
      {
        uint64_t v32 = Logger.logObject.getter();
        os_log_type_t v33 = static os_log_type_t.info.getter();
        if (os_log_type_enabled(v32, v33))
        {
          BOOL v34 = v26 != 0;
          uint64_t v35 = swift_slowAlloc();
          *(_DWORD *)uint64_t v35 = 67109376;
          LODWORD(v42) = v23;
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          *(_WORD *)(v35 + 8) = 1024;
          LODWORD(v42) = v34;
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          _os_log_impl((void *)&_mh_execute_header, v32, v33, "Skipping save to cloud. skipCloudSave: %{BOOL}d, isiCloudSignedIn %{BOOL}d", (uint8_t *)v35, 0xEu);
          swift_slowDealloc();
        }
      }
      return (id)sub_100B310AC((uint64_t)v13, (uint64_t (*)(void))type metadata accessor for LostModeRecord);
    }
  }
  else
  {
    __break(1u);
  }
  return result;
}

id sub_100ABD790(uint64_t a1, int a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8 = sub_10000588C(&qword_101648068);
  __chkstk_darwin(v8);
  uint64_t v10 = (char *)&v37 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = type metadata accessor for ShareRecord();
  __chkstk_darwin(v11 - 8);
  uint64_t v13 = (char *)&v37 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_101636F50 != -1) {
    swift_once();
  }
  uint64_t v14 = type metadata accessor for Logger();
  sub_100010324(v14, (uint64_t)qword_10170E9E8);
  uint64_t v15 = Logger.logObject.getter();
  os_log_type_t v16 = static os_log_type_t.default.getter();
  BOOL v17 = os_log_type_enabled(v15, v16);
  uint64_t v39 = v8;
  uint64_t v40 = a4;
  if (v17)
  {
    BOOL v18 = (uint8_t *)swift_slowAlloc();
    *(_DWORD *)BOOL v18 = 67109120;
    LODWORD(v42) = a2 & 1;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl((void *)&_mh_execute_header, v15, v16, "Saving record. Disk First? %{BOOL}d", v18, 8u);
    swift_slowDealloc();
  }

  if (qword_101637188 != -1) {
    swift_once();
  }
  unint64_t v19 = (void *)qword_10170EE68;
  id v20 = [self sharedInstance];
  unsigned int v21 = [v20 isInternalBuild];

  if (v21)
  {
    NSString v22 = String._bridgeToObjectiveC()();
    unsigned int v23 = [v19 BOOLForKey:v22];
  }
  else
  {
    unsigned int v23 = 0;
  }
  id result = [self defaultStore];
  if (result)
  {
    uint64_t v25 = result;
    id v26 = [result aa_primaryAppleAccount];

    if (v26 && (v26, ((a2 | v23) & 1) == 0))
    {
      return (id)sub_100AC49F8(a1, a3, v40);
    }
    else
    {
      uint64_t v27 = sub_100B30D0C(a1, (uint64_t)v13, (uint64_t (*)(void))type metadata accessor for ShareRecord);
      __chkstk_darwin(v27);
      *(&v37 - 2) = v28;
      *(&v37 - 1) = (uint64_t)v13;
      OS_dispatch_queue.sync<A>(execute:)();
      uint64_t v38 = (void (*)(char *))a3;
      uint64_t v29 = Logger.logObject.getter();
      os_log_type_t v30 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v29, v30))
      {
        os_log_type_t v31 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)os_log_type_t v31 = 0;
        _os_log_impl((void *)&_mh_execute_header, v29, v30, "Saved LocalStorageBacked record. Calling completion.", v31, 2u);
        swift_slowDealloc();
      }

      sub_100B30D0C(a1, (uint64_t)v10, (uint64_t (*)(void))type metadata accessor for ShareRecord);
      swift_storeEnumTagMultiPayload();
      v38(v10);
      sub_10001DAB4((uint64_t)v10, &qword_101648068);
      if (((v26 != 0) & ~v23) != 0)
      {
        uint64_t v36 = type metadata accessor for Transaction();
        __chkstk_darwin(v36);
        *(&v37 - 4) = v41;
        *(&v37 - 3) = a1;
        *(&v37 - 2) = (uint64_t)v13;
        static Transaction.named<A>(_:with:)();
      }
      else
      {
        uint64_t v32 = Logger.logObject.getter();
        os_log_type_t v33 = static os_log_type_t.info.getter();
        if (os_log_type_enabled(v32, v33))
        {
          BOOL v34 = v26 != 0;
          uint64_t v35 = swift_slowAlloc();
          *(_DWORD *)uint64_t v35 = 67109376;
          LODWORD(v42) = v23;
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          *(_WORD *)(v35 + 8) = 1024;
          LODWORD(v42) = v34;
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          _os_log_impl((void *)&_mh_execute_header, v32, v33, "Skipping save to cloud. skipCloudSave: %{BOOL}d, isiCloudSignedIn %{BOOL}d", (uint8_t *)v35, 0xEu);
          swift_slowDealloc();
        }
      }
      return (id)sub_100B310AC((uint64_t)v13, (uint64_t (*)(void))type metadata accessor for ShareRecord);
    }
  }
  else
  {
    __break(1u);
  }
  return result;
}

id sub_100ABDED8(uint64_t a1, int a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = v4;
  uint64_t v43 = a1;
  uint64_t v9 = sub_10000588C(&qword_10163FFA0);
  __chkstk_darwin(v9);
  uint64_t v11 = (char *)&v39 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = type metadata accessor for SharedBeaconRecord(0);
  __chkstk_darwin(v12 - 8);
  uint64_t v14 = (char *)&v39 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_101636F50 != -1) {
    swift_once();
  }
  uint64_t v15 = type metadata accessor for Logger();
  sub_100010324(v15, (uint64_t)qword_10170E9E8);
  os_log_type_t v16 = Logger.logObject.getter();
  os_log_type_t v17 = static os_log_type_t.default.getter();
  BOOL v18 = os_log_type_enabled(v16, v17);
  uint64_t v41 = v9;
  uint64_t v42 = a4;
  if (v18)
  {
    unint64_t v19 = (uint8_t *)swift_slowAlloc();
    *(_DWORD *)unint64_t v19 = 67109120;
    LODWORD(v44) = a2 & 1;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl((void *)&_mh_execute_header, v16, v17, "Saving record. Disk First? %{BOOL}d", v19, 8u);
    swift_slowDealloc();
  }

  if (qword_101637188 != -1) {
    swift_once();
  }
  id v20 = (void *)qword_10170EE68;
  id v21 = [self sharedInstance];
  unsigned int v22 = [v21 isInternalBuild];

  if (v22)
  {
    NSString v23 = String._bridgeToObjectiveC()();
    unsigned int v24 = [v20 BOOLForKey:v23];
  }
  else
  {
    unsigned int v24 = 0;
  }
  id result = [self defaultStore];
  if (result)
  {
    id v26 = result;
    id v27 = [result aa_primaryAppleAccount];

    if (v27 && (v27, ((a2 | v24) & 1) == 0))
    {
      return (id)sub_100AC4C14(v43, a3, v42);
    }
    else
    {
      uint64_t v40 = (void (*)(char *))a3;
      sub_100B30D0C(v43, (uint64_t)v14, type metadata accessor for SharedBeaconRecord);
      uint64_t v28 = QueueSynchronizer.conditionalSync<A>(_:)();
      __chkstk_darwin(v28);
      *(&v39 - 2) = v29;
      *(&v39 - 1) = (uint64_t)v14;
      OS_dispatch_queue.sync<A>(execute:)();
      os_log_type_t v30 = Logger.logObject.getter();
      os_log_type_t v31 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v30, v31))
      {
        uint64_t v32 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)uint64_t v32 = 0;
        _os_log_impl((void *)&_mh_execute_header, v30, v31, "Saved LocalStorageBacked record. Calling completion.", v32, 2u);
        swift_slowDealloc();
      }

      uint64_t v33 = v43;
      sub_100B30D0C(v43, (uint64_t)v11, type metadata accessor for SharedBeaconRecord);
      swift_storeEnumTagMultiPayload();
      v40(v11);
      sub_10001DAB4((uint64_t)v11, &qword_10163FFA0);
      if (((v27 != 0) & ~v24) != 0)
      {
        uint64_t v38 = type metadata accessor for Transaction();
        __chkstk_darwin(v38);
        *(&v39 - 4) = v5;
        *(&v39 - 3) = v33;
        *(&v39 - 2) = (uint64_t)v14;
        static Transaction.named<A>(_:with:)();
      }
      else
      {
        BOOL v34 = Logger.logObject.getter();
        os_log_type_t v35 = static os_log_type_t.info.getter();
        if (os_log_type_enabled(v34, v35))
        {
          BOOL v36 = v27 != 0;
          uint64_t v37 = swift_slowAlloc();
          *(_DWORD *)uint64_t v37 = 67109376;
          LODWORD(v44) = v24;
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          *(_WORD *)(v37 + 8) = 1024;
          LODWORD(v44) = v36;
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          _os_log_impl((void *)&_mh_execute_header, v34, v35, "Skipping save to cloud. skipCloudSave: %{BOOL}d, isiCloudSignedIn %{BOOL}d", (uint8_t *)v37, 0xEu);
          swift_slowDealloc();
        }
      }
      return (id)sub_100B310AC((uint64_t)v14, type metadata accessor for SharedBeaconRecord);
    }
  }
  else
  {
    __break(1u);
  }
  return result;
}

id sub_100ABE640(uint64_t a1, int a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8 = sub_10000588C(&qword_1016554C0);
  __chkstk_darwin(v8);
  uint64_t v10 = (char *)&v37 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = type metadata accessor for SafeLocation();
  __chkstk_darwin(v11 - 8);
  uint64_t v13 = (char *)&v37 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_101636F50 != -1) {
    swift_once();
  }
  uint64_t v14 = type metadata accessor for Logger();
  sub_100010324(v14, (uint64_t)qword_10170E9E8);
  uint64_t v15 = Logger.logObject.getter();
  os_log_type_t v16 = static os_log_type_t.default.getter();
  BOOL v17 = os_log_type_enabled(v15, v16);
  uint64_t v39 = v8;
  uint64_t v40 = a4;
  if (v17)
  {
    BOOL v18 = (uint8_t *)swift_slowAlloc();
    *(_DWORD *)BOOL v18 = 67109120;
    LODWORD(v42) = a2 & 1;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl((void *)&_mh_execute_header, v15, v16, "Saving record. Disk First? %{BOOL}d", v18, 8u);
    swift_slowDealloc();
  }

  if (qword_101637188 != -1) {
    swift_once();
  }
  unint64_t v19 = (void *)qword_10170EE68;
  id v20 = [self sharedInstance];
  unsigned int v21 = [v20 isInternalBuild];

  if (v21)
  {
    NSString v22 = String._bridgeToObjectiveC()();
    unsigned int v23 = [v19 BOOLForKey:v22];
  }
  else
  {
    unsigned int v23 = 0;
  }
  id result = [self defaultStore];
  if (result)
  {
    uint64_t v25 = result;
    id v26 = [result aa_primaryAppleAccount];

    if (v26 && (v26, ((a2 | v23) & 1) == 0))
    {
      return (id)sub_100AC4E30(a1, a3, v40);
    }
    else
    {
      uint64_t v27 = sub_100B30D0C(a1, (uint64_t)v13, (uint64_t (*)(void))type metadata accessor for SafeLocation);
      __chkstk_darwin(v27);
      *(&v37 - 2) = v28;
      *(&v37 - 1) = (uint64_t)v13;
      OS_dispatch_queue.sync<A>(execute:)();
      uint64_t v38 = (void (*)(char *))a3;
      uint64_t v29 = Logger.logObject.getter();
      os_log_type_t v30 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v29, v30))
      {
        os_log_type_t v31 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)os_log_type_t v31 = 0;
        _os_log_impl((void *)&_mh_execute_header, v29, v30, "Saved LocalStorageBacked record. Calling completion.", v31, 2u);
        swift_slowDealloc();
      }

      sub_100B30D0C(a1, (uint64_t)v10, (uint64_t (*)(void))type metadata accessor for SafeLocation);
      swift_storeEnumTagMultiPayload();
      v38(v10);
      sub_10001DAB4((uint64_t)v10, &qword_1016554C0);
      if (((v26 != 0) & ~v23) != 0)
      {
        uint64_t v36 = type metadata accessor for Transaction();
        __chkstk_darwin(v36);
        *(&v37 - 4) = v41;
        *(&v37 - 3) = a1;
        *(&v37 - 2) = (uint64_t)v13;
        static Transaction.named<A>(_:with:)();
      }
      else
      {
        uint64_t v32 = Logger.logObject.getter();
        os_log_type_t v33 = static os_log_type_t.info.getter();
        if (os_log_type_enabled(v32, v33))
        {
          BOOL v34 = v26 != 0;
          uint64_t v35 = swift_slowAlloc();
          *(_DWORD *)uint64_t v35 = 67109376;
          LODWORD(v42) = v23;
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          *(_WORD *)(v35 + 8) = 1024;
          LODWORD(v42) = v34;
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          _os_log_impl((void *)&_mh_execute_header, v32, v33, "Skipping save to cloud. skipCloudSave: %{BOOL}d, isiCloudSignedIn %{BOOL}d", (uint8_t *)v35, 0xEu);
          swift_slowDealloc();
        }
      }
      return (id)sub_100B310AC((uint64_t)v13, (uint64_t (*)(void))type metadata accessor for SafeLocation);
    }
  }
  else
  {
    __break(1u);
  }
  return result;
}

id sub_100ABED88(uint64_t a1, int a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8 = sub_10000588C((uint64_t *)&unk_1016554E0);
  __chkstk_darwin(v8);
  uint64_t v10 = (char *)&v37 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = type metadata accessor for LeashRecord();
  __chkstk_darwin(v11 - 8);
  uint64_t v13 = (char *)&v37 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_101636F50 != -1) {
    swift_once();
  }
  uint64_t v14 = type metadata accessor for Logger();
  sub_100010324(v14, (uint64_t)qword_10170E9E8);
  uint64_t v15 = Logger.logObject.getter();
  os_log_type_t v16 = static os_log_type_t.default.getter();
  BOOL v17 = os_log_type_enabled(v15, v16);
  uint64_t v39 = v8;
  uint64_t v40 = a4;
  if (v17)
  {
    BOOL v18 = (uint8_t *)swift_slowAlloc();
    *(_DWORD *)BOOL v18 = 67109120;
    LODWORD(v42) = a2 & 1;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl((void *)&_mh_execute_header, v15, v16, "Saving record. Disk First? %{BOOL}d", v18, 8u);
    swift_slowDealloc();
  }

  if (qword_101637188 != -1) {
    swift_once();
  }
  unint64_t v19 = (void *)qword_10170EE68;
  id v20 = [self sharedInstance];
  unsigned int v21 = [v20 isInternalBuild];

  if (v21)
  {
    NSString v22 = String._bridgeToObjectiveC()();
    unsigned int v23 = [v19 BOOLForKey:v22];
  }
  else
  {
    unsigned int v23 = 0;
  }
  id result = [self defaultStore];
  if (result)
  {
    uint64_t v25 = result;
    id v26 = [result aa_primaryAppleAccount];

    if (v26 && (v26, ((a2 | v23) & 1) == 0))
    {
      return (id)sub_100AC504C(a1, a3, v40);
    }
    else
    {
      uint64_t v27 = sub_100B30D0C(a1, (uint64_t)v13, (uint64_t (*)(void))type metadata accessor for LeashRecord);
      __chkstk_darwin(v27);
      *(&v37 - 2) = v28;
      *(&v37 - 1) = (uint64_t)v13;
      OS_dispatch_queue.sync<A>(execute:)();
      uint64_t v38 = (void (*)(char *))a3;
      uint64_t v29 = Logger.logObject.getter();
      os_log_type_t v30 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v29, v30))
      {
        os_log_type_t v31 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)os_log_type_t v31 = 0;
        _os_log_impl((void *)&_mh_execute_header, v29, v30, "Saved LocalStorageBacked record. Calling completion.", v31, 2u);
        swift_slowDealloc();
      }

      sub_100B30D0C(a1, (uint64_t)v10, (uint64_t (*)(void))type metadata accessor for LeashRecord);
      swift_storeEnumTagMultiPayload();
      v38(v10);
      sub_10001DAB4((uint64_t)v10, (uint64_t *)&unk_1016554E0);
      if (((v26 != 0) & ~v23) != 0)
      {
        uint64_t v36 = type metadata accessor for Transaction();
        __chkstk_darwin(v36);
        *(&v37 - 4) = v41;
        *(&v37 - 3) = a1;
        *(&v37 - 2) = (uint64_t)v13;
        static Transaction.named<A>(_:with:)();
      }
      else
      {
        uint64_t v32 = Logger.logObject.getter();
        os_log_type_t v33 = static os_log_type_t.info.getter();
        if (os_log_type_enabled(v32, v33))
        {
          BOOL v34 = v26 != 0;
          uint64_t v35 = swift_slowAlloc();
          *(_DWORD *)uint64_t v35 = 67109376;
          LODWORD(v42) = v23;
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          *(_WORD *)(v35 + 8) = 1024;
          LODWORD(v42) = v34;
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          _os_log_impl((void *)&_mh_execute_header, v32, v33, "Skipping save to cloud. skipCloudSave: %{BOOL}d, isiCloudSignedIn %{BOOL}d", (uint8_t *)v35, 0xEu);
          swift_slowDealloc();
        }
      }
      return (id)sub_100B310AC((uint64_t)v13, (uint64_t (*)(void))type metadata accessor for LeashRecord);
    }
  }
  else
  {
    __break(1u);
  }
  return result;
}

id sub_100ABF4D0(uint64_t a1, int a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8 = sub_10000588C(&qword_10164B328);
  __chkstk_darwin(v8);
  uint64_t v10 = (char *)&v37 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = type metadata accessor for KeyAlignmentRecord();
  __chkstk_darwin(v11 - 8);
  uint64_t v13 = (char *)&v37 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_101636F50 != -1) {
    swift_once();
  }
  uint64_t v14 = type metadata accessor for Logger();
  sub_100010324(v14, (uint64_t)qword_10170E9E8);
  uint64_t v15 = Logger.logObject.getter();
  os_log_type_t v16 = static os_log_type_t.default.getter();
  BOOL v17 = os_log_type_enabled(v15, v16);
  uint64_t v39 = v8;
  uint64_t v40 = a4;
  if (v17)
  {
    BOOL v18 = (uint8_t *)swift_slowAlloc();
    *(_DWORD *)BOOL v18 = 67109120;
    LODWORD(v42) = a2 & 1;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl((void *)&_mh_execute_header, v15, v16, "Saving record. Disk First? %{BOOL}d", v18, 8u);
    swift_slowDealloc();
  }

  if (qword_101637188 != -1) {
    swift_once();
  }
  unint64_t v19 = (void *)qword_10170EE68;
  id v20 = [self sharedInstance];
  unsigned int v21 = [v20 isInternalBuild];

  if (v21)
  {
    NSString v22 = String._bridgeToObjectiveC()();
    unsigned int v23 = [v19 BOOLForKey:v22];
  }
  else
  {
    unsigned int v23 = 0;
  }
  id result = [self defaultStore];
  if (result)
  {
    uint64_t v25 = result;
    id v26 = [result aa_primaryAppleAccount];

    if (v26 && (v26, ((a2 | v23) & 1) == 0))
    {
      return (id)sub_100AC5268(a1, a3, v40);
    }
    else
    {
      uint64_t v27 = sub_100B30D0C(a1, (uint64_t)v13, (uint64_t (*)(void))type metadata accessor for KeyAlignmentRecord);
      __chkstk_darwin(v27);
      *(&v37 - 2) = v28;
      *(&v37 - 1) = (uint64_t)v13;
      OS_dispatch_queue.sync<A>(execute:)();
      uint64_t v38 = (void (*)(char *))a3;
      uint64_t v29 = Logger.logObject.getter();
      os_log_type_t v30 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v29, v30))
      {
        os_log_type_t v31 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)os_log_type_t v31 = 0;
        _os_log_impl((void *)&_mh_execute_header, v29, v30, "Saved LocalStorageBacked record. Calling completion.", v31, 2u);
        swift_slowDealloc();
      }

      sub_100B30D0C(a1, (uint64_t)v10, (uint64_t (*)(void))type metadata accessor for KeyAlignmentRecord);
      swift_storeEnumTagMultiPayload();
      v38(v10);
      sub_10001DAB4((uint64_t)v10, &qword_10164B328);
      if (((v26 != 0) & ~v23) != 0)
      {
        uint64_t v36 = type metadata accessor for Transaction();
        __chkstk_darwin(v36);
        *(&v37 - 4) = v41;
        *(&v37 - 3) = a1;
        *(&v37 - 2) = (uint64_t)v13;
        static Transaction.named<A>(_:with:)();
      }
      else
      {
        uint64_t v32 = Logger.logObject.getter();
        os_log_type_t v33 = static os_log_type_t.info.getter();
        if (os_log_type_enabled(v32, v33))
        {
          BOOL v34 = v26 != 0;
          uint64_t v35 = swift_slowAlloc();
          *(_DWORD *)uint64_t v35 = 67109376;
          LODWORD(v42) = v23;
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          *(_WORD *)(v35 + 8) = 1024;
          LODWORD(v42) = v34;
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          _os_log_impl((void *)&_mh_execute_header, v32, v33, "Skipping save to cloud. skipCloudSave: %{BOOL}d, isiCloudSignedIn %{BOOL}d", (uint8_t *)v35, 0xEu);
          swift_slowDealloc();
        }
      }
      return (id)sub_100B310AC((uint64_t)v13, (uint64_t (*)(void))type metadata accessor for KeyAlignmentRecord);
    }
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_100ABFC18(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v25 = a1;
  uint64_t v7 = type metadata accessor for OwnedBeaconGroup(0);
  uint64_t v24 = *(void *)(v7 - 8);
  uint64_t v8 = *(void *)(v24 + 64);
  uint64_t v9 = __chkstk_darwin(v7 - 8);
  uint64_t v10 = (char *)&v24 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9);
  uint64_t v12 = (char *)&v24 - v11;
  if (qword_101636F50 != -1) {
    swift_once();
  }
  uint64_t v13 = type metadata accessor for Logger();
  sub_100010324(v13, (uint64_t)qword_10170E9E8);
  uint64_t v14 = Logger.logObject.getter();
  os_log_type_t v15 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v14, v15))
  {
    os_log_type_t v16 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)os_log_type_t v16 = 0;
    _os_log_impl((void *)&_mh_execute_header, v14, v15, "Saving record to cloud.", v16, 2u);
    swift_slowDealloc();
  }

  sub_100B30D0C(a3, (uint64_t)v12, type metadata accessor for OwnedBeaconGroup);
  sub_100B30D0C(a4, (uint64_t)v10, type metadata accessor for OwnedBeaconGroup);
  uint64_t v17 = *(unsigned __int8 *)(v24 + 80);
  uint64_t v18 = (v17 + 24) & ~v17;
  unint64_t v19 = (v8 + v18 + 7) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v20 = a3;
  uint64_t v21 = (v17 + v19 + 8) & ~v17;
  uint64_t v22 = swift_allocObject();
  *(void *)(v22 + 16) = v25;
  sub_100B30DB4((uint64_t)v12, v22 + v18, type metadata accessor for OwnedBeaconGroup);
  *(void *)(v22 + v19) = a2;
  sub_100B30DB4((uint64_t)v10, v22 + v21, type metadata accessor for OwnedBeaconGroup);
  swift_retain();
  swift_retain();
  sub_100ABB2E8(v20, 0, (uint64_t)sub_100B5AAA0, v22);
  return swift_release();
}

uint64_t sub_100ABFEB0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v25 = a1;
  uint64_t v7 = type metadata accessor for OwnedBeaconRecord();
  uint64_t v24 = *(void *)(v7 - 8);
  uint64_t v8 = *(void *)(v24 + 64);
  uint64_t v9 = __chkstk_darwin(v7 - 8);
  uint64_t v10 = (char *)&v24 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9);
  uint64_t v12 = (char *)&v24 - v11;
  if (qword_101636F50 != -1) {
    swift_once();
  }
  uint64_t v13 = type metadata accessor for Logger();
  sub_100010324(v13, (uint64_t)qword_10170E9E8);
  uint64_t v14 = Logger.logObject.getter();
  os_log_type_t v15 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v14, v15))
  {
    os_log_type_t v16 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)os_log_type_t v16 = 0;
    _os_log_impl((void *)&_mh_execute_header, v14, v15, "Saving record to cloud.", v16, 2u);
    swift_slowDealloc();
  }

  sub_100B30D0C(a3, (uint64_t)v12, (uint64_t (*)(void))type metadata accessor for OwnedBeaconRecord);
  sub_100B30D0C(a4, (uint64_t)v10, (uint64_t (*)(void))type metadata accessor for OwnedBeaconRecord);
  uint64_t v17 = *(unsigned __int8 *)(v24 + 80);
  uint64_t v18 = (v17 + 24) & ~v17;
  unint64_t v19 = (v8 + v18 + 7) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v20 = a3;
  uint64_t v21 = (v17 + v19 + 8) & ~v17;
  uint64_t v22 = swift_allocObject();
  *(void *)(v22 + 16) = v25;
  sub_100B30DB4((uint64_t)v12, v22 + v18, (uint64_t (*)(void))type metadata accessor for OwnedBeaconRecord);
  *(void *)(v22 + v19) = a2;
  sub_100B30DB4((uint64_t)v10, v22 + v21, (uint64_t (*)(void))type metadata accessor for OwnedBeaconRecord);
  swift_retain();
  swift_retain();
  sub_100ABC198(v20, 0, sub_100B57E8C, v22);
  return swift_release();
}

uint64_t sub_100AC0148(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v25 = a1;
  uint64_t v7 = type metadata accessor for BeaconNamingRecord();
  uint64_t v24 = *(void *)(v7 - 8);
  uint64_t v8 = *(void *)(v24 + 64);
  uint64_t v9 = __chkstk_darwin(v7 - 8);
  uint64_t v10 = (char *)&v24 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9);
  uint64_t v12 = (char *)&v24 - v11;
  if (qword_101636F50 != -1) {
    swift_once();
  }
  uint64_t v13 = type metadata accessor for Logger();
  sub_100010324(v13, (uint64_t)qword_10170E9E8);
  uint64_t v14 = Logger.logObject.getter();
  os_log_type_t v15 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v14, v15))
  {
    os_log_type_t v16 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)os_log_type_t v16 = 0;
    _os_log_impl((void *)&_mh_execute_header, v14, v15, "Saving record to cloud.", v16, 2u);
    swift_slowDealloc();
  }

  sub_100B30D0C(a3, (uint64_t)v12, (uint64_t (*)(void))type metadata accessor for BeaconNamingRecord);
  sub_100B30D0C(a4, (uint64_t)v10, (uint64_t (*)(void))type metadata accessor for BeaconNamingRecord);
  uint64_t v17 = *(unsigned __int8 *)(v24 + 80);
  uint64_t v18 = (v17 + 24) & ~v17;
  unint64_t v19 = (v8 + v18 + 7) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v20 = a3;
  uint64_t v21 = (v17 + v19 + 8) & ~v17;
  uint64_t v22 = swift_allocObject();
  *(void *)(v22 + 16) = v25;
  sub_100B30DB4((uint64_t)v12, v22 + v18, (uint64_t (*)(void))type metadata accessor for BeaconNamingRecord);
  *(void *)(v22 + v19) = a2;
  sub_100B30DB4((uint64_t)v10, v22 + v21, (uint64_t (*)(void))type metadata accessor for BeaconNamingRecord);
  swift_retain();
  swift_retain();
  sub_100ABBA30(v20, 0, sub_100B58E54, v22);
  return swift_release();
}

uint64_t sub_100AC03E0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v25 = a1;
  uint64_t v7 = type metadata accessor for OwnedDeviceKeyRecord();
  uint64_t v24 = *(void *)(v7 - 8);
  uint64_t v8 = *(void *)(v24 + 64);
  uint64_t v9 = __chkstk_darwin(v7 - 8);
  uint64_t v10 = (char *)&v24 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9);
  uint64_t v12 = (char *)&v24 - v11;
  if (qword_101636F50 != -1) {
    swift_once();
  }
  uint64_t v13 = type metadata accessor for Logger();
  sub_100010324(v13, (uint64_t)qword_10170E9E8);
  uint64_t v14 = Logger.logObject.getter();
  os_log_type_t v15 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v14, v15))
  {
    os_log_type_t v16 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)os_log_type_t v16 = 0;
    _os_log_impl((void *)&_mh_execute_header, v14, v15, "Saving record to cloud.", v16, 2u);
    swift_slowDealloc();
  }

  sub_100B30D0C(a3, (uint64_t)v12, (uint64_t (*)(void))type metadata accessor for OwnedDeviceKeyRecord);
  sub_100B30D0C(a4, (uint64_t)v10, (uint64_t (*)(void))type metadata accessor for OwnedDeviceKeyRecord);
  uint64_t v17 = *(unsigned __int8 *)(v24 + 80);
  uint64_t v18 = (v17 + 24) & ~v17;
  unint64_t v19 = (v8 + v18 + 7) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v20 = a3;
  uint64_t v21 = (v17 + v19 + 8) & ~v17;
  uint64_t v22 = swift_allocObject();
  *(void *)(v22 + 16) = v25;
  sub_100B30DB4((uint64_t)v12, v22 + v18, (uint64_t (*)(void))type metadata accessor for OwnedDeviceKeyRecord);
  *(void *)(v22 + v19) = a2;
  sub_100B30DB4((uint64_t)v10, v22 + v21, (uint64_t (*)(void))type metadata accessor for OwnedDeviceKeyRecord);
  swift_retain();
  swift_retain();
  sub_100ABC900(v20, 0, sub_100B5649C, v22);
  return swift_release();
}

uint64_t sub_100AC0678(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v25 = a1;
  uint64_t v7 = type metadata accessor for LostModeRecord();
  uint64_t v24 = *(void *)(v7 - 8);
  uint64_t v8 = *(void *)(v24 + 64);
  uint64_t v9 = __chkstk_darwin(v7 - 8);
  uint64_t v10 = (char *)&v24 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9);
  uint64_t v12 = (char *)&v24 - v11;
  if (qword_101636F50 != -1) {
    swift_once();
  }
  uint64_t v13 = type metadata accessor for Logger();
  sub_100010324(v13, (uint64_t)qword_10170E9E8);
  uint64_t v14 = Logger.logObject.getter();
  os_log_type_t v15 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v14, v15))
  {
    os_log_type_t v16 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)os_log_type_t v16 = 0;
    _os_log_impl((void *)&_mh_execute_header, v14, v15, "Saving record to cloud.", v16, 2u);
    swift_slowDealloc();
  }

  sub_100B30D0C(a3, (uint64_t)v12, (uint64_t (*)(void))type metadata accessor for LostModeRecord);
  sub_100B30D0C(a4, (uint64_t)v10, (uint64_t (*)(void))type metadata accessor for LostModeRecord);
  uint64_t v17 = *(unsigned __int8 *)(v24 + 80);
  uint64_t v18 = (v17 + 24) & ~v17;
  unint64_t v19 = (v8 + v18 + 7) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v20 = a3;
  uint64_t v21 = (v17 + v19 + 8) & ~v17;
  uint64_t v22 = swift_allocObject();
  *(void *)(v22 + 16) = v25;
  sub_100B30DB4((uint64_t)v12, v22 + v18, (uint64_t (*)(void))type metadata accessor for LostModeRecord);
  *(void *)(v22 + v19) = a2;
  sub_100B30DB4((uint64_t)v10, v22 + v21, (uint64_t (*)(void))type metadata accessor for LostModeRecord);
  swift_retain();
  swift_retain();
  sub_100ABD048(v20, 0, (uint64_t)sub_100B634F8, v22);
  return swift_release();
}

uint64_t sub_100AC0910(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v25 = a1;
  uint64_t v7 = type metadata accessor for ShareRecord();
  uint64_t v24 = *(void *)(v7 - 8);
  uint64_t v8 = *(void *)(v24 + 64);
  uint64_t v9 = __chkstk_darwin(v7 - 8);
  uint64_t v10 = (char *)&v24 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9);
  uint64_t v12 = (char *)&v24 - v11;
  if (qword_101636F50 != -1) {
    swift_once();
  }
  uint64_t v13 = type metadata accessor for Logger();
  sub_100010324(v13, (uint64_t)qword_10170E9E8);
  uint64_t v14 = Logger.logObject.getter();
  os_log_type_t v15 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v14, v15))
  {
    os_log_type_t v16 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)os_log_type_t v16 = 0;
    _os_log_impl((void *)&_mh_execute_header, v14, v15, "Saving record to cloud.", v16, 2u);
    swift_slowDealloc();
  }

  sub_100B30D0C(a3, (uint64_t)v12, (uint64_t (*)(void))type metadata accessor for ShareRecord);
  sub_100B30D0C(a4, (uint64_t)v10, (uint64_t (*)(void))type metadata accessor for ShareRecord);
  uint64_t v17 = *(unsigned __int8 *)(v24 + 80);
  uint64_t v18 = (v17 + 24) & ~v17;
  unint64_t v19 = (v8 + v18 + 7) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v20 = a3;
  uint64_t v21 = (v17 + v19 + 8) & ~v17;
  uint64_t v22 = swift_allocObject();
  *(void *)(v22 + 16) = v25;
  sub_100B30DB4((uint64_t)v12, v22 + v18, (uint64_t (*)(void))type metadata accessor for ShareRecord);
  *(void *)(v22 + v19) = a2;
  sub_100B30DB4((uint64_t)v10, v22 + v21, (uint64_t (*)(void))type metadata accessor for ShareRecord);
  swift_retain();
  swift_retain();
  sub_100ABD790(v20, 0, sub_100B59428, v22);
  return swift_release();
}

uint64_t sub_100AC0BA8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v25 = a1;
  uint64_t v7 = type metadata accessor for SharedBeaconRecord(0);
  uint64_t v24 = *(void *)(v7 - 8);
  uint64_t v8 = *(void *)(v24 + 64);
  uint64_t v9 = __chkstk_darwin(v7 - 8);
  uint64_t v10 = (char *)&v24 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9);
  uint64_t v12 = (char *)&v24 - v11;
  if (qword_101636F50 != -1) {
    swift_once();
  }
  uint64_t v13 = type metadata accessor for Logger();
  sub_100010324(v13, (uint64_t)qword_10170E9E8);
  uint64_t v14 = Logger.logObject.getter();
  os_log_type_t v15 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v14, v15))
  {
    os_log_type_t v16 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)os_log_type_t v16 = 0;
    _os_log_impl((void *)&_mh_execute_header, v14, v15, "Saving record to cloud.", v16, 2u);
    swift_slowDealloc();
  }

  sub_100B30D0C(a3, (uint64_t)v12, type metadata accessor for SharedBeaconRecord);
  sub_100B30D0C(a4, (uint64_t)v10, type metadata accessor for SharedBeaconRecord);
  uint64_t v17 = *(unsigned __int8 *)(v24 + 80);
  uint64_t v18 = (v17 + 24) & ~v17;
  unint64_t v19 = (v8 + v18 + 7) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v20 = a3;
  uint64_t v21 = (v17 + v19 + 8) & ~v17;
  uint64_t v22 = swift_allocObject();
  *(void *)(v22 + 16) = v25;
  sub_100B30DB4((uint64_t)v12, v22 + v18, type metadata accessor for SharedBeaconRecord);
  *(void *)(v22 + v19) = a2;
  sub_100B30DB4((uint64_t)v10, v22 + v21, type metadata accessor for SharedBeaconRecord);
  swift_retain();
  swift_retain();
  sub_100ABDED8(v20, 0, (uint64_t)sub_100B61C3C, v22);
  return swift_release();
}

uint64_t sub_100AC0E40(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v25 = a1;
  uint64_t v7 = type metadata accessor for SafeLocation();
  uint64_t v24 = *(void *)(v7 - 8);
  uint64_t v8 = *(void *)(v24 + 64);
  uint64_t v9 = __chkstk_darwin(v7 - 8);
  uint64_t v10 = (char *)&v24 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9);
  uint64_t v12 = (char *)&v24 - v11;
  if (qword_101636F50 != -1) {
    swift_once();
  }
  uint64_t v13 = type metadata accessor for Logger();
  sub_100010324(v13, (uint64_t)qword_10170E9E8);
  uint64_t v14 = Logger.logObject.getter();
  os_log_type_t v15 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v14, v15))
  {
    os_log_type_t v16 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)os_log_type_t v16 = 0;
    _os_log_impl((void *)&_mh_execute_header, v14, v15, "Saving record to cloud.", v16, 2u);
    swift_slowDealloc();
  }

  sub_100B30D0C(a3, (uint64_t)v12, (uint64_t (*)(void))type metadata accessor for SafeLocation);
  sub_100B30D0C(a4, (uint64_t)v10, (uint64_t (*)(void))type metadata accessor for SafeLocation);
  uint64_t v17 = *(unsigned __int8 *)(v24 + 80);
  uint64_t v18 = (v17 + 24) & ~v17;
  unint64_t v19 = (v8 + v18 + 7) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v20 = a3;
  uint64_t v21 = (v17 + v19 + 8) & ~v17;
  uint64_t v22 = swift_allocObject();
  *(void *)(v22 + 16) = v25;
  sub_100B30DB4((uint64_t)v12, v22 + v18, (uint64_t (*)(void))type metadata accessor for SafeLocation);
  *(void *)(v22 + v19) = a2;
  sub_100B30DB4((uint64_t)v10, v22 + v21, (uint64_t (*)(void))type metadata accessor for SafeLocation);
  swift_retain();
  swift_retain();
  sub_100ABE640(v20, 0, (uint64_t)sub_100B5BB8C, v22);
  return swift_release();
}

uint64_t sub_100AC10D8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v25 = a1;
  uint64_t v7 = type metadata accessor for LeashRecord();
  uint64_t v24 = *(void *)(v7 - 8);
  uint64_t v8 = *(void *)(v24 + 64);
  uint64_t v9 = __chkstk_darwin(v7 - 8);
  uint64_t v10 = (char *)&v24 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9);
  uint64_t v12 = (char *)&v24 - v11;
  if (qword_101636F50 != -1) {
    swift_once();
  }
  uint64_t v13 = type metadata accessor for Logger();
  sub_100010324(v13, (uint64_t)qword_10170E9E8);
  uint64_t v14 = Logger.logObject.getter();
  os_log_type_t v15 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v14, v15))
  {
    os_log_type_t v16 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)os_log_type_t v16 = 0;
    _os_log_impl((void *)&_mh_execute_header, v14, v15, "Saving record to cloud.", v16, 2u);
    swift_slowDealloc();
  }

  sub_100B30D0C(a3, (uint64_t)v12, (uint64_t (*)(void))type metadata accessor for LeashRecord);
  sub_100B30D0C(a4, (uint64_t)v10, (uint64_t (*)(void))type metadata accessor for LeashRecord);
  uint64_t v17 = *(unsigned __int8 *)(v24 + 80);
  uint64_t v18 = (v17 + 24) & ~v17;
  unint64_t v19 = (v8 + v18 + 7) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v20 = a3;
  uint64_t v21 = (v17 + v19 + 8) & ~v17;
  uint64_t v22 = swift_allocObject();
  *(void *)(v22 + 16) = v25;
  sub_100B30DB4((uint64_t)v12, v22 + v18, (uint64_t (*)(void))type metadata accessor for LeashRecord);
  *(void *)(v22 + v19) = a2;
  sub_100B30DB4((uint64_t)v10, v22 + v21, (uint64_t (*)(void))type metadata accessor for LeashRecord);
  swift_retain();
  swift_retain();
  sub_100ABED88(v20, 0, (uint64_t)sub_100B5B6F0, v22);
  return swift_release();
}

uint64_t sub_100AC1370(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v25 = a1;
  uint64_t v7 = type metadata accessor for KeyAlignmentRecord();
  uint64_t v24 = *(void *)(v7 - 8);
  uint64_t v8 = *(void *)(v24 + 64);
  uint64_t v9 = __chkstk_darwin(v7 - 8);
  uint64_t v10 = (char *)&v24 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9);
  uint64_t v12 = (char *)&v24 - v11;
  if (qword_101636F50 != -1) {
    swift_once();
  }
  uint64_t v13 = type metadata accessor for Logger();
  sub_100010324(v13, (uint64_t)qword_10170E9E8);
  uint64_t v14 = Logger.logObject.getter();
  os_log_type_t v15 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v14, v15))
  {
    os_log_type_t v16 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)os_log_type_t v16 = 0;
    _os_log_impl((void *)&_mh_execute_header, v14, v15, "Saving record to cloud.", v16, 2u);
    swift_slowDealloc();
  }

  sub_100B30D0C(a3, (uint64_t)v12, (uint64_t (*)(void))type metadata accessor for KeyAlignmentRecord);
  sub_100B30D0C(a4, (uint64_t)v10, (uint64_t (*)(void))type metadata accessor for KeyAlignmentRecord);
  uint64_t v17 = *(unsigned __int8 *)(v24 + 80);
  uint64_t v18 = (v17 + 24) & ~v17;
  unint64_t v19 = (v8 + v18 + 7) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v20 = a3;
  uint64_t v21 = (v17 + v19 + 8) & ~v17;
  uint64_t v22 = swift_allocObject();
  *(void *)(v22 + 16) = v25;
  sub_100B30DB4((uint64_t)v12, v22 + v18, (uint64_t (*)(void))type metadata accessor for KeyAlignmentRecord);
  *(void *)(v22 + v19) = a2;
  sub_100B30DB4((uint64_t)v10, v22 + v21, (uint64_t (*)(void))type metadata accessor for KeyAlignmentRecord);
  swift_retain();
  swift_retain();
  sub_100ABF4D0(v20, 0, sub_100B58A34, v22);
  return swift_release();
}

void sub_100AC1608(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v7 = type metadata accessor for OwnedBeaconRecord();
  __chkstk_darwin(v7 - 8);
  uint64_t v9 = (char *)&v36 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = sub_10000588C((uint64_t *)&unk_101656900);
  __chkstk_darwin(v10);
  uint64_t v12 = (uint64_t *)((char *)&v36 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0));
  Transaction.capture()();
  sub_10001D074(a1, (uint64_t)v12, (uint64_t *)&unk_101656900);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v13 = *v12;
    if (qword_101636F50 != -1) {
      swift_once();
    }
    uint64_t v14 = type metadata accessor for Logger();
    uint64_t v15 = sub_100010324(v14, (uint64_t)qword_10170E9E8);
    swift_errorRetain();
    swift_errorRetain();
    os_log_type_t v16 = Logger.logObject.getter();
    os_log_type_t v17 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v16, v17))
    {
      uint64_t v18 = (uint8_t *)swift_slowAlloc();
      uint64_t v19 = swift_slowAlloc();
      uint64_t v37 = v13;
      uint64_t v38 = v19;
      uint64_t v36 = v15;
      *(_DWORD *)uint64_t v18 = 136446210;
      swift_errorRetain();
      sub_10000588C(&qword_101638D40);
      uint64_t v20 = String.init<A>(describing:)();
      uint64_t v37 = sub_1008FA0F0(v20, v21, &v38);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      swift_errorRelease();
      swift_errorRelease();
      _os_log_impl((void *)&_mh_execute_header, v16, v17, "Saving to cloud failed. Saving the status to disk record. %{public}s", v18, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      swift_errorRelease();
      swift_errorRelease();
    }

    uint64_t v28 = QueueSynchronizer.conditionalSync<A>(_:)();
    __chkstk_darwin(v28);
    *(&v36 - 2) = v29;
    *(&v36 - 1) = a5;
    OS_dispatch_queue.sync<A>(execute:)();
    os_log_type_t v33 = Logger.logObject.getter();
    uint64_t v34 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v33, (os_log_type_t)v34))
    {
      uint64_t v35 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v35 = 0;
      _os_log_impl((void *)&_mh_execute_header, v33, (os_log_type_t)v34, "Saved LocalStorageBacked record", v35, 2u);
      swift_slowDealloc();

      swift_errorRelease();
    }
    else
    {
      swift_errorRelease();
    }
  }
  else
  {
    sub_100B30DB4((uint64_t)v12, (uint64_t)v9, (uint64_t (*)(void))type metadata accessor for OwnedBeaconRecord);
    if (qword_101636F50 != -1) {
      swift_once();
    }
    uint64_t v22 = type metadata accessor for Logger();
    sub_100010324(v22, (uint64_t)qword_10170E9E8);
    unsigned int v23 = Logger.logObject.getter();
    os_log_type_t v24 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v23, v24))
    {
      uint64_t v25 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v25 = 0;
      _os_log_impl((void *)&_mh_execute_header, v23, v24, "Saved to cloud. Updating local record", v25, 2u);
      swift_slowDealloc();
    }

    uint64_t v26 = QueueSynchronizer.conditionalSync<A>(_:)();
    __chkstk_darwin(v26);
    *(&v36 - 2) = v27;
    *(&v36 - 1) = (uint64_t)v9;
    OS_dispatch_queue.sync<A>(execute:)();
    os_log_type_t v30 = Logger.logObject.getter();
    os_log_type_t v31 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v30, v31))
    {
      uint64_t v32 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v32 = 0;
      _os_log_impl((void *)&_mh_execute_header, v30, v31, "Saved LocalStorageBacked record", v32, 2u);
      swift_slowDealloc();
    }

    sub_100B310AC((uint64_t)v9, (uint64_t (*)(void))type metadata accessor for OwnedBeaconRecord);
  }
}

void sub_100AC1E7C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v7 = type metadata accessor for BeaconNamingRecord();
  __chkstk_darwin(v7 - 8);
  uint64_t v9 = (char *)&v36 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = sub_10000588C(&qword_10164B300);
  __chkstk_darwin(v10);
  uint64_t v12 = (uint64_t *)((char *)&v36 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0));
  Transaction.capture()();
  sub_10001D074(a1, (uint64_t)v12, &qword_10164B300);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v13 = *v12;
    if (qword_101636F50 != -1) {
      swift_once();
    }
    uint64_t v14 = type metadata accessor for Logger();
    uint64_t v15 = sub_100010324(v14, (uint64_t)qword_10170E9E8);
    swift_errorRetain();
    swift_errorRetain();
    os_log_type_t v16 = Logger.logObject.getter();
    os_log_type_t v17 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v16, v17))
    {
      uint64_t v18 = (uint8_t *)swift_slowAlloc();
      uint64_t v19 = swift_slowAlloc();
      uint64_t v37 = v13;
      uint64_t v38 = v19;
      uint64_t v36 = v15;
      *(_DWORD *)uint64_t v18 = 136446210;
      swift_errorRetain();
      sub_10000588C(&qword_101638D40);
      uint64_t v20 = String.init<A>(describing:)();
      uint64_t v37 = sub_1008FA0F0(v20, v21, &v38);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      swift_errorRelease();
      swift_errorRelease();
      _os_log_impl((void *)&_mh_execute_header, v16, v17, "Saving to cloud failed. Saving the status to disk record. %{public}s", v18, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      swift_errorRelease();
      swift_errorRelease();
    }

    uint64_t v28 = QueueSynchronizer.conditionalSync<A>(_:)();
    __chkstk_darwin(v28);
    *(&v36 - 2) = v29;
    *(&v36 - 1) = a5;
    OS_dispatch_queue.sync<A>(execute:)();
    os_log_type_t v33 = Logger.logObject.getter();
    uint64_t v34 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v33, (os_log_type_t)v34))
    {
      uint64_t v35 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v35 = 0;
      _os_log_impl((void *)&_mh_execute_header, v33, (os_log_type_t)v34, "Saved LocalStorageBacked record", v35, 2u);
      swift_slowDealloc();

      swift_errorRelease();
    }
    else
    {
      swift_errorRelease();
    }
  }
  else
  {
    sub_100B30DB4((uint64_t)v12, (uint64_t)v9, (uint64_t (*)(void))type metadata accessor for BeaconNamingRecord);
    if (qword_101636F50 != -1) {
      swift_once();
    }
    uint64_t v22 = type metadata accessor for Logger();
    sub_100010324(v22, (uint64_t)qword_10170E9E8);
    unsigned int v23 = Logger.logObject.getter();
    os_log_type_t v24 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v23, v24))
    {
      uint64_t v25 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v25 = 0;
      _os_log_impl((void *)&_mh_execute_header, v23, v24, "Saved to cloud. Updating local record", v25, 2u);
      swift_slowDealloc();
    }

    uint64_t v26 = QueueSynchronizer.conditionalSync<A>(_:)();
    __chkstk_darwin(v26);
    *(&v36 - 2) = v27;
    *(&v36 - 1) = (uint64_t)v9;
    OS_dispatch_queue.sync<A>(execute:)();
    os_log_type_t v30 = Logger.logObject.getter();
    os_log_type_t v31 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v30, v31))
    {
      uint64_t v32 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v32 = 0;
      _os_log_impl((void *)&_mh_execute_header, v30, v31, "Saved LocalStorageBacked record", v32, 2u);
      swift_slowDealloc();
    }

    sub_100B310AC((uint64_t)v9, (uint64_t (*)(void))type metadata accessor for BeaconNamingRecord);
  }
}

void sub_100AC26F0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v7 = type metadata accessor for SharedBeaconRecord(0);
  __chkstk_darwin(v7 - 8);
  uint64_t v9 = (char *)&v36 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = sub_10000588C(&qword_10163FFA0);
  __chkstk_darwin(v10);
  uint64_t v12 = (uint64_t *)((char *)&v36 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0));
  Transaction.capture()();
  sub_10001D074(a1, (uint64_t)v12, &qword_10163FFA0);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v13 = *v12;
    if (qword_101636F50 != -1) {
      swift_once();
    }
    uint64_t v14 = type metadata accessor for Logger();
    uint64_t v15 = sub_100010324(v14, (uint64_t)qword_10170E9E8);
    swift_errorRetain();
    swift_errorRetain();
    os_log_type_t v16 = Logger.logObject.getter();
    os_log_type_t v17 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v16, v17))
    {
      uint64_t v18 = (uint8_t *)swift_slowAlloc();
      uint64_t v19 = swift_slowAlloc();
      uint64_t v37 = v13;
      uint64_t v38 = v19;
      uint64_t v36 = v15;
      *(_DWORD *)uint64_t v18 = 136446210;
      swift_errorRetain();
      sub_10000588C(&qword_101638D40);
      uint64_t v20 = String.init<A>(describing:)();
      uint64_t v37 = sub_1008FA0F0(v20, v21, &v38);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      swift_errorRelease();
      swift_errorRelease();
      _os_log_impl((void *)&_mh_execute_header, v16, v17, "Saving to cloud failed. Saving the status to disk record. %{public}s", v18, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      swift_errorRelease();
      swift_errorRelease();
    }

    uint64_t v28 = QueueSynchronizer.conditionalSync<A>(_:)();
    __chkstk_darwin(v28);
    *(&v36 - 2) = v29;
    *(&v36 - 1) = a5;
    OS_dispatch_queue.sync<A>(execute:)();
    os_log_type_t v33 = Logger.logObject.getter();
    uint64_t v34 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v33, (os_log_type_t)v34))
    {
      uint64_t v35 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v35 = 0;
      _os_log_impl((void *)&_mh_execute_header, v33, (os_log_type_t)v34, "Saved LocalStorageBacked record", v35, 2u);
      swift_slowDealloc();

      swift_errorRelease();
    }
    else
    {
      swift_errorRelease();
    }
  }
  else
  {
    sub_100B30DB4((uint64_t)v12, (uint64_t)v9, type metadata accessor for SharedBeaconRecord);
    if (qword_101636F50 != -1) {
      swift_once();
    }
    uint64_t v22 = type metadata accessor for Logger();
    sub_100010324(v22, (uint64_t)qword_10170E9E8);
    unsigned int v23 = Logger.logObject.getter();
    os_log_type_t v24 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v23, v24))
    {
      uint64_t v25 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v25 = 0;
      _os_log_impl((void *)&_mh_execute_header, v23, v24, "Saved to cloud. Updating local record", v25, 2u);
      swift_slowDealloc();
    }

    uint64_t v26 = QueueSynchronizer.conditionalSync<A>(_:)();
    __chkstk_darwin(v26);
    *(&v36 - 2) = v27;
    *(&v36 - 1) = (uint64_t)v9;
    OS_dispatch_queue.sync<A>(execute:)();
    os_log_type_t v30 = Logger.logObject.getter();
    os_log_type_t v31 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v30, v31))
    {
      uint64_t v32 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v32 = 0;
      _os_log_impl((void *)&_mh_execute_header, v30, v31, "Saved LocalStorageBacked record", v32, 2u);
      swift_slowDealloc();
    }

    sub_100B310AC((uint64_t)v9, type metadata accessor for SharedBeaconRecord);
  }
}

void sub_100AC2F64(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t (*a6)(void), uint64_t *a7, uint64_t (*a8)(void), uint64_t a9, uint64_t (*a10)(void))
{
  uint64_t v14 = a6(0);
  __chkstk_darwin(v14 - 8);
  os_log_type_t v16 = (char *)v43 - v15;
  uint64_t v17 = sub_10000588C(a7);
  __chkstk_darwin(v17);
  uint64_t v19 = (void *)((char *)v43 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0));
  Transaction.capture()();
  sub_10001D074(a1, (uint64_t)v19, a7);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v20 = *v19;
    if (qword_101636F50 != -1) {
      swift_once();
    }
    uint64_t v21 = type metadata accessor for Logger();
    uint64_t v22 = sub_100010324(v21, (uint64_t)qword_10170E9E8);
    swift_errorRetain();
    swift_errorRetain();
    unsigned int v23 = Logger.logObject.getter();
    os_log_type_t v24 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v23, v24))
    {
      uint64_t v25 = (uint8_t *)swift_slowAlloc();
      uint64_t v26 = swift_slowAlloc();
      uint64_t v45 = v20;
      uint64_t v46 = v26;
      v43[1] = v22;
      uint64_t v44 = a5;
      *(_DWORD *)uint64_t v25 = 136446210;
      swift_errorRetain();
      sub_10000588C(&qword_101638D40);
      uint64_t v27 = String.init<A>(describing:)();
      uint64_t v45 = sub_1008FA0F0(v27, v28, &v46);
      a5 = v44;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      swift_errorRelease();
      swift_errorRelease();
      _os_log_impl((void *)&_mh_execute_header, v23, v24, "Saving to cloud failed. Saving the status to disk record. %{public}s", v25, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      swift_errorRelease();
      swift_errorRelease();
    }

    __chkstk_darwin(v35);
    v43[-2] = v36;
    v43[-1] = a5;
    OS_dispatch_queue.sync<A>(execute:)();
    uint64_t v40 = Logger.logObject.getter();
    uint64_t v41 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v40, (os_log_type_t)v41))
    {
      uint64_t v42 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v42 = 0;
      _os_log_impl((void *)&_mh_execute_header, v40, (os_log_type_t)v41, "Saved LocalStorageBacked record", v42, 2u);
      swift_slowDealloc();

      swift_errorRelease();
    }
    else
    {
      swift_errorRelease();
    }
  }
  else
  {
    sub_100B30DB4((uint64_t)v19, (uint64_t)v16, a8);
    if (qword_101636F50 != -1) {
      swift_once();
    }
    uint64_t v29 = type metadata accessor for Logger();
    sub_100010324(v29, (uint64_t)qword_10170E9E8);
    os_log_type_t v30 = Logger.logObject.getter();
    os_log_type_t v31 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v30, v31))
    {
      uint64_t v32 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v32 = 0;
      _os_log_impl((void *)&_mh_execute_header, v30, v31, "Saved to cloud. Updating local record", v32, 2u);
      swift_slowDealloc();
    }

    __chkstk_darwin(v33);
    v43[-2] = v34;
    v43[-1] = v16;
    OS_dispatch_queue.sync<A>(execute:)();
    uint64_t v37 = Logger.logObject.getter();
    os_log_type_t v38 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v37, v38))
    {
      uint64_t v39 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v39 = 0;
      _os_log_impl((void *)&_mh_execute_header, v37, v38, "Saved LocalStorageBacked record", v39, 2u);
      swift_slowDealloc();
    }

    sub_100B310AC((uint64_t)v16, a10);
  }
}

void sub_100AC3758(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v7 = type metadata accessor for KeyAlignmentRecord();
  __chkstk_darwin(v7 - 8);
  uint64_t v9 = (char *)&v36 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = sub_10000588C(&qword_10164B328);
  __chkstk_darwin(v10);
  uint64_t v12 = (uint64_t *)((char *)&v36 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0));
  Transaction.capture()();
  sub_10001D074(a1, (uint64_t)v12, &qword_10164B328);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v13 = *v12;
    if (qword_101636F50 != -1) {
      swift_once();
    }
    uint64_t v14 = type metadata accessor for Logger();
    uint64_t v15 = sub_100010324(v14, (uint64_t)qword_10170E9E8);
    swift_errorRetain();
    swift_errorRetain();
    os_log_type_t v16 = Logger.logObject.getter();
    os_log_type_t v17 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v16, v17))
    {
      uint64_t v18 = (uint8_t *)swift_slowAlloc();
      uint64_t v19 = swift_slowAlloc();
      uint64_t v37 = v13;
      uint64_t v38 = v19;
      uint64_t v36 = v15;
      *(_DWORD *)uint64_t v18 = 136446210;
      swift_errorRetain();
      sub_10000588C(&qword_101638D40);
      uint64_t v20 = String.init<A>(describing:)();
      uint64_t v37 = sub_1008FA0F0(v20, v21, &v38);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      swift_errorRelease();
      swift_errorRelease();
      _os_log_impl((void *)&_mh_execute_header, v16, v17, "Saving to cloud failed. Saving the status to disk record. %{public}s", v18, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      swift_errorRelease();
      swift_errorRelease();
    }

    __chkstk_darwin(v28);
    *(&v36 - 2) = v29;
    *(&v36 - 1) = a5;
    OS_dispatch_queue.sync<A>(execute:)();
    uint64_t v33 = Logger.logObject.getter();
    uint64_t v34 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v33, (os_log_type_t)v34))
    {
      uint64_t v35 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v35 = 0;
      _os_log_impl((void *)&_mh_execute_header, v33, (os_log_type_t)v34, "Saved LocalStorageBacked record", v35, 2u);
      swift_slowDealloc();

      swift_errorRelease();
    }
    else
    {
      swift_errorRelease();
    }
  }
  else
  {
    sub_100B30DB4((uint64_t)v12, (uint64_t)v9, (uint64_t (*)(void))type metadata accessor for KeyAlignmentRecord);
    if (qword_101636F50 != -1) {
      swift_once();
    }
    uint64_t v22 = type metadata accessor for Logger();
    sub_100010324(v22, (uint64_t)qword_10170E9E8);
    unsigned int v23 = Logger.logObject.getter();
    os_log_type_t v24 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v23, v24))
    {
      uint64_t v25 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v25 = 0;
      _os_log_impl((void *)&_mh_execute_header, v23, v24, "Saved to cloud. Updating local record", v25, 2u);
      swift_slowDealloc();
    }

    __chkstk_darwin(v26);
    *(&v36 - 2) = v27;
    *(&v36 - 1) = (uint64_t)v9;
    OS_dispatch_queue.sync<A>(execute:)();
    os_log_type_t v30 = Logger.logObject.getter();
    os_log_type_t v31 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v30, v31))
    {
      uint64_t v32 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v32 = 0;
      _os_log_impl((void *)&_mh_execute_header, v30, v31, "Saved LocalStorageBacked record", v32, 2u);
      swift_slowDealloc();
    }

    sub_100B310AC((uint64_t)v9, (uint64_t (*)(void))type metadata accessor for KeyAlignmentRecord);
  }
}

uint64_t sub_100AC3F6C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = v3;
  uint64_t v8 = type metadata accessor for OwnedBeaconGroup(0);
  uint64_t v9 = *(void *)(v8 - 8);
  uint64_t v10 = *(void *)(v9 + 64);
  __chkstk_darwin(v8 - 8);
  Class v12 = sub_1011545F0(a1);
  sub_100AB24F0();
  sub_101012B38(v12);
  swift_release();
  uint64_t v13 = swift_allocObject();
  *(void *)(v13 + 16) = a2;
  *(void *)(v13 + 24) = a3;
  swift_retain();
  Future.addFailure(block:)();
  swift_release();
  swift_release();
  sub_100B30D0C(a1, (uint64_t)&v18[-((v10 + 15) & 0xFFFFFFFFFFFFFFF0)], type metadata accessor for OwnedBeaconGroup);
  unint64_t v14 = (*(unsigned __int8 *)(v9 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80);
  uint64_t v15 = swift_allocObject();
  *(void *)(v15 + 16) = v4;
  sub_100B30DB4((uint64_t)&v18[-((v10 + 15) & 0xFFFFFFFFFFFFFFF0)], v15 + v14, type metadata accessor for OwnedBeaconGroup);
  os_log_type_t v16 = (void *)(v15 + ((v10 + v14 + 7) & 0xFFFFFFFFFFFFFFF8));
  void *v16 = a2;
  v16[1] = a3;
  swift_retain();
  swift_retain();
  Future.addSuccess(block:)();

  swift_release();
  swift_release();
  return swift_release();
}

uint64_t sub_100AC4188(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = v3;
  uint64_t v8 = type metadata accessor for OwnedBeaconRecord();
  uint64_t v9 = *(void *)(v8 - 8);
  uint64_t v10 = *(void *)(v9 + 64);
  __chkstk_darwin(v8 - 8);
  Class v12 = sub_101154964(a1);
  sub_100AB24F0();
  sub_101012B38(v12);
  swift_release();
  uint64_t v13 = swift_allocObject();
  *(void *)(v13 + 16) = a2;
  *(void *)(v13 + 24) = a3;
  swift_retain();
  Future.addFailure(block:)();
  swift_release();
  swift_release();
  sub_100B30D0C(a1, (uint64_t)&v18[-((v10 + 15) & 0xFFFFFFFFFFFFFFF0)], (uint64_t (*)(void))type metadata accessor for OwnedBeaconRecord);
  unint64_t v14 = (*(unsigned __int8 *)(v9 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80);
  uint64_t v15 = swift_allocObject();
  *(void *)(v15 + 16) = v4;
  sub_100B30DB4((uint64_t)&v18[-((v10 + 15) & 0xFFFFFFFFFFFFFFF0)], v15 + v14, (uint64_t (*)(void))type metadata accessor for OwnedBeaconRecord);
  os_log_type_t v16 = (void *)(v15 + ((v10 + v14 + 7) & 0xFFFFFFFFFFFFFFF8));
  void *v16 = a2;
  v16[1] = a3;
  swift_retain();
  swift_retain();
  Future.addSuccess(block:)();

  swift_release();
  swift_release();
  return swift_release();
}

uint64_t sub_100AC43A4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = v3;
  uint64_t v8 = type metadata accessor for BeaconNamingRecord();
  uint64_t v9 = *(void *)(v8 - 8);
  uint64_t v10 = *(void *)(v9 + 64);
  __chkstk_darwin(v8 - 8);
  Class v12 = sub_101154D08(a1);
  sub_100AB24F0();
  sub_101012B38(v12);
  swift_release();
  uint64_t v13 = swift_allocObject();
  *(void *)(v13 + 16) = a2;
  *(void *)(v13 + 24) = a3;
  swift_retain();
  Future.addFailure(block:)();
  swift_release();
  swift_release();
  sub_100B30D0C(a1, (uint64_t)&v18[-((v10 + 15) & 0xFFFFFFFFFFFFFFF0)], (uint64_t (*)(void))type metadata accessor for BeaconNamingRecord);
  unint64_t v14 = (*(unsigned __int8 *)(v9 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80);
  uint64_t v15 = swift_allocObject();
  *(void *)(v15 + 16) = v4;
  sub_100B30DB4((uint64_t)&v18[-((v10 + 15) & 0xFFFFFFFFFFFFFFF0)], v15 + v14, (uint64_t (*)(void))type metadata accessor for BeaconNamingRecord);
  os_log_type_t v16 = (void *)(v15 + ((v10 + v14 + 7) & 0xFFFFFFFFFFFFFFF8));
  void *v16 = a2;
  v16[1] = a3;
  swift_retain();
  swift_retain();
  Future.addSuccess(block:)();

  swift_release();
  swift_release();
  return swift_release();
}

uint64_t sub_100AC45C0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = v3;
  uint64_t v8 = type metadata accessor for OwnedDeviceKeyRecord();
  uint64_t v9 = *(void *)(v8 - 8);
  uint64_t v10 = *(void *)(v9 + 64);
  __chkstk_darwin(v8 - 8);
  Class v12 = sub_1011561A4(a1);
  sub_100AB24F0();
  sub_101012B38(v12);
  swift_release();
  uint64_t v13 = swift_allocObject();
  *(void *)(v13 + 16) = a2;
  *(void *)(v13 + 24) = a3;
  swift_retain();
  Future.addFailure(block:)();
  swift_release();
  swift_release();
  sub_100B30D0C(a1, (uint64_t)&v18[-((v10 + 15) & 0xFFFFFFFFFFFFFFF0)], (uint64_t (*)(void))type metadata accessor for OwnedDeviceKeyRecord);
  unint64_t v14 = (*(unsigned __int8 *)(v9 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80);
  uint64_t v15 = swift_allocObject();
  *(void *)(v15 + 16) = v4;
  sub_100B30DB4((uint64_t)&v18[-((v10 + 15) & 0xFFFFFFFFFFFFFFF0)], v15 + v14, (uint64_t (*)(void))type metadata accessor for OwnedDeviceKeyRecord);
  os_log_type_t v16 = (void *)(v15 + ((v10 + v14 + 7) & 0xFFFFFFFFFFFFFFF8));
  void *v16 = a2;
  v16[1] = a3;
  swift_retain();
  swift_retain();
  Future.addSuccess(block:)();

  swift_release();
  swift_release();
  return swift_release();
}

uint64_t sub_100AC47DC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = v3;
  uint64_t v8 = type metadata accessor for LostModeRecord();
  uint64_t v9 = *(void *)(v8 - 8);
  uint64_t v10 = *(void *)(v9 + 64);
  __chkstk_darwin(v8 - 8);
  Class v12 = sub_101153B88(a1);
  sub_100AB24F0();
  sub_101012B38(v12);
  swift_release();
  uint64_t v13 = swift_allocObject();
  *(void *)(v13 + 16) = a2;
  *(void *)(v13 + 24) = a3;
  swift_retain();
  Future.addFailure(block:)();
  swift_release();
  swift_release();
  sub_100B30D0C(a1, (uint64_t)&v18[-((v10 + 15) & 0xFFFFFFFFFFFFFFF0)], (uint64_t (*)(void))type metadata accessor for LostModeRecord);
  unint64_t v14 = (*(unsigned __int8 *)(v9 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80);
  uint64_t v15 = swift_allocObject();
  *(void *)(v15 + 16) = v4;
  sub_100B30DB4((uint64_t)&v18[-((v10 + 15) & 0xFFFFFFFFFFFFFFF0)], v15 + v14, (uint64_t (*)(void))type metadata accessor for LostModeRecord);
  os_log_type_t v16 = (void *)(v15 + ((v10 + v14 + 7) & 0xFFFFFFFFFFFFFFF8));
  void *v16 = a2;
  v16[1] = a3;
  swift_retain();
  swift_retain();
  Future.addSuccess(block:)();

  swift_release();
  swift_release();
  return swift_release();
}

uint64_t sub_100AC49F8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = v3;
  uint64_t v8 = type metadata accessor for ShareRecord();
  uint64_t v9 = *(void *)(v8 - 8);
  uint64_t v10 = *(void *)(v9 + 64);
  __chkstk_darwin(v8 - 8);
  Class v12 = sub_1011534A0(a1);
  sub_100AB24F0();
  sub_101012B38(v12);
  swift_release();
  uint64_t v13 = swift_allocObject();
  *(void *)(v13 + 16) = a2;
  *(void *)(v13 + 24) = a3;
  swift_retain();
  Future.addFailure(block:)();
  swift_release();
  swift_release();
  sub_100B30D0C(a1, (uint64_t)&v18[-((v10 + 15) & 0xFFFFFFFFFFFFFFF0)], (uint64_t (*)(void))type metadata accessor for ShareRecord);
  unint64_t v14 = (*(unsigned __int8 *)(v9 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80);
  uint64_t v15 = swift_allocObject();
  *(void *)(v15 + 16) = v4;
  sub_100B30DB4((uint64_t)&v18[-((v10 + 15) & 0xFFFFFFFFFFFFFFF0)], v15 + v14, (uint64_t (*)(void))type metadata accessor for ShareRecord);
  os_log_type_t v16 = (void *)(v15 + ((v10 + v14 + 7) & 0xFFFFFFFFFFFFFFF8));
  void *v16 = a2;
  v16[1] = a3;
  swift_retain();
  swift_retain();
  Future.addSuccess(block:)();

  swift_release();
  swift_release();
  return swift_release();
}

uint64_t sub_100AC4C14(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = v3;
  uint64_t v8 = type metadata accessor for SharedBeaconRecord(0);
  uint64_t v9 = *(void *)(v8 - 8);
  uint64_t v10 = *(void *)(v9 + 64);
  __chkstk_darwin(v8 - 8);
  Class v12 = sub_101155754(a1);
  sub_100AB24F0();
  sub_101012B38(v12);
  swift_release();
  uint64_t v13 = swift_allocObject();
  *(void *)(v13 + 16) = a2;
  *(void *)(v13 + 24) = a3;
  swift_retain();
  Future.addFailure(block:)();
  swift_release();
  swift_release();
  sub_100B30D0C(a1, (uint64_t)&v18[-((v10 + 15) & 0xFFFFFFFFFFFFFFF0)], type metadata accessor for SharedBeaconRecord);
  unint64_t v14 = (*(unsigned __int8 *)(v9 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80);
  uint64_t v15 = swift_allocObject();
  *(void *)(v15 + 16) = v4;
  sub_100B30DB4((uint64_t)&v18[-((v10 + 15) & 0xFFFFFFFFFFFFFFF0)], v15 + v14, type metadata accessor for SharedBeaconRecord);
  os_log_type_t v16 = (void *)(v15 + ((v10 + v14 + 7) & 0xFFFFFFFFFFFFFFF8));
  void *v16 = a2;
  v16[1] = a3;
  swift_retain();
  swift_retain();
  Future.addSuccess(block:)();

  swift_release();
  swift_release();
  return swift_release();
}

uint64_t sub_100AC4E30(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = v3;
  uint64_t v8 = type metadata accessor for SafeLocation();
  uint64_t v9 = *(void *)(v8 - 8);
  uint64_t v10 = *(void *)(v9 + 64);
  __chkstk_darwin(v8 - 8);
  Class v12 = sub_101153814(a1);
  sub_100AB24F0();
  sub_101012B38(v12);
  swift_release();
  uint64_t v13 = swift_allocObject();
  *(void *)(v13 + 16) = a2;
  *(void *)(v13 + 24) = a3;
  swift_retain();
  Future.addFailure(block:)();
  swift_release();
  swift_release();
  sub_100B30D0C(a1, (uint64_t)&v18[-((v10 + 15) & 0xFFFFFFFFFFFFFFF0)], (uint64_t (*)(void))type metadata accessor for SafeLocation);
  unint64_t v14 = (*(unsigned __int8 *)(v9 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80);
  uint64_t v15 = swift_allocObject();
  *(void *)(v15 + 16) = v4;
  sub_100B30DB4((uint64_t)&v18[-((v10 + 15) & 0xFFFFFFFFFFFFFFF0)], v15 + v14, (uint64_t (*)(void))type metadata accessor for SafeLocation);
  os_log_type_t v16 = (void *)(v15 + ((v10 + v14 + 7) & 0xFFFFFFFFFFFFFFF8));
  void *v16 = a2;
  v16[1] = a3;
  swift_retain();
  swift_retain();
  Future.addSuccess(block:)();

  swift_release();
  swift_release();
  return swift_release();
}

uint64_t sub_100AC504C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = v3;
  uint64_t v8 = type metadata accessor for LeashRecord();
  uint64_t v9 = *(void *)(v8 - 8);
  uint64_t v10 = *(void *)(v9 + 64);
  __chkstk_darwin(v8 - 8);
  Class v12 = sub_10115312C(a1);
  sub_100AB24F0();
  sub_101012B38(v12);
  swift_release();
  uint64_t v13 = swift_allocObject();
  *(void *)(v13 + 16) = a2;
  *(void *)(v13 + 24) = a3;
  swift_retain();
  Future.addFailure(block:)();
  swift_release();
  swift_release();
  sub_100B30D0C(a1, (uint64_t)&v18[-((v10 + 15) & 0xFFFFFFFFFFFFFFF0)], (uint64_t (*)(void))type metadata accessor for LeashRecord);
  unint64_t v14 = (*(unsigned __int8 *)(v9 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80);
  uint64_t v15 = swift_allocObject();
  *(void *)(v15 + 16) = v4;
  sub_100B30DB4((uint64_t)&v18[-((v10 + 15) & 0xFFFFFFFFFFFFFFF0)], v15 + v14, (uint64_t (*)(void))type metadata accessor for LeashRecord);
  os_log_type_t v16 = (void *)(v15 + ((v10 + v14 + 7) & 0xFFFFFFFFFFFFFFF8));
  void *v16 = a2;
  v16[1] = a3;
  swift_retain();
  swift_retain();
  Future.addSuccess(block:)();

  swift_release();
  swift_release();
  return swift_release();
}

uint64_t sub_100AC5268(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = v3;
  uint64_t v8 = type metadata accessor for KeyAlignmentRecord();
  uint64_t v9 = *(void *)(v8 - 8);
  uint64_t v10 = *(void *)(v9 + 64);
  __chkstk_darwin(v8 - 8);
  Class v12 = sub_101155078(a1);
  sub_100AB24F0();
  sub_101012B38(v12);
  swift_release();
  uint64_t v13 = swift_allocObject();
  *(void *)(v13 + 16) = a2;
  *(void *)(v13 + 24) = a3;
  swift_retain();
  Future.addFailure(block:)();
  swift_release();
  swift_release();
  sub_100B30D0C(a1, (uint64_t)&v18[-((v10 + 15) & 0xFFFFFFFFFFFFFFF0)], (uint64_t (*)(void))type metadata accessor for KeyAlignmentRecord);
  unint64_t v14 = (*(unsigned __int8 *)(v9 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80);
  uint64_t v15 = swift_allocObject();
  *(void *)(v15 + 16) = v4;
  sub_100B30DB4((uint64_t)&v18[-((v10 + 15) & 0xFFFFFFFFFFFFFFF0)], v15 + v14, (uint64_t (*)(void))type metadata accessor for KeyAlignmentRecord);
  os_log_type_t v16 = (void *)(v15 + ((v10 + v14 + 7) & 0xFFFFFFFFFFFFFFF8));
  void *v16 = a2;
  v16[1] = a3;
  swift_retain();
  swift_retain();
  Future.addSuccess(block:)();

  swift_release();
  swift_release();
  return swift_release();
}

uint64_t sub_100AC5484(uint64_t a1, void (*a2)(void *), uint64_t a3, uint64_t *a4, uint64_t a5, uint64_t a6)
{
  v16[0] = a6;
  v16[1] = a3;
  os_log_type_t v17 = a2;
  uint64_t v8 = sub_10000588C(a4);
  __chkstk_darwin(v8);
  uint64_t v10 = (void *)((char *)v16 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0));
  static os_log_type_t.error.getter();
  if (qword_101637260 != -1) {
    swift_once();
  }
  sub_10000588C((uint64_t *)&unk_10163AD00);
  uint64_t v11 = swift_allocObject();
  *(_OWORD *)(v11 + 16) = xmmword_101342130;
  uint64_t v18 = a1;
  swift_errorRetain();
  sub_10000588C(&qword_101638D40);
  uint64_t v12 = String.init<A>(describing:)();
  uint64_t v14 = v13;
  *(void *)(v11 + 56) = &type metadata for String;
  *(void *)(v11 + 64) = sub_10000B4CC();
  *(void *)(v11 + 32) = v12;
  *(void *)(v11 + 40) = v14;
  os_log(_:dso:log:_:_:)();
  swift_bridgeObjectRelease();
  *uint64_t v10 = a1;
  swift_storeEnumTagMultiPayload();
  swift_errorRetain();
  v17(v10);
  return sub_10001DAB4((uint64_t)v10, a4);
}

uint64_t sub_100AC5638(void *a1, uint64_t a2, uint64_t a3, void (*a4)(char *), uint64_t a5)
{
  uint64_t v20 = a5;
  unint64_t v21 = a4;
  uint64_t v16 = a3;
  uint64_t v17 = a2;
  uint64_t v19 = sub_10000588C(&qword_10163C650);
  __chkstk_darwin(v19);
  uint64_t v7 = (char *)&v16 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for OwnedBeaconGroup(0);
  __chkstk_darwin(v8 - 8);
  uint64_t v10 = (char *)&v16 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  static os_log_type_t.default.getter();
  if (qword_101637260 != -1) {
    swift_once();
  }
  sub_10000588C((uint64_t *)&unk_10163AD00);
  uint64_t v11 = swift_allocObject();
  long long v18 = xmmword_101342130;
  *(_OWORD *)(v11 + 16) = xmmword_101342130;
  *(void *)(v11 + 56) = sub_10001D4B0(0, (unint64_t *)&qword_10163AE60);
  *(void *)(v11 + 64) = sub_10033149C((unint64_t *)&qword_10163AD10, (unint64_t *)&qword_10163AE60);
  *(void *)(v11 + 32) = a1;
  id v12 = a1;
  os_log(_:dso:log:_:_:)();
  swift_bridgeObjectRelease();
  sub_1004CFDAC(v12, (uint64_t)v10);
  uint64_t v13 = v17;
  __chkstk_darwin(v14);
  *(&v16 - 4) = v16;
  *(&v16 - 3) = v13;
  *(&v16 - 2) = (uint64_t)v10;
  OS_dispatch_queue.sync<A>(execute:)();
  sub_100B30D0C((uint64_t)v10, (uint64_t)v7, type metadata accessor for OwnedBeaconGroup);
  swift_storeEnumTagMultiPayload();
  v21(v7);
  sub_10001DAB4((uint64_t)v7, &qword_10163C650);
  sub_100A9EE98();
  return sub_100B310AC((uint64_t)v10, type metadata accessor for OwnedBeaconGroup);
}

uint64_t sub_100AC5A08(void *a1, uint64_t a2, uint64_t a3, void (*a4)(char *), uint64_t a5)
{
  uint64_t v20 = a5;
  unint64_t v21 = a4;
  uint64_t v16 = a3;
  uint64_t v17 = a2;
  uint64_t v19 = sub_10000588C((uint64_t *)&unk_101656900);
  __chkstk_darwin(v19);
  uint64_t v7 = (char *)&v16 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for OwnedBeaconRecord();
  __chkstk_darwin(v8 - 8);
  uint64_t v10 = (uint64_t *)((char *)&v16 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0));
  static os_log_type_t.default.getter();
  if (qword_101637260 != -1) {
    swift_once();
  }
  sub_10000588C((uint64_t *)&unk_10163AD00);
  uint64_t v11 = swift_allocObject();
  long long v18 = xmmword_101342130;
  *(_OWORD *)(v11 + 16) = xmmword_101342130;
  *(void *)(v11 + 56) = sub_10001D4B0(0, (unint64_t *)&qword_10163AE60);
  *(void *)(v11 + 64) = sub_10033149C((unint64_t *)&qword_10163AD10, (unint64_t *)&qword_10163AE60);
  *(void *)(v11 + 32) = a1;
  id v12 = a1;
  os_log(_:dso:log:_:_:)();
  swift_bridgeObjectRelease();
  sub_100D19D5C(v12, v10);
  uint64_t v13 = v17;
  __chkstk_darwin(v14);
  *(&v16 - 4) = v16;
  *(&v16 - 3) = v13;
  *(&v16 - 2) = (uint64_t)v10;
  OS_dispatch_queue.sync<A>(execute:)();
  sub_100B30D0C((uint64_t)v10, (uint64_t)v7, (uint64_t (*)(void))type metadata accessor for OwnedBeaconRecord);
  swift_storeEnumTagMultiPayload();
  v21(v7);
  sub_10001DAB4((uint64_t)v7, (uint64_t *)&unk_101656900);
  sub_100A9EE98();
  return sub_100B310AC((uint64_t)v10, (uint64_t (*)(void))type metadata accessor for OwnedBeaconRecord);
}

uint64_t sub_100AC5DD8(void *a1, uint64_t a2, uint64_t a3, void (*a4)(char *), uint64_t a5)
{
  uint64_t v20 = a5;
  unint64_t v21 = a4;
  uint64_t v16 = a3;
  uint64_t v17 = a2;
  uint64_t v19 = sub_10000588C(&qword_10164B300);
  __chkstk_darwin(v19);
  uint64_t v7 = (char *)&v16 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for BeaconNamingRecord();
  __chkstk_darwin(v8 - 8);
  uint64_t v10 = (uint64_t *)((char *)&v16 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0));
  static os_log_type_t.default.getter();
  if (qword_101637260 != -1) {
    swift_once();
  }
  sub_10000588C((uint64_t *)&unk_10163AD00);
  uint64_t v11 = swift_allocObject();
  long long v18 = xmmword_101342130;
  *(_OWORD *)(v11 + 16) = xmmword_101342130;
  *(void *)(v11 + 56) = sub_10001D4B0(0, (unint64_t *)&qword_10163AE60);
  *(void *)(v11 + 64) = sub_10033149C((unint64_t *)&qword_10163AD10, (unint64_t *)&qword_10163AE60);
  *(void *)(v11 + 32) = a1;
  id v12 = a1;
  os_log(_:dso:log:_:_:)();
  swift_bridgeObjectRelease();
  uint64_t v13 = sub_100DBEB18(v12, v10);
  uint64_t v14 = v17;
  __chkstk_darwin(v13);
  *(&v16 - 4) = v16;
  *(&v16 - 3) = v14;
  *(&v16 - 2) = (uint64_t)v10;
  OS_dispatch_queue.sync<A>(execute:)();
  sub_100B30D0C((uint64_t)v10, (uint64_t)v7, (uint64_t (*)(void))type metadata accessor for BeaconNamingRecord);
  swift_storeEnumTagMultiPayload();
  v21(v7);
  sub_10001DAB4((uint64_t)v7, &qword_10164B300);
  sub_100A9EE98();
  return sub_100B310AC((uint64_t)v10, (uint64_t (*)(void))type metadata accessor for BeaconNamingRecord);
}

uint64_t sub_100AC61A8(void *a1, uint64_t a2, uint64_t a3, void (*a4)(char *), uint64_t a5)
{
  uint64_t v20 = a5;
  unint64_t v21 = a4;
  uint64_t v16 = a3;
  uint64_t v17 = a2;
  uint64_t v19 = sub_10000588C(&qword_1016592B0);
  __chkstk_darwin(v19);
  uint64_t v7 = (char *)&v16 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for OwnedDeviceKeyRecord();
  __chkstk_darwin(v8 - 8);
  uint64_t v10 = (uint64_t *)((char *)&v16 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0));
  static os_log_type_t.default.getter();
  if (qword_101637260 != -1) {
    swift_once();
  }
  sub_10000588C((uint64_t *)&unk_10163AD00);
  uint64_t v11 = swift_allocObject();
  long long v18 = xmmword_101342130;
  *(_OWORD *)(v11 + 16) = xmmword_101342130;
  *(void *)(v11 + 56) = sub_10001D4B0(0, (unint64_t *)&qword_10163AE60);
  *(void *)(v11 + 64) = sub_10033149C((unint64_t *)&qword_10163AD10, (unint64_t *)&qword_10163AE60);
  *(void *)(v11 + 32) = a1;
  id v12 = a1;
  os_log(_:dso:log:_:_:)();
  swift_bridgeObjectRelease();
  sub_1011370FC(v12, v10);
  uint64_t v13 = v17;
  __chkstk_darwin(v14);
  *(&v16 - 4) = v16;
  *(&v16 - 3) = v13;
  *(&v16 - 2) = (uint64_t)v10;
  OS_dispatch_queue.sync<A>(execute:)();
  sub_100B30D0C((uint64_t)v10, (uint64_t)v7, (uint64_t (*)(void))type metadata accessor for OwnedDeviceKeyRecord);
  swift_storeEnumTagMultiPayload();
  v21(v7);
  sub_10001DAB4((uint64_t)v7, &qword_1016592B0);
  sub_100A9EE98();
  return sub_100B310AC((uint64_t)v10, (uint64_t (*)(void))type metadata accessor for OwnedDeviceKeyRecord);
}

uint64_t sub_100AC6578(void *a1, uint64_t a2, uint64_t a3, void (*a4)(char *), uint64_t a5)
{
  uint64_t v20 = a5;
  unint64_t v21 = a4;
  uint64_t v16 = a3;
  uint64_t v17 = a2;
  uint64_t v19 = sub_10000588C(&qword_101651918);
  __chkstk_darwin(v19);
  uint64_t v7 = (char *)&v16 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for LostModeRecord();
  __chkstk_darwin(v8 - 8);
  uint64_t v10 = (uint64_t *)((char *)&v16 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0));
  static os_log_type_t.default.getter();
  if (qword_101637260 != -1) {
    swift_once();
  }
  sub_10000588C((uint64_t *)&unk_10163AD00);
  uint64_t v11 = swift_allocObject();
  long long v18 = xmmword_101342130;
  *(_OWORD *)(v11 + 16) = xmmword_101342130;
  *(void *)(v11 + 56) = sub_10001D4B0(0, (unint64_t *)&qword_10163AE60);
  *(void *)(v11 + 64) = sub_10033149C((unint64_t *)&qword_10163AD10, (unint64_t *)&qword_10163AE60);
  *(void *)(v11 + 32) = a1;
  id v12 = a1;
  os_log(_:dso:log:_:_:)();
  swift_bridgeObjectRelease();
  uint64_t v13 = sub_100E92AFC(v12, v10);
  uint64_t v14 = v17;
  __chkstk_darwin(v13);
  *(&v16 - 4) = v16;
  *(&v16 - 3) = v14;
  *(&v16 - 2) = (uint64_t)v10;
  OS_dispatch_queue.sync<A>(execute:)();
  sub_100B30D0C((uint64_t)v10, (uint64_t)v7, (uint64_t (*)(void))type metadata accessor for LostModeRecord);
  swift_storeEnumTagMultiPayload();
  v21(v7);
  sub_10001DAB4((uint64_t)v7, &qword_101651918);
  sub_100A9EE98();
  return sub_100B310AC((uint64_t)v10, (uint64_t (*)(void))type metadata accessor for LostModeRecord);
}

uint64_t sub_100AC6948(void *a1, uint64_t a2, uint64_t a3, void (*a4)(char *), uint64_t a5)
{
  uint64_t v20 = a5;
  unint64_t v21 = a4;
  uint64_t v16 = a3;
  uint64_t v17 = a2;
  uint64_t v19 = sub_10000588C(&qword_101648068);
  __chkstk_darwin(v19);
  uint64_t v7 = (char *)&v16 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for ShareRecord();
  __chkstk_darwin(v8 - 8);
  uint64_t v10 = (uint64_t *)((char *)&v16 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0));
  static os_log_type_t.default.getter();
  if (qword_101637260 != -1) {
    swift_once();
  }
  sub_10000588C((uint64_t *)&unk_10163AD00);
  uint64_t v11 = swift_allocObject();
  long long v18 = xmmword_101342130;
  *(_OWORD *)(v11 + 16) = xmmword_101342130;
  *(void *)(v11 + 56) = sub_10001D4B0(0, (unint64_t *)&qword_10163AE60);
  *(void *)(v11 + 64) = sub_10033149C((unint64_t *)&qword_10163AD10, (unint64_t *)&qword_10163AE60);
  *(void *)(v11 + 32) = a1;
  id v12 = a1;
  os_log(_:dso:log:_:_:)();
  swift_bridgeObjectRelease();
  sub_1000C3DBC(v12, v10);
  uint64_t v13 = v17;
  __chkstk_darwin(v14);
  *(&v16 - 4) = v16;
  *(&v16 - 3) = v13;
  *(&v16 - 2) = (uint64_t)v10;
  OS_dispatch_queue.sync<A>(execute:)();
  sub_100B30D0C((uint64_t)v10, (uint64_t)v7, (uint64_t (*)(void))type metadata accessor for ShareRecord);
  swift_storeEnumTagMultiPayload();
  v21(v7);
  sub_10001DAB4((uint64_t)v7, &qword_101648068);
  sub_100A9EE98();
  return sub_100B310AC((uint64_t)v10, (uint64_t (*)(void))type metadata accessor for ShareRecord);
}

uint64_t sub_100AC6D18(void *a1, uint64_t a2, uint64_t a3, void (*a4)(char *), uint64_t a5)
{
  uint64_t v20 = a5;
  unint64_t v21 = a4;
  uint64_t v16 = a3;
  uint64_t v17 = a2;
  uint64_t v19 = sub_10000588C(&qword_10163FFA0);
  __chkstk_darwin(v19);
  uint64_t v7 = (char *)&v16 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for SharedBeaconRecord(0);
  __chkstk_darwin(v8 - 8);
  uint64_t v10 = (uint64_t *)((char *)&v16 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0));
  static os_log_type_t.default.getter();
  if (qword_101637260 != -1) {
    swift_once();
  }
  sub_10000588C((uint64_t *)&unk_10163AD00);
  uint64_t v11 = swift_allocObject();
  long long v18 = xmmword_101342130;
  *(_OWORD *)(v11 + 16) = xmmword_101342130;
  *(void *)(v11 + 56) = sub_10001D4B0(0, (unint64_t *)&qword_10163AE60);
  *(void *)(v11 + 64) = sub_10033149C((unint64_t *)&qword_10163AD10, (unint64_t *)&qword_10163AE60);
  *(void *)(v11 + 32) = a1;
  id v12 = a1;
  os_log(_:dso:log:_:_:)();
  swift_bridgeObjectRelease();
  uint64_t v13 = sub_10120C214(v12, v10);
  uint64_t v14 = v17;
  __chkstk_darwin(v13);
  *(&v16 - 4) = v16;
  *(&v16 - 3) = v14;
  *(&v16 - 2) = (uint64_t)v10;
  OS_dispatch_queue.sync<A>(execute:)();
  sub_100B30D0C((uint64_t)v10, (uint64_t)v7, type metadata accessor for SharedBeaconRecord);
  swift_storeEnumTagMultiPayload();
  v21(v7);
  sub_10001DAB4((uint64_t)v7, &qword_10163FFA0);
  sub_100A9EE98();
  return sub_100B310AC((uint64_t)v10, type metadata accessor for SharedBeaconRecord);
}

uint64_t sub_100AC70E8(void *a1, uint64_t a2, uint64_t a3, void (*a4)(char *), uint64_t a5)
{
  uint64_t v20 = a5;
  unint64_t v21 = a4;
  uint64_t v16 = a3;
  uint64_t v17 = a2;
  uint64_t v19 = sub_10000588C(&qword_1016554C0);
  __chkstk_darwin(v19);
  uint64_t v7 = (char *)&v16 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for SafeLocation();
  __chkstk_darwin(v8 - 8);
  uint64_t v10 = (uint64_t *)((char *)&v16 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0));
  static os_log_type_t.default.getter();
  if (qword_101637260 != -1) {
    swift_once();
  }
  sub_10000588C((uint64_t *)&unk_10163AD00);
  uint64_t v11 = swift_allocObject();
  long long v18 = xmmword_101342130;
  *(_OWORD *)(v11 + 16) = xmmword_101342130;
  *(void *)(v11 + 56) = sub_10001D4B0(0, (unint64_t *)&qword_10163AE60);
  *(void *)(v11 + 64) = sub_10033149C((unint64_t *)&qword_10163AD10, (unint64_t *)&qword_10163AE60);
  *(void *)(v11 + 32) = a1;
  id v12 = a1;
  os_log(_:dso:log:_:_:)();
  swift_bridgeObjectRelease();
  sub_100F1047C(v12, v10);
  uint64_t v13 = v17;
  __chkstk_darwin(v14);
  *(&v16 - 4) = v16;
  *(&v16 - 3) = v13;
  *(&v16 - 2) = (uint64_t)v10;
  OS_dispatch_queue.sync<A>(execute:)();
  sub_100B30D0C((uint64_t)v10, (uint64_t)v7, (uint64_t (*)(void))type metadata accessor for SafeLocation);
  swift_storeEnumTagMultiPayload();
  v21(v7);
  sub_10001DAB4((uint64_t)v7, &qword_1016554C0);
  sub_100A9EE98();
  return sub_100B310AC((uint64_t)v10, (uint64_t (*)(void))type metadata accessor for SafeLocation);
}

uint64_t sub_100AC74B8(void *a1, uint64_t a2, uint64_t a3, void (*a4)(char *), uint64_t a5)
{
  uint64_t v20 = a5;
  unint64_t v21 = a4;
  uint64_t v16 = a3;
  uint64_t v17 = a2;
  uint64_t v19 = sub_10000588C((uint64_t *)&unk_1016554E0);
  __chkstk_darwin(v19);
  uint64_t v7 = (char *)&v16 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for LeashRecord();
  __chkstk_darwin(v8 - 8);
  uint64_t v10 = (uint64_t *)((char *)&v16 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0));
  static os_log_type_t.default.getter();
  if (qword_101637260 != -1) {
    swift_once();
  }
  sub_10000588C((uint64_t *)&unk_10163AD00);
  uint64_t v11 = swift_allocObject();
  long long v18 = xmmword_101342130;
  *(_OWORD *)(v11 + 16) = xmmword_101342130;
  *(void *)(v11 + 56) = sub_10001D4B0(0, (unint64_t *)&qword_10163AE60);
  *(void *)(v11 + 64) = sub_10033149C((unint64_t *)&qword_10163AD10, (unint64_t *)&qword_10163AE60);
  *(void *)(v11 + 32) = a1;
  id v12 = a1;
  os_log(_:dso:log:_:_:)();
  swift_bridgeObjectRelease();
  sub_10126128C(v12, v10);
  uint64_t v13 = v17;
  __chkstk_darwin(v14);
  *(&v16 - 4) = v16;
  *(&v16 - 3) = v13;
  *(&v16 - 2) = (uint64_t)v10;
  OS_dispatch_queue.sync<A>(execute:)();
  sub_100B30D0C((uint64_t)v10, (uint64_t)v7, (uint64_t (*)(void))type metadata accessor for LeashRecord);
  swift_storeEnumTagMultiPayload();
  v21(v7);
  sub_10001DAB4((uint64_t)v7, (uint64_t *)&unk_1016554E0);
  sub_100A9EE98();
  return sub_100B310AC((uint64_t)v10, (uint64_t (*)(void))type metadata accessor for LeashRecord);
}

uint64_t sub_100AC7888(void *a1, uint64_t a2, uint64_t a3, void (*a4)(char *), uint64_t a5)
{
  uint64_t v20 = a5;
  unint64_t v21 = a4;
  uint64_t v16 = a3;
  uint64_t v17 = a2;
  uint64_t v19 = sub_10000588C(&qword_10164B328);
  __chkstk_darwin(v19);
  uint64_t v7 = (char *)&v16 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for KeyAlignmentRecord();
  __chkstk_darwin(v8 - 8);
  uint64_t v10 = (uint64_t *)((char *)&v16 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0));
  static os_log_type_t.default.getter();
  if (qword_101637260 != -1) {
    swift_once();
  }
  sub_10000588C((uint64_t *)&unk_10163AD00);
  uint64_t v11 = swift_allocObject();
  long long v18 = xmmword_101342130;
  *(_OWORD *)(v11 + 16) = xmmword_101342130;
  *(void *)(v11 + 56) = sub_10001D4B0(0, (unint64_t *)&qword_10163AE60);
  *(void *)(v11 + 64) = sub_10033149C((unint64_t *)&qword_10163AD10, (unint64_t *)&qword_10163AE60);
  *(void *)(v11 + 32) = a1;
  id v12 = a1;
  os_log(_:dso:log:_:_:)();
  swift_bridgeObjectRelease();
  sub_1000BFAD8(v12, v10);
  uint64_t v13 = v17;
  __chkstk_darwin(v14);
  *(&v16 - 4) = v16;
  *(&v16 - 3) = v13;
  *(&v16 - 2) = (uint64_t)v10;
  OS_dispatch_queue.sync<A>(execute:)();
  sub_100B30D0C((uint64_t)v10, (uint64_t)v7, (uint64_t (*)(void))type metadata accessor for KeyAlignmentRecord);
  swift_storeEnumTagMultiPayload();
  v21(v7);
  sub_10001DAB4((uint64_t)v7, &qword_10164B328);
  sub_100A9EE98();
  return sub_100B310AC((uint64_t)v10, (uint64_t (*)(void))type metadata accessor for KeyAlignmentRecord);
}

uint64_t sub_100AC7C58()
{
  return OS_dispatch_queue.sync<A>(execute:)();
}

void sub_100AC7CD8(uint64_t a1, char a2, void (*a3)(uint64_t), uint64_t a4, uint64_t a5)
{
  uint64_t v41 = a1;
  uint64_t v42 = a5;
  uint64_t v39 = a3;
  uint64_t v40 = a4;
  uint64_t v35 = sub_10000588C(&qword_10163FFA0);
  __chkstk_darwin(v35);
  Class v36 = (Class)((char *)&v34 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v7 = type metadata accessor for SharedBeaconRecord(0);
  uint64_t v37 = *(void *)(v7 - 8);
  uint64_t v8 = *(void *)(v37 + 64);
  uint64_t v9 = __chkstk_darwin(v7 - 8);
  uint64_t v10 = (char *)&v34 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9);
  uint64_t v38 = (uint64_t)&v34 - v11;
  static os_log_type_t.default.getter();
  if (qword_101637260 != -1) {
    swift_once();
  }
  sub_10000588C((uint64_t *)&unk_10163AD00);
  uint64_t v12 = swift_allocObject();
  uint64_t v13 = v12;
  long long v34 = xmmword_101342130;
  *(_OWORD *)(v12 + 16) = xmmword_101342130;
  if (a2) {
    uint64_t v14 = 1702195828;
  }
  else {
    uint64_t v14 = 0x65736C6166;
  }
  if (a2) {
    unint64_t v15 = 0xE400000000000000;
  }
  else {
    unint64_t v15 = 0xE500000000000000;
  }
  *(void *)(v12 + 56) = &type metadata for String;
  *(void *)(v12 + 64) = sub_10000B4CC();
  *(void *)(v13 + 32) = v14;
  *(void *)(v13 + 40) = v15;
  os_log(_:dso:log:_:_:)();
  swift_bridgeObjectRelease();
  if (a2)
  {
    uint64_t v17 = v41;
    Class v18 = sub_101155754(v41);
    v43[0] = v18;
    uint64_t v19 = v38;
    sub_100B30D0C(v17, v38, type metadata accessor for SharedBeaconRecord);
    v39(v19);
    sub_100CF51A4(v43, v19);
    uint64_t v20 = v42;
    uint64_t v21 = QueueSynchronizer.conditionalSync<A>(_:)();
    __chkstk_darwin(v21);
    *((void *)&v34 - 2) = v22;
    *((void *)&v34 - 1) = v19;
    OS_dispatch_queue.sync<A>(execute:)();
    QueueSynchronizer.conditionalSync<A>(_:)();
    sub_100A9E7EC(8);
    Class v32 = v36;
    sub_100B30D0C(v19, (uint64_t)v36, type metadata accessor for SharedBeaconRecord);
    swift_storeEnumTagMultiPayload();
    sub_101170CF8((uint64_t)v32);
    sub_10001DAB4((uint64_t)v32, &qword_10163FFA0);
    uint64_t v33 = type metadata accessor for Transaction();
    __chkstk_darwin(v33);
    *((void *)&v34 - 4) = v20;
    *((void *)&v34 - 3) = v43;
    *((void *)&v34 - 2) = v17;
    static Transaction.named<A>(_:with:)();
    sub_100B310AC(v19, type metadata accessor for SharedBeaconRecord);
  }
  else
  {
    uint64_t v23 = v41;
    Class v36 = sub_101155754(v41);
    sub_100AB24F0();
    sub_100B30D0C(v23, (uint64_t)v10, type metadata accessor for SharedBeaconRecord);
    uint64_t v24 = *(unsigned __int8 *)(v37 + 80);
    uint64_t v38 = v24 | 7;
    uint64_t v25 = swift_allocObject();
    uint64_t v26 = v40;
    *(void *)(v25 + 16) = v39;
    *(void *)(v25 + 24) = v26;
    sub_100B30DB4((uint64_t)v10, v25 + ((v24 + 32) & ~v24), type metadata accessor for SharedBeaconRecord);
    swift_retain();
    Class v27 = v36;
    sub_101017624(v36, (void (*)(id *))sub_100B62220, v25);
    swift_release();
    swift_release();
    Future.addFailure(block:)();
    swift_release();
    sub_100B30D0C(v23, (uint64_t)v10, type metadata accessor for SharedBeaconRecord);
    uint64_t v28 = (v24 + 16) & ~v24;
    unint64_t v29 = (v8 + v28 + 7) & 0xFFFFFFFFFFFFFFF8;
    uint64_t v30 = swift_allocObject();
    sub_100B30DB4((uint64_t)v10, v30 + v28, type metadata accessor for SharedBeaconRecord);
    *(void *)(v30 + v29) = v42;
    os_log_type_t v31 = (uint64_t (**)(uint64_t))(v30 + ((v29 + 15) & 0xFFFFFFFFFFFFFFF8));
    *os_log_type_t v31 = sub_101170CF8;
    v31[1] = 0;
    swift_retain();
    Future.addSuccess(block:)();

    swift_release();
    swift_release();
    swift_release();
  }
}

void sub_100AC838C(uint64_t a1, char a2, void (*a3)(uint64_t), void (*a4)(uint64_t), uint64_t a5, uint64_t a6)
{
  uint64_t v51 = a1;
  uint64_t v52 = a5;
  uint64_t v48 = a3;
  uint64_t v49 = a4;
  uint64_t v43 = sub_10000588C(&qword_101648068);
  __chkstk_darwin(v43);
  uint64_t v44 = (uint64_t)&v41 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = type metadata accessor for ShareRecord();
  uint64_t v45 = *(uint64_t (**)())(v9 - 8);
  uint64_t v10 = *((void *)v45 + 8);
  uint64_t v11 = __chkstk_darwin(v9);
  uint64_t v12 = (char *)&v41 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v11);
  uint64_t v47 = (char *)&v41 - v13;
  uint64_t v50 = swift_allocObject();
  uint64_t v46 = a6;
  *(void *)(v50 + 16) = a6;
  static os_log_type_t.default.getter();
  if (qword_101637260 != -1) {
    swift_once();
  }
  uint64_t v42 = sub_10000588C((uint64_t *)&unk_10163AD00);
  uint64_t v14 = swift_allocObject();
  uint64_t v15 = v14;
  long long v41 = xmmword_101342130;
  *(_OWORD *)(v14 + 16) = xmmword_101342130;
  if (a2) {
    uint64_t v16 = 1702195828;
  }
  else {
    uint64_t v16 = 0x65736C6166;
  }
  if (a2) {
    unint64_t v17 = 0xE400000000000000;
  }
  else {
    unint64_t v17 = 0xE500000000000000;
  }
  *(void *)(v14 + 56) = &type metadata for String;
  *(void *)(v14 + 64) = sub_10000B4CC();
  *(void *)(v15 + 32) = v16;
  *(void *)(v15 + 40) = v17;
  os_log(_:dso:log:_:_:)();
  swift_bridgeObjectRelease();
  if (a2)
  {
    uint64_t v19 = v51;
    Class v20 = sub_1011534A0(v51);
    v53[0] = v20;
    uint64_t v21 = v47;
    sub_100B30D0C(v19, (uint64_t)v47, (uint64_t (*)(void))type metadata accessor for ShareRecord);
    *(void *)&v21[*(int *)(v9 + 44)] = v46;
    uint64_t v22 = sub_100A9F094(v53, (uint64_t)v21);
    uint64_t v23 = v52;
    __chkstk_darwin(v22);
    *((void *)&v41 - 2) = v24;
    *((void *)&v41 - 1) = v21;
    OS_dispatch_queue.sync<A>(execute:)();
    sub_100A9E7EC(8);
    uint64_t v38 = v44;
    sub_100B30D0C((uint64_t)v21, v44, (uint64_t (*)(void))type metadata accessor for ShareRecord);
    swift_storeEnumTagMultiPayload();
    v48(v38);
    sub_10001DAB4(v38, &qword_101648068);
    uint64_t v39 = type metadata accessor for Transaction();
    __chkstk_darwin(v39);
    *((void *)&v41 - 4) = v23;
    *((void *)&v41 - 3) = v53;
    *((void *)&v41 - 2) = v19;
    static Transaction.named<A>(_:with:)();
    sub_100B310AC((uint64_t)v21, (uint64_t (*)(void))type metadata accessor for ShareRecord);
    id v40 = v53[0];
    swift_release();
  }
  else
  {
    uint64_t v26 = v51;
    Class v27 = sub_1011534A0(v51);
    uint64_t v47 = (char *)v27;
    sub_100AB24F0();
    sub_100B30D0C(v26, (uint64_t)v12, (uint64_t (*)(void))type metadata accessor for ShareRecord);
    uint64_t v28 = *((unsigned __int8 *)v45 + 80);
    uint64_t v46 = v28 | 7;
    uint64_t v29 = swift_allocObject();
    uint64_t v30 = v50;
    *(void *)(v29 + 16) = sub_100B59554;
    *(void *)(v29 + 24) = v30;
    uint64_t v45 = type metadata accessor for ShareRecord;
    sub_100B30DB4((uint64_t)v12, v29 + ((v28 + 32) & ~v28), (uint64_t (*)(void))type metadata accessor for ShareRecord);
    swift_retain();
    sub_101017624(v27, (void (*)(id *))sub_100B59750, v29);
    swift_release();
    swift_release();
    uint64_t v31 = swift_allocObject();
    Class v32 = v48;
    uint64_t v33 = v49;
    *(void *)(v31 + 16) = v48;
    *(void *)(v31 + 24) = v33;
    swift_retain();
    Future.addFailure(block:)();
    swift_release();
    swift_release();
    sub_100B30D0C(v26, (uint64_t)v12, (uint64_t (*)(void))type metadata accessor for ShareRecord);
    uint64_t v34 = (v28 + 16) & ~v28;
    unint64_t v35 = (v10 + v34 + 7) & 0xFFFFFFFFFFFFFFF8;
    uint64_t v36 = swift_allocObject();
    sub_100B30DB4((uint64_t)v12, v36 + v34, (uint64_t (*)(void))v45);
    *(void *)(v36 + v35) = v52;
    uint64_t v37 = (void (**)(uint64_t))(v36 + ((v35 + 15) & 0xFFFFFFFFFFFFFFF8));
    *uint64_t v37 = v32;
    v37[1] = v33;
    swift_retain();
    swift_retain();
    Future.addSuccess(block:)();
    swift_release();

    swift_release();
    swift_release();
    swift_release();
  }
}

uint64_t sub_100AC8A84(uint64_t a1, uint64_t a2, id *a3, uint64_t a4)
{
  uint64_t v8 = type metadata accessor for OwnedBeaconGroup(0);
  uint64_t v9 = *(void *)(v8 - 8);
  uint64_t v10 = *(void *)(v9 + 64);
  __chkstk_darwin(v8 - 8);
  uint64_t v11 = sub_100AB24F0();
  id v12 = *a3;
  sub_101016E50(v12, v11);
  swift_release();

  sub_100B30D0C(a4, (uint64_t)&v16 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0), type metadata accessor for OwnedBeaconGroup);
  unint64_t v13 = (*(unsigned __int8 *)(v9 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80);
  uint64_t v14 = swift_allocObject();
  *(void *)(v14 + 16) = a1;
  sub_100B30DB4((uint64_t)&v16 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0), v14 + v13, type metadata accessor for OwnedBeaconGroup);
  *(void *)(v14 + ((v10 + v13 + 7) & 0xFFFFFFFFFFFFFFF8)) = a2;
  swift_retain();
  swift_retain();
  Future.addCompletion(block:)();
  swift_release();
  swift_release();
  return swift_release();
}

uint64_t sub_100AC8C3C(uint64_t a1, uint64_t a2, id *a3, uint64_t a4)
{
  uint64_t v8 = type metadata accessor for SharedBeaconRecord(0);
  uint64_t v9 = *(void *)(v8 - 8);
  uint64_t v10 = *(void *)(v9 + 64);
  __chkstk_darwin(v8 - 8);
  uint64_t v11 = sub_100AB24F0();
  id v12 = *a3;
  sub_101016E50(v12, v11);
  swift_release();

  sub_100B30D0C(a4, (uint64_t)&v16 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0), type metadata accessor for SharedBeaconRecord);
  unint64_t v13 = (*(unsigned __int8 *)(v9 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80);
  uint64_t v14 = swift_allocObject();
  *(void *)(v14 + 16) = a1;
  sub_100B30DB4((uint64_t)&v16 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0), v14 + v13, type metadata accessor for SharedBeaconRecord);
  *(void *)(v14 + ((v10 + v13 + 7) & 0xFFFFFFFFFFFFFFF8)) = a2;
  swift_retain();
  swift_retain();
  Future.addCompletion(block:)();
  swift_release();
  swift_release();
  return swift_release();
}

uint64_t sub_100AC8DF4(uint64_t a1, uint64_t a2, id *a3, uint64_t a4)
{
  uint64_t v8 = type metadata accessor for OwnedBeaconRecord();
  uint64_t v9 = *(void *)(v8 - 8);
  uint64_t v10 = *(void *)(v9 + 64);
  __chkstk_darwin(v8 - 8);
  uint64_t v11 = sub_100AB24F0();
  id v12 = *a3;
  sub_101016E50(v12, v11);
  swift_release();

  sub_100B30D0C(a4, (uint64_t)&v16 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0), (uint64_t (*)(void))type metadata accessor for OwnedBeaconRecord);
  unint64_t v13 = (*(unsigned __int8 *)(v9 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80);
  uint64_t v14 = swift_allocObject();
  *(void *)(v14 + 16) = a1;
  sub_100B30DB4((uint64_t)&v16 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0), v14 + v13, (uint64_t (*)(void))type metadata accessor for OwnedBeaconRecord);
  *(void *)(v14 + ((v10 + v13 + 7) & 0xFFFFFFFFFFFFFFF8)) = a2;
  swift_retain();
  swift_retain();
  Future.addCompletion(block:)();
  swift_release();
  swift_release();
  return swift_release();
}

uint64_t sub_100AC8FAC(uint64_t a1, uint64_t a2, id *a3, uint64_t a4)
{
  uint64_t v8 = type metadata accessor for LostModeRecord();
  uint64_t v9 = *(void *)(v8 - 8);
  uint64_t v10 = *(void *)(v9 + 64);
  __chkstk_darwin(v8 - 8);
  uint64_t v11 = sub_100AB24F0();
  id v12 = *a3;
  sub_101016E50(v12, v11);
  swift_release();

  sub_100B30D0C(a4, (uint64_t)&v16 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0), (uint64_t (*)(void))type metadata accessor for LostModeRecord);
  unint64_t v13 = (*(unsigned __int8 *)(v9 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80);
  uint64_t v14 = swift_allocObject();
  *(void *)(v14 + 16) = a1;
  sub_100B30DB4((uint64_t)&v16 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0), v14 + v13, (uint64_t (*)(void))type metadata accessor for LostModeRecord);
  *(void *)(v14 + ((v10 + v13 + 7) & 0xFFFFFFFFFFFFFFF8)) = a2;
  swift_retain();
  swift_retain();
  Future.addCompletion(block:)();
  swift_release();
  swift_release();
  return swift_release();
}

uint64_t sub_100AC9164(uint64_t a1, uint64_t a2, id *a3, uint64_t a4)
{
  uint64_t v8 = type metadata accessor for BeaconNamingRecord();
  uint64_t v9 = *(void *)(v8 - 8);
  uint64_t v10 = *(void *)(v9 + 64);
  __chkstk_darwin(v8 - 8);
  uint64_t v11 = sub_100AB24F0();
  id v12 = *a3;
  sub_101016E50(v12, v11);
  swift_release();

  sub_100B30D0C(a4, (uint64_t)&v16 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0), (uint64_t (*)(void))type metadata accessor for BeaconNamingRecord);
  unint64_t v13 = (*(unsigned __int8 *)(v9 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80);
  uint64_t v14 = swift_allocObject();
  *(void *)(v14 + 16) = a1;
  sub_100B30DB4((uint64_t)&v16 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0), v14 + v13, (uint64_t (*)(void))type metadata accessor for BeaconNamingRecord);
  *(void *)(v14 + ((v10 + v13 + 7) & 0xFFFFFFFFFFFFFFF8)) = a2;
  swift_retain();
  swift_retain();
  Future.addCompletion(block:)();
  swift_release();
  swift_release();
  return swift_release();
}

uint64_t sub_100AC931C(uint64_t a1, uint64_t a2, id *a3, uint64_t a4)
{
  uint64_t v8 = type metadata accessor for ShareRecord();
  uint64_t v9 = *(void *)(v8 - 8);
  uint64_t v10 = *(void *)(v9 + 64);
  __chkstk_darwin(v8 - 8);
  uint64_t v11 = sub_100AB24F0();
  id v12 = *a3;
  sub_101016E50(v12, v11);
  swift_release();

  sub_100B30D0C(a4, (uint64_t)&v16 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0), (uint64_t (*)(void))type metadata accessor for ShareRecord);
  unint64_t v13 = (*(unsigned __int8 *)(v9 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80);
  uint64_t v14 = swift_allocObject();
  *(void *)(v14 + 16) = a1;
  sub_100B30DB4((uint64_t)&v16 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0), v14 + v13, (uint64_t (*)(void))type metadata accessor for ShareRecord);
  *(void *)(v14 + ((v10 + v13 + 7) & 0xFFFFFFFFFFFFFFF8)) = a2;
  swift_retain();
  swift_retain();
  Future.addCompletion(block:)();
  swift_release();
  swift_release();
  return swift_release();
}

uint64_t sub_100AC94D4(uint64_t a1, uint64_t a2, id *a3, uint64_t a4)
{
  uint64_t v8 = type metadata accessor for KeyAlignmentRecord();
  uint64_t v9 = *(void *)(v8 - 8);
  uint64_t v10 = *(void *)(v9 + 64);
  __chkstk_darwin(v8 - 8);
  uint64_t v11 = sub_100AB24F0();
  id v12 = *a3;
  sub_101016E50(v12, v11);
  swift_release();

  sub_100B30D0C(a4, (uint64_t)&v16 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0), (uint64_t (*)(void))type metadata accessor for KeyAlignmentRecord);
  unint64_t v13 = (*(unsigned __int8 *)(v9 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80);
  uint64_t v14 = swift_allocObject();
  *(void *)(v14 + 16) = a1;
  sub_100B30DB4((uint64_t)&v16 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0), v14 + v13, (uint64_t (*)(void))type metadata accessor for KeyAlignmentRecord);
  *(void *)(v14 + ((v10 + v13 + 7) & 0xFFFFFFFFFFFFFFF8)) = a2;
  swift_retain();
  swift_retain();
  Future.addCompletion(block:)();
  swift_release();
  swift_release();
  return swift_release();
}

uint64_t sub_100AC968C(uint64_t a1, uint64_t a2, id *a3, uint64_t a4)
{
  uint64_t v8 = type metadata accessor for LeashRecord();
  uint64_t v9 = *(void *)(v8 - 8);
  uint64_t v10 = *(void *)(v9 + 64);
  uint64_t v11 = __chkstk_darwin(v8 - 8);
  uint64_t v12 = sub_100AB24F0(v11);
  id v13 = *a3;
  sub_101016E50(v13, v12);
  swift_release();

  sub_100B30D0C(a4, (uint64_t)&v17 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0), (uint64_t (*)(void))type metadata accessor for LeashRecord);
  unint64_t v14 = (*(unsigned __int8 *)(v9 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80);
  uint64_t v15 = swift_allocObject();
  *(void *)(v15 + 16) = a1;
  sub_100B30DB4((uint64_t)&v17 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0), v15 + v14, (uint64_t (*)(void))type metadata accessor for LeashRecord);
  *(void *)(v15 + ((v10 + v14 + 7) & 0xFFFFFFFFFFFFFFF8)) = a2;
  swift_retain();
  swift_retain();
  Future.addCompletion(block:)();
  swift_release();
  swift_release();
  return swift_release();
}

uint64_t sub_100AC9844(uint64_t a1, uint64_t a2, id *a3, uint64_t a4)
{
  uint64_t v8 = type metadata accessor for SafeLocation();
  uint64_t v9 = *(void *)(v8 - 8);
  uint64_t v10 = *(void *)(v9 + 64);
  uint64_t v11 = __chkstk_darwin(v8 - 8);
  uint64_t v12 = sub_100AB24F0(v11);
  id v13 = *a3;
  sub_101016E50(v13, v12);
  swift_release();

  sub_100B30D0C(a4, (uint64_t)&v17 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0), (uint64_t (*)(void))type metadata accessor for SafeLocation);
  unint64_t v14 = (*(unsigned __int8 *)(v9 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80);
  uint64_t v15 = swift_allocObject();
  *(void *)(v15 + 16) = a1;
  sub_100B30DB4((uint64_t)&v17 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0), v15 + v14, (uint64_t (*)(void))type metadata accessor for SafeLocation);
  *(void *)(v15 + ((v10 + v14 + 7) & 0xFFFFFFFFFFFFFFF8)) = a2;
  swift_retain();
  swift_retain();
  Future.addCompletion(block:)();
  swift_release();
  swift_release();
  return swift_release();
}

void sub_100AC99FC(void *a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for SharedBeaconRecord(0);
  __chkstk_darwin(v4 - 8);
  uint64_t v6 = (void *)((char *)v15 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0));
  Transaction.capture()();
  if (a2)
  {
    swift_errorRetain();
    static os_log_type_t.error.getter();
    if (qword_101637260 != -1) {
      swift_once();
    }
    sub_10000588C((uint64_t *)&unk_10163AD00);
    uint64_t v7 = swift_allocObject();
    *(_OWORD *)(v7 + 16) = xmmword_101342130;
    v15[0] = a2;
    swift_errorRetain();
    sub_10000588C(&qword_101638D40);
    uint64_t v8 = String.init<A>(describing:)();
    uint64_t v10 = v9;
    *(void *)(v7 + 56) = &type metadata for String;
    *(void *)(v7 + 64) = sub_10000B4CC();
    *(void *)(v7 + 32) = v8;
    *(void *)(v7 + 40) = v10;
    os_log(_:dso:log:_:_:)();
    swift_bridgeObjectRelease();
    swift_errorRelease();
  }
  else if (a1)
  {
    id v11 = a1;
    static os_log_type_t.default.getter();
    if (qword_101637260 != -1) {
      swift_once();
    }
    os_log(_:dso:log:_:_:)();
    id v12 = v11;
    sub_10120C214(v12, v6);
    uint64_t v13 = QueueSynchronizer.conditionalSync<A>(_:)();
    __chkstk_darwin(v13);
    v15[-2] = v14;
    v15[-1] = v6;
    OS_dispatch_queue.sync<A>(execute:)();
    sub_100B310AC((uint64_t)v6, type metadata accessor for SharedBeaconRecord);
  }
}

void sub_100AC9D70(void *a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for OwnedBeaconRecord();
  __chkstk_darwin(v4 - 8);
  uint64_t v6 = (void *)((char *)v15 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0));
  Transaction.capture()();
  if (a2)
  {
    swift_errorRetain();
    static os_log_type_t.error.getter();
    if (qword_101637260 != -1) {
      swift_once();
    }
    sub_10000588C((uint64_t *)&unk_10163AD00);
    uint64_t v7 = swift_allocObject();
    *(_OWORD *)(v7 + 16) = xmmword_101342130;
    v15[0] = a2;
    swift_errorRetain();
    sub_10000588C(&qword_101638D40);
    uint64_t v8 = String.init<A>(describing:)();
    uint64_t v10 = v9;
    *(void *)(v7 + 56) = &type metadata for String;
    *(void *)(v7 + 64) = sub_10000B4CC();
    *(void *)(v7 + 32) = v8;
    *(void *)(v7 + 40) = v10;
    os_log(_:dso:log:_:_:)();
    swift_bridgeObjectRelease();
    swift_errorRelease();
  }
  else if (a1)
  {
    id v11 = a1;
    static os_log_type_t.default.getter();
    if (qword_101637260 != -1) {
      swift_once();
    }
    os_log(_:dso:log:_:_:)();
    id v12 = v11;
    sub_100D19D5C(v12, v6);
    uint64_t v13 = QueueSynchronizer.conditionalSync<A>(_:)();
    __chkstk_darwin(v13);
    v15[-2] = v14;
    v15[-1] = v6;
    OS_dispatch_queue.sync<A>(execute:)();
    sub_100B310AC((uint64_t)v6, (uint64_t (*)(void))type metadata accessor for OwnedBeaconRecord);
  }
}

void sub_100ACA0E4(void *a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for BeaconNamingRecord();
  __chkstk_darwin(v4 - 8);
  uint64_t v6 = (void *)((char *)v15 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0));
  Transaction.capture()();
  if (a2)
  {
    swift_errorRetain();
    static os_log_type_t.error.getter();
    if (qword_101637260 != -1) {
      swift_once();
    }
    sub_10000588C((uint64_t *)&unk_10163AD00);
    uint64_t v7 = swift_allocObject();
    *(_OWORD *)(v7 + 16) = xmmword_101342130;
    v15[0] = a2;
    swift_errorRetain();
    sub_10000588C(&qword_101638D40);
    uint64_t v8 = String.init<A>(describing:)();
    uint64_t v10 = v9;
    *(void *)(v7 + 56) = &type metadata for String;
    *(void *)(v7 + 64) = sub_10000B4CC();
    *(void *)(v7 + 32) = v8;
    *(void *)(v7 + 40) = v10;
    os_log(_:dso:log:_:_:)();
    swift_bridgeObjectRelease();
    swift_errorRelease();
  }
  else if (a1)
  {
    id v11 = a1;
    static os_log_type_t.default.getter();
    if (qword_101637260 != -1) {
      swift_once();
    }
    os_log(_:dso:log:_:_:)();
    id v12 = v11;
    sub_100DBEB18(v12, v6);
    uint64_t v13 = QueueSynchronizer.conditionalSync<A>(_:)();
    __chkstk_darwin(v13);
    v15[-2] = v14;
    v15[-1] = v6;
    OS_dispatch_queue.sync<A>(execute:)();
    sub_100B310AC((uint64_t)v6, (uint64_t (*)(void))type metadata accessor for BeaconNamingRecord);
  }
}

void sub_100ACA458(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t (*a6)(void), uint64_t (*a7)(void), uint64_t a8, uint64_t (*a9)(void))
{
  uint64_t v12 = a6(0);
  __chkstk_darwin(v12 - 8);
  uint64_t v14 = (char *)v23 - v13;
  Transaction.capture()();
  if (a2)
  {
    swift_errorRetain();
    static os_log_type_t.error.getter();
    if (qword_101637260 != -1) {
      swift_once();
    }
    sub_10000588C((uint64_t *)&unk_10163AD00);
    uint64_t v15 = swift_allocObject();
    *(_OWORD *)(v15 + 16) = xmmword_101342130;
    v23[0] = a2;
    swift_errorRetain();
    sub_10000588C(&qword_101638D40);
    uint64_t v16 = String.init<A>(describing:)();
    uint64_t v18 = v17;
    *(void *)(v15 + 56) = &type metadata for String;
    *(void *)(v15 + 64) = sub_10000B4CC();
    *(void *)(v15 + 32) = v16;
    *(void *)(v15 + 40) = v18;
    os_log(_:dso:log:_:_:)();
    swift_bridgeObjectRelease();
    swift_errorRelease();
  }
  else if (a1)
  {
    id v19 = a1;
    static os_log_type_t.default.getter();
    if (qword_101637260 != -1) {
      swift_once();
    }
    os_log(_:dso:log:_:_:)();
    id v20 = v19;
    uint64_t v21 = a7();
    __chkstk_darwin(v21);
    v23[-2] = v22;
    v23[-1] = v14;
    OS_dispatch_queue.sync<A>(execute:)();
    sub_100B310AC((uint64_t)v14, a9);
  }
}

uint64_t sub_100ACA794(id *a1, void (*a2)(char *), uint64_t a3, uint64_t a4)
{
  return sub_100ACAB44(a1, a2, a3, a4, type metadata accessor for OwnedBeaconGroup, (void (*)(id))sub_1004CFDAC, (void (*)(id *, char *))sub_101072710, type metadata accessor for OwnedBeaconGroup);
}

uint64_t sub_100ACA7E8(id *a1, void (*a2)(char *), uint64_t a3, uint64_t a4)
{
  return sub_100ACAB44(a1, a2, a3, a4, type metadata accessor for SharedBeaconRecord, (void (*)(id))sub_10120C214, (void (*)(id *, char *))sub_100CF51A4, type metadata accessor for SharedBeaconRecord);
}

uint64_t sub_100ACA83C(id *a1, void (*a2)(char *), uint64_t a3, uint64_t a4)
{
  return sub_100ACAB44(a1, a2, a3, a4, (uint64_t (*)(void))type metadata accessor for OwnedBeaconRecord, (void (*)(id))sub_100D19D5C, (void (*)(id *, char *))sub_101075E90, (uint64_t (*)(void))type metadata accessor for OwnedBeaconRecord);
}

uint64_t sub_100ACA890(id *a1, void (*a2)(char *), uint64_t a3, uint64_t a4)
{
  return sub_100ACAB44(a1, a2, a3, a4, (uint64_t (*)(void))type metadata accessor for LostModeRecord, (void (*)(id))sub_100E92AFC, (void (*)(id *, char *))sub_100B223B8, (uint64_t (*)(void))type metadata accessor for LostModeRecord);
}

uint64_t sub_100ACA8E4(id *a1, void (*a2)(char *), uint64_t a3, uint64_t a4)
{
  return sub_100ACAB44(a1, a2, a3, a4, (uint64_t (*)(void))type metadata accessor for BeaconNamingRecord, (void (*)(id))sub_100DBEB18, (void (*)(id *, char *))sub_101076E58, (uint64_t (*)(void))type metadata accessor for BeaconNamingRecord);
}

uint64_t sub_100ACA938(id *a1, void (*a2)(char *), uint64_t a3, uint64_t a4)
{
  return sub_100ACAB44(a1, a2, a3, a4, (uint64_t (*)(void))type metadata accessor for ShareRecord, (void (*)(id))sub_1000C3DBC, (void (*)(id *, char *))sub_100A9F094, (uint64_t (*)(void))type metadata accessor for ShareRecord);
}

uint64_t sub_100ACA98C(id *a1, void (*a2)(uint64_t *))
{
  uint64_t v4 = type metadata accessor for KeyAlignmentRecord();
  __chkstk_darwin(v4 - 8);
  uint64_t v6 = (uint64_t *)((char *)&v8 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0));
  sub_1000BFAD8(*a1, v6);
  a2(v6);
  sub_1000C17FC((uint64_t)v6, a1);
  return sub_100B310AC((uint64_t)v6, (uint64_t (*)(void))type metadata accessor for KeyAlignmentRecord);
}

uint64_t sub_100ACAB44(id *a1, void (*a2)(char *), uint64_t a3, uint64_t a4, uint64_t (*a5)(void), void (*a6)(id), void (*a7)(id *, char *), uint64_t (*a8)(void))
{
  uint64_t v13 = a5(0);
  __chkstk_darwin(v13 - 8);
  uint64_t v15 = (char *)&v17 - v14;
  a6(*a1);
  a2(v15);
  a7(a1, v15);
  return sub_100B310AC((uint64_t)v15, a8);
}

uint64_t sub_100ACAD18(uint64_t a1, void (*a2)(void *), uint64_t a3)
{
  return sub_100AC5484(a1, a2, a3, &qword_10163C650, (uint64_t)"Update failed: %@", 17);
}

uint64_t sub_100ACAD30(uint64_t a1)
{
  uint64_t v2 = sub_10000588C(&qword_10163FFA0);
  __chkstk_darwin(v2);
  uint64_t v4 = (void *)((char *)v10 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0));
  static os_log_type_t.error.getter();
  if (qword_101637260 != -1) {
    swift_once();
  }
  sub_10000588C((uint64_t *)&unk_10163AD00);
  uint64_t v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_101342130;
  v10[1] = a1;
  swift_errorRetain();
  sub_10000588C(&qword_101638D40);
  uint64_t v6 = String.init<A>(describing:)();
  uint64_t v8 = v7;
  *(void *)(v5 + 56) = &type metadata for String;
  *(void *)(v5 + 64) = sub_10000B4CC();
  *(void *)(v5 + 32) = v6;
  *(void *)(v5 + 40) = v8;
  os_log(_:dso:log:_:_:)();
  swift_bridgeObjectRelease();
  void *v4 = a1;
  swift_storeEnumTagMultiPayload();
  swift_errorRetain();
  sub_101170CF8((uint64_t)v4);
  return sub_10001DAB4((uint64_t)v4, &qword_10163FFA0);
}

uint64_t sub_100ACAED0(uint64_t a1, void (*a2)(void *), uint64_t a3)
{
  return sub_100AC5484(a1, a2, a3, &qword_10163FFA0, (uint64_t)"Update failed: %@", 17);
}

uint64_t sub_100ACAEE8(uint64_t a1, void (*a2)(void *), uint64_t a3)
{
  return sub_100AC5484(a1, a2, a3, (uint64_t *)&unk_101656900, (uint64_t)"Update failed: %@", 17);
}

uint64_t sub_100ACAF00(uint64_t a1, void (*a2)(void *), uint64_t a3)
{
  return sub_100AC5484(a1, a2, a3, &qword_101651918, (uint64_t)"Update failed: %@", 17);
}

uint64_t sub_100ACAF18(uint64_t a1, void (*a2)(void *), uint64_t a3)
{
  return sub_100AC5484(a1, a2, a3, &qword_10164B300, (uint64_t)"Update failed: %@", 17);
}

uint64_t sub_100ACAF30(uint64_t a1, void (*a2)(void *), uint64_t a3)
{
  return sub_100AC5484(a1, a2, a3, &qword_101648068, (uint64_t)"Update failed: %@", 17);
}

uint64_t sub_100ACAF48(uint64_t a1, void (*a2)(void *), uint64_t a3)
{
  return sub_100AC5484(a1, a2, a3, &qword_10164B328, (uint64_t)"Update failed: %@", 17);
}

uint64_t sub_100ACAF60(void *a1, uint64_t a2, uint64_t a3, void (*a4)(char *))
{
  uint64_t v6 = sub_10000588C(&qword_10163C650);
  __chkstk_darwin(v6);
  uint64_t v8 = (char *)v15 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = type metadata accessor for OwnedBeaconGroup(0);
  __chkstk_darwin(v9 - 8);
  id v11 = (char *)v15 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1004CFDAC(a1, (uint64_t)v11);
  __chkstk_darwin(v12);
  v15[-2] = v13;
  v15[-1] = v11;
  OS_dispatch_queue.sync<A>(execute:)();
  sub_100A9E7EC(8);
  sub_100B30D0C((uint64_t)v11, (uint64_t)v8, type metadata accessor for OwnedBeaconGroup);
  swift_storeEnumTagMultiPayload();
  a4(v8);
  sub_10001DAB4((uint64_t)v8, &qword_10163C650);
  sub_100A9EE98();
  return sub_100B310AC((uint64_t)v11, type metadata accessor for OwnedBeaconGroup);
}

uint64_t sub_100ACB278(void *a1, uint64_t a2, uint64_t a3, void (*a4)(char *))
{
  uint64_t v6 = sub_10000588C(&qword_10163FFA0);
  __chkstk_darwin(v6);
  uint64_t v8 = (char *)v15 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = type metadata accessor for SharedBeaconRecord(0);
  __chkstk_darwin(v9 - 8);
  id v11 = (void *)((char *)v15 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0));
  sub_10120C214(a1, v11);
  uint64_t v12 = QueueSynchronizer.conditionalSync<A>(_:)();
  __chkstk_darwin(v12);
  v15[-2] = v13;
  v15[-1] = v11;
  OS_dispatch_queue.sync<A>(execute:)();
  sub_100A9E7EC(8);
  sub_100B30D0C((uint64_t)v11, (uint64_t)v8, type metadata accessor for SharedBeaconRecord);
  swift_storeEnumTagMultiPayload();
  a4(v8);
  sub_10001DAB4((uint64_t)v8, &qword_10163FFA0);
  sub_100A9EE98();
  return sub_100B310AC((uint64_t)v11, type metadata accessor for SharedBeaconRecord);
}

uint64_t sub_100ACB5C0(void *a1, uint64_t a2, uint64_t a3, void (*a4)(char *))
{
  uint64_t v6 = sub_10000588C((uint64_t *)&unk_101656900);
  __chkstk_darwin(v6);
  uint64_t v8 = (char *)v15 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = type metadata accessor for OwnedBeaconRecord();
  __chkstk_darwin(v9 - 8);
  id v11 = (void *)((char *)v15 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0));
  sub_100D19D5C(a1, v11);
  uint64_t v12 = QueueSynchronizer.conditionalSync<A>(_:)();
  __chkstk_darwin(v12);
  v15[-2] = v13;
  v15[-1] = v11;
  OS_dispatch_queue.sync<A>(execute:)();
  sub_100A9E7EC(8);
  sub_100B30D0C((uint64_t)v11, (uint64_t)v8, (uint64_t (*)(void))type metadata accessor for OwnedBeaconRecord);
  swift_storeEnumTagMultiPayload();
  a4(v8);
  sub_10001DAB4((uint64_t)v8, (uint64_t *)&unk_101656900);
  sub_100A9EE98();
  return sub_100B310AC((uint64_t)v11, (uint64_t (*)(void))type metadata accessor for OwnedBeaconRecord);
}

uint64_t sub_100ACB908(void *a1, uint64_t a2, uint64_t a3, void (*a4)(char *))
{
  uint64_t v6 = sub_10000588C(&qword_101651918);
  __chkstk_darwin(v6);
  uint64_t v8 = (char *)v15 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = type metadata accessor for LostModeRecord();
  __chkstk_darwin(v9 - 8);
  id v11 = (void *)((char *)v15 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v12 = sub_100E92AFC(a1, v11);
  __chkstk_darwin(v12);
  v15[-2] = v13;
  v15[-1] = v11;
  OS_dispatch_queue.sync<A>(execute:)();
  sub_100A9E7EC(8);
  sub_100B30D0C((uint64_t)v11, (uint64_t)v8, (uint64_t (*)(void))type metadata accessor for LostModeRecord);
  swift_storeEnumTagMultiPayload();
  a4(v8);
  sub_10001DAB4((uint64_t)v8, &qword_101651918);
  sub_100A9EE98();
  return sub_100B310AC((uint64_t)v11, (uint64_t (*)(void))type metadata accessor for LostModeRecord);
}

uint64_t sub_100ACBC20(void *a1, uint64_t a2, uint64_t a3, void (*a4)(char *))
{
  uint64_t v6 = sub_10000588C(&qword_10164B300);
  __chkstk_darwin(v6);
  uint64_t v8 = (char *)v15 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = type metadata accessor for BeaconNamingRecord();
  __chkstk_darwin(v9 - 8);
  id v11 = (void *)((char *)v15 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0));
  sub_100DBEB18(a1, v11);
  uint64_t v12 = QueueSynchronizer.conditionalSync<A>(_:)();
  __chkstk_darwin(v12);
  v15[-2] = v13;
  v15[-1] = v11;
  OS_dispatch_queue.sync<A>(execute:)();
  sub_100A9E7EC(8);
  sub_100B30D0C((uint64_t)v11, (uint64_t)v8, (uint64_t (*)(void))type metadata accessor for BeaconNamingRecord);
  swift_storeEnumTagMultiPayload();
  a4(v8);
  sub_10001DAB4((uint64_t)v8, &qword_10164B300);
  sub_100A9EE98();
  return sub_100B310AC((uint64_t)v11, (uint64_t (*)(void))type metadata accessor for BeaconNamingRecord);
}

uint64_t sub_100ACBF68(void *a1, uint64_t a2, uint64_t a3, void (*a4)(char *))
{
  uint64_t v6 = sub_10000588C(&qword_101648068);
  __chkstk_darwin(v6);
  uint64_t v8 = (char *)v15 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = type metadata accessor for ShareRecord();
  __chkstk_darwin(v9 - 8);
  id v11 = (void *)((char *)v15 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0));
  sub_1000C3DBC(a1, v11);
  __chkstk_darwin(v12);
  v15[-2] = v13;
  v15[-1] = v11;
  OS_dispatch_queue.sync<A>(execute:)();
  sub_100A9E7EC(8);
  sub_100B30D0C((uint64_t)v11, (uint64_t)v8, (uint64_t (*)(void))type metadata accessor for ShareRecord);
  swift_storeEnumTagMultiPayload();
  a4(v8);
  sub_10001DAB4((uint64_t)v8, &qword_101648068);
  sub_100A9EE98();
  return sub_100B310AC((uint64_t)v11, (uint64_t (*)(void))type metadata accessor for ShareRecord);
}

uint64_t sub_100ACC280(void *a1, uint64_t a2, uint64_t a3, void (*a4)(char *))
{
  uint64_t v6 = sub_10000588C(&qword_10164B328);
  __chkstk_darwin(v6);
  uint64_t v8 = (char *)v15 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = type metadata accessor for KeyAlignmentRecord();
  __chkstk_darwin(v9 - 8);
  id v11 = (void *)((char *)v15 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0));
  sub_1000BFAD8(a1, v11);
  __chkstk_darwin(v12);
  v15[-2] = v13;
  v15[-1] = v11;
  OS_dispatch_queue.sync<A>(execute:)();
  sub_100A9E7EC(8);
  sub_100B30D0C((uint64_t)v11, (uint64_t)v8, (uint64_t (*)(void))type metadata accessor for KeyAlignmentRecord);
  swift_storeEnumTagMultiPayload();
  a4(v8);
  sub_10001DAB4((uint64_t)v8, &qword_10164B328);
  sub_100A9EE98();
  return sub_100B310AC((uint64_t)v11, (uint64_t (*)(void))type metadata accessor for KeyAlignmentRecord);
}

uint64_t sub_100ACC598(void *a1, uint64_t a2, uint64_t a3, void (*a4)(char *))
{
  uint64_t v6 = sub_10000588C((uint64_t *)&unk_1016554E0);
  __chkstk_darwin(v6);
  uint64_t v8 = (char *)v15 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = type metadata accessor for LeashRecord();
  __chkstk_darwin(v9 - 8);
  id v11 = (void *)((char *)v15 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0));
  sub_10126128C(a1, v11);
  __chkstk_darwin(v12);
  v15[-2] = v13;
  v15[-1] = v11;
  OS_dispatch_queue.sync<A>(execute:)();
  sub_100A9E7EC(8);
  sub_100B30D0C((uint64_t)v11, (uint64_t)v8, (uint64_t (*)(void))type metadata accessor for LeashRecord);
  swift_storeEnumTagMultiPayload();
  a4(v8);
  sub_10001DAB4((uint64_t)v8, (uint64_t *)&unk_1016554E0);
  sub_100A9EE98();
  return sub_100B310AC((uint64_t)v11, (uint64_t (*)(void))type metadata accessor for LeashRecord);
}

uint64_t sub_100ACC8B0(void *a1, uint64_t a2, uint64_t a3, void (*a4)(char *))
{
  uint64_t v6 = sub_10000588C(&qword_1016554C0);
  __chkstk_darwin(v6);
  uint64_t v8 = (char *)v15 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = type metadata accessor for SafeLocation();
  __chkstk_darwin(v9 - 8);
  id v11 = (void *)((char *)v15 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0));
  sub_100F1047C(a1, v11);
  __chkstk_darwin(v12);
  v15[-2] = v13;
  v15[-1] = v11;
  OS_dispatch_queue.sync<A>(execute:)();
  sub_100A9E7EC(8);
  sub_100B30D0C((uint64_t)v11, (uint64_t)v8, (uint64_t (*)(void))type metadata accessor for SafeLocation);
  swift_storeEnumTagMultiPayload();
  a4(v8);
  sub_10001DAB4((uint64_t)v8, &qword_1016554C0);
  sub_100A9EE98();
  return sub_100B310AC((uint64_t)v11, (uint64_t (*)(void))type metadata accessor for SafeLocation);
}

uint64_t sub_100ACCBC8()
{
  uint64_t v1 = type metadata accessor for DispatchPredicate();
  uint64_t v2 = *(void *)(v1 - 8);
  __chkstk_darwin(v1);
  uint64_t v4 = (uint64_t *)((char *)&v8 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v5 = *(void **)(v0 + 64);
  void *v4 = v5;
  (*(void (**)(void *, void, uint64_t))(v2 + 104))(v4, enum case for DispatchPredicate.onQueue(_:), v1);
  id v6 = v5;
  LOBYTE(v5) = _dispatchPreconditionTest(_:)();
  (*(void (**)(void *, uint64_t))(v2 + 8))(v4, v1);
  if ((v5 & 1) == 0)
  {
    __break(1u);
    goto LABEL_5;
  }
  static os_log_type_t.info.getter();
  if (qword_101637268 != -1) {
LABEL_5:
  }
    swift_once();
  os_log(_:dso:log:_:_:)();
  sub_100AB24F0();
  swift_retain();
  OSAllocatedUnfairLock.callAsFunction<A>(_:)();
  swift_release();
  return swift_release();
}

uint64_t sub_100ACCD98@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v28 = a2;
  uint64_t v3 = type metadata accessor for UUID();
  v27[0] = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  uint64_t v5 = (char *)v27 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = type metadata accessor for SystemInfo.DeviceLockState();
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = __chkstk_darwin(v6);
  uint64_t v10 = (char *)v27 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8);
  uint64_t v12 = (char *)v27 - v11;
  int v29 = static os_log_type_t.info.getter();
  if (qword_101637260 != -1) {
    swift_once();
  }
  sub_10000588C((uint64_t *)&unk_10163AD00);
  uint64_t v13 = swift_allocObject();
  *(_OWORD *)(v13 + 16) = xmmword_101342130;
  void v27[2] = a1;
  uint64_t v14 = UUID.uuidString.getter();
  uint64_t v16 = v15;
  *(void *)(v13 + 56) = &type metadata for String;
  *(void *)(v13 + 64) = sub_10000B4CC();
  *(void *)(v13 + 32) = v14;
  *(void *)(v13 + 40) = v16;
  os_log(_:dso:log:_:_:)();
  swift_bridgeObjectRelease();
  static SystemInfo.lockState.getter();
  (*(void (**)(char *, void, uint64_t))(v7 + 104))(v10, enum case for SystemInfo.DeviceLockState.beforeFirstUnlock(_:), v6);
  sub_100B22DA4((unint64_t *)&qword_1016429C8, (void (*)(uint64_t))&type metadata accessor for SystemInfo.DeviceLockState);
  LOBYTE(v13) = dispatch thunk of static Equatable.== infix(_:_:)();
  uint64_t v17 = *(void (**)(char *, uint64_t))(v7 + 8);
  v17(v10, v6);
  v17(v12, v6);
  if (v13)
  {
    static os_log_type_t.default.getter();
    uint64_t result = os_log(_:dso:log:_:_:)();
    id v19 = (_OWORD *)v28;
    *(void *)(v28 + 32) = 0;
    *id v19 = 0u;
    v19[1] = 0u;
  }
  else
  {
    uint64_t v20 = sub_100AD2AD4();
    uint64_t v21 = *(void *)(v20 + 16);
    if (v21)
    {
      uint64_t v22 = v20 + 32;
      uint64_t v23 = (void (**)(char *, uint64_t))(v27[0] + 8);
      while (1)
      {
        sub_10001D010(v22, (uint64_t)&v30);
        uint64_t v24 = v31;
        uint64_t v25 = v32;
        sub_10001CD44(&v30, v31);
        (*(void (**)(uint64_t))(*(void *)(*(void *)(v25 + 8) + 8) + 32))(v24);
        LOBYTE(v24) = static UUID.== infix(_:_:)();
        (*v23)(v5, v3);
        if (v24) {
          break;
        }
        _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)&v30);
        v22 += 40;
        if (!--v21) {
          goto LABEL_9;
        }
      }
      sub_10001CEB0(&v30, v28);
    }
    else
    {
LABEL_9:
      uint64_t v26 = (_OWORD *)v28;
      *(void *)(v28 + 32) = 0;
      _OWORD *v26 = 0u;
      v26[1] = 0u;
    }
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t sub_100ACD178@<X0>(uint64_t a1@<X8>)
{
  uint64_t v25 = a1;
  uint64_t v1 = type metadata accessor for OwnedBeaconRecord();
  uint64_t v27 = *(void *)(v1 - 8);
  uint64_t v28 = v1;
  __chkstk_darwin(v1);
  uint64_t v3 = (char *)&v24 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = type metadata accessor for SystemInfo.DeviceLockState();
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = __chkstk_darwin(v4);
  uint64_t v8 = (char *)&v24 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  uint64_t v10 = (char *)&v24 - v9;
  int v26 = static os_log_type_t.info.getter();
  if (qword_101637260 != -1) {
    swift_once();
  }
  sub_10000588C((uint64_t *)&unk_10163AD00);
  uint64_t v11 = swift_allocObject();
  *(_OWORD *)(v11 + 16) = xmmword_101342130;
  uint64_t v12 = UUID.uuidString.getter();
  uint64_t v14 = v13;
  *(void *)(v11 + 56) = &type metadata for String;
  *(void *)(v11 + 64) = sub_10000B4CC();
  *(void *)(v11 + 32) = v12;
  *(void *)(v11 + 40) = v14;
  os_log(_:dso:log:_:_:)();
  swift_bridgeObjectRelease();
  static SystemInfo.lockState.getter();
  (*(void (**)(char *, void, uint64_t))(v5 + 104))(v8, enum case for SystemInfo.DeviceLockState.beforeFirstUnlock(_:), v4);
  sub_100B22DA4((unint64_t *)&qword_1016429C8, (void (*)(uint64_t))&type metadata accessor for SystemInfo.DeviceLockState);
  LOBYTE(v12) = dispatch thunk of static Equatable.== infix(_:_:)();
  uint64_t v15 = *(void (**)(char *, uint64_t))(v5 + 8);
  v15(v8, v4);
  v15(v10, v4);
  if (v12)
  {
    static os_log_type_t.default.getter();
    os_log(_:dso:log:_:_:)();
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v27 + 56))(v25, 1, 1, v28);
  }
  else
  {
    uint64_t v17 = sub_100ACF5FC();
    uint64_t v18 = *((void *)v17 + 2);
    uint64_t v20 = v27;
    uint64_t v19 = v28;
    if (v18)
    {
      uint64_t v21 = (uint64_t)&v17[(*(unsigned __int8 *)(v27 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v27 + 80)];
      uint64_t v22 = *(void *)(v27 + 72);
      while (1)
      {
        sub_100B30D0C(v21, (uint64_t)v3, (uint64_t (*)(void))type metadata accessor for OwnedBeaconRecord);
        if (static UUID.== infix(_:_:)()) {
          break;
        }
        sub_100B310AC((uint64_t)v3, (uint64_t (*)(void))type metadata accessor for OwnedBeaconRecord);
        v21 += v22;
        if (!--v18) {
          goto LABEL_9;
        }
      }
      uint64_t v23 = v25;
      sub_100B30DB4((uint64_t)v3, v25, (uint64_t (*)(void))type metadata accessor for OwnedBeaconRecord);
      (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v20 + 56))(v23, 0, 1, v19);
    }
    else
    {
LABEL_9:
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v20 + 56))(v25, 1, 1, v19);
    }
    return swift_bridgeObjectRelease();
  }
}

void *sub_100ACD578(uint64_t a1, unint64_t a2)
{
  uint64_t v3 = v2;
  uint64_t v6 = type metadata accessor for SystemInfo.DeviceLockState();
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = __chkstk_darwin(v6);
  uint64_t v10 = (char *)&v31 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8);
  unint64_t v35 = (char *)&v31 - v11;
  uint64_t v12 = type metadata accessor for String.Encoding();
  __chkstk_darwin(v12 - 8);
  if (qword_101636F50 != -1) {
    swift_once();
  }
  uint64_t v13 = type metadata accessor for Logger();
  uint64_t v14 = sub_100010324(v13, (uint64_t)qword_10170E9E8);
  sub_1000361E0(a1, a2);
  sub_1000361E0(a1, a2);
  uint64_t v34 = v14;
  uint64_t v15 = Logger.logObject.getter();
  os_log_type_t v16 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v15, v16))
  {
    uint64_t v32 = v10;
    uint64_t v17 = (uint8_t *)swift_slowAlloc();
    uint64_t v31 = swift_slowAlloc();
    uint64_t v37 = v31;
    *(_DWORD *)uint64_t v17 = 136315138;
    sub_1000361E0(a1, a2);
    static String.Encoding.utf8.getter();
    uint64_t v18 = String.init(data:encoding:)();
    uint64_t v33 = v3;
    if (!v19) {
      uint64_t v18 = Data.hexString.getter();
    }
    uint64_t v20 = v18;
    unint64_t v21 = v19;
    sub_10001CFB8(a1, a2);
    uint64_t v36 = sub_1008FA0F0(v20, v21, &v37);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    sub_10001CFB8(a1, a2);
    sub_10001CFB8(a1, a2);
    _os_log_impl((void *)&_mh_execute_header, v15, v16, "ownedBeaconGroups(serialNumber: %s", v17, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    uint64_t v10 = v32;
  }
  else
  {
    sub_10001CFB8(a1, a2);
    sub_10001CFB8(a1, a2);
  }
  uint64_t v22 = v35;
  static SystemInfo.lockState.getter();
  (*(void (**)(char *, void, uint64_t))(v7 + 104))(v10, enum case for SystemInfo.DeviceLockState.beforeFirstUnlock(_:), v6);
  sub_100B22DA4((unint64_t *)&qword_1016429C8, (void (*)(uint64_t))&type metadata accessor for SystemInfo.DeviceLockState);
  char v23 = dispatch thunk of static Equatable.== infix(_:_:)();
  uint64_t v24 = *(void (**)(char *, uint64_t))(v7 + 8);
  v24(v10, v6);
  v24(v22, v6);
  if (v23)
  {
    uint64_t v25 = Logger.logObject.getter();
    os_log_type_t v26 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v25, v26))
    {
      uint64_t v27 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v27 = 0;
      _os_log_impl((void *)&_mh_execute_header, v25, v26, "ownedBeaconGroup call failed because in device is in beforeFirstUnlock state", v27, 2u);
      swift_slowDealloc();
    }

    return _swiftEmptyArrayStorage;
  }
  else
  {
    int v29 = sub_100ACF5FC();
    sub_1000361E0(a1, a2);
    uint64_t v28 = sub_100B344E8((uint64_t)v29, a1, a2);
    sub_10001CFB8(a1, a2);
    swift_bridgeObjectRelease();
  }
  return v28;
}

uint64_t sub_100ACD9FC@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v130 = a2;
  uint64_t v115 = type metadata accessor for URL();
  uint64_t v113 = *(void *)(v115 - 8);
  __chkstk_darwin(v115);
  uint64_t v112 = (char *)&v110 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = sub_10000588C((uint64_t *)&unk_101653D30);
  uint64_t v5 = __chkstk_darwin(v4 - 8);
  uint64_t v124 = (char *)&v110 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5);
  uint64_t v139 = (char *)&v110 - v7;
  uint64_t v8 = sub_10000588C(&qword_101638CF0);
  uint64_t v9 = __chkstk_darwin(v8 - 8);
  uint64_t v116 = (uint64_t)&v110 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9);
  uint64_t v12 = (char *)&v110 - v11;
  uint64_t v111 = sub_10000588C((uint64_t *)&unk_101653D50);
  uint64_t v13 = __chkstk_darwin(v111);
  uint64_t v117 = (uint64_t)&v110 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = __chkstk_darwin(v13);
  uint64_t v118 = (uint64_t)&v110 - v16;
  __chkstk_darwin(v15);
  uint64_t v121 = (uint64_t)&v110 - v17;
  uint64_t v143 = type metadata accessor for SharedBeaconRecord(0);
  uint64_t v18 = *(void *)(v143 - 8);
  uint64_t v19 = __chkstk_darwin(v143);
  uint64_t v114 = (uint64_t)&v110 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v21 = __chkstk_darwin(v19);
  char v23 = (char *)&v110 - v22;
  __chkstk_darwin(v21);
  uint64_t v127 = (uint64_t)&v110 - v24;
  uint64_t v138 = (void (**)(void, void, void, void))type metadata accessor for SystemInfo.DeviceLockState();
  uint64_t v136 = (uint64_t)*(v138 - 1);
  uint64_t v25 = __chkstk_darwin(v138);
  uint64_t v129 = (char *)&v110 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v25);
  uint64_t v128 = (void (**)(char *, char *, uint64_t))((char *)&v110 - v27);
  uint64_t v142 = type metadata accessor for UUID();
  uint64_t v28 = *(void *)(v142 - 8);
  uint64_t v29 = __chkstk_darwin(v142);
  unsigned __int8 v125 = (char *)&v110 - ((v30 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v31 = __chkstk_darwin(v29);
  Swift::String v134 = (char *)&v110 - v32;
  uint64_t v33 = __chkstk_darwin(v31);
  uint64_t v140 = (char *)&v110 - v34;
  uint64_t v35 = __chkstk_darwin(v33);
  uint64_t v123 = (char *)&v110 - v36;
  __chkstk_darwin(v35);
  uint64_t v38 = (char *)&v110 - v37;
  v39._uint64_t countAndFlagsBits = 0xD00000000000001ELL;
  v39._object = (void *)0x80000001014141D0;
  prohibitAsyncContext(functionName:)(v39);
  if (qword_101636F50 != -1) {
    swift_once();
  }
  uint64_t v40 = type metadata accessor for Logger();
  uint64_t v41 = sub_100010324(v40, (uint64_t)qword_10170E9E8);
  uint64_t v42 = *(void (**)(char *, void *, uint64_t))(v28 + 16);
  uint64_t v141 = a1;
  uint64_t v132 = v42;
  uint64_t v133 = v28 + 16;
  v42(v38, a1, v142);
  long long v122 = (unsigned int (**)(char *, uint64_t, uint64_t))v41;
  uint64_t v43 = Logger.logObject.getter();
  os_log_type_t v44 = static os_log_type_t.info.getter();
  BOOL v45 = os_log_type_enabled(v43, v44);
  uint64_t v137 = v18;
  uint64_t v131 = v28;
  if (v45)
  {
    uint64_t v46 = swift_slowAlloc();
    uint64_t v145 = swift_slowAlloc();
    *(_DWORD *)uint64_t v46 = 141558275;
    uint64_t v144 = 1752392040;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v46 + 12) = 2081;
    uint64_t v135 = (void (*)(char *, uint64_t))(v46 + 14);
    sub_100B22DA4((unint64_t *)&qword_101638B10, (void (*)(uint64_t))&type metadata accessor for UUID);
    uint64_t v47 = v142;
    uint64_t v48 = dispatch thunk of CustomStringConvertible.description.getter();
    uint64_t v144 = sub_1008FA0F0(v48, v49, &v145);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    uint64_t v135 = *(void (**)(char *, uint64_t))(v131 + 8);
    v135(v38, v47);
    _os_log_impl((void *)&_mh_execute_header, v43, v44, "legacySharedBeaconRecord(for uuid: %{private,mask.hash}s", (uint8_t *)v46, 0x16u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    uint64_t v135 = *(void (**)(char *, uint64_t))(v28 + 8);
    v135(v38, v142);
  }

  uint64_t v50 = v140;
  uint64_t v51 = v128;
  static SystemInfo.lockState.getter();
  uint64_t v52 = v136;
  unint64_t v53 = v129;
  unint64_t v54 = v138;
  (*(void (**)(char *, void, void (**)(void, void, void, void)))(v136 + 104))(v129, enum case for SystemInfo.DeviceLockState.beforeFirstUnlock(_:), v138);
  sub_100B22DA4((unint64_t *)&qword_1016429C8, (void (*)(uint64_t))&type metadata accessor for SystemInfo.DeviceLockState);
  char v55 = dispatch thunk of static Equatable.== infix(_:_:)();
  uint64_t v56 = *(void (**)(void, void))(v52 + 8);
  v56(v53, v54);
  v56(v51, v54);
  uint64_t v57 = v143;
  if (v55)
  {
    uint64_t v58 = Logger.logObject.getter();
    os_log_type_t v59 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v58, v59))
    {
      uint64_t v60 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v60 = 0;
      _os_log_impl((void *)&_mh_execute_header, v58, v59, "legacySharedBeaconRecord call failed because in device is in beforeFirstUnlock state", v60, 2u);
      swift_slowDealloc();
    }

    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v137 + 56))(v130, 1, 1, v57);
  }
  uint64_t v119 = sub_100AD0D68();
  uint64_t v62 = *((void *)v119 + 2);
  uint64_t v63 = v123;
  uint64_t v64 = (uint64_t)v139;
  if (!v62)
  {
LABEL_20:
    uint64_t v79 = v137;
    os_log_type_t v80 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v137 + 56);
    uint64_t v81 = v121;
    v80(v121, 1, 1, v57);
    goto LABEL_23;
  }
  uint64_t v65 = (uint64_t)&v119[(*(unsigned __int8 *)(v137 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v137 + 80)];
  uint64_t v66 = (unsigned int (**)(char *, uint64_t, uint64_t))(v131 + 48);
  uint64_t v128 = (void (**)(char *, char *, uint64_t))(v131 + 32);
  uint64_t v129 = (char *)(v131 + 8);
  uint64_t v138 = (void (**)(void, void, void, void))(v131 + 56);
  uint64_t v140 = *(char **)(v137 + 72);
  id v120 = v23;
  long long v122 = (unsigned int (**)(char *, uint64_t, uint64_t))(v131 + 48);
  while (1)
  {
    sub_100B30D0C(v65, (uint64_t)v23, type metadata accessor for SharedBeaconRecord);
    sub_10001D074((uint64_t)&v23[*(int *)(v57 + 80)], v64, (uint64_t *)&unk_101653D30);
    uint64_t v67 = type metadata accessor for SharedBeaconRecord.PropertyListContent(0);
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v67 - 8) + 48))(v64, 1, v67) == 1)
    {
      sub_10001DAB4(v64, (uint64_t *)&unk_101653D30);
      (*v138)(v12, 1, 1, v142);
LABEL_13:
      sub_10001DAB4((uint64_t)v12, &qword_101638CF0);
      if (static UUID.== infix(_:_:)()) {
        goto LABEL_22;
      }
      goto LABEL_14;
    }
    sub_10001D074(v64 + *(int *)(v67 + 20), (uint64_t)v12, &qword_101638CF0);
    sub_100B310AC(v64, type metadata accessor for SharedBeaconRecord.PropertyListContent);
    if ((*v66)(v12, 1, v142) == 1) {
      goto LABEL_13;
    }
    uint64_t v68 = v12;
    uint64_t v69 = v12;
    uint64_t v70 = v142;
    (*v128)(v63, v69, v142);
    uint64_t v71 = v141;
    LODWORD(v136) = static UUID.== infix(_:_:)();
    uint64_t v72 = v132;
    v132(v50, v63, v70);
    uint64_t v73 = v63;
    uint64_t v74 = v50;
    uint64_t v75 = v134;
    v72(v134, v71, v70);
    if (v136) {
      break;
    }
    char v76 = static UUID.== infix(_:_:)();
    uint64_t v77 = v142;
    uint64_t v78 = v135;
    v135(v75, v142);
    v78(v74, v77);
    v78(v73, v77);
    uint64_t v12 = v68;
    uint64_t v50 = v74;
    uint64_t v63 = v73;
    uint64_t v64 = (uint64_t)v139;
    char v23 = v120;
    uint64_t v66 = v122;
    if (v76) {
      goto LABEL_22;
    }
LABEL_14:
    sub_100B310AC((uint64_t)v23, type metadata accessor for SharedBeaconRecord);
    v65 += (uint64_t)v140;
    --v62;
    uint64_t v57 = v143;
    if (!v62) {
      goto LABEL_20;
    }
  }
  uint64_t v82 = v142;
  uint64_t v83 = v135;
  v135(v75, v142);
  v83(v74, v82);
  v83(v73, v82);
  char v23 = v120;
LABEL_22:
  uint64_t v81 = v121;
  sub_100B30DB4((uint64_t)v23, v121, type metadata accessor for SharedBeaconRecord);
  uint64_t v79 = v137;
  os_log_type_t v80 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v137 + 56);
  uint64_t v57 = v143;
  v80(v81, 0, 1, v143);
LABEL_23:
  swift_bridgeObjectRelease();
  uint64_t v84 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v79 + 48);
  int v85 = v84(v81, 1, v57);
  uint64_t v86 = v127;
  uint64_t v87 = (uint64_t)v124;
  uint64_t v88 = v125;
  if (v85 == 1)
  {
    uint64_t v89 = v81;
    goto LABEL_37;
  }
  sub_100B30DB4(v81, v127, type metadata accessor for SharedBeaconRecord);
  sub_10001D074(v86 + *(int *)(v57 + 80), v87, (uint64_t *)&unk_101653D30);
  uint64_t v90 = type metadata accessor for SharedBeaconRecord.PropertyListContent(0);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v90 - 8) + 48))(v87, 1, v90) == 1)
  {
    sub_10001DAB4(v87, (uint64_t *)&unk_101653D30);
    uint64_t v91 = v116;
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v131 + 56))(v116, 1, 1, v142);
    goto LABEL_28;
  }
  uint64_t v92 = v87 + *(int *)(v90 + 20);
  uint64_t v91 = v116;
  sub_10001D074(v92, v116, &qword_101638CF0);
  sub_100B310AC(v87, type metadata accessor for SharedBeaconRecord.PropertyListContent);
  uint64_t v93 = v131;
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v131 + 48))(v91, 1, v142) == 1)
  {
LABEL_28:
    sub_10001DAB4(v91, &qword_101638CF0);
    uint64_t v94 = v118;
    sub_100B30D0C(v86, v118, type metadata accessor for SharedBeaconRecord);
    v80(v94, 0, 1, v57);
  }
  else
  {
    (*(void (**)(char *, uint64_t, uint64_t))(v93 + 32))(v88, v91, v142);
    uint64_t v95 = *(void *)(v126 + 160);
    if (qword_1016375F0 != -1) {
      swift_once();
    }
    uint64_t v96 = v115;
    uint64_t v97 = sub_100010324(v115, (uint64_t)qword_10170F760);
    uint64_t v98 = v113;
    uint64_t v99 = v112;
    (*(void (**)(char *, uint64_t, uint64_t))(v113 + 16))(v112, v97, v96);
    v100._object = (void *)0x8000000101402BA0;
    v100._uint64_t countAndFlagsBits = 0xD000000000000014;
    prohibitAsyncContext(functionName:)(v100);
    uint64_t v145 = v57;
    sub_10000588C(&qword_101660D90);
    uint64_t v101 = String.init<A>(describing:)();
    uint64_t v103 = v102;
    uint64_t v140 = (char *)&v110;
    uint64_t v141 = v104;
    __chkstk_darwin(v104);
    uint64_t v105 = v125;
    *(&v110 - 6) = v95;
    *(&v110 - 5) = (uint64_t)v105;
    *(&v110 - 4) = (uint64_t)v99;
    *(&v110 - 3) = v101;
    *(&v110 - 2) = v103;
    uint64_t v106 = v118;
    OS_dispatch_queue.sync<A>(execute:)();
    uint64_t v57 = v143;
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v98 + 8))(v99, v115);
    uint64_t v94 = v106;
    v135(v105, v142);
    uint64_t v86 = v127;
  }
  uint64_t v107 = v117;
  sub_10001D074(v94, v117, (uint64_t *)&unk_101653D50);
  if (v84(v107, 1, v57) == 1)
  {
    sub_100B310AC(v86, type metadata accessor for SharedBeaconRecord);
    sub_10001DAB4(v107, (uint64_t *)&unk_101653D50);
    return sub_10001D608(v94, v130, (uint64_t *)&unk_101653D50);
  }
  uint64_t v108 = v114;
  sub_100B30DB4(v107, v114, type metadata accessor for SharedBeaconRecord);
  int v109 = *(unsigned __int8 *)(v108 + *(int *)(v57 + 64));
  sub_100B310AC(v108, type metadata accessor for SharedBeaconRecord);
  sub_100B310AC(v86, type metadata accessor for SharedBeaconRecord);
  if (v109 == 1) {
    return sub_10001D608(v94, v130, (uint64_t *)&unk_101653D50);
  }
  uint64_t v89 = v94;
LABEL_37:
  sub_10001DAB4(v89, (uint64_t *)&unk_101653D50);
  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))v80)(v130, 1, 1, v57);
}

uint64_t sub_100ACEADC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v41 = a2;
  uint64_t v3 = type metadata accessor for SharedBeaconRecord(0);
  uint64_t v46 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  uint64_t v5 = (char *)v38 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = type metadata accessor for SystemInfo.DeviceLockState();
  uint64_t v44 = *(void *)(v6 - 8);
  uint64_t v7 = __chkstk_darwin(v6);
  uint64_t v43 = (char *)v38 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v7);
  uint64_t v42 = (char *)v38 - v9;
  uint64_t v10 = type metadata accessor for UUID();
  uint64_t v11 = *(void *)(v10 - 8);
  __chkstk_darwin(v10);
  uint64_t v13 = (char *)v38 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_101636F50 != -1) {
    swift_once();
  }
  uint64_t v14 = type metadata accessor for Logger();
  uint64_t v15 = sub_100010324(v14, (uint64_t)qword_10170E9E8);
  uint64_t v16 = *(void (**)(char *, uint64_t, uint64_t))(v11 + 16);
  uint64_t v45 = a1;
  v16(v13, a1, v10);
  uint64_t v40 = v15;
  uint64_t v17 = Logger.logObject.getter();
  os_log_type_t v18 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v17, v18))
  {
    uint64_t v19 = swift_slowAlloc();
    uint64_t v20 = swift_slowAlloc();
    _OWORD v38[2] = v20;
    *(_DWORD *)uint64_t v19 = 141558275;
    uint64_t v47 = 1752392040;
    uint64_t v48 = v20;
    uint64_t v39 = v3;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v19 + 12) = 2081;
    v38[1] = v19 + 14;
    sub_100B22DA4((unint64_t *)&qword_101638B10, (void (*)(uint64_t))&type metadata accessor for UUID);
    uint64_t v21 = dispatch thunk of CustomStringConvertible.description.getter();
    uint64_t v47 = sub_1008FA0F0(v21, v22, &v48);
    uint64_t v3 = v39;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v11 + 8))(v13, v10);
    _os_log_impl((void *)&_mh_execute_header, v17, v18, "sharedBeaconRecord(for uuid: %{private,mask.hash}s", (uint8_t *)v19, 0x16u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    (*(void (**)(char *, uint64_t))(v11 + 8))(v13, v10);
  }

  char v23 = v42;
  static SystemInfo.lockState.getter();
  uint64_t v25 = v43;
  uint64_t v24 = v44;
  (*(void (**)(char *, void, uint64_t))(v44 + 104))(v43, enum case for SystemInfo.DeviceLockState.beforeFirstUnlock(_:), v6);
  sub_100B22DA4((unint64_t *)&qword_1016429C8, (void (*)(uint64_t))&type metadata accessor for SystemInfo.DeviceLockState);
  char v26 = dispatch thunk of static Equatable.== infix(_:_:)();
  uint64_t v27 = *(void (**)(char *, uint64_t))(v24 + 8);
  v27(v25, v6);
  v27(v23, v6);
  uint64_t v28 = v46;
  if (v26)
  {
    uint64_t v29 = Logger.logObject.getter();
    os_log_type_t v30 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v29, v30))
    {
      uint64_t v31 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v31 = 0;
      _os_log_impl((void *)&_mh_execute_header, v29, v30, "sharedBeaconRecord call failed because in device is in beforeFirstUnlock state", v31, 2u);
      swift_slowDealloc();
    }

    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v28 + 56))(v41, 1, 1, v3);
  }
  else
  {
    uint64_t v33 = sub_100AD0D68();
    uint64_t v34 = *((void *)v33 + 2);
    if (v34)
    {
      uint64_t v35 = (uint64_t)&v33[(*(unsigned __int8 *)(v28 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v28 + 80)];
      uint64_t v36 = *(void *)(v28 + 72);
      while (1)
      {
        sub_100B30D0C(v35, (uint64_t)v5, type metadata accessor for SharedBeaconRecord);
        if (static UUID.== infix(_:_:)()) {
          break;
        }
        sub_100B310AC((uint64_t)v5, type metadata accessor for SharedBeaconRecord);
        v35 += v36;
        if (!--v34) {
          goto LABEL_14;
        }
      }
      uint64_t v37 = v41;
      sub_100B30DB4((uint64_t)v5, v41, type metadata accessor for SharedBeaconRecord);
      (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v28 + 56))(v37, 0, 1, v3);
    }
    else
    {
LABEL_14:
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v28 + 56))(v41, 1, 1, v3);
    }
    return swift_bridgeObjectRelease();
  }
}

void *sub_100ACF0EC()
{
  uint64_t v0 = sub_10000588C(&qword_1016429D0);
  __chkstk_darwin(v0 - 8);
  uint64_t v2 = (uint64_t *)((char *)v12 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v3 = type metadata accessor for StableIdentifier();
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  uint64_t v6 = (void **)((char *)v12 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0));
  sub_100F2BD18(v2);
  if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v4 + 48))(v2, 1, v3) == 1)
  {
    sub_10001DAB4((uint64_t)v2, &qword_1016429D0);
    static os_log_type_t.error.getter();
    if (qword_101637250 != -1) {
      swift_once();
    }
    uint64_t v7 = _swiftEmptyArrayStorage;
    os_log(_:dso:log:_:_:)();
  }
  else
  {
    sub_100B30DB4((uint64_t)v2, (uint64_t)v6, (uint64_t (*)(void))type metadata accessor for StableIdentifier);
    uint64_t v9 = sub_100ACF5FC();
    __chkstk_darwin(v9);
    v12[-2] = v6;
    v12[0] = (void *)sub_1000A42E4((uint64_t (*)(char *))sub_100B5E2D0, &v12[-4], v10);
    swift_bridgeObjectRetain();
    sub_100AA8594(v12);
    swift_bridgeObjectRelease();
    uint64_t v7 = v12[0];
    sub_100B310AC((uint64_t)v6, (uint64_t (*)(void))type metadata accessor for StableIdentifier);
  }
  return v7;
}

void *sub_100ACF35C()
{
  uint64_t v0 = type metadata accessor for StableIdentifier();
  __chkstk_darwin(v0);
  uint64_t v2 = (uint64_t *)((char *)v20 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0));
  id v3 = [objc_allocWithZone((Class)ACAccountStore) init];
  id v4 = [v3 aa_primaryAppleAccount];

  if (!v4) {
    goto LABEL_8;
  }
  id v5 = [v4 aa_altDSID];
  if (v5)
  {
    uint64_t v6 = v5;
    uint64_t v7 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    unint64_t v9 = v8;

    uint64_t v10 = HIBYTE(v9) & 0xF;
    if ((v9 & 0x2000000000000000) == 0) {
      uint64_t v10 = v7 & 0xFFFFFFFFFFFFLL;
    }
    if (v10)
    {
      *uint64_t v2 = v7;
      v2[1] = v9;
      swift_storeEnumTagMultiPayload();
      uint64_t v12 = sub_100ACF5FC();
      __chkstk_darwin(v12);
      v20[-2] = v2;
      v20[0] = (void *)sub_1000A42E4((uint64_t (*)(char *))sub_100B5E2D0, &v20[-4], v13);
      swift_bridgeObjectRetain();
      sub_100AA8594(v20);
      swift_bridgeObjectRelease();
      uint64_t v14 = v20[0];

      sub_100B310AC((uint64_t)v2, (uint64_t (*)(void))type metadata accessor for StableIdentifier);
      return v14;
    }

    swift_bridgeObjectRelease();
LABEL_8:
    if (qword_101637070 != -1) {
      swift_once();
    }
    uint64_t v15 = type metadata accessor for Logger();
    sub_100010324(v15, (uint64_t)qword_10170EC30);
    uint64_t v16 = Logger.logObject.getter();
    os_log_type_t v17 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v16, v17))
    {
      os_log_type_t v18 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)os_log_type_t v18 = 0;
      _os_log_impl((void *)&_mh_execute_header, v16, v17, "Could not obtain aa_primaryAppleAccount!", v18, 2u);
      swift_slowDealloc();
    }

    return _swiftEmptyArrayStorage;
  }
  __break(1u);
  uint64_t result = (void *)swift_release();
  __break(1u);
  return result;
}

char *sub_100ACF5FC()
{
  uint64_t v1 = v0;
  uint64_t v2 = sub_10000588C((uint64_t *)&unk_101653C90);
  __chkstk_darwin(v2 - 8);
  uint64_t v61 = (char *)&v52 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v67 = sub_10000588C(&qword_101660DC0);
  uint64_t v64 = *(void *)(v67 - 8);
  uint64_t v4 = __chkstk_darwin(v67);
  os_log_type_t v59 = (char *)&v52 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v4);
  uint64_t v60 = (uint64_t)&v52 - v6;
  uint64_t v63 = type metadata accessor for URL();
  uint64_t v66 = *(void *)(v63 - 8);
  uint64_t v7 = __chkstk_darwin(v63);
  uint64_t v58 = (char *)&v52 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = __chkstk_darwin(v7);
  uint64_t v11 = (char *)&v52 - v10;
  __chkstk_darwin(v9);
  uint64_t v65 = (char *)&v52 - v12;
  uint64_t v13 = sub_10000588C(&qword_101659498);
  uint64_t v14 = __chkstk_darwin(v13 - 8);
  uint64_t v16 = (char *)&v52 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v14);
  uint64_t v62 = (uint64_t)&v52 - v17;
  uint64_t v18 = type metadata accessor for SystemInfo.DeviceLockState();
  uint64_t v19 = *(void *)(v18 - 8);
  uint64_t v20 = __chkstk_darwin(v18);
  unint64_t v22 = (char *)&v52 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v20);
  uint64_t v24 = (char *)&v52 - v23;
  v25._object = (void *)0x80000001014140C0;
  v25._uint64_t countAndFlagsBits = 0xD000000000000012;
  prohibitAsyncContext(functionName:)(v25);
  static SystemInfo.lockState.getter();
  (*(void (**)(char *, void, uint64_t))(v19 + 104))(v22, enum case for SystemInfo.DeviceLockState.beforeFirstUnlock(_:), v18);
  sub_100B22DA4((unint64_t *)&unk_101655610, (void (*)(uint64_t))&type metadata accessor for SystemInfo.DeviceLockState);
  dispatch thunk of RawRepresentable.rawValue.getter();
  dispatch thunk of RawRepresentable.rawValue.getter();
  uint64_t v27 = v68;
  char v26 = v69;
  uint64_t v28 = *(void (**)(char *, uint64_t))(v19 + 8);
  v28(v22, v18);
  v28(v24, v18);
  if (v26 == v27)
  {
    static os_log_type_t.default.getter();
    if (qword_101637260 != -1) {
      swift_once();
    }
    uint64_t v29 = (char *)_swiftEmptyArrayStorage;
    os_log(_:dso:log:_:_:)();
  }
  else
  {
    uint64_t v30 = *(void *)(v1 + OBJC_IVAR____TtC12searchpartyd11BeaconStore_cachedBeaconRecordsQueueSynchronizer);
    sub_10000588C(&qword_1016594A0);
    QueueSynchronizer.conditionalSync<A>(_:)();
    uint64_t v29 = (char *)v69;
    if (!v69)
    {
      uint64_t v52 = v16;
      uint64_t v56 = 0;
      uint64_t v57 = v30;
      uint64_t v54 = *(void *)(v1 + 160);
      uint64_t v55 = v1;
      if (qword_1016370B0 != -1) {
        swift_once();
      }
      uint64_t v31 = v63;
      uint64_t v32 = sub_100010324(v63, (uint64_t)qword_10170ECC0);
      uint64_t v33 = v65;
      uint64_t v34 = *(void (**)(char *, uint64_t, uint64_t))(v66 + 16);
      v34(v65, v32, v31);
      v34(v11, (uint64_t)v33, v31);
      uint64_t v35 = v67;
      uint64_t v36 = (uint64_t)v59;
      unint64_t v53 = &v59[*(int *)(v67 + 40)];
      uint64_t v37 = (uint64_t)v53;
      uint64_t v38 = type metadata accessor for DirectorySequence();
      uint64_t v39 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v38 - 8) + 56);
      v39(v37, 1, 1, v38);
      v34((char *)v36, (uint64_t)v11, v31);
      *(void *)(v36 + *(int *)(v35 + 36)) = v54;
      v34(v58, (uint64_t)v11, v31);
      swift_retain();
      uint64_t v40 = (uint64_t)v61;
      DirectorySequence.init(at:includingPropertiesForKeys:options:)();
      uint64_t v41 = *(void (**)(char *, uint64_t))(v66 + 8);
      uint64_t v42 = v31;
      v41(v11, v31);
      v39(v40, 0, 1, v38);
      sub_100062604(v40, (uint64_t)v53, (uint64_t *)&unk_101653C90);
      uint64_t v43 = v60;
      sub_10001D608(v36, v60, &qword_101660DC0);
      uint64_t v44 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v64 + 56);
      uint64_t v45 = (uint64_t)v52;
      uint64_t v46 = v67;
      v44(v52, 1, 1, v67);
      sub_10001DAB4(v45, &qword_1016594A8);
      sub_10001D608(v43, v45, &qword_101660DC0);
      v44((char *)v45, 0, 1, v46);
      uint64_t v47 = v62;
      sub_10001D608(v45, v62, &qword_101659498);
      v41(v65, v42);
      sub_10001D074(v47, v45, &qword_101659498);
      uint64_t v48 = v55;
      swift_retain();
      sub_100B2FAB4(v45, v48);
      uint64_t v29 = v49;
      uint64_t v50 = swift_release();
      __chkstk_darwin(v50);
      *(&v52 - 2) = (char *)v48;
      *(&v52 - 1) = v29;
      QueueSynchronizer.conditionalSync<A>(_:)();
      sub_10001DAB4(v47, &qword_101659498);
    }
  }
  return v29;
}

uint64_t sub_100ACFD84(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_10000588C(&qword_10163B9E0);
  __chkstk_darwin(v4);
  uint64_t v6 = (char *)&v18 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for OwnedBeaconRecord();
  uint64_t v8 = sub_10111198C();
  if ((v8 & 1) == 0) {
    return 1;
  }
  uint64_t v9 = a1 + *(int *)(v7 + 20);
  __chkstk_darwin(v8);
  *(&v18 - 2) = a2;
  *(&v18 - 1) = v9;
  QueueSynchronizer.conditionalSync<A>(_:)();
  uint64_t v10 = type metadata accessor for BeaconNamingRecord();
  uint64_t v11 = 1;
  int v12 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(void *)(v10 - 8) + 48))(v6, 1, v10);
  sub_10001DAB4((uint64_t)v6, &qword_10163B9E0);
  if (v12 == 1)
  {
    static os_log_type_t.info.getter();
    if (qword_101637260 != -1) {
      swift_once();
    }
    sub_10000588C((uint64_t *)&unk_10163AD00);
    uint64_t v13 = swift_allocObject();
    *(_OWORD *)(v13 + 16) = xmmword_101342130;
    uint64_t v14 = UUID.uuidString.getter();
    uint64_t v16 = v15;
    *(void *)(v13 + 56) = &type metadata for String;
    *(void *)(v13 + 64) = sub_10000B4CC();
    *(void *)(v13 + 32) = v14;
    *(void *)(v13 + 40) = v16;
    os_log(_:dso:log:_:_:)();
    swift_bridgeObjectRelease();
    return 0;
  }
  return v11;
}

void *sub_100ACFFCC()
{
  uint64_t v0 = sub_10000588C(&qword_10163B9F0);
  __chkstk_darwin(v0 - 8);
  uint64_t v96 = (char *)&v82 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v104 = type metadata accessor for OwnedBeaconRecord();
  uint64_t v100 = *(void *)(v104 - 8);
  uint64_t v2 = __chkstk_darwin(v104);
  uint64_t v103 = (uint64_t)&v82 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v2);
  uint64_t v102 = (uint64_t)&v82 - v4;
  uint64_t v105 = type metadata accessor for OwnerSharingCircle();
  uint64_t v85 = *(void *)(v105 - 8);
  uint64_t v5 = __chkstk_darwin(v105);
  uint64_t v86 = (char *)&v82 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5);
  uint64_t v99 = (uint64_t)&v82 - v7;
  uint64_t v8 = sub_10000588C((uint64_t *)&unk_101653C90);
  __chkstk_darwin(v8 - 8);
  uint64_t v92 = (char *)&v82 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v101 = sub_10000588C(&qword_101645750);
  uint64_t v93 = *(char **)(v101 - 8);
  uint64_t v10 = __chkstk_darwin(v101);
  uint64_t v90 = (char *)&v82 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v10);
  uint64_t v91 = (uint64_t)&v82 - v12;
  uint64_t v13 = type metadata accessor for URL();
  *(void *)&long long v94 = *(void *)(v13 - 8);
  uint64_t v14 = __chkstk_darwin(v13);
  uint64_t v87 = (char *)&v82 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = __chkstk_darwin(v14);
  uint64_t v18 = (char *)&v82 - v17;
  __chkstk_darwin(v16);
  uint64_t v20 = (char *)&v82 - v19;
  uint64_t v21 = sub_10000588C((uint64_t *)&unk_101653CA0);
  uint64_t v22 = __chkstk_darwin(v21 - 8);
  uint64_t v88 = (char *)&v82 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v22);
  uint64_t v89 = (uint64_t)&v82 - v24;
  uint64_t v25 = sub_10000588C(&qword_101638CF0);
  __chkstk_darwin(v25 - 8);
  uint64_t v98 = (char *)&v82 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v27 = type metadata accessor for SystemInfo.DeviceLockState();
  uint64_t v28 = *(void *)(v27 - 8);
  uint64_t v29 = __chkstk_darwin(v27);
  uint64_t v31 = (char *)&v82 - ((v30 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v29);
  uint64_t v33 = (char *)&v82 - v32;
  v34._object = (void *)0x80000001014140A0;
  v34._uint64_t countAndFlagsBits = 0xD00000000000001BLL;
  prohibitAsyncContext(functionName:)(v34);
  static SystemInfo.lockState.getter();
  (*(void (**)(char *, void, uint64_t))(v28 + 104))(v31, enum case for SystemInfo.DeviceLockState.beforeFirstUnlock(_:), v27);
  sub_100B22DA4((unint64_t *)&unk_101655610, (void (*)(uint64_t))&type metadata accessor for SystemInfo.DeviceLockState);
  dispatch thunk of RawRepresentable.rawValue.getter();
  dispatch thunk of RawRepresentable.rawValue.getter();
  uint64_t v36 = v106;
  uint64_t v35 = v107;
  uint64_t v37 = *(void (**)(char *, uint64_t))(v28 + 8);
  v37(v31, v27);
  v37(v33, v27);
  if (v35 == v36)
  {
    if (qword_101636F50 != -1) {
      swift_once();
    }
    uint64_t v38 = type metadata accessor for Logger();
    sub_100010324(v38, (uint64_t)qword_10170E9E8);
    uint64_t v39 = Logger.logObject.getter();
    os_log_type_t v40 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v39, v40))
    {
      uint64_t v41 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v41 = 0;
      _os_log_impl((void *)&_mh_execute_header, v39, v40, "ownedDelegatedBeaconRecords call failed because device is in beforeFirstUnlock state", v41, 2u);
      swift_slowDealloc();
    }

    return _swiftEmptyArrayStorage;
  }
  uint64_t v42 = type metadata accessor for UUID();
  uint64_t v43 = *(void (**)(char *, uint64_t, uint64_t))(*(void *)(v42 - 8) + 56);
  uint64_t v95 = v42;
  v43(v98, 1, 1);
  uint64_t v83 = *(void *)(v97 + 160);
  if (qword_1016370F0 != -1) {
    swift_once();
  }
  uint64_t v44 = sub_100010324(v13, (uint64_t)qword_10170ED28);
  uint64_t v45 = *(void (**)(char *, uint64_t, uint64_t))(v94 + 16);
  uint64_t v84 = v20;
  v45(v20, v44, v13);
  uint64_t v46 = v18;
  v45(v18, (uint64_t)v20, v13);
  uint64_t v47 = v101;
  uint64_t v48 = (uint64_t)v90;
  uint64_t v82 = &v90[*(int *)(v101 + 40)];
  uint64_t v49 = (uint64_t)v82;
  uint64_t v50 = type metadata accessor for DirectorySequence();
  uint64_t v51 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v50 - 8) + 56);
  v51(v49, 1, 1, v50);
  v45((char *)v48, (uint64_t)v46, v13);
  *(void *)(v48 + *(int *)(v47 + 36)) = v83;
  v45(v87, (uint64_t)v46, v13);
  swift_retain();
  uint64_t v52 = (uint64_t)v92;
  DirectorySequence.init(at:includingPropertiesForKeys:options:)();
  unint64_t v53 = *(void (**)(char *, uint64_t))(v94 + 8);
  v53(v46, v13);
  v51(v52, 0, 1, v50);
  sub_100062604(v52, (uint64_t)v82, (uint64_t *)&unk_101653C90);
  uint64_t v54 = v91;
  sub_10001D608(v48, v91, &qword_101645750);
  uint64_t v55 = (void (*)(char *, uint64_t, uint64_t, uint64_t))*((void *)v93 + 7);
  uint64_t v56 = (uint64_t)v88;
  uint64_t v57 = v101;
  v55(v88, 1, 1, v101);
  sub_10001DAB4(v56, &qword_101645758);
  sub_10001D608(v54, v56, &qword_101645750);
  v55((char *)v56, 0, 1, v57);
  sub_10001D608(v56, v89, (uint64_t *)&unk_101653CA0);
  uint64_t v58 = ((uint64_t (*)(char *, uint64_t))v53)(v84, v13);
  __chkstk_darwin(v58);
  uint64_t v59 = (uint64_t)v98;
  *(&v82 - 2) = v98;
  *((unsigned char *)&v82 - 8) = 1;
  sub_100658408(sub_100B5E240, (uint64_t)(&v82 - 4));
  uint64_t v61 = v60;
  sub_10001DAB4(v59, &qword_101638CF0);
  uint64_t v63 = *((void *)v61 + 2);
  if (!v63)
  {
    swift_bridgeObjectRelease();
    return _swiftEmptyArrayStorage;
  }
  uint64_t v64 = *(unsigned __int8 *)(v85 + 80);
  uint64_t v92 = v61;
  uint64_t v65 = (uint64_t)&v61[(v64 + 32) & ~v64];
  uint64_t v66 = *(char **)(v85 + 72);
  uint64_t v67 = v99;
  uint64_t v101 = v100 + 48;
  uint64_t v68 = _swiftEmptyArrayStorage;
  *(void *)&long long v62 = 136315138;
  long long v94 = v62;
  uint64_t v93 = (char *)&type metadata for Any + 8;
  uint64_t v69 = (uint64_t)v96;
  uint64_t v70 = (uint64_t)v86;
  uint64_t v98 = v66;
  do
  {
    sub_100B30D0C(v65, v67, (uint64_t (*)(void))type metadata accessor for OwnerSharingCircle);
    sub_100ACD178(v69);
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))v101)(v69, 1, v104) == 1)
    {
      sub_10001DAB4(v69, &qword_10163B9F0);
      if (qword_101636B18 != -1) {
        swift_once();
      }
      uint64_t v71 = type metadata accessor for Logger();
      sub_100010324(v71, (uint64_t)qword_10170DED0);
      sub_100B30D0C(v67, v70, (uint64_t (*)(void))type metadata accessor for OwnerSharingCircle);
      uint64_t v72 = Logger.logObject.getter();
      uint64_t v73 = v70;
      os_log_type_t v74 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v72, v74))
      {
        uint64_t v75 = swift_slowAlloc();
        uint64_t v107 = swift_slowAlloc();
        *(_DWORD *)uint64_t v75 = v94;
        sub_100B22DA4((unint64_t *)&qword_101638B10, (void (*)(uint64_t))&type metadata accessor for UUID);
        uint64_t v76 = dispatch thunk of CustomStringConvertible.description.getter();
        *(void *)(v75 + 4) = sub_1008FA0F0(v76, v77, &v107);
        swift_bridgeObjectRelease();
        sub_100B310AC(v73, (uint64_t (*)(void))type metadata accessor for OwnerSharingCircle);
        _os_log_impl((void *)&_mh_execute_header, v72, v74, "Owned beacon record not found for delegated beacon identifier %s", (uint8_t *)v75, 0xCu);
        swift_arrayDestroy();
        uint64_t v69 = (uint64_t)v96;
        swift_slowDealloc();
        swift_slowDealloc();
      }
      else
      {

        sub_100B310AC(v73, (uint64_t (*)(void))type metadata accessor for OwnerSharingCircle);
      }
      sub_100B310AC(v67, (uint64_t (*)(void))type metadata accessor for OwnerSharingCircle);
      uint64_t v70 = v73;
      uint64_t v66 = v98;
    }
    else
    {
      uint64_t v78 = v102;
      sub_100B30DB4(v69, v102, (uint64_t (*)(void))type metadata accessor for OwnedBeaconRecord);
      sub_100B30D0C(v78, v103, (uint64_t (*)(void))type metadata accessor for OwnedBeaconRecord);
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
        uint64_t v68 = (void *)sub_100A6F6C4(0, v68[2] + 1, 1, (unint64_t)v68);
      }
      unint64_t v80 = v68[2];
      unint64_t v79 = v68[3];
      if (v80 >= v79 >> 1) {
        uint64_t v68 = (void *)sub_100A6F6C4(v79 > 1, v80 + 1, 1, (unint64_t)v68);
      }
      v68[2] = v80 + 1;
      sub_100B30DB4(v103, (uint64_t)v68+ ((*(unsigned __int8 *)(v100 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v100 + 80))+ *(void *)(v100 + 72) * v80, (uint64_t (*)(void))type metadata accessor for OwnedBeaconRecord);
      sub_100B310AC(v102, (uint64_t (*)(void))type metadata accessor for OwnedBeaconRecord);
      uint64_t v67 = v99;
      sub_100B310AC(v99, (uint64_t (*)(void))type metadata accessor for OwnerSharingCircle);
    }
    v65 += (uint64_t)v66;
    --v63;
  }
  while (v63);
  swift_bridgeObjectRelease();
  return v68;
}

char *sub_100AD0D68()
{
  uint64_t v1 = v0;
  uint64_t v2 = sub_10000588C(&qword_10164DBB0);
  __chkstk_darwin(v2 - 8);
  unint64_t v80 = (char *)&v66 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = sub_10000588C((uint64_t *)&unk_101653C90);
  __chkstk_darwin(v4 - 8);
  unint64_t v77 = (char *)&v66 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v83 = sub_10000588C((uint64_t *)&unk_101660DB0);
  uint64_t v79 = *(void *)(v83 - 8);
  uint64_t v6 = __chkstk_darwin(v83);
  uint64_t v75 = (char *)&v66 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  uint64_t v76 = (uint64_t)&v66 - v8;
  uint64_t v78 = type metadata accessor for URL();
  uint64_t v82 = *(void *)(v78 - 8);
  uint64_t v9 = __chkstk_darwin(v78);
  uint64_t v73 = (char *)&v66 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = __chkstk_darwin(v9);
  uint64_t v13 = (char *)&v66 - v12;
  __chkstk_darwin(v11);
  uint64_t v81 = (char *)&v66 - v14;
  uint64_t v15 = sub_10000588C(&qword_101659470);
  uint64_t v16 = __chkstk_darwin(v15 - 8);
  uint64_t v18 = (char *)&v66 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v16);
  os_log_type_t v74 = (const void **)((char *)&v66 - v19);
  uint64_t v20 = type metadata accessor for SystemInfo.DeviceLockState();
  uint64_t v21 = *(void *)(v20 - 8);
  uint64_t v22 = __chkstk_darwin(v20);
  uint64_t v24 = (char *)&v66 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v22);
  uint64_t v26 = (char *)&v66 - v25;
  v27._object = (void *)0x8000000101414080;
  v27._uint64_t countAndFlagsBits = 0xD000000000000013;
  prohibitAsyncContext(functionName:)(v27);
  static SystemInfo.lockState.getter();
  (*(void (**)(char *, void, uint64_t))(v21 + 104))(v24, enum case for SystemInfo.DeviceLockState.beforeFirstUnlock(_:), v20);
  sub_100B22DA4((unint64_t *)&unk_101655610, (void (*)(uint64_t))&type metadata accessor for SystemInfo.DeviceLockState);
  dispatch thunk of RawRepresentable.rawValue.getter();
  dispatch thunk of RawRepresentable.rawValue.getter();
  uint64_t v29 = v84;
  uint64_t v28 = v85;
  uint64_t v30 = *(void (**)(char *, uint64_t))(v21 + 8);
  v30(v24, v20);
  v30(v26, v20);
  if (v28 == v29)
  {
    if (qword_101636F50 != -1) {
      swift_once();
    }
    uint64_t v31 = type metadata accessor for Logger();
    sub_100010324(v31, (uint64_t)qword_10170E9E8);
    uint64_t v32 = Logger.logObject.getter();
    os_log_type_t v33 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v32, v33))
    {
      Swift::String v34 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)Swift::String v34 = 0;
      _os_log_impl((void *)&_mh_execute_header, v32, v33, "sharedBeaconRecords call failed because in device is in beforeFirstUnlock state", v34, 2u);
      swift_slowDealloc();
    }

    return (char *)_swiftEmptyArrayStorage;
  }
  else
  {
    uint64_t v36 = *(void *)(v1 + OBJC_IVAR____TtC12searchpartyd11BeaconStore_cachedBeaconRecordsQueueSynchronizer);
    sub_10000588C(&qword_101659478);
    QueueSynchronizer.conditionalSync<A>(_:)();
    uint64_t v35 = v85;
    if (!v85)
    {
      uint64_t v69 = v18;
      uint64_t v70 = 0;
      uint64_t v71 = v1;
      uint64_t v72 = v36;
      uint64_t v68 = *(void *)(v1 + 160);
      if (qword_1016375F0 != -1) {
        swift_once();
      }
      uint64_t v37 = v78;
      uint64_t v38 = sub_100010324(v78, (uint64_t)qword_10170F760);
      uint64_t v39 = v81;
      os_log_type_t v40 = *(void (**)(char *, uint64_t, uint64_t))(v82 + 16);
      v40(v81, v38, v37);
      v40(v13, (uint64_t)v39, v37);
      uint64_t v41 = v83;
      uint64_t v42 = (uint64_t)v75;
      uint64_t v67 = &v75[*(int *)(v83 + 40)];
      uint64_t v43 = (uint64_t)v67;
      uint64_t v44 = type metadata accessor for DirectorySequence();
      uint64_t v45 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v44 - 8) + 56);
      v45(v43, 1, 1, v44);
      v40((char *)v42, (uint64_t)v13, v37);
      *(void *)(v42 + *(int *)(v41 + 36)) = v68;
      v40(v73, (uint64_t)v13, v37);
      swift_retain();
      uint64_t v46 = (uint64_t)v77;
      DirectorySequence.init(at:includingPropertiesForKeys:options:)();
      uint64_t v47 = *(void (**)(char *, uint64_t))(v82 + 8);
      uint64_t v48 = v37;
      v47(v13, v37);
      v45(v46, 0, 1, v44);
      sub_100062604(v46, (uint64_t)v67, (uint64_t *)&unk_101653C90);
      uint64_t v49 = v76;
      sub_10001D608(v42, v76, (uint64_t *)&unk_101660DB0);
      uint64_t v50 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v79 + 56);
      uint64_t v51 = (uint64_t)v69;
      uint64_t v52 = v83;
      v50(v69, 1, 1, v83);
      sub_10001DAB4(v51, &qword_101659480);
      sub_10001D608(v49, v51, (uint64_t *)&unk_101660DB0);
      v50((char *)v51, 0, 1, v52);
      uint64_t v53 = v51;
      uint64_t v54 = v74;
      sub_10001D608(v53, (uint64_t)v74, &qword_101659470);
      v47(v81, v48);
      size_t v55 = sub_100B738B8(v54);
      uint64_t v56 = sub_10001DAB4((uint64_t)v54, &qword_101659470);
      __chkstk_darwin(v56);
      uint64_t v57 = v71;
      *(&v66 - 2) = v71;
      *(&v66 - 1) = v55;
      sub_10000588C(&qword_10163A040);
      QueueSynchronizer.conditionalSync<A>(_:)();
      uint64_t v35 = v85;
      uint64_t v58 = sub_1011587F8(v55);
      swift_release();
      uint64_t v59 = swift_bridgeObjectRetain();
      uint64_t v60 = sub_1011587F8(v59);
      swift_bridgeObjectRelease();
      if (*(void *)(v60 + 16) <= *(void *)(v58 + 16) >> 3)
      {
        uint64_t v85 = (char *)v58;
        sub_10089E3D4(v60);
        swift_bridgeObjectRelease();
        uint64_t v61 = v85;
      }
      else
      {
        uint64_t v61 = sub_10089FCDC(v60, v58);
        swift_bridgeObjectRelease();
      }
      uint64_t v62 = type metadata accessor for TaskPriority();
      uint64_t v63 = (uint64_t)v80;
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v62 - 8) + 56))(v80, 1, 1, v62);
      uint64_t v64 = (void *)swift_allocObject();
      v64[2] = 0;
      v64[3] = 0;
      v64[4] = v57;
      v64[5] = v61;
      swift_retain();
      sub_1008F5E44(v63, (uint64_t)&unk_101659490, (uint64_t)v64);
      swift_release();
    }
  }
  return v35;
}

uint64_t sub_100AD167C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  uint64_t v118 = a3;
  uint64_t v121 = type metadata accessor for DispatchPredicate();
  uint64_t v120 = *(void *)(v121 - 8);
  __chkstk_darwin(v121);
  uint64_t v119 = (uint64_t *)((char *)&v116 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v6 = sub_10000588C((uint64_t *)&unk_101653D30);
  __chkstk_darwin(v6 - 8);
  uint64_t v133 = (char *)&v116 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = sub_10000588C(&qword_101638CF0);
  uint64_t v9 = __chkstk_darwin(v8 - 8);
  uint64_t v124 = (char *)&v116 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = __chkstk_darwin(v9);
  uint64_t v129 = (char *)&v116 - v12;
  uint64_t v13 = __chkstk_darwin(v11);
  unsigned __int8 v125 = (char *)&v116 - v14;
  uint64_t v15 = __chkstk_darwin(v13);
  uint64_t v131 = (char *)&v116 - v16;
  __chkstk_darwin(v15);
  uint64_t v132 = (char *)&v116 - v17;
  uint64_t v18 = type metadata accessor for UUID();
  uint64_t v19 = *(void *)(v18 - 8);
  uint64_t v20 = __chkstk_darwin(v18);
  uint64_t v128 = (char *)&v116 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v22 = __chkstk_darwin(v20);
  uint64_t v145 = (uint64_t)&v116 - v23;
  uint64_t v24 = __chkstk_darwin(v22);
  uint64_t v130 = (char *)&v116 - v25;
  uint64_t v26 = __chkstk_darwin(v24);
  uint64_t v149 = (uint64_t)&v116 - v27;
  __chkstk_darwin(v26);
  unint64_t v148 = (char *)&v116 - v28;
  uint64_t v152 = type metadata accessor for SharedBeaconRecord(0);
  uint64_t v29 = *(void *)(v152 - 8);
  __chkstk_darwin(v152);
  uint64_t v31 = (char *)&v116 - ((v30 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v122 = a1;
  uint64_t v32 = *(void *)(a1 + OBJC_IVAR____TtC12searchpartyd11BeaconStore_sharedBeaconUUIDMapper);
  uint64_t v135 = (uint64_t *)(v32 + 16);
  swift_beginAccess();
  *(void *)(v32 + 16) = &_swiftEmptyDictionarySingleton;
  swift_bridgeObjectRelease();
  swift_beginAccess();
  *(void *)(v32 + 24) = &_swiftEmptyDictionarySingleton;
  swift_bridgeObjectRelease();
  os_log_type_t v33 = *(char **)(a2 + 16);
  if (v33)
  {
    uint64_t v127 = (uint64_t *)(v32 + 24);
    uint64_t v34 = a2 + ((*(unsigned __int8 *)(v29 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v29 + 80));
    uint64_t v150 = *(void *)(v29 + 72);
    BOOL v151 = (unsigned int (**)(uint64_t, uint64_t, uint64_t))(v19 + 48);
    uint64_t v143 = (void (**)(uint64_t))(v19 + 16);
    uint64_t v144 = (void (**)(char *, uint64_t, uint64_t))(v19 + 32);
    uint64_t v35 = v19;
    uint64_t v36 = (void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v19 + 56);
    uint64_t v123 = v35 + 40;
    uint64_t v141 = (char **)(v35 + 8);
    uint64_t v117 = a2;
    swift_bridgeObjectRetain();
    uint64_t v37 = (uint64_t)v133;
    uint64_t v38 = (uint64_t)v132;
    uint64_t v134 = v35;
    uint64_t v126 = v18;
    uint64_t v137 = v36;
    uint64_t v136 = v31;
    while (1)
    {
      sub_100B30D0C(v34, (uint64_t)v31, type metadata accessor for SharedBeaconRecord);
      sub_10001D074((uint64_t)&v31[*(int *)(v152 + 80)], v37, (uint64_t *)&unk_101653D30);
      uint64_t v39 = type metadata accessor for SharedBeaconRecord.PropertyListContent(0);
      if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v39 - 8) + 48))(v37, 1, v39) == 1) {
        break;
      }
      sub_10001D074(v37 + *(int *)(v39 + 20), v38, &qword_101638CF0);
      sub_100B310AC(v37, type metadata accessor for SharedBeaconRecord.PropertyListContent);
      os_log_type_t v40 = *v151;
      if ((*v151)(v38, 1, v18) == 1) {
        goto LABEL_4;
      }
      uint64_t v140 = v33;
      uint64_t v41 = v148;
      uint64_t v146 = *v144;
      v146(v148, v38, v18);
      uint64_t v42 = *v143;
      uint64_t v138 = &v31[*(int *)(v152 + 20)];
      v42(v149);
      uint64_t v43 = v40;
      uint64_t v44 = (uint64_t)v131;
      uint64_t v142 = (void (*)(unint64_t, uint64_t, uint64_t))v42;
      ((void (*)(char *, char *, uint64_t))v42)(v131, v41, v18);
      uint64_t v147 = *v36;
      v147(v44, 0, 1, v18);
      uint64_t v45 = v135;
      swift_beginAccess();
      uint64_t v139 = v43;
      if (v43(v44, 1, v18) == 1)
      {
        sub_10001DAB4(v44, &qword_101638CF0);
        swift_bridgeObjectRetain();
        unint64_t v46 = sub_1007240CC(v149);
        char v48 = v47;
        swift_bridgeObjectRelease();
        if (v48)
        {
          char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
          uint64_t v50 = (void *)*v45;
          uint64_t v153 = (void *)*v45;
          uint64_t *v45 = 0x8000000000000000;
          uint64_t v18 = v126;
          os_log_type_t v33 = v140;
          if ((isUniquelyReferenced_nonNull_native & 1) == 0)
          {
            sub_100E7F31C();
            uint64_t v50 = v153;
          }
          unint64_t v51 = *(void *)(v134 + 72) * v46;
          uint64_t v52 = *(void (**)(unint64_t, uint64_t))(v134 + 8);
          v52(v50[6] + v51, v18);
          uint64_t v53 = (char *)v52;
          uint64_t v54 = (uint64_t)v153;
          unint64_t v55 = v153[7] + v51;
          uint64_t v56 = (uint64_t)v125;
          v146(v125, v55, v18);
          sub_100166888(v46, v54);
          uint64_t *v45 = v54;
          swift_bridgeObjectRelease();
          v147(v56, 0, 1, v18);
        }
        else
        {
          uint64_t v56 = (uint64_t)v125;
          uint64_t v18 = v126;
          v147((uint64_t)v125, 1, 1, v126);
          uint64_t v53 = *v141;
          os_log_type_t v33 = v140;
        }
        uint64_t v140 = v53;
        ((void (*)(uint64_t, uint64_t))v53)(v149, v18);
        sub_10001DAB4(v56, &qword_101638CF0);
        uint64_t v68 = (uint64_t)v129;
        uint64_t v69 = v145;
        uint64_t v67 = v127;
        uint64_t v31 = v136;
      }
      else
      {
        v146(v130, v44, v18);
        int v57 = swift_isUniquelyReferenced_nonNull_native();
        uint64_t v153 = (void *)*v45;
        uint64_t v58 = v153;
        uint64_t *v45 = 0x8000000000000000;
        unint64_t v60 = sub_1007240CC(v149);
        uint64_t v61 = v58[2];
        BOOL v62 = (v59 & 1) == 0;
        uint64_t v63 = v61 + v62;
        if (__OFADD__(v61, v62))
        {
          __break(1u);
LABEL_49:
          __break(1u);
LABEL_50:
          __break(1u);
LABEL_51:
          __break(1u);
LABEL_52:
          __break(1u);
LABEL_53:
          uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
          __break(1u);
          return result;
        }
        char v64 = v59;
        if (v58[3] >= v63)
        {
          uint64_t v67 = v127;
          uint64_t v18 = v126;
          os_log_type_t v33 = v140;
          if ((v57 & 1) == 0) {
            sub_100E7F31C();
          }
        }
        else
        {
          sub_100E673F4(v63, v57);
          unint64_t v65 = sub_1007240CC(v149);
          uint64_t v67 = v127;
          uint64_t v18 = v126;
          os_log_type_t v33 = v140;
          if ((v64 & 1) != (v66 & 1)) {
            goto LABEL_53;
          }
          unint64_t v60 = v65;
        }
        uint64_t v70 = v134;
        uint64_t v31 = v136;
        uint64_t v71 = v153;
        if (v64)
        {
          (*(void (**)(unint64_t, char *, uint64_t))(v134 + 40))(v153[7] + *(void *)(v134 + 72) * v60, v130, v18);
          uint64_t v72 = v149;
        }
        else
        {
          v153[(v60 >> 6) + 8] |= 1 << v60;
          unint64_t v73 = *(void *)(v70 + 72) * v60;
          uint64_t v72 = v149;
          v142(v71[6] + v73, v149, v18);
          v146((char *)(v71[7] + v73), (uint64_t)v130, v18);
          uint64_t v74 = v71[2];
          BOOL v75 = __OFADD__(v74, 1);
          uint64_t v76 = v74 + 1;
          if (v75) {
            goto LABEL_50;
          }
          v71[2] = v76;
        }
        *uint64_t v135 = (uint64_t)v153;
        swift_bridgeObjectRelease();
        uint64_t v140 = *v141;
        ((void (*)(uint64_t, uint64_t))v140)(v72, v18);
        uint64_t v68 = (uint64_t)v129;
        uint64_t v69 = v145;
      }
      swift_endAccess();
      unint64_t v77 = (void (*)(uint64_t, char *, uint64_t))v142;
      v142(v69, (uint64_t)v148, v18);
      v77(v68, v138, v18);
      uint64_t v36 = v137;
      v147(v68, 0, 1, v18);
      swift_beginAccess();
      if (v139(v68, 1, v18) == 1)
      {
        sub_10001DAB4(v68, &qword_101638CF0);
        swift_bridgeObjectRetain();
        unint64_t v78 = sub_1007240CC(v69);
        char v80 = v79;
        swift_bridgeObjectRelease();
        if (v80)
        {
          char v81 = swift_isUniquelyReferenced_nonNull_native();
          uint64_t v82 = (void *)*v67;
          uint64_t v153 = (void *)*v67;
          uint64_t *v67 = 0x8000000000000000;
          uint64_t v83 = v67;
          if ((v81 & 1) == 0)
          {
            sub_100E7F31C();
            uint64_t v82 = v153;
          }
          unint64_t v84 = *(void *)(v134 + 72) * v78;
          uint64_t v85 = v140;
          ((void (*)(unint64_t, uint64_t))v140)(v82[6] + v84, v18);
          uint64_t v86 = (uint64_t)v153;
          unint64_t v87 = v153[7] + v84;
          uint64_t v88 = v124;
          v146(v124, v87, v18);
          int64_t v89 = v78;
          uint64_t v90 = (uint64_t)v88;
          sub_100166888(v89, v86);
          *uint64_t v83 = v86;
          swift_bridgeObjectRelease();
          uint64_t v91 = v88;
          uint64_t v36 = v137;
          v147((uint64_t)v91, 0, 1, v18);
          uint64_t v31 = v136;
        }
        else
        {
          uint64_t v90 = (uint64_t)v124;
          v147((uint64_t)v124, 1, 1, v18);
          uint64_t v85 = v140;
        }
        ((void (*)(uint64_t, uint64_t))v85)(v145, v18);
        sub_10001DAB4(v90, &qword_101638CF0);
        uint64_t v37 = (uint64_t)v133;
        uint64_t v102 = v85;
      }
      else
      {
        v146(v128, v68, v18);
        int v92 = swift_isUniquelyReferenced_nonNull_native();
        uint64_t v153 = (void *)*v67;
        uint64_t v93 = v153;
        uint64_t *v67 = 0x8000000000000000;
        unint64_t v95 = sub_1007240CC(v69);
        uint64_t v96 = v93[2];
        BOOL v97 = (v94 & 1) == 0;
        uint64_t v98 = v96 + v97;
        if (__OFADD__(v96, v97)) {
          goto LABEL_49;
        }
        char v99 = v94;
        if (v93[3] >= v98)
        {
          if ((v92 & 1) == 0) {
            sub_100E7F31C();
          }
        }
        else
        {
          sub_100E673F4(v98, v92);
          unint64_t v100 = sub_1007240CC(v145);
          if ((v99 & 1) != (v101 & 1)) {
            goto LABEL_53;
          }
          unint64_t v95 = v100;
        }
        uint64_t v103 = v134;
        uint64_t v31 = v136;
        uint64_t v104 = v153;
        if (v99)
        {
          (*(void (**)(unint64_t, char *, uint64_t))(v134 + 40))(v153[7] + *(void *)(v134 + 72) * v95, v128, v18);
        }
        else
        {
          v153[(v95 >> 6) + 8] |= 1 << v95;
          unint64_t v105 = *(void *)(v103 + 72) * v95;
          v142(v104[6] + v105, v145, v18);
          v146((char *)(v104[7] + v105), (uint64_t)v128, v18);
          uint64_t v106 = v104[2];
          BOOL v75 = __OFADD__(v106, 1);
          uint64_t v107 = v106 + 1;
          if (v75) {
            goto LABEL_51;
          }
          v104[2] = v107;
        }
        uint64_t *v67 = (uint64_t)v153;
        swift_bridgeObjectRelease();
        uint64_t v102 = v140;
        ((void (*)(uint64_t, uint64_t))v140)(v145, v18);
        uint64_t v37 = (uint64_t)v133;
      }
      swift_endAccess();
      ((void (*)(char *, uint64_t))v102)(v148, v18);
      sub_100B310AC((uint64_t)v31, type metadata accessor for SharedBeaconRecord);
      uint64_t v38 = (uint64_t)v132;
LABEL_5:
      v34 += v150;
      if (!--v33)
      {
        a2 = v117;
        swift_bridgeObjectRelease();
        goto LABEL_46;
      }
    }
    sub_10001DAB4(v37, (uint64_t *)&unk_101653D30);
    (*v36)(v38, 1, 1, v18);
LABEL_4:
    sub_100B310AC((uint64_t)v31, type metadata accessor for SharedBeaconRecord);
    sub_10001DAB4(v38, &qword_101638CF0);
    goto LABEL_5;
  }
LABEL_46:
  uint64_t v108 = v122;
  int v109 = *(void **)(v122 + OBJC_IVAR____TtC12searchpartyd11BeaconStore_cachedBeaconRecordsQueue);
  uint64_t v110 = v119;
  *uint64_t v119 = v109;
  uint64_t v111 = v120;
  uint64_t v112 = v121;
  (*(void (**)(void *, void, uint64_t))(v120 + 104))(v110, enum case for DispatchPredicate.onQueue(_:), v121);
  id v113 = v109;
  LOBYTE(v109) = _dispatchPreconditionTest(_:)();
  (*(void (**)(void *, uint64_t))(v111 + 8))(v110, v112);
  if ((v109 & 1) == 0) {
    goto LABEL_52;
  }
  swift_bridgeObjectRetain();
  swift_retain();
  uint64_t v114 = sub_100B375C4(a2, v108);
  swift_bridgeObjectRelease();
  swift_release();
  *(void *)(v108 + OBJC_IVAR____TtC12searchpartyd11BeaconStore_cachedSharedBeaconRecords) = v114;
  swift_bridgeObjectRetain();
  uint64_t result = swift_bridgeObjectRelease();
  *uint64_t v118 = v114;
  return result;
}

uint64_t sub_100AD2660(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  *(void *)(v5 + 24) = a4;
  *(void *)(v5 + 32) = a5;
  return _swift_task_switch(sub_100AD2680, 0, 0);
}

uint64_t sub_100AD2680()
{
  swift_retain();
  uint64_t v1 = (void *)swift_task_alloc();
  *(void *)(v0 + 40) = v1;
  uint64_t v2 = type metadata accessor for BeaconKeyManager(0);
  *uint64_t v1 = v0;
  v1[1] = sub_100AD274C;
  uint64_t v3 = *(void *)(v0 + 24);
  return unsafeBlocking<A>(_:)(v0 + 16, sub_100B5E238, v3, v2);
}

uint64_t sub_100AD274C()
{
  swift_task_dealloc();
  swift_release();
  return _swift_task_switch(sub_100AD2864, 0, 0);
}

uint64_t sub_100AD2864()
{
  uint64_t v1 = v0[2];
  v0[6] = v1;
  uint64_t v2 = swift_bridgeObjectRetain();
  uint64_t v3 = sub_10070FF30(v2);
  v0[7] = v3;
  swift_bridgeObjectRelease();
  uint64_t v4 = (void *)swift_task_alloc();
  v0[8] = v4;
  void *v4 = v0;
  v4[1] = sub_100AD2934;
  return sub_10033D024((uint64_t)v3, v1);
}

uint64_t sub_100AD2934()
{
  swift_task_dealloc();
  swift_release();
  return _swift_task_switch(sub_10048C468, 0, 0);
}

uint64_t sub_100AD2A4C@<X0>(void *a1@<X8>)
{
  type metadata accessor for BeaconKeyManager(0);
  uint64_t result = OSAllocatedUnfairLock.callAsFunction<A>(_:)();
  *a1 = v3;
  return result;
}

uint64_t sub_100AD2AD4()
{
  uint64_t v0 = type metadata accessor for SystemInfo.DeviceLockState();
  uint64_t v1 = *(void *)(v0 - 8);
  uint64_t v2 = __chkstk_darwin(v0);
  uint64_t v4 = (char *)&v19 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v2);
  uint64_t v6 = (char *)&v19 - v5;
  v7._uint64_t countAndFlagsBits = 0x65526E6F63616562;
  v7._object = (void *)0xED00007364726F63;
  prohibitAsyncContext(functionName:)(v7);
  static SystemInfo.lockState.getter();
  (*(void (**)(char *, void, uint64_t))(v1 + 104))(v4, enum case for SystemInfo.DeviceLockState.beforeFirstUnlock(_:), v0);
  sub_100B22DA4((unint64_t *)&unk_101655610, (void (*)(uint64_t))&type metadata accessor for SystemInfo.DeviceLockState);
  dispatch thunk of RawRepresentable.rawValue.getter();
  dispatch thunk of RawRepresentable.rawValue.getter();
  uint64_t v9 = v19;
  uint64_t v8 = (uint64_t)v20;
  uint64_t v10 = *(void (**)(char *, uint64_t))(v1 + 8);
  v10(v4, v0);
  v10(v6, v0);
  if (v8 == v9)
  {
    static os_log_type_t.default.getter();
    if (qword_101637260 != -1) {
      swift_once();
    }
    uint64_t v11 = _swiftEmptyArrayStorage;
    os_log(_:dso:log:_:_:)();
  }
  else
  {
    uint64_t v12 = sub_100ACF5FC();
    uint64_t v13 = sub_100A9A618((uint64_t)v12);
    swift_bridgeObjectRelease();
    uint64_t v14 = sub_100AD0D68();
    uint64_t v15 = sub_100A9A81C((uint64_t)v14);
    swift_bridgeObjectRelease();
    uint64_t v20 = v13;
    sub_100442D7C((uint64_t)v15);
    uint64_t v16 = (uint64_t)v20;
    swift_retain();
    sub_10000588C(&qword_101651898);
    unsafeFromAsyncTask<A>(_:)();
    swift_release();
    uint64_t v17 = sub_100A9AA20((uint64_t)v20);
    swift_bridgeObjectRelease();
    uint64_t v20 = (void *)v16;
    sub_100442D7C((uint64_t)v17);
    return (uint64_t)v20;
  }
  return (uint64_t)v11;
}

uint64_t sub_100AD2DC4(uint64_t a1, uint64_t a2)
{
  *(void *)(v2 + 56) = a1;
  *(void *)(v2 + 64) = a2;
  return _swift_task_switch(sub_100AD2DE4, 0, 0);
}

uint64_t sub_100AD2DE4()
{
  uint64_t v1 = *(void *)(*(void *)(v0 + 64) + 80);
  *(void *)(v0 + 72) = v1;
  if (v1)
  {
    swift_retain();
    return _swift_task_switch(sub_100AD2F60, v1, 0);
  }
  else
  {
    if (qword_101636EF0 != -1) {
      swift_once();
    }
    uint64_t v2 = type metadata accessor for Logger();
    sub_100010324(v2, (uint64_t)qword_10170E840);
    uint64_t v3 = Logger.logObject.getter();
    os_log_type_t v4 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v3, v4))
    {
      uint64_t v5 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v5 = 0;
      _os_log_impl((void *)&_mh_execute_header, v3, v4, "Missing CloudStorageService!", v5, 2u);
      swift_slowDealloc();
    }

    **(void **)(v0 + 56) = _swiftEmptyArrayStorage;
    uint64_t v6 = *(uint64_t (**)(void))(v0 + 8);
    return v6();
  }
}

uint64_t sub_100AD2F60()
{
  uint64_t v1 = (void *)swift_task_alloc();
  *(void *)(v0 + 80) = v1;
  *uint64_t v1 = v0;
  v1[1] = sub_100AD2FF4;
  return sub_100C134B0();
}

uint64_t sub_100AD2FF4(uint64_t a1)
{
  uint64_t v4 = *v2;
  *(void *)(*v2 + 88) = v1;
  swift_task_dealloc();
  if (v1)
  {
    uint64_t v5 = sub_100AD3188;
  }
  else
  {
    *(void *)(v4 + 96) = a1;
    uint64_t v5 = sub_100AD311C;
  }
  return _swift_task_switch(v5, 0, 0);
}

uint64_t sub_100AD311C()
{
  swift_release();
  **(void **)(v0 + 56) = *(void *)(v0 + 96);
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_100AD3188()
{
  uint64_t v10 = v0;
  if (qword_101636EF0 != -1) {
    swift_once();
  }
  uint64_t v1 = type metadata accessor for Logger();
  sub_100010324(v1, (uint64_t)qword_10170E840);
  swift_errorRetain();
  swift_errorRetain();
  uint64_t v2 = Logger.logObject.getter();
  os_log_type_t v3 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v2, v3))
  {
    uint64_t v4 = (uint8_t *)swift_slowAlloc();
    uint64_t v9 = swift_slowAlloc();
    *(_DWORD *)uint64_t v4 = 136315138;
    swift_getErrorValue();
    uint64_t v5 = Error.localizedDescription.getter();
    *(void *)(v0 + 48) = sub_1008FA0F0(v5, v6, &v9);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl((void *)&_mh_execute_header, v2, v3, "Failure to return accessory records %s!", v4, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    swift_errorRelease();
    swift_errorRelease();
  }

  swift_errorRelease();
  swift_release();
  **(void **)(v0 + 56) = _swiftEmptyArrayStorage;
  uint64_t v7 = *(uint64_t (**)(void))(v0 + 8);
  return v7();
}

uint64_t sub_100AD33C0@<X0>(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  return sub_100344BCC(a1, a2);
}

uint64_t sub_100AD3418@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5 = *(void *)(a1 + OBJC_IVAR____TtC12searchpartyd11BeaconStore_sharedBeaconUUIDMapper);
  swift_beginAccess();
  uint64_t v6 = *(void *)(v5 + 24);
  if (*(void *)(v6 + 16) && (unint64_t v7 = sub_1007240CC(a2), (v8 & 1) != 0))
  {
    unint64_t v9 = v7;
    uint64_t v10 = *(void *)(v6 + 56);
    uint64_t v11 = type metadata accessor for UUID();
    uint64_t v12 = *(void *)(v11 - 8);
    (*(void (**)(uint64_t, unint64_t, uint64_t))(v12 + 16))(a3, v10 + *(void *)(v12 + 72) * v9, v11);
    (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v12 + 56))(a3, 0, 1, v11);
  }
  else
  {
    uint64_t v13 = type metadata accessor for UUID();
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v13 - 8) + 56))(a3, 1, 1, v13);
  }
  return swift_endAccess();
}

uint64_t sub_100AD3588(void *a1, uint64_t a2)
{
  uint64_t v5 = type metadata accessor for OwnedBeaconRecord();
  __chkstk_darwin(v5);
  unint64_t v7 = (char *)&v30 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = sub_10000588C((uint64_t *)&unk_10163AC90);
  __chkstk_darwin(v8 - 8);
  uint64_t v10 = (char *)&v30 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = type metadata accessor for ShareRecord();
  uint64_t v38 = *(void *)(v11 - 8);
  uint64_t v39 = v11;
  uint64_t v12 = __chkstk_darwin(v11);
  uint64_t v37 = (uint64_t)&v30 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v12);
  uint64_t v15 = (char *)&v30 - v14;
  uint64_t result = (uint64_t)sub_100B6DD88();
  uint64_t v17 = result;
  uint64_t v18 = _swiftEmptyArrayStorage;
  os_log_type_t v40 = _swiftEmptyArrayStorage;
  uint64_t v36 = *(void *)(result + 16);
  if (v36)
  {
    uint64_t v31 = a2;
    uint64_t v32 = v7;
    os_log_type_t v33 = a1;
    uint64_t v34 = v2;
    unint64_t v19 = 0;
    uint64_t v20 = _swiftEmptyArrayStorage;
    uint64_t v21 = (uint64_t *)&unk_10163AC90;
    uint64_t v35 = result;
    while (v19 < *(void *)(v17 + 16))
    {
      unint64_t v22 = (*(unsigned __int8 *)(v38 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v38 + 80);
      uint64_t v23 = *(void *)(v38 + 72);
      sub_100B30D0C(v17 + v22 + v23 * v19, (uint64_t)v15, (uint64_t (*)(void))type metadata accessor for ShareRecord);
      sub_10001D074((uint64_t)&v15[*(int *)(v39 + 32)], (uint64_t)v10, v21);
      uint64_t v24 = type metadata accessor for Date();
      int v25 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(void *)(v24 - 8) + 48))(v10, 1, v24);
      sub_10001DAB4((uint64_t)v10, v21);
      if (v25 == 1)
      {
        uint64_t result = sub_100B310AC((uint64_t)v15, (uint64_t (*)(void))type metadata accessor for ShareRecord);
      }
      else
      {
        uint64_t v26 = v21;
        sub_100B30DB4((uint64_t)v15, v37, (uint64_t (*)(void))type metadata accessor for ShareRecord);
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          sub_1000B7DF0(0, v20[2] + 1, 1);
        }
        uint64_t v20 = v40;
        unint64_t v28 = v40[2];
        unint64_t v27 = v40[3];
        if (v28 >= v27 >> 1)
        {
          sub_1000B7DF0(v27 > 1, v28 + 1, 1);
          uint64_t v20 = v40;
        }
        void v20[2] = v28 + 1;
        uint64_t result = sub_100B30DB4(v37, (uint64_t)v20 + v22 + v28 * v23, (uint64_t (*)(void))type metadata accessor for ShareRecord);
        uint64_t v21 = v26;
        uint64_t v17 = v35;
      }
      if (v36 == ++v19)
      {
        uint64_t v18 = v40;
        a1 = v33;
        a2 = v31;
        unint64_t v7 = v32;
        goto LABEL_13;
      }
    }
    __break(1u);
  }
  else
  {
LABEL_13:
    swift_bridgeObjectRelease();
    if (v18[2])
    {
      sub_100B30D0C(a2, (uint64_t)v7, (uint64_t (*)(void))type metadata accessor for OwnedBeaconRecord);
      char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      os_log_type_t v40 = (void *)*a1;
      *a1 = 0x8000000000000000;
      sub_10016F264((uint64_t)v18, (uint64_t)v7, isUniquelyReferenced_nonNull_native);
      *a1 = v40;
      swift_bridgeObjectRelease();
      return sub_100B310AC((uint64_t)v7, (uint64_t (*)(void))type metadata accessor for OwnedBeaconRecord);
    }
    else
    {
      return swift_release();
    }
  }
  return result;
}

uint64_t sub_100AD3988()
{
  uint64_t v1 = v0;
  uint64_t v2 = sub_10000588C((uint64_t *)&unk_101653D30);
  __chkstk_darwin(v2 - 8);
  char v99 = (char *)&v78 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = sub_10000588C(&qword_101638CF0);
  __chkstk_darwin(v4 - 8);
  uint64_t v97 = (uint64_t)&v78 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v81 = type metadata accessor for UUID();
  uint64_t v79 = *(void *)(v81 - 8);
  uint64_t v6 = __chkstk_darwin(v81);
  uint64_t v96 = (char *)&v78 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = __chkstk_darwin(v6);
  unint64_t v95 = (char *)&v78 - v9;
  __chkstk_darwin(v8);
  char v101 = (char *)&v78 - v10;
  uint64_t v11 = sub_10000588C((uint64_t *)&unk_101653D50);
  __chkstk_darwin(v11 - 8);
  uint64_t v98 = (char *)&v78 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v100 = type metadata accessor for SharedBeaconRecord(0);
  uint64_t v80 = *(void *)(v100 - 8);
  uint64_t v13 = __chkstk_darwin(v100);
  uint64_t v94 = (uint64_t)&v78 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v13);
  uint64_t v103 = (uint64_t)&v78 - v15;
  uint64_t v105 = type metadata accessor for MemberSharingCircle();
  uint64_t v78 = *(void *)(v105 - 8);
  __chkstk_darwin(v105);
  uint64_t v17 = (char *)&v78 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v18 = sub_10000588C((uint64_t *)&unk_101653C90);
  __chkstk_darwin(v18 - 8);
  int v92 = (void (**)(char *, char *, uint64_t))((char *)&v78 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v20 = sub_10000588C((uint64_t *)&unk_101653C80);
  uint64_t v93 = *(void *)(v20 - 8);
  uint64_t v21 = __chkstk_darwin(v20);
  uint64_t v23 = (unsigned int (**)(uint64_t, uint64_t, uint64_t))((char *)&v78 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0));
  __chkstk_darwin(v21);
  uint64_t v91 = (uint64_t *)((char *)&v78 - v24);
  uint64_t v25 = type metadata accessor for URL();
  uint64_t v26 = *(void *)(v25 - 8);
  uint64_t v27 = __chkstk_darwin(v25);
  unint64_t v87 = (char *)&v78 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v29 = __chkstk_darwin(v27);
  uint64_t v31 = (char *)&v78 - v30;
  __chkstk_darwin(v29);
  os_log_type_t v33 = (char *)&v78 - v32;
  uint64_t v34 = sub_10000588C(&qword_1016496E0);
  uint64_t v35 = __chkstk_darwin(v34 - 8);
  int64_t v89 = (void (**)(char *, uint64_t, uint64_t))((char *)&v78 - ((v36 + 15) & 0xFFFFFFFFFFFFFFF0));
  __chkstk_darwin(v35);
  uint64_t v90 = (const void **)((char *)&v78 - v37);
  uint64_t v106 = &_swiftEmptySetSingleton;
  uint64_t v104 = v1;
  uint64_t v86 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v1 + 160);
  if (qword_101636A48 != -1) {
    swift_once();
  }
  uint64_t v38 = sub_100010324(v25, (uint64_t)qword_10170DD78);
  uint64_t v84 = v26;
  uint64_t v39 = *(void (**)(char *, uint64_t, uint64_t))(v26 + 16);
  uint64_t v88 = v33;
  v39(v33, v38, v25);
  v39(v31, (uint64_t)v33, v25);
  uint64_t v82 = (char *)v23 + *(int *)(v20 + 40);
  uint64_t v40 = (uint64_t)v82;
  uint64_t v41 = type metadata accessor for DirectorySequence();
  uint64_t v102 = v23;
  uint64_t v42 = v41;
  uint64_t v43 = *(void *)(v41 - 8);
  uint64_t v44 = v20;
  uint64_t v83 = v20;
  uint64_t v45 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v43 + 56);
  v45(v40, 1, 1, v41);
  unint64_t v46 = v102;
  v39((char *)v102, (uint64_t)v31, v25);
  *(unsigned int (**)(uint64_t, uint64_t, uint64_t))((char *)v46 + *(int *)(v44 + 36)) = v86;
  uint64_t v85 = v25;
  v39(v87, (uint64_t)v31, v25);
  swift_retain();
  uint64_t v47 = (uint64_t)v92;
  DirectorySequence.init(at:includingPropertiesForKeys:options:)();
  char v48 = *(void (**)(char *, uint64_t))(v84 + 8);
  v48(v31, v25);
  v45(v47, 0, 1, v42);
  sub_100062604(v47, (uint64_t)v82, (uint64_t *)&unk_101653C90);
  uint64_t v49 = v91;
  sub_10001D608((uint64_t)v102, (uint64_t)v91, (uint64_t *)&unk_101653C80);
  uint64_t v50 = *(void (**)(void (**)(char *, uint64_t, uint64_t), uint64_t, uint64_t, uint64_t))(v93 + 56);
  uint64_t v51 = (uint64_t)v89;
  uint64_t v52 = v83;
  v50(v89, 1, 1, v83);
  sub_10001DAB4(v51, &qword_101653CB0);
  sub_10001D608((uint64_t)v49, v51, (uint64_t *)&unk_101653C80);
  v50((void (**)(char *, uint64_t, uint64_t))v51, 0, 1, v52);
  uint64_t v53 = v90;
  sub_10001D608(v51, (uint64_t)v90, &qword_1016496E0);
  v48(v88, v85);
  size_t v54 = sub_100B745D0(v53);
  sub_10001DAB4((uint64_t)v53, &qword_1016496E0);
  uint64_t v55 = *(void *)(v54 + 16);
  if (v55)
  {
    unint64_t v56 = (*(unsigned __int8 *)(v78 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v78 + 80);
    uint64_t v88 = (char *)v54;
    uint64_t v57 = v54 + v56;
    uint64_t v102 = (unsigned int (**)(uint64_t, uint64_t, uint64_t))(v80 + 48);
    uint64_t v58 = *(void *)(v78 + 72);
    int64_t v89 = (void (**)(char *, uint64_t, uint64_t))(v79 + 32);
    uint64_t v90 = (const void **)(v79 + 56);
    int v92 = (void (**)(char *, char *, uint64_t))(v79 + 16);
    uint64_t v93 = v79 + 48;
    uint64_t v91 = (void *)(v79 + 8);
    uint64_t v60 = (uint64_t)v98;
    uint64_t v59 = (uint64_t)v99;
    uint64_t v61 = v81;
    uint64_t v62 = v100;
    uint64_t v63 = v105;
    uint64_t v64 = (uint64_t)v95;
    do
    {
      sub_100B30D0C(v57, (uint64_t)v17, (uint64_t (*)(void))type metadata accessor for MemberSharingCircle);
      if (v17[*(int *)(v63 + 40)] == 1)
      {
        sub_100ACEADC((uint64_t)&v17[*(int *)(v63 + 24)], v60);
        if ((*v102)(v60, 1, v62) == 1)
        {
          sub_100B310AC((uint64_t)v17, (uint64_t (*)(void))type metadata accessor for MemberSharingCircle);
          sub_10001DAB4(v60, (uint64_t *)&unk_101653D50);
        }
        else
        {
          uint64_t v65 = v103;
          sub_100B30DB4(v60, v103, type metadata accessor for SharedBeaconRecord);
          if (*(unsigned char *)(v65 + *(int *)(v62 + 64)) == 2)
          {
            sub_10001D074(v65 + *(int *)(v62 + 80), v59, (uint64_t *)&unk_101653D30);
            uint64_t v66 = v59;
            uint64_t v67 = type metadata accessor for SharedBeaconRecord.PropertyListContent(0);
            if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v67 - 8) + 48))(v66, 1, v67) == 1)
            {
              sub_10001DAB4(v66, (uint64_t *)&unk_101653D30);
              uint64_t v68 = v97;
              ((void (*)(uint64_t, uint64_t, uint64_t, uint64_t))*v90)(v97, 1, 1, v61);
            }
            else
            {
              uint64_t v68 = v97;
              sub_10001D074(v66 + *(int *)(v67 + 20), v97, &qword_101638CF0);
              sub_100B310AC(v66, type metadata accessor for SharedBeaconRecord.PropertyListContent);
            }
            uint64_t v69 = v94;
            sub_100B30D0C(v103, v94, type metadata accessor for SharedBeaconRecord);
            int v70 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))v93)(v68, 1, v61);
            uint64_t v71 = v92;
            if (v70 == 1)
            {
              uint64_t v72 = *v92;
              (*v92)(v101, (char *)(v69 + *(int *)(v100 + 20)), v61);
              sub_100B310AC(v69, type metadata accessor for SharedBeaconRecord);
              sub_10001DAB4(v68, &qword_101638CF0);
            }
            else
            {
              sub_100B310AC(v69, type metadata accessor for SharedBeaconRecord);
              (*v89)(v101, v68, v61);
              uint64_t v72 = *v71;
            }
            unint64_t v73 = v96;
            uint64_t v74 = v101;
            v72(v96, v101, v61);
            sub_100DC8CB8(v64, v73);
            BOOL v75 = (void (*)(char *, uint64_t))*v91;
            ((void (*)(uint64_t, uint64_t))*v91)(v64, v61);
            v75(v74, v61);
            sub_100B310AC(v103, type metadata accessor for SharedBeaconRecord);
            sub_100B310AC((uint64_t)v17, (uint64_t (*)(void))type metadata accessor for MemberSharingCircle);
            uint64_t v60 = (uint64_t)v98;
            uint64_t v59 = (uint64_t)v99;
            uint64_t v62 = v100;
          }
          else
          {
            sub_100B310AC(v65, type metadata accessor for SharedBeaconRecord);
            sub_100B310AC((uint64_t)v17, (uint64_t (*)(void))type metadata accessor for MemberSharingCircle);
          }
        }
        uint64_t v63 = v105;
      }
      else
      {
        sub_100B310AC((uint64_t)v17, (uint64_t (*)(void))type metadata accessor for MemberSharingCircle);
      }
      v57 += v58;
      --v55;
    }
    while (v55);
  }
  swift_release();
  uint64_t v76 = v106[2];
  swift_bridgeObjectRelease();
  return v76;
}

uint64_t sub_100AD4584()
{
  uint64_t v1 = type metadata accessor for StableIdentifier();
  uint64_t v2 = __chkstk_darwin(v1);
  uint64_t v4 = (char *)v35 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = __chkstk_darwin(v2);
  uint64_t v7 = (char *)v35 - v6;
  __chkstk_darwin(v5);
  uint64_t v40 = (uint64_t)v35 - v8;
  uint64_t v9 = type metadata accessor for OwnedBeaconRecord();
  uint64_t v38 = *(void *)(v9 - 8);
  uint64_t v39 = v9;
  uint64_t v10 = __chkstk_darwin(v9);
  uint64_t v41 = (uint64_t)v35 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v10);
  uint64_t v43 = (uint64_t)v35 - v12;
  uint64_t result = (uint64_t)sub_100ACF5FC();
  uint64_t v14 = result;
  uint64_t v15 = _swiftEmptyArrayStorage;
  uint64_t v44 = _swiftEmptyArrayStorage;
  uint64_t v37 = *(void *)(result + 16);
  if (!v37)
  {
LABEL_19:
    swift_bridgeObjectRelease();
    uint64_t v32 = v15[2];
    swift_release();
    uint64_t v33 = sub_100AD3988();
    BOOL v34 = __OFADD__(v33, v32);
    uint64_t result = v33 + v32;
    if (v34) {
      goto LABEL_22;
    }
    return result;
  }
  unint64_t v16 = 0;
  uint64_t v36 = v4;
  v35[1] = v0;
  v35[2] = v4 + 8;
  uint64_t v17 = _swiftEmptyArrayStorage;
  while (v16 < *(void *)(v14 + 16))
  {
    uint64_t v18 = *(void *)(v38 + 72);
    uint64_t v19 = v14;
    unint64_t v42 = (*(unsigned __int8 *)(v38 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v38 + 80);
    uint64_t v20 = v14 + v42 + v18 * v16;
    uint64_t v21 = v43;
    sub_100B30D0C(v20, v43, (uint64_t (*)(void))type metadata accessor for OwnedBeaconRecord);
    uint64_t v22 = (uint64_t)v7;
    uint64_t v23 = v21 + *(int *)(v39 + 24);
    uint64_t v24 = v40;
    sub_100B30D0C(v23, v40, (uint64_t (*)(void))type metadata accessor for StableIdentifier);
    uint64_t v25 = v1;
    int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    sub_100B310AC(v24, (uint64_t (*)(void))type metadata accessor for StableIdentifier);
    uint64_t v27 = v23;
    uint64_t v7 = (char *)v22;
    sub_100B30D0C(v27, v22, (uint64_t (*)(void))type metadata accessor for StableIdentifier);
    if (EnumCaseMultiPayload == 1)
    {
      sub_100B310AC(v22, (uint64_t (*)(void))type metadata accessor for StableIdentifier);
      uint64_t v1 = v25;
      uint64_t v14 = v19;
      goto LABEL_13;
    }
    sub_100B30D0C(v22, (uint64_t)v36, (uint64_t (*)(void))type metadata accessor for StableIdentifier);
    int v28 = swift_getEnumCaseMultiPayload();
    uint64_t v1 = v25;
    if (v28 == 2)
    {
      sub_10000588C(&qword_1016555E0);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      uint64_t v14 = v19;
LABEL_12:
      swift_bridgeObjectRelease();
      uint64_t v29 = type metadata accessor for UUID();
      (*(void (**)(char *, uint64_t))(*(void *)(v29 - 8) + 8))(v36, v29);
      sub_100B310AC(v22, (uint64_t (*)(void))type metadata accessor for StableIdentifier);
      uint64_t v17 = v44;
LABEL_13:
      sub_100B30DB4(v43, v41, (uint64_t (*)(void))type metadata accessor for OwnedBeaconRecord);
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
        sub_1000B74D8(0, v17[2] + 1, 1);
      }
      uint64_t v17 = v44;
      unint64_t v31 = v44[2];
      unint64_t v30 = v44[3];
      if (v31 >= v30 >> 1)
      {
        sub_1000B74D8(v30 > 1, v31 + 1, 1);
        uint64_t v17 = v44;
      }
      void v17[2] = v31 + 1;
      uint64_t result = sub_100B30DB4(v41, (uint64_t)v17 + v42 + v31 * v18, (uint64_t (*)(void))type metadata accessor for OwnedBeaconRecord);
      uint64_t v7 = (char *)v22;
      goto LABEL_4;
    }
    uint64_t v14 = v19;
    if (v28 == 3)
    {
      sub_10000588C((uint64_t *)&unk_1016565E0);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      goto LABEL_12;
    }
    sub_100B310AC((uint64_t)v36, (uint64_t (*)(void))type metadata accessor for StableIdentifier);
    sub_100B310AC(v22, (uint64_t (*)(void))type metadata accessor for StableIdentifier);
    uint64_t result = sub_100B310AC(v43, (uint64_t (*)(void))type metadata accessor for OwnedBeaconRecord);
LABEL_4:
    if (v37 == ++v16)
    {
      uint64_t v15 = v44;
      goto LABEL_19;
    }
  }
  __break(1u);
LABEL_22:
  __break(1u);
  return result;
}

uint64_t sub_100AD4A7C()
{
  int64_t v1 = type metadata accessor for MemberPeerTrust();
  uint64_t v127 = *(void *)(v1 - 8);
  uint64_t v2 = __chkstk_darwin(v1);
  uint64_t v131 = (uint64_t)&v101 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = __chkstk_darwin(v2);
  uint64_t v132 = (uint64_t)&v101 - v5;
  __chkstk_darwin(v4);
  uint64_t v7 = (char *)&v101 - v6;
  uint64_t v125 = type metadata accessor for UUID();
  uint64_t v128 = *(void *)(v125 - 8);
  __chkstk_darwin(v125);
  uint64_t v135 = (char *)&v101 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = sub_10000588C(&qword_101638CF0);
  __chkstk_darwin(v9 - 8);
  uint64_t v124 = (char *)&v101 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v133 = type metadata accessor for MemberSharingCircle();
  uint64_t v101 = *(void *)(v133 - 8);
  __chkstk_darwin(v133);
  uint64_t v130 = (char *)&v101 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v123 = sub_10000588C((uint64_t *)&unk_101653C80);
  uint64_t v115 = *(void *)(v123 - 8);
  uint64_t v12 = __chkstk_darwin(v123);
  uint64_t v122 = (uint64_t)&v101 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v12);
  uint64_t v113 = (uint64_t)&v101 - v14;
  uint64_t v15 = sub_10000588C(&qword_1016496E0);
  uint64_t v16 = __chkstk_darwin(v15 - 8);
  uint64_t v112 = (char *)&v101 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v16);
  uint64_t v114 = (const void **)((char *)&v101 - v18);
  uint64_t v19 = sub_10000588C((uint64_t *)&unk_101653C90);
  __chkstk_darwin(v19 - 8);
  uint64_t v121 = (char *)&v101 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v21 = sub_10000588C((uint64_t *)&unk_101660A10);
  uint64_t v111 = *(void *)(v21 - 8);
  uint64_t v22 = __chkstk_darwin(v21);
  uint64_t v129 = (char *)&v101 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v22);
  uint64_t v110 = (uint64_t)&v101 - v24;
  uint64_t v25 = type metadata accessor for URL();
  unint64_t v26 = *(void *)(v25 - 8);
  uint64_t v27 = __chkstk_darwin(v25);
  uint64_t v120 = (void (**)(char *, uint64_t, uint64_t))((char *)&v101 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v29 = __chkstk_darwin(v27);
  size_t v31 = (size_t)&v101 - v30;
  __chkstk_darwin(v29);
  unint64_t v33 = (unint64_t)&v101 - v32;
  uint64_t v34 = sub_10000588C(&qword_101659468);
  uint64_t v35 = __chkstk_darwin(v34 - 8);
  uint64_t v105 = (char *)&v101 - ((v36 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v35);
  uint64_t v107 = (const void **)((char *)&v101 - v37);
  uint64_t v116 = *(void *)(v0 + 160);
  if (qword_101637160 != -1) {
    goto LABEL_101;
  }
  while (1)
  {
    uint64_t v38 = sub_100010324(v25, (uint64_t)qword_10170EE20);
    int64_t v134 = v26;
    uint64_t v39 = *(void (**)(unint64_t, uint64_t, uint64_t))(v26 + 16);
    v39(v33, v38, v25);
    v39(v31, v33, v25);
    uint64_t v40 = *(int *)(v21 + 40);
    uint64_t v103 = v21;
    uint64_t v41 = &v129[v40];
    uint64_t v102 = &v129[v40];
    uint64_t v42 = type metadata accessor for DirectorySequence();
    uint64_t v43 = *(void *)(v42 - 8);
    uint64_t v117 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v43 + 56);
    uint64_t v126 = v43 + 56;
    v117(v41, 1, 1, v42);
    uint64_t v44 = v129;
    v39((unint64_t)v129, v31, v25);
    *(void *)&v44[*(int *)(v21 + 36)] = v116;
    int v109 = v39;
    unint64_t v108 = v26 + 16;
    v39((unint64_t)v120, v31, v25);
    swift_retain();
    int64_t v118 = v33;
    uint64_t v45 = v121;
    DirectorySequence.init(at:includingPropertiesForKeys:options:)();
    unint64_t v46 = *(void (**)(size_t, uint64_t))(v134 + 8);
    v134 += 8;
    size_t v106 = v31;
    v46(v31, v25);
    uint64_t v119 = (void (**)(char *, uint64_t))v42;
    v117(v45, 0, 1, v42);
    uint64_t v47 = (uint64_t)v45;
    int64_t v48 = v118;
    sub_100062604(v47, (uint64_t)v102, (uint64_t *)&unk_101653C90);
    uint64_t v49 = v110;
    sub_10001D608((uint64_t)v129, v110, (uint64_t *)&unk_101660A10);
    uint64_t v50 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v111 + 56);
    uint64_t v51 = (uint64_t)v105;
    uint64_t v52 = v103;
    v50(v105, 1, 1, v103);
    sub_10001DAB4(v51, (uint64_t *)&unk_101660A20);
    sub_10001D608(v49, v51, (uint64_t *)&unk_101660A10);
    v50((char *)v51, 0, 1, v52);
    uint64_t v53 = v107;
    sub_10001D608(v51, (uint64_t)v107, &qword_101659468);
    uint64_t v129 = (char *)v46;
    v46(v48, v25);
    unint64_t v54 = sub_100B775E4(v53);
    sub_10001DAB4((uint64_t)v53, &qword_101659468);
    if (qword_101636A48 != -1) {
      swift_once();
    }
    uint64_t v55 = sub_100010324(v25, (uint64_t)qword_10170DD78);
    unint64_t v56 = v109;
    v109(v48, v55, v25);
    size_t v57 = v106;
    v56(v106, v48, v25);
    uint64_t v58 = v122;
    uint64_t v59 = v25;
    uint64_t v60 = v123;
    uint64_t v111 = v122 + *(int *)(v123 + 40);
    uint64_t v61 = v117;
    ((void (*)(void))v117)();
    v56(v58, v57, v59);
    *(void *)(v58 + *(int *)(v60 + 36)) = v116;
    uint64_t v104 = v59;
    v56((size_t)v120, v57, v59);
    swift_retain();
    uint64_t v62 = (uint64_t)v121;
    DirectorySequence.init(at:includingPropertiesForKeys:options:)();
    ((void (*)(size_t, uint64_t))v129)(v57, v59);
    v61((char *)v62, 0, 1, (uint64_t)v119);
    sub_100062604(v62, v111, (uint64_t *)&unk_101653C90);
    uint64_t v63 = v113;
    sub_10001D608(v122, v113, (uint64_t *)&unk_101653C80);
    unint64_t v26 = v115 + 56;
    uint64_t v64 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v115 + 56);
    uint64_t v65 = (uint64_t)v112;
    uint64_t v66 = v123;
    v64(v112, 1, 1, v123);
    sub_10001DAB4(v65, &qword_101653CB0);
    sub_10001D608(v63, v65, (uint64_t *)&unk_101653C80);
    v64((char *)v65, 0, 1, v66);
    uint64_t v67 = v114;
    sub_10001D608(v65, (uint64_t)v114, &qword_1016496E0);
    ((void (*)(int64_t, uint64_t))v129)(v118, v104);
    size_t v31 = sub_100B745D0(v67);
    sub_10001DAB4((uint64_t)v67, &qword_1016496E0);
    uint64_t v137 = _swiftEmptyArrayStorage;
    unint64_t v33 = *(void *)(v31 + 16);
    int64_t v134 = v1;
    if (!v33) {
      break;
    }
    uint64_t v25 = v31 + ((*(unsigned __int8 *)(v101 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v101 + 80));
    unint64_t v26 = *(void *)(v101 + 72);
    uint64_t v129 = (char *)v31;
    swift_retain();
    uint64_t v68 = (uint64_t)v130;
    while (1)
    {
      sub_100B30D0C(v25, v68, (uint64_t (*)(void))type metadata accessor for MemberSharingCircle);
      uint64_t v69 = *(void *)(v68 + *(int *)(v133 + 36));
      size_t v31 = *(void *)(v69 + 16);
      if (!v31)
      {
        uint64_t v21 = (uint64_t)_swiftEmptyArrayStorage;
        goto LABEL_7;
      }
      sub_10000588C(&qword_10163BC50);
      uint64_t v70 = *(void *)(v128 + 72);
      int64_t v1 = (*(unsigned __int8 *)(v128 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v128 + 80);
      uint64_t v21 = swift_allocObject();
      size_t v71 = j__malloc_size((const void *)v21);
      if (!v70) {
        break;
      }
      BOOL v72 = v71 - v1 == 0x8000000000000000 && v70 == -1;
      if (v72) {
        goto LABEL_97;
      }
      *(void *)(v21 + 16) = v31;
      *(void *)(v21 + 24) = 2 * ((uint64_t)(v71 - v1) / v70);
      swift_bridgeObjectRetain_n();
      uint64_t v73 = sub_100711B04(&v136, v21 + v1, v31, v69);
      sub_100132C20();
      if (v73 != v31) {
        goto LABEL_95;
      }
      swift_bridgeObjectRelease();
      int64_t v1 = v134;
      uint64_t v68 = (uint64_t)v130;
LABEL_7:
      sub_100B310AC(v68, (uint64_t (*)(void))type metadata accessor for MemberSharingCircle);
      sub_100442D9C(v21);
      v25 += v26;
      if (!--v33)
      {
        swift_release_n();
        uint64_t v74 = v137;
        goto LABEL_18;
      }
    }
LABEL_94:
    __break(1u);
LABEL_95:
    __break(1u);
LABEL_96:
    __break(1u);
LABEL_97:
    __break(1u);
LABEL_98:
    __break(1u);
LABEL_99:
    __break(1u);
LABEL_100:
    __break(1u);
LABEL_101:
    swift_once();
  }
  swift_release();
  uint64_t v74 = _swiftEmptyArrayStorage;
LABEL_18:
  uint64_t v75 = sub_101158244((uint64_t)v74);
  swift_bridgeObjectRelease();
  uint64_t v76 = 0;
  uint64_t v77 = *(void *)(v75 + 56);
  uint64_t v117 = (void (*)(char *, uint64_t, uint64_t, uint64_t))(v75 + 56);
  uint64_t v126 = v75;
  uint64_t v78 = 1 << *(unsigned char *)(v75 + 32);
  uint64_t v79 = -1;
  if (v78 < 64) {
    uint64_t v79 = ~(-1 << v78);
  }
  unint64_t v80 = v79 & v77;
  int64_t v118 = (unint64_t)(v78 + 63) >> 6;
  uint64_t v122 = v128 + 16;
  uint64_t v123 = v128 + 56;
  uint64_t v121 = (char *)(v128 + 48);
  uint64_t v120 = (void (**)(char *, uint64_t, uint64_t))(v128 + 32);
  uint64_t v119 = (void (**)(char *, uint64_t))(v128 + 8);
  uint64_t v21 = (uint64_t)v124;
  uint64_t v25 = v125;
  while (2)
  {
    if (v80)
    {
      uint64_t v129 = (char *)((v80 - 1) & v80);
      uint64_t v130 = v76;
      unint64_t v84 = __clz(__rbit64(v80)) | ((void)v76 << 6);
LABEL_41:
      uint64_t v89 = v128;
      (*(void (**)(uint64_t, unint64_t, uint64_t))(v128 + 16))(v21, *(void *)(v126 + 48) + *(void *)(v128 + 72) * v84, v25);
      (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v89 + 56))(v21, 0, 1, v25);
      if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v89 + 48))(v21, 1, v25) == 1) {
        goto LABEL_82;
      }
      (*v120)(v135, v21, v25);
      uint64_t v21 = *(void *)(v54 + 16);
      if (v21)
      {
        uint64_t v90 = v127;
        unint64_t v91 = (*(unsigned __int8 *)(v127 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v127 + 80);
        uint64_t v25 = v54 + v91;
        swift_bridgeObjectRetain();
        size_t v31 = 0;
        uint64_t v92 = *(void *)(v90 + 72);
        uint64_t v133 = v91;
        uint64_t v93 = v92 + v91;
        unint64_t v33 = 1;
        while (1)
        {
          sub_100B30D0C(v25, (uint64_t)v7, (uint64_t (*)(void))type metadata accessor for MemberPeerTrust);
          unint64_t v26 = static UUID.== infix(_:_:)();
          sub_100B310AC((uint64_t)v7, (uint64_t (*)(void))type metadata accessor for MemberPeerTrust);
          if (v26) {
            break;
          }
          ++v31;
          v25 += v92;
          ++v33;
          v93 += v92;
          if (v21 == v31)
          {
            swift_bridgeObjectRelease();
            int64_t v1 = *(void *)(v54 + 16);
            goto LABEL_47;
          }
        }
        swift_bridgeObjectRelease();
        int64_t v1 = v31 + 1;
        if (__OFADD__(v31, 1)) {
          goto LABEL_99;
        }
        unint64_t v99 = *(void *)(v54 + 16);
        uint64_t v21 = v31;
        if (v1 != v99)
        {
          while (v33 < v99)
          {
            uint64_t v25 = v54 + v93;
            sub_100B30D0C(v54 + v93, (uint64_t)v7, (uint64_t (*)(void))type metadata accessor for MemberPeerTrust);
            unint64_t v26 = static UUID.== infix(_:_:)();
            sub_100B310AC((uint64_t)v7, (uint64_t (*)(void))type metadata accessor for MemberPeerTrust);
            if ((v26 & 1) == 0)
            {
              if (v33 != v21)
              {
                if (v21 < 0) {
                  goto LABEL_86;
                }
                size_t v31 = *(void *)(v54 + 16);
                if (v21 >= v31) {
                  goto LABEL_87;
                }
                unint64_t v26 = v21 * v92;
                sub_100B30D0C(v54 + v133 + v21 * v92, v132, (uint64_t (*)(void))type metadata accessor for MemberPeerTrust);
                if (v33 >= v31) {
                  goto LABEL_88;
                }
                sub_100B30D0C(v54 + v93, v131, (uint64_t (*)(void))type metadata accessor for MemberPeerTrust);
                if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
                  unint64_t v54 = sub_100BBD3D0(v54);
                }
                if ((unint64_t)v21 >= *(void *)(v54 + 16)) {
                  goto LABEL_89;
                }
                sub_100B5E098(v131, v54 + v133 + v26, (uint64_t (*)(void))type metadata accessor for MemberPeerTrust);
                if (v33 >= *(void *)(v54 + 16)) {
                  goto LABEL_90;
                }
                sub_100B5E098(v132, v54 + v93, (uint64_t (*)(void))type metadata accessor for MemberPeerTrust);
              }
              BOOL v82 = __OFADD__(v21++, 1);
              if (v82) {
                goto LABEL_85;
              }
            }
            int64_t v1 = v33 + 1;
            if (__OFADD__(v33, 1)) {
              goto LABEL_84;
            }
            unint64_t v99 = *(void *)(v54 + 16);
            ++v33;
            v93 += v92;
            if (v1 == v99) {
              goto LABEL_47;
            }
          }
          __break(1u);
LABEL_84:
          __break(1u);
LABEL_85:
          __break(1u);
LABEL_86:
          __break(1u);
LABEL_87:
          __break(1u);
LABEL_88:
          __break(1u);
LABEL_89:
          __break(1u);
LABEL_90:
          __break(1u);
          goto LABEL_91;
        }
LABEL_47:
        if (v1 < v21)
        {
LABEL_91:
          __break(1u);
          goto LABEL_92;
        }
        if ((v21 & 0x8000000000000000) == 0) {
          goto LABEL_51;
        }
LABEL_92:
        __break(1u);
LABEL_93:
        __break(1u);
        goto LABEL_94;
      }
      int64_t v1 = 0;
LABEL_51:
      uint64_t v25 = v1 - v21;
      unint64_t v33 = v21 - v1;
      if (__OFADD__(v1, v21 - v1)) {
        goto LABEL_93;
      }
      int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      if (!isUniquelyReferenced_nonNull_native || v21 > *(void *)(v54 + 24) >> 1)
      {
        if (v1 <= v21) {
          int64_t v95 = v21;
        }
        else {
          int64_t v95 = v1;
        }
        unint64_t v54 = sub_100A6F9A8(isUniquelyReferenced_nonNull_native, v95, 1, v54);
      }
      unint64_t v96 = v54 + ((*(unsigned __int8 *)(v127 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v127 + 80));
      size_t v31 = *(void *)(v127 + 72);
      int64_t v97 = v31 * v21;
      unint64_t v26 = v96 + v31 * v21;
      swift_arrayDestroy();
      BOOL v72 = v1 == v21;
      uint64_t v21 = (uint64_t)v124;
      uint64_t v25 = v125;
      if (!v72)
      {
        uint64_t v98 = *(void *)(v54 + 16) - v1;
        if (v98 < 0)
        {
          uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
          __break(1u);
          return result;
        }
        if (v97 < (uint64_t)(v31 * v1) || v26 >= v96 + v31 * v1 + v98 * v31)
        {
          swift_arrayInitWithTakeFrontToBack();
        }
        else if (v97 != v31 * v1)
        {
          swift_arrayInitWithTakeBackToFront();
        }
        uint64_t v81 = *(void *)(v54 + 16);
        BOOL v82 = __OFADD__(v81, v33);
        uint64_t v83 = v81 + v33;
        if (v82) {
          goto LABEL_96;
        }
        *(void *)(v54 + 16) = v83;
      }
      (*v119)(v135, v25);
      int64_t v1 = v134;
      unint64_t v80 = (unint64_t)v129;
      uint64_t v76 = v130;
      continue;
    }
    break;
  }
  int64_t v85 = (int64_t)(v76 + 1);
  if (__OFADD__(v76, 1)) {
    goto LABEL_98;
  }
  if (v85 < v118)
  {
    unint64_t v86 = *((void *)v117 + v85);
    int64_t v87 = (int64_t)(v76 + 1);
    if (!v86)
    {
      int64_t v87 = (int64_t)(v76 + 2);
      if ((uint64_t)(v76 + 2) >= v118) {
        goto LABEL_81;
      }
      unint64_t v86 = *((void *)v117 + v87);
      if (!v86)
      {
        int64_t v87 = (int64_t)(v76 + 3);
        if ((uint64_t)(v76 + 3) >= v118) {
          goto LABEL_81;
        }
        unint64_t v86 = *((void *)v117 + v87);
        if (!v86)
        {
          uint64_t v88 = v76 + 4;
          if ((uint64_t)(v76 + 4) >= v118) {
            goto LABEL_81;
          }
          unint64_t v86 = *((void *)v117 + (void)v88);
          if (!v86)
          {
            while (1)
            {
              int64_t v87 = (int64_t)(v88 + 1);
              if (__OFADD__(v88, 1)) {
                goto LABEL_100;
              }
              if (v87 >= v118) {
                goto LABEL_81;
              }
              unint64_t v86 = *((void *)v117 + v87);
              ++v88;
              if (v86) {
                goto LABEL_40;
              }
            }
          }
          int64_t v87 = (int64_t)(v76 + 4);
        }
      }
    }
LABEL_40:
    uint64_t v129 = (char *)((v86 - 1) & v86);
    uint64_t v130 = (char *)v87;
    unint64_t v84 = __clz(__rbit64(v86)) + (v87 << 6);
    goto LABEL_41;
  }
LABEL_81:
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))v123)(v21, 1, 1, v25);
LABEL_82:
  swift_release();
  return v54;
}

uint64_t sub_100AD5D50()
{
  int64_t v1 = type metadata accessor for OwnerPeerTrust();
  uint64_t v127 = *(void *)(v1 - 8);
  uint64_t v2 = __chkstk_darwin(v1);
  uint64_t v131 = (uint64_t)&v101 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = __chkstk_darwin(v2);
  uint64_t v132 = (uint64_t)&v101 - v5;
  __chkstk_darwin(v4);
  uint64_t v7 = (char *)&v101 - v6;
  uint64_t v125 = type metadata accessor for UUID();
  uint64_t v128 = *(void *)(v125 - 8);
  __chkstk_darwin(v125);
  uint64_t v135 = (char *)&v101 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = sub_10000588C(&qword_101638CF0);
  __chkstk_darwin(v9 - 8);
  uint64_t v124 = (char *)&v101 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v133 = type metadata accessor for OwnerSharingCircle();
  uint64_t v101 = *(void *)(v133 - 8);
  __chkstk_darwin(v133);
  uint64_t v130 = (char *)&v101 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v123 = sub_10000588C(&qword_101645750);
  uint64_t v115 = *(void *)(v123 - 8);
  uint64_t v12 = __chkstk_darwin(v123);
  uint64_t v122 = (uint64_t)&v101 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v12);
  uint64_t v113 = (uint64_t)&v101 - v14;
  uint64_t v15 = sub_10000588C((uint64_t *)&unk_101653CA0);
  uint64_t v16 = __chkstk_darwin(v15 - 8);
  uint64_t v112 = (char *)&v101 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v16);
  uint64_t v114 = (const void **)((char *)&v101 - v18);
  uint64_t v19 = sub_10000588C((uint64_t *)&unk_101653C90);
  __chkstk_darwin(v19 - 8);
  uint64_t v121 = (char *)&v101 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v21 = sub_10000588C(&qword_101659458);
  uint64_t v111 = *(void *)(v21 - 8);
  uint64_t v22 = __chkstk_darwin(v21);
  uint64_t v129 = (char *)&v101 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v22);
  uint64_t v110 = (uint64_t)&v101 - v24;
  uint64_t v25 = type metadata accessor for URL();
  unint64_t v26 = *(void *)(v25 - 8);
  uint64_t v27 = __chkstk_darwin(v25);
  uint64_t v120 = (void (**)(char *, uint64_t, uint64_t))((char *)&v101 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v29 = __chkstk_darwin(v27);
  size_t v31 = (size_t)&v101 - v30;
  __chkstk_darwin(v29);
  unint64_t v33 = (unint64_t)&v101 - v32;
  uint64_t v34 = sub_10000588C((uint64_t *)&unk_1016607C0);
  uint64_t v35 = __chkstk_darwin(v34 - 8);
  uint64_t v105 = (char *)&v101 - ((v36 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v35);
  uint64_t v107 = (const void **)((char *)&v101 - v37);
  uint64_t v116 = *(void *)(v0 + 160);
  if (qword_101636958 != -1) {
    goto LABEL_101;
  }
  while (1)
  {
    uint64_t v38 = sub_100010324(v25, (uint64_t)qword_10170DAB8);
    int64_t v134 = v26;
    uint64_t v39 = *(void (**)(unint64_t, uint64_t, uint64_t))(v26 + 16);
    v39(v33, v38, v25);
    v39(v31, v33, v25);
    uint64_t v40 = *(int *)(v21 + 40);
    uint64_t v103 = v21;
    uint64_t v41 = &v129[v40];
    uint64_t v102 = &v129[v40];
    uint64_t v42 = type metadata accessor for DirectorySequence();
    uint64_t v43 = *(void *)(v42 - 8);
    uint64_t v117 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v43 + 56);
    uint64_t v126 = v43 + 56;
    v117(v41, 1, 1, v42);
    uint64_t v44 = v129;
    v39((unint64_t)v129, v31, v25);
    *(void *)&v44[*(int *)(v21 + 36)] = v116;
    int v109 = v39;
    unint64_t v108 = v26 + 16;
    v39((unint64_t)v120, v31, v25);
    swift_retain();
    int64_t v118 = v33;
    uint64_t v45 = v121;
    DirectorySequence.init(at:includingPropertiesForKeys:options:)();
    unint64_t v46 = *(void (**)(size_t, uint64_t))(v134 + 8);
    v134 += 8;
    size_t v106 = v31;
    v46(v31, v25);
    uint64_t v119 = (void (**)(char *, uint64_t))v42;
    v117(v45, 0, 1, v42);
    uint64_t v47 = (uint64_t)v45;
    int64_t v48 = v118;
    sub_100062604(v47, (uint64_t)v102, (uint64_t *)&unk_101653C90);
    uint64_t v49 = v110;
    sub_10001D608((uint64_t)v129, v110, &qword_101659458);
    uint64_t v50 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v111 + 56);
    uint64_t v51 = (uint64_t)v105;
    uint64_t v52 = v103;
    v50(v105, 1, 1, v103);
    sub_10001DAB4(v51, &qword_101659460);
    sub_10001D608(v49, v51, &qword_101659458);
    v50((char *)v51, 0, 1, v52);
    uint64_t v53 = v107;
    sub_10001D608(v51, (uint64_t)v107, (uint64_t *)&unk_1016607C0);
    uint64_t v129 = (char *)v46;
    v46(v48, v25);
    unint64_t v54 = sub_100B768CC(v53);
    sub_10001DAB4((uint64_t)v53, (uint64_t *)&unk_1016607C0);
    if (qword_1016370F0 != -1) {
      swift_once();
    }
    uint64_t v55 = sub_100010324(v25, (uint64_t)qword_10170ED28);
    unint64_t v56 = v109;
    v109(v48, v55, v25);
    size_t v57 = v106;
    v56(v106, v48, v25);
    uint64_t v58 = v122;
    uint64_t v59 = v25;
    uint64_t v60 = v123;
    uint64_t v111 = v122 + *(int *)(v123 + 40);
    uint64_t v61 = v117;
    ((void (*)(void))v117)();
    v56(v58, v57, v59);
    *(void *)(v58 + *(int *)(v60 + 36)) = v116;
    uint64_t v104 = v59;
    v56((size_t)v120, v57, v59);
    swift_retain();
    uint64_t v62 = (uint64_t)v121;
    DirectorySequence.init(at:includingPropertiesForKeys:options:)();
    ((void (*)(size_t, uint64_t))v129)(v57, v59);
    v61((char *)v62, 0, 1, (uint64_t)v119);
    sub_100062604(v62, v111, (uint64_t *)&unk_101653C90);
    uint64_t v63 = v113;
    sub_10001D608(v122, v113, &qword_101645750);
    unint64_t v26 = v115 + 56;
    uint64_t v64 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v115 + 56);
    uint64_t v65 = (uint64_t)v112;
    uint64_t v66 = v123;
    v64(v112, 1, 1, v123);
    sub_10001DAB4(v65, &qword_101645758);
    sub_10001D608(v63, v65, &qword_101645750);
    v64((char *)v65, 0, 1, v66);
    uint64_t v67 = v114;
    sub_10001D608(v65, (uint64_t)v114, (uint64_t *)&unk_101653CA0);
    ((void (*)(int64_t, uint64_t))v129)(v118, v104);
    size_t v31 = sub_100B782FC(v67);
    sub_10001DAB4((uint64_t)v67, (uint64_t *)&unk_101653CA0);
    uint64_t v137 = _swiftEmptyArrayStorage;
    unint64_t v33 = *(void *)(v31 + 16);
    int64_t v134 = v1;
    if (!v33) {
      break;
    }
    uint64_t v25 = v31 + ((*(unsigned __int8 *)(v101 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v101 + 80));
    unint64_t v26 = *(void *)(v101 + 72);
    uint64_t v129 = (char *)v31;
    swift_retain();
    uint64_t v68 = (uint64_t)v130;
    while (1)
    {
      sub_100B30D0C(v25, v68, (uint64_t (*)(void))type metadata accessor for OwnerSharingCircle);
      uint64_t v69 = *(void *)(v68 + *(int *)(v133 + 32));
      size_t v31 = *(void *)(v69 + 16);
      if (!v31)
      {
        uint64_t v21 = (uint64_t)_swiftEmptyArrayStorage;
        goto LABEL_7;
      }
      sub_10000588C(&qword_10163BC50);
      uint64_t v70 = *(void *)(v128 + 72);
      int64_t v1 = (*(unsigned __int8 *)(v128 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v128 + 80);
      uint64_t v21 = swift_allocObject();
      size_t v71 = j__malloc_size((const void *)v21);
      if (!v70) {
        break;
      }
      BOOL v72 = v71 - v1 == 0x8000000000000000 && v70 == -1;
      if (v72) {
        goto LABEL_97;
      }
      *(void *)(v21 + 16) = v31;
      *(void *)(v21 + 24) = 2 * ((uint64_t)(v71 - v1) / v70);
      swift_bridgeObjectRetain_n();
      uint64_t v73 = sub_100711B04(&v136, v21 + v1, v31, v69);
      sub_100132C20();
      if (v73 != v31) {
        goto LABEL_95;
      }
      swift_bridgeObjectRelease();
      int64_t v1 = v134;
      uint64_t v68 = (uint64_t)v130;
LABEL_7:
      sub_100B310AC(v68, (uint64_t (*)(void))type metadata accessor for OwnerSharingCircle);
      sub_100442D9C(v21);
      v25 += v26;
      if (!--v33)
      {
        swift_release_n();
        uint64_t v74 = v137;
        goto LABEL_18;
      }
    }
LABEL_94:
    __break(1u);
LABEL_95:
    __break(1u);
LABEL_96:
    __break(1u);
LABEL_97:
    __break(1u);
LABEL_98:
    __break(1u);
LABEL_99:
    __break(1u);
LABEL_100:
    __break(1u);
LABEL_101:
    swift_once();
  }
  swift_release();
  uint64_t v74 = _swiftEmptyArrayStorage;
LABEL_18:
  uint64_t v75 = sub_101158244((uint64_t)v74);
  swift_bridgeObjectRelease();
  uint64_t v76 = 0;
  uint64_t v77 = *(void *)(v75 + 56);
  uint64_t v117 = (void (*)(char *, uint64_t, uint64_t, uint64_t))(v75 + 56);
  uint64_t v126 = v75;
  uint64_t v78 = 1 << *(unsigned char *)(v75 + 32);
  uint64_t v79 = -1;
  if (v78 < 64) {
    uint64_t v79 = ~(-1 << v78);
  }
  unint64_t v80 = v79 & v77;
  int64_t v118 = (unint64_t)(v78 + 63) >> 6;
  uint64_t v122 = v128 + 16;
  uint64_t v123 = v128 + 56;
  uint64_t v121 = (char *)(v128 + 48);
  uint64_t v120 = (void (**)(char *, uint64_t, uint64_t))(v128 + 32);
  uint64_t v119 = (void (**)(char *, uint64_t))(v128 + 8);
  uint64_t v21 = (uint64_t)v124;
  uint64_t v25 = v125;
  while (2)
  {
    if (v80)
    {
      uint64_t v129 = (char *)((v80 - 1) & v80);
      uint64_t v130 = v76;
      unint64_t v84 = __clz(__rbit64(v80)) | ((void)v76 << 6);
LABEL_41:
      uint64_t v89 = v128;
      (*(void (**)(uint64_t, unint64_t, uint64_t))(v128 + 16))(v21, *(void *)(v126 + 48) + *(void *)(v128 + 72) * v84, v25);
      (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v89 + 56))(v21, 0, 1, v25);
      if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v89 + 48))(v21, 1, v25) == 1) {
        goto LABEL_82;
      }
      (*v120)(v135, v21, v25);
      uint64_t v21 = *(void *)(v54 + 16);
      if (v21)
      {
        uint64_t v90 = v127;
        unint64_t v91 = (*(unsigned __int8 *)(v127 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v127 + 80);
        uint64_t v25 = v54 + v91;
        swift_bridgeObjectRetain();
        size_t v31 = 0;
        uint64_t v92 = *(void *)(v90 + 72);
        uint64_t v133 = v91;
        uint64_t v93 = v92 + v91;
        unint64_t v33 = 1;
        while (1)
        {
          sub_100B30D0C(v25, (uint64_t)v7, (uint64_t (*)(void))type metadata accessor for OwnerPeerTrust);
          unint64_t v26 = static UUID.== infix(_:_:)();
          sub_100B310AC((uint64_t)v7, (uint64_t (*)(void))type metadata accessor for OwnerPeerTrust);
          if (v26) {
            break;
          }
          ++v31;
          v25 += v92;
          ++v33;
          v93 += v92;
          if (v21 == v31)
          {
            swift_bridgeObjectRelease();
            int64_t v1 = *(void *)(v54 + 16);
            goto LABEL_47;
          }
        }
        swift_bridgeObjectRelease();
        int64_t v1 = v31 + 1;
        if (__OFADD__(v31, 1)) {
          goto LABEL_99;
        }
        unint64_t v99 = *(void *)(v54 + 16);
        uint64_t v21 = v31;
        if (v1 != v99)
        {
          while (v33 < v99)
          {
            uint64_t v25 = v54 + v93;
            sub_100B30D0C(v54 + v93, (uint64_t)v7, (uint64_t (*)(void))type metadata accessor for OwnerPeerTrust);
            unint64_t v26 = static UUID.== infix(_:_:)();
            sub_100B310AC((uint64_t)v7, (uint64_t (*)(void))type metadata accessor for OwnerPeerTrust);
            if ((v26 & 1) == 0)
            {
              if (v33 != v21)
              {
                if (v21 < 0) {
                  goto LABEL_86;
                }
                size_t v31 = *(void *)(v54 + 16);
                if (v21 >= v31) {
                  goto LABEL_87;
                }
                unint64_t v26 = v21 * v92;
                sub_100B30D0C(v54 + v133 + v21 * v92, v132, (uint64_t (*)(void))type metadata accessor for OwnerPeerTrust);
                if (v33 >= v31) {
                  goto LABEL_88;
                }
                sub_100B30D0C(v54 + v93, v131, (uint64_t (*)(void))type metadata accessor for OwnerPeerTrust);
                if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
                  unint64_t v54 = sub_100BBD3E4(v54);
                }
                if ((unint64_t)v21 >= *(void *)(v54 + 16)) {
                  goto LABEL_89;
                }
                sub_100B5E098(v131, v54 + v133 + v26, (uint64_t (*)(void))type metadata accessor for OwnerPeerTrust);
                if (v33 >= *(void *)(v54 + 16)) {
                  goto LABEL_90;
                }
                sub_100B5E098(v132, v54 + v93, (uint64_t (*)(void))type metadata accessor for OwnerPeerTrust);
              }
              BOOL v82 = __OFADD__(v21++, 1);
              if (v82) {
                goto LABEL_85;
              }
            }
            int64_t v1 = v33 + 1;
            if (__OFADD__(v33, 1)) {
              goto LABEL_84;
            }
            unint64_t v99 = *(void *)(v54 + 16);
            ++v33;
            v93 += v92;
            if (v1 == v99) {
              goto LABEL_47;
            }
          }
          __break(1u);
LABEL_84:
          __break(1u);
LABEL_85:
          __break(1u);
LABEL_86:
          __break(1u);
LABEL_87:
          __break(1u);
LABEL_88:
          __break(1u);
LABEL_89:
          __break(1u);
LABEL_90:
          __break(1u);
          goto LABEL_91;
        }
LABEL_47:
        if (v1 < v21)
        {
LABEL_91:
          __break(1u);
          goto LABEL_92;
        }
        if ((v21 & 0x8000000000000000) == 0) {
          goto LABEL_51;
        }
LABEL_92:
        __break(1u);
LABEL_93:
        __break(1u);
        goto LABEL_94;
      }
      int64_t v1 = 0;
LABEL_51:
      uint64_t v25 = v1 - v21;
      unint64_t v33 = v21 - v1;
      if (__OFADD__(v1, v21 - v1)) {
        goto LABEL_93;
      }
      int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      if (!isUniquelyReferenced_nonNull_native || v21 > *(void *)(v54 + 24) >> 1)
      {
        if (v1 <= v21) {
          int64_t v95 = v21;
        }
        else {
          int64_t v95 = v1;
        }
        unint64_t v54 = sub_100A6F84C(isUniquelyReferenced_nonNull_native, v95, 1, v54);
      }
      unint64_t v96 = v54 + ((*(unsigned __int8 *)(v127 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v127 + 80));
      size_t v31 = *(void *)(v127 + 72);
      int64_t v97 = v31 * v21;
      unint64_t v26 = v96 + v31 * v21;
      swift_arrayDestroy();
      BOOL v72 = v1 == v21;
      uint64_t v21 = (uint64_t)v124;
      uint64_t v25 = v125;
      if (!v72)
      {
        uint64_t v98 = *(void *)(v54 + 16) - v1;
        if (v98 < 0)
        {
          uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
          __break(1u);
          return result;
        }
        if (v97 < (uint64_t)(v31 * v1) || v26 >= v96 + v31 * v1 + v98 * v31)
        {
          swift_arrayInitWithTakeFrontToBack();
        }
        else if (v97 != v31 * v1)
        {
          swift_arrayInitWithTakeBackToFront();
        }
        uint64_t v81 = *(void *)(v54 + 16);
        BOOL v82 = __OFADD__(v81, v33);
        uint64_t v83 = v81 + v33;
        if (v82) {
          goto LABEL_96;
        }
        *(void *)(v54 + 16) = v83;
      }
      (*v119)(v135, v25);
      int64_t v1 = v134;
      unint64_t v80 = (unint64_t)v129;
      uint64_t v76 = v130;
      continue;
    }
    break;
  }
  int64_t v85 = (int64_t)(v76 + 1);
  if (__OFADD__(v76, 1)) {
    goto LABEL_98;
  }
  if (v85 < v118)
  {
    unint64_t v86 = *((void *)v117 + v85);
    int64_t v87 = (int64_t)(v76 + 1);
    if (!v86)
    {
      int64_t v87 = (int64_t)(v76 + 2);
      if ((uint64_t)(v76 + 2) >= v118) {
        goto LABEL_81;
      }
      unint64_t v86 = *((void *)v117 + v87);
      if (!v86)
      {
        int64_t v87 = (int64_t)(v76 + 3);
        if ((uint64_t)(v76 + 3) >= v118) {
          goto LABEL_81;
        }
        unint64_t v86 = *((void *)v117 + v87);
        if (!v86)
        {
          uint64_t v88 = v76 + 4;
          if ((uint64_t)(v76 + 4) >= v118) {
            goto LABEL_81;
          }
          unint64_t v86 = *((void *)v117 + (void)v88);
          if (!v86)
          {
            while (1)
            {
              int64_t v87 = (int64_t)(v88 + 1);
              if (__OFADD__(v88, 1)) {
                goto LABEL_100;
              }
              if (v87 >= v118) {
                goto LABEL_81;
              }
              unint64_t v86 = *((void *)v117 + v87);
              ++v88;
              if (v86) {
                goto LABEL_40;
              }
            }
          }
          int64_t v87 = (int64_t)(v76 + 4);
        }
      }
    }
LABEL_40:
    uint64_t v129 = (char *)((v86 - 1) & v86);
    uint64_t v130 = (char *)v87;
    unint64_t v84 = __clz(__rbit64(v86)) + (v87 << 6);
    goto LABEL_41;
  }
LABEL_81:
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))v123)(v21, 1, 1, v25);
LABEL_82:
  swift_release();
  return v54;
}

uint64_t sub_100AD7024(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for OwnerSharingCircle();
  uint64_t v5 = __chkstk_darwin(v4);
  uint64_t v7 = (char *)&v10 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (*(unsigned __int8 *)(a1 + *(int *)(v5 + 36)) - 1 > 1)
  {
    char v8 = 0;
  }
  else
  {
    char v8 = static UUID.== infix(_:_:)();
    if (a2)
    {
      sub_100B30D0C(a1, (uint64_t)v7, (uint64_t (*)(void))type metadata accessor for OwnerSharingCircle);
      if (v8) {
        char v8 = sub_100DC6050(v7[*(int *)(v4 + 28)], a2);
      }
      else {
        char v8 = 0;
      }
      sub_100B310AC((uint64_t)v7, (uint64_t (*)(void))type metadata accessor for OwnerSharingCircle);
    }
  }
  return v8 & 1;
}

uint64_t sub_100AD7148()
{
  return static UUID.== infix(_:_:)() & 1;
}

uint64_t sub_100AD7198()
{
  return static UUID.== infix(_:_:)() & 1;
}

uint64_t sub_100AD71E8@<X0>(uint64_t *a1@<X8>)
{
  sub_100D26904(a1);
  if (v1)
  {
    static os_log_type_t.error.getter();
    if (qword_101637260 != -1) {
      swift_once();
    }
    sub_10000588C((uint64_t *)&unk_10163AD00);
    uint64_t v3 = swift_allocObject();
    *(_OWORD *)(v3 + 16) = xmmword_101347BA0;
    uint64_t v4 = UUID.uuidString.getter();
    uint64_t v6 = v5;
    *(void *)(v3 + 56) = &type metadata for String;
    unint64_t v7 = sub_10000B4CC();
    *(void *)(v3 + 64) = v7;
    *(void *)(v3 + 32) = v4;
    *(void *)(v3 + 40) = v6;
    swift_errorRetain();
    sub_10000588C(&qword_101638D40);
    uint64_t v8 = String.init<A>(describing:)();
    *(void *)(v3 + 96) = &type metadata for String;
    *(void *)(v3 + 104) = v7;
    *(void *)(v3 + 72) = v8;
    *(void *)(v3 + 80) = v9;
    os_log(_:dso:log:_:_:)();
    swift_errorRelease();
    swift_bridgeObjectRelease();
    uint64_t v10 = type metadata accessor for SharingCircleSecretValue();
    return (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 56))(a1, 1, 1, v10);
  }
  else
  {
    uint64_t v12 = type metadata accessor for SharingCircleSecretValue();
    return (*(uint64_t (**)(uint64_t *, void, uint64_t, uint64_t))(*(void *)(v12 - 8) + 56))(a1, 0, 1, v12);
  }
}

uint64_t sub_100AD73C0(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t v6 = sub_10000588C(&qword_101638CF0);
  __chkstk_darwin(v6 - 8);
  uint64_t v8 = (char *)v17 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = type metadata accessor for UUID();
  uint64_t v10 = *(void *)(v9 - 8);
  __chkstk_darwin(v9);
  uint64_t v12 = (char *)v17 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = type metadata accessor for OwnerSharingCircle();
  if (*(unsigned char *)(a1 + *(int *)(v13 + 28)) != 3)
  {
    char v15 = 0;
    return v15 & 1;
  }
  uint64_t v14 = v13;
  sub_10001D074(a2, (uint64_t)v8, &qword_101638CF0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48))(v8, 1, v9) == 1)
  {
    sub_10001DAB4((uint64_t)v8, &qword_101638CF0);
    if ((a3 & 1) == 0)
    {
      char v15 = 1;
      return v15 & 1;
    }
LABEL_8:
    char v15 = *(unsigned char *)(a1 + *(int *)(v14 + 36)) == 1;
    return v15 & 1;
  }
  (*(void (**)(char *, char *, uint64_t))(v10 + 32))(v12, v8, v9);
  char v15 = static UUID.== infix(_:_:)();
  (*(void (**)(char *, uint64_t))(v10 + 8))(v12, v9);
  if (v15 & 1) != 0 && (a3) {
    goto LABEL_8;
  }
  return v15 & 1;
}

uint64_t sub_100AD75B8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v184 = a1;
  uint64_t v171 = a2;
  uint64_t v3 = type metadata accessor for OwnerPeerTrust();
  uint64_t v4 = *(void *)(v3 - 8);
  uint64_t v5 = __chkstk_darwin(v3);
  uint64_t v170 = (uint64_t)&v159 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5);
  uint64_t v164 = (uint64_t)&v159 - v7;
  uint64_t v8 = sub_10000588C(&qword_101638CF0);
  uint64_t v9 = __chkstk_darwin(v8 - 8);
  os_log_type_t v198 = (char *)&v159 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = __chkstk_darwin(v9);
  uint64_t v200 = (char *)&v159 - v12;
  uint64_t v13 = __chkstk_darwin(v11);
  uint64_t v192 = (char *)&v159 - v14;
  __chkstk_darwin(v13);
  uint64_t v202 = (char *)&v159 - v15;
  uint64_t v16 = type metadata accessor for UUID();
  uint64_t v195 = *(void *)(v16 - 8);
  uint64_t v17 = __chkstk_darwin(v16);
  uint64_t v199 = (char *)&v159 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v19 = __chkstk_darwin(v17);
  unint64_t v217 = (char *)&v159 - v20;
  uint64_t v21 = __chkstk_darwin(v19);
  uint64_t v213 = (char *)&v159 - v22;
  uint64_t v23 = __chkstk_darwin(v21);
  os_log_type_t v212 = (char *)&v159 - v24;
  __chkstk_darwin(v23);
  uint64_t v181 = (char *)&v159 - v25;
  uint64_t v26 = type metadata accessor for OwnerSharingCircle();
  uint64_t v27 = *(void *)(v26 - 8);
  uint64_t v28 = __chkstk_darwin(v26);
  uint64_t v165 = (uint64_t)&v159 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v28);
  uint64_t v205 = (uint64_t)&v159 - v30;
  uint64_t v31 = sub_10000588C((uint64_t *)&unk_101653C90);
  __chkstk_darwin(v31 - 8);
  uint64_t v214 = (char *)&v159 - ((v32 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v33 = sub_10000588C(&qword_101645750);
  unint64_t v215 = *(char **)(v33 - 8);
  uint64_t v216 = v33;
  uint64_t v34 = __chkstk_darwin(v33);
  uint64_t v210 = (char *)&v159 - ((v35 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v34);
  uint64_t v211 = (uint64_t)&v159 - v36;
  uint64_t v37 = type metadata accessor for URL();
  uint64_t v38 = *(void **)(v37 - 8);
  uint64_t v39 = __chkstk_darwin(v37);
  uint64_t v207 = (void (**)(char *, uint64_t, uint64_t))((char *)&v159 - ((v40 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v41 = __chkstk_darwin(v39);
  v206 = (char *)&v159 - v42;
  __chkstk_darwin(v41);
  uint64_t v44 = (char *)&v159 - v43;
  uint64_t v45 = sub_10000588C((uint64_t *)&unk_101653CA0);
  uint64_t v46 = __chkstk_darwin(v45 - 8);
  uint64_t v208 = (void (*)(char *, uint64_t, uint64_t))((char *)&v159 - ((v47 + 15) & 0xFFFFFFFFFFFFFFF0));
  __chkstk_darwin(v46);
  uint64_t v209 = (uint64_t)&v159 - v48;
  uint64_t v49 = sub_10000588C((uint64_t *)&unk_101638D10);
  uint64_t v50 = __chkstk_darwin(v49 - 8);
  uint64_t v169 = (char *)&v159 - ((v51 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v50);
  uint64_t v53 = (char *)&v159 - v52;
  uint64_t v179 = sub_10000588C((uint64_t *)&unk_1016607D0);
  uint64_t v54 = __chkstk_darwin(v179);
  uint64_t v167 = (uint64_t)&v159 - ((v55 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v56 = __chkstk_darwin(v54);
  uint64_t v180 = (char *)&v159 - v57;
  __chkstk_darwin(v56);
  uint64_t v172 = v4;
  uint64_t v58 = *(void (**)(void))(v4 + 56);
  uint64_t v166 = (uint64_t)&v159 - v59;
  uint64_t v190 = v3;
  uint64_t v161 = v4 + 56;
  uint64_t v160 = v58;
  v58();
  uint64_t v191 = v27;
  uint64_t v60 = *(void (**)(uint64_t, void, uint64_t, uint64_t))(v27 + 56);
  uint64_t v168 = v53;
  uint64_t v204 = v26;
  uint64_t v163 = v27 + 56;
  v162 = v60;
  v60((uint64_t)v53, 1, 1, v26);
  uint64_t v182 = *(void *)(v2 + 160);
  if (qword_1016370F0 != -1) {
    goto LABEL_66;
  }
LABEL_2:
  uint64_t v61 = v37;
  uint64_t v62 = sub_100010324(v37, (uint64_t)qword_10170ED28);
  uint64_t v185 = v38;
  uint64_t v63 = (char *)(v38 + 2);
  uint64_t v64 = (void (*)(char *, uint64_t, uint64_t))v38[2];
  unint64_t v183 = v44;
  v64(v44, v62, v37);
  uint64_t v65 = v206;
  v64(v206, (uint64_t)v44, v37);
  uint64_t v66 = v216;
  uint64_t v67 = (uint64_t)v210;
  unint64_t v203 = &v210[*(int *)(v216 + 40)];
  uint64_t v68 = (uint64_t)v203;
  unint64_t v201 = (void (**)(char *, uint64_t))type metadata accessor for DirectorySequence();
  uint64_t v37 = *((void *)*(v201 - 1) + 7);
  ((void (*)(uint64_t, uint64_t, uint64_t, void (**)(char *, uint64_t)))v37)(v68, 1, 1, v201);
  v64((char *)v67, (uint64_t)v65, v61);
  *(void *)(v67 + *(int *)(v66 + 36)) = v182;
  uint64_t v178 = v63;
  uint64_t v177 = v64;
  v64((char *)v207, (uint64_t)v65, v61);
  swift_retain();
  uint64_t v69 = (uint64_t)v214;
  DirectorySequence.init(at:includingPropertiesForKeys:options:)();
  uint64_t v38 = (void *)v185[1];
  ++v185;
  ((void (*)(char *, uint64_t))v38)(v65, v61);
  ((void (*)(uint64_t, void, uint64_t, void (**)(char *, uint64_t)))v37)(v69, 0, 1, v201);
  sub_100062604(v69, (uint64_t)v203, (uint64_t *)&unk_101653C90);
  uint64_t v70 = v211;
  sub_10001D608(v67, v211, &qword_101645750);
  uint64_t v71 = v216;
  BOOL v72 = (void (*)(void (*)(char *, uint64_t, uint64_t), uint64_t, uint64_t, uint64_t))*((void *)v215 + 7);
  uint64_t v73 = (uint64_t)v208;
  v72(v208, 1, 1, v216);
  sub_10001DAB4(v73, &qword_101645758);
  sub_10001D608(v70, v73, &qword_101645750);
  v72((void (*)(char *, uint64_t, uint64_t))v73, 0, 1, v71);
  uint64_t v74 = (const void **)v209;
  sub_10001D608(v73, v209, (uint64_t *)&unk_101653CA0);
  uint64_t v176 = (void (*)(char *, uint64_t))v38;
  ((void (*)(char *, uint64_t))v38)(v183, v61);
  size_t v75 = sub_100B782FC(v74);
  sub_10001DAB4((uint64_t)v74, (uint64_t *)&unk_101653CA0);
  size_t v76 = v75;
  uint64_t v189 = *(void *)(v75 + 16);
  if (!v189)
  {
LABEL_52:
    swift_release();
    uint64_t v143 = (uint64_t)v168;
    uint64_t v144 = v166;
    goto LABEL_54;
  }
  uint64_t v175 = v61;
  unint64_t v77 = 0;
  uint64_t v186 = 0;
  size_t v188 = v75 + ((*(unsigned __int8 *)(v191 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v191 + 80));
  unint64_t v203 = (char *)(v195 + 16);
  uint64_t v78 = v195 + 56;
  uint64_t v44 = (char *)(v195 + 48);
  uint64_t v207 = (void (**)(char *, uint64_t, uint64_t))(v195 + 32);
  v197 = (void (**)(uint64_t, char *, uint64_t))(v195 + 40);
  unint64_t v201 = (void (**)(char *, uint64_t))(v195 + 8);
  uint64_t v174 = (unsigned int (**)(uint64_t, uint64_t, uint64_t))(v172 + 48);
  uint64_t v173 = (void *)0x8000000101402BA0;
  uint64_t v79 = (uint64_t)v192;
  unint64_t v80 = v202;
  uint64_t v216 = v195 + 56;
  size_t v187 = v76;
  unint64_t v215 = (char *)(v195 + 48);
  while (1)
  {
    if (v77 >= *(void *)(v76 + 16))
    {
LABEL_62:
      __break(1u);
LABEL_63:
      __break(1u);
LABEL_64:
      __break(1u);
LABEL_65:
      __break(1u);
LABEL_66:
      swift_once();
      goto LABEL_2;
    }
    uint64_t v81 = v205;
    sub_100B30D0C(v188 + *(void *)(v191 + 72) * v77, v205, (uint64_t (*)(void))type metadata accessor for OwnerSharingCircle);
    uint64_t v82 = *(void *)(v81 + *(int *)(v204 + 32));
    uint64_t v38 = *(void **)(v82 + 16);
    if (v38)
    {
      uint64_t v44 = (char *)v79;
      sub_10000588C(&qword_10163BC50);
      uint64_t v37 = *(void *)(v195 + 72);
      unint64_t v83 = (*(unsigned __int8 *)(v195 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v195 + 80);
      unint64_t v84 = (void *)swift_allocObject();
      size_t v85 = j__malloc_size(v84);
      if (!v37) {
        goto LABEL_63;
      }
      if (v85 - v83 == 0x8000000000000000 && v37 == -1) {
        goto LABEL_65;
      }
      v84[2] = v38;
      v84[3] = 2 * ((uint64_t)(v85 - v83) / v37);
      swift_bridgeObjectRetain_n();
      uint64_t v87 = sub_100711B04(&v218, (char *)v84 + v83, v38, v82);
      sub_100132C20();
      if ((void *)v87 != v38) {
        goto LABEL_64;
      }
      swift_bridgeObjectRelease();
      uint64_t v78 = v216;
      uint64_t v88 = v84;
      uint64_t v79 = (uint64_t)v44;
    }
    else
    {
      uint64_t v88 = _swiftEmptyArrayStorage;
    }
    unint64_t v196 = v77;
    uint64_t v89 = v88[2];
    unint64_t v194 = v78 & 0xFFFFFFFFFFFFLL | 0xA0D1000000000000;
    if (v89) {
      break;
    }
    uint64_t v129 = *(void **)v78;
    swift_retain();
    uint64_t v37 = (uint64_t)_swiftEmptyDictionarySingleton;
LABEL_42:
    uint64_t v38 = v129;
    ((void (*)(char *, uint64_t, uint64_t, uint64_t))v129)(v80, 1, 1, v16);
    uint64_t v44 = v215;
LABEL_43:
    swift_release_n();
    if (*(void *)(v37 + 16) && (unint64_t v130 = sub_1007240CC(v184), (v131 & 1) != 0))
    {
      (*(void (**)(uint64_t, unint64_t, uint64_t))(v195 + 16))(v79, *(void *)(v37 + 56) + *(void *)(v195 + 72) * v130, v16);
      uint64_t v132 = 0;
    }
    else
    {
      uint64_t v132 = 1;
    }
    ((void (*)(uint64_t, uint64_t, uint64_t, uint64_t))v38)(v79, v132, 1, v16);
    swift_bridgeObjectRelease();
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))v44)(v79, 1, v16) != 1)
    {
      uint64_t v44 = v181;
      (*v207)(v181, v79, v16);
      uint64_t v133 = v182;
      if (qword_101636958 != -1) {
        swift_once();
      }
      uint64_t v134 = v175;
      uint64_t v135 = sub_100010324(v175, (uint64_t)qword_10170DAB8);
      uint64_t v136 = v183;
      v177(v183, v135, v134);
      v137._uint64_t countAndFlagsBits = 0xD000000000000014;
      v137._object = v173;
      prohibitAsyncContext(functionName:)(v137);
      uint64_t v218 = v190;
      sub_10000588C(&qword_1016607E0);
      uint64_t v138 = String.init<A>(describing:)();
      uint64_t v140 = v139;
      uint64_t v37 = (uint64_t)&v159;
      __chkstk_darwin(v38);
      *(&v159 - 6) = v133;
      *(&v159 - 5) = (uint64_t)v44;
      *(&v159 - 4) = (uint64_t)v136;
      *(&v159 - 3) = v138;
      *(&v159 - 2) = v140;
      uint64_t v141 = (uint64_t)v180;
      uint64_t v142 = v186;
      OS_dispatch_queue.sync<A>(execute:)();
      uint64_t v186 = v142;
      swift_bridgeObjectRelease();
      v176(v136, v134);
      (*v201)(v44, v16);
      if ((*v174)(v141, 1, v190) == 1)
      {
        sub_100B310AC(v205, (uint64_t (*)(void))type metadata accessor for OwnerSharingCircle);
        sub_10001DAB4(v141, (uint64_t *)&unk_1016607D0);
        unint64_t v80 = v202;
        uint64_t v78 = v216;
        uint64_t v79 = (uint64_t)v192;
        goto LABEL_5;
      }
      swift_release();
      uint64_t v143 = (uint64_t)v168;
      sub_10001DAB4((uint64_t)v168, (uint64_t *)&unk_101638D10);
      uint64_t v144 = v166;
      sub_10001DAB4(v166, (uint64_t *)&unk_1016607D0);
      uint64_t v145 = v164;
      sub_100B30DB4(v141, v164, (uint64_t (*)(void))type metadata accessor for OwnerPeerTrust);
      sub_100B30DB4(v145, v144, (uint64_t (*)(void))type metadata accessor for OwnerPeerTrust);
      ((void (*)(uint64_t, void, uint64_t, uint64_t))v160)(v144, 0, 1, v190);
      sub_100B30DB4(v205, v143, (uint64_t (*)(void))type metadata accessor for OwnerSharingCircle);
      v162(v143, 0, 1, v204);
LABEL_54:
      uint64_t v146 = v167;
      sub_10001D608(v144, v167, (uint64_t *)&unk_1016607D0);
      int v147 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v172 + 48))(v146, 1, v190);
      uint64_t v148 = v170;
      uint64_t v149 = (uint64_t)v169;
      if (v147 == 1)
      {
        sub_10001DAB4(v143, (uint64_t *)&unk_101638D10);
        uint64_t v150 = (uint64_t *)&unk_1016607D0;
        uint64_t v151 = v146;
      }
      else
      {
        sub_100B30DB4(v146, v170, (uint64_t (*)(void))type metadata accessor for OwnerPeerTrust);
        sub_10001D608(v143, v149, (uint64_t *)&unk_101638D10);
        if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v191 + 48))(v149, 1, v204) != 1)
        {
          uint64_t v154 = v165;
          sub_100B30DB4(v149, v165, (uint64_t (*)(void))type metadata accessor for OwnerSharingCircle);
          uint64_t v155 = sub_10000588C(&qword_10163BA90);
          uint64_t v156 = v148;
          uint64_t v157 = v171;
          uint64_t v158 = v171 + *(int *)(v155 + 48);
          sub_100B30DB4(v156, v171, (uint64_t (*)(void))type metadata accessor for OwnerPeerTrust);
          sub_100B30DB4(v154, v158, (uint64_t (*)(void))type metadata accessor for OwnerSharingCircle);
          return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v155 - 8) + 56))(v157, 0, 1, v155);
        }
        sub_100B310AC(v148, (uint64_t (*)(void))type metadata accessor for OwnerPeerTrust);
        uint64_t v150 = (uint64_t *)&unk_101638D10;
        uint64_t v151 = v149;
      }
      sub_10001DAB4(v151, v150);
      uint64_t v152 = sub_10000588C(&qword_10163BA90);
      return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v152 - 8) + 56))(v171, 1, 1, v152);
    }
    sub_100B310AC(v205, (uint64_t (*)(void))type metadata accessor for OwnerSharingCircle);
    sub_10001DAB4(v79, &qword_101638CF0);
LABEL_5:
    unint64_t v77 = v196 + 1;
    size_t v76 = v187;
    if (v196 + 1 == v189) {
      goto LABEL_52;
    }
  }
  uint64_t v90 = v88;
  unint64_t v91 = (char *)v88 + ((*(unsigned __int8 *)(v195 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v195 + 80));
  uint64_t v209 = *(void *)(v195 + 72);
  uint64_t v44 = *(char **)(v195 + 16);
  uint64_t v193 = v90;
  swift_retain();
  uint64_t v37 = (uint64_t)_swiftEmptyDictionarySingleton;
  while (1)
  {
    uint64_t v214 = (char *)v37;
    ((void (*)(char *, char *, uint64_t))v44)(v80, v91, v16);
    uint64_t v38 = *(void **)v78;
    (*(void (**)(char *, void, uint64_t, uint64_t))v78)(v80, 0, 1, v16);
    int64_t v95 = (void (*)(uint64_t, char *, uint64_t))v44;
    uint64_t v44 = v215;
    unint64_t v96 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))v215;
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))v215)(v80, 1, v16) == 1)
    {
      uint64_t v79 = (uint64_t)v192;
      uint64_t v37 = (uint64_t)v214;
      goto LABEL_43;
    }
    uint64_t v210 = v91;
    uint64_t v211 = v89;
    int64_t v97 = v212;
    uint64_t v208 = *v207;
    v208(v212, (uint64_t)v80, v16);
    sub_100B22DA4((unint64_t *)&qword_101638B10, (void (*)(uint64_t))&type metadata accessor for UUID);
    uint64_t v218 = dispatch thunk of CustomStringConvertible.description.getter();
    unint64_t v219 = v98;
    v99._uint64_t countAndFlagsBits = 124;
    v99._object = (void *)0xE100000000000000;
    String.append(_:)(v99);
    v100._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v100);
    swift_bridgeObjectRelease();
    uint64_t v101 = String.utf8Data.getter();
    unint64_t v103 = v102;
    swift_bridgeObjectRelease();
    uint64_t v218 = v101;
    unint64_t v219 = v103;
    sub_1000362FC();
    uint64_t v104 = v213;
    DataProtocol.stableUUID.getter();
    sub_10001CFB8(v101, v103);
    uint64_t v105 = (uint64_t)v217;
    v95((uint64_t)v217, v104, v16);
    uint64_t v106 = (uint64_t)v200;
    uint64_t v44 = (char *)v95;
    v95((uint64_t)v200, v97, v16);
    ((void (*)(uint64_t, void, uint64_t, uint64_t))v38)(v106, 0, 1, v16);
    unsigned int v107 = v96(v106, 1, v16);
    v206 = (char *)v38;
    if (v107 == 1)
    {
      sub_10001DAB4(v106, &qword_101638CF0);
      uint64_t v37 = (uint64_t)v214;
      swift_bridgeObjectRetain();
      unint64_t v108 = sub_1007240CC(v105);
      char v110 = v109;
      swift_bridgeObjectRelease();
      if (v110)
      {
        char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
        uint64_t v218 = v37;
        uint64_t v94 = v211;
        if ((isUniquelyReferenced_nonNull_native & 1) == 0)
        {
          sub_100E7F31C();
          uint64_t v37 = v218;
        }
        uint64_t v112 = v108 * v209;
        uint64_t v93 = *v201;
        (*v201)((char *)(*(void *)(v37 + 48) + v108 * v209), v16);
        uint64_t v37 = v218;
        uint64_t v113 = *(void *)(v218 + 56) + v112;
        uint64_t v92 = (uint64_t)v198;
        v208(v198, v113, v16);
        sub_100166888(v108, v37);
        swift_bridgeObjectRelease();
        uint64_t v78 = v216;
        ((void (*)(uint64_t, void, uint64_t, uint64_t))v206)(v92, 0, 1, v16);
      }
      else
      {
        uint64_t v92 = (uint64_t)v198;
        uint64_t v78 = v216;
        ((void (*)(char *, uint64_t, uint64_t, uint64_t))v38)(v198, 1, 1, v16);
        uint64_t v93 = *v201;
        uint64_t v94 = v211;
      }
      v93(v217, v16);
      sub_10001DAB4(v92, &qword_101638CF0);
      goto LABEL_20;
    }
    uint64_t v37 = (uint64_t)v208;
    v208(v199, v106, v16);
    uint64_t v114 = v214;
    int v115 = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v218 = (uint64_t)v114;
    unint64_t v117 = sub_1007240CC(v105);
    uint64_t v118 = *((void *)v114 + 2);
    BOOL v119 = (v116 & 1) == 0;
    uint64_t v120 = v118 + v119;
    if (__OFADD__(v118, v119))
    {
      __break(1u);
LABEL_61:
      __break(1u);
      goto LABEL_62;
    }
    char v121 = v116;
    if (*((void *)v114 + 3) < v120) {
      break;
    }
    uint64_t v94 = v211;
    if (v115)
    {
      uint64_t v124 = (void *)v218;
      if ((v116 & 1) == 0) {
        goto LABEL_36;
      }
    }
    else
    {
      sub_100E7F31C();
      uint64_t v124 = (void *)v218;
      if ((v121 & 1) == 0)
      {
LABEL_36:
        v124[(v117 >> 6) + 8] |= 1 << v117;
        uint64_t v125 = v117 * v209;
        ((void (*)(unint64_t, char *, uint64_t))v44)(v124[6] + v117 * v209, v217, v16);
        ((void (*)(uint64_t, char *, uint64_t))v37)(v124[7] + v125, v199, v16);
        uint64_t v126 = v124[2];
        BOOL v127 = __OFADD__(v126, 1);
        uint64_t v128 = v126 + 1;
        if (v127) {
          goto LABEL_61;
        }
        v124[2] = v128;
        goto LABEL_38;
      }
    }
LABEL_34:
    (*v197)(v124[7] + v117 * v209, v199, v16);
LABEL_38:
    uint64_t v37 = v218;
    swift_bridgeObjectRelease();
    uint64_t v93 = *v201;
    (*v201)(v217, v16);
    uint64_t v78 = v216;
LABEL_20:
    v93(v213, v16);
    v93(v212, v16);
    unint64_t v91 = &v210[v209];
    uint64_t v89 = v94 - 1;
    unint64_t v80 = v202;
    if (!v89)
    {
      uint64_t v79 = (uint64_t)v192;
      uint64_t v129 = v206;
      goto LABEL_42;
    }
  }
  sub_100E673F4(v120, v115);
  unint64_t v122 = sub_1007240CC((uint64_t)v217);
  uint64_t v94 = v211;
  if ((v121 & 1) == (v123 & 1))
  {
    unint64_t v117 = v122;
    uint64_t v124 = (void *)v218;
    if ((v121 & 1) == 0) {
      goto LABEL_36;
    }
    goto LABEL_34;
  }
  uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

size_t sub_100AD8DC4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = v4;
  uint64_t v100 = a1;
  uint64_t v9 = sub_10000588C((uint64_t *)&unk_101653C90);
  __chkstk_darwin(v9 - 8);
  unint64_t v96 = (char *)&v85 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v106 = sub_10000588C((uint64_t *)&unk_101660AB0);
  uint64_t v97 = *(void *)(v106 - 8);
  uint64_t v11 = __chkstk_darwin(v106);
  uint64_t v93 = (char *)&v85 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v11);
  uint64_t v95 = (uint64_t)&v85 - v13;
  uint64_t v92 = type metadata accessor for URL();
  uint64_t v105 = *(void *)(v92 - 8);
  uint64_t v14 = __chkstk_darwin(v92);
  uint64_t v88 = (char *)&v85 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = __chkstk_darwin(v14);
  uint64_t v89 = (char *)&v85 - v17;
  __chkstk_darwin(v16);
  uint64_t v104 = (char *)&v85 - v18;
  uint64_t v19 = sub_10000588C(&qword_101659448);
  uint64_t v20 = __chkstk_darwin(v19 - 8);
  unint64_t v91 = (char *)&v85 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v20);
  uint64_t v94 = (uint64_t)&v85 - v22;
  uint64_t v23 = type metadata accessor for MemberSharingCircle();
  uint64_t v24 = __chkstk_darwin(v23);
  uint64_t v85 = (uint64_t)&v85 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v26 = __chkstk_darwin(v24);
  uint64_t v28 = (char *)&v85 - v27;
  __chkstk_darwin(v26);
  uint64_t v30 = (char *)&v85 - v29;
  uint64_t v31 = sub_10000588C((uint64_t *)&unk_101653D50);
  __chkstk_darwin(v31 - 8);
  uint64_t v33 = (char *)&v85 - ((v32 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v34 = a4 + *(int *)(v23 + 24);
  sub_100ACEADC(v34, (uint64_t)v33);
  uint64_t v35 = type metadata accessor for SharedBeaconRecord(0);
  uint64_t v36 = *(uint64_t (**)(char *, uint64_t, uint64_t))(*(void *)(v35 - 8) + 48);
  unint64_t v98 = v33;
  uint64_t v37 = v36(v33, 1, v35);
  uint64_t v103 = v23;
  uint64_t v101 = a2;
  if (v37 == 1)
  {
    if (qword_101636888 != -1) {
      swift_once();
    }
    uint64_t v38 = type metadata accessor for Logger();
    sub_100010324(v38, (uint64_t)qword_10170D788);
    sub_100B30D0C(a4, (uint64_t)v30, (uint64_t (*)(void))type metadata accessor for MemberSharingCircle);
    uint64_t v39 = Logger.logObject.getter();
    os_log_type_t v40 = static os_log_type_t.error.getter();
    int v41 = v40;
    if (os_log_type_enabled(v39, v40))
    {
      uint64_t v42 = swift_slowAlloc();
      uint64_t v43 = swift_slowAlloc();
      uint64_t v90 = v43;
      *(_DWORD *)uint64_t v42 = 141558275;
      uint64_t v107 = 1752392040;
      v108[0] = v43;
      uint64_t v99 = a3;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v42 + 12) = 2081;
      unint64_t v86 = (char *)(v42 + 14);
      LODWORD(v87) = v41;
      type metadata accessor for UUID();
      sub_100B22DA4((unint64_t *)&qword_101638B10, (void (*)(uint64_t))&type metadata accessor for UUID);
      uint64_t v44 = dispatch thunk of CustomStringConvertible.description.getter();
      uint64_t v107 = sub_1008FA0F0(v44, v45, v108);
      a3 = v99;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      sub_100B310AC((uint64_t)v30, (uint64_t (*)(void))type metadata accessor for MemberSharingCircle);
      _os_log_impl((void *)&_mh_execute_header, v39, (os_log_type_t)v87, "No shared beacon record for beaconIdentifier: %{private,mask.hash}s.", (uint8_t *)v42, 0x16u);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      sub_100B310AC((uint64_t)v30, (uint64_t (*)(void))type metadata accessor for MemberSharingCircle);
    }
  }
  __chkstk_darwin(v37);
  *(&v85 - 2) = v5;
  *(&v85 - 1) = v34;
  sub_10000588C(&qword_10163B9E0);
  QueueSynchronizer.conditionalSync<A>(_:)();
  uint64_t v90 = 0;
  uint64_t v46 = type metadata accessor for BeaconNamingRecord();
  int v47 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v46 - 8) + 48))(a3, 1, v46);
  uint64_t v102 = a4;
  if (v47 == 1)
  {
    if (qword_101636888 != -1) {
      swift_once();
    }
    uint64_t v48 = type metadata accessor for Logger();
    sub_100010324(v48, (uint64_t)qword_10170D788);
    sub_100B30D0C(a4, (uint64_t)v28, (uint64_t (*)(void))type metadata accessor for MemberSharingCircle);
    uint64_t v49 = Logger.logObject.getter();
    os_log_type_t v50 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v49, v50))
    {
      uint64_t v51 = swift_slowAlloc();
      uint64_t v52 = swift_slowAlloc();
      *(_DWORD *)uint64_t v51 = 141558275;
      uint64_t v107 = 1752392040;
      v108[0] = v52;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v51 + 12) = 2081;
      type metadata accessor for UUID();
      sub_100B22DA4((unint64_t *)&qword_101638B10, (void (*)(uint64_t))&type metadata accessor for UUID);
      uint64_t v53 = dispatch thunk of CustomStringConvertible.description.getter();
      uint64_t v107 = sub_1008FA0F0(v53, v54, v108);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      sub_100B310AC((uint64_t)v28, (uint64_t (*)(void))type metadata accessor for MemberSharingCircle);
      _os_log_impl((void *)&_mh_execute_header, v49, v50, "No beaconName record to delete for beaconIdentifier: %{private,mask.hash}s.", (uint8_t *)v51, 0x16u);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      sub_100B310AC((uint64_t)v28, (uint64_t (*)(void))type metadata accessor for MemberSharingCircle);
    }
  }
  uint64_t v99 = v5;
  uint64_t v87 = *(void *)(v5 + 160);
  if (qword_1016370C8 != -1) {
    swift_once();
  }
  uint64_t v55 = v92;
  sub_100010324(v92, (uint64_t)qword_10170ECE0);
  UUID.uuidString.getter();
  uint64_t v56 = v104;
  URL.appendingPathComponent(_:isDirectory:)();
  swift_bridgeObjectRelease();
  uint64_t v57 = *(void (**)(char *, char *, uint64_t))(v105 + 16);
  uint64_t v58 = v89;
  v57(v89, v56, v55);
  uint64_t v59 = v106;
  uint64_t v60 = (uint64_t)v93;
  unint64_t v86 = &v93[*(int *)(v106 + 40)];
  uint64_t v61 = (uint64_t)v86;
  uint64_t v62 = type metadata accessor for DirectorySequence();
  uint64_t v63 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v62 - 8) + 56);
  v63(v61, 1, 1, v62);
  v57((char *)v60, v58, v55);
  *(void *)(v60 + *(int *)(v59 + 36)) = v87;
  v57(v88, v58, v55);
  swift_retain();
  uint64_t v64 = (uint64_t)v96;
  DirectorySequence.init(at:includingPropertiesForKeys:options:)();
  uint64_t v105 = *(void *)(v105 + 8);
  ((void (*)(char *, uint64_t))v105)(v58, v55);
  v63(v64, 0, 1, v62);
  sub_100062604(v64, (uint64_t)v86, (uint64_t *)&unk_101653C90);
  uint64_t v65 = v95;
  sub_10001D608(v60, v95, (uint64_t *)&unk_101660AB0);
  uint64_t v66 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v97 + 56);
  uint64_t v67 = (uint64_t)v91;
  uint64_t v68 = v106;
  v66(v91, 1, 1, v106);
  sub_10001DAB4(v67, (uint64_t *)&unk_101660AC0);
  sub_10001D608(v65, v67, (uint64_t *)&unk_101660AB0);
  v66((char *)v67, 0, 1, v68);
  uint64_t v69 = v94;
  sub_10001D608(v67, v94, &qword_101659448);
  ((void (*)(char *, uint64_t))v105)(v104, v55);
  sub_10000588C(&qword_101659450);
  uint64_t v70 = (void *)swift_allocObject();
  sub_10001D608(v69, (uint64_t)v70 + *(void *)(class metadata base offset for _SequenceBox + *v70 + 16), &qword_101659448);
  size_t v71 = sub_100B79014((const void **)((char *)v70
                                    + *(void *)(class metadata base offset for _SequenceBox + *v70 + 16)));
  swift_setDeallocating();
  sub_10001DAB4((uint64_t)v70 + *(void *)(class metadata base offset for _SequenceBox + *v70 + 16), &qword_101659448);
  swift_deallocClassInstance();
  uint64_t v72 = v102;
  if (!*(void *)(v71 + 16))
  {
    if (qword_101636888 != -1) {
      swift_once();
    }
    uint64_t v73 = type metadata accessor for Logger();
    sub_100010324(v73, (uint64_t)qword_10170D788);
    uint64_t v74 = v85;
    sub_100B30D0C(v72, v85, (uint64_t (*)(void))type metadata accessor for MemberSharingCircle);
    size_t v75 = Logger.logObject.getter();
    os_log_type_t v76 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v75, v76))
    {
      uint64_t v77 = swift_slowAlloc();
      uint64_t v78 = swift_slowAlloc();
      *(_DWORD *)uint64_t v77 = 141558275;
      uint64_t v107 = 1752392040;
      v108[0] = v78;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v77 + 12) = 2081;
      type metadata accessor for UUID();
      sub_100B22DA4((unint64_t *)&qword_101638B10, (void (*)(uint64_t))&type metadata accessor for UUID);
      uint64_t v79 = dispatch thunk of CustomStringConvertible.description.getter();
      uint64_t v107 = sub_1008FA0F0(v79, v80, v108);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      sub_100B310AC(v74, (uint64_t (*)(void))type metadata accessor for MemberSharingCircle);
      _os_log_impl((void *)&_mh_execute_header, v75, v76, "No sharedSecrets records to delete for circleIdentifier: %{private,mask.hash}s.", (uint8_t *)v77, 0x16u);
      swift_arrayDestroy();
      uint64_t v72 = v102;
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      sub_100B310AC(v74, (uint64_t (*)(void))type metadata accessor for MemberSharingCircle);
    }
  }
  uint64_t v81 = swift_bridgeObjectRetain();
  uint64_t v82 = sub_10070FB1C(v81);
  swift_bridgeObjectRelease();
  uint64_t v83 = v99;
  swift_retain();
  sub_100B3575C(v82, v83);
  swift_release();
  swift_release();
  sub_100B30D0C(v72, v100, (uint64_t (*)(void))type metadata accessor for MemberSharingCircle);
  sub_10001D608((uint64_t)v98, v101, (uint64_t *)&unk_101653D50);
  return v71;
}

size_t sub_100AD9CD4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = v3;
  uint64_t v74 = a3;
  uint64_t v76 = a1;
  uint64_t v6 = type metadata accessor for OwnerSharingCircle();
  __chkstk_darwin(v6);
  uint64_t v61 = (uint64_t)&v61 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = sub_10000588C((uint64_t *)&unk_101653C90);
  __chkstk_darwin(v8 - 8);
  size_t v71 = (char *)&v61 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = sub_10000588C((uint64_t *)&unk_101660AB0);
  uint64_t v72 = *(void *)(v10 - 8);
  uint64_t v11 = __chkstk_darwin(v10);
  uint64_t v69 = (char *)&v61 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v11);
  uint64_t v70 = (uint64_t)&v61 - v13;
  uint64_t v14 = type metadata accessor for URL();
  uint64_t v15 = *(void *)(v14 - 8);
  uint64_t v16 = __chkstk_darwin(v14);
  uint64_t v65 = (char *)&v61 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v18 = __chkstk_darwin(v16);
  uint64_t v20 = (char *)&v61 - v19;
  __chkstk_darwin(v18);
  uint64_t v22 = (char *)&v61 - v21;
  uint64_t v23 = sub_10000588C(&qword_101659448);
  uint64_t v24 = __chkstk_darwin(v23 - 8);
  uint64_t v67 = (char *)&v61 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v24);
  uint64_t v68 = (uint64_t)&v61 - v26;
  uint64_t v77 = v6;
  uint64_t v75 = a2;
  uint64_t v73 = v4;
  uint64_t v64 = *(void *)(v4 + 160);
  if (qword_1016370C8 != -1) {
    swift_once();
  }
  sub_100010324(v14, (uint64_t)qword_10170ECE0);
  UUID.uuidString.getter();
  uint64_t v66 = v22;
  URL.appendingPathComponent(_:isDirectory:)();
  swift_bridgeObjectRelease();
  uint64_t v27 = v14;
  uint64_t v28 = *(void (**)(char *, char *, uint64_t))(v15 + 16);
  v28(v20, v22, v27);
  uint64_t v29 = (uint64_t)v69;
  uint64_t v62 = &v69[*(int *)(v10 + 40)];
  uint64_t v30 = (uint64_t)v62;
  uint64_t v31 = type metadata accessor for DirectorySequence();
  uint64_t v32 = *(void *)(v31 - 8);
  uint64_t v78 = v15;
  uint64_t v63 = v10;
  uint64_t v33 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v32 + 56);
  v33(v30, 1, 1, v31);
  v28((char *)v29, v20, v27);
  uint64_t v34 = v65;
  *(void *)(v29 + *(int *)(v10 + 36)) = v64;
  v28(v34, v20, v27);
  swift_retain();
  uint64_t v35 = (uint64_t)v71;
  DirectorySequence.init(at:includingPropertiesForKeys:options:)();
  uint64_t v36 = *(void (**)(char *, uint64_t))(v78 + 8);
  v78 += 8;
  v36(v20, v27);
  v33(v35, 0, 1, v31);
  sub_100062604(v35, (uint64_t)v62, (uint64_t *)&unk_101653C90);
  uint64_t v37 = v70;
  sub_10001D608(v29, v70, (uint64_t *)&unk_101660AB0);
  uint64_t v38 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v72 + 56);
  uint64_t v39 = (uint64_t)v67;
  uint64_t v40 = v63;
  v38(v67, 1, 1, v63);
  sub_10001DAB4(v39, (uint64_t *)&unk_101660AC0);
  sub_10001D608(v37, v39, (uint64_t *)&unk_101660AB0);
  v38((char *)v39, 0, 1, v40);
  uint64_t v41 = v39;
  uint64_t v42 = v68;
  sub_10001D608(v41, v68, &qword_101659448);
  v36(v66, v27);
  sub_10000588C(&qword_101659450);
  uint64_t v43 = (void *)swift_allocObject();
  sub_10001D608(v42, (uint64_t)v43 + *(void *)(class metadata base offset for _SequenceBox + *v43 + 16), &qword_101659448);
  size_t v44 = sub_100B79014((const void **)((char *)v43
                                    + *(void *)(class metadata base offset for _SequenceBox + *v43 + 16)));
  swift_setDeallocating();
  sub_10001DAB4((uint64_t)v43 + *(void *)(class metadata base offset for _SequenceBox + *v43 + 16), &qword_101659448);
  swift_deallocClassInstance();
  uint64_t v45 = v75;
  if (!*(void *)(v44 + 16))
  {
    if (qword_101636888 != -1) {
      swift_once();
    }
    uint64_t v46 = type metadata accessor for Logger();
    sub_100010324(v46, (uint64_t)qword_10170D788);
    uint64_t v47 = v61;
    sub_100B30D0C(v45, v61, (uint64_t (*)(void))type metadata accessor for OwnerSharingCircle);
    uint64_t v48 = Logger.logObject.getter();
    os_log_type_t v49 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v48, v49))
    {
      uint64_t v50 = swift_slowAlloc();
      uint64_t v51 = swift_slowAlloc();
      *(_DWORD *)uint64_t v50 = 141558275;
      uint64_t v79 = 1752392040;
      v80[0] = v51;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v50 + 12) = 2081;
      type metadata accessor for UUID();
      sub_100B22DA4((unint64_t *)&qword_101638B10, (void (*)(uint64_t))&type metadata accessor for UUID);
      uint64_t v52 = dispatch thunk of CustomStringConvertible.description.getter();
      uint64_t v79 = sub_1008FA0F0(v52, v53, v80);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      sub_100B310AC(v61, (uint64_t (*)(void))type metadata accessor for OwnerSharingCircle);
      _os_log_impl((void *)&_mh_execute_header, v48, v49, "No sharedSecrets records to delete for circleIdentifier: %{private,mask.hash}s.", (uint8_t *)v50, 0x16u);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      sub_100B310AC(v47, (uint64_t (*)(void))type metadata accessor for OwnerSharingCircle);
    }
  }
  uint64_t v54 = swift_bridgeObjectRetain();
  uint64_t v55 = sub_10070FB1C(v54);
  swift_bridgeObjectRelease();
  uint64_t v56 = sub_101158244(v55);
  uint64_t v57 = swift_release();
  __chkstk_darwin(v57);
  uint64_t v59 = v73;
  uint64_t v58 = v74;
  *(&v61 - 2) = v56;
  *(&v61 - 1) = v59;
  sub_100B360B4(v58, (void (*)(uint64_t, void))sub_100B5E070, (uint64_t)(&v61 - 4));
  swift_bridgeObjectRelease();
  sub_100B30D0C(v45, v76, (uint64_t (*)(void))type metadata accessor for OwnerSharingCircle);
  return v44;
}

uint64_t sub_100ADA5EC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X8>)
{
  uint64_t v70 = a3;
  uint64_t v76 = a2;
  uint64_t v77 = a4;
  uint64_t v5 = type metadata accessor for OwnerPeerTrust();
  uint64_t v78 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v7 = (char *)&v61 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = sub_10000588C((uint64_t *)&unk_101653C90);
  __chkstk_darwin(v8 - 8);
  uint64_t v74 = (char *)&v61 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = sub_10000588C(&qword_101645750);
  uint64_t v11 = *(void *)(v10 - 8);
  uint64_t v12 = __chkstk_darwin(v10);
  uint64_t v72 = (char *)&v61 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v12);
  uint64_t v73 = (uint64_t)&v61 - v14;
  uint64_t v15 = type metadata accessor for URL();
  uint64_t v16 = *(void *)(v15 - 8);
  uint64_t v17 = __chkstk_darwin(v15);
  uint64_t v69 = (char *)&v61 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v19 = __chkstk_darwin(v17);
  uint64_t v21 = (char *)&v61 - v20;
  __chkstk_darwin(v19);
  uint64_t v23 = (char *)&v61 - v22;
  uint64_t v24 = sub_10000588C((uint64_t *)&unk_101653CA0);
  uint64_t v25 = __chkstk_darwin(v24 - 8);
  uint64_t v27 = (char *)&v61 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v25);
  size_t v71 = (const void **)((char *)&v61 - v28);
  if (sub_100DC7280(a1 + *(int *)(v5 + 20), v76))
  {
    uint64_t v63 = v27;
    uint64_t v67 = v11;
    uint64_t v68 = a1;
    uint64_t v61 = v7;
    uint64_t v76 = v5;
    uint64_t v70 = *(void *)(v70 + 160);
    if (qword_1016370F0 != -1) {
      swift_once();
    }
    uint64_t v29 = sub_100010324(v15, (uint64_t)qword_10170ED28);
    uint64_t v75 = v16;
    uint64_t v30 = *(void (**)(char *, uint64_t, uint64_t))(v16 + 16);
    uint64_t v66 = v23;
    v30(v23, v29, v15);
    v30(v21, (uint64_t)v23, v15);
    uint64_t v31 = (uint64_t)v72;
    uint64_t v64 = &v72[*(int *)(v10 + 40)];
    uint64_t v32 = (uint64_t)v64;
    uint64_t v65 = v10;
    uint64_t v33 = type metadata accessor for DirectorySequence();
    uint64_t v34 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v33 - 8) + 56);
    v34(v32, 1, 1, v33);
    v30((char *)v31, (uint64_t)v21, v15);
    uint64_t v35 = *(int *)(v10 + 36);
    uint64_t v36 = v69;
    *(void *)(v31 + v35) = v70;
    uint64_t v62 = v15;
    v30(v36, (uint64_t)v21, v15);
    swift_retain();
    uint64_t v37 = (uint64_t)v74;
    DirectorySequence.init(at:includingPropertiesForKeys:options:)();
    uint64_t v38 = *(void (**)(char *, uint64_t))(v75 + 8);
    v75 += 8;
    v38(v21, v15);
    v34(v37, 0, 1, v33);
    sub_100062604(v37, (uint64_t)v64, (uint64_t *)&unk_101653C90);
    uint64_t v39 = v73;
    sub_10001D608(v31, v73, &qword_101645750);
    uint64_t v40 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v67 + 56);
    uint64_t v41 = (uint64_t)v63;
    uint64_t v42 = v65;
    v40(v63, 1, 1, v65);
    sub_10001DAB4(v41, &qword_101645758);
    sub_10001D608(v39, v41, &qword_101645750);
    v40((char *)v41, 0, 1, v42);
    uint64_t v43 = v71;
    sub_10001D608(v41, (uint64_t)v71, (uint64_t *)&unk_101653CA0);
    v38(v66, v62);
    size_t v44 = sub_100B782FC(v43);
    uint64_t v45 = sub_10001DAB4((uint64_t)v43, (uint64_t *)&unk_101653CA0);
    __chkstk_darwin(v45);
    uint64_t v46 = v68;
    *(&v61 - 2) = (char *)v68;
    unint64_t v47 = *(void *)(sub_1000A3E84((uint64_t (*)(char *))sub_100B5E078, &v61 - 4, v44) + 16);
    swift_bridgeObjectRelease();
    if (v47 <= 1)
    {
      uint64_t v60 = v77;
      sub_100B30D0C(v46, v77, (uint64_t (*)(void))type metadata accessor for OwnerPeerTrust);
      return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(v78 + 56))(v60, 0, 1, v76);
    }
    else
    {
      uint64_t v48 = v76;
      if (qword_101636888 != -1) {
        swift_once();
      }
      uint64_t v49 = type metadata accessor for Logger();
      sub_100010324(v49, (uint64_t)qword_10170D788);
      uint64_t v50 = (uint64_t)v61;
      sub_100B30D0C(v46, (uint64_t)v61, (uint64_t (*)(void))type metadata accessor for OwnerPeerTrust);
      uint64_t v51 = Logger.logObject.getter();
      os_log_type_t v52 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v51, v52))
      {
        uint64_t v53 = swift_slowAlloc();
        uint64_t v54 = swift_slowAlloc();
        *(_DWORD *)uint64_t v53 = 141558275;
        uint64_t v79 = 1752392040;
        v80[0] = v54;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        *(_WORD *)(v53 + 12) = 2081;
        type metadata accessor for UUID();
        sub_100B22DA4((unint64_t *)&qword_101638B10, (void (*)(uint64_t))&type metadata accessor for UUID);
        uint64_t v55 = dispatch thunk of CustomStringConvertible.description.getter();
        uint64_t v79 = sub_1008FA0F0(v55, v56, v80);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        sub_100B310AC(v50, (uint64_t (*)(void))type metadata accessor for OwnerPeerTrust);
        _os_log_impl((void *)&_mh_execute_header, v51, v52, "No peerTrust to delete for peerTrustIdentifier: %{private,mask.hash}s.\nThere are more shared beacons with the sharee.", (uint8_t *)v53, 0x16u);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
      }
      else
      {
        sub_100B310AC(v50, (uint64_t (*)(void))type metadata accessor for OwnerPeerTrust);
      }

      return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v78 + 56))(v77, 1, 1, v48);
    }
  }
  else
  {
    uint64_t v57 = v77;
    uint64_t v58 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v78 + 56);
    return v58(v57, 1, 1, v5);
  }
}

uint64_t sub_100ADAE70(uint64_t a1, uint64_t a2)
{
  if (*(void *)(*(void *)(a1 + *(int *)(type metadata accessor for OwnerSharingCircle() + 32)) + 16))
  {
    uint64_t v3 = type metadata accessor for OwnerPeerTrust();
    sub_1007240CC(a2 + *(int *)(v3 + 20));
  }
  else
  {
    char v4 = 0;
  }
  return v4 & 1;
}

void *sub_100ADAEDC(uint64_t a1)
{
  uint64_t v142 = sub_10000588C(&qword_10163BA10);
  uint64_t v141 = *(void *)(v142 - 8);
  __chkstk_darwin(v142);
  uint64_t v158 = (uint64_t)&v124 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v157 = sub_10000588C((uint64_t *)&unk_101660AB0);
  uint64_t v125 = *(void *)(v157 - 8);
  uint64_t v3 = __chkstk_darwin(v157);
  uint64_t v140 = (char *)&v124 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v3);
  uint64_t v139 = (uint64_t)&v124 - v5;
  uint64_t v6 = sub_10000588C(&qword_101659448);
  uint64_t v7 = __chkstk_darwin(v6 - 8);
  uint64_t v138 = (char *)&v124 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v7);
  uint64_t v137 = (uint64_t)&v124 - v9;
  uint64_t v10 = type metadata accessor for OwnerSharingCircle();
  uint64_t v11 = *(void *)(v10 - 8);
  uint64_t v12 = __chkstk_darwin(v10);
  uint64_t v143 = (char *)&v124 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = __chkstk_darwin(v12);
  uint64_t v154 = (uint64_t *)((char *)&v124 - v15);
  __chkstk_darwin(v14);
  uint64_t v17 = (char *)&v124 - v16;
  uint64_t v156 = type metadata accessor for UUID();
  uint64_t v18 = *(void *)(v156 - 8);
  __chkstk_darwin(v156);
  uint64_t v20 = (char *)&v124 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v21 = sub_10000588C((uint64_t *)&unk_101653C90);
  __chkstk_darwin(v21 - 8);
  uint64_t v148 = (char *)&v124 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v153 = (char *)sub_10000588C(&qword_101645750);
  uint64_t v132 = (void (*)(char *, uint64_t))*((void *)v153 - 1);
  uint64_t v23 = __chkstk_darwin(v153);
  uint64_t v152 = (uint64_t)&v124 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v23);
  uint64_t v129 = (uint64_t *)((char *)&v124 - v25);
  uint64_t v26 = type metadata accessor for URL();
  uint64_t v27 = *(void *)(v26 - 8);
  uint64_t v150 = v26;
  uint64_t v151 = v27;
  uint64_t v28 = __chkstk_darwin(v26);
  int v147 = (char *)&v124 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v30 = __chkstk_darwin(v28);
  uint64_t v146 = (char *)&v124 - v31;
  __chkstk_darwin(v30);
  uint64_t v160 = (char *)&v124 - v32;
  uint64_t v33 = sub_10000588C((uint64_t *)&unk_101653CA0);
  uint64_t v34 = __chkstk_darwin(v33 - 8);
  uint64_t v126 = (char *)&v124 - ((v35 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v34);
  BOOL v127 = (const void **)((char *)&v124 - v36);
  int64_t v37 = *(void *)(a1 + 16);
  uint64_t v38 = _swiftEmptyArrayStorage;
  uint64_t v161 = v10;
  uint64_t v130 = v11;
  uint64_t v155 = (void *)v18;
  uint64_t v128 = a1;
  int64_t v159 = v37;
  if (v37)
  {
    v162 = _swiftEmptyArrayStorage;
    sub_1000B7034(0, v37, 0);
    uint64_t v39 = a1 + ((*(unsigned __int8 *)(v11 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v11 + 80));
    uint64_t v40 = *(void *)(v11 + 72);
    uint64_t v41 = v156;
    do
    {
      sub_100B30D0C(v39, (uint64_t)v17, (uint64_t (*)(void))type metadata accessor for OwnerSharingCircle);
      (*(void (**)(char *, char *, uint64_t))(v18 + 16))(v20, &v17[*(int *)(v10 + 20)], v41);
      sub_100B310AC((uint64_t)v17, (uint64_t (*)(void))type metadata accessor for OwnerSharingCircle);
      uint64_t v38 = v162;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        sub_1000B7034(0, v38[2] + 1, 1);
        uint64_t v38 = v162;
      }
      unint64_t v43 = v38[2];
      unint64_t v42 = v38[3];
      if (v43 >= v42 >> 1)
      {
        sub_1000B7034(v42 > 1, v43 + 1, 1);
        uint64_t v38 = v162;
      }
      _OWORD v38[2] = v43 + 1;
      unint64_t v44 = (unint64_t)v38
          + ((*((unsigned __int8 *)v155 + 80) + 32) & ~(unint64_t)*((unsigned __int8 *)v155 + 80))
          + v155[9] * v43;
      uint64_t v41 = v156;
      ((void (*)(unint64_t, char *, uint64_t))v155[4])(v44, v20, v156);
      v162 = v38;
      v39 += v40;
      --v37;
      uint64_t v10 = v161;
    }
    while (v37);
  }
  uint64_t v131 = sub_101158244((uint64_t)v38);
  swift_bridgeObjectRelease();
  uint64_t v145 = *(void *)(v149 + 160);
  if (qword_1016370F0 != -1) {
    goto LABEL_44;
  }
  while (1)
  {
    uint64_t v45 = v150;
    uint64_t v46 = sub_100010324(v150, (uint64_t)qword_10170ED28);
    uint64_t v48 = v151 + 16;
    unint64_t v47 = *(void (**)(char *, uint64_t, uint64_t))(v151 + 16);
    uint64_t v49 = v160;
    v47(v160, v46, v45);
    uint64_t v50 = v146;
    v47(v146, (uint64_t)v49, v45);
    uint64_t v51 = v152;
    uint64_t v52 = (uint64_t)v153;
    uint64_t v156 = v152 + *((int *)v153 + 10);
    uint64_t v53 = v156;
    uint64_t v54 = type metadata accessor for DirectorySequence();
    uint64_t v55 = *(void *)(v54 - 8);
    uint64_t v144 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v55 + 56);
    uint64_t v56 = v55 + 56;
    v144(v53, 1, 1, v54);
    v47((char *)v51, (uint64_t)v50, v45);
    *(void *)(v51 + *(int *)(v52 + 36)) = v145;
    uint64_t v136 = v48;
    uint64_t v135 = v47;
    v47(v147, (uint64_t)v50, v45);
    swift_retain();
    uint64_t v57 = (uint64_t)v148;
    DirectorySequence.init(at:includingPropertiesForKeys:options:)();
    uint64_t v58 = v150;
    uint64_t v60 = v151 + 8;
    uint64_t v59 = *(void (**)(char *, uint64_t))(v151 + 8);
    v59(v50, v150);
    uint64_t v61 = v60;
    uint64_t v134 = v54;
    uint64_t v133 = v56;
    v144(v57, 0, 1, v54);
    sub_100062604(v57, v156, (uint64_t *)&unk_101653C90);
    uint64_t v62 = v129;
    sub_10001D608(v152, (uint64_t)v129, &qword_101645750);
    uint64_t v63 = (void (*)(char *, uint64_t, uint64_t, char *))*((void *)v132 + 7);
    uint64_t v64 = (uint64_t)v126;
    uint64_t v65 = (uint64_t)v153;
    v63(v126, 1, 1, v153);
    sub_10001DAB4(v64, &qword_101645758);
    sub_10001D608((uint64_t)v62, v64, &qword_101645750);
    v63((char *)v64, 0, 1, (char *)v65);
    uint64_t v66 = v127;
    sub_10001D608(v64, (uint64_t)v127, (uint64_t *)&unk_101653CA0);
    uint64_t v151 = v61;
    uint64_t v132 = v59;
    v59(v160, v58);
    size_t v67 = sub_100B782FC(v66);
    sub_10001DAB4((uint64_t)v66, (uint64_t *)&unk_101653CA0);
    uint64_t v68 = (char *)sub_100B371A0(v67, v131);
    swift_release();
    swift_bridgeObjectRelease();
    uint64_t v163 = _swiftEmptyArrayStorage;
    uint64_t v69 = *((void *)v68 + 2);
    uint64_t v156 = 0;
    if (!v69) {
      break;
    }
    uint64_t v70 = (uint64_t)&v68[(*(unsigned __int8 *)(v130 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v130 + 80)];
    uint64_t v71 = *(void *)(v130 + 72);
    uint64_t v153 = v68;
    swift_bridgeObjectRetain();
    uint64_t v72 = (uint64_t)v154;
    while (1)
    {
      sub_100B30D0C(v70, v72, (uint64_t (*)(void))type metadata accessor for OwnerSharingCircle);
      uint64_t v74 = *(void *)(v72 + *(int *)(v10 + 32));
      uint64_t v75 = *(void *)(v74 + 16);
      if (!v75)
      {
        uint64_t v73 = _swiftEmptyArrayStorage;
        goto LABEL_12;
      }
      sub_10000588C(&qword_10163BC50);
      uint64_t v76 = v155[9];
      unint64_t v77 = (*((unsigned __int8 *)v155 + 80) + 32) & ~(unint64_t)*((unsigned __int8 *)v155 + 80);
      uint64_t v73 = (void *)swift_allocObject();
      size_t v78 = j__malloc_size(v73);
      if (!v76) {
        break;
      }
      if (v78 - v77 == 0x8000000000000000 && v76 == -1) {
        goto LABEL_43;
      }
      v73[2] = v75;
      v73[3] = 2 * ((uint64_t)(v78 - v77) / v76);
      swift_bridgeObjectRetain_n();
      uint64_t v10 = sub_100711B04(&v162, (char *)v73 + v77, v75, v74);
      sub_100132C20();
      if (v10 != v75) {
        goto LABEL_42;
      }
      swift_bridgeObjectRelease();
      uint64_t v10 = v161;
      uint64_t v72 = (uint64_t)v154;
LABEL_12:
      sub_100B310AC(v72, (uint64_t (*)(void))type metadata accessor for OwnerSharingCircle);
      sub_100442D9C((uint64_t)v73);
      v70 += v71;
      if (!--v69)
      {
        swift_bridgeObjectRelease_n();
        unint64_t v80 = v163;
        goto LABEL_23;
      }
    }
    __break(1u);
LABEL_42:
    __break(1u);
LABEL_43:
    __break(1u);
LABEL_44:
    swift_once();
  }
  swift_bridgeObjectRelease();
  unint64_t v80 = _swiftEmptyArrayStorage;
LABEL_23:
  uint64_t v81 = sub_101158244((uint64_t)v80);
  swift_bridgeObjectRelease();
  uint64_t v82 = (uint64_t)v143;
  int64_t v83 = v159;
  if (v159)
  {
    uint64_t v84 = v128 + ((*(unsigned __int8 *)(v130 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v130 + 80));
    uint64_t v130 = *(void *)(v130 + 72);
    uint64_t v129 = (void *)(v125 + 56);
    swift_bridgeObjectRetain();
    uint64_t v85 = _swiftEmptyArrayStorage;
    unint64_t v86 = &_swiftEmptySetSingleton;
    uint64_t v131 = v81;
    do
    {
      uint64_t v154 = v86;
      uint64_t v155 = v85;
      int64_t v159 = v83;
      uint64_t v152 = v84;
      sub_100B30D0C(v84, v82, (uint64_t (*)(void))type metadata accessor for OwnerSharingCircle);
      if (qword_1016370C8 != -1) {
        swift_once();
      }
      uint64_t v87 = v150;
      sub_100010324(v150, (uint64_t)qword_10170ECE0);
      UUID.uuidString.getter();
      uint64_t v88 = v160;
      URL.appendingPathComponent(_:isDirectory:)();
      swift_bridgeObjectRelease();
      uint64_t v89 = v146;
      uint64_t v90 = v88;
      unint64_t v91 = (void (*)(char *, char *, uint64_t))v135;
      v135(v146, (uint64_t)v90, v87);
      uint64_t v92 = v157;
      uint64_t v93 = v140;
      uint64_t v153 = &v140[*(int *)(v157 + 40)];
      uint64_t v94 = v134;
      uint64_t v95 = v144;
      ((void (*)(void))v144)();
      v91(v93, v89, v87);
      *(void *)&v93[*(int *)(v92 + 36)] = v145;
      v91(v147, v89, v87);
      swift_retain();
      uint64_t v96 = (uint64_t)v148;
      DirectorySequence.init(at:includingPropertiesForKeys:options:)();
      uint64_t v97 = v132;
      v132(v89, v87);
      v95(v96, 0, 1, v94);
      sub_100062604(v96, (uint64_t)v153, (uint64_t *)&unk_101653C90);
      uint64_t v98 = (uint64_t)v93;
      uint64_t v99 = v139;
      sub_10001D608(v98, v139, (uint64_t *)&unk_101660AB0);
      uint64_t v100 = (void (*)(uint64_t, void, uint64_t, uint64_t))*v129;
      uint64_t v101 = (uint64_t)v138;
      uint64_t v102 = v157;
      ((void (*)(char *, uint64_t, uint64_t, uint64_t))*v129)(v138, 1, 1, v157);
      sub_10001DAB4(v101, (uint64_t *)&unk_101660AC0);
      sub_10001D608(v99, v101, (uint64_t *)&unk_101660AB0);
      v100(v101, 0, 1, v102);
      uint64_t v103 = v137;
      sub_10001D608(v101, v137, &qword_101659448);
      v97(v160, v87);
      sub_10000588C(&qword_101659450);
      uint64_t v104 = (void *)swift_allocObject();
      sub_10001D608(v103, (uint64_t)v104 + *(void *)(class metadata base offset for _SequenceBox + *v104 + 16), &qword_101659448);
      size_t v105 = sub_100B79014((const void **)((char *)v104
                                         + *(void *)(class metadata base offset for _SequenceBox + *v104 + 16)));
      swift_setDeallocating();
      sub_10001DAB4((uint64_t)v104 + *(void *)(class metadata base offset for _SequenceBox + *v104 + 16), &qword_101659448);
      swift_deallocClassInstance();
      uint64_t v82 = (uint64_t)v143;
      uint64_t v106 = swift_bridgeObjectRetain();
      uint64_t v107 = sub_10070FB1C(v106);
      swift_bridgeObjectRelease();
      uint64_t v108 = sub_101158244(v107);
      swift_release();
      if (*(void *)(v131 + 16) <= *(void *)(v108 + 16) >> 3)
      {
        v162 = (void *)v108;
        sub_10089EA08(v131);
        char v109 = v162;
      }
      else
      {
        char v109 = sub_1008A160C(v131, v108);
      }
      uint64_t v110 = v156;
      uint64_t v111 = (uint64_t)v154;
      if (v154[2] <= v109[2] >> 3)
      {
        v162 = v109;
        sub_10089EA08((uint64_t)v154);
        uint64_t v112 = v162;
      }
      else
      {
        uint64_t v112 = sub_1008A160C((uint64_t)v154, (uint64_t)v109);
      }
      uint64_t v113 = swift_bridgeObjectRetain();
      unint64_t v86 = (void *)sub_1009DD3E4(v113, v111);
      uint64_t v114 = v149;
      swift_retain();
      int v115 = sub_100B363EC((uint64_t)v112, v114);
      uint64_t v156 = v110;
      swift_bridgeObjectRelease();
      swift_release();
      uint64_t v116 = *(int *)(v142 + 48);
      uint64_t v117 = *(int *)(v142 + 64);
      uint64_t v118 = v158;
      sub_100B30D0C(v82, v158, (uint64_t (*)(void))type metadata accessor for OwnerSharingCircle);
      *(void *)(v118 + v116) = v105;
      *(void *)(v118 + v117) = v115;
      uint64_t v85 = v155;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
        uint64_t v85 = (void *)sub_100A6F9F0(0, v85[2] + 1, 1, (unint64_t)v85);
      }
      int64_t v119 = v159;
      uint64_t v120 = v152;
      unint64_t v122 = v85[2];
      unint64_t v121 = v85[3];
      if (v122 >= v121 >> 1) {
        uint64_t v85 = (void *)sub_100A6F9F0(v121 > 1, v122 + 1, 1, (unint64_t)v85);
      }
      v85[2] = v122 + 1;
      sub_10001D608(v158, (uint64_t)v85+ ((*(unsigned __int8 *)(v141 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v141 + 80))+ *(void *)(v141 + 72) * v122, &qword_10163BA10);
      sub_100B310AC(v82, (uint64_t (*)(void))type metadata accessor for OwnerSharingCircle);
      uint64_t v84 = v120 + v130;
      int64_t v83 = v119 - 1;
    }
    while (v83);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v85 = _swiftEmptyArrayStorage;
  }
  swift_bridgeObjectRelease();
  return v85;
}

uint64_t sub_100ADC0C0(void *a1)
{
  uint64_t v2 = v1;
  uint64_t v51 = type metadata accessor for URL();
  uint64_t v44 = *(void *)(v51 - 8);
  __chkstk_darwin(v51);
  uint64_t v52 = (char *)&v43 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v48 = (void *)type metadata accessor for DispatchWorkItemFlags();
  uint64_t v5 = *(v48 - 1);
  __chkstk_darwin(v48);
  uint64_t v7 = (char *)&v43 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v50 = type metadata accessor for UUID();
  uint64_t v8 = *(void *)(v50 - 8);
  uint64_t v9 = __chkstk_darwin(v50);
  uint64_t v49 = (char *)&v43 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9);
  uint64_t v12 = (char *)&v43 - v11;
  if (qword_101636CB8 != -1) {
    swift_once();
  }
  uint64_t v13 = qword_10170E330;
  uint64_t v15 = a1[3];
  uint64_t v14 = a1[4];
  sub_10001CD44(a1, v15);
  (*(void (**)(uint64_t))(*(void *)(*(void *)(v14 + 8) + 8) + 32))(v15);
  uint64_t v16 = static DispatchWorkItemFlags.barrier.getter();
  __chkstk_darwin(v16);
  *(&v43 - 4) = v13;
  *(&v43 - 3) = (uint64_t)v12;
  *(&v43 - 2) = (uint64_t)sub_1000054FC;
  *(&v43 - 1) = 0;
  OS_dispatch_queue.sync<A>(flags:execute:)();
  (*(void (**)(char *, void *))(v5 + 8))(v7, v48);
  uint64_t v46 = *(void (**)(char *, uint64_t))(v8 + 8);
  uint64_t v47 = v8 + 8;
  uint64_t v45 = v12;
  v46(v12, v50);
  type metadata accessor for BeaconKeyManager(0);
  OSAllocatedUnfairLock.callAsFunction<A>(_:)();
  uint64_t v17 = v53;
  uint64_t v18 = a1[3];
  uint64_t v19 = a1[4];
  uint64_t v20 = sub_10001CD44(a1, v18);
  sub_101310F24((uint64_t)v20, 0, 0, v17, v18, v19);
  swift_release();
  uint64_t v48 = a1;
  sub_10001D010((uint64_t)a1, (uint64_t)&v53);
  uint64_t v21 = swift_allocObject();
  *(void *)(v21 + 16) = v2;
  sub_10001CEB0(&v53, v21 + 24);
  swift_retain();
  unsafeFromAsyncTask<A>(_:)();
  swift_release();
  uint64_t v22 = v48;
  sub_10001D010((uint64_t)v48, (uint64_t)&v53);
  uint64_t v23 = swift_allocObject();
  *(void *)(v23 + 16) = v2;
  sub_10001CEB0(&v53, v23 + 24);
  swift_retain();
  unsafeFromAsyncTask<A>(_:)();
  swift_release();
  sub_10001D010((uint64_t)v22, (uint64_t)&v53);
  uint64_t v24 = swift_allocObject();
  *(void *)(v24 + 16) = v2;
  sub_10001CEB0(&v53, v24 + 24);
  swift_retain();
  unsafeFromAsyncTask<A>(_:)();
  swift_release();
  uint64_t v26 = v22[3];
  uint64_t v25 = v22[4];
  sub_10001CD44(v22, v26);
  uint64_t v27 = *(void (**)(uint64_t))(*(void *)(*(void *)(v25 + 8) + 8) + 32);
  uint64_t v28 = (uint64_t)v49;
  v27(v26);
  uint64_t v29 = sub_100B6E218(v28);
  uint64_t v30 = v29[2];
  if (v30)
  {
    uint64_t v31 = *(void *)(type metadata accessor for BeaconEstimatedLocation() - 8);
    uint64_t v32 = *(unsigned __int8 *)(v31 + 80);
    uint64_t v48 = v29;
    uint64_t v33 = (char *)v29 + ((v32 + 32) & ~v32);
    if (qword_101637030 != -1) {
      swift_once();
    }
    uint64_t v34 = *(void *)(v31 + 72);
    uint64_t v35 = (uint64_t (**)(char *, uint64_t, uint64_t))(v44 + 16);
    uint64_t v36 = (void (**)(char *, uint64_t))(v44 + 8);
    uint64_t v37 = v51;
    uint64_t v38 = v52;
    do
    {
      uint64_t v39 = sub_100010324(v37, (uint64_t)qword_10170EB70);
      uint64_t v40 = (*v35)(v38, v39, v37);
      __chkstk_darwin(v40);
      *(&v43 - 2) = (uint64_t)v52;
      *(&v43 - 1) = v41;
      OS_dispatch_queue.sync<A>(execute:)();
      uint64_t v37 = v51;
      uint64_t v38 = v52;
      (*v36)(v52, v51);
      v33 += v34;
      --v30;
    }
    while (v30);
  }
  swift_bridgeObjectRelease();
  return ((uint64_t (*)(char *, uint64_t))v46)(v49, v50);
}

uint64_t sub_100ADCE0C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v3[3] = a2;
  v3[4] = a3;
  uint64_t v4 = type metadata accessor for UUID();
  v3[5] = v4;
  v3[6] = *(void *)(v4 - 8);
  v3[7] = swift_task_alloc();
  v3[8] = swift_task_alloc();
  return _swift_task_switch(sub_100ADCEDC, 0, 0);
}

uint64_t sub_100ADCEDC()
{
  uint64_t v1 = (void *)v0[4];
  type metadata accessor for BeaconKeyManager(0);
  OSAllocatedUnfairLock.callAsFunction<A>(_:)();
  v0[9] = v0[2];
  uint64_t v3 = v1[3];
  uint64_t v2 = v1[4];
  sub_10001CD44(v1, v3);
  (*(void (**)(uint64_t))(*(void *)(*(void *)(v2 + 8) + 8) + 32))(v3);
  uid_t v4 = getuid();
  sub_100DC5FC0(v4);
  uint64_t v5 = (void *)swift_task_alloc();
  v0[10] = v5;
  *uint64_t v5 = v0;
  v5[1] = sub_100ADD03C;
  uint64_t v6 = v0[7];
  uint64_t v7 = v0[8];
  return sub_10064CC94(v7, v6);
}

uint64_t sub_100ADD03C()
{
  uint64_t v2 = (void *)*v1;
  v2[11] = v0;
  swift_task_dealloc();
  if (v0)
  {
    return _swift_task_switch(sub_100ADD1D8, 0, 0);
  }
  else
  {
    uint64_t v3 = v2[8];
    uint64_t v5 = v2[6];
    uint64_t v4 = v2[7];
    uint64_t v6 = v2[5];
    swift_release();
    uint64_t v7 = *(void (**)(uint64_t, uint64_t))(v5 + 8);
    v7(v4, v6);
    v7(v3, v6);
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v8 = (uint64_t (*)(void))v2[1];
    return v8();
  }
}

uint64_t sub_100ADD1D8()
{
  uint64_t v1 = v0[8];
  uint64_t v3 = v0[6];
  uint64_t v2 = v0[7];
  uint64_t v4 = v0[5];
  swift_release();
  uint64_t v5 = *(void (**)(uint64_t, uint64_t))(v3 + 8);
  v5(v2, v4);
  v5(v1, v4);
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v6 = (uint64_t (*)(void))v0[1];
  return v6();
}

uint64_t sub_100ADD290(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v3[3] = a2;
  v3[4] = a3;
  uint64_t v4 = type metadata accessor for UUID();
  v3[5] = v4;
  v3[6] = *(void *)(v4 - 8);
  v3[7] = swift_task_alloc();
  v3[8] = swift_task_alloc();
  return _swift_task_switch(sub_100ADD360, 0, 0);
}

uint64_t sub_100ADD360()
{
  uint64_t v1 = (void *)v0[4];
  type metadata accessor for BeaconKeyManager(0);
  OSAllocatedUnfairLock.callAsFunction<A>(_:)();
  v0[9] = v0[2];
  uint64_t v3 = v1[3];
  uint64_t v2 = v1[4];
  sub_10001CD44(v1, v3);
  (*(void (**)(uint64_t))(*(void *)(*(void *)(v2 + 8) + 8) + 32))(v3);
  uid_t v4 = getuid();
  sub_100DC5FC0(v4);
  uint64_t v5 = (void *)swift_task_alloc();
  v0[10] = v5;
  *uint64_t v5 = v0;
  v5[1] = sub_100ADD4C0;
  uint64_t v7 = v0[7];
  uint64_t v6 = v0[8];
  return sub_10064526C(v7, v6);
}

uint64_t sub_100ADD4C0()
{
  uint64_t v2 = (void *)*v1;
  v2[11] = v0;
  swift_task_dealloc();
  if (v0)
  {
    uint64_t v4 = v2[6];
    uint64_t v3 = v2[7];
    uint64_t v5 = v2[5];
    uint64_t v6 = *(void (**)(uint64_t, uint64_t))(v4 + 8);
    v2[12] = v6;
    v2[13] = (v4 + 8) & 0xFFFFFFFFFFFFLL | 0x4F8000000000000;
    v6(v3, v5);
    return _swift_task_switch(sub_100ADD684, 0, 0);
  }
  else
  {
    uint64_t v7 = v2[8];
    uint64_t v8 = v2[5];
    uint64_t v9 = *(void (**)(uint64_t, uint64_t))(v2[6] + 8);
    v9(v2[7], v8);
    v9(v7, v8);
    swift_release();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v10 = (uint64_t (*)(void))v2[1];
    return v10();
  }
}

uint64_t sub_100ADD684()
{
  (*(void (**)(void, void))(v0 + 96))(*(void *)(v0 + 64), *(void *)(v0 + 40));
  swift_release();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_100ADD718(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v3[15] = a2;
  v3[16] = a3;
  uint64_t v4 = type metadata accessor for UUID();
  v3[17] = v4;
  v3[18] = *(void *)(v4 - 8);
  v3[19] = swift_task_alloc();
  return _swift_task_switch(sub_100ADD7D8, 0, 0);
}

uint64_t sub_100ADD7D8()
{
  uint64_t v1 = qword_1016375E8;
  swift_retain();
  if (v1 != -1) {
    swift_once();
  }
  swift_beginAccess();
  uint64_t result = sub_10001D074((uint64_t)&xmmword_10166E8F0, v0 + 56, (uint64_t *)&unk_101638D30);
  if (*(void *)(v0 + 80))
  {
    sub_10001CEB0((long long *)(v0 + 56), v0 + 16);
    swift_release();
    sub_10001CD44((void *)(v0 + 16), *(void *)(v0 + 40));
    uint64_t v4 = (uint64_t (__cdecl *)())((char *)&dword_101639138 + dword_101639138);
    uint64_t v3 = (void *)swift_task_alloc();
    *(void *)(v0 + 160) = v3;
    *uint64_t v3 = v0;
    v3[1] = sub_100ADD928;
    return v4();
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_100ADD928(uint64_t a1)
{
  *(void *)(*(void *)v1 + 168) = a1;
  swift_task_dealloc();
  return _swift_task_switch(sub_100ADDA28, 0, 0);
}

uint64_t sub_100ADDA28()
{
  uint64_t v1 = (uint64_t)(v0 + 2);
  if (v0[21])
  {
    uint64_t v2 = (void *)v0[16];
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v1);
    uint64_t v3 = v2[3];
    uint64_t v4 = v2[4];
    sub_10001CD44(v2, v3);
    (*(void (**)(uint64_t))(*(void *)(*(void *)(v4 + 8) + 8) + 32))(v3);
    uint64_t v5 = (void *)swift_task_alloc();
    v0[22] = v5;
    *uint64_t v5 = v0;
    v5[1] = sub_100ADDB68;
    uint64_t v6 = v0[19];
    return sub_101106A14(v6);
  }
  else
  {
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v1);
    swift_task_dealloc();
    uint64_t v8 = (uint64_t (*)(void))v0[1];
    return v8();
  }
}

uint64_t sub_100ADDB68()
{
  uint64_t v2 = *(void *)(*(void *)v1 + 152);
  uint64_t v3 = *(void *)(*(void *)v1 + 144);
  uint64_t v4 = *(void *)(*(void *)v1 + 136);
  *(void *)(*(void *)v1 + 184) = v0;
  swift_task_dealloc();
  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v2, v4);
  if (v0) {
    uint64_t v5 = sub_100ADDD44;
  }
  else {
    uint64_t v5 = sub_100ADDCD8;
  }
  return _swift_task_switch(v5, 0, 0);
}

uint64_t sub_100ADDCD8()
{
  swift_release();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_100ADDD44()
{
  swift_release();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_100ADDDB4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X2>, unint64_t a3@<X3>, uint64_t a4@<X8>)
{
  unint64_t v193 = a3;
  uint64_t v188 = a2;
  uint64_t v195 = a1;
  uint64_t v5 = sub_10000588C((uint64_t *)&unk_10163BF10);
  __chkstk_darwin(v5 - 8);
  uint64_t v190 = (uint64_t)v178 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v194 = sub_10000588C((uint64_t *)&unk_101657AD0);
  uint64_t v7 = *(void *)(v194 - 8);
  uint64_t v8 = __chkstk_darwin(v194);
  uint64_t v184 = (uint64_t)v178 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = __chkstk_darwin(v8);
  uint64_t v191 = (uint64_t)v178 - v11;
  uint64_t v12 = __chkstk_darwin(v10);
  uint64_t v187 = (uint64_t)v178 - v13;
  uint64_t v14 = __chkstk_darwin(v12);
  uint64_t v16 = (char *)v178 - v15;
  uint64_t v17 = __chkstk_darwin(v14);
  uint64_t v186 = (uint64_t)v178 - v18;
  __chkstk_darwin(v17);
  uint64_t v189 = (uint64_t)v178 - v19;
  uint64_t v20 = sub_10000588C((uint64_t *)&unk_101653C90);
  __chkstk_darwin(v20 - 8);
  unint64_t v215 = (uint64_t (*)())((char *)v178 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0));
  unint64_t v228 = (void *)sub_10000588C((uint64_t *)&unk_101653C80);
  uint64_t v224 = *(v228 - 1);
  uint64_t v22 = __chkstk_darwin(v228);
  uint64_t v214 = ((char *)v178 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0));
  __chkstk_darwin(v22);
  uint64_t v213 = (uint64_t)v178 - v24;
  os_log_t v227 = (os_log_t)type metadata accessor for URL();
  Class isa = v227[-1].isa;
  uint64_t v25 = __chkstk_darwin(v227);
  os_log_type_t v212 = ((char *)v178 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v27 = __chkstk_darwin(v25);
  uint64_t v211 = (char *)v178 - v28;
  __chkstk_darwin(v27);
  os_log_t v226 = (os_log_t)((char *)v178 - v29);
  uint64_t v30 = sub_10000588C(&qword_1016496E0);
  uint64_t v31 = __chkstk_darwin(v30 - 8);
  uint64_t v210 = (char *)v178 - ((v32 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v31);
  uint64_t v209 = (uint64_t)v178 - v33;
  uint64_t v34 = type metadata accessor for UUID();
  uint64_t v204 = *(void *)(v34 - 8);
  uint64_t v35 = __chkstk_darwin(v34);
  uint64_t v37 = (char *)v178 - ((v36 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v38 = __chkstk_darwin(v35);
  uint64_t v40 = (char *)v178 - v39;
  uint64_t v41 = __chkstk_darwin(v38);
  uint64_t v185 = (char *)v178 - v42;
  uint64_t v43 = __chkstk_darwin(v41);
  uint64_t v192 = (char *)v178 - v44;
  uint64_t v45 = __chkstk_darwin(v43);
  uint64_t v218 = (uint64_t (*)())((char *)v178 - v46);
  __chkstk_darwin(v45);
  uint64_t v216 = (char *)v178 - v47;
  uint64_t v48 = sub_10000588C(&qword_101638CF0);
  __chkstk_darwin(v48 - 8);
  unint64_t v217 = (uint64_t (*)())((char *)v178 - ((v49 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v50 = MACAddress.data.getter();
  unint64_t v52 = v51;
  switch(v51 >> 62)
  {
    case 1uLL:
      LODWORD(v53) = HIDWORD(v50) - v50;
      if (!__OFSUB__(HIDWORD(v50), v50))
      {
        uint64_t v53 = (int)v53;
        goto LABEL_6;
      }
      __break(1u);
      goto LABEL_53;
    case 2uLL:
      uint64_t v55 = *(void *)(v50 + 16);
      uint64_t v54 = *(void *)(v50 + 24);
      BOOL v56 = __OFSUB__(v54, v55);
      uint64_t v53 = v54 - v55;
      if (!v56) {
        goto LABEL_6;
      }
LABEL_53:
      __break(1u);
      goto LABEL_54;
    case 3uLL:
      goto LABEL_15;
    default:
      uint64_t v53 = BYTE6(v51);
LABEL_6:
      if (v53 == 6)
      {
        uint64_t v183 = v7;
        uint64_t v180 = a4;
        type metadata accessor for BeaconKeyManager(0);
        uint64_t v57 = v225;
        uint64_t v58 = OSAllocatedUnfairLock.callAsFunction<A>(_:)();
        uint64_t v59 = v57;
        uint64_t v60 = v230;
        __chkstk_darwin(v58);
        v178[-4] = v60;
        v178[-3] = v61;
        uint64_t v181 = v61;
        unint64_t v182 = v52;
        v178[-2] = v52;
        sub_10000588C((uint64_t *)&unk_101665470);
        OS_dispatch_queue.sync<A>(execute:)();
        swift_release();
        if (*((void *)v230 + 2))
        {
          uint64_t v62 = sub_100A9E234((uint64_t)v230);
          swift_bridgeObjectRelease();
          uint64_t v230 = (char *)_swiftEmptyArrayStorage;
          uint64_t v63 = v62[2];
          uint64_t v179 = v16;
          v178[2] = v62;
          if (v63)
          {
            uint64_t v207 = *(void (**)(uint64_t (*)(), objc_class *, uint64_t))(v204 + 16);
            uint64_t v64 = (objc_class *)((char *)v62
                               + ((*(unsigned __int8 *)(v204 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v204 + 80)));
            uint64_t v203 = *(void *)(v204 + 72);
            uint64_t v65 = (void (**)(uint64_t (*)(), uint64_t, uint64_t, uint64_t))(v204 + 56);
            uint64_t v205 = (uint64_t (**)(uint64_t (*)(), uint64_t, uint64_t))(v204 + 48);
            uint64_t v202 = (void (**)(char *, uint64_t (*)(), uint64_t))(v204 + 32);
            unint64_t v201 = (void (**)(os_log_t, uint64_t, os_log_t))((char *)isa + 16);
            uint64_t v200 = (objc_class **)((char *)isa + 8);
            uint64_t v199 = (void (**)(char *, uint64_t, uint64_t, void *))(v224 + 56);
            uint64_t v208 = v204 + 16;
            os_log_type_t v198 = (void (**)(char *, uint64_t))(v204 + 8);
            uint64_t v66 = v219;
            swift_retain();
            swift_bridgeObjectRetain();
            v206 = v65;
            v178[1] = (unint64_t)v65 & 0xFFFFFFFFFFFFLL | 0xA0D1000000000000;
            uint64_t v68 = v216;
            size_t v67 = v217;
            uint64_t v69 = v218;
            uint64_t v197 = v34;
            while (1)
            {
              v207(v67, v64, v34);
              unint64_t v196 = *v206;
              v196(v67, 0, 1, v34);
              int v70 = (*v205)(v67, 1, v34);
              uint64_t v225 = v59;
              if (v70 == 1) {
                break;
              }
              Class isa = v64;
              uint64_t v224 = v63;
              (*v202)(v68, v67, v34);
              int v222 = (objc_class *)*((void *)v66 + 20);
              if (qword_101636A48 != -1) {
                swift_once();
              }
              os_log_t v71 = v227;
              uint64_t v72 = sub_100010324((uint64_t)v227, (uint64_t)qword_10170DD78);
              uint64_t v73 = *v201;
              os_log_t v74 = v226;
              (*v201)(v226, v72, v71);
              uint64_t v75 = v211;
              v73((os_log_t)v211, (uint64_t)v74, v71);
              uint64_t v76 = v228;
              unint64_t v77 = v214;
              uint64_t v221 = (char *)v214 + *((int *)v228 + 10);
              size_t v78 = v221;
              os_log_t v220 = (os_log_t)type metadata accessor for DirectorySequence();
              uint64_t v79 = (void (*)(char *, uint64_t, uint64_t, os_log_t))*((void *)v220[-1].isa + 7);
              v79(v78, 1, 1, v220);
              v73(v77, (uint64_t)v75, v71);
              *(Class *)((char *)&v77->isa + *((int *)v76 + 9)) = v222;
              v73(v212, (uint64_t)v75, v71);
              swift_retain();
              unint64_t v80 = v215;
              DirectorySequence.init(at:includingPropertiesForKeys:options:)();
              int v222 = *v200;
              ((void (*)(char *, os_log_t))v222)(v75, v71);
              v79((char *)v80, 0, 1, v220);
              sub_100062604((uint64_t)v80, (uint64_t)v221, (uint64_t *)&unk_101653C90);
              uint64_t v81 = (uint64_t)v77;
              uint64_t v82 = v213;
              sub_10001D608(v81, v213, (uint64_t *)&unk_101653C80);
              int64_t v83 = (void (*)(uint64_t, void, uint64_t, void *))*v199;
              uint64_t v84 = (uint64_t)v210;
              uint64_t v85 = v228;
              (*v199)(v210, 1, 1, v228);
              sub_10001DAB4(v84, &qword_101653CB0);
              sub_10001D608(v82, v84, (uint64_t *)&unk_101653C80);
              v83(v84, 0, 1, v85);
              sub_10001D608(v84, v209, &qword_1016496E0);
              uint64_t v86 = ((uint64_t (*)(os_log_t, os_log_t))v222)(v226, v227);
              __chkstk_darwin(v86);
              uint64_t v68 = v216;
              v178[-2] = v216;
              uint64_t v87 = v225;
              sub_1006590AC(sub_100B5DDAC, (uint64_t)&v178[-4]);
              uint64_t v89 = v88;
              uint64_t v66 = v219;
              swift_retain();
              uint64_t v90 = sub_100B33934(v89, (uint64_t)v66);
              uint64_t v59 = v87;
              swift_bridgeObjectRelease();
              swift_release();
              sub_100446414((uint64_t)v90);
              uint64_t v34 = v197;
              (*v198)(v68, v197);
              uint64_t v64 = (Class)((char *)isa + v203);
              uint64_t v63 = v224 - 1;
              size_t v67 = v217;
              uint64_t v69 = v218;
              if (v224 == 1)
              {
                uint64_t v109 = v194;
                uint64_t v110 = v196;
                goto LABEL_26;
              }
            }
            uint64_t v109 = v194;
          }
          else
          {
            uint64_t v110 = *(void (**)(uint64_t (*)(), uint64_t, uint64_t, uint64_t))(v204 + 56);
            swift_retain();
            swift_bridgeObjectRetain();
            size_t v67 = v217;
            uint64_t v69 = v218;
            uint64_t v109 = v194;
LABEL_26:
            uint64_t v225 = v59;
            v110(v67, 1, 1, v34);
          }
          uint64_t v111 = v183;
          unint64_t v112 = v193;
          swift_release();
          swift_bridgeObjectRelease_n();
          uint64_t v113 = v230;
          unint64_t v114 = *((void *)v230 + 2);
          if (v114 > 1)
          {
            if (qword_101636888 != -1) {
              swift_once();
            }
            uint64_t v115 = type metadata accessor for Logger();
            sub_100010324(v115, (uint64_t)qword_10170D788);
            uint64_t v116 = v204;
            (*(void (**)(uint64_t (*)(), uint64_t, uint64_t))(v204 + 16))(v69, v195, v34);
            swift_bridgeObjectRetain_n();
            swift_bridgeObjectRetain_n();
            uint64_t v117 = Logger.logObject.getter();
            os_log_type_t v118 = static os_log_type_t.error.getter();
            int v119 = v118;
            if (os_log_type_enabled(v117, v118))
            {
              uint64_t v120 = swift_slowAlloc();
              unint64_t v228 = (void *)swift_slowAlloc();
              uint64_t v230 = (char *)v228;
              *(_DWORD *)uint64_t v120 = 141558787;
              uint64_t v229 = 1752392040;
              UnsafeMutableRawBufferPointer.copyMemory(from:)();
              *(_WORD *)(v120 + 12) = 2081;
              LODWORD(v227) = v119;
              sub_100B22DA4((unint64_t *)&qword_101638B10, (void (*)(uint64_t))&type metadata accessor for UUID);
              os_log_t v226 = v117;
              uint64_t v121 = dispatch thunk of CustomStringConvertible.description.getter();
              uint64_t v229 = sub_1008FA0F0(v121, v122, (uint64_t *)&v230);
              UnsafeMutableRawBufferPointer.copyMemory(from:)();
              swift_bridgeObjectRelease();
              (*(void (**)(uint64_t (*)(), uint64_t))(v116 + 8))(v69, v34);
              *(_WORD *)(v120 + 22) = 2080;
              swift_bridgeObjectRetain();
              uint64_t v229 = sub_1008FA0F0(v188, v193, (uint64_t *)&v230);
              UnsafeMutableRawBufferPointer.copyMemory(from:)();
              swift_bridgeObjectRelease_n();
              *(_WORD *)(v120 + 32) = 2048;
              swift_bridgeObjectRelease();
              uint64_t v229 = v114;
              unint64_t v112 = v193;
              UnsafeMutableRawBufferPointer.copyMemory(from:)();
              swift_bridgeObjectRelease();
              os_log_t v123 = v226;
              _os_log_impl((void *)&_mh_execute_header, v226, (os_log_type_t)v227, "Warning: Multiple memberCircles found for unknownBeacon: %{private,mask.hash}s,\nownerHandle: %s, owner peer trust count: %ld.", (uint8_t *)v120, 0x2Au);
              swift_arrayDestroy();
              swift_slowDealloc();
              uint64_t v109 = v194;
              swift_slowDealloc();
            }
            else
            {
              swift_bridgeObjectRelease();
              (*(void (**)(uint64_t (*)(), uint64_t))(v116 + 8))(v69, v34);

              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease_n();
            }
            unint64_t v114 = *((void *)v113 + 2);
            uint64_t v111 = v183;
          }
          if (v114)
          {
            uint64_t v126 = v190;
            sub_10001D074((uint64_t)&v113[(*(unsigned __int8 *)(v111 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v111 + 80)], v190, (uint64_t *)&unk_101657AD0);
            BOOL v127 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v111 + 56);
            v127(v126, 0, 1, v109);
          }
          else
          {
            BOOL v127 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v111 + 56);
            uint64_t v126 = v190;
            v127(v190, 1, 1, v109);
          }
          swift_bridgeObjectRelease();
          int v128 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v111 + 48))(v126, 1, v109);
          uint64_t v129 = v192;
          if (v128 == 1)
          {
            sub_10001DAB4(v126, (uint64_t *)&unk_10163BF10);
            if (qword_101636888 != -1) {
              swift_once();
            }
            uint64_t v130 = type metadata accessor for Logger();
            sub_100010324(v130, (uint64_t)qword_10170D788);
            uint64_t v131 = v204;
            uint64_t v132 = v185;
            (*(void (**)(char *, uint64_t, uint64_t))(v204 + 16))(v185, v195, v34);
            swift_bridgeObjectRetain_n();
            uint64_t v133 = Logger.logObject.getter();
            os_log_type_t v134 = static os_log_type_t.error.getter();
            int v135 = v134;
            if (os_log_type_enabled(v133, v134))
            {
              uint64_t v136 = swift_slowAlloc();
              unint64_t v228 = (void *)swift_slowAlloc();
              uint64_t v230 = (char *)v228;
              *(_DWORD *)uint64_t v136 = 141558531;
              uint64_t v229 = 1752392040;
              UnsafeMutableRawBufferPointer.copyMemory(from:)();
              *(_WORD *)(v136 + 12) = 2081;
              os_log_t v227 = v133;
              sub_100B22DA4((unint64_t *)&qword_101638B10, (void (*)(uint64_t))&type metadata accessor for UUID);
              LODWORD(v226) = v135;
              uint64_t v137 = dispatch thunk of CustomStringConvertible.description.getter();
              uint64_t v229 = sub_1008FA0F0(v137, v138, (uint64_t *)&v230);
              UnsafeMutableRawBufferPointer.copyMemory(from:)();
              swift_bridgeObjectRelease();
              (*(void (**)(char *, uint64_t))(v131 + 8))(v132, v34);
              *(_WORD *)(v136 + 22) = 2080;
              swift_bridgeObjectRetain();
              uint64_t v229 = sub_1008FA0F0(v188, v112, (uint64_t *)&v230);
              UnsafeMutableRawBufferPointer.copyMemory(from:)();
              swift_bridgeObjectRelease_n();
              os_log_t v139 = v227;
              _os_log_impl((void *)&_mh_execute_header, v227, (os_log_type_t)v226, "No peer trust found for unknownBeacon: %{private,mask.hash}s, ownerHandle: %s.", (uint8_t *)v136, 0x20u);
              swift_arrayDestroy();
              swift_slowDealloc();
              swift_slowDealloc();
              sub_10001CFB8(v181, v182);
            }
            else
            {
              sub_10001CFB8(v181, v182);
              (*(void (**)(char *, uint64_t))(v131 + 8))(v132, v34);

              swift_bridgeObjectRelease_n();
            }
            return ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))v127)(v180, 1, 1, v194);
          }
          else
          {
            uint64_t v140 = *(int *)(v109 + 48);
            uint64_t v141 = v189;
            uint64_t v142 = (void *)(v189 + v140);
            uint64_t v143 = v126 + v140;
            sub_100B30DB4(v126, v189, (uint64_t (*)(void))type metadata accessor for MemberPeerTrust);
            sub_100B30DB4(v143, (uint64_t)v142, (uint64_t (*)(void))type metadata accessor for MemberSharingCircle);
            if (qword_101636888 != -1) {
              swift_once();
            }
            uint64_t v144 = type metadata accessor for Logger();
            uint64_t v224 = sub_100010324(v144, (uint64_t)qword_10170D788);
            os_log_t v226 = *(os_log_t *)(v204 + 16);
            os_log_t v227 = (os_log_t)(v204 + 16);
            ((void (*)(char *, uint64_t, uint64_t))v226)(v129, v195, v34);
            uint64_t v145 = v186;
            uint64_t v146 = v186 + *(int *)(v109 + 48);
            sub_100B30D0C(v141, v186, (uint64_t (*)(void))type metadata accessor for MemberPeerTrust);
            sub_100B30D0C((uint64_t)v142, v146, (uint64_t (*)(void))type metadata accessor for MemberSharingCircle);
            sub_10001D608(v145, (uint64_t)v179, (uint64_t *)&unk_101657AD0);
            uint64_t v147 = v187;
            uint64_t v148 = v187 + *(int *)(v109 + 48);
            sub_100B30D0C(v141, v187, (uint64_t (*)(void))type metadata accessor for MemberPeerTrust);
            unint64_t v228 = v142;
            sub_100B30D0C((uint64_t)v142, v148, (uint64_t (*)(void))type metadata accessor for MemberSharingCircle);
            uint64_t v149 = v191;
            sub_10001D608(v147, v191, (uint64_t *)&unk_101657AD0);
            uint64_t v150 = Logger.logObject.getter();
            os_log_type_t v151 = static os_log_type_t.default.getter();
            LODWORD(isa) = v151;
            if (os_log_type_enabled(v150, v151))
            {
              uint64_t v152 = swift_slowAlloc();
              uint64_t v221 = (char *)swift_slowAlloc();
              uint64_t v230 = v221;
              *(_DWORD *)uint64_t v152 = 141559299;
              uint64_t v229 = 1752392040;
              UnsafeMutableRawBufferPointer.copyMemory(from:)();
              *(_WORD *)(v152 + 12) = 2081;
              uint64_t v224 = sub_100B22DA4((unint64_t *)&qword_101638B10, (void (*)(uint64_t))&type metadata accessor for UUID);
              os_log_t v220 = v150;
              uint64_t v153 = v192;
              uint64_t v154 = dispatch thunk of CustomStringConvertible.description.getter();
              uint64_t v229 = sub_1008FA0F0(v154, v155, (uint64_t *)&v230);
              UnsafeMutableRawBufferPointer.copyMemory(from:)();
              swift_bridgeObjectRelease();
              int v222 = *(objc_class **)(v204 + 8);
              ((void (*)(char *, uint64_t))v222)(v153, v34);
              *(_WORD *)(v152 + 22) = 2160;
              uint64_t v229 = 1752392040;
              UnsafeMutableRawBufferPointer.copyMemory(from:)();
              *(_WORD *)(v152 + 32) = 2081;
              uint64_t v214 = (v152 + 34);
              uint64_t v156 = *(int *)(v194 + 48);
              uint64_t v157 = v184;
              uint64_t v158 = v184 + v156;
              uint64_t v159 = (uint64_t)v179;
              uint64_t v160 = (uint64_t)&v179[v156];
              unint64_t v219 = type metadata accessor for MemberPeerTrust;
              sub_100B30D0C((uint64_t)v179, v184, (uint64_t (*)(void))type metadata accessor for MemberPeerTrust);
              unint64_t v217 = type metadata accessor for MemberSharingCircle;
              sub_100B30D0C(v160, v158, (uint64_t (*)(void))type metadata accessor for MemberSharingCircle);
              uint64_t v161 = type metadata accessor for MemberPeerTrust();
              v162 = v216;
              ((void (*)(char *, uint64_t, uint64_t))v226)(v216, v157 + *(int *)(v161 + 20), v34);
              uint64_t v218 = type metadata accessor for MemberPeerTrust;
              sub_100B310AC(v157, (uint64_t (*)(void))type metadata accessor for MemberPeerTrust);
              unint64_t v215 = type metadata accessor for MemberSharingCircle;
              sub_100B310AC(v158, (uint64_t (*)(void))type metadata accessor for MemberSharingCircle);
              uint64_t v163 = dispatch thunk of CustomStringConvertible.description.getter();
              unint64_t v165 = v164;
              ((void (*)(char *, uint64_t))v222)(v162, v34);
              uint64_t v229 = sub_1008FA0F0(v163, v165, (uint64_t *)&v230);
              UnsafeMutableRawBufferPointer.copyMemory(from:)();
              swift_bridgeObjectRelease();
              sub_10001DAB4(v159, (uint64_t *)&unk_101657AD0);
              *(_WORD *)(v152 + 42) = 2160;
              uint64_t v229 = 1752392040;
              UnsafeMutableRawBufferPointer.copyMemory(from:)();
              *(_WORD *)(v152 + 52) = 2081;
              uint64_t v214 = (v152 + 54);
              uint64_t v166 = v194;
              uint64_t v167 = *(int *)(v194 + 48);
              uint64_t v168 = v157 + v167;
              uint64_t v169 = v191 + v167;
              sub_100B30D0C(v191, v157, (uint64_t (*)(void))v219);
              sub_100B30D0C(v169, v168, (uint64_t (*)(void))v217);
              uint64_t v170 = type metadata accessor for MemberSharingCircle();
              ((void (*)(char *, uint64_t, uint64_t))v226)(v162, v168 + *(int *)(v170 + 20), v34);
              sub_100B310AC(v168, (uint64_t (*)(void))v215);
              sub_100B310AC(v157, (uint64_t (*)(void))v218);
              uint64_t v171 = dispatch thunk of CustomStringConvertible.description.getter();
              unint64_t v173 = v172;
              ((void (*)(char *, uint64_t))v222)(v162, v34);
              uint64_t v229 = sub_1008FA0F0(v171, v173, (uint64_t *)&v230);
              UnsafeMutableRawBufferPointer.copyMemory(from:)();
              swift_bridgeObjectRelease();
              sub_10001DAB4(v191, (uint64_t *)&unk_101657AD0);
              os_log_t v174 = v220;
              _os_log_impl((void *)&_mh_execute_header, v220, (os_log_type_t)isa, "Share request data for unknownBeacon: %{private,mask.hash}s,\nowner peer trust: %{private,mask.hash}s,\nshare: %{private,mask.hash}s.", (uint8_t *)v152, 0x3Eu);
              swift_arrayDestroy();
              swift_slowDealloc();
              swift_slowDealloc();
              sub_10001CFB8(v181, v182);

              uint64_t v175 = v180;
              uint64_t v176 = v183;
            }
            else
            {
              (*(void (**)(char *, uint64_t))(v204 + 8))(v192, v34);
              sub_10001DAB4((uint64_t)v179, (uint64_t *)&unk_101657AD0);
              sub_10001DAB4(v149, (uint64_t *)&unk_101657AD0);
              sub_10001CFB8(v181, v182);

              uint64_t v175 = v180;
              uint64_t v176 = v183;
              uint64_t v166 = v194;
            }
            uint64_t v177 = v175 + *(int *)(v166 + 48);
            sub_100B30DB4(v189, v175, (uint64_t (*)(void))type metadata accessor for MemberPeerTrust);
            sub_100B30DB4((uint64_t)v228, v177, (uint64_t (*)(void))type metadata accessor for MemberSharingCircle);
            return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(v176 + 56))(v175, 0, 1, v166);
          }
        }
        swift_bridgeObjectRelease();
        if (qword_101636888 != -1) {
LABEL_54:
        }
          swift_once();
        uint64_t v100 = type metadata accessor for Logger();
        sub_100010324(v100, (uint64_t)qword_10170D788);
        uint64_t v101 = v204;
        uint64_t v102 = v40;
        (*(void (**)(char *, uint64_t, uint64_t))(v204 + 16))(v40, v195, v34);
        uint64_t v103 = Logger.logObject.getter();
        os_log_type_t v104 = static os_log_type_t.error.getter();
        if (os_log_type_enabled(v103, v104))
        {
          uint64_t v105 = v101;
          uint64_t v106 = swift_slowAlloc();
          unint64_t v228 = (void *)swift_slowAlloc();
          uint64_t v230 = (char *)v228;
          *(_DWORD *)uint64_t v106 = 141558275;
          uint64_t v229 = 1752392040;
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          *(_WORD *)(v106 + 12) = 2081;
          sub_100B22DA4((unint64_t *)&qword_101638B10, (void (*)(uint64_t))&type metadata accessor for UUID);
          uint64_t v107 = dispatch thunk of CustomStringConvertible.description.getter();
          uint64_t v229 = sub_1008FA0F0(v107, v108, (uint64_t *)&v230);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease();
          (*(void (**)(char *, uint64_t))(v105 + 8))(v102, v34);
          _os_log_impl((void *)&_mh_execute_header, v103, v104, "Cannot reconcile advertisement for unknownBeacon: %{private,mask.hash}s.", (uint8_t *)v106, 0x16u);
          swift_arrayDestroy();
          swift_slowDealloc();
          swift_slowDealloc();
        }
        else
        {
          (*(void (**)(char *, uint64_t))(v101 + 8))(v102, v34);
        }

        unint64_t v124 = v182;
        uint64_t v125 = v181;
        type metadata accessor for SPBeaconSharingError(0);
        uint64_t v229 = 4;
        sub_1004A0BC8((uint64_t)_swiftEmptyArrayStorage);
        sub_100B22DA4((unint64_t *)&qword_1016385F8, type metadata accessor for SPBeaconSharingError);
        _BridgedStoredNSError.init(_:userInfo:)();
        swift_willThrow();
        return sub_10001CFB8(v125, v124);
      }
      else
      {
LABEL_15:
        sub_10001CFB8(v50, v51);
        if (qword_101636888 != -1) {
          swift_once();
        }
        uint64_t v91 = type metadata accessor for Logger();
        sub_100010324(v91, (uint64_t)qword_10170D788);
        uint64_t v92 = v204;
        (*(void (**)(char *, uint64_t, uint64_t))(v204 + 16))(v37, v195, v34);
        uint64_t v93 = Logger.logObject.getter();
        os_log_type_t v94 = static os_log_type_t.error.getter();
        if (os_log_type_enabled(v93, v94))
        {
          uint64_t v95 = v92;
          uint64_t v96 = swift_slowAlloc();
          unint64_t v228 = (void *)swift_slowAlloc();
          uint64_t v230 = (char *)v228;
          *(_DWORD *)uint64_t v96 = 141558275;
          uint64_t v229 = 1752392040;
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          *(_WORD *)(v96 + 12) = 2081;
          sub_100B22DA4((unint64_t *)&qword_101638B10, (void (*)(uint64_t))&type metadata accessor for UUID);
          uint64_t v97 = dispatch thunk of CustomStringConvertible.description.getter();
          uint64_t v229 = sub_1008FA0F0(v97, v98, (uint64_t *)&v230);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease();
          (*(void (**)(char *, uint64_t))(v95 + 8))(v37, v34);
          _os_log_impl((void *)&_mh_execute_header, v93, v94, "Cannot reconcile advertisement for unknownBeacon: %{private,mask.hash}s.", (uint8_t *)v96, 0x16u);
          swift_arrayDestroy();
          swift_slowDealloc();
          swift_slowDealloc();
        }
        else
        {
          (*(void (**)(char *, uint64_t))(v92 + 8))(v37, v34);
        }

        type metadata accessor for SPBeaconSharingError(0);
        uint64_t v229 = 4;
        sub_1004A0BC8((uint64_t)_swiftEmptyArrayStorage);
        sub_100B22DA4((unint64_t *)&qword_1016385F8, type metadata accessor for SPBeaconSharingError);
        _BridgedStoredNSError.init(_:userInfo:)();
        return swift_willThrow();
      }
  }
}

uint64_t sub_100ADFD0C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = type metadata accessor for UUID();
  uint64_t v27 = *(void *)(v4 - 8);
  uint64_t v28 = v4;
  __chkstk_darwin(v4);
  uint64_t v26 = (char *)&v24 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = sub_10000588C(&qword_1016511E0);
  uint64_t v7 = __chkstk_darwin(v6 - 8);
  uint64_t v9 = (char *)&v24 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v7);
  uint64_t v11 = (char *)&v24 - v10;
  sub_100AE3CB4(a1, (uint64_t)&v24 - v10);
  uint64_t v12 = type metadata accessor for WildModeAssociationRecord(0);
  uint64_t v13 = *(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v12 - 8) + 48);
  if (v13(v11, 1, v12) != 1) {
    return sub_100B30DB4((uint64_t)v11, a2, type metadata accessor for WildModeAssociationRecord);
  }
  sub_10001DAB4((uint64_t)v11, &qword_1016511E0);
  sub_100AE381C(a1, (uint64_t)v9);
  if (v13(v9, 1, v12) != 1)
  {
    uint64_t v11 = v9;
    return sub_100B30DB4((uint64_t)v11, a2, type metadata accessor for WildModeAssociationRecord);
  }
  sub_10001DAB4((uint64_t)v9, &qword_1016511E0);
  if (qword_101636F50 != -1) {
    swift_once();
  }
  uint64_t v14 = type metadata accessor for Logger();
  sub_100010324(v14, (uint64_t)qword_10170E9E8);
  uint64_t v16 = v26;
  uint64_t v15 = v27;
  uint64_t v17 = v28;
  (*(void (**)(char *, uint64_t, uint64_t))(v27 + 16))(v26, a1, v28);
  uint64_t v18 = Logger.logObject.getter();
  os_log_type_t v19 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v18, v19))
  {
    uint64_t v20 = swift_slowAlloc();
    uint64_t v25 = swift_slowAlloc();
    uint64_t v30 = v25;
    *(_DWORD *)uint64_t v20 = 141558275;
    uint64_t v29 = 1752392040;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v20 + 12) = 2081;
    sub_100B22DA4((unint64_t *)&qword_101638B10, (void (*)(uint64_t))&type metadata accessor for UUID);
    uint64_t v21 = dispatch thunk of CustomStringConvertible.description.getter();
    uint64_t v29 = sub_1008FA0F0(v21, v22, &v30);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v15 + 8))(v16, v17);
    _os_log_impl((void *)&_mh_execute_header, v18, v19, "No wild mode association record found for unknownBeacon: %{private,mask.hash}s.", (uint8_t *)v20, 0x16u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    (*(void (**)(char *, uint64_t))(v15 + 8))(v16, v17);
  }

  type metadata accessor for SPOwnerSessionError(0);
  uint64_t v29 = 2;
  sub_1004A0BC8((uint64_t)_swiftEmptyArrayStorage);
  sub_100B22DA4(&qword_101638460, type metadata accessor for SPOwnerSessionError);
  _BridgedStoredNSError.init(_:userInfo:)();
  return swift_willThrow();
}

uint64_t sub_100AE0180(void (*a1)(uint64_t), uint64_t a2)
{
  uint64_t v5 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v23 = *(void *)(v5 - 8);
  uint64_t v24 = v5;
  __chkstk_darwin(v5);
  uint64_t v21 = (char *)&v18 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v22 = type metadata accessor for DispatchQoS();
  uint64_t v20 = *(void *)(v22 - 8);
  __chkstk_darwin(v22);
  os_log_type_t v19 = (char *)&v18 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = sub_100AB24F0();
  uint64_t v9 = (void *)swift_allocObject();
  v9[2] = a1;
  v9[3] = a2;
  v9[4] = v2;
  uint64_t v25 = a2;
  swift_retain_n();
  swift_retain_n();
  QueueSynchronizer.conditionalSync<A>(_:)();
  int v10 = LOBYTE(aBlock[0]);
  static os_log_type_t.default.getter();
  if (qword_101637270 != -1) {
    swift_once();
  }
  sub_10000588C((uint64_t *)&unk_10163AD00);
  uint64_t v11 = swift_allocObject();
  *(_OWORD *)(v11 + 16) = xmmword_101342130;
  *(void *)(v11 + 56) = &type metadata for Bool;
  *(void *)(v11 + 64) = &protocol witness table for Bool;
  *(unsigned char *)(v11 + 32) = v10;
  os_log(_:dso:log:_:_:)();
  swift_bridgeObjectRelease();
  static os_log_type_t.default.getter();
  os_log(_:dso:log:_:_:)();
  if (v10)
  {
    a1(v2);
  }
  else
  {
    static os_log_type_t.default.getter();
    os_log(_:dso:log:_:_:)();
    uint64_t v18 = *(void *)(v8 + 64);
    uint64_t v12 = (void *)swift_allocObject();
    v12[2] = v8;
    v12[3] = sub_100B565F4;
    v12[4] = v9;
    aBlock[4] = sub_100B64438;
    void aBlock[5] = v12;
    aBlock[0] = _NSConcreteStackBlock;
    aBlock[1] = 1107296256;
    aBlock[2] = sub_1004B5480;
    aBlock[3] = &unk_1015E90A0;
    uint64_t v13 = _Block_copy(aBlock);
    swift_retain();
    swift_retain();
    uint64_t v14 = v19;
    static DispatchQoS.unspecified.getter();
    uint64_t v26 = _swiftEmptyArrayStorage;
    sub_100B22DA4((unint64_t *)&qword_10163B7E0, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
    sub_10000588C((uint64_t *)&unk_10163F350);
    sub_100062734((unint64_t *)&qword_10163B7F0, (uint64_t *)&unk_10163F350);
    uint64_t v15 = v21;
    uint64_t v16 = v24;
    dispatch thunk of SetAlgebra.init<A>(_:)();
    OS_dispatch_queue.async(group:qos:flags:execute:)();
    _Block_release(v13);
    (*(void (**)(char *, uint64_t))(v23 + 8))(v15, v16);
    (*(void (**)(char *, uint64_t))(v20 + 8))(v14, v22);
    swift_release();
  }
  swift_release();
  swift_release();
  swift_release();
  return swift_release();
}

uint64_t sub_100AE0674(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_10000588C(&qword_1016575E0);
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = *(void *)(v5 + 64);
  __chkstk_darwin(v4);
  uint64_t v7 = sub_10000588C(&qword_10164DBB0);
  __chkstk_darwin(v7 - 8);
  uint64_t v9 = (char *)&v14 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = type metadata accessor for TaskPriority();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 56))(v9, 1, 1, v10);
  (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))((char *)&v14 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0), a1, v4);
  unint64_t v11 = (*(unsigned __int8 *)(v5 + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
  uint64_t v12 = (char *)swift_allocObject();
  *((void *)v12 + 2) = 0;
  *((void *)v12 + 3) = 0;
  *((void *)v12 + 4) = a2;
  (*(void (**)(char *, char *, uint64_t))(v5 + 32))(&v12[v11], (char *)&v14 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0), v4);
  swift_retain();
  sub_1008F5E44((uint64_t)v9, (uint64_t)&unk_1016591C0, (uint64_t)v12);
  return swift_release();
}

uint64_t sub_100AE084C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  v5[3] = a4;
  v5[4] = a5;
  _OWORD v5[2] = a1;
  uint64_t v6 = sub_10000588C(&qword_1016575E0);
  v5[5] = v6;
  uint64_t v7 = *(void *)(v6 - 8);
  v5[6] = v7;
  v5[7] = *(void *)(v7 + 64);
  v5[8] = swift_task_alloc();
  return _swift_task_switch(sub_100AE091C, 0, 0);
}

uint64_t sub_100AE091C()
{
  uint64_t v1 = v0[8];
  uint64_t v2 = v0[5];
  uint64_t v3 = v0[6];
  uint64_t v4 = v0[3];
  (*(void (**)(uint64_t, void, uint64_t))(v3 + 16))(v1, v0[4], v2);
  unint64_t v5 = (*(unsigned __int8 *)(v3 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  uint64_t v6 = swift_allocObject();
  v0[9] = v6;
  *(void *)(v6 + 16) = v4;
  (*(void (**)(unint64_t, uint64_t, uint64_t))(v3 + 32))(v6 + v5, v1, v2);
  swift_retain();
  uint64_t v7 = (void *)swift_task_alloc();
  v0[10] = v7;
  *uint64_t v7 = v0;
  v7[1] = sub_1009C511C;
  uint64_t v8 = v0[2];
  return unsafeBlocking<A>(_:)(v8, sub_100B5157C, v6, (char *)&type metadata for () + 8);
}

uint64_t sub_100AE0A64(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = sub_10000588C(&qword_1016575E0);
  uint64_t v4 = *(void *)(v3 - 8);
  uint64_t v5 = *(void *)(v4 + 64);
  __chkstk_darwin(v3);
  (*(void (**)(char *, uint64_t, uint64_t))(v4 + 16))((char *)&v9 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0), a2, v3);
  unint64_t v6 = (*(unsigned __int8 *)(v4 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
  uint64_t v7 = swift_allocObject();
  (*(void (**)(unint64_t, char *, uint64_t))(v4 + 32))(v7 + v6, (char *)&v9 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0), v3);
  sub_100AE0180((void (*)(uint64_t))sub_100B51600, v7);
  return swift_release();
}

void *sub_100AE0BA4(void *a1, void *a2, char a3)
{
  uint64_t v6 = type metadata accessor for TimeBasedKeysCriteria();
  __chkstk_darwin(v6);
  uint64_t v8 = (char *)&v31 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = type metadata accessor for UUID();
  uint64_t v33 = *(void *)(v9 - 8);
  __chkstk_darwin(v9);
  unint64_t v11 = (char *)&v31 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = a2[3];
  uint64_t v13 = a2[4];
  sub_10001CD44(a2, v12);
  int v14 = sub_100EB7B8C(v12, v13);
  if (!v14)
  {
    uint64_t v32 = v9;
    char v15 = 0;
    goto LABEL_5;
  }
  if (v14 == 1)
  {
    uint64_t v32 = v9;
    char v15 = 1;
LABEL_5:
    sub_10001CD44(a2, a2[3]);
    dispatch thunk of RawRepresentable.rawValue.getter();
    uint64_t v16 = v36[0];
    *uint64_t v8 = v15;
    *((void *)v8 + 1) = v16;
    v8[16] = a3;
    swift_storeEnumTagMultiPayload();
    uint64_t v17 = sub_100B032EC(a1, (uint64_t)v8);
    uint64_t v28 = __chkstk_darwin(v17);
    *(&v31 - 2) = (uint64_t)a1;
    uint64_t v29 = sub_100B35050(v28, sub_100B5DD70);
    swift_bridgeObjectRelease();
    sub_100B310AC((uint64_t)v8, (uint64_t (*)(void))type metadata accessor for TimeBasedKeysCriteria);
    return v29;
  }
  if (qword_101636F50 != -1) {
    swift_once();
  }
  uint64_t v18 = type metadata accessor for Logger();
  sub_100010324(v18, (uint64_t)qword_10170E9E8);
  sub_10001D010((uint64_t)a1, (uint64_t)v36);
  os_log_type_t v19 = Logger.logObject.getter();
  os_log_type_t v20 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v19, v20))
  {
    uint64_t v21 = swift_slowAlloc();
    uint64_t v22 = swift_slowAlloc();
    *(_DWORD *)uint64_t v21 = 141558275;
    uint64_t v34 = 1752392040;
    uint64_t v35 = v22;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v21 + 12) = 2081;
    uint64_t v24 = v37;
    uint64_t v23 = v38;
    sub_10001CD44(v36, v37);
    (*(void (**)(uint64_t))(*(void *)(*(void *)(v23 + 8) + 8) + 32))(v24);
    sub_100B22DA4((unint64_t *)&qword_101638B10, (void (*)(uint64_t))&type metadata accessor for UUID);
    uint64_t v25 = dispatch thunk of CustomStringConvertible.description.getter();
    unint64_t v27 = v26;
    (*(void (**)(char *, uint64_t))(v33 + 8))(v11, v9);
    uint64_t v34 = sub_1008FA0F0(v25, v27, &v35);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)v36);
    _os_log_impl((void *)&_mh_execute_header, v19, v20, "Secure locations index for %{private,mask.hash}s.\nIgnore update.", (uint8_t *)v21, 0x16u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)v36);
  }

  return 0;
}

void sub_100AE12EC(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = type metadata accessor for OwnedBeaconRecord();
  uint64_t v50 = *(void *)(v4 - 8);
  uint64_t v5 = *(void *)(v50 + 64);
  uint64_t v6 = __chkstk_darwin(v4);
  uint64_t v7 = (char *)&v48 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = __chkstk_darwin(v6);
  uint64_t v52 = (uint64_t)&v48 - v9;
  __chkstk_darwin(v8);
  unint64_t v11 = (char *)&v48 - v10;
  uint64_t v51 = sub_10000588C(&qword_10163F7B0);
  __chkstk_darwin(v51);
  uint64_t v53 = (char *)&v48 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = sub_10000588C(&qword_10163BB80);
  __chkstk_darwin(v13 - 8);
  char v15 = (char *)&v48 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = type metadata accessor for KeyAlignmentRecord();
  uint64_t v17 = *(void *)(v16 - 8);
  __chkstk_darwin(v16);
  os_log_type_t v19 = (char *)&v48 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v54 = v4;
  if ((sub_10111198C() & 1) == 0) {
    goto LABEL_4;
  }
  uint64_t v48 = a1 + *(int *)(v54 + 20);
  uint64_t v49 = v2;
  sub_100B6C53C((uint64_t)v15);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v17 + 48))(v15, 1, v16) == 1)
  {
    sub_10001DAB4((uint64_t)v15, &qword_10163BB80);
LABEL_4:
    if (qword_101636F50 != -1) {
      swift_once();
    }
    uint64_t v20 = type metadata accessor for Logger();
    sub_100010324(v20, (uint64_t)qword_10170E9E8);
    sub_100B30D0C(a1, (uint64_t)v7, (uint64_t (*)(void))type metadata accessor for OwnedBeaconRecord);
    uint64_t v21 = Logger.logObject.getter();
    os_log_type_t v22 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v21, v22))
    {
      uint64_t v23 = swift_slowAlloc();
      uint64_t v24 = swift_slowAlloc();
      *(_DWORD *)uint64_t v23 = 141558275;
      uint64_t v55 = 1752392040;
      uint64_t v56 = v24;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v23 + 12) = 2081;
      type metadata accessor for UUID();
      sub_100B22DA4((unint64_t *)&qword_101638B10, (void (*)(uint64_t))&type metadata accessor for UUID);
      uint64_t v25 = dispatch thunk of CustomStringConvertible.description.getter();
      uint64_t v55 = sub_1008FA0F0(v25, v26, &v56);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      sub_100B310AC((uint64_t)v7, (uint64_t (*)(void))type metadata accessor for OwnedBeaconRecord);
      _os_log_impl((void *)&_mh_execute_header, v21, v22, "KeyAlignmentRecord with the identifier not found - %{private,mask.hash}s.", (uint8_t *)v23, 0x16u);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      sub_100B310AC((uint64_t)v7, (uint64_t (*)(void))type metadata accessor for OwnedBeaconRecord);
    }

    return;
  }
  uint64_t v27 = (uint64_t)v15;
  uint64_t v28 = (uint64_t)v19;
  sub_100B30DB4(v27, (uint64_t)v19, (uint64_t (*)(void))type metadata accessor for KeyAlignmentRecord);
  sub_10000588C(&qword_101639140);
  unsafeFromAsyncTask<A>(_:)();
  uint64_t v29 = v56;
  if (v56)
  {
    sub_100B30D0C(a1, (uint64_t)v11, (uint64_t (*)(void))type metadata accessor for OwnedBeaconRecord);
    unint64_t v30 = (*(unsigned __int8 *)(v50 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v50 + 80);
    uint64_t v31 = swift_allocObject();
    *(void *)(v31 + 16) = v29;
    sub_100B30DB4((uint64_t)v11, v31 + v30, (uint64_t (*)(void))type metadata accessor for OwnedBeaconRecord);
    swift_retain_n();
    unsafeFromAsyncTask<A>(_:)();
    swift_release();
    if (qword_101636F50 != -1) {
      swift_once();
    }
    uint64_t v32 = type metadata accessor for Logger();
    sub_100010324(v32, (uint64_t)qword_10170E9E8);
    uint64_t v33 = v52;
    sub_100B30D0C(a1, v52, (uint64_t (*)(void))type metadata accessor for OwnedBeaconRecord);
    uint64_t v34 = Logger.logObject.getter();
    os_log_type_t v35 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v34, v35))
    {
      uint64_t v36 = swift_slowAlloc();
      uint64_t v37 = swift_slowAlloc();
      *(_DWORD *)uint64_t v36 = 141558275;
      uint64_t v55 = 1752392040;
      uint64_t v56 = v37;
      uint64_t v51 = (uint64_t)v19;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v36 + 12) = 2081;
      type metadata accessor for UUID();
      sub_100B22DA4((unint64_t *)&qword_101638B10, (void (*)(uint64_t))&type metadata accessor for UUID);
      uint64_t v38 = dispatch thunk of CustomStringConvertible.description.getter();
      uint64_t v55 = sub_1008FA0F0(v38, v39, &v56);
      uint64_t v28 = v51;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      sub_100B310AC(v33, (uint64_t (*)(void))type metadata accessor for OwnedBeaconRecord);
      _os_log_impl((void *)&_mh_execute_header, v34, v35, "Updating KeyAlignmentRecord for identifier %{private,mask.hash}s.", (uint8_t *)v36, 0x16u);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      sub_100B310AC(v33, (uint64_t (*)(void))type metadata accessor for OwnedBeaconRecord);
    }

    uint64_t v44 = v49;
    uint64_t v45 = type metadata accessor for Transaction();
    __chkstk_darwin(v45);
    *(&v48 - 4) = v44;
    *(&v48 - 3) = v28;
    uint64_t v46 = (uint64_t)v53;
    uint64_t v47 = v48;
    *(&v48 - 2) = (uint64_t)v53;
    *(&v48 - 1) = v47;
    static Transaction.named<A>(_:with:)();
    swift_release_n();
    sub_10001DAB4(v46, &qword_10163F7B0);
  }
  else
  {
    if (qword_101636F50 != -1) {
      swift_once();
    }
    uint64_t v40 = type metadata accessor for Logger();
    sub_100010324(v40, (uint64_t)qword_10170E9E8);
    uint64_t v41 = Logger.logObject.getter();
    os_log_type_t v42 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v41, v42))
    {
      uint64_t v43 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v43 = 0;
      _os_log_impl((void *)&_mh_execute_header, v41, v42, "Missing ObservationStoreService for updating KeyAlignment from disk.", v43, 2u);
      swift_slowDealloc();
    }
  }
  sub_100B310AC(v28, (uint64_t (*)(void))type metadata accessor for KeyAlignmentRecord);
}

uint64_t sub_100AE1C00(uint64_t a1)
{
  *(void *)(v1 + 120) = a1;
  return _swift_task_switch(sub_100AE1C20, 0, 0);
}

uint64_t sub_100AE1C20()
{
  if (qword_1016375E8 != -1) {
    swift_once();
  }
  swift_beginAccess();
  uint64_t result = sub_10001D074((uint64_t)&xmmword_10166E8F0, v0 + 56, (uint64_t *)&unk_101638D30);
  if (*(void *)(v0 + 80))
  {
    sub_10001CEB0((long long *)(v0 + 56), v0 + 16);
    sub_10001CD44((void *)(v0 + 16), *(void *)(v0 + 40));
    uint64_t v3 = (uint64_t (__cdecl *)())((char *)&dword_101639138 + dword_101639138);
    uint64_t v2 = (void *)swift_task_alloc();
    *(void *)(v0 + 128) = v2;
    *uint64_t v2 = v0;
    v2[1] = sub_10050AAE8;
    return v3();
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_100AE1D5C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for OwnedBeaconRecord();
  uint64_t v7 = a3 + *(int *)(v6 + 20);
  uint64_t v8 = a3 + *(int *)(v6 + 32);
  uint64_t v9 = (void *)swift_task_alloc();
  *(void *)(v3 + 16) = v9;
  *uint64_t v9 = v3;
  v9[1] = sub_100033F68;
  return sub_1011044F4(a1, v7, v8);
}

uint64_t sub_100AE1E28(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v28 = a2;
  uint64_t v24 = a5;
  uint64_t v21 = a4;
  uint64_t v30 = a3;
  uint64_t v27 = a1;
  uint64_t v6 = type metadata accessor for KeyAlignmentRecord();
  uint64_t v26 = *(void *)(v6 - 8);
  uint64_t v25 = *(void *)(v26 + 64);
  __chkstk_darwin(v6 - 8);
  uint64_t v29 = (uint64_t)&v21 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for UUID();
  uint64_t v22 = v8;
  uint64_t v9 = *(void *)(v8 - 8);
  uint64_t v10 = *(void *)(v9 + 64);
  __chkstk_darwin(v8);
  uint64_t v23 = (char *)&v21 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = sub_10000588C(&qword_10163F7B0);
  uint64_t v12 = *(void *)(v11 - 8);
  uint64_t v13 = *(void *)(v12 + 64);
  __chkstk_darwin(v11 - 8);
  sub_10001D074(a4, (uint64_t)&v21 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0), &qword_10163F7B0);
  uint64_t v14 = *(unsigned __int8 *)(v12 + 80);
  uint64_t v15 = swift_allocObject();
  sub_10001D608((uint64_t)&v21 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0), v15 + ((v14 + 16) & ~v14), &qword_10163F7B0);
  (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))((char *)&v21 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0), v24, v8);
  sub_100B30D0C(v30, v29, (uint64_t (*)(void))type metadata accessor for KeyAlignmentRecord);
  sub_10001D074(v21, (uint64_t)&v21 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0), &qword_10163F7B0);
  unint64_t v16 = (*(unsigned __int8 *)(v9 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80);
  unint64_t v17 = (v10 + *(unsigned __int8 *)(v26 + 80) + v16) & ~(unint64_t)*(unsigned __int8 *)(v26 + 80);
  unint64_t v18 = (v25 + v14 + v17) & ~v14;
  uint64_t v19 = swift_allocObject();
  *(void *)(v19 + 16) = v27;
  (*(void (**)(unint64_t, char *, uint64_t))(v9 + 32))(v19 + v16, v23, v22);
  sub_100B30DB4(v29, v19 + v17, (uint64_t (*)(void))type metadata accessor for KeyAlignmentRecord);
  sub_10001D608((uint64_t)&v21 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0), v19 + v18, &qword_10163F7B0);
  swift_retain();
  sub_1010757E0(v30, 0, (void (*)(uint64_t))sub_100B5D944, v15, (void (*)(uint64_t (*)()))sub_100B5DC30, (void (*)(uint64_t (*)()))v19);
  swift_release();
  return swift_release();
}

uint64_t sub_100AE2190(uint64_t a1, uint64_t *a2)
{
  uint64_t v4 = *a2;
  uint64_t v5 = type metadata accessor for KeyAlignmentRecord();
  *(void *)(a1 + *(int *)(v5 + 28)) = v4;
  uint64_t v6 = (char *)a2 + *(int *)(sub_10000588C(&qword_10163F7B0) + 36);
  uint64_t v7 = a1 + *(int *)(v5 + 32);
  uint64_t v8 = type metadata accessor for Date();
  uint64_t v9 = *(uint64_t (**)(uint64_t, char *, uint64_t))(*(void *)(v8 - 8) + 24);

  return v9(v7, v6, v8);
}

void sub_100AE2238(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v44 = a4;
  uint64_t v45 = a5;
  uint64_t v47 = a3;
  uint64_t v6 = sub_10000588C(&qword_10163F7B0);
  __chkstk_darwin(v6 - 8);
  uint64_t v46 = (uint64_t *)((char *)&v42 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v43 = type metadata accessor for KeyAlignmentRecord();
  __chkstk_darwin(v43);
  uint64_t v9 = (char *)&v42 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = type metadata accessor for UUID();
  uint64_t v11 = *(void *)(v10 - 8);
  uint64_t v12 = __chkstk_darwin(v10);
  uint64_t v14 = (char *)&v42 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v12);
  unint64_t v16 = (char *)&v42 - v15;
  uint64_t v17 = sub_10000588C(&qword_10164B328);
  __chkstk_darwin(v17);
  uint64_t v19 = (char *)&v42 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  Transaction.capture()();
  sub_10001D074(a1, (uint64_t)v19, &qword_10164B328);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    if (qword_101636F50 != -1) {
      swift_once();
    }
    uint64_t v20 = type metadata accessor for Logger();
    sub_100010324(v20, (uint64_t)qword_10170E9E8);
    (*(void (**)(char *, uint64_t, uint64_t))(v11 + 16))(v14, v47, v10);
    swift_errorRetain();
    swift_errorRetain();
    uint64_t v21 = Logger.logObject.getter();
    os_log_type_t v22 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v21, v22))
    {
      uint64_t v23 = swift_slowAlloc();
      uint64_t v47 = swift_slowAlloc();
      uint64_t v49 = v47;
      *(_DWORD *)uint64_t v23 = 141558531;
      uint64_t v51 = 1752392040;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v23 + 12) = 2081;
      sub_100B22DA4((unint64_t *)&qword_101638B10, (void (*)(uint64_t))&type metadata accessor for UUID);
      uint64_t v24 = dispatch thunk of CustomStringConvertible.description.getter();
      uint64_t v51 = sub_1008FA0F0(v24, v25, &v49);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      (*(void (**)(char *, uint64_t))(v11 + 8))(v14, v10);
      *(_WORD *)(v23 + 22) = 2082;
      swift_getErrorValue();
      uint64_t v26 = Error.localizedDescription.getter();
      uint64_t v51 = sub_1008FA0F0(v26, v27, &v49);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      swift_errorRelease();
      swift_errorRelease();
      _os_log_impl((void *)&_mh_execute_header, v21, v22, "Could not update last seen key index to alignment record uuid - %{private,mask.hash}s\ndue to %{public}s.", (uint8_t *)v23, 0x20u);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      swift_errorRelease();
    }
    else
    {
      swift_errorRelease();
      (*(void (**)(char *, uint64_t))(v11 + 8))(v14, v10);
      swift_errorRelease();
      swift_errorRelease();
    }
  }
  else
  {
    if (qword_101636F50 != -1) {
      swift_once();
    }
    uint64_t v28 = type metadata accessor for Logger();
    sub_100010324(v28, (uint64_t)qword_10170E9E8);
    uint64_t v29 = v10;
    (*(void (**)(char *, uint64_t, uint64_t))(v11 + 16))(v16, v47, v10);
    sub_100B30D0C(v44, (uint64_t)v9, (uint64_t (*)(void))type metadata accessor for KeyAlignmentRecord);
    uint64_t v30 = v46;
    sub_10001D074(v45, (uint64_t)v46, &qword_10163F7B0);
    uint64_t v31 = Logger.logObject.getter();
    os_log_type_t v32 = static os_log_type_t.default.getter();
    int v33 = v32;
    if (os_log_type_enabled(v31, v32))
    {
      uint64_t v34 = swift_slowAlloc();
      uint64_t v47 = swift_slowAlloc();
      uint64_t v51 = v47;
      *(_DWORD *)uint64_t v34 = 141558787;
      uint64_t v49 = 1752392040;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v34 + 12) = 2081;
      sub_100B22DA4((unint64_t *)&qword_101638B10, (void (*)(uint64_t))&type metadata accessor for UUID);
      LODWORD(v45) = v33;
      uint64_t v35 = dispatch thunk of CustomStringConvertible.description.getter();
      uint64_t v49 = sub_1008FA0F0(v35, v36, &v51);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      (*(void (**)(char *, uint64_t))(v11 + 8))(v16, v29);
      *(_WORD *)(v34 + 22) = 2048;
      uint64_t v37 = *(void *)&v9[*(int *)(v43 + 28)];
      sub_100B310AC((uint64_t)v9, (uint64_t (*)(void))type metadata accessor for KeyAlignmentRecord);
      uint64_t v49 = v37;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v34 + 32) = 2080;
      uint64_t v38 = v46;
      uint64_t v39 = *v46;
      uint64_t v49 = 0x7972616D6972702ELL;
      unint64_t v50 = 0xE900000000000028;
      uint64_t v48 = v39;
      v40._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
      String.append(_:)(v40);
      swift_bridgeObjectRelease();
      v41._uint64_t countAndFlagsBits = 41;
      v41._object = (void *)0xE100000000000000;
      String.append(_:)(v41);
      uint64_t v49 = sub_1008FA0F0(v49, v50, &v51);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      sub_10001DAB4((uint64_t)v38, &qword_10163F7B0);
      _os_log_impl((void *)&_mh_execute_header, v31, (os_log_type_t)v45, "Successfully updated last seen key index for beacon key alignment record uuid - %{private,mask.hash}s\nold_index - %llu\nnew_index - %s.", (uint8_t *)v34, 0x2Au);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      sub_100B310AC((uint64_t)v9, (uint64_t (*)(void))type metadata accessor for KeyAlignmentRecord);
      (*(void (**)(char *, uint64_t))(v11 + 8))(v16, v10);
      sub_10001DAB4((uint64_t)v30, &qword_10163F7B0);
    }

    sub_10001DAB4((uint64_t)v19, &qword_10164B328);
  }
}

uint64_t sub_100AE2A38@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v7 = type metadata accessor for UUID();
  uint64_t v43 = *(void *)(v7 - 8);
  __chkstk_darwin(v7);
  uint64_t v9 = (char *)v39 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = sub_10000588C(&qword_10163B9E0);
  uint64_t v11 = __chkstk_darwin(v10 - 8);
  uint64_t v42 = (uint64_t)v39 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = __chkstk_darwin(v11);
  uint64_t v15 = (char *)v39 - v14;
  __chkstk_darwin(v13);
  uint64_t v17 = (char *)v39 - v16;
  uint64_t v41 = a1;
  uint64_t v18 = (uint64_t *)(a1 + OBJC_IVAR____TtC12searchpartyd11BeaconStore_beaconNamingRecordCache);
  swift_beginAccess();
  uint64_t v19 = *v18;
  uint64_t v20 = *(void *)(*v18 + 16);
  uint64_t v46 = v9;
  uint64_t v44 = v7;
  uint64_t v45 = a2;
  if (v20)
  {
    uint64_t v40 = a3;
    swift_bridgeObjectRetain();
    unint64_t v21 = sub_1007240CC(a2);
    if (v22)
    {
      unint64_t v23 = v21;
      uint64_t v24 = *(void *)(v19 + 56);
      uint64_t v25 = type metadata accessor for BeaconNamingRecord();
      uint64_t v26 = *(void *)(v25 - 8);
      v39[1] = v3;
      uint64_t v27 = v26;
      sub_100B30D0C(v24 + *(void *)(v26 + 72) * v23, (uint64_t)v17, (uint64_t (*)(void))type metadata accessor for BeaconNamingRecord);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v27 + 56))(v17, 0, 1, v25);
    }
    else
    {
      uint64_t v25 = type metadata accessor for BeaconNamingRecord();
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v25 - 8) + 56))(v17, 1, 1, v25);
    }
    a3 = v40;
    swift_bridgeObjectRelease();
    type metadata accessor for BeaconNamingRecord();
    uint64_t v29 = *(void *)(v25 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v29 + 48))(v17, 1, v25) != 1)
    {
      sub_100B30DB4((uint64_t)v17, a3, (uint64_t (*)(void))type metadata accessor for BeaconNamingRecord);
      return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(v29 + 56))(a3, 0, 1, v25);
    }
  }
  else
  {
    uint64_t v28 = type metadata accessor for BeaconNamingRecord();
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v28 - 8) + 56))(v17, 1, 1, v28);
  }
  sub_10001DAB4((uint64_t)v17, &qword_10163B9E0);
  uint64_t v30 = v45;
  uint64_t v31 = sub_100B6E6DC(v45);
  uint64_t v32 = v31[2];
  uint64_t v33 = type metadata accessor for BeaconNamingRecord();
  uint64_t v34 = *(void *)(v33 - 8);
  if (v32)
  {
    sub_100B30D0C((uint64_t)v31+ ((*(unsigned __int8 *)(*(void *)(v33 - 8) + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(v33 - 8) + 80)), (uint64_t)v15, (uint64_t (*)(void))type metadata accessor for BeaconNamingRecord);
    uint64_t v35 = 0;
  }
  else
  {
    uint64_t v35 = 1;
  }
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v34 + 56))(v15, v35, 1, v33);
  swift_bridgeObjectRelease();
  uint64_t v37 = (uint64_t)v46;
  (*(void (**)(char *, uint64_t, uint64_t))(v43 + 16))(v46, v30, v44);
  uint64_t v38 = v42;
  sub_10001D074((uint64_t)v15, v42, &qword_10163B9E0);
  swift_beginAccess();
  sub_10015F5EC(v38, v37);
  swift_endAccess();
  return sub_10001D608((uint64_t)v15, a3, &qword_10163B9E0);
}

uint64_t sub_100AE2F00(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(uint64_t))
{
  return a4(a1);
}

uint64_t sub_100AE2F8C(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = sub_10000588C(&qword_10163B9E0);
  __chkstk_darwin(v3 - 8);
  uint64_t v5 = (char *)&v12 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = type metadata accessor for UUID();
  __chkstk_darwin(v6);
  uint64_t v8 = (char *)&v12 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t))(v9 + 16))(v8, a2);
  uint64_t v10 = type metadata accessor for BeaconNamingRecord();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 56))(v5, 1, 1, v10);
  swift_beginAccess();
  sub_10015F5EC((uint64_t)v5, (uint64_t)v8);
  return swift_endAccess();
}

uint64_t sub_100AE311C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  v16[0] = a1;
  v16[1] = a2;
  uint64_t v3 = type metadata accessor for URL();
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  uint64_t v6 = (char *)v16 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = *(void *)(v2 + 160);
  if (qword_101636D10 != -1) {
    swift_once();
  }
  uint64_t v8 = sub_100010324(v3, (uint64_t)qword_10170E3E8);
  (*(void (**)(char *, uint64_t, uint64_t))(v4 + 16))(v6, v8, v3);
  v9._object = (void *)0x8000000101402BA0;
  v9._uint64_t countAndFlagsBits = 0xD000000000000014;
  prohibitAsyncContext(functionName:)(v9);
  _OWORD v16[3] = type metadata accessor for BeaconProductInfoRecord();
  sub_10000588C(&qword_101659208);
  uint64_t v10 = String.init<A>(describing:)();
  uint64_t v12 = v11;
  __chkstk_darwin(v13);
  uint64_t v14 = v16[0];
  v16[-6] = v7;
  v16[-5] = v14;
  v16[-4] = v6;
  v16[-3] = v10;
  v16[-2] = v12;
  sub_10000588C(&qword_10163BBB0);
  OS_dispatch_queue.sync<A>(execute:)();
  swift_bridgeObjectRelease();
  return (*(uint64_t (**)(char *, uint64_t))(v4 + 8))(v6, v3);
}

void sub_100AE3328(void *a1)
{
  uint64_t v2 = type metadata accessor for UUID();
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  uint64_t v5 = (char *)&v17 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = sub_10000588C(&qword_10163BBB0);
  __chkstk_darwin(v6 - 8);
  uint64_t v8 = (char *)&v17 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = a1[3];
  uint64_t v10 = a1[4];
  sub_10001CD44(a1, v9);
  if (((*(uint64_t (**)(uint64_t, uint64_t))(v10 + 96))(v9, v10) & 1) == 0)
  {
    uint64_t v11 = a1[3];
    uint64_t v12 = a1[4];
    sub_10001CD44(a1, v11);
    if ((*(uint64_t (**)(uint64_t, uint64_t))(v12 + 104))(v11, v12))
    {
      uint64_t v14 = a1[3];
      uint64_t v13 = a1[4];
      sub_10001CD44(a1, v14);
      (*(void (**)(uint64_t))(*(void *)(*(void *)(v13 + 8) + 8) + 32))(v14);
      sub_100AE311C((uint64_t)v5, (uint64_t)v8);
      (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
      uint64_t v15 = type metadata accessor for BeaconProductInfoRecord();
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v15 - 8) + 48))(v8, 1, v15) == 1)
      {
        sub_10001DAB4((uint64_t)v8, &qword_10163BBB0);
        static os_log_type_t.error.getter();
        if (qword_101637260 != -1) {
          swift_once();
        }
        os_log(_:dso:log:_:_:)();
      }
      else
      {
        double v16 = *(double *)&v8[*(int *)(v15 + 60)];
        sub_100B310AC((uint64_t)v8, (uint64_t (*)(void))type metadata accessor for BeaconProductInfoRecord);
        sub_100B3376C(v16);
      }
    }
  }
}

void *sub_100AE35FC()
{
  uint64_t v0 = type metadata accessor for SystemInfo.DeviceLockState();
  uint64_t v1 = *(void *)(v0 - 8);
  uint64_t v2 = __chkstk_darwin(v0);
  uint64_t v4 = (char *)v12 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v2);
  uint64_t v6 = (char *)v12 - v5;
  static SystemInfo.lockState.getter();
  (*(void (**)(char *, void, uint64_t))(v1 + 104))(v4, enum case for SystemInfo.DeviceLockState.beforeFirstUnlock(_:), v0);
  sub_100B22DA4((unint64_t *)&unk_101655610, (void (*)(uint64_t))&type metadata accessor for SystemInfo.DeviceLockState);
  dispatch thunk of RawRepresentable.rawValue.getter();
  dispatch thunk of RawRepresentable.rawValue.getter();
  uint64_t v8 = v12[0];
  uint64_t v7 = v12[1];
  uint64_t v9 = *(void (**)(char *, uint64_t))(v1 + 8);
  v9(v4, v0);
  v9(v6, v0);
  if (v7 != v8) {
    return sub_100B6DD18();
  }
  static os_log_type_t.default.getter();
  if (qword_101637260 != -1) {
    swift_once();
  }
  uint64_t v10 = _swiftEmptyArrayStorage;
  os_log(_:dso:log:_:_:)();
  return v10;
}

uint64_t sub_100AE381C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v35 = a2;
  uint64_t v3 = type metadata accessor for URL();
  uint64_t v33 = *(void *)(v3 - 8);
  uint64_t v34 = v3;
  __chkstk_darwin(v3);
  uint64_t v5 = (char *)v31 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = type metadata accessor for SystemInfo.DeviceLockState();
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = __chkstk_darwin(v6);
  uint64_t v10 = (char *)v31 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8);
  uint64_t v12 = (char *)v31 - v11;
  static os_log_type_t.default.getter();
  if (qword_101637260 != -1) {
    swift_once();
  }
  sub_10000588C((uint64_t *)&unk_10163AD00);
  uint64_t v13 = swift_allocObject();
  *(_OWORD *)(v13 + 16) = xmmword_101342130;
  uint64_t v32 = a1;
  uint64_t v14 = UUID.uuidString.getter();
  uint64_t v16 = v15;
  *(void *)(v13 + 56) = &type metadata for String;
  *(void *)(v13 + 64) = sub_10000B4CC();
  *(void *)(v13 + 32) = v14;
  *(void *)(v13 + 40) = v16;
  os_log(_:dso:log:_:_:)();
  swift_bridgeObjectRelease();
  static SystemInfo.lockState.getter();
  (*(void (**)(char *, void, uint64_t))(v7 + 104))(v10, enum case for SystemInfo.DeviceLockState.beforeFirstUnlock(_:), v6);
  sub_100B22DA4((unint64_t *)&qword_1016429C8, (void (*)(uint64_t))&type metadata accessor for SystemInfo.DeviceLockState);
  char v17 = dispatch thunk of static Equatable.== infix(_:_:)();
  uint64_t v18 = *(void (**)(char *, uint64_t))(v7 + 8);
  v18(v10, v6);
  v18(v12, v6);
  if (v17)
  {
    static os_log_type_t.default.getter();
    os_log(_:dso:log:_:_:)();
    uint64_t v19 = type metadata accessor for WildModeAssociationRecord(0);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v19 - 8) + 56))(v35, 1, 1, v19);
  }
  else
  {
    uint64_t v21 = *(void *)(v31[1] + 160);
    if (qword_101636940 != -1) {
      swift_once();
    }
    uint64_t v22 = v34;
    uint64_t v23 = sub_100010324(v34, (uint64_t)qword_10170DA70);
    uint64_t v24 = v33;
    (*(void (**)(char *, uint64_t, uint64_t))(v33 + 16))(v5, v23, v22);
    v25._object = (void *)0x8000000101402BA0;
    v25._uint64_t countAndFlagsBits = 0xD000000000000014;
    prohibitAsyncContext(functionName:)(v25);
    uint64_t v36 = type metadata accessor for WildModeAssociationRecord(0);
    sub_10000588C(&qword_101659380);
    uint64_t v26 = String.init<A>(describing:)();
    uint64_t v28 = v27;
    __chkstk_darwin(v29);
    uint64_t v30 = v32;
    v31[-6] = v21;
    v31[-5] = v30;
    v31[-4] = v5;
    v31[-3] = v26;
    v31[-2] = v28;
    sub_10000588C(&qword_1016511E0);
    OS_dispatch_queue.sync<A>(execute:)();
    swift_bridgeObjectRelease();
    return (*(uint64_t (**)(char *, uint64_t))(v24 + 8))(v5, v22);
  }
}

uint64_t sub_100AE3CB4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v45 = a2;
  uint64_t v3 = type metadata accessor for UUID();
  uint64_t v49 = *(void (***)(uint64_t, uint64_t))(v3 - 8);
  __chkstk_darwin(v3);
  uint64_t v47 = (char *)&v42 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v55 = sub_10000588C((uint64_t *)&unk_10166EAF0);
  __chkstk_darwin(v55);
  uint64_t v6 = (char *)&v42 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = sub_10000588C(&qword_101638CF0);
  uint64_t v8 = __chkstk_darwin(v7 - 8);
  uint64_t v50 = (uint64_t)&v42 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8);
  uint64_t v11 = (char *)&v42 - v10;
  uint64_t v57 = type metadata accessor for WildModeAssociationRecord(0);
  uint64_t v46 = *(void *)(v57 - 8);
  __chkstk_darwin(v57);
  uint64_t v51 = (char *)&v42 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = type metadata accessor for SystemInfo.DeviceLockState();
  uint64_t v14 = *(void *)(v13 - 8);
  uint64_t v15 = __chkstk_darwin(v13);
  char v17 = (char *)&v42 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v15);
  uint64_t v19 = (char *)&v42 - v18;
  LODWORD(v54) = static os_log_type_t.default.getter();
  if (qword_101637260 != -1) {
    swift_once();
  }
  uint64_t v53 = (void (**)(char *, void, uint64_t, uint64_t))qword_10170EFB8;
  sub_10000588C((uint64_t *)&unk_10163AD00);
  uint64_t v20 = swift_allocObject();
  *(_OWORD *)(v20 + 16) = xmmword_101342130;
  uint64_t v56 = a1;
  uint64_t v21 = UUID.uuidString.getter();
  uint64_t v23 = v22;
  *(void *)(v20 + 56) = &type metadata for String;
  *(void *)(v20 + 64) = sub_10000B4CC();
  *(void *)(v20 + 32) = v21;
  *(void *)(v20 + 40) = v23;
  os_log(_:dso:log:_:_:)();
  swift_bridgeObjectRelease();
  static SystemInfo.lockState.getter();
  (*(void (**)(char *, void, uint64_t))(v14 + 104))(v17, enum case for SystemInfo.DeviceLockState.beforeFirstUnlock(_:), v13);
  sub_100B22DA4((unint64_t *)&qword_1016429C8, (void (*)(uint64_t))&type metadata accessor for SystemInfo.DeviceLockState);
  LOBYTE(v21) = dispatch thunk of static Equatable.== infix(_:_:)();
  uint64_t v24 = *(void (**)(char *, uint64_t))(v14 + 8);
  v24(v17, v13);
  v24(v19, v13);
  if (v21)
  {
    static os_log_type_t.default.getter();
    os_log(_:dso:log:_:_:)();
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v46 + 56))(v45, 1, 1, v57);
  }
  uint64_t v42 = sub_100AE35FC();
  uint64_t v26 = v42[2];
  uint64_t v27 = (uint64_t)v51;
  if (!v26)
  {
LABEL_15:
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v46 + 56))(v45, 1, 1, v57);
    return swift_bridgeObjectRelease();
  }
  uint64_t v28 = (uint64_t)v42 + ((*(unsigned __int8 *)(v46 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v46 + 80));
  uint64_t v53 = (void (**)(char *, void, uint64_t, uint64_t))(v49 + 7);
  uint64_t v54 = (void (**)(char *, uint64_t, uint64_t))(v49 + 2);
  uint64_t v29 = (unsigned int (**)(char *, uint64_t, uint64_t))(v49 + 6);
  uint64_t v43 = v6;
  uint64_t v44 = (void (**)(char *, uint64_t, uint64_t))(v49 + 4);
  ++v49;
  uint64_t v52 = *(void *)(v46 + 72);
  while (1)
  {
    sub_100B30D0C(v28, v27, type metadata accessor for WildModeAssociationRecord);
    uint64_t v31 = v29;
    uint64_t v32 = v27 + *(int *)(v57 + 20);
    (*v54)(v11, v56, v3);
    (*v53)(v11, 0, 1, v3);
    uint64_t v33 = (uint64_t)&v6[*(int *)(v55 + 48)];
    sub_10001D074(v32, (uint64_t)v6, &qword_101638CF0);
    sub_10001D074((uint64_t)v11, v33, &qword_101638CF0);
    uint64_t v34 = *v31;
    if ((*v31)(v6, 1, v3) == 1) {
      break;
    }
    uint64_t v35 = v50;
    sub_10001D074((uint64_t)v6, v50, &qword_101638CF0);
    unsigned int v36 = v34((char *)v33, 1, v3);
    uint64_t v29 = v31;
    if (v36 == 1)
    {
      sub_10001DAB4((uint64_t)v11, &qword_101638CF0);
      (*v49)(v35, v3);
      uint64_t v27 = (uint64_t)v51;
      goto LABEL_8;
    }
    uint64_t v37 = v47;
    (*v44)(v47, v33, v3);
    sub_100B22DA4((unint64_t *)&qword_10163B8F0, (void (*)(uint64_t))&type metadata accessor for UUID);
    int v48 = dispatch thunk of static Equatable.== infix(_:_:)();
    uint64_t v38 = v29;
    uint64_t v39 = *v49;
    (*v49)((uint64_t)v37, v3);
    sub_10001DAB4((uint64_t)v11, &qword_101638CF0);
    v39(v35, v3);
    uint64_t v29 = v38;
    uint64_t v6 = v43;
    sub_10001DAB4((uint64_t)v43, &qword_101638CF0);
    uint64_t v27 = (uint64_t)v51;
    if (v48) {
      goto LABEL_17;
    }
LABEL_9:
    sub_100B310AC(v27, type metadata accessor for WildModeAssociationRecord);
    v28 += v52;
    if (!--v26) {
      goto LABEL_15;
    }
  }
  sub_10001DAB4((uint64_t)v11, &qword_101638CF0);
  unsigned int v30 = v34((char *)v33, 1, v3);
  uint64_t v29 = v31;
  if (v30 != 1)
  {
LABEL_8:
    sub_10001DAB4((uint64_t)v6, (uint64_t *)&unk_10166EAF0);
    goto LABEL_9;
  }
  sub_10001DAB4((uint64_t)v6, &qword_101638CF0);
LABEL_17:
  uint64_t v40 = v27;
  uint64_t v41 = v45;
  sub_100B30DB4(v40, v45, type metadata accessor for WildModeAssociationRecord);
  (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v46 + 56))(v41, 0, 1, v57);
  return swift_bridgeObjectRelease();
}

uint64_t sub_100AE4474(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for SystemInfo.DeviceLockState();
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t v4 = __chkstk_darwin(v2);
  uint64_t v6 = (char *)v18 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v4);
  uint64_t v8 = (char *)v18 - v7;
  static os_log_type_t.default.getter();
  if (qword_101637260 != -1) {
    swift_once();
  }
  sub_10000588C((uint64_t *)&unk_10163AD00);
  uint64_t v9 = swift_allocObject();
  *(_OWORD *)(v9 + 16) = xmmword_101342130;
  uint64_t v10 = MACAddress.description.getter();
  uint64_t v12 = v11;
  *(void *)(v9 + 56) = &type metadata for String;
  *(void *)(v9 + 64) = sub_10000B4CC();
  *(void *)(v9 + 32) = v10;
  *(void *)(v9 + 40) = v12;
  os_log(_:dso:log:_:_:)();
  swift_bridgeObjectRelease();
  static SystemInfo.lockState.getter();
  (*(void (**)(char *, void, uint64_t))(v3 + 104))(v6, enum case for SystemInfo.DeviceLockState.beforeFirstUnlock(_:), v2);
  sub_100B22DA4((unint64_t *)&qword_1016429C8, (void (*)(uint64_t))&type metadata accessor for SystemInfo.DeviceLockState);
  LOBYTE(v10) = dispatch thunk of static Equatable.== infix(_:_:)();
  uint64_t v13 = *(void (**)(char *, uint64_t))(v3 + 8);
  v13(v6, v2);
  v13(v8, v2);
  if (v10)
  {
    static os_log_type_t.default.getter();
    uint64_t v14 = _swiftEmptyArrayStorage;
    os_log(_:dso:log:_:_:)();
  }
  else
  {
    uint64_t v15 = sub_100AE35FC();
    __chkstk_darwin(v15);
    v18[-2] = a1;
    return sub_1000A493C((uint64_t (*)(char *))sub_100B5D334, &v18[-4], v16);
  }
  return (uint64_t)v14;
}

uint64_t sub_100AE475C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_100AE479C(a1, "secureLocationsCachedPayload(identifier: %s", (uint64_t (*)(void))sub_100B6D850, a2);
}

uint64_t sub_100AE477C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_100AE479C(a1, "secureLocationsCachedShared(identifier: %s", (uint64_t (*)(void))sub_100B6DA60, a2);
}

uint64_t sub_100AE479C@<X0>(uint64_t a1@<X0>, const char *a2@<X1>, uint64_t (*a3)(void)@<X2>, uint64_t a4@<X8>)
{
  uint64_t v24 = a2;
  uint64_t v8 = type metadata accessor for UUID();
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  uint64_t v11 = (char *)v21 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_101637070 != -1) {
    swift_once();
  }
  uint64_t v12 = type metadata accessor for Logger();
  sub_100010324(v12, (uint64_t)qword_10170EC30);
  (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))(v11, a1, v8);
  uint64_t v13 = Logger.logObject.getter();
  os_log_type_t v14 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v13, v14))
  {
    uint64_t v15 = swift_slowAlloc();
    uint64_t v22 = a1;
    uint64_t v16 = (uint8_t *)v15;
    uint64_t v17 = swift_slowAlloc();
    uint64_t v23 = a3;
    uint64_t v26 = v17;
    v21[1] = v4;
    void v21[2] = a4;
    *(_DWORD *)uint64_t v16 = 136315138;
    uint64_t v18 = UUID.uuidString.getter();
    uint64_t v25 = sub_1008FA0F0(v18, v19, &v26);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v8);
    _os_log_impl((void *)&_mh_execute_header, v13, v14, v24, v16, 0xCu);
    swift_arrayDestroy();
    a3 = v23;
    swift_slowDealloc();
    a1 = v22;
    swift_slowDealloc();
  }
  else
  {
    (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v8);
  }

  return a3(a1);
}

void *sub_100AE4A24()
{
  uint64_t v0 = type metadata accessor for SystemInfo.DeviceLockState();
  uint64_t v1 = *(void *)(v0 - 8);
  uint64_t v2 = __chkstk_darwin(v0);
  uint64_t v4 = (char *)v12 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v2);
  uint64_t v6 = (char *)v12 - v5;
  static SystemInfo.lockState.getter();
  (*(void (**)(char *, void, uint64_t))(v1 + 104))(v4, enum case for SystemInfo.DeviceLockState.beforeFirstUnlock(_:), v0);
  sub_100B22DA4((unint64_t *)&unk_101655610, (void (*)(uint64_t))&type metadata accessor for SystemInfo.DeviceLockState);
  dispatch thunk of RawRepresentable.rawValue.getter();
  dispatch thunk of RawRepresentable.rawValue.getter();
  uint64_t v8 = v12[0];
  uint64_t v7 = v12[1];
  uint64_t v9 = *(void (**)(char *, uint64_t))(v1 + 8);
  v9(v4, v0);
  v9(v6, v0);
  if (v7 != v8) {
    return sub_100B6DD50();
  }
  static os_log_type_t.default.getter();
  if (qword_101637260 != -1) {
    swift_once();
  }
  uint64_t v10 = _swiftEmptyArrayStorage;
  os_log(_:dso:log:_:_:)();
  return v10;
}

void *sub_100AE4C44()
{
  uint64_t v1 = v0;
  uint64_t v67 = type metadata accessor for UUID();
  uint64_t v61 = *(void *)(v67 - 8);
  uint64_t v2 = __chkstk_darwin(v67);
  uint64_t v65 = (char *)&v56 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v2);
  uint64_t v59 = (char *)&v56 - v4;
  uint64_t v5 = sub_10000588C(&qword_101638CF0);
  uint64_t v6 = __chkstk_darwin(v5 - 8);
  uint64_t v60 = (char *)&v56 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  uint64_t v9 = (char *)&v56 - v8;
  uint64_t v68 = type metadata accessor for SharedBeaconRecord(0);
  uint64_t v66 = *(void **)(v68 - 8);
  uint64_t v10 = __chkstk_darwin(v68);
  uint64_t v64 = (uint64_t)&v56 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = __chkstk_darwin(v10);
  uint64_t v63 = (uint64_t)&v56 - v13;
  __chkstk_darwin(v12);
  uint64_t v15 = (char *)&v56 - v14;
  uint64_t v16 = type metadata accessor for SystemInfo.DeviceLockState();
  uint64_t v17 = *(void *)(v16 - 8);
  uint64_t v18 = __chkstk_darwin(v16);
  uint64_t v20 = (char *)&v56 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v18);
  uint64_t v22 = (char *)&v56 - v21;
  static SystemInfo.lockState.getter();
  (*(void (**)(char *, void, uint64_t))(v17 + 104))(v20, enum case for SystemInfo.DeviceLockState.beforeFirstUnlock(_:), v16);
  sub_100B22DA4((unint64_t *)&unk_101655610, (void (*)(uint64_t))&type metadata accessor for SystemInfo.DeviceLockState);
  dispatch thunk of RawRepresentable.rawValue.getter();
  dispatch thunk of RawRepresentable.rawValue.getter();
  uint64_t v24 = v69;
  uint64_t v23 = v70;
  uint64_t v25 = *(void (**)(char *, uint64_t))(v17 + 8);
  v25(v20, v16);
  v25(v22, v16);
  if (v23 == v24)
  {
    static os_log_type_t.default.getter();
    if (qword_101637260 == -1)
    {
LABEL_3:
      uint64_t v26 = _swiftEmptyArrayStorage;
      os_log(_:dso:log:_:_:)();
      return v26;
    }
LABEL_31:
    swift_once();
    goto LABEL_3;
  }
  uint64_t v27 = sub_100B6BE48();
  uint64_t v28 = _swiftEmptyArrayStorage;
  int v70 = _swiftEmptyArrayStorage;
  uint64_t v29 = v27[2];
  uint64_t v57 = v1;
  if (v29)
  {
    unint64_t v30 = 0;
    uint64_t v62 = (uint64_t (**)(char *, uint64_t, uint64_t))(v61 + 48);
    uint64_t v31 = _swiftEmptyArrayStorage;
    uint64_t v32 = (uint64_t)v15;
    uint64_t v58 = v9;
    while (v30 < v27[2])
    {
      unint64_t v33 = (*((unsigned __int8 *)v66 + 80) + 32) & ~(unint64_t)*((unsigned __int8 *)v66 + 80);
      uint64_t v34 = v66[9];
      uint64_t v35 = v27;
      sub_100B30D0C((uint64_t)v27 + v33 + v34 * v30, v32, type metadata accessor for SharedBeaconRecord);
      sub_10001D074(v32 + *(int *)(v68 + 76), (uint64_t)v9, &qword_101638CF0);
      int v36 = (*v62)(v9, 1, v67);
      sub_10001DAB4((uint64_t)v9, &qword_101638CF0);
      if (v36 == 1)
      {
        sub_100B310AC(v32, type metadata accessor for SharedBeaconRecord);
      }
      else
      {
        uint64_t v37 = v29;
        sub_100B30DB4(v32, v63, type metadata accessor for SharedBeaconRecord);
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          sub_1000B7404(0, v31[2] + 1, 1);
        }
        uint64_t v31 = v70;
        unint64_t v39 = v70[2];
        unint64_t v38 = v70[3];
        if (v39 >= v38 >> 1)
        {
          sub_1000B7404(v38 > 1, v39 + 1, 1);
          uint64_t v31 = v70;
        }
        void v31[2] = v39 + 1;
        sub_100B30DB4(v63, (uint64_t)v31 + v33 + v39 * v34, type metadata accessor for SharedBeaconRecord);
        uint64_t v29 = v37;
        uint64_t v9 = v58;
      }
      ++v30;
      uint64_t v27 = v35;
      if (v29 == v30)
      {
        uint64_t v28 = v70;
        uint64_t v1 = v57;
        goto LABEL_16;
      }
    }
    __break(1u);
    goto LABEL_31;
  }
LABEL_16:
  swift_bridgeObjectRelease();
  uint64_t v40 = v28[2];
  if (v40)
  {
    uint64_t v41 = (uint64_t)v28 + ((*((unsigned __int8 *)v66 + 80) + 32) & ~(unint64_t)*((unsigned __int8 *)v66 + 80));
    uint64_t v42 = v66[9];
    uint64_t v43 = (unsigned int (**)(uint64_t, uint64_t, uint64_t))(v61 + 48);
    uint64_t v44 = (void (**)(char *, uint64_t, uint64_t))(v61 + 32);
    uint64_t v66 = v28;
    swift_retain();
    uint64_t v45 = (char *)_swiftEmptyArrayStorage;
    uint64_t v46 = v67;
    uint64_t v47 = (uint64_t)v60;
    do
    {
      uint64_t v48 = v64;
      sub_100B30D0C(v41, v64, type metadata accessor for SharedBeaconRecord);
      sub_10001D074(v48 + *(int *)(v68 + 76), v47, &qword_101638CF0);
      sub_100B310AC(v48, type metadata accessor for SharedBeaconRecord);
      if ((*v43)(v47, 1, v46) == 1)
      {
        sub_10001DAB4(v47, &qword_101638CF0);
      }
      else
      {
        uint64_t v49 = *v44;
        uint64_t v50 = v47;
        uint64_t v51 = v59;
        (*v44)(v59, v50, v46);
        v49(v65, (uint64_t)v51, v46);
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          uint64_t v45 = (char *)sub_100A6F668(0, *((void *)v45 + 2) + 1, 1, (unint64_t)v45);
        }
        unint64_t v53 = *((void *)v45 + 2);
        unint64_t v52 = *((void *)v45 + 3);
        if (v53 >= v52 >> 1) {
          uint64_t v45 = (char *)sub_100A6F668(v52 > 1, v53 + 1, 1, (unint64_t)v45);
        }
        *((void *)v45 + 2) = v53 + 1;
        uint64_t v46 = v67;
        v49(&v45[((*(unsigned __int8 *)(v61 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v61 + 80))+ *(void *)(v61 + 72) * v53], (uint64_t)v65, v67);
        uint64_t v47 = (uint64_t)v60;
      }
      v41 += v42;
      --v40;
    }
    while (v40);
    swift_release_n();
    uint64_t v1 = v57;
  }
  else
  {
    swift_release();
    uint64_t v45 = (char *)_swiftEmptyArrayStorage;
  }
  uint64_t v54 = sub_101158244((uint64_t)v45);
  swift_bridgeObjectRelease();
  swift_retain();
  uint64_t v26 = sub_100B34AD4(v54, v1);
  swift_bridgeObjectRelease();
  swift_release();
  return v26;
}

void *sub_100AE5420(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = sub_10000588C(&qword_10163BB70);
  __chkstk_darwin(v4 - 8);
  uint64_t v6 = (uint64_t *)((char *)&v48 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v7 = sub_10000588C((uint64_t *)&unk_10163AC90);
  uint64_t v8 = __chkstk_darwin(v7 - 8);
  uint64_t v51 = (uint64_t)&v48 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8);
  uint64_t v11 = (char *)&v48 - v10;
  id v12 = [objc_allocWithZone((Class)SPBeaconGroup) init];
  uint64_t v13 = v12;
  uint64_t v14 = 0;
  if ((*(unsigned char *)(a1 + 24) & 1) == 0) {
    uint64_t v14 = *(void *)(a1 + 16);
  }
  [v12 setVersion:v14];
  uint64_t v15 = type metadata accessor for OwnedBeaconGroup(0);
  uint64_t v16 = a1 + *(int *)(v15 + 24);
  Class isa = UUID._bridgeToObjectiveC()().super.isa;
  [v13 setIdentifier:isa];

  NSString v18 = String._bridgeToObjectiveC()();
  [v13 setName:v18];

  uint64_t v19 = MACAddress.data.getter();
  unint64_t v21 = v20;
  Class v22 = Data._bridgeToObjectiveC()().super.isa;
  sub_10001CFB8(v19, v21);
  [v13 setMacAddress:v22];

  [v13 setClassification:0];
  [v13 setIsPairingComplete:sub_1004CF378() & 1];
  [v13 setIsFindMyNetworkEnabled:*(unsigned __int8 *)(a1 + *(int *)(v15 + 32))];
  [v13 setStatus:sub_100AE5AA8(a1)];
  sub_1004D1434();
  type metadata accessor for UUID();
  sub_100B22DA4(&qword_10163BC60, (void (*)(uint64_t))&type metadata accessor for UUID);
  Class v23 = Set._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  [v13 setBeaconIdentifiers:v23];

  if (qword_101636CB8 != -1) {
    swift_once();
  }
  sub_1007B4970(v16, 0, 0, &v52);
  LOBYTE(v24) = sub_1004DA910((uint64_t)v11, v52);
  swift_bridgeObjectRelease();
  sub_10001DAB4((uint64_t)v11, (uint64_t *)&unk_10163AC90);
  [v13 setIsClassicConnected:v24 & 1];
  sub_100AA881C(a1);
  sub_10000588C((uint64_t *)&unk_101653DC0);
  sub_100062734(&qword_101659310, (uint64_t *)&unk_101653DC0);
  Class v25 = Set._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  [v13 setMultipartStatus:v25];

  uint64_t v26 = sub_1004D1434();
  swift_retain();
  sub_100B36BFC(v26, v2);
  LOBYTE(v25) = v27;
  swift_bridgeObjectRelease();
  swift_release();
  [v13 setIsConnected:v25 & 1];
  uint64_t v28 = sub_100B6D358(v16);
  uint64_t v29 = v28[2];
  unint64_t v30 = (int *)type metadata accessor for LostModeRecord();
  uint64_t v31 = *((void *)v30 - 1);
  if (v29)
  {
    sub_100B30D0C((uint64_t)v28+ ((*(unsigned __int8 *)(*((void *)v30 - 1) + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*((void *)v30 - 1) + 80)), (uint64_t)v6, (uint64_t (*)(void))type metadata accessor for LostModeRecord);
    uint64_t v32 = 0;
  }
  else
  {
    uint64_t v32 = 1;
  }
  (*(void (**)(uint64_t *, uint64_t, uint64_t, int *))(v31 + 56))(v6, v32, 1, v30);
  swift_bridgeObjectRelease();
  if ((*(unsigned int (**)(uint64_t *, uint64_t, int *))(v31 + 48))(v6, 1, v30) == 1)
  {
    sub_10001DAB4((uint64_t)v6, &qword_10163BB70);
    id v33 = 0;
  }
  else
  {
    uint64_t v34 = (uint64_t *)((char *)v6 + v30[9]);
    uint64_t v35 = *v34;
    uint64_t v36 = v34[1];
    uint64_t v37 = (uint64_t *)((char *)v6 + v30[7]);
    uint64_t v38 = *v37;
    uint64_t v39 = v37[1];
    uint64_t v40 = (uint64_t *)((char *)v6 + v30[8]);
    uint64_t v41 = v40[1];
    uint64_t v49 = *v40;
    uint64_t v50 = v35;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    uint64_t v43 = v51;
    sub_100B23660(v6, v51);
    uint64_t v44 = type metadata accessor for Date();
    (*(void (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v44 - 8) + 56))(v43, 0, 1, v44);
    id v45 = objc_allocWithZone((Class)SPLostModeInfo);
    id v33 = sub_100B23CB8(v50, v36, v38, v39, v49, v41, v43);
    sub_100B310AC((uint64_t)v6, (uint64_t (*)(void))type metadata accessor for LostModeRecord);
  }
  [v13 setLostModeInfo:v33];

  sub_1004D7FFC();
  sub_10001D4B0(0, (unint64_t *)&unk_101647840);
  Class v46 = Dictionary._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  [v13 setBeaconMap:v46];

  return v13;
}

uint64_t sub_100AE5AA8(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = type metadata accessor for OwnedBeaconGroup(0);
  uint64_t v5 = __chkstk_darwin(v4);
  uint64_t v173 = (uint64_t)v149 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = __chkstk_darwin(v5);
  uint64_t v160 = (uint64_t)v149 - v8;
  uint64_t v9 = __chkstk_darwin(v7);
  uint64_t v11 = (char *)v149 - v10;
  uint64_t v12 = __chkstk_darwin(v9);
  uint64_t v158 = (uint64_t)v149 - v13;
  __chkstk_darwin(v12);
  uint64_t v156 = (uint64_t)v149 - v14;
  uint64_t v170 = type metadata accessor for Date();
  uint64_t v172 = *(void *)(v170 - 8);
  uint64_t v15 = __chkstk_darwin(v170);
  uint64_t v163 = (uint64_t)v149 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v15);
  v162 = (char *)v149 - v17;
  uint64_t v18 = sub_10000588C(&qword_10163A918);
  uint64_t v176 = *(void **)(v18 - 8);
  uint64_t v19 = __chkstk_darwin(v18);
  unint64_t v21 = (char *)v149 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v22 = __chkstk_darwin(v19);
  uint64_t v169 = (char *)v149 - v23;
  uint64_t v24 = __chkstk_darwin(v22);
  uint64_t v157 = (void *)((char *)v149 - v25);
  uint64_t v26 = __chkstk_darwin(v24);
  uint64_t v28 = (char *)v149 - v27;
  uint64_t v29 = __chkstk_darwin(v26);
  uint64_t v31 = (char *)v149 - v30;
  uint64_t v32 = __chkstk_darwin(v29);
  uint64_t v168 = (void *)((char *)v149 - v33);
  uint64_t v34 = __chkstk_darwin(v32);
  uint64_t v161 = (void *)((char *)v149 - v35);
  uint64_t v36 = __chkstk_darwin(v34);
  uint64_t v38 = (void *)((char *)v149 - v37);
  uint64_t v39 = __chkstk_darwin(v36);
  uint64_t v171 = (void *)((char *)v149 - v40);
  __chkstk_darwin(v39);
  uint64_t v42 = (void *)((char *)v149 - v41);
  uint64_t v43 = sub_10000588C((uint64_t *)&qword_101659320);
  uint64_t v44 = __chkstk_darwin(v43 - 8);
  uint64_t v166 = (void *)((char *)v149 - ((v45 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v46 = __chkstk_darwin(v44);
  uint64_t v47 = __chkstk_darwin(v46);
  uint64_t v167 = (uint64_t)v149 - v48;
  uint64_t v49 = __chkstk_darwin(v47);
  __chkstk_darwin(v49);
  uint64_t v174 = a1;
  uint64_t v175 = (uint64_t)v149 - v52;
  unint64_t v53 = *(void *)(*(void *)(a1 + *(int *)(v4 + 40)) + 16);
  if (v53 >= 0x100)
  {
    _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
    JUMPOUT(0x100AE7370);
  }
  if (v53 == 1)
  {
    if (qword_101636F50 == -1)
    {
LABEL_4:
      uint64_t v54 = type metadata accessor for Logger();
      sub_100010324(v54, (uint64_t)qword_10170E9E8);
      sub_100B30D0C(v174, v173, type metadata accessor for OwnedBeaconGroup);
      uint64_t v55 = Logger.logObject.getter();
      os_log_type_t v56 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v55, v56))
      {
        uint64_t v57 = (uint8_t *)swift_slowAlloc();
        uint64_t v178 = swift_slowAlloc();
        *(_DWORD *)uint64_t v57 = 136315138;
        uint64_t v58 = v173;
        type metadata accessor for UUID();
        sub_100B22DA4((unint64_t *)&qword_101638B10, (void (*)(uint64_t))&type metadata accessor for UUID);
        uint64_t v59 = dispatch thunk of CustomStringConvertible.description.getter();
        uint64_t v177 = sub_1008FA0F0(v59, v60, &v178);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        sub_100B310AC(v58, type metadata accessor for OwnedBeaconGroup);
        _os_log_impl((void *)&_mh_execute_header, v55, v56, "%s is a single beacon group, returning .grouped", v57, 0xCu);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
      }
      else
      {
        sub_100B310AC(v173, type metadata accessor for OwnedBeaconGroup);
      }

      return 2;
    }
LABEL_74:
    swift_once();
    goto LABEL_4;
  }
  uint64_t v153 = (void *)v51;
  uint64_t v150 = v11;
  os_log_type_t v151 = (uint64_t *)v21;
  uint64_t v152 = v4;
  uint64_t v173 = v50;
  uint64_t v61 = sub_1004D1434();
  swift_retain();
  uint64_t v62 = sub_100B37AEC(v61, v2);
  swift_release();
  swift_bridgeObjectRelease();
  if (qword_101636CD8 != -1) {
    swift_once();
  }
  OS_dispatch_queue.sync<A>(execute:)();
  uint64_t v159 = (uint64_t (*)(void, void, void))sub_1010AB718(v178);
  swift_bridgeObjectRelease();
  uint64_t v63 = *(void *)(v62 + 16);
  uint64_t v164 = v18;
  if (v63)
  {
    uint64_t v64 = v62 + ((*((unsigned __int8 *)v176 + 80) + 32) & ~(unint64_t)*((unsigned __int8 *)v176 + 80));
    uint64_t v65 = v176[9];
    swift_bridgeObjectRetain();
    uint64_t v66 = v63;
    while (1)
    {
      sub_10001D074(v64, (uint64_t)v42, &qword_10163A918);
      if (*v42 == 1) {
        break;
      }
      sub_10001DAB4((uint64_t)v42, &qword_10163A918);
      v64 += v65;
      if (!--v66)
      {
        swift_bridgeObjectRelease();
        uint64_t v18 = v164;
        goto LABEL_13;
      }
    }
    swift_bridgeObjectRelease();
    uint64_t v72 = v175;
    sub_10001D608((uint64_t)v42, v175, &qword_10163A918);
    uint64_t v68 = (void (*)(void, void, void, void))v176[7];
    uint64_t v67 = v72;
    uint64_t v69 = 0;
    uint64_t v70 = v164;
  }
  else
  {
LABEL_13:
    uint64_t v67 = v175;
    uint64_t v68 = (void (*)(void, void, void, void))v176[7];
    uint64_t v69 = 1;
    uint64_t v70 = v18;
  }
  unint64_t v165 = v68;
  v68(v67, v69, 1, v70);
  if (v63)
  {
    uint64_t v73 = v62 + ((*((unsigned __int8 *)v176 + 80) + 32) & ~(unint64_t)*((unsigned __int8 *)v176 + 80));
    uint64_t v74 = v176[9];
    swift_bridgeObjectRetain();
    uint64_t v75 = v63;
    while (1)
    {
      sub_10001D074(v73, (uint64_t)v38, &qword_10163A918);
      if (*v38 == 4) {
        break;
      }
      sub_10001DAB4((uint64_t)v38, &qword_10163A918);
      v73 += v74;
      if (!--v75)
      {
        swift_bridgeObjectRelease();
        goto LABEL_22;
      }
    }
    swift_bridgeObjectRelease();
    sub_10001D608((uint64_t)v38, v173, &qword_10163A918);
    uint64_t v76 = 0;
  }
  else
  {
LABEL_22:
    uint64_t v76 = 1;
  }
  unint64_t v77 = v176;
  uint64_t v78 = v173;
  uint64_t v79 = v164;
  uint64_t v154 = (char *)(v176 + 7);
  v165(v173, v76, 1, v164);
  unint64_t v80 = (void *)v167;
  sub_10001D074(v175, v167, (uint64_t *)&qword_101659320);
  uint64_t v159 = (uint64_t (*)(void, void, void))v77[6];
  int v81 = v159(v80, 1, v79);
  uint64_t v82 = (void *)v172;
  unint64_t v155 = v77 + 6;
  if (v81 == 1)
  {
    sub_10001DAB4((uint64_t)v80, (uint64_t *)&qword_101659320);
    int64_t v83 = (uint64_t *)v169;
    uint64_t v84 = v176;
    if (v63)
    {
LABEL_26:
      if (!*(void *)(v62 + 16))
      {
        __break(1u);
LABEL_76:
        swift_once();
LABEL_48:
        uint64_t v107 = type metadata accessor for Logger();
        sub_100010324(v107, (uint64_t)qword_10170E9E8);
        uint64_t v108 = v160;
        sub_100B30D0C(v174, v160, type metadata accessor for OwnedBeaconGroup);
        uint64_t v109 = Logger.logObject.getter();
        os_log_type_t v110 = static os_log_type_t.default.getter();
        if (os_log_type_enabled(v109, v110))
        {
          uint64_t v111 = (uint8_t *)swift_slowAlloc();
          uint64_t v178 = swift_slowAlloc();
          *(_DWORD *)uint64_t v111 = 136315138;
          type metadata accessor for UUID();
          sub_100B22DA4((unint64_t *)&qword_101638B10, (void (*)(uint64_t))&type metadata accessor for UUID);
          uint64_t v112 = dispatch thunk of CustomStringConvertible.description.getter();
          uint64_t v177 = sub_1008FA0F0(v112, v113, &v178);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease();
          sub_100B310AC(v108, type metadata accessor for OwnedBeaconGroup);
          _os_log_impl((void *)&_mh_execute_header, v109, v110, "No multipart observation for group %s has been found, returning .unknown", v111, 0xCu);
          swift_arrayDestroy();
          swift_slowDealloc();
          swift_slowDealloc();
        }
        else
        {

          sub_100B310AC(v108, type metadata accessor for OwnedBeaconGroup);
        }
LABEL_63:
        sub_10001DAB4(v173, (uint64_t *)&qword_101659320);
        sub_10001DAB4(v175, (uint64_t *)&qword_101659320);
        return 0;
      }
      uint64_t v85 = v62 + ((*((unsigned __int8 *)v84 + 80) + 32) & ~(unint64_t)*((unsigned __int8 *)v84 + 80));
      sub_10001D074(v85, (uint64_t)v31, &qword_10163A918);
      swift_bridgeObjectRetain();
      if (v63 != 1)
      {
        unint64_t v92 = 1;
        while (v92 < *(void *)(v62 + 16))
        {
          sub_10001D074(v85 + v84[9] * v92, (uint64_t)v28, &qword_10163A918);
          if (static Date.< infix(_:_:)())
          {
            sub_10001DAB4((uint64_t)v31, &qword_10163A918);
            sub_10001D608((uint64_t)v28, (uint64_t)v31, &qword_10163A918);
          }
          else
          {
            sub_10001DAB4((uint64_t)v28, &qword_10163A918);
          }
          if (v63 == ++v92) {
            goto LABEL_28;
          }
        }
        __break(1u);
        goto LABEL_74;
      }
LABEL_28:
      swift_bridgeObjectRelease();
      uint64_t v86 = v166;
      sub_10001D608((uint64_t)v31, (uint64_t)v166, &qword_10163A918);
      v165(v86, 0, 1, v79);
      swift_bridgeObjectRelease();
      int64_t v83 = (uint64_t *)v169;
      goto LABEL_46;
    }
  }
  else
  {
    uint64_t v87 = (uint64_t)v171 + *(int *)(v79 + 48);
    *uint64_t v171 = *v80;
    uint64_t v88 = (void (*)(void))v82[4];
    uint64_t v167 = v87;
    uint64_t v89 = v170;
    v88();
    uint64_t v90 = v78;
    uint64_t v91 = v153;
    sub_10001D074(v90, (uint64_t)v153, (uint64_t *)&qword_101659320);
    if (v159(v91, 1, v79) == 1)
    {
      sub_10001DAB4((uint64_t)v171, &qword_10163A918);
      sub_10001DAB4((uint64_t)v91, (uint64_t *)&qword_101659320);
    }
    else
    {
      v149[1] = (char *)v161 + *(int *)(v79 + 48);
      void *v161 = *v91;
      v88();
      uint64_t v93 = v162;
      Date.addingTimeInterval(_:)();
      uint64_t v94 = v163;
      static Date.trustedNow.getter(v163);
      uint64_t v153 = (void *)sub_100B22DA4((unint64_t *)&qword_1016605E0, (void (*)(uint64_t))&type metadata accessor for Date);
      LODWORD(v167) = dispatch thunk of static Comparable.< infix(_:_:)();
      uint64_t v95 = *(void (**)(void, void))(v172 + 8);
      v95(v94, v89);
      v95(v93, v89);
      Date.addingTimeInterval(_:)();
      static Date.trustedNow.getter(v94);
      char v96 = dispatch thunk of static Comparable.< infix(_:_:)();
      v95(v94, v89);
      v95(v93, v89);
      if ((v167 & 1) == 0 && (v96 & 1) == 0)
      {
        swift_bridgeObjectRelease();
        uint64_t v97 = v175;
        if (qword_101636F50 != -1) {
          swift_once();
        }
        uint64_t v98 = type metadata accessor for Logger();
        sub_100010324(v98, (uint64_t)qword_10170E9E8);
        uint64_t v99 = v156;
        sub_100B30D0C(v174, v156, type metadata accessor for OwnedBeaconGroup);
        uint64_t v100 = Logger.logObject.getter();
        os_log_type_t v101 = static os_log_type_t.default.getter();
        if (os_log_type_enabled(v100, v101))
        {
          uint64_t v102 = (uint8_t *)swift_slowAlloc();
          uint64_t v178 = swift_slowAlloc();
          *(_DWORD *)uint64_t v102 = 136315138;
          type metadata accessor for UUID();
          sub_100B22DA4((unint64_t *)&qword_101638B10, (void (*)(uint64_t))&type metadata accessor for UUID);
          uint64_t v103 = dispatch thunk of CustomStringConvertible.description.getter();
          uint64_t v177 = sub_1008FA0F0(v103, v104, &v178);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease();
          sub_100B310AC(v99, type metadata accessor for OwnedBeaconGroup);
          _os_log_impl((void *)&_mh_execute_header, v100, v101, "Buds from group %s report separated & separatedInCase, returning separatedInCase", v102, 0xCu);
          swift_arrayDestroy();
          swift_slowDealloc();
          swift_slowDealloc();
        }
        else
        {

          sub_100B310AC(v99, type metadata accessor for OwnedBeaconGroup);
        }
        sub_10001DAB4((uint64_t)v161, &qword_10163A918);
        sub_10001DAB4((uint64_t)v171, &qword_10163A918);
        sub_10001DAB4(v173, (uint64_t *)&qword_101659320);
        sub_10001DAB4(v97, (uint64_t *)&qword_101659320);
        return 4;
      }
      sub_10001DAB4((uint64_t)v161, &qword_10163A918);
      sub_10001DAB4((uint64_t)v171, &qword_10163A918);
      uint64_t v79 = v164;
    }
    int64_t v83 = (uint64_t *)v169;
    uint64_t v82 = (void *)v172;
    uint64_t v84 = v176;
    if (v63) {
      goto LABEL_26;
    }
  }
  uint64_t v86 = v166;
  v165(v166, 1, 1, v79);
  swift_bridgeObjectRelease();
LABEL_46:
  int v105 = v159(v86, 1, v79);
  uint64_t v106 = v170;
  if (v105 == 1)
  {
    sub_10001DAB4((uint64_t)v86, (uint64_t *)&qword_101659320);
    if (qword_101636F50 == -1) {
      goto LABEL_48;
    }
    goto LABEL_76;
  }
  uint64_t v114 = *(int *)(v79 + 48);
  uint64_t v115 = (char *)v168 + v114;
  uint64_t *v168 = *v86;
  uint64_t v171 = (void *)v82[4];
  uint64_t v169 = (char *)(v82 + 4);
  ((void (*)(char *, char *, uint64_t))v171)(v115, (char *)v86 + v114, v106);
  uint64_t v116 = v162;
  uint64_t v117 = v115;
  Date.addingTimeInterval(_:)();
  uint64_t v118 = v163;
  static Date.trustedNow.getter(v163);
  char v119 = static Date.< infix(_:_:)();
  uint64_t v120 = (void *)v82[1];
  ((void (*)(uint64_t, uint64_t))v120)(v118, v106);
  uint64_t v176 = v120;
  ((void (*)(char *, uint64_t))v120)(v116, v106);
  if (v119)
  {
    if (qword_101636F50 != -1) {
      swift_once();
    }
    uint64_t v121 = type metadata accessor for Logger();
    sub_100010324(v121, (uint64_t)qword_10170E9E8);
    uint64_t v122 = v158;
    sub_100B30D0C(v174, v158, type metadata accessor for OwnedBeaconGroup);
    os_log_t v123 = Logger.logObject.getter();
    os_log_type_t v124 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v123, v124))
    {
      uint64_t v125 = (uint8_t *)swift_slowAlloc();
      uint64_t v178 = swift_slowAlloc();
      *(_DWORD *)uint64_t v125 = 136315138;
      type metadata accessor for UUID();
      sub_100B22DA4((unint64_t *)&qword_101638B10, (void (*)(uint64_t))&type metadata accessor for UUID);
      uint64_t v126 = dispatch thunk of CustomStringConvertible.description.getter();
      uint64_t v177 = sub_1008FA0F0(v126, v127, &v178);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      sub_100B310AC(v122, type metadata accessor for OwnedBeaconGroup);
      _os_log_impl((void *)&_mh_execute_header, v123, v124, "Last multipart observation for group %s has expired, returning .unknown", v125, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {

      sub_100B310AC(v122, type metadata accessor for OwnedBeaconGroup);
    }
    sub_10001DAB4((uint64_t)v168, &qword_10163A918);
    goto LABEL_63;
  }
  if (qword_101636F50 != -1) {
    swift_once();
  }
  uint64_t v128 = type metadata accessor for Logger();
  sub_100010324(v128, (uint64_t)qword_10170E9E8);
  uint64_t v129 = (uint64_t)v157;
  uint64_t v130 = (char *)v157 + *(int *)(v79 + 48);
  *uint64_t v157 = *v168;
  uint64_t v131 = (void (*)(void, void, void))v82[2];
  uint64_t v132 = v117;
  v131(v130, v117, v106);
  sub_10001D608(v129, (uint64_t)v83, &qword_10163A918);
  uint64_t v133 = (uint64_t)v150;
  sub_100B30D0C(v174, (uint64_t)v150, type metadata accessor for OwnedBeaconGroup);
  os_log_type_t v134 = Logger.logObject.getter();
  int v135 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v134, (os_log_type_t)v135))
  {
    LODWORD(v174) = v135;
    uint64_t v136 = swift_slowAlloc();
    uint64_t v172 = swift_slowAlloc();
    uint64_t v178 = v172;
    *(_DWORD *)uint64_t v136 = 136315394;
    uint64_t v137 = *(int *)(v79 + 48);
    unint64_t v138 = v151;
    os_log_t v139 = (char *)v151 + v137;
    uint64_t v140 = v106;
    uint64_t v141 = *v83;
    *os_log_type_t v151 = *v83;
    v131((char *)v138 + v137, (char *)v83 + v137, v140);
    ((void (*)(char *, uint64_t))v176)(v139, v140);
    uint64_t v142 = 0x6574617261706573;
    unint64_t v143 = 0xE900000000000064;
    switch(v141)
    {
      case 1:
        break;
      case 2:
        unint64_t v143 = 0xE700000000000000;
        uint64_t v142 = 0x646570756F7267;
        break;
      case 3:
        unint64_t v143 = 0xED0000657361436ELL;
        uint64_t v142 = 0x49646570756F7267;
        break;
      case 4:
        unint64_t v143 = 0xEF657361436E4964;
        break;
      default:
        unint64_t v143 = 0xE700000000000000;
        uint64_t v142 = 0x6E776F6E6B6E75;
        break;
    }
    uint64_t v177 = sub_1008FA0F0(v142, v143, &v178);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    sub_10001DAB4((uint64_t)v83, &qword_10163A918);
    *(_WORD *)(v136 + 12) = 2080;
    uint64_t v144 = (uint64_t)v150;
    type metadata accessor for UUID();
    sub_100B22DA4((unint64_t *)&qword_101638B10, (void (*)(uint64_t))&type metadata accessor for UUID);
    uint64_t v145 = dispatch thunk of CustomStringConvertible.description.getter();
    uint64_t v177 = sub_1008FA0F0(v145, v146, &v178);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    sub_100B310AC(v144, type metadata accessor for OwnedBeaconGroup);
    _os_log_impl((void *)&_mh_execute_header, v134, (os_log_type_t)v174, "Returning %s for group %s", (uint8_t *)v136, 0x16u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    sub_10001DAB4(v173, (uint64_t *)&qword_101659320);
    sub_10001DAB4(v175, (uint64_t *)&qword_101659320);
    uint64_t v106 = v170;
    uint64_t v79 = v164;
  }
  else
  {

    sub_100B310AC(v133, type metadata accessor for OwnedBeaconGroup);
    sub_10001DAB4((uint64_t)v83, &qword_10163A918);
    sub_10001DAB4(v173, (uint64_t *)&qword_101659320);
    sub_10001DAB4(v175, (uint64_t *)&qword_101659320);
  }
  uint64_t v147 = (char *)v151 + *(int *)(v79 + 48);
  uint64_t v71 = *v168;
  *os_log_type_t v151 = *v168;
  ((void (*)(char *, char *, uint64_t))v171)(v147, v132, v106);
  ((void (*)(char *, uint64_t))v176)(v147, v106);
  return v71;
}

uint64_t sub_100AE7384(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for SharedBeaconGroup();
  uint64_t v3 = __chkstk_darwin(v2);
  uint64_t v5 = &v19[-((v4 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  __chkstk_darwin(v3);
  uint64_t v7 = &v19[-v6 - 8];
  uint64_t v8 = type metadata accessor for OwnedBeaconGroup(0);
  uint64_t v9 = __chkstk_darwin(v8);
  uint64_t v11 = &v19[-((v10 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  __chkstk_darwin(v9);
  uint64_t v13 = &v19[-v12 - 8];
  sub_10001D010(a1, (uint64_t)v19);
  sub_10000588C((uint64_t *)&unk_101657950);
  if (swift_dynamicCast())
  {
    sub_100B30DB4((uint64_t)v13, (uint64_t)v11, type metadata accessor for OwnedBeaconGroup);
    uint64_t v14 = sub_100AE5420((uint64_t)v11);
    uint64_t v15 = type metadata accessor for OwnedBeaconGroup;
    uint64_t v16 = (uint64_t)v11;
LABEL_5:
    sub_100B310AC(v16, v15);
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)v19);
    return (uint64_t)v14;
  }
  if (swift_dynamicCast())
  {
    sub_100B30DB4((uint64_t)v7, (uint64_t)v5, (uint64_t (*)(void))type metadata accessor for SharedBeaconGroup);
    uint64_t v14 = sub_100B38C7C();
    uint64_t v15 = (uint64_t (*)(void))type metadata accessor for SharedBeaconGroup;
    uint64_t v16 = (uint64_t)v5;
    goto LABEL_5;
  }
  uint64_t result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_100AE75E0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v35 = a2;
  uint64_t v3 = type metadata accessor for URL();
  uint64_t v33 = *(void *)(v3 - 8);
  uint64_t v34 = v3;
  __chkstk_darwin(v3);
  uint64_t v5 = (char *)v31 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = type metadata accessor for SystemInfo.DeviceLockState();
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = __chkstk_darwin(v6);
  uint64_t v10 = (char *)v31 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8);
  uint64_t v12 = (char *)v31 - v11;
  static os_log_type_t.default.getter();
  if (qword_101637260 != -1) {
    swift_once();
  }
  sub_10000588C((uint64_t *)&unk_10163AD00);
  uint64_t v13 = swift_allocObject();
  *(_OWORD *)(v13 + 16) = xmmword_101342130;
  uint64_t v32 = a1;
  uint64_t v14 = UUID.uuidString.getter();
  uint64_t v16 = v15;
  *(void *)(v13 + 56) = &type metadata for String;
  *(void *)(v13 + 64) = sub_10000B4CC();
  *(void *)(v13 + 32) = v14;
  *(void *)(v13 + 40) = v16;
  os_log(_:dso:log:_:_:)();
  swift_bridgeObjectRelease();
  static SystemInfo.lockState.getter();
  (*(void (**)(char *, void, uint64_t))(v7 + 104))(v10, enum case for SystemInfo.DeviceLockState.beforeFirstUnlock(_:), v6);
  sub_100B22DA4((unint64_t *)&qword_1016429C8, (void (*)(uint64_t))&type metadata accessor for SystemInfo.DeviceLockState);
  char v17 = dispatch thunk of static Equatable.== infix(_:_:)();
  uint64_t v18 = *(void (**)(char *, uint64_t))(v7 + 8);
  v18(v10, v6);
  v18(v12, v6);
  if (v17)
  {
    static os_log_type_t.default.getter();
    os_log(_:dso:log:_:_:)();
    uint64_t v19 = type metadata accessor for OwnedBeaconGroup(0);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v19 - 8) + 56))(v35, 1, 1, v19);
  }
  else
  {
    uint64_t v21 = *(void *)(v31[1] + 160);
    if (qword_101636B50 != -1) {
      swift_once();
    }
    uint64_t v22 = v34;
    uint64_t v23 = sub_100010324(v34, (uint64_t)qword_10170DF88);
    uint64_t v24 = v33;
    (*(void (**)(char *, uint64_t, uint64_t))(v33 + 16))(v5, v23, v22);
    v25._object = (void *)0x8000000101402BA0;
    v25._uint64_t countAndFlagsBits = 0xD000000000000014;
    prohibitAsyncContext(functionName:)(v25);
    uint64_t v36 = type metadata accessor for OwnedBeaconGroup(0);
    sub_10000588C(&qword_101659378);
    uint64_t v26 = String.init<A>(describing:)();
    uint64_t v28 = v27;
    __chkstk_darwin(v29);
    uint64_t v30 = v32;
    v31[-6] = v21;
    v31[-5] = v30;
    v31[-4] = v5;
    v31[-3] = v26;
    v31[-2] = v28;
    sub_10000588C(&qword_10163BB20);
    OS_dispatch_queue.sync<A>(execute:)();
    swift_bridgeObjectRelease();
    return (*(uint64_t (**)(char *, uint64_t))(v24 + 8))(v5, v22);
  }
}

uint64_t sub_100AE7A78@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v33 = a3;
  uint64_t v5 = type metadata accessor for OwnedBeaconGroup(0);
  uint64_t v34 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v36 = (char *)&v32 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for SystemInfo.DeviceLockState();
  uint64_t v8 = *(void *)(v7 - 8);
  uint64_t v9 = __chkstk_darwin(v7);
  uint64_t v11 = (char *)&v32 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9);
  uint64_t v13 = (uint64_t *)((char *)&v32 - v12);
  uint64_t v14 = type metadata accessor for String.Encoding();
  __chkstk_darwin(v14 - 8);
  LODWORD(v40) = static os_log_type_t.default.getter();
  if (qword_101637260 != -1) {
LABEL_21:
  }
    swift_once();
  uint64_t v39 = qword_10170EFB8;
  sub_10000588C((uint64_t *)&unk_10163AD00);
  uint64_t v15 = swift_allocObject();
  *(_OWORD *)(v15 + 16) = xmmword_101342130;
  static String.Encoding.utf8.getter();
  uint64_t v16 = String.init(data:encoding:)();
  uint64_t v37 = a1;
  unint64_t v38 = a2;
  if (!v17) {
    uint64_t v16 = Data.hexString.getter();
  }
  uint64_t v18 = v16;
  uint64_t v19 = v17;
  *(void *)(v15 + 56) = &type metadata for String;
  *(void *)(v15 + 64) = sub_10000B4CC();
  *(void *)(v15 + 32) = v18;
  *(void *)(v15 + 40) = v19;
  os_log(_:dso:log:_:_:)();
  swift_bridgeObjectRelease();
  static SystemInfo.lockState.getter();
  (*(void (**)(char *, void, uint64_t))(v8 + 104))(v11, enum case for SystemInfo.DeviceLockState.beforeFirstUnlock(_:), v7);
  sub_100B22DA4((unint64_t *)&qword_1016429C8, (void (*)(uint64_t))&type metadata accessor for SystemInfo.DeviceLockState);
  LOBYTE(v19) = dispatch thunk of static Equatable.== infix(_:_:)();
  uint64_t v20 = *(void (**)(char *, uint64_t))(v8 + 8);
  v20(v11, v7);
  v20((char *)v13, v7);
  if (v19)
  {
    static os_log_type_t.default.getter();
    os_log(_:dso:log:_:_:)();
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v34 + 56))(v33, 1, 1, v5);
  }
  else
  {
    uint64_t v22 = sub_100AE4A24();
    uint64_t v7 = v22[2];
    if (v7)
    {
      uint64_t v23 = (uint64_t)v22 + ((*(unsigned __int8 *)(v34 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v34 + 80));
      uint64_t v39 = *(void *)(v34 + 72);
      uint64_t v32 = v22;
      swift_bridgeObjectRetain();
      uint64_t v25 = v37;
      unint64_t v24 = v38;
      uint64_t v26 = (uint64_t)v36;
      uint64_t v35 = v5;
      while (1)
      {
        sub_100B30D0C(v23, v26, type metadata accessor for OwnedBeaconGroup);
        a1 = *(void *)(v26 + *(int *)(v5 + 40));
        uint64_t v27 = *(void *)(a1 + 16);
        if (v27)
        {
          sub_10000588C(&qword_10163A7F0);
          uint64_t v13 = (uint64_t *)swift_allocObject();
          int64_t v28 = j__malloc_size(v13);
          uint64_t v29 = v28 - 32;
          if (v28 < 32) {
            uint64_t v29 = v28 - 17;
          }
          v13[2] = v27;
          v13[3] = 2 * (v29 >> 4);
          uint64_t v40 = sub_100712FEC((uint64_t)v41, v13 + 4, v27, a1);
          uint64_t v11 = (char *)v41[1];
          uint64_t v8 = v41[2];
          a2 = v41[3];
          uint64_t v5 = v41[4];
          swift_bridgeObjectRetain_n();
          sub_100132C20();
          if (v40 != v27)
          {
            __break(1u);
            goto LABEL_21;
          }
          swift_bridgeObjectRelease();
          uint64_t v5 = v35;
          uint64_t v26 = (uint64_t)v36;
          uint64_t v25 = v37;
          unint64_t v24 = v38;
        }
        else
        {
          uint64_t v13 = _swiftEmptyArrayStorage;
        }
        char v30 = sub_1002742EC(v25, v24, (uint64_t)v13);
        swift_release();
        if (v30)
        {
          swift_bridgeObjectRelease();
          uint64_t v31 = v33;
          sub_100B30DB4(v26, v33, type metadata accessor for OwnedBeaconGroup);
          (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v34 + 56))(v31, 0, 1, v5);
          return swift_bridgeObjectRelease();
        }
        sub_100B310AC(v26, type metadata accessor for OwnedBeaconGroup);
        v23 += v39;
        if (!--v7)
        {
          swift_bridgeObjectRelease();
          break;
        }
      }
    }
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v34 + 56))(v33, 1, 1, v5);
    return swift_bridgeObjectRelease();
  }
}

uint64_t sub_100AE800C@<X0>(uint64_t a1@<X8>)
{
  uint64_t v25 = a1;
  uint64_t v1 = type metadata accessor for OwnedBeaconGroup(0);
  uint64_t v27 = *(void *)(v1 - 8);
  uint64_t v28 = v1;
  __chkstk_darwin(v1);
  uint64_t v3 = (char *)&v24 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = type metadata accessor for SystemInfo.DeviceLockState();
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = __chkstk_darwin(v4);
  uint64_t v8 = (char *)&v24 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  uint64_t v10 = (char *)&v24 - v9;
  int v26 = static os_log_type_t.default.getter();
  if (qword_101637260 != -1) {
    swift_once();
  }
  sub_10000588C((uint64_t *)&unk_10163AD00);
  uint64_t v11 = swift_allocObject();
  *(_OWORD *)(v11 + 16) = xmmword_101342130;
  uint64_t v12 = MACAddress.description.getter();
  uint64_t v14 = v13;
  *(void *)(v11 + 56) = &type metadata for String;
  *(void *)(v11 + 64) = sub_10000B4CC();
  *(void *)(v11 + 32) = v12;
  *(void *)(v11 + 40) = v14;
  os_log(_:dso:log:_:_:)();
  swift_bridgeObjectRelease();
  static SystemInfo.lockState.getter();
  (*(void (**)(char *, void, uint64_t))(v5 + 104))(v8, enum case for SystemInfo.DeviceLockState.beforeFirstUnlock(_:), v4);
  sub_100B22DA4((unint64_t *)&qword_1016429C8, (void (*)(uint64_t))&type metadata accessor for SystemInfo.DeviceLockState);
  LOBYTE(v12) = dispatch thunk of static Equatable.== infix(_:_:)();
  uint64_t v15 = *(void (**)(char *, uint64_t))(v5 + 8);
  v15(v8, v4);
  v15(v10, v4);
  if (v12)
  {
    static os_log_type_t.default.getter();
    os_log(_:dso:log:_:_:)();
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v27 + 56))(v25, 1, 1, v28);
  }
  else
  {
    uint64_t v17 = sub_100AE4A24();
    uint64_t v18 = v17[2];
    uint64_t v20 = v27;
    uint64_t v19 = v28;
    if (v18)
    {
      uint64_t v21 = (uint64_t)v17 + ((*(unsigned __int8 *)(v27 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v27 + 80));
      uint64_t v22 = *(void *)(v27 + 72);
      while (1)
      {
        sub_100B30D0C(v21, (uint64_t)v3, type metadata accessor for OwnedBeaconGroup);
        if (static MACAddress.== infix(_:_:)()) {
          break;
        }
        sub_100B310AC((uint64_t)v3, type metadata accessor for OwnedBeaconGroup);
        v21 += v22;
        if (!--v18) {
          goto LABEL_9;
        }
      }
      uint64_t v23 = v25;
      sub_100B30DB4((uint64_t)v3, v25, type metadata accessor for OwnedBeaconGroup);
      (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v20 + 56))(v23, 0, 1, v19);
    }
    else
    {
LABEL_9:
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v20 + 56))(v25, 1, 1, v19);
    }
    return swift_bridgeObjectRelease();
  }
}

uint64_t sub_100AE840C(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for SystemInfo.DeviceLockState();
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t v4 = __chkstk_darwin(v2);
  uint64_t v6 = (char *)v18 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v4);
  uint64_t v8 = (char *)v18 - v7;
  static os_log_type_t.default.getter();
  if (qword_101637260 != -1) {
    swift_once();
  }
  sub_10000588C((uint64_t *)&unk_10163AD00);
  uint64_t v9 = swift_allocObject();
  *(_OWORD *)(v9 + 16) = xmmword_101342130;
  uint64_t v10 = MACAddress.description.getter();
  uint64_t v12 = v11;
  *(void *)(v9 + 56) = &type metadata for String;
  *(void *)(v9 + 64) = sub_10000B4CC();
  *(void *)(v9 + 32) = v10;
  *(void *)(v9 + 40) = v12;
  os_log(_:dso:log:_:_:)();
  swift_bridgeObjectRelease();
  static SystemInfo.lockState.getter();
  (*(void (**)(char *, void, uint64_t))(v3 + 104))(v6, enum case for SystemInfo.DeviceLockState.beforeFirstUnlock(_:), v2);
  sub_100B22DA4((unint64_t *)&qword_1016429C8, (void (*)(uint64_t))&type metadata accessor for SystemInfo.DeviceLockState);
  LOBYTE(v10) = dispatch thunk of static Equatable.== infix(_:_:)();
  uint64_t v13 = *(void (**)(char *, uint64_t))(v3 + 8);
  v13(v6, v2);
  v13(v8, v2);
  if (v10)
  {
    static os_log_type_t.default.getter();
    uint64_t v14 = _swiftEmptyArrayStorage;
    os_log(_:dso:log:_:_:)();
  }
  else
  {
    uint64_t v15 = sub_100AE4A24();
    __chkstk_darwin(v15);
    v18[-2] = a1;
    return sub_1000A46EC((uint64_t (*)(char *))sub_100B5D2F0, &v18[-4], v16);
  }
  return (uint64_t)v14;
}

uint64_t sub_100AE86F4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v43 = a2;
  uint64_t v45 = type metadata accessor for SharedBeaconRecord(0);
  uint64_t v41 = *(void *)(v45 - 8);
  __chkstk_darwin(v45);
  uint64_t v4 = (char *)&v41 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v47 = type metadata accessor for UUID();
  uint64_t v5 = *(void *)(v47 - 8);
  __chkstk_darwin(v47);
  uint64_t v46 = (char *)&v41 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for SystemInfo.DeviceLockState();
  uint64_t v8 = *(void *)(v7 - 8);
  uint64_t v9 = __chkstk_darwin(v7);
  uint64_t v11 = (char *)&v41 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9);
  uint64_t v13 = (char *)&v41 - v12;
  static os_log_type_t.default.getter();
  if (qword_101637260 != -1) {
    swift_once();
  }
  uint64_t v44 = qword_10170EFB8;
  sub_10000588C((uint64_t *)&unk_10163AD00);
  uint64_t v14 = swift_allocObject();
  *(_OWORD *)(v14 + 16) = xmmword_101342130;
  uint64_t v15 = UUID.uuidString.getter();
  uint64_t v42 = a1;
  uint64_t v17 = v16;
  *(void *)(v14 + 56) = &type metadata for String;
  *(void *)(v14 + 64) = sub_10000B4CC();
  *(void *)(v14 + 32) = v15;
  *(void *)(v14 + 40) = v17;
  os_log(_:dso:log:_:_:)();
  swift_bridgeObjectRelease();
  static SystemInfo.lockState.getter();
  (*(void (**)(char *, void, uint64_t))(v8 + 104))(v11, enum case for SystemInfo.DeviceLockState.beforeFirstUnlock(_:), v7);
  sub_100B22DA4((unint64_t *)&qword_1016429C8, (void (*)(uint64_t))&type metadata accessor for SystemInfo.DeviceLockState);
  LOBYTE(v15) = dispatch thunk of static Equatable.== infix(_:_:)();
  uint64_t v18 = *(void (**)(char *, uint64_t))(v8 + 8);
  v18(v11, v7);
  v18(v13, v7);
  if ((v15 & 1) == 0)
  {
    uint64_t v22 = sub_100AD0D68();
    __chkstk_darwin(v22);
    uint64_t v23 = v42;
    *(&v41 - 2) = v42;
    uint64_t v25 = sub_1000A427C((uint64_t (*)(char *))sub_100B5D2D0, &v41 - 4, v24);
    int64_t v26 = *(void *)(v25 + 16);
    if (v26)
    {
      uint64_t v48 = _swiftEmptyArrayStorage;
      sub_1000B7034(0, v26, 0);
      uint64_t v27 = *(unsigned __int8 *)(v41 + 80);
      uint64_t v44 = v25;
      uint64_t v28 = v25 + ((v27 + 32) & ~v27);
      uint64_t v29 = *(void *)(v41 + 72);
      uint64_t v31 = v46;
      uint64_t v30 = v47;
      do
      {
        sub_100B30D0C(v28, (uint64_t)v4, type metadata accessor for SharedBeaconRecord);
        (*(void (**)(char *, char *, uint64_t))(v5 + 16))(v31, &v4[*(int *)(v45 + 20)], v30);
        sub_100B310AC((uint64_t)v4, type metadata accessor for SharedBeaconRecord);
        uint64_t v32 = v48;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        {
          sub_1000B7034(0, v32[2] + 1, 1);
          uint64_t v32 = v48;
        }
        unint64_t v34 = v32[2];
        unint64_t v33 = v32[3];
        if (v34 >= v33 >> 1)
        {
          sub_1000B7034(v33 > 1, v34 + 1, 1);
          uint64_t v32 = v48;
        }
        v32[2] = v34 + 1;
        unint64_t v35 = (unint64_t)v32
            + ((*(unsigned __int8 *)(v5 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80))
            + *(void *)(v5 + 72) * v34;
        uint64_t v31 = v46;
        uint64_t v30 = v47;
        (*(void (**)(unint64_t, char *, uint64_t))(v5 + 32))(v35, v46, v47);
        uint64_t v48 = v32;
        v28 += v29;
        --v26;
      }
      while (v26);
      swift_bridgeObjectRelease();
      uint64_t v36 = v42;
      uint64_t v37 = v43;
      if (v32[2]) {
        goto LABEL_13;
      }
    }
    else
    {
      uint64_t v36 = v23;
      swift_bridgeObjectRelease();
      uint64_t v32 = _swiftEmptyArrayStorage;
      uint64_t v30 = v47;
      uint64_t v37 = v43;
      if (_swiftEmptyArrayStorage[2])
      {
LABEL_13:
        (*(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 16))(v37, v36, v30);
        uint64_t v38 = sub_101158244((uint64_t)v32);
        swift_bridgeObjectRelease();
        uint64_t v39 = type metadata accessor for SharedBeaconGroup();
        *(void *)(v37 + *(int *)(v39 + 20)) = v38;
        return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v39 - 8) + 56))(v37, 0, 1, v39);
      }
    }
    swift_bridgeObjectRelease();
    uint64_t v19 = type metadata accessor for SharedBeaconGroup();
    uint64_t v20 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v19 - 8) + 56);
    uint64_t v21 = v37;
    return v20(v21, 1, 1, v19);
  }
  static os_log_type_t.default.getter();
  os_log(_:dso:log:_:_:)();
  uint64_t v19 = type metadata accessor for SharedBeaconGroup();
  uint64_t v20 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v19 - 8) + 56);
  uint64_t v21 = v43;
  return v20(v21, 1, 1, v19);
}

uint64_t sub_100AE8D48(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for UUID();
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v29 = (char *)&v29 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = sub_10000588C((uint64_t *)&unk_10166EAF0);
  uint64_t v8 = v7 - 8;
  __chkstk_darwin(v7);
  uint64_t v10 = (char *)&v29 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = sub_10000588C(&qword_101638CF0);
  uint64_t v12 = __chkstk_darwin(v11 - 8);
  uint64_t v30 = (uint64_t)&v29 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = __chkstk_darwin(v12);
  uint64_t v16 = (char *)&v29 - v15;
  __chkstk_darwin(v14);
  uint64_t v18 = (char *)&v29 - v17;
  uint64_t v19 = type metadata accessor for SharedBeaconRecord(0);
  sub_10001D074(a1 + *(int *)(v19 + 76), (uint64_t)v18, &qword_101638CF0);
  (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))(v16, a2, v4);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v5 + 56))(v16, 0, 1, v4);
  uint64_t v20 = (uint64_t)&v10[*(int *)(v8 + 56)];
  sub_10001D074((uint64_t)v18, (uint64_t)v10, &qword_101638CF0);
  sub_10001D074((uint64_t)v16, v20, &qword_101638CF0);
  uint64_t v21 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v5 + 48);
  if (v21((uint64_t)v10, 1, v4) == 1)
  {
    sub_10001DAB4((uint64_t)v16, &qword_101638CF0);
    sub_10001DAB4((uint64_t)v18, &qword_101638CF0);
    int v22 = v21(v20, 1, v4);
    if (v22 == 1) {
      uint64_t v23 = &qword_101638CF0;
    }
    else {
      uint64_t v23 = (uint64_t *)&unk_10166EAF0;
    }
    if (v22 == 1) {
      char v24 = -1;
    }
    else {
      char v24 = 0;
    }
  }
  else
  {
    uint64_t v25 = v30;
    sub_10001D074((uint64_t)v10, v30, &qword_101638CF0);
    if (v21(v20, 1, v4) == 1)
    {
      sub_10001DAB4((uint64_t)v16, &qword_101638CF0);
      sub_10001DAB4((uint64_t)v18, &qword_101638CF0);
      (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v25, v4);
      char v24 = 0;
      uint64_t v23 = (uint64_t *)&unk_10166EAF0;
    }
    else
    {
      int64_t v26 = v29;
      (*(void (**)(char *, uint64_t, uint64_t))(v5 + 32))(v29, v20, v4);
      sub_100B22DA4((unint64_t *)&qword_10163B8F0, (void (*)(uint64_t))&type metadata accessor for UUID);
      char v24 = dispatch thunk of static Equatable.== infix(_:_:)();
      uint64_t v27 = *(void (**)(char *, uint64_t))(v5 + 8);
      v27(v26, v4);
      uint64_t v23 = &qword_101638CF0;
      sub_10001DAB4((uint64_t)v16, &qword_101638CF0);
      sub_10001DAB4((uint64_t)v18, &qword_101638CF0);
      v27((char *)v25, v4);
    }
  }
  sub_10001DAB4((uint64_t)v10, v23);
  return v24 & 1;
}

uint64_t sub_100AE9138@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v5 = sub_10000588C(&qword_10163CBA8);
  __chkstk_darwin(v5);
  uint64_t v7 = &v15[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v8._object = (void *)0x80000001014034F0;
  v8._uint64_t countAndFlagsBits = 0xD000000000000015;
  prohibitAsyncContext(functionName:)(v8);
  uint64_t v16 = v2;
  uint64_t v17 = a1;
  OS_dispatch_queue.sync<A>(execute:)();
  uint64_t v9 = sub_10000588C(&qword_10163CBB0);
  if ((*(unsigned int (**)(unsigned char *, uint64_t, uint64_t))(*(void *)(v9 - 8) + 48))(v7, 1, v9) == 1)
  {
    sub_10001DAB4((uint64_t)v7, &qword_10163CBA8);
    uint64_t v10 = sub_10000588C(&qword_1016511B0);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 56))(a2, 1, 1, v10);
  }
  else
  {
    char v12 = v7[*(int *)(v9 + 48)];
    uint64_t v13 = sub_10000588C(&qword_1016511B0);
    uint64_t v14 = *(int *)(v13 + 48);
    sub_100B30DB4((uint64_t)v7, a2, type metadata accessor for BeaconStatus);
    *(unsigned char *)(a2 + v14) = v12;
    return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v13 - 8) + 56))(a2, 0, 1, v13);
  }
}

uint64_t sub_100AE9324@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  swift_beginAccess();
  uint64_t v6 = *(void *)(a1 + 296);
  if (*(void *)(v6 + 16))
  {
    swift_bridgeObjectRetain();
    unint64_t v7 = sub_1007240CC(a2);
    if (v8)
    {
      unint64_t v9 = v7;
      uint64_t v10 = *(void *)(v6 + 56);
      uint64_t v11 = sub_10000588C(&qword_10163CBB0);
      uint64_t v12 = *(void *)(v11 - 8);
      sub_10001D074(v10 + *(void *)(v12 + 72) * v9, a3, &qword_10163CBB0);
      (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v12 + 56))(a3, 0, 1, v11);
    }
    else
    {
      uint64_t v15 = sub_10000588C(&qword_10163CBB0);
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v15 - 8) + 56))(a3, 1, 1, v15);
    }
    return swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v13 = sub_10000588C(&qword_10163CBB0);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v13 - 8) + 56))(a3, 1, 1, v13);
  }
}

uint64_t sub_100AE94D0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  swift_beginAccess();
  uint64_t v6 = *(void *)(a1 + 304);
  if (*(void *)(v6 + 16))
  {
    swift_bridgeObjectRetain();
    unint64_t v7 = sub_1007240CC(a2);
    if (v8)
    {
      unint64_t v9 = v7;
      uint64_t v10 = *(void *)(v6 + 56);
      uint64_t v11 = sub_10000588C((uint64_t *)&unk_10164E870);
      uint64_t v12 = *(void *)(v11 - 8);
      sub_10001D074(v10 + *(void *)(v12 + 72) * v9, a3, (uint64_t *)&unk_10164E870);
      (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v12 + 56))(a3, 0, 1, v11);
    }
    else
    {
      uint64_t v15 = sub_10000588C((uint64_t *)&unk_10164E870);
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v15 - 8) + 56))(a3, 1, 1, v15);
    }
    return swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v13 = sub_10000588C((uint64_t *)&unk_10164E870);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v13 - 8) + 56))(a3, 1, 1, v13);
  }
}

uint64_t sub_100AE967C(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2;
  uint64_t v23 = a2;
  uint64_t v24 = a1;
  uint64_t v27 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v30 = *(void *)(v27 - 8);
  __chkstk_darwin(v27);
  uint64_t v25 = (char *)&v22 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = type metadata accessor for DispatchQoS();
  uint64_t v28 = *(void *)(v5 - 8);
  uint64_t v29 = v5;
  __chkstk_darwin(v5);
  unint64_t v7 = (char *)&v22 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = sub_10000588C((uint64_t *)&unk_10164E870);
  uint64_t v9 = *(void *)(v8 - 8);
  uint64_t v10 = *(void *)(v9 + 64);
  __chkstk_darwin(v8 - 8);
  uint64_t v11 = (char *)&v22 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = type metadata accessor for UUID();
  uint64_t v13 = *(void *)(v12 - 8);
  uint64_t v14 = *(void *)(v13 + 64);
  __chkstk_darwin(v12);
  uint64_t v26 = *(void *)(v2 + 288);
  (*(void (**)(char *, uint64_t, uint64_t))(v13 + 16))((char *)&v22 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0), v23, v12);
  sub_10001D074(v24, (uint64_t)v11, (uint64_t *)&unk_10164E870);
  unint64_t v15 = (*(unsigned __int8 *)(v13 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v13 + 80);
  unint64_t v16 = (v14 + *(unsigned __int8 *)(v9 + 80) + v15) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80);
  uint64_t v17 = swift_allocObject();
  *(void *)(v17 + 16) = v3;
  (*(void (**)(unint64_t, char *, uint64_t))(v13 + 32))(v17 + v15, (char *)&v22 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0), v12);
  sub_10001D608((uint64_t)v11, v17 + v16, (uint64_t *)&unk_10164E870);
  aBlock[4] = sub_100B5D150;
  void aBlock[5] = v17;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_1004B5480;
  aBlock[3] = &unk_1015E8F88;
  uint64_t v18 = _Block_copy(aBlock);
  swift_retain();
  static DispatchQoS.unspecified.getter();
  uint64_t v31 = _swiftEmptyArrayStorage;
  sub_100B22DA4((unint64_t *)&qword_10163B7E0, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
  sub_10000588C((uint64_t *)&unk_10163F350);
  sub_100062734((unint64_t *)&qword_10163B7F0, (uint64_t *)&unk_10163F350);
  uint64_t v19 = v25;
  uint64_t v20 = v27;
  dispatch thunk of SetAlgebra.init<A>(_:)();
  OS_dispatch_queue.async(group:qos:flags:execute:)();
  _Block_release(v18);
  (*(void (**)(char *, uint64_t))(v30 + 8))(v19, v20);
  (*(void (**)(char *, uint64_t))(v28 + 8))(v7, v29);
  return swift_release();
}

uint64_t sub_100AE9AC0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v54 = a3;
  uint64_t v56 = a2;
  uint64_t v4 = type metadata accessor for DeviceEvent(0);
  uint64_t v5 = __chkstk_darwin(v4 - 8);
  uint64_t v50 = (char *)&v48 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5);
  uint64_t v8 = (char *)&v48 - v7;
  uint64_t v55 = type metadata accessor for UUID();
  uint64_t v9 = *(void *)(v55 - 8);
  uint64_t v10 = *(void *)(v9 + 64);
  __chkstk_darwin(v55);
  uint64_t v11 = (char *)&v48 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = sub_10000588C(&qword_10163CBA0);
  uint64_t v13 = __chkstk_darwin(v12 - 8);
  unint64_t v15 = (char *)&v48 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = __chkstk_darwin(v13);
  uint64_t v18 = (char *)&v48 - v17;
  __chkstk_darwin(v16);
  uint64_t v20 = (char *)&v48 - v19;
  swift_beginAccess();
  uint64_t v21 = *(void *)(a1 + 304);
  uint64_t v22 = *(void *)(v21 + 16);
  uint64_t v51 = v10;
  uint64_t v52 = a1;
  uint64_t v53 = v9;
  uint64_t v48 = v8;
  if (v22)
  {
    swift_bridgeObjectRetain();
    unint64_t v23 = sub_1007240CC(v56);
    if (v24)
    {
      unint64_t v25 = v23;
      uint64_t v26 = *(void *)(v21 + 56);
      uint64_t v27 = sub_10000588C((uint64_t *)&unk_10164E870);
      uint64_t v28 = *(void *)(v27 - 8);
      sub_10001D074(v26 + *(void *)(v28 + 72) * v25, (uint64_t)v20, (uint64_t *)&unk_10164E870);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v28 + 56))(v20, 0, 1, v27);
      uint64_t v9 = v53;
    }
    else
    {
      uint64_t v30 = sub_10000588C((uint64_t *)&unk_10164E870);
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v30 - 8) + 56))(v20, 1, 1, v30);
    }
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v29 = sub_10000588C((uint64_t *)&unk_10164E870);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v29 - 8) + 56))(v20, 1, 1, v29);
  }
  uint64_t v49 = *(void (**)(char *, uint64_t, uint64_t))(v9 + 16);
  v49(v11, v56, v55);
  sub_10001D074(v54, (uint64_t)v18, (uint64_t *)&unk_10164E870);
  uint64_t v31 = sub_10000588C((uint64_t *)&unk_10164E870);
  uint64_t v32 = *(void *)(v31 - 8);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v32 + 56))(v18, 0, 1, v31);
  swift_beginAccess();
  sub_10015F85C((uint64_t)v18, (uint64_t)v11);
  swift_endAccess();
  unint64_t v33 = &qword_10163CBA0;
  unint64_t v34 = v20;
  sub_10001D074((uint64_t)v20, (uint64_t)v15, &qword_10163CBA0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v32 + 48))(v15, 1, v31) == 1)
  {
    char v35 = 0;
    uint64_t v36 = (uint64_t)v20;
    uint64_t v37 = (uint64_t)v50;
  }
  else
  {
    uint64_t v38 = (uint64_t)v48;
    char v39 = sub_100AA4198((uint64_t)v48);
    uint64_t v37 = (uint64_t)v50;
    char v35 = v39;
    sub_100B310AC(v38, type metadata accessor for DeviceEvent);
    unint64_t v33 = (uint64_t *)&unk_10164E870;
    uint64_t v36 = (uint64_t)v34;
  }
  sub_10001DAB4((uint64_t)v15, v33);
  char v40 = sub_100AA4198(v37);
  sub_100B310AC(v37, type metadata accessor for DeviceEvent);
  uint64_t v41 = v49;
  uint64_t v42 = (v35 ^ v40);
  swift_retain();
  AnyCurrentValuePublisher.value.getter();
  swift_release();
  if (v57 == 1 && (v42 & 1) != 0) {
    sub_100A9E7EC(24);
  }
  type metadata accessor for Transaction();
  uint64_t v43 = v55;
  v41(v11, v56, v55);
  uint64_t v44 = v53;
  unint64_t v45 = (*(unsigned __int8 *)(v53 + 80) + 17) & ~(unint64_t)*(unsigned __int8 *)(v53 + 80);
  uint64_t v46 = swift_allocObject();
  *(unsigned char *)(v46 + 16) = v42 & 1;
  (*(void (**)(unint64_t, char *, uint64_t))(v44 + 32))(v46 + v45, v11, v43);
  static Transaction.asyncTask(name:block:)();
  swift_release();
  return sub_10001DAB4(v36, &qword_10163CBA0);
}

uint64_t sub_100AEA0A8(char a1, uint64_t a2)
{
  *(void *)(v2 + 120) = a2;
  *(unsigned char *)(v2 + 160) = a1;
  return _swift_task_switch(sub_100AEA0CC, 0, 0);
}

uint64_t sub_100AEA0CC()
{
  if (*(unsigned char *)(v0 + 160) == 1)
  {
    if (qword_1016375E8 != -1) {
      swift_once();
    }
    swift_beginAccess();
    uint64_t result = sub_10001D074((uint64_t)&xmmword_10166E8F0, v0 + 56, (uint64_t *)&unk_101638D30);
    if (*(void *)(v0 + 80))
    {
      sub_10001CEB0((long long *)(v0 + 56), v0 + 16);
      sub_10001CD44((void *)(v0 + 16), *(void *)(v0 + 40));
      uint64_t v4 = (uint64_t (__cdecl *)())((char *)&dword_1016391E0 + dword_1016391E0);
      uint64_t v2 = (void *)swift_task_alloc();
      *(void *)(v0 + 128) = v2;
      *uint64_t v2 = v0;
      v2[1] = sub_100AEA248;
      return v4();
    }
    else
    {
      __break(1u);
    }
  }
  else
  {
    uint64_t v3 = *(uint64_t (**)(void))(v0 + 8);
    return v3();
  }
  return result;
}

uint64_t sub_100AEA248(uint64_t a1)
{
  *(void *)(*(void *)v1 + 136) = a1;
  swift_task_dealloc();
  return _swift_task_switch(sub_100AEA348, 0, 0);
}

uint64_t sub_100AEA348()
{
  uint64_t v1 = (uint64_t)(v0 + 2);
  if (v0[17])
  {
    uint64_t v2 = v0[15];
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v1);
    sub_10000588C(&qword_10163BC50);
    uint64_t v3 = type metadata accessor for UUID();
    uint64_t v4 = *(void *)(v3 - 8);
    unint64_t v5 = (*(unsigned __int8 *)(v4 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
    uint64_t v6 = swift_allocObject();
    *(_OWORD *)(v6 + 16) = xmmword_101342130;
    (*(void (**)(unint64_t, uint64_t, uint64_t))(v4 + 16))(v6 + v5, v2, v3);
    uint64_t v7 = sub_100DF29F8(v6);
    v0[18] = v7;
    swift_setDeallocating();
    swift_arrayDestroy();
    swift_deallocClassInstance();
    uint64_t v8 = (void *)swift_task_alloc();
    v0[19] = v8;
    *uint64_t v8 = v0;
    v8[1] = sub_100AEA51C;
    return sub_1009A0330((uint64_t)v7);
  }
  else
  {
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v1);
    uint64_t v10 = (uint64_t (*)(void))v0[1];
    return v10();
  }
}

uint64_t sub_100AEA51C()
{
  swift_task_dealloc();
  swift_bridgeObjectRelease();
  return _swift_task_switch(sub_100474748, 0, 0);
}

uint64_t sub_100AEA634(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6, int a7)
{
  uint64_t v47 = a2;
  int v40 = a6;
  int v41 = a7;
  uint64_t v35 = a3;
  uint64_t v36 = a5;
  uint64_t v34 = a4;
  uint64_t v39 = a1;
  uint64_t v43 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v46 = *(void *)(v43 - 8);
  __chkstk_darwin(v43);
  uint64_t v42 = (char *)&v29 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for DispatchQoS();
  uint64_t v44 = *(void *)(v8 - 8);
  uint64_t v45 = v8;
  __chkstk_darwin(v8);
  uint64_t v38 = (char *)&v29 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = type metadata accessor for BeaconStatus(0);
  uint64_t v33 = *(void *)(v10 - 8);
  uint64_t v11 = *(void *)(v33 + 64);
  __chkstk_darwin(v10 - 8);
  uint64_t v31 = (uint64_t)&v29 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = type metadata accessor for Date();
  uint64_t v30 = v12;
  uint64_t v13 = *(void *)(v12 - 8);
  uint64_t v14 = *(void *)(v13 + 64);
  __chkstk_darwin(v12);
  uint64_t v32 = (char *)&v29 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v29 = type metadata accessor for UUID();
  uint64_t v15 = *(void *)(v29 - 8);
  uint64_t v16 = *(void *)(v15 + 64);
  __chkstk_darwin(v29);
  uint64_t v17 = (char *)&v29 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v37 = *(void *)(v47 + 288);
  (*(void (**)(char *, uint64_t))(v15 + 16))(v17, v35);
  (*(void (**)(char *, uint64_t, uint64_t))(v13 + 16))((char *)&v29 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0), v34, v12);
  sub_100B30D0C(v36, (uint64_t)&v29 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0), type metadata accessor for BeaconStatus);
  unint64_t v18 = (*(unsigned __int8 *)(v15 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v15 + 80);
  unint64_t v19 = (v16 + *(unsigned __int8 *)(v13 + 80) + v18) & ~(unint64_t)*(unsigned __int8 *)(v13 + 80);
  unint64_t v20 = (v14 + *(unsigned __int8 *)(v33 + 80) + v19) & ~(unint64_t)*(unsigned __int8 *)(v33 + 80);
  uint64_t v21 = v20 + v11;
  uint64_t v22 = swift_allocObject();
  *(void *)(v22 + 16) = v47;
  (*(void (**)(unint64_t, char *, uint64_t))(v15 + 32))(v22 + v18, v17, v29);
  (*(void (**)(unint64_t, char *, uint64_t))(v13 + 32))(v22 + v19, v32, v30);
  sub_100B30DB4(v31, v22 + v20, type metadata accessor for BeaconStatus);
  unint64_t v23 = (unsigned char *)(v22 + v21);
  *unint64_t v23 = v40;
  v23[1] = v41;
  *(void *)(v22 + ((v21 + 9) & 0xFFFFFFFFFFFFFFF8)) = v39;
  aBlock[4] = sub_100B5F41C;
  void aBlock[5] = v22;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_1004B5480;
  aBlock[3] = &unk_1015E9410;
  char v24 = _Block_copy(aBlock);
  swift_retain();
  swift_retain();
  unint64_t v25 = v38;
  static DispatchQoS.unspecified.getter();
  void aBlock[8] = _swiftEmptyArrayStorage;
  sub_100B22DA4((unint64_t *)&qword_10163B7E0, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
  sub_10000588C((uint64_t *)&unk_10163F350);
  sub_100062734((unint64_t *)&qword_10163B7F0, (uint64_t *)&unk_10163F350);
  uint64_t v26 = v42;
  uint64_t v27 = v43;
  dispatch thunk of SetAlgebra.init<A>(_:)();
  OS_dispatch_queue.async(group:qos:flags:execute:)();
  _Block_release(v24);
  (*(void (**)(char *, uint64_t))(v46 + 8))(v26, v27);
  (*(void (**)(char *, uint64_t))(v44 + 8))(v25, v45);
  return swift_release();
}

uint64_t sub_100AEABD4(uint64_t a1, uint64_t a2, NSObject *a3, uint64_t a4, int a5, unsigned int a6, void *a7)
{
  unsigned int v152 = a6;
  int v158 = a5;
  uint64_t v174 = a4;
  os_log_t v171 = a3;
  uint64_t v9 = *a7;
  os_log_type_t v151 = a7;
  uint64_t v150 = v9;
  uint64_t v10 = sub_10000588C((uint64_t *)&unk_101653D50);
  __chkstk_darwin(v10 - 8);
  uint64_t v154 = (char *)&v141 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = type metadata accessor for SharedBeaconRecord(0);
  uint64_t v153 = *(void *)(v12 - 8);
  uint64_t v13 = __chkstk_darwin(v12);
  uint64_t v15 = (char *)&v141 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v13);
  uint64_t v145 = (uint64_t)&v141 - v16;
  uint64_t v17 = sub_10000588C(&qword_1016511E0);
  __chkstk_darwin(v17 - 8);
  uint64_t v163 = (uint64_t)&v141 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v19 = type metadata accessor for BeaconStatus(0);
  uint64_t v20 = *(void *)(v19 - 8);
  uint64_t v21 = __chkstk_darwin(v19);
  uint64_t v149 = (char *)&v141 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v23 = __chkstk_darwin(v21);
  uint64_t v143 = (uint64_t)&v141 - v24;
  uint64_t v25 = __chkstk_darwin(v23);
  uint64_t v165 = (uint64_t)&v141 - v26;
  uint64_t v148 = v27;
  __chkstk_darwin(v25);
  uint64_t v162 = (uint64_t)&v141 - v28;
  uint64_t v160 = type metadata accessor for UUID();
  uint64_t v167 = *(void *)(v160 - 8);
  uint64_t v29 = __chkstk_darwin(v160);
  uint64_t v159 = (char *)&v141 - ((v30 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v29);
  uint64_t v157 = (char *)&v141 - v31;
  uint64_t v32 = sub_10000588C((uint64_t *)&unk_10163AC90);
  __chkstk_darwin(v32 - 8);
  uint64_t v166 = (unsigned int (**)(char *, uint64_t, uint64_t))((char *)&v141 - ((v33 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v175 = type metadata accessor for Date();
  uint64_t v34 = *(void *)(v175 - 8);
  uint64_t v35 = __chkstk_darwin(v175);
  uint64_t v161 = (char *)&v141 - ((v36 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v35);
  uint64_t v173 = (char *)&v141 - v37;
  uint64_t v38 = sub_10000588C(&qword_10163CBA8);
  uint64_t v39 = __chkstk_darwin(v38 - 8);
  uint64_t v156 = (uint64_t)&v141 - ((v40 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v39);
  uint64_t v42 = (char *)&v141 - v41;
  uint64_t v43 = sub_10000588C(&qword_10163BBA0);
  uint64_t v44 = __chkstk_darwin(v43 - 8);
  uint64_t v144 = (uint64_t)&v141 - ((v45 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v46 = __chkstk_darwin(v44);
  uint64_t v48 = (char *)&v141 - v47;
  __chkstk_darwin(v46);
  uint64_t v176 = (long long *)((char *)&v141 - v49);
  uint64_t v155 = a1 + 296;
  swift_beginAccess();
  uint64_t v50 = *(void *)(a1 + 296);
  uint64_t v51 = *(void *)(v50 + 16);
  uint64_t v169 = v34;
  uint64_t v168 = a1;
  uint64_t v170 = v19;
  uint64_t v164 = v12;
  unint64_t v146 = v15;
  uint64_t v172 = a2;
  if (v51)
  {
    swift_bridgeObjectRetain();
    unint64_t v52 = sub_1007240CC(a2);
    if (v53)
    {
      unint64_t v54 = v52;
      uint64_t v55 = *(void *)(v50 + 56);
      uint64_t v56 = sub_10000588C(&qword_10163CBB0);
      uint64_t v57 = *(void *)(v56 - 8);
      uint64_t v58 = v174;
      uint64_t v34 = v169;
      sub_10001D074(v55 + *(void *)(v57 + 72) * v54, (uint64_t)v42, &qword_10163CBB0);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v57 + 56))(v42, 0, 1, v56);
      uint64_t v19 = v170;
      swift_bridgeObjectRelease();
      goto LABEL_7;
    }
    uint64_t v60 = sub_10000588C(&qword_10163CBB0);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v60 - 8) + 56))(v42, 1, 1, v60);
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v59 = sub_10000588C(&qword_10163CBB0);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v59 - 8) + 56))(v42, 1, 1, v59);
  }
  uint64_t v58 = v174;
LABEL_7:
  uint64_t v61 = (uint64_t)v166;
  uint64_t v62 = sub_10000588C(&qword_10163CBB0);
  uint64_t v166 = *(unsigned int (***)(char *, uint64_t, uint64_t))(v62 - 8);
  uint64_t v63 = 1;
  if (!v166[6](v42, 1, v62))
  {
    sub_100B30D0C((uint64_t)v42, (uint64_t)v176, type metadata accessor for BeaconStatus);
    uint64_t v63 = 0;
  }
  sub_10001DAB4((uint64_t)v42, &qword_10163CBA8);
  uint64_t v64 = (uint64_t)v176;
  (*(void (**)(long long *, uint64_t, uint64_t, uint64_t))(v20 + 56))(v176, v63, 1, v19);
  sub_10001D074(v64, (uint64_t)v48, &qword_10163BBA0);
  uint64_t v147 = v20;
  uint64_t v67 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v20 + 48);
  uint64_t v65 = v20 + 48;
  uint64_t v66 = v67;
  if (v67((uint64_t)v48, 1, v19) == 1)
  {
    sub_10001DAB4((uint64_t)v48, &qword_10163BBA0);
    uint64_t v68 = v175;
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v34 + 56))(v61, 1, 1, v175);
    uint64_t v70 = v172;
    uint64_t v69 = v173;
LABEL_12:
    static Date.distantPast.getter();
    sub_10001DAB4(v61, (uint64_t *)&unk_10163AC90);
    goto LABEL_14;
  }
  uint64_t v71 = &v48[*(int *)(v19 + 24)];
  uint64_t v72 = v175;
  (*(void (**)(uint64_t, char *, uint64_t))(v34 + 16))(v61, v71, v175);
  uint64_t v73 = (uint64_t)v48;
  uint64_t v68 = v72;
  sub_100B310AC(v73, type metadata accessor for BeaconStatus);
  (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v34 + 56))(v61, 0, 1, v72);
  int v74 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v34 + 48))(v61, 1, v72);
  uint64_t v70 = v172;
  uint64_t v69 = v173;
  if (v74 == 1) {
    goto LABEL_12;
  }
  (*(void (**)(char *, uint64_t, uint64_t))(v34 + 32))(v173, v61, v68);
LABEL_14:
  if (static Date.> infix(_:_:)())
  {
    uint64_t v141 = v65;
    uint64_t v142 = v66;
    uint64_t v75 = *(void (**)(char *, uint64_t, uint64_t))(v167 + 16);
    uint64_t v76 = (uint64_t)v157;
    uint64_t v77 = v160;
    v75(v157, v70, v160);
    uint64_t v78 = *(int *)(v62 + 48);
    uint64_t v79 = v156;
    sub_100B30D0C(v58, v156, type metadata accessor for BeaconStatus);
    *(unsigned char *)(v79 + v78) = v158;
    ((void (*)(uint64_t, void, uint64_t, uint64_t))v166[7])(v79, 0, 1, v62);
    swift_beginAccess();
    sub_10015FAD4(v79, v76);
    swift_endAccess();
    swift_retain();
    AnyCurrentValuePublisher.value.getter();
    swift_release();
    LODWORD(v166) = v179;
    if (qword_101636F50 != -1) {
      swift_once();
    }
    uint64_t v80 = type metadata accessor for Logger();
    sub_100010324(v80, (uint64_t)qword_10170E9E8);
    int v81 = v159;
    v75(v159, v70, v77);
    uint64_t v82 = v169;
    int64_t v83 = v161;
    uint64_t v84 = v175;
    (*(void (**)(char *, os_log_t, uint64_t))(v169 + 16))(v161, v171, v175);
    uint64_t v85 = v162;
    sub_100B30D0C(v58, v162, type metadata accessor for BeaconStatus);
    uint64_t v86 = v165;
    sub_100B30D0C(v58, v165, type metadata accessor for BeaconStatus);
    uint64_t v87 = Logger.logObject.getter();
    int v88 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v87, (os_log_type_t)v88))
    {
      int v158 = v88;
      os_log_t v171 = v87;
      uint64_t v89 = swift_slowAlloc();
      uint64_t v157 = (char *)swift_slowAlloc();
      uint64_t v179 = v157;
      *(_DWORD *)uint64_t v89 = 141559555;
      *(void *)&long long v177 = 1752392040;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v89 + 12) = 2081;
      sub_100B22DA4((unint64_t *)&qword_101638B10, (void (*)(uint64_t))&type metadata accessor for UUID);
      uint64_t v90 = dispatch thunk of CustomStringConvertible.description.getter();
      *(void *)&long long v177 = sub_1008FA0F0(v90, v91, (uint64_t *)&v179);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      (*(void (**)(char *, uint64_t))(v167 + 8))(v81, v77);
      *(_WORD *)(v89 + 22) = 2082;
      uint64_t v92 = sub_1000D0310(v152);
      *(void *)&long long v177 = sub_1008FA0F0(v92, v93, (uint64_t *)&v179);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      *(_WORD *)(v89 + 32) = 2082;
      sub_100B22DA4((unint64_t *)&qword_101638DA0, (void (*)(uint64_t))&type metadata accessor for Date);
      uint64_t v94 = dispatch thunk of CustomStringConvertible.description.getter();
      *(void *)&long long v177 = sub_1008FA0F0(v94, v95, (uint64_t *)&v179);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      char v96 = *(void (**)(char *, uint64_t))(v82 + 8);
      v96(v83, v84);
      *(_WORD *)(v89 + 42) = 2082;
      uint64_t v97 = *(unsigned __int8 *)(v85 + *(int *)(v170 + 28));
      if (v97 == 3)
      {
        unint64_t v98 = 0xE400000000000000;
        uint64_t v99 = 1701736302;
        uint64_t v101 = v172;
        uint64_t v100 = v173;
        uint64_t v102 = v164;
      }
      else
      {
        uint64_t v101 = v172;
        uint64_t v100 = v173;
        uint64_t v102 = v164;
        if (*(unsigned char *)(v85 + *(int *)(v170 + 28)))
        {
          if (v97 == 1)
          {
            unint64_t v98 = 0xEA00000000007972;
            uint64_t v99 = 0x61646E6F6365732ELL;
          }
          else
          {
            unint64_t v98 = 0x80000001013F28C0;
            uint64_t v99 = 0xD000000000000010;
          }
        }
        else
        {
          unint64_t v98 = 0xE800000000000000;
          uint64_t v99 = 0x7972616D6972702ELL;
        }
      }
      *(void *)&long long v177 = sub_1008FA0F0(v99, v98, (uint64_t *)&v179);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      sub_100B310AC(v85, type metadata accessor for BeaconStatus);
      *(_WORD *)(v89 + 52) = 2048;
      uint64_t v106 = (unsigned __int8 *)(v165 + *(int *)(v170 + 28));
      uint64_t v107 = *v106;
      uint64_t v108 = *((void *)v106 + 1);
      if (v107 == 3) {
        uint64_t v109 = 0;
      }
      else {
        uint64_t v109 = v108;
      }
      sub_100B310AC(v165, type metadata accessor for BeaconStatus);
      *(void *)&long long v177 = v109;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v89 + 62) = 1024;
      LODWORD(v177) = v166;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      os_log_t v110 = v171;
      _os_log_impl((void *)&_mh_execute_header, v171, (os_log_type_t)v158, "Latest type18 for %{private,mask.hash}s: %{public}s,scanDate: %{public}s,sequence: %{public}s,index: %llu, appActive: %{BOOL}d.", (uint8_t *)v89, 0x44u);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      uint64_t v84 = v175;
      int v105 = v100;
    }
    else
    {
      sub_100B310AC(v86, type metadata accessor for BeaconStatus);
      (*(void (**)(char *, uint64_t))(v167 + 8))(v81, v77);
      char v96 = *(void (**)(char *, uint64_t))(v82 + 8);
      v96(v83, v84);
      sub_100B310AC(v85, type metadata accessor for BeaconStatus);

      uint64_t v101 = v172;
      int v105 = v173;
      uint64_t v102 = v164;
    }
    uint64_t v111 = v163;
    sub_100AE381C(v101, v163);
    uint64_t v112 = type metadata accessor for WildModeAssociationRecord(0);
    int v113 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v112 - 8) + 48))(v111, 1, v112);
    sub_10001DAB4(v111, &qword_1016511E0);
    uint64_t v114 = v174;
    uint64_t v64 = (uint64_t)v176;
    if (v113 != 1) {
      sub_100AA5514();
    }
    sub_100ACCD98(v101, (uint64_t)&v177);
    uint64_t v115 = v170;
    if (!v178)
    {
      v96(v105, v84);
      sub_10001DAB4(v64, &qword_10163BBA0);
      uint64_t v103 = (uint64_t *)&unk_10163BBE0;
      unint64_t v104 = &v177;
      return sub_10001DAB4((uint64_t)v104, v103);
    }
    uint64_t v173 = (char *)v96;
    sub_10001CEB0(&v177, (uint64_t)&v179);
    sub_10001D010((uint64_t)&v179, (uint64_t)&v177);
    sub_10000588C((uint64_t *)&unk_10164DBF0);
    uint64_t v116 = (uint64_t)v154;
    char v117 = swift_dynamicCast();
    uint64_t v118 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v153 + 56);
    if (v117)
    {
      char v119 = v105;
      uint64_t v120 = v115;
      v118(v116, 0, 1, v102);
      uint64_t v121 = v116;
      uint64_t v122 = v145;
      sub_100B30DB4(v121, v145, type metadata accessor for SharedBeaconRecord);
      int v123 = *(unsigned __int8 *)(v122 + *(int *)(v102 + 64));
      uint64_t v124 = v122;
      uint64_t v125 = (uint64_t)v146;
      sub_100B30DB4(v124, (uint64_t)v146, type metadata accessor for SharedBeaconRecord);
      if (v123 == 4)
      {
        sub_100B310AC(v125, type metadata accessor for SharedBeaconRecord);
        int v105 = v119;
LABEL_47:
        _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)&v179);
        ((void (*)(char *, uint64_t))v173)(v105, v84);
        goto LABEL_21;
      }
      int v132 = *(unsigned __int8 *)(v125 + *(int *)(v102 + 64));
      sub_100B310AC(v125, type metadata accessor for SharedBeaconRecord);
      BOOL v133 = v132 == 1;
      uint64_t v115 = v120;
      int v105 = v119;
      if (v133) {
        goto LABEL_47;
      }
    }
    else
    {
      v118(v116, 1, 1, v102);
      sub_10001DAB4(v116, (uint64_t *)&unk_101653D50);
    }
    uint64_t v126 = v142;
    if (v142(v64, 1, v115) == 1)
    {
      uint64_t v127 = (uint64_t)v149;
      uint64_t v128 = v147;
      if ((v166 & 1) == 0) {
        goto LABEL_51;
      }
    }
    else
    {
      uint64_t v129 = v64;
      uint64_t v130 = v144;
      sub_10001D074(v129, v144, &qword_10163BBA0);
      if (v126(v130, 1, v115) == 1)
      {
        sub_10001DAB4(v130, &qword_10163BBA0);
        BOOL v131 = 0;
        uint64_t v127 = (uint64_t)v149;
        uint64_t v128 = v147;
LABEL_52:
        sub_10001D010((uint64_t)&v179, (uint64_t)&v177);
        sub_100B30D0C(v174, v127, type metadata accessor for BeaconStatus);
        unint64_t v138 = (*(unsigned __int8 *)(v128 + 80) + 64) & ~(unint64_t)*(unsigned __int8 *)(v128 + 80);
        uint64_t v139 = swift_allocObject();
        *(unsigned char *)(v139 + 16) = v131;
        sub_10001CEB0(&v177, v139 + 24);
        sub_100B30DB4(v127, v139 + v138, type metadata accessor for BeaconStatus);
        static Transaction.asyncTask(name:block:)();
        swift_release();
        Transaction.capture()();
        _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)&v179);
        ((void (*)(char *, uint64_t))v173)(v105, v175);
        uint64_t v103 = &qword_10163BBA0;
        unint64_t v104 = v176;
        return sub_10001DAB4((uint64_t)v104, v103);
      }
      uint64_t v134 = v143;
      sub_100B30DB4(v130, v143, type metadata accessor for BeaconStatus);
      uint64_t v135 = v115;
      int v136 = *(unsigned __int8 *)(v134 + *(int *)(v115 + 20));
      sub_100B310AC(v134, type metadata accessor for BeaconStatus);
      int v137 = *(unsigned __int8 *)(v114 + *(int *)(v135 + 20));
      BOOL v131 = v136 != v137;
      uint64_t v127 = (uint64_t)v149;
      uint64_t v128 = v147;
      if (v136 == v137 || !v166) {
        goto LABEL_52;
      }
    }
    sub_100A9E7EC(24);
LABEL_51:
    BOOL v131 = 1;
    goto LABEL_52;
  }
  (*(void (**)(char *, uint64_t))(v34 + 8))(v69, v68);
LABEL_21:
  uint64_t v103 = &qword_10163BBA0;
  unint64_t v104 = (long long *)v64;
  return sub_10001DAB4((uint64_t)v104, v103);
}

uint64_t sub_100AEC07C(char a1, uint64_t a2, uint64_t a3)
{
  *(void *)(v3 + 224) = a2;
  *(void *)(v3 + 232) = a3;
  *(unsigned char *)(v3 + 296) = a1;
  return _swift_task_switch(sub_100AEC0A0, 0, 0);
}

uint64_t sub_100AEC0A0()
{
  if (*(unsigned char *)(v0 + 296) != 1)
  {
    if (qword_1016375E8 != -1) {
      swift_once();
    }
    swift_beginAccess();
    uint64_t result = sub_10001D074((uint64_t)&xmmword_10166E8F0, v0 + 56, (uint64_t *)&unk_101638D30);
    if (*(void *)(v0 + 80))
    {
      sub_10001CEB0((long long *)(v0 + 56), v0 + 16);
      sub_10001CD44((void *)(v0 + 16), *(void *)(v0 + 40));
      uint64_t v4 = (uint64_t (__cdecl *)())((char *)&dword_101639358 + dword_101639358);
      uint64_t v2 = (void *)swift_task_alloc();
      *(void *)(v0 + 272) = v2;
      *uint64_t v2 = v0;
      uint64_t v3 = sub_100AEC904;
      goto LABEL_10;
    }
LABEL_14:
    __break(1u);
    return result;
  }
  if (qword_1016375E8 != -1) {
    swift_once();
  }
  swift_beginAccess();
  uint64_t result = sub_10001D074((uint64_t)&xmmword_10166E8F0, v0 + 136, (uint64_t *)&unk_101638D30);
  if (!*(void *)(v0 + 160))
  {
    __break(1u);
    goto LABEL_14;
  }
  sub_10001CEB0((long long *)(v0 + 136), v0 + 96);
  sub_10001CD44((void *)(v0 + 96), *(void *)(v0 + 120));
  uint64_t v4 = (uint64_t (__cdecl *)())((char *)&dword_1016391E0 + dword_1016391E0);
  uint64_t v2 = (void *)swift_task_alloc();
  *(void *)(v0 + 240) = v2;
  *uint64_t v2 = v0;
  uint64_t v3 = sub_100AEC2CC;
LABEL_10:
  v2[1] = v3;
  return v4();
}

uint64_t sub_100AEC2CC(uint64_t a1)
{
  *(void *)(*(void *)v1 + 248) = a1;
  swift_task_dealloc();
  return _swift_task_switch(sub_100AEC3CC, 0, 0);
}

uint64_t sub_100AEC3CC()
{
  uint64_t v1 = v0 + 96;
  if (*(void *)(v0 + 248))
  {
    uint64_t v2 = *(void **)(v0 + 224);
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v1);
    sub_10000588C(&qword_10163BC50);
    type metadata accessor for UUID();
    uint64_t v3 = swift_allocObject();
    *(_OWORD *)(v3 + 16) = xmmword_101342130;
    uint64_t v4 = v2[3];
    uint64_t v5 = v2[4];
    sub_10001CD44(v2, v4);
    (*(void (**)(uint64_t))(*(void *)(*(void *)(v5 + 8) + 8) + 32))(v4);
    uint64_t v6 = sub_100DF29F8(v3);
    *(void *)(v0 + 256) = v6;
    swift_setDeallocating();
    swift_arrayDestroy();
    swift_deallocClassInstance();
    uint64_t v7 = (void *)swift_task_alloc();
    *(void *)(v0 + 264) = v7;
    *uint64_t v7 = v0;
    v7[1] = sub_100AEC6A8;
    return sub_1009A0330((uint64_t)v6);
  }
  else
  {
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v1);
    if (qword_1016375E8 != -1) {
      swift_once();
    }
    swift_beginAccess();
    uint64_t result = sub_10001D074((uint64_t)&xmmword_10166E8F0, v0 + 56, (uint64_t *)&unk_101638D30);
    if (*(void *)(v0 + 80))
    {
      sub_10001CEB0((long long *)(v0 + 56), v0 + 16);
      sub_10001CD44((void *)(v0 + 16), *(void *)(v0 + 40));
      uint64_t v10 = (uint64_t (__cdecl *)())((char *)&dword_101639358 + dword_101639358);
      uint64_t v9 = (void *)swift_task_alloc();
      *(void *)(v0 + 272) = v9;
      *uint64_t v9 = v0;
      v9[1] = sub_100AEC904;
      return v10();
    }
    else
    {
      __break(1u);
    }
  }
  return result;
}

uint64_t sub_100AEC6A8()
{
  swift_task_dealloc();
  swift_bridgeObjectRelease();
  return _swift_task_switch(sub_100AEC7C0, 0, 0);
}

uint64_t sub_100AEC7C0()
{
  swift_release();
  if (qword_1016375E8 != -1) {
    swift_once();
  }
  swift_beginAccess();
  uint64_t result = sub_10001D074((uint64_t)&xmmword_10166E8F0, v0 + 56, (uint64_t *)&unk_101638D30);
  if (*(void *)(v0 + 80))
  {
    sub_10001CEB0((long long *)(v0 + 56), v0 + 16);
    sub_10001CD44((void *)(v0 + 16), *(void *)(v0 + 40));
    uint64_t v3 = (uint64_t (__cdecl *)())((char *)&dword_101639358 + dword_101639358);
    uint64_t v2 = (void *)swift_task_alloc();
    *(void *)(v0 + 272) = v2;
    *uint64_t v2 = v0;
    v2[1] = sub_100AEC904;
    return v3();
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_100AEC904(uint64_t a1)
{
  *(void *)(*(void *)v1 + 280) = a1;
  swift_task_dealloc();
  return _swift_task_switch(sub_100AECA04, 0, 0);
}

uint64_t sub_100AECA04()
{
  uint64_t v1 = v0[35];
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)(v0 + 2));
  if (v1)
  {
    uint64_t v2 = v0[29];
    int v3 = *(unsigned __int8 *)(v2 + *(int *)(type metadata accessor for BeaconStatus(0) + 20)) >> 6;
    if (v3 == 3) {
      char v4 = 5;
    }
    else {
      char v4 = 0x40201u >> (8 * v3);
    }
    swift_retain();
    uint64_t v5 = (void *)swift_task_alloc();
    v0[36] = v5;
    *uint64_t v5 = v0;
    v5[1] = sub_100AECB2C;
    uint64_t v6 = v0[28];
    return sub_10105B4EC(v6, v4);
  }
  else
  {
    uint64_t v8 = (uint64_t (*)(void))v0[1];
    return v8();
  }
}

uint64_t sub_100AECB2C()
{
  swift_task_dealloc();
  swift_release();
  if (v0)
  {
    swift_errorRelease();
    uint64_t v1 = sub_100B64284;
  }
  else
  {
    uint64_t v1 = sub_100AECC60;
  }
  return _swift_task_switch(v1, 0, 0);
}

uint64_t sub_100AECC60()
{
  swift_release();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_100AECCC0(uint64_t a1)
{
  v1[30] = a1;
  uint64_t v2 = type metadata accessor for DispatchWorkItemFlags();
  v1[31] = v2;
  v1[32] = *(void *)(v2 - 8);
  v1[33] = swift_task_alloc();
  uint64_t v3 = type metadata accessor for DispatchQoS();
  v1[34] = v3;
  v1[35] = *(void *)(v3 - 8);
  v1[36] = swift_task_alloc();
  sub_10000588C(&qword_10163CBA0);
  v1[37] = swift_task_alloc();
  uint64_t v4 = sub_10000588C((uint64_t *)&unk_10164E870);
  v1[38] = v4;
  uint64_t v5 = *(void *)(v4 - 8);
  v1[39] = v5;
  v1[40] = *(void *)(v5 + 64);
  v1[41] = swift_task_alloc();
  v1[42] = swift_task_alloc();
  uint64_t v6 = type metadata accessor for Date();
  v1[43] = v6;
  v1[44] = *(void *)(v6 - 8);
  v1[45] = swift_task_alloc();
  v1[46] = type metadata accessor for BeaconStatus(0);
  v1[47] = swift_task_alloc();
  sub_10000588C(&qword_10164E760);
  v1[48] = swift_task_alloc();
  uint64_t v7 = type metadata accessor for ObservedAdvertisement.BeaconIndexInformation(0);
  v1[49] = v7;
  v1[50] = *(void *)(v7 - 8);
  v1[51] = swift_task_alloc();
  sub_10000588C(&qword_10163EB60);
  v1[52] = swift_task_alloc();
  uint64_t v8 = type metadata accessor for ObservedAdvertisement(0);
  v1[53] = v8;
  v1[54] = *(void *)(v8 - 8);
  v1[55] = swift_task_alloc();
  v1[56] = type metadata accessor for BeaconIdentifier();
  v1[57] = swift_task_alloc();
  uint64_t v9 = type metadata accessor for UUID();
  v1[58] = v9;
  uint64_t v10 = *(void *)(v9 - 8);
  v1[59] = v10;
  v1[60] = *(void *)(v10 + 64);
  v1[61] = swift_task_alloc();
  v1[62] = swift_task_alloc();
  v1[63] = swift_task_alloc();
  v1[64] = swift_task_alloc();
  v1[65] = swift_task_alloc();
  v1[66] = swift_task_alloc();
  v1[67] = swift_task_alloc();
  v1[68] = sub_10000588C(&qword_101638CF0);
  v1[69] = swift_task_alloc();
  v1[70] = swift_task_alloc();
  v1[71] = swift_task_alloc();
  v1[72] = swift_task_alloc();
  return _swift_task_switch(sub_100AED164, 0, 0);
}

uint64_t sub_100AED164()
{
  if (qword_101637488 != -1) {
    swift_once();
  }
  uint64_t v1 = type metadata accessor for Logger();
  *(void *)(v0 + 584) = v1;
  *(void *)(v0 + 592) = sub_100010324(v1, (uint64_t)qword_10170F2C8);
  uint64_t v2 = Logger.logObject.getter();
  os_log_type_t v3 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v2, v3))
  {
    uint64_t v4 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v4 = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, v3, "readLatestBeaconStatusObservations called.", v4, 2u);
    swift_slowDealloc();
  }

  uint64_t v5 = qword_1016375E8;
  swift_retain();
  if (v5 != -1) {
    swift_once();
  }
  swift_beginAccess();
  uint64_t result = sub_10001D074((uint64_t)&xmmword_10166E8F0, v0 + 104, (uint64_t *)&unk_101638D30);
  if (*(void *)(v0 + 128))
  {
    sub_10001CEB0((long long *)(v0 + 104), v0 + 64);
    swift_release();
    sub_10001CD44((void *)(v0 + 64), *(void *)(v0 + 88));
    uint64_t v8 = (uint64_t (__cdecl *)())((char *)&dword_101639138 + dword_101639138);
    uint64_t v7 = (void *)swift_task_alloc();
    *(void *)(v0 + 600) = v7;
    *uint64_t v7 = v0;
    v7[1] = sub_100AED37C;
    return v8();
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_100AED37C(uint64_t a1)
{
  *(void *)(*(void *)v1 + 608) = a1;
  swift_task_dealloc();
  return _swift_task_switch(sub_100AED47C, 0, 0);
}

uint64_t sub_100AED47C()
{
  uint64_t v1 = (uint64_t)(v0 + 8);
  if (v0[76])
  {
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v1);
    swift_retain();
    uint64_t v2 = (void *)swift_task_alloc();
    v0[77] = v2;
    uint64_t v3 = sub_10000588C((uint64_t *)&unk_1016636E0);
    *uint64_t v2 = v0;
    v2[1] = sub_100AED758;
    uint64_t v4 = v0[30];
    return unsafeBlocking<A>(_:)(v0 + 24, sub_100B5EFBC, v4, v3);
  }
  else
  {
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v1);
    uint64_t v5 = Logger.logObject.getter();
    os_log_type_t v6 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v5, v6))
    {
      uint64_t v7 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v7 = 0;
      _os_log_impl((void *)&_mh_execute_header, v5, v6, "readLatestBeaconStatusObservations could not get the ObservationStoreService.", v7, 2u);
      swift_slowDealloc();
    }

    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v8 = (uint64_t (*)(void))v0[1];
    return v8();
  }
}

uint64_t sub_100AED758()
{
  swift_task_dealloc();
  swift_release();
  return _swift_task_switch(sub_100AED870, 0, 0);
}

uint64_t sub_100AED870()
{
  uint64_t v1 = *(void *)(v0 + 192);
  *(void *)(v0 + 624) = v1;
  uint64_t v2 = *(void *)(v1 + 16);
  *(void *)(v0 + 632) = v2;
  if (!v2)
  {
    (*(void (**)(void, uint64_t, uint64_t, void))(*(void *)(v0 + 472) + 56))(*(void *)(v0 + 576), 1, 1, *(void *)(v0 + 464));
LABEL_5:
    swift_bridgeObjectRelease();
    swift_release();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v10 = *(uint64_t (**)(void))(v0 + 8);
    return v10();
  }
  uint64_t v3 = *(void *)(v0 + 464);
  uint64_t v4 = *(void *)(v0 + 472);
  int v5 = *(_DWORD *)(v4 + 80);
  *(_DWORD *)(v0 + 776) = v5;
  *(void *)(v0 + 640) = *(void *)(v4 + 72);
  os_log_type_t v6 = *(void (**)(uint64_t, unint64_t, uint64_t))(v4 + 16);
  *(void *)(v0 + 648) = v6;
  *(_OWORD *)(v0 + 656) = 0u;
  uint64_t v7 = *(void *)(v0 + 576);
  *(void *)(v0 + 672) = (v4 + 16) & 0xFFFFFFFFFFFFLL | 0xE3BA000000000000;
  v6(v7, v1 + ((v5 + 32) & ~(unint64_t)v5), v3);
  uint64_t v8 = *(void (**)(uint64_t, void, uint64_t, uint64_t))(v4 + 56);
  *(void *)(v0 + 680) = v8;
  *(void *)(v0 + 688) = (v4 + 56) & 0xFFFFFFFFFFFFLL | 0xA0D1000000000000;
  v8(v7, 0, 1, v3);
  uint64_t v9 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v4 + 48);
  *(void *)(v0 + 696) = v9;
  *(void *)(v0 + 704) = (v4 + 48) & 0xFFFFFFFFFFFFLL | 0x60F0000000000000;
  if (v9(v7, 1, v3) == 1) {
    goto LABEL_5;
  }
  uint64_t v12 = *(void (**)(uint64_t, uint64_t, uint64_t))(v0 + 648);
  uint64_t v13 = *(void *)(v0 + 576);
  uint64_t v14 = *(void *)(v0 + 536);
  uint64_t v16 = *(void *)(v0 + 464);
  uint64_t v15 = *(void *)(v0 + 472);
  uint64_t v18 = *(void *)(v0 + 448);
  uint64_t v17 = *(void *)(v0 + 456);
  uint64_t v19 = *(void (**)(uint64_t, uint64_t, uint64_t))(v15 + 32);
  *(void *)(v0 + 712) = v19;
  *(void *)(v0 + 720) = (v15 + 32) & 0xFFFFFFFFFFFFLL | 0x48D8000000000000;
  v19(v14, v13, v16);
  uid_t v20 = getuid();
  sub_100DC5FC0(v20);
  v12(v17 + *(int *)(v18 + 20), v14, v16);
  uint64_t v21 = *(void *)(v0 + 608);
  return _swift_task_switch(sub_100AEDBD0, v21, 0);
}

uint64_t sub_100AEDBD0()
{
  uint64_t v1 = *(void *)(v0[76] + 128);
  if (v1)
  {
    uint64_t v2 = v0[82];
    uint64_t v3 = v0[57];
    uint64_t v4 = v0[52];
    swift_retain();
    sub_100190910(v3, v1, v4);
    uint64_t v5 = v2;
    v0[91] = v2;
    swift_release();
    if (!v2)
    {
      os_log_type_t v6 = sub_100AEDD70;
      goto LABEL_10;
    }
  }
  else
  {
    if (qword_101637480 != -1) {
      swift_once();
    }
    sub_100010324(v0[73], (uint64_t)qword_10166B720);
    uint64_t v7 = Logger.logObject.getter();
    os_log_type_t v8 = static os_log_type_t.fault.getter();
    if (os_log_type_enabled(v7, v8))
    {
      uint64_t v9 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v9 = 0;
      _os_log_impl((void *)&_mh_execute_header, v7, v8, "No observation store on this platform!", v9, 2u);
      swift_slowDealloc();
    }

    sub_1005D4B14();
    uint64_t v5 = swift_allocError();
    swift_willThrow();
  }
  v0[92] = v5;
  os_log_type_t v6 = sub_100AEE630;
LABEL_10:
  return _swift_task_switch(v6, 0, 0);
}

uint64_t sub_100AEDD70()
{
  uint64_t v79 = v0;
  uint64_t v1 = *(void *)(v0 + 424);
  uint64_t v2 = *(void *)(v0 + 416);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v0 + 432) + 48))(v2, 1, v1) == 1)
  {
    uint64_t v3 = *(void (**)(uint64_t, uint64_t, uint64_t))(v0 + 648);
    uint64_t v4 = *(void *)(v0 + 536);
    uint64_t v5 = *(void *)(v0 + 520);
    uint64_t v6 = *(void *)(v0 + 464);
    sub_10001DAB4(v2, &qword_10163EB60);
    v3(v5, v4, v6);
    uint64_t v7 = Logger.logObject.getter();
    os_log_type_t v8 = static os_log_type_t.default.getter();
    BOOL v9 = os_log_type_enabled(v7, v8);
    uint64_t v10 = *(void *)(v0 + 536);
    uint64_t v11 = *(void *)(v0 + 520);
    uint64_t v13 = *(void *)(v0 + 464);
    uint64_t v12 = *(void *)(v0 + 472);
    uint64_t v14 = *(void *)(v0 + 456);
    if (v9)
    {
      uint64_t v76 = *(void *)(v0 + 536);
      uint64_t v15 = swift_slowAlloc();
      uint64_t v78 = swift_slowAlloc();
      *(_DWORD *)uint64_t v15 = 141558275;
      *(void *)(v15 + 4) = 1752392040;
      *(_WORD *)(v15 + 12) = 2081;
      sub_100B22DA4((unint64_t *)&qword_101638B10, (void (*)(uint64_t))&type metadata accessor for UUID);
      uint64_t v16 = dispatch thunk of CustomStringConvertible.description.getter();
      *(void *)(v15 + 14) = sub_1008FA0F0(v16, v17, &v78);
      swift_bridgeObjectRelease();
      uint64_t v18 = *(void (**)(uint64_t, uint64_t))(v12 + 8);
      v18(v11, v13);
      _os_log_impl((void *)&_mh_execute_header, v7, v8, "No latest advertisement read from ObservationService beacon: %{private,mask.hash}s.", (uint8_t *)v15, 0x16u);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      sub_100B310AC(v14, (uint64_t (*)(void))type metadata accessor for BeaconIdentifier);
      v18(v76, v13);
    }
    else
    {

      uint64_t v24 = *(void (**)(uint64_t, uint64_t))(v12 + 8);
      v24(v11, v13);
      sub_100B310AC(v14, (uint64_t (*)(void))type metadata accessor for BeaconIdentifier);
      v24(v10, v13);
    }
    uint64_t v25 = *(void *)(v0 + 664) + 1;
    if (v25 == *(void *)(v0 + 632))
    {
      (*(void (**)(void, uint64_t, uint64_t, void))(*(void *)(v0 + 472) + 56))(*(void *)(v0 + 576), 1, 1, *(void *)(v0 + 464));
LABEL_16:
      swift_bridgeObjectRelease();
      swift_release();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      uint64_t v57 = *(uint64_t (**)(void))(v0 + 8);
      return v57();
    }
    uint64_t v49 = *(void *)(v0 + 728);
    *(void *)(v0 + 664) = v25;
    *(void *)(v0 + 656) = v49;
    uint64_t v50 = *(void (**)(uint64_t, unint64_t, uint64_t))(v0 + 648);
    uint64_t v51 = *(void *)(v0 + 576);
    uint64_t v52 = *(void *)(v0 + 464);
    uint64_t v53 = *(void *)(v0 + 472);
    unint64_t v54 = *(void *)(v0 + 624)
        + ((*(unsigned __int8 *)(v0 + 776) + 32) & ~(unint64_t)*(unsigned __int8 *)(v0 + 776))
        + *(void *)(v0 + 640) * v25;
    *(void *)(v0 + 672) = (v53 + 16) & 0xFFFFFFFFFFFFLL | 0xE3BA000000000000;
    v50(v51, v54, v52);
    uint64_t v55 = *(void (**)(uint64_t, void, uint64_t, uint64_t))(v53 + 56);
    *(void *)(v0 + 680) = v55;
    *(void *)(v0 + 688) = (v53 + 56) & 0xFFFFFFFFFFFFLL | 0xA0D1000000000000;
    v55(v51, 0, 1, v52);
    uint64_t v56 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v53 + 48);
    *(void *)(v0 + 696) = v56;
    *(void *)(v0 + 704) = (v53 + 48) & 0xFFFFFFFFFFFFLL | 0x60F0000000000000;
    if (v56(v51, 1, v52) == 1) {
      goto LABEL_16;
    }
    uint64_t v58 = *(void (**)(uint64_t, uint64_t, uint64_t))(v0 + 648);
    uint64_t v59 = *(void *)(v0 + 576);
    uint64_t v60 = *(void *)(v0 + 536);
    uint64_t v62 = *(void *)(v0 + 464);
    uint64_t v61 = *(void *)(v0 + 472);
    uint64_t v64 = *(void *)(v0 + 448);
    uint64_t v63 = *(void *)(v0 + 456);
    uint64_t v65 = *(void (**)(uint64_t, uint64_t, uint64_t))(v61 + 32);
    *(void *)(v0 + 712) = v65;
    *(void *)(v0 + 720) = (v61 + 32) & 0xFFFFFFFFFFFFLL | 0x48D8000000000000;
    v65(v60, v59, v62);
    uid_t v66 = getuid();
    sub_100DC5FC0(v66);
    v58(v63 + *(int *)(v64 + 20), v60, v62);
    uint64_t v67 = *(void *)(v0 + 608);
    return _swift_task_switch(sub_100AEDBD0, v67, 0);
  }
  else
  {
    uint64_t v19 = *(void *)(v0 + 440);
    uint64_t v20 = *(void *)(v0 + 392);
    uint64_t v21 = *(void *)(v0 + 400);
    uint64_t v22 = *(void *)(v0 + 384);
    sub_100B30DB4(v2, v19, type metadata accessor for ObservedAdvertisement);
    sub_10001D074(v19 + *(int *)(v1 + 52), v22, &qword_10164E760);
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v21 + 48))(v22, 1, v20) == 1)
    {
      sub_10001DAB4(*(void *)(v0 + 384), &qword_10164E760);
      uint64_t v70 = 0;
      uint64_t v23 = 3;
    }
    else
    {
      uint64_t v26 = *(void *)(v0 + 408);
      uint64_t v27 = *(void *)(v0 + 392);
      sub_100B30DB4(*(void *)(v0 + 384), v26, type metadata accessor for ObservedAdvertisement.BeaconIndexInformation);
      unsigned __int8 v28 = *(unsigned char *)(v26 + *(int *)(v27 + 20));
      uint64_t v70 = *(void *)(v26 + *(int *)(v27 + 24));
      sub_100B310AC(v26, type metadata accessor for ObservedAdvertisement.BeaconIndexInformation);
      uint64_t v23 = v28;
    }
    uint64_t v69 = v23;
    uint64_t v73 = *(void (**)(uint64_t, uint64_t, uint64_t))(v0 + 712);
    uint64_t v29 = *(void *)(v0 + 512);
    uint64_t v30 = *(void *)(v0 + 464);
    uint64_t v31 = *(void *)(v0 + 440);
    uint64_t v32 = *(void *)(v0 + 424);
    uint64_t v33 = *(int **)(v0 + 368);
    uint64_t v34 = *(void *)(v0 + 376);
    uint64_t v36 = *(void *)(v0 + 352);
    uint64_t v35 = *(void *)(v0 + 360);
    uint64_t v37 = *(void *)(v0 + 344);
    uint64_t v75 = *(void *)(v0 + 240);
    uint64_t v77 = *(void *)(v0 + 728);
    BOOL v74 = (*(void *)(v31 + 24) & 0x2000000000000000) == 0;
    (*(void (**)(uint64_t, void, uint64_t))(v0 + 648))(v29, *(void *)(v0 + 536), v30);
    uint64_t v38 = v31;
    uint64_t v72 = v31;
    char v39 = *(unsigned char *)(v31 + 32);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v36 + 16))(v35, v38 + *(int *)(v32 + 44), v37);
    uint64_t v40 = v70;
    if (v69 == 3) {
      uint64_t v40 = 0;
    }
    uint64_t v71 = v40;
    v73(v34, v29, v30);
    *(unsigned char *)(v34 + v33[5]) = v39;
    uint64_t v41 = v34 + v33[6];
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v36 + 32))(v41, v35, v37);
    uint64_t v42 = (uint64_t *)(v34 + v33[7]);
    uint64_t *v42 = v69;
    v42[1] = v71;
    *(unsigned char *)(v34 + v33[8]) = v74;
    *(void *)(v34 + v33[9]) = 0;
    char v43 = *(unsigned char *)(v72 + 9);
    type metadata accessor for Transaction();
    uint64_t v44 = swift_task_alloc();
    *(void *)(v44 + 16) = v75;
    *(void *)(v44 + 24) = v34;
    *(void *)(v44 + 32) = v41;
    *(void *)(v44 + 40) = v34;
    *(unsigned char *)(v44 + 48) = v43;
    *(unsigned char *)(v44 + 49) = v39;
    static Transaction.named<A>(_:with:)();
    *(void *)(v0 + 744) = v77;
    swift_task_dealloc();
    sub_100B310AC(v34, type metadata accessor for BeaconStatus);
    sub_100B310AC(v72, type metadata accessor for ObservedAdvertisement);
    swift_retain();
    uint64_t v45 = (void *)swift_task_alloc();
    *(void *)(v0 + 752) = v45;
    void *v45 = v0;
    v45[1] = sub_100AEEC14;
    uint64_t v46 = *(void *)(v0 + 568);
    uint64_t v47 = *(void *)(v0 + 544);
    uint64_t v48 = *(void *)(v0 + 240);
    return unsafeBlocking<A>(_:)(v46, sub_100B5EFC4, v48, v47);
  }
}

uint64_t sub_100AEE630()
{
  uint64_t v41 = v0;
  (*(void (**)(void, void, void))(v0 + 648))(*(void *)(v0 + 528), *(void *)(v0 + 536), *(void *)(v0 + 464));
  swift_errorRetain();
  swift_errorRetain();
  uint64_t v1 = Logger.logObject.getter();
  os_log_type_t v2 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v1, v2))
  {
    uint64_t v39 = *(void *)(v0 + 536);
    uint64_t v3 = *(void *)(v0 + 528);
    uint64_t v4 = *(void *)(v0 + 464);
    uint64_t v5 = *(void *)(v0 + 472);
    uint64_t v38 = *(void *)(v0 + 456);
    uint64_t v6 = swift_slowAlloc();
    uint64_t v40 = swift_slowAlloc();
    *(_DWORD *)uint64_t v6 = 141558531;
    *(void *)(v6 + 4) = 1752392040;
    *(_WORD *)(v6 + 12) = 2081;
    sub_100B22DA4((unint64_t *)&qword_101638B10, (void (*)(uint64_t))&type metadata accessor for UUID);
    uint64_t v7 = dispatch thunk of CustomStringConvertible.description.getter();
    *(void *)(v6 + 14) = sub_1008FA0F0(v7, v8, &v40);
    swift_bridgeObjectRelease();
    BOOL v9 = *(void (**)(uint64_t, uint64_t))(v5 + 8);
    v9(v3, v4);
    *(_WORD *)(v6 + 22) = 2082;
    swift_getErrorValue();
    uint64_t v10 = Error.localizedDescription.getter();
    *(void *)(v6 + 24) = sub_1008FA0F0(v10, v11, &v40);
    swift_bridgeObjectRelease();
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl((void *)&_mh_execute_header, v1, v2, "Error reading latest advertisement from ObservationService beacon: %{private,mask.hash}s, error: %{public}s.", (uint8_t *)v6, 0x20u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    swift_errorRelease();
    sub_100B310AC(v38, (uint64_t (*)(void))type metadata accessor for BeaconIdentifier);
    v9(v39, v4);
  }
  else
  {
    uint64_t v12 = *(void *)(v0 + 536);
    uint64_t v13 = *(void *)(v0 + 528);
    uint64_t v14 = *(void *)(v0 + 464);
    uint64_t v15 = *(void *)(v0 + 472);
    uint64_t v16 = *(void *)(v0 + 456);

    swift_errorRelease();
    swift_errorRelease();
    unint64_t v17 = *(void (**)(uint64_t, uint64_t))(v15 + 8);
    v17(v13, v14);
    swift_errorRelease();
    sub_100B310AC(v16, (uint64_t (*)(void))type metadata accessor for BeaconIdentifier);
    v17(v12, v14);
  }
  uint64_t v18 = *(void *)(v0 + 664) + 1;
  if (v18 == *(void *)(v0 + 632))
  {
    (*(void (**)(void, uint64_t, uint64_t, void))(*(void *)(v0 + 472) + 56))(*(void *)(v0 + 576), 1, 1, *(void *)(v0 + 464));
LABEL_7:
    swift_bridgeObjectRelease();
    swift_release();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v26 = *(uint64_t (**)(void))(v0 + 8);
    return v26();
  }
  *(void *)(v0 + 664) = v18;
  *(void *)(v0 + 656) = 0;
  uint64_t v19 = *(void (**)(uint64_t, unint64_t, uint64_t))(v0 + 648);
  uint64_t v20 = *(void *)(v0 + 576);
  uint64_t v21 = *(void *)(v0 + 464);
  uint64_t v22 = *(void *)(v0 + 472);
  unint64_t v23 = *(void *)(v0 + 624)
      + ((*(unsigned __int8 *)(v0 + 776) + 32) & ~(unint64_t)*(unsigned __int8 *)(v0 + 776))
      + *(void *)(v0 + 640) * v18;
  *(void *)(v0 + 672) = (v22 + 16) & 0xFFFFFFFFFFFFLL | 0xE3BA000000000000;
  v19(v20, v23, v21);
  uint64_t v24 = *(void (**)(uint64_t, void, uint64_t, uint64_t))(v22 + 56);
  *(void *)(v0 + 680) = v24;
  *(void *)(v0 + 688) = (v22 + 56) & 0xFFFFFFFFFFFFLL | 0xA0D1000000000000;
  v24(v20, 0, 1, v21);
  uint64_t v25 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v22 + 48);
  *(void *)(v0 + 696) = v25;
  *(void *)(v0 + 704) = (v22 + 48) & 0xFFFFFFFFFFFFLL | 0x60F0000000000000;
  if (v25(v20, 1, v21) == 1) {
    goto LABEL_7;
  }
  unsigned __int8 v28 = *(void (**)(uint64_t, uint64_t, uint64_t))(v0 + 648);
  uint64_t v29 = *(void *)(v0 + 576);
  uint64_t v30 = *(void *)(v0 + 536);
  uint64_t v32 = *(void *)(v0 + 464);
  uint64_t v31 = *(void *)(v0 + 472);
  uint64_t v34 = *(void *)(v0 + 448);
  uint64_t v33 = *(void *)(v0 + 456);
  uint64_t v35 = *(void (**)(uint64_t, uint64_t, uint64_t))(v31 + 32);
  *(void *)(v0 + 712) = v35;
  *(void *)(v0 + 720) = (v31 + 32) & 0xFFFFFFFFFFFFLL | 0x48D8000000000000;
  v35(v30, v29, v32);
  uid_t v36 = getuid();
  sub_100DC5FC0(v36);
  v28(v33 + *(int *)(v34 + 20), v30, v32);
  uint64_t v37 = *(void *)(v0 + 608);
  return _swift_task_switch(sub_100AEDBD0, v37, 0);
}

uint64_t sub_100AEEC14()
{
  swift_task_dealloc();
  swift_release();
  return _swift_task_switch(sub_100AEED2C, 0, 0);
}

uint64_t sub_100AEED2C()
{
  uint64_t v1 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v0 + 696);
  uint64_t v2 = *(void *)(v0 + 560);
  uint64_t v3 = *(void *)(v0 + 464);
  sub_10001D074(*(void *)(v0 + 568), v2, &qword_101638CF0);
  if (v1(v2, 1, v3) == 1)
  {
    uint64_t v4 = *(void *)(v0 + 560);
    uint64_t v5 = *(void *)(v0 + 536);
    uint64_t v6 = *(void *)(v0 + 464);
    uint64_t v7 = *(void *)(v0 + 472);
    uint64_t v8 = *(void *)(v0 + 456);
    sub_10001DAB4(*(void *)(v0 + 568), &qword_101638CF0);
    sub_100B310AC(v8, (uint64_t (*)(void))type metadata accessor for BeaconIdentifier);
    (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v5, v6);
    sub_10001DAB4(v4, &qword_101638CF0);
    uint64_t v9 = *(void *)(v0 + 664) + 1;
    if (v9 == *(void *)(v0 + 632))
    {
      (*(void (**)(void, uint64_t, uint64_t, void))(*(void *)(v0 + 472) + 56))(*(void *)(v0 + 576), 1, 1, *(void *)(v0 + 464));
LABEL_8:
      swift_bridgeObjectRelease();
      swift_release();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      unsigned __int8 v28 = *(uint64_t (**)(void))(v0 + 8);
      return v28();
    }
    uint64_t v20 = *(void *)(v0 + 744);
    *(void *)(v0 + 664) = v9;
    *(void *)(v0 + 656) = v20;
    uint64_t v21 = *(void (**)(uint64_t, unint64_t, uint64_t))(v0 + 648);
    uint64_t v22 = *(void *)(v0 + 576);
    uint64_t v23 = *(void *)(v0 + 464);
    uint64_t v24 = *(void *)(v0 + 472);
    unint64_t v25 = *(void *)(v0 + 624)
        + ((*(unsigned __int8 *)(v0 + 776) + 32) & ~(unint64_t)*(unsigned __int8 *)(v0 + 776))
        + *(void *)(v0 + 640) * v9;
    *(void *)(v0 + 672) = (v24 + 16) & 0xFFFFFFFFFFFFLL | 0xE3BA000000000000;
    v21(v22, v25, v23);
    uint64_t v26 = *(void (**)(uint64_t, void, uint64_t, uint64_t))(v24 + 56);
    *(void *)(v0 + 680) = v26;
    *(void *)(v0 + 688) = (v24 + 56) & 0xFFFFFFFFFFFFLL | 0xA0D1000000000000;
    v26(v22, 0, 1, v23);
    uint64_t v27 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v24 + 48);
    *(void *)(v0 + 696) = v27;
    *(void *)(v0 + 704) = (v24 + 48) & 0xFFFFFFFFFFFFLL | 0x60F0000000000000;
    if (v27(v22, 1, v23) == 1) {
      goto LABEL_8;
    }
    uint64_t v29 = *(void (**)(uint64_t, uint64_t, uint64_t))(v0 + 648);
    uint64_t v30 = *(void *)(v0 + 576);
    uint64_t v31 = *(void *)(v0 + 536);
    uint64_t v33 = *(void *)(v0 + 464);
    uint64_t v32 = *(void *)(v0 + 472);
    uint64_t v35 = *(void *)(v0 + 448);
    uint64_t v34 = *(void *)(v0 + 456);
    uid_t v36 = *(void (**)(uint64_t, uint64_t, uint64_t))(v32 + 32);
    *(void *)(v0 + 712) = v36;
    *(void *)(v0 + 720) = (v32 + 32) & 0xFFFFFFFFFFFFLL | 0x48D8000000000000;
    v36(v31, v30, v33);
    uid_t v37 = getuid();
    sub_100DC5FC0(v37);
    v29(v34 + *(int *)(v35 + 20), v31, v33);
    uint64_t v38 = *(void *)(v0 + 608);
    return _swift_task_switch(sub_100AEDBD0, v38, 0);
  }
  else
  {
    uint64_t v10 = *(void (**)(uint64_t, void, uint64_t, uint64_t))(v0 + 680);
    unint64_t v11 = *(void (**)(uint64_t, uint64_t, uint64_t))(v0 + 648);
    uint64_t v12 = *(void *)(v0 + 552);
    uint64_t v13 = *(void *)(v0 + 504);
    uint64_t v14 = *(void *)(v0 + 464);
    (*(void (**)(uint64_t, void, uint64_t))(v0 + 712))(v13, *(void *)(v0 + 560), v14);
    v11(v12, v13, v14);
    v10(v12, 0, 1, v14);
    uint64_t v15 = (void *)swift_task_alloc();
    *(void *)(v0 + 760) = v15;
    *uint64_t v15 = v0;
    v15[1] = sub_100AEF20C;
    uint64_t v16 = *(void *)(v0 + 552);
    uint64_t v17 = *(void *)(v0 + 456);
    uint64_t v18 = *(void *)(v0 + 296);
    return sub_101105688(v18, v17, v16);
  }
}

uint64_t sub_100AEF20C()
{
  uint64_t v2 = *v1;
  *(void *)(*v1 + 768) = v0;
  swift_task_dealloc();
  sub_10001DAB4(*(void *)(v2 + 552), &qword_101638CF0);
  if (v0) {
    uint64_t v3 = sub_100AEFA7C;
  }
  else {
    uint64_t v3 = sub_100AEF348;
  }
  return _swift_task_switch(v3, 0, 0);
}

uint64_t sub_100AEF348()
{
  uint64_t v1 = *(void *)(v0 + 312);
  uint64_t v2 = *(void *)(v0 + 296);
  if ((*(unsigned int (**)(uint64_t, uint64_t, void))(v1 + 48))(v2, 1, *(void *)(v0 + 304)) == 1)
  {
    uint64_t v3 = *(void *)(v0 + 568);
    uint64_t v4 = *(void *)(v0 + 536);
    uint64_t v5 = *(void *)(v0 + 464);
    uint64_t v6 = *(void *)(v0 + 456);
    uint64_t v7 = *(void (**)(uint64_t, uint64_t))(*(void *)(v0 + 472) + 8);
    v7(*(void *)(v0 + 504), v5);
    sub_10001DAB4(v3, &qword_101638CF0);
    sub_100B310AC(v6, (uint64_t (*)(void))type metadata accessor for BeaconIdentifier);
    v7(v4, v5);
    sub_10001DAB4(v2, &qword_10163CBA0);
  }
  else
  {
    uint64_t v41 = *(void (**)(unint64_t, uint64_t, uint64_t))(v0 + 712);
    uint64_t v40 = *(void (**)(uint64_t, uint64_t, uint64_t))(v0 + 648);
    uint64_t v53 = *(void *)(v0 + 568);
    uint64_t v8 = *(void *)(v0 + 536);
    uint64_t v49 = v8;
    uint64_t v9 = *(void *)(v0 + 496);
    uint64_t v51 = *(void *)(v0 + 504);
    uint64_t v50 = *(void *)(v0 + 472);
    uint64_t v38 = *(void *)(v0 + 464);
    uint64_t v52 = *(void *)(v0 + 456);
    uint64_t v39 = *(void *)(v0 + 328);
    uint64_t v42 = *(void *)(v0 + 288);
    uint64_t v47 = *(void *)(v0 + 280);
    uint64_t v48 = *(void *)(v0 + 272);
    uint64_t v45 = *(void *)(v0 + 336);
    uint64_t v46 = *(void *)(v0 + 256);
    unint64_t v10 = (*(unsigned __int8 *)(v0 + 776) + 24) & ~(unint64_t)*(unsigned __int8 *)(v0 + 776);
    unint64_t v11 = *(void *)(v0 + 480) + v10;
    uint64_t v12 = *(void *)(v0 + 240);
    uint64_t v43 = *(void *)(v0 + 248);
    uint64_t v44 = *(void *)(v0 + 264);
    sub_10001D608(v2, v45, (uint64_t *)&unk_10164E870);
    v40(v9, v8, v38);
    sub_10001D074(v45, v39, (uint64_t *)&unk_10164E870);
    unint64_t v13 = (v11 + *(unsigned __int8 *)(v1 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80);
    uint64_t v14 = swift_allocObject();
    *(void *)(v14 + 16) = v12;
    v41(v14 + v10, v9, v38);
    sub_10001D608(v39, v14 + v13, (uint64_t *)&unk_10164E870);
    *(void *)(v0 + 48) = sub_100B5D150;
    *(void *)(v0 + 56) = v14;
    *(void *)(v0 + 16) = _NSConcreteStackBlock;
    *(void *)(v0 + 24) = 1107296256;
    *(void *)(v0 + 32) = sub_1004B5480;
    *(void *)(v0 + 40) = &unk_1015E93C0;
    uint64_t v15 = _Block_copy((const void *)(v0 + 16));
    swift_retain();
    static DispatchQoS.unspecified.getter();
    *(void *)(v0 + 232) = _swiftEmptyArrayStorage;
    sub_100B22DA4((unint64_t *)&qword_10163B7E0, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
    sub_10000588C((uint64_t *)&unk_10163F350);
    sub_100062734((unint64_t *)&qword_10163B7F0, (uint64_t *)&unk_10163F350);
    dispatch thunk of SetAlgebra.init<A>(_:)();
    OS_dispatch_queue.async(group:qos:flags:execute:)();
    _Block_release(v15);
    (*(void (**)(uint64_t, uint64_t))(v46 + 8))(v44, v43);
    (*(void (**)(uint64_t, uint64_t))(v47 + 8))(v42, v48);
    swift_release();
    sub_10001DAB4(v45, (uint64_t *)&unk_10164E870);
    uint64_t v16 = *(void (**)(uint64_t, uint64_t))(v50 + 8);
    v16(v51, v38);
    sub_10001DAB4(v53, &qword_101638CF0);
    sub_100B310AC(v52, (uint64_t (*)(void))type metadata accessor for BeaconIdentifier);
    v16(v49, v38);
  }
  uint64_t v17 = *(void *)(v0 + 664) + 1;
  if (v17 == *(void *)(v0 + 632))
  {
    (*(void (**)(void, uint64_t, uint64_t, void))(*(void *)(v0 + 472) + 56))(*(void *)(v0 + 576), 1, 1, *(void *)(v0 + 464));
LABEL_7:
    swift_bridgeObjectRelease();
    swift_release();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v26 = *(uint64_t (**)(void))(v0 + 8);
    return v26();
  }
  uint64_t v18 = *(void *)(v0 + 768);
  *(void *)(v0 + 664) = v17;
  *(void *)(v0 + 656) = v18;
  uint64_t v19 = *(void (**)(uint64_t, unint64_t, uint64_t))(v0 + 648);
  uint64_t v20 = *(void *)(v0 + 576);
  uint64_t v21 = *(void *)(v0 + 464);
  uint64_t v22 = *(void *)(v0 + 472);
  unint64_t v23 = *(void *)(v0 + 624)
      + ((*(unsigned __int8 *)(v0 + 776) + 32) & ~(unint64_t)*(unsigned __int8 *)(v0 + 776))
      + *(void *)(v0 + 640) * v17;
  *(void *)(v0 + 672) = (v22 + 16) & 0xFFFFFFFFFFFFLL | 0xE3BA000000000000;
  v19(v20, v23, v21);
  uint64_t v24 = *(void (**)(uint64_t, void, uint64_t, uint64_t))(v22 + 56);
  *(void *)(v0 + 680) = v24;
  *(void *)(v0 + 688) = (v22 + 56) & 0xFFFFFFFFFFFFLL | 0xA0D1000000000000;
  v24(v20, 0, 1, v21);
  unint64_t v25 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v22 + 48);
  *(void *)(v0 + 696) = v25;
  *(void *)(v0 + 704) = (v22 + 48) & 0xFFFFFFFFFFFFLL | 0x60F0000000000000;
  if (v25(v20, 1, v21) == 1) {
    goto LABEL_7;
  }
  unsigned __int8 v28 = *(void (**)(uint64_t, uint64_t, uint64_t))(v0 + 648);
  uint64_t v29 = *(void *)(v0 + 576);
  uint64_t v30 = *(void *)(v0 + 536);
  uint64_t v32 = *(void *)(v0 + 464);
  uint64_t v31 = *(void *)(v0 + 472);
  uint64_t v34 = *(void *)(v0 + 448);
  uint64_t v33 = *(void *)(v0 + 456);
  uint64_t v35 = *(void (**)(uint64_t, uint64_t, uint64_t))(v31 + 32);
  *(void *)(v0 + 712) = v35;
  *(void *)(v0 + 720) = (v31 + 32) & 0xFFFFFFFFFFFFLL | 0x48D8000000000000;
  v35(v30, v29, v32);
  uid_t v36 = getuid();
  sub_100DC5FC0(v36);
  v28(v33 + *(int *)(v34 + 20), v30, v32);
  uint64_t v37 = *(void *)(v0 + 608);
  return _swift_task_switch(sub_100AEDBD0, v37, 0);
}

uint64_t sub_100AEFA7C()
{
  uint64_t v44 = v0;
  uint64_t v1 = *(void (**)(uint64_t, uint64_t, uint64_t))(v0 + 648);
  uint64_t v2 = *(void *)(v0 + 568);
  uint64_t v3 = *(void *)(v0 + 536);
  uint64_t v4 = *(void *)(v0 + 488);
  uint64_t v5 = *(void *)(v0 + 464);
  uint64_t v42 = *(void (**)(uint64_t, uint64_t))(*(void *)(v0 + 472) + 8);
  v42(*(void *)(v0 + 504), v5);
  sub_10001DAB4(v2, &qword_101638CF0);
  v1(v4, v3, v5);
  swift_errorRetain();
  swift_errorRetain();
  uint64_t v6 = Logger.logObject.getter();
  os_log_type_t v7 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v6, v7))
  {
    uint64_t v8 = *(void *)(v0 + 488);
    uint64_t v9 = *(void *)(v0 + 464);
    uint64_t v40 = *(void *)(v0 + 456);
    uint64_t v41 = *(void *)(v0 + 536);
    uint64_t v10 = swift_slowAlloc();
    uint64_t v38 = (void *)swift_slowAlloc();
    uint64_t v39 = swift_slowAlloc();
    *(void *)(v0 + 200) = 1752392040;
    uint64_t v43 = v39;
    *(_DWORD *)uint64_t v10 = 141558531;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v10 + 12) = 2081;
    sub_100B22DA4((unint64_t *)&qword_101638B10, (void (*)(uint64_t))&type metadata accessor for UUID);
    uint64_t v11 = dispatch thunk of CustomStringConvertible.description.getter();
    *(void *)(v0 + 208) = sub_1008FA0F0(v11, v12, &v43);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    v42(v8, v9);
    *(_WORD *)(v10 + 22) = 2114;
    swift_errorRetain();
    uint64_t v13 = _swift_stdlib_bridgeErrorToNSError();
    *(void *)(v0 + 216) = v13;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *uint64_t v38 = v13;
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl((void *)&_mh_execute_header, v6, v7, "Could not read any attach events from ObservationService for beacon: %{private,mask.hash}s, %{public}@.", (uint8_t *)v10, 0x20u);
    sub_10000588C((uint64_t *)&unk_101638EA0);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    swift_errorRelease();
    sub_100B310AC(v40, (uint64_t (*)(void))type metadata accessor for BeaconIdentifier);
    v42(v41, v9);
  }
  else
  {
    uint64_t v14 = *(void *)(v0 + 536);
    uint64_t v15 = *(void *)(v0 + 488);
    uint64_t v17 = *(void *)(v0 + 456);
    uint64_t v16 = *(void *)(v0 + 464);

    swift_errorRelease();
    swift_errorRelease();
    v42(v15, v16);
    swift_errorRelease();
    sub_100B310AC(v17, (uint64_t (*)(void))type metadata accessor for BeaconIdentifier);
    v42(v14, v16);
  }
  uint64_t v18 = *(void *)(v0 + 664) + 1;
  if (v18 == *(void *)(v0 + 632))
  {
    (*(void (**)(void, uint64_t, uint64_t, void))(*(void *)(v0 + 472) + 56))(*(void *)(v0 + 576), 1, 1, *(void *)(v0 + 464));
LABEL_7:
    swift_bridgeObjectRelease();
    swift_release();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v26 = *(uint64_t (**)(void))(v0 + 8);
    return v26();
  }
  *(void *)(v0 + 664) = v18;
  *(void *)(v0 + 656) = 0;
  uint64_t v19 = *(void (**)(uint64_t, unint64_t, uint64_t))(v0 + 648);
  uint64_t v20 = *(void *)(v0 + 576);
  uint64_t v21 = *(void *)(v0 + 464);
  uint64_t v22 = *(void *)(v0 + 472);
  unint64_t v23 = *(void *)(v0 + 624)
      + ((*(unsigned __int8 *)(v0 + 776) + 32) & ~(unint64_t)*(unsigned __int8 *)(v0 + 776))
      + *(void *)(v0 + 640) * v18;
  *(void *)(v0 + 672) = (v22 + 16) & 0xFFFFFFFFFFFFLL | 0xE3BA000000000000;
  v19(v20, v23, v21);
  uint64_t v24 = *(void (**)(uint64_t, void, uint64_t, uint64_t))(v22 + 56);
  *(void *)(v0 + 680) = v24;
  *(void *)(v0 + 688) = (v22 + 56) & 0xFFFFFFFFFFFFLL | 0xA0D1000000000000;
  v24(v20, 0, 1, v21);
  unint64_t v25 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v22 + 48);
  *(void *)(v0 + 696) = v25;
  *(void *)(v0 + 704) = (v22 + 48) & 0xFFFFFFFFFFFFLL | 0x60F0000000000000;
  if (v25(v20, 1, v21) == 1) {
    goto LABEL_7;
  }
  unsigned __int8 v28 = *(void (**)(uint64_t, uint64_t, uint64_t))(v0 + 648);
  uint64_t v29 = *(void *)(v0 + 576);
  uint64_t v30 = *(void *)(v0 + 536);
  uint64_t v32 = *(void *)(v0 + 464);
  uint64_t v31 = *(void *)(v0 + 472);
  uint64_t v34 = *(void *)(v0 + 448);
  uint64_t v33 = *(void *)(v0 + 456);
  uint64_t v35 = *(void (**)(uint64_t, uint64_t, uint64_t))(v31 + 32);
  *(void *)(v0 + 712) = v35;
  *(void *)(v0 + 720) = (v31 + 32) & 0xFFFFFFFFFFFFLL | 0x48D8000000000000;
  v35(v30, v29, v32);
  uid_t v36 = getuid();
  sub_100DC5FC0(v36);
  v28(v33 + *(int *)(v34 + 20), v30, v32);
  uint64_t v37 = *(void *)(v0 + 608);
  return _swift_task_switch(sub_100AEDBD0, v37, 0);
}

uint64_t sub_100AF0128@<X0>(void *a1@<X8>)
{
  uint64_t v2 = sub_100AD2AD4();
  uint64_t v3 = sub_100A9E050(v2);
  uint64_t result = swift_bridgeObjectRelease();
  *a1 = v3;
  return result;
}

uint64_t sub_100AF0180@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = sub_10000588C(&qword_10163B9F0);
  __chkstk_darwin(v2 - 8);
  uint64_t v4 = (char *)&v14 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = sub_100ACF0EC();
  uint64_t v6 = v5[2];
  uint64_t v7 = type metadata accessor for OwnedBeaconRecord();
  uint64_t v8 = *(void *)(v7 - 8);
  if (v6)
  {
    sub_100B30D0C((uint64_t)v5 + ((*(unsigned __int8 *)(v8 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80)), (uint64_t)v4, (uint64_t (*)(void))type metadata accessor for OwnedBeaconRecord);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v8 + 56))(v4, 0, 1, v7);
  }
  else
  {
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v8 + 56))(v4, 1, 1, v7);
  }
  swift_bridgeObjectRelease();
  type metadata accessor for OwnedBeaconRecord();
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v8 + 48))(v4, 1, v7) == 1)
  {
    sub_10001DAB4((uint64_t)v4, &qword_10163B9F0);
    uint64_t v9 = type metadata accessor for UUID();
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 56))(a1, 1, 1, v9);
  }
  else
  {
    uint64_t v11 = &v4[*(int *)(v7 + 20)];
    uint64_t v12 = type metadata accessor for UUID();
    uint64_t v13 = *(void *)(v12 - 8);
    (*(void (**)(uint64_t, char *, uint64_t))(v13 + 16))(a1, v11, v12);
    sub_100B310AC((uint64_t)v4, (uint64_t (*)(void))type metadata accessor for OwnedBeaconRecord);
    return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(v13 + 56))(a1, 0, 1, v12);
  }
}

uint64_t sub_100AF03FC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = sub_10000588C(&qword_10164B478);
  __chkstk_darwin(v4 - 8);
  uint64_t v6 = (char *)&v19 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for UUID();
  uint64_t v8 = *(void *)(v7 - 8);
  __chkstk_darwin(v7);
  uint64_t v10 = (char *)&v19 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = sub_10000588C(&qword_10163BB20);
  __chkstk_darwin(v11 - 8);
  uint64_t v13 = (char *)&v19 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100AE75E0(a1, (uint64_t)v13);
  uint64_t v14 = type metadata accessor for OwnedBeaconGroup(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v14 - 8) + 48))(v13, 1, v14) == 1)
  {
    sub_10001DAB4((uint64_t)v13, &qword_10163BB20);
    long long v19 = 0u;
    long long v20 = 0u;
    uint64_t v21 = 0;
  }
  else
  {
    *((void *)&v20 + 1) = v14;
    uint64_t v21 = &off_1015C78A8;
    uint64_t v15 = sub_10001D958((uint64_t *)&v19);
    sub_100B30DB4((uint64_t)v13, (uint64_t)v15, type metadata accessor for OwnedBeaconGroup);
  }
  (*(void (**)(char *, uint64_t, uint64_t))(v8 + 16))(v10, a1, v7);
  if (*((void *)&v20 + 1))
  {
    (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v7);
    return sub_10001CEB0(&v19, a2);
  }
  else
  {
    sub_100AE86F4((uint64_t)v10, (uint64_t)v6);
    uint64_t v17 = type metadata accessor for SharedBeaconGroup();
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v17 - 8) + 48))(v6, 1, v17) == 1)
    {
      (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v7);
      sub_10001DAB4((uint64_t)v6, &qword_10164B478);
      *(_OWORD *)a2 = 0u;
      *(_OWORD *)(a2 + 16) = 0u;
      *(void *)(a2 + 32) = 0;
    }
    else
    {
      *(void *)(a2 + 24) = v17;
      *(void *)(a2 + 32) = &off_1015BEB88;
      uint64_t v18 = sub_10001D958((uint64_t *)a2);
      sub_100B30DB4((uint64_t)v6, (uint64_t)v18, (uint64_t (*)(void))type metadata accessor for SharedBeaconGroup);
      (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v7);
    }
    return sub_10001DAB4((uint64_t)&v19, (uint64_t *)&unk_10164E7C0);
  }
}

uint64_t sub_100AF0730(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2;
  uint64_t v6 = *v3;
  uint64_t v7 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v8 = *(void *)(v7 - 8);
  __chkstk_darwin(v7);
  uint64_t v10 = (char *)v18 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = type metadata accessor for DispatchQoS();
  uint64_t v12 = *(void *)(v11 - 8);
  __chkstk_darwin(v11);
  uint64_t v14 = (char *)v18 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18[0] = v3[8];
  uint64_t v15 = (void *)swift_allocObject();
  void v15[2] = v3;
  _OWORD v15[3] = a1;
  v15[4] = a2;
  v15[5] = v6;
  aBlock[4] = sub_100B5D0C4;
  void aBlock[5] = v15;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_1004B5480;
  aBlock[3] = &unk_1015E8EE8;
  uint64_t v16 = _Block_copy(aBlock);
  swift_retain();
  swift_retain();
  static DispatchQoS.unspecified.getter();
  v18[1] = _swiftEmptyArrayStorage;
  sub_100B22DA4((unint64_t *)&qword_10163B7E0, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
  sub_10000588C((uint64_t *)&unk_10163F350);
  sub_100062734((unint64_t *)&qword_10163B7F0, (uint64_t *)&unk_10163F350);
  dispatch thunk of SetAlgebra.init<A>(_:)();
  OS_dispatch_queue.async(group:qos:flags:execute:)();
  _Block_release(v16);
  (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v7);
  (*(void (**)(char *, uint64_t))(v12 + 8))(v14, v11);
  return swift_release();
}

uint64_t sub_100AF0A2C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v25 = a3;
  uint64_t v26 = a4;
  uint64_t v23 = a1;
  uint64_t v24 = a2;
  uint64_t v4 = type metadata accessor for OSSignpostID();
  uint64_t v27 = *(void *)(v4 - 8);
  uint64_t v28 = v4;
  __chkstk_darwin(v4);
  uint64_t v6 = (char *)&v22 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for Logger();
  uint64_t v8 = *(void *)(v7 - 8);
  __chkstk_darwin(v7);
  uint64_t v10 = (char *)&v22 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v22 = type metadata accessor for OSSignposter();
  uint64_t v11 = *(void *)(v22 - 8);
  __chkstk_darwin(v22);
  uint64_t v13 = (char *)&v22 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_101636F50 != -1) {
    swift_once();
  }
  uint64_t v14 = sub_100010324(v7, (uint64_t)qword_10170E9E8);
  (*(void (**)(char *, uint64_t, uint64_t))(v8 + 16))(v10, v14, v7);
  OSSignposter.init(logger:)();
  static OSSignpostID.exclusive.getter();
  uint64_t v15 = (uint8_t *)swift_slowAlloc();
  *(_WORD *)uint64_t v15 = 0;
  uint64_t v16 = OSSignposter.logHandle.getter();
  os_signpost_type_t v17 = static os_signpost_type_t.begin.getter();
  os_signpost_id_t v18 = OSSignpostID.rawValue.getter();
  _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v16, v17, v18, "duplicateReport", "", v15, 2u);
  sub_100AF0D3C(v23, v24, v25);
  os_signpost_type_t v19 = static os_signpost_type_t.end.getter();
  os_signpost_id_t v20 = OSSignpostID.rawValue.getter();
  _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v16, v19, v20, "duplicateReport", "", v15, 2u);

  swift_slowDealloc();
  (*(void (**)(char *, uint64_t))(v27 + 8))(v6, v28);
  return (*(uint64_t (**)(char *, uint64_t))(v11 + 8))(v13, v22);
}

uint64_t sub_100AF0D3C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v18 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v7 = (char *)&v16 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v17 = type metadata accessor for DispatchQoS();
  uint64_t v8 = *(void *)(v17 - 8);
  __chkstk_darwin(v17);
  uint64_t v10 = (char *)&v16 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = sub_100ACF5FC();
  uint64_t v12 = sub_100B50B24((uint64_t)v11);
  swift_bridgeObjectRelease();
  uint64_t v13 = (void *)swift_allocObject();
  v13[2] = a2;
  v13[3] = a3;
  v13[4] = v12;
  aBlock[4] = sub_100B5D0E8;
  void aBlock[5] = v13;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_1004B5480;
  aBlock[3] = &unk_1015E8F38;
  uint64_t v14 = _Block_copy(aBlock);
  swift_retain();
  static DispatchQoS.unspecified.getter();
  void aBlock[7] = _swiftEmptyArrayStorage;
  sub_100B22DA4((unint64_t *)&qword_10163B7E0, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
  sub_10000588C((uint64_t *)&unk_10163F350);
  sub_100062734((unint64_t *)&qword_10163B7F0, (uint64_t *)&unk_10163F350);
  dispatch thunk of SetAlgebra.init<A>(_:)();
  OS_dispatch_queue.async(group:qos:flags:execute:)();
  _Block_release(v14);
  (*(void (**)(char *, uint64_t))(v18 + 8))(v7, v5);
  (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v17);
  return swift_release();
}

id *sub_100AF1028()
{
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  swift_release();
  swift_release();

  swift_release();
  swift_release();

  swift_release();
  swift_release();
  swift_release();

  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v1 = (char *)v0 + OBJC_IVAR____TtC12searchpartyd11BeaconStore_transactionManager;
  uint64_t v2 = type metadata accessor for PressuredExitTransactionManager();
  (*(void (**)(char *, uint64_t))(*(void *)(v2 - 8) + 8))(v1, v2);

  sub_1000A1534(*(uint64_t *)((char *)v0 + OBJC_IVAR____TtC12searchpartyd11BeaconStore_resetHandler));
  sub_1000A1534(*(uint64_t *)((char *)v0 + OBJC_IVAR____TtC12searchpartyd11BeaconStore_beaconStoreChanged));
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();

  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v0;
}

uint64_t sub_100AF12E4()
{
  sub_100AF1028();

  return swift_deallocClassInstance();
}

uint64_t sub_100AF133C()
{
  return type metadata accessor for BeaconStore(0);
}

uint64_t type metadata accessor for BeaconStore(uint64_t a1)
{
  return sub_1000F4EA4(a1, qword_1016587E0);
}

uint64_t sub_100AF1364()
{
  uint64_t result = type metadata accessor for PressuredExitTransactionManager();
  if (v1 <= 0x3F) {
    return swift_updateClassMetadata2();
  }
  return result;
}

void *sub_100AF14A8(void *a1, void *a2, int *a3)
{
  int v5 = *(_DWORD *)(*((void *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v13 = *a2;
    *a1 = *a2;
    a1 = (void *)(v13 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v7 = type metadata accessor for UUID();
    (*(void (**)(void *, void *, uint64_t))(*(void *)(v7 - 8) + 16))(a1, a2, v7);
    uint64_t v8 = a3[6];
    *((unsigned char *)a1 + a3[5]) = *((unsigned char *)a2 + a3[5]);
    uint64_t v9 = (char *)a1 + v8;
    uint64_t v10 = (char *)a2 + v8;
    uint64_t v11 = type metadata accessor for Date();
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v11 - 8) + 16))(v9, v10, v11);
    uint64_t v12 = a3[8];
    *(_OWORD *)((char *)a1 + a3[7]) = *(_OWORD *)((char *)a2 + a3[7]);
    *((unsigned char *)a1 + v12) = *((unsigned char *)a2 + v12);
    *(void *)((char *)a1 + a3[9]) = *(void *)((char *)a2 + a3[9]);
    swift_bridgeObjectRetain();
  }
  return a1;
}

uint64_t sub_100AF15E4(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8))(a1, v4);
  uint64_t v5 = a1 + *(int *)(a2 + 24);
  uint64_t v6 = type metadata accessor for Date();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v6 - 8) + 8))(v5, v6);

  return swift_bridgeObjectRelease();
}

uint64_t sub_100AF16A0(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 16))(a1, a2, v6);
  uint64_t v7 = a3[6];
  *(unsigned char *)(a1 + a3[5]) = *(unsigned char *)(a2 + a3[5]);
  uint64_t v8 = a1 + v7;
  uint64_t v9 = a2 + v7;
  uint64_t v10 = type metadata accessor for Date();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 16))(v8, v9, v10);
  uint64_t v11 = a3[8];
  *(_OWORD *)(a1 + a3[7]) = *(_OWORD *)(a2 + a3[7]);
  *(unsigned char *)(a1 + v11) = *(unsigned char *)(a2 + v11);
  *(void *)(a1 + a3[9]) = *(void *)(a2 + a3[9]);
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t sub_100AF178C(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 24))(a1, a2, v6);
  *(unsigned char *)(a1 + a3[5]) = *(unsigned char *)(a2 + a3[5]);
  uint64_t v7 = a3[6];
  uint64_t v8 = a1 + v7;
  uint64_t v9 = a2 + v7;
  uint64_t v10 = type metadata accessor for Date();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 24))(v8, v9, v10);
  *(_OWORD *)(a1 + a3[7]) = *(_OWORD *)(a2 + a3[7]);
  *(unsigned char *)(a1 + a3[8]) = *(unsigned char *)(a2 + a3[8]);
  *(void *)(a1 + a3[9]) = *(void *)(a2 + a3[9]);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t sub_100AF188C(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 32))(a1, a2, v6);
  uint64_t v7 = a3[6];
  *(unsigned char *)(a1 + a3[5]) = *(unsigned char *)(a2 + a3[5]);
  uint64_t v8 = a1 + v7;
  uint64_t v9 = a2 + v7;
  uint64_t v10 = type metadata accessor for Date();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 32))(v8, v9, v10);
  uint64_t v11 = a3[8];
  *(_OWORD *)(a1 + a3[7]) = *(_OWORD *)(a2 + a3[7]);
  *(unsigned char *)(a1 + v11) = *(unsigned char *)(a2 + v11);
  *(void *)(a1 + a3[9]) = *(void *)(a2 + a3[9]);
  return a1;
}

uint64_t sub_100AF1974(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 40))(a1, a2, v6);
  uint64_t v7 = a3[6];
  *(unsigned char *)(a1 + a3[5]) = *(unsigned char *)(a2 + a3[5]);
  uint64_t v8 = a1 + v7;
  uint64_t v9 = a2 + v7;
  uint64_t v10 = type metadata accessor for Date();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 40))(v8, v9, v10);
  uint64_t v11 = a3[8];
  *(_OWORD *)(a1 + a3[7]) = *(_OWORD *)(a2 + a3[7]);
  *(unsigned char *)(a1 + v11) = *(unsigned char *)(a2 + v11);
  *(void *)(a1 + a3[9]) = *(void *)(a2 + a3[9]);
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t sub_100AF1A64(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_100AF1A78);
}

uint64_t sub_100AF1A78(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for UUID();
  uint64_t v7 = *(void *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == a2)
  {
    uint64_t v8 = v6;
    uint64_t v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    uint64_t v10 = a1;
LABEL_5:
    return v9(v10, a2, v8);
  }
  uint64_t v11 = type metadata accessor for Date();
  uint64_t v12 = *(void *)(v11 - 8);
  if (*(_DWORD *)(v12 + 84) == a2)
  {
    uint64_t v8 = v11;
    uint64_t v10 = a1 + *(int *)(a3 + 24);
    uint64_t v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v12 + 48);
    goto LABEL_5;
  }
  unint64_t v14 = *(void *)(a1 + *(int *)(a3 + 36));
  if (v14 >= 0xFFFFFFFF) {
    LODWORD(v14) = -1;
  }
  int v15 = v14 - 1;
  if (v15 < 0) {
    int v15 = -1;
  }
  return (v15 + 1);
}

uint64_t sub_100AF1B98(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_100AF1BAC);
}

uint64_t sub_100AF1BAC(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v8 = type metadata accessor for UUID();
  uint64_t v9 = *(void *)(v8 - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    uint64_t v10 = v8;
    uint64_t v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    uint64_t v12 = a1;
  }
  else
  {
    uint64_t result = type metadata accessor for Date();
    uint64_t v14 = *(void *)(result - 8);
    if (*(_DWORD *)(v14 + 84) != a3)
    {
      *(void *)(a1 + *(int *)(a4 + 36)) = a2;
      return result;
    }
    uint64_t v10 = result;
    uint64_t v12 = a1 + *(int *)(a4 + 24);
    uint64_t v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v14 + 56);
  }

  return v11(v12, a2, a2, v10);
}

uint64_t type metadata accessor for BeaconStatus(uint64_t a1)
{
  return sub_1000F4EA4(a1, qword_101659110);
}

uint64_t sub_100AF1CDC()
{
  uint64_t result = type metadata accessor for UUID();
  if (v1 <= 0x3F)
  {
    uint64_t result = type metadata accessor for Date();
    if (v2 <= 0x3F)
    {
      swift_initStructMetadata();
      return 0;
    }
  }
  return result;
}

uint64_t sub_100AF1DCC()
{
  return sub_100B22DA4(&qword_101659158, (void (*)(uint64_t))type metadata accessor for BeaconStatus);
}

uint64_t sub_100AF1E14()
{
  return sub_100AADCEC();
}

uint64_t sub_100AF1E38()
{
  type metadata accessor for Transaction();
  swift_retain();
  static Transaction.asyncTask(name:block:)();

  return swift_release();
}

uint64_t sub_100AF1EAC(uint64_t a1)
{
  *(void *)(a1 + OBJC_IVAR____TtC12searchpartyd11BeaconStore_cachedOwnedBeaconRecords) = 0;
  swift_bridgeObjectRelease();
  *(void *)(a1 + OBJC_IVAR____TtC12searchpartyd11BeaconStore_cachedSharedBeaconRecords) = 0;
  swift_bridgeObjectRelease();
  unint64_t v2 = (void *)(a1 + OBJC_IVAR____TtC12searchpartyd11BeaconStore_beaconNamingRecordCache);
  swift_beginAccess();
  *unint64_t v2 = &_swiftEmptyDictionarySingleton;
  swift_bridgeObjectRelease();
  uint64_t v3 = *(void *)(a1 + OBJC_IVAR____TtC12searchpartyd11BeaconStore_sharedBeaconUUIDMapper);
  swift_beginAccess();
  *(void *)(v3 + 16) = &_swiftEmptyDictionarySingleton;
  swift_bridgeObjectRelease();
  swift_beginAccess();
  *(void *)(v3 + 24) = &_swiftEmptyDictionarySingleton;
  return swift_bridgeObjectRelease();
}

uint64_t sub_100AF1F8C()
{
  return _swift_task_switch(sub_100AF1FA8, 0, 0);
}

uint64_t sub_100AF1FA8()
{
  if (qword_1016375E8 != -1) {
    swift_once();
  }
  swift_beginAccess();
  uint64_t result = sub_10001D074((uint64_t)&xmmword_10166E8F0, v0 + 56, (uint64_t *)&unk_101638D30);
  if (*(void *)(v0 + 80))
  {
    sub_10001CEB0((long long *)(v0 + 56), v0 + 16);
    sub_10001CD44((void *)(v0 + 16), *(void *)(v0 + 40));
    uint64_t v3 = (uint64_t (__cdecl *)())((char *)&dword_1016391E0 + dword_1016391E0);
    unint64_t v2 = (void *)swift_task_alloc();
    *(void *)(v0 + 120) = v2;
    *unint64_t v2 = v0;
    v2[1] = sub_100AF20E4;
    return v3();
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_100AF20E4(uint64_t a1)
{
  *(void *)(*(void *)v1 + 128) = a1;
  swift_task_dealloc();
  return _swift_task_switch(sub_100AF21E4, 0, 0);
}

uint64_t sub_100AF21E4()
{
  uint64_t v1 = v0 + 16;
  if (*(void *)(v0 + 128))
  {
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v1);
    sub_1009A00D4();
    swift_release();
  }
  else
  {
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v1);
  }
  unint64_t v2 = *(uint64_t (**)(void))(v0 + 8);
  return v2();
}

uint64_t sub_100AF2260()
{
  return _swift_task_switch(sub_100AF227C, 0, 0);
}

uint64_t sub_100AF227C()
{
  if (qword_1016375E8 != -1) {
    swift_once();
  }
  swift_beginAccess();
  uint64_t result = sub_10001D074((uint64_t)&xmmword_10166E8F0, v0 + 56, (uint64_t *)&unk_101638D30);
  if (*(void *)(v0 + 80))
  {
    sub_10001CEB0((long long *)(v0 + 56), v0 + 16);
    sub_10001CD44((void *)(v0 + 16), *(void *)(v0 + 40));
    uint64_t v3 = (uint64_t (__cdecl *)())((char *)&dword_1016391F8 + dword_1016391F8);
    unint64_t v2 = (void *)swift_task_alloc();
    *(void *)(v0 + 120) = v2;
    *unint64_t v2 = v0;
    v2[1] = sub_100AF23B8;
    return v3();
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_100AF23B8(uint64_t a1)
{
  *(void *)(*(void *)v1 + 128) = a1;
  swift_task_dealloc();
  return _swift_task_switch(sub_100AF24B8, 0, 0);
}

uint64_t sub_100AF24B8()
{
  uint64_t v1 = *(void *)(v0 + 128);
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v0 + 16);
  if (v1)
  {
    uint64_t v2 = *(void *)(v0 + 128);
    return _swift_task_switch(sub_100AF2558, v2, 0);
  }
  else
  {
    uint64_t v3 = *(uint64_t (**)(void))(v0 + 8);
    return v3();
  }
}

uint64_t sub_100AF2558()
{
  uint64_t v1 = swift_allocObject();
  *(void *)(v0 + 136) = v1;
  swift_weakInit();
  uint64_t v5 = (uint64_t (*)(uint64_t, void *, uint64_t, uint64_t))((char *)&async function pointer to dispatch thunk of WorkItemQueue.enqueueAndAwaitResult<A>(_:)
                                                                 + async function pointer to dispatch thunk of WorkItemQueue.enqueueAndAwaitResult<A>(_:));
  uint64_t v2 = (void *)swift_task_alloc();
  *(void *)(v0 + 144) = v2;
  uint64_t v3 = sub_10000588C((uint64_t *)&unk_101638DC0);
  *uint64_t v2 = v0;
  v2[1] = sub_100AF2668;
  return v5(v0 + 152, &unk_1016591A8, v1, v3);
}

uint64_t sub_100AF2668()
{
  uint64_t v2 = *v1;
  swift_task_dealloc();
  if (v0)
  {
    swift_errorRelease();
    swift_release();
    uint64_t v3 = *(void *)(v2 + 128);
    uint64_t v4 = sub_100B6427C;
  }
  else
  {
    swift_release();
    uint64_t v3 = *(void *)(v2 + 128);
    uint64_t v4 = sub_100AF27B0;
  }
  return _swift_task_switch(v4, v3, 0);
}

uint64_t sub_100AF27B0()
{
  return _swift_task_switch(sub_100AF27CC, 0, 0);
}

uint64_t sub_100AF27CC()
{
  swift_release();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_100AF282C(uint64_t a1, uint64_t a2)
{
  uint64_t v18 = a2;
  uint64_t v19 = a1;
  uint64_t v2 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v21 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  uint64_t v4 = (char *)&v17 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v20 = type metadata accessor for DispatchQoS();
  uint64_t v5 = *(void *)(v20 - 8);
  __chkstk_darwin(v20);
  uint64_t v7 = (char *)&v17 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for DispatchQoS.QoSClass();
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  uint64_t v11 = (char *)&v17 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10001D4B0(0, (unint64_t *)&qword_1016376E0);
  (*(void (**)(char *, void, uint64_t))(v9 + 104))(v11, enum case for DispatchQoS.QoSClass.default(_:), v8);
  uint64_t v12 = (void *)static OS_dispatch_queue.global(qos:)();
  (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v8);
  uint64_t v13 = swift_allocObject();
  uint64_t v14 = v19;
  *(void *)(v13 + 16) = v18;
  *(void *)(v13 + 24) = v14;
  aBlock[4] = sub_100B51684;
  void aBlock[5] = v13;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_1004B5480;
  aBlock[3] = &unk_1015E74F8;
  int v15 = _Block_copy(aBlock);
  swift_retain();
  swift_retain();
  static DispatchQoS.unspecified.getter();
  void aBlock[7] = _swiftEmptyArrayStorage;
  sub_100B22DA4((unint64_t *)&qword_10163B7E0, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
  sub_10000588C((uint64_t *)&unk_10163F350);
  sub_100062734((unint64_t *)&qword_10163B7F0, (uint64_t *)&unk_10163F350);
  dispatch thunk of SetAlgebra.init<A>(_:)();
  OS_dispatch_queue.async(group:qos:flags:execute:)();
  _Block_release(v15);

  (*(void (**)(char *, uint64_t))(v21 + 8))(v4, v2);
  (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v20);
  return swift_release();
}

void sub_100AF2BE0()
{
  uint64_t v0 = (__CFString *)String._bridgeToObjectiveC()();
  sub_100B50F60(v0);
  Transaction.capture()();
}

void sub_100AF2C44()
{
  static os_log_type_t.default.getter();
  if (qword_101636B08 != -1) {
    swift_once();
  }
  os_log(_:dso:log:_:_:)();
  CFStringRef v0 = (const __CFString *)SPPersistentConnectionChangedNotification;

  sub_100B50F60(v0);
}

uint64_t sub_100AF2CE4()
{
  return _swift_task_switch(sub_100AF2D00, 0, 0);
}

uint64_t sub_100AF2D00()
{
  if (qword_1016375E8 != -1) {
    swift_once();
  }
  swift_beginAccess();
  uint64_t result = sub_10001D074((uint64_t)&xmmword_10166E8F0, v0 + 56, (uint64_t *)&unk_101638D30);
  if (*(void *)(v0 + 80))
  {
    sub_10001CEB0((long long *)(v0 + 56), v0 + 16);
    sub_10001CD44((void *)(v0 + 16), *(void *)(v0 + 40));
    uint64_t v3 = (uint64_t (__cdecl *)())((char *)&dword_1016391E0 + dword_1016391E0);
    uint64_t v2 = (void *)swift_task_alloc();
    *(void *)(v0 + 120) = v2;
    *uint64_t v2 = v0;
    v2[1] = sub_100AF2E3C;
    return v3();
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_100AF2E3C(uint64_t a1)
{
  *(void *)(*(void *)v1 + 128) = a1;
  swift_task_dealloc();
  return _swift_task_switch(sub_100AF2F3C, 0, 0);
}

uint64_t sub_100AF2F3C()
{
  uint64_t v1 = v0 + 16;
  if (*(void *)(v0 + 128))
  {
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v1);
    sub_1009A00F4();
    swift_release();
  }
  else
  {
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v1);
  }
  uint64_t v2 = *(uint64_t (**)(void))(v0 + 8);
  return v2();
}

uint64_t sub_100AF2FB8()
{
  return _swift_task_switch(sub_100AF2FD4, 0, 0);
}

uint64_t sub_100AF2FD4()
{
  if (qword_1016375E8 != -1) {
    swift_once();
  }
  swift_beginAccess();
  uint64_t result = sub_10001D074((uint64_t)&xmmword_10166E8F0, v0 + 56, (uint64_t *)&unk_101638D30);
  if (*(void *)(v0 + 80))
  {
    sub_10001CEB0((long long *)(v0 + 56), v0 + 16);
    sub_10001CD44((void *)(v0 + 16), *(void *)(v0 + 40));
    uint64_t v3 = (uint64_t (__cdecl *)())((char *)&dword_1016391E0 + dword_1016391E0);
    uint64_t v2 = (void *)swift_task_alloc();
    *(void *)(v0 + 120) = v2;
    *uint64_t v2 = v0;
    v2[1] = sub_100AF3110;
    return v3();
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_100AF3110(uint64_t a1)
{
  *(void *)(*(void *)v1 + 128) = a1;
  swift_task_dealloc();
  return _swift_task_switch(sub_100B64280, 0, 0);
}

void sub_100AF3210()
{
  if (qword_101636EE0 != -1) {
    swift_once();
  }
  uint64_t v0 = type metadata accessor for Logger();
  sub_100010324(v0, (uint64_t)qword_10170E7C8);
  uint64_t v1 = Logger.logObject.getter();
  os_log_type_t v2 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v1, v2))
  {
    uint64_t v3 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v3 = 0;
    _os_log_impl((void *)&_mh_execute_header, v1, v2, "Posting SPSeparationMonitoringSafeLocationsChanged Darwin notification from BeaconStore", v3, 2u);
    swift_slowDealloc();
  }

  CFStringRef v4 = (const __CFString *)SPSeparationMonitoringSafeLocationsChangedNotification;

  sub_100B50F60(v4);
}

uint64_t sub_100AF3304(uint64_t a1)
{
  uint64_t v3 = sub_10000588C(&qword_101649E40);
  __chkstk_darwin(v3 - 8);
  uint64_t v76 = (char *)&v69 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v83 = type metadata accessor for BeaconStoreFileRecord();
  uint64_t v71 = *(void *)(v83 - 8);
  __chkstk_darwin(v83);
  uint64_t v84 = (char *)&v69 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v91 = type metadata accessor for URL();
  uint64_t v79 = *(void *)(v91 - 8);
  uint64_t v6 = __chkstk_darwin(v91);
  uint64_t v75 = (char *)&v69 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  uint64_t v89 = (void (**)(char *, uint64_t, uint64_t))((char *)&v69 - v8);
  uint64_t v88 = type metadata accessor for BeaconEstimatedLocation();
  uint64_t v70 = *(void *)(v88 - 8);
  __chkstk_darwin(v88);
  uint64_t v90 = (char *)&v69 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = type metadata accessor for Date();
  uint64_t v74 = *(void *)(v10 - 8);
  __chkstk_darwin(v10);
  uint64_t v12 = (char *)&v69 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_101636CD8 != -1) {
    swift_once();
  }
  OS_dispatch_queue.sync<A>(execute:)();
  sub_1010ABCDC((uint64_t)v92);
  swift_bridgeObjectRelease();
  Date.init(timeIntervalSinceNow:)();
  *(void *)&long long v87 = *(void *)(v1 + 160);
  uint64_t v13 = (void (**)(void (**)(char *, uint64_t, uint64_t), uint64_t))sub_100B6E250();
  uint64_t v15 = v14;
  __chkstk_darwin(v13);
  *(&v69 - 2) = (uint64_t)v12;
  swift_bridgeObjectRetain();
  uint64_t v85 = v13;
  uint64_t v16 = sub_1000A48D4((uint64_t (*)(char *))sub_100B5EC3C, &v69 - 4, (uint64_t)v13);
  uint64_t v86 = a1;
  uint64_t v17 = v16;
  LODWORD(v73) = static os_log_type_t.default.getter();
  if (qword_101637260 != -1) {
    swift_once();
  }
  uint64_t v72 = qword_10170EFB8;
  uint64_t v82 = sub_10000588C((uint64_t *)&unk_10163AD00);
  uint64_t v18 = swift_allocObject();
  *(_OWORD *)(v18 + 16) = xmmword_10134BF90;
  sub_100B22DA4((unint64_t *)&qword_101638DA0, (void (*)(uint64_t))&type metadata accessor for Date);
  uint64_t v19 = dispatch thunk of CustomStringConvertible.description.getter();
  uint64_t v21 = v20;
  *(void *)(v18 + 56) = &type metadata for String;
  unint64_t v22 = sub_10000B4CC();
  *(void *)(v18 + 64) = v22;
  *(void *)(v18 + 32) = v19;
  *(void *)(v18 + 40) = v21;
  uint64_t v23 = UUID.uuidString.getter();
  *(void *)(v18 + 96) = &type metadata for String;
  *(void *)(v18 + 104) = v22;
  unint64_t v81 = v22;
  *(void *)(v18 + 72) = v23;
  *(void *)(v18 + 80) = v24;
  uint64_t v25 = *(void *)(v17 + 16);
  uint64_t v26 = *(void *)(v15 + 16);
  BOOL v27 = __OFADD__(v25, v26);
  uint64_t v28 = v25 + v26;
  if (v27)
  {
    __break(1u);
LABEL_27:
    __break(1u);
  }
  uint64_t v29 = v17;
  uint64_t v80 = v15;
  *(void *)(v18 + 136) = &type metadata for Int;
  *(void *)(v18 + 144) = &protocol witness table for Int;
  *(void *)(v18 + 112) = v28;
  uint64_t v30 = v85[2];
  swift_bridgeObjectRelease();
  if (__OFADD__(v30, v26)) {
    goto LABEL_27;
  }
  *(void *)(v18 + 176) = &type metadata for Int;
  *(void *)(v18 + 184) = &protocol witness table for Int;
  *(void *)(v18 + 152) = (char *)v30 + v26;
  os_log(_:dso:log:_:_:)();
  swift_bridgeObjectRelease();
  uint64_t v31 = *(void *)(v29 + 16);
  uint64_t v77 = v12;
  uint64_t v78 = v10;
  if (v31)
  {
    unint64_t v32 = (*(unsigned __int8 *)(v70 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v70 + 80);
    uint64_t v73 = v29;
    uint64_t v33 = v29 + v32;
    uint64_t v34 = *(void *)(v70 + 72);
    uint64_t v85 = (void (**)(void (**)(char *, uint64_t, uint64_t), uint64_t))(v79 + 8);
    uint64_t v86 = v34;
    uint64_t v35 = (uint64_t)v90;
    uint64_t v36 = v91;
    do
    {
      sub_100B30D0C(v33, v35, (uint64_t (*)(void))type metadata accessor for BeaconEstimatedLocation);
      uint64_t v37 = *(int *)(v88 + 20);
      if (qword_101637030 != -1) {
        swift_once();
      }
      uint64_t v39 = v35 + v37;
      sub_100010324(v36, (uint64_t)qword_10170EB70);
      UUID.uuidString.getter();
      uint64_t v40 = v89;
      URL.appendingPathComponent(_:)();
      swift_bridgeObjectRelease();
      __chkstk_darwin(v41);
      *(&v69 - 4) = v42;
      *(&v69 - 3) = v39;
      *(&v69 - 2) = (uint64_t)v40;
      OS_dispatch_queue.sync<A>(execute:)();
      uint64_t v43 = v40;
      uint64_t v35 = (uint64_t)v90;
      (*v85)(v43, v36);
      sub_100B310AC(v35, (uint64_t (*)(void))type metadata accessor for BeaconEstimatedLocation);
      v33 += v86;
      --v31;
    }
    while (v31);
    swift_bridgeObjectRelease();
    uint64_t v12 = v77;
    uint64_t v10 = v78;
  }
  else
  {
    swift_bridgeObjectRelease();
  }
  uint64_t v44 = *(void *)(v80 + 16);
  uint64_t v45 = (uint64_t)v76;
  uint64_t v47 = v83;
  uint64_t v46 = (uint64_t)v84;
  uint64_t v48 = v91;
  uint64_t v49 = v75;
  if (v44)
  {
    uint64_t v50 = v80 + ((*(unsigned __int8 *)(v71 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v71 + 80));
    uint64_t v51 = *(char **)(v71 + 72);
    uint64_t v52 = (unsigned int (**)(uint64_t, uint64_t, uint64_t))(v79 + 48);
    uint64_t v88 = v79 + 8;
    uint64_t v89 = (void (**)(char *, uint64_t, uint64_t))(v79 + 32);
    long long v87 = xmmword_101342130;
    uint64_t v90 = v51;
    do
    {
      sub_100B30D0C(v50, v46, (uint64_t (*)(void))type metadata accessor for BeaconStoreFileRecord);
      sub_10001D074(v46 + *(int *)(v47 + 20), v45, &qword_101649E40);
      if ((*v52)(v45, 1, v48) == 1)
      {
        sub_10001DAB4(v45, &qword_101649E40);
      }
      else
      {
        (*v89)(v49, v45, v48);
        id v53 = [self defaultManager];
        uint64_t v54 = v49;
        URL._bridgeToObjectiveC()(v55);
        uint64_t v57 = v56;
        id v92 = 0;
        uint64_t v58 = v48;
        unsigned __int8 v59 = [v53 removeItemAtURL:v56 error:&v92];

        if (v59)
        {
          uint64_t v60 = *(void (**)(char *, uint64_t))v88;
          id v61 = v92;
          v60(v54, v58);
        }
        else
        {
          id v62 = v92;
          uint64_t v63 = (void *)_convertNSErrorToError(_:)();

          swift_willThrow();
          static os_log_type_t.default.getter();
          uint64_t v64 = swift_allocObject();
          *(_OWORD *)(v64 + 16) = v87;
          id v92 = v63;
          swift_errorRetain();
          sub_10000588C(&qword_101638D40);
          uint64_t v65 = String.init<A>(describing:)();
          unint64_t v66 = v81;
          *(void *)(v64 + 56) = &type metadata for String;
          *(void *)(v64 + 64) = v66;
          *(void *)(v64 + 32) = v65;
          *(void *)(v64 + 40) = v67;
          os_log(_:dso:log:_:_:)();
          uint64_t v47 = v83;
          swift_bridgeObjectRelease();
          swift_errorRelease();
          (*(void (**)(char *, uint64_t))v88)(v54, v58);
        }
        uint64_t v46 = (uint64_t)v84;
        uint64_t v48 = v58;
        uint64_t v49 = v54;
        uint64_t v51 = v90;
      }
      sub_100B310AC(v46, (uint64_t (*)(void))type metadata accessor for BeaconStoreFileRecord);
      v50 += (uint64_t)v51;
      --v44;
    }
    while (v44);
    swift_bridgeObjectRelease();
    uint64_t v12 = v77;
    uint64_t v10 = v78;
  }
  else
  {
    swift_bridgeObjectRelease();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v74 + 8))(v12, v10);
}

uint64_t sub_100AF3CEC(uint64_t a1)
{
  uint64_t v42 = type metadata accessor for URL();
  uint64_t v33 = *(void *)(v42 - 8);
  __chkstk_darwin(v42);
  uint64_t v41 = (char *)&v32 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v40 = type metadata accessor for LocationProvider();
  uint64_t v32 = *(void *)(v40 - 8);
  __chkstk_darwin(v40);
  uint64_t v43 = (char *)&v32 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = type metadata accessor for Date();
  uint64_t v37 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v7 = (char *)&v32 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_101636CD8 != -1) {
    swift_once();
  }
  OS_dispatch_queue.sync<A>(execute:)();
  sub_1010ABF18(v44);
  swift_bridgeObjectRelease();
  Date.init(timeIntervalSinceNow:)();
  uint64_t v34 = v1;
  uint64_t v39 = *(void *)(v1 + 160);
  uint64_t v8 = sub_100B6EE9C(a1);
  __chkstk_darwin(v8);
  *(&v32 - 2) = (uint64_t)v7;
  swift_bridgeObjectRetain();
  uint64_t v9 = sub_1000A5378((uint64_t (*)(char *))sub_100B5B32C, &v32 - 4, (uint64_t)v8);
  LODWORD(v38) = static os_log_type_t.default.getter();
  if (qword_101637260 != -1) {
    swift_once();
  }
  uint64_t v35 = qword_10170EFB8;
  sub_10000588C((uint64_t *)&unk_10163AD00);
  uint64_t v10 = swift_allocObject();
  *(_OWORD *)(v10 + 16) = xmmword_10134BF90;
  sub_100B22DA4((unint64_t *)&qword_101638DA0, (void (*)(uint64_t))&type metadata accessor for Date);
  uint64_t v36 = v7;
  uint64_t v11 = dispatch thunk of CustomStringConvertible.description.getter();
  uint64_t v13 = v12;
  *(void *)(v10 + 56) = &type metadata for String;
  unint64_t v14 = sub_10000B4CC();
  *(void *)(v10 + 64) = v14;
  *(void *)(v10 + 32) = v11;
  *(void *)(v10 + 40) = v13;
  uint64_t v15 = UUID.uuidString.getter();
  *(void *)(v10 + 96) = &type metadata for String;
  *(void *)(v10 + 104) = v14;
  *(void *)(v10 + 72) = v15;
  *(void *)(v10 + 80) = v16;
  uint64_t v17 = *(void *)(v9 + 16);
  *(void *)(v10 + 136) = &type metadata for Int;
  *(void *)(v10 + 144) = &protocol witness table for Int;
  *(void *)(v10 + 112) = v17;
  uint64_t v18 = v8[2];
  swift_bridgeObjectRelease();
  *(void *)(v10 + 176) = &type metadata for Int;
  *(void *)(v10 + 184) = &protocol witness table for Int;
  *(void *)(v10 + 152) = v18;
  os_log(_:dso:log:_:_:)();
  swift_bridgeObjectRelease();
  uint64_t v19 = *(void *)(v9 + 16);
  uint64_t v20 = v9;
  if (v19)
  {
    uint64_t v35 = v5;
    uint64_t v21 = v9 + ((*(unsigned __int8 *)(v32 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v32 + 80));
    uint64_t v38 = *(void *)(v32 + 72);
    unint64_t v22 = (void (**)(char *, uint64_t))(v33 + 8);
    uint64_t v33 = v20;
    swift_bridgeObjectRetain();
    uint64_t v24 = v42;
    uint64_t v23 = (uint64_t)v43;
    uint64_t v25 = v41;
    do
    {
      sub_100B30D0C(v21, v23, (uint64_t (*)(void))type metadata accessor for LocationProvider);
      if (qword_101637638 != -1) {
        swift_once();
      }
      sub_100010324(v24, (uint64_t)qword_10170F7E8);
      UUID.uuidString.getter();
      URL.appendingPathComponent(_:)();
      swift_bridgeObjectRelease();
      __chkstk_darwin(v27);
      uint64_t v28 = v43;
      *(&v32 - 4) = v29;
      *(&v32 - 3) = (uint64_t)v28;
      *(&v32 - 2) = (uint64_t)v25;
      OS_dispatch_queue.sync<A>(execute:)();
      uint64_t v23 = (uint64_t)v43;
      (*v22)(v25, v24);
      sub_100B310AC(v23, (uint64_t (*)(void))type metadata accessor for LocationProvider);
      v21 += v38;
      --v19;
    }
    while (v19);
    swift_bridgeObjectRelease_n();
    sub_100A9E7EC(19);
    uint64_t v30 = v35;
  }
  else
  {
    swift_bridgeObjectRelease();
    uint64_t v30 = v5;
  }
  return (*(uint64_t (**)(char *, uint64_t))(v37 + 8))(v36, v30);
}

uint64_t sub_100AF42B8()
{
  uint64_t v0 = type metadata accessor for UUID();
  sub_10001E384(v0, qword_1016586D0);
  sub_100010324(v0, (uint64_t)qword_1016586D0);
  return UUID.init()();
}

void sub_100AF4304(uint64_t a1, NSObject *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7 = sub_10000588C(&qword_10164B300);
  __chkstk_darwin(v7);
  uint64_t v9 = (void *)((char *)v23 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0));
  sub_10001D074(a1, (uint64_t)v9, &qword_10164B300);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v10 = (void *)(a4 + 16);
    uint64_t v11 = *v9;
    static os_log_type_t.error.getter();
    if (qword_101637260 != -1) {
      swift_once();
    }
    sub_10000588C((uint64_t *)&unk_10163AD00);
    uint64_t v12 = swift_allocObject();
    *(_OWORD *)(v12 + 16) = xmmword_101347BA0;
    type metadata accessor for BeaconNamingRecord();
    uint64_t v13 = UUID.uuidString.getter();
    uint64_t v15 = v14;
    *(void *)(v12 + 56) = &type metadata for String;
    unint64_t v16 = sub_10000B4CC();
    *(void *)(v12 + 64) = v16;
    *(void *)(v12 + 32) = v13;
    *(void *)(v12 + 40) = v15;
    v23[1] = v11;
    swift_errorRetain();
    sub_10000588C(&qword_101638D40);
    uint64_t v17 = String.init<A>(describing:)();
    *(void *)(v12 + 96) = &type metadata for String;
    *(void *)(v12 + 104) = v16;
    *(void *)(v12 + 72) = v17;
    *(void *)(v12 + 80) = v18;
    os_log(_:dso:log:_:_:)();
    swift_bridgeObjectRelease();
    swift_beginAccess();
    *uint64_t v10 = v11;
    swift_errorRelease();
  }
  else
  {
    static os_log_type_t.default.getter();
    if (qword_101637260 != -1) {
      swift_once();
    }
    sub_10000588C((uint64_t *)&unk_10163AD00);
    uint64_t v19 = swift_allocObject();
    *(_OWORD *)(v19 + 16) = xmmword_101342130;
    type metadata accessor for BeaconNamingRecord();
    uint64_t v20 = UUID.uuidString.getter();
    uint64_t v22 = v21;
    *(void *)(v19 + 56) = &type metadata for String;
    *(void *)(v19 + 64) = sub_10000B4CC();
    *(void *)(v19 + 32) = v20;
    *(void *)(v19 + 40) = v22;
    os_log(_:dso:log:_:_:)();
    swift_bridgeObjectRelease();
    sub_10001DAB4((uint64_t)v9, &qword_10164B300);
  }
  dispatch_group_leave(a2);
}

void sub_100AF45DC(uint64_t a1, NSObject *a2, uint64_t a3)
{
  uint64_t v6 = sub_10000588C(&qword_1016592D0);
  __chkstk_darwin(v6);
  uint64_t v8 = (void *)((char *)v15 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0));
  sub_10001D074(a1, (uint64_t)v8, &qword_1016592D0);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v9 = (void *)(a3 + 16);
    uint64_t v10 = *v8;
    static os_log_type_t.error.getter();
    if (qword_101637308 != -1) {
      swift_once();
    }
    sub_10000588C((uint64_t *)&unk_10163AD00);
    uint64_t v11 = swift_allocObject();
    *(_OWORD *)(v11 + 16) = xmmword_101342130;
    v15[1] = v10;
    swift_errorRetain();
    sub_10000588C(&qword_101638D40);
    uint64_t v12 = String.init<A>(describing:)();
    uint64_t v14 = v13;
    *(void *)(v11 + 56) = &type metadata for String;
    *(void *)(v11 + 64) = sub_10000B4CC();
    *(void *)(v11 + 32) = v12;
    *(void *)(v11 + 40) = v14;
    os_log(_:dso:log:_:_:)();
    swift_bridgeObjectRelease();
    swift_beginAccess();
    *uint64_t v9 = v10;
    swift_errorRelease();
  }
  else
  {
    static os_log_type_t.info.getter();
    if (qword_101637308 != -1) {
      swift_once();
    }
    os_log(_:dso:log:_:_:)();
    sub_10001DAB4((uint64_t)v8, &qword_1016592D0);
  }
  dispatch_group_leave(a2);
}

uint64_t sub_100AF4824(void (*a1)(uint64_t *, char *))
{
  uint64_t v2 = sub_10000588C(&qword_101638CF0);
  __chkstk_darwin(v2 - 8);
  uint64_t v4 = (char *)&v12 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = sub_10000588C((uint64_t *)&unk_101656900);
  __chkstk_darwin(v5);
  uint64_t v7 = (uint64_t *)((char *)&v12 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0));
  sub_10009FD9C();
  uint64_t v8 = swift_allocError();
  *uint64_t v9 = 13;
  *uint64_t v7 = v8;
  swift_storeEnumTagMultiPayload();
  uint64_t v10 = type metadata accessor for UUID();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 56))(v4, 1, 1, v10);
  a1(v7, v4);
  sub_10001DAB4((uint64_t)v4, &qword_101638CF0);
  return sub_10001DAB4((uint64_t)v7, (uint64_t *)&unk_101656900);
}

uint64_t sub_100AF49A4(void (*a1)(void *, char *), uint64_t a2, uint64_t a3)
{
  uint64_t v5 = sub_10000588C(&qword_101638CF0);
  __chkstk_darwin(v5 - 8);
  uint64_t v7 = (char *)&v13 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = sub_10000588C((uint64_t *)&unk_101656900);
  __chkstk_darwin(v8);
  uint64_t v10 = (uint64_t *)((char *)&v13 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0));
  *uint64_t v10 = a3;
  swift_storeEnumTagMultiPayload();
  uint64_t v11 = type metadata accessor for UUID();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v11 - 8) + 56))(v7, 1, 1, v11);
  swift_errorRetain();
  a1(v10, v7);
  sub_10001DAB4((uint64_t)v7, &qword_101638CF0);
  return sub_10001DAB4((uint64_t)v10, (uint64_t *)&unk_101656900);
}

void sub_100AF4B08(uint64_t a1, NSObject *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v42 = a4;
  dispatch_group_t v43 = a2;
  uint64_t v12 = type metadata accessor for OwnedBeaconRecord();
  __chkstk_darwin(v12);
  uint64_t v14 = (char *)&v37 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = sub_10000588C((uint64_t *)&unk_101656900);
  __chkstk_darwin(v15);
  uint64_t v17 = (uint64_t *)((char *)&v37 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0));
  sub_10001D074(a1, (uint64_t)v17, (uint64_t *)&unk_101656900);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v18 = *v17;
    static os_log_type_t.error.getter();
    if (qword_101637260 != -1) {
      swift_once();
    }
    sub_10000588C((uint64_t *)&unk_10163AD00);
    uint64_t v19 = swift_allocObject();
    *(_OWORD *)(v19 + 16) = xmmword_101342130;
    v44[0] = v18;
    swift_errorRetain();
    sub_10000588C(&qword_101638D40);
    uint64_t v20 = String.init<A>(describing:)();
    uint64_t v22 = v21;
    *(void *)(v19 + 56) = &type metadata for String;
    *(void *)(v19 + 64) = sub_10000B4CC();
    *(void *)(v19 + 32) = v20;
    *(void *)(v19 + 40) = v22;
    os_log(_:dso:log:_:_:)();
    swift_bridgeObjectRelease();
    swift_beginAccess();
    *(void *)(a7 + 16) = v18;
    swift_errorRelease();
  }
  else
  {
    uint64_t v40 = a5;
    uint64_t v41 = a3;
    uint64_t v38 = a6;
    sub_100B30DB4((uint64_t)v17, (uint64_t)v14, (uint64_t (*)(void))type metadata accessor for OwnedBeaconRecord);
    static os_log_type_t.default.getter();
    if (qword_101637260 != -1) {
      swift_once();
    }
    sub_10000588C((uint64_t *)&unk_10163AD00);
    uint64_t v23 = swift_allocObject();
    long long v39 = xmmword_101342130;
    *(_OWORD *)(v23 + 16) = xmmword_101342130;
    uint64_t v24 = UUID.uuidString.getter();
    uint64_t v26 = v25;
    *(void *)(v23 + 56) = &type metadata for String;
    unint64_t v27 = sub_10000B4CC();
    *(void *)(v23 + 64) = v27;
    *(void *)(v23 + 32) = v24;
    *(void *)(v23 + 40) = v26;
    os_log(_:dso:log:_:_:)();
    swift_bridgeObjectRelease();
    static os_log_type_t.default.getter();
    if (qword_1016372D0 != -1) {
      swift_once();
    }
    uint64_t v28 = swift_allocObject();
    *(_OWORD *)(v28 + 16) = v39;
    uint64_t v29 = UUID.uuidString.getter();
    *(void *)(v28 + 56) = &type metadata for String;
    *(void *)(v28 + 64) = v27;
    *(void *)(v28 + 32) = v29;
    *(void *)(v28 + 40) = v30;
    os_log(_:dso:log:_:_:)();
    swift_bridgeObjectRelease();
    uint64_t v31 = type metadata accessor for Transaction();
    __chkstk_darwin(v31);
    uint64_t v33 = v41;
    uint64_t v32 = v42;
    *(&v37 - 4) = v41;
    *(&v37 - 3) = v32;
    *(&v37 - 2) = v40;
    static Transaction.named<A>(_:with:)();
    uint64_t My = type metadata accessor for Feature.FindMy();
    v44[3] = My;
    v44[4] = sub_100B22DA4((unint64_t *)&qword_101653E00, (void (*)(uint64_t))&type metadata accessor for Feature.FindMy);
    uint64_t v35 = sub_10001D958(v44);
    (*(void (**)(uint64_t *, void, uint64_t))(*(void *)(My - 8) + 104))(v35, enum case for Feature.FindMy.networkScalingImprovements(_:), My);
    LOBYTE(My) = isFeatureEnabled(_:)();
    uint64_t v36 = _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)v44);
    if (My)
    {
      __chkstk_darwin(v36);
      *(&v37 - 2) = v38;
      *(&v37 - 1) = v33;
      static Transaction.named<A>(_:with:)();
    }
    sub_100B310AC((uint64_t)v14, (uint64_t (*)(void))type metadata accessor for OwnedBeaconRecord);
  }
  dispatch_group_leave(v43);
}

uint64_t sub_100AF5060(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v22 = a4;
  v20[1] = a2;
  uint64_t v6 = type metadata accessor for KeySyncMetadata();
  uint64_t v21 = *(void *)(v6 - 8);
  uint64_t v7 = *(void *)(v21 + 64);
  __chkstk_darwin(v6 - 8);
  uint64_t v8 = sub_10000588C(&qword_10164DBB0);
  __chkstk_darwin(v8 - 8);
  uint64_t v10 = (char *)v20 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = type metadata accessor for KeyAlignmentRecord();
  uint64_t v12 = *(void *)(v11 - 8);
  uint64_t v13 = *(void *)(v12 + 64);
  __chkstk_darwin(v11 - 8);
  sub_100B30D0C(a3, (uint64_t)v20 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0), (uint64_t (*)(void))type metadata accessor for KeyAlignmentRecord);
  unint64_t v14 = (*(unsigned __int8 *)(v12 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v12 + 80);
  uint64_t v15 = swift_allocObject();
  *(void *)(v15 + 16) = a1;
  sub_100B30DB4((uint64_t)v20 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0), v15 + v14, (uint64_t (*)(void))type metadata accessor for KeyAlignmentRecord);
  swift_retain();
  sub_100ABF4D0(a3, 0, (uint64_t)sub_100B5838C, v15);
  swift_release();
  uint64_t v16 = type metadata accessor for TaskPriority();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v16 - 8) + 56))(v10, 1, 1, v16);
  sub_100B30D0C(v22, (uint64_t)v20 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0), (uint64_t (*)(void))type metadata accessor for KeySyncMetadata);
  unint64_t v17 = (*(unsigned __int8 *)(v21 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v21 + 80);
  uint64_t v18 = swift_allocObject();
  *(void *)(v18 + 16) = 0;
  *(void *)(v18 + 24) = 0;
  sub_100B30DB4((uint64_t)v20 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0), v18 + v17, (uint64_t (*)(void))type metadata accessor for KeySyncMetadata);
  sub_100885EBC((uint64_t)v10, (uint64_t)&unk_1016592E0, v18);
  return swift_release();
}

uint64_t sub_100AF5354(uint64_t a1)
{
  uint64_t v2 = sub_10000588C(&qword_10164B328);
  __chkstk_darwin(v2);
  uint64_t v4 = (void *)((char *)v15 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0));
  Transaction.capture()();
  sub_10001D074(a1, (uint64_t)v4, &qword_10164B328);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v5 = *v4;
    static os_log_type_t.error.getter();
    if (qword_101637260 != -1) {
      swift_once();
    }
    sub_10000588C((uint64_t *)&unk_10163AD00);
    uint64_t v6 = swift_allocObject();
    *(_OWORD *)(v6 + 16) = xmmword_101342130;
    v15[1] = v5;
    swift_errorRetain();
    sub_10000588C(&qword_101638D40);
    uint64_t v7 = String.init<A>(describing:)();
    uint64_t v9 = v8;
    *(void *)(v6 + 56) = &type metadata for String;
    *(void *)(v6 + 64) = sub_10000B4CC();
    *(void *)(v6 + 32) = v7;
    *(void *)(v6 + 40) = v9;
    os_log(_:dso:log:_:_:)();
    swift_bridgeObjectRelease();
    return swift_errorRelease();
  }
  else
  {
    static os_log_type_t.error.getter();
    if (qword_101637260 != -1) {
      swift_once();
    }
    sub_10000588C((uint64_t *)&unk_10163AD00);
    uint64_t v11 = swift_allocObject();
    *(_OWORD *)(v11 + 16) = xmmword_101342130;
    type metadata accessor for KeyAlignmentRecord();
    uint64_t v12 = UUID.uuidString.getter();
    uint64_t v14 = v13;
    *(void *)(v11 + 56) = &type metadata for String;
    *(void *)(v11 + 64) = sub_10000B4CC();
    *(void *)(v11 + 32) = v12;
    *(void *)(v11 + 40) = v14;
    os_log(_:dso:log:_:_:)();
    swift_bridgeObjectRelease();
    return sub_10001DAB4((uint64_t)v4, &qword_10164B328);
  }
}

uint64_t sub_100AF55D8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  *(void *)(v4 + 120) = a4;
  return _swift_task_switch(sub_100AF55F8, 0, 0);
}

uint64_t sub_100AF55F8()
{
  if (qword_1016375E8 != -1) {
    swift_once();
  }
  swift_beginAccess();
  uint64_t result = sub_10001D074((uint64_t)&xmmword_10166E8F0, v0 + 56, (uint64_t *)&unk_101638D30);
  if (*(void *)(v0 + 80))
  {
    sub_10001CEB0((long long *)(v0 + 56), v0 + 16);
    sub_10001CD44((void *)(v0 + 16), *(void *)(v0 + 40));
    uint64_t v3 = (uint64_t (__cdecl *)())((char *)&dword_101639138 + dword_101639138);
    uint64_t v2 = (void *)swift_task_alloc();
    *(void *)(v0 + 128) = v2;
    *uint64_t v2 = v0;
    v2[1] = sub_100AF5734;
    return v3();
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_100AF5734(uint64_t a1)
{
  *(void *)(*(void *)v1 + 136) = a1;
  swift_task_dealloc();
  return _swift_task_switch(sub_100AF5834, 0, 0);
}

uint64_t sub_100AF5834()
{
  uint64_t v1 = (uint64_t)(v0 + 2);
  if (v0[17])
  {
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v1);
    uint64_t v2 = (void *)swift_task_alloc();
    v0[18] = v2;
    *uint64_t v2 = v0;
    v2[1] = sub_100AF590C;
    uint64_t v3 = v0[15];
    return sub_101104A5C(v3);
  }
  else
  {
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v1);
    uint64_t v5 = (uint64_t (*)(void))v0[1];
    return v5();
  }
}

uint64_t sub_100AF590C()
{
  *(void *)(*(void *)v1 + 152) = v0;
  swift_task_dealloc();
  if (v0) {
    uint64_t v2 = sub_100AF5A20;
  }
  else {
    uint64_t v2 = sub_10086AA64;
  }
  return _swift_task_switch(v2, 0, 0);
}

uint64_t sub_100AF5A20()
{
  swift_release();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

void sub_100AF5A84(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v34 = a1;
  uint64_t v35 = a3;
  uint64_t v37 = a2;
  uint64_t v38 = type metadata accessor for UUID();
  uint64_t v4 = *(void *)(v38 - 8);
  uint64_t v5 = *(void *)(v4 + 64);
  uint64_t v6 = __chkstk_darwin(v38);
  uint64_t v7 = (char *)&v32 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  uint64_t v36 = (char *)&v32 - v8;
  uint64_t v9 = (int *)type metadata accessor for OwnedDeviceKeyRecord();
  uint64_t v33 = *((void *)v9 - 1);
  uint64_t v10 = *(void *)(v33 + 64);
  uint64_t v11 = __chkstk_darwin(v9);
  uint64_t v12 = (char *)&v32 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v11);
  uint64_t v14 = (_OWORD *)((char *)&v32 - v13);
  sub_100A9709C((uint64_t *)v39);
  if (v3)
  {
    uint64_t v15 = v37;
    if (qword_101637660 != -1) {
      swift_once();
    }
    uint64_t v16 = type metadata accessor for Logger();
    sub_100010324(v16, (uint64_t)qword_10170F838);
    (*(void (**)(char *, uint64_t, uint64_t))(v4 + 16))(v7, v15, v38);
    swift_errorRetain();
    swift_errorRetain();
    unint64_t v17 = Logger.logObject.getter();
    os_log_type_t v18 = static os_log_type_t.error.getter();
    int v19 = v18;
    if (os_log_type_enabled(v17, v18))
    {
      uint64_t v20 = swift_slowAlloc();
      uint64_t v37 = swift_slowAlloc();
      v41[0] = v37;
      *(_DWORD *)uint64_t v20 = 141558531;
      *(void *)&long long v40 = 1752392040;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v20 + 12) = 2081;
      sub_100B22DA4((unint64_t *)&qword_101638B10, (void (*)(uint64_t))&type metadata accessor for UUID);
      LODWORD(v36) = v19;
      uint64_t v21 = v38;
      uint64_t v22 = dispatch thunk of CustomStringConvertible.description.getter();
      *(void *)&long long v40 = sub_1008FA0F0(v22, v23, v41);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      (*(void (**)(char *, uint64_t))(v4 + 8))(v7, v21);
      *(_WORD *)(v20 + 22) = 2080;
      swift_getErrorValue();
      uint64_t v24 = Error.localizedDescription.getter();
      *(void *)&long long v40 = sub_1008FA0F0(v24, v25, v41);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      swift_errorRelease();
      swift_errorRelease();
      _os_log_impl((void *)&_mh_execute_header, v17, (os_log_type_t)v36, "Failed to create OwnedDeviceKeyRecord for %{private,mask.hash}s error: %s.", (uint8_t *)v20, 0x20u);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      swift_errorRelease();
    }
    else
    {
      swift_errorRelease();
      (*(void (**)(char *, uint64_t))(v4 + 8))(v7, v38);
      swift_errorRelease();
      swift_errorRelease();
    }
  }
  else
  {
    UUID.init()();
    uint64_t v26 = (char *)v14 + v9[6];
    unint64_t v27 = *(void (**)(char *, uint64_t))(v4 + 16);
    uint64_t v32 = 0;
    uint64_t v28 = v38;
    v27(v26, v37);
    long long v40 = v39[1];
    *(_OWORD *)uint64_t v41 = v39[0];
    sub_100061E54((uint64_t)v41);
    sub_100061E54((uint64_t)&v40);
    sub_100B55F50((uint64_t *)v39);
    *uint64_t v14 = xmmword_101348180;
    *(_OWORD *)((char *)v14 + v9[7]) = *(_OWORD *)v41;
    *(_OWORD *)((char *)v14 + v9[8]) = v40;
    ((void (*)(char *, uint64_t, uint64_t))v27)(v36, v37, v28);
    sub_100B30D0C((uint64_t)v14, (uint64_t)v12, (uint64_t (*)(void))type metadata accessor for OwnedDeviceKeyRecord);
    unint64_t v29 = (*(unsigned __int8 *)(v4 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
    unint64_t v30 = (v5 + *(unsigned __int8 *)(v33 + 80) + v29) & ~(unint64_t)*(unsigned __int8 *)(v33 + 80);
    uint64_t v31 = swift_allocObject();
    *(void *)(v31 + 16) = v34;
    (*(void (**)(unint64_t, char *, uint64_t))(v4 + 32))(v31 + v29, v36, v38);
    sub_100B30DB4((uint64_t)v12, v31 + v30, (uint64_t (*)(void))type metadata accessor for OwnedDeviceKeyRecord);
    swift_retain();
    sub_100ABC900((uint64_t)v14, 0, (uint64_t)sub_100B5814C, v31);
    swift_release();
    sub_100B310AC((uint64_t)v14, (uint64_t (*)(void))type metadata accessor for OwnedDeviceKeyRecord);
  }
}

void sub_100AF6048(uint64_t a1, uint64_t a2, NSObject *a3, uint64_t a4)
{
  os_log_t v47 = a3;
  uint64_t v48 = a4;
  uint64_t v46 = type metadata accessor for OwnedDeviceKeyRecord();
  uint64_t v5 = __chkstk_darwin(v46);
  uint64_t v45 = &v43[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __chkstk_darwin(v5);
  uint64_t v8 = &v43[-v7];
  uint64_t v9 = type metadata accessor for UUID();
  uint64_t v10 = *(void *)(v9 - 8);
  uint64_t v11 = __chkstk_darwin(v9);
  uint64_t v13 = &v43[-((v12 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __chkstk_darwin(v11);
  uint64_t v15 = &v43[-v14];
  uint64_t v16 = sub_10000588C(&qword_1016592B0);
  __chkstk_darwin(v16);
  os_log_type_t v18 = &v43[-((v17 + 15) & 0xFFFFFFFFFFFFFFF0)];
  Transaction.capture()();
  sub_10001D074(a1, (uint64_t)v18, &qword_1016592B0);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    if (qword_101637660 != -1) {
      swift_once();
    }
    uint64_t v19 = type metadata accessor for Logger();
    sub_100010324(v19, (uint64_t)qword_10170F838);
    (*(void (**)(unsigned char *, os_log_t, uint64_t))(v10 + 16))(v13, v47, v9);
    uint64_t v20 = v45;
    sub_100B30D0C(v48, (uint64_t)v45, (uint64_t (*)(void))type metadata accessor for OwnedDeviceKeyRecord);
    swift_errorRetain();
    swift_errorRetain();
    uint64_t v21 = Logger.logObject.getter();
    os_log_type_t v22 = static os_log_type_t.error.getter();
    int v23 = v22;
    if (os_log_type_enabled(v21, v22))
    {
      uint64_t v24 = swift_slowAlloc();
      uint64_t v25 = swift_slowAlloc();
      uint64_t v48 = v25;
      *(_DWORD *)uint64_t v24 = 141559043;
      uint64_t v49 = 1752392040;
      uint64_t v50 = v25;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v24 + 12) = 2081;
      os_log_t v47 = v21;
      sub_100B22DA4((unint64_t *)&qword_101638B10, (void (*)(uint64_t))&type metadata accessor for UUID);
      int v44 = v23;
      uint64_t v26 = dispatch thunk of CustomStringConvertible.description.getter();
      uint64_t v49 = sub_1008FA0F0(v26, v27, &v50);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      (*(void (**)(unsigned char *, uint64_t))(v10 + 8))(v13, v9);
      *(_WORD *)(v24 + 22) = 2160;
      uint64_t v49 = 1752392040;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v24 + 32) = 2081;
      uint64_t v28 = dispatch thunk of CustomStringConvertible.description.getter();
      uint64_t v49 = sub_1008FA0F0(v28, v29, &v50);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      sub_100B310AC((uint64_t)v20, (uint64_t (*)(void))type metadata accessor for OwnedDeviceKeyRecord);
      *(_WORD *)(v24 + 42) = 2080;
      swift_getErrorValue();
      uint64_t v30 = Error.localizedDescription.getter();
      uint64_t v49 = sub_1008FA0F0(v30, v31, &v50);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      swift_errorRelease();
      swift_errorRelease();
      os_log_t v32 = v47;
      _os_log_impl((void *)&_mh_execute_header, v47, (os_log_type_t)v44, "Failed to save OwnedDeviceKeyRecord for %{private,mask.hash}s uuid: %{private,mask.hash}s error: %s.", (uint8_t *)v24, 0x34u);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      swift_errorRelease();
    }
    else
    {
      swift_errorRelease();
      (*(void (**)(unsigned char *, uint64_t))(v10 + 8))(v13, v9);
      sub_100B310AC((uint64_t)v20, (uint64_t (*)(void))type metadata accessor for OwnedDeviceKeyRecord);
      swift_errorRelease();
      swift_errorRelease();
    }
  }
  else
  {
    if (qword_101637660 != -1) {
      swift_once();
    }
    uint64_t v33 = type metadata accessor for Logger();
    sub_100010324(v33, (uint64_t)qword_10170F838);
    (*(void (**)(unsigned char *, os_log_t, uint64_t))(v10 + 16))(v15, v47, v9);
    sub_100B30D0C(v48, (uint64_t)v8, (uint64_t (*)(void))type metadata accessor for OwnedDeviceKeyRecord);
    uint64_t v34 = Logger.logObject.getter();
    os_log_type_t v35 = static os_log_type_t.default.getter();
    int v36 = v35;
    if (os_log_type_enabled(v34, v35))
    {
      uint64_t v37 = swift_slowAlloc();
      uint64_t v38 = swift_slowAlloc();
      uint64_t v48 = v38;
      *(_DWORD *)uint64_t v37 = 141558787;
      uint64_t v49 = 1752392040;
      uint64_t v50 = v38;
      os_log_t v47 = v34;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v37 + 12) = 2081;
      sub_100B22DA4((unint64_t *)&qword_101638B10, (void (*)(uint64_t))&type metadata accessor for UUID);
      LODWORD(v45) = v36;
      uint64_t v39 = dispatch thunk of CustomStringConvertible.description.getter();
      uint64_t v49 = sub_1008FA0F0(v39, v40, &v50);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      (*(void (**)(unsigned char *, uint64_t))(v10 + 8))(v15, v9);
      *(_WORD *)(v37 + 22) = 2160;
      uint64_t v49 = 1752392040;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v37 + 32) = 2081;
      uint64_t v41 = dispatch thunk of CustomStringConvertible.description.getter();
      uint64_t v49 = sub_1008FA0F0(v41, v42, &v50);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      sub_100B310AC((uint64_t)v8, (uint64_t (*)(void))type metadata accessor for OwnedDeviceKeyRecord);
      uint64_t v34 = v47;
      _os_log_impl((void *)&_mh_execute_header, v47, (os_log_type_t)v45, "Successfully saved OwnedDeviceKeyRecord for %{private,mask.hash}s uuid: %{private,mask.hash}s.", (uint8_t *)v37, 0x2Au);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      (*(void (**)(unsigned char *, uint64_t))(v10 + 8))(v15, v9);
      sub_100B310AC((uint64_t)v8, (uint64_t (*)(void))type metadata accessor for OwnedDeviceKeyRecord);
    }

    sub_10001DAB4((uint64_t)v18, &qword_1016592B0);
  }
}

uint64_t sub_100AF6870(uint64_t a1, void (*a2)(void *, char *), uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v9 = sub_10000588C(&qword_101638CF0);
  __chkstk_darwin(v9 - 8);
  uint64_t v11 = (char *)&v20 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = sub_10000588C((uint64_t *)&unk_101656900);
  __chkstk_darwin(v12);
  uint64_t v14 = (uint64_t *)((char *)&v20 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0));
  swift_beginAccess();
  uint64_t v15 = *(void *)(a1 + 16);
  if (v15)
  {
    *uint64_t v14 = v15;
    swift_storeEnumTagMultiPayload();
    uint64_t v16 = type metadata accessor for UUID();
    uint64_t v17 = *(void *)(v16 - 8);
    (*(void (**)(char *, uint64_t, uint64_t))(v17 + 16))(v11, a4, v16);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v17 + 56))(v11, 0, 1, v16);
    swift_errorRetain();
    swift_errorRetain();
    a2(v14, v11);
    swift_errorRelease();
  }
  else
  {
    sub_100B30D0C(a5, (uint64_t)v14, (uint64_t (*)(void))type metadata accessor for OwnedBeaconRecord);
    swift_storeEnumTagMultiPayload();
    uint64_t v18 = type metadata accessor for UUID();
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v18 - 8) + 56))(v11, 1, 1, v18);
    a2(v14, v11);
  }
  sub_10001DAB4((uint64_t)v11, &qword_101638CF0);
  return sub_10001DAB4((uint64_t)v14, (uint64_t *)&unk_101656900);
}

uint64_t sub_100AF6ACC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)(v3 + 16) = a1;
  uint64_t v6 = (void *)swift_task_alloc();
  *(void *)(v3 + 24) = v6;
  void *v6 = v3;
  v6[1] = sub_10094F764;
  return sub_1006DDD60(a1, a3);
}

uint64_t sub_100AF6B80(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v3[13] = a2;
  v3[14] = a3;
  v3[12] = a1;
  uint64_t v4 = type metadata accessor for UUID();
  v3[15] = v4;
  v3[16] = *(void *)(v4 - 8);
  v3[17] = swift_task_alloc();
  v3[18] = swift_task_alloc();
  return _swift_task_switch(sub_100AF6C54, 0, 0);
}

uint64_t sub_100AF6C54()
{
  uint64_t v1 = (void *)v0[14];
  type metadata accessor for BeaconKeyManager(0);
  OSAllocatedUnfairLock.callAsFunction<A>(_:)();
  v0[19] = v0[11];
  uint64_t v3 = v1[3];
  uint64_t v2 = v1[4];
  sub_10001CD44(v1, v3);
  (*(void (**)(uint64_t))(*(void *)(*(void *)(v2 + 8) + 8) + 32))(v3);
  uid_t v4 = getuid();
  sub_100DC5FC0(v4);
  uint64_t v5 = (void *)swift_task_alloc();
  v0[20] = v5;
  *uint64_t v5 = v0;
  v5[1] = sub_100AF6DC0;
  uint64_t v7 = v0[17];
  uint64_t v6 = v0[18];
  return sub_10064B6F4((uint64_t)(v0 + 2), v6, v7);
}

uint64_t sub_100AF6DC0()
{
  uint64_t v2 = *(void **)v1;
  *(void *)(*(void *)v1 + 168) = v0;
  swift_task_dealloc();
  if (v0)
  {
    uint64_t v3 = sub_100AF6F9C;
  }
  else
  {
    uint64_t v4 = v2[18];
    uint64_t v6 = v2[16];
    uint64_t v5 = v2[17];
    uint64_t v7 = v2[15];
    swift_release();
    uint64_t v8 = *(void (**)(uint64_t, uint64_t))(v6 + 8);
    v8(v5, v7);
    v8(v4, v7);
    uint64_t v3 = sub_100AF6F20;
  }
  return _swift_task_switch(v3, 0, 0);
}

uint64_t sub_100AF6F20()
{
  sub_10001D608(v0 + 16, *(void *)(v0 + 96), &qword_10163A110);
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_100AF6F9C()
{
  uint64_t v1 = v0[18];
  uint64_t v3 = v0[16];
  uint64_t v2 = v0[17];
  uint64_t v4 = v0[15];
  uint64_t v5 = v0[12];
  swift_release();
  swift_errorRelease();
  uint64_t v6 = *(void (**)(uint64_t, uint64_t))(v3 + 8);
  v6(v2, v4);
  v6(v1, v4);
  *(void *)(v5 + 64) = 0;
  *(_OWORD *)(v5 + 32) = 0u;
  *(_OWORD *)(v5 + 48) = 0u;
  *(_OWORD *)uint64_t v5 = 0u;
  *(_OWORD *)(v5 + 16) = 0u;
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v7 = (uint64_t (*)(void))v0[1];
  return v7();
}

uint64_t sub_100AF7070(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v3[4] = a2;
  v3[5] = a3;
  v3[3] = a1;
  uint64_t v4 = type metadata accessor for UUID();
  v3[6] = v4;
  v3[7] = *(void *)(v4 - 8);
  v3[8] = swift_task_alloc();
  return _swift_task_switch(sub_100AF7134, 0, 0);
}

uint64_t sub_100AF7134()
{
  uint64_t v1 = v0[5];
  type metadata accessor for BeaconKeyManager(0);
  OSAllocatedUnfairLock.callAsFunction<A>(_:)();
  v0[9] = v0[2];
  uint64_t v2 = v1 + *(int *)(type metadata accessor for SharedBeaconRecord(0) + 20);
  uid_t v3 = getuid();
  sub_100DC5FC0(v3);
  uint64_t v4 = (void *)swift_task_alloc();
  v0[10] = v4;
  void *v4 = v0;
  v4[1] = sub_100AF726C;
  uint64_t v5 = v0[3];
  return sub_10064DC78(v5, v2);
}

uint64_t sub_100AF726C()
{
  uint64_t v2 = (void *)*v1;
  v2[11] = v0;
  swift_task_dealloc();
  if (v0)
  {
    return _swift_task_switch(sub_100AF73C8, 0, 0);
  }
  else
  {
    (*(void (**)(void, void))(v2[7] + 8))(v2[8], v2[6]);
    swift_release();
    swift_task_dealloc();
    uid_t v3 = (uint64_t (*)(void))v2[1];
    return v3();
  }
}

uint64_t sub_100AF73C8()
{
  uint64_t v1 = v0[8];
  uint64_t v2 = v0[6];
  uint64_t v3 = v0[7];
  uint64_t v4 = v0[3];
  swift_release();
  swift_errorRelease();
  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v1, v2);
  uint64_t v5 = type metadata accessor for KeyDropLostItemDates(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 56))(v4, 1, 1, v5);
  swift_task_dealloc();
  uint64_t v6 = (uint64_t (*)(void))v0[1];
  return v6();
}

uint64_t sub_100AF74AC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  v29[1] = a2;
  uint64_t v3 = type metadata accessor for UUID();
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  uint64_t v6 = (char *)v29 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = sub_10000588C(&qword_10163B9F0);
  __chkstk_darwin(v7 - 8);
  uint64_t v9 = (char *)v29 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = type metadata accessor for OwnedBeaconRecord();
  uint64_t v11 = *(void *)(v10 - 8);
  uint64_t v12 = __chkstk_darwin(v10);
  uint64_t v14 = (char *)v29 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v12);
  uint64_t v16 = (char *)v29 - v15;
  sub_100ACD178((uint64_t)v9);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v11 + 48))(v9, 1, v10) == 1)
  {
    sub_10001DAB4((uint64_t)v9, &qword_10163B9F0);
LABEL_6:
    if (qword_101636F50 != -1) {
      swift_once();
    }
    uint64_t v21 = type metadata accessor for Logger();
    sub_100010324(v21, (uint64_t)qword_10170E9E8);
    (*(void (**)(char *, uint64_t, uint64_t))(v4 + 16))(v6, a1, v3);
    os_log_type_t v22 = Logger.logObject.getter();
    os_log_type_t v23 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v22, v23))
    {
      uint64_t v24 = swift_slowAlloc();
      *(void *)&long long v31 = swift_slowAlloc();
      *(_DWORD *)uint64_t v24 = 141558275;
      *(void *)&long long v30 = 1752392040;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v24 + 12) = 2081;
      sub_100B22DA4((unint64_t *)&qword_101638B10, (void (*)(uint64_t))&type metadata accessor for UUID);
      uint64_t v25 = dispatch thunk of CustomStringConvertible.description.getter();
      *(void *)&long long v30 = sub_1008FA0F0(v25, v26, (uint64_t *)&v31);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
      _os_log_impl((void *)&_mh_execute_header, v22, v23, "Could not compute productUUID from nil productData of beacon %{private,mask.hash}s.", (uint8_t *)v24, 0x16u);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
    }

    return UUID.init(uuid:)();
  }
  sub_100B30DB4((uint64_t)v9, (uint64_t)v16, (uint64_t (*)(void))type metadata accessor for OwnedBeaconRecord);
  uint64_t v17 = sub_100D1B318();
  unint64_t v19 = v18;
  sub_100B30D0C((uint64_t)v16, (uint64_t)v14, (uint64_t (*)(void))type metadata accessor for OwnedBeaconRecord);
  if (v19 >> 60 == 15)
  {
    uint64_t v17 = sub_1002AAF08(*(void *)&v14[*(int *)(v10 + 64)], *(void *)&v14[*(int *)(v10 + 68)]);
    unint64_t v19 = v20;
    sub_100B310AC((uint64_t)v14, (uint64_t (*)(void))type metadata accessor for OwnedBeaconRecord);
    if (v19 >> 60 == 15)
    {
      sub_100B310AC((uint64_t)v16, (uint64_t (*)(void))type metadata accessor for OwnedBeaconRecord);
      goto LABEL_6;
    }
  }
  else
  {
    sub_100B310AC((uint64_t)v14, (uint64_t (*)(void))type metadata accessor for OwnedBeaconRecord);
  }
  if (qword_101636960 != -1) {
    swift_once();
  }
  long long v31 = xmmword_1016408F8;
  sub_1000361E0(xmmword_1016408F8, *((unint64_t *)&xmmword_1016408F8 + 1));
  Data.append(_:)();
  long long v28 = v31;
  long long v30 = v31;
  sub_1000362FC();
  DataProtocol.stableUUID.getter();
  sub_10001CFB8(v28, *((unint64_t *)&v28 + 1));
  sub_10001CFB8(v17, v19);
  return sub_100B310AC((uint64_t)v16, (uint64_t (*)(void))type metadata accessor for OwnedBeaconRecord);
}

uint64_t sub_100AF7A38(uint64_t a1, uint64_t a2, void *a3, int a4)
{
  LODWORD(v378) = a4;
  v401 = a3;
  uint64_t v394 = a1;
  uint64_t v382 = sub_10000588C(&qword_10163CBA8);
  __chkstk_darwin(v382);
  v381 = (char *)&v350 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = sub_10000588C(&qword_101638CF0);
  uint64_t v7 = __chkstk_darwin(v6 - 8);
  v391 = (char *)&v350 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v7);
  v361 = (char *)&v350 - v9;
  uint64_t v10 = sub_10000588C((uint64_t *)&unk_1016511A0);
  uint64_t v11 = __chkstk_darwin(v10 - 8);
  v362 = (char *)&v350 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v11);
  v388 = ((char *)&v350 - v13);
  uint64_t v390 = sub_10000588C(&qword_10163CBB0);
  uint64_t v353 = *(void *)(v390 - 8);
  uint64_t v14 = __chkstk_darwin(v390);
  uint64_t v366 = (uint64_t)&v350 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v14);
  v375 = (unsigned int (**)(uint64_t, uint64_t, uint64_t))((char *)&v350 - v16);
  uint64_t v379 = type metadata accessor for BeaconStatus(0);
  uint64_t v17 = __chkstk_darwin(v379);
  uint64_t v352 = (uint64_t)&v350 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v19 = __chkstk_darwin(v17);
  uint64_t v364 = (uint64_t)&v350 - v20;
  __chkstk_darwin(v19);
  uint64_t v376 = (uint64_t)&v350 - v21;
  uint64_t v22 = sub_10000588C((uint64_t *)&unk_101655530);
  uint64_t v23 = __chkstk_darwin(v22 - 8);
  v387 = (char **)((char *)&v350 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0));
  __chkstk_darwin(v23);
  v395 = (char *)&v350 - v25;
  p_Class isa = (void *)type metadata accessor for BeaconObservation();
  v393 = (void (*)(uint64_t, uint64_t, uint64_t, uint64_t))*(p_isa - 1);
  uint64_t v26 = __chkstk_darwin(p_isa);
  long long v28 = (char *)&v350 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v29 = __chkstk_darwin(v26);
  long long v31 = (char *)&v350 - v30;
  uint64_t v32 = __chkstk_darwin(v29);
  v372 = (char *)&v350 - v33;
  __chkstk_darwin(v32);
  v392 = (void (*)(void, void))((char *)&v350 - v34);
  uint64_t v399 = type metadata accessor for Date();
  uint64_t v398 = *(void *)(v399 - 8);
  uint64_t v35 = __chkstk_darwin(v399);
  v370 = (char *)&v350 - ((v36 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v37 = __chkstk_darwin(v35);
  v377 = (char *)&v350 - v38;
  uint64_t v39 = __chkstk_darwin(v37);
  v383 = (char *)&v350 - v40;
  uint64_t v41 = __chkstk_darwin(v39);
  v397 = (char *)&v350 - v42;
  uint64_t v43 = __chkstk_darwin(v41);
  v404 = (char *)&v350 - v44;
  uint64_t v45 = __chkstk_darwin(v43);
  v400 = (char *)&v350 - v46;
  uint64_t v47 = __chkstk_darwin(v45);
  v405 = (char *)&v350 - v48;
  __chkstk_darwin(v47);
  v389 = ((char *)&v350 - v49);
  uint64_t v50 = sub_10000588C((uint64_t *)&unk_10163AC90);
  uint64_t v51 = __chkstk_darwin(v50 - 8);
  v386 = (char *)&v350 - ((v52 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v51);
  v363 = (char *)&v350 - v53;
  uint64_t v54 = sub_10000588C(&qword_10163CBA0);
  __chkstk_darwin(v54);
  uint64_t v56 = (char *)&v350 - ((v55 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v57 = sub_10000588C(&qword_10164E860);
  __chkstk_darwin(v57 - 8);
  unsigned __int8 v59 = (char *)&v350 - ((v58 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v396 = sub_10000588C(&qword_10164E868);
  uint64_t v60 = *(void *)(v396 - 8);
  uint64_t v61 = __chkstk_darwin(v396);
  v359 = (char *)&v350 - ((v62 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v63 = __chkstk_darwin(v61);
  v357 = (char *)&v350 - v64;
  uint64_t v65 = __chkstk_darwin(v63);
  v356 = (char *)&v350 - v66;
  uint64_t v67 = __chkstk_darwin(v65);
  v368 = (char *)&v350 - v68;
  __chkstk_darwin(v67);
  v369 = (char *)&v350 - v69;
  uint64_t v70 = type metadata accessor for UUID();
  uint64_t v71 = __chkstk_darwin(v70);
  v355 = (char *)&v350 - ((v72 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v73 = __chkstk_darwin(v71);
  v350 = (char *)&v350 - v74;
  uint64_t v75 = __chkstk_darwin(v73);
  v351 = (char *)&v350 - v76;
  uint64_t v77 = __chkstk_darwin(v75);
  v354 = (char *)&v350 - v78;
  uint64_t v79 = __chkstk_darwin(v77);
  v384 = (char *)&v350 - v80;
  uint64_t v81 = __chkstk_darwin(v79);
  v371 = (char *)&v350 - v82;
  uint64_t v83 = __chkstk_darwin(v81);
  v360 = (char *)&v350 - v84;
  uint64_t v85 = __chkstk_darwin(v83);
  v373 = (char *)&v350 - v86;
  uint64_t v87 = __chkstk_darwin(v85);
  v374 = (void (**)(uint64_t, uint64_t, uint64_t, uint64_t))((char *)&v350 - v88);
  uint64_t v89 = __chkstk_darwin(v87);
  v367 = (char *)&v350 - v90;
  uint64_t v91 = __chkstk_darwin(v89);
  v358 = (char *)&v350 - v92;
  __chkstk_darwin(v91);
  uint64_t v94 = (char *)&v350 - v93;
  os_log_t v406 = v95;
  Class isa = (void (*)(char *, char *, uint64_t))v95[2].isa;
  uint64_t v365 = a2;
  uint64_t v409 = v97;
  v403 = v95 + 2;
  v402 = isa;
  ((void (*)(char *, uint64_t))isa)((char *)&v350 - v93, a2);
  if (qword_101636CD8 != -1) {
    swift_once();
  }
  OS_dispatch_queue.sync<A>(execute:)();
  v385 = (unsigned int (*)(char *, uint64_t, uint64_t))sub_1010AB6D0((uint64_t)v419);
  swift_bridgeObjectRelease();
  v98._object = (void *)0x8000000101412D90;
  v98._uint64_t countAndFlagsBits = 0xD000000000000014;
  prohibitAsyncContext(functionName:)(v98);
  uint64_t v99 = v407[36];
  __chkstk_darwin(v100);
  *(&v350 - 2) = v101;
  *(&v350 - 1) = v94;
  v408 = v94;
  uint64_t v380 = v99;
  OS_dispatch_queue.sync<A>(execute:)();
  uint64_t v102 = sub_10000588C((uint64_t *)&unk_10164E870);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v102 - 8) + 48))(v56, 1, v102) == 1)
  {
    uint64_t v103 = p_isa;
    uint64_t v104 = v396;
    uint64_t v105 = (uint64_t)v395;
    sub_10001DAB4((uint64_t)v56, &qword_10163CBA0);
    (*(void (**)(unsigned char *, uint64_t, uint64_t, uint64_t))(v60 + 56))(v59, 1, 1, v104);
    sub_10001DAB4((uint64_t)v59, &qword_10164E860);
    uint64_t v108 = v401;
  }
  else
  {
    uint64_t v106 = v396;
    char v107 = sub_100AA4198((uint64_t)&v59[*(int *)(v396 + 48)]);
    uint64_t v147 = v369;
    uint64_t v148 = (uint64_t)&v369[*(int *)(v106 + 48)];
    *unsigned __int8 v59 = v107 & 1;
    sub_10001DAB4((uint64_t)v56, (uint64_t *)&unk_10164E870);
    (*(void (**)(unsigned char *, void, uint64_t, uint64_t))(v60 + 56))(v59, 0, 1, v106);
    uint64_t v149 = v148;
    uint64_t v150 = (uint64_t)&v59[*(int *)(v106 + 48)];
    int v151 = *v59;
    unsigned char *v147 = v151;
    sub_100B30DB4(v150, v148, type metadata accessor for DeviceEvent);
    uint64_t v152 = *(int *)(v106 + 48);
    uint64_t v153 = v368;
    uint64_t v154 = (uint64_t)&v368[v152];
    unsigned char *v368 = v151;
    sub_100B30D0C(v149, (uint64_t)&v153[v152], type metadata accessor for DeviceEvent);
    sub_100B310AC(v154, type metadata accessor for DeviceEvent);
    uint64_t v103 = p_isa;
    if (v151 == 1)
    {
      uint64_t v155 = (uint64_t)&v153[*(int *)(v106 + 48)];
      unsigned char *v153 = 1;
      sub_100B30D0C(v149, v155, type metadata accessor for DeviceEvent);
      LODWORD(p_isa) = *(unsigned __int8 *)(v155 + 9);
      sub_100B310AC(v155, type metadata accessor for DeviceEvent);
      uint64_t v156 = *(int *)(v106 + 48);
      uint64_t v157 = v356;
      uint64_t v158 = (uint64_t)&v356[v156];
      unsigned char *v356 = 1;
      sub_100B30D0C(v149, (uint64_t)&v157[v156], type metadata accessor for DeviceEvent);
      if (*(unsigned char *)(v158 + 9) == 5)
      {
        OS_dispatch_queue.sync<A>(execute:)();
        sub_1010AB6E4((uint64_t)v419);
        swift_bridgeObjectRelease();
        type metadata accessor for DeviceEvent(0);
        uint64_t v159 = (uint64_t)v363;
        Date.addingTimeInterval(_:)();
        uint64_t v160 = 0;
        uint64_t v161 = v399;
        uint64_t v162 = v409;
        uint64_t v163 = v408;
      }
      else
      {
        uint64_t v160 = 1;
        uint64_t v161 = v399;
        uint64_t v162 = v409;
        uint64_t v163 = v408;
        uint64_t v159 = (uint64_t)v363;
      }
      uint64_t v244 = v358;
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v398 + 56))(v159, v160, 1, v161);
      sub_100B310AC(v158, type metadata accessor for DeviceEvent);
      if (qword_101636F50 != -1) {
        swift_once();
      }
      uint64_t v245 = type metadata accessor for Logger();
      sub_100010324(v245, (uint64_t)qword_10170E9E8);
      v402(v244, v163, v162);
      uint64_t v246 = (uint64_t)v357;
      uint64_t v247 = (uint64_t)&v357[*(int *)(v396 + 48)];
      unsigned char *v357 = 1;
      sub_100B30D0C(v149, v247, type metadata accessor for DeviceEvent);
      unint64_t v248 = v359;
      sub_10001D608(v246, (uint64_t)v359, &qword_10164E868);
      uint64_t v249 = Logger.logObject.getter();
      os_log_type_t v250 = static os_log_type_t.default.getter();
      int v251 = v250;
      if (os_log_type_enabled(v249, v250))
      {
        uint64_t v252 = swift_slowAlloc();
        v407 = (void *)swift_slowAlloc();
        v419 = v407;
        *(_DWORD *)uint64_t v252 = 141558787;
        *(void *)&long long v416 = 1752392040;
        v404 = (char *)&v416 + 8;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        *(_WORD *)(v252 + 12) = 2081;
        sub_100B22DA4((unint64_t *)&qword_101638B10, (void (*)(uint64_t))&type metadata accessor for UUID);
        LODWORD(v405) = v251;
        uint64_t v253 = dispatch thunk of CustomStringConvertible.description.getter();
        *(void *)&long long v416 = sub_1008FA0F0(v253, v254, (uint64_t *)&v419);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        long long v255 = v244;
        Class v256 = v406[1].isa;
        ((void (*)(char *, uint64_t))v256)(v255, v409);
        *(_WORD *)(v252 + 22) = 1026;
        LODWORD(v416) = p_isa;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        *(_WORD *)(v252 + 28) = 2082;
        p_Class isa = (void *)(v252 + 30);
        uint64_t v257 = *(int *)(v396 + 48);
        uint64_t v258 = (uint64_t)&v368[v257];
        unsigned char *v368 = *v248;
        sub_100B30D0C((uint64_t)&v248[v257], v258, type metadata accessor for DeviceEvent);
        uint64_t v259 = type metadata accessor for DeviceEvent(0);
        uint64_t v260 = v398;
        uint64_t v261 = (uint64_t)v248;
        uint64_t v262 = (uint64_t)v389;
        (*(void (**)(NSObject *, uint64_t, uint64_t))(v398 + 16))(v389, v258 + *(int *)(v259 + 24), v161);
        sub_100B310AC(v258, type metadata accessor for DeviceEvent);
        sub_100B22DA4((unint64_t *)&qword_101638DA0, (void (*)(uint64_t))&type metadata accessor for Date);
        uint64_t v263 = dispatch thunk of CustomStringConvertible.description.getter();
        unint64_t v265 = v264;
        uint64_t v162 = v409;
        (*(void (**)(uint64_t, uint64_t))(v260 + 8))(v262, v161);
        uint64_t v163 = v408;
        *(void *)&long long v416 = sub_1008FA0F0(v263, v265, (uint64_t *)&v419);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        sub_10001DAB4(v261, &qword_10164E868);
        _os_log_impl((void *)&_mh_execute_header, v249, (os_log_type_t)v405, "Beacon %{private,mask.hash}s is connected (via %{public}u since: %{public}s.", (uint8_t *)v252, 0x26u);
        swift_arrayDestroy();
        swift_slowDealloc();
        uint64_t v159 = (uint64_t)v363;
        swift_slowDealloc();
      }
      else
      {

        sub_10001DAB4((uint64_t)v248, &qword_10164E868);
        uint64_t v266 = v244;
        Class v256 = v406[1].isa;
        ((void (*)(char *, uint64_t))v256)(v266, v162);
      }
      sub_10001DAB4((uint64_t)v369, &qword_10164E868);
      ((void (*)(char *, uint64_t))v256)(v163, v162);
      sub_10001D608(v159, v394, (uint64_t *)&unk_10163AC90);
      return 1;
    }
    sub_10001DAB4((uint64_t)v147, &qword_10164E868);
    uint64_t v108 = v401;
    uint64_t v105 = (uint64_t)v395;
  }
  uint64_t v109 = swift_bridgeObjectRetain();
  os_log_t v110 = sub_100B32238(v109, (uint64_t)&off_10159F4B8);
  swift_bridgeObjectRelease();
  sub_100E4D5E0((uint64_t)v110, v105);
  swift_bridgeObjectRelease();
  uint64_t v111 = v393;
  uint64_t v396 = *((void *)v393 + 6);
  int v112 = ((uint64_t (*)(uint64_t, uint64_t, void *))v396)(v105, 1, v103);
  uint64_t v113 = (uint64_t)v404;
  if (v112 == 1)
  {
    v395 = 0;
    sub_10001DAB4(v105, (uint64_t *)&unk_101655530);
    goto LABEL_10;
  }
  uint64_t v114 = v392;
  sub_100B30DB4(v105, (uint64_t)v392, (uint64_t (*)(void))type metadata accessor for BeaconObservation);
  if (v114[*((int *)v103 + 6)] == 35)
  {
    v395 = 0;
    sub_100B310AC((uint64_t)v114, (uint64_t (*)(void))type metadata accessor for BeaconObservation);
LABEL_10:
    uint64_t v115 = _swiftEmptyArrayStorage;
    v419 = _swiftEmptyArrayStorage;
    uint64_t v116 = v108[2];
    swift_bridgeObjectRetain();
    if (v116)
    {
      unint64_t v117 = (*((unsigned __int8 *)v111 + 80) + 32) & ~(unint64_t)*((unsigned __int8 *)v111 + 80);
      uint64_t v118 = *((void *)v111 + 9);
      uint64_t v119 = (uint64_t)v108 + v117;
      uint64_t v120 = _swiftEmptyArrayStorage;
      do
      {
        sub_100B30D0C(v119, (uint64_t)v31, (uint64_t (*)(void))type metadata accessor for BeaconObservation);
        if (v31[*((int *)v103 + 6)] == 36)
        {
          sub_100B30DB4((uint64_t)v31, (uint64_t)v28, (uint64_t (*)(void))type metadata accessor for BeaconObservation);
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
            sub_1000B77F0(0, v120[2] + 1, 1);
          }
          uint64_t v120 = v419;
          unint64_t v122 = v419[2];
          unint64_t v121 = v419[3];
          if (v122 >= v121 >> 1)
          {
            sub_1000B77F0(v121 > 1, v122 + 1, 1);
            uint64_t v120 = v419;
          }
          _OWORD v120[2] = v122 + 1;
          sub_100B30DB4((uint64_t)v28, (uint64_t)v120 + v117 + v122 * v118, (uint64_t (*)(void))type metadata accessor for BeaconObservation);
          uint64_t v103 = p_isa;
        }
        else
        {
          sub_100B310AC((uint64_t)v31, (uint64_t (*)(void))type metadata accessor for BeaconObservation);
        }
        v119 += v118;
        --v116;
      }
      while (v116);
      uint64_t v115 = v419;
      uint64_t v113 = (uint64_t)v404;
    }
    swift_bridgeObjectRelease();
    uint64_t v123 = (uint64_t)v387;
    sub_100E4D5E0((uint64_t)v115, (uint64_t)v387);
    swift_release();
    int v124 = ((uint64_t (*)(uint64_t, uint64_t, void *))v396)(v123, 1, v103);
    uint64_t v125 = v399;
    uint64_t v126 = (uint64_t)v408;
    uint64_t v127 = v400;
    uint64_t v128 = (uint64_t)v386;
    if (v124 == 1)
    {
      sub_10001DAB4(v123, (uint64_t *)&unk_101655530);
      os_log_t v129 = (os_log_t)v398;
      uint64_t v130 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v398 + 56);
      v130(v128, 1, 1, v125);
    }
    else
    {
      os_log_t v129 = (os_log_t)v398;
      (*(void (**)(char *, uint64_t, uint64_t))(v398 + 16))(v386, v123 + *((int *)v103 + 5), v399);
      sub_100B310AC(v123, (uint64_t (*)(void))type metadata accessor for BeaconObservation);
      uint64_t v130 = (void (*)(uint64_t, uint64_t, uint64_t, uint64_t))v129[7].isa;
      v130(v128, 0, 1, v125);
      if (((unsigned int (*)(uint64_t, uint64_t, uint64_t))v129[6].isa)(v128, 1, v125) != 1)
      {
        v393 = v130;
        ((void (*)(char *, uint64_t, uint64_t))v129[4].isa)(v405, v128, v125);
LABEL_33:
        uint64_t v164 = v388;
        sub_100AE9138(v126, (uint64_t)v388);
        uint64_t v165 = sub_10000588C(&qword_1016511B0);
        v372 = *(char **)(v165 - 8);
        uint64_t v166 = (char *)*((void *)v372 + 6);
        v387 = v372 + 48;
        v386 = v166;
        if (((unsigned int (*)(NSObject *, uint64_t, uint64_t))v166)(v164, 1, v165) == 1)
        {
          sub_10001DAB4((uint64_t)v164, (uint64_t *)&unk_1016511A0);
          static Date.distantPast.getter();
        }
        else
        {
          uint64_t v167 = (uint64_t)v164;
          char v168 = *((unsigned char *)&v164->isa + *(int *)(v165 + 48));
          uint64_t v169 = v390;
          uint64_t v170 = *(int *)(v390 + 48);
          os_log_t v171 = v375;
          sub_100B30DB4(v167, (uint64_t)v375, type metadata accessor for BeaconStatus);
          *((unsigned char *)v171 + v170) = v168;
          uint64_t v172 = *((unsigned __int8 *)v171 + *(int *)(v169 + 48));
          uint64_t v173 = v376;
          sub_100B30DB4((uint64_t)v171, v376, type metadata accessor for BeaconStatus);
          switch(v172)
          {
            case 1:
            case 2:
              ((void (*)(char *, uint64_t, uint64_t))v129[2].isa)(v127, v173 + *(int *)(v379 + 24), v125);
              break;
            default:
              static Date.distantPast.getter();
              break;
          }
          sub_100B310AC(v173, type metadata accessor for BeaconStatus);
        }
        sub_100B22DA4((unint64_t *)&qword_1016605E0, (void (*)(uint64_t))&type metadata accessor for Date);
        uint64_t v174 = v405;
        char v175 = dispatch thunk of static Comparable.>= infix(_:_:)();
        uint64_t v176 = v127;
        long long v177 = (char *)v129[2].isa;
        if (v175) {
          uint64_t v178 = v176;
        }
        else {
          uint64_t v178 = v174;
        }
        ((void (*)(uint64_t, char *, uint64_t))v177)(v113, v178, v125);
        Date.addingTimeInterval(_:)();
        uint64_t v179 = (uint64_t)v389;
        static Date.trustedNow.getter((uint64_t)v389);
        Date.timeIntervalSince(_:)();
        double v181 = v180;
        uint64_t v182 = (uint64_t)&v129[1];
        uint64_t v396 = (uint64_t)v129[1].isa;
        ((void (*)(uint64_t, uint64_t))v396)(v179, v125);
        if (v181 > 0.0)
        {
          if (qword_101636F50 == -1)
          {
LABEL_44:
            uint64_t v183 = type metadata accessor for Logger();
            sub_100010324(v183, (uint64_t)qword_10170E9E8);
            uint64_t v184 = v374;
            uint64_t v185 = v409;
            v402((char *)v374, v408, v409);
            uint64_t v186 = v383;
            ((void (*)(char *, uint64_t, uint64_t))v177)(v383, v113, v125);
            uint64_t v187 = Logger.logObject.getter();
            os_log_type_t v188 = static os_log_type_t.default.getter();
            int v189 = v188;
            if (os_log_type_enabled(v187, v188))
            {
              uint64_t v190 = swift_slowAlloc();
              p_Class isa = (void *)swift_slowAlloc();
              v419 = p_isa;
              *(_DWORD *)uint64_t v190 = 141558531;
              *(void *)&long long v416 = 1752392040;
              UnsafeMutableRawBufferPointer.copyMemory(from:)();
              *(_WORD *)(v190 + 12) = 2081;
              sub_100B22DA4((unint64_t *)&qword_101638B10, (void (*)(uint64_t))&type metadata accessor for UUID);
              LODWORD(v407) = v189;
              uint64_t v191 = dispatch thunk of CustomStringConvertible.description.getter();
              *(void *)&long long v416 = sub_1008FA0F0(v191, v192, (uint64_t *)&v419);
              UnsafeMutableRawBufferPointer.copyMemory(from:)();
              swift_bridgeObjectRelease();
              unint64_t v193 = v184;
              Class v194 = v406[1].isa;
              ((void (*)(void (**)(uint64_t, uint64_t, uint64_t, uint64_t), uint64_t))v194)(v193, v185);
              *(_WORD *)(v190 + 22) = 2082;
              sub_100B22DA4((unint64_t *)&qword_101638DA0, (void (*)(uint64_t))&type metadata accessor for Date);
              uint64_t v195 = v383;
              uint64_t v196 = dispatch thunk of CustomStringConvertible.description.getter();
              *(void *)&long long v416 = sub_1008FA0F0(v196, v197, (uint64_t *)&v419);
              os_log_t v129 = (os_log_t)v398;
              UnsafeMutableRawBufferPointer.copyMemory(from:)();
              swift_bridgeObjectRelease();
              os_log_type_t v198 = (void (*)(char *, uint64_t))v396;
              ((void (*)(char *, uint64_t))v396)(v195, v125);
              _os_log_impl((void *)&_mh_execute_header, v187, (os_log_type_t)v407, "Beacon %{private,mask.hash}s is connected since %{public}s.", (uint8_t *)v190, 0x20u);
              swift_arrayDestroy();
              swift_slowDealloc();
              swift_slowDealloc();

              v198(v404, v125);
              v198(v400, v125);
              v198(v405, v125);
              uint64_t v199 = v409;
            }
            else
            {

              unint64_t v215 = (void (*)(uint64_t, uint64_t))v396;
              ((void (*)(char *, uint64_t))v396)(v186, v125);
              uint64_t v216 = v184;
              Class v194 = v406[1].isa;
              ((void (*)(void (**)(uint64_t, uint64_t, uint64_t, uint64_t), uint64_t))v194)(v216, v185);
              v215(v113, v125);
              v215((uint64_t)v400, v125);
              v215((uint64_t)v405, v125);
              uint64_t v199 = v185;
            }
            ((void (*)(char *, uint64_t))v194)(v408, v199);
            uint64_t v217 = v394;
            ((void (*)(uint64_t, char *, uint64_t))v129[4].isa)(v394, v397, v125);
            uint64_t v218 = 1;
            v393(v217, 0, 1, v125);
            return v218;
          }
LABEL_118:
          swift_once();
          goto LABEL_44;
        }
        uint64_t v376 = v165;
        if (qword_101636F50 != -1) {
          swift_once();
        }
        uint64_t v200 = type metadata accessor for Logger();
        uint64_t v201 = sub_100010324(v200, (uint64_t)qword_10170E9E8);
        uint64_t v202 = v373;
        uint64_t v203 = v409;
        v402(v373, v408, v409);
        uint64_t v204 = v377;
        ((void (*)(char *, uint64_t, uint64_t))v177)(v377, v113, v125);
        v367 = (char *)v201;
        uint64_t v205 = Logger.logObject.getter();
        os_log_type_t v206 = static os_log_type_t.default.getter();
        int v207 = v206;
        if (os_log_type_enabled(v205, v206))
        {
          uint64_t v208 = swift_slowAlloc();
          p_Class isa = (void *)swift_slowAlloc();
          v419 = p_isa;
          *(_DWORD *)uint64_t v208 = 141558531;
          *(void *)&long long v416 = 1752392040;
          LODWORD(v401) = v207;
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          *(_WORD *)(v208 + 12) = 2081;
          sub_100B22DA4((unint64_t *)&qword_101638B10, (void (*)(uint64_t))&type metadata accessor for UUID);
          uint64_t v209 = dispatch thunk of CustomStringConvertible.description.getter();
          *(void *)&long long v416 = sub_1008FA0F0(v209, v210, (uint64_t *)&v419);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease();
          Class v211 = v406[1].isa;
          ((void (*)(char *, uint64_t))v211)(v202, v203);
          *(_WORD *)(v208 + 22) = 2082;
          sub_100B22DA4((unint64_t *)&qword_101638DA0, (void (*)(uint64_t))&type metadata accessor for Date);
          uint64_t v212 = dispatch thunk of CustomStringConvertible.description.getter();
          *(void *)&long long v416 = sub_1008FA0F0(v212, v213, (uint64_t *)&v419);
          uint64_t v125 = v399;
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease();
          ((void (*)(char *, uint64_t))v396)(v204, v125);
          _os_log_impl((void *)&_mh_execute_header, v205, (os_log_type_t)v401, "Beacon %{private,mask.hash}s is not connected. Last seen: %{public}s.", (uint8_t *)v208, 0x20u);
          swift_arrayDestroy();
          uint64_t v214 = v408;
          swift_slowDealloc();
          swift_slowDealloc();
        }
        else
        {
          Class v211 = v406[1].isa;
          ((void (*)(char *, uint64_t))v211)(v202, v203);
          ((void (*)(char *, uint64_t))v396)(v204, v125);

          uint64_t v214 = v408;
        }
        unint64_t v219 = v400;
        os_log_t v220 = v404;
        if (v378)
        {
          sub_100ACCD98(v365, (uint64_t)&v416);
          if (v417)
          {
            sub_10001CEB0(&v416, (uint64_t)&v419);
            uint64_t v221 = v420;
            uint64_t v222 = v421;
            sub_10001CD44(&v419, v420);
            uint64_t v223 = (uint64_t)v361;
            (*(void (**)(uint64_t, uint64_t))(v222 + 192))(v221, v222);
            os_log_t v224 = v406;
            Class v225 = v406[6].isa;
            uint64_t v226 = v409;
            v388 = v406 + 6;
            v385 = (unsigned int (*)(char *, uint64_t, uint64_t))v225;
            if (((unsigned int (*)(uint64_t, uint64_t, uint64_t))v225)(v223, 1, v409) == 1)
            {
              os_log_t v227 = (void (*)(char *, uint64_t))v396;
              ((void (*)(char *, uint64_t))v396)(v397, v125);
              v227(v404, v125);
              v227(v400, v125);
              v227(v405, v125);
              sub_10001DAB4(v223, &qword_101638CF0);
              _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)&v419);
              uint64_t v228 = v394;
              uint64_t v229 = v393;
              uint64_t v230 = v226;
LABEL_64:
              ((void (*)(char *, uint64_t))v211)(v214, v230);
              v229(v228, 1, 1, v125);
              return 0;
            }
            v392 = (void (*)(void, void))v211;
            uint64_t v365 = v182;
            uint64_t v234 = (void (*)(void, void, void))v224[4].isa;
            uint64_t v235 = (uint64_t)v360;
            p_Class isa = &v224[4].isa;
            v401 = v234;
            v234(v360, v223, v226);
            sub_100AF03FC(v235, (uint64_t)&v416);
            uint64_t v236 = v417;
            os_log_t v129 = v224;
            if (v417)
            {
              uint64_t v237 = v418;
              sub_10001CD44(&v416, v417);
              uint64_t v238 = v409;
              uint64_t v239 = (*(uint64_t (**)(uint64_t, uint64_t))(v237 + 16))(v236, v237);
              __chkstk_darwin(v239);
              *(&v350 - 2) = v408;
              os_log_type_t v240 = v395;
              uint64_t v242 = sub_100B2AC68((uint64_t)sub_100B3571C, (uint64_t)(&v350 - 4), v241);
              _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)&v416);
              swift_retain();
              unint64_t v243 = (void *)sub_100B324E0(v242);
              v395 = v240;
              swift_release();
              swift_release();
            }
            else
            {
              uint64_t v238 = v226;
              sub_10001DAB4((uint64_t)&v416, (uint64_t *)&unk_10164E7C0);
              unint64_t v243 = _swiftEmptyArrayStorage;
            }
            uint64_t v268 = (uint64_t)v362;
            uint64_t v113 = (uint64_t)v355;
            long long v177 = v371;
            v368 = (unsigned char *)v243[2];
            uint64_t v230 = v238;
            if (v368)
            {
              v377 = (char *)(v243 + 4);
              v375 = (unsigned int (**)(uint64_t, uint64_t, uint64_t))(v353 + 48);
              v374 = (void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v372 + 56);
              v389 = v129 + 1;
              swift_bridgeObjectRetain();
              v373 = (char *)0xD000000000000015;
              v372 = (char *)0x80000001014034F0;
              os_log_t v378 = v129 + 7;
              unint64_t v269 = 0;
              v363 = (char *)((unint64_t)&v129[7] & 0xFFFFFFFFFFFFLL | 0xA0D1000000000000);
              uint64_t v270 = v364;
              v369 = v243;
              while (v269 < v243[2])
              {
                v383 = (char *)v269;
                sub_10001D010((uint64_t)&v377[40 * v269], (uint64_t)&v416);
                uint64_t v271 = v417;
                uint64_t v272 = v418;
                sub_10001CD44(&v416, v417);
                (*(void (**)(uint64_t))(*(void *)(*(void *)(v272 + 8) + 8) + 32))(v271);
                v273._uint64_t countAndFlagsBits = (uint64_t)v373;
                v273._object = v372;
                prohibitAsyncContext(functionName:)(v273);
                __chkstk_darwin(v274);
                *(&v350 - 2) = (char *)v407;
                *(&v350 - 1) = v177;
                uint64_t v275 = (uint64_t)v381;
                uint64_t v276 = v395;
                OS_dispatch_queue.sync<A>(execute:)();
                v395 = v276;
                uint64_t v113 = v390;
                if ((*v375)(v275, 1, v390) == 1)
                {
                  sub_10001DAB4(v275, &qword_10163CBA8);
                  uint64_t v277 = 1;
                  uint64_t v278 = v376;
                }
                else
                {
                  uint64_t v279 = v275;
                  char v280 = *(unsigned char *)(v275 + *(int *)(v113 + 48));
                  uint64_t v278 = v376;
                  uint64_t v281 = *(int *)(v376 + 48);
                  sub_100B30DB4(v279, v268, type metadata accessor for BeaconStatus);
                  uint64_t v277 = 0;
                  *(unsigned char *)(v268 + v281) = v280;
                }
                (*v374)(v268, v277, 1, v278);
                v392(v177, v230);
                if (((unsigned int (*)(uint64_t, uint64_t, uint64_t))v386)(v268, 1, v278) == 1)
                {
                  sub_10001DAB4(v268, (uint64_t *)&unk_1016511A0);
                }
                else
                {
                  char v282 = *(unsigned char *)(v268 + *(int *)(v278 + 48));
                  uint64_t v283 = *(int *)(v113 + 48);
                  uint64_t v284 = v366;
                  sub_100B30DB4(v268, v366, type metadata accessor for BeaconStatus);
                  *(unsigned char *)(v284 + v283) = v282;
                  uint64_t v285 = *(unsigned __int8 *)(v284 + *(int *)(v113 + 48));
                  sub_100B30DB4(v284, v270, type metadata accessor for BeaconStatus);
                  switch(v285)
                  {
                    case 1:
                    case 2:
                      uint64_t v286 = v370;
                      Date.addingTimeInterval(_:)();
                      break;
                    default:
                      uint64_t v286 = v370;
                      static Date.distantPast.getter();
                      break;
                  }
                  long long v177 = v371;
                  Date.timeIntervalSinceNow.getter();
                  if (v287 > 0.0)
                  {
                    unsigned int v288 = sub_1000D07F4(*(unsigned char *)(v270 + *(int *)(v379 + 20)) & 0xB);
                    int v289 = (v288 >> 8) & 1;
                    int v290 = HIWORD(v288) & 1;
                    int v291 = HIBYTE(v288) & 1;
                    uint64_t v292 = v417;
                    uint64_t v293 = v418;
                    uint64_t v294 = sub_10001CD44(&v416, v417);
                    uint64_t v113 = (uint64_t)sub_100B331E0((uint64_t)v294, v289, v290, v291, (uint64_t)v407, v292, v293);
                    int64_t v295 = *(void *)(v113 + 16);
                    if (v295)
                    {
                      v415 = _swiftEmptyArrayStorage;
                      sub_1000B7034(0, v295, 0);
                      uint64_t v296 = v113 + 32;
                      v297 = v415;
                      uint64_t v298 = v354;
                      do
                      {
                        sub_10001D010(v296, (uint64_t)&v412);
                        uint64_t v300 = v413;
                        uint64_t v299 = v414;
                        sub_10001CD44(&v412, v413);
                        (*(void (**)(uint64_t))(*(void *)(*(void *)(v299 + 8) + 8) + 32))(v300);
                        _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)&v412);
                        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
                        {
                          sub_1000B7034(0, v297[2] + 1, 1);
                          v297 = v415;
                        }
                        unint64_t v302 = v297[2];
                        unint64_t v301 = v297[3];
                        if (v302 >= v301 >> 1)
                        {
                          sub_1000B7034(v301 > 1, v302 + 1, 1);
                          v297 = v415;
                        }
                        v297[2] = v302 + 1;
                        ((void (*)(char *, char *, uint64_t))v401)((char *)v297+ ((LOBYTE(v129[10].isa) + 32) & ~(unint64_t)LOBYTE(v129[10].isa))+ (unint64_t)v129[9].isa * v302, v298, v409);
                        v415 = v297;
                        v296 += 40;
                        --v295;
                      }
                      while (v295);
                      swift_bridgeObjectRelease();
                    }
                    else
                    {
                      swift_bridgeObjectRelease();
                      v297 = _swiftEmptyArrayStorage;
                    }
                    uint64_t v303 = v297[2];
                    uint64_t v125 = v399;
                    if (v303)
                    {
                      unint64_t v304 = (char *)v297 + ((LOBYTE(v129[10].isa) + 32) & ~(unint64_t)LOBYTE(v129[10].isa));
                      swift_bridgeObjectRetain();
                      uint64_t v113 = (uint64_t)v129[9].isa;
                      while (1)
                      {
                        int64_t v305 = v391;
                        uint64_t v306 = v409;
                        v402(v391, v304, v409);
                        v307 = (void (*)(char *, uint64_t, uint64_t, uint64_t))v378->isa;
                        ((void (*)(char *, void, uint64_t, uint64_t))v378->isa)(v305, 0, 1, v306);
                        if (v385(v305, 1, v306) == 1) {
                          break;
                        }
                        uint64_t v308 = v125;
                        uint64_t v309 = v384;
                        ((void (*)(char *, char *, uint64_t))v401)(v384, v305, v306);
                        sub_100B22DA4((unint64_t *)&qword_10163B8F0, (void (*)(uint64_t))&type metadata accessor for UUID);
                        char v310 = dispatch thunk of static Equatable.== infix(_:_:)();
                        v392(v309, v306);
                        if (v310)
                        {
                          uint64_t v311 = (uint64_t)v369;
                          swift_bridgeObjectRelease();
                          swift_bridgeObjectRelease_n();
                          uint64_t v312 = v351;
                          uint64_t v313 = v409;
                          v402(v351, v408, v409);
                          sub_10001D010((uint64_t)&v416, (uint64_t)&v412);
                          uint64_t v314 = v364;
                          uint64_t v315 = v352;
                          sub_100B30D0C(v364, v352, type metadata accessor for BeaconStatus);
                          swift_bridgeObjectRetain();
                          v316 = Logger.logObject.getter();
                          os_log_type_t v317 = static os_log_type_t.default.getter();
                          int v318 = v317;
                          if (os_log_type_enabled(v316, v317))
                          {
                            uint64_t v319 = swift_slowAlloc();
                            p_Class isa = (void *)swift_slowAlloc();
                            v415 = p_isa;
                            *(_DWORD *)uint64_t v319 = 141559299;
                            uint64_t v411 = 1752392040;
                            UnsafeMutableRawBufferPointer.copyMemory(from:)();
                            *(_WORD *)(v319 + 12) = 2081;
                            sub_100B22DA4((unint64_t *)&qword_101638B10, (void (*)(uint64_t))&type metadata accessor for UUID);
                            LODWORD(v407) = v318;
                            uint64_t v320 = dispatch thunk of CustomStringConvertible.description.getter();
                            uint64_t v411 = sub_1008FA0F0(v320, v321, (uint64_t *)&v415);
                            UnsafeMutableRawBufferPointer.copyMemory(from:)();
                            swift_bridgeObjectRelease();
                            v322 = (void (*)(char *, uint64_t))v392;
                            os_log_t v406 = v316;
                            v392(v312, v409);
                            *(_WORD *)(v319 + 22) = 2048;
                            uint64_t v323 = *(void *)(v311 + 16);
                            swift_bridgeObjectRelease();
                            uint64_t v411 = v323;
                            UnsafeMutableRawBufferPointer.copyMemory(from:)();
                            swift_bridgeObjectRelease();
                            *(_WORD *)(v319 + 32) = 2160;
                            uint64_t v411 = 1752392040;
                            UnsafeMutableRawBufferPointer.copyMemory(from:)();
                            *(_WORD *)(v319 + 42) = 2081;
                            v324 = v408;
                            uint64_t v326 = v413;
                            uint64_t v325 = v414;
                            sub_10001CD44(&v412, v413);
                            v327 = v350;
                            (*(void (**)(uint64_t))(*(void *)(*(void *)(v325 + 8) + 8) + 32))(v326);
                            uint64_t v328 = v399;
                            uint64_t v329 = dispatch thunk of CustomStringConvertible.description.getter();
                            unint64_t v331 = v330;
                            v322(v327, v409);
                            uint64_t v411 = sub_1008FA0F0(v329, v331, (uint64_t *)&v415);
                            UnsafeMutableRawBufferPointer.copyMemory(from:)();
                            swift_bridgeObjectRelease();
                            _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)&v412);
                            *(_WORD *)(v319 + 52) = 2082;
                            uint64_t v332 = v352;
                            sub_100B22DA4((unint64_t *)&qword_101638DA0, (void (*)(uint64_t))&type metadata accessor for Date);
                            uint64_t v333 = dispatch thunk of CustomStringConvertible.description.getter();
                            uint64_t v411 = sub_1008FA0F0(v333, v334, (uint64_t *)&v415);
                            UnsafeMutableRawBufferPointer.copyMemory(from:)();
                            swift_bridgeObjectRelease();
                            sub_100B310AC(v332, type metadata accessor for BeaconStatus);
                            os_log_t v335 = v406;
                            _os_log_impl((void *)&_mh_execute_header, v406, (os_log_type_t)v407, "Beacon %{private,mask.hash}s has %ld peers and is connected by %{private,mask.hash}s since %{public}s.", (uint8_t *)v319, 0x3Eu);
                            swift_arrayDestroy();
                            uint64_t v313 = v409;
                            swift_slowDealloc();
                            swift_slowDealloc();

                            sub_100B310AC(v364, type metadata accessor for BeaconStatus);
                            v322(v360, v313);
                            v336 = (void (*)(char *, uint64_t))v396;
                            ((void (*)(char *, uint64_t))v396)(v397, v328);
                            v336(v404, v328);
                            v336(v400, v328);
                            v336(v405, v328);
                            uint64_t v337 = v398;
                            v338 = v370;
                          }
                          else
                          {
                            uint64_t v328 = v308;

                            swift_bridgeObjectRelease();
                            sub_100B310AC(v315, type metadata accessor for BeaconStatus);
                            _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)&v412);
                            swift_bridgeObjectRelease();
                            v322 = (void (*)(char *, uint64_t))v392;
                            v392(v312, v313);
                            sub_100B310AC(v314, type metadata accessor for BeaconStatus);
                            v322(v360, v313);
                            v348 = (void (*)(char *, uint64_t))v396;
                            ((void (*)(char *, uint64_t))v396)(v397, v308);
                            v348(v404, v308);
                            v348(v400, v308);
                            v348(v405, v308);
                            uint64_t v337 = v398;
                            v338 = v370;
                            v324 = v408;
                          }
                          v322(v324, v313);
                          uint64_t v349 = v394;
                          (*(void (**)(uint64_t, char *, uint64_t))(v337 + 32))(v394, v338, v328);
                          uint64_t v218 = 1;
                          (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v337 + 56))(v349, 0, 1, v328);
                          _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)&v416);
                          _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)&v419);
                          return v218;
                        }
                        v304 += v113;
                        --v303;
                        os_log_t v129 = v406;
                        uint64_t v125 = v308;
                        if (!v303) {
                          goto LABEL_105;
                        }
                      }
                    }
                    else
                    {
                      v307 = (void (*)(char *, uint64_t, uint64_t, uint64_t))v378->isa;
                      swift_bridgeObjectRetain();
LABEL_105:
                      uint64_t v306 = v409;
                      v307(v391, 1, 1, v409);
                    }
                    swift_bridgeObjectRelease_n();
                    uint64_t v230 = v306;
                    uint64_t v270 = v364;
                    uint64_t v286 = v370;
                    uint64_t v268 = (uint64_t)v362;
                    long long v177 = v371;
                  }
                  ((void (*)(char *, uint64_t))v396)(v286, v125);
                  sub_100B310AC(v270, type metadata accessor for BeaconStatus);
                }
                unint64_t v243 = v369;
                unint64_t v269 = (unint64_t)(v383 + 1);
                _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)&v416);
                if ((unsigned char *)v269 == v368)
                {
                  swift_bridgeObjectRelease();
                  uint64_t v113 = (uint64_t)v355;
                  goto LABEL_111;
                }
              }
              __break(1u);
              goto LABEL_118;
            }
LABEL_111:
            uint64_t v214 = v408;
            v402((char *)v113, v408, v230);
            swift_bridgeObjectRetain();
            v339 = Logger.logObject.getter();
            os_log_type_t v340 = static os_log_type_t.default.getter();
            if (os_log_type_enabled(v339, v340))
            {
              uint64_t v341 = swift_slowAlloc();
              p_Class isa = (void *)swift_slowAlloc();
              *(void *)&long long v416 = p_isa;
              *(_DWORD *)uint64_t v341 = 141558531;
              uint64_t v412 = 1752392040;
              UnsafeMutableRawBufferPointer.copyMemory(from:)();
              *(_WORD *)(v341 + 12) = 2081;
              sub_100B22DA4((unint64_t *)&qword_101638B10, (void (*)(uint64_t))&type metadata accessor for UUID);
              uint64_t v342 = dispatch thunk of CustomStringConvertible.description.getter();
              uint64_t v412 = sub_1008FA0F0(v342, v343, (uint64_t *)&v416);
              UnsafeMutableRawBufferPointer.copyMemory(from:)();
              swift_bridgeObjectRelease();
              v344 = (objc_class *)v392;
              v392(v113, v409);
              *(_WORD *)(v341 + 22) = 2048;
              uint64_t v345 = v243[2];
              swift_bridgeObjectRelease();
              uint64_t v412 = v345;
              uint64_t v214 = v408;
              Class v211 = v344;
              UnsafeMutableRawBufferPointer.copyMemory(from:)();
              swift_bridgeObjectRelease();
              _os_log_impl((void *)&_mh_execute_header, v339, v340, "Beacon %{private,mask.hash}s has %ld peers and is not connected.", (uint8_t *)v341, 0x20u);
              swift_arrayDestroy();
              uint64_t v230 = v409;
              swift_slowDealloc();
              swift_slowDealloc();
            }
            else
            {

              swift_bridgeObjectRelease_n();
              uint64_t v346 = v113;
              Class v211 = (Class)v392;
              v392(v346, v230);
            }
            ((void (*)(char *, uint64_t))v211)(v360, v230);
            v347 = (void (*)(char *, uint64_t))v396;
            ((void (*)(char *, uint64_t))v396)(v397, v125);
            v347(v404, v125);
            v347(v400, v125);
            v347(v405, v125);
            uint64_t v228 = v394;
            _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)&v419);
LABEL_63:
            uint64_t v229 = v393;
            goto LABEL_64;
          }
          uint64_t v233 = (void (*)(char *, uint64_t))v396;
          ((void (*)(char *, uint64_t))v396)(v397, v125);
          v233(v220, v125);
          v233(v219, v125);
          v233(v405, v125);
          sub_10001DAB4((uint64_t)&v416, (uint64_t *)&unk_10163BBE0);
        }
        else
        {
          uint64_t v231 = (void (*)(char *, uint64_t))v396;
          ((void (*)(char *, uint64_t))v396)(v397, v125);
          v231(v220, v125);
          v231(v219, v125);
          v231(v405, v125);
        }
        uint64_t v228 = v394;
        uint64_t v230 = v409;
        goto LABEL_63;
      }
    }
    v393 = v130;
    static Date.distantPast.getter();
    sub_10001DAB4(v128, (uint64_t *)&unk_10163AC90);
    goto LABEL_33;
  }
  BOOL v131 = v408;
  if (qword_101636F50 != -1) {
    swift_once();
  }
  uint64_t v132 = type metadata accessor for Logger();
  sub_100010324(v132, (uint64_t)qword_10170E9E8);
  BOOL v133 = v367;
  uint64_t v134 = v409;
  v402(v367, v131, v409);
  uint64_t v135 = v392;
  int v136 = v372;
  sub_100B30D0C((uint64_t)v392, (uint64_t)v372, (uint64_t (*)(void))type metadata accessor for BeaconObservation);
  int v137 = Logger.logObject.getter();
  os_log_type_t v138 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v137, v138))
  {
    uint64_t v139 = swift_slowAlloc();
    p_Class isa = (void *)swift_slowAlloc();
    v419 = p_isa;
    *(_DWORD *)uint64_t v139 = 141558531;
    *(void *)&long long v416 = 1752392040;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v139 + 12) = 2081;
    sub_100B22DA4((unint64_t *)&qword_101638B10, (void (*)(uint64_t))&type metadata accessor for UUID);
    uint64_t v140 = dispatch thunk of CustomStringConvertible.description.getter();
    *(void *)&long long v416 = sub_1008FA0F0(v140, v141, (uint64_t *)&v419);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    Class v142 = v406[1].isa;
    ((void (*)(char *, uint64_t))v142)(v133, v409);
    *(_WORD *)(v139 + 22) = 2082;
    uint64_t v143 = v372;
    sub_100B22DA4((unint64_t *)&qword_101638DA0, (void (*)(uint64_t))&type metadata accessor for Date);
    uint64_t v144 = v399;
    uint64_t v145 = dispatch thunk of CustomStringConvertible.description.getter();
    *(void *)&long long v416 = sub_1008FA0F0(v145, v146, (uint64_t *)&v419);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    sub_100B310AC((uint64_t)v143, (uint64_t (*)(void))type metadata accessor for BeaconObservation);
    _os_log_impl((void *)&_mh_execute_header, v137, v138, "Beacon %{private,mask.hash}s is connected (via bluetooth) since: %{public}s.", (uint8_t *)v139, 0x20u);
    swift_arrayDestroy();
    uint64_t v134 = v409;
    swift_slowDealloc();
    swift_slowDealloc();

    sub_100B310AC((uint64_t)v392, (uint64_t (*)(void))type metadata accessor for BeaconObservation);
  }
  else
  {

    sub_100B310AC((uint64_t)v136, (uint64_t (*)(void))type metadata accessor for BeaconObservation);
    Class v142 = v406[1].isa;
    ((void (*)(char *, uint64_t))v142)(v133, v134);
    sub_100B310AC((uint64_t)v135, (uint64_t (*)(void))type metadata accessor for BeaconObservation);
    uint64_t v144 = v399;
  }
  uint64_t v232 = v398;
  ((void (*)(char *, uint64_t))v142)(v408, v134);
  uint64_t v218 = 1;
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v232 + 56))(v394, 1, 1, v144);
  return v218;
}

BOOL sub_100AFB468()
{
  return (dispatch thunk of static Equatable.== infix(_:_:)() & 1) == 0;
}

uint64_t sub_100AFB4FC(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for OwnedBeaconRecord();
  __chkstk_darwin(v4);
  uint64_t v6 = (char *)&v32 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = sub_10000588C((uint64_t *)&unk_1016511A0);
  __chkstk_darwin(v7 - 8);
  uint64_t v9 = (char *)&v32 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = type metadata accessor for BeaconStatus(0);
  uint64_t v11 = __chkstk_darwin(v10);
  uint64_t v13 = (char *)&v32 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v11);
  uint64_t v15 = (char *)&v32 - v14;
  sub_100AE9138(a2 + *(int *)(v4 + 20), (uint64_t)v9);
  uint64_t v16 = sub_10000588C(&qword_1016511B0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v16 - 8) + 48))(v9, 1, v16) == 1)
  {
    sub_10001DAB4((uint64_t)v9, (uint64_t *)&unk_1016511A0);
    if (qword_101636F50 != -1) {
      swift_once();
    }
    uint64_t v17 = type metadata accessor for Logger();
    sub_100010324(v17, (uint64_t)qword_10170E9E8);
    sub_100B30D0C(a2, (uint64_t)v6, (uint64_t (*)(void))type metadata accessor for OwnedBeaconRecord);
    uint64_t v18 = Logger.logObject.getter();
    os_log_type_t v19 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v18, v19))
    {
      uint64_t v20 = (uint8_t *)swift_slowAlloc();
      uint64_t v33 = swift_slowAlloc();
      *(_DWORD *)uint64_t v20 = 136315138;
      type metadata accessor for UUID();
      sub_100B22DA4((unint64_t *)&qword_101638B10, (void (*)(uint64_t))&type metadata accessor for UUID);
      uint64_t v21 = dispatch thunk of CustomStringConvertible.description.getter();
      uint64_t v32 = sub_1008FA0F0(v21, v22, &v33);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      sub_100B310AC((uint64_t)v6, (uint64_t (*)(void))type metadata accessor for OwnedBeaconRecord);
      _os_log_impl((void *)&_mh_execute_header, v18, v19, "No multipart observation for beacon %s", v20, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      sub_100B310AC((uint64_t)v6, (uint64_t (*)(void))type metadata accessor for OwnedBeaconRecord);
    }

    static Date.distantPast.getter();
    return 0;
  }
  else
  {
    sub_100B30DB4((uint64_t)v9, (uint64_t)v13, type metadata accessor for BeaconStatus);
    sub_100B30DB4((uint64_t)v13, (uint64_t)v15, type metadata accessor for BeaconStatus);
    unsigned int v23 = sub_1000D07F4(v15[*(int *)(v10 + 20)] & 0xB);
    int v24 = (v23 >> 8) & 1;
    int v25 = HIWORD(v23) & 1;
    int v26 = HIBYTE(v23) & 1;
    uint64_t v27 = sub_100B354CC(a2);
    uint64_t v28 = sub_1000D0EB0(v24, v25, v26, v27);
    uint64_t v29 = &v15[*(int *)(v10 + 24)];
    uint64_t v30 = type metadata accessor for Date();
    (*(void (**)(uint64_t, char *, uint64_t))(*(void *)(v30 - 8) + 16))(a1, v29, v30);
    sub_100B310AC((uint64_t)v15, type metadata accessor for BeaconStatus);
  }
  return v28;
}

void *sub_100AFB97C(uint64_t a1, uint64_t a2)
{
  uint64_t v248 = a2;
  uint64_t v247 = sub_10000588C((uint64_t *)&unk_10166EAF0);
  __chkstk_darwin(v247);
  uint64_t v252 = (uint64_t)&v220 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = sub_10000588C(&qword_10163BBA0);
  __chkstk_darwin(v4 - 8);
  unint64_t v264 = (char *)&v220 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v238 = sub_10000588C(&qword_10163B9E0);
  __chkstk_darwin(v238);
  uint64_t v239 = (char *)&v220 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for UUID();
  uint64_t v241 = *(void *)(v7 - 8);
  uint64_t v8 = __chkstk_darwin(v7);
  uint64_t v229 = (char *)&v220 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = __chkstk_darwin(v8);
  uint64_t v222 = (char *)&v220 - v11;
  uint64_t v12 = __chkstk_darwin(v10);
  int v251 = (char *)&v220 - v13;
  uint64_t v14 = __chkstk_darwin(v12);
  uint64_t v242 = (char *)&v220 - v15;
  uint64_t v16 = __chkstk_darwin(v14);
  uint64_t v246 = (char *)&v220 - v17;
  uint64_t v18 = __chkstk_darwin(v16);
  uint64_t v245 = (char *)&v220 - v19;
  uint64_t v20 = __chkstk_darwin(v18);
  uint64_t v253 = (char *)&v220 - v21;
  uint64_t v22 = __chkstk_darwin(v20);
  uint64_t v262 = (char *)&v220 - v23;
  uint64_t v24 = __chkstk_darwin(v22);
  uint64_t v223 = (char *)&v220 - v25;
  uint64_t v26 = __chkstk_darwin(v24);
  uint64_t v237 = (char *)&v220 - v27;
  __chkstk_darwin(v26);
  uint64_t v259 = (char *)&v220 - v28;
  uint64_t v29 = sub_10000588C(&qword_101638CF0);
  uint64_t v30 = __chkstk_darwin(v29 - 8);
  uint64_t v244 = (uint64_t)&v220 - ((v31 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v32 = __chkstk_darwin(v30);
  uint64_t v255 = (uint64_t)&v220 - v33;
  uint64_t v34 = __chkstk_darwin(v32);
  unint64_t v265 = (char *)&v220 - v35;
  uint64_t v36 = __chkstk_darwin(v34);
  uint64_t v231 = (char *)&v220 - v37;
  uint64_t v38 = __chkstk_darwin(v36);
  uint64_t v278 = (uint8_t *)&v220 - v39;
  __chkstk_darwin(v38);
  uint64_t v41 = (char *)&v220 - v40;
  uint64_t v271 = type metadata accessor for BeaconStatus(0);
  uint64_t v279 = *(uint8_t **)(v271 - 8);
  uint64_t v42 = __chkstk_darwin(v271);
  uint64_t v243 = (uint64_t)&v220 - ((v43 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v44 = __chkstk_darwin(v42);
  uint64_t v254 = (uint64_t)&v220 - v45;
  uint64_t v46 = __chkstk_darwin(v44);
  uint64_t v48 = (char *)&v220 - v47;
  __chkstk_darwin(v46);
  uint64_t v50 = (char *)&v220 - v49;
  uint64_t v285 = &_swiftEmptySetSingleton;
  uint64_t v51 = a1 + 56;
  uint64_t v52 = 1 << *(unsigned char *)(a1 + 32);
  uint64_t v53 = -1;
  if (v52 < 64) {
    uint64_t v53 = ~(-1 << v52);
  }
  unint64_t v54 = v53 & *(void *)(a1 + 56);
  int64_t v55 = (unint64_t)(v52 + 63) >> 6;
  uint64_t v268 = a1;
  swift_bridgeObjectRetain();
  int64_t v56 = 0;
  while (v54)
  {
    unint64_t v57 = __clz(__rbit64(v54));
    v54 &= v54 - 1;
    unint64_t v58 = v57 | (v56 << 6);
LABEL_5:
    uint64_t v59 = *((void *)v279 + 9);
    sub_100B30D0C(*(void *)(v268 + 48) + v59 * v58, (uint64_t)v50, type metadata accessor for BeaconStatus);
    sub_100B30DB4((uint64_t)v50, (uint64_t)v48, type metadata accessor for BeaconStatus);
    uint64_t v60 = *(void *)&v48[*(int *)(v271 + 36)];
    sub_100B310AC((uint64_t)v48, type metadata accessor for BeaconStatus);
    if (v60)
    {
      uint64_t v236 = v59;
      swift_release();
      if (qword_101636F60 != -1) {
        goto LABEL_122;
      }
      while (1)
      {
        uint64_t v64 = type metadata accessor for Logger();
        uint64_t v65 = sub_100010324(v64, (uint64_t)qword_10170EA18);
        sub_10001D074(v248, (uint64_t)v41, &qword_101638CF0);
        uint64_t v250 = v65;
        uint64_t v66 = Logger.logObject.getter();
        os_log_type_t v67 = static os_log_type_t.default.getter();
        if (os_log_type_enabled(v66, v67))
        {
          uint64_t v68 = swift_slowAlloc();
          uint64_t v283 = (void *)swift_slowAlloc();
          *(_DWORD *)uint64_t v68 = 141558275;
          uint64_t v281 = 1752392040;
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          *(_WORD *)(v68 + 12) = 2081;
          uint64_t v69 = (uint64_t)v278;
          sub_10001D074((uint64_t)v41, (uint64_t)v278, &qword_101638CF0);
          uint64_t v70 = v241;
          if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v241 + 48))(v69, 1, v7) == 1)
          {
            sub_10001DAB4(v69, &qword_101638CF0);
            unint64_t v71 = 0xE400000000000000;
            uint64_t v72 = 1701736302;
          }
          else
          {
            uint64_t v74 = v69;
            uint64_t v72 = UUID.uuidString.getter();
            unint64_t v71 = v75;
            (*(void (**)(uint64_t, uint64_t))(v70 + 8))(v74, v7);
          }
          uint64_t v281 = sub_1008FA0F0(v72, v71, (uint64_t *)&v283);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease();
          sub_10001DAB4((uint64_t)v41, &qword_101638CF0);
          _os_log_impl((void *)&_mh_execute_header, v66, v67, "Primary beacon: %{private,mask.hash}s", (uint8_t *)v68, 0x16u);
          swift_arrayDestroy();
          swift_slowDealloc();
          swift_slowDealloc();
        }
        else
        {
          sub_10001DAB4((uint64_t)v41, &qword_101638CF0);
        }

        uint64_t v76 = swift_bridgeObjectRetain();
        uint64_t v77 = sub_10071062C(v76);
        uint64_t v78 = swift_bridgeObjectRelease();
        __chkstk_darwin(v78);
        *((void *)&v220 - 2) = v248;
        uint64_t v283 = v77;
        swift_retain();
        sub_100AA863C(sub_100B59D9C, (uint64_t)(&v220 - 2));
        uint64_t v263 = 0;
        swift_release();
        uint64_t v79 = (uint64_t)v283;
        swift_retain_n();
        uint64_t v80 = Logger.logObject.getter();
        os_log_type_t v81 = static os_log_type_t.default.getter();
        BOOL v82 = os_log_type_enabled(v80, v81);
        uint64_t v240 = v79;
        if (v82)
        {
          uint64_t v83 = (uint8_t *)swift_slowAlloc();
          uint64_t v283 = (void *)swift_slowAlloc();
          *(_DWORD *)uint64_t v83 = 136315138;
          uint64_t v278 = v83 + 4;
          swift_retain();
          uint64_t v84 = Array.description.getter();
          unint64_t v86 = v85;
          swift_release();
          uint64_t v281 = sub_1008FA0F0(v84, v86, (uint64_t *)&v283);
          uint64_t v79 = v240;
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_release_n();
          swift_bridgeObjectRelease();
          _os_log_impl((void *)&_mh_execute_header, v80, v81, "sortedStatuses %s", v83, 0xCu);
          swift_arrayDestroy();
          swift_slowDealloc();
          swift_slowDealloc();
        }
        else
        {

          swift_release_n();
        }
        uint64_t v87 = (uint64_t)v239;
        uint64_t v88 = (uint64_t)v259;
        uint64_t v284 = &_swiftEmptySetSingleton;
        uint64_t v235 = *(void *)(v79 + 16);
        if (!v235)
        {
LABEL_117:
          swift_release();
          swift_bridgeObjectRelease();
          return v285;
        }
        uint64_t v234 = OBJC_IVAR____TtC12searchpartyd11BeaconStore_cachedBeaconRecordsQueueSynchronizer;
        uint64_t v89 = v279;
        unint64_t v233 = v79 + ((v89[80] + 32) & ~(unint64_t)v89[80]);
        swift_beginAccess();
        unint64_t v90 = 0;
        uint64_t v91 = (uint64_t (**)(uint64_t, uint64_t, uint64_t))(v241 + 16);
        uint64_t v275 = (void (**)(char *, uint64_t))(v241 + 8);
        uint64_t v228 = (uint64_t *)&v283;
        uint64_t v273 = v241 + 56;
        uint64_t v258 = v241 + 48;
        uint64_t v266 = (void (**)(char *, char *, uint64_t))(v241 + 32);
        uint64_t v260 = (unsigned int (**)(uint64_t, uint64_t, uint64_t))(v89 + 48);
        uint64_t v221 = &v281;
        *(void *)&long long v92 = 136315907;
        long long v227 = v92;
        uint64_t v226 = (char *)&type metadata for Any + 8;
        *(void *)&long long v92 = 141558275;
        long long v224 = v92;
        uint64_t v93 = v241;
        *((void *)&v92 + 1) = 2;
        long long v225 = xmmword_101342130;
        *(void *)&long long v92 = 136315138;
        long long v220 = v92;
        uint64_t v94 = v236;
        uint64_t v41 = v263;
        uint64_t v278 = (uint8_t *)(v241 + 16);
        while (1)
        {
          if (v90 >= *(void *)(v79 + 16))
          {
LABEL_119:
            __break(1u);
            goto LABEL_120;
          }
          unint64_t v249 = v90;
          uint64_t v96 = v254;
          sub_100B30D0C(v233 + v90 * v94, v254, type metadata accessor for BeaconStatus);
          uint64_t v97 = *v91;
          uint64_t v98 = (*v91)(v88, v96, v7);
          __chkstk_darwin(v98);
          *((void *)&v220 - 2) = v99;
          *((void *)&v220 - 1) = v88;
          QueueSynchronizer.conditionalSync<A>(_:)();
          uint64_t v263 = v41;
          uint64_t v100 = type metadata accessor for BeaconNamingRecord();
          if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v100 - 8) + 48))(v87, 1, v100) == 1)
          {
            sub_10001DAB4(v87, &qword_10163B9E0);
            uint64_t v101 = 0;
            unint64_t v102 = 0xE000000000000000;
          }
          else
          {
            uint64_t v103 = (uint64_t *)(v87 + *(int *)(v100 + 32));
            uint64_t v101 = *v103;
            unint64_t v102 = v103[1];
            swift_bridgeObjectRetain();
            sub_100B310AC(v87, (uint64_t (*)(void))type metadata accessor for BeaconNamingRecord);
          }
          uint64_t v104 = v237;
          uint64_t v279 = (uint8_t *)v97;
          v97((uint64_t)v237, v88, v7);
          uint64_t v105 = v243;
          sub_100B30D0C(v254, v243, type metadata accessor for BeaconStatus);
          swift_bridgeObjectRetain();
          uint64_t v106 = Logger.logObject.getter();
          os_log_type_t v107 = static os_log_type_t.debug.getter();
          if (os_log_type_enabled(v106, v107))
          {
            uint64_t v108 = swift_slowAlloc();
            uint64_t v277 = swift_slowAlloc();
            uint64_t v281 = v277;
            *(_DWORD *)uint64_t v108 = v227;
            swift_bridgeObjectRetain();
            uint64_t v282 = sub_1008FA0F0(v101, v102, &v281);
            UnsafeMutableRawBufferPointer.copyMemory(from:)();
            swift_bridgeObjectRelease_n();
            *(_WORD *)(v108 + 12) = 2160;
            uint64_t v282 = 1752392040;
            UnsafeMutableRawBufferPointer.copyMemory(from:)();
            *(_WORD *)(v108 + 22) = 2081;
            sub_100B22DA4((unint64_t *)&qword_101638B10, (void (*)(uint64_t))&type metadata accessor for UUID);
            uint64_t v109 = dispatch thunk of CustomStringConvertible.description.getter();
            uint64_t v282 = sub_1008FA0F0(v109, v110, &v281);
            UnsafeMutableRawBufferPointer.copyMemory(from:)();
            swift_bridgeObjectRelease();
            unint64_t v269 = *v275;
            v269(v104, v7);
            *(_WORD *)(v108 + 32) = 2080;
            uint64_t v111 = v243;
            sub_100B22DA4(&qword_10163BC60, (void (*)(uint64_t))&type metadata accessor for UUID);
            swift_bridgeObjectRetain();
            uint64_t v112 = Set.description.getter();
            unint64_t v114 = v113;
            swift_bridgeObjectRelease();
            uint64_t v282 = sub_1008FA0F0(v112, v114, &v281);
            uint64_t v93 = v241;
            UnsafeMutableRawBufferPointer.copyMemory(from:)();
            swift_bridgeObjectRelease();
            sub_100B310AC(v111, type metadata accessor for BeaconStatus);
            _os_log_impl((void *)&_mh_execute_header, v106, v107, "(%s) %{private,mask.hash}s nearby: %s", (uint8_t *)v108, 0x2Au);
            swift_arrayDestroy();
            swift_slowDealloc();
            swift_slowDealloc();
          }
          else
          {
            swift_bridgeObjectRelease_n();
            unint64_t v269 = *v275;
            v269(v104, v7);
            sub_100B310AC(v105, type metadata accessor for BeaconStatus);
          }

          uint64_t v115 = (uint64_t)v284;
          swift_bridgeObjectRetain();
          uint64_t v88 = (uint64_t)v259;
          char v116 = sub_100DC7280((uint64_t)v259, v115);
          swift_bridgeObjectRelease();
          uint64_t v91 = (uint64_t (**)(uint64_t, uint64_t, uint64_t))v278;
          if (v116)
          {
            unint64_t v117 = v229;
            ((void (*)(char *, uint64_t, uint64_t))v279)(v229, v88, v7);
            uint64_t v118 = Logger.logObject.getter();
            os_log_type_t v119 = static os_log_type_t.debug.getter();
            if (os_log_type_enabled(v118, v119))
            {
              uint64_t v120 = swift_slowAlloc();
              uint64_t v281 = swift_slowAlloc();
              *(_DWORD *)uint64_t v120 = v224;
              *(void *)(v120 + 4) = 1752392040;
              *(_WORD *)(v120 + 12) = 2081;
              sub_100B22DA4((unint64_t *)&qword_101638B10, (void (*)(uint64_t))&type metadata accessor for UUID);
              uint64_t v121 = dispatch thunk of CustomStringConvertible.description.getter();
              *(void *)(v120 + 14) = sub_1008FA0F0(v121, v122, &v281);
              swift_bridgeObjectRelease();
              uint64_t v123 = v117;
              int v124 = (void (*)(uint64_t, uint64_t))v269;
              v269(v123, v7);
              _os_log_impl((void *)&_mh_execute_header, v118, v119, "%{private,mask.hash}s has already been inserted", (uint8_t *)v120, 0x16u);
              swift_arrayDestroy();
              swift_slowDealloc();
              swift_slowDealloc();

              v124(v88, v7);
            }
            else
            {

              uint64_t v134 = (void (*)(uint64_t, uint64_t))v269;
              v269(v117, v7);
              v134(v88, v7);
            }
            sub_100B310AC(v254, type metadata accessor for BeaconStatus);
            uint64_t v87 = (uint64_t)v239;
            uint64_t v94 = v236;
            uint64_t v41 = v263;
            uint64_t v79 = v240;
            goto LABEL_116;
          }
          sub_10000588C(&qword_10163BC50);
          unint64_t v125 = (*(unsigned __int8 *)(v93 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v93 + 80);
          uint64_t v274 = *(void *)(v93 + 72);
          uint64_t v126 = swift_allocObject();
          *(_OWORD *)(v126 + 16) = v225;
          unint64_t v127 = v126 + v125;
          uint64_t v128 = v279;
          ((void (*)(unint64_t, uint64_t, uint64_t))v279)(v126 + v125, v88, v7);
          uint64_t v129 = sub_100B22DA4(&qword_10163BC60, (void (*)(uint64_t))&type metadata accessor for UUID);
          uint64_t v130 = Set.init(minimumCapacity:)();
          BOOL v131 = v231;
          ((void (*)(char *, unint64_t, uint64_t))v128)(v231, v127, v7);
          uint64_t v272 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v93 + 56);
          v272(v131, 0, 1, v7);
          uint64_t v270 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v93 + 48);
          int v132 = v270(v131, 1, v7);
          uint64_t v267 = (unint64_t)v275 & 0xFFFFFFFFFFFFLL | 0x4F8000000000000;
          uint64_t v230 = v129;
          if (v132 == 1)
          {
            uint64_t v133 = (uint64_t)v264;
            uint64_t v41 = v263;
          }
          else
          {
            uint64_t v277 = v127;
            uint64_t v135 = v223;
            (*v266)(v223, v131, v7);
            swift_bridgeObjectRetain();
            uint64_t v136 = dispatch thunk of Hashable._rawHashValue(seed:)();
            uint64_t v137 = -1 << *(unsigned char *)(v130 + 32);
            unint64_t v138 = v136 & ~v137;
            if ((*(void *)(v130 + 56 + ((v138 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v138))
            {
              uint64_t v139 = ~v137;
              while (1)
              {
                uint64_t v140 = (uint64_t)v262;
                ((void (*)(char *, unint64_t, uint64_t))v279)(v262, *(void *)(v130 + 48) + v138 * v274, v7);
                sub_100B22DA4((unint64_t *)&qword_10163B8F0, (void (*)(uint64_t))&type metadata accessor for UUID);
                char v141 = dispatch thunk of static Equatable.== infix(_:_:)();
                v269((char *)v140, v7);
                if (v141) {
                  break;
                }
                unint64_t v138 = (v138 + 1) & v139;
                if (((*(void *)(v130 + 56 + ((v138 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v138) & 1) == 0) {
                  goto LABEL_58;
                }
              }
            }
            else
            {
LABEL_58:
              swift_bridgeObjectRelease();
              char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
              uint64_t v143 = (uint64_t)v262;
              ((void (*)(char *, char *, uint64_t))v279)(v262, v135, v7);
              uint64_t v281 = v130;
              sub_100DDDE60(v143, v138, isUniquelyReferenced_nonNull_native);
              uint64_t v130 = v281;
            }
            swift_bridgeObjectRelease();
            v269(v135, v7);
            v272(v231, 1, 1, v7);
            uint64_t v133 = (uint64_t)v264;
            uint64_t v41 = v263;
            uint64_t v91 = (uint64_t (**)(uint64_t, uint64_t, uint64_t))v278;
          }
          swift_setDeallocating();
          swift_arrayDestroy();
          swift_deallocClassInstance();
          uint64_t v282 = v130;
          uint64_t v144 = *(void *)(v254 + *(int *)(v271 + 36));
          uint64_t v145 = v265;
          if (v144) {
            break;
          }
          unint64_t v197 = v222;
          uint64_t v88 = (uint64_t)v259;
          ((void (*)(char *, char *, uint64_t))v279)(v222, v259, v7);
          swift_bridgeObjectRetain();
          os_log_type_t v198 = Logger.logObject.getter();
          os_log_type_t v199 = static os_log_type_t.default.getter();
          if (os_log_type_enabled(v198, v199))
          {
            uint64_t v200 = swift_slowAlloc();
            uint64_t v281 = swift_slowAlloc();
            *(_DWORD *)uint64_t v200 = v224;
            *(void *)(v200 + 4) = 1752392040;
            *(_WORD *)(v200 + 12) = 2081;
            sub_100B22DA4((unint64_t *)&qword_101638B10, (void (*)(uint64_t))&type metadata accessor for UUID);
            uint64_t v201 = dispatch thunk of CustomStringConvertible.description.getter();
            *(void *)(v200 + 14) = sub_1008FA0F0(v201, v202, &v281);
            swift_bridgeObjectRelease();
            v269(v197, v7);
            _os_log_impl((void *)&_mh_execute_header, v198, v199, "No nearby peers for %{private,mask.hash}s", (uint8_t *)v200, 0x16u);
            swift_arrayDestroy();
            uint64_t v88 = (uint64_t)v259;
            swift_slowDealloc();
            swift_slowDealloc();
          }
          else
          {
            v269(v197, v7);
          }

          uint64_t v93 = v241;
          uint64_t v41 = v263;
          uint64_t v79 = v240;
          uint64_t v210 = (uint64_t)v284;
          swift_bridgeObjectRetain();
          char v211 = sub_100DC7280(v88, v210);
          swift_bridgeObjectRelease();
          uint64_t v91 = (uint64_t (**)(uint64_t, uint64_t, uint64_t))v278;
          if (v211)
          {
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
          }
          else
          {
            sub_100DD0C54(&v281, v130);
            swift_bridgeObjectRelease();
            uint64_t v212 = v282;
            swift_beginAccess();
            sub_10100A12C(v212);
            swift_endAccess();
            unint64_t v213 = Logger.logObject.getter();
            os_log_type_t v214 = static os_log_type_t.debug.getter();
            if (os_log_type_enabled(v213, v214))
            {
              unint64_t v215 = (uint8_t *)swift_slowAlloc();
              uint64_t v281 = swift_slowAlloc();
              *(_DWORD *)unint64_t v215 = v220;
              uint64_t v279 = v215 + 4;
              swift_bridgeObjectRetain();
              uint64_t v216 = Set.description.getter();
              unint64_t v218 = v217;
              uint64_t v91 = (uint64_t (**)(uint64_t, uint64_t, uint64_t))v278;
              swift_bridgeObjectRelease();
              uint64_t v219 = v216;
              uint64_t v93 = v241;
              uint64_t v280 = sub_1008FA0F0(v219, v218, &v281);
              uint64_t v41 = v263;
              UnsafeMutableRawBufferPointer.copyMemory(from:)();
              uint64_t v88 = (uint64_t)v259;
              swift_bridgeObjectRelease();
              _os_log_impl((void *)&_mh_execute_header, v213, v214, "Inserted: %s", v215, 0xCu);
              swift_arrayDestroy();
              swift_slowDealloc();
              swift_slowDealloc();
            }
          }
          v269((char *)v88, v7);
          sub_100B310AC(v254, type metadata accessor for BeaconStatus);
          uint64_t v87 = (uint64_t)v239;
          uint64_t v94 = v236;
LABEL_116:
          unint64_t v95 = v249;
LABEL_39:
          unint64_t v90 = v95 + 1;
          if (v90 == v235) {
            goto LABEL_117;
          }
        }
        uint64_t v146 = *(void *)(v144 + 56);
        uint64_t v256 = v144 + 56;
        uint64_t v147 = 1 << *(unsigned char *)(v144 + 32);
        if (v147 < 64) {
          uint64_t v148 = ~(-1 << v147);
        }
        else {
          uint64_t v148 = -1;
        }
        uint64_t v277 = v148 & v146;
        int64_t v257 = (unint64_t)(v147 + 63) >> 6;
        swift_bridgeObjectRetain();
        int64_t v149 = 0;
        uint64_t v150 = (uint64_t)v253;
        int v151 = (void (*)(void, void))v269;
        uint64_t v261 = v144;
        while (2)
        {
          if (v277)
          {
            unint64_t v157 = __clz(__rbit64(v277));
            int64_t v276 = v149;
            v277 &= v277 - 1;
            unint64_t v158 = v157 | (v149 << 6);
            goto LABEL_81;
          }
          BOOL v159 = __OFADD__(v149, 1);
          int64_t v160 = v149 + 1;
          if (v159)
          {
            __break(1u);
            goto LABEL_119;
          }
          if (v160 >= v257)
          {
LABEL_106:
            v272(v145, 1, 1, v7);
LABEL_107:
            swift_release();
            uint64_t v203 = v282;
            swift_bridgeObjectRetain();
            sub_100DD0C54(&v281, v203);
            swift_bridgeObjectRelease();
            swift_beginAccess();
            sub_10100A12C(v203);
            swift_endAccess();
            uint64_t v204 = Logger.logObject.getter();
            os_log_type_t v205 = static os_log_type_t.debug.getter();
            if (os_log_type_enabled(v204, v205))
            {
              os_log_type_t v206 = (uint8_t *)swift_slowAlloc();
              uint64_t v281 = swift_slowAlloc();
              *(_DWORD *)os_log_type_t v206 = v220;
              uint64_t v279 = v206 + 4;
              swift_bridgeObjectRetain();
              uint64_t v207 = Set.description.getter();
              unint64_t v209 = v208;
              uint64_t v91 = (uint64_t (**)(uint64_t, uint64_t, uint64_t))v278;
              swift_bridgeObjectRelease();
              uint64_t v280 = sub_1008FA0F0(v207, v209, &v281);
              UnsafeMutableRawBufferPointer.copyMemory(from:)();
              swift_bridgeObjectRelease();
              _os_log_impl((void *)&_mh_execute_header, v204, v205, "Inserted: %s", v206, 0xCu);
              swift_arrayDestroy();
              swift_slowDealloc();
              swift_slowDealloc();
            }

            uint64_t v88 = (uint64_t)v259;
            v269(v259, v7);
            sub_100B310AC(v254, type metadata accessor for BeaconStatus);
            uint64_t v87 = (uint64_t)v239;
            uint64_t v93 = v241;
            uint64_t v79 = v240;
            unint64_t v95 = v249;
            uint64_t v94 = v236;
            goto LABEL_39;
          }
          unint64_t v161 = *(void *)(v256 + 8 * v160);
          if (v161)
          {
LABEL_80:
            int64_t v276 = v160;
            uint64_t v277 = (v161 - 1) & v161;
            unint64_t v158 = __clz(__rbit64(v161)) + (v160 << 6);
LABEL_81:
            ((void (*)(char *, unint64_t, uint64_t))v279)(v145, *(void *)(v144 + 48) + v158 * v274, v7);
            v272(v145, 0, 1, v7);
            if (v270(v145, 1, v7) == 1) {
              goto LABEL_107;
            }
            uint64_t v163 = v151;
            uint64_t v164 = *v266;
            uint64_t v165 = ((uint64_t (*)(uint64_t, char *, uint64_t))*v266)(v150, v145, v7);
            __chkstk_darwin(v165);
            *((void *)&v220 - 2) = v150;
            sub_100E4EF6C((uint64_t (*)(char *))sub_10025B790, v268, v133);
            uint64_t v166 = v271;
            if ((*v260)(v133, 1, v271) == 1)
            {
              sub_10001DAB4(v133, &qword_10163BBA0);
              goto LABEL_88;
            }
            uint64_t v167 = *(void *)(v133 + *(int *)(v166 + 36));
            swift_bridgeObjectRetain();
            sub_100B310AC(v133, type metadata accessor for BeaconStatus);
            uint64_t v168 = v255;
            if (v167)
            {
              uint64_t v263 = v41;
              ((void (*)(uint64_t, char *, uint64_t))v279)(v255, v259, v7);
              v272((char *)v168, 0, 1, v7);
              uint64_t v169 = v252;
              uint64_t v170 = v252 + *(int *)(v247 + 48);
              uint64_t v171 = v7;
              sub_10001D074(v168, v252, &qword_101638CF0);
              sub_10001D074(v248, v170, &qword_101638CF0);
              uint64_t v172 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))v270;
              if (v270((char *)v169, 1, v7) == 1)
              {
                sub_10001DAB4(v168, &qword_101638CF0);
                int v173 = v172(v170, 1, v7);
                uint64_t v145 = v265;
                uint64_t v144 = v261;
                if (v173 == 1)
                {
                  sub_10001DAB4(v252, &qword_101638CF0);
                  uint64_t v174 = (uint64_t)v245;
                  uint64_t v91 = (uint64_t (**)(uint64_t, uint64_t, uint64_t))v278;
                  char v175 = v279;
                  ((void (*)(char *, char *, uint64_t))v279)(v245, v259, v7);
                  uint64_t v176 = v246;
                  ((void (*)(char *, char *, uint64_t))v175)(v246, v253, v7);
                  long long v177 = (void (*)(uint64_t, uint64_t))v269;
                  goto LABEL_102;
                }
LABEL_92:
                sub_10001DAB4(v252, (uint64_t *)&unk_10166EAF0);
                uint64_t v174 = (uint64_t)v245;
                double v181 = v279;
                ((void (*)(char *, char *, uint64_t))v279)(v245, v259, v171);
                uint64_t v176 = v246;
                ((void (*)(char *, char *, uint64_t))v181)(v246, v253, v171);
                uint64_t v182 = (uint64_t)v242;
                goto LABEL_93;
              }
              uint64_t v180 = v244;
              sub_10001D074(v169, v244, &qword_101638CF0);
              if (v172(v170, 1, v7) == 1)
              {
                sub_10001DAB4(v255, &qword_101638CF0);
                v269((char *)v180, v7);
                uint64_t v145 = v265;
                uint64_t v144 = v261;
                goto LABEL_92;
              }
              uint64_t v189 = (uint64_t)v262;
              v164(v262, (char *)v170, v7);
              sub_100B22DA4((unint64_t *)&qword_10163B8F0, (void (*)(uint64_t))&type metadata accessor for UUID);
              int v232 = dispatch thunk of static Equatable.== infix(_:_:)();
              long long v177 = (void (*)(uint64_t, uint64_t))v269;
              v269((char *)v189, v7);
              sub_10001DAB4(v255, &qword_101638CF0);
              v177(v244, v7);
              sub_10001DAB4(v169, &qword_101638CF0);
              uint64_t v190 = v150;
              uint64_t v174 = (uint64_t)v245;
              uint64_t v91 = (uint64_t (**)(uint64_t, uint64_t, uint64_t))v278;
              double v181 = v279;
              ((void (*)(char *, char *, uint64_t))v279)(v245, v259, v171);
              uint64_t v176 = v246;
              ((void (*)(char *, uint64_t, uint64_t))v181)(v246, v190, v171);
              uint64_t v182 = (uint64_t)v242;
              uint64_t v145 = v265;
              uint64_t v144 = v261;
              if (v232)
              {
LABEL_102:
                swift_bridgeObjectRelease();
                v177((uint64_t)v176, v171);
                v177(v174, v171);
                uint64_t v150 = (uint64_t)v253;
                uint64_t v7 = v171;
                int v151 = v177;
                goto LABEL_103;
              }
LABEL_93:
              char v183 = sub_100DC7280(v174, v167);
              swift_bridgeObjectRelease();
              ((void (*)(uint64_t, char *, uint64_t))v181)(v182, v176, v171);
              if (v183)
              {
                uint64_t v184 = (uint64_t)v284;
                swift_bridgeObjectRetain();
                char v185 = sub_100DC7280(v182, v184);
                swift_bridgeObjectRelease();
                uint64_t v186 = v182;
                uint64_t v187 = v269;
                v269((char *)v186, v171);
                v187(v176, v171);
                v187((char *)v174, v171);
                int v151 = (void (*)(void, void))v187;
                uint64_t v150 = (uint64_t)v253;
                uint64_t v41 = v263;
                uint64_t v91 = (uint64_t (**)(uint64_t, uint64_t, uint64_t))v278;
                uint64_t v7 = v171;
                if ((v185 & 1) == 0)
                {
LABEL_103:
                  uint64_t v191 = v91;
                  unint64_t v192 = v151;
                  unint64_t v193 = v251;
                  ((void (*)(char *, uint64_t, uint64_t))v279)(v251, v150, v7);
                  uint64_t v194 = (uint64_t)v262;
                  uint64_t v195 = v193;
                  int v151 = v192;
                  uint64_t v91 = v191;
                  sub_100DC8CB8((uint64_t)v262, v195);
                  uint64_t v196 = v194;
                  uint64_t v41 = v263;
                  v151(v196, v7);
                  v151(v150, v7);
                  goto LABEL_67;
                }
LABEL_66:
                v151(v150, v7);
              }
              else
              {
                os_log_type_t v188 = v269;
                v269((char *)v182, v171);
                v188(v176, v171);
                v188((char *)v174, v171);
                int v151 = (void (*)(void, void))v188;
                uint64_t v150 = (uint64_t)v253;
                uint64_t v41 = v263;
                uint64_t v91 = (uint64_t (**)(uint64_t, uint64_t, uint64_t))v278;
                uint64_t v7 = v171;
                v188(v253, v171);
              }
            }
            else
            {
LABEL_88:
              uint64_t v178 = (uint64_t)v284;
              swift_bridgeObjectRetain();
              char v179 = sub_100DC7280(v150, v178);
              swift_bridgeObjectRelease();
              if ((v179 & 1) == 0)
              {
                uint64_t v152 = v251;
                uint64_t v153 = (uint64_t)v278;
                ((void (*)(char *, uint64_t, uint64_t))v279)(v251, v150, v7);
                uint64_t v154 = v41;
                uint64_t v155 = (uint64_t)v262;
                sub_100DC8CB8((uint64_t)v262, v152);
                uint64_t v156 = v155;
                uint64_t v41 = v154;
                uint64_t v91 = (uint64_t (**)(uint64_t, uint64_t, uint64_t))v153;
                int v151 = v163;
                v163(v156, v7);
                uint64_t v145 = v265;
                uint64_t v144 = v261;
                goto LABEL_66;
              }
              uint64_t v145 = v265;
              uint64_t v91 = (uint64_t (**)(uint64_t, uint64_t, uint64_t))v278;
              uint64_t v144 = v261;
              int v151 = v163;
              v163(v150, v7);
            }
LABEL_67:
            uint64_t v133 = (uint64_t)v264;
            int64_t v149 = v276;
            continue;
          }
          break;
        }
        int64_t v162 = v160 + 1;
        if (v160 + 1 >= v257) {
          goto LABEL_106;
        }
        unint64_t v161 = *(void *)(v256 + 8 * v162);
        if (v161) {
          goto LABEL_79;
        }
        int64_t v162 = v160 + 2;
        if (v160 + 2 >= v257) {
          goto LABEL_106;
        }
        unint64_t v161 = *(void *)(v256 + 8 * v162);
        if (v161) {
          goto LABEL_79;
        }
        int64_t v162 = v160 + 3;
        if (v160 + 3 >= v257) {
          goto LABEL_106;
        }
        unint64_t v161 = *(void *)(v256 + 8 * v162);
        if (v161)
        {
LABEL_79:
          int64_t v160 = v162;
          goto LABEL_80;
        }
        while (1)
        {
          int64_t v160 = v162 + 1;
          if (__OFADD__(v162, 1)) {
            break;
          }
          if (v160 >= v257) {
            goto LABEL_106;
          }
          unint64_t v161 = *(void *)(v256 + 8 * v160);
          ++v162;
          if (v161) {
            goto LABEL_80;
          }
        }
LABEL_121:
        __break(1u);
LABEL_122:
        swift_once();
      }
    }
  }
  int64_t v61 = v56 + 1;
  if (__OFADD__(v56, 1))
  {
LABEL_120:
    __break(1u);
    goto LABEL_121;
  }
  if (v61 >= v55)
  {
LABEL_29:
    swift_release();
    return &_swiftEmptySetSingleton;
  }
  unint64_t v62 = *(void *)(v51 + 8 * v61);
  ++v56;
  if (v62) {
    goto LABEL_24;
  }
  int64_t v56 = v61 + 1;
  if (v61 + 1 >= v55) {
    goto LABEL_29;
  }
  unint64_t v62 = *(void *)(v51 + 8 * v56);
  if (v62) {
    goto LABEL_24;
  }
  int64_t v56 = v61 + 2;
  if (v61 + 2 >= v55) {
    goto LABEL_29;
  }
  unint64_t v62 = *(void *)(v51 + 8 * v56);
  if (v62) {
    goto LABEL_24;
  }
  int64_t v56 = v61 + 3;
  if (v61 + 3 >= v55) {
    goto LABEL_29;
  }
  unint64_t v62 = *(void *)(v51 + 8 * v56);
  if (v62) {
    goto LABEL_24;
  }
  int64_t v56 = v61 + 4;
  if (v61 + 4 >= v55) {
    goto LABEL_29;
  }
  unint64_t v62 = *(void *)(v51 + 8 * v56);
  if (v62)
  {
LABEL_24:
    unint64_t v54 = (v62 - 1) & v62;
    unint64_t v58 = __clz(__rbit64(v62)) + (v56 << 6);
    goto LABEL_5;
  }
  int64_t v63 = v61 + 5;
  if (v63 >= v55) {
    goto LABEL_29;
  }
  unint64_t v62 = *(void *)(v51 + 8 * v63);
  if (v62)
  {
    int64_t v56 = v63;
    goto LABEL_24;
  }
  while (1)
  {
    int64_t v56 = v63 + 1;
    if (__OFADD__(v63, 1)) {
      break;
    }
    if (v56 >= v55) {
      goto LABEL_29;
    }
    unint64_t v62 = *(void *)(v51 + 8 * v56);
    ++v63;
    if (v62) {
      goto LABEL_24;
    }
  }
  __break(1u);
  uint64_t result = (void *)swift_release();
  __break(1u);
  return result;
}

uint64_t sub_100AFE00C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v27 = a2;
  uint64_t v5 = type metadata accessor for BeaconStatus(0);
  uint64_t v6 = __chkstk_darwin(v5);
  uint64_t v26 = (uint64_t)&v26 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  uint64_t v9 = (char *)&v26 - v8;
  uint64_t v10 = sub_10000588C(&qword_101638CF0);
  __chkstk_darwin(v10 - 8);
  uint64_t v12 = (char *)&v26 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = type metadata accessor for UUID();
  uint64_t v14 = *(void *)(v13 - 8);
  __chkstk_darwin(v13);
  uint64_t v16 = (char *)&v26 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10001D074(a3, (uint64_t)v12, &qword_101638CF0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v14 + 48))(v12, 1, v13) != 1)
  {
    uint64_t v18 = v27;
    (*(void (**)(char *, char *, uint64_t))(v14 + 32))(v16, v12, v13);
    char v19 = static UUID.== infix(_:_:)();
    sub_100B30D0C(a1, (uint64_t)v9, type metadata accessor for BeaconStatus);
    if (v19)
    {
      uint64_t v20 = *(void *)&v9[*(int *)(v5 + 36)];
      sub_100B310AC((uint64_t)v9, type metadata accessor for BeaconStatus);
      if (v20)
      {
        (*(void (**)(char *, uint64_t))(v14 + 8))(v16, v13);
        char v17 = 1;
        return v17 & 1;
      }
    }
    else
    {
      sub_100B310AC((uint64_t)v9, type metadata accessor for BeaconStatus);
    }
    char v21 = static UUID.== infix(_:_:)();
    uint64_t v22 = v18;
    uint64_t v23 = v26;
    sub_100B30D0C(v22, v26, type metadata accessor for BeaconStatus);
    if (v21)
    {
      uint64_t v24 = *(void *)(v23 + *(int *)(v5 + 36));
      sub_100B310AC(v23, type metadata accessor for BeaconStatus);
      if (v24)
      {
        (*(void (**)(char *, uint64_t))(v14 + 8))(v16, v13);
        char v17 = 0;
        return v17 & 1;
      }
    }
    else
    {
      sub_100B310AC(v23, type metadata accessor for BeaconStatus);
    }
    char v17 = static Date.< infix(_:_:)();
    (*(void (**)(char *, uint64_t))(v14 + 8))(v16, v13);
    return v17 & 1;
  }
  sub_10001DAB4((uint64_t)v12, &qword_101638CF0);
  char v17 = static Date.< infix(_:_:)();
  return v17 & 1;
}

BOOL sub_100AFE398(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = type metadata accessor for OwnedBeaconRecord();
  __chkstk_darwin(v5);
  uint64_t v7 = (char *)&v28 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for StableIdentifier();
  __chkstk_darwin(v8);
  uint64_t v10 = (char *)&v28 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100B30D0C(a1 + *(int *)(v5 + 24), (uint64_t)v10, (uint64_t (*)(void))type metadata accessor for StableIdentifier);
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload == 3)
  {
    uint64_t v17 = sub_10000588C((uint64_t *)&unk_1016565E0);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    unsigned __int8 v18 = v10[*(int *)(v17 + 96)];
  }
  else
  {
    if (EnumCaseMultiPayload != 2)
    {
      if (qword_101636F60 != -1) {
        swift_once();
      }
      uint64_t v19 = type metadata accessor for Logger();
      sub_100010324(v19, (uint64_t)qword_10170EA18);
      sub_100B30D0C(a1, (uint64_t)v7, (uint64_t (*)(void))type metadata accessor for OwnedBeaconRecord);
      uint64_t v20 = Logger.logObject.getter();
      os_log_type_t v21 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v20, v21))
      {
        uint64_t v22 = swift_slowAlloc();
        uint64_t v29 = swift_slowAlloc();
        uint64_t v32 = v29;
        *(_DWORD *)uint64_t v22 = 141558275;
        uint64_t v31 = 1752392040;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        *(_WORD *)(v22 + 12) = 2081;
        uint64_t v30 = v2;
        uint64_t v23 = sub_101110C7C();
        uint64_t v31 = sub_1008FA0F0(v23, v24, &v32);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        sub_100B310AC((uint64_t)v7, (uint64_t (*)(void))type metadata accessor for OwnedBeaconRecord);
        _os_log_impl((void *)&_mh_execute_header, v20, v21, "nearbyMultipartPeers: Invalid stableIdentifier %{private,mask.hash}s", (uint8_t *)v22, 0x16u);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
      }
      else
      {
        sub_100B310AC((uint64_t)v7, (uint64_t (*)(void))type metadata accessor for OwnedBeaconRecord);
      }

      sub_100B310AC((uint64_t)v10, (uint64_t (*)(void))type metadata accessor for StableIdentifier);
      return 0;
    }
    uint64_t v12 = sub_10000588C(&qword_1016555E0);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v13 = (unsigned __int8 *)&v10[*(int *)(v12 + 96)];
    unsigned __int8 v14 = *v13;
    int v15 = v13[1];
    swift_bridgeObjectRelease();
    if (v15 == 1)
    {
      uint64_t v16 = type metadata accessor for UUID();
      (*(void (**)(char *, uint64_t))(*(void *)(v16 - 8) + 8))(v10, v16);
      return 0;
    }
    unsigned __int8 v18 = v14;
  }
  BOOL v25 = sub_100DC82C8(v18, a2);
  uint64_t v26 = type metadata accessor for UUID();
  (*(void (**)(char *, uint64_t))(*(void *)(v26 - 8) + 8))(v10, v26);
  return v25;
}

id sub_100AFE7F0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unint64_t a3@<X2>, unint64_t a4@<X8>)
{
  uint64_t v87 = a2;
  unint64_t v88 = a3;
  uint64_t v86 = a1;
  uint64_t v93 = (char *)a4;
  uint64_t v5 = type metadata accessor for StableIdentifier();
  __chkstk_darwin(v5);
  uint64_t v7 = (uint64_t *)((char *)&v75 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v8 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v91 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  uint64_t v10 = (char *)&v75 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = type metadata accessor for DispatchQoS();
  uint64_t v89 = *(void *)(v11 - 8);
  unint64_t v90 = v11;
  __chkstk_darwin(v11);
  uint64_t v13 = (char *)&v75 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = type metadata accessor for UUID();
  uint64_t v15 = *(void *)(v14 - 8);
  __chkstk_darwin(v14);
  uint64_t v17 = (char *)&v75 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100A9709C(v100);
  if (v4)
  {
    swift_errorRelease();
    uint64_t v92 = 0;
    uint64_t v20 = swift_allocObject();
    unint64_t v21 = v88;
    *(void *)(v20 + 16) = v87;
    *(void *)(v20 + 24) = v21;
    uint64_t v98 = sub_100B64100;
    uint64_t v99 = v20;
    long long aBlock = _NSConcreteStackBlock;
    uint64_t v95 = 1107296256;
    uint64_t v96 = sub_1004B5480;
    uint64_t v97 = &unk_1015E9960;
    uint64_t v22 = _Block_copy(&aBlock);
    swift_retain();
    static DispatchQoS.unspecified.getter();
    uint64_t v105 = _swiftEmptyArrayStorage;
    sub_100B22DA4((unint64_t *)&qword_10163B7E0, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
    sub_10000588C((uint64_t *)&unk_10163F350);
    sub_100062734((unint64_t *)&qword_10163B7F0, (uint64_t *)&unk_10163F350);
    dispatch thunk of SetAlgebra.init<A>(_:)();
    OS_dispatch_queue.async(group:qos:flags:execute:)();
    _Block_release(v22);
    (*(void (**)(char *, uint64_t))(v91 + 8))(v10, v8);
    (*(void (**)(char *, unint64_t))(v89 + 8))(v13, v90);
    swift_release();
    uint64_t v23 = type metadata accessor for OwnedBeaconRecord();
    unint64_t v24 = *(uint64_t (**)(unint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v23 - 8) + 56);
    unint64_t v25 = (unint64_t)v93;
    return (id)v24(v25, 1, 1, v23);
  }
  uint64_t v84 = v7;
  unint64_t v85 = v17;
  uint64_t v82 = v15;
  uint64_t v83 = v14;
  uint64_t v18 = static Data.random(bytes:)();
  sub_100434DF4(v18, v19, (uint64_t *)&aBlock);
  uint64_t v92 = 0;
  unint64_t v27 = v95;
  os_log_type_t v81 = aBlock;
  uint64_t v29 = v100[0];
  unint64_t v28 = v100[1];
  uint64_t v30 = v103;
  unint64_t v31 = v104;
  uint64_t v78 = v101;
  unint64_t v79 = v102;
  sub_1000361E0(v101, v102);
  uint64_t v80 = v29;
  unint64_t v77 = v28;
  sub_1000361E0(v29, v28);
  uint64_t v75 = v30;
  unint64_t v76 = v31;
  sub_1000361E0(v30, v31);
  sub_100B55F50(v100);
  UUID.init()();
  id result = (id)MobileGestalt_get_current_device();
  if (!result)
  {
    __break(1u);
    goto LABEL_23;
  }
  uint64_t v32 = result;
  id v33 = (id)MobileGestalt_copy_uniqueDeviceID_obj();

  if (v33)
  {
    uint64_t v34 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    unint64_t v36 = v35;
  }
  else
  {
    uint64_t v34 = 0;
    unint64_t v36 = 0xE000000000000000;
  }
  uint64_t v37 = v93;
  uint64_t v93 = (char *)v27;
  uint64_t v38 = HIBYTE(v36) & 0xF;
  if ((v36 & 0x2000000000000000) == 0) {
    uint64_t v38 = v34 & 0xFFFFFFFFFFFFLL;
  }
  if (!v38)
  {
    swift_bridgeObjectRelease();
    uint64_t v45 = swift_allocObject();
    unint64_t v46 = v88;
    *(void *)(v45 + 16) = v87;
    *(void *)(v45 + 24) = v46;
    uint64_t v98 = sub_100B60F50;
    uint64_t v99 = v45;
    long long aBlock = _NSConcreteStackBlock;
    uint64_t v95 = 1107296256;
    uint64_t v96 = sub_1004B5480;
    uint64_t v97 = &unk_1015E99B0;
    uint64_t v47 = _Block_copy(&aBlock);
    swift_retain();
    static DispatchQoS.unspecified.getter();
    uint64_t v105 = _swiftEmptyArrayStorage;
    sub_100B22DA4((unint64_t *)&qword_10163B7E0, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
    sub_10000588C((uint64_t *)&unk_10163F350);
    sub_100062734((unint64_t *)&qword_10163B7F0, (uint64_t *)&unk_10163F350);
    dispatch thunk of SetAlgebra.init<A>(_:)();
    OS_dispatch_queue.async(group:qos:flags:execute:)();
    _Block_release(v47);
    sub_10001CFB8(v78, v79);
    sub_10001CFB8(v80, v77);
    sub_10001CFB8(v75, v76);
    sub_100037A24(0, 0xF000000000000000);
    sub_100037A24((uint64_t)v81, (unint64_t)v93);
    (*(void (**)(char *, uint64_t))(v91 + 8))(v10, v8);
    (*(void (**)(char *, unint64_t))(v89 + 8))(v13, v90);
    (*(void (**)(char *, uint64_t))(v82 + 8))(v85, v83);
    swift_release();
    uint64_t v23 = type metadata accessor for OwnedBeaconRecord();
    unint64_t v24 = *(uint64_t (**)(unint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v23 - 8) + 56);
    unint64_t v25 = (unint64_t)v37;
    return (id)v24(v25, 1, 1, v23);
  }
  uint64_t v39 = v84;
  *uint64_t v84 = v34;
  v39[1] = v36;
  swift_storeEnumTagMultiPayload();
  id result = (id)MobileGestalt_get_current_device();
  if (!result)
  {
LABEL_23:
    __break(1u);
LABEL_24:
    __break(1u);
    return result;
  }
  uint64_t v40 = result;
  id v41 = (id)MobileGestalt_copy_buildVersion_obj();

  if (v41)
  {
    uint64_t v42 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    unint64_t v44 = v43;
  }
  else
  {
    uint64_t v42 = 0;
    unint64_t v44 = 0xE000000000000000;
  }
  id result = (id)MobileGestalt_get_current_device();
  if (!result) {
    goto LABEL_24;
  }
  uint64_t v48 = result;
  id v49 = (id)MobileGestalt_copy_productType_obj();

  unint64_t v90 = v44;
  uint64_t v91 = v42;
  if (v49)
  {
    uint64_t v50 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    unint64_t v88 = v51;
    uint64_t v89 = v50;
  }
  else
  {
    unint64_t v88 = 0xE000000000000000;
    uint64_t v89 = 0;
  }
  uint64_t v52 = (int *)type metadata accessor for OwnedBeaconRecord();
  uint64_t v53 = (uint64_t)&v37[v52[8]];
  uint64_t v54 = v78;
  unint64_t v55 = v79;
  sub_1000361E0(v78, v79);
  uint64_t v56 = v80;
  unint64_t v57 = v77;
  sub_1000361E0(v80, v77);
  uint64_t v58 = v75;
  unint64_t v59 = v76;
  sub_1000361E0(v75, v76);
  sub_1000361E0((uint64_t)v81, (unint64_t)v93);
  sub_100A9E43C(v53);
  sub_10001CFB8(v54, v55);
  sub_10001CFB8(v56, v57);
  uint64_t v60 = v58;
  unint64_t v61 = v59;
  sub_10001CFB8(v58, v59);
  sub_100037A24(0, 0xF000000000000000);
  uint64_t v62 = (uint64_t)v81;
  unint64_t v63 = (unint64_t)v93;
  sub_100037A24((uint64_t)v81, (unint64_t)v93);
  uint64_t v64 = v82;
  uint64_t v65 = v83;
  (*(void (**)(char *, char *, uint64_t))(v82 + 32))(&v37[v52[5]], v85, v83);
  sub_100B30DB4((uint64_t)v84, (uint64_t)&v37[v52[6]], (uint64_t (*)(void))type metadata accessor for StableIdentifier);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v64 + 56))(&v37[v52[7]], 1, 1, v65);
  *(_OWORD *)uint64_t v37 = xmmword_101348180;
  uint64_t v66 = (uint64_t *)&v37[v52[9]];
  uint64_t *v66 = v60;
  v66[1] = v61;
  *(_OWORD *)&v37[v52[10]] = xmmword_101347BB0;
  os_log_type_t v67 = (uint64_t *)&v37[v52[11]];
  uint64_t *v67 = v62;
  v67[1] = v63;
  uint64_t v68 = &v37[v52[12]];
  unint64_t v69 = v79;
  *(void *)uint64_t v68 = v78;
  *((void *)v68 + 1) = v69;
  uint64_t v70 = &v37[v52[13]];
  *(void *)uint64_t v70 = v80;
  *((void *)v70 + 1) = v57;
  unint64_t v71 = (uint64_t *)&v37[v52[14]];
  unint64_t v72 = v88;
  *unint64_t v71 = v89;
  v71[1] = v72;
  uint64_t v73 = (uint64_t *)&v37[v52[15]];
  unint64_t v74 = v90;
  *uint64_t v73 = v91;
  v73[1] = v74;
  *(void *)&v37[v52[16]] = -1;
  *(void *)&v37[v52[17]] = -1;
  v37[v52[18]] = 3;
  v37[v52[19]] = 0;
  v37[v52[20]] = 0;
  return (id)(*(uint64_t (**)(char *, void, uint64_t, int *))(*((void *)v52 - 1) + 56))(v37, 0, 1, v52);
}

uint64_t sub_100AFF244(void (*a1)(uint64_t *), uint64_t a2, char a3)
{
  uint64_t v5 = sub_10000588C((uint64_t *)&unk_101656900);
  __chkstk_darwin(v5);
  uint64_t v7 = (uint64_t *)((char *)&v11 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0));
  sub_10009FD9C();
  uint64_t v8 = swift_allocError();
  *uint64_t v9 = a3;
  *uint64_t v7 = v8;
  swift_storeEnumTagMultiPayload();
  a1(v7);
  return sub_10001DAB4((uint64_t)v7, (uint64_t *)&unk_101656900);
}

uint64_t sub_100AFF320(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v24 = a3;
  uint64_t v25 = a4;
  uint64_t v6 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v29 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  uint64_t v8 = (char *)&v23 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = type metadata accessor for DispatchQoS();
  uint64_t v27 = *(void *)(v9 - 8);
  uint64_t v28 = v9;
  __chkstk_darwin(v9);
  uint64_t v11 = (char *)&v23 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = sub_10000588C((uint64_t *)&unk_101656900);
  uint64_t v13 = *(void *)(v12 - 8);
  uint64_t v14 = *(void *)(v13 + 64);
  __chkstk_darwin(v12 - 8);
  uint64_t v15 = (char *)&v23 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v26 = *(void *)(a2 + 128);
  sub_10001D074(a1, (uint64_t)v15, (uint64_t *)&unk_101656900);
  unint64_t v16 = (*(unsigned __int8 *)(v13 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v13 + 80);
  unint64_t v17 = (v14 + v16 + 7) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v18 = swift_allocObject();
  sub_10001D608((uint64_t)v15, v18 + v16, (uint64_t *)&unk_101656900);
  *(void *)(v18 + v17) = a2;
  unint64_t v19 = (void *)(v18 + ((v17 + 15) & 0xFFFFFFFFFFFFFFF8));
  uint64_t v20 = v25;
  *unint64_t v19 = v24;
  v19[1] = v20;
  aBlock[4] = sub_100B606CC;
  void aBlock[5] = v18;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_1004B5480;
  aBlock[3] = &unk_1015E9898;
  unint64_t v21 = _Block_copy(aBlock);
  swift_retain();
  swift_retain();
  static DispatchQoS.unspecified.getter();
  uint64_t v30 = _swiftEmptyArrayStorage;
  sub_100B22DA4((unint64_t *)&qword_10163B7E0, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
  sub_10000588C((uint64_t *)&unk_10163F350);
  sub_100062734((unint64_t *)&qword_10163B7F0, (uint64_t *)&unk_10163F350);
  dispatch thunk of SetAlgebra.init<A>(_:)();
  OS_dispatch_queue.async(group:qos:flags:execute:)();
  _Block_release(v21);
  (*(void (**)(char *, uint64_t))(v29 + 8))(v8, v6);
  (*(void (**)(char *, uint64_t))(v27 + 8))(v11, v28);
  return swift_release();
}

id sub_100AFF6B8(uint64_t a1, uint64_t a2, void (*a3)(void *), uint64_t a4)
{
  uint64_t v71 = a2;
  uint64_t v69 = type metadata accessor for BeaconNamingRecord();
  __chkstk_darwin(v69);
  uint64_t v70 = (char *)&v61 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = sub_10000588C(&qword_101638CF0);
  uint64_t v9 = __chkstk_darwin(v8 - 8);
  uint64_t v72 = (uint64_t)&v61 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9);
  uint64_t v12 = (char *)&v61 - v11;
  uint64_t v13 = type metadata accessor for OwnedBeaconRecord();
  uint64_t v66 = *(void *)(v13 - 8);
  uint64_t v14 = __chkstk_darwin(v13);
  uint64_t v67 = v15;
  uint64_t v68 = (uint64_t)&v61 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v14);
  unint64_t v17 = (char *)&v61 - v16;
  uint64_t v18 = sub_10000588C((uint64_t *)&unk_101656900);
  uint64_t v19 = __chkstk_darwin(v18);
  unint64_t v21 = (uint64_t *)((char *)&v61 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0));
  __chkstk_darwin(v19);
  uint64_t v23 = (uint64_t *)((char *)&v61 - v22);
  sub_10001D074(a1, (uint64_t)&v61 - v22, (uint64_t *)&unk_101656900);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v24 = *v23;
    static os_log_type_t.error.getter();
    if (qword_101637260 != -1) {
      swift_once();
    }
    sub_10000588C((uint64_t *)&unk_10163AD00);
    uint64_t v25 = swift_allocObject();
    *(_OWORD *)(v25 + 16) = xmmword_101342130;
    uint64_t v73 = v24;
    swift_errorRetain();
    sub_10000588C(&qword_101638D40);
    uint64_t v26 = String.init<A>(describing:)();
    uint64_t v28 = v27;
    *(void *)(v25 + 56) = &type metadata for String;
    *(void *)(v25 + 64) = sub_10000B4CC();
    *(void *)(v25 + 32) = v26;
    *(void *)(v25 + 40) = v28;
    os_log(_:dso:log:_:_:)();
    swift_bridgeObjectRelease();
    *unint64_t v21 = v24;
    swift_storeEnumTagMultiPayload();
    swift_errorRetain();
    a3(v21);
    swift_errorRelease();
    return (id)sub_10001DAB4((uint64_t)v21, (uint64_t *)&unk_101656900);
  }
  else
  {
    unint64_t v63 = (void (*)(void))a3;
    uint64_t v64 = a4;
    sub_100B30DB4((uint64_t)v23, (uint64_t)v17, (uint64_t (*)(void))type metadata accessor for OwnedBeaconRecord);
    static os_log_type_t.default.getter();
    if (qword_101637260 != -1) {
      swift_once();
    }
    sub_10000588C((uint64_t *)&unk_10163AD00);
    uint64_t v30 = swift_allocObject();
    long long v65 = xmmword_101342130;
    *(_OWORD *)(v30 + 16) = xmmword_101342130;
    uint64_t v31 = *(int *)(v13 + 20);
    uint64_t v62 = v17;
    uint64_t v32 = &v17[v31];
    uint64_t v33 = UUID.uuidString.getter();
    uint64_t v35 = v34;
    *(void *)(v30 + 56) = &type metadata for String;
    unint64_t v36 = sub_10000B4CC();
    *(void *)(v30 + 64) = v36;
    *(void *)(v30 + 32) = v33;
    *(void *)(v30 + 40) = v35;
    os_log(_:dso:log:_:_:)();
    swift_bridgeObjectRelease();
    static os_log_type_t.default.getter();
    if (qword_1016372D0 != -1) {
      swift_once();
    }
    uint64_t v37 = swift_allocObject();
    *(_OWORD *)(v37 + 16) = v65;
    uint64_t v38 = UUID.uuidString.getter();
    *(void *)(v37 + 56) = &type metadata for String;
    *(void *)(v37 + 64) = v36;
    *(void *)(v37 + 32) = v38;
    *(void *)(v37 + 40) = v39;
    os_log(_:dso:log:_:_:)();
    swift_bridgeObjectRelease();
    if (qword_101636CD8 != -1) {
      swift_once();
    }
    uint64_t v40 = type metadata accessor for UUID();
    uint64_t v41 = *(void *)(v40 - 8);
    uint64_t v42 = *(void (**)(char *, char *, uint64_t))(v41 + 16);
    v42(v12, v32, v40);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v41 + 56))(v12, 0, 1, v40);
    sub_1000A5940();
    uint64_t v43 = v72;
    sub_10001D074((uint64_t)v12, v72, &qword_101638CF0);
    sub_100F175B0(v43);
    swift_release();
    sub_10001DAB4((uint64_t)v12, &qword_101638CF0);
    id result = (id)MobileGestalt_get_current_device();
    if (result)
    {
      unint64_t v44 = result;
      id v45 = (id)MobileGestalt_copy_userAssignedDeviceName_obj();

      unint64_t v46 = v32;
      if (v45)
      {
        uint64_t v47 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        unint64_t v49 = v48;
      }
      else
      {
        uint64_t v47 = 0;
        unint64_t v49 = 0xE000000000000000;
      }
      uint64_t v50 = (int *)v69;
      unint64_t v51 = v70;
      UUID.init()();
      v42(&v51[v50[6]], v46, v40);
      uint64_t v52 = SPBeaconRoleIdUndefined;
      *(_OWORD *)unint64_t v51 = xmmword_101348180;
      *(void *)&v51[v50[7]] = v52;
      uint64_t v53 = (uint64_t *)&v51[v50[8]];
      *uint64_t v53 = v47;
      v53[1] = v49;
      uint64_t v54 = &v51[v50[9]];
      *(void *)uint64_t v54 = 0;
      *((void *)v54 + 1) = 0;
      uint64_t v55 = (uint64_t)v62;
      uint64_t v56 = v68;
      sub_100B30D0C((uint64_t)v62, v68, (uint64_t (*)(void))type metadata accessor for OwnedBeaconRecord);
      unint64_t v57 = (*(unsigned __int8 *)(v66 + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(v66 + 80);
      uint64_t v58 = (void *)swift_allocObject();
      unint64_t v59 = v63;
      uint64_t v60 = v64;
      v58[2] = v71;
      v58[3] = v59;
      v58[4] = v60;
      sub_100B30DB4(v56, (uint64_t)v58 + v57, (uint64_t (*)(void))type metadata accessor for OwnedBeaconRecord);
      swift_retain();
      swift_retain();
      sub_100ABBA30((uint64_t)v51, 0, (uint64_t)sub_100B60AF8, (uint64_t)v58);
      swift_release();
      sub_100B310AC((uint64_t)v51, (uint64_t (*)(void))type metadata accessor for BeaconNamingRecord);
      return (id)sub_100B310AC(v55, (uint64_t (*)(void))type metadata accessor for OwnedBeaconRecord);
    }
    else
    {
      __break(1u);
    }
  }
  return result;
}

uint64_t sub_100AFFE78(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v24 = a5;
  uint64_t v25 = a3;
  uint64_t v26 = a4;
  uint64_t v27 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v30 = *(void *)(v27 - 8);
  __chkstk_darwin(v27);
  uint64_t v6 = (char *)&v23 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for DispatchQoS();
  uint64_t v28 = *(void *)(v7 - 8);
  uint64_t v29 = v7;
  __chkstk_darwin(v7);
  uint64_t v9 = (char *)&v23 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = type metadata accessor for OwnedBeaconRecord();
  uint64_t v23 = *(void *)(v10 - 8);
  uint64_t v11 = *(void *)(v23 + 64);
  __chkstk_darwin(v10 - 8);
  uint64_t v12 = type metadata accessor for DispatchQoS.QoSClass();
  uint64_t v13 = *(void *)(v12 - 8);
  __chkstk_darwin(v12);
  uint64_t v15 = (char *)&v23 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  QueueSynchronizer.conditionalSync<A>(_:)();
  sub_100A9E7EC(3);
  sub_10001D4B0(0, (unint64_t *)&qword_1016376E0);
  (*(void (**)(char *, void, uint64_t))(v13 + 104))(v15, enum case for DispatchQoS.QoSClass.default(_:), v12);
  uint64_t v16 = (void *)static OS_dispatch_queue.global(qos:)();
  (*(void (**)(char *, uint64_t))(v13 + 8))(v15, v12);
  sub_100B30D0C(v24, (uint64_t)&v23 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0), (uint64_t (*)(void))type metadata accessor for OwnedBeaconRecord);
  unint64_t v17 = (*(unsigned __int8 *)(v23 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v23 + 80);
  uint64_t v18 = swift_allocObject();
  uint64_t v19 = v26;
  *(void *)(v18 + 16) = v25;
  *(void *)(v18 + 24) = v19;
  sub_100B30DB4((uint64_t)&v23 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0), v18 + v17, (uint64_t (*)(void))type metadata accessor for OwnedBeaconRecord);
  aBlock[4] = sub_100B5CD68;
  void aBlock[5] = v18;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_1004B5480;
  aBlock[3] = &unk_1015E9910;
  uint64_t v20 = _Block_copy(aBlock);
  swift_retain();
  static DispatchQoS.unspecified.getter();
  uint64_t v31 = _swiftEmptyArrayStorage;
  sub_100B22DA4((unint64_t *)&qword_10163B7E0, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
  sub_10000588C((uint64_t *)&unk_10163F350);
  sub_100062734((unint64_t *)&qword_10163B7F0, (uint64_t *)&unk_10163F350);
  uint64_t v21 = v27;
  dispatch thunk of SetAlgebra.init<A>(_:)();
  OS_dispatch_queue.async(group:qos:flags:execute:)();
  _Block_release(v20);

  (*(void (**)(char *, uint64_t))(v30 + 8))(v6, v21);
  (*(void (**)(char *, uint64_t))(v28 + 8))(v9, v29);
  return swift_release();
}

uint64_t sub_100B0032C(uint64_t a1, uint64_t a2)
{
  uint64_t v23 = a1;
  uint64_t v24 = a2;
  uint64_t v3 = type metadata accessor for OwnedBeaconRecord();
  uint64_t v4 = *(void *)(v3 - 8);
  uint64_t v5 = *(void *)(v4 + 64);
  uint64_t v6 = __chkstk_darwin(v3);
  uint64_t v7 = (char *)&v22 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  uint64_t v9 = (char *)&v22 - v8;
  uint64_t v10 = sub_10000588C(&qword_10163B9F0);
  uint64_t v11 = __chkstk_darwin(v10 - 8);
  uint64_t v13 = (char *)&v22 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v11);
  uint64_t v15 = (char *)&v22 - v14;
  static os_log_type_t.default.getter();
  if (qword_101637260 != -1) {
    swift_once();
  }
  os_log(_:dso:log:_:_:)();
  sub_100B00650(v2, v23, v24, v15);
  sub_10001D074((uint64_t)v15, (uint64_t)v13, &qword_10163B9F0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v4 + 48))(v13, 1, v3) == 1)
  {
    sub_10001DAB4((uint64_t)v15, &qword_10163B9F0);
    uint64_t v15 = v13;
  }
  else
  {
    sub_100B30DB4((uint64_t)v13, (uint64_t)v9, (uint64_t (*)(void))type metadata accessor for OwnedBeaconRecord);
    sub_100B30D0C((uint64_t)v9, (uint64_t)v7, (uint64_t (*)(void))type metadata accessor for OwnedBeaconRecord);
    unint64_t v17 = (*(unsigned __int8 *)(v4 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
    uint64_t v18 = swift_allocObject();
    *(void *)(v18 + 16) = v2;
    sub_100B30DB4((uint64_t)v7, v18 + v17, (uint64_t (*)(void))type metadata accessor for OwnedBeaconRecord);
    uint64_t v19 = (void *)(v18 + ((v5 + v17 + 7) & 0xFFFFFFFFFFFFFFF8));
    uint64_t v20 = v24;
    *uint64_t v19 = v23;
    v19[1] = v20;
    swift_retain();
    swift_retain();
    sub_100ABC198((uint64_t)v9, 0, (uint64_t)sub_100B5C4C8, v18);
    swift_release();
    sub_100B310AC((uint64_t)v9, (uint64_t (*)(void))type metadata accessor for OwnedBeaconRecord);
  }
  return sub_10001DAB4((uint64_t)v15, &qword_10163B9F0);
}

id sub_100B00650@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, _OWORD *a4@<X8>)
{
  uint64_t v107 = a2;
  uint64_t v108 = a3;
  uint64_t v106 = a1;
  unint64_t v114 = a4;
  uint64_t v5 = type metadata accessor for StableIdentifier();
  __chkstk_darwin(v5);
  uint64_t v7 = (uint64_t *)((char *)&v92 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v8 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  unint64_t v110 = (char *)&v92 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = type metadata accessor for DispatchQoS();
  unint64_t v111 = *(void *)(v11 - 8);
  __chkstk_darwin(v11);
  uint64_t v109 = (char *)&v92 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = type metadata accessor for UUID();
  uint64_t v14 = *(void *)(v13 - 8);
  __chkstk_darwin(v13);
  uint64_t v16 = (char *)&v92 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100A9709C(v121);
  uint64_t v113 = v11;
  if (v4)
  {
    swift_errorRelease();
    uint64_t v112 = 0;
    uint64_t v19 = swift_allocObject();
    uint64_t v20 = v108;
    *(void *)(v19 + 16) = v107;
    *(void *)(v19 + 24) = v20;
    os_log_type_t v119 = sub_100B5CD6C;
    uint64_t v120 = v19;
    long long aBlock = _NSConcreteStackBlock;
    uint64_t v116 = 1107296256;
    unint64_t v117 = sub_1004B5480;
    uint64_t v118 = &unk_1015E8DF8;
    uint64_t v21 = _Block_copy(&aBlock);
    swift_retain();
    uint64_t v22 = v109;
    static DispatchQoS.unspecified.getter();
    uint64_t v126 = _swiftEmptyArrayStorage;
    sub_100B22DA4((unint64_t *)&qword_10163B7E0, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
    sub_10000588C((uint64_t *)&unk_10163F350);
    sub_100062734((unint64_t *)&qword_10163B7F0, (uint64_t *)&unk_10163F350);
    uint64_t v23 = v110;
    dispatch thunk of SetAlgebra.init<A>(_:)();
    OS_dispatch_queue.async(group:qos:flags:execute:)();
    _Block_release(v21);
    (*(void (**)(char *, uint64_t))(v9 + 8))(v23, v8);
    (*(void (**)(char *, uint64_t))(v111 + 8))(v22, v113);
    swift_release();
LABEL_4:
    uint64_t v24 = type metadata accessor for OwnedBeaconRecord();
    uint64_t v25 = *(uint64_t (**)(_OWORD *, uint64_t, uint64_t, uint64_t))(*(void *)(v24 - 8) + 56);
    uint64_t v26 = v114;
    return (id)v25(v26, 1, 1, v24);
  }
  uint64_t v104 = v13;
  unint64_t v102 = v7;
  uint64_t v105 = v16;
  uint64_t v103 = v14;
  uint64_t v17 = static Data.random(bytes:)();
  sub_100434DF4(v17, v18, (uint64_t *)&aBlock);
  uint64_t v93 = v8;
  uint64_t v112 = 0;
  uint64_t v29 = aBlock;
  unint64_t v28 = v116;
  uint64_t v31 = v121[0];
  unint64_t v30 = v121[1];
  uint64_t v32 = v124;
  unint64_t v33 = v125;
  uint64_t v98 = v122;
  unint64_t v99 = v123;
  sub_1000361E0(v122, v123);
  uint64_t v100 = v31;
  unint64_t v97 = v30;
  sub_1000361E0(v31, v30);
  uint64_t v95 = v32;
  unint64_t v96 = v33;
  sub_1000361E0(v32, v33);
  sub_100B55F50(v121);
  UUID.init()();
  id v34 = [objc_allocWithZone((Class)ACAccountStore) init];
  id v35 = [v34 aa_primaryAppleAccount];

  uint64_t v36 = v9;
  uint64_t v101 = v29;
  if (!v35)
  {
    unint64_t v50 = v28;
    uint64_t v51 = swift_allocObject();
    uint64_t v52 = v108;
    *(void *)(v51 + 16) = v107;
    *(void *)(v51 + 24) = v52;
    os_log_type_t v119 = sub_100B64100;
    uint64_t v120 = v51;
    long long aBlock = _NSConcreteStackBlock;
    uint64_t v116 = 1107296256;
    unint64_t v117 = sub_1004B5480;
    uint64_t v118 = &unk_1015E8E48;
    uint64_t v53 = _Block_copy(&aBlock);
    swift_retain();
    uint64_t v54 = v109;
    static DispatchQoS.unspecified.getter();
    uint64_t v126 = _swiftEmptyArrayStorage;
    sub_100B22DA4((unint64_t *)&qword_10163B7E0, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
    sub_10000588C((uint64_t *)&unk_10163F350);
    sub_100062734((unint64_t *)&qword_10163B7F0, (uint64_t *)&unk_10163F350);
    uint64_t v55 = v110;
    uint64_t v56 = v93;
    dispatch thunk of SetAlgebra.init<A>(_:)();
    OS_dispatch_queue.async(group:qos:flags:execute:)();
    _Block_release(v53);
    (*(void (**)(char *, uint64_t))(v36 + 8))(v55, v56);
    (*(void (**)(char *, uint64_t))(v111 + 8))(v54, v113);
    swift_release();
    static os_log_type_t.default.getter();
    uint64_t v57 = v104;
    if (qword_101637260 != -1) {
      swift_once();
    }
    os_log(_:dso:log:_:_:)();
    sub_10001CFB8(v98, v99);
    sub_10001CFB8(v100, v97);
    sub_10001CFB8(v95, v96);
    sub_100037A24(0, 0xF000000000000000);
    sub_100037A24((uint64_t)v101, v50);
    (*(void (**)(char *, uint64_t))(v103 + 8))(v105, v57);
    goto LABEL_4;
  }
  unint64_t v94 = v28;
  id result = [v35 aa_altDSID];
  uint64_t v37 = v113;
  if (!result)
  {
    __break(1u);
LABEL_27:
    __break(1u);
LABEL_28:
    __break(1u);
    return result;
  }
  uint64_t v38 = result;
  uint64_t v39 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  unint64_t v41 = v40;

  uint64_t v42 = HIBYTE(v41) & 0xF;
  if ((v41 & 0x2000000000000000) == 0) {
    uint64_t v42 = v39 & 0xFFFFFFFFFFFFLL;
  }
  id v92 = v35;
  if (!v42)
  {
    swift_bridgeObjectRelease();
    uint64_t v58 = swift_allocObject();
    uint64_t v59 = v108;
    *(void *)(v58 + 16) = v107;
    *(void *)(v58 + 24) = v59;
    os_log_type_t v119 = sub_100B64100;
    uint64_t v120 = v58;
    long long aBlock = _NSConcreteStackBlock;
    uint64_t v116 = 1107296256;
    unint64_t v117 = sub_1004B5480;
    uint64_t v118 = &unk_1015E8E98;
    uint64_t v60 = _Block_copy(&aBlock);
    swift_retain();
    uint64_t v61 = v109;
    static DispatchQoS.unspecified.getter();
    uint64_t v126 = _swiftEmptyArrayStorage;
    sub_100B22DA4((unint64_t *)&qword_10163B7E0, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
    sub_10000588C((uint64_t *)&unk_10163F350);
    sub_100062734((unint64_t *)&qword_10163B7F0, (uint64_t *)&unk_10163F350);
    uint64_t v62 = v110;
    uint64_t v63 = v93;
    dispatch thunk of SetAlgebra.init<A>(_:)();
    OS_dispatch_queue.async(group:qos:flags:execute:)();
    _Block_release(v60);
    (*(void (**)(char *, uint64_t))(v36 + 8))(v62, v63);
    (*(void (**)(char *, uint64_t))(v111 + 8))(v61, v37);
    swift_release();
    static os_log_type_t.default.getter();
    uint64_t v64 = v114;
    if (qword_101637260 != -1) {
      swift_once();
    }
    os_log(_:dso:log:_:_:)();

    sub_10001CFB8(v98, v99);
    sub_10001CFB8(v100, v97);
    sub_10001CFB8(v95, v96);
    sub_100037A24(0, 0xF000000000000000);
    sub_100037A24((uint64_t)v101, v94);
    (*(void (**)(char *, uint64_t))(v103 + 8))(v105, v104);
    uint64_t v24 = type metadata accessor for OwnedBeaconRecord();
    uint64_t v25 = *(uint64_t (**)(_OWORD *, uint64_t, uint64_t, uint64_t))(*(void *)(v24 - 8) + 56);
    uint64_t v26 = v64;
    return (id)v25(v26, 1, 1, v24);
  }
  uint64_t v43 = v102;
  uint64_t *v102 = v39;
  v43[1] = v41;
  swift_storeEnumTagMultiPayload();
  id result = (id)MobileGestalt_get_current_device();
  unint64_t v44 = (char *)v114;
  if (!result) {
    goto LABEL_27;
  }
  id v45 = result;
  id v46 = (id)MobileGestalt_copy_buildVersion_obj();

  if (v46)
  {
    uint64_t v47 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    unint64_t v49 = v48;
  }
  else
  {
    uint64_t v47 = 0;
    unint64_t v49 = 0xE000000000000000;
  }
  id result = (id)MobileGestalt_get_current_device();
  if (!result) {
    goto LABEL_28;
  }
  long long v65 = result;
  id v66 = (id)MobileGestalt_copy_productType_obj();

  uint64_t v113 = v47;
  unint64_t v111 = v49;
  if (v66)
  {
    uint64_t v67 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v109 = v68;
    unint64_t v110 = (char *)v67;
  }
  else
  {
    uint64_t v109 = (char *)0xE000000000000000;
    unint64_t v110 = 0;
  }
  uint64_t v69 = (int *)type metadata accessor for OwnedBeaconRecord();
  uint64_t v70 = (uint64_t)&v44[v69[8]];
  uint64_t v71 = v98;
  unint64_t v72 = v99;
  sub_1000361E0(v98, v99);
  uint64_t v73 = v100;
  unint64_t v74 = v97;
  sub_1000361E0(v100, v97);
  uint64_t v75 = v95;
  unint64_t v76 = v96;
  sub_1000361E0(v95, v96);
  sub_1000361E0((uint64_t)v101, v94);
  sub_100A9E43C(v70);

  sub_10001CFB8(v71, v72);
  sub_10001CFB8(v73, v74);
  uint64_t v77 = v75;
  unint64_t v78 = v76;
  sub_10001CFB8(v75, v76);
  sub_100037A24(0, 0xF000000000000000);
  uint64_t v79 = (uint64_t)v101;
  unint64_t v80 = v94;
  sub_100037A24((uint64_t)v101, v94);
  uint64_t v81 = v103;
  uint64_t v82 = v104;
  (*(void (**)(char *, char *, uint64_t))(v103 + 32))(&v44[v69[5]], v105, v104);
  sub_100B30DB4((uint64_t)v102, (uint64_t)&v44[v69[6]], (uint64_t (*)(void))type metadata accessor for StableIdentifier);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v81 + 56))(&v44[v69[7]], 1, 1, v82);
  *(_OWORD *)unint64_t v44 = xmmword_101348180;
  uint64_t v83 = (uint64_t *)&v44[v69[9]];
  *uint64_t v83 = v77;
  v83[1] = v78;
  *(_OWORD *)&v44[v69[10]] = xmmword_101347BB0;
  uint64_t v84 = (uint64_t *)&v44[v69[11]];
  *uint64_t v84 = v79;
  v84[1] = v80;
  unint64_t v85 = &v44[v69[12]];
  unint64_t v86 = v99;
  *(void *)unint64_t v85 = v98;
  *((void *)v85 + 1) = v86;
  uint64_t v87 = &v44[v69[13]];
  *(void *)uint64_t v87 = v100;
  *((void *)v87 + 1) = v74;
  unint64_t v88 = &v44[v69[14]];
  uint64_t v89 = v109;
  *(void *)unint64_t v88 = v110;
  *((void *)v88 + 1) = v89;
  unint64_t v90 = (uint64_t *)&v44[v69[15]];
  unint64_t v91 = v111;
  *unint64_t v90 = v113;
  v90[1] = v91;
  *(void *)&v44[v69[16]] = -1;
  *(void *)&v44[v69[17]] = -1;
  v44[v69[18]] = 3;
  v44[v69[19]] = 0;
  v44[v69[20]] = 0;
  return (id)(*(uint64_t (**)(char *, void, uint64_t, int *))(*((void *)v69 - 1) + 56))(v44, 0, 1, v69);
}

uint64_t sub_100B0144C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v33 = a4;
  uint64_t v34 = a5;
  uint64_t v29 = a1;
  uint64_t v30 = a3;
  uint64_t v35 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v38 = *(void *)(v35 - 8);
  __chkstk_darwin(v35);
  uint64_t v32 = (char *)&v28 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for DispatchQoS();
  uint64_t v36 = *(void *)(v7 - 8);
  uint64_t v37 = v7;
  __chkstk_darwin(v7);
  uint64_t v9 = (char *)&v28 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = type metadata accessor for OwnedBeaconRecord();
  uint64_t v11 = *(void *)(v10 - 8);
  uint64_t v12 = *(void *)(v11 + 64);
  __chkstk_darwin(v10 - 8);
  uint64_t v13 = (char *)&v28 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = sub_10000588C((uint64_t *)&unk_101656900);
  uint64_t v15 = *(void *)(v14 - 8);
  uint64_t v16 = *(void *)(v15 + 64);
  __chkstk_darwin(v14 - 8);
  uint64_t v17 = (char *)&v28 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v31 = *(void *)(a2 + 128);
  sub_10001D074(v29, (uint64_t)v17, (uint64_t *)&unk_101656900);
  sub_100B30D0C(v30, (uint64_t)v13, (uint64_t (*)(void))type metadata accessor for OwnedBeaconRecord);
  unint64_t v18 = (*(unsigned __int8 *)(v15 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v15 + 80);
  unint64_t v19 = (v16 + *(unsigned __int8 *)(v11 + 80) + v18) & ~(unint64_t)*(unsigned __int8 *)(v11 + 80);
  unint64_t v20 = (v12 + v19 + 7) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v21 = swift_allocObject();
  sub_10001D608((uint64_t)v17, v21 + v18, (uint64_t *)&unk_101656900);
  sub_100B30DB4((uint64_t)v13, v21 + v19, (uint64_t (*)(void))type metadata accessor for OwnedBeaconRecord);
  *(void *)(v21 + v20) = a2;
  uint64_t v22 = (void *)(v21 + ((v20 + 15) & 0xFFFFFFFFFFFFFFF8));
  uint64_t v23 = v34;
  *uint64_t v22 = v33;
  v22[1] = v23;
  aBlock[4] = sub_100B5CC58;
  void aBlock[5] = v21;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_1004B5480;
  aBlock[3] = &unk_1015E8D58;
  uint64_t v24 = _Block_copy(aBlock);
  swift_retain();
  swift_retain();
  static DispatchQoS.unspecified.getter();
  uint64_t v39 = _swiftEmptyArrayStorage;
  sub_100B22DA4((unint64_t *)&qword_10163B7E0, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
  sub_10000588C((uint64_t *)&unk_10163F350);
  sub_100062734((unint64_t *)&qword_10163B7F0, (uint64_t *)&unk_10163F350);
  uint64_t v25 = v32;
  uint64_t v26 = v35;
  dispatch thunk of SetAlgebra.init<A>(_:)();
  OS_dispatch_queue.async(group:qos:flags:execute:)();
  _Block_release(v24);
  (*(void (**)(char *, uint64_t))(v38 + 8))(v25, v26);
  (*(void (**)(char *, uint64_t))(v36 + 8))(v9, v37);
  return swift_release();
}

uint64_t sub_100B018B4(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(void *), uint64_t a5)
{
  long long v65 = a4;
  uint64_t v59 = a3;
  uint64_t v7 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v64 = *(void *)(v7 - 8);
  __chkstk_darwin(v7);
  uint64_t v62 = (char *)&v50 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v63 = type metadata accessor for DispatchQoS();
  uint64_t v61 = *(void *)(v63 - 8);
  __chkstk_darwin(v63);
  uint64_t v60 = (char *)&v50 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = type metadata accessor for DispatchQoS.QoSClass();
  uint64_t v57 = *(void *)(v10 - 8);
  uint64_t v58 = v10;
  __chkstk_darwin(v10);
  uint64_t v54 = (char *)&v50 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = type metadata accessor for OwnedBeaconRecord();
  uint64_t v55 = *(void *)(v12 - 8);
  uint64_t v13 = *(void *)(v55 + 64);
  uint64_t v14 = __chkstk_darwin(v12);
  uint64_t v56 = (uint64_t)&v50 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v14);
  uint64_t v16 = (char *)&v50 - v15;
  uint64_t v17 = sub_10000588C((uint64_t *)&unk_101656900);
  uint64_t v18 = __chkstk_darwin(v17);
  unint64_t v20 = (void *)((char *)&v50 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0));
  __chkstk_darwin(v18);
  uint64_t v22 = (uint64_t *)((char *)&v50 - v21);
  sub_10001D074(a1, (uint64_t)&v50 - v21, (uint64_t *)&unk_101656900);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v23 = *v22;
    static os_log_type_t.error.getter();
    if (qword_101637260 != -1) {
      swift_once();
    }
    sub_10000588C((uint64_t *)&unk_10163AD00);
    uint64_t v24 = swift_allocObject();
    *(_OWORD *)(v24 + 16) = xmmword_101342130;
    aBlock[0] = v23;
    swift_errorRetain();
    sub_10000588C(&qword_101638D40);
    uint64_t v25 = String.init<A>(describing:)();
    uint64_t v27 = v26;
    *(void *)(v24 + 56) = &type metadata for String;
    *(void *)(v24 + 64) = sub_10000B4CC();
    *(void *)(v24 + 32) = v25;
    *(void *)(v24 + 40) = v27;
    os_log(_:dso:log:_:_:)();
    swift_bridgeObjectRelease();
    *unint64_t v20 = v23;
    swift_storeEnumTagMultiPayload();
    swift_errorRetain();
    v65(v20);
    swift_errorRelease();
    return sub_10001DAB4((uint64_t)v20, (uint64_t *)&unk_101656900);
  }
  else
  {
    uint64_t v52 = v7;
    uint64_t v53 = a5;
    sub_100B30DB4((uint64_t)v22, (uint64_t)v16, (uint64_t (*)(void))type metadata accessor for OwnedBeaconRecord);
    static os_log_type_t.default.getter();
    if (qword_101637260 != -1) {
      swift_once();
    }
    sub_10000588C((uint64_t *)&unk_10163AD00);
    uint64_t v29 = swift_allocObject();
    long long v50 = xmmword_101342130;
    *(_OWORD *)(v29 + 16) = xmmword_101342130;
    uint64_t v51 = v16;
    uint64_t v30 = UUID.uuidString.getter();
    uint64_t v32 = v31;
    *(void *)(v29 + 56) = &type metadata for String;
    unint64_t v33 = sub_10000B4CC();
    *(void *)(v29 + 64) = v33;
    *(void *)(v29 + 32) = v30;
    *(void *)(v29 + 40) = v32;
    os_log(_:dso:log:_:_:)();
    swift_bridgeObjectRelease();
    static os_log_type_t.default.getter();
    if (qword_1016372D0 != -1) {
      swift_once();
    }
    uint64_t v34 = swift_allocObject();
    *(_OWORD *)(v34 + 16) = v50;
    uint64_t v35 = UUID.uuidString.getter();
    *(void *)(v34 + 56) = &type metadata for String;
    *(void *)(v34 + 64) = v33;
    *(void *)(v34 + 32) = v35;
    *(void *)(v34 + 40) = v36;
    os_log(_:dso:log:_:_:)();
    swift_bridgeObjectRelease();
    QueueSynchronizer.conditionalSync<A>(_:)();
    sub_10001D4B0(0, (unint64_t *)&qword_1016376E0);
    uint64_t v38 = v57;
    uint64_t v37 = v58;
    uint64_t v39 = v54;
    (*(void (**)(char *, void, uint64_t))(v57 + 104))(v54, enum case for DispatchQoS.QoSClass.default(_:), v58);
    unint64_t v40 = (void *)static OS_dispatch_queue.global(qos:)();
    (*(void (**)(char *, uint64_t))(v38 + 8))(v39, v37);
    uint64_t v41 = (uint64_t)v51;
    uint64_t v42 = v56;
    sub_100B30D0C((uint64_t)v51, v56, (uint64_t (*)(void))type metadata accessor for OwnedBeaconRecord);
    unint64_t v43 = (*(unsigned __int8 *)(v55 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v55 + 80);
    uint64_t v44 = swift_allocObject();
    uint64_t v45 = v53;
    *(void *)(v44 + 16) = v65;
    *(void *)(v44 + 24) = v45;
    sub_100B30DB4(v42, v44 + v43, (uint64_t (*)(void))type metadata accessor for OwnedBeaconRecord);
    aBlock[4] = sub_100B5CD68;
    void aBlock[5] = v44;
    aBlock[0] = _NSConcreteStackBlock;
    aBlock[1] = 1107296256;
    aBlock[2] = sub_1004B5480;
    aBlock[3] = &unk_1015E8DA8;
    id v46 = _Block_copy(aBlock);
    swift_retain();
    uint64_t v47 = v60;
    static DispatchQoS.unspecified.getter();
    id v66 = _swiftEmptyArrayStorage;
    sub_100B22DA4((unint64_t *)&qword_10163B7E0, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
    sub_10000588C((uint64_t *)&unk_10163F350);
    sub_100062734((unint64_t *)&qword_10163B7F0, (uint64_t *)&unk_10163F350);
    unint64_t v48 = v62;
    uint64_t v49 = v52;
    dispatch thunk of SetAlgebra.init<A>(_:)();
    OS_dispatch_queue.async(group:qos:flags:execute:)();
    _Block_release(v46);

    (*(void (**)(char *, uint64_t))(v64 + 8))(v48, v49);
    (*(void (**)(char *, uint64_t))(v61 + 8))(v47, v63);
    sub_100B310AC(v41, (uint64_t (*)(void))type metadata accessor for OwnedBeaconRecord);
    return swift_release();
  }
}

uint64_t sub_100B02144(void (*a1)(char *), uint64_t a2, uint64_t a3)
{
  uint64_t v5 = sub_10000588C((uint64_t *)&unk_101656900);
  __chkstk_darwin(v5);
  uint64_t v7 = (char *)&v9 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100B30D0C(a3, (uint64_t)v7, (uint64_t (*)(void))type metadata accessor for OwnedBeaconRecord);
  swift_storeEnumTagMultiPayload();
  a1(v7);
  return sub_10001DAB4((uint64_t)v7, (uint64_t *)&unk_101656900);
}

uint64_t sub_100B0221C(uint64_t *a1, uint64_t a2, unint64_t a3)
{
  uint64_t v83 = a2;
  unint64_t v84 = a3;
  uint64_t v4 = type metadata accessor for Date();
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v75 = v4;
  uint64_t v76 = v5;
  __chkstk_darwin(v4);
  uint64_t v7 = (char *)&v47 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v77 = v7;
  uint64_t v8 = sub_10000588C(&qword_101638CF0);
  __chkstk_darwin(v8 - 8);
  uint64_t v10 = (char *)&v47 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v79 = v10;
  uint64_t v11 = type metadata accessor for StableIdentifier();
  __chkstk_darwin(v11 - 8);
  uint64_t v13 = (char *)&v47 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  unint64_t v78 = v13;
  uint64_t v14 = type metadata accessor for UUID();
  uint64_t v15 = *(void *)(v14 - 8);
  __chkstk_darwin(v14);
  uint64_t v17 = (char *)&v47 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v82 = v17;
  uint64_t v54 = *a1;
  unint64_t v53 = a1[1];
  uint64_t v18 = (int *)type metadata accessor for OwnedBeaconRecord();
  uint64_t v81 = (char *)a1 + v18[5];
  uint64_t v64 = v15;
  uint64_t v19 = *(void (**)(char *))(v15 + 16);
  uint64_t v59 = v14;
  v19(v17);
  uint64_t v80 = (uint64_t)a1 + v18[6];
  sub_100B30D0C(v80, (uint64_t)v13, (uint64_t (*)(void))type metadata accessor for StableIdentifier);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v15 + 56))(v10, 1, 1, v14);
  unint64_t v74 = (char *)a1 + v18[8];
  (*(void (**)(char *))(v5 + 16))(v7);
  uint64_t v20 = v18[10];
  uint64_t v71 = (uint64_t *)((char *)a1 + v18[9]);
  unint64_t v22 = v71[1];
  uint64_t v51 = *v71;
  uint64_t v21 = v51;
  unint64_t v52 = v22;
  uint64_t v73 = (uint64_t *)((char *)a1 + v20);
  unint64_t v23 = *(uint64_t *)((char *)a1 + v20 + 8);
  uint64_t v86 = *(uint64_t *)((char *)a1 + v20);
  unint64_t v50 = v23;
  uint64_t v24 = v18[13];
  uint64_t v70 = (uint64_t *)((char *)a1 + v18[12]);
  unint64_t v25 = v70[1];
  uint64_t v85 = *v70;
  unint64_t v72 = (uint64_t *)((char *)a1 + v24);
  unint64_t v26 = *(uint64_t *)((char *)a1 + v24 + 8);
  uint64_t v48 = *(uint64_t *)((char *)a1 + v24);
  unint64_t v49 = v26;
  uint64_t v27 = v18[15];
  uint64_t v56 = (uint64_t *)((char *)a1 + v18[14]);
  uint64_t v69 = *v56;
  uint64_t v47 = v56[1];
  uint64_t v65 = v18[16];
  uint64_t v28 = v18[17];
  uint64_t v66 = *(uint64_t *)((char *)a1 + v65);
  uint64_t v67 = v28;
  uint64_t v68 = *(uint64_t *)((char *)a1 + v28);
  uint64_t v29 = (uint64_t *)((char *)a1 + v27);
  uint64_t v62 = v18[18];
  uint64_t v58 = v18[19];
  int v63 = *((unsigned __int8 *)a1 + v62);
  uint64_t v30 = *(uint64_t *)((char *)a1 + v27 + 8);
  uint64_t v55 = *(uint64_t *)((char *)a1 + v27);
  int v61 = *((unsigned __int8 *)a1 + v58);
  uint64_t v57 = v18[20];
  int v60 = *((unsigned __int8 *)a1 + v57);
  uint64_t v31 = v54;
  unint64_t v32 = v53;
  sub_1000361E0(v54, v53);
  sub_1000361E0(v21, v22);
  sub_100037A38(v86, v23);
  sub_1000361E0(v85, v25);
  uint64_t v33 = v48;
  unint64_t v34 = v49;
  sub_1000361E0(v48, v49);
  uint64_t v35 = v47;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  sub_100B310AC((uint64_t)a1, (uint64_t (*)(void))type metadata accessor for OwnedBeaconRecord);
  *a1 = v31;
  a1[1] = v32;
  (*(void (**)(char *, char *, uint64_t))(v64 + 32))(v81, v82, v59);
  sub_100B30DB4((uint64_t)v78, v80, (uint64_t (*)(void))type metadata accessor for StableIdentifier);
  sub_10001D608((uint64_t)v79, (uint64_t)a1 + v18[7], &qword_101638CF0);
  (*(void (**)(char *, char *, uint64_t))(v76 + 32))(v74, v77, v75);
  uint64_t v36 = v71;
  unint64_t v37 = v52;
  *uint64_t v71 = v51;
  v36[1] = v37;
  uint64_t v38 = v73;
  unint64_t v39 = v50;
  *uint64_t v73 = v86;
  v38[1] = v39;
  unint64_t v40 = (uint64_t *)((char *)a1 + v18[11]);
  uint64_t v41 = v83;
  unint64_t v42 = v84;
  *unint64_t v40 = v83;
  v40[1] = v42;
  unint64_t v43 = v70;
  *uint64_t v70 = v85;
  v43[1] = v25;
  uint64_t v44 = v72;
  *unint64_t v72 = v33;
  v44[1] = v34;
  uint64_t v45 = v56;
  *uint64_t v56 = v69;
  v45[1] = v35;
  *uint64_t v29 = v55;
  v29[1] = v30;
  *(uint64_t *)((char *)a1 + v65) = v66;
  *(uint64_t *)((char *)a1 + v67) = v68;
  *((unsigned char *)a1 + v62) = v63;
  *((unsigned char *)a1 + v58) = v61;
  *((unsigned char *)a1 + v57) = v60;
  return sub_1000361E0(v41, v42);
}

void sub_100B02794(uint64_t a1, uint64_t a2, NSObject *a3)
{
  uint64_t v5 = type metadata accessor for OwnedBeaconRecord();
  __chkstk_darwin(v5 - 8);
  uint64_t v7 = (char *)&v16 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = sub_10000588C((uint64_t *)&unk_101656900);
  __chkstk_darwin(v8);
  uint64_t v10 = (char *)&v16 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = swift_projectBox();
  sub_10001D074(a1, (uint64_t)v10, (uint64_t *)&unk_101656900);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    static os_log_type_t.error.getter();
    if (qword_101637260 != -1) {
      swift_once();
    }
    sub_10000588C((uint64_t *)&unk_10163AD00);
    uint64_t v12 = swift_allocObject();
    *(_OWORD *)(v12 + 16) = xmmword_101342130;
    swift_getErrorValue();
    uint64_t v13 = Error.localizedDescription.getter();
    uint64_t v15 = v14;
    *(void *)(v12 + 56) = &type metadata for String;
    *(void *)(v12 + 64) = sub_10000B4CC();
    *(void *)(v12 + 32) = v13;
    *(void *)(v12 + 40) = v15;
    os_log(_:dso:log:_:_:)();
    swift_bridgeObjectRelease();
    swift_errorRelease();
  }
  else
  {
    sub_100B30DB4((uint64_t)v10, (uint64_t)v7, (uint64_t (*)(void))type metadata accessor for OwnedBeaconRecord);
    swift_beginAccess();
    sub_100B5E098((uint64_t)v7, v11, (uint64_t (*)(void))type metadata accessor for OwnedBeaconRecord);
  }
  dispatch_group_leave(a3);
}

uint64_t sub_100B029E4@<X0>(uint64_t a1@<X0>, char *a2@<X1>, uint64_t a3@<X2>, int a4@<W3>, char a5@<W4>, uint64_t *a6@<X8>)
{
  uint64_t v38 = a2;
  uint64_t v11 = type metadata accessor for UUID();
  uint64_t v54 = *(void *)(v11 - 8);
  __chkstk_darwin(v11);
  unint64_t v39 = (char *)&v37 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = type metadata accessor for BeaconKeyManager.IndexInformation(0);
  __chkstk_darwin(v13);
  uint64_t v15 = (char *)&v37 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  int v40 = a4;
  uint64_t v41 = a3;
  if ((_BYTE)a4)
  {
    if (a4 == 1)
    {
      uint64_t v44 = &type metadata for SecondaryIndex;
      unint64_t v16 = sub_1001A15EC();
    }
    else
    {
      uint64_t v44 = &type metadata for SecureLocationsIndex;
      unint64_t v16 = sub_1001A1598();
    }
  }
  else
  {
    uint64_t v44 = &type metadata for PrimaryIndex;
    unint64_t v16 = sub_1001A1640();
  }
  unint64_t v45 = v16;
  *(void *)&long long v43 = a3;
  sub_10001CEB0(&v43, (uint64_t)v46);
  uint64_t v17 = *(void (**)(char *, uint64_t, uint64_t))(v54 + 16);
  v17(v15, a1, v11);
  sub_10001D010((uint64_t)v46, (uint64_t)&v15[*(int *)(v13 + 20)]);
  sub_1012E50B0((uint64_t)v15, a5 & 1, v47);
  sub_100B310AC((uint64_t)v15, type metadata accessor for BeaconKeyManager.IndexInformation);
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)v46);
  sub_10001D608((uint64_t)v47, (uint64_t)&v48, &qword_101649698);
  if (*((void *)&v49 + 1) >> 60 == 15)
  {
    if (qword_101636F50 != -1) {
      swift_once();
    }
    uint64_t v18 = type metadata accessor for Logger();
    sub_100010324(v18, (uint64_t)qword_10170E9E8);
    uint64_t v19 = v39;
    v17(v39, a1, v11);
    uint64_t v20 = v42;
    swift_retain_n();
    uint64_t v21 = Logger.logObject.getter();
    os_log_type_t v22 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v21, v22))
    {
      uint64_t v23 = swift_slowAlloc();
      uint64_t v38 = (char *)swift_slowAlloc();
      v46[0] = (uint64_t)v38;
      *(_DWORD *)uint64_t v23 = 136447491;
      *(void *)&long long v43 = *v20;
      sub_10000588C(&qword_10164B810);
      uint64_t v24 = String.init<A>(describing:)();
      *(void *)&long long v43 = sub_1008FA0F0(v24, v25, v46);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_release_n();
      swift_bridgeObjectRelease();
      *(_WORD *)(v23 + 12) = 2082;
      *(void *)&long long v43 = sub_1008FA0F0(0xD00000000000004BLL, 0x8000000101414720, v46);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v23 + 22) = 2160;
      *(void *)&long long v43 = 1752392040;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v23 + 32) = 2081;
      uint64_t v26 = UUID.uuidString.getter();
      *(void *)&long long v43 = sub_1008FA0F0(v26, v27, v46);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      (*(void (**)(char *, uint64_t))(v54 + 8))(v19, v11);
      *(_WORD *)(v23 + 42) = 2082;
      if ((_BYTE)v40)
      {
        uint64_t v28 = v41;
        if (v40 == 1)
        {
          unint64_t v34 = 0xEA00000000007972;
          uint64_t v35 = 0x61646E6F6365732ELL;
        }
        else
        {
          unint64_t v34 = 0x80000001013F28C0;
          uint64_t v35 = 0xD000000000000010;
        }
      }
      else
      {
        unint64_t v34 = 0xE800000000000000;
        uint64_t v35 = 0x7972616D6972702ELL;
        uint64_t v28 = v41;
      }
      *(void *)&long long v43 = sub_1008FA0F0(v35, v34, v46);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      *(_WORD *)(v23 + 52) = 2048;
      *(void *)&long long v43 = v28;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      _os_log_impl((void *)&_mh_execute_header, v21, v22, "%{public}s: %{public}s. Unable to obtain keys for beacon %{private,mask.hash}s, sequence %{public}s, index %llu", (uint8_t *)v23, 0x3Eu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      swift_release_n();
      (*(void (**)(char *, uint64_t))(v54 + 8))(v19, v11);
    }

    sub_10009FD9C();
    swift_allocError();
    *uint64_t v36 = 10;
    return swift_willThrow();
  }
  else
  {
    long long v51 = v48;
    long long v52 = v49;
    long long v53 = v50;
    sub_1006DD094(v40);
    uint64_t v29 = type metadata accessor for TimeBasedKey();
    uint64_t v30 = v41;
    uint64_t result = sub_1008B2794(v38, v41, (uint64_t)a6 + *(int *)(v29 + 20));
    *a6 = v30;
    unint64_t v32 = (_OWORD *)((char *)a6 + *(int *)(v29 + 24));
    long long v33 = v52;
    *unint64_t v32 = v51;
    v32[1] = v33;
    v32[2] = v53;
  }
  return result;
}

uint64_t sub_100B03074(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  *(void *)(v7 + 16) = a1;
  uint64_t v15 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))((char *)&dword_10164B7F0 + dword_10164B7F0);
  uint64_t v13 = (void *)swift_task_alloc();
  *(void *)(v7 + 24) = v13;
  *uint64_t v13 = v7;
  v13[1] = sub_100B0315C;
  return v15(a3, a4, a5, a6, a7);
}

uint64_t sub_100B0315C(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t v8 = *v4;
  swift_task_dealloc();
  if (v3)
  {
    swift_errorRelease();
    uint64_t v9 = sub_100B032C8;
  }
  else
  {
    *(unsigned char *)(v8 + 48) = a3;
    *(void *)(v8 + 32) = a2;
    *(void *)(v8 + 40) = a1;
    uint64_t v9 = sub_100B0329C;
  }
  return _swift_task_switch(v9, 0, 0);
}

uint64_t sub_100B0329C()
{
  __int8 v1 = *(unsigned char *)(v0 + 48);
  uint64_t v2 = *(int8x16_t **)(v0 + 16);
  *uint64_t v2 = vextq_s8(*(int8x16_t *)(v0 + 32), *(int8x16_t *)(v0 + 32), 8uLL);
  v2[1].i8[0] = v1;
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100B032C8()
{
  uint64_t v1 = *(void *)(v0 + 16);
  *(void *)uint64_t v1 = 0;
  *(void *)(v1 + 8) = 0;
  *(unsigned char *)(v1 + 16) = 3;
  return (*(uint64_t (**)(void))(v0 + 8))();
}

void *sub_100B032EC(void *a1, uint64_t a2)
{
  v356 = a1;
  uint64_t v338 = type metadata accessor for UUID();
  uint64_t v337 = *(void *)(v338 - 8);
  __chkstk_darwin(v338);
  v336 = (char *)&v335 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v365 = _s18ConnectionKeyGroupVMa();
  uint64_t v340 = *(void *)(v365 - 8);
  uint64_t v4 = __chkstk_darwin(v365);
  uint64_t v350 = (uint64_t)&v335 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = __chkstk_darwin(v4);
  uint64_t v346 = (uint64_t)&v335 - v7;
  uint64_t v8 = __chkstk_darwin(v6);
  v348 = (uint64_t *)((char *)&v335 - v9);
  uint64_t v10 = __chkstk_darwin(v8);
  uint64_t v344 = (uint64_t)&v335 - v11;
  uint64_t v12 = __chkstk_darwin(v10);
  uint64_t v14 = (char *)&v335 - v13;
  uint64_t v15 = __chkstk_darwin(v12);
  uint64_t v349 = (uint64_t *)((char *)&v335 - v16);
  uint64_t v17 = __chkstk_darwin(v15);
  uint64_t v345 = (uint64_t)&v335 - v18;
  uint64_t v19 = __chkstk_darwin(v17);
  v347 = (uint64_t *)((char *)&v335 - v20);
  __chkstk_darwin(v19);
  uint64_t v343 = (uint64_t)&v335 - v21;
  uint64_t v369 = type metadata accessor for TimeBasedKey();
  uint64_t v339 = *(void *)(v369 - 8);
  uint64_t v22 = __chkstk_darwin(v369);
  v361 = (uint64_t *)((char *)&v335 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v24 = __chkstk_darwin(v22);
  uint64_t v352 = (void (**)(char *, uint64_t, uint64_t))((char *)&v335 - v25);
  uint64_t v26 = __chkstk_darwin(v24);
  v358 = (void (**)(uint64_t, uint64_t, uint64_t, unint64_t))((char *)&v335 - v27);
  uint64_t v28 = __chkstk_darwin(v26);
  uint64_t v363 = (uint64_t)&v335 - v29;
  uint64_t v30 = __chkstk_darwin(v28);
  uint64_t v359 = (uint64_t)&v335 - v31;
  uint64_t v32 = __chkstk_darwin(v30);
  uint64_t v351 = (uint64_t)&v335 - v33;
  uint64_t v34 = __chkstk_darwin(v32);
  v357 = (uint64_t *)((char *)&v335 - v35);
  __chkstk_darwin(v34);
  v362 = (char *)&v335 - v36;
  uint64_t v37 = sub_10000588C(&qword_10163A958);
  uint64_t v367 = *(void *)(v37 - 8);
  uint64_t v368 = v37;
  uint64_t v38 = __chkstk_darwin(v37);
  int v40 = (char *)&v335 - ((v39 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v41 = __chkstk_darwin(v38);
  uint64_t v360 = (uint64_t)&v335 - v42;
  uint64_t v43 = __chkstk_darwin(v41);
  unint64_t v45 = (char *)&v335 - v44;
  uint64_t v46 = __chkstk_darwin(v43);
  long long v48 = (char *)&v335 - v47;
  uint64_t v49 = __chkstk_darwin(v46);
  uint64_t v353 = (uint64_t *)((char *)&v335 - v50);
  __chkstk_darwin(v49);
  long long v52 = (char *)&v335 - v51;
  uint64_t v53 = type metadata accessor for Date();
  __chkstk_darwin(v53 - 8);
  uint64_t v55 = (char *)&v335 - ((v54 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v364 = type metadata accessor for DateInterval();
  uint64_t v354 = *(void *)(v364 - 8);
  uint64_t v56 = __chkstk_darwin(v364);
  uint64_t v342 = (char *)&v335 - ((v57 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v56);
  uint64_t v341 = (char *)&v335 - v58;
  uint64_t v59 = type metadata accessor for TimeBasedKeysCriteria();
  __chkstk_darwin(v59);
  unint64_t v61 = (unint64_t)&v335 - ((v60 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100B30D0C(a2, v61, (uint64_t (*)(void))type metadata accessor for TimeBasedKeysCriteria);
  uint64_t EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  switch((int)EnumCaseMultiPayload)
  {
    case 1:
      uint64_t v121 = *(void *)v61;
      __chkstk_darwin(EnumCaseMultiPayload);
      uint64_t v333 = v355;
      unint64_t v334 = v356;
      unint64_t v122 = v366;
      unint64_t v123 = sub_100F48708((void (*)(void))sub_100B5B164, (uint64_t)(&v335 - 4), v121);
      unint64_t v366 = v122;
      swift_bridgeObjectRelease();
      return v123;
    case 2:
      unint64_t v110 = *(void *)v61;
      if (!*(void *)v61) {
        goto LABEL_311;
      }
      unint64_t v111 = v110 - 1;
      if (v110 - 1 <= 1) {
        unint64_t v111 = 1;
      }
      if (is_mul_ok(v111, 0x60uLL))
      {
        uint64_t v112 = 96 * v111;
        if ((unint64_t)(v112 - 96) <= 1) {
          unint64_t v113 = 1;
        }
        else {
          unint64_t v113 = v112 - 96;
        }
        if (v112 - 1 >= v113)
        {
          if (is_mul_ok(v110, 0x60uLL))
          {
            uint64_t v114 = 96 * v110;
            unint64_t v115 = v114 - 1;
            unint64_t v116 = v114 - 96;
            if (v116 <= 1) {
              unint64_t v116 = 1;
            }
            if (v115 >= v116)
            {
              int v117 = *(unsigned __int8 *)(v61 + 8);
              uint64_t v118 = v356;
              return (void *)sub_100B087E4((uint64_t)v118, v117, v113, v115);
            }
LABEL_194:
            __break(1u);
LABEL_195:
            __break(1u);
LABEL_196:
            __break(1u);
LABEL_197:
            __break(1u);
LABEL_198:
            __break(1u);
LABEL_199:
            __break(1u);
LABEL_200:
            __break(1u);
LABEL_201:
            __break(1u);
LABEL_202:
            __break(1u);
LABEL_203:
            __break(1u);
LABEL_204:
            __break(1u);
LABEL_205:
            __break(1u);
LABEL_206:
            __break(1u);
LABEL_207:
            __break(1u);
LABEL_208:
            __break(1u);
LABEL_209:
            __break(1u);
LABEL_210:
            __break(1u);
LABEL_211:
            __break(1u);
            goto LABEL_212;
          }
LABEL_193:
          __break(1u);
          goto LABEL_194;
        }
      }
      else
      {
        __break(1u);
      }
      __break(1u);
      goto LABEL_193;
    case 3:
      unint64_t v113 = *(void *)(v61 + 8);
      int v117 = *(unsigned __int8 *)(v61 + 16);
      if ((*(unsigned char *)v61 & 1) == 0)
      {
        unint64_t v115 = v113 + 96;
        uint64_t v118 = v356;
        if (v113 >= 0xFFFFFFFFFFFFFFA0) {
          goto LABEL_211;
        }
        return (void *)sub_100B087E4((uint64_t)v118, v117, v113, v115);
      }
      uint64_t v118 = v356;
      if (!v113)
      {
        LODWORD(v334) = 0;
        for (uint64_t i = 4269; ; uint64_t i = 4253)
        {
          uint64_t v333 = (void (**)(void, void, void))i;
LABEL_310:
          _assertionFailure(_:_:file:line:flags:)();
          __break(1u);
LABEL_311:
          LODWORD(v334) = 0;
        }
      }
      if (!is_mul_ok(v113, 0x60uLL))
      {
LABEL_212:
        __break(1u);
        goto LABEL_213;
      }
      unint64_t v119 = 96 * v113 - 96;
      if (v119 <= 1) {
        unint64_t v119 = 1;
      }
      if (96 * v113 - 1 >= v119)
      {
        if (!is_mul_ok(v113 + 1, 0x60uLL)) {
          goto LABEL_214;
        }
        uint64_t v120 = 96 * (v113 + 1);
        unint64_t v115 = v120 - 1;
        if (v120 - 1 < (unint64_t)(v120 - 96)) {
          goto LABEL_215;
        }
        unint64_t v113 = v119;
        return (void *)sub_100B087E4((uint64_t)v118, v117, v113, v115);
      }
LABEL_213:
      __break(1u);
LABEL_214:
      __break(1u);
LABEL_215:
      __break(1u);
LABEL_216:
      swift_once();
LABEL_46:
      uint64_t v132 = type metadata accessor for Logger();
      sub_100010324(v132, (uint64_t)qword_10170E9E8);
      sub_10001D010(v61, (uint64_t)&v373);
      uint64_t v133 = Logger.logObject.getter();
      os_log_type_t v134 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v133, v134))
      {
        uint64_t v135 = swift_slowAlloc();
        uint64_t v371 = swift_slowAlloc();
        *(_DWORD *)uint64_t v135 = 141558275;
        uint64_t v377 = 1752392040;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        *(_WORD *)(v135 + 12) = 2081;
        uint64_t v369 = v135 + 14;
        uint64_t v137 = v375;
        unint64_t v136 = v376;
        sub_10001CD44(&v373, (uint64_t)v375);
        unint64_t v138 = v336;
        (*(void (**)(ValueMetadata *))(*(void *)(*(void *)(v136 + 8) + 8) + 32))(v137);
        sub_100B22DA4((unint64_t *)&qword_101638B10, (void (*)(uint64_t))&type metadata accessor for UUID);
        uint64_t v139 = v338;
        uint64_t v140 = dispatch thunk of CustomStringConvertible.description.getter();
        unint64_t v142 = v141;
        (*(void (**)(char *, uint64_t))(v337 + 8))(v138, v139);
        uint64_t v377 = sub_1008FA0F0(v140, v142, &v371);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)&v373);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
      }
      else
      {
        _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)&v373);
      }

      (*(void (**)(char *, uint64_t))(v354 + 8))(v341, v364);
      return _swiftEmptyArrayStorage;
    case 4:
      static Date.trustedNow.getter((uint64_t)v55);
      uint64_t v87 = (uint64_t)v341;
      DateInterval.init(start:duration:)();
      unint64_t v61 = (unint64_t)v356;
      uint64_t v88 = v356[3];
      uint64_t v89 = v356[4];
      unint64_t v90 = sub_10001CD44(v356, v88);
      uint64_t v91 = sub_100B2F5F4((uint64_t)v90, v87, 0, 0, 0, (uint64_t)v355, v88, v89);
      uint64_t v93 = v91;
      uint64_t v94 = v92;
      unint64_t v95 = v365;
      switch(v96)
      {
        case 1:
          uint64_t v143 = *(void **)(v91 + 16);
          unint64_t v123 = _swiftEmptyArrayStorage;
          if (!v143) {
            goto LABEL_119;
          }
          uint64_t v350 = v92;
          uint64_t v377 = (uint64_t)_swiftEmptyArrayStorage;
          sub_1000B7C44(0, (int64_t)v143, 0);
          unint64_t v144 = (*(unsigned __int8 *)(v339 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v339 + 80);
          v348 = (uint64_t *)v93;
          unint64_t v145 = v93 + v144;
          uint64_t v359 = *(void *)(v339 + 72);
          uint64_t v360 = v339 + 56;
          uint64_t v353 = v347 + 4;
          uint64_t v352 = (void (**)(char *, uint64_t, uint64_t))(v354 + 16);
          v358 = (void (**)(uint64_t, uint64_t, uint64_t, unint64_t))(v340 + 56);
          uint64_t v146 = v357;
          do
          {
            uint64_t v147 = (uint64_t)v362;
            sub_100B30D0C(v145, (uint64_t)v362, (uint64_t (*)(void))type metadata accessor for TimeBasedKey);
            uint64_t v363 = (uint64_t)&v52[*(int *)(v368 + 48)];
            sub_100B30D0C(v147, (uint64_t)v52, (uint64_t (*)(void))type metadata accessor for TimeBasedKey);
            uint64_t v148 = v369;
            (*(void (**)(char *, void, uint64_t, uint64_t))v360)(v52, 0, 1, v369);
            sub_100B30D0C(v147, (uint64_t)v146, (uint64_t (*)(void))type metadata accessor for TimeBasedKey);
            int64_t v149 = (void *)((char *)v146 + *(int *)(v148 + 24));
            unint64_t v150 = v149[1];
            if (v150 >> 60 == 15)
            {
              sub_100B310AC((uint64_t)v146, (uint64_t (*)(void))type metadata accessor for TimeBasedKey);
              uint64_t v151 = 1;
              uint64_t v152 = v363;
            }
            else
            {
              v356 = v143;
              uint64_t v153 = v52;
              unint64_t v95 = *v149;
              sub_1000361E0(*v149, v150);
              unint64_t v154 = String.utf8Data.getter();
              unint64_t v156 = v155;
              sub_1000361E0(v95, v150);
              unint64_t v157 = v366;
              v361 = (uint64_t *)sub_100A941DC(v95, v150, v154, v156, 32);
              unint64_t v61 = v157;
              if (v157) {
                goto LABEL_281;
              }
              unint64_t v159 = (unint64_t)v158;
              sub_100037A24(v95, v150);
              unint64_t v160 = v159 >> 62;
              v355 = (void (**)(uint64_t, void, uint64_t))v159;
              switch(v159 >> 62)
              {
                case 1uLL:
                  LODWORD(v161) = HIDWORD(v361) - v361;
                  if (__OFSUB__(HIDWORD(v361), v361)) {
                    goto LABEL_199;
                  }
                  uint64_t v161 = (int)v161;
LABEL_60:
                  if (v161 != 32)
                  {
                    if (v160 != 1) {
                      goto LABEL_249;
                    }
                    LODWORD(v245) = HIDWORD(v361) - v361;
                    if (!__OFSUB__(HIDWORD(v361), v361))
                    {
                      unint64_t v326 = (int)v245;
                      goto LABEL_287;
                    }
                    __break(1u);
LABEL_221:
                    if (v245 != 1) {
                      goto LABEL_253;
                    }
                    LODWORD(v211) = HIDWORD(v362) - v362;
                    if (!__OFSUB__(HIDWORD(v362), v362))
                    {
                      uint64_t v327 = (int)v211;
                      goto LABEL_292;
                    }
                    __break(1u);
LABEL_225:
                    if (v211 != 1) {
                      goto LABEL_257;
                    }
                    LODWORD(v277) = HIDWORD(v361) - v361;
                    if (!__OFSUB__(HIDWORD(v361), v361))
                    {
                      unint64_t v328 = (int)v277;
                      goto LABEL_289;
                    }
                    __break(1u);
LABEL_229:
                    if (v277 != 1) {
                      goto LABEL_261;
                    }
                    LODWORD(v169) = HIDWORD(v363) - v363;
                    if (!__OFSUB__(HIDWORD(v363), v363))
                    {
                      uint64_t v329 = (int)v169;
                      goto LABEL_296;
                    }
                    __break(1u);
LABEL_233:
                    if (v169 != 1) {
                      goto LABEL_265;
                    }
                    LODWORD(v253) = HIDWORD(v154) - v154;
                    if (!__OFSUB__(HIDWORD(v154), v154))
                    {
                      uint64_t v330 = (int)v253;
                      goto LABEL_300;
                    }
                    __break(1u);
LABEL_237:
                    if (v253 != 1) {
                      goto LABEL_269;
                    }
                    LODWORD(v219) = HIDWORD(v95) - v95;
                    if (!__OFSUB__(HIDWORD(v95), v95))
                    {
                      uint64_t v331 = (int)v219;
                      goto LABEL_304;
                    }
                    __break(1u);
LABEL_241:
                    if (v219 != 1) {
                      goto LABEL_273;
                    }
                    LODWORD(v285) = HIDWORD(v61) - v61;
                    if (!__OFSUB__(HIDWORD(v61), v61))
                    {
                      uint64_t v332 = (int)v285;
                      goto LABEL_302;
                    }
                    __break(1u);
LABEL_245:
                    if (v285 != 1) {
                      goto LABEL_277;
                    }
                    LODWORD(v160) = HIDWORD(v95) - v95;
                    if (!__OFSUB__(HIDWORD(v95), v95))
                    {
                      unint64_t v156 = (int)v160;
                      goto LABEL_307;
                    }
                    __break(1u);
LABEL_249:
                    if (v160 != 2)
                    {
                      unint64_t v326 = BYTE6(v355);
                      goto LABEL_287;
                    }
                    uint64_t v297 = v361[2];
                    unint64_t v245 = v361[3];
                    unint64_t v326 = v245 - v297;
                    if (!__OFSUB__(v245, v297))
                    {
LABEL_287:
                      sub_10013019C();
                      unint64_t v61 = swift_allocError();
                      *(void *)uint64_t v307 = 32;
                      *(void *)(v307 + 8) = v326;
                      *(unsigned char *)(v307 + 16) = 0;
                      swift_willThrow();
                      sub_10001CFB8((uint64_t)v361, (unint64_t)v355);
                      uint64_t v308 = v154;
                      unint64_t v309 = v156;
                      goto LABEL_293;
                    }
                    __break(1u);
LABEL_253:
                    if (v245 == 2)
                    {
                      uint64_t v298 = *((void *)v362 + 2);
                      unint64_t v211 = *((void *)v362 + 3);
                      uint64_t v327 = v211 - v298;
                      if (!__OFSUB__(v211, v298)) {
                        goto LABEL_292;
                      }
                      __break(1u);
LABEL_257:
                      if (v211 != 2)
                      {
                        unint64_t v328 = BYTE6(v355);
                        goto LABEL_289;
                      }
                      uint64_t v299 = v361[2];
                      unint64_t v277 = v361[3];
                      unint64_t v328 = v277 - v299;
                      if (!__OFSUB__(v277, v299))
                      {
LABEL_289:
                        sub_10013019C();
                        unint64_t v95 = swift_allocError();
                        *(void *)uint64_t v310 = 32;
                        *(void *)(v310 + 8) = v328;
                        *(unsigned char *)(v310 + 16) = 0;
                        swift_willThrow();
                        sub_10001CFB8((uint64_t)v361, (unint64_t)v355);
                        sub_10001CFB8(v61, v145);
LABEL_290:
                        v373 = 0;
                        unint64_t v374 = 0xE000000000000000;
                        _StringGuts.grow(_:)(35);
                        v311._object = (void *)0x80000001013FB8E0;
                        v311._uint64_t countAndFlagsBits = 0xD000000000000021;
                        String.append(_:)(v311);
                        uint64_t v371 = v95;
LABEL_298:
                        sub_10000588C(&qword_101638D40);
                        _print_unlocked<A, B>(_:_:)();
                        LODWORD(v334) = 0;
                        uint64_t v316 = 423;
LABEL_309:
                        uint64_t v333 = (void (**)(void, void, void))v316;
                        goto LABEL_310;
                      }
                      __break(1u);
LABEL_261:
                      if (v277 != 2)
                      {
                        uint64_t v329 = BYTE6(v356);
                        goto LABEL_296;
                      }
                      uint64_t v300 = *(void *)(v363 + 16);
                      unint64_t v169 = *(void *)(v363 + 24);
                      uint64_t v329 = v169 - v300;
                      if (!__OFSUB__(v169, v300))
                      {
LABEL_296:
                        sub_10013019C();
                        unint64_t v145 = swift_allocError();
                        *(void *)uint64_t v314 = 32;
                        *(void *)(v314 + 8) = v329;
                        *(unsigned char *)(v314 + 16) = 0;
                        swift_willThrow();
                        sub_10001CFB8(v363, (unint64_t)v356);
                        sub_10001CFB8((uint64_t)v149, v95);
                        goto LABEL_297;
                      }
                      __break(1u);
LABEL_265:
                      if (v169 != 2)
                      {
                        uint64_t v330 = BYTE6(v61);
                        goto LABEL_300;
                      }
                      uint64_t v301 = *(void *)(v154 + 16);
                      unint64_t v253 = *(void *)(v154 + 24);
                      uint64_t v330 = v253 - v301;
                      if (!__OFSUB__(v253, v301))
                      {
LABEL_300:
                        sub_10013019C();
                        uint64_t v317 = swift_allocError();
                        *(void *)uint64_t v318 = 28;
                        *(void *)(v318 + 8) = v330;
                        *(unsigned char *)(v318 + 16) = 0;
                        swift_willThrow();
                        uint64_t v319 = v154;
                        goto LABEL_305;
                      }
                      __break(1u);
LABEL_269:
                      if (v253 != 2)
                      {
                        uint64_t v331 = BYTE6(v61);
LABEL_304:
                        sub_10013019C();
                        uint64_t v317 = swift_allocError();
                        *(void *)uint64_t v322 = 28;
                        *(void *)(v322 + 8) = v331;
                        *(unsigned char *)(v322 + 16) = 0;
                        swift_willThrow();
                        uint64_t v319 = v95;
LABEL_305:
                        unint64_t v321 = v61;
LABEL_308:
                        sub_10001CFB8(v319, v321);
                        uint64_t v371 = 0;
                        unint64_t v372 = 0xE000000000000000;
                        _StringGuts.grow(_:)(35);
                        v324._object = (void *)0x80000001013F3B70;
                        v324._uint64_t countAndFlagsBits = 0xD000000000000021;
                        String.append(_:)(v324);
                        uint64_t v370 = v317;
                        sub_10000588C(&qword_101638D40);
                        _print_unlocked<A, B>(_:_:)();
                        LODWORD(v334) = 0;
                        uint64_t v316 = 256;
                        goto LABEL_309;
                      }
                      uint64_t v302 = *(void *)(v95 + 16);
                      unint64_t v219 = *(void *)(v95 + 24);
                      uint64_t v331 = v219 - v302;
                      if (!__OFSUB__(v219, v302)) {
                        goto LABEL_304;
                      }
                      __break(1u);
LABEL_273:
                      if (v219 != 2)
                      {
                        uint64_t v332 = BYTE6(v95);
                        goto LABEL_302;
                      }
                      uint64_t v303 = *(void *)(v61 + 16);
                      unint64_t v285 = *(void *)(v61 + 24);
                      uint64_t v332 = v285 - v303;
                      if (!__OFSUB__(v285, v303))
                      {
LABEL_302:
                        sub_10013019C();
                        uint64_t v317 = swift_allocError();
                        *(void *)uint64_t v320 = 28;
                        *(void *)(v320 + 8) = v332;
                        *(unsigned char *)(v320 + 16) = 0;
                        swift_willThrow();
                        uint64_t v319 = v61;
                        unint64_t v321 = v95;
                        goto LABEL_308;
                      }
                      __break(1u);
LABEL_277:
                      if (v285 != 2)
                      {
                        unint64_t v156 = BYTE6(v145);
LABEL_307:
                        sub_10013019C();
                        uint64_t v317 = swift_allocError();
                        *(void *)uint64_t v323 = 28;
                        *(void *)(v323 + 8) = v156;
                        *(unsigned char *)(v323 + 16) = 0;
                        swift_willThrow();
                        uint64_t v319 = v95;
                        unint64_t v321 = v145;
                        goto LABEL_308;
                      }
                      uint64_t v305 = *(void *)(v95 + 16);
                      uint64_t v304 = *(void *)(v95 + 24);
                      unint64_t v156 = v304 - v305;
                      if (!__OFSUB__(v304, v305)) {
                        goto LABEL_307;
                      }
                      __break(1u);
LABEL_281:
                      sub_10001CFB8(v154, v156);
                      uint64_t v306 = v95;
LABEL_284:
                      sub_100037A24(v306, v150);
                    }
                    else
                    {
                      uint64_t v327 = BYTE6(v357);
LABEL_292:
                      sub_10013019C();
                      unint64_t v61 = swift_allocError();
                      *(void *)uint64_t v312 = 32;
                      *(void *)(v312 + 8) = v327;
                      *(unsigned char *)(v312 + 16) = 0;
                      swift_willThrow();
                      sub_10001CFB8((uint64_t)v362, (unint64_t)v357);
                      uint64_t v308 = (uint64_t)v149;
                      unint64_t v309 = v95;
LABEL_293:
                      sub_10001CFB8(v308, v309);
                    }
                    v373 = 0;
                    unint64_t v374 = 0xE000000000000000;
                    _StringGuts.grow(_:)(35);
                    v313._object = (void *)0x80000001013FB8E0;
                    v313._uint64_t countAndFlagsBits = 0xD000000000000021;
                    String.append(_:)(v313);
                    uint64_t v371 = v61;
                    goto LABEL_298;
                  }
                  sub_10001CFB8(v154, v156);
                  sub_100037A24(v95, v150);
                  uint64_t v165 = (void (*)(uint64_t, uint64_t, uint64_t, unint64_t))*v357;
                  v375 = &type metadata for PrimaryIndex;
                  unint64_t v376 = sub_1001A1640();
                  v373 = v165;
                  unint64_t v150 = v149[2];
                  unint64_t v156 = v149[3];
                  sub_1000361E0(v150, v156);
                  long long v52 = v153;
                  uint64_t v166 = sub_100A948F8(v150, v156);
                  uint64_t v167 = sub_100A90C58(v166, 0);
                  unint64_t v366 = 0;
                  uint64_t v143 = v356;
                  unint64_t v154 = v167;
                  unint64_t v61 = v168;
                  CCECCryptorRelease();
                  sub_10001CFB8(v150, v156);
                  unint64_t v169 = v61 >> 62;
                  unint64_t v95 = v365;
                  switch(v61 >> 62)
                  {
                    case 1uLL:
                      LODWORD(v170) = HIDWORD(v154) - v154;
                      if (__OFSUB__(HIDWORD(v154), v154)) {
                        goto LABEL_207;
                      }
                      uint64_t v170 = (int)v170;
LABEL_68:
                      if (v170 != 28) {
                        goto LABEL_233;
                      }
                      sub_100435A9C(6, v154, v61, &v371);
                      uint64_t v173 = v371;
                      unint64_t v174 = v372;
                      sub_10001D010((uint64_t)&v373, (uint64_t)v353);
                      uint64_t v146 = v357;
                      char v175 = v347;
                      (*v352)((char *)v347 + *(int *)(v95 + 28), (uint64_t)v357 + *(int *)(v369 + 20), v364);
                      *char v175 = v173;
                      v175[1] = v174;
                      uint64_t v176 = v355;
                      v175[2] = (uint64_t)v361;
                      v175[3] = (uint64_t)v176;
                      sub_100B310AC((uint64_t)v146, (uint64_t (*)(void))type metadata accessor for TimeBasedKey);
                      _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)&v373);
                      uint64_t v177 = v343;
                      sub_100B30DB4((uint64_t)v175, v343, (uint64_t (*)(void))_s18ConnectionKeyGroupVMa);
                      uint64_t v178 = v177;
                      uint64_t v152 = v363;
                      sub_100B30DB4(v178, v363, (uint64_t (*)(void))_s18ConnectionKeyGroupVMa);
                      uint64_t v151 = 0;
                      break;
                    case 2uLL:
                      uint64_t v172 = *(void *)(v154 + 16);
                      uint64_t v171 = *(void *)(v154 + 24);
                      BOOL v164 = __OFSUB__(v171, v172);
                      uint64_t v170 = v171 - v172;
                      if (!v164) {
                        goto LABEL_68;
                      }
                      goto LABEL_203;
                    case 3uLL:
                      uint64_t v330 = 0;
                      goto LABEL_300;
                    default:
                      uint64_t v170 = BYTE6(v61);
                      goto LABEL_68;
                  }
                  break;
                case 2uLL:
                  uint64_t v163 = v361[2];
                  uint64_t v162 = v361[3];
                  BOOL v164 = __OFSUB__(v162, v163);
                  uint64_t v161 = v162 - v163;
                  if (!v164) {
                    goto LABEL_60;
                  }
                  goto LABEL_195;
                case 3uLL:
                  unint64_t v326 = 0;
                  goto LABEL_287;
                default:
                  uint64_t v161 = BYTE6(v159);
                  goto LABEL_60;
              }
            }
            (*v358)(v152, v151, 1, v95);
            sub_100B310AC((uint64_t)v362, (uint64_t (*)(void))type metadata accessor for TimeBasedKey);
            unint64_t v123 = (void *)v377;
            if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
            {
              sub_1000B7C44(0, v123[2] + 1, 1);
              unint64_t v123 = (void *)v377;
            }
            unint64_t v180 = v123[2];
            unint64_t v179 = v123[3];
            if (v180 >= v179 >> 1)
            {
              sub_1000B7C44(v179 > 1, v180 + 1, 1);
              unint64_t v123 = (void *)v377;
            }
            v123[2] = v180 + 1;
            sub_10001D608((uint64_t)v52, (uint64_t)v123+ ((*(unsigned __int8 *)(v367 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v367 + 80))+ *(void *)(v367 + 72) * v180, &qword_10163A958);
            v145 += v359;
            uint64_t v143 = (void *)((char *)v143 - 1);
          }
          while (v143);
          uint64_t v93 = (uint64_t)v348;
          uint64_t v94 = v350;
LABEL_119:
          (*(void (**)(char *, uint64_t))(v354 + 8))(v341, v364);
          uint64_t v233 = v93;
          uint64_t v234 = v94;
LABEL_121:
          sub_1002F6A08(v233, v234, 1u);
          break;
        case 2:
          int64_t v124 = *(void *)(v91 + 16);
          unint64_t v123 = _swiftEmptyArrayStorage;
          if (v124)
          {
            uint64_t v350 = v92;
            v373 = (void (*)(uint64_t, uint64_t, uint64_t, unint64_t))_swiftEmptyArrayStorage;
            sub_1000B7C44(0, v124, 0);
            unint64_t v125 = (*(unsigned __int8 *)(v340 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v340 + 80);
            v348 = (uint64_t *)v93;
            uint64_t v126 = v93 + v125;
            uint64_t v363 = *(void *)(v340 + 72);
            unint64_t v127 = (void (**)(char *, uint64_t, uint64_t, uint64_t))(v339 + 56);
            uint64_t v128 = (void (**)(uint64_t, void, uint64_t, uint64_t))(v340 + 56);
            do
            {
              sub_100B30D0C(v126, (uint64_t)v14, (uint64_t (*)(void))_s18ConnectionKeyGroupVMa);
              uint64_t v129 = (uint64_t)&v48[*(int *)(v368 + 48)];
              (*v127)(v48, 1, 1, v369);
              sub_100B30D0C((uint64_t)v14, v129, (uint64_t (*)(void))_s18ConnectionKeyGroupVMa);
              (*v128)(v129, 0, 1, v365);
              sub_100B310AC((uint64_t)v14, (uint64_t (*)(void))_s18ConnectionKeyGroupVMa);
              unint64_t v123 = v373;
              if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
              {
                sub_1000B7C44(0, v123[2] + 1, 1);
                unint64_t v123 = v373;
              }
              unint64_t v131 = v123[2];
              unint64_t v130 = v123[3];
              if (v131 >= v130 >> 1)
              {
                sub_1000B7C44(v130 > 1, v131 + 1, 1);
                unint64_t v123 = v373;
              }
              v123[2] = v131 + 1;
              sub_10001D608((uint64_t)v48, (uint64_t)v123+ ((*(unsigned __int8 *)(v367 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v367 + 80))+ *(void *)(v367 + 72) * v131, &qword_10163A958);
              v126 += v363;
              --v124;
            }
            while (v124);
            uint64_t v93 = (uint64_t)v348;
            uint64_t v94 = v350;
          }
          (*(void (**)(char *, uint64_t))(v354 + 8))(v341, v364);
          uint64_t v231 = v93;
          uint64_t v232 = v94;
          goto LABEL_118;
        case 3:
          if (qword_101636F50 == -1) {
            goto LABEL_46;
          }
          goto LABEL_216;
        default:
          uint64_t v350 = v92;
          uint64_t v97 = qword_101636F50;
          swift_bridgeObjectRetain();
          if (v97 != -1) {
            swift_once();
          }
          uint64_t v98 = type metadata accessor for Logger();
          sub_100010324(v98, (uint64_t)qword_10170E9E8);
          sub_10001D010(v61, (uint64_t)&v373);
          unint64_t v99 = Logger.logObject.getter();
          os_log_type_t v100 = static os_log_type_t.default.getter();
          BOOL v101 = os_log_type_enabled(v99, v100);
          v348 = (uint64_t *)v93;
          if (v101)
          {
            uint64_t v102 = swift_slowAlloc();
            uint64_t v371 = swift_slowAlloc();
            *(_DWORD *)uint64_t v102 = 141558275;
            uint64_t v377 = 1752392040;
            UnsafeMutableRawBufferPointer.copyMemory(from:)();
            *(_WORD *)(v102 + 12) = 2081;
            uint64_t v363 = v102 + 14;
            uint64_t v104 = v375;
            unint64_t v103 = v376;
            sub_10001CD44(&v373, (uint64_t)v375);
            uint64_t v105 = v336;
            (*(void (**)(ValueMetadata *))(*(void *)(*(void *)(v103 + 8) + 8) + 32))(v104);
            sub_100B22DA4((unint64_t *)&qword_101638B10, (void (*)(uint64_t))&type metadata accessor for UUID);
            uint64_t v106 = v338;
            uint64_t v107 = dispatch thunk of CustomStringConvertible.description.getter();
            unint64_t v109 = v108;
            (*(void (**)(char *, uint64_t))(v337 + 8))(v105, v106);
            uint64_t v377 = sub_1008FA0F0(v107, v109, &v371);
            UnsafeMutableRawBufferPointer.copyMemory(from:)();
            unint64_t v95 = v365;
            swift_bridgeObjectRelease();
            _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)&v373);
            swift_arrayDestroy();
            uint64_t v93 = (uint64_t)v348;
            swift_slowDealloc();
            swift_slowDealloc();
          }
          else
          {
            _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)&v373);
          }

          uint64_t v235 = v359;
          uint64_t v236 = v351;
          int64_t v149 = v353;
          int64_t v237 = *(void *)(v93 + 16);
          if (v237)
          {
            uint64_t v377 = (uint64_t)_swiftEmptyArrayStorage;
            sub_1000B7C44(0, v237, 0);
            uint64_t v238 = v93 + ((*(unsigned __int8 *)(v339 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v339 + 80));
            uint64_t v360 = *(void *)(v339 + 72);
            v361 = (uint64_t *)(v339 + 56);
            v356 = v349 + 4;
            v355 = (void (**)(uint64_t, void, uint64_t))(v354 + 16);
            v358 = (void (**)(uint64_t, uint64_t, uint64_t, unint64_t))(v340 + 56);
            do
            {
              sub_100B30D0C(v238, v236, (uint64_t (*)(void))type metadata accessor for TimeBasedKey);
              uint64_t v363 = (uint64_t)v149 + *(int *)(v368 + 48);
              sub_100B30D0C(v236, (uint64_t)v149, (uint64_t (*)(void))type metadata accessor for TimeBasedKey);
              uint64_t v239 = v369;
              ((void (*)(uint64_t *, void, uint64_t, uint64_t))*v361)(v149, 0, 1, v369);
              sub_100B30D0C(v236, v235, (uint64_t (*)(void))type metadata accessor for TimeBasedKey);
              unint64_t v145 = v235 + *(int *)(v239 + 24);
              unint64_t v150 = *(void *)(v145 + 8);
              if (v150 >> 60 == 15)
              {
                sub_100B310AC(v235, (uint64_t (*)(void))type metadata accessor for TimeBasedKey);
                uint64_t v240 = 1;
                uint64_t v241 = v363;
              }
              else
              {
                unint64_t v156 = *(void *)v145;
                sub_1000361E0(*(void *)v145, *(void *)(v145 + 8));
                int64_t v149 = (uint64_t *)String.utf8Data.getter();
                unint64_t v95 = v242;
                sub_1000361E0(v156, v150);
                unint64_t v243 = v366;
                v362 = (char *)sub_100A941DC(v156, v150, (uint64_t)v149, v95, 32);
                unint64_t v61 = v243;
                if (v243)
                {
                  sub_10001CFB8((uint64_t)v149, v95);
                  uint64_t v306 = v156;
                  goto LABEL_284;
                }
                unint64_t v154 = v244;
                sub_100037A24(v156, v150);
                unint64_t v245 = v154 >> 62;
                v357 = (void *)v154;
                switch(v154 >> 62)
                {
                  case 1uLL:
                    LODWORD(v246) = HIDWORD(v362) - v362;
                    if (__OFSUB__(HIDWORD(v362), v362)) {
                      goto LABEL_200;
                    }
                    uint64_t v246 = (int)v246;
LABEL_137:
                    if (v246 != 32) {
                      goto LABEL_221;
                    }
                    sub_10001CFB8((uint64_t)v149, v95);
                    sub_100037A24(v156, v150);
                    unint64_t v249 = *(void (**)(uint64_t, uint64_t, uint64_t, unint64_t))v359;
                    v375 = &type metadata for PrimaryIndex;
                    unint64_t v376 = sub_1001A1640();
                    v373 = v249;
                    unint64_t v150 = *(void *)(v145 + 16);
                    unint64_t v250 = *(void *)(v145 + 24);
                    sub_1000361E0(v150, v250);
                    unint64_t v156 = sub_100A948F8(v150, v250);
                    uint64_t v251 = sub_100A90C58(v156, 0);
                    unint64_t v366 = 0;
                    unint64_t v95 = v251;
                    unint64_t v61 = v252;
                    CCECCryptorRelease();
                    sub_10001CFB8(v150, v250);
                    unint64_t v253 = v61 >> 62;
                    int64_t v149 = v353;
                    switch(v61 >> 62)
                    {
                      case 1uLL:
                        LODWORD(v254) = HIDWORD(v95) - v95;
                        if (__OFSUB__(HIDWORD(v95), v95)) {
                          goto LABEL_208;
                        }
                        uint64_t v254 = (int)v254;
LABEL_145:
                        if (v254 != 28) {
                          goto LABEL_237;
                        }
                        sub_100435A9C(6, v95, v61, &v371);
                        uint64_t v257 = v371;
                        unint64_t v258 = v372;
                        sub_10001D010((uint64_t)&v373, (uint64_t)v356);
                        uint64_t v235 = v359;
                        unint64_t v95 = v365;
                        uint64_t v259 = v349;
                        (*v355)((uint64_t)v349 + *(int *)(v365 + 28), v359 + *(int *)(v369 + 20), v364);
                        uint64_t *v259 = v257;
                        v259[1] = v258;
                        uint64_t v260 = v357;
                        v259[2] = (uint64_t)v362;
                        v259[3] = (uint64_t)v260;
                        sub_100B310AC(v235, (uint64_t (*)(void))type metadata accessor for TimeBasedKey);
                        _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)&v373);
                        uint64_t v261 = v345;
                        sub_100B30DB4((uint64_t)v259, v345, (uint64_t (*)(void))_s18ConnectionKeyGroupVMa);
                        uint64_t v262 = v261;
                        uint64_t v241 = v363;
                        sub_100B30DB4(v262, v363, (uint64_t (*)(void))_s18ConnectionKeyGroupVMa);
                        uint64_t v240 = 0;
                        uint64_t v236 = v351;
                        break;
                      case 2uLL:
                        uint64_t v256 = *(void *)(v95 + 16);
                        uint64_t v255 = *(void *)(v95 + 24);
                        BOOL v164 = __OFSUB__(v255, v256);
                        uint64_t v254 = v255 - v256;
                        if (!v164) {
                          goto LABEL_145;
                        }
                        goto LABEL_204;
                      case 3uLL:
                        uint64_t v331 = 0;
                        goto LABEL_304;
                      default:
                        uint64_t v254 = BYTE6(v61);
                        goto LABEL_145;
                    }
                    break;
                  case 2uLL:
                    uint64_t v248 = *((void *)v362 + 2);
                    uint64_t v247 = *((void *)v362 + 3);
                    BOOL v164 = __OFSUB__(v247, v248);
                    uint64_t v246 = v247 - v248;
                    if (!v164) {
                      goto LABEL_137;
                    }
                    goto LABEL_196;
                  case 3uLL:
                    uint64_t v327 = 0;
                    goto LABEL_292;
                  default:
                    uint64_t v246 = BYTE6(v154);
                    goto LABEL_137;
                }
              }
              (*v358)(v241, v240, 1, v95);
              sub_100B310AC(v236, (uint64_t (*)(void))type metadata accessor for TimeBasedKey);
              unint64_t v123 = (void *)v377;
              if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
              {
                sub_1000B7C44(0, v123[2] + 1, 1);
                unint64_t v123 = (void *)v377;
              }
              unint64_t v264 = v123[2];
              unint64_t v263 = v123[3];
              if (v264 >= v263 >> 1)
              {
                sub_1000B7C44(v263 > 1, v264 + 1, 1);
                unint64_t v123 = (void *)v377;
              }
              v123[2] = v264 + 1;
              sub_10001D608((uint64_t)v149, (uint64_t)v123+ ((*(unsigned __int8 *)(v367 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v367 + 80))+ *(void *)(v367 + 72) * v264, &qword_10163A958);
              v238 += v360;
              --v237;
            }
            while (v237);
            sub_1002F6A08((uint64_t)v348, v350, 0);
          }
          else
          {
            sub_1002F6A08(v93, v350, 0);
            unint64_t v123 = _swiftEmptyArrayStorage;
          }
          (*(void (**)(char *, uint64_t))(v354 + 8))(v341, v364);
LABEL_189:
          swift_bridgeObjectRelease();
          break;
      }
      return v123;
    default:
      uint64_t v63 = (uint64_t)v342;
      (*(void (**)(char *, unint64_t, uint64_t))(v354 + 32))(v342, v61, v364);
      uint64_t v64 = v356;
      uint64_t v65 = v356[3];
      uint64_t v66 = v356[4];
      uint64_t v67 = sub_10001CD44(v356, v65);
      uint64_t v68 = sub_100B2F5F4((uint64_t)v67, v63, 0, 0, 0, (uint64_t)v355, v65, v66);
      uint64_t v70 = v68;
      uint64_t v71 = v69;
      uint64_t v72 = v365;
      switch(v73)
      {
        case 1:
          uint64_t v351 = v69;
          uint64_t v200 = *(void **)(v68 + 16);
          unint64_t v123 = _swiftEmptyArrayStorage;
          if (!v200) {
            goto LABEL_120;
          }
          uint64_t v377 = (uint64_t)_swiftEmptyArrayStorage;
          sub_1000B7C44(0, (int64_t)v200, 0);
          unint64_t v201 = (*(unsigned __int8 *)(v339 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v339 + 80);
          uint64_t v349 = (uint64_t *)v70;
          unint64_t v150 = v70 + v201;
          uint64_t v359 = *(void *)(v339 + 72);
          uint64_t v360 = v339 + 56;
          uint64_t v353 = v348 + 4;
          uint64_t v352 = (void (**)(char *, uint64_t, uint64_t))(v354 + 16);
          v357 = (void *)(v340 + 56);
          unint64_t v154 = (unint64_t)v358;
          do
          {
            uint64_t v202 = v363;
            sub_100B30D0C(v150, v363, (uint64_t (*)(void))type metadata accessor for TimeBasedKey);
            v362 = &v45[*(int *)(v368 + 48)];
            sub_100B30D0C(v202, (uint64_t)v45, (uint64_t (*)(void))type metadata accessor for TimeBasedKey);
            uint64_t v203 = v369;
            (*(void (**)(char *, void, uint64_t, uint64_t))v360)(v45, 0, 1, v369);
            sub_100B30D0C(v202, v154, (uint64_t (*)(void))type metadata accessor for TimeBasedKey);
            int64_t v149 = (uint64_t *)(v154 + *(int *)(v203 + 24));
            unint64_t v156 = v149[1];
            if (v156 >> 60 == 15)
            {
              sub_100B310AC(v154, (uint64_t (*)(void))type metadata accessor for TimeBasedKey);
              uint64_t v204 = 1;
              uint64_t v205 = (uint64_t)v362;
            }
            else
            {
              v356 = v200;
              os_log_type_t v206 = v45;
              unint64_t v154 = *v149;
              sub_1000361E0(*v149, v156);
              unint64_t v61 = String.utf8Data.getter();
              unint64_t v145 = v207;
              sub_1000361E0(v154, v156);
              unint64_t v208 = v366;
              v361 = (uint64_t *)sub_100A941DC(v154, v156, v61, v145, 32);
              unint64_t v95 = v208;
              if (v208)
              {
                sub_10001CFB8(v61, v145);
                sub_100037A24(v154, v156);
                goto LABEL_290;
              }
              unint64_t v210 = (unint64_t)v209;
              sub_100037A24(v154, v156);
              unint64_t v211 = v210 >> 62;
              v355 = (void (**)(uint64_t, void, uint64_t))v210;
              switch(v210 >> 62)
              {
                case 1uLL:
                  LODWORD(v212) = HIDWORD(v361) - v361;
                  if (__OFSUB__(HIDWORD(v361), v361)) {
                    goto LABEL_201;
                  }
                  uint64_t v212 = (int)v212;
LABEL_100:
                  if (v212 != 32) {
                    goto LABEL_225;
                  }
                  sub_10001CFB8(v61, v145);
                  sub_100037A24(v154, v156);
                  unint64_t v215 = *v358;
                  v375 = &type metadata for PrimaryIndex;
                  unint64_t v376 = sub_1001A1640();
                  v373 = v215;
                  unint64_t v156 = v149[2];
                  unint64_t v145 = v149[3];
                  sub_1000361E0(v156, v145);
                  unint64_t v45 = v206;
                  uint64_t v216 = sub_100A948F8(v156, v145);
                  uint64_t v217 = sub_100A90C58(v216, 0);
                  unint64_t v366 = 0;
                  uint64_t v200 = v356;
                  unint64_t v61 = v217;
                  unint64_t v95 = v218;
                  CCECCryptorRelease();
                  sub_10001CFB8(v156, v145);
                  unint64_t v219 = v95 >> 62;
                  unint64_t v154 = (unint64_t)v358;
                  switch(v95 >> 62)
                  {
                    case 1uLL:
                      LODWORD(v220) = HIDWORD(v61) - v61;
                      if (__OFSUB__(HIDWORD(v61), v61)) {
                        goto LABEL_209;
                      }
                      uint64_t v220 = (int)v220;
LABEL_108:
                      if (v220 != 28) {
                        goto LABEL_241;
                      }
                      sub_100435A9C(6, v61, v95, &v371);
                      uint64_t v223 = v371;
                      unint64_t v224 = v372;
                      sub_10001D010((uint64_t)&v373, (uint64_t)v353);
                      uint64_t v72 = v365;
                      long long v225 = v348;
                      (*v352)((char *)v348 + *(int *)(v365 + 28), v154 + *(int *)(v369 + 20), v364);
                      *long long v225 = v223;
                      v225[1] = v224;
                      uint64_t v226 = v355;
                      v225[2] = (uint64_t)v361;
                      v225[3] = (uint64_t)v226;
                      sub_100B310AC(v154, (uint64_t (*)(void))type metadata accessor for TimeBasedKey);
                      _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)&v373);
                      uint64_t v227 = v344;
                      sub_100B30DB4((uint64_t)v225, v344, (uint64_t (*)(void))_s18ConnectionKeyGroupVMa);
                      uint64_t v228 = v227;
                      uint64_t v205 = (uint64_t)v362;
                      sub_100B30DB4(v228, (uint64_t)v362, (uint64_t (*)(void))_s18ConnectionKeyGroupVMa);
                      uint64_t v204 = 0;
                      break;
                    case 2uLL:
                      uint64_t v222 = *(void *)(v61 + 16);
                      uint64_t v221 = *(void *)(v61 + 24);
                      BOOL v164 = __OFSUB__(v221, v222);
                      uint64_t v220 = v221 - v222;
                      if (!v164) {
                        goto LABEL_108;
                      }
                      goto LABEL_205;
                    case 3uLL:
                      uint64_t v332 = 0;
                      goto LABEL_302;
                    default:
                      uint64_t v220 = BYTE6(v95);
                      goto LABEL_108;
                  }
                  break;
                case 2uLL:
                  uint64_t v214 = v361[2];
                  uint64_t v213 = v361[3];
                  BOOL v164 = __OFSUB__(v213, v214);
                  uint64_t v212 = v213 - v214;
                  if (!v164) {
                    goto LABEL_100;
                  }
                  goto LABEL_197;
                case 3uLL:
                  unint64_t v328 = 0;
                  goto LABEL_289;
                default:
                  uint64_t v212 = BYTE6(v210);
                  goto LABEL_100;
              }
            }
            ((void (*)(uint64_t, uint64_t, uint64_t, uint64_t))*v357)(v205, v204, 1, v72);
            sub_100B310AC(v363, (uint64_t (*)(void))type metadata accessor for TimeBasedKey);
            unint64_t v123 = (void *)v377;
            if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
            {
              sub_1000B7C44(0, v123[2] + 1, 1);
              unint64_t v123 = (void *)v377;
            }
            unint64_t v230 = v123[2];
            unint64_t v229 = v123[3];
            if (v230 >= v229 >> 1)
            {
              sub_1000B7C44(v229 > 1, v230 + 1, 1);
              unint64_t v123 = (void *)v377;
            }
            v123[2] = v230 + 1;
            sub_10001D608((uint64_t)v45, (uint64_t)v123+ ((*(unsigned __int8 *)(v367 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v367 + 80))+ *(void *)(v367 + 72) * v230, &qword_10163A958);
            v150 += v359;
            uint64_t v200 = (void *)((char *)v200 - 1);
          }
          while (v200);
          uint64_t v70 = (uint64_t)v349;
LABEL_120:
          (*(void (**)(char *, uint64_t))(v354 + 8))(v342, v364);
          uint64_t v233 = v70;
          uint64_t v234 = v351;
          goto LABEL_121;
        case 2:
          int64_t v181 = *(void *)(v68 + 16);
          unint64_t v123 = _swiftEmptyArrayStorage;
          if (v181)
          {
            uint64_t v351 = v69;
            v373 = (void (*)(uint64_t, uint64_t, uint64_t, unint64_t))_swiftEmptyArrayStorage;
            sub_1000B7C44(0, v181, 0);
            unint64_t v182 = (*(unsigned __int8 *)(v340 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v340 + 80);
            uint64_t v349 = (uint64_t *)v70;
            uint64_t v183 = v70 + v182;
            uint64_t v363 = *(void *)(v340 + 72);
            uint64_t v184 = (void (**)(char *, uint64_t, uint64_t, uint64_t))(v339 + 56);
            char v185 = (void (**)(uint64_t, void, uint64_t, uint64_t))(v340 + 56);
            do
            {
              sub_100B30D0C(v183, (uint64_t)v14, (uint64_t (*)(void))_s18ConnectionKeyGroupVMa);
              uint64_t v186 = (uint64_t)&v40[*(int *)(v368 + 48)];
              (*v184)(v40, 1, 1, v369);
              sub_100B30D0C((uint64_t)v14, v186, (uint64_t (*)(void))_s18ConnectionKeyGroupVMa);
              (*v185)(v186, 0, 1, v72);
              sub_100B310AC((uint64_t)v14, (uint64_t (*)(void))_s18ConnectionKeyGroupVMa);
              unint64_t v123 = v373;
              if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
              {
                sub_1000B7C44(0, v123[2] + 1, 1);
                unint64_t v123 = v373;
              }
              unint64_t v188 = v123[2];
              unint64_t v187 = v123[3];
              if (v188 >= v187 >> 1)
              {
                sub_1000B7C44(v187 > 1, v188 + 1, 1);
                unint64_t v123 = v373;
              }
              v123[2] = v188 + 1;
              sub_10001D608((uint64_t)v40, (uint64_t)v123+ ((*(unsigned __int8 *)(v367 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v367 + 80))+ *(void *)(v367 + 72) * v188, &qword_10163A958);
              v183 += v363;
              --v181;
              uint64_t v72 = v365;
            }
            while (v181);
            uint64_t v70 = (uint64_t)v349;
            uint64_t v71 = v351;
          }
          (*(void (**)(char *, uint64_t))(v354 + 8))(v342, v364);
          uint64_t v231 = v70;
          uint64_t v232 = v71;
LABEL_118:
          sub_1002F6A08(v231, v232, 2u);
          return v123;
        case 3:
          if (qword_101636F50 != -1) {
            swift_once();
          }
          uint64_t v189 = type metadata accessor for Logger();
          sub_100010324(v189, (uint64_t)qword_10170E9E8);
          sub_10001D010((uint64_t)v64, (uint64_t)&v373);
          uint64_t v190 = Logger.logObject.getter();
          os_log_type_t v191 = static os_log_type_t.default.getter();
          if (os_log_type_enabled(v190, v191))
          {
            uint64_t v192 = swift_slowAlloc();
            uint64_t v371 = swift_slowAlloc();
            *(_DWORD *)uint64_t v192 = 141558275;
            uint64_t v377 = 1752392040;
            UnsafeMutableRawBufferPointer.copyMemory(from:)();
            *(_WORD *)(v192 + 12) = 2081;
            uint64_t v369 = v192 + 14;
            uint64_t v194 = v375;
            unint64_t v193 = v376;
            sub_10001CD44(&v373, (uint64_t)v375);
            uint64_t v195 = v336;
            (*(void (**)(ValueMetadata *))(*(void *)(*(void *)(v193 + 8) + 8) + 32))(v194);
            sub_100B22DA4((unint64_t *)&qword_101638B10, (void (*)(uint64_t))&type metadata accessor for UUID);
            uint64_t v196 = v338;
            uint64_t v197 = dispatch thunk of CustomStringConvertible.description.getter();
            unint64_t v199 = v198;
            (*(void (**)(char *, uint64_t))(v337 + 8))(v195, v196);
            uint64_t v377 = sub_1008FA0F0(v197, v199, &v371);
            UnsafeMutableRawBufferPointer.copyMemory(from:)();
            swift_bridgeObjectRelease();
            _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)&v373);
            swift_arrayDestroy();
            swift_slowDealloc();
            swift_slowDealloc();
          }
          else
          {
            _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)&v373);
          }

          (*(void (**)(char *, uint64_t))(v354 + 8))(v342, v364);
          return _swiftEmptyArrayStorage;
        default:
          uint64_t v74 = qword_101636F50;
          uint64_t v349 = (uint64_t *)v68;
          swift_bridgeObjectRetain();
          if (v74 != -1) {
            swift_once();
          }
          uint64_t v75 = type metadata accessor for Logger();
          sub_100010324(v75, (uint64_t)qword_10170E9E8);
          sub_10001D010((uint64_t)v64, (uint64_t)&v373);
          uint64_t v76 = Logger.logObject.getter();
          os_log_type_t v77 = static os_log_type_t.default.getter();
          BOOL v78 = os_log_type_enabled(v76, v77);
          uint64_t v351 = v71;
          if (v78)
          {
            uint64_t v79 = swift_slowAlloc();
            uint64_t v371 = swift_slowAlloc();
            *(_DWORD *)uint64_t v79 = 141558275;
            uint64_t v377 = 1752392040;
            UnsafeMutableRawBufferPointer.copyMemory(from:)();
            *(_WORD *)(v79 + 12) = 2081;
            uint64_t v363 = v79 + 14;
            uint64_t v81 = v375;
            unint64_t v80 = v376;
            sub_10001CD44(&v373, (uint64_t)v375);
            uint64_t v82 = v336;
            (*(void (**)(ValueMetadata *))(*(void *)(*(void *)(v80 + 8) + 8) + 32))(v81);
            sub_100B22DA4((unint64_t *)&qword_101638B10, (void (*)(uint64_t))&type metadata accessor for UUID);
            uint64_t v83 = v338;
            uint64_t v84 = dispatch thunk of CustomStringConvertible.description.getter();
            unint64_t v86 = v85;
            (*(void (**)(char *, uint64_t))(v337 + 8))(v82, v83);
            uint64_t v377 = sub_1008FA0F0(v84, v86, &v371);
            UnsafeMutableRawBufferPointer.copyMemory(from:)();
            uint64_t v72 = v365;
            swift_bridgeObjectRelease();
            _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)&v373);
            swift_arrayDestroy();
            swift_slowDealloc();
            swift_slowDealloc();
          }
          else
          {
            _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)&v373);
          }

          uint64_t v265 = v360;
          int64_t v149 = v361;
          uint64_t v266 = (uint64_t)v352;
          uint64_t v267 = (uint64_t)v349;
          int64_t v268 = v349[2];
          if (v268)
          {
            uint64_t v377 = (uint64_t)_swiftEmptyArrayStorage;
            sub_1000B7C44(0, v268, 0);
            uint64_t v269 = v267
                 + ((*(unsigned __int8 *)(v339 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v339 + 80));
            uint64_t v359 = *(void *)(v339 + 72);
            v362 = (char *)(v339 + 56);
            v355 = (void (**)(uint64_t, void, uint64_t))(v350 + 32);
            uint64_t v353 = (uint64_t *)(v354 + 16);
            v358 = (void (**)(uint64_t, uint64_t, uint64_t, unint64_t))(v340 + 56);
            do
            {
              sub_100B30D0C(v269, v266, (uint64_t (*)(void))type metadata accessor for TimeBasedKey);
              uint64_t v270 = (void *)(v265 + *(int *)(v368 + 48));
              sub_100B30D0C(v266, v265, (uint64_t (*)(void))type metadata accessor for TimeBasedKey);
              uint64_t v271 = v265;
              uint64_t v272 = v369;
              (*(void (**)(uint64_t, void, uint64_t, uint64_t))v362)(v271, 0, 1, v369);
              sub_100B30D0C(v266, (uint64_t)v149, (uint64_t (*)(void))type metadata accessor for TimeBasedKey);
              unint64_t v61 = (unint64_t)v149 + *(int *)(v272 + 24);
              unint64_t v150 = *(void *)(v61 + 8);
              if (v150 >> 60 == 15)
              {
                sub_100B310AC((uint64_t)v149, (uint64_t (*)(void))type metadata accessor for TimeBasedKey);
                uint64_t v273 = 1;
              }
              else
              {
                v357 = v270;
                unint64_t v156 = *(void *)v61;
                sub_1000361E0(*(void *)v61, v150);
                int64_t v149 = (uint64_t *)String.utf8Data.getter();
                unint64_t v95 = v274;
                sub_1000361E0(v156, v150);
                unint64_t v275 = v366;
                uint64_t v363 = sub_100A941DC(v156, v150, (uint64_t)v149, v95, 32);
                unint64_t v145 = v275;
                if (v275)
                {
                  sub_10001CFB8((uint64_t)v149, v95);
                  sub_100037A24(v156, v150);
LABEL_297:
                  v373 = 0;
                  unint64_t v374 = 0xE000000000000000;
                  _StringGuts.grow(_:)(35);
                  v315._object = (void *)0x80000001013FB8E0;
                  v315._uint64_t countAndFlagsBits = 0xD000000000000021;
                  String.append(_:)(v315);
                  uint64_t v371 = v145;
                  goto LABEL_298;
                }
                unint64_t v154 = v276;
                sub_100037A24(v156, v150);
                unint64_t v277 = v154 >> 62;
                v356 = (void *)v154;
                switch(v154 >> 62)
                {
                  case 1uLL:
                    LODWORD(v278) = HIDWORD(v363) - v363;
                    if (__OFSUB__(HIDWORD(v363), v363)) {
                      goto LABEL_202;
                    }
                    uint64_t v278 = (int)v278;
LABEL_169:
                    if (v278 != 32) {
                      goto LABEL_229;
                    }
                    sub_10001CFB8((uint64_t)v149, v95);
                    sub_100037A24(v156, v150);
                    uint64_t v281 = (void (*)(uint64_t, uint64_t, uint64_t, unint64_t))*v361;
                    v375 = &type metadata for PrimaryIndex;
                    unint64_t v376 = sub_1001A1640();
                    v373 = v281;
                    unint64_t v150 = *(void *)(v61 + 16);
                    unint64_t v282 = *(void *)(v61 + 24);
                    sub_1000361E0(v150, v282);
                    unint64_t v156 = sub_100A948F8(v150, v282);
                    uint64_t v283 = sub_100A90C58(v156, 0);
                    unint64_t v366 = 0;
                    unint64_t v95 = v283;
                    unint64_t v145 = v284;
                    CCECCryptorRelease();
                    sub_10001CFB8(v150, v282);
                    unint64_t v285 = v145 >> 62;
                    int64_t v149 = v361;
                    switch(v145 >> 62)
                    {
                      case 1uLL:
                        LODWORD(v286) = HIDWORD(v95) - v95;
                        if (__OFSUB__(HIDWORD(v95), v95)) {
                          goto LABEL_210;
                        }
                        uint64_t v286 = (int)v286;
LABEL_177:
                        if (v286 != 28) {
                          goto LABEL_245;
                        }
                        sub_100435A9C(6, v95, v145, &v371);
                        uint64_t v289 = v371;
                        unint64_t v290 = v372;
                        sub_10001D010((uint64_t)&v373, (uint64_t)v355);
                        uint64_t v72 = v365;
                        int v291 = (uint64_t *)v350;
                        ((void (*)(uint64_t, char *, uint64_t))*v353)(v350 + *(int *)(v365 + 28), (char *)v149 + *(int *)(v369 + 20), v364);
                        *int v291 = v289;
                        v291[1] = v290;
                        uint64_t v292 = v356;
                        v291[2] = v363;
                        v291[3] = (uint64_t)v292;
                        sub_100B310AC((uint64_t)v149, (uint64_t (*)(void))type metadata accessor for TimeBasedKey);
                        _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)&v373);
                        uint64_t v293 = v346;
                        sub_100B30DB4((uint64_t)v291, v346, (uint64_t (*)(void))_s18ConnectionKeyGroupVMa);
                        uint64_t v270 = v357;
                        sub_100B30DB4(v293, (uint64_t)v357, (uint64_t (*)(void))_s18ConnectionKeyGroupVMa);
                        uint64_t v273 = 0;
                        uint64_t v266 = (uint64_t)v352;
                        break;
                      case 2uLL:
                        uint64_t v288 = *(void *)(v95 + 16);
                        uint64_t v287 = *(void *)(v95 + 24);
                        BOOL v164 = __OFSUB__(v287, v288);
                        uint64_t v286 = v287 - v288;
                        if (!v164) {
                          goto LABEL_177;
                        }
                        goto LABEL_206;
                      case 3uLL:
                        unint64_t v156 = 0;
                        goto LABEL_307;
                      default:
                        uint64_t v286 = BYTE6(v145);
                        goto LABEL_177;
                    }
                    break;
                  case 2uLL:
                    uint64_t v280 = *(void *)(v363 + 16);
                    uint64_t v279 = *(void *)(v363 + 24);
                    BOOL v164 = __OFSUB__(v279, v280);
                    uint64_t v278 = v279 - v280;
                    if (!v164) {
                      goto LABEL_169;
                    }
                    goto LABEL_198;
                  case 3uLL:
                    uint64_t v329 = 0;
                    goto LABEL_296;
                  default:
                    uint64_t v278 = BYTE6(v154);
                    goto LABEL_169;
                }
              }
              (*v358)((uint64_t)v270, v273, 1, v72);
              sub_100B310AC(v266, (uint64_t (*)(void))type metadata accessor for TimeBasedKey);
              unint64_t v123 = (void *)v377;
              if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
              {
                sub_1000B7C44(0, v123[2] + 1, 1);
                unint64_t v123 = (void *)v377;
              }
              unint64_t v295 = v123[2];
              unint64_t v294 = v123[3];
              if (v295 >= v294 >> 1)
              {
                sub_1000B7C44(v294 > 1, v295 + 1, 1);
                unint64_t v123 = (void *)v377;
              }
              v123[2] = v295 + 1;
              uint64_t v265 = v360;
              sub_10001D608(v360, (uint64_t)v123+ ((*(unsigned __int8 *)(v367 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v367 + 80))+ *(void *)(v367 + 72) * v295, &qword_10163A958);
              v269 += v359;
              --v268;
            }
            while (v268);
            sub_1002F6A08((uint64_t)v349, v351, 0);
          }
          else
          {
            sub_1002F6A08((uint64_t)v349, v351, 0);
            unint64_t v123 = _swiftEmptyArrayStorage;
          }
          (*(void (**)(char *, uint64_t))(v354 + 8))(v342, v364);
          break;
      }
      goto LABEL_189;
  }
}

uint64_t sub_100B06B60(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v28 = a3;
  uint64_t v31 = a2;
  uint64_t v29 = type metadata accessor for SharedBeaconRecord(0);
  __chkstk_darwin(v29);
  uint64_t v5 = (char *)&v27 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = sub_10000588C(&qword_10164B360);
  __chkstk_darwin(v6 - 8);
  uint64_t v8 = (char *)&v27 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = _s18ConnectionKeyGroupVMa();
  uint64_t v10 = *(void *)(v9 - 8);
  __chkstk_darwin(v9);
  uint64_t v30 = (uint64_t *)((char *)&v27 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v12 = sub_10000588C((uint64_t *)&unk_10163EB40);
  __chkstk_darwin(v12 - 8);
  uint64_t v14 = (char *)&v27 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = type metadata accessor for TimeBasedKey();
  uint64_t v16 = *(void *)(v15 - 8);
  __chkstk_darwin(v15);
  uint64_t v18 = (uint64_t *)((char *)&v27 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0));
  sub_10001D074(a1, (uint64_t)v14, (uint64_t *)&unk_10163EB40);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v16 + 48))(v14, 1, v15) == 1)
  {
    sub_10001DAB4((uint64_t)v14, (uint64_t *)&unk_10163EB40);
    sub_10001D074(v31, (uint64_t)v8, &qword_10164B360);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48))(v8, 1, v9) == 1)
    {
      sub_10001DAB4((uint64_t)v8, &qword_10164B360);
      return 0;
    }
    uint64_t v22 = v30;
    sub_100B30DB4((uint64_t)v8, (uint64_t)v30, (uint64_t (*)(void))_s18ConnectionKeyGroupVMa);
    sub_10001D010(v28, (uint64_t)v32);
    sub_10000588C((uint64_t *)&unk_10164DBF0);
    if (swift_dynamicCast())
    {
      sub_100B310AC((uint64_t)v5, type metadata accessor for SharedBeaconRecord);
      uint64_t v23 = v22[7];
      uint64_t v24 = v22[8];
      sub_10001CD44(v22 + 4, v23);
      if (!sub_100EB7B8C(v23, v24))
      {
        swift_bridgeObjectRelease();
LABEL_11:
        sub_10001CD44(v22 + 4, v22[7]);
        dispatch thunk of RawRepresentable.rawValue.getter();
        uint64_t v19 = v32[0];
        uint64_t v20 = _s18ConnectionKeyGroupVMa;
        uint64_t v21 = (uint64_t)v22;
        goto LABEL_5;
      }
      char v25 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      if (v25) {
        goto LABEL_11;
      }
    }
    sub_100B310AC((uint64_t)v22, (uint64_t (*)(void))_s18ConnectionKeyGroupVMa);
    return 0;
  }
  sub_100B30DB4((uint64_t)v14, (uint64_t)v18, (uint64_t (*)(void))type metadata accessor for TimeBasedKey);
  uint64_t v19 = *v18;
  uint64_t v20 = type metadata accessor for TimeBasedKey;
  uint64_t v21 = (uint64_t)v18;
LABEL_5:
  sub_100B310AC(v21, (uint64_t (*)(void))v20);
  return v19;
}

uint64_t sub_100B06FE4@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v145 = a4;
  uint64_t v155 = _s18ConnectionKeyGroupVMa();
  uint64_t v7 = *(void *)(v155 - 8);
  __chkstk_darwin(v155);
  uint64_t v9 = (char *)&v143 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v159 = type metadata accessor for TimeBasedKey();
  unint64_t v147 = *(void *)(v159 - 8);
  uint64_t v10 = __chkstk_darwin(v159);
  uint64_t v12 = (uint64_t *)((char *)&v143 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v13 = __chkstk_darwin(v10);
  unint64_t v146 = (unint64_t)&v143 - v14;
  uint64_t v15 = __chkstk_darwin(v13);
  uint64_t v153 = (uint64_t *)((char *)&v143 - v16);
  __chkstk_darwin(v15);
  uint64_t v18 = (char *)&v143 - v17;
  uint64_t v19 = sub_10000588C(&qword_10163A958);
  uint64_t v157 = *(void *)(v19 - 8);
  uint64_t v158 = v19;
  uint64_t v20 = __chkstk_darwin(v19);
  uint64_t v22 = (char *)&v143 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v23 = __chkstk_darwin(v20);
  uint64_t v152 = (char *)&v143 - v24;
  __chkstk_darwin(v23);
  uint64_t v151 = (char *)&v143 - v25;
  uint64_t v26 = *a1;
  sub_10001D010(a3, (uint64_t)&v163);
  uint64_t v27 = swift_allocObject();
  *(void *)(v27 + 16) = a2;
  sub_10001CEB0(&v163, v27 + 24);
  *(void *)(v27 + 64) = v26;
  swift_retain();
  unsafeFromAsyncTask<A>(_:)();
  swift_release();
  uint64_t v28 = *((void *)&v163 + 1);
  uint64_t v29 = v163;
  switch(v164)
  {
    case 1:
      uint64_t v143 = *((void *)&v163 + 1);
      unint64_t v41 = *(void *)(v163 + 16);
      unint64_t v80 = _swiftEmptyArrayStorage;
      uint64_t v144 = v163;
      if (!v41) {
        goto LABEL_66;
      }
      uint64_t v167 = _swiftEmptyArrayStorage;
      sub_1000B7C44(0, v41, 0);
      unint64_t v47 = v29 + ((*(unsigned __int8 *)(v147 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v147 + 80));
      uint64_t v81 = *(void (***)(uint64_t *, uint64_t, uint64_t, uint64_t))(v147 + 72);
      uint64_t v152 = (char *)(v147 + 56);
      uint64_t v148 = (uint64_t *)(v7 + 56);
      int64_t v149 = v81;
      uint64_t v34 = v155;
      uint64_t v12 = v153;
      uint64_t v82 = v151;
      unint64_t v150 = v18;
      while (1)
      {
        sub_100B30D0C(v47, (uint64_t)v18, (uint64_t (*)(void))type metadata accessor for TimeBasedKey);
        uint64_t v83 = (uint64_t *)&v82[*(int *)(v158 + 48)];
        sub_100B30D0C((uint64_t)v18, (uint64_t)v82, (uint64_t (*)(void))type metadata accessor for TimeBasedKey);
        uint64_t v84 = v82;
        uint64_t v85 = v159;
        (*(void (**)(char *, void, uint64_t, uint64_t))v152)(v84, 0, 1, v159);
        sub_100B30D0C((uint64_t)v18, (uint64_t)v12, (uint64_t (*)(void))type metadata accessor for TimeBasedKey);
        uint64_t v86 = (uint64_t)v12;
        uint64_t v12 = (uint64_t *)((char *)v12 + *(int *)(v85 + 24));
        unint64_t v87 = v12[1];
        if (v87 >> 60 == 15)
        {
          sub_100B310AC(v86, (uint64_t (*)(void))type metadata accessor for TimeBasedKey);
          uint64_t v88 = 1;
          uint64_t v12 = (uint64_t *)v86;
        }
        else
        {
          unint64_t v147 = v41;
          uint64_t v34 = *v12;
          sub_1000361E0(*v12, v87);
          unint64_t v35 = String.utf8Data.getter();
          unint64_t v44 = v89;
          sub_1000361E0(v34, v87);
          unint64_t v90 = v156;
          uint64_t v154 = sub_100A941DC(v34, v87, v35, v44, 32);
          unint64_t v33 = v90;
          if (v90)
          {
            sub_10001CFB8(v35, v44);
            sub_100037A24(v34, v87);
            goto LABEL_126;
          }
          unint64_t v41 = v91;
          sub_100037A24(v34, v87);
          unint64_t v48 = v41 >> 62;
          unint64_t v146 = v41;
          switch(v41 >> 62)
          {
            case 1uLL:
              LODWORD(v92) = HIDWORD(v154) - v154;
              if (__OFSUB__(HIDWORD(v154), v154)) {
                goto LABEL_82;
              }
              uint64_t v92 = (int)v92;
LABEL_51:
              if (v92 != 32) {
                goto LABEL_91;
              }
              sub_10001CFB8(v35, v44);
              sub_100037A24(v34, v87);
              uint64_t v95 = *v153;
              uint64_t v165 = &type metadata for PrimaryIndex;
              unint64_t v166 = sub_1001A1640();
              *(void *)&long long v163 = v95;
              uint64_t v96 = v12[2];
              unint64_t v35 = v12[3];
              sub_1000361E0(v96, v35);
              uint64_t v97 = sub_100A948F8(v96, v35);
              unint64_t v41 = v147;
              uint64_t v98 = sub_100A90C58(v97, 0);
              unint64_t v156 = 0;
              unint64_t v44 = v98;
              unint64_t v33 = v99;
              CCECCryptorRelease();
              sub_10001CFB8(v96, v35);
              unint64_t v48 = v33 >> 62;
              uint64_t v12 = v153;
              uint64_t v34 = v155;
              switch(v33 >> 62)
              {
                case 1uLL:
                  LODWORD(v100) = HIDWORD(v44) - v44;
                  if (__OFSUB__(HIDWORD(v44), v44)) {
                    goto LABEL_86;
                  }
                  uint64_t v100 = (int)v100;
LABEL_59:
                  if (v100 != 28) {
                    goto LABEL_99;
                  }
                  sub_100435A9C(6, v44, v33, (uint64_t *)&i);
                  uint64_t v103 = i;
                  unint64_t v104 = v162;
                  sub_10001CEB0(&v163, (uint64_t)(v83 + 4));
                  uint64_t v105 = (char *)v12 + *(int *)(v159 + 20);
                  uint64_t v106 = (char *)v83 + *(int *)(v34 + 28);
                  uint64_t v107 = type metadata accessor for DateInterval();
                  (*(void (**)(char *, char *, uint64_t))(*(void *)(v107 - 8) + 16))(v106, v105, v107);
                  *uint64_t v83 = v103;
                  v83[1] = v104;
                  unint64_t v108 = v146;
                  v83[2] = v154;
                  v83[3] = v108;
                  sub_100B310AC((uint64_t)v12, (uint64_t (*)(void))type metadata accessor for TimeBasedKey);
                  uint64_t v88 = 0;
                  break;
                case 2uLL:
                  uint64_t v102 = *(void *)(v44 + 16);
                  uint64_t v101 = *(void *)(v44 + 24);
                  BOOL v52 = __OFSUB__(v101, v102);
                  uint64_t v100 = v101 - v102;
                  if (!v52) {
                    goto LABEL_59;
                  }
                  goto LABEL_84;
                case 3uLL:
                  uint64_t v142 = 0;
                  goto LABEL_130;
                default:
                  uint64_t v100 = BYTE6(v33);
                  goto LABEL_59;
              }
              break;
            case 2uLL:
              uint64_t v94 = *(void *)(v154 + 16);
              uint64_t v93 = *(void *)(v154 + 24);
              BOOL v52 = __OFSUB__(v93, v94);
              uint64_t v92 = v93 - v94;
              if (!v52) {
                goto LABEL_51;
              }
              goto LABEL_80;
            case 3uLL:
              uint64_t v140 = 0;
              goto LABEL_125;
            default:
              uint64_t v92 = BYTE6(v41);
              goto LABEL_51;
          }
        }
        ((void (*)(uint64_t *, uint64_t, uint64_t, uint64_t))*v148)(v83, v88, 1, v34);
        uint64_t v18 = v150;
        sub_100B310AC((uint64_t)v150, (uint64_t (*)(void))type metadata accessor for TimeBasedKey);
        unint64_t v80 = v167;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        {
          sub_1000B7C44(0, v80[2] + 1, 1);
          unint64_t v80 = v167;
        }
        unint64_t v110 = v80[2];
        unint64_t v109 = v80[3];
        if (v110 >= v109 >> 1)
        {
          sub_1000B7C44(v109 > 1, v110 + 1, 1);
          unint64_t v80 = v167;
        }
        v80[2] = v110 + 1;
        uint64_t v82 = v151;
        sub_10001D608((uint64_t)v151, (uint64_t)v80+ ((*(unsigned __int8 *)(v157 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v157 + 80))+ *(void *)(v157 + 72) * v110, &qword_10163A958);
        v47 += (unint64_t)v149;
        if (!--v41)
        {
LABEL_66:
          uint64_t v111 = v143;
          if (v80[2])
          {
            uint64_t v112 = v157;
            uint64_t v113 = v145;
            sub_10001D074((uint64_t)v80+ ((*(unsigned __int8 *)(v157 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v157 + 80)), v145, &qword_10163A958);
            (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v112 + 56))(v113, 0, 1, v158);
          }
          else
          {
            (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v157 + 56))(v145, 1, 1, v158);
          }
          uint64_t v121 = v144;
          uint64_t v122 = v111;
          unsigned __int8 v123 = 1;
          goto LABEL_78;
        }
      }
    case 2:
      int64_t v71 = *(void *)(v163 + 16);
      uint64_t v72 = _swiftEmptyArrayStorage;
      uint64_t v144 = v163;
      if (v71)
      {
        uint64_t v143 = *((void *)&v163 + 1);
        *(void *)&long long v163 = _swiftEmptyArrayStorage;
        sub_1000B7C44(0, v71, 0);
        uint64_t v73 = v29 + ((*(unsigned __int8 *)(v7 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80));
        uint64_t v154 = *(void *)(v7 + 72);
        uint64_t v74 = (void (**)(char *, uint64_t, uint64_t, uint64_t))(v147 + 56);
        uint64_t v75 = (void (**)(uint64_t, void, uint64_t, uint64_t))(v7 + 56);
        do
        {
          sub_100B30D0C(v73, (uint64_t)v9, (uint64_t (*)(void))_s18ConnectionKeyGroupVMa);
          uint64_t v76 = (uint64_t)&v22[*(int *)(v158 + 48)];
          (*v74)(v22, 1, 1, v159);
          sub_100B30D0C((uint64_t)v9, v76, (uint64_t (*)(void))_s18ConnectionKeyGroupVMa);
          (*v75)(v76, 0, 1, v155);
          sub_100B310AC((uint64_t)v9, (uint64_t (*)(void))_s18ConnectionKeyGroupVMa);
          uint64_t v72 = (void *)v163;
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
          {
            sub_1000B7C44(0, v72[2] + 1, 1);
            uint64_t v72 = (void *)v163;
          }
          unint64_t v78 = v72[2];
          unint64_t v77 = v72[3];
          if (v78 >= v77 >> 1)
          {
            sub_1000B7C44(v77 > 1, v78 + 1, 1);
            uint64_t v72 = (void *)v163;
          }
          v72[2] = v78 + 1;
          sub_10001D608((uint64_t)v22, (uint64_t)v72+ ((*(unsigned __int8 *)(v157 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v157 + 80))+ *(void *)(v157 + 72) * v78, &qword_10163A958);
          v73 += v154;
          --v71;
        }
        while (v71);
        uint64_t v28 = v143;
      }
      if (v72[2])
      {
        uint64_t v114 = v28;
        uint64_t v115 = v157;
        uint64_t v116 = v145;
        sub_10001D074((uint64_t)v72 + ((*(unsigned __int8 *)(v157 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v157 + 80)), v145, &qword_10163A958);
        (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v115 + 56))(v116, 0, 1, v158);
        uint64_t v117 = v144;
        uint64_t v118 = v114;
      }
      else
      {
        (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v157 + 56))(v145, 1, 1, v158);
        uint64_t v117 = v144;
        uint64_t v118 = v28;
      }
      sub_1002F6A08(v117, v118, 2u);
      return swift_bridgeObjectRelease();
    case 3:
      return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v157 + 56))(v145, 1, 1, v158);
    default:
      int64_t v30 = *(void *)(v163 + 16);
      uint64_t v31 = _swiftEmptyArrayStorage;
      uint64_t v144 = v163;
      if (!v30) {
        goto LABEL_70;
      }
      uint64_t v143 = *((void *)&v163 + 1);
      uint64_t v167 = _swiftEmptyArrayStorage;
      sub_1000B7C44(0, v30, 0);
      uint64_t v32 = v7;
      unint64_t v33 = v29 + ((*(unsigned __int8 *)(v147 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v147 + 80));
      unint64_t v150 = *(char **)(v147 + 72);
      uint64_t v151 = (char *)(v147 + 56);
      int64_t v149 = (void (**)(uint64_t *, uint64_t, uint64_t, uint64_t))(v32 + 56);
      uint64_t v34 = v155;
      unint64_t v35 = v146;
      uint64_t v36 = v152;
      uint64_t v148 = v12;
      break;
  }
  do
  {
    uint64_t v154 = v30;
    sub_100B30D0C(v33, v35, (uint64_t (*)(void))type metadata accessor for TimeBasedKey);
    uint64_t v37 = (uint64_t *)&v36[*(int *)(v158 + 48)];
    sub_100B30D0C(v35, (uint64_t)v36, (uint64_t (*)(void))type metadata accessor for TimeBasedKey);
    uint64_t v38 = v36;
    uint64_t v39 = v159;
    (*(void (**)(char *, void, uint64_t, uint64_t))v151)(v38, 0, 1, v159);
    sub_100B30D0C(v35, (uint64_t)v12, (uint64_t (*)(void))type metadata accessor for TimeBasedKey);
    int v40 = (uint64_t *)((char *)v12 + *(int *)(v39 + 24));
    unint64_t v41 = v40[1];
    if (v41 >> 60 != 15)
    {
      uint64_t v34 = *v40;
      sub_1000361E0(*v40, v40[1]);
      uint64_t v12 = (uint64_t *)String.utf8Data.getter();
      unint64_t v44 = v43;
      sub_1000361E0(v34, v41);
      unint64_t v45 = v156;
      uint64_t v153 = (uint64_t *)sub_100A941DC(v34, v41, (uint64_t)v12, v44, 32);
      unint64_t v47 = v45;
      if (!v45)
      {
        unint64_t v35 = v46;
        sub_100037A24(v34, v41);
        unint64_t v48 = v35 >> 62;
        unint64_t v147 = v35;
        switch(v35 >> 62)
        {
          case 1uLL:
            LODWORD(v49) = HIDWORD(v153) - v153;
            if (__OFSUB__(HIDWORD(v153), v153)) {
              goto LABEL_81;
            }
            uint64_t v49 = (int)v49;
LABEL_14:
            if (v49 != 32) {
              goto LABEL_87;
            }
            sub_10001CFB8((uint64_t)v12, v44);
            sub_100037A24(v34, v41);
            uint64_t v53 = (void (*)(void, void, void, void))*v148;
            uint64_t v165 = &type metadata for PrimaryIndex;
            unint64_t v166 = sub_1001A1640();
            *(void *)&long long v163 = v53;
            unint64_t v41 = v40[2];
            unint64_t v54 = v40[3];
            sub_1000361E0(v41, v54);
            uint64_t v55 = sub_100A948F8(v41, v54);
            uint64_t v56 = sub_100A90C58(v55, 0);
            unint64_t v156 = 0;
            unint64_t v44 = v56;
            unint64_t v47 = v57;
            CCECCryptorRelease();
            sub_10001CFB8(v41, v54);
            unint64_t v48 = v47 >> 62;
            uint64_t v34 = v155;
            uint64_t v12 = v148;
            switch(v47 >> 62)
            {
              case 1uLL:
                LODWORD(v58) = HIDWORD(v44) - v44;
                unint64_t v35 = v146;
                if (__OFSUB__(HIDWORD(v44), v44)) {
                  goto LABEL_85;
                }
                uint64_t v58 = (int)v58;
LABEL_22:
                if (v58 != 28) {
                  goto LABEL_95;
                }
                sub_100435A9C(6, v44, v47, (uint64_t *)&i);
                uint64_t v61 = i;
                unint64_t v62 = v162;
                sub_10001CEB0(&v163, (uint64_t)(v37 + 4));
                uint64_t v63 = (char *)v12 + *(int *)(v159 + 20);
                uint64_t v64 = (char *)v37 + *(int *)(v34 + 28);
                uint64_t v65 = type metadata accessor for DateInterval();
                (*(void (**)(char *, char *, uint64_t))(*(void *)(v65 - 8) + 16))(v64, v63, v65);
                *uint64_t v37 = v61;
                v37[1] = v62;
                unint64_t v66 = v147;
                v37[2] = (uint64_t)v153;
                v37[3] = v66;
                sub_100B310AC((uint64_t)v12, (uint64_t (*)(void))type metadata accessor for TimeBasedKey);
                uint64_t v42 = 0;
                break;
              case 2uLL:
                uint64_t v60 = *(void *)(v44 + 16);
                uint64_t v59 = *(void *)(v44 + 24);
                BOOL v52 = __OFSUB__(v59, v60);
                uint64_t v58 = v59 - v60;
                unint64_t v35 = v146;
                if (!v52) {
                  goto LABEL_22;
                }
                goto LABEL_83;
              case 3uLL:
                uint64_t v141 = 0;
                goto LABEL_128;
              default:
                uint64_t v58 = BYTE6(v47);
                unint64_t v35 = v146;
                goto LABEL_22;
            }
            goto LABEL_24;
          case 2uLL:
            uint64_t v51 = v153[2];
            uint64_t v50 = v153[3];
            BOOL v52 = __OFSUB__(v50, v51);
            uint64_t v49 = v50 - v51;
            if (!v52) {
              goto LABEL_14;
            }
            __break(1u);
LABEL_80:
            __break(1u);
LABEL_81:
            __break(1u);
LABEL_82:
            __break(1u);
LABEL_83:
            __break(1u);
LABEL_84:
            __break(1u);
LABEL_85:
            __break(1u);
LABEL_86:
            __break(1u);
LABEL_87:
            if (v48 != 1) {
              goto LABEL_103;
            }
            LODWORD(v48) = HIDWORD(v153) - v153;
            if (!__OFSUB__(HIDWORD(v153), v153)) {
              goto LABEL_132;
            }
            __break(1u);
LABEL_91:
            if (v48 != 1) {
              goto LABEL_107;
            }
            LODWORD(v48) = HIDWORD(v154) - v154;
            if (!__OFSUB__(HIDWORD(v154), v154))
            {
              uint64_t v140 = (int)v48;
              goto LABEL_125;
            }
            __break(1u);
LABEL_95:
            if (v48 != 1) {
              goto LABEL_111;
            }
            LODWORD(v48) = HIDWORD(v44) - v44;
            if (!__OFSUB__(HIDWORD(v44), v44))
            {
              uint64_t v141 = (int)v48;
LABEL_128:
              sub_10013019C();
              uint64_t v134 = swift_allocError();
              *(void *)uint64_t v135 = 28;
              *(void *)(v135 + 8) = v141;
              *(unsigned char *)(v135 + 16) = 0;
              swift_willThrow();
              sub_10001CFB8(v44, v47);
              unint64_t i = 0;
              unint64_t v162 = 0xE000000000000000;
              _StringGuts.grow(_:)(35);
              v136._object = (void *)0x80000001013F3B70;
              v136._uint64_t countAndFlagsBits = 0xD000000000000021;
              String.append(_:)(v136);
              uint64_t v160 = v134;
              goto LABEL_131;
            }
            __break(1u);
LABEL_99:
            if (v48 != 1) {
              goto LABEL_115;
            }
            LODWORD(v48) = HIDWORD(v44) - v44;
            if (!__OFSUB__(HIDWORD(v44), v44))
            {
              uint64_t v142 = (int)v48;
LABEL_130:
              sub_10013019C();
              uint64_t v137 = swift_allocError();
              *(void *)uint64_t v138 = 28;
              *(void *)(v138 + 8) = v142;
              *(unsigned char *)(v138 + 16) = 0;
              swift_willThrow();
              sub_10001CFB8(v44, v33);
              unint64_t i = 0;
              unint64_t v162 = 0xE000000000000000;
              _StringGuts.grow(_:)(35);
              v139._object = (void *)0x80000001013F3B70;
              v139._uint64_t countAndFlagsBits = 0xD000000000000021;
              String.append(_:)(v139);
              uint64_t v160 = v137;
              goto LABEL_131;
            }
            __break(1u);
LABEL_103:
            if (v48 != 2)
            {
              unint64_t v125 = BYTE6(v147);
              goto LABEL_121;
            }
            uint64_t v124 = v153[2];
            unint64_t v48 = v153[3];
            unint64_t v125 = v48 - v124;
            if (!__OFSUB__(v48, v124)) {
              goto LABEL_121;
            }
            __break(1u);
LABEL_107:
            if (v48 != 2)
            {
              uint64_t v140 = BYTE6(v146);
              goto LABEL_125;
            }
            uint64_t v126 = *(void *)(v154 + 16);
            unint64_t v48 = *(void *)(v154 + 24);
            uint64_t v140 = v48 - v126;
            if (!__OFSUB__(v48, v126))
            {
LABEL_125:
              sub_10013019C();
              unint64_t v33 = swift_allocError();
              *(void *)uint64_t v132 = 32;
              *(void *)(v132 + 8) = v140;
              *(unsigned char *)(v132 + 16) = 0;
              swift_willThrow();
              sub_10001CFB8(v154, v146);
              sub_10001CFB8(v35, v44);
LABEL_126:
              *(void *)&long long v163 = 0;
              *((void *)&v163 + 1) = 0xE000000000000000;
              _StringGuts.grow(_:)(35);
              v133._object = (void *)0x80000001013FB8E0;
              v133._uint64_t countAndFlagsBits = 0xD000000000000021;
              String.append(_:)(v133);
              for (unint64_t i = v33; ; unint64_t i = v47)
              {
LABEL_131:
                sub_10000588C(&qword_101638D40);
                _print_unlocked<A, B>(_:_:)();
                _assertionFailure(_:_:file:line:flags:)();
                __break(1u);
LABEL_132:
                unint64_t v125 = (int)v48;
LABEL_121:
                sub_10013019C();
                unint64_t v47 = swift_allocError();
                *(void *)uint64_t v130 = 32;
                *(void *)(v130 + 8) = v125;
                *(unsigned char *)(v130 + 16) = 0;
                swift_willThrow();
                sub_10001CFB8((uint64_t)v153, v147);
                sub_10001CFB8((uint64_t)v12, v44);
LABEL_122:
                *(void *)&long long v163 = 0;
                *((void *)&v163 + 1) = 0xE000000000000000;
                _StringGuts.grow(_:)(35);
                v131._object = (void *)0x80000001013FB8E0;
                v131._uint64_t countAndFlagsBits = 0xD000000000000021;
                String.append(_:)(v131);
              }
            }
            __break(1u);
LABEL_111:
            if (v48 != 2)
            {
              uint64_t v141 = BYTE6(v47);
              goto LABEL_128;
            }
            uint64_t v127 = *(void *)(v44 + 16);
            unint64_t v48 = *(void *)(v44 + 24);
            uint64_t v141 = v48 - v127;
            if (!__OFSUB__(v48, v127)) {
              goto LABEL_128;
            }
            __break(1u);
LABEL_115:
            if (v48 != 2)
            {
              uint64_t v142 = BYTE6(v33);
              goto LABEL_130;
            }
            uint64_t v129 = *(void *)(v44 + 16);
            uint64_t v128 = *(void *)(v44 + 24);
            uint64_t v142 = v128 - v129;
            if (!__OFSUB__(v128, v129)) {
              goto LABEL_130;
            }
            __break(1u);
            break;
          case 3uLL:
            unint64_t v125 = 0;
            goto LABEL_121;
          default:
            uint64_t v49 = BYTE6(v35);
            goto LABEL_14;
        }
      }
      sub_10001CFB8((uint64_t)v12, v44);
      sub_100037A24(v34, v41);
      goto LABEL_122;
    }
    sub_100B310AC((uint64_t)v12, (uint64_t (*)(void))type metadata accessor for TimeBasedKey);
    uint64_t v42 = 1;
LABEL_24:
    (*v149)(v37, v42, 1, v34);
    sub_100B310AC(v35, (uint64_t (*)(void))type metadata accessor for TimeBasedKey);
    uint64_t v31 = v167;
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v68 = v154;
    if ((isUniquelyReferenced_nonNull_native & 1) == 0)
    {
      sub_1000B7C44(0, v31[2] + 1, 1);
      uint64_t v31 = v167;
    }
    unint64_t v70 = v31[2];
    unint64_t v69 = v31[3];
    if (v70 >= v69 >> 1)
    {
      sub_1000B7C44(v69 > 1, v70 + 1, 1);
      uint64_t v31 = v167;
    }
    void v31[2] = v70 + 1;
    uint64_t v36 = v152;
    sub_10001D608((uint64_t)v152, (uint64_t)v31+ ((*(unsigned __int8 *)(v157 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v157 + 80))+ *(void *)(v157 + 72) * v70, &qword_10163A958);
    v33 += (unint64_t)v150;
    int64_t v30 = v68 - 1;
  }
  while (v30);
  uint64_t v28 = v143;
LABEL_70:
  if (v31[2])
  {
    uint64_t v119 = v157;
    uint64_t v120 = v145;
    sub_10001D074((uint64_t)v31 + ((*(unsigned __int8 *)(v157 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v157 + 80)), v145, &qword_10163A958);
    (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v119 + 56))(v120, 0, 1, v158);
  }
  else
  {
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v157 + 56))(v145, 1, 1, v158);
  }
  uint64_t v121 = v144;
  uint64_t v122 = v28;
  unsigned __int8 v123 = 0;
LABEL_78:
  sub_1002F6A08(v121, v122, v123);
  return swift_bridgeObjectRelease();
}

uint64_t sub_100B086B8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v4[5] = a3;
  v4[6] = a4;
  v4[3] = a1;
  v4[4] = a2;
  return _swift_task_switch(sub_100B086DC, 0, 0);
}

uint64_t sub_100B086DC()
{
  type metadata accessor for BeaconKeyManager(0);
  OSAllocatedUnfairLock.callAsFunction<A>(_:)();
  v0[7] = v0[2];
  uint64_t v1 = (void *)swift_task_alloc();
  v0[8] = v1;
  *uint64_t v1 = v0;
  v1[1] = sub_100674214;
  uint64_t v3 = v0[5];
  uint64_t v2 = v0[6];
  return sub_1006D8A68(v3, v2, v2, 0, 0, 0);
}

uint64_t sub_100B087E4(uint64_t a1, int a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = v4;
  uint64_t v10 = type metadata accessor for UUID();
  uint64_t v50 = *(void *)(v10 - 8);
  __chkstk_darwin(v10);
  uint64_t v12 = (char *)v49 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10001D010(a1, (uint64_t)v59);
  uint64_t v52 = a4;
  uint64_t v13 = sub_100B08E30(0, v5, (uint64_t)v59, a3, a4, a2);
  uint64_t v17 = v16;
  uint64_t v58 = v16;
  BOOL v18 = v15 == 3 && (v13 | v14) == 0;
  int v51 = a2;
  if (v18)
  {
    swift_bridgeObjectRelease();
    uint64_t v32 = sub_100B08E30(1, v5, (uint64_t)v59, a3, v52, a2);
    uint64_t v34 = v33;
    unsigned __int8 v36 = v35;
    uint64_t v38 = v37;
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)v59);
    sub_1002F6A08(v32, v34, v36);
    uint64_t v58 = v38;
  }
  else
  {
    uint64_t v19 = v13;
    uint64_t v20 = v14;
    unsigned __int8 v21 = v15;
    swift_bridgeObjectRetain();
    sub_1002F6A08(v19, v20, v21);
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)v59);
    if (qword_101636F50 != -1) {
      swift_once();
    }
    uint64_t v22 = type metadata accessor for Logger();
    sub_100010324(v22, (uint64_t)qword_10170E9E8);
    sub_10001D010(a1, (uint64_t)v55);
    swift_bridgeObjectRetain();
    uint64_t v23 = Logger.logObject.getter();
    os_log_type_t v24 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v23, v24))
    {
      uint64_t v25 = swift_slowAlloc();
      uint64_t v54 = swift_slowAlloc();
      *(_DWORD *)uint64_t v25 = 134218499;
      uint64_t v26 = *(void *)(v17 + 16);
      swift_bridgeObjectRelease();
      uint64_t v53 = v26;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      *(_WORD *)(v25 + 12) = 2160;
      uint64_t v53 = 1752392040;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v25 + 22) = 2081;
      v49[1] = v25 + 24;
      uint64_t v27 = v56;
      uint64_t v28 = v57;
      sub_10001CD44(v55, v56);
      (*(void (**)(uint64_t))(*(void *)(*(void *)(v28 + 8) + 8) + 32))(v27);
      sub_100B22DA4((unint64_t *)&qword_101638B10, (void (*)(uint64_t))&type metadata accessor for UUID);
      uint64_t v29 = dispatch thunk of CustomStringConvertible.description.getter();
      unint64_t v31 = v30;
      (*(void (**)(char *, uint64_t))(v50 + 8))(v12, v10);
      uint64_t v53 = sub_1008FA0F0(v29, v31, &v54);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)v55);
      _os_log_impl((void *)&_mh_execute_header, v23, v24, "Found %ld matching hint advertisements for beacon %{private,mask.hash}s.", (uint8_t *)v25, 0x20u);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      swift_bridgeObjectRelease_n();
      _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)v55);
    }
  }
  swift_beginAccess();
  if (!*(void *)(v58 + 16))
  {
    sub_10000588C((uint64_t *)&unk_10163AD00);
    uint64_t v39 = swift_allocObject();
    *(_OWORD *)(v39 + 16) = xmmword_101342130;
    *(void *)(v39 + 56) = &type metadata for UInt8;
    *(void *)(v39 + 64) = &protocol witness table for UInt8;
    char v40 = v51;
    *(unsigned char *)(v39 + 32) = v51;
    uint64_t v41 = String.init(format:_:)();
    unint64_t v43 = v42;
    if (qword_101636F50 != -1) {
      swift_once();
    }
    uint64_t v44 = type metadata accessor for Logger();
    sub_100010324(v44, (uint64_t)qword_10170E9E8);
    swift_bridgeObjectRetain();
    unint64_t v45 = Logger.logObject.getter();
    os_log_type_t v46 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v45, v46))
    {
      uint64_t v47 = swift_slowAlloc();
      uint64_t v54 = swift_slowAlloc();
      *(_DWORD *)uint64_t v47 = 16778242;
      LOBYTE(v53) = v40;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v47 + 5) = 2080;
      swift_bridgeObjectRetain();
      uint64_t v53 = sub_1008FA0F0(v41, v43, &v54);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      *(_WORD *)(v47 + 15) = 2048;
      uint64_t v53 = a3;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v47 + 25) = 2048;
      uint64_t v53 = v52;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      _os_log_impl((void *)&_mh_execute_header, v45, v46, "No matches for the provided criteria: sequence: .primary, hint: %hhu - hex %s,\nstartBucket: %llu, endBucket: %llu.", (uint8_t *)v47, 0x23u);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {

      swift_bridgeObjectRelease_n();
    }
  }
  return v58;
}

uint64_t sub_100B08E30(int a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, unsigned __int8 a6)
{
  LODWORD(v265) = a1;
  uint64_t v10 = 0;
  LODWORD(v261) = a6;
  uint64_t v263 = _s18ConnectionKeyGroupVMa();
  unint64_t v255 = *(void *)(v263 - 8);
  uint64_t v11 = __chkstk_darwin(v263);
  unint64_t v252 = (uint64_t *)((char *)&v243 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v13 = __chkstk_darwin(v11);
  uint64_t v251 = (char *)&v243 - v14;
  uint64_t v15 = __chkstk_darwin(v13);
  uint64_t v17 = (unint64_t *)((char *)&v243 - v16);
  uint64_t v18 = __chkstk_darwin(v15);
  uint64_t v248 = (char *)&v243 - v19;
  uint64_t v20 = __chkstk_darwin(v18);
  uint64_t v246 = (uint64_t)&v243 - v21;
  uint64_t v22 = __chkstk_darwin(v20);
  uint64_t v247 = (char *)&v243 - v23;
  __chkstk_darwin(v22);
  uint64_t v245 = (uint64_t)&v243 - v24;
  uint64_t v264 = sub_10000588C(&qword_10163A958);
  uint64_t v262 = *(void *)(v264 - 8);
  uint64_t v25 = __chkstk_darwin(v264);
  unint64_t v256 = (unint64_t)&v243 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v27 = __chkstk_darwin(v25);
  uint64_t v254 = (char *)&v243 - v28;
  __chkstk_darwin(v27);
  unint64_t v253 = (char *)&v243 - v29;
  uint64_t v266 = type metadata accessor for TimeBasedKey();
  uint64_t v259 = *(void *)(v266 - 8);
  uint64_t v30 = __chkstk_darwin(v266);
  uint64_t v257 = (char *)&v243 - ((v31 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v32 = __chkstk_darwin(v30);
  unint64_t v258 = (uint64_t *)((char *)&v243 - v33);
  uint64_t v34 = __chkstk_darwin(v32);
  unint64_t v250 = (uint64_t *)((char *)&v243 - v35);
  uint64_t v36 = __chkstk_darwin(v34);
  unint64_t v38 = (unint64_t)&v243 - v37;
  uint64_t v39 = __chkstk_darwin(v36);
  uint64_t v41 = (uint64_t *)((char *)&v243 - v40);
  uint64_t v42 = __chkstk_darwin(v39);
  uint64_t v260 = (uint64_t)&v243 - v43;
  uint64_t v44 = __chkstk_darwin(v42);
  uint64_t v249 = (uint64_t)&v243 - v45;
  __chkstk_darwin(v44);
  unint64_t v47 = (unint64_t)&v243 - v46;
  sub_10001D010(a3, (uint64_t)&v271);
  unint64_t v48 = swift_allocObject();
  *(void *)(v48 + 16) = a2;
  sub_10001CEB0(&v271, v48 + 24);
  *(void *)(v48 + 64) = a4;
  *(void *)(v48 + 72) = a5;
  *(unsigned char *)(v48 + 80) = v265;
  swift_retain();
  unsafeFromAsyncTask<A>(_:)();
  swift_release();
  uint64_t v244 = *((void *)&v271 + 1);
  uint64_t v49 = v271;
  uint64_t v265 = v271;
  switch(v272)
  {
    case 1u:
      uint64_t v243 = v272;
      uint64_t v269 = _swiftEmptyArrayStorage;
      unint64_t v50 = *(void *)(v271 + 16);
      swift_bridgeObjectRetain();
      unint64_t v258 = v41;
      uint64_t v254 = (char *)v50;
      if (!v50)
      {
        uint64_t v113 = _swiftEmptyArrayStorage;
        goto LABEL_101;
      }
      unint64_t v76 = 0;
      unint64_t v252 = _swiftEmptyArrayStorage;
      while (2)
      {
        uint64_t v52 = *(void *)(v49 + 16);
        if (v76 >= v52) {
          goto LABEL_169;
        }
        unint64_t v77 = *(void *)(v259 + 72);
        uint64_t v257 = (char *)((*(unsigned __int8 *)(v259 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v259 + 80));
        unint64_t v78 = v76;
        unint64_t v256 = v77;
        sub_100B30D0C((uint64_t)&v257[v49 + v77 * v76], v47, (uint64_t (*)(void))type metadata accessor for TimeBasedKey);
        uint64_t v79 = v47;
        unint64_t v80 = v47 + *(int *)(v266 + 24);
        uint64_t v81 = *(void *)(v80 + 16);
        unint64_t v82 = *(void *)(v80 + 24);
        sub_1000361E0(v81, v82);
        unint64_t v50 = 0;
        uint64_t v83 = sub_100A948F8(v81, v82);
        unint64_t v47 = sub_100A90C58(v83, 0);
        unint64_t v48 = v84;
        unint64_t v38 = v78 + 1;
        CCECCryptorRelease();
        sub_10001CFB8(v81, v82);
        uint64_t v52 = v48 >> 62;
        switch(v48 >> 62)
        {
          case 1uLL:
            LODWORD(v85) = HIDWORD(v47) - v47;
            if (__OFSUB__(HIDWORD(v47), v47)) {
              goto LABEL_179;
            }
            uint64_t v85 = (int)v85;
LABEL_48:
            if (v85 != 28) {
              goto LABEL_201;
            }
            sub_1000361E0(v47, v48);
            uint64_t v88 = static MACAddress.length.getter();
            sub_100435A9C(v88, v47, v48, (uint64_t *)&v271);
            long long v89 = v271;
            switch(*((void *)&v271 + 1) >> 62)
            {
              case 1:
                LODWORD(v52) = 0;
                if ((uint64_t)v271 < 0x600000000 || (int)v271 > 5) {
                  goto LABEL_185;
                }
                uint64_t v94 = __DataStorage._bytes.getter();
                if (!v94) {
                  goto LABEL_238;
                }
                uint64_t v92 = v94;
                uint64_t v95 = __DataStorage._offset.getter();
                uint64_t v52 = 5 - v95;
                if (!__OFSUB__(5, v95)) {
                  goto LABEL_62;
                }
                goto LABEL_189;
              case 2:
                uint64_t v52 = *(void *)(v271 + 16);
                if (v52 > 5) {
                  goto LABEL_181;
                }
                uint64_t v52 = *(void *)(v271 + 24);
                if (v52 < 6) {
                  goto LABEL_187;
                }
                uint64_t v91 = __DataStorage._bytes.getter();
                if (!v91) {
                  goto LABEL_240;
                }
                uint64_t v92 = v91;
                uint64_t v93 = __DataStorage._offset.getter();
                uint64_t v52 = 5 - v93;
                if (__OFSUB__(5, v93)) {
                  goto LABEL_191;
                }
LABEL_62:
                int v90 = *(unsigned __int8 *)(v92 + v52);
LABEL_63:
                sub_10001CFB8(v89, *((unint64_t *)&v89 + 1));
                sub_10001CFB8(v47, v48);
                if (v90 == v261)
                {
                  unint64_t v47 = v79;
                  sub_100B30DB4(v79, v249, (uint64_t (*)(void))type metadata accessor for TimeBasedKey);
                  uint64_t v96 = v252;
                  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
                  uint64_t v41 = v258;
                  if ((isUniquelyReferenced_nonNull_native & 1) == 0) {
                    sub_1000B7258(0, v96[2] + 1, 1);
                  }
                  uint64_t v98 = v269;
                  unint64_t v48 = v269[2];
                  unint64_t v99 = v269[3];
                  uint64_t v49 = v265;
                  if (v48 >= v99 >> 1)
                  {
                    sub_1000B7258(v99 > 1, v48 + 1, 1);
                    uint64_t v49 = v265;
                    uint64_t v98 = v269;
                  }
                  v98[2] = v48 + 1;
                  unint64_t v252 = v98;
                  sub_100B30DB4(v249, (uint64_t)&v257[(void)v98 + v48 * v256], (uint64_t (*)(void))type metadata accessor for TimeBasedKey);
                }
                else
                {
                  unint64_t v47 = v79;
                  sub_100B310AC(v79, (uint64_t (*)(void))type metadata accessor for TimeBasedKey);
                  uint64_t v49 = v265;
                  uint64_t v41 = v258;
                }
                unint64_t v76 = v38;
                if (v254 != (char *)v38) {
                  continue;
                }
                uint64_t v113 = v269;
                break;
              case 3:
                goto LABEL_236;
              default:
                LODWORD(v52) = 0;
                if ((*((void *)&v271 + 1) & 0xFE000000000000uLL) < 0x5000000000001) {
                  goto LABEL_183;
                }
                int v90 = BYTE5(v271);
                goto LABEL_63;
            }
            break;
          case 2uLL:
            uint64_t v87 = *(void *)(v47 + 16);
            uint64_t v86 = *(void *)(v47 + 24);
            BOOL v64 = __OFSUB__(v86, v87);
            uint64_t v85 = v86 - v87;
            if (!v64) {
              goto LABEL_48;
            }
            goto LABEL_177;
          case 3uLL:
            uint64_t v210 = 0;
            goto LABEL_264;
          default:
            uint64_t v85 = BYTE6(v48);
            goto LABEL_48;
        }
        break;
      }
LABEL_101:
      sub_1002F6A08(v49, v244, 1u);
      int64_t v115 = v113[2];
      if (!v115) {
        goto LABEL_166;
      }
      int64_t v268 = _swiftEmptyArrayStorage;
      sub_1000B7C44(0, v115, 0);
      unint64_t v116 = (*(unsigned __int8 *)(v259 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v259 + 80);
      unint64_t v250 = v113;
      uint64_t v117 = (uint64_t)v113 + v116;
      uint64_t v118 = *(char **)(v259 + 72);
      uint64_t v119 = (void *)(v259 + 56);
      uint64_t v251 = v247 + 32;
      uint64_t v257 = (char *)(v255 + 56);
      uint64_t v120 = (uint64_t)v253;
      uint64_t v254 = v118;
      unint64_t v252 = (void *)(v259 + 56);
      do
      {
        uint64_t v259 = v115;
        uint64_t v121 = v260;
        sub_100B30D0C(v117, v260, (uint64_t (*)(void))type metadata accessor for TimeBasedKey);
        uint64_t v261 = (void *)(v120 + *(int *)(v264 + 48));
        sub_100B30D0C(v121, v120, (uint64_t (*)(void))type metadata accessor for TimeBasedKey);
        uint64_t v122 = v120;
        uint64_t v123 = v266;
        ((void (*)(uint64_t, void, uint64_t, uint64_t))*v119)(v122, 0, 1, v266);
        sub_100B30D0C(v121, (uint64_t)v41, (uint64_t (*)(void))type metadata accessor for TimeBasedKey);
        uint64_t v124 = (void *)((char *)v41 + *(int *)(v123 + 24));
        unint64_t v125 = v124[1];
        if (v125 >> 60 == 15)
        {
          sub_100B310AC((uint64_t)v41, (uint64_t (*)(void))type metadata accessor for TimeBasedKey);
          uint64_t v126 = 1;
          uint64_t v127 = v263;
        }
        else
        {
          uint64_t v128 = *v124;
          sub_1000361E0(*v124, v124[1]);
          unint64_t v47 = String.utf8Data.getter();
          unint64_t v48 = v129;
          sub_1000361E0(v128, v125);
          unint64_t v38 = sub_100A941DC(v128, v125, v47, v48, 32);
          unint64_t v50 = v130;
          sub_100037A24(v128, v125);
          uint64_t v52 = v50 >> 62;
          switch(v50 >> 62)
          {
            case 1uLL:
              LODWORD(v131) = HIDWORD(v38) - v38;
              if (__OFSUB__(HIDWORD(v38), v38)) {
                goto LABEL_195;
              }
              uint64_t v131 = (int)v131;
LABEL_112:
              if (v131 != 32) {
                goto LABEL_209;
              }
              sub_10001CFB8(v47, v48);
              sub_100037A24(v128, v125);
              uint64_t v134 = *v258;
              uint64_t v273 = &type metadata for PrimaryIndex;
              unint64_t v274 = sub_1001A1640();
              *(void *)&long long v271 = v134;
              uint64_t v135 = v124[2];
              unint64_t v136 = v124[3];
              sub_1000361E0(v135, v136);
              uint64_t v137 = sub_100A948F8(v135, v136);
              unint64_t v48 = sub_100A90C58(v137, 0);
              unint64_t v47 = v138;
              CCECCryptorRelease();
              sub_10001CFB8(v135, v136);
              uint64_t v52 = v47 >> 62;
              uint64_t v127 = v263;
              unint64_t v256 = v38;
              switch(v47 >> 62)
              {
                case 1uLL:
                  LODWORD(v139) = HIDWORD(v48) - v48;
                  if (__OFSUB__(HIDWORD(v48), v48)) {
                    goto LABEL_199;
                  }
                  uint64_t v139 = (int)v139;
LABEL_120:
                  if (v139 != 28) {
                    goto LABEL_217;
                  }
                  sub_100435A9C(6, v48, v47, (uint64_t *)&v269);
                  uint64_t v142 = v269;
                  unint64_t v143 = v270;
                  sub_10001D010((uint64_t)&v271, (uint64_t)v251);
                  uint64_t v41 = v258;
                  uint64_t v144 = (char *)v258 + *(int *)(v266 + 20);
                  uint64_t v145 = v247;
                  unint64_t v146 = &v247[*(int *)(v127 + 28)];
                  uint64_t v147 = type metadata accessor for DateInterval();
                  (*(void (**)(char *, char *, uint64_t))(*(void *)(v147 - 8) + 16))(v146, v144, v147);
                  *uint64_t v145 = v142;
                  v145[1] = v143;
                  v145[2] = v256;
                  v145[3] = v50;
                  sub_100B310AC((uint64_t)v41, (uint64_t (*)(void))type metadata accessor for TimeBasedKey);
                  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)&v271);
                  uint64_t v148 = v245;
                  sub_100B30DB4((uint64_t)v145, v245, (uint64_t (*)(void))_s18ConnectionKeyGroupVMa);
                  sub_100B30DB4(v148, (uint64_t)v261, (uint64_t (*)(void))_s18ConnectionKeyGroupVMa);
                  uint64_t v126 = 0;
                  uint64_t v118 = v254;
                  uint64_t v119 = v252;
                  break;
                case 2uLL:
                  uint64_t v141 = *(void *)(v48 + 16);
                  uint64_t v140 = *(void *)(v48 + 24);
                  BOOL v64 = __OFSUB__(v140, v141);
                  uint64_t v139 = v140 - v141;
                  if (!v64) {
                    goto LABEL_120;
                  }
                  goto LABEL_197;
                case 3uLL:
                  uint64_t v241 = 0;
                  goto LABEL_274;
                default:
                  uint64_t v139 = BYTE6(v47);
                  goto LABEL_120;
              }
              break;
            case 2uLL:
              uint64_t v133 = *(void *)(v38 + 16);
              uint64_t v132 = *(void *)(v38 + 24);
              BOOL v64 = __OFSUB__(v132, v133);
              uint64_t v131 = v132 - v133;
              if (!v64) {
                goto LABEL_112;
              }
              goto LABEL_193;
            case 3uLL:
              uint64_t v239 = 0;
              goto LABEL_267;
            default:
              uint64_t v131 = BYTE6(v50);
              goto LABEL_112;
          }
        }
        (*(void (**)(void *, uint64_t, uint64_t, uint64_t))v257)(v261, v126, 1, v127);
        sub_100B310AC(v260, (uint64_t (*)(void))type metadata accessor for TimeBasedKey);
        int64_t v149 = v268;
        char v150 = swift_isUniquelyReferenced_nonNull_native();
        uint64_t v151 = v259;
        if ((v150 & 1) == 0)
        {
          sub_1000B7C44(0, v149[2] + 1, 1);
          int64_t v149 = v268;
        }
        uint64_t v120 = (uint64_t)v253;
        unint64_t v153 = v149[2];
        unint64_t v152 = v149[3];
        if (v153 >= v152 >> 1)
        {
          sub_1000B7C44(v152 > 1, v153 + 1, 1);
          uint64_t v120 = (uint64_t)v253;
          int64_t v149 = v268;
        }
        void v149[2] = v153 + 1;
        sub_10001D608(v120, (uint64_t)v149+ ((*(unsigned __int8 *)(v262 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v262 + 80))+ *(void *)(v262 + 72) * v153, &qword_10163A958);
        v117 += (uint64_t)v118;
        int64_t v115 = v151 - 1;
      }
      while (v115);
LABEL_165:
      swift_release();
      return v265;
    case 2u:
      uint64_t v243 = v272;
      *(void *)&long long v271 = _swiftEmptyArrayStorage;
      uint64_t v100 = *(void *)(v49 + 16);
      swift_bridgeObjectRetain();
      uint64_t v260 = v100;
      if (!v100)
      {
        uint64_t v112 = _swiftEmptyArrayStorage;
        goto LABEL_129;
      }
      uint64_t v52 = 0;
      unint64_t v50 = (unint64_t)_swiftEmptyArrayStorage;
      while (2)
      {
        if ((unint64_t)v52 < *(void *)(v49 + 16))
        {
          unint64_t v101 = (*(unsigned __int8 *)(v255 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v255 + 80);
          unint64_t v38 = *(void *)(v255 + 72);
          unint64_t v47 = v52 + 1;
          sub_100B30D0C(v49 + v101 + v38 * v52, (uint64_t)v17, (uint64_t (*)(void))_s18ConnectionKeyGroupVMa);
          unint64_t v48 = *v17;
          unint64_t v102 = v17[1];
          switch(v102 >> 62)
          {
            case 1uLL:
              LODWORD(v52) = 0;
              if ((uint64_t)v48 < 0x600000000 || (int)v48 > 5) {
                goto LABEL_173;
              }
              swift_retain();
              uint64_t v108 = __DataStorage._bytes.getter();
              if (!v108) {
                goto LABEL_234;
              }
              uint64_t v105 = v108;
              uint64_t v109 = __DataStorage._offset.getter();
              uint64_t v52 = 5 - v109;
              if (!__OFSUB__(5, v109)) {
                goto LABEL_90;
              }
              goto LABEL_175;
            case 2uLL:
              uint64_t v52 = *(void *)(v48 + 16);
              if (v52 > 5) {
                goto LABEL_171;
              }
              uint64_t v52 = *(void *)(v48 + 24);
              if (v52 < 6) {
                goto LABEL_174;
              }
              swift_retain();
              swift_retain();
              uint64_t v104 = __DataStorage._bytes.getter();
              if (!v104) {
                goto LABEL_235;
              }
              uint64_t v105 = v104;
              uint64_t v106 = __DataStorage._offset.getter();
              uint64_t v52 = 5 - v106;
              if (__OFSUB__(5, v106)) {
                goto LABEL_176;
              }
LABEL_90:
              int v103 = *(unsigned __int8 *)(v105 + v52);
LABEL_91:
              sub_10001CFB8(v48, v102);
              if (v103 == v261)
              {
                sub_100B30DB4((uint64_t)v17, (uint64_t)v251, (uint64_t (*)(void))_s18ConnectionKeyGroupVMa);
                if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
                  sub_1000B7C74(0, *(void *)(v50 + 16) + 1, 1);
                }
                unint64_t v50 = v271;
                unint64_t v111 = *(void *)(v271 + 16);
                unint64_t v110 = *(void *)(v271 + 24);
                unint64_t v48 = v111 + 1;
                uint64_t v49 = v265;
                if (v111 >= v110 >> 1)
                {
                  sub_1000B7C74(v110 > 1, v111 + 1, 1);
                  uint64_t v49 = v265;
                  unint64_t v50 = v271;
                }
                *(void *)(v50 + 16) = v48;
                sub_100B30DB4((uint64_t)v251, v50 + v101 + v111 * v38, (uint64_t (*)(void))_s18ConnectionKeyGroupVMa);
              }
              else
              {
                sub_100B310AC((uint64_t)v17, (uint64_t (*)(void))_s18ConnectionKeyGroupVMa);
                uint64_t v49 = v265;
              }
              uint64_t v52 = v47;
              if (v260 != v47) {
                continue;
              }
              uint64_t v112 = (void *)v271;
              break;
            case 3uLL:
              goto LABEL_233;
            default:
              LODWORD(v52) = 0;
              if ((v102 & 0xFE000000000000) < 0x5000000000001) {
                goto LABEL_172;
              }
              int v103 = BYTE5(v48);
              goto LABEL_91;
          }
LABEL_129:
          sub_1002F6A08(v49, v244, 2u);
          int64_t v154 = v112[2];
          unint64_t v155 = v256;
          if (v154)
          {
            *(void *)&long long v271 = _swiftEmptyArrayStorage;
            sub_1000B7C44(0, v154, 0);
            uint64_t v156 = *(unsigned __int8 *)(v255 + 80);
            uint64_t v261 = v112;
            uint64_t v157 = (uint64_t)v112 + ((v156 + 32) & ~v156);
            uint64_t v158 = *(void *)(v255 + 72);
            uint64_t v159 = (void (**)(unint64_t, uint64_t, uint64_t, uint64_t))(v259 + 56);
            uint64_t v160 = (void (**)(uint64_t, void, uint64_t, uint64_t))(v255 + 56);
            do
            {
              uint64_t v161 = v252;
              sub_100B30D0C(v157, (uint64_t)v252, (uint64_t (*)(void))_s18ConnectionKeyGroupVMa);
              unint64_t v162 = v155;
              uint64_t v163 = v155 + *(int *)(v264 + 48);
              (*v159)(v162, 1, 1, v266);
              sub_100B30D0C((uint64_t)v161, v163, (uint64_t (*)(void))_s18ConnectionKeyGroupVMa);
              (*v160)(v163, 0, 1, v263);
              sub_100B310AC((uint64_t)v161, (uint64_t (*)(void))_s18ConnectionKeyGroupVMa);
              uint64_t v164 = v271;
              if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
              {
                sub_1000B7C44(0, *(void *)(v164 + 16) + 1, 1);
                uint64_t v164 = v271;
              }
              unint64_t v166 = *(void *)(v164 + 16);
              unint64_t v165 = *(void *)(v164 + 24);
              if (v166 >= v165 >> 1)
              {
                sub_1000B7C44(v165 > 1, v166 + 1, 1);
                uint64_t v164 = v271;
              }
              *(void *)(v164 + 16) = v166 + 1;
              unint64_t v155 = v256;
              sub_10001D608(v256, v164+ ((*(unsigned __int8 *)(v262 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v262 + 80))+ *(void *)(v262 + 72) * v166, &qword_10163A958);
              v157 += v158;
              --v154;
            }
            while (v154);
            goto LABEL_165;
          }
LABEL_166:
          swift_release();
          return v49;
        }
        break;
      }
      __break(1u);
LABEL_169:
      __break(1u);
      goto LABEL_170;
    case 3u:
      return v49;
    default:
      uint64_t v243 = v272;
      uint64_t v269 = _swiftEmptyArrayStorage;
      unint64_t v50 = *(void *)(v271 + 16);
      swift_bridgeObjectRetain();
      unint64_t v253 = (char *)v50;
      if (!v50)
      {
        uint64_t v114 = _swiftEmptyArrayStorage;
        goto LABEL_138;
      }
      unint64_t v51 = 0;
      unint64_t v252 = _swiftEmptyArrayStorage;
      while (2)
      {
        uint64_t v52 = *(void *)(v49 + 16);
        if (v51 < v52)
        {
          unint64_t v47 = *(void *)(v259 + 72);
          unint64_t v256 = (*(unsigned __int8 *)(v259 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v259 + 80);
          unint64_t v53 = v51;
          sub_100B30D0C(v49 + v256 + v47 * v51, v38, (uint64_t (*)(void))type metadata accessor for TimeBasedKey);
          uint64_t v54 = v38;
          unint64_t v55 = v38 + *(int *)(v266 + 24);
          uint64_t v56 = *(void *)(v55 + 16);
          unint64_t v57 = *(void *)(v55 + 24);
          sub_1000361E0(v56, v57);
          uint64_t v58 = sub_100A948F8(v56, v57);
          if (v10)
          {
            uint64_t v260 = v10;
            static os_log_type_t.error.getter();
            if (qword_101636F48 != -1) {
              swift_once();
            }
            sub_10000588C((uint64_t *)&unk_10163AD00);
            uint64_t v217 = swift_allocObject();
            *(_OWORD *)(v217 + 16) = xmmword_101342130;
            *(void *)&long long v271 = v260;
            swift_errorRetain();
            sub_10000588C(&qword_101638D40);
            uint64_t v218 = String.init<A>(describing:)();
            uint64_t v220 = v219;
            *(void *)(v217 + 56) = &type metadata for String;
            *(void *)(v217 + 64) = sub_10000B4CC();
            *(void *)(v217 + 32) = v218;
            *(void *)(v217 + 40) = v220;
            os_log(_:dso:log:_:_:)();
            swift_bridgeObjectRelease();
            sub_100130148();
            uint64_t v221 = swift_allocError();
            *uint64_t v222 = 0;
            swift_willThrow();
            swift_errorRelease();
            unint64_t v48 = v57;
            uint64_t v223 = v56;
            goto LABEL_265;
          }
          uint64_t v59 = sub_100A90C58(v58, 0);
          uint64_t v260 = 0;
          unint64_t v38 = v59;
          unint64_t v48 = v60;
          unint64_t v50 = v53 + 1;
          CCECCryptorRelease();
          sub_10001CFB8(v56, v57);
          uint64_t v52 = v48 >> 62;
          switch(v48 >> 62)
          {
            case 1uLL:
              LODWORD(v61) = HIDWORD(v38) - v38;
              if (__OFSUB__(HIDWORD(v38), v38)) {
                goto LABEL_180;
              }
              uint64_t v61 = (int)v61;
LABEL_15:
              if (v61 != 28) {
                goto LABEL_205;
              }
              sub_1000361E0(v38, v48);
              uint64_t v65 = static MACAddress.length.getter();
              sub_100435A9C(v65, v38, v48, (uint64_t *)&v271);
              long long v66 = v271;
              switch(*((void *)&v271 + 1) >> 62)
              {
                case 1:
                  LODWORD(v52) = 0;
                  if ((uint64_t)v271 < 0x600000000 || (int)v271 > 5) {
                    goto LABEL_186;
                  }
                  uint64_t v71 = __DataStorage._bytes.getter();
                  if (!v71) {
                    goto LABEL_239;
                  }
                  uint64_t v69 = v71;
                  uint64_t v72 = __DataStorage._offset.getter();
                  uint64_t v52 = 5 - v72;
                  if (!__OFSUB__(5, v72)) {
                    goto LABEL_29;
                  }
                  goto LABEL_190;
                case 2:
                  uint64_t v52 = *(void *)(v271 + 16);
                  if (v52 > 5) {
                    goto LABEL_182;
                  }
                  uint64_t v52 = *(void *)(v271 + 24);
                  if (v52 < 6) {
                    goto LABEL_188;
                  }
                  uint64_t v68 = __DataStorage._bytes.getter();
                  if (!v68) {
                    goto LABEL_241;
                  }
                  uint64_t v69 = v68;
                  uint64_t v70 = __DataStorage._offset.getter();
                  uint64_t v52 = 5 - v70;
                  if (__OFSUB__(5, v70)) {
                    goto LABEL_192;
                  }
LABEL_29:
                  int v67 = *(unsigned __int8 *)(v69 + v52);
LABEL_30:
                  sub_10001CFB8(v66, *((unint64_t *)&v66 + 1));
                  sub_10001CFB8(v38, v48);
                  if (v67 == v261)
                  {
                    unint64_t v38 = v54;
                    sub_100B30DB4(v54, (uint64_t)v250, (uint64_t (*)(void))type metadata accessor for TimeBasedKey);
                    uint64_t v73 = v252;
                    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
                      sub_1000B7258(0, v73[2] + 1, 1);
                    }
                    uint64_t v74 = v269;
                    unint64_t v48 = v269[2];
                    unint64_t v75 = v269[3];
                    uint64_t v49 = v265;
                    uint64_t v10 = v260;
                    if (v48 >= v75 >> 1)
                    {
                      sub_1000B7258(v75 > 1, v48 + 1, 1);
                      uint64_t v49 = v265;
                      uint64_t v74 = v269;
                    }
                    v74[2] = v48 + 1;
                    unint64_t v252 = v74;
                    sub_100B30DB4((uint64_t)v250, (uint64_t)v74 + v256 + v48 * v47, (uint64_t (*)(void))type metadata accessor for TimeBasedKey);
                  }
                  else
                  {
                    unint64_t v38 = v54;
                    sub_100B310AC(v54, (uint64_t (*)(void))type metadata accessor for TimeBasedKey);
                    uint64_t v49 = v265;
                    uint64_t v10 = v260;
                  }
                  unint64_t v51 = v50;
                  if (v253 != (char *)v50) {
                    continue;
                  }
                  uint64_t v114 = v269;
                  break;
                case 3:
                  goto LABEL_237;
                default:
                  LODWORD(v52) = 0;
                  if ((*((void *)&v271 + 1) & 0xFE000000000000uLL) < 0x5000000000001) {
                    goto LABEL_184;
                  }
                  int v67 = BYTE5(v271);
                  goto LABEL_30;
              }
              break;
            case 2uLL:
              uint64_t v63 = *(void *)(v38 + 16);
              uint64_t v62 = *(void *)(v38 + 24);
              BOOL v64 = __OFSUB__(v62, v63);
              uint64_t v61 = v62 - v63;
              if (!v64) {
                goto LABEL_15;
              }
              goto LABEL_178;
            case 3uLL:
              uint64_t v238 = 0;
              goto LABEL_262;
            default:
              uint64_t v61 = BYTE6(v48);
              goto LABEL_15;
          }
LABEL_138:
          swift_bridgeObjectRelease();
          unint64_t v38 = v114[2];
          if (v38)
          {
            int64_t v268 = _swiftEmptyArrayStorage;
            sub_1000B7C44(0, v38, 0);
            unint64_t v167 = (*(unsigned __int8 *)(v259 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v259 + 80);
            unint64_t v250 = v114;
            uint64_t v168 = (uint64_t)v114 + v167;
            unint64_t v169 = *(char **)(v259 + 72);
            uint64_t v170 = (void *)(v259 + 56);
            uint64_t v251 = v248 + 32;
            unint64_t v256 = v255 + 56;
            uint64_t v171 = (uint64_t)v254;
            unint64_t v253 = v169;
            unint64_t v252 = (void *)(v259 + 56);
            while (1)
            {
              uint64_t v172 = v258;
              sub_100B30D0C(v168, (uint64_t)v258, (uint64_t (*)(void))type metadata accessor for TimeBasedKey);
              uint64_t v261 = (void *)(v171 + *(int *)(v264 + 48));
              sub_100B30D0C((uint64_t)v172, v171, (uint64_t (*)(void))type metadata accessor for TimeBasedKey);
              uint64_t v173 = v171;
              uint64_t v174 = v266;
              ((void (*)(uint64_t, void, uint64_t, uint64_t))*v170)(v173, 0, 1, v266);
              uint64_t v175 = (uint64_t)v172;
              uint64_t v176 = v257;
              sub_100B30D0C(v175, (uint64_t)v257, (uint64_t (*)(void))type metadata accessor for TimeBasedKey);
              uint64_t v177 = (uint64_t *)&v176[*(int *)(v174 + 24)];
              unint64_t v50 = v177[1];
              if (v50 >> 60 == 15)
              {
                sub_100B310AC((uint64_t)v176, (uint64_t (*)(void))type metadata accessor for TimeBasedKey);
                uint64_t v178 = 1;
                uint64_t v179 = v263;
              }
              else
              {
                unint64_t v180 = v38;
                uint64_t v181 = *v177;
                sub_1000361E0(*v177, v177[1]);
                unint64_t v47 = String.utf8Data.getter();
                unint64_t v48 = v182;
                sub_1000361E0(v181, v50);
                uint64_t v259 = sub_100A941DC(v181, v50, v47, v48, 32);
                uint64_t v184 = (void *)v10;
                if (v10)
                {
                  sub_10001CFB8(v47, v48);
                  sub_100037A24(v181, v50);
LABEL_272:
                  *(void *)&long long v271 = 0;
                  *((void *)&v271 + 1) = 0xE000000000000000;
                  _StringGuts.grow(_:)(35);
                  v231._object = (void *)0x80000001013FB8E0;
                  v231._uint64_t countAndFlagsBits = 0xD000000000000021;
                  String.append(_:)(v231);
                  uint64_t v269 = v184;
                  sub_10000588C(&qword_101638D40);
                  _print_unlocked<A, B>(_:_:)();
                  goto LABEL_278;
                }
                unint64_t v38 = v183;
                sub_100037A24(v181, v50);
                uint64_t v52 = v38 >> 62;
                unint64_t v255 = v38;
                switch(v38 >> 62)
                {
                  case 1uLL:
                    LODWORD(v185) = HIDWORD(v259) - v259;
                    if (__OFSUB__(HIDWORD(v259), v259)) {
                      goto LABEL_196;
                    }
                    uint64_t v185 = (int)v185;
LABEL_150:
                    if (v185 != 32) {
                      goto LABEL_213;
                    }
                    sub_10001CFB8(v47, v48);
                    sub_100037A24(v181, v50);
                    unint64_t v188 = *(void (**)(void, void, void, void))v257;
                    uint64_t v273 = &type metadata for PrimaryIndex;
                    unint64_t v274 = sub_1001A1640();
                    *(void *)&long long v271 = v188;
                    unint64_t v50 = v177[2];
                    unint64_t v189 = v177[3];
                    sub_1000361E0(v50, v189);
                    unint64_t v38 = v180;
                    uint64_t v190 = sub_100A948F8(v50, v189);
                    unint64_t v48 = sub_100A90C58(v190, 0);
                    unint64_t v47 = v191;
                    CCECCryptorRelease();
                    sub_10001CFB8(v50, v189);
                    uint64_t v52 = v47 >> 62;
                    uint64_t v260 = 0;
                    switch(v47 >> 62)
                    {
                      case 1uLL:
                        LODWORD(v192) = HIDWORD(v48) - v48;
                        if (__OFSUB__(HIDWORD(v48), v48)) {
                          goto LABEL_200;
                        }
                        uint64_t v192 = (int)v192;
LABEL_158:
                        uint64_t v195 = (uint64_t)v261;
                        if (v192 != 28) {
                          goto LABEL_221;
                        }
                        sub_100435A9C(6, v48, v47, (uint64_t *)&v269);
                        uint64_t v196 = v269;
                        unint64_t v197 = v270;
                        sub_10001D010((uint64_t)&v271, (uint64_t)v251);
                        unint64_t v198 = (void (**)(void, void, void, void))v257;
                        unint64_t v199 = &v257[*(int *)(v266 + 20)];
                        uint64_t v179 = v263;
                        uint64_t v200 = v248;
                        unint64_t v201 = &v248[*(int *)(v263 + 28)];
                        uint64_t v202 = type metadata accessor for DateInterval();
                        (*(void (**)(char *, char *, uint64_t))(*(void *)(v202 - 8) + 16))(v201, v199, v202);
                        *uint64_t v200 = v196;
                        v200[1] = v197;
                        unint64_t v203 = v255;
                        v200[2] = v259;
                        v200[3] = v203;
                        sub_100B310AC((uint64_t)v198, (uint64_t (*)(void))type metadata accessor for TimeBasedKey);
                        _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)&v271);
                        uint64_t v204 = v246;
                        sub_100B30DB4((uint64_t)v200, v246, (uint64_t (*)(void))_s18ConnectionKeyGroupVMa);
                        sub_100B30DB4(v204, v195, (uint64_t (*)(void))_s18ConnectionKeyGroupVMa);
                        uint64_t v178 = 0;
                        unint64_t v169 = v253;
                        uint64_t v170 = v252;
                        uint64_t v10 = v260;
                        break;
                      case 2uLL:
                        uint64_t v194 = *(void *)(v48 + 16);
                        uint64_t v193 = *(void *)(v48 + 24);
                        BOOL v64 = __OFSUB__(v193, v194);
                        uint64_t v192 = v193 - v194;
                        if (!v64) {
                          goto LABEL_158;
                        }
                        goto LABEL_198;
                      case 3uLL:
                        uint64_t v242 = 0;
                        goto LABEL_276;
                      default:
                        uint64_t v192 = BYTE6(v47);
                        goto LABEL_158;
                    }
                    break;
                  case 2uLL:
                    uint64_t v187 = *(void *)(v259 + 16);
                    uint64_t v186 = *(void *)(v259 + 24);
                    BOOL v64 = __OFSUB__(v186, v187);
                    uint64_t v185 = v186 - v187;
                    if (!v64) {
                      goto LABEL_150;
                    }
                    goto LABEL_194;
                  case 3uLL:
                    uint64_t v240 = 0;
                    goto LABEL_270;
                  default:
                    uint64_t v185 = BYTE6(v38);
                    goto LABEL_150;
                }
              }
              (*(void (**)(void *, uint64_t, uint64_t, uint64_t))v256)(v261, v178, 1, v179);
              sub_100B310AC((uint64_t)v258, (uint64_t (*)(void))type metadata accessor for TimeBasedKey);
              uint64_t v205 = v268;
              if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
              {
                sub_1000B7C44(0, v205[2] + 1, 1);
                uint64_t v205 = v268;
              }
              uint64_t v171 = (uint64_t)v254;
              unint64_t v207 = v205[2];
              unint64_t v206 = v205[3];
              if (v207 >= v206 >> 1)
              {
                sub_1000B7C44(v206 > 1, v207 + 1, 1);
                uint64_t v171 = (uint64_t)v254;
                uint64_t v205 = v268;
              }
              v205[2] = v207 + 1;
              sub_10001D608(v171, (uint64_t)v205+ ((*(unsigned __int8 *)(v262 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v262 + 80))+ *(void *)(v262 + 72) * v207, &qword_10163A958);
              v168 += (uint64_t)v169;
              if (!--v38) {
                goto LABEL_165;
              }
            }
          }
          goto LABEL_166;
        }
        break;
      }
LABEL_170:
      __break(1u);
LABEL_171:
      __break(1u);
LABEL_172:
      __break(1u);
LABEL_173:
      __break(1u);
LABEL_174:
      __break(1u);
LABEL_175:
      __break(1u);
LABEL_176:
      __break(1u);
LABEL_177:
      __break(1u);
LABEL_178:
      __break(1u);
LABEL_179:
      __break(1u);
LABEL_180:
      __break(1u);
LABEL_181:
      __break(1u);
LABEL_182:
      __break(1u);
LABEL_183:
      __break(1u);
LABEL_184:
      __break(1u);
LABEL_185:
      __break(1u);
LABEL_186:
      __break(1u);
LABEL_187:
      __break(1u);
LABEL_188:
      __break(1u);
LABEL_189:
      __break(1u);
LABEL_190:
      __break(1u);
LABEL_191:
      __break(1u);
LABEL_192:
      __break(1u);
LABEL_193:
      __break(1u);
LABEL_194:
      __break(1u);
LABEL_195:
      __break(1u);
LABEL_196:
      __break(1u);
LABEL_197:
      __break(1u);
LABEL_198:
      __break(1u);
LABEL_199:
      __break(1u);
LABEL_200:
      __break(1u);
LABEL_201:
      if (v52 != 1) {
        goto LABEL_225;
      }
      LODWORD(v52) = HIDWORD(v47) - v47;
      if (!__OFSUB__(HIDWORD(v47), v47))
      {
        while (1)
        {
          uint64_t v210 = (int)v52;
LABEL_264:
          sub_10013019C();
          uint64_t v221 = swift_allocError();
          *(void *)uint64_t v225 = 28;
          *(void *)(v225 + 8) = v210;
          *(unsigned char *)(v225 + 16) = 0;
          swift_willThrow();
          uint64_t v223 = v47;
LABEL_265:
          sub_10001CFB8(v223, v48);
          *(void *)&long long v271 = 0;
          *((void *)&v271 + 1) = 0xE000000000000000;
          _StringGuts.grow(_:)(35);
          v226._object = (void *)0x80000001013F3B70;
          v226._uint64_t countAndFlagsBits = 0xD000000000000021;
          String.append(_:)(v226);
          int64_t v268 = (void *)v221;
          sub_10000588C(&qword_101638D40);
          _print_unlocked<A, B>(_:_:)();
LABEL_278:
          _assertionFailure(_:_:file:line:flags:)();
          __break(1u);
        }
      }
      __break(1u);
LABEL_205:
      if (v52 != 1) {
        goto LABEL_229;
      }
      LODWORD(v52) = HIDWORD(v38) - v38;
      if (!__OFSUB__(HIDWORD(v38), v38))
      {
        uint64_t v238 = (int)v52;
LABEL_262:
        sub_10013019C();
        uint64_t v221 = swift_allocError();
        *(void *)uint64_t v224 = 28;
        *(void *)(v224 + 8) = v238;
        *(unsigned char *)(v224 + 16) = 0;
        swift_willThrow();
        uint64_t v223 = v38;
        goto LABEL_265;
      }
      __break(1u);
LABEL_209:
      if (v52 != 1) {
        goto LABEL_242;
      }
      LODWORD(v52) = HIDWORD(v38) - v38;
      if (!__OFSUB__(HIDWORD(v38), v38))
      {
        uint64_t v239 = (int)v52;
LABEL_267:
        sub_10013019C();
        uint64_t v184 = (void *)swift_allocError();
        *(void *)uint64_t v227 = 32;
        *(void *)(v227 + 8) = v239;
        *(unsigned char *)(v227 + 16) = 0;
        swift_willThrow();
        uint64_t v228 = v38;
        unint64_t v229 = v50;
LABEL_271:
        sub_10001CFB8(v228, v229);
        sub_10001CFB8(v47, v48);
        goto LABEL_272;
      }
      __break(1u);
LABEL_213:
      if (v52 != 1) {
        goto LABEL_246;
      }
      LODWORD(v52) = HIDWORD(v259) - v259;
      if (!__OFSUB__(HIDWORD(v259), v259))
      {
        uint64_t v240 = (int)v52;
LABEL_270:
        sub_10013019C();
        uint64_t v184 = (void *)swift_allocError();
        *(void *)uint64_t v230 = 32;
        *(void *)(v230 + 8) = v240;
        *(unsigned char *)(v230 + 16) = 0;
        swift_willThrow();
        uint64_t v228 = v259;
        unint64_t v229 = v255;
        goto LABEL_271;
      }
      __break(1u);
LABEL_217:
      if (v52 != 1) {
        goto LABEL_250;
      }
      LODWORD(v52) = HIDWORD(v48) - v48;
      if (!__OFSUB__(HIDWORD(v48), v48))
      {
        uint64_t v241 = (int)v52;
LABEL_274:
        sub_10013019C();
        uint64_t v232 = swift_allocError();
        *(void *)uint64_t v233 = 28;
        *(void *)(v233 + 8) = v241;
        *(unsigned char *)(v233 + 16) = 0;
        swift_willThrow();
        sub_10001CFB8(v48, v47);
        uint64_t v269 = 0;
        unint64_t v270 = 0xE000000000000000;
        _StringGuts.grow(_:)(35);
        v234._object = (void *)0x80000001013F3B70;
        v234._uint64_t countAndFlagsBits = 0xD000000000000021;
        String.append(_:)(v234);
        uint64_t v267 = v232;
LABEL_277:
        sub_10000588C(&qword_101638D40);
        _print_unlocked<A, B>(_:_:)();
        goto LABEL_278;
      }
      __break(1u);
LABEL_221:
      if (v52 != 1) {
        goto LABEL_254;
      }
      LODWORD(v52) = HIDWORD(v48) - v48;
      if (__OFSUB__(HIDWORD(v48), v48))
      {
        __break(1u);
LABEL_225:
        if (v52 != 2)
        {
          uint64_t v210 = BYTE6(v48);
          goto LABEL_264;
        }
        uint64_t v209 = *(void *)(v47 + 16);
        uint64_t v52 = *(void *)(v47 + 24);
        uint64_t v210 = v52 - v209;
        if (!__OFSUB__(v52, v209)) {
          goto LABEL_264;
        }
        __break(1u);
LABEL_229:
        if (v52 != 2)
        {
          uint64_t v238 = BYTE6(v48);
          goto LABEL_262;
        }
        uint64_t v211 = *(void *)(v38 + 16);
        uint64_t v52 = *(void *)(v38 + 24);
        uint64_t v238 = v52 - v211;
        if (!__OFSUB__(v52, v211)) {
          goto LABEL_262;
        }
        __break(1u);
LABEL_233:
        __break(1u);
LABEL_234:
        __break(1u);
LABEL_235:
        __break(1u);
LABEL_236:
        __break(1u);
LABEL_237:
        __break(1u);
LABEL_238:
        __break(1u);
LABEL_239:
        __break(1u);
LABEL_240:
        __break(1u);
LABEL_241:
        __break(1u);
LABEL_242:
        if (v52 != 2)
        {
          uint64_t v239 = BYTE6(v50);
          goto LABEL_267;
        }
        uint64_t v212 = *(void *)(v38 + 16);
        uint64_t v52 = *(void *)(v38 + 24);
        uint64_t v239 = v52 - v212;
        if (!__OFSUB__(v52, v212)) {
          goto LABEL_267;
        }
        __break(1u);
LABEL_246:
        if (v52 != 2)
        {
          uint64_t v240 = BYTE6(v255);
          goto LABEL_270;
        }
        uint64_t v213 = *(void *)(v259 + 16);
        uint64_t v52 = *(void *)(v259 + 24);
        uint64_t v240 = v52 - v213;
        if (!__OFSUB__(v52, v213)) {
          goto LABEL_270;
        }
        __break(1u);
LABEL_250:
        if (v52 != 2)
        {
          uint64_t v241 = BYTE6(v47);
          goto LABEL_274;
        }
        uint64_t v214 = *(void *)(v48 + 16);
        uint64_t v52 = *(void *)(v48 + 24);
        uint64_t v241 = v52 - v214;
        if (!__OFSUB__(v52, v214)) {
          goto LABEL_274;
        }
        __break(1u);
LABEL_254:
        if (v52 == 2)
        {
          uint64_t v216 = *(void *)(v48 + 16);
          uint64_t v215 = *(void *)(v48 + 24);
          uint64_t v242 = v215 - v216;
          if (__OFSUB__(v215, v216)) {
            __break(1u);
          }
        }
        else
        {
          uint64_t v242 = BYTE6(v47);
        }
      }
      else
      {
        uint64_t v242 = (int)v52;
      }
LABEL_276:
      sub_10013019C();
      uint64_t v235 = swift_allocError();
      *(void *)uint64_t v236 = 28;
      *(void *)(v236 + 8) = v242;
      *(unsigned char *)(v236 + 16) = 0;
      swift_willThrow();
      sub_10001CFB8(v48, v47);
      uint64_t v269 = 0;
      unint64_t v270 = 0xE000000000000000;
      _StringGuts.grow(_:)(35);
      v237._object = (void *)0x80000001013F3B70;
      v237._uint64_t countAndFlagsBits = 0xD000000000000021;
      String.append(_:)(v237);
      uint64_t v267 = v235;
      goto LABEL_277;
  }
}

uint64_t sub_100B0B39C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, char a6)
{
  *(unsigned char *)(v6 + 104) = a6;
  *(void *)(v6 + 48) = a4;
  *(void *)(v6 + 56) = a5;
  *(void *)(v6 + 32) = a2;
  *(void *)(v6 + 40) = a3;
  *(void *)(v6 + 24) = a1;
  return _swift_task_switch(sub_100B0B3C8, 0, 0);
}

uint64_t sub_100B0B3C8()
{
  type metadata accessor for BeaconKeyManager(0);
  OSAllocatedUnfairLock.callAsFunction<A>(_:)();
  *(void *)(v0 + 64) = *(void *)(v0 + 16);
  uint64_t v1 = (void *)swift_task_alloc();
  *(void *)(v0 + 72) = v1;
  *uint64_t v1 = v0;
  v1[1] = sub_100B0B4D0;
  char v2 = *(unsigned char *)(v0 + 104);
  uint64_t v3 = *(void *)(v0 + 48);
  uint64_t v4 = *(void *)(v0 + 56);
  uint64_t v5 = *(void *)(v0 + 40);
  return sub_1006D8A68(v5, v3, v4, 0, v2, 0);
}

uint64_t sub_100B0B4D0(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t v8 = *v4;
  *(void *)(*v4 + 80) = v3;
  swift_task_dealloc();
  if (v3)
  {
    uint64_t v9 = sub_100B0B640;
  }
  else
  {
    swift_release();
    *(unsigned char *)(v8 + 105) = a3;
    *(void *)(v8 + 88) = a2;
    *(void *)(v8 + 96) = a1;
    uint64_t v9 = sub_100B0B614;
  }
  return _swift_task_switch(v9, 0, 0);
}

uint64_t sub_100B0B614()
{
  __int8 v1 = *(unsigned char *)(v0 + 105);
  char v2 = *(int8x16_t **)(v0 + 24);
  *char v2 = vextq_s8(*(int8x16_t *)(v0 + 88), *(int8x16_t *)(v0 + 88), 8uLL);
  v2[1].i8[0] = v1;
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100B0B640()
{
  swift_release();
  swift_errorRelease();
  uint64_t v1 = *(void *)(v0 + 24);
  *(void *)uint64_t v1 = 0;
  *(void *)(v1 + 8) = 0;
  *(unsigned char *)(v1 + 16) = 3;
  char v2 = *(uint64_t (**)(void))(v0 + 8);
  return v2();
}

uint64_t sub_100B0B6BC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v19 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  uint64_t v10 = (char *)&v17 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v18 = type metadata accessor for DispatchQoS();
  uint64_t v11 = *(void *)(v18 - 8);
  __chkstk_darwin(v18);
  uint64_t v13 = (char *)&v17 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v17 = *(void *)(a2 + 64);
  uint64_t v14 = (void *)swift_allocObject();
  void v14[2] = a1;
  v14[3] = a2;
  v14[4] = a3;
  v14[5] = a4;
  aBlock[4] = sub_100B5FE74;
  void aBlock[5] = v14;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_1004B5480;
  aBlock[3] = &unk_1015E96E0;
  uint64_t v15 = _Block_copy(aBlock);
  swift_retain();
  swift_retain();
  sub_1000BD0E8(a3);
  static DispatchQoS.unspecified.getter();
  void aBlock[7] = _swiftEmptyArrayStorage;
  sub_100B22DA4((unint64_t *)&qword_10163B7E0, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
  sub_10000588C((uint64_t *)&unk_10163F350);
  sub_100062734((unint64_t *)&qword_10163B7F0, (uint64_t *)&unk_10163F350);
  dispatch thunk of SetAlgebra.init<A>(_:)();
  OS_dispatch_queue.async(group:qos:flags:execute:)();
  _Block_release(v15);
  (*(void (**)(char *, uint64_t))(v19 + 8))(v10, v8);
  (*(void (**)(char *, uint64_t))(v11 + 8))(v13, v18);
  return swift_release();
}

uint64_t sub_100B0B9AC(uint64_t a1, uint64_t a2, uint64_t (*a3)(uint64_t))
{
  Transaction.capture()();
  static os_log_type_t.default.getter();
  if (qword_101637260 != -1) {
    swift_once();
  }
  os_log(_:dso:log:_:_:)();
  sub_100AA3034();
  sub_100AB24F0();
  sub_10100AC74();
  swift_release();
  static os_log_type_t.default.getter();
  uint64_t result = os_log(_:dso:log:_:_:)();
  if (a3) {
    return a3(result);
  }
  return result;
}

uint64_t sub_100B0BAC8(uint64_t a1, uint64_t (*a2)(void), uint64_t a3, void *a4, int a5, int a6)
{
  int v264 = a6;
  int v289 = a5;
  uint64_t v298 = a4;
  uint64_t v331 = a2;
  uint64_t v336 = a1;
  uint64_t v302 = type metadata accessor for OwnedDeviceKeyRecord();
  uint64_t v300 = *(void *)(v302 - 8);
  uint64_t v7 = __chkstk_darwin(v302);
  uint64_t v297 = (uint64_t)&v260 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v7);
  int64_t v268 = (char *)&v260 - v9;
  uint64_t v10 = sub_10000588C((uint64_t *)&unk_101660670);
  __chkstk_darwin(v10 - 8);
  uint64_t v279 = (uint64_t)&v260 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = sub_10000588C((uint64_t *)&unk_101653C90);
  __chkstk_darwin(v12 - 8);
  unint64_t v276 = (char *)&v260 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v284 = sub_10000588C(&qword_101660680);
  uint64_t v278 = *(void *)(v284 - 8);
  uint64_t v14 = __chkstk_darwin(v284);
  uint64_t v273 = (char *)&v260 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v14);
  uint64_t v275 = (uint64_t)&v260 - v16;
  uint64_t v17 = sub_10000588C((uint64_t *)&unk_101660A60);
  uint64_t v18 = __chkstk_darwin(v17 - 8);
  unint64_t v274 = (char *)&v260 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v18);
  uint64_t v277 = (uint64_t)&v260 - v20;
  uint64_t v21 = sub_10000588C(&qword_10163BB20);
  __chkstk_darwin(v21 - 8);
  uint64_t v266 = (uint64_t)&v260 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v270 = type metadata accessor for OwnedBeaconGroup(0);
  uint64_t v265 = *(void *)(v270 - 8);
  uint64_t v23 = __chkstk_darwin(v270);
  uint64_t v263 = (uint64_t)&v260 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v25 = __chkstk_darwin(v23);
  uint64_t v262 = (uint64_t)&v260 - v26;
  uint64_t v261 = v27;
  __chkstk_darwin(v25);
  uint64_t v267 = (uint64_t)&v260 - v28;
  uint64_t v29 = sub_10000588C(&qword_101638CF0);
  __chkstk_darwin(v29 - 8);
  uint64_t v296 = (char *)&v260 - ((v30 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v31 = sub_10000588C(&qword_10163B9F0);
  uint64_t v32 = __chkstk_darwin(v31 - 8);
  uint64_t v283 = (char *)&v260 - ((v33 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v32);
  unint64_t v282 = (char *)&v260 - v34;
  uint64_t v293 = type metadata accessor for OwnedBeaconRecord();
  uint64_t v292 = *(void *)(v293 - 8);
  uint64_t v35 = __chkstk_darwin(v293);
  uint64_t v285 = (uint64_t)&v260 - ((v36 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v35);
  uint64_t v280 = (uint64_t)&v260 - v37;
  uint64_t v322 = type metadata accessor for DispatchQoS();
  uint64_t v305 = *(void (***)(char *, uint64_t))(v322 - 8);
  __chkstk_darwin(v322);
  unint64_t v321 = (char *)&v260 - ((v38 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v286 = type metadata accessor for SafeLocation();
  uint64_t v304 = *(uint64_t (***)(uint64_t))(v286 - 8);
  __chkstk_darwin(v286);
  uint64_t v325 = (char *)&v260 - ((v39 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v294 = type metadata accessor for URL();
  uint64_t v291 = *(void *)(v294 - 8);
  uint64_t v40 = __chkstk_darwin(v294);
  long long v271 = (char *)&v260 - ((v41 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v42 = __chkstk_darwin(v40);
  unsigned __int8 v272 = (char *)&v260 - v43;
  __chkstk_darwin(v42);
  unint64_t v290 = (char *)&v260 - v44;
  uint64_t v45 = sub_10000588C(&qword_10163BB80);
  __chkstk_darwin(v45 - 8);
  uint64_t v312 = (uint64_t)&v260 - ((v46 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v314 = type metadata accessor for KeyAlignmentRecord();
  uint64_t v311 = *(void *)(v314 - 8);
  uint64_t v47 = __chkstk_darwin(v314);
  uint64_t v287 = (uint64_t)&v260 - ((v48 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v47);
  uint64_t v288 = (uint64_t)&v260 - v49;
  unint64_t v308 = sub_10000588C(&qword_10163B9E0);
  __chkstk_darwin(v308);
  unint64_t v309 = (char *)&v260 - ((v50 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v313 = type metadata accessor for BeaconNamingRecord();
  unint64_t v307 = *(void *)(v313 - 8);
  uint64_t v51 = __chkstk_darwin(v313);
  uint64_t v281 = (uint64_t)&v260 - ((v52 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v51);
  uint64_t v310 = (uint64_t)&v260 - v53;
  uint64_t v334 = type metadata accessor for UUID();
  uint64_t v303 = *(void *)(v334 - 8);
  uint64_t v54 = __chkstk_darwin(v334);
  uint64_t v299 = (char *)&v260 - ((v55 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v56 = __chkstk_darwin(v54);
  uint64_t v269 = (char *)&v260 - v57;
  uint64_t v58 = __chkstk_darwin(v56);
  unint64_t v60 = (char *)&v260 - v59;
  uint64_t v61 = __chkstk_darwin(v58);
  Swift::String v315 = (char *)&v260 - v62;
  uint64_t v301 = v63;
  __chkstk_darwin(v61);
  uint64_t v333 = (char *)&v260 - v64;
  uint64_t v335 = (void (*)(void))type metadata accessor for BeaconEstimatedLocation();
  *(void *)&long long v327 = *((void *)v335 - 1);
  uint64_t v65 = __chkstk_darwin(v335);
  uint64_t v330 = (uint64_t)&v260 - ((v66 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v65);
  uint64_t v68 = (char *)&v260 - v67;
  uint64_t v69 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v70 = *(void *)(v69 - 8);
  __chkstk_darwin(v69);
  uint64_t v72 = (char *)&v260 - ((v71 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_101636CB8 != -1) {
    swift_once();
  }
  uint64_t v73 = qword_10170E330;
  uint64_t v74 = static DispatchWorkItemFlags.barrier.getter();
  __chkstk_darwin(v74);
  *(&v260 - 4) = v73;
  unint64_t v75 = v331;
  *(&v260 - 3) = (uint64_t)v331;
  *(&v260 - 2) = (uint64_t)sub_1000054FC;
  *(&v260 - 1) = 0;
  unint64_t v76 = v329;
  OS_dispatch_queue.sync<A>(flags:execute:)();
  uint64_t v306 = v76;
  unint64_t v77 = *(void (**)(void, void))(v70 + 8);
  uint64_t v318 = v72;
  uint64_t v317 = v77;
  v77(v72, v69);
  uint64_t v78 = *(void *)(a3 + 160);
  uint64_t v79 = (uint64_t)v75;
  unint64_t v80 = (void *)(v70 + 8);
  if (qword_101637030 != -1) {
    swift_once();
  }
  sub_100010324(v294, (uint64_t)qword_10170EB70);
  uint64_t v81 = sub_100B1EB4C();
  uint64_t v82 = *((void *)v81 + 2);
  uint64_t v332 = a3;
  unint64_t v326 = v60;
  uint64_t v295 = v78;
  uint64_t v83 = v298;
  uint64_t v320 = (void (**)(void, void, void))v69;
  uint64_t v319 = v80;
  if (!v82) {
    goto LABEL_13;
  }
  unint64_t v84 = sub_1007240CC(v79);
  if ((v85 & 1) == 0) {
    goto LABEL_13;
  }
  uint64_t v260 = *(void *)(*((void *)v81 + 7) + 8 * v84);
  uint64_t v86 = v260;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v329 = (void (*)(void))sub_10000588C((uint64_t *)&unk_10163AD00);
  uint64_t v87 = swift_allocObject();
  *(_OWORD *)(v87 + 16) = xmmword_101347BA0;
  uint64_t v88 = *(void *)(v86 + 16);
  *(void *)(v87 + 56) = &type metadata for Int;
  *(void *)(v87 + 64) = &protocol witness table for Int;
  *(void *)(v87 + 32) = v88;
  uint64_t v89 = UUID.uuidString.getter();
  uint64_t v91 = v90;
  *(void *)(v87 + 96) = &type metadata for String;
  unint64_t v328 = sub_10000B4CC();
  *(void *)(v87 + 104) = v328;
  *(void *)(v87 + 72) = v89;
  *(void *)(v87 + 80) = v91;
  sub_10001D4B0(0, (unint64_t *)&qword_10163AE70);
  uint64_t v92 = (void *)static OS_os_log.default.getter();
  static os_log_type_t.default.getter();
  os_log(_:dso:log:type:_:)();
  swift_bridgeObjectRelease();

  uint64_t v93 = *(void *)(v260 + 16);
  if (v93)
  {
    uint64_t v94 = v260 + ((*(unsigned __int8 *)(v327 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v327 + 80));
    *(void *)&long long v327 = *(void *)(v327 + 72);
    uint64_t v324 = v303 + 16;
    uint64_t v323 = (void (*)(char *, uint64_t))(v303 + 32);
    long long v316 = xmmword_101342130;
    uint64_t v95 = v303;
    do
    {
      sub_100B30D0C(v94, (uint64_t)v68, (uint64_t (*)(void))type metadata accessor for BeaconEstimatedLocation);
      uint64_t v96 = v333;
      uint64_t v97 = v334;
      (*(void (**)(char *, uint64_t (*)(void), uint64_t))(v95 + 16))(v333, v331, v334);
      unint64_t v98 = (*(unsigned __int8 *)(v95 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v95 + 80);
      uint64_t v99 = swift_allocObject();
      *(void *)(v99 + 16) = v336;
      (*(void (**)(unint64_t, char *, uint64_t))(v95 + 32))(v99 + v98, v96, v97);
      swift_retain();
      static os_log_type_t.default.getter();
      if (qword_101637260 != -1) {
        swift_once();
      }
      uint64_t v100 = swift_allocObject();
      *(_OWORD *)(v100 + 16) = v316;
      sub_100B30D0C((uint64_t)v68, v330, (uint64_t (*)(void))type metadata accessor for BeaconEstimatedLocation);
      uint64_t v101 = String.init<A>(describing:)();
      unint64_t v102 = v328;
      *(void *)(v100 + 56) = &type metadata for String;
      *(void *)(v100 + 64) = v102;
      *(void *)(v100 + 32) = v101;
      *(void *)(v100 + 40) = v103;
      os_log(_:dso:log:_:_:)();
      swift_bridgeObjectRelease();
      swift_retain();
      a3 = v332;
      sub_100B4EF7C((uint64_t)v68, v332, (void (*)(void))sub_100B52180, v99);
      swift_release_n();
      sub_100B310AC((uint64_t)v68, (uint64_t (*)(void))type metadata accessor for BeaconEstimatedLocation);
      v94 += v327;
      --v93;
    }
    while (v93);
    swift_bridgeObjectRelease();
    uint64_t v83 = v298;
    uint64_t v190 = v334;
  }
  else
  {
LABEL_13:
    swift_bridgeObjectRelease();
    uint64_t v190 = v334;
  }
  uint64_t v104 = (uint64_t)v296;
  uint64_t v105 = v83[3];
  uint64_t v106 = v83[4];
  sub_10001CD44(v83, v105);
  uint64_t v107 = v315;
  uint64_t v108 = (*(uint64_t (**)(uint64_t))(*(void *)(*(void *)(v106 + 8) + 8) + 32))(v105);
  __chkstk_darwin(v108);
  *(&v260 - 2) = a3;
  *(&v260 - 1) = (uint64_t)v107;
  uint64_t v109 = (uint64_t (*)(char))v336;
  swift_retain_n();
  unint64_t v110 = v309;
  unint64_t v111 = v306;
  QueueSynchronizer.conditionalSync<A>(_:)();
  uint64_t v335 = v111;
  uint64_t v112 = (uint64_t)v110;
  int v113 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v307 + 48))(v110, 1, v313);
  uint64_t v114 = v303;
  if (v113 == 1)
  {
    sub_10001DAB4(v112, &qword_10163B9E0);
    Transaction.capture()();
    static os_log_type_t.error.getter();
    if (qword_101637260 != -1) {
      swift_once();
    }
    os_log(_:dso:log:_:_:)();
    int64_t v115 = v315;
    uint64_t v116 = v114;
  }
  else
  {
    sub_100B30DB4(v112, v310, (uint64_t (*)(void))type metadata accessor for BeaconNamingRecord);
    uint64_t v117 = v333;
    (*(void (**)(char *, char *, uint64_t))(v114 + 16))(v333, v107, v190);
    unint64_t v118 = (*(unsigned __int8 *)(v114 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v114 + 80);
    unint64_t v119 = (v301 + v118 + 7) & 0xFFFFFFFFFFFFFFF8;
    uint64_t v120 = swift_allocObject();
    *(void *)(v120 + 16) = a3;
    (*(void (**)(unint64_t, char *, uint64_t))(v114 + 32))(v120 + v118, v117, v190);
    uint64_t v121 = (uint64_t (**)(char))(v120 + v119);
    *uint64_t v121 = sub_100B5168C;
    v121[1] = v109;
    swift_retain();
    swift_retain();
    static os_log_type_t.default.getter();
    uint64_t v116 = v114;
    if (qword_101637260 != -1) {
      swift_once();
    }
    sub_10000588C((uint64_t *)&unk_10163AD00);
    uint64_t v122 = swift_allocObject();
    *(_OWORD *)(v122 + 16) = xmmword_101342130;
    uint64_t v123 = v310;
    sub_100B30D0C(v310, v281, (uint64_t (*)(void))type metadata accessor for BeaconNamingRecord);
    uint64_t v124 = String.init<A>(describing:)();
    uint64_t v126 = v125;
    *(void *)(v122 + 56) = &type metadata for String;
    *(void *)(v122 + 64) = sub_10000B4CC();
    *(void *)(v122 + 32) = v124;
    *(void *)(v122 + 40) = v126;
    os_log(_:dso:log:_:_:)();
    swift_bridgeObjectRelease();
    swift_retain();
    sub_100B416AC(v123, a3, (void (*)(void))sub_100B51FC0, v120);
    swift_release_n();
    sub_100B310AC(v123, (uint64_t (*)(void))type metadata accessor for BeaconNamingRecord);
    uint64_t v190 = v334;
    uint64_t v104 = (uint64_t)v296;
    int64_t v115 = v315;
  }
  uint64_t v127 = v298;
  uint64_t v128 = v336;
  swift_release_n();
  unint64_t v129 = *(void (**)(char *, uint64_t))(v116 + 8);
  uint64_t v324 = v116 + 8;
  uint64_t v323 = v129;
  v129(v115, v190);
  uint64_t v130 = v312;
  sub_100B6C53C(v312);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v311 + 48))(v130, 1, v314) == 1)
  {
    sub_10001DAB4(v130, &qword_10163BB80);
  }
  else
  {
    uint64_t v131 = v116;
    uint64_t v132 = v288;
    sub_100B30DB4(v130, v288, (uint64_t (*)(void))type metadata accessor for KeyAlignmentRecord);
    swift_retain();
    static os_log_type_t.default.getter();
    if (qword_101637260 != -1) {
      swift_once();
    }
    sub_10000588C((uint64_t *)&unk_10163AD00);
    uint64_t v133 = swift_allocObject();
    *(_OWORD *)(v133 + 16) = xmmword_101342130;
    sub_100B30D0C(v132, v287, (uint64_t (*)(void))type metadata accessor for KeyAlignmentRecord);
    uint64_t v134 = String.init<A>(describing:)();
    uint64_t v136 = v135;
    *(void *)(v133 + 56) = &type metadata for String;
    *(void *)(v133 + 64) = sub_10000B4CC();
    *(void *)(v133 + 32) = v134;
    *(void *)(v133 + 40) = v136;
    os_log(_:dso:log:_:_:)();
    swift_bridgeObjectRelease();
    swift_retain();
    sub_100B4DE54(v132, a3, (void (*)(void))sub_100B51EA8, v128);
    swift_release_n();
    sub_100B310AC(v132, (uint64_t (*)(void))type metadata accessor for KeyAlignmentRecord);
    uint64_t v190 = v334;
    uint64_t v104 = (uint64_t)v296;
    uint64_t v116 = v131;
    uint64_t v127 = v298;
  }
  uint64_t v137 = v127[3];
  uint64_t v138 = v127[4];
  sub_10001CD44(v127, v137);
  if ((*(uint64_t (**)(uint64_t, uint64_t))(v138 + 104))(v137, v138))
  {
    if (qword_101636D10 != -1) {
      swift_once();
    }
    uint64_t v139 = v294;
    uint64_t v140 = sub_100010324(v294, (uint64_t)qword_10170E3E8);
    uint64_t v141 = v291;
    uint64_t v142 = v290;
    uint64_t v143 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v291 + 16))(v290, v140, v139);
    __chkstk_darwin(v143);
    uint64_t v144 = v331;
    *(&v260 - 4) = v145;
    *(&v260 - 3) = (uint64_t)v144;
    *(&v260 - 2) = (uint64_t)v142;
    unint64_t v146 = v335;
    OS_dispatch_queue.sync<A>(execute:)();
    uint64_t v335 = v146;
    char v147 = aBlock;
    (*(void (**)(char *, uint64_t))(v141 + 8))(v142, v139);
    static os_log_type_t.info.getter();
    if (qword_101637308 != -1) {
      swift_once();
    }
    sub_10000588C((uint64_t *)&unk_10163AD00);
    uint64_t v148 = swift_allocObject();
    *(_OWORD *)(v148 + 16) = xmmword_101342130;
    *(void *)(v148 + 56) = &type metadata for Bool;
    *(void *)(v148 + 64) = &protocol witness table for Bool;
    *(unsigned char *)(v148 + 32) = v147;
    os_log(_:dso:log:_:_:)();
    swift_bridgeObjectRelease();
    uint64_t v190 = v334;
    uint64_t v127 = v298;
    uint64_t v104 = (uint64_t)v296;
  }
  uint64_t v149 = sub_10000588C(&qword_10163BC50);
  uint64_t v150 = *(void *)(v116 + 72);
  uint64_t v151 = v116;
  uint64_t v152 = *(unsigned __int8 *)(v116 + 80);
  uint64_t v287 = ~v152;
  uint64_t v153 = (v152 + 32) & ~v152;
  *(void *)&long long v316 = v149;
  uint64_t v314 = v153 + v150;
  unint64_t v328 = v152 | 7;
  uint64_t v154 = swift_allocObject();
  long long v327 = xmmword_101342130;
  *(_OWORD *)(v154 + 16) = xmmword_101342130;
  Swift::String v315 = (char *)v153;
  uint64_t v155 = v151 + 16;
  uint64_t v156 = *(void (**)(void))(v151 + 16);
  uint64_t v157 = v331;
  uint64_t v329 = v156;
  uint64_t v330 = v155;
  ((void (*)(uint64_t, uint64_t (*)(void), uint64_t))v156)(v154 + v153, v331, v190);
  uint64_t v158 = v336;
  swift_retain();
  sub_100A07010(v154, (uint64_t)sub_100B516B8, v158);
  swift_bridgeObjectRelease();
  swift_release();
  uint64_t v159 = sub_100B6C090();
  __chkstk_darwin(v159);
  *(&v260 - 2) = (uint64_t)v157;
  uint64_t v160 = v335;
  uint64_t v162 = sub_1000A4684((uint64_t (*)(char *))sub_100B516E4, &v260 - 4, v161);
  uint64_t v163 = (uint64_t)v160;
  uint64_t v164 = *(void (**)(void))(v162 + 16);
  uint64_t v281 = v152;
  if (v164)
  {
    uint64_t v288 = (uint64_t)v160;
    uint64_t v165 = (uint64_t)v325;
    uint64_t v313 = (uint64_t)&v325[*(int *)(v286 + 20)];
    uint64_t v312 = *(void *)(a3 + 88);
    unint64_t v166 = (*((unsigned __int8 *)v304 + 80) + 32) & ~(unint64_t)*((unsigned __int8 *)v304 + 80);
    uint64_t v286 = v162;
    uint64_t v167 = v162 + v166;
    uint64_t v311 = (v152 + 24) & v287;
    uint64_t v310 = (uint64_t)v304[9];
    unint64_t v309 = (char *)((v301 + v311 + 7) & 0xFFFFFFFFFFFFFFF8);
    unint64_t v308 = (unint64_t)(v309 + 15) & 0xFFFFFFFFFFFFFFF8;
    unint64_t v307 = v308 + 16;
    uint64_t v306 = (void (*)(void))(v303 + 32);
    uint64_t v304 = &v339;
    ++v305;
    uint64_t v168 = v333;
    unint64_t v169 = (void (*)(void *, char))v336;
    do
    {
      uint64_t v335 = v164;
      sub_100B30D0C(v167, v165, (uint64_t (*)(void))type metadata accessor for SafeLocation);
      uint64_t v170 = v190;
      uint64_t v171 = v190;
      uint64_t v172 = v329;
      ((void (*)(char *, uint64_t, uint64_t))v329)(v168, v313, v170);
      sub_100B310AC(v165, (uint64_t (*)(void))type metadata accessor for SafeLocation);
      uint64_t v173 = swift_allocObject();
      *(_OWORD *)(v173 + 16) = v327;
      ((void (*)(char *, uint64_t (*)(void), uint64_t))v172)(&v315[v173], v331, v171);
      uint64_t v174 = v326;
      ((void (*)(char *, char *, uint64_t))v172)(v326, v168, v171);
      uint64_t v175 = swift_allocObject();
      *(void *)(v175 + 16) = v173;
      (*(void (**)(uint64_t, char *, uint64_t))v306)(v175 + v311, v174, v171);
      *(void *)&v309[v175] = v332;
      uint64_t v176 = (void (**)(void *, char))(v175 + v308);
      *uint64_t v176 = sub_100B51704;
      v176[1] = v169;
      uint64_t v341 = (uint64_t)sub_100B5182C;
      uint64_t v342 = v175;
      *(void *)&long long aBlock = _NSConcreteStackBlock;
      *((void *)&aBlock + 1) = 1107296256;
      uint64_t v339 = sub_1004B5480;
      uint64_t v340 = &unk_1015E7548;
      uint64_t v177 = _Block_copy(&aBlock);
      swift_retain_n();
      swift_retain();
      swift_bridgeObjectRetain();
      uint64_t v178 = v321;
      static DispatchQoS.unspecified.getter();
      uint64_t v337 = _swiftEmptyArrayStorage;
      sub_100B22DA4((unint64_t *)&qword_10163B7E0, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
      sub_10000588C((uint64_t *)&unk_10163F350);
      sub_100062734((unint64_t *)&qword_10163B7F0, (uint64_t *)&unk_10163F350);
      uint64_t v179 = v318;
      unint64_t v180 = v320;
      uint64_t v190 = v334;
      dispatch thunk of SetAlgebra.init<A>(_:)();
      OS_dispatch_queue.async(group:qos:flags:execute:)();
      uint64_t v181 = v177;
      unint64_t v169 = (void (*)(void *, char))v336;
      _Block_release(v181);
      v317(v179, v180);
      (*v305)(v178, v322);
      uint64_t v165 = (uint64_t)v325;
      swift_bridgeObjectRelease();
      swift_release();
      uint64_t v168 = v333;
      swift_release();
      v323(v168, v190);
      v167 += v310;
      uint64_t v164 = (void (*)(void))((char *)v335 - 1);
    }
    while (v335 != (void (*)(void))1);
    swift_bridgeObjectRelease();
    a3 = v332;
    uint64_t v127 = v298;
    uint64_t v182 = v303;
    uint64_t v183 = v293;
    uint64_t v184 = v292;
    uint64_t v104 = (uint64_t)v296;
    uint64_t v163 = v288;
    if ((v289 & 1) == 0) {
      goto LABEL_47;
    }
  }
  else
  {
    swift_bridgeObjectRelease();
    uint64_t v183 = v293;
    uint64_t v184 = v292;
    uint64_t v182 = v303;
    if ((v289 & 1) == 0) {
      goto LABEL_47;
    }
  }
  sub_10001D010((uint64_t)v127, (uint64_t)&aBlock);
  sub_10000588C((uint64_t *)&unk_10164DBF0);
  uint64_t v185 = (uint64_t)v282;
  char v186 = swift_dynamicCast();
  uint64_t v187 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v184 + 56);
  if (v186)
  {
    v187(v185, 0, 1, v183);
    uint64_t v188 = v185;
    uint64_t v189 = v280;
    sub_100B30DB4(v188, v280, (uint64_t (*)(void))type metadata accessor for OwnedBeaconRecord);
    sub_10001D074(v189 + *(int *)(v183 + 28), v104, &qword_101638CF0);
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v182 + 48))(v104, 1, v190) == 1)
    {
      sub_100B310AC(v189, (uint64_t (*)(void))type metadata accessor for OwnedBeaconRecord);
      sub_10001DAB4(v104, &qword_101638CF0);
    }
    else
    {
      uint64_t v191 = (uint64_t)v269;
      uint64_t v335 = *(void (**)(void))(v182 + 32);
      v335();
      uint64_t v192 = v266;
      sub_100AE75E0(v191, v266);
      uint64_t v193 = v265;
      if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v265 + 48))(v192, 1, v270) == 1)
      {
        uint64_t v194 = v334;
        v323((char *)v191, v334);
        sub_100B310AC(v189, (uint64_t (*)(void))type metadata accessor for OwnedBeaconRecord);
        sub_10001DAB4(v192, &qword_10163BB20);
        uint64_t v190 = v194;
        uint64_t v183 = v293;
        uint64_t v184 = v292;
      }
      else
      {
        uint64_t v288 = v163;
        uint64_t v331 = type metadata accessor for OwnedBeaconGroup;
        uint64_t v195 = v267;
        sub_100B30DB4(v192, v267, type metadata accessor for OwnedBeaconGroup);
        uint64_t v196 = v334;
        ((void (*)(char *, uint64_t, uint64_t))v329)(v333, v191, v334);
        uint64_t v197 = v262;
        sub_100B30D0C(v195, v262, type metadata accessor for OwnedBeaconGroup);
        uint64_t v198 = (v281 + 24) & v287;
        unint64_t v199 = (v198 + v301 + *(unsigned __int8 *)(v193 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v193 + 80);
        uint64_t v200 = v199 + v261;
        uint64_t v201 = swift_allocObject();
        *(void *)(v201 + 16) = v336;
        ((void (*)(uint64_t, char *, uint64_t))v335)(v201 + v198, v333, v196);
        sub_100B30DB4(v197, v201 + v199, v331);
        *(unsigned char *)(v201 + v200) = v264 & 1;
        *(void *)((v200 & 0xFFFFFFFFFFFFFFF8) + v201 + 8) = v332;
        a3 = v332;
        swift_retain();
        swift_retain();
        static os_log_type_t.default.getter();
        if (qword_101637260 != -1) {
          swift_once();
        }
        sub_10000588C((uint64_t *)&unk_10163AD00);
        uint64_t v202 = swift_allocObject();
        *(_OWORD *)(v202 + 16) = v327;
        uint64_t v203 = v267;
        sub_100B30D0C(v267, v263, type metadata accessor for OwnedBeaconGroup);
        uint64_t v204 = String.init<A>(describing:)();
        uint64_t v206 = v205;
        *(void *)(v202 + 56) = &type metadata for String;
        *(void *)(v202 + 64) = sub_10000B4CC();
        *(void *)(v202 + 32) = v204;
        *(void *)(v202 + 40) = v206;
        os_log(_:dso:log:_:_:)();
        swift_bridgeObjectRelease();
        swift_retain();
        sub_100B4CD68(v203, a3, (void (*)(void))sub_100B51DA0, v201);
        swift_release_n();
        sub_100B310AC(v203, type metadata accessor for OwnedBeaconGroup);
        uint64_t v190 = v334;
        v323(v269, v334);
        sub_100B310AC(v280, (uint64_t (*)(void))type metadata accessor for OwnedBeaconRecord);
        uint64_t v183 = v293;
        uint64_t v184 = v292;
        uint64_t v163 = v288;
      }
    }
  }
  else
  {
    v187(v185, 1, 1, v183);
    sub_10001DAB4(v185, &qword_10163B9F0);
  }
LABEL_47:
  uint64_t My = type metadata accessor for Feature.FindMy();
  uint64_t v340 = (void *)My;
  uint64_t v341 = sub_100B22DA4((unint64_t *)&qword_101653E00, (void (*)(uint64_t))&type metadata accessor for Feature.FindMy);
  unint64_t v208 = sub_10001D958((uint64_t *)&aBlock);
  (*(void (**)(uint64_t *, void, uint64_t))(*(void *)(My - 8) + 104))(v208, enum case for Feature.FindMy.networkScalingImprovements(_:), My);
  LOBYTE(My) = isFeatureEnabled(_:)();
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)&aBlock);
  if (My)
  {
    sub_10001D010((uint64_t)v127, (uint64_t)&aBlock);
    sub_10000588C((uint64_t *)&unk_10164DBF0);
    uint64_t v209 = (uint64_t)v283;
    char v210 = swift_dynamicCast();
    uint64_t v211 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v184 + 56);
    if (v210)
    {
      uint64_t v288 = v163;
      v211(v209, 0, 1, v183);
      uint64_t v212 = v209;
      uint64_t v213 = v285;
      sub_100B30DB4(v212, v285, (uint64_t (*)(void))type metadata accessor for OwnedBeaconRecord);
      ((void (*)(char *, uint64_t, uint64_t))v329)(v299, v213 + *(int *)(v183 + 20), v190);
      if (qword_1016374B0 != -1) {
        swift_once();
      }
      uint64_t v214 = v294;
      sub_100010324(v294, (uint64_t)qword_10170F308);
      UUID.uuidString.getter();
      uint64_t v215 = v290;
      URL.appendingPathComponent(_:isDirectory:)();
      swift_bridgeObjectRelease();
      uint64_t v216 = *(void (**)(char *, char *, uint64_t))(v291 + 16);
      uint64_t v217 = v272;
      uint64_t v218 = v214;
      v216(v272, v215, v214);
      uint64_t v219 = v284;
      uint64_t v220 = (uint64_t)v273;
      uint64_t v335 = (void (*)(void))&v273[*(int *)(v284 + 40)];
      uint64_t v221 = v335;
      uint64_t v331 = (uint64_t (*)(void))type metadata accessor for DirectorySequence();
      uint64_t v222 = *(void (**)(void (*)(void), uint64_t, uint64_t, uint64_t (*)(void)))(*((void *)v331 - 1) + 56);
      v222(v221, 1, 1, v331);
      v216((char *)v220, v217, v218);
      *(void *)(v220 + *(int *)(v219 + 36)) = v295;
      v216(v271, v217, v218);
      swift_retain();
      uint64_t v223 = (uint64_t)v276;
      DirectorySequence.init(at:includingPropertiesForKeys:options:)();
      uint64_t v224 = *(void (**)(char *, uint64_t))(v291 + 8);
      v224(v217, v218);
      v222((void (*)(void))v223, 0, 1, v331);
      sub_100062604(v223, (uint64_t)v335, (uint64_t *)&unk_101653C90);
      uint64_t v225 = v275;
      sub_10001D608(v220, v275, &qword_101660680);
      Swift::String v226 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v278 + 56);
      uint64_t v227 = (uint64_t)v274;
      uint64_t v228 = v284;
      v226(v274, 1, 1, v284);
      sub_10001DAB4(v227, &qword_10164B3C8);
      sub_10001D608(v225, v227, &qword_101660680);
      v226((char *)v227, 0, 1, v228);
      uint64_t v229 = v277;
      sub_10001D608(v227, v277, (uint64_t *)&unk_101660A60);
      v224(v290, v294);
      sub_10000588C(&qword_101660A70);
      uint64_t v230 = (void *)swift_allocObject();
      sub_10001D608(v229, (uint64_t)v230 + *(void *)(class metadata base offset for _SequenceBox + *v230 + 16), (uint64_t *)&unk_101660A60);
      uint64_t v231 = *(void *)(class metadata base offset for _SequenceBox + *v230 + 16);
      uint64_t v319 = v230;
      uint64_t v232 = (uint64_t)v230 + v231;
      sub_10000588C(&qword_10164B3E0);
      uint64_t v233 = (void *)swift_allocObject();
      sub_10001D074(v232, (uint64_t)v233 + *(void *)(class metadata base offset for _IteratorBox + *v233 + 16), (uint64_t *)&unk_101660A60);
      Swift::String v234 = (uint64_t (*)(void))((char *)v233
                                            + *(void *)(class metadata base offset for _IteratorBox + *v233 + 16));
      uint64_t v318 = v233;
      swift_retain();
      uint64_t v235 = v279;
      uint64_t v331 = v234;
      sub_100B22DEC(v279);
      uint64_t v236 = v235;
      Swift::String v237 = *(void (**)(void))(v300 + 48);
      uint64_t v238 = v302;
      v300 += 48;
      uint64_t v335 = v237;
      if (((unsigned int (*)(uint64_t, uint64_t, uint64_t))v237)(v235, 1, v302) != 1)
      {
        uint64_t v325 = (char *)((v281 + 24) & v287);
        uint64_t v322 = (unint64_t)&v325[v301 + v281] & v287;
        unint64_t v321 = (char *)(v322 + v301);
        uint64_t v320 = (void (**)(void, void, void))(v303 + 32);
        uint64_t v246 = (uint64_t)v268;
        uint64_t v247 = v336;
        do
        {
          sub_100B30DB4(v236, v246, (uint64_t (*)(void))type metadata accessor for OwnedDeviceKeyRecord);
          uint64_t v248 = v246 + *(int *)(v238 + 20);
          unint64_t v250 = v333;
          uint64_t v249 = v334;
          uint64_t v251 = v329;
          ((void (*)(char *, char *, uint64_t))v329)(v333, v299, v334);
          unint64_t v252 = v326;
          ((void (*)(char *, uint64_t, uint64_t))v251)(v326, v248, v249);
          uint64_t v253 = swift_allocObject();
          *(void *)(v253 + 16) = v247;
          uint64_t v254 = (void (*)(uint64_t, char *, uint64_t))*v320;
          (*v320)(&v325[v253], v250, v249);
          v254(v253 + v322, v252, v249);
          swift_retain();
          static os_log_type_t.default.getter();
          if (qword_101637260 != -1) {
            swift_once();
          }
          sub_10000588C((uint64_t *)&unk_10163AD00);
          uint64_t v255 = swift_allocObject();
          *(_OWORD *)(v255 + 16) = v327;
          sub_100B30D0C(v246, v297, (uint64_t (*)(void))type metadata accessor for OwnedDeviceKeyRecord);
          uint64_t v256 = String.init<A>(describing:)();
          uint64_t v258 = v257;
          *(void *)(v255 + 56) = &type metadata for String;
          *(void *)(v255 + 64) = sub_10000B4CC();
          *(void *)(v255 + 32) = v256;
          *(void *)(v255 + 40) = v258;
          uint64_t v238 = v302;
          os_log(_:dso:log:_:_:)();
          swift_bridgeObjectRelease();
          swift_retain();
          sub_100B3A280(v246, v332, (void (*)(uint64_t))sub_100B51B30, v253);
          swift_release_n();
          sub_100B310AC(v246, (uint64_t (*)(void))type metadata accessor for OwnedDeviceKeyRecord);
          sub_100B22DEC(v236);
          int v259 = ((uint64_t (*)(uint64_t, uint64_t, uint64_t))v335)(v236, 1, v238);
          uint64_t v247 = v336;
        }
        while (v259 != 1);
      }
      swift_release_n();
      swift_release();
      v323(v299, v334);
      sub_100B310AC(v285, (uint64_t (*)(void))type metadata accessor for OwnedBeaconRecord);
      a3 = v332;
      uint64_t v127 = v298;
    }
    else
    {
      v211(v209, 1, 1, v183);
      sub_10001DAB4(v209, &qword_10163B9F0);
    }
  }
  type metadata accessor for BeaconKeyManager(0);
  OSAllocatedUnfairLock.callAsFunction<A>(_:)();
  uint64_t v239 = aBlock;
  uint64_t v240 = v127[3];
  uint64_t v241 = v127[4];
  uint64_t v242 = sub_10001CD44(v127, v240);
  sub_101310F24((uint64_t)v242, 0, 0, v239, v240, v241);
  swift_release();
  sub_10001D010((uint64_t)v127, (uint64_t)&aBlock);
  uint64_t v243 = swift_allocObject();
  *(void *)(v243 + 16) = a3;
  sub_10001CEB0(&aBlock, v243 + 24);
  swift_retain();
  sub_10000588C((uint64_t *)&unk_101638DC0);
  unsafeFromAsyncTask<A>(_:)();
  swift_release();
  sub_10001D010((uint64_t)v127, (uint64_t)&aBlock);
  uint64_t v244 = swift_allocObject();
  *(void *)(v244 + 16) = a3;
  sub_10001CEB0(&aBlock, v244 + 24);
  swift_retain();
  unsafeFromAsyncTask<A>(_:)();
  return swift_release();
}

void sub_100B0E8BC(char a1)
{
  Transaction.capture()();
  if ((a1 & 1) == 0)
  {
    static os_log_type_t.error.getter();
    sub_10000588C((uint64_t *)&unk_10163AD00);
    uint64_t v2 = swift_allocObject();
    *(_OWORD *)(v2 + 16) = xmmword_101342130;
    uint64_t v3 = UUID.uuidString.getter();
    uint64_t v5 = v4;
    *(void *)(v2 + 56) = &type metadata for String;
    *(void *)(v2 + 64) = sub_10000B4CC();
    *(void *)(v2 + 32) = v3;
    *(void *)(v2 + 40) = v5;
    sub_10001D4B0(0, (unint64_t *)&qword_10163AE70);
    id v6 = (id)static OS_os_log.default.getter();
    os_log(_:dso:log:_:_:)();
    swift_bridgeObjectRelease();
  }
}

uint64_t sub_100B0E9D0(char a1)
{
  Transaction.capture()();
  if ((a1 & 1) == 0)
  {
    static os_log_type_t.default.getter();
    if (qword_101637260 == -1) {
      goto LABEL_5;
    }
    goto LABEL_8;
  }
  static os_log_type_t.error.getter();
  if (qword_101637260 != -1) {
LABEL_8:
  }
    swift_once();
LABEL_5:

  return os_log(_:dso:log:_:_:)();
}

BOOL sub_100B0EADC(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a1 + *(int *)(type metadata accessor for SafeLocation() + 52));
  void v6[2] = a2;
  swift_bridgeObjectRetain();
  BOOL v4 = sub_100A9F998((uint64_t (*)(char *))sub_100B5306C, (uint64_t)v6, v3);
  swift_bridgeObjectRelease();
  return v4;
}

void sub_100B0EB6C(void *a1, char a2)
{
  Transaction.capture()();
  if (a2)
  {
    id v4 = a1;
    static os_log_type_t.error.getter();
    sub_10000588C((uint64_t *)&unk_10163AD00);
    uint64_t v5 = swift_allocObject();
    *(_OWORD *)(v5 + 16) = xmmword_101342130;
    type metadata accessor for SPSeparationMonitoringError(0);
    id v6 = v4;
    uint64_t v7 = String.init<A>(describing:)();
    uint64_t v9 = v8;
    *(void *)(v5 + 56) = &type metadata for String;
    *(void *)(v5 + 64) = sub_10000B4CC();
    *(void *)(v5 + 32) = v7;
    *(void *)(v5 + 40) = v9;
    sub_10001D4B0(0, (unint64_t *)&qword_10163AE70);
    uint64_t v10 = (void *)static OS_os_log.default.getter();
    os_log(_:dso:log:_:_:)();
    swift_bridgeObjectRelease();

    sub_1003B579C(a1, 1);
  }
}

void sub_100B0EC9C(int a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5, uint64_t a6)
{
  uint64_t v11 = type metadata accessor for UUID();
  uint64_t v12 = *(void *)(v11 - 8);
  __chkstk_darwin(v11);
  uint64_t v14 = (char *)&v25 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  Transaction.capture()();
  if (qword_101637310 != -1) {
    swift_once();
  }
  uint64_t v15 = type metadata accessor for Logger();
  uint64_t v16 = sub_100010324(v15, (uint64_t)qword_10170F068);
  (*(void (**)(char *, uint64_t, uint64_t))(v12 + 16))(v14, a3, v11);
  uint64_t v17 = Logger.logObject.getter();
  os_log_type_t v18 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v17, v18))
  {
    uint64_t v19 = swift_slowAlloc();
    uint64_t v28 = v16;
    int v26 = a1;
    uint64_t v20 = v19;
    uint64_t v21 = swift_slowAlloc();
    uint64_t v27 = v21;
    *(_DWORD *)uint64_t v20 = 141558531;
    uint64_t v31 = 1752392040;
    v32[0] = v21;
    int v29 = a5;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v20 + 12) = 2081;
    uint64_t v30 = a6;
    sub_100B22DA4((unint64_t *)&qword_101638B10, (void (*)(uint64_t))&type metadata accessor for UUID);
    uint64_t v22 = dispatch thunk of CustomStringConvertible.description.getter();
    uint64_t v31 = sub_1008FA0F0(v22, v23, v32);
    LOBYTE(a5) = v29;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v12 + 8))(v14, v11);
    *(_WORD *)(v20 + 22) = 1024;
    LODWORD(v31) = v26 & 1;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl((void *)&_mh_execute_header, v17, v18, "Remove OwnedBeaconGroup %{private,mask.hash}s? %{BOOL}d", (uint8_t *)v20, 0x1Cu);
    swift_arrayDestroy();
    swift_slowDealloc();
    uint64_t v16 = v28;
    swift_slowDealloc();
  }
  else
  {
    (*(void (**)(char *, uint64_t))(v12 + 8))(v14, v11);
  }

  sub_1004CCF70(v16);
  if (a5)
  {
    v32[3] = type metadata accessor for OwnedBeaconGroup(0);
    v32[4] = sub_100B22DA4(&qword_101642708, (void (*)(uint64_t))type metadata accessor for OwnedBeaconGroup);
    uint64_t v24 = sub_10001D958(v32);
    sub_100B30D0C(a4, (uint64_t)v24, type metadata accessor for OwnedBeaconGroup);
    PassthroughSubject.send(_:)();
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)v32);
  }
}

void sub_100B0F04C(char a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7 = type metadata accessor for UUID();
  uint64_t v8 = *(void *)(v7 - 8);
  uint64_t v9 = __chkstk_darwin(v7);
  uint64_t v11 = &v46[-((v10 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v12 = __chkstk_darwin(v9);
  uint64_t v14 = &v46[-v13];
  uint64_t v15 = __chkstk_darwin(v12);
  uint64_t v17 = &v46[-v16];
  __chkstk_darwin(v15);
  uint64_t v19 = &v46[-v18];
  Transaction.capture()();
  if (a1)
  {
    if (qword_101637660 != -1) {
      swift_once();
    }
    uint64_t v20 = type metadata accessor for Logger();
    sub_100010324(v20, (uint64_t)qword_10170F838);
    uint64_t v21 = *(void (**)(unsigned char *, uint64_t, uint64_t))(v8 + 16);
    v21(v19, a3, v7);
    v21(v17, a4, v7);
    uint64_t v22 = Logger.logObject.getter();
    os_log_type_t v23 = static os_log_type_t.default.getter();
    int v24 = v23;
    if (os_log_type_enabled(v22, v23))
    {
      uint64_t v25 = swift_slowAlloc();
      uint64_t v26 = swift_slowAlloc();
      uint64_t v48 = v26;
      *(_DWORD *)uint64_t v25 = 141558787;
      uint64_t v49 = 1752392040;
      uint64_t v50 = v26;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v25 + 12) = 2081;
      sub_100B22DA4((unint64_t *)&qword_101638B10, (void (*)(uint64_t))&type metadata accessor for UUID);
      int v47 = v24;
      uint64_t v27 = dispatch thunk of CustomStringConvertible.description.getter();
      uint64_t v49 = sub_1008FA0F0(v27, v28, &v50);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      int v29 = *(void (**)(unsigned char *, uint64_t))(v8 + 8);
      v29(v19, v7);
      *(_WORD *)(v25 + 22) = 2160;
      uint64_t v49 = 1752392040;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v25 + 32) = 2081;
      uint64_t v30 = dispatch thunk of CustomStringConvertible.description.getter();
      uint64_t v49 = sub_1008FA0F0(v30, v31, &v50);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      v29(v17, v7);
      _os_log_impl((void *)&_mh_execute_header, v22, (os_log_type_t)v47, "OwnedDeviceKeyRecord removed deviceIdentifier:%{private,mask.hash}s, uuid:%{private,mask.hash}s.", (uint8_t *)v25, 0x2Au);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      uint64_t v44 = *(void (**)(unsigned char *, uint64_t))(v8 + 8);
      v44(v19, v7);
      v44(v17, v7);
    }
  }
  else
  {
    if (qword_101637660 != -1) {
      swift_once();
    }
    uint64_t v32 = type metadata accessor for Logger();
    sub_100010324(v32, (uint64_t)qword_10170F838);
    uint64_t v33 = *(void (**)(unsigned char *, uint64_t, uint64_t))(v8 + 16);
    v33(v14, a3, v7);
    v33(v11, a4, v7);
    uint64_t v34 = Logger.logObject.getter();
    os_log_type_t v35 = static os_log_type_t.default.getter();
    int v36 = v35;
    if (os_log_type_enabled(v34, v35))
    {
      uint64_t v37 = swift_slowAlloc();
      uint64_t v38 = swift_slowAlloc();
      uint64_t v48 = v38;
      *(_DWORD *)uint64_t v37 = 141558787;
      uint64_t v49 = 1752392040;
      uint64_t v50 = v38;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v37 + 12) = 2081;
      sub_100B22DA4((unint64_t *)&qword_101638B10, (void (*)(uint64_t))&type metadata accessor for UUID);
      int v47 = v36;
      uint64_t v39 = dispatch thunk of CustomStringConvertible.description.getter();
      uint64_t v49 = sub_1008FA0F0(v39, v40, &v50);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      uint64_t v41 = *(void (**)(unsigned char *, uint64_t))(v8 + 8);
      v41(v14, v7);
      *(_WORD *)(v37 + 22) = 2160;
      uint64_t v49 = 1752392040;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v37 + 32) = 2081;
      uint64_t v42 = dispatch thunk of CustomStringConvertible.description.getter();
      uint64_t v49 = sub_1008FA0F0(v42, v43, &v50);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      v41(v11, v7);
      _os_log_impl((void *)&_mh_execute_header, v34, (os_log_type_t)v47, "Could not remove OwnedDeviceKeyRecord deviceIdentifier:%{private,mask.hash}s, uuid:%{private,mask.hash}s.", (uint8_t *)v37, 0x2Au);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      uint64_t v45 = *(void (**)(unsigned char *, uint64_t))(v8 + 8);
      v45(v14, v7);
      v45(v11, v7);
    }
  }
}

uint64_t sub_100B0F6CC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v3[4] = a2;
  v3[5] = a3;
  v3[3] = a1;
  uint64_t v4 = type metadata accessor for UUID();
  v3[6] = v4;
  v3[7] = *(void *)(v4 - 8);
  v3[8] = swift_task_alloc();
  v3[9] = swift_task_alloc();
  return _swift_task_switch(sub_100B0F7A0, 0, 0);
}

uint64_t sub_100B0F7A0()
{
  uint64_t v1 = (void *)v0[5];
  type metadata accessor for BeaconKeyManager(0);
  OSAllocatedUnfairLock.callAsFunction<A>(_:)();
  v0[10] = v0[2];
  uint64_t v3 = v1[3];
  uint64_t v2 = v1[4];
  sub_10001CD44(v1, v3);
  (*(void (**)(uint64_t))(*(void *)(*(void *)(v2 + 8) + 8) + 32))(v3);
  uid_t v4 = getuid();
  sub_100DC5FC0(v4);
  uint64_t v5 = (void *)swift_task_alloc();
  v0[11] = v5;
  *uint64_t v5 = v0;
  v5[1] = sub_100B0F900;
  uint64_t v6 = v0[8];
  uint64_t v7 = v0[9];
  return sub_10064CC94(v7, v6);
}

uint64_t sub_100B0F900()
{
  uint64_t v2 = *(void **)v1;
  *(void *)(*(void *)v1 + 96) = v0;
  swift_task_dealloc();
  if (v0)
  {
    uint64_t v3 = sub_100B0FADC;
  }
  else
  {
    uint64_t v4 = v2[9];
    uint64_t v6 = v2[7];
    uint64_t v5 = v2[8];
    uint64_t v7 = v2[6];
    swift_release();
    uint64_t v8 = *(void (**)(uint64_t, uint64_t))(v6 + 8);
    v8(v5, v7);
    v8(v4, v7);
    uint64_t v3 = sub_100B0FA60;
  }
  return _swift_task_switch(v3, 0, 0);
}

uint64_t sub_100B0FA60()
{
  **(unsigned char **)(v0 + 24) = *(void *)(v0 + 96) != 0;
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_100B0FADC()
{
  uint64_t v1 = *(void *)(v0 + 72);
  uint64_t v3 = *(void *)(v0 + 56);
  uint64_t v2 = *(void *)(v0 + 64);
  uint64_t v4 = *(void *)(v0 + 48);
  swift_release();
  swift_errorRelease();
  uint64_t v5 = *(void (**)(uint64_t, uint64_t))(v3 + 8);
  v5(v2, v4);
  v5(v1, v4);
  **(unsigned char **)(v0 + 24) = *(void *)(v0 + 96) != 0;
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v6 = *(uint64_t (**)(void))(v0 + 8);
  return v6();
}

uint64_t sub_100B0FBB0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v3[16] = a2;
  v3[17] = a3;
  uint64_t v4 = type metadata accessor for UUID();
  v3[18] = v4;
  v3[19] = *(void *)(v4 - 8);
  v3[20] = swift_task_alloc();
  return _swift_task_switch(sub_100B0FC70, 0, 0);
}

uint64_t sub_100B0FC70()
{
  uint64_t v1 = qword_1016375E8;
  swift_retain();
  if (v1 != -1) {
    swift_once();
  }
  swift_beginAccess();
  uint64_t result = sub_10001D074((uint64_t)&xmmword_10166E8F0, v0 + 56, (uint64_t *)&unk_101638D30);
  if (*(void *)(v0 + 80))
  {
    sub_10001CEB0((long long *)(v0 + 56), v0 + 16);
    swift_release();
    sub_10001CD44((void *)(v0 + 16), *(void *)(v0 + 40));
    uint64_t v4 = (uint64_t (__cdecl *)())((char *)&dword_101639138 + dword_101639138);
    uint64_t v3 = (void *)swift_task_alloc();
    *(void *)(v0 + 168) = v3;
    *uint64_t v3 = v0;
    v3[1] = sub_100B0FDC0;
    return v4();
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_100B0FDC0(uint64_t a1)
{
  *(void *)(*(void *)v1 + 176) = a1;
  swift_task_dealloc();
  return _swift_task_switch(sub_100B0FEC0, 0, 0);
}

uint64_t sub_100B0FEC0()
{
  uint64_t v1 = (uint64_t)(v0 + 2);
  if (v0[22])
  {
    uint64_t v2 = (void *)v0[17];
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v1);
    uint64_t v3 = v2[3];
    uint64_t v4 = v2[4];
    sub_10001CD44(v2, v3);
    (*(void (**)(uint64_t))(*(void *)(*(void *)(v4 + 8) + 8) + 32))(v3);
    uint64_t v5 = (void *)swift_task_alloc();
    v0[23] = v5;
    *uint64_t v5 = v0;
    v5[1] = sub_100B0FFFC;
    uint64_t v6 = v0[20];
    return sub_101106A14(v6);
  }
  else
  {
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v1);
    swift_task_dealloc();
    uint64_t v8 = (uint64_t (*)(void))v0[1];
    return v8();
  }
}

uint64_t sub_100B0FFFC()
{
  uint64_t v2 = *(void *)(*(void *)v1 + 160);
  uint64_t v3 = *(void *)(*(void *)v1 + 152);
  uint64_t v4 = *(void *)(*(void *)v1 + 144);
  *(void *)(*(void *)v1 + 192) = v0;
  swift_task_dealloc();
  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v2, v4);
  if (v0) {
    uint64_t v5 = sub_100B101D4;
  }
  else {
    uint64_t v5 = sub_100B1016C;
  }
  return _swift_task_switch(v5, 0, 0);
}

uint64_t sub_100B1016C()
{
  swift_release();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_100B101D4()
{
  swift_release();
  if (qword_101636F50 != -1) {
    swift_once();
  }
  uint64_t v1 = type metadata accessor for Logger();
  sub_100010324(v1, (uint64_t)qword_10170E9E8);
  swift_errorRetain();
  swift_errorRetain();
  uint64_t v2 = Logger.logObject.getter();
  os_log_type_t v3 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v2, v3))
  {
    uint64_t v4 = (uint8_t *)swift_slowAlloc();
    uint64_t v5 = (void *)swift_slowAlloc();
    *(_DWORD *)uint64_t v4 = 138543362;
    swift_errorRetain();
    uint64_t v6 = _swift_stdlib_bridgeErrorToNSError();
    *(void *)(v0 + 120) = v6;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *uint64_t v5 = v6;
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl((void *)&_mh_execute_header, v2, v3, "Could not delete key sync metadata %{public}@.", v4, 0xCu);
    sub_10000588C((uint64_t *)&unk_101638EA0);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    swift_errorRelease();
  }
  else
  {
    swift_errorRelease();
    swift_errorRelease();
    swift_errorRelease();
  }
  swift_task_dealloc();
  uint64_t v7 = *(uint64_t (**)(void))(v0 + 8);
  return v7();
}

uint64_t sub_100B103E8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v67 = a7;
  uint64_t v79 = a1;
  uint64_t v80 = a5;
  uint64_t v82 = a4;
  uint64_t v10 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v75 = *(void *)(v10 - 8);
  uint64_t v76 = v10;
  __chkstk_darwin(v10);
  uint64_t v73 = (char *)&v65 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v74 = type metadata accessor for DispatchQoS();
  uint64_t v72 = *(void *)(v74 - 8);
  __chkstk_darwin(v74);
  uint64_t v71 = (char *)&v65 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v70 = type metadata accessor for CloudKitChangeSet(0);
  uint64_t v77 = *(void *)(v70 - 8);
  uint64_t v13 = *(void *)(v77 + 64);
  uint64_t v14 = __chkstk_darwin(v70);
  uint64_t v68 = (char *)&v65 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = __chkstk_darwin(v14);
  uint64_t v78 = (uint64_t)&v65 - v16;
  __chkstk_darwin(v15);
  uint64_t v18 = (char *)&v65 - v17;
  uint64_t v19 = type metadata accessor for Notification();
  uint64_t v20 = *(void *)(v19 - 8);
  __chkstk_darwin(v19);
  uint64_t v22 = (char *)&v65 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_1016371D8 != -1) {
    swift_once();
  }
  uint64_t aBlock = 0x7365547265646E75;
  unint64_t v85 = 0xE900000000000074;
  SynchronousCache.cachedValue<A>(key:computeBlock:)();
  swift_bridgeObjectRelease();
  LODWORD(v81) = v90;
  if (v90 == 1)
  {
    String._bridgeToObjectiveC()();
    uint64_t v23 = type metadata accessor for UUID();
    uint64_t v87 = (void *)v23;
    int v24 = sub_10001D958(&aBlock);
    (*(void (**)(uint64_t *, uint64_t, uint64_t))(*(void *)(v23 - 8) + 16))(v24, a3, v23);
    Notification.init(name:object:userInfo:)();
    id v25 = [self defaultCenter];
    Class isa = Notification._bridgeToObjectiveC()().super.isa;
    [v25 postNotification:isa];

    (*(void (**)(char *, uint64_t))(v20 + 8))(v22, v19);
  }
  else
  {
    id v27 = [self standardUserDefaults];
    UUID.uuidString.getter();
    NSString v28 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    NSString v29 = String._bridgeToObjectiveC()();
    [v27 setObject:v28 forKey:v29];
  }
  if (qword_101636F50 != -1) {
    swift_once();
  }
  uint64_t v30 = type metadata accessor for Logger();
  sub_100010324(v30, (uint64_t)qword_10170E9E8);
  uint64_t v83 = a3;
  sub_100B30D0C(a3, (uint64_t)v18, type metadata accessor for CloudKitChangeSet);
  unint64_t v31 = Logger.logObject.getter();
  os_log_type_t v32 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v31, v32))
  {
    uint64_t v33 = swift_slowAlloc();
    uint64_t v69 = a6;
    uint64_t v34 = (uint8_t *)v33;
    uint64_t v35 = swift_slowAlloc();
    uint64_t v66 = v13;
    uint64_t aBlock = v35;
    *(_DWORD *)uint64_t v34 = 136446210;
    unint64_t v36 = sub_100EE1480();
    uint64_t v90 = (void *)sub_1008FA0F0(v36, v37, &aBlock);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    sub_100B310AC((uint64_t)v18, type metadata accessor for CloudKitChangeSet);
    _os_log_impl((void *)&_mh_execute_header, v31, v32, "Begin applying %{public}s", v34, 0xCu);
    swift_arrayDestroy();
    uint64_t v13 = v66;
    swift_slowDealloc();
    a6 = v69;
    swift_slowDealloc();
  }
  else
  {
    sub_100B310AC((uint64_t)v18, type metadata accessor for CloudKitChangeSet);
  }

  uint64_t v38 = v82;
  char v39 = v81;
  uint64_t v40 = mach_continuous_time();
  uint64_t v41 = v83;
  if (v39)
  {
    sub_1009300F4((uint64_t)_swiftEmptyArrayStorage);
    swift_bridgeObjectRelease();
    uint64_t v42 = v78;
    sub_100B30D0C(v41, v78, type metadata accessor for CloudKitChangeSet);
    unint64_t v43 = (*(unsigned __int8 *)(v77 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v77 + 80);
    unint64_t v44 = (v13 + v43 + 7) & 0xFFFFFFFFFFFFFFF8;
    uint64_t v45 = swift_allocObject();
    sub_100B30DB4(v42, v45 + v43, type metadata accessor for CloudKitChangeSet);
    uint64_t v46 = (void *)(v45 + v44);
    *uint64_t v46 = v79;
    v46[1] = a2;
    int v47 = (void *)(v45 + ((v44 + 23) & 0xFFFFFFFFFFFFFFF8));
    *int v47 = v80;
    v47[1] = a6;
    uint64_t v88 = sub_100B54C8C;
    uint64_t v89 = v45;
    uint64_t aBlock = (uint64_t)_NSConcreteStackBlock;
    unint64_t v85 = 1107296256;
    uint64_t v86 = sub_1004B5480;
    uint64_t v87 = &unk_1015E7D18;
    uint64_t v48 = _Block_copy(&aBlock);
    swift_retain();
    swift_retain();
    uint64_t v49 = v71;
    static DispatchQoS.unspecified.getter();
    uint64_t v90 = _swiftEmptyArrayStorage;
    sub_100B22DA4((unint64_t *)&qword_10163B7E0, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
    sub_10000588C((uint64_t *)&unk_10163F350);
    sub_100062734((unint64_t *)&qword_10163B7F0, (uint64_t *)&unk_10163F350);
    uint64_t v50 = v73;
    uint64_t v51 = v76;
    dispatch thunk of SetAlgebra.init<A>(_:)();
    OS_dispatch_queue.async(group:qos:flags:execute:)();
    _Block_release(v48);
    (*(void (**)(char *, uint64_t))(v75 + 8))(v50, v51);
    (*(void (**)(char *, uint64_t))(v72 + 8))(v49, v74);
  }
  else
  {
    uint64_t v52 = v40;
    uint64_t v81 = sub_100B11080(*(void *)(v83 + *(int *)(v70 + 24)));
    uint64_t v82 = sub_100AB24F0();
    uint64_t v53 = v78;
    sub_100B30D0C(v41, v78, type metadata accessor for CloudKitChangeSet);
    unint64_t v54 = (*(unsigned __int8 *)(v77 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v77 + 80);
    unint64_t v55 = (v13 + v54 + 7) & 0xFFFFFFFFFFFFFFF8;
    uint64_t v69 = a6;
    unint64_t v56 = (v55 + 23) & 0xFFFFFFFFFFFFFFF8;
    uint64_t v57 = a2;
    unint64_t v58 = (v56 + 15) & 0xFFFFFFFFFFFFFFF8;
    uint64_t v59 = swift_allocObject();
    *(void *)(v59 + 16) = v38;
    *(void *)(v59 + 24) = v52;
    sub_100B30DB4(v53, v59 + v54, type metadata accessor for CloudKitChangeSet);
    unint64_t v60 = (void *)(v59 + v55);
    *unint64_t v60 = v79;
    v60[1] = v57;
    uint64_t v61 = v80;
    *(void *)(v59 + v56) = v81;
    uint64_t v62 = (void *)(v59 + v58);
    uint64_t v63 = v69;
    *uint64_t v62 = v61;
    v62[1] = v63;
    *(void *)(v59 + ((v58 + 23) & 0xFFFFFFFFFFFFFFF8)) = v67;
    swift_retain();
    swift_retain();
    swift_retain();
    sub_10100B19C(v83, (uint64_t)sub_100B54A74, v59);
    swift_release();
  }
  return swift_release();
}

uint64_t sub_100B11080(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v71 = type metadata accessor for URL();
  uint64_t v4 = *(void *)(v71 - 8);
  __chkstk_darwin(v71);
  uint64_t v6 = (char *)&v64 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for UUID();
  uint64_t v8 = *(void *)(v7 - 8);
  __chkstk_darwin(v7);
  uint64_t v10 = (char *)&v64 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v76 = type metadata accessor for BeaconStoreFileRecord();
  uint64_t v69 = *(void *)(v76 - 8);
  uint64_t v11 = __chkstk_darwin(v76);
  uint64_t v82 = (uint64_t)&v64 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v11);
  uint64_t v14 = (char *)&v64 - v13;
  uint64_t v15 = sub_10000588C(&qword_1016592A0);
  uint64_t v16 = __chkstk_darwin(v15 - 8);
  uint64_t v79 = (int64_t *)((char *)&v64 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0));
  __chkstk_darwin(v16);
  uint64_t v78 = (void **)((char *)&v64 - v18);
  uint64_t v19 = *(void *)(a1 + 64);
  uint64_t v65 = a1 + 64;
  uint64_t v20 = 1 << *(unsigned char *)(a1 + 32);
  uint64_t v21 = -1;
  if (v20 < 64) {
    uint64_t v21 = ~(-1 << v20);
  }
  unint64_t v22 = v21 & v19;
  uint64_t v72 = (void (**)(char *, uint64_t, uint64_t))(v4 + 16);
  uint64_t v73 = (void (**)(char *, uint64_t, uint64_t))(v8 + 16);
  uint64_t v74 = (void (**)(void))(v4 + 8);
  uint64_t v75 = (void (**)(char *, uint64_t))(v8 + 8);
  int64_t v66 = (unint64_t)(v20 + 63) >> 6;
  uint64_t v67 = a1;
  int64_t v64 = v66 - 1;
  swift_bridgeObjectRetain();
  int64_t v23 = 0;
  int v24 = _swiftEmptyDictionarySingleton;
  uint64_t v68 = v10;
  uint64_t v83 = v14;
  uint64_t v70 = v7;
  while (1)
  {
    unint64_t v84 = v24;
    if (v22)
    {
      uint64_t v25 = v2;
      uint64_t v80 = (v22 - 1) & v22;
      int64_t v81 = v23;
      unint64_t v26 = __clz(__rbit64(v22)) | (v23 << 6);
LABEL_8:
      uint64_t v27 = *(void *)(v67 + 56);
      NSString v28 = *(void **)(*(void *)(v67 + 48) + 8 * v26);
      uint64_t v29 = (uint64_t)v79;
      *uint64_t v79 = v28;
      uint64_t v30 = v27
          + *(void *)(*(void *)(type metadata accessor for CloudKitChangeSet.TombstoneInfo(0) - 8) + 72) * v26;
      uint64_t v31 = sub_10000588C(&qword_1016592A8);
      sub_100B30D0C(v30, v29 + *(int *)(v31 + 48), type metadata accessor for CloudKitChangeSet.TombstoneInfo);
      (*(void (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v31 - 8) + 56))(v29, 0, 1, v31);
      id v32 = v28;
      uint64_t v2 = v25;
      uint64_t v33 = v78;
      goto LABEL_15;
    }
    int64_t v34 = v23 + 1;
    if (__OFADD__(v23, 1)) {
      goto LABEL_47;
    }
    if (v34 >= v66)
    {
      int64_t v81 = v23;
      uint64_t v33 = v78;
      uint64_t v29 = (uint64_t)v79;
    }
    else
    {
      unint64_t v35 = *(void *)(v65 + 8 * v34);
      uint64_t v33 = v78;
      uint64_t v29 = (uint64_t)v79;
      if (v35) {
        goto LABEL_12;
      }
      int64_t v61 = v23 + 2;
      if (v34 + 1 >= v66)
      {
LABEL_41:
        int64_t v81 = v34;
      }
      else
      {
        unint64_t v35 = *(void *)(v65 + 8 * v61);
        if (v35) {
          goto LABEL_28;
        }
        if (v34 + 2 >= v66)
        {
          int64_t v81 = v61;
        }
        else
        {
          unint64_t v35 = *(void *)(v65 + 8 * (v34 + 2));
          if (v35)
          {
            v34 += 2;
LABEL_12:
            uint64_t v25 = v2;
            uint64_t v80 = (v35 - 1) & v35;
            int64_t v81 = v34;
            unint64_t v26 = __clz(__rbit64(v35)) + (v34 << 6);
            goto LABEL_8;
          }
          int64_t v61 = v34 + 3;
          if (v34 + 3 < v66)
          {
            unint64_t v35 = *(void *)(v65 + 8 * v61);
            if (!v35)
            {
              while (1)
              {
                int64_t v34 = v61 + 1;
                if (__OFADD__(v61, 1)) {
                  goto LABEL_48;
                }
                if (v34 >= v66)
                {
                  int64_t v34 = v64;
                  goto LABEL_41;
                }
                unint64_t v35 = *(void *)(v65 + 8 * v34);
                ++v61;
                if (v35) {
                  goto LABEL_12;
                }
              }
            }
LABEL_28:
            int64_t v34 = v61;
            goto LABEL_12;
          }
          int64_t v81 = v34 + 2;
        }
      }
    }
    uint64_t v36 = sub_10000588C(&qword_1016592A8);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v36 - 8) + 56))(v29, 1, 1, v36);
    uint64_t v80 = 0;
LABEL_15:
    sub_10001D608(v29, (uint64_t)v33, &qword_1016592A0);
    uint64_t v37 = sub_10000588C(&qword_1016592A8);
    if ((*(unsigned int (**)(void **, uint64_t, uint64_t))(*(void *)(v37 - 8) + 48))(v33, 1, v37) == 1)
    {
      swift_release();
      return (uint64_t)v84;
    }
    uint64_t v38 = *v33;
    uint64_t v39 = (uint64_t)v33 + *(int *)(v37 + 48);
    int64_t v40 = *(void *)(v77 + 160);
    uint64_t v41 = type metadata accessor for CloudKitChangeSet.TombstoneInfo(0);
    uint64_t v42 = v70;
    (*v73)(v10, v39 + *(int *)(v41 + 20), v70);
    uint64_t v43 = v71;
    (*v72)(v6, v39 + *(int *)(v41 + 24), v71);
    uint64_t v44 = sub_100B310AC(v39, type metadata accessor for CloudKitChangeSet.TombstoneInfo);
    __chkstk_darwin(v44);
    *(&v64 - 4) = v40;
    *(&v64 - 3) = (int64_t)v10;
    uint64_t v45 = (uint64_t)v83;
    *(&v64 - 2) = (int64_t)v6;
    OS_dispatch_queue.sync<A>(execute:)();
    if (v2)
    {

      ((void (*)(char *, uint64_t))*v74)(v6, v43);
      (*v75)(v10, v42);
      swift_release();
      uint64_t v62 = (uint64_t)v84;
      sub_100B55048((uint64_t)v84);
      swift_bridgeObjectRelease();
      swift_willThrow();
      return v62;
    }
    (*v74)();
    (*v75)(v10, v42);
    sub_100B30D0C(v45, v82, (uint64_t (*)(void))type metadata accessor for BeaconStoreFileRecord);
    id v46 = v38;
    uint64_t v47 = (uint64_t)v84;
    int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    unint64_t v85 = (void *)v47;
    unint64_t v50 = sub_100724354((uint64_t)v46);
    uint64_t v51 = *(void *)(v47 + 16);
    BOOL v52 = (v49 & 1) == 0;
    uint64_t v53 = v51 + v52;
    if (__OFADD__(v51, v52)) {
      break;
    }
    char v54 = v49;
    if (*(void *)(v47 + 24) >= v53)
    {
      if ((isUniquelyReferenced_nonNull_native & 1) == 0) {
        sub_100E86D78();
      }
    }
    else
    {
      sub_100E771EC(v53, isUniquelyReferenced_nonNull_native);
      unint64_t v55 = sub_100724354((uint64_t)v46);
      if ((v54 & 1) != (v56 & 1)) {
        goto LABEL_49;
      }
      unint64_t v50 = v55;
    }
    int v24 = v85;
    uint64_t v2 = 0;
    if (v54)
    {
      sub_100B5E098(v82, v85[7] + *(void *)(v69 + 72) * v50, (uint64_t (*)(void))type metadata accessor for BeaconStoreFileRecord);
    }
    else
    {
      v85[(v50 >> 6) + 8] |= 1 << v50;
      *(void *)(v24[6] + 8 * v50) = v46;
      sub_100B30DB4(v82, v24[7] + *(void *)(v69 + 72) * v50, (uint64_t (*)(void))type metadata accessor for BeaconStoreFileRecord);
      uint64_t v57 = v24[2];
      BOOL v58 = __OFADD__(v57, 1);
      uint64_t v59 = v57 + 1;
      if (v58) {
        goto LABEL_46;
      }
      v24[2] = v59;
      id v60 = v46;
    }

    swift_bridgeObjectRelease();
    sub_100B310AC((uint64_t)v83, (uint64_t (*)(void))type metadata accessor for BeaconStoreFileRecord);
    uint64_t v10 = v68;
    unint64_t v22 = v80;
    int64_t v23 = v81;
  }
  __break(1u);
LABEL_46:
  __break(1u);
LABEL_47:
  __break(1u);
LABEL_48:
  __break(1u);
LABEL_49:
  sub_10001D4B0(0, &qword_10163CB60);
  uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

uint64_t sub_100B1192C(uint64_t a1, void (*a2)(void), uint64_t a3)
{
  uint64_t v26 = a3;
  uint64_t v5 = type metadata accessor for CloudKitChangeSet(0);
  __chkstk_darwin(v5 - 8);
  uint64_t v7 = (char *)&v24 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for Notification();
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  uint64_t v11 = (char *)&v24 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  String._bridgeToObjectiveC()();
  uint64_t v12 = type metadata accessor for UUID();
  v28[3] = v12;
  uint64_t v13 = sub_10001D958(v28);
  (*(void (**)(uint64_t *, uint64_t, uint64_t))(*(void *)(v12 - 8) + 16))(v13, a1, v12);
  Notification.init(name:object:userInfo:)();
  id v14 = [self defaultCenter];
  Class isa = Notification._bridgeToObjectiveC()().super.isa;
  [v14 postNotification:isa];

  if (qword_101636F50 != -1) {
    swift_once();
  }
  uint64_t v16 = type metadata accessor for Logger();
  sub_100010324(v16, (uint64_t)qword_10170E9E8);
  sub_100B30D0C(a1, (uint64_t)v7, type metadata accessor for CloudKitChangeSet);
  uint64_t v17 = Logger.logObject.getter();
  os_log_type_t v18 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v17, v18))
  {
    uint64_t v19 = swift_slowAlloc();
    uint64_t v25 = a2;
    uint64_t v20 = (uint8_t *)v19;
    v28[0] = swift_slowAlloc();
    *(_DWORD *)uint64_t v20 = 136446210;
    int v24 = v11;
    unint64_t v21 = sub_100EE1480();
    uint64_t v27 = sub_1008FA0F0(v21, v22, v28);
    uint64_t v11 = v24;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    sub_100B310AC((uint64_t)v7, type metadata accessor for CloudKitChangeSet);
    _os_log_impl((void *)&_mh_execute_header, v17, v18, "Calling wakeChangeSetQueue() after completing %{public}s", v20, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    a2 = v25;
    swift_slowDealloc();
  }
  else
  {
    sub_100B310AC((uint64_t)v7, type metadata accessor for CloudKitChangeSet);
  }

  a2();
  return (*(uint64_t (**)(char *, uint64_t))(v9 + 8))(v11, v8);
}

uint64_t sub_100B11CD4(uint64_t a1, uint64_t a2, int a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  uint64_t v45 = a7;
  uint64_t v41 = a5;
  uint64_t v40 = a4;
  int v47 = a3;
  uint64_t v43 = a1;
  uint64_t v44 = a2;
  uint64_t v50 = a12;
  uint64_t v48 = a11;
  uint64_t v46 = a10;
  uint64_t v42 = a9;
  uint64_t v53 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v56 = *(void *)(v53 - 8);
  __chkstk_darwin(v53);
  BOOL v52 = (char *)&v39 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = type metadata accessor for DispatchQoS();
  uint64_t v54 = *(void *)(v16 - 8);
  uint64_t v55 = v16;
  __chkstk_darwin(v16);
  char v49 = (char *)&v39 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v18 = type metadata accessor for CloudKitChangeSet(0);
  uint64_t v19 = *(void *)(v18 - 8);
  uint64_t v20 = *(void *)(v19 + 64);
  __chkstk_darwin(v18 - 8);
  unint64_t v21 = (char *)&v39 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v51 = *(void *)(a4 + 64);
  sub_100B30D0C(a6, (uint64_t)v21, type metadata accessor for CloudKitChangeSet);
  unint64_t v22 = (*(unsigned __int8 *)(v19 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v19 + 80);
  unint64_t v23 = (v20 + v22 + 7) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v24 = (v23 + 47) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v25 = (v24 + 15) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v26 = (v25 + 15) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v27 = swift_allocObject();
  *(void *)(v27 + 16) = v41;
  sub_100B30DB4((uint64_t)v21, v27 + v22, type metadata accessor for CloudKitChangeSet);
  NSString v28 = (void *)(v27 + v23);
  void *v28 = v45;
  v28[1] = a8;
  unint64_t v29 = v27 + ((v23 + 23) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v30 = v43;
  uint64_t v31 = v44;
  *(void *)unint64_t v29 = v43;
  *(void *)(v29 + 8) = v31;
  LOBYTE(v22) = v47 & 1;
  *(unsigned char *)(v29 + 16) = v47 & 1;
  *(void *)(v27 + v24) = v42;
  *(void *)(v27 + v25) = v40;
  id v32 = (void *)(v27 + v26);
  uint64_t v33 = v48;
  *id v32 = v46;
  v32[1] = v33;
  *(void *)(v27 + ((v26 + 23) & 0xFFFFFFFFFFFFFFF8)) = v50;
  aBlock[4] = sub_100B54F1C;
  void aBlock[5] = v27;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_1004B5480;
  aBlock[3] = &unk_1015E7D68;
  int64_t v34 = _Block_copy(aBlock);
  swift_bridgeObjectRetain();
  swift_retain();
  sub_100B54FFC(v30, v31, v22);
  swift_retain();
  swift_retain();
  unint64_t v35 = v49;
  static DispatchQoS.unspecified.getter();
  uint64_t v57 = _swiftEmptyArrayStorage;
  sub_100B22DA4((unint64_t *)&qword_10163B7E0, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
  sub_10000588C((uint64_t *)&unk_10163F350);
  sub_100062734((unint64_t *)&qword_10163B7F0, (uint64_t *)&unk_10163F350);
  uint64_t v37 = v52;
  uint64_t v36 = v53;
  dispatch thunk of SetAlgebra.init<A>(_:)();
  OS_dispatch_queue.async(group:qos:flags:execute:)();
  _Block_release(v34);
  (*(void (**)(char *, uint64_t))(v56 + 8))(v37, v36);
  (*(void (**)(char *, uint64_t))(v54 + 8))(v35, v55);
  return swift_release();
}

uint64_t sub_100B12168(uint64_t a1, uint64_t a2, uint64_t (*a3)(void), uint64_t a4, uint64_t a5, uint64_t a6, char a7, uint64_t a8, uint64_t a9, void (*a10)(uint64_t, uint64_t), uint64_t a11)
{
  uint64_t v166 = a5;
  uint64_t v165 = a2;
  uint64_t v158 = type metadata accessor for CloudKitChangeSet(0);
  uint64_t v18 = __chkstk_darwin(v158);
  unint64_t v20 = (unint64_t)&v145 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v18);
  uint64_t v152 = (char *)&v145 - v21;
  uint64_t v22 = sub_10000588C(&qword_10163CB68);
  __chkstk_darwin(v22 - 8);
  unint64_t v24 = (id *)((char *)&v145 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v25 = sub_10000588C(&qword_1016426E8);
  __chkstk_darwin(v25 - 8);
  uint64_t v27 = (char *)&v145 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v156 = type metadata accessor for BeaconStoreFileRecord();
  uint64_t v160 = *(void *)(v156 - 8);
  uint64_t v28 = __chkstk_darwin(v156);
  uint64_t v155 = (uint64_t)&v145 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v28);
  uint64_t v154 = (uint64_t)&v145 - v30;
  uint64_t v31 = mach_continuous_time();
  BOOL v32 = v31 >= a1;
  Swift::UInt64 v33 = v31 - a1;
  if (!v32) {
    goto LABEL_118;
  }
  uint64_t v161 = a11;
  uint64_t v162 = a10;
  double v11 = (double)convertToNanoseconds(_:)(v33) / 1000000.0;
  p_ivar_base_size = &AnalyticsEvent.ivar_base_size;
  uint64_t v159 = a4;
  if (a7)
  {
    uint64_t v175 = (void *)v166;
    swift_errorRetain();
    sub_10000588C(&qword_101638D40);
    swift_willThrowTypedImpl();
    goto LABEL_103;
  }
  uint64_t v149 = v27;
  uint64_t v153 = v24;
  uint64_t v157 = a8;
  unint64_t v147 = v20;
  uint64_t v150 = a3;
  uint64_t v35 = *(void *)(a6 + 64);
  uint64_t v168 = a6 + 64;
  uint64_t v164 = a9;
  uint64_t v36 = 1 << *(unsigned char *)(a6 + 32);
  uint64_t v37 = -1;
  if (v36 < 64) {
    uint64_t v37 = ~(-1 << v36);
  }
  a4 = v37 & v35;
  int64_t v170 = (unint64_t)(v36 + 63) >> 6;
  uint64_t v148 = (void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v160 + 56);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  uint64_t v38 = 0;
  uint64_t v169 = 0;
  uint64_t v151 = _swiftEmptyArrayStorage;
  uint64_t v163 = _swiftEmptyDictionarySingleton;
  a3 = (uint64_t (*)(void))qword_10170E9E8;
  *(void *)&long long v39 = 138412546;
  long long v167 = v39;
  while (a4)
  {
    unint64_t v40 = __clz(__rbit64(a4));
    a4 &= a4 - 1;
    unint64_t v41 = v40 | (v38 << 6);
LABEL_22:
    uint64_t v45 = *(void **)(*(void *)(a6 + 48) + 8 * v41);
    uint64_t v46 = *(void *)(a6 + 56) + 16 * v41;
    if (*(unsigned char *)(v46 + 8) == 1)
    {
      uint64_t v47 = *(void *)v46;
      sub_10033093C(*(void *)v46, 1);
      id v48 = v45;
      sub_10033093C(v47, 1);
      id v49 = v48;
      sub_10033093C(v47, 1);
      if (*((void *)p_ivar_base_size + 490) != -1) {
        swift_once();
      }
      uint64_t v50 = type metadata accessor for Logger();
      sub_100010324(v50, (uint64_t)a3);
      unint64_t v20 = (unint64_t)v49;
      sub_10033093C(v47, 1);
      uint64_t v51 = Logger.logObject.getter();
      os_log_type_t v52 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v51, v52))
      {
        uint64_t v53 = swift_slowAlloc();
        uint64_t v54 = (void *)swift_slowAlloc();
        uint64_t v171 = a4;
        uint64_t v55 = v38;
        uint64_t v56 = a3;
        uint64_t v57 = a6;
        BOOL v58 = p_ivar_base_size;
        uint64_t v59 = v54;
        *(_DWORD *)uint64_t v53 = v167;
        *(void *)(v53 + 4) = v20;
        void *v54 = v20;
        *(_WORD *)(v53 + 12) = 2114;
        uint64_t v60 = _convertErrorToNSError(_:)();
        *(void *)(v53 + 14) = v60;
        v59[1] = v60;
        sub_100173E88(v47, 1);
        _os_log_impl((void *)&_mh_execute_header, v51, v52, "Unexpected error deleting recordID [%@]: %{public}@", (uint8_t *)v53, 0x16u);
        sub_10000588C((uint64_t *)&unk_101638EA0);
        swift_arrayDestroy();
        p_ivar_base_size = v58;
        a6 = v57;
        a3 = v56;
        uint64_t v38 = v55;
        a4 = v171;
        swift_slowDealloc();
        swift_slowDealloc();

        sub_100173E88(v47, 1);
        sub_100173E88(v47, 1);
      }
      else
      {

        sub_100173E88(v47, 1);
        sub_100173E88(v47, 1);
        sub_100173E88(v47, 1);
        unint64_t v20 = (unint64_t)v51;
      }

      sub_100173E88(v47, 1);
    }
    else
    {
      uint64_t v61 = v157;
      uint64_t v62 = *(void *)(v157 + 16);
      id v63 = v45;
      unint64_t v20 = (unint64_t)v63;
      if (v62 && (unint64_t v64 = sub_100724354((uint64_t)v63), (v65 & 1) != 0))
      {
        uint64_t v66 = *(void *)(v160 + 72);
        uint64_t v67 = v154;
        sub_100B30D0C(*(void *)(v61 + 56) + v66 * v64, v154, (uint64_t (*)(void))type metadata accessor for BeaconStoreFileRecord);
        sub_100B30DB4(v67, v155, (uint64_t (*)(void))type metadata accessor for BeaconStoreFileRecord);
        uint64_t v68 = (uint64_t)v163;
        int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
        uint64_t v175 = (void *)v68;
        unint64_t v71 = sub_100724354(v20);
        uint64_t v72 = *(void *)(v68 + 16);
        BOOL v73 = (v70 & 1) == 0;
        uint64_t v74 = v72 + v73;
        if (__OFADD__(v72, v73)) {
          goto LABEL_121;
        }
        char v75 = v70;
        if (*(void *)(v68 + 24) >= v74)
        {
          if ((isUniquelyReferenced_nonNull_native & 1) == 0) {
            sub_100E86D78();
          }
        }
        else
        {
          sub_100E771EC(v74, isUniquelyReferenced_nonNull_native);
          unint64_t v76 = sub_100724354(v20);
          if ((v75 & 1) != (v77 & 1))
          {
            sub_10001D4B0(0, &qword_10163CB60);
            uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
            __break(1u);
            return result;
          }
          unint64_t v71 = v76;
        }
        unint64_t v85 = v175;
        uint64_t v163 = v175;
        if (v75)
        {
          sub_100B5E098(v155, v175[7] + v71 * v66, (uint64_t (*)(void))type metadata accessor for BeaconStoreFileRecord);
        }
        else
        {
          v175[(v71 >> 6) + 8] |= 1 << v71;
          *(void *)(v85[6] + 8 * v71) = v20;
          sub_100B30DB4(v155, v85[7] + v71 * v66, (uint64_t (*)(void))type metadata accessor for BeaconStoreFileRecord);
          uint64_t v86 = v85[2];
          BOOL v42 = __OFADD__(v86, 1);
          uint64_t v87 = v86 + 1;
          if (v42) {
            goto LABEL_122;
          }
          v85[2] = v87;
          id v88 = (id)v20;
        }
        p_ivar_base_size = (_DWORD *)(&AnalyticsEvent + 8);

        swift_bridgeObjectRelease();
      }
      else
      {
        uint64_t v78 = (uint64_t)v163;
        swift_bridgeObjectRetain();
        unint64_t v79 = sub_100724354(v20);
        char v81 = v80;
        swift_bridgeObjectRelease();
        if (v81)
        {
          int v82 = swift_isUniquelyReferenced_nonNull_native();
          uint64_t v175 = (void *)v78;
          if (!v82)
          {
            sub_100E86D78();
            uint64_t v78 = (uint64_t)v175;
          }

          uint64_t v83 = (uint64_t)v149;
          sub_100B30DB4(*(void *)(v78 + 56) + *(void *)(v160 + 72) * v79, (uint64_t)v149, (uint64_t (*)(void))type metadata accessor for BeaconStoreFileRecord);
          uint64_t v163 = (void *)v78;
          sub_100169D40(v79, v78);
          swift_bridgeObjectRelease();
          uint64_t v84 = 0;
        }
        else
        {
          uint64_t v84 = 1;
          uint64_t v83 = (uint64_t)v149;
        }
        (*v148)(v83, v84, 1, v156);

        sub_10001DAB4(v83, &qword_1016426E8);
      }
      uint64_t v89 = *(void *)(v165 + *(int *)(v158 + 24));
      if (!*(void *)(v89 + 16))
      {
        uint64_t v104 = type metadata accessor for CloudKitChangeSet.TombstoneInfo(0);
        uint64_t v103 = v153;
        (*(void (**)(id *, uint64_t, uint64_t, uint64_t))(*(void *)(v104 - 8) + 56))(v153, 1, 1, v104);
        goto LABEL_56;
      }
      id v90 = (id)v20;
      unint64_t v91 = sub_100724354((uint64_t)v90);
      if (v92)
      {
        unint64_t v93 = v91;
        uint64_t v171 = a4;
        uint64_t v94 = v38;
        uint64_t v95 = a3;
        uint64_t v96 = a6;
        uint64_t v97 = p_ivar_base_size;
        uint64_t v98 = *(void *)(v89 + 56);
        uint64_t v99 = type metadata accessor for CloudKitChangeSet.TombstoneInfo(0);
        uint64_t v100 = *(void *)(v99 - 8);
        id v146 = v90;
        uint64_t v101 = v100;
        uint64_t v102 = v98 + *(void *)(v100 + 72) * v93;
        p_ivar_base_size = v97;
        a6 = v96;
        a3 = v95;
        uint64_t v38 = v94;
        a4 = v171;
        uint64_t v103 = v153;
        sub_100B30D0C(v102, (uint64_t)v153, type metadata accessor for CloudKitChangeSet.TombstoneInfo);
        (*(void (**)(id *, void, uint64_t, uint64_t))(v101 + 56))(v103, 0, 1, v99);
        id v90 = v146;
      }
      else
      {
        uint64_t v99 = type metadata accessor for CloudKitChangeSet.TombstoneInfo(0);
        uint64_t v103 = v153;
        (*(void (**)(id *, uint64_t, uint64_t, uint64_t))(*(void *)(v99 - 8) + 56))(v153, 1, 1, v99);
      }

      type metadata accessor for CloudKitChangeSet.TombstoneInfo(0);
      if ((*(unsigned int (**)(id *, uint64_t, uint64_t))(*(void *)(v99 - 8) + 48))(v103, 1, v99) == 1)
      {
LABEL_56:

        sub_10001DAB4((uint64_t)v103, &qword_10163CB68);
      }
      else
      {
        unint64_t v20 = (unint64_t)v90;
        uint64_t v105 = a4;
        id v106 = *v103;
        sub_100B310AC((uint64_t)v103, type metadata accessor for CloudKitChangeSet.TombstoneInfo);
        type metadata accessor for BeaconStore(0);
        uint64_t v107 = v169;
        sub_100B136C0(v106, (uint64_t)&v172);
        if (v107)
        {
          swift_errorRelease();
          uint64_t v169 = 0;
          uint64_t v174 = 0;
          long long v172 = 0u;
          long long v173 = 0u;
          goto LABEL_60;
        }
        uint64_t v169 = 0;
        if (*((void *)&v173 + 1))
        {
          sub_10001CEB0(&v172, (uint64_t)&v175);
          sub_10001D010((uint64_t)&v175, (uint64_t)&v172);
          a4 = v105;
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
            uint64_t v151 = sub_100A6F9DC(0, v151[2] + 1, 1, v151);
          }
          uint64_t v108 = (void *)v20;
          unint64_t v20 = v151[2];
          unint64_t v109 = v151[3];
          if (v20 >= v109 >> 1) {
            uint64_t v151 = sub_100A6F9DC((void *)(v109 > 1), v20 + 1, 1, v151);
          }
          unint64_t v110 = v151;
          v151[2] = v20 + 1;
          sub_10001CEB0(&v172, (uint64_t)&v110[5 * v20 + 4]);

          _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)&v175);
        }
        else
        {
LABEL_60:
          a4 = v105;

          sub_10001DAB4((uint64_t)&v172, &qword_10163A2B0);
        }
      }
    }
  }
  BOOL v42 = __OFADD__(v38++, 1);
  if (v42)
  {
    __break(1u);
    goto LABEL_116;
  }
  if (v38 >= v170) {
    goto LABEL_67;
  }
  unint64_t v43 = *(void *)(v168 + 8 * v38);
  if (v43)
  {
LABEL_21:
    a4 = (v43 - 1) & v43;
    unint64_t v41 = __clz(__rbit64(v43)) + (v38 << 6);
    goto LABEL_22;
  }
  uint64_t v44 = v38 + 1;
  if (v38 + 1 >= v170) {
    goto LABEL_67;
  }
  unint64_t v43 = *(void *)(v168 + 8 * v44);
  if (v43) {
    goto LABEL_20;
  }
  uint64_t v44 = v38 + 2;
  if (v38 + 2 >= v170) {
    goto LABEL_67;
  }
  unint64_t v43 = *(void *)(v168 + 8 * v44);
  if (v43)
  {
LABEL_20:
    uint64_t v38 = v44;
    goto LABEL_21;
  }
  uint64_t v44 = v38 + 3;
  if (v38 + 3 < v170)
  {
    unint64_t v43 = *(void *)(v168 + 8 * v44);
    if (!v43)
    {
      while (1)
      {
        uint64_t v38 = v44 + 1;
        if (__OFADD__(v44, 1)) {
          break;
        }
        if (v38 >= v170) {
          goto LABEL_67;
        }
        unint64_t v43 = *(void *)(v168 + 8 * v38);
        ++v44;
        if (v43) {
          goto LABEL_21;
        }
      }
LABEL_116:
      __break(1u);
LABEL_117:
      __break(1u);
LABEL_118:
      __break(1u);
      goto LABEL_119;
    }
    goto LABEL_20;
  }
LABEL_67:
  swift_release();
  uint64_t v111 = swift_bridgeObjectRetain();
  sub_100B557E0(v111);
  swift_bridgeObjectRelease();
  int64_t v112 = 0;
  a3 = (uint64_t (*)(void))(v166 + 64);
  uint64_t v113 = 1 << *(unsigned char *)(v166 + 32);
  uint64_t v114 = -1;
  if (v113 < 64) {
    uint64_t v114 = ~(-1 << v113);
  }
  uint64_t v38 = v114 & *(void *)(v166 + 64);
  int64_t v115 = (unint64_t)(v113 + 63) >> 6;
  if (v38) {
    goto LABEL_72;
  }
LABEL_73:
  BOOL v42 = __OFADD__(v112++, 1);
  if (v42) {
    goto LABEL_117;
  }
  if (v112 >= v115) {
    goto LABEL_96;
  }
  unint64_t v118 = *((void *)a3 + v112);
  if (v118)
  {
LABEL_83:
    uint64_t v38 = (v118 - 1) & v118;
    for (unint64_t i = __clz(__rbit64(v118)) + (v112 << 6); ; unint64_t i = v116 | (v112 << 6))
    {
      uint64_t v120 = *(void *)(v166 + 56) + 16 * i;
      uint64_t v121 = *(void **)v120;
      if (*(unsigned char *)(v120 + 8))
      {
        uint64_t v175 = *(void **)v120;
        swift_errorRetain();
        sub_10000588C(&qword_101638D40);
        swift_willThrowTypedImpl();
        swift_bridgeObjectRelease();
        swift_release();
        swift_bridgeObjectRelease();
        uint64_t v166 = (uint64_t)v121;
        goto LABEL_102;
      }
      type metadata accessor for BeaconStore(0);
      uint64_t v122 = v121;
      a4 = v169;
      sub_100B136C0(v122, (uint64_t)&v172);
      uint64_t v169 = a4;
      if (a4)
      {
        sub_100173E7C(v121, 0);
        sub_100173E7C(v121, 0);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_release();
        goto LABEL_101;
      }
      if (*((void *)&v173 + 1))
      {
        sub_10001CEB0(&v172, (uint64_t)&v175);
        uint64_t v123 = v176;
        unint64_t v20 = v177;
        sub_10001CD44(&v175, v176);
        a4 = v169;
        sub_10009DD8C(*(void *)(v164 + 160), v123);
        uint64_t v169 = a4;
        if (a4)
        {
          sub_100173E7C(v121, 0);
          sub_100173E7C(v121, 0);
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_release();
          _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)&v175);
LABEL_101:
          uint64_t v166 = v169;
LABEL_102:
          a4 = v159;
          a3 = v150;
          unint64_t v20 = v147;
          a8 = v157;
LABEL_103:
          sub_100B55048(a8);
          id v126 = [self standardUserDefaults];
          NSString v127 = String._bridgeToObjectiveC()();
          [v126 removeObjectForKey:v127];

          if (*((void *)p_ivar_base_size + 490) == -1)
          {
LABEL_104:
            uint64_t v128 = type metadata accessor for Logger();
            sub_100010324(v128, (uint64_t)qword_10170E9E8);
            sub_100B30D0C(v165, v20, type metadata accessor for CloudKitChangeSet);
            variable initialization expression of CurrentLocationMonitor._currentAuthorizationStatus();
            variable initialization expression of CurrentLocationMonitor._currentAuthorizationStatus();
            unint64_t v129 = Logger.logObject.getter();
            os_log_type_t v130 = static os_log_type_t.default.getter();
            if (os_log_type_enabled(v129, v130))
            {
              uint64_t v131 = swift_slowAlloc();
              uint64_t v175 = (void *)swift_slowAlloc();
              *(_DWORD *)uint64_t v131 = 136446722;
              unint64_t v132 = sub_100EE1480();
              *(void *)&long long v172 = sub_1008FA0F0(v132, v133, (uint64_t *)&v175);
              UnsafeMutableRawBufferPointer.copyMemory(from:)();
              swift_bridgeObjectRelease();
              sub_100B310AC(v20, type metadata accessor for CloudKitChangeSet);
              *(_WORD *)(v131 + 12) = 1040;
              LODWORD(v172) = 0;
              UnsafeMutableRawBufferPointer.copyMemory(from:)();
              *(_WORD *)(v131 + 18) = 2048;
              *(double *)&long long v172 = v11;
              UnsafeMutableRawBufferPointer.copyMemory(from:)();
              _os_log_impl((void *)&_mh_execute_header, v129, v130, "Done applying %{public}s duration: %.*fms [Failure]", (uint8_t *)v131, 0x1Cu);
              swift_arrayDestroy();
              swift_slowDealloc();
              a4 = v159;
              swift_slowDealloc();
            }
            else
            {
              sub_100B310AC(v20, type metadata accessor for CloudKitChangeSet);
            }

            uint64_t v134 = v162;
            uint64_t v135 = v166;
            swift_errorRetain();
            v134(v135, 1);
            swift_errorRelease();
            swift_errorRelease();
            return sub_100B14040(v165, a3, a4, "Calling wakeChangeSetQueue() after completing %{public}s");
          }
LABEL_119:
          swift_once();
          goto LABEL_104;
        }
        sub_100173E7C(v121, 0);
        sub_100173E7C(v121, 0);
        _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)&v175);
        if (!v38) {
          goto LABEL_73;
        }
      }
      else
      {
        sub_100173E7C(v121, 0);
        sub_100173E7C(v121, 0);
        sub_10001DAB4((uint64_t)&v172, &qword_10163A2B0);
        if (!v38) {
          goto LABEL_73;
        }
      }
LABEL_72:
      unint64_t v116 = __clz(__rbit64(v38));
      v38 &= v38 - 1;
    }
  }
  int64_t v119 = v112 + 1;
  if (v112 + 1 >= v115) {
    goto LABEL_96;
  }
  unint64_t v118 = *((void *)a3 + v119);
  if (v118) {
    goto LABEL_82;
  }
  int64_t v119 = v112 + 2;
  if (v112 + 2 >= v115) {
    goto LABEL_96;
  }
  unint64_t v118 = *((void *)a3 + v119);
  if (v118) {
    goto LABEL_82;
  }
  int64_t v119 = v112 + 3;
  if (v112 + 3 >= v115)
  {
LABEL_96:
    swift_release();
    v162(0, 0);
    sub_100A9EE98();
    uint64_t v124 = v151[2];
    uint64_t v38 = (uint64_t)v152;
    if (v124)
    {
      uint64_t v125 = v151 + 4;
      swift_bridgeObjectRetain();
      do
      {
        PassthroughSubject.send(_:)();
        v125 += 5;
        --v124;
      }
      while (v124);
      swift_bridgeObjectRelease_n();
    }
    else
    {
      swift_bridgeObjectRelease();
    }
    swift_bridgeObjectRelease();
    id v137 = [self standardUserDefaults];
    NSString v138 = String._bridgeToObjectiveC()();
    [v137 removeObjectForKey:v138];

    if (*((void *)p_ivar_base_size + 490) != -1) {
      goto LABEL_123;
    }
  }
  else
  {
    unint64_t v118 = *((void *)a3 + v119);
    if (v118)
    {
LABEL_82:
      int64_t v112 = v119;
      goto LABEL_83;
    }
    while (1)
    {
      int64_t v112 = v119 + 1;
      if (__OFADD__(v119, 1)) {
        break;
      }
      if (v112 >= v115) {
        goto LABEL_96;
      }
      unint64_t v118 = *((void *)a3 + v112);
      ++v119;
      if (v118) {
        goto LABEL_83;
      }
    }
    __break(1u);
LABEL_121:
    __break(1u);
LABEL_122:
    __break(1u);
LABEL_123:
    swift_once();
  }
  uint64_t v139 = type metadata accessor for Logger();
  sub_100010324(v139, (uint64_t)qword_10170E9E8);
  sub_100B30D0C(v165, v38, type metadata accessor for CloudKitChangeSet);
  variable initialization expression of CurrentLocationMonitor._currentAuthorizationStatus();
  variable initialization expression of CurrentLocationMonitor._currentAuthorizationStatus();
  uint64_t v140 = Logger.logObject.getter();
  os_log_type_t v141 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v140, v141))
  {
    uint64_t v142 = swift_slowAlloc();
    uint64_t v175 = (void *)swift_slowAlloc();
    *(_DWORD *)uint64_t v142 = 136446722;
    unint64_t v143 = sub_100EE1480();
    *(void *)&long long v172 = sub_1008FA0F0(v143, v144, (uint64_t *)&v175);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    sub_100B310AC(v38, type metadata accessor for CloudKitChangeSet);
    *(_WORD *)(v142 + 12) = 1040;
    LODWORD(v172) = 0;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v142 + 18) = 2048;
    *(double *)&long long v172 = v11;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl((void *)&_mh_execute_header, v140, v141, "Done applying %{public}s duration: %.*fms [Success]", (uint8_t *)v142, 0x1Cu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    sub_100B310AC(v38, type metadata accessor for CloudKitChangeSet);
  }

  a4 = v159;
  a3 = v150;
  return sub_100B14040(v165, a3, a4, "Calling wakeChangeSetQueue() after completing %{public}s");
}

double sub_100B136C0@<D0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v5 = CKRecord.recordType.getter();
  char v7 = sub_100905B58(v5, v6);
  swift_bridgeObjectRelease();
  switch(v7)
  {
    case 1:
      *(void *)(a2 + 24) = type metadata accessor for SharedBeaconRecord(0);
      *(void *)(a2 + 32) = sub_100B22DA4(&qword_101642730, (void (*)(uint64_t))type metadata accessor for SharedBeaconRecord);
      uint64_t v10 = sub_10001D958((uint64_t *)a2);
      sub_10120C214(a1, v10);
      if (v2) {
        goto LABEL_35;
      }
      break;
    case 2:
      *(void *)(a2 + 24) = type metadata accessor for OwnedBeaconGroup(0);
      *(void *)(a2 + 32) = sub_100B22DA4(&qword_101642708, (void (*)(uint64_t))type metadata accessor for OwnedBeaconGroup);
      double v11 = sub_10001D958((uint64_t *)a2);
      sub_1004CFDAC(a1, (uint64_t)v11);
      if (v2) {
        goto LABEL_35;
      }
      break;
    case 3:
      *(void *)(a2 + 24) = type metadata accessor for ShareRecord();
      *(void *)(a2 + 32) = sub_100B22DA4(&qword_101642728, (void (*)(uint64_t))type metadata accessor for ShareRecord);
      uint64_t v12 = sub_10001D958((uint64_t *)a2);
      sub_1000C3DBC(a1, v12);
      if (v2) {
        goto LABEL_35;
      }
      break;
    case 4:
      *(void *)(a2 + 24) = type metadata accessor for BeaconNamingRecord();
      *(void *)(a2 + 32) = sub_100B22DA4(&qword_1016426F8, (void (*)(uint64_t))type metadata accessor for BeaconNamingRecord);
      uint64_t v13 = sub_10001D958((uint64_t *)a2);
      sub_100DBEB18(a1, v13);
      if (v2) {
        goto LABEL_35;
      }
      break;
    case 5:
      *(void *)(a2 + 24) = type metadata accessor for NotifyWhenFoundRecord();
      *(void *)(a2 + 32) = sub_100B22DA4(&qword_101659298, (void (*)(uint64_t))type metadata accessor for NotifyWhenFoundRecord);
      id v14 = sub_10001D958((uint64_t *)a2);
      sub_10048EE30(a1, v14);
      if (v2) {
        goto LABEL_35;
      }
      break;
    case 6:
      *(void *)(a2 + 24) = type metadata accessor for BeaconEstimatedLocation();
      *(void *)(a2 + 32) = sub_100B22DA4(&qword_1016426F0, (void (*)(uint64_t))type metadata accessor for BeaconEstimatedLocation);
      uint64_t v15 = sub_10001D958((uint64_t *)a2);
      sub_100CC7D98(a1, v15);
      if (v2) {
        goto LABEL_35;
      }
      break;
    case 7:
      *(void *)(a2 + 24) = type metadata accessor for LeashRecord();
      *(void *)(a2 + 32) = sub_100B22DA4(&qword_1016429E0, (void (*)(uint64_t))type metadata accessor for LeashRecord);
      uint64_t v16 = sub_10001D958((uint64_t *)a2);
      sub_10126128C(a1, v16);
      if (v2) {
        goto LABEL_35;
      }
      break;
    case 8:
      *(void *)(a2 + 24) = type metadata accessor for SafeLocation();
      *(void *)(a2 + 32) = sub_100B22DA4(&qword_1016429C0, (void (*)(uint64_t))type metadata accessor for SafeLocation);
      uint64_t v17 = sub_10001D958((uint64_t *)a2);
      sub_100F1047C(a1, v17);
      if (v2) {
        goto LABEL_35;
      }
      break;
    case 9:
      *(void *)(a2 + 24) = type metadata accessor for LostModeRecord();
      *(void *)(a2 + 32) = sub_100B22DA4(&qword_101642880, (void (*)(uint64_t))type metadata accessor for LostModeRecord);
      uint64_t v18 = sub_10001D958((uint64_t *)a2);
      sub_100E92AFC(a1, v18);
      if (v2) {
        goto LABEL_35;
      }
      break;
    case 10:
      *(void *)(a2 + 24) = type metadata accessor for KeyAlignmentRecord();
      *(void *)(a2 + 32) = sub_100B22DA4(&qword_101642700, (void (*)(uint64_t))type metadata accessor for KeyAlignmentRecord);
      uint64_t v19 = sub_10001D958((uint64_t *)a2);
      sub_1000BFAD8(a1, v19);
      if (v2) {
        goto LABEL_35;
      }
      break;
    case 11:
      *(void *)(a2 + 24) = type metadata accessor for OwnedDeviceKeyRecord();
      *(void *)(a2 + 32) = sub_100B22DA4(&qword_101642710, (void (*)(uint64_t))type metadata accessor for OwnedDeviceKeyRecord);
      unint64_t v20 = sub_10001D958((uint64_t *)a2);
      sub_1011370FC(a1, v20);
      if (v2) {
        goto LABEL_35;
      }
      break;
    case 12:
      *(void *)(a2 + 24) = type metadata accessor for OwnerPeerTrust();
      *(void *)(a2 + 32) = sub_100B22DA4(&qword_101659290, (void (*)(uint64_t))type metadata accessor for OwnerPeerTrust);
      uint64_t v21 = sub_10001D958((uint64_t *)a2);
      sub_1002A67C0(a1, v21);
      if (v2) {
        goto LABEL_35;
      }
      break;
    case 13:
      *(void *)(a2 + 24) = type metadata accessor for MemberPeerTrust();
      *(void *)(a2 + 32) = sub_100B22DA4(&qword_101659288, (void (*)(uint64_t))type metadata accessor for MemberPeerTrust);
      uint64_t v22 = sub_10001D958((uint64_t *)a2);
      sub_100EB4244(a1, v22);
      if (v2) {
        goto LABEL_35;
      }
      break;
    case 14:
      *(void *)(a2 + 24) = type metadata accessor for OwnerSharingCircle();
      *(void *)(a2 + 32) = sub_100B22DA4(&qword_101659280, (void (*)(uint64_t))type metadata accessor for OwnerSharingCircle);
      uint64_t v23 = sub_10001D958((uint64_t *)a2);
      sub_100DF469C(a1, v23);
      if (v2) {
        goto LABEL_35;
      }
      break;
    case 15:
      *(void *)(a2 + 24) = type metadata accessor for MemberSharingCircle();
      *(void *)(a2 + 32) = sub_100B22DA4(&qword_101659278, (void (*)(uint64_t))type metadata accessor for MemberSharingCircle);
      unint64_t v24 = sub_10001D958((uint64_t *)a2);
      sub_1002C302C(a1, v24);
      if (v2) {
        goto LABEL_35;
      }
      break;
    case 16:
      *(void *)(a2 + 24) = type metadata accessor for SharingCircleSecret();
      *(void *)(a2 + 32) = sub_100B22DA4(&qword_101659270, (void (*)(uint64_t))type metadata accessor for SharingCircleSecret);
      uint64_t v25 = sub_10001D958((uint64_t *)a2);
      sub_100D26BC4(a1, v25);
      if (v2) {
        goto LABEL_35;
      }
      break;
    case 17:
      if (qword_101636F50 != -1) {
        swift_once();
      }
      uint64_t v26 = type metadata accessor for Logger();
      sub_100010324(v26, (uint64_t)qword_10170E9E8);
      id v27 = a1;
      uint64_t v28 = Logger.logObject.getter();
      os_log_type_t v29 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v28, v29))
      {
        uint64_t v30 = (uint8_t *)swift_slowAlloc();
        uint64_t v33 = swift_slowAlloc();
        *(_DWORD *)uint64_t v30 = 136446210;
        uint64_t v31 = CKRecord.recordType.getter();
        sub_1008FA0F0(v31, v32, &v33);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();

        swift_bridgeObjectRelease();
        _os_log_impl((void *)&_mh_execute_header, v28, v29, "Unexpected recordType: %{public}s", v30, 0xCu);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
      }
      else
      {
      }
      *(void *)(a2 + 32) = 0;
      double result = 0.0;
      *(_OWORD *)a2 = 0u;
      *(_OWORD *)(a2 + 16) = 0u;
      break;
    default:
      *(void *)(a2 + 24) = type metadata accessor for OwnedBeaconRecord();
      *(void *)(a2 + 32) = sub_100B22DA4(&qword_10165DD40, (void (*)(uint64_t))type metadata accessor for OwnedBeaconRecord);
      uint64_t v8 = sub_10001D958((uint64_t *)a2);
      sub_100D19D5C(a1, v8);
      if (v2) {
LABEL_35:
      }
        sub_10005FE98(a2);
      break;
  }
  return result;
}

uint64_t sub_100B14040(uint64_t a1, uint64_t (*a2)(void), uint64_t a3, const char *a4)
{
  uint64_t v8 = type metadata accessor for CloudKitChangeSet(0);
  __chkstk_darwin(v8 - 8);
  uint64_t v10 = (char *)v18 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_101636F50 != -1) {
    swift_once();
  }
  uint64_t v11 = type metadata accessor for Logger();
  sub_100010324(v11, (uint64_t)qword_10170E9E8);
  sub_100B30D0C(a1, (uint64_t)v10, type metadata accessor for CloudKitChangeSet);
  uint64_t v12 = Logger.logObject.getter();
  os_log_type_t v13 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v12, v13))
  {
    id v14 = (uint8_t *)swift_slowAlloc();
    uint64_t v19 = swift_slowAlloc();
    *(_DWORD *)id v14 = 136446210;
    v18[1] = a3;
    unint64_t v15 = sub_100EE1480();
    void v18[2] = sub_1008FA0F0(v15, v16, &v19);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    sub_100B310AC((uint64_t)v10, type metadata accessor for CloudKitChangeSet);
    _os_log_impl((void *)&_mh_execute_header, v12, v13, a4, v14, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    sub_100B310AC((uint64_t)v10, type metadata accessor for CloudKitChangeSet);
  }

  return a2();
}

uint64_t sub_100B14290(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = sub_10000588C(&qword_101659508);
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  uint64_t v9 = (char *)v14 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = sub_10115A150((uint64_t)&off_1015A58F0);
  if (qword_101637680 != -1) {
    swift_once();
  }
  swift_retain();
  uint64_t v11 = AnyCurrentValuePublisher.publisher.getter();
  swift_release();
  v14[3] = v11;
  *(void *)(swift_allocObject() + 16) = v10;
  sub_10000588C((uint64_t *)&unk_1016569C0);
  sub_100062734((unint64_t *)&qword_10163A518, (uint64_t *)&unk_1016569C0);
  Publisher.first(where:)();
  swift_release();
  swift_release();
  uint64_t v12 = (void *)swift_allocObject();
  void v12[2] = a1;
  v12[3] = a2;
  v12[4] = a3;
  sub_100062734(&qword_101659510, &qword_101659508);
  swift_retain();
  swift_retain();
  Publisher<>.sink(receiveValue:)();
  swift_release();
  (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
  AnyCancellable.store(in:)();
  return swift_release();
}

uint64_t sub_100B14514(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = (void *)swift_allocObject();
  void v6[2] = a2;
  v6[3] = a1;
  void v6[4] = a3;
  type metadata accessor for Transaction();
  swift_retain();
  swift_retain();
  static Transaction.named<A>(_:with:)();
  return swift_release();
}

uint64_t sub_100B145F4(char a1, void (*a2)(char *, uint64_t), uint64_t a3, uint64_t a4)
{
  uint64_t v50 = a2;
  uint64_t v7 = type metadata accessor for UUID();
  uint64_t v8 = *(void *)(v7 - 8);
  uint64_t v9 = __chkstk_darwin(v7);
  uint64_t v11 = (char *)&v47 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = __chkstk_darwin(v9);
  id v14 = (char *)&v47 - v13;
  uint64_t v15 = __chkstk_darwin(v12);
  uint64_t v17 = (char *)&v47 - v16;
  __chkstk_darwin(v15);
  uint64_t v19 = (char *)&v47 - v18;
  uint64_t v20 = sub_10000588C(&qword_101638CF0);
  uint64_t v21 = __chkstk_darwin(v20 - 8);
  uint64_t v23 = (char *)&v47 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t result = __chkstk_darwin(v21);
  if (a1)
  {
    uint64_t v47 = (uint8_t *)a3;
    uint64_t v48 = a4;
    id v49 = (char *)&v47 - v25;
    id v26 = [self standardUserDefaults];
    NSString v27 = String._bridgeToObjectiveC()();
    id v28 = [v26 stringForKey:v27];

    if (v28)
    {
      static String._unconditionallyBridgeFromObjectiveC(_:)();

      os_log_type_t v29 = v49;
      UUID.init(uuidString:)();
      uint64_t v30 = (uint64_t)v29;
      swift_bridgeObjectRelease();
    }
    else
    {
      uint64_t v30 = (uint64_t)v49;
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v8 + 56))(v49, 1, 1, v7);
    }
    sub_100F2BEB0((uint64_t)v19);
    uint64_t v31 = *(void (**)(char *, char *, uint64_t))(v8 + 16);
    v31(v17, v19, v7);
    sub_10001D074(v30, (uint64_t)v23, &qword_101638CF0);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v8 + 48))(v23, 1, v7) == 1)
    {
      sub_10001DAB4((uint64_t)v23, &qword_101638CF0);
      if (qword_101636F50 != -1) {
        swift_once();
      }
      uint64_t v32 = type metadata accessor for Logger();
      sub_100010324(v32, (uint64_t)qword_10170E9E8);
      uint64_t v33 = Logger.logObject.getter();
      os_log_type_t v34 = static os_log_type_t.default.getter();
      BOOL v35 = os_log_type_enabled(v33, v34);
      uint64_t v36 = v48;
      if (v35)
      {
        uint64_t v37 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)uint64_t v37 = 0;
        _os_log_impl((void *)&_mh_execute_header, v33, v34, "No lastDuplicateRecoveryBootSessionUUID on record", v37, 2u);
        swift_slowDealloc();
      }

      sub_100B14C64((uint64_t)v50, (uint64_t)v17, (uint64_t)v47, v36);
      uint64_t v38 = *(void (**)(char *, uint64_t))(v8 + 8);
      v38(v17, v7);
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v8 + 32))(v14, v23, v7);
      sub_100B22DA4((unint64_t *)&qword_10163B8F0, (void (*)(uint64_t))&type metadata accessor for UUID);
      if (dispatch thunk of static Equatable.== infix(_:_:)())
      {
        uint64_t v50 = *(void (**)(char *, uint64_t))(v8 + 8);
        v50(v17, v7);
        if (qword_101636F50 != -1) {
          swift_once();
        }
        uint64_t v39 = type metadata accessor for Logger();
        sub_100010324(v39, (uint64_t)qword_10170E9E8);
        v31(v11, v19, v7);
        unint64_t v40 = Logger.logObject.getter();
        os_log_type_t v41 = static os_log_type_t.default.getter();
        if (os_log_type_enabled(v40, v41))
        {
          BOOL v42 = (uint8_t *)swift_slowAlloc();
          uint64_t v48 = swift_slowAlloc();
          uint64_t v52 = v48;
          *(_DWORD *)BOOL v42 = 136315138;
          uint64_t v47 = v42 + 4;
          uint64_t v43 = UUID.uuidString.getter();
          uint64_t v51 = sub_1008FA0F0(v43, v44, &v52);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease();
          uint64_t v45 = v50;
          v50(v11, v7);
          _os_log_impl((void *)&_mh_execute_header, v40, v41, "removeDuplicateBeaconsCheck already ran for boot session: %s", v42, 0xCu);
          swift_arrayDestroy();
          swift_slowDealloc();
          swift_slowDealloc();
        }
        else
        {

          uint64_t v45 = v50;
          v50(v11, v7);
        }
        v45(v14, v7);
        v45(v19, v7);
        uint64_t v46 = (uint64_t)v49;
        return sub_10001DAB4(v46, &qword_101638CF0);
      }
      sub_100B14C64((uint64_t)v50, (uint64_t)v17, (uint64_t)v47, v48);
      uint64_t v38 = *(void (**)(char *, uint64_t))(v8 + 8);
      v38(v14, v7);
      v38(v17, v7);
    }
    v38(v19, v7);
    uint64_t v46 = v30;
    return sub_10001DAB4(v46, &qword_101638CF0);
  }
  return result;
}

uint64_t sub_100B14C64(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v18 = a4;
  uint64_t v7 = type metadata accessor for UUID();
  uint64_t v8 = *(void *)(v7 - 8);
  uint64_t v9 = *(void *)(v8 + 64);
  __chkstk_darwin(v7);
  uint64_t v10 = (char *)&v17 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t))(v8 + 16))(v10, a2, v7);
  unint64_t v11 = (*(unsigned __int8 *)(v8 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80);
  unint64_t v12 = (v9 + v11 + 7) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v13 = (v12 + 15) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v14 = swift_allocObject();
  (*(void (**)(unint64_t, char *, uint64_t))(v8 + 32))(v14 + v11, v10, v7);
  *(void *)(v14 + v12) = a1;
  *(void *)(v14 + v13) = a3;
  *(void *)(v14 + ((v13 + 15) & 0xFFFFFFFFFFFFFFF8)) = v18;
  uint64_t v15 = (void *)swift_allocObject();
  void v15[2] = a1;
  _OWORD v15[3] = sub_100B5FB34;
  void v15[4] = v14;
  swift_retain_n();
  swift_retain();
  swift_retain();
  sub_100AF0730((uint64_t)sub_100B5FC04, (uint64_t)v15);
  swift_release();
  return swift_release();
}

void sub_100B14E34(char a1, uint64_t a2, void *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v10 = type metadata accessor for UUID();
  uint64_t v11 = *(void *)(v10 - 8);
  uint64_t v12 = *(void *)(v11 + 64);
  __chkstk_darwin(v10);
  if (a1)
  {
    (*(void (**)(char *, uint64_t, uint64_t))(v11 + 16))((char *)v22 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0), a2, v10);
    unint64_t v13 = (*(unsigned __int8 *)(v11 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v11 + 80);
    uint64_t v14 = (char *)swift_allocObject();
    *((void *)v14 + 2) = a4;
    (*(void (**)(char *, char *, uint64_t))(v11 + 32))(&v14[v13], (char *)v22 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0), v10);
    *(void *)&v14[(v12 + v13 + 7) & 0xFFFFFFFFFFFFFFF8] = a5;
    uint64_t v15 = type metadata accessor for Transaction();
    __chkstk_darwin(v15);
    v22[-4] = a3;
    LOBYTE(v22[-3]) = 0;
    v22[-2] = sub_100B5FD50;
    v22[-1] = v14;
    swift_retain();
    static Transaction.named<A>(_:with:)();
    swift_release();
  }
  else
  {
    if (qword_101636F50 != -1) {
      swift_once();
    }
    uint64_t v16 = type metadata accessor for Logger();
    sub_100010324(v16, (uint64_t)qword_10170E9E8);
    uint64_t v17 = Logger.logObject.getter();
    os_log_type_t v18 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v17, v18))
    {
      uint64_t v19 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v19 = 0;
      _os_log_impl((void *)&_mh_execute_header, v17, v18, "No duplicate beacons detected.", v19, 2u);
      swift_slowDealloc();
    }

    id v20 = [self standardUserDefaults];
    UUID.uuidString.getter();
    NSString v21 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    v22[0] = String._bridgeToObjectiveC()();
    [v20 setObject:v21 forKey:v22[0]];
  }
}

void sub_100B15184(uint64_t a1, char a2)
{
  Transaction.capture()();
  if (a2)
  {
    swift_errorRetain();
    if (qword_101636F50 != -1) {
      swift_once();
    }
    uint64_t v6 = type metadata accessor for Logger();
    sub_100010324(v6, (uint64_t)qword_10170E9E8);
    swift_errorRetain();
    oslog = Logger.logObject.getter();
    os_log_type_t v7 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(oslog, v7))
    {
      uint64_t v8 = (uint8_t *)swift_slowAlloc();
      uint64_t v9 = (void *)swift_slowAlloc();
      *(_DWORD *)uint64_t v8 = 138543362;
      uint64_t v11 = _convertErrorToNSError(_:)();
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *uint64_t v9 = v11;
      sub_10015B4A8(a1, 1);
      _os_log_impl((void *)&_mh_execute_header, oslog, v7, "Error removing duplicates: %{public}@", v8, 0xCu);
      sub_10000588C((uint64_t *)&unk_101638EA0);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      sub_10015B4A8(a1, 1);
      return;
    }
    sub_10015B4A8(a1, 1);
    sub_10015B4A8(a1, 1);
  }
  else
  {
    id v4 = [self standardUserDefaults];
    UUID.uuidString.getter();
    NSString v5 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    oslog = String._bridgeToObjectiveC()();
    [v4 setObject:v5 forKey:oslog];
  }
}

uint64_t sub_100B15400(uint64_t a1, char a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v10 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v11 = *(void *)(v10 - 8);
  __chkstk_darwin(v10);
  unint64_t v13 = (char *)&v44 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = type metadata accessor for DispatchQoS();
  uint64_t v47 = *(void *)(v14 - 8);
  uint64_t v48 = v14;
  __chkstk_darwin(v14);
  uint64_t v16 = (char *)&v44 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (a2)
  {
    uint64_t aBlock = (void **)a1;
    swift_errorRetain();
    sub_10000588C(&qword_101638D40);
    swift_willThrowTypedImpl();
    uint64_t v46 = *(char **)(a3 + 64);
    uint64_t v32 = swift_allocObject();
    *(void *)(v32 + 16) = a4;
    *(void *)(v32 + 24) = a5;
    uint64_t v54 = sub_100B5FC14;
    uint64_t v55 = v32;
    uint64_t aBlock = _NSConcreteStackBlock;
    uint64_t v51 = 1107296256;
    uint64_t v52 = sub_1004B5480;
    uint64_t v53 = &unk_1015E9618;
    uint64_t v33 = _Block_copy(&aBlock);
    swift_retain();
    static DispatchQoS.unspecified.getter();
    id v49 = _swiftEmptyArrayStorage;
    sub_100B22DA4((unint64_t *)&qword_10163B7E0, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
    sub_10000588C((uint64_t *)&unk_10163F350);
    uint64_t v34 = v47;
    sub_100062734((unint64_t *)&qword_10163B7F0, (uint64_t *)&unk_10163F350);
    dispatch thunk of SetAlgebra.init<A>(_:)();
    OS_dispatch_queue.async(group:qos:flags:execute:)();
    _Block_release(v33);
    sub_10015B4A8(a1, 1);
    (*(void (**)(char *, uint64_t))(v11 + 8))(v13, v10);
    (*(void (**)(char *, uint64_t))(v34 + 8))(v16, v48);
    return swift_release();
  }
  uint64_t v46 = (char *)&v44 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  int64_t v17 = 0;
  os_log_type_t v18 = 0;
  uint64_t v19 = a1 + 64;
  uint64_t v20 = 1 << *(unsigned char *)(a1 + 32);
  uint64_t v21 = -1;
  if (v20 < 64) {
    uint64_t v21 = ~(-1 << v20);
  }
  unint64_t v22 = v21 & *(void *)(a1 + 64);
  uint64_t v23 = *(void ***)(a1 + 16);
  int64_t v24 = (unint64_t)(v20 + 63) >> 6;
  while (v22)
  {
    unint64_t v25 = __clz(__rbit64(v22));
    v22 &= v22 - 1;
    unint64_t v26 = v25 | (v17 << 6);
LABEL_6:
    uint64_t v27 = *(void *)(*(void *)(a1 + 56) + 8 * v26);
    BOOL v28 = __OFADD__(v18, v27);
    os_log_type_t v18 = (void **)((char *)v18 + v27);
    if (v28)
    {
      __break(1u);
LABEL_35:
      __break(1u);
LABEL_36:
      __break(1u);
LABEL_37:
      swift_once();
      goto LABEL_29;
    }
  }
  int64_t v29 = v17 + 1;
  if (__OFADD__(v17, 1)) {
    goto LABEL_35;
  }
  if (v29 < v24)
  {
    unint64_t v30 = *(void *)(v19 + 8 * v29);
    ++v17;
    if (!v30)
    {
      int64_t v17 = v29 + 1;
      if (v29 + 1 >= v24) {
        goto LABEL_27;
      }
      unint64_t v30 = *(void *)(v19 + 8 * v17);
      if (!v30)
      {
        int64_t v17 = v29 + 2;
        if (v29 + 2 >= v24) {
          goto LABEL_27;
        }
        unint64_t v30 = *(void *)(v19 + 8 * v17);
        if (!v30)
        {
          int64_t v17 = v29 + 3;
          if (v29 + 3 >= v24) {
            goto LABEL_27;
          }
          unint64_t v30 = *(void *)(v19 + 8 * v17);
          if (!v30)
          {
            int64_t v17 = v29 + 4;
            if (v29 + 4 >= v24) {
              goto LABEL_27;
            }
            unint64_t v30 = *(void *)(v19 + 8 * v17);
            if (!v30)
            {
              int64_t v31 = v29 + 5;
              if (v31 >= v24) {
                goto LABEL_27;
              }
              unint64_t v30 = *(void *)(v19 + 8 * v31);
              if (!v30)
              {
                while (1)
                {
                  int64_t v17 = v31 + 1;
                  if (__OFADD__(v31, 1)) {
                    goto LABEL_36;
                  }
                  if (v17 >= v24) {
                    goto LABEL_27;
                  }
                  unint64_t v30 = *(void *)(v19 + 8 * v17);
                  ++v31;
                  if (v30) {
                    goto LABEL_25;
                  }
                }
              }
              int64_t v17 = v31;
            }
          }
        }
      }
    }
LABEL_25:
    unint64_t v22 = (v30 - 1) & v30;
    unint64_t v26 = __clz(__rbit64(v30)) + (v17 << 6);
    goto LABEL_6;
  }
LABEL_27:
  sub_10015B6F0(a1, 0);
  swift_release();
  if (v23 == v18) {
    goto LABEL_32;
  }
  if (qword_101636F50 != -1) {
    goto LABEL_37;
  }
LABEL_29:
  uint64_t v35 = type metadata accessor for Logger();
  sub_100010324(v35, (uint64_t)qword_10170E9E8);
  uint64_t v36 = Logger.logObject.getter();
  os_log_type_t v37 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v36, v37))
  {
    uint64_t v38 = (_DWORD *)swift_slowAlloc();
    uint64_t v45 = v11;
    uint64_t v39 = v38;
    *uint64_t v38 = 134218240;
    uint64_t aBlock = v18;
    uint64_t v44 = a3;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *((_WORD *)v39 + 6) = 2048;
    uint64_t aBlock = v23;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl((void *)&_mh_execute_header, v36, v37, "DUPLICATE BEACONS DETECTED -- beaconCount: %ld stableIdentifierCount: %ld", (uint8_t *)v39, 0x16u);
    uint64_t v11 = v45;
    swift_slowDealloc();
  }

LABEL_32:
  uint64_t v40 = swift_allocObject();
  *(void *)(v40 + 16) = a4;
  *(void *)(v40 + 24) = a5;
  *(unsigned char *)(v40 + 32) = v23 != v18;
  uint64_t v54 = sub_10028789C;
  uint64_t v55 = v40;
  uint64_t aBlock = _NSConcreteStackBlock;
  uint64_t v51 = 1107296256;
  uint64_t v52 = sub_1004B5480;
  uint64_t v53 = &unk_1015E9668;
  os_log_type_t v41 = _Block_copy(&aBlock);
  swift_retain();
  BOOL v42 = v46;
  static DispatchQoS.unspecified.getter();
  id v49 = _swiftEmptyArrayStorage;
  sub_100B22DA4((unint64_t *)&qword_10163B7E0, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
  sub_10000588C((uint64_t *)&unk_10163F350);
  sub_100062734((unint64_t *)&qword_10163B7F0, (uint64_t *)&unk_10163F350);
  dispatch thunk of SetAlgebra.init<A>(_:)();
  OS_dispatch_queue.async(group:qos:flags:execute:)();
  _Block_release(v41);
  (*(void (**)(char *, uint64_t))(v11 + 8))(v13, v10);
  (*(void (**)(char *, uint64_t))(v47 + 8))(v42, v48);
  return swift_release();
}

uint64_t sub_100B15B00(uint64_t a1, uint64_t a2, char a3, uint64_t a4, uint64_t a5)
{
  uint64_t v10 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v21 = *(void *)(v10 - 8);
  __chkstk_darwin(v10);
  uint64_t v12 = (char *)&v19 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v20 = type metadata accessor for DispatchQoS();
  uint64_t v13 = *(void *)(v20 - 8);
  __chkstk_darwin(v20);
  uint64_t v15 = (char *)&v19 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v19 = *(void *)(a2 + 64);
  uint64_t v16 = swift_allocObject();
  *(void *)(v16 + 16) = a1;
  *(void *)(v16 + 24) = a2;
  *(unsigned char *)(v16 + 32) = a3;
  *(void *)(v16 + 40) = a4;
  *(void *)(v16 + 48) = a5;
  aBlock[4] = sub_100B59E3C;
  void aBlock[5] = v16;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_1004B5480;
  aBlock[3] = &unk_1015E8650;
  int64_t v17 = _Block_copy(aBlock);
  swift_retain();
  swift_retain();
  swift_retain();
  static DispatchQoS.unspecified.getter();
  void aBlock[7] = _swiftEmptyArrayStorage;
  sub_100B22DA4((unint64_t *)&qword_10163B7E0, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
  sub_10000588C((uint64_t *)&unk_10163F350);
  sub_100062734((unint64_t *)&qword_10163B7F0, (uint64_t *)&unk_10163F350);
  dispatch thunk of SetAlgebra.init<A>(_:)();
  OS_dispatch_queue.async(group:qos:flags:execute:)();
  _Block_release(v17);
  (*(void (**)(char *, uint64_t))(v21 + 8))(v12, v10);
  (*(void (**)(char *, uint64_t))(v13 + 8))(v15, v20);
  return swift_release();
}

uint64_t sub_100B15DF4(uint64_t a1, uint64_t a2, int a3, uint64_t a4, uint64_t a5)
{
  uint64_t v372 = a5;
  uint64_t v370 = a4;
  LODWORD(v414) = a3;
  uint64_t v371 = a1;
  uint64_t v391 = type metadata accessor for SystemInfo.DeviceLockState();
  uint64_t v369 = *(void *)(v391 - 8);
  uint64_t v6 = __chkstk_darwin(v391);
  uint64_t v390 = (char *)&v366 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  v389 = (char *)&v366 - v8;
  uint64_t v378 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v377 = *(void *)(v378 - 8);
  __chkstk_darwin(v378);
  v375 = (char *)&v366 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v376 = type metadata accessor for DispatchQoS();
  uint64_t v374 = *(void *)(v376 - 8);
  __chkstk_darwin(v376);
  v373 = (char *)&v366 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v409 = sub_10000588C((uint64_t *)&unk_10166EAF0);
  __chkstk_darwin(v409);
  uint64_t v408 = (uint64_t)&v366 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v441 = type metadata accessor for UUID();
  uint64_t v12 = *(void *)(v441 - 8);
  uint64_t v13 = __chkstk_darwin(v441);
  uint64_t v382 = (char *)&v366 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v13);
  uint64_t v421 = (char *)&v366 - v15;
  uint64_t v395 = type metadata accessor for StableIdentifier();
  uint64_t v410 = *(void *)(v395 - 8);
  uint64_t v16 = __chkstk_darwin(v395);
  v385 = (char *)&v366 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v18 = __chkstk_darwin(v16);
  uint64_t v20 = (char *)&v366 - v19;
  uint64_t v21 = __chkstk_darwin(v18);
  uint64_t v426 = (uint64_t)&v366 - v22;
  uint64_t v23 = __chkstk_darwin(v21);
  uint64_t v394 = (uint64_t)&v366 - v24;
  uint64_t v25 = __chkstk_darwin(v23);
  v419 = (uint64_t *)((char *)&v366 - v26);
  __chkstk_darwin(v25);
  *(void *)&long long v425 = (char *)&v366 - v27;
  uint64_t v28 = sub_10000588C(&qword_101659330);
  uint64_t v29 = __chkstk_darwin(v28 - 8);
  uint64_t v403 = (uint64_t)&v366 - ((v30 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v31 = __chkstk_darwin(v29);
  uint64_t v33 = (char *)&v366 - v32;
  uint64_t v34 = __chkstk_darwin(v31);
  v434 = (char *)&v366 - v35;
  __chkstk_darwin(v34);
  v433 = (unsigned int (*)(uint64_t, uint64_t, uint64_t))((char *)&v366 - v36);
  uint64_t v37 = sub_10000588C(&qword_101638CF0);
  uint64_t v38 = __chkstk_darwin(v37 - 8);
  uint64_t v396 = (uint64_t)&v366 - ((v39 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v40 = __chkstk_darwin(v38);
  uint64_t v422 = (uint64_t)&v366 - v41;
  uint64_t v42 = __chkstk_darwin(v40);
  v430 = (char *)&v366 - v43;
  uint64_t v44 = __chkstk_darwin(v42);
  uint64_t v417 = (char *)&v366 - v45;
  __chkstk_darwin(v44);
  *(void *)&long long v431 = (char *)&v366 - v46;
  uint64_t v443 = type metadata accessor for OwnedBeaconRecord();
  uint64_t v413 = *(void *)(v443 - 8);
  uint64_t v47 = __chkstk_darwin(v443);
  uint64_t v411 = (uint64_t)&v366 - ((v48 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v49 = __chkstk_darwin(v47);
  uint64_t v388 = (uint64_t)&v366 - v50;
  uint64_t v51 = __chkstk_darwin(v49);
  uint64_t v387 = (uint64_t)&v366 - v52;
  uint64_t v53 = __chkstk_darwin(v51);
  uint64_t v401 = (uint64_t)&v366 - v54;
  uint64_t v55 = __chkstk_darwin(v53);
  uint64_t v438 = (uint64_t)&v366 - v56;
  uint64_t v57 = __chkstk_darwin(v55);
  uint64_t v400 = (uint64_t)&v366 - v58;
  uint64_t v59 = __chkstk_darwin(v57);
  uint64_t v399 = (uint64_t)&v366 - v60;
  uint64_t v61 = __chkstk_darwin(v59);
  uint64_t v415 = (uint64_t)&v366 - v62;
  uint64_t v63 = __chkstk_darwin(v61);
  uint64_t v420 = (unint64_t *)((char *)&v366 - v64);
  uint64_t v65 = __chkstk_darwin(v63);
  unint64_t v428 = (unint64_t)&v366 - v66;
  uint64_t v67 = __chkstk_darwin(v65);
  uint64_t v437 = (uint64_t)&v366 - v68;
  uint64_t v69 = __chkstk_darwin(v67);
  unint64_t v427 = (unint64_t)&v366 - v70;
  uint64_t v71 = __chkstk_darwin(v69);
  uint64_t v436 = (uint64_t)&v366 - v72;
  uint64_t v73 = __chkstk_darwin(v71);
  uint64_t v440 = (uint64_t)&v366 - v74;
  uint64_t v75 = __chkstk_darwin(v73);
  char v77 = (char *)&v366 - v76;
  uint64_t v78 = __chkstk_darwin(v75);
  unint64_t v424 = (unint64_t)&v366 - v79;
  uint64_t v80 = __chkstk_darwin(v78);
  long long v416 = (unint64_t *)((char *)&v366 - v81);
  uint64_t v82 = __chkstk_darwin(v80);
  uint64_t v429 = (uint64_t)&v366 - v83;
  uint64_t v368 = v84;
  __chkstk_darwin(v82);
  uint64_t v86 = (char *)&v366 - v85;
  uint64_t v87 = sub_100ACF5FC();
  id v88 = sub_100AE4A24();
  uint64_t v89 = sub_100A9C06C((uint64_t)v88);
  swift_bridgeObjectRelease();
  uint64_t v393 = a2;
  id v90 = sub_100AE4C44();
  unint64_t v91 = sub_100A9C23C((uint64_t)v90);
  swift_bridgeObjectRelease();
  uint64_t aBlock = (uint64_t)v89;
  sub_1004445F4((uint64_t)v91);
  uint64_t v406 = aBlock;
  uint64_t aBlock = (uint64_t)_swiftEmptyArrayStorage;
  char v92 = (void *)*((void *)v87 + 2);
  swift_bridgeObjectRetain();
  uint64_t v423 = v12;
  uint64_t v418 = v20;
  v386 = v33;
  v442 = v92;
  if (!v92)
  {
    swift_bridgeObjectRelease();
    int64_t v112 = _swiftEmptyArrayStorage;
    uint64_t v111 = _swiftEmptyArrayStorage;
    goto LABEL_24;
  }
  unint64_t v93 = 0;
  v435 = (uint64_t (**)(uint64_t, uint64_t, uint64_t))(v12 + 48);
  uint64_t v94 = _swiftEmptyArrayStorage;
  uint64_t v95 = _swiftEmptyArrayStorage;
  uint64_t v96 = v413;
  v432 = v87;
  do
  {
    if (v93 >= *((void *)v87 + 2))
    {
      __break(1u);
LABEL_208:
      __break(1u);
LABEL_209:
      __break(1u);
LABEL_210:
      __break(1u);
LABEL_211:
      __break(1u);
LABEL_212:
      __break(1u);
LABEL_213:
      swift_bridgeObjectRelease();
      uint64_t result = swift_bridgeObjectRelease();
      __break(1u);
      return result;
    }
    uint64_t v97 = *(void *)(v96 + 72);
    *(void *)&long long v439 = (*(unsigned __int8 *)(v96 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v96 + 80);
    sub_100B30D0C((uint64_t)&v87[v439 + v97 * v93], (uint64_t)v86, (uint64_t (*)(void))type metadata accessor for OwnedBeaconRecord);
    uint64_t v98 = v431;
    sub_10001D074((uint64_t)&v86[*(int *)(v443 + 28)], v431, &qword_101638CF0);
    uint64_t v99 = *v435;
    int v100 = (*v435)(v98, 1, v441);
    sub_10001DAB4(v98, &qword_101638CF0);
    if (v100 == 1)
    {
      sub_100B30DB4((uint64_t)v86, v429, (uint64_t (*)(void))type metadata accessor for OwnedBeaconRecord);
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
        sub_1000B74D8(0, v95[2] + 1, 1);
      }
      uint64_t v95 = (void *)aBlock;
      unint64_t v102 = *(void *)(aBlock + 16);
      unint64_t v101 = *(void *)(aBlock + 24);
      if (v102 >= v101 >> 1)
      {
        sub_1000B74D8(v101 > 1, v102 + 1, 1);
        uint64_t v95 = (void *)aBlock;
      }
      void v95[2] = v102 + 1;
      sub_100B30DB4(v429, (uint64_t)v95 + v439 + v102 * v97, (uint64_t (*)(void))type metadata accessor for OwnedBeaconRecord);
    }
    else
    {
      sub_100B310AC((uint64_t)v86, (uint64_t (*)(void))type metadata accessor for OwnedBeaconRecord);
    }
    ++v93;
    uint64_t v96 = v413;
    uint64_t v87 = v432;
  }
  while (v442 != (void *)v93);
  *(void *)&long long v431 = aBlock;
  swift_bridgeObjectRelease();
  uint64_t v103 = 0;
  uint64_t aBlock = (uint64_t)_swiftEmptyArrayStorage;
  uint64_t v104 = (uint64_t)&v87[v439];
  uint64_t v105 = (uint64_t)v416;
  do
  {
    if ((unint64_t)v103 >= *((void *)v87 + 2)) {
      goto LABEL_208;
    }
    sub_100B30D0C(v104, v105, (uint64_t (*)(void))type metadata accessor for OwnedBeaconRecord);
    uint64_t v106 = (uint64_t)v417;
    sub_10001D074(v105 + *(int *)(v443 + 28), (uint64_t)v417, &qword_101638CF0);
    uint64_t v107 = v105;
    int v108 = v99(v106, 1, v441);
    sub_10001DAB4(v106, &qword_101638CF0);
    if (v108 == 1)
    {
      sub_100B310AC(v107, (uint64_t (*)(void))type metadata accessor for OwnedBeaconRecord);
      uint64_t v105 = v107;
    }
    else
    {
      sub_100B30DB4(v107, v424, (uint64_t (*)(void))type metadata accessor for OwnedBeaconRecord);
      uint64_t v105 = v107;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        sub_1000B74D8(0, v94[2] + 1, 1);
        uint64_t v105 = (uint64_t)v416;
      }
      uint64_t v94 = (void *)aBlock;
      unint64_t v110 = *(void *)(aBlock + 16);
      unint64_t v109 = *(void *)(aBlock + 24);
      if (v110 >= v109 >> 1)
      {
        sub_1000B74D8(v109 > 1, v110 + 1, 1);
        uint64_t v105 = (uint64_t)v416;
        uint64_t v94 = (void *)aBlock;
      }
      v94[2] = v110 + 1;
      sub_100B30DB4(v424, (uint64_t)v94 + v439 + v110 * v97, (uint64_t (*)(void))type metadata accessor for OwnedBeaconRecord);
    }
    uint64_t v103 = (void *)((char *)v103 + 1);
    v104 += v97;
    uint64_t v87 = v432;
  }
  while (v442 != v103);
  uint64_t v111 = (void *)aBlock;
  int64_t v112 = (void *)v431;
LABEL_24:
  swift_bridgeObjectRelease();
  unint64_t v424 = sub_100B50B24((uint64_t)v112);
  swift_release();
  uint64_t v397 = sub_100B50B24((uint64_t)v111);
  swift_release();
  if (v414) {
    uint64_t v113 = _swiftEmptyArrayStorage;
  }
  else {
    uint64_t v113 = 0;
  }
  uint64_t v114 = swift_allocObject();
  uint64_t v412 = v114;
  *(void *)(v114 + 16) = v113;
  v442 = (void *)(v114 + 16);
  v453 = _swiftEmptyArrayStorage;
  dispatch_group_t v392 = dispatch_group_create();
  uint64_t v450 = (uint64_t)_swiftEmptyDictionarySingleton;
  uint64_t v115 = *(void *)(v406 + 16);
  uint64_t v116 = v441;
  uint64_t v117 = (uint64_t)v420;
  if (v115)
  {
    uint64_t v118 = v406 + 32;
    swift_bridgeObjectRetain();
    uint64_t v407 = 0;
    do
    {
      sub_10001D010(v118, (uint64_t)&aBlock);
      uint64_t v119 = v407;
      sub_100B19A30(&v450, &aBlock, (uint64_t)&v452);
      _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)&aBlock);
      uint64_t v407 = v119;
      if (v119) {
        goto LABEL_213;
      }
      swift_bridgeObjectRelease();
      uint64_t v450 = v452;
      v118 += 40;
      --v115;
    }
    while (v115);
    v432 = (char *)v452;
    swift_bridgeObjectRelease_n();
  }
  else
  {
    swift_bridgeObjectRelease();
    uint64_t v407 = 0;
    v432 = (char *)_swiftEmptyDictionarySingleton;
  }
  uint64_t v121 = 0;
  uint64_t v122 = *(void *)(v424 + 64);
  int64_t v383 = v424 + 64;
  uint64_t v123 = 1 << *(unsigned char *)(v424 + 32);
  uint64_t v124 = -1;
  if (v123 < 64) {
    uint64_t v124 = ~(-1 << v123);
  }
  unint64_t v125 = v124 & v122;
  long long v416 = &v451;
  int64_t v414 = (unint64_t)(v123 + 63) >> 6;
  unint64_t v381 = v414 - 1;
  *(void *)&long long v120 = 141558275;
  long long v404 = v120;
  uint64_t v398 = (char *)&type metadata for Any + 8;
  *(void *)&long long v120 = 136446210;
  long long v431 = v120;
  v402 = (void (**)(uint64_t, uint64_t, uint64_t, uint64_t))0x8000000101413930;
  uint64_t v126 = v425;
  uint64_t v127 = (uint64_t)v434;
  uint64_t v128 = (uint64_t)v433;
  while (2)
  {
    if (v125)
    {
      v435 = (uint64_t (**)(uint64_t, uint64_t, uint64_t))((v125 - 1) & v125);
      *(void *)&long long v439 = v121;
      unint64_t v129 = __clz(__rbit64(v125)) | (v121 << 6);
      goto LABEL_40;
    }
    int64_t v134 = v121 + 1;
    if (__OFADD__(v121, 1)) {
      goto LABEL_209;
    }
    if (v134 >= v414)
    {
      *(void *)&long long v439 = v121;
      goto LABEL_46;
    }
    unint64_t v135 = *(void *)(v383 + 8 * v134);
    if (!v135)
    {
      int64_t v190 = v121 + 2;
      if (v121 + 2 >= v414)
      {
LABEL_99:
        *(void *)&long long v439 = v134;
        goto LABEL_46;
      }
      unint64_t v135 = *(void *)(v383 + 8 * v190);
      if (v135)
      {
LABEL_86:
        int64_t v134 = v190;
        goto LABEL_44;
      }
      if (v121 + 3 >= v414)
      {
        *(void *)&long long v439 = v121 + 2;
      }
      else
      {
        unint64_t v135 = *(void *)(v383 + 8 * (v121 + 3));
        if (v135)
        {
          int64_t v134 = v121 + 3;
          goto LABEL_44;
        }
        int64_t v190 = v121 + 4;
        if (v121 + 4 < v414)
        {
          unint64_t v135 = *(void *)(v383 + 8 * v190);
          if (v135) {
            goto LABEL_86;
          }
          while (1)
          {
            int64_t v134 = v190 + 1;
            if (__OFADD__(v190, 1)) {
              goto LABEL_211;
            }
            if (v134 >= v414) {
              break;
            }
            unint64_t v135 = *(void *)(v383 + 8 * v134);
            ++v190;
            if (v135) {
              goto LABEL_44;
            }
          }
          int64_t v134 = v381;
          goto LABEL_99;
        }
        *(void *)&long long v439 = v121 + 3;
      }
LABEL_46:
      uint64_t v136 = sub_10000588C(&qword_101659338);
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v136 - 8) + 56))(v127, 1, 1, v136);
      v435 = 0;
      goto LABEL_47;
    }
LABEL_44:
    v435 = (uint64_t (**)(uint64_t, uint64_t, uint64_t))((v135 - 1) & v135);
    unint64_t v129 = __clz(__rbit64(v135)) + (v134 << 6);
    *(void *)&long long v439 = v134;
LABEL_40:
    uint64_t v130 = v424;
    sub_100B30D0C(*(void *)(v424 + 48) + *(void *)(v410 + 72) * v129, v127, (uint64_t (*)(void))type metadata accessor for StableIdentifier);
    uint64_t v131 = *(void *)(v130 + 56);
    uint64_t v132 = sub_10000588C(&qword_101659338);
    uint64_t v133 = *(void *)(v131 + 8 * v129);
    uint64_t v127 = (uint64_t)v434;
    *(void *)&v434[*(int *)(v132 + 48)] = v133;
    (*(void (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v132 - 8) + 56))(v127, 0, 1, v132);
    swift_bridgeObjectRetain();
    uint64_t v128 = (uint64_t)v433;
LABEL_47:
    sub_10001D608(v127, v128, &qword_101659330);
    uint64_t v137 = sub_10000588C(&qword_101659338);
    uint64_t v138 = *(void *)(v137 - 8);
    uint64_t v139 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v138 + 48);
    if (v139(v128, 1, v137) != 1)
    {
      uint64_t v140 = *(void *)(v128 + *(int *)(v137 + 48));
      sub_100B30DB4(v128, v126, (uint64_t (*)(void))type metadata accessor for StableIdentifier);
      if (*(void *)(v140 + 16) < 2uLL)
      {
        sub_100B310AC(v126, (uint64_t (*)(void))type metadata accessor for StableIdentifier);
        swift_bridgeObjectRelease();
      }
      else
      {
        uint64_t v429 = v140;
        unint64_t v141 = sub_100B1A1CC();
        unint64_t v143 = v142;
        if (qword_101636F50 != -1) {
          swift_once();
        }
        uint64_t v144 = type metadata accessor for Logger();
        sub_100010324(v144, (uint64_t)qword_10170E9E8);
        uint64_t v145 = (void (**)(void, void))v419;
        sub_100B30D0C(v126, (uint64_t)v419, (uint64_t (*)(void))type metadata accessor for StableIdentifier);
        id v146 = Logger.logObject.getter();
        os_log_type_t v147 = static os_log_type_t.error.getter();
        if (os_log_type_enabled(v146, v147))
        {
          uint64_t v148 = swift_slowAlloc();
          uint64_t v417 = v143;
          uint64_t v149 = v148;
          uint64_t v406 = swift_slowAlloc();
          uint64_t aBlock = v406;
          *(_DWORD *)uint64_t v149 = v404;
          uint64_t v450 = 1752392040;
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          *(_WORD *)(v149 + 12) = 2081;
          uint64_t v405 = v149 + 14;
          sub_100B30D0C((uint64_t)v145, v394, (uint64_t (*)(void))type metadata accessor for StableIdentifier);
          uint64_t v150 = String.init<A>(describing:)();
          uint64_t v450 = sub_1008FA0F0(v150, v151, &aBlock);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease();
          sub_100B310AC((uint64_t)v419, (uint64_t (*)(void))type metadata accessor for StableIdentifier);
          _os_log_impl((void *)&_mh_execute_header, v146, v147, "Duplicates for %{private,mask.hash}s", (uint8_t *)v149, 0x16u);
          swift_arrayDestroy();
          swift_slowDealloc();
          unint64_t v143 = v417;
          swift_slowDealloc();
        }
        else
        {
          sub_100B310AC((uint64_t)v145, (uint64_t (*)(void))type metadata accessor for StableIdentifier);
        }

        uint64_t v152 = (void **)v442;
        if (*v442)
        {
          uint64_t aBlock = 0;
          unint64_t v445 = 0xE000000000000000;
          _StringGuts.grow(_:)(30);
          swift_bridgeObjectRelease();
          uint64_t aBlock = 0xD00000000000001CLL;
          unint64_t v445 = (unint64_t)v402;
          v153._uint64_t countAndFlagsBits = v141;
          v153._object = v143;
          String.append(_:)(v153);
          swift_bridgeObjectRelease();
          uint64_t v154 = aBlock;
          unint64_t v155 = v445;
          uint64_t v156 = *v152;
          char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
          *uint64_t v152 = v156;
          if ((isUniquelyReferenced_nonNull_native & 1) == 0)
          {
            uint64_t v156 = sub_100A6E25C(0, v156[2] + 1, 1, v156);
            void *v442 = v156;
          }
          unint64_t v159 = v156[2];
          unint64_t v158 = v156[3];
          if (v159 >= v158 >> 1)
          {
            uint64_t v156 = sub_100A6E25C((void *)(v158 > 1), v159 + 1, 1, v156);
            void *v442 = v156;
          }
          v156[2] = v159 + 1;
          uint64_t v160 = &v156[2 * v159];
          v160[4] = v154;
          v160[5] = v155;
        }
        else
        {
          swift_bridgeObjectRelease();
        }
        uint64_t v161 = v425;
        uint64_t v162 = v440;
        if (qword_101636EF0 != -1) {
          swift_once();
        }
        sub_100010324(v144, (uint64_t)qword_10170E840);
        sub_100B30D0C(v161, v426, (uint64_t (*)(void))type metadata accessor for StableIdentifier);
        uint64_t v163 = Logger.logObject.getter();
        os_log_type_t v164 = static os_log_type_t.default.getter();
        if (os_log_type_enabled(v163, v164))
        {
          uint64_t v165 = swift_slowAlloc();
          uint64_t v417 = (char *)swift_slowAlloc();
          uint64_t aBlock = (uint64_t)v417;
          *(_DWORD *)uint64_t v165 = v404;
          uint64_t v450 = 1752392040;
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          *(_WORD *)(v165 + 12) = 2081;
          uint64_t v406 = v165 + 14;
          sub_100B30D0C(v426, v394, (uint64_t (*)(void))type metadata accessor for StableIdentifier);
          uint64_t v166 = String.init<A>(describing:)();
          uint64_t v450 = sub_1008FA0F0(v166, v167, &aBlock);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease();
          sub_100B310AC(v426, (uint64_t (*)(void))type metadata accessor for StableIdentifier);
          _os_log_impl((void *)&_mh_execute_header, v163, v164, "Duplicates for %{private,mask.hash}s", (uint8_t *)v165, 0x16u);
          swift_arrayDestroy();
          swift_slowDealloc();
          swift_slowDealloc();
        }
        else
        {
          sub_100B310AC(v426, (uint64_t (*)(void))type metadata accessor for StableIdentifier);
        }

        uint64_t v116 = v441;
        uint64_t v117 = (uint64_t)v420;
        int64_t v168 = v429;
        uint64_t v169 = *(void *)(v429 + 16);
        uint64_t v170 = v413;
        unint64_t v171 = (*(unsigned __int8 *)(v413 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v413 + 80);
        if (v169)
        {
          uint64_t v417 = (char *)((*(unsigned __int8 *)(v413 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v413 + 80));
          uint64_t v172 = v429 + v171;
          swift_bridgeObjectRetain();
          uint64_t v173 = *(void *)(v170 + 72);
          do
          {
            sub_100B30D0C(v172, (uint64_t)v77, (uint64_t (*)(void))type metadata accessor for OwnedBeaconRecord);
            if (*v442)
            {
              uint64_t aBlock = 8224;
              unint64_t v445 = 0xE200000000000000;
              sub_100B22DA4((unint64_t *)&qword_101638B10, (void (*)(uint64_t))&type metadata accessor for UUID);
              v174._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
              String.append(_:)(v174);
              swift_bridgeObjectRelease();
              uint64_t v175 = aBlock;
              unint64_t v176 = v445;
              unint64_t v177 = v442;
              uint64_t v178 = (void *)*v442;
              char v179 = swift_isUniquelyReferenced_nonNull_native();
              *unint64_t v177 = v178;
              if ((v179 & 1) == 0)
              {
                uint64_t v178 = sub_100A6E25C(0, v178[2] + 1, 1, v178);
                void *v442 = v178;
              }
              unint64_t v181 = v178[2];
              unint64_t v180 = v178[3];
              if (v181 >= v180 >> 1)
              {
                uint64_t v178 = sub_100A6E25C((void *)(v180 > 1), v181 + 1, 1, v178);
                void *v442 = v178;
              }
              v178[2] = v181 + 1;
              uint64_t v182 = &v178[2 * v181];
              v182[4] = v175;
              v182[5] = v176;
              uint64_t v162 = v440;
            }
            sub_100B30D0C((uint64_t)v77, v162, (uint64_t (*)(void))type metadata accessor for OwnedBeaconRecord);
            uint64_t v183 = Logger.logObject.getter();
            os_log_type_t v184 = static os_log_type_t.error.getter();
            if (os_log_type_enabled(v183, v184))
            {
              uint64_t v185 = swift_slowAlloc();
              uint64_t aBlock = swift_slowAlloc();
              *(_DWORD *)uint64_t v185 = v431;
              sub_100B30D0C(v440, v436, (uint64_t (*)(void))type metadata accessor for OwnedBeaconRecord);
              uint64_t v186 = String.init<A>(describing:)();
              *(void *)(v185 + 4) = sub_1008FA0F0(v186, v187, &aBlock);
              swift_bridgeObjectRelease();
              sub_100B310AC(v440, (uint64_t (*)(void))type metadata accessor for OwnedBeaconRecord);
              _os_log_impl((void *)&_mh_execute_header, v183, v184, "DUPE: %{public}s", (uint8_t *)v185, 0xCu);
              swift_arrayDestroy();
              uint64_t v162 = v440;
              swift_slowDealloc();
              swift_slowDealloc();
            }
            else
            {

              sub_100B310AC(v162, (uint64_t (*)(void))type metadata accessor for OwnedBeaconRecord);
            }
            sub_100B310AC((uint64_t)v77, (uint64_t (*)(void))type metadata accessor for OwnedBeaconRecord);
            v172 += v173;
            --v169;
          }
          while (v169);
          int64_t v168 = v429;
          swift_bridgeObjectRelease();
          unint64_t v188 = *(void *)(v168 + 16);
          if (v188 >= 2) {
            unint64_t v189 = v188 - 1;
          }
          else {
            unint64_t v189 = 0;
          }
          uint64_t v116 = v441;
          uint64_t v117 = (uint64_t)v420;
          uint64_t v128 = (uint64_t)v433;
          unint64_t v171 = (unint64_t)v417;
        }
        else
        {
          unint64_t v189 = 0;
          uint64_t v128 = (uint64_t)v433;
        }
        sub_1004465EC(v168, v168 + v171, 0, (2 * v189) | 1);
        uint64_t v126 = v425;
        sub_100B310AC(v425, (uint64_t (*)(void))type metadata accessor for StableIdentifier);
        uint64_t v127 = (uint64_t)v434;
      }
      uint64_t v121 = v439;
      unint64_t v125 = (unint64_t)v435;
      continue;
    }
    break;
  }
  swift_release();
  uint64_t v192 = 0;
  uint64_t v193 = *(void *)(v397 + 64);
  uint64_t v379 = v397 + 64;
  uint64_t v194 = 1 << *(unsigned char *)(v397 + 32);
  uint64_t v195 = -1;
  if (v194 < 64) {
    uint64_t v195 = ~(-1 << v194);
  }
  unint64_t v196 = v195 & v193;
  v402 = (void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v138 + 56);
  v435 = (uint64_t (**)(uint64_t, uint64_t, uint64_t))(v423 + 56);
  uint64_t v426 = v423 + 16;
  unint64_t v424 = v423 + 48;
  int64_t v414 = v423 + 32;
  v419 = (uint64_t *)(v423 + 8);
  int64_t v383 = (unint64_t)(v194 + 63) >> 6;
  uint64_t v367 = v383 - 1;
  uint64_t v380 = (char *)&type metadata for Any + 8;
  *(void *)&long long v191 = 141558531;
  long long v425 = v191;
  unint64_t v381 = 0x8000000101413900;
  uint64_t v197 = v401;
  uint64_t v198 = v427;
  uint64_t v406 = v138 + 48;
  uint64_t v199 = (uint64_t)v386;
  uint64_t v200 = v139;
  v433 = v139;
  uint64_t v201 = (uint64_t)v418;
  uint64_t v384 = v137;
  while (2)
  {
    uint64_t v202 = v403;
    if (v196)
    {
      long long v416 = (unint64_t *)((v196 - 1) & v196);
      uint64_t v417 = (char *)v192;
      unint64_t v203 = __clz(__rbit64(v196)) | (v192 << 6);
      goto LABEL_107;
    }
    uint64_t v205 = v192 + 1;
    if (__OFADD__(v192, 1)) {
      goto LABEL_210;
    }
    if (v205 >= v383)
    {
      uint64_t v417 = (char *)v192;
      goto LABEL_113;
    }
    unint64_t v206 = *(void *)(v379 + 8 * v205);
    if (!v206)
    {
      uint64_t v307 = v192 + 2;
      if (v192 + 2 >= v383)
      {
LABEL_187:
        uint64_t v417 = (char *)v205;
        goto LABEL_113;
      }
      unint64_t v206 = *(void *)(v379 + 8 * v307);
      if (v206)
      {
LABEL_174:
        uint64_t v205 = v307;
        goto LABEL_111;
      }
      if (v192 + 3 >= v383)
      {
        uint64_t v417 = (char *)(v192 + 2);
      }
      else
      {
        unint64_t v206 = *(void *)(v379 + 8 * (v192 + 3));
        if (v206)
        {
          uint64_t v205 = v192 + 3;
          goto LABEL_111;
        }
        uint64_t v307 = v192 + 4;
        if (v192 + 4 < v383)
        {
          unint64_t v206 = *(void *)(v379 + 8 * v307);
          if (v206) {
            goto LABEL_174;
          }
          while (1)
          {
            uint64_t v205 = v307 + 1;
            if (__OFADD__(v307, 1)) {
              goto LABEL_212;
            }
            if (v205 >= v383) {
              break;
            }
            unint64_t v206 = *(void *)(v379 + 8 * v205);
            ++v307;
            if (v206) {
              goto LABEL_111;
            }
          }
          uint64_t v205 = v367;
          goto LABEL_187;
        }
        uint64_t v417 = (char *)(v192 + 3);
      }
LABEL_113:
      (*v402)(v403, 1, 1, v137);
      long long v416 = 0;
      goto LABEL_114;
    }
LABEL_111:
    long long v416 = (unint64_t *)((v206 - 1) & v206);
    unint64_t v203 = __clz(__rbit64(v206)) + (v205 << 6);
    uint64_t v417 = (char *)v205;
LABEL_107:
    uint64_t v204 = v397;
    sub_100B30D0C(*(void *)(v397 + 48) + *(void *)(v410 + 72) * v203, v403, (uint64_t (*)(void))type metadata accessor for StableIdentifier);
    *(void *)(v202 + *(int *)(v137 + 48)) = *(void *)(*(void *)(v204 + 56) + 8 * v203);
    (*v402)(v202, 0, 1, v137);
    swift_bridgeObjectRetain();
    uint64_t v201 = (uint64_t)v418;
LABEL_114:
    sub_10001D608(v202, v199, &qword_101659330);
    if (v200(v199, 1, v137) != 1)
    {
      uint64_t v207 = *(void *)(v199 + *(int *)(v137 + 48));
      sub_100B30DB4(v199, v201, (uint64_t (*)(void))type metadata accessor for StableIdentifier);
      if (*(void *)(v207 + 16) < 2uLL)
      {
        sub_100B310AC(v201, (uint64_t (*)(void))type metadata accessor for StableIdentifier);
        swift_bridgeObjectRelease();
      }
      else
      {
        uint64_t v405 = v207;
        uint64_t v208 = v116;
        unint64_t v209 = sub_100B1A1CC();
        uint64_t v211 = v210;
        uint64_t v212 = (void **)v442;
        if (*v442)
        {
          uint64_t v213 = v209;
          uint64_t aBlock = 0;
          unint64_t v445 = 0xE000000000000000;
          _StringGuts.grow(_:)(40);
          swift_bridgeObjectRelease();
          uint64_t aBlock = 0xD000000000000026;
          unint64_t v445 = v381;
          v214._uint64_t countAndFlagsBits = v213;
          v214._object = v211;
          String.append(_:)(v214);
          swift_bridgeObjectRelease();
          uint64_t v215 = aBlock;
          unint64_t v216 = v445;
          uint64_t v217 = *v212;
          char v218 = swift_isUniquelyReferenced_nonNull_native();
          *uint64_t v212 = v217;
          if ((v218 & 1) == 0)
          {
            uint64_t v217 = sub_100A6E25C(0, v217[2] + 1, 1, v217);
            void *v442 = v217;
          }
          unint64_t v220 = v217[2];
          unint64_t v219 = v217[3];
          if (v220 >= v219 >> 1)
          {
            uint64_t v217 = sub_100A6E25C((void *)(v219 > 1), v220 + 1, 1, v217);
            void *v442 = v217;
          }
          v217[2] = v220 + 1;
          uint64_t v221 = &v217[2 * v220];
          v221[4] = v215;
          v221[5] = v216;
        }
        else
        {
          swift_bridgeObjectRelease();
        }
        uint64_t v222 = (uint64_t)v385;
        uint64_t v223 = (uint64_t)v418;
        if (qword_101636F50 != -1) {
          swift_once();
        }
        uint64_t v224 = type metadata accessor for Logger();
        uint64_t v225 = sub_100010324(v224, (uint64_t)qword_10170E9E8);
        sub_100B30D0C(v223, v222, (uint64_t (*)(void))type metadata accessor for StableIdentifier);
        *(void *)&long long v439 = v225;
        Swift::String v226 = Logger.logObject.getter();
        os_log_type_t v227 = static os_log_type_t.error.getter();
        if (os_log_type_enabled(v226, v227))
        {
          uint64_t v228 = v222;
          uint64_t v229 = swift_slowAlloc();
          uint64_t aBlock = swift_slowAlloc();
          *(_DWORD *)uint64_t v229 = v404;
          *(void *)(v229 + 4) = 1752392040;
          *(_WORD *)(v229 + 12) = 2081;
          sub_100B30D0C(v228, v394, (uint64_t (*)(void))type metadata accessor for StableIdentifier);
          uint64_t v230 = String.init<A>(describing:)();
          *(void *)(v229 + 14) = sub_1008FA0F0(v230, v231, &aBlock);
          swift_bridgeObjectRelease();
          uint64_t v232 = v228;
          uint64_t v200 = v433;
          sub_100B310AC(v232, (uint64_t (*)(void))type metadata accessor for StableIdentifier);
          _os_log_impl((void *)&_mh_execute_header, v226, v227, "Duplicates (grouped) for %{private,mask.hash}s", (uint8_t *)v229, 0x16u);
          swift_arrayDestroy();
          swift_slowDealloc();
          swift_slowDealloc();
        }
        else
        {
          sub_100B310AC(v222, (uint64_t (*)(void))type metadata accessor for StableIdentifier);
        }

        uint64_t v116 = v208;
        uint64_t v233 = *(void *)(v405 + 16);
        uint64_t v234 = v437;
        uint64_t v201 = (uint64_t)v418;
        if (v233)
        {
          uint64_t v429 = (*(unsigned __int8 *)(v413 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v413 + 80);
          uint64_t v235 = v405 + v429;
          v434 = *(char **)(v413 + 72);
          while (1)
          {
            uint64_t v440 = v233;
            sub_100B30D0C(v235, v198, (uint64_t (*)(void))type metadata accessor for OwnedBeaconRecord);
            uint64_t v236 = v116;
            if (*v442)
            {
              uint64_t aBlock = 8224;
              unint64_t v445 = 0xE200000000000000;
              sub_100B22DA4((unint64_t *)&qword_101638B10, (void (*)(uint64_t))&type metadata accessor for UUID);
              v237._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
              String.append(_:)(v237);
              swift_bridgeObjectRelease();
              uint64_t v238 = aBlock;
              unint64_t v239 = v445;
              uint64_t v240 = v442;
              uint64_t v241 = (void *)*v442;
              char v242 = swift_isUniquelyReferenced_nonNull_native();
              *uint64_t v240 = v241;
              if ((v242 & 1) == 0)
              {
                uint64_t v241 = sub_100A6E25C(0, v241[2] + 1, 1, v241);
                void *v442 = v241;
              }
              unint64_t v244 = v241[2];
              unint64_t v243 = v241[3];
              if (v244 >= v243 >> 1)
              {
                uint64_t v241 = sub_100A6E25C((void *)(v243 > 1), v244 + 1, 1, v241);
                void *v442 = v241;
              }
              v241[2] = v244 + 1;
              uint64_t v245 = &v241[2 * v244];
              v245[4] = v238;
              v245[5] = v239;
              uint64_t v234 = v437;
            }
            sub_100B30D0C(v198, v234, (uint64_t (*)(void))type metadata accessor for OwnedBeaconRecord);
            uint64_t v246 = Logger.logObject.getter();
            os_log_type_t v247 = static os_log_type_t.error.getter();
            if (os_log_type_enabled(v246, v247))
            {
              uint64_t v248 = v234;
              uint64_t v249 = swift_slowAlloc();
              uint64_t aBlock = swift_slowAlloc();
              *(_DWORD *)uint64_t v249 = v431;
              sub_100B30D0C(v248, v436, (uint64_t (*)(void))type metadata accessor for OwnedBeaconRecord);
              uint64_t v250 = String.init<A>(describing:)();
              *(void *)(v249 + 4) = sub_1008FA0F0(v250, v251, &aBlock);
              swift_bridgeObjectRelease();
              uint64_t v252 = v248;
              uint64_t v198 = v427;
              sub_100B310AC(v252, (uint64_t (*)(void))type metadata accessor for OwnedBeaconRecord);
              _os_log_impl((void *)&_mh_execute_header, v246, v247, "DUPE: %{public}s", (uint8_t *)v249, 0xCu);
              swift_arrayDestroy();
              swift_slowDealloc();
              swift_slowDealloc();
            }
            else
            {
              sub_100B310AC(v234, (uint64_t (*)(void))type metadata accessor for OwnedBeaconRecord);
            }

            uint64_t v253 = (uint64_t)v430;
            uint64_t v254 = v432;
            if (!*((void *)v432 + 2) || (unint64_t v255 = sub_1007240CC(v198 + *(int *)(v443 + 20)), (v256 & 1) == 0))
            {
              ((void (*)(uint64_t, uint64_t, uint64_t, uint64_t))*v435)(v253, 1, 1, v236);
LABEL_146:
              sub_10001DAB4(v253, &qword_101638CF0);
              uint64_t v274 = v428;
              sub_100B30D0C(v198, v428, (uint64_t (*)(void))type metadata accessor for OwnedBeaconRecord);
              uint64_t v275 = v198;
              sub_100B30D0C(v198, v117, (uint64_t (*)(void))type metadata accessor for OwnedBeaconRecord);
              unint64_t v276 = Logger.logObject.getter();
              os_log_type_t v277 = static os_log_type_t.error.getter();
              if (os_log_type_enabled(v276, v277))
              {
                uint64_t v278 = swift_slowAlloc();
                uint64_t aBlock = swift_slowAlloc();
                *(_DWORD *)uint64_t v278 = v425;
                *(void *)(v278 + 4) = 1752392040;
                *(_WORD *)(v278 + 12) = 2081;
                sub_100B22DA4((unint64_t *)&qword_101638B10, (void (*)(uint64_t))&type metadata accessor for UUID);
                uint64_t v279 = dispatch thunk of CustomStringConvertible.description.getter();
                *(void *)(v278 + 14) = sub_1008FA0F0(v279, v280, &aBlock);
                swift_bridgeObjectRelease();
                sub_100B310AC(v274, (uint64_t (*)(void))type metadata accessor for OwnedBeaconRecord);
                *(_WORD *)(v278 + 22) = 2082;
                sub_100B30D0C(v117, v436, (uint64_t (*)(void))type metadata accessor for OwnedBeaconRecord);
                uint64_t v281 = String.init<A>(describing:)();
                *(void *)(v278 + 24) = sub_1008FA0F0(v281, v282, &aBlock);
                swift_bridgeObjectRelease();
                uint64_t v283 = v117;
                sub_100B310AC(v117, (uint64_t (*)(void))type metadata accessor for OwnedBeaconRecord);
                _os_log_impl((void *)&_mh_execute_header, v276, v277, "Beacon %{private,mask.hash}s is not known by group: %{public}s)", (uint8_t *)v278, 0x20u);
                swift_arrayDestroy();
                swift_slowDealloc();
                swift_slowDealloc();
              }
              else
              {
                sub_100B310AC(v274, (uint64_t (*)(void))type metadata accessor for OwnedBeaconRecord);
                uint64_t v283 = v117;
                sub_100B310AC(v117, (uint64_t (*)(void))type metadata accessor for OwnedBeaconRecord);
              }

              uint64_t v273 = v434;
              uint64_t v198 = v275;
              sub_100B30D0C(v275, v438, (uint64_t (*)(void))type metadata accessor for OwnedBeaconRecord);
              unint64_t v284 = (unint64_t)v453;
              if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
                unint64_t v284 = sub_100A6F6C4(0, *(void *)(v284 + 16) + 1, 1, v284);
              }
              uint64_t v116 = v441;
              uint64_t v117 = v283;
              uint64_t v200 = v433;
              unint64_t v286 = *(void *)(v284 + 16);
              unint64_t v285 = *(void *)(v284 + 24);
              if (v286 >= v285 >> 1) {
                unint64_t v284 = sub_100A6F6C4(v285 > 1, v286 + 1, 1, v284);
              }
              *(void *)(v284 + 16) = v286 + 1;
              sub_100B30DB4(v438, v284 + v429 + v286 * (void)v273, (uint64_t (*)(void))type metadata accessor for OwnedBeaconRecord);
              v453 = (void *)v284;
LABEL_154:
              sub_100B310AC(v198, (uint64_t (*)(void))type metadata accessor for OwnedBeaconRecord);
              goto LABEL_155;
            }
            uint64_t v257 = v423;
            unint64_t v258 = *((void *)v254 + 7) + *(void *)(v423 + 72) * v255;
            int v259 = *(void (**)(uint64_t, unint64_t, uint64_t))(v423 + 16);
            v259(v253, v258, v236);
            uint64_t v260 = *(void (**)(uint64_t, void, uint64_t, uint64_t))(v257 + 56);
            v260(v253, 0, 1, v236);
            uint64_t v261 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v257 + 48);
            if (v261(v253, 1, v236) == 1) {
              goto LABEL_146;
            }
            uint64_t v262 = *(void (**)(char *, uint64_t, uint64_t))v414;
            uint64_t v263 = v253;
            int v264 = v421;
            (*(void (**)(char *, uint64_t, uint64_t))v414)(v421, v263, v236);
            uint64_t v265 = v198;
            uint64_t v266 = v422;
            v259(v422, (unint64_t)v264, v236);
            v260(v266, 0, 1, v236);
            uint64_t v267 = v265 + *(int *)(v443 + 28);
            uint64_t v268 = v408;
            uint64_t v269 = v408 + *(int *)(v409 + 48);
            sub_10001D074(v266, v408, &qword_101638CF0);
            uint64_t v270 = v267;
            uint64_t v271 = v268;
            sub_10001D074(v270, v269, &qword_101638CF0);
            unsigned int v272 = v261(v268, 1, v236);
            uint64_t v116 = v236;
            if (v272 == 1) {
              break;
            }
            uint64_t v287 = v396;
            sub_10001D074(v271, v396, &qword_101638CF0);
            if (v261(v269, 1, v236) == 1)
            {
              sub_10001DAB4(v422, &qword_101638CF0);
              ((void (*)(uint64_t, uint64_t))*v419)(v287, v236);
LABEL_160:
              sub_10001DAB4(v271, (uint64_t *)&unk_10166EAF0);
              uint64_t v198 = v427;
              uint64_t v200 = v433;
              uint64_t v273 = v434;
              goto LABEL_161;
            }
            uint64_t v302 = v382;
            v262(v382, v269, v236);
            sub_100B22DA4((unint64_t *)&qword_10163B8F0, (void (*)(uint64_t))&type metadata accessor for UUID);
            uint64_t v303 = v271;
            char v304 = dispatch thunk of static Equatable.== infix(_:_:)();
            uint64_t v305 = (void (*)(uint64_t, uint64_t))*v419;
            uint64_t v306 = v302;
            uint64_t v116 = v236;
            ((void (*)(char *, uint64_t))*v419)(v306, v236);
            sub_10001DAB4(v422, &qword_101638CF0);
            v305(v287, v236);
            sub_10001DAB4(v303, &qword_101638CF0);
            uint64_t v117 = (uint64_t)v420;
            uint64_t v198 = v427;
            uint64_t v200 = v433;
            uint64_t v273 = v434;
            if (v304)
            {
              v305((uint64_t)v421, v116);
              goto LABEL_154;
            }
LABEL_161:
            sub_100B30D0C(v198, v415, (uint64_t (*)(void))type metadata accessor for OwnedBeaconRecord);
            unint64_t v288 = (unint64_t)v453;
            if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
              unint64_t v288 = sub_100A6F6C4(0, *(void *)(v288 + 16) + 1, 1, v288);
            }
            unint64_t v290 = *(void *)(v288 + 16);
            unint64_t v289 = *(void *)(v288 + 24);
            if (v290 >= v289 >> 1) {
              unint64_t v288 = sub_100A6F6C4(v289 > 1, v290 + 1, 1, v288);
            }
            *(void *)(v288 + 16) = v290 + 1;
            sub_100B30DB4(v415, v288 + v429 + v290 * (void)v273, (uint64_t (*)(void))type metadata accessor for OwnedBeaconRecord);
            v453 = (void *)v288;
            uint64_t v291 = v399;
            sub_100B30D0C(v198, v399, (uint64_t (*)(void))type metadata accessor for OwnedBeaconRecord);
            uint64_t v292 = v198;
            uint64_t v293 = v198;
            uint64_t v294 = v400;
            sub_100B30D0C(v292, v400, (uint64_t (*)(void))type metadata accessor for OwnedBeaconRecord);
            uint64_t v295 = Logger.logObject.getter();
            os_log_type_t v296 = static os_log_type_t.error.getter();
            if (!os_log_type_enabled(v295, v296))
            {

              sub_100B310AC(v294, (uint64_t (*)(void))type metadata accessor for OwnedBeaconRecord);
              sub_100B310AC(v291, (uint64_t (*)(void))type metadata accessor for OwnedBeaconRecord);
              uint64_t v116 = v441;
              ((void (*)(char *, uint64_t))*v419)(v421, v441);
              sub_100B310AC(v293, (uint64_t (*)(void))type metadata accessor for OwnedBeaconRecord);
              uint64_t v117 = (uint64_t)v420;
              uint64_t v234 = v437;
              uint64_t v198 = v293;
              goto LABEL_156;
            }
            uint64_t v297 = swift_slowAlloc();
            uint64_t v398 = (char *)swift_slowAlloc();
            uint64_t aBlock = (uint64_t)v398;
            *(_DWORD *)uint64_t v297 = v425;
            *(void *)(v297 + 4) = 1752392040;
            *(_WORD *)(v297 + 12) = 2081;
            sub_100B22DA4((unint64_t *)&qword_101638B10, (void (*)(uint64_t))&type metadata accessor for UUID);
            uint64_t v298 = dispatch thunk of CustomStringConvertible.description.getter();
            *(void *)(v297 + 14) = sub_1008FA0F0(v298, v299, &aBlock);
            swift_bridgeObjectRelease();
            sub_100B310AC(v291, (uint64_t (*)(void))type metadata accessor for OwnedBeaconRecord);
            *(_WORD *)(v297 + 22) = 2082;
            sub_100B30D0C(v294, v436, (uint64_t (*)(void))type metadata accessor for OwnedBeaconRecord);
            uint64_t v300 = String.init<A>(describing:)();
            *(void *)(v297 + 24) = sub_1008FA0F0(v300, v301, &aBlock);
            swift_bridgeObjectRelease();
            sub_100B310AC(v294, (uint64_t (*)(void))type metadata accessor for OwnedBeaconRecord);
            _os_log_impl((void *)&_mh_execute_header, v295, v296, "Beacon %{private,mask.hash}s groupId mismatch with group: %{public}s)", (uint8_t *)v297, 0x20u);
            swift_arrayDestroy();
            swift_slowDealloc();
            swift_slowDealloc();

            uint64_t v116 = v441;
            ((void (*)(char *, uint64_t))*v419)(v421, v441);
            uint64_t v198 = v427;
            sub_100B310AC(v427, (uint64_t (*)(void))type metadata accessor for OwnedBeaconRecord);
            uint64_t v117 = (uint64_t)v420;
LABEL_155:
            uint64_t v234 = v437;
LABEL_156:
            v235 += (uint64_t)v273;
            uint64_t v233 = v440 - 1;
            if (v440 == 1)
            {
              swift_bridgeObjectRelease();
              uint64_t v197 = v401;
              uint64_t v201 = (uint64_t)v418;
              goto LABEL_171;
            }
          }
          sub_10001DAB4(v422, &qword_101638CF0);
          if (v261(v269, 1, v236) == 1)
          {
            sub_10001DAB4(v271, &qword_101638CF0);
            uint64_t v117 = (uint64_t)v420;
            uint64_t v198 = v427;
            uint64_t v200 = v433;
            uint64_t v273 = v434;
            ((void (*)(char *, uint64_t))*v419)(v421, v116);
            goto LABEL_154;
          }
          goto LABEL_160;
        }
        swift_bridgeObjectRelease();
LABEL_171:
        sub_100B310AC(v201, (uint64_t (*)(void))type metadata accessor for StableIdentifier);
        uint64_t v199 = (uint64_t)v386;
        uint64_t v137 = v384;
      }
      uint64_t v192 = (uint64_t)v417;
      unint64_t v196 = (unint64_t)v416;
      continue;
    }
    break;
  }
  swift_bridgeObjectRelease();
  swift_release();
  uint64_t v308 = v453[2];
  if (v308)
  {
    uint64_t v309 = *(unsigned __int8 *)(v413 + 80);
    uint64_t v418 = v453;
    uint64_t v310 = (uint64_t)v453 + ((v309 + 32) & ~v309);
    uint64_t v420 = &v451;
    uint64_t v440 = v309 | 7;
    v435 = (uint64_t (**)(uint64_t, uint64_t, uint64_t))((v309 + 24) & ~v309);
    v434 = (char *)(((unint64_t)v435 + v368 + 7) & 0xFFFFFFFFFFFFFFF8);
    v433 = (unsigned int (*)(uint64_t, uint64_t, uint64_t))(v434 + 8);
    LODWORD(v432) = enum case for SystemInfo.DeviceLockState.beforeFirstUnlock(_:);
    *(void *)&long long v431 = v369 + 104;
    v430 = (char *)(v369 + 8);
    uint64_t v429 = (v309 + 16) & ~v309;
    unint64_t v428 = (v368 + 7 + v429) & 0xFFFFFFFFFFFFFFF8;
    unint64_t v311 = (v428 + 23) & 0xFFFFFFFFFFFFFFF8;
    *(void *)&long long v425 = v311 + 8;
    unint64_t v424 = v311 + 9;
    unint64_t v427 = v311;
    uint64_t v422 = v311 + 10;
    uint64_t v421 = *(char **)(v413 + 72);
    v419 = (uint64_t *)((char *)&type metadata for Any + 8);
    long long v439 = xmmword_101342130;
    do
    {
      sub_100B30D0C(v310, v197, (uint64_t (*)(void))type metadata accessor for OwnedBeaconRecord);
      if (qword_101636F50 != -1) {
        swift_once();
      }
      uint64_t v322 = type metadata accessor for Logger();
      sub_100010324(v322, (uint64_t)qword_10170E9E8);
      uint64_t v323 = v387;
      sub_100B30D0C(v197, v387, (uint64_t (*)(void))type metadata accessor for OwnedBeaconRecord);
      uint64_t v324 = Logger.logObject.getter();
      os_log_type_t v325 = static os_log_type_t.error.getter();
      BOOL v326 = os_log_type_enabled(v324, v325);
      uint64_t v437 = v310;
      uint64_t v438 = v308;
      if (v326)
      {
        uint64_t v327 = swift_slowAlloc();
        uint64_t aBlock = swift_slowAlloc();
        *(_DWORD *)uint64_t v327 = v404;
        uint64_t v450 = 1752392040;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        *(_WORD *)(v327 + 12) = 2081;
        sub_100B22DA4((unint64_t *)&qword_101638B10, (void (*)(uint64_t))&type metadata accessor for UUID);
        uint64_t v328 = dispatch thunk of CustomStringConvertible.description.getter();
        uint64_t v450 = sub_1008FA0F0(v328, v329, &aBlock);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        sub_100B310AC(v323, (uint64_t (*)(void))type metadata accessor for OwnedBeaconRecord);
        _os_log_impl((void *)&_mh_execute_header, v324, v325, "Unpairing %{private,mask.hash}s", (uint8_t *)v327, 0x16u);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
      }
      else
      {
        sub_100B310AC(v323, (uint64_t (*)(void))type metadata accessor for OwnedBeaconRecord);
      }

      uint64_t v330 = v442;
      swift_beginAccess();
      if (*v330)
      {
        uint64_t v450 = 0x6E69726961706E55;
        unint64_t v451 = 0xEA00000000002067;
        sub_100B22DA4((unint64_t *)&qword_101638B10, (void (*)(uint64_t))&type metadata accessor for UUID);
        v331._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
        String.append(_:)(v331);
        swift_bridgeObjectRelease();
        uint64_t v332 = v450;
        unint64_t v333 = v451;
        uint64_t v334 = v442;
        uint64_t v335 = (void *)*v442;
        char v336 = swift_isUniquelyReferenced_nonNull_native();
        *uint64_t v334 = v335;
        if ((v336 & 1) == 0)
        {
          uint64_t v335 = sub_100A6E25C(0, v335[2] + 1, 1, v335);
          void *v442 = v335;
        }
        unint64_t v338 = v335[2];
        unint64_t v337 = v335[3];
        if (v338 >= v337 >> 1)
        {
          uint64_t v335 = sub_100A6E25C((void *)(v337 > 1), v338 + 1, 1, v335);
          void *v442 = v335;
        }
        v335[2] = v338 + 1;
        uint64_t v339 = &v335[2 * v338];
        v339[4] = v332;
        v339[5] = v333;
      }
      swift_endAccess();
      dispatch_group_t v340 = v392;
      dispatch_group_enter(v392);
      uint64_t v341 = v388;
      sub_100B30D0C(v197, v388, (uint64_t (*)(void))type metadata accessor for OwnedBeaconRecord);
      sub_100B30D0C(v341, v411, (uint64_t (*)(void))type metadata accessor for OwnedBeaconRecord);
      uint64_t v342 = swift_allocObject();
      *(void *)(v342 + 16) = v340;
      sub_100B30DB4(v341, (uint64_t)v435 + v342, (uint64_t (*)(void))type metadata accessor for OwnedBeaconRecord);
      *(void *)&v434[v342] = v412;
      swift_retain_n();
      uint64_t v343 = v340;
      static os_log_type_t.default.getter();
      if (qword_101637260 != -1) {
        swift_once();
      }
      sub_10000588C((uint64_t *)&unk_10163AD00);
      uint64_t v344 = swift_allocObject();
      *(_OWORD *)(v344 + 16) = v439;
      uint64_t v345 = v197 + *(int *)(v443 + 20);
      sub_100B22DA4((unint64_t *)&qword_101638B10, (void (*)(uint64_t))&type metadata accessor for UUID);
      uint64_t v346 = dispatch thunk of CustomStringConvertible.description.getter();
      uint64_t v348 = v347;
      *(void *)(v344 + 56) = &type metadata for String;
      *(void *)(v344 + 64) = sub_10000B4CC();
      *(void *)(v344 + 32) = v346;
      *(void *)(v344 + 40) = v348;
      os_log(_:dso:log:_:_:)();
      swift_bridgeObjectRelease();
      uint64_t v349 = v389;
      static SystemInfo.lockState.getter();
      uint64_t v350 = v390;
      uint64_t v351 = v391;
      (*(void (**)(char *, void, uint64_t))v431)(v390, v432, v391);
      sub_100B22DA4((unint64_t *)&unk_101655610, (void (*)(uint64_t))&type metadata accessor for SystemInfo.DeviceLockState);
      dispatch thunk of RawRepresentable.rawValue.getter();
      dispatch thunk of RawRepresentable.rawValue.getter();
      uint64_t v352 = aBlock;
      uint64_t v353 = v450;
      uint64_t v354 = *(void (**)(char *, uint64_t))v430;
      (*(void (**)(char *, uint64_t))v430)(v350, v351);
      v354(v349, v351);
      if (v352 == v353)
      {
        static os_log_type_t.default.getter();
        os_log(_:dso:log:_:_:)();
        sub_10009FD9C();
        uint64_t v355 = swift_allocError();
        unsigned char *v356 = 0;
        sub_100B1A63C(v355, v343, v411, v412);
        swift_errorRelease();
      }
      uint64_t v312 = dispatch_group_create();
      dispatch_group_enter(v312);
      sub_10000588C(&qword_10163BC50);
      uint64_t v313 = v423;
      unint64_t v314 = (*(unsigned __int8 *)(v423 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v423 + 80);
      uint64_t v315 = swift_allocObject();
      *(_OWORD *)(v315 + 16) = v439;
      (*(void (**)(unint64_t, uint64_t, uint64_t))(v313 + 16))(v315 + v314, v345, v441);
      uint64_t v316 = swift_allocObject();
      *(void *)(v316 + 16) = v312;
      uint64_t v317 = v312;
      uint64_t v318 = v393;
      sub_100A07010(v315, (uint64_t)sub_1003B7AE8, v316);
      swift_bridgeObjectRelease();
      swift_release();
      OS_dispatch_group.wait()();
      uint64_t v197 = v401;
      uint64_t v319 = v436;
      sub_100B30D0C(v401, v436, (uint64_t (*)(void))type metadata accessor for OwnedBeaconRecord);
      uint64_t v320 = swift_allocObject();
      sub_100B30DB4(v319, v320 + v429, (uint64_t (*)(void))type metadata accessor for OwnedBeaconRecord);
      unint64_t v321 = (void (**)(uint64_t))(v320 + v428);
      *unint64_t v321 = sub_100B5A1E4;
      v321[1] = (void (*)(uint64_t))v342;
      *(void *)(v320 + v427) = v318;
      *(unsigned char *)(v320 + v425) = 0;
      *(unsigned char *)(v320 + v424) = 0;
      swift_retain();
      swift_retain();
      sub_10038F420(v197, (void (*)(void))sub_1003A952C, v320);

      swift_release();
      swift_release();

      sub_100B310AC(v411, (uint64_t (*)(void))type metadata accessor for OwnedBeaconRecord);
      swift_release();
      sub_100B310AC(v197, (uint64_t (*)(void))type metadata accessor for OwnedBeaconRecord);
      uint64_t v310 = (uint64_t)&v421[v437];
      uint64_t v308 = v438 - 1;
    }
    while (v438 != 1);
  }
  swift_bridgeObjectRelease();
  v357 = (void *)swift_allocObject();
  uint64_t v358 = v412;
  v357[2] = v371;
  v357[3] = v358;
  uint64_t v359 = v372;
  v357[4] = v370;
  v357[5] = v359;
  v448 = sub_100B5A674;
  v449 = v357;
  uint64_t aBlock = (uint64_t)_NSConcreteStackBlock;
  unint64_t v445 = 1107296256;
  v446 = sub_1004B5480;
  v447 = &unk_1015E8740;
  uint64_t v360 = _Block_copy(&aBlock);
  swift_retain();
  swift_retain();
  swift_retain();
  v361 = v373;
  static DispatchQoS.unspecified.getter();
  uint64_t v450 = (uint64_t)_swiftEmptyArrayStorage;
  sub_100B22DA4((unint64_t *)&qword_10163B7E0, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
  sub_10000588C((uint64_t *)&unk_10163F350);
  sub_100062734((unint64_t *)&qword_10163B7F0, (uint64_t *)&unk_10163F350);
  v362 = v375;
  uint64_t v363 = v378;
  dispatch thunk of SetAlgebra.init<A>(_:)();
  dispatch_group_t v364 = v392;
  OS_dispatch_group.notify(qos:flags:queue:execute:)();
  _Block_release(v360);

  (*(void (**)(char *, uint64_t))(v377 + 8))(v362, v363);
  (*(void (**)(char *, uint64_t))(v374 + 8))(v361, v376);
  swift_release();
  return swift_release();
}

uint64_t sub_100B19A30@<X0>(uint64_t *a1@<X0>, void *a2@<X1>, uint64_t a3@<X8>)
{
  v76[0] = a3;
  uint64_t v5 = type metadata accessor for UUID();
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v7 = __chkstk_darwin(v5);
  uint64_t v82 = (char *)v76 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v7);
  unint64_t v91 = (char *)v76 - v9;
  uint64_t v10 = sub_10000588C(&qword_101638CF0);
  uint64_t v11 = __chkstk_darwin(v10 - 8);
  uint64_t v13 = (char *)v76 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = __chkstk_darwin(v11);
  uint64_t v84 = (char *)v76 - v15;
  __chkstk_darwin(v14);
  id v88 = (char *)v76 - v16;
  uint64_t v17 = *a1;
  uint64_t v18 = a2[3];
  uint64_t v19 = a2[4];
  uint64_t v85 = a2;
  sub_10001CD44(a2, v18);
  uint64_t v20 = *(uint64_t (**)(uint64_t, uint64_t))(v19 + 16);
  uint64_t v95 = v17;
  swift_bridgeObjectRetain();
  uint64_t v21 = v20(v18, v19);
  int64_t v22 = 0;
  uint64_t v23 = *(void *)(v21 + 56);
  uint64_t v79 = v21 + 56;
  uint64_t v89 = v21;
  uint64_t v24 = 1 << *(unsigned char *)(v21 + 32);
  uint64_t v25 = -1;
  if (v24 < 64) {
    uint64_t v25 = ~(-1 << v24);
  }
  unint64_t v26 = v25 & v23;
  uint64_t v92 = v6 + 16;
  uint64_t v27 = (void (**)(char *, uint64_t, uint64_t, uint64_t))(v6 + 56);
  uint64_t v86 = v6 + 48;
  uint64_t v87 = v6;
  char v77 = (void (**)(unint64_t, char *, uint64_t))(v6 + 40);
  uint64_t v78 = v13;
  int64_t v80 = (unint64_t)(v24 + 63) >> 6;
  uint64_t v81 = (void (**)(unint64_t, uint64_t))(v6 + 8);
  uint64_t v28 = (void (**)(void, void, void))(v6 + 32);
  uint64_t v94 = v27;
  uint64_t v83 = v28;
  if (v26) {
    goto LABEL_7;
  }
LABEL_8:
  while (2)
  {
    int64_t v34 = v22 + 1;
    uint64_t v33 = v88;
    if (__OFADD__(v22, 1))
    {
LABEL_44:
      __break(1u);
LABEL_45:
      __break(1u);
LABEL_46:
      __break(1u);
LABEL_47:
      uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
      __break(1u);
      return result;
    }
    if (v34 < v80)
    {
      unint64_t v35 = *(void *)(v79 + 8 * v34);
      ++v22;
      if (v35) {
        goto LABEL_21;
      }
      int64_t v22 = v34 + 1;
      if (v34 + 1 >= v80) {
        break;
      }
      unint64_t v35 = *(void *)(v79 + 8 * v22);
      if (v35) {
        goto LABEL_21;
      }
      int64_t v22 = v34 + 2;
      if (v34 + 2 >= v80) {
        break;
      }
      unint64_t v35 = *(void *)(v79 + 8 * v22);
      if (v35)
      {
LABEL_21:
        uint64_t v97 = (v35 - 1) & v35;
        unint64_t v32 = __clz(__rbit64(v35)) + (v22 << 6);
        while (1)
        {
          uint64_t v37 = *(void *)(v89 + 48);
          uint64_t v38 = v87;
          uint64_t v93 = *(void *)(v87 + 72);
          id v90 = *(void (**)(char *, unint64_t, uint64_t))(v87 + 16);
          v90(v33, v37 + v93 * v32, v5);
          uint64_t v39 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v38 + 56);
          v39(v33, 0, 1, v5);
          uint64_t v40 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v38 + 48);
          if (v40(v33, 1, v5) == 1) {
            goto LABEL_42;
          }
          int64_t v96 = v22;
          uint64_t v41 = (void (*)(char *, char *, uint64_t))*v28;
          uint64_t v42 = (uint64_t)v91;
          v41(v91, v33, v5);
          uint64_t v43 = v85[3];
          uint64_t v44 = v85[4];
          sub_10001CD44(v85, v43);
          uint64_t v45 = *(void (**)(uint64_t, uint64_t))(v44 + 8);
          uint64_t v46 = v43;
          uint64_t v47 = (uint64_t)v84;
          uint64_t v48 = v44;
          uint64_t v27 = v94;
          v45(v46, v48);
          v39((char *)v47, 0, 1, v5);
          if (v40((char *)v47, 1, v5) != 1) {
            break;
          }
          id v90 = (void (*)(char *, unint64_t, uint64_t))v41;
          uint64_t v28 = v83;
          sub_10001DAB4(v47, &qword_101638CF0);
          uint64_t v49 = (void *)v95;
          swift_bridgeObjectRetain();
          unint64_t v50 = sub_1007240CC(v42);
          char v52 = v51;
          swift_bridgeObjectRelease();
          if (v52)
          {
            char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
            uint64_t v98 = v49;
            uint64_t v30 = (uint64_t)v78;
            if ((isUniquelyReferenced_nonNull_native & 1) == 0)
            {
              sub_100E7F31C();
              uint64_t v49 = v98;
            }
            unint64_t v54 = v50 * v93;
            uint64_t v31 = *v81;
            (*v81)(v49[6] + v50 * v93, v5);
            uint64_t v55 = (uint64_t)v98;
            v90((char *)v30, v98[7] + v54, v5);
            uint64_t v95 = v55;
            sub_100166888(v50, v55);
            swift_bridgeObjectRelease();
            uint64_t v27 = v94;
            v39((char *)v30, 0, 1, v5);
            uint64_t v29 = v91;
          }
          else
          {
            uint64_t v29 = (char *)v42;
            uint64_t v30 = (uint64_t)v78;
            v39(v78, 1, 1, v5);
            uint64_t v31 = *v81;
          }
          v31((unint64_t)v29, v5);
          sub_10001DAB4(v30, &qword_101638CF0);
          int64_t v22 = v96;
          unint64_t v26 = v97;
          if (!v97) {
            goto LABEL_8;
          }
LABEL_7:
          uint64_t v97 = (v26 - 1) & v26;
          unint64_t v32 = __clz(__rbit64(v26)) | (v22 << 6);
          uint64_t v33 = v88;
        }
        uint64_t v56 = v83;
        uint64_t v57 = (void (*)(unint64_t, char *, uint64_t))v41;
        v41(v82, (char *)v47, v5);
        uint64_t v58 = (void *)v95;
        int v59 = swift_isUniquelyReferenced_nonNull_native();
        uint64_t v98 = v58;
        unint64_t v61 = sub_1007240CC(v42);
        uint64_t v62 = v58[2];
        BOOL v63 = (v60 & 1) == 0;
        uint64_t v64 = v62 + v63;
        if (__OFADD__(v62, v63))
        {
          __break(1u);
          goto LABEL_44;
        }
        char v65 = v60;
        uint64_t v66 = v42;
        uint64_t v67 = v56;
        if (v58[3] < v64)
        {
          sub_100E673F4(v64, v59);
          unint64_t v68 = sub_1007240CC(v66);
          int64_t v22 = v96;
          if ((v65 & 1) != (v69 & 1)) {
            goto LABEL_47;
          }
          unint64_t v61 = v68;
          uint64_t v70 = v98;
          if ((v65 & 1) == 0) {
            goto LABEL_37;
          }
LABEL_35:
          (*v77)(v70[7] + v61 * v93, v82, v5);
          goto LABEL_39;
        }
        int64_t v22 = v96;
        if (v59)
        {
          uint64_t v70 = v98;
          if (v60) {
            goto LABEL_35;
          }
        }
        else
        {
          sub_100E7F31C();
          uint64_t v70 = v98;
          if (v65) {
            goto LABEL_35;
          }
        }
LABEL_37:
        v70[(v61 >> 6) + 8] |= 1 << v61;
        unint64_t v71 = v61 * v93;
        v90((char *)(v70[6] + v71), v66, v5);
        v57(v70[7] + v71, v82, v5);
        uint64_t v72 = v70[2];
        BOOL v73 = __OFADD__(v72, 1);
        uint64_t v74 = v72 + 1;
        if (v73) {
          goto LABEL_45;
        }
        v70[2] = v74;
LABEL_39:
        uint64_t v95 = (uint64_t)v98;
        swift_bridgeObjectRelease();
        (*v81)(v66, v5);
        uint64_t v27 = v94;
        unint64_t v26 = v97;
        uint64_t v28 = v67;
        if (!v97) {
          continue;
        }
        goto LABEL_7;
      }
      int64_t v36 = v34 + 3;
      if (v36 < v80)
      {
        unint64_t v35 = *(void *)(v79 + 8 * v36);
        if (v35)
        {
          int64_t v22 = v36;
          goto LABEL_21;
        }
        while (1)
        {
          int64_t v22 = v36 + 1;
          if (__OFADD__(v36, 1)) {
            goto LABEL_46;
          }
          if (v22 >= v80) {
            goto LABEL_41;
          }
          unint64_t v35 = *(void *)(v79 + 8 * v22);
          ++v36;
          if (v35) {
            goto LABEL_21;
          }
        }
      }
    }
    break;
  }
LABEL_41:
  (*v27)(v88, 1, 1, v5);
LABEL_42:
  uint64_t result = swift_release();
  *(void *)v76[0] = v95;
  return result;
}

unint64_t sub_100B1A1CC()
{
  uint64_t v1 = type metadata accessor for StableIdentifier();
  __chkstk_darwin(v1);
  os_log_type_t v3 = (void *)((char *)v36 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0));
  sub_100B30D0C(v0, (uint64_t)v3, (uint64_t (*)(void))type metadata accessor for StableIdentifier);
  switch(swift_getEnumCaseMultiPayload())
  {
    case 1u:
      uint64_t v5 = v3[4];
      id v4 = (void *)v3[5];
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      unint64_t v37 = 0;
      unint64_t v38 = 0xE000000000000000;
      _StringGuts.grow(_:)(24);
      swift_bridgeObjectRelease();
      unint64_t v6 = 0xD000000000000015;
      uint64_t v7 = "AirTag(serialNumber: ";
      goto LABEL_5;
    case 2u:
      uint64_t v14 = sub_10000588C(&qword_1016555E0);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      uint64_t v15 = (void *)((char *)v3 + *(int *)(v14 + 80));
      uint64_t v17 = *v15;
      uint64_t v16 = (void *)v15[1];
      uint64_t v18 = (char *)v3 + *(int *)(v14 + 96);
      char v19 = *v18;
      char v20 = v18[1];
      swift_bridgeObjectRelease();
      unint64_t v37 = 0;
      unint64_t v38 = 0xE000000000000000;
      if (v20)
      {
        _StringGuts.grow(_:)(25);
        swift_bridgeObjectRelease();
        unint64_t v37 = 0xD000000000000016;
        unint64_t v38 = 0x8000000101413990;
        uint64_t v21 = v17;
        int64_t v22 = v16;
      }
      else
      {
        _StringGuts.grow(_:)(35);
        swift_bridgeObjectRelease();
        unint64_t v37 = 0xD000000000000016;
        unint64_t v38 = 0x8000000101413990;
        v31._uint64_t countAndFlagsBits = v17;
        v31._object = v16;
        String.append(_:)(v31);
        swift_bridgeObjectRelease();
        v32._uint64_t countAndFlagsBits = 0x203A74726170202CLL;
        v32._object = (void *)0xE800000000000000;
        String.append(_:)(v32);
        LOBYTE(v36[0]) = v19;
        uint64_t v21 = dispatch thunk of CustomStringConvertible.description.getter();
      }
      String.append(_:)(*(Swift::String *)&v21);
      swift_bridgeObjectRelease();
      v33._uint64_t countAndFlagsBits = 41;
      v33._object = (void *)0xE100000000000000;
      String.append(_:)(v33);
      goto LABEL_12;
    case 3u:
      uint64_t v23 = sub_10000588C((uint64_t *)&unk_1016565E0);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      uint64_t v24 = (void *)((char *)v3 + *(int *)(v23 + 80));
      uint64_t v25 = *v24;
      unint64_t v26 = (void *)v24[1];
      char v27 = *((unsigned char *)v3 + *(int *)(v23 + 96));
      unint64_t v37 = 0;
      unint64_t v38 = 0xE000000000000000;
      _StringGuts.grow(_:)(34);
      swift_bridgeObjectRelease();
      unint64_t v37 = 0xD000000000000016;
      unint64_t v38 = 0x8000000101413950;
      swift_bridgeObjectRetain();
      v28._uint64_t countAndFlagsBits = v25;
      v28._object = v26;
      String.append(_:)(v28);
      swift_bridgeObjectRelease_n();
      v29._uint64_t countAndFlagsBits = 0x203A74726170202CLL;
      v29._object = (void *)0xE800000000000000;
      String.append(_:)(v29);
      LOBYTE(v36[0]) = v27;
      v30._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
      String.append(_:)(v30);
      swift_bridgeObjectRelease();
LABEL_12:
      unint64_t v13 = v37;
      uint64_t v34 = type metadata accessor for UUID();
      (*(void (**)(void *, uint64_t))(*(void *)(v34 - 8) + 8))(v3, v34);
      return v13;
    case 4u:
      uint64_t v9 = *v3;
      uint64_t v8 = v3[1];
      unint64_t v37 = 0;
      unint64_t v38 = 0xE000000000000000;
      _StringGuts.grow(_:)(28);
      v10._uint64_t countAndFlagsBits = 0xD000000000000019;
      v10._object = (void *)0x8000000101413970;
      String.append(_:)(v10);
      v36[0] = v9;
      v36[1] = v8;
      _print_unlocked<A, B>(_:_:)();
      goto LABEL_6;
    default:
      uint64_t v5 = *v3;
      id v4 = (void *)v3[1];
      unint64_t v37 = 0;
      unint64_t v38 = 0xE000000000000000;
      _StringGuts.grow(_:)(31);
      swift_bridgeObjectRelease();
      unint64_t v6 = 0xD00000000000001CLL;
      uint64_t v7 = "Self-beaconing device(UDID: ";
LABEL_5:
      unint64_t v37 = v6;
      unint64_t v38 = (unint64_t)(v7 - 32) | 0x8000000000000000;
      v11._uint64_t countAndFlagsBits = v5;
      v11._object = v4;
      String.append(_:)(v11);
LABEL_6:
      swift_bridgeObjectRelease();
      v12._uint64_t countAndFlagsBits = 41;
      v12._object = (void *)0xE100000000000000;
      String.append(_:)(v12);
      return v37;
  }
}

void sub_100B1A63C(uint64_t a1, NSObject *a2, uint64_t a3, uint64_t a4)
{
  dispatch_group_t v56 = a2;
  uint64_t v7 = type metadata accessor for OwnedBeaconRecord();
  uint64_t v8 = __chkstk_darwin(v7);
  Swift::String v10 = (char *)&v52 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = __chkstk_darwin(v8);
  unint64_t v13 = (char *)&v52 - v12;
  uint64_t v14 = (void **)(a4 + 16);
  uint64_t v55 = v11;
  if (a1)
  {
    swift_errorRetain();
    if (qword_101636F50 != -1) {
      swift_once();
    }
    uint64_t v15 = type metadata accessor for Logger();
    sub_100010324(v15, (uint64_t)qword_10170E9E8);
    sub_100B30D0C(a3, (uint64_t)v10, (uint64_t (*)(void))type metadata accessor for OwnedBeaconRecord);
    swift_errorRetain();
    swift_errorRetain();
    uint64_t v16 = Logger.logObject.getter();
    os_log_type_t v17 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v16, v17))
    {
      uint64_t v18 = swift_slowAlloc();
      unint64_t v54 = v14;
      uint64_t v19 = v18;
      char v52 = (void *)swift_slowAlloc();
      uint64_t v53 = swift_slowAlloc();
      v59[0] = v53;
      *(_DWORD *)uint64_t v19 = 141558531;
      uint64_t v57 = 1752392040;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v19 + 12) = 2081;
      type metadata accessor for UUID();
      sub_100B22DA4((unint64_t *)&qword_101638B10, (void (*)(uint64_t))&type metadata accessor for UUID);
      uint64_t v20 = dispatch thunk of CustomStringConvertible.description.getter();
      uint64_t v57 = sub_1008FA0F0(v20, v21, v59);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      sub_100B310AC((uint64_t)v10, (uint64_t (*)(void))type metadata accessor for OwnedBeaconRecord);
      *(_WORD *)(v19 + 22) = 2112;
      uint64_t v22 = _convertErrorToNSError(_:)();
      uint64_t v57 = v22;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *char v52 = v22;
      swift_errorRelease();
      swift_errorRelease();
      _os_log_impl((void *)&_mh_execute_header, v16, v17, "Error unpairing %{private,mask.hash}s: %@", (uint8_t *)v19, 0x20u);
      sub_10000588C((uint64_t *)&unk_101638EA0);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_arrayDestroy();
      swift_slowDealloc();
      uint64_t v14 = v54;
      swift_slowDealloc();
    }
    else
    {
      sub_100B310AC((uint64_t)v10, (uint64_t (*)(void))type metadata accessor for OwnedBeaconRecord);
      swift_errorRelease();
      swift_errorRelease();
    }

    swift_beginAccess();
    if (*v14)
    {
      uint64_t v57 = 0;
      unint64_t v58 = 0xE000000000000000;
      _StringGuts.grow(_:)(24);
      swift_bridgeObjectRelease();
      uint64_t v57 = 0xD000000000000012;
      unint64_t v58 = 0x8000000101413A10;
      type metadata accessor for UUID();
      sub_100B22DA4((unint64_t *)&qword_101638B10, (void (*)(uint64_t))&type metadata accessor for UUID);
      v29._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
      String.append(_:)(v29);
      swift_bridgeObjectRelease();
      v30._uint64_t countAndFlagsBits = 8250;
      v30._object = (void *)0xE200000000000000;
      String.append(_:)(v30);
      Swift::String v31 = (void *)_convertErrorToNSError(_:)();
      id v32 = [v31 description];
      uint64_t v33 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      unint64_t v35 = v34;

      v36._uint64_t countAndFlagsBits = v33;
      v36._object = v35;
      String.append(_:)(v36);

      swift_bridgeObjectRelease();
      uint64_t v37 = v57;
      unint64_t v38 = v58;
      uint64_t v39 = *v14;
      char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      *uint64_t v14 = v39;
      if ((isUniquelyReferenced_nonNull_native & 1) == 0)
      {
        uint64_t v39 = sub_100A6E25C(0, v39[2] + 1, 1, v39);
        *uint64_t v14 = v39;
      }
      unint64_t v42 = v39[2];
      unint64_t v41 = v39[3];
      if (v42 >= v41 >> 1)
      {
        uint64_t v39 = sub_100A6E25C((void *)(v41 > 1), v42 + 1, 1, v39);
        *uint64_t v14 = v39;
      }
      void v39[2] = v42 + 1;
      uint64_t v43 = &v39[2 * v42];
      v43[4] = v37;
      v43[5] = v38;
    }
    swift_endAccess();
    swift_errorRelease();
  }
  else
  {
    if (qword_101636F50 != -1) {
      swift_once();
    }
    uint64_t v23 = type metadata accessor for Logger();
    sub_100010324(v23, (uint64_t)qword_10170E9E8);
    unint64_t v54 = (void **)a3;
    sub_100B30D0C(a3, (uint64_t)v13, (uint64_t (*)(void))type metadata accessor for OwnedBeaconRecord);
    uint64_t v24 = Logger.logObject.getter();
    os_log_type_t v25 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v24, v25))
    {
      uint64_t v26 = swift_slowAlloc();
      v59[0] = swift_slowAlloc();
      *(_DWORD *)uint64_t v26 = 141558275;
      uint64_t v57 = 1752392040;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v26 + 12) = 2081;
      type metadata accessor for UUID();
      sub_100B22DA4((unint64_t *)&qword_101638B10, (void (*)(uint64_t))&type metadata accessor for UUID);
      uint64_t v27 = dispatch thunk of CustomStringConvertible.description.getter();
      uint64_t v57 = sub_1008FA0F0(v27, v28, v59);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      sub_100B310AC((uint64_t)v13, (uint64_t (*)(void))type metadata accessor for OwnedBeaconRecord);
      _os_log_impl((void *)&_mh_execute_header, v24, v25, "Successfully unpaired %{private,mask.hash}s", (uint8_t *)v26, 0x16u);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      sub_100B310AC((uint64_t)v13, (uint64_t (*)(void))type metadata accessor for OwnedBeaconRecord);
    }

    swift_beginAccess();
    if (*v14)
    {
      uint64_t v57 = 0;
      unint64_t v58 = 0xE000000000000000;
      _StringGuts.grow(_:)(24);
      swift_bridgeObjectRelease();
      uint64_t v57 = 0xD000000000000016;
      unint64_t v58 = 0x80000001014139F0;
      type metadata accessor for UUID();
      sub_100B22DA4((unint64_t *)&qword_101638B10, (void (*)(uint64_t))&type metadata accessor for UUID);
      v44._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
      String.append(_:)(v44);
      swift_bridgeObjectRelease();
      uint64_t v45 = v57;
      unint64_t v46 = v58;
      uint64_t v47 = *v14;
      char v48 = swift_isUniquelyReferenced_nonNull_native();
      *uint64_t v14 = v47;
      if ((v48 & 1) == 0)
      {
        uint64_t v47 = sub_100A6E25C(0, v47[2] + 1, 1, v47);
        *uint64_t v14 = v47;
      }
      unint64_t v50 = v47[2];
      unint64_t v49 = v47[3];
      if (v50 >= v49 >> 1)
      {
        uint64_t v47 = sub_100A6E25C((void *)(v49 > 1), v50 + 1, 1, v47);
        *uint64_t v14 = v47;
      }
      _DWORD v47[2] = v50 + 1;
      char v51 = &v47[2 * v50];
      v51[4] = v45;
      v51[5] = v46;
    }
    swift_endAccess();
  }
  dispatch_group_leave(v56);
}

uint64_t sub_100B1AEE0(uint64_t a1, uint64_t a2, void (*a3)(void *, void))
{
  uint64_t v5 = (void *)(a2 + 16);
  swift_beginAccess();
  uint64_t v6 = *(void *)(a2 + 16);
  if (v6)
  {
    if (!*(void *)(v6 + 16))
    {
      swift_beginAccess();
      if (*v5)
      {
        *uint64_t v5 = &off_1015A5918;
        swift_bridgeObjectRelease();
      }
    }
  }
  swift_beginAccess();
  if (*v5) {
    uint64_t v7 = (void *)*v5;
  }
  else {
    uint64_t v7 = _swiftEmptyArrayStorage;
  }
  swift_bridgeObjectRetain();
  a3(v7, 0);
  return swift_bridgeObjectRelease();
}

uint64_t sub_100B1AFB0()
{
  uint64_t v0 = type metadata accessor for PrefixedDefaults();
  sub_10001E384(v0, qword_1016586E8);
  sub_100010324(v0, (uint64_t)qword_1016586E8);
  return PrefixedDefaults.init(prefix:)();
}

uint64_t sub_100B1B018()
{
  if (qword_101636CD8 != -1) {
    swift_once();
  }
  OS_dispatch_queue.sync<A>(execute:)();
  sub_1010AC7B8(v2);
  swift_bridgeObjectRelease();
  uint64_t result = static Duration.seconds(_:)();
  qword_101658700 = result;
  *(void *)algn_101658708 = v1;
  return result;
}

uint64_t sub_100B1B0DC()
{
  uint64_t v0 = type metadata accessor for PrefixedDefaults();
  sub_10001E384(v0, qword_101658710);
  uint64_t v1 = sub_100010324(v0, (uint64_t)qword_101658710);
  if (qword_101636F78 != -1) {
    swift_once();
  }
  uint64_t v2 = sub_100010324(v0, (uint64_t)qword_1016586E8);
  os_log_type_t v3 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v0 - 8) + 16);

  return v3(v1, v2, v0);
}

uint64_t sub_100B1B1A4()
{
  uint64_t v0 = type metadata accessor for PrefixedDefaults();
  uint64_t v1 = *(void *)(v0 - 8);
  __chkstk_darwin(v0);
  os_log_type_t v3 = (char *)&v7 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = sub_10000588C(&qword_101659570);
  sub_10001E384(v4, qword_101658728);
  sub_100010324(v4, (uint64_t)qword_101658728);
  if (qword_101636F88 != -1) {
    swift_once();
  }
  uint64_t v5 = sub_100010324(v0, (uint64_t)qword_101658710);
  (*(void (**)(char *, uint64_t, uint64_t))(v1 + 16))(v3, v5, v0);
  type metadata accessor for Date();
  return ManagedDefault.init(prefixedDefaults:key:)();
}

uint64_t sub_100B1B310(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = sub_10000588C(&qword_10164DBB0);
  __chkstk_darwin(v3 - 8);
  uint64_t v5 = (char *)v15 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = type metadata accessor for TaskPriority();
  uint64_t v7 = *(void *)(v6 - 8);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v7 + 56))(v5, 1, 1, v6);
  uint64_t v8 = (void *)swift_allocObject();
  v8[2] = 0;
  _OWORD v8[3] = 0;
  v8[4] = a2;
  int v9 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v7 + 48))(v5, 1, v6);
  swift_retain();
  if (v9 == 1)
  {
    sub_10001DAB4((uint64_t)v5, &qword_10164DBB0);
    uint64_t v10 = 0;
    uint64_t v11 = 0;
  }
  else
  {
    TaskPriority.rawValue.getter();
    (*(void (**)(char *, uint64_t))(v7 + 8))(v5, v6);
    if (v8[2])
    {
      swift_getObjectType();
      swift_unknownObjectRetain();
      uint64_t v10 = dispatch thunk of Actor.unownedExecutor.getter();
      uint64_t v11 = v12;
      swift_unknownObjectRelease();
    }
    else
    {
      uint64_t v10 = 0;
      uint64_t v11 = 0;
    }
  }
  uint64_t v13 = swift_allocObject();
  *(void *)(v13 + 16) = &unk_101659258;
  *(void *)(v13 + 24) = v8;
  if (v11 | v10)
  {
    v15[0] = 0;
    v15[1] = 0;
    void v15[2] = v10;
    _OWORD v15[3] = v11;
  }
  swift_task_create();
  return swift_release();
}

uint64_t sub_100B1B554(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v4[16] = a4;
  uint64_t v5 = type metadata accessor for OwnedBeaconRecord();
  v4[17] = v5;
  v4[18] = *(void *)(v5 - 8);
  v4[19] = swift_task_alloc();
  v4[20] = swift_task_alloc();
  v4[21] = swift_task_alloc();
  return _swift_task_switch(sub_100B1B630, 0, 0);
}

uint64_t sub_100B1B630()
{
  uint64_t v1 = qword_1016375E8;
  swift_retain();
  if (v1 != -1) {
    swift_once();
  }
  swift_beginAccess();
  uint64_t result = sub_10001D074((uint64_t)&xmmword_10166E8F0, v0 + 56, (uint64_t *)&unk_101638D30);
  if (*(void *)(v0 + 80))
  {
    sub_10001CEB0((long long *)(v0 + 56), v0 + 16);
    swift_release();
    sub_10001CD44((void *)(v0 + 16), *(void *)(v0 + 40));
    uint64_t v4 = (uint64_t (__cdecl *)())((char *)&dword_101639270 + dword_101639270);
    uint64_t v3 = (void *)swift_task_alloc();
    *(void *)(v0 + 176) = v3;
    *uint64_t v3 = v0;
    v3[1] = sub_100B1B780;
    return v4();
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_100B1B780(uint64_t a1)
{
  *(void *)(*(void *)v1 + 184) = a1;
  swift_task_dealloc();
  return _swift_task_switch(sub_100B1B880, 0, 0);
}

uint64_t sub_100B1B880()
{
  uint64_t v1 = (uint64_t)(v0 + 2);
  if (v0[23])
  {
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v1);
    uint64_t v2 = (void *)swift_task_alloc();
    v0[24] = v2;
    *uint64_t v2 = v0;
    v2[1] = sub_100B1B96C;
    return sub_100091CF4();
  }
  else
  {
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v1);
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v4 = (uint64_t (*)(void))v0[1];
    return v4();
  }
}

uint64_t sub_100B1B96C(uint64_t a1)
{
  uint64_t v3 = *v2;
  *(void *)(v3 + 200) = a1;
  *(void *)(v3 + 208) = v1;
  swift_task_dealloc();
  if (v1) {
    uint64_t v4 = sub_100B1C3CC;
  }
  else {
    uint64_t v4 = sub_100B1BA80;
  }
  return _swift_task_switch(v4, 0, 0);
}

uint64_t sub_100B1BA80()
{
  uint64_t v26 = v0;
  uint64_t v1 = *(void *)(v0 + 200);
  uint64_t v2 = *(void *)(v1 + 16);
  *(void *)(v0 + 216) = v2;
  if (v2)
  {
    uint64_t v3 = *(void *)(v0 + 144);
    int v4 = *(_DWORD *)(v3 + 80);
    *(_DWORD *)(v0 + 272) = v4;
    *(void *)(v0 + 224) = *(void *)(v3 + 72);
    *(void *)(v0 + 232) = 0;
    sub_100B30D0C(v1 + ((v4 + 32) & ~(unint64_t)v4), *(void *)(v0 + 168), (uint64_t (*)(void))type metadata accessor for OwnedBeaconRecord);
    if (qword_101636F50 != -1) {
      swift_once();
    }
    uint64_t v5 = *(void *)(v0 + 160);
    uint64_t v6 = *(void *)(v0 + 168);
    uint64_t v7 = type metadata accessor for Logger();
    *(void *)(v0 + 240) = sub_100010324(v7, (uint64_t)qword_10170E9E8);
    sub_100B30D0C(v6, v5, (uint64_t (*)(void))type metadata accessor for OwnedBeaconRecord);
    uint64_t v8 = Logger.logObject.getter();
    os_log_type_t v9 = static os_log_type_t.default.getter();
    BOOL v10 = os_log_type_enabled(v8, v9);
    uint64_t v11 = *(void *)(v0 + 160);
    if (v10)
    {
      uint64_t v12 = swift_slowAlloc();
      uint64_t v25 = swift_slowAlloc();
      *(_DWORD *)uint64_t v12 = 141558275;
      *(void *)(v12 + 4) = 1752392040;
      *(_WORD *)(v12 + 12) = 2081;
      type metadata accessor for UUID();
      sub_100B22DA4((unint64_t *)&qword_101638B10, (void (*)(uint64_t))&type metadata accessor for UUID);
      uint64_t v13 = dispatch thunk of CustomStringConvertible.description.getter();
      *(void *)(v12 + 14) = sub_1008FA0F0(v13, v14, &v25);
      swift_bridgeObjectRelease();
      sub_100B310AC(v11, (uint64_t (*)(void))type metadata accessor for OwnedBeaconRecord);
      _os_log_impl((void *)&_mh_execute_header, v8, v9, "Removing ghost beacon: %{private,mask.hash}s", (uint8_t *)v12, 0x16u);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      sub_100B310AC(*(void *)(v0 + 160), (uint64_t (*)(void))type metadata accessor for OwnedBeaconRecord);
    }

    uint64_t v21 = *(void *)(v0 + 168);
    uint64_t v22 = *(void *)(v0 + 128);
    uint64_t v23 = swift_task_alloc();
    *(void *)(v0 + 248) = v23;
    *(void *)(v23 + 16) = v22;
    *(void *)(v23 + 24) = v21;
    uint64_t v24 = (void *)swift_task_alloc();
    *(void *)(v0 + 256) = v24;
    *uint64_t v24 = v0;
    v24[1] = sub_100B1BEE4;
    return withCheckedThrowingContinuation<A>(isolation:function:_:)(v24, 0, 0, 0xD000000000000014, 0x8000000101413510, sub_100B53BBC, v23, (char *)&type metadata for () + 8);
  }
  else
  {
    if (qword_101636F50 != -1) {
      swift_once();
    }
    uint64_t v15 = type metadata accessor for Logger();
    sub_100010324(v15, (uint64_t)qword_10170E9E8);
    uint64_t v16 = Logger.logObject.getter();
    os_log_type_t v17 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v16, v17))
    {
      uint64_t v18 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v18 = 0;
      _os_log_impl((void *)&_mh_execute_header, v16, v17, "No ghost beacons.", v18, 2u);
      swift_slowDealloc();
    }

    swift_bridgeObjectRelease();
    swift_release();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v19 = *(uint64_t (**)(void))(v0 + 8);
    return v19();
  }
}

uint64_t sub_100B1BEE4()
{
  *(void *)(*(void *)v1 + 264) = v0;
  swift_task_dealloc();
  if (v0)
  {
    uint64_t v2 = sub_100B1C5F4;
  }
  else
  {
    swift_task_dealloc();
    uint64_t v2 = sub_100B1C000;
  }
  return _swift_task_switch(v2, 0, 0);
}

uint64_t sub_100B1C000()
{
  uint64_t v22 = v0;
  uint64_t v1 = *(void *)(v0 + 216);
  uint64_t v2 = *(void *)(v0 + 232) + 1;
  sub_100B310AC(*(void *)(v0 + 168), (uint64_t (*)(void))type metadata accessor for OwnedBeaconRecord);
  if (v2 == v1)
  {
    swift_bridgeObjectRelease();
    swift_release();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v3 = *(uint64_t (**)(void))(v0 + 8);
    return v3();
  }
  else
  {
    uint64_t v5 = *(void *)(v0 + 224);
    uint64_t v6 = *(void *)(v0 + 232) + 1;
    *(void *)(v0 + 232) = v6;
    sub_100B30D0C(*(void *)(v0 + 200)+ ((*(unsigned __int8 *)(v0 + 272) + 32) & ~(unint64_t)*(unsigned __int8 *)(v0 + 272))+ v5 * v6, *(void *)(v0 + 168), (uint64_t (*)(void))type metadata accessor for OwnedBeaconRecord);
    if (qword_101636F50 != -1) {
      swift_once();
    }
    uint64_t v7 = *(void *)(v0 + 160);
    uint64_t v8 = *(void *)(v0 + 168);
    uint64_t v9 = type metadata accessor for Logger();
    *(void *)(v0 + 240) = sub_100010324(v9, (uint64_t)qword_10170E9E8);
    sub_100B30D0C(v8, v7, (uint64_t (*)(void))type metadata accessor for OwnedBeaconRecord);
    BOOL v10 = Logger.logObject.getter();
    os_log_type_t v11 = static os_log_type_t.default.getter();
    BOOL v12 = os_log_type_enabled(v10, v11);
    uint64_t v13 = *(void *)(v0 + 160);
    if (v12)
    {
      uint64_t v14 = swift_slowAlloc();
      uint64_t v21 = swift_slowAlloc();
      *(_DWORD *)uint64_t v14 = 141558275;
      *(void *)(v14 + 4) = 1752392040;
      *(_WORD *)(v14 + 12) = 2081;
      type metadata accessor for UUID();
      sub_100B22DA4((unint64_t *)&qword_101638B10, (void (*)(uint64_t))&type metadata accessor for UUID);
      uint64_t v15 = dispatch thunk of CustomStringConvertible.description.getter();
      *(void *)(v14 + 14) = sub_1008FA0F0(v15, v16, &v21);
      swift_bridgeObjectRelease();
      sub_100B310AC(v13, (uint64_t (*)(void))type metadata accessor for OwnedBeaconRecord);
      _os_log_impl((void *)&_mh_execute_header, v10, v11, "Removing ghost beacon: %{private,mask.hash}s", (uint8_t *)v14, 0x16u);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      sub_100B310AC(*(void *)(v0 + 160), (uint64_t (*)(void))type metadata accessor for OwnedBeaconRecord);
    }

    uint64_t v17 = *(void *)(v0 + 168);
    uint64_t v18 = *(void *)(v0 + 128);
    uint64_t v19 = swift_task_alloc();
    *(void *)(v0 + 248) = v19;
    *(void *)(v19 + 16) = v18;
    *(void *)(v19 + 24) = v17;
    uint64_t v20 = (void *)swift_task_alloc();
    *(void *)(v0 + 256) = v20;
    *uint64_t v20 = v0;
    v20[1] = sub_100B1BEE4;
    return withCheckedThrowingContinuation<A>(isolation:function:_:)(v20, 0, 0, 0xD000000000000014, 0x8000000101413510, sub_100B53BBC, v19, (char *)&type metadata for () + 8);
  }
}

uint64_t sub_100B1C3CC()
{
  swift_release();
  if (qword_101636F50 != -1) {
    swift_once();
  }
  uint64_t v1 = type metadata accessor for Logger();
  sub_100010324(v1, (uint64_t)qword_10170E9E8);
  swift_errorRetain();
  swift_errorRetain();
  uint64_t v2 = Logger.logObject.getter();
  os_log_type_t v3 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v2, v3))
  {
    uint64_t v4 = (uint8_t *)swift_slowAlloc();
    uint64_t v5 = (void *)swift_slowAlloc();
    *(_DWORD *)uint64_t v4 = 138412290;
    swift_errorRetain();
    uint64_t v6 = _swift_stdlib_bridgeErrorToNSError();
    *(void *)(v0 + 120) = v6;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *uint64_t v5 = v6;
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl((void *)&_mh_execute_header, v2, v3, "Error during removeGhostBeacons: %@", v4, 0xCu);
    sub_10000588C((uint64_t *)&unk_101638EA0);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    swift_errorRelease();
  }
  else
  {
    swift_errorRelease();
    swift_errorRelease();
    swift_errorRelease();
  }
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v7 = *(uint64_t (**)(void))(v0 + 8);
  return v7();
}

uint64_t sub_100B1C5F4()
{
  uint64_t v33 = v0;
  uint64_t v1 = *(void *)(v0 + 168);
  uint64_t v2 = *(void *)(v0 + 152);
  swift_task_dealloc();
  sub_100B30D0C(v1, v2, (uint64_t (*)(void))type metadata accessor for OwnedBeaconRecord);
  swift_errorRetain();
  swift_errorRetain();
  os_log_type_t v3 = Logger.logObject.getter();
  os_log_type_t v4 = static os_log_type_t.error.getter();
  BOOL v5 = os_log_type_enabled(v3, v4);
  uint64_t v6 = *(void *)(v0 + 152);
  if (v5)
  {
    uint64_t v7 = swift_slowAlloc();
    uint64_t v8 = (void *)swift_slowAlloc();
    uint64_t v32 = swift_slowAlloc();
    *(_DWORD *)uint64_t v7 = 141558531;
    *(void *)(v7 + 4) = 1752392040;
    *(_WORD *)(v7 + 12) = 2081;
    type metadata accessor for UUID();
    sub_100B22DA4((unint64_t *)&qword_101638B10, (void (*)(uint64_t))&type metadata accessor for UUID);
    uint64_t v9 = dispatch thunk of CustomStringConvertible.description.getter();
    *(void *)(v7 + 14) = sub_1008FA0F0(v9, v10, &v32);
    swift_bridgeObjectRelease();
    sub_100B310AC(v6, (uint64_t (*)(void))type metadata accessor for OwnedBeaconRecord);
    *(_WORD *)(v7 + 22) = 2112;
    swift_errorRetain();
    uint64_t v11 = _swift_stdlib_bridgeErrorToNSError();
    *(void *)(v7 + 24) = v11;
    *uint64_t v8 = v11;
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl((void *)&_mh_execute_header, v3, v4, "Error unpairing %{private,mask.hash}s: %@", (uint8_t *)v7, 0x20u);
    sub_10000588C((uint64_t *)&unk_101638EA0);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    swift_errorRelease();
  }
  else
  {
    swift_errorRelease();
    sub_100B310AC(v6, (uint64_t (*)(void))type metadata accessor for OwnedBeaconRecord);
    swift_errorRelease();
    swift_errorRelease();
  }
  uint64_t v12 = *(void *)(v0 + 216);
  uint64_t v13 = *(void *)(v0 + 232) + 1;
  sub_100B310AC(*(void *)(v0 + 168), (uint64_t (*)(void))type metadata accessor for OwnedBeaconRecord);
  if (v13 == v12)
  {
    swift_bridgeObjectRelease();
    swift_release();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v14 = *(uint64_t (**)(void))(v0 + 8);
    return v14();
  }
  else
  {
    uint64_t v16 = *(void *)(v0 + 224);
    uint64_t v17 = *(void *)(v0 + 232) + 1;
    *(void *)(v0 + 232) = v17;
    sub_100B30D0C(*(void *)(v0 + 200)+ ((*(unsigned __int8 *)(v0 + 272) + 32) & ~(unint64_t)*(unsigned __int8 *)(v0 + 272))+ v16 * v17, *(void *)(v0 + 168), (uint64_t (*)(void))type metadata accessor for OwnedBeaconRecord);
    if (qword_101636F50 != -1) {
      swift_once();
    }
    uint64_t v18 = *(void *)(v0 + 160);
    uint64_t v19 = *(void *)(v0 + 168);
    uint64_t v20 = type metadata accessor for Logger();
    *(void *)(v0 + 240) = sub_100010324(v20, (uint64_t)qword_10170E9E8);
    sub_100B30D0C(v19, v18, (uint64_t (*)(void))type metadata accessor for OwnedBeaconRecord);
    uint64_t v21 = Logger.logObject.getter();
    os_log_type_t v22 = static os_log_type_t.default.getter();
    BOOL v23 = os_log_type_enabled(v21, v22);
    uint64_t v24 = *(void *)(v0 + 160);
    if (v23)
    {
      uint64_t v25 = swift_slowAlloc();
      uint64_t v32 = swift_slowAlloc();
      *(_DWORD *)uint64_t v25 = 141558275;
      *(void *)(v25 + 4) = 1752392040;
      *(_WORD *)(v25 + 12) = 2081;
      type metadata accessor for UUID();
      sub_100B22DA4((unint64_t *)&qword_101638B10, (void (*)(uint64_t))&type metadata accessor for UUID);
      uint64_t v26 = dispatch thunk of CustomStringConvertible.description.getter();
      *(void *)(v25 + 14) = sub_1008FA0F0(v26, v27, &v32);
      swift_bridgeObjectRelease();
      sub_100B310AC(v24, (uint64_t (*)(void))type metadata accessor for OwnedBeaconRecord);
      _os_log_impl((void *)&_mh_execute_header, v21, v22, "Removing ghost beacon: %{private,mask.hash}s", (uint8_t *)v25, 0x16u);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      sub_100B310AC(*(void *)(v0 + 160), (uint64_t (*)(void))type metadata accessor for OwnedBeaconRecord);
    }

    uint64_t v28 = *(void *)(v0 + 168);
    uint64_t v29 = *(void *)(v0 + 128);
    uint64_t v30 = swift_task_alloc();
    *(void *)(v0 + 248) = v30;
    *(void *)(v30 + 16) = v29;
    *(void *)(v30 + 24) = v28;
    Swift::String v31 = (void *)swift_task_alloc();
    *(void *)(v0 + 256) = v31;
    *Swift::String v31 = v0;
    v31[1] = sub_100B1BEE4;
    return withCheckedThrowingContinuation<A>(isolation:function:_:)(v31, 0, 0, 0xD000000000000014, 0x8000000101413510, sub_100B53BBC, v30, (char *)&type metadata for () + 8);
  }
}

uint64_t sub_100B1CC18(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v21 = a1;
  uint64_t v5 = sub_10000588C((uint64_t *)&unk_1016565A0);
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v7 = *(void *)(v6 + 64);
  __chkstk_darwin(v5);
  uint64_t v8 = type metadata accessor for OwnedBeaconRecord();
  uint64_t v9 = *(void *)(v8 - 8);
  uint64_t v10 = *(void *)(v9 + 64);
  __chkstk_darwin(v8 - 8);
  uint64_t v11 = (char *)&v20 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = sub_10000588C(&qword_10164DBB0);
  __chkstk_darwin(v12 - 8);
  uint64_t v14 = (char *)&v20 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = type metadata accessor for TaskPriority();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v15 - 8) + 56))(v14, 1, 1, v15);
  sub_100B30D0C(a3, (uint64_t)v11, (uint64_t (*)(void))type metadata accessor for OwnedBeaconRecord);
  (*(void (**)(char *, uint64_t, uint64_t))(v6 + 16))((char *)&v20 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0), v21, v5);
  unint64_t v16 = (*(unsigned __int8 *)(v9 + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80);
  unint64_t v17 = (v10 + *(unsigned __int8 *)(v6 + 80) + v16) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80);
  uint64_t v18 = (char *)swift_allocObject();
  *((void *)v18 + 2) = 0;
  *((void *)v18 + 3) = 0;
  *((void *)v18 + 4) = a2;
  sub_100B30DB4((uint64_t)v11, (uint64_t)&v18[v16], (uint64_t (*)(void))type metadata accessor for OwnedBeaconRecord);
  (*(void (**)(char *, char *, uint64_t))(v6 + 32))(&v18[v17], (char *)&v20 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0), v5);
  swift_retain();
  sub_1008F5E44((uint64_t)v14, (uint64_t)&unk_101659250, (uint64_t)v18);
  return swift_release();
}

uint64_t sub_100B1CEC4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  void v6[4] = a5;
  v6[5] = a6;
  void v6[2] = a1;
  v6[3] = a4;
  uint64_t v7 = sub_10000588C((uint64_t *)&unk_1016565A0);
  v6[6] = v7;
  uint64_t v8 = *(void *)(v7 - 8);
  v6[7] = v8;
  v6[8] = *(void *)(v8 + 64);
  v6[9] = swift_task_alloc();
  uint64_t v9 = *(void *)(type metadata accessor for OwnedBeaconRecord() - 8);
  v6[10] = v9;
  v6[11] = *(void *)(v9 + 64);
  v6[12] = swift_task_alloc();
  return _swift_task_switch(sub_100B1CFF4, 0, 0);
}

uint64_t sub_100B1CFF4()
{
  uint64_t v2 = v0[11];
  uint64_t v1 = v0[12];
  uint64_t v3 = v0[9];
  uint64_t v4 = v0[10];
  uint64_t v5 = v0[7];
  uint64_t v7 = v0[5];
  uint64_t v6 = v0[6];
  uint64_t v8 = v0[3];
  sub_100B30D0C(v0[4], v1, (uint64_t (*)(void))type metadata accessor for OwnedBeaconRecord);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 16))(v3, v7, v6);
  unint64_t v9 = (*(unsigned __int8 *)(v4 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
  unint64_t v10 = (v2 + *(unsigned __int8 *)(v5 + 80) + v9) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
  uint64_t v11 = swift_allocObject();
  v0[13] = v11;
  *(void *)(v11 + 16) = v8;
  sub_100B30DB4(v1, v11 + v9, (uint64_t (*)(void))type metadata accessor for OwnedBeaconRecord);
  (*(void (**)(unint64_t, uint64_t, uint64_t))(v5 + 32))(v11 + v10, v3, v6);
  swift_retain();
  uint64_t v12 = (void *)swift_task_alloc();
  v0[14] = v12;
  *uint64_t v12 = v0;
  v12[1] = sub_100A0F330;
  uint64_t v13 = v0[2];
  return unsafeBlocking<A>(_:)(v13, sub_100B54570, v11, (char *)&type metadata for () + 8);
}

uint64_t sub_100B1D1A8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v59 = a3;
  uint64_t v60 = a1;
  uint64_t v61 = a2;
  uint64_t v58 = type metadata accessor for OwnedBeaconRecord();
  uint64_t v53 = *(void *)(v58 - 8);
  __chkstk_darwin(v58);
  uint64_t v54 = v3;
  uint64_t v56 = (uint64_t)&v50 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = type metadata accessor for SystemInfo.DeviceLockState();
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = __chkstk_darwin(v4);
  char v51 = (char *)&v50 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  unint64_t v9 = (char *)&v50 - v8;
  uint64_t v10 = sub_10000588C((uint64_t *)&unk_1016565A0);
  uint64_t v11 = *(void *)(v10 - 8);
  uint64_t v12 = *(void *)(v11 + 64);
  uint64_t v13 = __chkstk_darwin(v10);
  __chkstk_darwin(v13);
  uint64_t v15 = (char *)&v50 - v14;
  unint64_t v16 = *(void (**)(char *, uint64_t, uint64_t))(v11 + 16);
  v16((char *)&v50 - v14, v59, v10);
  uint64_t v55 = (char *)&v50 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16(v55, (uint64_t)v15, v10);
  unint64_t v17 = (*(unsigned __int8 *)(v11 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v11 + 80);
  uint64_t v52 = swift_allocObject();
  uint64_t v57 = v11;
  uint64_t v18 = *(void (**)(unint64_t, char *, uint64_t))(v11 + 32);
  uint64_t v59 = v10;
  v18(v52 + v17, v15, v10);
  static os_log_type_t.default.getter();
  if (qword_101637260 != -1) {
    swift_once();
  }
  sub_10000588C((uint64_t *)&unk_10163AD00);
  uint64_t v19 = swift_allocObject();
  long long v50 = xmmword_101342130;
  *(_OWORD *)(v19 + 16) = xmmword_101342130;
  uint64_t v20 = v61 + *(int *)(v58 + 20);
  uint64_t v21 = type metadata accessor for UUID();
  sub_100B22DA4((unint64_t *)&qword_101638B10, (void (*)(uint64_t))&type metadata accessor for UUID);
  uint64_t v58 = v20;
  uint64_t v22 = dispatch thunk of CustomStringConvertible.description.getter();
  uint64_t v24 = v23;
  *(void *)(v19 + 56) = &type metadata for String;
  *(void *)(v19 + 64) = sub_10000B4CC();
  *(void *)(v19 + 32) = v22;
  *(void *)(v19 + 40) = v24;
  os_log(_:dso:log:_:_:)();
  swift_bridgeObjectRelease();
  static SystemInfo.lockState.getter();
  uint64_t v25 = v51;
  (*(void (**)(char *, void, uint64_t))(v5 + 104))(v51, enum case for SystemInfo.DeviceLockState.beforeFirstUnlock(_:), v4);
  sub_100B22DA4((unint64_t *)&unk_101655610, (void (*)(uint64_t))&type metadata accessor for SystemInfo.DeviceLockState);
  dispatch thunk of RawRepresentable.rawValue.getter();
  dispatch thunk of RawRepresentable.rawValue.getter();
  uint64_t v27 = v62;
  uint64_t v26 = v63;
  uint64_t v28 = *(void (**)(char *, uint64_t))(v5 + 8);
  v28(v25, v4);
  v28(v9, v4);
  uint64_t v29 = v59;
  uint64_t v30 = v55;
  if (v26 == v27)
  {
    static os_log_type_t.default.getter();
    os_log(_:dso:log:_:_:)();
    sub_10009FD9C();
    uint64_t v31 = swift_allocError();
    *uint64_t v32 = 0;
    uint64_t v63 = v31;
    CheckedContinuation.resume(throwing:)();
  }
  uint64_t v33 = dispatch_group_create();
  dispatch_group_enter(v33);
  sub_10000588C(&qword_10163BC50);
  uint64_t v34 = *(void *)(v21 - 8);
  unint64_t v35 = (*(unsigned __int8 *)(v34 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v34 + 80);
  uint64_t v36 = swift_allocObject();
  *(_OWORD *)(v36 + 16) = v50;
  (*(void (**)(unint64_t, uint64_t, uint64_t))(v34 + 16))(v36 + v35, v58, v21);
  uint64_t v37 = swift_allocObject();
  *(void *)(v37 + 16) = v33;
  unint64_t v38 = v33;
  uint64_t v39 = v60;
  sub_100A07010(v36, (uint64_t)sub_1003A951C, v37);
  swift_bridgeObjectRelease();
  swift_release();
  OS_dispatch_group.wait()();
  uint64_t v40 = v61;
  uint64_t v41 = v56;
  sub_100B30D0C(v61, v56, (uint64_t (*)(void))type metadata accessor for OwnedBeaconRecord);
  unint64_t v42 = (*(unsigned __int8 *)(v53 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v53 + 80);
  unint64_t v43 = (v54 + v42 + 7) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v44 = (v43 + 23) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v45 = swift_allocObject();
  sub_100B30DB4(v41, v45 + v42, (uint64_t (*)(void))type metadata accessor for OwnedBeaconRecord);
  unint64_t v46 = (uint64_t (**)(uint64_t))(v45 + v43);
  uint64_t v47 = v52;
  *unint64_t v46 = sub_100B54658;
  v46[1] = (uint64_t (*)(uint64_t))v47;
  unint64_t v48 = v45 + v44;
  *(void *)unint64_t v48 = v39;
  *(_WORD *)(v48 + 8) = 257;
  swift_retain();
  swift_retain();
  sub_10038F420(v40, (void (*)(void))sub_1003A952C, v45);
  swift_release();
  swift_release();

  return (*(uint64_t (**)(char *, uint64_t))(v57 + 8))(v30, v29);
}

void sub_100B1D89C(uint64_t a1, NSObject *a2, uint64_t a3)
{
  uint64_t v53 = a3;
  dispatch_group_t v55 = a2;
  uint64_t v4 = sub_10000588C((uint64_t *)&unk_101660670);
  __chkstk_darwin(v4 - 8);
  uint64_t v52 = &v46[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v54 = type metadata accessor for UUID();
  uint64_t v6 = *(void *)(v54 - 8);
  uint64_t v7 = __chkstk_darwin(v54);
  unint64_t v9 = &v46[-((v8 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __chkstk_darwin(v7);
  uint64_t v11 = &v46[-v10];
  uint64_t v12 = type metadata accessor for OwnedDeviceKeyRecord();
  uint64_t v50 = *(void *)(v12 - 8);
  uint64_t v51 = v12;
  uint64_t v13 = __chkstk_darwin(v12);
  uint64_t v15 = &v46[-((v14 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __chkstk_darwin(v13);
  unint64_t v17 = &v46[-v16];
  uint64_t v18 = sub_10000588C(&qword_1016592B0);
  __chkstk_darwin(v18);
  uint64_t v20 = (uint64_t *)&v46[-((v19 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v21 = swift_projectBox();
  sub_10001D074(a1, (uint64_t)v20, &qword_1016592B0);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v22 = *v20;
    if (qword_101637660 != -1) {
      swift_once();
    }
    uint64_t v23 = type metadata accessor for Logger();
    sub_100010324(v23, (uint64_t)qword_10170F838);
    uint64_t v24 = v54;
    (*(void (**)(unsigned char *, uint64_t, uint64_t))(v6 + 16))(v9, v53, v54);
    swift_errorRetain();
    swift_errorRetain();
    uint64_t v25 = Logger.logObject.getter();
    os_log_type_t v26 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v25, v26))
    {
      uint64_t v27 = swift_slowAlloc();
      uint64_t v53 = swift_slowAlloc();
      v56[0] = v53;
      *(_DWORD *)uint64_t v27 = 141558531;
      uint64_t v57 = 1752392040;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v27 + 12) = 2081;
      sub_100B22DA4((unint64_t *)&qword_101638B10, (void (*)(uint64_t))&type metadata accessor for UUID);
      uint64_t v28 = dispatch thunk of CustomStringConvertible.description.getter();
      uint64_t v57 = sub_1008FA0F0(v28, v29, v56);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      (*(void (**)(unsigned char *, uint64_t))(v6 + 8))(v9, v24);
      *(_WORD *)(v27 + 22) = 2080;
      uint64_t v57 = v22;
      swift_errorRetain();
      sub_10000588C(&qword_101638D40);
      uint64_t v30 = String.init<A>(describing:)();
      uint64_t v57 = sub_1008FA0F0(v30, v31, v56);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      swift_errorRelease();
      swift_errorRelease();
      _os_log_impl((void *)&_mh_execute_header, v25, v26, "Unable to save new OwnedDeviceKeyRecord for %{private,mask.hash}s, error %s.", (uint8_t *)v27, 0x20u);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      swift_errorRelease();
    }
    else
    {
      swift_errorRelease();
      (*(void (**)(unsigned char *, uint64_t))(v6 + 8))(v9, v24);
      swift_errorRelease();
      swift_errorRelease();
    }
  }
  else
  {
    sub_100B30DB4((uint64_t)v20, (uint64_t)v17, (uint64_t (*)(void))type metadata accessor for OwnedDeviceKeyRecord);
    if (qword_101637660 != -1) {
      swift_once();
    }
    uint64_t v32 = type metadata accessor for Logger();
    sub_100010324(v32, (uint64_t)qword_10170F838);
    uint64_t v33 = v54;
    (*(void (**)(unsigned char *, uint64_t, uint64_t))(v6 + 16))(v11, v53, v54);
    sub_100B30D0C((uint64_t)v17, (uint64_t)v15, (uint64_t (*)(void))type metadata accessor for OwnedDeviceKeyRecord);
    uint64_t v34 = Logger.logObject.getter();
    os_log_type_t v35 = static os_log_type_t.default.getter();
    int v36 = v35;
    if (os_log_type_enabled(v34, v35))
    {
      uint64_t v37 = swift_slowAlloc();
      unint64_t v49 = v17;
      uint64_t v38 = v37;
      uint64_t v48 = swift_slowAlloc();
      v56[0] = v48;
      *(_DWORD *)uint64_t v38 = 141558787;
      uint64_t v57 = 1752392040;
      uint64_t v53 = v21;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v38 + 12) = 2081;
      sub_100B22DA4((unint64_t *)&qword_101638B10, (void (*)(uint64_t))&type metadata accessor for UUID);
      int v47 = v36;
      uint64_t v39 = dispatch thunk of CustomStringConvertible.description.getter();
      uint64_t v57 = sub_1008FA0F0(v39, v40, v56);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      (*(void (**)(unsigned char *, uint64_t))(v6 + 8))(v11, v33);
      *(_WORD *)(v38 + 22) = 2160;
      uint64_t v57 = 1752392040;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v38 + 32) = 2081;
      uint64_t v41 = v51;
      uint64_t v42 = dispatch thunk of CustomStringConvertible.description.getter();
      uint64_t v57 = sub_1008FA0F0(v42, v43, v56);
      uint64_t v21 = v53;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      sub_100B310AC((uint64_t)v15, (uint64_t (*)(void))type metadata accessor for OwnedDeviceKeyRecord);
      _os_log_impl((void *)&_mh_execute_header, v34, (os_log_type_t)v47, "Successfully saved new OwnedDeviceKeyRecord for: %{private,mask.hash}s uuid: %{private,mask.hash}s.", (uint8_t *)v38, 0x2Au);
      swift_arrayDestroy();
      swift_slowDealloc();
      unint64_t v17 = v49;
      swift_slowDealloc();
    }
    else
    {
      (*(void (**)(unsigned char *, uint64_t))(v6 + 8))(v11, v33);
      sub_100B310AC((uint64_t)v15, (uint64_t (*)(void))type metadata accessor for OwnedDeviceKeyRecord);

      uint64_t v41 = v51;
    }
    uint64_t v44 = (uint64_t)v17;
    uint64_t v45 = v52;
    sub_100B30DB4(v44, (uint64_t)v52, (uint64_t (*)(void))type metadata accessor for OwnedDeviceKeyRecord);
    (*(void (**)(unsigned char *, void, uint64_t, uint64_t))(v50 + 56))(v45, 0, 1, v41);
    swift_beginAccess();
    sub_100062604((uint64_t)v45, v21, (uint64_t *)&unk_101660670);
  }
  dispatch_group_leave(v55);
}

void *sub_100B1E108()
{
  uint64_t v0 = sub_10000588C(&qword_101638CF0);
  __chkstk_darwin(v0 - 8);
  BOOL v73 = (char *)&v61 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v74 = type metadata accessor for UUID();
  uint64_t v79 = *(void **)(v74 - 8);
  uint64_t v2 = __chkstk_darwin(v74);
  uint64_t v72 = (char *)&v61 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v2);
  uint64_t v85 = (char *)&v61 - v4;
  uint64_t v5 = sub_10000588C(&qword_101649E40);
  uint64_t v6 = __chkstk_darwin(v5 - 8);
  unint64_t v68 = (char *)&v61 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  unint64_t v9 = (char *)&v61 - v8;
  uint64_t v10 = type metadata accessor for URL();
  uint64_t v11 = *(void *)(v10 - 8);
  uint64_t v12 = __chkstk_darwin(v10);
  uint64_t v14 = (char *)&v61 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v12);
  uint64_t v84 = (char *)&v61 - v15;
  uint64_t v76 = type metadata accessor for DirectorySequence();
  uint64_t v16 = *(void *)(v76 - 8);
  uint64_t v17 = __chkstk_darwin(v76);
  uint64_t v70 = (char *)&v61 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v17);
  uint64_t v20 = (char *)&v61 - v19;
  uint64_t v83 = sub_10000588C((uint64_t *)&unk_10163AD00);
  uint64_t v21 = swift_allocObject();
  *(_OWORD *)(v21 + 16) = xmmword_101342130;
  uint64_t v82 = sub_100B22DA4((unint64_t *)&qword_1016605A0, (void (*)(uint64_t))&type metadata accessor for URL);
  uint64_t v22 = dispatch thunk of CustomStringConvertible.description.getter();
  uint64_t v24 = v23;
  *(void *)(v21 + 56) = &type metadata for String;
  unint64_t v81 = sub_10000B4CC();
  *(void *)(v21 + 64) = v81;
  *(void *)(v21 + 32) = v22;
  *(void *)(v21 + 40) = v24;
  uint64_t v80 = sub_10001D4B0(0, (unint64_t *)&qword_10163AE70);
  uint64_t v25 = (void *)static OS_os_log.default.getter();
  static os_log_type_t.default.getter();
  os_log(_:dso:log:type:_:)();
  swift_bridgeObjectRelease();

  id v69 = self;
  id v26 = [v69 defaultManager];
  NSFileManager.flatSequence(at:includingPropertiesForKeys:)();

  uint64_t v75 = v20;
  DirectorySequence.next()();
  uint64_t v27 = v11;
  uint64_t v28 = v11 + 48;
  unint64_t v29 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v11 + 48);
  uint64_t v78 = v28;
  if (v29(v9, 1, v10) == 1)
  {
    uint64_t v30 = _swiftEmptyDictionarySingleton;
    (*(void (**)(char *, uint64_t))(v16 + 8))(v75, v76);
LABEL_12:
    sub_10001DAB4((uint64_t)v9, &qword_101649E40);
  }
  else
  {
    uint64_t v31 = (uint64_t)v14;
    uint64_t v32 = *(void (**)(uint64_t, char *, uint64_t))(v27 + 32);
    uint64_t v67 = (unsigned int (**)(uint64_t, uint64_t, uint64_t))(v79 + 6);
    char v65 = (void (**)(char *, uint64_t, uint64_t))(v79 + 4);
    uint64_t v33 = v16;
    uint64_t v87 = v27 + 32;
    uint64_t v34 = (void (**)(uint64_t, uint64_t))(v27 + 8);
    unint64_t v71 = (void (**)(char *, uint64_t))(v33 + 8);
    uint64_t v64 = (void (**)(char *, char *, uint64_t))(v79 + 2);
    uint64_t v63 = (void (**)(uint64_t, uint64_t))(v79 + 1);
    uint64_t v79 = _swiftEmptyDictionarySingleton;
    long long v77 = xmmword_101347BA0;
    uint64_t v35 = v74;
    uint64_t v66 = v9;
    int v36 = v84;
    id v88 = v29;
    uint64_t v86 = v32;
    v32((uint64_t)v84, v9, v10);
    while (1)
    {
      URL.lastPathComponent.getter();
      uint64_t v54 = (uint64_t)v73;
      UUID.init(uuidString:)();
      swift_bridgeObjectRelease();
      if ((*v67)(v54, 1, v35) == 1) {
        break;
      }
      (*v65)(v85, v54, v35);
      uint64_t v89 = _swiftEmptyArrayStorage;
      id v90 = _swiftEmptyArrayStorage;
      id v55 = [v69 defaultManager];
      uint64_t v56 = v70;
      NSFileManager.deepSequence(at:includingPropertiesForKeys:options:)();

      uint64_t v57 = v68;
      DirectorySequence.next()();
      if (v88(v57, 1, v10) != 1)
      {
        uint64_t v58 = v61;
        do
        {
          v86(v31, v57, v10);
          sub_100B216FC(v31, v58, (uint64_t *)&v90, (unint64_t *)&v89, &qword_101660BB0, (uint64_t (*)(void))type metadata accessor for NotifyWhenFoundRecord, &qword_101659368, (uint64_t)sub_100B5CD8C, (uint64_t (*)(void))type metadata accessor for NotifyWhenFoundRecord, (uint64_t (*)(void))type metadata accessor for NotifyWhenFoundRecord, (uint64_t (*)(BOOL, uint64_t, uint64_t, uint64_t))sub_100A7148C, type metadata accessor for NotifyWhenFoundRecord);
          (*v34)(v31, v10);
          DirectorySequence.next()();
        }
        while (v88(v57, 1, v10) != 1);
      }
      uint64_t v62 = *v71;
      v62(v56, v76);
      static os_log_type_t.debug.getter();
      uint64_t v37 = (void *)static OS_os_log.default.getter();
      uint64_t v38 = swift_allocObject();
      *(_OWORD *)(v38 + 16) = v77;
      uint64_t v39 = (uint64_t)v90;
      uint64_t v40 = v90[2];
      *(void *)(v38 + 56) = &type metadata for Int;
      *(void *)(v38 + 64) = &protocol witness table for Int;
      *(void *)(v38 + 32) = v40;
      uint64_t v41 = dispatch thunk of CustomStringConvertible.description.getter();
      unint64_t v42 = v81;
      *(void *)(v38 + 96) = &type metadata for String;
      *(void *)(v38 + 104) = v42;
      *(void *)(v38 + 72) = v41;
      *(void *)(v38 + 80) = v43;
      os_log(_:dso:log:_:_:)();

      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      uint64_t v44 = (uint64_t)v72;
      uint64_t v35 = v74;
      (*v64)(v72, v85, v74);
      swift_bridgeObjectRetain();
      uint64_t v45 = v79;
      char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      id v90 = v45;
      sub_10017020C(v39, v44, isUniquelyReferenced_nonNull_native);
      uint64_t v79 = v90;
      swift_bridgeObjectRelease();
      int v47 = *v63;
      (*v63)(v44, v35);
      uint64_t v48 = swift_allocObject();
      *(_OWORD *)(v48 + 16) = v77;
      uint64_t v49 = *(void *)(v39 + 16);
      swift_bridgeObjectRelease();
      *(void *)(v48 + 56) = &type metadata for Int;
      *(void *)(v48 + 64) = &protocol witness table for Int;
      *(void *)(v48 + 32) = v49;
      int v36 = v84;
      uint64_t v50 = dispatch thunk of CustomStringConvertible.description.getter();
      unint64_t v51 = v81;
      *(void *)(v48 + 96) = &type metadata for String;
      *(void *)(v48 + 104) = v51;
      *(void *)(v48 + 72) = v50;
      *(void *)(v48 + 80) = v52;
      uint64_t v53 = (void *)static OS_os_log.default.getter();
      static os_log_type_t.default.getter();
      os_log(_:dso:log:type:_:)();
      swift_bridgeObjectRelease();

      v47((uint64_t)v85, v35);
      (*v34)((uint64_t)v36, v10);
      unint64_t v9 = v66;
      DirectorySequence.next()();
      if (v88(v9, 1, v10) == 1)
      {
        uint64_t v30 = v79;
        v62(v75, v76);
        goto LABEL_12;
      }
      v86((uint64_t)v36, v9, v10);
    }
    (*v34)((uint64_t)v36, v10);
    (*v71)(v75, v76);
    sub_10001DAB4(v54, &qword_101638CF0);
    return v79;
  }
  return v30;
}

char *sub_100B1EB4C()
{
  uint64_t v0 = sub_10000588C(&qword_101638CF0);
  __chkstk_darwin(v0 - 8);
  BOOL v73 = (char *)&v61 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v74 = type metadata accessor for UUID();
  uint64_t v79 = *(char **)(v74 - 8);
  uint64_t v2 = __chkstk_darwin(v74);
  uint64_t v72 = (char *)&v61 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v2);
  uint64_t v85 = (char *)&v61 - v4;
  uint64_t v5 = sub_10000588C(&qword_101649E40);
  uint64_t v6 = __chkstk_darwin(v5 - 8);
  unint64_t v68 = (char *)&v61 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  unint64_t v9 = (char *)&v61 - v8;
  uint64_t v10 = type metadata accessor for URL();
  uint64_t v11 = *(void *)(v10 - 8);
  uint64_t v12 = __chkstk_darwin(v10);
  uint64_t v14 = (char *)&v61 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v12);
  uint64_t v84 = (char *)&v61 - v15;
  uint64_t v76 = type metadata accessor for DirectorySequence();
  uint64_t v16 = *(void *)(v76 - 8);
  uint64_t v17 = __chkstk_darwin(v76);
  uint64_t v70 = (char *)&v61 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v17);
  uint64_t v20 = (char *)&v61 - v19;
  uint64_t v83 = sub_10000588C((uint64_t *)&unk_10163AD00);
  uint64_t v21 = swift_allocObject();
  *(_OWORD *)(v21 + 16) = xmmword_101342130;
  uint64_t v82 = sub_100B22DA4((unint64_t *)&qword_1016605A0, (void (*)(uint64_t))&type metadata accessor for URL);
  uint64_t v22 = dispatch thunk of CustomStringConvertible.description.getter();
  uint64_t v24 = v23;
  *(void *)(v21 + 56) = &type metadata for String;
  unint64_t v81 = sub_10000B4CC();
  *(void *)(v21 + 64) = v81;
  *(void *)(v21 + 32) = v22;
  *(void *)(v21 + 40) = v24;
  uint64_t v80 = sub_10001D4B0(0, (unint64_t *)&qword_10163AE70);
  uint64_t v25 = (void *)static OS_os_log.default.getter();
  static os_log_type_t.default.getter();
  os_log(_:dso:log:type:_:)();
  swift_bridgeObjectRelease();

  id v69 = self;
  id v26 = [v69 defaultManager];
  NSFileManager.flatSequence(at:includingPropertiesForKeys:)();

  uint64_t v75 = v20;
  DirectorySequence.next()();
  uint64_t v27 = v11;
  uint64_t v28 = v11 + 48;
  unint64_t v29 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v11 + 48);
  uint64_t v78 = v28;
  if (v29(v9, 1, v10) == 1)
  {
    uint64_t v30 = &_swiftEmptyDictionarySingleton;
    (*(void (**)(char *, uint64_t))(v16 + 8))(v75, v76);
LABEL_12:
    sub_10001DAB4((uint64_t)v9, &qword_101649E40);
  }
  else
  {
    uint64_t v31 = (uint64_t)v14;
    uint64_t v32 = *(void (**)(uint64_t, char *, uint64_t))(v27 + 32);
    uint64_t v67 = (unsigned int (**)(uint64_t, uint64_t, uint64_t))(v79 + 48);
    char v65 = (void (**)(char *, uint64_t, uint64_t))(v79 + 32);
    uint64_t v33 = v16;
    uint64_t v87 = v27 + 32;
    uint64_t v34 = (void (**)(uint64_t, uint64_t))(v27 + 8);
    unint64_t v71 = (void (**)(char *, uint64_t))(v33 + 8);
    uint64_t v64 = (void (**)(char *, char *, uint64_t))(v79 + 16);
    uint64_t v63 = (void (**)(uint64_t, uint64_t))(v79 + 8);
    uint64_t v79 = (char *)&_swiftEmptyDictionarySingleton;
    long long v77 = xmmword_101347BA0;
    uint64_t v35 = v74;
    uint64_t v66 = v9;
    int v36 = v84;
    id v88 = v29;
    uint64_t v86 = v32;
    v32((uint64_t)v84, v9, v10);
    while (1)
    {
      URL.lastPathComponent.getter();
      uint64_t v54 = (uint64_t)v73;
      UUID.init(uuidString:)();
      swift_bridgeObjectRelease();
      if ((*v67)(v54, 1, v35) == 1) {
        break;
      }
      (*v65)(v85, v54, v35);
      uint64_t v89 = _swiftEmptyArrayStorage;
      id v90 = (char *)_swiftEmptyArrayStorage;
      id v55 = [v69 defaultManager];
      uint64_t v56 = v70;
      NSFileManager.deepSequence(at:includingPropertiesForKeys:options:)();

      uint64_t v57 = v68;
      DirectorySequence.next()();
      if (v88(v57, 1, v10) != 1)
      {
        uint64_t v58 = v61;
        do
        {
          v86(v31, v57, v10);
          sub_100B216FC(v31, v58, (uint64_t *)&v90, (unint64_t *)&v89, (uint64_t *)&unk_101638D50, (uint64_t (*)(void))type metadata accessor for BeaconEstimatedLocation, &qword_101659200, (uint64_t)sub_100B530FC, (uint64_t (*)(void))type metadata accessor for BeaconEstimatedLocation, (uint64_t (*)(void))type metadata accessor for BeaconEstimatedLocation, (uint64_t (*)(BOOL, uint64_t, uint64_t, uint64_t))sub_100A70884, type metadata accessor for BeaconEstimatedLocation);
          (*v34)(v31, v10);
          DirectorySequence.next()();
        }
        while (v88(v57, 1, v10) != 1);
      }
      uint64_t v62 = *v71;
      v62(v56, v76);
      static os_log_type_t.debug.getter();
      uint64_t v37 = (void *)static OS_os_log.default.getter();
      uint64_t v38 = swift_allocObject();
      *(_OWORD *)(v38 + 16) = v77;
      uint64_t v39 = (uint64_t)v90;
      uint64_t v40 = *((void *)v90 + 2);
      *(void *)(v38 + 56) = &type metadata for Int;
      *(void *)(v38 + 64) = &protocol witness table for Int;
      *(void *)(v38 + 32) = v40;
      uint64_t v41 = dispatch thunk of CustomStringConvertible.description.getter();
      unint64_t v42 = v81;
      *(void *)(v38 + 96) = &type metadata for String;
      *(void *)(v38 + 104) = v42;
      *(void *)(v38 + 72) = v41;
      *(void *)(v38 + 80) = v43;
      os_log(_:dso:log:_:_:)();

      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      uint64_t v44 = (uint64_t)v72;
      uint64_t v35 = v74;
      (*v64)(v72, v85, v74);
      swift_bridgeObjectRetain();
      uint64_t v45 = v79;
      char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      id v90 = v45;
      sub_10016E518(v39, v44, isUniquelyReferenced_nonNull_native);
      uint64_t v79 = v90;
      swift_bridgeObjectRelease();
      int v47 = *v63;
      (*v63)(v44, v35);
      uint64_t v48 = swift_allocObject();
      *(_OWORD *)(v48 + 16) = v77;
      uint64_t v49 = *(void *)(v39 + 16);
      swift_bridgeObjectRelease();
      *(void *)(v48 + 56) = &type metadata for Int;
      *(void *)(v48 + 64) = &protocol witness table for Int;
      *(void *)(v48 + 32) = v49;
      int v36 = v84;
      uint64_t v50 = dispatch thunk of CustomStringConvertible.description.getter();
      unint64_t v51 = v81;
      *(void *)(v48 + 96) = &type metadata for String;
      *(void *)(v48 + 104) = v51;
      *(void *)(v48 + 72) = v50;
      *(void *)(v48 + 80) = v52;
      uint64_t v53 = (void *)static OS_os_log.default.getter();
      static os_log_type_t.default.getter();
      os_log(_:dso:log:type:_:)();
      swift_bridgeObjectRelease();

      v47((uint64_t)v85, v35);
      (*v34)((uint64_t)v36, v10);
      unint64_t v9 = v66;
      DirectorySequence.next()();
      if (v88(v9, 1, v10) == 1)
      {
        uint64_t v30 = v79;
        v62(v75, v76);
        goto LABEL_12;
      }
      v86((uint64_t)v36, v9, v10);
    }
    (*v34)((uint64_t)v36, v10);
    (*v71)(v75, v76);
    sub_10001DAB4(v54, &qword_101638CF0);
    return v79;
  }
  return (char *)v30;
}

void *sub_100B1F590()
{
  uint64_t v0 = sub_10000588C(&qword_101638CF0);
  __chkstk_darwin(v0 - 8);
  BOOL v73 = (char *)&v61 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v74 = type metadata accessor for UUID();
  uint64_t v79 = *(void **)(v74 - 8);
  uint64_t v2 = __chkstk_darwin(v74);
  uint64_t v72 = (char *)&v61 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v2);
  uint64_t v85 = (char *)&v61 - v4;
  uint64_t v5 = sub_10000588C(&qword_101649E40);
  uint64_t v6 = __chkstk_darwin(v5 - 8);
  unint64_t v68 = (char *)&v61 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  unint64_t v9 = (char *)&v61 - v8;
  uint64_t v10 = type metadata accessor for URL();
  uint64_t v11 = *(void *)(v10 - 8);
  uint64_t v12 = __chkstk_darwin(v10);
  uint64_t v14 = (char *)&v61 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v12);
  uint64_t v84 = (char *)&v61 - v15;
  uint64_t v76 = type metadata accessor for DirectorySequence();
  uint64_t v16 = *(void *)(v76 - 8);
  uint64_t v17 = __chkstk_darwin(v76);
  uint64_t v70 = (char *)&v61 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v17);
  uint64_t v20 = (char *)&v61 - v19;
  uint64_t v83 = sub_10000588C((uint64_t *)&unk_10163AD00);
  uint64_t v21 = swift_allocObject();
  *(_OWORD *)(v21 + 16) = xmmword_101342130;
  uint64_t v82 = sub_100B22DA4((unint64_t *)&qword_1016605A0, (void (*)(uint64_t))&type metadata accessor for URL);
  uint64_t v22 = dispatch thunk of CustomStringConvertible.description.getter();
  uint64_t v24 = v23;
  *(void *)(v21 + 56) = &type metadata for String;
  unint64_t v81 = sub_10000B4CC();
  *(void *)(v21 + 64) = v81;
  *(void *)(v21 + 32) = v22;
  *(void *)(v21 + 40) = v24;
  uint64_t v80 = sub_10001D4B0(0, (unint64_t *)&qword_10163AE70);
  uint64_t v25 = (void *)static OS_os_log.default.getter();
  static os_log_type_t.default.getter();
  os_log(_:dso:log:type:_:)();
  swift_bridgeObjectRelease();

  id v69 = self;
  id v26 = [v69 defaultManager];
  NSFileManager.flatSequence(at:includingPropertiesForKeys:)();

  uint64_t v75 = v20;
  DirectorySequence.next()();
  uint64_t v27 = v11;
  uint64_t v28 = v11 + 48;
  unint64_t v29 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v11 + 48);
  uint64_t v78 = v28;
  if (v29(v9, 1, v10) == 1)
  {
    uint64_t v30 = _swiftEmptyDictionarySingleton;
    (*(void (**)(char *, uint64_t))(v16 + 8))(v75, v76);
LABEL_12:
    sub_10001DAB4((uint64_t)v9, &qword_101649E40);
  }
  else
  {
    uint64_t v31 = (uint64_t)v14;
    uint64_t v32 = *(void (**)(uint64_t, char *, uint64_t))(v27 + 32);
    uint64_t v67 = (unsigned int (**)(uint64_t, uint64_t, uint64_t))(v79 + 6);
    char v65 = (void (**)(char *, uint64_t, uint64_t))(v79 + 4);
    uint64_t v33 = v16;
    uint64_t v87 = v27 + 32;
    uint64_t v34 = (void (**)(uint64_t, uint64_t))(v27 + 8);
    unint64_t v71 = (void (**)(char *, uint64_t))(v33 + 8);
    uint64_t v64 = (void (**)(char *, char *, uint64_t))(v79 + 2);
    uint64_t v63 = (void (**)(uint64_t, uint64_t))(v79 + 1);
    uint64_t v79 = _swiftEmptyDictionarySingleton;
    long long v77 = xmmword_101347BA0;
    uint64_t v35 = v74;
    uint64_t v66 = v9;
    int v36 = v84;
    id v88 = v29;
    uint64_t v86 = v32;
    v32((uint64_t)v84, v9, v10);
    while (1)
    {
      URL.lastPathComponent.getter();
      uint64_t v54 = (uint64_t)v73;
      UUID.init(uuidString:)();
      swift_bridgeObjectRelease();
      if ((*v67)(v54, 1, v35) == 1) {
        break;
      }
      (*v65)(v85, v54, v35);
      uint64_t v89 = _swiftEmptyArrayStorage;
      id v90 = _swiftEmptyArrayStorage;
      id v55 = [v69 defaultManager];
      uint64_t v56 = v70;
      NSFileManager.deepSequence(at:includingPropertiesForKeys:options:)();

      uint64_t v57 = v68;
      DirectorySequence.next()();
      if (v88(v57, 1, v10) != 1)
      {
        uint64_t v58 = v61;
        do
        {
          v86(v31, v57, v10);
          sub_100B216FC(v31, v58, (uint64_t *)&v90, (unint64_t *)&v89, &qword_1016426B0, (uint64_t (*)(void))type metadata accessor for LocationProvider, &qword_101659360, (uint64_t)sub_100B5B370, (uint64_t (*)(void))type metadata accessor for LocationProvider, (uint64_t (*)(void))type metadata accessor for LocationProvider, (uint64_t (*)(BOOL, uint64_t, uint64_t, uint64_t))sub_100A70148, type metadata accessor for LocationProvider);
          (*v34)(v31, v10);
          DirectorySequence.next()();
        }
        while (v88(v57, 1, v10) != 1);
      }
      uint64_t v62 = *v71;
      v62(v56, v76);
      static os_log_type_t.debug.getter();
      uint64_t v37 = (void *)static OS_os_log.default.getter();
      uint64_t v38 = swift_allocObject();
      *(_OWORD *)(v38 + 16) = v77;
      uint64_t v39 = (uint64_t)v90;
      uint64_t v40 = v90[2];
      *(void *)(v38 + 56) = &type metadata for Int;
      *(void *)(v38 + 64) = &protocol witness table for Int;
      *(void *)(v38 + 32) = v40;
      uint64_t v41 = dispatch thunk of CustomStringConvertible.description.getter();
      unint64_t v42 = v81;
      *(void *)(v38 + 96) = &type metadata for String;
      *(void *)(v38 + 104) = v42;
      *(void *)(v38 + 72) = v41;
      *(void *)(v38 + 80) = v43;
      os_log(_:dso:log:_:_:)();

      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      uint64_t v44 = (uint64_t)v72;
      uint64_t v35 = v74;
      (*v64)(v72, v85, v74);
      swift_bridgeObjectRetain();
      uint64_t v45 = v79;
      char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      id v90 = v45;
      sub_100171090(v39, v44, isUniquelyReferenced_nonNull_native);
      uint64_t v79 = v90;
      swift_bridgeObjectRelease();
      int v47 = *v63;
      (*v63)(v44, v35);
      uint64_t v48 = swift_allocObject();
      *(_OWORD *)(v48 + 16) = v77;
      uint64_t v49 = *(void *)(v39 + 16);
      swift_bridgeObjectRelease();
      *(void *)(v48 + 56) = &type metadata for Int;
      *(void *)(v48 + 64) = &protocol witness table for Int;
      *(void *)(v48 + 32) = v49;
      int v36 = v84;
      uint64_t v50 = dispatch thunk of CustomStringConvertible.description.getter();
      unint64_t v51 = v81;
      *(void *)(v48 + 96) = &type metadata for String;
      *(void *)(v48 + 104) = v51;
      *(void *)(v48 + 72) = v50;
      *(void *)(v48 + 80) = v52;
      uint64_t v53 = (void *)static OS_os_log.default.getter();
      static os_log_type_t.default.getter();
      os_log(_:dso:log:type:_:)();
      swift_bridgeObjectRelease();

      v47((uint64_t)v85, v35);
      (*v34)((uint64_t)v36, v10);
      unint64_t v9 = v66;
      DirectorySequence.next()();
      if (v88(v9, 1, v10) == 1)
      {
        uint64_t v30 = v79;
        v62(v75, v76);
        goto LABEL_12;
      }
      v86((uint64_t)v36, v9, v10);
    }
    (*v34)((uint64_t)v36, v10);
    (*v71)(v75, v76);
    sub_10001DAB4(v54, &qword_101638CF0);
    return v79;
  }
  return v30;
}

void sub_100B1FFD4(uint64_t a1, uint64_t a2, uint64_t *a3, unint64_t *a4)
{
}

void sub_100B2007C(uint64_t a1, uint64_t a2, uint64_t *a3, unint64_t *a4)
{
}

void sub_100B20124(uint64_t a1, uint64_t a2, uint64_t *a3, unint64_t *a4)
{
}

void sub_100B201CC(uint64_t a1, uint64_t a2, uint64_t *a3, unint64_t *a4)
{
}

void sub_100B20274(uint64_t a1, uint64_t a2, uint64_t *a3, unint64_t *a4)
{
}

void sub_100B2031C(uint64_t a1, uint64_t a2, uint64_t *a3, unint64_t *a4)
{
}

void sub_100B203C4(uint64_t a1, uint64_t a2, uint64_t *a3, unint64_t *a4)
{
}

void sub_100B2046C(uint64_t a1, uint64_t a2, uint64_t *a3, unint64_t *a4)
{
}

void sub_100B20514(uint64_t a1, uint64_t a2, uint64_t *a3, unint64_t *a4)
{
}

void sub_100B205BC(uint64_t a1, uint64_t a2, uint64_t *a3, unint64_t *a4)
{
}

void sub_100B20664(uint64_t a1, uint64_t a2, uint64_t *a3, unint64_t *a4)
{
}

void sub_100B2070C(uint64_t a1, uint64_t a2, uint64_t *a3, unint64_t *a4)
{
}

void sub_100B207B4(uint64_t a1, uint64_t a2, void *a3, unint64_t *a4)
{
  uint64_t v97 = a4;
  uint64_t v98 = a3;
  uint64_t v7 = sub_10000588C(&qword_101649E40);
  __chkstk_darwin(v7 - 8);
  unint64_t v9 = (char *)&v87 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v93 = type metadata accessor for BeaconStoreFileRecord();
  uint64_t v96 = *(void *)(v93 - 8);
  uint64_t v10 = __chkstk_darwin(v93);
  uint64_t v94 = (uint64_t)&v87 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v10);
  uint64_t v95 = (char *)&v87 - v12;
  uint64_t v13 = sub_10000588C(&qword_101638CF0);
  __chkstk_darwin(v13 - 8);
  uint64_t v15 = (char *)&v87 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = type metadata accessor for UUID();
  uint64_t v102 = *(void *)(v16 - 8);
  __chkstk_darwin(v16);
  unint64_t v101 = (char *)&v87 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v18 = type metadata accessor for URL();
  uint64_t v100 = *(void *)(v18 - 8);
  uint64_t v19 = __chkstk_darwin(v18);
  uint64_t v92 = (char *)&v87 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v21 = __chkstk_darwin(v19);
  uint64_t v99 = (char *)&v87 - v22;
  __chkstk_darwin(v21);
  uint64_t v24 = (char *)&v87 - v23;
  uint64_t v104 = a1;
  if (URL.pathExtension.getter() == 0x64726F636572 && v25 == 0xE600000000000000)
  {
    swift_bridgeObjectRelease();
  }
  else
  {
    char v26 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if ((v26 & 1) == 0)
    {
      static os_log_type_t.info.getter();
      sub_10000588C((uint64_t *)&unk_10163AD00);
      uint64_t v59 = swift_allocObject();
      *(_OWORD *)(v59 + 16) = xmmword_101342130;
      sub_100B22DA4((unint64_t *)&qword_1016605A0, (void (*)(uint64_t))&type metadata accessor for URL);
      uint64_t v60 = dispatch thunk of CustomStringConvertible.description.getter();
      uint64_t v62 = v61;
      *(void *)(v59 + 56) = &type metadata for String;
      *(void *)(v59 + 64) = sub_10000B4CC();
      *(void *)(v59 + 32) = v60;
      *(void *)(v59 + 40) = v62;
      sub_10001D4B0(0, (unint64_t *)&qword_10163AE70);
      uint64_t v63 = (void *)static OS_os_log.default.getter();
      os_log(_:dso:log:_:_:)();
      swift_bridgeObjectRelease();

      return;
    }
  }
  uint64_t v91 = a2;
  uint64_t v89 = v9;
  uint64_t v103 = v4;
  URL.deletingPathExtension()();
  URL.lastPathComponent.getter();
  uint64_t v27 = v100 + 8;
  uint64_t v28 = *(void (**)(char *, uint64_t))(v100 + 8);
  v28(v24, v18);
  UUID.init(uuidString:)();
  swift_bridgeObjectRelease();
  uint64_t v29 = v102;
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v102 + 48))(v15, 1, v16) == 1)
  {
    sub_10001DAB4((uint64_t)v15, &qword_101638CF0);
    static os_log_type_t.error.getter();
    if (qword_101637260 != -1) {
      swift_once();
    }
    sub_10000588C((uint64_t *)&unk_10163AD00);
    uint64_t v30 = swift_allocObject();
    *(_OWORD *)(v30 + 16) = xmmword_101342130;
    uint64_t v31 = URL.description.getter();
    uint64_t v33 = v32;
    *(void *)(v30 + 56) = &type metadata for String;
    *(void *)(v30 + 64) = sub_10000B4CC();
    *(void *)(v30 + 32) = v31;
    *(void *)(v30 + 40) = v33;
    os_log(_:dso:log:_:_:)();
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v34 = *(void (**)(char *, char *, uint64_t))(v29 + 32);
    uint64_t v35 = v101;
    uint64_t v87 = v16;
    v34(v101, v15, v16);
    URL.deletingPathExtension()();
    int v36 = v99;
    URL.deletingLastPathComponent()();
    uint64_t v88 = v18;
    uint64_t v104 = v27;
    id v90 = v28;
    v28(v24, v18);
    v37._object = (void *)0x8000000101402BA0;
    v37._uint64_t countAndFlagsBits = 0xD000000000000014;
    prohibitAsyncContext(functionName:)(v37);
    uint64_t v116 = &type metadata for SecureLocationLabel;
    sub_10000588C(&qword_101659390);
    uint64_t v38 = String.init<A>(describing:)();
    uint64_t v40 = v39;
    __chkstk_darwin(v41);
    *(&v87 - 6) = v42;
    *(&v87 - 5) = (uint64_t)v35;
    uint64_t v84 = (uint64_t)v36;
    uint64_t v85 = v38;
    uint64_t v86 = v40;
    sub_10000588C(&qword_101659398);
    uint64_t v43 = v103;
    OS_dispatch_queue.sync<A>(execute:)();
    swift_bridgeObjectRelease();
    uint64_t v44 = v106;
    uint64_t v103 = v43;
    if (v106)
    {
      uint64_t v45 = v105;
      uint64_t v46 = v108;
      uint64_t v100 = v107;
      uint64_t v47 = v110;
      uint64_t v96 = v111;
      uint64_t v97 = v109;
      uint64_t v95 = v112;
      uint64_t v48 = v114;
      uint64_t v94 = v113;
      uint64_t v49 = v115;
      uint64_t v50 = v98;
      unint64_t v51 = (void *)*v98;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      void *v50 = v51;
      if ((isUniquelyReferenced_nonNull_native & 1) == 0)
      {
        unint64_t v51 = sub_100A7132C(0, v51[2] + 1, 1, v51);
        *uint64_t v98 = v51;
      }
      unint64_t v54 = v51[2];
      unint64_t v53 = v51[3];
      if (v54 >= v53 >> 1)
      {
        unint64_t v51 = sub_100A7132C((void *)(v53 > 1), v54 + 1, 1, v51);
        *uint64_t v98 = v51;
      }
      v51[2] = v54 + 1;
      id v55 = &v51[11 * v54];
      v55[4] = v45;
      v55[5] = v44;
      v55[6] = v100;
      v55[7] = v46;
      uint64_t v56 = v96;
      v55[8] = v97;
      v55[9] = v47;
      uint64_t v57 = v95;
      v55[10] = v56;
      v55[11] = v57;
      uint64_t v58 = v94;
      v55[12] = v94;
      v55[13] = v48;
      v55[14] = v49;
      uint64_t v85 = v48;
      uint64_t v86 = v49;
      uint64_t v84 = v58;
      sub_100B5CEB8(v45, v44);
      v90(v99, v88);
      (*(void (**)(char *, uint64_t))(v102 + 8))(v101, v87);
    }
    else
    {
      LODWORD(v98) = static os_log_type_t.error.getter();
      if (qword_101637260 != -1) {
        swift_once();
      }
      uint64_t v91 = qword_10170EFB8;
      sub_10000588C((uint64_t *)&unk_10163AD00);
      uint64_t v64 = swift_allocObject();
      *(_OWORD *)(v64 + 16) = xmmword_101347BA0;
      uint64_t v65 = UUID.uuidString.getter();
      uint64_t v67 = v66;
      *(void *)(v64 + 56) = &type metadata for String;
      unint64_t v68 = sub_10000B4CC();
      *(void *)(v64 + 64) = v68;
      *(void *)(v64 + 32) = v65;
      *(void *)(v64 + 40) = v67;
      sub_100B22DA4((unint64_t *)&qword_1016605A0, (void (*)(uint64_t))&type metadata accessor for URL);
      uint64_t v69 = v88;
      uint64_t v70 = dispatch thunk of CustomStringConvertible.description.getter();
      *(void *)(v64 + 96) = &type metadata for String;
      *(void *)(v64 + 104) = v68;
      *(void *)(v64 + 72) = v70;
      *(void *)(v64 + 80) = v71;
      os_log(_:dso:log:_:_:)();
      swift_bridgeObjectRelease();
      UUID.uuidString.getter();
      uint64_t v72 = v92;
      URL.appendingPathComponent(_:)();
      swift_bridgeObjectRelease();
      URL.appendingPathExtension(_:)();
      BOOL v73 = v90;
      v90(v72, v69);
      uint64_t v74 = v69;
      UUID.uuidString.getter();
      URL.appendingPathComponent(_:)();
      swift_bridgeObjectRelease();
      uint64_t v75 = (uint64_t)v89;
      URL.appendingPathExtension(_:)();
      v73(v72, v69);
      uint64_t v76 = v100;
      (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v100 + 56))(v75, 0, 1, v74);
      uint64_t v77 = (uint64_t)v95;
      (*(void (**)(char *, char *, uint64_t))(v76 + 32))(v95, v24, v74);
      sub_10001D608(v75, v77 + *(int *)(v93 + 20), &qword_101649E40);
      uint64_t v78 = v94;
      sub_100B30D0C(v77, v94, (uint64_t (*)(void))type metadata accessor for BeaconStoreFileRecord);
      uint64_t v79 = v97;
      unint64_t v80 = *v97;
      char v81 = swift_isUniquelyReferenced_nonNull_native();
      *uint64_t v79 = v80;
      if ((v81 & 1) == 0)
      {
        unint64_t v80 = sub_100A6F718(0, *(void *)(v80 + 16) + 1, 1, v80);
        *uint64_t v79 = v80;
      }
      unint64_t v83 = *(void *)(v80 + 16);
      unint64_t v82 = *(void *)(v80 + 24);
      if (v83 >= v82 >> 1)
      {
        unint64_t v80 = sub_100A6F718(v82 > 1, v83 + 1, 1, v80);
        *uint64_t v79 = v80;
      }
      *(void *)(v80 + 16) = v83 + 1;
      sub_100B30DB4(v78, v80+ ((*(unsigned __int8 *)(v96 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v96 + 80))+ *(void *)(v96 + 72) * v83, (uint64_t (*)(void))type metadata accessor for BeaconStoreFileRecord);
      sub_100B310AC(v77, (uint64_t (*)(void))type metadata accessor for BeaconStoreFileRecord);
      v90(v36, v74);
      (*(void (**)(char *, uint64_t))(v102 + 8))(v101, v87);
    }
  }
}

void sub_100B213B4(uint64_t a1, uint64_t a2, uint64_t *a3, unint64_t *a4)
{
}

void sub_100B2145C(uint64_t a1, uint64_t a2, uint64_t *a3, unint64_t *a4)
{
}

void sub_100B21504(uint64_t a1, uint64_t a2, uint64_t *a3, unint64_t *a4)
{
}

void sub_100B215AC(uint64_t a1, uint64_t a2, uint64_t *a3, unint64_t *a4)
{
}

void sub_100B21654(uint64_t a1, uint64_t a2, uint64_t *a3, unint64_t *a4)
{
}

void sub_100B216FC(uint64_t a1, uint64_t a2, uint64_t *a3, unint64_t *a4, uint64_t *a5, uint64_t (*a6)(void), uint64_t *a7, uint64_t a8, uint64_t (*a9)(void), uint64_t (*a10)(void), uint64_t (*a11)(BOOL, uint64_t, uint64_t, uint64_t), uint64_t (*a12)())
{
  uint64_t v113 = a2;
  uint64_t v114 = a8;
  uint64_t v111 = a7;
  unint64_t v109 = a4;
  uint64_t v15 = sub_10000588C(&qword_101649E40);
  __chkstk_darwin(v15 - 8);
  uint64_t v17 = (char *)&v96 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v105 = type metadata accessor for BeaconStoreFileRecord();
  uint64_t v108 = *(void *)(v105 - 8);
  uint64_t v18 = __chkstk_darwin(v105);
  uint64_t v106 = (uint64_t)&v96 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v18);
  uint64_t v107 = (char *)&v96 - v20;
  uint64_t v103 = a5;
  uint64_t v110 = sub_10000588C(a5);
  __chkstk_darwin(v110);
  int64_t v112 = (char *)&v96 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v22 = a6(0);
  uint64_t v116 = *(void *)(v22 - 8);
  uint64_t v117 = (void (*)(void, void))v22;
  uint64_t v23 = __chkstk_darwin(v22);
  uint64_t v102 = (uint64_t)&v96 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v23);
  uint64_t v115 = (uint64_t)&v96 - v25;
  uint64_t v26 = sub_10000588C(&qword_101638CF0);
  __chkstk_darwin(v26 - 8);
  uint64_t v28 = (char *)&v96 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v29 = type metadata accessor for UUID();
  uint64_t v119 = *(void *)(v29 - 8);
  uint64_t v120 = v29;
  __chkstk_darwin(v29);
  uint64_t v122 = (char *)&v96 - ((v30 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v31 = type metadata accessor for URL();
  uint64_t v32 = *(void *)(v31 - 8);
  uint64_t v33 = __chkstk_darwin(v31);
  uint64_t v104 = (char *)&v96 - ((v34 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v35 = __chkstk_darwin(v33);
  uint64_t v118 = (char *)&v96 - v36;
  __chkstk_darwin(v35);
  uint64_t v38 = (char *)&v96 - v37;
  if (URL.pathExtension.getter() == 0x64726F636572 && v39 == 0xE600000000000000)
  {
    swift_bridgeObjectRelease();
  }
  else
  {
    char v40 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if ((v40 & 1) == 0)
    {
      static os_log_type_t.info.getter();
      sub_10000588C((uint64_t *)&unk_10163AD00);
      uint64_t v84 = swift_allocObject();
      *(_OWORD *)(v84 + 16) = xmmword_101342130;
      sub_100B22DA4((unint64_t *)&qword_1016605A0, (void (*)(uint64_t))&type metadata accessor for URL);
      uint64_t v85 = dispatch thunk of CustomStringConvertible.description.getter();
      uint64_t v87 = v86;
      *(void *)(v84 + 56) = &type metadata for String;
      *(void *)(v84 + 64) = sub_10000B4CC();
      *(void *)(v84 + 32) = v85;
      *(void *)(v84 + 40) = v87;
      sub_10001D4B0(0, (unint64_t *)&qword_10163AE70);
      uint64_t v88 = (void *)static OS_os_log.default.getter();
      os_log(_:dso:log:_:_:)();
      swift_bridgeObjectRelease();

      return;
    }
  }
  unint64_t v101 = a3;
  URL.deletingPathExtension()();
  URL.lastPathComponent.getter();
  uint64_t v99 = v32;
  uint64_t v43 = *(void (**)(char *, uint64_t))(v32 + 8);
  uint64_t v42 = v32 + 8;
  uint64_t v41 = v43;
  v43(v38, v31);
  UUID.init(uuidString:)();
  swift_bridgeObjectRelease();
  uint64_t v45 = v119;
  uint64_t v44 = v120;
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v119 + 48))(v28, 1, v120) == 1)
  {
    sub_10001DAB4((uint64_t)v28, &qword_101638CF0);
    static os_log_type_t.error.getter();
    if (qword_101637260 != -1) {
      swift_once();
    }
    sub_10000588C((uint64_t *)&unk_10163AD00);
    uint64_t v46 = swift_allocObject();
    *(_OWORD *)(v46 + 16) = xmmword_101342130;
    uint64_t v47 = URL.description.getter();
    uint64_t v49 = v48;
    *(void *)(v46 + 56) = &type metadata for String;
    *(void *)(v46 + 64) = sub_10000B4CC();
    *(void *)(v46 + 32) = v47;
    *(void *)(v46 + 40) = v49;
    os_log(_:dso:log:_:_:)();
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v97 = v17;
    (*(void (**)(char *, char *, uint64_t))(v45 + 32))(v122, v28, v44);
    URL.deletingPathExtension()();
    uint64_t v50 = v118;
    URL.deletingLastPathComponent()();
    uint64_t v100 = v31;
    uint64_t v98 = v42;
    v41(v38, v31);
    v51._object = (void *)0x8000000101402BA0;
    v51._uint64_t countAndFlagsBits = 0xD000000000000014;
    prohibitAsyncContext(functionName:)(v51);
    uint64_t v123 = v117;
    sub_10000588C(v111);
    uint64_t v52 = String.init<A>(describing:)();
    uint64_t v54 = v53;
    __chkstk_darwin(v55);
    uint64_t v57 = v121;
    uint64_t v56 = v122;
    *(&v96 - 6) = v58;
    *(&v96 - 5) = (uint64_t)v56;
    *(&v96 - 4) = (uint64_t)v50;
    *(&v96 - 3) = v52;
    *(&v96 - 2) = v54;
    uint64_t v59 = (uint64_t)v112;
    OS_dispatch_queue.sync<A>(execute:)();
    swift_bridgeObjectRelease();
    int v60 = (*(uint64_t (**)(uint64_t, uint64_t, void (*)(void, void)))(v116 + 48))(v59, 1, v117);
    uint64_t v117 = (void (*)(void, void))v41;
    if (v60 == 1)
    {
      uint64_t v121 = v57;
      sub_10001DAB4(v59, v103);
      LODWORD(v116) = static os_log_type_t.error.getter();
      if (qword_101637260 != -1) {
        swift_once();
      }
      uint64_t v115 = qword_10170EFB8;
      sub_10000588C((uint64_t *)&unk_10163AD00);
      uint64_t v61 = swift_allocObject();
      *(_OWORD *)(v61 + 16) = xmmword_101347BA0;
      uint64_t v62 = UUID.uuidString.getter();
      uint64_t v64 = v63;
      *(void *)(v61 + 56) = &type metadata for String;
      unint64_t v65 = sub_10000B4CC();
      *(void *)(v61 + 64) = v65;
      *(void *)(v61 + 32) = v62;
      *(void *)(v61 + 40) = v64;
      sub_100B22DA4((unint64_t *)&qword_1016605A0, (void (*)(uint64_t))&type metadata accessor for URL);
      uint64_t v66 = v100;
      uint64_t v67 = dispatch thunk of CustomStringConvertible.description.getter();
      *(void *)(v61 + 96) = &type metadata for String;
      *(void *)(v61 + 104) = v65;
      *(void *)(v61 + 72) = v67;
      *(void *)(v61 + 80) = v68;
      os_log(_:dso:log:_:_:)();
      swift_bridgeObjectRelease();
      UUID.uuidString.getter();
      uint64_t v70 = v104;
      URL.appendingPathComponent(_:)();
      swift_bridgeObjectRelease();
      URL.appendingPathExtension(_:)();
      uint64_t v71 = (void (*)(char *, uint64_t))v117;
      v117(v70, v66);
      UUID.uuidString.getter();
      URL.appendingPathComponent(_:)();
      swift_bridgeObjectRelease();
      uint64_t v73 = (uint64_t)v97;
      URL.appendingPathExtension(_:)();
      v71(v70, v66);
      uint64_t v74 = v99;
      (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v99 + 56))(v73, 0, 1, v66);
      uint64_t v75 = (uint64_t)v107;
      (*(void (**)(char *, char *, uint64_t))(v74 + 32))(v107, v38, v66);
      sub_10001D608(v73, v75 + *(int *)(v105 + 20), &qword_101649E40);
      uint64_t v76 = v106;
      sub_100B30D0C(v75, v106, (uint64_t (*)(void))type metadata accessor for BeaconStoreFileRecord);
      uint64_t v77 = v109;
      unint64_t v78 = *v109;
      char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      *uint64_t v77 = v78;
      if ((isUniquelyReferenced_nonNull_native & 1) == 0)
      {
        unint64_t v78 = sub_100A6F718(0, *(void *)(v78 + 16) + 1, 1, v78);
        *uint64_t v77 = v78;
      }
      unint64_t v81 = *(void *)(v78 + 16);
      unint64_t v80 = *(void *)(v78 + 24);
      if (v81 >= v80 >> 1)
      {
        unint64_t v78 = sub_100A6F718(v80 > 1, v81 + 1, 1, v78);
        *uint64_t v77 = v78;
      }
      *(void *)(v78 + 16) = v81 + 1;
      sub_100B30DB4(v76, v78+ ((*(unsigned __int8 *)(v108 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v108 + 80))+ *(void *)(v108 + 72) * v81, (uint64_t (*)(void))type metadata accessor for BeaconStoreFileRecord);
      unint64_t v82 = type metadata accessor for BeaconStoreFileRecord;
      uint64_t v83 = v75;
    }
    else
    {
      uint64_t v89 = v115;
      sub_100B30DB4(v59, v115, a9);
      uint64_t v90 = v102;
      sub_100B30D0C(v89, v102, a10);
      uint64_t v91 = v101;
      uint64_t v92 = *v101;
      char v93 = swift_isUniquelyReferenced_nonNull_native();
      *uint64_t v91 = v92;
      if ((v93 & 1) == 0)
      {
        uint64_t v92 = a11(0, *(void *)(v92 + 16) + 1, 1, v92);
        *uint64_t v91 = v92;
      }
      unint64_t v95 = *(void *)(v92 + 16);
      unint64_t v94 = *(void *)(v92 + 24);
      if (v95 >= v94 >> 1)
      {
        uint64_t v92 = a11(v94 > 1, v95 + 1, 1, v92);
        uint64_t *v101 = v92;
      }
      *(void *)(v92 + 16) = v95 + 1;
      sub_100B30DB4(v90, v92+ ((*(unsigned __int8 *)(v116 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v116 + 80))+ *(void *)(v116 + 72) * v95, a9);
      uint64_t v83 = v115;
      unint64_t v82 = a12;
    }
    sub_100B310AC(v83, (uint64_t (*)(void))v82);
    v117(v118, v100);
    (*(void (**)(char *, uint64_t))(v119 + 8))(v122, v120);
  }
}

uint64_t sub_100B22348@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = v2 + *(int *)(a1 + 32);
  uint64_t v5 = type metadata accessor for Date();
  uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16);

  return v6(a2, v4, v5);
}

uint64_t sub_100B223B8(id *a1, uint64_t a2)
{
  uint64_t v3 = v2;
  uint64_t v6 = type metadata accessor for UUID();
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  unint64_t v9 = (char *)&v38 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = (int *)type metadata accessor for LostModeRecord();
  __chkstk_darwin(v10);
  uint64_t v12 = (char *)&v38 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100B30D0C(a2, (uint64_t)v12, (uint64_t (*)(void))type metadata accessor for LostModeRecord);
  [*a1 encryptedValues];
  swift_getObjectType();
  (*(void (**)(char *, uint64_t, uint64_t))(v7 + 16))(v9, v3 + v10[6], v6);
  sub_100B22DA4((unint64_t *)&qword_10163B8F0, (void (*)(uint64_t))&type metadata accessor for UUID);
  char v13 = dispatch thunk of static Equatable.== infix(_:_:)();
  (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
  if ((v13 & 1) == 0)
  {
    uint64_t v14 = UUID.uuidString.getter();
    *((void *)&v39 + 1) = &type metadata for String;
    char v40 = &protocol witness table for String;
    *(void *)&long long v38 = v14;
    *((void *)&v38 + 1) = v15;
    CKRecordKeyValueSetting.subscript.setter();
  }
  uint64_t v16 = v10[7];
  uint64_t v17 = (void *)(v3 + v16);
  uint64_t v18 = *(void *)(v3 + v16 + 8);
  uint64_t v19 = &v12[v16];
  uint64_t v21 = *(void *)v19;
  uint64_t v20 = *((void *)v19 + 1);
  if (!v18)
  {
    if (!v20) {
      goto LABEL_15;
    }
    goto LABEL_12;
  }
  if (!v20)
  {
    char v40 = 0;
    long long v38 = 0u;
    long long v39 = 0u;
    goto LABEL_14;
  }
  BOOL v22 = *v17 == v21 && v18 == v20;
  if (!v22 && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
  {
LABEL_12:
    *((void *)&v39 + 1) = &type metadata for String;
    char v40 = &protocol witness table for String;
    *(void *)&long long v38 = v21;
    *((void *)&v38 + 1) = v20;
LABEL_14:
    swift_bridgeObjectRetain();
    CKRecordKeyValueSetting.subscript.setter();
  }
LABEL_15:
  uint64_t v23 = v10[8];
  uint64_t v24 = (void *)(v3 + v23);
  uint64_t v25 = *(void *)(v3 + v23 + 8);
  uint64_t v26 = &v12[v23];
  uint64_t v28 = *(void *)v26;
  uint64_t v27 = *((void *)v26 + 1);
  if (!v25)
  {
    if (!v27) {
      goto LABEL_27;
    }
    goto LABEL_24;
  }
  if (!v27)
  {
    char v40 = 0;
    long long v38 = 0u;
    long long v39 = 0u;
    goto LABEL_26;
  }
  BOOL v29 = *v24 == v28 && v25 == v27;
  if (!v29 && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
  {
LABEL_24:
    *((void *)&v39 + 1) = &type metadata for String;
    char v40 = &protocol witness table for String;
    *(void *)&long long v38 = v28;
    *((void *)&v38 + 1) = v27;
LABEL_26:
    swift_bridgeObjectRetain();
    CKRecordKeyValueSetting.subscript.setter();
  }
LABEL_27:
  uint64_t v30 = v10[9];
  uint64_t v31 = (void *)(v3 + v30);
  uint64_t v32 = *(void *)(v3 + v30 + 8);
  uint64_t v33 = &v12[v30];
  uint64_t v35 = *(void *)v33;
  uint64_t v34 = *((void *)v33 + 1);
  if (v32)
  {
    if (!v34)
    {
      char v40 = 0;
      long long v38 = 0u;
      long long v39 = 0u;
      goto LABEL_38;
    }
    BOOL v36 = *v31 == v35 && v32 == v34;
    if (v36 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0) {
      goto LABEL_34;
    }
  }
  else if (!v34)
  {
LABEL_34:
    sub_100B310AC((uint64_t)v12, (uint64_t (*)(void))type metadata accessor for LostModeRecord);
    return swift_unknownObjectRelease();
  }
  *((void *)&v39 + 1) = &type metadata for String;
  char v40 = &protocol witness table for String;
  *(void *)&long long v38 = v35;
  *((void *)&v38 + 1) = v34;
LABEL_38:
  swift_bridgeObjectRetain();
  CKRecordKeyValueSetting.subscript.setter();
  swift_unknownObjectRelease();
  return sub_100B310AC((uint64_t)v12, (uint64_t (*)(void))type metadata accessor for LostModeRecord);
}

uint64_t sub_100B2280C(id *a1, uint64_t a2)
{
  uint64_t v3 = v2;
  uint64_t v61 = type metadata accessor for UUID();
  uint64_t v6 = *(void *)(v61 - 8);
  __chkstk_darwin(v61);
  int v60 = (char *)v56 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = (int *)type metadata accessor for SafeLocation();
  __chkstk_darwin(v8);
  uint64_t v10 = (char *)v56 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100B30D0C(a2, (uint64_t)v10, (uint64_t (*)(void))type metadata accessor for SafeLocation);
  id v11 = [*a1 encryptedValues];
  swift_getObjectType();
  uint64_t v12 = v8[7];
  uint64_t v13 = *(void *)(v3 + v12);
  uint64_t v14 = *(void *)(v3 + v12 + 8);
  uint64_t v15 = &v10[v12];
  uint64_t v17 = *(void **)v15;
  uint64_t v16 = *((void *)v15 + 1);
  BOOL v18 = v13 == *(void *)v15 && v14 == v16;
  if (!v18 && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
  {
    uint64_t v64 = &type metadata for String;
    unint64_t v65 = &protocol witness table for String;
    double v62 = *(double *)&v17;
    uint64_t v63 = v16;
    swift_bridgeObjectRetain();
    CKRecordKeyValueSetting.subscript.setter();
  }
  uint64_t v19 = v8[8];
  double v20 = *(double *)&v10[v19];
  if (*(double *)(v3 + v19) != v20)
  {
    uint64_t v64 = &type metadata for Double;
    unint64_t v65 = &protocol witness table for Double;
    double v62 = v20;
    CKRecordKeyValueSetting.subscript.setter();
  }
  uint64_t v21 = v8[9];
  double v22 = *(double *)&v10[v21];
  if (*(double *)(v3 + v21) != v22)
  {
    uint64_t v64 = &type metadata for Double;
    unint64_t v65 = &protocol witness table for Double;
    double v62 = v22;
    CKRecordKeyValueSetting.subscript.setter();
  }
  uint64_t v23 = v8[10];
  double v24 = *(double *)&v10[v23];
  if (*(double *)(v3 + v23) != v24)
  {
    uint64_t v64 = &type metadata for Double;
    unint64_t v65 = &protocol witness table for Double;
    double v62 = v24;
    CKRecordKeyValueSetting.subscript.setter();
  }
  uint64_t v25 = v8[11];
  int v26 = *(unsigned __int8 *)(v3 + v25);
  *(void *)&double v27 = v10[v25];
  if (v26 != LODWORD(v27))
  {
    uint64_t v64 = &type metadata for Int;
    unint64_t v65 = &protocol witness table for Int;
    double v62 = v27;
    CKRecordKeyValueSetting.subscript.setter();
  }
  uint64_t v28 = v8[6];
  int v29 = *(unsigned __int8 *)(v3 + v28);
  *(void *)&double v30 = v10[v28];
  if (v29 != LODWORD(v30))
  {
    uint64_t v64 = &type metadata for Int;
    unint64_t v65 = &protocol witness table for Int;
    double v62 = v30;
    CKRecordKeyValueSetting.subscript.setter();
  }
  uint64_t v31 = v8[12];
  int v32 = *(unsigned __int8 *)(v3 + v31);
  *(void *)&double v33 = v10[v31];
  if (v32 != LODWORD(v33))
  {
    uint64_t v64 = &type metadata for Int;
    unint64_t v65 = &protocol witness table for Int;
    double v62 = v33;
    CKRecordKeyValueSetting.subscript.setter();
  }
  uint64_t v34 = v8[13];
  uint64_t v35 = *(void *)(v3 + v34);
  uint64_t v36 = *(void *)&v10[v34];
  swift_bridgeObjectRetain();
  LOBYTE(v35) = sub_100338858(v35, v36);
  swift_bridgeObjectRelease();
  if (v35)
  {
    sub_100B310AC((uint64_t)v10, (uint64_t (*)(void))type metadata accessor for SafeLocation);
    return swift_unknownObjectRelease();
  }
  else
  {
    int64_t v38 = *(void *)(v36 + 16);
    if (v38)
    {
      id v57 = v11;
      uint64_t v58 = v10;
      double v62 = COERCE_DOUBLE(_swiftEmptyArrayStorage);
      swift_bridgeObjectRetain();
      sub_1000B6ED0(0, v38, 0);
      char v40 = *(void (**)(char *, uint64_t, uint64_t))(v6 + 16);
      uint64_t v39 = v6 + 16;
      uint64_t v59 = v40;
      uint64_t v41 = *(unsigned __int8 *)(v39 + 64);
      v56[1] = v36;
      uint64_t v42 = v36 + ((v41 + 32) & ~v41);
      uint64_t v43 = *(void *)(v39 + 56);
      uint64_t v44 = (void (**)(char *, uint64_t))(v39 - 8);
      do
      {
        uint64_t v45 = v60;
        uint64_t v46 = v61;
        v59(v60, v42, v61);
        uint64_t v47 = UUID.uuidString.getter();
        uint64_t v49 = v48;
        (*v44)(v45, v46);
        double v50 = v62;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        {
          sub_1000B6ED0(0, *(void *)(*(void *)&v50 + 16) + 1, 1);
          double v50 = v62;
        }
        unint64_t v52 = *(void *)(*(void *)&v50 + 16);
        unint64_t v51 = *(void *)(*(void *)&v50 + 24);
        if (v52 >= v51 >> 1)
        {
          sub_1000B6ED0(v51 > 1, v52 + 1, 1);
          double v50 = v62;
        }
        *(void *)(*(void *)&v50 + 16) = v52 + 1;
        unint64_t v53 = *(void *)&v50 + 16 * v52;
        *(void *)(v53 + 32) = v47;
        *(void *)(v53 + 40) = v49;
        v42 += v43;
        --v38;
      }
      while (v38);
      swift_bridgeObjectRelease();
      id v11 = v57;
      uint64_t v10 = v58;
    }
    Class isa = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    NSString v55 = String._bridgeToObjectiveC()();
    [v11 setObject:isa forKeyedSubscript:v55];
    swift_unknownObjectRelease();

    return sub_100B310AC((uint64_t)v10, (uint64_t (*)(void))type metadata accessor for SafeLocation);
  }
}

uint64_t sub_100B22DA4(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_100B22DEC@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = v1;
  uint64_t v61 = a1;
  uint64_t v3 = sub_10000588C(&qword_101649E40);
  __chkstk_darwin(v3 - 8);
  uint64_t v77 = (uint64_t)&v52 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v76 = type metadata accessor for URL();
  uint64_t v66 = *(unsigned int (***)(char *, uint64_t, uint64_t))(v76 - 8);
  __chkstk_darwin(v76);
  uint64_t v64 = (char *)&v52 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = sub_10000588C((uint64_t *)&unk_101653C90);
  __chkstk_darwin(v6 - 8);
  uint64_t v8 = (char *)&v52 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = type metadata accessor for DirectorySequence();
  uint64_t v10 = *(void *)(v9 - 8);
  __chkstk_darwin(v9);
  uint64_t v74 = (char *)&v52 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = sub_10000588C(&qword_1016591E8);
  uint64_t v13 = __chkstk_darwin(v12 - 8);
  uint64_t v63 = (uint64_t)&v52 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v13);
  uint64_t v16 = (char *)&v52 - v15;
  uint64_t v73 = sub_10000588C(&qword_1016591F0);
  uint64_t v56 = *(void *)(v73 - 8);
  uint64_t v17 = __chkstk_darwin(v73);
  unint64_t v65 = (char *)&v52 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v17);
  uint64_t v72 = (uint64_t)&v52 - v19;
  uint64_t v20 = sub_10000588C(&qword_10164B3C8);
  __chkstk_darwin(v20 - 8);
  double v22 = (char *)&v52 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v23 = sub_10000588C(&qword_101660680);
  uint64_t v24 = *(void *)(v23 - 8);
  __chkstk_darwin(v23);
  int v26 = (char *)&v52 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10001D074(v2, (uint64_t)v22, &qword_10164B3C8);
  uint64_t v55 = v24;
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v24 + 48))(v22, 1, v23) == 1)
  {
    sub_10001DAB4((uint64_t)v22, &qword_10164B3C8);
  }
  else
  {
    uint64_t v54 = v2;
    sub_10001D608((uint64_t)v22, (uint64_t)v26, &qword_101660680);
    uint64_t v53 = v23;
    uint64_t v27 = *(int *)(v23 + 40);
    double v62 = v26;
    uint64_t v75 = &v26[v27];
    sub_10001D074((uint64_t)&v26[v27], (uint64_t)v8, (uint64_t *)&unk_101653C90);
    uint64_t v70 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v10 + 48);
    uint64_t v71 = v10 + 48;
    int v28 = v70(v8, 1, v9);
    int v29 = v74;
    uint64_t v30 = (uint64_t)v65;
    if (v28 == 1)
    {
LABEL_11:
      sub_10001DAB4((uint64_t)v8, (uint64_t *)&unk_101653C90);
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v56 + 56))(v16, 1, 1, v73);
    }
    else
    {
      uint64_t v32 = v10 + 32;
      uint64_t v31 = *(void (**)(char *, char *, uint64_t))(v10 + 32);
      uint64_t v68 = (unsigned int (**)(uint64_t, uint64_t, uint64_t))(v66 + 6);
      uint64_t v69 = v31;
      uint64_t v67 = (void (**)(char *, uint64_t))(v10 + 8);
      uint64_t v59 = (void (**)(uint64_t, uint64_t))(v66 + 1);
      int v60 = (void (**)(char *, uint64_t, uint64_t))(v66 + 4);
      uint64_t v58 = (void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v10 + 56);
      id v57 = (void (**)(char *, uint64_t, uint64_t, uint64_t))(v56 + 56);
      uint64_t v66 = (unsigned int (**)(char *, uint64_t, uint64_t))(v56 + 48);
      while (1)
      {
        v69(v29, v8, v9);
        uint64_t v33 = v76;
        uint64_t v34 = v77;
        DirectorySequence.next()();
        if ((*v68)(v34, 1, v33) == 1)
        {
          (*v67)(v29, v9);
          sub_10001DAB4(v77, &qword_101649E40);
          uint64_t v35 = (uint64_t)v75;
          sub_10001DAB4((uint64_t)v75, (uint64_t *)&unk_101653C90);
          (*v58)(v35, 1, 1, v9);
          uint64_t v36 = v73;
          (*v57)(v16, 1, 1, v73);
        }
        else
        {
          uint64_t v37 = v16;
          uint64_t v38 = v32;
          uint64_t v39 = v8;
          uint64_t v40 = (uint64_t)v64;
          (*v60)(v64, v77, v76);
          uint64_t v42 = v63;
          sub_100E56C2C(v40, v62, v63);
          (*v67)(v74, v9);
          uint64_t v43 = v40;
          uint64_t v8 = v39;
          uint64_t v32 = v38;
          uint64_t v16 = v37;
          int v29 = v74;
          (*v59)(v43, v33);
          uint64_t v44 = v42;
          uint64_t v30 = (uint64_t)v65;
          sub_10001D608(v44, (uint64_t)v16, &qword_1016591E8);
          uint64_t v36 = v73;
        }
        if ((*v66)(v16, 1, v36) == 1) {
          break;
        }
        uint64_t v45 = v9;
        uint64_t v46 = v72;
        sub_10001D608((uint64_t)v16, v72, &qword_1016591F0);
        sub_10001D608(v46, v30, &qword_1016591F0);
        if (swift_getEnumCaseMultiPayload() != 1)
        {
          sub_10001DAB4((uint64_t)v62, &qword_101660680);
          uint64_t v50 = v61;
          sub_100B30DB4(v30, v61, (uint64_t (*)(void))type metadata accessor for OwnedDeviceKeyRecord);
          uint64_t v51 = type metadata accessor for OwnedDeviceKeyRecord();
          return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v51 - 8) + 56))(v50, 0, 1, v51);
        }
        sub_10001DAB4(v30, &qword_1016591F0);
        sub_10001D074((uint64_t)v75, (uint64_t)v8, (uint64_t *)&unk_101653C90);
        uint64_t v9 = v45;
        if (v70(v8, 1, v45) == 1) {
          goto LABEL_11;
        }
      }
    }
    sub_10001DAB4((uint64_t)v62, &qword_101660680);
    sub_10001DAB4((uint64_t)v16, &qword_1016591E8);
    uint64_t v47 = v54;
    sub_10001DAB4(v54, &qword_10164B3C8);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v55 + 56))(v47, 1, 1, v53);
  }
  uint64_t v48 = type metadata accessor for OwnedDeviceKeyRecord();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v48 - 8) + 56))(v61, 1, 1, v48);
}

uint64_t sub_100B23648@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_100B23660(a1, a2);
}

uint64_t sub_100B23660@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v5 = sub_10000588C((uint64_t *)&unk_10163AC90);
  uint64_t v6 = __chkstk_darwin(v5 - 8);
  uint64_t v8 = (char *)&v20 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  uint64_t v10 = (char *)&v20 - v9;
  uint64_t v11 = *a1;
  unint64_t v12 = a1[1];
  switch(v12 >> 62)
  {
    case 1uLL:
      if ((int)v11 != v11 >> 32) {
        goto LABEL_7;
      }
      goto LABEL_12;
    case 2uLL:
      if (*(void *)(v11 + 16) == *(void *)(v11 + 24)) {
        goto LABEL_12;
      }
LABEL_7:
      sub_1000361E0(v11, v12);
      goto LABEL_8;
    case 3uLL:
      goto LABEL_3;
    default:
      if ((v12 & 0xFF000000000000) == 0)
      {
LABEL_3:
        sub_10001CFB8(v11, v12);
LABEL_12:
        uint64_t v17 = type metadata accessor for Date();
        (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v17 - 8) + 56))(v10, 1, 1, v17);
LABEL_13:
        Date.init()();
        return sub_10001DAB4((uint64_t)v10, (uint64_t *)&unk_10163AC90);
      }
LABEL_8:
      sub_101156DE4(v11, v12, &v21);
      if (v2)
      {
        __break(1u);
        JUMPOUT(0x100B23958);
      }
      sub_10001CFB8(v11, v12);
      id v14 = v21;
      if (!v21) {
        goto LABEL_12;
      }
      id v15 = [v21 creationDate];

      if (v15)
      {
        static Date._unconditionallyBridgeFromObjectiveC(_:)();

        uint64_t v16 = type metadata accessor for Date();
        (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v16 - 8) + 56))(v8, 0, 1, v16);
      }
      else
      {
        uint64_t v16 = type metadata accessor for Date();
        (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v16 - 8) + 56))(v8, 1, 1, v16);
      }
      sub_10001D608((uint64_t)v8, (uint64_t)v10, (uint64_t *)&unk_10163AC90);
      type metadata accessor for Date();
      uint64_t v19 = *(void *)(v16 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v19 + 48))(v10, 1, v16) == 1) {
        goto LABEL_13;
      }
      return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v19 + 32))(a2, v10, v16);
  }
}

uint64_t sub_100B2396C(id *a1, uint64_t a2)
{
  uint64_t v5 = type metadata accessor for UUID();
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v8 = (char *)v33 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = type metadata accessor for LeashRecord();
  uint64_t v10 = v9 - 8;
  __chkstk_darwin(v9);
  unint64_t v12 = (char *)v33 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100B30D0C(a2, (uint64_t)v12, (uint64_t (*)(void))type metadata accessor for LeashRecord);
  id v13 = [*a1 encryptedValues];
  uint64_t v14 = *(int *)(v10 + 32);
  uint64_t v15 = *(void *)(v2 + v14);
  uint64_t v16 = *(void *)&v12[v14];
  swift_bridgeObjectRetain();
  LOBYTE(v15) = sub_100338858(v15, v16);
  swift_bridgeObjectRelease();
  if (v15)
  {
    sub_100B310AC((uint64_t)v12, (uint64_t (*)(void))type metadata accessor for LeashRecord);
    return swift_unknownObjectRelease();
  }
  else
  {
    int64_t v18 = *(void *)(v16 + 16);
    if (v18)
    {
      id v34 = v13;
      uint64_t v35 = v12;
      uint64_t v39 = _swiftEmptyArrayStorage;
      swift_bridgeObjectRetain();
      sub_1000B6ED0(0, v18, 0);
      uint64_t v19 = v6 + 16;
      uint64_t v20 = *(void (**)(char *, uint64_t, uint64_t))(v6 + 16);
      uint64_t v21 = *(unsigned __int8 *)(v6 + 80);
      v33[1] = v16;
      uint64_t v22 = v16 + ((v21 + 32) & ~v21);
      uint64_t v36 = *(void *)(v19 + 56);
      uint64_t v37 = v20;
      uint64_t v38 = v19;
      uint64_t v23 = (void (**)(char *, uint64_t))(v19 - 8);
      do
      {
        v37(v8, v22, v5);
        uint64_t v24 = UUID.uuidString.getter();
        uint64_t v26 = v25;
        (*v23)(v8, v5);
        uint64_t v27 = v39;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        {
          sub_1000B6ED0(0, v27[2] + 1, 1);
          uint64_t v27 = v39;
        }
        unint64_t v29 = v27[2];
        unint64_t v28 = v27[3];
        if (v29 >= v28 >> 1)
        {
          sub_1000B6ED0(v28 > 1, v29 + 1, 1);
          uint64_t v27 = v39;
        }
        void v27[2] = v29 + 1;
        uint64_t v30 = &v27[2 * v29];
        v30[4] = v24;
        v30[5] = v26;
        v22 += v36;
        --v18;
      }
      while (v18);
      swift_bridgeObjectRelease();
      id v13 = v34;
      unint64_t v12 = v35;
    }
    Class isa = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    NSString v32 = String._bridgeToObjectiveC()();
    [v13 setObject:isa forKeyedSubscript:v32];
    swift_unknownObjectRelease();

    return sub_100B310AC((uint64_t)v12, (uint64_t (*)(void))type metadata accessor for LeashRecord);
  }
}

id sub_100B23CB8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v8 = v7;
  if (a2)
  {
    NSString v12 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    if (a4) {
      goto LABEL_3;
    }
LABEL_6:
    NSString v13 = 0;
    if (a6) {
      goto LABEL_4;
    }
    goto LABEL_7;
  }
  NSString v12 = 0;
  if (!a4) {
    goto LABEL_6;
  }
LABEL_3:
  NSString v13 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  if (a6)
  {
LABEL_4:
    NSString v14 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    goto LABEL_8;
  }
LABEL_7:
  NSString v14 = 0;
LABEL_8:
  uint64_t v15 = type metadata accessor for Date();
  uint64_t v16 = *(void *)(v15 - 8);
  Class isa = 0;
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v16 + 48))(a7, 1, v15) != 1)
  {
    Class isa = Date._bridgeToObjectiveC()().super.isa;
    (*(void (**)(uint64_t, uint64_t))(v16 + 8))(a7, v15);
  }
  id v18 = [v8 initWithMessage:v12 email:v13 phoneNumber:v14 timestamp:isa];

  return v18;
}

uint64_t sub_100B23E3C()
{
  return dispatch thunk of static Equatable.== infix(_:_:)() & 1;
}

Swift::Int sub_100B23ECC(uint64_t *a1)
{
  uint64_t v193 = sub_10000588C(&qword_1016594C0);
  uint64_t v3 = __chkstk_darwin(v193);
  unint64_t v203 = (char *)&v170 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = __chkstk_darwin(v3);
  uint64_t v202 = (char *)&v170 - v6;
  uint64_t v7 = __chkstk_darwin(v5);
  uint64_t v183 = (char *)&v170 - v8;
  uint64_t v9 = __chkstk_darwin(v7);
  uint64_t v182 = (char *)&v170 - v10;
  uint64_t v11 = __chkstk_darwin(v9);
  uint64_t v175 = (char *)&v170 - v12;
  __chkstk_darwin(v11);
  Swift::String v174 = (char *)&v170 - v13;
  uint64_t v196 = type metadata accessor for BeaconEstimatedLocation();
  uint64_t v185 = *(void *)(v196 - 8);
  uint64_t v14 = __chkstk_darwin(v196);
  uint64_t v177 = (uint64_t)&v170 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = __chkstk_darwin(v14);
  uint64_t v197 = (uint64_t)&v170 - v17;
  uint64_t v18 = __chkstk_darwin(v16);
  uint64_t v20 = (char *)&v170 - v19;
  uint64_t v21 = __chkstk_darwin(v18);
  uint64_t v23 = (char *)&v170 - v22;
  uint64_t v24 = __chkstk_darwin(v21);
  uint64_t v181 = (uint64_t)&v170 - v25;
  uint64_t v26 = __chkstk_darwin(v24);
  uint64_t v180 = (uint64_t)&v170 - v27;
  uint64_t v28 = __chkstk_darwin(v26);
  uint64_t v173 = (uint64_t)&v170 - v29;
  __chkstk_darwin(v28);
  uint64_t v172 = (uint64_t)&v170 - v30;
  Swift::Int v31 = a1[1];
  Swift::Int result = _minimumMergeRunLength(_:)(v31);
  if (result >= v31)
  {
    if (v31 < 0) {
      goto LABEL_149;
    }
    if (v31) {
      return sub_100B26658(0, v31, 1, a1);
    }
    return result;
  }
  if (v31 >= 0) {
    uint64_t v33 = v31;
  }
  else {
    uint64_t v33 = v31 + 1;
  }
  if (v31 < -1) {
    goto LABEL_157;
  }
  unint64_t v187 = v23;
  unint64_t v188 = v20;
  Swift::Int v171 = result;
  uint64_t v186 = v1;
  if (v31 < 2)
  {
    uint64_t v37 = (char *)_swiftEmptyArrayStorage;
    unint64_t v184 = (unint64_t)_swiftEmptyArrayStorage
         + ((*(unsigned __int8 *)(v185 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v185 + 80));
    uint64_t v170 = _swiftEmptyArrayStorage;
    if (v31 != 1)
    {
      unint64_t v39 = _swiftEmptyArrayStorage[2];
LABEL_113:
      if (v39 >= 2)
      {
        uint64_t v162 = *a1;
        uint64_t v163 = v170;
        while (1)
        {
          unint64_t v164 = v39 - 2;
          if (v39 < 2) {
            goto LABEL_144;
          }
          if (!v162) {
            goto LABEL_156;
          }
          uint64_t v165 = *(void *)&v37[16 * v164 + 32];
          uint64_t v166 = *(void *)&v37[16 * v39 + 24];
          uint64_t v167 = v186;
          sub_100B27040(v162 + *(void *)(v185 + 72) * v165, v162 + *(void *)(v185 + 72) * *(void *)&v37[16 * v39 + 16], v162 + *(void *)(v185 + 72) * v166, v184);
          uint64_t v186 = v167;
          if (v167) {
            goto LABEL_126;
          }
          if (v166 < v165) {
            goto LABEL_145;
          }
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
            uint64_t v37 = sub_100B73584((uint64_t)v37);
          }
          if (v164 >= *((void *)v37 + 2)) {
            goto LABEL_146;
          }
          int64_t v168 = &v37[16 * v164 + 32];
          *(void *)int64_t v168 = v165;
          *((void *)v168 + 1) = v166;
          unint64_t v169 = *((void *)v37 + 2);
          if (v39 > v169) {
            goto LABEL_147;
          }
          memmove(&v37[16 * v39 + 16], &v37[16 * v39 + 32], 16 * (v169 - v39));
          *((void *)v37 + 2) = v169 - 1;
          unint64_t v39 = v169 - 1;
          if (v169 <= 2) {
            goto LABEL_126;
          }
        }
      }
LABEL_125:
      uint64_t v163 = v170;
LABEL_126:
      swift_bridgeObjectRelease();
      v163[2] = 0;
      return swift_bridgeObjectRelease();
    }
  }
  else
  {
    uint64_t v34 = v33 >> 1;
    uint64_t v35 = static Array._allocateBufferUninitialized(minimumCapacity:)();
    *(void *)(v35 + 16) = v34;
    uint64_t v36 = *(unsigned __int8 *)(v185 + 80);
    uint64_t v170 = (void *)v35;
    unint64_t v184 = v35 + ((v36 + 32) & ~v36);
  }
  Swift::Int v38 = 0;
  uint64_t v37 = (char *)_swiftEmptyArrayStorage;
  unint64_t v189 = a1;
  while (1)
  {
    Swift::Int v40 = v38;
    Swift::Int v41 = v38 + 1;
    uint64_t v178 = v37;
    Swift::Int v179 = v38;
    if (v38 + 1 >= v31)
    {
      Swift::Int v61 = v38 + 1;
    }
    else
    {
      Swift::Int v200 = v31;
      uint64_t v42 = *a1;
      uint64_t v43 = *(void *)(v185 + 72);
      uint64_t v44 = v172;
      sub_100B30D0C(*a1 + v43 * v41, v172, (uint64_t (*)(void))type metadata accessor for BeaconEstimatedLocation);
      uint64_t v176 = v42;
      uint64_t v201 = v43;
      uint64_t v45 = v42 + v43 * v40;
      uint64_t v46 = v173;
      sub_100B30D0C(v45, v173, (uint64_t (*)(void))type metadata accessor for BeaconEstimatedLocation);
      uint64_t v48 = *(int *)(v196 + 40);
      uint64_t v47 = *(int *)(v196 + 44);
      unsigned int v49 = *(unsigned __int8 *)(v44 + v47);
      uint64_t v50 = v44 + v48;
      unsigned int v51 = *(unsigned __int8 *)(v46 + v47);
      uint64_t v199 = v46 + v48;
      uint64_t v52 = v174;
      *Swift::String v174 = v49;
      uint64_t v53 = v193;
      uint64_t v54 = &v52[*(int *)(v193 + 48)];
      uint64_t v55 = type metadata accessor for Date();
      uint64_t v56 = *(void *)(v55 - 8);
      id v57 = *(void (**)(unsigned char *, uint64_t, uint64_t))(v56 + 16);
      uint64_t v58 = (unsigned char *)(v56 + 16);
      Swift::Int v194 = (Swift::Int)v54;
      v57(v54, v50, v55);
      uint64_t v59 = v175;
      *uint64_t v175 = v51;
      int v60 = &v59[*(int *)(v53 + 48)];
      uint64_t v198 = v57;
      uint64_t v195 = v58;
      v57(v60, v199, v55);
      if (v49 == v51)
      {
        sub_100B22DA4((unint64_t *)&qword_1016605E0, (void (*)(uint64_t))&type metadata accessor for Date);
        LODWORD(v199) = dispatch thunk of static Comparable.> infix(_:_:)();
      }
      else
      {
        LODWORD(v199) = v51 < v49;
      }
      sub_10001DAB4((uint64_t)v175, &qword_1016594C0);
      sub_10001DAB4((uint64_t)v174, &qword_1016594C0);
      sub_100B310AC(v173, (uint64_t (*)(void))type metadata accessor for BeaconEstimatedLocation);
      sub_100B310AC(v172, (uint64_t (*)(void))type metadata accessor for BeaconEstimatedLocation);
      Swift::Int v61 = v179 + 2;
      Swift::Int v31 = v200;
      uint64_t v37 = v178;
      if (v179 + 2 >= v200)
      {
LABEL_28:
        a1 = v189;
      }
      else
      {
        uint64_t v191 = v201 * v41;
        uint64_t v192 = v55;
        uint64_t v62 = v176;
        Swift::Int v190 = v201 * v61;
        while (1)
        {
          Swift::Int v194 = v61;
          uint64_t v63 = v180;
          sub_100B30D0C(v62 + v190, v180, (uint64_t (*)(void))type metadata accessor for BeaconEstimatedLocation);
          uint64_t v64 = v181;
          sub_100B30D0C(v62 + v191, v181, (uint64_t (*)(void))type metadata accessor for BeaconEstimatedLocation);
          uint64_t v66 = *(int *)(v196 + 40);
          uint64_t v65 = *(int *)(v196 + 44);
          unsigned int v67 = *(unsigned __int8 *)(v63 + v65);
          uint64_t v68 = v63 + v66;
          unsigned int v69 = *(unsigned __int8 *)(v64 + v65);
          uint64_t v70 = v64 + v66;
          uint64_t v71 = v182;
          *uint64_t v182 = v67;
          uint64_t v72 = v192;
          uint64_t v73 = v193;
          uint64_t v74 = v198;
          v198(&v71[*(int *)(v193 + 48)], v68, v192);
          uint64_t v75 = v183;
          *uint64_t v183 = v69;
          v74(&v75[*(int *)(v73 + 48)], v70, v72);
          if (v67 == v69)
          {
            sub_100B22DA4((unint64_t *)&qword_1016605E0, (void (*)(uint64_t))&type metadata accessor for Date);
            char v76 = dispatch thunk of static Comparable.> infix(_:_:)();
          }
          else
          {
            char v76 = v69 < v67;
          }
          sub_10001DAB4((uint64_t)v183, &qword_1016594C0);
          sub_10001DAB4((uint64_t)v182, &qword_1016594C0);
          sub_100B310AC(v181, (uint64_t (*)(void))type metadata accessor for BeaconEstimatedLocation);
          sub_100B310AC(v180, (uint64_t (*)(void))type metadata accessor for BeaconEstimatedLocation);
          char v77 = v199 ^ v76;
          uint64_t v37 = v178;
          Swift::Int v31 = v200;
          if (v77) {
            break;
          }
          Swift::Int v61 = v194 + 1;
          v62 += v201;
          if (v200 == v194 + 1)
          {
            Swift::Int v61 = v200;
            goto LABEL_28;
          }
        }
        a1 = v189;
        Swift::Int v61 = v194;
      }
      Swift::Int v40 = v179;
      if (v199)
      {
        if (v61 < v179) {
          goto LABEL_150;
        }
        if (v179 < v61)
        {
          uint64_t v78 = 0;
          uint64_t v79 = v201 * (v61 - 1);
          Swift::Int v80 = v61 * v201;
          Swift::Int v81 = v179;
          uint64_t v82 = v179 * v201;
          do
          {
            if (v81 != v61 + v78 - 1)
            {
              uint64_t v84 = v176;
              if (!v176) {
                goto LABEL_155;
              }
              unint64_t v85 = v176 + v82;
              uint64_t v199 = v176 + v79;
              sub_100B30DB4(v176 + v82, v177, (uint64_t (*)(void))type metadata accessor for BeaconEstimatedLocation);
              if (v82 < v79 || v85 >= v84 + v80)
              {
                uint64_t v83 = v199;
                swift_arrayInitWithTakeFrontToBack();
              }
              else
              {
                uint64_t v83 = v199;
                if (v82 != v79) {
                  swift_arrayInitWithTakeBackToFront();
                }
              }
              sub_100B30DB4(v177, v83, (uint64_t (*)(void))type metadata accessor for BeaconEstimatedLocation);
            }
            ++v81;
            --v78;
            v79 -= v201;
            v80 -= v201;
            v82 += v201;
          }
          while (v81 < v61 + v78);
          a1 = v189;
          Swift::Int v31 = v200;
          Swift::Int v40 = v179;
        }
      }
    }
    if (v61 < v31)
    {
      if (__OFSUB__(v61, v40)) {
        goto LABEL_148;
      }
      if (v61 - v40 < v171) {
        break;
      }
    }
LABEL_65:
    if (v61 < v40) {
      goto LABEL_143;
    }
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    Swift::Int v194 = v61;
    if ((isUniquelyReferenced_nonNull_native & 1) == 0) {
      uint64_t v37 = sub_100B729CC(0, *((void *)v37 + 2) + 1, 1, v37);
    }
    unint64_t v112 = *((void *)v37 + 2);
    unint64_t v111 = *((void *)v37 + 3);
    unint64_t v39 = v112 + 1;
    if (v112 >= v111 >> 1) {
      uint64_t v37 = sub_100B729CC((char *)(v111 > 1), v112 + 1, 1, v37);
    }
    *((void *)v37 + 2) = v39;
    uint64_t v113 = v37 + 32;
    uint64_t v114 = &v37[16 * v112 + 32];
    Swift::Int v115 = v194;
    *(void *)uint64_t v114 = v40;
    *((void *)v114 + 1) = v115;
    if (v112)
    {
      while (1)
      {
        unint64_t v116 = v39 - 1;
        if (v39 >= 4)
        {
          uint64_t v121 = &v113[16 * v39];
          uint64_t v122 = *((void *)v121 - 8);
          uint64_t v123 = *((void *)v121 - 7);
          BOOL v127 = __OFSUB__(v123, v122);
          uint64_t v124 = v123 - v122;
          if (v127) {
            goto LABEL_132;
          }
          uint64_t v126 = *((void *)v121 - 6);
          uint64_t v125 = *((void *)v121 - 5);
          BOOL v127 = __OFSUB__(v125, v126);
          uint64_t v119 = v125 - v126;
          char v120 = v127;
          if (v127) {
            goto LABEL_133;
          }
          unint64_t v128 = v39 - 2;
          unint64_t v129 = &v113[16 * v39 - 32];
          uint64_t v131 = *(void *)v129;
          uint64_t v130 = *((void *)v129 + 1);
          BOOL v127 = __OFSUB__(v130, v131);
          uint64_t v132 = v130 - v131;
          if (v127) {
            goto LABEL_135;
          }
          BOOL v127 = __OFADD__(v119, v132);
          uint64_t v133 = v119 + v132;
          if (v127) {
            goto LABEL_138;
          }
          if (v133 >= v124)
          {
            unint64_t v151 = &v113[16 * v116];
            uint64_t v153 = *(void *)v151;
            uint64_t v152 = *((void *)v151 + 1);
            BOOL v127 = __OFSUB__(v152, v153);
            uint64_t v154 = v152 - v153;
            if (v127) {
              goto LABEL_142;
            }
            BOOL v144 = v119 < v154;
            goto LABEL_102;
          }
        }
        else
        {
          if (v39 != 3)
          {
            uint64_t v145 = *((void *)v37 + 4);
            uint64_t v146 = *((void *)v37 + 5);
            BOOL v127 = __OFSUB__(v146, v145);
            uint64_t v138 = v146 - v145;
            char v139 = v127;
            goto LABEL_96;
          }
          uint64_t v118 = *((void *)v37 + 4);
          uint64_t v117 = *((void *)v37 + 5);
          BOOL v127 = __OFSUB__(v117, v118);
          uint64_t v119 = v117 - v118;
          char v120 = v127;
        }
        if (v120) {
          goto LABEL_134;
        }
        unint64_t v128 = v39 - 2;
        int64_t v134 = &v113[16 * v39 - 32];
        uint64_t v136 = *(void *)v134;
        uint64_t v135 = *((void *)v134 + 1);
        BOOL v137 = __OFSUB__(v135, v136);
        uint64_t v138 = v135 - v136;
        char v139 = v137;
        if (v137) {
          goto LABEL_137;
        }
        uint64_t v140 = &v113[16 * v116];
        uint64_t v142 = *(void *)v140;
        uint64_t v141 = *((void *)v140 + 1);
        BOOL v127 = __OFSUB__(v141, v142);
        uint64_t v143 = v141 - v142;
        if (v127) {
          goto LABEL_140;
        }
        if (__OFADD__(v138, v143)) {
          goto LABEL_141;
        }
        if (v138 + v143 >= v119)
        {
          BOOL v144 = v119 < v143;
LABEL_102:
          if (v144) {
            unint64_t v116 = v128;
          }
          goto LABEL_104;
        }
LABEL_96:
        if (v139) {
          goto LABEL_136;
        }
        os_log_type_t v147 = &v113[16 * v116];
        uint64_t v149 = *(void *)v147;
        uint64_t v148 = *((void *)v147 + 1);
        BOOL v127 = __OFSUB__(v148, v149);
        uint64_t v150 = v148 - v149;
        if (v127) {
          goto LABEL_139;
        }
        if (v150 < v138) {
          goto LABEL_14;
        }
LABEL_104:
        unint64_t v155 = v116 - 1;
        if (v116 - 1 >= v39)
        {
          __break(1u);
LABEL_129:
          __break(1u);
LABEL_130:
          __break(1u);
LABEL_131:
          __break(1u);
LABEL_132:
          __break(1u);
LABEL_133:
          __break(1u);
LABEL_134:
          __break(1u);
LABEL_135:
          __break(1u);
LABEL_136:
          __break(1u);
LABEL_137:
          __break(1u);
LABEL_138:
          __break(1u);
LABEL_139:
          __break(1u);
LABEL_140:
          __break(1u);
LABEL_141:
          __break(1u);
LABEL_142:
          __break(1u);
LABEL_143:
          __break(1u);
LABEL_144:
          __break(1u);
LABEL_145:
          __break(1u);
LABEL_146:
          __break(1u);
LABEL_147:
          __break(1u);
LABEL_148:
          __break(1u);
LABEL_149:
          __break(1u);
LABEL_150:
          __break(1u);
LABEL_151:
          __break(1u);
          goto LABEL_152;
        }
        if (!*a1) {
          goto LABEL_154;
        }
        uint64_t v156 = &v113[16 * v155];
        uint64_t v157 = *(void *)v156;
        unint64_t v158 = &v113[16 * v116];
        uint64_t v159 = *((void *)v158 + 1);
        uint64_t v160 = v186;
        sub_100B27040(*a1 + *(void *)(v185 + 72) * *(void *)v156, *a1 + *(void *)(v185 + 72) * *(void *)v158, *a1 + *(void *)(v185 + 72) * v159, v184);
        uint64_t v186 = v160;
        if (v160) {
          goto LABEL_125;
        }
        if (v159 < v157) {
          goto LABEL_129;
        }
        if (v116 > *((void *)v37 + 2)) {
          goto LABEL_130;
        }
        *(void *)uint64_t v156 = v157;
        *(void *)&v113[16 * v155 + 8] = v159;
        unint64_t v161 = *((void *)v37 + 2);
        if (v116 >= v161) {
          goto LABEL_131;
        }
        unint64_t v39 = v161 - 1;
        memmove(&v113[16 * v116], v158 + 16, 16 * (v161 - 1 - v116));
        *((void *)v37 + 2) = v161 - 1;
        if (v161 <= 2) {
          goto LABEL_14;
        }
      }
    }
    unint64_t v39 = 1;
LABEL_14:
    Swift::Int v31 = a1[1];
    Swift::Int v38 = v194;
    if (v194 >= v31) {
      goto LABEL_113;
    }
  }
  if (__OFADD__(v40, v171)) {
    goto LABEL_151;
  }
  if (v40 + v171 >= v31) {
    Swift::Int v86 = v31;
  }
  else {
    Swift::Int v86 = v40 + v171;
  }
  if (v86 >= v40)
  {
    if (v61 != v86)
    {
      Swift::Int v87 = *(void *)(v185 + 72);
      uint64_t v88 = v87 * (v61 - 1);
      Swift::Int v190 = v87;
      Swift::Int v89 = v61 * v87;
      uint64_t v90 = (uint64_t)v187;
      uint64_t v91 = (uint64_t)v188;
      uint64_t v176 = v86;
      do
      {
        uint64_t v93 = 0;
        Swift::Int v94 = v179;
        Swift::Int v194 = v61;
        uint64_t v191 = v89;
        uint64_t v192 = v88;
        while (1)
        {
          Swift::Int v200 = v94;
          uint64_t v95 = *a1;
          uint64_t v199 = v89 + v93;
          sub_100B30D0C(v89 + v93 + v95, v90, (uint64_t (*)(void))type metadata accessor for BeaconEstimatedLocation);
          uint64_t v198 = (void (*)(unsigned char *, uint64_t, uint64_t))(v88 + v93);
          sub_100B30D0C(v88 + v93 + v95, v91, (uint64_t (*)(void))type metadata accessor for BeaconEstimatedLocation);
          uint64_t v97 = *(int *)(v196 + 40);
          uint64_t v96 = *(int *)(v196 + 44);
          unsigned int v98 = *(unsigned __int8 *)(v90 + v96);
          uint64_t v99 = v90 + v97;
          unsigned int v100 = *(unsigned __int8 *)(v91 + v96);
          uint64_t v201 = v91 + v97;
          unint64_t v101 = v202;
          unsigned char *v202 = v98;
          uint64_t v102 = v193;
          uint64_t v103 = &v101[*(int *)(v193 + 48)];
          uint64_t v104 = type metadata accessor for Date();
          uint64_t v105 = *(void (**)(unsigned char *, uint64_t, uint64_t))(*(void *)(v104 - 8) + 16);
          uint64_t v195 = v103;
          v105(v103, v99, v104);
          uint64_t v106 = v203;
          *unint64_t v203 = v100;
          v105(&v106[*(int *)(v102 + 48)], v201, v104);
          if (v98 == v100)
          {
            sub_100B22DA4((unint64_t *)&qword_1016605E0, (void (*)(uint64_t))&type metadata accessor for Date);
            char v107 = dispatch thunk of static Comparable.> infix(_:_:)();
          }
          else
          {
            char v107 = v100 < v98;
          }
          sub_10001DAB4((uint64_t)v203, &qword_1016594C0);
          sub_10001DAB4((uint64_t)v202, &qword_1016594C0);
          uint64_t v91 = (uint64_t)v188;
          sub_100B310AC((uint64_t)v188, (uint64_t (*)(void))type metadata accessor for BeaconEstimatedLocation);
          uint64_t v90 = (uint64_t)v187;
          sub_100B310AC((uint64_t)v187, (uint64_t (*)(void))type metadata accessor for BeaconEstimatedLocation);
          a1 = v189;
          Swift::Int v89 = v191;
          uint64_t v88 = v192;
          if ((v107 & 1) == 0) {
            break;
          }
          uint64_t v108 = *v189;
          if (!*v189) {
            goto LABEL_153;
          }
          uint64_t v109 = v108 + v192 + v93;
          sub_100B30DB4(v108 + v191 + v93, v197, (uint64_t (*)(void))type metadata accessor for BeaconEstimatedLocation);
          swift_arrayInitWithTakeFrontToBack();
          sub_100B30DB4(v197, v109, (uint64_t (*)(void))type metadata accessor for BeaconEstimatedLocation);
          v93 -= v190;
          Swift::Int v94 = v200 + 1;
          Swift::Int v92 = v194;
          if (v194 == v200 + 1) {
            goto LABEL_55;
          }
        }
        Swift::Int v92 = v194;
LABEL_55:
        Swift::Int v61 = v92 + 1;
        v88 += v190;
        v89 += v190;
      }
      while (v61 != v176);
      Swift::Int v61 = v176;
      uint64_t v37 = v178;
      Swift::Int v40 = v179;
    }
    goto LABEL_65;
  }
LABEL_152:
  __break(1u);
LABEL_153:
  __break(1u);
LABEL_154:
  __break(1u);
LABEL_155:
  __break(1u);
LABEL_156:
  __break(1u);
LABEL_157:
  Swift::Int result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

Swift::Int sub_100B24E94(void *a1)
{
  uint64_t v2 = v1;
  uint64_t v141 = type metadata accessor for OwnedBeaconRecord();
  uint64_t v134 = *(void *)(v141 - 8);
  uint64_t v4 = __chkstk_darwin(v141);
  uint64_t v131 = (uint64_t)&v125 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = __chkstk_darwin(v4);
  uint64_t v142 = (uint64_t)&v125 - v7;
  uint64_t v8 = __chkstk_darwin(v6);
  uint64_t v138 = (uint64_t)&v125 - v9;
  __chkstk_darwin(v8);
  uint64_t v137 = (uint64_t)&v125 - v10;
  Swift::Int v11 = a1[1];
  Swift::Int result = _minimumMergeRunLength(_:)(v11);
  if (result >= v11)
  {
    if (v11 < 0) {
      goto LABEL_142;
    }
    if (v11) {
      return sub_100B26AA0(0, v11, 1, a1);
    }
    return result;
  }
  if (v11 >= 0) {
    uint64_t v13 = v11;
  }
  else {
    uint64_t v13 = v11 + 1;
  }
  if (v11 < -1) {
    goto LABEL_150;
  }
  Swift::Int v127 = result;
  if (v11 < 2)
  {
    uint64_t v17 = _swiftEmptyArrayStorage;
    unint64_t v133 = (unint64_t)_swiftEmptyArrayStorage
         + ((*(unsigned __int8 *)(v134 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v134 + 80));
    if (v11 != 1)
    {
      unint64_t v20 = _swiftEmptyArrayStorage[2];
      uint64_t v19 = (char *)_swiftEmptyArrayStorage;
LABEL_107:
      uint64_t v126 = v17;
      if (v20 >= 2)
      {
        Swift::Int v117 = *a1;
        do
        {
          unint64_t v118 = v20 - 2;
          if (v20 < 2) {
            goto LABEL_137;
          }
          if (!v117) {
            goto LABEL_149;
          }
          uint64_t v119 = v19;
          char v120 = v19 + 32;
          uint64_t v121 = *(void *)&v19[16 * v118 + 32];
          uint64_t v122 = *(void *)&v19[16 * v20 + 24];
          sub_100B2789C(v117 + *(void *)(v134 + 72) * v121, v117 + *(void *)(v134 + 72) * *(void *)&v120[16 * v20 - 16], v117 + *(void *)(v134 + 72) * v122, v133);
          if (v2) {
            break;
          }
          if (v122 < v121) {
            goto LABEL_138;
          }
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
            uint64_t v119 = sub_100B73584((uint64_t)v119);
          }
          if (v118 >= *((void *)v119 + 2)) {
            goto LABEL_139;
          }
          uint64_t v123 = &v119[16 * v118 + 32];
          *(void *)uint64_t v123 = v121;
          *((void *)v123 + 1) = v122;
          unint64_t v124 = *((void *)v119 + 2);
          if (v20 > v124) {
            goto LABEL_140;
          }
          uint64_t v19 = v119;
          memmove(&v119[16 * v20 + 16], &v119[16 * v20 + 32], 16 * (v124 - v20));
          *((void *)v119 + 2) = v124 - 1;
          unint64_t v20 = v124 - 1;
        }
        while (v124 > 2);
      }
LABEL_118:
      swift_bridgeObjectRelease();
      v126[2] = 0;
      return swift_bridgeObjectRelease();
    }
    uint64_t v126 = _swiftEmptyArrayStorage;
  }
  else
  {
    uint64_t v14 = v13 >> 1;
    uint64_t v15 = static Array._allocateBufferUninitialized(minimumCapacity:)();
    *(void *)(v15 + 16) = v14;
    uint64_t v16 = *(unsigned __int8 *)(v134 + 80);
    uint64_t v126 = (void *)v15;
    unint64_t v133 = v15 + ((v16 + 32) & ~v16);
  }
  Swift::Int v18 = 0;
  uint64_t v19 = (char *)_swiftEmptyArrayStorage;
  uint64_t v140 = a1;
  while (1)
  {
    Swift::Int v21 = v18;
    Swift::Int v22 = v18 + 1;
    Swift::Int v132 = v18;
    if (v18 + 1 >= v11)
    {
      Swift::Int v39 = v18 + 1;
      goto LABEL_59;
    }
    uint64_t v129 = v2;
    Swift::Int v23 = *(void *)(v134 + 72);
    uint64_t v24 = *a1 + v23 * v22;
    Swift::Int v136 = *a1;
    Swift::Int v25 = v136;
    uint64_t v26 = v137;
    sub_100B30D0C(v24, v137, (uint64_t (*)(void))type metadata accessor for OwnedBeaconRecord);
    uint64_t v27 = v25 + v23 * v21;
    uint64_t v28 = v138;
    sub_100B30D0C(v27, v138, (uint64_t (*)(void))type metadata accessor for OwnedBeaconRecord);
    LODWORD(v139) = static Date.< infix(_:_:)();
    sub_100B310AC(v28, (uint64_t (*)(void))type metadata accessor for OwnedBeaconRecord);
    uint64_t v29 = v26;
    Swift::Int v30 = v136;
    sub_100B310AC(v29, (uint64_t (*)(void))type metadata accessor for OwnedBeaconRecord);
    Swift::Int v143 = v23;
    if (v21 + 2 >= v11)
    {
      Swift::Int v33 = v21 + 2;
    }
    else
    {
      Swift::Int v31 = v23;
      unint64_t v128 = v19;
      uint64_t v32 = v23 * v22;
      Swift::Int v33 = v21 + 2;
      uint64_t v34 = v31 * (v21 + 2);
      while (1)
      {
        Swift::Int v35 = v11;
        uint64_t v36 = v137;
        sub_100B30D0C(v30 + v34, v137, (uint64_t (*)(void))type metadata accessor for OwnedBeaconRecord);
        uint64_t v37 = v138;
        sub_100B30D0C(v30 + v32, v138, (uint64_t (*)(void))type metadata accessor for OwnedBeaconRecord);
        int v38 = static Date.< infix(_:_:)();
        sub_100B310AC(v37, (uint64_t (*)(void))type metadata accessor for OwnedBeaconRecord);
        sub_100B310AC(v36, (uint64_t (*)(void))type metadata accessor for OwnedBeaconRecord);
        if ((v139 ^ v38)) {
          break;
        }
        v30 += v143;
        ++v33;
        Swift::Int v11 = v35;
        if (v35 == v33)
        {
          Swift::Int v33 = v35;
          uint64_t v19 = v128;
          Swift::Int v21 = v132;
          goto LABEL_25;
        }
      }
      uint64_t v19 = v128;
      Swift::Int v21 = v132;
      Swift::Int v11 = v35;
    }
LABEL_25:
    a1 = v140;
    if ((v139 & 1) == 0)
    {
      Swift::Int v39 = v33;
      goto LABEL_39;
    }
    if (v33 < v21) {
      goto LABEL_143;
    }
    Swift::Int v39 = v33;
    if (v21 < v33) {
      break;
    }
LABEL_39:
    uint64_t v2 = v129;
    if (v39 < v11) {
      goto LABEL_42;
    }
LABEL_59:
    if (v39 < v21) {
      goto LABEL_136;
    }
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    Swift::Int v139 = v39;
    if ((isUniquelyReferenced_nonNull_native & 1) == 0) {
      uint64_t v19 = sub_100B729CC(0, *((void *)v19 + 2) + 1, 1, v19);
    }
    unint64_t v66 = *((void *)v19 + 2);
    unint64_t v65 = *((void *)v19 + 3);
    unint64_t v20 = v66 + 1;
    if (v66 >= v65 >> 1) {
      uint64_t v19 = sub_100B729CC((char *)(v65 > 1), v66 + 1, 1, v19);
    }
    *((void *)v19 + 2) = v20;
    unsigned int v67 = v19 + 32;
    uint64_t v68 = &v19[16 * v66 + 32];
    Swift::Int v69 = v139;
    *(void *)uint64_t v68 = v21;
    *((void *)v68 + 1) = v69;
    if (v66)
    {
      while (1)
      {
        unint64_t v70 = v20 - 1;
        if (v20 >= 4)
        {
          uint64_t v75 = &v67[16 * v20];
          uint64_t v76 = *((void *)v75 - 8);
          uint64_t v77 = *((void *)v75 - 7);
          BOOL v81 = __OFSUB__(v77, v76);
          uint64_t v78 = v77 - v76;
          if (v81) {
            goto LABEL_125;
          }
          uint64_t v80 = *((void *)v75 - 6);
          uint64_t v79 = *((void *)v75 - 5);
          BOOL v81 = __OFSUB__(v79, v80);
          uint64_t v73 = v79 - v80;
          char v74 = v81;
          if (v81) {
            goto LABEL_126;
          }
          unint64_t v82 = v20 - 2;
          uint64_t v83 = &v67[16 * v20 - 32];
          uint64_t v85 = *(void *)v83;
          uint64_t v84 = *((void *)v83 + 1);
          BOOL v81 = __OFSUB__(v84, v85);
          uint64_t v86 = v84 - v85;
          if (v81) {
            goto LABEL_128;
          }
          BOOL v81 = __OFADD__(v73, v86);
          uint64_t v87 = v73 + v86;
          if (v81) {
            goto LABEL_131;
          }
          if (v87 >= v78)
          {
            uint64_t v105 = &v67[16 * v70];
            uint64_t v107 = *(void *)v105;
            uint64_t v106 = *((void *)v105 + 1);
            BOOL v81 = __OFSUB__(v106, v107);
            uint64_t v108 = v106 - v107;
            if (v81) {
              goto LABEL_135;
            }
            BOOL v98 = v73 < v108;
            goto LABEL_96;
          }
        }
        else
        {
          if (v20 != 3)
          {
            uint64_t v99 = *((void *)v19 + 4);
            uint64_t v100 = *((void *)v19 + 5);
            BOOL v81 = __OFSUB__(v100, v99);
            uint64_t v92 = v100 - v99;
            char v93 = v81;
            goto LABEL_90;
          }
          uint64_t v72 = *((void *)v19 + 4);
          uint64_t v71 = *((void *)v19 + 5);
          BOOL v81 = __OFSUB__(v71, v72);
          uint64_t v73 = v71 - v72;
          char v74 = v81;
        }
        if (v74) {
          goto LABEL_127;
        }
        unint64_t v82 = v20 - 2;
        uint64_t v88 = &v67[16 * v20 - 32];
        uint64_t v90 = *(void *)v88;
        uint64_t v89 = *((void *)v88 + 1);
        BOOL v91 = __OFSUB__(v89, v90);
        uint64_t v92 = v89 - v90;
        char v93 = v91;
        if (v91) {
          goto LABEL_130;
        }
        Swift::Int v94 = &v67[16 * v70];
        uint64_t v96 = *(void *)v94;
        uint64_t v95 = *((void *)v94 + 1);
        BOOL v81 = __OFSUB__(v95, v96);
        uint64_t v97 = v95 - v96;
        if (v81) {
          goto LABEL_133;
        }
        if (__OFADD__(v92, v97)) {
          goto LABEL_134;
        }
        if (v92 + v97 >= v73)
        {
          BOOL v98 = v73 < v97;
LABEL_96:
          if (v98) {
            unint64_t v70 = v82;
          }
          goto LABEL_98;
        }
LABEL_90:
        if (v93) {
          goto LABEL_129;
        }
        unint64_t v101 = &v67[16 * v70];
        uint64_t v103 = *(void *)v101;
        uint64_t v102 = *((void *)v101 + 1);
        BOOL v81 = __OFSUB__(v102, v103);
        uint64_t v104 = v102 - v103;
        if (v81) {
          goto LABEL_132;
        }
        if (v104 < v92) {
          goto LABEL_15;
        }
LABEL_98:
        unint64_t v109 = v70 - 1;
        if (v70 - 1 >= v20)
        {
          __break(1u);
LABEL_122:
          __break(1u);
LABEL_123:
          __break(1u);
LABEL_124:
          __break(1u);
LABEL_125:
          __break(1u);
LABEL_126:
          __break(1u);
LABEL_127:
          __break(1u);
LABEL_128:
          __break(1u);
LABEL_129:
          __break(1u);
LABEL_130:
          __break(1u);
LABEL_131:
          __break(1u);
LABEL_132:
          __break(1u);
LABEL_133:
          __break(1u);
LABEL_134:
          __break(1u);
LABEL_135:
          __break(1u);
LABEL_136:
          __break(1u);
LABEL_137:
          __break(1u);
LABEL_138:
          __break(1u);
LABEL_139:
          __break(1u);
LABEL_140:
          __break(1u);
LABEL_141:
          __break(1u);
LABEL_142:
          __break(1u);
LABEL_143:
          __break(1u);
LABEL_144:
          __break(1u);
          goto LABEL_145;
        }
        Swift::Int v110 = *a1;
        if (!*a1) {
          goto LABEL_147;
        }
        unint64_t v111 = v19;
        unint64_t v112 = &v67[16 * v109];
        uint64_t v113 = *(void *)v112;
        uint64_t v114 = &v67[16 * v70];
        uint64_t v115 = *((void *)v114 + 1);
        sub_100B2789C(v110 + *(void *)(v134 + 72) * *(void *)v112, v110 + *(void *)(v134 + 72) * *(void *)v114, v110 + *(void *)(v134 + 72) * v115, v133);
        if (v2) {
          goto LABEL_118;
        }
        if (v115 < v113) {
          goto LABEL_122;
        }
        if (v70 > *((void *)v111 + 2)) {
          goto LABEL_123;
        }
        *(void *)unint64_t v112 = v113;
        *(void *)&v67[16 * v109 + 8] = v115;
        unint64_t v116 = *((void *)v111 + 2);
        if (v70 >= v116) {
          goto LABEL_124;
        }
        uint64_t v19 = v111;
        unint64_t v20 = v116 - 1;
        memmove(&v67[16 * v70], v114 + 16, 16 * (v116 - 1 - v70));
        *((void *)v111 + 2) = v116 - 1;
        a1 = v140;
        if (v116 <= 2) {
          goto LABEL_15;
        }
      }
    }
    unint64_t v20 = 1;
LABEL_15:
    Swift::Int v11 = a1[1];
    Swift::Int v18 = v139;
    if (v139 >= v11)
    {
      uint64_t v17 = v126;
      goto LABEL_107;
    }
  }
  Swift::Int v139 = v11;
  unint64_t v128 = v19;
  uint64_t v40 = 0;
  Swift::Int v41 = v143;
  uint64_t v42 = v143 * (v33 - 1);
  Swift::Int v43 = v33 * v143;
  Swift::Int v44 = v21;
  uint64_t v45 = v21 * v143;
  do
  {
    if (v44 != v39 + v40 - 1)
    {
      Swift::Int v46 = v136;
      if (!v136) {
        goto LABEL_148;
      }
      unint64_t v47 = v136 + v45;
      uint64_t v48 = v136 + v42;
      sub_100B30DB4(v136 + v45, v131, (uint64_t (*)(void))type metadata accessor for OwnedBeaconRecord);
      if (v45 < v42 || v47 >= v46 + v43)
      {
        swift_arrayInitWithTakeFrontToBack();
        Swift::Int v41 = v143;
      }
      else
      {
        Swift::Int v41 = v143;
        if (v45 != v42) {
          swift_arrayInitWithTakeBackToFront();
        }
      }
      sub_100B30DB4(v131, v48, (uint64_t (*)(void))type metadata accessor for OwnedBeaconRecord);
      a1 = v140;
      Swift::Int v39 = v33;
    }
    ++v44;
    --v40;
    v42 -= v41;
    v43 -= v41;
    v45 += v41;
  }
  while (v44 < v39 + v40);
  uint64_t v19 = v128;
  uint64_t v2 = v129;
  Swift::Int v21 = v132;
  Swift::Int v11 = v139;
  if (v39 >= v139) {
    goto LABEL_59;
  }
LABEL_42:
  if (__OFSUB__(v39, v21)) {
    goto LABEL_141;
  }
  if (v39 - v21 >= v127) {
    goto LABEL_59;
  }
  if (__OFADD__(v21, v127)) {
    goto LABEL_144;
  }
  if (v21 + v127 >= v11) {
    Swift::Int v49 = v11;
  }
  else {
    Swift::Int v49 = v21 + v127;
  }
  if (v49 >= v21)
  {
    if (v39 != v49)
    {
      unint64_t v128 = v19;
      uint64_t v129 = v2;
      uint64_t v50 = *(void *)(v134 + 72);
      uint64_t v51 = v50 * (v39 - 1);
      uint64_t v135 = v50;
      Swift::Int v52 = v39 * v50;
      Swift::Int v130 = v49;
      do
      {
        uint64_t v54 = 0;
        Swift::Int v139 = v39;
        Swift::Int v136 = v52;
        while (1)
        {
          Swift::Int v143 = v21;
          Swift::Int v55 = *a1;
          uint64_t v56 = v137;
          sub_100B30D0C(v52 + v54 + *a1, v137, (uint64_t (*)(void))type metadata accessor for OwnedBeaconRecord);
          uint64_t v57 = v51;
          uint64_t v58 = v51 + v54 + v55;
          uint64_t v59 = a1;
          uint64_t v60 = v138;
          sub_100B30D0C(v58, v138, (uint64_t (*)(void))type metadata accessor for OwnedBeaconRecord);
          char v61 = static Date.< infix(_:_:)();
          sub_100B310AC(v60, (uint64_t (*)(void))type metadata accessor for OwnedBeaconRecord);
          sub_100B310AC(v56, (uint64_t (*)(void))type metadata accessor for OwnedBeaconRecord);
          if ((v61 & 1) == 0) {
            break;
          }
          uint64_t v62 = *v59;
          if (!*v59) {
            goto LABEL_146;
          }
          Swift::Int v52 = v136;
          uint64_t v51 = v57;
          uint64_t v63 = v62 + v57 + v54;
          sub_100B30DB4(v62 + v136 + v54, v142, (uint64_t (*)(void))type metadata accessor for OwnedBeaconRecord);
          swift_arrayInitWithTakeFrontToBack();
          sub_100B30DB4(v142, v63, (uint64_t (*)(void))type metadata accessor for OwnedBeaconRecord);
          v54 -= v135;
          Swift::Int v21 = v143 + 1;
          Swift::Int v53 = v139;
          a1 = v140;
          if (v139 == v143 + 1) {
            goto LABEL_52;
          }
        }
        Swift::Int v53 = v139;
        a1 = v59;
        uint64_t v51 = v57;
        Swift::Int v52 = v136;
LABEL_52:
        Swift::Int v39 = v53 + 1;
        v51 += v135;
        v52 += v135;
        Swift::Int v21 = v132;
      }
      while (v39 != v130);
      Swift::Int v39 = v130;
      uint64_t v19 = v128;
      uint64_t v2 = v129;
    }
    goto LABEL_59;
  }
LABEL_145:
  __break(1u);
LABEL_146:
  __break(1u);
LABEL_147:
  __break(1u);
LABEL_148:
  __break(1u);
LABEL_149:
  __break(1u);
LABEL_150:
  Swift::Int result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}