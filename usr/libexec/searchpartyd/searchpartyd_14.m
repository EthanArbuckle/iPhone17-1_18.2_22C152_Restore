uint64_t sub_1009C2F1C()
{
  void *v0;
  void (*v1)(uint64_t, uint64_t);
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;

  v1 = (void (*)(uint64_t, uint64_t))v0[314];
  v2 = v0[197];
  v3 = v0[196];
  v4 = v0[192];
  v5 = v0[125];
  swift_release();
  swift_errorRelease();
  v1(v3, v4);
  v1(v2, v4);
  return _swift_task_switch(sub_1009C2FD8, v5, 0);
}

uint64_t sub_1009C2FD8()
{
  uint64_t v1 = *(void *)(v0 + 1256);
  swift_bridgeObjectRetain();
  sub_1009C71C8(v1, type metadata accessor for SharedBeaconRecord);
  uint64_t v2 = *(void *)(v0 + 1224);
  uint64_t v3 = *(void *)(v0 + 976);
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v0 + 504);
  sub_10001D010(v3, v0 + 584);
  char v4 = swift_dynamicCast();
  v5 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v2 + 56);
  if ((v4 & 1) == 0)
  {
    uint64_t v12 = *(void *)(v0 + 1200);
    v5(v12, 1, 1, *(void *)(v0 + 1216));
    v13 = (uint64_t *)&unk_101653D50;
    uint64_t v14 = v12;
LABEL_5:
    sub_10001DAB4(v14, v13);
LABEL_8:
    v16 = *(void **)(v0 + 976);
    uint64_t v17 = v16[3];
    uint64_t v18 = v16[4];
    sub_10001CD44(v16, v17);
    (*(void (**)(uint64_t))(*(void *)(*(void *)(v18 + 8) + 8) + 32))(v17);
    goto LABEL_9;
  }
  uint64_t v6 = *(void *)(v0 + 1248);
  uint64_t v7 = *(void *)(v0 + 1240);
  uint64_t v8 = *(void *)(v0 + 1216);
  uint64_t v9 = *(void *)(v0 + 1200);
  v5(v9, 0, 1, v8);
  sub_1009C715C(v9, v6, type metadata accessor for SharedBeaconRecord);
  uint64_t v10 = *(void *)(v6 + *(int *)(v8 + 44));
  sub_1009C70F0(v6, v7, type metadata accessor for SharedBeaconRecord);
  uint64_t v11 = *(void *)(v0 + 1240);
  if (v10 != -1)
  {
    sub_1009C71C8(v11, type metadata accessor for SharedBeaconRecord);
LABEL_7:
    sub_1009C71C8(*(void *)(v0 + 1248), type metadata accessor for SharedBeaconRecord);
    goto LABEL_8;
  }
  uint64_t v15 = *(void *)(v11 + *(int *)(*(void *)(v0 + 1216) + 48));
  sub_1009C71C8(v11, type metadata accessor for SharedBeaconRecord);
  if (v15 != -1) {
    goto LABEL_7;
  }
  uint64_t v65 = *(void *)(v0 + 1248);
  uint64_t v66 = *(void *)(v0 + 1216);
  int v67 = *(unsigned __int8 *)(v65 + *(int *)(v66 + 64));
  sub_1009C70F0(v65, *(void *)(v0 + 1232), type metadata accessor for SharedBeaconRecord);
  uint64_t v68 = *(void *)(v0 + 1232);
  if (v67 == 4)
  {
    sub_1009C71C8(v68, type metadata accessor for SharedBeaconRecord);
  }
  else
  {
    int v69 = *(unsigned __int8 *)(v68 + *(int *)(v66 + 64));
    sub_1009C71C8(v68, type metadata accessor for SharedBeaconRecord);
    if (v69 != 1) {
      goto LABEL_7;
    }
  }
  uint64_t v70 = *(void *)(v0 + 1032);
  sub_10001D074(*(void *)(v0 + 1248) + *(int *)(*(void *)(v0 + 1216) + 80), v70, (uint64_t *)&unk_101653D30);
  uint64_t v71 = type metadata accessor for SharedBeaconRecord.PropertyListContent(0);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v71 - 8) + 48))(v70, 1, v71) == 1)
  {
    uint64_t v72 = *(void *)(v0 + 1544);
    uint64_t v73 = *(void *)(v0 + 1536);
    uint64_t v74 = *(void *)(v0 + 1328);
    sub_10001DAB4(*(void *)(v0 + 1032), (uint64_t *)&unk_101653D30);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v72 + 56))(v74, 1, 1, v73);
  }
  else
  {
    uint64_t v75 = *(void *)(v0 + 1032);
    sub_10001D074(v75 + *(int *)(v71 + 20), *(void *)(v0 + 1328), &qword_101638CF0);
    sub_1009C71C8(v75, type metadata accessor for SharedBeaconRecord.PropertyListContent);
  }
  uint64_t v76 = *(void *)(v0 + 1544);
  uint64_t v77 = *(void *)(v0 + 1536);
  uint64_t v78 = *(void *)(v0 + 1328);
  sub_1009C71C8(*(void *)(v0 + 1248), type metadata accessor for SharedBeaconRecord);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v76 + 48))(v78, 1, v77) == 1)
  {
    uint64_t v14 = *(void *)(v0 + 1328);
    v13 = &qword_101638CF0;
    goto LABEL_5;
  }
  (*(void (**)(void, void, void))(v0 + 2480))(*(void *)(v0 + 1560), *(void *)(v0 + 1328), *(void *)(v0 + 1536));
LABEL_9:
  uint64_t v19 = *(void *)(v0 + 1544);
  uint64_t v20 = *(void *)(v0 + 1536);
  uint64_t v21 = *(void *)(v0 + 1320);
  v22 = *(void **)(v0 + 976);
  id v23 = [objc_allocWithZone((Class)SPInternalSimpleBeacon) init];
  Class isa = UUID._bridgeToObjectiveC()().super.isa;
  [v23 setIdentifier:isa];

  uint64_t v25 = v22[3];
  uint64_t v26 = v22[4];
  sub_10001CD44(v22, v25);
  v27 = (void *)(*(uint64_t (**)(uint64_t, uint64_t))(v26 + 176))(v25, v26);
  [v23 setType:v27];

  uint64_t v28 = v22[3];
  uint64_t v29 = v22[4];
  sub_10001CD44(v22, v28);
  (*(void (**)(uint64_t, uint64_t))(v29 + 192))(v28, v29);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v19 + 48))(v21, 1, v20) == 1)
  {
    Class v30 = 0;
  }
  else
  {
    v31 = *(void (**)(uint64_t, uint64_t))(v0 + 2512);
    uint64_t v32 = *(void *)(v0 + 1536);
    uint64_t v33 = *(void *)(v0 + 1320);
    Class v30 = UUID._bridgeToObjectiveC()().super.isa;
    v31(v33, v32);
  }
  double v34 = *(double *)(v0 + 2544);
  uint64_t v35 = *(void *)(v0 + 2392);
  uint64_t v36 = *(void *)(v0 + 2384);
  uint64_t v37 = *(void *)(v0 + 2168);
  BOOL v38 = *(unsigned __int8 *)(v0 + 2694) != 5;
  [v23 setGroupIdentifier:v30];

  [v23 setPartIdentifier:255];
  [v23 setConnectionAllowed:v38];
  [v23 setTxPower:v34];
  Class v39 = UUID._bridgeToObjectiveC()().super.isa;
  [v23 setProductUUID:v39];

  [v23 setVendorId:v35];
  [v23 setProductId:v36];
  if (v37)
  {
    NSString v40 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
  }
  else
  {
    NSString v40 = 0;
  }
  uint64_t v41 = *(void *)(v0 + 2152);
  [v23 setModelName:v40];

  if (v41)
  {
    NSString v42 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
  }
  else
  {
    NSString v42 = 0;
  }
  [v23 setManufacturerName:v42];

  v43 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v0 + 2528);
  uint64_t v44 = *(void *)(v0 + 2040);
  uint64_t v45 = *(void *)(v0 + 1152);
  uint64_t v46 = *(void *)(v0 + 1008);
  [v23 setSerialNumber:0];
  [v23 setOwner:v44];
  id v47 = 0;
  if (!v43(v45, 1, v46))
  {
    uint64_t v48 = *(void *)(v0 + 1024);
    sub_1009C70F0(*(void *)(v0 + 1152), v48, (uint64_t (*)(void))type metadata accessor for BeaconProductInfoRecord);
    id v47 = sub_100853D90();
    sub_1009C71C8(v48, (uint64_t (*)(void))type metadata accessor for BeaconProductInfoRecord);
  }
  uint64_t v49 = *(unsigned __int8 *)(v0 + 2689);
  uint64_t v50 = *(unsigned __int8 *)(v0 + 2688);
  uint64_t v51 = *(void *)(v0 + 2032);
  [v23 setAccessoryProductInfo:v47];

  [v23 setIsZeus:v49];
  [v23 setIsAppleAudioAccessory:v50];
  if (v51)
  {
    NSString v52 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
  }
  else
  {
    NSString v52 = 0;
  }
  uint64_t v53 = *(void *)(v0 + 2072);
  [v23 setDiscoveryId:v52];

  NSString v54 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  [v23 setSystemVersion:v54];

  if (v53)
  {
    NSString v55 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
  }
  else
  {
    NSString v55 = 0;
  }
  v86 = *(void (**)(uint64_t, uint64_t))(v0 + 2512);
  uint64_t v56 = *(void *)(v0 + 2440);
  unsigned int v81 = *(unsigned __int8 *)(v0 + 2693);
  uint64_t v57 = *(void *)(v0 + 2360);
  v58 = *(void **)(v0 + 2352);
  v59 = *(void **)(v0 + 2056);
  unsigned int v79 = *(unsigned __int8 *)(v0 + 2690);
  v60 = *(void **)(v0 + 2048);
  v84 = *(void **)(v0 + 2040);
  uint64_t v85 = *(void *)(v0 + 1584);
  uint64_t v82 = *(void *)(v0 + 1536);
  uint64_t v83 = *(void *)(v0 + 1560);
  uint64_t v80 = *(void *)(v0 + 1152);
  [v23 setName:v55];

  [v23 setBatteryLevel:v56];
  [v23 setConnectableDeviceCount:v57];
  [v23 setKeySyncRecord:v58];
  [v23 setLostModeInfo:v60];
  [v23 setRole:v59];
  sub_10001D4B0(0, (unint64_t *)&unk_101653D70);
  sub_1009C5E18();
  Class v61 = Set._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  [v23 setSafeLocations:v61];

  [v23 setConnected:v79];
  [v23 setCanBeLeashedByHost:v81];
  type metadata accessor for SPBeaconTaskName(0);
  sub_10001D4B0(0, &qword_101653D80);
  sub_1009C5B60(&qword_1016387E0, 255, type metadata accessor for SPBeaconTaskName);
  Class v62 = Dictionary._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  [v23 setTaskInformation:v62];

  swift_release();
  v86(v83, v82);
  v86(v85, v82);

  sub_10001DAB4(v80, &qword_10163BBB0);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  v63 = *(uint64_t (**)(id))(v0 + 8);
  return v63(v23);
}

uint64_t sub_1009C3DD0()
{
  uint64_t v1 = *(void *)(v0 + 1088);
  (*(void (**)(uint64_t, uint64_t, uint64_t, void))(*(void *)(v0 + 1104) + 56))(v1, 1, 1, *(void *)(v0 + 1096));
  sub_10001DAB4(v1, (uint64_t *)&unk_101653D40);
  char v2 = *(unsigned char *)(v0 + 2692);
  uint64_t v3 = *(void *)(v0 + 2304);
  long long v4 = *(_OWORD *)(v0 + 2312);
  *(_OWORD *)(v0 + 2384) = *(_OWORD *)(v0 + 2328);
  *(_OWORD *)(v0 + 2368) = v4;
  *(unsigned char *)(v0 + 2693) = v2;
  *(void *)(v0 + 2360) = v3;
  *(void *)(v0 + 2352) = 0;
  uint64_t v5 = *(void *)(v0 + 984);
  if ((*(_WORD *)(v0 + 992) & 0x240) != 0)
  {
    uint64_t v6 = *(void **)(v0 + 976);
    uint64_t v7 = v6[3];
    uint64_t v8 = v6[4];
    sub_10001CD44(v6, v7);
    (*(void (**)(uint64_t))(*(void *)(*(void *)(v8 + 8) + 8) + 32))(v7);
    uint64_t v9 = sub_1009BC8A0;
  }
  else
  {
    *(void *)(v0 + 2440) = 0;
    *(void *)(v0 + 2432) = v5;
    uint64_t v10 = *(void **)(v0 + 976);
    uint64_t v11 = v10[3];
    uint64_t v12 = v10[4];
    sub_10001CD44(v10, v11);
    (*(void (**)(uint64_t))(*(void *)(*(void *)(v12 + 8) + 8) + 32))(v11);
    uint64_t v9 = sub_1009BCDA4;
  }
  return _swift_task_switch(v9, v5, 0);
}

uint64_t sub_1009C3F3C(double a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  *(void *)(v7 + 56) = a6;
  *(void *)(v7 + 64) = a7;
  *(void *)(v7 + 48) = a5;
  *(double *)(v7 + 40) = a1;
  uint64_t v8 = type metadata accessor for ContinuousClock();
  *(void *)(v7 + 72) = v8;
  *(void *)(v7 + 80) = *(void *)(v8 - 8);
  *(void *)(v7 + 88) = swift_task_alloc();
  return _swift_task_switch(sub_1009C4004, 0, 0);
}

uint64_t sub_1009C4004()
{
  uint64_t v1 = static Duration.seconds(_:)();
  uint64_t v3 = v2;
  ContinuousClock.init()();
  uint64_t v6 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, char))((char *)&dword_1016666E8 + dword_1016666E8);
  long long v4 = (void *)swift_task_alloc();
  *(void *)(v0 + 96) = v4;
  *long long v4 = v0;
  v4[1] = sub_1009C40E0;
  return v6(v1, v3, 0, 0, 1);
}

uint64_t sub_1009C40E0()
{
  uint64_t v2 = *(void **)v1;
  *(void *)(*(void *)v1 + 104) = v0;
  swift_task_dealloc();
  (*(void (**)(void, void))(v2[10] + 8))(v2[11], v2[9]);
  if (v0) {
    uint64_t v3 = sub_1007F6F38;
  }
  else {
    uint64_t v3 = sub_1009C4248;
  }
  return _swift_task_switch(v3, 0, 0);
}

uint64_t sub_1009C4248()
{
  swift_beginAccess();
  uint64_t Strong = swift_weakLoadStrong();
  v0[14] = Strong;
  if (Strong)
  {
    uint64_t v2 = (void *)swift_task_alloc();
    v0[15] = v2;
    *uint64_t v2 = v0;
    v2[1] = sub_1007F6E00;
    uint64_t v4 = v0[7];
    uint64_t v3 = v0[8];
    return sub_1009AA52C(v4, v3);
  }
  else
  {
    swift_task_dealloc();
    uint64_t v6 = (uint64_t (*)(void))v0[1];
    return v6();
  }
}

uint64_t sub_1009C4344@<X0>(uint64_t result@<X0>, void *a2@<X1>, BOOL *a3@<X8>)
{
  uint64_t v3 = result;
  if (result)
  {
    uint64_t v5 = a2[3];
    uint64_t v6 = a2[4];
    uint64_t v7 = sub_10001CD44(a2, v5);
    result = sub_100693504((uint64_t)v7, v3, v5, v6);
  }
  *a3 = v3 == 0;
  return result;
}

uint64_t sub_1009C43A0(uint64_t a1, void *a2)
{
  uint64_t v4 = type metadata accessor for UUID();
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v7 = &v14[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v8 = *(void *)(a1 + *(int *)(type metadata accessor for SafeLocation() + 52));
  uint64_t v9 = a2[3];
  uint64_t v10 = a2[4];
  sub_10001CD44(a2, v9);
  uint64_t v11 = *(void *)(*(void *)(v10 + 8) + 8);
  uint64_t v12 = *(void (**)(uint64_t, uint64_t))(v11 + 32);
  swift_bridgeObjectRetain();
  v12(v9, v11);
  uint64_t v15 = v7;
  LOBYTE(a2) = sub_100A9F998((uint64_t (*)(char *))sub_1005E4C34, (uint64_t)v14, v8);
  (*(void (**)(unsigned char *, uint64_t))(v5 + 8))(v7, v4);
  swift_bridgeObjectRelease();
  return a2 & 1;
}

uint64_t sub_1009C4514()
{
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  swift_defaultActor_destroy();
  return v0;
}

uint64_t sub_1009C457C()
{
  sub_1009C4514();

  return _swift_defaultActor_deallocate(v0);
}

uint64_t type metadata accessor for SimpleBeaconUpdateService()
{
  return self;
}

uint64_t initializeWithCopy for SimpleBeaconUpdateContext(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(unsigned char *)(a1 + 24) = *(unsigned char *)(a2 + 24);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for SimpleBeaconUpdateContext(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 24) = *(unsigned char *)(a2 + 24);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t assignWithTake for SimpleBeaconUpdateContext(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 24) = *(unsigned char *)(a2 + 24);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for SimpleBeaconUpdateContext(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 40)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 32);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for SimpleBeaconUpdateContext(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(void *)result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 40) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 32) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 40) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for SimpleBeaconUpdateContext()
{
  return &type metadata for SimpleBeaconUpdateContext;
}

uint64_t sub_1009C478C()
{
  return _swift_task_switch(sub_1009C47A8, v0, 0);
}

uint64_t sub_1009C47A8()
{
  uint64_t v1 = (void *)SPSimpleBeaconUpdateInterfaceReconnectNotification;
  type metadata accessor for DarwinNotificationHelper();
  swift_allocObject();
  id v2 = v1;
  DarwinNotificationHelper.init(notificationName:rateLimit:)();
  dispatch thunk of DarwinNotificationHelper.post(bypassRateLimit:)();
  swift_release();
  uint64_t v3 = *(uint64_t (**)(void))(v0 + 8);
  return v3();
}

uint64_t sub_1009C485C(uint64_t a1, uint64_t a2)
{
  uint64_t result = sub_1009C5B60(&qword_101653C78, a2, (void (*)(uint64_t))type metadata accessor for SimpleBeaconUpdateService);
  *(void *)(a1 + 8) = result;
  return result;
}

uint64_t sub_1009C48B4(uint64_t a1, uint64_t a2)
{
  return sub_1009C4904(a1, a2, &qword_101653FE0, (uint64_t)&unk_1015E10F0, (uint64_t)&unk_101653FF0);
}

uint64_t sub_1009C48DC(uint64_t a1, uint64_t a2)
{
  return sub_1009C4904(a1, a2, &qword_101653D18, (uint64_t)&unk_1015E0740, (uint64_t)&unk_101653D28);
}

uint64_t sub_1009C4904(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v8 = sub_10000588C(a3);
  uint64_t v9 = *(void *)(v8 - 8);
  uint64_t v10 = *(void *)(v9 + 64);
  __chkstk_darwin(v8);
  uint64_t v11 = sub_10000588C(&qword_10164DBB0);
  __chkstk_darwin(v11 - 8);
  v13 = (char *)&v18 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = type metadata accessor for TaskPriority();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v14 - 8) + 56))(v13, 1, 1, v14);
  (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))((char *)&v18 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0), a1, v8);
  unint64_t v15 = (*(unsigned __int8 *)(v9 + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80);
  v16 = (char *)swift_allocObject();
  *((void *)v16 + 2) = 0;
  *((void *)v16 + 3) = 0;
  *((void *)v16 + 4) = a2;
  (*(void (**)(char *, char *, uint64_t))(v9 + 32))(&v16[v15], (char *)&v18 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0), v8);
  swift_retain();
  sub_1008F5E44((uint64_t)v13, a5, (uint64_t)v16);
  return swift_release();
}

uint64_t sub_1009C4AD4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  v5[3] = a4;
  v5[4] = a5;
  v5[2] = a1;
  uint64_t v6 = sub_10000588C(&qword_101653FE0);
  v5[5] = v6;
  uint64_t v7 = *(void *)(v6 - 8);
  v5[6] = v7;
  v5[7] = *(void *)(v7 + 64);
  v5[8] = swift_task_alloc();
  return _swift_task_switch(sub_1009C4BA4, 0, 0);
}

uint64_t sub_1009C4BA4()
{
  uint64_t v1 = v0[8];
  uint64_t v2 = v0[5];
  uint64_t v3 = v0[6];
  uint64_t v4 = v0[3];
  (*(void (**)(uint64_t, void, uint64_t))(v3 + 16))(v1, v0[4], v2);
  unint64_t v5 = (*(unsigned __int8 *)(v3 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  uint64_t v6 = swift_allocObject();
  v0[9] = v6;
  *(void *)(v6 + 16) = v4;
  (*(void (**)(unint64_t, uint64_t, uint64_t))(v3 + 32))(v6 + v5, v1, v2);
  swift_retain();
  uint64_t v7 = (void *)swift_task_alloc();
  v0[10] = v7;
  *uint64_t v7 = v0;
  v7[1] = sub_1009C77CC;
  uint64_t v8 = v0[2];
  return unsafeBlocking<A>(_:)(v8, sub_1009C7688, v6, (char *)&type metadata for () + 8);
}

uint64_t sub_1009C4CEC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  v5[3] = a4;
  v5[4] = a5;
  v5[2] = a1;
  uint64_t v6 = sub_10000588C((uint64_t *)&unk_101653CF0);
  v5[5] = v6;
  uint64_t v7 = *(void *)(v6 - 8);
  v5[6] = v7;
  v5[7] = *(void *)(v7 + 64);
  v5[8] = swift_task_alloc();
  return _swift_task_switch(sub_1009C4DBC, 0, 0);
}

uint64_t sub_1009C4DBC()
{
  uint64_t v1 = v0[8];
  uint64_t v2 = v0[5];
  uint64_t v3 = v0[6];
  uint64_t v4 = v0[3];
  (*(void (**)(uint64_t, void, uint64_t))(v3 + 16))(v1, v0[4], v2);
  unint64_t v5 = (*(unsigned __int8 *)(v3 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  uint64_t v6 = swift_allocObject();
  v0[9] = v6;
  *(void *)(v6 + 16) = v4;
  (*(void (**)(unint64_t, uint64_t, uint64_t))(v3 + 32))(v6 + v5, v1, v2);
  swift_retain();
  uint64_t v7 = (void *)swift_task_alloc();
  v0[10] = v7;
  *uint64_t v7 = v0;
  v7[1] = sub_1009C77CC;
  uint64_t v8 = v0[2];
  return unsafeBlocking<A>(_:)(v8, sub_1009C5AA4, v6, (char *)&type metadata for () + 8);
}

uint64_t sub_1009C4F04(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  v5[3] = a4;
  v5[4] = a5;
  v5[2] = a1;
  uint64_t v6 = sub_10000588C(&qword_101653D18);
  v5[5] = v6;
  uint64_t v7 = *(void *)(v6 - 8);
  v5[6] = v7;
  v5[7] = *(void *)(v7 + 64);
  v5[8] = swift_task_alloc();
  return _swift_task_switch(sub_1009C4FD4, 0, 0);
}

uint64_t sub_1009C4FD4()
{
  uint64_t v1 = v0[8];
  uint64_t v2 = v0[5];
  uint64_t v3 = v0[6];
  uint64_t v4 = v0[3];
  (*(void (**)(uint64_t, void, uint64_t))(v3 + 16))(v1, v0[4], v2);
  unint64_t v5 = (*(unsigned __int8 *)(v3 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  uint64_t v6 = swift_allocObject();
  v0[9] = v6;
  *(void *)(v6 + 16) = v4;
  (*(void (**)(unint64_t, uint64_t, uint64_t))(v3 + 32))(v6 + v5, v1, v2);
  swift_retain();
  uint64_t v7 = (void *)swift_task_alloc();
  v0[10] = v7;
  *uint64_t v7 = v0;
  v7[1] = sub_1009C511C;
  uint64_t v8 = v0[2];
  return unsafeBlocking<A>(_:)(v8, sub_1009C5CC0, v6, (char *)&type metadata for () + 8);
}

uint64_t sub_1009C511C()
{
  uint64_t v3 = *v0;
  swift_task_dealloc();
  swift_release();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v3 + 8);
  return v1();
}

uint64_t sub_1009C5248(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_10000588C(&qword_101653FE0);
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = *(void *)(v5 + 64);
  __chkstk_darwin(v4);
  uint64_t v7 = *(NSObject **)(a1 + 16);
  (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))((char *)aBlock - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0), a2, v4);
  unint64_t v8 = (*(unsigned __int8 *)(v5 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
  uint64_t v9 = swift_allocObject();
  *(void *)(v9 + 16) = a1;
  (*(void (**)(unint64_t, char *, uint64_t))(v5 + 32))(v9 + v8, (char *)aBlock - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0), v4);
  uint64_t v10 = swift_allocObject();
  *(void *)(v10 + 16) = sub_1009C76B4;
  *(void *)(v10 + 24) = v9;
  aBlock[4] = sub_1003B7AE0;
  aBlock[5] = v10;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_1000A70B0;
  aBlock[3] = &unk_1015E1180;
  uint64_t v11 = _Block_copy(aBlock);
  swift_retain();
  swift_retain();
  swift_release();
  dispatch_sync(v7, v11);
  _Block_release(v11);
  LOBYTE(a1) = swift_isEscapingClosureAtFileLocation();
  swift_release();
  uint64_t result = swift_release();
  if (a1) {
    __break(1u);
  }
  return result;
}

uint64_t sub_1009C546C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_10000588C((uint64_t *)&unk_101653CF0);
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = *(void *)(v5 + 64);
  __chkstk_darwin(v4);
  uint64_t v7 = *(NSObject **)(a1 + 16);
  (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))((char *)aBlock - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0), a2, v4);
  unint64_t v8 = (*(unsigned __int8 *)(v5 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
  uint64_t v9 = swift_allocObject();
  *(void *)(v9 + 16) = a1;
  (*(void (**)(unint64_t, char *, uint64_t))(v5 + 32))(v9 + v8, (char *)aBlock - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0), v4);
  uint64_t v10 = swift_allocObject();
  *(void *)(v10 + 16) = sub_1009C5AD0;
  *(void *)(v10 + 24) = v9;
  aBlock[4] = sub_100132424;
  aBlock[5] = v10;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_1000A70B0;
  aBlock[3] = &unk_1015E06B8;
  uint64_t v11 = _Block_copy(aBlock);
  swift_retain();
  swift_retain();
  swift_release();
  dispatch_sync(v7, v11);
  _Block_release(v11);
  LOBYTE(a1) = swift_isEscapingClosureAtFileLocation();
  swift_release();
  uint64_t result = swift_release();
  if (a1) {
    __break(1u);
  }
  return result;
}

uint64_t sub_1009C5690(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_10000588C(&qword_101653D18);
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = *(void *)(v5 + 64);
  __chkstk_darwin(v4);
  uint64_t v7 = *(NSObject **)(a1 + 16);
  (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))((char *)aBlock - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0), a2, v4);
  unint64_t v8 = (*(unsigned __int8 *)(v5 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
  uint64_t v9 = swift_allocObject();
  *(void *)(v9 + 16) = a1;
  (*(void (**)(unint64_t, char *, uint64_t))(v5 + 32))(v9 + v8, (char *)aBlock - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0), v4);
  uint64_t v10 = swift_allocObject();
  *(void *)(v10 + 16) = sub_1009C5D70;
  *(void *)(v10 + 24) = v9;
  aBlock[4] = sub_1003B7AE0;
  aBlock[5] = v10;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_1000A70B0;
  aBlock[3] = &unk_1015E07D0;
  uint64_t v11 = _Block_copy(aBlock);
  swift_retain();
  swift_retain();
  swift_release();
  dispatch_sync(v7, v11);
  _Block_release(v11);
  LOBYTE(a1) = swift_isEscapingClosureAtFileLocation();
  swift_release();
  uint64_t result = swift_release();
  if (a1) {
    __break(1u);
  }
  return result;
}

uint64_t sub_1009C58B4(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  return CheckedContinuation.resume(returning:)();
}

uint64_t sub_1009C5920(uint64_t a1)
{
  return sub_1009C4904(a1, v1, (uint64_t *)&unk_101653CF0, (uint64_t)&unk_1015E0628, (uint64_t)&unk_101653D08);
}

uint64_t sub_1009C5960(uint64_t a1)
{
  return a1;
}

uint64_t sub_1009C598C()
{
  return sub_1009C74AC((uint64_t *)&unk_101653CF0);
}

uint64_t sub_1009C5998(uint64_t a1)
{
  uint64_t v4 = *(void *)(sub_10000588C((uint64_t *)&unk_101653CF0) - 8);
  uint64_t v5 = v1[2];
  uint64_t v6 = v1[3];
  uint64_t v7 = v1[4];
  uint64_t v8 = (uint64_t)v1 + ((*(unsigned __int8 *)(v4 + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80));
  uint64_t v9 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v9;
  *uint64_t v9 = v2;
  v9[1] = sub_100033F68;
  return sub_1009C4CEC(a1, v5, v6, v7, v8);
}

uint64_t sub_1009C5A98()
{
  return sub_100033E78((uint64_t *)&unk_101653CF0);
}

uint64_t sub_1009C5AA4()
{
  return sub_1009C5CE0((uint64_t *)&unk_101653CF0, sub_1009C546C);
}

uint64_t sub_1009C5AC4()
{
  return sub_100033E78((uint64_t *)&unk_101653CF0);
}

uint64_t sub_1009C5AD0()
{
  return sub_1009C5D7C((uint64_t *)&unk_101653CF0);
}

uint64_t sub_1009C5ADC()
{
  return _swift_deallocObject(v0, 32, 7);
}

uint64_t sub_1009C5AEC(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_1009C5AFC()
{
  return swift_release();
}

uint64_t sub_1009C5B04()
{
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return _swift_deallocObject(v0, 72, 7);
}

uint64_t sub_1009C5B54()
{
  return sub_10099D13C(*(void *)(v0 + 16), *(void *)(v0 + 24), (long long *)(v0 + 32));
}

uint64_t sub_1009C5B60(unint64_t *a1, uint64_t a2, void (*a3)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a3(a2);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_1009C5BA8()
{
  return sub_1009C74AC(&qword_101653D18);
}

uint64_t sub_1009C5BB4(uint64_t a1)
{
  uint64_t v4 = *(void *)(sub_10000588C(&qword_101653D18) - 8);
  uint64_t v5 = v1[2];
  uint64_t v6 = v1[3];
  uint64_t v7 = v1[4];
  uint64_t v8 = (uint64_t)v1 + ((*(unsigned __int8 *)(v4 + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80));
  uint64_t v9 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v9;
  *uint64_t v9 = v2;
  v9[1] = sub_100033F68;
  return sub_1009C4F04(a1, v5, v6, v7, v8);
}

uint64_t sub_1009C5CB4()
{
  return sub_100033E78(&qword_101653D18);
}

uint64_t sub_1009C5CC0()
{
  return sub_1009C5CE0(&qword_101653D18, sub_1009C5690);
}

uint64_t sub_1009C5CE0(uint64_t *a1, uint64_t (*a2)(uint64_t, uint64_t))
{
  uint64_t v3 = *(void *)(sub_10000588C(a1) - 8);
  uint64_t v4 = *(void *)(v2 + 16);
  uint64_t v5 = v2 + ((*(unsigned __int8 *)(v3 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80));

  return a2(v4, v5);
}

uint64_t sub_1009C5D64()
{
  return sub_100033E78(&qword_101653D18);
}

uint64_t sub_1009C5D70()
{
  return sub_1009C5D7C(&qword_101653D18);
}

uint64_t sub_1009C5D7C(uint64_t *a1)
{
  uint64_t v3 = *(void *)(sub_10000588C(a1) - 8);
  return sub_1009C58B4(*(void *)(v1 + 16), v1 + ((*(unsigned __int8 *)(v3 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80)), a1);
}

uint64_t sub_1009C5DE0()
{
  return _swift_deallocObject(v0, 32, 7);
}

uint64_t sub_1009C5DF4()
{
  return sub_1009C6EC8((uint64_t (*)(uint64_t, uint64_t))sub_100E62310);
}

uint64_t sub_1009C5E0C(uint64_t a1)
{
  return sub_10012A46C(a1, v1[2], v1[3], v1[4]);
}

unint64_t sub_1009C5E18()
{
  unint64_t result = qword_1016556C0;
  if (!qword_1016556C0)
  {
    sub_10001D4B0(255, (unint64_t *)&unk_101653D70);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1016556C0);
  }
  return result;
}

uint64_t sub_1009C5E84()
{
  return sub_1009C6EC8((uint64_t (*)(uint64_t, uint64_t))sub_100E63424);
}

uint64_t sub_1009C5E9C(uint64_t a1)
{
  return sub_10012A4CC(a1, v1[2], v1[3], v1[4]);
}

uint64_t sub_1009C5EB0()
{
  return sub_1009C6EC8((uint64_t (*)(uint64_t, uint64_t))sub_100E5F538);
}

uint64_t sub_1009C5EC8(uint64_t a1)
{
  return sub_10012A43C(a1, v1[2], v1[3], v1[4]);
}

uint64_t sub_1009C5ED4(uint64_t a1)
{
  return sub_1009C43A0(a1, *(void **)(v1 + 16)) & 1;
}

uint64_t sub_1009C5EF8@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v3 = (char *)v1[2];
  uint64_t v4 = v1 + 3;
  uint64_t v6 = v1[6];
  uint64_t v5 = v1[7];
  uint64_t v7 = sub_10001CD44(v4, v6);
  uint64_t result = sub_1006A3738((uint64_t)v7, 0, v3, v6, v5);
  *a1 = result;
  return result;
}

id sub_1009C5F50@<X0>(unsigned char *a1@<X8>)
{
  uint64_t v3 = v1[2];
  uint64_t v4 = v1 + 3;
  uint64_t v6 = v1[6];
  uint64_t v5 = v1[7];
  uint64_t v7 = sub_10001CD44(v4, v6);
  id result = sub_100A27564((uint64_t)v7, v3, v6, v5);
  *a1 = result & 1;
  return result;
}

uint64_t sub_1009C5FAC@<X0>(BOOL *a1@<X8>)
{
  return sub_1009C4344(*(void *)(v1 + 16), (void *)(v1 + 24), a1);
}

uint64_t sub_1009C5FBC()
{
  return sub_1009C6EC8(sub_100E5F4E8);
}

uint64_t sub_1009C5FD8()
{
  return sub_1009C6EC8((uint64_t (*)(uint64_t, uint64_t))sub_100E61414);
}

uint64_t sub_1009C5FF0(uint64_t a1)
{
  return sub_10012A10C(a1, v1[2], v1[3], v1[4]);
}

void *sub_1009C5FFC(void *a1, uint64_t a2, uint64_t a3)
{
  v27 = a1;
  uint64_t v6 = a2 + 64;
  uint64_t v7 = 1 << *(unsigned char *)(a2 + 32);
  uint64_t v8 = -1;
  if (v7 < 64) {
    uint64_t v8 = ~(-1 << v7);
  }
  unint64_t v9 = v8 & *(void *)(a2 + 64);
  int64_t v21 = (unint64_t)(v7 + 63) >> 6;
  id result = (void *)swift_bridgeObjectRetain();
  int64_t v11 = 0;
  if (!v9) {
    goto LABEL_5;
  }
LABEL_4:
  unint64_t v12 = __clz(__rbit64(v9));
  v9 &= v9 - 1;
  for (unint64_t i = v12 | (v11 << 6); ; unint64_t i = __clz(__rbit64(v15)) + (v11 << 6))
  {
    uint64_t v17 = *(void *)(a2 + 56) + 48 * i;
    uint64_t v18 = *(void *)(v17 + 24);
    char v19 = *(unsigned char *)(v17 + 32);
    uint64_t v20 = *(void *)(v17 + 40);
    uint64_t v22 = *(void *)v17;
    long long v23 = *(_OWORD *)(v17 + 8);
    uint64_t v24 = v18;
    char v25 = v19;
    uint64_t v26 = v20;
    swift_retain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    sub_10099E998(&v27, &v22, a3);
    if (v3)
    {
      swift_release();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_release();
      return (void *)swift_bridgeObjectRelease();
    }
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    id result = (void *)swift_release();
    if (v9) {
      goto LABEL_4;
    }
LABEL_5:
    if (__OFADD__(v11++, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v11 >= v21) {
      goto LABEL_26;
    }
    unint64_t v15 = *(void *)(v6 + 8 * v11);
    if (!v15) {
      break;
    }
LABEL_17:
    unint64_t v9 = (v15 - 1) & v15;
  }
  int64_t v16 = v11 + 1;
  if (v11 + 1 >= v21) {
    goto LABEL_26;
  }
  unint64_t v15 = *(void *)(v6 + 8 * v16);
  if (v15) {
    goto LABEL_16;
  }
  int64_t v16 = v11 + 2;
  if (v11 + 2 >= v21) {
    goto LABEL_26;
  }
  unint64_t v15 = *(void *)(v6 + 8 * v16);
  if (v15) {
    goto LABEL_16;
  }
  int64_t v16 = v11 + 3;
  if (v11 + 3 >= v21) {
    goto LABEL_26;
  }
  unint64_t v15 = *(void *)(v6 + 8 * v16);
  if (v15) {
    goto LABEL_16;
  }
  int64_t v16 = v11 + 4;
  if (v11 + 4 >= v21)
  {
LABEL_26:
    swift_release();
    return v27;
  }
  unint64_t v15 = *(void *)(v6 + 8 * v16);
  if (v15)
  {
LABEL_16:
    int64_t v11 = v16;
    goto LABEL_17;
  }
  while (1)
  {
    int64_t v11 = v16 + 1;
    if (__OFADD__(v16, 1)) {
      break;
    }
    if (v11 >= v21) {
      goto LABEL_26;
    }
    unint64_t v15 = *(void *)(v6 + 8 * v11);
    ++v16;
    if (v15) {
      goto LABEL_17;
    }
  }
LABEL_28:
  __break(1u);
  return result;
}

uint64_t sub_1009C6238()
{
  return sub_1009C6EC8((uint64_t (*)(uint64_t, uint64_t))sub_100E61A44);
}

uint64_t sub_1009C6250()
{
  swift_weakDestroy();

  return _swift_deallocObject(v0, 24, 7);
}

uint64_t sub_1009C6288()
{
  swift_unknownObjectRelease();
  swift_release();
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v0 + 48);
  swift_release();

  return _swift_deallocObject(v0, 96, 7);
}

uint64_t sub_1009C62D8(uint64_t a1)
{
  uint64_t v4 = *((void *)v1 + 2);
  uint64_t v5 = *((void *)v1 + 3);
  double v6 = v1[4];
  uint64_t v7 = *((void *)v1 + 5);
  uint64_t v8 = (uint64_t)(v1 + 6);
  uint64_t v9 = *((void *)v1 + 11);
  uint64_t v10 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v10;
  *uint64_t v10 = v2;
  v10[1] = sub_10001D2E4;
  return sub_1009C3F3C(v6, a1, v4, v5, v7, v8, v9);
}

uint64_t sub_1009C63B4(uint64_t a1)
{
  return sub_10099E550(a1, *(void *)(v1 + 16), *(void *)(v1 + 24));
}

uint64_t sub_1009C63BC(uint64_t a1, uint64_t a2)
{
  double v6 = (void *)swift_task_alloc();
  *(void *)(v3 + 16) = v6;
  *double v6 = v3;
  v6[1] = sub_100033F68;
  return sub_1009B22C8(a1, a2, v2);
}

uint64_t sub_1009C6468()
{
  return sub_1009C743C((void (*)(void))&_swift_bridgeObjectRelease, 32);
}

uint64_t sub_1009C6484@<X0>(void *a1@<X8>)
{
  return sub_100E5EE80(*(void *)(v1 + 24), a1);
}

uint64_t sub_1009C648C@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = XPCSession.connection.getter();
  *a1 = result;
  return result;
}

uint64_t sub_1009C64BC()
{
  return sub_1009C6EC8((uint64_t (*)(uint64_t, uint64_t))sub_100E6138C);
}

uint64_t sub_1009C64D4(uint64_t a1)
{
  return sub_10012A3DC(a1, v1[2], v1[3], v1[4]);
}

uint64_t sub_1009C64E0()
{
  uint64_t v1 = sub_10000588C((uint64_t *)&unk_101653E20);
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 32) & ~v3;
  uint64_t v5 = v4 + *(void *)(v2 + 64);
  uint64_t v6 = v3 | 7;
  swift_release();
  swift_bridgeObjectRelease();
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);

  return _swift_deallocObject(v0, v5, v6);
}

uint64_t sub_1009C65B8()
{
  return sub_1009C6970((uint64_t (*)(uint64_t, uint64_t, uint64_t))sub_10099E8F0);
}

uint64_t sub_1009C65D4()
{
  uint64_t v2 = v0[2];
  uint64_t v3 = v0[3];
  uint64_t v5 = v0[4];
  uint64_t v4 = v0[5];
  uint64_t v6 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v6;
  *uint64_t v6 = v1;
  v6[1] = sub_100033F68;
  return sub_1009ABF14(v2, v3, v5, v4);
}

uint64_t sub_1009C6680(uint64_t a1, uint64_t a2)
{
  uint64_t v6 = (void *)swift_task_alloc();
  *(void *)(v3 + 16) = v6;
  *uint64_t v6 = v3;
  v6[1] = sub_100033F68;
  return sub_1009A9EA8(a1, a2, v2);
}

uint64_t sub_1009C6730()
{
  return sub_1009C6EC8(sub_100E61304);
}

uint64_t sub_1009C6748()
{
  uint64_t v2 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v2;
  *uint64_t v2 = v1;
  v2[1] = sub_10012E0C8;
  return sub_1009A8BB4(v0);
}

uint64_t sub_1009C67D8()
{
  uint64_t v2 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v2;
  *uint64_t v2 = v1;
  v2[1] = sub_100033F68;
  v2[3] = v0;
  return _swift_task_switch(sub_1009A8D48, 0, 0);
}

uint64_t sub_1009C6880(uint64_t a1)
{
  return sub_10099DBB0(a1, *(void *)(v1 + 16), *(void *)(v1 + 24));
}

uint64_t sub_1009C6888()
{
  uint64_t v1 = sub_10000588C((uint64_t *)&unk_101653E20);
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 32) & ~v3;
  uint64_t v5 = v4 + *(void *)(v2 + 64);
  uint64_t v6 = v3 | 7;
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);

  return _swift_deallocObject(v0, v5, v6);
}

uint64_t sub_1009C6958()
{
  return sub_1009C6970((uint64_t (*)(uint64_t, uint64_t, uint64_t))sub_10099DF48);
}

uint64_t sub_1009C6970(uint64_t (*a1)(uint64_t, uint64_t, uint64_t))
{
  uint64_t v2 = *(void *)(sub_10000588C((uint64_t *)&unk_101653E20) - 8);
  uint64_t v3 = *(void *)(v1 + 16);
  uint64_t v4 = *(void *)(v1 + 24);
  uint64_t v5 = v1 + ((*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80));

  return a1(v3, v4, v5);
}

unint64_t sub_1009C69EC()
{
  unint64_t result = qword_101653E88;
  if (!qword_101653E88)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_101653E88);
  }
  return result;
}

uint64_t sub_1009C6A40(uint64_t a1)
{
  return sub_10099F3B4(a1, v1);
}

uint64_t sub_1009C6A48()
{
  return sub_1009C743C((void (*)(void))&_swift_release, 40);
}

uint64_t sub_1009C6A64(uint64_t a1)
{
  return sub_1009A2340(a1, v1[2], v1[3], v1[4]);
}

uint64_t sub_1009C6A70()
{
  return sub_1009C743C((void (*)(void))&_swift_release, 40);
}

uint64_t sub_1009C6A8C(uint64_t a1)
{
  return sub_1009A5954(a1, v1[2], v1[3], v1[4]);
}

uint64_t sub_1009C6A98()
{
  swift_unknownObjectRelease();
  swift_release();
  swift_release();
  swift_release();

  return _swift_deallocObject(v0, 56, 7);
}

uint64_t sub_1009C6AE8(uint64_t a1)
{
  uint64_t v4 = v1[2];
  uint64_t v5 = v1[3];
  uint64_t v6 = v1[4];
  uint64_t v7 = v1[5];
  uint64_t v8 = v1[6];
  uint64_t v9 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v9;
  *uint64_t v9 = v2;
  v9[1] = sub_100033F68;
  return sub_1009A4378(a1, v4, v5, v6, v7, v8);
}

uint64_t sub_1009C6BB0(uint64_t *a1)
{
  return sub_1009A1AD8(a1);
}

uint64_t sub_1009C6BB8()
{
  swift_release();

  return _swift_deallocObject(v0, 32, 7);
}

uint64_t sub_1009C6BF0()
{
  uint64_t v2 = *(void *)(v0 + 16);
  uint64_t v3 = *(void *)(v0 + 24);
  uint64_t v4 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v4;
  *uint64_t v4 = v1;
  v4[1] = sub_100033F68;
  return sub_1009A1B9C(v2, v3);
}

uint64_t sub_1009C6C88()
{
  uint64_t v2 = *(void *)(v0 + 16);
  uint64_t v3 = *(void *)(v0 + 24);
  uint64_t v4 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v4;
  *uint64_t v4 = v1;
  v4[1] = sub_100033F68;
  v4[3] = v2;
  v4[4] = v3;
  return _swift_task_switch(sub_1009A1D54, v2, 0);
}

uint64_t sub_1009C6D34()
{
  return sub_1009C7240((void (*)(void))&_swift_release);
}

uint64_t sub_1009C6D4C()
{
  uint64_t v2 = v0[2];
  uint64_t v3 = v0[3];
  uint64_t v4 = v0[4];
  uint64_t v5 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v5;
  *uint64_t v5 = v1;
  v5[1] = sub_100033F68;
  return sub_1009AAA04(v2, v3, v4);
}

uint64_t sub_1009C6DF8()
{
  return sub_1009C7240((void (*)(void))&_swift_bridgeObjectRelease);
}

uint64_t sub_1009C6E10()
{
  uint64_t v2 = *(void *)(v0 + 32);
  uint64_t v3 = swift_task_alloc();
  long long v4 = *(_OWORD *)(v0 + 16);
  *(void *)(v1 + 16) = v3;
  *(void *)uint64_t v3 = v1;
  *(void *)(v3 + 8) = sub_100033F68;
  *(void *)(v3 + 64) = v2;
  *(_OWORD *)(v3 + 48) = v4;
  return _swift_task_switch(sub_1009AB67C, 0, 0);
}

uint64_t sub_1009C6EC8(uint64_t (*a1)(uint64_t, uint64_t))
{
  uint64_t v2 = *(void *)(type metadata accessor for UUID() - 8);
  uint64_t v3 = *(void *)(v1 + 16);
  uint64_t v4 = v1 + ((*(unsigned __int8 *)(v2 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80));

  return a1(v3, v4);
}

uint64_t sub_1009C6F54()
{
  uint64_t v2 = v0[2];
  uint64_t v3 = v0[3];
  uint64_t v5 = v0[4];
  uint64_t v4 = v0[5];
  uint64_t v6 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v6;
  *uint64_t v6 = v1;
  v6[1] = sub_100033F68;
  return sub_1009ABD50(v2, v3, v5, v4);
}

uint64_t sub_1009C7004()
{
  uint64_t v2 = v0[2];
  uint64_t v3 = v0[3];
  uint64_t v5 = v0[4];
  uint64_t v4 = v0[5];
  uint64_t v6 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v6;
  *uint64_t v6 = v1;
  v6[1] = sub_10001D2E4;
  return sub_1009ABD50(v2, v3, v5, v4);
}

uint64_t sub_1009C70C0()
{
  return sub_1009C7240((void (*)(void))&_swift_release);
}

uint64_t sub_1009C70F0(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

uint64_t sub_1009C715C(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 32))(a2, a1, v5);
  return a2;
}

uint64_t sub_1009C71C8(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t sub_1009C7228()
{
  return sub_1009C7240((void (*)(void))&_swift_release);
}

uint64_t sub_1009C7240(void (*a1)(void))
{
  swift_bridgeObjectRelease();
  swift_release();
  a1(*(void *)(v1 + 32));

  return _swift_deallocObject(v1, 40, 7);
}

uint64_t sub_1009C729C()
{
  return sub_100033E78(&qword_101653FB8);
}

uint64_t sub_1009C72A8()
{
  sub_10000588C(&qword_101653FB8);
  uint64_t v1 = *(void *)(v0 + 16);

  return sub_10099F744(v1);
}

uint64_t sub_1009C7314()
{
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();

  return _swift_deallocObject(v0, 48, 7);
}

uint64_t sub_1009C7368(uint64_t a1)
{
  uint64_t v4 = v1[2];
  uint64_t v5 = v1[3];
  uint64_t v6 = v1[4];
  uint64_t v7 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v7;
  *uint64_t v7 = v2;
  v7[1] = sub_100033F68;
  return sub_1009A0754(a1, v4, v5, v6);
}

uint64_t sub_1009C7420()
{
  return sub_1009C743C((void (*)(void))&_swift_release, 32);
}

uint64_t sub_1009C743C(void (*a1)(void), uint64_t a2)
{
  swift_release();
  a1(*(void *)(v2 + 24));

  return _swift_deallocObject(v2, a2, 7);
}

void sub_1009C7498()
{
}

uint64_t sub_1009C74A0()
{
  return sub_1009C74AC(&qword_101653FE0);
}

uint64_t sub_1009C74AC(uint64_t *a1)
{
  uint64_t v2 = sub_10000588C(a1);
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t v4 = *(unsigned __int8 *)(v3 + 80);
  uint64_t v5 = (v4 + 40) & ~v4;
  uint64_t v6 = v5 + *(void *)(v3 + 64);
  uint64_t v7 = v4 | 7;
  swift_unknownObjectRelease();
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v1 + v5, v2);

  return _swift_deallocObject(v1, v6, v7);
}

uint64_t sub_1009C757C(uint64_t a1)
{
  uint64_t v4 = *(void *)(sub_10000588C(&qword_101653FE0) - 8);
  uint64_t v5 = v1[2];
  uint64_t v6 = v1[3];
  uint64_t v7 = v1[4];
  uint64_t v8 = (uint64_t)v1 + ((*(unsigned __int8 *)(v4 + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80));
  uint64_t v9 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v9;
  *uint64_t v9 = v2;
  v9[1] = sub_100033F68;
  return sub_1009C4AD4(a1, v5, v6, v7, v8);
}

uint64_t sub_1009C767C()
{
  return sub_100033E78(&qword_101653FE0);
}

uint64_t sub_1009C7688()
{
  return sub_1009C5CE0(&qword_101653FE0, sub_1009C5248);
}

uint64_t sub_1009C76A8()
{
  return sub_100033E78(&qword_101653FE0);
}

uint64_t sub_1009C76B4()
{
  return sub_1009C5D7C(&qword_101653FE0);
}

uint64_t sub_1009C76C0()
{
  return _swift_deallocObject(v0, 32, 7);
}

uint64_t sub_1009C76D0()
{
  return sub_10099FFBC();
}

uint64_t sub_1009C76D8()
{
  uint64_t v2 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v2;
  *uint64_t v2 = v1;
  v2[1] = sub_100033F68;
  v2[2] = v0;
  return _swift_task_switch(sub_1009A0074, v0, 0);
}

uint64_t sub_1009C77D8()
{
  uint64_t v1 = type metadata accessor for UUID();
  uint64_t v2 = *(void *)(v1 - 8);
  __chkstk_darwin(v1);
  uint64_t v4 = (char *)v38 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = type metadata accessor for PeerCommunicationIdentifier();
  __chkstk_darwin(v5);
  uint64_t v7 = (void *)((char *)v38 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0));
  sub_1009CA6F0(v0, (uint64_t)v7);
  uint64_t v8 = 0x656E6F6E2ELL;
  switch(swift_getEnumCaseMultiPayload())
  {
    case 1u:
      (*(void (**)(char *, uint64_t *, uint64_t))(v2 + 32))(v4, v7, v1);
      unint64_t v39 = 0x6F7244726565702ELL;
      unint64_t v40 = 0xEA00000000002870;
      sub_1009CBD64((unint64_t *)&qword_101638B10, (void (*)(uint64_t))&type metadata accessor for UUID);
      v11._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
      String.append(_:)(v11);
      swift_bridgeObjectRelease();
      v12._countAndFlagsBits = 41;
      v12._object = (void *)0xE100000000000000;
      String.append(_:)(v12);
      uint64_t v8 = v39;
      (*(void (**)(char *, uint64_t))(v2 + 8))(v4, v1);
      return v8;
    case 2u:
      uint64_t v14 = *v7;
      uint64_t v13 = v7[1];
      unint64_t v15 = (void *)v7[2];
      unint64_t v39 = 0;
      unint64_t v40 = 0xE000000000000000;
      _StringGuts.grow(_:)(28);
      swift_bridgeObjectRelease();
      unint64_t v39 = 0xD000000000000015;
      unint64_t v40 = 0x800000010140E110;
      v38[1] = v14;
      v16._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
      String.append(_:)(v16);
      swift_bridgeObjectRelease();
      goto LABEL_8;
    case 3u:
      uint64_t v17 = v7[1];
      uint64_t v18 = (void *)v7[2];
      unint64_t v39 = 0;
      unint64_t v40 = 0xE000000000000000;
      _StringGuts.grow(_:)(25);
      swift_bridgeObjectRelease();
      unint64_t v39 = 0xD000000000000016;
      unint64_t v40 = 0x800000010140E0F0;
      swift_bridgeObjectRetain();
      v19._countAndFlagsBits = v17;
      v19._object = v18;
      String.append(_:)(v19);
      swift_bridgeObjectRelease_n();
      goto LABEL_10;
    case 4u:
      uint64_t v20 = v7[1];
      int64_t v21 = (void *)v7[2];
      uint64_t v22 = v7[3];
      long long v23 = (void *)v7[4];
      unint64_t v39 = 0x287364692ELL;
      unint64_t v40 = 0xE500000000000000;
      swift_bridgeObjectRetain();
      v24._countAndFlagsBits = v20;
      v24._object = v21;
      String.append(_:)(v24);
      swift_bridgeObjectRelease_n();
      v25._countAndFlagsBits = 8236;
      v25._object = (void *)0xE200000000000000;
      String.append(_:)(v25);
      v26._countAndFlagsBits = v22;
      v26._object = v23;
      String.append(_:)(v26);
      goto LABEL_9;
    case 5u:
      uint64_t v27 = *v7;
      uint64_t v28 = (void *)v7[1];
      uint64_t v29 = v7[3];
      Class v30 = (void *)v7[4];
      uint64_t v13 = v7[5];
      unint64_t v15 = (void *)v7[6];
      unint64_t v39 = 0;
      unint64_t v40 = 0xE000000000000000;
      _StringGuts.grow(_:)(22);
      swift_bridgeObjectRelease();
      unint64_t v39 = 0x49796C696D61662ELL;
      unint64_t v40 = 0xEB00000000285344;
      v31._countAndFlagsBits = v27;
      v31._object = v28;
      String.append(_:)(v31);
      swift_bridgeObjectRelease();
      v32._countAndFlagsBits = 8236;
      v32._object = (void *)0xE200000000000000;
      String.append(_:)(v32);
      swift_bridgeObjectRetain();
      v33._countAndFlagsBits = v29;
      v33._object = v30;
      String.append(_:)(v33);
      swift_bridgeObjectRelease_n();
LABEL_8:
      v34._countAndFlagsBits = 8236;
      v34._object = (void *)0xE200000000000000;
      String.append(_:)(v34);
      v35._countAndFlagsBits = v13;
      v35._object = v15;
      String.append(_:)(v35);
LABEL_9:
      swift_bridgeObjectRelease();
LABEL_10:
      v36._countAndFlagsBits = 41;
      v36._object = (void *)0xE100000000000000;
      String.append(_:)(v36);
      return v39;
    case 6u:
      return v8;
    case 7u:
      return 1650816814;
    default:
      v9._countAndFlagsBits = *v7;
      uint64_t v10 = (void *)v7[1];
      unint64_t v39 = 0x4449656C7070612ELL;
      unint64_t v40 = 0xE900000000000028;
      v9._object = v10;
      String.append(_:)(v9);
      swift_bridgeObjectRelease();
      return v39;
  }
}

void sub_1009C7C44()
{
  uint64_t v1 = type metadata accessor for UUID();
  uint64_t v2 = *(void *)(v1 - 8);
  __chkstk_darwin(v1);
  uint64_t v4 = (char *)&v13 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = type metadata accessor for PeerCommunicationIdentifier();
  __chkstk_darwin(v5);
  uint64_t v7 = (unsigned __int8 *)&v13 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1009CA6F0(v0, (uint64_t)v7);
  switch(swift_getEnumCaseMultiPayload())
  {
    case 1u:
      (*(void (**)(char *, unsigned __int8 *, uint64_t))(v2 + 32))(v4, v7, v1);
      Hasher._combine(_:)(2uLL);
      sub_1009CBD64(&qword_10163BC60, (void (*)(uint64_t))&type metadata accessor for UUID);
      dispatch thunk of Hashable.hash(into:)();
      (*(void (**)(char *, uint64_t))(v2 + 8))(v4, v1);
      return;
    case 2u:
      Swift::UInt v8 = *(void *)v7;
      Hasher._combine(_:)(3uLL);
      Hasher._combine(_:)(v8);
      goto LABEL_8;
    case 3u:
      Swift::UInt v9 = *v7;
      Hasher._combine(_:)(4uLL);
      Hasher._combine(_:)(v9);
      swift_bridgeObjectRetain();
      String.hash(into:)();
      swift_bridgeObjectRelease_n();
      return;
    case 4u:
      Swift::UInt v10 = *v7;
      Hasher._combine(_:)(5uLL);
      Hasher._combine(_:)(v10);
      swift_bridgeObjectRetain();
      String.hash(into:)();
      swift_bridgeObjectRelease_n();
      goto LABEL_8;
    case 5u:
      Swift::UInt v11 = v7[16];
      Hasher._combine(_:)(6uLL);
      String.hash(into:)();
      swift_bridgeObjectRelease();
      Hasher._combine(_:)(v11);
      swift_bridgeObjectRetain();
      String.hash(into:)();
      swift_bridgeObjectRelease_n();
LABEL_8:
      String.hash(into:)();
      swift_bridgeObjectRelease();
      return;
    case 6u:
      Swift::UInt v12 = 0;
      goto LABEL_11;
    case 7u:
      Swift::UInt v12 = 7;
LABEL_11:
      Hasher._combine(_:)(v12);
      break;
    default:
      Hasher._combine(_:)(1uLL);
      String.hash(into:)();
      swift_bridgeObjectRelease();
      break;
  }
}

unint64_t sub_1009C7F90(char a1)
{
  unint64_t result = 1701736302;
  switch(a1)
  {
    case 1:
      unint64_t result = 0x4449656C707061;
      break;
    case 2:
      unint64_t result = 0x706F724472656570;
      break;
    case 3:
      unint64_t result = 0xD000000000000013;
      break;
    case 4:
      unint64_t result = 0xD000000000000014;
      break;
    case 5:
      unint64_t result = 7562345;
      break;
    case 6:
      unint64_t result = 0x4449796C696D6166;
      break;
    case 7:
      unint64_t result = 6448503;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t sub_1009C808C(void *a1)
{
  uint64_t v2 = sub_10000588C(&qword_1016540D8);
  uint64_t v82 = *(void *)(v2 - 8);
  uint64_t v83 = v2;
  __chkstk_darwin(v2);
  unsigned int v81 = (char *)&v63 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v87 = sub_10000588C(&qword_1016540E0);
  uint64_t v68 = *(void *)(v87 - 8);
  __chkstk_darwin(v87);
  v86 = (char *)&v63 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v85 = sub_10000588C(&qword_1016540E8);
  uint64_t v67 = *(void *)(v85 - 8);
  __chkstk_darwin(v85);
  v84 = (char *)&v63 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v80 = sub_10000588C(&qword_1016540F0);
  uint64_t v66 = *(void *)(v80 - 8);
  __chkstk_darwin(v80);
  uint64_t v78 = (char *)&v63 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v79 = sub_10000588C(&qword_1016540F8);
  uint64_t v65 = *(void *)(v79 - 8);
  __chkstk_darwin(v79);
  uint64_t v77 = (char *)&v63 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v76 = sub_10000588C(&qword_101654100);
  uint64_t v64 = *(void *)(v76 - 8);
  __chkstk_darwin(v76);
  uint64_t v73 = (char *)&v63 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v75 = type metadata accessor for UUID();
  uint64_t v74 = *(void *)(v75 - 8);
  __chkstk_darwin(v75);
  uint64_t v72 = (char *)&v63 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v71 = sub_10000588C(&qword_101654108);
  uint64_t v70 = *(void *)(v71 - 8);
  __chkstk_darwin(v71);
  Swift::UInt v11 = (char *)&v63 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = sub_10000588C(&qword_101654110);
  uint64_t v69 = *(void *)(v12 - 8);
  __chkstk_darwin(v12);
  uint64_t v14 = (char *)&v63 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = type metadata accessor for PeerCommunicationIdentifier();
  __chkstk_darwin(v15);
  uint64_t v17 = (char *)&v63 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v92 = sub_10000588C(&qword_101654118);
  uint64_t v88 = *(void *)(v92 - 8);
  __chkstk_darwin(v92);
  Swift::String v19 = (char *)&v63 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10001CD44(a1, a1[3]);
  sub_1009CBA1C();
  v91 = v19;
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  sub_1009CA6F0(v90, (uint64_t)v17);
  switch(swift_getEnumCaseMultiPayload())
  {
    case 1u:
      uint64_t v24 = v74;
      Swift::String v25 = v72;
      uint64_t v26 = v75;
      (*(void (**)(char *, char *, uint64_t))(v74 + 32))(v72, v17, v75);
      char v93 = 2;
      sub_1009CBC14();
      uint64_t v27 = v73;
      uint64_t v29 = v91;
      uint64_t v28 = v92;
      KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)();
      sub_1009CBD64(&qword_10163B040, (void (*)(uint64_t))&type metadata accessor for UUID);
      uint64_t v30 = v76;
      KeyedEncodingContainer.encode<A>(_:forKey:)();
      (*(void (**)(char *, uint64_t))(v64 + 8))(v27, v30);
      (*(void (**)(char *, uint64_t))(v24 + 8))(v25, v26);
      return (*(uint64_t (**)(char *, uint64_t))(v88 + 8))(v29, v28);
    case 2u:
      char v93 = 3;
      sub_1009CBBC0();
      Swift::String v31 = v77;
      Swift::String v33 = v91;
      uint64_t v32 = v92;
      KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)();
      char v93 = 0;
      uint64_t v34 = v79;
      uint64_t v35 = v89;
      KeyedEncodingContainer.encode(_:forKey:)();
      if (!v35)
      {
        char v93 = 1;
        KeyedEncodingContainer.encode(_:forKey:)();
      }
      swift_bridgeObjectRelease();
      (*(void (**)(char *, uint64_t))(v65 + 8))(v31, v34);
      return (*(uint64_t (**)(char *, uint64_t))(v88 + 8))(v33, v32);
    case 3u:
      char v36 = *v17;
      uint64_t v38 = *((void *)v17 + 1);
      uint64_t v37 = *((void *)v17 + 2);
      char v93 = 4;
      sub_1009CBB6C();
      unint64_t v39 = v78;
      uint64_t v41 = v91;
      uint64_t v40 = v92;
      KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)();
      char v93 = v36;
      uint64_t v94 = v38;
      uint64_t v95 = v37;
      sub_1000C7FF0();
      uint64_t v42 = v80;
      KeyedEncodingContainer.encode<A>(_:forKey:)();
      (*(void (**)(char *, uint64_t))(v66 + 8))(v39, v42);
      (*(void (**)(char *, uint64_t))(v88 + 8))(v41, v40);
      return swift_bridgeObjectRelease();
    case 4u:
      char v43 = *v17;
      uint64_t v45 = *((void *)v17 + 1);
      uint64_t v44 = *((void *)v17 + 2);
      char v93 = 5;
      sub_1009CBB18();
      uint64_t v46 = v84;
      uint64_t v48 = v91;
      uint64_t v47 = v92;
      KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)();
      char v93 = v43;
      uint64_t v94 = v45;
      uint64_t v95 = v44;
      char v96 = 0;
      sub_1000C7FF0();
      uint64_t v49 = v85;
      uint64_t v50 = v89;
      KeyedEncodingContainer.encode<A>(_:forKey:)();
      if (v50)
      {
        swift_bridgeObjectRelease();
        (*(void (**)(char *, uint64_t))(v67 + 8))(v46, v49);
        (*(void (**)(char *, uint64_t))(v88 + 8))(v48, v47);
        return swift_bridgeObjectRelease();
      }
      else
      {
        swift_bridgeObjectRelease();
        char v93 = 1;
        KeyedEncodingContainer.encode(_:forKey:)();
        swift_bridgeObjectRelease();
        (*(void (**)(char *, uint64_t))(v67 + 8))(v46, v49);
        return (*(uint64_t (**)(char *, uint64_t))(v88 + 8))(v48, v47);
      }
    case 5u:
      LODWORD(v90) = v17[16];
      uint64_t v51 = *((void *)v17 + 3);
      uint64_t v52 = *((void *)v17 + 4);
      v84 = (char *)*((void *)v17 + 5);
      uint64_t v85 = v51;
      char v93 = 6;
      sub_1009CBAC4();
      uint64_t v53 = v86;
      NSString v54 = v91;
      uint64_t v55 = v92;
      KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)();
      char v93 = 0;
      uint64_t v56 = v87;
      uint64_t v57 = v89;
      KeyedEncodingContainer.encode(_:forKey:)();
      swift_bridgeObjectRelease();
      if (v57)
      {
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        (*(void (**)(char *, uint64_t))(v68 + 8))(v53, v56);
        return (*(uint64_t (**)(char *, uint64_t))(v88 + 8))(v54, v55);
      }
      else
      {
        char v93 = v90;
        uint64_t v94 = v85;
        uint64_t v95 = v52;
        char v96 = 1;
        sub_1000C7FF0();
        KeyedEncodingContainer.encode<A>(_:forKey:)();
        swift_bridgeObjectRelease();
        char v93 = 2;
        KeyedEncodingContainer.encode(_:forKey:)();
        Class v61 = v91;
        uint64_t v62 = v92;
        swift_bridgeObjectRelease();
        (*(void (**)(char *, uint64_t))(v68 + 8))(v53, v56);
        return (*(uint64_t (**)(char *, uint64_t))(v88 + 8))(v61, v62);
      }
    case 6u:
      char v93 = 0;
      sub_1009CBCBC();
      v59 = v91;
      uint64_t v58 = v92;
      KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)();
      (*(void (**)(char *, uint64_t))(v69 + 8))(v14, v12);
      goto LABEL_15;
    case 7u:
      char v93 = 7;
      sub_1009CBA70();
      v60 = v81;
      v59 = v91;
      uint64_t v58 = v92;
      KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)();
      (*(void (**)(char *, uint64_t))(v82 + 8))(v60, v83);
LABEL_15:
      uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v88 + 8))(v59, v58);
      break;
    default:
      char v93 = 1;
      sub_1009CBC68();
      uint64_t v20 = v91;
      uint64_t v21 = v92;
      KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)();
      uint64_t v22 = v71;
      KeyedEncodingContainer.encode(_:forKey:)();
      swift_bridgeObjectRelease();
      (*(void (**)(char *, uint64_t))(v70 + 8))(v11, v22);
      uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v88 + 8))(v20, v21);
      break;
  }
  return result;
}

uint64_t sub_1009C8E00@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v139 = a2;
  uint64_t v3 = sub_10000588C(&qword_101654170);
  uint64_t v131 = *(void *)(v3 - 8);
  uint64_t v132 = v3;
  __chkstk_darwin(v3);
  v137 = (char *)&v111 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v143 = sub_10000588C(&qword_101654178);
  uint64_t v124 = *(void *)(v143 - 8);
  __chkstk_darwin(v143);
  v142 = (char *)&v111 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v133 = sub_10000588C(&qword_101654180);
  uint64_t v123 = *(void *)(v133 - 8);
  __chkstk_darwin(v133);
  v138 = (char *)&v111 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v130 = sub_10000588C(&qword_101654188);
  uint64_t v121 = *(void *)(v130 - 8);
  __chkstk_darwin(v130);
  v136 = (char *)&v111 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v129 = sub_10000588C(&qword_101654190);
  uint64_t v122 = *(void *)(v129 - 8);
  __chkstk_darwin(v129);
  v141 = (char *)&v111 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v128 = sub_10000588C(&qword_101654198);
  uint64_t v120 = *(void *)(v128 - 8);
  __chkstk_darwin(v128);
  v140 = (char *)&v111 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v127 = sub_10000588C(&qword_1016541A0);
  uint64_t v119 = *(void *)(v127 - 8);
  __chkstk_darwin(v127);
  v135 = (char *)&v111 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v126 = sub_10000588C(&qword_1016541A8);
  uint64_t v125 = *(void *)(v126 - 8);
  __chkstk_darwin(v126);
  v134 = (char *)&v111 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v146 = sub_10000588C(&qword_1016541B0);
  uint64_t v144 = *(void *)(v146 - 8);
  __chkstk_darwin(v146);
  uint64_t v13 = (char *)&v111 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v145 = type metadata accessor for PeerCommunicationIdentifier();
  uint64_t v14 = __chkstk_darwin(v145);
  v117 = (uint64_t *)((char *)&v111 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v16 = __chkstk_darwin(v14);
  v118 = (char *)&v111 - v17;
  uint64_t v18 = __chkstk_darwin(v16);
  uint64_t v20 = (unsigned __int8 *)&v111 - v19;
  uint64_t v21 = __chkstk_darwin(v18);
  long long v23 = (char *)&v111 - v22;
  uint64_t v24 = __chkstk_darwin(v21);
  uint64_t v26 = (char *)&v111 - v25;
  uint64_t v27 = __chkstk_darwin(v24);
  uint64_t v29 = (char *)&v111 - v28;
  __chkstk_darwin(v27);
  Swift::String v31 = (char *)&v111 - v30;
  uint64_t v32 = a1[3];
  v147 = a1;
  sub_10001CD44(a1, v32);
  sub_1009CBA1C();
  uint64_t v33 = v148;
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  uint64_t v148 = v33;
  if (v33)
  {
LABEL_8:
    uint64_t v47 = (uint64_t)v147;
    return _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v47);
  }
  v113 = (uint64_t *)v29;
  v115 = v26;
  v114 = v20;
  v112 = (uint64_t *)v23;
  uint64_t v35 = v140;
  uint64_t v34 = v141;
  uint64_t v37 = v142;
  uint64_t v36 = v143;
  v116 = v31;
  uint64_t v38 = v146;
  uint64_t v39 = KeyedDecodingContainer.allKeys.getter();
  if (*(void *)(v39 + 16) != 1)
  {
    uint64_t v43 = type metadata accessor for DecodingError();
    uint64_t v44 = swift_allocError();
    uint64_t v46 = v45;
    sub_10000588C(&qword_10163FA98);
    *uint64_t v46 = v145;
    KeyedDecodingContainer.codingPath.getter();
    DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
    (*(void (**)(uint64_t *, void, uint64_t))(*(void *)(v43 - 8) + 104))(v46, enum case for DecodingError.typeMismatch(_:), v43);
    uint64_t v148 = v44;
    swift_willThrow();
LABEL_7:
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v144 + 8))(v13, v38);
    goto LABEL_8;
  }
  switch(*(unsigned char *)(v39 + 32))
  {
    case 1:
      unsigned __int8 v149 = 1;
      sub_1009CBC68();
      uint64_t v49 = v135;
      uint64_t v50 = v148;
      KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)();
      uint64_t v148 = v50;
      if (v50) {
        goto LABEL_7;
      }
      uint64_t v51 = v127;
      uint64_t v52 = KeyedDecodingContainer.decode(_:forKey:)();
      uint64_t v53 = v144;
      uint64_t v148 = 0;
      uint64_t v84 = v52;
      uint64_t v86 = v85;
      (*(void (**)(char *, uint64_t))(v119 + 8))(v49, v51);
      swift_bridgeObjectRelease();
      (*(void (**)(char *, uint64_t))(v53 + 8))(v13, v38);
      uint64_t v87 = v113;
      uint64_t *v113 = v84;
      v87[1] = v86;
      goto LABEL_30;
    case 2:
      unsigned __int8 v149 = 2;
      sub_1009CBC14();
      NSString v54 = v35;
      uint64_t v55 = v148;
      KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)();
      uint64_t v148 = v55;
      if (v55) {
        goto LABEL_7;
      }
      type metadata accessor for UUID();
      sub_1009CBD64((unint64_t *)&qword_10163B010, (void (*)(uint64_t))&type metadata accessor for UUID);
      uint64_t v87 = (uint64_t *)v115;
      uint64_t v56 = v128;
      uint64_t v57 = v148;
      KeyedDecodingContainer.decode<A>(_:forKey:)();
      uint64_t v148 = v57;
      if (v57)
      {
        (*(void (**)(char *, uint64_t))(v120 + 8))(v54, v56);
        goto LABEL_7;
      }
      (*(void (**)(char *, uint64_t))(v120 + 8))(v54, v56);
      swift_bridgeObjectRelease();
      (*(void (**)(char *, uint64_t))(v144 + 8))(v13, v38);
LABEL_30:
      swift_storeEnumTagMultiPayload();
      uint64_t v101 = (uint64_t)v87;
      goto LABEL_34;
    case 3:
      unsigned __int8 v149 = 3;
      sub_1009CBBC0();
      uint64_t v58 = v34;
      uint64_t v59 = v148;
      KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)();
      uint64_t v148 = v59;
      if (v59) {
        goto LABEL_7;
      }
      unsigned __int8 v149 = 0;
      uint64_t v60 = v129;
      uint64_t v61 = KeyedDecodingContainer.decode(_:forKey:)();
      uint64_t v62 = v144;
      uint64_t v148 = 0;
      uint64_t v88 = v61;
      unsigned __int8 v149 = 1;
      uint64_t v89 = KeyedDecodingContainer.decode(_:forKey:)();
      uint64_t v90 = v58;
      uint64_t v148 = 0;
      uint64_t v99 = v98;
      (*(void (**)(char *, uint64_t))(v122 + 8))(v90, v60);
      swift_bridgeObjectRelease();
      (*(void (**)(char *, uint64_t))(v62 + 8))(v13, v38);
      v100 = v112;
      uint64_t *v112 = v88;
      v100[1] = v89;
      v100[2] = v99;
      swift_storeEnumTagMultiPayload();
      uint64_t v101 = (uint64_t)v100;
      goto LABEL_34;
    case 4:
      unsigned __int8 v149 = 4;
      sub_1009CBB6C();
      uint64_t v63 = v136;
      uint64_t v64 = v148;
      KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)();
      uint64_t v148 = v64;
      if (v64) {
        goto LABEL_7;
      }
      sub_1000C8098();
      uint64_t v65 = v130;
      uint64_t v66 = v148;
      KeyedDecodingContainer.decode<A>(_:forKey:)();
      uint64_t v67 = v144;
      uint64_t v148 = v66;
      if (v66)
      {
        (*(void (**)(char *, uint64_t))(v121 + 8))(v63, v65);
        swift_bridgeObjectRelease();
        (*(void (**)(char *, uint64_t))(v67 + 8))(v13, v38);
        goto LABEL_8;
      }
      (*(void (**)(char *, uint64_t))(v121 + 8))(v63, v65);
      swift_bridgeObjectRelease();
      (*(void (**)(char *, uint64_t))(v67 + 8))(v13, v38);
      v91 = v150;
      uint64_t v92 = v151;
      char v93 = v114;
      unsigned __int8 *v114 = v149;
      *((void *)v93 + 1) = v91;
      *((void *)v93 + 2) = v92;
      swift_storeEnumTagMultiPayload();
      uint64_t v101 = (uint64_t)v93;
      goto LABEL_34;
    case 5:
      unsigned __int8 v149 = 5;
      sub_1009CBB18();
      uint64_t v68 = v138;
      uint64_t v69 = v148;
      KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)();
      uint64_t v148 = v69;
      if (v69) {
        goto LABEL_7;
      }
      char v152 = 0;
      sub_1000C8098();
      uint64_t v70 = v133;
      uint64_t v71 = v148;
      KeyedDecodingContainer.decode<A>(_:forKey:)();
      uint64_t v72 = v144;
      uint64_t v148 = v71;
      if (v71)
      {
        (*(void (**)(char *, uint64_t))(v123 + 8))(v68, v70);
        swift_bridgeObjectRelease();
        (*(void (**)(char *, uint64_t))(v72 + 8))(v13, v38);
        goto LABEL_8;
      }
      LODWORD(v142) = v149;
      uint64_t v94 = v151;
      uint64_t v143 = (uint64_t)v150;
      char v152 = 1;
      uint64_t v95 = KeyedDecodingContainer.decode(_:forKey:)();
      uint64_t v148 = 0;
      uint64_t v102 = v95;
      uint64_t v104 = v103;
      (*(void (**)(char *, uint64_t))(v123 + 8))(v68, v70);
      swift_bridgeObjectRelease();
      (*(void (**)(char *, uint64_t))(v72 + 8))(v13, v146);
      v105 = v118;
      unsigned char *v118 = (_BYTE)v142;
      v105[1] = v143;
      v105[2] = v94;
      v105[3] = v102;
      v105[4] = v104;
      swift_storeEnumTagMultiPayload();
      uint64_t v101 = (uint64_t)v105;
      goto LABEL_34;
    case 6:
      uint64_t v73 = v36;
      unsigned __int8 v149 = 6;
      sub_1009CBAC4();
      uint64_t v74 = v148;
      KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)();
      uint64_t v148 = v74;
      if (v74) {
        goto LABEL_7;
      }
      unsigned __int8 v149 = 0;
      uint64_t v75 = v37;
      uint64_t v76 = KeyedDecodingContainer.decode(_:forKey:)();
      uint64_t v77 = v144;
      uint64_t v148 = 0;
      uint64_t v78 = v76;
      uint64_t v80 = v79;
      char v152 = 1;
      sub_1000C8098();
      uint64_t v81 = v148;
      KeyedDecodingContainer.decode<A>(_:forKey:)();
      uint64_t v148 = v81;
      if (v81)
      {
        swift_bridgeObjectRelease();
        (*(void (**)(char *, uint64_t))(v124 + 8))(v37, v73);
        swift_bridgeObjectRelease();
        (*(void (**)(char *, uint64_t))(v77 + 8))(v13, v38);
        goto LABEL_8;
      }
      v141 = v13;
      LODWORD(v140) = v149;
      uint64_t v96 = v151;
      v138 = v150;
      char v152 = 2;
      uint64_t v97 = KeyedDecodingContainer.decode(_:forKey:)();
      uint64_t v148 = 0;
      uint64_t v106 = v97;
      uint64_t v108 = v107;
      (*(void (**)(char *, uint64_t))(v124 + 8))(v75, v73);
      swift_bridgeObjectRelease();
      (*(void (**)(char *, uint64_t))(v144 + 8))(v141, v38);
      v109 = v117;
      uint64_t *v117 = v78;
      v109[1] = v80;
      *((unsigned char *)v109 + 16) = (_BYTE)v140;
      v109[3] = (uint64_t)v138;
      v109[4] = v96;
      v109[5] = v106;
      v109[6] = v108;
      swift_storeEnumTagMultiPayload();
      uint64_t v101 = (uint64_t)v109;
LABEL_34:
      uint64_t v42 = (uint64_t)v116;
      sub_1002A8790(v101, (uint64_t)v116);
LABEL_35:
      uint64_t v110 = (uint64_t)v147;
      sub_1002A8790(v42, v139);
      uint64_t v47 = v110;
      break;
    case 7:
      unsigned __int8 v149 = 7;
      sub_1009CBA70();
      uint64_t v82 = v137;
      uint64_t v83 = v148;
      KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)();
      uint64_t v148 = v83;
      if (v83) {
        goto LABEL_7;
      }
      (*(void (**)(char *, uint64_t))(v131 + 8))(v82, v132);
      swift_bridgeObjectRelease();
      (*(void (**)(char *, uint64_t))(v144 + 8))(v13, v38);
      uint64_t v42 = (uint64_t)v116;
      goto LABEL_28;
    default:
      unsigned __int8 v149 = 0;
      sub_1009CBCBC();
      uint64_t v40 = v134;
      uint64_t v41 = v148;
      KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)();
      uint64_t v148 = v41;
      if (v41) {
        goto LABEL_7;
      }
      (*(void (**)(char *, uint64_t))(v125 + 8))(v40, v126);
      swift_bridgeObjectRelease();
      (*(void (**)(char *, uint64_t))(v144 + 8))(v13, v38);
      uint64_t v42 = (uint64_t)v116;
LABEL_28:
      swift_storeEnumTagMultiPayload();
      goto LABEL_35;
  }
  return _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v47);
}

uint64_t sub_1009C9F70()
{
  return RawRepresentable<>.init(from:)();
}

uint64_t sub_1009C9FD0()
{
  return RawRepresentable<>.encode(to:)();
}

uint64_t sub_1009CA020(uint64_t a1)
{
  unint64_t v2 = sub_1009CBC68();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1009CA05C(uint64_t a1)
{
  unint64_t v2 = sub_1009CBC68();

  return CodingKey.debugDescription.getter(a1, v2);
}

unint64_t sub_1009CA098()
{
  return sub_1009C7F90(*v0);
}

uint64_t sub_1009CA0A0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_1009CCA78(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_1009CA0C8(uint64_t a1)
{
  unint64_t v2 = sub_1009CBA1C();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1009CA104(uint64_t a1)
{
  unint64_t v2 = sub_1009CBA1C();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_1009CA140()
{
  if (*v0) {
    return 0x696669746E656469;
  }
  else {
    return 0x6E69616D6F64;
  }
}

uint64_t sub_1009CA17C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_1009CCD94(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_1009CA1A4(uint64_t a1)
{
  unint64_t v2 = sub_1009CBBC0();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1009CA1E0(uint64_t a1)
{
  unint64_t v2 = sub_1009CBBC0();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_1009CA21C()
{
  unint64_t v1 = 0x74616E6974736564;
  if (*v0 != 1) {
    unint64_t v1 = 0xD000000000000015;
  }
  if (*v0) {
    return v1;
  }
  else {
    return 0x44495344746C61;
  }
}

uint64_t sub_1009CA284@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_1009CCE8C(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_1009CA2AC(uint64_t a1)
{
  unint64_t v2 = sub_1009CBAC4();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1009CA2E8(uint64_t a1)
{
  unint64_t v2 = sub_1009CBAC4();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_1009CA324()
{
  if (*v0) {
    return 0xD000000000000015;
  }
  else {
    return 0x74616E6974736564;
  }
}

uint64_t sub_1009CA36C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_1009CCFF8(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_1009CA394(uint64_t a1)
{
  unint64_t v2 = sub_1009CBB18();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1009CA3D0(uint64_t a1)
{
  unint64_t v2 = sub_1009CBB18();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_1009CA40C(uint64_t a1)
{
  unint64_t v2 = sub_1009CBB6C();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1009CA448(uint64_t a1)
{
  unint64_t v2 = sub_1009CBB6C();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_1009CA484(uint64_t a1)
{
  unint64_t v2 = sub_1009CBCBC();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1009CA4C0(uint64_t a1)
{
  unint64_t v2 = sub_1009CBCBC();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_1009CA4FC(uint64_t a1)
{
  unint64_t v2 = sub_1009CBC14();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1009CA538(uint64_t a1)
{
  unint64_t v2 = sub_1009CBC14();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_1009CA574(uint64_t a1)
{
  unint64_t v2 = sub_1009CBA70();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1009CA5B0(uint64_t a1)
{
  unint64_t v2 = sub_1009CBA70();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_1009CA5EC@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_1009C8E00(a1, a2);
}

uint64_t sub_1009CA604(void *a1)
{
  return sub_1009C808C(a1);
}

Swift::Int sub_1009CA61C()
{
  return Hasher._finalize()();
}

Swift::Int sub_1009CA660()
{
  return Hasher._finalize()();
}

uint64_t type metadata accessor for PeerCommunicationIdentifier()
{
  uint64_t result = qword_101654090;
  if (!qword_101654090) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t sub_1009CA6F0(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for PeerCommunicationIdentifier();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_1009CA754(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for UUID();
  uint64_t v85 = *(void *)(v4 - 8);
  uint64_t v86 = v4;
  __chkstk_darwin(v4);
  uint64_t v84 = (char *)&v83 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = type metadata accessor for PeerCommunicationIdentifier();
  uint64_t v7 = __chkstk_darwin(v6);
  uint64_t v9 = (char *)&v83 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = __chkstk_darwin(v7);
  uint64_t v12 = (char **)((char *)&v83 - v11);
  uint64_t v13 = __chkstk_darwin(v10);
  uint64_t v15 = (unsigned __int8 *)&v83 - v14;
  uint64_t v16 = __chkstk_darwin(v13);
  uint64_t v18 = (char **)((char *)&v83 - v17);
  uint64_t v19 = __chkstk_darwin(v16);
  uint64_t v21 = (char *)&v83 - v20;
  __chkstk_darwin(v19);
  long long v23 = (uint64_t *)((char *)&v83 - v22);
  uint64_t v24 = sub_10000588C(&qword_101654018);
  uint64_t v25 = __chkstk_darwin(v24 - 8);
  uint64_t v27 = (uint64_t *)((char *)&v83 + *(int *)(v25 + 56) - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v28 = a1;
  uint64_t v29 = (char *)&v83 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1009CA6F0(v28, (uint64_t)v29);
  sub_1009CA6F0(a2, (uint64_t)v27);
  switch(swift_getEnumCaseMultiPayload())
  {
    case 1u:
      sub_1009CA6F0((uint64_t)v29, (uint64_t)v21);
      if (swift_getEnumCaseMultiPayload() != 1)
      {
        (*(void (**)(char *, uint64_t))(v85 + 8))(v21, v86);
        goto LABEL_51;
      }
      uint64_t v37 = v84;
      uint64_t v36 = v85;
      uint64_t v38 = v86;
      (*(void (**)(char *, uint64_t *, uint64_t))(v85 + 32))(v84, v27, v86);
      char v39 = static UUID.== infix(_:_:)();
      uint64_t v40 = *(void (**)(char *, uint64_t))(v36 + 8);
      v40(v37, v38);
      v40(v21, v38);
      sub_1009CAFA4((uint64_t)v29);
      return v39 & 1;
    case 2u:
      sub_1009CA6F0((uint64_t)v29, (uint64_t)v18);
      uint64_t v42 = v18[1];
      uint64_t v41 = v18[2];
      if (swift_getEnumCaseMultiPayload() != 2) {
        goto LABEL_50;
      }
      if (*v18 != *v27) {
        goto LABEL_54;
      }
      if (v42 == v27[1] && v41 == v27[2]) {
        goto LABEL_71;
      }
      goto LABEL_25;
    case 3u:
      sub_1009CA6F0((uint64_t)v29, (uint64_t)v15);
      uint64_t v45 = *((void *)v15 + 1);
      uint64_t v44 = *((void *)v15 + 2);
      if (swift_getEnumCaseMultiPayload() != 3) {
        goto LABEL_50;
      }
      if (*v15 != *(unsigned __int8 *)v27)
      {
LABEL_54:
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
LABEL_55:
        sub_1009CAFA4((uint64_t)v29);
        goto LABEL_52;
      }
      if (v45 == v27[1] && v44 == v27[2])
      {
LABEL_71:
        swift_bridgeObjectRelease_n();
      }
      else
      {
LABEL_25:
        char v47 = _stringCompareWithSmolCheck(_:_:expecting:)();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        if ((v47 & 1) == 0) {
          goto LABEL_55;
        }
      }
LABEL_72:
      uint64_t v78 = (uint64_t)v29;
      goto LABEL_73;
    case 4u:
      uint64_t v48 = (uint64_t)v29;
      sub_1009CA6F0((uint64_t)v29, (uint64_t)v12);
      uint64_t v50 = v12[1];
      uint64_t v49 = v12[2];
      uint64_t v52 = v12[3];
      uint64_t v51 = v12[4];
      if (swift_getEnumCaseMultiPayload() != 4)
      {
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        uint64_t v29 = (char *)v48;
        goto LABEL_51;
      }
      uint64_t v53 = v27[2];
      uint64_t v54 = v27[4];
      if (*(unsigned __int8 *)v12 != *(unsigned __int8 *)v27)
      {
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
LABEL_57:
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        sub_1009CAFA4(v48);
        goto LABEL_52;
      }
      uint64_t v55 = v27[1];
      uint64_t v56 = v27[3];
      if (v50 == v55 && v49 == v53)
      {
        swift_bridgeObjectRelease_n();
      }
      else
      {
        char v58 = _stringCompareWithSmolCheck(_:_:expecting:)();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        if ((v58 & 1) == 0) {
          goto LABEL_57;
        }
      }
      if (v52 == v56 && v51 == v54)
      {
        swift_bridgeObjectRelease_n();
        uint64_t v78 = v48;
      }
      else
      {
        char v81 = _stringCompareWithSmolCheck(_:_:expecting:)();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        uint64_t v78 = v48;
        if ((v81 & 1) == 0)
        {
LABEL_70:
          sub_1009CAFA4(v78);
          goto LABEL_52;
        }
      }
      goto LABEL_73;
    case 5u:
      sub_1009CA6F0((uint64_t)v29, (uint64_t)v9);
      uint64_t v60 = *(void *)v9;
      uint64_t v59 = *((void *)v9 + 1);
      int v61 = v9[16];
      uint64_t v62 = *((void *)v9 + 3);
      uint64_t v63 = *((void *)v9 + 4);
      uint64_t v64 = (char *)*((void *)v9 + 5);
      uint64_t v65 = *((void *)v9 + 6);
      if (swift_getEnumCaseMultiPayload() == 5)
      {
        uint64_t v84 = v64;
        uint64_t v66 = v29;
        uint64_t v67 = *v27;
        uint64_t v68 = v27[1];
        int v69 = *((unsigned __int8 *)v27 + 16);
        uint64_t v70 = v27[4];
        uint64_t v71 = (char *)v27[5];
        uint64_t v72 = v27[6];
        uint64_t v85 = v27[3];
        uint64_t v86 = v72;
        BOOL v73 = v60 == v67 && v59 == v68;
        uint64_t v83 = v71;
        int v74 = v69;
        if (v73)
        {
          swift_bridgeObjectRelease_n();
        }
        else
        {
          char v75 = _stringCompareWithSmolCheck(_:_:expecting:)();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          if ((v75 & 1) == 0)
          {
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
LABEL_68:
            swift_bridgeObjectRelease();
LABEL_69:
            uint64_t v78 = (uint64_t)v66;
            goto LABEL_70;
          }
        }
        if (v61 != v74)
        {
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
LABEL_67:
          swift_bridgeObjectRelease();
          goto LABEL_68;
        }
        if (v62 == v85 && v63 == v70)
        {
          swift_bridgeObjectRelease_n();
        }
        else
        {
          char v77 = _stringCompareWithSmolCheck(_:_:expecting:)();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          if ((v77 & 1) == 0) {
            goto LABEL_67;
          }
        }
        if (v84 == v83 && v65 == v86)
        {
          swift_bridgeObjectRelease_n();
          uint64_t v78 = (uint64_t)v66;
        }
        else
        {
          char v82 = _stringCompareWithSmolCheck(_:_:expecting:)();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          if ((v82 & 1) == 0) {
            goto LABEL_69;
          }
          uint64_t v78 = (uint64_t)v66;
        }
LABEL_73:
        sub_1009CAFA4(v78);
        char v39 = 1;
      }
      else
      {
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
LABEL_50:
        swift_bridgeObjectRelease();
LABEL_51:
        sub_1009CAF44((uint64_t)v29);
LABEL_52:
        char v39 = 0;
      }
      return v39 & 1;
    case 6u:
      if (swift_getEnumCaseMultiPayload() == 6) {
        goto LABEL_72;
      }
      goto LABEL_51;
    case 7u:
      if (swift_getEnumCaseMultiPayload() == 7) {
        goto LABEL_72;
      }
      goto LABEL_51;
    default:
      sub_1009CA6F0((uint64_t)v29, (uint64_t)v23);
      uint64_t v31 = *v23;
      uint64_t v30 = v23[1];
      if (swift_getEnumCaseMultiPayload()) {
        goto LABEL_50;
      }
      uint64_t v32 = *v27;
      uint64_t v33 = v27[1];
      if (v31 == v32 && v30 == v33) {
        goto LABEL_71;
      }
      char v35 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if (v35) {
        goto LABEL_72;
      }
      goto LABEL_55;
  }
}

uint64_t sub_1009CAF44(uint64_t a1)
{
  uint64_t v2 = sub_10000588C(&qword_101654018);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_1009CAFA4(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for PeerCommunicationIdentifier();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

ValueMetadata *type metadata accessor for PeerTrustType()
{
  return &type metadata for PeerTrustType;
}

void *sub_1009CB014(void *a1, void *a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v8 = *a2;
    *a1 = *a2;
    a1 = (void *)(v8 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v6 = *(void *)(a3 - 8);
    switch(swift_getEnumCaseMultiPayload())
    {
      case 0u:
        uint64_t v7 = a2[1];
        *a1 = *a2;
        a1[1] = v7;
        swift_bridgeObjectRetain();
        swift_storeEnumTagMultiPayload();
        break;
      case 1u:
        uint64_t v10 = type metadata accessor for UUID();
        (*(void (**)(void *, void *, uint64_t))(*(void *)(v10 - 8) + 16))(a1, a2, v10);
        swift_storeEnumTagMultiPayload();
        break;
      case 2u:
        *(_OWORD *)a1 = *(_OWORD *)a2;
        a1[2] = a2[2];
        swift_bridgeObjectRetain();
        swift_storeEnumTagMultiPayload();
        break;
      case 3u:
        *(unsigned char *)a1 = *(unsigned char *)a2;
        uint64_t v11 = a2[2];
        a1[1] = a2[1];
        a1[2] = v11;
        swift_bridgeObjectRetain();
        swift_storeEnumTagMultiPayload();
        break;
      case 4u:
        *(unsigned char *)a1 = *(unsigned char *)a2;
        uint64_t v12 = a2[2];
        a1[1] = a2[1];
        a1[2] = v12;
        uint64_t v13 = a2[3];
        uint64_t v14 = a2[4];
        a1[3] = v13;
        a1[4] = v14;
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_storeEnumTagMultiPayload();
        break;
      case 5u:
        uint64_t v15 = a2[1];
        *a1 = *a2;
        a1[1] = v15;
        *((unsigned char *)a1 + 16) = *((unsigned char *)a2 + 16);
        uint64_t v16 = a2[4];
        a1[3] = a2[3];
        a1[4] = v16;
        uint64_t v17 = a2[5];
        uint64_t v18 = a2[6];
        a1[5] = v17;
        a1[6] = v18;
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_storeEnumTagMultiPayload();
        break;
      default:
        memcpy(a1, a2, *(void *)(v6 + 64));
        break;
    }
  }
  return a1;
}

uint64_t sub_1009CB23C(uint64_t a1)
{
  uint64_t result = swift_getEnumCaseMultiPayload();
  switch((int)result)
  {
    case 0:
    case 2:
    case 3:
      goto LABEL_7;
    case 1:
      uint64_t v3 = type metadata accessor for UUID();
      uint64_t v4 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8);
      return v4(a1, v3);
    case 4:
      swift_bridgeObjectRelease();
      goto LABEL_7;
    case 5:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
LABEL_7:
      uint64_t result = swift_bridgeObjectRelease();
      break;
    default:
      return result;
  }
  return result;
}

void *sub_1009CB344(void *a1, void *a2, uint64_t a3)
{
  switch(swift_getEnumCaseMultiPayload())
  {
    case 0u:
      uint64_t v6 = a2[1];
      *a1 = *a2;
      a1[1] = v6;
      swift_bridgeObjectRetain();
      goto LABEL_9;
    case 1u:
      uint64_t v7 = type metadata accessor for UUID();
      (*(void (**)(void *, void *, uint64_t))(*(void *)(v7 - 8) + 16))(a1, a2, v7);
      goto LABEL_9;
    case 2u:
      *(_OWORD *)a1 = *(_OWORD *)a2;
      a1[2] = a2[2];
      swift_bridgeObjectRetain();
      goto LABEL_9;
    case 3u:
      *(unsigned char *)a1 = *(unsigned char *)a2;
      uint64_t v8 = a2[2];
      a1[1] = a2[1];
      a1[2] = v8;
      swift_bridgeObjectRetain();
      goto LABEL_9;
    case 4u:
      *(unsigned char *)a1 = *(unsigned char *)a2;
      uint64_t v9 = a2[2];
      a1[1] = a2[1];
      a1[2] = v9;
      uint64_t v10 = a2[3];
      uint64_t v11 = a2[4];
      a1[3] = v10;
      a1[4] = v11;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      goto LABEL_9;
    case 5u:
      uint64_t v12 = a2[1];
      *a1 = *a2;
      a1[1] = v12;
      *((unsigned char *)a1 + 16) = *((unsigned char *)a2 + 16);
      uint64_t v13 = a2[4];
      a1[3] = a2[3];
      a1[4] = v13;
      uint64_t v14 = a2[5];
      uint64_t v15 = a2[6];
      a1[5] = v14;
      a1[6] = v15;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
LABEL_9:
      swift_storeEnumTagMultiPayload();
      break;
    default:
      memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64));
      break;
  }
  return a1;
}

void *sub_1009CB514(void *a1, void *a2, uint64_t a3)
{
  if (a1 != a2)
  {
    sub_1009CAFA4((uint64_t)a1);
    switch(swift_getEnumCaseMultiPayload())
    {
      case 0u:
        *a1 = *a2;
        a1[1] = a2[1];
        swift_bridgeObjectRetain();
        swift_storeEnumTagMultiPayload();
        break;
      case 1u:
        uint64_t v6 = type metadata accessor for UUID();
        (*(void (**)(void *, void *, uint64_t))(*(void *)(v6 - 8) + 16))(a1, a2, v6);
        swift_storeEnumTagMultiPayload();
        break;
      case 2u:
        *a1 = *a2;
        a1[1] = a2[1];
        a1[2] = a2[2];
        swift_bridgeObjectRetain();
        swift_storeEnumTagMultiPayload();
        break;
      case 3u:
        *(unsigned char *)a1 = *(unsigned char *)a2;
        a1[1] = a2[1];
        a1[2] = a2[2];
        swift_bridgeObjectRetain();
        swift_storeEnumTagMultiPayload();
        break;
      case 4u:
        *(unsigned char *)a1 = *(unsigned char *)a2;
        a1[1] = a2[1];
        a1[2] = a2[2];
        a1[3] = a2[3];
        a1[4] = a2[4];
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_storeEnumTagMultiPayload();
        break;
      case 5u:
        *a1 = *a2;
        a1[1] = a2[1];
        *((unsigned char *)a1 + 16) = *((unsigned char *)a2 + 16);
        a1[3] = a2[3];
        a1[4] = a2[4];
        a1[5] = a2[5];
        a1[6] = a2[6];
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_storeEnumTagMultiPayload();
        break;
      default:
        memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64));
        break;
    }
  }
  return a1;
}

void *sub_1009CB748(void *a1, const void *a2, uint64_t a3)
{
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v6 = type metadata accessor for UUID();
    (*(void (**)(void *, const void *, uint64_t))(*(void *)(v6 - 8) + 32))(a1, a2, v6);
    swift_storeEnumTagMultiPayload();
  }
  else
  {
    memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64));
  }
  return a1;
}

void *sub_1009CB800(void *a1, const void *a2, uint64_t a3)
{
  if (a1 != a2)
  {
    sub_1009CAFA4((uint64_t)a1);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      uint64_t v6 = type metadata accessor for UUID();
      (*(void (**)(void *, const void *, uint64_t))(*(void *)(v6 - 8) + 32))(a1, a2, v6);
      swift_storeEnumTagMultiPayload();
    }
    else
    {
      memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64));
    }
  }
  return a1;
}

uint64_t sub_1009CB8C8()
{
  uint64_t result = type metadata accessor for UUID();
  if (v1 <= 0x3F)
  {
    swift_initEnumMetadataMultiPayload();
    return 0;
  }
  return result;
}

uint64_t sub_1009CB97C()
{
  return sub_1009CBD64(&qword_1016540C8, (void (*)(uint64_t))type metadata accessor for PeerCommunicationIdentifier);
}

unint64_t sub_1009CB9C8()
{
  unint64_t result = qword_1016540D0;
  if (!qword_1016540D0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1016540D0);
  }
  return result;
}

unint64_t sub_1009CBA1C()
{
  unint64_t result = qword_101654120;
  if (!qword_101654120)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_101654120);
  }
  return result;
}

unint64_t sub_1009CBA70()
{
  unint64_t result = qword_101654128;
  if (!qword_101654128)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_101654128);
  }
  return result;
}

unint64_t sub_1009CBAC4()
{
  unint64_t result = qword_101654130;
  if (!qword_101654130)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_101654130);
  }
  return result;
}

unint64_t sub_1009CBB18()
{
  unint64_t result = qword_101654138;
  if (!qword_101654138)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_101654138);
  }
  return result;
}

unint64_t sub_1009CBB6C()
{
  unint64_t result = qword_101654140;
  if (!qword_101654140)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_101654140);
  }
  return result;
}

unint64_t sub_1009CBBC0()
{
  unint64_t result = qword_101654148;
  if (!qword_101654148)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_101654148);
  }
  return result;
}

unint64_t sub_1009CBC14()
{
  unint64_t result = qword_101654150;
  if (!qword_101654150)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_101654150);
  }
  return result;
}

unint64_t sub_1009CBC68()
{
  unint64_t result = qword_101654158;
  if (!qword_101654158)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_101654158);
  }
  return result;
}

unint64_t sub_1009CBCBC()
{
  unint64_t result = qword_101654160;
  if (!qword_101654160)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_101654160);
  }
  return result;
}

unint64_t sub_1009CBD10()
{
  unint64_t result = qword_101654168;
  if (!qword_101654168)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_101654168);
  }
  return result;
}

uint64_t sub_1009CBD64(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

unsigned char *storeEnumTagSinglePayload for PeerCommunicationIdentifier.CodingKeys(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 7 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 7) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xF9) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xF8)
  {
    unsigned int v6 = ((a2 - 249) >> 8) + 1;
    *uint64_t result = a2 + 7;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1009CBE78);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 7;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for PeerCommunicationIdentifier.CodingKeys()
{
  return &type metadata for PeerCommunicationIdentifier.CodingKeys;
}

ValueMetadata *type metadata accessor for PeerCommunicationIdentifier.NoneCodingKeys()
{
  return &type metadata for PeerCommunicationIdentifier.NoneCodingKeys;
}

ValueMetadata *type metadata accessor for PeerCommunicationIdentifier.AppleIDCodingKeys()
{
  return &type metadata for PeerCommunicationIdentifier.AppleIDCodingKeys;
}

ValueMetadata *type metadata accessor for PeerCommunicationIdentifier.PeerDropCodingKeys()
{
  return &type metadata for PeerCommunicationIdentifier.PeerDropCodingKeys;
}

ValueMetadata *type metadata accessor for PeerCommunicationIdentifier.ExampleOtherChannelCodingKeys()
{
  return &type metadata for PeerCommunicationIdentifier.ExampleOtherChannelCodingKeys;
}

unsigned char *_s12searchpartyd27PeerCommunicationIdentifierO17AppleIDCodingKeysOwst_0(unsigned char *result, int a2, int a3)
{
  if ((a3 + 1) >= 0x10000) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) < 0x100) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2)
  {
    switch(v5)
    {
      case 1:
        *uint64_t result = a2;
        return result;
      case 2:
        *(_WORD *)uint64_t result = a2;
        return result;
      case 3:
        goto LABEL_19;
      case 4:
        *(_DWORD *)uint64_t result = a2;
        return result;
      default:
        return result;
    }
  }
  switch(v5)
  {
    case 1:
      *uint64_t result = 0;
      break;
    case 2:
      *(_WORD *)uint64_t result = 0;
      break;
    case 3:
LABEL_19:
      __break(1u);
      JUMPOUT(0x1009CBF90);
    case 4:
      *(_DWORD *)uint64_t result = 0;
      break;
    default:
      return result;
  }
  return result;
}

ValueMetadata *type metadata accessor for PeerCommunicationIdentifier.MessagingDestinationCodingKeys()
{
  return &type metadata for PeerCommunicationIdentifier.MessagingDestinationCodingKeys;
}

unsigned char *_s12searchpartyd13PeerTrustTypeOwst_0(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFE)
  {
    unsigned int v6 = ((a2 - 255) >> 8) + 1;
    *uint64_t result = a2 + 1;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1009CC094);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 1;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for PeerCommunicationIdentifier.IdsCodingKeys()
{
  return &type metadata for PeerCommunicationIdentifier.IdsCodingKeys;
}

unsigned char *storeEnumTagSinglePayload for PeerCommunicationIdentifier.FamilyIDSCodingKeys(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 2 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 2) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFE) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFD)
  {
    unsigned int v6 = ((a2 - 254) >> 8) + 1;
    *uint64_t result = a2 + 2;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1009CC198);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 2;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for PeerCommunicationIdentifier.FamilyIDSCodingKeys()
{
  return &type metadata for PeerCommunicationIdentifier.FamilyIDSCodingKeys;
}

ValueMetadata *type metadata accessor for PeerCommunicationIdentifier.WebCodingKeys()
{
  return &type metadata for PeerCommunicationIdentifier.WebCodingKeys;
}

unint64_t sub_1009CC1E4()
{
  unint64_t result = qword_1016541B8;
  if (!qword_1016541B8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1016541B8);
  }
  return result;
}

unint64_t sub_1009CC23C()
{
  unint64_t result = qword_1016541C0;
  if (!qword_1016541C0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1016541C0);
  }
  return result;
}

unint64_t sub_1009CC294()
{
  unint64_t result = qword_1016541C8;
  if (!qword_1016541C8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1016541C8);
  }
  return result;
}

unint64_t sub_1009CC2EC()
{
  unint64_t result = qword_1016541D0;
  if (!qword_1016541D0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1016541D0);
  }
  return result;
}

unint64_t sub_1009CC344()
{
  unint64_t result = qword_1016541D8;
  if (!qword_1016541D8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1016541D8);
  }
  return result;
}

unint64_t sub_1009CC39C()
{
  unint64_t result = qword_1016541E0;
  if (!qword_1016541E0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1016541E0);
  }
  return result;
}

unint64_t sub_1009CC3F4()
{
  unint64_t result = qword_1016541E8;
  if (!qword_1016541E8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1016541E8);
  }
  return result;
}

unint64_t sub_1009CC44C()
{
  unint64_t result = qword_1016541F0;
  if (!qword_1016541F0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1016541F0);
  }
  return result;
}

unint64_t sub_1009CC4A4()
{
  unint64_t result = qword_1016541F8;
  if (!qword_1016541F8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1016541F8);
  }
  return result;
}

unint64_t sub_1009CC4FC()
{
  unint64_t result = qword_101654200;
  if (!qword_101654200)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_101654200);
  }
  return result;
}

unint64_t sub_1009CC554()
{
  unint64_t result = qword_101654208;
  if (!qword_101654208)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_101654208);
  }
  return result;
}

unint64_t sub_1009CC5AC()
{
  unint64_t result = qword_101654210;
  if (!qword_101654210)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_101654210);
  }
  return result;
}

unint64_t sub_1009CC604()
{
  unint64_t result = qword_101654218;
  if (!qword_101654218)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_101654218);
  }
  return result;
}

unint64_t sub_1009CC65C()
{
  unint64_t result = qword_101654220;
  if (!qword_101654220)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_101654220);
  }
  return result;
}

unint64_t sub_1009CC6B4()
{
  unint64_t result = qword_101654228;
  if (!qword_101654228)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_101654228);
  }
  return result;
}

unint64_t sub_1009CC70C()
{
  unint64_t result = qword_101654230;
  if (!qword_101654230)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_101654230);
  }
  return result;
}

unint64_t sub_1009CC764()
{
  unint64_t result = qword_101654238;
  if (!qword_101654238)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_101654238);
  }
  return result;
}

unint64_t sub_1009CC7BC()
{
  unint64_t result = qword_101654240;
  if (!qword_101654240)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_101654240);
  }
  return result;
}

unint64_t sub_1009CC814()
{
  unint64_t result = qword_101654248;
  if (!qword_101654248)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_101654248);
  }
  return result;
}

unint64_t sub_1009CC86C()
{
  unint64_t result = qword_101654250;
  if (!qword_101654250)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_101654250);
  }
  return result;
}

unint64_t sub_1009CC8C4()
{
  unint64_t result = qword_101654258;
  if (!qword_101654258)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_101654258);
  }
  return result;
}

unint64_t sub_1009CC91C()
{
  unint64_t result = qword_101654260;
  if (!qword_101654260)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_101654260);
  }
  return result;
}

unint64_t sub_1009CC974()
{
  unint64_t result = qword_101654268;
  if (!qword_101654268)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_101654268);
  }
  return result;
}

unint64_t sub_1009CC9CC()
{
  unint64_t result = qword_101654270;
  if (!qword_101654270)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_101654270);
  }
  return result;
}

unint64_t sub_1009CCA24()
{
  unint64_t result = qword_101654278;
  if (!qword_101654278)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_101654278);
  }
  return result;
}

uint64_t sub_1009CCA78(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 1701736302 && a2 == 0xE400000000000000;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x4449656C707061 && a2 == 0xE700000000000000 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0x706F724472656570 && a2 == 0xE800000000000000 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else if (a1 == 0xD000000000000013 && a2 == 0x800000010140E130 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 3;
  }
  else if (a1 == 0xD000000000000014 && a2 == 0x800000010140E150 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 4;
  }
  else if (a1 == 7562345 && a2 == 0xE300000000000000 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 5;
  }
  else if (a1 == 0x4449796C696D6166 && a2 == 0xE900000000000053 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 6;
  }
  else if (a1 == 6448503 && a2 == 0xE300000000000000)
  {
    swift_bridgeObjectRelease();
    return 7;
  }
  else
  {
    char v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v6) {
      return 7;
    }
    else {
      return 8;
    }
  }
}

uint64_t sub_1009CCD94(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 0x6E69616D6F64 && a2 == 0xE600000000000000;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x696669746E656469 && a2 == 0xEA00000000007265)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else
  {
    char v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v6) {
      return 1;
    }
    else {
      return 2;
    }
  }
}

uint64_t sub_1009CCE8C(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 0x44495344746C61 && a2 == 0xE700000000000000;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x74616E6974736564 && a2 == 0xEB000000006E6F69 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0xD000000000000015 && a2 == 0x80000001013EE400)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else
  {
    char v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v6) {
      return 2;
    }
    else {
      return 3;
    }
  }
}

uint64_t sub_1009CCFF8(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 0x74616E6974736564 && a2 == 0xEB000000006E6F69;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0xD000000000000015 && a2 == 0x80000001013EE400)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else
  {
    char v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v6) {
      return 1;
    }
    else {
      return 2;
    }
  }
}

ValueMetadata *type metadata accessor for VersionNumber()
{
  return &type metadata for VersionNumber;
}

uint64_t sub_1009CD110()
{
  uint64_t v5 = dispatch thunk of CustomStringConvertible.description.getter();
  v0._countAndFlagsBits = 46;
  v0._object = (void *)0xE100000000000000;
  String.append(_:)(v0);
  v1._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  String.append(_:)(v1);
  swift_bridgeObjectRelease();
  v2._countAndFlagsBits = 46;
  v2._object = (void *)0xE100000000000000;
  String.append(_:)(v2);
  v3._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  String.append(_:)(v3);
  swift_bridgeObjectRelease();
  return v5;
}

uint64_t sub_1009CD1F0()
{
  return 0;
}

uint64_t sub_1009CD278(void *a1)
{
  uint64_t v3 = sub_10000588C(&qword_1016542A8);
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  char v6 = &v8[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)];
  sub_10001CD44(a1, a1[3]);
  sub_1009CE22C();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  v8[15] = 0;
  KeyedEncodingContainer.encode(_:forKey:)();
  if (!v1)
  {
    v8[14] = 1;
    KeyedEncodingContainer.encode(_:forKey:)();
    v8[13] = 2;
    KeyedEncodingContainer.encode(_:forKey:)();
  }
  return (*(uint64_t (**)(unsigned char *, uint64_t))(v4 + 8))(v6, v3);
}

uint64_t sub_1009CD400()
{
  uint64_t v1 = 0x726F6E696DLL;
  if (*v0 != 1) {
    uint64_t v1 = 0x6E6F697369766572;
  }
  if (*v0) {
    return v1;
  }
  else {
    return 0x726F6A616DLL;
  }
}

uint64_t sub_1009CD454@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_1009CDF14(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_1009CD47C(uint64_t a1)
{
  unint64_t v2 = sub_1009CE22C();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1009CD4B8(uint64_t a1)
{
  unint64_t v2 = sub_1009CE22C();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_1009CD4F4@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result = sub_1009CE05C(a1);
  if (!v2)
  {
    *(_WORD *)a2 = result;
    *(unsigned char *)(a2 + 2) = BYTE2(result);
    *(unsigned char *)(a2 + 3) = BYTE3(result);
  }
  return result;
}

uint64_t sub_1009CD530(void *a1)
{
  return sub_1009CD278(a1);
}

uint64_t sub_1009CD54C(unsigned __int16 *a1, unsigned __int16 *a2)
{
  unsigned int v2 = *a1;
  unsigned int v3 = *a2;
  if (v2 < v3) {
    return 1;
  }
  unsigned int v5 = *((unsigned __int8 *)a1 + 2);
  unsigned int v6 = *((unsigned __int8 *)a2 + 2);
  BOOL v8 = v6 >= v5 && *((unsigned __int8 *)a1 + 3) < *((unsigned __int8 *)a2 + 3);
  unsigned int v9 = v5 < v6 || v8;
  if (v3 < v2) {
    return 0;
  }
  else {
    return v9;
  }
}

uint64_t sub_1009CD598(unsigned __int16 *a1, unsigned __int16 *a2)
{
  unsigned int v2 = *a1;
  unsigned int v3 = *a2;
  if (v3 < v2) {
    return 0;
  }
  if (v2 < v3) {
    return 1;
  }
  unsigned int v5 = *((unsigned __int8 *)a1 + 2);
  unsigned int v6 = *((unsigned __int8 *)a2 + 2);
  BOOL v8 = v5 < v6 || *((unsigned __int8 *)a2 + 3) >= *((unsigned __int8 *)a1 + 3);
  return v6 >= v5 && v8;
}

uint64_t sub_1009CD5E8(unsigned __int16 *a1, unsigned __int16 *a2)
{
  unsigned int v2 = *a1;
  unsigned int v3 = *a2;
  if (v2 < v3) {
    return 0;
  }
  if (v3 < v2) {
    return 1;
  }
  unsigned int v5 = *((unsigned __int8 *)a1 + 2);
  unsigned int v6 = *((unsigned __int8 *)a2 + 2);
  BOOL v8 = v6 < v5 || *((unsigned __int8 *)a1 + 3) >= *((unsigned __int8 *)a2 + 3);
  return v5 >= v6 && v8;
}

uint64_t sub_1009CD638(unsigned __int16 *a1, unsigned __int16 *a2)
{
  unsigned int v2 = *a1;
  unsigned int v3 = *a2;
  if (v3 < v2) {
    return 1;
  }
  unsigned int v5 = *((unsigned __int8 *)a1 + 2);
  unsigned int v6 = *((unsigned __int8 *)a2 + 2);
  BOOL v8 = v5 >= v6 && *((unsigned __int8 *)a2 + 3) < *((unsigned __int8 *)a1 + 3);
  unsigned int v9 = v6 < v5 || v8;
  if (v2 < v3) {
    return 0;
  }
  else {
    return v9;
  }
}

uint64_t sub_1009CD684()
{
  return sub_1009CD110();
}

Swift::Int sub_1009CD690()
{
  Swift::UInt16 v1 = *(_WORD *)v0;
  Swift::UInt8 v2 = *(unsigned char *)(v0 + 2);
  Swift::UInt8 v3 = *(unsigned char *)(v0 + 3);
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  Hasher._combine(_:)(v2);
  Hasher._combine(_:)(v3);
  return Hasher._finalize()();
}

void sub_1009CD700()
{
  Swift::UInt8 v1 = *(unsigned char *)(v0 + 2);
  Swift::UInt8 v2 = *(unsigned char *)(v0 + 3);
  Hasher._combine(_:)(*(_WORD *)v0);
  Hasher._combine(_:)(v1);
  Hasher._combine(_:)(v2);
}

Swift::Int sub_1009CD74C()
{
  Swift::UInt16 v1 = *(_WORD *)v0;
  Swift::UInt8 v2 = *(unsigned char *)(v0 + 2);
  Swift::UInt8 v3 = *(unsigned char *)(v0 + 3);
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  Hasher._combine(_:)(v2);
  Hasher._combine(_:)(v3);
  return Hasher._finalize()();
}

BOOL sub_1009CD7B8(unsigned __int16 *a1, unsigned __int16 *a2)
{
  return *a1 == *a2
      && *((unsigned __int8 *)a1 + 2) == *((unsigned __int8 *)a2 + 2)
      && *((unsigned __int8 *)a1 + 3) == *((unsigned __int8 *)a2 + 3);
}

unint64_t sub_1009CD7F0@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  unint64_t result = sub_1009CDB04(*a1, a1[1]);
  if ((result & 0x100000000) != 0)
  {
    __break(1u);
  }
  else
  {
    *(_WORD *)a2 = result;
    *(unsigned char *)(a2 + 2) = BYTE2(result);
    *(unsigned char *)(a2 + 3) = BYTE3(result);
  }
  return result;
}

unint64_t sub_1009CD83C()
{
  unint64_t result = qword_101654280;
  if (!qword_101654280)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_101654280);
  }
  return result;
}

unint64_t sub_1009CD894()
{
  unint64_t result = qword_101654288;
  if (!qword_101654288)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_101654288);
  }
  return result;
}

unint64_t sub_1009CD8EC()
{
  unint64_t result = qword_101654290;
  if (!qword_101654290)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_101654290);
  }
  return result;
}

unint64_t sub_1009CD940(uint64_t a1, unint64_t a2)
{
  switch(a2 >> 62)
  {
    case 1uLL:
      LODWORD(v4) = HIDWORD(a1) - a1;
      if (__OFSUB__(HIDWORD(a1), a1))
      {
        __break(1u);
LABEL_11:
        __break(1u);
        JUMPOUT(0x1009CDAF4);
      }
      uint64_t v4 = (int)v4;
LABEL_6:
      if (v4 == 4)
      {
        uint64_t v8 = Data.subdata(in:)();
        unint64_t v10 = v9;
        uint64_t v11 = Data.subdata(in:)();
        unint64_t v13 = v12;
        uint64_t v14 = Data.subdata(in:)();
        unint64_t v16 = v15;
        unsigned __int8 v17 = Data.subscript.getter();
        unint64_t v18 = Data.subscript.getter() | ((unint64_t)v17 << 8);
        unsigned __int8 v23 = Data.subscript.getter();
        unsigned __int8 v19 = Data.subscript.getter();
        sub_10001CFB8(a1, a2);
        sub_10001CFB8(v14, v16);
        sub_10001CFB8(v11, v13);
        sub_10001CFB8(v8, v10);
        unsigned __int8 v20 = 0;
        unint64_t v21 = v18 & 0xFFFFFFFF0000FFFFLL | ((unint64_t)v23 << 16) & 0xFFFFFFFF00FFFFFFLL | ((unint64_t)v19 << 24);
      }
      else
      {
LABEL_8:
        sub_10001CFB8(a1, a2);
        unint64_t v21 = 0;
        unsigned __int8 v20 = 1;
      }
      return v21 | ((unint64_t)v20 << 32);
    case 2uLL:
      uint64_t v6 = *(void *)(a1 + 16);
      uint64_t v5 = *(void *)(a1 + 24);
      BOOL v7 = __OFSUB__(v5, v6);
      uint64_t v4 = v5 - v6;
      if (!v7) {
        goto LABEL_6;
      }
      goto LABEL_11;
    case 3uLL:
      goto LABEL_8;
    default:
      uint64_t v4 = BYTE6(a2);
      goto LABEL_6;
  }
}

unint64_t sub_1009CDB04(uint64_t a1, uint64_t a2)
{
  uint64_t v33 = a1;
  uint64_t v34 = a2;
  sub_1000336D4();
  Swift::UInt8 v2 = (void *)StringProtocol.components<A>(separatedBy:)();
  swift_bridgeObjectRelease();
  uint64_t v3 = v2[2];
  if ((v3 & 0x7FFFFFFFFFFFFFFELL) != 2) {
    goto LABEL_64;
  }
  uint64_t v4 = v2[4];
  unint64_t v5 = v2[5];
  uint64_t v6 = HIBYTE(v5) & 0xF;
  uint64_t v7 = v4 & 0xFFFFFFFFFFFFLL;
  if (!((v5 & 0x2000000000000000) != 0 ? HIBYTE(v5) & 0xF : v4 & 0xFFFFFFFFFFFFLL)) {
    goto LABEL_64;
  }
  if ((v5 & 0x1000000000000000) != 0)
  {
    swift_bridgeObjectRetain();
    unsigned int v11 = sub_10048CB10(v4, v5, 10);
    swift_bridgeObjectRelease();
    if ((v11 & 0x10000) != 0) {
      goto LABEL_64;
    }
  }
  else if ((v5 & 0x2000000000000000) != 0)
  {
    uint64_t v33 = v2[4];
    uint64_t v34 = v5 & 0xFFFFFFFFFFFFFFLL;
    if (v4 == 43)
    {
      if (!v6)
      {
LABEL_70:
        __break(1u);
LABEL_71:
        __break(1u);
        goto LABEL_64;
      }
      if (v6 == 1) {
        goto LABEL_64;
      }
      unsigned int v11 = (BYTE1(v4) - 48);
      if (v11 > 9) {
        goto LABEL_64;
      }
      if (v6 != 2)
      {
        if ((BYTE2(v4) - 48) > 9u) {
          goto LABEL_64;
        }
        LOWORD(v11) = 10 * v11 + (BYTE2(v4) - 48);
        uint64_t v13 = v6 - 3;
        if (v13)
        {
          uint64_t v14 = (unsigned __int8 *)&v33 + 3;
          while (1)
          {
            unsigned int v15 = *v14 - 48;
            if (v15 > 9) {
              goto LABEL_64;
            }
            if (((10 * (unsigned __int16)v11) & 0xF0000) != 0) {
              goto LABEL_64;
            }
            unsigned int v11 = (unsigned __int16)(10 * v11) + v15;
            if ((v11 & 0x10000) != 0) {
              goto LABEL_64;
            }
            int v12 = 0;
            ++v14;
            if (!--v13) {
              goto LABEL_11;
            }
          }
        }
      }
    }
    else if (v4 == 45)
    {
      if (!v6)
      {
LABEL_69:
        __break(1u);
        goto LABEL_70;
      }
      if (v6 == 1 || (BYTE1(v4) - 48) > 9u || (-(BYTE1(v4) - 48) & 0xFFFF0000) != 0) {
        goto LABEL_64;
      }
      if (v6 == 2)
      {
        LOWORD(v11) = -(BYTE1(v4) - 48);
      }
      else
      {
        if ((BYTE2(v4) - 48) > 9u) {
          goto LABEL_64;
        }
        if (((10 * (unsigned __int16)-(BYTE1(v4) - 48)) & 0xF0000) != 0) {
          goto LABEL_64;
        }
        unsigned int v11 = (unsigned __int16)(-10 * (BYTE1(v4) - 48)) - (BYTE2(v4) - 48);
        if ((v11 & 0xFFFF0000) != 0) {
          goto LABEL_64;
        }
        uint64_t v29 = v6 - 3;
        if (v29)
        {
          uint64_t v30 = (unsigned __int8 *)&v33 + 3;
          while (1)
          {
            unsigned int v31 = *v30 - 48;
            if (v31 > 9) {
              goto LABEL_64;
            }
            if (((10 * (unsigned __int16)v11) & 0xF0000) != 0) {
              goto LABEL_64;
            }
            unsigned int v11 = (unsigned __int16)(10 * v11) - v31;
            if ((v11 & 0xFFFF0000) != 0) {
              goto LABEL_64;
            }
            int v12 = 0;
            ++v30;
            if (!--v29) {
              goto LABEL_11;
            }
          }
        }
      }
    }
    else
    {
      if (!v6) {
        goto LABEL_64;
      }
      unsigned int v11 = (v4 - 48);
      if (v11 > 9) {
        goto LABEL_64;
      }
      if (v6 != 1)
      {
        if ((BYTE1(v4) - 48) > 9u) {
          goto LABEL_64;
        }
        LOWORD(v11) = 10 * v11 + (BYTE1(v4) - 48);
        uint64_t v26 = v6 - 2;
        if (v26)
        {
          uint64_t v27 = (unsigned __int8 *)&v33 + 2;
          while (1)
          {
            unsigned int v28 = *v27 - 48;
            if (v28 > 9) {
              goto LABEL_64;
            }
            if (((10 * (unsigned __int16)v11) & 0xF0000) != 0) {
              goto LABEL_64;
            }
            unsigned int v11 = (unsigned __int16)(10 * v11) + v28;
            if ((v11 & 0x10000) != 0) {
              goto LABEL_64;
            }
            int v12 = 0;
            ++v27;
            if (!--v26) {
              goto LABEL_11;
            }
          }
        }
      }
    }
  }
  else
  {
    if ((v4 & 0x1000000000000000) != 0) {
      unint64_t v9 = (unsigned __int8 *)((v5 & 0xFFFFFFFFFFFFFFFLL) + 32);
    }
    else {
      unint64_t v9 = (unsigned __int8 *)_StringObject.sharedUTF8.getter();
    }
    unsigned int v10 = sub_10048C9E4(v9, v7, 10);
    LOWORD(v11) = v10;
    int v12 = HIWORD(v10) & 1;
LABEL_11:
    if (v12) {
      goto LABEL_64;
    }
  }
  if (v2[2] < 2uLL)
  {
    __break(1u);
    goto LABEL_69;
  }
  uint64_t v16 = v2[6];
  unint64_t v17 = v2[7];
  swift_bridgeObjectRetain();
  __int16 v18 = sub_1011114C8(v16, v17);
  if ((v18 & 0x100) != 0)
  {
LABEL_64:
    swift_bridgeObjectRelease();
    goto LABEL_65;
  }
  unsigned __int8 v19 = v18;
  if (v3 != 3)
  {
    swift_bridgeObjectRelease();
    int v23 = 0;
    goto LABEL_44;
  }
  if (v2[2] < 3uLL) {
    goto LABEL_71;
  }
  uint64_t v20 = v2[8];
  unint64_t v21 = v2[9];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  unsigned __int16 v22 = sub_1011114C8(v20, v21);
  if ((v22 & 0x100) != 0)
  {
LABEL_65:
    unint64_t v25 = 0;
    unsigned __int8 v24 = 1;
    return v25 | ((unint64_t)v24 << 32);
  }
  int v23 = v22;
LABEL_44:
  unsigned __int8 v24 = 0;
  unint64_t v25 = (v23 << 24) | (unsigned __int16)v11 | ((unint64_t)v19 << 16);
  return v25 | ((unint64_t)v24 << 32);
}

uint64_t sub_1009CDF14(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 0x726F6A616DLL && a2 == 0xE500000000000000;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x726F6E696DLL && a2 == 0xE500000000000000 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0x6E6F697369766572 && a2 == 0xE800000000000000)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else
  {
    char v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v6) {
      return 2;
    }
    else {
      return 3;
    }
  }
}

uint64_t sub_1009CE05C(void *a1)
{
  uint64_t v3 = sub_10000588C(&qword_101654298);
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  char v6 = &v11[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)];
  sub_10001CD44(a1, a1[3]);
  sub_1009CE22C();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v1) {
    return _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)a1);
  }
  v11[15] = 0;
  unsigned __int16 v7 = KeyedDecodingContainer.decode(_:forKey:)();
  v11[14] = 1;
  unsigned __int8 v8 = KeyedDecodingContainer.decode(_:forKey:)();
  v11[13] = 2;
  int v9 = KeyedDecodingContainer.decode(_:forKey:)();
  (*(void (**)(unsigned char *, uint64_t))(v4 + 8))(v6, v3);
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)a1);
  return (v8 << 16) | (v9 << 24) | v7;
}

unint64_t sub_1009CE22C()
{
  unint64_t result = qword_1016542A0;
  if (!qword_1016542A0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1016542A0);
  }
  return result;
}

unsigned char *storeEnumTagSinglePayload for VersionNumber.CodingKeys(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 2 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 2) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFE) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFD)
  {
    unsigned int v6 = ((a2 - 254) >> 8) + 1;
    *unint64_t result = a2 + 2;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1009CE34CLL);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 2;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for VersionNumber.CodingKeys()
{
  return &type metadata for VersionNumber.CodingKeys;
}

unint64_t sub_1009CE388()
{
  unint64_t result = qword_1016542B0;
  if (!qword_1016542B0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1016542B0);
  }
  return result;
}

unint64_t sub_1009CE3E0()
{
  unint64_t result = qword_1016542B8;
  if (!qword_1016542B8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1016542B8);
  }
  return result;
}

unint64_t sub_1009CE438()
{
  unint64_t result = qword_1016542C0;
  if (!qword_1016542C0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1016542C0);
  }
  return result;
}

uint64_t sub_1009CE48C()
{
  uint64_t v0 = type metadata accessor for Logger();
  sub_10001E384(v0, qword_1016542C8);
  uint64_t v1 = sub_100010324(v0, (uint64_t)qword_1016542C8);
  if (qword_101636EB8 != -1) {
    swift_once();
  }
  uint64_t v2 = sub_100010324(v0, (uint64_t)qword_10170E7A8);
  int v3 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v0 - 8) + 16);

  return v3(v1, v2, v0);
}

uint64_t sub_1009CE554()
{
  uint64_t v1 = v0;
  uint64_t v2 = *v0;
  uint64_t v3 = type metadata accessor for DispatchQoS();
  __chkstk_darwin(v3 - 8);
  uint64_t v5 = (char *)&v10 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (v1[23])
  {
    swift_retain();
    OSAllocatedUnfairLock.callAsFunction<A>(_:)();
    return swift_release();
  }
  else
  {
    static DispatchQoS.background.getter();
    uint64_t v7 = swift_allocObject();
    *(void *)(v7 + 16) = v2;
    uint64_t v8 = swift_allocObject();
    *(void *)(v8 + 16) = v1;
    *(void *)(v8 + 24) = v2;
    type metadata accessor for XPCActivity();
    swift_allocObject();
    swift_retain();
    uint64_t v9 = sub_1009D9B34(0xD000000000000026, (void *)0x800000010140E1D0, (uint64_t)v5, (uint64_t)sub_1009CFFA8, v7, (uint64_t)sub_1009D001C, v8);
    swift_release();
    swift_release();
    v1[23] = v9;
    return swift_release();
  }
}

uint64_t sub_1009CE740(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = sub_10000588C(&qword_101654450);
  uint64_t v22 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  uint64_t v8 = (char *)&v21 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = sub_10000588C(&qword_101657CF0);
  uint64_t v10 = *(void *)(v9 - 8);
  __chkstk_darwin(v9);
  int v12 = (char *)&v21 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_beginAccess();
  uint64_t result = *(void *)(a2 + 192);
  uint64_t v14 = *(void *)(result + 16);
  if (v14)
  {
    uint64_t v21 = v3;
    uint64_t v16 = v10 + 16;
    unsigned int v15 = *(void (**)(char *, unint64_t, uint64_t))(v10 + 16);
    uint64_t v24 = v6;
    unint64_t v25 = v15;
    unint64_t v17 = result + ((*(unsigned __int8 *)(v10 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v10 + 80));
    uint64_t v18 = *(void *)(v16 + 56);
    unsigned __int8 v19 = (void (**)(char *, uint64_t))(v22 + 8);
    uint64_t v20 = (void (**)(char *, uint64_t))(v16 - 8);
    uint64_t v22 = result;
    uint64_t v23 = v18;
    swift_bridgeObjectRetain();
    do
    {
      v25(v12, v17, v9);
      uint64_t v26 = a3;
      swift_bridgeObjectRetain();
      AsyncStream.Continuation.yield(_:)();
      (*v19)(v8, v24);
      (*v20)(v12, v9);
      v17 += v23;
      --v14;
    }
    while (v14);
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t sub_1009CE96C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_10000588C(&qword_101657CF0);
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = *(void *)(v5 + 64);
  __chkstk_darwin(v4);
  uint64_t v7 = sub_10000588C(&qword_10164DBB0);
  __chkstk_darwin(v7 - 8);
  uint64_t v9 = (char *)&v14 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = type metadata accessor for TaskPriority();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 56))(v9, 1, 1, v10);
  (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))((char *)&v14 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0), a1, v4);
  unint64_t v11 = (*(unsigned __int8 *)(v5 + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
  int v12 = (char *)swift_allocObject();
  *((void *)v12 + 2) = 0;
  *((void *)v12 + 3) = 0;
  *((void *)v12 + 4) = a2;
  (*(void (**)(char *, char *, uint64_t))(v5 + 32))(&v12[v11], (char *)&v14 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0), v4);
  swift_retain();
  sub_1008F5E44((uint64_t)v9, (uint64_t)&unk_101654468, (uint64_t)v12);
  return swift_release();
}

uint64_t sub_1009CEB44(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  v5[5] = a4;
  v5[6] = a5;
  uint64_t v7 = sub_10000588C(&qword_101657CF0);
  v5[7] = v7;
  v5[8] = *(void *)(v7 - 8);
  v5[9] = swift_task_alloc();
  return _swift_task_switch(sub_1009CEC0C, a4, 0);
}

uint64_t sub_1009CEC0C()
{
  uint64_t v1 = v0[5];
  (*(void (**)(void, void, void))(v0[8] + 16))(v0[9], v0[6], v0[7]);
  uint64_t v2 = (unint64_t *)(v1 + 192);
  swift_beginAccess();
  unint64_t v3 = *(void *)(v1 + 192);
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  *(void *)(v1 + 192) = v3;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
    unint64_t v3 = sub_100A71EB0(0, *(void *)(v3 + 16) + 1, 1, v3);
    *uint64_t v2 = v3;
  }
  unint64_t v6 = *(void *)(v3 + 16);
  unint64_t v5 = *(void *)(v3 + 24);
  if (v6 >= v5 >> 1)
  {
    unint64_t v3 = sub_100A71EB0(v5 > 1, v6 + 1, 1, v3);
    *uint64_t v2 = v3;
  }
  uint64_t v7 = v0[8];
  uint64_t v8 = v0[9];
  uint64_t v9 = v0[7];
  *(void *)(v3 + 16) = v6 + 1;
  (*(void (**)(unint64_t, uint64_t, uint64_t))(v7 + 32))(v3+ ((*(unsigned __int8 *)(v7 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80))+ *(void *)(v7 + 72) * v6, v8, v9);
  swift_endAccess();
  swift_task_dealloc();
  uint64_t v10 = (uint64_t (*)(void))v0[1];
  return v10();
}

uint64_t sub_1009CED60(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  *(void *)(v4 + 16) = a4;
  return _swift_task_switch(sub_1009CED80, a4, 0);
}

uint64_t sub_1009CED80()
{
  sub_1009D0798();
  static NSFileManager.removeDirectory(url:)();
  uint64_t v1 = (void *)swift_task_alloc();
  *(void *)(v0 + 24) = v1;
  *uint64_t v1 = v0;
  v1[1] = sub_1009CEE78;
  return sub_100886D50();
}

uint64_t sub_1009CEE78()
{
  uint64_t v3 = *v0;
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v3 + 8);
  return v1();
}

uint64_t sub_1009CEF70()
{
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  sub_1009D0984(v0 + 144);
  swift_release();
  swift_bridgeObjectRelease();
  swift_defaultActor_destroy();

  return _swift_defaultActor_deallocate(v0);
}

uint64_t type metadata accessor for BeaconKeyService()
{
  return self;
}

void *assignWithCopy for BeaconKeyService.KeyStreamChange(void *a1, void *a2)
{
  *a1 = *a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

void *assignWithTake for BeaconKeyService.KeyStreamChange(void *a1, void *a2)
{
  *a1 = *a2;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for BeaconKeyService.KeyStreamChange(uint64_t *a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *((unsigned char *)a1 + 8)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  uint64_t v2 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for BeaconKeyService.KeyStreamChange(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)uint64_t result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 8) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)uint64_t result = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 8) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for BeaconKeyService.KeyStreamChange()
{
  return &type metadata for BeaconKeyService.KeyStreamChange;
}

uint64_t sub_1009CF0F8()
{
  *(void *)(v1 + 16) = v0;
  return _swift_task_switch(sub_1009CF118, v0, 0);
}

void sub_1009CF118()
{
  if (*(void *)(*(void *)(v0 + 16) + 136))
  {
    uint64_t v1 = (void *)swift_task_alloc();
    *(void *)(v0 + 24) = v1;
    *uint64_t v1 = v0;
    v1[1] = sub_1009CF1B4;
    sub_100886968();
  }
  else
  {
    __break(1u);
  }
}

uint64_t sub_1009CF1B4()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 16);
  swift_task_dealloc();
  return _swift_task_switch(sub_1009CF2C4, v1, 0);
}

uint64_t sub_1009CF2C4()
{
  sub_1009CE554();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

unint64_t sub_1009CF324(uint64_t a1)
{
  unint64_t result = sub_1009CF34C();
  *(void *)(a1 + 8) = result;
  return result;
}

unint64_t sub_1009CF34C()
{
  unint64_t result = qword_101654428;
  if (!qword_101654428)
  {
    type metadata accessor for BeaconKeyService();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, &qword_101654428);
  }
  return result;
}

uint64_t sub_1009CF3A0(uint64_t a1, uint64_t a2)
{
  v3[3] = a2;
  v3[4] = v2;
  v3[2] = a1;
  uint64_t v4 = type metadata accessor for KeyGenerationBeaconInfo();
  v3[5] = v4;
  v3[6] = *(void *)(v4 - 8);
  v3[7] = swift_task_alloc();
  v3[8] = swift_task_alloc();
  return _swift_task_switch(sub_1009CF474, v2, 0);
}

void sub_1009CF474()
{
  uint64_t v1 = v0[3];
  int64_t v2 = *(void *)(v1 + 16);
  if (v2)
  {
    uint64_t v4 = (int *)v0[5];
    uint64_t v3 = v0[6];
    sub_1000B782C(0, v2, 0);
    unint64_t v32 = (*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
    uint64_t v5 = v1 + v32;
    uint64_t v6 = *(void *)(v3 + 72);
    do
    {
      uint64_t v7 = v0[7];
      uint64_t v8 = v0[8];
      sub_1009D07D8(v5, v7);
      uid_t v9 = getuid();
      sub_100DC5FC0(v9);
      uint64_t v10 = *(int *)(type metadata accessor for BeaconIdentifier() + 20);
      uint64_t v11 = v7 + v10;
      uint64_t v12 = v8 + v10;
      uint64_t v13 = type metadata accessor for UUID();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v13 - 8) + 16))(v12, v11, v13);
      uint64_t v14 = v4[5];
      uint64_t v15 = v7 + v14;
      uint64_t v16 = v8 + v14;
      uint64_t v17 = type metadata accessor for Date();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v17 - 8) + 16))(v16, v15, v17);
      uint64_t v18 = v4[6];
      uint64_t v19 = *(void *)(v7 + v18);
      unint64_t v20 = *(void *)(v7 + v18 + 8);
      uint64_t v21 = *(void *)(v7 + v18 + 16);
      unint64_t v22 = *(void *)(v7 + v18 + 24);
      uint64_t v23 = *(void *)(v7 + v18 + 32);
      unint64_t v24 = *(void *)(v7 + v18 + 40);
      char v25 = *(unsigned char *)(v7 + v4[7]);
      uint64_t v26 = (uint64_t *)(v8 + v18);
      *uint64_t v26 = v19;
      v26[1] = v20;
      v26[2] = v21;
      v26[3] = v22;
      v26[4] = v23;
      v26[5] = v24;
      *(unsigned char *)(v8 + v4[7]) = v25;
      sub_1009D083C(v19, v20, v21, v22, v23, v24);
      sub_1009D08A8(v7);
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
        sub_1000B782C(0, _swiftEmptyArrayStorage[2] + 1, 1);
      }
      unint64_t v28 = _swiftEmptyArrayStorage[2];
      unint64_t v27 = _swiftEmptyArrayStorage[3];
      if (v28 >= v27 >> 1) {
        sub_1000B782C(v27 > 1, v28 + 1, 1);
      }
      uint64_t v29 = v0[8];
      _swiftEmptyArrayStorage[2] = v28 + 1;
      sub_1009D0904(v29, (uint64_t)_swiftEmptyArrayStorage + v32 + v28 * v6);
      v5 += v6;
      --v2;
    }
    while (v2);
  }
  uint64_t v30 = *(void *)(v0[4] + 128);
  if (!v30)
  {
    __break(1u);
    goto LABEL_14;
  }
  sub_1009FE4E8(v0[2], (uint64_t)_swiftEmptyArrayStorage, v30);
  swift_bridgeObjectRelease();
  if (!*(void *)(v0[4] + 136))
  {
LABEL_14:
    __break(1u);
    return;
  }
  unsigned int v31 = (void *)swift_task_alloc();
  v0[9] = (uint64_t)v31;
  *unsigned int v31 = v0;
  v31[1] = sub_1009CF76C;
  sub_100888000();
}

uint64_t sub_1009CF76C()
{
  int64_t v2 = (void *)*v1;
  v2[10] = v0;
  swift_task_dealloc();
  if (v0)
  {
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v3 = (uint64_t (*)(void))v2[1];
    return v3();
  }
  else
  {
    uint64_t v5 = v2[4];
    return _swift_task_switch(sub_1009CF8B0, v5, 0);
  }
}

uint64_t sub_1009CF8B0()
{
  type metadata accessor for Transaction();
  *(int8x16_t *)(swift_task_alloc() + 16) = vextq_s8(*(int8x16_t *)(v0 + 24), *(int8x16_t *)(v0 + 24), 8uLL);
  static Transaction.named<A>(_:with:)();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

void sub_1009CF998(uint64_t a1, uint64_t a2, char a3, uint64_t a4, uint64_t a5)
{
  Transaction.capture()();
  if (a3 == 6)
  {
    *(void *)(a4 + 184) = 0;
    swift_release();
  }
  else if (a3 == 2)
  {
    if (qword_101636EB0 != -1) {
      swift_once();
    }
    uint64_t v8 = type metadata accessor for Logger();
    sub_100010324(v8, (uint64_t)qword_1016542C8);
    uid_t v9 = Logger.logObject.getter();
    os_log_type_t v10 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v9, v10))
    {
      uint64_t v11 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v11 = 0;
      _os_log_impl((void *)&_mh_execute_header, v9, v10, "reevaluateXPCActivity: XPC activity fired for BeaconKeyService", v11, 2u);
      swift_slowDealloc();
    }

    type metadata accessor for Transaction();
    uint64_t v12 = swift_allocObject();
    *(void *)(v12 + 16) = a4;
    *(void *)(v12 + 24) = a5;
    swift_retain();
    static Transaction.asyncTask(name:block:)();
    swift_release();
    sub_1009D7390();
  }
}

uint64_t sub_1009CFB3C(uint64_t a1)
{
  *(void *)(v1 + 24) = a1;
  return _swift_task_switch(sub_1009CFB5C, 0, 0);
}

void sub_1009CFB5C()
{
  if (*(void *)(*(void *)(v0 + 24) + 136))
  {
    uint64_t v1 = (void *)swift_task_alloc();
    *(void *)(v0 + 32) = v1;
    *uint64_t v1 = v0;
    v1[1] = sub_1009CFBF8;
    sub_100888000();
  }
  else
  {
    __break(1u);
  }
}

uint64_t sub_1009CFBF8()
{
  uint64_t v2 = *v1;
  *(void *)(v2 + 40) = v0;
  swift_task_dealloc();
  if (v0)
  {
    return _swift_task_switch(sub_1009CFD2C, 0, 0);
  }
  else
  {
    uint64_t v3 = *(uint64_t (**)(void))(v2 + 8);
    return v3();
  }
}

uint64_t sub_1009CFD2C()
{
  if (qword_101636EB0 != -1) {
    swift_once();
  }
  uint64_t v1 = type metadata accessor for Logger();
  sub_100010324(v1, (uint64_t)qword_1016542C8);
  swift_errorRetain();
  uint64_t v2 = Logger.logObject.getter();
  os_log_type_t v3 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v2, v3))
  {
    uint64_t v4 = (uint8_t *)swift_slowAlloc();
    uint64_t v5 = (void *)swift_slowAlloc();
    *(_DWORD *)uint64_t v4 = 138412290;
    uint64_t v6 = _convertErrorToNSError(_:)();
    *(void *)(v0 + 16) = v6;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *uint64_t v5 = v6;
    swift_errorRelease();
    _os_log_impl((void *)&_mh_execute_header, v2, v3, "validateKeys error: %@", v4, 0xCu);
    sub_10000588C((uint64_t *)&unk_101638EA0);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    swift_errorRelease();
  }
  else
  {
    swift_errorRelease();
    swift_errorRelease();
  }
  uint64_t v7 = *(uint64_t (**)(void))(v0 + 8);
  return v7();
}

uint64_t sub_1009CFF10()
{
  uint64_t v0 = type metadata accessor for Logger();
  sub_10001E384(v0, qword_10170E7A8);
  sub_100010324(v0, (uint64_t)qword_10170E7A8);
  return Logger.init(subsystem:category:)();
}

uint64_t sub_1009CFF98()
{
  return _swift_deallocObject(v0, 24, 7);
}

uint64_t sub_1009CFFA8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  sub_1009D02D8(a1, v4);
  return sub_1006E2D14((uint64_t)v4, a2);
}

uint64_t sub_1009CFFE4()
{
  swift_release();

  return _swift_deallocObject(v0, 32, 7);
}

void sub_1009D001C(uint64_t a1, uint64_t a2, char a3)
{
  sub_1009CF998(a1, a2, a3, *(void *)(v3 + 16), *(void *)(v3 + 24));
}

uint64_t sub_1009D0024()
{
  uint64_t v2 = *(void *)(v0 + 16);
  uint64_t v3 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v3;
  *uint64_t v3 = v1;
  v3[1] = sub_10001D2E4;
  v3[3] = v2;
  return _swift_task_switch(sub_1009CFB5C, 0, 0);
}

uint64_t sub_1009D00D0(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2;
  swift_defaultActor_initialize();
  *(void *)(v2 + 112) = 0xD000000000000010;
  *(void *)(v2 + 120) = 0x8000000101372310;
  *(void *)(v2 + 184) = 0;
  *(void *)(v2 + 192) = _swiftEmptyArrayStorage;
  if (qword_1016371D8 != -1) {
    swift_once();
  }
  *(void *)&long long v16 = 0x7365547265646E75;
  *((void *)&v16 + 1) = 0xE900000000000074;
  SynchronousCache.cachedValue<A>(key:computeBlock:)();
  uint64_t result = swift_bridgeObjectRelease();
  uint64_t v7 = (_OWORD *)(v2 + 144);
  if (LOBYTE(v13[0]) == 1)
  {
    uint64_t result = sub_1009D09E4(a1, (uint64_t)v7);
  }
  else
  {
    *(void *)(v2 + 176) = 0;
    *uint64_t v7 = 0u;
    *(_OWORD *)(v2 + 160) = 0u;
  }
  *(void *)(v2 + 128) = a2;
  if (a2)
  {
    sub_1009D09E4(a1, (uint64_t)v13);
    uint64_t v8 = v14;
    if (v14)
    {
      uint64_t v9 = v15;
      os_log_type_t v10 = sub_10001CD44(v13, v14);
      *((void *)&v17 + 1) = v8;
      uint64_t v18 = *(void *)(v9 + 8);
      uint64_t v11 = sub_10001D958((uint64_t *)&v16);
      (*(void (**)(uint64_t *, void *, uint64_t))(*(void *)(v8 - 8) + 16))(v11, v10, v8);
      swift_retain_n();
      _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)v13);
    }
    else
    {
      swift_retain_n();
      sub_1009D0984((uint64_t)v13);
      long long v16 = 0u;
      long long v17 = 0u;
      uint64_t v18 = 0;
    }
    type metadata accessor for BeaconKeyServiceBuilder(0);
    swift_allocObject();
    uint64_t v12 = sub_10088678C(a2, (uint64_t)&v16);
    sub_1009D0984(a1);
    *(void *)(v3 + 136) = v12;
    return v3;
  }
  else
  {
    __break(1u);
  }
  return result;
}

void sub_1009D02D8(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  sub_1006E2D14(a1, (uint64_t)v33);
  uint64_t v4 = v33[0];
  uint64_t v31 = v33[2];
  uint64_t v5 = v33[4];
  uint64_t v29 = v33[1];
  uint64_t v30 = v33[3];
  if (qword_101636CD8 != -1) {
    swift_once();
  }
  uint64_t v6 = (uint64_t)&qword_10170E000;
  OS_dispatch_queue.sync<A>(execute:)();
  uint64_t v7 = (void *)sub_1010AB900(v34[0]);
  swift_bridgeObjectRelease();
  uint64_t v8 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v10 = v9;
  if (v8 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v10 == v11)
  {

    swift_bridgeObjectRelease_n();
  }
  else
  {
    char v13 = _stringCompareWithSmolCheck(_:_:expecting:)();

    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if ((v13 & 1) == 0)
    {
      if (qword_101636EB0 != -1) {
        swift_once();
      }
      uint64_t v14 = type metadata accessor for Logger();
      sub_100010324(v14, (uint64_t)qword_1016542C8);
      uint64_t v15 = Logger.logObject.getter();
      os_log_type_t v16 = static os_log_type_t.default.getter();
      if (!os_log_type_enabled(v15, v16))
      {
        uint64_t v18 = 0;
        uint64_t v19 = 0;
        uint64_t v6 = 0;
        uint64_t v5 = 0;
        uint64_t v4 = 2;
        goto LABEL_27;
      }
      uint64_t v4 = 2;
      long long v17 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)long long v17 = 0;
      _os_log_impl((void *)&_mh_execute_header, v15, v16, "BeaconKeyService unregistering XPC Activity: service is disabled.", v17, 2u);
      uint64_t v18 = 0;
      uint64_t v19 = 0;
      uint64_t v6 = 0;
      uint64_t v5 = 0;
      goto LABEL_23;
    }
  }
  sub_1006E2D14(a1, (uint64_t)v34);
  if (LOBYTE(v34[0]) == 2)
  {
    OS_dispatch_queue.sync<A>(execute:)();
    uint64_t v20 = sub_1010ABEF0(v32);
    uint64_t v19 = 60 * v20;
    if ((unsigned __int128)(v20 * (__int128)60) >> 64 == (60 * v20) >> 63)
    {
      uint64_t v21 = sub_1010ABF04(v32);
      swift_bridgeObjectRelease();
      uint64_t v6 = 60 * v21;
      if ((unsigned __int128)(v21 * (__int128)60) >> 64 == (60 * v21) >> 63)
      {
        if (qword_101636EB0 == -1)
        {
LABEL_17:
          uint64_t v22 = type metadata accessor for Logger();
          sub_100010324(v22, (uint64_t)qword_1016542C8);
          uint64_t v15 = Logger.logObject.getter();
          os_log_type_t v23 = static os_log_type_t.default.getter();
          if (!os_log_type_enabled(v15, v23))
          {
            uint64_t v5 = 7232;
            uint64_t v18 = 3600;
            uint64_t v4 = 257;
            goto LABEL_27;
          }
          uint64_t v24 = swift_slowAlloc();
          *(_DWORD *)uint64_t v24 = 134218496;
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          *(_WORD *)(v24 + 12) = 2048;
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          *(_WORD *)(v24 + 22) = 2048;
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          os_log_type_t v25 = v23;
          uint64_t v18 = 3600;
          _os_log_impl((void *)&_mh_execute_header, v15, v25, "BeaconKeyService XPC criteria: delay %lld, gracePeriod %lld, interval %lld", (uint8_t *)v24, 0x20u);
          uint64_t v5 = 7232;
          uint64_t v4 = 257;
          goto LABEL_23;
        }
LABEL_30:
        swift_once();
        goto LABEL_17;
      }
    }
    else
    {
      __break(1u);
    }
    __break(1u);
    goto LABEL_30;
  }
  if (qword_101636EB0 != -1) {
    swift_once();
  }
  uint64_t v26 = type metadata accessor for Logger();
  sub_100010324(v26, (uint64_t)qword_1016542C8);
  uint64_t v15 = Logger.logObject.getter();
  os_log_type_t v27 = static os_log_type_t.default.getter();
  uint64_t v6 = v30;
  uint64_t v19 = v31;
  if (!os_log_type_enabled(v15, v27))
  {
    uint64_t v18 = v29;
    goto LABEL_27;
  }
  unint64_t v28 = (uint8_t *)swift_slowAlloc();
  *(_WORD *)unint64_t v28 = 0;
  _os_log_impl((void *)&_mh_execute_header, v15, v27, "BeaconKeyService retaining existing XPCActivity criteria", v28, 2u);
  uint64_t v18 = v29;
LABEL_23:
  swift_slowDealloc();
LABEL_27:

  *a2 = v4;
  a2[1] = v18;
  a2[2] = v19;
  a2[3] = v6;
  a2[4] = v5;
}

unint64_t sub_1009D0798()
{
  unint64_t result = qword_101642980;
  if (!qword_101642980)
  {
    self;
    unint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&qword_101642980);
  }
  return result;
}

uint64_t sub_1009D07D8(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for KeyGenerationBeaconInfo();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_1009D083C(uint64_t result, unint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5, unint64_t a6)
{
  if (a2 >> 60 != 15)
  {
    sub_1000361E0(result, a2);
    sub_1000361E0(a3, a4);
    return sub_100037A38(a5, a6);
  }
  return result;
}

uint64_t sub_1009D08A8(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for KeyGenerationBeaconInfo();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_1009D0904(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for KeyGenerationBeaconInfo();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_1009D0968(uint64_t a1)
{
  return sub_1009CE740(a1, *(void *)(v1 + 16), *(void *)(v1 + 24));
}

uint64_t sub_1009D0984(uint64_t a1)
{
  uint64_t v2 = sub_10000588C(&qword_101654458);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_1009D09E4(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_10000588C(&qword_101654458);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_1009D0A4C()
{
  uint64_t v1 = sub_10000588C(&qword_101657CF0);
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 40) & ~v3;
  uint64_t v5 = v4 + *(void *)(v2 + 64);
  uint64_t v6 = v3 | 7;
  swift_unknownObjectRelease();
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);

  return _swift_deallocObject(v0, v5, v6);
}

uint64_t sub_1009D0B24(uint64_t a1)
{
  uint64_t v4 = *(void *)(sub_10000588C(&qword_101657CF0) - 8);
  uint64_t v5 = v1[2];
  uint64_t v6 = v1[3];
  uint64_t v7 = v1[4];
  uint64_t v8 = (uint64_t)v1 + ((*(unsigned __int8 *)(v4 + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80));
  uint64_t v9 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v9;
  *uint64_t v9 = v2;
  v9[1] = sub_100033F68;
  return sub_1009CEB44(a1, v5, v6, v7, v8);
}

unsigned char *storeEnumTagSinglePayload for BeaconKeyService.Error(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 4 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 4) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFC) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFB)
  {
    unsigned int v6 = ((a2 - 252) >> 8) + 1;
    *unint64_t result = a2 + 4;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1009D0CF0);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 4;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for BeaconKeyService.Error()
{
  return &type metadata for BeaconKeyService.Error;
}

unint64_t sub_1009D0D2C()
{
  unint64_t result = qword_101654470;
  if (!qword_101654470)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_101654470);
  }
  return result;
}

uint64_t sub_1009D0D84(char a1)
{
  unint64_t v2 = 0xE800000000000000;
  unint64_t v3 = 0x6E776F6E6B6E752ELL;
  switch(a1)
  {
    case 1:
      unint64_t v2 = 0xEA00000000007265;
      unint64_t v3 = 0x6E774F7261656E2ELL;
      break;
    case 2:
      unint64_t v2 = 0xEF64657461726170;
      unint64_t v3 = 0x6553686374616C2ELL;
      break;
    case 3:
      unint64_t v3 = 0xD00000000000001CLL;
      unint64_t v2 = 0x80000001013F2A30;
      break;
    case 4:
      unint64_t v2 = 0x80000001013F2A10;
      unint64_t v3 = 0xD000000000000018;
      break;
    case 5:
      unint64_t v2 = 0xEC0000007972616DLL;
      unint64_t v3 = 0x697250646C69772ELL;
      break;
    case 6:
      unint64_t v2 = 0xEE00797261646E6FLL;
      unint64_t v3 = 0x636553646C69772ELL;
      break;
    case 7:
      unint64_t v3 = 0x736142746E69682ELL;
      unint64_t v2 = 0xEA00000000006465;
      break;
    case 8:
      unint64_t v2 = 0xED0000746E656D6ELL;
      unint64_t v3 = 0x67696C4179656B2ELL;
      break;
    default:
      break;
  }
  unint64_t v4 = v2;
  String.append(_:)(*(Swift::String *)&v3);

  return swift_bridgeObjectRelease();
}

uint64_t sub_1009D0F1C(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = *(void *)(a1 - 8);
  uint64_t v5 = __chkstk_darwin(a1);
  uint64_t v7 = (char *)&v15 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = __chkstk_darwin(v5);
  uint64_t v10 = (char *)&v15 - v9;
  __chkstk_darwin(v8);
  uint64_t v11 = *(void (**)(char *, uint64_t, uint64_t))(v4 + 16);
  v11((char *)&v15 - v12, v2, a1);
  int v13 = swift_dynamicCast();
  v11(v10, v2, a1);
  if (v13)
  {
    (*(void (**)(char *, uint64_t))(v4 + 8))(v10, a1);
    return 1;
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v4 + 32))(v7, v10, a1);
    return swift_dynamicCast();
  }
}

unint64_t sub_1009D10C0(char a1)
{
  unint64_t result = 0x6E776F6E6B6E752ELL;
  switch(a1)
  {
    case 1:
      unint64_t result = 0x6E774F7261656E2ELL;
      break;
    case 2:
      unint64_t result = 0x6553686374616C2ELL;
      break;
    case 3:
      unint64_t result = 0xD00000000000001CLL;
      break;
    case 4:
      unint64_t result = 0xD000000000000018;
      break;
    case 5:
      unint64_t result = 0x697250646C69772ELL;
      break;
    case 6:
      unint64_t result = 0x636553646C69772ELL;
      break;
    case 7:
      unint64_t result = 0x736142746E69682ELL;
      break;
    case 8:
      unint64_t result = 0x67696C4179656B2ELL;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t sub_1009D1224@<X0>(unsigned __int8 *a1@<X0>, unsigned char *a2@<X8>)
{
  uint64_t result = sub_1009D23F4(*a1);
  *a2 = result;
  return result;
}

uint64_t sub_1009D1250()
{
  return RawRepresentable<>.init(from:)();
}

uint64_t sub_1009D12B0()
{
  return RawRepresentable<>.encode(to:)();
}

void sub_1009D1300(void *a1@<X8>)
{
  *a1 = &off_10159FC10;
}

uint64_t sub_1009D1310()
{
  _StringGuts.grow(_:)(21);
  v1._countAndFlagsBits = 0x3C636E795379654BLL;
  v1._object = (void *)0xE800000000000000;
  String.append(_:)(v1);
  type metadata accessor for UUID();
  sub_1009D286C((unint64_t *)&qword_101638B10, (void (*)(uint64_t))&type metadata accessor for UUID);
  v2._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  String.append(_:)(v2);
  swift_bridgeObjectRelease();
  v3._countAndFlagsBits = 58;
  v3._object = (void *)0xE100000000000000;
  String.append(_:)(v3);
  uint64_t v4 = type metadata accessor for KeySyncMetadata();
  sub_1009D0D84(*(unsigned char *)(v0 + *(int *)(v4 + 20)));
  v5._countAndFlagsBits = 32;
  v5._object = (void *)0xE100000000000000;
  String.append(_:)(v5);
  sub_10000588C(&qword_10163FAB0);
  _print_unlocked<A, B>(_:_:)();
  v6._countAndFlagsBits = 8250;
  v6._object = (void *)0xE200000000000000;
  String.append(_:)(v6);
  type metadata accessor for Date();
  sub_1009D286C((unint64_t *)&qword_101638DA0, (void (*)(uint64_t))&type metadata accessor for Date);
  v7._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  String.append(_:)(v7);
  swift_bridgeObjectRelease();
  v8._countAndFlagsBits = 62;
  v8._object = (void *)0xE100000000000000;
  String.append(_:)(v8);
  return 0;
}

uint64_t sub_1009D14DC(void *a1, uint64_t a2, char a3)
{
  uint64_t v6 = sub_10000588C(&qword_101654590);
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  uint64_t v9 = (char *)&v11 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10001CD44(a1, a1[3]);
  sub_1009D3B20();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  char v15 = 0;
  KeyedEncodingContainer.encode(_:forKey:)();
  if (!v3)
  {
    char v14 = a3;
    char v13 = 1;
    sub_10020564C();
    KeyedEncodingContainer.encode<A>(_:forKey:)();
    char v12 = 2;
    KeyedEncodingContainer.encode(_:forKey:)();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v7 + 8))(v9, v6);
}

uint64_t sub_1009D1684()
{
  uint64_t v1 = 0x65636E6575716573;
  if (*v0 != 1) {
    uint64_t v1 = 0x646C69577369;
  }
  if (*v0) {
    return v1;
  }
  else {
    return 0x65756C6156776172;
  }
}

uint64_t sub_1009D16DC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_1009D37E4(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_1009D1704(uint64_t a1)
{
  unint64_t v2 = sub_1009D3B20();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1009D1740(uint64_t a1)
{
  unint64_t v2 = sub_1009D3B20();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_1009D177C@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result = sub_1009D3934(a1);
  if (!v2)
  {
    *(void *)a2 = result;
    *(unsigned char *)(a2 + 8) = v5;
    *(unsigned char *)(a2 + 9) = HIBYTE(v5) & 1;
  }
  return result;
}

uint64_t sub_1009D17B4(void *a1)
{
  return sub_1009D14DC(a1, *(void *)v1, *(unsigned char *)(v1 + 8));
}

uint64_t sub_1009D17E8(unsigned __int8 *a1, char *a2)
{
  return sub_10071E868(*a1, *a2);
}

Swift::Int sub_1009D17F4()
{
  return sub_10072C4FC();
}

uint64_t sub_1009D17FC()
{
  String.hash(into:)();

  return swift_bridgeObjectRelease();
}

Swift::Int sub_1009D18C8()
{
  return sub_100721B84();
}

unint64_t sub_1009D18D0@<X0>(Swift::String *a1@<X0>, unsigned char *a2@<X8>)
{
  unint64_t result = sub_1009D2618(*a1);
  *a2 = result;
  return result;
}

void sub_1009D1900(unint64_t *a1@<X8>)
{
  unint64_t v2 = 0x80000001013EE1B0;
  unint64_t v3 = 0xD000000000000010;
  switch(*v1)
  {
    case 1:
      unint64_t v2 = 0xE400000000000000;
      unint64_t v3 = 1701869940;
      goto LABEL_3;
    case 2:
      *a1 = 0x666E497865646E69;
      a1[1] = 0xE90000000000006FLL;
      break;
    case 3:
      *a1 = 0x6D617473656D6974;
      a1[1] = 0xE900000000000070;
      break;
    default:
LABEL_3:
      *a1 = v3;
      a1[1] = v2;
      break;
  }
}

unint64_t sub_1009D19A4()
{
  unint64_t result = 0xD000000000000010;
  switch(*v0)
  {
    case 1:
      unint64_t result = 1701869940;
      break;
    case 2:
      unint64_t result = 0x666E497865646E69;
      break;
    case 3:
      unint64_t result = 0x6D617473656D6974;
      break;
    default:
      return result;
  }
  return result;
}

unint64_t sub_1009D1A3C@<X0>(Swift::String a1@<X1:X0>, unsigned char *a2@<X8>)
{
  unint64_t result = sub_1009D2618(a1);
  *a2 = result;
  return result;
}

uint64_t sub_1009D1A64(uint64_t a1)
{
  unint64_t v2 = sub_1009D2408();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1009D1AA0(uint64_t a1)
{
  unint64_t v2 = sub_1009D2408();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_1009D1ADC@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v30 = a2;
  uint64_t v3 = type metadata accessor for Date();
  uint64_t v31 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  __int16 v5 = (char *)&v29 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v36 = type metadata accessor for UUID();
  uint64_t v32 = *(void *)(v36 - 8);
  __chkstk_darwin(v36);
  char v35 = (char *)&v29 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = sub_10000588C(&qword_101654478);
  uint64_t v33 = *(void *)(v7 - 8);
  uint64_t v34 = v7;
  __chkstk_darwin(v7);
  uint64_t v9 = (char *)&v29 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = (int *)type metadata accessor for KeySyncMetadata();
  __chkstk_darwin(v10);
  char v12 = (char *)&v29 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10001CD44(a1, a1[3]);
  sub_1009D2408();
  uint64_t v37 = v9;
  uint64_t v13 = (uint64_t)v44;
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v13) {
    return _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)a1);
  }
  char v14 = v5;
  uint64_t v15 = v33;
  uint64_t v44 = a1;
  LOBYTE(v38) = 0;
  sub_1009D286C((unint64_t *)&qword_10163B010, (void (*)(uint64_t))&type metadata accessor for UUID);
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  uint64_t v17 = (uint64_t)v12;
  (*(void (**)(char *, char *, uint64_t))(v32 + 32))(v12, v35, v36);
  LOBYTE(v41) = 1;
  sub_1009D245C();
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  v12[v10[5]] = v38;
  LOBYTE(v38) = 3;
  sub_1009D286C(&qword_10163ACC0, (void (*)(uint64_t))&type metadata accessor for Date);
  uint64_t v18 = v34;
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  uint64_t v19 = v31;
  (*(void (**)(uint64_t, char *, uint64_t))(v31 + 32))(v17 + v10[7], v14, v3);
  LOBYTE(v38) = 2;
  sub_1009D24B0();
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  uint64_t v22 = v37;
  if (v42)
  {
    if (v42 != 1)
    {
      sub_1009D2504();
      swift_allocError();
      swift_willThrow();
      (*(void (**)(char *, uint64_t))(v15 + 8))(v22, v18);
      uint64_t v20 = v32;
      uint64_t v21 = v36;
      _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)v44);
      (*(void (**)(uint64_t, uint64_t))(v20 + 8))(v17, v21);
      return (*(uint64_t (**)(uint64_t, uint64_t))(v19 + 8))(v17 + v10[7], v3);
    }
    uint64_t v23 = v18;
    char v39 = &type metadata for SecondaryIndex;
    uint64_t v24 = v41;
    unint64_t v40 = sub_1001A15EC();
    *(void *)&long long v38 = v24;
    uint64_t v25 = (uint64_t)v44;
    uint64_t v26 = v30;
  }
  else
  {
    uint64_t v27 = v41;
    uint64_t v23 = v18;
    uint64_t v25 = (uint64_t)v44;
    uint64_t v26 = v30;
    if (v43)
    {
      char v39 = &type metadata for PrimaryWildIndex;
      unint64_t v28 = sub_1001A1694();
    }
    else
    {
      char v39 = &type metadata for PrimaryIndex;
      unint64_t v28 = sub_1001A1640();
    }
    unint64_t v40 = v28;
    *(void *)&long long v38 = v27;
  }
  (*(void (**)(char *, uint64_t))(v15 + 8))(v22, v23);
  sub_10001CEB0(&v38, v17 + v10[6]);
  sub_1009D2558(v17, v26);
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v25);
  return sub_1009D25BC(v17);
}

uint64_t sub_1009D20BC(void *a1)
{
  uint64_t v3 = v1;
  uint64_t v5 = sub_10000588C(&qword_1016544A0);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v8 = (char *)&v12 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10001CD44(a1, a1[3]);
  sub_1009D2408();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  LOBYTE(v12) = 0;
  type metadata accessor for UUID();
  sub_1009D286C(&qword_10163B040, (void (*)(uint64_t))&type metadata accessor for UUID);
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  if (!v2)
  {
    uint64_t v9 = type metadata accessor for KeySyncMetadata();
    LOBYTE(v12) = *(unsigned char *)(v3 + *(int *)(v9 + 20));
    char v14 = 1;
    sub_100771644();
    KeyedEncodingContainer.encode<A>(_:forKey:)();
    sub_10001D010(v3 + *(int *)(v9 + 24), (uint64_t)&v12);
    uint64_t v12 = sub_1009D2664(&v12);
    __int16 v13 = v10 & 0x1FF;
    char v14 = 2;
    sub_1009D2818();
    KeyedEncodingContainer.encode<A>(_:forKey:)();
    LOBYTE(v12) = 3;
    type metadata accessor for Date();
    sub_1009D286C((unint64_t *)&unk_10163ACE0, (void (*)(uint64_t))&type metadata accessor for Date);
    KeyedEncodingContainer.encode<A>(_:forKey:)();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
}

uint64_t sub_1009D2370@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_1009D1ADC(a1, a2);
}

uint64_t sub_1009D2388(void *a1)
{
  return sub_1009D20BC(a1);
}

unint64_t sub_1009D23A0()
{
  return sub_1009D10C0(*v0);
}

uint64_t type metadata accessor for KeySyncMetadata()
{
  uint64_t result = qword_101654508;
  if (!qword_101654508) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t sub_1009D23F4(uint64_t result)
{
  if (result >= 9u) {
    return 9;
  }
  else {
    return result;
  }
}

unint64_t sub_1009D2408()
{
  unint64_t result = qword_101654480;
  if (!qword_101654480)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_101654480);
  }
  return result;
}

unint64_t sub_1009D245C()
{
  unint64_t result = qword_101654488;
  if (!qword_101654488)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_101654488);
  }
  return result;
}

unint64_t sub_1009D24B0()
{
  unint64_t result = qword_101654490;
  if (!qword_101654490)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_101654490);
  }
  return result;
}

unint64_t sub_1009D2504()
{
  unint64_t result = qword_101654498;
  if (!qword_101654498)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_101654498);
  }
  return result;
}

uint64_t sub_1009D2558(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for KeySyncMetadata();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_1009D25BC(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for KeySyncMetadata();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

unint64_t sub_1009D2618(Swift::String string)
{
  object = string._object;
  v2._countAndFlagsBits = string._countAndFlagsBits;
  v2._object = object;
  unint64_t v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_1015A2F58, v2);
  swift_bridgeObjectRelease();
  if (v3 >= 4) {
    return 4;
  }
  else {
    return v3;
  }
}

uint64_t sub_1009D2664(void *a1)
{
  sub_10001D010((uint64_t)a1, (uint64_t)v9);
  uint64_t v2 = sub_10000588C(&qword_10163FAB0);
  if (swift_dynamicCast())
  {
    sub_10001CD44(a1, a1[3]);
    dispatch thunk of RawRepresentable.rawValue.getter();
    uint64_t v2 = v8;
    uint64_t v3 = a1[3];
    uint64_t v4 = a1[4];
    sub_10001CD44(a1, v3);
    sub_100EB7B8C(v3, v4);
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)v9);
  }
  else
  {
    if ((swift_dynamicCast() & 1) == 0 && !swift_dynamicCast())
    {
      sub_1009D2504();
      swift_allocError();
      swift_willThrow();
      _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)v9);
      _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)a1);
      return v2;
    }
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)v9);
    sub_10001CD44(a1, a1[3]);
    dispatch thunk of RawRepresentable.rawValue.getter();
    uint64_t v2 = v9[0];
    uint64_t v5 = a1[3];
    uint64_t v6 = a1[4];
    sub_10001CD44(a1, v5);
    sub_100EB7B8C(v5, v6);
  }
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)a1);
  return v2;
}

unint64_t sub_1009D2818()
{
  unint64_t result = qword_1016544A8;
  if (!qword_1016544A8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1016544A8);
  }
  return result;
}

uint64_t sub_1009D286C(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

unsigned char *storeEnumTagSinglePayload for KeySyncMetadata.Error(unsigned char *result, int a2, int a3)
{
  if ((a3 + 1) >= 0x10000) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) < 0x100) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2)
  {
    switch(v5)
    {
      case 1:
        *uint64_t result = a2;
        return result;
      case 2:
        *(_WORD *)uint64_t result = a2;
        return result;
      case 3:
        goto LABEL_19;
      case 4:
        *(_DWORD *)uint64_t result = a2;
        return result;
      default:
        return result;
    }
  }
  switch(v5)
  {
    case 1:
      *uint64_t result = 0;
      break;
    case 2:
      *(_WORD *)uint64_t result = 0;
      break;
    case 3:
LABEL_19:
      __break(1u);
      JUMPOUT(0x1009D2950);
    case 4:
      *(_DWORD *)uint64_t result = 0;
      break;
    default:
      return result;
  }
  return result;
}

ValueMetadata *type metadata accessor for KeySyncMetadata.Error()
{
  return &type metadata for KeySyncMetadata.Error;
}

uint64_t initializeBufferWithCopyOfBuffer for KeySyncMetadata.IndexInfo(uint64_t result, uint64_t *a2)
{
  uint64_t v2 = *a2;
  *(_WORD *)(result + 8) = *((_WORD *)a2 + 4);
  *(void *)uint64_t result = v2;
  return result;
}

uint64_t getEnumTagSinglePayload for KeySyncMetadata.IndexInfo(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0xFF && *(unsigned char *)(a1 + 10)) {
    return (*(_DWORD *)a1 + 255);
  }
  unsigned int v3 = *(unsigned __int8 *)(a1 + 9);
  BOOL v4 = v3 >= 2;
  int v5 = (v3 + 2147483646) & 0x7FFFFFFF;
  if (!v4) {
    int v5 = -1;
  }
  return (v5 + 1);
}

uint64_t storeEnumTagSinglePayload for KeySyncMetadata.IndexInfo(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFE)
  {
    *(_WORD *)(result + 8) = 0;
    *(void *)uint64_t result = a2 - 255;
    if (a3 >= 0xFF) {
      *(unsigned char *)(result + 10) = 1;
    }
  }
  else
  {
    if (a3 >= 0xFF) {
      *(unsigned char *)(result + 10) = 0;
    }
    if (a2) {
      *(unsigned char *)(result + 9) = a2 + 1;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for KeySyncMetadata.IndexInfo()
{
  return &type metadata for KeySyncMetadata.IndexInfo;
}

unsigned char *storeEnumTagSinglePayload for KeySyncMetadata.CodingKeys(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 3 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 3) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFD) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFC)
  {
    unsigned int v6 = ((a2 - 253) >> 8) + 1;
    *uint64_t result = a2 + 3;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1009D2B10);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 3;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for KeySyncMetadata.CodingKeys()
{
  return &type metadata for KeySyncMetadata.CodingKeys;
}

void *sub_1009D2B48(void *a1, void *a2, int *a3)
{
  int v5 = *(_DWORD *)(*((void *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v14 = *a2;
    *a1 = *a2;
    a1 = (void *)(v14 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v7 = type metadata accessor for UUID();
    (*(void (**)(void *, void *, uint64_t))(*(void *)(v7 - 8) + 16))(a1, a2, v7);
    uint64_t v8 = a3[6];
    *((unsigned char *)a1 + a3[5]) = *((unsigned char *)a2 + a3[5]);
    long long v9 = *(_OWORD *)((char *)a2 + v8 + 24);
    *(_OWORD *)((char *)a1 + v8 + 24) = v9;
    (**(void (***)(void))(v9 - 8))();
    uint64_t v10 = a3[7];
    uint64_t v11 = (char *)a1 + v10;
    uint64_t v12 = (char *)a2 + v10;
    uint64_t v13 = type metadata accessor for Date();
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v13 - 8) + 16))(v11, v12, v13);
  }
  return a1;
}

uint64_t sub_1009D2CAC(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8))(a1, v4);
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(a1 + *(int *)(a2 + 24));
  uint64_t v5 = a1 + *(int *)(a2 + 28);
  uint64_t v6 = type metadata accessor for Date();
  uint64_t v7 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v6 - 8) + 8);

  return v7(v5, v6);
}

uint64_t sub_1009D2D60(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 16))(a1, a2, v6);
  uint64_t v7 = a3[6];
  *(unsigned char *)(a1 + a3[5]) = *(unsigned char *)(a2 + a3[5]);
  long long v8 = *(_OWORD *)(a2 + v7 + 24);
  *(_OWORD *)(a1 + v7 + 24) = v8;
  (**(void (***)(void))(v8 - 8))();
  uint64_t v9 = a3[7];
  uint64_t v10 = a1 + v9;
  uint64_t v11 = a2 + v9;
  uint64_t v12 = type metadata accessor for Date();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v12 - 8) + 16))(v10, v11, v12);
  return a1;
}

uint64_t sub_1009D2E74(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 24))(a1, a2, v6);
  *(unsigned char *)(a1 + a3[5]) = *(unsigned char *)(a2 + a3[5]);
  sub_10026A7C0((uint64_t *)(a1 + a3[6]), (uint64_t *)(a2 + a3[6]));
  uint64_t v7 = a3[7];
  uint64_t v8 = a1 + v7;
  uint64_t v9 = a2 + v7;
  uint64_t v10 = type metadata accessor for Date();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 24))(v8, v9, v10);
  return a1;
}

uint64_t sub_1009D2F48(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 32))(a1, a2, v6);
  uint64_t v7 = a3[6];
  *(unsigned char *)(a1 + a3[5]) = *(unsigned char *)(a2 + a3[5]);
  uint64_t v8 = a1 + v7;
  uint64_t v9 = a2 + v7;
  long long v10 = *(_OWORD *)(v9 + 16);
  *(_OWORD *)uint64_t v8 = *(_OWORD *)v9;
  *(_OWORD *)(v8 + 16) = v10;
  *(void *)(v8 + 32) = *(void *)(v9 + 32);
  uint64_t v11 = a3[7];
  uint64_t v12 = a1 + v11;
  uint64_t v13 = a2 + v11;
  uint64_t v14 = type metadata accessor for Date();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v14 - 8) + 32))(v12, v13, v14);
  return a1;
}

uint64_t sub_1009D3024(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 40))(a1, a2, v6);
  uint64_t v7 = a3[6];
  *(unsigned char *)(a1 + a3[5]) = *(unsigned char *)(a2 + a3[5]);
  uint64_t v8 = a1 + v7;
  uint64_t v9 = a2 + v7;
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(a1 + v7);
  long long v10 = *(_OWORD *)(v9 + 16);
  *(_OWORD *)uint64_t v8 = *(_OWORD *)v9;
  *(_OWORD *)(v8 + 16) = v10;
  *(void *)(v8 + 32) = *(void *)(v9 + 32);
  uint64_t v11 = a3[7];
  uint64_t v12 = a1 + v11;
  uint64_t v13 = a2 + v11;
  uint64_t v14 = type metadata accessor for Date();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v14 - 8) + 40))(v12, v13, v14);
  return a1;
}

uint64_t sub_1009D3110(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1009D3124);
}

uint64_t sub_1009D3124(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for UUID();
  uint64_t v7 = *(void *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == a2)
  {
    uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    return v8(a1, a2, v6);
  }
  else if (a2 == 0x7FFFFFFF)
  {
    unint64_t v10 = *(void *)(a1 + *(int *)(a3 + 24) + 24);
    if (v10 >= 0xFFFFFFFF) {
      LODWORD(v10) = -1;
    }
    return (v10 + 1);
  }
  else
  {
    uint64_t v11 = type metadata accessor for Date();
    uint64_t v12 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v11 - 8) + 48);
    uint64_t v13 = v11;
    uint64_t v14 = a1 + *(int *)(a3 + 28);
    return v12(v14, a2, v13);
  }
}

uint64_t sub_1009D3254(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1009D3268);
}

uint64_t sub_1009D3268(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result = type metadata accessor for UUID();
  uint64_t v9 = *(void *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    unint64_t v10 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    return v10(a1, a2, a2, result);
  }
  else if (a3 == 0x7FFFFFFF)
  {
    *(void *)(a1 + *(int *)(a4 + 24) + 24) = (a2 - 1);
  }
  else
  {
    uint64_t v11 = type metadata accessor for Date();
    uint64_t v12 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v11 - 8) + 56);
    uint64_t v13 = v11;
    uint64_t v14 = a1 + *(int *)(a4 + 28);
    return v12(v14, a2, a2, v13);
  }
  return result;
}

uint64_t sub_1009D3398()
{
  uint64_t result = type metadata accessor for UUID();
  if (v1 <= 0x3F)
  {
    uint64_t result = type metadata accessor for Date();
    if (v2 <= 0x3F)
    {
      swift_initStructMetadata();
      return 0;
    }
  }
  return result;
}

unsigned char *storeEnumTagSinglePayload for KeySyncMetadata.MetadataType(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 8 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 8) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xF8) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xF7)
  {
    unsigned int v6 = ((a2 - 248) >> 8) + 1;
    *uint64_t result = a2 + 8;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1009D3540);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 8;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for KeySyncMetadata.MetadataType()
{
  return &type metadata for KeySyncMetadata.MetadataType;
}

unint64_t sub_1009D357C()
{
  unint64_t result = qword_101654548;
  if (!qword_101654548)
  {
    sub_10000592C(&qword_10164D2C8);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_101654548);
  }
  return result;
}

unint64_t sub_1009D35DC()
{
  unint64_t result = qword_101654550;
  if (!qword_101654550)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_101654550);
  }
  return result;
}

unint64_t sub_1009D3634()
{
  unint64_t result = qword_101654558;
  if (!qword_101654558)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_101654558);
  }
  return result;
}

unint64_t sub_1009D368C()
{
  unint64_t result = qword_101654560;
  if (!qword_101654560)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_101654560);
  }
  return result;
}

unint64_t sub_1009D36E4()
{
  unint64_t result = qword_101654568;
  if (!qword_101654568)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_101654568);
  }
  return result;
}

unint64_t sub_1009D373C()
{
  unint64_t result = qword_101654570;
  if (!qword_101654570)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_101654570);
  }
  return result;
}

unint64_t sub_1009D3790()
{
  unint64_t result = qword_101654578;
  if (!qword_101654578)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_101654578);
  }
  return result;
}

uint64_t sub_1009D37E4(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 0x65756C6156776172 && a2 == 0xE800000000000000;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x65636E6575716573 && a2 == 0xE800000000000000 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0x646C69577369 && a2 == 0xE600000000000000)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else
  {
    char v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v6) {
      return 2;
    }
    else {
      return 3;
    }
  }
}

uint64_t sub_1009D3934(void *a1)
{
  uint64_t v2 = sub_10000588C(&qword_101654580);
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  uint64_t v5 = &v8[-((v4 + 15) & 0xFFFFFFFFFFFFFFF0)];
  sub_10001CD44(a1, a1[3]);
  sub_1009D3B20();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  v8[15] = 0;
  uint64_t v6 = KeyedDecodingContainer.decode(_:forKey:)();
  v8[13] = 1;
  sub_100205590();
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  v8[12] = 2;
  KeyedDecodingContainer.decode(_:forKey:)();
  (*(void (**)(unsigned char *, uint64_t))(v3 + 8))(v5, v2);
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)a1);
  return v6;
}

unint64_t sub_1009D3B20()
{
  unint64_t result = qword_101654588;
  if (!qword_101654588)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_101654588);
  }
  return result;
}

unsigned char *storeEnumTagSinglePayload for KeySyncMetadata.IndexInfo.CodingKeys(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 2 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 2) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFE) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFD)
  {
    unsigned int v6 = ((a2 - 254) >> 8) + 1;
    *unint64_t result = a2 + 2;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1009D3C40);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 2;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for KeySyncMetadata.IndexInfo.CodingKeys()
{
  return &type metadata for KeySyncMetadata.IndexInfo.CodingKeys;
}

unint64_t sub_1009D3C7C()
{
  unint64_t result = qword_101654598;
  if (!qword_101654598)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_101654598);
  }
  return result;
}

unint64_t sub_1009D3CD4()
{
  unint64_t result = qword_1016545A0;
  if (!qword_1016545A0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1016545A0);
  }
  return result;
}

unint64_t sub_1009D3D2C()
{
  unint64_t result = qword_1016545A8;
  if (!qword_1016545A8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1016545A8);
  }
  return result;
}

uint64_t sub_1009D3D80(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1009D3D94);
}

uint64_t sub_1009D3D94(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for UUID();
  uint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 48);

  return v5(a1, a2, v4);
}

uint64_t sub_1009D3E00(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1009D3E14);
}

uint64_t sub_1009D3E14(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for UUID();
  uint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 56);

  return v5(a1, a2, a2, v4);
}

uint64_t type metadata accessor for PeerTrustAckEnvelopeV1(uint64_t a1)
{
  return sub_1000F4EA4(a1, qword_101654608);
}

uint64_t *sub_1009D3EA4(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v17 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v17 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v7 = type metadata accessor for UUID();
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v7 - 8) + 16))(a1, a2, v7);
    uint64_t v8 = *(int *)(a3 + 20);
    uint64_t v9 = *(int *)(a3 + 24);
    unint64_t v10 = (uint64_t *)((char *)a1 + v8);
    uint64_t v11 = (uint64_t *)((char *)a2 + v8);
    uint64_t v12 = v11[1];
    *unint64_t v10 = *v11;
    v10[1] = v12;
    uint64_t v13 = (uint64_t *)((char *)a1 + v9);
    uint64_t v14 = (char *)a2 + v9;
    uint64_t v15 = *(uint64_t *)((char *)a2 + v9);
    unint64_t v16 = *((void *)v14 + 1);
    swift_bridgeObjectRetain();
    sub_1000361E0(v15, v16);
    uint64_t *v13 = v15;
    v13[1] = v16;
  }
  return a1;
}

uint64_t sub_1009D3F98(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8))(a1, v4);
  swift_bridgeObjectRelease();
  int v5 = (uint64_t *)(a1 + *(int *)(a2 + 24));
  uint64_t v6 = *v5;
  unint64_t v7 = v5[1];

  return sub_10001CFB8(v6, v7);
}

uint64_t sub_1009D4020(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 16))(a1, a2, v6);
  uint64_t v7 = *(int *)(a3 + 20);
  uint64_t v8 = *(int *)(a3 + 24);
  uint64_t v9 = (void *)(a1 + v7);
  unint64_t v10 = (void *)(a2 + v7);
  uint64_t v11 = v10[1];
  *uint64_t v9 = *v10;
  v9[1] = v11;
  uint64_t v12 = (uint64_t *)(a1 + v8);
  uint64_t v13 = *(void *)(a2 + v8);
  unint64_t v14 = *(void *)(a2 + v8 + 8);
  swift_bridgeObjectRetain();
  sub_1000361E0(v13, v14);
  *uint64_t v12 = v13;
  v12[1] = v14;
  return a1;
}

uint64_t sub_1009D40C4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 24))(a1, a2, v6);
  uint64_t v7 = *(int *)(a3 + 20);
  uint64_t v8 = (void *)(a1 + v7);
  uint64_t v9 = (void *)(a2 + v7);
  *uint64_t v8 = *v9;
  v8[1] = v9[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v10 = *(int *)(a3 + 24);
  uint64_t v11 = (uint64_t *)(a1 + v10);
  uint64_t v12 = (uint64_t *)(a2 + v10);
  uint64_t v13 = *v12;
  unint64_t v14 = v12[1];
  sub_1000361E0(*v12, v14);
  uint64_t v15 = *v11;
  unint64_t v16 = v11[1];
  *uint64_t v11 = v13;
  v11[1] = v14;
  sub_10001CFB8(v15, v16);
  return a1;
}

uint64_t sub_1009D4188(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 40))(a1, a2, v6);
  uint64_t v7 = *(int *)(a3 + 20);
  uint64_t v8 = (void *)(a1 + v7);
  uint64_t v9 = (uint64_t *)(a2 + v7);
  uint64_t v11 = *v9;
  uint64_t v10 = v9[1];
  *uint64_t v8 = v11;
  v8[1] = v10;
  swift_bridgeObjectRelease();
  uint64_t v12 = *(int *)(a3 + 24);
  uint64_t v13 = *(void *)(a1 + v12);
  unint64_t v14 = *(void *)(a1 + v12 + 8);
  *(_OWORD *)(a1 + v12) = *(_OWORD *)(a2 + v12);
  sub_10001CFB8(v13, v14);
  return a1;
}

uint64_t sub_1009D422C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1009D4240);
}

uint64_t sub_1009D4240(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for UUID();
  uint64_t v7 = *(void *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == a2)
  {
    uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    return v8(a1, a2, v6);
  }
  else
  {
    unint64_t v10 = *(void *)(a1 + *(int *)(a3 + 20) + 8);
    if (v10 >= 0xFFFFFFFF) {
      LODWORD(v10) = -1;
    }
    return (v10 + 1);
  }
}

uint64_t sub_1009D4304(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1009D4318);
}

uint64_t sub_1009D4318(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result = type metadata accessor for UUID();
  uint64_t v9 = *(void *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    unint64_t v10 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    return v10(a1, a2, a2, result);
  }
  else
  {
    *(void *)(a1 + *(int *)(a4 + 20) + 8) = (a2 - 1);
  }
  return result;
}

uint64_t type metadata accessor for PeerTrustEnvelopeV1(uint64_t a1)
{
  return sub_1000F4EA4(a1, qword_101654698);
}

uint64_t sub_1009D43F8()
{
  uint64_t result = type metadata accessor for UUID();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t sub_1009D4498(void *a1)
{
  uint64_t v3 = v1;
  uint64_t v5 = sub_10000588C(&qword_101654700);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v8 = &v11[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0)];
  sub_10001CD44(a1, a1[3]);
  sub_1009D5138();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  LOBYTE(v12) = 0;
  type metadata accessor for UUID();
  sub_10001035C(&qword_10163B040);
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  if (!v2)
  {
    uint64_t v9 = type metadata accessor for PeerTrustEnvelopeV1(0);
    LOBYTE(v12) = 1;
    KeyedEncodingContainer.encode(_:forKey:)();
    long long v12 = *(_OWORD *)(v3 + *(int *)(v9 + 24));
    v11[15] = 2;
    sub_1002A89B4();
    KeyedEncodingContainer.encode<A>(_:forKey:)();
  }
  return (*(uint64_t (**)(unsigned char *, uint64_t))(v6 + 8))(v8, v5);
}

uint64_t sub_1009D4684@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v22 = a2;
  uint64_t v4 = type metadata accessor for UUID();
  uint64_t v24 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v25 = (char *)&v19 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v26 = sub_10000588C(&qword_1016546F0);
  uint64_t v23 = *(void *)(v26 - 8);
  __chkstk_darwin(v26);
  uint64_t v7 = (char *)&v19 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for PeerTrustEnvelopeV1(0);
  __chkstk_darwin(v8);
  unint64_t v10 = (char *)&v19 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10001CD44(a1, a1[3]);
  sub_1009D5138();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v2) {
    return _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)a1);
  }
  uint64_t v12 = v23;
  uint64_t v11 = v24;
  uint64_t v21 = v8;
  LOBYTE(v27) = 0;
  sub_10001035C((unint64_t *)&qword_10163B010);
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  uint64_t v13 = *(void (**)(char *, char *, uint64_t))(v11 + 32);
  uint64_t v20 = v10;
  v13(v10, v25, v4);
  LOBYTE(v27) = 1;
  uint64_t v14 = KeyedDecodingContainer.decode(_:forKey:)();
  uint64_t v15 = (uint64_t *)&v20[*(int *)(v21 + 20)];
  *uint64_t v15 = v14;
  v15[1] = v16;
  char v28 = 2;
  sub_1002A87F4();
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  (*(void (**)(char *, uint64_t))(v12 + 8))(v7, v26);
  uint64_t v17 = (uint64_t)v20;
  *(_OWORD *)&v20[*(int *)(v21 + 24)] = v27;
  sub_1009D518C(v17, v22);
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)a1);
  return sub_1009D51F0(v17);
}

uint64_t sub_1009D4A28@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v15 = a2;
  uint64_t v4 = type metadata accessor for UUID();
  uint64_t v14 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v17 = (char *)&v13 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = sub_10000588C(&qword_1016546D8);
  uint64_t v16 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  uint64_t v8 = (char *)&v13 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = type metadata accessor for PeerTrustAckEnvelopeV1(0);
  __chkstk_darwin(v9 - 8);
  uint64_t v11 = (char *)&v13 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10001CD44(a1, a1[3]);
  sub_1009D5080();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (!v2)
  {
    sub_10001035C((unint64_t *)&qword_10163B010);
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    (*(void (**)(char *, uint64_t))(v16 + 8))(v8, v6);
    (*(void (**)(char *, char *, uint64_t))(v14 + 32))(v11, v17, v4);
    sub_1009D50D4((uint64_t)v11, v15);
  }
  return _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)a1);
}

uint64_t sub_1009D4C94()
{
  unint64_t v1 = 0xD000000000000011;
  if (*v0 != 1) {
    unint64_t v1 = 0x6553646572616873;
  }
  if (*v0) {
    return v1;
  }
  else {
    return 0x696669746E656469;
  }
}

uint64_t sub_1009D4D00@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_1009D5634(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_1009D4D28(uint64_t a1)
{
  unint64_t v2 = sub_1009D5138();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1009D4D64(uint64_t a1)
{
  unint64_t v2 = sub_1009D5138();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_1009D4DA0@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_1009D4684(a1, a2);
}

uint64_t sub_1009D4DB8(void *a1)
{
  return sub_1009D4498(a1);
}

uint64_t sub_1009D4DD0()
{
  return 0x696669746E656469;
}

uint64_t sub_1009D4DEC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  if (a1 == 0x696669746E656469 && a2 == 0xEA00000000007265)
  {
    uint64_t result = swift_bridgeObjectRelease();
    char v7 = 0;
  }
  else
  {
    char v5 = _stringCompareWithSmolCheck(_:_:expecting:)();
    uint64_t result = swift_bridgeObjectRelease();
    char v7 = v5 ^ 1;
  }
  *a3 = v7 & 1;
  return result;
}

uint64_t sub_1009D4E90(uint64_t a1)
{
  unint64_t v2 = sub_1009D5080();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1009D4ECC(uint64_t a1)
{
  unint64_t v2 = sub_1009D5080();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_1009D4F08@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_1009D4A28(a1, a2);
}

uint64_t sub_1009D4F20(void *a1)
{
  uint64_t v2 = sub_10000588C(&qword_1016546E8);
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  char v5 = (char *)&v7 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10001CD44(a1, a1[3]);
  sub_1009D5080();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  type metadata accessor for UUID();
  sub_10001035C(&qword_10163B040);
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  return (*(uint64_t (**)(char *, uint64_t))(v3 + 8))(v5, v2);
}

unint64_t sub_1009D5080()
{
  unint64_t result = qword_1016546E0;
  if (!qword_1016546E0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1016546E0);
  }
  return result;
}

uint64_t sub_1009D50D4(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for PeerTrustAckEnvelopeV1(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

unint64_t sub_1009D5138()
{
  unint64_t result = qword_1016546F8;
  if (!qword_1016546F8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1016546F8);
  }
  return result;
}

uint64_t sub_1009D518C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for PeerTrustEnvelopeV1(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_1009D51F0(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for PeerTrustEnvelopeV1(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

unsigned char *storeEnumTagSinglePayload for PeerTrustEnvelopeV1.CodingKeys(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 2 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 2) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFE) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFD)
  {
    unsigned int v6 = ((a2 - 254) >> 8) + 1;
    *unint64_t result = a2 + 2;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1009D5318);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 2;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for PeerTrustEnvelopeV1.CodingKeys()
{
  return &type metadata for PeerTrustEnvelopeV1.CodingKeys;
}

unsigned char *storeEnumTagSinglePayload for PeerTrustAckEnvelopeV1.CodingKeys(unsigned char *result, int a2, int a3)
{
  if ((a3 + 1) >= 0x10000) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) < 0x100) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2)
  {
    switch(v5)
    {
      case 1:
        *unint64_t result = a2;
        return result;
      case 2:
        *(_WORD *)unint64_t result = a2;
        return result;
      case 3:
        goto LABEL_19;
      case 4:
        *(_DWORD *)unint64_t result = a2;
        return result;
      default:
        return result;
    }
  }
  switch(v5)
  {
    case 1:
      *unint64_t result = 0;
      break;
    case 2:
      *(_WORD *)unint64_t result = 0;
      break;
    case 3:
LABEL_19:
      __break(1u);
      JUMPOUT(0x1009D53ECLL);
    case 4:
      *(_DWORD *)unint64_t result = 0;
      break;
    default:
      return result;
  }
  return result;
}

ValueMetadata *type metadata accessor for PeerTrustAckEnvelopeV1.CodingKeys()
{
  return &type metadata for PeerTrustAckEnvelopeV1.CodingKeys;
}

unint64_t sub_1009D5428()
{
  unint64_t result = qword_101654708;
  if (!qword_101654708)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_101654708);
  }
  return result;
}

unint64_t sub_1009D5480()
{
  unint64_t result = qword_101654710;
  if (!qword_101654710)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_101654710);
  }
  return result;
}

unint64_t sub_1009D54D8()
{
  unint64_t result = qword_101654718;
  if (!qword_101654718)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_101654718);
  }
  return result;
}

unint64_t sub_1009D5530()
{
  unint64_t result = qword_101654720;
  if (!qword_101654720)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_101654720);
  }
  return result;
}

unint64_t sub_1009D5588()
{
  unint64_t result = qword_101654728;
  if (!qword_101654728)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_101654728);
  }
  return result;
}

unint64_t sub_1009D55E0()
{
  unint64_t result = qword_101654730;
  if (!qword_101654730)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_101654730);
  }
  return result;
}

uint64_t sub_1009D5634(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 0x696669746E656469 && a2 == 0xEA00000000007265;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0xD000000000000011 && a2 == 0x80000001013F7C50 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0x6553646572616873 && a2 == 0xEC00000074657263)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else
  {
    char v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v6) {
      return 2;
    }
    else {
      return 3;
    }
  }
}

__n128 sub_1009D57A8@<Q0>(void *a1@<X0>, __n128 *a2@<X8>)
{
  sub_1009D5BEC(a1, v6);
  if (!v2)
  {
    __n128 v5 = v6[3];
    a2[2] = v6[2];
    a2[3] = v5;
    a2[4] = v6[4];
    __n128 result = v6[1];
    *a2 = v6[0];
    a2[1] = result;
  }
  return result;
}

__n128 sub_1009D57F4@<Q0>(unint64_t a1@<X0>, unint64_t a2@<X1>, unint64_t a3@<X2>, unint64_t a4@<X3>, unint64_t a5@<X4>, unint64_t a6@<X5>, uint64_t a7@<X6>, unint64_t a8@<X7>, __n128 *a9@<X8>, unint64_t a10, unint64_t a11)
{
  switch(a2 >> 62)
  {
    case 1uLL:
      LODWORD(v18) = HIDWORD(a1) - a1;
      if (__OFSUB__(HIDWORD(a1), a1)) {
        goto LABEL_41;
      }
      uint64_t v18 = (int)v18;
LABEL_6:
      if (v18 != 32) {
        goto LABEL_53;
      }
      switch(a4 >> 62)
      {
        case 1uLL:
          LODWORD(v22) = HIDWORD(a3) - a3;
          if (__OFSUB__(HIDWORD(a3), a3)) {
            goto LABEL_43;
          }
          uint64_t v22 = (int)v22;
LABEL_12:
          if (v22 != 113) {
            goto LABEL_54;
          }
          switch(a6 >> 62)
          {
            case 1uLL:
              LODWORD(v25) = HIDWORD(a5) - a5;
              if (__OFSUB__(HIDWORD(a5), a5)) {
                goto LABEL_45;
              }
              uint64_t v25 = (int)v25;
LABEL_18:
              if (v25 != 32) {
                goto LABEL_55;
              }
              switch(a11 >> 62)
              {
                case 1uLL:
                  LODWORD(v28) = HIDWORD(a10) - a10;
                  if (__OFSUB__(HIDWORD(a10), a10)) {
                    goto LABEL_47;
                  }
                  uint64_t v28 = (int)v28;
LABEL_24:
                  if (v28 != 1) {
                    goto LABEL_56;
                  }
                  break;
                case 2uLL:
                  uint64_t v30 = *(void *)(a10 + 16);
                  uint64_t v29 = *(void *)(a10 + 24);
                  BOOL v21 = __OFSUB__(v29, v30);
                  uint64_t v28 = v29 - v30;
                  if (!v21) {
                    goto LABEL_24;
                  }
                  goto LABEL_48;
                case 3uLL:
                  goto LABEL_56;
                default:
                  uint64_t v28 = BYTE6(a11);
                  goto LABEL_24;
              }
              break;
            case 2uLL:
              uint64_t v27 = *(void *)(a5 + 16);
              uint64_t v26 = *(void *)(a5 + 24);
              BOOL v21 = __OFSUB__(v26, v27);
              uint64_t v25 = v26 - v27;
              if (!v21) {
                goto LABEL_18;
              }
              goto LABEL_46;
            case 3uLL:
              goto LABEL_55;
            default:
              uint64_t v25 = BYTE6(a6);
              goto LABEL_18;
          }
          break;
        case 2uLL:
          uint64_t v24 = *(void *)(a3 + 16);
          uint64_t v23 = *(void *)(a3 + 24);
          BOOL v21 = __OFSUB__(v23, v24);
          uint64_t v22 = v23 - v24;
          if (!v21) {
            goto LABEL_12;
          }
          goto LABEL_44;
        case 3uLL:
          goto LABEL_54;
        default:
          uint64_t v22 = BYTE6(a4);
          goto LABEL_12;
      }
      break;
    case 2uLL:
      uint64_t v20 = *(void *)(a1 + 16);
      uint64_t v19 = *(void *)(a1 + 24);
      BOOL v21 = __OFSUB__(v19, v20);
      uint64_t v18 = v19 - v20;
      if (!v21) {
        goto LABEL_6;
      }
      goto LABEL_42;
    case 3uLL:
      goto LABEL_53;
    default:
      uint64_t v18 = BYTE6(a2);
      goto LABEL_6;
  }
  unint64_t v31 = a8 >> 62;
  switch(a8 >> 62)
  {
    case 1uLL:
      LODWORD(v32) = HIDWORD(a7) - a7;
      if (__OFSUB__(HIDWORD(a7), a7)) {
        goto LABEL_49;
      }
      uint64_t v32 = (int)v32;
LABEL_30:
      if (v32 != 96) {
        goto LABEL_57;
      }
      v48.n128_u64[0] = a7;
      v48.n128_u64[1] = a8;
      if (v31)
      {
        if (v31 == 1)
        {
          if (__OFSUB__(HIDWORD(a7), a7))
          {
LABEL_51:
            __break(1u);
            goto LABEL_52;
          }
          uint64_t v35 = HIDWORD(a7) - (int)a7;
        }
        else
        {
          uint64_t v37 = *(void *)(a7 + 16);
          uint64_t v36 = *(void *)(a7 + 24);
          uint64_t v35 = v36 - v37;
          if (__OFSUB__(v36, v37))
          {
LABEL_52:
            __break(1u);
LABEL_53:
            __break(1u);
LABEL_54:
            __break(1u);
LABEL_55:
            __break(1u);
LABEL_56:
            __break(1u);
LABEL_57:
            __break(1u);
            JUMPOUT(0x1009D5B08);
          }
        }
        sub_1000361E0(a7, a8);
      }
      else
      {
        uint64_t v35 = BYTE6(a8);
      }
      if (__OFSUB__(96, v35))
      {
        __break(1u);
LABEL_41:
        __break(1u);
LABEL_42:
        __break(1u);
LABEL_43:
        __break(1u);
LABEL_44:
        __break(1u);
LABEL_45:
        __break(1u);
LABEL_46:
        __break(1u);
LABEL_47:
        __break(1u);
LABEL_48:
        __break(1u);
LABEL_49:
        __break(1u);
LABEL_50:
        __break(1u);
        goto LABEL_51;
      }
      uint64_t v46 = sub_10085E9A4(96 - v35);
      unint64_t v47 = v38;
      unint64_t v43 = a6;
      sub_10072AD40(&v46, 0);
      unint64_t v39 = a5;
      uint64_t v40 = v46;
      unint64_t v41 = v47;
      Data.append(_:)();
      sub_10001CFB8(a7, a8);
      sub_10001CFB8(v40, v41);
      __n128 result = v48;
      a9->n128_u64[0] = a1;
      a9->n128_u64[1] = a2;
      a9[1].n128_u64[0] = a3;
      a9[1].n128_u64[1] = a4;
      a9[2].n128_u64[0] = v39;
      a9[2].n128_u64[1] = v43;
      a9[3] = result;
      a9[4].n128_u64[0] = a10;
      a9[4].n128_u64[1] = a11;
      return result;
    case 2uLL:
      uint64_t v34 = *(void *)(a7 + 16);
      uint64_t v33 = *(void *)(a7 + 24);
      BOOL v21 = __OFSUB__(v33, v34);
      uint64_t v32 = v33 - v34;
      if (!v21) {
        goto LABEL_30;
      }
      goto LABEL_50;
    case 3uLL:
      goto LABEL_57;
    default:
      uint64_t v32 = BYTE6(a8);
      goto LABEL_30;
  }
}

ValueMetadata *type metadata accessor for AirPodsLEInitiatePairingCommandPayload()
{
  return &type metadata for AirPodsLEInitiatePairingCommandPayload;
}

unint64_t sub_1009D5B68(uint64_t a1)
{
  *(void *)(a1 + 8) = sub_1009D5B98();
  unint64_t result = sub_10033C1D4();
  *(void *)(a1 + 16) = result;
  return result;
}

unint64_t sub_1009D5B98()
{
  unint64_t result = qword_101654738;
  if (!qword_101654738)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_101654738);
  }
  return result;
}

uint64_t sub_1009D5BEC@<X0>(void *a1@<X0>, __n128 *a2@<X8>)
{
  sub_10001CD44(a1, a1[3]);
  dispatch thunk of BinaryDecoding.container()();
  sub_1000BD078((uint64_t)v22, v23);
  uint64_t v5 = dispatch thunk of BinaryDecodingContaining.decode(length:)();
  if (v2)
  {
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)v22);
    return _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)a1);
  }
  else
  {
    unint64_t v7 = v5;
    unint64_t v8 = v6;
    sub_1000BD078((uint64_t)v22, v23);
    unint64_t v9 = dispatch thunk of BinaryDecodingContaining.decode(length:)();
    unint64_t v25 = v10;
    sub_1000BD078((uint64_t)v22, v23);
    unint64_t v20 = dispatch thunk of BinaryDecodingContaining.decode(length:)();
    unint64_t v21 = v11;
    sub_1000BD078((uint64_t)v22, v23);
    uint64_t v18 = dispatch thunk of BinaryDecodingContaining.decode(length:)();
    unint64_t v19 = v12;
    sub_1000BD078((uint64_t)v22, v23);
    unint64_t v13 = dispatch thunk of BinaryDecodingContaining.decode(length:)();
    sub_1009D57F4(v7, v8, v9, v25, v20, v21, v18, v19, v24, v13, v14);
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)v22);
    uint64_t result = _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)a1);
    __n128 v16 = v24[3];
    a2[2] = v24[2];
    a2[3] = v16;
    a2[4] = v24[4];
    __n128 v17 = v24[1];
    *a2 = v24[0];
    a2[1] = v17;
  }
  return result;
}

ValueMetadata *type metadata accessor for FetchDevicesResponse()
{
  return &type metadata for FetchDevicesResponse;
}

uint64_t sub_1009D5E08(void *a1, uint64_t a2)
{
  uint64_t v4 = sub_10000588C(&qword_101654768);
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  unint64_t v7 = (char *)v9 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10001CD44(a1, a1[3]);
  sub_1009D6534();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  v9[1] = a2;
  sub_10000588C(&qword_101654750);
  sub_1009D65DC(&qword_101654770, (void (*)(void))sub_1009D664C);
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v7, v4);
}

uint64_t sub_1009D5F88(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  v12[0] = a4;
  v12[1] = a5;
  uint64_t v7 = sub_10000588C(&qword_1016547A8);
  uint64_t v8 = *(void *)(v7 - 8);
  __chkstk_darwin(v7);
  unint64_t v10 = (char *)v12 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10001CD44(a1, a1[3]);
  sub_1009D6B70();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  char v14 = 0;
  KeyedEncodingContainer.encode(_:forKey:)();
  if (!v5)
  {
    char v13 = 1;
    KeyedEncodingContainer.encode(_:forKey:)();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v8 + 8))(v10, v7);
}

uint64_t sub_1009D60FC()
{
  return 0x73656369766564;
}

uint64_t sub_1009D6114@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  if (a1 == 0x73656369766564 && a2 == 0xE700000000000000)
  {
    uint64_t result = swift_bridgeObjectRelease();
    char v7 = 0;
  }
  else
  {
    char v5 = _stringCompareWithSmolCheck(_:_:expecting:)();
    uint64_t result = swift_bridgeObjectRelease();
    char v7 = v5 ^ 1;
  }
  *a3 = v7 & 1;
  return result;
}

uint64_t sub_1009D61AC(uint64_t a1)
{
  unint64_t v2 = sub_1009D6534();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1009D61E8(uint64_t a1)
{
  unint64_t v2 = sub_1009D6534();

  return CodingKey.debugDescription.getter(a1, v2);
}

void *sub_1009D6224@<X0>(void *a1@<X0>, void *a2@<X8>)
{
  uint64_t result = sub_1009D638C(a1);
  if (!v2) {
    *a2 = result;
  }
  return result;
}

uint64_t sub_1009D6250(void *a1)
{
  return sub_1009D5E08(a1, *v1);
}

uint64_t sub_1009D626C()
{
  if (*v0) {
    return 1684628597;
  }
  else {
    return 0x444955556162;
  }
}

uint64_t sub_1009D629C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_1009D688C(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_1009D62C4(uint64_t a1)
{
  unint64_t v2 = sub_1009D6B70();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1009D6300(uint64_t a1)
{
  unint64_t v2 = sub_1009D6B70();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_1009D633C@<X0>(void *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = sub_1009D6968(a1);
  if (!v2)
  {
    *a2 = result;
    a2[1] = v5;
    a2[2] = v6;
    a2[3] = v7;
  }
  return result;
}

uint64_t sub_1009D636C(void *a1)
{
  return sub_1009D5F88(a1, *v1, v1[1], v1[2], v1[3]);
}

void *sub_1009D638C(void *a1)
{
  uint64_t v3 = sub_10000588C(&qword_101654740);
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  uint64_t v6 = (char *)v9 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = sub_10001CD44(a1, a1[3]);
  sub_1009D6534();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v1)
  {
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)a1);
  }
  else
  {
    sub_10000588C(&qword_101654750);
    sub_1009D65DC(&qword_101654758, (void (*)(void))sub_1009D6588);
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
    uint64_t v7 = (void *)v9[1];
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)a1);
  }
  return v7;
}

unint64_t sub_1009D6534()
{
  unint64_t result = qword_101654748;
  if (!qword_101654748)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_101654748);
  }
  return result;
}

unint64_t sub_1009D6588()
{
  unint64_t result = qword_101654760;
  if (!qword_101654760)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_101654760);
  }
  return result;
}

uint64_t sub_1009D65DC(unint64_t *a1, void (*a2)(void))
{
  uint64_t result = *a1;
  if (!result)
  {
    sub_10000592C(&qword_101654750);
    a2();
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

unint64_t sub_1009D664C()
{
  unint64_t result = qword_101654778;
  if (!qword_101654778)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_101654778);
  }
  return result;
}

unsigned char *storeEnumTagSinglePayload for FetchDevicesResponse.CodingKeys(unsigned char *result, int a2, int a3)
{
  if ((a3 + 1) >= 0x10000) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) < 0x100) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2)
  {
    switch(v5)
    {
      case 1:
        *unint64_t result = a2;
        return result;
      case 2:
        *(_WORD *)unint64_t result = a2;
        return result;
      case 3:
        goto LABEL_19;
      case 4:
        *(_DWORD *)unint64_t result = a2;
        return result;
      default:
        return result;
    }
  }
  switch(v5)
  {
    case 1:
      *unint64_t result = 0;
      break;
    case 2:
      *(_WORD *)unint64_t result = 0;
      break;
    case 3:
LABEL_19:
      __break(1u);
      JUMPOUT(0x1009D673CLL);
    case 4:
      *(_DWORD *)unint64_t result = 0;
      break;
    default:
      return result;
  }
  return result;
}

ValueMetadata *type metadata accessor for FetchDevicesResponse.CodingKeys()
{
  return &type metadata for FetchDevicesResponse.CodingKeys;
}

ValueMetadata *type metadata accessor for FetchDevicesResponse.Device()
{
  return &type metadata for FetchDevicesResponse.Device;
}

unint64_t sub_1009D6788()
{
  unint64_t result = qword_101654780;
  if (!qword_101654780)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_101654780);
  }
  return result;
}

unint64_t sub_1009D67E0()
{
  unint64_t result = qword_101654788;
  if (!qword_101654788)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_101654788);
  }
  return result;
}

unint64_t sub_1009D6838()
{
  unint64_t result = qword_101654790;
  if (!qword_101654790)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_101654790);
  }
  return result;
}

uint64_t sub_1009D688C(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 0x444955556162 && a2 == 0xE600000000000000;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 1684628597 && a2 == 0xE400000000000000)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else
  {
    char v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v6) {
      return 1;
    }
    else {
      return 2;
    }
  }
}

uint64_t sub_1009D6968(void *a1)
{
  uint64_t v3 = sub_10000588C(&qword_101654798);
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  char v6 = (char *)&v9 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = a1[4];
  sub_10001CD44(a1, a1[3]);
  sub_1009D6B70();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v1)
  {
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)a1);
  }
  else
  {
    char v11 = 0;
    uint64_t v7 = KeyedDecodingContainer.decode(_:forKey:)();
    char v10 = 1;
    swift_bridgeObjectRetain();
    KeyedDecodingContainer.decode(_:forKey:)();
    (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
    swift_bridgeObjectRetain();
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)a1);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  return v7;
}

unint64_t sub_1009D6B70()
{
  unint64_t result = qword_1016547A0;
  if (!qword_1016547A0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1016547A0);
  }
  return result;
}

unsigned char *storeEnumTagSinglePayload for FetchDevicesResponse.Device.CodingKeys(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFE)
  {
    unsigned int v6 = ((a2 - 255) >> 8) + 1;
    *unint64_t result = a2 + 1;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1009D6C90);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 1;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for FetchDevicesResponse.Device.CodingKeys()
{
  return &type metadata for FetchDevicesResponse.Device.CodingKeys;
}

unint64_t sub_1009D6CCC()
{
  unint64_t result = qword_1016547B0;
  if (!qword_1016547B0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1016547B0);
  }
  return result;
}

unint64_t sub_1009D6D24()
{
  unint64_t result = qword_1016547B8;
  if (!qword_1016547B8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1016547B8);
  }
  return result;
}

unint64_t sub_1009D6D7C()
{
  unint64_t result = qword_1016547C0;
  if (!qword_1016547C0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1016547C0);
  }
  return result;
}

ValueMetadata *type metadata accessor for PowerStateMonitoriOS()
{
  return &type metadata for PowerStateMonitoriOS;
}

uint64_t sub_1009D6DE0()
{
  sub_10001D4B0(0, (unint64_t *)&qword_10163AE70);
  uint64_t result = OS_os_log.init(subsystem:category:)();
  qword_10170E7C0 = result;
  return result;
}

uint64_t sub_1009D6E58()
{
  type metadata accessor for XPCActivity();
  sub_1009DAC54(&qword_1016549E0, v1, (void (*)(uint64_t))type metadata accessor for XPCActivity);
  v2._countAndFlagsBits = CustomDebugStringConvertible.typeDescription.getter();
  String.append(_:)(v2);
  swift_bridgeObjectRelease();
  v3._countAndFlagsBits = 8250;
  v3._object = (void *)0xE200000000000000;
  String.append(_:)(v3);
  v4._countAndFlagsBits = CustomDebugStringConvertible<>.addressDescription.getter();
  String.append(_:)(v4);
  swift_bridgeObjectRelease();
  v5._countAndFlagsBits = 23328;
  v5._object = (void *)0xE200000000000000;
  String.append(_:)(v5);
  uint64_t v7 = *(void *)(v0 + 24);
  unsigned int v6 = *(void **)(v0 + 32);
  swift_bridgeObjectRetain();
  v8._countAndFlagsBits = v7;
  v8._object = v6;
  String.append(_:)(v8);
  swift_bridgeObjectRelease();
  v9._countAndFlagsBits = 15965;
  v9._object = (void *)0xE200000000000000;
  String.append(_:)(v9);
  return 60;
}

uint64_t sub_1009D6F80(uint64_t a1)
{
  uint64_t v2 = String.utf8CString.getter();
  xpc_activity_unregister((const char *)(v2 + 32));
  swift_release();
  uint64_t v3 = *(void *)(a1 + 96);
  *(void *)(a1 + 96) = 0;
  *(void *)(a1 + 104) = 0;
  sub_1000A1534(v3);
  swift_unknownObjectWeakAssign();
  static os_log_type_t.default.getter();
  if (qword_101636EC0 != -1) {
    swift_once();
  }
  sub_10000588C((uint64_t *)&unk_10163AD00);
  uint64_t v4 = swift_allocObject();
  *(_OWORD *)(v4 + 16) = xmmword_101342130;
  type metadata accessor for XPCActivity();
  swift_retain();
  uint64_t v5 = String.init<A>(describing:)();
  uint64_t v7 = v6;
  *(void *)(v4 + 56) = &type metadata for String;
  *(void *)(v4 + 64) = sub_10000B4CC();
  *(void *)(v4 + 32) = v5;
  *(void *)(v4 + 40) = v7;
  os_log(_:dso:log:_:_:)();
  return swift_bridgeObjectRelease();
}

uint64_t sub_1009D70C8(_xpc_activity_s *a1)
{
  static os_log_type_t.default.getter();
  if (qword_101636EC0 != -1) {
    swift_once();
  }
  sub_10000588C((uint64_t *)&unk_10163AD00);
  uint64_t v2 = swift_allocObject();
  *(_OWORD *)(v2 + 16) = xmmword_101342130;
  type metadata accessor for XPCActivity();
  swift_retain();
  uint64_t v3 = String.init<A>(describing:)();
  uint64_t v5 = v4;
  *(void *)(v2 + 56) = &type metadata for String;
  unint64_t v6 = sub_10000B4CC();
  *(void *)(v2 + 64) = v6;
  *(void *)(v2 + 32) = v3;
  *(void *)(v2 + 40) = v5;
  os_log(_:dso:log:_:_:)();
  swift_bridgeObjectRelease();
  sub_10000588C((uint64_t *)&unk_101654980);
  OS_dispatch_queue.sync<A>(execute:)();
  if (a1)
  {
    sub_1009D7B24(a1);
    return swift_unknownObjectRelease();
  }
  else
  {
    int v8 = MEMORY[0x58];
    static os_log_type_t.default.getter();
    uint64_t v9 = swift_allocObject();
    *(_OWORD *)(v9 + 16) = xmmword_101347BA0;
    swift_retain();
    uint64_t v10 = String.init<A>(describing:)();
    *(void *)(v9 + 56) = &type metadata for String;
    *(void *)(v9 + 64) = v6;
    *(void *)(v9 + 32) = v10;
    *(void *)(v9 + 40) = v11;
    uint64_t v13 = MEMORY[0x18];
    uint64_t v12 = MEMORY[0x20];
    *(void *)(v9 + 96) = &type metadata for String;
    *(void *)(v9 + 104) = v6;
    *(void *)(v9 + 72) = v13;
    *(void *)(v9 + 80) = v12;
    swift_bridgeObjectRetain();
    os_log(_:dso:log:_:_:)();
    if (v8 == 1)
    {
      swift_bridgeObjectRelease();
      return sub_1009D7530();
    }
    else
    {
      return swift_bridgeObjectRelease();
    }
  }
}

BOOL sub_1009D7368()
{
  return sub_1009D73B8((uint64_t)sub_1009DB1C8, 3);
}

BOOL sub_1009D7390()
{
  return sub_1009D73B8((uint64_t)sub_1009DB1C8, 5);
}

BOOL sub_1009D73B8(uint64_t a1, xpc_activity_state_t a2)
{
  sub_10000588C((uint64_t *)&unk_101654980);
  OS_dispatch_queue.sync<A>(execute:)();
  if (activity)
  {
    BOOL v3 = xpc_activity_set_state(activity, a2);
    swift_unknownObjectRelease();
  }
  else
  {
    static os_log_type_t.error.getter();
    if (qword_101636EC0 != -1) {
      swift_once();
    }
    sub_10000588C((uint64_t *)&unk_10163AD00);
    uint64_t v4 = swift_allocObject();
    *(_OWORD *)(v4 + 16) = xmmword_101342130;
    type metadata accessor for XPCActivity();
    swift_retain();
    uint64_t v5 = String.init<A>(describing:)();
    uint64_t v7 = v6;
    *(void *)(v4 + 56) = &type metadata for String;
    *(void *)(v4 + 64) = sub_10000B4CC();
    *(void *)(v4 + 32) = v5;
    *(void *)(v4 + 40) = v7;
    os_log(_:dso:log:_:_:)();
    swift_bridgeObjectRelease();
    return 0;
  }
  return v3;
}

uint64_t sub_1009D7530()
{
  if (qword_1016371D8 != -1) {
    swift_once();
  }
  uint64_t aBlock = 0x7365547265646E75;
  unint64_t v6 = 0xE900000000000074;
  SynchronousCache.cachedValue<A>(key:computeBlock:)();
  uint64_t result = swift_bridgeObjectRelease();
  if ((v11 & 1) == 0)
  {
    uint64_t v2 = *(NSObject **)(v0 + 16);
    uint64_t v3 = swift_allocObject();
    *(void *)(v3 + 16) = sub_1009DAB88;
    *(void *)(v3 + 24) = v0;
    uint64_t v9 = sub_1003B7AE0;
    uint64_t v10 = v3;
    uint64_t aBlock = (uint64_t)_NSConcreteStackBlock;
    unint64_t v6 = 1107296256;
    uint64_t v7 = sub_1000A70B0;
    int v8 = &unk_1015E2258;
    uint64_t v4 = _Block_copy(&aBlock);
    swift_retain();
    swift_retain();
    swift_release();
    dispatch_sync(v2, v4);
    _Block_release(v4);
    LOBYTE(v2) = swift_isEscapingClosureAtFileLocation();
    swift_release();
    uint64_t result = swift_release();
    if (v2) {
      __break(1u);
    }
  }
  return result;
}

uint64_t sub_1009D76F8(uint64_t a1)
{
  uint64_t v2 = swift_allocObject();
  swift_weakInit();
  uint64_t v3 = *(void *)(a1 + 96);
  *(void *)(a1 + 96) = sub_1009DABD8;
  *(void *)(a1 + 104) = v2;
  swift_retain();
  sub_1000A1534(v3);
  v7[4] = sub_1009DABD8;
  v7[5] = v2;
  v7[0] = _NSConcreteStackBlock;
  v7[1] = 1107296256;
  v7[2] = sub_10107F1F0;
  v7[3] = &unk_1015E22A8;
  uint64_t v4 = _Block_copy(v7);
  swift_retain();
  swift_release();
  uint64_t v5 = String.utf8CString.getter();
  xpc_activity_register((const char *)(v5 + 32), XPC_ACTIVITY_CHECK_IN, v4);
  swift_release();
  _Block_release(v4);
  return swift_release();
}

uint64_t sub_1009D7834()
{
  swift_beginAccess();
  uint64_t result = swift_weakLoadStrong();
  if (result)
  {
    uint64_t v1 = type metadata accessor for Transaction();
    __chkstk_darwin(v1);
    static Transaction.named<A>(_:with:)();
    return swift_release();
  }
  return result;
}

uint64_t sub_1009D7908(uint64_t a1, xpc_activity_t activity, uint64_t a3)
{
  xpc_activity_state_t state = xpc_activity_get_state(activity);
  unint64_t v5 = sub_1009DA3B4(state);
  static os_log_type_t.default.getter();
  if (qword_101636EC0 != -1) {
    swift_once();
  }
  sub_10000588C((uint64_t *)&unk_10163AD00);
  uint64_t v6 = swift_allocObject();
  *(_OWORD *)(v6 + 16) = xmmword_101347500;
  type metadata accessor for XPCActivity();
  swift_retain();
  uint64_t v7 = String.init<A>(describing:)();
  uint64_t v9 = v8;
  *(void *)(v6 + 56) = &type metadata for String;
  unint64_t v10 = sub_10000B4CC();
  *(void *)(v6 + 64) = v10;
  *(void *)(v6 + 32) = v7;
  *(void *)(v6 + 40) = v9;
  swift_unknownObjectRetain();
  sub_10000588C(&qword_1016549D8);
  uint64_t v11 = String.init<A>(describing:)();
  *(void *)(v6 + 96) = &type metadata for String;
  *(void *)(v6 + 104) = v10;
  *(void *)(v6 + 72) = v11;
  *(void *)(v6 + 80) = v12;
  uint64_t v13 = String.init<A>(describing:)();
  *(void *)(v6 + 136) = &type metadata for String;
  *(void *)(v6 + 144) = v10;
  *(void *)(v6 + 112) = v13;
  *(void *)(v6 + 120) = v14;
  os_log(_:dso:log:_:_:)();
  uint64_t v15 = swift_bridgeObjectRelease();
  if (!(_BYTE)v5)
  {
    __chkstk_darwin(v15);
    OSAllocatedUnfairLock.callAsFunction<A>(_:)();
    unint64_t v5 = v5;
  }
  return (*(uint64_t (**)(uint64_t, uint64_t, unint64_t))(a3 + 64))(a3, a1, v5);
}

unint64_t sub_1009D7B24(_xpc_activity_s *a1)
{
  void (*v5)(void *__return_ptr, _OWORD *);
  NSObject *v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  xpc_object_t v15;
  xpc_activity_state_t state;
  NSObject *v18;
  void *v19;
  BOOL v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  xpc_object_t v40;
  long long aBlock;
  long long v42;
  uint64_t (*v43)();
  _xpc_activity_s *v44;
  uint64_t v45[5];
  void v46[5];
  long long v47;
  long long v48;
  uint64_t (*v49)();
  _OWORD v50[2];
  uint64_t v51;
  _OWORD v52[4];

  uint64_t v2 = v1;
  uint64_t v3 = a1;
  if (!xpc_activity_copy_criteria(a1)) {
    goto LABEL_4;
  }
  uint64_t v4 = (void *)swift_unknownObjectRetain();
  sub_1009DA238(v4, v45);
  sub_1006E2D14((uint64_t)v45, (uint64_t)v50);
  if (LOBYTE(v50[0]) != 2)
  {
    v52[0] = v50[0];
    v52[1] = v50[1];
    *(void *)&v52[2] = v51;
    (*(void (**)(void *__return_ptr, uint64_t *))(v1 + 48))(v46, v45);
    sub_1006E2D14((uint64_t)v46, (uint64_t)&v47);
    if (v47 == 2)
    {
      uint64_t v18 = *(NSObject **)(v1 + 16);
      uint64_t v3 = (_xpc_activity_s *)swift_allocObject();
      *((void *)v3 + 2) = sub_100550644;
      *((void *)v3 + 3) = v2;
      unint64_t v43 = sub_1003B7AE0;
      uint64_t v44 = v3;
      *(void *)&uint64_t aBlock = _NSConcreteStackBlock;
      *((void *)&aBlock + 1) = 1107296256;
      *(void *)&char v42 = sub_1000A70B0;
      *((void *)&v42 + 1) = &unk_1015E2208;
      unint64_t v19 = _Block_copy(&aBlock);
      swift_retain();
      swift_retain();
      swift_release();
      dispatch_sync(v18, v19);
      _Block_release(v19);
      LOBYTE(v18) = swift_isEscapingClosureAtFileLocation();
      swift_unknownObjectRelease();
      swift_release();
      swift_release();
      if ((v18 & 1) == 0) {
        return 6;
      }
      __break(1u);
    }
    else
    {
      uint64_t aBlock = v47;
      char v42 = v48;
      unint64_t v43 = v49;
      unint64_t v20 = sub_1009D9A10((uint64_t)&aBlock, (uint64_t)v52);
      static os_log_type_t.default.getter();
      if (!v20)
      {
        if (qword_101636EC0 != -1) {
          swift_once();
        }
        sub_10000588C((uint64_t *)&unk_10163AD00);
        uint64_t v28 = swift_allocObject();
        *(_OWORD *)(v28 + 16) = xmmword_101347BA0;
        type metadata accessor for XPCActivity();
        swift_retain();
        uint64_t v29 = String.init<A>(describing:)();
        unint64_t v31 = v30;
        *(void *)(v28 + 56) = &type metadata for String;
        uint64_t v32 = sub_10000B4CC();
        *(void *)(v28 + 64) = v32;
        *(void *)(v28 + 32) = v29;
        *(void *)(v28 + 40) = v31;
        uint64_t v33 = String.init<A>(describing:)();
        *(void *)(v28 + 96) = &type metadata for String;
        *(void *)(v28 + 104) = v32;
        *(void *)(v28 + 72) = v33;
        *(void *)(v28 + 80) = v34;
        os_log(_:dso:log:_:_:)();
        swift_bridgeObjectRelease();
        static os_log_type_t.default.getter();
        uint64_t v35 = swift_allocObject();
        *(_OWORD *)(v35 + 16) = xmmword_101347BA0;
        swift_retain();
        uint64_t v36 = String.init<A>(describing:)();
        *(void *)(v35 + 56) = &type metadata for String;
        *(void *)(v35 + 64) = v32;
        *(void *)(v35 + 32) = v36;
        *(void *)(v35 + 40) = v37;
        unint64_t v38 = String.init<A>(describing:)();
        *(void *)(v35 + 96) = &type metadata for String;
        *(void *)(v35 + 104) = v32;
        *(void *)(v35 + 72) = v38;
        *(void *)(v35 + 80) = v39;
        os_log(_:dso:log:_:_:)();
        swift_bridgeObjectRelease();
        sub_1009D827C();
        xpc_activity_set_criteria(v3, v40);
        swift_unknownObjectRelease();
        goto LABEL_10;
      }
      if (qword_101636EC0 == -1) {
        goto LABEL_16;
      }
    }
    swift_once();
LABEL_16:
    sub_10000588C((uint64_t *)&unk_10163AD00);
    unint64_t v21 = swift_allocObject();
    *(_OWORD *)(v21 + 16) = xmmword_101347BA0;
    type metadata accessor for XPCActivity();
    swift_retain();
    uint64_t v22 = String.init<A>(describing:)();
    uint64_t v24 = v23;
    *(void *)(v21 + 56) = &type metadata for String;
    unint64_t v25 = sub_10000B4CC();
    *(void *)(v21 + 64) = v25;
    *(void *)(v21 + 32) = v22;
    *(void *)(v21 + 40) = v24;
    uint64_t v26 = String.init<A>(describing:)();
    *(void *)(v21 + 96) = &type metadata for String;
    *(void *)(v21 + 104) = v25;
    *(void *)(v21 + 72) = v26;
    *(void *)(v21 + 80) = v27;
    os_log(_:dso:log:_:_:)();
    swift_bridgeObjectRelease();
LABEL_10:
    swift_unknownObjectRelease();
    xpc_activity_state_t state = xpc_activity_get_state(v3);
    return sub_1009DA3B4(state);
  }
  swift_unknownObjectRelease();
LABEL_4:
  unint64_t v5 = *(void (**)(void *__return_ptr, _OWORD *))(v1 + 48);
  *(void *)&v52[0] = 2;
  memset((char *)v52 + 8, 0, 32);
  v5(v46, v52);
  sub_1006E2D14((uint64_t)v46, (uint64_t)&v47);
  if (v47 != 2)
  {
LABEL_7:
    uint64_t aBlock = v47;
    char v42 = v48;
    unint64_t v43 = v49;
    static os_log_type_t.default.getter();
    if (qword_101636EC0 != -1) {
      swift_once();
    }
    sub_10000588C((uint64_t *)&unk_10163AD00);
    uint64_t v8 = swift_allocObject();
    *(_OWORD *)(v8 + 16) = xmmword_101347BA0;
    type metadata accessor for XPCActivity();
    swift_retain();
    uint64_t v9 = String.init<A>(describing:)();
    uint64_t v11 = v10;
    *(void *)(v8 + 56) = &type metadata for String;
    uint64_t v12 = sub_10000B4CC();
    *(void *)(v8 + 64) = v12;
    *(void *)(v8 + 32) = v9;
    *(void *)(v8 + 40) = v11;
    uint64_t v13 = String.init<A>(describing:)();
    *(void *)(v8 + 96) = &type metadata for String;
    *(void *)(v8 + 104) = v12;
    *(void *)(v8 + 72) = v13;
    *(void *)(v8 + 80) = v14;
    os_log(_:dso:log:_:_:)();
    swift_bridgeObjectRelease();
    sub_1009D827C();
    xpc_activity_set_criteria(v3, v15);
    goto LABEL_10;
  }
  uint64_t v6 = *(NSObject **)(v1 + 16);
  uint64_t v3 = (_xpc_activity_s *)swift_allocObject();
  *((void *)v3 + 2) = sub_100550644;
  *((void *)v3 + 3) = v2;
  unint64_t v43 = sub_100132424;
  uint64_t v44 = v3;
  *(void *)&uint64_t aBlock = _NSConcreteStackBlock;
  *((void *)&aBlock + 1) = 1107296256;
  *(void *)&char v42 = sub_1000A70B0;
  *((void *)&v42 + 1) = &unk_1015E21B8;
  uint64_t v7 = _Block_copy(&aBlock);
  swift_retain();
  swift_retain();
  swift_release();
  dispatch_sync(v6, v7);
  _Block_release(v7);
  LOBYTE(v6) = swift_isEscapingClosureAtFileLocation();
  swift_release();
  swift_release();
  if (v6)
  {
    __break(1u);
    goto LABEL_7;
  }
  return 6;
}

void sub_1009D827C()
{
  xpc_object_t v1 = xpc_dictionary_create(0, 0, 0);
  uint64_t v2 = v1;
  uint64_t v3 = (const char **)&XPC_ACTIVITY_PRIORITY_MAINTENANCE;
  if (!*(unsigned char *)v0) {
    uint64_t v3 = (const char **)&XPC_ACTIVITY_PRIORITY_UTILITY;
  }
  xpc_dictionary_set_string(v1, XPC_ACTIVITY_PRIORITY, *v3);
  int v4 = *(unsigned __int8 *)(v0 + 1);
  xpc_dictionary_set_BOOL(v2, XPC_ACTIVITY_REPEATING, *(unsigned char *)(v0 + 1));
  xpc_dictionary_set_int64(v2, XPC_ACTIVITY_DELAY, *(void *)(v0 + 8));
  xpc_dictionary_set_int64(v2, XPC_ACTIVITY_GRACE_PERIOD, *(void *)(v0 + 16));
  if (v4 == 1) {
    xpc_dictionary_set_int64(v2, XPC_ACTIVITY_INTERVAL, *(void *)(v0 + 24));
  }
  uint64_t v5 = *(void *)(v0 + 32);
  if (v5)
  {
    if (!XPC_ACTIVITY_POWER_NAP)
    {
      __break(1u);
      goto LABEL_51;
    }
    xpc_dictionary_set_BOOL(v2, XPC_ACTIVITY_POWER_NAP, 1);
  }
  if ((v5 & 4) == 0) {
    goto LABEL_11;
  }
  if (!XPC_ACTIVITY_REQUIRE_SIGNIFICANT_USER_INACTIVITY)
  {
LABEL_51:
    __break(1u);
    goto LABEL_52;
  }
  xpc_dictionary_set_BOOL(v2, XPC_ACTIVITY_REQUIRE_SIGNIFICANT_USER_INACTIVITY, 1);
LABEL_11:
  if ((v5 & 2) == 0) {
    goto LABEL_14;
  }
  if (!XPC_ACTIVITY_SHOULD_WAKE_DEVICE)
  {
LABEL_52:
    __break(1u);
    goto LABEL_53;
  }
  xpc_dictionary_set_BOOL(v2, XPC_ACTIVITY_SHOULD_WAKE_DEVICE, 1);
LABEL_14:
  if ((v5 & 8) == 0) {
    goto LABEL_17;
  }
  if (!XPC_ACTIVITY_USES_DUET_POWER_BUDGETING)
  {
LABEL_53:
    __break(1u);
    goto LABEL_54;
  }
  xpc_dictionary_set_BOOL(v2, XPC_ACTIVITY_USES_DUET_POWER_BUDGETING, 1);
LABEL_17:
  if ((v5 & 0x10) == 0) {
    goto LABEL_20;
  }
  if (!XPC_ACTIVITY_REQUIRES_CLASS_A)
  {
LABEL_54:
    __break(1u);
    goto LABEL_55;
  }
  xpc_dictionary_set_BOOL(v2, XPC_ACTIVITY_REQUIRES_CLASS_A, 1);
LABEL_20:
  if ((v5 & 0x20) == 0) {
    goto LABEL_23;
  }
  if (!XPC_ACTIVITY_REQUIRES_CLASS_B)
  {
LABEL_55:
    __break(1u);
    goto LABEL_56;
  }
  xpc_dictionary_set_BOOL(v2, XPC_ACTIVITY_REQUIRES_CLASS_B, 1);
LABEL_23:
  if ((v5 & 0x40) == 0) {
    goto LABEL_26;
  }
  if (!XPC_ACTIVITY_REQUIRES_CLASS_C)
  {
LABEL_56:
    __break(1u);
    goto LABEL_57;
  }
  xpc_dictionary_set_BOOL(v2, XPC_ACTIVITY_REQUIRES_CLASS_C, 1);
LABEL_26:
  if ((v5 & 0x80) == 0) {
    goto LABEL_29;
  }
  if (!XPC_ACTIVITY_REQUIRE_NETWORK_CONNECTIVITY)
  {
LABEL_57:
    __break(1u);
    goto LABEL_58;
  }
  xpc_dictionary_set_BOOL(v2, XPC_ACTIVITY_REQUIRE_NETWORK_CONNECTIVITY, 1);
LABEL_29:
  if ((v5 & 0x100) == 0) {
    goto LABEL_32;
  }
  if (!XPC_ACTIVITY_REQUIRE_INEXPENSIVE_NETWORK_CONNECTIVITY)
  {
LABEL_58:
    __break(1u);
    goto LABEL_59;
  }
  xpc_dictionary_set_BOOL(v2, XPC_ACTIVITY_REQUIRE_INEXPENSIVE_NETWORK_CONNECTIVITY, 1);
LABEL_32:
  if ((v5 & 0x2000) == 0) {
    goto LABEL_35;
  }
  xpc_object_t v6 = xpc_dictionary_create(0, 0, 0);
  xpc_dictionary_set_string(v6, "DataBudgetName", "com.apple.dasd.baCellular");
  if (!XPC_ACTIVITY_DUET_ACTIVITY_SCHEDULER_DATA)
  {
LABEL_59:
    __break(1u);
    goto LABEL_60;
  }
  xpc_dictionary_set_value(v2, XPC_ACTIVITY_DUET_ACTIVITY_SCHEDULER_DATA, v6);
  swift_unknownObjectRelease();
LABEL_35:
  if ((v5 & 0x200) != 0) {
    xpc_dictionary_set_BOOL(v2, XPC_ACTIVITY_ALLOW_BATTERY, 1);
  }
  if ((v5 & 0x400) != 0)
  {
    if (XPC_ACTIVITY_MEMORY_INTENSIVE)
    {
      xpc_dictionary_set_BOOL(v2, XPC_ACTIVITY_MEMORY_INTENSIVE, 1);
      goto LABEL_40;
    }
LABEL_60:
    __break(1u);
    goto LABEL_61;
  }
LABEL_40:
  if ((v5 & 0x800) == 0) {
    goto LABEL_43;
  }
  if (!XPC_ACTIVITY_CPU_INTENSIVE)
  {
LABEL_61:
    __break(1u);
    goto LABEL_62;
  }
  xpc_dictionary_set_BOOL(v2, XPC_ACTIVITY_CPU_INTENSIVE, 1);
LABEL_43:
  if ((v5 & 0x1000) == 0) {
    goto LABEL_46;
  }
  if (!XPC_ACTIVITY_DISK_INTENSIVE)
  {
LABEL_62:
    __break(1u);
    goto LABEL_63;
  }
  xpc_dictionary_set_BOOL(v2, XPC_ACTIVITY_DISK_INTENSIVE, 1);
LABEL_46:
  if ((v5 & 0x4000) == 0) {
    return;
  }
  if (!XPC_ACTIVITY_COMMUNICATES_WITH_PAIRED_DEVICE)
  {
LABEL_63:
    __break(1u);
    return;
  }
  xpc_dictionary_set_BOOL(v2, XPC_ACTIVITY_COMMUNICATES_WITH_PAIRED_DEVICE, 1);
}

uint64_t sub_1009D859C()
{
  uint64_t result = String.init(cString:)();
  qword_1016547D0 = result;
  *(void *)algn_1016547D8 = v1;
  return result;
}

uint64_t sub_1009D85CC(char *a1, char *a2)
{
  return sub_10071F058(*a1, *a2);
}

Swift::Int sub_1009D85D8()
{
  return Hasher._finalize()();
}

uint64_t sub_1009D8664()
{
  String.hash(into:)();

  return swift_bridgeObjectRelease();
}

Swift::Int sub_1009D86DC()
{
  return Hasher._finalize()();
}

uint64_t sub_1009D8764@<X0>(Swift::String *a1@<X0>, char *a2@<X8>)
{
  Swift::Int v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_1015A2B88, *a1);
  uint64_t result = swift_bridgeObjectRelease();
  if (v3 == 1) {
    char v5 = 1;
  }
  else {
    char v5 = 2;
  }
  if (!v3) {
    char v5 = 0;
  }
  *a2 = v5;
  return result;
}

void sub_1009D87C4(uint64_t *a1@<X8>)
{
  uint64_t v2 = 0x7974696C697475;
  if (*v1) {
    uint64_t v2 = 0x616E65746E69616DLL;
  }
  unint64_t v3 = 0xE700000000000000;
  if (*v1) {
    unint64_t v3 = 0xEB0000000065636ELL;
  }
  *a1 = v2;
  a1[1] = v3;
}

uint64_t sub_1009D880C()
{
  return RawRepresentable<>.init(from:)();
}

uint64_t sub_1009D886C()
{
  return RawRepresentable<>.encode(to:)();
}

uint64_t sub_1009D88BC()
{
  if (*v0) {
    return 0x6E65746E69616D2ELL;
  }
  else {
    return 0x7974696C6974752ELL;
  }
}

uint64_t sub_1009D8900()
{
  return RawRepresentable<>.init(from:)();
}

uint64_t sub_1009D8960()
{
  return RawRepresentable<>.encode(to:)();
}

uint64_t sub_1009D89B0(__int16 a1)
{
  if ((a1 & 1) == 0)
  {
    uint64_t v2 = _swiftEmptyArrayStorage;
    if ((a1 & 2) == 0) {
      goto LABEL_12;
    }
    goto LABEL_7;
  }
  uint64_t v2 = sub_100A6E25C(0, 1, 1, _swiftEmptyArrayStorage);
  unint64_t v4 = v2[2];
  unint64_t v3 = v2[3];
  if (v4 >= v3 >> 1) {
    uint64_t v2 = sub_100A6E25C((void *)(v3 > 1), v4 + 1, 1, v2);
  }
  v2[2] = v4 + 1;
  char v5 = &v2[2 * v4];
  v5[4] = 0x614E7265776F702ELL;
  v5[5] = 0xE900000000000070;
  if ((a1 & 2) != 0)
  {
LABEL_7:
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
      uint64_t v2 = sub_100A6E25C(0, v2[2] + 1, 1, v2);
    }
    unint64_t v7 = v2[2];
    unint64_t v6 = v2[3];
    if (v7 >= v6 >> 1) {
      uint64_t v2 = sub_100A6E25C((void *)(v6 > 1), v7 + 1, 1, v2);
    }
    v2[2] = v7 + 1;
    uint64_t v8 = &v2[2 * v7];
    v8[4] = 0x766544656B61772ELL;
    v8[5] = 0xEB00000000656369;
  }
LABEL_12:
  if ((a1 & 4) != 0)
  {
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
      uint64_t v2 = sub_100A6E25C(0, v2[2] + 1, 1, v2);
    }
    unint64_t v10 = v2[2];
    unint64_t v9 = v2[3];
    if (v10 >= v9 >> 1) {
      uint64_t v2 = sub_100A6E25C((void *)(v9 > 1), v10 + 1, 1, v2);
    }
    v2[2] = v10 + 1;
    uint64_t v11 = &v2[2 * v10];
    v11[4] = 0xD00000000000001ALL;
    v11[5] = 0x800000010140E6F0;
  }
  if ((a1 & 8) != 0)
  {
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
      uint64_t v2 = sub_100A6E25C(0, v2[2] + 1, 1, v2);
    }
    unint64_t v13 = v2[2];
    unint64_t v12 = v2[3];
    if (v13 >= v12 >> 1) {
      uint64_t v2 = sub_100A6E25C((void *)(v12 > 1), v13 + 1, 1, v2);
    }
    v2[2] = v13 + 1;
    uint64_t v14 = &v2[2 * v13];
    v14[4] = 0xD000000000000017;
    v14[5] = 0x800000010140E6D0;
  }
  if ((a1 & 0x10) != 0)
  {
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
      uint64_t v2 = sub_100A6E25C(0, v2[2] + 1, 1, v2);
    }
    unint64_t v16 = v2[2];
    unint64_t v15 = v2[3];
    if (v16 >= v15 >> 1) {
      uint64_t v2 = sub_100A6E25C((void *)(v15 > 1), v16 + 1, 1, v2);
    }
    v2[2] = v16 + 1;
    __n128 v17 = &v2[2 * v16];
    v17[4] = 0x657269757165722ELL;
    v17[5] = 0xEF417373616C4373;
    if ((a1 & 0x20) == 0)
    {
LABEL_26:
      if ((a1 & 0x40) == 0) {
        goto LABEL_27;
      }
      goto LABEL_46;
    }
  }
  else if ((a1 & 0x20) == 0)
  {
    goto LABEL_26;
  }
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    uint64_t v2 = sub_100A6E25C(0, v2[2] + 1, 1, v2);
  }
  unint64_t v19 = v2[2];
  unint64_t v18 = v2[3];
  if (v19 >= v18 >> 1) {
    uint64_t v2 = sub_100A6E25C((void *)(v18 > 1), v19 + 1, 1, v2);
  }
  v2[2] = v19 + 1;
  unint64_t v20 = &v2[2 * v19];
  v20[4] = 0x657269757165722ELL;
  v20[5] = 0xEF427373616C4373;
  if ((a1 & 0x40) == 0)
  {
LABEL_27:
    if ((a1 & 0x80) == 0) {
      goto LABEL_28;
    }
    goto LABEL_51;
  }
LABEL_46:
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    uint64_t v2 = sub_100A6E25C(0, v2[2] + 1, 1, v2);
  }
  unint64_t v22 = v2[2];
  unint64_t v21 = v2[3];
  if (v22 >= v21 >> 1) {
    uint64_t v2 = sub_100A6E25C((void *)(v21 > 1), v22 + 1, 1, v2);
  }
  v2[2] = v22 + 1;
  uint64_t v23 = &v2[2 * v22];
  v23[4] = 0x657269757165722ELL;
  v23[5] = 0xEF437373616C4373;
  if ((a1 & 0x80) == 0)
  {
LABEL_28:
    if ((a1 & 0x100) == 0) {
      goto LABEL_29;
    }
    goto LABEL_56;
  }
LABEL_51:
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    uint64_t v2 = sub_100A6E25C(0, v2[2] + 1, 1, v2);
  }
  unint64_t v25 = v2[2];
  unint64_t v24 = v2[3];
  if (v25 >= v24 >> 1) {
    uint64_t v2 = sub_100A6E25C((void *)(v24 > 1), v25 + 1, 1, v2);
  }
  v2[2] = v25 + 1;
  uint64_t v26 = &v2[2 * v25];
  v26[4] = 0xD000000000000010;
  v26[5] = 0x800000010140E6B0;
  if ((a1 & 0x100) == 0)
  {
LABEL_29:
    if ((a1 & 0x200) == 0) {
      goto LABEL_30;
    }
    goto LABEL_61;
  }
LABEL_56:
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    uint64_t v2 = sub_100A6E25C(0, v2[2] + 1, 1, v2);
  }
  unint64_t v28 = v2[2];
  unint64_t v27 = v2[3];
  if (v28 >= v27 >> 1) {
    uint64_t v2 = sub_100A6E25C((void *)(v27 > 1), v28 + 1, 1, v2);
  }
  v2[2] = v28 + 1;
  uint64_t v29 = &v2[2 * v28];
  v29[4] = 0xD00000000000001BLL;
  v29[5] = 0x800000010140E690;
  if ((a1 & 0x200) == 0)
  {
LABEL_30:
    if ((a1 & 0x400) == 0) {
      goto LABEL_31;
    }
    goto LABEL_66;
  }
LABEL_61:
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    uint64_t v2 = sub_100A6E25C(0, v2[2] + 1, 1, v2);
  }
  unint64_t v31 = v2[2];
  unint64_t v30 = v2[3];
  if (v31 >= v30 >> 1) {
    uint64_t v2 = sub_100A6E25C((void *)(v30 > 1), v31 + 1, 1, v2);
  }
  v2[2] = v31 + 1;
  uint64_t v32 = (char *)&v2[2 * v31];
  strcpy(v32 + 32, ".allowBattery");
  *((_WORD *)v32 + 23) = -4864;
  if ((a1 & 0x400) == 0)
  {
LABEL_31:
    if ((a1 & 0x800) == 0) {
      goto LABEL_32;
    }
    goto LABEL_71;
  }
LABEL_66:
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    uint64_t v2 = sub_100A6E25C(0, v2[2] + 1, 1, v2);
  }
  unint64_t v34 = v2[2];
  unint64_t v33 = v2[3];
  if (v34 >= v33 >> 1) {
    uint64_t v2 = sub_100A6E25C((void *)(v33 > 1), v34 + 1, 1, v2);
  }
  v2[2] = v34 + 1;
  uint64_t v35 = &v2[2 * v34];
  v35[4] = 0xD000000000000010;
  v35[5] = 0x800000010140E670;
  if ((a1 & 0x800) == 0)
  {
LABEL_32:
    if ((a1 & 0x1000) == 0) {
      goto LABEL_33;
    }
    goto LABEL_76;
  }
LABEL_71:
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    uint64_t v2 = sub_100A6E25C(0, v2[2] + 1, 1, v2);
  }
  unint64_t v37 = v2[2];
  unint64_t v36 = v2[3];
  if (v37 >= v36 >> 1) {
    uint64_t v2 = sub_100A6E25C((void *)(v36 > 1), v37 + 1, 1, v2);
  }
  v2[2] = v37 + 1;
  unint64_t v38 = (char *)&v2[2 * v37];
  strcpy(v38 + 32, ".cpuIntensive");
  *((_WORD *)v38 + 23) = -4864;
  if ((a1 & 0x1000) == 0)
  {
LABEL_33:
    if ((a1 & 0x2000) == 0) {
      goto LABEL_34;
    }
    goto LABEL_81;
  }
LABEL_76:
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    uint64_t v2 = sub_100A6E25C(0, v2[2] + 1, 1, v2);
  }
  unint64_t v40 = v2[2];
  unint64_t v39 = v2[3];
  if (v40 >= v39 >> 1) {
    uint64_t v2 = sub_100A6E25C((void *)(v39 > 1), v40 + 1, 1, v2);
  }
  v2[2] = v40 + 1;
  unint64_t v41 = (char *)&v2[2 * v40];
  strcpy(v41 + 32, ".diskIntensive");
  v41[47] = -18;
  if ((a1 & 0x2000) == 0)
  {
LABEL_34:
    if ((a1 & 0x4000) == 0) {
      goto LABEL_91;
    }
    goto LABEL_86;
  }
LABEL_81:
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    uint64_t v2 = sub_100A6E25C(0, v2[2] + 1, 1, v2);
  }
  unint64_t v43 = v2[2];
  unint64_t v42 = v2[3];
  if (v43 >= v42 >> 1) {
    uint64_t v2 = sub_100A6E25C((void *)(v42 > 1), v43 + 1, 1, v2);
  }
  v2[2] = v43 + 1;
  uint64_t v44 = &v2[2 * v43];
  v44[4] = 0xD000000000000019;
  v44[5] = 0x800000010140E650;
  if ((a1 & 0x4000) != 0)
  {
LABEL_86:
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
      uint64_t v2 = sub_100A6E25C(0, v2[2] + 1, 1, v2);
    }
    unint64_t v46 = v2[2];
    unint64_t v45 = v2[3];
    if (v46 >= v45 >> 1) {
      uint64_t v2 = sub_100A6E25C((void *)(v45 > 1), v46 + 1, 1, v2);
    }
    v2[2] = v46 + 1;
    unint64_t v47 = &v2[2 * v46];
    v47[4] = 0xD000000000000012;
    v47[5] = 0x800000010140E630;
  }
LABEL_91:
  sub_10000588C(&qword_101654A30);
  sub_100062734((unint64_t *)&qword_10163A100, &qword_101654A30);
  uint64_t v48 = BidirectionalCollection<>.joined(separator:)();
  uint64_t v50 = v49;
  swift_bridgeObjectRelease();
  v51._countAndFlagsBits = v48;
  v51._object = v50;
  String.append(_:)(v51);
  swift_bridgeObjectRelease();
  v52._countAndFlagsBits = 93;
  v52._object = (void *)0xE100000000000000;
  String.append(_:)(v52);
  return 91;
}

uint64_t sub_1009D9264()
{
  return RawRepresentable<>.init(from:)();
}

uint64_t sub_1009D92C4()
{
  return RawRepresentable<>.encode(to:)();
}

uint64_t sub_1009D9314(void *a1)
{
  unint64_t v3 = v1;
  uint64_t v5 = sub_10000588C(&qword_1016549B8);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v8 = &v10[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0)];
  sub_10001CD44(a1, a1[3]);
  sub_1009DA9AC();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  char v17 = *v3;
  char v16 = 0;
  sub_1009DAAA8();
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  if (!v2)
  {
    char v15 = 1;
    KeyedEncodingContainer.encode(_:forKey:)();
    char v14 = 2;
    KeyedEncodingContainer.encode(_:forKey:)();
    char v13 = 3;
    KeyedEncodingContainer.encode(_:forKey:)();
    char v12 = 4;
    KeyedEncodingContainer.encode(_:forKey:)();
    uint64_t v11 = *((void *)v3 + 4);
    v10[15] = 5;
    sub_1009DAAFC();
    KeyedEncodingContainer.encode<A>(_:forKey:)();
  }
  return (*(uint64_t (**)(unsigned char *, uint64_t))(v6 + 8))(v8, v5);
}

uint64_t sub_1009D9544()
{
  return sub_1009D89B0(*v0);
}

uint64_t sub_1009D954C()
{
  uint64_t result = 0x797469726F697270;
  switch(*v0)
  {
    case 1:
      uint64_t result = 0x6E69746165706572;
      break;
    case 2:
      uint64_t result = 0x79616C6564;
      break;
    case 3:
      uint64_t result = 0x7265506563617267;
      break;
    case 4:
      uint64_t result = 0x6C61767265746E69;
      break;
    case 5:
      uint64_t result = 0x736E6F6974706FLL;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t sub_1009D9618@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_1009DA478(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_1009D9640(uint64_t a1)
{
  unint64_t v2 = sub_1009DA9AC();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1009D967C(uint64_t a1)
{
  unint64_t v2 = sub_1009DA9AC();

  return CodingKey.debugDescription.getter(a1, v2);
}

double sub_1009D96B8@<D0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  sub_1009DA718(a1, (uint64_t)v6);
  if (!v2)
  {
    double result = *(double *)v6;
    long long v5 = v6[1];
    *(_OWORD *)a2 = v6[0];
    *(_OWORD *)(a2 + 16) = v5;
    *(void *)(a2 + 32) = v7;
  }
  return result;
}

uint64_t sub_1009D9700(void *a1)
{
  return sub_1009D9314(a1);
}

BOOL sub_1009D9718(uint64_t a1, uint64_t a2)
{
  long long v2 = *(_OWORD *)(a1 + 16);
  v5[0] = *(_OWORD *)a1;
  v5[1] = v2;
  uint64_t v6 = *(void *)(a1 + 32);
  long long v3 = *(_OWORD *)(a2 + 16);
  v7[0] = *(_OWORD *)a2;
  v7[1] = v3;
  uint64_t v8 = *(void *)(a2 + 32);
  return sub_1009D9A10((uint64_t)v5, (uint64_t)v7);
}

uint64_t sub_1009D9764()
{
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  swift_release();
  sub_1004270C8(v0 + 80);
  sub_1000A1534(*(void *)(v0 + 96));

  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for XPCActivity()
{
  return self;
}

{
  return type metadata accessor for XPCActivity();
}

unsigned char *storeEnumTagSinglePayload for XPCActivity.State(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 6 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 6) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFA) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xF9)
  {
    unsigned int v6 = ((a2 - 250) >> 8) + 1;
    *double result = a2 + 6;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1009D98BCLL);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *double result = a2 + 6;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for XPCActivity.State()
{
  return &type metadata for XPCActivity.State;
}

uint64_t getEnumTagSinglePayload for XPCActivity.Criteria(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0xFF && a1[40]) {
    return (*(_DWORD *)a1 + 255);
  }
  unsigned int v3 = *a1;
  BOOL v4 = v3 >= 2;
  int v5 = v3 - 2;
  if (!v4) {
    int v5 = -1;
  }
  return (v5 + 1);
}

uint64_t storeEnumTagSinglePayload for XPCActivity.Criteria(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFE)
  {
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(void *)double result = a2 - 255;
    if (a3 >= 0xFF) {
      *(unsigned char *)(result + 40) = 1;
    }
  }
  else
  {
    if (a3 >= 0xFF) {
      *(unsigned char *)(result + 40) = 0;
    }
    if (a2) {
      *(unsigned char *)double result = a2 + 1;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for XPCActivity.Criteria()
{
  return &type metadata for XPCActivity.Criteria;
}

unint64_t sub_1009D9998()
{
  unint64_t result = qword_101654970;
  if (!qword_101654970)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_101654970);
  }
  return result;
}

uint64_t sub_1009D99EC()
{
  return sub_1009D6E58();
}

BOOL sub_1009D9A10(uint64_t a1, uint64_t a2)
{
  BOOL v4 = *(unsigned char *)a1 == 0;
  if (*(unsigned char *)a1) {
    uint64_t v5 = 0x616E65746E69616DLL;
  }
  else {
    uint64_t v5 = 0x7974696C697475;
  }
  if (v4) {
    unint64_t v6 = 0xE700000000000000;
  }
  else {
    unint64_t v6 = 0xEB0000000065636ELL;
  }
  if (*(unsigned char *)a2) {
    uint64_t v7 = 0x616E65746E69616DLL;
  }
  else {
    uint64_t v7 = 0x7974696C697475;
  }
  if (*(unsigned char *)a2) {
    unint64_t v8 = 0xEB0000000065636ELL;
  }
  else {
    unint64_t v8 = 0xE700000000000000;
  }
  if (v5 == v7 && v6 == v8)
  {
    swift_bridgeObjectRelease_n();
  }
  else
  {
    char v10 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    BOOL result = 0;
    if ((v10 & 1) == 0) {
      return result;
    }
  }
  return ((*(unsigned __int8 *)(a1 + 1) ^ *(unsigned __int8 *)(a2 + 1)) & 1) == 0
      && *(void *)(a1 + 8) == *(void *)(a2 + 8)
      && *(void *)(a1 + 16) == *(void *)(a2 + 16)
      && *(void *)(a1 + 24) == *(void *)(a2 + 24)
      && *(void *)(a1 + 32) == *(void *)(a2 + 32);
}

uint64_t sub_1009D9B34(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v8 = v7;
  uint64_t v38 = a6;
  uint64_t v39 = a7;
  uint64_t v36 = a4;
  uint64_t v37 = a5;
  uint64_t v33 = a3;
  uint64_t v29 = a1;
  unint64_t v30 = a2;
  uint64_t v35 = type metadata accessor for OS_dispatch_queue.Attributes();
  __chkstk_darwin(v35);
  unint64_t v34 = (char *)&v28 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = type metadata accessor for OS_dispatch_queue.AutoreleaseFrequency();
  uint64_t v13 = *(void *)(v12 - 8);
  __chkstk_darwin(v12);
  char v15 = (char *)&v28 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = type metadata accessor for DispatchQoS();
  uint64_t v32 = v16;
  uint64_t v17 = *(void *)(v16 - 8);
  __chkstk_darwin(v16);
  unint64_t v19 = (char *)&v28 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10000588C((uint64_t *)&unk_101638CE0);
  uint64_t v20 = swift_allocObject();
  *(_DWORD *)(v20 + 16) = 0;
  *(void *)(v7 + 40) = v20;
  swift_unknownObjectWeakInit();
  *(unsigned char *)(v7 + 88) = 0;
  uint64_t v31 = sub_10001D4B0(0, (unint64_t *)&qword_1016376E0);
  *(void *)(v7 + 96) = 0;
  *(void *)(v7 + 104) = 0;
  strcpy((char *)v40, "XPCActivity-");
  BYTE5(v40[1]) = 0;
  HIWORD(v40[1]) = -5120;
  v21._countAndFlagsBits = a1;
  v21._object = a2;
  String.append(_:)(v21);
  uint64_t v28 = v40[0];
  uint64_t v22 = v33;
  (*(void (**)(char *, uint64_t, uint64_t))(v17 + 16))(v19, v33, v16);
  (*(void (**)(char *, void, uint64_t))(v13 + 104))(v15, enum case for OS_dispatch_queue.AutoreleaseFrequency.workItem(_:), v12);
  v40[0] = _swiftEmptyArrayStorage;
  sub_1009DAC54((unint64_t *)&qword_101638CC0, 255, (void (*)(uint64_t))&type metadata accessor for OS_dispatch_queue.Attributes);
  sub_10000588C((uint64_t *)&unk_1016376F0);
  sub_100062734((unint64_t *)&qword_101638CD0, (uint64_t *)&unk_1016376F0);
  dispatch thunk of SetAlgebra.init<A>(_:)();
  uint64_t v23 = OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)();
  uint64_t v24 = v29;
  *(void *)(v7 + 16) = v23;
  *(void *)(v7 + 24) = v24;
  *(void *)(v7 + 32) = v30;
  uint64_t v25 = v37;
  *(void *)(v7 + 48) = v36;
  *(void *)(v7 + 56) = v25;
  uint64_t v26 = v39;
  *(void *)(v8 + 64) = v38;
  *(void *)(v8 + 72) = v26;
  swift_retain();
  swift_retain();
  sub_1009D7530();
  (*(void (**)(uint64_t, uint64_t))(v17 + 8))(v22, v32);
  return v8;
}

uint64_t sub_1009D9EB8@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = swift_unknownObjectWeakLoadStrong();
  *a1 = result;
  return result;
}

unint64_t sub_1009D9EEC()
{
  unint64_t result = qword_101654990;
  if (!qword_101654990)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_101654990);
  }
  return result;
}

uint64_t sub_1009D9F40(uint64_t result)
{
  if (!XPC_ACTIVITY_POWER_NAP)
  {
    __break(1u);
    goto LABEL_50;
  }
  uint64_t v1 = (void *)result;
  unint64_t result = xpc_dictionary_get_BOOL((xpc_object_t)result, XPC_ACTIVITY_POWER_NAP);
  if (!XPC_ACTIVITY_REQUIRE_SIGNIFICANT_USER_INACTIVITY)
  {
LABEL_50:
    __break(1u);
    goto LABEL_51;
  }
  unsigned int v2 = result;
  unint64_t result = xpc_dictionary_get_BOOL(v1, XPC_ACTIVITY_REQUIRE_SIGNIFICANT_USER_INACTIVITY);
  if (!XPC_ACTIVITY_SHOULD_WAKE_DEVICE)
  {
LABEL_51:
    __break(1u);
    goto LABEL_52;
  }
  int v3 = result;
  unint64_t result = xpc_dictionary_get_BOOL(v1, XPC_ACTIVITY_SHOULD_WAKE_DEVICE);
  if (!XPC_ACTIVITY_USES_DUET_POWER_BUDGETING)
  {
LABEL_52:
    __break(1u);
    goto LABEL_53;
  }
  int v4 = result;
  unint64_t result = xpc_dictionary_get_BOOL(v1, XPC_ACTIVITY_USES_DUET_POWER_BUDGETING);
  if (!XPC_ACTIVITY_REQUIRES_CLASS_A)
  {
LABEL_53:
    __break(1u);
    goto LABEL_54;
  }
  int v5 = result;
  unint64_t result = xpc_dictionary_get_BOOL(v1, XPC_ACTIVITY_REQUIRES_CLASS_A);
  if (!XPC_ACTIVITY_REQUIRES_CLASS_B)
  {
LABEL_54:
    __break(1u);
    goto LABEL_55;
  }
  int v6 = result;
  unint64_t result = xpc_dictionary_get_BOOL(v1, XPC_ACTIVITY_REQUIRES_CLASS_B);
  if (!XPC_ACTIVITY_REQUIRES_CLASS_C)
  {
LABEL_55:
    __break(1u);
    goto LABEL_56;
  }
  int v7 = result;
  unint64_t result = xpc_dictionary_get_BOOL(v1, XPC_ACTIVITY_REQUIRES_CLASS_C);
  if (!XPC_ACTIVITY_REQUIRE_NETWORK_CONNECTIVITY)
  {
LABEL_56:
    __break(1u);
    goto LABEL_57;
  }
  int v8 = result;
  unint64_t result = xpc_dictionary_get_BOOL(v1, XPC_ACTIVITY_REQUIRE_NETWORK_CONNECTIVITY);
  if (!XPC_ACTIVITY_REQUIRE_INEXPENSIVE_NETWORK_CONNECTIVITY)
  {
LABEL_57:
    __break(1u);
LABEL_58:
    __break(1u);
LABEL_59:
    __break(1u);
    goto LABEL_60;
  }
  uint64_t v9 = v2;
  if (v3) {
    uint64_t v9 = v2 | 4;
  }
  if (v4) {
    v9 |= 2uLL;
  }
  if (v5) {
    v9 |= 8uLL;
  }
  if (v6) {
    v9 |= 0x10uLL;
  }
  if (v7) {
    v9 |= 0x20uLL;
  }
  if (v8) {
    v9 |= 0x40uLL;
  }
  if (result) {
    uint64_t v10 = v9 | 0x80;
  }
  else {
    uint64_t v10 = v9;
  }
  unint64_t result = xpc_dictionary_get_BOOL(v1, XPC_ACTIVITY_REQUIRE_INEXPENSIVE_NETWORK_CONNECTIVITY);
  if (result) {
    uint64_t v11 = v10 | 0x100;
  }
  else {
    uint64_t v11 = v10;
  }
  if (!XPC_ACTIVITY_DUET_ACTIVITY_SCHEDULER_DATA) {
    goto LABEL_58;
  }
  xpc_object_t v12 = xpc_dictionary_get_dictionary(v1, XPC_ACTIVITY_DUET_ACTIVITY_SCHEDULER_DATA);
  if (v12)
  {
    string = xpc_dictionary_get_string(v12, "DataBudgetName");
    swift_unknownObjectRelease();
    if (string) {
      v11 |= 0x2000uLL;
    }
  }
  unint64_t result = xpc_dictionary_get_BOOL(v1, XPC_ACTIVITY_ALLOW_BATTERY);
  if (!XPC_ACTIVITY_MEMORY_INTENSIVE) {
    goto LABEL_59;
  }
  unsigned __int8 v14 = result;
  unint64_t result = xpc_dictionary_get_BOOL(v1, XPC_ACTIVITY_MEMORY_INTENSIVE);
  if (!XPC_ACTIVITY_CPU_INTENSIVE)
  {
LABEL_60:
    __break(1u);
    goto LABEL_61;
  }
  unsigned __int8 v15 = result;
  unint64_t result = xpc_dictionary_get_BOOL(v1, XPC_ACTIVITY_CPU_INTENSIVE);
  if (!XPC_ACTIVITY_DISK_INTENSIVE)
  {
LABEL_61:
    __break(1u);
    goto LABEL_62;
  }
  unsigned __int8 v16 = result;
  unint64_t result = xpc_dictionary_get_BOOL(v1, XPC_ACTIVITY_DISK_INTENSIVE);
  if (!XPC_ACTIVITY_COMMUNICATES_WITH_PAIRED_DEVICE)
  {
LABEL_62:
    __break(1u);
    return result;
  }
  if ((v14 & ((v11 & 0x200) == 0)) != 0) {
    uint64_t v17 = v11 | 0x200;
  }
  else {
    uint64_t v17 = v11;
  }
  if ((v15 & ((v17 & 0x400) == 0)) != 0) {
    v17 |= 0x400uLL;
  }
  if ((v16 & ((v17 & 0x800) == 0)) != 0) {
    v17 |= 0x800uLL;
  }
  if ((result & ((v17 & 0x1000) == 0)) != 0) {
    uint64_t v18 = v17 | 0x1000;
  }
  else {
    uint64_t v18 = v17;
  }
  BOOL v19 = xpc_dictionary_get_BOOL(v1, XPC_ACTIVITY_COMMUNICATES_WITH_PAIRED_DEVICE);
  swift_unknownObjectRelease();
  if (v19) {
    return v18 | 0x4000;
  }
  else {
    return v18;
  }
}

uint64_t sub_1009DA238@<X0>(void *a1@<X0>, uint64_t *a2@<X8>)
{
  if (xpc_dictionary_get_string(a1, XPC_ACTIVITY_PRIORITY))
  {
    uint64_t v4 = String.init(cString:)();
    uint64_t v6 = v5;
    if (qword_101636EC8 != -1) {
      swift_once();
    }
    if (v4 == qword_1016547D0 && v6 == *(void *)algn_1016547D8)
    {
      swift_bridgeObjectRelease();
      uint64_t v9 = 0;
    }
    else
    {
      int v8 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      uint64_t v9 = ~v8 & 1;
    }
    BOOL v15 = xpc_dictionary_get_BOOL(a1, XPC_ACTIVITY_REPEATING);
    int64_t int64 = xpc_dictionary_get_int64(a1, XPC_ACTIVITY_DELAY);
    int64_t v11 = xpc_dictionary_get_int64(a1, XPC_ACTIVITY_GRACE_PERIOD);
    int64_t v12 = xpc_dictionary_get_int64(a1, XPC_ACTIVITY_INTERVAL);
    uint64_t result = sub_1009D9F40((uint64_t)a1);
    uint64_t v16 = 256;
    if (!v15) {
      uint64_t v16 = 0;
    }
    uint64_t v14 = v16 | v9;
  }
  else
  {
    swift_unknownObjectRelease();
    int64_t int64 = 0;
    int64_t v11 = 0;
    int64_t v12 = 0;
    uint64_t result = 0;
    uint64_t v14 = 2;
  }
  *a2 = v14;
  a2[1] = int64;
  a2[2] = v11;
  a2[3] = v12;
  a2[4] = result;
  return result;
}

unint64_t sub_1009DA3B4(unint64_t result)
{
  if (result >= 6)
  {
    _StringGuts.grow(_:)(38);
    swift_bridgeObjectRelease();
    v1._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v1);
    swift_bridgeObjectRelease();
    uint64_t result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  return result;
}

uint64_t sub_1009DA478(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 0x797469726F697270 && a2 == 0xE800000000000000;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x6E69746165706572 && a2 == 0xE900000000000067 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0x79616C6564 && a2 == 0xE500000000000000 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else if (a1 == 0x7265506563617267 && a2 == 0xEB00000000646F69 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 3;
  }
  else if (a1 == 0x6C61767265746E69 && a2 == 0xE800000000000000 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 4;
  }
  else if (a1 == 0x736E6F6974706FLL && a2 == 0xE700000000000000)
  {
    swift_bridgeObjectRelease();
    return 5;
  }
  else
  {
    char v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v6) {
      return 5;
    }
    else {
      return 6;
    }
  }
}

uint64_t sub_1009DA718@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v5 = sub_10000588C(&qword_101654998);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  int v8 = (char *)&v14 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10001CD44(a1, a1[3]);
  sub_1009DA9AC();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v2) {
    return _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)a1);
  }
  char v23 = 0;
  sub_1009DAA00();
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  char v9 = v24;
  char v22 = 1;
  char v10 = KeyedDecodingContainer.decode(_:forKey:)();
  char v21 = 2;
  uint64_t v16 = KeyedDecodingContainer.decode(_:forKey:)();
  char v20 = 3;
  uint64_t v15 = KeyedDecodingContainer.decode(_:forKey:)();
  char v19 = 4;
  uint64_t v14 = KeyedDecodingContainer.decode(_:forKey:)();
  char v18 = 5;
  sub_1009DAA54();
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  uint64_t v11 = v17;
  uint64_t result = _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)a1);
  *(unsigned char *)a2 = v9;
  *(unsigned char *)(a2 + 1) = v10 & 1;
  uint64_t v13 = v15;
  *(void *)(a2 + 8) = v16;
  *(void *)(a2 + 16) = v13;
  *(void *)(a2 + 24) = v14;
  *(void *)(a2 + 32) = v11;
  return result;
}

unint64_t sub_1009DA9AC()
{
  unint64_t result = qword_1016549A0;
  if (!qword_1016549A0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1016549A0);
  }
  return result;
}

unint64_t sub_1009DAA00()
{
  unint64_t result = qword_1016549A8;
  if (!qword_1016549A8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1016549A8);
  }
  return result;
}

unint64_t sub_1009DAA54()
{
  unint64_t result = qword_1016549B0;
  if (!qword_1016549B0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1016549B0);
  }
  return result;
}

unint64_t sub_1009DAAA8()
{
  unint64_t result = qword_1016549C0;
  if (!qword_1016549C0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1016549C0);
  }
  return result;
}

unint64_t sub_1009DAAFC()
{
  unint64_t result = qword_1016549C8;
  if (!qword_1016549C8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1016549C8);
  }
  return result;
}

uint64_t sub_1009DAB50()
{
  return _swift_deallocObject(v0, 32, 7);
}

uint64_t sub_1009DAB60(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_1009DAB70()
{
  return swift_release();
}

uint64_t sub_1009DAB78()
{
  return _swift_deallocObject(v0, 32, 7);
}

uint64_t sub_1009DAB88()
{
  return sub_1009D76F8(v0);
}

uint64_t sub_1009DAB90()
{
  return _swift_deallocObject(v0, 32, 7);
}

uint64_t sub_1009DABA0()
{
  swift_weakDestroy();

  return _swift_deallocObject(v0, 24, 7);
}

uint64_t sub_1009DABD8()
{
  return sub_1009D7834();
}

uint64_t sub_1009DABE0(uint64_t a1)
{
  return sub_1009D7908(a1, *(xpc_activity_t *)(v1 + 16), *(void *)(v1 + 24));
}

unint64_t sub_1009DABFC@<X0>(unsigned char *a1@<X8>)
{
  uint64_t v4 = *(void *)(v1 + 16);
  int v3 = *(_xpc_activity_s **)(v1 + 24);
  swift_unknownObjectWeakAssign();
  *(unsigned char *)(v4 + 88) = 1;
  unint64_t result = sub_1009D7B24(v3);
  *a1 = result;
  return result;
}

uint64_t sub_1009DAC54(unint64_t *a1, uint64_t a2, void (*a3)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a3(a2);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

unsigned char *storeEnumTagSinglePayload for XPCActivity.Criteria.CodingKeys(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 5 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 5) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFB) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFA)
  {
    unsigned int v6 = ((a2 - 251) >> 8) + 1;
    *uint64_t result = a2 + 5;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1009DAD68);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 5;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for XPCActivity.Criteria.CodingKeys()
{
  return &type metadata for XPCActivity.Criteria.CodingKeys;
}

ValueMetadata *type metadata accessor for XPCActivity.Criteria.Options()
{
  return &type metadata for XPCActivity.Criteria.Options;
}

unsigned char *storeEnumTagSinglePayload for XPCActivity.Priority(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFE)
  {
    unsigned int v6 = ((a2 - 255) >> 8) + 1;
    *uint64_t result = a2 + 1;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1009DAE7CLL);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 1;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for XPCActivity.Priority()
{
  return &type metadata for XPCActivity.Priority;
}

unint64_t sub_1009DAEB8()
{
  unint64_t result = qword_1016549E8;
  if (!qword_1016549E8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1016549E8);
  }
  return result;
}

unint64_t sub_1009DAF10()
{
  unint64_t result = qword_1016549F0;
  if (!qword_1016549F0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1016549F0);
  }
  return result;
}

unint64_t sub_1009DAF68()
{
  unint64_t result = qword_1016549F8;
  if (!qword_1016549F8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1016549F8);
  }
  return result;
}

unint64_t sub_1009DAFC0()
{
  unint64_t result = qword_101654A00;
  if (!qword_101654A00)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_101654A00);
  }
  return result;
}

unint64_t sub_1009DB018()
{
  unint64_t result = qword_101654A08;
  if (!qword_101654A08)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_101654A08);
  }
  return result;
}

unint64_t sub_1009DB070()
{
  unint64_t result = qword_101654A10;
  if (!qword_101654A10)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_101654A10);
  }
  return result;
}

unint64_t sub_1009DB0C8()
{
  unint64_t result = qword_101654A18;
  if (!qword_101654A18)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_101654A18);
  }
  return result;
}

unint64_t sub_1009DB120()
{
  unint64_t result = qword_101654A20;
  if (!qword_101654A20)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_101654A20);
  }
  return result;
}

unint64_t sub_1009DB174()
{
  unint64_t result = qword_101654A28;
  if (!qword_101654A28)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_101654A28);
  }
  return result;
}

uint64_t sub_1009DB1C8@<X0>(uint64_t *a1@<X8>)
{
  return sub_1009D9EB8(a1);
}

void *sub_1009DB1F8(_OWORD *a1, void *a2, uint64_t a3)
{
  unsigned int v4 = a1;
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v13 = *a2;
    *unsigned int v4 = *a2;
    unsigned int v4 = (void *)(v13 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    *a1 = *(_OWORD *)a2;
    uint64_t v7 = *(int *)(a3 + 20);
    int v8 = (char *)a1 + v7;
    char v9 = (char *)a2 + v7;
    uint64_t v10 = type metadata accessor for KeyDropInterface.KeyAlignment(0);
    uint64_t v11 = *(void *)(v10 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v11 + 48))(v9, 1, v10))
    {
      uint64_t v12 = sub_10000588C(&qword_101654A38);
      memcpy(v8, v9, *(void *)(*(void *)(v12 - 8) + 64));
    }
    else
    {
      uint64_t v14 = type metadata accessor for Date();
      uint64_t v15 = *(void (**)(char *, char *, uint64_t))(*(void *)(v14 - 8) + 16);
      v15(v8, v9, v14);
      *(void *)&v8[*(int *)(v10 + 20)] = *(void *)&v9[*(int *)(v10 + 20)];
      v15(&v8[*(int *)(v10 + 24)], &v9[*(int *)(v10 + 24)], v14);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v11 + 56))(v8, 0, 1, v10);
    }
    *((unsigned char *)v4 + *(int *)(a3 + 24)) = *((unsigned char *)a2 + *(int *)(a3 + 24));
  }
  return v4;
}

uint64_t sub_1009DB3C8(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = a1 + *(int *)(a2 + 20);
  uint64_t v3 = type metadata accessor for KeyDropInterface.KeyAlignment(0);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v3 - 8) + 48))(v2, 1, v3);
  if (!result)
  {
    uint64_t v5 = type metadata accessor for Date();
    uint64_t v7 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8);
    ((void (*)(void *__return_ptr, uint64_t, uint64_t))v7)((void *)(v5 - 8), v2, v5);
    uint64_t v6 = v2 + *(int *)(v3 + 24);
    return v7(v6, v5);
  }
  return result;
}

_OWORD *sub_1009DB4C0(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  *a1 = *a2;
  uint64_t v6 = *(int *)(a3 + 20);
  uint64_t v7 = (char *)a1 + v6;
  int v8 = (char *)a2 + v6;
  uint64_t v9 = type metadata accessor for KeyDropInterface.KeyAlignment(0);
  uint64_t v10 = *(void *)(v9 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48))(v8, 1, v9))
  {
    uint64_t v11 = sub_10000588C(&qword_101654A38);
    memcpy(v7, v8, *(void *)(*(void *)(v11 - 8) + 64));
  }
  else
  {
    uint64_t v12 = type metadata accessor for Date();
    uint64_t v13 = *(void (**)(char *, char *, uint64_t))(*(void *)(v12 - 8) + 16);
    v13(v7, v8, v12);
    *(void *)&v7[*(int *)(v9 + 20)] = *(void *)&v8[*(int *)(v9 + 20)];
    v13(&v7[*(int *)(v9 + 24)], &v8[*(int *)(v9 + 24)], v12);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v10 + 56))(v7, 0, 1, v9);
  }
  *((unsigned char *)a1 + *(int *)(a3 + 24)) = *((unsigned char *)a2 + *(int *)(a3 + 24));
  return a1;
}

void *sub_1009DB640(void *a1, void *a2, uint64_t a3)
{
  *a1 = *a2;
  a1[1] = a2[1];
  uint64_t v6 = *(int *)(a3 + 20);
  uint64_t v7 = (char *)a1 + v6;
  int v8 = (char *)a2 + v6;
  uint64_t v9 = type metadata accessor for KeyDropInterface.KeyAlignment(0);
  uint64_t v10 = *(void *)(v9 - 8);
  uint64_t v11 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v10 + 48);
  int v12 = v11(v7, 1, v9);
  int v13 = v11(v8, 1, v9);
  if (!v12)
  {
    if (!v13)
    {
      uint64_t v18 = type metadata accessor for Date();
      char v19 = *(void (**)(char *, char *, uint64_t))(*(void *)(v18 - 8) + 24);
      v19(v7, v8, v18);
      *(void *)&v7[*(int *)(v9 + 20)] = *(void *)&v8[*(int *)(v9 + 20)];
      v19(&v7[*(int *)(v9 + 24)], &v8[*(int *)(v9 + 24)], v18);
      goto LABEL_7;
    }
    sub_1009DB860((uint64_t)v7);
    goto LABEL_6;
  }
  if (v13)
  {
LABEL_6:
    uint64_t v16 = sub_10000588C(&qword_101654A38);
    memcpy(v7, v8, *(void *)(*(void *)(v16 - 8) + 64));
    goto LABEL_7;
  }
  uint64_t v14 = type metadata accessor for Date();
  uint64_t v15 = *(void (**)(char *, char *, uint64_t))(*(void *)(v14 - 8) + 16);
  v15(v7, v8, v14);
  *(void *)&v7[*(int *)(v9 + 20)] = *(void *)&v8[*(int *)(v9 + 20)];
  v15(&v7[*(int *)(v9 + 24)], &v8[*(int *)(v9 + 24)], v14);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v10 + 56))(v7, 0, 1, v9);
LABEL_7:
  *((unsigned char *)a1 + *(int *)(a3 + 24)) = *((unsigned char *)a2 + *(int *)(a3 + 24));
  return a1;
}

uint64_t sub_1009DB860(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for KeyDropInterface.KeyAlignment(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

_OWORD *sub_1009DB8BC(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  *a1 = *a2;
  uint64_t v6 = *(int *)(a3 + 20);
  uint64_t v7 = (char *)a1 + v6;
  int v8 = (char *)a2 + v6;
  uint64_t v9 = type metadata accessor for KeyDropInterface.KeyAlignment(0);
  uint64_t v10 = *(void *)(v9 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48))(v8, 1, v9))
  {
    uint64_t v11 = sub_10000588C(&qword_101654A38);
    memcpy(v7, v8, *(void *)(*(void *)(v11 - 8) + 64));
  }
  else
  {
    uint64_t v12 = type metadata accessor for Date();
    int v13 = *(void (**)(char *, char *, uint64_t))(*(void *)(v12 - 8) + 32);
    v13(v7, v8, v12);
    *(void *)&v7[*(int *)(v9 + 20)] = *(void *)&v8[*(int *)(v9 + 20)];
    v13(&v7[*(int *)(v9 + 24)], &v8[*(int *)(v9 + 24)], v12);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v10 + 56))(v7, 0, 1, v9);
  }
  *((unsigned char *)a1 + *(int *)(a3 + 24)) = *((unsigned char *)a2 + *(int *)(a3 + 24));
  return a1;
}

_OWORD *sub_1009DBA3C(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  *a1 = *a2;
  uint64_t v6 = *(int *)(a3 + 20);
  uint64_t v7 = (char *)a1 + v6;
  int v8 = (char *)a2 + v6;
  uint64_t v9 = type metadata accessor for KeyDropInterface.KeyAlignment(0);
  uint64_t v10 = *(void *)(v9 - 8);
  uint64_t v11 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v10 + 48);
  int v12 = v11(v7, 1, v9);
  int v13 = v11(v8, 1, v9);
  if (!v12)
  {
    if (!v13)
    {
      uint64_t v18 = type metadata accessor for Date();
      char v19 = *(void (**)(char *, char *, uint64_t))(*(void *)(v18 - 8) + 40);
      v19(v7, v8, v18);
      *(void *)&v7[*(int *)(v9 + 20)] = *(void *)&v8[*(int *)(v9 + 20)];
      v19(&v7[*(int *)(v9 + 24)], &v8[*(int *)(v9 + 24)], v18);
      goto LABEL_7;
    }
    sub_1009DB860((uint64_t)v7);
    goto LABEL_6;
  }
  if (v13)
  {
LABEL_6:
    uint64_t v16 = sub_10000588C(&qword_101654A38);
    memcpy(v7, v8, *(void *)(*(void *)(v16 - 8) + 64));
    goto LABEL_7;
  }
  uint64_t v14 = type metadata accessor for Date();
  uint64_t v15 = *(void (**)(char *, char *, uint64_t))(*(void *)(v14 - 8) + 32);
  v15(v7, v8, v14);
  *(void *)&v7[*(int *)(v9 + 20)] = *(void *)&v8[*(int *)(v9 + 20)];
  v15(&v7[*(int *)(v9 + 24)], &v8[*(int *)(v9 + 24)], v14);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v10 + 56))(v7, 0, 1, v9);
LABEL_7:
  *((unsigned char *)a1 + *(int *)(a3 + 24)) = *((unsigned char *)a2 + *(int *)(a3 + 24));
  return a1;
}

uint64_t sub_1009DBC54(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1009DBC68);
}

uint64_t sub_1009DBC68(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = sub_10000588C(&qword_101654A38);
  uint64_t v7 = *(void *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == a2)
  {
    uint64_t v8 = v6;
    uint64_t v9 = a1 + *(int *)(a3 + 20);
    uint64_t v10 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    return v10(v9, a2, v8);
  }
  else
  {
    unsigned int v12 = *(unsigned __int8 *)(a1 + *(int *)(a3 + 24));
    if (v12 >= 0x11) {
      return v12 - 16;
    }
    else {
      return 0;
    }
  }
}

uint64_t sub_1009DBD2C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1009DBD40);
}

uint64_t sub_1009DBD40(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result = sub_10000588C(&qword_101654A38);
  uint64_t v9 = *(void *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    uint64_t v10 = result;
    uint64_t v11 = a1 + *(int *)(a4 + 20);
    unsigned int v12 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    return v12(v11, a2, a2, v10);
  }
  else
  {
    *(unsigned char *)(a1 + *(int *)(a4 + 24)) = a2 + 16;
  }
  return result;
}

uint64_t type metadata accessor for BookmarkMetaData()
{
  uint64_t result = qword_101654A98;
  if (!qword_101654A98) {
    return swift_getSingletonMetadata();
  }
  return result;
}

void sub_1009DBE50()
{
  sub_1009DBEF0();
  if (v0 <= 0x3F) {
    swift_initStructMetadata();
  }
}

void sub_1009DBEF0()
{
  if (!qword_101654AA8)
  {
    type metadata accessor for KeyDropInterface.KeyAlignment(255);
    unint64_t v0 = type metadata accessor for Optional();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_101654AA8);
    }
  }
}

uint64_t sub_1009DBF48@<X0>(uint64_t result@<X0>, void *a2@<X1>, uint64_t *a3@<X2>, uint64_t *a4@<X8>)
{
  if (*a2 == -1)
  {
    __break(1u);
  }
  else
  {
    uint64_t v6 = (uint64_t *)result;
    ++*a2;
    long long v24 = *(_OWORD *)(result + 32);
    uint64_t v7 = *a3;
    unint64_t v8 = a3[1];
    *(_OWORD *)a3 = v24;
    sub_100061E54((uint64_t)&v24);
    sub_10001CFB8(v7, v8);
    uint64_t v9 = String.utf8Data.getter();
    unint64_t v11 = v10;
    long long v12 = v24;
    sub_100061E54((uint64_t)&v24);
    uint64_t v13 = sub_100A941DC(v12, *((unint64_t *)&v12 + 1), v9, v11, 32);
    if (v4)
    {
      sub_10001CFB8(v9, v11);
      return sub_1000CE9DC((uint64_t)&v24);
    }
    else
    {
      uint64_t v15 = v13;
      unint64_t v16 = v14;
      sub_1000CE9DC((uint64_t)&v24);
      sub_100434DF4(v15, v16, v23);
      sub_10001CFB8(v9, v11);
      uint64_t v17 = v23[0];
      uint64_t v18 = v23[1];
      uint64_t v19 = v6[2];
      unint64_t v20 = v6[3];
      uint64_t v22 = *v6;
      unint64_t v21 = v6[1];
      sub_1000361E0(v19, v20);
      uint64_t result = sub_100037A38(v22, v21);
      *a4 = v17;
      a4[1] = v18;
      a4[2] = v19;
      a4[3] = v20;
      a4[4] = v22;
      a4[5] = v21;
    }
  }
  return result;
}

uint64_t sub_1009DC0A4@<X0>(uint64_t (*a1)(void)@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = a1();
  *a2 = result;
  return result;
}

uint64_t sub_1009DC0D4@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X2>, unint64_t a4@<X3>, uint64_t a5@<X4>, unint64_t a6@<X5>, unint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t *a9@<X8>, unint64_t a10, unint64_t a11)
{
  unint64_t v17 = a11;
  if (!a11)
  {
    sub_1009DC738();
    swift_allocError();
    swift_willThrow();
    sub_1003DCEB0(a7, a8, a10);
    sub_10001CFB8(a5, a6);
    sub_10001CFB8(a3, a4);
    return sub_100037A24(a1, a2);
  }
  if (a10 >> 60 == 15)
  {
    sub_1000361E0(a5, a6);
    sub_1000361E0(a5, a6);
    sub_100037A38(a1, a2);
    sub_1000361E0(a3, a4);
    uint64_t v20 = a5;
    unint64_t v21 = a6;
    uint64_t v22 = a7;
  }
  else
  {
    uint64_t v22 = a7;
    unint64_t v17 = a11 - a7;
    if (a11 >= a7)
    {
      sub_1003DCE94(a7, a8, a10);
      sub_1000361E0(a5, a6);
      sub_100037A38(a1, a2);
      uint64_t v22 = a7;
      sub_1000361E0(a3, a4);
      sub_1003DCE94(a7, a8, a10);
      if (qword_101637238 != -1) {
        swift_once();
      }
      uint64_t v31 = type metadata accessor for Logger();
      sub_100010324(v31, (uint64_t)qword_10170EF80);
      sub_1000361E0(a8, a10);
      uint64_t v32 = Logger.logObject.getter();
      os_log_type_t v33 = static os_log_type_t.debug.getter();
      if (os_log_type_enabled(v32, v33))
      {
        uint64_t v34 = swift_slowAlloc();
        *(_DWORD *)uint64_t v34 = 134218240;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        uint64_t result = sub_1003DCEB0(a7, a8, a10);
        *(_WORD *)(v34 + 12) = 2048;
        if (a11 < v17)
        {
          __break(1u);
          return result;
        }
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        _os_log_impl((void *)&_mh_execute_header, v32, v33, "KeyGenerationHint hint.index:%llu saved %llu ratchet iterations", (uint8_t *)v34, 0x16u);
        swift_slowDealloc();

        sub_1003DCEB0(a7, a8, a10);
      }
      else
      {
        sub_1003DCEB0(a7, a8, a10);
        sub_1003DCEB0(a7, a8, a10);
      }
      uint64_t v20 = a8;
      unint64_t v21 = a10;
    }
    else
    {
      sub_1000361E0(a5, a6);
      sub_100037A38(a1, a2);
      sub_1000361E0(a3, a4);
      sub_1003DCE94(v22, a8, a10);
      if (qword_101637238 != -1) {
        swift_once();
      }
      uint64_t v25 = type metadata accessor for Logger();
      sub_100010324(v25, (uint64_t)qword_10170EF80);
      sub_1000361E0(a8, a10);
      uint64_t v26 = Logger.logObject.getter();
      os_log_type_t v27 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v26, v27))
      {
        uint64_t v28 = swift_slowAlloc();
        *(_DWORD *)uint64_t v28 = 134218240;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        sub_1003DCEB0(v22, a8, a10);
        *(_WORD *)(v28 + 12) = 2048;
        unint64_t v29 = a11;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        _os_log_impl((void *)&_mh_execute_header, v26, v27, "Ignoring KeyGenerationHint: hint.index (%llu) > initialRatchetsToSkip(%llu)", (uint8_t *)v28, 0x16u);
        swift_slowDealloc();

        sub_1003DCEB0(v22, a8, a10);
      }
      else
      {
        sub_1003DCEB0(v22, a8, a10);
        sub_1003DCEB0(v22, a8, a10);

        unint64_t v29 = a11;
      }
      unint64_t v17 = v29 - 1;
      uint64_t v20 = a5;
      sub_1000361E0(a5, a6);
      unint64_t v21 = a6;
    }
  }
  sub_1000361E0(v20, v21);
  uint64_t v35 = sub_100A8CDA8(v20, v21, v17);
  if (v40)
  {
    sub_1003DCEB0(v22, a8, a10);
    sub_10001CFB8(a5, a6);
    sub_10001CFB8(a3, a4);
    sub_100037A24(v41, a2);
    sub_10001CFB8(v20, v21);
    sub_100037A24(v41, a2);
    sub_10001CFB8(a3, a4);
    sub_10001CFB8(a5, a6);
    return sub_10001CFB8(v20, v21);
  }
  else
  {
    uint64_t v37 = v35;
    unint64_t v38 = v36;
    sub_1003DCEB0(v22, a8, a10);
    sub_10001CFB8(v20, v21);
    sub_1000361E0(v37, v38);
    sub_10001CFB8(v20, v21);
    sub_100037A38(v41, a2);
    sub_1000361E0(a3, a4);
    sub_1000361E0(a5, a6);
    sub_1000361E0(v37, v38);
    sub_10001CFB8(a5, a6);
    sub_10001CFB8(a3, a4);
    sub_100037A24(v41, a2);
    sub_10001CFB8(v37, v38);
    sub_100037A24(v41, a2);
    sub_10001CFB8(a3, a4);
    sub_10001CFB8(a5, a6);
    uint64_t result = sub_10001CFB8(v37, v38);
    *a9 = v41;
    a9[1] = a2;
    a9[2] = a3;
    a9[3] = a4;
    a9[4] = a5;
    a9[5] = a6;
    a9[6] = a11;
    a9[7] = v37;
    a9[8] = v38;
  }
  return result;
}

unint64_t sub_1009DC738()
{
  unint64_t result = qword_101654AE0;
  if (!qword_101654AE0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_101654AE0);
  }
  return result;
}

ValueMetadata *type metadata accessor for UnpairCommandPayload()
{
  return &type metadata for UnpairCommandPayload;
}

unint64_t sub_1009DC79C(uint64_t a1)
{
  *(void *)(a1 + 8) = sub_1009DC7CC();
  unint64_t result = sub_1001E2D8C();
  *(void *)(a1 + 16) = result;
  return result;
}

unint64_t sub_1009DC7CC()
{
  unint64_t result = qword_101654AE8;
  if (!qword_101654AE8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_101654AE8);
  }
  return result;
}

uint64_t initializeWithCopy for ManagedCBPeripheralManager(uint64_t a1, uint64_t a2)
{
  long long v3 = *(_OWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 24) = v3;
  (**(void (***)(void))(v3 - 8))();
  return a1;
}

uint64_t *assignWithCopy for ManagedCBPeripheralManager(uint64_t *a1, uint64_t *a2)
{
  return a1;
}

uint64_t assignWithTake for ManagedCBPeripheralManager(uint64_t a1, uint64_t a2)
{
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(a1);
  long long v4 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v4;
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  return a1;
}

uint64_t getEnumTagSinglePayload for ManagedCBPeripheralManager(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 40)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 24);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for ManagedCBPeripheralManager(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(void *)unint64_t result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 40) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 24) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 40) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for ManagedCBPeripheralManager()
{
  return &type metadata for ManagedCBPeripheralManager;
}

void *sub_1009DC980(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = sub_10000588C((uint64_t *)&unk_1016477E0);
  __chkstk_darwin(v4 - 8);
  uint64_t v6 = (char *)v47 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for MACAddress();
  __chkstk_darwin(v7);
  uint64_t v53 = (char *)v47 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  unint64_t result = _swiftEmptyArrayStorage;
  unint64_t v62 = (unint64_t)_swiftEmptyArrayStorage;
  uint64_t v11 = *(void *)(a1 + 16);
  if (v11)
  {
    v47[2] = v2;
    Swift::String v51 = (void (**)(char *, char *, uint64_t))(v8 + 32);
    Swift::String v52 = (unsigned int (**)(char *, uint64_t, uint64_t))(v8 + 48);
    uint64_t v50 = (void (**)(char *, uint64_t))(v8 + 8);
    swift_bridgeObjectRetain();
    v47[1] = a1;
    long long v12 = (unint64_t *)(a1 + 72);
    uint64_t v49 = v6;
    uint64_t v48 = v7;
    while (2)
    {
      uint64_t v58 = v11;
      uint64_t v13 = *(v12 - 3);
      unint64_t v14 = *(v12 - 2);
      uint64_t v15 = *(v12 - 1);
      unint64_t v16 = *v12;
      sub_1000361E0(v13, v14);
      sub_1000361E0(v15, v16);
      uint64_t v17 = Data.init(stringLiteral:)();
      unint64_t v19 = v18;
      sub_1000361E0(v13, v14);
      unint64_t v56 = v14;
      uint64_t v57 = v13;
      MACAddress.init(addressToSanitize:type:)();
      if ((*v52)(v6, 1, v7) == 1) {
        goto LABEL_37;
      }
      unint64_t v21 = v53;
      (*v51)(v53, v6, v7);
      uint64_t v22 = MACAddress.data.getter();
      unint64_t v24 = v23;
      (*v50)(v21, v7);
      uint64_t v64 = v17;
      unint64_t v65 = v19;
      v63[3] = &type metadata for Data;
      v63[4] = &protocol witness table for Data;
      v63[0] = v22;
      v63[1] = v24;
      unint64_t v60 = v24;
      uint64_t v25 = sub_10001CD44(v63, (uint64_t)&type metadata for Data);
      uint64_t v7 = *v25;
      unint64_t v14 = v25[1];
      uint64_t v59 = v15;
      uint64_t v55 = v12 + 6;
      switch(v14 >> 62)
      {
        case 1uLL:
          uint64_t v54 = v22;
          uint64_t v20 = v7 >> 32;
          if (v7 >> 32 < (int)v7) {
            goto LABEL_33;
          }
          sub_1000361E0(v17, v19);
          sub_1000361E0(v54, v60);
          sub_1000361E0(v7, v14);
          if (__DataStorage._bytes.getter())
          {
            uint64_t v31 = __DataStorage._offset.getter();
            LODWORD(v20) = v7 - v31;
            if (__OFSUB__((int)v7, v31)) {
              goto LABEL_36;
            }
          }
          __DataStorage._length.getter();
          Data._Representation.append(contentsOf:)();
          sub_10001CFB8(v7, v14);
          break;
        case 2uLL:
          v14 &= 0x3FFFFFFFFFFFFFFFuLL;
          uint64_t v27 = v22;
          uint64_t v28 = *(void *)(v7 + 16);
          uint64_t v29 = *(void *)(v7 + 24);
          sub_1000361E0(v17, v19);
          uint64_t v54 = v27;
          sub_1000361E0(v27, v60);
          swift_retain();
          swift_retain();
          if (__DataStorage._bytes.getter())
          {
            uint64_t v30 = __DataStorage._offset.getter();
            LODWORD(v20) = v28 - v30;
            if (__OFSUB__(v28, v30)) {
              goto LABEL_35;
            }
          }
          if (__OFSUB__(v29, v28)) {
            goto LABEL_34;
          }
          __DataStorage._length.getter();
          Data._Representation.append(contentsOf:)();
          swift_release();
          swift_release();
          break;
        case 3uLL:
          memset(v61, 0, 14);
          sub_1000361E0(v17, v19);
          unint64_t v26 = v60;
          sub_1000361E0(v22, v60);
          Data._Representation.append(contentsOf:)();
          goto LABEL_18;
        default:
          v61[0] = v7;
          LOWORD(v61[1]) = v14;
          BYTE2(v61[1]) = BYTE2(v14);
          BYTE3(v61[1]) = BYTE3(v14);
          BYTE4(v61[1]) = BYTE4(v14);
          BYTE5(v61[1]) = BYTE5(v14);
          sub_1000361E0(v17, v19);
          unint64_t v26 = v60;
          sub_1000361E0(v22, v60);
          Data._Representation.append(contentsOf:)();
          goto LABEL_18;
      }
      uint64_t v15 = v59;
      unint64_t v26 = v60;
      uint64_t v22 = v54;
LABEL_18:
      _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)v63);
      sub_10001CFB8(v22, v26);
      sub_10001CFB8(v17, v19);
      uint64_t v32 = v64;
      unint64_t v33 = v65;
      sub_1000361E0(v15, v16);
      unint64_t v14 = Data.subdata(in:)();
      uint64_t v7 = v34;
      sub_10001CFB8(v15, v16);
      uint64_t v20 = (unint64_t)v7 >> 62;
      switch((unint64_t)v7 >> 62)
      {
        case 1uLL:
          LODWORD(v35) = HIDWORD(v14) - v14;
          if (__OFSUB__(HIDWORD(v14), v14))
          {
            __break(1u);
LABEL_32:
            __break(1u);
LABEL_33:
            __break(1u);
LABEL_34:
            __break(1u);
LABEL_35:
            __break(1u);
LABEL_36:
            __break(1u);
LABEL_37:
            __break(1u);
LABEL_38:
            if (v20 == 1)
            {
              LODWORD(v20) = HIDWORD(v14) - v14;
              if (!__OFSUB__(HIDWORD(v14), v14))
              {
                while (1)
                {
                  uint64_t v45 = (int)v20;
LABEL_47:
                  sub_10013019C();
                  swift_allocError();
                  *(void *)uint64_t v46 = 16;
                  *(void *)(v46 + 8) = v45;
                  *(unsigned char *)(v46 + 16) = 0;
                  swift_willThrow();
                  sub_10001CFB8(v14, v7);
                  swift_unexpectedError();
                  __break(1u);
                }
              }
              __break(1u);
            }
            if (v20 == 2)
            {
              uint64_t v43 = *(void *)(v14 + 16);
              uint64_t v44 = *(void *)(v14 + 24);
              uint64_t v45 = v44 - v43;
              if (__OFSUB__(v44, v43)) {
                __break(1u);
              }
            }
            else
            {
              uint64_t v45 = BYTE6(v7);
            }
            goto LABEL_47;
          }
          uint64_t v35 = (int)v35;
LABEL_25:
          if (v35 != 16) {
            goto LABEL_38;
          }
          id v39 = objc_allocWithZone((Class)SPCBPeripheralKeyAddressPair);
          Class isa = Data._bridgeToObjectiveC()().super.isa;
          Class v41 = Data._bridgeToObjectiveC()().super.isa;
          id v42 = [v39 initWithLEMACAddress:isa longTermKey:v41];
          sub_10001CFB8(v14, v7);
          sub_10001CFB8(v32, v33);

          sub_10001CFB8(v57, v56);
          sub_10001CFB8(v59, v16);
          uint64_t v6 = v49;
          uint64_t v7 = v48;
          if (v42)
          {
            specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
            if (*(void *)((v62 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((v62 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
              specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
            }
            specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
            specialized Array._endMutation()();
          }
          uint64_t v11 = v58 - 1;
          long long v12 = v55;
          if (v58 != 1) {
            continue;
          }
          swift_bridgeObjectRelease();
          unint64_t result = (void *)v62;
          break;
        case 2uLL:
          uint64_t v37 = *(void *)(v14 + 16);
          uint64_t v36 = *(void *)(v14 + 24);
          BOOL v38 = __OFSUB__(v36, v37);
          uint64_t v35 = v36 - v37;
          if (!v38) {
            goto LABEL_25;
          }
          goto LABEL_32;
        case 3uLL:
          uint64_t v45 = 0;
          goto LABEL_47;
        default:
          uint64_t v35 = BYTE6(v7);
          goto LABEL_25;
      }
      break;
    }
  }
  return result;
}

uint64_t sub_1009DD0F4(uint64_t result, uint64_t a2)
{
  uint64_t v2 = result;
  int64_t v3 = 0;
  uint64_t v5 = result + 56;
  uint64_t v4 = *(void *)(result + 56);
  uint64_t v20 = a2;
  uint64_t v6 = 1 << *(unsigned char *)(result + 32);
  uint64_t v7 = -1;
  if (v6 < 64) {
    uint64_t v7 = ~(-1 << v6);
  }
  unint64_t v8 = v7 & v4;
  int64_t v9 = (unint64_t)(v6 + 63) >> 6;
  while (1)
  {
    if (v8)
    {
      unint64_t v10 = __clz(__rbit64(v8));
      v8 &= v8 - 1;
      unint64_t v11 = v10 | (v3 << 6);
      goto LABEL_5;
    }
    int64_t v16 = v3 + 1;
    if (__OFADD__(v3, 1))
    {
      __break(1u);
      goto LABEL_25;
    }
    if (v16 >= v9) {
      goto LABEL_23;
    }
    unint64_t v17 = *(void *)(v5 + 8 * v16);
    ++v3;
    if (!v17)
    {
      int64_t v3 = v16 + 1;
      if (v16 + 1 >= v9) {
        goto LABEL_23;
      }
      unint64_t v17 = *(void *)(v5 + 8 * v3);
      if (!v17)
      {
        int64_t v3 = v16 + 2;
        if (v16 + 2 >= v9) {
          goto LABEL_23;
        }
        unint64_t v17 = *(void *)(v5 + 8 * v3);
        if (!v17)
        {
          int64_t v3 = v16 + 3;
          if (v16 + 3 >= v9) {
            goto LABEL_23;
          }
          unint64_t v17 = *(void *)(v5 + 8 * v3);
          if (!v17) {
            break;
          }
        }
      }
    }
LABEL_22:
    unint64_t v8 = (v17 - 1) & v17;
    unint64_t v11 = __clz(__rbit64(v17)) + (v3 << 6);
LABEL_5:
    uint64_t v12 = *(void *)(v2 + 48) + 24 * v11;
    Swift::Int v13 = *(void *)v12;
    uint64_t v14 = *(void *)(v12 + 8);
    char v15 = *(unsigned char *)(v12 + 16);
    swift_bridgeObjectRetain();
    sub_100DCB3D0((uint64_t)&v19, v13, v14, v15);
    unint64_t result = swift_bridgeObjectRelease();
  }
  int64_t v18 = v16 + 4;
  if (v18 >= v9)
  {
LABEL_23:
    swift_release();
    return v20;
  }
  unint64_t v17 = *(void *)(v5 + 8 * v18);
  if (v17)
  {
    int64_t v3 = v18;
    goto LABEL_22;
  }
  while (1)
  {
    int64_t v3 = v18 + 1;
    if (__OFADD__(v18, 1)) {
      break;
    }
    if (v3 >= v9) {
      goto LABEL_23;
    }
    unint64_t v17 = *(void *)(v5 + 8 * v3);
    ++v18;
    if (v17) {
      goto LABEL_22;
    }
  }
LABEL_25:
  __break(1u);
  return result;
}

uint64_t sub_1009DD288(uint64_t result, uint64_t a2)
{
  uint64_t v2 = result;
  int64_t v3 = 0;
  uint64_t v15 = a2;
  uint64_t v4 = result + 56;
  uint64_t v5 = 1 << *(unsigned char *)(result + 32);
  uint64_t v6 = -1;
  if (v5 < 64) {
    uint64_t v6 = ~(-1 << v5);
  }
  unint64_t v7 = v6 & *(void *)(result + 56);
  int64_t v8 = (unint64_t)(v5 + 63) >> 6;
  while (1)
  {
    if (v7)
    {
      unint64_t v9 = __clz(__rbit64(v7));
      v7 &= v7 - 1;
      unint64_t v10 = v9 | (v3 << 6);
      goto LABEL_5;
    }
    int64_t v11 = v3 + 1;
    if (__OFADD__(v3, 1))
    {
      __break(1u);
      goto LABEL_25;
    }
    if (v11 >= v8) {
      goto LABEL_23;
    }
    unint64_t v12 = *(void *)(v4 + 8 * v11);
    ++v3;
    if (!v12)
    {
      int64_t v3 = v11 + 1;
      if (v11 + 1 >= v8) {
        goto LABEL_23;
      }
      unint64_t v12 = *(void *)(v4 + 8 * v3);
      if (!v12)
      {
        int64_t v3 = v11 + 2;
        if (v11 + 2 >= v8) {
          goto LABEL_23;
        }
        unint64_t v12 = *(void *)(v4 + 8 * v3);
        if (!v12)
        {
          int64_t v3 = v11 + 3;
          if (v11 + 3 >= v8) {
            goto LABEL_23;
          }
          unint64_t v12 = *(void *)(v4 + 8 * v3);
          if (!v12) {
            break;
          }
        }
      }
    }
LABEL_22:
    unint64_t v7 = (v12 - 1) & v12;
    unint64_t v10 = __clz(__rbit64(v12)) + (v3 << 6);
LABEL_5:
    unint64_t result = sub_100DCCA90(&v14, *(void *)(*(void *)(v2 + 48) + 8 * v10));
  }
  int64_t v13 = v11 + 4;
  if (v13 >= v8)
  {
LABEL_23:
    swift_release();
    return v15;
  }
  unint64_t v12 = *(void *)(v4 + 8 * v13);
  if (v12)
  {
    int64_t v3 = v13;
    goto LABEL_22;
  }
  while (1)
  {
    int64_t v3 = v13 + 1;
    if (__OFADD__(v13, 1)) {
      break;
    }
    if (v3 >= v8) {
      goto LABEL_23;
    }
    unint64_t v12 = *(void *)(v4 + 8 * v3);
    ++v13;
    if (v12) {
      goto LABEL_22;
    }
  }
LABEL_25:
  __break(1u);
  return result;
}

uint64_t sub_1009DD3E4(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for UUID();
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = __chkstk_darwin(v4);
  int64_t v8 = (char *)&v27 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  unint64_t v10 = (char *)&v27 - v9;
  uint64_t v11 = sub_10000588C(&qword_101638CF0);
  uint64_t result = __chkstk_darwin(v11 - 8);
  uint64_t v14 = (char *)&v27 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  int64_t v15 = 0;
  uint64_t v33 = a1;
  uint64_t v34 = a2;
  uint64_t v18 = *(void *)(a1 + 56);
  uint64_t v17 = a1 + 56;
  uint64_t v16 = v18;
  uint64_t v19 = 1 << *(unsigned char *)(v17 - 24);
  uint64_t v20 = -1;
  if (v19 < 64) {
    uint64_t v20 = ~(-1 << v19);
  }
  unint64_t v21 = v20 & v16;
  uint64_t v28 = v17;
  int64_t v29 = (unint64_t)(v19 + 63) >> 6;
  uint64_t v31 = v5 + 16;
  uint64_t v32 = (void (**)(char *, uint64_t, uint64_t, uint64_t))(v5 + 56);
  uint64_t v30 = v5 + 48;
  if ((v20 & v16) == 0) {
    goto LABEL_5;
  }
LABEL_4:
  unint64_t v22 = __clz(__rbit64(v21));
  v21 &= v21 - 1;
  for (unint64_t i = v22 | (v15 << 6); ; unint64_t i = __clz(__rbit64(v25)) + (v15 << 6))
  {
    (*(void (**)(char *, unint64_t, uint64_t))(v5 + 16))(v14, *(void *)(v33 + 48) + *(void *)(v5 + 72) * i, v4);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v5 + 56))(v14, 0, 1, v4);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v5 + 48))(v14, 1, v4) == 1) {
      goto LABEL_25;
    }
    (*(void (**)(char *, char *, uint64_t))(v5 + 32))(v8, v14, v4);
    sub_100DC8CB8((uint64_t)v10, v8);
    uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v10, v4);
    if (v21) {
      goto LABEL_4;
    }
LABEL_5:
    int64_t v24 = v15 + 1;
    if (__OFADD__(v15, 1))
    {
      __break(1u);
      goto LABEL_27;
    }
    if (v24 >= v29) {
      goto LABEL_24;
    }
    unint64_t v25 = *(void *)(v28 + 8 * v24);
    ++v15;
    if (!v25)
    {
      int64_t v15 = v24 + 1;
      if (v24 + 1 >= v29) {
        goto LABEL_24;
      }
      unint64_t v25 = *(void *)(v28 + 8 * v15);
      if (!v25)
      {
        int64_t v15 = v24 + 2;
        if (v24 + 2 >= v29) {
          goto LABEL_24;
        }
        unint64_t v25 = *(void *)(v28 + 8 * v15);
        if (!v25)
        {
          int64_t v15 = v24 + 3;
          if (v24 + 3 >= v29) {
            goto LABEL_24;
          }
          unint64_t v25 = *(void *)(v28 + 8 * v15);
          if (!v25) {
            break;
          }
        }
      }
    }
LABEL_20:
    unint64_t v21 = (v25 - 1) & v25;
  }
  int64_t v26 = v24 + 4;
  if (v26 >= v29)
  {
LABEL_24:
    (*v32)(v14, 1, 1, v4);
LABEL_25:
    swift_release();
    return v34;
  }
  unint64_t v25 = *(void *)(v28 + 8 * v26);
  if (v25)
  {
    int64_t v15 = v26;
    goto LABEL_20;
  }
  while (1)
  {
    int64_t v15 = v26 + 1;
    if (__OFADD__(v26, 1)) {
      break;
    }
    if (v15 >= v29) {
      goto LABEL_24;
    }
    unint64_t v25 = *(void *)(v28 + 8 * v15);
    ++v26;
    if (v25) {
      goto LABEL_20;
    }
  }
LABEL_27:
  __break(1u);
  return result;
}

uint64_t sub_1009DD750(uint64_t result, uint64_t a2)
{
  uint64_t v2 = result;
  int64_t v3 = 0;
  uint64_t v5 = result + 56;
  uint64_t v4 = *(void *)(result + 56);
  uint64_t v20 = a2;
  uint64_t v6 = 1 << *(unsigned char *)(result + 32);
  uint64_t v7 = -1;
  if (v6 < 64) {
    uint64_t v7 = ~(-1 << v6);
  }
  unint64_t v8 = v7 & v4;
  int64_t v9 = (unint64_t)(v6 + 63) >> 6;
  while (1)
  {
    if (v8)
    {
      unint64_t v10 = __clz(__rbit64(v8));
      v8 &= v8 - 1;
      unint64_t v11 = v10 | (v3 << 6);
      goto LABEL_5;
    }
    int64_t v16 = v3 + 1;
    if (__OFADD__(v3, 1))
    {
      __break(1u);
      goto LABEL_25;
    }
    if (v16 >= v9) {
      goto LABEL_23;
    }
    unint64_t v17 = *(void *)(v5 + 8 * v16);
    ++v3;
    if (!v17)
    {
      int64_t v3 = v16 + 1;
      if (v16 + 1 >= v9) {
        goto LABEL_23;
      }
      unint64_t v17 = *(void *)(v5 + 8 * v3);
      if (!v17)
      {
        int64_t v3 = v16 + 2;
        if (v16 + 2 >= v9) {
          goto LABEL_23;
        }
        unint64_t v17 = *(void *)(v5 + 8 * v3);
        if (!v17)
        {
          int64_t v3 = v16 + 3;
          if (v16 + 3 >= v9) {
            goto LABEL_23;
          }
          unint64_t v17 = *(void *)(v5 + 8 * v3);
          if (!v17) {
            break;
          }
        }
      }
    }
LABEL_22:
    unint64_t v8 = (v17 - 1) & v17;
    unint64_t v11 = __clz(__rbit64(v17)) + (v3 << 6);
LABEL_5:
    unint64_t v12 = (unsigned __int8 *)(*(void *)(v2 + 48) + 24 * v11);
    uint64_t v13 = *((void *)v12 + 1);
    uint64_t v14 = *((void *)v12 + 2);
    Swift::Int v15 = *v12;
    swift_bridgeObjectRetain();
    sub_100DCC8B8((uint64_t)&v19, v15, v13, v14);
    uint64_t result = swift_bridgeObjectRelease();
  }
  int64_t v18 = v16 + 4;
  if (v18 >= v9)
  {
LABEL_23:
    swift_release();
    return v20;
  }
  unint64_t v17 = *(void *)(v5 + 8 * v18);
  if (v17)
  {
    int64_t v3 = v18;
    goto LABEL_22;
  }
  while (1)
  {
    int64_t v3 = v18 + 1;
    if (__OFADD__(v18, 1)) {
      break;
    }
    if (v3 >= v9) {
      goto LABEL_23;
    }
    unint64_t v17 = *(void *)(v5 + 8 * v3);
    ++v18;
    if (v17) {
      goto LABEL_22;
    }
  }
LABEL_25:
  __break(1u);
  return result;
}

void sub_1009DD8E4(unint64_t a1, void *a2)
{
}

void sub_1009DD914(unint64_t a1, void *a2, unint64_t *a3, uint64_t a4, unint64_t *a5, void (*a6)(id *, id))
{
  unint64_t v7 = a1;
  v26[1] = a2;
  if ((a1 & 0xC000000000000001) != 0)
  {
    __CocoaSet.makeIterator()();
    sub_10001D4B0(0, a3);
    sub_10012E2E4(a5, a3);
    Set.Iterator.init(_cocoa:)();
    unint64_t v7 = (unint64_t)v26[2];
    unint64_t v25 = v26[3];
    uint64_t v10 = (uint64_t)v26[4];
    id v11 = v26[5];
    unint64_t v12 = (unint64_t)v26[6];
  }
  else
  {
    id v11 = 0;
    uint64_t v13 = -1 << *(unsigned char *)(a1 + 32);
    unint64_t v25 = (void *)(a1 + 56);
    uint64_t v10 = ~v13;
    uint64_t v14 = -v13;
    if (v14 < 64) {
      uint64_t v15 = ~(-1 << v14);
    }
    else {
      uint64_t v15 = -1;
    }
    unint64_t v12 = v15 & *(void *)(a1 + 56);
  }
  int64_t v16 = (unint64_t)(v10 + 64) >> 6;
  if ((v7 & 0x8000000000000000) != 0) {
    goto LABEL_10;
  }
  while (1)
  {
    if (v12)
    {
      uint64_t v17 = (v12 - 1) & v12;
      unint64_t v18 = __clz(__rbit64(v12)) | ((void)v11 << 6);
      uint64_t v19 = (char *)v11;
      goto LABEL_29;
    }
    uint64_t v21 = (uint64_t)v11 + 1;
    if (__OFADD__(v11, 1)) {
      break;
    }
    if (v21 >= v16) {
      goto LABEL_32;
    }
    unint64_t v22 = v25[v21];
    uint64_t v19 = (char *)v11 + 1;
    if (!v22)
    {
      uint64_t v19 = (char *)v11 + 2;
      if ((uint64_t)v11 + 2 >= v16) {
        goto LABEL_32;
      }
      unint64_t v22 = v25[(void)v19];
      if (!v22)
      {
        uint64_t v19 = (char *)v11 + 3;
        if ((uint64_t)v11 + 3 >= v16) {
          goto LABEL_32;
        }
        unint64_t v22 = v25[(void)v19];
        if (!v22)
        {
          uint64_t v19 = (char *)v11 + 4;
          if ((uint64_t)v11 + 4 >= v16) {
            goto LABEL_32;
          }
          unint64_t v22 = v25[(void)v19];
          if (!v22)
          {
            uint64_t v19 = (char *)v11 + 5;
            if ((uint64_t)v11 + 5 >= v16) {
              goto LABEL_32;
            }
            unint64_t v22 = v25[(void)v19];
            if (!v22)
            {
              unint64_t v23 = (char *)v11 + 6;
              while ((char *)v16 != v23)
              {
                unint64_t v22 = v25[(void)v23++];
                if (v22)
                {
                  uint64_t v19 = v23 - 1;
                  goto LABEL_28;
                }
              }
LABEL_32:
              sub_100132C20();
              return;
            }
          }
        }
      }
    }
LABEL_28:
    uint64_t v17 = (v22 - 1) & v22;
    unint64_t v18 = __clz(__rbit64(v22)) + ((void)v19 << 6);
LABEL_29:
    id v20 = *(id *)(*(void *)(v7 + 48) + 8 * v18);
    if (!v20) {
      goto LABEL_32;
    }
    while (1)
    {
      a6(v26, v20);

      id v11 = v19;
      unint64_t v12 = v17;
      if ((v7 & 0x8000000000000000) == 0) {
        break;
      }
LABEL_10:
      if (__CocoaSet.Iterator.next()())
      {
        sub_10001D4B0(0, a3);
        swift_unknownObjectRetain();
        swift_dynamicCast();
        id v20 = v26[0];
        swift_unknownObjectRelease();
        uint64_t v19 = (char *)v11;
        uint64_t v17 = v12;
        if (v20) {
          continue;
        }
      }
      goto LABEL_32;
    }
  }
  __break(1u);
}

uint64_t sub_1009DDBCC(uint64_t a1)
{
  v2[11] = a1;
  v2[12] = v1;
  uint64_t v3 = type metadata accessor for ManagedCBPeripheralManager.KeyType();
  v2[13] = v3;
  v2[14] = *(void *)(v3 - 8);
  v2[15] = swift_task_alloc();
  v2[16] = swift_task_alloc();
  v2[17] = swift_task_alloc();
  uint64_t v4 = type metadata accessor for SystemInfo.DeviceLockState();
  v2[18] = v4;
  v2[19] = *(void *)(v4 - 8);
  v2[20] = swift_task_alloc();
  v2[21] = swift_task_alloc();
  return _swift_task_switch(sub_1009DDD14, 0, 0);
}

uint64_t sub_1009DDD14()
{
  if (qword_101636F08 != -1) {
    swift_once();
  }
  uint64_t v1 = *(void **)(v0 + 88);
  uint64_t v2 = type metadata accessor for Logger();
  *(void *)(v0 + 176) = sub_100010324(v2, (uint64_t)qword_10170E858);
  id v3 = v1;
  uint64_t v4 = Logger.logObject.getter();
  os_log_type_t v5 = static os_log_type_t.default.getter();
  BOOL v6 = os_log_type_enabled(v4, v5);
  unint64_t v7 = *(void **)(v0 + 88);
  if (v6)
  {
    unint64_t v8 = (uint8_t *)swift_slowAlloc();
    uint64_t v35 = (void *)swift_slowAlloc();
    *(_DWORD *)unint64_t v8 = 138543362;
    *(void *)(v0 + 56) = v7;
    id v9 = v7;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *uint64_t v35 = v7;

    _os_log_impl((void *)&_mh_execute_header, v4, v5, "bluetoothConnectionKeys for request: %{public}@", v8, 0xCu);
    sub_10000588C((uint64_t *)&unk_101638EA0);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
  }
  if (qword_1016371D8 != -1) {
    swift_once();
  }
  *(void *)(v0 + 16) = 0x7365547265646E75;
  *(void *)(v0 + 24) = 0xE900000000000074;
  SynchronousCache.cachedValue<A>(key:computeBlock:)();
  swift_bridgeObjectRelease();
  if (*(unsigned char *)(v0 + 232)) {
    goto LABEL_12;
  }
  type metadata accessor for Transaction();
  uint64_t v10 = static Transaction.currentNSXPCConnection.getter();
  if (v10)
  {
    id v11 = (void *)v10;
    sub_1009E5D4C();
    if (NSXPCConnection.hasEntitlement<A>(_:)())
    {

LABEL_12:
      uint64_t v13 = *(void *)(v0 + 160);
      uint64_t v12 = *(void *)(v0 + 168);
      uint64_t v15 = *(void *)(v0 + 144);
      uint64_t v14 = *(void *)(v0 + 152);
      static SystemInfo.lockState.getter();
      (*(void (**)(uint64_t, void, uint64_t))(v14 + 104))(v13, enum case for SystemInfo.DeviceLockState.beforeFirstUnlock(_:), v15);
      sub_1009E5DA0((unint64_t *)&qword_1016429C8, (void (*)(uint64_t))&type metadata accessor for SystemInfo.DeviceLockState);
      char v16 = dispatch thunk of static Equatable.== infix(_:_:)();
      uint64_t v17 = *(void (**)(uint64_t, uint64_t))(v14 + 8);
      v17(v13, v15);
      v17(v12, v15);
      if (v16)
      {
        unint64_t v18 = Logger.logObject.getter();
        os_log_type_t v19 = static os_log_type_t.error.getter();
        if (os_log_type_enabled(v18, v19))
        {
          id v20 = (uint8_t *)swift_slowAlloc();
          *(_WORD *)id v20 = 0;
          _os_log_impl((void *)&_mh_execute_header, v18, v19, "bluetoothConnectionKeys called while in .beforeFirstUnlock state", v20, 2u);
          swift_slowDealloc();
        }

        id v21 = objc_allocWithZone((Class)SPCBPeripheralKeyResponse);
        sub_10001D4B0(0, &qword_101654B68);
        Class isa = Array._bridgeToObjectiveC()().super.isa;
        id v23 = [v21 initWithPeripherals:isa];

        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        int64_t v24 = *(uint64_t (**)(id))(v0 + 8);
        return v24(v23);
      }
      else
      {
        int64_t v26 = sub_10001CD44(*(void **)(v0 + 96), *(void *)(*(void *)(v0 + 96) + 24));
        uint64_t v28 = *v26;
        uint64_t v27 = v26[1];
        uint64_t v29 = v26[2];
        uint64_t v30 = (void *)swift_task_alloc();
        *(void *)(v0 + 184) = v30;
        *uint64_t v30 = v0;
        v30[1] = sub_1009DE40C;
        return sub_100F4AE80(v28, v27, v29);
      }
    }
    type metadata accessor for SPCBPeripheralError(0);
    *(void *)(v0 + 64) = 1;
    sub_1004A0BC8((uint64_t)_swiftEmptyArrayStorage);
    sub_1009E5DA0(&qword_101638738, type metadata accessor for SPCBPeripheralError);
    _BridgedStoredNSError.init(_:userInfo:)();
    swift_willThrow();
  }
  else
  {
    uint64_t v31 = Logger.logObject.getter();
    os_log_type_t v32 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v31, v32))
    {
      uint64_t v33 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v33 = 0;
      _os_log_impl((void *)&_mh_execute_header, v31, v32, "Unable to get current NSXPCConnection!", v33, 2u);
      swift_slowDealloc();
    }

    type metadata accessor for SPCBPeripheralError(0);
    *(void *)(v0 + 48) = 1;
    sub_1004A0BC8((uint64_t)_swiftEmptyArrayStorage);
    sub_1009E5DA0(&qword_101638738, type metadata accessor for SPCBPeripheralError);
    _BridgedStoredNSError.init(_:userInfo:)();
    swift_willThrow();
  }
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v34 = *(uint64_t (**)(void))(v0 + 8);
  return v34();
}

uint64_t sub_1009DE40C(uint64_t a1)
{
  *(void *)(*(void *)v1 + 192) = a1;
  swift_task_dealloc();
  return _swift_task_switch(sub_1009DE50C, 0, 0);
}

uint64_t sub_1009DE50C()
{
  uint64_t v1 = *(void *)(v0 + 192);
  uint64_t v2 = *(void *)(v0 + 96);
  id v3 = [*(id *)(v0 + 88) requestParameters];
  sub_10001D4B0(0, &qword_101654B38);
  uint64_t v4 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  *(void *)(v0 + 72) = v4;
  uint64_t v5 = swift_task_alloc();
  *(void *)(v0 + 200) = v5;
  *(void *)(v5 + 16) = v2;
  *(void *)(v5 + 24) = v1;
  BOOL v6 = (void *)swift_task_alloc();
  *(void *)(v0 + 208) = v6;
  uint64_t v7 = sub_10000588C(&qword_101654B50);
  uint64_t v8 = sub_10000588C(&qword_101654B58);
  uint64_t v9 = sub_100062734(&qword_101654B60, &qword_101654B50);
  *BOOL v6 = v0;
  v6[1] = sub_1009DE684;
  return Sequence.asyncMap<A>(_:)(&unk_101654B48, v5, v7, v8, v9);
}

uint64_t sub_1009DE684(uint64_t a1)
{
  uint64_t v3 = *v2;
  *(void *)(v3 + 216) = a1;
  *(void *)(v3 + 224) = v1;
  swift_task_dealloc();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_task_dealloc();
  if (v1) {
    uint64_t v4 = sub_1009DEF90;
  }
  else {
    uint64_t v4 = sub_1009DE800;
  }
  return _swift_task_switch(v4, 0, 0);
}

uint64_t sub_1009DE800()
{
  uint64_t v63 = v1;
  uint64_t v4 = v1[27];
  uint64_t v56 = *(void *)(v4 + 16);
  if (!v56)
  {
    swift_bridgeObjectRelease();
    goto LABEL_35;
  }
  unint64_t v5 = 0;
  uint64_t v59 = v1[14];
  uint64_t v57 = v4 + 32;
  uint64_t v6 = _swiftEmptyDictionarySingleton;
  uint64_t v55 = v1[27];
  do
  {
    if (v5 >= *(void *)(v4 + 16)) {
      goto LABEL_57;
    }
    unint64_t v7 = *(void *)(v57 + 16 * v5 + 8);
    if (v7 >> 62)
    {
      swift_bridgeObjectRetain_n();
      uint64_t v0 = _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
      unint64_t v58 = v5;
      if (!v0) {
        goto LABEL_3;
      }
LABEL_7:
      uint64_t v8 = 0;
      unint64_t v61 = v7 & 0xC000000000000001;
      unint64_t v60 = v7;
      while (1)
      {
        if (v61) {
          id v13 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
        }
        else {
          id v13 = *(id *)(v7 + 8 * v8 + 32);
        }
        unint64_t v3 = (unint64_t)v13;
        uint64_t v2 = (uint8_t *)(v8 + 1);
        if (__OFADD__(v8, 1))
        {
          __break(1u);
LABEL_55:
          __break(1u);
LABEL_56:
          __break(1u);
LABEL_57:
          __break(1u);
          goto LABEL_58;
        }
        uint64_t v14 = v0;
        id v15 = [v13 userIdentifier];
        static UUID._unconditionallyBridgeFromObjectiveC(_:)();

        id v16 = [(id)v3 beaconIdentifier];
        static UUID._unconditionallyBridgeFromObjectiveC(_:)();

        if (v6[2].isa)
        {
          unint64_t v17 = sub_100724EBC(v1[17]);
          if (v18)
          {
            uint64_t v19 = v1[16];
            id v20 = (void *)*((void *)v6[7].isa + v17);
            sub_1009E5E9C(v1[17], v19, (uint64_t (*)(void))type metadata accessor for ManagedCBPeripheralManager.KeyType);
            id v21 = v20;
            id v22 = sub_1009E4118(v21, (void *)v3);
            char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
            unint64_t v62 = v6;
            sub_100170F10((uint64_t)v22, v19, isUniquelyReferenced_nonNull_native);
            uint64_t v6 = v62;
            swift_bridgeObjectRelease();
            sub_1009E5F68(v19, (uint64_t (*)(void))type metadata accessor for ManagedCBPeripheralManager.KeyType);

            goto LABEL_10;
          }
        }
        uint64_t v24 = v1[15];
        sub_1009E5E9C(v1[17], v24, (uint64_t (*)(void))type metadata accessor for ManagedCBPeripheralManager.KeyType);
        id v21 = (id)v3;
        int v25 = swift_isUniquelyReferenced_nonNull_native();
        unint64_t v62 = v6;
        uint64_t v26 = v24;
        uint64_t v0 = v6;
        unint64_t v3 = sub_100724EBC(v26);
        Class isa = v6[2].isa;
        BOOL v29 = (v27 & 1) == 0;
        uint64_t v30 = (uint64_t)isa + v29;
        if (__OFADD__(isa, v29)) {
          goto LABEL_55;
        }
        char v31 = v27;
        if ((uint64_t)v6[3].isa >= v30)
        {
          if (v25)
          {
            if ((v27 & 1) == 0) {
              goto LABEL_25;
            }
          }
          else
          {
            uint64_t v0 = &v62;
            sub_100E85E18();
            uint64_t v6 = v62;
            if ((v31 & 1) == 0) {
              goto LABEL_25;
            }
          }
        }
        else
        {
          uint64_t v32 = v1[15];
          sub_100E75168(v30, v25);
          uint64_t v6 = v62;
          uint64_t v0 = v62;
          unint64_t v33 = sub_100724EBC(v32);
          if ((v31 & 1) != (v34 & 1))
          {
            return KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
          }
          unint64_t v3 = v33;
          if ((v31 & 1) == 0)
          {
LABEL_25:
            uint64_t v35 = v1[15];
            v6[(v3 >> 6) + 8].Class isa = (Class)((uint64_t)v6[(v3 >> 6) + 8].isa | (1 << v3));
            sub_1009E5E9C(v35, (uint64_t)v6[6].isa + *(void *)(v59 + 72) * v3, (uint64_t (*)(void))type metadata accessor for ManagedCBPeripheralManager.KeyType);
            *((void *)v6[7].isa + v3) = v21;
            Class v36 = v6[2].isa;
            BOOL v37 = __OFADD__(v36, 1);
            BOOL v38 = (Class)((char *)v36 + 1);
            if (v37) {
              goto LABEL_56;
            }
            v6[2].Class isa = v38;
            goto LABEL_9;
          }
        }
        Class v9 = v6[7].isa;

        *((void *)v9 + v3) = v21;
LABEL_9:
        uint64_t v10 = v1[15];
        swift_bridgeObjectRelease();
        sub_1009E5F68(v10, (uint64_t (*)(void))type metadata accessor for ManagedCBPeripheralManager.KeyType);
LABEL_10:
        uint64_t v11 = v1[17];

        sub_1009E5F68(v11, (uint64_t (*)(void))type metadata accessor for ManagedCBPeripheralManager.KeyType);
        ++v8;
        uint64_t v0 = v14;
        BOOL v12 = v2 == (uint8_t *)v14;
        unint64_t v7 = v60;
        if (v12) {
          goto LABEL_3;
        }
      }
    }
    uint64_t v0 = *(NSObject **)((v7 & 0xFFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain();
    unint64_t v58 = v5;
    if (v0) {
      goto LABEL_7;
    }
LABEL_3:
    unint64_t v5 = v58 + 1;
    swift_bridgeObjectRelease();
    uint64_t v4 = v55;
  }
  while (v58 + 1 != v56);
  swift_bridgeObjectRelease();
LABEL_35:
  uint64_t v40 = swift_bridgeObjectRetain();
  unint64_t v3 = (unint64_t)sub_100711438(v40);
  swift_bridgeObjectRelease();
  swift_retain_n();
  uint64_t v0 = Logger.logObject.getter();
  LOBYTE(v41) = static os_log_type_t.default.getter();
  if (!os_log_type_enabled(v0, (os_log_type_t)v41))
  {
    swift_release_n();
    goto LABEL_41;
  }
  uint64_t v2 = (uint8_t *)swift_slowAlloc();
  *(_DWORD *)uint64_t v2 = 134217984;
  if ((v3 & 0x8000000000000000) != 0 || (v3 & 0x4000000000000000) != 0) {
    goto LABEL_63;
  }
  uint64_t v42 = *(void *)(v3 + 16);
  while (1)
  {
    swift_release();
    v1[10] = v42;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release();
    _os_log_impl((void *)&_mh_execute_header, v0, (os_log_type_t)v41, "Peripheral count: %ld", v2, 0xCu);
    swift_slowDealloc();
LABEL_41:

    if ((v3 & 0x8000000000000000) != 0 || (v3 & 0x4000000000000000) != 0)
    {
LABEL_58:
      swift_retain();
      uint64_t v41 = _CocoaArrayWrapper.endIndex.getter();
      if (!v41) {
        goto LABEL_59;
      }
    }
    else
    {
      uint64_t v41 = *(void *)(v3 + 16);
      swift_retain();
      if (!v41) {
        goto LABEL_59;
      }
    }
    if (v41 >= 1) {
      break;
    }
    __break(1u);
LABEL_63:
    swift_bridgeObjectRetain();
    uint64_t v42 = _CocoaArrayWrapper.endIndex.getter();
    swift_release();
  }
  uint64_t v43 = 0;
  unint64_t v44 = v3 & 0xC000000000000001;
  do
  {
    if (v44) {
      id v46 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
    }
    else {
      id v46 = *(id *)(v3 + 8 * v43 + 32);
    }
    unint64_t v47 = v46;
    uint64_t v45 = Logger.logObject.getter();
    os_log_type_t v48 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v45, v48))
    {
      uint64_t v49 = swift_slowAlloc();
      uint64_t v50 = (void *)swift_slowAlloc();
      *(_DWORD *)uint64_t v49 = 138412290;
      *(void *)(v49 + 4) = v47;
      *uint64_t v50 = v47;
      _os_log_impl((void *)&_mh_execute_header, v45, v48, "Peripheral: %@", (uint8_t *)v49, 0xCu);
      sub_10000588C((uint64_t *)&unk_101638EA0);
      swift_arrayDestroy();
      unint64_t v44 = v3 & 0xC000000000000001;
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {

      uint64_t v45 = v47;
    }
    ++v43;
  }
  while (v41 != v43);
LABEL_59:
  swift_release();
  id v51 = objc_allocWithZone((Class)SPCBPeripheralKeyResponse);
  sub_10001D4B0(0, &qword_101654B68);
  Class v52 = Array._bridgeToObjectiveC()().super.isa;
  swift_release();
  id v53 = [v51 initWithPeripherals:v52];

  swift_bridgeObjectRelease();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v54 = (uint64_t (*)(id))v1[1];
  return v54(v53);
}

uint64_t sub_1009DEF90()
{
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_1009DF02C(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  v4[3] = a3;
  v4[4] = a4;
  v4[2] = a1;
  uint64_t v6 = type metadata accessor for UUID();
  uint64_t v4[5] = v6;
  v4[6] = *(void *)(v6 - 8);
  uint64_t v7 = swift_task_alloc();
  uint64_t v8 = *a2;
  v4[7] = v7;
  v4[8] = v8;
  return _swift_task_switch(sub_1009DF0F8, 0, 0);
}

uint64_t sub_1009DF0F8()
{
  id v1 = [*(id *)(v0 + 64) vendorIdentifierList];
  sub_10001D4B0(0, (unint64_t *)&qword_10164DC40);
  unint64_t v2 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  if (v2 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v3 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    uint64_t v26 = (void *)v0;
    if (!v3) {
      goto LABEL_13;
    }
  }
  else
  {
    uint64_t v3 = *(void *)((v2 & 0xFFFFFFFFFFFFFF8) + 0x10);
    uint64_t v26 = (void *)v0;
    if (!v3) {
      goto LABEL_13;
    }
  }
  uint64_t result = sub_1000B8424(0, v3 & ~(v3 >> 63), 0);
  if (v3 < 0)
  {
    __break(1u);
    return result;
  }
  for (uint64_t i = 0; i != v3; ++i)
  {
    if ((v2 & 0xC000000000000001) != 0) {
      id v6 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
    }
    else {
      id v6 = *(id *)(v2 + 8 * i + 32);
    }
    uint64_t v7 = v6;
    unsigned int v8 = [v6 unsignedIntValue];

    unint64_t v10 = _swiftEmptyArrayStorage[2];
    unint64_t v9 = _swiftEmptyArrayStorage[3];
    if (v10 >= v9 >> 1) {
      sub_1000B8424(v9 > 1, v10 + 1, 1);
    }
    _swiftEmptyArrayStorage[2] = v10 + 1;
    *((_DWORD *)&_swiftEmptyArrayStorage[4] + v10) = v8;
  }
LABEL_13:
  swift_bridgeObjectRelease();
  uint64_t v11 = v26[7];
  BOOL v12 = (void *)v26[8];
  uint64_t v13 = v26[6];
  uint64_t v14 = v26[4];
  id v15 = [v12 sessionKey:v26[5]];
  id v16 = [v15 userIdentifier];

  static UUID._unconditionallyBridgeFromObjectiveC(_:)();
  id v17 = [v12 sessionKey];
  id v18 = [v17 bundleId];

  uint64_t v19 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v21 = v20;

  uint64_t v22 = sub_101159F64((uint64_t)_swiftEmptyArrayStorage);
  swift_bridgeObjectRelease();
  id v23 = sub_1009DF850(v11, v14, v19, v21, v22);
  v26[9] = v23;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  (*(void (**)(uint64_t, uint64_t))(v13 + 8))(v11, v25);
  swift_bridgeObjectRetain();
  uint64_t v24 = (void *)swift_task_alloc();
  v26[10] = v24;
  *uint64_t v24 = v26;
  v24[1] = sub_1009DF420;
  return sub_1009E02E4((uint64_t)v23);
}

uint64_t sub_1009DF420(uint64_t a1)
{
  uint64_t v4 = *v2;
  uint64_t v5 = *v2;
  swift_task_dealloc();
  swift_bridgeObjectRelease();
  if (v1)
  {
    swift_bridgeObjectRelease();
    swift_task_dealloc();
    id v6 = *(uint64_t (**)(void))(v5 + 8);
    return v6();
  }
  else
  {
    *(void *)(v4 + 88) = a1;
    return _swift_task_switch(sub_1009DF5A8, 0, 0);
  }
}

uint64_t sub_1009DF5A8()
{
  id v1 = [*(id *)(v0 + 64) sessionKey];
  *(void *)(v0 + 96) = v1;
  unint64_t v2 = (void *)swift_task_alloc();
  *(void *)(v0 + 104) = v2;
  *unint64_t v2 = v0;
  v2[1] = sub_1009DF664;
  uint64_t v3 = *(void *)(v0 + 88);
  uint64_t v4 = *(void *)(v0 + 72);
  return sub_1009E1394((uint64_t)v1, v3, v4);
}

uint64_t sub_1009DF664(uint64_t a1)
{
  unint64_t v2 = *(void **)(*(void *)v1 + 96);
  *(void *)(*(void *)v1 + 112) = a1;
  swift_task_dealloc();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return _swift_task_switch(sub_1009DF7C0, 0, 0);
}

uint64_t sub_1009DF7C0()
{
  uint64_t v1 = *(void *)(v0 + 112);
  unint64_t v2 = *(void **)(v0 + 16);
  *unint64_t v2 = [*(id *)(v0 + 64) sessionKey];
  v2[1] = v1;
  swift_task_dealloc();
  uint64_t v3 = *(uint64_t (**)(void))(v0 + 8);
  return v3();
}

uint64_t *sub_1009DF850(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v76 = a5;
  uint64_t v75 = a2;
  uint64_t v82 = a1;
  uint64_t v7 = (int *)type metadata accessor for ManagedCBPeripheralBeaconInfo();
  uint64_t v8 = (uint64_t *)*((void *)v7 - 1);
  uint64_t v9 = __chkstk_darwin(v7);
  char v81 = (char *)&v74 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = __chkstk_darwin(v9);
  uint64_t v77 = (uint64_t)&v74 - v12;
  uint64_t v13 = __chkstk_darwin(v11);
  uint64_t v90 = (char *)&v74 - v14;
  uint64_t v15 = __chkstk_darwin(v13);
  id v17 = (char *)&v74 - v16;
  __chkstk_darwin(v15);
  uint64_t v86 = (char *)&v74 - v18;
  uint64_t v83 = type metadata accessor for UUID();
  uint64_t isUniquelyReferenced_nonNull_native = *(void *)(v83 - 8);
  __chkstk_darwin(v83);
  uint64_t v21 = (char *)&v74 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  v22._countAndFlagsBits = 0x6C7070612E6D6F63;
  v22._object = (void *)0xEA00000000002E65;
  os_log_type_t v23 = String.hasPrefix(_:)(v22);
  if ((a3 != 0xD000000000000014 || a4 != 0x800000010140E710)
    && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
  {
    uint64_t v25 = v83;
    (*(void (**)(char *, uint64_t, uint64_t))(isUniquelyReferenced_nonNull_native + 16))(v21, v82, v83);
LABEL_9:
    (*(void (**)(char *, uint64_t))(isUniquelyReferenced_nonNull_native + 8))(v21, v25);
    uint64_t v21 = 0;
    BOOL v78 = 0;
    uint64_t v30 = v75;
    uint64_t v26 = (uint64_t)v81;
    unint64_t v27 = (unint64_t)v90;
    uint64_t isUniquelyReferenced_nonNull_native = (uint64_t)v86;
    if ((v23 & 1) == 0) {
      goto LABEL_11;
    }
    goto LABEL_10;
  }
  uint64_t v24 = *(void *)(v76 + 16);
  uint64_t v25 = v83;
  (*(void (**)(char *, uint64_t, uint64_t))(isUniquelyReferenced_nonNull_native + 16))(v21, v82, v83);
  if (v24) {
    goto LABEL_9;
  }
  uint64_t v26 = (uint64_t)v81;
  unint64_t v27 = (unint64_t)v90;
  if (qword_101636ED0 != -1) {
LABEL_46:
  }
    swift_once();
  uint64_t v28 = v83;
  sub_100010324(v83, (uint64_t)qword_101654AF0);
  uint64_t v29 = static UUID.== infix(_:_:)();
  (*(void (**)(char *, uint64_t))(isUniquelyReferenced_nonNull_native + 8))(v21, v28);
  if ((v23 & 1) == 0)
  {
    BOOL v78 = 0;
    uint64_t v30 = v75;
    uint64_t isUniquelyReferenced_nonNull_native = (uint64_t)v86;
    uint64_t v21 = (char *)v29;
    uint64_t v31 = *(void *)(v75 + 16);
    if (v31) {
      goto LABEL_12;
    }
    return _swiftEmptyDictionarySingleton;
  }
  uint64_t v30 = v75;
  uint64_t isUniquelyReferenced_nonNull_native = (uint64_t)v86;
  uint64_t v21 = (char *)v29;
LABEL_10:
  BOOL v78 = *(void *)(v76 + 16) == 0;
LABEL_11:
  uint64_t v31 = *(void *)(v30 + 16);
  if (!v31) {
    return _swiftEmptyDictionarySingleton;
  }
LABEL_12:
  uint64_t v32 = v30 + ((*((unsigned __int8 *)v8 + 80) + 32) & ~(unint64_t)*((unsigned __int8 *)v8 + 80));
  uint64_t v88 = v8[9];
  uint64_t v33 = v32;
  swift_bridgeObjectRetain();
  char v93 = _swiftEmptyDictionarySingleton;
  *((void *)&v34 + 1) = 2;
  long long v85 = xmmword_101342130;
  *(void *)&long long v34 = 141559043;
  long long v80 = v34;
  uint64_t v79 = (char *)&type metadata for Any + 8;
  uint64_t v94 = v17;
  while (1)
  {
    uint64_t v91 = v33;
    uint64_t v92 = v31;
    sub_1009E5E9C(v33, isUniquelyReferenced_nonNull_native, (uint64_t (*)(void))type metadata accessor for ManagedCBPeripheralBeaconInfo);
    sub_10000588C((uint64_t *)&unk_10163AD00);
    uint64_t v38 = swift_allocObject();
    *(_OWORD *)(v38 + 16) = v85;
    int v39 = *(_DWORD *)(isUniquelyReferenced_nonNull_native + v7[9]);
    *(void *)(v38 + 56) = &type metadata for UInt32;
    *(void *)(v38 + 64) = &protocol witness table for UInt32;
    *(_DWORD *)(v38 + 32) = v39;
    uint64_t v89 = String.init(format:_:)();
    unint64_t v41 = v40;
    if (qword_101636F08 != -1) {
      swift_once();
    }
    uint64_t v42 = type metadata accessor for Logger();
    uint64_t v43 = sub_100010324(v42, (uint64_t)qword_10170E858);
    sub_1009E5E9C(isUniquelyReferenced_nonNull_native, (uint64_t)v17, (uint64_t (*)(void))type metadata accessor for ManagedCBPeripheralBeaconInfo);
    sub_1009E5E9C(isUniquelyReferenced_nonNull_native, v27, (uint64_t (*)(void))type metadata accessor for ManagedCBPeripheralBeaconInfo);
    swift_bridgeObjectRetain();
    uint64_t v87 = v43;
    unint64_t v44 = Logger.logObject.getter();
    os_log_type_t v23 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v44, v23))
    {
      uint64_t v45 = swift_slowAlloc();
      uint64_t v84 = swift_slowAlloc();
      v95[0] = v84;
      *(_DWORD *)uint64_t v45 = v80;
      *(void *)(v45 + 4) = 1752392040;
      *(_WORD *)(v45 + 12) = 2081;
      sub_1009E5DA0((unint64_t *)&qword_101638B10, (void (*)(uint64_t))&type metadata accessor for UUID);
      uint64_t v46 = dispatch thunk of CustomStringConvertible.description.getter();
      *(void *)(v45 + 14) = sub_1008FA0F0(v46, v47, v95);
      swift_bridgeObjectRelease();
      sub_1009E5F68((uint64_t)v94, (uint64_t (*)(void))type metadata accessor for ManagedCBPeripheralBeaconInfo);
      *(_WORD *)(v45 + 22) = 2160;
      *(void *)(v45 + 24) = 1752392040;
      *(_WORD *)(v45 + 32) = 2081;
      unint64_t v27 = (unint64_t)v90;
      uint64_t v48 = dispatch thunk of CustomStringConvertible.description.getter();
      *(void *)(v45 + 34) = sub_1008FA0F0(v48, v49, v95);
      swift_bridgeObjectRelease();
      uint64_t v26 = (uint64_t)v81;
      sub_1009E5F68(v27, (uint64_t (*)(void))type metadata accessor for ManagedCBPeripheralBeaconInfo);
      *(_WORD *)(v45 + 42) = 2082;
      swift_bridgeObjectRetain();
      *(void *)(v45 + 44) = sub_1008FA0F0(v89, v41, v95);
      swift_bridgeObjectRelease_n();
      _os_log_impl((void *)&_mh_execute_header, v44, v23, "Process user: %{private,mask.hash}s beacon: %{private,mask.hash}s (vid: %{public}s)", (uint8_t *)v45, 0x34u);
      swift_arrayDestroy();
      id v17 = v94;
      swift_slowDealloc();
      uint64_t isUniquelyReferenced_nonNull_native = (uint64_t)v86;
      swift_slowDealloc();

      if (v21) {
        goto LABEL_30;
      }
    }
    else
    {
      sub_1009E5F68((uint64_t)v17, (uint64_t (*)(void))type metadata accessor for ManagedCBPeripheralBeaconInfo);
      sub_1009E5F68(v27, (uint64_t (*)(void))type metadata accessor for ManagedCBPeripheralBeaconInfo);

      swift_bridgeObjectRelease_n();
      if (v21) {
        goto LABEL_30;
      }
    }
    if ((static UUID.== infix(_:_:)() & 1) == 0)
    {
      id v51 = Logger.logObject.getter();
      os_log_type_t v52 = static os_log_type_t.info.getter();
      if (os_log_type_enabled(v51, v52))
      {
        id v53 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)id v53 = 0;
        uint64_t v54 = v51;
        os_log_type_t v55 = v52;
        uint64_t v56 = "Skipping beacon not belonging to allowed user session";
        goto LABEL_27;
      }
LABEL_28:

      goto LABEL_15;
    }
    uint64_t v50 = v77;
    sub_1009E5E9C(isUniquelyReferenced_nonNull_native, v77, (uint64_t (*)(void))type metadata accessor for ManagedCBPeripheralBeaconInfo);
    if (v78)
    {
      sub_1009E5F68(v50, (uint64_t (*)(void))type metadata accessor for ManagedCBPeripheralBeaconInfo);
      goto LABEL_30;
    }
    BOOL v57 = sub_100DC8398(*(_DWORD *)(v50 + v7[9]), v76);
    sub_1009E5F68(v50, (uint64_t (*)(void))type metadata accessor for ManagedCBPeripheralBeaconInfo);
    if (!v57)
    {
      id v51 = Logger.logObject.getter();
      os_log_type_t v72 = static os_log_type_t.info.getter();
      if (os_log_type_enabled(v51, v72))
      {
        id v53 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)id v53 = 0;
        uint64_t v54 = v51;
        os_log_type_t v55 = v72;
        uint64_t v56 = "Skipping non-allowed vendorId";
LABEL_27:
        _os_log_impl((void *)&_mh_execute_header, v54, v55, v56, v53, 2u);
        unint64_t v27 = (unint64_t)v90;
        swift_slowDealloc();
      }
      goto LABEL_28;
    }
LABEL_30:
    sub_1009E5E9C(isUniquelyReferenced_nonNull_native, v26, (uint64_t (*)(void))type metadata accessor for ManagedCBPeripheralBeaconInfo);
    unint64_t v58 = (char **)(isUniquelyReferenced_nonNull_native + v7[10]);
    id v17 = *v58;
    uint64_t v59 = v58[1];
    char v60 = *(unsigned char *)(isUniquelyReferenced_nonNull_native + v7[12]);
    swift_bridgeObjectRetain();
    uint64_t v8 = v93;
    uint64_t isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v95[0] = (uint64_t)v8;
    unint64_t v27 = sub_10072500C(v26);
    uint64_t v62 = v8[2];
    BOOL v63 = (v61 & 1) == 0;
    uint64_t v64 = v62 + v63;
    if (__OFADD__(v62, v63))
    {
      __break(1u);
LABEL_45:
      __break(1u);
      goto LABEL_46;
    }
    os_log_type_t v23 = v61;
    if (v8[3] >= v64)
    {
      if ((isUniquelyReferenced_nonNull_native & 1) == 0)
      {
        uint64_t v8 = v95;
        sub_100E8609C();
      }
      goto LABEL_36;
    }
    sub_100E755C0(v64, isUniquelyReferenced_nonNull_native);
    uint64_t v8 = (uint64_t *)v95[0];
    uint64_t v65 = sub_10072500C(v26);
    if ((v23 & 1) != (v66 & 1)) {
      break;
    }
    unint64_t v27 = v65;
LABEL_36:
    uint64_t isUniquelyReferenced_nonNull_native = (uint64_t)v86;
    char v93 = (uint64_t *)v95[0];
    if (v23)
    {
      uint64_t v35 = *(void *)(v95[0] + 56) + 24 * v27;
      swift_bridgeObjectRelease();
      *(void *)uint64_t v35 = v17;
      *(void *)(v35 + 8) = v59;
      *(unsigned char *)(v35 + 16) = v60;
    }
    else
    {
      *(void *)(v95[0] + 8 * (v27 >> 6) + 64) |= 1 << v27;
      sub_1009E5E9C(v26, v93[6] + v27 * v88, (uint64_t (*)(void))type metadata accessor for ManagedCBPeripheralBeaconInfo);
      uint64_t v67 = v93;
      uint64_t v68 = v93[7] + 24 * v27;
      *(void *)uint64_t v68 = v17;
      *(void *)(v68 + 8) = v59;
      *(unsigned char *)(v68 + 16) = v60;
      uint64_t v69 = v67[2];
      BOOL v70 = __OFADD__(v69, 1);
      uint64_t v71 = v69 + 1;
      if (v70) {
        goto LABEL_45;
      }
      v67[2] = v71;
    }
    swift_bridgeObjectRelease();
    sub_1009E5F68(v26, (uint64_t (*)(void))type metadata accessor for ManagedCBPeripheralBeaconInfo);
    unint64_t v27 = (unint64_t)v90;
    id v17 = v94;
LABEL_15:
    uint64_t v37 = v91;
    uint64_t v36 = v92;
    sub_1009E5F68(isUniquelyReferenced_nonNull_native, (uint64_t (*)(void))type metadata accessor for ManagedCBPeripheralBeaconInfo);
    uint64_t v33 = v37 + v88;
    uint64_t v31 = v36 - 1;
    if (!v31)
    {
      swift_bridgeObjectRelease();
      return v93;
    }
  }
  uint64_t result = (uint64_t *)KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

uint64_t sub_1009E02E4(uint64_t a1)
{
  v2[5] = a1;
  v2[6] = v1;
  v2[7] = type metadata accessor for BeaconIdentifier();
  v2[8] = swift_task_alloc();
  v2[9] = swift_task_alloc();
  uint64_t v3 = type metadata accessor for ManagedCBPeripheralBeaconInfo();
  v2[10] = v3;
  v2[11] = *(void *)(v3 - 8);
  v2[12] = swift_task_alloc();
  v2[13] = swift_task_alloc();
  v2[14] = swift_task_alloc();
  v2[15] = swift_task_alloc();
  return _swift_task_switch(sub_1009E040C, 0, 0);
}

uint64_t sub_1009E040C()
{
  uint64_t v1 = *(void *)(v0 + 80);
  uint64_t v2 = *(void *)(v0 + 88);
  uint64_t v3 = *(void **)(v0 + 48);
  uint64_t v4 = *(void *)(v0 + 56);
  uint64_t v5 = *(void *)(v0 + 40);
  char v6 = *(unsigned char *)(v5 + 32);
  *(unsigned char *)(v0 + 208) = v6;
  uint64_t v7 = -1;
  uint64_t v8 = -1 << v6;
  if (-(-1 << v6) < 64) {
    uint64_t v7 = ~(-1 << -(char)(-1 << v6));
  }
  unint64_t v9 = v7 & *(void *)(v5 + 64);
  *(void *)(v0 + 128) = _swiftEmptyDictionarySingleton;
  uint64_t v10 = (void *)swift_bridgeObjectRetain();
  if (v9)
  {
    uint64_t v11 = 0;
    unint64_t v12 = __clz(__rbit64(v9));
    uint64_t v13 = (v9 - 1) & v9;
LABEL_5:
    *(void *)(v0 + 136) = v11;
    *(void *)(v0 + 144) = v13;
    uint64_t v15 = *(void *)(v0 + 112);
    uint64_t v14 = *(void *)(v0 + 120);
    uint64_t v16 = *(void *)(v0 + 72);
    uint64_t v17 = v10[6];
    uint64_t v18 = *(void *)(v2 + 72);
    *(void *)(v0 + 152) = v18;
    sub_1009E5E9C(v17 + v18 * v12, v14, (uint64_t (*)(void))type metadata accessor for ManagedCBPeripheralBeaconInfo);
    sub_1009E5F04(v14, v15);
    uint64_t v19 = sub_10001CD44(v3, v3[3]);
    uint64_t v20 = type metadata accessor for UUID();
    *(void *)(v0 + 160) = v20;
    uint64_t v21 = *(void *)(v20 - 8);
    Swift::String v22 = *(void (**)(uint64_t, uint64_t, uint64_t))(v21 + 16);
    *(void *)(v0 + 168) = v22;
    *(void *)(v0 + 176) = (v21 + 16) & 0xFFFFFFFFFFFFLL | 0xE3BA000000000000;
    v22(v16, v15, v20);
    v22(v16 + *(int *)(v4 + 20), v15 + *(int *)(v1 + 20), v20);
    uint64_t v23 = *v19;
    uint64_t v24 = v19[1];
    uint64_t v25 = v19[2];
    uint64_t v26 = (void *)swift_task_alloc();
    *(void *)(v0 + 184) = v26;
    *uint64_t v26 = v0;
    v26[1] = sub_1009E0740;
    uint64_t v27 = *(void *)(v0 + 72);
    return sub_100F4FE98(v27, v23, v24, v25);
  }
  unint64_t v29 = 63 - v8;
  if ((unint64_t)(63 - v8) > 0x7F)
  {
    unint64_t v30 = v10[9];
    if (v30)
    {
      uint64_t v11 = 1;
LABEL_11:
      uint64_t v13 = (v30 - 1) & v30;
      unint64_t v12 = __clz(__rbit64(v30)) + (v11 << 6);
      goto LABEL_5;
    }
    if (v29 >= 0xC0)
    {
      unint64_t v30 = v10[10];
      if (v30)
      {
        uint64_t v11 = 2;
        goto LABEL_11;
      }
      if (v29 >= 0x100)
      {
        unint64_t v30 = v10[11];
        if (v30)
        {
          uint64_t v11 = 3;
          goto LABEL_11;
        }
        if (v29 >= 0x140)
        {
          unint64_t v30 = v10[12];
          if (v30)
          {
            uint64_t v11 = 4;
            goto LABEL_11;
          }
          if (v29 >= 0x180)
          {
            unint64_t v30 = v10[13];
            if (v30)
            {
              uint64_t v11 = 5;
              goto LABEL_11;
            }
            uint64_t v31 = 0;
            uint64_t v32 = v29 >> 6;
            if (v32 <= 6) {
              uint64_t v32 = 6;
            }
            uint64_t v33 = v32 - 6;
            while (v33 != v31)
            {
              unint64_t v30 = v10[v31++ + 14];
              if (v30)
              {
                uint64_t v11 = v31 + 5;
                goto LABEL_11;
              }
            }
          }
        }
      }
    }
  }
  swift_release();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  long long v34 = *(uint64_t (**)(void *))(v0 + 8);
  return v34(_swiftEmptyDictionarySingleton);
}

uint64_t sub_1009E0740(uint64_t a1)
{
  uint64_t v3 = *v2;
  uint64_t v4 = *(void *)(*v2 + 72);
  *(void *)(v3 + 192) = a1;
  *(void *)(v3 + 200) = v1;
  swift_task_dealloc();
  sub_1009E5F68(v4, (uint64_t (*)(void))type metadata accessor for BeaconIdentifier);
  if (v1) {
    uint64_t v5 = sub_1009E0D24;
  }
  else {
    uint64_t v5 = sub_1009E0888;
  }
  return _swift_task_switch(v5, 0, 0);
}

uint64_t sub_1009E0888()
{
  uint64_t v1 = *(void *)(v0 + 128);
  uint64_t v2 = *(void *)(v0 + 104);
  sub_1009E5E9C(*(void *)(v0 + 112), v2, (uint64_t (*)(void))type metadata accessor for ManagedCBPeripheralBeaconInfo);
  int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  *(void *)(v0 + 32) = v1;
  unint64_t v5 = sub_10072500C(v2);
  uint64_t v6 = *(void *)(v1 + 16);
  BOOL v7 = (v4 & 1) == 0;
  uint64_t result = v6 + v7;
  if (__OFADD__(v6, v7))
  {
    __break(1u);
    goto LABEL_39;
  }
  char v9 = v4;
  if (*(void *)(*(void *)(v0 + 128) + 24) >= result)
  {
    if ((isUniquelyReferenced_nonNull_native & 1) == 0) {
      sub_100E86338();
    }
  }
  else
  {
    uint64_t v10 = *(void *)(v0 + 104);
    sub_100E75C64(result, isUniquelyReferenced_nonNull_native);
    uint64_t v11 = sub_10072500C(v10);
    if ((v9 & 1) != (v12 & 1))
    {
      return KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    }
    unint64_t v5 = v11;
  }
  uint64_t v13 = *(void **)(v0 + 32);
  uint64_t v14 = *(void *)(v0 + 192);
  if (v9)
  {
    uint64_t v15 = v13[7];
    swift_bridgeObjectRelease();
    *(void *)(v15 + 8 * v5) = v14;
    goto LABEL_14;
  }
  uint64_t v16 = *(void *)(v0 + 152);
  uint64_t v17 = *(void *)(v0 + 104);
  v13[(v5 >> 6) + 8] |= 1 << v5;
  uint64_t result = sub_1009E5E9C(v17, v13[6] + v16 * v5, (uint64_t (*)(void))type metadata accessor for ManagedCBPeripheralBeaconInfo);
  *(void *)(v13[7] + 8 * v5) = v14;
  uint64_t v18 = v13[2];
  BOOL v19 = __OFADD__(v18, 1);
  uint64_t v20 = v18 + 1;
  if (v19)
  {
LABEL_39:
    __break(1u);
LABEL_40:
    __break(1u);
    goto LABEL_41;
  }
  v13[2] = v20;
LABEL_14:
  uint64_t v22 = *(void *)(v0 + 104);
  uint64_t v21 = *(void *)(v0 + 112);
  swift_bridgeObjectRelease();
  sub_1009E5F68(v22, (uint64_t (*)(void))type metadata accessor for ManagedCBPeripheralBeaconInfo);
  uint64_t result = sub_1009E5F68(v21, (uint64_t (*)(void))type metadata accessor for ManagedCBPeripheralBeaconInfo);
  int64_t v23 = *(void *)(v0 + 136);
  unint64_t v24 = *(void *)(v0 + 144);
  *(void *)(v0 + 128) = v13;
  if (v24)
  {
    uint64_t v25 = (v24 - 1) & v24;
    unint64_t v26 = __clz(__rbit64(v24)) | (v23 << 6);
    uint64_t result = *(void *)(v0 + 40);
LABEL_16:
    *(void *)(v0 + 136) = v23;
    *(void *)(v0 + 144) = v25;
    uint64_t v27 = *(void *)(v0 + 112);
    uint64_t v28 = *(void *)(v0 + 120);
    uint64_t v29 = *(void *)(v0 + 80);
    uint64_t v30 = *(void *)(v0 + 72);
    uint64_t v31 = *(void **)(v0 + 48);
    uint64_t v32 = *(void *)(v0 + 56);
    uint64_t v33 = *(void *)(result + 48);
    uint64_t v34 = *(void *)(*(void *)(v0 + 88) + 72);
    *(void *)(v0 + 152) = v34;
    sub_1009E5E9C(v33 + v34 * v26, v28, (uint64_t (*)(void))type metadata accessor for ManagedCBPeripheralBeaconInfo);
    sub_1009E5F04(v28, v27);
    uint64_t v35 = sub_10001CD44(v31, v31[3]);
    uint64_t v36 = type metadata accessor for UUID();
    *(void *)(v0 + 160) = v36;
    uint64_t v37 = *(void *)(v36 - 8);
    uint64_t v38 = *(void (**)(uint64_t, uint64_t, uint64_t))(v37 + 16);
    *(void *)(v0 + 168) = v38;
    *(void *)(v0 + 176) = (v37 + 16) & 0xFFFFFFFFFFFFLL | 0xE3BA000000000000;
    v38(v30, v27, v36);
    v38(v30 + *(int *)(v32 + 20), v27 + *(int *)(v29 + 20), v36);
    uint64_t v39 = *v35;
    uint64_t v40 = v35[1];
    uint64_t v41 = v35[2];
    uint64_t v42 = (void *)swift_task_alloc();
    *(void *)(v0 + 184) = v42;
    *uint64_t v42 = v0;
    v42[1] = sub_1009E0740;
    uint64_t v43 = *(void *)(v0 + 72);
    return sub_100F4FE98(v43, v39, v40, v41);
  }
  int64_t v44 = v23 + 1;
  if (__OFADD__(v23, 1)) {
    goto LABEL_40;
  }
  int64_t v45 = (unint64_t)((1 << *(unsigned char *)(v0 + 208)) + 63) >> 6;
  uint64_t result = *(void *)(v0 + 40);
  if (v44 < v45)
  {
    uint64_t v46 = result + 64;
    unint64_t v47 = *(void *)(result + 64 + 8 * v44);
    ++v23;
    if (v47)
    {
LABEL_22:
      uint64_t v25 = (v47 - 1) & v47;
      unint64_t v26 = __clz(__rbit64(v47)) + (v23 << 6);
      goto LABEL_16;
    }
    int64_t v23 = v44 + 1;
    if (v44 + 1 < v45)
    {
      unint64_t v47 = *(void *)(v46 + 8 * v23);
      if (v47) {
        goto LABEL_22;
      }
      int64_t v23 = v44 + 2;
      if (v44 + 2 < v45)
      {
        unint64_t v47 = *(void *)(v46 + 8 * v23);
        if (v47) {
          goto LABEL_22;
        }
        int64_t v23 = v44 + 3;
        if (v44 + 3 < v45)
        {
          unint64_t v47 = *(void *)(v46 + 8 * v23);
          if (v47) {
            goto LABEL_22;
          }
          int64_t v48 = v44 + 4;
          if (v48 < v45)
          {
            unint64_t v47 = *(void *)(v46 + 8 * v48);
            if (v47)
            {
              int64_t v23 = v48;
              goto LABEL_22;
            }
            while (1)
            {
              int64_t v23 = v48 + 1;
              if (__OFADD__(v48, 1)) {
                break;
              }
              if (v23 >= v45) {
                goto LABEL_35;
              }
              unint64_t v47 = *(void *)(v46 + 8 * v23);
              ++v48;
              if (v47) {
                goto LABEL_22;
              }
            }
LABEL_41:
            __break(1u);
            return result;
          }
        }
      }
    }
  }
LABEL_35:
  swift_release();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  unint64_t v49 = *(uint64_t (**)(void *))(v0 + 8);
  return v49(v13);
}

uint64_t sub_1009E0D24()
{
  uint64_t v56 = v0;
  if (qword_101636F08 != -1) {
    swift_once();
  }
  uint64_t v1 = *(void *)(v0 + 112);
  uint64_t v2 = *(void *)(v0 + 96);
  uint64_t v3 = type metadata accessor for Logger();
  sub_100010324(v3, (uint64_t)qword_10170E858);
  sub_1009E5E9C(v1, v2, (uint64_t (*)(void))type metadata accessor for ManagedCBPeripheralBeaconInfo);
  swift_errorRetain();
  swift_errorRetain();
  char v4 = Logger.logObject.getter();
  os_log_type_t v5 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v4, v5))
  {
    os_log_type_t type = v5;
    uint64_t v6 = *(void (**)(uint64_t, uint64_t, uint64_t))(v0 + 168);
    uint64_t v7 = *(void *)(v0 + 160);
    uint64_t v54 = *(void *)(v0 + 112);
    log = v4;
    uint64_t v8 = *(void *)(v0 + 96);
    uint64_t v9 = *(void *)(v0 + 80);
    uint64_t v11 = *(void *)(v0 + 56);
    uint64_t v10 = *(void *)(v0 + 64);
    uint64_t v12 = swift_slowAlloc();
    id v51 = (void *)swift_slowAlloc();
    uint64_t v55 = swift_slowAlloc();
    *(_DWORD *)uint64_t v12 = 141558531;
    *(void *)(v12 + 4) = 1752392040;
    *(_WORD *)(v12 + 12) = 2081;
    v6(v10, v8, v7);
    v6(v10 + *(int *)(v11 + 20), v8 + *(int *)(v9 + 20), v7);
    sub_1009E5DA0((unint64_t *)&qword_101638B10, (void (*)(uint64_t))&type metadata accessor for UUID);
    *(void *)(v0 + 16) = dispatch thunk of CustomStringConvertible.description.getter();
    *(void *)(v0 + 24) = v13;
    v14._countAndFlagsBits = 47;
    v14._object = (void *)0xE100000000000000;
    String.append(_:)(v14);
    v15._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v15);
    swift_bridgeObjectRelease();
    uint64_t v16 = *(void *)(v0 + 16);
    unint64_t v17 = *(void *)(v0 + 24);
    sub_1009E5F68(v10, (uint64_t (*)(void))type metadata accessor for BeaconIdentifier);
    *(void *)(v12 + 14) = sub_1008FA0F0(v16, v17, &v55);
    swift_bridgeObjectRelease();
    sub_1009E5F68(v8, (uint64_t (*)(void))type metadata accessor for ManagedCBPeripheralBeaconInfo);
    *(_WORD *)(v12 + 22) = 2114;
    swift_errorRetain();
    uint64_t v18 = _swift_stdlib_bridgeErrorToNSError();
    *(void *)(v12 + 24) = v18;
    *id v51 = v18;
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl((void *)&_mh_execute_header, log, type, "Failed to retrieve keys for %{private,mask.hash}s error %{public}@", (uint8_t *)v12, 0x20u);
    sub_10000588C((uint64_t *)&unk_101638EA0);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    swift_errorRelease();
    uint64_t v19 = v54;
  }
  else
  {
    uint64_t v20 = *(void *)(v0 + 112);
    uint64_t v21 = *(void *)(v0 + 96);

    swift_errorRelease();
    swift_errorRelease();
    sub_1009E5F68(v21, (uint64_t (*)(void))type metadata accessor for ManagedCBPeripheralBeaconInfo);
    swift_errorRelease();
    uint64_t v19 = v20;
  }
  uint64_t result = sub_1009E5F68(v19, (uint64_t (*)(void))type metadata accessor for ManagedCBPeripheralBeaconInfo);
  int64_t v23 = *(void *)(v0 + 136);
  unint64_t v24 = *(void *)(v0 + 144);
  if (v24)
  {
    uint64_t v25 = (v24 - 1) & v24;
    unint64_t v26 = __clz(__rbit64(v24)) | (v23 << 6);
    uint64_t result = *(void *)(v0 + 40);
LABEL_8:
    *(void *)(v0 + 136) = v23;
    *(void *)(v0 + 144) = v25;
    uint64_t v27 = *(void *)(v0 + 112);
    uint64_t v28 = *(void *)(v0 + 120);
    uint64_t v29 = *(void *)(v0 + 80);
    uint64_t v30 = *(void *)(v0 + 72);
    uint64_t v31 = *(void **)(v0 + 48);
    uint64_t v32 = *(void *)(v0 + 56);
    uint64_t v33 = *(void *)(result + 48);
    uint64_t v34 = *(void *)(*(void *)(v0 + 88) + 72);
    *(void *)(v0 + 152) = v34;
    sub_1009E5E9C(v33 + v34 * v26, v28, (uint64_t (*)(void))type metadata accessor for ManagedCBPeripheralBeaconInfo);
    sub_1009E5F04(v28, v27);
    uint64_t v35 = sub_10001CD44(v31, v31[3]);
    uint64_t v36 = type metadata accessor for UUID();
    *(void *)(v0 + 160) = v36;
    uint64_t v37 = *(void *)(v36 - 8);
    uint64_t v38 = *(void (**)(uint64_t, uint64_t, uint64_t))(v37 + 16);
    *(void *)(v0 + 168) = v38;
    *(void *)(v0 + 176) = (v37 + 16) & 0xFFFFFFFFFFFFLL | 0xE3BA000000000000;
    v38(v30, v27, v36);
    v38(v30 + *(int *)(v32 + 20), v27 + *(int *)(v29 + 20), v36);
    uint64_t v39 = *v35;
    uint64_t v40 = v35[1];
    uint64_t v41 = v35[2];
    uint64_t v42 = (void *)swift_task_alloc();
    *(void *)(v0 + 184) = v42;
    *uint64_t v42 = v0;
    v42[1] = sub_1009E0740;
    uint64_t v43 = *(void *)(v0 + 72);
    return sub_100F4FE98(v43, v39, v40, v41);
  }
  int64_t v44 = v23 + 1;
  if (__OFADD__(v23, 1))
  {
    __break(1u);
    goto LABEL_31;
  }
  uint64_t v45 = *(void *)(v0 + 128);
  int64_t v46 = (unint64_t)((1 << *(unsigned char *)(v0 + 208)) + 63) >> 6;
  uint64_t result = *(void *)(v0 + 40);
  if (v44 < v46)
  {
    uint64_t v47 = result + 64;
    unint64_t v48 = *(void *)(result + 64 + 8 * v44);
    ++v23;
    if (v48)
    {
LABEL_14:
      uint64_t v25 = (v48 - 1) & v48;
      unint64_t v26 = __clz(__rbit64(v48)) + (v23 << 6);
      goto LABEL_8;
    }
    int64_t v23 = v44 + 1;
    if (v44 + 1 < v46)
    {
      unint64_t v48 = *(void *)(v47 + 8 * v23);
      if (v48) {
        goto LABEL_14;
      }
      int64_t v23 = v44 + 2;
      if (v44 + 2 < v46)
      {
        unint64_t v48 = *(void *)(v47 + 8 * v23);
        if (v48) {
          goto LABEL_14;
        }
        int64_t v23 = v44 + 3;
        if (v44 + 3 < v46)
        {
          unint64_t v48 = *(void *)(v47 + 8 * v23);
          if (v48) {
            goto LABEL_14;
          }
          int64_t v49 = v44 + 4;
          if (v49 < v46)
          {
            unint64_t v48 = *(void *)(v47 + 8 * v49);
            if (v48)
            {
              int64_t v23 = v49;
              goto LABEL_14;
            }
            while (1)
            {
              int64_t v23 = v49 + 1;
              if (__OFADD__(v49, 1)) {
                break;
              }
              if (v23 >= v46) {
                goto LABEL_27;
              }
              unint64_t v48 = *(void *)(v47 + 8 * v23);
              ++v49;
              if (v48) {
                goto LABEL_14;
              }
            }
LABEL_31:
            __break(1u);
            return result;
          }
        }
      }
    }
  }
LABEL_27:
  swift_release();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v50 = *(uint64_t (**)(uint64_t))(v0 + 8);
  return v50(v45);
}

uint64_t sub_1009E1394(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v4[26] = a3;
  v4[27] = v3;
  v4[24] = a1;
  v4[25] = a2;
  sub_10000588C(&qword_101638CF0);
  v4[28] = swift_task_alloc();
  uint64_t v5 = type metadata accessor for UUID();
  v4[29] = v5;
  v4[30] = *(void *)(v5 - 8);
  v4[31] = swift_task_alloc();
  v4[32] = swift_task_alloc();
  sub_10000588C((uint64_t *)&unk_1016477E0);
  v4[33] = swift_task_alloc();
  uint64_t v6 = type metadata accessor for MACAddress();
  v4[34] = v6;
  v4[35] = *(void *)(v6 - 8);
  v4[36] = swift_task_alloc();
  v4[37] = swift_task_alloc();
  v4[38] = type metadata accessor for BeaconIdentifier();
  v4[39] = swift_task_alloc();
  sub_10000588C((uint64_t *)&unk_101653D40);
  v4[40] = swift_task_alloc();
  uint64_t v7 = sub_10000588C(&qword_10163F7B0);
  v4[41] = v7;
  v4[42] = *(void *)(v7 - 8);
  v4[43] = swift_task_alloc();
  v4[44] = swift_task_alloc();
  v4[45] = swift_task_alloc();
  uint64_t v8 = type metadata accessor for ManagedCBPeripheralBeaconInfo();
  v4[46] = v8;
  v4[47] = *(void *)(v8 - 8);
  v4[48] = swift_task_alloc();
  sub_10000588C(&qword_101654B88);
  v4[49] = swift_task_alloc();
  v4[50] = swift_task_alloc();
  return _swift_task_switch(sub_1009E16AC, 0, 0);
}

uint64_t sub_1009E16AC()
{
  *(void *)(v0 + 168) = _swiftEmptyArrayStorage;
  uint64_t v64 = (void *)(v0 + 160);
  uint64_t v1 = *(void *)(v0 + 200);
  char v2 = *(unsigned char *)(v1 + 32);
  *(unsigned char *)(v0 + 496) = v2;
  uint64_t v3 = 1 << v2;
  if (v3 < 64) {
    uint64_t v4 = ~(-1 << v3);
  }
  else {
    uint64_t v4 = -1;
  }
  unint64_t v5 = v4 & *(void *)(v1 + 64);
  uint64_t v6 = swift_bridgeObjectRetain();
  int64_t v9 = 0;
  while (1)
  {
    if (v5)
    {
      unint64_t v10 = __clz(__rbit64(v5));
      v5 &= v5 - 1;
      unint64_t v11 = v10 | (v9 << 6);
      uint64_t v12 = *(void *)(v0 + 200);
LABEL_8:
      uint64_t v13 = *(void *)(v0 + 392);
      sub_1009E5E9C(*(void *)(v12 + 48) + *(void *)(*(void *)(v0 + 376) + 72) * v11, v13, (uint64_t (*)(void))type metadata accessor for ManagedCBPeripheralBeaconInfo);
      uint64_t v14 = *(void *)(v12 + 56);
      uint64_t v15 = sub_10000588C(&qword_101654B90);
      *(void *)(v13 + *(int *)(v15 + 48)) = *(void *)(v14 + 8 * v11);
      (*(void (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v15 - 8) + 56))(v13, 0, 1, v15);
      swift_bridgeObjectRetain();
      goto LABEL_15;
    }
    int64_t v16 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_56;
    }
    int64_t v17 = (unint64_t)((1 << *(unsigned char *)(v0 + 496)) + 63) >> 6;
    if (v16 >= v17)
    {
      int64_t v20 = v9;
    }
    else
    {
      uint64_t v12 = *(void *)(v0 + 200);
      uint64_t v18 = v12 + 64;
      unint64_t v19 = *(void *)(v12 + 64 + 8 * v16);
      if (v19) {
        goto LABEL_12;
      }
      int64_t v20 = v9 + 1;
      if (v9 + 2 < v17)
      {
        unint64_t v19 = *(void *)(v18 + 8 * (v9 + 2));
        if (v19)
        {
          int64_t v16 = v9 + 2;
LABEL_12:
          unint64_t v5 = (v19 - 1) & v19;
          unint64_t v11 = __clz(__rbit64(v19)) + (v16 << 6);
          int64_t v9 = v16;
          goto LABEL_8;
        }
        int64_t v20 = v9 + 2;
        if (v9 + 3 < v17)
        {
          unint64_t v19 = *(void *)(v18 + 8 * (v9 + 3));
          if (v19)
          {
            int64_t v16 = v9 + 3;
            goto LABEL_12;
          }
          int64_t v16 = v9 + 4;
          int64_t v20 = v9 + 3;
          if (v9 + 4 < v17)
          {
            unint64_t v19 = *(void *)(v18 + 8 * v16);
            if (v19) {
              goto LABEL_12;
            }
            int64_t v20 = v17 - 1;
            int64_t v30 = v17 - 5;
            while (v30 != v9)
            {
              unint64_t v19 = *(void *)(v12 + 104 + 8 * v9++);
              if (v19)
              {
                int64_t v16 = v9 + 4;
                goto LABEL_12;
              }
            }
          }
        }
      }
    }
    uint64_t v21 = *(void *)(v0 + 392);
    uint64_t v22 = sub_10000588C(&qword_101654B90);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v22 - 8) + 56))(v21, 1, 1, v22);
    unint64_t v5 = 0;
    int64_t v9 = v20;
LABEL_15:
    *(void *)(v0 + 408) = v9;
    *(void *)(v0 + 416) = v5;
    uint64_t v23 = *(void *)(v0 + 400);
    sub_10001D608(*(void *)(v0 + 392), v23, &qword_101654B88);
    uint64_t v24 = sub_10000588C(&qword_101654B90);
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v24 - 8) + 48))(v23, 1, v24) == 1) {
      break;
    }
    uint64_t v25 = *(void *)(v0 + 400);
    uint64_t v26 = *(void *)(v0 + 208);
    uint64_t v27 = *(void *)(v25 + *(int *)(v24 + 48));
    sub_1009E5F04(v25, *(void *)(v0 + 384));
    if (*(void *)(v26 + 16))
    {
      uint64_t v28 = sub_10072500C(*(void *)(v0 + 384));
      if (v29)
      {
        uint64_t v33 = (void *)(*(void *)(*(void *)(v0 + 208) + 56) + 24 * v28);
        *(void *)(v0 + 424) = *v33;
        *(void *)(v0 + 432) = v33[1];
        uint64_t v34 = *(void *)(v27 + 16);
        if (v34)
        {
          uint64_t v57 = *(void *)(v27 + 40);
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          uint64_t v58 = v27;
          uint64_t v35 = (unint64_t *)(v27 + 72);
          uint64_t v36 = _swiftEmptyDictionarySingleton;
          while (1)
          {
            uint64_t v62 = v34;
            uint64_t v39 = *(v35 - 1);
            unint64_t v40 = *v35;
            uint64_t v59 = *(v35 - 3);
            unint64_t v60 = *(v35 - 2);
            sub_1000361E0(v59, v60);
            sub_1000361E0(v39, v40);
            swift_bridgeObjectRetain();
            sub_1000361E0(v39, v40);
            uint64_t v41 = Data.subdata(in:)();
            unint64_t v43 = v42;
            uint64_t v61 = v39;
            sub_10001CFB8(v39, v40);
            v63.super.super.Class isa = UInt64._bridgeToObjectiveC()().super.super.isa;
            char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
            *uint64_t v64 = v36;
            unint64_t v45 = sub_100724CDC(v41, v43);
            uint64_t v46 = v36[2];
            BOOL v47 = (v7 & 1) == 0;
            uint64_t v6 = v46 + v47;
            if (__OFADD__(v46, v47)) {
              break;
            }
            char v48 = v7;
            if (v36[3] >= v6)
            {
              if ((isUniquelyReferenced_nonNull_native & 1) == 0) {
                uint64_t v6 = (uint64_t)sub_100E865E8();
              }
            }
            else
            {
              sub_100E762C4(v6, isUniquelyReferenced_nonNull_native);
              uint64_t v6 = sub_100724CDC(v41, v43);
              if ((v48 & 1) != (v7 & 1))
              {
                return KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
              }
              unint64_t v45 = v6;
            }
            int64_t v49 = (void *)*v64;
            if (v48)
            {
              uint64_t v37 = v49[7];
              uint64_t v38 = 8 * v45;

              *(NSNumber *)(v37 + v38) = v63;
            }
            else
            {
              v49[(v45 >> 6) + 8] |= 1 << v45;
              uint64_t v50 = (uint64_t *)(v49[6] + 16 * v45);
              *uint64_t v50 = v41;
              v50[1] = v43;
              *(NSNumber *)(v49[7] + 8 * v45) = v63;
              uint64_t v51 = v49[2];
              BOOL v52 = __OFADD__(v51, 1);
              uint64_t v53 = v51 + 1;
              if (v52) {
                goto LABEL_57;
              }
              v49[2] = v53;
              sub_1000361E0(v41, v43);
            }
            v35 += 6;
            swift_bridgeObjectRelease();
            sub_10001CFB8(v41, v43);
            sub_10001CFB8(v59, v60);
            sub_10001CFB8(v61, v40);
            swift_bridgeObjectRelease();
            uint64_t v36 = v49;
            uint64_t v34 = v62 - 1;
            if (v62 == 1)
            {
              uint64_t v27 = v58;
              swift_bridgeObjectRelease();
              uint64_t v54 = v57;
              goto LABEL_49;
            }
          }
LABEL_56:
          __break(1u);
LABEL_57:
          __break(1u);
        }
        else
        {
          swift_bridgeObjectRetain();
          int64_t v49 = _swiftEmptyDictionarySingleton;
          uint64_t v54 = 1;
LABEL_49:
          *(void *)(v0 + 440) = v49;
          *(void *)(v0 + 448) = v54;
          *(void *)(v0 + 456) = sub_1009DC980(v27);
          swift_bridgeObjectRelease();
          uint64_t v55 = (void *)swift_task_alloc();
          *(void *)(v0 + 464) = v55;
          *uint64_t v55 = v0;
          v55[1] = sub_1009E1DDC;
          uint64_t v56 = *(void *)(v0 + 384);
          v55[15] = *(void *)(v0 + 320);
          v55[16] = v56;
          uint64_t v6 = (uint64_t)sub_1009E4EC0;
          uint64_t v7 = 0;
          uint64_t v8 = 0;
        }
        return _swift_task_switch(v6, v7, v8);
      }
    }
    sub_1009E5F68(*(void *)(v0 + 384), (uint64_t (*)(void))type metadata accessor for ManagedCBPeripheralBeaconInfo);
    uint64_t v6 = swift_bridgeObjectRelease();
  }
  swift_release();
  uint64_t v65 = *(void *)(v0 + 168);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v31 = *(uint64_t (**)(uint64_t))(v0 + 8);
  return v31(v65);
}

uint64_t sub_1009E1DDC()
{
  swift_task_dealloc();
  if (v0)
  {
    swift_errorRelease();
    uint64_t v1 = sub_1009E3810;
  }
  else
  {
    uint64_t v1 = sub_1009E1EF4;
  }
  return _swift_task_switch(v1, 0, 0);
}

uint64_t sub_1009E1EF4()
{
  uint64_t v1 = v0[48];
  char v2 = (uint64_t *)v0[45];
  uint64_t v3 = v0[46];
  uint64_t v5 = v0[39];
  uint64_t v4 = v0[40];
  uint64_t v6 = v0[38];
  uint64_t v8 = v0[29];
  uint64_t v7 = v0[30];
  int64_t v9 = (void *)v0[27];
  (*(void (**)(uint64_t, void, uint64_t, void))(v0[42] + 56))(v4, 0, 1, v0[41]);
  sub_10001D608(v4, (uint64_t)v2, &qword_10163F7B0);
  unint64_t v10 = sub_10001CD44(v9, v9[3]);
  unint64_t v11 = *(void (**)(uint64_t, uint64_t, uint64_t))(v7 + 16);
  v0[59] = v11;
  v11(v5, v1, v8);
  v11(v5 + *(int *)(v6 + 20), v1 + *(int *)(v3 + 20), v8);
  uint64_t v12 = *v2;
  uint64_t v13 = *v10;
  uint64_t v14 = v10[1];
  uint64_t v15 = v10[2];
  int64_t v16 = (void *)swift_task_alloc();
  v0[60] = v16;
  void *v16 = v0;
  v16[1] = sub_1009E2070;
  uint64_t v17 = v0[39];
  return sub_100F509D4((uint64_t)(v0 + 8), v17, 0, v12, v13, v14, v15);
}

uint64_t sub_1009E2070()
{
  uint64_t v2 = *v1;
  *(void *)(*v1 + 488) = v0;
  swift_task_dealloc();
  uint64_t v3 = *(void *)(v2 + 312);
  if (v0)
  {
    swift_errorRelease();
    sub_1009E5F68(v3, (uint64_t (*)(void))type metadata accessor for BeaconIdentifier);
    uint64_t v4 = sub_1009E2F30;
  }
  else
  {
    sub_1009E5F68(v3, (uint64_t (*)(void))type metadata accessor for BeaconIdentifier);
    uint64_t v4 = sub_1009E21E0;
  }
  return _swift_task_switch(v4, 0, 0);
}

uint64_t sub_1009E21E0()
{
  uint64_t v125 = v0;
  sub_10001D608(v0 + 64, v0 + 16, &qword_101654BA0);
  if (*(unsigned char *)(v0 + 16) == 3
    || (uint64_t v1 = *(void *)(v0 + 32),
        unint64_t v2 = *(void *)(v0 + 40),
        sub_1000361E0(v1, v2),
        sub_1009E5FC8(v0 + 64),
        v2 >> 60 == 15))
  {
    sub_10001DAB4(*(void *)(v0 + 360), &qword_10163F7B0);
    uint64_t v3 = 0;
    Class isa = (Class)0xF000000000000000;
  }
  else
  {
    uint64_t v5 = *(void *)(v0 + 272);
    uint64_t v4 = *(void *)(v0 + 280);
    uint64_t v6 = *(void *)(v0 + 264);
    sub_1000361E0(v1, v2);
    MACAddress.init(addressToSanitize:type:)();
    uint64_t v7 = (uint64_t (*)())(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v4 + 48))(v6, 1, v5);
    if (v7 == 1)
    {
      __break(1u);
      return _swift_task_switch(v7, v8, v9);
    }
    uint64_t v11 = *(void *)(v0 + 288);
    uint64_t v10 = *(void *)(v0 + 296);
    uint64_t v12 = *(void *)(v0 + 272);
    uint64_t v13 = *(void (**)(uint64_t, void, uint64_t))(*(void *)(v0 + 280) + 32);
    v13(v11, *(void *)(v0 + 264), v12);
    v13(v10, v11, v12);
    if (qword_101636F08 != -1) {
      swift_once();
    }
    unint64_t v119 = v2;
    uint64_t v15 = *(void *)(v0 + 352);
    uint64_t v14 = *(void *)(v0 + 360);
    uint64_t v16 = type metadata accessor for Logger();
    sub_100010324(v16, (uint64_t)qword_10170E858);
    sub_10001D074(v14, v15, &qword_10163F7B0);
    uint64_t v17 = Logger.logObject.getter();
    os_log_type_t v18 = static os_log_type_t.default.getter();
    BOOL v19 = os_log_type_enabled(v17, v18);
    uint64_t v20 = *(void *)(v0 + 352);
    uint64_t v120 = v1;
    if (v19)
    {
      os_log_type_t typea = v18;
      uint64_t v21 = *(uint64_t **)(v0 + 344);
      uint64_t v22 = (uint8_t *)swift_slowAlloc();
      uint64_t v124 = swift_slowAlloc();
      *(_DWORD *)uint64_t v22 = 136446210;
      sub_10001D074(v20, (uint64_t)v21, &qword_10163F7B0);
      *(void *)(v0 + 128) = 40;
      *(void *)(v0 + 136) = 0xE100000000000000;
      uint64_t v23 = *v21;
      *(void *)(v0 + 144) = 0x7972616D6972702ELL;
      *(void *)(v0 + 152) = 0xE900000000000028;
      *(void *)(v0 + 176) = v23;
      v24._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
      String.append(_:)(v24);
      swift_bridgeObjectRelease();
      v25._countAndFlagsBits = 41;
      v25._object = (void *)0xE100000000000000;
      String.append(_:)(v25);
      String.append(_:)(*(Swift::String *)(v0 + 144));
      swift_bridgeObjectRelease();
      v26._countAndFlagsBits = 8236;
      v26._object = (void *)0xE200000000000000;
      String.append(_:)(v26);
      type metadata accessor for Date();
      sub_1009E5DA0((unint64_t *)&qword_101638DA0, (void (*)(uint64_t))&type metadata accessor for Date);
      v27._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
      String.append(_:)(v27);
      swift_bridgeObjectRelease();
      v28._countAndFlagsBits = 41;
      v28._object = (void *)0xE100000000000000;
      String.append(_:)(v28);
      uint64_t v29 = *(void *)(v0 + 128);
      unint64_t v30 = *(void *)(v0 + 136);
      sub_10001DAB4((uint64_t)v21, &qword_10163F7B0);
      *(void *)(v0 + 184) = sub_1008FA0F0(v29, v30, &v124);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      sub_10001DAB4(v20, &qword_10163F7B0);
      _os_log_impl((void *)&_mh_execute_header, v17, typea, "lastConnectedLEMAC based on latestIndexObserved %{public}s", v22, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      sub_10001DAB4(v20, &qword_10163F7B0);
    }

    uint64_t v31 = *(void *)(v0 + 360);
    uint64_t v32 = *(void *)(v0 + 296);
    uint64_t v34 = *(void *)(v0 + 272);
    uint64_t v33 = *(void *)(v0 + 280);
    uint64_t v35 = Data.init(stringLiteral:)();
    unint64_t v37 = v36;
    uint64_t v38 = MACAddress.data.getter();
    unint64_t v40 = v39;
    *(void *)(v0 + 112) = v35;
    *(void *)(v0 + 120) = v37;
    sub_1000361E0(v35, v37);
    sub_100A42CBC(v38, v40);
    sub_100037A24(v120, v119);
    sub_10001CFB8(v38, v40);
    sub_10001CFB8(v35, v37);
    (*(void (**)(uint64_t, uint64_t))(v33 + 8))(v32, v34);
    sub_10001DAB4(v31, &qword_10163F7B0);
    uint64_t v3 = *(uint64_t **)(v0 + 112);
    Class isa = *(Class *)(v0 + 120);
  }
  uint64_t v41 = *(void (**)(void))(v0 + 472);
  uint64_t v112 = *(void *)(v0 + 448);
  uint64_t v110 = *(void *)(v0 + 440);
  uint64_t v121 = *(void *)(v0 + 432);
  uint64_t typeb = *(void *)(v0 + 424);
  uint64_t v42 = *(void *)(v0 + 384);
  unint64_t v43 = *(int **)(v0 + 368);
  uint64_t v44 = *(void *)(v0 + 248);
  uint64_t v107 = *(void *)(v0 + 256);
  uint64_t v45 = *(void *)(v0 + 232);
  uint64_t v46 = *(void *)(v0 + 224);
  BOOL v47 = *(void **)(v0 + 192);
  v41();
  ((void (*)(uint64_t, uint64_t, uint64_t))v41)(v44, v42 + v43[5], v45);
  sub_10001D074(v42 + v43[6], v46, &qword_101638CF0);
  char v48 = (uint64_t *)(v42 + v43[8]);
  uint64_t v49 = v48[1];
  uint64_t v106 = *v48;
  char v50 = *(unsigned char *)(v42 + v43[11]);
  unsigned __int8 v105 = *(unsigned char *)(v42 + v43[12]);
  sub_10000588C(&qword_10166BD20);
  uint64_t v51 = swift_allocObject();
  *(_OWORD *)(v51 + 16) = xmmword_101347EF0;
  *(void *)(v51 + 32) = v47;
  uint64_t v124 = v51;
  specialized Array._endMutation()();
  id v52 = objc_allocWithZone((Class)SPPeripheral);
  swift_bridgeObjectRetain();
  sub_100037A38((uint64_t)v3, (unint64_t)isa);
  id v53 = v47;
  uint64_t v54 = sub_1009E5A04(v107, v44, v46, v106, v49, v105, typeb, v121, v50, v112, v110, (uint64_t)v3, (unint64_t)isa);
  specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
  if (*(void *)((*(void *)(v0 + 168) & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((*(void *)(v0 + 168) & 0xFFFFFFFFFFFFFF8)
                                                                                      + 0x18) >> 1)
LABEL_66:
    specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
  uint64_t v122 = (uint64_t **)(v0 + 160);
  uint64_t v55 = *(void *)(v0 + 384);
  specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
  specialized Array._endMutation()();

  sub_100037A24((uint64_t)v3, (unint64_t)isa);
  sub_1009E5F68(v55, (uint64_t (*)(void))type metadata accessor for ManagedCBPeripheralBeaconInfo);
  int64_t v56 = *(void *)(v0 + 408);
  unint64_t v57 = *(void *)(v0 + 416);
  uint64_t v3 = &qword_101654B90;
  while (1)
  {
    if (v57)
    {
      unint64_t v58 = __clz(__rbit64(v57));
      v57 &= v57 - 1;
      unint64_t v59 = v58 | (v56 << 6);
      uint64_t v60 = *(void *)(v0 + 200);
LABEL_16:
      uint64_t v61 = *(void *)(v0 + 392);
      sub_1009E5E9C(*(void *)(v60 + 48) + *(void *)(*(void *)(v0 + 376) + 72) * v59, v61, (uint64_t (*)(void))type metadata accessor for ManagedCBPeripheralBeaconInfo);
      uint64_t v62 = *(void *)(v60 + 56);
      uint64_t v63 = sub_10000588C(&qword_101654B90);
      *(void *)(v61 + *(int *)(v63 + 48)) = *(void *)(v62 + 8 * v59);
      (*(void (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v63 - 8) + 56))(v61, 0, 1, v63);
      swift_bridgeObjectRetain();
      goto LABEL_23;
    }
    int64_t v64 = v56 + 1;
    if (__OFADD__(v56, 1))
    {
      __break(1u);
LABEL_64:
      __break(1u);
LABEL_65:
      __break(1u);
      goto LABEL_66;
    }
    int64_t v65 = (unint64_t)((1 << *(unsigned char *)(v0 + 496)) + 63) >> 6;
    if (v64 >= v65)
    {
      int64_t v68 = v56;
    }
    else
    {
      uint64_t v60 = *(void *)(v0 + 200);
      uint64_t v66 = v60 + 64;
      unint64_t v67 = *(void *)(v60 + 64 + 8 * v64);
      if (v67) {
        goto LABEL_20;
      }
      int64_t v68 = v56 + 1;
      if (v56 + 2 < v65)
      {
        unint64_t v67 = *(void *)(v66 + 8 * (v56 + 2));
        if (v67)
        {
          int64_t v64 = v56 + 2;
LABEL_20:
          unint64_t v57 = (v67 - 1) & v67;
          unint64_t v59 = __clz(__rbit64(v67)) + (v64 << 6);
          int64_t v56 = v64;
          goto LABEL_16;
        }
        int64_t v68 = v56 + 2;
        if (v56 + 3 < v65)
        {
          unint64_t v67 = *(void *)(v66 + 8 * (v56 + 3));
          if (v67)
          {
            int64_t v64 = v56 + 3;
            goto LABEL_20;
          }
          int64_t v64 = v56 + 4;
          int64_t v68 = v56 + 3;
          if (v56 + 4 < v65)
          {
            unint64_t v67 = *(void *)(v66 + 8 * v64);
            if (v67) {
              goto LABEL_20;
            }
            int64_t v68 = v65 - 1;
            int64_t v76 = v65 - 5;
            while (v76 != v56)
            {
              unint64_t v67 = *(void *)(v60 + 104 + 8 * v56++);
              if (v67)
              {
                int64_t v64 = v56 + 4;
                goto LABEL_20;
              }
            }
          }
        }
      }
    }
    uint64_t v69 = *(void *)(v0 + 392);
    uint64_t v70 = sub_10000588C(&qword_101654B90);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v70 - 8) + 56))(v69, 1, 1, v70);
    unint64_t v57 = 0;
    int64_t v56 = v68;
LABEL_23:
    *(void *)(v0 + 408) = v56;
    *(void *)(v0 + 416) = v57;
    uint64_t v71 = *(void *)(v0 + 400);
    sub_10001D608(*(void *)(v0 + 392), v71, &qword_101654B88);
    uint64_t v72 = sub_10000588C(&qword_101654B90);
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v72 - 8) + 48))(v71, 1, v72) == 1)
    {
      swift_release();
      uint64_t v123 = *(void *)(v0 + 168);
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      uint64_t v77 = *(uint64_t (**)(uint64_t))(v0 + 8);
      return v77(v123);
    }
    uint64_t v54 = *(void **)(v0 + 208);
    uint64_t v73 = *(void *)(*(void *)(v0 + 400) + *(int *)(v72 + 48));
    sub_1009E5F04(*(void *)(v0 + 400), *(void *)(v0 + 384));
    if (v54[2])
    {
      uint64_t v74 = sub_10072500C(*(void *)(v0 + 384));
      if (v75) {
        break;
      }
    }
    sub_1009E5F68(*(void *)(v0 + 384), (uint64_t (*)(void))type metadata accessor for ManagedCBPeripheralBeaconInfo);
    swift_bridgeObjectRelease();
  }
  uint64_t v79 = (void *)(*(void *)(*(void *)(v0 + 208) + 56) + 24 * v74);
  *(void *)(v0 + 424) = *v79;
  *(void *)(v0 + 432) = v79[1];
  uint64_t v80 = *(void *)(v73 + 16);
  if (v80)
  {
    uint64_t v108 = *(void *)(v73 + 40);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    uint64_t v109 = v73;
    char v81 = (unint64_t *)(v73 + 72);
    uint64_t v3 = _swiftEmptyDictionarySingleton;
    while (1)
    {
      uint64_t v117 = v80;
      uint64_t v84 = *(v81 - 1);
      unint64_t v85 = *v81;
      uint64_t v111 = *(v81 - 3);
      unint64_t v113 = *(v81 - 2);
      sub_1000361E0(v111, v113);
      sub_1000361E0(v84, v85);
      swift_bridgeObjectRetain();
      sub_1000361E0(v84, v85);
      uint64_t v54 = (void *)Data.subdata(in:)();
      unint64_t v87 = v86;
      uint64_t type = v84;
      sub_10001CFB8(v84, v85);
      Class isa = UInt64._bridgeToObjectiveC()().super.super.isa;
      char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      *uint64_t v122 = v3;
      unint64_t v90 = sub_100724CDC((uint64_t)v54, v87);
      uint64_t v91 = v3[2];
      BOOL v92 = (v89 & 1) == 0;
      uint64_t v93 = v91 + v92;
      if (__OFADD__(v91, v92)) {
        goto LABEL_64;
      }
      char v94 = v89;
      if (v3[3] >= v93)
      {
        if ((isUniquelyReferenced_nonNull_native & 1) == 0) {
          sub_100E865E8();
        }
      }
      else
      {
        sub_100E762C4(v93, isUniquelyReferenced_nonNull_native);
        uint64_t v95 = sub_100724CDC((uint64_t)v54, v87);
        if ((v94 & 1) != (v96 & 1))
        {
          return KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
        }
        unint64_t v90 = v95;
      }
      uint64_t v97 = *v122;
      if (v94)
      {
        uint64_t v82 = v97[7];
        uint64_t v83 = 8 * v90;

        *(void *)(v82 + v83) = isa;
      }
      else
      {
        v97[(v90 >> 6) + 8] |= 1 << v90;
        uint64_t v98 = (void *)(v97[6] + 16 * v90);
        *uint64_t v98 = v54;
        v98[1] = v87;
        *(void *)(v97[7] + 8 * v90) = isa;
        uint64_t v99 = v97[2];
        BOOL v100 = __OFADD__(v99, 1);
        uint64_t v101 = v99 + 1;
        if (v100) {
          goto LABEL_65;
        }
        v97[2] = v101;
        sub_1000361E0((uint64_t)v54, v87);
      }
      v81 += 6;
      swift_bridgeObjectRelease();
      sub_10001CFB8((uint64_t)v54, v87);
      sub_10001CFB8(v111, v113);
      sub_10001CFB8(type, v85);
      swift_bridgeObjectRelease();
      uint64_t v3 = v97;
      uint64_t v80 = v117 - 1;
      if (v117 == 1)
      {
        uint64_t v73 = v109;
        swift_bridgeObjectRelease();
        uint64_t v102 = v108;
        goto LABEL_57;
      }
    }
  }
  swift_bridgeObjectRetain();
  uint64_t v97 = _swiftEmptyDictionarySingleton;
  uint64_t v102 = 1;
LABEL_57:
  *(void *)(v0 + 440) = v97;
  *(void *)(v0 + 448) = v102;
  *(void *)(v0 + 456) = sub_1009DC980(v73);
  swift_bridgeObjectRelease();
  uint64_t v103 = (void *)swift_task_alloc();
  *(void *)(v0 + 464) = v103;
  *uint64_t v103 = v0;
  v103[1] = sub_1009E1DDC;
  uint64_t v104 = *(void *)(v0 + 384);
  v103[15] = *(void *)(v0 + 320);
  v103[16] = v104;
  uint64_t v7 = sub_1009E4EC0;
  uint64_t v8 = 0;
  uint64_t v9 = 0;
  return _swift_task_switch(v7, v8, v9);
}

uint64_t sub_1009E2F30()
{
  sub_10001DAB4(*(void *)(v0 + 360), &qword_10163F7B0);
  uint64_t v1 = *(void (**)(uint64_t, uint64_t, uint64_t))(v0 + 472);
  uint64_t v74 = *(void *)(v0 + 448);
  uint64_t v72 = *(void *)(v0 + 440);
  uint64_t v79 = *(void *)(v0 + 432);
  uint64_t v76 = *(void *)(v0 + 424);
  uint64_t v2 = *(void *)(v0 + 384);
  uint64_t v3 = *(int **)(v0 + 368);
  uint64_t v5 = *(void *)(v0 + 248);
  uint64_t v4 = *(void *)(v0 + 256);
  uint64_t v6 = *(void *)(v0 + 232);
  uint64_t v7 = *(void *)(v0 + 224);
  uint64_t v8 = *(void **)(v0 + 192);
  v1(v4, v2, v6);
  v1(v5, v2 + v3[5], v6);
  sub_10001D074(v2 + v3[6], v7, &qword_101638CF0);
  uint64_t v9 = (uint64_t *)(v2 + v3[8]);
  uint64_t v10 = v9[1];
  uint64_t v69 = *v9;
  LOBYTE(v1) = *(unsigned char *)(v2 + v3[11]);
  unsigned __int8 v67 = *(unsigned char *)(v2 + v3[12]);
  sub_10000588C(&qword_10166BD20);
  uint64_t v11 = swift_allocObject();
  *(_OWORD *)(v11 + 16) = xmmword_101347EF0;
  *(void *)(v11 + 32) = v8;
  specialized Array._endMutation()();
  id v12 = objc_allocWithZone((Class)SPPeripheral);
  swift_bridgeObjectRetain();
  sub_100037A38(0, 0xF000000000000000);
  id v13 = v8;
  uint64_t v14 = sub_1009E5A04(v4, v5, v7, v69, v10, v67, v76, v79, (char)v1, v74, v72, 0, 0xF000000000000000);
  specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
  if (*(void *)((*(void *)(v0 + 168) & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((*(void *)(v0 + 168) & 0xFFFFFFFFFFFFFF8)
                                                                                      + 0x18) >> 1)
LABEL_56:
    specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
  uint64_t v80 = (void *)(v0 + 160);
  uint64_t v15 = *(void *)(v0 + 384);
  specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
  specialized Array._endMutation()();

  sub_100037A24(0, 0xF000000000000000);
  sub_1009E5F68(v15, (uint64_t (*)(void))type metadata accessor for ManagedCBPeripheralBeaconInfo);
  int64_t v16 = *(void *)(v0 + 408);
  unint64_t v17 = *(void *)(v0 + 416);
  while (1)
  {
    if (v17)
    {
      unint64_t v18 = __clz(__rbit64(v17));
      v17 &= v17 - 1;
      unint64_t v19 = v18 | (v16 << 6);
      uint64_t v20 = *(void *)(v0 + 200);
LABEL_6:
      uint64_t v21 = *(void *)(v0 + 392);
      sub_1009E5E9C(*(void *)(v20 + 48) + *(void *)(*(void *)(v0 + 376) + 72) * v19, v21, (uint64_t (*)(void))type metadata accessor for ManagedCBPeripheralBeaconInfo);
      uint64_t v22 = *(void *)(v20 + 56);
      uint64_t v23 = sub_10000588C(&qword_101654B90);
      *(void *)(v21 + *(int *)(v23 + 48)) = *(void *)(v22 + 8 * v19);
      (*(void (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v23 - 8) + 56))(v21, 0, 1, v23);
      swift_bridgeObjectRetain();
      goto LABEL_13;
    }
    int64_t v24 = v16 + 1;
    if (__OFADD__(v16, 1))
    {
      __break(1u);
LABEL_54:
      __break(1u);
LABEL_55:
      __break(1u);
      goto LABEL_56;
    }
    int64_t v25 = (unint64_t)((1 << *(unsigned char *)(v0 + 496)) + 63) >> 6;
    if (v24 >= v25)
    {
      int64_t v28 = v16;
    }
    else
    {
      uint64_t v20 = *(void *)(v0 + 200);
      uint64_t v26 = v20 + 64;
      unint64_t v27 = *(void *)(v20 + 64 + 8 * v24);
      if (v27) {
        goto LABEL_10;
      }
      int64_t v28 = v16 + 1;
      if (v16 + 2 < v25)
      {
        unint64_t v27 = *(void *)(v26 + 8 * (v16 + 2));
        if (v27)
        {
          int64_t v24 = v16 + 2;
LABEL_10:
          unint64_t v17 = (v27 - 1) & v27;
          unint64_t v19 = __clz(__rbit64(v27)) + (v24 << 6);
          int64_t v16 = v24;
          goto LABEL_6;
        }
        int64_t v28 = v16 + 2;
        if (v16 + 3 < v25)
        {
          unint64_t v27 = *(void *)(v26 + 8 * (v16 + 3));
          if (v27)
          {
            int64_t v24 = v16 + 3;
            goto LABEL_10;
          }
          int64_t v24 = v16 + 4;
          int64_t v28 = v16 + 3;
          if (v16 + 4 < v25)
          {
            unint64_t v27 = *(void *)(v26 + 8 * v24);
            if (v27) {
              goto LABEL_10;
            }
            int64_t v28 = v25 - 1;
            int64_t v37 = v25 - 5;
            while (v37 != v16)
            {
              unint64_t v27 = *(void *)(v20 + 104 + 8 * v16++);
              if (v27)
              {
                int64_t v24 = v16 + 4;
                goto LABEL_10;
              }
            }
          }
        }
      }
    }
    uint64_t v29 = *(void *)(v0 + 392);
    uint64_t v30 = sub_10000588C(&qword_101654B90);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v30 - 8) + 56))(v29, 1, 1, v30);
    unint64_t v17 = 0;
    int64_t v16 = v28;
LABEL_13:
    *(void *)(v0 + 408) = v16;
    *(void *)(v0 + 416) = v17;
    uint64_t v31 = *(void *)(v0 + 400);
    sub_10001D608(*(void *)(v0 + 392), v31, &qword_101654B88);
    uint64_t v32 = sub_10000588C(&qword_101654B90);
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v32 - 8) + 48))(v31, 1, v32) == 1)
    {
      swift_release();
      uint64_t v81 = *(void *)(v0 + 168);
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      uint64_t v38 = *(uint64_t (**)(uint64_t))(v0 + 8);
      return v38(v81);
    }
    uint64_t v33 = *(void *)(v0 + 400);
    uint64_t v14 = *(void **)(v0 + 208);
    uint64_t v34 = *(void *)(v33 + *(int *)(v32 + 48));
    sub_1009E5F04(v33, *(void *)(v0 + 384));
    if (v14[2])
    {
      uint64_t v35 = sub_10072500C(*(void *)(v0 + 384));
      if (v36) {
        break;
      }
    }
    sub_1009E5F68(*(void *)(v0 + 384), (uint64_t (*)(void))type metadata accessor for ManagedCBPeripheralBeaconInfo);
    swift_bridgeObjectRelease();
  }
  unint64_t v40 = (void *)(*(void *)(*(void *)(v0 + 208) + 56) + 24 * v35);
  *(void *)(v0 + 424) = *v40;
  *(void *)(v0 + 432) = v40[1];
  uint64_t v41 = *(void *)(v34 + 16);
  if (v41)
  {
    uint64_t v68 = *(void *)(v34 + 40);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    uint64_t v70 = v34;
    uint64_t v42 = (unint64_t *)(v34 + 72);
    unint64_t v43 = _swiftEmptyDictionarySingleton;
    while (1)
    {
      uint64_t v77 = v41;
      uint64_t v46 = *(v42 - 1);
      unint64_t v47 = *v42;
      uint64_t v71 = *(v42 - 3);
      unint64_t v73 = *(v42 - 2);
      sub_1000361E0(v71, v73);
      sub_1000361E0(v46, v47);
      swift_bridgeObjectRetain();
      sub_1000361E0(v46, v47);
      uint64_t v48 = Data.subdata(in:)();
      uint64_t v14 = v49;
      uint64_t v75 = v46;
      sub_10001CFB8(v46, v47);
      v78.super.super.Class isa = UInt64._bridgeToObjectiveC()().super.super.isa;
      char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      *uint64_t v80 = v43;
      unint64_t v52 = sub_100724CDC(v48, (uint64_t)v14);
      uint64_t v53 = v43[2];
      BOOL v54 = (v51 & 1) == 0;
      uint64_t v55 = v53 + v54;
      if (__OFADD__(v53, v54)) {
        goto LABEL_54;
      }
      char v56 = v51;
      if (v43[3] >= v55)
      {
        if ((isUniquelyReferenced_nonNull_native & 1) == 0) {
          sub_100E865E8();
        }
      }
      else
      {
        sub_100E762C4(v55, isUniquelyReferenced_nonNull_native);
        uint64_t v57 = sub_100724CDC(v48, (uint64_t)v14);
        if ((v56 & 1) != (v58 & 1))
        {
          return KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
        }
        unint64_t v52 = v57;
      }
      unint64_t v59 = (void *)*v80;
      if (v56)
      {
        uint64_t v44 = v59[7];
        uint64_t v45 = 8 * v52;

        *(NSNumber *)(v44 + v45) = v78;
      }
      else
      {
        v59[(v52 >> 6) + 8] |= 1 << v52;
        uint64_t v60 = (uint64_t *)(v59[6] + 16 * v52);
        uint64_t *v60 = v48;
        v60[1] = (uint64_t)v14;
        *(NSNumber *)(v59[7] + 8 * v52) = v78;
        uint64_t v61 = v59[2];
        BOOL v62 = __OFADD__(v61, 1);
        uint64_t v63 = v61 + 1;
        if (v62) {
          goto LABEL_55;
        }
        v59[2] = v63;
        sub_1000361E0(v48, (unint64_t)v14);
      }
      v42 += 6;
      swift_bridgeObjectRelease();
      sub_10001CFB8(v48, (unint64_t)v14);
      sub_10001CFB8(v71, v73);
      sub_10001CFB8(v75, v47);
      swift_bridgeObjectRelease();
      unint64_t v43 = v59;
      uint64_t v41 = v77 - 1;
      if (v77 == 1)
      {
        uint64_t v34 = v70;
        swift_bridgeObjectRelease();
        uint64_t v64 = v68;
        goto LABEL_47;
      }
    }
  }
  swift_bridgeObjectRetain();
  unint64_t v59 = _swiftEmptyDictionarySingleton;
  uint64_t v64 = 1;
LABEL_47:
  *(void *)(v0 + 440) = v59;
  *(void *)(v0 + 448) = v64;
  *(void *)(v0 + 456) = sub_1009DC980(v34);
  swift_bridgeObjectRelease();
  int64_t v65 = (void *)swift_task_alloc();
  *(void *)(v0 + 464) = v65;
  *int64_t v65 = v0;
  v65[1] = sub_1009E1DDC;
  uint64_t v66 = *(void *)(v0 + 384);
  v65[15] = *(void *)(v0 + 320);
  v65[16] = v66;
  return _swift_task_switch(sub_1009E4EC0, 0, 0);
}

uint64_t sub_1009E3810()
{
  uint64_t v1 = *(void *)(v0 + 320);
  uint64_t v2 = *(void *)(v0 + 240);
  (*(void (**)(uint64_t, uint64_t, uint64_t, void))(*(void *)(v0 + 336) + 56))(v1, 1, 1, *(void *)(v0 + 328));
  sub_10001DAB4(v1, (uint64_t *)&unk_101653D40);
  uint64_t v3 = *(void (**)(uint64_t, uint64_t, uint64_t))(v2 + 16);
  uint64_t v76 = *(void *)(v0 + 448);
  uint64_t v74 = *(void *)(v0 + 440);
  uint64_t v81 = *(void *)(v0 + 432);
  uint64_t v78 = *(void *)(v0 + 424);
  uint64_t v4 = *(void *)(v0 + 384);
  uint64_t v5 = *(int **)(v0 + 368);
  uint64_t v7 = *(void *)(v0 + 248);
  uint64_t v6 = *(void *)(v0 + 256);
  uint64_t v8 = *(void *)(v0 + 232);
  uint64_t v9 = *(void *)(v0 + 224);
  uint64_t v10 = *(void **)(v0 + 192);
  v3(v6, v4, v8);
  v3(v7, v4 + v5[5], v8);
  sub_10001D074(v4 + v5[6], v9, &qword_101638CF0);
  uint64_t v11 = (uint64_t *)(v4 + v5[8]);
  uint64_t v12 = v11[1];
  uint64_t v71 = *v11;
  LOBYTE(v3) = *(unsigned char *)(v4 + v5[11]);
  unsigned __int8 v69 = *(unsigned char *)(v4 + v5[12]);
  sub_10000588C(&qword_10166BD20);
  uint64_t v13 = swift_allocObject();
  *(_OWORD *)(v13 + 16) = xmmword_101347EF0;
  *(void *)(v13 + 32) = v10;
  specialized Array._endMutation()();
  id v14 = objc_allocWithZone((Class)SPPeripheral);
  swift_bridgeObjectRetain();
  sub_100037A38(0, 0xF000000000000000);
  id v15 = v10;
  int64_t v16 = sub_1009E5A04(v6, v7, v9, v71, v12, v69, v78, v81, (char)v3, v76, v74, 0, 0xF000000000000000);
  specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
  if (*(void *)((*(void *)(v0 + 168) & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((*(void *)(v0 + 168) & 0xFFFFFFFFFFFFFF8)
                                                                                      + 0x18) >> 1)
LABEL_56:
    specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
  uint64_t v82 = (void *)(v0 + 160);
  uint64_t v17 = *(void *)(v0 + 384);
  specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
  specialized Array._endMutation()();

  sub_100037A24(0, 0xF000000000000000);
  sub_1009E5F68(v17, (uint64_t (*)(void))type metadata accessor for ManagedCBPeripheralBeaconInfo);
  int64_t v18 = *(void *)(v0 + 408);
  unint64_t v19 = *(void *)(v0 + 416);
  while (1)
  {
    if (v19)
    {
      unint64_t v20 = __clz(__rbit64(v19));
      v19 &= v19 - 1;
      unint64_t v21 = v20 | (v18 << 6);
      uint64_t v22 = *(void *)(v0 + 200);
LABEL_6:
      uint64_t v23 = *(void *)(v0 + 392);
      sub_1009E5E9C(*(void *)(v22 + 48) + *(void *)(*(void *)(v0 + 376) + 72) * v21, v23, (uint64_t (*)(void))type metadata accessor for ManagedCBPeripheralBeaconInfo);
      uint64_t v24 = *(void *)(v22 + 56);
      uint64_t v25 = sub_10000588C(&qword_101654B90);
      *(void *)(v23 + *(int *)(v25 + 48)) = *(void *)(v24 + 8 * v21);
      (*(void (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v25 - 8) + 56))(v23, 0, 1, v25);
      swift_bridgeObjectRetain();
      goto LABEL_13;
    }
    int64_t v26 = v18 + 1;
    if (__OFADD__(v18, 1))
    {
      __break(1u);
LABEL_54:
      __break(1u);
LABEL_55:
      __break(1u);
      goto LABEL_56;
    }
    int64_t v27 = (unint64_t)((1 << *(unsigned char *)(v0 + 496)) + 63) >> 6;
    if (v26 >= v27)
    {
      int64_t v30 = v18;
    }
    else
    {
      uint64_t v22 = *(void *)(v0 + 200);
      uint64_t v28 = v22 + 64;
      unint64_t v29 = *(void *)(v22 + 64 + 8 * v26);
      if (v29) {
        goto LABEL_10;
      }
      int64_t v30 = v18 + 1;
      if (v18 + 2 < v27)
      {
        unint64_t v29 = *(void *)(v28 + 8 * (v18 + 2));
        if (v29)
        {
          int64_t v26 = v18 + 2;
LABEL_10:
          unint64_t v19 = (v29 - 1) & v29;
          unint64_t v21 = __clz(__rbit64(v29)) + (v26 << 6);
          int64_t v18 = v26;
          goto LABEL_6;
        }
        int64_t v30 = v18 + 2;
        if (v18 + 3 < v27)
        {
          unint64_t v29 = *(void *)(v28 + 8 * (v18 + 3));
          if (v29)
          {
            int64_t v26 = v18 + 3;
            goto LABEL_10;
          }
          int64_t v26 = v18 + 4;
          int64_t v30 = v18 + 3;
          if (v18 + 4 < v27)
          {
            unint64_t v29 = *(void *)(v28 + 8 * v26);
            if (v29) {
              goto LABEL_10;
            }
            int64_t v30 = v27 - 1;
            int64_t v39 = v27 - 5;
            while (v39 != v18)
            {
              unint64_t v29 = *(void *)(v22 + 104 + 8 * v18++);
              if (v29)
              {
                int64_t v26 = v18 + 4;
                goto LABEL_10;
              }
            }
          }
        }
      }
    }
    uint64_t v31 = *(void *)(v0 + 392);
    uint64_t v32 = sub_10000588C(&qword_101654B90);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v32 - 8) + 56))(v31, 1, 1, v32);
    unint64_t v19 = 0;
    int64_t v18 = v30;
LABEL_13:
    *(void *)(v0 + 408) = v18;
    *(void *)(v0 + 416) = v19;
    uint64_t v33 = *(void *)(v0 + 400);
    sub_10001D608(*(void *)(v0 + 392), v33, &qword_101654B88);
    uint64_t v34 = sub_10000588C(&qword_101654B90);
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v34 - 8) + 48))(v33, 1, v34) == 1)
    {
      swift_release();
      uint64_t v83 = *(void *)(v0 + 168);
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      unint64_t v40 = *(uint64_t (**)(uint64_t))(v0 + 8);
      return v40(v83);
    }
    uint64_t v35 = *(void *)(v0 + 400);
    int64_t v16 = *(void **)(v0 + 208);
    uint64_t v36 = *(void *)(v35 + *(int *)(v34 + 48));
    sub_1009E5F04(v35, *(void *)(v0 + 384));
    if (v16[2])
    {
      uint64_t v37 = sub_10072500C(*(void *)(v0 + 384));
      if (v38) {
        break;
      }
    }
    sub_1009E5F68(*(void *)(v0 + 384), (uint64_t (*)(void))type metadata accessor for ManagedCBPeripheralBeaconInfo);
    swift_bridgeObjectRelease();
  }
  uint64_t v42 = (void *)(*(void *)(*(void *)(v0 + 208) + 56) + 24 * v37);
  *(void *)(v0 + 424) = *v42;
  *(void *)(v0 + 432) = v42[1];
  uint64_t v43 = *(void *)(v36 + 16);
  if (v43)
  {
    uint64_t v70 = *(void *)(v36 + 40);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    uint64_t v72 = v36;
    uint64_t v44 = (unint64_t *)(v36 + 72);
    uint64_t v45 = _swiftEmptyDictionarySingleton;
    while (1)
    {
      uint64_t v79 = v43;
      uint64_t v48 = *(v44 - 1);
      unint64_t v49 = *v44;
      uint64_t v73 = *(v44 - 3);
      unint64_t v75 = *(v44 - 2);
      sub_1000361E0(v73, v75);
      sub_1000361E0(v48, v49);
      swift_bridgeObjectRetain();
      sub_1000361E0(v48, v49);
      uint64_t v50 = Data.subdata(in:)();
      int64_t v16 = v51;
      uint64_t v77 = v48;
      sub_10001CFB8(v48, v49);
      v80.super.super.Class isa = UInt64._bridgeToObjectiveC()().super.super.isa;
      char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      *uint64_t v82 = v45;
      unint64_t v54 = sub_100724CDC(v50, (uint64_t)v16);
      uint64_t v55 = v45[2];
      BOOL v56 = (v53 & 1) == 0;
      uint64_t v57 = v55 + v56;
      if (__OFADD__(v55, v56)) {
        goto LABEL_54;
      }
      char v58 = v53;
      if (v45[3] >= v57)
      {
        if ((isUniquelyReferenced_nonNull_native & 1) == 0) {
          sub_100E865E8();
        }
      }
      else
      {
        sub_100E762C4(v57, isUniquelyReferenced_nonNull_native);
        uint64_t v59 = sub_100724CDC(v50, (uint64_t)v16);
        if ((v58 & 1) != (v60 & 1))
        {
          return KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
        }
        unint64_t v54 = v59;
      }
      uint64_t v61 = (void *)*v82;
      if (v58)
      {
        uint64_t v46 = v61[7];
        uint64_t v47 = 8 * v54;

        *(NSNumber *)(v46 + v47) = v80;
      }
      else
      {
        v61[(v54 >> 6) + 8] |= 1 << v54;
        BOOL v62 = (uint64_t *)(v61[6] + 16 * v54);
        *BOOL v62 = v50;
        v62[1] = (uint64_t)v16;
        *(NSNumber *)(v61[7] + 8 * v54) = v80;
        uint64_t v63 = v61[2];
        BOOL v64 = __OFADD__(v63, 1);
        uint64_t v65 = v63 + 1;
        if (v64) {
          goto LABEL_55;
        }
        void v61[2] = v65;
        sub_1000361E0(v50, (unint64_t)v16);
      }
      v44 += 6;
      swift_bridgeObjectRelease();
      sub_10001CFB8(v50, (unint64_t)v16);
      sub_10001CFB8(v73, v75);
      sub_10001CFB8(v77, v49);
      swift_bridgeObjectRelease();
      uint64_t v45 = v61;
      uint64_t v43 = v79 - 1;
      if (v79 == 1)
      {
        uint64_t v36 = v72;
        swift_bridgeObjectRelease();
        uint64_t v66 = v70;
        goto LABEL_47;
      }
    }
  }
  swift_bridgeObjectRetain();
  uint64_t v61 = _swiftEmptyDictionarySingleton;
  uint64_t v66 = 1;
LABEL_47:
  *(void *)(v0 + 440) = v61;
  *(void *)(v0 + 448) = v66;
  *(void *)(v0 + 456) = sub_1009DC980(v36);
  swift_bridgeObjectRelease();
  unsigned __int8 v67 = (void *)swift_task_alloc();
  *(void *)(v0 + 464) = v67;
  *unsigned __int8 v67 = v0;
  v67[1] = sub_1009E1DDC;
  uint64_t v68 = *(void *)(v0 + 384);
  v67[15] = *(void *)(v0 + 320);
  v67[16] = v68;
  return _swift_task_switch(sub_1009E4EC0, 0, 0);
}

id sub_1009E4118(void *a1, void *a2)
{
  uint64_t v4 = sub_10000588C(&qword_101638CF0);
  __chkstk_darwin(v4 - 8);
  uint64_t v46 = &v44[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v47 = type metadata accessor for UUID();
  uint64_t v6 = *(void *)(v47 - 8);
  uint64_t v7 = __chkstk_darwin(v47);
  uint64_t v9 = &v44[-((v8 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __chkstk_darwin(v7);
  uint64_t v11 = &v44[-v10];
  id v12 = [a1 allowedSessions];
  sub_10001D4B0(0, (unint64_t *)&unk_10166BF80);
  unint64_t v13 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  id v14 = (void *)sub_101159F34(v13);
  swift_bridgeObjectRelease();
  id v15 = [a2 allowedSessions];
  unint64_t v16 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  unint64_t v17 = sub_101159F34(v16);
  swift_bridgeObjectRelease();
  sub_1009DD914(v17, v14, (unint64_t *)&unk_10166BF80, (uint64_t)SPCBPeripheralManagerSessionKey_ptr, &qword_10164C940, (void (*)(id *, id))sub_100DD30E8);
  uint64_t v48 = sub_1007112F8(v18);
  swift_bridgeObjectRelease();
  id v19 = [a1 userIdentifier];
  unint64_t v49 = v11;
  static UUID._unconditionallyBridgeFromObjectiveC(_:)();

  id v20 = [a1 beaconIdentifier];
  uint64_t v50 = v9;
  static UUID._unconditionallyBridgeFromObjectiveC(_:)();

  id v21 = [a1 groupIdentifier];
  if (v21)
  {
    uint64_t v22 = v21;
    uint64_t v23 = v46;
    static UUID._unconditionallyBridgeFromObjectiveC(_:)();

    uint64_t v24 = 0;
  }
  else
  {
    uint64_t v24 = 1;
    uint64_t v23 = v46;
  }
  (*(void (**)(unsigned char *, uint64_t, uint64_t, uint64_t))(v6 + 56))(v23, v24, 1, v47);
  id v25 = [a1 name];
  uint64_t v26 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v46 = v27;
  uint64_t v47 = v26;

  unsigned int v45 = [a1 partIdentifier];
  id v28 = [a1 serialNumber];
  uint64_t v29 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v31 = v30;

  char v32 = [a1 managedByFindMy];
  id v33 = [a1 primaryIndex];
  id v34 = [a1 ltkIndexMap];
  sub_10001D4B0(0, (unint64_t *)&qword_10164DC40);
  sub_100416588();
  uint64_t v35 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)();

  id v36 = [a1 lastConnectedLEMAC];
  if (v36)
  {
    uint64_t v37 = v36;
    uint64_t v38 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
    unint64_t v40 = v39;
  }
  else
  {
    uint64_t v38 = 0;
    unint64_t v40 = 0xF000000000000000;
  }
  id v41 = [a1 keyAddressPairs];
  sub_10001D4B0(0, &qword_101654B70);
  static Array._unconditionallyBridgeFromObjectiveC(_:)();

  id v42 = objc_allocWithZone((Class)SPPeripheral);
  return sub_1009E5A04((uint64_t)v49, (uint64_t)v50, (uint64_t)v23, v47, (uint64_t)v46, v45, v29, v31, v32, (uint64_t)v33, v35, v38, v40);
}

uint64_t sub_1009E45A4(uint64_t a1, int a2)
{
  *(_DWORD *)(v2 + 32) = a2;
  *(void *)(v2 + 24) = a1;
  return _swift_task_switch(sub_1009E45C8, 0, 0);
}

uint64_t sub_1009E45C8()
{
  uint64_t v12 = v0;
  if (qword_101636F08 != -1) {
    swift_once();
  }
  uint64_t v1 = type metadata accessor for Logger();
  sub_100010324(v1, (uint64_t)qword_10170E858);
  swift_bridgeObjectRetain_n();
  uint64_t v2 = Logger.logObject.getter();
  os_log_type_t v3 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v2, v3))
  {
    int v10 = *(_DWORD *)(v0 + 32);
    uint64_t v4 = swift_slowAlloc();
    uint64_t v11 = swift_slowAlloc();
    *(_DWORD *)uint64_t v4 = 136315394;
    swift_bridgeObjectRetain();
    uint64_t v5 = Dictionary.description.getter();
    unint64_t v7 = v6;
    swift_bridgeObjectRelease();
    *(void *)(v0 + 16) = sub_1008FA0F0(v5, v7, &v11);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease_n();
    *(_WORD *)(v4 + 12) = 1024;
    *(_DWORD *)(v0 + 16) = v10;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl((void *)&_mh_execute_header, v2, v3, "TRACE: leechScannerDiscovered: %s rssi: %d", (uint8_t *)v4, 0x12u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    swift_bridgeObjectRelease_n();
  }

  uint64_t v8 = *(uint64_t (**)(void))(v0 + 8);
  return v8();
}

uint64_t sub_1009E4810(uint64_t a1)
{
  v1[3] = a1;
  uint64_t v2 = sub_10000588C(&qword_10163D210);
  v1[4] = v2;
  v1[5] = *(void *)(v2 - 8);
  v1[6] = swift_task_alloc();
  return _swift_task_switch(sub_1009E48D4, 0, 0);
}

uint64_t sub_1009E48D4()
{
  uint64_t v18 = v0;
  if (qword_101636F08 != -1) {
    swift_once();
  }
  uint64_t v1 = v0[3];
  uint64_t v3 = v0[5];
  uint64_t v2 = v0[6];
  uint64_t v4 = v0[4];
  uint64_t v5 = type metadata accessor for Logger();
  sub_100010324(v5, (uint64_t)qword_10170E858);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v3 + 16))(v2, v1, v4);
  unint64_t v6 = Logger.logObject.getter();
  os_log_type_t v7 = static os_log_type_t.debug.getter();
  BOOL v8 = os_log_type_enabled(v6, v7);
  uint64_t v10 = v0[5];
  uint64_t v9 = v0[6];
  uint64_t v11 = v0[4];
  if (v8)
  {
    uint64_t v12 = (uint8_t *)swift_slowAlloc();
    uint64_t v17 = swift_slowAlloc();
    *(_DWORD *)uint64_t v12 = 136315138;
    sub_100062734(&qword_10163B810, &qword_10163D210);
    uint64_t v13 = dispatch thunk of CustomStringConvertible.description.getter();
    v0[2] = sub_1008FA0F0(v13, v14, &v17);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    (*(void (**)(uint64_t, uint64_t))(v10 + 8))(v9, v11);
    _os_log_impl((void *)&_mh_execute_header, v6, v7, "TRACE: pairPencil: %s", v12, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    (*(void (**)(void, void))(v10 + 8))(v0[6], v0[4]);
  }

  swift_task_dealloc();
  id v15 = (uint64_t (*)(void))v0[1];
  return v15();
}

uint64_t sub_1009E4B30(uint64_t a1)
{
  v1[3] = a1;
  uint64_t v2 = sub_10000588C(&qword_10163D210);
  v1[4] = v2;
  v1[5] = *(void *)(v2 - 8);
  v1[6] = swift_task_alloc();
  return _swift_task_switch(sub_1009E4BF4, 0, 0);
}

uint64_t sub_1009E4BF4()
{
  uint64_t v18 = v0;
  if (qword_101636F08 != -1) {
    swift_once();
  }
  uint64_t v1 = v0[3];
  uint64_t v3 = v0[5];
  uint64_t v2 = v0[6];
  uint64_t v4 = v0[4];
  uint64_t v5 = type metadata accessor for Logger();
  sub_100010324(v5, (uint64_t)qword_10170E858);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v3 + 16))(v2, v1, v4);
  unint64_t v6 = Logger.logObject.getter();
  os_log_type_t v7 = static os_log_type_t.debug.getter();
  BOOL v8 = os_log_type_enabled(v6, v7);
  uint64_t v10 = v0[5];
  uint64_t v9 = v0[6];
  uint64_t v11 = v0[4];
  if (v8)
  {
    uint64_t v12 = (uint8_t *)swift_slowAlloc();
    uint64_t v17 = swift_slowAlloc();
    *(_DWORD *)uint64_t v12 = 136315138;
    sub_100062734(&qword_10163B810, &qword_10163D210);
    uint64_t v13 = dispatch thunk of CustomStringConvertible.description.getter();
    v0[2] = sub_1008FA0F0(v13, v14, &v17);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    (*(void (**)(uint64_t, uint64_t))(v10 + 8))(v9, v11);
    _os_log_impl((void *)&_mh_execute_header, v6, v7, "TRACE: unpairPencil: %s", v12, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    (*(void (**)(void, void))(v10 + 8))(v0[6], v0[4]);
  }

  swift_task_dealloc();
  id v15 = (uint64_t (*)(void))v0[1];
  return v15();
}

uint64_t sub_1009E4E50()
{
  uint64_t v0 = type metadata accessor for UUID();
  sub_10001E384(v0, qword_101654AF0);
  sub_100010324(v0, (uint64_t)qword_101654AF0);
  return sub_100DC5FC0(0);
}

uint64_t sub_1009E4EA0(uint64_t a1, uint64_t a2)
{
  *(void *)(v2 + 120) = a1;
  *(void *)(v2 + 128) = a2;
  return _swift_task_switch(sub_1009E4EC0, 0, 0);
}

uint64_t sub_1009E4EC0()
{
  if (qword_1016375E8 != -1) {
    swift_once();
  }
  swift_beginAccess();
  uint64_t result = sub_10001D074((uint64_t)&xmmword_10166E8F0, v0 + 56, (uint64_t *)&unk_101638D30);
  if (*(void *)(v0 + 80))
  {
    sub_10001CEB0((long long *)(v0 + 56), v0 + 16);
    sub_10001CD44((void *)(v0 + 16), *(void *)(v0 + 40));
    uint64_t v3 = (uint64_t (__cdecl *)())((char *)&dword_101639138 + dword_101639138);
    uint64_t v2 = (void *)swift_task_alloc();
    *(void *)(v0 + 136) = v2;
    *uint64_t v2 = v0;
    v2[1] = sub_1009E4FFC;
    return v3();
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_1009E4FFC(uint64_t a1)
{
  *(void *)(*(void *)v1 + 144) = a1;
  swift_task_dealloc();
  return _swift_task_switch(sub_1009E50FC, 0, 0);
}

uint64_t sub_1009E50FC()
{
  uint64_t v1 = (uint64_t)(v0 + 2);
  if (v0[18])
  {
    uint64_t v2 = v0[16];
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v1);
    uint64_t v3 = type metadata accessor for ManagedCBPeripheralBeaconInfo();
    uint64_t v4 = v2 + *(int *)(v3 + 20);
    uint64_t v5 = v2 + *(int *)(v3 + 28);
    unint64_t v6 = (void *)swift_task_alloc();
    v0[19] = v6;
    *unint64_t v6 = v0;
    v6[1] = sub_1009E52FC;
    uint64_t v7 = v0[15];
    return sub_1011044F4(v7, v4, v5);
  }
  else
  {
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v1);
    if (qword_101636F08 != -1) {
      swift_once();
    }
    uint64_t v9 = type metadata accessor for Logger();
    sub_100010324(v9, (uint64_t)qword_10170E858);
    uint64_t v10 = Logger.logObject.getter();
    os_log_type_t v11 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v10, v11))
    {
      uint64_t v12 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v12 = 0;
      _os_log_impl((void *)&_mh_execute_header, v10, v11, "No ObservationStoreService available!", v12, 2u);
      swift_slowDealloc();
    }

    sub_10001CEC8();
    swift_allocError();
    void *v13 = 0xD000000000000017;
    v13[1] = 0x80000001013FB7A0;
    swift_willThrow();
    unint64_t v14 = (uint64_t (*)(void))v0[1];
    return v14();
  }
}

uint64_t sub_1009E52FC()
{
  swift_task_dealloc();
  return _swift_task_switch(sub_1009E53F8, 0, 0);
}

uint64_t sub_1009E53F8()
{
  swift_release();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_1009E545C(uint64_t a1)
{
  uint64_t v3 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v3;
  *uint64_t v3 = v1;
  v3[1] = sub_10001C878;
  return sub_1009DDBCC(a1);
}

uint64_t sub_1009E54F0(uint64_t a1, int a2)
{
  uint64_t v5 = swift_task_alloc();
  *(void *)(v2 + 16) = v5;
  *(void *)uint64_t v5 = v2;
  *(void *)(v5 + 8) = sub_10001D2E4;
  *(_DWORD *)(v5 + 32) = a2;
  *(void *)(v5 + 24) = a1;
  return _swift_task_switch(sub_1009E45C8, 0, 0);
}

uint64_t sub_1009E55A4(uint64_t a1)
{
  uint64_t v3 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v3;
  *uint64_t v3 = v1;
  v3[1] = sub_100030F18;
  return sub_1009E4810(a1);
}

uint64_t sub_1009E5638(uint64_t a1)
{
  uint64_t v3 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v3;
  *uint64_t v3 = v1;
  v3[1] = sub_1000340BC;
  return sub_1009E4B30(a1);
}

Swift::Int sub_1009E56CC()
{
  return Hasher._finalize()();
}

uint64_t sub_1009E5724()
{
  return String.hash(into:)();
}

Swift::Int sub_1009E5740()
{
  return Hasher._finalize()();
}

uint64_t sub_1009E5794@<X0>(Swift::String *a1@<X0>, BOOL *a2@<X8>)
{
  Swift::Int v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_1015A5518, *a1);
  uint64_t result = swift_bridgeObjectRelease();
  *a2 = v3 != 0;
  return result;
}

void sub_1009E57E8(void *a1@<X8>)
{
  *a1 = 0xD000000000000027;
  a1[1] = 0x80000001013F10F0;
}

Swift::Int sub_1009E5808()
{
  return Hasher._finalize()();
}

uint64_t sub_1009E58B8()
{
  return dispatch thunk of Hashable.hash(into:)();
}

Swift::Int sub_1009E5958()
{
  return Hasher._finalize()();
}

id sub_1009E5A04(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, unsigned __int8 a6, uint64_t a7, uint64_t a8, char a9, uint64_t a10, uint64_t a11, uint64_t a12, unint64_t a13)
{
  v30.super.Class isa = UUID._bridgeToObjectiveC()().super.isa;
  uint64_t v33 = a2;
  v29.super.Class isa = UUID._bridgeToObjectiveC()().super.isa;
  uint64_t v15 = type metadata accessor for UUID();
  uint64_t v16 = *(void *)(v15 - 8);
  Class isa = 0;
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v16 + 48))(a3, 1, v15) != 1)
  {
    Class isa = UUID._bridgeToObjectiveC()().super.isa;
    (*(void (**)(uint64_t, uint64_t))(v16 + 8))(a3, v15);
  }
  uint64_t v27 = v16;
  NSString v18 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  NSString v28 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  sub_10001D4B0(0, (unint64_t *)&qword_10164DC40);
  sub_100416588();
  v19.super.Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  Class v20 = 0;
  if (a13 >> 60 != 15)
  {
    Class v20 = Data._bridgeToObjectiveC()().super.isa;
    sub_100037A24(a12, a13);
  }
  sub_10001D4B0(0, (unint64_t *)&unk_10166BF80);
  Class v21 = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  sub_10001D4B0(0, &qword_101654B70);
  Class v22 = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  LOBYTE(v26) = a9 & 1;
  id v23 = [v32 initWithUserIdentifier:v30.super.isa beaconIdentifier:v29.super.isa groupIdentifier:isa name:v18 partIdentifier:a6 serialNumber:v28 managedByFindMy:v26 primaryIndex:a10 ltkIndexMap:v19.super.isa lastConnectedLEMAC:v20 allowedSessions:v21 keyAddressPairs:v22];

  uint64_t v24 = *(void (**)(uint64_t, uint64_t))(v27 + 8);
  v24(v33, v15);
  v24(a1, v15);
  return v23;
}

uint64_t type metadata accessor for ManagedCBPeripheralManager.KeyType()
{
  uint64_t result = qword_101654C18;
  if (!qword_101654C18) {
    return swift_getSingletonMetadata();
  }
  return result;
}

unint64_t sub_1009E5D4C()
{
  unint64_t result = qword_101654B30;
  if (!qword_101654B30)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_101654B30);
  }
  return result;
}

uint64_t sub_1009E5DA0(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_1009E5DE8(uint64_t a1, uint64_t *a2)
{
  uint64_t v7 = *(void *)(v2 + 16);
  uint64_t v6 = *(void *)(v2 + 24);
  BOOL v8 = (void *)swift_task_alloc();
  *(void *)(v3 + 16) = v8;
  *BOOL v8 = v3;
  v8[1] = sub_10001D2E4;
  return sub_1009DF02C(a1, a2, v7, v6);
}

uint64_t sub_1009E5E9C(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

uint64_t sub_1009E5F04(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for ManagedCBPeripheralBeaconInfo();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_1009E5F68(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t sub_1009E5FC8(uint64_t a1)
{
  return a1;
}

uint64_t sub_1009E6000(uint64_t result, uint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5, unint64_t a6)
{
  if (result != 3)
  {
    sub_10001CFB8(a3, a4);
    return sub_10001CFB8(a5, a6);
  }
  return result;
}

uint64_t sub_1009E6058(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for UUID();
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = __chkstk_darwin(v4);
  NSUUID v30 = (char *)v23 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  NSUUID v29 = (char *)v23 - v8;
  uint64_t v9 = sub_10000588C(&qword_101638CF0);
  __chkstk_darwin(v9 - 8);
  os_log_type_t v11 = (char *)v23 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v31 = a2;
  uint64_t v12 = *(void *)(a1 + 16);
  if (v12)
  {
    unint64_t v14 = *(void (**)(char *, uint64_t, uint64_t))(v5 + 16);
    uint64_t v13 = v5 + 16;
    uint64_t v15 = a1 + ((*(unsigned __int8 *)(v13 + 64) + 32) & ~(unint64_t)*(unsigned __int8 *)(v13 + 64));
    uint64_t v16 = *(void *)(v13 + 56);
    unint64_t v17 = v13 + 40;
    uint64_t v26 = (unsigned int (**)(char *, uint64_t, uint64_t))(v13 + 32);
    uint64_t v27 = v14;
    uint64_t v24 = (void (**)(char *, char *, uint64_t))(v13 + 16);
    uint64_t v25 = v16;
    uint64_t v28 = v13;
    NSString v18 = (void (**)(uint64_t, uint64_t))(v13 - 8);
    v23[1] = v17 & 0xFFFFFFFFFFFFLL | 0xA0D1000000000000;
    uint64_t v20 = (uint64_t)v29;
    NSDictionary v19 = v30;
    while (1)
    {
      v27(v11, v15, v4);
      Class v21 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))v17;
      (*(void (**)(char *, void, uint64_t, uint64_t))v17)(v11, 0, 1, v4);
      if ((*v26)(v11, 1, v4) == 1) {
        break;
      }
      (*v24)(v19, v11, v4);
      sub_100DC8CB8(v20, v19);
      (*v18)(v20, v4);
      v15 += v25;
      if (!--v12) {
        goto LABEL_7;
      }
    }
  }
  else
  {
    Class v21 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v5 + 56);
LABEL_7:
    v21(v11, 1, 1, v4);
  }
  return v31;
}

uint64_t sub_1009E62C4(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v3;
  *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t _s34DisplayIdentifierAndMembershipTypeVwca(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
  return a1;
}

uint64_t _s34DisplayIdentifierAndMembershipTypeVwta(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v4;
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
  return a1;
}

uint64_t _s34DisplayIdentifierAndMembershipTypeVwet(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 17)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t _s34DisplayIdentifierAndMembershipTypeVwst(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(unsigned char *)(result + 16) = 0;
    *(void *)uint64_t result = a2 ^ 0x80000000;
    *(void *)(result + 8) = 0;
    if (a3 < 0) {
      *(unsigned char *)(result + 17) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 8) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 17) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for ManagedCBPeripheralManager.StableIdentifierInfo()
{
  return &type metadata for ManagedCBPeripheralManager.StableIdentifierInfo;
}

unsigned char *storeEnumTagSinglePayload for ManagedCBPeripheralManagerEntitlement(unsigned char *result, int a2, int a3)
{
  if ((a3 + 1) >= 0x10000) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) < 0x100) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2)
  {
    switch(v5)
    {
      case 1:
        *uint64_t result = a2;
        return result;
      case 2:
        *(_WORD *)uint64_t result = a2;
        return result;
      case 3:
        goto LABEL_19;
      case 4:
        *(_DWORD *)uint64_t result = a2;
        return result;
      default:
        return result;
    }
  }
  switch(v5)
  {
    case 1:
      *uint64_t result = 0;
      break;
    case 2:
      *(_WORD *)uint64_t result = 0;
      break;
    case 3:
LABEL_19:
      __break(1u);
      JUMPOUT(0x1009E64C8);
    case 4:
      *(_DWORD *)uint64_t result = 0;
      break;
    default:
      return result;
  }
  return result;
}

ValueMetadata *type metadata accessor for ManagedCBPeripheralManagerEntitlement()
{
  return &type metadata for ManagedCBPeripheralManagerEntitlement;
}

uint64_t sub_1009E6500(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1009E6514);
}

uint64_t sub_1009E6514(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for UUID();
  uint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 48);

  return v5(a1, a2, v4);
}

uint64_t sub_1009E6580(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1009E6594);
}

uint64_t sub_1009E6594(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for UUID();
  uint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 56);

  return v5(a1, a2, a2, v4);
}

uint64_t sub_1009E6604()
{
  return sub_1009E5DA0(&qword_101654C50, (void (*)(uint64_t))type metadata accessor for ManagedCBPeripheralManager.KeyType);
}

unint64_t sub_1009E6650()
{
  unint64_t result = qword_101654C58;
  if (!qword_101654C58)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_101654C58);
  }
  return result;
}

unint64_t sub_1009E66A8()
{
  unint64_t result = qword_101654C60;
  if (!qword_101654C60)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_101654C60);
  }
  return result;
}

uint64_t sub_1009E66FC()
{
  return swift_bridgeObjectRetain();
}

uint64_t sub_1009E6704(uint64_t a1)
{
  return *(unsigned __int8 *)(v1 + *(int *)(a1 + 160));
}

uint64_t sub_1009E6710(uint64_t a1)
{
  return *(void *)(v1 + *(int *)(a1 + 164));
}

uint64_t sub_1009E6724(uint64_t a1)
{
  return *(void *)(v1 + *(int *)(a1 + 168));
}

uint64_t sub_1009E6738(uint64_t a1)
{
  return *(void *)(v1 + *(int *)(a1 + 172));
}

uint64_t sub_1009E674C()
{
  return *(void *)(v0 + 64);
}

uint64_t sub_1009E6758()
{
  return *(void *)(v0 + 104);
}

uint64_t sub_1009E6764()
{
  return *(void *)(v0 + 120);
}

uint64_t sub_1009E6770()
{
  return *(void *)(v0 + 136);
}

uint64_t sub_1009E677C()
{
  return *(void *)(v0 + 152);
}

uint64_t sub_1009E6788()
{
  return *(void *)(v0 + 168);
}

uint64_t sub_1009E6794()
{
  return *(void *)(v0 + 184);
}

uint64_t sub_1009E67A0()
{
  return *(void *)(v0 + 200);
}

uint64_t sub_1009E67AC()
{
  return *(void *)(v0 + 216);
}

uint64_t sub_1009E67B8()
{
  return *(void *)(v0 + 232);
}

uint64_t sub_1009E67C4()
{
  return *(unsigned __int8 *)(v0 + 241);
}

uint64_t sub_1009E67CC()
{
  return CustomCodableKeyDictionary.wrappedValue.getter();
}

uint64_t sub_1009E6800(uint64_t a1)
{
  return *(void *)(v1 + *(int *)(a1 + 104));
}

uint64_t sub_1009E6814(uint64_t a1)
{
  return *(void *)(v1 + *(int *)(a1 + 108));
}

uint64_t sub_1009E6828(uint64_t a1)
{
  return *(void *)(v1 + *(int *)(a1 + 112));
}

uint64_t sub_1009E683C(uint64_t a1)
{
  return *(void *)(v1 + *(int *)(a1 + 116));
}

uint64_t sub_1009E6850(uint64_t a1)
{
  return *(void *)(v1 + *(int *)(a1 + 120));
}

uint64_t sub_1009E6864(uint64_t a1)
{
  return *(void *)(v1 + *(int *)(a1 + 124));
}

uint64_t sub_1009E6878(uint64_t a1)
{
  return *(void *)(v1 + *(int *)(a1 + 128));
}

uint64_t sub_1009E688C(uint64_t a1)
{
  return *(void *)(v1 + *(int *)(a1 + 132));
}

uint64_t sub_1009E68A0(uint64_t a1)
{
  return *(void *)(v1 + *(int *)(a1 + 136));
}

uint64_t sub_1009E68B4(uint64_t a1)
{
  return *(void *)(v1 + *(int *)(a1 + 140));
}

uint64_t sub_1009E68C8(uint64_t a1)
{
  return *(unsigned __int8 *)(v1 + *(int *)(a1 + 144));
}

uint64_t sub_1009E68D4(uint64_t a1)
{
  return *(void *)(v1 + *(int *)(a1 + 148));
}

uint64_t sub_1009E68E8(uint64_t a1)
{
  return *(void *)(v1 + *(int *)(a1 + 152));
}

uint64_t sub_1009E68FC(uint64_t a1)
{
  return *(void *)(v1 + *(int *)(a1 + 156));
}

uint64_t sub_1009E6910(uint64_t a1)
{
  return *(void *)(v1 + *(int *)(a1 + 176));
}

uint64_t sub_1009E6924(uint64_t a1)
{
  return *(void *)(v1 + *(int *)(a1 + 180));
}

uint64_t sub_1009E6938(uint64_t a1)
{
  return *(void *)(v1 + *(int *)(a1 + 184));
}

uint64_t sub_1009E694C(uint64_t a1)
{
  return *(void *)(v1 + *(int *)(a1 + 188));
}

uint64_t sub_1009E6960(uint64_t a1)
{
  return *(void *)(v1 + *(int *)(a1 + 192));
}

uint64_t sub_1009E6974(uint64_t a1)
{
  return *(void *)(v1 + *(int *)(a1 + 196));
}

uint64_t sub_1009E6988(uint64_t a1)
{
  return *(void *)(v1 + *(int *)(a1 + 200));
}

uint64_t sub_1009E699C(uint64_t a1)
{
  return *(void *)(v1 + *(int *)(a1 + 204));
}

uint64_t sub_1009E69B0(uint64_t a1)
{
  return *(void *)(v1 + *(int *)(a1 + 208));
}

uint64_t sub_1009E69C4(uint64_t a1)
{
  return *(void *)(v1 + *(int *)(a1 + 212));
}

uint64_t sub_1009E69D8(uint64_t a1)
{
  return *(void *)(v1 + *(int *)(a1 + 216));
}

uint64_t sub_1009E69EC(uint64_t a1)
{
  return *(unsigned __int8 *)(v1 + *(int *)(a1 + 220));
}

uint64_t sub_1009E69F8(uint64_t a1)
{
  return *(void *)(v1 + *(int *)(a1 + 224));
}

uint64_t sub_1009E6A0C(uint64_t a1)
{
  return *(void *)(v1 + *(int *)(a1 + 228));
}

uint64_t sub_1009E6A20(uint64_t a1)
{
  return *(void *)(v1 + *(int *)(a1 + 232));
}

uint64_t sub_1009E6A34(uint64_t a1)
{
  return *(void *)(v1 + *(int *)(a1 + 236));
}

uint64_t sub_1009E6A48(uint64_t a1)
{
  return *(void *)(v1 + *(int *)(a1 + 240));
}

uint64_t sub_1009E6A5C(uint64_t a1)
{
  return *(void *)(v1 + *(int *)(a1 + 244));
}

uint64_t sub_1009E6A70@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_1009E6DC4(v2 + *(int *)(a1 + 256), a2);
}

uint64_t sub_1009E6A80(uint64_t a1)
{
  return *(unsigned __int8 *)(v1 + *(int *)(a1 + 248));
}

uint64_t sub_1009E6A8C(uint64_t a1)
{
  return *(unsigned __int8 *)(v1 + *(int *)(a1 + 252));
}

uint64_t sub_1009E6A98(uint64_t a1)
{
  return *(void *)(v1 + *(int *)(a1 + 280));
}

uint64_t sub_1009E6AAC(uint64_t a1)
{
  return *(void *)(v1 + *(int *)(a1 + 284));
}

uint64_t sub_1009E6AC0(uint64_t a1)
{
  uint64_t v2 = *(void *)(v1 + *(int *)(a1 + 604));
  swift_bridgeObjectRetain();
  return v2;
}

uint64_t sub_1009E6AF8(uint64_t a1)
{
  uint64_t v2 = *(void *)(v1 + *(int *)(a1 + 612));
  swift_bridgeObjectRetain();
  return v2;
}

uint64_t sub_1009E6B30()
{
  return swift_bridgeObjectRetain();
}

uint64_t sub_1009E6B3C(uint64_t a1)
{
  return *(unsigned __int8 *)(v1 + *(int *)(a1 + 336));
}

uint64_t sub_1009E6B48(uint64_t a1)
{
  return *(unsigned __int8 *)(v1 + *(int *)(a1 + 340));
}

uint64_t sub_1009E6B54(uint64_t a1)
{
  return *(unsigned __int8 *)(v1 + *(int *)(a1 + 344));
}

uint64_t sub_1009E6B60(uint64_t a1)
{
  return *(void *)(v1 + *(int *)(a1 + 288));
}

uint64_t sub_1009E6B74(uint64_t a1)
{
  return *(void *)(v1 + *(int *)(a1 + 292));
}

uint64_t sub_1009E6B88(uint64_t a1)
{
  return *(void *)(v1 + *(int *)(a1 + 100));
}

uint64_t sub_1009E6B9C(uint64_t a1)
{
  return *(void *)(v1 + *(int *)(a1 + 332));
}

uint64_t sub_1009E6BB0(uint64_t a1)
{
  return *(void *)(v1 + *(int *)(a1 + 348));
}

uint64_t sub_1009E6BC4(uint64_t a1)
{
  return *(void *)(v1 + *(int *)(a1 + 352));
}

uint64_t sub_1009E6BD8(uint64_t a1)
{
  return *(void *)(v1 + *(int *)(a1 + 360));
}

uint64_t sub_1009E6BEC(uint64_t a1)
{
  return *(void *)(v1 + *(int *)(a1 + 364));
}

uint64_t sub_1009E6C00(uint64_t a1)
{
  return *(void *)(v1 + *(int *)(a1 + 368));
}

uint64_t sub_1009E6C14(uint64_t a1)
{
  return *(void *)(v1 + *(int *)(a1 + 372));
}

uint64_t sub_1009E6C28(uint64_t a1)
{
  return *(unsigned __int8 *)(v1 + *(int *)(a1 + 384));
}

uint64_t sub_1009E6C34(uint64_t a1)
{
  return *(unsigned __int8 *)(v1 + *(int *)(a1 + 400));
}

uint64_t sub_1009E6C40(uint64_t a1)
{
  return *(unsigned __int8 *)(v1 + *(int *)(a1 + 404));
}

uint64_t sub_1009E6C4C(uint64_t a1)
{
  return *(unsigned __int8 *)(v1 + *(int *)(a1 + 408));
}

uint64_t sub_1009E6C58(uint64_t a1)
{
  return *(unsigned __int8 *)(v1 + *(int *)(a1 + 428));
}

uint64_t sub_1009E6C64()
{
  return swift_bridgeObjectRetain();
}

uint64_t sub_1009E6C70(uint64_t a1)
{
  return *(unsigned __int8 *)(v1 + *(int *)(a1 + 444));
}

uint64_t sub_1009E6C7C()
{
  return swift_bridgeObjectRetain();
}

uint64_t sub_1009E6C88(uint64_t a1)
{
  return *(unsigned __int8 *)(v1 + *(int *)(a1 + 460));
}

uint64_t sub_1009E6C94(uint64_t a1)
{
  return *(void *)(v1 + *(int *)(a1 + 480));
}

uint64_t sub_1009E6CA8(uint64_t a1)
{
  return *(void *)(v1 + *(int *)(a1 + 484));
}

uint64_t sub_1009E6CBC(uint64_t a1)
{
  return *(void *)(v1 + *(int *)(a1 + 488));
}

uint64_t sub_1009E6CD0(uint64_t a1)
{
  return *(void *)(v1 + *(int *)(a1 + 524));
}

uint64_t sub_1009E6CE4(uint64_t a1)
{
  return *(void *)(v1 + *(int *)(a1 + 532));
}

uint64_t sub_1009E6CF8(uint64_t a1)
{
  uint64_t v2 = *(void *)(v1 + *(int *)(a1 + 636));
  swift_bridgeObjectRetain();
  return v2;
}

uint64_t sub_1009E6D30(uint64_t a1)
{
  return *(void *)(v1 + *(int *)(a1 + 640));
}

uint64_t sub_1009E6D44(uint64_t a1)
{
  return *(unsigned __int8 *)(v1 + *(int *)(a1 + 644));
}

uint64_t sub_1009E6D50(uint64_t a1)
{
  return *(unsigned __int8 *)(v1 + *(int *)(a1 + 544));
}

uint64_t sub_1009E6D5C(uint64_t a1)
{
  return *(void *)(v1 + *(int *)(a1 + 548));
}

uint64_t sub_1009E6D70(uint64_t a1)
{
  return *(unsigned __int8 *)(v1 + *(int *)(a1 + 556));
}

unint64_t sub_1009E6D7C(uint64_t a1)
{
  return *(unsigned int *)(v1 + *(int *)(a1 + 560)) | ((unint64_t)*(unsigned __int8 *)(v1 + *(int *)(a1 + 560) + 4) << 32);
}

uint64_t sub_1009E6DA4(uint64_t a1)
{
  return *(void *)(v1 + *(int *)(a1 + 564));
}

uint64_t sub_1009E6DB8(uint64_t a1)
{
  return *(unsigned __int8 *)(v1 + *(int *)(a1 + 592));
}

uint64_t sub_1009E6DC4(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_10000588C(&qword_101652428);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

unsigned char *sub_1009E6E2C(unsigned char *a1, uint64_t *a2, int *a3)
{
  uint64_t v4 = a1;
  int v5 = *(_DWORD *)(*((void *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v130 = *a2;
    *(void *)uint64_t v4 = *a2;
    uint64_t v4 = (unsigned char *)(v130 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    *a1 = *(unsigned char *)a2;
    uint64_t v7 = a2[2];
    *((void *)v4 + 1) = a2[1];
    *((void *)v4 + 2) = v7;
    uint64_t v8 = a2[3];
    unint64_t v9 = a2[4];
    swift_bridgeObjectRetain();
    sub_1000361E0(v8, v9);
    *((void *)v4 + 3) = v8;
    *((void *)v4 + 4) = v9;
    long long v10 = *(_OWORD *)(a2 + 5);
    uint64_t v11 = a2[8];
    *((void *)v4 + 7) = a2[7];
    *((void *)v4 + 8) = v11;
    v4[72] = *((unsigned char *)a2 + 72);
    *((void *)v4 + 10) = a2[10];
    v4[88] = *((unsigned char *)a2 + 88);
    v4[112] = *((unsigned char *)a2 + 112);
    uint64_t v12 = a2[13];
    *((void *)v4 + 12) = a2[12];
    *((void *)v4 + 13) = v12;
    *((void *)v4 + 15) = a2[15];
    v4[128] = *((unsigned char *)a2 + 128);
    *((void *)v4 + 17) = a2[17];
    v4[144] = *((unsigned char *)a2 + 144);
    *((void *)v4 + 19) = a2[19];
    v4[160] = *((unsigned char *)a2 + 160);
    v4[176] = *((unsigned char *)a2 + 176);
    *((void *)v4 + 21) = a2[21];
    uint64_t v13 = a2[23];
    v4[192] = *((unsigned char *)a2 + 192);
    *((void *)v4 + 23) = v13;
    v4[208] = *((unsigned char *)a2 + 208);
    *((void *)v4 + 25) = a2[25];
    v4[224] = *((unsigned char *)a2 + 224);
    *((void *)v4 + 27) = a2[27];
    *((void *)v4 + 29) = a2[29];
    *((_WORD *)v4 + 120) = *((_WORD *)a2 + 120);
    uint64_t v14 = a3[24];
    uint64_t v15 = &v4[v14];
    uint64_t v16 = (uint64_t)a2 + v14;
    *(_OWORD *)(v4 + 40) = v10;
    swift_bridgeObjectRetain();
    uint64_t v17 = sub_10000588C(&qword_101654C68);
    (*(void (**)(unsigned char *, uint64_t, uint64_t))(*(void *)(v17 - 8) + 16))(v15, v16, v17);
    uint64_t v18 = a3[25];
    uint64_t v19 = a3[26];
    uint64_t v20 = &v4[v18];
    uint64_t v21 = (uint64_t)a2 + v18;
    *(void *)uint64_t v20 = *(void *)v21;
    v20[8] = *(unsigned char *)(v21 + 8);
    Class v22 = &v4[v19];
    uint64_t v23 = (uint64_t)a2 + v19;
    *(void *)Class v22 = *(void *)v23;
    v22[8] = *(unsigned char *)(v23 + 8);
    uint64_t v24 = a3[27];
    uint64_t v25 = a3[28];
    uint64_t v26 = &v4[v24];
    uint64_t v27 = (uint64_t)a2 + v24;
    *(void *)uint64_t v26 = *(void *)v27;
    v26[8] = *(unsigned char *)(v27 + 8);
    uint64_t v28 = &v4[v25];
    uint64_t v29 = (uint64_t)a2 + v25;
    v28[8] = *(unsigned char *)(v29 + 8);
    *(void *)uint64_t v28 = *(void *)v29;
    uint64_t v30 = a3[29];
    uint64_t v31 = a3[30];
    char v32 = &v4[v30];
    uint64_t v33 = (uint64_t)a2 + v30;
    *(void *)char v32 = *(void *)v33;
    v32[8] = *(unsigned char *)(v33 + 8);
    id v34 = &v4[v31];
    uint64_t v35 = (uint64_t)a2 + v31;
    *(void *)id v34 = *(void *)v35;
    v34[8] = *(unsigned char *)(v35 + 8);
    uint64_t v36 = a3[31];
    uint64_t v37 = a3[32];
    uint64_t v38 = &v4[v36];
    uint64_t v39 = (uint64_t)a2 + v36;
    *(void *)uint64_t v38 = *(void *)v39;
    v38[8] = *(unsigned char *)(v39 + 8);
    unint64_t v40 = &v4[v37];
    uint64_t v41 = (uint64_t)a2 + v37;
    *(void *)unint64_t v40 = *(void *)v41;
    v40[8] = *(unsigned char *)(v41 + 8);
    uint64_t v42 = a3[33];
    uint64_t v43 = a3[34];
    uint64_t v44 = &v4[v42];
    uint64_t v45 = (uint64_t)a2 + v42;
    *(void *)uint64_t v44 = *(void *)v45;
    v44[8] = *(unsigned char *)(v45 + 8);
    uint64_t v46 = &v4[v43];
    uint64_t v47 = (uint64_t)a2 + v43;
    *(void *)uint64_t v46 = *(void *)v47;
    v46[8] = *(unsigned char *)(v47 + 8);
    uint64_t v48 = a3[35];
    uint64_t v49 = a3[36];
    uint64_t v50 = &v4[v48];
    uint64_t v51 = (uint64_t)a2 + v48;
    *(void *)uint64_t v50 = *(void *)v51;
    v50[8] = *(unsigned char *)(v51 + 8);
    v4[v49] = *((unsigned char *)a2 + v49);
    uint64_t v52 = a3[37];
    uint64_t v53 = a3[38];
    unint64_t v54 = &v4[v52];
    uint64_t v55 = (uint64_t)a2 + v52;
    *(void *)unint64_t v54 = *(void *)v55;
    v54[8] = *(unsigned char *)(v55 + 8);
    BOOL v56 = &v4[v53];
    uint64_t v57 = (uint64_t)a2 + v53;
    *(void *)BOOL v56 = *(void *)v57;
    v56[8] = *(unsigned char *)(v57 + 8);
    uint64_t v58 = a3[39];
    uint64_t v59 = a3[40];
    char v60 = &v4[v58];
    uint64_t v61 = (uint64_t)a2 + v58;
    *(void *)char v60 = *(void *)v61;
    v60[8] = *(unsigned char *)(v61 + 8);
    v4[v59] = *((unsigned char *)a2 + v59);
    uint64_t v62 = a3[41];
    uint64_t v63 = a3[42];
    BOOL v64 = &v4[v62];
    uint64_t v65 = (uint64_t)a2 + v62;
    *(void *)BOOL v64 = *(void *)v65;
    v64[8] = *(unsigned char *)(v65 + 8);
    uint64_t v66 = &v4[v63];
    uint64_t v67 = (uint64_t)a2 + v63;
    *(void *)uint64_t v66 = *(void *)v67;
    v66[8] = *(unsigned char *)(v67 + 8);
    uint64_t v68 = a3[43];
    uint64_t v69 = a3[44];
    uint64_t v70 = &v4[v68];
    uint64_t v71 = (uint64_t)a2 + v68;
    *(void *)uint64_t v70 = *(void *)v71;
    v70[8] = *(unsigned char *)(v71 + 8);
    uint64_t v72 = &v4[v69];
    uint64_t v73 = (uint64_t)a2 + v69;
    *(void *)uint64_t v72 = *(void *)v73;
    v72[8] = *(unsigned char *)(v73 + 8);
    uint64_t v74 = a3[45];
    uint64_t v75 = a3[46];
    uint64_t v76 = &v4[v74];
    uint64_t v77 = (uint64_t *)((char *)a2 + v74);
    uint64_t v78 = *v77;
    v76[8] = *((unsigned char *)v77 + 8);
    *(void *)uint64_t v76 = v78;
    uint64_t v79 = &v4[v75];
    uint64_t v80 = (uint64_t)a2 + v75;
    *(void *)uint64_t v79 = *(void *)v80;
    v79[8] = *(unsigned char *)(v80 + 8);
    uint64_t v81 = a3[47];
    uint64_t v82 = a3[48];
    uint64_t v83 = &v4[v81];
    uint64_t v84 = (uint64_t)a2 + v81;
    *(void *)uint64_t v83 = *(void *)v84;
    v83[8] = *(unsigned char *)(v84 + 8);
    unint64_t v85 = &v4[v82];
    uint64_t v86 = (uint64_t)a2 + v82;
    *(void *)unint64_t v85 = *(void *)v86;
    v85[8] = *(unsigned char *)(v86 + 8);
    uint64_t v87 = a3[49];
    uint64_t v88 = a3[50];
    char v89 = &v4[v87];
    uint64_t v90 = (uint64_t)a2 + v87;
    *(void *)char v89 = *(void *)v90;
    v89[8] = *(unsigned char *)(v90 + 8);
    uint64_t v91 = &v4[v88];
    uint64_t v92 = (uint64_t)a2 + v88;
    *(void *)uint64_t v91 = *(void *)v92;
    v91[8] = *(unsigned char *)(v92 + 8);
    uint64_t v93 = a3[51];
    uint64_t v94 = a3[52];
    uint64_t v95 = &v4[v93];
    uint64_t v96 = (uint64_t)a2 + v93;
    *(void *)uint64_t v95 = *(void *)v96;
    v95[8] = *(unsigned char *)(v96 + 8);
    uint64_t v97 = &v4[v94];
    uint64_t v98 = (uint64_t)a2 + v94;
    *(void *)uint64_t v97 = *(void *)v98;
    v97[8] = *(unsigned char *)(v98 + 8);
    uint64_t v99 = a3[53];
    uint64_t v100 = a3[54];
    uint64_t v101 = &v4[v99];
    uint64_t v102 = (uint64_t)a2 + v99;
    *(void *)uint64_t v101 = *(void *)v102;
    v101[8] = *(unsigned char *)(v102 + 8);
    uint64_t v103 = &v4[v100];
    uint64_t v104 = (uint64_t)a2 + v100;
    *(void *)uint64_t v103 = *(void *)v104;
    v103[8] = *(unsigned char *)(v104 + 8);
    uint64_t v105 = a3[56];
    v4[a3[55]] = *((unsigned char *)a2 + a3[55]);
    uint64_t v106 = &v4[v105];
    uint64_t v107 = (uint64_t)a2 + v105;
    *(void *)uint64_t v106 = *(void *)v107;
    v106[8] = *(unsigned char *)(v107 + 8);
    uint64_t v108 = a3[57];
    uint64_t v109 = a3[58];
    uint64_t v110 = &v4[v108];
    uint64_t v111 = (uint64_t)a2 + v108;
    *(void *)uint64_t v110 = *(void *)v111;
    v110[8] = *(unsigned char *)(v111 + 8);
    uint64_t v112 = &v4[v109];
    uint64_t v113 = (uint64_t)a2 + v109;
    *(void *)uint64_t v112 = *(void *)v113;
    v112[8] = *(unsigned char *)(v113 + 8);
    uint64_t v114 = a3[59];
    uint64_t v115 = a3[60];
    v116 = &v4[v114];
    uint64_t v117 = (uint64_t)a2 + v114;
    *(void *)v116 = *(void *)v117;
    v116[8] = *(unsigned char *)(v117 + 8);
    v118 = &v4[v115];
    unint64_t v119 = (uint64_t *)((char *)a2 + v115);
    uint64_t v120 = *v119;
    v118[8] = *((unsigned char *)v119 + 8);
    *(void *)v118 = v120;
    uint64_t v121 = a3[61];
    uint64_t v122 = a3[62];
    uint64_t v123 = &v4[v121];
    uint64_t v124 = (uint64_t)a2 + v121;
    *(void *)uint64_t v123 = *(void *)v124;
    v123[8] = *(unsigned char *)(v124 + 8);
    v4[v122] = *((unsigned char *)a2 + v122);
    uint64_t v125 = a3[64];
    v4[a3[63]] = *((unsigned char *)a2 + a3[63]);
    uint64_t v126 = &v4[v125];
    uint64_t v127 = (uint64_t)a2 + v125;
    uint64_t v128 = *(void *)(v127 + 48);
    if (v128)
    {
      long long v129 = *(_OWORD *)(v127 + 16);
      *(_OWORD *)uint64_t v126 = *(_OWORD *)v127;
      *((_OWORD *)v126 + 1) = v129;
      *((_OWORD *)v126 + 2) = *(_OWORD *)(v127 + 32);
      *((void *)v126 + 6) = v128;
      *(_OWORD *)(v126 + 56) = *(_OWORD *)(v127 + 56);
      *(_OWORD *)(v126 + 72) = *(_OWORD *)(v127 + 72);
      *(_OWORD *)(v126 + 88) = *(_OWORD *)(v127 + 88);
      *((void *)v126 + 13) = *(void *)(v127 + 104);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
    }
    else
    {
      long long v131 = *(_OWORD *)(v127 + 80);
      *((_OWORD *)v126 + 4) = *(_OWORD *)(v127 + 64);
      *((_OWORD *)v126 + 5) = v131;
      *((_OWORD *)v126 + 6) = *(_OWORD *)(v127 + 96);
      long long v132 = *(_OWORD *)(v127 + 16);
      *(_OWORD *)uint64_t v126 = *(_OWORD *)v127;
      *((_OWORD *)v126 + 1) = v132;
      long long v133 = *(_OWORD *)(v127 + 48);
      *((_OWORD *)v126 + 2) = *(_OWORD *)(v127 + 32);
      *((_OWORD *)v126 + 3) = v133;
    }
    uint64_t v134 = a3[65];
    v135 = &v4[v134];
    uint64_t v136 = (uint64_t)a2 + v134;
    *(void *)v135 = *(void *)v136;
    v135[8] = *(unsigned char *)(v136 + 8);
    uint64_t v137 = a3[66];
    v138 = &v4[v137];
    uint64_t v139 = (uint64_t)a2 + v137;
    *(void *)v138 = *(void *)v139;
    v138[8] = *(unsigned char *)(v139 + 8);
    uint64_t v140 = a3[67];
    v141 = &v4[v140];
    uint64_t v142 = (uint64_t)a2 + v140;
    *(void *)v141 = *(void *)v142;
    v141[8] = *(unsigned char *)(v142 + 8);
    uint64_t v143 = a3[68];
    uint64_t v144 = &v4[v143];
    uint64_t v145 = (uint64_t)a2 + v143;
    v144[8] = *(unsigned char *)(v145 + 8);
    *(void *)uint64_t v144 = *(void *)v145;
    uint64_t v146 = a3[69];
    v147 = &v4[v146];
    uint64_t v148 = (uint64_t)a2 + v146;
    *(void *)v147 = *(void *)v148;
    v147[8] = *(unsigned char *)(v148 + 8);
    uint64_t v149 = a3[70];
    v150 = &v4[v149];
    uint64_t v151 = (uint64_t)a2 + v149;
    *(void *)v150 = *(void *)v151;
    v150[8] = *(unsigned char *)(v151 + 8);
    uint64_t v152 = a3[71];
    v153 = &v4[v152];
    uint64_t v154 = (uint64_t)a2 + v152;
    *(void *)v153 = *(void *)v154;
    v153[8] = *(unsigned char *)(v154 + 8);
    uint64_t v155 = a3[72];
    v156 = &v4[v155];
    uint64_t v157 = (uint64_t)a2 + v155;
    *(void *)v156 = *(void *)v157;
    v156[8] = *(unsigned char *)(v157 + 8);
    uint64_t v158 = a3[73];
    v159 = &v4[v158];
    uint64_t v160 = (uint64_t)a2 + v158;
    *(void *)v159 = *(void *)v160;
    v159[8] = *(unsigned char *)(v160 + 8);
    uint64_t v161 = a3[74];
    v162 = &v4[v161];
    uint64_t v163 = (uint64_t)a2 + v161;
    *(void *)v162 = *(void *)v163;
    v162[8] = *(unsigned char *)(v163 + 8);
    uint64_t v164 = a3[75];
    v165 = &v4[v164];
    uint64_t v166 = (uint64_t)a2 + v164;
    *(void *)v165 = *(void *)v166;
    v165[8] = *(unsigned char *)(v166 + 8);
    uint64_t v167 = a3[76];
    v168 = &v4[v167];
    uint64_t v169 = (uint64_t)a2 + v167;
    *(void *)v168 = *(void *)v169;
    v168[8] = *(unsigned char *)(v169 + 8);
    uint64_t v170 = a3[77];
    v171 = &v4[v170];
    uint64_t v172 = (uint64_t)a2 + v170;
    *(void *)v171 = *(void *)v172;
    v171[8] = *(unsigned char *)(v172 + 8);
    uint64_t v173 = a3[78];
    v174 = &v4[v173];
    uint64_t v175 = (uint64_t)a2 + v173;
    *(void *)v174 = *(void *)v175;
    v174[8] = *(unsigned char *)(v175 + 8);
    uint64_t v176 = a3[79];
    v177 = &v4[v176];
    uint64_t v178 = (uint64_t)a2 + v176;
    *(void *)v177 = *(void *)v178;
    v177[8] = *(unsigned char *)(v178 + 8);
    uint64_t v179 = a3[80];
    v180 = &v4[v179];
    uint64_t v181 = (uint64_t)a2 + v179;
    *(void *)v180 = *(void *)v181;
    v180[8] = *(unsigned char *)(v181 + 8);
    uint64_t v182 = a3[81];
    v183 = &v4[v182];
    uint64_t v184 = (uint64_t)a2 + v182;
    *(void *)v183 = *(void *)v184;
    v183[8] = *(unsigned char *)(v184 + 8);
    uint64_t v185 = a3[82];
    v186 = &v4[v185];
    uint64_t v187 = (uint64_t)a2 + v185;
    *(void *)v186 = *(void *)v187;
    v186[8] = *(unsigned char *)(v187 + 8);
    uint64_t v188 = a3[83];
    v189 = &v4[v188];
    uint64_t v190 = (uint64_t)a2 + v188;
    *(void *)v189 = *(void *)v190;
    v189[8] = *(unsigned char *)(v190 + 8);
    v4[a3[84]] = *((unsigned char *)a2 + a3[84]);
    v4[a3[85]] = *((unsigned char *)a2 + a3[85]);
    v4[a3[86]] = *((unsigned char *)a2 + a3[86]);
    uint64_t v191 = a3[87];
    v192 = &v4[v191];
    uint64_t v193 = (uint64_t)a2 + v191;
    *(void *)v192 = *(void *)v193;
    v192[8] = *(unsigned char *)(v193 + 8);
    uint64_t v194 = a3[88];
    v195 = &v4[v194];
    uint64_t v196 = (uint64_t)a2 + v194;
    *(void *)v195 = *(void *)v196;
    v195[8] = *(unsigned char *)(v196 + 8);
    uint64_t v197 = a3[89];
    v198 = &v4[v197];
    uint64_t v199 = (uint64_t)a2 + v197;
    *(void *)v198 = *(void *)v199;
    v198[8] = *(unsigned char *)(v199 + 8);
    uint64_t v200 = a3[90];
    v201 = &v4[v200];
    uint64_t v202 = (uint64_t)a2 + v200;
    *(void *)v201 = *(void *)v202;
    v201[8] = *(unsigned char *)(v202 + 8);
    uint64_t v203 = a3[91];
    v204 = &v4[v203];
    v205 = (uint64_t *)((char *)a2 + v203);
    uint64_t v206 = *v205;
    v204[8] = *((unsigned char *)v205 + 8);
    *(void *)v204 = v206;
    uint64_t v207 = a3[92];
    v208 = &v4[v207];
    uint64_t v209 = (uint64_t)a2 + v207;
    *(void *)v208 = *(void *)v209;
    v208[8] = *(unsigned char *)(v209 + 8);
    uint64_t v210 = a3[93];
    v211 = &v4[v210];
    uint64_t v212 = (uint64_t)a2 + v210;
    *(void *)v211 = *(void *)v212;
    v211[8] = *(unsigned char *)(v212 + 8);
    uint64_t v213 = a3[94];
    v214 = &v4[v213];
    uint64_t v215 = (uint64_t)a2 + v213;
    *(void *)v214 = *(void *)v215;
    v214[8] = *(unsigned char *)(v215 + 8);
    uint64_t v216 = a3[95];
    v217 = &v4[v216];
    uint64_t v218 = (uint64_t)a2 + v216;
    *(void *)v217 = *(void *)v218;
    v217[8] = *(unsigned char *)(v218 + 8);
    v4[a3[96]] = *((unsigned char *)a2 + a3[96]);
    uint64_t v219 = a3[97];
    v220 = &v4[v219];
    uint64_t v221 = (uint64_t)a2 + v219;
    *(void *)v220 = *(void *)v221;
    v220[8] = *(unsigned char *)(v221 + 8);
    uint64_t v222 = a3[98];
    v223 = &v4[v222];
    uint64_t v224 = (uint64_t)a2 + v222;
    *(void *)v223 = *(void *)v224;
    v223[8] = *(unsigned char *)(v224 + 8);
    uint64_t v225 = a3[99];
    v226 = &v4[v225];
    uint64_t v227 = (uint64_t)a2 + v225;
    *(void *)v226 = *(void *)v227;
    uint64_t v228 = a3[100];
    char v229 = *((unsigned char *)a2 + v228);
    v226[8] = *(unsigned char *)(v227 + 8);
    v4[v228] = v229;
    v4[a3[101]] = *((unsigned char *)a2 + a3[101]);
    v4[a3[102]] = *((unsigned char *)a2 + a3[102]);
    uint64_t v230 = a3[103];
    v231 = &v4[v230];
    uint64_t v232 = (uint64_t)a2 + v230;
    *(void *)v231 = *(void *)v232;
    v231[8] = *(unsigned char *)(v232 + 8);
    uint64_t v233 = a3[104];
    v234 = &v4[v233];
    uint64_t v235 = (uint64_t)a2 + v233;
    *(void *)v234 = *(void *)v235;
    v234[8] = *(unsigned char *)(v235 + 8);
    uint64_t v236 = a3[105];
    v237 = &v4[v236];
    uint64_t v238 = (uint64_t)a2 + v236;
    *(void *)v237 = *(void *)v238;
    v237[8] = *(unsigned char *)(v238 + 8);
    uint64_t v239 = a3[106];
    v240 = &v4[v239];
    uint64_t v241 = (uint64_t)a2 + v239;
    *(void *)v240 = *(void *)v241;
    v240[8] = *(unsigned char *)(v241 + 8);
    v4[a3[107]] = *((unsigned char *)a2 + a3[107]);
    uint64_t v242 = a3[108];
    v243 = &v4[v242];
    uint64_t v244 = (uint64_t)a2 + v242;
    *(void *)v243 = *(void *)v244;
    v243[8] = *(unsigned char *)(v244 + 8);
    *(void *)&v4[a3[109]] = *(uint64_t *)((char *)a2 + a3[109]);
    uint64_t v245 = a3[110];
    v246 = &v4[v245];
    uint64_t v247 = (uint64_t)a2 + v245;
    *(void *)v246 = *(void *)v247;
    v246[8] = *(unsigned char *)(v247 + 8);
    v4[a3[111]] = *((unsigned char *)a2 + a3[111]);
    *(void *)&v4[a3[112]] = *(uint64_t *)((char *)a2 + a3[112]);
    uint64_t v248 = a3[113];
    v249 = &v4[v248];
    uint64_t v250 = (uint64_t)a2 + v248;
    *(void *)v249 = *(void *)v250;
    v249[8] = *(unsigned char *)(v250 + 8);
    uint64_t v251 = a3[114];
    v252 = &v4[v251];
    uint64_t v253 = (uint64_t)a2 + v251;
    *(void *)v252 = *(void *)v253;
    v252[8] = *(unsigned char *)(v253 + 8);
    v4[a3[115]] = *((unsigned char *)a2 + a3[115]);
    v4[a3[116]] = *((unsigned char *)a2 + a3[116]);
    uint64_t v254 = a3[117];
    v255 = &v4[v254];
    uint64_t v256 = (uint64_t)a2 + v254;
    *(void *)v255 = *(void *)v256;
    v255[8] = *(unsigned char *)(v256 + 8);
    uint64_t v257 = a3[118];
    v258 = &v4[v257];
    uint64_t v259 = (uint64_t)a2 + v257;
    *(void *)v258 = *(void *)v259;
    v258[8] = *(unsigned char *)(v259 + 8);
    uint64_t v260 = a3[119];
    v261 = &v4[v260];
    uint64_t v262 = (uint64_t)a2 + v260;
    *(void *)v261 = *(void *)v262;
    v261[8] = *(unsigned char *)(v262 + 8);
    uint64_t v263 = a3[120];
    v264 = &v4[v263];
    uint64_t v265 = (uint64_t)a2 + v263;
    *(void *)v264 = *(void *)v265;
    v264[8] = *(unsigned char *)(v265 + 8);
    uint64_t v266 = a3[121];
    v267 = &v4[v266];
    v268 = (uint64_t *)((char *)a2 + v266);
    uint64_t v269 = *v268;
    v267[8] = *((unsigned char *)v268 + 8);
    *(void *)v267 = v269;
    uint64_t v270 = a3[122];
    v271 = &v4[v270];
    uint64_t v272 = (uint64_t)a2 + v270;
    *(void *)v271 = *(void *)v272;
    v271[8] = *(unsigned char *)(v272 + 8);
    uint64_t v273 = a3[123];
    v274 = &v4[v273];
    uint64_t v275 = (uint64_t)a2 + v273;
    *(void *)v274 = *(void *)v275;
    v274[8] = *(unsigned char *)(v275 + 8);
    uint64_t v276 = a3[124];
    v277 = &v4[v276];
    uint64_t v278 = (uint64_t)a2 + v276;
    *(void *)v277 = *(void *)v278;
    v277[8] = *(unsigned char *)(v278 + 8);
    uint64_t v279 = a3[125];
    v280 = &v4[v279];
    uint64_t v281 = (uint64_t)a2 + v279;
    *(void *)v280 = *(void *)v281;
    v280[8] = *(unsigned char *)(v281 + 8);
    uint64_t v282 = a3[126];
    v283 = &v4[v282];
    uint64_t v284 = (uint64_t)a2 + v282;
    *(void *)v283 = *(void *)v284;
    v283[8] = *(unsigned char *)(v284 + 8);
    uint64_t v285 = a3[127];
    v286 = &v4[v285];
    uint64_t v287 = (uint64_t)a2 + v285;
    *(void *)v286 = *(void *)v287;
    v286[8] = *(unsigned char *)(v287 + 8);
    uint64_t v288 = a3[128];
    v289 = &v4[v288];
    uint64_t v290 = (uint64_t)a2 + v288;
    *(void *)v289 = *(void *)v290;
    v289[8] = *(unsigned char *)(v290 + 8);
    uint64_t v291 = a3[129];
    v292 = &v4[v291];
    uint64_t v293 = (uint64_t)a2 + v291;
    *(void *)v292 = *(void *)v293;
    v292[8] = *(unsigned char *)(v293 + 8);
    uint64_t v294 = a3[130];
    v295 = &v4[v294];
    uint64_t v296 = (uint64_t)a2 + v294;
    *(void *)v295 = *(void *)v296;
    v295[8] = *(unsigned char *)(v296 + 8);
    uint64_t v297 = a3[131];
    v298 = &v4[v297];
    uint64_t v299 = (uint64_t)a2 + v297;
    *(void *)v298 = *(void *)v299;
    v298[8] = *(unsigned char *)(v299 + 8);
    uint64_t v300 = a3[132];
    v301 = &v4[v300];
    uint64_t v302 = (uint64_t)a2 + v300;
    *(void *)v301 = *(void *)v302;
    v301[8] = *(unsigned char *)(v302 + 8);
    uint64_t v303 = a3[133];
    v304 = &v4[v303];
    uint64_t v305 = (uint64_t)a2 + v303;
    *(void *)v304 = *(void *)v305;
    v304[8] = *(unsigned char *)(v305 + 8);
    uint64_t v306 = a3[134];
    v307 = &v4[v306];
    uint64_t v308 = (uint64_t)a2 + v306;
    *(void *)v307 = *(void *)v308;
    v307[8] = *(unsigned char *)(v308 + 8);
    v4[a3[135]] = *((unsigned char *)a2 + a3[135]);
    v4[a3[136]] = *((unsigned char *)a2 + a3[136]);
    uint64_t v309 = a3[137];
    v310 = &v4[v309];
    uint64_t v311 = (uint64_t)a2 + v309;
    *(void *)v310 = *(void *)v311;
    v310[8] = *(unsigned char *)(v311 + 8);
    uint64_t v312 = a3[138];
    v313 = &v4[v312];
    uint64_t v314 = (uint64_t)a2 + v312;
    *(void *)v313 = *(void *)v314;
    v313[8] = *(unsigned char *)(v314 + 8);
    v4[a3[139]] = *((unsigned char *)a2 + a3[139]);
    uint64_t v315 = a3[140];
    v316 = &v4[v315];
    uint64_t v317 = (uint64_t)a2 + v315;
    *(_DWORD *)v316 = *(_DWORD *)v317;
    v316[4] = *(unsigned char *)(v317 + 4);
    uint64_t v318 = a3[141];
    v319 = &v4[v318];
    uint64_t v320 = (uint64_t)a2 + v318;
    *(void *)v319 = *(void *)v320;
    v319[8] = *(unsigned char *)(v320 + 8);
    uint64_t v321 = a3[142];
    v322 = &v4[v321];
    uint64_t v323 = (uint64_t)a2 + v321;
    *(void *)v322 = *(void *)v323;
    v322[8] = *(unsigned char *)(v323 + 8);
    uint64_t v324 = a3[143];
    v325 = &v4[v324];
    uint64_t v326 = (uint64_t)a2 + v324;
    *(void *)v325 = *(void *)v326;
    v325[8] = *(unsigned char *)(v326 + 8);
    uint64_t v327 = a3[144];
    v328 = &v4[v327];
    v329 = (uint64_t *)((char *)a2 + v327);
    uint64_t v330 = *v329;
    v328[8] = *((unsigned char *)v329 + 8);
    *(void *)v328 = v330;
    uint64_t v331 = a3[145];
    v332 = &v4[v331];
    uint64_t v333 = (uint64_t)a2 + v331;
    *(void *)v332 = *(void *)v333;
    v332[8] = *(unsigned char *)(v333 + 8);
    uint64_t v334 = a3[146];
    v335 = &v4[v334];
    uint64_t v336 = (uint64_t)a2 + v334;
    *(void *)v335 = *(void *)v336;
    v335[8] = *(unsigned char *)(v336 + 8);
    uint64_t v337 = a3[147];
    v338 = &v4[v337];
    uint64_t v339 = (uint64_t)a2 + v337;
    *(void *)v338 = *(void *)v339;
    uint64_t v340 = a3[148];
    char v341 = *((unsigned char *)a2 + v340);
    v338[8] = *(unsigned char *)(v339 + 8);
    v4[v340] = v341;
    uint64_t v342 = a3[149];
    v343 = &v4[v342];
    uint64_t v344 = (uint64_t)a2 + v342;
    *(void *)v343 = *(void *)v344;
    v343[8] = *(unsigned char *)(v344 + 8);
    uint64_t v345 = a3[150];
    v346 = &v4[v345];
    uint64_t v347 = (uint64_t)a2 + v345;
    *(void *)v346 = *(void *)v347;
    v346[8] = *(unsigned char *)(v347 + 8);
    uint64_t v348 = a3[151];
    v349 = &v4[v348];
    v350 = (uint64_t *)((char *)a2 + v348);
    uint64_t v351 = v350[1];
    void *v349 = *v350;
    v349[1] = v351;
    uint64_t v352 = a3[152];
    v353 = &v4[v352];
    uint64_t v354 = (uint64_t)a2 + v352;
    *(void *)v353 = *(void *)v354;
    v353[8] = *(unsigned char *)(v354 + 8);
    uint64_t v355 = a3[153];
    v356 = &v4[v355];
    v357 = (uint64_t *)((char *)a2 + v355);
    uint64_t v358 = v357[1];
    void *v356 = *v357;
    v356[1] = v358;
    uint64_t v359 = a3[154];
    v360 = &v4[v359];
    uint64_t v361 = (uint64_t)a2 + v359;
    *(void *)v360 = *(void *)v361;
    v360[8] = *(unsigned char *)(v361 + 8);
    *(void *)&v4[a3[155]] = *(uint64_t *)((char *)a2 + a3[155]);
    uint64_t v362 = a3[156];
    v363 = &v4[v362];
    uint64_t v364 = (uint64_t)a2 + v362;
    *(void *)v363 = *(void *)v364;
    v363[8] = *(unsigned char *)(v364 + 8);
    uint64_t v365 = a3[157];
    v366 = &v4[v365];
    uint64_t v367 = (uint64_t)a2 + v365;
    *(void *)v366 = *(void *)v367;
    v366[8] = *(unsigned char *)(v367 + 8);
    uint64_t v368 = a3[158];
    v369 = &v4[v368];
    uint64_t v370 = (uint64_t)a2 + v368;
    *(void *)v369 = *(void *)v370;
    v369[8] = *(unsigned char *)(v370 + 8);
    uint64_t v371 = a3[159];
    v372 = &v4[v371];
    v373 = (uint64_t *)((char *)a2 + v371);
    uint64_t v374 = v373[1];
    void *v372 = *v373;
    v372[1] = v374;
    uint64_t v375 = a3[160];
    v376 = &v4[v375];
    uint64_t v377 = (uint64_t)a2 + v375;
    *(void *)v376 = *(void *)v377;
    v376[8] = *(unsigned char *)(v377 + 8);
    v4[a3[161]] = *((unsigned char *)a2 + a3[161]);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  return v4;
}

uint64_t sub_1009E7D8C(uint64_t a1, uint64_t a2)
{
  swift_bridgeObjectRelease();
  sub_10001CFB8(*(void *)(a1 + 24), *(void *)(a1 + 32));
  swift_bridgeObjectRelease();
  uint64_t v4 = a1 + *(int *)(a2 + 96);
  uint64_t v5 = sub_10000588C(&qword_101654C68);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8))(v4, v5);
  if (*(void *)(a1 + *(int *)(a2 + 256) + 48))
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return swift_bridgeObjectRelease();
}

uint64_t sub_1009E7E90(uint64_t a1, uint64_t a2, int *a3)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  uint64_t v6 = *(void *)(a2 + 16);
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(void *)(a1 + 16) = v6;
  uint64_t v7 = *(void *)(a2 + 24);
  unint64_t v8 = *(void *)(a2 + 32);
  swift_bridgeObjectRetain();
  sub_1000361E0(v7, v8);
  *(void *)(a1 + 24) = v7;
  *(void *)(a1 + 32) = v8;
  long long v9 = *(_OWORD *)(a2 + 40);
  uint64_t v10 = *(void *)(a2 + 64);
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  *(void *)(a1 + 64) = v10;
  *(unsigned char *)(a1 + 72) = *(unsigned char *)(a2 + 72);
  *(void *)(a1 + 80) = *(void *)(a2 + 80);
  *(unsigned char *)(a1 + 88) = *(unsigned char *)(a2 + 88);
  *(unsigned char *)(a1 + 112) = *(unsigned char *)(a2 + 112);
  uint64_t v11 = *(void *)(a2 + 104);
  *(void *)(a1 + 96) = *(void *)(a2 + 96);
  *(void *)(a1 + 104) = v11;
  *(void *)(a1 + 120) = *(void *)(a2 + 120);
  *(unsigned char *)(a1 + 128) = *(unsigned char *)(a2 + 128);
  *(void *)(a1 + 136) = *(void *)(a2 + 136);
  *(unsigned char *)(a1 + 144) = *(unsigned char *)(a2 + 144);
  *(void *)(a1 + 152) = *(void *)(a2 + 152);
  *(unsigned char *)(a1 + 160) = *(unsigned char *)(a2 + 160);
  *(unsigned char *)(a1 + 176) = *(unsigned char *)(a2 + 176);
  *(void *)(a1 + 168) = *(void *)(a2 + 168);
  uint64_t v12 = *(void *)(a2 + 184);
  *(unsigned char *)(a1 + 192) = *(unsigned char *)(a2 + 192);
  *(void *)(a1 + 184) = v12;
  *(unsigned char *)(a1 + 208) = *(unsigned char *)(a2 + 208);
  *(void *)(a1 + 200) = *(void *)(a2 + 200);
  *(unsigned char *)(a1 + 224) = *(unsigned char *)(a2 + 224);
  *(void *)(a1 + 216) = *(void *)(a2 + 216);
  *(void *)(a1 + 232) = *(void *)(a2 + 232);
  *(_WORD *)(a1 + 240) = *(_WORD *)(a2 + 240);
  uint64_t v13 = a3[24];
  uint64_t v14 = a1 + v13;
  uint64_t v15 = a2 + v13;
  *(_OWORD *)(a1 + 40) = v9;
  swift_bridgeObjectRetain();
  uint64_t v16 = sub_10000588C(&qword_101654C68);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v16 - 8) + 16))(v14, v15, v16);
  uint64_t v17 = a3[25];
  uint64_t v18 = a3[26];
  uint64_t v19 = a1 + v17;
  uint64_t v20 = a2 + v17;
  *(void *)uint64_t v19 = *(void *)v20;
  *(unsigned char *)(v19 + 8) = *(unsigned char *)(v20 + 8);
  uint64_t v21 = a1 + v18;
  uint64_t v22 = a2 + v18;
  *(void *)uint64_t v21 = *(void *)v22;
  *(unsigned char *)(v21 + 8) = *(unsigned char *)(v22 + 8);
  uint64_t v23 = a3[27];
  uint64_t v24 = a3[28];
  uint64_t v25 = a1 + v23;
  uint64_t v26 = a2 + v23;
  *(void *)uint64_t v25 = *(void *)v26;
  *(unsigned char *)(v25 + 8) = *(unsigned char *)(v26 + 8);
  uint64_t v27 = a1 + v24;
  uint64_t v28 = a2 + v24;
  *(unsigned char *)(v27 + 8) = *(unsigned char *)(v28 + 8);
  *(void *)uint64_t v27 = *(void *)v28;
  uint64_t v29 = a3[29];
  uint64_t v30 = a3[30];
  uint64_t v31 = a1 + v29;
  uint64_t v32 = a2 + v29;
  *(void *)uint64_t v31 = *(void *)v32;
  *(unsigned char *)(v31 + 8) = *(unsigned char *)(v32 + 8);
  uint64_t v33 = a1 + v30;
  uint64_t v34 = a2 + v30;
  *(void *)uint64_t v33 = *(void *)v34;
  *(unsigned char *)(v33 + 8) = *(unsigned char *)(v34 + 8);
  uint64_t v35 = a3[31];
  uint64_t v36 = a3[32];
  uint64_t v37 = a1 + v35;
  uint64_t v38 = a2 + v35;
  *(void *)uint64_t v37 = *(void *)v38;
  *(unsigned char *)(v37 + 8) = *(unsigned char *)(v38 + 8);
  uint64_t v39 = a1 + v36;
  uint64_t v40 = a2 + v36;
  *(void *)uint64_t v39 = *(void *)v40;
  *(unsigned char *)(v39 + 8) = *(unsigned char *)(v40 + 8);
  uint64_t v41 = a3[33];
  uint64_t v42 = a3[34];
  uint64_t v43 = a1 + v41;
  uint64_t v44 = a2 + v41;
  *(void *)uint64_t v43 = *(void *)v44;
  *(unsigned char *)(v43 + 8) = *(unsigned char *)(v44 + 8);
  uint64_t v45 = a1 + v42;
  uint64_t v46 = a2 + v42;
  *(void *)uint64_t v45 = *(void *)v46;
  *(unsigned char *)(v45 + 8) = *(unsigned char *)(v46 + 8);
  uint64_t v47 = a3[35];
  uint64_t v48 = a3[36];
  uint64_t v49 = a1 + v47;
  uint64_t v50 = a2 + v47;
  *(void *)uint64_t v49 = *(void *)v50;
  *(unsigned char *)(v49 + 8) = *(unsigned char *)(v50 + 8);
  *(unsigned char *)(a1 + v48) = *(unsigned char *)(a2 + v48);
  uint64_t v51 = a3[37];
  uint64_t v52 = a3[38];
  uint64_t v53 = a1 + v51;
  uint64_t v54 = a2 + v51;
  *(void *)uint64_t v53 = *(void *)v54;
  *(unsigned char *)(v53 + 8) = *(unsigned char *)(v54 + 8);
  uint64_t v55 = a1 + v52;
  uint64_t v56 = a2 + v52;
  *(void *)uint64_t v55 = *(void *)v56;
  *(unsigned char *)(v55 + 8) = *(unsigned char *)(v56 + 8);
  uint64_t v57 = a3[39];
  uint64_t v58 = a3[40];
  uint64_t v59 = a1 + v57;
  uint64_t v60 = a2 + v57;
  *(void *)uint64_t v59 = *(void *)v60;
  *(unsigned char *)(v59 + 8) = *(unsigned char *)(v60 + 8);
  *(unsigned char *)(a1 + v58) = *(unsigned char *)(a2 + v58);
  uint64_t v61 = a3[41];
  uint64_t v62 = a3[42];
  uint64_t v63 = a1 + v61;
  uint64_t v64 = a2 + v61;
  *(void *)uint64_t v63 = *(void *)v64;
  *(unsigned char *)(v63 + 8) = *(unsigned char *)(v64 + 8);
  uint64_t v65 = a1 + v62;
  uint64_t v66 = a2 + v62;
  *(void *)uint64_t v65 = *(void *)v66;
  *(unsigned char *)(v65 + 8) = *(unsigned char *)(v66 + 8);
  uint64_t v67 = a3[43];
  uint64_t v68 = a3[44];
  uint64_t v69 = a1 + v67;
  uint64_t v70 = a2 + v67;
  *(void *)uint64_t v69 = *(void *)v70;
  *(unsigned char *)(v69 + 8) = *(unsigned char *)(v70 + 8);
  uint64_t v71 = a1 + v68;
  uint64_t v72 = a2 + v68;
  *(void *)uint64_t v71 = *(void *)v72;
  *(unsigned char *)(v71 + 8) = *(unsigned char *)(v72 + 8);
  uint64_t v73 = a3[45];
  uint64_t v74 = a3[46];
  uint64_t v75 = a1 + v73;
  uint64_t v76 = (uint64_t *)(a2 + v73);
  uint64_t v77 = *v76;
  *(unsigned char *)(v75 + 8) = *((unsigned char *)v76 + 8);
  *(void *)uint64_t v75 = v77;
  uint64_t v78 = a1 + v74;
  uint64_t v79 = a2 + v74;
  *(void *)uint64_t v78 = *(void *)v79;
  *(unsigned char *)(v78 + 8) = *(unsigned char *)(v79 + 8);
  uint64_t v80 = a3[47];
  uint64_t v81 = a3[48];
  uint64_t v82 = a1 + v80;
  uint64_t v83 = a2 + v80;
  *(void *)uint64_t v82 = *(void *)v83;
  *(unsigned char *)(v82 + 8) = *(unsigned char *)(v83 + 8);
  uint64_t v84 = a1 + v81;
  uint64_t v85 = a2 + v81;
  *(void *)uint64_t v84 = *(void *)v85;
  *(unsigned char *)(v84 + 8) = *(unsigned char *)(v85 + 8);
  uint64_t v86 = a3[49];
  uint64_t v87 = a3[50];
  uint64_t v88 = a1 + v86;
  uint64_t v89 = a2 + v86;
  *(void *)uint64_t v88 = *(void *)v89;
  *(unsigned char *)(v88 + 8) = *(unsigned char *)(v89 + 8);
  uint64_t v90 = a1 + v87;
  uint64_t v91 = a2 + v87;
  *(void *)uint64_t v90 = *(void *)v91;
  *(unsigned char *)(v90 + 8) = *(unsigned char *)(v91 + 8);
  uint64_t v92 = a3[51];
  uint64_t v93 = a3[52];
  uint64_t v94 = a1 + v92;
  uint64_t v95 = a2 + v92;
  *(void *)uint64_t v94 = *(void *)v95;
  *(unsigned char *)(v94 + 8) = *(unsigned char *)(v95 + 8);
  uint64_t v96 = a1 + v93;
  uint64_t v97 = a2 + v93;
  *(void *)uint64_t v96 = *(void *)v97;
  *(unsigned char *)(v96 + 8) = *(unsigned char *)(v97 + 8);
  uint64_t v98 = a3[53];
  uint64_t v99 = a3[54];
  uint64_t v100 = a1 + v98;
  uint64_t v101 = a2 + v98;
  *(void *)uint64_t v100 = *(void *)v101;
  *(unsigned char *)(v100 + 8) = *(unsigned char *)(v101 + 8);
  uint64_t v102 = a1 + v99;
  uint64_t v103 = a2 + v99;
  *(void *)uint64_t v102 = *(void *)v103;
  *(unsigned char *)(v102 + 8) = *(unsigned char *)(v103 + 8);
  uint64_t v104 = a3[56];
  *(unsigned char *)(a1 + a3[55]) = *(unsigned char *)(a2 + a3[55]);
  uint64_t v105 = a1 + v104;
  uint64_t v106 = a2 + v104;
  *(void *)uint64_t v105 = *(void *)v106;
  *(unsigned char *)(v105 + 8) = *(unsigned char *)(v106 + 8);
  uint64_t v107 = a3[57];
  uint64_t v108 = a3[58];
  uint64_t v109 = a1 + v107;
  uint64_t v110 = a2 + v107;
  *(void *)uint64_t v109 = *(void *)v110;
  *(unsigned char *)(v109 + 8) = *(unsigned char *)(v110 + 8);
  uint64_t v111 = a1 + v108;
  uint64_t v112 = a2 + v108;
  *(void *)uint64_t v111 = *(void *)v112;
  *(unsigned char *)(v111 + 8) = *(unsigned char *)(v112 + 8);
  uint64_t v113 = a3[59];
  uint64_t v114 = a3[60];
  uint64_t v115 = a1 + v113;
  uint64_t v116 = a2 + v113;
  *(void *)uint64_t v115 = *(void *)v116;
  *(unsigned char *)(v115 + 8) = *(unsigned char *)(v116 + 8);
  uint64_t v117 = a1 + v114;
  v118 = (uint64_t *)(a2 + v114);
  uint64_t v119 = *v118;
  *(unsigned char *)(v117 + 8) = *((unsigned char *)v118 + 8);
  *(void *)uint64_t v117 = v119;
  uint64_t v120 = a3[61];
  uint64_t v121 = a3[62];
  uint64_t v122 = a1 + v120;
  uint64_t v123 = a2 + v120;
  *(void *)uint64_t v122 = *(void *)v123;
  *(unsigned char *)(v122 + 8) = *(unsigned char *)(v123 + 8);
  *(unsigned char *)(a1 + v121) = *(unsigned char *)(a2 + v121);
  uint64_t v124 = a3[64];
  *(unsigned char *)(a1 + a3[63]) = *(unsigned char *)(a2 + a3[63]);
  uint64_t v125 = a1 + v124;
  uint64_t v126 = a2 + v124;
  uint64_t v127 = *(void *)(v126 + 48);
  if (v127)
  {
    long long v128 = *(_OWORD *)(v126 + 16);
    *(_OWORD *)uint64_t v125 = *(_OWORD *)v126;
    *(_OWORD *)(v125 + 16) = v128;
    *(_OWORD *)(v125 + 32) = *(_OWORD *)(v126 + 32);
    *(void *)(v125 + 48) = v127;
    *(_OWORD *)(v125 + 56) = *(_OWORD *)(v126 + 56);
    *(_OWORD *)(v125 + 72) = *(_OWORD *)(v126 + 72);
    *(_OWORD *)(v125 + 88) = *(_OWORD *)(v126 + 88);
    *(void *)(v125 + 104) = *(void *)(v126 + 104);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  else
  {
    long long v129 = *(_OWORD *)(v126 + 80);
    *(_OWORD *)(v125 + 64) = *(_OWORD *)(v126 + 64);
    *(_OWORD *)(v125 + 80) = v129;
    *(_OWORD *)(v125 + 96) = *(_OWORD *)(v126 + 96);
    long long v130 = *(_OWORD *)(v126 + 16);
    *(_OWORD *)uint64_t v125 = *(_OWORD *)v126;
    *(_OWORD *)(v125 + 16) = v130;
    long long v131 = *(_OWORD *)(v126 + 48);
    *(_OWORD *)(v125 + 32) = *(_OWORD *)(v126 + 32);
    *(_OWORD *)(v125 + 48) = v131;
  }
  uint64_t v132 = a3[65];
  uint64_t v133 = a1 + v132;
  uint64_t v134 = a2 + v132;
  *(void *)uint64_t v133 = *(void *)v134;
  *(unsigned char *)(v133 + 8) = *(unsigned char *)(v134 + 8);
  uint64_t v135 = a3[66];
  uint64_t v136 = a1 + v135;
  uint64_t v137 = a2 + v135;
  *(void *)uint64_t v136 = *(void *)v137;
  *(unsigned char *)(v136 + 8) = *(unsigned char *)(v137 + 8);
  uint64_t v138 = a3[67];
  uint64_t v139 = a1 + v138;
  uint64_t v140 = a2 + v138;
  *(void *)uint64_t v139 = *(void *)v140;
  *(unsigned char *)(v139 + 8) = *(unsigned char *)(v140 + 8);
  uint64_t v141 = a3[68];
  uint64_t v142 = a1 + v141;
  uint64_t v143 = a2 + v141;
  *(unsigned char *)(v142 + 8) = *(unsigned char *)(v143 + 8);
  *(void *)uint64_t v142 = *(void *)v143;
  uint64_t v144 = a3[69];
  uint64_t v145 = a1 + v144;
  uint64_t v146 = a2 + v144;
  *(void *)uint64_t v145 = *(void *)v146;
  *(unsigned char *)(v145 + 8) = *(unsigned char *)(v146 + 8);
  uint64_t v147 = a3[70];
  uint64_t v148 = a1 + v147;
  uint64_t v149 = a2 + v147;
  *(void *)uint64_t v148 = *(void *)v149;
  *(unsigned char *)(v148 + 8) = *(unsigned char *)(v149 + 8);
  uint64_t v150 = a3[71];
  uint64_t v151 = a1 + v150;
  uint64_t v152 = a2 + v150;
  *(void *)uint64_t v151 = *(void *)v152;
  *(unsigned char *)(v151 + 8) = *(unsigned char *)(v152 + 8);
  uint64_t v153 = a3[72];
  uint64_t v154 = a1 + v153;
  uint64_t v155 = a2 + v153;
  *(void *)uint64_t v154 = *(void *)v155;
  *(unsigned char *)(v154 + 8) = *(unsigned char *)(v155 + 8);
  uint64_t v156 = a3[73];
  uint64_t v157 = a1 + v156;
  uint64_t v158 = a2 + v156;
  *(void *)uint64_t v157 = *(void *)v158;
  *(unsigned char *)(v157 + 8) = *(unsigned char *)(v158 + 8);
  uint64_t v159 = a3[74];
  uint64_t v160 = a1 + v159;
  uint64_t v161 = a2 + v159;
  *(void *)uint64_t v160 = *(void *)v161;
  *(unsigned char *)(v160 + 8) = *(unsigned char *)(v161 + 8);
  uint64_t v162 = a3[75];
  uint64_t v163 = a1 + v162;
  uint64_t v164 = a2 + v162;
  *(void *)uint64_t v163 = *(void *)v164;
  *(unsigned char *)(v163 + 8) = *(unsigned char *)(v164 + 8);
  uint64_t v165 = a3[76];
  uint64_t v166 = a1 + v165;
  uint64_t v167 = a2 + v165;
  *(void *)uint64_t v166 = *(void *)v167;
  *(unsigned char *)(v166 + 8) = *(unsigned char *)(v167 + 8);
  uint64_t v168 = a3[77];
  uint64_t v169 = a1 + v168;
  uint64_t v170 = a2 + v168;
  *(void *)uint64_t v169 = *(void *)v170;
  *(unsigned char *)(v169 + 8) = *(unsigned char *)(v170 + 8);
  uint64_t v171 = a3[78];
  uint64_t v172 = a1 + v171;
  uint64_t v173 = a2 + v171;
  *(void *)uint64_t v172 = *(void *)v173;
  *(unsigned char *)(v172 + 8) = *(unsigned char *)(v173 + 8);
  uint64_t v174 = a3[79];
  uint64_t v175 = a1 + v174;
  uint64_t v176 = a2 + v174;
  *(void *)uint64_t v175 = *(void *)v176;
  *(unsigned char *)(v175 + 8) = *(unsigned char *)(v176 + 8);
  uint64_t v177 = a3[80];
  uint64_t v178 = a1 + v177;
  uint64_t v179 = a2 + v177;
  *(void *)uint64_t v178 = *(void *)v179;
  *(unsigned char *)(v178 + 8) = *(unsigned char *)(v179 + 8);
  uint64_t v180 = a3[81];
  uint64_t v181 = a1 + v180;
  uint64_t v182 = a2 + v180;
  *(void *)uint64_t v181 = *(void *)v182;
  *(unsigned char *)(v181 + 8) = *(unsigned char *)(v182 + 8);
  uint64_t v183 = a3[82];
  uint64_t v184 = a1 + v183;
  uint64_t v185 = a2 + v183;
  *(void *)uint64_t v184 = *(void *)v185;
  *(unsigned char *)(v184 + 8) = *(unsigned char *)(v185 + 8);
  uint64_t v186 = a3[83];
  uint64_t v187 = a1 + v186;
  uint64_t v188 = a2 + v186;
  *(void *)uint64_t v187 = *(void *)v188;
  *(unsigned char *)(v187 + 8) = *(unsigned char *)(v188 + 8);
  *(unsigned char *)(a1 + a3[84]) = *(unsigned char *)(a2 + a3[84]);
  *(unsigned char *)(a1 + a3[85]) = *(unsigned char *)(a2 + a3[85]);
  *(unsigned char *)(a1 + a3[86]) = *(unsigned char *)(a2 + a3[86]);
  uint64_t v189 = a3[87];
  uint64_t v190 = a1 + v189;
  uint64_t v191 = a2 + v189;
  *(void *)uint64_t v190 = *(void *)v191;
  *(unsigned char *)(v190 + 8) = *(unsigned char *)(v191 + 8);
  uint64_t v192 = a3[88];
  uint64_t v193 = a1 + v192;
  uint64_t v194 = a2 + v192;
  *(void *)uint64_t v193 = *(void *)v194;
  *(unsigned char *)(v193 + 8) = *(unsigned char *)(v194 + 8);
  uint64_t v195 = a3[89];
  uint64_t v196 = a1 + v195;
  uint64_t v197 = a2 + v195;
  *(void *)uint64_t v196 = *(void *)v197;
  *(unsigned char *)(v196 + 8) = *(unsigned char *)(v197 + 8);
  uint64_t v198 = a3[90];
  uint64_t v199 = a1 + v198;
  uint64_t v200 = a2 + v198;
  *(void *)uint64_t v199 = *(void *)v200;
  *(unsigned char *)(v199 + 8) = *(unsigned char *)(v200 + 8);
  uint64_t v201 = a3[91];
  uint64_t v202 = a1 + v201;
  uint64_t v203 = (uint64_t *)(a2 + v201);
  uint64_t v204 = *v203;
  *(unsigned char *)(v202 + 8) = *((unsigned char *)v203 + 8);
  *(void *)uint64_t v202 = v204;
  uint64_t v205 = a3[92];
  uint64_t v206 = a1 + v205;
  uint64_t v207 = a2 + v205;
  *(void *)uint64_t v206 = *(void *)v207;
  *(unsigned char *)(v206 + 8) = *(unsigned char *)(v207 + 8);
  uint64_t v208 = a3[93];
  uint64_t v209 = a1 + v208;
  uint64_t v210 = a2 + v208;
  *(void *)uint64_t v209 = *(void *)v210;
  *(unsigned char *)(v209 + 8) = *(unsigned char *)(v210 + 8);
  uint64_t v211 = a3[94];
  uint64_t v212 = a1 + v211;
  uint64_t v213 = a2 + v211;
  *(void *)uint64_t v212 = *(void *)v213;
  *(unsigned char *)(v212 + 8) = *(unsigned char *)(v213 + 8);
  uint64_t v214 = a3[95];
  uint64_t v215 = a1 + v214;
  uint64_t v216 = a2 + v214;
  *(void *)uint64_t v215 = *(void *)v216;
  *(unsigned char *)(v215 + 8) = *(unsigned char *)(v216 + 8);
  *(unsigned char *)(a1 + a3[96]) = *(unsigned char *)(a2 + a3[96]);
  uint64_t v217 = a3[97];
  uint64_t v218 = a1 + v217;
  uint64_t v219 = a2 + v217;
  *(void *)uint64_t v218 = *(void *)v219;
  *(unsigned char *)(v218 + 8) = *(unsigned char *)(v219 + 8);
  uint64_t v220 = a3[98];
  uint64_t v221 = a1 + v220;
  uint64_t v222 = a2 + v220;
  *(void *)uint64_t v221 = *(void *)v222;
  *(unsigned char *)(v221 + 8) = *(unsigned char *)(v222 + 8);
  uint64_t v223 = a3[99];
  uint64_t v224 = a1 + v223;
  uint64_t v225 = a2 + v223;
  *(void *)uint64_t v224 = *(void *)v225;
  uint64_t v226 = a3[100];
  char v227 = *(unsigned char *)(a2 + v226);
  *(unsigned char *)(v224 + 8) = *(unsigned char *)(v225 + 8);
  *(unsigned char *)(a1 + v226) = v227;
  *(unsigned char *)(a1 + a3[101]) = *(unsigned char *)(a2 + a3[101]);
  *(unsigned char *)(a1 + a3[102]) = *(unsigned char *)(a2 + a3[102]);
  uint64_t v228 = a3[103];
  uint64_t v229 = a1 + v228;
  uint64_t v230 = a2 + v228;
  *(void *)uint64_t v229 = *(void *)v230;
  *(unsigned char *)(v229 + 8) = *(unsigned char *)(v230 + 8);
  uint64_t v231 = a3[104];
  uint64_t v232 = a1 + v231;
  uint64_t v233 = a2 + v231;
  *(void *)uint64_t v232 = *(void *)v233;
  *(unsigned char *)(v232 + 8) = *(unsigned char *)(v233 + 8);
  uint64_t v234 = a3[105];
  uint64_t v235 = a1 + v234;
  uint64_t v236 = a2 + v234;
  *(void *)uint64_t v235 = *(void *)v236;
  *(unsigned char *)(v235 + 8) = *(unsigned char *)(v236 + 8);
  uint64_t v237 = a3[106];
  uint64_t v238 = a1 + v237;
  uint64_t v239 = a2 + v237;
  *(void *)uint64_t v238 = *(void *)v239;
  *(unsigned char *)(v238 + 8) = *(unsigned char *)(v239 + 8);
  *(unsigned char *)(a1 + a3[107]) = *(unsigned char *)(a2 + a3[107]);
  uint64_t v240 = a3[108];
  uint64_t v241 = a1 + v240;
  uint64_t v242 = a2 + v240;
  *(void *)uint64_t v241 = *(void *)v242;
  *(unsigned char *)(v241 + 8) = *(unsigned char *)(v242 + 8);
  *(void *)(a1 + a3[109]) = *(void *)(a2 + a3[109]);
  uint64_t v243 = a3[110];
  uint64_t v244 = a1 + v243;
  uint64_t v245 = a2 + v243;
  *(void *)uint64_t v244 = *(void *)v245;
  *(unsigned char *)(v244 + 8) = *(unsigned char *)(v245 + 8);
  *(unsigned char *)(a1 + a3[111]) = *(unsigned char *)(a2 + a3[111]);
  *(void *)(a1 + a3[112]) = *(void *)(a2 + a3[112]);
  uint64_t v246 = a3[113];
  uint64_t v247 = a1 + v246;
  uint64_t v248 = a2 + v246;
  *(void *)uint64_t v247 = *(void *)v248;
  *(unsigned char *)(v247 + 8) = *(unsigned char *)(v248 + 8);
  uint64_t v249 = a3[114];
  uint64_t v250 = a1 + v249;
  uint64_t v251 = a2 + v249;
  *(void *)uint64_t v250 = *(void *)v251;
  *(unsigned char *)(v250 + 8) = *(unsigned char *)(v251 + 8);
  *(unsigned char *)(a1 + a3[115]) = *(unsigned char *)(a2 + a3[115]);
  *(unsigned char *)(a1 + a3[116]) = *(unsigned char *)(a2 + a3[116]);
  uint64_t v252 = a3[117];
  uint64_t v253 = a1 + v252;
  uint64_t v254 = a2 + v252;
  *(void *)uint64_t v253 = *(void *)v254;
  *(unsigned char *)(v253 + 8) = *(unsigned char *)(v254 + 8);
  uint64_t v255 = a3[118];
  uint64_t v256 = a1 + v255;
  uint64_t v257 = a2 + v255;
  *(void *)uint64_t v256 = *(void *)v257;
  *(unsigned char *)(v256 + 8) = *(unsigned char *)(v257 + 8);
  uint64_t v258 = a3[119];
  uint64_t v259 = a1 + v258;
  uint64_t v260 = a2 + v258;
  *(void *)uint64_t v259 = *(void *)v260;
  *(unsigned char *)(v259 + 8) = *(unsigned char *)(v260 + 8);
  uint64_t v261 = a3[120];
  uint64_t v262 = a1 + v261;
  uint64_t v263 = a2 + v261;
  *(void *)uint64_t v262 = *(void *)v263;
  *(unsigned char *)(v262 + 8) = *(unsigned char *)(v263 + 8);
  uint64_t v264 = a3[121];
  uint64_t v265 = a1 + v264;
  uint64_t v266 = (uint64_t *)(a2 + v264);
  uint64_t v267 = *v266;
  *(unsigned char *)(v265 + 8) = *((unsigned char *)v266 + 8);
  *(void *)uint64_t v265 = v267;
  uint64_t v268 = a3[122];
  uint64_t v269 = a1 + v268;
  uint64_t v270 = a2 + v268;
  *(void *)uint64_t v269 = *(void *)v270;
  *(unsigned char *)(v269 + 8) = *(unsigned char *)(v270 + 8);
  uint64_t v271 = a3[123];
  uint64_t v272 = a1 + v271;
  uint64_t v273 = a2 + v271;
  *(void *)uint64_t v272 = *(void *)v273;
  *(unsigned char *)(v272 + 8) = *(unsigned char *)(v273 + 8);
  uint64_t v274 = a3[124];
  uint64_t v275 = a1 + v274;
  uint64_t v276 = a2 + v274;
  *(void *)uint64_t v275 = *(void *)v276;
  *(unsigned char *)(v275 + 8) = *(unsigned char *)(v276 + 8);
  uint64_t v277 = a3[125];
  uint64_t v278 = a1 + v277;
  uint64_t v279 = a2 + v277;
  *(void *)uint64_t v278 = *(void *)v279;
  *(unsigned char *)(v278 + 8) = *(unsigned char *)(v279 + 8);
  uint64_t v280 = a3[126];
  uint64_t v281 = a1 + v280;
  uint64_t v282 = a2 + v280;
  *(void *)uint64_t v281 = *(void *)v282;
  *(unsigned char *)(v281 + 8) = *(unsigned char *)(v282 + 8);
  uint64_t v283 = a3[127];
  uint64_t v284 = a1 + v283;
  uint64_t v285 = a2 + v283;
  *(void *)uint64_t v284 = *(void *)v285;
  *(unsigned char *)(v284 + 8) = *(unsigned char *)(v285 + 8);
  uint64_t v286 = a3[128];
  uint64_t v287 = a1 + v286;
  uint64_t v288 = a2 + v286;
  *(void *)uint64_t v287 = *(void *)v288;
  *(unsigned char *)(v287 + 8) = *(unsigned char *)(v288 + 8);
  uint64_t v289 = a3[129];
  uint64_t v290 = a1 + v289;
  uint64_t v291 = a2 + v289;
  *(void *)uint64_t v290 = *(void *)v291;
  *(unsigned char *)(v290 + 8) = *(unsigned char *)(v291 + 8);
  uint64_t v292 = a3[130];
  uint64_t v293 = a1 + v292;
  uint64_t v294 = a2 + v292;
  *(void *)uint64_t v293 = *(void *)v294;
  *(unsigned char *)(v293 + 8) = *(unsigned char *)(v294 + 8);
  uint64_t v295 = a3[131];
  uint64_t v296 = a1 + v295;
  uint64_t v297 = a2 + v295;
  *(void *)uint64_t v296 = *(void *)v297;
  *(unsigned char *)(v296 + 8) = *(unsigned char *)(v297 + 8);
  uint64_t v298 = a3[132];
  uint64_t v299 = a1 + v298;
  uint64_t v300 = a2 + v298;
  *(void *)uint64_t v299 = *(void *)v300;
  *(unsigned char *)(v299 + 8) = *(unsigned char *)(v300 + 8);
  uint64_t v301 = a3[133];
  uint64_t v302 = a1 + v301;
  uint64_t v303 = a2 + v301;
  *(void *)uint64_t v302 = *(void *)v303;
  *(unsigned char *)(v302 + 8) = *(unsigned char *)(v303 + 8);
  uint64_t v304 = a3[134];
  uint64_t v305 = a1 + v304;
  uint64_t v306 = a2 + v304;
  *(void *)uint64_t v305 = *(void *)v306;
  *(unsigned char *)(v305 + 8) = *(unsigned char *)(v306 + 8);
  *(unsigned char *)(a1 + a3[135]) = *(unsigned char *)(a2 + a3[135]);
  *(unsigned char *)(a1 + a3[136]) = *(unsigned char *)(a2 + a3[136]);
  uint64_t v307 = a3[137];
  uint64_t v308 = a1 + v307;
  uint64_t v309 = a2 + v307;
  *(void *)uint64_t v308 = *(void *)v309;
  *(unsigned char *)(v308 + 8) = *(unsigned char *)(v309 + 8);
  uint64_t v310 = a3[138];
  uint64_t v311 = a1 + v310;
  uint64_t v312 = a2 + v310;
  *(void *)uint64_t v311 = *(void *)v312;
  *(unsigned char *)(v311 + 8) = *(unsigned char *)(v312 + 8);
  *(unsigned char *)(a1 + a3[139]) = *(unsigned char *)(a2 + a3[139]);
  uint64_t v313 = a3[140];
  uint64_t v314 = a1 + v313;
  uint64_t v315 = a2 + v313;
  *(_DWORD *)uint64_t v314 = *(_DWORD *)v315;
  *(unsigned char *)(v314 + 4) = *(unsigned char *)(v315 + 4);
  uint64_t v316 = a3[141];
  uint64_t v317 = a1 + v316;
  uint64_t v318 = a2 + v316;
  *(void *)uint64_t v317 = *(void *)v318;
  *(unsigned char *)(v317 + 8) = *(unsigned char *)(v318 + 8);
  uint64_t v319 = a3[142];
  uint64_t v320 = a1 + v319;
  uint64_t v321 = a2 + v319;
  *(void *)uint64_t v320 = *(void *)v321;
  *(unsigned char *)(v320 + 8) = *(unsigned char *)(v321 + 8);
  uint64_t v322 = a3[143];
  uint64_t v323 = a1 + v322;
  uint64_t v324 = a2 + v322;
  *(void *)uint64_t v323 = *(void *)v324;
  *(unsigned char *)(v323 + 8) = *(unsigned char *)(v324 + 8);
  uint64_t v325 = a3[144];
  uint64_t v326 = a1 + v325;
  uint64_t v327 = (uint64_t *)(a2 + v325);
  uint64_t v328 = *v327;
  *(unsigned char *)(v326 + 8) = *((unsigned char *)v327 + 8);
  *(void *)uint64_t v326 = v328;
  uint64_t v329 = a3[145];
  uint64_t v330 = a1 + v329;
  uint64_t v331 = a2 + v329;
  *(void *)uint64_t v330 = *(void *)v331;
  *(unsigned char *)(v330 + 8) = *(unsigned char *)(v331 + 8);
  uint64_t v332 = a3[146];
  uint64_t v333 = a1 + v332;
  uint64_t v334 = a2 + v332;
  *(void *)uint64_t v333 = *(void *)v334;
  *(unsigned char *)(v333 + 8) = *(unsigned char *)(v334 + 8);
  uint64_t v335 = a3[147];
  uint64_t v336 = a1 + v335;
  uint64_t v337 = a2 + v335;
  *(void *)uint64_t v336 = *(void *)v337;
  uint64_t v338 = a3[148];
  char v339 = *(unsigned char *)(a2 + v338);
  *(unsigned char *)(v336 + 8) = *(unsigned char *)(v337 + 8);
  *(unsigned char *)(a1 + v338) = v339;
  uint64_t v340 = a3[149];
  uint64_t v341 = a1 + v340;
  uint64_t v342 = a2 + v340;
  *(void *)uint64_t v341 = *(void *)v342;
  *(unsigned char *)(v341 + 8) = *(unsigned char *)(v342 + 8);
  uint64_t v343 = a3[150];
  uint64_t v344 = a1 + v343;
  uint64_t v345 = a2 + v343;
  *(void *)uint64_t v344 = *(void *)v345;
  *(unsigned char *)(v344 + 8) = *(unsigned char *)(v345 + 8);
  uint64_t v346 = a3[151];
  uint64_t v347 = (void *)(a1 + v346);
  uint64_t v348 = (void *)(a2 + v346);
  uint64_t v349 = v348[1];
  *uint64_t v347 = *v348;
  v347[1] = v349;
  uint64_t v350 = a3[152];
  uint64_t v351 = a1 + v350;
  uint64_t v352 = a2 + v350;
  *(void *)uint64_t v351 = *(void *)v352;
  *(unsigned char *)(v351 + 8) = *(unsigned char *)(v352 + 8);
  uint64_t v353 = a3[153];
  uint64_t v354 = (void *)(a1 + v353);
  uint64_t v355 = (void *)(a2 + v353);
  uint64_t v356 = v355[1];
  *uint64_t v354 = *v355;
  v354[1] = v356;
  uint64_t v357 = a3[154];
  uint64_t v358 = a1 + v357;
  uint64_t v359 = a2 + v357;
  *(void *)uint64_t v358 = *(void *)v359;
  *(unsigned char *)(v358 + 8) = *(unsigned char *)(v359 + 8);
  *(void *)(a1 + a3[155]) = *(void *)(a2 + a3[155]);
  uint64_t v360 = a3[156];
  uint64_t v361 = a1 + v360;
  uint64_t v362 = a2 + v360;
  *(void *)uint64_t v361 = *(void *)v362;
  *(unsigned char *)(v361 + 8) = *(unsigned char *)(v362 + 8);
  uint64_t v363 = a3[157];
  uint64_t v364 = a1 + v363;
  uint64_t v365 = a2 + v363;
  *(void *)uint64_t v364 = *(void *)v365;
  *(unsigned char *)(v364 + 8) = *(unsigned char *)(v365 + 8);
  uint64_t v366 = a3[158];
  uint64_t v367 = a1 + v366;
  uint64_t v368 = a2 + v366;
  *(void *)uint64_t v367 = *(void *)v368;
  *(unsigned char *)(v367 + 8) = *(unsigned char *)(v368 + 8);
  uint64_t v369 = a3[159];
  uint64_t v370 = (void *)(a1 + v369);
  uint64_t v371 = (void *)(a2 + v369);
  uint64_t v372 = v371[1];
  *uint64_t v370 = *v371;
  v370[1] = v372;
  uint64_t v373 = a3[160];
  uint64_t v374 = a1 + v373;
  uint64_t v375 = a2 + v373;
  *(void *)uint64_t v374 = *(void *)v375;
  *(unsigned char *)(v374 + 8) = *(unsigned char *)(v375 + 8);
  *(unsigned char *)(a1 + a3[161]) = *(unsigned char *)(a2 + a3[161]);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t sub_1009E8DA0(uint64_t a1, uint64_t a2, int *a3)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v6 = *(void *)(a2 + 24);
  unint64_t v7 = *(void *)(a2 + 32);
  sub_1000361E0(v6, v7);
  uint64_t v8 = *(void *)(a1 + 24);
  unint64_t v9 = *(void *)(a1 + 32);
  *(void *)(a1 + 24) = v6;
  *(void *)(a1 + 32) = v7;
  sub_10001CFB8(v8, v9);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  uint64_t v10 = *(void *)(a2 + 64);
  *(unsigned char *)(a1 + 72) = *(unsigned char *)(a2 + 72);
  *(void *)(a1 + 64) = v10;
  *(void *)(a1 + 80) = *(void *)(a2 + 80);
  *(unsigned char *)(a1 + 88) = *(unsigned char *)(a2 + 88);
  *(void *)(a1 + 96) = *(void *)(a2 + 96);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v11 = *(void *)(a2 + 104);
  *(unsigned char *)(a1 + 112) = *(unsigned char *)(a2 + 112);
  *(void *)(a1 + 104) = v11;
  uint64_t v12 = *(void *)(a2 + 120);
  *(unsigned char *)(a1 + 128) = *(unsigned char *)(a2 + 128);
  *(void *)(a1 + 120) = v12;
  uint64_t v13 = *(void *)(a2 + 136);
  *(unsigned char *)(a1 + 144) = *(unsigned char *)(a2 + 144);
  *(void *)(a1 + 136) = v13;
  uint64_t v14 = *(void *)(a2 + 152);
  *(unsigned char *)(a1 + 160) = *(unsigned char *)(a2 + 160);
  *(void *)(a1 + 152) = v14;
  uint64_t v15 = *(void *)(a2 + 168);
  *(unsigned char *)(a1 + 176) = *(unsigned char *)(a2 + 176);
  *(void *)(a1 + 168) = v15;
  uint64_t v16 = *(void *)(a2 + 184);
  *(unsigned char *)(a1 + 192) = *(unsigned char *)(a2 + 192);
  *(void *)(a1 + 184) = v16;
  uint64_t v17 = *(void *)(a2 + 200);
  *(unsigned char *)(a1 + 208) = *(unsigned char *)(a2 + 208);
  *(void *)(a1 + 200) = v17;
  uint64_t v18 = *(void *)(a2 + 216);
  *(unsigned char *)(a1 + 224) = *(unsigned char *)(a2 + 224);
  *(void *)(a1 + 216) = v18;
  uint64_t v19 = *(void *)(a2 + 232);
  *(unsigned char *)(a1 + 240) = *(unsigned char *)(a2 + 240);
  *(void *)(a1 + 232) = v19;
  *(unsigned char *)(a1 + 241) = *(unsigned char *)(a2 + 241);
  uint64_t v20 = a3[24];
  uint64_t v21 = a1 + v20;
  uint64_t v22 = a2 + v20;
  uint64_t v23 = sub_10000588C(&qword_101654C68);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v23 - 8) + 24))(v21, v22, v23);
  uint64_t v24 = a3[25];
  uint64_t v25 = a1 + v24;
  uint64_t v26 = (uint64_t *)(a2 + v24);
  uint64_t v27 = *v26;
  *(unsigned char *)(v25 + 8) = *((unsigned char *)v26 + 8);
  *(void *)uint64_t v25 = v27;
  uint64_t v28 = a3[26];
  uint64_t v29 = a1 + v28;
  uint64_t v30 = a2 + v28;
  LOBYTE(v27) = *(unsigned char *)(v30 + 8);
  *(void *)uint64_t v29 = *(void *)v30;
  *(unsigned char *)(v29 + 8) = v27;
  uint64_t v31 = a3[27];
  uint64_t v32 = a1 + v31;
  uint64_t v33 = a2 + v31;
  LOBYTE(v27) = *(unsigned char *)(v33 + 8);
  *(void *)uint64_t v32 = *(void *)v33;
  *(unsigned char *)(v32 + 8) = v27;
  uint64_t v34 = a3[28];
  uint64_t v35 = a1 + v34;
  uint64_t v36 = a2 + v34;
  LOBYTE(v27) = *(unsigned char *)(v36 + 8);
  *(void *)uint64_t v35 = *(void *)v36;
  *(unsigned char *)(v35 + 8) = v27;
  uint64_t v37 = a3[29];
  uint64_t v38 = a1 + v37;
  uint64_t v39 = a2 + v37;
  LOBYTE(v27) = *(unsigned char *)(v39 + 8);
  *(void *)uint64_t v38 = *(void *)v39;
  *(unsigned char *)(v38 + 8) = v27;
  uint64_t v40 = a3[30];
  uint64_t v41 = a1 + v40;
  uint64_t v42 = a2 + v40;
  LOBYTE(v27) = *(unsigned char *)(v42 + 8);
  *(void *)uint64_t v41 = *(void *)v42;
  *(unsigned char *)(v41 + 8) = v27;
  uint64_t v43 = a3[31];
  uint64_t v44 = a1 + v43;
  uint64_t v45 = a2 + v43;
  LOBYTE(v27) = *(unsigned char *)(v45 + 8);
  *(void *)uint64_t v44 = *(void *)v45;
  *(unsigned char *)(v44 + 8) = v27;
  uint64_t v46 = a3[32];
  uint64_t v47 = a1 + v46;
  uint64_t v48 = a2 + v46;
  LOBYTE(v27) = *(unsigned char *)(v48 + 8);
  *(void *)uint64_t v47 = *(void *)v48;
  *(unsigned char *)(v47 + 8) = v27;
  uint64_t v49 = a3[33];
  uint64_t v50 = a1 + v49;
  uint64_t v51 = a2 + v49;
  LOBYTE(v27) = *(unsigned char *)(v51 + 8);
  *(void *)uint64_t v50 = *(void *)v51;
  *(unsigned char *)(v50 + 8) = v27;
  uint64_t v52 = a3[34];
  uint64_t v53 = a1 + v52;
  uint64_t v54 = a2 + v52;
  LOBYTE(v27) = *(unsigned char *)(v54 + 8);
  *(void *)uint64_t v53 = *(void *)v54;
  *(unsigned char *)(v53 + 8) = v27;
  uint64_t v55 = a3[35];
  uint64_t v56 = a1 + v55;
  uint64_t v57 = a2 + v55;
  LOBYTE(v27) = *(unsigned char *)(v57 + 8);
  *(void *)uint64_t v56 = *(void *)v57;
  *(unsigned char *)(v56 + 8) = v27;
  *(unsigned char *)(a1 + a3[36]) = *(unsigned char *)(a2 + a3[36]);
  uint64_t v58 = a3[37];
  uint64_t v59 = a1 + v58;
  uint64_t v60 = (uint64_t *)(a2 + v58);
  uint64_t v61 = *v60;
  *(unsigned char *)(v59 + 8) = *((unsigned char *)v60 + 8);
  *(void *)uint64_t v59 = v61;
  uint64_t v62 = a3[38];
  uint64_t v63 = a1 + v62;
  uint64_t v64 = a2 + v62;
  LOBYTE(v61) = *(unsigned char *)(v64 + 8);
  *(void *)uint64_t v63 = *(void *)v64;
  *(unsigned char *)(v63 + 8) = v61;
  uint64_t v65 = a3[39];
  uint64_t v66 = a1 + v65;
  uint64_t v67 = a2 + v65;
  LOBYTE(v61) = *(unsigned char *)(v67 + 8);
  *(void *)uint64_t v66 = *(void *)v67;
  *(unsigned char *)(v66 + 8) = v61;
  *(unsigned char *)(a1 + a3[40]) = *(unsigned char *)(a2 + a3[40]);
  uint64_t v68 = a3[41];
  uint64_t v69 = a1 + v68;
  uint64_t v70 = (uint64_t *)(a2 + v68);
  uint64_t v71 = *v70;
  *(unsigned char *)(v69 + 8) = *((unsigned char *)v70 + 8);
  *(void *)uint64_t v69 = v71;
  uint64_t v72 = a3[42];
  uint64_t v73 = a1 + v72;
  uint64_t v74 = a2 + v72;
  LOBYTE(v71) = *(unsigned char *)(v74 + 8);
  *(void *)uint64_t v73 = *(void *)v74;
  *(unsigned char *)(v73 + 8) = v71;
  uint64_t v75 = a3[43];
  uint64_t v76 = a1 + v75;
  uint64_t v77 = a2 + v75;
  LOBYTE(v71) = *(unsigned char *)(v77 + 8);
  *(void *)uint64_t v76 = *(void *)v77;
  *(unsigned char *)(v76 + 8) = v71;
  uint64_t v78 = a3[44];
  uint64_t v79 = a1 + v78;
  uint64_t v80 = a2 + v78;
  LOBYTE(v71) = *(unsigned char *)(v80 + 8);
  *(void *)uint64_t v79 = *(void *)v80;
  *(unsigned char *)(v79 + 8) = v71;
  uint64_t v81 = a3[45];
  uint64_t v82 = a1 + v81;
  uint64_t v83 = a2 + v81;
  LOBYTE(v71) = *(unsigned char *)(v83 + 8);
  *(void *)uint64_t v82 = *(void *)v83;
  *(unsigned char *)(v82 + 8) = v71;
  uint64_t v84 = a3[46];
  uint64_t v85 = a1 + v84;
  uint64_t v86 = a2 + v84;
  LOBYTE(v71) = *(unsigned char *)(v86 + 8);
  *(void *)uint64_t v85 = *(void *)v86;
  *(unsigned char *)(v85 + 8) = v71;
  uint64_t v87 = a3[47];
  uint64_t v88 = a1 + v87;
  uint64_t v89 = a2 + v87;
  LOBYTE(v71) = *(unsigned char *)(v89 + 8);
  *(void *)uint64_t v88 = *(void *)v89;
  *(unsigned char *)(v88 + 8) = v71;
  uint64_t v90 = a3[48];
  uint64_t v91 = a1 + v90;
  uint64_t v92 = a2 + v90;
  LOBYTE(v71) = *(unsigned char *)(v92 + 8);
  *(void *)uint64_t v91 = *(void *)v92;
  *(unsigned char *)(v91 + 8) = v71;
  uint64_t v93 = a3[49];
  uint64_t v94 = a1 + v93;
  uint64_t v95 = a2 + v93;
  LOBYTE(v71) = *(unsigned char *)(v95 + 8);
  *(void *)uint64_t v94 = *(void *)v95;
  *(unsigned char *)(v94 + 8) = v71;
  uint64_t v96 = a3[50];
  uint64_t v97 = a1 + v96;
  uint64_t v98 = a2 + v96;
  LOBYTE(v71) = *(unsigned char *)(v98 + 8);
  *(void *)uint64_t v97 = *(void *)v98;
  *(unsigned char *)(v97 + 8) = v71;
  uint64_t v99 = a3[51];
  uint64_t v100 = a1 + v99;
  uint64_t v101 = a2 + v99;
  LOBYTE(v71) = *(unsigned char *)(v101 + 8);
  *(void *)uint64_t v100 = *(void *)v101;
  *(unsigned char *)(v100 + 8) = v71;
  uint64_t v102 = a3[52];
  uint64_t v103 = a1 + v102;
  uint64_t v104 = a2 + v102;
  LOBYTE(v71) = *(unsigned char *)(v104 + 8);
  *(void *)uint64_t v103 = *(void *)v104;
  *(unsigned char *)(v103 + 8) = v71;
  uint64_t v105 = a3[53];
  uint64_t v106 = a1 + v105;
  uint64_t v107 = a2 + v105;
  LOBYTE(v71) = *(unsigned char *)(v107 + 8);
  *(void *)uint64_t v106 = *(void *)v107;
  *(unsigned char *)(v106 + 8) = v71;
  uint64_t v108 = a3[54];
  uint64_t v109 = a1 + v108;
  uint64_t v110 = a2 + v108;
  LOBYTE(v71) = *(unsigned char *)(v110 + 8);
  *(void *)uint64_t v109 = *(void *)v110;
  *(unsigned char *)(v109 + 8) = v71;
  *(unsigned char *)(a1 + a3[55]) = *(unsigned char *)(a2 + a3[55]);
  uint64_t v111 = a3[56];
  uint64_t v112 = a1 + v111;
  uint64_t v113 = (uint64_t *)(a2 + v111);
  uint64_t v114 = *v113;
  *(unsigned char *)(v112 + 8) = *((unsigned char *)v113 + 8);
  *(void *)uint64_t v112 = v114;
  uint64_t v115 = a3[57];
  uint64_t v116 = a1 + v115;
  uint64_t v117 = a2 + v115;
  LOBYTE(v114) = *(unsigned char *)(v117 + 8);
  *(void *)uint64_t v116 = *(void *)v117;
  *(unsigned char *)(v116 + 8) = v114;
  uint64_t v118 = a3[58];
  uint64_t v119 = a1 + v118;
  uint64_t v120 = a2 + v118;
  LOBYTE(v114) = *(unsigned char *)(v120 + 8);
  *(void *)uint64_t v119 = *(void *)v120;
  *(unsigned char *)(v119 + 8) = v114;
  uint64_t v121 = a3[59];
  uint64_t v122 = a1 + v121;
  uint64_t v123 = a2 + v121;
  LOBYTE(v114) = *(unsigned char *)(v123 + 8);
  *(void *)uint64_t v122 = *(void *)v123;
  *(unsigned char *)(v122 + 8) = v114;
  uint64_t v124 = a3[60];
  uint64_t v125 = a1 + v124;
  uint64_t v126 = a2 + v124;
  LOBYTE(v114) = *(unsigned char *)(v126 + 8);
  *(void *)uint64_t v125 = *(void *)v126;
  *(unsigned char *)(v125 + 8) = v114;
  uint64_t v127 = a3[61];
  uint64_t v128 = a1 + v127;
  uint64_t v129 = a2 + v127;
  LOBYTE(v114) = *(unsigned char *)(v129 + 8);
  *(void *)uint64_t v128 = *(void *)v129;
  *(unsigned char *)(v128 + 8) = v114;
  *(unsigned char *)(a1 + a3[62]) = *(unsigned char *)(a2 + a3[62]);
  *(unsigned char *)(a1 + a3[63]) = *(unsigned char *)(a2 + a3[63]);
  uint64_t v130 = a3[64];
  long long v131 = (void *)(a1 + v130);
  uint64_t v132 = (void *)(a2 + v130);
  uint64_t v133 = *(void *)(a1 + v130 + 48);
  uint64_t v134 = *(void *)(a2 + v130 + 48);
  if (v133)
  {
    if (v134)
    {
      *long long v131 = *v132;
      v131[1] = v132[1];
      v131[2] = v132[2];
      v131[3] = v132[3];
      v131[4] = v132[4];
      v131[5] = v132[5];
      v131[6] = v132[6];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      v131[7] = v132[7];
      v131[8] = v132[8];
      v131[9] = v132[9];
      v131[10] = v132[10];
      v131[11] = v132[11];
      v131[12] = v132[12];
      v131[13] = v132[13];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
    }
    else
    {
      sub_100944118((uint64_t)v131);
      long long v136 = *((_OWORD *)v132 + 1);
      long long v135 = *((_OWORD *)v132 + 2);
      *(_OWORD *)long long v131 = *(_OWORD *)v132;
      *((_OWORD *)v131 + 1) = v136;
      *((_OWORD *)v131 + 2) = v135;
      long long v137 = *((_OWORD *)v132 + 6);
      long long v139 = *((_OWORD *)v132 + 3);
      long long v138 = *((_OWORD *)v132 + 4);
      *((_OWORD *)v131 + 5) = *((_OWORD *)v132 + 5);
      *((_OWORD *)v131 + 6) = v137;
      *((_OWORD *)v131 + 3) = v139;
      *((_OWORD *)v131 + 4) = v138;
    }
  }
  else if (v134)
  {
    *long long v131 = *v132;
    v131[1] = v132[1];
    v131[2] = v132[2];
    v131[3] = v132[3];
    v131[4] = v132[4];
    v131[5] = v132[5];
    v131[6] = v132[6];
    v131[7] = v132[7];
    v131[8] = v132[8];
    v131[9] = v132[9];
    v131[10] = v132[10];
    v131[11] = v132[11];
    v131[12] = v132[12];
    v131[13] = v132[13];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  else
  {
    long long v140 = *(_OWORD *)v132;
    long long v141 = *((_OWORD *)v132 + 2);
    *((_OWORD *)v131 + 1) = *((_OWORD *)v132 + 1);
    *((_OWORD *)v131 + 2) = v141;
    *(_OWORD *)long long v131 = v140;
    long long v142 = *((_OWORD *)v132 + 3);
    long long v143 = *((_OWORD *)v132 + 4);
    long long v144 = *((_OWORD *)v132 + 6);
    *((_OWORD *)v131 + 5) = *((_OWORD *)v132 + 5);
    *((_OWORD *)v131 + 6) = v144;
    *((_OWORD *)v131 + 3) = v142;
    *((_OWORD *)v131 + 4) = v143;
  }
  uint64_t v145 = a3[65];
  uint64_t v146 = a1 + v145;
  uint64_t v147 = (uint64_t *)(a2 + v145);
  uint64_t v148 = *v147;
  *(unsigned char *)(v146 + 8) = *((unsigned char *)v147 + 8);
  *(void *)uint64_t v146 = v148;
  uint64_t v149 = a3[66];
  uint64_t v150 = a1 + v149;
  uint64_t v151 = (uint64_t *)(a2 + v149);
  uint64_t v152 = *v151;
  *(unsigned char *)(v150 + 8) = *((unsigned char *)v151 + 8);
  *(void *)uint64_t v150 = v152;
  uint64_t v153 = a3[67];
  uint64_t v154 = a1 + v153;
  uint64_t v155 = (uint64_t *)(a2 + v153);
  uint64_t v156 = *v155;
  *(unsigned char *)(v154 + 8) = *((unsigned char *)v155 + 8);
  *(void *)uint64_t v154 = v156;
  uint64_t v157 = a3[68];
  uint64_t v158 = a1 + v157;
  uint64_t v159 = (uint64_t *)(a2 + v157);
  uint64_t v160 = *v159;
  *(unsigned char *)(v158 + 8) = *((unsigned char *)v159 + 8);
  *(void *)uint64_t v158 = v160;
  uint64_t v161 = a3[69];
  uint64_t v162 = a1 + v161;
  uint64_t v163 = (uint64_t *)(a2 + v161);
  uint64_t v164 = *v163;
  *(unsigned char *)(v162 + 8) = *((unsigned char *)v163 + 8);
  *(void *)uint64_t v162 = v164;
  uint64_t v165 = a3[70];
  uint64_t v166 = a1 + v165;
  uint64_t v167 = (uint64_t *)(a2 + v165);
  uint64_t v168 = *v167;
  *(unsigned char *)(v166 + 8) = *((unsigned char *)v167 + 8);
  *(void *)uint64_t v166 = v168;
  uint64_t v169 = a3[71];
  uint64_t v170 = a1 + v169;
  uint64_t v171 = (uint64_t *)(a2 + v169);
  uint64_t v172 = *v171;
  *(unsigned char *)(v170 + 8) = *((unsigned char *)v171 + 8);
  *(void *)uint64_t v170 = v172;
  uint64_t v173 = a3[72];
  uint64_t v174 = a1 + v173;
  uint64_t v175 = (uint64_t *)(a2 + v173);
  uint64_t v176 = *v175;
  *(unsigned char *)(v174 + 8) = *((unsigned char *)v175 + 8);
  *(void *)uint64_t v174 = v176;
  uint64_t v177 = a3[73];
  uint64_t v178 = a1 + v177;
  uint64_t v179 = (uint64_t *)(a2 + v177);
  uint64_t v180 = *v179;
  *(unsigned char *)(v178 + 8) = *((unsigned char *)v179 + 8);
  *(void *)uint64_t v178 = v180;
  uint64_t v181 = a3[74];
  uint64_t v182 = a1 + v181;
  uint64_t v183 = (uint64_t *)(a2 + v181);
  uint64_t v184 = *v183;
  *(unsigned char *)(v182 + 8) = *((unsigned char *)v183 + 8);
  *(void *)uint64_t v182 = v184;
  uint64_t v185 = a3[75];
  uint64_t v186 = a1 + v185;
  uint64_t v187 = (uint64_t *)(a2 + v185);
  uint64_t v188 = *v187;
  *(unsigned char *)(v186 + 8) = *((unsigned char *)v187 + 8);
  *(void *)uint64_t v186 = v188;
  uint64_t v189 = a3[76];
  uint64_t v190 = a1 + v189;
  uint64_t v191 = (uint64_t *)(a2 + v189);
  uint64_t v192 = *v191;
  *(unsigned char *)(v190 + 8) = *((unsigned char *)v191 + 8);
  *(void *)uint64_t v190 = v192;
  uint64_t v193 = a3[77];
  uint64_t v194 = a1 + v193;
  uint64_t v195 = (uint64_t *)(a2 + v193);
  uint64_t v196 = *v195;
  *(unsigned char *)(v194 + 8) = *((unsigned char *)v195 + 8);
  *(void *)uint64_t v194 = v196;
  uint64_t v197 = a3[78];
  uint64_t v198 = a1 + v197;
  uint64_t v199 = (uint64_t *)(a2 + v197);
  uint64_t v200 = *v199;
  *(unsigned char *)(v198 + 8) = *((unsigned char *)v199 + 8);
  *(void *)uint64_t v198 = v200;
  uint64_t v201 = a3[79];
  uint64_t v202 = a1 + v201;
  uint64_t v203 = (uint64_t *)(a2 + v201);
  uint64_t v204 = *v203;
  *(unsigned char *)(v202 + 8) = *((unsigned char *)v203 + 8);
  *(void *)uint64_t v202 = v204;
  uint64_t v205 = a3[80];
  uint64_t v206 = a1 + v205;
  uint64_t v207 = (uint64_t *)(a2 + v205);
  uint64_t v208 = *v207;
  *(unsigned char *)(v206 + 8) = *((unsigned char *)v207 + 8);
  *(void *)uint64_t v206 = v208;
  uint64_t v209 = a3[81];
  uint64_t v210 = a1 + v209;
  uint64_t v211 = (uint64_t *)(a2 + v209);
  uint64_t v212 = *v211;
  *(unsigned char *)(v210 + 8) = *((unsigned char *)v211 + 8);
  *(void *)uint64_t v210 = v212;
  uint64_t v213 = a3[82];
  uint64_t v214 = a1 + v213;
  uint64_t v215 = (uint64_t *)(a2 + v213);
  uint64_t v216 = *v215;
  *(unsigned char *)(v214 + 8) = *((unsigned char *)v215 + 8);
  *(void *)uint64_t v214 = v216;
  uint64_t v217 = a3[83];
  uint64_t v218 = a1 + v217;
  uint64_t v219 = (uint64_t *)(a2 + v217);
  uint64_t v220 = *v219;
  *(unsigned char *)(v218 + 8) = *((unsigned char *)v219 + 8);
  *(void *)uint64_t v218 = v220;
  *(unsigned char *)(a1 + a3[84]) = *(unsigned char *)(a2 + a3[84]);
  *(unsigned char *)(a1 + a3[85]) = *(unsigned char *)(a2 + a3[85]);
  *(unsigned char *)(a1 + a3[86]) = *(unsigned char *)(a2 + a3[86]);
  uint64_t v221 = a3[87];
  uint64_t v222 = a1 + v221;
  uint64_t v223 = (uint64_t *)(a2 + v221);
  uint64_t v224 = *v223;
  *(unsigned char *)(v222 + 8) = *((unsigned char *)v223 + 8);
  *(void *)uint64_t v222 = v224;
  uint64_t v225 = a3[88];
  uint64_t v226 = a1 + v225;
  char v227 = (uint64_t *)(a2 + v225);
  uint64_t v228 = *v227;
  *(unsigned char *)(v226 + 8) = *((unsigned char *)v227 + 8);
  *(void *)uint64_t v226 = v228;
  uint64_t v229 = a3[89];
  uint64_t v230 = a1 + v229;
  uint64_t v231 = (uint64_t *)(a2 + v229);
  uint64_t v232 = *v231;
  *(unsigned char *)(v230 + 8) = *((unsigned char *)v231 + 8);
  *(void *)uint64_t v230 = v232;
  uint64_t v233 = a3[90];
  uint64_t v234 = a1 + v233;
  uint64_t v235 = (uint64_t *)(a2 + v233);
  uint64_t v236 = *v235;
  *(unsigned char *)(v234 + 8) = *((unsigned char *)v235 + 8);
  *(void *)uint64_t v234 = v236;
  uint64_t v237 = a3[91];
  uint64_t v238 = a1 + v237;
  uint64_t v239 = (uint64_t *)(a2 + v237);
  uint64_t v240 = *v239;
  *(unsigned char *)(v238 + 8) = *((unsigned char *)v239 + 8);
  *(void *)uint64_t v238 = v240;
  uint64_t v241 = a3[92];
  uint64_t v242 = a1 + v241;
  uint64_t v243 = (uint64_t *)(a2 + v241);
  uint64_t v244 = *v243;
  *(unsigned char *)(v242 + 8) = *((unsigned char *)v243 + 8);
  *(void *)uint64_t v242 = v244;
  uint64_t v245 = a3[93];
  uint64_t v246 = a1 + v245;
  uint64_t v247 = (uint64_t *)(a2 + v245);
  uint64_t v248 = *v247;
  *(unsigned char *)(v246 + 8) = *((unsigned char *)v247 + 8);
  *(void *)uint64_t v246 = v248;
  uint64_t v249 = a3[94];
  uint64_t v250 = a1 + v249;
  uint64_t v251 = (uint64_t *)(a2 + v249);
  uint64_t v252 = *v251;
  *(unsigned char *)(v250 + 8) = *((unsigned char *)v251 + 8);
  *(void *)uint64_t v250 = v252;
  uint64_t v253 = a3[95];
  uint64_t v254 = a1 + v253;
  uint64_t v255 = (uint64_t *)(a2 + v253);
  uint64_t v256 = *v255;
  *(unsigned char *)(v254 + 8) = *((unsigned char *)v255 + 8);
  *(void *)uint64_t v254 = v256;
  *(unsigned char *)(a1 + a3[96]) = *(unsigned char *)(a2 + a3[96]);
  uint64_t v257 = a3[97];
  uint64_t v258 = a1 + v257;
  uint64_t v259 = (uint64_t *)(a2 + v257);
  uint64_t v260 = *v259;
  *(unsigned char *)(v258 + 8) = *((unsigned char *)v259 + 8);
  *(void *)uint64_t v258 = v260;
  uint64_t v261 = a3[98];
  uint64_t v262 = a1 + v261;
  uint64_t v263 = (uint64_t *)(a2 + v261);
  uint64_t v264 = *v263;
  *(unsigned char *)(v262 + 8) = *((unsigned char *)v263 + 8);
  *(void *)uint64_t v262 = v264;
  uint64_t v265 = a3[99];
  uint64_t v266 = a1 + v265;
  uint64_t v267 = (uint64_t *)(a2 + v265);
  uint64_t v268 = *v267;
  *(unsigned char *)(v266 + 8) = *((unsigned char *)v267 + 8);
  *(void *)uint64_t v266 = v268;
  *(unsigned char *)(a1 + a3[100]) = *(unsigned char *)(a2 + a3[100]);
  *(unsigned char *)(a1 + a3[101]) = *(unsigned char *)(a2 + a3[101]);
  *(unsigned char *)(a1 + a3[102]) = *(unsigned char *)(a2 + a3[102]);
  uint64_t v269 = a3[103];
  uint64_t v270 = a1 + v269;
  uint64_t v271 = (uint64_t *)(a2 + v269);
  uint64_t v272 = *v271;
  *(unsigned char *)(v270 + 8) = *((unsigned char *)v271 + 8);
  *(void *)uint64_t v270 = v272;
  uint64_t v273 = a3[104];
  uint64_t v274 = a1 + v273;
  uint64_t v275 = (uint64_t *)(a2 + v273);
  uint64_t v276 = *v275;
  *(unsigned char *)(v274 + 8) = *((unsigned char *)v275 + 8);
  *(void *)uint64_t v274 = v276;
  uint64_t v277 = a3[105];
  uint64_t v278 = a1 + v277;
  uint64_t v279 = (uint64_t *)(a2 + v277);
  uint64_t v280 = *v279;
  *(unsigned char *)(v278 + 8) = *((unsigned char *)v279 + 8);
  *(void *)uint64_t v278 = v280;
  uint64_t v281 = a3[106];
  uint64_t v282 = a1 + v281;
  uint64_t v283 = (uint64_t *)(a2 + v281);
  uint64_t v284 = *v283;
  *(unsigned char *)(v282 + 8) = *((unsigned char *)v283 + 8);
  *(void *)uint64_t v282 = v284;
  *(unsigned char *)(a1 + a3[107]) = *(unsigned char *)(a2 + a3[107]);
  uint64_t v285 = a3[108];
  uint64_t v286 = a1 + v285;
  uint64_t v287 = (uint64_t *)(a2 + v285);
  uint64_t v288 = *v287;
  *(unsigned char *)(v286 + 8) = *((unsigned char *)v287 + 8);
  *(void *)uint64_t v286 = v288;
  *(void *)(a1 + a3[109]) = *(void *)(a2 + a3[109]);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v289 = a3[110];
  uint64_t v290 = a1 + v289;
  uint64_t v291 = (uint64_t *)(a2 + v289);
  uint64_t v292 = *v291;
  *(unsigned char *)(v290 + 8) = *((unsigned char *)v291 + 8);
  *(void *)uint64_t v290 = v292;
  *(unsigned char *)(a1 + a3[111]) = *(unsigned char *)(a2 + a3[111]);
  *(void *)(a1 + a3[112]) = *(void *)(a2 + a3[112]);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v293 = a3[113];
  uint64_t v294 = a1 + v293;
  uint64_t v295 = (uint64_t *)(a2 + v293);
  uint64_t v296 = *v295;
  *(unsigned char *)(v294 + 8) = *((unsigned char *)v295 + 8);
  *(void *)uint64_t v294 = v296;
  uint64_t v297 = a3[114];
  uint64_t v298 = a1 + v297;
  uint64_t v299 = (uint64_t *)(a2 + v297);
  uint64_t v300 = *v299;
  *(unsigned char *)(v298 + 8) = *((unsigned char *)v299 + 8);
  *(void *)uint64_t v298 = v300;
  *(unsigned char *)(a1 + a3[115]) = *(unsigned char *)(a2 + a3[115]);
  *(unsigned char *)(a1 + a3[116]) = *(unsigned char *)(a2 + a3[116]);
  uint64_t v301 = a3[117];
  uint64_t v302 = a1 + v301;
  uint64_t v303 = (uint64_t *)(a2 + v301);
  uint64_t v304 = *v303;
  *(unsigned char *)(v302 + 8) = *((unsigned char *)v303 + 8);
  *(void *)uint64_t v302 = v304;
  uint64_t v305 = a3[118];
  uint64_t v306 = a1 + v305;
  uint64_t v307 = (uint64_t *)(a2 + v305);
  uint64_t v308 = *v307;
  *(unsigned char *)(v306 + 8) = *((unsigned char *)v307 + 8);
  *(void *)uint64_t v306 = v308;
  uint64_t v309 = a3[119];
  uint64_t v310 = a1 + v309;
  uint64_t v311 = (uint64_t *)(a2 + v309);
  uint64_t v312 = *v311;
  *(unsigned char *)(v310 + 8) = *((unsigned char *)v311 + 8);
  *(void *)uint64_t v310 = v312;
  uint64_t v313 = a3[120];
  uint64_t v314 = a1 + v313;
  uint64_t v315 = (uint64_t *)(a2 + v313);
  uint64_t v316 = *v315;
  *(unsigned char *)(v314 + 8) = *((unsigned char *)v315 + 8);
  *(void *)uint64_t v314 = v316;
  uint64_t v317 = a3[121];
  uint64_t v318 = a1 + v317;
  uint64_t v319 = (uint64_t *)(a2 + v317);
  uint64_t v320 = *v319;
  *(unsigned char *)(v318 + 8) = *((unsigned char *)v319 + 8);
  *(void *)uint64_t v318 = v320;
  uint64_t v321 = a3[122];
  uint64_t v322 = a1 + v321;
  uint64_t v323 = (uint64_t *)(a2 + v321);
  uint64_t v324 = *v323;
  *(unsigned char *)(v322 + 8) = *((unsigned char *)v323 + 8);
  *(void *)uint64_t v322 = v324;
  uint64_t v325 = a3[123];
  uint64_t v326 = a1 + v325;
  uint64_t v327 = (uint64_t *)(a2 + v325);
  uint64_t v328 = *v327;
  *(unsigned char *)(v326 + 8) = *((unsigned char *)v327 + 8);
  *(void *)uint64_t v326 = v328;
  uint64_t v329 = a3[124];
  uint64_t v330 = a1 + v329;
  uint64_t v331 = (uint64_t *)(a2 + v329);
  uint64_t v332 = *v331;
  *(unsigned char *)(v330 + 8) = *((unsigned char *)v331 + 8);
  *(void *)uint64_t v330 = v332;
  uint64_t v333 = a3[125];
  uint64_t v334 = a1 + v333;
  uint64_t v335 = (uint64_t *)(a2 + v333);
  uint64_t v336 = *v335;
  *(unsigned char *)(v334 + 8) = *((unsigned char *)v335 + 8);
  *(void *)uint64_t v334 = v336;
  uint64_t v337 = a3[126];
  uint64_t v338 = a1 + v337;
  char v339 = (uint64_t *)(a2 + v337);
  uint64_t v340 = *v339;
  *(unsigned char *)(v338 + 8) = *((unsigned char *)v339 + 8);
  *(void *)uint64_t v338 = v340;
  uint64_t v341 = a3[127];
  uint64_t v342 = a1 + v341;
  uint64_t v343 = (uint64_t *)(a2 + v341);
  uint64_t v344 = *v343;
  *(unsigned char *)(v342 + 8) = *((unsigned char *)v343 + 8);
  *(void *)uint64_t v342 = v344;
  uint64_t v345 = a3[128];
  uint64_t v346 = a1 + v345;
  uint64_t v347 = (uint64_t *)(a2 + v345);
  uint64_t v348 = *v347;
  *(unsigned char *)(v346 + 8) = *((unsigned char *)v347 + 8);
  *(void *)uint64_t v346 = v348;
  uint64_t v349 = a3[129];
  uint64_t v350 = a1 + v349;
  uint64_t v351 = (uint64_t *)(a2 + v349);
  uint64_t v352 = *v351;
  *(unsigned char *)(v350 + 8) = *((unsigned char *)v351 + 8);
  *(void *)uint64_t v350 = v352;
  uint64_t v353 = a3[130];
  uint64_t v354 = a1 + v353;
  uint64_t v355 = (uint64_t *)(a2 + v353);
  uint64_t v356 = *v355;
  *(unsigned char *)(v354 + 8) = *((unsigned char *)v355 + 8);
  *(void *)uint64_t v354 = v356;
  uint64_t v357 = a3[131];
  uint64_t v358 = a1 + v357;
  uint64_t v359 = (uint64_t *)(a2 + v357);
  uint64_t v360 = *v359;
  *(unsigned char *)(v358 + 8) = *((unsigned char *)v359 + 8);
  *(void *)uint64_t v358 = v360;
  uint64_t v361 = a3[132];
  uint64_t v362 = a1 + v361;
  uint64_t v363 = (uint64_t *)(a2 + v361);
  uint64_t v364 = *v363;
  *(unsigned char *)(v362 + 8) = *((unsigned char *)v363 + 8);
  *(void *)uint64_t v362 = v364;
  uint64_t v365 = a3[133];
  uint64_t v366 = a1 + v365;
  uint64_t v367 = (uint64_t *)(a2 + v365);
  uint64_t v368 = *v367;
  *(unsigned char *)(v366 + 8) = *((unsigned char *)v367 + 8);
  *(void *)uint64_t v366 = v368;
  uint64_t v369 = a3[134];
  uint64_t v370 = a1 + v369;
  uint64_t v371 = (uint64_t *)(a2 + v369);
  uint64_t v372 = *v371;
  *(unsigned char *)(v370 + 8) = *((unsigned char *)v371 + 8);
  *(void *)uint64_t v370 = v372;
  *(unsigned char *)(a1 + a3[135]) = *(unsigned char *)(a2 + a3[135]);
  *(unsigned char *)(a1 + a3[136]) = *(unsigned char *)(a2 + a3[136]);
  uint64_t v373 = a3[137];
  uint64_t v374 = a1 + v373;
  uint64_t v375 = (uint64_t *)(a2 + v373);
  uint64_t v376 = *v375;
  *(unsigned char *)(v374 + 8) = *((unsigned char *)v375 + 8);
  *(void *)uint64_t v374 = v376;
  uint64_t v377 = a3[138];
  uint64_t v378 = a1 + v377;
  v379 = (uint64_t *)(a2 + v377);
  uint64_t v380 = *v379;
  *(unsigned char *)(v378 + 8) = *((unsigned char *)v379 + 8);
  *(void *)uint64_t v378 = v380;
  *(unsigned char *)(a1 + a3[139]) = *(unsigned char *)(a2 + a3[139]);
  uint64_t v381 = a3[140];
  uint64_t v382 = a1 + v381;
  uint64_t v383 = a2 + v381;
  LODWORD(v380) = *(_DWORD *)v383;
  *(unsigned char *)(v382 + 4) = *(unsigned char *)(v383 + 4);
  *(_DWORD *)uint64_t v382 = v380;
  uint64_t v384 = a3[141];
  uint64_t v385 = a1 + v384;
  v386 = (uint64_t *)(a2 + v384);
  uint64_t v387 = *v386;
  *(unsigned char *)(v385 + 8) = *((unsigned char *)v386 + 8);
  *(void *)uint64_t v385 = v387;
  uint64_t v388 = a3[142];
  uint64_t v389 = a1 + v388;
  v390 = (uint64_t *)(a2 + v388);
  uint64_t v391 = *v390;
  *(unsigned char *)(v389 + 8) = *((unsigned char *)v390 + 8);
  *(void *)uint64_t v389 = v391;
  uint64_t v392 = a3[143];
  uint64_t v393 = a1 + v392;
  v394 = (uint64_t *)(a2 + v392);
  uint64_t v395 = *v394;
  *(unsigned char *)(v393 + 8) = *((unsigned char *)v394 + 8);
  *(void *)uint64_t v393 = v395;
  uint64_t v396 = a3[144];
  uint64_t v397 = a1 + v396;
  v398 = (uint64_t *)(a2 + v396);
  uint64_t v399 = *v398;
  *(unsigned char *)(v397 + 8) = *((unsigned char *)v398 + 8);
  *(void *)uint64_t v397 = v399;
  uint64_t v400 = a3[145];
  uint64_t v401 = a1 + v400;
  v402 = (uint64_t *)(a2 + v400);
  uint64_t v403 = *v402;
  *(unsigned char *)(v401 + 8) = *((unsigned char *)v402 + 8);
  *(void *)uint64_t v401 = v403;
  uint64_t v404 = a3[146];
  uint64_t v405 = a1 + v404;
  v406 = (uint64_t *)(a2 + v404);
  uint64_t v407 = *v406;
  *(unsigned char *)(v405 + 8) = *((unsigned char *)v406 + 8);
  *(void *)uint64_t v405 = v407;
  uint64_t v408 = a3[147];
  uint64_t v409 = a1 + v408;
  v410 = (uint64_t *)(a2 + v408);
  uint64_t v411 = *v410;
  *(unsigned char *)(v409 + 8) = *((unsigned char *)v410 + 8);
  *(void *)uint64_t v409 = v411;
  *(unsigned char *)(a1 + a3[148]) = *(unsigned char *)(a2 + a3[148]);
  uint64_t v412 = a3[149];
  uint64_t v413 = a1 + v412;
  v414 = (uint64_t *)(a2 + v412);
  uint64_t v415 = *v414;
  *(unsigned char *)(v413 + 8) = *((unsigned char *)v414 + 8);
  *(void *)uint64_t v413 = v415;
  uint64_t v416 = a3[150];
  uint64_t v417 = a1 + v416;
  v418 = (uint64_t *)(a2 + v416);
  uint64_t v419 = *v418;
  *(unsigned char *)(v417 + 8) = *((unsigned char *)v418 + 8);
  *(void *)uint64_t v417 = v419;
  uint64_t v420 = a3[151];
  v421 = (void *)(a1 + v420);
  v422 = (void *)(a2 + v420);
  void *v421 = *v422;
  v421[1] = v422[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v423 = a3[152];
  uint64_t v424 = a1 + v423;
  v425 = (uint64_t *)(a2 + v423);
  uint64_t v426 = *v425;
  *(unsigned char *)(v424 + 8) = *((unsigned char *)v425 + 8);
  *(void *)uint64_t v424 = v426;
  uint64_t v427 = a3[153];
  v428 = (void *)(a1 + v427);
  v429 = (void *)(a2 + v427);
  void *v428 = *v429;
  v428[1] = v429[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v430 = a3[154];
  uint64_t v431 = a1 + v430;
  v432 = (uint64_t *)(a2 + v430);
  uint64_t v433 = *v432;
  *(unsigned char *)(v431 + 8) = *((unsigned char *)v432 + 8);
  *(void *)uint64_t v431 = v433;
  *(void *)(a1 + a3[155]) = *(void *)(a2 + a3[155]);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v434 = a3[156];
  uint64_t v435 = a1 + v434;
  v436 = (uint64_t *)(a2 + v434);
  uint64_t v437 = *v436;
  *(unsigned char *)(v435 + 8) = *((unsigned char *)v436 + 8);
  *(void *)uint64_t v435 = v437;
  uint64_t v438 = a3[157];
  uint64_t v439 = a1 + v438;
  v440 = (uint64_t *)(a2 + v438);
  uint64_t v441 = *v440;
  *(unsigned char *)(v439 + 8) = *((unsigned char *)v440 + 8);
  *(void *)uint64_t v439 = v441;
  uint64_t v442 = a3[158];
  uint64_t v443 = a1 + v442;
  v444 = (uint64_t *)(a2 + v442);
  uint64_t v445 = *v444;
  *(unsigned char *)(v443 + 8) = *((unsigned char *)v444 + 8);
  *(void *)uint64_t v443 = v445;
  uint64_t v446 = a3[159];
  v447 = (void *)(a1 + v446);
  v448 = (void *)(a2 + v446);
  void *v447 = *v448;
  v447[1] = v448[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v449 = a3[160];
  uint64_t v450 = a1 + v449;
  v451 = (uint64_t *)(a2 + v449);
  uint64_t v452 = *v451;
  *(unsigned char *)(v450 + 8) = *((unsigned char *)v451 + 8);
  *(void *)uint64_t v450 = v452;
  *(unsigned char *)(a1 + a3[161]) = *(unsigned char *)(a2 + a3[161]);
  return a1;
}

uint64_t sub_1009E9E90(uint64_t a1, uint64_t a2, int *a3)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  long long v6 = *(_OWORD *)(a2 + 40);
  uint64_t v7 = *(void *)(a2 + 64);
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  *(void *)(a1 + 64) = v7;
  *(unsigned char *)(a1 + 72) = *(unsigned char *)(a2 + 72);
  *(void *)(a1 + 80) = *(void *)(a2 + 80);
  *(unsigned char *)(a1 + 88) = *(unsigned char *)(a2 + 88);
  uint64_t v8 = *(void *)(a2 + 104);
  *(void *)(a1 + 96) = *(void *)(a2 + 96);
  *(void *)(a1 + 104) = v8;
  *(unsigned char *)(a1 + 112) = *(unsigned char *)(a2 + 112);
  *(void *)(a1 + 120) = *(void *)(a2 + 120);
  *(unsigned char *)(a1 + 128) = *(unsigned char *)(a2 + 128);
  *(void *)(a1 + 136) = *(void *)(a2 + 136);
  *(unsigned char *)(a1 + 144) = *(unsigned char *)(a2 + 144);
  *(unsigned char *)(a1 + 160) = *(unsigned char *)(a2 + 160);
  *(void *)(a1 + 152) = *(void *)(a2 + 152);
  uint64_t v9 = *(void *)(a2 + 168);
  *(unsigned char *)(a1 + 176) = *(unsigned char *)(a2 + 176);
  *(void *)(a1 + 168) = v9;
  *(unsigned char *)(a1 + 192) = *(unsigned char *)(a2 + 192);
  *(void *)(a1 + 184) = *(void *)(a2 + 184);
  *(unsigned char *)(a1 + 208) = *(unsigned char *)(a2 + 208);
  *(void *)(a1 + 200) = *(void *)(a2 + 200);
  *(unsigned char *)(a1 + 224) = *(unsigned char *)(a2 + 224);
  *(void *)(a1 + 216) = *(void *)(a2 + 216);
  *(unsigned char *)(a1 + 240) = *(unsigned char *)(a2 + 240);
  *(void *)(a1 + 232) = *(void *)(a2 + 232);
  *(unsigned char *)(a1 + 241) = *(unsigned char *)(a2 + 241);
  uint64_t v10 = a3[24];
  uint64_t v11 = a1 + v10;
  uint64_t v12 = a2 + v10;
  *(_OWORD *)(a1 + 40) = v6;
  uint64_t v13 = sub_10000588C(&qword_101654C68);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v13 - 8) + 32))(v11, v12, v13);
  uint64_t v14 = a3[25];
  uint64_t v15 = a3[26];
  uint64_t v16 = a1 + v14;
  uint64_t v17 = a2 + v14;
  *(void *)uint64_t v16 = *(void *)v17;
  *(unsigned char *)(v16 + 8) = *(unsigned char *)(v17 + 8);
  uint64_t v18 = a1 + v15;
  uint64_t v19 = a2 + v15;
  *(void *)uint64_t v18 = *(void *)v19;
  *(unsigned char *)(v18 + 8) = *(unsigned char *)(v19 + 8);
  uint64_t v20 = a3[27];
  uint64_t v21 = a3[28];
  uint64_t v22 = a1 + v20;
  uint64_t v23 = a2 + v20;
  *(void *)uint64_t v22 = *(void *)v23;
  *(unsigned char *)(v22 + 8) = *(unsigned char *)(v23 + 8);
  uint64_t v24 = a1 + v21;
  uint64_t v25 = a2 + v21;
  *(unsigned char *)(v24 + 8) = *(unsigned char *)(v25 + 8);
  *(void *)uint64_t v24 = *(void *)v25;
  uint64_t v26 = a3[29];
  uint64_t v27 = a3[30];
  uint64_t v28 = a1 + v26;
  uint64_t v29 = a2 + v26;
  *(void *)uint64_t v28 = *(void *)v29;
  *(unsigned char *)(v28 + 8) = *(unsigned char *)(v29 + 8);
  uint64_t v30 = a1 + v27;
  uint64_t v31 = a2 + v27;
  *(void *)uint64_t v30 = *(void *)v31;
  *(unsigned char *)(v30 + 8) = *(unsigned char *)(v31 + 8);
  uint64_t v32 = a3[31];
  uint64_t v33 = a3[32];
  uint64_t v34 = a1 + v32;
  uint64_t v35 = a2 + v32;
  *(void *)uint64_t v34 = *(void *)v35;
  *(unsigned char *)(v34 + 8) = *(unsigned char *)(v35 + 8);
  uint64_t v36 = a1 + v33;
  uint64_t v37 = a2 + v33;
  *(void *)uint64_t v36 = *(void *)v37;
  *(unsigned char *)(v36 + 8) = *(unsigned char *)(v37 + 8);
  uint64_t v38 = a3[33];
  uint64_t v39 = a3[34];
  uint64_t v40 = a1 + v38;
  uint64_t v41 = a2 + v38;
  *(void *)uint64_t v40 = *(void *)v41;
  *(unsigned char *)(v40 + 8) = *(unsigned char *)(v41 + 8);
  uint64_t v42 = a1 + v39;
  uint64_t v43 = a2 + v39;
  *(void *)uint64_t v42 = *(void *)v43;
  *(unsigned char *)(v42 + 8) = *(unsigned char *)(v43 + 8);
  uint64_t v44 = a3[35];
  uint64_t v45 = a3[36];
  uint64_t v46 = a1 + v44;
  uint64_t v47 = a2 + v44;
  *(void *)uint64_t v46 = *(void *)v47;
  *(unsigned char *)(v46 + 8) = *(unsigned char *)(v47 + 8);
  *(unsigned char *)(a1 + v45) = *(unsigned char *)(a2 + v45);
  uint64_t v48 = a3[37];
  uint64_t v49 = a3[38];
  uint64_t v50 = a1 + v48;
  uint64_t v51 = a2 + v48;
  *(void *)uint64_t v50 = *(void *)v51;
  *(unsigned char *)(v50 + 8) = *(unsigned char *)(v51 + 8);
  uint64_t v52 = a1 + v49;
  uint64_t v53 = a2 + v49;
  *(void *)uint64_t v52 = *(void *)v53;
  *(unsigned char *)(v52 + 8) = *(unsigned char *)(v53 + 8);
  uint64_t v54 = a3[39];
  uint64_t v55 = a3[40];
  uint64_t v56 = a1 + v54;
  uint64_t v57 = a2 + v54;
  *(void *)uint64_t v56 = *(void *)v57;
  *(unsigned char *)(v56 + 8) = *(unsigned char *)(v57 + 8);
  *(unsigned char *)(a1 + v55) = *(unsigned char *)(a2 + v55);
  uint64_t v58 = a3[41];
  uint64_t v59 = a3[42];
  uint64_t v60 = a1 + v58;
  uint64_t v61 = a2 + v58;
  *(void *)uint64_t v60 = *(void *)v61;
  *(unsigned char *)(v60 + 8) = *(unsigned char *)(v61 + 8);
  uint64_t v62 = a1 + v59;
  uint64_t v63 = a2 + v59;
  *(void *)uint64_t v62 = *(void *)v63;
  *(unsigned char *)(v62 + 8) = *(unsigned char *)(v63 + 8);
  uint64_t v64 = a3[43];
  uint64_t v65 = a3[44];
  uint64_t v66 = a1 + v64;
  uint64_t v67 = a2 + v64;
  *(void *)uint64_t v66 = *(void *)v67;
  *(unsigned char *)(v66 + 8) = *(unsigned char *)(v67 + 8);
  uint64_t v68 = a1 + v65;
  uint64_t v69 = a2 + v65;
  *(void *)uint64_t v68 = *(void *)v69;
  *(unsigned char *)(v68 + 8) = *(unsigned char *)(v69 + 8);
  uint64_t v70 = a3[45];
  uint64_t v71 = a3[46];
  uint64_t v72 = a1 + v70;
  uint64_t v73 = (uint64_t *)(a2 + v70);
  uint64_t v74 = *v73;
  *(unsigned char *)(v72 + 8) = *((unsigned char *)v73 + 8);
  *(void *)uint64_t v72 = v74;
  uint64_t v75 = a1 + v71;
  uint64_t v76 = a2 + v71;
  *(void *)uint64_t v75 = *(void *)v76;
  *(unsigned char *)(v75 + 8) = *(unsigned char *)(v76 + 8);
  uint64_t v77 = a3[47];
  uint64_t v78 = a3[48];
  uint64_t v79 = a1 + v77;
  uint64_t v80 = a2 + v77;
  *(void *)uint64_t v79 = *(void *)v80;
  *(unsigned char *)(v79 + 8) = *(unsigned char *)(v80 + 8);
  uint64_t v81 = a1 + v78;
  uint64_t v82 = a2 + v78;
  *(void *)uint64_t v81 = *(void *)v82;
  *(unsigned char *)(v81 + 8) = *(unsigned char *)(v82 + 8);
  uint64_t v83 = a3[49];
  uint64_t v84 = a3[50];
  uint64_t v85 = a1 + v83;
  uint64_t v86 = a2 + v83;
  *(void *)uint64_t v85 = *(void *)v86;
  *(unsigned char *)(v85 + 8) = *(unsigned char *)(v86 + 8);
  uint64_t v87 = a1 + v84;
  uint64_t v88 = a2 + v84;
  *(void *)uint64_t v87 = *(void *)v88;
  *(unsigned char *)(v87 + 8) = *(unsigned char *)(v88 + 8);
  uint64_t v89 = a3[51];
  uint64_t v90 = a3[52];
  uint64_t v91 = a1 + v89;
  uint64_t v92 = a2 + v89;
  *(void *)uint64_t v91 = *(void *)v92;
  *(unsigned char *)(v91 + 8) = *(unsigned char *)(v92 + 8);
  uint64_t v93 = a1 + v90;
  uint64_t v94 = a2 + v90;
  *(void *)uint64_t v93 = *(void *)v94;
  *(unsigned char *)(v93 + 8) = *(unsigned char *)(v94 + 8);
  uint64_t v95 = a3[53];
  uint64_t v96 = a3[54];
  uint64_t v97 = a1 + v95;
  uint64_t v98 = a2 + v95;
  *(void *)uint64_t v97 = *(void *)v98;
  *(unsigned char *)(v97 + 8) = *(unsigned char *)(v98 + 8);
  uint64_t v99 = a1 + v96;
  uint64_t v100 = a2 + v96;
  *(void *)uint64_t v99 = *(void *)v100;
  *(unsigned char *)(v99 + 8) = *(unsigned char *)(v100 + 8);
  uint64_t v101 = a3[56];
  *(unsigned char *)(a1 + a3[55]) = *(unsigned char *)(a2 + a3[55]);
  uint64_t v102 = a1 + v101;
  uint64_t v103 = a2 + v101;
  *(void *)uint64_t v102 = *(void *)v103;
  *(unsigned char *)(v102 + 8) = *(unsigned char *)(v103 + 8);
  uint64_t v104 = a3[57];
  uint64_t v105 = a3[58];
  uint64_t v106 = a1 + v104;
  uint64_t v107 = a2 + v104;
  *(void *)uint64_t v106 = *(void *)v107;
  *(unsigned char *)(v106 + 8) = *(unsigned char *)(v107 + 8);
  uint64_t v108 = a1 + v105;
  uint64_t v109 = a2 + v105;
  *(void *)uint64_t v108 = *(void *)v109;
  *(unsigned char *)(v108 + 8) = *(unsigned char *)(v109 + 8);
  uint64_t v110 = a3[59];
  uint64_t v111 = a3[60];
  uint64_t v112 = a1 + v110;
  uint64_t v113 = a2 + v110;
  *(void *)uint64_t v112 = *(void *)v113;
  *(unsigned char *)(v112 + 8) = *(unsigned char *)(v113 + 8);
  uint64_t v114 = a1 + v111;
  uint64_t v115 = (uint64_t *)(a2 + v111);
  uint64_t v116 = *v115;
  *(unsigned char *)(v114 + 8) = *((unsigned char *)v115 + 8);
  *(void *)uint64_t v114 = v116;
  uint64_t v117 = a3[61];
  uint64_t v118 = a3[62];
  uint64_t v119 = a1 + v117;
  uint64_t v120 = a2 + v117;
  *(void *)uint64_t v119 = *(void *)v120;
  *(unsigned char *)(v119 + 8) = *(unsigned char *)(v120 + 8);
  *(unsigned char *)(a1 + v118) = *(unsigned char *)(a2 + v118);
  uint64_t v121 = a3[64];
  *(unsigned char *)(a1 + a3[63]) = *(unsigned char *)(a2 + a3[63]);
  uint64_t v122 = (_OWORD *)(a1 + v121);
  uint64_t v123 = (_OWORD *)(a2 + v121);
  long long v124 = v123[1];
  *uint64_t v122 = *v123;
  v122[1] = v124;
  long long v125 = v123[6];
  long long v126 = v123[4];
  v122[5] = v123[5];
  v122[6] = v125;
  long long v127 = v123[3];
  v122[2] = v123[2];
  v122[3] = v127;
  v122[4] = v126;
  uint64_t v128 = a3[65];
  uint64_t v129 = a1 + v128;
  uint64_t v130 = a2 + v128;
  *(void *)uint64_t v129 = *(void *)v130;
  *(unsigned char *)(v129 + 8) = *(unsigned char *)(v130 + 8);
  uint64_t v131 = a3[66];
  uint64_t v132 = a1 + v131;
  uint64_t v133 = a2 + v131;
  *(void *)uint64_t v132 = *(void *)v133;
  *(unsigned char *)(v132 + 8) = *(unsigned char *)(v133 + 8);
  uint64_t v134 = a3[67];
  uint64_t v135 = a1 + v134;
  long long v136 = (uint64_t *)(a2 + v134);
  uint64_t v137 = *v136;
  *(unsigned char *)(v135 + 8) = *((unsigned char *)v136 + 8);
  *(void *)uint64_t v135 = v137;
  uint64_t v138 = a3[68];
  uint64_t v139 = a1 + v138;
  uint64_t v140 = a2 + v138;
  *(void *)uint64_t v139 = *(void *)v140;
  *(unsigned char *)(v139 + 8) = *(unsigned char *)(v140 + 8);
  uint64_t v141 = a3[69];
  uint64_t v142 = a1 + v141;
  uint64_t v143 = a2 + v141;
  *(void *)uint64_t v142 = *(void *)v143;
  *(unsigned char *)(v142 + 8) = *(unsigned char *)(v143 + 8);
  uint64_t v144 = a3[70];
  uint64_t v145 = a1 + v144;
  uint64_t v146 = a2 + v144;
  *(void *)uint64_t v145 = *(void *)v146;
  *(unsigned char *)(v145 + 8) = *(unsigned char *)(v146 + 8);
  uint64_t v147 = a3[71];
  uint64_t v148 = a1 + v147;
  uint64_t v149 = a2 + v147;
  *(void *)uint64_t v148 = *(void *)v149;
  *(unsigned char *)(v148 + 8) = *(unsigned char *)(v149 + 8);
  uint64_t v150 = a3[72];
  uint64_t v151 = a1 + v150;
  uint64_t v152 = a2 + v150;
  *(void *)uint64_t v151 = *(void *)v152;
  *(unsigned char *)(v151 + 8) = *(unsigned char *)(v152 + 8);
  uint64_t v153 = a3[73];
  uint64_t v154 = a1 + v153;
  uint64_t v155 = a2 + v153;
  *(void *)uint64_t v154 = *(void *)v155;
  *(unsigned char *)(v154 + 8) = *(unsigned char *)(v155 + 8);
  uint64_t v156 = a3[74];
  uint64_t v157 = a1 + v156;
  uint64_t v158 = a2 + v156;
  *(void *)uint64_t v157 = *(void *)v158;
  *(unsigned char *)(v157 + 8) = *(unsigned char *)(v158 + 8);
  uint64_t v159 = a3[75];
  uint64_t v160 = a1 + v159;
  uint64_t v161 = a2 + v159;
  *(void *)uint64_t v160 = *(void *)v161;
  *(unsigned char *)(v160 + 8) = *(unsigned char *)(v161 + 8);
  uint64_t v162 = a3[76];
  uint64_t v163 = a1 + v162;
  uint64_t v164 = a2 + v162;
  *(void *)uint64_t v163 = *(void *)v164;
  *(unsigned char *)(v163 + 8) = *(unsigned char *)(v164 + 8);
  uint64_t v165 = a3[77];
  uint64_t v166 = a1 + v165;
  uint64_t v167 = a2 + v165;
  *(void *)uint64_t v166 = *(void *)v167;
  *(unsigned char *)(v166 + 8) = *(unsigned char *)(v167 + 8);
  uint64_t v168 = a3[78];
  uint64_t v169 = a1 + v168;
  uint64_t v170 = a2 + v168;
  *(void *)uint64_t v169 = *(void *)v170;
  *(unsigned char *)(v169 + 8) = *(unsigned char *)(v170 + 8);
  uint64_t v171 = a3[79];
  uint64_t v172 = a1 + v171;
  uint64_t v173 = a2 + v171;
  *(void *)uint64_t v172 = *(void *)v173;
  *(unsigned char *)(v172 + 8) = *(unsigned char *)(v173 + 8);
  uint64_t v174 = a3[80];
  uint64_t v175 = a1 + v174;
  uint64_t v176 = a2 + v174;
  *(void *)uint64_t v175 = *(void *)v176;
  *(unsigned char *)(v175 + 8) = *(unsigned char *)(v176 + 8);
  uint64_t v177 = a3[81];
  uint64_t v178 = a1 + v177;
  uint64_t v179 = a2 + v177;
  *(void *)uint64_t v178 = *(void *)v179;
  *(unsigned char *)(v178 + 8) = *(unsigned char *)(v179 + 8);
  uint64_t v180 = a3[82];
  uint64_t v181 = a1 + v180;
  uint64_t v182 = a2 + v180;
  *(void *)uint64_t v181 = *(void *)v182;
  *(unsigned char *)(v181 + 8) = *(unsigned char *)(v182 + 8);
  uint64_t v183 = a3[83];
  uint64_t v184 = a1 + v183;
  uint64_t v185 = a2 + v183;
  *(void *)uint64_t v184 = *(void *)v185;
  *(unsigned char *)(v184 + 8) = *(unsigned char *)(v185 + 8);
  *(unsigned char *)(a1 + a3[84]) = *(unsigned char *)(a2 + a3[84]);
  *(unsigned char *)(a1 + a3[85]) = *(unsigned char *)(a2 + a3[85]);
  *(unsigned char *)(a1 + a3[86]) = *(unsigned char *)(a2 + a3[86]);
  uint64_t v186 = a3[87];
  uint64_t v187 = a1 + v186;
  uint64_t v188 = a2 + v186;
  *(void *)uint64_t v187 = *(void *)v188;
  *(unsigned char *)(v187 + 8) = *(unsigned char *)(v188 + 8);
  uint64_t v189 = a3[88];
  uint64_t v190 = a1 + v189;
  uint64_t v191 = a2 + v189;
  *(void *)uint64_t v190 = *(void *)v191;
  *(unsigned char *)(v190 + 8) = *(unsigned char *)(v191 + 8);
  uint64_t v192 = a3[89];
  uint64_t v193 = a1 + v192;
  uint64_t v194 = a2 + v192;
  *(void *)uint64_t v193 = *(void *)v194;
  *(unsigned char *)(v193 + 8) = *(unsigned char *)(v194 + 8);
  uint64_t v195 = a3[90];
  uint64_t v196 = a1 + v195;
  uint64_t v197 = a2 + v195;
  *(void *)uint64_t v196 = *(void *)v197;
  *(unsigned char *)(v196 + 8) = *(unsigned char *)(v197 + 8);
  uint64_t v198 = a3[91];
  uint64_t v199 = a1 + v198;
  uint64_t v200 = (uint64_t *)(a2 + v198);
  uint64_t v201 = *v200;
  *(unsigned char *)(v199 + 8) = *((unsigned char *)v200 + 8);
  *(void *)uint64_t v199 = v201;
  uint64_t v202 = a3[92];
  uint64_t v203 = a1 + v202;
  uint64_t v204 = a2 + v202;
  *(void *)uint64_t v203 = *(void *)v204;
  *(unsigned char *)(v203 + 8) = *(unsigned char *)(v204 + 8);
  uint64_t v205 = a3[93];
  uint64_t v206 = a1 + v205;
  uint64_t v207 = a2 + v205;
  *(void *)uint64_t v206 = *(void *)v207;
  *(unsigned char *)(v206 + 8) = *(unsigned char *)(v207 + 8);
  uint64_t v208 = a3[94];
  uint64_t v209 = a1 + v208;
  uint64_t v210 = a2 + v208;
  *(void *)uint64_t v209 = *(void *)v210;
  *(unsigned char *)(v209 + 8) = *(unsigned char *)(v210 + 8);
  uint64_t v211 = a3[95];
  uint64_t v212 = a1 + v211;
  uint64_t v213 = a2 + v211;
  *(void *)uint64_t v212 = *(void *)v213;
  *(unsigned char *)(v212 + 8) = *(unsigned char *)(v213 + 8);
  *(unsigned char *)(a1 + a3[96]) = *(unsigned char *)(a2 + a3[96]);
  uint64_t v214 = a3[97];
  uint64_t v215 = a1 + v214;
  uint64_t v216 = a2 + v214;
  *(void *)uint64_t v215 = *(void *)v216;
  *(unsigned char *)(v215 + 8) = *(unsigned char *)(v216 + 8);
  uint64_t v217 = a3[98];
  uint64_t v218 = a1 + v217;
  uint64_t v219 = a2 + v217;
  *(void *)uint64_t v218 = *(void *)v219;
  *(unsigned char *)(v218 + 8) = *(unsigned char *)(v219 + 8);
  uint64_t v220 = a3[99];
  uint64_t v221 = a1 + v220;
  uint64_t v222 = a2 + v220;
  *(void *)uint64_t v221 = *(void *)v222;
  uint64_t v223 = a3[100];
  LOBYTE(v74) = *(unsigned char *)(a2 + v223);
  *(unsigned char *)(v221 + 8) = *(unsigned char *)(v222 + 8);
  *(unsigned char *)(a1 + v223) = v74;
  *(unsigned char *)(a1 + a3[101]) = *(unsigned char *)(a2 + a3[101]);
  *(unsigned char *)(a1 + a3[102]) = *(unsigned char *)(a2 + a3[102]);
  uint64_t v224 = a3[103];
  uint64_t v225 = a1 + v224;
  uint64_t v226 = a2 + v224;
  *(void *)uint64_t v225 = *(void *)v226;
  *(unsigned char *)(v225 + 8) = *(unsigned char *)(v226 + 8);
  uint64_t v227 = a3[104];
  uint64_t v228 = a1 + v227;
  uint64_t v229 = a2 + v227;
  *(void *)uint64_t v228 = *(void *)v229;
  *(unsigned char *)(v228 + 8) = *(unsigned char *)(v229 + 8);
  uint64_t v230 = a3[105];
  uint64_t v231 = a1 + v230;
  uint64_t v232 = a2 + v230;
  *(void *)uint64_t v231 = *(void *)v232;
  *(unsigned char *)(v231 + 8) = *(unsigned char *)(v232 + 8);
  uint64_t v233 = a3[106];
  uint64_t v234 = a1 + v233;
  uint64_t v235 = a2 + v233;
  *(void *)uint64_t v234 = *(void *)v235;
  *(unsigned char *)(v234 + 8) = *(unsigned char *)(v235 + 8);
  *(unsigned char *)(a1 + a3[107]) = *(unsigned char *)(a2 + a3[107]);
  uint64_t v236 = a3[108];
  uint64_t v237 = a1 + v236;
  uint64_t v238 = a2 + v236;
  *(void *)uint64_t v237 = *(void *)v238;
  *(unsigned char *)(v237 + 8) = *(unsigned char *)(v238 + 8);
  *(void *)(a1 + a3[109]) = *(void *)(a2 + a3[109]);
  uint64_t v239 = a3[110];
  uint64_t v240 = a1 + v239;
  uint64_t v241 = a2 + v239;
  *(void *)uint64_t v240 = *(void *)v241;
  *(unsigned char *)(v240 + 8) = *(unsigned char *)(v241 + 8);
  *(unsigned char *)(a1 + a3[111]) = *(unsigned char *)(a2 + a3[111]);
  *(void *)(a1 + a3[112]) = *(void *)(a2 + a3[112]);
  uint64_t v242 = a3[113];
  uint64_t v243 = a1 + v242;
  uint64_t v244 = a2 + v242;
  *(void *)uint64_t v243 = *(void *)v244;
  *(unsigned char *)(v243 + 8) = *(unsigned char *)(v244 + 8);
  uint64_t v245 = a3[114];
  uint64_t v246 = a1 + v245;
  uint64_t v247 = a2 + v245;
  *(void *)uint64_t v246 = *(void *)v247;
  *(unsigned char *)(v246 + 8) = *(unsigned char *)(v247 + 8);
  *(unsigned char *)(a1 + a3[115]) = *(unsigned char *)(a2 + a3[115]);
  *(unsigned char *)(a1 + a3[116]) = *(unsigned char *)(a2 + a3[116]);
  uint64_t v248 = a3[117];
  uint64_t v249 = a1 + v248;
  uint64_t v250 = a2 + v248;
  *(void *)uint64_t v249 = *(void *)v250;
  *(unsigned char *)(v249 + 8) = *(unsigned char *)(v250 + 8);
  uint64_t v251 = a3[118];
  uint64_t v252 = a1 + v251;
  uint64_t v253 = a2 + v251;
  *(void *)uint64_t v252 = *(void *)v253;
  *(unsigned char *)(v252 + 8) = *(unsigned char *)(v253 + 8);
  uint64_t v254 = a3[119];
  uint64_t v255 = a1 + v254;
  uint64_t v256 = a2 + v254;
  *(void *)uint64_t v255 = *(void *)v256;
  *(unsigned char *)(v255 + 8) = *(unsigned char *)(v256 + 8);
  uint64_t v257 = a3[120];
  uint64_t v258 = a1 + v257;
  uint64_t v259 = a2 + v257;
  *(void *)uint64_t v258 = *(void *)v259;
  *(unsigned char *)(v258 + 8) = *(unsigned char *)(v259 + 8);
  uint64_t v260 = a3[121];
  uint64_t v261 = a1 + v260;
  uint64_t v262 = (uint64_t *)(a2 + v260);
  uint64_t v263 = *v262;
  *(unsigned char *)(v261 + 8) = *((unsigned char *)v262 + 8);
  *(void *)uint64_t v261 = v263;
  uint64_t v264 = a3[122];
  uint64_t v265 = a1 + v264;
  uint64_t v266 = a2 + v264;
  *(void *)uint64_t v265 = *(void *)v266;
  *(unsigned char *)(v265 + 8) = *(unsigned char *)(v266 + 8);
  uint64_t v267 = a3[123];
  uint64_t v268 = a1 + v267;
  uint64_t v269 = a2 + v267;
  *(void *)uint64_t v268 = *(void *)v269;
  *(unsigned char *)(v268 + 8) = *(unsigned char *)(v269 + 8);
  uint64_t v270 = a3[124];
  uint64_t v271 = a1 + v270;
  uint64_t v272 = a2 + v270;
  *(void *)uint64_t v271 = *(void *)v272;
  *(unsigned char *)(v271 + 8) = *(unsigned char *)(v272 + 8);
  uint64_t v273 = a3[125];
  uint64_t v274 = a1 + v273;
  uint64_t v275 = a2 + v273;
  *(void *)uint64_t v274 = *(void *)v275;
  *(unsigned char *)(v274 + 8) = *(unsigned char *)(v275 + 8);
  uint64_t v276 = a3[126];
  uint64_t v277 = a1 + v276;
  uint64_t v278 = a2 + v276;
  *(void *)uint64_t v277 = *(void *)v278;
  *(unsigned char *)(v277 + 8) = *(unsigned char *)(v278 + 8);
  uint64_t v279 = a3[127];
  uint64_t v280 = a1 + v279;
  uint64_t v281 = a2 + v279;
  *(void *)uint64_t v280 = *(void *)v281;
  *(unsigned char *)(v280 + 8) = *(unsigned char *)(v281 + 8);
  uint64_t v282 = a3[128];
  uint64_t v283 = a1 + v282;
  uint64_t v284 = a2 + v282;
  *(void *)uint64_t v283 = *(void *)v284;
  *(unsigned char *)(v283 + 8) = *(unsigned char *)(v284 + 8);
  uint64_t v285 = a3[129];
  uint64_t v286 = a1 + v285;
  uint64_t v287 = a2 + v285;
  *(void *)uint64_t v286 = *(void *)v287;
  *(unsigned char *)(v286 + 8) = *(unsigned char *)(v287 + 8);
  uint64_t v288 = a3[130];
  uint64_t v289 = a1 + v288;
  uint64_t v290 = a2 + v288;
  *(void *)uint64_t v289 = *(void *)v290;
  *(unsigned char *)(v289 + 8) = *(unsigned char *)(v290 + 8);
  uint64_t v291 = a3[131];
  uint64_t v292 = a1 + v291;
  uint64_t v293 = a2 + v291;
  *(void *)uint64_t v292 = *(void *)v293;
  *(unsigned char *)(v292 + 8) = *(unsigned char *)(v293 + 8);
  uint64_t v294 = a3[132];
  uint64_t v295 = a1 + v294;
  uint64_t v296 = a2 + v294;
  *(void *)uint64_t v295 = *(void *)v296;
  *(unsigned char *)(v295 + 8) = *(unsigned char *)(v296 + 8);
  uint64_t v297 = a3[133];
  uint64_t v298 = a1 + v297;
  uint64_t v299 = a2 + v297;
  *(void *)uint64_t v298 = *(void *)v299;
  *(unsigned char *)(v298 + 8) = *(unsigned char *)(v299 + 8);
  uint64_t v300 = a3[134];
  uint64_t v301 = a1 + v300;
  uint64_t v302 = a2 + v300;
  *(void *)uint64_t v301 = *(void *)v302;
  *(unsigned char *)(v301 + 8) = *(unsigned char *)(v302 + 8);
  *(unsigned char *)(a1 + a3[135]) = *(unsigned char *)(a2 + a3[135]);
  *(unsigned char *)(a1 + a3[136]) = *(unsigned char *)(a2 + a3[136]);
  uint64_t v303 = a3[137];
  uint64_t v304 = a1 + v303;
  uint64_t v305 = a2 + v303;
  *(void *)uint64_t v304 = *(void *)v305;
  *(unsigned char *)(v304 + 8) = *(unsigned char *)(v305 + 8);
  uint64_t v306 = a3[138];
  uint64_t v307 = a1 + v306;
  uint64_t v308 = a2 + v306;
  *(void *)uint64_t v307 = *(void *)v308;
  *(unsigned char *)(v307 + 8) = *(unsigned char *)(v308 + 8);
  *(unsigned char *)(a1 + a3[139]) = *(unsigned char *)(a2 + a3[139]);
  uint64_t v309 = a3[140];
  uint64_t v310 = a1 + v309;
  uint64_t v311 = a2 + v309;
  *(_DWORD *)uint64_t v310 = *(_DWORD *)v311;
  *(unsigned char *)(v310 + 4) = *(unsigned char *)(v311 + 4);
  uint64_t v312 = a3[141];
  uint64_t v313 = a1 + v312;
  uint64_t v314 = a2 + v312;
  *(void *)uint64_t v313 = *(void *)v314;
  *(unsigned char *)(v313 + 8) = *(unsigned char *)(v314 + 8);
  uint64_t v315 = a3[142];
  uint64_t v316 = a1 + v315;
  uint64_t v317 = a2 + v315;
  *(void *)uint64_t v316 = *(void *)v317;
  *(unsigned char *)(v316 + 8) = *(unsigned char *)(v317 + 8);
  uint64_t v318 = a3[143];
  uint64_t v319 = a1 + v318;
  uint64_t v320 = a2 + v318;
  *(void *)uint64_t v319 = *(void *)v320;
  *(unsigned char *)(v319 + 8) = *(unsigned char *)(v320 + 8);
  uint64_t v321 = a3[144];
  uint64_t v322 = a1 + v321;
  uint64_t v323 = (uint64_t *)(a2 + v321);
  uint64_t v324 = *v323;
  *(unsigned char *)(v322 + 8) = *((unsigned char *)v323 + 8);
  *(void *)uint64_t v322 = v324;
  uint64_t v325 = a3[145];
  uint64_t v326 = a1 + v325;
  uint64_t v327 = a2 + v325;
  *(void *)uint64_t v326 = *(void *)v327;
  *(unsigned char *)(v326 + 8) = *(unsigned char *)(v327 + 8);
  uint64_t v328 = a3[146];
  uint64_t v329 = a1 + v328;
  uint64_t v330 = a2 + v328;
  *(void *)uint64_t v329 = *(void *)v330;
  *(unsigned char *)(v329 + 8) = *(unsigned char *)(v330 + 8);
  uint64_t v331 = a3[147];
  uint64_t v332 = a1 + v331;
  uint64_t v333 = a2 + v331;
  *(void *)uint64_t v332 = *(void *)v333;
  *(unsigned char *)(v332 + 8) = *(unsigned char *)(v333 + 8);
  *(unsigned char *)(a1 + a3[148]) = *(unsigned char *)(a2 + a3[148]);
  uint64_t v334 = a3[149];
  uint64_t v335 = a1 + v334;
  uint64_t v336 = a2 + v334;
  *(void *)uint64_t v335 = *(void *)v336;
  *(unsigned char *)(v335 + 8) = *(unsigned char *)(v336 + 8);
  uint64_t v337 = a3[150];
  uint64_t v338 = a1 + v337;
  uint64_t v339 = a2 + v337;
  *(void *)uint64_t v338 = *(void *)v339;
  uint64_t v340 = a3[151];
  long long v341 = *(_OWORD *)(a2 + v340);
  *(unsigned char *)(v338 + 8) = *(unsigned char *)(v339 + 8);
  *(_OWORD *)(a1 + v340) = v341;
  uint64_t v342 = a3[152];
  uint64_t v343 = a1 + v342;
  uint64_t v344 = a2 + v342;
  *(void *)uint64_t v343 = *(void *)v344;
  uint64_t v345 = a3[153];
  long long v346 = *(_OWORD *)(a2 + v345);
  *(unsigned char *)(v343 + 8) = *(unsigned char *)(v344 + 8);
  *(_OWORD *)(a1 + v345) = v346;
  uint64_t v347 = a3[154];
  uint64_t v348 = a1 + v347;
  uint64_t v349 = (uint64_t *)(a2 + v347);
  uint64_t v350 = *v349;
  *(unsigned char *)(v348 + 8) = *((unsigned char *)v349 + 8);
  uint64_t v351 = a3[155];
  uint64_t v352 = *(void *)(a2 + v351);
  *(void *)uint64_t v348 = v350;
  *(void *)(a1 + v351) = v352;
  uint64_t v353 = a3[156];
  uint64_t v354 = a1 + v353;
  uint64_t v355 = a2 + v353;
  *(void *)uint64_t v354 = *(void *)v355;
  *(unsigned char *)(v354 + 8) = *(unsigned char *)(v355 + 8);
  uint64_t v356 = a3[157];
  uint64_t v357 = a1 + v356;
  uint64_t v358 = a2 + v356;
  *(void *)uint64_t v357 = *(void *)v358;
  *(unsigned char *)(v357 + 8) = *(unsigned char *)(v358 + 8);
  uint64_t v359 = a3[158];
  uint64_t v360 = a1 + v359;
  uint64_t v361 = a2 + v359;
  *(void *)uint64_t v360 = *(void *)v361;
  *(unsigned char *)(v360 + 8) = *(unsigned char *)(v361 + 8);
  *(_OWORD *)(a1 + a3[159]) = *(_OWORD *)(a2 + a3[159]);
  uint64_t v362 = a3[160];
  uint64_t v363 = a1 + v362;
  uint64_t v364 = a2 + v362;
  *(void *)uint64_t v363 = *(void *)v364;
  *(unsigned char *)(v363 + 8) = *(unsigned char *)(v364 + 8);
  *(unsigned char *)(a1 + a3[161]) = *(unsigned char *)(a2 + a3[161]);
  return a1;
}

uint64_t sub_1009EACFC(uint64_t a1, uint64_t a2, int *a3)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  uint64_t v6 = *(void *)(a2 + 16);
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(void *)(a1 + 16) = v6;
  swift_bridgeObjectRelease();
  uint64_t v7 = *(void *)(a1 + 24);
  unint64_t v8 = *(void *)(a1 + 32);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  sub_10001CFB8(v7, v8);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  *(unsigned char *)(a1 + 72) = *(unsigned char *)(a2 + 72);
  *(void *)(a1 + 80) = *(void *)(a2 + 80);
  *(unsigned char *)(a1 + 88) = *(unsigned char *)(a2 + 88);
  *(void *)(a1 + 96) = *(void *)(a2 + 96);
  swift_bridgeObjectRelease();
  *(void *)(a1 + 104) = *(void *)(a2 + 104);
  *(unsigned char *)(a1 + 112) = *(unsigned char *)(a2 + 112);
  *(void *)(a1 + 120) = *(void *)(a2 + 120);
  *(unsigned char *)(a1 + 128) = *(unsigned char *)(a2 + 128);
  *(void *)(a1 + 136) = *(void *)(a2 + 136);
  *(unsigned char *)(a1 + 144) = *(unsigned char *)(a2 + 144);
  *(unsigned char *)(a1 + 160) = *(unsigned char *)(a2 + 160);
  *(void *)(a1 + 152) = *(void *)(a2 + 152);
  uint64_t v9 = *(void *)(a2 + 168);
  *(unsigned char *)(a1 + 176) = *(unsigned char *)(a2 + 176);
  *(void *)(a1 + 168) = v9;
  *(void *)(a1 + 184) = *(void *)(a2 + 184);
  *(unsigned char *)(a1 + 192) = *(unsigned char *)(a2 + 192);
  *(void *)(a1 + 200) = *(void *)(a2 + 200);
  *(unsigned char *)(a1 + 208) = *(unsigned char *)(a2 + 208);
  *(void *)(a1 + 216) = *(void *)(a2 + 216);
  *(unsigned char *)(a1 + 224) = *(unsigned char *)(a2 + 224);
  *(unsigned char *)(a1 + 240) = *(unsigned char *)(a2 + 240);
  *(void *)(a1 + 232) = *(void *)(a2 + 232);
  *(unsigned char *)(a1 + 241) = *(unsigned char *)(a2 + 241);
  uint64_t v10 = a3[24];
  uint64_t v11 = a1 + v10;
  uint64_t v12 = a2 + v10;
  uint64_t v13 = sub_10000588C(&qword_101654C68);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v13 - 8) + 40))(v11, v12, v13);
  uint64_t v14 = a3[25];
  uint64_t v15 = a3[26];
  uint64_t v16 = a1 + v14;
  uint64_t v17 = a2 + v14;
  *(void *)uint64_t v16 = *(void *)v17;
  *(unsigned char *)(v16 + 8) = *(unsigned char *)(v17 + 8);
  uint64_t v18 = a1 + v15;
  uint64_t v19 = a2 + v15;
  *(void *)uint64_t v18 = *(void *)v19;
  *(unsigned char *)(v18 + 8) = *(unsigned char *)(v19 + 8);
  uint64_t v20 = a3[27];
  uint64_t v21 = a3[28];
  uint64_t v22 = a1 + v20;
  uint64_t v23 = a2 + v20;
  *(void *)uint64_t v22 = *(void *)v23;
  *(unsigned char *)(v22 + 8) = *(unsigned char *)(v23 + 8);
  uint64_t v24 = a1 + v21;
  uint64_t v25 = a2 + v21;
  *(unsigned char *)(v24 + 8) = *(unsigned char *)(v25 + 8);
  *(void *)uint64_t v24 = *(void *)v25;
  uint64_t v26 = a3[29];
  uint64_t v27 = a3[30];
  uint64_t v28 = a1 + v26;
  uint64_t v29 = a2 + v26;
  *(void *)uint64_t v28 = *(void *)v29;
  *(unsigned char *)(v28 + 8) = *(unsigned char *)(v29 + 8);
  uint64_t v30 = a1 + v27;
  uint64_t v31 = a2 + v27;
  *(void *)uint64_t v30 = *(void *)v31;
  *(unsigned char *)(v30 + 8) = *(unsigned char *)(v31 + 8);
  uint64_t v32 = a3[31];
  uint64_t v33 = a3[32];
  uint64_t v34 = a1 + v32;
  uint64_t v35 = a2 + v32;
  *(void *)uint64_t v34 = *(void *)v35;
  *(unsigned char *)(v34 + 8) = *(unsigned char *)(v35 + 8);
  uint64_t v36 = a1 + v33;
  uint64_t v37 = a2 + v33;
  *(void *)uint64_t v36 = *(void *)v37;
  *(unsigned char *)(v36 + 8) = *(unsigned char *)(v37 + 8);
  uint64_t v38 = a3[33];
  uint64_t v39 = a3[34];
  uint64_t v40 = a1 + v38;
  uint64_t v41 = a2 + v38;
  *(void *)uint64_t v40 = *(void *)v41;
  *(unsigned char *)(v40 + 8) = *(unsigned char *)(v41 + 8);
  uint64_t v42 = a1 + v39;
  uint64_t v43 = a2 + v39;
  *(void *)uint64_t v42 = *(void *)v43;
  *(unsigned char *)(v42 + 8) = *(unsigned char *)(v43 + 8);
  uint64_t v44 = a3[35];
  uint64_t v45 = a3[36];
  uint64_t v46 = a1 + v44;
  uint64_t v47 = a2 + v44;
  *(void *)uint64_t v46 = *(void *)v47;
  *(unsigned char *)(v46 + 8) = *(unsigned char *)(v47 + 8);
  *(unsigned char *)(a1 + v45) = *(unsigned char *)(a2 + v45);
  uint64_t v48 = a3[37];
  uint64_t v49 = a3[38];
  uint64_t v50 = a1 + v48;
  uint64_t v51 = a2 + v48;
  *(void *)uint64_t v50 = *(void *)v51;
  *(unsigned char *)(v50 + 8) = *(unsigned char *)(v51 + 8);
  uint64_t v52 = a1 + v49;
  uint64_t v53 = a2 + v49;
  *(void *)uint64_t v52 = *(void *)v53;
  *(unsigned char *)(v52 + 8) = *(unsigned char *)(v53 + 8);
  uint64_t v54 = a3[39];
  uint64_t v55 = a3[40];
  uint64_t v56 = a1 + v54;
  uint64_t v57 = a2 + v54;
  *(void *)uint64_t v56 = *(void *)v57;
  *(unsigned char *)(v56 + 8) = *(unsigned char *)(v57 + 8);
  *(unsigned char *)(a1 + v55) = *(unsigned char *)(a2 + v55);
  uint64_t v58 = a3[41];
  uint64_t v59 = a3[42];
  uint64_t v60 = a1 + v58;
  uint64_t v61 = a2 + v58;
  *(void *)uint64_t v60 = *(void *)v61;
  *(unsigned char *)(v60 + 8) = *(unsigned char *)(v61 + 8);
  uint64_t v62 = a1 + v59;
  uint64_t v63 = a2 + v59;
  *(void *)uint64_t v62 = *(void *)v63;
  *(unsigned char *)(v62 + 8) = *(unsigned char *)(v63 + 8);
  uint64_t v64 = a3[43];
  uint64_t v65 = a3[44];
  uint64_t v66 = a1 + v64;
  uint64_t v67 = a2 + v64;
  *(void *)uint64_t v66 = *(void *)v67;
  *(unsigned char *)(v66 + 8) = *(unsigned char *)(v67 + 8);
  uint64_t v68 = a1 + v65;
  uint64_t v69 = a2 + v65;
  *(void *)uint64_t v68 = *(void *)v69;
  *(unsigned char *)(v68 + 8) = *(unsigned char *)(v69 + 8);
  uint64_t v70 = a3[45];
  uint64_t v71 = a3[46];
  uint64_t v72 = a1 + v70;
  uint64_t v73 = (uint64_t *)(a2 + v70);
  uint64_t v74 = *v73;
  *(unsigned char *)(v72 + 8) = *((unsigned char *)v73 + 8);
  *(void *)uint64_t v72 = v74;
  uint64_t v75 = a1 + v71;
  uint64_t v76 = a2 + v71;
  *(void *)uint64_t v75 = *(void *)v76;
  *(unsigned char *)(v75 + 8) = *(unsigned char *)(v76 + 8);
  uint64_t v77 = a3[47];
  uint64_t v78 = a3[48];
  uint64_t v79 = a1 + v77;
  uint64_t v80 = a2 + v77;
  *(void *)uint64_t v79 = *(void *)v80;
  *(unsigned char *)(v79 + 8) = *(unsigned char *)(v80 + 8);
  uint64_t v81 = a1 + v78;
  uint64_t v82 = a2 + v78;
  *(void *)uint64_t v81 = *(void *)v82;
  *(unsigned char *)(v81 + 8) = *(unsigned char *)(v82 + 8);
  uint64_t v83 = a3[49];
  uint64_t v84 = a3[50];
  uint64_t v85 = a1 + v83;
  uint64_t v86 = a2 + v83;
  *(void *)uint64_t v85 = *(void *)v86;
  *(unsigned char *)(v85 + 8) = *(unsigned char *)(v86 + 8);
  uint64_t v87 = a1 + v84;
  uint64_t v88 = a2 + v84;
  *(void *)uint64_t v87 = *(void *)v88;
  *(unsigned char *)(v87 + 8) = *(unsigned char *)(v88 + 8);
  uint64_t v89 = a3[51];
  uint64_t v90 = a3[52];
  uint64_t v91 = a1 + v89;
  uint64_t v92 = a2 + v89;
  *(void *)uint64_t v91 = *(void *)v92;
  *(unsigned char *)(v91 + 8) = *(unsigned char *)(v92 + 8);
  uint64_t v93 = a1 + v90;
  uint64_t v94 = a2 + v90;
  *(void *)uint64_t v93 = *(void *)v94;
  *(unsigned char *)(v93 + 8) = *(unsigned char *)(v94 + 8);
  uint64_t v95 = a3[53];
  uint64_t v96 = a3[54];
  uint64_t v97 = a1 + v95;
  uint64_t v98 = a2 + v95;
  *(void *)uint64_t v97 = *(void *)v98;
  *(unsigned char *)(v97 + 8) = *(unsigned char *)(v98 + 8);
  uint64_t v99 = a1 + v96;
  uint64_t v100 = a2 + v96;
  *(void *)uint64_t v99 = *(void *)v100;
  *(unsigned char *)(v99 + 8) = *(unsigned char *)(v100 + 8);
  uint64_t v101 = a3[56];
  *(unsigned char *)(a1 + a3[55]) = *(unsigned char *)(a2 + a3[55]);
  uint64_t v102 = a1 + v101;
  uint64_t v103 = a2 + v101;
  *(void *)uint64_t v102 = *(void *)v103;
  *(unsigned char *)(v102 + 8) = *(unsigned char *)(v103 + 8);
  uint64_t v104 = a3[57];
  uint64_t v105 = a3[58];
  uint64_t v106 = a1 + v104;
  uint64_t v107 = a2 + v104;
  *(void *)uint64_t v106 = *(void *)v107;
  *(unsigned char *)(v106 + 8) = *(unsigned char *)(v107 + 8);
  uint64_t v108 = a1 + v105;
  uint64_t v109 = a2 + v105;
  *(void *)uint64_t v108 = *(void *)v109;
  *(unsigned char *)(v108 + 8) = *(unsigned char *)(v109 + 8);
  uint64_t v110 = a3[59];
  uint64_t v111 = a3[60];
  uint64_t v112 = a1 + v110;
  uint64_t v113 = a2 + v110;
  *(void *)uint64_t v112 = *(void *)v113;
  *(unsigned char *)(v112 + 8) = *(unsigned char *)(v113 + 8);
  uint64_t v114 = a1 + v111;
  uint64_t v115 = (uint64_t *)(a2 + v111);
  uint64_t v116 = *v115;
  *(unsigned char *)(v114 + 8) = *((unsigned char *)v115 + 8);
  *(void *)uint64_t v114 = v116;
  uint64_t v117 = a3[61];
  uint64_t v118 = a3[62];
  uint64_t v119 = a1 + v117;
  uint64_t v120 = a2 + v117;
  *(void *)uint64_t v119 = *(void *)v120;
  *(unsigned char *)(v119 + 8) = *(unsigned char *)(v120 + 8);
  *(unsigned char *)(a1 + v118) = *(unsigned char *)(a2 + v118);
  uint64_t v121 = a3[64];
  *(unsigned char *)(a1 + a3[63]) = *(unsigned char *)(a2 + a3[63]);
  uint64_t v122 = a1 + v121;
  uint64_t v123 = a2 + v121;
  if (!*(void *)(a1 + v121 + 48)) {
    goto LABEL_5;
  }
  uint64_t v124 = *(void *)(v123 + 48);
  if (!v124)
  {
    sub_100944118(a1 + v121);
LABEL_5:
    long long v126 = *(_OWORD *)(v123 + 80);
    *(_OWORD *)(v122 + 64) = *(_OWORD *)(v123 + 64);
    *(_OWORD *)(v122 + 80) = v126;
    *(_OWORD *)(v122 + 96) = *(_OWORD *)(v123 + 96);
    long long v127 = *(_OWORD *)(v123 + 16);
    *(_OWORD *)uint64_t v122 = *(_OWORD *)v123;
    *(_OWORD *)(v122 + 16) = v127;
    long long v128 = *(_OWORD *)(v123 + 48);
    *(_OWORD *)(v122 + 32) = *(_OWORD *)(v123 + 32);
    *(_OWORD *)(v122 + 48) = v128;
    goto LABEL_6;
  }
  long long v125 = *(_OWORD *)(v123 + 16);
  *(_OWORD *)uint64_t v122 = *(_OWORD *)v123;
  *(_OWORD *)(v122 + 16) = v125;
  *(_OWORD *)(v122 + 32) = *(_OWORD *)(v123 + 32);
  *(void *)(v122 + 48) = v124;
  swift_bridgeObjectRelease();
  *(_OWORD *)(v122 + 56) = *(_OWORD *)(v123 + 56);
  *(_OWORD *)(v122 + 72) = *(_OWORD *)(v123 + 72);
  *(_OWORD *)(v122 + 88) = *(_OWORD *)(v123 + 88);
  *(void *)(v122 + 104) = *(void *)(v123 + 104);
  swift_bridgeObjectRelease();
LABEL_6:
  uint64_t v129 = a3[65];
  uint64_t v130 = a1 + v129;
  uint64_t v131 = a2 + v129;
  *(void *)uint64_t v130 = *(void *)v131;
  *(unsigned char *)(v130 + 8) = *(unsigned char *)(v131 + 8);
  uint64_t v132 = a3[66];
  uint64_t v133 = a1 + v132;
  uint64_t v134 = a2 + v132;
  *(void *)uint64_t v133 = *(void *)v134;
  *(unsigned char *)(v133 + 8) = *(unsigned char *)(v134 + 8);
  uint64_t v135 = a3[67];
  uint64_t v136 = a1 + v135;
  uint64_t v137 = a2 + v135;
  *(void *)uint64_t v136 = *(void *)v137;
  *(unsigned char *)(v136 + 8) = *(unsigned char *)(v137 + 8);
  uint64_t v138 = a3[68];
  uint64_t v139 = a1 + v138;
  uint64_t v140 = a2 + v138;
  *(unsigned char *)(v139 + 8) = *(unsigned char *)(v140 + 8);
  *(void *)uint64_t v139 = *(void *)v140;
  uint64_t v141 = a3[69];
  uint64_t v142 = a1 + v141;
  uint64_t v143 = a2 + v141;
  *(void *)uint64_t v142 = *(void *)v143;
  *(unsigned char *)(v142 + 8) = *(unsigned char *)(v143 + 8);
  uint64_t v144 = a3[70];
  uint64_t v145 = a1 + v144;
  uint64_t v146 = a2 + v144;
  *(void *)uint64_t v145 = *(void *)v146;
  *(unsigned char *)(v145 + 8) = *(unsigned char *)(v146 + 8);
  uint64_t v147 = a3[71];
  uint64_t v148 = a1 + v147;
  uint64_t v149 = a2 + v147;
  *(void *)uint64_t v148 = *(void *)v149;
  *(unsigned char *)(v148 + 8) = *(unsigned char *)(v149 + 8);
  uint64_t v150 = a3[72];
  uint64_t v151 = a1 + v150;
  uint64_t v152 = a2 + v150;
  *(void *)uint64_t v151 = *(void *)v152;
  *(unsigned char *)(v151 + 8) = *(unsigned char *)(v152 + 8);
  uint64_t v153 = a3[73];
  uint64_t v154 = a1 + v153;
  uint64_t v155 = a2 + v153;
  *(void *)uint64_t v154 = *(void *)v155;
  *(unsigned char *)(v154 + 8) = *(unsigned char *)(v155 + 8);
  uint64_t v156 = a3[74];
  uint64_t v157 = a1 + v156;
  uint64_t v158 = a2 + v156;
  *(void *)uint64_t v157 = *(void *)v158;
  *(unsigned char *)(v157 + 8) = *(unsigned char *)(v158 + 8);
  uint64_t v159 = a3[75];
  uint64_t v160 = a1 + v159;
  uint64_t v161 = a2 + v159;
  *(void *)uint64_t v160 = *(void *)v161;
  *(unsigned char *)(v160 + 8) = *(unsigned char *)(v161 + 8);
  uint64_t v162 = a3[76];
  uint64_t v163 = a1 + v162;
  uint64_t v164 = a2 + v162;
  *(void *)uint64_t v163 = *(void *)v164;
  *(unsigned char *)(v163 + 8) = *(unsigned char *)(v164 + 8);
  uint64_t v165 = a3[77];
  uint64_t v166 = a1 + v165;
  uint64_t v167 = a2 + v165;
  *(void *)uint64_t v166 = *(void *)v167;
  *(unsigned char *)(v166 + 8) = *(unsigned char *)(v167 + 8);
  uint64_t v168 = a3[78];
  uint64_t v169 = a1 + v168;
  uint64_t v170 = a2 + v168;
  *(void *)uint64_t v169 = *(void *)v170;
  *(unsigned char *)(v169 + 8) = *(unsigned char *)(v170 + 8);
  uint64_t v171 = a3[79];
  uint64_t v172 = a1 + v171;
  uint64_t v173 = a2 + v171;
  *(void *)uint64_t v172 = *(void *)v173;
  *(unsigned char *)(v172 + 8) = *(unsigned char *)(v173 + 8);
  uint64_t v174 = a3[80];
  uint64_t v175 = a1 + v174;
  uint64_t v176 = a2 + v174;
  *(void *)uint64_t v175 = *(void *)v176;
  *(unsigned char *)(v175 + 8) = *(unsigned char *)(v176 + 8);
  uint64_t v177 = a3[81];
  uint64_t v178 = a1 + v177;
  uint64_t v179 = a2 + v177;
  *(void *)uint64_t v178 = *(void *)v179;
  *(unsigned char *)(v178 + 8) = *(unsigned char *)(v179 + 8);
  uint64_t v180 = a3[82];
  uint64_t v181 = a1 + v180;
  uint64_t v182 = a2 + v180;
  *(void *)uint64_t v181 = *(void *)v182;
  *(unsigned char *)(v181 + 8) = *(unsigned char *)(v182 + 8);
  uint64_t v183 = a3[83];
  uint64_t v184 = a1 + v183;
  uint64_t v185 = a2 + v183;
  *(void *)uint64_t v184 = *(void *)v185;
  uint64_t v186 = a3[84];
  char v187 = *(unsigned char *)(a2 + v186);
  *(unsigned char *)(v184 + 8) = *(unsigned char *)(v185 + 8);
  *(unsigned char *)(a1 + v186) = v187;
  *(unsigned char *)(a1 + a3[85]) = *(unsigned char *)(a2 + a3[85]);
  *(unsigned char *)(a1 + a3[86]) = *(unsigned char *)(a2 + a3[86]);
  uint64_t v188 = a3[87];
  uint64_t v189 = a1 + v188;
  uint64_t v190 = a2 + v188;
  *(void *)uint64_t v189 = *(void *)v190;
  *(unsigned char *)(v189 + 8) = *(unsigned char *)(v190 + 8);
  uint64_t v191 = a3[88];
  uint64_t v192 = a1 + v191;
  uint64_t v193 = a2 + v191;
  *(void *)uint64_t v192 = *(void *)v193;
  *(unsigned char *)(v192 + 8) = *(unsigned char *)(v193 + 8);
  uint64_t v194 = a3[89];
  uint64_t v195 = a1 + v194;
  uint64_t v196 = a2 + v194;
  *(void *)uint64_t v195 = *(void *)v196;
  *(unsigned char *)(v195 + 8) = *(unsigned char *)(v196 + 8);
  uint64_t v197 = a3[90];
  uint64_t v198 = a1 + v197;
  uint64_t v199 = a2 + v197;
  *(void *)uint64_t v198 = *(void *)v199;
  *(unsigned char *)(v198 + 8) = *(unsigned char *)(v199 + 8);
  uint64_t v200 = a3[91];
  uint64_t v201 = a1 + v200;
  uint64_t v202 = (uint64_t *)(a2 + v200);
  uint64_t v203 = *v202;
  *(unsigned char *)(v201 + 8) = *((unsigned char *)v202 + 8);
  *(void *)uint64_t v201 = v203;
  uint64_t v204 = a3[92];
  uint64_t v205 = a1 + v204;
  uint64_t v206 = a2 + v204;
  *(void *)uint64_t v205 = *(void *)v206;
  *(unsigned char *)(v205 + 8) = *(unsigned char *)(v206 + 8);
  uint64_t v207 = a3[93];
  uint64_t v208 = a1 + v207;
  uint64_t v209 = a2 + v207;
  *(void *)uint64_t v208 = *(void *)v209;
  *(unsigned char *)(v208 + 8) = *(unsigned char *)(v209 + 8);
  uint64_t v210 = a3[94];
  uint64_t v211 = a1 + v210;
  uint64_t v212 = a2 + v210;
  *(void *)uint64_t v211 = *(void *)v212;
  *(unsigned char *)(v211 + 8) = *(unsigned char *)(v212 + 8);
  uint64_t v213 = a3[95];
  uint64_t v214 = a1 + v213;
  uint64_t v215 = a2 + v213;
  *(void *)uint64_t v214 = *(void *)v215;
  *(unsigned char *)(v214 + 8) = *(unsigned char *)(v215 + 8);
  *(unsigned char *)(a1 + a3[96]) = *(unsigned char *)(a2 + a3[96]);
  uint64_t v216 = a3[97];
  uint64_t v217 = a1 + v216;
  uint64_t v218 = a2 + v216;
  *(void *)uint64_t v217 = *(void *)v218;
  *(unsigned char *)(v217 + 8) = *(unsigned char *)(v218 + 8);
  uint64_t v219 = a3[98];
  uint64_t v220 = a1 + v219;
  uint64_t v221 = a2 + v219;
  *(void *)uint64_t v220 = *(void *)v221;
  *(unsigned char *)(v220 + 8) = *(unsigned char *)(v221 + 8);
  uint64_t v222 = a3[99];
  uint64_t v223 = a1 + v222;
  uint64_t v224 = a2 + v222;
  *(void *)uint64_t v223 = *(void *)v224;
  *(unsigned char *)(v223 + 8) = *(unsigned char *)(v224 + 8);
  *(unsigned char *)(a1 + a3[100]) = *(unsigned char *)(a2 + a3[100]);
  *(unsigned char *)(a1 + a3[101]) = *(unsigned char *)(a2 + a3[101]);
  *(unsigned char *)(a1 + a3[102]) = *(unsigned char *)(a2 + a3[102]);
  uint64_t v225 = a3[103];
  uint64_t v226 = a1 + v225;
  uint64_t v227 = a2 + v225;
  *(void *)uint64_t v226 = *(void *)v227;
  *(unsigned char *)(v226 + 8) = *(unsigned char *)(v227 + 8);
  uint64_t v228 = a3[104];
  uint64_t v229 = a1 + v228;
  uint64_t v230 = a2 + v228;
  *(void *)uint64_t v229 = *(void *)v230;
  *(unsigned char *)(v229 + 8) = *(unsigned char *)(v230 + 8);
  uint64_t v231 = a3[105];
  uint64_t v232 = a1 + v231;
  uint64_t v233 = a2 + v231;
  *(void *)uint64_t v232 = *(void *)v233;
  *(unsigned char *)(v232 + 8) = *(unsigned char *)(v233 + 8);
  uint64_t v234 = a3[106];
  uint64_t v235 = a1 + v234;
  uint64_t v236 = a2 + v234;
  *(void *)uint64_t v235 = *(void *)v236;
  *(unsigned char *)(v235 + 8) = *(unsigned char *)(v236 + 8);
  *(unsigned char *)(a1 + a3[107]) = *(unsigned char *)(a2 + a3[107]);
  uint64_t v237 = a3[108];
  uint64_t v238 = a1 + v237;
  uint64_t v239 = a2 + v237;
  *(void *)uint64_t v238 = *(void *)v239;
  *(unsigned char *)(v238 + 8) = *(unsigned char *)(v239 + 8);
  *(void *)(a1 + a3[109]) = *(void *)(a2 + a3[109]);
  swift_bridgeObjectRelease();
  uint64_t v240 = a3[110];
  uint64_t v241 = a1 + v240;
  uint64_t v242 = a2 + v240;
  *(void *)uint64_t v241 = *(void *)v242;
  *(unsigned char *)(v241 + 8) = *(unsigned char *)(v242 + 8);
  *(unsigned char *)(a1 + a3[111]) = *(unsigned char *)(a2 + a3[111]);
  *(void *)(a1 + a3[112]) = *(void *)(a2 + a3[112]);
  swift_bridgeObjectRelease();
  uint64_t v243 = a3[113];
  uint64_t v244 = a1 + v243;
  uint64_t v245 = a2 + v243;
  *(unsigned char *)(v244 + 8) = *(unsigned char *)(v245 + 8);
  *(void *)uint64_t v244 = *(void *)v245;
  uint64_t v246 = a3[114];
  uint64_t v247 = a1 + v246;
  uint64_t v248 = a2 + v246;
  *(unsigned char *)(v247 + 8) = *(unsigned char *)(v248 + 8);
  *(void *)uint64_t v247 = *(void *)v248;
  *(unsigned char *)(a1 + a3[115]) = *(unsigned char *)(a2 + a3[115]);
  *(unsigned char *)(a1 + a3[116]) = *(unsigned char *)(a2 + a3[116]);
  uint64_t v249 = a3[117];
  uint64_t v250 = a1 + v249;
  uint64_t v251 = a2 + v249;
  *(void *)uint64_t v250 = *(void *)v251;
  *(unsigned char *)(v250 + 8) = *(unsigned char *)(v251 + 8);
  uint64_t v252 = a3[118];
  uint64_t v253 = a1 + v252;
  uint64_t v254 = a2 + v252;
  *(void *)uint64_t v253 = *(void *)v254;
  *(unsigned char *)(v253 + 8) = *(unsigned char *)(v254 + 8);
  uint64_t v255 = a3[119];
  uint64_t v256 = a1 + v255;
  uint64_t v257 = a2 + v255;
  *(void *)uint64_t v256 = *(void *)v257;
  *(unsigned char *)(v256 + 8) = *(unsigned char *)(v257 + 8);
  uint64_t v258 = a3[120];
  uint64_t v259 = a1 + v258;
  uint64_t v260 = a2 + v258;
  *(void *)uint64_t v259 = *(void *)v260;
  *(unsigned char *)(v259 + 8) = *(unsigned char *)(v260 + 8);
  uint64_t v261 = a3[121];
  uint64_t v262 = a1 + v261;
  uint64_t v263 = (uint64_t *)(a2 + v261);
  uint64_t v264 = *v263;
  *(unsigned char *)(v262 + 8) = *((unsigned char *)v263 + 8);
  *(void *)uint64_t v262 = v264;
  uint64_t v265 = a3[122];
  uint64_t v266 = a1 + v265;
  uint64_t v267 = a2 + v265;
  *(void *)uint64_t v266 = *(void *)v267;
  *(unsigned char *)(v266 + 8) = *(unsigned char *)(v267 + 8);
  uint64_t v268 = a3[123];
  uint64_t v269 = a1 + v268;
  uint64_t v270 = a2 + v268;
  *(void *)uint64_t v269 = *(void *)v270;
  *(unsigned char *)(v269 + 8) = *(unsigned char *)(v270 + 8);
  uint64_t v271 = a3[124];
  uint64_t v272 = a1 + v271;
  uint64_t v273 = a2 + v271;
  *(void *)uint64_t v272 = *(void *)v273;
  *(unsigned char *)(v272 + 8) = *(unsigned char *)(v273 + 8);
  uint64_t v274 = a3[125];
  uint64_t v275 = a1 + v274;
  uint64_t v276 = a2 + v274;
  *(void *)uint64_t v275 = *(void *)v276;
  *(unsigned char *)(v275 + 8) = *(unsigned char *)(v276 + 8);
  uint64_t v277 = a3[126];
  uint64_t v278 = a1 + v277;
  uint64_t v279 = a2 + v277;
  *(void *)uint64_t v278 = *(void *)v279;
  *(unsigned char *)(v278 + 8) = *(unsigned char *)(v279 + 8);
  uint64_t v280 = a3[127];
  uint64_t v281 = a1 + v280;
  uint64_t v282 = a2 + v280;
  *(void *)uint64_t v281 = *(void *)v282;
  *(unsigned char *)(v281 + 8) = *(unsigned char *)(v282 + 8);
  uint64_t v283 = a3[128];
  uint64_t v284 = a1 + v283;
  uint64_t v285 = a2 + v283;
  *(void *)uint64_t v284 = *(void *)v285;
  *(unsigned char *)(v284 + 8) = *(unsigned char *)(v285 + 8);
  uint64_t v286 = a3[129];
  uint64_t v287 = a1 + v286;
  uint64_t v288 = a2 + v286;
  *(void *)uint64_t v287 = *(void *)v288;
  *(unsigned char *)(v287 + 8) = *(unsigned char *)(v288 + 8);
  uint64_t v289 = a3[130];
  uint64_t v290 = a1 + v289;
  uint64_t v291 = a2 + v289;
  *(void *)uint64_t v290 = *(void *)v291;
  *(unsigned char *)(v290 + 8) = *(unsigned char *)(v291 + 8);
  uint64_t v292 = a3[131];
  uint64_t v293 = a1 + v292;
  uint64_t v294 = a2 + v292;
  *(void *)uint64_t v293 = *(void *)v294;
  *(unsigned char *)(v293 + 8) = *(unsigned char *)(v294 + 8);
  uint64_t v295 = a3[132];
  uint64_t v296 = a1 + v295;
  uint64_t v297 = a2 + v295;
  *(void *)uint64_t v296 = *(void *)v297;
  *(unsigned char *)(v296 + 8) = *(unsigned char *)(v297 + 8);
  uint64_t v298 = a3[133];
  uint64_t v299 = a1 + v298;
  uint64_t v300 = a2 + v298;
  *(void *)uint64_t v299 = *(void *)v300;
  *(unsigned char *)(v299 + 8) = *(unsigned char *)(v300 + 8);
  uint64_t v301 = a3[134];
  uint64_t v302 = a1 + v301;
  uint64_t v303 = a2 + v301;
  *(void *)uint64_t v302 = *(void *)v303;
  *(unsigned char *)(v302 + 8) = *(unsigned char *)(v303 + 8);
  *(unsigned char *)(a1 + a3[135]) = *(unsigned char *)(a2 + a3[135]);
  *(unsigned char *)(a1 + a3[136]) = *(unsigned char *)(a2 + a3[136]);
  uint64_t v304 = a3[137];
  uint64_t v305 = a1 + v304;
  uint64_t v306 = a2 + v304;
  *(void *)uint64_t v305 = *(void *)v306;
  *(unsigned char *)(v305 + 8) = *(unsigned char *)(v306 + 8);
  uint64_t v307 = a3[138];
  uint64_t v308 = a1 + v307;
  uint64_t v309 = a2 + v307;
  *(void *)uint64_t v308 = *(void *)v309;
  *(unsigned char *)(v308 + 8) = *(unsigned char *)(v309 + 8);
  *(unsigned char *)(a1 + a3[139]) = *(unsigned char *)(a2 + a3[139]);
  uint64_t v310 = a3[140];
  uint64_t v311 = a1 + v310;
  uint64_t v312 = a2 + v310;
  *(_DWORD *)uint64_t v311 = *(_DWORD *)v312;
  *(unsigned char *)(v311 + 4) = *(unsigned char *)(v312 + 4);
  uint64_t v313 = a3[141];
  uint64_t v314 = a1 + v313;
  uint64_t v315 = a2 + v313;
  *(void *)uint64_t v314 = *(void *)v315;
  *(unsigned char *)(v314 + 8) = *(unsigned char *)(v315 + 8);
  uint64_t v316 = a3[142];
  uint64_t v317 = a1 + v316;
  uint64_t v318 = a2 + v316;
  *(void *)uint64_t v317 = *(void *)v318;
  *(unsigned char *)(v317 + 8) = *(unsigned char *)(v318 + 8);
  uint64_t v319 = a3[143];
  uint64_t v320 = a1 + v319;
  uint64_t v321 = a2 + v319;
  *(void *)uint64_t v320 = *(void *)v321;
  *(unsigned char *)(v320 + 8) = *(unsigned char *)(v321 + 8);
  uint64_t v322 = a3[144];
  uint64_t v323 = a1 + v322;
  uint64_t v324 = (uint64_t *)(a2 + v322);
  uint64_t v325 = *v324;
  *(unsigned char *)(v323 + 8) = *((unsigned char *)v324 + 8);
  *(void *)uint64_t v323 = v325;
  uint64_t v326 = a3[145];
  uint64_t v327 = a1 + v326;
  uint64_t v328 = a2 + v326;
  *(void *)uint64_t v327 = *(void *)v328;
  *(unsigned char *)(v327 + 8) = *(unsigned char *)(v328 + 8);
  uint64_t v329 = a3[146];
  uint64_t v330 = a1 + v329;
  uint64_t v331 = a2 + v329;
  *(void *)uint64_t v330 = *(void *)v331;
  *(unsigned char *)(v330 + 8) = *(unsigned char *)(v331 + 8);
  uint64_t v332 = a3[147];
  uint64_t v333 = a1 + v332;
  uint64_t v334 = a2 + v332;
  *(void *)uint64_t v333 = *(void *)v334;
  *(unsigned char *)(v333 + 8) = *(unsigned char *)(v334 + 8);
  *(unsigned char *)(a1 + a3[148]) = *(unsigned char *)(a2 + a3[148]);
  uint64_t v335 = a3[149];
  uint64_t v336 = a1 + v335;
  uint64_t v337 = a2 + v335;
  *(void *)uint64_t v336 = *(void *)v337;
  *(unsigned char *)(v336 + 8) = *(unsigned char *)(v337 + 8);
  uint64_t v338 = a3[150];
  uint64_t v339 = a1 + v338;
  uint64_t v340 = a2 + v338;
  *(void *)uint64_t v339 = *(void *)v340;
  *(unsigned char *)(v339 + 8) = *(unsigned char *)(v340 + 8);
  uint64_t v341 = a3[151];
  uint64_t v342 = (void *)(a1 + v341);
  uint64_t v343 = (uint64_t *)(a2 + v341);
  uint64_t v345 = *v343;
  uint64_t v344 = v343[1];
  *uint64_t v342 = v345;
  v342[1] = v344;
  swift_bridgeObjectRelease();
  uint64_t v346 = a3[152];
  uint64_t v347 = a1 + v346;
  uint64_t v348 = a2 + v346;
  *(void *)uint64_t v347 = *(void *)v348;
  *(unsigned char *)(v347 + 8) = *(unsigned char *)(v348 + 8);
  uint64_t v349 = a3[153];
  uint64_t v350 = (void *)(a1 + v349);
  uint64_t v351 = (uint64_t *)(a2 + v349);
  uint64_t v353 = *v351;
  uint64_t v352 = v351[1];
  void *v350 = v353;
  v350[1] = v352;
  swift_bridgeObjectRelease();
  uint64_t v354 = a3[154];
  uint64_t v355 = a1 + v354;
  uint64_t v356 = a2 + v354;
  *(void *)uint64_t v355 = *(void *)v356;
  *(unsigned char *)(v355 + 8) = *(unsigned char *)(v356 + 8);
  *(void *)(a1 + a3[155]) = *(void *)(a2 + a3[155]);
  swift_bridgeObjectRelease();
  uint64_t v357 = a3[156];
  uint64_t v358 = a1 + v357;
  uint64_t v359 = a2 + v357;
  *(void *)uint64_t v358 = *(void *)v359;
  *(unsigned char *)(v358 + 8) = *(unsigned char *)(v359 + 8);
  uint64_t v360 = a3[157];
  uint64_t v361 = a1 + v360;
  uint64_t v362 = a2 + v360;
  *(void *)uint64_t v361 = *(void *)v362;
  *(unsigned char *)(v361 + 8) = *(unsigned char *)(v362 + 8);
  uint64_t v363 = a3[158];
  uint64_t v364 = a1 + v363;
  uint64_t v365 = a2 + v363;
  *(void *)uint64_t v364 = *(void *)v365;
  *(unsigned char *)(v364 + 8) = *(unsigned char *)(v365 + 8);
  uint64_t v366 = a3[159];
  uint64_t v367 = (void *)(a1 + v366);
  uint64_t v368 = (uint64_t *)(a2 + v366);
  uint64_t v370 = *v368;
  uint64_t v369 = v368[1];
  *uint64_t v367 = v370;
  v367[1] = v369;
  swift_bridgeObjectRelease();
  uint64_t v371 = a3[160];
  uint64_t v372 = a1 + v371;
  uint64_t v373 = a2 + v371;
  *(void *)uint64_t v372 = *(void *)v373;
  *(unsigned char *)(v372 + 8) = *(unsigned char *)(v373 + 8);
  *(unsigned char *)(a1 + a3[161]) = *(unsigned char *)(a2 + a3[161]);
  return a1;
}

uint64_t sub_1009EBC34(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1009EBC48);
}

uint64_t sub_1009EBC48(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a2 == 0x7FFFFFFF)
  {
    unint64_t v4 = *(void *)(a1 + 16);
    if (v4 >= 0xFFFFFFFF) {
      LODWORD(v4) = -1;
    }
    return (v4 + 1);
  }
  else
  {
    uint64_t v8 = sub_10000588C(&qword_101654C68);
    uint64_t v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 48);
    uint64_t v10 = v8;
    uint64_t v11 = a1 + *(int *)(a3 + 96);
    return v9(v11, a2, v10);
  }
}

uint64_t sub_1009EBCFC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1009EBD10);
}

uint64_t sub_1009EBD10(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(void *)(result + 16) = (a2 - 1);
  }
  else
  {
    uint64_t v7 = sub_10000588C(&qword_101654C68);
    uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56);
    uint64_t v9 = v7;
    uint64_t v10 = v5 + *(int *)(a4 + 96);
    return v8(v10, a2, a2, v9);
  }
  return result;
}

uint64_t type metadata accessor for ConfigurationResponse()
{
  uint64_t result = qword_101654CC8;
  if (!qword_101654CC8) {
    return swift_getSingletonMetadata();
  }
  return result;
}

void sub_1009EBE08()
{
  sub_1009EC0EC();
  if (v0 <= 0x3F) {
    swift_initStructMetadata();
  }
}

void sub_1009EC0EC()
{
  if (!qword_101654CD8)
  {
    type metadata accessor for FeatureSupportMatrix();
    sub_1009EC1C8();
    sub_1009EC21C();
    sub_1009EC270(&qword_1016528E8);
    sub_1009EC270(&qword_101652938);
    unint64_t v0 = type metadata accessor for CustomCodableKeyDictionary();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_101654CD8);
    }
  }
}

unint64_t sub_1009EC1C8()
{
  unint64_t result = qword_101654CE0;
  if (!qword_101654CE0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_101654CE0);
  }
  return result;
}

unint64_t sub_1009EC21C()
{
  unint64_t result = qword_101654CE8;
  if (!qword_101654CE8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_101654CE8);
  }
  return result;
}

uint64_t sub_1009EC270(unint64_t *a1)
{
  uint64_t result = *a1;
  if (!result)
  {
    type metadata accessor for FeatureSupportMatrix();
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

unint64_t sub_1009EC2B4(char a1)
{
  unint64_t result = 0x6F43737574617473;
  switch(a1)
  {
    case 1:
      unint64_t result = 0x7470697263736564;
      break;
    case 2:
      unint64_t result = 0xD000000000000010;
      break;
    case 3:
      unint64_t result = 0xD000000000000019;
      break;
    case 4:
      unint64_t result = 0xD000000000000025;
      break;
    case 5:
      unint64_t result = 0xD000000000000025;
      break;
    case 6:
      unint64_t result = 0xD000000000000018;
      break;
    case 7:
      unint64_t result = 0x754E6C6169726573;
      break;
    case 8:
      unint64_t result = 0x6E457265646E6966;
      break;
    case 9:
      unint64_t result = 0xD000000000000015;
      break;
    case 10:
      unint64_t result = 0xD00000000000001ELL;
      break;
    case 11:
      unint64_t result = 0xD000000000000016;
      break;
    case 12:
      unint64_t result = 0xD000000000000017;
      break;
    case 13:
      unint64_t result = 0xD000000000000024;
      break;
    case 14:
      unint64_t result = 0xD00000000000003ALL;
      break;
    case 15:
      unint64_t result = 0xD000000000000043;
      break;
    case 16:
      unint64_t result = 0xD00000000000001CLL;
      break;
    case 17:
      unint64_t result = 0xD000000000000028;
      break;
    case 18:
      unint64_t result = 0xD00000000000001FLL;
      break;
    case 19:
      unint64_t result = 0xD000000000000021;
      break;
    case 20:
      unint64_t result = 0xD000000000000014;
      break;
    case 21:
      unint64_t result = 0xD000000000000015;
      break;
    case 22:
      unint64_t result = 0xD00000000000001FLL;
      break;
    case 23:
      unint64_t result = 0xD000000000000023;
      break;
    case 24:
      unint64_t result = 0xD000000000000024;
      break;
    case 25:
      unint64_t result = 0xD000000000000026;
      break;
    case 26:
      unint64_t result = 0xD00000000000001FLL;
      break;
    case 27:
      unint64_t result = 0xD000000000000023;
      break;
    case 28:
      unint64_t result = 0xD00000000000002ALL;
      break;
    case 29:
      unint64_t result = 0xD000000000000025;
      break;
    case 30:
      unint64_t result = 0xD00000000000002CLL;
      break;
    case 31:
    case 33:
    case 52:
    case 72:
    case 79:
    case 89:
    case 104:
    case 105:
    case 108:
    case 109:
    case -127:
    case -116:
    case -111:
    case -110:
    case -103:
      unint64_t result = 0xD00000000000001DLL;
      break;
    case 32:
      unint64_t result = 0xD000000000000021;
      break;
    case 34:
      unint64_t result = 0xD000000000000017;
      break;
    case 35:
      unint64_t result = 0xD000000000000010;
      break;
    case 36:
      unint64_t result = 0xD00000000000001FLL;
      break;
    case 37:
      unint64_t result = 0xD000000000000021;
      break;
    case 38:
      unint64_t result = 0xD00000000000002ALL;
      break;
    case 39:
      unint64_t result = 0xD000000000000021;
      break;
    case 40:
      unint64_t result = 0xD000000000000025;
      break;
    case 41:
      unint64_t result = 0xD000000000000023;
      break;
    case 42:
      unint64_t result = 0xD00000000000001CLL;
      break;
    case 43:
      unint64_t result = 0xD00000000000001CLL;
      break;
    case 44:
      unint64_t result = 0xD000000000000026;
      break;
    case 45:
      unint64_t result = 0xD000000000000016;
      break;
    case 46:
      unint64_t result = 0xD000000000000017;
      break;
    case 47:
      unint64_t result = 0xD000000000000012;
      break;
    case 48:
      unint64_t result = 0xD00000000000001ALL;
      break;
    case 49:
      unint64_t result = 0xD00000000000001CLL;
      break;
    case 50:
      unint64_t result = 0xD000000000000011;
      break;
    case 51:
      unint64_t result = 0xD000000000000013;
      break;
    case 53:
      unint64_t result = 0xD00000000000001ELL;
      break;
    case 54:
      unint64_t result = 0xD00000000000001CLL;
      break;
    case 55:
      unint64_t result = 0xD00000000000001CLL;
      break;
    case 56:
      unint64_t result = 0xD00000000000001ELL;
      break;
    case 57:
      unint64_t result = 0xD00000000000001ELL;
      break;
    case 58:
      unint64_t result = 0xD000000000000015;
      break;
    case 59:
      unint64_t result = 0x724473776F6C6C61;
      break;
    case 60:
      unint64_t result = 0xD000000000000010;
      break;
    case 61:
      unint64_t result = 0xD00000000000001CLL;
      break;
    case 62:
      unint64_t result = 0xD00000000000001CLL;
      break;
    case 63:
      unint64_t result = 0xD000000000000025;
      break;
    case 64:
      unint64_t result = 0xD000000000000028;
      break;
    case 65:
      unint64_t result = 0xD000000000000020;
      break;
    case 66:
      unint64_t result = 0xD000000000000021;
      break;
    case 67:
      unint64_t result = 0xD000000000000017;
      break;
    case 68:
      unint64_t result = 0xD000000000000021;
      break;
    case 69:
      unint64_t result = 0xD000000000000023;
      break;
    case 70:
      unint64_t result = 0xD000000000000024;
      break;
    case 71:
      unint64_t result = 0xD000000000000021;
      break;
    case 73:
      unint64_t result = 0xD000000000000020;
      break;
    case 74:
      unint64_t result = 0xD000000000000019;
      break;
    case 75:
      unint64_t result = 0xD000000000000023;
      break;
    case 76:
      unint64_t result = 0xD000000000000015;
      break;
    case 77:
      unint64_t result = 0xD000000000000018;
      break;
    case 78:
      unint64_t result = 0xD00000000000001ALL;
      break;
    case 80:
      unint64_t result = 0x6941656C65487369;
      break;
    case 81:
      unint64_t result = 0xD000000000000018;
      break;
    case 82:
      unint64_t result = 0xD000000000000013;
      break;
    case 83:
      unint64_t result = 0xD000000000000019;
      break;
    case 84:
      unint64_t result = 0xD000000000000023;
      break;
    case 85:
      unint64_t result = 0xD000000000000025;
      break;
    case 86:
      unint64_t result = 0xD00000000000001FLL;
      break;
    case 87:
      unint64_t result = 0xD00000000000001CLL;
      break;
    case 88:
      unint64_t result = 0xD000000000000017;
      break;
    case 90:
      unint64_t result = 0xD00000000000001ALL;
      break;
    case 91:
      unint64_t result = 0xD00000000000001ALL;
      break;
    case 92:
      unint64_t result = 0xD000000000000020;
      break;
    case 93:
      unint64_t result = 0xD00000000000001CLL;
      break;
    case 94:
      unint64_t result = 0xD000000000000022;
      break;
    case 95:
      unint64_t result = 0xD00000000000001ALL;
      break;
    case 96:
      unint64_t result = 0xD00000000000001FLL;
      break;
    case 97:
      unint64_t result = 0xD000000000000018;
      break;
    case 98:
      unint64_t result = 0xD000000000000019;
      break;
    case 99:
      unint64_t result = 0xD00000000000002BLL;
      break;
    case 100:
      unint64_t result = 0xD00000000000001BLL;
      break;
    case 101:
      unint64_t result = 0xD000000000000022;
      break;
    case 102:
      unint64_t result = 0xD000000000000028;
      break;
    case 103:
      unint64_t result = 0xD00000000000002BLL;
      break;
    case 106:
      unint64_t result = 0xD000000000000032;
      break;
    case 107:
      unint64_t result = 0xD000000000000015;
      break;
    case 110:
      unint64_t result = 0xD000000000000020;
      break;
    case 111:
      unint64_t result = 0xD00000000000001FLL;
      break;
    case 112:
      unint64_t result = 0xD000000000000019;
      break;
    case 113:
      unint64_t result = 0xD000000000000010;
      break;
    case 114:
      unint64_t result = 0xD000000000000010;
      break;
    case 115:
    case 116:
      unint64_t result = 0x657261685378616DLL;
      break;
    case 117:
      unint64_t result = 0xD000000000000016;
      break;
    case 118:
      unint64_t result = 0xD000000000000014;
      break;
    case 119:
      unint64_t result = 0xD00000000000001BLL;
      break;
    case 120:
      unint64_t result = 0xD00000000000001ALL;
      break;
    case 121:
      unint64_t result = 0xD00000000000001CLL;
      break;
    case 122:
      unint64_t result = 0xD000000000000022;
      break;
    case 123:
      unint64_t result = 0xD000000000000023;
      break;
    case 124:
      unint64_t result = 0xD000000000000023;
      break;
    case 125:
      unint64_t result = 0xD000000000000024;
      break;
    case 126:
      unint64_t result = 0xD000000000000018;
      break;
    case 127:
      unint64_t result = 0xD00000000000002BLL;
      break;
    case -128:
      unint64_t result = 0xD00000000000002DLL;
      break;
    case -126:
      unint64_t result = 0xD000000000000023;
      break;
    case -125:
      unint64_t result = 0xD000000000000020;
      break;
    case -124:
      unint64_t result = 0xD00000000000001ELL;
      break;
    case -123:
      unint64_t result = 0xD00000000000001ALL;
      break;
    case -122:
      unint64_t result = 0xD00000000000001ELL;
      break;
    case -121:
      unint64_t result = 0xD00000000000001FLL;
      break;
    case -120:
      unint64_t result = 0xD00000000000001ALL;
      break;
    case -119:
      unint64_t result = 0xD00000000000002DLL;
      break;
    case -118:
      unint64_t result = 0xD000000000000022;
      break;
    case -117:
      unint64_t result = 0xD00000000000001ELL;
      break;
    case -115:
      unint64_t result = 0xD000000000000018;
      break;
    case -114:
      unint64_t result = 0xD000000000000023;
      break;
    case -113:
      unint64_t result = 0xD000000000000029;
      break;
    case -112:
      unint64_t result = 0xD000000000000011;
      break;
    case -109:
      unint64_t result = 0xD000000000000015;
      break;
    case -108:
      unint64_t result = 0xD000000000000022;
      break;
    case -107:
      unint64_t result = 0xD000000000000018;
      break;
    case -106:
      unint64_t result = 0xD000000000000025;
      break;
    case -105:
      unint64_t result = 0xD000000000000013;
      break;
    case -104:
      unint64_t result = 0xD00000000000001ELL;
      break;
    case -102:
      unint64_t result = 0xD000000000000021;
      break;
    case -101:
      unint64_t result = 0xD000000000000010;
      break;
    case -100:
      unint64_t result = 0xD000000000000014;
      break;
    case -99:
      unint64_t result = 0xD000000000000017;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t sub_1009ED3C4(char *a1, char *a2)
{
  char v2 = *a2;
  unint64_t v3 = sub_1009EC2B4(*a1);
  uint64_t v5 = v4;
  if (v3 == sub_1009EC2B4(v2) && v5 == v6) {
    char v8 = 1;
  }
  else {
    char v8 = _stringCompareWithSmolCheck(_:_:expecting:)();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v8 & 1;
}

Swift::Int sub_1009ED450()
{
  char v1 = *v0;
  Hasher.init(_seed:)();
  sub_1009EC2B4(v1);
  String.hash(into:)();
  swift_bridgeObjectRelease();
  return Hasher._finalize()();
}

uint64_t sub_1009ED4B4()
{
  sub_1009EC2B4(*v0);
  String.hash(into:)();

  return swift_bridgeObjectRelease();
}

Swift::Int sub_1009ED508()
{
  char v1 = *v0;
  Hasher.init(_seed:)();
  sub_1009EC2B4(v1);
  String.hash(into:)();
  swift_bridgeObjectRelease();
  return Hasher._finalize()();
}

uint64_t sub_1009ED568@<X0>(unsigned char *a1@<X8>)
{
  uint64_t result = sub_1009F0EAC();
  *a1 = result;
  return result;
}

unint64_t sub_1009ED598@<X0>(unint64_t *a1@<X8>)
{
  unint64_t result = sub_1009EC2B4(*v1);
  *a1 = result;
  a1[1] = v4;
  return result;
}

unint64_t sub_1009ED5C4()
{
  return sub_1009EC2B4(*v0);
}

uint64_t sub_1009ED5CC@<X0>(unsigned char *a1@<X8>)
{
  uint64_t result = sub_1009F0EAC();
  *a1 = result;
  return result;
}

void sub_1009ED5F4(unsigned char *a1@<X8>)
{
  *a1 = -98;
}

uint64_t sub_1009ED600(uint64_t a1)
{
  unint64_t v2 = sub_1009F0874();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1009ED63C(uint64_t a1)
{
  unint64_t v2 = sub_1009F0874();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_1009ED678(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return sub_10071CEE8(*a1, *a2);
}

Swift::Int sub_1009ED684()
{
  return Hasher._finalize()();
}

uint64_t sub_1009ED700()
{
  String.hash(into:)();

  return swift_bridgeObjectRelease();
}

Swift::Int sub_1009ED768()
{
  return Hasher._finalize()();
}

uint64_t sub_1009ED7E0@<X0>(Swift::String *a1@<X0>, char *a2@<X8>)
{
  Swift::Int v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_1015A4AD8, *a1);
  uint64_t result = swift_bridgeObjectRelease();
  if (v3 == 1) {
    char v5 = 1;
  }
  else {
    char v5 = 2;
  }
  if (!v3) {
    char v5 = 0;
  }
  *a2 = v5;
  return result;
}

void sub_1009ED840(uint64_t *a1@<X8>)
{
  uint64_t v2 = 3158066;
  if (!*v1) {
    uint64_t v2 = 0x726F7272456F6ELL;
  }
  unint64_t v3 = 0xE700000000000000;
  if (*v1) {
    unint64_t v3 = 0xE300000000000000;
  }
  *a1 = v2;
  a1[1] = v3;
}

uint64_t sub_1009ED878()
{
  return RawRepresentable<>.init(from:)();
}

uint64_t sub_1009ED8D8()
{
  return RawRepresentable<>.encode(to:)();
}

uint64_t sub_1009ED928@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v575 = a2;
  uint64_t v3 = sub_10000588C(&qword_101654C68);
  uint64_t v582 = *(void *)(v3 - 8);
  uint64_t v583 = v3;
  __chkstk_darwin(v3);
  v576 = (char *)v574 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v579 = sub_10000588C(&qword_101654F88);
  uint64_t v577 = *(void *)(v579 - 8);
  __chkstk_darwin(v579);
  uint64_t v6 = (char *)v574 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for ConfigurationResponse();
  v585 = (int *)__chkstk_darwin(v7);
  v586 = (char *)v574 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = &v586[v585[24]];
  type metadata accessor for FeatureSupportMatrix();
  sub_1009EC1C8();
  unint64_t v10 = sub_1009EC21C();
  uint64_t v11 = sub_1009EC270(&qword_1016528E8);
  sub_1009EC270(&qword_101652938);
  v581 = v9;
  CustomCodableKeyDictionary.init(wrappedValue:)();
  uint64_t v12 = a1[3];
  v580 = a1;
  sub_10001CD44(a1, v12);
  sub_1009F0874();
  v578 = v6;
  uint64_t v13 = v584;
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  uint64_t v584 = v13;
  if (v13) {
    goto LABEL_5;
  }
  v574[0] = v11;
  v574[1] = v10;
  uint64_t v14 = v576;
  char v594 = 0;
  sub_1009F08C8();
  uint64_t v15 = v584;
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  if (v15)
  {
    uint64_t v584 = v15;
    (*(void (**)(char *, uint64_t))(v577 + 8))(v578, v579);
LABEL_5:
    int v17 = 0;
    unint64_t v18 = 0;
    unint64_t v19 = 0;
    unint64_t v20 = 0x100000;
    goto LABEL_6;
  }
  uint64_t v16 = v586;
  char *v586 = v587;
  LOBYTE(v587) = 1;
  *((void *)v16 + 1) = KeyedDecodingContainer.decode(_:forKey:)();
  *((void *)v16 + 2) = v29;
  char v594 = 2;
  sub_100037AA0();
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  *(_OWORD *)(v16 + 24) = v587;
  LOBYTE(v587) = 3;
  KeyedDecodingContainer.decode(_:forKey:)();
  *((void *)v16 + 5) = v30;
  LOBYTE(v587) = 4;
  KeyedDecodingContainer.decode(_:forKey:)();
  *((void *)v16 + 6) = v31;
  LOBYTE(v587) = 5;
  KeyedDecodingContainer.decode(_:forKey:)();
  *((void *)v16 + 7) = v32;
  LOBYTE(v587) = 6;
  *((void *)v16 + 8) = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
  v16[72] = v33 & 1;
  LOBYTE(v587) = 7;
  uint64_t v34 = KeyedDecodingContainer.decode(_:forKey:)();
  uint64_t v584 = 0;
  *((void *)v586 + 10) = v34;
  LOBYTE(v587) = 8;
  uint64_t v35 = v584;
  char v36 = KeyedDecodingContainer.decode(_:forKey:)();
  uint64_t v584 = v35;
  if (v35
    || (v586[88] = v36 & 1,
        sub_10000588C(&qword_101654A30),
        char v594 = 9,
        sub_1009F091C((unint64_t *)&qword_1016475B0, &qword_101654A30),
        uint64_t v37 = v584,
        KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)(),
        (uint64_t v584 = v37) != 0))
  {
    unint64_t v20 = 1048582;
    (*(void (**)(char *, uint64_t))(v577 + 8))(v578, v579);
    int v17 = 0;
    unint64_t v18 = 0;
    unint64_t v19 = 0;
  }
  else
  {
    unint64_t v18 = 0;
    unint64_t v20 = 1049094;
    *((void *)v586 + 12) = v587;
    LOBYTE(v587) = 10;
    uint64_t v38 = v584;
    uint64_t v39 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
    uint64_t v584 = v38;
    if (v38) {
      goto LABEL_128;
    }
    uint64_t v41 = v586;
    *((void *)v586 + 13) = v39;
    v41[112] = v40 & 1;
    LOBYTE(v587) = 11;
    uint64_t v42 = v584;
    uint64_t v43 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
    uint64_t v584 = v42;
    if (v42) {
      goto LABEL_128;
    }
    uint64_t v45 = v586;
    *((void *)v586 + 15) = v43;
    v45[128] = v44 & 1;
    LOBYTE(v587) = 12;
    uint64_t v46 = v584;
    uint64_t v47 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
    uint64_t v584 = v46;
    if (v46) {
      goto LABEL_128;
    }
    uint64_t v49 = v586;
    *((void *)v586 + 17) = v47;
    v49[144] = v48 & 1;
    LOBYTE(v587) = 13;
    uint64_t v50 = v584;
    uint64_t v51 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
    uint64_t v584 = v50;
    if (v50) {
      goto LABEL_128;
    }
    uint64_t v53 = v586;
    *((void *)v586 + 19) = v51;
    v53[160] = v52 & 1;
    LOBYTE(v587) = 14;
    uint64_t v54 = v584;
    uint64_t v55 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
    uint64_t v584 = v54;
    if (v54) {
      goto LABEL_128;
    }
    uint64_t v57 = v586;
    *((void *)v586 + 21) = v55;
    v57[176] = v56 & 1;
    LOBYTE(v587) = 15;
    uint64_t v58 = v584;
    uint64_t v59 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
    uint64_t v584 = v58;
    if (v58) {
      goto LABEL_128;
    }
    uint64_t v61 = v586;
    *((void *)v586 + 23) = v59;
    v61[192] = v60 & 1;
    LOBYTE(v587) = 16;
    uint64_t v62 = v584;
    uint64_t v63 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
    uint64_t v584 = v62;
    if (v62) {
      goto LABEL_128;
    }
    uint64_t v65 = v586;
    *((void *)v586 + 25) = v63;
    v65[208] = v64 & 1;
    LOBYTE(v587) = 17;
    uint64_t v66 = v584;
    uint64_t v67 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
    uint64_t v584 = v66;
    if (v66) {
      goto LABEL_128;
    }
    uint64_t v69 = v586;
    *((void *)v586 + 27) = v67;
    v69[224] = v68 & 1;
    LOBYTE(v587) = 18;
    uint64_t v70 = v584;
    uint64_t v71 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
    uint64_t v584 = v70;
    if (v70) {
      goto LABEL_128;
    }
    uint64_t v73 = v586;
    *((void *)v586 + 29) = v71;
    v73[240] = v72 & 1;
    LOBYTE(v587) = 19;
    uint64_t v74 = v584;
    char v75 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
    uint64_t v584 = v74;
    if (v74) {
      goto LABEL_128;
    }
    v586[241] = v75;
    LOBYTE(v587) = 20;
    sub_100946D38();
    uint64_t v76 = v584;
    KeyedDecodingContainer.decode<A, B>(_:forKey:)();
    uint64_t v584 = v76;
    if (v76) {
      goto LABEL_128;
    }
    (*(void (**)(char *, char *, uint64_t))(v582 + 40))(v581, v14, v583);
    LOBYTE(v587) = 21;
    uint64_t v77 = v584;
    uint64_t v78 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
    uint64_t v584 = v77;
    if (v77) {
      goto LABEL_128;
    }
    uint64_t v80 = &v586[v585[26]];
    *(void *)uint64_t v80 = v78;
    v80[8] = v79 & 1;
    LOBYTE(v587) = 22;
    uint64_t v81 = v584;
    uint64_t v82 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
    uint64_t v584 = v81;
    if (v81) {
      goto LABEL_128;
    }
    uint64_t v84 = &v586[v585[27]];
    *(void *)uint64_t v84 = v82;
    v84[8] = v83 & 1;
    LOBYTE(v587) = 23;
    uint64_t v85 = v584;
    uint64_t v86 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
    uint64_t v584 = v85;
    if (v85) {
      goto LABEL_128;
    }
    uint64_t v88 = &v586[v585[28]];
    *(void *)uint64_t v88 = v86;
    v88[8] = v87 & 1;
    LOBYTE(v587) = 24;
    uint64_t v89 = v584;
    uint64_t v90 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
    uint64_t v584 = v89;
    if (v89) {
      goto LABEL_128;
    }
    uint64_t v92 = &v586[v585[29]];
    *(void *)uint64_t v92 = v90;
    v92[8] = v91 & 1;
    LOBYTE(v587) = 25;
    uint64_t v93 = v584;
    uint64_t v94 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
    uint64_t v584 = v93;
    if (v93) {
      goto LABEL_128;
    }
    uint64_t v96 = &v586[v585[30]];
    *(void *)uint64_t v96 = v94;
    v96[8] = v95 & 1;
    LOBYTE(v587) = 26;
    uint64_t v97 = v584;
    uint64_t v98 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
    uint64_t v584 = v97;
    if (v97) {
      goto LABEL_128;
    }
    uint64_t v100 = &v586[v585[31]];
    *(void *)uint64_t v100 = v98;
    v100[8] = v99 & 1;
    LOBYTE(v587) = 27;
    uint64_t v101 = v584;
    uint64_t v102 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
    uint64_t v584 = v101;
    if (v101) {
      goto LABEL_128;
    }
    uint64_t v104 = &v586[v585[32]];
    *(void *)uint64_t v104 = v102;
    v104[8] = v103 & 1;
    LOBYTE(v587) = 28;
    uint64_t v105 = v584;
    uint64_t v106 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
    uint64_t v584 = v105;
    if (v105) {
      goto LABEL_128;
    }
    uint64_t v108 = &v586[v585[33]];
    *(void *)uint64_t v108 = v106;
    v108[8] = v107 & 1;
    LOBYTE(v587) = 29;
    uint64_t v109 = v584;
    uint64_t v110 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
    uint64_t v584 = v109;
    if (v109) {
      goto LABEL_128;
    }
    uint64_t v112 = &v586[v585[34]];
    *(void *)uint64_t v112 = v110;
    v112[8] = v111 & 1;
    LOBYTE(v587) = 30;
    uint64_t v113 = v584;
    uint64_t v114 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
    uint64_t v584 = v113;
    if (v113) {
      goto LABEL_128;
    }
    uint64_t v116 = &v586[v585[35]];
    *(void *)uint64_t v116 = v114;
    v116[8] = v115 & 1;
    LOBYTE(v587) = 31;
    uint64_t v117 = v584;
    char v118 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
    uint64_t v584 = v117;
    if (v117) {
      goto LABEL_128;
    }
    v586[v585[36]] = v118;
    LOBYTE(v587) = 32;
    uint64_t v119 = v584;
    uint64_t v120 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
    uint64_t v584 = v119;
    if (v119) {
      goto LABEL_128;
    }
    uint64_t v122 = &v586[v585[37]];
    *(void *)uint64_t v122 = v120;
    v122[8] = v121 & 1;
    LOBYTE(v587) = 33;
    uint64_t v123 = v584;
    uint64_t v124 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
    uint64_t v584 = v123;
    if (v123) {
      goto LABEL_128;
    }
    long long v126 = &v586[v585[38]];
    *(void *)long long v126 = v124;
    v126[8] = v125 & 1;
    LOBYTE(v587) = 34;
    uint64_t v127 = v584;
    uint64_t v128 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
    uint64_t v584 = v127;
    if (v127) {
      goto LABEL_128;
    }
    uint64_t v130 = &v586[v585[39]];
    *(void *)uint64_t v130 = v128;
    v130[8] = v129 & 1;
    LOBYTE(v587) = 35;
    uint64_t v131 = v584;
    char v132 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
    uint64_t v584 = v131;
    if (v131) {
      goto LABEL_128;
    }
    v586[v585[40]] = v132;
    LOBYTE(v587) = 36;
    uint64_t v133 = v584;
    uint64_t v134 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
    uint64_t v584 = v133;
    if (v133) {
      goto LABEL_128;
    }
    uint64_t v136 = &v586[v585[41]];
    *(void *)uint64_t v136 = v134;
    v136[8] = v135 & 1;
    LOBYTE(v587) = 37;
    uint64_t v137 = v584;
    uint64_t v138 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
    uint64_t v584 = v137;
    if (v137) {
      goto LABEL_128;
    }
    uint64_t v140 = &v586[v585[42]];
    *(void *)uint64_t v140 = v138;
    v140[8] = v139 & 1;
    LOBYTE(v587) = 38;
    uint64_t v141 = v584;
    uint64_t v142 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
    uint64_t v584 = v141;
    if (v141) {
      goto LABEL_128;
    }
    uint64_t v144 = &v586[v585[43]];
    *(void *)uint64_t v144 = v142;
    v144[8] = v143 & 1;
    LOBYTE(v587) = 39;
    uint64_t v145 = v584;
    uint64_t v146 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
    uint64_t v584 = v145;
    if (v145) {
      goto LABEL_128;
    }
    uint64_t v148 = &v586[v585[44]];
    *(void *)uint64_t v148 = v146;
    v148[8] = v147 & 1;
    LOBYTE(v587) = 40;
    uint64_t v149 = v584;
    uint64_t v150 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
    uint64_t v584 = v149;
    if (v149) {
      goto LABEL_128;
    }
    uint64_t v152 = &v586[v585[45]];
    *(void *)uint64_t v152 = v150;
    v152[8] = v151 & 1;
    LOBYTE(v587) = 41;
    uint64_t v153 = v584;
    uint64_t v154 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
    uint64_t v584 = v153;
    if (v153) {
      goto LABEL_128;
    }
    uint64_t v156 = &v586[v585[46]];
    *(void *)uint64_t v156 = v154;
    v156[8] = v155 & 1;
    LOBYTE(v587) = 42;
    uint64_t v157 = v584;
    uint64_t v158 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
    uint64_t v584 = v157;
    if (v157) {
      goto LABEL_128;
    }
    uint64_t v160 = &v586[v585[47]];
    *(void *)uint64_t v160 = v158;
    v160[8] = v159 & 1;
    LOBYTE(v587) = 43;
    uint64_t v161 = v584;
    uint64_t v162 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
    uint64_t v584 = v161;
    if (v161) {
      goto LABEL_128;
    }
    uint64_t v164 = &v586[v585[48]];
    *(void *)uint64_t v164 = v162;
    v164[8] = v163 & 1;
    LOBYTE(v587) = 44;
    uint64_t v165 = v584;
    uint64_t v166 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
    uint64_t v584 = v165;
    if (v165) {
      goto LABEL_128;
    }
    uint64_t v168 = &v586[v585[49]];
    *(void *)uint64_t v168 = v166;
    v168[8] = v167 & 1;
    LOBYTE(v587) = 45;
    uint64_t v169 = v584;
    uint64_t v170 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
    uint64_t v584 = v169;
    if (v169) {
      goto LABEL_128;
    }
    uint64_t v172 = &v586[v585[25]];
    *(void *)uint64_t v172 = v170;
    v172[8] = v171 & 1;
    LOBYTE(v587) = 46;
    uint64_t v173 = v584;
    uint64_t v174 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
    uint64_t v584 = v173;
    if (v173) {
      goto LABEL_128;
    }
    uint64_t v176 = &v586[v585[50]];
    *(void *)uint64_t v176 = v174;
    v176[8] = v175 & 1;
    LOBYTE(v587) = 47;
    uint64_t v177 = v584;
    uint64_t v178 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
    uint64_t v584 = v177;
    if (v177) {
      goto LABEL_128;
    }
    uint64_t v180 = &v586[v585[51]];
    *(void *)uint64_t v180 = v178;
    v180[8] = v179 & 1;
    LOBYTE(v587) = 48;
    uint64_t v181 = v584;
    uint64_t v182 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
    uint64_t v584 = v181;
    if (v181) {
      goto LABEL_128;
    }
    uint64_t v184 = &v586[v585[52]];
    *(void *)uint64_t v184 = v182;
    v184[8] = v183 & 1;
    LOBYTE(v587) = 49;
    uint64_t v185 = v584;
    uint64_t v186 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
    uint64_t v584 = v185;
    if (v185) {
      goto LABEL_128;
    }
    uint64_t v188 = &v586[v585[53]];
    *(void *)uint64_t v188 = v186;
    v188[8] = v187 & 1;
    LOBYTE(v587) = 50;
    uint64_t v189 = v584;
    uint64_t v190 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
    uint64_t v584 = v189;
    if (v189) {
      goto LABEL_128;
    }
    uint64_t v192 = &v586[v585[54]];
    *(void *)uint64_t v192 = v190;
    v192[8] = v191 & 1;
    LOBYTE(v587) = 51;
    uint64_t v193 = v584;
    char v194 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
    uint64_t v584 = v193;
    if (v193) {
      goto LABEL_128;
    }
    v586[v585[55]] = v194;
    LOBYTE(v587) = 52;
    uint64_t v195 = v584;
    uint64_t v196 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
    uint64_t v584 = v195;
    if (v195) {
      goto LABEL_128;
    }
    uint64_t v198 = &v586[v585[56]];
    *(void *)uint64_t v198 = v196;
    v198[8] = v197 & 1;
    LOBYTE(v587) = 53;
    uint64_t v199 = v584;
    uint64_t v200 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
    uint64_t v584 = v199;
    if (v199) {
      goto LABEL_128;
    }
    uint64_t v202 = &v586[v585[57]];
    *(void *)uint64_t v202 = v200;
    v202[8] = v201 & 1;
    LOBYTE(v587) = 54;
    uint64_t v203 = v584;
    uint64_t v204 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
    uint64_t v584 = v203;
    if (v203) {
      goto LABEL_128;
    }
    uint64_t v206 = &v586[v585[58]];
    *(void *)uint64_t v206 = v204;
    v206[8] = v205 & 1;
    LOBYTE(v587) = 55;
    uint64_t v207 = v584;
    uint64_t v208 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
    uint64_t v584 = v207;
    if (v207) {
      goto LABEL_128;
    }
    uint64_t v210 = &v586[v585[59]];
    *(void *)uint64_t v210 = v208;
    v210[8] = v209 & 1;
    LOBYTE(v587) = 56;
    uint64_t v211 = v584;
    uint64_t v212 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
    uint64_t v584 = v211;
    if (v211) {
      goto LABEL_128;
    }
    uint64_t v214 = &v586[v585[60]];
    *(void *)uint64_t v214 = v212;
    v214[8] = v213 & 1;
    LOBYTE(v587) = 57;
    uint64_t v215 = v584;
    uint64_t v216 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
    uint64_t v584 = v215;
    if (v215) {
      goto LABEL_128;
    }
    uint64_t v218 = &v586[v585[61]];
    *(void *)uint64_t v218 = v216;
    v218[8] = v217 & 1;
    LOBYTE(v587) = 58;
    uint64_t v219 = v584;
    char v220 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
    uint64_t v584 = v219;
    if (v219) {
      goto LABEL_128;
    }
    v586[v585[62]] = v220;
    LOBYTE(v587) = 59;
    uint64_t v221 = v584;
    char v222 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
    uint64_t v584 = v221;
    if (v221) {
      goto LABEL_128;
    }
    v586[v585[63]] = v222;
    char v594 = 60;
    sub_100946E20();
    uint64_t v223 = v584;
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
    uint64_t v584 = v223;
    if (v223) {
      goto LABEL_128;
    }
    unint64_t v18 = 0;
    unint64_t v20 = 0x1000000000100206;
    uint64_t v224 = &v586[v585[64]];
    long long v225 = v588;
    *(_OWORD *)uint64_t v224 = v587;
    *((_OWORD *)v224 + 1) = v225;
    long long v226 = v590;
    *((_OWORD *)v224 + 2) = v589;
    *((_OWORD *)v224 + 3) = v226;
    long long v227 = v592;
    *((_OWORD *)v224 + 4) = v591;
    *((_OWORD *)v224 + 5) = v227;
    *((_OWORD *)v224 + 6) = v593;
    LOBYTE(v587) = 61;
    uint64_t v228 = v584;
    uint64_t v229 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
    uint64_t v584 = v228;
    if (v228) {
      goto LABEL_128;
    }
    uint64_t v231 = &v586[v585[65]];
    *(void *)uint64_t v231 = v229;
    v231[8] = v230 & 1;
    LOBYTE(v587) = 62;
    uint64_t v232 = v584;
    uint64_t v233 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
    uint64_t v584 = v232;
    if (v232) {
      goto LABEL_128;
    }
    uint64_t v235 = &v586[v585[66]];
    *(void *)uint64_t v235 = v233;
    v235[8] = v234 & 1;
    LOBYTE(v587) = 63;
    uint64_t v236 = v584;
    uint64_t v237 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
    uint64_t v584 = v236;
    if (v236) {
      goto LABEL_128;
    }
    uint64_t v239 = &v586[v585[67]];
    *(void *)uint64_t v239 = v237;
    v239[8] = v238 & 1;
    LOBYTE(v587) = 64;
    uint64_t v240 = v584;
    uint64_t v241 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
    uint64_t v584 = v240;
    if (v240) {
      goto LABEL_128;
    }
    uint64_t v243 = &v586[v585[68]];
    *(void *)uint64_t v243 = v241;
    v243[8] = v242 & 1;
    LOBYTE(v587) = 65;
    uint64_t v244 = v584;
    uint64_t v245 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
    uint64_t v584 = v244;
    if (v244) {
      goto LABEL_128;
    }
    uint64_t v247 = &v586[v585[69]];
    *(void *)uint64_t v247 = v245;
    v247[8] = v246 & 1;
    LOBYTE(v587) = 66;
    uint64_t v248 = v584;
    uint64_t v249 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
    uint64_t v584 = v248;
    if (v248) {
      goto LABEL_128;
    }
    uint64_t v251 = &v586[v585[70]];
    *(void *)uint64_t v251 = v249;
    v251[8] = v250 & 1;
    LOBYTE(v587) = 67;
    uint64_t v252 = v584;
    uint64_t v253 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
    uint64_t v584 = v252;
    if (v252) {
      goto LABEL_128;
    }
    uint64_t v255 = &v586[v585[71]];
    *(void *)uint64_t v255 = v253;
    v255[8] = v254 & 1;
    LOBYTE(v587) = 68;
    uint64_t v256 = v584;
    uint64_t v257 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
    uint64_t v584 = v256;
    if (v256) {
      goto LABEL_128;
    }
    uint64_t v259 = &v586[v585[72]];
    *(void *)uint64_t v259 = v257;
    v259[8] = v258 & 1;
    LOBYTE(v587) = 69;
    uint64_t v260 = v584;
    uint64_t v261 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
    uint64_t v584 = v260;
    if (v260) {
      goto LABEL_128;
    }
    uint64_t v263 = &v586[v585[73]];
    *(void *)uint64_t v263 = v261;
    v263[8] = v262 & 1;
    LOBYTE(v587) = 70;
    uint64_t v264 = v584;
    uint64_t v265 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
    uint64_t v584 = v264;
    if (v264) {
      goto LABEL_128;
    }
    uint64_t v267 = &v586[v585[74]];
    *(void *)uint64_t v267 = v265;
    v267[8] = v266 & 1;
    LOBYTE(v587) = 71;
    uint64_t v268 = v584;
    uint64_t v269 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
    uint64_t v584 = v268;
    if (v268) {
      goto LABEL_128;
    }
    uint64_t v271 = &v586[v585[75]];
    *(void *)uint64_t v271 = v269;
    v271[8] = v270 & 1;
    LOBYTE(v587) = 72;
    uint64_t v272 = v584;
    uint64_t v273 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
    uint64_t v584 = v272;
    if (v272) {
      goto LABEL_128;
    }
    uint64_t v275 = &v586[v585[76]];
    *(void *)uint64_t v275 = v273;
    v275[8] = v274 & 1;
    LOBYTE(v587) = 73;
    uint64_t v276 = v584;
    uint64_t v277 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
    uint64_t v584 = v276;
    if (v276) {
      goto LABEL_128;
    }
    uint64_t v279 = &v586[v585[77]];
    *(void *)uint64_t v279 = v277;
    v279[8] = v278 & 1;
    LOBYTE(v587) = 74;
    uint64_t v280 = v584;
    uint64_t v281 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
    uint64_t v584 = v280;
    if (v280) {
      goto LABEL_128;
    }
    uint64_t v283 = &v586[v585[78]];
    *(void *)uint64_t v283 = v281;
    v283[8] = v282 & 1;
    LOBYTE(v587) = 75;
    uint64_t v284 = v584;
    uint64_t v285 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
    uint64_t v584 = v284;
    if (v284) {
      goto LABEL_128;
    }
    uint64_t v287 = &v586[v585[79]];
    *(void *)uint64_t v287 = v285;
    v287[8] = v286 & 1;
    LOBYTE(v587) = 76;
    uint64_t v288 = v584;
    uint64_t v289 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
    uint64_t v584 = v288;
    if (v288) {
      goto LABEL_128;
    }
    uint64_t v291 = &v586[v585[80]];
    *(void *)uint64_t v291 = v289;
    v291[8] = v290 & 1;
    LOBYTE(v587) = 77;
    uint64_t v292 = v584;
    uint64_t v293 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
    uint64_t v584 = v292;
    if (v292) {
      goto LABEL_128;
    }
    uint64_t v295 = &v586[v585[81]];
    *(void *)uint64_t v295 = v293;
    v295[8] = v294 & 1;
    LOBYTE(v587) = 78;
    uint64_t v296 = v584;
    uint64_t v297 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
    uint64_t v584 = v296;
    if (v296) {
      goto LABEL_128;
    }
    uint64_t v299 = &v586[v585[82]];
    *(void *)uint64_t v299 = v297;
    v299[8] = v298 & 1;
    LOBYTE(v587) = 79;
    uint64_t v300 = v584;
    uint64_t v301 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
    uint64_t v584 = v300;
    if (v300) {
      goto LABEL_128;
    }
    uint64_t v303 = &v586[v585[83]];
    *(void *)uint64_t v303 = v301;
    v303[8] = v302 & 1;
    LOBYTE(v587) = 80;
    uint64_t v304 = v584;
    char v305 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
    uint64_t v584 = v304;
    if (v304) {
      goto LABEL_128;
    }
    v586[v585[84]] = v305;
    LOBYTE(v587) = 81;
    uint64_t v306 = v584;
    char v307 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
    uint64_t v584 = v306;
    if (v306) {
      goto LABEL_128;
    }
    v586[v585[85]] = v307;
    LOBYTE(v587) = 82;
    uint64_t v308 = v584;
    char v309 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
    uint64_t v584 = v308;
    if (v308) {
      goto LABEL_128;
    }
    v586[v585[86]] = v309;
    LOBYTE(v587) = 83;
    uint64_t v310 = v584;
    uint64_t v311 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
    uint64_t v584 = v310;
    if (v310) {
      goto LABEL_128;
    }
    uint64_t v313 = &v586[v585[87]];
    *(void *)uint64_t v313 = v311;
    v313[8] = v312 & 1;
    LOBYTE(v587) = 84;
    uint64_t v314 = v584;
    uint64_t v315 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
    uint64_t v584 = v314;
    if (v314) {
      goto LABEL_128;
    }
    uint64_t v317 = &v586[v585[88]];
    *(void *)uint64_t v317 = v315;
    v317[8] = v316 & 1;
    LOBYTE(v587) = 85;
    uint64_t v318 = v584;
    uint64_t v319 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
    uint64_t v584 = v318;
    if (v318) {
      goto LABEL_128;
    }
    uint64_t v321 = &v586[v585[89]];
    *(void *)uint64_t v321 = v319;
    v321[8] = v320 & 1;
    LOBYTE(v587) = 86;
    uint64_t v322 = v584;
    uint64_t v323 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
    uint64_t v584 = v322;
    if (v322) {
      goto LABEL_128;
    }
    uint64_t v325 = &v586[v585[90]];
    *(void *)uint64_t v325 = v323;
    v325[8] = v324 & 1;
    LOBYTE(v587) = 87;
    uint64_t v326 = v584;
    uint64_t v327 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
    uint64_t v584 = v326;
    if (v326) {
      goto LABEL_128;
    }
    uint64_t v329 = &v586[v585[91]];
    *(void *)uint64_t v329 = v327;
    v329[8] = v328 & 1;
    LOBYTE(v587) = 88;
    uint64_t v330 = v584;
    uint64_t v331 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
    uint64_t v584 = v330;
    if (v330) {
      goto LABEL_128;
    }
    uint64_t v333 = &v586[v585[92]];
    *(void *)uint64_t v333 = v331;
    v333[8] = v332 & 1;
    LOBYTE(v587) = 89;
    uint64_t v334 = v584;
    uint64_t v335 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
    uint64_t v584 = v334;
    if (v334) {
      goto LABEL_128;
    }
    uint64_t v337 = &v586[v585[93]];
    *(void *)uint64_t v337 = v335;
    v337[8] = v336 & 1;
    LOBYTE(v587) = 90;
    uint64_t v338 = v584;
    uint64_t v339 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
    uint64_t v584 = v338;
    if (v338) {
      goto LABEL_128;
    }
    uint64_t v341 = &v586[v585[94]];
    *(void *)uint64_t v341 = v339;
    v341[8] = v340 & 1;
    LOBYTE(v587) = 91;
    uint64_t v342 = v584;
    uint64_t v343 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
    uint64_t v584 = v342;
    if (v342) {
      goto LABEL_128;
    }
    uint64_t v345 = &v586[v585[95]];
    *(void *)uint64_t v345 = v343;
    v345[8] = v344 & 1;
    LOBYTE(v587) = 92;
    uint64_t v346 = v584;
    char v347 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
    uint64_t v584 = v346;
    if (v346) {
      goto LABEL_128;
    }
    v586[v585[96]] = v347;
    LOBYTE(v587) = 93;
    uint64_t v348 = v584;
    uint64_t v349 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
    uint64_t v584 = v348;
    if (v348) {
      goto LABEL_128;
    }
    uint64_t v351 = &v586[v585[97]];
    *(void *)uint64_t v351 = v349;
    v351[8] = v350 & 1;
    LOBYTE(v587) = 94;
    uint64_t v352 = v584;
    uint64_t v353 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
    uint64_t v584 = v352;
    if (v352) {
      goto LABEL_128;
    }
    uint64_t v355 = &v586[v585[98]];
    *(void *)uint64_t v355 = v353;
    v355[8] = v354 & 1;
    LOBYTE(v587) = 95;
    uint64_t v356 = v584;
    uint64_t v357 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
    uint64_t v584 = v356;
    if (v356) {
      goto LABEL_128;
    }
    uint64_t v359 = &v586[v585[99]];
    *(void *)uint64_t v359 = v357;
    v359[8] = v358 & 1;
    LOBYTE(v587) = 96;
    uint64_t v360 = v584;
    char v361 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
    uint64_t v584 = v360;
    if (v360) {
      goto LABEL_128;
    }
    v586[v585[100]] = v361;
    LOBYTE(v587) = 97;
    uint64_t v362 = v584;
    char v363 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
    uint64_t v584 = v362;
    if (v362) {
      goto LABEL_128;
    }
    v586[v585[101]] = v363;
    LOBYTE(v587) = 98;
    uint64_t v364 = v584;
    char v365 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
    uint64_t v584 = v364;
    if (v364) {
      goto LABEL_128;
    }
    v586[v585[102]] = v365;
    LOBYTE(v587) = 99;
    uint64_t v366 = v584;
    uint64_t v367 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
    uint64_t v584 = v366;
    if (v366) {
      goto LABEL_128;
    }
    uint64_t v369 = &v586[v585[103]];
    *(void *)uint64_t v369 = v367;
    v369[8] = v368 & 1;
    LOBYTE(v587) = 100;
    uint64_t v370 = v584;
    uint64_t v371 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
    uint64_t v584 = v370;
    if (v370) {
      goto LABEL_128;
    }
    uint64_t v373 = &v586[v585[104]];
    *(void *)uint64_t v373 = v371;
    v373[8] = v372 & 1;
    LOBYTE(v587) = 101;
    uint64_t v374 = v584;
    uint64_t v375 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
    uint64_t v584 = v374;
    if (v374) {
      goto LABEL_128;
    }
    uint64_t v377 = &v586[v585[105]];
    *(void *)uint64_t v377 = v375;
    v377[8] = v376 & 1;
    LOBYTE(v587) = 102;
    uint64_t v378 = v584;
    uint64_t v379 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
    uint64_t v584 = v378;
    if (v378) {
      goto LABEL_128;
    }
    uint64_t v381 = &v586[v585[106]];
    *(void *)uint64_t v381 = v379;
    v381[8] = v380 & 1;
    LOBYTE(v587) = 103;
    uint64_t v382 = v584;
    char v383 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
    uint64_t v584 = v382;
    if (v382) {
      goto LABEL_128;
    }
    v586[v585[107]] = v383;
    LOBYTE(v587) = 104;
    uint64_t v384 = v584;
    uint64_t v385 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
    uint64_t v584 = v384;
    if (v384) {
      goto LABEL_128;
    }
    uint64_t v387 = &v586[v585[108]];
    *(void *)uint64_t v387 = v385;
    v387[8] = v386 & 1;
    sub_10000588C(&qword_10163AB88);
    char v594 = 105;
    sub_1009F091C(&qword_101641A00, &qword_10163AB88);
    uint64_t v388 = v584;
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
    uint64_t v584 = v388;
    if (v388)
    {
LABEL_128:
      (*(void (**)(char *, uint64_t))(v577 + 8))(v578, v579);
      int v17 = 0;
      unint64_t v19 = 0;
    }
    else
    {
      unint64_t v19 = 0;
      unint64_t v18 = 0x20000000000;
      *(void *)&v586[v585[109]] = v587;
      LOBYTE(v587) = 106;
      uint64_t v389 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
      uint64_t v584 = 0;
      v390 = &v586[v585[110]];
      *(void *)v390 = v389;
      v390[8] = v391 & 1;
      LOBYTE(v587) = 107;
      uint64_t v392 = v584;
      char v393 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
      uint64_t v584 = v392;
      if (v392) {
        goto LABEL_176;
      }
      v586[v585[111]] = v393;
      sub_10000588C(&qword_10163AB70);
      char v594 = 108;
      sub_1009F0980();
      uint64_t v394 = v584;
      KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
      uint64_t v584 = v394;
      if (v394) {
        goto LABEL_176;
      }
      unint64_t v19 = 0;
      unint64_t v18 = 0x120000000000;
      *(void *)&v586[v585[112]] = v587;
      LOBYTE(v587) = 109;
      uint64_t v395 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
      uint64_t v584 = 0;
      uint64_t v396 = &v586[v585[113]];
      *(void *)uint64_t v396 = v395;
      v396[8] = v397 & 1;
      LOBYTE(v587) = 110;
      uint64_t v398 = v584;
      uint64_t v399 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
      uint64_t v584 = v398;
      if (v398) {
        goto LABEL_176;
      }
      uint64_t v401 = &v586[v585[114]];
      *(void *)uint64_t v401 = v399;
      v401[8] = v400 & 1;
      LOBYTE(v587) = 111;
      uint64_t v402 = v584;
      char v403 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
      uint64_t v584 = v402;
      if (v402) {
        goto LABEL_176;
      }
      v586[v585[115]] = v403;
      LOBYTE(v587) = 112;
      uint64_t v404 = v584;
      char v405 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
      uint64_t v584 = v404;
      if (v404) {
        goto LABEL_176;
      }
      v586[v585[116]] = v405;
      LOBYTE(v587) = 113;
      uint64_t v406 = v584;
      uint64_t v407 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
      uint64_t v584 = v406;
      if (v406) {
        goto LABEL_176;
      }
      uint64_t v409 = &v586[v585[117]];
      *(void *)uint64_t v409 = v407;
      v409[8] = v408 & 1;
      LOBYTE(v587) = 114;
      uint64_t v410 = v584;
      uint64_t v411 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
      uint64_t v584 = v410;
      if (v410) {
        goto LABEL_176;
      }
      uint64_t v413 = &v586[v585[118]];
      *(void *)uint64_t v413 = v411;
      v413[8] = v412 & 1;
      LOBYTE(v587) = 115;
      uint64_t v414 = v584;
      uint64_t v415 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
      uint64_t v584 = v414;
      if (v414) {
        goto LABEL_176;
      }
      uint64_t v417 = &v586[v585[119]];
      *(void *)uint64_t v417 = v415;
      v417[8] = v416 & 1;
      LOBYTE(v587) = 116;
      uint64_t v418 = v584;
      uint64_t v419 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
      uint64_t v584 = v418;
      if (v418) {
        goto LABEL_176;
      }
      v421 = &v586[v585[120]];
      *(void *)v421 = v419;
      v421[8] = v420 & 1;
      LOBYTE(v587) = 117;
      uint64_t v422 = v584;
      uint64_t v423 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
      uint64_t v584 = v422;
      if (v422) {
        goto LABEL_176;
      }
      v425 = &v586[v585[121]];
      *(void *)v425 = v423;
      v425[8] = v424 & 1;
      LOBYTE(v587) = 118;
      uint64_t v426 = v584;
      uint64_t v427 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
      uint64_t v584 = v426;
      if (v426) {
        goto LABEL_176;
      }
      v429 = &v586[v585[122]];
      *(void *)v429 = v427;
      v429[8] = v428 & 1;
      LOBYTE(v587) = 119;
      uint64_t v430 = v584;
      uint64_t v431 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
      uint64_t v584 = v430;
      if (v430) {
        goto LABEL_176;
      }
      uint64_t v433 = &v586[v585[123]];
      *(void *)uint64_t v433 = v431;
      v433[8] = v432 & 1;
      LOBYTE(v587) = 120;
      uint64_t v434 = v584;
      uint64_t v435 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
      uint64_t v584 = v434;
      if (v434) {
        goto LABEL_176;
      }
      uint64_t v437 = &v586[v585[124]];
      *(void *)uint64_t v437 = v435;
      v437[8] = v436 & 1;
      LOBYTE(v587) = 121;
      uint64_t v438 = v584;
      uint64_t v439 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
      uint64_t v584 = v438;
      if (v438) {
        goto LABEL_176;
      }
      uint64_t v441 = &v586[v585[125]];
      *(void *)uint64_t v441 = v439;
      v441[8] = v440 & 1;
      LOBYTE(v587) = 122;
      uint64_t v442 = v584;
      uint64_t v443 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
      uint64_t v584 = v442;
      if (v442) {
        goto LABEL_176;
      }
      uint64_t v445 = &v586[v585[126]];
      *(void *)uint64_t v445 = v443;
      v445[8] = v444 & 1;
      LOBYTE(v587) = 123;
      uint64_t v446 = v584;
      uint64_t v447 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
      uint64_t v584 = v446;
      if (v446) {
        goto LABEL_176;
      }
      uint64_t v449 = &v586[v585[127]];
      *(void *)uint64_t v449 = v447;
      v449[8] = v448 & 1;
      LOBYTE(v587) = 124;
      uint64_t v450 = v584;
      uint64_t v451 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
      uint64_t v584 = v450;
      if (v450) {
        goto LABEL_176;
      }
      v453 = &v586[v585[128]];
      *(void *)v453 = v451;
      v453[8] = v452 & 1;
      LOBYTE(v587) = 125;
      uint64_t v454 = v584;
      uint64_t v455 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
      uint64_t v584 = v454;
      if (v454) {
        goto LABEL_176;
      }
      v457 = &v586[v585[129]];
      *(void *)v457 = v455;
      v457[8] = v456 & 1;
      LOBYTE(v587) = 126;
      uint64_t v458 = v584;
      uint64_t v459 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
      uint64_t v584 = v458;
      if (v458) {
        goto LABEL_176;
      }
      v461 = &v586[v585[130]];
      *(void *)v461 = v459;
      v461[8] = v460 & 1;
      LOBYTE(v587) = 127;
      uint64_t v462 = v584;
      uint64_t v463 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
      uint64_t v584 = v462;
      if (v462) {
        goto LABEL_176;
      }
      v465 = &v586[v585[131]];
      *(void *)v465 = v463;
      v465[8] = v464 & 1;
      LOBYTE(v587) = 0x80;
      uint64_t v466 = v584;
      uint64_t v467 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
      uint64_t v584 = v466;
      if (v466) {
        goto LABEL_176;
      }
      v469 = &v586[v585[132]];
      *(void *)v469 = v467;
      v469[8] = v468 & 1;
      LOBYTE(v587) = -127;
      uint64_t v470 = v584;
      uint64_t v471 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
      uint64_t v584 = v470;
      if (v470) {
        goto LABEL_176;
      }
      v473 = &v586[v585[133]];
      *(void *)v473 = v471;
      v473[8] = v472 & 1;
      LOBYTE(v587) = -126;
      uint64_t v474 = v584;
      uint64_t v475 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
      uint64_t v584 = v474;
      if (v474) {
        goto LABEL_176;
      }
      v477 = &v586[v585[134]];
      *(void *)v477 = v475;
      v477[8] = v476 & 1;
      LOBYTE(v587) = -125;
      uint64_t v478 = v584;
      char v479 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
      uint64_t v584 = v478;
      if (v478) {
        goto LABEL_176;
      }
      v586[v585[135]] = v479;
      LOBYTE(v587) = -124;
      uint64_t v480 = v584;
      char v481 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
      uint64_t v584 = v480;
      if (v480) {
        goto LABEL_176;
      }
      v586[v585[136]] = v481;
      LOBYTE(v587) = -123;
      uint64_t v482 = v584;
      uint64_t v483 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
      uint64_t v584 = v482;
      if (v482) {
        goto LABEL_176;
      }
      v485 = &v586[v585[137]];
      *(void *)v485 = v483;
      v485[8] = v484 & 1;
      LOBYTE(v587) = -122;
      uint64_t v486 = v584;
      uint64_t v487 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
      uint64_t v584 = v486;
      if (v486) {
        goto LABEL_176;
      }
      v489 = &v586[v585[138]];
      *(void *)v489 = v487;
      v489[8] = v488 & 1;
      LOBYTE(v587) = -121;
      uint64_t v490 = v584;
      char v491 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
      uint64_t v584 = v490;
      if (v490) {
        goto LABEL_176;
      }
      v586[v585[139]] = v491;
      LOBYTE(v587) = -120;
      uint64_t v492 = v584;
      uint64_t v493 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
      uint64_t v584 = v492;
      if (v492) {
        goto LABEL_176;
      }
      v494 = &v586[v585[140]];
      *(_DWORD *)v494 = v493;
      v494[4] = BYTE4(v493) & 1;
      LOBYTE(v587) = -119;
      uint64_t v495 = v584;
      uint64_t v496 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
      uint64_t v584 = v495;
      if (v495) {
        goto LABEL_176;
      }
      v498 = &v586[v585[141]];
      *(void *)v498 = v496;
      v498[8] = v497 & 1;
      LOBYTE(v587) = -118;
      uint64_t v499 = v584;
      uint64_t v500 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
      uint64_t v584 = v499;
      if (v499) {
        goto LABEL_176;
      }
      v502 = &v586[v585[142]];
      *(void *)v502 = v500;
      v502[8] = v501 & 1;
      LOBYTE(v587) = -117;
      uint64_t v503 = v584;
      uint64_t v504 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
      uint64_t v584 = v503;
      if (v503) {
        goto LABEL_176;
      }
      v506 = &v586[v585[143]];
      *(void *)v506 = v504;
      v506[8] = v505 & 1;
      LOBYTE(v587) = -116;
      uint64_t v507 = v584;
      uint64_t v508 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
      uint64_t v584 = v507;
      if (v507) {
        goto LABEL_176;
      }
      v510 = &v586[v585[144]];
      *(void *)v510 = v508;
      v510[8] = v509 & 1;
      LOBYTE(v587) = -115;
      uint64_t v511 = v584;
      uint64_t v512 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
      uint64_t v584 = v511;
      if (v511) {
        goto LABEL_176;
      }
      v514 = &v586[v585[145]];
      *(void *)v514 = v512;
      v514[8] = v513 & 1;
      LOBYTE(v587) = -114;
      uint64_t v515 = v584;
      uint64_t v516 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
      uint64_t v584 = v515;
      if (v515) {
        goto LABEL_176;
      }
      v518 = &v586[v585[146]];
      *(void *)v518 = v516;
      v518[8] = v517 & 1;
      LOBYTE(v587) = -113;
      uint64_t v519 = v584;
      uint64_t v520 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
      uint64_t v584 = v519;
      if (v519) {
        goto LABEL_176;
      }
      v522 = &v586[v585[147]];
      *(void *)v522 = v520;
      v522[8] = v521 & 1;
      LOBYTE(v587) = -112;
      uint64_t v523 = v584;
      char v524 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
      uint64_t v584 = v523;
      if (v523) {
        goto LABEL_176;
      }
      v586[v585[148]] = v524;
      LOBYTE(v587) = -111;
      uint64_t v525 = v584;
      uint64_t v526 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
      uint64_t v584 = v525;
      if (v525) {
        goto LABEL_176;
      }
      v528 = &v586[v585[149]];
      *(void *)v528 = v526;
      v528[8] = v527 & 1;
      LOBYTE(v587) = -110;
      uint64_t v529 = v584;
      uint64_t v530 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
      uint64_t v584 = v529;
      if (v529) {
        goto LABEL_176;
      }
      v532 = &v586[v585[150]];
      *(void *)v532 = v530;
      v532[8] = v531 & 1;
      LOBYTE(v587) = -109;
      uint64_t v533 = v584;
      uint64_t v534 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
      uint64_t v584 = v533;
      if (v533) {
        goto LABEL_176;
      }
      unint64_t v19 = 0x80000;
      v536 = (uint64_t *)&v586[v585[151]];
      uint64_t *v536 = v534;
      v536[1] = v535;
      LOBYTE(v587) = -108;
      uint64_t v537 = v584;
      uint64_t v538 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
      uint64_t v584 = v537;
      if (v537) {
        goto LABEL_176;
      }
      v540 = &v586[v585[152]];
      *(void *)v540 = v538;
      v540[8] = v539 & 1;
      LOBYTE(v587) = -107;
      uint64_t v541 = v584;
      uint64_t v542 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
      uint64_t v584 = v541;
      if (v541) {
        goto LABEL_176;
      }
      unint64_t v19 = 2621440;
      v544 = (uint64_t *)&v586[v585[153]];
      uint64_t *v544 = v542;
      v544[1] = v543;
      LOBYTE(v587) = -106;
      uint64_t v545 = v584;
      uint64_t v546 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
      uint64_t v584 = v545;
      if (v545) {
        goto LABEL_176;
      }
      v548 = &v586[v585[154]];
      *(void *)v548 = v546;
      v548[8] = v547 & 1;
      char v594 = -105;
      uint64_t v549 = v584;
      KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
      uint64_t v584 = v549;
      if (v549) {
        goto LABEL_176;
      }
      unint64_t v19 = 11010048;
      *(void *)&v586[v585[155]] = v587;
      LOBYTE(v587) = -104;
      uint64_t v550 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
      uint64_t v584 = 0;
      v551 = &v586[v585[156]];
      *(void *)v551 = v550;
      v551[8] = v552 & 1;
      LOBYTE(v587) = -103;
      uint64_t v553 = v584;
      uint64_t v554 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
      uint64_t v584 = v553;
      if (v553) {
        goto LABEL_176;
      }
      v556 = &v586[v585[157]];
      *(void *)v556 = v554;
      v556[8] = v555 & 1;
      LOBYTE(v587) = -102;
      uint64_t v557 = v584;
      uint64_t v558 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
      uint64_t v584 = v557;
      if (v557
        || (v560 = &v586[v585[158]],
            *(void *)v560 = v558,
            v560[8] = v559 & 1,
            LOBYTE(v587) = -101,
            uint64_t v561 = v584,
            uint64_t v562 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(),
            (uint64_t v584 = v561) != 0))
      {
LABEL_176:
        (*(void (**)(char *, uint64_t))(v577 + 8))(v578, v579);
        int v17 = 0;
      }
      else
      {
        v564 = (uint64_t *)&v586[v585[159]];
        uint64_t *v564 = v562;
        v564[1] = v563;
        LOBYTE(v587) = -100;
        uint64_t v565 = v584;
        uint64_t v566 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
        uint64_t v584 = v565;
        if (!v565)
        {
          v568 = &v586[v585[160]];
          *(void *)v568 = v566;
          v568[8] = v567 & 1;
          LOBYTE(v587) = -99;
          uint64_t v569 = v584;
          char v570 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
          uint64_t v584 = v569;
          if (!v569)
          {
            char v572 = v570;
            (*(void (**)(char *, uint64_t))(v577 + 8))(v578, v579);
            uint64_t v573 = (uint64_t)v586;
            v586[v585[161]] = v572;
            sub_1009F09F4(v573, v575);
            _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)v580);
            return sub_1009F0A58(v573);
          }
          (*(void (**)(char *, uint64_t))(v577 + 8))(v578, v579);
          _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)v580);
          v571 = v586;
          swift_bridgeObjectRelease();
          sub_10001CFB8(*((void *)v571 + 3), *((void *)v571 + 4));
          LODWORD(v21) = 1;
          LODWORD(v22) = 1;
          LODWORD(v23) = 1;
          LODWORD(v24) = 1;
          LODWORD(v25) = 1;
          LODWORD(v26) = 1;
          int v17 = 1;
          goto LABEL_12;
        }
        (*(void (**)(char *, uint64_t))(v577 + 8))(v578, v579);
        int v17 = 1;
        unint64_t v19 = 145227776;
      }
    }
  }
LABEL_6:
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)v580);
  uint64_t v21 = (v20 >> 60) & 1;
  uint64_t v22 = (v18 >> 41) & 1;
  uint64_t v23 = (v18 >> 44) & 1;
  uint64_t v24 = (v19 >> 19) & 1;
  uint64_t v25 = (v19 >> 21) & 1;
  uint64_t v26 = (v19 >> 23) & 1;
  if ((v20 & 2) == 0)
  {
    if ((v20 & 4) == 0) {
      goto LABEL_8;
    }
LABEL_11:
    sub_10001CFB8(*((void *)v586 + 3), *((void *)v586 + 4));
    if ((v20 & 0x200) == 0) {
      goto LABEL_13;
    }
    goto LABEL_12;
  }
  swift_bridgeObjectRelease();
  if ((v20 & 4) != 0) {
    goto LABEL_11;
  }
LABEL_8:
  if ((v20 & 0x200) != 0) {
LABEL_12:
  }
    swift_bridgeObjectRelease();
LABEL_13:
  uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v582 + 8))(v581, v583);
  if (v21)
  {
    uint64_t v28 = (uint64_t *)&v586[v585[64]];
    uint64_t result = sub_1009404E4(*v28, v28[1], v28[2], v28[3], v28[4], v28[5], v28[6]);
    if (!v22) {
      goto LABEL_15;
    }
  }
  else if (!v22)
  {
LABEL_15:
    if (v23) {
      goto LABEL_16;
    }
    goto LABEL_23;
  }
  uint64_t result = swift_bridgeObjectRelease();
  if (v23)
  {
LABEL_16:
    uint64_t result = swift_bridgeObjectRelease();
    if (!v24) {
      goto LABEL_17;
    }
    goto LABEL_24;
  }
LABEL_23:
  if (!v24)
  {
LABEL_17:
    if (v25) {
      goto LABEL_18;
    }
    goto LABEL_25;
  }
LABEL_24:
  uint64_t result = swift_bridgeObjectRelease();
  if (v25)
  {
LABEL_18:
    uint64_t result = swift_bridgeObjectRelease();
    if (!v26) {
      goto LABEL_19;
    }
LABEL_26:
    uint64_t result = swift_bridgeObjectRelease();
    if (!v17) {
      return result;
    }
    return swift_bridgeObjectRelease();
  }
LABEL_25:
  if (v26) {
    goto LABEL_26;
  }
LABEL_19:
  if (!v17) {
    return result;
  }
  return swift_bridgeObjectRelease();
}

uint64_t sub_1009F085C@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_1009ED928(a1, a2);
}

unint64_t sub_1009F0874()
{
  unint64_t result = qword_101654F90;
  if (!qword_101654F90)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_101654F90);
  }
  return result;
}

unint64_t sub_1009F08C8()
{
  unint64_t result = qword_101654F98;
  if (!qword_101654F98)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_101654F98);
  }
  return result;
}

uint64_t sub_1009F091C(unint64_t *a1, uint64_t *a2)
{
  uint64_t result = *a1;
  if (!result)
  {
    sub_10000592C(a2);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

unint64_t sub_1009F0980()
{
  unint64_t result = qword_101652910;
  if (!qword_101652910)
  {
    sub_10000592C(&qword_10163AB70);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_101652910);
  }
  return result;
}

uint64_t sub_1009F09F4(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for ConfigurationResponse();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_1009F0A58(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for ConfigurationResponse();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t getEnumTagSinglePayload for ConfigurationResponse.CodingKeys(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0x63) {
    goto LABEL_17;
  }
  if (a2 + 157 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 157) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 8)) - 157;
    }
  }
  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 8)) - 157;
    }
    int v4 = a1[1];
    if (a1[1]) {
      return (*a1 | (v4 << 8)) - 157;
    }
  }
LABEL_17:
  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 0x9E;
  int v8 = v6 - 158;
  if (!v7) {
    int v8 = -1;
  }
  return (v8 + 1);
}

unsigned char *storeEnumTagSinglePayload for ConfigurationResponse.CodingKeys(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 157 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 157) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0x63) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0x62)
  {
    unsigned int v6 = ((a2 - 99) >> 8) + 1;
    *unint64_t result = a2 - 99;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1009F0C10);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 - 99;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for ConfigurationResponse.CodingKeys()
{
  return &type metadata for ConfigurationResponse.CodingKeys;
}

unsigned char *storeEnumTagSinglePayload for ConfigurationResponse.Status(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFE)
  {
    unsigned int v6 = ((a2 - 255) >> 8) + 1;
    *unint64_t result = a2 + 1;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1009F0D14);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 1;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for ConfigurationResponse.Status()
{
  return &type metadata for ConfigurationResponse.Status;
}

unint64_t sub_1009F0D50()
{
  unint64_t result = qword_101654FA0;
  if (!qword_101654FA0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_101654FA0);
  }
  return result;
}

unint64_t sub_1009F0DA8()
{
  unint64_t result = qword_101654FA8;
  if (!qword_101654FA8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_101654FA8);
  }
  return result;
}

unint64_t sub_1009F0E00()
{
  unint64_t result = qword_101654FB0;
  if (!qword_101654FB0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_101654FB0);
  }
  return result;
}

unint64_t sub_1009F0E58()
{
  unint64_t result = qword_101654FB8;
  if (!qword_101654FB8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_101654FB8);
  }
  return result;
}

uint64_t sub_1009F0EAC()
{
  uint64_t v0 = _findStringSwitchCaseWithCache(cases:string:cache:)();
  swift_bridgeObjectRelease();
  uint64_t v1 = 0;
  uint64_t result = 50;
  switch(v0)
  {
    case 0:
      goto LABEL_54;
    case 1:
      uint64_t v1 = 1;
      goto LABEL_54;
    case 2:
      uint64_t v1 = 2;
      goto LABEL_54;
    case 3:
      uint64_t v1 = 3;
      goto LABEL_54;
    case 4:
      uint64_t v1 = 4;
      goto LABEL_54;
    case 5:
      uint64_t v1 = 5;
      goto LABEL_54;
    case 6:
      uint64_t v1 = 6;
      goto LABEL_54;
    case 7:
      uint64_t v1 = 7;
      goto LABEL_54;
    case 8:
      uint64_t v1 = 8;
      goto LABEL_54;
    case 9:
      uint64_t v1 = 9;
      goto LABEL_54;
    case 10:
      uint64_t v1 = 10;
      goto LABEL_54;
    case 11:
      uint64_t v1 = 11;
      goto LABEL_54;
    case 12:
      uint64_t v1 = 12;
      goto LABEL_54;
    case 13:
      uint64_t v1 = 13;
      goto LABEL_54;
    case 14:
      uint64_t v1 = 14;
      goto LABEL_54;
    case 15:
      uint64_t v1 = 15;
      goto LABEL_54;
    case 16:
      uint64_t v1 = 16;
      goto LABEL_54;
    case 17:
      uint64_t v1 = 17;
      goto LABEL_54;
    case 18:
      uint64_t v1 = 18;
      goto LABEL_54;
    case 19:
      uint64_t v1 = 19;
      goto LABEL_54;
    case 20:
      uint64_t v1 = 20;
      goto LABEL_54;
    case 21:
      uint64_t v1 = 21;
      goto LABEL_54;
    case 22:
      uint64_t v1 = 22;
      goto LABEL_54;
    case 23:
      uint64_t v1 = 23;
      goto LABEL_54;
    case 24:
      uint64_t v1 = 24;
      goto LABEL_54;
    case 25:
      uint64_t v1 = 25;
      goto LABEL_54;
    case 26:
      uint64_t v1 = 26;
      goto LABEL_54;
    case 27:
      uint64_t v1 = 27;
      goto LABEL_54;
    case 28:
      uint64_t v1 = 28;
      goto LABEL_54;
    case 29:
      uint64_t v1 = 29;
      goto LABEL_54;
    case 30:
      uint64_t v1 = 30;
      goto LABEL_54;
    case 31:
      uint64_t v1 = 31;
      goto LABEL_54;
    case 32:
      uint64_t v1 = 32;
      goto LABEL_54;
    case 33:
      uint64_t v1 = 33;
      goto LABEL_54;
    case 34:
      uint64_t v1 = 34;
      goto LABEL_54;
    case 35:
      uint64_t v1 = 35;
      goto LABEL_54;
    case 36:
      uint64_t v1 = 36;
      goto LABEL_54;
    case 37:
      uint64_t v1 = 37;
      goto LABEL_54;
    case 38:
      uint64_t v1 = 38;
      goto LABEL_54;
    case 39:
      uint64_t v1 = 39;
      goto LABEL_54;
    case 40:
      uint64_t v1 = 40;
      goto LABEL_54;
    case 41:
      uint64_t v1 = 41;
      goto LABEL_54;
    case 42:
      uint64_t v1 = 42;
      goto LABEL_54;
    case 43:
      uint64_t v1 = 43;
      goto LABEL_54;
    case 44:
      uint64_t v1 = 44;
      goto LABEL_54;
    case 45:
      uint64_t v1 = 45;
      goto LABEL_54;
    case 46:
      uint64_t v1 = 46;
      goto LABEL_54;
    case 47:
      uint64_t v1 = 47;
      goto LABEL_54;
    case 48:
      uint64_t v1 = 48;
      goto LABEL_54;
    case 49:
      uint64_t v1 = 49;
LABEL_54:
      uint64_t result = v1;
      break;
    case 50:
      return result;
    case 51:
      uint64_t result = 51;
      break;
    case 52:
      uint64_t result = 52;
      break;
    case 53:
      uint64_t result = 53;
      break;
    case 54:
      uint64_t result = 54;
      break;
    case 55:
      uint64_t result = 55;
      break;
    case 56:
      uint64_t result = 56;
      break;
    case 57:
      uint64_t result = 57;
      break;
    case 58:
      uint64_t result = 58;
      break;
    case 59:
      uint64_t result = 59;
      break;
    case 60:
      uint64_t result = 60;
      break;
    case 61:
      uint64_t result = 61;
      break;
    case 62:
      uint64_t result = 62;
      break;
    case 63:
      uint64_t result = 63;
      break;
    case 64:
      uint64_t result = 64;
      break;
    case 65:
      uint64_t result = 65;
      break;
    case 66:
      uint64_t result = 66;
      break;
    case 67:
      uint64_t result = 67;
      break;
    case 68:
      uint64_t result = 68;
      break;
    case 69:
      uint64_t result = 69;
      break;
    case 70:
      uint64_t result = 70;
      break;
    case 71:
      uint64_t result = 71;
      break;
    case 72:
      uint64_t result = 72;
      break;
    case 73:
      uint64_t result = 73;
      break;
    case 74:
      uint64_t result = 74;
      break;
    case 75:
      uint64_t result = 75;
      break;
    case 76:
      uint64_t result = 76;
      break;
    case 77:
      uint64_t result = 77;
      break;
    case 78:
      uint64_t result = 78;
      break;
    case 79:
      uint64_t result = 79;
      break;
    case 80:
      uint64_t result = 80;
      break;
    case 81:
      uint64_t result = 81;
      break;
    case 82:
      uint64_t result = 82;
      break;
    case 83:
      uint64_t result = 83;
      break;
    case 84:
      uint64_t result = 84;
      break;
    case 85:
      uint64_t result = 85;
      break;
    case 86:
      uint64_t result = 86;
      break;
    case 87:
      uint64_t result = 87;
      break;
    case 88:
      uint64_t result = 88;
      break;
    case 89:
      uint64_t result = 89;
      break;
    case 90:
      uint64_t result = 90;
      break;
    case 91:
      uint64_t result = 91;
      break;
    case 92:
      uint64_t result = 92;
      break;
    case 93:
      uint64_t result = 93;
      break;
    case 94:
      uint64_t result = 94;
      break;
    case 95:
      uint64_t result = 95;
      break;
    case 96:
      uint64_t result = 96;
      break;
    case 97:
      uint64_t result = 97;
      break;
    case 98:
      uint64_t result = 98;
      break;
    case 99:
      uint64_t result = 99;
      break;
    case 100:
      uint64_t result = 100;
      break;
    case 101:
      uint64_t result = 101;
      break;
    case 102:
      uint64_t result = 102;
      break;
    case 103:
      uint64_t result = 103;
      break;
    case 104:
      uint64_t result = 104;
      break;
    case 105:
      uint64_t result = 105;
      break;
    case 106:
      uint64_t result = 106;
      break;
    case 107:
      uint64_t result = 107;
      break;
    case 108:
      uint64_t result = 108;
      break;
    case 109:
      uint64_t result = 109;
      break;
    case 110:
      uint64_t result = 110;
      break;
    case 111:
      uint64_t result = 111;
      break;
    case 112:
      uint64_t result = 112;
      break;
    case 113:
      uint64_t result = 113;
      break;
    case 114:
      uint64_t result = 114;
      break;
    case 115:
      uint64_t result = 115;
      break;
    case 116:
      uint64_t result = 116;
      break;
    case 117:
      uint64_t result = 117;
      break;
    case 118:
      uint64_t result = 118;
      break;
    case 119:
      uint64_t result = 119;
      break;
    case 120:
      uint64_t result = 120;
      break;
    case 121:
      uint64_t result = 121;
      break;
    case 122:
      uint64_t result = 122;
      break;
    case 123:
      uint64_t result = 123;
      break;
    case 124:
      uint64_t result = 124;
      break;
    case 125:
      uint64_t result = 125;
      break;
    case 126:
      uint64_t result = 126;
      break;
    case 127:
      uint64_t result = 127;
      break;
    default:
      if ((unint64_t)(v0 - 128) >= 0x1E) {
        uint64_t result = 158;
      }
      else {
        uint64_t result = v0 | 0xFFFFFF80;
      }
      break;
  }
  return result;
}

unint64_t sub_1009F1530()
{
  unint64_t result = qword_101654FC0;
  if (!qword_101654FC0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_101654FC0);
  }
  return result;
}

uint64_t sub_1009F1584(char a1)
{
  uint64_t result = 1684628325;
  switch(a1)
  {
    case 1:
      uint64_t result = 0x644970696863;
      break;
    case 2:
      uint64_t result = 0x754E6C6169726573;
      break;
    case 3:
      uint64_t result = 0x49746375646F7270;
      break;
    case 4:
      uint64_t result = 0x6449726F646E6576;
      break;
    case 5:
      uint64_t result = 0x6F69737265567766;
      break;
    case 6:
      uint64_t result = 0x727574616E676973;
      break;
    case 7:
      uint64_t result = 0x4E6E6F6973736573;
      break;
    case 8:
      uint64_t result = 0x5364656573;
      break;
    case 9:
      uint64_t result = 0x737574617473;
      break;
    case 10:
      uint64_t result = 0x7374726563;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t sub_1009F16EC(void *a1)
{
  uint64_t v3 = v1;
  uint64_t v5 = sub_10000588C(&qword_101654FD0);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  int v8 = (char *)&v10 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10001CD44(a1, a1[3]);
  sub_1009F2788();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  LOBYTE(v12) = 0;
  KeyedEncodingContainer.encode(_:forKey:)();
  if (!v2)
  {
    LOBYTE(v12) = 1;
    KeyedEncodingContainer.encode(_:forKey:)();
    LOBYTE(v12) = 2;
    KeyedEncodingContainer.encode(_:forKey:)();
    LOBYTE(v12) = 3;
    KeyedEncodingContainer.encode(_:forKey:)();
    LOBYTE(v12) = 4;
    KeyedEncodingContainer.encode(_:forKey:)();
    LOBYTE(v12) = 5;
    KeyedEncodingContainer.encode(_:forKey:)();
    long long v12 = *(_OWORD *)(v3 + 80);
    char v11 = 6;
    sub_100037BB4();
    KeyedEncodingContainer.encode<A>(_:forKey:)();
    long long v12 = *(_OWORD *)(v3 + 96);
    char v11 = 7;
    KeyedEncodingContainer.encode<A>(_:forKey:)();
    long long v12 = *(_OWORD *)(v3 + 112);
    char v11 = 8;
    KeyedEncodingContainer.encode<A>(_:forKey:)();
    long long v12 = *(_OWORD *)(v3 + 128);
    char v11 = 9;
    KeyedEncodingContainer.encode<A>(_:forKey:)();
    *(void *)&long long v12 = *(void *)(v3 + 144);
    char v11 = 10;
    sub_10000588C((uint64_t *)&unk_10164DBD0);
    sub_10025F9B4();
    KeyedEncodingContainer.encode<A>(_:forKey:)();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
}

uint64_t sub_1009F1A30()
{
  return sub_1009F1584(*v0);
}

uint64_t sub_1009F1A38@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_1009F29E8(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_1009F1A60(uint64_t a1)
{
  unint64_t v2 = sub_1009F2788();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1009F1A9C(uint64_t a1)
{
  unint64_t v2 = sub_1009F2788();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_1009F1AD8(void *a1)
{
  return sub_1009F16EC(a1);
}

void sub_1009F1B34(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, long long a9, uint64_t a10, unint64_t a11, long long a12, uint64_t a13, unint64_t a14, uint64_t a15, unint64_t a16, uint64_t a17)
{
  *((void *)&v65 + 1) = a2;
  uint64_t v66 = a3;
  *(void *)&long long v65 = a1;
  uint64_t v64 = type metadata accessor for Date();
  uint64_t v22 = *(void *)(v64 - 8);
  __chkstk_darwin(v64);
  uint64_t v24 = (char *)&v56 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  unint64_t v25 = sub_10092D8F8((uint64_t)_swiftEmptyArrayStorage);
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  *(void *)&long long v79 = v25;
  sub_10016C0FC(1702195828, 0xE400000000000000, 0xD00000000000001BLL, 0x80000001013F64C0, isUniquelyReferenced_nonNull_native);
  uint64_t v27 = v79;
  swift_bridgeObjectRelease();
  id v28 = [self currentDevice];
  if (v28)
  {
    uint64_t v29 = v28;
    uint64_t v61 = a4;
    *(void *)&long long v62 = a5;
    *((void *)&v62 + 1) = a6;
    *(void *)&long long v63 = a7;
    *((void *)&v63 + 1) = a8;
    id v30 = [v28 serverFriendlyDescription];

    if (v30)
    {
      uint64_t v60 = a17;
      unint64_t v67 = a16;
      uint64_t v59 = a15;
      unint64_t v58 = a14;
      uint64_t v68 = a13;
      unint64_t v57 = a11;
      long long v56 = a9;
      uint64_t v31 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      uint64_t v33 = v32;

      char v34 = swift_isUniquelyReferenced_nonNull_native();
      *(void *)&long long v79 = v27;
      sub_10016C0FC(v31, v33, 0xD000000000000011, 0x80000001013F64E0, v34);
      uint64_t v35 = v79;
      swift_bridgeObjectRelease();
      Date.init()();
      uint64_t v36 = Date.epoch.getter();
      (*(void (**)(char *, uint64_t))(v22 + 8))(v24, v64);
      *(void *)&long long v79 = v36;
      uint64_t v37 = dispatch thunk of CustomStringConvertible.description.getter();
      uint64_t v39 = v38;
      char v40 = swift_isUniquelyReferenced_nonNull_native();
      *(void *)&long long v79 = v35;
      sub_10016C0FC(v37, v39, 0xD000000000000015, 0x80000001013F6500, v40);
      uint64_t v41 = v79;
      swift_bridgeObjectRelease();
      *(void *)&long long v79 = 1;
      uint64_t v42 = dispatch thunk of CustomStringConvertible.description.getter();
      uint64_t v44 = v43;
      char v45 = swift_isUniquelyReferenced_nonNull_native();
      *(void *)&long long v79 = v41;
      sub_10016C0FC(v42, v44, 0xD000000000000013, 0x80000001013F6520, v45);
      uint64_t v46 = v79;
      swift_bridgeObjectRelease();
      id v47 = sub_100903ACC();
      uint64_t v49 = v48;
      char v50 = swift_isUniquelyReferenced_nonNull_native();
      *(void *)&long long v79 = v46;
      sub_10016C0FC((uint64_t)v47, v49, 0x6567412D72657355, 0xEA0000000000746ELL, v50);
      uint64_t v64 = v79;
      swift_bridgeObjectRelease();
      long long v79 = v65;
      *(void *)&long long v80 = v66;
      *((void *)&v80 + 1) = v61;
      long long v81 = v62;
      long long v82 = v63;
      unint64_t v51 = v57;
      long long v83 = v56;
      *(void *)&long long v84 = a10;
      *((void *)&v84 + 1) = v57;
      long long v85 = a12;
      unint64_t v52 = v67;
      uint64_t v53 = v68;
      unint64_t v54 = v58;
      uint64_t v55 = v59;
      *(void *)&long long v86 = v68;
      *((void *)&v86 + 1) = v58;
      *(void *)&long long v87 = v59;
      *((void *)&v87 + 1) = v67;
      uint64_t v88 = v60;
      type metadata accessor for JSONEncoder();
      swift_allocObject();
      *((void *)&v65 + 1) = a10;
      sub_1000361E0(a10, v51);
      uint64_t v66 = a12;
      sub_1000361E0(a12, *((unint64_t *)&a12 + 1));
      sub_1000361E0(v53, v54);
      sub_1000361E0(v55, v52);
      JSONEncoder.init()();
      long long v75 = v85;
      long long v76 = v86;
      long long v77 = v87;
      uint64_t v78 = v88;
      long long v71 = v81;
      long long v72 = v82;
      long long v73 = v83;
      long long v74 = v84;
      long long v69 = v79;
      long long v70 = v80;
      sub_1009F2178();
      dispatch thunk of JSONEncoder.encode<A>(_:)();
      swift_release();
      sub_10001CFB8(v55, v67);
      sub_10001CFB8(v68, v54);
      sub_10001CFB8(v66, *((unint64_t *)&a12 + 1));
      sub_10001CFB8(*((uint64_t *)&v65 + 1), v51);
      sub_1009F2294(&v79);
      return;
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
}

unint64_t sub_1009F2178()
{
  unint64_t result = qword_101654FC8;
  if (!qword_101654FC8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_101654FC8);
  }
  return result;
}

void *sub_1009F21CC(void *a1)
{
  uint64_t v2 = a1[10];
  unint64_t v3 = a1[11];
  uint64_t v4 = a1[12];
  unint64_t v5 = a1[13];
  uint64_t v6 = a1[14];
  unint64_t v7 = a1[15];
  unint64_t v9 = a1[17];
  uint64_t v10 = a1[16];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  sub_1000361E0(v2, v3);
  sub_1000361E0(v4, v5);
  sub_1000361E0(v6, v7);
  sub_1000361E0(v10, v9);
  swift_bridgeObjectRetain();
  return a1;
}

void *sub_1009F2294(void *a1)
{
  uint64_t v2 = a1[10];
  unint64_t v3 = a1[11];
  uint64_t v4 = a1[12];
  unint64_t v5 = a1[13];
  uint64_t v6 = a1[14];
  unint64_t v7 = a1[15];
  unint64_t v9 = a1[17];
  uint64_t v10 = a1[16];
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_10001CFB8(v2, v3);
  sub_10001CFB8(v4, v5);
  sub_10001CFB8(v6, v7);
  sub_10001CFB8(v10, v9);
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t destroy for PairingLockAckRequestContent(uint64_t a1)
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_10001CFB8(*(void *)(a1 + 80), *(void *)(a1 + 88));
  sub_10001CFB8(*(void *)(a1 + 96), *(void *)(a1 + 104));
  sub_10001CFB8(*(void *)(a1 + 112), *(void *)(a1 + 120));
  sub_10001CFB8(*(void *)(a1 + 128), *(void *)(a1 + 136));

  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for PairingLockAckRequestContent(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v4;
  uint64_t v5 = *(void *)(a2 + 24);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = v5;
  uint64_t v6 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v6;
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  uint64_t v7 = *(void *)(a2 + 72);
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  *(void *)(a1 + 72) = v7;
  uint64_t v8 = *(void *)(a2 + 80);
  unint64_t v9 = *(void *)(a2 + 88);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  sub_1000361E0(v8, v9);
  *(void *)(a1 + 80) = v8;
  *(void *)(a1 + 88) = v9;
  uint64_t v10 = *(void *)(a2 + 96);
  unint64_t v11 = *(void *)(a2 + 104);
  sub_1000361E0(v10, v11);
  *(void *)(a1 + 96) = v10;
  *(void *)(a1 + 104) = v11;
  uint64_t v12 = *(void *)(a2 + 112);
  unint64_t v13 = *(void *)(a2 + 120);
  sub_1000361E0(v12, v13);
  *(void *)(a1 + 112) = v12;
  *(void *)(a1 + 120) = v13;
  uint64_t v14 = *(void *)(a2 + 128);
  unint64_t v15 = *(void *)(a2 + 136);
  sub_1000361E0(v14, v15);
  *(void *)(a1 + 128) = v14;
  *(void *)(a1 + 136) = v15;
  *(void *)(a1 + 144) = *(void *)(a2 + 144);
  swift_bridgeObjectRetain();
  return a1;
}

void *assignWithCopy for PairingLockAckRequestContent(void *a1, void *a2)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  a1[3] = a2[3];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[4] = a2[4];
  a1[5] = a2[5];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[6] = a2[6];
  a1[7] = a2[7];
  a1[8] = a2[8];
  a1[9] = a2[9];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v4 = a2[10];
  unint64_t v5 = a2[11];
  sub_1000361E0(v4, v5);
  uint64_t v6 = a1[10];
  unint64_t v7 = a1[11];
  a1[10] = v4;
  a1[11] = v5;
  sub_10001CFB8(v6, v7);
  uint64_t v8 = a2[12];
  unint64_t v9 = a2[13];
  sub_1000361E0(v8, v9);
  uint64_t v10 = a1[12];
  unint64_t v11 = a1[13];
  a1[12] = v8;
  a1[13] = v9;
  sub_10001CFB8(v10, v11);
  uint64_t v12 = a2[14];
  unint64_t v13 = a2[15];
  sub_1000361E0(v12, v13);
  uint64_t v14 = a1[14];
  unint64_t v15 = a1[15];
  a1[14] = v12;
  a1[15] = v13;
  sub_10001CFB8(v14, v15);
  uint64_t v16 = a2[16];
  unint64_t v17 = a2[17];
  sub_1000361E0(v16, v17);
  uint64_t v18 = a1[16];
  unint64_t v19 = a1[17];
  a1[16] = v16;
  a1[17] = v17;
  sub_10001CFB8(v18, v19);
  a1[18] = a2[18];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t assignWithTake for PairingLockAckRequestContent(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v4;
  swift_bridgeObjectRelease();
  uint64_t v5 = *(void *)(a2 + 24);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = v5;
  swift_bridgeObjectRelease();
  uint64_t v6 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v6;
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  uint64_t v7 = *(void *)(a2 + 72);
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  *(void *)(a1 + 72) = v7;
  swift_bridgeObjectRelease();
  uint64_t v8 = *(void *)(a1 + 80);
  unint64_t v9 = *(void *)(a1 + 88);
  *(_OWORD *)(a1 + 80) = *(_OWORD *)(a2 + 80);
  sub_10001CFB8(v8, v9);
  uint64_t v10 = *(void *)(a1 + 96);
  unint64_t v11 = *(void *)(a1 + 104);
  *(_OWORD *)(a1 + 96) = *(_OWORD *)(a2 + 96);
  sub_10001CFB8(v10, v11);
  uint64_t v12 = *(void *)(a1 + 112);
  unint64_t v13 = *(void *)(a1 + 120);
  *(_OWORD *)(a1 + 112) = *(_OWORD *)(a2 + 112);
  sub_10001CFB8(v12, v13);
  uint64_t v14 = *(void *)(a1 + 128);
  unint64_t v15 = *(void *)(a1 + 136);
  *(_OWORD *)(a1 + 128) = *(_OWORD *)(a2 + 128);
  sub_10001CFB8(v14, v15);
  *(void *)(a1 + 144) = *(void *)(a2 + 144);
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for PairingLockAckRequestContent(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 152)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for PairingLockAckRequestContent(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 136) = 0u;
    *(_OWORD *)(result + 120) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)unint64_t result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 152) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 8) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 152) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for PairingLockAckRequestContent()
{
  return &type metadata for PairingLockAckRequestContent;
}

ValueMetadata *type metadata accessor for PairingLockAckRequest()
{
  return &type metadata for PairingLockAckRequest;
}

unint64_t sub_1009F2788()
{
  unint64_t result = qword_101654FD8;
  if (!qword_101654FD8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_101654FD8);
  }
  return result;
}

unsigned char *storeEnumTagSinglePayload for PairingLockAckRequestContent.CodingKeys(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 10 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 10) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xF6) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xF5)
  {
    unsigned int v6 = ((a2 - 246) >> 8) + 1;
    *unint64_t result = a2 + 10;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1009F28A8);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 10;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for PairingLockAckRequestContent.CodingKeys()
{
  return &type metadata for PairingLockAckRequestContent.CodingKeys;
}

unint64_t sub_1009F28E4()
{
  unint64_t result = qword_101654FE0;
  if (!qword_101654FE0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_101654FE0);
  }
  return result;
}

unint64_t sub_1009F293C()
{
  unint64_t result = qword_101654FE8;
  if (!qword_101654FE8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_101654FE8);
  }
  return result;
}

unint64_t sub_1009F2994()
{
  unint64_t result = qword_101654FF0;
  if (!qword_101654FF0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_101654FF0);
  }
  return result;
}

uint64_t sub_1009F29E8(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 1684628325 && a2 == 0xE400000000000000;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x644970696863 && a2 == 0xE600000000000000 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0x754E6C6169726573 && a2 == 0xEC0000007265626DLL {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else if (a1 == 0x49746375646F7270 && a2 == 0xE900000000000064 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 3;
  }
  else if (a1 == 0x6449726F646E6576 && a2 == 0xE800000000000000 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 4;
  }
  else if (a1 == 0x6F69737265567766 && a2 == 0xE90000000000006ELL {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 5;
  }
  else if (a1 == 0x727574616E676973 && a2 == 0xE900000000000065 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 6;
  }
  else if (a1 == 0x4E6E6F6973736573 && a2 == 0xEC00000065636E6FLL {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 7;
  }
  else if (a1 == 0x5364656573 && a2 == 0xE500000000000000 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 8;
  }
  else if (a1 == 0x737574617473 && a2 == 0xE600000000000000 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 9;
  }
  else if (a1 == 0x7374726563 && a2 == 0xE500000000000000)
  {
    swift_bridgeObjectRelease();
    return 10;
  }
  else
  {
    char v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v6) {
      return 10;
    }
    else {
      return 11;
    }
  }
}

Swift::Int sub_1009F2E6C()
{
  return Hasher._finalize()();
}

uint64_t sub_1009F2EC4()
{
  return String.hash(into:)();
}

Swift::Int sub_1009F2EE0()
{
  return Hasher._finalize()();
}

uint64_t sub_1009F2F34@<X0>(Swift::String *a1@<X0>, BOOL *a2@<X8>)
{
  Swift::Int v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_1015A4F28, *a1);
  uint64_t result = swift_bridgeObjectRelease();
  *a2 = v3 != 0;
  return result;
}

void sub_1009F2F88(void *a1@<X8>)
{
  *a1 = 0xD000000000000034;
  a1[1] = 0x80000001013F0FC0;
}

uint64_t sub_1009F2FD8(char *a1, int a2, int a3, void *a4, void *aBlock, void (*a6)(uint64_t, id, uint64_t, void *))
{
  unint64_t v9 = _Block_copy(aBlock);
  uint64_t v10 = static Array._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v11 = *sub_10001CD44(&a1[OBJC_IVAR____TtC12searchpartyd25SecureLocationsTrampoline_implementation], *(void *)&a1[OBJC_IVAR____TtC12searchpartyd25SecureLocationsTrampoline_implementation + 24]);
  _Block_copy(v9);
  id v12 = a4;
  unint64_t v13 = a1;
  a6(v10, v12, v11, v9);
  _Block_release(v9);
  _Block_release(v9);

  return swift_bridgeObjectRelease();
}

uint64_t sub_1009F352C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  sub_10001CD44((void *)(v5 + OBJC_IVAR____TtC12searchpartyd25SecureLocationsTrampoline_implementation), *(void *)(v5 + OBJC_IVAR____TtC12searchpartyd25SecureLocationsTrampoline_implementation + 24));
  sub_10000588C(&qword_1016552B0);
  uint64_t v11 = swift_allocObject();
  *(_OWORD *)(v11 + 16) = xmmword_101342130;
  *(void *)(v11 + 32) = a1;
  *(void *)(v11 + 40) = a2;
  sub_10000588C(&qword_1016552B8);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_101342130;
  *(void *)(inited + 32) = a1;
  *(void *)(inited + 40) = a2;
  *(void *)(inited + 48) = a3;
  swift_bridgeObjectRetain_n();
  swift_retain();
  swift_bridgeObjectRetain();
  unint64_t v13 = sub_10092FCA4(inited);
  sub_100BAA9DC(v11, v13, 1, a4, a5);
  swift_release();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

id sub_1009F4068()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for SecureLocationsTrampoline();
  return [super dealloc];
}

uint64_t type metadata accessor for SecureLocationsTrampoline()
{
  return self;
}

id sub_1009F40D0()
{
  uint64_t v1 = *(void **)(v0 + 56);
  if (v1)
  {
    id v2 = *(id *)(v0 + 56);
  }
  else
  {
    uint64_t v3 = type metadata accessor for SecureLocationsService();
    v17[3] = v3;
    v17[4] = &off_1015E2900;
    v17[0] = v0;
    unsigned int v4 = (objc_class *)type metadata accessor for SecureLocationsTrampoline();
    id v5 = objc_allocWithZone(v4);
    uint64_t v6 = sub_1000BD078((uint64_t)v17, v3);
    __chkstk_darwin(v6);
    uint64_t v8 = (uint64_t *)((char *)&v15 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0));
    (*(void (**)(uint64_t *))(v9 + 16))(v8);
    uint64_t v10 = *v8;
    v16[3] = v3;
    v16[4] = &off_1015E2900;
    v16[0] = v10;
    sub_10001D010((uint64_t)v16, (uint64_t)v5 + OBJC_IVAR____TtC12searchpartyd25SecureLocationsTrampoline_implementation);
    v15.receiver = v5;
    v15.super_class = v4;
    swift_retain();
    id v11 = [super init];
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)v16);
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)v17);
    id v12 = *(void **)(v0 + 56);
    *(void *)(v0 + 56) = v11;
    id v2 = v11;

    uint64_t v1 = 0;
  }
  id v13 = v1;
  return v2;
}

void *sub_1009F4254(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2;
  uint64_t v35 = a1;
  uint64_t v36 = a2;
  uint64_t v4 = type metadata accessor for OS_dispatch_queue.Attributes();
  __chkstk_darwin(v4);
  uint64_t v5 = type metadata accessor for DispatchQoS();
  __chkstk_darwin(v5 - 8);
  uint64_t v34 = type metadata accessor for OS_dispatch_queue.AutoreleaseFrequency();
  uint64_t v6 = *(void *)(v34 - 8);
  __chkstk_darwin(v34);
  uint64_t v8 = (char *)&v30 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v2[2] = 0xD00000000000002DLL;
  v2[3] = 0x800000010140E860;
  uint64_t v33 = sub_10001D4B0(0, (unint64_t *)&qword_1016376E0);
  unsigned int v32 = enum case for OS_dispatch_queue.AutoreleaseFrequency.workItem(_:);
  uint64_t v31 = *(void (**)(char *))(v6 + 104);
  v31(v8);
  static DispatchQoS.unspecified.getter();
  uint64_t v37 = _swiftEmptyArrayStorage;
  uint64_t v30 = sub_1009F9ED8((unint64_t *)&qword_101638CC0, (void (*)(uint64_t))&type metadata accessor for OS_dispatch_queue.Attributes);
  sub_10000588C((uint64_t *)&unk_1016376F0);
  sub_1001BF100((unint64_t *)&qword_101638CD0, (uint64_t *)&unk_1016376F0);
  dispatch thunk of SetAlgebra.init<A>(_:)();
  v2[4] = OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)();
  ((void (*)(char *, void, uint64_t))v31)(v8, v32, v34);
  static DispatchQoS.unspecified.getter();
  uint64_t v37 = _swiftEmptyArrayStorage;
  uint64_t v9 = v35;
  dispatch thunk of SetAlgebra.init<A>(_:)();
  uint64_t v10 = v36;
  v2[5] = OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)();
  type metadata accessor for XPCSessionManager();
  swift_allocObject();
  v2[6] = XPCSessionManager.init(name:)();
  v2[7] = 0;
  v2[14] = [objc_allocWithZone((Class)NSCountedSet) init];
  v2[8] = v9;
  v2[9] = v10;
  type metadata accessor for SecureLocationsClientSessionPool();
  uint64_t v11 = swift_allocObject();
  *(void *)(v11 + 40) = 0x3A656977657473;
  *(void *)(v11 + 48) = 0xE700000000000000;
  uint64_t v12 = qword_101637070;
  swift_retain();
  swift_retain();
  if (v12 != -1) {
    swift_once();
  }
  uint64_t v13 = type metadata accessor for Logger();
  sub_100010324(v13, (uint64_t)qword_10170EC30);
  uint64_t v14 = Logger.logObject.getter();
  os_log_type_t v15 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v14, v15))
  {
    uint64_t v16 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v16 = 0;
    _os_log_impl((void *)&_mh_execute_header, v14, v15, "SecureLocationsClientSessionPool.init()", v16, 2u);
    swift_slowDealloc();
  }

  v3[13] = sub_100F36EDC(v17);
  type metadata accessor for SecureLocationsSubscriptionManager();
  swift_allocObject();
  v3[15] = sub_100813190();
  uint64_t v18 = v3[8];
  uint64_t v19 = v3[9];
  type metadata accessor for SecureLocationsKeyManager(0);
  swift_allocObject();
  swift_retain();
  swift_retain();
  unint64_t v20 = sub_100B9F7BC(v18, v19);
  v3[10] = v20;
  uint64_t v21 = v3[8];
  type metadata accessor for SecureLocationsPayloadManager();
  swift_allocObject();
  swift_retain();
  swift_retain();
  uint64_t v22 = sub_100600240(v21, (uint64_t)v20);
  v3[11] = v22;
  uint64_t v23 = v3[10];
  uint64_t v24 = v3[13];
  uint64_t v25 = v3[15];
  type metadata accessor for SecureLocationsCoordinator();
  swift_allocObject();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  v3[12] = sub_10072CAB8((uint64_t)v22, v23, v10, v24, v25);
  uint64_t v26 = Logger.logObject.getter();
  os_log_type_t v27 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v26, v27))
  {
    id v28 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)id v28 = 0;
    _os_log_impl((void *)&_mh_execute_header, v26, v27, "SecureLocationsService inited", v28, 2u);
    swift_slowDealloc();
  }
  swift_release();
  swift_release();

  return v3;
}

uint64_t sub_1009F486C()
{
  uint64_t v1 = v0;
  uint64_t v2 = *v0;
  uint64_t v3 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  uint64_t v6 = (char *)v17 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17[0] = type metadata accessor for DispatchQoS();
  uint64_t v7 = *(void *)(v17[0] - 8);
  __chkstk_darwin(v17[0]);
  uint64_t v9 = (char *)v17 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_101637070 != -1) {
    swift_once();
  }
  uint64_t v10 = type metadata accessor for Logger();
  sub_100010324(v10, (uint64_t)qword_10170EC30);
  uint64_t v11 = Logger.logObject.getter();
  os_log_type_t v12 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v11, v12))
  {
    uint64_t v13 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v13 = 0;
    _os_log_impl((void *)&_mh_execute_header, v11, v12, "Starting SecureLocations Service", v13, 2u);
    swift_slowDealloc();
  }

  uint64_t v14 = swift_allocObject();
  *(void *)(v14 + 16) = v1;
  *(void *)(v14 + 24) = v2;
  aBlock[4] = sub_1009F87E8;
  aBlock[5] = v14;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_1004B5480;
  aBlock[3] = &unk_1015E2A08;
  os_log_type_t v15 = _Block_copy(aBlock);
  swift_retain();
  static DispatchQoS.unspecified.getter();
  v17[1] = _swiftEmptyArrayStorage;
  sub_1009F9ED8((unint64_t *)&qword_10163B7E0, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
  sub_10000588C((uint64_t *)&unk_10163F350);
  sub_1001BF100((unint64_t *)&qword_10163B7F0, (uint64_t *)&unk_10163F350);
  dispatch thunk of SetAlgebra.init<A>(_:)();
  OS_dispatch_queue.async(group:qos:flags:execute:)();
  _Block_release(v15);
  (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
  (*(void (**)(char *, void))(v7 + 8))(v9, v17[0]);
  return swift_release();
}

uint64_t sub_1009F4BF0()
{
  uint64_t v0 = type metadata accessor for MachServiceName();
  __chkstk_darwin(v0 - 8);
  uint64_t v1 = type metadata accessor for XPCServiceDescription();
  uint64_t v2 = *(void *)(v1 - 8);
  __chkstk_darwin(v1);
  uint64_t v4 = (char *)&v13 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  MachServiceName.init(_:)();
  sub_1009F40D0();
  if (qword_101636ED8 != -1) {
    swift_once();
  }
  uint64_t v5 = qword_101637070;
  id v6 = (id)qword_101655000;
  if (v5 != -1) {
    swift_once();
  }
  uint64_t v7 = type metadata accessor for Logger();
  sub_100010324(v7, (uint64_t)qword_10170EC30);
  uint64_t v8 = Logger.logObject.getter();
  os_log_type_t v9 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v8, v9))
  {
    uint64_t v10 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v10 = 0;
    _os_log_impl((void *)&_mh_execute_header, v8, v9, "remoteObjectInterface called", v10, 2u);
    swift_slowDealloc();
  }

  id v11 = [self interfaceWithProtocol:&OBJC_PROTOCOL___SPSecureLocationsClientXPCProtocol];
  swift_retain();
  XPCServiceDescription.init(name:options:exportedObject:exportedInterface:remoteObjectInterface:shouldAccept:interruptionHandler:invalidationHandler:)();
  XPCSessionManager.register(service:)();
  return (*(uint64_t (**)(char *, uint64_t))(v2 + 8))(v4, v1);
}

id sub_1009F4EB0()
{
  id result = sub_1009F4ED0();
  qword_101655000 = (uint64_t)result;
  return result;
}

id sub_1009F4ED0()
{
  id v0 = [self interfaceWithProtocol:&OBJC_PROTOCOL___SPSecureLocationsXPCProtocol];
  sub_100A59298();
  uint64_t v1 = swift_allocObject();
  *(_OWORD *)(v1 + 16) = xmmword_101347BA0;
  uint64_t v2 = sub_10001D4B0(0, &qword_101655298);
  *(void *)(v1 + 32) = v2;
  uint64_t v3 = sub_10001D4B0(0, &qword_1016552A0);
  *(void *)(v1 + 40) = v3;
  NSXPCInterface.setClasses(_:for:argumentIndex:ofReply:)();
  swift_bridgeObjectRelease();
  sub_100A59298();
  uint64_t v4 = swift_allocObject();
  *(_OWORD *)(v4 + 16) = xmmword_10134BF90;
  *(void *)(v4 + 32) = sub_10001D4B0(0, &qword_1016552A8);
  uint64_t v5 = sub_10001D4B0(0, &qword_10163EAD0);
  *(void *)(v4 + 40) = v5;
  uint64_t v6 = sub_10001D4B0(0, (unint64_t *)&qword_10163F378);
  *(void *)(v4 + 48) = v6;
  *(void *)(v4 + 56) = v3;
  NSXPCInterface.setClasses(_:for:argumentIndex:ofReply:)();
  swift_bridgeObjectRelease();
  sub_100A59298();
  uint64_t v7 = swift_allocObject();
  *(_OWORD *)(v7 + 16) = xmmword_101347BA0;
  *(void *)(v7 + 32) = v2;
  *(void *)(v7 + 40) = v3;
  NSXPCInterface.setClasses(_:for:argumentIndex:ofReply:)();
  swift_bridgeObjectRelease();
  sub_100A59298();
  uint64_t v8 = swift_allocObject();
  *(_OWORD *)(v8 + 16) = xmmword_101347BA0;
  *(void *)(v8 + 32) = v6;
  *(void *)(v8 + 40) = v3;
  NSXPCInterface.setClasses(_:for:argumentIndex:ofReply:)();
  swift_bridgeObjectRelease();
  sub_100A59298();
  uint64_t v9 = swift_allocObject();
  *(_OWORD *)(v9 + 16) = xmmword_101347BA0;
  *(void *)(v9 + 32) = v6;
  *(void *)(v9 + 40) = v3;
  NSXPCInterface.setClasses(_:for:argumentIndex:ofReply:)();
  swift_bridgeObjectRelease();
  sub_100A59298();
  uint64_t v10 = swift_allocObject();
  *(_OWORD *)(v10 + 16) = xmmword_101347500;
  *(void *)(v10 + 32) = v5;
  *(void *)(v10 + 40) = v6;
  *(void *)(v10 + 48) = v3;
  NSXPCInterface.setClasses(_:for:argumentIndex:ofReply:)();
  swift_bridgeObjectRelease();
  return v0;
}

id *sub_1009F51B8()
{
  swift_bridgeObjectRelease();

  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();

  swift_release();
  return v0;
}

uint64_t sub_1009F5238()
{
  sub_1009F51B8();

  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for SecureLocationsService()
{
  return self;
}

uint64_t sub_1009F5290()
{
  return sub_1009F486C();
}

void sub_1009F52B4(void *a1, void *a2, uint64_t a3, void *a4, void (*a5)(void, void), uint64_t a6)
{
  uint64_t v60 = a5;
  uint64_t v61 = a6;
  uint64_t v62 = a3;
  uint64_t v56 = type metadata accessor for DispatchPredicate();
  uint64_t v58 = *(void *)(v56 - 8);
  __chkstk_darwin(v56);
  unint64_t v57 = (void **)((char *)&v55 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0));
  if (qword_101637070 != -1) {
    swift_once();
  }
  uint64_t v10 = type metadata accessor for Logger();
  uint64_t v11 = sub_100010324(v10, (uint64_t)qword_10170EC30);
  long long v63 = a1;
  os_log_type_t v12 = Logger.logObject.getter();
  os_log_type_t v13 = static os_log_type_t.default.getter();
  uint64_t v14 = &selRef_fetchEncryptedPayloadForUnknownBeacon_completion_;
  if (os_log_type_enabled(v12, v13))
  {
    os_log_type_t v15 = (uint8_t *)swift_slowAlloc();
    uint64_t v16 = swift_slowAlloc();
    uint64_t v59 = v11;
    id v65 = (id)v16;
    *(_DWORD *)os_log_type_t v15 = 136446210;
    uint64_t v17 = v63;
    id v64 = [v63 subscriptionMode];
    uint64_t v18 = dispatch thunk of CustomStringConvertible.description.getter();
    id v64 = (id)sub_1008FA0F0(v18, v19, (uint64_t *)&v65);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    uint64_t v14 = &selRef_fetchEncryptedPayloadForUnknownBeacon_completion_;
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v12, v13, "subscribeAndFetch called with mode %{public}s", v15, 0xCu);
    swift_arrayDestroy();
    uint64_t v11 = v59;
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {

    os_log_type_t v12 = v63;
  }

  if ([v63 v14[387]] && a2)
  {
    unint64_t v20 = a2;
    uint64_t v21 = Logger.logObject.getter();
    os_log_type_t v22 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v21, v22))
    {
      uint64_t v23 = swift_slowAlloc();
      uint64_t v55 = a2;
      uint64_t v24 = (uint8_t *)v23;
      uint64_t v25 = (void *)swift_slowAlloc();
      uint64_t v59 = v11;
      *(_DWORD *)uint64_t v24 = 138543362;
      id v65 = v20;
      uint64_t v26 = v20;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *uint64_t v25 = v55;

      uint64_t v14 = &selRef_fetchEncryptedPayloadForUnknownBeacon_completion_;
      _os_log_impl((void *)&_mh_execute_header, v21, v22, "subscribeAndFetch adding connection %{public}@", v24, 0xCu);
      sub_10000588C((uint64_t *)&unk_101638EA0);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {

      uint64_t v21 = v20;
    }

    os_log_type_t v27 = *(void **)(v62 + 32);
    uint64_t v29 = v57;
    uint64_t v28 = v58;
    *unint64_t v57 = v27;
    uint64_t v30 = v56;
    (*(void (**)(void *, void, uint64_t))(v28 + 104))(v29, enum case for DispatchPredicate.onQueue(_:), v56);
    id v31 = v27;
    LOBYTE(v27) = _dispatchPreconditionTest(_:)();
    (*(void (**)(void *, uint64_t))(v28 + 8))(v29, v30);
    if ((v27 & 1) == 0)
    {
      __break(1u);
      goto LABEL_27;
    }
    [*(id *)(v62 + 112) addObject:v20];
    swift_retain();
    sub_100FD0F60(v20);

    swift_release();
    swift_release();
  }
  if ([v63 v14[387]] != (id)2)
  {
    swift_retain();
    sub_100730374((uint64_t)a4, v63, 0, v60, v61);
LABEL_21:
    swift_release();
    return;
  }
  swift_bridgeObjectRetain();
  unsigned int v32 = Logger.logObject.getter();
  os_log_type_t v33 = static os_log_type_t.default.getter();
  if (!os_log_type_enabled(v32, v33))
  {

    swift_bridgeObjectRelease();
    goto LABEL_19;
  }
  uint64_t v34 = (uint8_t *)swift_slowAlloc();
  id v65 = (id)swift_slowAlloc();
  *(_DWORD *)uint64_t v34 = 136315138;
  if (!a4[2])
  {
LABEL_27:
    __break(1u);
    return;
  }
  uint64_t v35 = v14;
  uint64_t v36 = a4[4];
  unint64_t v37 = a4[5];
  swift_bridgeObjectRetain();
  uint64_t v38 = v36;
  uint64_t v14 = v35;
  id v64 = (id)sub_1008FA0F0(v38, v37, (uint64_t *)&v65);
  UnsafeMutableRawBufferPointer.copyMemory(from:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  _os_log_impl((void *)&_mh_execute_header, v32, v33, "subscribeAndFetch called with live mode %s, ", v34, 0xCu);
  swift_arrayDestroy();
  swift_slowDealloc();
  swift_slowDealloc();

LABEL_19:
  uint64_t v39 = a4[2];
  if (v39 == 1)
  {
    uint64_t v40 = v62;
    uint64_t v41 = *(void **)(v62 + 96);
    uint64_t v43 = (void *)a4[4];
    uint64_t v42 = (void *)a4[5];
    uint64_t v44 = type metadata accessor for Transaction();
    __chkstk_darwin(v44);
    *(&v55 - 6) = v41;
    *(&v55 - 5) = v43;
    char v45 = v63;
    *(&v55 - 4) = v42;
    *(&v55 - 3) = v45;
    uint64_t v46 = v61;
    *(&v55 - 2) = v60;
    *(&v55 - 1) = (void *)v46;
    swift_retain();
    swift_bridgeObjectRetain();
    static Transaction.named<A>(_:with:)();
    swift_bridgeObjectRelease();
    swift_release();
    uint64_t v47 = *(void *)(v40 + 96);
    swift_retain();
    sub_10072FA40((uint64_t)a4, v45, 0, v47);
    goto LABEL_21;
  }
  swift_bridgeObjectRetain();
  uint64_t v48 = Logger.logObject.getter();
  os_log_type_t v49 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v48, v49))
  {
    char v50 = (uint8_t *)swift_slowAlloc();
    *(_DWORD *)char v50 = 134217984;
    id v65 = (id)v39;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v48, v49, "subscribeAndFetch called with live mode and %ld ids. Only 1 id is supported", v50, 0xCu);
    swift_slowDealloc();
  }
  else
  {

    swift_bridgeObjectRelease();
  }
  [v63 v14[387]];
  id v51 = objc_allocWithZone((Class)SPSecureLocationsSubscriptionResult);
  sub_10001D4B0(0, (unint64_t *)&qword_10163F378);
  Class isa = Array._bridgeToObjectiveC()().super.isa;
  id v53 = [v51 initWithExpiryTime:isa locations:15.0];

  type metadata accessor for SecureLocationsError(0);
  id v64 = 0;
  sub_1004A0BC8((uint64_t)_swiftEmptyArrayStorage);
  sub_1009F9ED8(&qword_10163F370, type metadata accessor for SecureLocationsError);
  _BridgedStoredNSError.init(_:userInfo:)();
  unint64_t v54 = v65;
  v60(v53, v65);
}

void sub_1009F5B2C(void *a1, void *a2, void (*a3)(void *), uint64_t a4, uint64_t a5, void *a6)
{
  if ([a1 subscriptionMode] == (id)2)
  {
    os_log_type_t v12 = (void *)a2[2];
    if (v12 == (void *)1)
    {
      uint64_t v14 = a2[4];
      unint64_t v13 = a2[5];
      swift_retain();
      swift_bridgeObjectRetain();
      sub_100743BE4(v14, v13, a1, (void (*)(void))a3, a4);
      swift_bridgeObjectRelease();
      swift_release();
      if (a6)
      {
        id v22 = a6;
        sub_1009F5E58(v22);
      }
    }
    else
    {
      if (qword_101637070 != -1) {
        swift_once();
      }
      uint64_t v18 = type metadata accessor for Logger();
      sub_100010324(v18, (uint64_t)qword_10170EC30);
      swift_bridgeObjectRetain();
      unint64_t v19 = Logger.logObject.getter();
      os_log_type_t v20 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v19, v20))
      {
        uint64_t v21 = (uint8_t *)swift_slowAlloc();
        *(_DWORD *)uint64_t v21 = 134217984;
        uint64_t v23 = v12;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        _os_log_impl((void *)&_mh_execute_header, v19, v20, "unsubscribe for live can be called with only 1 id. Id count %ld", v21, 0xCu);
        swift_slowDealloc();
      }
      else
      {

        swift_bridgeObjectRelease();
      }
      type metadata accessor for SecureLocationsError(0);
      sub_1004A0BC8((uint64_t)_swiftEmptyArrayStorage);
      sub_1009F9ED8(&qword_10163F370, type metadata accessor for SecureLocationsError);
      _BridgedStoredNSError.init(_:userInfo:)();
      a3(v23);
    }
  }
  else
  {
    os_log_type_t v15 = (void *)swift_allocObject();
    v15[2] = a5;
    v15[3] = a1;
    v15[4] = a6;
    v15[5] = a3;
    v15[6] = a4;
    id v16 = a6;
    swift_retain();
    swift_retain();
    id v17 = a1;
    swift_retain();
    sub_10073EE18((uint64_t)a2, v17, (uint64_t)sub_1009F9C1C, (uint64_t)v15);
    swift_release();
    swift_release();
  }
}

uint64_t sub_1009F5E58(void *a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = type metadata accessor for DispatchPredicate();
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v7 = (void *)((char *)aBlock - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v8 = *(void **)(v2 + 32);
  *uint64_t v7 = v8;
  (*(void (**)(void *, void, uint64_t))(v5 + 104))(v7, enum case for DispatchPredicate.onQueue(_:), v4);
  id v9 = v8;
  LOBYTE(v8) = _dispatchPreconditionTest(_:)();
  (*(void (**)(void *, uint64_t))(v5 + 8))(v7, v4);
  if ((v8 & 1) == 0)
  {
    __break(1u);
LABEL_10:
    swift_once();
    goto LABEL_4;
  }
  [*(id *)(v2 + 112) removeObject:a1];
  uint64_t result = (uint64_t)[*(id *)(v2 + 112) containsObject:a1];
  if (result) {
    return result;
  }
  if (qword_101637070 != -1) {
    goto LABEL_10;
  }
LABEL_4:
  uint64_t v11 = type metadata accessor for Logger();
  sub_100010324(v11, (uint64_t)qword_10170EC30);
  os_log_type_t v12 = a1;
  unint64_t v13 = Logger.logObject.getter();
  os_log_type_t v14 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v13, v14))
  {
    os_log_type_t v15 = (uint8_t *)swift_slowAlloc();
    id v16 = (void *)swift_slowAlloc();
    *(_DWORD *)os_log_type_t v15 = 138412290;
    aBlock[0] = v12;
    id v17 = v12;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    void *v16 = v12;

    _os_log_impl((void *)&_mh_execute_header, v13, v14, "removing client connection %@", v15, 0xCu);
    sub_10000588C((uint64_t *)&unk_101638EA0);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {

    unint64_t v13 = v12;
  }

  uint64_t v18 = *(void *)(v2 + 104);
  unint64_t v19 = *(NSObject **)(v18 + 16);
  uint64_t v20 = swift_allocObject();
  *(void *)(v20 + 16) = v18;
  *(void *)(v20 + 24) = v12;
  uint64_t v21 = swift_allocObject();
  *(void *)(v21 + 16) = sub_1009F9A04;
  *(void *)(v21 + 24) = v20;
  aBlock[4] = sub_100132424;
  aBlock[5] = v21;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_1000A70B0;
  aBlock[3] = &unk_1015E2C88;
  id v22 = _Block_copy(aBlock);
  swift_retain_n();
  uint64_t v23 = v12;
  swift_retain();
  swift_release();
  dispatch_sync(v19, v22);
  _Block_release(v22);
  char isEscapingClosureAtFileLocation = swift_isEscapingClosureAtFileLocation();
  swift_release();
  swift_release();
  uint64_t result = swift_release();
  if (isEscapingClosureAtFileLocation) {
    __break(1u);
  }
  return result;
}

uint64_t sub_1009F6230(uint64_t a1, uint64_t a2, void *a3, void *a4, uint64_t a5, uint64_t a6)
{
  uint64_t v12 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v25 = *(void *)(v12 - 8);
  __chkstk_darwin(v12);
  os_log_type_t v14 = (char *)&v23 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v24 = type metadata accessor for DispatchQoS();
  uint64_t v15 = *(void *)(v24 - 8);
  __chkstk_darwin(v24);
  id v17 = (char *)&v23 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v23 = *(void *)(a2 + 32);
  uint64_t v18 = (void *)swift_allocObject();
  v18[2] = a2;
  v18[3] = a3;
  v18[4] = a4;
  v18[5] = a5;
  v18[6] = a6;
  v18[7] = a1;
  aBlock[4] = sub_1009F9C84;
  aBlock[5] = v18;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_1004B5480;
  aBlock[3] = &unk_1015E2F30;
  unint64_t v19 = _Block_copy(aBlock);
  swift_retain();
  id v20 = a3;
  id v21 = a4;
  swift_retain();
  swift_errorRetain();
  static DispatchQoS.unspecified.getter();
  uint64_t v26 = _swiftEmptyArrayStorage;
  sub_1009F9ED8((unint64_t *)&qword_10163B7E0, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
  sub_10000588C((uint64_t *)&unk_10163F350);
  sub_1001BF100((unint64_t *)&qword_10163B7F0, (uint64_t *)&unk_10163F350);
  dispatch thunk of SetAlgebra.init<A>(_:)();
  OS_dispatch_queue.async(group:qos:flags:execute:)();
  _Block_release(v19);
  (*(void (**)(char *, uint64_t))(v25 + 8))(v14, v12);
  (*(void (**)(char *, uint64_t))(v15 + 8))(v17, v24);
  return swift_release();
}

uint64_t sub_1009F6514(uint64_t a1, void *a2, void *a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v53 = a4;
  uint64_t v54 = a5;
  id v57 = a3;
  uint64_t v9 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v10 = *(void *)(v9 - 8);
  __chkstk_darwin(v9);
  uint64_t v55 = &v47[-((v11 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v12 = type metadata accessor for DispatchQoS();
  uint64_t v56 = *(void *)(v12 - 8);
  __chkstk_darwin(v12);
  os_log_type_t v14 = &v47[-((v13 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v58 = a1;
  swift_retain();
  OS_dispatch_queue.sync<A>(execute:)();
  swift_release();
  char v15 = (char)aBlock;
  if ([a2 subscriptionMode] == (id)1 && v57 && (v15 & 1) == 0)
  {
    uint64_t v27 = qword_101637070;
    id v28 = v57;
    if (v27 != -1) {
      swift_once();
    }
    uint64_t v51 = v10;
    uint64_t v29 = type metadata accessor for Logger();
    sub_100010324(v29, (uint64_t)qword_10170EC30);
    uint64_t v30 = v28;
    id v31 = Logger.logObject.getter();
    os_log_type_t v32 = static os_log_type_t.default.getter();
    int v33 = v32;
    BOOL v34 = os_log_type_enabled(v31, v32);
    uint64_t v35 = v58;
    uint64_t v52 = v12;
    if (v34)
    {
      uint64_t v36 = swift_slowAlloc();
      os_log_type_t v49 = (void *)swift_slowAlloc();
      char v50 = (void **)swift_slowAlloc();
      uint64_t aBlock = v50;
      *(_DWORD *)uint64_t v36 = 136315394;
      uint64_t v59 = (void *)sub_1008FA0F0(0xD000000000000027, 0x800000010140E9A0, (uint64_t *)&aBlock);
      int v48 = v33;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v36 + 12) = 2112;
      uint64_t v59 = v30;
      unint64_t v37 = v30;
      uint64_t v38 = v30;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *os_log_type_t v49 = v57;

      uint64_t v30 = v37;
      _os_log_impl((void *)&_mh_execute_header, v31, (os_log_type_t)v48, "%s unsubscribe shallow removing client connection %@", (uint8_t *)v36, 0x16u);
      sub_10000588C((uint64_t *)&unk_101638EA0);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_arrayDestroy();
      swift_slowDealloc();
      uint64_t v35 = v58;
      swift_slowDealloc();
    }
    else
    {
    }
    uint64_t v39 = (void *)swift_allocObject();
    uint64_t v40 = v53;
    uint64_t v41 = v54;
    v39[2] = v30;
    v39[3] = v40;
    v39[4] = v41;
    v39[5] = a6;
    v39[6] = v35;
    id v64 = sub_1009F9D78;
    id v65 = v39;
    uint64_t aBlock = _NSConcreteStackBlock;
    uint64_t v61 = 1107296256;
    uint64_t v62 = sub_1004B5480;
    long long v63 = &unk_1015E2FD0;
    uint64_t v42 = _Block_copy(&aBlock);
    uint64_t v43 = v30;
    swift_retain();
    swift_errorRetain();
    swift_retain();
    static DispatchQoS.unspecified.getter();
    uint64_t v59 = _swiftEmptyArrayStorage;
    sub_1009F9ED8((unint64_t *)&qword_10163B7E0, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
    sub_10000588C((uint64_t *)&unk_10163F350);
    sub_1001BF100((unint64_t *)&qword_10163B7F0, (uint64_t *)&unk_10163F350);
    uint64_t v44 = v14;
    char v45 = v55;
    dispatch thunk of SetAlgebra.init<A>(_:)();
    OS_dispatch_queue.async(group:qos:flags:execute:)();
    _Block_release(v42);

    (*(void (**)(unsigned char *, uint64_t))(v51 + 8))(v45, v9);
    (*(void (**)(unsigned char *, uint64_t))(v56 + 8))(v44, v52);
  }
  else
  {
    if (qword_101637070 != -1) {
      swift_once();
    }
    uint64_t v16 = type metadata accessor for Logger();
    sub_100010324(v16, (uint64_t)qword_10170EC30);
    swift_retain();
    id v17 = Logger.logObject.getter();
    os_log_type_t v18 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v17, v18))
    {
      unint64_t v19 = (uint8_t *)swift_slowAlloc();
      uint64_t v51 = v10;
      uint64_t v52 = v12;
      *(_DWORD *)unint64_t v19 = 67109120;
      swift_retain();
      OS_dispatch_queue.sync<A>(execute:)();
      swift_release();
      LODWORD(aBlock) = aBlock;
      uint64_t v10 = v51;
      uint64_t v12 = v52;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_release();
      _os_log_impl((void *)&_mh_execute_header, v17, v18, "unsubscribe shallow not removing client connection. isEmpty %{BOOL}d", v19, 8u);
      swift_slowDealloc();
    }
    else
    {

      swift_release();
    }
    id v20 = (void *)swift_allocObject();
    id v21 = v57;
    uint64_t v22 = v53;
    uint64_t v23 = v54;
    v20[2] = v57;
    v20[3] = v22;
    v20[4] = v23;
    v20[5] = a6;
    id v64 = sub_1009F9D00;
    id v65 = v20;
    uint64_t aBlock = _NSConcreteStackBlock;
    uint64_t v61 = 1107296256;
    uint64_t v62 = sub_1004B5480;
    long long v63 = &unk_1015E2F80;
    uint64_t v24 = _Block_copy(&aBlock);
    id v25 = v21;
    swift_retain();
    swift_errorRetain();
    static DispatchQoS.unspecified.getter();
    uint64_t v59 = _swiftEmptyArrayStorage;
    sub_1009F9ED8((unint64_t *)&qword_10163B7E0, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
    sub_10000588C((uint64_t *)&unk_10163F350);
    sub_1001BF100((unint64_t *)&qword_10163B7F0, (uint64_t *)&unk_10163F350);
    uint64_t v26 = v55;
    dispatch thunk of SetAlgebra.init<A>(_:)();
    OS_dispatch_queue.async(group:qos:flags:execute:)();
    _Block_release(v24);
    (*(void (**)(unsigned char *, uint64_t))(v10 + 8))(v26, v9);
    (*(void (**)(unsigned char *, uint64_t))(v56 + 8))(v14, v12);
  }
  return swift_release();
}

uint64_t sub_1009F6D6C(void *a1, void (*a2)(uint64_t), uint64_t a3, uint64_t a4)
{
  if (qword_101637070 != -1) {
    swift_once();
  }
  uint64_t v7 = type metadata accessor for Logger();
  sub_100010324(v7, (uint64_t)qword_10170EC30);
  id v8 = a1;
  uint64_t v9 = Logger.logObject.getter();
  os_log_type_t v10 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v9, v10))
  {
    uint64_t v11 = swift_slowAlloc();
    id v17 = (void *)swift_slowAlloc();
    uint64_t v19 = swift_slowAlloc();
    *(_DWORD *)uint64_t v11 = 136315394;
    sub_1008FA0F0(0xD000000000000027, 0x800000010140E9A0, &v19);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v11 + 12) = 2112;
    id v12 = v8;
    id v18 = v8;
    uint64_t v13 = a4;
    id v14 = v12;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *id v17 = v18;

    a4 = v13;
    _os_log_impl((void *)&_mh_execute_header, v9, v10, "%s - Will call completion on completionQueue %@", (uint8_t *)v11, 0x16u);
    sub_10000588C((uint64_t *)&unk_101638EA0);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
  }
  a2(a4);
  uint64_t v15 = type metadata accessor for Transaction();
  __chkstk_darwin(v15);
  return static Transaction.named<A>(_:with:)();
}

uint64_t sub_1009F7040(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v6 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  uint64_t v9 = (char *)v17 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v18 = type metadata accessor for DispatchQoS();
  uint64_t v10 = *(void *)(v18 - 8);
  __chkstk_darwin(v18);
  id v12 = (char *)v17 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17[1] = *(void *)(a2 + 32);
  uint64_t v13 = (void *)swift_allocObject();
  v13[2] = a1;
  void v13[3] = a2;
  v13[4] = a3;
  aBlock[4] = sub_1009F9DEC;
  aBlock[5] = v13;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_1004B5480;
  aBlock[3] = &unk_1015E3020;
  id v14 = _Block_copy(aBlock);
  swift_retain();
  swift_retain();
  id v15 = a3;
  static DispatchQoS.unspecified.getter();
  aBlock[7] = _swiftEmptyArrayStorage;
  sub_1009F9ED8((unint64_t *)&qword_10163B7E0, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
  sub_10000588C((uint64_t *)&unk_10163F350);
  sub_1001BF100((unint64_t *)&qword_10163B7F0, (uint64_t *)&unk_10163F350);
  dispatch thunk of SetAlgebra.init<A>(_:)();
  OS_dispatch_queue.async(group:qos:flags:execute:)();
  _Block_release(v14);
  (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
  (*(void (**)(char *, uint64_t))(v10 + 8))(v12, v18);
  return swift_release();
}

uint64_t sub_1009F730C(void *a1, uint64_t (*a2)(uint64_t), uint64_t a3, uint64_t a4)
{
  if (qword_101637070 != -1) {
    swift_once();
  }
  uint64_t v7 = type metadata accessor for Logger();
  sub_100010324(v7, (uint64_t)qword_10170EC30);
  id v8 = a1;
  uint64_t v9 = Logger.logObject.getter();
  os_log_type_t v10 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v9, v10))
  {
    uint64_t v11 = swift_slowAlloc();
    id v12 = (void *)swift_slowAlloc();
    uint64_t v15 = swift_slowAlloc();
    *(_DWORD *)uint64_t v11 = 136315394;
    sub_1008FA0F0(0xD000000000000027, 0x800000010140E9A0, &v15);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v11 + 12) = 2112;
    if (a1) {
      id v13 = v8;
    }
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *id v12 = a1;

    _os_log_impl((void *)&_mh_execute_header, v9, v10, "%s - Will call completion on completionQueue %@", (uint8_t *)v11, 0x16u);
    sub_10000588C((uint64_t *)&unk_101638EA0);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
  }
  return a2(a4);
}

void sub_1009F7584(void **a1, unint64_t *a2)
{
  uint64_t v5 = type metadata accessor for SecureLocation();
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5 - 8);
  id v8 = (char *)v23 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = *a1;
  if ([v9 publishReason] == (id)100)
  {
    sub_100E8FF94(v9, (uint64_t)v8);
    unint64_t v10 = *a2;
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    *a2 = v10;
    if ((isUniquelyReferenced_nonNull_native & 1) == 0)
    {
      unint64_t v10 = sub_100A712C4(0, *(void *)(v10 + 16) + 1, 1, v10);
      *a2 = v10;
    }
    unint64_t v13 = *(void *)(v10 + 16);
    unint64_t v12 = *(void *)(v10 + 24);
    if (v13 >= v12 >> 1)
    {
      unint64_t v10 = sub_100A712C4(v12 > 1, v13 + 1, 1, v10);
      *a2 = v10;
    }
    *(void *)(v10 + 16) = v13 + 1;
    sub_1009F9AD4((uint64_t)v8, v10+ ((*(unsigned __int8 *)(v6 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80))+ *(void *)(v6 + 72) * v13);
  }
  else
  {
    if (qword_101637070 != -1) {
      swift_once();
    }
    uint64_t v14 = type metadata accessor for Logger();
    sub_100010324(v14, (uint64_t)qword_10170EC30);
    id v15 = v9;
    uint64_t v16 = Logger.logObject.getter();
    os_log_type_t v17 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v16, v17))
    {
      uint64_t v18 = (uint8_t *)swift_slowAlloc();
      uint64_t v24 = swift_slowAlloc();
      void v23[2] = v2;
      *(_DWORD *)uint64_t v18 = 136315138;
      v23[1] = v18 + 4;
      id v19 = [v15 debugDescription];
      uint64_t v20 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      unint64_t v22 = v21;

      v23[3] = sub_1008FA0F0(v20, v22, &v24);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();

      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v16, v17, "Not updating cache with location since publishReason is not legacyLocate. %s", v18, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
    }
  }
}

uint64_t sub_1009F7894(uint64_t a1, uint64_t (*a2)(void))
{
  if (qword_101637070 != -1) {
    swift_once();
  }
  uint64_t v3 = type metadata accessor for Logger();
  sub_100010324(v3, (uint64_t)qword_10170EC30);
  swift_bridgeObjectRetain();
  uint64_t v4 = Logger.logObject.getter();
  os_log_type_t v5 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v4, v5))
  {
    uint64_t v6 = (uint8_t *)swift_slowAlloc();
    *(_DWORD *)uint64_t v6 = 134217984;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v4, v5, "updateLocations in cache %ld", v6, 0xCu);
    swift_slowDealloc();
  }
  else
  {

    swift_bridgeObjectRelease();
  }
  return a2(0);
}

void sub_1009F79EC(void *a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for DispatchPredicate();
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v7 = (uint64_t *)((char *)&v12 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0));
  if (!a1) {
    goto LABEL_4;
  }
  id v8 = *(void **)(a2 + 32);
  *uint64_t v7 = v8;
  (*(void (**)(void *, void, uint64_t))(v5 + 104))(v7, enum case for DispatchPredicate.onQueue(_:), v4);
  id v9 = a1;
  id v10 = v8;
  LOBYTE(v8) = _dispatchPreconditionTest(_:)();
  (*(void (**)(void *, uint64_t))(v5 + 8))(v7, v4);
  if (v8)
  {
    [*(id *)(a2 + 112) addObject:v9];
    swift_retain();
    sub_100FD0F60(v9);

    swift_release();
    swift_release();
LABEL_4:
    id v11 = *(id *)(*(void *)(a2 + 96) + 328);
    sub_10108A2B8();

    return;
  }
  __break(1u);
}

uint64_t sub_1009F7B78(uint64_t a1, uint64_t a2, const char *a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v26 = a5;
  uint64_t v27 = a6;
  uint64_t v8 = v6;
  uint64_t v25 = a1;
  uint64_t v10 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v29 = *(void *)(v10 - 8);
  __chkstk_darwin(v10);
  uint64_t v12 = (char *)&v25 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v28 = type metadata accessor for DispatchQoS();
  uint64_t v13 = *(void *)(v28 - 8);
  __chkstk_darwin(v28);
  id v15 = (char *)&v25 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_101637070 != -1) {
    swift_once();
  }
  uint64_t v16 = type metadata accessor for Logger();
  sub_100010324(v16, (uint64_t)qword_10170EC30);
  os_log_type_t v17 = Logger.logObject.getter();
  os_log_type_t v18 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v17, v18))
  {
    id v19 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)id v19 = 0;
    _os_log_impl((void *)&_mh_execute_header, v17, v18, a3, v19, 2u);
    swift_slowDealloc();
  }

  id v20 = [self currentConnection];
  unint64_t v21 = (void *)swift_allocObject();
  v21[2] = v20;
  v21[3] = v8;
  v21[4] = v25;
  v21[5] = a2;
  aBlock[4] = v26;
  aBlock[5] = v21;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_1004B5480;
  aBlock[3] = v27;
  unint64_t v22 = _Block_copy(aBlock);
  id v23 = v20;
  swift_retain();
  swift_retain();
  static DispatchQoS.unspecified.getter();
  uint64_t v30 = _swiftEmptyArrayStorage;
  sub_1009F9ED8((unint64_t *)&qword_10163B7E0, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
  sub_10000588C((uint64_t *)&unk_10163F350);
  sub_1001BF100((unint64_t *)&qword_10163B7F0, (uint64_t *)&unk_10163F350);
  dispatch thunk of SetAlgebra.init<A>(_:)();
  OS_dispatch_queue.async(group:qos:flags:execute:)();
  _Block_release(v22);

  (*(void (**)(char *, uint64_t))(v29 + 8))(v12, v10);
  (*(void (**)(char *, uint64_t))(v13 + 8))(v15, v28);
  return swift_release();
}

uint64_t sub_1009F7F14(void *a1, uint64_t a2, uint64_t (*a3)(void))
{
  if (a1)
  {
    id v4 = a1;
    sub_1009F5E58(v4);
  }
  return a3(0);
}

uint64_t sub_1009F7F68(uint64_t a1, void (*a2)(void, void *), uint64_t a3)
{
  swift_retain();
  sub_10073E484(a2, a3);

  return swift_release();
}

uint64_t sub_1009F7FC4(uint64_t a1, uint64_t a2, const char *a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v29 = a1;
  uint64_t v30 = a5;
  uint64_t v27 = a3;
  uint64_t v28 = a4;
  uint64_t v8 = v6;
  uint64_t v10 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v11 = *(void *)(v10 - 8);
  __chkstk_darwin(v10);
  uint64_t v13 = (char *)&v25 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v31 = type metadata accessor for DispatchQoS();
  uint64_t v14 = *(void *)(v31 - 8);
  __chkstk_darwin(v31);
  uint64_t v16 = (char *)&v25 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_101637070 != -1) {
    swift_once();
  }
  uint64_t v17 = type metadata accessor for Logger();
  sub_100010324(v17, (uint64_t)qword_10170EC30);
  os_log_type_t v18 = Logger.logObject.getter();
  os_log_type_t v19 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v18, v19))
  {
    id v20 = (uint8_t *)swift_slowAlloc();
    uint64_t v26 = v16;
    *(_WORD *)id v20 = 0;
    _os_log_impl((void *)&_mh_execute_header, v18, v19, v27, v20, 2u);
    uint64_t v16 = v26;
    swift_slowDealloc();
  }

  unint64_t v21 = (void *)swift_allocObject();
  uint64_t v22 = v29;
  v21[2] = v8;
  v21[3] = v22;
  v21[4] = a2;
  aBlock[4] = v30;
  aBlock[5] = v21;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_1004B5480;
  aBlock[3] = a6;
  id v23 = _Block_copy(aBlock);
  swift_retain();
  swift_retain();
  static DispatchQoS.unspecified.getter();
  os_log_type_t v32 = _swiftEmptyArrayStorage;
  sub_1009F9ED8((unint64_t *)&qword_10163B7E0, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
  sub_10000588C((uint64_t *)&unk_10163F350);
  sub_1001BF100((unint64_t *)&qword_10163B7F0, (uint64_t *)&unk_10163F350);
  dispatch thunk of SetAlgebra.init<A>(_:)();
  OS_dispatch_queue.async(group:qos:flags:execute:)();
  _Block_release(v23);
  (*(void (**)(char *, uint64_t))(v11 + 8))(v13, v10);
  (*(void (**)(char *, uint64_t))(v14 + 8))(v16, v31);
  return swift_release();
}

void sub_1009F8364(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(uint64_t, uint64_t))
{
  id v7 = *(id *)(*(void *)(a1 + 96) + 328);
  a4(a2, a3);
}

uint64_t sub_1009F83D8()
{
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  uint64_t v5 = (char *)v15 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15[0] = type metadata accessor for DispatchQoS();
  uint64_t v6 = *(void *)(v15[0] - 8);
  __chkstk_darwin(v15[0]);
  uint64_t v8 = (char *)v15 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_101637070 != -1) {
    swift_once();
  }
  uint64_t v9 = type metadata accessor for Logger();
  sub_100010324(v9, (uint64_t)qword_10170EC30);
  uint64_t v10 = Logger.logObject.getter();
  os_log_type_t v11 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v10, v11))
  {
    uint64_t v12 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v12 = 0;
    _os_log_impl((void *)&_mh_execute_header, v10, v11, "Daemon API: triggerStewieProactiveNotification", v12, 2u);
    swift_slowDealloc();
  }

  aBlock[4] = sub_1009F8894;
  aBlock[5] = v1;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_1004B5480;
  aBlock[3] = &unk_1015E2A30;
  uint64_t v13 = _Block_copy(aBlock);
  swift_retain();
  static DispatchQoS.unspecified.getter();
  v15[1] = _swiftEmptyArrayStorage;
  sub_1009F9ED8((unint64_t *)&qword_10163B7E0, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
  sub_10000588C((uint64_t *)&unk_10163F350);
  sub_1001BF100((unint64_t *)&qword_10163B7F0, (uint64_t *)&unk_10163F350);
  dispatch thunk of SetAlgebra.init<A>(_:)();
  OS_dispatch_queue.async(group:qos:flags:execute:)();
  _Block_release(v13);
  (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
  (*(void (**)(char *, void))(v6 + 8))(v8, v15[0]);
  return swift_release();
}

void sub_1009F871C(uint64_t a1)
{
  uint64_t v1 = *(void **)(*(void *)(a1 + 96) + 328);
  type metadata accessor for Transaction();
  id v2 = v1;
  static Transaction.named<A>(_:with:)();
}

uint64_t sub_1009F87B0()
{
  swift_release();

  return _swift_deallocObject(v0, 32, 7);
}

uint64_t sub_1009F87E8()
{
  return sub_1009F4BF0();
}

uint64_t sub_1009F87F0(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_1009F8800()
{
  return swift_release();
}

uint64_t sub_1009F8808()
{
  return NSXPCConnection.hasEntitlement<A>(_:)() & 1;
}

unint64_t sub_1009F8840()
{
  unint64_t result = qword_101655290;
  if (!qword_101655290)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_101655290);
  }
  return result;
}

void sub_1009F8894()
{
  sub_1009F871C(v0);
}

uint64_t sub_1009F889C(uint64_t a1)
{
  return sub_1010913C8(a1, *(char **)(v1 + 16), *(unsigned char *)(v1 + 24));
}

void sub_1009F88C0()
{
  sub_1009F8364(v0[2], v0[3], v0[4], (void (*)(uint64_t, uint64_t))sub_10108D7C4);
}

void sub_1009F88F8()
{
  sub_1009F8364(v0[2], v0[3], v0[4], (void (*)(uint64_t, uint64_t))sub_10108CF9C);
}

uint64_t sub_1009F892C@<X0>(uint64_t a1@<X0>, BOOL *a2@<X8>)
{
  uint64_t result = swift_beginAccess();
  uint64_t v5 = *(void *)(a1 + 32);
  if ((v5 & 0xC000000000000001) != 0)
  {
    swift_bridgeObjectRetain();
    uint64_t v6 = __CocoaSet.count.getter();
    uint64_t result = swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v6 = *(void *)(v5 + 16);
  }
  *a2 = v6 == 0;
  return result;
}

void sub_1009F89C4(uint64_t a1, void *a2, uint64_t a3, void (**a4)(void, void, void))
{
  uint64_t v8 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  os_log_type_t v11 = (char *)&v33 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = type metadata accessor for DispatchQoS();
  uint64_t v35 = *(void *)(v12 - 8);
  __chkstk_darwin(v12);
  uint64_t v14 = (char *)&v33 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = swift_allocObject();
  *(void *)(v15 + 16) = a4;
  if (*(void *)(a1 + 16))
  {
    uint64_t v16 = self;
    uint64_t v34 = v12;
    uint64_t v17 = v15;
    os_log_type_t v18 = (void *)v16;
    _Block_copy(a4);
    id v19 = [v18 currentConnection];
    uint64_t v33 = *(void *)(a3 + 32);
    id v20 = (void *)swift_allocObject();
    v20[2] = a2;
    v20[3] = v19;
    v20[4] = a3;
    v20[5] = a1;
    v20[6] = sub_1007C84EC;
    v20[7] = v17;
    aBlock[4] = sub_1009F9E84;
    aBlock[5] = v20;
    aBlock[0] = _NSConcreteStackBlock;
    aBlock[1] = 1107296256;
    aBlock[2] = sub_1004B5480;
    aBlock[3] = &unk_1015E3098;
    unint64_t v21 = _Block_copy(aBlock);
    id v22 = a2;
    id v23 = v19;
    swift_retain();
    swift_bridgeObjectRetain();
    swift_retain();
    static DispatchQoS.unspecified.getter();
    uint64_t v36 = _swiftEmptyArrayStorage;
    sub_1009F9ED8((unint64_t *)&qword_10163B7E0, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
    sub_10000588C((uint64_t *)&unk_10163F350);
    sub_1001BF100((unint64_t *)&qword_10163B7F0, (uint64_t *)&unk_10163F350);
    dispatch thunk of SetAlgebra.init<A>(_:)();
    OS_dispatch_queue.async(group:qos:flags:execute:)();
    _Block_release(v21);

    (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v8);
    (*(void (**)(char *, uint64_t))(v35 + 8))(v14, v34);
    swift_release();
    swift_release();
  }
  else
  {
    _Block_copy(a4);
    if (qword_101637070 != -1) {
      swift_once();
    }
    uint64_t v24 = type metadata accessor for Logger();
    sub_100010324(v24, (uint64_t)qword_10170EC30);
    uint64_t v25 = Logger.logObject.getter();
    os_log_type_t v26 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v25, v26))
    {
      uint64_t v27 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v27 = 0;
      _os_log_impl((void *)&_mh_execute_header, v25, v26, "subscribeAndFetch called with empty array of IDs", v27, 2u);
      swift_slowDealloc();
    }

    [a2 subscriptionMode];
    id v28 = objc_allocWithZone((Class)SPSecureLocationsSubscriptionResult);
    sub_10001D4B0(0, (unint64_t *)&qword_10163F378);
    Class isa = Array._bridgeToObjectiveC()().super.isa;
    id v30 = [v28 initWithExpiryTime:isa locations:15.0];

    type metadata accessor for SecureLocationsError(0);
    uint64_t v36 = 0;
    sub_1004A0BC8((uint64_t)_swiftEmptyArrayStorage);
    sub_1009F9ED8(&qword_10163F370, type metadata accessor for SecureLocationsError);
    _BridgedStoredNSError.init(_:userInfo:)();
    uint64_t v31 = (void *)aBlock[0];
    os_log_type_t v32 = (void *)_convertErrorToNSError(_:)();
    ((void (**)(void, id, void *))a4)[2](a4, v30, v32);
    swift_release();
  }
}

void sub_1009F8EF4(uint64_t a1, void *a2, uint64_t a3, void (**a4)(void, void))
{
  uint64_t v47 = a2;
  uint64_t v7 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v8 = *(void *)(v7 - 8);
  __chkstk_darwin(v7);
  uint64_t v10 = (char *)v41 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = type metadata accessor for DispatchQoS();
  uint64_t v12 = *(void *)(v11 - 8);
  __chkstk_darwin(v11);
  int v48 = (char *)v41 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = swift_allocObject();
  *(void *)(v14 + 16) = a4;
  uint64_t v15 = *(void *)(a1 + 16);
  _Block_copy(a4);
  if (v15)
  {
    uint64_t v42 = a3;
    uint64_t v46 = v8;
    if (qword_101637070 != -1) {
      swift_once();
    }
    uint64_t v43 = v12;
    uint64_t v44 = v10;
    uint64_t v45 = v11;
    uint64_t v16 = type metadata accessor for Logger();
    sub_100010324(v16, (uint64_t)qword_10170EC30);
    swift_bridgeObjectRetain_n();
    uint64_t v17 = Logger.logObject.getter();
    os_log_type_t v18 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v17, v18))
    {
      uint64_t v19 = swift_slowAlloc();
      uint64_t v20 = swift_slowAlloc();
      v41[1] = v20;
      *(_DWORD *)uint64_t v19 = 141558275;
      uint64_t v49 = 1752392040;
      aBlock[0] = v20;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v19 + 12) = 2081;
      swift_bridgeObjectRetain();
      uint64_t v21 = Array.description.getter();
      uint64_t v22 = v7;
      uint64_t v23 = v14;
      unint64_t v25 = v24;
      swift_bridgeObjectRelease();
      uint64_t v49 = sub_1008FA0F0(v21, v25, aBlock);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      uint64_t v14 = v23;
      uint64_t v7 = v22;
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v17, v18, "unsubscribe in daemon for %{private,mask.hash}s", (uint8_t *)v19, 0x16u);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {

      swift_bridgeObjectRelease_n();
    }
    id v32 = [self currentConnection];
    uint64_t v33 = v42;
    uint64_t v34 = (void *)swift_allocObject();
    uint64_t v35 = v47;
    v34[2] = v47;
    v34[3] = a1;
    v34[4] = sub_1001E06E0;
    uint64_t v34[5] = v14;
    v34[6] = v33;
    v34[7] = v32;
    aBlock[4] = (uint64_t)sub_1009F9BB4;
    aBlock[5] = (uint64_t)v34;
    aBlock[0] = (uint64_t)_NSConcreteStackBlock;
    aBlock[1] = 1107296256;
    aBlock[2] = (uint64_t)sub_1004B5480;
    aBlock[3] = (uint64_t)&unk_1015E2EB8;
    uint64_t v36 = _Block_copy(aBlock);
    swift_bridgeObjectRetain();
    id v37 = v35;
    swift_retain();
    swift_retain();
    id v38 = v32;
    uint64_t v39 = v48;
    static DispatchQoS.unspecified.getter();
    uint64_t v49 = (uint64_t)_swiftEmptyArrayStorage;
    sub_1009F9ED8((unint64_t *)&qword_10163B7E0, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
    sub_10000588C((uint64_t *)&unk_10163F350);
    sub_1001BF100((unint64_t *)&qword_10163B7F0, (uint64_t *)&unk_10163F350);
    uint64_t v40 = v44;
    dispatch thunk of SetAlgebra.init<A>(_:)();
    OS_dispatch_queue.async(group:qos:flags:execute:)();
    _Block_release(v36);

    (*(void (**)(char *, uint64_t))(v46 + 8))(v40, v7);
    (*(void (**)(char *, uint64_t))(v43 + 8))(v39, v45);
    swift_release();
    swift_release();
  }
  else
  {
    if (qword_101637070 != -1) {
      swift_once();
    }
    uint64_t v26 = type metadata accessor for Logger();
    sub_100010324(v26, (uint64_t)qword_10170EC30);
    uint64_t v27 = Logger.logObject.getter();
    os_log_type_t v28 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v27, v28))
    {
      uint64_t v29 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v29 = 0;
      _os_log_impl((void *)&_mh_execute_header, v27, v28, "unsubscribe called with zero ids", v29, 2u);
      swift_slowDealloc();
    }

    type metadata accessor for SecureLocationsError(0);
    uint64_t v49 = 4;
    sub_1004A0BC8((uint64_t)_swiftEmptyArrayStorage);
    sub_1009F9ED8(&qword_10163F370, type metadata accessor for SecureLocationsError);
    _BridgedStoredNSError.init(_:userInfo:)();
    id v30 = (void *)aBlock[0];
    uint64_t v31 = (void *)_convertErrorToNSError(_:)();
    ((void (**)(void, void *))a4)[2](a4, v31);
    swift_release();
  }
}

uint64_t sub_1009F9578(unint64_t a1, uint64_t a2, void (**a3)(void, void))
{
  uint64_t v5 = swift_allocObject();
  *(void *)(v5 + 16) = a3;
  os_log_type_t v18 = _swiftEmptyArrayStorage;
  if (a1 >> 62)
  {
    _Block_copy(a3);
    swift_bridgeObjectRetain();
    uint64_t v6 = _CocoaArrayWrapper.endIndex.getter();
    if (v6) {
      goto LABEL_3;
    }
LABEL_14:
    swift_bridgeObjectRelease();
    uint64_t v10 = _swiftEmptyArrayStorage;
    if (_swiftEmptyArrayStorage[2])
    {
LABEL_10:
      uint64_t v11 = swift_allocObject();
      *(void *)(v11 + 16) = sub_1001E06E0;
      *(void *)(v11 + 24) = v5;
      swift_retain();
      swift_bridgeObjectRetain();
      swift_retain();
      sub_100604694((uint64_t)v10, 1, (uint64_t)sub_1009F9ACC, v11);
      swift_release();
      swift_release();
      swift_bridgeObjectRelease_n();
      return swift_release();
    }
    goto LABEL_15;
  }
  uint64_t v6 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
  _Block_copy(a3);
  swift_bridgeObjectRetain();
  if (!v6) {
    goto LABEL_14;
  }
LABEL_3:
  if (v6 < 1)
  {
    __break(1u);
    goto LABEL_22;
  }
  uint64_t v7 = 0;
  do
  {
    if ((a1 & 0xC000000000000001) != 0) {
      id v8 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
    }
    else {
      id v8 = *(id *)(a1 + 8 * v7 + 32);
    }
    uint64_t v9 = v8;
    ++v7;
    uint64_t v17 = v8;
    sub_1009F7584(&v17, (unint64_t *)&v18);
  }
  while (v6 != v7);
  swift_bridgeObjectRelease();
  uint64_t v10 = v18;
  if (v18[2]) {
    goto LABEL_10;
  }
LABEL_15:
  if (qword_101637070 != -1) {
LABEL_22:
  }
    swift_once();
  uint64_t v13 = type metadata accessor for Logger();
  sub_100010324(v13, (uint64_t)qword_10170EC30);
  uint64_t v14 = Logger.logObject.getter();
  os_log_type_t v15 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v14, v15))
  {
    uint64_t v16 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v16 = 0;
    _os_log_impl((void *)&_mh_execute_header, v14, v15, "No legacyLocate locations to update in cache", v16, 2u);
    swift_slowDealloc();
  }

  a3[2](a3, 0);
  swift_release();

  return swift_bridgeObjectRelease();
}

uint64_t sub_1009F986C(char a1, uint64_t a2)
{
  Class v4 = (Class)[self standardUserDefaults];
  if (a1)
  {
    Class isa = Bool._bridgeToObjectiveC()().super.super.isa;
    NSString v6 = String._bridgeToObjectiveC()();
    [(objc_class *)v4 setValue:isa forKey:v6];

    Class v4 = isa;
  }
  else
  {
    NSString v6 = String._bridgeToObjectiveC()();
    [(objc_class *)v4 removeObjectForKey:v6];
  }

  uint64_t v7 = *(uint64_t (**)(uint64_t, void))(a2 + 16);

  return v7(a2, 0);
}

uint64_t sub_1009F9970()
{
  return sub_1009F7F68(*(void *)(v0 + 16), *(void (**)(void, void *))(v0 + 24), *(void *)(v0 + 32));
}

uint64_t sub_1009F997C()
{
  _Block_release(*(const void **)(v0 + 16));

  return _swift_deallocObject(v0, 24, 7);
}

uint64_t sub_1009F99B8()
{
  return sub_1009F7F14(*(void **)(v0 + 16), *(void *)(v0 + 24), *(uint64_t (**)(void))(v0 + 32));
}

uint64_t sub_1009F99C4()
{
  swift_release();

  return _swift_deallocObject(v0, 32, 7);
}

void sub_1009F9A04()
{
  sub_100DFFE64(*(void **)(v0 + 16), *(void **)(v0 + 24));
}

uint64_t sub_1009F9A0C()
{
  return _swift_deallocObject(v0, 32, 7);
}

uint64_t sub_1009F9A20()
{
  swift_release();
  swift_release();

  return _swift_deallocObject(v0, 48, 7);
}

void sub_1009F9A68()
{
  sub_1009F79EC(*(void **)(v0 + 16), *(void *)(v0 + 24));
}

uint64_t sub_1009F9A74(uint64_t a1)
{
  return sub_100BAEE64(a1, *(void *)(v1 + 16), *(uint64_t (**)(void))(v1 + 24), *(void *)(v1 + 32));
}

uint64_t sub_1009F9A94()
{
  swift_release();

  return _swift_deallocObject(v0, 32, 7);
}

uint64_t sub_1009F9ACC(uint64_t a1)
{
  return sub_1009F7894(a1, *(uint64_t (**)(void))(v1 + 16));
}

uint64_t sub_1009F9AD4(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for SecureLocation();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_1009F9B38(uint64_t a1)
{
  return sub_100739AEC(a1, v1[2], v1[3], v1[4], v1[5], v1[6]);
}

uint64_t sub_1009F9B5C()
{
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();

  return _swift_deallocObject(v0, 64, 7);
}

uint64_t sub_1009F9BB4()
{
  return sub_1009F9E9C((uint64_t (*)(void, void, void, void, void, void))sub_1009F5B2C);
}

uint64_t sub_1009F9BCC()
{
  swift_release();

  swift_release();

  return _swift_deallocObject(v0, 56, 7);
}

uint64_t sub_1009F9C1C(uint64_t a1)
{
  return sub_1009F6230(a1, *(void *)(v1 + 16), *(void **)(v1 + 24), *(void **)(v1 + 32), *(void *)(v1 + 40), *(void *)(v1 + 48));
}

uint64_t sub_1009F9C2C()
{
  swift_release();

  swift_release();
  swift_errorRelease();

  return _swift_deallocObject(v0, 64, 7);
}

uint64_t sub_1009F9C84()
{
  return sub_1009F9E9C((uint64_t (*)(void, void, void, void, void, void))sub_1009F6514);
}

uint64_t sub_1009F9C9C@<X0>(unsigned __int8 *a1@<X8>)
{
  return sub_100810D7C(v1, a1);
}

uint64_t sub_1009F9CB8()
{
  swift_release();
  swift_errorRelease();

  return _swift_deallocObject(v0, 48, 7);
}

uint64_t sub_1009F9D00()
{
  return sub_1009F730C(*(void **)(v0 + 16), *(uint64_t (**)(uint64_t))(v0 + 24), *(void *)(v0 + 32), *(void *)(v0 + 40));
}

uint64_t sub_1009F9D0C@<X0>(BOOL *a1@<X8>)
{
  return sub_1009F892C(v1, a1);
}

uint64_t sub_1009F9D28()
{
  swift_release();
  swift_errorRelease();
  swift_release();

  return _swift_deallocObject(v0, 56, 7);
}

uint64_t sub_1009F9D78()
{
  return sub_1009F6D6C(*(void **)(v0 + 16), *(void (**)(uint64_t))(v0 + 24), *(void *)(v0 + 32), *(void *)(v0 + 40));
}

uint64_t sub_1009F9D88(uint64_t a1)
{
  return sub_1009F7040(a1, *(void *)(v1 + 16), *(void **)(v1 + 24));
}

uint64_t sub_1009F9DA4()
{
  swift_release();
  swift_release();

  return _swift_deallocObject(v0, 40, 7);
}

uint64_t sub_1009F9DEC()
{
  uint64_t v1 = *(void **)(v0 + 32);
  Transaction.capture()();
  return sub_1009F5E58(v1);
}

uint64_t sub_1009F9E2C()
{
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();

  return _swift_deallocObject(v0, 64, 7);
}

uint64_t sub_1009F9E84()
{
  return sub_1009F9E9C((uint64_t (*)(void, void, void, void, void, void))sub_1009F52B4);
}

uint64_t sub_1009F9E9C(uint64_t (*a1)(void, void, void, void, void, void))
{
  return a1(v1[2], v1[3], v1[4], v1[5], v1[6], v1[7]);
}

uint64_t sub_1009F9EB4(uint64_t a1)
{
  return sub_100753D24(a1, *(void *)(v1 + 16), *(void *)(v1 + 24), *(void *)(v1 + 32), *(void **)(v1 + 40), *(void *)(v1 + 48), *(void *)(v1 + 56));
}

uint64_t sub_1009F9ED8(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

unsigned char *storeEnumTagSinglePayload for SecureLocationsEntitlement(unsigned char *result, int a2, int a3)
{
  if ((a3 + 1) >= 0x10000) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) < 0x100) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2)
  {
    switch(v5)
    {
      case 1:
        *uint64_t result = a2;
        return result;
      case 2:
        *(_WORD *)uint64_t result = a2;
        return result;
      case 3:
        goto LABEL_19;
      case 4:
        *(_DWORD *)uint64_t result = a2;
        return result;
      default:
        return result;
    }
  }
  switch(v5)
  {
    case 1:
      *uint64_t result = 0;
      break;
    case 2:
      *(_WORD *)uint64_t result = 0;
      break;
    case 3:
LABEL_19:
      __break(1u);
      JUMPOUT(0x1009F9FBCLL);
    case 4:
      *(_DWORD *)uint64_t result = 0;
      break;
    default:
      return result;
  }
  return result;
}

ValueMetadata *type metadata accessor for SecureLocationsEntitlement()
{
  return &type metadata for SecureLocationsEntitlement;
}

unint64_t sub_1009F9FF8()
{
  unint64_t result = qword_1016552C0;
  if (!qword_1016552C0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1016552C0);
  }
  return result;
}

unint64_t sub_1009FA050()
{
  unint64_t result = qword_1016552C8;
  if (!qword_1016552C8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1016552C8);
  }
  return result;
}

void *sub_1009FA140(void *a1, void *a2, int *a3)
{
  int v5 = *(_DWORD *)(*((void *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v19 = *a2;
    *a1 = *a2;
    a1 = (void *)(v19 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v7 = type metadata accessor for UUID();
    id v8 = *(void (**)(void *, void *, uint64_t))(*(void *)(v7 - 8) + 16);
    v8(a1, a2, v7);
    uint64_t v9 = type metadata accessor for BeaconIdentifier();
    v8((void *)((char *)a1 + *(int *)(v9 + 20)), (void *)((char *)a2 + *(int *)(v9 + 20)), v7);
    uint64_t v10 = a3[5];
    uint64_t v11 = (char *)a1 + v10;
    uint64_t v12 = (char *)a2 + v10;
    uint64_t v13 = type metadata accessor for Date();
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v13 - 8) + 16))(v11, v12, v13);
    uint64_t v14 = a3[6];
    os_log_type_t v15 = (char *)a1 + v14;
    uint64_t v16 = (char *)a2 + v14;
    unint64_t v17 = *(void *)((char *)a2 + v14 + 8);
    if (v17 >> 60 == 15)
    {
      long long v18 = *((_OWORD *)v16 + 1);
      *(_OWORD *)os_log_type_t v15 = *(_OWORD *)v16;
      *((_OWORD *)v15 + 1) = v18;
      *((_OWORD *)v15 + 2) = *((_OWORD *)v16 + 2);
    }
    else
    {
      uint64_t v20 = *(void *)v16;
      sub_1000361E0(*(void *)v16, v17);
      *(void *)os_log_type_t v15 = v20;
      *((void *)v15 + 1) = v17;
      uint64_t v21 = *((void *)v16 + 2);
      unint64_t v22 = *((void *)v16 + 3);
      sub_1000361E0(v21, v22);
      *((void *)v15 + 2) = v21;
      *((void *)v15 + 3) = v22;
      uint64_t v23 = (uint64_t *)(v16 + 32);
      unint64_t v24 = *((void *)v16 + 5);
      if (v24 >> 60 == 15)
      {
        *((_OWORD *)v15 + 2) = *(_OWORD *)v23;
      }
      else
      {
        uint64_t v25 = *v23;
        sub_1000361E0(*v23, *((void *)v16 + 5));
        *((void *)v15 + 4) = v25;
        *((void *)v15 + 5) = v24;
      }
    }
    *((unsigned char *)a1 + a3[7]) = *((unsigned char *)a2 + a3[7]);
  }
  return a1;
}

uint64_t sub_1009FA31C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for UUID();
  int v5 = *(void (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8);
  v5(a1, v4);
  uint64_t v6 = type metadata accessor for BeaconIdentifier();
  v5(a1 + *(int *)(v6 + 20), v4);
  uint64_t v7 = a1 + *(int *)(a2 + 20);
  uint64_t v8 = type metadata accessor for Date();
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v8 - 8) + 8))(v7, v8);
  uint64_t v10 = (uint64_t *)(a1 + *(int *)(a2 + 24));
  unint64_t v11 = v10[1];
  if (v11 >> 60 != 15)
  {
    sub_10001CFB8(*v10, v11);
    uint64_t result = sub_10001CFB8(v10[2], v10[3]);
    unint64_t v12 = v10[5];
    if (v12 >> 60 != 15)
    {
      uint64_t v13 = v10[4];
      return sub_10001CFB8(v13, v12);
    }
  }
  return result;
}

uint64_t sub_1009FA44C(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for UUID();
  uint64_t v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 16);
  v7(a1, a2, v6);
  uint64_t v8 = type metadata accessor for BeaconIdentifier();
  v7(a1 + *(int *)(v8 + 20), a2 + *(int *)(v8 + 20), v6);
  uint64_t v9 = a3[5];
  uint64_t v10 = a1 + v9;
  uint64_t v11 = a2 + v9;
  uint64_t v12 = type metadata accessor for Date();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v12 - 8) + 16))(v10, v11, v12);
  uint64_t v13 = a3[6];
  uint64_t v14 = a1 + v13;
  os_log_type_t v15 = (uint64_t *)(a2 + v13);
  unint64_t v16 = *(void *)(a2 + v13 + 8);
  if (v16 >> 60 == 15)
  {
    long long v17 = *((_OWORD *)v15 + 1);
    *(_OWORD *)uint64_t v14 = *(_OWORD *)v15;
    *(_OWORD *)(v14 + 16) = v17;
    *(_OWORD *)(v14 + 32) = *((_OWORD *)v15 + 2);
  }
  else
  {
    uint64_t v18 = *v15;
    sub_1000361E0(*v15, v16);
    *(void *)uint64_t v14 = v18;
    *(void *)(v14 + 8) = v16;
    uint64_t v19 = v15[2];
    unint64_t v20 = v15[3];
    sub_1000361E0(v19, v20);
    *(void *)(v14 + 16) = v19;
    *(void *)(v14 + 24) = v20;
    uint64_t v21 = v15 + 4;
    unint64_t v22 = v15[5];
    if (v22 >> 60 == 15)
    {
      *(_OWORD *)(v14 + 32) = *(_OWORD *)v21;
    }
    else
    {
      uint64_t v23 = *v21;
      sub_1000361E0(*v21, v15[5]);
      *(void *)(v14 + 32) = v23;
      *(void *)(v14 + 40) = v22;
    }
  }
  *(unsigned char *)(a1 + a3[7]) = *(unsigned char *)(a2 + a3[7]);
  return a1;
}

uint64_t sub_1009FA5D8(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for UUID();
  uint64_t v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 24);
  v7(a1, a2, v6);
  uint64_t v8 = type metadata accessor for BeaconIdentifier();
  v7(a1 + *(int *)(v8 + 20), a2 + *(int *)(v8 + 20), v6);
  uint64_t v9 = a3[5];
  uint64_t v10 = a1 + v9;
  uint64_t v11 = a2 + v9;
  uint64_t v12 = type metadata accessor for Date();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v12 - 8) + 24))(v10, v11, v12);
  uint64_t v13 = a3[6];
  uint64_t v14 = a1 + v13;
  os_log_type_t v15 = (uint64_t *)(a2 + v13);
  unint64_t v16 = *(void *)(a2 + v13 + 8);
  if (*(void *)(a1 + v13 + 8) >> 60 != 15)
  {
    if (v16 >> 60 == 15)
    {
      sub_1009FA844((uint64_t *)v14);
      long long v20 = *((_OWORD *)v15 + 1);
      long long v19 = *((_OWORD *)v15 + 2);
      *(_OWORD *)uint64_t v14 = *(_OWORD *)v15;
      *(_OWORD *)(v14 + 16) = v20;
      *(_OWORD *)(v14 + 32) = v19;
      goto LABEL_17;
    }
    uint64_t v26 = *v15;
    sub_1000361E0(*v15, v16);
    uint64_t v27 = *(void *)v14;
    unint64_t v28 = *(void *)(v14 + 8);
    *(void *)uint64_t v14 = v26;
    *(void *)(v14 + 8) = v16;
    sub_10001CFB8(v27, v28);
    uint64_t v29 = v15[2];
    unint64_t v30 = v15[3];
    sub_1000361E0(v29, v30);
    uint64_t v31 = *(void *)(v14 + 16);
    unint64_t v32 = *(void *)(v14 + 24);
    *(void *)(v14 + 16) = v29;
    *(void *)(v14 + 24) = v30;
    sub_10001CFB8(v31, v32);
    uint64_t v33 = v15 + 4;
    unint64_t v25 = v15[5];
    if (*(void *)(v14 + 40) >> 60 == 15)
    {
      if (v25 >> 60 != 15)
      {
        uint64_t v34 = *v33;
        goto LABEL_12;
      }
    }
    else
    {
      if (v25 >> 60 != 15)
      {
        uint64_t v35 = *v33;
        sub_1000361E0(*v33, v15[5]);
        uint64_t v36 = *(void *)(v14 + 32);
        unint64_t v37 = *(void *)(v14 + 40);
        *(void *)(v14 + 32) = v35;
        *(void *)(v14 + 40) = v25;
        sub_10001CFB8(v36, v37);
        goto LABEL_17;
      }
      sub_1002C0990(v14 + 32);
    }
    *(_OWORD *)(v14 + 32) = *(_OWORD *)v33;
    goto LABEL_17;
  }
  if (v16 >> 60 != 15)
  {
    uint64_t v21 = *v15;
    sub_1000361E0(*v15, v16);
    *(void *)uint64_t v14 = v21;
    *(void *)(v14 + 8) = v16;
    uint64_t v22 = v15[2];
    unint64_t v23 = v15[3];
    sub_1000361E0(v22, v23);
    *(void *)(v14 + 16) = v22;
    *(void *)(v14 + 24) = v23;
    unint64_t v24 = v15 + 4;
    unint64_t v25 = v15[5];
    if (v25 >> 60 == 15)
    {
      *(_OWORD *)(v14 + 32) = *v24;
      goto LABEL_17;
    }
    uint64_t v34 = *(void *)v24;
LABEL_12:
    sub_1000361E0(v34, v25);
    *(void *)(v14 + 32) = v34;
    *(void *)(v14 + 40) = v25;
    goto LABEL_17;
  }
  long long v17 = *(_OWORD *)v15;
  long long v18 = *((_OWORD *)v15 + 2);
  *(_OWORD *)(v14 + 16) = *((_OWORD *)v15 + 1);
  *(_OWORD *)(v14 + 32) = v18;
  *(_OWORD *)uint64_t v14 = v17;
LABEL_17:
  *(unsigned char *)(a1 + a3[7]) = *(unsigned char *)(a2 + a3[7]);
  return a1;
}

uint64_t *sub_1009FA844(uint64_t *a1)
{
  return a1;
}

uint64_t sub_1009FA874(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for UUID();
  uint64_t v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 32);
  v7(a1, a2, v6);
  uint64_t v8 = type metadata accessor for BeaconIdentifier();
  v7(a1 + *(int *)(v8 + 20), a2 + *(int *)(v8 + 20), v6);
  uint64_t v9 = a3[5];
  uint64_t v10 = a1 + v9;
  uint64_t v11 = a2 + v9;
  uint64_t v12 = type metadata accessor for Date();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v12 - 8) + 32))(v10, v11, v12);
  uint64_t v13 = a3[6];
  uint64_t v14 = a3[7];
  os_log_type_t v15 = (_OWORD *)(a1 + v13);
  unint64_t v16 = (_OWORD *)(a2 + v13);
  long long v17 = v16[1];
  *os_log_type_t v15 = *v16;
  v15[1] = v17;
  void v15[2] = v16[2];
  *(unsigned char *)(a1 + v14) = *(unsigned char *)(a2 + v14);
  return a1;
}

uint64_t sub_1009FA980(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for UUID();
  uint64_t v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 40);
  v7(a1, a2, v6);
  uint64_t v8 = type metadata accessor for BeaconIdentifier();
  v7(a1 + *(int *)(v8 + 20), a2 + *(int *)(v8 + 20), v6);
  uint64_t v9 = a3[5];
  uint64_t v10 = a1 + v9;
  uint64_t v11 = a2 + v9;
  uint64_t v12 = type metadata accessor for Date();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v12 - 8) + 40))(v10, v11, v12);
  uint64_t v13 = a3[6];
  uint64_t v14 = (uint64_t *)(a1 + v13);
  uint64_t v15 = a2 + v13;
  unint64_t v16 = *(void *)(a1 + v13 + 8);
  if (v16 >> 60 == 15) {
    goto LABEL_4;
  }
  unint64_t v17 = *(void *)(v15 + 8);
  if (v17 >> 60 == 15)
  {
    sub_1009FA844(v14);
LABEL_4:
    long long v18 = *(_OWORD *)(v15 + 16);
    *(_OWORD *)uint64_t v14 = *(_OWORD *)v15;
    *((_OWORD *)v14 + 1) = v18;
    *((_OWORD *)v14 + 2) = *(_OWORD *)(v15 + 32);
    goto LABEL_10;
  }
  uint64_t v19 = *v14;
  *uint64_t v14 = *(void *)v15;
  v14[1] = v17;
  sub_10001CFB8(v19, v16);
  uint64_t v20 = v14[2];
  unint64_t v21 = v14[3];
  *((_OWORD *)v14 + 1) = *(_OWORD *)(v15 + 16);
  sub_10001CFB8(v20, v21);
  uint64_t v22 = (uint64_t *)(v15 + 32);
  unint64_t v23 = v14[5];
  if (v23 >> 60 != 15)
  {
    unint64_t v24 = *(void *)(v15 + 40);
    if (v24 >> 60 != 15)
    {
      uint64_t v25 = v14[4];
      v14[4] = *v22;
      v14[5] = v24;
      sub_10001CFB8(v25, v23);
      goto LABEL_10;
    }
    sub_1002C0990((uint64_t)(v14 + 4));
  }
  *((_OWORD *)v14 + 2) = *(_OWORD *)v22;
LABEL_10:
  *(unsigned char *)(a1 + a3[7]) = *(unsigned char *)(a2 + a3[7]);
  return a1;
}

uint64_t sub_1009FAB30(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1009FAB44);
}

uint64_t sub_1009FAB44(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for BeaconIdentifier();
  uint64_t v7 = *(void *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == a2)
  {
    uint64_t v8 = v6;
    uint64_t v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    uint64_t v10 = a1;
  }
  else
  {
    uint64_t v11 = type metadata accessor for Date();
    uint64_t v12 = *(void *)(v11 - 8);
    if (*(_DWORD *)(v12 + 84) != a2)
    {
      unsigned int v14 = *(unsigned __int8 *)(a1 + *(int *)(a3 + 28));
      if (v14 >= 3) {
        return v14 - 2;
      }
      else {
        return 0;
      }
    }
    uint64_t v8 = v11;
    uint64_t v10 = a1 + *(int *)(a3 + 20);
    uint64_t v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v12 + 48);
  }

  return v9(v10, a2, v8);
}

uint64_t sub_1009FAC54(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1009FAC68);
}

uint64_t sub_1009FAC68(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v8 = type metadata accessor for BeaconIdentifier();
  uint64_t v9 = *(void *)(v8 - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    uint64_t v10 = v8;
    uint64_t v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    uint64_t v12 = a1;
  }
  else
  {
    uint64_t result = type metadata accessor for Date();
    uint64_t v14 = *(void *)(result - 8);
    if (*(_DWORD *)(v14 + 84) != a3)
    {
      *(unsigned char *)(a1 + *(int *)(a4 + 28)) = a2 + 2;
      return result;
    }
    uint64_t v10 = result;
    uint64_t v12 = a1 + *(int *)(a4 + 20);
    uint64_t v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v14 + 56);
  }

  return v11(v12, a2, a2, v10);
}

uint64_t type metadata accessor for KeyGenerationBeaconInfo()
{
  uint64_t result = qword_101655328;
  if (!qword_101655328) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t sub_1009FADC4()
{
  uint64_t result = type metadata accessor for BeaconIdentifier();
  if (v1 <= 0x3F)
  {
    uint64_t result = type metadata accessor for Date();
    if (v2 <= 0x3F)
    {
      swift_initStructMetadata();
      return 0;
    }
  }
  return result;
}

uint64_t destroy for KeyGenerationBeaconInfo.Keys(uint64_t *a1)
{
  sub_10001CFB8(*a1, a1[1]);
  uint64_t result = sub_10001CFB8(a1[2], a1[3]);
  unint64_t v3 = a1[5];
  if (v3 >> 60 != 15)
  {
    uint64_t v4 = a1[4];
    return sub_10001CFB8(v4, v3);
  }
  return result;
}

uint64_t initializeWithCopy for KeyGenerationBeaconInfo.Keys(uint64_t a1, uint64_t *a2)
{
  uint64_t v4 = *a2;
  unint64_t v5 = a2[1];
  sub_1000361E0(*a2, v5);
  *(void *)a1 = v4;
  *(void *)(a1 + 8) = v5;
  uint64_t v6 = a2[2];
  unint64_t v7 = a2[3];
  sub_1000361E0(v6, v7);
  *(void *)(a1 + 16) = v6;
  *(void *)(a1 + 24) = v7;
  uint64_t v8 = a2 + 4;
  unint64_t v9 = a2[5];
  if (v9 >> 60 == 15)
  {
    *(_OWORD *)(a1 + 32) = *(_OWORD *)v8;
  }
  else
  {
    uint64_t v10 = *v8;
    sub_1000361E0(*v8, v9);
    *(void *)(a1 + 32) = v10;
    *(void *)(a1 + 40) = v9;
  }
  return a1;
}

uint64_t *assignWithCopy for KeyGenerationBeaconInfo.Keys(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4 = *a2;
  unint64_t v5 = a2[1];
  sub_1000361E0(*a2, v5);
  uint64_t v6 = *a1;
  unint64_t v7 = a1[1];
  *a1 = v4;
  a1[1] = v5;
  sub_10001CFB8(v6, v7);
  uint64_t v8 = a2[2];
  unint64_t v9 = a2[3];
  sub_1000361E0(v8, v9);
  uint64_t v10 = a1[2];
  unint64_t v11 = a1[3];
  a1[2] = v8;
  a1[3] = v9;
  sub_10001CFB8(v10, v11);
  uint64_t v12 = a2 + 4;
  unint64_t v13 = a2[5];
  if ((unint64_t)a1[5] >> 60 != 15)
  {
    if (v13 >> 60 != 15)
    {
      uint64_t v15 = *v12;
      sub_1000361E0(*v12, v13);
      uint64_t v16 = a1[4];
      unint64_t v17 = a1[5];
      a1[4] = v15;
      a1[5] = v13;
      sub_10001CFB8(v16, v17);
      return a1;
    }
    sub_1002C0990((uint64_t)(a1 + 4));
    goto LABEL_6;
  }
  if (v13 >> 60 == 15)
  {
LABEL_6:
    *((_OWORD *)a1 + 2) = *(_OWORD *)v12;
    return a1;
  }
  uint64_t v14 = *v12;
  sub_1000361E0(*v12, v13);
  a1[4] = v14;
  a1[5] = v13;
  return a1;
}

uint64_t *assignWithTake for KeyGenerationBeaconInfo.Keys(uint64_t *a1, uint64_t a2)
{
  uint64_t v4 = *a1;
  unint64_t v5 = a1[1];
  *(_OWORD *)a1 = *(_OWORD *)a2;
  sub_10001CFB8(v4, v5);
  uint64_t v6 = a1[2];
  unint64_t v7 = a1[3];
  *((_OWORD *)a1 + 1) = *(_OWORD *)(a2 + 16);
  sub_10001CFB8(v6, v7);
  uint64_t v8 = (uint64_t *)(a2 + 32);
  unint64_t v9 = a1[5];
  if (v9 >> 60 != 15)
  {
    unint64_t v10 = *(void *)(a2 + 40);
    if (v10 >> 60 != 15)
    {
      uint64_t v11 = a1[4];
      a1[4] = *v8;
      a1[5] = v10;
      sub_10001CFB8(v11, v9);
      return a1;
    }
    sub_1002C0990((uint64_t)(a1 + 4));
  }
  *((_OWORD *)a1 + 2) = *(_OWORD *)v8;
  return a1;
}

ValueMetadata *type metadata accessor for KeyGenerationBeaconInfo.Keys()
{
  return &type metadata for KeyGenerationBeaconInfo.Keys;
}

uint64_t sub_1009FB128(void *a1)
{
  uint64_t v3 = v1;
  uint64_t v5 = sub_10000588C(&qword_101655390);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v8 = (char *)&v13 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10001CD44(a1, a1[3]);
  sub_1009FBEF8();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  LOBYTE(v15) = 0;
  type metadata accessor for BeaconIdentifier();
  sub_1009FC0B8(&qword_10164D2A0, (void (*)(uint64_t))type metadata accessor for BeaconIdentifier);
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  if (!v2)
  {
    uint64_t v9 = type metadata accessor for KeyGenerationBeaconInfo();
    LOBYTE(v15) = 1;
    type metadata accessor for Date();
    sub_1009FC0B8((unint64_t *)&unk_10163ACE0, (void (*)(uint64_t))&type metadata accessor for Date);
    KeyedEncodingContainer.encode<A>(_:forKey:)();
    unint64_t v10 = (long long *)(v3 + *(int *)(v9 + 24));
    long long v11 = v10[1];
    long long v15 = *v10;
    long long v16 = v11;
    long long v17 = v10[2];
    char v14 = 2;
    sub_1009FC100();
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)();
    LOBYTE(v15) = *(unsigned char *)(v3 + *(int *)(v9 + 28));
    char v14 = 3;
    sub_1009FC154();
    KeyedEncodingContainer.encode<A>(_:forKey:)();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
}

uint64_t sub_1009FB3C0@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v21 = a2;
  uint64_t v3 = type metadata accessor for Date();
  uint64_t v23 = *(void *)(v3 - 8);
  uint64_t v24 = v3;
  __chkstk_darwin(v3);
  uint64_t v5 = (char *)&v21 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = type metadata accessor for BeaconIdentifier();
  __chkstk_darwin(v6);
  uint64_t v27 = (uint64_t)&v21 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v25 = sub_10000588C(&qword_101655368);
  uint64_t v22 = *(void *)(v25 - 8);
  __chkstk_darwin(v25);
  uint64_t v9 = (char *)&v21 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  unint64_t v10 = (int *)type metadata accessor for KeyGenerationBeaconInfo();
  __chkstk_darwin(v10);
  uint64_t v12 = (char *)&v21 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10001CD44(a1, a1[3]);
  sub_1009FBEF8();
  uint64_t v26 = v9;
  uint64_t v13 = (uint64_t)v28;
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v13) {
    return _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)a1);
  }
  char v14 = v5;
  unint64_t v28 = a1;
  uint64_t v15 = v23;
  uint64_t v16 = v24;
  LOBYTE(v29) = 0;
  sub_1009FC0B8(&qword_101655378, (void (*)(uint64_t))type metadata accessor for BeaconIdentifier);
  uint64_t v17 = v25;
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  sub_1009FBF4C(v27, (uint64_t)v12);
  LOBYTE(v29) = 1;
  sub_1009FC0B8(&qword_10163ACC0, (void (*)(uint64_t))&type metadata accessor for Date);
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  (*(void (**)(char *, char *, uint64_t))(v15 + 32))(&v12[v10[5]], v14, v16);
  char v32 = 2;
  sub_1009FBFB0();
  KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
  long long v18 = &v12[v10[6]];
  long long v19 = v30;
  *(_OWORD *)long long v18 = v29;
  *((_OWORD *)v18 + 1) = v19;
  *((_OWORD *)v18 + 2) = v31;
  char v32 = 3;
  sub_1009FC004();
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  (*(void (**)(char *, uint64_t))(v22 + 8))(v26, v17);
  v12[v10[7]] = v29;
  sub_1009D07D8((uint64_t)v12, v21);
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)v28);
  return sub_1009FC058((uint64_t)v12, (uint64_t (*)(void))type metadata accessor for KeyGenerationBeaconInfo);
}

uint64_t sub_1009FB8D0(void *a1)
{
  uint64_t v3 = v1;
  uint64_t v5 = sub_10000588C(&qword_1016553B8);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v8 = (char *)&v10 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10001CD44(a1, a1[3]);
  sub_1009FC7E4();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  long long v12 = *v3;
  char v11 = 0;
  sub_10043C164();
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  if (!v2)
  {
    long long v12 = v3[1];
    char v11 = 1;
    sub_1002A89B4();
    KeyedEncodingContainer.encode<A>(_:forKey:)();
    sub_1009FC838((uint64_t)(v3 + 2), (uint64_t)v13);
    sub_1009FC838((uint64_t)v13, (uint64_t)&v12);
    char v11 = 2;
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
}

Swift::Int sub_1009FBAB0()
{
  Swift::UInt64 v1 = *v0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

void sub_1009FBAF8()
{
  Hasher._combine(_:)(*v0);
}

Swift::Int sub_1009FBB24()
{
  Swift::UInt64 v1 = *v0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

uint64_t sub_1009FBB68()
{
  return RawRepresentable<>.init(from:)();
}

uint64_t sub_1009FBBC8()
{
  return RawRepresentable<>.encode(to:)();
}

unint64_t sub_1009FBC18()
{
  unint64_t result = 0xD000000000000010;
  switch(*v0)
  {
    case 1:
      unint64_t result = 0x6574614472696170;
      break;
    case 2:
      unint64_t result = 1937335659;
      break;
    case 3:
      unint64_t result = 1701869940;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t sub_1009FBC9C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_1009FC1A8(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_1009FBCC4(uint64_t a1)
{
  unint64_t v2 = sub_1009FBEF8();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1009FBD00(uint64_t a1)
{
  unint64_t v2 = sub_1009FBEF8();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_1009FBD3C@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_1009FB3C0(a1, a2);
}

uint64_t sub_1009FBD54(void *a1)
{
  return sub_1009FB128(a1);
}

uint64_t sub_1009FBD6C()
{
  unint64_t v1 = 0x6553646572616873;
  if (*v0 != 1) {
    unint64_t v1 = 0xD000000000000015;
  }
  if (*v0) {
    return v1;
  }
  else {
    return 0x4B65746176697270;
  }
}

uint64_t sub_1009FBDD8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_1009FC340(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_1009FBE00(uint64_t a1)
{
  unint64_t v2 = sub_1009FC7E4();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1009FBE3C(uint64_t a1)
{
  unint64_t v2 = sub_1009FC7E4();

  return CodingKey.debugDescription.getter(a1, v2);
}

double sub_1009FBE78@<D0>(void *a1@<X0>, _OWORD *a2@<X8>)
{
  sub_1009FC4B8(a1, (uint64_t *)v6);
  if (!v2)
  {
    long long v5 = v6[1];
    *a2 = v6[0];
    a2[1] = v5;
    double result = *(double *)&v7;
    a2[2] = v7;
  }
  return result;
}

uint64_t sub_1009FBEBC(void *a1)
{
  return sub_1009FB8D0(a1);
}

unint64_t sub_1009FBEF8()
{
  unint64_t result = qword_101655370;
  if (!qword_101655370)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_101655370);
  }
  return result;
}

uint64_t sub_1009FBF4C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for BeaconIdentifier();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

unint64_t sub_1009FBFB0()
{
  unint64_t result = qword_101655380;
  if (!qword_101655380)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_101655380);
  }
  return result;
}

unint64_t sub_1009FC004()
{
  unint64_t result = qword_101655388;
  if (!qword_101655388)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_101655388);
  }
  return result;
}

uint64_t sub_1009FC058(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t sub_1009FC0B8(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

unint64_t sub_1009FC100()
{
  unint64_t result = qword_101655398;
  if (!qword_101655398)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_101655398);
  }
  return result;
}

unint64_t sub_1009FC154()
{
  unint64_t result = qword_1016553A0;
  if (!qword_1016553A0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1016553A0);
  }
  return result;
}

uint64_t sub_1009FC1A8(uint64_t a1, uint64_t a2)
{
  if (a1 == 0xD000000000000010 && a2 == 0x80000001013EE1B0
    || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x6574614472696170 && a2 == 0xE800000000000000 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 1937335659 && a2 == 0xE400000000000000 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else if (a1 == 1701869940 && a2 == 0xE400000000000000)
  {
    swift_bridgeObjectRelease();
    return 3;
  }
  else
  {
    char v5 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v5) {
      return 3;
    }
    else {
      return 4;
    }
  }
}

uint64_t sub_1009FC340(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 0x4B65746176697270 && a2 == 0xEA00000000007965;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x6553646572616873 && a2 == 0xEC00000074657263 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0xD000000000000015 && a2 == 0x80000001013EF3D0)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else
  {
    char v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v6) {
      return 2;
    }
    else {
      return 3;
    }
  }
}

uint64_t sub_1009FC4B8@<X0>(void *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v5 = sub_10000588C(&qword_1016553A8);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v8 = (char *)&v19 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10001CD44(a1, a1[3]);
  sub_1009FC7E4();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v2) {
    return _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)a1);
  }
  char v25 = 0;
  sub_10043C110();
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  uint64_t v22 = a2;
  uint64_t v10 = v23;
  unint64_t v9 = v24;
  char v25 = 1;
  sub_1000361E0(v23, v24);
  sub_1002A87F4();
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  uint64_t v20 = v10;
  unint64_t v21 = v9;
  char v25 = 2;
  uint64_t v11 = v23;
  unint64_t v12 = v24;
  sub_1000361E0(v23, v24);
  uint64_t v19 = 0;
  KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
  (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  uint64_t v13 = v23;
  unint64_t v14 = v24;
  uint64_t v16 = v20;
  unint64_t v15 = v21;
  sub_1000361E0(v20, v21);
  sub_1000361E0(v11, v12);
  sub_100037A38(v13, v14);
  sub_10001CFB8(v11, v12);
  sub_10001CFB8(v16, v15);
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)a1);
  sub_10001CFB8(v16, v15);
  sub_10001CFB8(v11, v12);
  uint64_t result = sub_10015AF5C(v13, v14);
  long long v18 = v22;
  uint64_t *v22 = v16;
  v18[1] = v15;
  v18[2] = v11;
  v18[3] = v12;
  v18[4] = v13;
  v18[5] = v14;
  return result;
}

unint64_t sub_1009FC7E4()
{
  unint64_t result = qword_1016553B0;
  if (!qword_1016553B0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1016553B0);
  }
  return result;
}

uint64_t sub_1009FC838(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_10000588C(&qword_10163A138);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

ValueMetadata *type metadata accessor for KeyGenerationBeaconInfo.Keys.CodingKeys()
{
  return &type metadata for KeyGenerationBeaconInfo.Keys.CodingKeys;
}

unsigned char *storeEnumTagSinglePayload for KeyGenerationBeaconInfo.CodingKeys(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 3 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 3) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFD) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFC)
  {
    unsigned int v6 = ((a2 - 253) >> 8) + 1;
    *unint64_t result = a2 + 3;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1009FC980);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 3;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for KeyGenerationBeaconInfo.CodingKeys()
{
  return &type metadata for KeyGenerationBeaconInfo.CodingKeys;
}

unsigned char *_s12searchpartyd23KeyGenerationBeaconInfoV10BeaconTypeOwst_0(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 2 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 2) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFE) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFD)
  {
    unsigned int v6 = ((a2 - 254) >> 8) + 1;
    *unint64_t result = a2 + 2;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1009FCA84);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 2;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for KeyGenerationBeaconInfo.BeaconType()
{
  return &type metadata for KeyGenerationBeaconInfo.BeaconType;
}

unint64_t sub_1009FCAC0()
{
  unint64_t result = qword_1016553C0;
  if (!qword_1016553C0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1016553C0);
  }
  return result;
}

unint64_t sub_1009FCB18()
{
  unint64_t result = qword_1016553C8;
  if (!qword_1016553C8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1016553C8);
  }
  return result;
}

unint64_t sub_1009FCB70()
{
  unint64_t result = qword_1016553D0;
  if (!qword_1016553D0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1016553D0);
  }
  return result;
}

unint64_t sub_1009FCBC8()
{
  unint64_t result = qword_1016553D8;
  if (!qword_1016553D8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1016553D8);
  }
  return result;
}

unint64_t sub_1009FCC20()
{
  unint64_t result = qword_1016553E0;
  if (!qword_1016553E0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1016553E0);
  }
  return result;
}

unint64_t sub_1009FCC78()
{
  unint64_t result = qword_1016553E8;
  if (!qword_1016553E8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1016553E8);
  }
  return result;
}

unint64_t sub_1009FCCD0()
{
  unint64_t result = qword_1016553F0;
  if (!qword_1016553F0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1016553F0);
  }
  return result;
}

unint64_t sub_1009FCD24()
{
  unint64_t result = qword_1016553F8;
  if (!qword_1016553F8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1016553F8);
  }
  return result;
}

ValueMetadata *type metadata accessor for BeaconKeyStore()
{
  return &type metadata for BeaconKeyStore;
}

uint64_t sub_1009FCD88()
{
  unint64_t v1 = *(os_unfair_lock_s **)(v0 + 32);
  uint64_t v2 = v1 + 4;
  int v3 = v1 + 5;
  os_unfair_lock_lock(v1 + 5);
  sub_1002B3D78(v2, &v6);
  os_unfair_lock_unlock(v3);
  uint64_t v4 = 0;
  if (v6 == 1)
  {
    sub_10000588C(&qword_10163CEF8);
    OSAllocatedUnfairLock.callAsFunction<A>(_:)();
    if (v6)
    {
      uint64_t v4 = *(void *)(v6 + 24);
      swift_retain();
      swift_release();
    }
    else
    {
      return 0;
    }
  }
  return v4;
}

uint64_t sub_1009FCE64()
{
  unint64_t v1 = *(os_unfair_lock_s **)(v0 + 16);
  uint64_t v2 = v1 + 4;
  int v3 = v1 + 5;
  os_unfair_lock_lock(v1 + 5);
  sub_1002B3D78(v2, &v6);
  os_unfair_lock_unlock(v3);
  uint64_t v4 = 0;
  if (v6 == 1)
  {
    sub_10000588C(&qword_10163CEF8);
    OSAllocatedUnfairLock.callAsFunction<A>(_:)();
    if (v6)
    {
      uint64_t v4 = *(void *)(v6 + 24);
      swift_retain();
      swift_release();
    }
    else
    {
      return 0;
    }
  }
  return v4;
}

uint64_t sub_1009FCF40()
{
  unint64_t v1 = *(os_unfair_lock_s **)(v0 + 24);
  uint64_t v2 = v1 + 4;
  int v3 = v1 + 5;
  os_unfair_lock_lock(v1 + 5);
  sub_1002B3D78(v2, &v6);
  os_unfair_lock_unlock(v3);
  uint64_t v4 = 0;
  if (v6 == 1)
  {
    sub_10000588C(&qword_10163CEF8);
    OSAllocatedUnfairLock.callAsFunction<A>(_:)();
    if (v6)
    {
      uint64_t v4 = *(void *)(v6 + 24);
      swift_retain();
      swift_release();
    }
    else
    {
      return 0;
    }
  }
  return v4;
}

uint64_t sub_1009FD01C(uint64_t a1, uint64_t a2)
{
  uint64_t v62 = type metadata accessor for Table();
  uint64_t v48 = *(void *)(v62 - 8);
  uint64_t v4 = __chkstk_darwin(v62);
  uint64_t v59 = (char *)&v47 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v4);
  uint64_t v51 = (char *)&v47 - v6;
  uint64_t v7 = type metadata accessor for KeyGenerationBeaconInfo();
  uint64_t v61 = *(void *)(v7 - 8);
  uint64_t v8 = __chkstk_darwin(v7 - 8);
  uint64_t v64 = (uint64_t)&v47 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8);
  uint64_t v52 = (uint64_t)&v47 - v10;
  uint64_t v11 = sub_10000588C(&qword_10163CEA8);
  uint64_t v12 = __chkstk_darwin(v11 - 8);
  unint64_t v14 = (char *)&v47 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v12);
  uint64_t v16 = (char *)&v47 - v15;
  uint64_t v17 = type metadata accessor for Row();
  uint64_t v54 = *(void *)(v17 - 8);
  uint64_t v18 = __chkstk_darwin(v17);
  uint64_t v58 = (char *)&v47 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v20 = __chkstk_darwin(v18);
  char v50 = (char *)&v47 - v21;
  __chkstk_darwin(v20);
  uint64_t v49 = (char *)&v47 - v22;
  uint64_t v23 = dispatch thunk of _AnySequenceBox._underestimatedCount.getter();
  id v65 = _swiftEmptyArrayStorage;
  sub_1000B782C(0, v23 & ~(v23 >> 63), 0);
  swift_retain();
  uint64_t v63 = dispatch thunk of _AnySequenceBox._makeIterator()();
  uint64_t result = swift_release();
  if (v23 < 0)
  {
    __break(1u);
LABEL_26:
    __break(1u);
    return result;
  }
  uint64_t v53 = v16;
  uint64_t v60 = a2;
  if (v23)
  {
    uint64_t v55 = (void (**)(char *, uint64_t, uint64_t))(v48 + 16);
    char v25 = (void (**)(char *, char *, uint64_t))(v54 + 16);
    uint64_t v56 = (void (**)(char *, uint64_t))(v54 + 8);
    id v57 = (uint64_t (**)(char *, uint64_t, uint64_t))(v54 + 48);
    do
    {
      dispatch thunk of _AnyIteratorBoxBase.next()();
      uint64_t result = (*v57)(v14, 1, v17);
      if (result == 1) {
        goto LABEL_26;
      }
      uint64_t v26 = (uint64_t)v59;
      (*v55)(v59, a2 + OBJC_IVAR____TtC12searchpartyd19ObservationDatabase_keyGenerationBeaconInfo, v62);
      uint64_t v27 = (uint64_t)v58;
      (*v25)(v58, v14, v17);
      sub_100A027C4(v26, v27, v64);
      if (v2)
      {
        swift_release();
        swift_release();
        (*v56)(v14, v17);
        return swift_release();
      }
      (*v56)(v14, v17);
      unint64_t v28 = v65;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        sub_1000B782C(0, v28[2] + 1, 1);
        unint64_t v28 = v65;
      }
      unint64_t v30 = v28[2];
      unint64_t v29 = v28[3];
      if (v30 >= v29 >> 1)
      {
        sub_1000B782C(v29 > 1, v30 + 1, 1);
        unint64_t v28 = v65;
      }
      v28[2] = v30 + 1;
      sub_1009D0904(v64, (uint64_t)v28+ ((*(unsigned __int8 *)(v61 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v61 + 80))+ *(void *)(v61 + 72) * v30);
      --v23;
      a2 = v60;
    }
    while (v23);
  }
  long long v31 = v53;
  dispatch thunk of _AnyIteratorBoxBase.next()();
  uint64_t v32 = v54;
  uint64_t v33 = *(char **)(v54 + 48);
  uint64_t v64 = v54 + 48;
  uint64_t v59 = v33;
  if (((unsigned int (*)(char *, uint64_t, uint64_t))v33)(v31, 1, v17) == 1)
  {
    uint64_t v34 = (uint64_t)v53;
LABEL_13:
    swift_release();
    sub_10001DAB4(v34, &qword_10163CEA8);
    swift_release();
    return (uint64_t)v65;
  }
  else
  {
    uint64_t v36 = *(char **)(v32 + 32);
    uint64_t v35 = v32 + 32;
    unint64_t v37 = v49;
    id v38 = (void (**)(char *, uint64_t, uint64_t))(v48 + 16);
    uint64_t v39 = (void (**)(char *, char *, uint64_t))(v35 - 16);
    uint64_t v54 = v35;
    id v57 = (uint64_t (**)(char *, uint64_t, uint64_t))(v35 - 24);
    uint64_t v58 = v36;
    uint64_t v40 = v52;
    uint64_t v34 = (uint64_t)v53;
    while (1)
    {
      ((void (*)(char *, uint64_t, uint64_t))v58)(v37, v34, v17);
      uint64_t v41 = (uint64_t)v51;
      (*v38)(v51, a2 + OBJC_IVAR____TtC12searchpartyd19ObservationDatabase_keyGenerationBeaconInfo, v62);
      uint64_t v42 = (uint64_t)v50;
      (*v39)(v50, v37, v17);
      sub_100A027C4(v41, v42, v40);
      if (v2) {
        break;
      }
      ((void (*)(char *, uint64_t))*v57)(v37, v17);
      uint64_t v43 = v65;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        sub_1000B782C(0, v43[2] + 1, 1);
        uint64_t v43 = v65;
      }
      unint64_t v45 = v43[2];
      unint64_t v44 = v43[3];
      if (v45 >= v44 >> 1)
      {
        sub_1000B782C(v44 > 1, v45 + 1, 1);
        uint64_t v43 = v65;
      }
      v43[2] = v45 + 1;
      uint64_t v40 = v52;
      sub_1009D0904(v52, (uint64_t)v43+ ((*(unsigned __int8 *)(v61 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v61 + 80))+ *(void *)(v61 + 72) * v45);
      uint64_t v34 = (uint64_t)v53;
      dispatch thunk of _AnyIteratorBoxBase.next()();
      int v46 = ((uint64_t (*)(uint64_t, uint64_t, uint64_t))v59)(v34, 1, v17);
      a2 = v60;
      if (v46 == 1) {
        goto LABEL_13;
      }
    }
    ((void (*)(char *, uint64_t))*v57)(v37, v17);
    swift_release();
    swift_release();
    return swift_release();
  }
}

uint64_t sub_1009FD71C(uint64_t a1, char a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8 = type metadata accessor for Connection.TransactionMode();
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  uint64_t v11 = (char *)v16 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = sub_1009FCF40();
  if (v12)
  {
    v16[1] = v16;
    uint64_t v13 = __chkstk_darwin(v12);
    v16[-6] = a3;
    v16[-5] = a4;
    v16[-4] = a1;
    LOBYTE(v16[-3]) = a2;
    v16[-2] = v13;
    (*(void (**)(char *, void, uint64_t))(v9 + 104))(v11, enum case for Connection.TransactionMode.deferred(_:), v8);
    Connection.transaction(_:block:)();
    (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v8);
    return swift_release();
  }
  else
  {
    sub_1001A149C();
    swift_allocError();
    *(_DWORD *)uint64_t v15 = 2;
    *(unsigned char *)(v15 + 4) = 1;
    return swift_willThrow();
  }
}

uint64_t sub_1009FD8F0(uint64_t a1)
{
  uint64_t v40 = type metadata accessor for Table();
  uint64_t v38 = *(void *)(v40 - 8);
  __chkstk_darwin(v40);
  unint64_t v37 = (char *)&v31 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v3 = sub_10000588C(&qword_10163CE70);
  uint64_t v47 = *(void (**)(char *, uint64_t))(v3 - 8);
  uint64_t v4 = __chkstk_darwin(v3);
  uint64_t v6 = (char *)&v31 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v4);
  uint64_t v8 = (char *)&v31 - v7;
  uint64_t v9 = sub_10000588C(&qword_10163CE68);
  uint64_t v33 = *(void *)(v9 - 8);
  uint64_t v34 = v9;
  uint64_t v10 = __chkstk_darwin(v9);
  uint64_t v32 = (char *)&v31 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = __chkstk_darwin(v10);
  uint64_t v42 = (char *)&v31 - v13;
  __chkstk_darwin(v12);
  uint64_t v43 = (char *)&v31 - v14;
  uint64_t v15 = a1 + OBJC_IVAR____TtC12searchpartyd19ObservationDatabase_keyGenerationBeaconInfo;
  uint64_t v35 = a1;
  uint64_t v41 = a1 + OBJC_IVAR____TtC12searchpartyd19ObservationDatabase_keyGenerationBeaconKeys;
  if (qword_101637518 != -1) {
    swift_once();
  }
  sub_100010324(v3, (uint64_t)qword_10170F4A0);
  type metadata accessor for UUID();
  uint64_t v39 = v15;
  QueryType.subscript.getter();
  QueryType.subscript.getter();
  == infix<A>(_:_:)();
  uint64_t v16 = (void (*)(char *, uint64_t))*((void *)v47 + 1);
  uint64_t v47 = (void (*)(char *, uint64_t))((char *)v47 + 8);
  v16(v6, v3);
  v16(v8, v3);
  if (qword_1016374E8 != -1) {
    swift_once();
  }
  sub_100010324(v3, (uint64_t)qword_10170F410);
  uint64_t v17 = v40;
  QueryType.subscript.getter();
  uint64_t v18 = v41;
  QueryType.subscript.getter();
  uint64_t v19 = v32;
  == infix<A>(_:_:)();
  v16(v6, v3);
  v16(v8, v3);
  uint64_t v20 = v42;
  && infix(_:_:)();
  uint64_t v21 = v34;
  uint64_t v22 = *(void (**)(char *, uint64_t))(v33 + 8);
  v22(v19, v34);
  uint64_t v47 = v22;
  v22(v20, v21);
  uint64_t v45 = v17;
  int v46 = &protocol witness table for Table;
  uint64_t v23 = sub_10001D958(v44);
  uint64_t v24 = v38;
  char v25 = *(void (**)(uint64_t *, uint64_t, uint64_t))(v38 + 16);
  v25(v23, v18, v17);
  uint64_t v26 = v37;
  uint64_t v27 = v39;
  QueryType.join(_:on:)();
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)v44);
  uint64_t v45 = v17;
  int v46 = &protocol witness table for Table;
  unint64_t v28 = sub_10001D958(v44);
  v25(v28, (uint64_t)v26, v17);
  uint64_t v29 = v36;
  sub_100A01578((uint64_t)v44, v35);
  if (v29)
  {
    (*(void (**)(char *, uint64_t))(v24 + 8))(v26, v17);
    v47(v43, v21);
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)v44);
  }
  else
  {
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)v44);
    uint64_t v27 = dispatch thunk of _AnySequenceBox.__copyToContiguousArray()();
    swift_release();
    (*(void (**)(char *, uint64_t))(v24 + 8))(v26, v17);
    v47(v43, v21);
  }
  return v27;
}

uint64_t sub_1009FDE84(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for JoinType();
  uint64_t v41 = *(void *)(v2 - 8);
  uint64_t v42 = v2;
  __chkstk_darwin(v2);
  uint64_t v40 = (char *)&v37 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = type metadata accessor for Table();
  uint64_t v46 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v43 = (char *)&v37 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = sub_10000588C(&qword_10163CE70);
  char v50 = *(void (**)(char *, uint64_t))(v6 - 8);
  uint64_t v7 = __chkstk_darwin(v6);
  uint64_t v9 = (char *)&v37 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v7);
  uint64_t v11 = (char *)&v37 - v10;
  uint64_t v49 = sub_10000588C(&qword_10163CE68);
  uint64_t v55 = *(void *)(v49 - 8);
  uint64_t v12 = __chkstk_darwin(v49);
  uint64_t v39 = (char *)&v37 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = __chkstk_darwin(v12);
  uint64_t v47 = (char *)&v37 - v15;
  __chkstk_darwin(v14);
  uint64_t v48 = (char *)&v37 - v16;
  uint64_t v17 = a1 + OBJC_IVAR____TtC12searchpartyd19ObservationDatabase_keyGenerationBeaconInfo;
  uint64_t v44 = a1;
  uint64_t v51 = a1 + OBJC_IVAR____TtC12searchpartyd19ObservationDatabase_keyGenerationBeaconKeys;
  if (qword_101637518 != -1) {
    swift_once();
  }
  sub_100010324(v6, (uint64_t)qword_10170F4A0);
  type metadata accessor for UUID();
  QueryType.subscript.getter();
  uint64_t v18 = v6;
  QueryType.subscript.getter();
  == infix<A>(_:_:)();
  uint64_t v19 = (void (*)(char *, uint64_t))*((void *)v50 + 1);
  char v50 = (void (*)(char *, uint64_t))((char *)v50 + 8);
  v19(v9, v18);
  v19(v11, v18);
  if (qword_1016374E8 != -1) {
    swift_once();
  }
  sub_100010324(v18, (uint64_t)qword_10170F410);
  uint64_t v38 = v17;
  QueryType.subscript.getter();
  QueryType.subscript.getter();
  uint64_t v20 = v39;
  == infix<A>(_:_:)();
  v19(v9, v18);
  v19(v11, v18);
  uint64_t v21 = v47;
  && infix(_:_:)();
  uint64_t v22 = v55 + 8;
  uint64_t v23 = *(void (**)(char *, uint64_t))(v55 + 8);
  uint64_t v24 = v20;
  uint64_t v25 = v49;
  v23(v24, v49);
  uint64_t v55 = v22;
  char v50 = v23;
  v23(v21, v25);
  uint64_t v26 = v40;
  uint64_t v27 = v41;
  uint64_t v28 = v42;
  (*(void (**)(char *, void, uint64_t))(v41 + 104))(v40, enum case for JoinType.leftOuter(_:), v42);
  uint64_t v53 = v4;
  uint64_t v54 = &protocol witness table for Table;
  uint64_t v29 = sub_10001D958(v52);
  uint64_t v30 = v46;
  uint64_t v31 = *(void (**)(uint64_t *, uint64_t, uint64_t))(v46 + 16);
  v31(v29, v51, v4);
  uint64_t v32 = v43;
  uint64_t v33 = v38;
  QueryType.join(_:_:on:)();
  (*(void (**)(char *, uint64_t))(v27 + 8))(v26, v28);
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)v52);
  uint64_t v53 = v4;
  uint64_t v54 = &protocol witness table for Table;
  uint64_t v34 = sub_10001D958(v52);
  v31(v34, (uint64_t)v32, v4);
  uint64_t v35 = v45;
  sub_100A01578((uint64_t)v52, v44);
  if (v35)
  {
    (*(void (**)(char *, uint64_t))(v30 + 8))(v32, v4);
    v50(v48, v49);
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)v52);
  }
  else
  {
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)v52);
    uint64_t v33 = dispatch thunk of _AnySequenceBox.__copyToContiguousArray()();
    swift_release();
    (*(void (**)(char *, uint64_t))(v30 + 8))(v32, v4);
    v50(v48, v49);
  }
  return v33;
}

uint64_t sub_1009FE4E8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for Connection.TransactionMode();
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  uint64_t v9 = (char *)v14 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = sub_1009FCF40();
  if (v10)
  {
    v14[1] = v14;
    uint64_t v11 = __chkstk_darwin(v10);
    v14[-4] = a3;
    v14[-3] = a1;
    v14[-2] = v11;
    v14[-1] = a2;
    (*(void (**)(char *, void, uint64_t))(v7 + 104))(v9, enum case for Connection.TransactionMode.deferred(_:), v6);
    Connection.transaction(_:block:)();
    (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
    return swift_release();
  }
  else
  {
    sub_1001A149C();
    swift_allocError();
    *(_DWORD *)uint64_t v13 = 2;
    *(unsigned char *)(v13 + 4) = 1;
    return swift_willThrow();
  }
}

uint64_t sub_1009FE6A8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v70 = a1;
  uint64_t v57 = a3;
  uint64_t v69 = type metadata accessor for JoinType();
  uint64_t v68 = *(void *)(v69 - 8);
  __chkstk_darwin(v69);
  uint64_t v66 = (char *)&v57 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v76 = type metadata accessor for Table();
  uint64_t v88 = *(void *)(v76 - 8);
  uint64_t v5 = __chkstk_darwin(v76);
  uint64_t v78 = (char *)&v57 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5);
  long long v71 = (char *)&v57 - v7;
  uint64_t v8 = sub_10000588C(&qword_10163CE70);
  uint64_t v83 = *(void *)(v8 - 8);
  uint64_t v9 = __chkstk_darwin(v8);
  uint64_t v11 = (char *)&v57 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9);
  long long v75 = (char *)&v57 - v12;
  uint64_t v80 = sub_10000588C(&qword_10163CE68);
  uint64_t v82 = *(void *)(v80 - 8);
  uint64_t v13 = __chkstk_darwin(v80);
  unint64_t v67 = (char *)&v57 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = __chkstk_darwin(v13);
  long long v81 = (char *)&v57 - v16;
  uint64_t v17 = __chkstk_darwin(v15);
  uint64_t v19 = (char *)&v57 - v18;
  __chkstk_darwin(v17);
  long long v77 = (char *)&v57 - v20;
  uint64_t v84 = a2 + OBJC_IVAR____TtC12searchpartyd19ObservationDatabase_keyGenerationBeaconInfo;
  uint64_t v72 = a2;
  uint64_t v79 = a2 + OBJC_IVAR____TtC12searchpartyd19ObservationDatabase_keyGenerationBeaconKeys;
  if (qword_101637518 != -1) {
    swift_once();
  }
  uint64_t v21 = sub_100010324(v8, (uint64_t)qword_10170F4A0);
  uint64_t v22 = type metadata accessor for UUID();
  uint64_t v23 = v75;
  QueryType.subscript.getter();
  uint64_t v65 = v21;
  uint64_t v24 = v22;
  QueryType.subscript.getter();
  uint64_t v25 = v19;
  == infix<A>(_:_:)();
  uint64_t v26 = v83 + 8;
  uint64_t v27 = *(void (**)(char *, uint64_t))(v83 + 8);
  v27(v11, v8);
  long long v74 = v25;
  uint64_t v83 = v26;
  v27(v23, v8);
  if (qword_1016374E8 != -1) {
    swift_once();
  }
  uint64_t v28 = sub_100010324(v8, (uint64_t)qword_10170F410);
  uint64_t v29 = v75;
  uint64_t v62 = v28;
  uint64_t v30 = v76;
  uint64_t v31 = v8;
  QueryType.subscript.getter();
  uint64_t v59 = v24;
  QueryType.subscript.getter();
  uint64_t v32 = v81;
  == infix<A>(_:_:)();
  uint64_t v61 = v31;
  v27(v11, v31);
  v27(v29, v31);
  uint64_t v33 = v74;
  && infix(_:_:)();
  uint64_t v34 = *(void (**)(char *, uint64_t))(v82 + 8);
  uint64_t v60 = v34;
  v82 += 8;
  uint64_t v35 = v32;
  uint64_t v36 = v80;
  v34(v35, v80);
  v34(v33, v36);
  uint64_t v37 = v68;
  uint64_t v38 = *(void (**)(char *, void, uint64_t))(v68 + 104);
  uint64_t v58 = v27;
  uint64_t v39 = v66;
  uint64_t v40 = v69;
  v38(v66, enum case for JoinType.leftOuter(_:), v69);
  uint64_t v86 = v30;
  long long v87 = &protocol witness table for Table;
  uint64_t v41 = sub_10001D958(v85);
  uint64_t v42 = *(void (**)(uint64_t *, char *, uint64_t))(v88 + 16);
  uint64_t v63 = v88 + 16;
  uint64_t v64 = v42;
  v42(v41, (char *)v79, v30);
  QueryType.join(_:_:on:)();
  (*(void (**)(char *, uint64_t))(v37 + 8))(v39, v40);
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)v85);
  QueryType.subscript.getter();
  == infix<A>(_:_:)();
  uint64_t v43 = v61;
  uint64_t v44 = v58;
  v58(v29, v61);
  QueryType.subscript.getter();
  type metadata accessor for BeaconIdentifier();
  uint64_t v45 = v60;
  uint64_t v46 = v67;
  == infix<A>(_:_:)();
  v44(v29, v43);
  uint64_t v47 = v74;
  uint64_t v48 = v81;
  && infix(_:_:)();
  uint64_t v49 = v46;
  uint64_t v50 = v80;
  v45(v49, v80);
  v45(v48, v50);
  uint64_t v51 = v71;
  uint64_t v52 = v78;
  QueryType.filter(_:)();
  v45(v47, v50);
  uint64_t v53 = *(void (**)(char *, uint64_t))(v88 + 8);
  v88 += 8;
  v53(v52, v30);
  uint64_t v86 = v30;
  long long v87 = &protocol witness table for Table;
  uint64_t v54 = sub_10001D958(v85);
  v64(v54, v51, v30);
  uint64_t v55 = v73;
  sub_100A01578((uint64_t)v85, v72);
  if (v55)
  {
    v53(v51, v30);
    v45(v77, v80);
    return _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)v85);
  }
  else
  {
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)v85);
    dispatch thunk of _AnySequenceBox._makeIterator()();
    swift_release();
    dispatch thunk of _AnyIteratorBoxBase.next()();
    swift_release();
    v53(v51, v30);
    return ((uint64_t (*)(char *, uint64_t))v45)(v77, v80);
  }
}

size_t sub_1009FEF74(uint64_t a1, uint64_t a2)
{
  uint64_t v51 = a1;
  uint64_t v48 = type metadata accessor for JoinType();
  uint64_t v46 = *(void *)(v48 - 8);
  __chkstk_darwin(v48);
  uint64_t v47 = (char *)&v40 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = type metadata accessor for Table();
  uint64_t v56 = *(void *)(v4 - 8);
  uint64_t v5 = __chkstk_darwin(v4);
  uint64_t v50 = (char *)&v40 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5);
  uint64_t v52 = (char *)&v40 - v7;
  uint64_t v8 = sub_10000588C(&qword_10163CE70);
  uint64_t v44 = *(void *)(v8 - 8);
  uint64_t v9 = __chkstk_darwin(v8);
  uint64_t v11 = (char *)&v40 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9);
  uint64_t v13 = (char *)&v40 - v12;
  uint64_t v49 = sub_10000588C(&qword_10163CE68);
  uint64_t v61 = *(void *)(v49 - 8);
  uint64_t v14 = __chkstk_darwin(v49);
  uint64_t v45 = (char *)&v40 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v14);
  uint64_t v17 = (char *)&v40 - v16;
  uint64_t v18 = a2 + OBJC_IVAR____TtC12searchpartyd19ObservationDatabase_keyGenerationBeaconInfo;
  uint64_t v53 = a2;
  uint64_t v19 = a2 + OBJC_IVAR____TtC12searchpartyd19ObservationDatabase_keyGenerationBeaconKeys;
  if (qword_1016374E8 != -1) {
    swift_once();
  }
  uint64_t v42 = sub_100010324(v8, (uint64_t)qword_10170F410);
  type metadata accessor for UUID();
  uint64_t v55 = v8;
  uint64_t v40 = v18;
  QueryType.subscript.getter();
  QueryType.subscript.getter();
  == infix<A>(_:_:)();
  uint64_t v57 = v17;
  uint64_t v20 = *(void (**)(char *, uint64_t))(v44 + 8);
  uint64_t v41 = v20;
  uint64_t v21 = v11;
  uint64_t v22 = v55;
  v20(v21, v55);
  v20(v13, v22);
  uint64_t v24 = v46;
  uint64_t v23 = v47;
  uint64_t v25 = v48;
  (*(void (**)(char *, void, uint64_t))(v46 + 104))(v47, enum case for JoinType.leftOuter(_:), v48);
  uint64_t v59 = v4;
  uint64_t v60 = &protocol witness table for Table;
  uint64_t v26 = sub_10001D958(v58);
  uint64_t v43 = *(void (**)(uint64_t *, uint64_t, uint64_t))(v56 + 16);
  uint64_t v44 = v56 + 16;
  v43(v26, v19, v4);
  uint64_t v27 = v50;
  QueryType.join(_:_:on:)();
  (*(void (**)(char *, uint64_t))(v24 + 8))(v23, v25);
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)v58);
  QueryType.subscript.getter();
  uint64_t v28 = v45;
  == infix<A>(_:_:)();
  v41(v13, v55);
  uint64_t v29 = v52;
  size_t v30 = (size_t)v27;
  QueryType.filter(_:)();
  uint64_t v31 = *(void (**)(char *, uint64_t))(v61 + 8);
  uint64_t v32 = v49;
  v61 += 8;
  v31(v28, v49);
  uint64_t v33 = *(void (**)(char *, uint64_t))(v56 + 8);
  v33(v27, v4);
  uint64_t v59 = v4;
  uint64_t v60 = &protocol witness table for Table;
  uint64_t v34 = sub_10001D958(v58);
  v43(v34, (uint64_t)v29, v4);
  uint64_t v35 = v54;
  sub_100A01578((uint64_t)v58, v53);
  if (v35)
  {
    v33(v29, v4);
    v31(v57, v32);
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)v58);
  }
  else
  {
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)v58);
    uint64_t v36 = v31;
    uint64_t v37 = v32;
    uint64_t v38 = dispatch thunk of _AnySequenceBox._makeIterator()();
    swift_release();
    size_t v30 = sub_100B7580C(v38);
    swift_release();
    v33(v29, v4);
    v36(v57, v37);
  }
  return v30;
}

uint64_t sub_1009FF594(void (**a1)(char *, uint64_t), uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v188 = a4;
  uint64_t v220 = a3;
  uint64_t v217 = a2;
  uint64_t v191 = sub_10000588C(&qword_101640C10);
  *(void *)&long long v178 = *(void *)(v191 - 8);
  __chkstk_darwin(v191);
  uint64_t v190 = (char *)v168 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v219 = type metadata accessor for OnConflict();
  uint64_t v177 = *(void *)(v219 - 8);
  uint64_t v6 = __chkstk_darwin(v219);
  uint64_t v200 = (char *)v168 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  uint64_t v214 = (char *)v168 - v8;
  uint64_t v202 = type metadata accessor for Insert();
  uint64_t v176 = *(void *)(v202 - 8);
  uint64_t v9 = __chkstk_darwin(v202);
  uint64_t v189 = (char *)v168 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9);
  uint64_t v215 = (char *)v168 - v11;
  uint64_t v12 = sub_10000588C(&qword_101638CF0);
  __chkstk_darwin(v12 - 8);
  *(void *)&long long v186 = (char *)v168 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v195 = type metadata accessor for Delete();
  uint64_t v181 = *(char **)(v195 - 8);
  uint64_t v14 = __chkstk_darwin(v195);
  uint64_t v182 = (void (*)(char *, uint64_t))((char *)v168 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v16 = __chkstk_darwin(v14);
  uint64_t v18 = (char *)v168 - v17;
  __chkstk_darwin(v16);
  unint64_t v184 = (unint64_t)v168 - v19;
  uint64_t v201 = type metadata accessor for KeyGenerationBeaconInfo();
  uint64_t v185 = *(void *)(v201 - 8);
  uint64_t v20 = __chkstk_darwin(v201);
  uint64_t v192 = (uint64_t)v168 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v20);
  uint64_t v23 = (char *)v168 - v22;
  uint64_t v24 = type metadata accessor for UUID();
  uint64_t v223 = *(void *)(v24 - 8);
  uint64_t v25 = __chkstk_darwin(v24);
  uint64_t v207 = (char *)v168 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v25);
  char v222 = (char *)v168 - v27;
  uint64_t v212 = (char **)sub_10000588C(&qword_10163CE68);
  uint64_t v216 = (uint64_t)*(v212 - 1);
  __chkstk_darwin(v212);
  uint64_t v29 = (char *)v168 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v30 = type metadata accessor for Table();
  uint64_t v213 = *(void *)(v30 - 8);
  uint64_t v31 = __chkstk_darwin(v30);
  uint64_t v199 = (char *)v168 - ((v32 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v33 = __chkstk_darwin(v31);
  uint64_t v203 = (char *)v168 - v34;
  uint64_t v35 = __chkstk_darwin(v33);
  uint64_t v180 = (char *)v168 - v36;
  uint64_t v37 = __chkstk_darwin(v35);
  uint64_t v39 = (char *)v168 - v38;
  __chkstk_darwin(v37);
  uint64_t v41 = (char *)v168 - v40;
  char v179 = a1;
  uint64_t v42 = (char *)a1 + OBJC_IVAR____TtC12searchpartyd19ObservationDatabase_keyGenerationBeaconInfo;
  if (qword_1016374E8 != -1) {
    swift_once();
  }
  uint64_t v196 = (uint64_t)v23;
  uint64_t v206 = (void (*)(void, void, void))v29;
  char v183 = v18;
  uint64_t v43 = sub_10000588C(&qword_10163CE70);
  uint64_t v44 = sub_100010324(v43, (uint64_t)qword_10170F410);
  uint64_t v226 = v43;
  long long v227 = (void *)sub_100062734(&qword_10163CFA8, &qword_10163CE70);
  uint64_t v45 = sub_10001D958(&v224);
  uint64_t v46 = *(void (**)(uint64_t *, uint64_t, uint64_t))(*(void *)(v43 - 8) + 16);
  uint64_t v218 = v44;
  v46(v45, v44, v43);
  uint64_t v211 = v42;
  SchemaType.select(_:_:)();
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)&v224);
  uint64_t v47 = (uint64_t)v39;
  if (qword_101637518 != -1) {
    swift_once();
  }
  uint64_t v48 = sub_100010324(v43, (uint64_t)qword_10170F4A0);
  uint64_t v49 = v206;
  uint64_t v210 = v48;
  == infix<A>(_:_:)();
  QueryType.filter(_:)();
  uint64_t v50 = v41;
  uint64_t v51 = v216 + 8;
  char v197 = *(void (**)(void, void))(v216 + 8);
  v197(v49, v212);
  uint64_t v52 = v213;
  uint64_t v53 = v213 + 8;
  uint64_t v54 = *(void (**)(uint64_t, uint64_t))(v213 + 8);
  uint64_t v198 = v47;
  v54(v47, v30);
  uint64_t v226 = v30;
  long long v227 = &protocol witness table for Table;
  uint64_t v55 = sub_10001D958(&v224);
  uint64_t v56 = *(void (**)(uint64_t *, char *, uint64_t))(v52 + 16);
  char v194 = v50;
  v56(v55, v50, v30);
  uint64_t v57 = v228;
  Connection.prepare(_:)();
  if (v57)
  {
    v54((uint64_t)v194, v30);
    return _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)&v224);
  }
  uint64_t v205 = v53;
  uint64_t v204 = v54;
  uint64_t v216 = v51;
  uint64_t v193 = (void (*)(char *, char *, uint64_t))v56;
  uint64_t v213 = v52 + 16;
  uint64_t v208 = v30;
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)&v224);
  uint64_t v59 = dispatch thunk of _AnySequenceBox._map<A>(_:)();
  uint64_t v221 = 0;
  uint64_t v60 = v59;
  swift_release();
  uint64_t v61 = sub_101158244(v60);
  swift_bridgeObjectRelease();
  uint64_t v62 = v188;
  int64_t v63 = *(void *)(v188 + 16);
  uint64_t v64 = _swiftEmptyArrayStorage;
  uint64_t v228 = v24;
  uint64_t v65 = v196;
  int64_t v209 = v63;
  if (v63)
  {
    char v187 = (void *)v61;
    uint64_t v224 = (uint64_t)_swiftEmptyArrayStorage;
    int64_t v66 = v63;
    sub_1000B7034(0, v63, 0);
    uint64_t v67 = v62 + ((*(unsigned __int8 *)(v185 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v185 + 80));
    uint64_t v68 = *(void *)(v185 + 72);
    uint64_t v69 = v222;
    uint64_t v70 = (void (**)(char *, uint64_t, uint64_t))(v223 + 16);
    do
    {
      sub_1009D07D8(v67, v65);
      uint64_t v71 = type metadata accessor for BeaconIdentifier();
      (*v70)(v69, v65 + *(int *)(v71 + 20), v24);
      sub_1009D08A8(v65);
      uint64_t v64 = (void *)v224;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        sub_1000B7034(0, v64[2] + 1, 1);
        uint64_t v64 = (void *)v224;
      }
      unint64_t v73 = v64[2];
      unint64_t v72 = v64[3];
      if (v73 >= v72 >> 1)
      {
        sub_1000B7034(v72 > 1, v73 + 1, 1);
        uint64_t v64 = (void *)v224;
      }
      v64[2] = v73 + 1;
      uint64_t v69 = v222;
      unint64_t v74 = (unint64_t)v64
          + ((*(unsigned __int8 *)(v223 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v223 + 80))
          + *(void *)(v223 + 72) * v73;
      uint64_t v24 = v228;
      (*(void (**)(unint64_t, char *, uint64_t))(v223 + 32))(v74, v222, v228);
      uint64_t v224 = (uint64_t)v64;
      v67 += v68;
      --v66;
    }
    while (v66);
    uint64_t v61 = (uint64_t)v187;
  }
  uint64_t v75 = sub_101158244((uint64_t)v64);
  swift_bridgeObjectRelease();
  uint64_t v76 = v208;
  long long v77 = v206;
  if (*(void *)(v75 + 16) > *(void *)(v61 + 16) >> 3)
  {
    uint64_t v78 = sub_1008A160C(v75, v61);
    swift_bridgeObjectRelease();
    if (!v78[2]) {
      goto LABEL_21;
    }
  }
  else
  {
    uint64_t v224 = v61;
    sub_10089EA08(v75);
    swift_bridgeObjectRelease();
    uint64_t v78 = (void *)v224;
    if (!*(void *)(v224 + 16))
    {
LABEL_21:
      swift_bridgeObjectRelease();
      uint64_t v86 = v188;
      uint64_t v87 = v221;
      uint64_t v88 = (uint64_t (*)(char *, uint64_t))v204;
      int64_t v89 = v209;
      if (!v209) {
        goto LABEL_83;
      }
      goto LABEL_22;
    }
  }
  == infix<A>(_:_:)();
  uint64_t v79 = v180;
  QueryType.filter(_:)();
  uint64_t v80 = v197;
  v197(v77, v212);
  char v187 = v78;
  uint64_t v224 = (uint64_t)v78;
  sub_10000588C((uint64_t *)&unk_101653DC0);
  sub_100062734(&qword_10163D018, (uint64_t *)&unk_101653DC0);
  Collection<>.contains(_:)();
  uint64_t v81 = v198;
  QueryType.filter(_:)();
  v80(v77, v212);
  uint64_t v82 = v204;
  v204((uint64_t)v79, v76);
  unint64_t v83 = v184;
  QueryType.delete()();
  v82(v81, v76);
  uint64_t v84 = v221;
  Connection.run(_:)();
  int64_t v85 = v84;
  if (v84)
  {
    swift_bridgeObjectRelease();
    (*((void (**)(unint64_t, uint64_t))v181 + 1))(v83, v195);
    return ((uint64_t (*)(char *, uint64_t))v82)(v194, v76);
  }
  uint64_t v221 = 0;
  uint64_t v128 = v187[7];
  uint64_t v170 = (char *)(v187 + 7);
  uint64_t v129 = 1 << *((unsigned char *)v187 + 32);
  uint64_t v130 = -1;
  if (v129 < 64) {
    uint64_t v130 = ~(-1 << v129);
  }
  unint64_t v131 = v130 & v128;
  v168[2] = (char *)v179 + OBJC_IVAR____TtC12searchpartyd19ObservationDatabase_observedAdvertisementBeaconInfo;
  v168[1] = (char *)v179 + OBJC_IVAR____TtC12searchpartyd19ObservationDatabase_keySyncMetadata;
  int64_t v171 = (unint64_t)(v129 + 63) >> 6;
  uint64_t v175 = v223 + 16;
  uint64_t v180 = (char *)(v223 + 56);
  uint64_t v174 = v223 + 48;
  uint64_t v173 = (void (**)(char *, uint64_t, uint64_t))(v223 + 32);
  uint64_t v172 = (void (**)(char *, uint64_t))(v223 + 8);
  uint64_t v169 = (char **)(v181 + 8);
  uint64_t v132 = v186;
  uint64_t v88 = (uint64_t (*)(char *, uint64_t))v82;
  while (1)
  {
    if (v131)
    {
      char v222 = (char *)((v131 - 1) & v131);
      unint64_t v134 = __clz(__rbit64(v131)) | (v85 << 6);
      goto LABEL_61;
    }
    if (__OFADD__(v85++, 1))
    {
      __break(1u);
      goto LABEL_86;
    }
    if (v85 >= v171)
    {
      uint64_t v137 = v228;
LABEL_81:
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))v180)(v132, 1, 1, v137);
      swift_release();
      uint64_t v86 = v188;
      uint64_t v158 = v195;
      unint64_t v159 = v184;
      uint64_t v87 = v221;
LABEL_82:
      ((void (*)(unint64_t, uint64_t))*v169)(v159, v158);
      int64_t v89 = v209;
      if (!v209)
      {
LABEL_83:
        uint64_t v157 = v194;
        return v88(v157, v76);
      }
LABEL_22:
      uint64_t v181 = (char *)v179 + OBJC_IVAR____TtC12searchpartyd19ObservationDatabase_keyGenerationBeaconKeys;
      uint64_t v90 = v86 + ((*(unsigned __int8 *)(v185 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v185 + 80));
      LODWORD(v222) = enum case for OnConflict.replace(_:);
      uint64_t v216 = v177 + 104;
      uint64_t v212 = (char **)(v177 + 8);
      uint64_t v180 = (char *)(v178 + 16);
      char v179 = (void (**)(char *, uint64_t))(v178 + 8);
      char v187 = (void *)(v176 + 8);
      uint64_t v185 = *(void *)(v185 + 72);
      swift_bridgeObjectRetain();
      long long v186 = xmmword_10134BF90;
      long long v178 = xmmword_10134CDE0;
      uint64_t v91 = v192;
      while (1)
      {
        int64_t v209 = v89;
        uint64_t v221 = v87;
        uint64_t v223 = v90;
        sub_1009D07D8(v90, v91);
        uint64_t v206 = *(void (**)(void, void, void))v216;
        v206(v214, v222, v219);
        uint64_t v92 = sub_10000588C(&qword_10163CF10);
        uint64_t v93 = *(void *)(type metadata accessor for Setter() - 8);
        uint64_t v94 = *(void *)(v93 + 72);
        uint64_t v95 = *(unsigned __int8 *)(v93 + 80);
        uint64_t v96 = (v95 + 32) & ~v95;
        uint64_t v207 = (char *)(4 * v94);
        uint64_t v203 = (char *)v92;
        uint64_t v195 = v95 | 7;
        *(_OWORD *)(swift_allocObject() + 16) = v186;
        uint64_t v198 = v96;
        <- infix<A>(_:_:)();
        char v197 = (void (*)(void, void))(v91 + *(int *)(type metadata accessor for BeaconIdentifier() + 20));
        <- infix<A>(_:_:)();
        if (qword_101637520 != -1) {
          swift_once();
        }
        uint64_t v196 = 2 * v94;
        uint64_t v97 = sub_10000588C(&qword_10163CE98);
        sub_100010324(v97, (uint64_t)qword_10170F4B8);
        uint64_t v98 = v201;
        uint64_t v99 = v91;
        type metadata accessor for Date();
        <- infix<A>(_:_:)();
        if (qword_101637538 != -1) {
          swift_once();
        }
        uint64_t v100 = sub_10000588C(&qword_10163CEC8);
        sub_100010324(v100, (uint64_t)qword_10170F500);
        uint64_t v224 = *(unsigned __int8 *)(v91 + *(int *)(v98 + 28));
        sub_1001A1544();
        <- infix<A>(_:_:)();
        uint64_t v101 = v214;
        uint64_t v76 = v208;
        QueryType.insert(or:_:)();
        swift_bridgeObjectRelease();
        uint64_t v102 = *v212;
        ((void (*)(char *, uint64_t))*v212)(v101, v219);
        uint64_t v103 = v221;
        Connection.run(_:)();
        uint64_t v87 = v103;
        if (v103)
        {
          ((void (*)(char *, uint64_t))*v187)(v215, v202);
          sub_1009D08A8(v99);
          swift_bridgeObjectRelease();
          return ((uint64_t (*)(char *, uint64_t))v204)(v194, v76);
        }
        uint64_t v104 = (uint64_t *)(v99 + *(int *)(v98 + 24));
        unint64_t v105 = v104[1];
        if (v105 >> 60 == 15)
        {
          ((void (*)(char *, uint64_t))*v187)(v215, v202);
          uint64_t v88 = (uint64_t (*)(char *, uint64_t))v204;
        }
        else
        {
          uint64_t v182 = (void (*)(char *, uint64_t))v102;
          uint64_t v221 = 0;
          uint64_t v106 = *v104;
          uint64_t v107 = v76;
          uint64_t v108 = v104[2];
          unint64_t v109 = v104[3];
          uint64_t v110 = v104[4];
          unint64_t v111 = v104[5];
          v193(v199, v181, v107);
          v206(v200, v222, v219);
          uint64_t v112 = swift_allocObject();
          *(_OWORD *)(v112 + 16) = v178;
          char v183 = (char *)v112;
          uint64_t v198 = v106;
          sub_1000361E0(v106, v105);
          uint64_t v203 = (char *)v108;
          uint64_t v206 = (void (*)(void, void, void))v109;
          sub_1000361E0(v108, v109);
          uint64_t v195 = v110;
          unint64_t v184 = v111;
          sub_100037A38(v110, v111);
          <- infix<A>(_:_:)();
          <- infix<A>(_:_:)();
          if (qword_101637528 != -1) {
            swift_once();
          }
          uint64_t v113 = sub_10000588C(&qword_10163CF58);
          sub_100010324(v113, (uint64_t)qword_10170F4D0);
          uint64_t v224 = v198;
          long long v225 = (void (*)(void, void, void))v105;
          char v197 = (void (*)(void, void))v105;
          <- infix<A>(_:_:)();
          uint64_t v114 = v182;
          if (qword_101637508 != -1) {
            swift_once();
          }
          sub_100010324(v113, (uint64_t)qword_10170F470);
          uint64_t v224 = (uint64_t)v203;
          long long v225 = v206;
          <- infix<A>(_:_:)();
          if (qword_101637530 != -1) {
            swift_once();
          }
          uint64_t v115 = v191;
          uint64_t v116 = sub_100010324(v191, (uint64_t)qword_10170F4E8);
          uint64_t v117 = v190;
          (*(void (**)(char *, uint64_t, uint64_t))v180)(v190, v116, v115);
          uint64_t v118 = v184;
          uint64_t v119 = v195;
          if (v184 >> 60 == 15) {
            uint64_t v120 = 0;
          }
          else {
            uint64_t v120 = v195;
          }
          if (v184 >> 60 == 15) {
            unint64_t v121 = 0xF000000000000000;
          }
          else {
            unint64_t v121 = v184;
          }
          uint64_t v224 = v120;
          long long v225 = (void (*)(void, void, void))v121;
          <- infix<A>(_:_:)();
          (*v179)(v117, v115);
          uint64_t v122 = v189;
          uint64_t v123 = v200;
          uint64_t v76 = v208;
          uint64_t v124 = v199;
          QueryType.insert(or:_:)();
          swift_bridgeObjectRelease();
          v114(v123, v219);
          uint64_t v88 = (uint64_t (*)(char *, uint64_t))v204;
          v204((uint64_t)v124, v76);
          uint64_t v125 = v221;
          Connection.run(_:)();
          if (v125)
          {
            sub_100A03580(v198, (unint64_t)v197, (uint64_t)v203, (uint64_t)v206, v119, v118, (void (*)(void))sub_10001CFB8, (void (*)(uint64_t, uint64_t))sub_10015AF5C);
            uint64_t v160 = (void (*)(char *, uint64_t))*v187;
            uint64_t v161 = v202;
            ((void (*)(char *, uint64_t))*v187)(v122, v202);
            v160(v215, v161);
            sub_1009D08A8(v192);
            swift_bridgeObjectRelease();
            return v88(v194, v76);
          }
          sub_100A03580(v198, (unint64_t)v197, (uint64_t)v203, (uint64_t)v206, v119, v118, (void (*)(void))sub_10001CFB8, (void (*)(uint64_t, uint64_t))sub_10015AF5C);
          long long v126 = (void (*)(char *, uint64_t))*v187;
          uint64_t v127 = v202;
          ((void (*)(char *, uint64_t))*v187)(v122, v202);
          v126(v215, v127);
          uint64_t v99 = v192;
          uint64_t v87 = 0;
        }
        sub_1009D08A8(v99);
        uint64_t v90 = v223 + v185;
        int64_t v89 = v209 - 1;
        uint64_t v91 = v99;
        if (v209 == 1)
        {
          swift_bridgeObjectRelease();
          uint64_t v157 = v194;
          return v88(v157, v76);
        }
      }
    }
    unint64_t v136 = *(void *)&v170[8 * v85];
    uint64_t v137 = v228;
    if (!v136) {
      break;
    }
LABEL_60:
    char v222 = (char *)((v136 - 1) & v136);
    unint64_t v134 = __clz(__rbit64(v136)) + (v85 << 6);
LABEL_61:
    uint64_t v139 = v223;
    uint64_t v140 = v228;
    (*(void (**)(uint64_t, unint64_t, uint64_t))(v223 + 16))(v132, v187[6] + *(void *)(v223 + 72) * v134, v228);
    (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v139 + 56))(v132, 0, 1, v140);
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v139 + 48))(v132, 1, v140) == 1)
    {
      swift_release();
      uint64_t v86 = v188;
      uint64_t v158 = v195;
      unint64_t v159 = v184;
      uint64_t v87 = v221;
      goto LABEL_82;
    }
    uint64_t v196 = v85;
    (*v173)(v207, v132, v140);
    uint64_t v141 = v206;
    == infix<A>(_:_:)();
    uint64_t v142 = v88;
    uint64_t v143 = v198;
    QueryType.filter(_:)();
    v197(v141, v212);
    uint64_t v144 = (uint64_t)v203;
    QueryType.limit(_:)();
    uint64_t v145 = v143;
    uint64_t v88 = v142;
    v142((char *)v145, v76);
    uint64_t v226 = v76;
    long long v227 = &protocol witness table for Table;
    uint64_t v146 = sub_10001D958(&v224);
    v193((char *)v146, (char *)v144, v76);
    uint64_t v147 = v221;
    Connection.prepare(_:)();
    uint64_t v221 = v147;
    if (v147)
    {
      v142(v203, v76);
      (*v172)(v207, v228);
      swift_release();
      ((void (*)(unint64_t, uint64_t))*v169)(v184, v195);
      v142(v194, v76);
      return _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)&v224);
    }
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)&v224);
    uint64_t v148 = dispatch thunk of _AnySequenceBox.__copyToContiguousArray()();
    swift_release();
    if (*(void *)(v148 + 16))
    {
      swift_release();
    }
    else
    {
      == infix<A>(_:_:)();
      uint64_t v149 = (void (*)(uint64_t, uint64_t))v88;
      uint64_t v150 = v198;
      QueryType.filter(_:)();
      char v151 = v197;
      v197(v141, v212);
      uint64_t v152 = v183;
      QueryType.delete()();
      v149(v150, v76);
      uint64_t v153 = v221;
      Connection.run(_:)();
      uint64_t v221 = v153;
      if (v153)
      {
        swift_release();
        uint64_t v162 = *v169;
        char v163 = v152;
        uint64_t v164 = v195;
        ((void (*)(char *, uint64_t))*v169)(v163, v195);
        v149((uint64_t)v203, v76);
        (*v172)(v207, v228);
        swift_release();
        ((void (*)(unint64_t, uint64_t))v162)(v184, v164);
        return ((uint64_t (*)(char *, uint64_t))v149)(v194, v76);
      }
      uint64_t v154 = v195;
      uint64_t v181 = *v169;
      ((void (*)(char *, uint64_t))v181)(v152, v195);
      swift_release();
      == infix<A>(_:_:)();
      QueryType.filter(_:)();
      v151(v141, v212);
      char v155 = v182;
      QueryType.delete()();
      v204(v150, v76);
      uint64_t v156 = v221;
      Connection.run(_:)();
      uint64_t v221 = v156;
      if (v156)
      {
        uint64_t v165 = v181;
        ((void (*)(void, uint64_t))v181)(v155, v154);
        uint64_t v166 = v208;
        char v167 = (uint64_t (*)(char *, uint64_t))v204;
        v204((uint64_t)v203, v208);
        (*v172)(v207, v228);
        swift_release();
        ((void (*)(unint64_t, uint64_t))v165)(v184, v154);
        return v167(v194, v166);
      }
      ((void (*)(void, uint64_t))v181)(v155, v154);
      uint64_t v76 = v208;
      uint64_t v88 = (uint64_t (*)(char *, uint64_t))v204;
      uint64_t v132 = v186;
    }
    uint64_t v133 = v207;
    v88(v203, v76);
    (*v172)(v133, v228);
    int64_t v85 = v196;
    unint64_t v131 = (unint64_t)v222;
  }
  int64_t v138 = v85 + 1;
  if (v85 + 1 >= v171) {
    goto LABEL_81;
  }
  unint64_t v136 = *(void *)&v170[8 * v138];
  if (v136) {
    goto LABEL_59;
  }
  int64_t v138 = v85 + 2;
  if (v85 + 2 >= v171) {
    goto LABEL_81;
  }
  unint64_t v136 = *(void *)&v170[8 * v138];
  if (v136) {
    goto LABEL_59;
  }
  int64_t v138 = v85 + 3;
  if (v85 + 3 >= v171) {
    goto LABEL_81;
  }
  unint64_t v136 = *(void *)&v170[8 * v138];
  if (v136)
  {
LABEL_59:
    int64_t v85 = v138;
    goto LABEL_60;
  }
  while (1)
  {
    int64_t v85 = v138 + 1;
    if (__OFADD__(v138, 1)) {
      break;
    }
    if (v85 >= v171) {
      goto LABEL_81;
    }
    unint64_t v136 = *(void *)&v170[8 * v85];
    ++v138;
    if (v136) {
      goto LABEL_60;
    }
  }
LABEL_86:
  __break(1u);
  uint64_t v224 = v221;
  sub_10000588C(&qword_101638D40);
  swift_dynamicCast();
  uint64_t result = swift_willThrowTypedImpl();
  __break(1u);
  return result;
}

uint64_t sub_100A01578(uint64_t a1, uint64_t a2)
{
  if (sub_10018DC68())
  {
    Connection.prepare(_:)();
    if (v2)
    {
      return swift_release();
    }
    else
    {
      swift_retain();
      uint64_t v6 = swift_retain();
      uint64_t v7 = sub_1009FD01C(v6, a2);
      swift_release();
      swift_release_n();
      sub_10000588C(&qword_101655418);
      uint64_t result = swift_allocObject();
      *(void *)(result + 16) = v7;
    }
  }
  else
  {
    sub_1001A149C();
    swift_allocError();
    *(_DWORD *)uint64_t v5 = 2;
    *(unsigned char *)(v5 + 4) = 1;
    return swift_willThrow();
  }
  return result;
}

uint64_t sub_100A01678(uint64_t a1, uint64_t a2, uint64_t a3, int a4, uint64_t a5)
{
  uint64_t v6 = v5;
  uint64_t v45 = a5;
  int v44 = a4;
  uint64_t v10 = type metadata accessor for OnConflict();
  uint64_t v11 = *(void *)(v10 - 8);
  __chkstk_darwin(v10);
  uint64_t v13 = (char *)v31 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v42 = type metadata accessor for Insert();
  uint64_t v14 = *(void *)(v42 - 8);
  uint64_t result = __chkstk_darwin(v42);
  uint64_t v43 = (char *)v31 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (*(void *)(a1 + 16))
  {
    uint64_t v46 = *(void *)(a1 + 16);
    uint64_t v17 = *(int *)(type metadata accessor for BeaconIdentifier() + 20);
    uint64_t v41 = a3;
    uint64_t v38 = a3 + v17;
    uint64_t v37 = a2 + OBJC_IVAR____TtC12searchpartyd19ObservationDatabase_keyGenerationHint;
    unsigned int v36 = enum case for OnConflict.replace(_:);
    uint64_t v19 = *(void (**)(char *, void, uint64_t))(v11 + 104);
    uint64_t v18 = v11 + 104;
    uint64_t v34 = (void (**)(char *, uint64_t))(v18 - 96);
    uint64_t v35 = v19;
    uint64_t v32 = (void (**)(char *, uint64_t))(v14 + 8);
    swift_bridgeObjectRetain();
    v31[1] = a1;
    uint64_t v20 = (unint64_t *)(a1 + 48);
    long long v33 = xmmword_10134CDE0;
    uint64_t v40 = v10;
    v31[2] = v18;
    uint64_t v39 = v13;
    while (1)
    {
      uint64_t v52 = v6;
      uint64_t v21 = *(v20 - 1);
      uint64_t v47 = *(v20 - 2);
      unint64_t v22 = *v20;
      v35(v13, v36, v10);
      sub_10000588C(&qword_10163CF10);
      type metadata accessor for Setter();
      *(_OWORD *)(swift_allocObject() + 16) = v33;
      uint64_t v48 = v21;
      unint64_t v49 = v22;
      sub_1000361E0(v21, v22);
      if (qword_101637518 != -1) {
        swift_once();
      }
      uint64_t v23 = sub_10000588C(&qword_10163CE70);
      sub_100010324(v23, (uint64_t)qword_10170F4A0);
      type metadata accessor for UUID();
      <- infix<A>(_:_:)();
      if (qword_1016374E8 != -1) {
        swift_once();
      }
      sub_100010324(v23, (uint64_t)qword_10170F410);
      <- infix<A>(_:_:)();
      if (qword_1016374F8 != -1) {
        swift_once();
      }
      uint64_t v24 = sub_10000588C(&qword_10163CE78);
      sub_100010324(v24, (uint64_t)qword_10170F440);
      LOBYTE(v50) = v44;
      sub_1001A1448();
      <- infix<A>(_:_:)();
      uint64_t v13 = v39;
      unint64_t v25 = v49;
      if (qword_1016374F0 != -1) {
        swift_once();
      }
      uint64_t v26 = sub_10000588C(&qword_10163CEC8);
      sub_100010324(v26, (uint64_t)qword_10170F428);
      uint64_t v50 = v47;
      sub_1001A1544();
      <- infix<A>(_:_:)();
      if (qword_101637508 != -1) {
        swift_once();
      }
      uint64_t v27 = sub_10000588C(&qword_10163CF58);
      sub_100010324(v27, (uint64_t)qword_10170F470);
      uint64_t v28 = v48;
      uint64_t v50 = v48;
      unint64_t v51 = v25;
      <- infix<A>(_:_:)();
      type metadata accessor for Table();
      uint64_t v29 = v43;
      QueryType.insert(or:_:)();
      swift_bridgeObjectRelease();
      uint64_t v10 = v40;
      (*v34)(v13, v40);
      uint64_t v30 = v52;
      Connection.run(_:)();
      uint64_t v6 = v30;
      if (v30) {
        break;
      }
      v20 += 3;
      (*v32)(v29, v42);
      sub_10001CFB8(v28, v25);
      if (!--v46) {
        return swift_bridgeObjectRelease();
      }
    }
    sub_10001CFB8(v28, v25);
    (*v32)(v29, v42);
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t sub_100A01C50()
{
  uint64_t v1 = sub_10000588C(&qword_10163CEA8);
  uint64_t v2 = __chkstk_darwin(v1 - 8);
  uint64_t v4 = (char *)v70 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v2);
  unint64_t v72 = (char *)v70 - v5;
  uint64_t v6 = type metadata accessor for Row();
  uint64_t v76 = *(void *)(v6 - 8);
  uint64_t v7 = __chkstk_darwin(v6);
  uint64_t v9 = (char *)v70 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = __chkstk_darwin(v7);
  uint64_t v71 = (char *)v70 - v11;
  __chkstk_darwin(v10);
  long long v77 = (char *)v70 - v12;
  uint64_t v13 = sub_10018DC68();
  if (!v13)
  {
    sub_1001A149C();
    swift_allocError();
    *(_DWORD *)uint64_t v16 = 2;
    *(unsigned char *)(v16 + 4) = 1;
    return swift_willThrow();
  }
  uint64_t v14 = v13;
  uint64_t v15 = Connection.prepare(_:)();
  if (v0) {
    return swift_release();
  }
  uint64_t v18 = v15;
  v70[0] = 0;
  v70[1] = v14;
  uint64_t v78 = v6;
  swift_retain();
  uint64_t v19 = dispatch thunk of _AnySequenceBox._underestimatedCount.getter();
  uint64_t v82 = _swiftEmptyArrayStorage;
  sub_1000B7A7C(0, v19 & ~(v19 >> 63), 0);
  swift_retain();
  uint64_t v79 = dispatch thunk of _AnySequenceBox._makeIterator()();
  v70[2] = v18;
  swift_release();
  if (v19 < 0) {
    goto LABEL_67;
  }
  uint64_t v20 = v78;
  if (v19)
  {
    unint64_t v74 = (void (**)(char *, char *, uint64_t))(v76 + 16);
    uint64_t v75 = (unsigned int (**)(char *, uint64_t, uint64_t))(v76 + 48);
    unint64_t v73 = (void (**)(char *, uint64_t))(v76 + 8);
    while (1)
    {
      dispatch thunk of _AnyIteratorBoxBase.next()();
      if ((*v75)(v4, 1, v20) == 1) {
        goto LABEL_72;
      }
      (*v74)(v9, v4, v20);
      if (qword_1016374F0 != -1) {
        swift_once();
      }
      uint64_t v21 = sub_10000588C(&qword_10163CEC8);
      sub_100010324(v21, (uint64_t)qword_10170F428);
      sub_1001A1544();
      Row.subscript.getter();
      uint64_t v22 = v80;
      if (qword_101637508 != -1) {
        swift_once();
      }
      uint64_t v23 = sub_10000588C(&qword_10163CF58);
      sub_100010324(v23, (uint64_t)qword_10170F470);
      Row.subscript.getter();
      uint64_t v24 = v80;
      unint64_t v25 = v81;
      unint64_t v26 = v81 >> 62;
      switch(v81 >> 62)
      {
        case 1uLL:
          LODWORD(v27) = HIDWORD(v80) - v80;
          if (__OFSUB__(HIDWORD(v80), v80))
          {
            __break(1u);
LABEL_64:
            __break(1u);
LABEL_65:
            __break(1u);
LABEL_66:
            __break(1u);
LABEL_67:
            __break(1u);
            goto LABEL_68;
          }
          uint64_t v27 = (int)v27;
LABEL_18:
          if (v27 != 32)
          {
            if (!v26)
            {
              uint64_t v56 = BYTE6(v81);
              goto LABEL_55;
            }
            if (v26 == 1)
            {
              if (!__OFSUB__(HIDWORD(v80), v80))
              {
                uint64_t v56 = HIDWORD(v80) - (int)v80;
LABEL_55:
                sub_10013019C();
                swift_allocError();
                *(void *)uint64_t v60 = 32;
                *(void *)(v60 + 8) = v56;
                *(unsigned char *)(v60 + 16) = 0;
                swift_willThrow();
                sub_10001CFB8(v24, v25);
                uint64_t v61 = *v73;
                uint64_t v62 = v9;
                uint64_t v63 = v78;
                (*v73)(v62, v78);
                swift_release();
                swift_release();
                v61(v4, v63);
                swift_release();
                goto LABEL_61;
              }
LABEL_68:
              __break(1u);
            }
            else
            {
              uint64_t v59 = *(void *)(v80 + 16);
              uint64_t v58 = *(void *)(v80 + 24);
              uint64_t v56 = v58 - v59;
              if (!__OFSUB__(v58, v59)) {
                goto LABEL_55;
              }
            }
            __break(1u);
            goto LABEL_70;
          }
          uint64_t v31 = *v73;
          (*v73)(v9, v20);
          v31(v4, v20);
          uint64_t v32 = v82;
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
          {
            sub_1000B7A7C(0, v32[2] + 1, 1);
            uint64_t v32 = v82;
          }
          unint64_t v34 = v32[2];
          unint64_t v33 = v32[3];
          if (v34 >= v33 >> 1)
          {
            sub_1000B7A7C(v33 > 1, v34 + 1, 1);
            uint64_t v32 = v82;
          }
          v32[2] = v34 + 1;
          uint64_t v35 = &v32[3 * v34];
          v35[4] = v22;
          v35[5] = v24;
          v35[6] = v25;
          --v19;
          uint64_t v20 = v78;
          if (!v19) {
            goto LABEL_24;
          }
          break;
        case 2uLL:
          uint64_t v29 = *(void *)(v80 + 16);
          uint64_t v28 = *(void *)(v80 + 24);
          BOOL v30 = __OFSUB__(v28, v29);
          uint64_t v27 = v28 - v29;
          if (!v30) {
            goto LABEL_18;
          }
          goto LABEL_64;
        case 3uLL:
          uint64_t v56 = 0;
          goto LABEL_55;
        default:
          uint64_t v27 = BYTE6(v81);
          goto LABEL_18;
      }
    }
  }
LABEL_24:
  uint64_t v36 = (uint64_t)v72;
  dispatch thunk of _AnyIteratorBoxBase.next()();
  uint64_t v75 = *(unsigned int (***)(char *, uint64_t, uint64_t))(v76 + 48);
  if (((unsigned int (*)(uint64_t, uint64_t, uint64_t))v75)(v36, 1, v20) == 1)
  {
LABEL_25:
    swift_release();
    sub_10001DAB4(v36, &qword_10163CEA8);
    swift_release();
    swift_release_n();
    uint64_t v37 = v82;
    sub_10000588C(&qword_101655420);
    uint64_t result = swift_allocObject();
    *(void *)(result + 16) = v37;
    return result;
  }
  unint64_t v74 = *(void (***)(char *, char *, uint64_t))(v76 + 32);
  uint64_t v38 = (void (**)(char *, char *, uint64_t))(v76 + 16);
  v76 += 32;
  uint64_t v39 = (void (**)(char *, uint64_t))(v76 - 24);
  while (2)
  {
    uint64_t v40 = v77;
    ((void (*)(char *, uint64_t, uint64_t))v74)(v77, v36, v20);
    uint64_t v41 = v71;
    (*v38)(v71, v40, v20);
    if (qword_1016374F0 != -1) {
      swift_once();
    }
    uint64_t v42 = sub_10000588C(&qword_10163CEC8);
    sub_100010324(v42, (uint64_t)qword_10170F428);
    sub_1001A1544();
    Row.subscript.getter();
    uint64_t v43 = v80;
    if (qword_101637508 != -1) {
      swift_once();
    }
    uint64_t v44 = sub_10000588C(&qword_10163CF58);
    sub_100010324(v44, (uint64_t)qword_10170F470);
    Row.subscript.getter();
    uint64_t v45 = v80;
    unint64_t v46 = v81;
    unint64_t v47 = v81 >> 62;
    switch(v81 >> 62)
    {
      case 1uLL:
        LODWORD(v48) = HIDWORD(v80) - v80;
        if (__OFSUB__(HIDWORD(v80), v80)) {
          goto LABEL_65;
        }
        uint64_t v48 = (int)v48;
LABEL_36:
        if (v48 == 32)
        {
          unint64_t v51 = *v39;
          (*v39)(v41, v20);
          v51(v77, v20);
          uint64_t v52 = v82;
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
          {
            sub_1000B7A7C(0, v52[2] + 1, 1);
            uint64_t v52 = v82;
          }
          unint64_t v54 = v52[2];
          unint64_t v53 = v52[3];
          if (v54 >= v53 >> 1)
          {
            sub_1000B7A7C(v53 > 1, v54 + 1, 1);
            uint64_t v52 = v82;
          }
          v52[2] = v54 + 1;
          uint64_t v55 = &v52[3 * v54];
          v55[4] = v43;
          v55[5] = v45;
          v55[6] = v46;
          uint64_t v36 = (uint64_t)v72;
          dispatch thunk of _AnyIteratorBoxBase.next()();
          uint64_t v20 = v78;
          if (((unsigned int (*)(uint64_t, uint64_t, uint64_t))v75)(v36, 1, v78) == 1) {
            goto LABEL_25;
          }
          continue;
        }
        if (v47)
        {
          if (v47 == 1)
          {
            if (!__OFSUB__(HIDWORD(v80), v80))
            {
              uint64_t v57 = HIDWORD(v80) - (int)v80;
              goto LABEL_60;
            }
LABEL_70:
            __break(1u);
LABEL_71:
            __break(1u);
LABEL_72:
            __break(1u);
            JUMPOUT(0x100A025C0);
          }
          uint64_t v65 = *(void *)(v80 + 16);
          uint64_t v64 = *(void *)(v80 + 24);
          uint64_t v57 = v64 - v65;
          if (__OFSUB__(v64, v65)) {
            goto LABEL_71;
          }
        }
        else
        {
          uint64_t v57 = BYTE6(v81);
        }
LABEL_60:
        sub_10013019C();
        swift_allocError();
        *(void *)uint64_t v66 = 32;
        *(void *)(v66 + 8) = v57;
        *(unsigned char *)(v66 + 16) = 0;
        swift_willThrow();
        sub_10001CFB8(v45, v46);
        uint64_t v67 = *v39;
        uint64_t v68 = v41;
        uint64_t v69 = v78;
        (*v39)(v68, v78);
        v67(v77, v69);
        swift_release();
        swift_release();
        swift_release();
LABEL_61:
        swift_release();
        return swift_release();
      case 2uLL:
        uint64_t v50 = *(void *)(v80 + 16);
        uint64_t v49 = *(void *)(v80 + 24);
        BOOL v30 = __OFSUB__(v49, v50);
        uint64_t v48 = v49 - v50;
        if (!v30) {
          goto LABEL_36;
        }
        goto LABEL_66;
      case 3uLL:
        uint64_t v57 = 0;
        goto LABEL_60;
      default:
        uint64_t v48 = BYTE6(v81);
        goto LABEL_36;
    }
  }
}

uint64_t sub_100A025E0(uint64_t a1, uint64_t a2)
{
  sub_1009FE4E8(a1, a2, *v2);
  uint64_t v4 = *(uint64_t (**)(void))(v3 + 8);
  return sub_1008FAD28(v4);
}

uint64_t sub_100A0267C()
{
  uint64_t v2 = sub_1009FDE84(*v0);
  uint64_t v3 = *(uint64_t (**)(uint64_t))(v1 + 8);
  return sub_100A03B98(v3, v1, v2);
}

uint64_t sub_100A0271C(uint64_t a1, uint64_t a2)
{
  sub_1009FE6A8(a2, *v2, a1);
  uint64_t v4 = *(uint64_t (**)(void))(v3 + 8);
  return sub_1008FAD28(v4);
}

uint64_t sub_100A027C4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v70 = a3;
  uint64_t Error = type metadata accessor for QueryError();
  uint64_t v76 = *(void *)(Error - 8);
  __chkstk_darwin(Error);
  uint64_t v82 = (char *)&v69 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for Row();
  uint64_t v8 = *(void *)(v7 - 8);
  uint64_t v89 = v7;
  uint64_t v90 = v8;
  uint64_t v9 = __chkstk_darwin(v7);
  unint64_t v81 = (char *)&v69 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9);
  uint64_t v84 = (char *)&v69 - v11;
  uint64_t v12 = sub_10000588C(&qword_10163CE70);
  uint64_t v13 = *(void *)(v12 - 8);
  uint64_t v14 = __chkstk_darwin(v12);
  uint64_t v79 = (char *)&v69 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v14);
  uint64_t v17 = (char *)&v69 - v16;
  uint64_t v18 = sub_10000588C(&qword_101638CF0);
  uint64_t v19 = __chkstk_darwin(v18 - 8);
  int64_t v85 = (char *)&v69 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v19);
  uint64_t v22 = (char *)&v69 - v21;
  uint64_t v23 = type metadata accessor for UUID();
  uint64_t v91 = *(void *)(v23 - 8);
  uint64_t v24 = __chkstk_darwin(v23);
  unint64_t v83 = (char *)&v69 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v24);
  uint64_t v88 = (char *)&v69 - v26;
  if (qword_101637518 != -1) {
    swift_once();
  }
  uint64_t v27 = sub_100010324(v12, (uint64_t)qword_10170F4A0);
  uint64_t v28 = type metadata accessor for Table();
  uint64_t v71 = v27;
  uint64_t v86 = v28;
  QueryType.subscript.getter();
  uint64_t v96 = a2;
  Row.get<A>(_:)();
  uint64_t v87 = a1;
  uint64_t v80 = v13;
  if (v3)
  {
    swift_errorRelease();
    uint64_t v29 = v17;
    uint64_t v30 = v12;
    uint64_t v75 = *(void (**)(char *, uint64_t))(v13 + 8);
    v75(v29, v12);
    uint64_t v31 = v91;
    unint64_t v74 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v91 + 56);
    v74(v22, 1, 1, v23);
    uint64_t v73 = 0;
  }
  else
  {
    uint64_t v73 = 0;
    uint64_t v32 = v17;
    uint64_t v30 = v12;
    uint64_t v75 = *(void (**)(char *, uint64_t))(v13 + 8);
    v75(v32, v12);
    uint64_t v31 = v91;
    unint64_t v74 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v91 + 56);
    v74(v22, 0, 1, v23);
  }
  uint64_t v34 = v89;
  uint64_t v33 = v90;
  uint64_t v35 = v84;
  uint64_t v78 = *(void (**)(char *, uint64_t, uint64_t))(v90 + 16);
  v78(v84, v96, v89);
  long long v77 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v31 + 48);
  if (v77(v22, 1, v23) == 1)
  {
    Row.subscript.getter();
    uint64_t v84 = *(char **)(v33 + 8);
    ((void (*)(char *, uint64_t))v84)(v35, v34);
    sub_10001DAB4((uint64_t)v22, &qword_101638CF0);
  }
  else
  {
    uint64_t v84 = *(char **)(v33 + 8);
    ((void (*)(char *, uint64_t))v84)(v35, v34);
    (*(void (**)(char *, char *, uint64_t))(v31 + 32))(v88, v22, v23);
  }
  uint64_t v36 = v79;
  if (qword_1016374E8 != -1) {
    swift_once();
  }
  sub_100010324(v30, (uint64_t)qword_10170F410);
  QueryType.subscript.getter();
  uint64_t v37 = v73;
  Row.get<A>(_:)();
  if (v37)
  {
    swift_errorRelease();
    uint64_t v38 = 1;
  }
  else
  {
    uint64_t v38 = 0;
  }
  uint64_t v39 = v89;
  v75(v36, v30);
  uint64_t v40 = v91;
  uint64_t v41 = (uint64_t)v85;
  v74(v85, v38, 1, v23);
  uint64_t v42 = v81;
  v78(v81, v96, v39);
  if (v77((char *)v41, 1, v23) == 1)
  {
    Row.subscript.getter();
    ((void (*)(char *, uint64_t))v84)(v42, v39);
    sub_10001DAB4(v41, &qword_101638CF0);
  }
  else
  {
    ((void (*)(char *, uint64_t))v84)(v42, v39);
    (*(void (**)(char *, uint64_t, uint64_t))(v40 + 32))(v83, v41, v23);
  }
  if (qword_101637528 != -1) {
    swift_once();
  }
  uint64_t v43 = sub_10000588C(&qword_10163CF58);
  sub_100010324(v43, (uint64_t)qword_10170F4D0);
  Row.get<A>(_:)();
  uint64_t v44 = sub_10043A040(v94, v95);
  unint64_t v81 = v45;
  if (qword_101637508 != -1) {
    swift_once();
  }
  sub_100010324(v43, (uint64_t)qword_10170F470);
  Row.get<A>(_:)();
  sub_100434DF4(v92, v93, &v94);
  int64_t v85 = (char *)v23;
  unint64_t v62 = v95;
  uint64_t v80 = v94;
  if (qword_101637530 != -1) {
    swift_once();
  }
  uint64_t v63 = sub_10000588C(&qword_101640C10);
  sub_100010324(v63, (uint64_t)qword_10170F4E8);
  Row.get<A>(_:)();
  uint64_t v64 = v91;
  if (v95 >> 60 == 15)
  {
    uint64_t v78 = 0;
    uint64_t v65 = v44;
    uint64_t v66 = v62;
    uint64_t v67 = 0;
    uint64_t v68 = 0xF000000000000000;
  }
  else
  {
    sub_100434DF4(v94, v95, &v94);
    uint64_t v78 = 0;
    uint64_t v65 = v44;
    uint64_t v66 = v62;
    uint64_t v67 = v94;
    uint64_t v68 = v95;
  }
  uint64_t v82 = (char *)v67;
  unint64_t v46 = *(void (**)(uint64_t, char *, char *))(v64 + 16);
  uint64_t v47 = v70;
  uint64_t v48 = v85;
  v46(v70, v88, v85);
  uint64_t v49 = v47 + *(int *)(type metadata accessor for BeaconIdentifier() + 20);
  int64_t v85 = v48;
  v46(v49, v83, v48);
  if (qword_101637520 != -1) {
    swift_once();
  }
  uint64_t v50 = sub_10000588C(&qword_10163CE98);
  sub_100010324(v50, (uint64_t)qword_10170F4B8);
  uint64_t v51 = type metadata accessor for KeyGenerationBeaconInfo();
  type metadata accessor for Date();
  uint64_t v52 = v96;
  Row.subscript.getter();
  uint64_t v79 = (char *)v51;
  unint64_t v53 = (uint64_t *)(v47 + *(int *)(v51 + 24));
  uint64_t v54 = v80;
  unint64_t v55 = (unint64_t)v81;
  *unint64_t v53 = v65;
  v53[1] = v55;
  v53[2] = v54;
  v53[3] = v66;
  uint64_t v56 = (uint64_t)v82;
  v53[4] = (uint64_t)v82;
  v53[5] = v68;
  sub_100A03580(v65, v55, v54, v66, v56, v68, (void (*)(void))sub_1000361E0, (void (*)(uint64_t, uint64_t))sub_100037A38);
  if (qword_101637538 != -1) {
    swift_once();
  }
  uint64_t v57 = sub_10000588C(&qword_10163CEC8);
  sub_100010324(v57, (uint64_t)qword_10170F500);
  sub_1001A1544();
  Row.subscript.getter();
  sub_100A03580(v65, v55, v54, v66, v56, v68, (void (*)(void))sub_10001CFB8, (void (*)(uint64_t, uint64_t))sub_10015AF5C);
  ((void (*)(uint64_t, uint64_t))v84)(v52, v89);
  (*(void (**)(uint64_t))(*(void *)(v86 - 8) + 8))(v87);
  uint64_t v58 = *(void (**)(char *, char *))(v91 + 8);
  uint64_t v59 = v85;
  v58(v83, v85);
  uint64_t result = ((uint64_t (*)(char *, char *))v58)(v88, v59);
  if (v94 == 2) {
    char v61 = 2;
  }
  else {
    char v61 = v94 == 1;
  }
  *(unsigned char *)(v47 + *((int *)v79 + 7)) = v61;
  return result;
}

void sub_100A03580(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, void (*a7)(void), void (*a8)(uint64_t, uint64_t))
{
  if (a2 >> 60 != 15)
  {
    a7();
    ((void (*)(uint64_t, uint64_t))a7)(a3, a4);
    a8(a5, a6);
  }
}

uint64_t sub_100A03614(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v34 = a2;
  uint64_t v33 = sub_10000588C(&qword_10163CE68);
  uint64_t v31 = *(void *)(v33 - 8);
  uint64_t v4 = __chkstk_darwin(v33);
  uint64_t v6 = (char *)v30 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = __chkstk_darwin(v4);
  uint64_t v9 = (char *)v30 - v8;
  __chkstk_darwin(v7);
  uint64_t v11 = (char *)v30 - v10;
  uint64_t v12 = type metadata accessor for Table();
  uint64_t v36 = *(void *)(v12 - 8);
  uint64_t v13 = __chkstk_darwin(v12);
  uint64_t v15 = (char *)v30 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = __chkstk_darwin(v13);
  uint64_t v35 = (char *)v30 - v17;
  __chkstk_darwin(v16);
  uint64_t v37 = (char *)v30 - v18;
  uint64_t v38 = a3;
  v30[1] = a3 + OBJC_IVAR____TtC12searchpartyd19ObservationDatabase_keyGenerationHint;
  if (qword_101637518 != -1) {
    swift_once();
  }
  uint64_t v32 = v12;
  uint64_t v19 = sub_10000588C(&qword_10163CE70);
  sub_100010324(v19, (uint64_t)qword_10170F4A0);
  type metadata accessor for UUID();
  == infix<A>(_:_:)();
  if (qword_1016374E8 != -1) {
    swift_once();
  }
  sub_100010324(v19, (uint64_t)qword_10170F410);
  type metadata accessor for BeaconIdentifier();
  == infix<A>(_:_:)();
  && infix(_:_:)();
  uint64_t v20 = *(void (**)(char *, uint64_t))(v31 + 8);
  uint64_t v21 = v33;
  v20(v6, v33);
  v20(v9, v21);
  uint64_t v22 = v32;
  QueryType.filter(_:)();
  v20(v11, v21);
  if (qword_1016374F0 != -1) {
    swift_once();
  }
  uint64_t v31 = sub_10000588C(&qword_10163CEC8);
  sub_100010324(v31, (uint64_t)qword_10170F428);
  v39[0] = v34;
  sub_1001A1544();
  <= infix<A>(_:_:)();
  uint64_t v23 = v35;
  QueryType.filter(_:)();
  v20(v11, v21);
  uint64_t v24 = v36;
  uint64_t v25 = *(void (**)(char *, uint64_t))(v36 + 8);
  v25(v15, v22);
  sub_10000588C(&qword_10163CE90);
  *(_OWORD *)(swift_allocObject() + 16) = xmmword_101342130;
  sub_100062734(&qword_101640BB0, &qword_10163CEC8);
  ExpressionType.desc.getter();
  uint64_t v26 = v37;
  QueryType.order(_:)();
  swift_bridgeObjectRelease();
  v25(v23, v22);
  v39[3] = v22;
  v39[4] = (uint64_t)&protocol witness table for Table;
  uint64_t v27 = sub_10001D958(v39);
  (*(void (**)(uint64_t *, char *, uint64_t))(v24 + 16))(v27, v26, v22);
  uint64_t v28 = v39[9];
  sub_100A01C50();
  if (v28)
  {
    v25(v26, v22);
    return _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)v39);
  }
  else
  {
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)v39);
    dispatch thunk of _AnySequenceBox._makeIterator()();
    swift_release();
    dispatch thunk of _AnyIteratorBoxBase.next()();
    swift_release();
    v25(v26, v22);
    return v39[5];
  }
}

uint64_t sub_100A03B98(uint64_t (*a1)(uint64_t), uint64_t a2, uint64_t a3)
{
  return a1(a3);
}

uint64_t sub_100A03BAC()
{
  return sub_1009FF594(*(void (***)(char *, uint64_t))(v0 + 16), *(void *)(v0 + 24), *(void *)(v0 + 32), *(void *)(v0 + 40));
}

uint64_t sub_100A03BCC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_100A03BE0);
}

uint64_t sub_100A03BE0(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  if (a2 == 0x7FFFFFFF)
  {
    uint64_t v4 = *a1;
    if ((unint64_t)*a1 >= 0xFFFFFFFF) {
      LODWORD(v4) = -1;
    }
    return (v4 + 1);
  }
  else
  {
    uint64_t v8 = type metadata accessor for FMNAccountType();
    uint64_t v9 = *(uint64_t (**)(char *, uint64_t, uint64_t))(*(void *)(v8 - 8) + 48);
    uint64_t v10 = v8;
    uint64_t v11 = (char *)a1 + *(int *)(a3 + 20);
    return v9(v11, a2, v10);
  }
}

uint64_t sub_100A03C90(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_100A03CA4);
}

void *sub_100A03CA4(void *result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *uint64_t result = (a2 - 1);
  }
  else
  {
    uint64_t v7 = type metadata accessor for FMNAccountType();
    uint64_t v8 = *(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56);
    uint64_t v9 = v7;
    uint64_t v10 = (char *)v5 + *(int *)(a4 + 20);
    return (void *)v8(v10, a2, a2, v9);
  }
  return result;
}

uint64_t type metadata accessor for LostModeEndPoint()
{
  uint64_t result = qword_101655480;
  if (!qword_101655480) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t sub_100A03D98()
{
  sub_10000588C(&qword_101639580);
  OS_dispatch_queue.sync<A>(execute:)();
  URLComponents.init()();
  URLComponents.scheme.setter();
  URLComponents.host.setter();
  URLComponents.path.setter();
  uint64_t v0 = (uint64_t (*)(uint64_t *, void))URLComponents.path.modify();
  v1._countAndFlagsBits = 0x646F4D74736F6C2FLL;
  v1._object = (void *)0xE900000000000065;
  String.append(_:)(v1);
  return v0(&v3, 0);
}

void *sub_100A03E9C(uint64_t a1, char *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v195 = a4;
  uint64_t v196 = a1;
  char v197 = a2;
  uint64_t v186 = type metadata accessor for MemberSharingCircle();
  uint64_t v185 = *(void *)(v186 - 8);
  uint64_t v5 = __chkstk_darwin(v186);
  uint64_t v7 = (char *)&v167 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5);
  uint64_t v9 = (char *)&v167 - v8;
  uint64_t v10 = sub_10000588C(&qword_10163BBB0);
  __chkstk_darwin(v10 - 8);
  uint64_t v169 = (uint64_t)&v167 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  long long v178 = (char *)type metadata accessor for LocalFindableAccessoryRecord();
  __chkstk_darwin(v178);
  uint64_t v177 = (char *)&v167 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v192 = sub_10000588C((uint64_t *)&unk_101653C80);
  char v183 = *(char **)(v192 - 8);
  uint64_t v13 = __chkstk_darwin(v192);
  char v179 = (char *)&v167 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v13);
  uint64_t v181 = (char *)&v167 - v15;
  uint64_t v16 = sub_10000588C(&qword_1016496E0);
  uint64_t v17 = __chkstk_darwin(v16 - 8);
  uint64_t v180 = (char *)&v167 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v17);
  uint64_t v182 = (uint64_t)&v167 - v19;
  uint64_t v20 = sub_10000588C((uint64_t *)&unk_10163B7C0);
  uint64_t v21 = __chkstk_darwin(v20 - 8);
  uint64_t v184 = (uint64_t)&v167 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v21);
  uint64_t v176 = (uint64_t)&v167 - v23;
  uint64_t v24 = sub_10000588C((uint64_t *)&unk_101653C90);
  __chkstk_darwin(v24 - 8);
  uint64_t v191 = (char *)&v167 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v187 = sub_10000588C(&qword_101645750);
  uint64_t v174 = *(char **)(v187 - 8);
  uint64_t v26 = __chkstk_darwin(v187);
  uint64_t v172 = (char *)&v167 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v26);
  uint64_t v173 = (uint64_t)&v167 - v28;
  uint64_t v190 = type metadata accessor for URL();
  uint64_t v198 = *(void *)(v190 - 8);
  uint64_t v29 = __chkstk_darwin(v190);
  uint64_t v188 = (char *)&v167 - ((v30 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v31 = __chkstk_darwin(v29);
  uint64_t v189 = (char *)&v167 - v32;
  __chkstk_darwin(v31);
  char v194 = (char *)&v167 - v33;
  uint64_t v34 = sub_10000588C((uint64_t *)&unk_101653CA0);
  uint64_t v35 = __chkstk_darwin(v34 - 8);
  uint64_t v170 = (char *)&v167 - ((v36 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v35);
  uint64_t v171 = (uint64_t)&v167 - v37;
  uint64_t v38 = type metadata accessor for StableIdentifier();
  __chkstk_darwin(v38);
  uint64_t v40 = (char *)&v167 - ((v39 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v41 = type metadata accessor for SharedBeaconRecord(0);
  uint64_t v42 = __chkstk_darwin(v41);
  uint64_t v175 = (uint64_t)&v167 - ((v43 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v44 = __chkstk_darwin(v42);
  uint64_t v168 = (uint64_t)&v167 - v45;
  uint64_t v46 = __chkstk_darwin(v44);
  uint64_t v193 = (uint64_t)&v167 - v47;
  __chkstk_darwin(v46);
  uint64_t v49 = (char *)&v167 - v48;
  uint64_t v50 = (int *)type metadata accessor for OwnedBeaconRecord();
  uint64_t v51 = __chkstk_darwin(v50);
  unint64_t v53 = (char *)&v167 - ((v52 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v51);
  unint64_t v55 = (char *)&v167 - v54;
  v204[3] = a3;
  v204[4] = v195;
  uint64_t v56 = sub_10001D958(v204);
  (*(void (**)(uint64_t *, uint64_t, uint64_t))(*(void *)(a3 - 8) + 16))(v56, v196, a3);
  sub_10001D010((uint64_t)v204, (uint64_t)v203);
  sub_10000588C((uint64_t *)&unk_10164DBF0);
  if (swift_dynamicCast())
  {
    sub_100A059F4((uint64_t)v55, (uint64_t)v53, (uint64_t (*)(void))type metadata accessor for OwnedBeaconRecord);
    if (qword_101636CD8 != -1) {
      swift_once();
    }
    OS_dispatch_queue.sync<A>(execute:)();
    uint64_t v196 = 0;
    uint64_t v57 = v199[0];
    uint64_t v58 = &v53[v50[14]];
    uint64_t v60 = *(void *)v58;
    unint64_t v59 = *((void *)v58 + 1);
    uint64_t v61 = v60 & 0xFFFFFFFFFFFFLL;
    if ((v59 & 0x2000000000000000) != 0) {
      uint64_t v62 = HIBYTE(v59) & 0xF;
    }
    else {
      uint64_t v62 = v61;
    }
    uint64_t v63 = (uint64_t)v197;
    if (!v62)
    {
      v199[0] = 0;
      v199[1] = 0xE000000000000000;
      uint64_t v202 = *(void *)&v53[v50[16]];
      v64._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
      String.append(_:)(v64);
      swift_bridgeObjectRelease();
      v65._countAndFlagsBits = 95;
      v65._object = (void *)0xE100000000000000;
      String.append(_:)(v65);
      uint64_t v202 = *(void *)&v53[v50[17]];
      v66._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
      String.append(_:)(v66);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
    }
    if (qword_101637658 != -1) {
      swift_once();
    }
    uint64_t v67 = qword_10170F830;
    swift_bridgeObjectRetain();
    if (sub_100F2C7E4())
    {
      v199[0] = v67;
      sub_10112728C(2u);
      sub_10112728C(1u);
      uint64_t v67 = v199[0];
    }
    uint64_t v202 = v67;
    if ((sub_10069376C((uint64_t)v53, v63) & 1) != 0 && (sub_100F2C7E4() & 1) == 0)
    {
      sub_100DCCFE4(v199, 8);
      sub_100DCCFE4(v199, 9);
    }
    else
    {
      sub_10112728C(8u);
      sub_10112728C(9u);
    }
    sub_100A05A5C((uint64_t)&v53[v50[6]], (uint64_t)v40, (uint64_t (*)(void))type metadata accessor for StableIdentifier);
    int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    sub_100A05AC4((uint64_t)v40, (uint64_t (*)(void))type metadata accessor for StableIdentifier);
    if (EnumCaseMultiPayload != 1)
    {
      sub_10112728C(0xCu);
      sub_10112728C(0xDu);
    }
    if ((sub_100D1CA38() & 1) == 0
      || (uint64_t My = type metadata accessor for Feature.FindMy(),
          uint64_t v200 = My,
          v201 = sub_100A05B24((unint64_t *)&qword_101653E00, (void (*)(uint64_t))&type metadata accessor for Feature.FindMy), unint64_t v105 = sub_10001D958(v199), (*(void (**)(uint64_t *, void, uint64_t))(*(void *)(My - 8) + 104))(v105, enum case for Feature.FindMy.btRSSIFinding(_:), My), LOBYTE(My) = isFeatureEnabled(_:)(), _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)v199), (My & 1) == 0))
    {
      sub_10112728C(0xAu);
      sub_10112728C(0xBu);
    }
    if ((sub_10111198C() & 1) == 0) {
      goto LABEL_40;
    }
    uint64_t v106 = type metadata accessor for Feature.FindMy();
    uint64_t v200 = v106;
    uint64_t v107 = sub_100A05B24((unint64_t *)&qword_101653E00, (void (*)(uint64_t))&type metadata accessor for Feature.FindMy);
    uint64_t v201 = v107;
    uint64_t v108 = sub_10001D958(v199);
    uint64_t v109 = *(void *)(v106 - 8);
    uint64_t v110 = *(void (**)(uint64_t *, void, uint64_t))(v109 + 104);
    uint64_t v111 = v109 + 104;
    v110(v108, enum case for Feature.FindMy.itemSharing(_:), v106);
    char v112 = isFeatureEnabled(_:)();
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)v199);
    if ((v112 & 1) == 0)
    {
LABEL_40:
      swift_bridgeObjectRelease();
      uint64_t v139 = v202;
      swift_bridgeObjectRetain();
      char v140 = sub_100DC7494(4u, v139);
      swift_bridgeObjectRelease();
      if (v140)
      {
        sub_10112728C(4u);
        uint64_t v139 = v202;
      }
      swift_bridgeObjectRetain();
      char v141 = sub_100DC7494(5u, v139);
      swift_bridgeObjectRelease();
      if (v141) {
        sub_10112728C(5u);
      }
      sub_10112728C(0x15u);
      uint64_t v142 = (uint64_t)v53;
      goto LABEL_55;
    }
    uint64_t v185 = v111;
    uint64_t v186 = (uint64_t)v110;
    uint64_t v192 = v107;
    uint64_t v193 = v106;
    uint64_t v195 = v57;
    sub_100DCCFE4(v199, 4);
    uint64_t v113 = v50[5];
    char v197 = v53;
    char v183 = &v53[v113];
    uint64_t v184 = sub_101158C68((uint64_t)&off_10159FB48);
    uint64_t v182 = *(void *)(v63 + 160);
    if (qword_1016370F0 != -1) {
      swift_once();
    }
    uint64_t v114 = v190;
    uint64_t v115 = sub_100010324(v190, (uint64_t)qword_10170ED28);
    uint64_t v116 = *(void (**)(char *, uint64_t, uint64_t))(v198 + 16);
    uint64_t v117 = v194;
    v116(v194, v115, v114);
    uint64_t v118 = v189;
    v116(v189, (uint64_t)v117, v114);
    uint64_t v119 = v187;
    uint64_t v120 = (uint64_t)v172;
    uint64_t v181 = &v172[*(int *)(v187 + 40)];
    uint64_t v121 = (uint64_t)v181;
    uint64_t v122 = type metadata accessor for DirectorySequence();
    uint64_t v123 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v122 - 8) + 56);
    v123(v121, 1, 1, v122);
    v116((char *)v120, (uint64_t)v118, v114);
    *(void *)(v120 + *(int *)(v119 + 36)) = v182;
    v116(v188, (uint64_t)v118, v114);
    swift_retain();
    uint64_t v124 = (uint64_t)v191;
    DirectorySequence.init(at:includingPropertiesForKeys:options:)();
    uint64_t v125 = *(void (**)(char *, uint64_t))(v198 + 8);
    v125(v118, v114);
    v123(v124, 0, 1, v122);
    sub_1005E353C(v124, (uint64_t)v181);
    uint64_t v126 = v173;
    sub_10001D608(v120, v173, &qword_101645750);
    uint64_t v127 = (void (*)(char *, uint64_t, uint64_t, uint64_t))*((void *)v174 + 7);
    uint64_t v128 = (uint64_t)v170;
    uint64_t v129 = v187;
    v127(v170, 1, 1, v187);
    sub_10001DAB4(v128, &qword_101645758);
    sub_10001D608(v126, v128, &qword_101645750);
    v127((char *)v128, 0, 1, v129);
    sub_10001D608(v128, v171, (uint64_t *)&unk_101653CA0);
    uint64_t v130 = ((uint64_t (*)(char *, uint64_t))v125)(v194, v114);
    __chkstk_darwin(v130);
    unint64_t v131 = v183;
    *(&v167 - 2) = v184;
    *(&v167 - 1) = (uint64_t)v131;
    sub_100658408(sub_10048321C, (uint64_t)(&v167 - 4));
    uint64_t v133 = v132;
    swift_bridgeObjectRelease();
    uint64_t v134 = *(void *)(v133 + 16);
    swift_bridgeObjectRelease();
    uint64_t v135 = v202;
    swift_bridgeObjectRetain();
    LOBYTE(v125) = sub_100DC7494(5u, v135);
    swift_bridgeObjectRelease();
    if ((v125 & 1) != 0 || !v134)
    {
      swift_bridgeObjectRetain();
      char v144 = sub_100DC7494(5u, v135);
      swift_bridgeObjectRelease();
      uint64_t v136 = v195;
      uint64_t v137 = v193;
      int64_t v138 = (void (*)(uint64_t *, void, uint64_t))v186;
      if ((v144 & 1) != 0 && !v134) {
        sub_10112728C(5u);
      }
    }
    else
    {
      sub_100DCCFE4(v199, 5);
      uint64_t v136 = v195;
      uint64_t v137 = v193;
      int64_t v138 = (void (*)(uint64_t *, void, uint64_t))v186;
    }
    uint64_t v200 = v137;
    uint64_t v201 = v192;
    uint64_t v145 = sub_10001D958(v199);
    v138(v145, enum case for Feature.FindMy.cowardlyCarrot(_:), v137);
    char v146 = isFeatureEnabled(_:)();
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)v199);
    uint64_t v147 = (uint64_t)v197;
    if (v146)
    {
      char v148 = sub_1010AAF90(v136);
      swift_bridgeObjectRelease();
      if ((v148 & 1) == 0)
      {
        sub_100DCCFE4(v199, 21);
LABEL_54:
        uint64_t v142 = v147;
LABEL_55:
        sub_100A05AC4(v142, (uint64_t (*)(void))type metadata accessor for OwnedBeaconRecord);
        uint64_t v102 = (void *)v202;
        goto LABEL_68;
      }
    }
    else
    {
      swift_bridgeObjectRelease();
    }
    sub_10112728C(0x15u);
    goto LABEL_54;
  }
  if (swift_dynamicCast())
  {
    uint64_t v174 = v7;
    uint64_t v68 = (uint64_t)v49;
    uint64_t v69 = v193;
    sub_100A059F4(v68, v193, type metadata accessor for SharedBeaconRecord);
    uint64_t v70 = v69 + *(int *)(v41 + 20);
    uint64_t v195 = v41;
    uint64_t v196 = v70;
    uint64_t v187 = *((void *)v197 + 20);
    if (qword_101636A48 != -1) {
      swift_once();
    }
    uint64_t v71 = v190;
    uint64_t v72 = sub_100010324(v190, (uint64_t)qword_10170DD78);
    uint64_t v73 = *(void (**)(char *, uint64_t, uint64_t))(v198 + 16);
    unint64_t v74 = v194;
    v73(v194, v72, v71);
    uint64_t v75 = v189;
    v73(v189, (uint64_t)v74, v71);
    uint64_t v76 = v192;
    uint64_t v77 = (uint64_t)v179;
    long long v178 = &v179[*(int *)(v192 + 40)];
    uint64_t v78 = (uint64_t)v178;
    uint64_t v79 = type metadata accessor for DirectorySequence();
    uint64_t v80 = *(void *)(v79 - 8);
    unint64_t v81 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v80 + 56);
    uint64_t v177 = (char *)(v80 + 56);
    v81(v78, 1, 1, v79);
    v73((char *)v77, (uint64_t)v75, v71);
    *(void *)(v77 + *(int *)(v76 + 36)) = v187;
    v73(v188, (uint64_t)v75, v71);
    swift_retain();
    uint64_t v82 = (uint64_t)v191;
    DirectorySequence.init(at:includingPropertiesForKeys:options:)();
    unint64_t v83 = *(void (**)(char *, uint64_t))(v198 + 8);
    v198 += 8;
    v83(v75, v71);
    v81(v82, 0, 1, v79);
    sub_1005E353C(v82, (uint64_t)v178);
    uint64_t v84 = (uint64_t)v181;
    sub_10001D608(v77, (uint64_t)v181, (uint64_t *)&unk_101653C80);
    int64_t v85 = (void (*)(char *, uint64_t, uint64_t, uint64_t))*((void *)v183 + 7);
    uint64_t v86 = (uint64_t)v180;
    uint64_t v87 = v192;
    v85(v180, 1, 1, v192);
    sub_10001DAB4(v86, &qword_101653CB0);
    sub_10001D608(v84, v86, (uint64_t *)&unk_101653C80);
    v85((char *)v86, 0, 1, v87);
    sub_10001D608(v86, v182, &qword_1016496E0);
    uint64_t v88 = ((uint64_t (*)(char *, uint64_t))v83)(v194, v71);
    __chkstk_darwin(v88);
    uint64_t v89 = v196;
    *(&v167 - 2) = v196;
    sub_1006590AC((uint64_t (*)(uint64_t))sub_1005E35A4, (uint64_t)(&v167 - 4));
    uint64_t v91 = *(void *)(v90 + 16);
    if (v91)
    {
      uint64_t v92 = v185;
      uint64_t v93 = v90 + ((*(unsigned __int8 *)(v185 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v185 + 80));
      uint64_t v94 = *(void *)(v185 + 72);
      uint64_t v95 = v186;
      uint64_t v96 = (uint64_t)v174;
      while (1)
      {
        sub_100A05A5C(v93, (uint64_t)v9, (uint64_t (*)(void))type metadata accessor for MemberSharingCircle);
        int v97 = v9[*(int *)(v95 + 40)];
        sub_100A05A5C((uint64_t)v9, v96, (uint64_t (*)(void))type metadata accessor for MemberSharingCircle);
        if (v97 == 1) {
          break;
        }
        int v98 = *(unsigned __int8 *)(v96 + *(int *)(v95 + 40));
        sub_100A05AC4(v96, (uint64_t (*)(void))type metadata accessor for MemberSharingCircle);
        if (v98 == 4) {
          goto LABEL_57;
        }
        sub_100A05AC4((uint64_t)v9, (uint64_t (*)(void))type metadata accessor for MemberSharingCircle);
        v93 += v94;
        if (!--v91)
        {
          uint64_t v99 = 1;
          uint64_t v100 = v176;
          goto LABEL_58;
        }
      }
      sub_100A05AC4(v96, (uint64_t (*)(void))type metadata accessor for MemberSharingCircle);
LABEL_57:
      uint64_t v100 = v176;
      sub_100A059F4((uint64_t)v9, v176, (uint64_t (*)(void))type metadata accessor for MemberSharingCircle);
      uint64_t v99 = 0;
LABEL_58:
      uint64_t v143 = v193;
      uint64_t v89 = v196;
    }
    else
    {
      uint64_t v100 = v176;
      uint64_t v143 = v193;
      uint64_t v95 = v186;
      uint64_t v92 = v185;
      uint64_t v99 = 1;
    }
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v92 + 56))(v100, v99, 1, v95);
    swift_bridgeObjectRelease();
    uint64_t v149 = v195;
    int v150 = *(unsigned __int8 *)(v143 + *(int *)(v195 + 52));
    uint64_t v151 = v184;
    sub_100A0598C(v100, v184);
    if (v150 != 1 || (*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v92 + 48))(v151, 1, v95) == 1)
    {
      sub_10001DAB4(v151, (uint64_t *)&unk_10163B7C0);
      if (qword_101636F50 != -1) {
        swift_once();
      }
      uint64_t v152 = type metadata accessor for Logger();
      sub_100010324(v152, (uint64_t)qword_10170E9E8);
      uint64_t v153 = v175;
      sub_100A05A5C(v143, v175, type metadata accessor for SharedBeaconRecord);
      uint64_t v154 = Logger.logObject.getter();
      os_log_type_t v155 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v154, v155))
      {
        uint64_t v156 = swift_slowAlloc();
        v199[0] = swift_slowAlloc();
        *(_DWORD *)uint64_t v156 = 141558275;
        uint64_t v202 = 1752392040;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        *(_WORD *)(v156 + 12) = 2081;
        type metadata accessor for UUID();
        sub_100A05B24((unint64_t *)&qword_101638B10, (void (*)(uint64_t))&type metadata accessor for UUID);
        uint64_t v157 = dispatch thunk of CustomStringConvertible.description.getter();
        uint64_t v202 = sub_1008FA0F0(v157, v158, v199);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        sub_100A05AC4(v153, type metadata accessor for SharedBeaconRecord);
        _os_log_impl((void *)&_mh_execute_header, v154, v155, "No accepted member circle for beacon %{private,mask.hash}s.", (uint8_t *)v156, 0x16u);
        swift_arrayDestroy();
        uint64_t v143 = v193;
        swift_slowDealloc();
        swift_slowDealloc();
      }
      else
      {
        sub_100A05AC4(v153, type metadata accessor for SharedBeaconRecord);
      }

      sub_10001DAB4(v100, (uint64_t *)&unk_10163B7C0);
      sub_100A05AC4(v143, type metadata accessor for SharedBeaconRecord);
      goto LABEL_67;
    }
    sub_10001DAB4(v151, (uint64_t *)&unk_10163B7C0);
    v199[0] = (uint64_t)&_swiftEmptySetSingleton;
    uint64_t v160 = v169;
    sub_100AE311C(v89, v169);
    uint64_t v161 = v160;
    uint64_t v162 = type metadata accessor for BeaconProductInfoRecord();
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v162 - 8) + 48))(v161, 1, v162) == 1)
    {
      sub_10001DAB4(v161, &qword_10163BBB0);
      uint64_t v163 = *(void *)(v143 + *(int *)(v149 + 44));
      uint64_t v164 = v168;
      sub_100A05A5C(v143, v168, type metadata accessor for SharedBeaconRecord);
      if (v163 != 76)
      {
        sub_100A05AC4(v164, type metadata accessor for SharedBeaconRecord);
        goto LABEL_81;
      }
      if (qword_1016375F8 != -1) {
        swift_once();
      }
      BOOL v165 = sub_100DC71B4(*(void *)(v164 + *(int *)(v149 + 48)), qword_10170F778);
      sub_100A05AC4(v164, type metadata accessor for SharedBeaconRecord);
      if (!v165) {
        goto LABEL_81;
      }
      sub_100DCCFE4(&v202, 6);
      sub_100DCCFE4(&v202, 7);
      sub_100DCCFE4(&v202, 12);
      sub_100DCCFE4(&v202, 13);
LABEL_79:
      sub_100DCCFE4(&v202, 17);
      sub_100DCCFE4(&v202, 3);
      sub_100DCCFE4(&v202, 16);
LABEL_81:
      sub_100DCCFE4(&v202, 5);
      sub_10001DAB4(v100, (uint64_t *)&unk_10163B7C0);
      sub_100A05AC4(v143, type metadata accessor for SharedBeaconRecord);
      uint64_t v102 = (void *)v199[0];
      goto LABEL_68;
    }
    int v166 = *(_DWORD *)(v161 + *(int *)(v162 + 68));
    sub_100A05AC4(v161, (uint64_t (*)(void))type metadata accessor for BeaconProductInfoRecord);
    if (v166)
    {
      sub_100DCCFE4(&v202, 6);
      sub_100DCCFE4(&v202, 7);
      if ((v166 & 0x400) == 0)
      {
LABEL_77:
        if ((v166 & 0x100) == 0) {
          goto LABEL_79;
        }
LABEL_78:
        sub_100DCCFE4(&v202, 12);
        sub_100DCCFE4(&v202, 13);
        goto LABEL_79;
      }
    }
    else if ((v166 & 0x400) == 0)
    {
      goto LABEL_77;
    }
    sub_100DCCFE4(&v202, 10);
    sub_100DCCFE4(&v202, 11);
    if ((v166 & 0x100) == 0) {
      goto LABEL_79;
    }
    goto LABEL_78;
  }
  uint64_t v101 = (uint64_t)v177;
  if ((swift_dynamicCast() & 1) == 0)
  {
LABEL_67:
    uint64_t v102 = &_swiftEmptySetSingleton;
    goto LABEL_68;
  }
  sub_100A05AC4(v101, (uint64_t (*)(void))type metadata accessor for LocalFindableAccessoryRecord);
  uint64_t v102 = sub_100DF16C0((uint64_t)&off_10159FB70);
LABEL_68:
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)v203);
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)v204);
  return v102;
}

uint64_t sub_100A0598C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_10000588C((uint64_t *)&unk_10163B7C0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_100A059F4(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 32))(a2, a1, v5);
  return a2;
}

uint64_t sub_100A05A5C(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

uint64_t sub_100A05AC4(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t sub_100A05B24(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

void *sub_100A05B6C(uint64_t a1)
{
  uint64_t v3 = type metadata accessor for UUID();
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  uint64_t v6 = (char *)v14 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  int64_t v7 = *(void *)(a1 + 16);
  uint64_t v8 = _swiftEmptyArrayStorage;
  if (v7)
  {
    v14[1] = v1;
    uint64_t v18 = _swiftEmptyArrayStorage;
    sub_1000B7034(0, v7, 0);
    uint64_t v8 = v18;
    uint64_t v17 = type metadata accessor for OwnedBeaconRecord();
    uint64_t v9 = a1
       + ((*(unsigned __int8 *)(*(void *)(v17 - 8) + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(v17 - 8) + 80));
    uint64_t v16 = *(void *)(*(void *)(v17 - 8) + 72);
    uint64_t v10 = *(void (**)(char *, uint64_t, uint64_t))(v4 + 16);
    void v14[2] = v4 + 32;
    uint64_t v15 = v10;
    do
    {
      v15(v6, v9 + *(int *)(v17 + 20), v3);
      uint64_t v18 = v8;
      unint64_t v12 = v8[2];
      unint64_t v11 = v8[3];
      if (v12 >= v11 >> 1)
      {
        sub_1000B7034(v11 > 1, v12 + 1, 1);
        uint64_t v8 = v18;
      }
      v8[2] = v12 + 1;
      (*(void (**)(unint64_t, char *, uint64_t))(v4 + 32))((unint64_t)v8+ ((*(unsigned __int8 *)(v4 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80))+ *(void *)(v4 + 72) * v12, v6, v3);
      v9 += v16;
      --v7;
    }
    while (v7);
  }
  return v8;
}

void *sub_100A05D84(uint64_t a1)
{
  uint64_t v16 = type metadata accessor for UUID();
  uint64_t v3 = *(void *)(v16 - 8);
  __chkstk_darwin(v16);
  uint64_t v5 = (char *)&v15 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  int64_t v6 = *(void *)(a1 + 16);
  int64_t v7 = _swiftEmptyArrayStorage;
  if (v6)
  {
    uint64_t v15 = v1;
    uint64_t v17 = _swiftEmptyArrayStorage;
    sub_1000B7034(0, v6, 0);
    int64_t v7 = v17;
    uint64_t v8 = (void *)(a1 + 32);
    do
    {
      uint64_t v10 = v8[3];
      uint64_t v9 = v8[4];
      sub_10001CD44(v8, v10);
      (*(void (**)(uint64_t))(*(void *)(*(void *)(v9 + 8) + 8) + 32))(v10);
      char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      uint64_t v17 = v7;
      if ((isUniquelyReferenced_nonNull_native & 1) == 0)
      {
        sub_1000B7034(0, v7[2] + 1, 1);
        int64_t v7 = v17;
      }
      unint64_t v13 = v7[2];
      unint64_t v12 = v7[3];
      if (v13 >= v12 >> 1)
      {
        sub_1000B7034(v12 > 1, v13 + 1, 1);
        int64_t v7 = v17;
      }
      _OWORD v7[2] = v13 + 1;
      (*(void (**)(unint64_t, char *, uint64_t))(v3 + 32))((unint64_t)v7+ ((*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80))+ *(void *)(v3 + 72) * v13, v5, v16);
      uint64_t v17 = v7;
      v8 += 5;
      --v6;
    }
    while (v6);
  }
  return v7;
}

uint64_t sub_100A05F68(uint64_t a1)
{
  uint64_t v2 = sub_10000588C((uint64_t *)&unk_101655530);
  __chkstk_darwin(v2 - 8);
  uint64_t v51 = (char *)&v48 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v52 = type metadata accessor for BeaconObservation();
  uint64_t v54 = *(void *)(v52 - 8);
  uint64_t v4 = __chkstk_darwin(v52);
  uint64_t v55 = (uint64_t)&v48 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = __chkstk_darwin(v4);
  uint64_t v8 = (char *)&v48 - v7;
  __chkstk_darwin(v6);
  uint64_t v50 = (uint64_t)&v48 - v9;
  uint64_t v10 = (_UNKNOWN **)type metadata accessor for UUID();
  unint64_t v11 = (unint64_t)*(v10 - 1);
  __chkstk_darwin(v10);
  unint64_t v13 = (char *)&v48 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = sub_10000588C((uint64_t *)&unk_10163AC90);
  __chkstk_darwin(v14 - 8);
  unint64_t v16 = (unint64_t)&v48 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v17 = sub_100ACF0EC();
  uint64_t v18 = sub_100A05B6C((uint64_t)v17);
  swift_bridgeObjectRelease();
  uint64_t v57 = a1;
  BOOL v19 = sub_100A9F998((uint64_t (*)(char *))sub_1006CD4F8, (uint64_t)v56, (uint64_t)v18);
  swift_bridgeObjectRelease();
  if (v19) {
    return 1;
  }
  sub_100ACCD98(a1, (uint64_t)&v58);
  if (!v59)
  {
    sub_10001DAB4((uint64_t)&v58, (uint64_t *)&unk_10163BBE0);
    goto LABEL_9;
  }
  uint64_t v53 = a1;
  sub_10001CEB0(&v58, (uint64_t)v60);
  uint64_t v22 = v61;
  uint64_t v21 = v62;
  sub_10001CD44(v60, v61);
  (*(void (**)(uint64_t))(*(void *)(*(void *)(v21 + 8) + 8) + 32))(v22);
  if (qword_101636CB8 != -1) {
    goto LABEL_40;
  }
  while (1)
  {
    sub_1007B4970((uint64_t)v13, 0, 0, &v58);
    char v24 = sub_100AF7A38(v16, (uint64_t)v13, (void *)v58, 1);
    swift_bridgeObjectRelease();
    uint64_t v25 = *(void (**)(char *, _UNKNOWN **))(v11 + 8);
    v11 += 8;
    v25(v13, v10);
    sub_10001DAB4(v16, (uint64_t *)&unk_10163AC90);
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)v60);
    if (v24) {
      return 4;
    }
    a1 = v53;
LABEL_9:
    uint64_t v26 = v52;
    if (qword_101636CB8 != -1) {
      swift_once();
    }
    sub_10000588C(&qword_101655540);
    OS_dispatch_queue.sync<A>(execute:)();
    uint64_t v28 = v60[0];
    if (!*(void *)(v60[0] + 16) || (unint64_t v29 = sub_1007240CC(a1), (v30 & 1) == 0))
    {
      swift_bridgeObjectRelease();
      uint64_t v34 = _swiftEmptyArrayStorage;
      goto LABEL_31;
    }
    uint64_t v31 = *(void *)(*(void *)(v28 + 56) + 8 * v29);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    uint64_t v32 = sub_1007100C0(v31);
    swift_bridgeObjectRelease();
    size_t v33 = sub_100B752E8((uint64_t)v32);
    swift_release();
    uint64_t v34 = _swiftEmptyArrayStorage;
    v60[0] = _swiftEmptyArrayStorage;
    uint64_t v53 = *(void *)(v33 + 16);
    if (!v53) {
      break;
    }
    uint64_t v49 = v27;
    unint64_t v16 = 0;
    uint64_t v35 = _swiftEmptyArrayStorage;
    unint64_t v13 = (char *)qword_101374720;
    uint64_t v10 = &off_10159F810;
    uint64_t v36 = v54;
    while (v16 < *(void *)(v33 + 16))
    {
      unint64_t v11 = (*(unsigned __int8 *)(v36 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v36 + 80);
      uint64_t v37 = *(void *)(v36 + 72);
      sub_100A32584(v33 + v11 + v37 * v16, (uint64_t)v8, (uint64_t (*)(void))type metadata accessor for BeaconObservation);
      uint64_t v38 = qword_101374720[v8[*(int *)(v26 + 24)]];
      if (v38 != 700)
      {
        uint64_t v41 = &stru_100000020.cmd + 1;
        while (1)
        {
          uint64_t v42 = v41 - 31;
          if (__OFADD__(v41 - 32, 1)) {
            break;
          }
          if (qword_101374720[*((char *)&off_10159F810 + v41)] == v38) {
            goto LABEL_18;
          }
          ++v41;
          if (v42 == 2)
          {
            sub_100A2E53C((uint64_t)v8, (uint64_t (*)(void))type metadata accessor for BeaconObservation);
            goto LABEL_15;
          }
        }
        __break(1u);
        break;
      }
LABEL_18:
      sub_100A2E4D4((uint64_t)v8, v55, (uint64_t (*)(void))type metadata accessor for BeaconObservation);
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
        sub_1000B77F0(0, v35[2] + 1, 1);
      }
      uint64_t v35 = (void *)v60[0];
      unint64_t v40 = *(void *)(v60[0] + 16);
      unint64_t v39 = *(void *)(v60[0] + 24);
      if (v40 >= v39 >> 1)
      {
        sub_1000B77F0(v39 > 1, v40 + 1, 1);
        uint64_t v35 = (void *)v60[0];
      }
      v35[2] = v40 + 1;
      sub_100A2E4D4(v55, (uint64_t)v35 + v11 + v40 * v37, (uint64_t (*)(void))type metadata accessor for BeaconObservation);
      uint64_t v26 = v52;
      uint64_t v36 = v54;
LABEL_15:
      if (++v16 == v53)
      {
        uint64_t v34 = (void *)v60[0];
        uint64_t v27 = v49;
        goto LABEL_30;
      }
    }
    __break(1u);
LABEL_40:
    swift_once();
  }
LABEL_30:
  swift_release();
LABEL_31:
  uint64_t v43 = (uint64_t)v51;
  sub_100E4D5E0((uint64_t)v34, v43);
  swift_bridgeObjectRelease();
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v54 + 48))(v43, 1, v26) == 1)
  {
    sub_10001DAB4(v43, (uint64_t *)&unk_101655530);
    return 0;
  }
  else
  {
    uint64_t v44 = v43;
    uint64_t v45 = v50;
    sub_100A2E4D4(v44, v50, (uint64_t (*)(void))type metadata accessor for BeaconObservation);
    int v46 = *(unsigned __int8 *)(v45 + *(int *)(v26 + 24));
    sub_100A2E53C(v45, (uint64_t (*)(void))type metadata accessor for BeaconObservation);
    uint64_t v47 = 3;
    if (v46 != 42) {
      uint64_t v47 = 0;
    }
    if (v46 == 41) {
      return 2;
    }
    else {
      return v47;
    }
  }
}

Swift::Int sub_100A066AC(void **a1)
{
  uint64_t v2 = *(void *)(sub_10000588C(&qword_101655620) - 8);
  uint64_t v3 = *a1;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    uint64_t v3 = (void *)sub_100B73818(v3);
  }
  uint64_t v4 = v3[2];
  v6[0] = (uint64_t)v3 + ((*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80));
  v6[1] = v4;
  Swift::Int result = sub_100A24578(v6);
  *a1 = v3;
  return result;
}

id sub_100A06758(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for Date();
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  uint64_t v5 = (char *)&v24 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = (int *)type metadata accessor for SafeLocation();
  v7.super.Class isa = UUID._bridgeToObjectiveC()().super.isa;
  uint64_t v8 = v6[7];
  uint64_t v24 = qword_101374880[*(char *)(a1 + v6[6])];
  unint64_t v9 = *(void *)(a1 + v8 + 8);
  uint64_t v10 = HIBYTE(v9) & 0xF;
  if ((v9 & 0x2000000000000000) == 0) {
    uint64_t v10 = *(void *)(a1 + v8) & 0xFFFFFFFFFFFFLL;
  }
  if (v10) {
    NSString v11 = String._bridgeToObjectiveC()();
  }
  else {
    NSString v11 = 0;
  }
  double v12 = *(double *)(a1 + v6[8]);
  double v13 = *(double *)(a1 + v6[9]);
  double v14 = *(double *)(a1 + v6[10]);
  Date.init()();
  id v15 = objc_allocWithZone((Class)CLLocation);
  Class isa = Date._bridgeToObjectiveC()().super.isa;
  id v17 = [v15 initWithCoordinate:isa v12 v13 0.0 v14 v14 -1.0 -1.0 -1.0 0xBFF0000000000000];

  (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
  [v17 setReferenceFrame:*(unsigned __int8 *)(a1 + v6[11])];
  uint64_t v18 = swift_bridgeObjectRetain();
  sub_101158244(v18);
  swift_bridgeObjectRelease();
  type metadata accessor for UUID();
  sub_100A24444(&qword_10163BC60, (void (*)(uint64_t))&type metadata accessor for UUID);
  Class v19 = Set._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  uint64_t v20 = *(unsigned __int8 *)(a1 + v6[12]);
  id v21 = objc_allocWithZone((Class)swift_getObjCClassFromMetadata());
  id v22 = [v21 initWithIdentifier:v7.super.isa type:v24 name:v11 location:v17 associatedBeacons:v19 approvalState:v20];

  sub_100A2E53C(a1, (uint64_t (*)(void))type metadata accessor for SafeLocation);
  return v22;
}

uint64_t sub_100A06A24()
{
  uint64_t v0 = type metadata accessor for Logger();
  sub_10001E384(v0, qword_10170E7C8);
  sub_100010324(v0, (uint64_t)qword_10170E7C8);
  return Logger.init(subsystem:category:)();
}

void sub_100A06AAC(void *a1, char a2, uint64_t a3, void (*a4)(void, void *), uint64_t a5, uint64_t a6)
{
  swift_beginAccess();
  uint64_t Strong = swift_unknownObjectWeakLoadStrong();
  if (Strong)
  {
    double v12 = (void *)Strong;
    if (a2)
    {
      id v14 = a1;
      a4(0, a1);
      sub_1003B579C(a1, 1);
    }
    else
    {
      uint64_t v13 = swift_allocObject();
      *(void *)(v13 + 16) = a4;
      *(void *)(v13 + 24) = a5;
      swift_retain();
      swift_retain();
      sub_100A06BBC(a6, (uint64_t)sub_100A32AC0, v13);

      swift_release();
      swift_release();
    }
  }
}

uint64_t sub_100A06BBC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = v3;
  uint64_t v39 = a3;
  uint64_t v36 = a2;
  uint64_t v32 = a1;
  uint64_t v5 = sub_10000588C(&qword_101655560);
  uint64_t v33 = *(void *)(v5 - 8);
  uint64_t v34 = v5;
  __chkstk_darwin(v5);
  NSUUID v7 = (char *)&v31 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = sub_10000588C(&qword_101655568);
  uint64_t v37 = *(void *)(v8 - 8);
  uint64_t v38 = v8;
  __chkstk_darwin(v8);
  uint64_t v35 = (char *)&v31 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = sub_100F144D4();
  uint64_t v11 = v10[2];
  double v12 = _swiftEmptyArrayStorage;
  if (v11)
  {
    uint64_t v13 = (unsigned __int8 *)(v10 + 4);
    do
    {
      int v16 = *v13++;
      if (v16 == 2)
      {
        char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
        unint64_t v40 = v12;
        if ((isUniquelyReferenced_nonNull_native & 1) == 0)
        {
          sub_1000B8444(0, v12[2] + 1, 1);
          double v12 = v40;
        }
        unint64_t v15 = v12[2];
        unint64_t v14 = v12[3];
        if (v15 >= v14 >> 1)
        {
          sub_1000B8444(v14 > 1, v15 + 1, 1);
          double v12 = v40;
        }
        void v12[2] = v15 + 1;
        *((unsigned char *)v12 + v15 + 32) = 2;
      }
      --v11;
    }
    while (v11);
  }
  swift_bridgeObjectRelease();
  unint64_t v40 = _swiftEmptyArrayStorage;
  uint64_t v18 = v12[2];
  if (v18)
  {
    swift_retain();
    for (uint64_t i = 0; i != v18; ++i)
    {
      uint64_t v20 = (char *)v12 + i;
      uint64_t v21 = sub_100A1C678(v20[32]);
      sub_100445D4C(v21);
    }
    swift_release_n();
    id v22 = v40;
  }
  else
  {
    swift_release();
    id v22 = _swiftEmptyArrayStorage;
  }
  swift_retain();
  uint64_t v23 = v32;
  swift_bridgeObjectRetain();
  uint64_t v24 = sub_100A2909C((uint64_t)v22, v4, v23);
  swift_bridgeObjectRelease();
  swift_release();
  swift_bridgeObjectRelease();
  unint64_t v40 = v24;
  sub_10000588C(&qword_101655570);
  sub_10000588C(&qword_101655578);
  sub_100062734(&qword_101655580, &qword_101655570);
  sub_100062734(&qword_101655588, &qword_101655578);
  Publishers.MergeMany.init<A>(_:)();
  sub_100062734(&qword_101655590, &qword_101655560);
  uint64_t v25 = v34;
  uint64_t v26 = v35;
  Publisher.collect()();
  (*(void (**)(char *, uint64_t))(v33 + 8))(v7, v25);
  uint64_t v27 = swift_allocObject();
  uint64_t v28 = v39;
  *(void *)(v27 + 16) = v36;
  *(void *)(v27 + 24) = v28;
  sub_100062734(&qword_101655598, &qword_101655568);
  swift_retain();
  uint64_t v29 = v38;
  Publisher.oneshot(_:)();
  swift_release();
  return (*(uint64_t (**)(char *, uint64_t))(v37 + 8))(v26, v29);
}

uint64_t sub_100A07010(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_100A07038(a1, a2, a3, (uint64_t)&unk_1015E35A8, (uint64_t)sub_100A2E3B4, (uint64_t)&unk_1015E35C0);
}

uint64_t sub_100A07038(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v22 = a6;
  uint64_t v8 = v6;
  uint64_t v12 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v25 = *(void *)(v12 - 8);
  __chkstk_darwin(v12);
  unint64_t v14 = (char *)&v21 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v24 = type metadata accessor for DispatchQoS();
  uint64_t v15 = *(void *)(v24 - 8);
  __chkstk_darwin(v24);
  id v17 = (char *)&v21 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v23 = *(void *)(v8 + 88);
  uint64_t v18 = (void *)swift_allocObject();
  v18[2] = a1;
  v18[3] = v8;
  v18[4] = a2;
  v18[5] = a3;
  aBlock[4] = a5;
  aBlock[5] = v18;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_1004B5480;
  aBlock[3] = v22;
  Class v19 = _Block_copy(aBlock);
  swift_bridgeObjectRetain();
  swift_retain();
  swift_retain();
  static DispatchQoS.unspecified.getter();
  uint64_t v26 = _swiftEmptyArrayStorage;
  sub_100A24444((unint64_t *)&qword_10163B7E0, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
  sub_10000588C((uint64_t *)&unk_10163F350);
  sub_100062734((unint64_t *)&qword_10163B7F0, (uint64_t *)&unk_10163F350);
  dispatch thunk of SetAlgebra.init<A>(_:)();
  OS_dispatch_queue.async(group:qos:flags:execute:)();
  _Block_release(v19);
  (*(void (**)(char *, uint64_t))(v25 + 8))(v14, v12);
  (*(void (**)(char *, uint64_t))(v15 + 8))(v17, v24);
  return swift_release();
}

uint64_t sub_100A07328(void *a1, int a2, int a3, void *aBlock, void (*a5)(uint64_t, id, void *))
{
  NSUUID v7 = _Block_copy(aBlock);
  type metadata accessor for UUID();
  uint64_t v8 = static Array._unconditionallyBridgeFromObjectiveC(_:)();
  _Block_copy(v7);
  id v9 = a1;
  a5(v8, v9, v7);
  _Block_release(v7);
  _Block_release(v7);

  return swift_bridgeObjectRelease();
}

uint64_t sub_100A073C8(uint64_t a1, int a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = v4;
  uint64_t v27 = a3;
  uint64_t v28 = a4;
  int v26 = a2;
  uint64_t v7 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v31 = *(void *)(v7 - 8);
  __chkstk_darwin(v7);
  id v9 = &v25[-((v8 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v30 = type metadata accessor for DispatchQoS();
  uint64_t v10 = *(void *)(v30 - 8);
  __chkstk_darwin(v30);
  uint64_t v12 = &v25[-((v11 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v13 = type metadata accessor for SafeLocation();
  uint64_t v14 = *(void *)(v13 - 8);
  uint64_t v15 = *(void *)(v14 + 64);
  __chkstk_darwin(v13 - 8);
  uint64_t v16 = &v25[-((v15 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v29 = *(void *)(v4 + 88);
  sub_100A32584(a1, (uint64_t)v16, (uint64_t (*)(void))type metadata accessor for SafeLocation);
  unint64_t v17 = (*(unsigned __int8 *)(v14 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v14 + 80);
  uint64_t v18 = v17 + v15;
  unint64_t v19 = (v17 + v15) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v20 = swift_allocObject();
  unint64_t v21 = v19 + v20;
  *(void *)(v20 + 16) = v5;
  sub_100A2E4D4((uint64_t)v16, v20 + v17, (uint64_t (*)(void))type metadata accessor for SafeLocation);
  *(unsigned char *)(v20 + v18) = v26;
  uint64_t v22 = v28;
  *(void *)(v21 + 8) = v27;
  *(void *)(v21 + 16) = v22;
  aBlock[4] = sub_100A2EBB4;
  aBlock[5] = v20;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_1004B5480;
  aBlock[3] = &unk_1015E3A20;
  uint64_t v23 = _Block_copy(aBlock);
  swift_retain();
  swift_retain();
  static DispatchQoS.unspecified.getter();
  uint64_t v32 = _swiftEmptyArrayStorage;
  sub_100A24444((unint64_t *)&qword_10163B7E0, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
  sub_10000588C((uint64_t *)&unk_10163F350);
  sub_100062734((unint64_t *)&qword_10163B7F0, (uint64_t *)&unk_10163F350);
  dispatch thunk of SetAlgebra.init<A>(_:)();
  OS_dispatch_queue.async(group:qos:flags:execute:)();
  _Block_release(v23);
  (*(void (**)(unsigned char *, uint64_t))(v31 + 8))(v9, v7);
  (*(void (**)(unsigned char *, uint64_t))(v10 + 8))(v12, v30);
  return swift_release();
}

uint64_t sub_100A07794(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = v3;
  uint64_t v23 = a2;
  uint64_t v24 = a3;
  uint64_t v26 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v29 = *(void *)(v26 - 8);
  __chkstk_darwin(v26);
  uint64_t v7 = (char *)&v23 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for DispatchQoS();
  uint64_t v27 = *(void *)(v8 - 8);
  uint64_t v28 = v8;
  __chkstk_darwin(v8);
  uint64_t v10 = (char *)&v23 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = type metadata accessor for UUID();
  uint64_t v12 = *(void *)(v11 - 8);
  uint64_t v13 = *(void *)(v12 + 64);
  __chkstk_darwin(v11);
  uint64_t v14 = (char *)&v23 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v25 = *(void *)(v3 + 88);
  (*(void (**)(char *, uint64_t, uint64_t))(v12 + 16))(v14, a1, v11);
  unint64_t v15 = (*(unsigned __int8 *)(v12 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v12 + 80);
  unint64_t v16 = (v13 + v15 + 7) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v17 = swift_allocObject();
  (*(void (**)(unint64_t, char *, uint64_t))(v12 + 32))(v17 + v15, v14, v11);
  *(void *)(v17 + v16) = v4;
  uint64_t v18 = (void *)(v17 + ((v16 + 15) & 0xFFFFFFFFFFFFFFF8));
  uint64_t v19 = v24;
  *uint64_t v18 = v23;
  v18[1] = v19;
  aBlock[4] = sub_100A2F110;
  aBlock[5] = v17;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_1004B5480;
  aBlock[3] = &unk_1015E3C00;
  uint64_t v20 = _Block_copy(aBlock);
  swift_retain();
  swift_retain();
  static DispatchQoS.unspecified.getter();
  uint64_t v30 = _swiftEmptyArrayStorage;
  sub_100A24444((unint64_t *)&qword_10163B7E0, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
  sub_10000588C((uint64_t *)&unk_10163F350);
  sub_100062734((unint64_t *)&qword_10163B7F0, (uint64_t *)&unk_10163F350);
  uint64_t v21 = v26;
  dispatch thunk of SetAlgebra.init<A>(_:)();
  OS_dispatch_queue.async(group:qos:flags:execute:)();
  _Block_release(v20);
  (*(void (**)(char *, uint64_t))(v29 + 8))(v7, v21);
  (*(void (**)(char *, uint64_t))(v27 + 8))(v10, v28);
  return swift_release();
}

uint64_t sub_100A07C64(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v22[0] = a2;
  uint64_t v6 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v25 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  uint64_t v8 = (char *)v22 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = type metadata accessor for DispatchQoS();
  uint64_t v23 = *(void *)(v9 - 8);
  uint64_t v24 = v9;
  __chkstk_darwin(v9);
  uint64_t v11 = (char *)v22 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = type metadata accessor for SafeLocation();
  uint64_t v13 = *(void *)(v12 - 8);
  uint64_t v14 = *(void *)(v13 + 64);
  __chkstk_darwin(v12 - 8);
  unint64_t v15 = (char *)v22 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v22[1] = *(void *)(v3 + 88);
  sub_100A32584(a1, (uint64_t)v15, (uint64_t (*)(void))type metadata accessor for SafeLocation);
  unint64_t v16 = (*(unsigned __int8 *)(v13 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v13 + 80);
  unint64_t v17 = (v14 + v16 + 7) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v18 = swift_allocObject();
  sub_100A2E4D4((uint64_t)v15, v18 + v16, (uint64_t (*)(void))type metadata accessor for SafeLocation);
  uint64_t v19 = (void *)(v18 + v17);
  *uint64_t v19 = v22[0];
  v19[1] = a3;
  *(void *)(v18 + ((v17 + 23) & 0xFFFFFFFFFFFFFFF8)) = v3;
  aBlock[4] = sub_100A2F528;
  aBlock[5] = v18;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_1004B5480;
  aBlock[3] = &unk_1015E3DB8;
  uint64_t v20 = _Block_copy(aBlock);
  swift_retain();
  swift_retain();
  static DispatchQoS.unspecified.getter();
  uint64_t v26 = _swiftEmptyArrayStorage;
  sub_100A24444((unint64_t *)&qword_10163B7E0, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
  sub_10000588C((uint64_t *)&unk_10163F350);
  sub_100062734((unint64_t *)&qword_10163B7F0, (uint64_t *)&unk_10163F350);
  dispatch thunk of SetAlgebra.init<A>(_:)();
  OS_dispatch_queue.async(group:qos:flags:execute:)();
  _Block_release(v20);
  (*(void (**)(char *, uint64_t))(v25 + 8))(v8, v6);
  (*(void (**)(char *, uint64_t))(v23 + 8))(v11, v24);
  return swift_release();
}

void sub_100A0802C(void *a1, int a2, void *a3, void *aBlock, void (*a5)(id, id, void *))
{
  uint64_t v8 = _Block_copy(aBlock);
  _Block_copy(v8);
  id v9 = a3;
  id v10 = a1;
  a5(v9, v10, v8);
  _Block_release(v8);
  _Block_release(v8);
}

uint64_t sub_100A080D8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v33 = a7;
  uint64_t v30 = a4;
  uint64_t v31 = a6;
  uint64_t v28 = a5;
  uint64_t v29 = a3;
  uint64_t v8 = v7;
  uint64_t v35 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v38 = *(void *)(v35 - 8);
  __chkstk_darwin(v35);
  uint64_t v34 = (char *)&v28 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = type metadata accessor for DispatchQoS();
  uint64_t v36 = *(void *)(v12 - 8);
  uint64_t v37 = v12;
  __chkstk_darwin(v12);
  uint64_t v14 = (char *)&v28 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = type metadata accessor for UUID();
  uint64_t v16 = *(void *)(v15 - 8);
  uint64_t v17 = *(void *)(v16 + 64);
  __chkstk_darwin(v15);
  uint64_t v18 = (char *)&v28 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v32 = *(void *)(v8 + 88);
  (*(void (**)(char *, uint64_t, uint64_t))(v16 + 16))(v18, a1, v15);
  unint64_t v19 = (*(unsigned __int8 *)(v16 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v16 + 80);
  unint64_t v20 = (v17 + v19 + 7) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v21 = swift_allocObject();
  *(void *)(v21 + 16) = a2;
  (*(void (**)(unint64_t, char *, uint64_t))(v16 + 32))(v21 + v19, v18, v15);
  *(void *)(v21 + v20) = v8;
  uint64_t v22 = (void *)(v21 + ((v20 + 15) & 0xFFFFFFFFFFFFFFF8));
  uint64_t v23 = v30;
  void *v22 = v29;
  v22[1] = v23;
  aBlock[4] = v31;
  aBlock[5] = v21;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_1004B5480;
  aBlock[3] = v33;
  uint64_t v24 = _Block_copy(aBlock);
  swift_bridgeObjectRetain();
  swift_retain();
  swift_retain();
  static DispatchQoS.unspecified.getter();
  uint64_t v39 = _swiftEmptyArrayStorage;
  sub_100A24444((unint64_t *)&qword_10163B7E0, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
  sub_10000588C((uint64_t *)&unk_10163F350);
  sub_100062734((unint64_t *)&qword_10163B7F0, (uint64_t *)&unk_10163F350);
  uint64_t v26 = v34;
  uint64_t v25 = v35;
  dispatch thunk of SetAlgebra.init<A>(_:)();
  OS_dispatch_queue.async(group:qos:flags:execute:)();
  _Block_release(v24);
  (*(void (**)(char *, uint64_t))(v38 + 8))(v26, v25);
  (*(void (**)(char *, uint64_t))(v36 + 8))(v14, v37);
  return swift_release();
}

uint64_t sub_100A084B0(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, const void *a5, void (*a6)(char *, uint64_t, id, void *))
{
  uint64_t v9 = type metadata accessor for UUID();
  uint64_t v10 = *(void *)(v9 - 8);
  __chkstk_darwin(v9);
  uint64_t v12 = (char *)&v17 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = _Block_copy(a5);
  static UUID._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v14 = static Array._unconditionallyBridgeFromObjectiveC(_:)();
  _Block_copy(v13);
  id v15 = a1;
  a6(v12, v14, v15, v13);
  _Block_release(v13);
  _Block_release(v13);

  swift_bridgeObjectRelease();
  return (*(uint64_t (**)(char *, uint64_t))(v10 + 8))(v12, v9);
}

unint64_t sub_100A08628(uint64_t a1)
{
  uint64_t v3 = type metadata accessor for SafeLocation();
  uint64_t v53 = *(void *)(v3 - 8);
  uint64_t v4 = __chkstk_darwin(v3 - 8);
  uint64_t v6 = (char *)&v44 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v4);
  uint64_t v8 = (char *)&v44 - v7;
  uint64_t v9 = sub_10000588C(&qword_101638CF0);
  __chkstk_darwin(v9 - 8);
  uint64_t v51 = (char *)&v44 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = *(void *)((char *)v1 + OBJC_IVAR____TtC12searchpartyd23BeaconManagerTrampoline_beaconStore);
  swift_retain();
  unint64_t v12 = (unint64_t)sub_100A28FCC(a1, v11);
  swift_release();
  unint64_t v45 = v12;
  if (v12 >> 62) {
    goto LABEL_40;
  }
  uint64_t v13 = *(void *)((v12 & 0xFFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain();
  for (; v13; uint64_t v13 = _CocoaArrayWrapper.endIndex.getter())
  {
    uint64_t v14 = 0;
    uint64_t v46 = v13;
    uint64_t v47 = (void *)((char *)v1 + OBJC_IVAR____TtC12searchpartyd23BeaconManagerTrampoline_implementation);
    unint64_t v48 = v45 & 0xC000000000000001;
    unint64_t v44 = v45 + 32;
    uint64_t v52 = v6;
    while (1)
    {
      id v17 = v48 ? (id)specialized _ArrayBuffer._getElementSlowPath(_:)() : *(id *)(v44 + 8 * v14);
      uint64_t v18 = v17;
      BOOL v19 = __OFADD__(v14, 1);
      uint64_t v20 = v14 + 1;
      if (v19) {
        break;
      }
      uint64_t v50 = v20;
      sub_10001CD44(v47, v47[3]);
      id v49 = v18;
      id v21 = [v18 identifier];
      uint64_t v22 = v51;
      static UUID._unconditionallyBridgeFromObjectiveC(_:)();

      uint64_t v23 = type metadata accessor for UUID();
      (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v23 - 8) + 56))(v22, 0, 1, v23);
      uint64_t v24 = sub_100B6C090();
      uint64_t v25 = v24[2];
      if (v25)
      {
        unint64_t v26 = 0;
        uint64_t v1 = _swiftEmptyArrayStorage;
        while (v26 < v24[2])
        {
          unint64_t v27 = (*(unsigned __int8 *)(v53 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v53 + 80);
          uint64_t v28 = *(void *)(v53 + 72);
          sub_100A32584((uint64_t)v24 + v27 + v28 * v26, (uint64_t)v8, (uint64_t (*)(void))type metadata accessor for SafeLocation);
          sub_100A2E4D4((uint64_t)v8, (uint64_t)v6, (uint64_t (*)(void))type metadata accessor for SafeLocation);
          char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
          uint64_t v55 = (uint64_t)v1;
          if ((isUniquelyReferenced_nonNull_native & 1) == 0)
          {
            sub_1000B79B0(0, v1[2] + 1, 1);
            uint64_t v1 = (void *)v55;
          }
          unint64_t v31 = v1[2];
          unint64_t v30 = v1[3];
          if (v31 >= v30 >> 1)
          {
            sub_1000B79B0(v30 > 1, v31 + 1, 1);
            uint64_t v1 = (void *)v55;
          }
          ++v26;
          v1[2] = v31 + 1;
          uint64_t v32 = (uint64_t)v1 + v27 + v31 * v28;
          uint64_t v6 = v52;
          sub_100A2E4D4((uint64_t)v52, v32, (uint64_t (*)(void))type metadata accessor for SafeLocation);
          if (v25 == v26) {
            goto LABEL_19;
          }
        }
        __break(1u);
        break;
      }
      uint64_t v1 = _swiftEmptyArrayStorage;
LABEL_19:
      uint64_t v33 = swift_bridgeObjectRelease();
      __chkstk_darwin(v33);
      uint64_t v34 = (uint64_t)v51;
      *(&v44 - 2) = (unint64_t)v51;
      uint64_t v35 = sub_1000A4684((uint64_t (*)(char *))sub_1006C5824, &v44 - 4, (uint64_t)v1);
      uint64_t v36 = (uint64_t)sub_100655DC4(v35);
      swift_bridgeObjectRelease();
      sub_10001DAB4(v34, &qword_101638CF0);
      if ((unint64_t)v36 >> 62)
      {
        swift_bridgeObjectRetain();
        uint64_t v1 = (void *)_CocoaArrayWrapper.endIndex.getter();
        swift_bridgeObjectRelease();
      }
      else
      {
        uint64_t v1 = *(void **)((v36 & 0xFFFFFFFFFFFFFF8) + 0x10);
      }
      sub_10001D4B0(0, (unint64_t *)&unk_101653D70);
      sub_10012E2E4((unint64_t *)&qword_1016556C0, (unint64_t *)&unk_101653D70);
      uint64_t v55 = Set.init(minimumCapacity:)();
      if ((unint64_t)v36 >> 62)
      {
        if (v36 < 0) {
          uint64_t v1 = (void *)v36;
        }
        else {
          uint64_t v1 = (void *)(v36 & 0xFFFFFFFFFFFFFF8);
        }
        swift_bridgeObjectRetain();
        uint64_t v37 = _CocoaArrayWrapper.endIndex.getter();
        swift_bridgeObjectRelease();
        if (!v37) {
          goto LABEL_4;
        }
      }
      else
      {
        uint64_t v37 = *(void *)((v36 & 0xFFFFFFFFFFFFFF8) + 0x10);
        if (!v37) {
          goto LABEL_4;
        }
      }
      if (v37 < 1) {
        goto LABEL_39;
      }
      if ((v36 & 0xC000000000000001) != 0)
      {
        for (uint64_t i = 0; i != v37; ++i)
        {
          uint64_t v39 = (void *)specialized _ArrayBuffer._getElementSlowPath(_:)();
          sub_100DCD7C4(&v54, v39);
        }
      }
      else
      {
        for (uint64_t j = 0; j != v37; ++j)
        {
          uint64_t v41 = *(void **)(v36 + 8 * j + 32);
          sub_100DCD7C4(&v54, v41);
        }
      }
LABEL_4:
      swift_bridgeObjectRelease();
      uint64_t v1 = (void *)v55;
      Class isa = Set._bridgeToObjectiveC()().super.isa;
      swift_bridgeObjectRelease();
      id v16 = v49;
      [v49 setSafeLocations:isa];

      uint64_t v14 = v50;
      if (v50 == v46) {
        goto LABEL_41;
      }
    }
    __break(1u);
LABEL_39:
    __break(1u);
LABEL_40:
    swift_bridgeObjectRetain();
  }
LABEL_41:
  unint64_t v42 = v45;
  swift_bridgeObjectRelease();
  return v42;
}

uint64_t sub_100A08D58(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2;
  if (qword_101636EE0 != -1) {
    swift_once();
  }
  uint64_t v6 = type metadata accessor for Logger();
  sub_100010324(v6, (uint64_t)qword_10170E7C8);
  uint64_t v7 = Logger.logObject.getter();
  os_log_type_t v8 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v7, v8))
  {
    uint64_t v9 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v9 = 0;
    _os_log_impl((void *)&_mh_execute_header, v7, v8, "Client forces LOI based safe location refresh.", v9, 2u);
    swift_slowDealloc();
  }

  sub_10001CD44((void *)(v3 + OBJC_IVAR____TtC12searchpartyd23BeaconManagerTrampoline_implementation), *(void *)(v3 + OBJC_IVAR____TtC12searchpartyd23BeaconManagerTrampoline_implementation + 24));
  uint64_t v10 = swift_allocObject();
  *(void *)(v10 + 16) = a1;
  *(void *)(v10 + 24) = a2;
  uint64_t v11 = type metadata accessor for Transaction();
  __chkstk_darwin(v11);
  swift_retain();
  swift_retain();
  static Transaction.named<A>(_:with:)();
  swift_release();
  return swift_release();
}

uint64_t sub_100A08F30(uint64_t a1, __int16 a2, uint64_t (*a3)(BOOL))
{
  if (qword_101636EE0 != -1) {
    swift_once();
  }
  uint64_t v5 = type metadata accessor for Logger();
  sub_100010324(v5, (uint64_t)qword_10170E7C8);
  uint64_t v6 = Logger.logObject.getter();
  os_log_type_t v7 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v6, v7))
  {
    os_log_type_t v8 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)os_log_type_t v8 = 0;
    _os_log_impl((void *)&_mh_execute_header, v6, v7, "Update ALL LOI based safe location finished.", v8, 2u);
    swift_slowDealloc();
  }

  return a3((a2 & 0x100) == 0);
}

void sub_100A090D8(void *a1, int a2, void *aBlock, void (*a4)(void))
{
  uint64_t v6 = _Block_copy(aBlock);
  _Block_copy(v6);
  id v7 = a1;
  a4();
  _Block_release(v6);
  _Block_release(v6);
}

void sub_100A09154(void *a1, char a2, void (*a3)(uint64_t, void *))
{
  if (a2)
  {
    uint64_t v5 = qword_101636EE0;
    id v6 = a1;
    if (v5 != -1) {
      swift_once();
    }
    uint64_t v7 = type metadata accessor for Logger();
    sub_100010324(v7, (uint64_t)qword_10170E7C8);
    id v8 = v6;
    uint64_t v9 = Logger.logObject.getter();
    os_log_type_t v10 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v9, v10))
    {
      uint64_t v11 = (uint8_t *)swift_slowAlloc();
      uint64_t v15 = swift_slowAlloc();
      *(_DWORD *)uint64_t v11 = 136315138;
      type metadata accessor for SPSeparationMonitoringError(0);
      sub_100A24444(&qword_101638238, type metadata accessor for SPSeparationMonitoringError);
      uint64_t v12 = Error.localizedDescription.getter();
      sub_1008FA0F0(v12, v13, &v15);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      sub_1003B579C(a1, 1);
      sub_1003B579C(a1, 1);
      _os_log_impl((void *)&_mh_execute_header, v9, v10, "XPC call failed with error: %s", v11, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      sub_1003B579C(a1, 1);
      sub_1003B579C(a1, 1);
    }

    id v14 = v8;
    a3(0, a1);
    sub_1003B579C(a1, 1);
    sub_1003B579C(a1, 1);
  }
  else
  {
    a3(1, 0);
  }
}

uint64_t sub_100A093D8()
{
  uint64_t v1 = *(void *)(v0 + 216);
  if (v1)
  {
    uint64_t v2 = *(void (**)(uint64_t))(*(void *)v1 + 168);
    uint64_t v3 = swift_retain();
    v2(v3);
    swift_release();
  }
  sub_100ED28F8();
  swift_retain_n();
  sub_100AB24F0();
  if (qword_1016371D8 != -1) {
    swift_once();
  }
  SynchronousCache.cachedValue<A>(key:computeBlock:)();
  swift_bridgeObjectRelease();
  if (v7 == 1)
  {
    sub_100A0972C((uint64_t)sub_100A30774, (uint64_t)&unk_1015E4290);
    uint64_t v4 = type metadata accessor for Transaction();
    __chkstk_darwin(v4);
    swift_retain();
    static Transaction.named<A>(_:with:)();
    swift_release();
    return swift_release_n();
  }
  else
  {
    uint64_t v6 = type metadata accessor for Transaction();
    __chkstk_darwin(v6);
    static Transaction.named<A>(_:with:)();
    swift_release_n();
    return swift_release();
  }
}

uint64_t sub_100A09660()
{
  return swift_release();
}

uint64_t sub_100A0972C(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  id v8 = (char *)v15 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = type metadata accessor for DispatchQoS();
  uint64_t v10 = *(void *)(v9 - 8);
  __chkstk_darwin(v9);
  uint64_t v12 = (char *)v15 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15[0] = *(void *)(v2 + 96);
  aBlock[4] = a1;
  uint64_t v17 = v2;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_1004B5480;
  aBlock[3] = a2;
  unint64_t v13 = _Block_copy(aBlock);
  swift_retain();
  static DispatchQoS.unspecified.getter();
  v15[1] = _swiftEmptyArrayStorage;
  sub_100A24444((unint64_t *)&qword_10163B7E0, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
  sub_10000588C((uint64_t *)&unk_10163F350);
  sub_100062734((unint64_t *)&qword_10163B7F0, (uint64_t *)&unk_10163F350);
  dispatch thunk of SetAlgebra.init<A>(_:)();
  OS_dispatch_queue.async(group:qos:flags:execute:)();
  _Block_release(v13);
  (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  (*(void (**)(char *, uint64_t))(v10 + 8))(v12, v9);
  return swift_release();
}

BOOL sub_100A099C0(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_10000588C(&qword_101638CF0);
  __chkstk_darwin(v4 - 8);
  uint64_t v6 = (char *)&v15 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for UUID();
  uint64_t v8 = *(void *)(v7 - 8);
  __chkstk_darwin(v7);
  uint64_t v10 = (char *)&v15 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10001D074(a2, (uint64_t)v6, &qword_101638CF0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v8 + 48))(v6, 1, v7) == 1)
  {
    sub_10001DAB4((uint64_t)v6, &qword_101638CF0);
    return 1;
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v8 + 32))(v10, v6, v7);
    uint64_t v12 = type metadata accessor for SafeLocation();
    uint64_t v13 = *(void *)(a1 + *(int *)(v12 + 52));
    __chkstk_darwin(v12);
    *(&v15 - 2) = (uint64_t)v10;
    swift_bridgeObjectRetain();
    BOOL v11 = sub_100A9F998((uint64_t (*)(char *))sub_1005E4C34, (uint64_t)(&v15 - 4), v13);
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v7);
  }
  return v11;
}

uint64_t sub_100A09BD0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v75 = a3;
  uint64_t v80 = a4;
  uint64_t v7 = type metadata accessor for UUID();
  uint64_t v8 = *(void *)(v7 - 8);
  uint64_t v76 = v7;
  uint64_t v77 = v8;
  uint64_t v9 = __chkstk_darwin(v7);
  unint64_t v74 = (char *)&v70 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = __chkstk_darwin(v9);
  uint64_t v73 = (char *)&v70 - v12;
  uint64_t v13 = __chkstk_darwin(v11);
  uint64_t v72 = (char *)&v70 - v14;
  __chkstk_darwin(v13);
  id v16 = (char *)&v70 - v15;
  uint64_t v17 = sub_10000588C(&qword_10163B9F0);
  __chkstk_darwin(v17 - 8);
  BOOL v19 = (char *)&v70 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v20 = type metadata accessor for OwnedBeaconRecord();
  uint64_t v21 = *(void *)(v20 - 8);
  __chkstk_darwin(v20);
  uint64_t v23 = (char *)&v70 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100ACD178((uint64_t)v19);
  uint64_t v78 = v21;
  uint64_t v79 = v20;
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v21 + 48))(v19, 1, v20) != 1)
  {
    sub_100A2E4D4((uint64_t)v19, (uint64_t)v23, (uint64_t (*)(void))type metadata accessor for OwnedBeaconRecord);
    uint64_t v33 = type metadata accessor for LeashRecord();
    uint64_t v34 = *(void *)(v75 + *(int *)(v33 + 24));
    __chkstk_darwin(v33);
    *(&v70 - 2) = a1;
    swift_bridgeObjectRetain();
    BOOL v35 = sub_100A9F998((uint64_t (*)(char *))sub_1006CD4F8, (uint64_t)(&v70 - 4), v34);
    swift_bridgeObjectRelease();
    uint64_t v36 = (uint64_t)v23;
    if (v35)
    {
      unsigned __int8 v37 = sub_1006A5804((uint64_t)v23, a2);
      uint64_t v38 = v77;
      if (v37)
      {
        if ((sub_100694BA8((uint64_t)v23, a2) & 1) == 0)
        {
          uint64_t v68 = v80;
          sub_100A2E4D4((uint64_t)v23, v80, (uint64_t (*)(void))type metadata accessor for OwnedBeaconRecord);
          uint64_t v32 = 0;
          return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v78 + 56))(v68, v32, 1, v79);
        }
        if (qword_101636EE0 != -1) {
          swift_once();
        }
        uint64_t v39 = type metadata accessor for Logger();
        sub_100010324(v39, (uint64_t)qword_10170E7C8);
        unint64_t v40 = v72;
        uint64_t v41 = a1;
        uint64_t v42 = v76;
        (*(void (**)(char *, uint64_t, uint64_t))(v38 + 16))(v72, v41, v76);
        uint64_t v43 = Logger.logObject.getter();
        os_log_type_t v44 = static os_log_type_t.error.getter();
        if (os_log_type_enabled(v43, v44))
        {
          unint64_t v45 = v40;
          uint64_t v46 = (uint8_t *)swift_slowAlloc();
          uint64_t v47 = swift_slowAlloc();
          uint64_t v75 = v4;
          uint64_t v82 = v47;
          uint64_t v71 = v23;
          *(_DWORD *)uint64_t v46 = 136315138;
          unint64_t v74 = (char *)(v46 + 4);
          sub_100A24444((unint64_t *)&qword_101638B10, (void (*)(uint64_t))&type metadata accessor for UUID);
          uint64_t v48 = dispatch thunk of CustomStringConvertible.description.getter();
          uint64_t v81 = sub_1008FA0F0(v48, v49, &v82);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease();
          (*(void (**)(char *, uint64_t))(v38 + 8))(v45, v42);
          _os_log_impl((void *)&_mh_execute_header, v43, v44, "Received separation alert request for paused beacon: %s", v46, 0xCu);
          uint64_t v32 = 1;
          swift_arrayDestroy();
          swift_slowDealloc();
          swift_slowDealloc();

          sub_100A2E53C((uint64_t)v71, (uint64_t (*)(void))type metadata accessor for OwnedBeaconRecord);
          goto LABEL_24;
        }
      }
      else
      {
        if (qword_101636EE0 != -1) {
          swift_once();
        }
        uint64_t v60 = type metadata accessor for Logger();
        sub_100010324(v60, (uint64_t)qword_10170E7C8);
        unint64_t v40 = v73;
        uint64_t v61 = a1;
        uint64_t v42 = v76;
        (*(void (**)(char *, uint64_t, uint64_t))(v38 + 16))(v73, v61, v76);
        uint64_t v43 = Logger.logObject.getter();
        os_log_type_t v62 = static os_log_type_t.error.getter();
        if (os_log_type_enabled(v43, v62))
        {
          uint64_t v63 = v40;
          Swift::String v64 = (uint8_t *)swift_slowAlloc();
          uint64_t v65 = swift_slowAlloc();
          uint64_t v75 = v4;
          uint64_t v82 = v65;
          uint64_t v71 = v23;
          *(_DWORD *)Swift::String v64 = 136315138;
          unint64_t v74 = (char *)(v64 + 4);
          sub_100A24444((unint64_t *)&qword_101638B10, (void (*)(uint64_t))&type metadata accessor for UUID);
          uint64_t v66 = dispatch thunk of CustomStringConvertible.description.getter();
          uint64_t v81 = sub_1008FA0F0(v66, v67, &v82);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease();
          (*(void (**)(char *, uint64_t))(v38 + 8))(v63, v42);
          _os_log_impl((void *)&_mh_execute_header, v43, v62, "Received separation alert request for unsupported beacon: %s", v64, 0xCu);
          uint64_t v32 = 1;
          swift_arrayDestroy();
          swift_slowDealloc();
          swift_slowDealloc();

          sub_100A2E53C((uint64_t)v71, (uint64_t (*)(void))type metadata accessor for OwnedBeaconRecord);
          goto LABEL_24;
        }
      }

      (*(void (**)(char *, uint64_t))(v38 + 8))(v40, v42);
      sub_100A2E53C((uint64_t)v23, (uint64_t (*)(void))type metadata accessor for OwnedBeaconRecord);
      uint64_t v32 = 1;
      goto LABEL_24;
    }
    uint64_t v75 = v4;
    uint64_t v50 = v77;
    if (qword_101636EE0 != -1) {
      swift_once();
    }
    uint64_t v51 = type metadata accessor for Logger();
    sub_100010324(v51, (uint64_t)qword_10170E7C8);
    uint64_t v52 = v74;
    uint64_t v53 = v76;
    (*(void (**)(char *, uint64_t, uint64_t))(v50 + 16))(v74, a1, v76);
    id v54 = Logger.logObject.getter();
    os_log_type_t v55 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v54, v55))
    {
      uint64_t v56 = (uint8_t *)swift_slowAlloc();
      uint64_t v57 = swift_slowAlloc();
      uint64_t v71 = (char *)v36;
      uint64_t v82 = v57;
      *(_DWORD *)uint64_t v56 = 136315138;
      uint64_t v73 = (char *)(v56 + 4);
      sub_100A24444((unint64_t *)&qword_101638B10, (void (*)(uint64_t))&type metadata accessor for UUID);
      uint64_t v58 = dispatch thunk of CustomStringConvertible.description.getter();
      uint64_t v81 = sub_1008FA0F0(v58, v59, &v82);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      (*(void (**)(char *, uint64_t))(v50 + 8))(v52, v53);
      _os_log_impl((void *)&_mh_execute_header, v54, v55, "Received separation alert request for non-leashed beacon: %s", v56, 0xCu);
      uint64_t v32 = 1;
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      sub_100A2E53C((uint64_t)v71, (uint64_t (*)(void))type metadata accessor for OwnedBeaconRecord);
      goto LABEL_24;
    }

    (*(void (**)(char *, uint64_t))(v50 + 8))(v52, v53);
    sub_100A2E53C(v36, (uint64_t (*)(void))type metadata accessor for OwnedBeaconRecord);
LABEL_23:
    uint64_t v32 = 1;
    goto LABEL_24;
  }
  uint64_t v75 = v4;
  sub_10001DAB4((uint64_t)v19, &qword_10163B9F0);
  if (qword_101636EE0 != -1) {
    swift_once();
  }
  uint64_t v24 = type metadata accessor for Logger();
  sub_100010324(v24, (uint64_t)qword_10170E7C8);
  uint64_t v25 = v76;
  uint64_t v26 = v77;
  (*(void (**)(char *, uint64_t, uint64_t))(v77 + 16))(v16, a1, v76);
  unint64_t v27 = Logger.logObject.getter();
  os_log_type_t v28 = static os_log_type_t.error.getter();
  if (!os_log_type_enabled(v27, v28))
  {
    (*(void (**)(char *, uint64_t))(v26 + 8))(v16, v25);

    goto LABEL_23;
  }
  uint64_t v29 = (uint8_t *)swift_slowAlloc();
  uint64_t v82 = swift_slowAlloc();
  *(_DWORD *)uint64_t v29 = 136315138;
  unint64_t v74 = (char *)(v29 + 4);
  sub_100A24444((unint64_t *)&qword_101638B10, (void (*)(uint64_t))&type metadata accessor for UUID);
  uint64_t v30 = dispatch thunk of CustomStringConvertible.description.getter();
  uint64_t v81 = sub_1008FA0F0(v30, v31, &v82);
  UnsafeMutableRawBufferPointer.copyMemory(from:)();
  swift_bridgeObjectRelease();
  (*(void (**)(char *, uint64_t))(v26 + 8))(v16, v25);
  _os_log_impl((void *)&_mh_execute_header, v27, v28, "Received separation alert request for unknown beacon: %s", v29, 0xCu);
  swift_arrayDestroy();
  swift_slowDealloc();
  swift_slowDealloc();

  uint64_t v32 = 1;
LABEL_24:
  uint64_t v68 = v80;
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v78 + 56))(v68, v32, 1, v79);
}

void sub_100A0A76C(void *a1, uint64_t a2, char a3, void *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v44 = a8;
  id v45 = a4;
  uint64_t v42 = a7;
  uint64_t v14 = sub_10000588C(&qword_10164DBB0);
  __chkstk_darwin(v14 - 8);
  uint64_t v43 = (char *)&v37 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (a3)
  {
    v47[0] = a1;
    type metadata accessor for SPSeparationMonitoringError(0);
    sub_100A24444(&qword_101638238, type metadata accessor for SPSeparationMonitoringError);
    swift_willThrowTypedImpl();
    if (qword_101636EE0 != -1) {
      swift_once();
    }
    uint64_t v16 = type metadata accessor for Logger();
    sub_100010324(v16, (uint64_t)qword_10170E7C8);
    sub_100A30A30(a1, a2, 1);
    id v17 = v45;
    sub_100A30A30(a1, a2, 1);
    id v18 = v17;
    BOOL v19 = Logger.logObject.getter();
    os_log_type_t v20 = static os_log_type_t.error.getter();
    int v21 = v20;
    if (os_log_type_enabled(v19, v20))
    {
      uint64_t v22 = swift_slowAlloc();
      uint64_t v40 = a6;
      uint64_t v23 = v22;
      uint64_t v24 = (void *)swift_slowAlloc();
      uint64_t v39 = swift_slowAlloc();
      v46[0] = v39;
      *(_DWORD *)uint64_t v23 = 138412546;
      os_log_t v38 = v19;
      uint64_t v41 = a5;
      v47[0] = v18;
      HIDWORD(v37) = v21;
      id v25 = v18;
      a5 = v41;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *uint64_t v24 = v18;

      *(_WORD *)(v23 + 12) = 2080;
      v47[0] = a1;
      v47[1] = a2;
      char v48 = 1;
      id v26 = a1;
      sub_10000588C((uint64_t *)&unk_1016555D0);
      uint64_t v27 = String.init<A>(describing:)();
      v47[0] = sub_1008FA0F0(v27, v28, v46);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      sub_100A30A40(a1, a2, 1);
      sub_100A30A40(a1, a2, 1);
      BOOL v19 = v38;
      _os_log_impl((void *)&_mh_execute_header, v38, BYTE4(v37), "Failed to reverse geocode location %@ for notification, result: %s", (uint8_t *)v23, 0x16u);
      sub_10000588C((uint64_t *)&unk_101638EA0);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_arrayDestroy();
      swift_slowDealloc();
      a6 = v40;
      swift_slowDealloc();
    }
    else
    {

      sub_100A30A40(a1, a2, 1);
      sub_100A30A40(a1, a2, 1);
    }

    a1 = 0;
    a2 = 0;
  }
  else
  {
    swift_bridgeObjectRetain();
  }
  if (*(void *)(a5 + 40))
  {
    swift_retain();
    sub_1004EFE60((uint64_t)v46);
    swift_release();
    sub_10001D608((uint64_t)v46, (uint64_t)v47, &qword_1016482D0);
    int v29 = sub_10028E60C((uint64_t)v47);
    if (v29 != 1) {
      sub_100A30BB4(v46);
    }
    BOOL v30 = v29 != 1;
    uint64_t v31 = type metadata accessor for TaskPriority();
    uint64_t v32 = (uint64_t)v43;
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v31 - 8) + 56))(v43, 1, 1, v31);
    uint64_t v33 = swift_allocObject();
    *(void *)(v33 + 16) = 0;
    *(void *)(v33 + 24) = 0;
    *(void *)(v33 + 32) = a5;
    *(void *)(v33 + 40) = a6;
    uint64_t v35 = v44;
    id v34 = v45;
    *(void *)(v33 + 48) = v42;
    *(void *)(v33 + 56) = v35;
    *(void *)(v33 + 64) = v34;
    *(void *)(v33 + 72) = a9;
    *(unsigned char *)(v33 + 80) = v30;
    *(void *)(v33 + 88) = a1;
    *(void *)(v33 + 96) = a2;
    id v36 = v34;
    swift_retain();
    swift_retain();
    swift_bridgeObjectRetain();
    sub_100885EBC(v32, (uint64_t)&unk_1016555C8, v33);
    swift_release();
  }
  else
  {
    __break(1u);
  }
}

uint64_t sub_100A0AC1C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  *(void *)(v8 + 336) = v18;
  *(void *)(v8 + 344) = v19;
  *(unsigned char *)(v8 + 777) = v17;
  *(void *)(v8 + 320) = a8;
  *(void *)(v8 + 328) = v16;
  *(void *)(v8 + 304) = a6;
  *(void *)(v8 + 312) = a7;
  *(void *)(v8 + 288) = a4;
  *(void *)(v8 + 296) = a5;
  *(void *)(v8 + 352) = sub_10000588C(&qword_101653F20);
  *(void *)(v8 + 360) = swift_task_alloc();
  *(void *)(v8 + 368) = swift_task_alloc();
  *(void *)(v8 + 376) = swift_task_alloc();
  uint64_t v9 = type metadata accessor for SafeLocation();
  *(void *)(v8 + 384) = v9;
  *(void *)(v8 + 392) = *(void *)(v9 - 8);
  *(void *)(v8 + 400) = swift_task_alloc();
  *(void *)(v8 + 408) = swift_task_alloc();
  *(void *)(v8 + 416) = swift_task_alloc();
  uint64_t v10 = type metadata accessor for AnyAnalyticsEvent();
  *(void *)(v8 + 424) = v10;
  *(void *)(v8 + 432) = *(void *)(v10 - 8);
  *(void *)(v8 + 440) = swift_task_alloc();
  *(void *)(v8 + 448) = type metadata accessor for StableIdentifier();
  *(void *)(v8 + 456) = swift_task_alloc();
  uint64_t v11 = type metadata accessor for OwnedBeaconRecord();
  *(void *)(v8 + 464) = v11;
  uint64_t v12 = *(void *)(v11 - 8);
  *(void *)(v8 + 472) = v12;
  *(void *)(v8 + 480) = *(void *)(v12 + 64);
  *(void *)(v8 + 488) = swift_task_alloc();
  *(void *)(v8 + 496) = swift_task_alloc();
  *(void *)(v8 + 504) = swift_task_alloc();
  *(void *)(v8 + 512) = swift_task_alloc();
  *(void *)(v8 + 520) = swift_task_alloc();
  *(void *)(v8 + 528) = swift_task_alloc();
  *(void *)(v8 + 536) = swift_task_alloc();
  uint64_t v13 = type metadata accessor for UUID();
  *(void *)(v8 + 544) = v13;
  *(void *)(v8 + 552) = *(void *)(v13 - 8);
  *(void *)(v8 + 560) = swift_task_alloc();
  *(void *)(v8 + 568) = swift_task_alloc();
  *(void *)(v8 + 576) = swift_task_alloc();
  return _swift_task_switch(sub_100A0AF1C, 0, 0);
}

uint64_t sub_100A0AF1C()
{
  uint64_t v1 = qword_1016375E8;
  swift_retain();
  if (v1 != -1) {
    swift_once();
  }
  swift_beginAccess();
  uint64_t result = sub_10001D074((uint64_t)&xmmword_10166E8F0, v0 + 168, (uint64_t *)&unk_101638D30);
  if (*(void *)(v0 + 192))
  {
    sub_10001CEB0((long long *)(v0 + 168), v0 + 128);
    swift_release();
    sub_10001CD44((void *)(v0 + 128), *(void *)(v0 + 152));
    uint64_t v4 = (uint64_t (__cdecl *)())((char *)&dword_101639270 + dword_101639270);
    uint64_t v3 = (void *)swift_task_alloc();
    *(void *)(v0 + 584) = v3;
    *uint64_t v3 = v0;
    v3[1] = sub_100A0B06C;
    return v4();
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_100A0B06C(uint64_t a1)
{
  *(void *)(*(void *)v1 + 592) = a1;
  swift_task_dealloc();
  return _swift_task_switch(sub_100A0B16C, 0, 0);
}

uint64_t sub_100A0B16C()
{
  uint64_t v1 = (uint64_t)(v0 + 16);
  if (v0[74])
  {
    uint64_t v2 = v0[39];
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v1);
    int64_t v3 = *(void *)(v2 + 16);
    v0[75] = v3;
    uint64_t v4 = _swiftEmptyArrayStorage;
    if (v3)
    {
      uint64_t v5 = v0[69];
      uint64_t v6 = v0[59];
      uint64_t v24 = v0[58];
      id v25 = _swiftEmptyArrayStorage;
      uint64_t v7 = v0[39];
      sub_1000B7034(0, v3, 0);
      uint64_t v8 = v7 + ((*(unsigned __int8 *)(v6 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80));
      uint64_t v9 = *(void *)(v6 + 72);
      uint64_t v23 = v9;
      uint64_t v4 = _swiftEmptyArrayStorage;
      do
      {
        uint64_t v10 = v0[72];
        uint64_t v11 = v0[68];
        uint64_t v12 = v0[67];
        sub_100A32584(v8, v12, (uint64_t (*)(void))type metadata accessor for OwnedBeaconRecord);
        (*(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 16))(v10, v12 + *(int *)(v24 + 20), v11);
        sub_100A2E53C(v12, (uint64_t (*)(void))type metadata accessor for OwnedBeaconRecord);
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        {
          sub_1000B7034(0, v4[2] + 1, 1);
          uint64_t v9 = v23;
          uint64_t v4 = v25;
        }
        unint64_t v14 = v4[2];
        unint64_t v13 = v4[3];
        if (v14 >= v13 >> 1)
        {
          sub_1000B7034(v13 > 1, v14 + 1, 1);
          uint64_t v9 = v23;
          uint64_t v4 = v25;
        }
        uint64_t v15 = v0[72];
        uint64_t v16 = v0[68];
        v4[2] = v14 + 1;
        (*(void (**)(unint64_t, uint64_t, uint64_t))(v5 + 32))((unint64_t)v4+ ((*(unsigned __int8 *)(v5 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80))+ *(void *)(v5 + 72) * v14, v15, v16);
        id v25 = v4;
        v8 += v9;
        --v3;
      }
      while (v3);
    }
    v0[76] = sub_101158244((uint64_t)v4);
    swift_bridgeObjectRelease();
    char v17 = (void *)swift_task_alloc();
    v0[77] = v17;
    *char v17 = v0;
    v17[1] = sub_100A0B584;
    uint64_t v18 = v0[39];
    return sub_100094E58(v18);
  }
  else
  {
    os_log_type_t v20 = (void (*)(void *, uint64_t))v0[37];
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v1);
    type metadata accessor for SPSeparationMonitoringError(0);
    v0[30] = 12;
    sub_1004A0BC8((uint64_t)_swiftEmptyArrayStorage);
    sub_100A24444(&qword_1016386A0, type metadata accessor for SPSeparationMonitoringError);
    _BridgedStoredNSError.init(_:userInfo:)();
    int v21 = (void *)v0[29];
    v20(v21, 1);

    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v22 = (uint64_t (*)(void))v0[1];
    return v22();
  }
}

uint64_t sub_100A0B584(uint64_t a1)
{
  uint64_t v4 = *v2;
  swift_task_dealloc();
  if (v1)
  {
    swift_errorRelease();
    uint64_t v5 = sub_100A0C244;
  }
  else
  {
    *(void *)(v4 + 624) = a1;
    uint64_t v5 = sub_100A0B6B0;
  }
  return _swift_task_switch(v5, 0, 0);
}

uint64_t sub_100A0B6B0()
{
  uint64_t v89 = v0;
  uint64_t v1 = *(void *)(v0 + 624);
  *(void *)(v0 + 632) = v1;
  int64_t v2 = *(void *)(v1 + 16);
  int64_t v3 = _swiftEmptyArrayStorage;
  if (v2)
  {
    uint64_t v4 = *(void *)(v0 + 552);
    uint64_t v5 = *(void *)(v0 + 472);
    uint64_t v87 = *(void *)(v0 + 464);
    uint64_t v88 = _swiftEmptyArrayStorage;
    sub_1000B7034(0, v2, 0);
    uint64_t v6 = v1 + ((*(unsigned __int8 *)(v5 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80));
    uint64_t v86 = *(void *)(v5 + 72);
    int64_t v3 = _swiftEmptyArrayStorage;
    do
    {
      uint64_t v7 = *(void *)(v0 + 568);
      uint64_t v8 = *(void *)(v0 + 544);
      uint64_t v9 = *(void *)(v0 + 536);
      sub_100A32584(v6, v9, (uint64_t (*)(void))type metadata accessor for OwnedBeaconRecord);
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v4 + 16))(v7, v9 + *(int *)(v87 + 20), v8);
      sub_100A2E53C(v9, (uint64_t (*)(void))type metadata accessor for OwnedBeaconRecord);
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        sub_1000B7034(0, v3[2] + 1, 1);
        int64_t v3 = v88;
      }
      unint64_t v11 = v3[2];
      unint64_t v10 = v3[3];
      if (v11 >= v10 >> 1)
      {
        sub_1000B7034(v10 > 1, v11 + 1, 1);
        int64_t v3 = v88;
      }
      uint64_t v12 = *(void *)(v0 + 568);
      uint64_t v13 = *(void *)(v0 + 544);
      v3[2] = v11 + 1;
      (*(void (**)(unint64_t, uint64_t, uint64_t))(v4 + 32))((unint64_t)v3+ ((*(unsigned __int8 *)(v4 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80))+ *(void *)(v4 + 72) * v11, v12, v13);
      uint64_t v88 = v3;
      v6 += v86;
      --v2;
    }
    while (v2);
  }
  uint64_t v14 = *(void *)(v0 + 608);
  uint64_t v15 = sub_101158244((uint64_t)v3);
  swift_bridgeObjectRelease();
  if (*(void *)(v15 + 16) <= *(void *)(v14 + 16) >> 3)
  {
    uint64_t v88 = *(void **)(v0 + 608);
    sub_10089EA08(v15);
    swift_bridgeObjectRelease();
    uint64_t v16 = v88;
  }
  else
  {
    uint64_t v16 = sub_1008A160C(v15, *(void *)(v0 + 608));
    swift_bridgeObjectRelease();
  }
  *(void *)(v0 + 640) = v16;
  if (!*(void *)(v0 + 600))
  {
LABEL_26:
    uint64_t v44 = *(void *)(v0 + 632);
    swift_bridgeObjectRelease();
    uint64_t v45 = *(void *)(v44 + 16);
    *(void *)(v0 + 664) = v45;
    if (v45)
    {
      uint64_t v46 = *(void *)(v0 + 632);
      uint64_t v47 = *(void *)(v0 + 472);
      char v48 = *(void **)(v0 + 320);
      int v49 = *(_DWORD *)(v47 + 80);
      *(_DWORD *)(v0 + 772) = v49;
      unint64_t v50 = (v49 + 32) & ~(unint64_t)v49;
      *(void *)(v0 + 672) = *(void *)(v47 + 72);
      *(void *)(v0 + 720) = _swiftEmptyArrayStorage;
      *(void *)(v0 + 712) = 0;
      uint64_t v51 = *(void *)(v0 + 536);
      uint64_t v52 = *(void *)(v0 + 504);
      uint64_t v53 = *(void *)(v0 + 288);
      sub_100A32584(v46 + v50, v52, (uint64_t (*)(void))type metadata accessor for OwnedBeaconRecord);
      sub_100A32584(v52, v51, (uint64_t (*)(void))type metadata accessor for OwnedBeaconRecord);
      uint64_t v54 = swift_allocObject();
      *(void *)(v0 + 728) = v54;
      *(void *)(v54 + 16) = v53;
      *(void *)(v54 + 24) = v48;
      sub_100A2E4D4(v51, v54 + v50, (uint64_t (*)(void))type metadata accessor for OwnedBeaconRecord);
      swift_retain();
      id v55 = v48;
      uint64_t v56 = (void *)swift_task_alloc();
      *(void *)(v0 + 736) = v56;
      *uint64_t v56 = v0;
      v56[1] = sub_100A0DCA0;
      uint64_t v57 = &type metadata for Bool;
      uint64_t v58 = sub_100A30FA4;
      uint64_t v59 = v0 + 776;
      uint64_t v60 = v54;
LABEL_28:
      return unsafeBlocking<A>(_:)(v59, v58, v60, v57);
    }
    swift_bridgeObjectRelease();
    *(void *)(v0 + 744) = _swiftEmptyArrayStorage;
    if (_swiftEmptyArrayStorage[2])
    {
      uint64_t v61 = *(void *)(v0 + 328);
      if (v61 == 1)
      {
        uint64_t v68 = *(void *)(v0 + 336);
        uint64_t v69 = *(void *)(v0 + 344);
        char v70 = *(unsigned char *)(v0 + 777);
        uint64_t v71 = *(void **)(v0 + 320);
        uint64_t v73 = *(void *)(v0 + 296);
        uint64_t v72 = *(void *)(v0 + 304);
        *(void *)(v0 + 16) = 1;
        *(void *)(v0 + 24) = _swiftEmptyArrayStorage;
        *(unsigned char *)(v0 + 32) = v70;
        *(void *)(v0 + 40) = 0;
        *(void *)(v0 + 48) = v68;
        *(void *)(v0 + 56) = v69;
        *(void *)(v0 + 64) = v71;
        swift_bridgeObjectRetain();
        id v74 = v71;
        sub_100A10338(v0 + 16, v73, v72);
        swift_release();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
      }
      else
      {
        if (!v61)
        {
          os_log_type_t v62 = *(void **)(v0 + 320);
          uint64_t v63 = *(void *)(v0 + 288);
          uint64_t v64 = swift_allocObject();
          *(void *)(v0 + 752) = v64;
          *(void *)(v64 + 16) = v63;
          *(void *)(v64 + 24) = v62;
          swift_retain();
          id v65 = v62;
          uint64_t v66 = (void *)swift_task_alloc();
          *(void *)(v0 + 760) = v66;
          *uint64_t v66 = v0;
          v66[1] = sub_100A0E75C;
          uint64_t v59 = *(void *)(v0 + 376);
          uint64_t v57 = *(void **)(v0 + 352);
          uint64_t v58 = sub_100A3101C;
          uint64_t v60 = v64;
          goto LABEL_28;
        }
        swift_bridgeObjectRelease();
        if (qword_101636EE0 != -1) {
          swift_once();
        }
        uint64_t v75 = type metadata accessor for Logger();
        sub_100010324(v75, (uint64_t)qword_10170E7C8);
        uint64_t v76 = Logger.logObject.getter();
        os_log_type_t v77 = static os_log_type_t.error.getter();
        if (os_log_type_enabled(v76, v77))
        {
          uint64_t v78 = *(void *)(v0 + 328);
          uint64_t v79 = (uint8_t *)swift_slowAlloc();
          uint64_t v88 = (void *)swift_slowAlloc();
          *(_DWORD *)uint64_t v79 = 136315138;
          *(void *)(v0 + 264) = v78;
          type metadata accessor for SPSeparationEventType(0);
          uint64_t v80 = String.init<A>(describing:)();
          *(void *)(v0 + 272) = sub_1008FA0F0(v80, v81, (uint64_t *)&v88);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease();
          _os_log_impl((void *)&_mh_execute_header, v76, v77, "Received unknown eventType: %s", v79, 0xCu);
          swift_arrayDestroy();
          swift_slowDealloc();
          swift_slowDealloc();
        }

        uint64_t v82 = *(void (**)(void *, uint64_t))(v0 + 296);
        type metadata accessor for SPSeparationMonitoringError(0);
        *(void *)(v0 + 256) = 12;
        sub_1004A0BC8((uint64_t)_swiftEmptyArrayStorage);
        sub_100A24444(&qword_1016386A0, type metadata accessor for SPSeparationMonitoringError);
        _BridgedStoredNSError.init(_:userInfo:)();
        unint64_t v83 = *(void **)(v0 + 248);
        v82(v83, 1);
        swift_release();
      }
    }
    else
    {
      unint64_t v67 = *(void (**)(void, void))(v0 + 296);
      swift_bridgeObjectRelease();
      v67(0, 0);
      swift_release();
    }
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v84 = *(uint64_t (**)(void))(v0 + 8);
    return v84();
  }
  uint64_t v17 = *(void *)(v0 + 472);
  int v18 = *(_DWORD *)(v17 + 80);
  *(_DWORD *)(v0 + 768) = v18;
  uint64_t v19 = *(void *)(v17 + 72);
  *(void *)(v0 + 648) = v19;
  uint64_t v20 = swift_bridgeObjectRetain();
  uint64_t v21 = 0;
  while (1)
  {
    *(void *)(v0 + 656) = v21;
    uint64_t v22 = *(void *)(v0 + 528);
    uint64_t v23 = *(void *)(v0 + 520);
    uint64_t v24 = *(void *)(v0 + 456);
    uint64_t v25 = *(void *)(v0 + 464);
    sub_100A32584(v20 + ((v18 + 32) & ~(unint64_t)v18) + v19 * v21, v22, (uint64_t (*)(void))type metadata accessor for OwnedBeaconRecord);
    sub_100A32584(v22 + *(int *)(v25 + 24), v24, (uint64_t (*)(void))type metadata accessor for StableIdentifier);
    int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    sub_100A2E53C(v24, (uint64_t (*)(void))type metadata accessor for StableIdentifier);
    sub_100A32584(v22, v23, (uint64_t (*)(void))type metadata accessor for OwnedBeaconRecord);
    if (!EnumCaseMultiPayload)
    {
      uint64_t v29 = *(void *)(v0 + 640);
      if (*(void *)(v29 + 16))
      {
        sub_100A24444(&qword_10163BC60, (void (*)(uint64_t))&type metadata accessor for UUID);
        uint64_t v30 = dispatch thunk of Hashable._rawHashValue(seed:)();
        uint64_t v31 = -1 << *(unsigned char *)(v29 + 32);
        unint64_t v32 = v30 & ~v31;
        if ((*(void *)(v29 + ((v32 >> 3) & 0xFFFFFFFFFFFFFF8) + 56) >> v32)) {
          break;
        }
      }
    }
LABEL_14:
    sub_100A2E53C(*(void *)(v0 + 520), (uint64_t (*)(void))type metadata accessor for OwnedBeaconRecord);
    uint64_t v27 = *(void *)(v0 + 600);
    uint64_t v28 = *(void *)(v0 + 656) + 1;
    sub_100A2E53C(*(void *)(v0 + 528), (uint64_t (*)(void))type metadata accessor for OwnedBeaconRecord);
    if (v28 == v27)
    {
      swift_bridgeObjectRelease();
      goto LABEL_26;
    }
    uint64_t v21 = *(void *)(v0 + 656) + 1;
    uint64_t v19 = *(void *)(v0 + 648);
    LOBYTE(v18) = *(unsigned char *)(v0 + 768);
    uint64_t v20 = *(void *)(v0 + 312);
  }
  uint64_t v33 = ~v31;
  uint64_t v34 = *(void *)(v0 + 552);
  uint64_t v35 = *(void *)(v34 + 72);
  id v36 = *(void (**)(uint64_t, unint64_t, uint64_t))(v34 + 16);
  uint64_t v37 = *(void *)(v0 + 640);
  while (1)
  {
    uint64_t v38 = *(void *)(v0 + 560);
    uint64_t v39 = *(void *)(v0 + 552);
    uint64_t v40 = *(void *)(v0 + 544);
    v36(v38, *(void *)(v37 + 48) + v32 * v35, v40);
    sub_100A24444((unint64_t *)&qword_10163B8F0, (void (*)(uint64_t))&type metadata accessor for UUID);
    char v41 = dispatch thunk of static Equatable.== infix(_:_:)();
    (*(void (**)(uint64_t, uint64_t))(v39 + 8))(v38, v40);
    if (v41) {
      break;
    }
    uint64_t v37 = *(void *)(v0 + 640);
    unint64_t v32 = (v32 + 1) & v33;
    if (((*(void *)(v37 + ((v32 >> 3) & 0xFFFFFFFFFFFFFF8) + 56) >> v32) & 1) == 0) {
      goto LABEL_14;
    }
  }
  sub_100A2E53C(*(void *)(v0 + 520), (uint64_t (*)(void))type metadata accessor for OwnedBeaconRecord);
  sub_10000588C(&qword_1016555E8);
  *(void *)(v0 + 680) = AnalyticsEvent.__allocating_init(name:)();
  sub_100062734((unint64_t *)&unk_1016555F0, &qword_1016555E8);
  uint64_t v43 = dispatch thunk of Actor.unownedExecutor.getter();
  return _swift_task_switch(sub_100A0CDE0, v43, v42);
}

uint64_t sub_100A0C244()
{
  uint64_t v89 = v0;
  uint64_t v1 = *(void *)(v0 + 312);
  *(void *)(v0 + 632) = v1;
  int64_t v2 = *(void *)(v1 + 16);
  swift_bridgeObjectRetain();
  int64_t v3 = _swiftEmptyArrayStorage;
  if (v2)
  {
    uint64_t v4 = *(void *)(v0 + 552);
    uint64_t v5 = *(void *)(v0 + 472);
    uint64_t v87 = *(void *)(v0 + 464);
    uint64_t v88 = _swiftEmptyArrayStorage;
    sub_1000B7034(0, v2, 0);
    uint64_t v6 = v1 + ((*(unsigned __int8 *)(v5 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80));
    uint64_t v86 = *(void *)(v5 + 72);
    int64_t v3 = _swiftEmptyArrayStorage;
    do
    {
      uint64_t v7 = *(void *)(v0 + 568);
      uint64_t v8 = *(void *)(v0 + 544);
      uint64_t v9 = *(void *)(v0 + 536);
      sub_100A32584(v6, v9, (uint64_t (*)(void))type metadata accessor for OwnedBeaconRecord);
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v4 + 16))(v7, v9 + *(int *)(v87 + 20), v8);
      sub_100A2E53C(v9, (uint64_t (*)(void))type metadata accessor for OwnedBeaconRecord);
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        sub_1000B7034(0, v3[2] + 1, 1);
        int64_t v3 = v88;
      }
      unint64_t v11 = v3[2];
      unint64_t v10 = v3[3];
      if (v11 >= v10 >> 1)
      {
        sub_1000B7034(v10 > 1, v11 + 1, 1);
        int64_t v3 = v88;
      }
      uint64_t v12 = *(void *)(v0 + 568);
      uint64_t v13 = *(void *)(v0 + 544);
      v3[2] = v11 + 1;
      (*(void (**)(unint64_t, uint64_t, uint64_t))(v4 + 32))((unint64_t)v3+ ((*(unsigned __int8 *)(v4 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80))+ *(void *)(v4 + 72) * v11, v12, v13);
      uint64_t v88 = v3;
      v6 += v86;
      --v2;
    }
    while (v2);
  }
  uint64_t v14 = *(void *)(v0 + 608);
  uint64_t v15 = sub_101158244((uint64_t)v3);
  swift_bridgeObjectRelease();
  if (*(void *)(v15 + 16) <= *(void *)(v14 + 16) >> 3)
  {
    uint64_t v88 = *(void **)(v0 + 608);
    sub_10089EA08(v15);
    swift_bridgeObjectRelease();
    uint64_t v16 = v88;
  }
  else
  {
    uint64_t v16 = sub_1008A160C(v15, *(void *)(v0 + 608));
    swift_bridgeObjectRelease();
  }
  *(void *)(v0 + 640) = v16;
  if (!*(void *)(v0 + 600))
  {
LABEL_26:
    uint64_t v44 = *(void *)(v0 + 632);
    swift_bridgeObjectRelease();
    uint64_t v45 = *(void *)(v44 + 16);
    *(void *)(v0 + 664) = v45;
    if (v45)
    {
      uint64_t v46 = *(void *)(v0 + 632);
      uint64_t v47 = *(void *)(v0 + 472);
      char v48 = *(void **)(v0 + 320);
      int v49 = *(_DWORD *)(v47 + 80);
      *(_DWORD *)(v0 + 772) = v49;
      unint64_t v50 = (v49 + 32) & ~(unint64_t)v49;
      *(void *)(v0 + 672) = *(void *)(v47 + 72);
      *(void *)(v0 + 720) = _swiftEmptyArrayStorage;
      *(void *)(v0 + 712) = 0;
      uint64_t v51 = *(void *)(v0 + 536);
      uint64_t v52 = *(void *)(v0 + 504);
      uint64_t v53 = *(void *)(v0 + 288);
      sub_100A32584(v46 + v50, v52, (uint64_t (*)(void))type metadata accessor for OwnedBeaconRecord);
      sub_100A32584(v52, v51, (uint64_t (*)(void))type metadata accessor for OwnedBeaconRecord);
      uint64_t v54 = swift_allocObject();
      *(void *)(v0 + 728) = v54;
      *(void *)(v54 + 16) = v53;
      *(void *)(v54 + 24) = v48;
      sub_100A2E4D4(v51, v54 + v50, (uint64_t (*)(void))type metadata accessor for OwnedBeaconRecord);
      swift_retain();
      id v55 = v48;
      uint64_t v56 = (void *)swift_task_alloc();
      *(void *)(v0 + 736) = v56;
      *uint64_t v56 = v0;
      v56[1] = sub_100A0DCA0;
      uint64_t v57 = &type metadata for Bool;
      uint64_t v58 = sub_100A30FA4;
      uint64_t v59 = v0 + 776;
      uint64_t v60 = v54;
LABEL_28:
      return unsafeBlocking<A>(_:)(v59, v58, v60, v57);
    }
    swift_bridgeObjectRelease();
    *(void *)(v0 + 744) = _swiftEmptyArrayStorage;
    if (_swiftEmptyArrayStorage[2])
    {
      uint64_t v61 = *(void *)(v0 + 328);
      if (v61 == 1)
      {
        uint64_t v68 = *(void *)(v0 + 336);
        uint64_t v69 = *(void *)(v0 + 344);
        char v70 = *(unsigned char *)(v0 + 777);
        uint64_t v71 = *(void **)(v0 + 320);
        uint64_t v73 = *(void *)(v0 + 296);
        uint64_t v72 = *(void *)(v0 + 304);
        *(void *)(v0 + 16) = 1;
        *(void *)(v0 + 24) = _swiftEmptyArrayStorage;
        *(unsigned char *)(v0 + 32) = v70;
        *(void *)(v0 + 40) = 0;
        *(void *)(v0 + 48) = v68;
        *(void *)(v0 + 56) = v69;
        *(void *)(v0 + 64) = v71;
        swift_bridgeObjectRetain();
        id v74 = v71;
        sub_100A10338(v0 + 16, v73, v72);
        swift_release();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
      }
      else
      {
        if (!v61)
        {
          os_log_type_t v62 = *(void **)(v0 + 320);
          uint64_t v63 = *(void *)(v0 + 288);
          uint64_t v64 = swift_allocObject();
          *(void *)(v0 + 752) = v64;
          *(void *)(v64 + 16) = v63;
          *(void *)(v64 + 24) = v62;
          swift_retain();
          id v65 = v62;
          uint64_t v66 = (void *)swift_task_alloc();
          *(void *)(v0 + 760) = v66;
          *uint64_t v66 = v0;
          v66[1] = sub_100A0E75C;
          uint64_t v59 = *(void *)(v0 + 376);
          uint64_t v57 = *(void **)(v0 + 352);
          uint64_t v58 = sub_100A3101C;
          uint64_t v60 = v64;
          goto LABEL_28;
        }
        swift_bridgeObjectRelease();
        if (qword_101636EE0 != -1) {
          swift_once();
        }
        uint64_t v75 = type metadata accessor for Logger();
        sub_100010324(v75, (uint64_t)qword_10170E7C8);
        uint64_t v76 = Logger.logObject.getter();
        os_log_type_t v77 = static os_log_type_t.error.getter();
        if (os_log_type_enabled(v76, v77))
        {
          uint64_t v78 = *(void *)(v0 + 328);
          uint64_t v79 = (uint8_t *)swift_slowAlloc();
          uint64_t v88 = (void *)swift_slowAlloc();
          *(_DWORD *)uint64_t v79 = 136315138;
          *(void *)(v0 + 264) = v78;
          type metadata accessor for SPSeparationEventType(0);
          uint64_t v80 = String.init<A>(describing:)();
          *(void *)(v0 + 272) = sub_1008FA0F0(v80, v81, (uint64_t *)&v88);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease();
          _os_log_impl((void *)&_mh_execute_header, v76, v77, "Received unknown eventType: %s", v79, 0xCu);
          swift_arrayDestroy();
          swift_slowDealloc();
          swift_slowDealloc();
        }

        uint64_t v82 = *(void (**)(void *, uint64_t))(v0 + 296);
        type metadata accessor for SPSeparationMonitoringError(0);
        *(void *)(v0 + 256) = 12;
        sub_1004A0BC8((uint64_t)_swiftEmptyArrayStorage);
        sub_100A24444(&qword_1016386A0, type metadata accessor for SPSeparationMonitoringError);
        _BridgedStoredNSError.init(_:userInfo:)();
        unint64_t v83 = *(void **)(v0 + 248);
        v82(v83, 1);
        swift_release();
      }
    }
    else
    {
      unint64_t v67 = *(void (**)(void, void))(v0 + 296);
      swift_bridgeObjectRelease();
      v67(0, 0);
      swift_release();
    }
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v84 = *(uint64_t (**)(void))(v0 + 8);
    return v84();
  }
  uint64_t v17 = *(void *)(v0 + 472);
  int v18 = *(_DWORD *)(v17 + 80);
  *(_DWORD *)(v0 + 768) = v18;
  uint64_t v19 = *(void *)(v17 + 72);
  *(void *)(v0 + 648) = v19;
  uint64_t v20 = swift_bridgeObjectRetain();
  uint64_t v21 = 0;
  while (1)
  {
    *(void *)(v0 + 656) = v21;
    uint64_t v22 = *(void *)(v0 + 528);
    uint64_t v23 = *(void *)(v0 + 520);
    uint64_t v24 = *(void *)(v0 + 456);
    uint64_t v25 = *(void *)(v0 + 464);
    sub_100A32584(v20 + ((v18 + 32) & ~(unint64_t)v18) + v19 * v21, v22, (uint64_t (*)(void))type metadata accessor for OwnedBeaconRecord);
    sub_100A32584(v22 + *(int *)(v25 + 24), v24, (uint64_t (*)(void))type metadata accessor for StableIdentifier);
    int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    sub_100A2E53C(v24, (uint64_t (*)(void))type metadata accessor for StableIdentifier);
    sub_100A32584(v22, v23, (uint64_t (*)(void))type metadata accessor for OwnedBeaconRecord);
    if (!EnumCaseMultiPayload)
    {
      uint64_t v29 = *(void *)(v0 + 640);
      if (*(void *)(v29 + 16))
      {
        sub_100A24444(&qword_10163BC60, (void (*)(uint64_t))&type metadata accessor for UUID);
        uint64_t v30 = dispatch thunk of Hashable._rawHashValue(seed:)();
        uint64_t v31 = -1 << *(unsigned char *)(v29 + 32);
        unint64_t v32 = v30 & ~v31;
        if ((*(void *)(v29 + ((v32 >> 3) & 0xFFFFFFFFFFFFFF8) + 56) >> v32)) {
          break;
        }
      }
    }
LABEL_14:
    sub_100A2E53C(*(void *)(v0 + 520), (uint64_t (*)(void))type metadata accessor for OwnedBeaconRecord);
    uint64_t v27 = *(void *)(v0 + 600);
    uint64_t v28 = *(void *)(v0 + 656) + 1;
    sub_100A2E53C(*(void *)(v0 + 528), (uint64_t (*)(void))type metadata accessor for OwnedBeaconRecord);
    if (v28 == v27)
    {
      swift_bridgeObjectRelease();
      goto LABEL_26;
    }
    uint64_t v21 = *(void *)(v0 + 656) + 1;
    uint64_t v19 = *(void *)(v0 + 648);
    LOBYTE(v18) = *(unsigned char *)(v0 + 768);
    uint64_t v20 = *(void *)(v0 + 312);
  }
  uint64_t v33 = ~v31;
  uint64_t v34 = *(void *)(v0 + 552);
  uint64_t v35 = *(void *)(v34 + 72);
  id v36 = *(void (**)(uint64_t, unint64_t, uint64_t))(v34 + 16);
  uint64_t v37 = *(void *)(v0 + 640);
  while (1)
  {
    uint64_t v38 = *(void *)(v0 + 560);
    uint64_t v39 = *(void *)(v0 + 552);
    uint64_t v40 = *(void *)(v0 + 544);
    v36(v38, *(void *)(v37 + 48) + v32 * v35, v40);
    sub_100A24444((unint64_t *)&qword_10163B8F0, (void (*)(uint64_t))&type metadata accessor for UUID);
    char v41 = dispatch thunk of static Equatable.== infix(_:_:)();
    (*(void (**)(uint64_t, uint64_t))(v39 + 8))(v38, v40);
    if (v41) {
      break;
    }
    uint64_t v37 = *(void *)(v0 + 640);
    unint64_t v32 = (v32 + 1) & v33;
    if (((*(void *)(v37 + ((v32 >> 3) & 0xFFFFFFFFFFFFFF8) + 56) >> v32) & 1) == 0) {
      goto LABEL_14;
    }
  }
  sub_100A2E53C(*(void *)(v0 + 520), (uint64_t (*)(void))type metadata accessor for OwnedBeaconRecord);
  sub_10000588C(&qword_1016555E8);
  *(void *)(v0 + 680) = AnalyticsEvent.__allocating_init(name:)();
  sub_100062734((unint64_t *)&unk_1016555F0, &qword_1016555E8);
  uint64_t v43 = dispatch thunk of Actor.unownedExecutor.getter();
  return _swift_task_switch(sub_100A0CDE0, v43, v42);
}

uint64_t sub_100A0CDE0()
{
  dispatch thunk of AnalyticsEvent.anyAnalyticsEvent.getter();
  return _swift_task_switch(sub_100A0CE4C, 0, 0);
}

uint64_t sub_100A0CE4C()
{
  uint64_t v19 = v0;
  uint64_t v2 = v0[54];
  uint64_t v1 = v0[55];
  uint64_t v3 = v0[53];
  static AnalyticsPublisher.publish(event:)();
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  if (qword_101636EE0 != -1) {
    swift_once();
  }
  uint64_t v4 = v0[66];
  uint64_t v5 = v0[64];
  uint64_t v6 = type metadata accessor for Logger();
  sub_100010324(v6, (uint64_t)qword_10170E7C8);
  sub_100A32584(v4, v5, (uint64_t (*)(void))type metadata accessor for OwnedBeaconRecord);
  uint64_t v7 = Logger.logObject.getter();
  os_log_type_t v8 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v7, v8))
  {
    uint64_t v9 = v0[64];
    unint64_t v10 = (uint8_t *)swift_slowAlloc();
    uint64_t v18 = swift_slowAlloc();
    *(_DWORD *)unint64_t v10 = 136315138;
    sub_100A24444((unint64_t *)&qword_101638B10, (void (*)(uint64_t))&type metadata accessor for UUID);
    uint64_t v11 = dispatch thunk of CustomStringConvertible.description.getter();
    v0[35] = sub_1008FA0F0(v11, v12, &v18);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    sub_100A2E53C(v9, (uint64_t (*)(void))type metadata accessor for OwnedBeaconRecord);
    _os_log_impl((void *)&_mh_execute_header, v7, v8, "Ignoring separation monitor alert for unregistered self-beaconing device: %s", v10, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    sub_100A2E53C(v0[64], (uint64_t (*)(void))type metadata accessor for OwnedBeaconRecord);
  }

  uint64_t v13 = v0[66];
  uint64_t v14 = v0[36];
  uint64_t v15 = swift_task_alloc();
  v0[86] = v15;
  *(void *)(v15 + 16) = v14;
  *(void *)(v15 + 24) = v13;
  uint64_t v16 = (void *)swift_task_alloc();
  v0[87] = v16;
  void *v16 = v0;
  v16[1] = sub_100A0D178;
  return withCheckedThrowingContinuation<A>(isolation:function:_:)(v16, 0, 0, 0xD00000000000003FLL, 0x800000010140EC40, sub_100A31024, v15, (char *)&type metadata for () + 8);
}

uint64_t sub_100A0D178()
{
  *(void *)(*(void *)v1 + 704) = v0;
  swift_task_dealloc();
  if (v0)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_task_dealloc();
    uint64_t v2 = sub_100A0EC0C;
  }
  else
  {
    swift_task_dealloc();
    uint64_t v2 = sub_100A0D2D8;
  }
  return _swift_task_switch(v2, 0, 0);
}

uint64_t sub_100A0D2D8()
{
  uint64_t v69 = v0;
  swift_release();
  uint64_t v1 = *(void *)(v0 + 600);
  uint64_t v2 = *(void *)(v0 + 656) + 1;
  sub_100A2E53C(*(void *)(v0 + 528), (uint64_t (*)(void))type metadata accessor for OwnedBeaconRecord);
  if (v2 == v1)
  {
LABEL_2:
    swift_bridgeObjectRelease();
    uint64_t v3 = *(void *)(v0 + 632);
    swift_bridgeObjectRelease();
    uint64_t v4 = *(void *)(v3 + 16);
    *(void *)(v0 + 664) = v4;
    if (v4)
    {
      uint64_t v5 = *(void *)(v0 + 632);
      uint64_t v6 = *(void *)(v0 + 472);
      uint64_t v7 = *(void **)(v0 + 320);
      int v8 = *(_DWORD *)(v6 + 80);
      *(_DWORD *)(v0 + 772) = v8;
      unint64_t v9 = (v8 + 32) & ~(unint64_t)v8;
      *(void *)(v0 + 672) = *(void *)(v6 + 72);
      *(void *)(v0 + 720) = _swiftEmptyArrayStorage;
      *(void *)(v0 + 712) = 0;
      uint64_t v10 = *(void *)(v0 + 536);
      uint64_t v11 = *(void *)(v0 + 504);
      uint64_t v12 = *(void *)(v0 + 288);
      sub_100A32584(v5 + v9, v11, (uint64_t (*)(void))type metadata accessor for OwnedBeaconRecord);
      sub_100A32584(v11, v10, (uint64_t (*)(void))type metadata accessor for OwnedBeaconRecord);
      uint64_t v13 = swift_allocObject();
      *(void *)(v0 + 728) = v13;
      *(void *)(v13 + 16) = v12;
      *(void *)(v13 + 24) = v7;
      sub_100A2E4D4(v10, v13 + v9, (uint64_t (*)(void))type metadata accessor for OwnedBeaconRecord);
      swift_retain();
      id v14 = v7;
      uint64_t v15 = (void *)swift_task_alloc();
      *(void *)(v0 + 736) = v15;
      *uint64_t v15 = v0;
      v15[1] = sub_100A0DCA0;
      uint64_t v16 = &type metadata for Bool;
      uint64_t v17 = sub_100A30FA4;
      uint64_t v18 = v0 + 776;
      uint64_t v19 = v13;
LABEL_4:
      return unsafeBlocking<A>(_:)(v18, v17, v19, v16);
    }
    swift_bridgeObjectRelease();
    *(void *)(v0 + 744) = _swiftEmptyArrayStorage;
    if (_swiftEmptyArrayStorage[2])
    {
      uint64_t v43 = *(void *)(v0 + 328);
      if (v43 == 1)
      {
        uint64_t v50 = *(void *)(v0 + 336);
        uint64_t v51 = *(void *)(v0 + 344);
        char v52 = *(unsigned char *)(v0 + 777);
        uint64_t v53 = *(void **)(v0 + 320);
        uint64_t v55 = *(void *)(v0 + 296);
        uint64_t v54 = *(void *)(v0 + 304);
        *(void *)(v0 + 16) = 1;
        *(void *)(v0 + 24) = _swiftEmptyArrayStorage;
        *(unsigned char *)(v0 + 32) = v52;
        *(void *)(v0 + 40) = 0;
        *(void *)(v0 + 48) = v50;
        *(void *)(v0 + 56) = v51;
        *(void *)(v0 + 64) = v53;
        swift_bridgeObjectRetain();
        id v56 = v53;
        sub_100A10338(v0 + 16, v55, v54);
        swift_release();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
      }
      else
      {
        if (!v43)
        {
          uint64_t v44 = *(void **)(v0 + 320);
          uint64_t v45 = *(void *)(v0 + 288);
          uint64_t v46 = swift_allocObject();
          *(void *)(v0 + 752) = v46;
          *(void *)(v46 + 16) = v45;
          *(void *)(v46 + 24) = v44;
          swift_retain();
          id v47 = v44;
          char v48 = (void *)swift_task_alloc();
          *(void *)(v0 + 760) = v48;
          *char v48 = v0;
          v48[1] = sub_100A0E75C;
          uint64_t v18 = *(void *)(v0 + 376);
          uint64_t v16 = *(void **)(v0 + 352);
          uint64_t v17 = sub_100A3101C;
          uint64_t v19 = v46;
          goto LABEL_4;
        }
        swift_bridgeObjectRelease();
        if (qword_101636EE0 != -1) {
          swift_once();
        }
        uint64_t v57 = type metadata accessor for Logger();
        sub_100010324(v57, (uint64_t)qword_10170E7C8);
        uint64_t v58 = Logger.logObject.getter();
        os_log_type_t v59 = static os_log_type_t.error.getter();
        if (os_log_type_enabled(v58, v59))
        {
          uint64_t v60 = *(void *)(v0 + 328);
          uint64_t v61 = (uint8_t *)swift_slowAlloc();
          uint64_t v68 = swift_slowAlloc();
          *(_DWORD *)uint64_t v61 = 136315138;
          *(void *)(v0 + 264) = v60;
          type metadata accessor for SPSeparationEventType(0);
          uint64_t v62 = String.init<A>(describing:)();
          *(void *)(v0 + 272) = sub_1008FA0F0(v62, v63, &v68);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease();
          _os_log_impl((void *)&_mh_execute_header, v58, v59, "Received unknown eventType: %s", v61, 0xCu);
          swift_arrayDestroy();
          swift_slowDealloc();
          swift_slowDealloc();
        }

        uint64_t v64 = *(void (**)(void *, uint64_t))(v0 + 296);
        type metadata accessor for SPSeparationMonitoringError(0);
        *(void *)(v0 + 256) = 12;
        sub_1004A0BC8((uint64_t)_swiftEmptyArrayStorage);
        sub_100A24444(&qword_1016386A0, type metadata accessor for SPSeparationMonitoringError);
        _BridgedStoredNSError.init(_:userInfo:)();
        id v65 = *(void **)(v0 + 248);
        v64(v65, 1);
        swift_release();
      }
    }
    else
    {
      int v49 = *(void (**)(void, void))(v0 + 296);
      swift_bridgeObjectRelease();
      v49(0, 0);
      swift_release();
    }
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v66 = *(uint64_t (**)(void))(v0 + 8);
    return v66();
  }
  else
  {
    while (1)
    {
      uint64_t v22 = *(void *)(v0 + 656) + 1;
      *(void *)(v0 + 656) = v22;
      uint64_t v23 = *(void *)(v0 + 528);
      uint64_t v24 = *(void *)(v0 + 520);
      uint64_t v26 = *(void *)(v0 + 456);
      uint64_t v25 = *(void *)(v0 + 464);
      sub_100A32584(*(void *)(v0 + 312)+ ((*(unsigned __int8 *)(v0 + 768) + 32) & ~(unint64_t)*(unsigned __int8 *)(v0 + 768))+ *(void *)(v0 + 648) * v22, v23, (uint64_t (*)(void))type metadata accessor for OwnedBeaconRecord);
      sub_100A32584(v23 + *(int *)(v25 + 24), v26, (uint64_t (*)(void))type metadata accessor for StableIdentifier);
      int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
      sub_100A2E53C(v26, (uint64_t (*)(void))type metadata accessor for StableIdentifier);
      sub_100A32584(v23, v24, (uint64_t (*)(void))type metadata accessor for OwnedBeaconRecord);
      if (!EnumCaseMultiPayload)
      {
        uint64_t v28 = *(void *)(v0 + 640);
        if (*(void *)(v28 + 16))
        {
          sub_100A24444(&qword_10163BC60, (void (*)(uint64_t))&type metadata accessor for UUID);
          uint64_t v29 = dispatch thunk of Hashable._rawHashValue(seed:)();
          uint64_t v30 = -1 << *(unsigned char *)(v28 + 32);
          unint64_t v31 = v29 & ~v30;
          if ((*(void *)(v28 + ((v31 >> 3) & 0xFFFFFFFFFFFFFF8) + 56) >> v31)) {
            break;
          }
        }
      }
LABEL_7:
      sub_100A2E53C(*(void *)(v0 + 520), (uint64_t (*)(void))type metadata accessor for OwnedBeaconRecord);
      uint64_t v20 = *(void *)(v0 + 600);
      uint64_t v21 = *(void *)(v0 + 656) + 1;
      sub_100A2E53C(*(void *)(v0 + 528), (uint64_t (*)(void))type metadata accessor for OwnedBeaconRecord);
      if (v21 == v20) {
        goto LABEL_2;
      }
    }
    uint64_t v32 = ~v30;
    uint64_t v33 = *(void *)(v0 + 552);
    uint64_t v34 = *(void *)(v33 + 72);
    uint64_t v35 = *(void (**)(uint64_t, unint64_t, uint64_t))(v33 + 16);
    uint64_t v36 = *(void *)(v0 + 640);
    while (1)
    {
      uint64_t v37 = *(void *)(v0 + 560);
      uint64_t v38 = *(void *)(v0 + 552);
      uint64_t v39 = *(void *)(v0 + 544);
      v35(v37, *(void *)(v36 + 48) + v31 * v34, v39);
      sub_100A24444((unint64_t *)&qword_10163B8F0, (void (*)(uint64_t))&type metadata accessor for UUID);
      char v40 = dispatch thunk of static Equatable.== infix(_:_:)();
      (*(void (**)(uint64_t, uint64_t))(v38 + 8))(v37, v39);
      if (v40) {
        break;
      }
      uint64_t v36 = *(void *)(v0 + 640);
      unint64_t v31 = (v31 + 1) & v32;
      if (((*(void *)(v36 + ((v31 >> 3) & 0xFFFFFFFFFFFFFF8) + 56) >> v31) & 1) == 0) {
        goto LABEL_7;
      }
    }
    sub_100A2E53C(*(void *)(v0 + 520), (uint64_t (*)(void))type metadata accessor for OwnedBeaconRecord);
    sub_10000588C(&qword_1016555E8);
    *(void *)(v0 + 680) = AnalyticsEvent.__allocating_init(name:)();
    sub_100062734((unint64_t *)&unk_1016555F0, &qword_1016555E8);
    uint64_t v42 = dispatch thunk of Actor.unownedExecutor.getter();
    return _swift_task_switch(sub_100A0CDE0, v42, v41);
  }
}

uint64_t sub_100A0DCA0()
{
  swift_task_dealloc();
  swift_release();
  return _swift_task_switch(sub_100A0DDB8, 0, 0);
}

uint64_t sub_100A0DDB8()
{
  uint64_t v66 = v0;
  if (*(unsigned char *)(v0 + 776))
  {
    if (qword_101636EE0 != -1) {
      swift_once();
    }
    uint64_t v1 = *(void *)(v0 + 504);
    uint64_t v2 = *(void *)(v0 + 488);
    uint64_t v3 = *(void **)(v0 + 320);
    uint64_t v4 = type metadata accessor for Logger();
    sub_100010324(v4, (uint64_t)qword_10170E7C8);
    sub_100A32584(v1, v2, (uint64_t (*)(void))type metadata accessor for OwnedBeaconRecord);
    id v5 = v3;
    uint64_t v6 = Logger.logObject.getter();
    os_log_type_t v7 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v6, v7))
    {
      uint64_t v64 = *(void *)(v0 + 504);
      uint64_t v8 = *(void *)(v0 + 488);
      unint64_t v9 = *(void **)(v0 + 320);
      uint64_t v10 = swift_slowAlloc();
      uint64_t v11 = (void *)swift_slowAlloc();
      uint64_t v65 = swift_slowAlloc();
      *(_DWORD *)uint64_t v10 = 138412803;
      *(void *)(v10 + 4) = v9;
      *uint64_t v11 = v9;

      *(_WORD *)(v10 + 12) = 2160;
      *(void *)(v10 + 14) = 1752392040;
      *(_WORD *)(v10 + 22) = 2081;
      sub_100A24444((unint64_t *)&qword_101638B10, (void (*)(uint64_t))&type metadata accessor for UUID);
      uint64_t v12 = dispatch thunk of CustomStringConvertible.description.getter();
      *(void *)(v10 + 24) = sub_1008FA0F0(v12, v13, &v65);
      swift_bridgeObjectRelease();
      sub_100A2E53C(v8, (uint64_t (*)(void))type metadata accessor for OwnedBeaconRecord);
      _os_log_impl((void *)&_mh_execute_header, v6, v7, "Location is in safe location - not posting separation notification at %@ for beacon %{private,mask.hash}s.", (uint8_t *)v10, 0x20u);
      sub_10000588C((uint64_t *)&unk_101638EA0);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      uint64_t v14 = v64;
    }
    else
    {
      uint64_t v23 = *(void *)(v0 + 504);
      uint64_t v24 = *(void *)(v0 + 488);
      uint64_t v25 = *(void **)(v0 + 320);

      sub_100A2E53C(v24, (uint64_t (*)(void))type metadata accessor for OwnedBeaconRecord);
      uint64_t v14 = v23;
    }
    sub_100A2E53C(v14, (uint64_t (*)(void))type metadata accessor for OwnedBeaconRecord);
    unint64_t v16 = *(void *)(v0 + 720);
  }
  else
  {
    sub_100A32584(*(void *)(v0 + 504), *(void *)(v0 + 496), (uint64_t (*)(void))type metadata accessor for OwnedBeaconRecord);
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    unint64_t v16 = *(void *)(v0 + 720);
    if ((isUniquelyReferenced_nonNull_native & 1) == 0) {
      unint64_t v16 = sub_100A6F6C4(0, *(void *)(v16 + 16) + 1, 1, *(void *)(v0 + 720));
    }
    unint64_t v18 = *(void *)(v16 + 16);
    unint64_t v17 = *(void *)(v16 + 24);
    if (v18 >= v17 >> 1) {
      unint64_t v16 = sub_100A6F6C4(v17 > 1, v18 + 1, 1, v16);
    }
    uint64_t v19 = *(void *)(v0 + 672);
    uint64_t v20 = *(unsigned __int8 *)(v0 + 772);
    uint64_t v21 = *(void *)(v0 + 496);
    uint64_t v22 = *(void *)(v0 + 504);
    *(void *)(v16 + 16) = v18 + 1;
    sub_100A2E4D4(v21, v16 + ((v20 + 32) & ~v20) + v19 * v18, (uint64_t (*)(void))type metadata accessor for OwnedBeaconRecord);
    sub_100A2E53C(v22, (uint64_t (*)(void))type metadata accessor for OwnedBeaconRecord);
  }
  uint64_t v26 = *(void *)(v0 + 712) + 1;
  if (v26 != *(void *)(v0 + 664))
  {
    *(void *)(v0 + 720) = v16;
    *(void *)(v0 + 712) = v26;
    uint64_t v37 = *(void *)(v0 + 536);
    uint64_t v38 = *(void *)(v0 + 504);
    uint64_t v39 = *(void **)(v0 + 320);
    uint64_t v40 = *(void *)(v0 + 288);
    unint64_t v41 = (*(unsigned __int8 *)(v0 + 772) + 32) & ~(unint64_t)*(unsigned __int8 *)(v0 + 772);
    sub_100A32584(*(void *)(v0 + 632) + v41 + *(void *)(v0 + 672) * v26, v38, (uint64_t (*)(void))type metadata accessor for OwnedBeaconRecord);
    sub_100A32584(v38, v37, (uint64_t (*)(void))type metadata accessor for OwnedBeaconRecord);
    uint64_t v42 = swift_allocObject();
    *(void *)(v0 + 728) = v42;
    *(void *)(v42 + 16) = v40;
    *(void *)(v42 + 24) = v39;
    sub_100A2E4D4(v37, v42 + v41, (uint64_t (*)(void))type metadata accessor for OwnedBeaconRecord);
    swift_retain();
    id v43 = v39;
    uint64_t v44 = (void *)swift_task_alloc();
    *(void *)(v0 + 736) = v44;
    *uint64_t v44 = v0;
    v44[1] = sub_100A0DCA0;
    uint64_t v34 = &type metadata for Bool;
    uint64_t v35 = sub_100A30FA4;
    uint64_t v33 = v0 + 776;
    uint64_t v36 = v42;
    goto LABEL_19;
  }
  swift_bridgeObjectRelease();
  *(void *)(v0 + 744) = v16;
  if (*(void *)(v16 + 16))
  {
    uint64_t v27 = *(void *)(v0 + 328);
    if (v27 == 1)
    {
      uint64_t v46 = *(void *)(v0 + 336);
      uint64_t v47 = *(void *)(v0 + 344);
      char v48 = *(unsigned char *)(v0 + 777);
      int v49 = *(void **)(v0 + 320);
      uint64_t v50 = *(void *)(v0 + 296);
      uint64_t v51 = *(void *)(v0 + 304);
      *(void *)(v0 + 16) = 1;
      *(void *)(v0 + 24) = v16;
      *(unsigned char *)(v0 + 32) = v48;
      *(void *)(v0 + 40) = 0;
      *(void *)(v0 + 48) = v46;
      *(void *)(v0 + 56) = v47;
      *(void *)(v0 + 64) = v49;
      swift_bridgeObjectRetain();
      id v52 = v49;
      sub_100A10338(v0 + 16, v50, v51);
      swift_release();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
    }
    else
    {
      if (!v27)
      {
        uint64_t v28 = *(void **)(v0 + 320);
        uint64_t v29 = *(void *)(v0 + 288);
        uint64_t v30 = swift_allocObject();
        *(void *)(v0 + 752) = v30;
        *(void *)(v30 + 16) = v29;
        *(void *)(v30 + 24) = v28;
        swift_retain();
        id v31 = v28;
        uint64_t v32 = (void *)swift_task_alloc();
        *(void *)(v0 + 760) = v32;
        *uint64_t v32 = v0;
        v32[1] = sub_100A0E75C;
        uint64_t v33 = *(void *)(v0 + 376);
        uint64_t v34 = *(void **)(v0 + 352);
        uint64_t v35 = sub_100A3101C;
        uint64_t v36 = v30;
LABEL_19:
        return unsafeBlocking<A>(_:)(v33, v35, v36, v34);
      }
      swift_bridgeObjectRelease();
      if (qword_101636EE0 != -1) {
        swift_once();
      }
      uint64_t v53 = type metadata accessor for Logger();
      sub_100010324(v53, (uint64_t)qword_10170E7C8);
      uint64_t v54 = Logger.logObject.getter();
      os_log_type_t v55 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v54, v55))
      {
        uint64_t v56 = *(void *)(v0 + 328);
        uint64_t v57 = (uint8_t *)swift_slowAlloc();
        uint64_t v65 = swift_slowAlloc();
        *(_DWORD *)uint64_t v57 = 136315138;
        *(void *)(v0 + 264) = v56;
        type metadata accessor for SPSeparationEventType(0);
        uint64_t v58 = String.init<A>(describing:)();
        *(void *)(v0 + 272) = sub_1008FA0F0(v58, v59, &v65);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        _os_log_impl((void *)&_mh_execute_header, v54, v55, "Received unknown eventType: %s", v57, 0xCu);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
      }

      uint64_t v60 = *(void (**)(void *, uint64_t))(v0 + 296);
      type metadata accessor for SPSeparationMonitoringError(0);
      *(void *)(v0 + 256) = 12;
      sub_1004A0BC8((uint64_t)_swiftEmptyArrayStorage);
      sub_100A24444(&qword_1016386A0, type metadata accessor for SPSeparationMonitoringError);
      _BridgedStoredNSError.init(_:userInfo:)();
      uint64_t v61 = *(void **)(v0 + 248);
      v60(v61, 1);
      swift_release();
    }
  }
  else
  {
    uint64_t v45 = *(void (**)(void, void))(v0 + 296);
    swift_bridgeObjectRelease();
    v45(0, 0);
    swift_release();
  }
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v62 = *(uint64_t (**)(void))(v0 + 8);
  return v62();
}

uint64_t sub_100A0E75C()
{
  swift_task_dealloc();
  swift_release();
  return _swift_task_switch(sub_100A0E874, 0, 0);
}

uint64_t sub_100A0E874()
{
  uint64_t v1 = *(void *)(v0 + 384);
  uint64_t v2 = *(void *)(v0 + 376);
  uint64_t v3 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v0 + 392) + 48);
  if (v3(v2, 1, v1) == 1)
  {
    sub_10001DAB4(v2, &qword_101653F20);
    id v4 = 0;
  }
  else
  {
    uint64_t v5 = *(void *)(v0 + 416);
    sub_100A2E4D4(v2, v5, (uint64_t (*)(void))type metadata accessor for SafeLocation);
    if (*(unsigned char *)(v5 + *(int *)(v1 + 48)) == 3)
    {
      uint64_t v6 = 1;
    }
    else
    {
      sub_100A32584(*(void *)(v0 + 416), *(void *)(v0 + 368), (uint64_t (*)(void))type metadata accessor for SafeLocation);
      uint64_t v6 = 0;
    }
    uint64_t v7 = *(void *)(v0 + 384);
    uint64_t v9 = *(void *)(v0 + 360);
    uint64_t v8 = *(void *)(v0 + 368);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v0 + 392) + 56))(v8, v6, 1, v7);
    sub_10001D074(v8, v9, &qword_101653F20);
    if (v3(v9, 1, v7) == 1)
    {
      id v4 = 0;
    }
    else
    {
      uint64_t v11 = *(void *)(v0 + 400);
      uint64_t v10 = *(void *)(v0 + 408);
      sub_100A2E4D4(*(void *)(v0 + 360), v10, (uint64_t (*)(void))type metadata accessor for SafeLocation);
      sub_10001D4B0(0, (unint64_t *)&unk_101653D70);
      sub_100A32584(v10, v11, (uint64_t (*)(void))type metadata accessor for SafeLocation);
      id v4 = sub_100A06758(v11);
      sub_100A2E53C(v10, (uint64_t (*)(void))type metadata accessor for SafeLocation);
    }
    uint64_t v12 = *(void *)(v0 + 416);
    sub_10001DAB4(*(void *)(v0 + 368), &qword_101653F20);
    sub_100A2E53C(v12, (uint64_t (*)(void))type metadata accessor for SafeLocation);
  }
  uint64_t v13 = *(void *)(v0 + 744);
  uint64_t v14 = *(void *)(v0 + 336);
  uint64_t v15 = *(void *)(v0 + 344);
  char v16 = *(unsigned char *)(v0 + 777);
  unint64_t v17 = *(void **)(v0 + 320);
  uint64_t v19 = *(void *)(v0 + 296);
  uint64_t v18 = *(void *)(v0 + 304);
  *(void *)(v0 + 72) = 0;
  *(void *)(v0 + 80) = v13;
  *(unsigned char *)(v0 + 88) = v16;
  *(void *)(v0 + 96) = v4;
  *(void *)(v0 + 104) = v14;
  *(void *)(v0 + 112) = v15;
  *(void *)(v0 + 120) = v17;
  swift_bridgeObjectRetain();
  id v20 = v17;
  id v21 = v4;
  sub_100A10338(v0 + 72, v19, v18);

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  swift_release();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v22 = *(uint64_t (**)(void))(v0 + 8);
  return v22();
}

uint64_t sub_100A0EC0C()
{
  uint64_t v1 = *(void *)(v0 + 528);
  swift_release();
  swift_release();
  sub_100A2E53C(v1, (uint64_t (*)(void))type metadata accessor for OwnedBeaconRecord);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v2 = *(uint64_t (**)(void))(v0 + 8);
  return v2();
}

uint64_t sub_100A0EDA0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v21 = a1;
  uint64_t v5 = sub_10000588C((uint64_t *)&unk_1016565A0);
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v7 = *(void *)(v6 + 64);
  __chkstk_darwin(v5);
  uint64_t v8 = type metadata accessor for OwnedBeaconRecord();
  uint64_t v9 = *(void *)(v8 - 8);
  uint64_t v10 = *(void *)(v9 + 64);
  __chkstk_darwin(v8 - 8);
  uint64_t v11 = (char *)&v20 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = sub_10000588C(&qword_10164DBB0);
  __chkstk_darwin(v12 - 8);
  uint64_t v14 = (char *)&v20 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = type metadata accessor for TaskPriority();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v15 - 8) + 56))(v14, 1, 1, v15);
  sub_100A32584(a3, (uint64_t)v11, (uint64_t (*)(void))type metadata accessor for OwnedBeaconRecord);
  (*(void (**)(char *, uint64_t, uint64_t))(v6 + 16))((char *)&v20 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0), v21, v5);
  unint64_t v16 = (*(unsigned __int8 *)(v9 + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80);
  unint64_t v17 = (v10 + *(unsigned __int8 *)(v6 + 80) + v16) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80);
  uint64_t v18 = (char *)swift_allocObject();
  *((void *)v18 + 2) = 0;
  *((void *)v18 + 3) = 0;
  *((void *)v18 + 4) = a2;
  sub_100A2E4D4((uint64_t)v11, (uint64_t)&v18[v16], (uint64_t (*)(void))type metadata accessor for OwnedBeaconRecord);
  (*(void (**)(char *, char *, uint64_t))(v6 + 32))(&v18[v17], (char *)&v20 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0), v5);
  swift_retain();
  sub_1008F5E44((uint64_t)v14, (uint64_t)&unk_101655608, (uint64_t)v18);
  return swift_release();
}

uint64_t sub_100A0F04C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  v6[4] = a5;
  __n128 v6[5] = a6;
  uint64_t v6[2] = a1;
  v6[3] = a4;
  uint64_t v7 = sub_10000588C((uint64_t *)&unk_1016565A0);
  v6[6] = v7;
  uint64_t v8 = *(void *)(v7 - 8);
  v6[7] = v8;
  v6[8] = *(void *)(v8 + 64);
  v6[9] = swift_task_alloc();
  uint64_t v9 = *(void *)(type metadata accessor for OwnedBeaconRecord() - 8);
  v6[10] = v9;
  v6[11] = *(void *)(v9 + 64);
  v6[12] = swift_task_alloc();
  return _swift_task_switch(sub_100A0F17C, 0, 0);
}

uint64_t sub_100A0F17C()
{
  uint64_t v2 = v0[11];
  uint64_t v1 = v0[12];
  uint64_t v3 = v0[9];
  uint64_t v4 = v0[10];
  uint64_t v5 = v0[7];
  uint64_t v7 = v0[5];
  uint64_t v6 = v0[6];
  uint64_t v8 = v0[3];
  sub_100A32584(v0[4], v1, (uint64_t (*)(void))type metadata accessor for OwnedBeaconRecord);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 16))(v3, v7, v6);
  unint64_t v9 = (*(unsigned __int8 *)(v4 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
  unint64_t v10 = (v2 + *(unsigned __int8 *)(v5 + 80) + v9) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
  uint64_t v11 = swift_allocObject();
  v0[13] = v11;
  *(void *)(v11 + 16) = v8;
  sub_100A2E4D4(v1, v11 + v9, (uint64_t (*)(void))type metadata accessor for OwnedBeaconRecord);
  (*(void (**)(unint64_t, uint64_t, uint64_t))(v5 + 32))(v11 + v10, v3, v6);
  swift_retain();
  uint64_t v12 = (void *)swift_task_alloc();
  v0[14] = v12;
  *uint64_t v12 = v0;
  v12[1] = sub_100A0F330;
  uint64_t v13 = v0[2];
  return unsafeBlocking<A>(_:)(v13, sub_100A319D8, v11, (char *)&type metadata for () + 8);
}

uint64_t sub_100A0F330()
{
  uint64_t v3 = *v0;
  swift_task_dealloc();
  swift_release();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v3 + 8);
  return v1();
}

uint64_t sub_100A0F480(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v61 = a3;
  uint64_t v62 = a2;
  uint64_t v60 = type metadata accessor for OwnedBeaconRecord();
  uint64_t v55 = *(void *)(v60 - 8);
  __chkstk_darwin(v60);
  uint64_t v56 = v4;
  uint64_t v58 = (uint64_t)&v51 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = type metadata accessor for SystemInfo.DeviceLockState();
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v7 = __chkstk_darwin(v5);
  id v52 = (char *)&v51 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v7);
  unint64_t v10 = (char *)&v51 - v9;
  uint64_t v11 = sub_10000588C((uint64_t *)&unk_1016565A0);
  uint64_t v12 = *(void *)(v11 - 8);
  uint64_t v13 = *(void *)(v12 + 64);
  uint64_t v14 = __chkstk_darwin(v11);
  __chkstk_darwin(v14);
  unint64_t v16 = (char *)&v51 - v15;
  uint64_t v54 = *(void *)(a1 + 280);
  unint64_t v17 = *(void (**)(char *, uint64_t, uint64_t))(v12 + 16);
  v17((char *)&v51 - v15, v61, v11);
  uint64_t v57 = (char *)&v51 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17(v57, (uint64_t)v16, v11);
  unint64_t v18 = (*(unsigned __int8 *)(v12 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v12 + 80);
  uint64_t v53 = swift_allocObject();
  uint64_t v59 = v12;
  uint64_t v19 = *(void (**)(unint64_t, char *, uint64_t))(v12 + 32);
  uint64_t v61 = v11;
  v19(v53 + v18, v16, v11);
  static os_log_type_t.default.getter();
  if (qword_101637260 != -1) {
    swift_once();
  }
  sub_10000588C((uint64_t *)&unk_10163AD00);
  uint64_t v20 = swift_allocObject();
  long long v51 = xmmword_101342130;
  *(_OWORD *)(v20 + 16) = xmmword_101342130;
  uint64_t v21 = v62 + *(int *)(v60 + 20);
  uint64_t v22 = type metadata accessor for UUID();
  sub_100A24444((unint64_t *)&qword_101638B10, (void (*)(uint64_t))&type metadata accessor for UUID);
  uint64_t v60 = v21;
  uint64_t v23 = dispatch thunk of CustomStringConvertible.description.getter();
  uint64_t v25 = v24;
  *(void *)(v20 + 56) = &type metadata for String;
  *(void *)(v20 + 64) = sub_10000B4CC();
  *(void *)(v20 + 32) = v23;
  *(void *)(v20 + 40) = v25;
  os_log(_:dso:log:_:_:)();
  swift_bridgeObjectRelease();
  static SystemInfo.lockState.getter();
  uint64_t v26 = v52;
  (*(void (**)(char *, void, uint64_t))(v6 + 104))(v52, enum case for SystemInfo.DeviceLockState.beforeFirstUnlock(_:), v5);
  sub_100A24444((unint64_t *)&unk_101655610, (void (*)(uint64_t))&type metadata accessor for SystemInfo.DeviceLockState);
  dispatch thunk of RawRepresentable.rawValue.getter();
  dispatch thunk of RawRepresentable.rawValue.getter();
  uint64_t v28 = v63;
  uint64_t v27 = v64;
  uint64_t v29 = *(void (**)(char *, uint64_t))(v6 + 8);
  v29(v26, v5);
  v29(v10, v5);
  uint64_t v30 = v61;
  id v31 = v57;
  if (v27 == v28)
  {
    static os_log_type_t.default.getter();
    os_log(_:dso:log:_:_:)();
    sub_10009FD9C();
    uint64_t v32 = swift_allocError();
    *uint64_t v33 = 0;
    uint64_t v64 = v32;
    swift_errorRetain();
    CheckedContinuation.resume(throwing:)();
    CheckedContinuation.resume(returning:)();
    swift_errorRelease();
  }
  uint64_t v34 = dispatch_group_create();
  dispatch_group_enter(v34);
  sub_10000588C(&qword_10163BC50);
  uint64_t v35 = *(void *)(v22 - 8);
  unint64_t v36 = (*(unsigned __int8 *)(v35 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v35 + 80);
  uint64_t v37 = swift_allocObject();
  *(_OWORD *)(v37 + 16) = v51;
  (*(void (**)(unint64_t, uint64_t, uint64_t))(v35 + 16))(v37 + v36, v60, v22);
  uint64_t v38 = swift_allocObject();
  *(void *)(v38 + 16) = v34;
  uint64_t v39 = v34;
  uint64_t v40 = v54;
  sub_100A07038(v37, (uint64_t)sub_1003A951C, v38, (uint64_t)&unk_1015E35A8, (uint64_t)sub_100A2E3B4, (uint64_t)&unk_1015E35C0);
  swift_bridgeObjectRelease();
  swift_release();
  OS_dispatch_group.wait()();
  uint64_t v41 = v62;
  uint64_t v42 = v58;
  sub_100A32584(v62, v58, (uint64_t (*)(void))type metadata accessor for OwnedBeaconRecord);
  unint64_t v43 = (*(unsigned __int8 *)(v55 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v55 + 80);
  unint64_t v44 = (v56 + v43 + 7) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v45 = (v44 + 23) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v46 = swift_allocObject();
  sub_100A2E4D4(v42, v46 + v43, (uint64_t (*)(void))type metadata accessor for OwnedBeaconRecord);
  uint64_t v47 = (uint64_t (**)(uint64_t))(v46 + v44);
  uint64_t v48 = v53;
  *uint64_t v47 = sub_100A31B48;
  v47[1] = (uint64_t (*)(uint64_t))v48;
  unint64_t v49 = v46 + v45;
  *(void *)unint64_t v49 = v40;
  *(_WORD *)(v49 + 8) = 257;
  swift_retain();
  swift_retain();
  sub_10038F420(v41, (void (*)(void))sub_1003B769C, v46);
  swift_release();
  swift_release();

  return (*(uint64_t (**)(char *, uint64_t))(v59 + 8))(v31, v30);
}

uint64_t sub_100A0FBB8(uint64_t a1)
{
  if (a1)
  {
    swift_errorRetain();
    sub_10000588C((uint64_t *)&unk_1016565A0);
    CheckedContinuation.resume(throwing:)();
  }
  sub_10000588C((uint64_t *)&unk_1016565A0);
  return CheckedContinuation.resume(returning:)();
}

uint64_t sub_100A0FC18@<X0>(void *a1@<X1>, uint64_t a2@<X2>, BOOL *a3@<X8>)
{
  unint64_t v36 = a3;
  uint64_t v5 = type metadata accessor for UUID();
  uint64_t v39 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v7 = (char *)&v35 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = sub_10000588C(&qword_101638CF0);
  __chkstk_darwin(v8 - 8);
  unint64_t v10 = (char *)&v35 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = type metadata accessor for SafeLocation();
  uint64_t v38 = *(void *)(v11 - 8);
  uint64_t v12 = __chkstk_darwin(v11);
  uint64_t v46 = (uint64_t)&v35 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v12);
  uint64_t v15 = (char *)&v35 - v14;
  uint64_t v16 = sub_10000588C(&qword_101653F20);
  __chkstk_darwin(v16 - 8);
  uint64_t v35 = (uint64_t)&v35 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v18 = *(int *)(type metadata accessor for OwnedBeaconRecord() + 20);
  uint64_t v37 = sub_100A1ECD4(a1);
  uint64_t v45 = v37[2];
  if (v45)
  {
    uint64_t v19 = 0;
    uint64_t v51 = a2 + v18;
    uint64_t v42 = (char *)v37 + ((*(unsigned __int8 *)(v38 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v38 + 80));
    unint64_t v43 = v15;
    unint64_t v20 = v39 + 56;
    id v52 = (unsigned int (**)(char *, uint64_t, uint64_t))(v39 + 48);
    uint64_t v53 = v39 + 16;
    unint64_t v49 = (void (**)(char *, uint64_t))(v39 + 8);
    uint64_t v50 = (void (**)(char *, char *, uint64_t))(v39 + 32);
    uint64_t v41 = *(void *)(v38 + 72);
    uint64_t v44 = v11;
    do
    {
      sub_100A32584((uint64_t)&v42[v41 * v19], (uint64_t)v15, (uint64_t (*)(void))type metadata accessor for SafeLocation);
      uint64_t v23 = *(void *)&v15[*(int *)(v11 + 52)];
      uint64_t v24 = *(void *)(v23 + 16);
      uint64_t v47 = v19;
      uint64_t v48 = v23;
      if (v24)
      {
        unint64_t v40 = v20 & 0xFFFFFFFFFFFFLL | 0xA0D1000000000000;
        uint64_t v25 = v23 + ((*(unsigned __int8 *)(v39 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v39 + 80));
        uint64_t v26 = *(void *)(v39 + 72);
        uint64_t v27 = *(void (**)(char *, uint64_t, uint64_t))(v39 + 16);
        swift_bridgeObjectRetain();
        while (1)
        {
          v27(v10, v25, v5);
          uint64_t v21 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))v20;
          (*(void (**)(char *, void, uint64_t, uint64_t))v20)(v10, 0, 1, v5);
          if ((*v52)(v10, 1, v5) == 1) {
            break;
          }
          (*v50)(v7, v10, v5);
          sub_100A24444((unint64_t *)&qword_10163B8F0, (void (*)(uint64_t))&type metadata accessor for UUID);
          char v28 = dispatch thunk of static Equatable.== infix(_:_:)();
          (*v49)(v7, v5);
          if (v28)
          {
            swift_bridgeObjectRelease();
            uint64_t v15 = v43;
            uint64_t v29 = v46;
            sub_100A32584((uint64_t)v43, v46, (uint64_t (*)(void))type metadata accessor for SafeLocation);
            uint64_t v11 = v44;
            int v30 = *(unsigned __int8 *)(v29 + *(int *)(v44 + 48));
            sub_100A2E53C(v29, (uint64_t (*)(void))type metadata accessor for SafeLocation);
            if (v30 != 1) {
              goto LABEL_6;
            }
            uint64_t v31 = v35;
            sub_100A2E4D4((uint64_t)v15, v35, (uint64_t (*)(void))type metadata accessor for SafeLocation);
            uint64_t v32 = v38;
            (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v38 + 56))(v31, 0, 1, v11);
            goto LABEL_16;
          }
          v25 += v26;
          if (!--v24) {
            goto LABEL_4;
          }
        }
      }
      else
      {
        uint64_t v21 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))v20;
        swift_bridgeObjectRetain();
LABEL_4:
        v21(v10, 1, 1, v5);
      }
      swift_bridgeObjectRelease();
      uint64_t v15 = v43;
      uint64_t v22 = v46;
      sub_100A32584((uint64_t)v43, v46, (uint64_t (*)(void))type metadata accessor for SafeLocation);
      sub_100A2E53C(v22, (uint64_t (*)(void))type metadata accessor for SafeLocation);
      uint64_t v11 = v44;
LABEL_6:
      uint64_t v19 = v47 + 1;
      sub_100A2E53C((uint64_t)v15, (uint64_t (*)(void))type metadata accessor for SafeLocation);
    }
    while (v19 != v45);
  }
  uint64_t v32 = v38;
  uint64_t v31 = v35;
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v38 + 56))(v35, 1, 1, v11);
LABEL_16:
  swift_bridgeObjectRelease();
  BOOL v33 = (*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v32 + 48))(v31, 1, v11) != 1;
  uint64_t result = sub_10001DAB4(v31, &qword_101653F20);
  *unint64_t v36 = v33;
  return result;
}

uint64_t sub_100A101A8(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for DispatchPredicate();
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v7 = &v12[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v8 = *(void *)(a1 + 280);
  uint64_t v9 = *(void **)(v8 + 96);
  *uint64_t v7 = v9;
  (*(void (**)(void *, void, uint64_t))(v5 + 104))(v7, enum case for DispatchPredicate.notOnQueue(_:), v4);
  v9;
  char v10 = _dispatchPreconditionTest(_:)();
  uint64_t result = (*(uint64_t (**)(void *, uint64_t))(v5 + 8))(v7, v4);
  if (v10)
  {
    __chkstk_darwin(result);
    *(void *)&v12[-32] = v8;
    *(void *)&v12[-24] = a2;
    *(void *)&v12[-16] = 0;
    *(void *)&v12[-8] = 0;
    sub_10000588C(&qword_101653F20);
    return OS_dispatch_queue.sync<A>(execute:)();
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_100A10338(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = v3;
  uint64_t v28 = a2;
  uint64_t v29 = a3;
  uint64_t v27 = sub_10000588C(&qword_101655628);
  uint64_t v6 = *(void *)(v27 - 8);
  __chkstk_darwin(v27);
  uint64_t v8 = (char *)&v25 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = sub_10000588C(&qword_101655630);
  uint64_t v25 = *(void *)(v9 - 8);
  uint64_t v26 = v9;
  __chkstk_darwin(v9);
  uint64_t v11 = (char *)&v25 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_101637118 != -1) {
    swift_once();
  }
  uint64_t v12 = qword_10170ED88;
  uint64_t v13 = *(void *)(v4 + 280);
  type metadata accessor for SeparationAlertCoalescer();
  uint64_t v14 = swift_allocObject();
  *(void *)(v14 + 16) = v13;
  *(void *)(v14 + 24) = v12;
  swift_retain();
  swift_retain();
  uint64_t v15 = sub_101272EA8(a1);
  swift_retain();
  sub_100A3219C(a1);
  swift_retain();
  uint64_t v16 = sub_100A294B0(v15, v4, a1, v14);
  swift_release();
  sub_100A321EC(a1);
  swift_bridgeObjectRelease();
  swift_release();
  int v30 = v16;
  sub_10000588C(&qword_101655638);
  sub_10000588C(&qword_101655640);
  sub_100062734(&qword_101655648, &qword_101655638);
  sub_100062734(&qword_101655650, &qword_101655640);
  Publishers.MergeMany.init<A>(_:)();
  sub_100062734(&qword_101655658, &qword_101655628);
  uint64_t v17 = v27;
  Publisher.collect()();
  (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v17);
  sub_100062734(&qword_101655660, &qword_101655630);
  uint64_t v18 = v26;
  uint64_t v19 = Publisher.eraseToAnyPublisher()();
  (*(void (**)(char *, uint64_t))(v25 + 8))(v11, v18);
  int v30 = (void *)v19;
  uint64_t v20 = swift_allocObject();
  long long v21 = *(_OWORD *)(a1 + 16);
  *(_OWORD *)(v20 + 16) = *(_OWORD *)a1;
  *(_OWORD *)(v20 + 32) = v21;
  *(_OWORD *)(v20 + 48) = *(_OWORD *)(a1 + 32);
  uint64_t v22 = v28;
  uint64_t v23 = v29;
  *(void *)(v20 + 64) = *(void *)(a1 + 48);
  *(void *)(v20 + 72) = v22;
  *(void *)(v20 + 80) = v23;
  sub_100A3219C(a1);
  swift_retain();
  sub_10000588C(&qword_101655668);
  sub_100062734(&qword_101655670, &qword_101655668);
  Publisher.oneshot(_:)();
  swift_release();
  swift_release();
  return swift_release();
}

uint64_t sub_100A1074C@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t *a4@<X8>)
{
  uint64_t v8 = swift_allocObject();
  swift_weakInit();
  sub_10001D010(a3, (uint64_t)v12);
  uint64_t v9 = swift_allocObject();
  *(void *)(v9 + 16) = v8;
  long long v10 = *(_OWORD *)(a1 + 16);
  *(_OWORD *)(v9 + 24) = *(_OWORD *)a1;
  *(_OWORD *)(v9 + 40) = v10;
  *(_OWORD *)(v9 + 56) = *(_OWORD *)(a1 + 32);
  *(void *)(v9 + 72) = *(void *)(a1 + 48);
  *(void *)(v9 + 80) = a2;
  sub_10001CEB0(v12, v9 + 88);
  sub_10000588C(&qword_101655680);
  swift_allocObject();
  sub_100A3219C(a1);
  swift_retain();
  uint64_t result = Future.init(_:)();
  *a4 = result;
  return result;
}

uint64_t sub_100A10858(uint64_t (*a1)(long long *), uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v21 = a5;
  uint64_t v10 = type metadata accessor for UUID();
  uint64_t v11 = *(void *)(v10 - 8);
  __chkstk_darwin(v10);
  uint64_t v13 = (char *)&v20 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = swift_allocObject();
  *(void *)(v14 + 16) = a1;
  *(void *)(v14 + 24) = a2;
  swift_beginAccess();
  if (swift_weakLoadStrong())
  {
    uint64_t v15 = swift_allocObject();
    swift_weakInit();
    sub_10001D010(a6, (uint64_t)v22);
    uint64_t v16 = swift_allocObject();
    long long v17 = *(_OWORD *)(a4 + 16);
    *(_OWORD *)(v16 + 40) = *(_OWORD *)a4;
    *(void *)(v16 + 16) = v15;
    *(void *)(v16 + 24) = sub_100A2E5A8;
    *(void *)(v16 + 32) = v14;
    *(_OWORD *)(v16 + 56) = v17;
    *(_OWORD *)(v16 + 72) = *(_OWORD *)(a4 + 32);
    uint64_t v18 = v21;
    *(void *)(v16 + 88) = *(void *)(a4 + 48);
    *(void *)(v16 + 96) = v18;
    sub_10001CEB0(v22, v16 + 104);
    swift_retain();
    swift_retain();
    sub_100A3219C(a4);
    swift_retain();
    UUID.init()();
    Sequencer.perform(identifier:_:enqueueCompletion:)();
    swift_release();
    (*(void (**)(char *, uint64_t))(v11 + 8))(v13, v10);
    swift_release();
    return swift_release();
  }
  else
  {
    swift_retain();
    swift_release();
    *(void *)&v22[0] = 0;
    BYTE8(v22[0]) = 1;
    return a1(v22);
  }
}

uint64_t sub_100A10AB0(uint64_t (*a1)(void), uint64_t a2, uint64_t a3, uint64_t (*a4)(void, void), uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  swift_beginAccess();
  if (swift_weakLoadStrong())
  {
    uint64_t v40 = a8;
    if (qword_101636EE0 != -1) {
      swift_once();
    }
    uint64_t v14 = type metadata accessor for Logger();
    sub_100010324(v14, (uint64_t)qword_10170E7C8);
    sub_100A3219C(a6);
    sub_100A3219C(a6);
    uint64_t v15 = Logger.logObject.getter();
    os_log_type_t v16 = static os_log_type_t.default.getter();
    uint64_t v42 = a4;
    uint64_t v43 = a2;
    uint64_t v41 = a1;
    if (os_log_type_enabled(v15, v16))
    {
      long long v17 = (uint8_t *)swift_slowAlloc();
      v54[0] = swift_slowAlloc();
      *(_DWORD *)long long v17 = 136315138;
      long long v18 = *(_OWORD *)(a6 + 16);
      long long v44 = *(_OWORD *)a6;
      long long v45 = v18;
      long long v46 = *(_OWORD *)(a6 + 32);
      uint64_t v47 = *(void *)(a6 + 48);
      sub_100A3219C(a6);
      uint64_t v19 = String.init<A>(describing:)();
      *(void *)&long long v44 = sub_1008FA0F0(v19, v20, v54);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      sub_100A321EC(a6);
      sub_100A321EC(a6);
      _os_log_impl((void *)&_mh_execute_header, v15, v16, "Attempting to coallesce notification with context: %s", v17, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      sub_100A321EC(a6);
      sub_100A321EC(a6);
    }

    sub_101273DC0((uint64_t *)&v44, (uint64_t)v54, v40);
    sub_10001D074((uint64_t)v54, (uint64_t)&v51, &qword_101655698);
    if (v52)
    {
      sub_10001CEB0(&v51, (uint64_t)v53);
      sub_10001D010((uint64_t)v53, (uint64_t)&v51);
      sub_10001D010((uint64_t)&v44, (uint64_t)v50);
      uint64_t v23 = Logger.logObject.getter();
      os_log_type_t v24 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v23, v24))
      {
        uint64_t v25 = swift_slowAlloc();
        uint64_t v49 = swift_slowAlloc();
        *(_DWORD *)uint64_t v25 = 136315394;
        sub_10001D010((uint64_t)&v51, (uint64_t)v48);
        sub_10000588C(&qword_1016556A0);
        uint64_t v26 = String.init<A>(describing:)();
        v48[0] = sub_1008FA0F0(v26, v27, &v49);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)&v51);
        *(_WORD *)(v25 + 12) = 2080;
        sub_10001D010((uint64_t)v50, (uint64_t)v48);
        uint64_t v28 = String.init<A>(describing:)();
        v48[0] = sub_1008FA0F0(v28, v29, &v49);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)v50);
        _os_log_impl((void *)&_mh_execute_header, v23, v24, "Replacing notification %s with %s", (uint8_t *)v25, 0x16u);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
      }
      else
      {
        _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)&v51);
        _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)v50);
      }

      if (qword_101637118 != -1) {
        swift_once();
      }
      sub_10001D010((uint64_t)v53, (uint64_t)&v51);
      sub_10001D010((uint64_t)&v44, (uint64_t)v50);
      uint64_t v35 = (void *)swift_allocObject();
      sub_10001CEB0(&v51, (uint64_t)(v35 + 2));
      sub_10001CEB0(v50, (uint64_t)(v35 + 7));
      v35[12] = v42;
      v35[13] = a5;
      v35[14] = a1;
      v35[15] = v43;
      swift_retain();
      swift_retain();
      sub_100E06098(v53, &v44, (uint64_t)sub_100A324A4, (uint64_t)v35);
      swift_release();
      swift_release();
      _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)v53);
    }
    else
    {
      sub_10001DAB4((uint64_t)&v51, &qword_101655698);
      sub_10001D010((uint64_t)&v44, (uint64_t)v53);
      int v30 = Logger.logObject.getter();
      os_log_type_t v31 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v30, v31))
      {
        uint64_t v32 = (uint8_t *)swift_slowAlloc();
        *(void *)&v50[0] = swift_slowAlloc();
        *(_DWORD *)uint64_t v32 = 136315138;
        sub_10001D010((uint64_t)v53, (uint64_t)&v51);
        sub_10000588C(&qword_1016556A0);
        uint64_t v33 = String.init<A>(describing:)();
        *(void *)&long long v51 = sub_1008FA0F0(v33, v34, (uint64_t *)v50);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)v53);
        _os_log_impl((void *)&_mh_execute_header, v30, v31, "Posting notification %s", v32, 0xCu);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
      }
      else
      {
        _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)v53);
      }

      if (qword_101637118 != -1) {
        swift_once();
      }
      sub_10001D010((uint64_t)&v44, (uint64_t)v53);
      unint64_t v36 = (void *)swift_allocObject();
      sub_10001CEB0(v53, (uint64_t)(v36 + 2));
      v36[7] = a4;
      v36[8] = a5;
      v36[9] = v41;
      v36[10] = v43;
      uint64_t v37 = *((void *)&v45 + 1);
      uint64_t v38 = v46;
      uint64_t v39 = sub_10001CD44(&v44, *((uint64_t *)&v45 + 1));
      swift_retain();
      swift_retain();
      sub_100E0525C((uint64_t)v39, (uint64_t)sub_100A32440, (uint64_t)v36, v37, v38);
      swift_release();
      swift_release();
    }
    sub_10001DAB4((uint64_t)v54, &qword_101655698);
    return _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)&v44);
  }
  else
  {
    uint64_t v21 = a4(0, 1);
    return a1(v21);
  }
}

uint64_t sub_100A111DC(uint64_t a1, char a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(uint64_t, uint64_t), uint64_t a6, uint64_t (*a7)(uint64_t))
{
  uint64_t v12 = a2 & 1;
  if (qword_101636EE0 != -1) {
    swift_once();
  }
  uint64_t v13 = type metadata accessor for Logger();
  sub_100010324(v13, (uint64_t)qword_10170E7C8);
  sub_10001D010(a3, (uint64_t)v29);
  sub_10001D010(a4, (uint64_t)v28);
  sub_100A324BC(a1, v12);
  sub_100A324BC(a1, v12);
  uint64_t v14 = Logger.logObject.getter();
  os_log_type_t v15 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v14, v15))
  {
    uint64_t v16 = swift_slowAlloc();
    uint64_t v27 = swift_slowAlloc();
    *(_DWORD *)uint64_t v16 = 136315650;
    sub_10001D010((uint64_t)v29, (uint64_t)&v25);
    sub_10000588C(&qword_1016556A0);
    uint64_t v17 = String.init<A>(describing:)();
    uint64_t v25 = sub_1008FA0F0(v17, v18, &v27);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)v29);
    *(_WORD *)(v16 + 12) = 2080;
    sub_10001D010((uint64_t)v28, (uint64_t)&v25);
    uint64_t v19 = String.init<A>(describing:)();
    uint64_t v25 = sub_1008FA0F0(v19, v20, &v27);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)v28);
    *(_WORD *)(v16 + 22) = 2080;
    uint64_t v25 = a1;
    BOOL v26 = v12 != 0;
    sub_100A324BC(a1, v12);
    sub_10000588C(&qword_1016556A8);
    uint64_t v21 = String.init<A>(describing:)();
    uint64_t v25 = sub_1008FA0F0(v21, v22, &v27);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    sub_100A324D8(a1, v12);
    sub_100A324D8(a1, v12);
    _os_log_impl((void *)&_mh_execute_header, v14, v15, "Completed replacing old separation notification: %s with %s - result: %s", (uint8_t *)v16, 0x20u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)v29);
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)v28);
    sub_100A324D8(a1, v12);
    sub_100A324D8(a1, v12);
  }

  uint64_t v23 = a5(a1, v12);
  return a7(v23);
}

uint64_t sub_100A11520(uint64_t a1, char a2, uint64_t a3, uint64_t (*a4)(uint64_t, uint64_t), uint64_t a5, uint64_t (*a6)(uint64_t))
{
  uint64_t v10 = a2 & 1;
  if (qword_101636EE0 != -1) {
    swift_once();
  }
  uint64_t v11 = type metadata accessor for Logger();
  sub_100010324(v11, (uint64_t)qword_10170E7C8);
  sub_10001D010(a3, (uint64_t)v24);
  sub_100A324BC(a1, v10);
  sub_100A324BC(a1, v10);
  uint64_t v12 = Logger.logObject.getter();
  os_log_type_t v13 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v12, v13))
  {
    uint64_t v14 = swift_slowAlloc();
    uint64_t v23 = swift_slowAlloc();
    *(_DWORD *)uint64_t v14 = 136315394;
    sub_10001D010((uint64_t)v24, (uint64_t)&v21);
    sub_10000588C(&qword_1016556A0);
    uint64_t v15 = String.init<A>(describing:)();
    uint64_t v21 = sub_1008FA0F0(v15, v16, &v23);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)v24);
    *(_WORD *)(v14 + 12) = 2080;
    uint64_t v21 = a1;
    BOOL v22 = v10 != 0;
    sub_100A324BC(a1, v10);
    sub_10000588C(&qword_1016556A8);
    uint64_t v17 = String.init<A>(describing:)();
    uint64_t v21 = sub_1008FA0F0(v17, v18, &v23);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    sub_100A324D8(a1, v10);
    sub_100A324D8(a1, v10);
    _os_log_impl((void *)&_mh_execute_header, v12, v13, "Completed posting new separation notification: %s - result: %s", (uint8_t *)v14, 0x16u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)v24);
    sub_100A324D8(a1, v10);
    sub_100A324D8(a1, v10);
  }

  uint64_t v19 = a4(a1, v10);
  return a6(v19);
}

void sub_100A117E8(uint64_t a1, uint64_t a2, void (*a3)(void *, uint64_t))
{
  if (*(unsigned char *)(a1 + 8))
  {
    if (qword_101636EE0 != -1) {
      swift_once();
    }
    uint64_t v5 = type metadata accessor for Logger();
    sub_100010324(v5, (uint64_t)qword_10170E7C8);
    sub_100A3219C(a2);
    sub_100A3219C(a2);
    uint64_t v6 = Logger.logObject.getter();
    os_log_type_t v7 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v6, v7))
    {
      uint64_t v8 = (uint8_t *)swift_slowAlloc();
      uint64_t v9 = swift_slowAlloc();
      *(_DWORD *)uint64_t v8 = 136315138;
      uint64_t v20 = v9;
      sub_100A3219C(a2);
      uint64_t v10 = String.init<A>(describing:)();
      uint64_t v19 = (void *)sub_1008FA0F0(v10, v11, &v20);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      sub_100A321EC(a2);
      sub_100A321EC(a2);
      _os_log_impl((void *)&_mh_execute_header, v6, v7, "Failed to post separation notifications for context: %s", v8, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      sub_100A321EC(a2);
      sub_100A321EC(a2);
    }

    type metadata accessor for SPSeparationMonitoringError(0);
    uint64_t v20 = 12;
    sub_1004A0BC8((uint64_t)_swiftEmptyArrayStorage);
    sub_100A24444(&qword_1016386A0, type metadata accessor for SPSeparationMonitoringError);
    _BridgedStoredNSError.init(_:userInfo:)();
    a3(v19, 1);
  }
  else
  {
    if (qword_101636EE0 != -1) {
      swift_once();
    }
    uint64_t v12 = type metadata accessor for Logger();
    sub_100010324(v12, (uint64_t)qword_10170E7C8);
    sub_100A3219C(a2);
    sub_100A3219C(a2);
    os_log_type_t v13 = Logger.logObject.getter();
    os_log_type_t v14 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v13, v14))
    {
      uint64_t v15 = (uint8_t *)swift_slowAlloc();
      uint64_t v16 = swift_slowAlloc();
      *(_DWORD *)uint64_t v15 = 136315138;
      uint64_t v20 = v16;
      sub_100A3219C(a2);
      uint64_t v17 = String.init<A>(describing:)();
      sub_1008FA0F0(v17, v18, &v20);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      sub_100A321EC(a2);
      sub_100A321EC(a2);
      _os_log_impl((void *)&_mh_execute_header, v13, v14, "Successfuly posted separation notifications for context: %s", v15, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      sub_100A321EC(a2);
      sub_100A321EC(a2);
    }

    a3(0, 0);
  }
}

void sub_100A11C00(unint64_t a1, uint64_t a2, void (*a3)(id, unint64_t, uint64_t), uint64_t a4, void *a5)
{
  if (!a1) {
    goto LABEL_16;
  }
  unint64_t v8 = a1;
  uint64_t v9 = a1 & 0xFFFFFFFFFFFFFF8;
  if (!(a1 >> 62))
  {
    uint64_t v10 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain();
    if (v10) {
      goto LABEL_4;
    }
LABEL_15:
    swift_bridgeObjectRelease();
    goto LABEL_16;
  }
  swift_bridgeObjectRetain();
  if (!_CocoaArrayWrapper.endIndex.getter()) {
    goto LABEL_15;
  }
LABEL_4:
  if ((v8 & 0xC000000000000001) != 0)
  {
    unint64_t v11 = (void *)specialized _ArrayBuffer._getElementSlowPath(_:)();
  }
  else
  {
    if (!*(void *)(v9 + 16))
    {
      __break(1u);
      goto LABEL_19;
    }
    unint64_t v11 = *(void **)(v8 + 32);
    swift_unknownObjectRetain();
  }
  swift_bridgeObjectRelease();
  id v12 = [v11 name];
  if (!v12)
  {
    swift_unknownObjectRelease();
LABEL_16:
    type metadata accessor for SPSeparationMonitoringError(0);
    sub_1004A0BC8((uint64_t)_swiftEmptyArrayStorage);
    sub_100A24444(&qword_1016386A0, type metadata accessor for SPSeparationMonitoringError);
    _BridgedStoredNSError.init(_:userInfo:)();
    a3(v23, 0, 1);

    return;
  }
  os_log_type_t v13 = v12;
  uint64_t v5 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  unint64_t v8 = v14;

  if (qword_101636EE0 != -1) {
LABEL_19:
  }
    swift_once();
  uint64_t v15 = type metadata accessor for Logger();
  sub_100010324(v15, (uint64_t)qword_10170E7C8);
  id v16 = a5;
  swift_bridgeObjectRetain_n();
  id v17 = v16;
  unint64_t v18 = Logger.logObject.getter();
  os_log_type_t v19 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v18, v19))
  {
    uint64_t v20 = swift_slowAlloc();
    BOOL v22 = (void *)swift_slowAlloc();
    id v23 = (id)swift_slowAlloc();
    *(_DWORD *)uint64_t v20 = 138412546;
    id v21 = v17;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    void *v22 = v17;

    *(_WORD *)(v20 + 12) = 2080;
    swift_bridgeObjectRetain();
    sub_1008FA0F0(v5, v8, (uint64_t *)&v23);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    _os_log_impl((void *)&_mh_execute_header, v18, v19, "Received reverse geocoded address for location: %@: %s", (uint8_t *)v20, 0x16u);
    sub_10000588C((uint64_t *)&unk_101638EA0);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {

    swift_bridgeObjectRelease_n();
  }
  a3((id)v5, v8, 0);
  swift_unknownObjectRelease();
  swift_bridgeObjectRelease();
}

uint64_t sub_100A11FF4(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v4 = a2;
  uint64_t v5 = *(void (**)(uint64_t, void *))(a1 + 32);
  if (a2)
  {
    sub_10000588C(&qword_1016555B8);
    uint64_t v4 = static Array._unconditionallyBridgeFromObjectiveC(_:)();
  }
  swift_retain();
  id v6 = a3;
  v5(v4, a3);
  swift_release();

  return swift_bridgeObjectRelease();
}

id sub_100A1208C@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = type metadata accessor for OwnedBeaconRecord();
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  uint64_t v5 = (char *)&v19 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = type metadata accessor for StableIdentifier();
  __chkstk_darwin(v6);
  unint64_t v8 = (uint64_t *)((char *)&v19 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0));
  id result = [self sharedInstance];
  if (!result)
  {
    __break(1u);
    return result;
  }
  uint64_t v10 = result;
  id v11 = [result getActivePairedDevice];

  if (!v11) {
    return (id)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v3 + 56))(a1, 1, 1, v2);
  }
  if ([v11 valueForProperty:NRDevicePropertyUDID])
  {
    _bridgeAnyObjectToAny(_:)();
    swift_unknownObjectRelease();
  }
  else
  {
    memset(v21, 0, sizeof(v21));
  }
  sub_10001D608((uint64_t)v21, (uint64_t)v22, (uint64_t *)&unk_101644360);
  if (!v23)
  {

    sub_10001DAB4((uint64_t)v22, (uint64_t *)&unk_101644360);
    return (id)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v3 + 56))(a1, 1, 1, v2);
  }
  if ((swift_dynamicCast() & 1) == 0)
  {

    return (id)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v3 + 56))(a1, 1, 1, v2);
  }
  unint64_t v12 = v20;
  uint64_t v13 = HIBYTE(v20) & 0xF;
  if ((v20 & 0x2000000000000000) == 0) {
    uint64_t v13 = v19 & 0xFFFFFFFFFFFFLL;
  }
  if (!v13)
  {

    swift_bridgeObjectRelease();
    return (id)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v3 + 56))(a1, 1, 1, v2);
  }
  *unint64_t v8 = v19;
  v8[1] = v12;
  swift_storeEnumTagMultiPayload();
  unint64_t v14 = sub_100ACF5FC();
  uint64_t v15 = *((void *)v14 + 2);
  if (v15)
  {
    uint64_t v16 = (uint64_t)&v14[(*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80)];
    uint64_t v17 = *(void *)(v3 + 72);
    while (1)
    {
      sub_100A32584(v16, (uint64_t)v5, (uint64_t (*)(void))type metadata accessor for OwnedBeaconRecord);
      if (sub_101113BD4((uint64_t)&v5[*(int *)(v2 + 24)], (uint64_t)v8)) {
        break;
      }
      sub_100A2E53C((uint64_t)v5, (uint64_t (*)(void))type metadata accessor for OwnedBeaconRecord);
      v16 += v17;
      if (!--v15) {
        goto LABEL_15;
      }
    }
    sub_100A2E4D4((uint64_t)v5, a1, (uint64_t (*)(void))type metadata accessor for OwnedBeaconRecord);
    uint64_t v18 = 0;
  }
  else
  {
LABEL_15:
    uint64_t v18 = 1;
  }
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v3 + 56))(a1, v18, 1, v2);
  swift_bridgeObjectRelease();

  return (id)sub_100A2E53C((uint64_t)v8, (uint64_t (*)(void))type metadata accessor for StableIdentifier);
}

uint64_t sub_100A123E0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v169 = a4;
  uint64_t v164 = a3;
  uint64_t v6 = sub_10000588C((uint64_t *)&unk_1016554E0);
  uint64_t v144 = *(void *)(v6 - 8);
  uint64_t v7 = __chkstk_darwin(v6 - 8);
  uint64_t v146 = (uint64_t)&v139 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v145 = v8;
  __chkstk_darwin(v7);
  uint64_t v153 = (uint64_t)&v139 - v9;
  uint64_t v10 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v11 = *(void *)(v10 - 8);
  __chkstk_darwin(v10);
  uint64_t v170 = (char *)&v139 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = type metadata accessor for DispatchQoS();
  uint64_t v14 = *(void *)(v13 - 8);
  __chkstk_darwin(v13);
  BOOL v165 = (char *)&v139 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v163 = type metadata accessor for DispatchQoS.QoSClass();
  uint64_t v168 = *(void *)(v163 - 8);
  __chkstk_darwin(v163);
  uint64_t v167 = (char *)&v139 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v17 = type metadata accessor for UUID();
  uint64_t v18 = *(void *)(v17 - 8);
  uint64_t v19 = __chkstk_darwin(v17);
  unint64_t v158 = (char *)&v139 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v21 = __chkstk_darwin(v19);
  uint64_t v139 = (char *)&v139 - v22;
  __chkstk_darwin(v21);
  uint64_t v176 = (char *)&v139 - v23;
  uint64_t v156 = type metadata accessor for DispatchPredicate();
  uint64_t v155 = *(void *)(v156 - 8);
  __chkstk_darwin(v156);
  uint64_t v154 = (char **)((char *)&v139 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v151 = sub_10000588C(&qword_10164B290);
  __chkstk_darwin(v151);
  uint64_t v152 = (char *)&v139 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v26 = sub_10000588C(&qword_101638CF0);
  __chkstk_darwin(v26 - 8);
  uint64_t v174 = (char *)&v139 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_101636EE0 != -1) {
    swift_once();
  }
  uint64_t v28 = type metadata accessor for Logger();
  uint64_t v29 = sub_100010324(v28, (uint64_t)qword_10170E7C8);
  swift_bridgeObjectRetain_n();
  uint64_t v159 = v29;
  int v30 = Logger.logObject.getter();
  os_log_type_t v31 = static os_log_type_t.default.getter();
  BOOL v32 = os_log_type_enabled(v30, v31);
  uint64_t v175 = v17;
  uint64_t v177 = a1;
  uint64_t v166 = v13;
  uint64_t v173 = v14;
  uint64_t v172 = v10;
  uint64_t v171 = v11;
  if (v32)
  {
    uint64_t v33 = (uint8_t *)swift_slowAlloc();
    *(void *)&long long aBlock = swift_slowAlloc();
    *(_DWORD *)uint64_t v33 = 136315138;
    swift_bridgeObjectRetain();
    uint64_t v34 = Array.description.getter();
    unint64_t v36 = v35;
    swift_bridgeObjectRelease();
    uint64_t v37 = v34;
    uint64_t v17 = v175;
    uint64_t v184 = (void *)sub_1008FA0F0(v37, v36, (uint64_t *)&aBlock);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v30, v31, "Enabling separation monitoring for beacons: %s", v33, 0xCu);
    swift_arrayDestroy();
    uint64_t v38 = v177;
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {

    swift_bridgeObjectRelease_n();
    uint64_t v38 = a1;
  }
  uint64_t v39 = a2;
  uint64_t v40 = v174;
  uint64_t v157 = *(void *)(v38 + 16);
  if (!v157)
  {
    uint64_t v50 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v18 + 56);
    swift_bridgeObjectRetain();
    unint64_t v150 = (v18 + 56) & 0xFFFFFFFFFFFFLL | 0xA0D1000000000000;
    goto LABEL_23;
  }
  uint64_t v43 = *(void (**)(char *, uint64_t, uint64_t))(v18 + 16);
  uint64_t v41 = v18 + 16;
  uint64_t v42 = v43;
  uint64_t v44 = v38 + ((*(unsigned __int8 *)(v41 + 64) + 32) & ~(unint64_t)*(unsigned __int8 *)(v41 + 64));
  uint64_t v45 = *(void *)(v41 + 56);
  long long v46 = (void (**)(char *, uint64_t, uint64_t, uint64_t))(v41 + 40);
  uint64_t v47 = (unsigned int (**)(char *, uint64_t, uint64_t))(v41 + 32);
  uint64_t v162 = (void (**)(char *, char *, uint64_t))(v41 + 16);
  uint64_t v160 = (void (**)(char *, uint64_t))(v41 - 8);
  swift_bridgeObjectRetain();
  uint64_t v48 = 0;
  unint64_t v150 = (v41 + 40) & 0xFFFFFFFFFFFFLL | 0xA0D1000000000000;
  uint64_t v149 = "";
  char v148 = "enableNotifyWhenFound";
  uint64_t v147 = "onnect";
  uint64_t v143 = v44;
  uint64_t v142 = v45;
  char v140 = (void (**)(char *, uint64_t, uint64_t, uint64_t))(v41 + 40);
  char v141 = (unsigned int (**)(char *, uint64_t, uint64_t))(v41 + 32);
  uint64_t v161 = v41;
LABEL_8:
  uint64_t v49 = v48;
  v42(v40, v44 + v45 * v48, v17);
  uint64_t v50 = *v46;
  (*v46)(v40, 0, 1, v17);
  if ((*v47)(v40, 1, v17) == 1) {
    goto LABEL_24;
  }
  uint64_t v51 = (uint64_t)v176;
  (*v162)(v176, v40, v17);
  sub_100ACCD98(v51, (uint64_t)&aBlock);
  if (!v181)
  {
    swift_bridgeObjectRelease();
    sub_10001DAB4((uint64_t)&aBlock, (uint64_t *)&unk_10163BBE0);
    uint64_t v121 = v139;
    v42(v139, (uint64_t)v176, v17);
    uint64_t v122 = Logger.logObject.getter();
    os_log_type_t v123 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v122, v123))
    {
      uint64_t v124 = (uint8_t *)swift_slowAlloc();
      *(void *)&long long aBlock = swift_slowAlloc();
      *(_DWORD *)uint64_t v124 = 136315138;
      sub_100A24444((unint64_t *)&qword_101638B10, (void (*)(uint64_t))&type metadata accessor for UUID);
      uint64_t v125 = dispatch thunk of CustomStringConvertible.description.getter();
      uint64_t v184 = (void *)sub_1008FA0F0(v125, v126, (uint64_t *)&aBlock);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      uint64_t v69 = *v160;
      (*v160)(v121, v17);
      _os_log_impl((void *)&_mh_execute_header, v122, v123, "Failed to enable separation monitoring for unknown beacon: %s", v124, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      uint64_t v69 = *v160;
      (*v160)(v121, v17);
    }

    uint64_t v127 = v166;
    uint64_t v128 = v165;
    uint64_t v129 = v164;
    uint64_t v130 = v163;
    sub_10001D4B0(0, (unint64_t *)&qword_1016376E0);
    uint64_t v131 = v168;
    uint64_t v132 = v167;
    (*(void (**)(char *, void, uint64_t))(v168 + 104))(v167, enum case for DispatchQoS.QoSClass.default(_:), v130);
    uint64_t v133 = (void *)static OS_dispatch_queue.global(qos:)();
    (*(void (**)(char *, uint64_t))(v131 + 8))(v132, v130);
    uint64_t v134 = swift_allocObject();
    uint64_t v135 = v169;
    *(void *)(v134 + 16) = v129;
    *(void *)(v134 + 24) = v135;
    uint64_t v182 = sub_100A328FC;
    uint64_t v183 = v134;
    *(void *)&long long aBlock = _NSConcreteStackBlock;
    *((void *)&aBlock + 1) = 1107296256;
    uint64_t v180 = sub_1004B5480;
    uint64_t v181 = &unk_1015E3908;
    uint64_t v136 = _Block_copy(&aBlock);
    swift_retain();
    static DispatchQoS.unspecified.getter();
    uint64_t v184 = _swiftEmptyArrayStorage;
    sub_100A24444((unint64_t *)&qword_10163B7E0, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
    sub_10000588C((uint64_t *)&unk_10163F350);
    sub_100062734((unint64_t *)&qword_10163B7F0, (uint64_t *)&unk_10163F350);
    uint64_t v137 = v170;
    uint64_t v138 = v172;
    dispatch thunk of SetAlgebra.init<A>(_:)();
    OS_dispatch_queue.async(group:qos:flags:execute:)();
    _Block_release(v136);

    (*(void (**)(char *, uint64_t))(v171 + 8))(v137, v138);
    (*(void (**)(char *, uint64_t))(v173 + 8))(v128, v127);
    goto LABEL_29;
  }
  sub_10001CEB0(&aBlock, (uint64_t)&v184);
  uint64_t v53 = v185;
  uint64_t v52 = v186;
  uint64_t v54 = sub_10001CD44(&v184, v185);
  uint64_t v55 = sub_100A03E9C((uint64_t)v54, (char *)v39, v53, v52);
  if (!v55[2]
    || (Hasher.init(_seed:)(),
        String.hash(into:)(),
        Swift::Int v56 = Hasher._finalize()(),
        uint64_t v57 = -1 << *((unsigned char *)v55 + 32),
        unint64_t v58 = v56 & ~v57,
        ((*(void *)((char *)v55 + ((v58 >> 3) & 0xFFFFFFFFFFFFFF8) + 56) >> v58) & 1) == 0))
  {
LABEL_20:
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v62 = v158;
    uint64_t v63 = v175;
    v42(v158, (uint64_t)v176, v175);
    uint64_t v64 = Logger.logObject.getter();
    os_log_type_t v65 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v64, v65))
    {
      uint64_t v66 = (uint8_t *)swift_slowAlloc();
      *(void *)&long long aBlock = swift_slowAlloc();
      *(_DWORD *)uint64_t v66 = 136315138;
      sub_100A24444((unint64_t *)&qword_101638B10, (void (*)(uint64_t))&type metadata accessor for UUID);
      uint64_t v67 = dispatch thunk of CustomStringConvertible.description.getter();
      long long v178 = (void *)sub_1008FA0F0(v67, v68, (uint64_t *)&aBlock);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      uint64_t v69 = *v160;
      (*v160)(v62, v63);
      _os_log_impl((void *)&_mh_execute_header, v64, v65, "Failed to enable separation monitoring for unsupported beacon: %s", v66, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      uint64_t v69 = *v160;
      (*v160)(v62, v63);
    }

    uint64_t v89 = v166;
    uint64_t v90 = v165;
    uint64_t v91 = v164;
    uint64_t v92 = v163;
    sub_10001D4B0(0, (unint64_t *)&qword_1016376E0);
    uint64_t v93 = v168;
    uint64_t v94 = v167;
    (*(void (**)(char *, void, uint64_t))(v168 + 104))(v167, enum case for DispatchQoS.QoSClass.default(_:), v92);
    uint64_t v95 = (void *)static OS_dispatch_queue.global(qos:)();
    (*(void (**)(char *, uint64_t))(v93 + 8))(v94, v92);
    uint64_t v96 = swift_allocObject();
    uint64_t v97 = v169;
    *(void *)(v96 + 16) = v91;
    *(void *)(v96 + 24) = v97;
    uint64_t v182 = (uint64_t (*)())sub_100A2E87C;
    uint64_t v183 = v96;
    *(void *)&long long aBlock = _NSConcreteStackBlock;
    *((void *)&aBlock + 1) = 1107296256;
    uint64_t v180 = sub_1004B5480;
    uint64_t v181 = &unk_1015E3958;
    int v98 = _Block_copy(&aBlock);
    swift_retain();
    static DispatchQoS.unspecified.getter();
    long long v178 = _swiftEmptyArrayStorage;
    sub_100A24444((unint64_t *)&qword_10163B7E0, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
    sub_10000588C((uint64_t *)&unk_10163F350);
    sub_100062734((unint64_t *)&qword_10163B7F0, (uint64_t *)&unk_10163F350);
    uint64_t v99 = v170;
    uint64_t v100 = v172;
    dispatch thunk of SetAlgebra.init<A>(_:)();
    OS_dispatch_queue.async(group:qos:flags:execute:)();
    _Block_release(v98);

    (*(void (**)(char *, uint64_t))(v171 + 8))(v99, v100);
    (*(void (**)(char *, uint64_t))(v173 + 8))(v90, v89);
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)&v184);
LABEL_29:
    v69(v176, v175);
    return swift_release();
  }
  uint64_t v59 = v49 + 1;
  uint64_t v60 = ~v57;
  while (2)
  {
    switch(*(unsigned char *)(v55[6] + v58))
    {
      case 8:
        swift_bridgeObjectRelease();
        goto LABEL_18;
      default:
        char v61 = _stringCompareWithSmolCheck(_:_:expecting:)();
        swift_bridgeObjectRelease();
        if ((v61 & 1) == 0)
        {
          unint64_t v58 = (v58 + 1) & v60;
          if (((*(void *)((char *)v55 + ((v58 >> 3) & 0xFFFFFFFFFFFFFF8) + 56) >> v58) & 1) == 0) {
            goto LABEL_20;
          }
          continue;
        }
LABEL_18:
        long long v46 = v140;
        swift_bridgeObjectRelease();
        _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)&v184);
        uint64_t v17 = v175;
        (*v160)(v176, v175);
        uint64_t v48 = v59;
        uint64_t v40 = v174;
        uint64_t v44 = v143;
        uint64_t v45 = v142;
        uint64_t v47 = v141;
        if (v59 != v157) {
          goto LABEL_8;
        }
LABEL_23:
        v50(v40, 1, 1, v17);
LABEL_24:
        swift_bridgeObjectRelease();
        uint64_t v70 = *(void **)(v39 + 96);
        uint64_t v71 = v154;
        *uint64_t v154 = v70;
        uint64_t v72 = v155;
        uint64_t v73 = v156;
        (*(void (**)(void *, void, uint64_t))(v155 + 104))(v71, enum case for DispatchPredicate.notOnQueue(_:), v156);
        id v74 = v70;
        char v75 = _dispatchPreconditionTest(_:)();
        (*(void (**)(void *, uint64_t))(v72 + 8))(v71, v73);
        if ((v75 & 1) == 0)
        {
          __break(1u);
          JUMPOUT(0x100A13E9CLL);
        }
        uint64_t v76 = (uint64_t)v152;
        OS_dispatch_queue.sync<A>(execute:)();
        uint64_t v77 = type metadata accessor for LeashRecord();
        int v78 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v77 - 8) + 48))(v76, 1, v77);
        sub_10001DAB4(v76, &qword_10164B290);
        if (v78 == 1)
        {
          sub_10001D4B0(0, (unint64_t *)&qword_1016376E0);
          uint64_t v79 = v168;
          uint64_t v80 = v167;
          uint64_t v81 = v163;
          (*(void (**)(char *, void, uint64_t))(v168 + 104))(v167, enum case for DispatchQoS.QoSClass.default(_:), v163);
          uint64_t v82 = (void *)static OS_dispatch_queue.global(qos:)();
          (*(void (**)(char *, uint64_t))(v79 + 8))(v80, v81);
          uint64_t v83 = swift_allocObject();
          uint64_t v84 = v169;
          *(void *)(v83 + 16) = v164;
          *(void *)(v83 + 24) = v84;
          uint64_t v182 = (uint64_t (*)())sub_100A2E620;
          uint64_t v183 = v83;
          *(void *)&long long aBlock = _NSConcreteStackBlock;
          *((void *)&aBlock + 1) = 1107296256;
          uint64_t v180 = sub_1004B5480;
          uint64_t v181 = &unk_1015E3840;
          int64_t v85 = _Block_copy(&aBlock);
          swift_retain();
          uint64_t v86 = v165;
          static DispatchQoS.unspecified.getter();
          uint64_t v184 = _swiftEmptyArrayStorage;
          sub_100A24444((unint64_t *)&qword_10163B7E0, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
          sub_10000588C((uint64_t *)&unk_10163F350);
          sub_100062734((unint64_t *)&qword_10163B7F0, (uint64_t *)&unk_10163F350);
          uint64_t v87 = v170;
          uint64_t v88 = v172;
          dispatch thunk of SetAlgebra.init<A>(_:)();
          OS_dispatch_queue.async(group:qos:flags:execute:)();
          _Block_release(v85);

          (*(void (**)(char *, uint64_t))(v171 + 8))(v87, v88);
          (*(void (**)(char *, uint64_t))(v173 + 8))(v86, v166);
        }
        else
        {
          uint64_t v101 = swift_allocObject();
          uint64_t v102 = v177;
          *(void *)(v101 + 16) = v177;
          swift_bridgeObjectRetain();
          swift_retain();
          uint64_t v103 = v153;
          sub_100A14110((uint64_t)sub_100A2E3E0, v39, (uint64_t)sub_100A2E628, v101, (uint64_t *)&unk_1016554E0, (uint64_t)sub_100A2E440, v153);
          swift_release();
          swift_release();
          sub_10001D4B0(0, (unint64_t *)&qword_1016376E0);
          uint64_t v104 = v168;
          unint64_t v105 = v167;
          uint64_t v106 = v163;
          (*(void (**)(char *, void, uint64_t))(v168 + 104))(v167, enum case for DispatchQoS.QoSClass.default(_:), v163);
          uint64_t v107 = (void *)static OS_dispatch_queue.global(qos:)();
          (*(void (**)(char *, uint64_t))(v104 + 8))(v105, v106);
          uint64_t v108 = v103;
          uint64_t v109 = v146;
          sub_10001D074(v108, v146, (uint64_t *)&unk_1016554E0);
          unint64_t v110 = (*(unsigned __int8 *)(v144 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v144 + 80);
          unint64_t v111 = (v145 + v110 + 7) & 0xFFFFFFFFFFFFFFF8;
          unint64_t v112 = (v111 + 15) & 0xFFFFFFFFFFFFFFF8;
          uint64_t v113 = swift_allocObject();
          sub_10001D608(v109, v113 + v110, (uint64_t *)&unk_1016554E0);
          *(void *)(v113 + v111) = v102;
          uint64_t v114 = (void *)(v113 + v112);
          uint64_t v115 = v169;
          void *v114 = v164;
          v114[1] = v115;
          *(void *)(v113 + ((v112 + 23) & 0xFFFFFFFFFFFFFFF8)) = v39;
          uint64_t v182 = sub_100A2E7A4;
          uint64_t v183 = v113;
          *(void *)&long long aBlock = _NSConcreteStackBlock;
          *((void *)&aBlock + 1) = 1107296256;
          uint64_t v180 = sub_1004B5480;
          uint64_t v181 = &unk_1015E38B8;
          uint64_t v116 = _Block_copy(&aBlock);
          swift_bridgeObjectRetain();
          swift_retain();
          swift_retain();
          uint64_t v117 = v165;
          static DispatchQoS.unspecified.getter();
          uint64_t v184 = _swiftEmptyArrayStorage;
          sub_100A24444((unint64_t *)&qword_10163B7E0, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
          sub_10000588C((uint64_t *)&unk_10163F350);
          sub_100062734((unint64_t *)&qword_10163B7F0, (uint64_t *)&unk_10163F350);
          uint64_t v118 = v170;
          uint64_t v119 = v172;
          dispatch thunk of SetAlgebra.init<A>(_:)();
          OS_dispatch_queue.async(group:qos:flags:execute:)();
          _Block_release(v116);

          (*(void (**)(char *, uint64_t))(v171 + 8))(v118, v119);
          (*(void (**)(char *, uint64_t))(v173 + 8))(v117, v166);
          sub_10001DAB4(v153, (uint64_t *)&unk_1016554E0);
        }
        return swift_release();
    }
  }
}

void sub_100A13EF4(void (*a1)(void *, uint64_t))
{
  if (qword_101636EE0 != -1) {
    swift_once();
  }
  uint64_t v2 = type metadata accessor for Logger();
  sub_100010324(v2, (uint64_t)qword_10170E7C8);
  uint64_t v3 = Logger.logObject.getter();
  os_log_type_t v4 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v3, v4))
  {
    uint64_t v5 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v5 = 0;
    _os_log_impl((void *)&_mh_execute_header, v3, v4, "Failed to enable separation monitoring due to missing leash record.", v5, 2u);
    swift_slowDealloc();
  }

  type metadata accessor for SPSeparationMonitoringError(0);
  sub_1004A0BC8((uint64_t)_swiftEmptyArrayStorage);
  sub_100A24444(&qword_1016386A0, type metadata accessor for SPSeparationMonitoringError);
  _BridgedStoredNSError.init(_:userInfo:)();
  a1(v6, 1);
}

uint64_t sub_100A14070(uint64_t a1)
{
  uint64_t v2 = *(int *)(type metadata accessor for LeashRecord() + 24);
  uint64_t v7 = *(void *)(a1 + v2);
  swift_bridgeObjectRetain();
  uint64_t v3 = swift_bridgeObjectRetain();
  sub_100442D9C(v3);
  uint64_t v4 = sub_101158244(v7);
  swift_bridgeObjectRelease();
  uint64_t v5 = sub_1007100E0(v4);
  swift_bridgeObjectRelease();
  uint64_t result = swift_bridgeObjectRelease();
  *(void *)(a1 + v2) = v5;
  return result;
}

uint64_t sub_100A14110@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t *a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X8>)
{
  uint64_t v43 = a5;
  uint64_t v44 = a6;
  uint64_t v41 = a4;
  uint64_t v42 = a7;
  uint64_t v38 = a2;
  uint64_t v39 = a3;
  uint64_t v37 = a1;
  uint64_t v8 = type metadata accessor for UUID();
  uint64_t v9 = *(void *)(v8 - 8);
  uint64_t v10 = __chkstk_darwin(v8);
  uint64_t v12 = (char *)&v34 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v10);
  uint64_t v14 = (char *)&v34 - v13;
  uint64_t v15 = type metadata accessor for DispatchPredicate();
  uint64_t v16 = *(void *)(v15 - 8);
  __chkstk_darwin(v15);
  uint64_t v18 = (uint64_t *)((char *)&v34 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v40 = v7;
  uint64_t v19 = *(void **)(v7 + 96);
  *uint64_t v18 = v19;
  (*(void (**)(void *, void, uint64_t))(v16 + 104))(v18, enum case for DispatchPredicate.notOnQueue(_:), v15);
  id v20 = v19;
  char v21 = _dispatchPreconditionTest(_:)();
  (*(void (**)(void *, uint64_t))(v16 + 8))(v18, v15);
  if (v21)
  {
    id v36 = v20;
    UUID.init()();
    if (qword_101636EE0 == -1) {
      goto LABEL_3;
    }
  }
  else
  {
    __break(1u);
  }
  swift_once();
LABEL_3:
  uint64_t v22 = type metadata accessor for Logger();
  sub_100010324(v22, (uint64_t)qword_10170E7C8);
  (*(void (**)(char *, char *, uint64_t))(v9 + 16))(v12, v14, v8);
  uint64_t v23 = Logger.logObject.getter();
  os_log_type_t v24 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v23, v24))
  {
    uint64_t v25 = (uint8_t *)swift_slowAlloc();
    uint64_t v35 = swift_slowAlloc();
    uint64_t v46 = v35;
    *(_DWORD *)uint64_t v25 = 136315138;
    sub_100A24444((unint64_t *)&qword_101638B10, (void (*)(uint64_t))&type metadata accessor for UUID);
    uint64_t v26 = dispatch thunk of CustomStringConvertible.description.getter();
    uint64_t v45 = sub_1008FA0F0(v26, v27, &v46);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    uint64_t v28 = *(void (**)(char *, uint64_t))(v9 + 8);
    v28(v12, v8);
    _os_log_impl((void *)&_mh_execute_header, v23, v24, "Queueing synced modify operation with identifier: %s", v25, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    uint64_t v28 = *(void (**)(char *, uint64_t))(v9 + 8);
    v28(v12, v8);
  }

  __chkstk_darwin(v29);
  uint64_t v30 = v37;
  *(&v34 - 6) = (uint64_t)v14;
  *(&v34 - 5) = v30;
  uint64_t v31 = v40;
  *(&v34 - 4) = v38;
  *(&v34 - 3) = v31;
  uint64_t v32 = v41;
  *(&v34 - 2) = v39;
  *(&v34 - 1) = v32;
  sub_10000588C(v43);
  OS_dispatch_queue.sync<A>(execute:)();
  return ((uint64_t (*)(char *, uint64_t))v28)(v14, v8);
}

uint64_t sub_100A14540(uint64_t a1, uint64_t a2, void (*a3)(void *, uint64_t))
{
  os_log_type_t v24 = a3;
  uint64_t v4 = sub_10000588C((uint64_t *)&unk_1016554E0);
  __chkstk_darwin(v4);
  uint64_t v6 = (char *)&v22 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10001D074(a1, (uint64_t)v6, (uint64_t *)&unk_1016554E0);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    if (qword_101636EE0 != -1) {
      swift_once();
    }
    uint64_t v7 = type metadata accessor for Logger();
    sub_100010324(v7, (uint64_t)qword_10170E7C8);
    swift_errorRetain();
    swift_errorRetain();
    uint64_t v8 = Logger.logObject.getter();
    os_log_type_t v9 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v8, v9))
    {
      uint64_t v10 = (uint8_t *)swift_slowAlloc();
      uint64_t v26 = (void *)swift_slowAlloc();
      *(_DWORD *)uint64_t v10 = 136315138;
      swift_getErrorValue();
      uint64_t v11 = Error.localizedDescription.getter();
      uint64_t v25 = sub_1008FA0F0(v11, v12, (uint64_t *)&v26);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      swift_errorRelease();
      swift_errorRelease();
      _os_log_impl((void *)&_mh_execute_header, v8, v9, "Failed to modify leash record due to: %s", v10, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      swift_errorRelease();
      swift_errorRelease();
    }

    type metadata accessor for SPSeparationMonitoringError(0);
    uint64_t v25 = 14;
    sub_1004A0BC8((uint64_t)_swiftEmptyArrayStorage);
    sub_100A24444(&qword_1016386A0, type metadata accessor for SPSeparationMonitoringError);
    _BridgedStoredNSError.init(_:userInfo:)();
    id v20 = v26;
    v24(v26, 1);
    swift_errorRelease();
  }
  else
  {
    if (qword_101636EE0 != -1) {
      swift_once();
    }
    uint64_t v13 = type metadata accessor for Logger();
    sub_100010324(v13, (uint64_t)qword_10170E7C8);
    swift_bridgeObjectRetain_n();
    uint64_t v14 = Logger.logObject.getter();
    os_log_type_t v15 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v14, v15))
    {
      uint64_t v16 = (uint8_t *)swift_slowAlloc();
      uint64_t v23 = swift_slowAlloc();
      uint64_t v26 = (void *)v23;
      *(_DWORD *)uint64_t v16 = 136315138;
      uint64_t v22 = v16 + 4;
      type metadata accessor for UUID();
      swift_bridgeObjectRetain();
      uint64_t v17 = Array.description.getter();
      unint64_t v19 = v18;
      swift_bridgeObjectRelease();
      uint64_t v25 = sub_1008FA0F0(v17, v19, (uint64_t *)&v26);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v14, v15, "Completed enabling separation monitoring for beacons: %s", v16, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {

      swift_bridgeObjectRelease_n();
    }
    v24(0, 0);
    sub_10001DAB4((uint64_t)v6, (uint64_t *)&unk_1016554E0);
  }
  dispatch thunk of DarwinNotificationHelper.post(bypassRateLimit:)();
  type metadata accessor for Transaction();
  static Transaction.asyncTask(name:block:)();
  return sub_100A9E7EC(16);
}

uint64_t sub_100A14A6C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v189 = a4;
  uint64_t v188 = a3;
  uint64_t v185 = type metadata accessor for SystemInfo.DeviceLockState();
  uint64_t v204 = *(char **)(v185 - 8);
  uint64_t v6 = __chkstk_darwin(v185);
  uint64_t v184 = (char *)&v168 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  uint64_t v183 = (char *)&v168 - v8;
  uint64_t v9 = type metadata accessor for UUID();
  uint64_t v10 = *(void *)(v9 - 8);
  uint64_t v11 = __chkstk_darwin(v9);
  uint64_t v176 = (char *)&v168 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = __chkstk_darwin(v11);
  uint64_t v180 = (char *)&v168 - v14;
  uint64_t v15 = __chkstk_darwin(v13);
  int64_t v209 = (char *)&v168 - v16;
  uint64_t v17 = __chkstk_darwin(v15);
  uint64_t v210 = (char *)&v168 - v18;
  __chkstk_darwin(v17);
  id v20 = (char *)&v168 - v19;
  uint64_t v196 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v195 = *(void *)(v196 - 8);
  __chkstk_darwin(v196);
  uint64_t v193 = (char *)&v168 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v22 = type metadata accessor for DispatchQoS();
  uint64_t v197 = *(void *)(v22 - 8);
  __chkstk_darwin(v22);
  char v194 = (char *)&v168 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v192 = type metadata accessor for DispatchQoS.QoSClass();
  uint64_t v191 = *(void *)(v192 - 8);
  __chkstk_darwin(v192);
  uint64_t v190 = (char *)&v168 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v25 = sub_10000588C((uint64_t *)&unk_1016554E0);
  uint64_t v177 = *(void *)(v25 - 8);
  uint64_t v26 = __chkstk_darwin(v25 - 8);
  uint64_t v179 = (uint64_t)&v168 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v178 = v27;
  __chkstk_darwin(v26);
  uint64_t v182 = (uint64_t)&v168 - v28;
  uint64_t v29 = sub_10000588C(&qword_101638CF0);
  uint64_t v30 = __chkstk_darwin(v29 - 8);
  uint64_t v32 = (char *)&v168 - ((v31 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v30);
  uint64_t v187 = (char *)&v168 - v33;
  uint64_t v34 = sub_10000588C(&qword_10164B290);
  __chkstk_darwin(v34 - 8);
  uint64_t v211 = (unint64_t *)((char *)&v168 - ((v35 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v200 = type metadata accessor for LeashRecord();
  uint64_t v208 = *(void *)(v200 - 8);
  __chkstk_darwin(v200);
  uint64_t v199 = (uint64_t)&v168 - ((v36 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_101636EE0 != -1) {
    swift_once();
  }
  uint64_t v37 = type metadata accessor for Logger();
  uint64_t v38 = sub_100010324(v37, (uint64_t)qword_10170E7C8);
  swift_bridgeObjectRetain_n();
  uint64_t v39 = Logger.logObject.getter();
  os_log_type_t v40 = static os_log_type_t.default.getter();
  BOOL v41 = os_log_type_enabled(v39, v40);
  uint64_t v202 = v22;
  uint64_t v213 = v20;
  uint64_t v201 = a1;
  uint64_t v198 = a2;
  if (v41)
  {
    uint64_t v42 = (uint8_t *)swift_slowAlloc();
    uint64_t v43 = swift_slowAlloc();
    uint64_t v212 = v10;
    *(void *)&long long aBlock = v43;
    *(_DWORD *)uint64_t v42 = 136315138;
    uint64_t v207 = (char **)(v42 + 4);
    swift_bridgeObjectRetain();
    uint64_t v44 = Array.description.getter();
    uint64_t v186 = v38;
    unint64_t v46 = v45;
    swift_bridgeObjectRelease();
    *(void *)&long long v214 = sub_1008FA0F0(v44, v46, (uint64_t *)&aBlock);
    uint64_t v22 = v202;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    uint64_t v38 = v186;
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v39, v40, "Disabling separation monitoring for beacons: %s", v42, 0xCu);
    swift_arrayDestroy();
    uint64_t v10 = v212;
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {

    swift_bridgeObjectRelease_n();
  }
  uint64_t v47 = v22;
  uint64_t v48 = sub_100B6CAA8();
  if (v48[2])
  {
    uint64_t v49 = v208;
    uint64_t v50 = (void (*)(void, void, void))v211;
    sub_100A32584((uint64_t)v48 + ((*(unsigned __int8 *)(v208 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v208 + 80)), (uint64_t)v211, (uint64_t (*)(void))type metadata accessor for LeashRecord);
    uint64_t v51 = 0;
  }
  else
  {
    uint64_t v51 = 1;
    uint64_t v50 = (void (*)(void, void, void))v211;
    uint64_t v49 = v208;
  }
  uint64_t v52 = v200;
  (*(void (**)(void (*)(void, void, void), uint64_t, uint64_t, uint64_t))(v49 + 56))(v50, v51, 1, v200);
  swift_bridgeObjectRelease();
  if ((*(unsigned int (**)(void, uint64_t, uint64_t))(v49 + 48))(v50, 1, v52) != 1)
  {
    sub_100A2E4D4((uint64_t)v50, v199, (uint64_t (*)(void))type metadata accessor for LeashRecord);
    uint64_t v60 = *(void *)(v201 + 16);
    if (v60)
    {
      uint64_t v186 = v38;
      uint64_t v62 = *(unint64_t **)(v10 + 16);
      uint64_t v61 = v10 + 16;
      uint64_t v211 = v62;
      unint64_t v171 = (*(unsigned __int8 *)(v61 + 64) + 32) & ~(unint64_t)*(unsigned __int8 *)(v61 + 64);
      uint64_t v63 = v201 + v171;
      uint64_t v64 = *(void *)(v61 + 56);
      os_log_type_t v65 = (uint64_t *)(v61 + 40);
      uint64_t v66 = (unsigned int (**)(char *, uint64_t, uint64_t))(v61 + 32);
      uint64_t v207 = (char **)(v61 + 16);
      unsigned int v175 = enum case for SystemInfo.DeviceLockState.beforeFirstUnlock(_:);
      uint64_t v174 = (void (**)(char *, void, uint64_t))(v204 + 104);
      uint64_t v173 = (void (**)(char *, uint64_t))(v204 + 8);
      uint64_t v67 = v61 - 8;
      swift_bridgeObjectRetain();
      uint64_t v68 = 0;
      long long v172 = xmmword_101342130;
      uint64_t v212 = v61;
      uint64_t v170 = v60;
      uint64_t v205 = (uint64_t *)(v61 + 40);
      uint64_t v169 = v63;
      uint64_t v203 = v64;
      uint64_t v206 = (unsigned int (**)(char *, uint64_t, uint64_t))(v61 + 32);
      unint64_t v168 = (v61 + 40) & 0xFFFFFFFFFFFFLL | 0xA0D1000000000000;
LABEL_14:
      uint64_t v181 = v68;
      uint64_t v69 = v63 + v64 * v68;
      uint64_t v70 = v187;
      ((void (*)(char *, uint64_t, uint64_t))v211)(v187, v69, v9);
      uint64_t v208 = *v65;
      ((void (*)(char *, void, uint64_t, uint64_t))v208)(v70, 0, 1, v9);
      uint64_t v71 = *v66;
      if ((*v66)(v70, 1, v9) != 1)
      {
        uint64_t v204 = *v207;
        ((void (*)(char *, char *, uint64_t))v204)(v213, v70, v9);
        static os_log_type_t.info.getter();
        if (qword_101637260 != -1) {
          swift_once();
        }
        sub_10000588C((uint64_t *)&unk_10163AD00);
        uint64_t v72 = swift_allocObject();
        *(_OWORD *)(v72 + 16) = v172;
        uint64_t v73 = UUID.uuidString.getter();
        uint64_t v75 = v74;
        *(void *)(v72 + 56) = &type metadata for String;
        *(void *)(v72 + 64) = sub_10000B4CC();
        *(void *)(v72 + 32) = v73;
        *(void *)(v72 + 40) = v75;
        os_log(_:dso:log:_:_:)();
        swift_bridgeObjectRelease();
        uint64_t v76 = v183;
        static SystemInfo.lockState.getter();
        uint64_t v77 = v184;
        uint64_t v78 = v185;
        (*v174)(v184, v175, v185);
        sub_100A24444((unint64_t *)&qword_1016429C8, (void (*)(uint64_t))&type metadata accessor for SystemInfo.DeviceLockState);
        char v79 = dispatch thunk of static Equatable.== infix(_:_:)();
        uint64_t v80 = *v173;
        (*v173)(v77, v78);
        v80(v76, v78);
        uint64_t v81 = v202;
        if (v79)
        {
          static os_log_type_t.default.getter();
          os_log(_:dso:log:_:_:)();
          uint64_t v219 = 0;
          long long aBlock = 0u;
          long long v218 = 0u;
        }
        else
        {
          uint64_t v82 = sub_100AD2AD4();
          uint64_t v83 = *(void *)(v82 + 16);
          if (v83)
          {
            uint64_t v84 = v82 + 32;
            while (1)
            {
              sub_10001D010(v84, (uint64_t)&v214);
              uint64_t v85 = v215;
              uint64_t v86 = v216;
              sub_10001CD44(&v214, v215);
              uint64_t v87 = v210;
              (*(void (**)(uint64_t))(*(void *)(*(void *)(v86 + 8) + 8) + 32))(v85);
              LOBYTE(v85) = static UUID.== infix(_:_:)();
              (*(void (**)(char *, uint64_t))v67)(v87, v9);
              if (v85) {
                break;
              }
              _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)&v214);
              v84 += 40;
              if (!--v83) {
                goto LABEL_22;
              }
            }
            sub_10001CEB0(&v214, (uint64_t)&aBlock);
          }
          else
          {
LABEL_22:
            uint64_t v219 = 0;
            long long aBlock = 0u;
            long long v218 = 0u;
          }
          swift_bridgeObjectRelease();
          uint64_t v81 = v202;
          uint64_t v88 = (void (*)(char *, uint64_t, uint64_t, uint64_t))v208;
          if (*((void *)&v218 + 1))
          {
            sub_10001DAB4((uint64_t)&aBlock, (uint64_t *)&unk_10163BBE0);
            uint64_t v89 = *(void *)(v199 + *(int *)(v200 + 24));
            uint64_t v90 = *(void *)(v89 + 16);
            if (v90)
            {
              ++v181;
              uint64_t v91 = v89 + v171;
              swift_bridgeObjectRetain_n();
              while (1)
              {
                ((void (*)(char *, uint64_t, uint64_t))v211)(v32, v91, v9);
                v88(v32, 0, 1, v9);
                if (v71(v32, 1, v9) == 1) {
                  break;
                }
                uint64_t v92 = v209;
                ((void (*)(char *, char *, uint64_t))v204)(v209, v32, v9);
                sub_100A24444((unint64_t *)&qword_10163B8F0, (void (*)(uint64_t))&type metadata accessor for UUID);
                char v93 = dispatch thunk of static Equatable.== infix(_:_:)();
                uint64_t v94 = *(void (**)(char *, uint64_t))v67;
                (*(void (**)(char *, uint64_t))v67)(v92, v9);
                if (v93)
                {
                  swift_bridgeObjectRelease_n();
                  v94(v213, v9);
                  uint64_t v68 = v181;
                  os_log_type_t v65 = v205;
                  uint64_t v66 = v206;
                  uint64_t v63 = v169;
                  uint64_t v64 = v203;
                  uint64_t v95 = (void (*)(char *, uint64_t, uint64_t, uint64_t))v208;
                  if (v181 != v170) {
                    goto LABEL_14;
                  }
                  goto LABEL_36;
                }
                v91 += v203;
                --v90;
                uint64_t v88 = (void (*)(char *, uint64_t, uint64_t, uint64_t))v208;
                if (!v90) {
                  goto LABEL_44;
                }
              }
            }
            else
            {
              swift_bridgeObjectRetain_n();
LABEL_44:
              v88(v32, 1, 1, v9);
            }
            swift_bridgeObjectRelease_n();
            swift_bridgeObjectRelease();
            uint64_t v147 = v180;
            ((void (*)(char *, char *, uint64_t))v211)(v180, v213, v9);
            char v148 = Logger.logObject.getter();
            os_log_type_t v149 = static os_log_type_t.error.getter();
            if (os_log_type_enabled(v148, v149))
            {
              unint64_t v150 = (uint8_t *)swift_slowAlloc();
              *(void *)&long long aBlock = swift_slowAlloc();
              *(_DWORD *)unint64_t v150 = 136315138;
              sub_100A24444((unint64_t *)&qword_101638B10, (void (*)(uint64_t))&type metadata accessor for UUID);
              uint64_t v151 = dispatch thunk of CustomStringConvertible.description.getter();
              *(void *)&long long v214 = sub_1008FA0F0(v151, v152, (uint64_t *)&aBlock);
              UnsafeMutableRawBufferPointer.copyMemory(from:)();
              swift_bridgeObjectRelease();
              uint64_t v153 = v147;
              uint64_t v154 = *(void (**)(char *, uint64_t))v67;
              (*(void (**)(char *, uint64_t))v67)(v153, v9);
              _os_log_impl((void *)&_mh_execute_header, v148, v149, "Failed to disable separation monitoring for unleashed beacon: %s", v150, 0xCu);
              swift_arrayDestroy();
              swift_slowDealloc();
              swift_slowDealloc();
            }
            else
            {
              uint64_t v155 = v147;
              uint64_t v154 = *(void (**)(char *, uint64_t))v67;
              (*(void (**)(char *, uint64_t))v67)(v155, v9);
            }

            uint64_t v156 = v189;
            uint64_t v157 = v188;
            sub_10001D4B0(0, (unint64_t *)&qword_1016376E0);
            uint64_t v158 = v191;
            uint64_t v159 = v190;
            uint64_t v160 = v192;
            (*(void (**)(char *, void, uint64_t))(v191 + 104))(v190, enum case for DispatchQoS.QoSClass.default(_:), v192);
            uint64_t v161 = (void *)static OS_dispatch_queue.global(qos:)();
            (*(void (**)(char *, uint64_t))(v158 + 8))(v159, v160);
            uint64_t v162 = swift_allocObject();
            *(void *)(v162 + 16) = v157;
            *(void *)(v162 + 24) = v156;
            uint64_t v219 = (uint64_t (*)())sub_100A2E420;
            uint64_t v220 = v162;
            *(void *)&long long aBlock = _NSConcreteStackBlock;
            *((void *)&aBlock + 1) = 1107296256;
            *(void *)&long long v218 = sub_1004B5480;
            *((void *)&v218 + 1) = &unk_1015E3728;
            uint64_t v163 = _Block_copy(&aBlock);
            swift_retain();
            uint64_t v164 = v194;
            static DispatchQoS.unspecified.getter();
            *(void *)&long long v214 = _swiftEmptyArrayStorage;
            sub_100A24444((unint64_t *)&qword_10163B7E0, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
            sub_10000588C((uint64_t *)&unk_10163F350);
            sub_100062734((unint64_t *)&qword_10163B7F0, (uint64_t *)&unk_10163F350);
            BOOL v165 = v193;
            uint64_t v166 = v196;
            dispatch thunk of SetAlgebra.init<A>(_:)();
            OS_dispatch_queue.async(group:qos:flags:execute:)();
            _Block_release(v163);

            (*(void (**)(char *, uint64_t))(v195 + 8))(v165, v166);
            (*(void (**)(char *, uint64_t))(v197 + 8))(v164, v202);
            v154(v213, v9);
            goto LABEL_49;
          }
        }
        sub_10001DAB4((uint64_t)&aBlock, (uint64_t *)&unk_10163BBE0);
        swift_bridgeObjectRelease();
        uint64_t v125 = v176;
        ((void (*)(char *, char *, uint64_t))v211)(v176, v213, v9);
        unint64_t v126 = Logger.logObject.getter();
        os_log_type_t v127 = static os_log_type_t.error.getter();
        if (os_log_type_enabled(v126, v127))
        {
          uint64_t v128 = (uint8_t *)swift_slowAlloc();
          *(void *)&long long aBlock = swift_slowAlloc();
          *(_DWORD *)uint64_t v128 = 136315138;
          uint64_t v212 = (uint64_t)(v128 + 4);
          sub_100A24444((unint64_t *)&qword_101638B10, (void (*)(uint64_t))&type metadata accessor for UUID);
          uint64_t v129 = dispatch thunk of CustomStringConvertible.description.getter();
          *(void *)&long long v214 = sub_1008FA0F0(v129, v130, (uint64_t *)&aBlock);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease();
          uint64_t v131 = *(void (**)(char *, uint64_t))v67;
          uint64_t v212 = v67 & 0xFFFFFFFFFFFFLL | 0x4F8000000000000;
          uint64_t v132 = v125;
          uint64_t v133 = v131;
          v131(v132, v9);
          _os_log_impl((void *)&_mh_execute_header, v126, v127, "Failed to disable separation monitoring for unknown beacon: %s", v128, 0xCu);
          swift_arrayDestroy();
          swift_slowDealloc();
          swift_slowDealloc();
        }
        else
        {
          uint64_t v134 = *(void (**)(char *, uint64_t))v67;
          uint64_t v212 = v67 & 0xFFFFFFFFFFFFLL | 0x4F8000000000000;
          uint64_t v135 = v125;
          uint64_t v133 = v134;
          v134(v135, v9);
        }

        uint64_t v136 = v189;
        uint64_t v137 = v188;
        sub_10001D4B0(0, (unint64_t *)&qword_1016376E0);
        uint64_t v138 = v191;
        uint64_t v139 = v190;
        uint64_t v140 = v192;
        (*(void (**)(char *, void, uint64_t))(v191 + 104))(v190, enum case for DispatchQoS.QoSClass.default(_:), v192);
        char v141 = (void *)static OS_dispatch_queue.global(qos:)();
        (*(void (**)(char *, uint64_t))(v138 + 8))(v139, v140);
        uint64_t v142 = swift_allocObject();
        *(void *)(v142 + 16) = v137;
        *(void *)(v142 + 24) = v136;
        uint64_t v219 = sub_100A328FC;
        uint64_t v220 = v142;
        *(void *)&long long aBlock = _NSConcreteStackBlock;
        *((void *)&aBlock + 1) = 1107296256;
        *(void *)&long long v218 = sub_1004B5480;
        *((void *)&v218 + 1) = &unk_1015E36D8;
        uint64_t v143 = _Block_copy(&aBlock);
        swift_retain();
        uint64_t v144 = v194;
        static DispatchQoS.unspecified.getter();
        *(void *)&long long v214 = _swiftEmptyArrayStorage;
        sub_100A24444((unint64_t *)&qword_10163B7E0, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
        sub_10000588C((uint64_t *)&unk_10163F350);
        sub_100062734((unint64_t *)&qword_10163B7F0, (uint64_t *)&unk_10163F350);
        uint64_t v145 = v193;
        uint64_t v146 = v196;
        dispatch thunk of SetAlgebra.init<A>(_:)();
        OS_dispatch_queue.async(group:qos:flags:execute:)();
        _Block_release(v143);

        (*(void (**)(char *, uint64_t))(v195 + 8))(v145, v146);
        (*(void (**)(char *, uint64_t))(v197 + 8))(v144, v81);
        v133(v213, v9);
LABEL_49:
        sub_100A2E53C(v199, (uint64_t (*)(void))type metadata accessor for LeashRecord);
        return swift_release();
      }
    }
    else
    {
      uint64_t v95 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v10 + 56);
      swift_bridgeObjectRetain();
LABEL_36:
      v95(v187, 1, 1, v9);
    }
    uint64_t v106 = v201;
    swift_bridgeObjectRelease();
    uint64_t v107 = swift_allocObject();
    *(void *)(v107 + 16) = v106;
    swift_bridgeObjectRetain();
    uint64_t v108 = v198;
    swift_retain();
    uint64_t v109 = v182;
    sub_100A14110((uint64_t)sub_100A2E3E0, v108, (uint64_t)sub_100A2E3FC, v107, (uint64_t *)&unk_1016554E0, (uint64_t)sub_100A2E440, v182);
    swift_release();
    swift_release();
    sub_10001D4B0(0, (unint64_t *)&qword_1016376E0);
    uint64_t v110 = v191;
    unint64_t v111 = v190;
    uint64_t v112 = v192;
    (*(void (**)(char *, void, uint64_t))(v191 + 104))(v190, enum case for DispatchQoS.QoSClass.default(_:), v192);
    uint64_t v113 = (void *)static OS_dispatch_queue.global(qos:)();
    (*(void (**)(char *, uint64_t))(v110 + 8))(v111, v112);
    uint64_t v114 = v179;
    sub_10001D074(v109, v179, (uint64_t *)&unk_1016554E0);
    unint64_t v115 = (*(unsigned __int8 *)(v177 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v177 + 80);
    unint64_t v116 = (v178 + v115 + 7) & 0xFFFFFFFFFFFFFFF8;
    unint64_t v117 = (v116 + 15) & 0xFFFFFFFFFFFFFFF8;
    uint64_t v118 = swift_allocObject();
    sub_10001D608(v114, v118 + v115, (uint64_t *)&unk_1016554E0);
    *(void *)(v118 + v116) = v106;
    uint64_t v119 = (void *)(v118 + v117);
    uint64_t v120 = v189;
    *uint64_t v119 = v188;
    v119[1] = v120;
    *(void *)(v118 + ((v117 + 23) & 0xFFFFFFFFFFFFFFF8)) = v108;
    uint64_t v219 = sub_100A2E408;
    uint64_t v220 = v118;
    *(void *)&long long aBlock = _NSConcreteStackBlock;
    *((void *)&aBlock + 1) = 1107296256;
    *(void *)&long long v218 = sub_1004B5480;
    *((void *)&v218 + 1) = &unk_1015E3688;
    uint64_t v121 = _Block_copy(&aBlock);
    swift_bridgeObjectRetain();
    swift_retain();
    swift_retain();
    uint64_t v122 = v194;
    static DispatchQoS.unspecified.getter();
    *(void *)&long long v214 = _swiftEmptyArrayStorage;
    sub_100A24444((unint64_t *)&qword_10163B7E0, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
    sub_10000588C((uint64_t *)&unk_10163F350);
    sub_100062734((unint64_t *)&qword_10163B7F0, (uint64_t *)&unk_10163F350);
    os_log_type_t v123 = v193;
    uint64_t v124 = v196;
    dispatch thunk of SetAlgebra.init<A>(_:)();
    OS_dispatch_queue.async(group:qos:flags:execute:)();
    _Block_release(v121);

    (*(void (**)(char *, uint64_t))(v195 + 8))(v123, v124);
    (*(void (**)(char *, uint64_t))(v197 + 8))(v122, v202);
    sub_10001DAB4(v182, (uint64_t *)&unk_1016554E0);
    goto LABEL_49;
  }
  sub_10001DAB4((uint64_t)v50, &qword_10164B290);
  swift_bridgeObjectRetain_n();
  uint64_t v53 = Logger.logObject.getter();
  os_log_type_t v54 = static os_log_type_t.error.getter();
  uint64_t v55 = v47;
  if (os_log_type_enabled(v53, v54))
  {
    Swift::Int v56 = (uint8_t *)swift_slowAlloc();
    *(void *)&long long aBlock = swift_slowAlloc();
    *(_DWORD *)Swift::Int v56 = 136315138;
    swift_bridgeObjectRetain();
    uint64_t v57 = Array.description.getter();
    unint64_t v59 = v58;
    swift_bridgeObjectRelease();
    *(void *)&long long v214 = sub_1008FA0F0(v57, v59, (uint64_t *)&aBlock);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v53, v54, "Failed to disable separation monitoring for beacons: %s due to missing leash record", v56, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {

    swift_bridgeObjectRelease_n();
  }
  uint64_t v96 = v189;
  sub_10001D4B0(0, (unint64_t *)&qword_1016376E0);
  uint64_t v97 = v191;
  int v98 = v190;
  uint64_t v99 = v192;
  (*(void (**)(char *, void, uint64_t))(v191 + 104))(v190, enum case for DispatchQoS.QoSClass.default(_:), v192);
  uint64_t v100 = (void *)static OS_dispatch_queue.global(qos:)();
  (*(void (**)(char *, uint64_t))(v97 + 8))(v98, v99);
  uint64_t v101 = swift_allocObject();
  *(void *)(v101 + 16) = v188;
  *(void *)(v101 + 24) = v96;
  uint64_t v219 = (uint64_t (*)())sub_100A2E3C0;
  uint64_t v220 = v101;
  *(void *)&long long aBlock = _NSConcreteStackBlock;
  *((void *)&aBlock + 1) = 1107296256;
  *(void *)&long long v218 = sub_1004B5480;
  *((void *)&v218 + 1) = &unk_1015E3610;
  uint64_t v102 = _Block_copy(&aBlock);
  swift_retain();
  uint64_t v103 = v194;
  static DispatchQoS.unspecified.getter();
  *(void *)&long long v214 = _swiftEmptyArrayStorage;
  sub_100A24444((unint64_t *)&qword_10163B7E0, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
  sub_10000588C((uint64_t *)&unk_10163F350);
  sub_100062734((unint64_t *)&qword_10163B7F0, (uint64_t *)&unk_10163F350);
  uint64_t v104 = v193;
  uint64_t v105 = v196;
  dispatch thunk of SetAlgebra.init<A>(_:)();
  OS_dispatch_queue.async(group:qos:flags:execute:)();
  _Block_release(v102);

  (*(void (**)(char *, uint64_t))(v195 + 8))(v104, v105);
  (*(void (**)(char *, uint64_t))(v197 + 8))(v103, v55);
  return swift_release();
}

uint64_t sub_100A1684C@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = sub_100B6CAA8();
  uint64_t v3 = v2[2];
  uint64_t v4 = type metadata accessor for LeashRecord();
  uint64_t v5 = *(void *)(v4 - 8);
  if (v3)
  {
    sub_100A32584((uint64_t)v2+ ((*(unsigned __int8 *)(*(void *)(v4 - 8) + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(v4 - 8) + 80)), a1, (uint64_t (*)(void))type metadata accessor for LeashRecord);
    uint64_t v6 = 0;
  }
  else
  {
    uint64_t v6 = 1;
  }
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v5 + 56))(a1, v6, 1, v4);

  return swift_bridgeObjectRelease();
}

uint64_t sub_100A16930(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = (unint64_t *)(a1 + *(int *)(type metadata accessor for LeashRecord() + 24));
  swift_bridgeObjectRetain();
  uint64_t v4 = sub_100A2DA98(v3, a2);
  uint64_t result = swift_bridgeObjectRelease();
  int64_t v6 = *(void *)(*v3 + 16);
  if (v6 >= v4) {
    return sub_100A29BAC(v4, v6);
  }
  __break(1u);
  return result;
}

uint64_t sub_100A169B4(uint64_t a1, uint64_t a2, void (*a3)(void *, uint64_t))
{
  uint64_t v5 = sub_10000588C((uint64_t *)&unk_1016554E0);
  __chkstk_darwin(v5);
  uint64_t v7 = (char *)&v21 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10001D074(a1, (uint64_t)v7, (uint64_t *)&unk_1016554E0);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    swift_errorRelease();
    if (qword_101636EE0 != -1) {
      swift_once();
    }
    uint64_t v8 = type metadata accessor for Logger();
    sub_100010324(v8, (uint64_t)qword_10170E7C8);
    uint64_t v9 = Logger.logObject.getter();
    os_log_type_t v10 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v9, v10))
    {
      uint64_t v11 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v11 = 0;
      _os_log_impl((void *)&_mh_execute_header, v9, v10, "Failed to disable separation monitoring due to leash record update failure.", v11, 2u);
      swift_slowDealloc();
    }

    type metadata accessor for SPSeparationMonitoringError(0);
    uint64_t v24 = 14;
    sub_1004A0BC8((uint64_t)_swiftEmptyArrayStorage);
    sub_100A24444(&qword_1016386A0, type metadata accessor for SPSeparationMonitoringError);
    _BridgedStoredNSError.init(_:userInfo:)();
    uint64_t v12 = v25;
    a3(v25, 1);
  }
  else
  {
    if (qword_101636EE0 != -1) {
      swift_once();
    }
    uint64_t v13 = type metadata accessor for Logger();
    sub_100010324(v13, (uint64_t)qword_10170E7C8);
    swift_bridgeObjectRetain_n();
    uint64_t v14 = Logger.logObject.getter();
    os_log_type_t v15 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v14, v15))
    {
      uint64_t v16 = (uint8_t *)swift_slowAlloc();
      uint64_t v23 = swift_slowAlloc();
      uint64_t v25 = (void *)v23;
      *(_DWORD *)uint64_t v16 = 136315138;
      uint64_t v21 = v16 + 4;
      uint64_t v22 = v16;
      type metadata accessor for UUID();
      swift_bridgeObjectRetain();
      uint64_t v17 = Array.description.getter();
      unint64_t v19 = v18;
      swift_bridgeObjectRelease();
      uint64_t v24 = sub_1008FA0F0(v17, v19, (uint64_t *)&v25);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v14, v15, "Completed separation monitoring for beacons: %s", v22, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {

      swift_bridgeObjectRelease_n();
    }
    a3(0, 0);
    sub_10001DAB4((uint64_t)v7, (uint64_t *)&unk_1016554E0);
  }
  dispatch thunk of DarwinNotificationHelper.post(bypassRateLimit:)();
  type metadata accessor for Transaction();
  static Transaction.asyncTask(name:block:)();
  return sub_100A9E7EC(16);
}

void sub_100A16E08(uint64_t a1, int a2, void (*a3)(void, void), uint64_t a4)
{
  uint64_t v5 = v4;
  LODWORD(v194) = a2;
  uint64_t v171 = type metadata accessor for DispatchTime();
  uint64_t v170 = *(void *)(v171 - 8);
  uint64_t v9 = __chkstk_darwin(v171);
  unint64_t v168 = (char *)&v164 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9);
  uint64_t v169 = (char *)&v164 - v11;
  uint64_t v182 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v180 = *(void *)(v182 - 8);
  __chkstk_darwin(v182);
  uint64_t v178 = (char *)&v164 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v181 = type metadata accessor for DispatchQoS();
  uint64_t v179 = *(void *)(v181 - 8);
  __chkstk_darwin(v181);
  uint64_t v177 = (char *)&v164 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v175 = type metadata accessor for DispatchQoS.QoSClass();
  uint64_t v174 = *(void *)(v175 - 8);
  __chkstk_darwin(v175);
  uint64_t v173 = (char *)&v164 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = sub_10000588C(&qword_101653F20);
  __chkstk_darwin(v15 - 8);
  uint64_t v195 = (uint64_t)&v164 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v197 = type metadata accessor for Date();
  uint64_t v199 = *(NSObject **)(v197 - 8);
  __chkstk_darwin(v197);
  uint64_t v196 = (uint64_t (*)())((char *)&v164 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0));
  unint64_t v18 = (int *)type metadata accessor for SafeLocation();
  uint64_t v186 = *((void *)v18 - 1);
  uint64_t v19 = __chkstk_darwin(v18);
  uint64_t v21 = (char *)&v164 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v22 = __chkstk_darwin(v19);
  uint64_t v193 = (char *)&v164 - v23;
  uint64_t v24 = __chkstk_darwin(v22);
  uint64_t v184 = (uint64_t)&v164 - v25;
  uint64_t v172 = v26;
  __chkstk_darwin(v24);
  uint64_t v28 = (char *)&v164 - v27;
  if (qword_101636EE0 != -1) {
    swift_once();
  }
  uint64_t v29 = type metadata accessor for Logger();
  uint64_t v30 = sub_100010324(v29, (uint64_t)qword_10170E7C8);
  uint64_t v198 = a1;
  sub_100A32584(a1, (uint64_t)v28, (uint64_t (*)(void))type metadata accessor for SafeLocation);
  uint64_t v183 = v30;
  uint64_t v31 = Logger.logObject.getter();
  os_log_type_t v32 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v31, v32))
  {
    uint64_t v176 = a3;
    uint64_t v33 = swift_slowAlloc();
    uint64_t v185 = a4;
    uint64_t v34 = (uint8_t *)v33;
    uint64_t v35 = swift_slowAlloc();
    uint64_t v167 = v5;
    long long aBlock = (void *)v35;
    *(_DWORD *)uint64_t v34 = 136315138;
    sub_100A32584((uint64_t)v28, v184, (uint64_t (*)(void))type metadata accessor for SafeLocation);
    uint64_t v36 = String.init<A>(describing:)();
    uint64_t v200 = sub_1008FA0F0(v36, v37, (uint64_t *)&aBlock);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    a3 = v176;
    swift_bridgeObjectRelease();
    sub_100A2E53C((uint64_t)v28, (uint64_t (*)(void))type metadata accessor for SafeLocation);
    _os_log_impl((void *)&_mh_execute_header, v31, v32, "Adding safe location: %s", v34, 0xCu);
    swift_arrayDestroy();
    uint64_t v5 = v167;
    swift_slowDealloc();
    a4 = v185;
    swift_slowDealloc();
  }
  else
  {
    sub_100A2E53C((uint64_t)v28, (uint64_t (*)(void))type metadata accessor for SafeLocation);
  }

  uint64_t v38 = v18[9];
  uint64_t v39 = v198;
  uint64_t v192 = v18[8];
  double v40 = *(double *)(v198 + v192);
  uint64_t v191 = v38;
  double v41 = *(double *)(v198 + v38);
  uint64_t v190 = v18[10];
  double v42 = *(double *)(v198 + v190);
  uint64_t v43 = v196;
  Date.init()();
  id v44 = objc_allocWithZone((Class)CLLocation);
  Class isa = Date._bridgeToObjectiveC()().super.isa;
  id v46 = [v44 initWithCoordinate:isa verticalAccuracy:v40 courseAccuracy:v41 horizontalAccuracy:0.0 verticalAccuracy:v42 course:v42 speedAccuracy:-1.0 speed:v42 timestamp:0xBFF0000000000000];

  uint64_t v47 = (void (*)(uint64_t (*)(), uint64_t))v199[1].isa;
  ++v199;
  uint64_t v189 = v47;
  v47(v43, v197);
  uint64_t v188 = v18[11];
  [v46 setReferenceFrame:*(unsigned __int8 *)(v39 + v188)];
  LOBYTE(isa) = sub_100FC022C();

  if (isa)
  {
    type metadata accessor for SPSeparationMonitoringError(0);
    uint64_t v200 = 21;
    sub_1004A0BC8((uint64_t)_swiftEmptyArrayStorage);
    sub_100A24444(&qword_1016386A0, type metadata accessor for SPSeparationMonitoringError);
    _BridgedStoredNSError.init(_:userInfo:)();
    uint64_t v48 = aBlock;
    a3(aBlock, 1);
  }
  else
  {
    uint64_t v49 = v195;
    uint64_t v187 = v39 + v18[5];
    sub_100B6BE80(v187, v195);
    int v50 = (*(uint64_t (**)(uint64_t, uint64_t, int *))(v186 + 48))(v49, 1, v18);
    sub_10001DAB4(v49, &qword_101653F20);
    if (v50 == 1)
    {
      uint64_t v185 = a4;
      uint64_t v176 = a3;
      if ((v194 & 1) == 0)
      {
        uint64_t v51 = sub_100B6C090();
        uint64_t v52 = v51[2];
        if (v52)
        {
          uint64_t v167 = v5;
          uint64_t v53 = *(unsigned __int8 *)(v186 + 80);
          uint64_t v164 = ~v53;
          uint64_t v165 = v53;
          uint64_t v166 = v51;
          os_log_type_t v54 = (uint64_t (*)())((char *)v51 + ((v53 + 32) & ~v53));
          uint64_t v183 = *(void *)(v186 + 72);
          uint64_t v55 = (uint64_t)v193;
          Swift::Int v56 = v196;
          uint64_t v57 = v197;
          unint64_t v58 = v189;
          do
          {
            char v194 = v54;
            uint64_t v195 = v52;
            sub_100A32584((uint64_t)v54, v55, (uint64_t (*)(void))type metadata accessor for SafeLocation);
            double v59 = *(double *)(v55 + v18[8]);
            double v60 = *(double *)(v55 + v18[9]);
            uint64_t v61 = v18[10];
            double v62 = *(double *)(v55 + v61);
            Date.init()();
            id v63 = objc_allocWithZone((Class)CLLocation);
            Class v64 = Date._bridgeToObjectiveC()().super.isa;
            id v65 = [v63 initWithCoordinate:v64 altitude:v59 horizontalAccuracy:v60 verticalAccuracy:0.0 course:v62 courseAccuracy:v62 speed:v62 speedAccuracy:-1.0 timestamp:0xBFF0000000000000];

            v58(v56, v57);
            [v65 setReferenceFrame:*(unsigned __int8 *)(v55 + v18[11])];
            [v65 coordinate];
            double v67 = v66;
            double v69 = v68;

            double v70 = *(double *)(v55 + v61);
            UUID.uuidString.getter();
            id v71 = objc_allocWithZone((Class)CLCircularRegion);
            NSString v72 = String._bridgeToObjectiveC()();
            swift_bridgeObjectRelease();
            id v73 = [v71 initWithCenter:v72 radius:v67 identifier:v69];

            uint64_t v74 = v198;
            double v75 = *(double *)(v198 + v192);
            double v76 = *(double *)(v198 + v191);
            uint64_t v77 = v18;
            uint64_t v78 = v190;
            double v79 = *(double *)(v198 + v190);
            Date.init()();
            id v80 = objc_allocWithZone((Class)CLLocation);
            Class v81 = Date._bridgeToObjectiveC()().super.isa;
            id v82 = [v80 initWithCoordinate:v81 altitude:v75 horizontalAccuracy:v76 verticalAccuracy:0.0 course:v79 courseAccuracy:v79 speed:v79 speedAccuracy:-1.0 timestamp:0xBFF0000000000000];

            v58(v56, v57);
            [v82 setReferenceFrame:*(unsigned __int8 *)(v74 + v188)];
            [v82 coordinate];
            double v84 = v83;
            double v86 = v85;

            double v87 = *(double *)(v74 + v78);
            unint64_t v18 = v77;
            UUID.uuidString.getter();
            id v88 = objc_allocWithZone((Class)CLCircularRegion);
            NSString v89 = String._bridgeToObjectiveC()();
            swift_bridgeObjectRelease();
            uint64_t v90 = v88;
            uint64_t v55 = (uint64_t)v193;
            id v91 = [v90 initWithCenter:v89 radius:v84 identifier:v86];

            sub_100F13EE0(v91);
            double v93 = v92;
            [v73 radius];
            double v95 = v94;
            [v73 radius];
            double v97 = v95 * v96 * 3.14159265;
            [v91 radius];
            double v99 = v98;
            [v91 radius];
            double v101 = v100;

            double v102 = v99 * v101 * 3.14159265;
            if (v102 >= v97) {
              double v102 = v97;
            }
            if (v102 > 0.0 && v93 / v102 > 0.5 && *(unsigned char *)(v55 + v77[12]) != 3)
            {
              swift_bridgeObjectRelease();
              sub_10001D4B0(0, (unint64_t *)&qword_1016376E0);
              uint64_t v103 = v174;
              uint64_t v104 = v173;
              uint64_t v105 = v175;
              (*(void (**)(char *, void, uint64_t))(v174 + 104))(v173, enum case for DispatchQoS.QoSClass.default(_:), v175);
              uint64_t v106 = (void *)static OS_dispatch_queue.global(qos:)();
              (*(void (**)(char *, uint64_t))(v103 + 8))(v104, v105);
              uint64_t v107 = v184;
              sub_100A32584(v55, v184, (uint64_t (*)(void))type metadata accessor for SafeLocation);
              uint64_t v108 = (v165 + 16) & v164;
              unint64_t v109 = (v172 + v108 + 7) & 0xFFFFFFFFFFFFFFF8;
              uint64_t v110 = swift_allocObject();
              sub_100A2E4D4(v107, v110 + v108, (uint64_t (*)(void))type metadata accessor for SafeLocation);
              unint64_t v111 = (void *)(v110 + v109);
              uint64_t v112 = v185;
              *unint64_t v111 = v176;
              v111[1] = v112;
              uint64_t v205 = sub_100A2F040;
              uint64_t v206 = v110;
              long long aBlock = _NSConcreteStackBlock;
              uint64_t v202 = 1107296256;
              uint64_t v203 = sub_1004B5480;
              uint64_t v204 = &unk_1015E3AE8;
              uint64_t v113 = _Block_copy(&aBlock);
              swift_retain();
              uint64_t v114 = v55;
              unint64_t v115 = v177;
              static DispatchQoS.unspecified.getter();
              uint64_t v200 = (uint64_t)_swiftEmptyArrayStorage;
              sub_100A24444((unint64_t *)&qword_10163B7E0, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
              sub_10000588C((uint64_t *)&unk_10163F350);
              sub_100062734((unint64_t *)&qword_10163B7F0, (uint64_t *)&unk_10163F350);
              unint64_t v116 = v178;
              uint64_t v117 = v182;
              dispatch thunk of SetAlgebra.init<A>(_:)();
              OS_dispatch_queue.async(group:qos:flags:execute:)();
              _Block_release(v113);

              (*(void (**)(char *, uint64_t))(v180 + 8))(v116, v117);
              (*(void (**)(char *, uint64_t))(v179 + 8))(v115, v181);
              sub_100A2E53C(v114, (uint64_t (*)(void))type metadata accessor for SafeLocation);
              goto LABEL_27;
            }
            sub_100A2E53C(v55, (uint64_t (*)(void))type metadata accessor for SafeLocation);
            os_log_type_t v54 = (uint64_t (*)())((char *)v194 + v183);
            uint64_t v52 = v195 - 1;
          }
          while (v195 != 1);
          swift_bridgeObjectRelease();
          uint64_t v5 = v167;
        }
        else
        {
          swift_bridgeObjectRelease();
        }
        uint64_t v39 = v198;
      }
      uint64_t v135 = dispatch_group_create();
      dispatch_group_enter(v135);
      sub_10000588C(&qword_1016554C8);
      uint64_t v136 = swift_allocBox();
      uint64_t v138 = v137;
      uint64_t v139 = sub_10000588C(&qword_1016554C0);
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v139 - 8) + 56))(v138, 1, 1, v139);
      uint64_t v196 = type metadata accessor for SafeLocation;
      uint64_t v140 = v184;
      sub_100A32584(v39, v184, (uint64_t (*)(void))type metadata accessor for SafeLocation);
      uint64_t v141 = *(unsigned __int8 *)(v186 + 80);
      uint64_t v142 = (v141 + 24) & ~v141;
      uint64_t v195 = v141 | 7;
      uint64_t v143 = v172 + 7;
      unint64_t v144 = (v172 + 7 + v142) & 0xFFFFFFFFFFFFFFF8;
      uint64_t v145 = swift_allocObject();
      *(void *)(v145 + 16) = v5;
      char v194 = type metadata accessor for SafeLocation;
      sub_100A2E4D4(v140, v145 + v142, (uint64_t (*)(void))type metadata accessor for SafeLocation);
      uint64_t v193 = (char *)v136;
      *(void *)(v145 + v144) = v136;
      *(void *)(v145 + ((v144 + 15) & 0xFFFFFFFFFFFFFFF8)) = v135;
      swift_retain();
      swift_retain();
      uint64_t v199 = v135;
      sub_100AE0180(sub_100A2ED8C, v145);
      swift_release();
      uint64_t v146 = v168;
      static DispatchTime.now()();
      uint64_t v147 = v169;
      + infix(_:_:)();
      char v148 = *(void (**)(char *, uint64_t))(v170 + 8);
      uint64_t v149 = v171;
      v148(v146, v171);
      LOBYTE(v144) = OS_dispatch_group.wait(timeout:)() & 1;
      v148(v147, v149);
      sub_10001D4B0(0, (unint64_t *)&qword_1016376E0);
      uint64_t v150 = v174;
      uint64_t v151 = v173;
      uint64_t v152 = v175;
      (*(void (**)(char *, void, uint64_t))(v174 + 104))(v173, enum case for DispatchQoS.QoSClass.default(_:), v175);
      uint64_t v197 = static OS_dispatch_queue.global(qos:)();
      (*(void (**)(char *, uint64_t))(v150 + 8))(v151, v152);
      sub_100A32584(v198, v140, (uint64_t (*)(void))v196);
      uint64_t v153 = (v141 + 17) & ~v141;
      unint64_t v154 = (v143 + v153) & 0xFFFFFFFFFFFFFFF8;
      unint64_t v155 = (v154 + 23) & 0xFFFFFFFFFFFFFFF8;
      uint64_t v156 = swift_allocObject();
      *(unsigned char *)(v156 + 16) = v144;
      sub_100A2E4D4(v140, v156 + v153, (uint64_t (*)(void))v194);
      uint64_t v157 = (void *)(v156 + v154);
      uint64_t v158 = v185;
      *uint64_t v157 = v176;
      v157[1] = v158;
      *(void *)(v156 + v155) = v193;
      *(void *)(v156 + ((v155 + 15) & 0xFFFFFFFFFFFFFFF8)) = v5;
      uint64_t v205 = sub_100A2EF90;
      uint64_t v206 = v156;
      long long aBlock = _NSConcreteStackBlock;
      uint64_t v202 = 1107296256;
      uint64_t v203 = sub_1004B5480;
      uint64_t v204 = &unk_1015E3A98;
      uint64_t v159 = _Block_copy(&aBlock);
      swift_retain();
      swift_retain();
      swift_retain();
      uint64_t v160 = v177;
      static DispatchQoS.unspecified.getter();
      uint64_t v200 = (uint64_t)_swiftEmptyArrayStorage;
      sub_100A24444((unint64_t *)&qword_10163B7E0, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
      sub_10000588C((uint64_t *)&unk_10163F350);
      sub_100062734((unint64_t *)&qword_10163B7F0, (uint64_t *)&unk_10163F350);
      uint64_t v161 = v178;
      uint64_t v162 = v182;
      dispatch thunk of SetAlgebra.init<A>(_:)();
      uint64_t v163 = (void *)v197;
      OS_dispatch_queue.async(group:qos:flags:execute:)();
      _Block_release(v159);

      (*(void (**)(char *, uint64_t))(v180 + 8))(v161, v162);
      (*(void (**)(char *, uint64_t))(v179 + 8))(v160, v181);
      swift_release();
    }
    else
    {
      uint64_t v118 = v39;
      uint64_t v119 = (uint64_t)v21;
      sub_100A32584(v118, (uint64_t)v21, (uint64_t (*)(void))type metadata accessor for SafeLocation);
      uint64_t v120 = Logger.logObject.getter();
      os_log_type_t v121 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v120, v121))
      {
        uint64_t v122 = swift_slowAlloc();
        uint64_t v185 = a4;
        os_log_type_t v123 = (uint8_t *)v122;
        long long aBlock = (void *)swift_slowAlloc();
        *(_DWORD *)os_log_type_t v123 = 136315138;
        type metadata accessor for UUID();
        sub_100A24444((unint64_t *)&qword_101638B10, (void (*)(uint64_t))&type metadata accessor for UUID);
        uint64_t v124 = dispatch thunk of CustomStringConvertible.description.getter();
        uint64_t v200 = sub_1008FA0F0(v124, v125, (uint64_t *)&aBlock);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        sub_100A2E53C(v119, (uint64_t (*)(void))type metadata accessor for SafeLocation);
        _os_log_impl((void *)&_mh_execute_header, v120, v121, "Safe location with identifier: %s already exists", v123, 0xCu);
        swift_arrayDestroy();
        swift_slowDealloc();
        a4 = v185;
        swift_slowDealloc();
      }
      else
      {
        sub_100A2E53C(v119, (uint64_t (*)(void))type metadata accessor for SafeLocation);
      }

      sub_10001D4B0(0, (unint64_t *)&qword_1016376E0);
      uint64_t v126 = v174;
      os_log_type_t v127 = v173;
      uint64_t v128 = v175;
      (*(void (**)(char *, void, uint64_t))(v174 + 104))(v173, enum case for DispatchQoS.QoSClass.default(_:), v175);
      uint64_t v129 = (void *)static OS_dispatch_queue.global(qos:)();
      (*(void (**)(char *, uint64_t))(v126 + 8))(v127, v128);
      uint64_t v130 = swift_allocObject();
      *(void *)(v130 + 16) = a3;
      *(void *)(v130 + 24) = a4;
      uint64_t v205 = sub_100A2F0D0;
      uint64_t v206 = v130;
      long long aBlock = _NSConcreteStackBlock;
      uint64_t v202 = 1107296256;
      uint64_t v203 = sub_1004B5480;
      uint64_t v204 = &unk_1015E3B38;
      uint64_t v131 = _Block_copy(&aBlock);
      swift_retain();
      uint64_t v132 = v177;
      static DispatchQoS.unspecified.getter();
      uint64_t v200 = (uint64_t)_swiftEmptyArrayStorage;
      sub_100A24444((unint64_t *)&qword_10163B7E0, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
      sub_10000588C((uint64_t *)&unk_10163F350);
      sub_100062734((unint64_t *)&qword_10163B7F0, (uint64_t *)&unk_10163F350);
      uint64_t v133 = v178;
      uint64_t v134 = v182;
      dispatch thunk of SetAlgebra.init<A>(_:)();
      OS_dispatch_queue.async(group:qos:flags:execute:)();
      _Block_release(v131);

      (*(void (**)(char *, uint64_t))(v180 + 8))(v133, v134);
      (*(void (**)(char *, uint64_t))(v179 + 8))(v132, v181);
    }
LABEL_27:
    swift_release();
  }
}

void sub_100A185DC(uint64_t a1, void (*a2)(void *, uint64_t))
{
  type metadata accessor for SPSeparationMonitoringError(0);
  sub_10000588C((uint64_t *)&unk_101637F00);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_101342130;
  *(void *)(inited + 32) = static String._unconditionallyBridgeFromObjectiveC(_:)();
  *(void *)(inited + 40) = v5;
  uint64_t v6 = a1 + *(int *)(type metadata accessor for SafeLocation() + 20);
  uint64_t v7 = type metadata accessor for UUID();
  *(void *)(inited + 72) = v7;
  uint64_t v8 = sub_10001D958((uint64_t *)(inited + 48));
  (*(void (**)(uint64_t *, uint64_t, uint64_t))(*(void *)(v7 - 8) + 16))(v8, v6, v7);
  sub_10092CEEC(inited);
  sub_100A24444(&qword_1016386A0, type metadata accessor for SPSeparationMonitoringError);
  _BridgedStoredNSError.init(_:userInfo:)();
  if (qword_101636EE0 != -1) {
    swift_once();
  }
  uint64_t v9 = type metadata accessor for Logger();
  sub_100010324(v9, (uint64_t)qword_10170E7C8);
  uint64_t v10 = Logger.logObject.getter();
  os_log_type_t v11 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v10, v11))
  {
    uint64_t v12 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v12 = 0;
    _os_log_impl((void *)&_mh_execute_header, v10, v11, "Overlapping Safe Location detected, failing.", v12, 2u);
    swift_slowDealloc();
  }

  id v13 = v14;
  a2(v14, 1);
}

void sub_100A18800(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5)
{
  swift_retain();
  id v9 = a5;
  sub_100B44320(a3, 0, a2, a4, v9);
  swift_release();
}

void sub_100A18880(uint64_t a1, uint64_t a2, NSObject *a3)
{
  uint64_t v5 = sub_10000588C(&qword_1016554C8);
  __chkstk_darwin(v5 - 8);
  uint64_t v7 = (char *)&v10 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = swift_projectBox();
  sub_10001D074(a1, (uint64_t)v7, &qword_1016554C0);
  uint64_t v9 = sub_10000588C(&qword_1016554C0);
  (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v9 - 8) + 56))(v7, 0, 1, v9);
  swift_beginAccess();
  sub_100062604((uint64_t)v7, v8, &qword_1016554C8);
  dispatch_group_leave(a3);
}

void sub_100A1899C(uint64_t a1, uint64_t a2, void (*a3)(void *, uint64_t), uint64_t a4, uint64_t a5, uint64_t a6)
{
  v57[1] = a6;
  uint64_t v61 = a4;
  double v62 = a3;
  uint64_t v60 = a2;
  uint64_t v59 = type metadata accessor for SafeLocation();
  uint64_t v6 = __chkstk_darwin(v59);
  uint64_t v8 = (char *)v57 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = __chkstk_darwin(v6);
  os_log_type_t v11 = (char *)v57 - v10;
  uint64_t v12 = __chkstk_darwin(v9);
  v57[0] = (uint64_t)v57 - v13;
  uint64_t v14 = __chkstk_darwin(v12);
  uint64_t v16 = (char *)v57 - v15;
  __chkstk_darwin(v14);
  unint64_t v18 = (char *)v57 - v17;
  uint64_t v19 = sub_10000588C(&qword_1016554C8);
  __chkstk_darwin(v19 - 8);
  uint64_t v21 = (char *)v57 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v22 = sub_10000588C(&qword_1016554C0);
  uint64_t v23 = *(void *)(v22 - 8);
  uint64_t v24 = __chkstk_darwin(v22);
  uint64_t v26 = (char *)v57 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v24);
  uint64_t v58 = (uint64_t)v57 - v27;
  uint64_t v28 = swift_projectBox();
  if (static DispatchTimeoutResult.== infix(_:_:)())
  {
    if (qword_101636EE0 != -1) {
      swift_once();
    }
    uint64_t v29 = type metadata accessor for Logger();
    sub_100010324(v29, (uint64_t)qword_10170E7C8);
    sub_100A32584(v60, (uint64_t)v8, (uint64_t (*)(void))type metadata accessor for SafeLocation);
    uint64_t v30 = Logger.logObject.getter();
    os_log_type_t v31 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v30, v31))
    {
      os_log_type_t v32 = (uint8_t *)swift_slowAlloc();
      id v65 = (void *)swift_slowAlloc();
      *(_DWORD *)os_log_type_t v32 = 136315138;
      type metadata accessor for UUID();
      sub_100A24444((unint64_t *)&qword_101638B10, (void (*)(uint64_t))&type metadata accessor for UUID);
      uint64_t v33 = dispatch thunk of CustomStringConvertible.description.getter();
      uint64_t v64 = sub_1008FA0F0(v33, v34, (uint64_t *)&v65);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      sub_100A2E53C((uint64_t)v8, (uint64_t (*)(void))type metadata accessor for SafeLocation);
      _os_log_impl((void *)&_mh_execute_header, v30, v31, "Adding safe location with identifier: %s failed due to timeout.", v32, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      sub_100A2E53C((uint64_t)v8, (uint64_t (*)(void))type metadata accessor for SafeLocation);
    }

    type metadata accessor for SPSeparationMonitoringError(0);
    uint64_t v64 = 19;
    sub_1004A0BC8((uint64_t)_swiftEmptyArrayStorage);
    sub_100A24444(&qword_1016386A0, type metadata accessor for SPSeparationMonitoringError);
    _BridgedStoredNSError.init(_:userInfo:)();
    double v41 = v65;
LABEL_20:
    v62(v41, 1);

    return;
  }
  swift_beginAccess();
  sub_10001D074(v28, (uint64_t)v21, &qword_1016554C8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v23 + 48))(v21, 1, v22) == 1)
  {
    sub_10001DAB4((uint64_t)v21, &qword_1016554C8);
    if (qword_101636EE0 != -1) {
      swift_once();
    }
    uint64_t v35 = type metadata accessor for Logger();
    sub_100010324(v35, (uint64_t)qword_10170E7C8);
    sub_100A32584(v60, (uint64_t)v18, (uint64_t (*)(void))type metadata accessor for SafeLocation);
    uint64_t v36 = Logger.logObject.getter();
    os_log_type_t v37 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v36, v37))
    {
      uint64_t v38 = (uint8_t *)swift_slowAlloc();
      uint64_t v64 = swift_slowAlloc();
      *(_DWORD *)uint64_t v38 = 136315138;
      type metadata accessor for UUID();
      sub_100A24444((unint64_t *)&qword_101638B10, (void (*)(uint64_t))&type metadata accessor for UUID);
      uint64_t v39 = dispatch thunk of CustomStringConvertible.description.getter();
      uint64_t v63 = sub_1008FA0F0(v39, v40, &v64);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      sub_100A2E53C((uint64_t)v18, (uint64_t (*)(void))type metadata accessor for SafeLocation);
      _os_log_impl((void *)&_mh_execute_header, v36, v37, "Adding safe location with identifier: %s failed due to unknown error.", v38, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      sub_100A2E53C((uint64_t)v18, (uint64_t (*)(void))type metadata accessor for SafeLocation);
    }

    type metadata accessor for SPSeparationMonitoringError(0);
    uint64_t v63 = 0;
    sub_1004A0BC8((uint64_t)_swiftEmptyArrayStorage);
    sub_100A24444(&qword_1016386A0, type metadata accessor for SPSeparationMonitoringError);
    _BridgedStoredNSError.init(_:userInfo:)();
    double v41 = (void *)v64;
    goto LABEL_20;
  }
  uint64_t v42 = (uint64_t)v21;
  uint64_t v43 = v58;
  sub_10001D608(v42, v58, &qword_1016554C0);
  sub_10001D074(v43, (uint64_t)v26, &qword_1016554C0);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    swift_errorRelease();
    if (qword_101636EE0 != -1) {
      swift_once();
    }
    uint64_t v44 = type metadata accessor for Logger();
    sub_100010324(v44, (uint64_t)qword_10170E7C8);
    sub_100A32584(v60, (uint64_t)v11, (uint64_t (*)(void))type metadata accessor for SafeLocation);
    unint64_t v45 = Logger.logObject.getter();
    os_log_type_t v46 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v45, v46))
    {
      uint64_t v47 = (uint8_t *)swift_slowAlloc();
      uint64_t v64 = swift_slowAlloc();
      *(_DWORD *)uint64_t v47 = 136315138;
      sub_100A32584((uint64_t)v11, v57[0], (uint64_t (*)(void))type metadata accessor for SafeLocation);
      uint64_t v48 = String.init<A>(describing:)();
      uint64_t v63 = sub_1008FA0F0(v48, v49, &v64);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      sub_100A2E53C((uint64_t)v11, (uint64_t (*)(void))type metadata accessor for SafeLocation);
      _os_log_impl((void *)&_mh_execute_header, v45, v46, "Failed to add safe location: %s", v47, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      sub_100A2E53C((uint64_t)v11, (uint64_t (*)(void))type metadata accessor for SafeLocation);
    }

    type metadata accessor for SPSeparationMonitoringError(0);
    uint64_t v63 = 15;
    sub_1004A0BC8((uint64_t)_swiftEmptyArrayStorage);
    sub_100A24444(&qword_1016386A0, type metadata accessor for SPSeparationMonitoringError);
    _BridgedStoredNSError.init(_:userInfo:)();
    Swift::Int v56 = (void *)v64;
    v62((void *)v64, 1);

    sub_10001DAB4(v58, &qword_1016554C0);
  }
  else
  {
    if (qword_101636EE0 != -1) {
      swift_once();
    }
    uint64_t v50 = type metadata accessor for Logger();
    sub_100010324(v50, (uint64_t)qword_10170E7C8);
    sub_100A32584(v60, (uint64_t)v16, (uint64_t (*)(void))type metadata accessor for SafeLocation);
    uint64_t v51 = Logger.logObject.getter();
    os_log_type_t v52 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v51, v52))
    {
      uint64_t v53 = (uint8_t *)swift_slowAlloc();
      uint64_t v64 = swift_slowAlloc();
      *(_DWORD *)uint64_t v53 = 136315138;
      sub_100A32584((uint64_t)v16, v57[0], (uint64_t (*)(void))type metadata accessor for SafeLocation);
      uint64_t v54 = String.init<A>(describing:)();
      uint64_t v63 = sub_1008FA0F0(v54, v55, &v64);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      sub_100A2E53C((uint64_t)v16, (uint64_t (*)(void))type metadata accessor for SafeLocation);
      _os_log_impl((void *)&_mh_execute_header, v51, v52, "Completed adding safe location: %s", v53, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      sub_100A2E53C((uint64_t)v16, (uint64_t (*)(void))type metadata accessor for SafeLocation);
    }

    v62(0, 0);
    sub_100A9EAD8();
    sub_10001DAB4(v58, &qword_1016554C0);
    sub_10001DAB4((uint64_t)v26, &qword_1016554C0);
  }
}

uint64_t sub_100A1959C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v113 = a3;
  uint64_t v114 = a4;
  uint64_t v6 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v119 = *(void *)(v6 - 8);
  uint64_t v120 = v6;
  __chkstk_darwin(v6);
  unint64_t v116 = (char *)&v93 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for DispatchQoS();
  uint64_t v117 = *(void *)(v8 - 8);
  uint64_t v118 = v8;
  __chkstk_darwin(v8);
  unint64_t v115 = (char *)&v93 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = type metadata accessor for DispatchQoS.QoSClass();
  uint64_t v111 = *(void *)(v10 - 8);
  uint64_t v112 = v10;
  __chkstk_darwin(v10);
  uint64_t v110 = (char *)&v93 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v101 = type metadata accessor for DispatchTime();
  uint64_t v100 = *(void *)(v101 - 8);
  uint64_t v12 = __chkstk_darwin(v101);
  double v97 = (char *)&v93 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v12);
  double v98 = (char *)&v93 - v14;
  uint64_t v15 = sub_10000588C(&qword_101653F20);
  __chkstk_darwin(v15 - 8);
  uint64_t v104 = ((char *)&v93 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v17 = type metadata accessor for SafeLocation();
  unint64_t v18 = *(uint8_t **)(v17 - 8);
  uint64_t v121 = v17;
  uint64_t v122 = v18;
  uint64_t v19 = __chkstk_darwin(v17);
  uint64_t v103 = (uint64_t)&v93 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v102 = v20;
  __chkstk_darwin(v19);
  uint64_t v22 = (char *)&v93 - v21;
  uint64_t v23 = type metadata accessor for UUID();
  uint64_t v24 = *(void *)(v23 - 8);
  uint64_t v25 = __chkstk_darwin(v23);
  double v99 = (char *)&v93 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v27 = __chkstk_darwin(v25);
  uint64_t v95 = (uint64_t)&v93 - v28;
  uint64_t v96 = v29;
  __chkstk_darwin(v27);
  os_log_type_t v31 = (char *)&v93 - v30;
  if (qword_101636EE0 != -1) {
    swift_once();
  }
  uint64_t v32 = type metadata accessor for Logger();
  uint64_t v33 = sub_100010324(v32, (uint64_t)qword_10170E7C8);
  unint64_t v34 = *(void (**)(uint64_t, uint64_t, uint64_t))(v24 + 16);
  uint64_t v106 = v24 + 16;
  uint64_t v105 = v34;
  v34((uint64_t)v31, a1, v23);
  uint64_t v94 = v33;
  uint64_t v35 = Logger.logObject.getter();
  os_log_type_t v36 = static os_log_type_t.default.getter();
  BOOL v37 = os_log_type_enabled(v35, v36);
  unint64_t v109 = v22;
  uint64_t v108 = a1;
  uint64_t v107 = v24;
  if (v37)
  {
    uint64_t v38 = (uint8_t *)swift_slowAlloc();
    uint64_t aBlock = swift_slowAlloc();
    *(_DWORD *)uint64_t v38 = 136315138;
    sub_100A24444((unint64_t *)&qword_101638B10, (void (*)(uint64_t))&type metadata accessor for UUID);
    uint64_t v39 = dispatch thunk of CustomStringConvertible.description.getter();
    os_log_type_t v123 = (void *)sub_1008FA0F0(v39, v40, &aBlock);
    uint64_t v41 = v107;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    uint64_t v42 = *(void (**)(char *, uint64_t))(v41 + 8);
    v42(v31, v23);
    _os_log_impl((void *)&_mh_execute_header, v35, v36, "Removing safe location with identifier: %s", v38, 0xCu);
    swift_arrayDestroy();
    a1 = v108;
    swift_slowDealloc();
    uint64_t v22 = v109;
    swift_slowDealloc();
  }
  else
  {
    uint64_t v42 = *(void (**)(char *, uint64_t))(v24 + 8);
    v42(v31, v23);
  }

  uint64_t v43 = v104;
  sub_100B6BE80(a1, (uint64_t)v104);
  if ((*((unsigned int (**)(NSObject *, uint64_t, uint64_t))v122 + 6))(v43, 1, v121) == 1)
  {
    sub_10001DAB4((uint64_t)v43, &qword_101653F20);
    uint64_t v44 = v95;
    v105(v95, a1, v23);
    unint64_t v45 = Logger.logObject.getter();
    os_log_type_t v46 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v45, v46))
    {
      uint64_t v47 = (uint8_t *)swift_slowAlloc();
      uint64_t aBlock = swift_slowAlloc();
      *(_DWORD *)uint64_t v47 = 136315138;
      uint64_t v122 = v47 + 4;
      sub_100A24444((unint64_t *)&qword_101638B10, (void (*)(uint64_t))&type metadata accessor for UUID);
      uint64_t v48 = dispatch thunk of CustomStringConvertible.description.getter();
      os_log_type_t v123 = (void *)sub_1008FA0F0(v48, v49, &aBlock);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      v42((char *)v44, v23);
      _os_log_impl((void *)&_mh_execute_header, v45, v46, "Safe location with identifier: %s not found", v47, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      v42((char *)v44, v23);
    }

    sub_10001D4B0(0, (unint64_t *)&qword_1016376E0);
    double v83 = v110;
    uint64_t v82 = v111;
    uint64_t v84 = v112;
    (*(void (**)(char *, void, uint64_t))(v111 + 104))(v110, enum case for DispatchQoS.QoSClass.default(_:), v112);
    double v85 = (void *)static OS_dispatch_queue.global(qos:)();
    (*(void (**)(char *, uint64_t))(v82 + 8))(v83, v84);
    uint64_t v86 = swift_allocObject();
    uint64_t v87 = v114;
    *(void *)(v86 + 16) = v113;
    *(void *)(v86 + 24) = v87;
    uint64_t v128 = (void (*)())sub_100A32900;
    uint64_t v129 = v86;
    uint64_t aBlock = (uint64_t)_NSConcreteStackBlock;
    uint64_t v125 = 1107296256;
    uint64_t v126 = sub_1004B5480;
    os_log_type_t v127 = &unk_1015E3C50;
    id v88 = _Block_copy(&aBlock);
    swift_retain();
    NSString v89 = v115;
    static DispatchQoS.unspecified.getter();
    os_log_type_t v123 = _swiftEmptyArrayStorage;
    sub_100A24444((unint64_t *)&qword_10163B7E0, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
    sub_10000588C((uint64_t *)&unk_10163F350);
    sub_100062734((unint64_t *)&qword_10163B7F0, (uint64_t *)&unk_10163F350);
    uint64_t v90 = v116;
    uint64_t v91 = v120;
    dispatch thunk of SetAlgebra.init<A>(_:)();
    OS_dispatch_queue.async(group:qos:flags:execute:)();
    _Block_release(v88);

    (*(void (**)(char *, uint64_t))(v119 + 8))(v90, v91);
    (*(void (**)(char *, uint64_t))(v117 + 8))(v89, v118);
  }
  else
  {
    uint64_t v93 = v23;
    uint64_t v95 = a2;
    sub_100A2E4D4((uint64_t)v43, (uint64_t)v22, (uint64_t (*)(void))type metadata accessor for SafeLocation);
    uint64_t v50 = dispatch_group_create();
    dispatch_group_enter(v50);
    uint64_t v51 = swift_allocObject();
    *(void *)(v51 + 16) = 0;
    *(unsigned char *)(v51 + 24) = -1;
    uint64_t v52 = swift_allocObject();
    *(void *)(v52 + 16) = v51;
    *(void *)(v52 + 24) = v50;
    uint64_t v94 = v51;
    swift_retain();
    uint64_t v104 = v50;
    static os_log_type_t.default.getter();
    if (qword_101637260 != -1) {
      swift_once();
    }
    sub_10000588C((uint64_t *)&unk_10163AD00);
    uint64_t v53 = swift_allocObject();
    *(_OWORD *)(v53 + 16) = xmmword_101342130;
    uint64_t v54 = v103;
    sub_100A32584((uint64_t)v22, v103, (uint64_t (*)(void))type metadata accessor for SafeLocation);
    uint64_t v55 = (uint64_t)v22;
    uint64_t v56 = String.init<A>(describing:)();
    uint64_t v58 = v57;
    *(void *)(v53 + 56) = &type metadata for String;
    *(void *)(v53 + 64) = sub_10000B4CC();
    *(void *)(v53 + 32) = v56;
    *(void *)(v53 + 40) = v58;
    os_log(_:dso:log:_:_:)();
    swift_bridgeObjectRelease();
    swift_retain();
    sub_100B44C54(v55, v95, (void (*)(void))sub_100A2F160, v52);
    swift_release_n();
    uint64_t v59 = v97;
    static DispatchTime.now()();
    uint64_t v60 = v98;
    + infix(_:_:)();
    uint64_t v61 = *(void (**)(char *, uint64_t))(v100 + 8);
    uint64_t v62 = v101;
    v61(v59, v101);
    LOBYTE(v100) = OS_dispatch_group.wait(timeout:)() & 1;
    LODWORD(v100) = v100;
    v61(v60, v62);
    sub_10001D4B0(0, (unint64_t *)&qword_1016376E0);
    uint64_t v64 = v110;
    uint64_t v63 = v111;
    uint64_t v65 = v112;
    (*(void (**)(char *, void, uint64_t))(v111 + 104))(v110, enum case for DispatchQoS.QoSClass.default(_:), v112);
    uint64_t v121 = static OS_dispatch_queue.global(qos:)();
    (*(void (**)(char *, uint64_t))(v63 + 8))(v64, v65);
    double v66 = v99;
    uint64_t v67 = v93;
    v105((uint64_t)v99, v108, v93);
    sub_100A32584(v55, v54, (uint64_t (*)(void))type metadata accessor for SafeLocation);
    uint64_t v68 = v107;
    unint64_t v69 = (*(unsigned __int8 *)(v107 + 80) + 17) & ~(unint64_t)*(unsigned __int8 *)(v107 + 80);
    unint64_t v70 = (v96 + v69 + 7) & 0xFFFFFFFFFFFFFFF8;
    unint64_t v71 = (v70 + 23) & 0xFFFFFFFFFFFFFFF8;
    unint64_t v72 = (v122[80] + v71 + 8) & ~(unint64_t)v122[80];
    unint64_t v73 = (v102 + v72 + 7) & 0xFFFFFFFFFFFFFFF8;
    uint64_t v74 = swift_allocObject();
    *(unsigned char *)(v74 + 16) = v100;
    (*(void (**)(unint64_t, char *, uint64_t))(v68 + 32))(v74 + v69, v66, v67);
    double v75 = (void *)(v74 + v70);
    uint64_t v76 = v114;
    *double v75 = v113;
    v75[1] = v76;
    *(void *)(v74 + v71) = v94;
    sub_100A2E4D4(v54, v74 + v72, (uint64_t (*)(void))type metadata accessor for SafeLocation);
    *(void *)(v74 + v73) = v95;
    uint64_t v128 = sub_100A2F324;
    uint64_t v129 = v74;
    uint64_t aBlock = (uint64_t)_NSConcreteStackBlock;
    uint64_t v125 = 1107296256;
    uint64_t v126 = sub_1004B5480;
    os_log_type_t v127 = &unk_1015E3CF0;
    uint64_t v77 = _Block_copy(&aBlock);
    swift_retain();
    swift_retain();
    swift_retain();
    uint64_t v78 = v115;
    static DispatchQoS.unspecified.getter();
    os_log_type_t v123 = _swiftEmptyArrayStorage;
    sub_100A24444((unint64_t *)&qword_10163B7E0, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
    sub_10000588C((uint64_t *)&unk_10163F350);
    sub_100062734((unint64_t *)&qword_10163B7F0, (uint64_t *)&unk_10163F350);
    double v79 = v116;
    uint64_t v80 = v120;
    dispatch thunk of SetAlgebra.init<A>(_:)();
    Class v81 = (void *)v121;
    OS_dispatch_queue.async(group:qos:flags:execute:)();
    _Block_release(v77);

    (*(void (**)(char *, uint64_t))(v119 + 8))(v79, v80);
    (*(void (**)(char *, uint64_t))(v117 + 8))(v78, v118);
    sub_100A2E53C((uint64_t)v109, (uint64_t (*)(void))type metadata accessor for SafeLocation);
    swift_release();
  }
  return swift_release();
}

void sub_100A1A584(char a1, uint64_t a2, NSObject *a3)
{
  if (a1)
  {
    uint64_t v5 = 0;
    char v6 = 0;
  }
  else
  {
    type metadata accessor for SPSeparationMonitoringError(0);
    sub_1004A0BC8((uint64_t)_swiftEmptyArrayStorage);
    sub_100A24444(&qword_1016386A0, type metadata accessor for SPSeparationMonitoringError);
    _BridgedStoredNSError.init(_:userInfo:)();
    uint64_t v5 = v9;
    char v6 = 1;
  }
  swift_beginAccess();
  uint64_t v7 = *(void **)(a2 + 16);
  *(void *)(a2 + 16) = v5;
  unsigned __int8 v8 = *(unsigned char *)(a2 + 24);
  *(unsigned char *)(a2 + 24) = v6;
  sub_100A2F458(v7, v8);
  dispatch_group_leave(a3);
}

void sub_100A1A670(uint64_t a1, uint64_t a2, void (*a3)(void, void), uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v53 = a7;
  uint64_t v51 = a6;
  uint64_t v11 = type metadata accessor for UUID();
  uint64_t v12 = *(void *)(v11 - 8);
  uint64_t v13 = __chkstk_darwin(v11);
  uint64_t v15 = &v46[-((v14 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v16 = __chkstk_darwin(v13);
  unint64_t v18 = &v46[-v17];
  __chkstk_darwin(v16);
  uint64_t v20 = &v46[-v19];
  if (static DispatchTimeoutResult.== infix(_:_:)())
  {
    uint64_t v53 = a4;
    if (qword_101636EE0 != -1) {
      swift_once();
    }
    uint64_t v21 = type metadata accessor for Logger();
    sub_100010324(v21, (uint64_t)qword_10170E7C8);
    (*(void (**)(unsigned char *, uint64_t, uint64_t))(v12 + 16))(v15, a2, v11);
    uint64_t v22 = Logger.logObject.getter();
    os_log_type_t v23 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v22, v23))
    {
      uint64_t v24 = (uint8_t *)swift_slowAlloc();
      uint64_t v57 = (void *)swift_slowAlloc();
      *(_DWORD *)uint64_t v24 = 136315138;
      uint64_t v52 = a3;
      sub_100A24444((unint64_t *)&qword_101638B10, (void (*)(uint64_t))&type metadata accessor for UUID);
      uint64_t v25 = dispatch thunk of CustomStringConvertible.description.getter();
      uint64_t v54 = sub_1008FA0F0(v25, v26, (uint64_t *)&v57);
      a3 = v52;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      (*(void (**)(unsigned char *, uint64_t))(v12 + 8))(v15, v11);
      _os_log_impl((void *)&_mh_execute_header, v22, v23, "Removing safe location with identifier: %s failed due to timeout.", v24, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      (*(void (**)(unsigned char *, uint64_t))(v12 + 8))(v15, v11);
    }

    type metadata accessor for SPSeparationMonitoringError(0);
    uint64_t v54 = 19;
    sub_1004A0BC8((uint64_t)_swiftEmptyArrayStorage);
    sub_100A24444(&qword_1016386A0, type metadata accessor for SPSeparationMonitoringError);
    _BridgedStoredNSError.init(_:userInfo:)();
    uint64_t v39 = v57;
LABEL_23:
    a3(v39, 1);

    return;
  }
  swift_beginAccess();
  int v27 = *(unsigned __int8 *)(a5 + 24);
  if (v27 == 255)
  {
    uint64_t v53 = a4;
    if (qword_101636EE0 != -1) {
      swift_once();
    }
    uint64_t v40 = type metadata accessor for Logger();
    sub_100010324(v40, (uint64_t)qword_10170E7C8);
    (*(void (**)(unsigned char *, uint64_t, uint64_t))(v12 + 16))(v20, a2, v11);
    uint64_t v41 = Logger.logObject.getter();
    os_log_type_t v42 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v41, v42))
    {
      uint64_t v43 = (uint8_t *)swift_slowAlloc();
      uint64_t v54 = swift_slowAlloc();
      *(_DWORD *)uint64_t v43 = 136315138;
      uint64_t v52 = a3;
      sub_100A24444((unint64_t *)&qword_101638B10, (void (*)(uint64_t))&type metadata accessor for UUID);
      uint64_t v44 = dispatch thunk of CustomStringConvertible.description.getter();
      uint64_t v56 = sub_1008FA0F0(v44, v45, &v54);
      a3 = v52;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      (*(void (**)(unsigned char *, uint64_t))(v12 + 8))(v20, v11);
      _os_log_impl((void *)&_mh_execute_header, v41, v42, "Removing safe location with identifier: %s failed due to unknown error.", v43, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      (*(void (**)(unsigned char *, uint64_t))(v12 + 8))(v20, v11);
    }

    type metadata accessor for SPSeparationMonitoringError(0);
    uint64_t v56 = 0;
    sub_1004A0BC8((uint64_t)_swiftEmptyArrayStorage);
    sub_100A24444(&qword_1016386A0, type metadata accessor for SPSeparationMonitoringError);
    _BridgedStoredNSError.init(_:userInfo:)();
    uint64_t v39 = (void *)v54;
    goto LABEL_23;
  }
  uint64_t v52 = a3;
  uint64_t v28 = *(void **)(a5 + 16);
  sub_1003B57DC(v28, v27 & 1);
  if (qword_101636EE0 != -1) {
    swift_once();
  }
  uint64_t v29 = type metadata accessor for Logger();
  sub_100010324(v29, (uint64_t)qword_10170E7C8);
  (*(void (**)(unsigned char *, uint64_t, uint64_t))(v12 + 16))(v18, a2, v11);
  sub_100A2F440(v28, v27);
  sub_1003B57DC(v28, v27 & 1);
  uint64_t v30 = Logger.logObject.getter();
  os_log_type_t v31 = static os_log_type_t.error.getter();
  int v32 = v31;
  if (os_log_type_enabled(v30, v31))
  {
    BOOL v47 = (v27 & 1) != 0;
    uint64_t v33 = swift_slowAlloc();
    int v49 = v32;
    uint64_t v34 = v33;
    uint64_t v50 = swift_slowAlloc();
    uint64_t v56 = v50;
    *(_DWORD *)uint64_t v34 = 136315394;
    sub_100A24444((unint64_t *)&qword_101638B10, (void (*)(uint64_t))&type metadata accessor for UUID);
    os_log_t v48 = v30;
    uint64_t v35 = dispatch thunk of CustomStringConvertible.description.getter();
    uint64_t v54 = sub_1008FA0F0(v35, v36, &v56);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    (*(void (**)(unsigned char *, uint64_t))(v12 + 8))(v18, v11);
    *(_WORD *)(v34 + 12) = 2080;
    uint64_t v54 = (uint64_t)v28;
    BOOL v55 = v47;
    sub_1003B57DC(v28, v27 & 1);
    sub_10000588C(&qword_101655558);
    uint64_t v37 = String.init<A>(describing:)();
    uint64_t v54 = sub_1008FA0F0(v37, v38, &v56);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    sub_100A2F458(v28, v27);
    sub_100A2F458(v28, v27);
    uint64_t v30 = v48;
    _os_log_impl((void *)&_mh_execute_header, v48, (os_log_type_t)v49, "Removing safe location with identifier: %s completed with result: %s", (uint8_t *)v34, 0x16u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    (*(void (**)(unsigned char *, uint64_t))(v12 + 8))(v18, v11);
    sub_100A2F458(v28, v27);
    sub_100A2F458(v28, v27);
  }

  v52(v28, v27 & 1);
  if (*(void *)(*(void *)(v51 + *(int *)(type metadata accessor for SafeLocation() + 52)) + 16))
  {
    dispatch thunk of DarwinNotificationHelper.post(bypassRateLimit:)();
    type metadata accessor for Transaction();
    static Transaction.asyncTask(name:block:)();
    sub_100A9E7EC(16);
  }
  sub_100A9EAD8();
  sub_100A2F458(v28, v27);
}

void sub_100A1AFD8(uint64_t a1, void (*a2)(void, void), uint64_t a3, uint64_t a4)
{
  uint64_t v93 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v101 = *(void *)(v93 - 8);
  __chkstk_darwin(v93);
  double v99 = (char *)v84 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v102 = type metadata accessor for DispatchQoS();
  uint64_t v100 = *(void *)(v102 - 8);
  __chkstk_darwin(v102);
  double v98 = (char *)v84 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v95 = type metadata accessor for DispatchQoS.QoSClass();
  uint64_t v94 = *(void *)(v95 - 8);
  __chkstk_darwin(v95);
  double v92 = (char *)v84 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v88 = sub_10000588C(&qword_1016554C0);
  uint64_t v11 = __chkstk_darwin(v88);
  uint64_t v87 = (uint64_t)v84 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v11);
  uint64_t v14 = (char *)v84 - v13;
  uint64_t v15 = sub_10000588C(&qword_101653F20);
  __chkstk_darwin(v15 - 8);
  uint64_t v89 = (uint64_t)v84 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v17 = type metadata accessor for Date();
  uint64_t v104 = *(void *)(v17 - 8);
  uint64_t v105 = v17;
  __chkstk_darwin(v17);
  uint64_t v103 = (char *)v84 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v19 = (int *)type metadata accessor for SafeLocation();
  uint64_t v90 = *((void *)v19 - 1);
  uint64_t v20 = __chkstk_darwin(v19);
  uint64_t v22 = (char *)v84 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v91 = v21;
  __chkstk_darwin(v20);
  uint64_t v24 = (char *)v84 - v23;
  if (qword_101636EE0 != -1) {
    swift_once();
  }
  uint64_t v25 = type metadata accessor for Logger();
  sub_100010324(v25, (uint64_t)qword_10170E7C8);
  uint64_t v106 = a1;
  sub_100A32584(a1, (uint64_t)v24, (uint64_t (*)(void))type metadata accessor for SafeLocation);
  unint64_t v26 = Logger.logObject.getter();
  os_log_type_t v27 = static os_log_type_t.default.getter();
  BOOL v28 = os_log_type_enabled(v26, v27);
  double v97 = v14;
  if (v28)
  {
    uint64_t v29 = swift_slowAlloc();
    uint64_t v86 = a4;
    uint64_t v30 = (uint8_t *)v29;
    double v85 = (void **)swift_slowAlloc();
    uint64_t aBlock = v85;
    uint64_t v96 = a2;
    *(_DWORD *)uint64_t v30 = 136315138;
    v84[1] = v30 + 4;
    type metadata accessor for UUID();
    sub_100A24444((unint64_t *)&qword_101638B10, (void (*)(uint64_t))&type metadata accessor for UUID);
    uint64_t v31 = dispatch thunk of CustomStringConvertible.description.getter();
    uint64_t v107 = sub_1008FA0F0(v31, v32, (uint64_t *)&aBlock);
    a2 = v96;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    sub_100A2E53C((uint64_t)v24, (uint64_t (*)(void))type metadata accessor for SafeLocation);
    _os_log_impl((void *)&_mh_execute_header, v26, v27, "Updating safe location with identifier: %s", v30, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    a4 = v86;
    swift_slowDealloc();
  }
  else
  {
    sub_100A2E53C((uint64_t)v24, (uint64_t (*)(void))type metadata accessor for SafeLocation);
  }

  uint64_t v33 = v106;
  double v34 = *(double *)(v106 + v19[8]);
  double v35 = *(double *)(v106 + v19[9]);
  double v36 = *(double *)(v106 + v19[10]);
  uint64_t v37 = v103;
  Date.init()();
  id v38 = objc_allocWithZone((Class)CLLocation);
  Class isa = Date._bridgeToObjectiveC()().super.isa;
  id v40 = [v38 initWithCoordinate:isa verticalAccuracy:v34 horizontalAccuracy:v35 altitude:0.0 course:v36 courseAccuracy:v36 speed:v36 speedAccuracy:-1.0 timestamp:0xBFF0000000000000];

  (*(void (**)(char *, uint64_t))(v104 + 8))(v37, v105);
  [v40 setReferenceFrame:*(unsigned __int8 *)(v33 + v19[11])];
  LOBYTE(isa) = sub_100FC022C();

  if (isa)
  {
    type metadata accessor for SPSeparationMonitoringError(0);
    uint64_t v107 = 21;
    sub_1004A0BC8((uint64_t)_swiftEmptyArrayStorage);
    sub_100A24444(&qword_1016386A0, type metadata accessor for SPSeparationMonitoringError);
    _BridgedStoredNSError.init(_:userInfo:)();
    uint64_t v41 = aBlock;
    a2(aBlock, 1);
  }
  else
  {
    uint64_t v42 = v89;
    sub_100B6BE80(v33 + v19[5], v89);
    uint64_t v43 = v90;
    int v44 = (*(uint64_t (**)(uint64_t, uint64_t, int *))(v90 + 48))(v42, 1, v19);
    sub_10001DAB4(v42, &qword_101653F20);
    if (v44 == 1)
    {
      sub_10001D4B0(0, (unint64_t *)&qword_1016376E0);
      uint64_t v45 = v94;
      os_log_type_t v46 = v92;
      uint64_t v47 = v95;
      (*(void (**)(char *, void, uint64_t))(v94 + 104))(v92, enum case for DispatchQoS.QoSClass.default(_:), v95);
      os_log_t v48 = (void *)static OS_dispatch_queue.global(qos:)();
      (*(void (**)(char *, uint64_t))(v45 + 8))(v46, v47);
      sub_100A32584(v33, (uint64_t)v22, (uint64_t (*)(void))type metadata accessor for SafeLocation);
      unint64_t v49 = (*(unsigned __int8 *)(v43 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v43 + 80);
      unint64_t v50 = (v91 + v49 + 7) & 0xFFFFFFFFFFFFFFF8;
      uint64_t v51 = swift_allocObject();
      sub_100A2E4D4((uint64_t)v22, v51 + v49, (uint64_t (*)(void))type metadata accessor for SafeLocation);
      uint64_t v52 = (void *)(v51 + v50);
      *uint64_t v52 = a2;
      v52[1] = a3;
      uint64_t v112 = sub_100A2F544;
      uint64_t v113 = v51;
      uint64_t aBlock = _NSConcreteStackBlock;
      uint64_t v109 = 1107296256;
      uint64_t v110 = sub_1004B5480;
      uint64_t v111 = &unk_1015E3E08;
      uint64_t v53 = _Block_copy(&aBlock);
      swift_retain();
      uint64_t v54 = v98;
      static DispatchQoS.unspecified.getter();
      uint64_t v107 = (uint64_t)_swiftEmptyArrayStorage;
      sub_100A24444((unint64_t *)&qword_10163B7E0, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
      sub_10000588C((uint64_t *)&unk_10163F350);
      sub_100062734((unint64_t *)&qword_10163B7F0, (uint64_t *)&unk_10163F350);
      BOOL v55 = v99;
      uint64_t v56 = v93;
      dispatch thunk of SetAlgebra.init<A>(_:)();
      OS_dispatch_queue.async(group:qos:flags:execute:)();
      _Block_release(v53);

      (*(void (**)(char *, uint64_t))(v101 + 8))(v55, v56);
      (*(void (**)(char *, uint64_t))(v100 + 8))(v54, v102);
    }
    else
    {
      uint64_t v96 = a2;
      uint64_t v105 = a3;
      sub_100A32584(v33, (uint64_t)v22, (uint64_t (*)(void))type metadata accessor for SafeLocation);
      uint64_t v57 = a4;
      uint64_t v58 = *(unsigned __int8 *)(v43 + 80);
      uint64_t v59 = v91;
      uint64_t v60 = v58 | 7;
      uint64_t v61 = swift_allocObject();
      *(void *)(v61 + 16) = v57;
      sub_100A2E4D4((uint64_t)v22, v61 + ((v58 + 24) & ~v58), (uint64_t (*)(void))type metadata accessor for SafeLocation);
      sub_100A32584(v33, (uint64_t)v22, (uint64_t (*)(void))type metadata accessor for SafeLocation);
      uint64_t v62 = (v58 + 16) & ~v58;
      uint64_t v63 = v62 + v59;
      uint64_t v103 = (char *)v60;
      uint64_t v64 = swift_allocObject();
      sub_100A2E4D4((uint64_t)v22, v64 + v62, (uint64_t (*)(void))type metadata accessor for SafeLocation);
      swift_retain();
      uint64_t v65 = (uint64_t)v97;
      sub_100A14110((uint64_t)sub_100A2F714, v61, (uint64_t)sub_100A2F78C, v64, &qword_1016554C0, (uint64_t)sub_100A244E4, (uint64_t)v97);
      swift_release();
      swift_release();
      uint64_t v66 = v87;
      sub_10001D074(v65, v87, &qword_1016554C0);
      LODWORD(v64) = swift_getEnumCaseMultiPayload();
      sub_10001DAB4(v66, &qword_1016554C0);
      sub_10001D4B0(0, (unint64_t *)&qword_1016376E0);
      uint64_t v67 = v94;
      uint64_t v68 = (uint64_t)v22;
      unint64_t v69 = v92;
      uint64_t v70 = v95;
      (*(void (**)(char *, void, uint64_t))(v94 + 104))(v92, enum case for DispatchQoS.QoSClass.default(_:), v95);
      uint64_t v104 = static OS_dispatch_queue.global(qos:)();
      (*(void (**)(char *, uint64_t))(v67 + 8))(v69, v70);
      sub_100A32584(v106, v68, (uint64_t (*)(void))type metadata accessor for SafeLocation);
      unint64_t v71 = (v63 + 7) & 0xFFFFFFFFFFFFFFF8;
      if (v64 == 1)
      {
        uint64_t v72 = swift_allocObject();
        sub_100A2E4D4(v68, v72 + v62, (uint64_t (*)(void))type metadata accessor for SafeLocation);
        unint64_t v73 = (void *)(v72 + v71);
        uint64_t v74 = v105;
        *unint64_t v73 = v96;
        v73[1] = v74;
        uint64_t v112 = sub_100A2F930;
        uint64_t v113 = v72;
        uint64_t aBlock = _NSConcreteStackBlock;
        uint64_t v109 = 1107296256;
        uint64_t v110 = sub_1004B5480;
        uint64_t v111 = &unk_1015E3EA8;
        double v75 = _Block_copy(&aBlock);
      }
      else
      {
        unint64_t v76 = (v71 + 23) & 0xFFFFFFFFFFFFFFF8;
        uint64_t v77 = swift_allocObject();
        sub_100A2E4D4(v68, v77 + v62, (uint64_t (*)(void))type metadata accessor for SafeLocation);
        uint64_t v78 = (void *)(v77 + v71);
        uint64_t v79 = v105;
        *uint64_t v78 = v96;
        v78[1] = v79;
        *(void *)(v77 + v76) = v57;
        uint64_t v112 = sub_100A2FA84;
        uint64_t v113 = v77;
        uint64_t aBlock = _NSConcreteStackBlock;
        uint64_t v109 = 1107296256;
        uint64_t v110 = sub_1004B5480;
        uint64_t v111 = &unk_1015E3EF8;
        double v75 = _Block_copy(&aBlock);
        swift_retain();
      }
      swift_retain();
      uint64_t v80 = v98;
      static DispatchQoS.unspecified.getter();
      uint64_t v107 = (uint64_t)_swiftEmptyArrayStorage;
      sub_100A24444((unint64_t *)&qword_10163B7E0, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
      sub_10000588C((uint64_t *)&unk_10163F350);
      sub_100062734((unint64_t *)&qword_10163B7F0, (uint64_t *)&unk_10163F350);
      Class v81 = v99;
      uint64_t v82 = v93;
      dispatch thunk of SetAlgebra.init<A>(_:)();
      double v83 = (void *)v104;
      OS_dispatch_queue.async(group:qos:flags:execute:)();
      _Block_release(v75);

      (*(void (**)(char *, uint64_t))(v101 + 8))(v81, v82);
      (*(void (**)(char *, uint64_t))(v100 + 8))(v80, v102);
      sub_10001DAB4((uint64_t)v97, &qword_1016554C0);
    }
    swift_release();
  }
}

uint64_t sub_100A1BEEC(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = (int *)type metadata accessor for SafeLocation();
  uint64_t v5 = v4[7];
  uint64_t v7 = *(void *)(a2 + v5);
  uint64_t v6 = *(void *)(a2 + v5 + 8);
  uint64_t v8 = (void *)(a1 + v5);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *uint64_t v8 = v7;
  v8[1] = v6;
  *(void *)(a1 + v4[8]) = *(void *)(a2 + v4[8]);
  *(void *)(a1 + v4[9]) = *(void *)(a2 + v4[9]);
  *(void *)(a1 + v4[10]) = *(void *)(a2 + v4[10]);
  *(unsigned char *)(a1 + v4[11]) = *(unsigned char *)(a2 + v4[11]);
  uint64_t v9 = v4[12];
  int v10 = *(unsigned __int8 *)(a2 + v9);
  *(unsigned char *)(a1 + v9) = v10;
  *(unsigned char *)(a1 + v4[6]) = *(unsigned char *)(a2 + v4[6]);
  uint64_t v11 = v4[13];
  uint64_t v12 = *(void *)(a2 + v11);
  swift_bridgeObjectRetain();
  uint64_t result = swift_bridgeObjectRelease();
  *(void *)(a1 + v11) = v12;
  if (v10 != 1)
  {
    uint64_t result = swift_bridgeObjectRelease();
    *(void *)(a1 + v11) = _swiftEmptyArrayStorage;
  }
  return result;
}

void sub_100A1BFE0(uint64_t a1, void (*a2)(void, void), uint64_t a3, const char *a4, uint64_t a5)
{
  uint64_t v9 = type metadata accessor for SafeLocation();
  __chkstk_darwin(v9);
  uint64_t v11 = (char *)&v20 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_101636EE0 != -1) {
    swift_once();
  }
  uint64_t v12 = type metadata accessor for Logger();
  sub_100010324(v12, (uint64_t)qword_10170E7C8);
  sub_100A32584(a1, (uint64_t)v11, (uint64_t (*)(void))type metadata accessor for SafeLocation);
  uint64_t v13 = Logger.logObject.getter();
  os_log_type_t v14 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v13, v14))
  {
    uint64_t v15 = swift_slowAlloc();
    uint64_t v23 = a2;
    uint64_t v16 = (uint8_t *)v15;
    uint64_t v25 = (void *)swift_slowAlloc();
    uint64_t v21 = a4;
    uint64_t v22 = a5;
    *(_DWORD *)uint64_t v16 = 136315138;
    type metadata accessor for UUID();
    sub_100A24444((unint64_t *)&qword_101638B10, (void (*)(uint64_t))&type metadata accessor for UUID);
    uint64_t v17 = dispatch thunk of CustomStringConvertible.description.getter();
    uint64_t v24 = sub_1008FA0F0(v17, v18, (uint64_t *)&v25);
    a5 = v22;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    sub_100A2E53C((uint64_t)v11, (uint64_t (*)(void))type metadata accessor for SafeLocation);
    _os_log_impl((void *)&_mh_execute_header, v13, v14, v21, v16, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    a2 = v23;
    swift_slowDealloc();
  }
  else
  {
    sub_100A2E53C((uint64_t)v11, (uint64_t (*)(void))type metadata accessor for SafeLocation);
  }

  type metadata accessor for SPSeparationMonitoringError(0);
  uint64_t v24 = a5;
  sub_1004A0BC8((uint64_t)_swiftEmptyArrayStorage);
  sub_100A24444(&qword_1016386A0, type metadata accessor for SPSeparationMonitoringError);
  _BridgedStoredNSError.init(_:userInfo:)();
  uint64_t v19 = v25;
  a2(v25, 1);
}

uint64_t sub_100A1C304(uint64_t a1, void (*a2)(void, void), uint64_t a3, uint64_t a4)
{
  uint64_t v7 = type metadata accessor for SafeLocation();
  __chkstk_darwin(v7);
  uint64_t v9 = (char *)v18 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_101636EE0 != -1) {
    swift_once();
  }
  uint64_t v10 = type metadata accessor for Logger();
  sub_100010324(v10, (uint64_t)qword_10170E7C8);
  sub_100A32584(a1, (uint64_t)v9, (uint64_t (*)(void))type metadata accessor for SafeLocation);
  uint64_t v11 = Logger.logObject.getter();
  os_log_type_t v12 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v11, v12))
  {
    uint64_t v13 = swift_slowAlloc();
    uint64_t v19 = a2;
    os_log_type_t v14 = (uint8_t *)v13;
    uint64_t v21 = swift_slowAlloc();
    *(_DWORD *)os_log_type_t v14 = 136315138;
    v18[1] = a4;
    type metadata accessor for UUID();
    sub_100A24444((unint64_t *)&qword_101638B10, (void (*)(uint64_t))&type metadata accessor for UUID);
    uint64_t v15 = dispatch thunk of CustomStringConvertible.description.getter();
    uint64_t v20 = sub_1008FA0F0(v15, v16, &v21);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    sub_100A2E53C((uint64_t)v9, (uint64_t (*)(void))type metadata accessor for SafeLocation);
    _os_log_impl((void *)&_mh_execute_header, v11, v12, "Successfuly updated safe location with identifier: %s", v14, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    a2 = v19;
    swift_slowDealloc();
  }
  else
  {
    sub_100A2E53C((uint64_t)v9, (uint64_t (*)(void))type metadata accessor for SafeLocation);
  }

  a2(0, 0);
  sub_100A9E7EC(16);
  dispatch thunk of DarwinNotificationHelper.post(bypassRateLimit:)();
  type metadata accessor for Transaction();
  static Transaction.asyncTask(name:block:)();
  return sub_100A9EAD8();
}

uint64_t sub_100A1C620(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for SafeLocation();
  uint64_t v3 = swift_bridgeObjectRetain();
  uint64_t result = sub_100442D9C(v3);
  *(unsigned char *)(a1 + *(int *)(v2 + 48)) = 1;
  return result;
}

uint64_t sub_100A1C678(char a1)
{
  LOBYTE(v1) = a1;
  uint64_t v2 = type metadata accessor for SafeLocation();
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t v4 = __chkstk_darwin(v2);
  uint64_t v21 = &v18[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __chkstk_darwin(v4);
  uint64_t v7 = &v18[-v6];
  uint64_t result = (uint64_t)sub_100B6C090();
  uint64_t v9 = result;
  uint64_t v10 = _swiftEmptyArrayStorage;
  uint64_t v22 = _swiftEmptyArrayStorage;
  uint64_t v11 = *(void *)(result + 16);
  if (v11)
  {
    unint64_t v12 = 0;
    int v1 = v1;
    uint64_t v20 = *(void *)(result + 16);
    int v19 = v1;
    while (v12 < *(void *)(v9 + 16))
    {
      unint64_t v13 = (*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
      uint64_t v14 = *(void *)(v3 + 72);
      sub_100A32584(v9 + v13 + v14 * v12, (uint64_t)v7, (uint64_t (*)(void))type metadata accessor for SafeLocation);
      if (v7[*(int *)(v2 + 24)] == v1)
      {
        uint64_t v15 = v2;
        sub_100A2E4D4((uint64_t)v7, (uint64_t)v21, (uint64_t (*)(void))type metadata accessor for SafeLocation);
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          sub_1000B79B0(0, v10[2] + 1, 1);
        }
        uint64_t v10 = v22;
        unint64_t v17 = v22[2];
        unint64_t v16 = v22[3];
        if (v17 >= v16 >> 1)
        {
          sub_1000B79B0(v16 > 1, v17 + 1, 1);
          uint64_t v10 = v22;
        }
        v10[2] = v17 + 1;
        uint64_t result = sub_100A2E4D4((uint64_t)v21, (uint64_t)v10 + v13 + v17 * v14, (uint64_t (*)(void))type metadata accessor for SafeLocation);
        uint64_t v2 = v15;
        uint64_t v11 = v20;
        int v1 = v19;
      }
      else
      {
        uint64_t result = sub_100A2E53C((uint64_t)v7, (uint64_t (*)(void))type metadata accessor for SafeLocation);
      }
      if (v11 == ++v12)
      {
        uint64_t v10 = v22;
        goto LABEL_13;
      }
    }
    __break(1u);
  }
  else
  {
LABEL_13:
    swift_bridgeObjectRelease();
    return (uint64_t)v10;
  }
  return result;
}

void sub_100A1C8D0(uint64_t a1, void (*a2)(id, uint64_t))
{
  if (*(unsigned char *)(a1 + 8))
  {
    id v3 = *(id *)a1;
    id v4 = *(id *)a1;
    a2(v3, 1);
    sub_100A2FB60(v3, 1);
  }
  else
  {
    a2(0, 0);
  }
}

uint64_t sub_100A1C954(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(void, void), uint64_t a5)
{
  return sub_100A1CA44(a1, a2, a3, a4, a5, "Unassigning beacons: %s from safe location with identifier: %s", (uint64_t)&unk_1015E3468, (uint64_t)&unk_1015E3490, (uint64_t)sub_100A24490, (uint64_t)sub_100A244CC, "Unable to unassign non-existant beacon %s to safe location with UUID: %s", (uint64_t)&unk_1015E3508, (uint64_t)sub_100A328FC, (uint64_t)&unk_1015E3520, (uint64_t)&unk_1015E34B8, (uint64_t)sub_100A244D8, byte_1015E34D0, "Failed to unassign %s from safe location with UUID: %s", "Unable to unassign beacons %s from non-existant safe location with UUID: %s",
           (uint64_t)&unk_1015E3418,
           (void (*)(char *, uint64_t, uint64_t))sub_100A32900,
           byte_1015E3430);
}

uint64_t sub_100A1CA44(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(void, void), uint64_t a5, const char *a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, const char *a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char *a17, const char *a18, const char *a19, uint64_t a20,void (*a21)(char *, uint64_t, uint64_t),const char *a22)
{
  uint64_t v197 = a8;
  uint64_t v196 = a7;
  char v234 = (char *)a6;
  uint64_t v212 = a5;
  uint64_t v231 = a3;
  uint64_t v201 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v207 = *(void *)(v201 - 8);
  __chkstk_darwin(v201);
  uint64_t v205 = (char *)&v184 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v208 = type metadata accessor for DispatchQoS();
  uint64_t v206 = *(void *)(v208 - 8);
  __chkstk_darwin(v208);
  uint64_t v204 = (char *)&v184 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v203 = type metadata accessor for DispatchQoS.QoSClass();
  uint64_t v200 = *(void *)(v203 - 8);
  __chkstk_darwin(v203);
  uint64_t v199 = (char *)&v184 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v228 = (void *)type metadata accessor for SystemInfo.DeviceLockState();
  uint64_t v223 = (void *)*(v228 - 1);
  uint64_t v28 = __chkstk_darwin(v228);
  long long v227 = (char *)&v184 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v28);
  uint64_t v226 = (char *)&v184 - v30;
  uint64_t v195 = sub_10000588C(&qword_1016554C0);
  uint64_t v31 = __chkstk_darwin(v195);
  uint64_t v194 = (uint64_t)&v184 - ((v32 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v31);
  double v34 = (char *)&v184 - v33;
  uint64_t v35 = sub_10000588C(&qword_101638CF0);
  __chkstk_darwin(v35 - 8);
  char v230 = (char *)&v184 - ((v36 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v37 = sub_10000588C(&qword_101653F20);
  __chkstk_darwin(v37 - 8);
  uint64_t v225 = (uint64_t)&v184 - ((v38 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v39 = type metadata accessor for UUID();
  uint64_t v40 = *(void *)(v39 - 8);
  uint64_t v210 = v40;
  uint64_t v41 = __chkstk_darwin(v39);
  uint64_t v224 = (char *)&v184 - ((v42 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v43 = __chkstk_darwin(v41);
  uint64_t v192 = (char *)&v184 - v44;
  uint64_t v45 = __chkstk_darwin(v43);
  uint64_t v191 = (char *)&v184 - v46;
  uint64_t v47 = __chkstk_darwin(v45);
  uint64_t v190 = (char *)&v184 - v48;
  uint64_t v49 = __chkstk_darwin(v47);
  uint64_t v233 = (char *)&v184 - v50;
  uint64_t v51 = __chkstk_darwin(v49);
  uint64_t v53 = (char *)&v184 - v52;
  uint64_t v193 = v54;
  __chkstk_darwin(v51);
  uint64_t v56 = (char *)&v184 - v55;
  if (qword_101636EE0 != -1) {
    swift_once();
  }
  uint64_t v198 = v34;
  uint64_t v57 = type metadata accessor for Logger();
  uint64_t v58 = sub_100010324(v57, (uint64_t)qword_10170E7C8);
  uint64_t v59 = *(void (**)(char *, uint64_t, uint64_t))(v40 + 16);
  uint64_t v215 = a2;
  uint64_t v232 = v59;
  v59(v56, a2, v39);
  swift_bridgeObjectRetain_n();
  uint64_t v202 = v58;
  uint64_t v60 = Logger.logObject.getter();
  os_log_type_t v61 = static os_log_type_t.default.getter();
  int v62 = v61;
  BOOL v63 = os_log_type_enabled(v60, v61);
  uint64_t v64 = v39;
  uint64_t v229 = v40 + 16;
  uint64_t v211 = a4;
  uint64_t v213 = a1;
  uint64_t v209 = v40;
  if (v63)
  {
    uint64_t v65 = swift_slowAlloc();
    char v222 = (unsigned int (**)(char *, uint64_t, uint64_t))swift_slowAlloc();
    *(void *)&long long aBlock = v222;
    *(_DWORD *)uint64_t v65 = 136315394;
    LODWORD(v221) = v62;
    swift_bridgeObjectRetain();
    uint64_t v66 = Array.description.getter();
    unint64_t v68 = v67;
    swift_bridgeObjectRelease();
    *(void *)&long long v235 = sub_1008FA0F0(v66, v68, (uint64_t *)&aBlock);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease();
    *(_WORD *)(v65 + 12) = 2080;
    sub_100A24444((unint64_t *)&qword_101638B10, (void (*)(uint64_t))&type metadata accessor for UUID);
    uint64_t v69 = dispatch thunk of CustomStringConvertible.description.getter();
    *(void *)&long long v235 = sub_1008FA0F0(v69, v70, (uint64_t *)&aBlock);
    uint64_t v39 = v64;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    unint64_t v71 = *(const char **)(v40 + 8);
    ((void (*)(char *, uint64_t))v71)(v56, v64);
    _os_log_impl((void *)&_mh_execute_header, v60, (os_log_type_t)v221, v234, (uint8_t *)v65, 0x16u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    swift_bridgeObjectRelease_n();
    unint64_t v71 = *(const char **)(v40 + 8);
    ((void (*)(char *, uint64_t))v71)(v56, v39);
  }

  uint64_t v72 = v225;
  uint64_t v73 = v215;
  sub_100B6BE80(v215, v225);
  uint64_t v74 = type metadata accessor for SafeLocation();
  int v75 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v74 - 8) + 48))(v72, 1, v74);
  sub_10001DAB4(v72, &qword_101653F20);
  unint64_t v76 = v230;
  char v234 = (char *)v71;
  if (v75 == 1)
  {
    uint64_t v78 = a21;
    uint64_t v77 = a22;
    uint64_t v79 = v224;
    v232(v224, v73, v39);
    swift_bridgeObjectRetain_n();
    uint64_t v80 = Logger.logObject.getter();
    os_log_type_t v81 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v80, v81))
    {
      char v230 = (char *)a19;
      uint64_t v82 = swift_slowAlloc();
      uint64_t v83 = swift_slowAlloc();
      uint64_t v233 = a22;
      *(void *)&long long aBlock = v83;
      *(_DWORD *)uint64_t v82 = 136315394;
      swift_bridgeObjectRetain();
      uint64_t v84 = Array.description.getter();
      uint64_t v231 = a20;
      uint64_t v232 = a21;
      uint64_t v85 = v84;
      unint64_t v87 = v86;
      swift_bridgeObjectRelease();
      *(void *)&long long v235 = sub_1008FA0F0(v85, v87, (uint64_t *)&aBlock);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      swift_bridgeObjectRelease();
      *(_WORD *)(v82 + 12) = 2080;
      sub_100A24444((unint64_t *)&qword_101638B10, (void (*)(uint64_t))&type metadata accessor for UUID);
      uint64_t v88 = dispatch thunk of CustomStringConvertible.description.getter();
      *(void *)&long long v235 = sub_1008FA0F0(v88, v89, (uint64_t *)&aBlock);
      uint64_t v78 = v232;
      uint64_t v90 = v212;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      ((void (*)(char *, uint64_t))v234)(v79, v39);
      _os_log_impl((void *)&_mh_execute_header, v80, v81, v230, (uint8_t *)v82, 0x16u);
      swift_arrayDestroy();
      uint64_t v77 = v233;
      uint64_t v91 = v203;
      swift_slowDealloc();
      swift_slowDealloc();

      uint64_t v92 = v208;
      uint64_t v93 = v200;
      uint64_t v94 = v199;
    }
    else
    {
      swift_bridgeObjectRelease_n();
      ((void (*)(char *, uint64_t))v234)(v79, v39);

      uint64_t v92 = v208;
      uint64_t v93 = v200;
      uint64_t v94 = v199;
      uint64_t v90 = v212;
      uint64_t v91 = v203;
    }
    sub_10001D4B0(0, (unint64_t *)&qword_1016376E0);
    (*(void (**)(char *, void, uint64_t))(v93 + 104))(v94, enum case for DispatchQoS.QoSClass.default(_:), v91);
    uint64_t v114 = (void *)static OS_dispatch_queue.global(qos:)();
    (*(void (**)(char *, uint64_t))(v93 + 8))(v94, v91);
    uint64_t v115 = swift_allocObject();
    *(void *)(v115 + 16) = v211;
    *(void *)(v115 + 24) = v90;
    uint64_t v240 = (uint64_t)v78;
    uint64_t v241 = v115;
    *(void *)&long long aBlock = _NSConcreteStackBlock;
    *((void *)&aBlock + 1) = 1107296256;
    *(void *)&long long v239 = sub_1004B5480;
    *((void *)&v239 + 1) = v77;
    unint64_t v116 = _Block_copy(&aBlock);
    swift_retain();
    uint64_t v117 = v204;
    static DispatchQoS.unspecified.getter();
    *(void *)&long long v235 = _swiftEmptyArrayStorage;
    sub_100A24444((unint64_t *)&qword_10163B7E0, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
    sub_10000588C((uint64_t *)&unk_10163F350);
    sub_100062734((unint64_t *)&qword_10163B7F0, (uint64_t *)&unk_10163F350);
    uint64_t v118 = v205;
    uint64_t v119 = v201;
    dispatch thunk of SetAlgebra.init<A>(_:)();
    OS_dispatch_queue.async(group:qos:flags:execute:)();
    _Block_release(v116);

    (*(void (**)(char *, uint64_t))(v207 + 8))(v118, v119);
    (*(void (**)(char *, uint64_t))(v206 + 8))(v117, v92);
    return swift_release();
  }
  uint64_t v221 = *(void *)(v213 + 16);
  uint64_t v189 = v64;
  if (v221)
  {
    uint64_t v186 = a12;
    uint64_t v185 = a11;
    uint64_t v188 = a14;
    uint64_t v187 = a13;
    uint64_t v225 = v213 + ((*(unsigned __int8 *)(v209 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v209 + 80));
    uint64_t v224 = *(char **)(v209 + 72);
    unint64_t v95 = v210 + 56;
    char v222 = (unsigned int (**)(char *, uint64_t, uint64_t))(v210 + 48);
    uint64_t v220 = (void (**)(const char *, char *, uint64_t))(v210 + 32);
    unsigned int v219 = enum case for SystemInfo.DeviceLockState.beforeFirstUnlock(_:);
    long long v218 = (void (**)(const char *, void, void *))(v223 + 13);
    uint64_t v217 = v223 + 1;
    swift_bridgeObjectRetain();
    uint64_t v96 = 0;
    uint64_t v223 = (void *)v95;
    unint64_t v184 = v95 & 0xFFFFFFFFFFFFLL | 0xA0D1000000000000;
    long long v216 = xmmword_101342130;
    double v98 = v232;
    double v97 = v233;
    double v99 = (void (**)(const char *, void *))v217;
    while (1)
    {
      v98(v76, v225 + (void)v224 * v96, v39);
      uint64_t v100 = (void (*)(char *, uint64_t, uint64_t, uint64_t))*v223;
      ((void (*)(char *, void, uint64_t, uint64_t))*v223)(v76, 0, 1, v39);
      if ((*v222)(v76, 1, v39) == 1) {
        break;
      }
      long long v214 = v100;
      (*v220)(v97, v76, v39);
      static os_log_type_t.info.getter();
      if (qword_101637260 != -1) {
        swift_once();
      }
      sub_10000588C((uint64_t *)&unk_10163AD00);
      uint64_t v101 = swift_allocObject();
      *(_OWORD *)(v101 + 16) = v216;
      uint64_t v102 = UUID.uuidString.getter();
      uint64_t v104 = v103;
      *(void *)(v101 + 56) = &type metadata for String;
      *(void *)(v101 + 64) = sub_10000B4CC();
      *(void *)(v101 + 32) = v102;
      *(void *)(v101 + 40) = v104;
      os_log(_:dso:log:_:_:)();
      swift_bridgeObjectRelease();
      uint64_t v105 = v226;
      static SystemInfo.lockState.getter();
      uint64_t v107 = v227;
      uint64_t v106 = v228;
      (*v218)(v227, v219, v228);
      sub_100A24444((unint64_t *)&qword_1016429C8, (void (*)(uint64_t))&type metadata accessor for SystemInfo.DeviceLockState);
      LOBYTE(v102) = dispatch thunk of static Equatable.== infix(_:_:)();
      uint64_t v108 = (void (*)(char *, void *))*v99;
      (*v99)(v107, v106);
      v108(v105, v106);
      if (v102)
      {
        static os_log_type_t.default.getter();
        os_log(_:dso:log:_:_:)();
        uint64_t v240 = 0;
        long long aBlock = 0u;
        long long v239 = 0u;
        uint64_t v39 = v64;
        double v98 = v232;
        double v97 = v233;
LABEL_28:
        sub_10001DAB4((uint64_t)&aBlock, (uint64_t *)&unk_10163BBE0);
        swift_bridgeObjectRelease();
        uint64_t v121 = v190;
        v98(v190, (uint64_t)v97, v39);
        uint64_t v122 = v191;
        v98(v191, v215, v39);
        os_log_type_t v123 = (char *)Logger.logObject.getter();
        os_log_type_t v124 = static os_log_type_t.error.getter();
        int v125 = v124;
        if (os_log_type_enabled((os_log_t)v123, v124))
        {
          uint64_t v126 = swift_slowAlloc();
          uint64_t v232 = (void (*)(char *, uint64_t, uint64_t))swift_slowAlloc();
          *(void *)&long long aBlock = v232;
          *(_DWORD *)uint64_t v126 = 136315394;
          LODWORD(v231) = v125;
          sub_100A24444((unint64_t *)&qword_101638B10, (void (*)(uint64_t))&type metadata accessor for UUID);
          char v230 = v123;
          uint64_t v127 = dispatch thunk of CustomStringConvertible.description.getter();
          *(void *)&long long v235 = sub_1008FA0F0(v127, v128, (uint64_t *)&aBlock);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease();
          uint64_t v129 = v121;
          uint64_t v130 = v234;
          ((void (*)(char *, uint64_t))v234)(v129, v39);
          *(_WORD *)(v126 + 12) = 2080;
          uint64_t v131 = dispatch thunk of CustomStringConvertible.description.getter();
          *(void *)&long long v235 = sub_1008FA0F0(v131, v132, (uint64_t *)&aBlock);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease();
          ((void (*)(char *, uint64_t))v130)(v122, v39);
          uint64_t v133 = v230;
          _os_log_impl((void *)&_mh_execute_header, (os_log_t)v230, (os_log_type_t)v231, v185, (uint8_t *)v126, 0x16u);
          swift_arrayDestroy();
          swift_slowDealloc();
          swift_slowDealloc();
        }
        else
        {
          uint64_t v134 = v121;
          uint64_t v130 = v234;
          ((void (*)(char *, uint64_t))v234)(v134, v39);
          ((void (*)(char *, uint64_t))v130)(v122, v39);
        }
        uint64_t v135 = v201;
        uint64_t v136 = v211;
        uint64_t v137 = v200;
        uint64_t v138 = v199;
        sub_10001D4B0(0, (unint64_t *)&qword_1016376E0);
        uint64_t v139 = v203;
        (*(void (**)(char *, void, uint64_t))(v137 + 104))(v138, enum case for DispatchQoS.QoSClass.default(_:), v203);
        uint64_t v140 = (void *)static OS_dispatch_queue.global(qos:)();
        (*(void (**)(char *, uint64_t))(v137 + 8))(v138, v139);
        uint64_t v141 = swift_allocObject();
        uint64_t v142 = v212;
        *(void *)(v141 + 16) = v136;
        *(void *)(v141 + 24) = v142;
        uint64_t v240 = v187;
        uint64_t v241 = v141;
        *(void *)&long long aBlock = _NSConcreteStackBlock;
        *((void *)&aBlock + 1) = 1107296256;
        *(void *)&long long v239 = sub_1004B5480;
        *((void *)&v239 + 1) = v188;
        uint64_t v143 = _Block_copy(&aBlock);
        swift_retain();
        unint64_t v144 = v204;
        static DispatchQoS.unspecified.getter();
        *(void *)&long long v235 = _swiftEmptyArrayStorage;
        sub_100A24444((unint64_t *)&qword_10163B7E0, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
        sub_10000588C((uint64_t *)&unk_10163F350);
        sub_100062734((unint64_t *)&qword_10163B7F0, (uint64_t *)&unk_10163F350);
        uint64_t v145 = v205;
        dispatch thunk of SetAlgebra.init<A>(_:)();
        OS_dispatch_queue.async(group:qos:flags:execute:)();
        _Block_release(v143);

        (*(void (**)(char *, uint64_t))(v207 + 8))(v145, v135);
        (*(void (**)(char *, uint64_t))(v206 + 8))(v144, v208);
        ((void (*)(const char *, uint64_t))v130)(v233, v189);
        return swift_release();
      }
      uint64_t v109 = sub_100AD2AD4();
      uint64_t v110 = *(void *)(v109 + 16);
      if (v110)
      {
        uint64_t v111 = v109 + 32;
        while (1)
        {
          sub_10001D010(v111, (uint64_t)&v235);
          uint64_t v113 = v236;
          uint64_t v112 = v237;
          sub_10001CD44(&v235, v236);
          (*(void (**)(uint64_t))(*(void *)(*(void *)(v112 + 8) + 8) + 32))(v113);
          LOBYTE(v112) = static UUID.== infix(_:_:)();
          ((void (*)(char *, uint64_t))v234)(v53, v64);
          if (v112) {
            break;
          }
          _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)&v235);
          v111 += 40;
          if (!--v110) {
            goto LABEL_19;
          }
        }
        sub_10001CEB0(&v235, (uint64_t)&aBlock);
      }
      else
      {
LABEL_19:
        uint64_t v240 = 0;
        long long aBlock = 0u;
        long long v239 = 0u;
      }
      swift_bridgeObjectRelease();
      uint64_t v39 = v64;
      double v98 = v232;
      double v97 = v233;
      unint64_t v76 = v230;
      if (!*((void *)&v239 + 1)) {
        goto LABEL_28;
      }
      ++v96;
      sub_10001DAB4((uint64_t)&aBlock, (uint64_t *)&unk_10163BBE0);
      ((void (*)(const char *, uint64_t))v234)(v97, v64);
      if (v96 == v221)
      {
        v214(v76, 1, 1, v64);
        break;
      }
    }
  }
  else
  {
    uint64_t v120 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v209 + 56);
    swift_bridgeObjectRetain();
    v120(v76, 1, 1, v39);
  }
  uint64_t v146 = v213;
  swift_bridgeObjectRelease();
  v232(v53, v215, v39);
  uint64_t v147 = v209;
  uint64_t v148 = *(unsigned __int8 *)(v209 + 80);
  uint64_t v149 = (const char *)((v148 + 24) & ~v148);
  long long v227 = &v149[v193];
  char v230 = (char *)(v148 | 7);
  uint64_t v150 = swift_allocObject();
  uint64_t v151 = v231;
  *(void *)(v150 + 16) = v231;
  uint64_t v233 = v149;
  uint64_t v228 = *(void **)(v147 + 32);
  ((void (*)(const char *, char *, uint64_t))v228)(&v149[v150], v53, v39);
  uint64_t v152 = swift_allocObject();
  *(void *)(v152 + 16) = v146;
  swift_bridgeObjectRetain();
  swift_retain();
  uint64_t v153 = (uint64_t)v198;
  sub_100A14110(a9, v150, a10, v152, &qword_1016554C0, (uint64_t)sub_100A244E4, (uint64_t)v198);
  swift_release();
  swift_release();
  uint64_t v154 = v194;
  sub_10001D074(v153, v194, &qword_1016554C0);
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  sub_10001DAB4(v154, &qword_1016554C0);
  if (EnumCaseMultiPayload != 1)
  {
    uint64_t v226 = a17;
    uint64_t v225 = a16;
    sub_10001D4B0(0, (unint64_t *)&qword_1016376E0);
    uint64_t v166 = v151;
    uint64_t v167 = v200;
    unint64_t v168 = v199;
    uint64_t v169 = v203;
    (*(void (**)(char *, void, uint64_t))(v200 + 104))(v199, enum case for DispatchQoS.QoSClass.default(_:), v203);
    char v234 = (char *)static OS_dispatch_queue.global(qos:)();
    (*(void (**)(char *, uint64_t))(v167 + 8))(v168, v169);
    uint64_t v170 = v189;
    v232(v53, v215, v189);
    unint64_t v171 = (unint64_t)(v227 + 7) & 0xFFFFFFFFFFFFFFF8;
    unint64_t v172 = (v171 + 23) & 0xFFFFFFFFFFFFFFF8;
    uint64_t v173 = swift_allocObject();
    *(void *)(v173 + 16) = v146;
    ((void (*)(const char *, char *, uint64_t))v228)(&v233[v173], v53, v170);
    uint64_t v174 = (void *)(v173 + v171);
    uint64_t v175 = v212;
    void *v174 = v211;
    v174[1] = v175;
    *(void *)(v173 + v172) = v166;
    uint64_t v240 = v225;
    uint64_t v241 = v173;
    *(void *)&long long aBlock = _NSConcreteStackBlock;
    *((void *)&aBlock + 1) = 1107296256;
    *(void *)&long long v239 = sub_1004B5480;
    *((void *)&v239 + 1) = v226;
    uint64_t v176 = _Block_copy(&aBlock);
    swift_bridgeObjectRetain();
    swift_retain();
    swift_retain();
    uint64_t v177 = v204;
    static DispatchQoS.unspecified.getter();
    *(void *)&long long v235 = _swiftEmptyArrayStorage;
    sub_100A24444((unint64_t *)&qword_10163B7E0, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
    sub_10000588C((uint64_t *)&unk_10163F350);
    sub_100062734((unint64_t *)&qword_10163B7F0, (uint64_t *)&unk_10163F350);
    uint64_t v178 = v205;
    uint64_t v179 = v201;
    dispatch thunk of SetAlgebra.init<A>(_:)();
    uint64_t v180 = v234;
    OS_dispatch_queue.async(group:qos:flags:execute:)();
    _Block_release(v176);

    (*(void (**)(char *, uint64_t))(v207 + 8))(v178, v179);
    (*(void (**)(char *, uint64_t))(v206 + 8))(v177, v208);
    sub_10001DAB4((uint64_t)v198, &qword_1016554C0);
    return swift_release();
  }
  uint64_t v156 = v192;
  uint64_t v157 = v189;
  v232(v192, v215, v189);
  swift_bridgeObjectRetain_n();
  uint64_t v158 = Logger.logObject.getter();
  os_log_type_t v159 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v158, v159))
  {
    uint64_t v233 = a18;
    uint64_t v160 = swift_slowAlloc();
    *(void *)&long long aBlock = swift_slowAlloc();
    *(_DWORD *)uint64_t v160 = 136315394;
    swift_bridgeObjectRetain();
    uint64_t v161 = Array.description.getter();
    unint64_t v163 = v162;
    swift_bridgeObjectRelease();
    *(void *)&long long v235 = sub_1008FA0F0(v161, v163, (uint64_t *)&aBlock);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease();
    *(_WORD *)(v160 + 12) = 2080;
    sub_100A24444((unint64_t *)&qword_101638B10, (void (*)(uint64_t))&type metadata accessor for UUID);
    uint64_t v164 = dispatch thunk of CustomStringConvertible.description.getter();
    *(void *)&long long v235 = sub_1008FA0F0(v164, v165, (uint64_t *)&aBlock);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    ((void (*)(char *, uint64_t))v234)(v156, v157);
    _os_log_impl((void *)&_mh_execute_header, v158, v159, v233, (uint8_t *)v160, 0x16u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    swift_bridgeObjectRelease_n();
    ((void (*)(char *, uint64_t))v234)(v156, v157);
  }

  uint64_t v182 = v211;
  type metadata accessor for SPSeparationMonitoringError(0);
  *(void *)&long long v235 = 17;
  sub_1004A0BC8((uint64_t)_swiftEmptyArrayStorage);
  sub_100A24444(&qword_1016386A0, type metadata accessor for SPSeparationMonitoringError);
  _BridgedStoredNSError.init(_:userInfo:)();
  uint64_t v183 = (void *)aBlock;
  v182(aBlock, 1);

  return sub_10001DAB4((uint64_t)v198, &qword_1016554C0);
}

void sub_100A1E7BC(void (*a1)(void *, uint64_t))
{
  type metadata accessor for SPSeparationMonitoringError(0);
  sub_1004A0BC8((uint64_t)_swiftEmptyArrayStorage);
  sub_100A24444(&qword_1016386A0, type metadata accessor for SPSeparationMonitoringError);
  _BridgedStoredNSError.init(_:userInfo:)();
  a1(v2, 1);
}

uint64_t sub_100A1E87C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for SafeLocation();
  uint64_t v5 = (unint64_t *)(a1 + *(int *)(v4 + 52));
  swift_bridgeObjectRetain();
  uint64_t v6 = sub_100A2DA98(v5, a2);
  uint64_t result = swift_bridgeObjectRelease();
  int64_t v8 = *(void *)(*v5 + 16);
  if (v8 < v6)
  {
    __break(1u);
  }
  else
  {
    uint64_t result = sub_100A29BAC(v6, v8);
    if (*(void *)(*v5 + 16)) {
      char v9 = 1;
    }
    else {
      char v9 = 2;
    }
    *(unsigned char *)(a1 + *(int *)(v4 + 48)) = v9;
  }
  return result;
}

uint64_t sub_100A1E928(uint64_t a1, uint64_t a2, void (*a3)(void, void), uint64_t a4, uint64_t a5, const char *a6)
{
  uint64_t v29 = a6;
  uint64_t v10 = type metadata accessor for UUID();
  uint64_t v11 = *(void *)(v10 - 8);
  __chkstk_darwin(v10);
  unint64_t v13 = (char *)v26 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_101636EE0 != -1) {
    swift_once();
  }
  uint64_t v14 = type metadata accessor for Logger();
  sub_100010324(v14, (uint64_t)qword_10170E7C8);
  (*(void (**)(char *, uint64_t, uint64_t))(v11 + 16))(v13, a2, v10);
  swift_bridgeObjectRetain_n();
  uint64_t v15 = Logger.logObject.getter();
  os_log_type_t v16 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v15, v16))
  {
    uint64_t v17 = swift_slowAlloc();
    v26[1] = a4;
    uint64_t v18 = v17;
    v26[0] = swift_slowAlloc();
    v31[0] = v26[0];
    *(_DWORD *)uint64_t v18 = 136315394;
    swift_bridgeObjectRetain();
    uint64_t v19 = Array.description.getter();
    uint64_t v27 = a3;
    uint64_t v28 = a5;
    uint64_t v20 = v19;
    unint64_t v22 = v21;
    swift_bridgeObjectRelease();
    uint64_t v30 = sub_1008FA0F0(v20, v22, v31);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease();
    *(_WORD *)(v18 + 12) = 2080;
    sub_100A24444((unint64_t *)&qword_101638B10, (void (*)(uint64_t))&type metadata accessor for UUID);
    uint64_t v23 = dispatch thunk of CustomStringConvertible.description.getter();
    uint64_t v30 = sub_1008FA0F0(v23, v24, v31);
    a3 = v27;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v11 + 8))(v13, v10);
    _os_log_impl((void *)&_mh_execute_header, v15, v16, v29, (uint8_t *)v18, 0x16u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    swift_bridgeObjectRelease_n();
    (*(void (**)(char *, uint64_t))(v11 + 8))(v13, v10);
  }

  a3(0, 0);
  sub_100A9E7EC(16);
  dispatch thunk of DarwinNotificationHelper.post(bypassRateLimit:)();
  type metadata accessor for Transaction();
  static Transaction.asyncTask(name:block:)();
  return sub_100A9EAD8();
}

void *sub_100A1ECD4(void *a1)
{
  uint64_t v38 = sub_10000588C(&qword_101655620);
  uint64_t v2 = *(void *)(v38 - 8);
  uint64_t v3 = __chkstk_darwin(v38);
  uint64_t v37 = (char *)v35 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v3);
  uint64_t v6 = (char *)v35 - v5;
  uint64_t v7 = type metadata accessor for SafeLocation();
  uint64_t v8 = *(void *)(v7 - 8);
  __chkstk_darwin(v7 - 8);
  uint64_t v10 = (char *)v35 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  [a1 coordinate];
  double v12 = v11;
  double v14 = v13;
  [a1 horizontalAccuracy];
  double v16 = v15;
  id v17 = objc_allocWithZone((Class)CLCircularRegion);
  NSString v18 = String._bridgeToObjectiveC()();
  id v19 = [v17 initWithCenter:v18 radius:v12 identifier:v14];

  [v19 setGeoReferenceFrame:[a1 referenceFrame]];
  uint64_t v20 = sub_100B6C090();
  id v21 = v19;
  unint64_t v22 = sub_100A29728((uint64_t)v20, v21);
  swift_bridgeObjectRelease();

  uint64_t v23 = sub_100A28DD8((uint64_t)v22);
  swift_bridgeObjectRelease();
  uint64_t v39 = v23;
  swift_bridgeObjectRetain();
  sub_100A066AC(&v39);
  swift_bridgeObjectRelease();
  unint64_t v24 = v39;
  int64_t v25 = v39[2];
  if (v25)
  {
    id v36 = v21;
    uint64_t v39 = _swiftEmptyArrayStorage;
    sub_1000B79B0(0, v25, 0);
    uint64_t v26 = *(unsigned __int8 *)(v2 + 80);
    v35[1] = v24;
    uint64_t v27 = (uint64_t)v24 + ((v26 + 32) & ~v26);
    uint64_t v28 = *(void *)(v2 + 72);
    uint64_t v29 = v39;
    do
    {
      sub_10001D074(v27, (uint64_t)v6, &qword_101655620);
      uint64_t v30 = *(int *)(v38 + 48);
      uint64_t v31 = (uint64_t)&v37[v30];
      sub_100A32584((uint64_t)&v6[v30], (uint64_t)&v37[v30], (uint64_t (*)(void))type metadata accessor for SafeLocation);
      sub_100A2E4D4(v31, (uint64_t)v10, (uint64_t (*)(void))type metadata accessor for SafeLocation);
      sub_10001DAB4((uint64_t)v6, &qword_101655620);
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        sub_1000B79B0(0, v29[2] + 1, 1);
        uint64_t v29 = v39;
      }
      unint64_t v33 = v29[2];
      unint64_t v32 = v29[3];
      if (v33 >= v32 >> 1)
      {
        sub_1000B79B0(v32 > 1, v33 + 1, 1);
        uint64_t v29 = v39;
      }
      v29[2] = v33 + 1;
      sub_100A2E4D4((uint64_t)v10, (uint64_t)v29+ ((*(unsigned __int8 *)(v8 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80))+ *(void *)(v8 + 72) * v33, (uint64_t (*)(void))type metadata accessor for SafeLocation);
      v27 += v28;
      --v25;
    }
    while (v25);
    swift_release();
  }
  else
  {
    swift_release();

    return _swiftEmptyArrayStorage;
  }
  return v29;
}

uint64_t sub_100A1F0D4@<X0>(uint64_t a1@<X0>, void *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v70 = a4;
  uint64_t v68 = a3;
  uint64_t v8 = type metadata accessor for DispatchTime();
  uint64_t v75 = *(void *)(v8 - 8);
  uint64_t v9 = __chkstk_darwin(v8);
  uint64_t v74 = (char *)v60 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9);
  unint64_t v71 = (char *)v60 - v11;
  uint64_t v12 = type metadata accessor for UUID();
  __chkstk_darwin(v12 - 8);
  unint64_t v67 = (char *)v60 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = type metadata accessor for SafeLocation();
  uint64_t v15 = *(void *)(v14 - 8);
  uint64_t v16 = __chkstk_darwin(v14);
  uint64_t v72 = (uint64_t)v60 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v69 = v17;
  __chkstk_darwin(v16);
  id v19 = (char *)v60 - v18;
  uint64_t v66 = sub_10000588C(&qword_101653F20);
  uint64_t v20 = __chkstk_darwin(v66);
  unint64_t v22 = (char *)v60 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v20);
  unint64_t v24 = (char *)v60 - v23;
  uint64_t v73 = a1;
  int64_t v25 = sub_100A1ECD4(a2);
  if (v25[2])
  {
    sub_100A32584((uint64_t)v25 + ((*(unsigned __int8 *)(v15 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v15 + 80)), (uint64_t)v24, (uint64_t (*)(void))type metadata accessor for SafeLocation);
    uint64_t v26 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v15 + 56);
    uint64_t v27 = v24;
    uint64_t v28 = 0;
  }
  else
  {
    uint64_t v26 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v15 + 56);
    uint64_t v27 = v24;
    uint64_t v28 = 1;
  }
  uint64_t v78 = v26;
  v26((uint64_t)v27, v28, 1, v14);
  swift_bridgeObjectRelease();
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v15 + 48))(v24, 1, v14) == 1)
  {
    uint64_t v62 = v15;
    uint64_t v63 = v8;
    sub_10001DAB4((uint64_t)v24, &qword_101653F20);
    if (qword_101636EE0 != -1) {
      swift_once();
    }
    os_log_type_t v61 = v22;
    uint64_t v29 = type metadata accessor for Logger();
    uint64_t v30 = sub_100010324(v29, (uint64_t)qword_10170E7C8);
    uint64_t v31 = a2;
    v60[1] = v30;
    unint64_t v32 = Logger.logObject.getter();
    os_log_type_t v33 = static os_log_type_t.default.getter();
    BOOL v34 = os_log_type_enabled(v32, v33);
    unint64_t v76 = v19;
    uint64_t v64 = v14;
    uint64_t v65 = a5;
    if (v34)
    {
      uint64_t v35 = (uint8_t *)swift_slowAlloc();
      v60[0] = swift_slowAlloc();
      *(_DWORD *)uint64_t v35 = 138412290;
      uint64_t v77 = v31;
      id v36 = v31;
      id v19 = v76;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(void *)v60[0] = v31;

      uint64_t v14 = v64;
      _os_log_impl((void *)&_mh_execute_header, v32, v33, "No suggested safe location for: %@ creating new one.", v35, 0xCu);
      sub_10000588C((uint64_t *)&unk_101638EA0);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {

      unint64_t v32 = v31;
    }

    if (v70) {
      uint64_t v38 = v68;
    }
    else {
      uint64_t v38 = 0;
    }
    if (v70) {
      uint64_t v39 = v70;
    }
    else {
      uint64_t v39 = 0xE000000000000000;
    }
    swift_bridgeObjectRetain();
    uint64_t v40 = (uint64_t)v67;
    UUID.init()();
    sub_100F114E0(v40, v31, v38, v39, 1, 2, v19);
    uint64_t v41 = dispatch_group_create();
    uint64_t v42 = swift_allocBox();
    uint64_t v44 = v43;
    uint64_t v45 = v62;
    uint64_t v70 = v62 + 56;
    v78(v43, 1, 1, v14);
    dispatch_group_enter(v41);
    uint64_t v46 = v72;
    sub_100A32584((uint64_t)v19, v72, (uint64_t (*)(void))type metadata accessor for SafeLocation);
    unint64_t v47 = (*(unsigned __int8 *)(v45 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v45 + 80);
    unint64_t v48 = (v69 + v47 + 7) & 0xFFFFFFFFFFFFFFF8;
    uint64_t v49 = swift_allocObject();
    *(void *)(v49 + 16) = v42;
    sub_100A2E4D4(v46, v49 + v47, (uint64_t (*)(void))type metadata accessor for SafeLocation);
    *(void *)(v49 + v48) = v41;
    uint64_t v50 = (uint64_t)v76;
    swift_retain();
    uint64_t v51 = v41;
    sub_100A16E08(v50, 0, (void (*)(void, void))sub_100A320EC, v49);
    swift_release();
    uint64_t v52 = v74;
    static DispatchTime.now()();
    uint64_t v53 = v71;
    + infix(_:_:)();
    uint64_t v54 = *(void (**)(char *, uint64_t))(v75 + 8);
    uint64_t v55 = v63;
    v54(v52, v63);
    OS_dispatch_group.wait(timeout:)();
    v54(v53, v55);
    if (static DispatchTimeoutResult.== infix(_:_:)())
    {
      uint64_t v56 = Logger.logObject.getter();
      os_log_type_t v57 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v56, v57))
      {
        uint64_t v58 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)uint64_t v58 = 0;
        _os_log_impl((void *)&_mh_execute_header, v56, v57, "Failed to create safe location suggestion due to timeout", v58, 2u);
        swift_slowDealloc();
      }

      sub_100A2E53C((uint64_t)v76, (uint64_t (*)(void))type metadata accessor for SafeLocation);
      uint64_t v59 = (uint64_t)v61;
      v78((uint64_t)v61, 1, 1, v64);
      swift_beginAccess();
      sub_100062604(v59, v44, &qword_101653F20);
    }
    else
    {
      sub_100A2E53C(v50, (uint64_t (*)(void))type metadata accessor for SafeLocation);
    }
    swift_beginAccess();
    sub_10001D074(v44, v65, &qword_101653F20);
    return swift_release();
  }
  else
  {
    sub_100A2E4D4((uint64_t)v24, a5, (uint64_t (*)(void))type metadata accessor for SafeLocation);
    return ((uint64_t (*)(uint64_t, void, uint64_t, uint64_t))v78)(a5, 0, 1, v14);
  }
}

void sub_100A1F8D4(void *a1, char a2, uint64_t a3, uint64_t a4, NSObject *a5)
{
  uint64_t v9 = sub_10000588C(&qword_101653F20);
  __chkstk_darwin(v9 - 8);
  uint64_t v11 = (char *)&v25 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = swift_projectBox();
  if (a2)
  {
    uint64_t v14 = qword_101636EE0;
    id v15 = a1;
    if (v14 != -1) {
      swift_once();
    }
    uint64_t v16 = type metadata accessor for Logger();
    sub_100010324(v16, (uint64_t)qword_10170E7C8);
    id v17 = v15;
    uint64_t v18 = Logger.logObject.getter();
    os_log_type_t v19 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v18, v19))
    {
      uint64_t v20 = (uint8_t *)swift_slowAlloc();
      uint64_t v21 = swift_slowAlloc();
      uint64_t v27 = (uint64_t)v17;
      v28[0] = v21;
      uint64_t v26 = a5;
      *(_DWORD *)uint64_t v20 = 136315138;
      int64_t v25 = v20 + 4;
      type metadata accessor for SPSeparationMonitoringError(0);
      sub_100A24444(&qword_101638238, type metadata accessor for SPSeparationMonitoringError);
      uint64_t v22 = Error.localizedDescription.getter();
      uint64_t v27 = sub_1008FA0F0(v22, v23, v28);
      a5 = v26;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      sub_1003B579C(a1, 1);
      sub_1003B579C(a1, 1);
      _os_log_impl((void *)&_mh_execute_header, v18, v19, "Failed to create new safe location suggestion due to: %s", v20, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      sub_1003B579C(a1, 1);
    }
    else
    {
      sub_1003B579C(a1, 1);
      sub_1003B579C(a1, 1);
    }
    uint64_t v24 = type metadata accessor for SafeLocation();
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v24 - 8) + 56))(v11, 1, 1, v24);
  }
  else
  {
    sub_100A32584(a4, (uint64_t)v11, (uint64_t (*)(void))type metadata accessor for SafeLocation);
    uint64_t v13 = type metadata accessor for SafeLocation();
    (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v13 - 8) + 56))(v11, 0, 1, v13);
  }
  swift_beginAccess();
  sub_100062604((uint64_t)v11, v12, &qword_101653F20);
  dispatch_group_leave(a5);
}

void sub_100A1FC34(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for LeashRecord();
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  uint64_t v5 = (_OWORD *)((char *)&v23 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v6 = sub_100B6CAA8();
  if (qword_101636EE0 != -1) {
    swift_once();
  }
  uint64_t v7 = type metadata accessor for Logger();
  sub_100010324(v7, (uint64_t)qword_10170E7C8);
  uint64_t v8 = Logger.logObject.getter();
  os_log_type_t v9 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v8, v9))
  {
    uint64_t v10 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v10 = 0;
    _os_log_impl((void *)&_mh_execute_header, v8, v9, "Attempting to merge leash records if needed.", v10, 2u);
    swift_slowDealloc();
  }

  unint64_t v11 = v6[2];
  if (v11 < 2)
  {
    swift_bridgeObjectRelease();
    os_log_t v23 = (os_log_t)Logger.logObject.getter();
    os_log_type_t v15 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v23, v15))
    {
      uint64_t v16 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v16 = 0;
      _os_log_impl((void *)&_mh_execute_header, v23, v15, "No duplicated leash records found, no need to merge.", v16, 2u);
      swift_slowDealloc();
    }
    os_log_t v17 = v23;
  }
  else
  {
    swift_bridgeObjectRetain();
    uint64_t v12 = Logger.logObject.getter();
    os_log_type_t v13 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v12, v13))
    {
      uint64_t v14 = (uint8_t *)swift_slowAlloc();
      *(_DWORD *)uint64_t v14 = 134217984;
      uint64_t v24 = (void *)v11;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v12, v13, "Found %ld leash records, cleaning up.", v14, 0xCu);
      swift_slowDealloc();
    }
    else
    {

      swift_bridgeObjectRelease();
    }
    uint64_t v24 = _swiftEmptyArrayStorage;
    uint64_t v18 = v6[2];
    if (v18)
    {
      os_log_type_t v19 = (char *)v6 + ((*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80));
      uint64_t v20 = *(void *)(v3 + 72);
      swift_bridgeObjectRetain();
      do
      {
        uint64_t v21 = swift_bridgeObjectRetain();
        sub_100442D9C(v21);
        v19 += v20;
        --v18;
      }
      while (v18);
      swift_bridgeObjectRelease();
    }
    type metadata accessor for UUID();
    sub_100A24444(&qword_10163BC60, (void (*)(uint64_t))&type metadata accessor for UUID);
    uint64_t v22 = Array<A>.uniqued()();
    swift_bridgeObjectRelease();
    UUID.init()();
    *uint64_t v5 = xmmword_101348180;
    *(void *)((char *)v5 + *(int *)(v2 + 24)) = v22;
    swift_bridgeObjectRetain();
    swift_retain();
    sub_100B46E2C((uint64_t)v5, 0, a1, (uint64_t)v6, a1);
    swift_bridgeObjectRelease_n();
    swift_release();
    sub_100A2E53C((uint64_t)v5, (uint64_t (*)(void))type metadata accessor for LeashRecord);
  }
}

void sub_100A20048(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v43 = a3;
  uint64_t v42 = type metadata accessor for LeashRecord();
  uint64_t v5 = *(void *)(v42 - 8);
  uint64_t v6 = *(void *)(v5 + 64);
  uint64_t v7 = __chkstk_darwin(v42);
  uint64_t v41 = (uint64_t)v35 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = __chkstk_darwin(v7);
  uint64_t v10 = (char *)v35 - v9;
  __chkstk_darwin(v8);
  uint64_t v12 = (char *)v35 - v11;
  uint64_t v13 = sub_10000588C((uint64_t *)&unk_1016554E0);
  __chkstk_darwin(v13);
  os_log_type_t v15 = (char *)v35 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10001D074(a1, (uint64_t)v15, (uint64_t *)&unk_1016554E0);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    if (qword_101636EE0 != -1) {
      swift_once();
    }
    uint64_t v16 = type metadata accessor for Logger();
    sub_100010324(v16, (uint64_t)qword_10170E7C8);
    swift_errorRetain();
    swift_errorRetain();
    os_log_t v17 = Logger.logObject.getter();
    os_log_type_t v18 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v17, v18))
    {
      os_log_type_t v19 = (uint8_t *)swift_slowAlloc();
      uint64_t v45 = swift_slowAlloc();
      *(_DWORD *)os_log_type_t v19 = 136315138;
      swift_getErrorValue();
      uint64_t v20 = Error.localizedDescription.getter();
      uint64_t v44 = sub_1008FA0F0(v20, v21, &v45);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      swift_errorRelease();
      swift_errorRelease();
      _os_log_impl((void *)&_mh_execute_header, v17, v18, "Failed to create a new merged leash record, bailing out - %s", v19, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      swift_errorRelease();
    }
    else
    {
      swift_errorRelease();
      swift_errorRelease();
      swift_errorRelease();
    }
  }
  else
  {
    if (qword_101636EE0 != -1) {
      swift_once();
    }
    uint64_t v22 = type metadata accessor for Logger();
    sub_100010324(v22, (uint64_t)qword_10170E7C8);
    os_log_t v23 = Logger.logObject.getter();
    os_log_type_t v24 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v23, v24))
    {
      int64_t v25 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)int64_t v25 = 0;
      _os_log_impl((void *)&_mh_execute_header, v23, v24, "Successfully created a merged leash record, removing existing ones.", v25, 2u);
      swift_slowDealloc();
    }

    uint64_t v26 = *(void *)(a2 + 16);
    if (v26)
    {
      v35[0] = v15;
      v35[1] = a2;
      uint64_t v27 = *(unsigned __int8 *)(v5 + 80);
      uint64_t v28 = a2 + ((v27 + 32) & ~v27);
      uint64_t v29 = *(void *)(v5 + 72);
      uint64_t v39 = (v27 + 16) & ~v27;
      uint64_t v40 = v29;
      uint64_t v37 = v27 | 7;
      uint64_t v38 = v39 + v6;
      swift_bridgeObjectRetain();
      long long v36 = xmmword_101342130;
      do
      {
        sub_100A32584(v28, (uint64_t)v12, (uint64_t (*)(void))type metadata accessor for LeashRecord);
        sub_100A32584((uint64_t)v12, (uint64_t)v10, (uint64_t (*)(void))type metadata accessor for LeashRecord);
        uint64_t v30 = swift_allocObject();
        sub_100A2E4D4((uint64_t)v10, v30 + v39, (uint64_t (*)(void))type metadata accessor for LeashRecord);
        static os_log_type_t.default.getter();
        if (qword_101637260 != -1) {
          swift_once();
        }
        sub_10000588C((uint64_t *)&unk_10163AD00);
        uint64_t v31 = swift_allocObject();
        *(_OWORD *)(v31 + 16) = v36;
        sub_100A32584((uint64_t)v12, v41, (uint64_t (*)(void))type metadata accessor for LeashRecord);
        uint64_t v32 = String.init<A>(describing:)();
        uint64_t v34 = v33;
        *(void *)(v31 + 56) = &type metadata for String;
        *(void *)(v31 + 64) = sub_10000B4CC();
        *(void *)(v31 + 32) = v32;
        *(void *)(v31 + 40) = v34;
        os_log(_:dso:log:_:_:)();
        swift_bridgeObjectRelease();
        swift_retain();
        sub_100B45D40((uint64_t)v12, v43, (void (*)(void))sub_100A3087C, v30);
        swift_release_n();
        sub_100A2E53C((uint64_t)v12, (uint64_t (*)(void))type metadata accessor for LeashRecord);
        v28 += v40;
        --v26;
      }
      while (v26);
      swift_bridgeObjectRelease();
      os_log_type_t v15 = (char *)v35[0];
    }
    sub_10001DAB4((uint64_t)v15, (uint64_t *)&unk_1016554E0);
  }
}

void sub_100A20640(char a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for LeashRecord();
  __chkstk_darwin(v4);
  uint64_t v6 = (char *)&v13 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_101636EE0 != -1) {
    swift_once();
  }
  uint64_t v7 = type metadata accessor for Logger();
  sub_100010324(v7, (uint64_t)qword_10170E7C8);
  sub_100A32584(a2, (uint64_t)v6, (uint64_t (*)(void))type metadata accessor for LeashRecord);
  uint64_t v8 = Logger.logObject.getter();
  os_log_type_t v9 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v8, v9))
  {
    uint64_t v10 = swift_slowAlloc();
    uint64_t v14 = swift_slowAlloc();
    *(_DWORD *)uint64_t v10 = 136315394;
    type metadata accessor for UUID();
    sub_100A24444((unint64_t *)&qword_101638B10, (void (*)(uint64_t))&type metadata accessor for UUID);
    uint64_t v11 = dispatch thunk of CustomStringConvertible.description.getter();
    uint64_t v13 = sub_1008FA0F0(v11, v12, &v14);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    sub_100A2E53C((uint64_t)v6, (uint64_t (*)(void))type metadata accessor for LeashRecord);
    *(_WORD *)(v10 + 12) = 1024;
    LODWORD(v13) = a1 & 1;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl((void *)&_mh_execute_header, v8, v9, "Removed duplicated leash record: %s: %{BOOL}d.", (uint8_t *)v10, 0x12u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    sub_100A2E53C((uint64_t)v6, (uint64_t (*)(void))type metadata accessor for LeashRecord);
  }
}

uint64_t sub_100A208DC(char *a1)
{
  uint64_t v2 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v63 = *(void (***)(unint64_t, uint64_t))(v2 - 8);
  __chkstk_darwin(v2);
  unint64_t v4 = (unint64_t)&v56 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = type metadata accessor for DispatchQoS();
  os_log_type_t v61 = *(void (***)(char *, uint64_t))(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v7 = (char *)&v56 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for UUID();
  uint64_t v79 = *(void *)(v8 - 8);
  uint64_t v80 = v8;
  uint64_t v9 = __chkstk_darwin(v8);
  uint64_t v11 = (char *)&v56 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v66 = v10;
  __chkstk_darwin(v9);
  unint64_t v76 = (char *)&v56 - v12;
  uint64_t v13 = type metadata accessor for SafeLocation();
  uint64_t v73 = *(void *)(v13 - 8);
  uint64_t v14 = __chkstk_darwin(v13);
  uint64_t v70 = (void (*)(char *, char *, uint64_t))((char *)&v56 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v16 = __chkstk_darwin(v14);
  os_log_type_t v18 = (char *)&v56 - v17;
  uint64_t v68 = v19;
  __chkstk_darwin(v16);
  uint64_t v77 = (uint64_t *)((char *)&v56 - v20);
  if (qword_101636EE0 != -1) {
    goto LABEL_25;
  }
  while (1)
  {
    uint64_t v21 = type metadata accessor for Logger();
    sub_100010324(v21, (uint64_t)qword_10170E7C8);
    uint64_t v22 = Logger.logObject.getter();
    os_log_type_t v23 = static os_log_type_t.default.getter();
    BOOL v24 = os_log_type_enabled(v22, v23);
    uint64_t v78 = v18;
    if (v24)
    {
      int64_t v25 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)int64_t v25 = 0;
      _os_log_impl((void *)&_mh_execute_header, v22, v23, "Attempting to clean unused separation alert safe locations", v25, 2u);
      os_log_type_t v18 = v78;
      swift_slowDealloc();
    }
    uint64_t v72 = v2;

    uint64_t v2 = (uint64_t)sub_100B6C090();
    if (qword_101636CD8 != -1) {
      swift_once();
    }
    unint64_t v57 = v4;
    uint64_t v74 = a1;
    OS_dispatch_queue.sync<A>(execute:)();
    sub_1010AC020(aBlock[0]);
    swift_bridgeObjectRelease();
    aBlock[0] = (uint64_t)_swiftEmptyArrayStorage;
    uint64_t v26 = *(void *)(v2 + 16);
    uint64_t v71 = v13;
    uint64_t v69 = v26;
    uint64_t v75 = v2;
    if (!v26) {
      break;
    }
    unint64_t v4 = 0;
    uint64_t v27 = _swiftEmptyArrayStorage;
    a1 = v76;
    while (v4 < *(void *)(v2 + 16))
    {
      uint64_t v13 = (uint64_t)v11;
      uint64_t v28 = v7;
      unint64_t v29 = (*(unsigned __int8 *)(v73 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v73 + 80);
      uint64_t v30 = *(void *)(v73 + 72);
      uint64_t v31 = v2 + v29 + v30 * v4;
      uint64_t v32 = v77;
      sub_100A32584(v31, (uint64_t)v77, (uint64_t (*)(void))type metadata accessor for SafeLocation);
      sub_100A212E8(v32);
      if (v33)
      {
        uint64_t v34 = v5;
        sub_100A2E4D4((uint64_t)v77, (uint64_t)v70, (uint64_t (*)(void))type metadata accessor for SafeLocation);
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          sub_1000B79B0(0, v27[2] + 1, 1);
        }
        uint64_t v27 = (void *)aBlock[0];
        unint64_t v36 = *(void *)(aBlock[0] + 16);
        unint64_t v35 = *(void *)(aBlock[0] + 24);
        if (v36 >= v35 >> 1)
        {
          sub_1000B79B0(v35 > 1, v36 + 1, 1);
          uint64_t v27 = (void *)aBlock[0];
        }
        v27[2] = v36 + 1;
        sub_100A2E4D4((uint64_t)v70, (uint64_t)v27 + v29 + v36 * v30, (uint64_t (*)(void))type metadata accessor for SafeLocation);
        uint64_t v5 = v34;
        a1 = v76;
      }
      else
      {
        sub_100A2E53C((uint64_t)v77, (uint64_t (*)(void))type metadata accessor for SafeLocation);
      }
      uint64_t v2 = v75;
      ++v4;
      uint64_t v7 = v28;
      uint64_t v11 = (char *)v13;
      os_log_type_t v18 = v78;
      if (v69 == v4)
      {
        uint64_t v37 = (void *)aBlock[0];
        goto LABEL_19;
      }
    }
    __break(1u);
LABEL_25:
    swift_once();
  }
  uint64_t v37 = _swiftEmptyArrayStorage;
  a1 = v76;
LABEL_19:
  swift_bridgeObjectRelease();
  uint64_t v38 = v37[2];
  uint64_t v40 = v79;
  uint64_t v39 = v80;
  if (!v38) {
    return swift_release();
  }
  uint64_t v41 = *(unsigned __int8 *)(v73 + 80);
  uint64_t v42 = (uint64_t)v37 + ((v41 + 32) & ~v41);
  uint64_t v77 = (uint64_t *)*((void *)v74 + 11);
  uint64_t v70 = *(void (**)(char *, char *, uint64_t))(v79 + 16);
  uint64_t v69 = (v41 + 16) & ~v41;
  v68 += v69;
  uint64_t v73 = *(void *)(v73 + 72);
  uint64_t v67 = v41 | 7;
  v66 += 7;
  uint64_t v65 = v79 + 32;
  uint64_t v64 = v83;
  ++v63;
  uint64_t v62 = v7;
  ++v61;
  uint64_t v75 = v79 + 16;
  uint64_t v60 = v79 + 8;
  uint64_t v56 = v37;
  swift_retain();
  uint64_t v59 = v5;
  uint64_t v58 = v11;
  unint64_t v43 = v57;
  uint64_t v44 = v58;
  do
  {
    uint64_t v45 = v70;
    v70(a1, (char *)(v42 + *(int *)(v71 + 20)), v39);
    sub_100A32584(v42, (uint64_t)v18, (uint64_t (*)(void))type metadata accessor for SafeLocation);
    uint64_t v46 = swift_allocObject();
    sub_100A2E4D4((uint64_t)v18, v46 + v69, (uint64_t (*)(void))type metadata accessor for SafeLocation);
    v45(v44, a1, v80);
    unint64_t v47 = (*(unsigned __int8 *)(v40 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v40 + 80);
    unint64_t v48 = (v66 + v47) & 0xFFFFFFFFFFFFFFF8;
    uint64_t v49 = swift_allocObject();
    (*(void (**)(unint64_t, char *, uint64_t))(v79 + 32))(v49 + v47, v44, v80);
    *(void *)(v49 + v48) = v74;
    uint64_t v50 = (void (**)(void *, char))(v49 + ((v48 + 15) & 0xFFFFFFFFFFFFFFF8));
    *uint64_t v50 = sub_100A30594;
    v50[1] = (void (*)(void *, char))v46;
    v83[2] = sub_100A2F110;
    v83[3] = v49;
    aBlock[0] = (uint64_t)_NSConcreteStackBlock;
    aBlock[1] = 1107296256;
    v83[0] = sub_1004B5480;
    v83[1] = &unk_1015E4268;
    uint64_t v51 = _Block_copy(aBlock);
    swift_retain();
    swift_retain();
    uint64_t v52 = v62;
    static DispatchQoS.unspecified.getter();
    os_log_type_t v81 = _swiftEmptyArrayStorage;
    sub_100A24444((unint64_t *)&qword_10163B7E0, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
    sub_10000588C((uint64_t *)&unk_10163F350);
    sub_100062734((unint64_t *)&qword_10163B7F0, (uint64_t *)&unk_10163F350);
    uint64_t v53 = v72;
    a1 = v76;
    dispatch thunk of SetAlgebra.init<A>(_:)();
    OS_dispatch_queue.async(group:qos:flags:execute:)();
    uint64_t v54 = v51;
    os_log_type_t v18 = v78;
    _Block_release(v54);
    (*v63)(v43, v53);
    (*v61)(v52, v59);
    uint64_t v39 = v80;
    swift_release();
    uint64_t v40 = v79;
    swift_release();
    (*(void (**)(char *, uint64_t))(v40 + 8))(a1, v39);
    v42 += v73;
    --v38;
  }
  while (v38);
  return swift_release_n();
}

void sub_100A212E8(uint64_t *a1)
{
  uint64_t v58 = type metadata accessor for SafeLocation();
  uint64_t v3 = __chkstk_darwin(v58);
  uint64_t v54 = &v49[-((v4 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v5 = __chkstk_darwin(v3);
  unint64_t v57 = (uint64_t *)&v49[-v6];
  uint64_t v7 = __chkstk_darwin(v5);
  uint64_t v9 = &v49[-v8];
  __chkstk_darwin(v7);
  uint64_t v11 = &v49[-v10];
  uint64_t v56 = type metadata accessor for Date();
  uint64_t v12 = *(void *)(v56 - 8);
  uint64_t v13 = __chkstk_darwin(v56);
  uint64_t v52 = &v49[-((v14 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v15 = __chkstk_darwin(v13);
  uint64_t v55 = (uint64_t)&v49[-v16];
  uint64_t v17 = __chkstk_darwin(v15);
  uint64_t v51 = &v49[-v18];
  uint64_t v19 = __chkstk_darwin(v17);
  uint64_t v21 = &v49[-v20];
  __chkstk_darwin(v19);
  os_log_type_t v23 = &v49[-v22];
  sub_100B23648(a1, (uint64_t)v23);
  if (v1)
  {
    __break(1u);
    __break(1u);
  }
  else
  {
    sub_100CB3358(a1, (uint64_t)v21);
    LODWORD(v25) = static Date.== infix(_:_:)();
    uint64_t v26 = *(void (**)(unsigned char *, uint64_t))(v12 + 8);
    uint64_t v27 = v21;
    uint64_t v28 = v56;
    v26(v27, v56);
    v26(v23, v28);
    sub_100A32584((uint64_t)a1, (uint64_t)v11, (uint64_t (*)(void))type metadata accessor for SafeLocation);
    uint64_t v29 = (uint64_t)a1;
    BOOL v30 = (v25 & 1) != 0 && v11[*(int *)(v58 + 48)] == 2;
    uint64_t v31 = (uint64_t)v54;
    sub_100A2E53C((uint64_t)v11, (uint64_t (*)(void))type metadata accessor for SafeLocation);
    sub_100A32584(v29, (uint64_t)v9, (uint64_t (*)(void))type metadata accessor for SafeLocation);
    BOOL v32 = (v25 & 1) != 0 && *(void *)(*(void *)&v9[*(int *)(v58 + 52)] + 16) == 0;
    sub_100A2E53C((uint64_t)v9, (uint64_t (*)(void))type metadata accessor for SafeLocation);
    char v33 = v57;
    sub_100A32584(v29, (uint64_t)v57, (uint64_t (*)(void))type metadata accessor for SafeLocation);
    BOOL v53 = v32;
    if (v25)
    {
      int v50 = (int)v25;
      sub_100B23648(v33, v55);
      uint64_t v54 = 0;
      int64_t v25 = v51;
      uint64_t v35 = v55;
      Date.addingTimeInterval(_:)();
      uint64_t v36 = v35;
      uint64_t v37 = v56;
      v26((unsigned char *)v36, v56);
      uint64_t v38 = v52;
      static Date.trustedNow.getter((uint64_t)v52);
      int v39 = static Date.< infix(_:_:)();
      v26(v38, v37);
      v26(v25, v37);
      int v40 = v39;
      BOOL v32 = v53;
      char v33 = v57;
      LOBYTE(v25) = v50;
    }
    else
    {
      uint64_t v54 = 0;
      int v40 = 0;
    }
    sub_100A2E53C((uint64_t)v33, (uint64_t (*)(void))type metadata accessor for SafeLocation);
    LODWORD(v57) = v30;
    if (qword_101636EE0 != -1) {
      swift_once();
    }
    int v41 = (v30 && v32) & v40;
    uint64_t v42 = type metadata accessor for Logger();
    sub_100010324(v42, (uint64_t)qword_10170E7C8);
    sub_100A32584(v29, v31, (uint64_t (*)(void))type metadata accessor for SafeLocation);
    unint64_t v43 = Logger.logObject.getter();
    os_log_type_t v44 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v43, v44))
    {
      uint64_t v45 = swift_slowAlloc();
      LODWORD(v55) = v40;
      uint64_t v46 = v45;
      uint64_t v56 = swift_slowAlloc();
      uint64_t v60 = v56;
      *(_DWORD *)uint64_t v46 = 136447490;
      type metadata accessor for UUID();
      sub_100A24444((unint64_t *)&qword_101638B10, (void (*)(uint64_t))&type metadata accessor for UUID);
      uint64_t v47 = dispatch thunk of CustomStringConvertible.description.getter();
      uint64_t v59 = sub_1008FA0F0(v47, v48, &v60);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      sub_100A2E53C(v31, (uint64_t (*)(void))type metadata accessor for SafeLocation);
      *(_WORD *)(v46 + 12) = 1024;
      LODWORD(v59) = v41;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v46 + 18) = 1024;
      LODWORD(v59) = v25 & 1;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v46 + 24) = 1024;
      LODWORD(v59) = v57;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v46 + 30) = 1024;
      LODWORD(v59) = v53;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v46 + 36) = 1024;
      LODWORD(v59) = v55 & 1;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      _os_log_impl((void *)&_mh_execute_header, v43, v44, "Should cleanup safe location %{public}s: %{BOOL}d\nreasons: (hasNeverBeenModified: %{BOOL}d, hasAlwaysBeenASuggestion: %{BOOL}d, hasNoAssociatedBeacons: %{BOOL}d), hasBeenCreatedLongAgo: %{BOOL}d)", (uint8_t *)v46, 0x2Au);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      sub_100A2E53C(v31, (uint64_t (*)(void))type metadata accessor for SafeLocation);
    }
  }
}

void sub_100A21A14(void *a1, char a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for SafeLocation();
  uint64_t v7 = __chkstk_darwin(v6);
  uint64_t v9 = (char *)&v29 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v7);
  uint64_t v11 = (char *)&v29 - v10;
  if (a2)
  {
    uint64_t v18 = qword_101636EE0;
    id v19 = a1;
    if (v18 != -1) {
      swift_once();
    }
    uint64_t v20 = type metadata accessor for Logger();
    sub_100010324(v20, (uint64_t)qword_10170E7C8);
    sub_100A32584(a3, (uint64_t)v9, (uint64_t (*)(void))type metadata accessor for SafeLocation);
    sub_1003B57DC(a1, 1);
    id v21 = v19;
    uint64_t v22 = Logger.logObject.getter();
    os_log_type_t v23 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v22, v23))
    {
      uint64_t v24 = swift_slowAlloc();
      uint64_t v30 = swift_slowAlloc();
      *(_DWORD *)uint64_t v24 = 136315394;
      type metadata accessor for UUID();
      sub_100A24444((unint64_t *)&qword_101638B10, (void (*)(uint64_t))&type metadata accessor for UUID);
      uint64_t v25 = dispatch thunk of CustomStringConvertible.description.getter();
      uint64_t v29 = sub_1008FA0F0(v25, v26, &v30);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      sub_100A2E53C((uint64_t)v9, (uint64_t (*)(void))type metadata accessor for SafeLocation);
      *(_WORD *)(v24 + 12) = 2080;
      uint64_t v29 = (uint64_t)v21;
      type metadata accessor for SPSeparationMonitoringError(0);
      sub_100A24444(&qword_101638238, type metadata accessor for SPSeparationMonitoringError);
      uint64_t v27 = Error.localizedDescription.getter();
      uint64_t v29 = sub_1008FA0F0(v27, v28, &v30);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      sub_1003B579C(a1, 1);
      sub_1003B579C(a1, 1);
      _os_log_impl((void *)&_mh_execute_header, v22, v23, "Failed to remove unused safe location: %s due to error: %s", (uint8_t *)v24, 0x16u);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      sub_1003B579C(a1, 1);
    }
    else
    {
      sub_1003B579C(a1, 1);
      sub_100A2E53C((uint64_t)v9, (uint64_t (*)(void))type metadata accessor for SafeLocation);
      sub_1003B579C(a1, 1);
      sub_1003B579C(a1, 1);
    }
  }
  else
  {
    if (qword_101636EE0 != -1) {
      swift_once();
    }
    uint64_t v12 = type metadata accessor for Logger();
    sub_100010324(v12, (uint64_t)qword_10170E7C8);
    sub_100A32584(a3, (uint64_t)v11, (uint64_t (*)(void))type metadata accessor for SafeLocation);
    uint64_t v13 = Logger.logObject.getter();
    os_log_type_t v14 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v13, v14))
    {
      uint64_t v15 = (uint8_t *)swift_slowAlloc();
      uint64_t v30 = swift_slowAlloc();
      *(_DWORD *)uint64_t v15 = 136315138;
      type metadata accessor for UUID();
      sub_100A24444((unint64_t *)&qword_101638B10, (void (*)(uint64_t))&type metadata accessor for UUID);
      uint64_t v16 = dispatch thunk of CustomStringConvertible.description.getter();
      uint64_t v29 = sub_1008FA0F0(v16, v17, &v30);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      sub_100A2E53C((uint64_t)v11, (uint64_t (*)(void))type metadata accessor for SafeLocation);
      _os_log_impl((void *)&_mh_execute_header, v13, v14, "Successfuly removed unused safe location: %s", v15, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      sub_100A2E53C((uint64_t)v11, (uint64_t (*)(void))type metadata accessor for SafeLocation);
    }
  }
}

uint64_t sub_100A21F98@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v42 = a2;
  uint64_t v41 = type metadata accessor for DispatchTime();
  uint64_t v3 = *(void *)(v41 - 8);
  uint64_t v4 = __chkstk_darwin(v41);
  uint64_t v6 = (char *)&v38 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v4);
  uint64_t v8 = (char *)&v38 - v7;
  uint64_t v9 = type metadata accessor for LeashRecord();
  uint64_t v10 = *(void *)(v9 - 8);
  __chkstk_darwin(v9);
  uint64_t v12 = (_OWORD *)((char *)&v38 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v13 = sub_10000588C(&qword_10164B290);
  uint64_t v14 = __chkstk_darwin(v13);
  int v39 = (char *)&v38 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v14);
  unint64_t v17 = (char *)&v38 - v16;
  uint64_t v40 = a1;
  uint64_t v18 = sub_100B6CAA8();
  if (v18[2])
  {
    sub_100A32584((uint64_t)v18 + ((*(unsigned __int8 *)(v10 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v10 + 80)), (uint64_t)v17, (uint64_t (*)(void))type metadata accessor for LeashRecord);
    id v19 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v10 + 56);
    uint64_t v20 = v17;
    uint64_t v21 = 0;
  }
  else
  {
    id v19 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v10 + 56);
    uint64_t v20 = v17;
    uint64_t v21 = 1;
  }
  unint64_t v43 = v19;
  v19((uint64_t)v20, v21, 1, v9);
  swift_bridgeObjectRelease();
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48))(v17, 1, v9) == 1)
  {
    sub_10001DAB4((uint64_t)v17, &qword_10164B290);
    UUID.init()();
    *uint64_t v12 = xmmword_101348180;
    *(void *)((char *)v12 + *(int *)(v9 + 24)) = _swiftEmptyArrayStorage;
    uint64_t v22 = dispatch_group_create();
    dispatch_group_enter(v22);
    uint64_t v23 = swift_allocBox();
    uint64_t v25 = v24;
    uint64_t v38 = v10 + 56;
    v43(v24, 1, 1, v9);
    unint64_t v26 = v22;
    uint64_t v27 = v40;
    uint64_t v40 = v23;
    sub_100B475F0((uint64_t)v12, 0, v27, v23, v26);

    static DispatchTime.now()();
    + infix(_:_:)();
    unint64_t v28 = *(void (**)(char *, uint64_t))(v3 + 8);
    uint64_t v29 = v6;
    uint64_t v30 = v41;
    v28(v29, v41);
    OS_dispatch_group.wait(timeout:)();
    v28(v8, v30);
    if (static DispatchTimeoutResult.== infix(_:_:)())
    {
      if (qword_101636EE0 != -1) {
        swift_once();
      }
      uint64_t v31 = type metadata accessor for Logger();
      sub_100010324(v31, (uint64_t)qword_10170E7C8);
      BOOL v32 = Logger.logObject.getter();
      os_log_type_t v33 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v32, v33))
      {
        uint64_t v34 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)uint64_t v34 = 0;
        _os_log_impl((void *)&_mh_execute_header, v32, v33, "Failed to create new leash record due to timeout", v34, 2u);
        swift_slowDealloc();
      }

      sub_100A2E53C((uint64_t)v12, (uint64_t (*)(void))type metadata accessor for LeashRecord);
      uint64_t v35 = (uint64_t)v39;
      v43((uint64_t)v39, 1, 1, v9);
      swift_beginAccess();
      sub_100062604(v35, v25, &qword_10164B290);
    }
    else
    {
      sub_100A2E53C((uint64_t)v12, (uint64_t (*)(void))type metadata accessor for LeashRecord);
    }
    swift_beginAccess();
    sub_10001D074(v25, v42, &qword_10164B290);
    return swift_release();
  }
  else
  {
    uint64_t v36 = v42;
    sub_100A2E4D4((uint64_t)v17, v42, (uint64_t (*)(void))type metadata accessor for LeashRecord);
    return ((uint64_t (*)(uint64_t, void, uint64_t, uint64_t))v43)(v36, 0, 1, v9);
  }
}

void sub_100A224EC(uint64_t a1, uint64_t a2, NSObject *a3)
{
  uint64_t v5 = type metadata accessor for LeashRecord();
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v8 = (char *)&v28 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = sub_10000588C(&qword_10164B290);
  __chkstk_darwin(v9 - 8);
  uint64_t v11 = (char *)&v28 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = sub_10000588C((uint64_t *)&unk_1016554E0);
  __chkstk_darwin(v12);
  uint64_t v14 = (char *)&v28 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = swift_projectBox();
  sub_10001D074(a1, (uint64_t)v14, (uint64_t *)&unk_1016554E0);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    if (qword_101636EE0 != -1) {
      swift_once();
    }
    uint64_t v16 = type metadata accessor for Logger();
    sub_100010324(v16, (uint64_t)qword_10170E7C8);
    swift_errorRetain();
    swift_errorRetain();
    unint64_t v17 = Logger.logObject.getter();
    os_log_type_t v18 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v17, v18))
    {
      uint64_t v19 = swift_slowAlloc();
      uint64_t v30 = v5;
      uint64_t v20 = (uint8_t *)v19;
      uint64_t v21 = swift_slowAlloc();
      uint64_t v31 = a3;
      v33[0] = v21;
      *(_DWORD *)uint64_t v20 = 136315138;
      uint64_t v29 = v15;
      swift_getErrorValue();
      uint64_t v22 = Error.localizedDescription.getter();
      uint64_t v32 = sub_1008FA0F0(v22, v23, v33);
      uint64_t v15 = v29;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      swift_errorRelease();
      swift_errorRelease();
      _os_log_impl((void *)&_mh_execute_header, v17, v18, "Failed to create new leash record due to: %s", v20, 0xCu);
      swift_arrayDestroy();
      a3 = v31;
      swift_slowDealloc();
      uint64_t v5 = v30;
      swift_slowDealloc();

      swift_errorRelease();
    }
    else
    {
      swift_errorRelease();
      swift_errorRelease();
      swift_errorRelease();
    }
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v6 + 56))(v11, 1, 1, v5);
  }
  else
  {
    sub_100A2E4D4((uint64_t)v14, (uint64_t)v8, (uint64_t (*)(void))type metadata accessor for LeashRecord);
    if (qword_101636EE0 != -1) {
      swift_once();
    }
    uint64_t v24 = type metadata accessor for Logger();
    sub_100010324(v24, (uint64_t)qword_10170E7C8);
    uint64_t v25 = Logger.logObject.getter();
    os_log_type_t v26 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v25, v26))
    {
      uint64_t v27 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v27 = 0;
      _os_log_impl((void *)&_mh_execute_header, v25, v26, "Successfuly created new leash record.", v27, 2u);
      swift_slowDealloc();
    }

    sub_100A2E4D4((uint64_t)v8, (uint64_t)v11, (uint64_t (*)(void))type metadata accessor for LeashRecord);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v6 + 56))(v11, 0, 1, v5);
  }
  swift_beginAccess();
  sub_100062604((uint64_t)v11, v15, &qword_10164B290);
  dispatch_group_leave(a3);
}

uint64_t sub_100A22998@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  return sub_100A23348(a1, a2, a3);
}

uint64_t sub_100A229B8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7 = swift_allocObject();
  *(void *)(v7 + 16) = a1;
  *(void *)(v7 + 24) = a2;
  uint64_t v8 = swift_allocObject();
  *(void *)(v8 + 16) = sub_100A2E5A8;
  *(void *)(v8 + 24) = v7;
  swift_retain();
  sub_100A07038(a4, (uint64_t)sub_100A32ABC, v8, (uint64_t)&unk_1015E37D8, (uint64_t)sub_100A2E5F8, (uint64_t)&unk_1015E37F0);

  return swift_release();
}

uint64_t sub_100A22A9C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X8>)
{
  uint64_t v8 = type metadata accessor for UUID();
  uint64_t v9 = *(void *)(v8 - 8);
  uint64_t v10 = *(void *)(v9 + 64);
  __chkstk_darwin(v8);
  (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))((char *)&v14 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0), a2, v8);
  unint64_t v11 = (*(unsigned __int8 *)(v9 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80);
  uint64_t v12 = swift_allocObject();
  *(void *)(v12 + 16) = a1;
  (*(void (**)(unint64_t, char *, uint64_t))(v9 + 32))(v12 + v11, (char *)&v14 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0), v8);
  *(void *)(v12 + ((v10 + v11 + 7) & 0xFFFFFFFFFFFFFFF8)) = a3;
  sub_10000588C((uint64_t *)&unk_101655548);
  swift_allocObject();
  swift_retain();
  swift_bridgeObjectRetain();
  uint64_t result = Future.init(_:)();
  *a4 = result;
  return result;
}

uint64_t sub_100A22C28(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v9 = swift_allocObject();
  *(void *)(v9 + 16) = a1;
  *(void *)(v9 + 24) = a2;
  uint64_t v10 = swift_allocObject();
  *(void *)(v10 + 16) = sub_100A2E5A8;
  *(void *)(v10 + 24) = v9;
  swift_retain();
  sub_100A080D8(a4, a5, (uint64_t)sub_100A32ABC, v10, (uint64_t)&unk_1015E4070, (uint64_t)sub_100A2FDC4, (uint64_t)&unk_1015E4088);

  return swift_release();
}

uint64_t sub_100A22D18@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, char a3@<W2>, uint64_t *a4@<X8>)
{
  uint64_t v8 = type metadata accessor for SafeLocation();
  uint64_t v9 = *(void *)(v8 - 8);
  uint64_t v10 = *(void *)(v9 + 64);
  __chkstk_darwin(v8 - 8);
  sub_100A32584(a2, (uint64_t)&v14 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0), (uint64_t (*)(void))type metadata accessor for SafeLocation);
  unint64_t v11 = (*(unsigned __int8 *)(v9 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80);
  uint64_t v12 = swift_allocObject();
  *(void *)(v12 + 16) = a1;
  sub_100A2E4D4((uint64_t)&v14 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0), v12 + v11, (uint64_t (*)(void))type metadata accessor for SafeLocation);
  *(unsigned char *)(v12 + v11 + v10) = a3;
  sub_10000588C((uint64_t *)&unk_101655548);
  swift_allocObject();
  swift_retain();
  uint64_t result = Future.init(_:)();
  *a4 = result;
  return result;
}

uint64_t sub_100A22E88(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5)
{
  uint64_t v9 = swift_allocObject();
  *(void *)(v9 + 16) = a1;
  *(void *)(v9 + 24) = a2;
  uint64_t v10 = swift_allocObject();
  *(void *)(v10 + 16) = sub_100A2E5A8;
  *(void *)(v10 + 24) = v9;
  swift_retain();
  sub_100A073C8(a4, a5, (uint64_t)sub_100A2EA60, v10);

  return swift_release();
}

uint64_t sub_100A22F54@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  return sub_100A23110(a1, a2, a3);
}

uint64_t sub_100A22F74(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7 = type metadata accessor for UUID();
  uint64_t v8 = *(void *)(v7 - 8);
  __chkstk_darwin(v7);
  uint64_t v10 = (char *)&v15 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = swift_allocObject();
  *(void *)(v11 + 16) = a1;
  *(void *)(v11 + 24) = a2;
  uint64_t v12 = type metadata accessor for SafeLocation();
  (*(void (**)(char *, uint64_t, uint64_t))(v8 + 16))(v10, a4 + *(int *)(v12 + 20), v7);
  uint64_t v13 = swift_allocObject();
  *(void *)(v13 + 16) = sub_100A2E5A8;
  *(void *)(v13 + 24) = v11;
  swift_retain();
  sub_100A07794((uint64_t)v10, (uint64_t)sub_100A32ABC, v13);
  swift_release();
  return (*(uint64_t (**)(char *, uint64_t))(v8 + 8))(v10, v7);
}

uint64_t sub_100A230F0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  return sub_100A23110(a1, a2, a3);
}

uint64_t sub_100A23110@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v6 = type metadata accessor for SafeLocation();
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = *(void *)(v7 + 64);
  __chkstk_darwin(v6 - 8);
  sub_100A32584(a2, (uint64_t)&v12 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0), (uint64_t (*)(void))type metadata accessor for SafeLocation);
  unint64_t v9 = (*(unsigned __int8 *)(v7 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80);
  uint64_t v10 = swift_allocObject();
  *(void *)(v10 + 16) = a1;
  sub_100A2E4D4((uint64_t)&v12 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0), v10 + v9, (uint64_t (*)(void))type metadata accessor for SafeLocation);
  sub_10000588C((uint64_t *)&unk_101655548);
  swift_allocObject();
  swift_retain();
  uint64_t result = Future.init(_:)();
  *a3 = result;
  return result;
}

uint64_t sub_100A23268(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7 = swift_allocObject();
  *(void *)(v7 + 16) = a1;
  *(void *)(v7 + 24) = a2;
  uint64_t v8 = swift_allocObject();
  *(void *)(v8 + 16) = sub_100A2E5A8;
  *(void *)(v8 + 24) = v7;
  swift_retain();
  sub_100A07C64(a4, (uint64_t)sub_100A32ABC, v8);

  return swift_release();
}

uint64_t sub_100A23328@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  return sub_100A23348(a1, a2, a3);
}

uint64_t sub_100A23348@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v6 = swift_allocObject();
  *(void *)(v6 + 16) = a1;
  *(void *)(v6 + 24) = a2;
  sub_10000588C((uint64_t *)&unk_101655548);
  swift_allocObject();
  swift_retain();
  swift_bridgeObjectRetain();
  uint64_t result = Future.init(_:)();
  *a3 = result;
  return result;
}

uint64_t sub_100A233DC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7 = swift_allocObject();
  *(void *)(v7 + 16) = a1;
  *(void *)(v7 + 24) = a2;
  uint64_t v8 = swift_allocObject();
  *(void *)(v8 + 16) = sub_100A2E5A8;
  *(void *)(v8 + 24) = v7;
  swift_retain();
  sub_100A06BBC(a4, (uint64_t)sub_100A32ABC, v8);

  return swift_release();
}

void sub_100A2349C(void *a1, char a2, void (*a3)(void *, uint64_t))
{
  if (a2)
  {
    id v5 = a1;
    a3(a1, 1);
    sub_1003B579C(a1, 1);
  }
  else
  {
    a3(0, 0);
  }
}

uint64_t sub_100A2351C@<X0>(uint8_t *a1@<X0>, void (*a2)(void)@<X1>, uint64_t (*a3)(void)@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t *a7@<X6>, uint64_t *a8@<X7>, uint64_t *a9@<X8>, uint64_t (*a10)(void), uint64_t (*a11)(void), uint64_t *a12, void (*a13)(uint64_t, void, uint64_t, uint64_t, uint64_t, uint64_t, NSObject *), uint64_t (*a14)(void))
{
  uint64_t v101 = a6;
  uint64_t v99 = a5;
  uint64_t v100 = a4;
  uint64_t v110 = a3;
  uint64_t v111 = a2;
  uint64_t v115 = a9;
  uint64_t v17 = sub_10000588C(a7);
  __chkstk_darwin(v17);
  uint64_t v94 = (char *)&v89 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v19 = type metadata accessor for DispatchTime();
  uint64_t v102 = *(void *)(v19 - 8);
  uint64_t v103 = v19;
  uint64_t v20 = __chkstk_darwin(v19);
  double v97 = (char *)&v89 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v20);
  double v98 = (char *)&v89 - v22;
  uint64_t v23 = sub_10000588C(a8);
  __chkstk_darwin(v23 - 8);
  uint64_t v107 = (char *)&v89 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v25 = a10(0);
  uint64_t isa = (uint64_t)v25[-1].isa;
  uint64_t v106 = v25;
  __chkstk_darwin(v25);
  uint64_t v114 = (uint8_t *)&v89 - v26;
  uint64_t v27 = type metadata accessor for UUID();
  uint64_t v28 = *(void *)(v27 - 8);
  uint64_t v29 = __chkstk_darwin(v27);
  uint64_t v93 = (char *)&v89 - ((v30 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v31 = __chkstk_darwin(v29);
  uint64_t v92 = (char *)&v89 - v32;
  uint64_t v33 = __chkstk_darwin(v31);
  uint64_t v96 = (char *)&v89 - v34;
  __chkstk_darwin(v33);
  uint64_t v36 = (char *)&v89 - v35;
  if (qword_101636EE0 != -1) {
    swift_once();
  }
  unint64_t v116 = a12;
  uint64_t v37 = type metadata accessor for Logger();
  uint64_t v38 = sub_100010324(v37, (uint64_t)qword_10170E7C8);
  int v39 = *(void (**)(char *, uint8_t *, uint64_t))(v28 + 16);
  uint64_t v113 = a1;
  uint64_t v108 = v39;
  uint64_t v109 = v28 + 16;
  v39(v36, a1, v27);
  uint64_t v112 = v38;
  uint64_t v40 = Logger.logObject.getter();
  os_log_type_t v41 = static os_log_type_t.default.getter();
  BOOL v42 = os_log_type_enabled(v40, v41);
  unint64_t v95 = a7;
  if (v42)
  {
    uint64_t v43 = swift_slowAlloc();
    uint64_t v90 = a8;
    os_log_type_t v44 = (uint8_t *)v43;
    uint64_t v45 = swift_slowAlloc();
    uint64_t v91 = v17;
    v118[0] = v45;
    uint64_t v104 = v28;
    *(_DWORD *)os_log_type_t v44 = 136315138;
    sub_100A24444((unint64_t *)&qword_101638B10, (void (*)(uint64_t))&type metadata accessor for UUID);
    uint64_t v46 = dispatch thunk of CustomStringConvertible.description.getter();
    uint64_t v119 = sub_1008FA0F0(v46, v47, v118);
    uint64_t v28 = v104;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    unint64_t v48 = *(void (**)(void))(v28 + 8);
    ((void (*)(char *, uint64_t))v48)(v36, v27);
    _os_log_impl((void *)&_mh_execute_header, v40, v41, "Executing synced modify operation with identifier: %s", v44, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    a8 = v90;
    swift_slowDealloc();
  }
  else
  {
    unint64_t v48 = *(void (**)(void))(v28 + 8);
    ((void (*)(char *, uint64_t))v48)(v36, v27);
  }

  dispatch_group_t v49 = dispatch_group_create();
  uint64_t v50 = (uint64_t)v107;
  v111();
  if ((*(unsigned int (**)(uint64_t, uint64_t, NSObject *))(isa + 48))(v50, 1, v106) == 1)
  {
    sub_10001DAB4(v50, a8);
    uint64_t v51 = v96;
    v108(v96, v113, v27);
    uint64_t v52 = Logger.logObject.getter();
    os_log_type_t v53 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v52, v53))
    {
      uint64_t v54 = swift_slowAlloc();
      uint64_t v111 = v48;
      uint64_t v55 = (uint8_t *)v54;
      uint64_t v56 = swift_slowAlloc();
      uint64_t v104 = v28;
      v118[0] = v56;
      *(_DWORD *)uint64_t v55 = 136315138;
      uint64_t v114 = v55 + 4;
      sub_100A24444((unint64_t *)&qword_101638B10, (void (*)(uint64_t))&type metadata accessor for UUID);
      uint64_t v57 = dispatch thunk of CustomStringConvertible.description.getter();
      uint64_t v119 = sub_1008FA0F0(v57, v58, v118);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      ((void (*)(char *, uint64_t))v111)(v51, v27);
      _os_log_impl((void *)&_mh_execute_header, v52, v53, "Synced modify operation with identifier: %s failed due to missing record.", v55, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      ((void (*)(char *, uint64_t))v48)(v51, v27);
    }

    sub_10009FD9C();
    uint64_t v77 = swift_allocError();
    *uint64_t v78 = 11;

    uint64_t *v115 = v77;
    sub_10000588C(v116);
    return swift_storeEnumTagMultiPayload();
  }
  else
  {
    uint64_t v110 = a14;
    uint64_t v111 = v48;
    uint64_t v59 = (uint64_t)v114;
    sub_100A2E4D4(v50, (uint64_t)v114, a11);
    uint64_t v60 = swift_allocBox();
    uint64_t v62 = v61;
    uint64_t v63 = sub_10000588C(v116);
    uint64_t v104 = *(void *)(v63 - 8);
    uint64_t v64 = *(void (**)(char *, uint64_t, uint64_t))(v104 + 56);
    uint64_t v96 = v62;
    uint64_t v107 = (char *)v63;
    v64(v62, 1, 1);
    dispatch_group_enter(v49);
    swift_retain();
    uint64_t v65 = v49;
    a13(v59, 0, v99, v101, v100, v60, v65);
    swift_release();

    uint64_t v66 = v97;
    static DispatchTime.now()();
    uint64_t v67 = v98;
    + infix(_:_:)();
    uint64_t v68 = v103;
    uint64_t v69 = *(void (**)(char *, uint64_t))(v102 + 8);
    v69(v66, v103);
    uint64_t v106 = v65;
    OS_dispatch_group.wait(timeout:)();
    v69(v67, v68);
    if (static DispatchTimeoutResult.== infix(_:_:)())
    {
      uint64_t v70 = v92;
      v108(v92, v113, v27);
      uint64_t v71 = Logger.logObject.getter();
      os_log_type_t v72 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v71, v72))
      {
        uint64_t v73 = (uint8_t *)swift_slowAlloc();
        uint64_t v74 = swift_slowAlloc();
        uint64_t isa = v60;
        v118[0] = v74;
        uint64_t v104 = v28;
        *(_DWORD *)uint64_t v73 = 136315138;
        sub_100A24444((unint64_t *)&qword_101638B10, (void (*)(uint64_t))&type metadata accessor for UUID);
        uint64_t v75 = dispatch thunk of CustomStringConvertible.description.getter();
        uint64_t v119 = sub_1008FA0F0(v75, v76, v118);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        ((void (*)(char *, uint64_t))v111)(v70, v27);
        _os_log_impl((void *)&_mh_execute_header, v71, v72, "Synced modify operation with identifier: %s failed due to timeout.", v73, 0xCu);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
      }
      else
      {
        ((void (*)(char *, uint64_t))v111)(v70, v27);
      }

      type metadata accessor for SPSeparationMonitoringError(0);
      uint64_t v119 = 19;
      sub_1004A0BC8((uint64_t)_swiftEmptyArrayStorage);
      sub_100A24444(&qword_1016386A0, type metadata accessor for SPSeparationMonitoringError);
      _BridgedStoredNSError.init(_:userInfo:)();

      sub_100A2E53C((uint64_t)v114, v110);
      uint64_t *v115 = v118[0];
      swift_storeEnumTagMultiPayload();
    }
    else
    {
      uint64_t isa = v60;
      uint64_t v80 = v93;
      v108(v93, v113, v27);
      os_log_type_t v81 = Logger.logObject.getter();
      os_log_type_t v82 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v81, v82))
      {
        uint64_t v83 = (uint8_t *)swift_slowAlloc();
        v118[0] = swift_slowAlloc();
        *(_DWORD *)uint64_t v83 = 136315138;
        uint64_t v113 = v83 + 4;
        sub_100A24444((unint64_t *)&qword_101638B10, (void (*)(uint64_t))&type metadata accessor for UUID);
        uint64_t v84 = dispatch thunk of CustomStringConvertible.description.getter();
        uint64_t v119 = sub_1008FA0F0(v84, v85, v118);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        ((void (*)(char *, uint64_t))v111)(v80, v27);
        _os_log_impl((void *)&_mh_execute_header, v81, v82, "Finished synced modify operation with identifier: %s.", v83, 0xCu);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
      }
      else
      {
        ((void (*)(char *, uint64_t))v111)(v80, v27);
      }

      uint64_t v86 = (uint64_t)v94;
      uint64_t v87 = (uint64_t)v96;
      swift_beginAccess();
      uint64_t v88 = v95;
      sub_10001D074(v87, v86, v95);
      if ((*(unsigned int (**)(uint64_t, uint64_t, char *))(v104 + 48))(v86, 1, v107) == 1)
      {
        type metadata accessor for SPSeparationMonitoringError(0);
        uint64_t v117 = 0;
        sub_1004A0BC8((uint64_t)_swiftEmptyArrayStorage);
        sub_100A24444(&qword_1016386A0, type metadata accessor for SPSeparationMonitoringError);
        _BridgedStoredNSError.init(_:userInfo:)();

        sub_100A2E53C((uint64_t)v114, v110);
        uint64_t *v115 = v119;
        swift_storeEnumTagMultiPayload();
        sub_10001DAB4(v86, v88);
      }
      else
      {
        sub_100A2E53C((uint64_t)v114, v110);

        sub_10001D608(v86, (uint64_t)v115, v116);
      }
    }
    return swift_release();
  }
}

Swift::Int sub_100A24324()
{
  return sub_1000975E8();
}

uint64_t sub_100A24340()
{
  return String.hash(into:)();
}

Swift::Int sub_100A2435C()
{
  return sub_100097678();
}

uint64_t sub_100A24378@<X0>(Swift::String *a1@<X0>, BOOL *a2@<X8>)
{
  v2._rawValue = &off_1015A3B10;
  return sub_1000976D0(v2, a1, a2);
}

void sub_100A24384(void *a1@<X8>)
{
  *a1 = 0xD000000000000043;
  a1[1] = 0x80000001013EF590;
}

Swift::Int sub_100A243A4()
{
  return sub_1000975E8();
}

uint64_t sub_100A243B4()
{
  return String.hash(into:)();
}

Swift::Int sub_100A243C4()
{
  return sub_100097678();
}

uint64_t sub_100A243D4@<X0>(Swift::String *a1@<X0>, BOOL *a2@<X8>)
{
  v2._rawValue = &off_1015A3AD8;
  return sub_1000976D0(v2, a1, a2);
}

void sub_100A243E0(void *a1@<X8>)
{
  *a1 = 1819047278;
  a1[1] = 0xE400000000000000;
}

uint64_t sub_100A243F4()
{
  swift_release();

  return _swift_deallocObject(v0, 32, 7);
}

uint64_t sub_100A2442C(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_100A2443C()
{
  return swift_release();
}

uint64_t sub_100A24444(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_100A24494()
{
  swift_bridgeObjectRelease();

  return _swift_deallocObject(v0, 24, 7);
}

uint64_t sub_100A244CC(uint64_t a1)
{
  return sub_100A1E87C(a1, *(void *)(v1 + 16));
}

uint64_t sub_100A244D8()
{
  return sub_100A300D4("Successfuly to unassigned %s from safe location with UUID: %s");
}

uint64_t sub_100A244E4@<X0>(uint64_t *a1@<X8>)
{
  return sub_100A2351C(*(uint8_t **)(v1 + 16), *(void (**)(void))(v1 + 24), *(uint64_t (**)(void))(v1 + 32), *(void *)(v1 + 40), *(void *)(v1 + 48), *(void *)(v1 + 56), &qword_1016554C8, &qword_101653F20, a1, (uint64_t (*)(void))type metadata accessor for SafeLocation, (uint64_t (*)(void))type metadata accessor for SafeLocation, &qword_1016554C0, (void (*)(uint64_t, void, uint64_t, uint64_t, uint64_t, uint64_t, NSObject *))sub_100B48638, (uint64_t (*)(void))type metadata accessor for SafeLocation);
}

Swift::Int sub_100A24578(uint64_t *a1)
{
  uint64_t v2 = v1;
  uint64_t v129 = sub_10000588C(&qword_101655620);
  uint64_t v4 = *(void *)(v129 - 8);
  uint64_t v5 = __chkstk_darwin(v129);
  uint64_t v125 = (uint64_t)&v120 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = __chkstk_darwin(v5);
  uint64_t v135 = (uint64_t)&v120 - v8;
  uint64_t v9 = __chkstk_darwin(v7);
  unint64_t v132 = (double *)((char *)&v120 - v10);
  __chkstk_darwin(v9);
  uint64_t v131 = (double *)((char *)&v120 - v11);
  Swift::Int v12 = a1[1];
  Swift::Int result = _minimumMergeRunLength(_:)(v12);
  if (result >= v12)
  {
    if (v12 < 0) {
      goto LABEL_140;
    }
    if (v12) {
      return sub_100A24FB0(0, v12, 1, a1);
    }
    return result;
  }
  if (v12 >= 0) {
    uint64_t v14 = v12;
  }
  else {
    uint64_t v14 = v12 + 1;
  }
  if (v12 < -1) {
    goto LABEL_148;
  }
  uint64_t v128 = v4;
  Swift::Int v122 = result;
  if (v12 < 2)
  {
    uint64_t v18 = (char *)_swiftEmptyArrayStorage;
    unint64_t v127 = (unint64_t)_swiftEmptyArrayStorage
         + ((*(unsigned __int8 *)(v4 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80));
    uint64_t v121 = _swiftEmptyArrayStorage;
    if (v12 != 1)
    {
      unint64_t v20 = _swiftEmptyArrayStorage[2];
LABEL_106:
      uint64_t v113 = v18;
      if (v20 >= 2)
      {
        uint64_t v114 = *a1;
        do
        {
          unint64_t v115 = v20 - 2;
          if (v20 < 2) {
            goto LABEL_135;
          }
          if (!v114) {
            goto LABEL_147;
          }
          uint64_t v116 = *(void *)&v113[16 * v115 + 32];
          uint64_t v117 = *(void *)&v113[16 * v20 + 24];
          sub_100A25230(v114 + *(void *)(v128 + 72) * v116, v114 + *(void *)(v128 + 72) * *(void *)&v113[16 * v20 + 16], v114 + *(void *)(v128 + 72) * v117, v127);
          if (v2) {
            break;
          }
          if (v117 < v116) {
            goto LABEL_136;
          }
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
            uint64_t v113 = sub_100B73584((uint64_t)v113);
          }
          if (v115 >= *((void *)v113 + 2)) {
            goto LABEL_137;
          }
          uint64_t v118 = &v113[16 * v115 + 32];
          *(void *)uint64_t v118 = v116;
          *((void *)v118 + 1) = v117;
          unint64_t v119 = *((void *)v113 + 2);
          if (v20 > v119) {
            goto LABEL_138;
          }
          memmove(&v113[16 * v20 + 16], &v113[16 * v20 + 32], 16 * (v119 - v20));
          *((void *)v113 + 2) = v119 - 1;
          unint64_t v20 = v119 - 1;
        }
        while (v119 > 2);
      }
LABEL_117:
      swift_bridgeObjectRelease();
      v121[2] = 0;
      return swift_bridgeObjectRelease();
    }
  }
  else
  {
    uint64_t v15 = v14 >> 1;
    uint64_t v16 = static Array._allocateBufferUninitialized(minimumCapacity:)();
    *(void *)(v16 + 16) = v15;
    uint64_t v17 = *(unsigned __int8 *)(v4 + 80);
    uint64_t v121 = (void *)v16;
    unint64_t v127 = v16 + ((v17 + 32) & ~v17);
  }
  Swift::Int v19 = 0;
  uint64_t v18 = (char *)_swiftEmptyArrayStorage;
  uint64_t v134 = a1;
  while (1)
  {
    Swift::Int v21 = v19 + 1;
    Swift::Int v126 = v19;
    if (v19 + 1 >= v12)
    {
      Swift::Int v30 = v19 + 1;
    }
    else
    {
      uint64_t v22 = *a1;
      uint64_t v23 = *(void *)(v4 + 72);
      uint64_t v24 = *a1 + v23 * v21;
      uint64_t v25 = v131;
      Swift::Int v133 = v12;
      sub_10001D074(v24, (uint64_t)v131, &qword_101655620);
      uint64_t v26 = v132;
      sub_10001D074(v22 + v23 * v126, (uint64_t)v132, &qword_101655620);
      double v27 = *v25;
      double v28 = *v26;
      sub_10001DAB4((uint64_t)v26, &qword_101655620);
      uint64_t v29 = (uint64_t)v25;
      Swift::Int v19 = v126;
      Swift::Int v12 = v133;
      sub_10001DAB4(v29, &qword_101655620);
      Swift::Int v30 = v19 + 2;
      uint64_t v124 = v22;
      uint64_t v136 = v23;
      if (v19 + 2 >= v12)
      {
        uint64_t v37 = v23;
        uint64_t v4 = v128;
        if (v28 >= v27) {
          goto LABEL_39;
        }
      }
      else
      {
        uint64_t v123 = v2;
        uint64_t v120 = v18;
        uint64_t v130 = v23 * v21;
        uint64_t v31 = v22;
        Swift::Int v32 = v19 + 2;
        uint64_t v33 = v23 * (v19 + 2);
        while (1)
        {
          uint64_t v34 = v131;
          sub_10001D074(v31 + v33, (uint64_t)v131, &qword_101655620);
          uint64_t v35 = v132;
          sub_10001D074(v31 + v130, (uint64_t)v132, &qword_101655620);
          BOOL v36 = *v35 >= *v34;
          sub_10001DAB4((uint64_t)v35, &qword_101655620);
          sub_10001DAB4((uint64_t)v34, &qword_101655620);
          if (v28 < v27 == v36) {
            break;
          }
          uint64_t v37 = v136;
          v31 += v136;
          ++v32;
          Swift::Int v12 = v133;
          if (v133 == v32)
          {
            Swift::Int v30 = v133;
            uint64_t v4 = v128;
            uint64_t v18 = v120;
            uint64_t v2 = v123;
            uint64_t v22 = v124;
            Swift::Int v19 = v126;
            if (v28 < v27) {
              goto LABEL_26;
            }
            goto LABEL_39;
          }
        }
        uint64_t v4 = v128;
        uint64_t v18 = v120;
        Swift::Int v30 = v32;
        uint64_t v2 = v123;
        uint64_t v22 = v124;
        Swift::Int v19 = v126;
        Swift::Int v12 = v133;
        uint64_t v37 = v136;
        if (v28 >= v27) {
          goto LABEL_39;
        }
      }
LABEL_26:
      if (v30 < v19) {
        goto LABEL_141;
      }
      if (v19 < v30)
      {
        uint64_t v123 = v2;
        uint64_t v38 = 0;
        uint64_t v39 = v37 * (v30 - 1);
        Swift::Int v40 = v30 * v37;
        uint64_t v41 = v19 * v37;
        do
        {
          if (v19 != v30 + v38 - 1)
          {
            if (!v22) {
              goto LABEL_146;
            }
            uint64_t v130 = v22 + v39;
            sub_10001D608(v22 + v41, v125, &qword_101655620);
            if (v41 < v39 || v22 + v41 >= (unint64_t)(v22 + v40))
            {
              uint64_t v42 = v130;
              swift_arrayInitWithTakeFrontToBack();
            }
            else
            {
              uint64_t v42 = v130;
              if (v41 != v39) {
                swift_arrayInitWithTakeBackToFront();
              }
            }
            sub_10001D608(v125, v42, &qword_101655620);
            a1 = v134;
            uint64_t v22 = v124;
            uint64_t v37 = v136;
          }
          ++v19;
          --v38;
          v39 -= v37;
          v40 -= v37;
          v41 += v37;
        }
        while (v19 < v30 + v38);
        uint64_t v4 = v128;
        uint64_t v2 = v123;
        Swift::Int v19 = v126;
        Swift::Int v12 = v133;
      }
    }
LABEL_39:
    if (v30 >= v12) {
      goto LABEL_57;
    }
    if (__OFSUB__(v30, v19)) {
      goto LABEL_139;
    }
    if (v30 - v19 >= v122) {
      goto LABEL_57;
    }
    if (__OFADD__(v19, v122)) {
      goto LABEL_142;
    }
    Swift::Int v43 = v19 + v122 >= v12 ? v12 : v19 + v122;
    if (v43 < v19) {
      break;
    }
    if (v30 != v43)
    {
      uint64_t v120 = v18;
      uint64_t v123 = v2;
      uint64_t v124 = v43;
      uint64_t v44 = *(void *)(v4 + 72);
      uint64_t v136 = v44 * (v30 - 1);
      uint64_t v130 = v44;
      Swift::Int v45 = v30 * v44;
      do
      {
        uint64_t v47 = 0;
        Swift::Int v133 = v30;
        while (1)
        {
          uint64_t v48 = *a1;
          Swift::Int v49 = v45;
          uint64_t v50 = v45 + v47 + *a1;
          uint64_t v51 = a1;
          uint64_t v52 = v131;
          sub_10001D074(v50, (uint64_t)v131, &qword_101655620);
          uint64_t v53 = v136 + v47 + v48;
          uint64_t v54 = v132;
          sub_10001D074(v53, (uint64_t)v132, &qword_101655620);
          double v55 = *v52;
          double v56 = *v54;
          sub_10001DAB4((uint64_t)v54, &qword_101655620);
          sub_10001DAB4((uint64_t)v52, &qword_101655620);
          if (v56 >= v55) {
            break;
          }
          uint64_t v57 = *v51;
          if (!*v51) {
            goto LABEL_144;
          }
          Swift::Int v45 = v49;
          uint64_t v58 = v57 + v136 + v47;
          sub_10001D608(v57 + v49 + v47, v135, &qword_101655620);
          swift_arrayInitWithTakeFrontToBack();
          sub_10001D608(v135, v58, &qword_101655620);
          v47 -= v130;
          ++v19;
          Swift::Int v46 = v133;
          a1 = v134;
          if (v133 == v19) {
            goto LABEL_50;
          }
        }
        a1 = v51;
        Swift::Int v46 = v133;
        Swift::Int v45 = v49;
LABEL_50:
        Swift::Int v30 = v46 + 1;
        v136 += v130;
        v45 += v130;
        Swift::Int v19 = v126;
      }
      while (v30 != v124);
      Swift::Int v30 = v124;
      uint64_t v2 = v123;
      uint64_t v18 = v120;
    }
LABEL_57:
    if (v30 < v19) {
      goto LABEL_134;
    }
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    Swift::Int v133 = v30;
    if ((isUniquelyReferenced_nonNull_native & 1) == 0) {
      uint64_t v18 = sub_100B729CC(0, *((void *)v18 + 2) + 1, 1, v18);
    }
    unint64_t v61 = *((void *)v18 + 2);
    unint64_t v60 = *((void *)v18 + 3);
    unint64_t v20 = v61 + 1;
    if (v61 >= v60 >> 1) {
      uint64_t v18 = sub_100B729CC((char *)(v60 > 1), v61 + 1, 1, v18);
    }
    uint64_t v62 = v2;
    *((void *)v18 + 2) = v20;
    uint64_t v63 = v18 + 32;
    uint64_t v64 = &v18[16 * v61 + 32];
    Swift::Int v65 = v133;
    *(void *)uint64_t v64 = v19;
    *((void *)v64 + 1) = v65;
    if (v61)
    {
      while (1)
      {
        unint64_t v66 = v20 - 1;
        if (v20 >= 4)
        {
          uint64_t v71 = &v63[16 * v20];
          uint64_t v72 = *((void *)v71 - 8);
          uint64_t v73 = *((void *)v71 - 7);
          BOOL v77 = __OFSUB__(v73, v72);
          uint64_t v74 = v73 - v72;
          if (v77) {
            goto LABEL_123;
          }
          uint64_t v76 = *((void *)v71 - 6);
          uint64_t v75 = *((void *)v71 - 5);
          BOOL v77 = __OFSUB__(v75, v76);
          uint64_t v69 = v75 - v76;
          char v70 = v77;
          if (v77) {
            goto LABEL_124;
          }
          unint64_t v78 = v20 - 2;
          uint64_t v79 = &v63[16 * v20 - 32];
          uint64_t v81 = *(void *)v79;
          uint64_t v80 = *((void *)v79 + 1);
          BOOL v77 = __OFSUB__(v80, v81);
          uint64_t v82 = v80 - v81;
          if (v77) {
            goto LABEL_126;
          }
          BOOL v77 = __OFADD__(v69, v82);
          uint64_t v83 = v69 + v82;
          if (v77) {
            goto LABEL_129;
          }
          if (v83 >= v74)
          {
            uint64_t v101 = &v63[16 * v66];
            uint64_t v103 = *(void *)v101;
            uint64_t v102 = *((void *)v101 + 1);
            BOOL v77 = __OFSUB__(v102, v103);
            uint64_t v104 = v102 - v103;
            if (v77) {
              goto LABEL_133;
            }
            BOOL v94 = v69 < v104;
            goto LABEL_94;
          }
        }
        else
        {
          if (v20 != 3)
          {
            uint64_t v95 = *((void *)v18 + 4);
            uint64_t v96 = *((void *)v18 + 5);
            BOOL v77 = __OFSUB__(v96, v95);
            uint64_t v88 = v96 - v95;
            char v89 = v77;
            goto LABEL_88;
          }
          uint64_t v68 = *((void *)v18 + 4);
          uint64_t v67 = *((void *)v18 + 5);
          BOOL v77 = __OFSUB__(v67, v68);
          uint64_t v69 = v67 - v68;
          char v70 = v77;
        }
        if (v70) {
          goto LABEL_125;
        }
        unint64_t v78 = v20 - 2;
        uint64_t v84 = &v63[16 * v20 - 32];
        uint64_t v86 = *(void *)v84;
        uint64_t v85 = *((void *)v84 + 1);
        BOOL v87 = __OFSUB__(v85, v86);
        uint64_t v88 = v85 - v86;
        char v89 = v87;
        if (v87) {
          goto LABEL_128;
        }
        uint64_t v90 = &v63[16 * v66];
        uint64_t v92 = *(void *)v90;
        uint64_t v91 = *((void *)v90 + 1);
        BOOL v77 = __OFSUB__(v91, v92);
        uint64_t v93 = v91 - v92;
        if (v77) {
          goto LABEL_131;
        }
        if (__OFADD__(v88, v93)) {
          goto LABEL_132;
        }
        if (v88 + v93 >= v69)
        {
          BOOL v94 = v69 < v93;
LABEL_94:
          if (v94) {
            unint64_t v66 = v78;
          }
          goto LABEL_96;
        }
LABEL_88:
        if (v89) {
          goto LABEL_127;
        }
        double v97 = &v63[16 * v66];
        uint64_t v99 = *(void *)v97;
        uint64_t v98 = *((void *)v97 + 1);
        BOOL v77 = __OFSUB__(v98, v99);
        uint64_t v100 = v98 - v99;
        if (v77) {
          goto LABEL_130;
        }
        if (v100 < v88) {
          goto LABEL_14;
        }
LABEL_96:
        unint64_t v105 = v66 - 1;
        if (v66 - 1 >= v20)
        {
          __break(1u);
LABEL_120:
          __break(1u);
LABEL_121:
          __break(1u);
LABEL_122:
          __break(1u);
LABEL_123:
          __break(1u);
LABEL_124:
          __break(1u);
LABEL_125:
          __break(1u);
LABEL_126:
          __break(1u);
LABEL_127:
          __break(1u);
LABEL_128:
          __break(1u);
LABEL_129:
          __break(1u);
LABEL_130:
          __break(1u);
LABEL_131:
          __break(1u);
LABEL_132:
          __break(1u);
LABEL_133:
          __break(1u);
LABEL_134:
          __break(1u);
LABEL_135:
          __break(1u);
LABEL_136:
          __break(1u);
LABEL_137:
          __break(1u);
LABEL_138:
          __break(1u);
LABEL_139:
          __break(1u);
LABEL_140:
          __break(1u);
LABEL_141:
          __break(1u);
LABEL_142:
          __break(1u);
          goto LABEL_143;
        }
        uint64_t v106 = *a1;
        if (!*a1) {
          goto LABEL_145;
        }
        uint64_t v107 = v18;
        uint64_t v108 = &v63[16 * v105];
        uint64_t v109 = *(void *)v108;
        uint64_t v110 = &v63[16 * v66];
        uint64_t v111 = *((void *)v110 + 1);
        sub_100A25230(v106 + *(void *)(v128 + 72) * *(void *)v108, v106 + *(void *)(v128 + 72) * *(void *)v110, v106 + *(void *)(v128 + 72) * v111, v127);
        if (v62) {
          goto LABEL_117;
        }
        if (v111 < v109) {
          goto LABEL_120;
        }
        if (v66 > *((void *)v107 + 2)) {
          goto LABEL_121;
        }
        *(void *)uint64_t v108 = v109;
        *(void *)&v63[16 * v105 + 8] = v111;
        unint64_t v112 = *((void *)v107 + 2);
        if (v66 >= v112) {
          goto LABEL_122;
        }
        uint64_t v18 = v107;
        unint64_t v20 = v112 - 1;
        memmove(&v63[16 * v66], v110 + 16, 16 * (v112 - 1 - v66));
        *((void *)v107 + 2) = v112 - 1;
        a1 = v134;
        if (v112 <= 2) {
          goto LABEL_14;
        }
      }
    }
    unint64_t v20 = 1;
LABEL_14:
    Swift::Int v19 = v133;
    uint64_t v2 = v62;
    Swift::Int v12 = a1[1];
    uint64_t v4 = v128;
    if (v133 >= v12) {
      goto LABEL_106;
    }
  }
LABEL_143:
  __break(1u);
LABEL_144:
  __break(1u);
LABEL_145:
  __break(1u);
LABEL_146:
  __break(1u);
LABEL_147:
  __break(1u);
LABEL_148:
  Swift::Int result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_100A24FB0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v27 = a1;
  uint64_t v28 = sub_10000588C(&qword_101655620);
  uint64_t v7 = __chkstk_darwin(v28);
  uint64_t v32 = (uint64_t)&v25 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = __chkstk_darwin(v7);
  uint64_t v29 = (double *)((char *)&v25 - v10);
  uint64_t result = __chkstk_darwin(v9);
  uint64_t v14 = (double *)((char *)&v25 - v13);
  uint64_t v31 = a3;
  uint64_t v26 = a2;
  if (a3 != a2)
  {
    uint64_t v15 = *(void *)(v12 + 72);
    uint64_t v34 = v15 * (v31 - 1);
    uint64_t v30 = v15;
    uint64_t v33 = v15 * v31;
LABEL_5:
    uint64_t v16 = 0;
    uint64_t v17 = v27;
    while (1)
    {
      uint64_t v18 = *a4;
      sub_10001D074(v33 + v16 + *a4, (uint64_t)v14, &qword_101655620);
      uint64_t v19 = v34 + v16 + v18;
      unint64_t v20 = v29;
      sub_10001D074(v19, (uint64_t)v29, &qword_101655620);
      double v21 = *v14;
      double v22 = *v20;
      sub_10001DAB4((uint64_t)v20, &qword_101655620);
      uint64_t result = sub_10001DAB4((uint64_t)v14, &qword_101655620);
      if (v22 >= v21)
      {
LABEL_4:
        v34 += v30;
        v33 += v30;
        if (++v31 == v26) {
          return result;
        }
        goto LABEL_5;
      }
      uint64_t v23 = *a4;
      if (!*a4) {
        break;
      }
      uint64_t v24 = v23 + v34 + v16;
      sub_10001D608(v23 + v33 + v16, v32, &qword_101655620);
      swift_arrayInitWithTakeFrontToBack();
      uint64_t result = sub_10001D608(v32, v24, &qword_101655620);
      v16 -= v30;
      if (v31 == ++v17) {
        goto LABEL_4;
      }
    }
    __break(1u);
  }
  return result;
}

uint64_t sub_100A25230(unint64_t a1, unint64_t a2, unint64_t a3, unint64_t a4)
{
  uint64_t v40 = sub_10000588C(&qword_101655620);
  uint64_t v8 = __chkstk_darwin(v40);
  uint64_t v10 = (double *)((char *)&v38 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0));
  __chkstk_darwin(v8);
  uint64_t v12 = (double *)((char *)&v38 - v11);
  uint64_t v14 = *(void *)(v13 + 72);
  if (!v14)
  {
    __break(1u);
LABEL_70:
    __break(1u);
LABEL_71:
    __break(1u);
    goto LABEL_72;
  }
  if (a2 - a1 == 0x8000000000000000 && v14 == -1) {
    goto LABEL_70;
  }
  int64_t v15 = a3 - a2;
  if (a3 - a2 == 0x8000000000000000 && v14 == -1) {
    goto LABEL_71;
  }
  uint64_t v16 = (uint64_t)(a2 - a1) / v14;
  unint64_t v43 = a1;
  unint64_t v42 = a4;
  uint64_t v17 = v15 / v14;
  if (v16 >= v15 / v14)
  {
    if ((v17 & 0x8000000000000000) == 0)
    {
      uint64_t v19 = v17 * v14;
      if (a4 < a2 || a2 + v19 <= a4)
      {
        swift_arrayInitWithTakeFrontToBack();
      }
      else if (a4 != a2)
      {
        swift_arrayInitWithTakeBackToFront();
      }
      unint64_t v28 = a4 + v19;
      unint64_t v41 = a4 + v19;
      unint64_t v43 = a2;
      unint64_t v39 = a1;
      if (v19 >= 1 && a1 < a2)
      {
        uint64_t v30 = -v14;
        do
        {
          unint64_t v31 = a3 + v30;
          sub_10001D074(v28 + v30, (uint64_t)v12, &qword_101655620);
          unint64_t v32 = a2 + v30;
          sub_10001D074(a2 + v30, (uint64_t)v10, &qword_101655620);
          double v33 = *v12;
          double v34 = *v10;
          sub_10001DAB4((uint64_t)v10, &qword_101655620);
          sub_10001DAB4((uint64_t)v12, &qword_101655620);
          if (v34 >= v33)
          {
            unint64_t v35 = v41;
            v41 += v30;
            if (a3 < v35 || v31 >= v35)
            {
              swift_arrayInitWithTakeFrontToBack();
            }
            else if (a3 != v35)
            {
              swift_arrayInitWithTakeBackToFront();
            }
            unint64_t v32 = a2;
          }
          else
          {
            if (a3 < a2 || v31 >= a2)
            {
              swift_arrayInitWithTakeFrontToBack();
            }
            else if (a3 != a2)
            {
              swift_arrayInitWithTakeBackToFront();
            }
            v43 += v30;
          }
          unint64_t v28 = v41;
          if (v41 <= a4) {
            break;
          }
          a2 = v32;
          a3 += v30;
        }
        while (v32 > v39);
      }
      goto LABEL_68;
    }
  }
  else if ((v16 & 0x8000000000000000) == 0)
  {
    uint64_t v18 = v16 * v14;
    if (a4 < a1 || a1 + v18 <= a4)
    {
      swift_arrayInitWithTakeFrontToBack();
    }
    else if (a4 != a1)
    {
      swift_arrayInitWithTakeBackToFront();
    }
    unint64_t v39 = a4 + v18;
    unint64_t v41 = a4 + v18;
    if (v18 >= 1 && a2 < a3)
    {
      do
      {
        sub_10001D074(a2, (uint64_t)v12, &qword_101655620);
        sub_10001D074(a4, (uint64_t)v10, &qword_101655620);
        double v21 = *v12;
        double v22 = *v10;
        sub_10001DAB4((uint64_t)v10, &qword_101655620);
        sub_10001DAB4((uint64_t)v12, &qword_101655620);
        unint64_t v23 = v43;
        if (v22 >= v21)
        {
          unint64_t v26 = v42 + v14;
          if (v43 < v42 || v43 >= v26)
          {
            swift_arrayInitWithTakeFrontToBack();
          }
          else if (v43 != v42)
          {
            swift_arrayInitWithTakeBackToFront();
          }
          unint64_t v42 = v26;
          unint64_t v24 = a2;
        }
        else
        {
          unint64_t v24 = a2 + v14;
          if (v43 < a2 || v43 >= v24)
          {
            swift_arrayInitWithTakeFrontToBack();
          }
          else if (v43 == a2)
          {
            unint64_t v23 = a2;
          }
          else
          {
            swift_arrayInitWithTakeBackToFront();
          }
        }
        unint64_t v43 = v23 + v14;
        a4 = v42;
        if (v42 >= v39) {
          break;
        }
        a2 = v24;
      }
      while (v24 < a3);
    }
LABEL_68:
    sub_100B731CC(&v43, &v42, (uint64_t *)&v41);
    return 1;
  }
LABEL_72:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_100A256D0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_100A25720(a1, a2, a3, (uint64_t (*)(void))sub_100A6F780, &qword_1016578F0, (uint64_t *)&unk_101655520);
}

uint64_t sub_100A256F8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_100A25720(a1, a2, a3, (uint64_t (*)(void))sub_100A6F794, &qword_1016578E0, (uint64_t *)&unk_101655510);
}

uint64_t sub_100A25720(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(void), uint64_t *a5, uint64_t *a6)
{
  if (a1 < 0)
  {
    __break(1u);
    goto LABEL_26;
  }
  uint64_t v8 = *v6;
  uint64_t v9 = *(void *)(*v6 + 16);
  if (v9 < a2)
  {
LABEL_26:
    __break(1u);
    goto LABEL_27;
  }
  uint64_t v11 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
LABEL_27:
    __break(1u);
    goto LABEL_28;
  }
  uint64_t v12 = 1 - v11;
  if (__OFSUB__(1, v11))
  {
LABEL_28:
    __break(1u);
    goto LABEL_29;
  }
  if (__OFADD__(v9, v12))
  {
LABEL_29:
    __break(1u);
LABEL_30:
    __break(1u);
    goto LABEL_31;
  }
  int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  *uint64_t v6 = v8;
  if (!isUniquelyReferenced_nonNull_native || v9 + v12 > *(void *)(v8 + 24) >> 1)
  {
    uint64_t v8 = a4();
    *uint64_t v6 = v8;
  }
  uint64_t v16 = *(void *)(sub_10000588C(a5) - 8);
  unint64_t v17 = v8 + ((*(unsigned __int8 *)(v16 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v16 + 80));
  uint64_t v18 = *(void *)(v16 + 72);
  uint64_t v19 = v17 + v18 * a1;
  swift_arrayDestroy();
  if (!v12) {
    goto LABEL_22;
  }
  uint64_t v20 = *(void *)(v8 + 16);
  uint64_t v21 = v20 - a2;
  if (__OFSUB__(v20, a2)) {
    goto LABEL_30;
  }
  if (v21 < 0)
  {
LABEL_32:
    uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
    __break(1u);
    return result;
  }
  unint64_t v22 = v19 + v18;
  unint64_t v23 = v17 + v18 * a2;
  if (v19 + v18 < v23 || v22 >= v23 + v21 * v18)
  {
    swift_arrayInitWithTakeFrontToBack();
  }
  else if (v22 != v23)
  {
    swift_arrayInitWithTakeBackToFront();
  }
  uint64_t v25 = *(void *)(v8 + 16);
  BOOL v26 = __OFADD__(v25, v12);
  uint64_t v27 = v25 + v12;
  if (v26)
  {
LABEL_31:
    __break(1u);
    goto LABEL_32;
  }
  *(void *)(v8 + 16) = v27;
LABEL_22:
  if (v18 >= 1) {
    sub_10001D074(a3, v19, a5);
  }
  return sub_10001DAB4(a3, a6);
}

uint64_t sub_100A2593C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_100A25720(a1, a2, a3, (uint64_t (*)(void))sub_100A6F7A8, &qword_1016578D0, (uint64_t *)&unk_101655500);
}

uint64_t sub_100A25964(uint64_t a1, int64_t a2, uint64_t a3)
{
  if (a1 < 0)
  {
    __break(1u);
    goto LABEL_29;
  }
  unint64_t v5 = *v3;
  int64_t v6 = *(void *)(*v3 + 16);
  if (v6 < a2)
  {
LABEL_29:
    __break(1u);
    goto LABEL_30;
  }
  uint64_t v8 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
LABEL_30:
    __break(1u);
    goto LABEL_31;
  }
  uint64_t v9 = 1 - v8;
  if (__OFSUB__(1, v8))
  {
LABEL_31:
    __break(1u);
    goto LABEL_32;
  }
  int64_t v10 = v6 + v9;
  if (__OFADD__(v6, v9))
  {
LABEL_32:
    __break(1u);
LABEL_33:
    __break(1u);
    goto LABEL_34;
  }
  int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  *uint64_t v3 = v5;
  if (!isUniquelyReferenced_nonNull_native || v10 > *(void *)(v5 + 24) >> 1)
  {
    if (v6 <= v10) {
      int64_t v13 = v6 + v9;
    }
    else {
      int64_t v13 = v6;
    }
    unint64_t v5 = sub_100A6F668(isUniquelyReferenced_nonNull_native, v13, 1, v5);
    *uint64_t v3 = v5;
  }
  uint64_t v14 = type metadata accessor for UUID();
  uint64_t v15 = *(void *)(v14 - 8);
  unint64_t v16 = v5 + ((*(unsigned __int8 *)(v15 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v15 + 80));
  uint64_t v17 = *(void *)(v15 + 72);
  unint64_t v18 = v16 + v17 * a1;
  swift_arrayDestroy();
  if (!v9) {
    goto LABEL_25;
  }
  uint64_t v19 = *(void *)(v5 + 16);
  uint64_t v20 = v19 - a2;
  if (__OFSUB__(v19, a2)) {
    goto LABEL_33;
  }
  if (v20 < 0)
  {
LABEL_35:
    uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
    __break(1u);
    return result;
  }
  unint64_t v21 = v18 + v17;
  unint64_t v22 = v16 + v17 * a2;
  if (v18 + v17 < v22 || v21 >= v22 + v20 * v17)
  {
    swift_arrayInitWithTakeFrontToBack();
  }
  else if (v21 != v22)
  {
    swift_arrayInitWithTakeBackToFront();
  }
  uint64_t v24 = *(void *)(v5 + 16);
  BOOL v25 = __OFADD__(v24, v9);
  uint64_t v26 = v24 + v9;
  if (v25)
  {
LABEL_34:
    __break(1u);
    goto LABEL_35;
  }
  *(void *)(v5 + 16) = v26;
LABEL_25:
  if (v17 >= 1) {
    (*(void (**)(unint64_t, uint64_t, uint64_t))(v15 + 16))(v18, a3, v14);
  }
  return sub_10001DAB4(a3, &qword_1016556D0);
}

uint64_t sub_100A25B80(uint64_t a1, int64_t a2, uint64_t a3)
{
  if (a1 < 0)
  {
    __break(1u);
    goto LABEL_29;
  }
  unint64_t v5 = *v3;
  int64_t v6 = *(void *)(*v3 + 16);
  if (v6 < a2)
  {
LABEL_29:
    __break(1u);
    goto LABEL_30;
  }
  uint64_t v8 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
LABEL_30:
    __break(1u);
    goto LABEL_31;
  }
  uint64_t v9 = 1 - v8;
  if (__OFSUB__(1, v8))
  {
LABEL_31:
    __break(1u);
    goto LABEL_32;
  }
  int64_t v10 = v6 + v9;
  if (__OFADD__(v6, v9))
  {
LABEL_32:
    __break(1u);
LABEL_33:
    __break(1u);
    goto LABEL_34;
  }
  int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  *uint64_t v3 = v5;
  if (!isUniquelyReferenced_nonNull_native || v10 > *(void *)(v5 + 24) >> 1)
  {
    if (v6 <= v10) {
      int64_t v13 = v6 + v9;
    }
    else {
      int64_t v13 = v6;
    }
    unint64_t v5 = sub_100A71AD4(isUniquelyReferenced_nonNull_native, v13, 1, v5);
    *uint64_t v3 = v5;
  }
  uint64_t v14 = *(void *)(type metadata accessor for BeaconKeyServiceBuilder.WorkItem(0) - 8);
  unint64_t v15 = v5 + ((*(unsigned __int8 *)(v14 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v14 + 80));
  uint64_t v16 = *(void *)(v14 + 72);
  uint64_t v17 = v15 + v16 * a1;
  swift_arrayDestroy();
  if (!v9) {
    goto LABEL_25;
  }
  uint64_t v18 = *(void *)(v5 + 16);
  uint64_t v19 = v18 - a2;
  if (__OFSUB__(v18, a2)) {
    goto LABEL_33;
  }
  if (v19 < 0)
  {
LABEL_35:
    uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
    __break(1u);
    return result;
  }
  unint64_t v20 = v17 + v16;
  unint64_t v21 = v15 + v16 * a2;
  if (v17 + v16 < v21 || v20 >= v21 + v19 * v16)
  {
    swift_arrayInitWithTakeFrontToBack();
  }
  else if (v20 != v21)
  {
    swift_arrayInitWithTakeBackToFront();
  }
  uint64_t v23 = *(void *)(v5 + 16);
  BOOL v24 = __OFADD__(v23, v9);
  uint64_t v25 = v23 + v9;
  if (v24)
  {
LABEL_34:
    __break(1u);
    goto LABEL_35;
  }
  *(void *)(v5 + 16) = v25;
LABEL_25:
  if (v16 >= 1) {
    sub_100A32584(a3, v17, type metadata accessor for BeaconKeyServiceBuilder.WorkItem);
  }
  return sub_10001DAB4(a3, &qword_101650730);
}

uint64_t sub_100A25DA0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8 = type metadata accessor for UUID();
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  uint64_t v11 = (char *)v29 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = sub_10000588C(&qword_10164B290);
  __chkstk_darwin(v12 - 8);
  uint64_t v14 = (char *)v29 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  void v31[3] = a3;
  v31[4] = a4;
  unint64_t v15 = sub_10001D958(v31);
  (*(void (**)(uint64_t *, uint64_t, uint64_t))(*(void *)(a3 - 8) + 16))(v15, a1, a3);
  if (qword_101637680 != -1) {
    swift_once();
  }
  swift_retain();
  AnyCurrentValuePublisher.value.getter();
  swift_release();
  int v16 = LOBYTE(v30[0]);
  sub_10001D010((uint64_t)v31, (uint64_t)v30);
  if (v16 != 1)
  {
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)v30);
LABEL_7:
    v29[0] = v9;
    unint64_t v20 = sub_100B6CAA8();
    uint64_t v21 = v20[2];
    uint64_t v22 = type metadata accessor for LeashRecord();
    uint64_t v23 = *(void *)(v22 - 8);
    if (v21)
    {
      sub_100A32584((uint64_t)v20+ ((*(unsigned __int8 *)(*(void *)(v22 - 8) + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(v22 - 8) + 80)), (uint64_t)v14, (uint64_t (*)(void))type metadata accessor for LeashRecord);
      uint64_t v24 = 0;
    }
    else
    {
      uint64_t v24 = 1;
    }
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v23 + 56))(v14, v24, 1, v22);
    swift_bridgeObjectRelease();
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v23 + 48))(v14, 1, v22) == 1)
    {
      sub_10001DAB4((uint64_t)v14, &qword_10164B290);
    }
    else
    {
      uint64_t v25 = *(void *)&v14[*(int *)(v22 + 24)];
      swift_bridgeObjectRetain();
      sub_100A2E53C((uint64_t)v14, (uint64_t (*)(void))type metadata accessor for LeashRecord);
      uint64_t v26 = (*(uint64_t (**)(uint64_t))(*(void *)(*(void *)(a4 + 8) + 8) + 32))(a3);
      __chkstk_darwin(v26);
      v29[-2] = v11;
      BOOL v27 = sub_100A9F998((uint64_t (*)(char *))sub_1006CD4F8, (uint64_t)&v29[-4], v25);
      (*(void (**)(char *, uint64_t))(v29[0] + 8))(v11, v8);
      swift_bridgeObjectRelease();
      if (v27)
      {
        uint64_t v19 = 0;
        goto LABEL_15;
      }
    }
    uint64_t v19 = 2;
    goto LABEL_15;
  }
  uint64_t v17 = sub_10001CD44(v30, v30[3]);
  char v18 = sub_100A2616C((uint64_t)v17, a2, a3, a4);
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)v30);
  if ((v18 & 1) == 0) {
    goto LABEL_7;
  }
  uint64_t v19 = 5;
LABEL_15:
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)v31);
  return v19;
}

uint64_t sub_100A2616C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v114 = a2;
  uint64_t v110 = type metadata accessor for Date();
  uint64_t v109 = *(void *)(v110 - 8);
  __chkstk_darwin(v110);
  uint64_t v108 = (uint64_t)&v103 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v116 = type metadata accessor for BeaconObservation();
  uint64_t v118 = *(uint8_t **)(v116 - 8);
  uint64_t v8 = __chkstk_darwin(v116);
  uint64_t v117 = (uint64_t)&v103 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = __chkstk_darwin(v8);
  uint64_t v12 = (char *)&v103 - v11;
  __chkstk_darwin(v10);
  uint64_t v14 = (char *)&v103 - v13;
  uint64_t v15 = sub_10000588C((uint64_t *)&unk_101655530);
  uint64_t v16 = __chkstk_darwin(v15 - 8);
  uint64_t v111 = (uint64_t)&v103 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v16);
  uint64_t v19 = (char *)&v103 - v18;
  uint64_t v20 = type metadata accessor for UUID();
  uint64_t v21 = *(void *)(v20 - 8);
  uint64_t v22 = __chkstk_darwin(v20);
  unint64_t v112 = (void (*)(char *, uint64_t))((char *)&v103 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0));
  __chkstk_darwin(v22);
  uint64_t v113 = (char *)&v103 - v24;
  uint64_t v25 = sub_10000588C(&qword_101638CF0);
  uint64_t v26 = __chkstk_darwin(v25 - 8);
  unint64_t v28 = (char *)&v103 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v26);
  uint64_t v115 = (uint64_t)&v103 - v29;
  v128[3] = a3;
  v128[4] = a4;
  uint64_t v30 = sub_10001D958(v128);
  (*(void (**)(uint64_t *, uint64_t, uint64_t))(*(void *)(a3 - 8) + 16))(v30, a1, a3);
  LOBYTE(a1) = (*(uint64_t (**)(uint64_t, uint64_t))(a4 + 120))(a3, a4);
  sub_10001D010((uint64_t)v128, (uint64_t)v127);
  if (a1)
  {
    uint64_t v104 = v12;
    uint64_t v106 = v20;
    uint64_t v107 = v19;
    sub_10001CD44(v127, v127[3]);
    unint64_t v31 = *(uint64_t (**)(uint64_t, uint64_t))(a4 + 176);
    uint64_t v105 = a3;
    unint64_t v32 = (void *)v31(a3, a4);
    uint64_t v33 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v35 = v34;
    if (v33 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v35 == v36)
    {

      swift_bridgeObjectRelease_n();
      _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)v127);
    }
    else
    {
      char v39 = _stringCompareWithSmolCheck(_:_:expecting:)();

      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)v127);
      uint64_t v38 = 0;
      if ((v39 & 1) == 0) {
        goto LABEL_54;
      }
    }
    if (qword_101636CD8 != -1) {
      goto LABEL_58;
    }
    while (1)
    {
      OS_dispatch_queue.sync<A>(execute:)();
      char v40 = sub_1010AC008(v124[0]);
      swift_bridgeObjectRelease();
      uint64_t v41 = (uint64_t)v107;
      if ((v40 & 1) == 0)
      {
        uint64_t v38 = 0;
        goto LABEL_54;
      }
      unint64_t v42 = *(void (**)(uint64_t, uint64_t))(a4 + 192);
      uint64_t v43 = v115;
      uint64_t v103 = a4;
      v42(v105, a4);
      sub_10001D074(v43, (uint64_t)v28, &qword_101638CF0);
      uint64_t v44 = v106;
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v21 + 48))(v28, 1, v106) == 1)
      {
        uint64_t v123 = 0;
        long long v122 = 0u;
        long long v121 = 0u;
        swift_retain();
      }
      else
      {
        uint64_t v45 = (uint64_t)v113;
        (*(void (**)(char *, char *, uint64_t))(v21 + 32))(v113, v28, v44);
        swift_retain();
        sub_100AF03FC(v45, (uint64_t)&v121);
        (*(void (**)(uint64_t, uint64_t))(v21 + 8))(v45, v44);
      }
      uint64_t v46 = v116;
      sub_10001DAB4(v115, &qword_101638CF0);
      swift_release();
      if (!*((void *)&v122 + 1))
      {
        sub_10001DAB4((uint64_t)&v121, (uint64_t *)&unk_10164E7C0);
        if (qword_101636EE0 != -1) {
          swift_once();
        }
        uint64_t v69 = type metadata accessor for Logger();
        sub_100010324(v69, (uint64_t)qword_10170E7C8);
        sub_10001D010((uint64_t)v128, (uint64_t)v124);
        char v70 = Logger.logObject.getter();
        os_log_type_t v71 = static os_log_type_t.default.getter();
        BOOL v72 = os_log_type_enabled(v70, v71);
        uint64_t v73 = v106;
        if (v72)
        {
          uint64_t v74 = (uint8_t *)swift_slowAlloc();
          *(void *)&long long v121 = swift_slowAlloc();
          *(_DWORD *)uint64_t v74 = 136315138;
          uint64_t v118 = v74 + 4;
          sub_10001CD44(v124, v125);
          uint64_t v75 = v113;
          (*(void (**)(uint64_t))(*(void *)(*(void *)(v103 + 8) + 8) + 32))(v105);
          sub_100A24444((unint64_t *)&qword_101638B10, (void (*)(uint64_t))&type metadata accessor for UUID);
          uint64_t v76 = dispatch thunk of CustomStringConvertible.description.getter();
          unint64_t v78 = v77;
          (*(void (**)(char *, uint64_t))(v21 + 8))(v75, v73);
          uint64_t v120 = sub_1008FA0F0(v76, v78, (uint64_t *)&v121);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease();
          _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)v124);
          _os_log_impl((void *)&_mh_execute_header, v70, v71, "Can't monitor beacon: %s due to: airpods but missing beacon group.", v74, 0xCu);
          swift_arrayDestroy();
          swift_slowDealloc();
          swift_slowDealloc();
        }
        else
        {
          _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)v124);
        }

        goto LABEL_53;
      }
      sub_10001CEB0(&v121, (uint64_t)v124);
      if (qword_101636CB8 != -1) {
        swift_once();
      }
      uint64_t v47 = v125;
      uint64_t v48 = v126;
      sub_10001CD44(v124, v125);
      uint64_t v49 = (uint64_t)v112;
      (*(void (**)(uint64_t, uint64_t))(v48 + 8))(v47, v48);
      sub_1007B4970(v49, 0, 0, &v121);
      uint64_t v115 = 0;
      unint64_t v28 = (char *)v121;
      uint64_t v51 = *(void (**)(char *, uint64_t))(v21 + 8);
      v21 += 8;
      uint64_t v114 = v21;
      unint64_t v112 = v51;
      v51((char *)v49, v106);
      uint64_t v52 = _swiftEmptyArrayStorage;
      *(void *)&long long v121 = _swiftEmptyArrayStorage;
      a4 = *((void *)v28 + 2);
      if (!a4) {
        break;
      }
      unint64_t v53 = 0;
      uint64_t v54 = _swiftEmptyArrayStorage;
      while (v53 < *((void *)v28 + 2))
      {
        unint64_t v55 = (v118[80] + 32) & ~(unint64_t)v118[80];
        uint64_t v21 = *((void *)v118 + 9);
        sub_100A32584((uint64_t)&v28[v55 + v21 * v53], (uint64_t)v14, (uint64_t (*)(void))type metadata accessor for BeaconObservation);
        sub_1004DCCB0();
        uint64_t v120 = Set.init(minimumCapacity:)();
        sub_100DCDA84(&v119, 37);
        sub_100DCDA84(&v119, 38);
        BOOL v56 = sub_100DC7BFC(v14[*(int *)(v46 + 24)], v120);
        swift_bridgeObjectRelease();
        if (v56)
        {
          sub_100A2E4D4((uint64_t)v14, v117, (uint64_t (*)(void))type metadata accessor for BeaconObservation);
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
            sub_1000B77F0(0, v54[2] + 1, 1);
          }
          uint64_t v54 = (void *)v121;
          unint64_t v58 = *(void *)(v121 + 16);
          unint64_t v57 = *(void *)(v121 + 24);
          if (v58 >= v57 >> 1)
          {
            sub_1000B77F0(v57 > 1, v58 + 1, 1);
            uint64_t v54 = (void *)v121;
          }
          v54[2] = v58 + 1;
          sub_100A2E4D4(v117, (uint64_t)v54 + v55 + v58 * v21, (uint64_t (*)(void))type metadata accessor for BeaconObservation);
          uint64_t v46 = v116;
        }
        else
        {
          sub_100A2E53C((uint64_t)v14, (uint64_t (*)(void))type metadata accessor for BeaconObservation);
        }
        if (a4 == ++v53)
        {
          uint64_t v52 = (void *)v121;
          uint64_t v41 = (uint64_t)v107;
          goto LABEL_29;
        }
      }
      __break(1u);
LABEL_58:
      swift_once();
    }
LABEL_29:
    swift_bridgeObjectRelease();
    sub_100E4D5E0((uint64_t)v52, v41);
    swift_release();
    uint64_t v59 = v111;
    sub_10001D074(v41, v111, (uint64_t *)&unk_101655530);
    if ((*((unsigned int (**)(uint64_t, uint64_t, uint64_t))v118 + 6))(v59, 1, v46) == 1)
    {
      sub_10001DAB4(v59, (uint64_t *)&unk_101655530);
      if (qword_101636EE0 != -1) {
        swift_once();
      }
      uint64_t v60 = type metadata accessor for Logger();
      sub_100010324(v60, (uint64_t)qword_10170E7C8);
      sub_10001D010((uint64_t)v128, (uint64_t)&v121);
      unint64_t v61 = Logger.logObject.getter();
      os_log_type_t v62 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v61, v62))
      {
        uint64_t v63 = (uint8_t *)swift_slowAlloc();
        uint64_t v120 = swift_slowAlloc();
        *(_DWORD *)uint64_t v63 = 136315138;
        uint64_t v118 = v63 + 4;
        sub_10001CD44(&v121, *((uint64_t *)&v122 + 1));
        uint64_t v64 = v113;
        (*(void (**)(uint64_t))(*(void *)(*(void *)(v103 + 8) + 8) + 32))(v105);
        sub_100A24444((unint64_t *)&qword_101638B10, (void (*)(uint64_t))&type metadata accessor for UUID);
        uint64_t v65 = v106;
        uint64_t v66 = dispatch thunk of CustomStringConvertible.description.getter();
        unint64_t v68 = v67;
        v112(v64, v65);
        uint64_t v119 = sub_1008FA0F0(v66, v68, &v120);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)&v121);
        _os_log_impl((void *)&_mh_execute_header, v61, v62, "Can't monitor beacon: %s due to: airpods but missing last BT observation.", v63, 0xCu);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
      }
      else
      {

        _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)&v121);
      }
      goto LABEL_52;
    }
    sub_100A2E4D4(v59, (uint64_t)v104, (uint64_t (*)(void))type metadata accessor for BeaconObservation);
    uint64_t v79 = v108;
    static Date.trustedNow.getter(v108);
    Date.timeIntervalSince(_:)();
    double v81 = v80;
    (*(void (**)(uint64_t, uint64_t))(v109 + 8))(v79, v110);
    OS_dispatch_queue.sync<A>(execute:)();
    sub_1010ABFFC(v121);
    double v83 = v82;
    swift_bridgeObjectRelease();
    if (v83 < v81)
    {
      if (qword_101636EE0 != -1) {
        swift_once();
      }
      uint64_t v84 = type metadata accessor for Logger();
      sub_100010324(v84, (uint64_t)qword_10170E7C8);
      sub_10001D010((uint64_t)v128, (uint64_t)&v121);
      uint64_t v85 = Logger.logObject.getter();
      os_log_type_t v86 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v85, v86))
      {
        uint64_t v87 = swift_slowAlloc();
        uint64_t v120 = swift_slowAlloc();
        *(_DWORD *)uint64_t v87 = 136315650;
        sub_10001CD44(&v121, *((uint64_t *)&v122 + 1));
        uint64_t v88 = v113;
        (*(void (**)(uint64_t))(*(void *)(*(void *)(v103 + 8) + 8) + 32))(v105);
        sub_100A24444((unint64_t *)&qword_101638B10, (void (*)(uint64_t))&type metadata accessor for UUID);
        uint64_t v89 = v106;
        uint64_t v90 = dispatch thunk of CustomStringConvertible.description.getter();
        unint64_t v92 = v91;
        v112(v88, v89);
        uint64_t v119 = sub_1008FA0F0(v90, v92, &v120);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)&v121);
        *(_WORD *)(v87 + 12) = 2048;
        uint64_t v119 = *(void *)&v81;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        *(_WORD *)(v87 + 22) = 2048;
        uint64_t v119 = *(void *)&v83;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        _os_log_impl((void *)&_mh_execute_header, v85, v86, "Can't monitor beacon: %s due to: airpods but expired (%f > %f sec ago)", (uint8_t *)v87, 0x20u);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
      }
      else
      {

        _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)&v121);
      }
      sub_100A2E53C((uint64_t)v104, (uint64_t (*)(void))type metadata accessor for BeaconObservation);
LABEL_52:
      sub_10001DAB4(v41, (uint64_t *)&unk_101655530);
      _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)v124);
LABEL_53:
      uint64_t v38 = 1;
      goto LABEL_54;
    }
    if (qword_101636EE0 != -1) {
      swift_once();
    }
    uint64_t v93 = type metadata accessor for Logger();
    sub_100010324(v93, (uint64_t)qword_10170E7C8);
    sub_10001D010((uint64_t)v128, (uint64_t)&v121);
    BOOL v94 = Logger.logObject.getter();
    os_log_type_t v95 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v94, v95))
    {
      uint64_t v96 = swift_slowAlloc();
      uint64_t v120 = swift_slowAlloc();
      *(_DWORD *)uint64_t v96 = 136315650;
      sub_10001CD44(&v121, *((uint64_t *)&v122 + 1));
      double v97 = v113;
      (*(void (**)(uint64_t))(*(void *)(*(void *)(v103 + 8) + 8) + 32))(v105);
      sub_100A24444((unint64_t *)&qword_101638B10, (void (*)(uint64_t))&type metadata accessor for UUID);
      uint64_t v98 = v106;
      uint64_t v99 = dispatch thunk of CustomStringConvertible.description.getter();
      unint64_t v101 = v100;
      v112(v97, v98);
      uint64_t v119 = sub_1008FA0F0(v99, v101, &v120);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)&v121);
      *(_WORD *)(v96 + 12) = 2048;
      uint64_t v119 = *(void *)&v81;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v96 + 22) = 2048;
      uint64_t v119 = *(void *)&v83;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      _os_log_impl((void *)&_mh_execute_header, v94, v95, "Will monitor beacon: %s due to: airpods, not expired (%f < %f sec ago)", (uint8_t *)v96, 0x20u);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {

      _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)&v121);
    }
    sub_100A2E53C((uint64_t)v104, (uint64_t (*)(void))type metadata accessor for BeaconObservation);
    sub_10001DAB4(v41, (uint64_t *)&unk_101655530);
    uint64_t v37 = v124;
  }
  else
  {
    uint64_t v37 = v127;
  }
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)v37);
  uint64_t v38 = 0;
LABEL_54:
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)v128);
  return v38;
}

id sub_100A27564(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8 = sub_10000588C(&qword_10163B9F0);
  __chkstk_darwin(v8 - 8);
  uint64_t v116 = (uint64_t)&v108 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v117 = type metadata accessor for OwnedBeaconRecord();
  uint64_t v115 = *(void *)(v117 - 8);
  __chkstk_darwin(v117);
  uint64_t v114 = (uint64_t)&v108 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = sub_10000588C(&qword_10163BB20);
  __chkstk_darwin(v11 - 8);
  uint64_t v112 = (uint64_t)&v108 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = type metadata accessor for OwnedBeaconGroup(0);
  uint64_t v111 = *(void *)(v13 - 8);
  __chkstk_darwin(v13);
  uint64_t v110 = (uint64_t)&v108 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = sub_10000588C(&qword_101638CF0);
  __chkstk_darwin(v15 - 8);
  uint64_t v17 = (char *)&v108 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v18 = type metadata accessor for UUID();
  uint64_t v119 = *(void *)(v18 - 8);
  uint64_t v19 = __chkstk_darwin(v18);
  uint64_t v113 = (char *)&v108 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v19);
  uint64_t v22 = (char *)&v108 - v21;
  v125[3] = a3;
  v125[4] = a4;
  uint64_t v23 = sub_10001D958(v125);
  (*(void (**)(uint64_t *, uint64_t, uint64_t))(*(void *)(a3 - 8) + 16))(v23, a1, a3);
  char v24 = sub_100A28A30((uint64_t)v23, a2, a3, a4);
  uint64_t v120 = a3;
  uint64_t v118 = a4;
  if ((v24 & 1) == 0)
  {
    if (qword_101636EE0 != -1) {
      swift_once();
    }
    uint64_t v36 = type metadata accessor for Logger();
    sub_100010324(v36, (uint64_t)qword_10170E7C8);
    sub_10001D010((uint64_t)v125, (uint64_t)v123);
    uint64_t v26 = Logger.logObject.getter();
    os_log_type_t v27 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v26, v27))
    {
      uint64_t v28 = swift_slowAlloc();
      uint64_t v37 = swift_slowAlloc();
      *(_DWORD *)uint64_t v28 = 141558275;
      uint64_t v121 = 1752392040;
      uint64_t v122 = v37;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v28 + 12) = 2081;
      uint64_t v38 = v119;
      sub_10001CD44(v123, v124);
      (*(void (**)(uint64_t))(*(void *)(*(void *)(v118 + 8) + 8) + 32))(v120);
      sub_100A24444((unint64_t *)&qword_101638B10, (void (*)(uint64_t))&type metadata accessor for UUID);
      uint64_t v39 = dispatch thunk of CustomStringConvertible.description.getter();
      char v40 = v22;
      unint64_t v42 = v41;
      (*(void (**)(char *, uint64_t))(v38 + 8))(v40, v18);
      uint64_t v121 = sub_1008FA0F0(v39, v42, &v122);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)v123);
      uint64_t v35 = "Can't monitor beacon: %{private,mask.hash}s due to: unsupported beacon.";
      goto LABEL_11;
    }
LABEL_47:
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)v123);
    goto LABEL_48;
  }
  if (sub_1012D4B88(a3, a4))
  {
    if (qword_101636EE0 != -1) {
      swift_once();
    }
    uint64_t v25 = type metadata accessor for Logger();
    sub_100010324(v25, (uint64_t)qword_10170E7C8);
    sub_10001D010((uint64_t)v125, (uint64_t)v123);
    uint64_t v26 = Logger.logObject.getter();
    os_log_type_t v27 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v26, v27))
    {
      uint64_t v28 = swift_slowAlloc();
      uint64_t v29 = swift_slowAlloc();
      *(_DWORD *)uint64_t v28 = 141558275;
      uint64_t v121 = 1752392040;
      uint64_t v122 = v29;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v28 + 12) = 2081;
      uint64_t v30 = v119;
      sub_10001CD44(v123, v124);
      (*(void (**)(uint64_t))(*(void *)(*(void *)(v118 + 8) + 8) + 32))(v120);
      sub_100A24444((unint64_t *)&qword_101638B10, (void (*)(uint64_t))&type metadata accessor for UUID);
      uint64_t v31 = dispatch thunk of CustomStringConvertible.description.getter();
      unint64_t v32 = v22;
      unint64_t v34 = v33;
      (*(void (**)(char *, uint64_t))(v30 + 8))(v32, v18);
      uint64_t v121 = sub_1008FA0F0(v31, v34, &v122);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)v123);
      uint64_t v35 = "Can't monitor beacon: %{private,mask.hash}s due to: this device.";
LABEL_11:
      _os_log_impl((void *)&_mh_execute_header, v26, v27, v35, (uint8_t *)v28, 0x16u);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
LABEL_48:

LABEL_49:
      uint64_t v79 = 0;
      goto LABEL_50;
    }
    goto LABEL_47;
  }
  uint64_t v108 = v22;
  uint64_t v109 = v18;
  swift_retain();
  CurrentValueSubject.value.getter();
  swift_release();
  uint64_t v43 = v123[0];
  if (qword_101637188 != -1) {
    swift_once();
  }
  uint64_t v44 = (void *)qword_10170EE68;
  uint64_t v45 = self;
  id v46 = [v45 sharedInstance];
  unsigned __int8 v47 = [v46 isInternalBuild];

  if (v47)
  {
    NSString v48 = String._bridgeToObjectiveC()();
    unsigned int v49 = [v44 BOOLForKey:v48];

    uint64_t v50 = v119;
    if (v49)
    {
      id v51 = [v45 sharedInstance];
      LOBYTE(v49) = [v51 isInternalBuild];
    }
    uint64_t v52 = v108;
  }
  else
  {
    LOBYTE(v49) = 0;
    uint64_t v52 = v108;
    uint64_t v50 = v119;
  }
  if ((*(uint64_t (**)(uint64_t, uint64_t))(a4 + 120))(v120, a4))
  {
    if (v43 > 1) {
      char v53 = 1;
    }
    else {
      char v53 = v49;
    }
    if ((v53 & 1) == 0)
    {
      uint64_t v57 = v109;
      if (qword_101636EE0 != -1) {
        swift_once();
      }
      uint64_t v58 = type metadata accessor for Logger();
      sub_100010324(v58, (uint64_t)qword_10170E7C8);
      sub_10001D010((uint64_t)v125, (uint64_t)v123);
      uint64_t v26 = Logger.logObject.getter();
      os_log_type_t v27 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v26, v27))
      {
        uint64_t v28 = swift_slowAlloc();
        uint64_t v59 = swift_slowAlloc();
        *(_DWORD *)uint64_t v28 = 141558275;
        uint64_t v121 = 1752392040;
        uint64_t v122 = v59;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        *(_WORD *)(v28 + 12) = 2081;
        sub_10001CD44(v123, v124);
        (*(void (**)(uint64_t))(*(void *)(*(void *)(v118 + 8) + 8) + 32))(v120);
        sub_100A24444((unint64_t *)&qword_101638B10, (void (*)(uint64_t))&type metadata accessor for UUID);
        uint64_t v60 = dispatch thunk of CustomStringConvertible.description.getter();
        unint64_t v61 = v52;
        unint64_t v63 = v62;
        (*(void (**)(char *, uint64_t))(v50 + 8))(v61, v57);
        uint64_t v121 = sub_1008FA0F0(v60, v63, &v122);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)v123);
        uint64_t v35 = "Can't monitor beacon: %{private,mask.hash}s due to: airpods beacon but less than 2 adv buffers.";
        goto LABEL_11;
      }
      goto LABEL_47;
    }
    (*(void (**)(uint64_t, uint64_t))(a4 + 192))(v120, a4);
    uint64_t v54 = v109;
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v50 + 48))(v17, 1, v109) == 1)
    {
      unint64_t v55 = &qword_101638CF0;
      uint64_t v56 = (uint64_t)v17;
LABEL_32:
      sub_10001DAB4(v56, v55);
      goto LABEL_33;
    }
    uint64_t v64 = (uint64_t)v113;
    (*(void (**)(void))(v50 + 32))();
    uint64_t v65 = v112;
    sub_100AE75E0(v64, v112);
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v111 + 48))(v65, 1, v13) == 1)
    {
      (*(void (**)(uint64_t, uint64_t))(v50 + 8))(v64, v54);
      unint64_t v55 = &qword_10163BB20;
      uint64_t v56 = v65;
      goto LABEL_32;
    }
    uint64_t v97 = v110;
    sub_100A2E4D4(v65, v110, type metadata accessor for OwnedBeaconGroup);
    if ((sub_1004CF378() & 1) == 0)
    {
      if (qword_101636EE0 != -1) {
        swift_once();
      }
      uint64_t v98 = type metadata accessor for Logger();
      sub_100010324(v98, (uint64_t)qword_10170E7C8);
      sub_10001D010((uint64_t)v125, (uint64_t)v123);
      uint64_t v99 = Logger.logObject.getter();
      os_log_type_t v100 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v99, v100))
      {
        uint64_t v101 = swift_slowAlloc();
        uint64_t v102 = swift_slowAlloc();
        *(_DWORD *)uint64_t v101 = 141558275;
        uint64_t v121 = 1752392040;
        uint64_t v122 = v102;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        *(_WORD *)(v101 + 12) = 2081;
        uint64_t v119 = v101 + 14;
        sub_10001CD44(v123, v124);
        (*(void (**)(uint64_t))(*(void *)(*(void *)(a4 + 8) + 8) + 32))(v120);
        sub_100A24444((unint64_t *)&qword_101638B10, (void (*)(uint64_t))&type metadata accessor for UUID);
        uint64_t v103 = dispatch thunk of CustomStringConvertible.description.getter();
        uint64_t v104 = v52;
        unint64_t v106 = v105;
        uint64_t v107 = *(void (**)(char *, uint64_t))(v50 + 8);
        v107(v104, v54);
        uint64_t v121 = sub_1008FA0F0(v103, v106, &v122);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)v123);
        _os_log_impl((void *)&_mh_execute_header, v99, v100, "Can't monitor beacon: %{private,mask.hash}s due to: group pairing incomplete.", (uint8_t *)v101, 0x16u);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();

        sub_100A2E53C(v110, type metadata accessor for OwnedBeaconGroup);
        v107(v113, v54);
      }
      else
      {

        _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)v123);
        sub_100A2E53C(v97, type metadata accessor for OwnedBeaconGroup);
        (*(void (**)(uint64_t, uint64_t))(v50 + 8))(v64, v54);
      }
      goto LABEL_49;
    }
    sub_100A2E53C(v97, type metadata accessor for OwnedBeaconGroup);
    (*(void (**)(uint64_t, uint64_t))(v50 + 8))(v64, v54);
  }
LABEL_33:
  uint64_t v66 = v116;
  sub_100A1208C(v116);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v115 + 48))(v66, 1, v117) == 1)
  {
    sub_10001DAB4(v66, &qword_10163B9F0);
LABEL_39:
    uint64_t v72 = v109;
    goto LABEL_40;
  }
  uint64_t v67 = v114;
  sub_100A2E4D4(v66, v114, (uint64_t (*)(void))type metadata accessor for OwnedBeaconRecord);
  uint64_t v68 = v120;
  (*(void (**)(uint64_t, uint64_t))(a4 + 16))(v120, a4);
  char v69 = sub_100691C14();
  swift_bridgeObjectRelease();
  if ((v69 & 1) == 0)
  {
    sub_100A2E53C(v67, (uint64_t (*)(void))type metadata accessor for OwnedBeaconRecord);
    goto LABEL_39;
  }
  uint64_t v70 = *(void *)(*(void *)(a4 + 8) + 8);
  os_log_type_t v71 = *(void (**)(uint64_t, uint64_t))(v70 + 32);
  v71(v68, v70);
  sub_100A24444((unint64_t *)&qword_10163B8F0, (void (*)(uint64_t))&type metadata accessor for UUID);
  uint64_t v72 = v109;
  char v73 = dispatch thunk of static Equatable.== infix(_:_:)();
  uint64_t v74 = *(void (**)(char *, uint64_t))(v50 + 8);
  v74(v52, v72);
  if ((v73 & 1) == 0)
  {
    if (qword_101636EE0 != -1) {
      swift_once();
    }
    uint64_t v86 = type metadata accessor for Logger();
    sub_100010324(v86, (uint64_t)qword_10170E7C8);
    sub_10001D010((uint64_t)v125, (uint64_t)v123);
    uint64_t v87 = Logger.logObject.getter();
    os_log_type_t v88 = static os_log_type_t.default.getter();
    int v89 = v88;
    if (os_log_type_enabled(v87, v88))
    {
      uint64_t v90 = swift_slowAlloc();
      uint64_t v91 = swift_slowAlloc();
      uint64_t v119 = v91;
      *(_DWORD *)uint64_t v90 = 141558275;
      uint64_t v121 = 1752392040;
      uint64_t v122 = v91;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v90 + 12) = 2081;
      uint64_t v117 = v90 + 14;
      sub_10001CD44(v123, v124);
      unint64_t v92 = v108;
      LODWORD(v118) = v89;
      v71(v120, v70);
      sub_100A24444((unint64_t *)&qword_101638B10, (void (*)(uint64_t))&type metadata accessor for UUID);
      uint64_t v93 = v109;
      uint64_t v94 = dispatch thunk of CustomStringConvertible.description.getter();
      unint64_t v96 = v95;
      v74(v92, v93);
      uint64_t v121 = sub_1008FA0F0(v94, v96, &v122);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)v123);
      _os_log_impl((void *)&_mh_execute_header, v87, (os_log_type_t)v118, "Can't monitor beacon: %{private,mask.hash}s due to: watch beacon, but not actively paired.", (uint8_t *)v90, 0x16u);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      sub_100A2E53C(v114, (uint64_t (*)(void))type metadata accessor for OwnedBeaconRecord);
    }
    else
    {

      _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)v123);
      sub_100A2E53C(v67, (uint64_t (*)(void))type metadata accessor for OwnedBeaconRecord);
    }
    goto LABEL_49;
  }
  sub_100A2E53C(v67, (uint64_t (*)(void))type metadata accessor for OwnedBeaconRecord);
  uint64_t v52 = v108;
  uint64_t v50 = v119;
LABEL_40:
  id result = [self defaultWorkspace];
  if (result)
  {
    uint64_t v76 = result;
    NSString v77 = String._bridgeToObjectiveC()();
    unsigned __int8 v78 = [v76 applicationIsInstalled:v77];

    if (v78)
    {
      uint64_t v79 = 1;
LABEL_50:
      _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)v125);
      return (id)v79;
    }
    if (qword_101636EE0 != -1) {
      swift_once();
    }
    uint64_t v80 = type metadata accessor for Logger();
    sub_100010324(v80, (uint64_t)qword_10170E7C8);
    sub_10001D010((uint64_t)v125, (uint64_t)v123);
    uint64_t v26 = Logger.logObject.getter();
    os_log_type_t v27 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v26, v27))
    {
      uint64_t v28 = swift_slowAlloc();
      uint64_t v81 = swift_slowAlloc();
      *(_DWORD *)uint64_t v28 = 141558275;
      uint64_t v121 = 1752392040;
      uint64_t v122 = v81;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v28 + 12) = 2081;
      sub_10001CD44(v123, v124);
      (*(void (**)(uint64_t))(*(void *)(*(void *)(v118 + 8) + 8) + 32))(v120);
      sub_100A24444((unint64_t *)&qword_101638B10, (void (*)(uint64_t))&type metadata accessor for UUID);
      uint64_t v82 = dispatch thunk of CustomStringConvertible.description.getter();
      double v83 = v52;
      unint64_t v85 = v84;
      (*(void (**)(char *, uint64_t))(v50 + 8))(v83, v72);
      uint64_t v121 = sub_1008FA0F0(v82, v85, &v122);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)v123);
      uint64_t v35 = "Can't monitor beacon: %{private,mask.hash}s due to: no Find My app installed.";
      goto LABEL_11;
    }
    goto LABEL_47;
  }
  __break(1u);
  return result;
}

uint64_t sub_100A28A30(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7 = *(void *)(a3 - 8);
  __chkstk_darwin(a1);
  uint64_t v9 = (char *)&v20 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *))(v7 + 16))(v9);
  uint64_t v10 = (void *)(*(uint64_t (**)(uint64_t, uint64_t))(a4 + 176))(a3, a4);
  uint64_t v11 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v13 = v12;
  if (v11 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v13 == v14)
  {

    swift_bridgeObjectRelease();
    goto LABEL_9;
  }
  char v16 = _stringCompareWithSmolCheck(_:_:expecting:)();

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  char v17 = 0;
  if ((v16 & 1) == 0)
  {
    uint64_t v18 = sub_100A03E9C((uint64_t)v9, *(char **)(a2 + 280), a3, a4);
    if (sub_100DC7494(8u, (uint64_t)v18))
    {
      char v17 = sub_100DC7494(9u, (uint64_t)v18);
LABEL_10:
      swift_bridgeObjectRelease();
      goto LABEL_11;
    }
LABEL_9:
    char v17 = 0;
    goto LABEL_10;
  }
LABEL_11:
  (*(void (**)(char *, uint64_t))(v7 + 8))(v9, a3);
  return v17 & 1;
}

void *sub_100A28BFC(uint64_t a1, uint64_t a2)
{
  id result = _swiftEmptyArrayStorage;
  uint64_t v25 = _swiftEmptyArrayStorage;
  uint64_t v4 = *(void *)(a1 + 16);
  if (v4)
  {
    uint64_t v6 = a1 + 32;
    do
    {
      sub_10001D010(v6, (uint64_t)&v22);
      uint64_t v7 = v23;
      uint64_t v8 = v24;
      uint64_t v9 = sub_10001CD44(&v22, v23);
      if (sub_100A2616C((uint64_t)v9, a2, v7, v8))
      {
        _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)&v22);
      }
      else
      {
        sub_10001CEB0(&v22, (uint64_t)v19);
        uint64_t v10 = v25;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        {
          sub_1000B7570(0, v10[2] + 1, 1);
          uint64_t v10 = v25;
        }
        unint64_t v12 = v10[2];
        unint64_t v11 = v10[3];
        if (v12 >= v11 >> 1) {
          sub_1000B7570(v11 > 1, v12 + 1, 1);
        }
        uint64_t v13 = v20;
        uint64_t v14 = v21;
        uint64_t v15 = sub_1000BD078((uint64_t)v19, v20);
        __chkstk_darwin(v15);
        char v17 = &v19[-((v16 + 15) & 0xFFFFFFFFFFFFFFF0)];
        (*(void (**)(unsigned char *))(v18 + 16))(v17);
        sub_1006985B0(v12, (uint64_t)v17, (uint64_t *)&v25, v13, v14);
        _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)v19);
      }
      v6 += 40;
      --v4;
    }
    while (v4);
    return v25;
  }
  return result;
}

void *sub_100A28DD8(uint64_t a1)
{
  uint64_t v3 = sub_10000588C(&qword_101655620) - 8;
  uint64_t v4 = __chkstk_darwin(v3);
  uint64_t v6 = (char *)v17 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v4);
  uint64_t v9 = (double *)((char *)v17 - v8);
  id result = _swiftEmptyArrayStorage;
  uint64_t v19 = _swiftEmptyArrayStorage;
  uint64_t v11 = *(void *)(a1 + 16);
  if (v11)
  {
    v17[1] = v1;
    uint64_t v12 = *(void *)(v7 + 72);
    unint64_t v18 = (*(unsigned __int8 *)(v7 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80);
    uint64_t v13 = a1 + v18;
    uint64_t v14 = _swiftEmptyArrayStorage;
    do
    {
      sub_10001D074(v13, (uint64_t)v9, &qword_101655620);
      if (*v9 <= 0.5)
      {
        sub_10001DAB4((uint64_t)v9, &qword_101655620);
      }
      else
      {
        sub_10001D608((uint64_t)v9, (uint64_t)v6, &qword_101655620);
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          sub_1000B849C(0, v14[2] + 1, 1);
        }
        uint64_t v14 = v19;
        unint64_t v16 = v19[2];
        unint64_t v15 = v19[3];
        if (v16 >= v15 >> 1)
        {
          sub_1000B849C(v15 > 1, v16 + 1, 1);
          uint64_t v14 = v19;
        }
        void v14[2] = v16 + 1;
        sub_10001D608((uint64_t)v6, (uint64_t)v14 + v18 + v16 * v12, &qword_101655620);
      }
      v13 += v12;
      --v11;
    }
    while (v11);
    return v19;
  }
  return result;
}

void *sub_100A28FCC(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a1 + 16);
  id result = _swiftEmptyArrayStorage;
  if (v3)
  {
    specialized ContiguousArray.reserveCapacity(_:)();
    uint64_t v6 = (void *)(a1 + 32);
    do
    {
      uint64_t v7 = v6[3];
      uint64_t v8 = v6[4];
      uint64_t v9 = sub_10001CD44(v6, v7);
      sub_100B2B68C((uint64_t)v9, a2, v7, v8);
      specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
      specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
      specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      specialized ContiguousArray._endMutation()();
      v6 += 5;
      --v3;
    }
    while (v3);
    return _swiftEmptyArrayStorage;
  }
  return result;
}

void *sub_100A2909C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v7 = type metadata accessor for UUID();
  uint64_t v44 = *(void *)(v7 - 8);
  uint64_t v8 = *(void *)(v44 + 64);
  __chkstk_darwin(v7);
  uint64_t v9 = (char *)v32 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = sub_10000588C(&qword_1016555A0);
  __chkstk_darwin(v10);
  uint64_t v14 = (char *)v32 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = *(void *)(a1 + 16);
  id result = _swiftEmptyArrayStorage;
  if (v15)
  {
    v32[1] = v3;
    uint64_t v33 = a2;
    unsigned __int8 v47 = _swiftEmptyArrayStorage;
    uint64_t v43 = v11;
    uint64_t v17 = a3;
    uint64_t v18 = v12;
    specialized ContiguousArray.reserveCapacity(_:)();
    uint64_t v42 = type metadata accessor for SafeLocation();
    unint64_t v19 = (*(unsigned __int8 *)(*(void *)(v42 - 8) + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(v42 - 8) + 80);
    uint64_t v40 = *(void *)(*(void *)(v42 - 8) + 72);
    uint64_t v20 = *(void (**)(char *, uint64_t, uint64_t))(v44 + 16);
    uint64_t v38 = v7;
    uint64_t v39 = v20;
    uint64_t v21 = a1 + v19;
    uint64_t v41 = v44 + 16;
    uint64_t v36 = v44 + 32;
    uint64_t v37 = v8 + 7;
    uint64_t v34 = v17;
    uint64_t v35 = (void (**)(char *, uint64_t))(v18 + 8);
    uint64_t v22 = v7;
    do
    {
      uint64_t v45 = v21;
      v39(v9, v21 + *(int *)(v42 + 20), v22);
      uint64_t v23 = v9;
      uint64_t v24 = v44;
      unint64_t v25 = (*(unsigned __int8 *)(v44 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v44 + 80);
      unint64_t v26 = (v37 + v25) & 0xFFFFFFFFFFFFFFF8;
      uint64_t v27 = swift_allocObject();
      uint64_t v28 = v15;
      *(void *)(v27 + 16) = v33;
      uint64_t v29 = *(void (**)(unint64_t, char *, uint64_t))(v24 + 32);
      uint64_t v9 = v23;
      v29(v27 + v25, v23, v22);
      *(void *)(v27 + v26) = v34;
      swift_retain();
      swift_bridgeObjectRetain();
      sub_10000588C((uint64_t *)&unk_101655548);
      sub_100062734(&qword_1016555A8, (uint64_t *)&unk_101655548);
      Deferred.init(createPublisher:)();
      sub_100062734(&qword_1016555B0, &qword_1016555A0);
      uint64_t v30 = v43;
      uint64_t v31 = Publisher.eraseToAnyPublisher()();
      (*v35)(v14, v30);
      uint64_t v46 = v31;
      sub_10000588C(&qword_101655570);
      sub_100062734(&qword_101655580, &qword_101655570);
      Publisher.eraseToAnyPublisher()();
      swift_release();
      specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
      specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
      specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      specialized ContiguousArray._endMutation()();
      uint64_t v21 = v45 + v40;
      --v15;
    }
    while (v28 != 1);
    return v47;
  }
  return result;
}

void *sub_100A294B0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v20 = sub_10000588C(&qword_101655678);
  uint64_t v9 = *(void *)(v20 - 8);
  __chkstk_darwin(v20);
  uint64_t v11 = (char *)v18 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = *(void *)(a1 + 16);
  id result = _swiftEmptyArrayStorage;
  if (v12)
  {
    v18[1] = v4;
    uint64_t v23 = _swiftEmptyArrayStorage;
    specialized ContiguousArray.reserveCapacity(_:)();
    uint64_t v14 = a1 + 32;
    unint64_t v19 = (void (**)(char *, uint64_t))(v9 + 8);
    do
    {
      sub_10001D010(v14, (uint64_t)v22);
      uint64_t v15 = swift_allocObject();
      *(void *)(v15 + 16) = a2;
      long long v16 = *(_OWORD *)(a3 + 16);
      *(_OWORD *)(v15 + 24) = *(_OWORD *)a3;
      *(_OWORD *)(v15 + 40) = v16;
      *(_OWORD *)(v15 + 56) = *(_OWORD *)(a3 + 32);
      *(void *)(v15 + 72) = *(void *)(a3 + 48);
      *(void *)(v15 + 80) = a4;
      sub_10001CEB0(v22, v15 + 88);
      swift_retain();
      sub_100A3219C(a3);
      swift_retain();
      sub_10000588C(&qword_101655680);
      sub_100062734(&qword_101655688, &qword_101655680);
      Deferred.init(createPublisher:)();
      sub_100062734(&qword_101655690, &qword_101655678);
      uint64_t v17 = v20;
      uint64_t v21 = Publisher.eraseToAnyPublisher()();
      (*v19)(v11, v17);
      specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
      specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
      specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      specialized ContiguousArray._endMutation()();
      v14 += 40;
      --v12;
    }
    while (v12);
    return v23;
  }
  return result;
}

void *sub_100A29728(uint64_t a1, void *a2)
{
  uint64_t v51 = type metadata accessor for Date();
  uint64_t v5 = *(void *)(v51 - 8);
  __chkstk_darwin(v51);
  uint64_t v7 = (char *)&v46 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = sub_10000588C(&qword_101655620);
  uint64_t v49 = *(void *)(v8 - 8);
  uint64_t v50 = v8;
  __chkstk_darwin(v8);
  uint64_t v10 = (double *)((char *)&v46 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0));
  int64_t v11 = *(void *)(a1 + 16);
  uint64_t v12 = _swiftEmptyArrayStorage;
  if (v11)
  {
    uint64_t v46 = v2;
    uint64_t v52 = _swiftEmptyArrayStorage;
    sub_1000B849C(0, v11, 0);
    uint64_t v13 = (int *)type metadata accessor for SafeLocation();
    uint64_t v14 = a1
        + ((*(unsigned __int8 *)(*((void *)v13 - 1) + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*((void *)v13 - 1) + 80));
    uint64_t v48 = *(void *)(*((void *)v13 - 1) + 72);
    unsigned __int8 v47 = (void (**)(char *, uint64_t))(v5 + 8);
    do
    {
      double v15 = *(double *)(v14 + v13[8]);
      double v16 = *(double *)(v14 + v13[9]);
      uint64_t v17 = v13[10];
      double v18 = *(double *)(v14 + v17);
      Date.init()();
      id v19 = objc_allocWithZone((Class)CLLocation);
      Class isa = Date._bridgeToObjectiveC()().super.isa;
      id v21 = [v19 initWithCoordinate:isa altitude:v15 horizontalAccuracy:v16 verticalAccuracy:0.0 course:v18 courseAccuracy:v18 speed:v18 speedAccuracy:-1.0 timestamp:0xBFF0000000000000];

      (*v47)(v7, v51);
      [v21 setReferenceFrame:*(unsigned __int8 *)(v14 + v13[11])];
      [v21 coordinate];
      double v23 = v22;
      double v25 = v24;

      double v26 = *(double *)(v14 + v17);
      UUID.uuidString.getter();
      id v27 = objc_allocWithZone((Class)CLCircularRegion);
      NSString v28 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease();
      id v29 = [v27 initWithCenter:v28 radius:v23 identifier:v25];

      sub_100F13EE0(v29);
      double v31 = v30;
      [a2 radius];
      double v33 = v32;
      [a2 radius];
      double v35 = v33 * v34 * 3.14159265;
      [v29 radius];
      double v37 = v36;
      [v29 radius];
      double v39 = v38;

      double v40 = v37 * v39 * 3.14159265;
      if (v40 >= v35) {
        double v40 = v35;
      }
      if (v40 <= 0.0) {
        double v41 = 0.0;
      }
      else {
        double v41 = v31 / v40;
      }
      uint64_t v42 = (uint64_t)v10 + *(int *)(v50 + 48);
      *uint64_t v10 = v41;
      sub_100A32584(v14, v42, (uint64_t (*)(void))type metadata accessor for SafeLocation);
      uint64_t v12 = v52;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        sub_1000B849C(0, v12[2] + 1, 1);
        uint64_t v12 = v52;
      }
      unint64_t v44 = v12[2];
      unint64_t v43 = v12[3];
      if (v44 >= v43 >> 1)
      {
        sub_1000B849C(v43 > 1, v44 + 1, 1);
        uint64_t v12 = v52;
      }
      long long v12[2] = v44 + 1;
      sub_10001D608((uint64_t)v10, (uint64_t)v12+ ((*(unsigned __int8 *)(v49 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v49 + 80))+ *(void *)(v49 + 72) * v44, &qword_101655620);
      v14 += v48;
      --v11;
    }
    while (v11);
  }
  return v12;
}

uint64_t sub_100A29BAC(uint64_t a1, int64_t a2)
{
  if (a1 < 0)
  {
    __break(1u);
    goto LABEL_27;
  }
  unint64_t v4 = *v2;
  int64_t v5 = *(void *)(*v2 + 16);
  if (v5 < a2)
  {
LABEL_27:
    __break(1u);
    goto LABEL_28;
  }
  uint64_t v7 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
LABEL_28:
    __break(1u);
    goto LABEL_29;
  }
  uint64_t v8 = a1 - a2;
  if (__OFSUB__(0, v7))
  {
LABEL_29:
    __break(1u);
    goto LABEL_30;
  }
  int64_t v9 = v5 - v7;
  if (__OFADD__(v5, v8))
  {
LABEL_30:
    __break(1u);
LABEL_31:
    __break(1u);
LABEL_32:
    __break(1u);
    goto LABEL_33;
  }
  int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  if (!isUniquelyReferenced_nonNull_native || v9 > *(void *)(v4 + 24) >> 1)
  {
    if (v5 <= v9) {
      int64_t v11 = v5 + v8;
    }
    else {
      int64_t v11 = v5;
    }
    unint64_t v4 = sub_100A6F668(isUniquelyReferenced_nonNull_native, v11, 1, v4);
  }
  uint64_t v12 = *(void *)(type metadata accessor for UUID() - 8);
  unint64_t v13 = v4 + ((*(unsigned __int8 *)(v12 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v12 + 80));
  uint64_t v14 = *(void *)(v12 + 72);
  uint64_t v15 = v14 * a1;
  unint64_t v16 = v13 + v14 * a1;
  uint64_t result = swift_arrayDestroy();
  if (!v7) {
    goto LABEL_25;
  }
  uint64_t v18 = *(void *)(v4 + 16);
  uint64_t v19 = v18 - a2;
  if (__OFSUB__(v18, a2)) {
    goto LABEL_31;
  }
  if ((v19 & 0x8000000000000000) == 0)
  {
    if (v15 < v14 * a2 || v16 >= v13 + v14 * a2 + v19 * v14)
    {
      uint64_t result = swift_arrayInitWithTakeFrontToBack();
    }
    else if (v15 != v14 * a2)
    {
      uint64_t result = swift_arrayInitWithTakeBackToFront();
    }
    uint64_t v21 = *(void *)(v4 + 16);
    BOOL v22 = __OFADD__(v21, v8);
    uint64_t v23 = v21 - v7;
    if (!v22)
    {
      *(void *)(v4 + 16) = v23;
LABEL_25:
      *uint64_t v2 = v4;
      return result;
    }
    goto LABEL_32;
  }
LABEL_33:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_100A29D94(uint64_t a1, int64_t a2)
{
  if (a1 < 0)
  {
    __break(1u);
    goto LABEL_22;
  }
  unint64_t v4 = *(void **)v2;
  int64_t v5 = *(void *)(*(void *)v2 + 16);
  if (v5 < a2)
  {
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  uint64_t v7 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
LABEL_23:
    __break(1u);
    goto LABEL_24;
  }
  uint64_t v8 = a1 - a2;
  if (__OFSUB__(0, v7))
  {
LABEL_24:
    __break(1u);
    goto LABEL_25;
  }
  int64_t v9 = v5 - v7;
  if (__OFADD__(v5, v8))
  {
LABEL_25:
    __break(1u);
LABEL_26:
    __break(1u);
LABEL_27:
    __break(1u);
    goto LABEL_28;
  }
  int isUniquelyReferenced_nonNull_native = (void *)swift_isUniquelyReferenced_nonNull_native();
  if (!isUniquelyReferenced_nonNull_native || v9 > v4[3] >> 1)
  {
    if (v5 <= v9) {
      int64_t v11 = v5 + v8;
    }
    else {
      int64_t v11 = v5;
    }
    unint64_t v4 = sub_100A6EA38(isUniquelyReferenced_nonNull_native, v11, 1, v4);
  }
  uint64_t result = swift_arrayDestroy();
  if (!v7) {
    goto LABEL_20;
  }
  uint64_t v13 = v4[2];
  BOOL v14 = __OFSUB__(v13, a2);
  uint64_t v15 = v13 - a2;
  if (v14) {
    goto LABEL_26;
  }
  if ((v15 & 0x8000000000000000) == 0)
  {
    unint64_t v16 = (char *)&v4[2 * a2 + 4];
    if (a1 != a2 || &v4[2 * a1 + 4] >= (void *)&v16[16 * v15]) {
      uint64_t result = (uint64_t)memmove(&v4[2 * a1 + 4], v16, 16 * v15);
    }
    uint64_t v17 = v4[2];
    BOOL v14 = __OFADD__(v17, v8);
    uint64_t v18 = v17 - v7;
    if (!v14)
    {
      v4[2] = v18;
LABEL_20:
      *(void *)uint64_t v2 = v4;
      return result;
    }
    goto LABEL_27;
  }
LABEL_28:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_100A29F00(uint64_t a1, uint64_t a2)
{
  return sub_100A301F8(a1, a2, (uint64_t (*)(void))sub_100A702C8, &qword_1016554F8);
}

uint64_t sub_100A29F20(uint64_t a1, uint64_t a2)
{
  if (a1 < 0)
  {
    __break(1u);
  }
  else
  {
    uint64_t v2 = a2;
    uint64_t v4 = a1;
    if (!(*v3 >> 62))
    {
      if (*(void *)((*v3 & 0xFFFFFFFFFFFFFF8) + 0x10) >= a2) {
        goto LABEL_4;
      }
LABEL_29:
      __break(1u);
      goto LABEL_30;
    }
  }
  swift_bridgeObjectRetain();
  uint64_t v18 = _CocoaArrayWrapper.endIndex.getter();
  swift_bridgeObjectRelease();
  if (v18 < v2) {
    goto LABEL_29;
  }
LABEL_4:
  uint64_t v6 = v2 - v4;
  if (__OFSUB__(v2, v4))
  {
LABEL_30:
    __break(1u);
    goto LABEL_31;
  }
  uint64_t v5 = v4 - v2;
  if (__OFSUB__(0, v6))
  {
LABEL_31:
    __break(1u);
LABEL_32:
    swift_bridgeObjectRetain();
    uint64_t v19 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    uint64_t v8 = v19 + v5;
    if (!__OFADD__(v19, v5)) {
      goto LABEL_8;
    }
LABEL_34:
    __break(1u);
    goto LABEL_35;
  }
  if (*v3 >> 62) {
    goto LABEL_32;
  }
  uint64_t v7 = *(void *)((*v3 & 0xFFFFFFFFFFFFFF8) + 0x10);
  uint64_t v8 = v7 - v6;
  if (__OFADD__(v7, v5)) {
    goto LABEL_34;
  }
LABEL_8:
  unint64_t v9 = *v3;
  int isUniquelyReferenced_nonNull_bridgeObject = swift_isUniquelyReferenced_nonNull_bridgeObject();
  *uint64_t v3 = v9;
  if (!isUniquelyReferenced_nonNull_bridgeObject
    || (v9 & 0x8000000000000000) != 0
    || (v9 & 0x4000000000000000) != 0
    || (uint64_t v11 = v9 & 0xFFFFFFFFFFFFFF8, v8 > *(void *)((v9 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1))
  {
    if (!(v9 >> 62))
    {
LABEL_13:
      swift_bridgeObjectRetain();
      unint64_t v9 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
      swift_bridgeObjectRelease();
      *uint64_t v3 = v9;
      uint64_t v11 = v9 & 0xFFFFFFFFFFFFFF8;
      goto LABEL_14;
    }
LABEL_35:
    swift_bridgeObjectRetain();
    _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    goto LABEL_13;
  }
LABEL_14:
  type metadata accessor for ServerInteractionController(0);
  swift_arrayDestroy();
  if (v5)
  {
    if (v9 >> 62)
    {
      swift_bridgeObjectRetain();
      uint64_t v20 = _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
      uint64_t v13 = v20 - v2;
      if (!__OFSUB__(v20, v2))
      {
LABEL_17:
        if (v13 < 0)
        {
LABEL_42:
          uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
          __break(1u);
          return result;
        }
        BOOL v14 = (const void *)(v11 + 32 + 8 * v2);
        if (v4 != v2 || v11 + 32 + 8 * v4 >= (unint64_t)v14 + 8 * v13) {
          memmove((void *)(v11 + 32 + 8 * v4), v14, 8 * v13);
        }
        if (!(v9 >> 62))
        {
          uint64_t v15 = *(void *)(v11 + 16);
          uint64_t v16 = v15 + v5;
          if (!__OFADD__(v15, v5))
          {
LABEL_23:
            *(void *)(v11 + 16) = v16;
            goto LABEL_24;
          }
          goto LABEL_41;
        }
LABEL_39:
        swift_bridgeObjectRetain();
        uint64_t v21 = _CocoaArrayWrapper.endIndex.getter();
        swift_bridgeObjectRelease();
        uint64_t v16 = v21 + v5;
        if (!__OFADD__(v21, v5)) {
          goto LABEL_23;
        }
LABEL_41:
        __break(1u);
        goto LABEL_42;
      }
    }
    else
    {
      uint64_t v12 = *(void *)(v11 + 16);
      uint64_t v13 = v12 - v2;
      if (!__OFSUB__(v12, v2)) {
        goto LABEL_17;
      }
    }
    __break(1u);
    goto LABEL_39;
  }
LABEL_24:

  return specialized Array._endMutation()();
}

void sub_100A2A200(uint64_t a1, uint64_t a2, void (**a3)(void, void, void))
{
  uint64_t v5 = swift_allocObject();
  *(void *)(v5 + 16) = a3;
  uint64_t My = type metadata accessor for Feature.FindMy();
  void v13[3] = My;
  v13[4] = sub_100A24444((unint64_t *)&qword_101653E00, (void (*)(uint64_t))&type metadata accessor for Feature.FindMy);
  uint64_t v7 = sub_10001D958(v13);
  (*(void (**)(uint64_t *, void, uint64_t))(*(void *)(My - 8) + 104))(v7, enum case for Feature.FindMy.separationAlerts(_:), My);
  _Block_copy(a3);
  LOBYTE(My) = isFeatureEnabled(_:)();
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)v13);
  if (My)
  {
    uint64_t v8 = swift_allocObject();
    swift_unknownObjectWeakInit();
    unint64_t v9 = (void *)swift_allocObject();
    void v9[2] = v8;
    v9[3] = sub_100134008;
    v9[4] = v5;
    void v9[5] = a1;
    swift_retain();
    swift_retain();
    uint64_t v10 = swift_bridgeObjectRetain();
    sub_100A07038(v10, (uint64_t)sub_100A32574, (uint64_t)v9, (uint64_t)&unk_1015E37D8, (uint64_t)sub_100A2E5F8, (uint64_t)&unk_1015E37F0);
    swift_release();
    swift_release();
    swift_release();
  }
  else
  {
    type metadata accessor for SPSeparationMonitoringError(0);
    sub_1004A0BC8((uint64_t)_swiftEmptyArrayStorage);
    sub_100A24444(&qword_1016386A0, type metadata accessor for SPSeparationMonitoringError);
    _BridgedStoredNSError.init(_:userInfo:)();
    uint64_t v11 = (void *)v13[0];
    uint64_t v12 = (void *)_convertErrorToNSError(_:)();
    ((void (**)(void, void, void *))a3)[2](a3, 0, v12);
    swift_release();
  }
}

void sub_100A2A484(uint64_t a1, uint64_t a2, void (**a3)(void, void, void))
{
  uint64_t v5 = swift_allocObject();
  *(void *)(v5 + 16) = a3;
  uint64_t My = type metadata accessor for Feature.FindMy();
  v11[3] = My;
  v11[4] = sub_100A24444((unint64_t *)&qword_101653E00, (void (*)(uint64_t))&type metadata accessor for Feature.FindMy);
  uint64_t v7 = sub_10001D958(v11);
  (*(void (**)(uint64_t *, void, uint64_t))(*(void *)(My - 8) + 104))(v7, enum case for Feature.FindMy.separationAlerts(_:), My);
  _Block_copy(a3);
  LOBYTE(My) = isFeatureEnabled(_:)();
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)v11);
  if (My)
  {
    uint64_t v8 = swift_allocObject();
    *(void *)(v8 + 16) = sub_100134008;
    *(void *)(v8 + 24) = v5;
    swift_retain();
    sub_100A07038(a1, (uint64_t)sub_100A32AC0, v8, (uint64_t)&unk_1015E35A8, (uint64_t)sub_100A2E3B4, (uint64_t)&unk_1015E35C0);
    swift_release();
    swift_release();
  }
  else
  {
    type metadata accessor for SPSeparationMonitoringError(0);
    sub_1004A0BC8((uint64_t)_swiftEmptyArrayStorage);
    sub_100A24444(&qword_1016386A0, type metadata accessor for SPSeparationMonitoringError);
    _BridgedStoredNSError.init(_:userInfo:)();
    unint64_t v9 = (void *)v11[0];
    uint64_t v10 = (void *)_convertErrorToNSError(_:)();
    ((void (**)(void, void, void *))a3)[2](a3, 0, v10);
    swift_release();
  }
}

void sub_100A2A6CC(void *a1, uint64_t a2, void (**a3)(void, void, void))
{
  uint64_t v5 = type metadata accessor for SafeLocation();
  __chkstk_darwin(v5 - 8);
  uint64_t v7 = (char *)&v15[-1] - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = swift_allocObject();
  *(void *)(v8 + 16) = a3;
  uint64_t My = type metadata accessor for Feature.FindMy();
  v15[3] = My;
  v15[4] = sub_100A24444((unint64_t *)&qword_101653E00, (void (*)(uint64_t))&type metadata accessor for Feature.FindMy);
  uint64_t v10 = sub_10001D958(v15);
  (*(void (**)(uint64_t *, void, uint64_t))(*(void *)(My - 8) + 104))(v10, enum case for Feature.FindMy.separationAlerts(_:), My);
  _Block_copy(a3);
  LOBYTE(My) = isFeatureEnabled(_:)();
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)v15);
  if (My)
  {
    sub_100F1114C(a1, v7);
    uint64_t v11 = swift_allocObject();
    *(void *)(v11 + 16) = sub_100134008;
    *(void *)(v11 + 24) = v8;
    swift_retain();
    sub_100A073C8((uint64_t)v7, 0, (uint64_t)sub_100A32AC0, v11);
    swift_release();
    sub_100A2E53C((uint64_t)v7, (uint64_t (*)(void))type metadata accessor for SafeLocation);
    swift_release();
  }
  else
  {
    type metadata accessor for SPSeparationMonitoringError(0);
    uint64_t v14 = 1;
    sub_1004A0BC8((uint64_t)_swiftEmptyArrayStorage);
    sub_100A24444(&qword_1016386A0, type metadata accessor for SPSeparationMonitoringError);
    _BridgedStoredNSError.init(_:userInfo:)();
    uint64_t v12 = (void *)v15[0];
    uint64_t v13 = (void *)_convertErrorToNSError(_:)();
    ((void (**)(void, void, void *))a3)[2](a3, 0, v13);
    swift_release();
  }
}

void sub_100A2A960(uint64_t a1, uint64_t a2, void (**a3)(void, void, void))
{
  uint64_t v5 = swift_allocObject();
  *(void *)(v5 + 16) = a3;
  uint64_t My = type metadata accessor for Feature.FindMy();
  v11[3] = My;
  v11[4] = sub_100A24444((unint64_t *)&qword_101653E00, (void (*)(uint64_t))&type metadata accessor for Feature.FindMy);
  uint64_t v7 = sub_10001D958(v11);
  (*(void (**)(uint64_t *, void, uint64_t))(*(void *)(My - 8) + 104))(v7, enum case for Feature.FindMy.separationAlerts(_:), My);
  _Block_copy(a3);
  LOBYTE(My) = isFeatureEnabled(_:)();
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)v11);
  if (My)
  {
    uint64_t v8 = swift_allocObject();
    *(void *)(v8 + 16) = sub_100134008;
    *(void *)(v8 + 24) = v5;
    swift_retain();
    sub_100A07794(a1, (uint64_t)sub_100A32AC0, v8);
    swift_release();
    swift_release();
  }
  else
  {
    type metadata accessor for SPSeparationMonitoringError(0);
    sub_1004A0BC8((uint64_t)_swiftEmptyArrayStorage);
    sub_100A24444(&qword_1016386A0, type metadata accessor for SPSeparationMonitoringError);
    _BridgedStoredNSError.init(_:userInfo:)();
    unint64_t v9 = (void *)v11[0];
    uint64_t v10 = (void *)_convertErrorToNSError(_:)();
    ((void (**)(void, void, void *))a3)[2](a3, 0, v10);
    swift_release();
  }
}

void sub_100A2AB84(void *a1, uint64_t a2, void (**a3)(void, void, void))
{
  uint64_t v5 = type metadata accessor for SafeLocation();
  __chkstk_darwin(v5 - 8);
  uint64_t v7 = (char *)&v15[-1] - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = swift_allocObject();
  *(void *)(v8 + 16) = a3;
  uint64_t My = type metadata accessor for Feature.FindMy();
  v15[3] = My;
  v15[4] = sub_100A24444((unint64_t *)&qword_101653E00, (void (*)(uint64_t))&type metadata accessor for Feature.FindMy);
  uint64_t v10 = sub_10001D958(v15);
  (*(void (**)(uint64_t *, void, uint64_t))(*(void *)(My - 8) + 104))(v10, enum case for Feature.FindMy.separationAlerts(_:), My);
  _Block_copy(a3);
  LOBYTE(My) = isFeatureEnabled(_:)();
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)v15);
  if (My)
  {
    sub_100F1114C(a1, v7);
    uint64_t v11 = swift_allocObject();
    *(void *)(v11 + 16) = sub_100134008;
    *(void *)(v11 + 24) = v8;
    swift_retain();
    sub_100A07C64((uint64_t)v7, (uint64_t)sub_100A32AC0, v11);
    swift_release();
    sub_100A2E53C((uint64_t)v7, (uint64_t (*)(void))type metadata accessor for SafeLocation);
    swift_release();
  }
  else
  {
    type metadata accessor for SPSeparationMonitoringError(0);
    uint64_t v14 = 1;
    sub_1004A0BC8((uint64_t)_swiftEmptyArrayStorage);
    sub_100A24444(&qword_1016386A0, type metadata accessor for SPSeparationMonitoringError);
    _BridgedStoredNSError.init(_:userInfo:)();
    uint64_t v12 = (void *)v15[0];
    uint64_t v13 = (void *)_convertErrorToNSError(_:)();
    ((void (**)(void, void, void *))a3)[2](a3, 0, v13);
    swift_release();
  }
}

void sub_100A2AE14(uint64_t a1, uint64_t a2, uint64_t a3, void (**a4)(void, void, void))
{
  uint64_t v7 = swift_allocObject();
  *(void *)(v7 + 16) = a4;
  uint64_t My = type metadata accessor for Feature.FindMy();
  void v13[3] = My;
  v13[4] = sub_100A24444((unint64_t *)&qword_101653E00, (void (*)(uint64_t))&type metadata accessor for Feature.FindMy);
  unint64_t v9 = sub_10001D958(v13);
  (*(void (**)(uint64_t *, void, uint64_t))(*(void *)(My - 8) + 104))(v9, enum case for Feature.FindMy.separationAlerts(_:), My);
  _Block_copy(a4);
  LOBYTE(My) = isFeatureEnabled(_:)();
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)v13);
  if (My)
  {
    uint64_t v10 = swift_allocObject();
    *(void *)(v10 + 16) = sub_100134008;
    *(void *)(v10 + 24) = v7;
    swift_retain();
    sub_100A080D8(a1, a2, (uint64_t)sub_100A32AC0, v10, (uint64_t)&unk_1015E4070, (uint64_t)sub_100A2FDC4, (uint64_t)&unk_1015E4088);
    swift_release();
    swift_release();
  }
  else
  {
    type metadata accessor for SPSeparationMonitoringError(0);
    sub_1004A0BC8((uint64_t)_swiftEmptyArrayStorage);
    sub_100A24444(&qword_1016386A0, type metadata accessor for SPSeparationMonitoringError);
    _BridgedStoredNSError.init(_:userInfo:)();
    uint64_t v11 = (void *)v13[0];
    uint64_t v12 = (void *)_convertErrorToNSError(_:)();
    ((void (**)(void, void, void *))a4)[2](a4, 0, v12);
    swift_release();
  }
}

void sub_100A2B06C(uint64_t a1, uint64_t a2, uint64_t a3, void (**a4)(void, void, void))
{
  uint64_t v7 = swift_allocObject();
  *(void *)(v7 + 16) = a4;
  uint64_t My = type metadata accessor for Feature.FindMy();
  void v13[3] = My;
  v13[4] = sub_100A24444((unint64_t *)&qword_101653E00, (void (*)(uint64_t))&type metadata accessor for Feature.FindMy);
  unint64_t v9 = sub_10001D958(v13);
  (*(void (**)(uint64_t *, void, uint64_t))(*(void *)(My - 8) + 104))(v9, enum case for Feature.FindMy.separationAlerts(_:), My);
  _Block_copy(a4);
  LOBYTE(My) = isFeatureEnabled(_:)();
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)v13);
  if (My)
  {
    uint64_t v10 = swift_allocObject();
    *(void *)(v10 + 16) = sub_100134008;
    *(void *)(v10 + 24) = v7;
    swift_retain();
    sub_100A080D8(a1, a2, (uint64_t)sub_100A32AC0, v10, (uint64_t)&unk_1015E3558, (uint64_t)sub_100A2E244, (uint64_t)&unk_1015E3570);
    swift_release();
    swift_release();
  }
  else
  {
    type metadata accessor for SPSeparationMonitoringError(0);
    sub_1004A0BC8((uint64_t)_swiftEmptyArrayStorage);
    sub_100A24444(&qword_1016386A0, type metadata accessor for SPSeparationMonitoringError);
    _BridgedStoredNSError.init(_:userInfo:)();
    uint64_t v11 = (void *)v13[0];
    uint64_t v12 = (void *)_convertErrorToNSError(_:)();
    ((void (**)(void, void, void *))a4)[2](a4, 0, v12);
    swift_release();
  }
}

uint64_t sub_100A2B2C4(uint64_t a1, uint64_t a2)
{
  if (*(void *)(*sub_10001CD44((void *)(a1 + OBJC_IVAR____TtC12searchpartyd23BeaconManagerTrampoline_implementation), *(void *)(a1 + OBJC_IVAR____TtC12searchpartyd23BeaconManagerTrampoline_implementation + 24))+ 216))
  {
    swift_retain();
    CurrentValueSubject.value.getter();
    swift_release();
    uint64_t v3 = qword_1013748B0[v5];
  }
  else
  {
    uint64_t v3 = 0;
  }
  return (*(uint64_t (**)(uint64_t, uint64_t))(a2 + 16))(a2, v3);
}

void sub_100A2B35C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for SafeLocation();
  char v5 = *(void **)(v4 - 8);
  uint64_t v6 = __chkstk_darwin(v4 - 8);
  uint64_t v8 = (char *)&v41 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  uint64_t v10 = (char *)&v41 - v9;
  uint64_t v11 = sub_10000588C(&qword_101638CF0);
  __chkstk_darwin(v11 - 8);
  uint64_t v13 = (char *)&v41 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t My = type metadata accessor for Feature.FindMy();
  v45[3] = My;
  v45[4] = sub_100A24444((unint64_t *)&qword_101653E00, (void (*)(uint64_t))&type metadata accessor for Feature.FindMy);
  uint64_t v15 = sub_10001D958(v45);
  (*(void (**)(uint64_t *, void, uint64_t))(*(void *)(My - 8) + 104))(v15, enum case for Feature.FindMy.separationAlerts(_:), My);
  LOBYTE(My) = isFeatureEnabled(_:)();
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)v45);
  if ((My & 1) == 0)
  {
    type metadata accessor for SPSeparationMonitoringError(0);
    uint64_t v44 = 1;
    sub_1004A0BC8((uint64_t)_swiftEmptyArrayStorage);
    sub_100A24444(&qword_1016386A0, type metadata accessor for SPSeparationMonitoringError);
    _BridgedStoredNSError.init(_:userInfo:)();
    double v26 = (void *)v45[0];
    sub_10001D4B0(0, (unint64_t *)&unk_101653D70);
    sub_10012E2E4((unint64_t *)&qword_1016556C0, (unint64_t *)&unk_101653D70);
    Class isa = Set._bridgeToObjectiveC()().super.isa;
    NSString v28 = (void *)_convertErrorToNSError(_:)();
    (*(void (**)(uint64_t, Class, void *))(a2 + 16))(a2, isa, v28);

    return;
  }
  uint64_t v42 = a2;
  sub_10001CD44((void *)(a1 + OBJC_IVAR____TtC12searchpartyd23BeaconManagerTrampoline_implementation), *(void *)(a1 + OBJC_IVAR____TtC12searchpartyd23BeaconManagerTrampoline_implementation + 24));
  uint64_t v16 = type metadata accessor for UUID();
  uint64_t v17 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v16 - 8) + 56);
  double v41 = v13;
  v17(v13, 1, 1, v16);
  uint64_t v18 = sub_100B6C090();
  uint64_t v43 = v18[2];
  if (v43)
  {
    unint64_t v19 = 0;
    uint64_t v20 = _swiftEmptyArrayStorage;
    while (v19 < v18[2])
    {
      unint64_t v21 = (*((unsigned __int8 *)v5 + 80) + 32) & ~(unint64_t)*((unsigned __int8 *)v5 + 80);
      uint64_t v22 = v5[9];
      sub_100A32584((uint64_t)v18 + v21 + v22 * v19, (uint64_t)v10, (uint64_t (*)(void))type metadata accessor for SafeLocation);
      sub_100A2E4D4((uint64_t)v10, (uint64_t)v8, (uint64_t (*)(void))type metadata accessor for SafeLocation);
      char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      v45[0] = (uint64_t)v20;
      if ((isUniquelyReferenced_nonNull_native & 1) == 0)
      {
        sub_1000B79B0(0, v20[2] + 1, 1);
        uint64_t v20 = (void *)v45[0];
      }
      unint64_t v25 = v20[2];
      unint64_t v24 = v20[3];
      if (v25 >= v24 >> 1)
      {
        sub_1000B79B0(v24 > 1, v25 + 1, 1);
        uint64_t v20 = (void *)v45[0];
      }
      ++v19;
      v20[2] = v25 + 1;
      sub_100A2E4D4((uint64_t)v8, (uint64_t)v20 + v21 + v25 * v22, (uint64_t (*)(void))type metadata accessor for SafeLocation);
      if (v43 == v19) {
        goto LABEL_13;
      }
    }
    __break(1u);
  }
  else
  {
    uint64_t v20 = _swiftEmptyArrayStorage;
LABEL_13:
    uint64_t v29 = swift_bridgeObjectRelease();
    __chkstk_darwin(v29);
    uint64_t v30 = (uint64_t)v41;
    *(&v41 - 2) = v41;
    uint64_t v31 = sub_1000A4684((uint64_t (*)(char *))sub_1006CD4DC, &v41 - 4, (uint64_t)v20);
    char v5 = sub_100655DC4(v31);
    swift_bridgeObjectRelease();
    sub_10001DAB4(v30, &qword_101638CF0);
    if (qword_101636EE0 == -1) {
      goto LABEL_14;
    }
  }
  swift_once();
LABEL_14:
  uint64_t v32 = type metadata accessor for Logger();
  sub_100010324(v32, (uint64_t)qword_10170E7C8);
  swift_bridgeObjectRetain_n();
  double v33 = Logger.logObject.getter();
  os_log_type_t v34 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v33, v34))
  {
    double v35 = (uint8_t *)swift_slowAlloc();
    v45[0] = swift_slowAlloc();
    *(_DWORD *)double v35 = 136315138;
    sub_10001D4B0(0, (unint64_t *)&unk_101653D70);
    swift_bridgeObjectRetain();
    uint64_t v36 = Array.description.getter();
    unint64_t v38 = v37;
    swift_bridgeObjectRelease();
    uint64_t v44 = sub_1008FA0F0(v36, v38, v45);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v33, v34, "Known safe locations: %s", v35, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {

    swift_bridgeObjectRelease_n();
  }
  uint64_t v39 = v42;
  sub_101158F5C((unint64_t)v5);
  swift_bridgeObjectRelease();
  sub_10001D4B0(0, (unint64_t *)&unk_101653D70);
  sub_10012E2E4((unint64_t *)&qword_1016556C0, (unint64_t *)&unk_101653D70);
  Class v40 = Set._bridgeToObjectiveC()().super.isa;
  (*(void (**)(uint64_t, Class, void))(v39 + 16))(v39, v40, 0);
  swift_bridgeObjectRelease();
}

void sub_100A2BA50(uint64_t a1, void *a2, char *a3)
{
  uint64_t v6 = sub_10000588C(&qword_10164B290);
  __chkstk_darwin(v6 - 8);
  uint64_t v8 = (char *)&v75 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (!*(void *)(a1 + 216))
  {
    _Block_copy(a3);
    _Block_copy(a3);
    _Block_copy(a3);
LABEL_9:
    if (qword_101636EE0 == -1) {
      goto LABEL_10;
    }
    goto LABEL_56;
  }
  _Block_copy(a3);
  _Block_copy(a3);
  _Block_copy(a3);
  swift_retain();
  CurrentValueSubject.value.getter();
  swift_release();
  if (v83 != 7) {
    goto LABEL_9;
  }
  if (qword_101636CD8 != -1) {
    swift_once();
  }
  unsigned __int8 v78 = a2;
  OS_dispatch_queue.sync<A>(execute:)();
  uint64_t v9 = (void *)sub_1010AB900(v83);
  swift_bridgeObjectRelease();
  uint64_t v10 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v12 = v11;
  if (v10 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v12 == v13)
  {

    swift_bridgeObjectRelease_n();
  }
  else
  {
    char v19 = _stringCompareWithSmolCheck(_:_:expecting:)();

    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if ((v19 & 1) == 0)
    {
      if (qword_101636EE0 != -1) {
        swift_once();
      }
      uint64_t v68 = type metadata accessor for Logger();
      sub_100010324(v68, (uint64_t)qword_10170E7C8);
      char v69 = Logger.logObject.getter();
      os_log_type_t v70 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v69, v70))
      {
        os_log_type_t v71 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)os_log_type_t v71 = 0;
        _os_log_impl((void *)&_mh_execute_header, v69, v70, "BA service not enabled.", v71, 2u);
        swift_slowDealloc();
      }

      _Block_copy(a3);
      uint64_t v72 = v78;
      unint64_t v73 = sub_100A08628((uint64_t)_swiftEmptyArrayStorage);
      sub_101159418(v73);
      swift_bridgeObjectRelease();
      sub_10001D4B0(0, (unint64_t *)&unk_10164DC30);
      sub_10012E2E4((unint64_t *)&qword_1016556B0, (unint64_t *)&unk_10164DC30);
      Class isa = Set._bridgeToObjectiveC()().super.isa;
      (*((void (**)(char *, Class))a3 + 2))(a3, isa);
      swift_bridgeObjectRelease();

      _Block_release(a3);
      goto LABEL_54;
    }
  }
  uint64_t v20 = sub_100B6CAA8();
  uint64_t v21 = v20[2];
  uint64_t v22 = type metadata accessor for LeashRecord();
  uint64_t v23 = *(void *)(v22 - 8);
  if (v21)
  {
    sub_100A32584((uint64_t)v20+ ((*(unsigned __int8 *)(*(void *)(v22 - 8) + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(v22 - 8) + 80)), (uint64_t)v8, (uint64_t (*)(void))type metadata accessor for LeashRecord);
    uint64_t v24 = 0;
  }
  else
  {
    uint64_t v24 = 1;
  }
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v23 + 56))(v8, v24, 1, v22);
  swift_bridgeObjectRelease();
  int v30 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v23 + 48))(v8, 1, v22);
  uint64_t v76 = a3;
  if (v30 == 1)
  {
    sub_10001DAB4((uint64_t)v8, &qword_10164B290);
    uint64_t v31 = _swiftEmptyArrayStorage;
  }
  else
  {
    uint64_t v31 = *(void **)&v8[*(int *)(v22 + 24)];
    swift_bridgeObjectRetain();
    sub_100A2E53C((uint64_t)v8, (uint64_t (*)(void))type metadata accessor for LeashRecord);
  }
  swift_retain();
  NSString v77 = v31;
  a2 = sub_1006AE11C((uint64_t)v31);
  swift_release();
  uint64_t v32 = _swiftEmptyArrayStorage;
  uint64_t v86 = _swiftEmptyArrayStorage;
  a3 = (char *)a2[2];
  swift_retain();
  if (a3)
  {
    uint64_t v79 = 0;
    double v33 = 0;
    uint64_t v34 = (uint64_t)(a2 + 4);
    double v35 = a2;
    while ((unint64_t)v33 < a2[2])
    {
      sub_10001D010(v34, (uint64_t)&v83);
      uint64_t v36 = v84;
      uint64_t v37 = v85;
      unint64_t v38 = sub_10001CD44(&v83, v84);
      if (sub_100A27564((uint64_t)v38, a1, v36, v37))
      {
        sub_10001CEB0(&v83, (uint64_t)v80);
        uint64_t v39 = v86;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        {
          sub_1000B7570(0, v39[2] + 1, 1);
          uint64_t v39 = v86;
        }
        unint64_t v41 = v39[2];
        unint64_t v40 = v39[3];
        if (v41 >= v40 >> 1) {
          sub_1000B7570(v40 > 1, v41 + 1, 1);
        }
        uint64_t v42 = v81;
        uint64_t v43 = v82;
        uint64_t v44 = sub_1000BD078((uint64_t)v80, v81);
        __chkstk_darwin(v44);
        uint64_t v46 = (char *)&v75 - ((v45 + 15) & 0xFFFFFFFFFFFFFFF0);
        (*(void (**)(char *))(v47 + 16))(v46);
        sub_1006985B0(v41, (uint64_t)v46, (uint64_t *)&v86, v42, v43);
        _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)v80);
        a2 = v35;
      }
      else
      {
        _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)&v83);
      }
      ++v33;
      v34 += 40;
      if (a3 == v33)
      {
        uint64_t v32 = v86;
        goto LABEL_40;
      }
    }
    __break(1u);
LABEL_56:
    swift_once();
LABEL_10:
    uint64_t v14 = type metadata accessor for Logger();
    sub_100010324(v14, (uint64_t)qword_10170E7C8);
    swift_retain_n();
    uint64_t v15 = Logger.logObject.getter();
    os_log_type_t v16 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v15, v16))
    {
      uint64_t v17 = (uint8_t *)swift_slowAlloc();
      *(void *)&long long v83 = swift_slowAlloc();
      *(_DWORD *)uint64_t v17 = 136315138;
      if (*(void *)(a1 + 216))
      {
        swift_retain();
        CurrentValueSubject.value.getter();
        swift_release();
        char v18 = v80[0];
      }
      else
      {
        char v18 = 8;
      }
      LOBYTE(v80[0]) = v18;
      sub_10000588C(&qword_1016556B8);
      uint64_t v25 = String.init<A>(describing:)();
      v80[0] = sub_1008FA0F0(v25, v26, (uint64_t *)&v83);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_release_n();
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v15, v16, "Not a finder device for separation monitoring, reason: %s.", v17, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      if (*(void *)(a1 + 216))
      {
LABEL_20:
        swift_retain();
        CurrentValueSubject.value.getter();
        swift_release();
        if (!*(void *)(a1 + 216)
          || (swift_retain(), CurrentValueSubject.value.getter(), swift_release(), v83 != 6))
        {
          _Block_copy(a3);
          unint64_t v28 = sub_100A08628((uint64_t)_swiftEmptyArrayStorage);
          sub_101159418(v28);
          swift_bridgeObjectRelease();
          sub_10001D4B0(0, (unint64_t *)&unk_10164DC30);
          sub_10012E2E4((unint64_t *)&qword_1016556B0, (unint64_t *)&unk_10164DC30);
          Class v29 = Set._bridgeToObjectiveC()().super.isa;
          (*((void (**)(char *, Class))a3 + 2))(a3, v29);
          swift_bridgeObjectRelease();

          _Block_release(a3);
          goto LABEL_54;
        }
      }
    }
    else
    {

      swift_release_n();
      if (*(void *)(a1 + 216)) {
        goto LABEL_20;
      }
    }
    type metadata accessor for SPSeparationMonitoringError(0);
    v80[0] = 20;
    sub_1004A0BC8((uint64_t)_swiftEmptyArrayStorage);
    sub_100A24444(&qword_1016386A0, type metadata accessor for SPSeparationMonitoringError);
    _BridgedStoredNSError.init(_:userInfo:)();
    id v27 = (void *)v83;
    (*((void (**)(char *, void))a3 + 2))(a3, 0);

    goto LABEL_54;
  }
LABEL_40:
  swift_release();
  swift_bridgeObjectRelease();
  swift_retain();
  uint64_t v48 = sub_100A28BFC((uint64_t)v32, a1);
  swift_release();
  swift_release();
  uint64_t v79 = sub_100A05D84((uint64_t)v48);
  if (qword_101636EE0 != -1) {
    swift_once();
  }
  uint64_t v49 = type metadata accessor for Logger();
  sub_100010324(v49, (uint64_t)qword_10170E7C8);
  swift_bridgeObjectRetain();
  uint64_t v50 = Logger.logObject.getter();
  os_log_type_t v51 = static os_log_type_t.default.getter();
  BOOL v52 = os_log_type_enabled(v50, v51);
  uint64_t v75 = v48;
  if (v52)
  {
    char v53 = (uint8_t *)swift_slowAlloc();
    *(void *)&long long v83 = swift_slowAlloc();
    *(_DWORD *)char v53 = 136315138;
    type metadata accessor for UUID();
    swift_bridgeObjectRetain();
    uint64_t v54 = Array.description.getter();
    unint64_t v56 = v55;
    swift_bridgeObjectRelease();
    v80[0] = sub_1008FA0F0(v54, v56, (uint64_t *)&v83);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v50, v51, "All beacons that were configured for separation monitoring: %s", v53, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {

    swift_bridgeObjectRelease_n();
  }
  swift_bridgeObjectRetain();
  uint64_t v57 = Logger.logObject.getter();
  os_log_type_t v58 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v57, v58))
  {
    uint64_t v59 = (uint8_t *)swift_slowAlloc();
    *(void *)&long long v83 = swift_slowAlloc();
    *(_DWORD *)uint64_t v59 = 136315138;
    type metadata accessor for UUID();
    swift_bridgeObjectRetain();
    uint64_t v60 = Array.description.getter();
    unint64_t v62 = v61;
    swift_bridgeObjectRelease();
    v80[0] = sub_1008FA0F0(v60, v62, (uint64_t *)&v83);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v57, v58, "Beacons that can be monitored for separation from this device: %s", v59, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {

    swift_bridgeObjectRelease_n();
  }
  uint64_t v63 = (uint64_t)v75;
  a3 = v76;
  uint64_t v64 = v78;
  _Block_copy(v76);
  unint64_t v65 = sub_100A08628(v63);
  sub_101159418(v65);
  swift_bridgeObjectRelease();
  uint64_t v66 = v64;
  sub_10001D4B0(0, (unint64_t *)&unk_10164DC30);
  sub_10012E2E4((unint64_t *)&qword_1016556B0, (unint64_t *)&unk_10164DC30);
  Class v67 = Set._bridgeToObjectiveC()().super.isa;
  (*((void (**)(char *, Class))a3 + 2))(a3, v67);
  swift_bridgeObjectRelease();

  _Block_release(a3);
  swift_bridgeObjectRelease();
LABEL_54:
  _Block_release(a3);
  _Block_release(a3);
  _Block_release(a3);
}

void sub_100A2C7D0(char *a1, void (**a2)(void, void))
{
  uint64_t My = type metadata accessor for Feature.FindMy();
  v7[3] = My;
  v7[4] = sub_100A24444((unint64_t *)&qword_101653E00, (void (*)(uint64_t))&type metadata accessor for Feature.FindMy);
  char v5 = sub_10001D958(v7);
  (*(void (**)(uint64_t *, void, uint64_t))(*(void *)(My - 8) + 104))(v5, enum case for Feature.FindMy.separationAlerts(_:), My);
  _Block_copy(a2);
  LOBYTE(My) = isFeatureEnabled(_:)();
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)v7);
  if (My)
  {
    uint64_t v6 = *sub_10001CD44(&a1[OBJC_IVAR____TtC12searchpartyd23BeaconManagerTrampoline_implementation], *(void *)&a1[OBJC_IVAR____TtC12searchpartyd23BeaconManagerTrampoline_implementation + 24]);
    _Block_copy(a2);
    sub_100A2BA50(v6, a1, (char *)a2);
    _Block_release(a2);
  }
  else
  {
    a2[2](a2, 0);
  }
  _Block_release(a2);
}

void sub_100A2C90C(void *a1, uint64_t a2, uint64_t a3)
{
  if (qword_101636EE0 != -1) {
    swift_once();
  }
  uint64_t v6 = type metadata accessor for Logger();
  sub_100010324(v6, (uint64_t)qword_10170E7C8);
  id v7 = a1;
  uint64_t v8 = Logger.logObject.getter();
  os_log_type_t v9 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v8, v9))
  {
    uint64_t v10 = (uint8_t *)swift_slowAlloc();
    uint64_t v11 = (void *)swift_slowAlloc();
    aBlock[0] = v7;
    *(_DWORD *)uint64_t v10 = 138412290;
    id v12 = v7;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *uint64_t v11 = v7;

    _os_log_impl((void *)&_mh_execute_header, v8, v9, "Requesting reverse geocoded address for location: %@", v10, 0xCu);
    sub_10000588C((uint64_t *)&unk_101638EA0);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
  }
  uint64_t v13 = self;
  id v14 = [v13 sharedService];
  [v7 coordinate];
  double v16 = v15;
  [v7 coordinate];
  id v18 = [objc_allocWithZone((Class)GEOLocation) initWithGEOCoordinate:v16, v17];
  if (v18)
  {
    unsigned int v19 = [v7 referenceFrame];
    if (v19 > 2) {
      uint64_t v20 = 0;
    }
    else {
      uint64_t v20 = dword_1013748F0[v19];
    }
    [v18 setReferenceFrame:v20];
  }
  id v21 = [v13 sharedService];
  if (v21)
  {
    uint64_t v22 = v21;
    id v23 = [v14 defaultTraits];
    id v24 = [v22 ticketForReverseGeocodeLocation:v18 traits:v23];

    if (v24)
    {
      uint64_t v25 = (void *)swift_allocObject();
      v25[2] = a2;
      v25[3] = a3;
      v25[4] = v7;
      aBlock[4] = sub_100A30A24;
      void aBlock[5] = v25;
      aBlock[0] = _NSConcreteStackBlock;
      aBlock[1] = 1107296256;
      uint64_t aBlock[2] = sub_100A11FF4;
      aBlock[3] = &unk_1015E43D0;
      unint64_t v26 = _Block_copy(aBlock);
      id v27 = v7;
      swift_unknownObjectRetain();
      swift_retain();
      swift_release();
      [v24 submitWithHandler:v26 networkActivity:0];
      swift_unknownObjectRelease_n();

      _Block_release(v26);
    }
    else
    {
    }
  }
  else
  {
    __break(1u);
  }
}

void sub_100A2CCC4(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, void (*a5)(uint64_t, void *), uint64_t a6)
{
  uint64_t v99 = a4;
  uint64_t v93 = a2;
  uint64_t v10 = type metadata accessor for Date();
  uint64_t v11 = *(void *)(v10 - 8);
  uint64_t v12 = __chkstk_darwin(v10);
  uint64_t v90 = &v83[-((v13 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __chkstk_darwin(v12);
  double v15 = &v83[-v14];
  uint64_t v16 = sub_10000588C(&qword_10164B290);
  __chkstk_darwin(v16 - 8);
  uint64_t v98 = &v83[-((v17 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v97 = type metadata accessor for LeashRecord();
  uint64_t v18 = *(void *)(v97 - 8);
  __chkstk_darwin(v97);
  uint64_t v20 = &v83[-((v19 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v21 = swift_allocObject();
  uint64_t v95 = a6;
  unint64_t v96 = a5;
  *(void *)(v21 + 16) = a5;
  *(void *)(v21 + 24) = a6;
  uint64_t v22 = qword_101636EE0;
  swift_retain();
  if (v22 != -1) {
    swift_once();
  }
  uint64_t v23 = type metadata accessor for Logger();
  uint64_t v24 = sub_100010324(v23, (uint64_t)qword_10170E7C8);
  swift_bridgeObjectRetain_n();
  id v25 = a3;
  uint64_t v94 = v24;
  unint64_t v26 = Logger.logObject.getter();
  os_log_type_t v27 = static os_log_type_t.default.getter();
  int v28 = v27;
  BOOL v29 = os_log_type_enabled(v26, v27);
  uint64_t v91 = a1;
  id v89 = v25;
  if (v29)
  {
    uint64_t v30 = swift_slowAlloc();
    unint64_t v92 = v15;
    uint64_t v31 = v30;
    uint64_t v85 = (void *)swift_slowAlloc();
    v101[0] = v85;
    *(_DWORD *)uint64_t v31 = 136315650;
    int v84 = v28;
    type metadata accessor for UUID();
    uint64_t v86 = v11;
    sub_100A24444(&qword_10163BC60, (void (*)(uint64_t))&type metadata accessor for UUID);
    uint64_t v87 = v10;
    swift_bridgeObjectRetain();
    uint64_t v32 = Set.description.getter();
    unint64_t v34 = v33;
    swift_bridgeObjectRelease();
    uint64_t v100 = sub_1008FA0F0(v32, v34, (uint64_t *)v101);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease();
    os_log_type_t v88 = v20;
    *(_WORD *)(v31 + 12) = 2080;
    uint64_t v100 = v93;
    type metadata accessor for SPSeparationEventType(0);
    uint64_t v35 = String.init<A>(describing:)();
    uint64_t v100 = sub_1008FA0F0(v35, v36, (uint64_t *)v101);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    *(_WORD *)(v31 + 22) = 2080;
    id v37 = v25;
    id v38 = [v37 description];
    uint64_t v39 = v21;
    uint64_t v40 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    unint64_t v42 = v41;

    uint64_t v43 = v40;
    uint64_t v21 = v39;
    uint64_t v100 = sub_1008FA0F0(v43, v42, (uint64_t *)v101);
    uint64_t v11 = v86;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    uint64_t v10 = v87;
    uint64_t v20 = v88;
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v26, (os_log_type_t)v84, "Received separation event request: %s, eventType: %s, region: %s", (uint8_t *)v31, 0x20u);
    swift_arrayDestroy();
    swift_slowDealloc();
    double v15 = v92;
    swift_slowDealloc();
  }
  else
  {

    swift_bridgeObjectRelease_n();
  }
  uint64_t v44 = sub_100B6CAA8();
  if (v44[2])
  {
    uint64_t v45 = v98;
    sub_100A32584((uint64_t)v44 + ((*(unsigned __int8 *)(v18 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v18 + 80)), (uint64_t)v98, (uint64_t (*)(void))type metadata accessor for LeashRecord);
    uint64_t v46 = 0;
  }
  else
  {
    uint64_t v46 = 1;
    uint64_t v45 = v98;
  }
  uint64_t v47 = v97;
  (*(void (**)(unsigned char *, uint64_t, uint64_t, uint64_t))(v18 + 56))(v45, v46, 1, v97);
  swift_bridgeObjectRelease();
  if ((*(unsigned int (**)(unsigned char *, uint64_t, uint64_t))(v18 + 48))(v45, 1, v47) == 1)
  {
    sub_10001DAB4((uint64_t)v45, &qword_10164B290);
    uint64_t v48 = Logger.logObject.getter();
    os_log_type_t v49 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v48, v49))
    {
      uint64_t v50 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v50 = 0;
      _os_log_impl((void *)&_mh_execute_header, v48, v49, "Failed to publish separation event alert due to missing leash record", v50, 2u);
      swift_slowDealloc();
    }

    type metadata accessor for SPSeparationMonitoringError(0);
    uint64_t v100 = 4;
    sub_1004A0BC8((uint64_t)_swiftEmptyArrayStorage);
    sub_100A24444(&qword_1016386A0, type metadata accessor for SPSeparationMonitoringError);
    _BridgedStoredNSError.init(_:userInfo:)();
    os_log_type_t v51 = v101[0];
    sub_100A09154(v101[0], 1, v96);
    swift_release();
  }
  else
  {
    uint64_t v52 = sub_100A2E4D4((uint64_t)v45, (uint64_t)v20, (uint64_t (*)(void))type metadata accessor for LeashRecord);
    __chkstk_darwin(v52);
    uint64_t v81 = v99;
    uint64_t v82 = v20;
    char v53 = sub_100F48140((void (*)(char *))sub_100A30944, (uint64_t)&v83[-32], v91);
    if (v53[2])
    {
      static Date.trustedNow.getter((uint64_t)v15);
      id v54 = v89;
      [v89 center];
      double v56 = v55;
      double v58 = v57;
      [v54 radius];
      double v60 = v59;
      [v54 radius];
      double v62 = v61;
      uint64_t v63 = v90;
      Date.init()();
      id v64 = objc_allocWithZone((Class)CLLocation);
      Class isa = Date._bridgeToObjectiveC()().super.isa;
      id v66 = [v64 initWithCoordinate:isa altitude:v56 horizontalAccuracy:v58 verticalAccuracy:-1.0 course:v60 courseAccuracy:-1.0 speed:-1.0 speedAccuracy:-1.0 timestamp:0xBFF0000000000000];

      unint64_t v92 = v15;
      Class v67 = *(void (**)(unsigned char *, uint64_t))(v11 + 8);
      v67(v63, v10);
      [v66 setReferenceFrame:[v54 geoReferenceFrame]];
      id v68 = v66;
      LOBYTE(isa) = sub_100FC022C();

      if (isa)
      {
        swift_bridgeObjectRelease();
        type metadata accessor for SPSeparationMonitoringError(0);
        uint64_t v100 = 21;
        sub_1004A0BC8((uint64_t)_swiftEmptyArrayStorage);
        sub_100A24444(&qword_1016386A0, type metadata accessor for SPSeparationMonitoringError);
        _BridgedStoredNSError.init(_:userInfo:)();
        char v69 = v101[0];
        sub_100A09154(v101[0], 1, v96);
      }
      else
      {
        uint64_t v76 = (void *)swift_allocObject();
        uint64_t v77 = v99;
        v76[2] = v68;
        v76[3] = v77;
        v76[4] = sub_100A30938;
        v76[5] = v21;
        uint64_t v78 = v93;
        v76[6] = v53;
        v76[7] = v78;
        id v79 = v68;
        swift_retain();
        swift_retain();
        sub_100A2C90C(v79, (uint64_t)sub_100A309B0, (uint64_t)v76);

        swift_release();
      }
      v67(v92, v10);
    }
    else
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRetain_n();
      os_log_type_t v70 = Logger.logObject.getter();
      os_log_type_t v71 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v70, v71))
      {
        os_log_type_t v88 = v20;
        uint64_t v72 = (uint8_t *)swift_slowAlloc();
        v101[0] = (void *)swift_slowAlloc();
        *(_DWORD *)uint64_t v72 = 136315138;
        type metadata accessor for UUID();
        sub_100A24444(&qword_10163BC60, (void (*)(uint64_t))&type metadata accessor for UUID);
        swift_bridgeObjectRetain();
        uint64_t v73 = Set.description.getter();
        unint64_t v75 = v74;
        swift_bridgeObjectRelease();
        uint64_t v100 = sub_1008FA0F0(v73, v75, (uint64_t *)v101);
        uint64_t v20 = v88;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease_n();
        swift_bridgeObjectRelease();
        _os_log_impl((void *)&_mh_execute_header, v70, v71, "Received separation alert for unknown beacons: %s", v72, 0xCu);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
      }
      else
      {

        swift_bridgeObjectRelease_n();
      }
      type metadata accessor for SPSeparationMonitoringError(0);
      uint64_t v100 = 5;
      sub_1004A0BC8((uint64_t)_swiftEmptyArrayStorage);
      sub_100A24444(&qword_1016386A0, type metadata accessor for SPSeparationMonitoringError);
      _BridgedStoredNSError.init(_:userInfo:)();
      uint64_t v80 = v101[0];
      sub_100A09154(v101[0], 1, v96);
    }
    sub_100A2E53C((uint64_t)v20, (uint64_t (*)(void))type metadata accessor for LeashRecord);
    swift_release();
  }
}

uint64_t sub_100A2D874(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for OwnedBeaconRecord();
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  id v7 = (char *)&v18 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = sub_10000588C(&qword_10163B9F0);
  uint64_t v9 = __chkstk_darwin(v8 - 8);
  uint64_t v11 = (char *)&v18 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9);
  uint64_t v13 = (char *)&v18 - v12;
  sub_10001CD44((void *)(a1 + OBJC_IVAR____TtC12searchpartyd23BeaconManagerTrampoline_implementation), *(void *)(a1 + OBJC_IVAR____TtC12searchpartyd23BeaconManagerTrampoline_implementation + 24));
  sub_100A1208C((uint64_t)v13);
  uint64_t v14 = *(char **)(a1 + OBJC_IVAR____TtC12searchpartyd23BeaconManagerTrampoline_beaconStore);
  sub_10001D074((uint64_t)v13, (uint64_t)v11, &qword_10163B9F0);
  int v15 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v5 + 48))(v11, 1, v4);
  id v16 = 0;
  if (v15 != 1)
  {
    sub_100A2E4D4((uint64_t)v11, (uint64_t)v7, (uint64_t (*)(void))type metadata accessor for OwnedBeaconRecord);
    swift_retain_n();
    id v16 = sub_100398B08((uint64_t)v7, v14);
    sub_100A2E53C((uint64_t)v7, (uint64_t (*)(void))type metadata accessor for OwnedBeaconRecord);
    swift_release_n();
  }
  (*(void (**)(uint64_t, id))(a2 + 16))(a2, v16);

  return sub_10001DAB4((uint64_t)v13, &qword_10163B9F0);
}

uint64_t sub_100A2DA98(unint64_t *a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for UUID();
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = __chkstk_darwin(v4);
  double v62 = (char *)&v55 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = __chkstk_darwin(v6);
  double v61 = (char *)&v55 - v9;
  uint64_t v10 = __chkstk_darwin(v8);
  uint64_t v12 = (char *)&v55 - v11;
  uint64_t v13 = __chkstk_darwin(v10);
  uint64_t v72 = (char *)&v55 - v14;
  __chkstk_darwin(v13);
  char v69 = (char *)&v55 - v15;
  uint64_t v16 = sub_10000588C(&qword_101638CF0);
  uint64_t v17 = __chkstk_darwin(v16 - 8);
  uint64_t v19 = (char *)&v55 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v17);
  uint64_t v21 = (char *)&v55 - v20;
  id v68 = a1;
  unint64_t v22 = *a1;
  unint64_t v63 = *(void *)(*a1 + 16);
  if (!v63) {
    return 0;
  }
  unint64_t v23 = (*(unsigned __int8 *)(v5 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
  unint64_t v60 = v22 + v23;
  uint64_t v24 = *(void *)(a2 + 16);
  unint64_t v67 = v23;
  uint64_t v64 = a2 + v23;
  uint64_t v78 = (void (**)(void, void, void))(v5 + 16);
  uint64_t v80 = *(void *)(v5 + 72);
  unint64_t v25 = v5 + 56;
  unint64_t v75 = (unsigned int (**)(char *, uint64_t, uint64_t))(v5 + 48);
  uint64_t v73 = (void (**)(char *, char *, uint64_t))(v5 + 32);
  uint64_t v57 = v5;
  id v79 = (void (**)(char *, uint64_t))(v5 + 8);
  unint64_t v58 = v22;
  swift_bridgeObjectRetain();
  unint64_t v26 = 0;
  uint64_t v65 = v24;
  uint64_t v66 = a2;
  uint64_t v76 = (void *)(v5 + 56);
  double v56 = v12;
  double v55 = v19;
  do
  {
    unint64_t v70 = v26;
    if (v24)
    {
      double v59 = (uint64_t (**)(unint64_t, char *, uint64_t))(v25 & 0xFFFFFFFFFFFFLL | 0xA0D1000000000000);
      os_log_type_t v71 = (void (*)(char *, char *, uint64_t))(v60 + v80 * v26);
      os_log_type_t v27 = *v78;
      swift_bridgeObjectRetain();
      uint64_t v28 = v64;
      uint64_t v81 = v27;
      while (1)
      {
        v27(v21, v28, v4);
        BOOL v29 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))v25;
        (*(void (**)(char *, void, uint64_t, uint64_t))v25)(v21, 0, 1, v4);
        unint64_t v74 = *v75;
        if (v74(v21, 1, v4) == 1) {
          goto LABEL_10;
        }
        uint64_t v77 = v29;
        uint64_t v30 = *v73;
        uint64_t v31 = v69;
        (*v73)(v69, v21, v4);
        sub_100A24444((unint64_t *)&qword_10163B8F0, (void (*)(uint64_t))&type metadata accessor for UUID);
        char v32 = dispatch thunk of static Equatable.== infix(_:_:)();
        unint64_t v33 = *v79;
        (*v79)(v31, v4);
        if (v32) {
          break;
        }
        v28 += v80;
        --v24;
        unint64_t v25 = (unint64_t)v76;
        os_log_type_t v27 = v81;
        if (!v24)
        {
          v77(v21, 1, 1, v4);
          goto LABEL_10;
        }
      }
      os_log_type_t v71 = v30;
      unint64_t v36 = v58;
      swift_bridgeObjectRelease();
      uint64_t result = swift_bridgeObjectRelease();
      unint64_t v38 = v70 + 1;
      if (!__OFADD__(v70, 1))
      {
        unint64_t v39 = *(void *)(v36 + 16);
        if (v38 == v39) {
          return v70;
        }
        double v59 = (uint64_t (**)(unint64_t, char *, uint64_t))(v57 + 40);
        unint64_t v40 = v67;
        unint64_t v41 = v56;
        unint64_t v42 = v55;
        while (2)
        {
          if (v38 < v39)
          {
            char v69 = (char *)(v38 * v80);
            v81(v72, v36 + v40 + v38 * v80, v4);
            swift_bridgeObjectRetain();
            uint64_t v43 = v64;
            uint64_t v44 = v65;
            while (1)
            {
              v81(v42, v43, v4);
              v77(v42, 0, 1, v4);
              if (v74(v42, 1, v4) == 1) {
                break;
              }
              v71(v41, v42, v4);
              char v45 = dispatch thunk of static Equatable.== infix(_:_:)();
              v33(v41, v4);
              if (v45)
              {
                swift_bridgeObjectRelease();
                uint64_t result = ((uint64_t (*)(char *, uint64_t))v33)(v72, v4);
                goto LABEL_33;
              }
              v43 += v80;
              if (!--v44)
              {
                v77(v42, 1, 1, v4);
                break;
              }
            }
            swift_bridgeObjectRelease();
            uint64_t result = ((uint64_t (*)(char *, uint64_t))v33)(v72, v4);
            unint64_t v46 = v70;
            if (v70 != v38)
            {
              if ((v70 & 0x8000000000000000) != 0) {
                goto LABEL_41;
              }
              unint64_t v63 = v38;
              unint64_t v47 = *v68;
              unint64_t v48 = *(void *)(*v68 + 16);
              if (v70 >= v48) {
                goto LABEL_42;
              }
              unint64_t v49 = v47 + v67;
              unint64_t v60 = v70 * v80;
              uint64_t v50 = (void (*)(char *, char *, uint64_t))v81;
              uint64_t result = ((uint64_t (*)(char *, unint64_t, uint64_t))v81)(v61, v47 + v67 + v70 * v80, v4);
              if (v63 >= v48) {
                goto LABEL_43;
              }
              v50(v62, &v69[v49], v4);
              uint64_t result = swift_isUniquelyReferenced_nonNull_native();
              *id v68 = v47;
              if ((result & 1) == 0)
              {
                uint64_t result = sub_100BBD3BC(v47);
                unint64_t v47 = result;
                *id v68 = result;
              }
              if (v70 >= *(void *)(v47 + 16)) {
                goto LABEL_44;
              }
              os_log_type_t v51 = *v59;
              unint64_t v52 = v67;
              uint64_t result = (*v59)(v47 + v67 + v60, v62, v4);
              unint64_t v38 = v63;
              if (v63 >= *(void *)(*v68 + 16)) {
                goto LABEL_45;
              }
              uint64_t result = v51((unint64_t)&v69[*v68 + v52], v61, v4);
              unint64_t v46 = v70;
            }
            BOOL v53 = __OFADD__(v46, 1);
            unint64_t v54 = v46 + 1;
            if (v53) {
              goto LABEL_40;
            }
            unint64_t v70 = v54;
LABEL_33:
            BOOL v53 = __OFADD__(v38++, 1);
            unint64_t v40 = v67;
            if (v53) {
              goto LABEL_39;
            }
            unint64_t v36 = *v68;
            unint64_t v39 = *(void *)(*v68 + 16);
            if (v38 != v39) {
              continue;
            }
            return v70;
          }
          break;
        }
        __break(1u);
LABEL_39:
        __break(1u);
LABEL_40:
        __break(1u);
LABEL_41:
        __break(1u);
LABEL_42:
        __break(1u);
LABEL_43:
        __break(1u);
LABEL_44:
        __break(1u);
LABEL_45:
        __break(1u);
      }
      __break(1u);
      return result;
    }
    unint64_t v34 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))v25;
    swift_bridgeObjectRetain();
    v34(v21, 1, 1, v4);
LABEL_10:
    swift_bridgeObjectRelease();
    unint64_t v26 = v70 + 1;
    uint64_t v24 = v65;
  }
  while (v70 + 1 != v63);
  unint64_t v35 = v58;
  swift_bridgeObjectRelease();
  return *(void *)(v35 + 16);
}

uint64_t sub_100A2E244()
{
  uint64_t v1 = *(void *)(type metadata accessor for UUID() - 8);
  unint64_t v2 = (*(unsigned __int8 *)(v1 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80);
  unint64_t v3 = (*(void *)(v1 + 64) + v2 + 7) & 0xFFFFFFFFFFFFFFF8;
  return sub_100A1CA44(*(void *)(v0 + 16), v0 + v2, *(void *)(v0 + v3), *(void (**)(void, void))(v0 + ((v3 + 15) & 0xFFFFFFFFFFFFFFF8)), *(void *)(v0 + ((v3 + 15) & 0xFFFFFFFFFFFFFFF8) + 8), "Unassigning beacons: %s from safe location with identifier: %s", (uint64_t)&unk_1015E3468, (uint64_t)&unk_1015E3490, (uint64_t)sub_100A24490, (uint64_t)sub_100A244CC, "Unable to unassign non-existant beacon %s to safe location with UUID: %s", (uint64_t)&unk_1015E3508, (uint64_t)sub_100A328FC, (uint64_t)&unk_1015E3520, (uint64_t)&unk_1015E34B8, (uint64_t)sub_100A244D8, byte_1015E34D0, "Failed to unassign %s from safe location with UUID: %s", "Unable to unassign beacons %s from non-existant safe location with UUID: %s",
           (uint64_t)&unk_1015E3418,
           (void (*)(char *, uint64_t, uint64_t))sub_100A32900,
           byte_1015E3430);
}

uint64_t sub_100A2E3B4()
{
  return sub_100A14A6C(v0[2], v0[3], v0[4], v0[5]);
}

void sub_100A2E3C0()
{
  sub_100A1E7BC(*(void (**)(void *, uint64_t))(v0 + 16));
}

uint64_t sub_100A2E3E0@<X0>(uint64_t a1@<X8>)
{
  return sub_100A1684C(a1);
}

uint64_t sub_100A2E3FC(uint64_t a1)
{
  return sub_100A16930(a1, *(void *)(v1 + 16));
}

uint64_t sub_100A2E408()
{
  return sub_100A2E7BC((uint64_t (*)(unint64_t, uint64_t, uint64_t, uint64_t, uint64_t))sub_100A169B4);
}

void sub_100A2E420()
{
  sub_100A1E7BC(*(void (**)(void *, uint64_t))(v0 + 16));
}

uint64_t sub_100A2E440@<X0>(uint64_t *a1@<X8>)
{
  return sub_100A2351C(*(uint8_t **)(v1 + 16), *(void (**)(void))(v1 + 24), *(uint64_t (**)(void))(v1 + 32), *(void *)(v1 + 40), *(void *)(v1 + 48), *(void *)(v1 + 56), &qword_1016554F0, &qword_10164B290, a1, (uint64_t (*)(void))type metadata accessor for LeashRecord, (uint64_t (*)(void))type metadata accessor for LeashRecord, (uint64_t *)&unk_1016554E0, (void (*)(uint64_t, void, uint64_t, uint64_t, uint64_t, uint64_t, NSObject *))sub_100B47D94, (uint64_t (*)(void))type metadata accessor for LeashRecord);
}

uint64_t sub_100A2E4D4(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 32))(a2, a1, v5);
  return a2;
}

uint64_t sub_100A2E53C(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t sub_100A2E5A0(uint64_t a1, uint64_t a2)
{
  return sub_100A229B8(a1, a2, *(void *)(v2 + 16), *(void *)(v2 + 24));
}

uint64_t sub_100A2E5B0()
{
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();

  return _swift_deallocObject(v0, 48, 7);
}

uint64_t sub_100A2E5F8()
{
  return sub_100A123E0(v0[2], v0[3], v0[4], v0[5]);
}

uint64_t sub_100A2E604@<X0>(uint64_t a1@<X8>)
{
  return sub_100A21F98(v1, a1);
}

void sub_100A2E620()
{
  sub_100A13EF4(*(void (**)(void *, uint64_t))(v0 + 16));
}

uint64_t sub_100A2E628(uint64_t a1)
{
  return sub_100A14070(a1);
}

uint64_t sub_100A2E634()
{
  uint64_t v1 = *(void *)(sub_10000588C((uint64_t *)&unk_1016554E0) - 8);
  uint64_t v2 = *(unsigned __int8 *)(v1 + 80);
  uint64_t v3 = (v2 + 16) & ~v2;
  uint64_t v4 = *(void *)(v1 + 64);
  uint64_t v5 = v0 + v3;
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    swift_errorRelease();
  }
  else
  {
    sub_10001CFB8(*(void *)v5, *(void *)(v5 + 8));
    uint64_t v6 = v5 + *(int *)(type metadata accessor for LeashRecord() + 20);
    uint64_t v7 = type metadata accessor for UUID();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v7 - 8) + 8))(v6, v7);
    swift_bridgeObjectRelease();
  }
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();

  return _swift_deallocObject(v0, ((((((v4 + v3 + 7) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8) + 8, v2 | 7);
}

uint64_t sub_100A2E7A4()
{
  return sub_100A2E7BC((uint64_t (*)(unint64_t, uint64_t, uint64_t, uint64_t, uint64_t))sub_100A14540);
}

uint64_t sub_100A2E7BC(uint64_t (*a1)(unint64_t, uint64_t, uint64_t, uint64_t, uint64_t))
{
  uint64_t v2 = *(void *)(sub_10000588C((uint64_t *)&unk_1016554E0) - 8);
  unint64_t v3 = (*(unsigned __int8 *)(v2 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  unint64_t v4 = (*(void *)(v2 + 64) + v3 + 7) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v5 = (v4 + 15) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v6 = *(void *)(v1 + v4);
  uint64_t v7 = *(void *)(v1 + ((v5 + 23) & 0xFFFFFFFFFFFFFFF8));
  uint64_t v8 = *(void *)(v1 + v5);
  uint64_t v9 = *(void *)(v1 + v5 + 8);

  return a1(v1 + v3, v6, v8, v9, v7);
}

void sub_100A2E87C()
{
  sub_100A1E7BC(*(void (**)(void *, uint64_t))(v0 + 16));
}

uint64_t sub_100A2E89C()
{
  uint64_t v1 = (int *)(type metadata accessor for SafeLocation() - 8);
  uint64_t v2 = *(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v3 = (v2 + 24) & ~v2;
  uint64_t v4 = v2 | 7;
  uint64_t v5 = *(void *)(*(void *)v1 + 64) + v3 + 1;
  swift_release();
  sub_10001CFB8(*(void *)(v0 + v3), *(void *)(v0 + v3 + 8));
  uint64_t v6 = v0 + v3 + v1[7];
  uint64_t v7 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v7 - 8) + 8))(v6, v7);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return _swift_deallocObject(v0, v5, v4);
}

uint64_t sub_100A2E9B8(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = *(void *)(type metadata accessor for SafeLocation() - 8);
  unint64_t v6 = (*(unsigned __int8 *)(v5 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
  uint64_t v7 = *(void *)(v2 + 16);
  int v8 = *(unsigned __int8 *)(v2 + v6 + *(void *)(v5 + 64));

  return sub_100A22E88(a1, a2, v7, v2 + v6, v8);
}

void sub_100A2EA60(void *a1, char a2)
{
  sub_100A2349C(a1, a2 & 1, *(void (**)(void *, uint64_t))(v2 + 16));
}

uint64_t sub_100A2EA80()
{
  uint64_t v1 = (int *)(type metadata accessor for SafeLocation() - 8);
  uint64_t v2 = *(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v3 = (v2 + 24) & ~v2;
  uint64_t v4 = v2 | 7;
  unint64_t v5 = ((v3 + *(void *)(*(void *)v1 + 64)) & 0xFFFFFFFFFFFFFFF8) + 24;
  swift_release();
  sub_10001CFB8(*(void *)(v0 + v3), *(void *)(v0 + v3 + 8));
  uint64_t v6 = v0 + v3 + v1[7];
  uint64_t v7 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v7 - 8) + 8))(v6, v7);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();

  return _swift_deallocObject(v0, v5, v4);
}

void sub_100A2EBB4()
{
  uint64_t v1 = *(void *)(type metadata accessor for SafeLocation() - 8);
  unint64_t v2 = (*(unsigned __int8 *)(v1 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80);
  sub_100A16E08(v0 + v2, *(unsigned __int8 *)(v0 + v2 + *(void *)(v1 + 64)), *(void (**)(void, void))(((v2 + *(void *)(v1 + 64)) & 0xFFFFFFFFFFFFFFF8) + v0 + 8), *(void *)(((v2 + *(void *)(v1 + 64)) & 0xFFFFFFFFFFFFFFF8) + v0 + 16));
}

uint64_t sub_100A2EC48()
{
  uint64_t v1 = (int *)(type metadata accessor for SafeLocation() - 8);
  uint64_t v2 = *(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v3 = (v2 + 24) & ~v2;
  uint64_t v4 = v2 | 7;
  unint64_t v5 = (((*(void *)(*(void *)v1 + 64) + v3 + 7) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8;
  swift_release();
  sub_10001CFB8(*(void *)(v0 + v3), *(void *)(v0 + v3 + 8));
  uint64_t v6 = v0 + v3 + v1[7];
  uint64_t v7 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v7 - 8) + 8))(v6, v7);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();

  return _swift_deallocObject(v0, v5 + 8, v4);
}

void sub_100A2ED8C(uint64_t a1)
{
  uint64_t v3 = *(void *)(type metadata accessor for SafeLocation() - 8);
  unint64_t v4 = (*(unsigned __int8 *)(v3 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  unint64_t v5 = (*(void *)(v3 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v6 = *(void *)(v1 + 16);
  uint64_t v7 = *(void *)(v1 + v5);
  int v8 = *(void **)(v1 + ((v5 + 15) & 0xFFFFFFFFFFFFFFF8));

  sub_100A18800(a1, v6, v1 + v4, v7, v8);
}

uint64_t sub_100A2EE38()
{
  uint64_t v1 = (int *)(type metadata accessor for SafeLocation() - 8);
  uint64_t v2 = *(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v3 = (v2 + 17) & ~v2;
  uint64_t v4 = v2 | 7;
  unint64_t v5 = (((((*(void *)(*(void *)v1 + 64) + v3 + 7) & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v6 = v0 + v3;
  sub_10001CFB8(*(void *)(v0 + v3), *(void *)(v0 + v3 + 8));
  uint64_t v7 = v6 + v1[7];
  uint64_t v8 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v8 - 8) + 8))(v7, v8);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  swift_release();

  return _swift_deallocObject(v0, v5 + 8, v4);
}

void sub_100A2EF90()
{
  uint64_t v1 = *(void *)(type metadata accessor for SafeLocation() - 8);
  unint64_t v2 = (*(unsigned __int8 *)(v1 + 80) + 17) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80);
  unint64_t v3 = (*(void *)(v1 + 64) + v2 + 7) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v4 = (v3 + 23) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v5 = *(unsigned __int8 *)(v0 + 16);
  uint64_t v6 = *(void (**)(void *, uint64_t))(v0 + v3);
  uint64_t v7 = *(void *)(v0 + v3 + 8);
  uint64_t v8 = *(void *)(v0 + v4);
  uint64_t v9 = *(void *)(v0 + ((v4 + 15) & 0xFFFFFFFFFFFFFFF8));

  sub_100A1899C(v5, v0 + v2, v6, v7, v8, v9);
}

void sub_100A2F040()
{
  uint64_t v1 = *(void *)(type metadata accessor for SafeLocation() - 8);
  unint64_t v2 = (*(unsigned __int8 *)(v1 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80);
  unint64_t v3 = *(void (**)(void *, uint64_t))(v0 + ((*(void *)(v1 + 64) + v2 + 7) & 0xFFFFFFFFFFFFFFF8));

  sub_100A185DC(v0 + v2, v3);
}

void sub_100A2F0D0()
{
  sub_100A1E7BC(*(void (**)(void *, uint64_t))(v0 + 16));
}

uint64_t sub_100A2F0F4(uint64_t a1, uint64_t a2)
{
  return sub_100A2F48C(a1, a2, sub_100A22F74);
}

uint64_t sub_100A2F114()
{
  int v1 = *(unsigned __int8 *)(v0 + 24);
  if (v1 != 255) {
    sub_1003B579C(*(id *)(v0 + 16), v1 & 1);
  }

  return _swift_deallocObject(v0, 25, 7);
}

void sub_100A2F160(char a1)
{
  sub_100A1A584(a1, *(void *)(v1 + 16), *(NSObject **)(v1 + 24));
}

uint64_t sub_100A2F168()
{
  uint64_t v1 = type metadata accessor for UUID();
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 17) & ~v3;
  unint64_t v5 = (((*(void *)(v2 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v6 = (int *)(type metadata accessor for SafeLocation() - 8);
  uint64_t v7 = *(unsigned __int8 *)(*(void *)v6 + 80);
  uint64_t v8 = (v5 + v7 + 8) & ~v7;
  uint64_t v13 = v3 | v7 | 7;
  unint64_t v9 = ((*(void *)(*(void *)v6 + 64) + v8 + 7) & 0xFFFFFFFFFFFFFFF8) + 8;
  uint64_t v10 = v0 + v4;
  uint64_t v11 = *(void (**)(uint64_t, uint64_t))(v2 + 8);
  v11(v10, v1);
  swift_release();
  swift_release();
  sub_10001CFB8(*(void *)(v0 + v8), *(void *)(v0 + v8 + 8));
  v11(v0 + v8 + v6[7], v1);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();

  return _swift_deallocObject(v0, v9, v13);
}

void sub_100A2F324()
{
  uint64_t v1 = *(void *)(type metadata accessor for UUID() - 8);
  unint64_t v2 = (*(unsigned __int8 *)(v1 + 80) + 17) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80);
  unint64_t v3 = (*(void *)(v1 + 64) + v2 + 7) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v4 = (v3 + 23) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v5 = *(void *)(type metadata accessor for SafeLocation() - 8);
  unint64_t v6 = (v4 + *(unsigned __int8 *)(v5 + 80) + 8) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
  uint64_t v7 = *(unsigned __int8 *)(v0 + 16);
  uint64_t v8 = *(void (**)(void, void))(v0 + v3);
  uint64_t v9 = *(void *)(v0 + v3 + 8);
  uint64_t v10 = *(void *)(v0 + v4);
  uint64_t v11 = *(void *)(v0 + ((*(void *)(v5 + 64) + v6 + 7) & 0xFFFFFFFFFFFFFFF8));

  sub_100A1A670(v7, v0 + v2, v8, v9, v10, v0 + v6, v11);
}

id sub_100A2F440(id result, unsigned __int8 a2)
{
  if (a2 != 255) {
    return sub_1003B57DC(result, a2 & 1);
  }
  return result;
}

void sub_100A2F458(void *a1, unsigned __int8 a2)
{
  if (a2 != 255) {
    sub_1003B579C(a1, a2 & 1);
  }
}

uint64_t sub_100A2F474(uint64_t a1, uint64_t a2)
{
  return sub_100A2F48C(a1, a2, sub_100A23268);
}

uint64_t sub_100A2F48C(uint64_t a1, uint64_t a2, uint64_t (*a3)(uint64_t, uint64_t, uint64_t, uint64_t))
{
  uint64_t v6 = *(void *)(type metadata accessor for SafeLocation() - 8);
  uint64_t v7 = *(void *)(v3 + 16);
  uint64_t v8 = v3 + ((*(unsigned __int8 *)(v6 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80));

  return a3(a1, a2, v7, v8);
}

uint64_t sub_100A2F528()
{
  return sub_100A2FA9C((uint64_t (*)(unint64_t, uint64_t, uint64_t, uint64_t))sub_100A1AFD8);
}

void sub_100A2F544()
{
}

void sub_100A2F554(const char *a1, uint64_t a2)
{
  uint64_t v5 = *(void *)(type metadata accessor for SafeLocation() - 8);
  unint64_t v6 = (*(unsigned __int8 *)(v5 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
  unint64_t v7 = (*(void *)(v5 + 64) + v6 + 7) & 0xFFFFFFFFFFFFFFF8;
  sub_100A1BFE0(v2 + v6, *(void (**)(void, void))(v2 + v7), *(void *)(v2 + v7 + 8), a1, a2);
}

uint64_t sub_100A2F5FC()
{
  uint64_t v1 = (int *)(type metadata accessor for SafeLocation() - 8);
  uint64_t v2 = *(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v3 = (v2 + 24) & ~v2;
  uint64_t v4 = v3 + *(void *)(*(void *)v1 + 64);
  uint64_t v5 = v2 | 7;
  swift_release();
  sub_10001CFB8(*(void *)(v0 + v3), *(void *)(v0 + v3 + 8));
  uint64_t v6 = v0 + v3 + v1[7];
  uint64_t v7 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v7 - 8) + 8))(v6, v7);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return _swift_deallocObject(v0, v4, v5);
}

uint64_t sub_100A2F714@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = type metadata accessor for SafeLocation();
  return sub_100B6BE80(v1+ *(int *)(v3 + 20)+ ((*(unsigned __int8 *)(*(void *)(v3 - 8) + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(v3 - 8) + 80)), a1);
}

uint64_t sub_100A2F78C(uint64_t a1)
{
  uint64_t v3 = *(void *)(type metadata accessor for SafeLocation() - 8);
  uint64_t v4 = v1 + ((*(unsigned __int8 *)(v3 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80));

  return sub_100A1BEEC(a1, v4);
}

uint64_t sub_100A2F800()
{
  uint64_t v1 = (int *)(type metadata accessor for SafeLocation() - 8);
  uint64_t v2 = *(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v3 = (v2 + 16) & ~v2;
  uint64_t v4 = v2 | 7;
  unint64_t v5 = ((*(void *)(*(void *)v1 + 64) + v3 + 7) & 0xFFFFFFFFFFFFFFF8) + 16;
  uint64_t v6 = v0 + v3;
  sub_10001CFB8(*(void *)(v0 + v3), *(void *)(v0 + v3 + 8));
  uint64_t v7 = v6 + v1[7];
  uint64_t v8 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v8 - 8) + 8))(v7, v8);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();

  return _swift_deallocObject(v0, v5, v4);
}

void sub_100A2F930()
{
}

uint64_t sub_100A2F944()
{
  uint64_t v1 = (int *)(type metadata accessor for SafeLocation() - 8);
  uint64_t v2 = *(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v3 = (v2 + 16) & ~v2;
  uint64_t v4 = v2 | 7;
  unint64_t v5 = (((*(void *)(*(void *)v1 + 64) + v3 + 7) & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v6 = v0 + v3;
  sub_10001CFB8(*(void *)(v0 + v3), *(void *)(v0 + v3 + 8));
  uint64_t v7 = v6 + v1[7];
  uint64_t v8 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v8 - 8) + 8))(v7, v8);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();

  return _swift_deallocObject(v0, v5 + 8, v4);
}

uint64_t sub_100A2FA84()
{
  return sub_100A2FA9C((uint64_t (*)(unint64_t, uint64_t, uint64_t, uint64_t))sub_100A1C304);
}

uint64_t sub_100A2FA9C(uint64_t (*a1)(unint64_t, uint64_t, uint64_t, uint64_t))
{
  uint64_t v2 = *(void *)(type metadata accessor for SafeLocation() - 8);
  unint64_t v3 = (*(unsigned __int8 *)(v2 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  unint64_t v4 = (*(void *)(v2 + 64) + v3 + 7) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v5 = *(void *)(v1 + v4);
  uint64_t v6 = *(void *)(v1 + v4 + 8);
  uint64_t v7 = *(void *)(v1 + ((v4 + 23) & 0xFFFFFFFFFFFFFFF8));

  return a1(v1 + v3, v5, v6, v7);
}

uint64_t sub_100A2FB50(uint64_t a1, uint64_t a2)
{
  return sub_100A233DC(a1, a2, *(void *)(v2 + 16), *(void *)(v2 + 24));
}

void sub_100A2FB58(uint64_t a1)
{
  sub_100A1C8D0(a1, *(void (**)(id, uint64_t))(v1 + 16));
}

void sub_100A2FB60(id a1, char a2)
{
  if (a2) {

  }
  else {
    swift_bridgeObjectRelease();
  }
}

uint64_t sub_100A2FB70@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v3 = *(void *)(type metadata accessor for UUID() - 8);
  unint64_t v4 = (*(unsigned __int8 *)(v3 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  uint64_t v5 = *(void *)(v1 + 16);
  uint64_t v6 = *(void *)(v1 + ((*(void *)(v3 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8));

  return sub_100A22A9C(v5, v1 + v4, v6, a1);
}

uint64_t sub_100A2FC14(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = *(void *)(type metadata accessor for UUID() - 8);
  unint64_t v6 = (*(unsigned __int8 *)(v5 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
  uint64_t v7 = *(void *)(v2 + 16);
  uint64_t v8 = *(void *)(v2 + ((*(void *)(v5 + 64) + v6 + 7) & 0xFFFFFFFFFFFFFFF8));

  return sub_100A22C28(a1, a2, v7, v2 + v6, v8);
}

uint64_t sub_100A2FCC8()
{
  uint64_t v1 = type metadata accessor for UUID();
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 24) & ~v3;
  uint64_t v5 = v3 | 7;
  unint64_t v6 = (((*(void *)(v2 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8;
  swift_bridgeObjectRelease();
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  swift_release();
  swift_release();

  return _swift_deallocObject(v0, v6 + 16, v5);
}

uint64_t sub_100A2FDC4()
{
  uint64_t v1 = *(void *)(type metadata accessor for UUID() - 8);
  unint64_t v2 = (*(unsigned __int8 *)(v1 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80);
  unint64_t v3 = (*(void *)(v1 + 64) + v2 + 7) & 0xFFFFFFFFFFFFFFF8;
  return sub_100A1CA44(*(void *)(v0 + 16), v0 + v2, *(void *)(v0 + v3), *(void (**)(void, void))(v0 + ((v3 + 15) & 0xFFFFFFFFFFFFFFF8)), *(void *)(v0 + ((v3 + 15) & 0xFFFFFFFFFFFFFFF8) + 8), "Assigning beacons: %s to safe location with identifier: %s", (uint64_t)&unk_1015E4110, (uint64_t)&unk_1015E4138, (uint64_t)sub_100A24490, (uint64_t)sub_100A2FFC0, "Unable to assign non-existant beacon %s to safe location with UUID: %s", (uint64_t)&unk_1015E41B0, (uint64_t)sub_100A30178, (uint64_t)&unk_1015E41C8, (uint64_t)&unk_1015E4160, (uint64_t)sub_100A300C8, byte_1015E4178, "Failed to assign %s to safe location with UUID: %s", "Unable to assign beacons %s to non-existant safe location with UUID: %s",
           (uint64_t)&unk_1015E40C0,
           (void (*)(char *, uint64_t, uint64_t))sub_100A2FF30,
           byte_1015E40D8);
}

void sub_100A2FF30()
{
  sub_100A1E7BC(*(void (**)(void *, uint64_t))(v0 + 16));
}

uint64_t sub_100A2FF54@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = *(void *)(type metadata accessor for UUID() - 8);
  return sub_100B6BE80(v1 + ((*(unsigned __int8 *)(v3 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80)), a1);
}

uint64_t sub_100A2FFC0(uint64_t a1)
{
  return sub_100A1C620(a1);
}

uint64_t sub_100A2FFCC()
{
  uint64_t v1 = type metadata accessor for UUID();
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 24) & ~v3;
  uint64_t v5 = v3 | 7;
  unint64_t v6 = (((*(void *)(v2 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8;
  swift_bridgeObjectRelease();
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  swift_release();
  swift_release();

  return _swift_deallocObject(v0, v6 + 8, v5);
}

uint64_t sub_100A300C8()
{
  return sub_100A300D4("Successfuly to assigned %s to safe location with UUID: %s");
}

uint64_t sub_100A300D4(const char *a1)
{
  uint64_t v3 = *(void *)(type metadata accessor for UUID() - 8);
  unint64_t v4 = (*(unsigned __int8 *)(v3 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  unint64_t v5 = (*(void *)(v3 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8;
  return sub_100A1E928(*(void *)(v1 + 16), v1 + v4, *(void (**)(void, void))(v1 + v5), *(void *)(v1 + v5 + 8), *(void *)(v1 + ((v5 + 23) & 0xFFFFFFFFFFFFFFF8)), a1);
}

void sub_100A30178()
{
  sub_100A1E7BC(*(void (**)(void *, uint64_t))(v0 + 16));
}

uint64_t sub_100A30198(uint64_t a1, uint64_t a2)
{
  return sub_100A301F8(a1, a2, (uint64_t (*)(void))sub_100A6F780, &qword_1016578F0);
}

uint64_t sub_100A301B8(uint64_t a1, uint64_t a2)
{
  return sub_100A301F8(a1, a2, (uint64_t (*)(void))sub_100A6F7A8, &qword_1016578D0);
}

uint64_t sub_100A301D8(uint64_t a1, uint64_t a2)
{
  return sub_100A301F8(a1, a2, (uint64_t (*)(void))sub_100A6F794, &qword_1016578E0);
}

uint64_t sub_100A301F8(uint64_t a1, uint64_t a2, uint64_t (*a3)(void), uint64_t *a4)
{
  if (a1 < 0)
  {
    __break(1u);
    goto LABEL_24;
  }
  uint64_t v6 = *v4;
  uint64_t v7 = *(void *)(*v4 + 16);
  if (v7 < a2)
  {
LABEL_24:
    __break(1u);
    goto LABEL_25;
  }
  uint64_t v9 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
LABEL_25:
    __break(1u);
    goto LABEL_26;
  }
  uint64_t v10 = a1 - a2;
  if (__OFSUB__(0, v9))
  {
LABEL_26:
    __break(1u);
    goto LABEL_27;
  }
  if (__OFADD__(v7, v10))
  {
LABEL_27:
    __break(1u);
LABEL_28:
    __break(1u);
LABEL_29:
    __break(1u);
    goto LABEL_30;
  }
  if (!swift_isUniquelyReferenced_nonNull_native() || v7 - v9 > *(void *)(v6 + 24) >> 1) {
    uint64_t v6 = a3();
  }
  uint64_t v13 = *(void *)(sub_10000588C(a4) - 8);
  unint64_t v14 = v6 + ((*(unsigned __int8 *)(v13 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v13 + 80));
  uint64_t v15 = *(void *)(v13 + 72);
  uint64_t v16 = v15 * a1;
  unint64_t v17 = v14 + v15 * a1;
  uint64_t result = swift_arrayDestroy();
  if (!v9) {
    goto LABEL_22;
  }
  uint64_t v19 = *(void *)(v6 + 16);
  uint64_t v20 = v19 - a2;
  if (__OFSUB__(v19, a2)) {
    goto LABEL_28;
  }
  if ((v20 & 0x8000000000000000) == 0)
  {
    if (v16 < v15 * a2 || v17 >= v14 + v15 * a2 + v20 * v15)
    {
      uint64_t result = swift_arrayInitWithTakeFrontToBack();
    }
    else if (v16 != v15 * a2)
    {
      uint64_t result = swift_arrayInitWithTakeBackToFront();
    }
    uint64_t v22 = *(void *)(v6 + 16);
    BOOL v23 = __OFADD__(v22, v10);
    uint64_t v24 = v22 - v9;
    if (!v23)
    {
      *(void *)(v6 + 16) = v24;
LABEL_22:
      *unint64_t v4 = v6;
      return result;
    }
    goto LABEL_29;
  }
LABEL_30:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_100A303EC()
{
  return sub_100A09660();
}

uint64_t sub_100A303F4(uint64_t a1)
{
  return sub_101012504(a1, *(void **)(v1 + 16), *(uint64_t (**)(uint64_t))(v1 + 24), *(void *)(v1 + 32));
}

uint64_t sub_100A30414()
{
  return sub_100A0972C((uint64_t)sub_100A30478, (uint64_t)&unk_1015E41F0);
}

uint64_t sub_100A30454(uint64_t a1)
{
  return sub_100ED319C(a1, *(void *)(v1 + 16), *(unsigned char *)(v1 + 24), *(void *)(v1 + 32), *(void *)(v1 + 40));
}

uint64_t sub_100A30478()
{
  return sub_100A208DC(v0);
}

uint64_t sub_100A30484()
{
  uint64_t v1 = (int *)(type metadata accessor for SafeLocation() - 8);
  uint64_t v2 = *(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v3 = (v2 + 16) & ~v2;
  uint64_t v4 = v3 + *(void *)(*(void *)v1 + 64);
  uint64_t v5 = v2 | 7;
  uint64_t v6 = v0 + v3;
  sub_10001CFB8(*(void *)(v0 + v3), *(void *)(v0 + v3 + 8));
  uint64_t v7 = v6 + v1[7];
  uint64_t v8 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v8 - 8) + 8))(v7, v8);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return _swift_deallocObject(v0, v4, v5);
}

void sub_100A30594(void *a1, char a2)
{
  char v4 = a2 & 1;
  uint64_t v5 = *(void *)(type metadata accessor for SafeLocation() - 8);
  uint64_t v6 = v2 + ((*(unsigned __int8 *)(v5 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80));

  sub_100A21A14(a1, v4, v6);
}

uint64_t sub_100A30618()
{
  uint64_t v1 = type metadata accessor for UUID();
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 16) & ~v3;
  uint64_t v5 = v3 | 7;
  unint64_t v6 = (((*(void *)(v2 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8;
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  swift_release();
  swift_release();

  return _swift_deallocObject(v0, v6 + 16, v5);
}

uint64_t sub_100A306D8()
{
  uint64_t v1 = *(void *)(type metadata accessor for UUID() - 8);
  unint64_t v2 = (*(unsigned __int8 *)(v1 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80);
  unint64_t v3 = (*(void *)(v1 + 64) + v2 + 7) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v4 = v0 + v2;
  uint64_t v5 = *(void *)(v0 + v3);
  unint64_t v6 = (uint64_t *)(v0 + ((v3 + 15) & 0xFFFFFFFFFFFFFFF8));
  uint64_t v7 = *v6;
  uint64_t v8 = v6[1];

  return sub_100A1959C(v4, v5, v7, v8);
}

void sub_100A30774()
{
  sub_100A1FC34(v0);
}

uint64_t sub_100A3077C()
{
  uint64_t v1 = (int *)(type metadata accessor for LeashRecord() - 8);
  uint64_t v2 = *(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v3 = (v2 + 16) & ~v2;
  uint64_t v4 = v3 + *(void *)(*(void *)v1 + 64);
  uint64_t v5 = v2 | 7;
  uint64_t v6 = v0 + v3;
  sub_10001CFB8(*(void *)(v0 + v3), *(void *)(v0 + v3 + 8));
  uint64_t v7 = v6 + v1[7];
  uint64_t v8 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v8 - 8) + 8))(v7, v8);
  swift_bridgeObjectRelease();

  return _swift_deallocObject(v0, v4, v5);
}

void sub_100A3087C(char a1)
{
  uint64_t v3 = *(void *)(type metadata accessor for LeashRecord() - 8);
  uint64_t v4 = v1 + ((*(unsigned __int8 *)(v3 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80));

  sub_100A20640(a1, v4);
}

uint64_t sub_100A308EC()
{
  _Block_release(*(const void **)(v0 + 16));

  return _swift_deallocObject(v0, 24, 7);
}

uint64_t sub_100A30924(uint64_t a1, __int16 a2)
{
  return sub_100A08F30(a1, a2 & 0x1FF, *(uint64_t (**)(BOOL))(v2 + 16));
}

void sub_100A30938(void *a1, char a2)
{
  sub_100A09154(a1, a2 & 1, *(void (**)(uint64_t, void *))(v2 + 16));
}

uint64_t sub_100A30944@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_100A09BD0(a1, *(void *)(v2 + 16), *(void *)(v2 + 24), a2);
}

uint64_t sub_100A30960()
{
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();

  return _swift_deallocObject(v0, 64, 7);
}

void sub_100A309B0(void *a1, uint64_t a2, char a3)
{
  sub_100A0A76C(a1, a2, a3 & 1, *(void **)(v3 + 16), *(void *)(v3 + 24), *(void *)(v3 + 32), *(void *)(v3 + 40), *(void *)(v3 + 48), *(void *)(v3 + 56));
}

uint64_t sub_100A309E4()
{
  swift_release();

  return _swift_deallocObject(v0, 40, 7);
}

void sub_100A30A24(unint64_t a1, uint64_t a2)
{
  sub_100A11C00(a1, a2, *(void (**)(id, unint64_t, uint64_t))(v2 + 16), *(void *)(v2 + 24), *(void **)(v2 + 32));
}

id sub_100A30A30(void *a1, uint64_t a2, char a3)
{
  if (a3) {
    return a1;
  }
  else {
    return (id)swift_bridgeObjectRetain();
  }
}

void sub_100A30A40(void *a1, uint64_t a2, char a3)
{
  if (a3) {

  }
  else {
    swift_bridgeObjectRelease();
  }
}

uint64_t sub_100A30A50()
{
  swift_unknownObjectRelease();
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();

  swift_bridgeObjectRelease();

  return _swift_deallocObject(v0, 104, 7);
}

uint64_t sub_100A30AB0(uint64_t a1)
{
  uint64_t v11 = v1[3];
  uint64_t v12 = v1[2];
  uint64_t v4 = v1[5];
  uint64_t v10 = v1[4];
  uint64_t v5 = v1[6];
  uint64_t v6 = v1[7];
  uint64_t v7 = v1[8];
  uint64_t v8 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v8;
  *uint64_t v8 = v2;
  v8[1] = sub_10001D2E4;
  return sub_100A0AC1C(a1, v12, v11, v10, v4, v5, v6, v7);
}

uint64_t *sub_100A30BB4(uint64_t *a1)
{
  return a1;
}

uint64_t sub_100A30C18()
{
  uint64_t v1 = (int *)type metadata accessor for OwnedBeaconRecord();
  uint64_t v2 = *(unsigned __int8 *)(*((void *)v1 - 1) + 80);
  uint64_t v3 = (v2 + 32) & ~v2;
  uint64_t v19 = *(void *)(*((void *)v1 - 1) + 64);
  swift_release();

  uint64_t v4 = v0 + v3;
  sub_10001CFB8(*(void *)(v0 + v3), *(void *)(v0 + v3 + 8));
  uint64_t v5 = v0 + v3 + v1[5];
  uint64_t v6 = type metadata accessor for UUID();
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = *(void (**)(uint64_t, uint64_t))(v7 + 8);
  v8(v5, v6);
  uint64_t v9 = v0 + v3 + v1[6];
  type metadata accessor for StableIdentifier();
  switch(swift_getEnumCaseMultiPayload())
  {
    case 0u:
    case 4u:
      goto LABEL_6;
    case 1u:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      goto LABEL_6;
    case 2u:
      v8(v9, v6);
      uint64_t v18 = (v2 + 32) & ~v2;
      sub_10000588C(&qword_1016555E0);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      goto LABEL_5;
    case 3u:
      v8(v9, v6);
      uint64_t v18 = (v2 + 32) & ~v2;
      sub_10000588C((uint64_t *)&unk_1016565E0);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
LABEL_5:
      uint64_t v3 = v18;
LABEL_6:
      swift_bridgeObjectRelease();
      break;
    default:
      break;
  }
  uint64_t v10 = v4 + v1[7];
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(v10, 1, v6)) {
    v8(v10, v6);
  }
  uint64_t v11 = v4 + v1[8];
  uint64_t v12 = type metadata accessor for Date();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v12 - 8) + 8))(v11, v12);
  sub_10001CFB8(*(void *)(v4 + v1[9]), *(void *)(v4 + v1[9] + 8));
  uint64_t v13 = (uint64_t *)(v4 + v1[10]);
  unint64_t v14 = v13[1];
  if (v14 >> 60 != 15) {
    sub_10001CFB8(*v13, v14);
  }
  uint64_t v15 = (uint64_t *)(v4 + v1[11]);
  unint64_t v16 = v15[1];
  if (v16 >> 60 != 15) {
    sub_10001CFB8(*v15, v16);
  }
  sub_10001CFB8(*(void *)(v4 + v1[12]), *(void *)(v4 + v1[12] + 8));
  sub_10001CFB8(*(void *)(v4 + v1[13]), *(void *)(v4 + v1[13] + 8));
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return _swift_deallocObject(v0, v3 + v19, v2 | 7);
}

uint64_t sub_100A30FA4@<X0>(BOOL *a1@<X8>)
{
  uint64_t v3 = *(void *)(type metadata accessor for OwnedBeaconRecord() - 8);
  uint64_t v4 = *(void **)(v1 + 24);
  uint64_t v5 = v1 + ((*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80));

  return sub_100A0FC18(v4, v5, a1);
}

uint64_t sub_100A3101C()
{
  return sub_100A101A8(*(void *)(v0 + 16), *(void *)(v0 + 24));
}

uint64_t sub_100A31024(uint64_t a1)
{
  return sub_100A0EDA0(a1, *(void *)(v1 + 16), *(void *)(v1 + 24));
}

uint64_t sub_100A3102C()
{
  uint64_t v1 = (int *)type metadata accessor for OwnedBeaconRecord();
  uint64_t v24 = *(unsigned __int8 *)(*((void *)v1 - 1) + 80);
  uint64_t v22 = *(void *)(*((void *)v1 - 1) + 64);
  uint64_t v2 = sub_10000588C((uint64_t *)&unk_1016565A0);
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t v21 = *(unsigned __int8 *)(v3 + 80);
  uint64_t v20 = *(void *)(v3 + 64);
  swift_unknownObjectRelease();
  swift_release();
  uint64_t v23 = (v24 + 40) & ~v24;
  uint64_t v4 = v0 + v23;
  sub_10001CFB8(*(void *)(v0 + v23), *(void *)(v0 + v23 + 8));
  uint64_t v5 = v0 + v23 + v1[5];
  uint64_t v6 = type metadata accessor for UUID();
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = *(void (**)(uint64_t, uint64_t))(v7 + 8);
  v8(v5, v6);
  uint64_t v9 = v0 + v23 + v1[6];
  type metadata accessor for StableIdentifier();
  switch(swift_getEnumCaseMultiPayload())
  {
    case 0u:
    case 4u:
      goto LABEL_6;
    case 1u:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      goto LABEL_6;
    case 2u:
      v8(v9, v6);
      uint64_t v19 = v2;
      sub_10000588C(&qword_1016555E0);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      goto LABEL_5;
    case 3u:
      v8(v9, v6);
      uint64_t v19 = v2;
      sub_10000588C((uint64_t *)&unk_1016565E0);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
LABEL_5:
      uint64_t v2 = v19;
LABEL_6:
      swift_bridgeObjectRelease();
      break;
    default:
      break;
  }
  uint64_t v10 = v4 + v1[7];
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(v10, 1, v6)) {
    v8(v10, v6);
  }
  uint64_t v11 = v4 + v1[8];
  uint64_t v12 = type metadata accessor for Date();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v12 - 8) + 8))(v11, v12);
  sub_10001CFB8(*(void *)(v4 + v1[9]), *(void *)(v4 + v1[9] + 8));
  uint64_t v13 = (uint64_t *)(v4 + v1[10]);
  unint64_t v14 = v13[1];
  if (v14 >> 60 != 15) {
    sub_10001CFB8(*v13, v14);
  }
  uint64_t v15 = (uint64_t *)(v4 + v1[11]);
  unint64_t v16 = v15[1];
  if (v16 >> 60 != 15) {
    sub_10001CFB8(*v15, v16);
  }
  uint64_t v17 = (v23 + v22 + v21) & ~v21;
  sub_10001CFB8(*(void *)(v4 + v1[12]), *(void *)(v4 + v1[12] + 8));
  sub_10001CFB8(*(void *)(v4 + v1[13]), *(void *)(v4 + v1[13] + 8));
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v0 + v17, v2);

  return _swift_deallocObject(v0, v17 + v20, v24 | v21 | 7);
}

uint64_t sub_100A31454(uint64_t a1)
{
  uint64_t v3 = v2;
  uint64_t v5 = *(void *)(type metadata accessor for OwnedBeaconRecord() - 8);
  unint64_t v6 = (*(unsigned __int8 *)(v5 + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
  unint64_t v7 = v6 + *(void *)(v5 + 64);
  uint64_t v8 = *(void *)(sub_10000588C((uint64_t *)&unk_1016565A0) - 8);
  unint64_t v9 = (v7 + *(unsigned __int8 *)(v8 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80);
  uint64_t v10 = v1[2];
  uint64_t v11 = v1[3];
  uint64_t v12 = v1[4];
  uint64_t v13 = (uint64_t)v1 + v6;
  uint64_t v14 = (uint64_t)v1 + v9;
  uint64_t v15 = (void *)swift_task_alloc();
  *(void *)(v3 + 16) = v15;
  *uint64_t v15 = v3;
  v15[1] = sub_10001D2E4;
  return sub_100A0F04C(a1, v10, v11, v12, v13, v14);
}

uint64_t sub_100A315B8()
{
  uint64_t v1 = (int *)type metadata accessor for OwnedBeaconRecord();
  uint64_t v24 = *(unsigned __int8 *)(*((void *)v1 - 1) + 80);
  uint64_t v22 = *(void *)(*((void *)v1 - 1) + 64);
  uint64_t v2 = sub_10000588C((uint64_t *)&unk_1016565A0);
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t v21 = *(unsigned __int8 *)(v3 + 80);
  uint64_t v20 = *(void *)(v3 + 64);
  swift_release();
  uint64_t v23 = (v24 + 24) & ~v24;
  uint64_t v4 = v0 + v23;
  sub_10001CFB8(*(void *)(v0 + v23), *(void *)(v0 + v23 + 8));
  uint64_t v5 = v0 + v23 + v1[5];
  uint64_t v6 = type metadata accessor for UUID();
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = *(void (**)(uint64_t, uint64_t))(v7 + 8);
  v8(v5, v6);
  uint64_t v9 = v0 + v23 + v1[6];
  type metadata accessor for StableIdentifier();
  switch(swift_getEnumCaseMultiPayload())
  {
    case 0u:
    case 4u:
      goto LABEL_6;
    case 1u:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      goto LABEL_6;
    case 2u:
      v8(v9, v6);
      uint64_t v19 = v2;
      sub_10000588C(&qword_1016555E0);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      goto LABEL_5;
    case 3u:
      v8(v9, v6);
      uint64_t v19 = v2;
      sub_10000588C((uint64_t *)&unk_1016565E0);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
LABEL_5:
      uint64_t v2 = v19;
LABEL_6:
      swift_bridgeObjectRelease();
      break;
    default:
      break;
  }
  uint64_t v10 = v4 + v1[7];
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(v10, 1, v6)) {
    v8(v10, v6);
  }
  uint64_t v11 = v4 + v1[8];
  uint64_t v12 = type metadata accessor for Date();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v12 - 8) + 8))(v11, v12);
  sub_10001CFB8(*(void *)(v4 + v1[9]), *(void *)(v4 + v1[9] + 8));
  uint64_t v13 = (uint64_t *)(v4 + v1[10]);
  unint64_t v14 = v13[1];
  if (v14 >> 60 != 15) {
    sub_10001CFB8(*v13, v14);
  }
  uint64_t v15 = (uint64_t *)(v4 + v1[11]);
  unint64_t v16 = v15[1];
  if (v16 >> 60 != 15) {
    sub_10001CFB8(*v15, v16);
  }
  uint64_t v17 = (v23 + v22 + v21) & ~v21;
  sub_10001CFB8(*(void *)(v4 + v1[12]), *(void *)(v4 + v1[12] + 8));
  sub_10001CFB8(*(void *)(v4 + v1[13]), *(void *)(v4 + v1[13] + 8));
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v0 + v17, v2);

  return _swift_deallocObject(v0, v17 + v20, v24 | v21 | 7);
}

uint64_t sub_100A319D8()
{
  uint64_t v1 = *(void *)(type metadata accessor for OwnedBeaconRecord() - 8);
  unint64_t v2 = (*(unsigned __int8 *)(v1 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80);
  unint64_t v3 = v2 + *(void *)(v1 + 64);
  uint64_t v4 = *(void *)(sub_10000588C((uint64_t *)&unk_1016565A0) - 8);
  uint64_t v5 = *(void *)(v0 + 16);
  uint64_t v6 = v0 + ((v3 + *(unsigned __int8 *)(v4 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80));

  return sub_100A0F480(v5, v0 + v2, v6);
}

uint64_t sub_100A31AB4()
{
  uint64_t v1 = sub_10000588C((uint64_t *)&unk_1016565A0);
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 16) & ~v3;
  uint64_t v5 = v4 + *(void *)(v2 + 64);
  uint64_t v6 = v3 | 7;
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);

  return _swift_deallocObject(v0, v5, v6);
}

uint64_t sub_100A31B48(uint64_t a1)
{
  sub_10000588C((uint64_t *)&unk_1016565A0);

  return sub_100A0FBB8(a1);
}

uint64_t sub_100A31BBC()
{
  return _swift_deallocObject(v0, 24, 7);
}

uint64_t sub_100A31BF4()
{
  uint64_t v1 = (int *)type metadata accessor for OwnedBeaconRecord();
  uint64_t v2 = *(unsigned __int8 *)(*((void *)v1 - 1) + 80);
  uint64_t v3 = (v2 + 16) & ~v2;
  uint64_t v19 = *(void *)(*((void *)v1 - 1) + 64);
  uint64_t v4 = v0 + v3;
  sub_10001CFB8(*(void *)(v0 + v3), *(void *)(v0 + v3 + 8));
  uint64_t v5 = v0 + v3 + v1[5];
  uint64_t v6 = type metadata accessor for UUID();
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = *(void (**)(uint64_t, uint64_t))(v7 + 8);
  v8(v5, v6);
  uint64_t v9 = v0 + v3 + v1[6];
  type metadata accessor for StableIdentifier();
  switch(swift_getEnumCaseMultiPayload())
  {
    case 0u:
    case 4u:
      goto LABEL_6;
    case 1u:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      goto LABEL_6;
    case 2u:
      v8(v9, v6);
      uint64_t v18 = (v2 + 16) & ~v2;
      sub_10000588C(&qword_1016555E0);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      goto LABEL_5;
    case 3u:
      v8(v9, v6);
      uint64_t v18 = (v2 + 16) & ~v2;
      sub_10000588C((uint64_t *)&unk_1016565E0);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
LABEL_5:
      uint64_t v3 = v18;
LABEL_6:
      swift_bridgeObjectRelease();
      break;
    default:
      break;
  }
  uint64_t v10 = v4 + v1[7];
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(v10, 1, v6)) {
    v8(v10, v6);
  }
  uint64_t v11 = v4 + v1[8];
  uint64_t v12 = type metadata accessor for Date();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v12 - 8) + 8))(v11, v12);
  sub_10001CFB8(*(void *)(v4 + v1[9]), *(void *)(v4 + v1[9] + 8));
  uint64_t v13 = (uint64_t *)(v4 + v1[10]);
  unint64_t v14 = v13[1];
  if (v14 >> 60 != 15) {
    sub_10001CFB8(*v13, v14);
  }
  uint64_t v15 = (uint64_t *)(v4 + v1[11]);
  unint64_t v16 = v15[1];
  if (v16 >> 60 != 15) {
    sub_10001CFB8(*v15, v16);
  }
  sub_10001CFB8(*(void *)(v4 + v1[12]), *(void *)(v4 + v1[12] + 8));
  sub_10001CFB8(*(void *)(v4 + v1[13]), *(void *)(v4 + v1[13] + 8));
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();

  return _swift_deallocObject(v0, ((((v19 + v3 + 7) & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8) + 10, v2 | 7);
}

uint64_t sub_100A31F98@<X0>(uint64_t a1@<X8>)
{
  return sub_100A1F0D4(*(void *)(v1 + 16), *(void **)(v1 + 24), *(void *)(v1 + 32), *(void *)(v1 + 40), a1);
}

uint64_t sub_100A31FB8()
{
  uint64_t v1 = (int *)(type metadata accessor for SafeLocation() - 8);
  uint64_t v2 = *(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v3 = (v2 + 24) & ~v2;
  uint64_t v4 = v2 | 7;
  unint64_t v5 = (*(void *)(*(void *)v1 + 64) + v3 + 7) & 0xFFFFFFFFFFFFFFF8;
  swift_release();
  sub_10001CFB8(*(void *)(v0 + v3), *(void *)(v0 + v3 + 8));
  uint64_t v6 = v0 + v3 + v1[7];
  uint64_t v7 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v7 - 8) + 8))(v6, v7);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return _swift_deallocObject(v0, v5 + 8, v4);
}

void sub_100A320EC(void *a1, char a2)
{
  char v4 = a2 & 1;
  uint64_t v5 = *(void *)(type metadata accessor for SafeLocation() - 8);
  unint64_t v6 = (*(unsigned __int8 *)(v5 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
  uint64_t v7 = *(void *)(v2 + 16);
  uint64_t v8 = *(NSObject **)(v2 + ((*(void *)(v5 + 64) + v6 + 7) & 0xFFFFFFFFFFFFFFF8));

  sub_100A1F8D4(a1, v4, v7, v2 + v6, v8);
}

uint64_t sub_100A3219C(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 24);
  uint64_t v3 = *(void **)(a1 + 48);
  swift_bridgeObjectRetain();
  id v4 = v3;
  swift_bridgeObjectRetain();
  id v5 = v2;
  return a1;
}

uint64_t sub_100A321EC(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 24);

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t sub_100A3223C()
{
  swift_bridgeObjectRelease();

  swift_bridgeObjectRelease();
  swift_release();

  return _swift_deallocObject(v0, 88, 7);
}

void sub_100A32294(uint64_t a1)
{
  sub_100A117E8(a1, v1 + 16, *(void (**)(void *, uint64_t))(v1 + 72));
}

uint64_t sub_100A322A4@<X0>(uint64_t *a1@<X8>)
{
  return sub_100A1074C(v1 + 24, *(void *)(v1 + 80), v1 + 88, a1);
}

uint64_t sub_100A322B8()
{
  swift_weakDestroy();

  return _swift_deallocObject(v0, 24, 7);
}

uint64_t sub_100A322F4()
{
  swift_release();
  swift_bridgeObjectRelease();

  swift_bridgeObjectRelease();
  swift_release();
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v0 + 88);

  return _swift_deallocObject(v0, 128, 7);
}

uint64_t sub_100A3235C(uint64_t (*a1)(long long *), uint64_t a2)
{
  return sub_100A10858(a1, a2, *(void *)(v2 + 16), v2 + 24, *(void *)(v2 + 80), v2 + 88);
}

uint64_t sub_100A32370()
{
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();

  swift_bridgeObjectRelease();
  swift_release();
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v0 + 104);

  return _swift_deallocObject(v0, 144, 7);
}

uint64_t sub_100A323E0(uint64_t (*a1)(void), uint64_t a2)
{
  return sub_100A10AB0(a1, a2, *(void *)(v2 + 16), *(uint64_t (**)(void, void))(v2 + 24), *(void *)(v2 + 32), v2 + 40, *(void *)(v2 + 96), v2 + 104);
}

uint64_t sub_100A323F8()
{
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v0 + 16);
  swift_release();
  swift_release();

  return _swift_deallocObject(v0, 88, 7);
}

uint64_t sub_100A32440(uint64_t a1, char a2)
{
  return sub_100A11520(a1, a2 & 1, v2 + 16, *(uint64_t (**)(uint64_t, uint64_t))(v2 + 56), *(void *)(v2 + 64), *(uint64_t (**)(uint64_t))(v2 + 72));
}

uint64_t sub_100A32454()
{
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v0 + 16);
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v0 + 56);
  swift_release();
  swift_release();

  return _swift_deallocObject(v0, 128, 7);
}

uint64_t sub_100A324A4(uint64_t a1, char a2)
{
  return sub_100A111DC(a1, a2 & 1, v2 + 16, v2 + 56, *(uint64_t (**)(uint64_t, uint64_t))(v2 + 96), *(void *)(v2 + 104), *(uint64_t (**)(uint64_t))(v2 + 112));
}

uint64_t sub_100A324BC(uint64_t result, char a2)
{
  if (a2) {
    return sub_100A324C8(result);
  }
  return result;
}

uint64_t sub_100A324C8(uint64_t result)
{
  if (result != 1) {
    return swift_errorRetain();
  }
  return result;
}

uint64_t sub_100A324D8(uint64_t result, char a2)
{
  if (a2) {
    return sub_100A324E4(result);
  }
  return result;
}

uint64_t sub_100A324E4(uint64_t result)
{
  if (result != 1) {
    return swift_errorRelease();
  }
  return result;
}

uint64_t sub_100A324F4()
{
  swift_unknownObjectWeakDestroy();

  return _swift_deallocObject(v0, 24, 7);
}

uint64_t sub_100A3252C()
{
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();

  return _swift_deallocObject(v0, 48, 7);
}

void sub_100A32574(void *a1, char a2)
{
  sub_100A06AAC(a1, a2 & 1, *(void *)(v2 + 16), *(void (**)(void, void *))(v2 + 24), *(void *)(v2 + 32), *(void *)(v2 + 40));
}

uint64_t sub_100A32584(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

ValueMetadata *_s12AnalyticsKeyOMa()
{
  return &_s12AnalyticsKeyON;
}

unsigned char *_s12AnalyticsKeyOwst_0(unsigned char *result, int a2, int a3)
{
  if ((a3 + 1) >= 0x10000) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) < 0x100) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2)
  {
    switch(v5)
    {
      case 1:
        *uint64_t result = a2;
        return result;
      case 2:
        *(_WORD *)uint64_t result = a2;
        return result;
      case 3:
        goto LABEL_19;
      case 4:
        *(_DWORD *)uint64_t result = a2;
        return result;
      default:
        return result;
    }
  }
  switch(v5)
  {
    case 1:
      *uint64_t result = 0;
      break;
    case 2:
      *(_WORD *)uint64_t result = 0;
      break;
    case 3:
LABEL_19:
      __break(1u);
      JUMPOUT(0x100A3269CLL);
    case 4:
      *(_DWORD *)uint64_t result = 0;
      break;
    default:
      return result;
  }
  return result;
}

ValueMetadata *_s14AnalyticsEventOMa()
{
  return &_s14AnalyticsEventON;
}

unint64_t sub_100A326D8()
{
  unint64_t result = qword_1016556D8;
  if (!qword_1016556D8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1016556D8);
  }
  return result;
}

unint64_t sub_100A32730()
{
  unint64_t result = qword_1016556E0;
  if (!qword_1016556E0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1016556E0);
  }
  return result;
}

unint64_t sub_100A32788()
{
  unint64_t result = qword_1016556E8;
  if (!qword_1016556E8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1016556E8);
  }
  return result;
}

unint64_t sub_100A327E0()
{
  unint64_t result = qword_1016556F0;
  if (!qword_1016556F0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1016556F0);
  }
  return result;
}

unint64_t sub_100A32838()
{
  unint64_t result = qword_1016556F8;
  if (!qword_1016556F8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1016556F8);
  }
  return result;
}

unint64_t sub_100A32890()
{
  unint64_t result = qword_101655700;
  if (!qword_101655700)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_101655700);
  }
  return result;
}

uint64_t sub_100A328E4(uint64_t a1)
{
  return sub_100A30454(a1);
}

uint64_t sub_100A32AC4(void *a1)
{
  uint64_t v3 = v1;
  uint64_t v5 = sub_10000588C(&qword_101655728);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v8 = &v11[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0)];
  sub_10001CD44(a1, a1[3]);
  sub_100A33AD4();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  LOBYTE(v12) = 0;
  KeyedEncodingContainer.encode(_:forKey:)();
  if (!v2)
  {
    LOBYTE(v12) = 1;
    KeyedEncodingContainer.encode(_:forKey:)();
    LOBYTE(v12) = 2;
    KeyedEncodingContainer.encode(_:forKey:)();
    long long v9 = *(_OWORD *)(v3 + 56);
    long long v12 = *(_OWORD *)(v3 + 40);
    long long v13 = v9;
    long long v14 = *(_OWORD *)(v3 + 72);
    v11[15] = 3;
    sub_100A33B28();
    KeyedEncodingContainer.encode<A>(_:forKey:)();
  }
  return (*(uint64_t (**)(unsigned char *, uint64_t))(v6 + 8))(v8, v5);
}

uint64_t sub_100A32C98(void *a1)
{
  uint64_t v3 = sub_10000588C(&qword_101655768);
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  uint64_t v6 = &v8[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)];
  sub_10001CD44(a1, a1[3]);
  sub_100A34388();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  v8[15] = 0;
  KeyedEncodingContainer.encode(_:forKey:)();
  if (!v1)
  {
    v8[14] = 1;
    KeyedEncodingContainer.encode(_:forKey:)();
    v8[13] = 2;
    KeyedEncodingContainer.encode(_:forKey:)();
    v8[12] = 3;
    KeyedEncodingContainer.encode(_:forKey:)();
    v8[11] = 4;
    KeyedEncodingContainer.encode(_:forKey:)();
    v8[10] = 5;
    KeyedEncodingContainer.encode(_:forKey:)();
  }
  return (*(uint64_t (**)(unsigned char *, uint64_t))(v4 + 8))(v6, v3);
}

uint64_t sub_100A32EA0(uint64_t a1)
{
  unint64_t v2 = sub_1000986D4();

  return RequestContentRepresentable.description.getter(a1, v2);
}

uint64_t sub_100A32EDC()
{
  uint64_t result = 0x656372756F73;
  switch(*v0)
  {
    case 1:
      uint64_t result = 0x6D617473656D6974;
      break;
    case 2:
      uint64_t result = 1684628597;
      break;
    case 3:
      uint64_t result = 0x6E756F436D657469;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t sub_100A32F68@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_100A33C18(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_100A32F90(uint64_t a1)
{
  unint64_t v2 = sub_100A33AD4();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_100A32FCC(uint64_t a1)
{
  unint64_t v2 = sub_100A33AD4();

  return CodingKey.debugDescription.getter(a1, v2);
}

double sub_100A33008@<D0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  sub_100A33DD4(a1, (uint64_t)v7);
  if (!v2)
  {
    long long v5 = v7[3];
    *(_OWORD *)(a2 + 32) = v7[2];
    *(_OWORD *)(a2 + 48) = v5;
    *(_OWORD *)(a2 + 64) = v7[4];
    *(void *)(a2 + 80) = v8;
    double result = *(double *)v7;
    long long v6 = v7[1];
    *(_OWORD *)a2 = v7[0];
    *(_OWORD *)(a2 + 16) = v6;
  }
  return result;
}

uint64_t sub_100A33064(void *a1)
{
  return sub_100A32AC4(a1);
}

uint64_t sub_100A330B0()
{
  uint64_t result = 0x3156676174726961;
  switch(*v0)
  {
    case 1:
      uint64_t result = 0x3256676174726961;
      break;
    case 2:
      uint64_t result = 0x3156616E6D66;
      break;
    case 3:
      uint64_t result = 0x3256616E6D66;
      break;
    case 4:
      uint64_t result = 0x6E6D66656C707061;
      break;
    case 5:
      uint64_t result = 0x6E6D66656C707061;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t sub_100A33180@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_100A343DC(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_100A331A8(uint64_t a1)
{
  unint64_t v2 = sub_100A34388();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_100A331E4(uint64_t a1)
{
  unint64_t v2 = sub_100A34388();

  return CodingKey.debugDescription.getter(a1, v2);
}

double sub_100A33220@<D0>(void *a1@<X0>, _OWORD *a2@<X8>)
{
  sub_100A3465C(a1, (uint64_t *)v6);
  if (!v2)
  {
    long long v5 = v6[1];
    *a2 = v6[0];
    a2[1] = v5;
    double result = *(double *)&v7;
    a2[2] = v7;
  }
  return result;
}

uint64_t sub_100A33264(void *a1)
{
  return sub_100A32C98(a1);
}

uint64_t sub_100A3327C(long long *a1)
{
  uint64_t v3 = type metadata accessor for Date();
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  long long v6 = (char *)&v26 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  id v7 = [self currentDevice];
  if (v7
    && (uint64_t v8 = v7,
        id v9 = [v7 uniqueDeviceIdentifier],
        v8,
        v9))
  {
    uint64_t v28 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v11 = v10;

    long long v12 = *a1;
    long long v26 = a1[1];
    long long v27 = v12;
    uint64_t v38 = v1;
    uint64_t v13 = *((void *)a1 + 4);
    uint64_t v14 = *((void *)a1 + 5);
    id v15 = [objc_allocWithZone((Class)NSProcessInfo) init];
    id v16 = [v15 processName];

    uint64_t v17 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v19 = v18;

    static Date.trustedNow.getter((uint64_t)v6);
    uint64_t v20 = Date.epoch.getter();
    (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
    type metadata accessor for JSONEncoder();
    swift_allocObject();
    JSONEncoder.init()();
    uint64_t v29 = v17;
    uint64_t v30 = v19;
    uint64_t v31 = v20;
    uint64_t v32 = v28;
    uint64_t v33 = v11;
    long long v34 = v27;
    long long v35 = v26;
    uint64_t v36 = v13;
    uint64_t v37 = v14;
    sub_100A335D0();
    uint64_t v21 = v38;
    uint64_t v22 = dispatch thunk of JSONEncoder.encode<A>(_:)();
    if (v21)
    {
      swift_errorRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_release();
      return 0;
    }
    else
    {
      uint64_t v3 = v22;
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_release();
    }
  }
  else
  {
    uint64_t v23 = type metadata accessor for GenericError();
    sub_100A33578();
    swift_allocError();
    strcpy(v24, "Missing UDID!");
    *((_WORD *)v24 + sub_100A2F554("Can't update non-existant safe location with identifier: %s.", 7) = -4864;
    (*(void (**)(char *, void, uint64_t))(*(void *)(v23 - 8) + 104))(v24, enum case for GenericError.error(_:), v23);
    swift_willThrow();
  }
  return v3;
}

unint64_t sub_100A33578()
{
  unint64_t result = qword_10163A240;
  if (!qword_10163A240)
  {
    type metadata accessor for GenericError();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10163A240);
  }
  return result;
}

unint64_t sub_100A335D0()
{
  unint64_t result = qword_101655710;
  if (!qword_101655710)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_101655710);
  }
  return result;
}

uint64_t destroy for MetricsRequest.Body()
{
  swift_bridgeObjectRelease();

  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for MetricsRequest.Body(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v3;
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 72);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

void *assignWithCopy for MetricsRequest.Body(void *a1, void *a2)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  a1[3] = a2[3];
  a1[4] = a2[4];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[5] = a2[5];
  a1[6] = a2[6];
  a1[7] = a2[7];
  a1[8] = a2[8];
  a1[9] = a2[9];
  a1[10] = a2[10];
  return a1;
}

uint64_t assignWithTake for MetricsRequest.Body(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v4;
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 72);
  return a1;
}

ValueMetadata *type metadata accessor for MetricsRequest.Body()
{
  return &type metadata for MetricsRequest.Body;
}

uint64_t *destroy for TagUserStatistics(uint64_t *result)
{
  unint64_t v1 = result[1];
  if (v1 >> 60 != 15) {
    return (uint64_t *)sub_10001CFB8(*result, v1);
  }
  return result;
}

uint64_t _s12searchpartyd14MetricsRequestVwCP_0(uint64_t a1, uint64_t *a2)
{
  unint64_t v3 = a2[1];
  if (v3 >> 60 == 15)
  {
    *(_OWORD *)a1 = *(_OWORD *)a2;
  }
  else
  {
    uint64_t v4 = *a2;
    sub_1000361E0(*a2, a2[1]);
    *(void *)a1 = v4;
    *(void *)(a1 + 8) = v3;
  }
  return a1;
}

uint64_t *assignWithCopy for MetricsRequest(uint64_t *a1, uint64_t a2)
{
  unint64_t v4 = *(void *)(a2 + 8);
  if ((unint64_t)a1[1] >> 60 != 15)
  {
    if (v4 >> 60 != 15)
    {
      uint64_t v6 = *(void *)a2;
      sub_1000361E0(*(void *)a2, *(void *)(a2 + 8));
      uint64_t v7 = *a1;
      unint64_t v8 = a1[1];
      *a1 = v6;
      a1[1] = v4;
      sub_10001CFB8(v7, v8);
      return a1;
    }
    sub_1001356D0((uint64_t)a1);
    goto LABEL_6;
  }
  if (v4 >> 60 == 15)
  {
LABEL_6:
    *(_OWORD *)a1 = *(_OWORD *)a2;
    return a1;
  }
  uint64_t v5 = *(void *)a2;
  sub_1000361E0(*(void *)a2, *(void *)(a2 + 8));
  *a1 = v5;
  a1[1] = v4;
  return a1;
}

uint64_t *assignWithTake for MetricsRequest(uint64_t *a1, uint64_t *a2)
{
  unint64_t v4 = a1[1];
  if (v4 >> 60 != 15)
  {
    unint64_t v5 = a2[1];
    if (v5 >> 60 != 15)
    {
      uint64_t v6 = *a1;
      *a1 = *a2;
      a1[1] = v5;
      sub_10001CFB8(v6, v4);
      return a1;
    }
    sub_1001356D0((uint64_t)a1);
  }
  *(_OWORD *)a1 = *(_OWORD *)a2;
  return a1;
}

uint64_t getEnumTagSinglePayload for MetricsRequest(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0xC && *(unsigned char *)(a1 + 16)) {
    return (*(_DWORD *)a1 + 12);
  }
  uint64_t v3 = *(void *)(a1 + 8) >> 60;
  if (((4 * v3) & 0xC) != 0) {
    int v4 = 14 - ((4 * v3) & 0xC | (v3 >> 2));
  }
  else {
    int v4 = -1;
  }
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for MetricsRequest(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xB)
  {
    *(void *)unint64_t result = a2 - 12;
    *(void *)(result + 8) = 0;
    if (a3 >= 0xC) {
      *(unsigned char *)(result + 16) = 1;
    }
  }
  else
  {
    if (a3 >= 0xC) {
      *(unsigned char *)(result + 16) = 0;
    }
    if (a2)
    {
      *(void *)unint64_t result = 0;
      *(void *)(result + 8) = (unint64_t)((4 * (a2 ^ 0xF)) | ((a2 ^ 0xF) >> 2)) << 60;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for MetricsRequest()
{
  return &type metadata for MetricsRequest;
}

unint64_t sub_100A33A28()
{
  unint64_t result = qword_101655718;
  if (!qword_101655718)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_101655718);
  }
  return result;
}

unint64_t sub_100A33A80()
{
  unint64_t result = qword_101655720;
  if (!qword_101655720)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_101655720);
  }
  return result;
}

unint64_t sub_100A33AD4()
{
  unint64_t result = qword_101655730;
  if (!qword_101655730)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_101655730);
  }
  return result;
}

unint64_t sub_100A33B28()
{
  unint64_t result = qword_101655738;
  if (!qword_101655738)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_101655738);
  }
  return result;
}

unint64_t sub_100A33B7C()
{
  unint64_t v0 = sub_10092D8F8((uint64_t)&off_1015A57F8);
  id v1 = sub_100F7FC24();
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  unint64_t v5 = v0;
  sub_1001EE9C8((uint64_t)v1, (uint64_t)sub_100BD6E00, 0, isUniquelyReferenced_nonNull_native, &v5);
  unint64_t v3 = v5;
  swift_bridgeObjectRelease();
  return v3;
}

uint64_t sub_100A33C18(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 0x656372756F73 && a2 == 0xE600000000000000;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x6D617473656D6974 && a2 == 0xE900000000000070 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 1684628597 && a2 == 0xE400000000000000 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else if (a1 == 0x6E756F436D657469 && a2 == 0xEA00000000007374)
  {
    swift_bridgeObjectRelease();
    return 3;
  }
  else
  {
    char v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v6) {
      return 3;
    }
    else {
      return 4;
    }
  }
}

uint64_t sub_100A33DD4@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v5 = sub_10000588C(&qword_101655740);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  unint64_t v8 = (char *)&v19 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10001CD44(a1, a1[3]);
  sub_100A33AD4();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v2) {
    return _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)a1);
  }
  LOBYTE(v24) = 0;
  uint64_t v9 = KeyedDecodingContainer.decode(_:forKey:)();
  uint64_t v11 = v10;
  LOBYTE(v24) = 1;
  swift_bridgeObjectRetain();
  uint64_t v23 = KeyedDecodingContainer.decode(_:forKey:)();
  LOBYTE(v24) = 2;
  uint64_t v21 = KeyedDecodingContainer.decode(_:forKey:)();
  char v28 = 3;
  uint64_t v13 = v12;
  sub_100A340C0();
  uint64_t v22 = v13;
  swift_bridgeObjectRetain();
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  long long v19 = v25;
  long long v20 = v24;
  uint64_t v14 = v26;
  uint64_t v15 = v27;
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)a1);
  uint64_t v16 = v22;
  swift_bridgeObjectRelease();
  uint64_t result = swift_bridgeObjectRelease();
  *(void *)a2 = v9;
  *(void *)(a2 + 8) = v11;
  uint64_t v18 = v21;
  *(void *)(a2 + 16) = v23;
  *(void *)(a2 + 24) = v18;
  *(void *)(a2 + 32) = v16;
  *(_OWORD *)(a2 + 40) = v20;
  *(_OWORD *)(a2 + 56) = v19;
  *(void *)(a2 + 72) = v14;
  *(void *)(a2 + 80) = v15;
  return result;
}

unint64_t sub_100A340C0()
{
  unint64_t result = qword_101655748;
  if (!qword_101655748)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_101655748);
  }
  return result;
}

unsigned char *storeEnumTagSinglePayload for MetricsRequest.Body.CodingKeys(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 3 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 3) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFD) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFC)
  {
    unsigned int v6 = ((a2 - 253) >> 8) + 1;
    *unint64_t result = a2 + 3;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x100A341E0);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 3;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for MetricsRequest.Body.CodingKeys()
{
  return &type metadata for MetricsRequest.Body.CodingKeys;
}

uint64_t getEnumTagSinglePayload for ItemCounts(uint64_t a1, int a2)
{
  if (a2 && *(unsigned char *)(a1 + 48)) {
    return (*(_DWORD *)a1 + 1);
  }
  else {
    return 0;
  }
}

uint64_t storeEnumTagSinglePayload for ItemCounts(uint64_t result, int a2, int a3)
{
  if (a2)
  {
    *(void *)(result + 40) = 0;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)unint64_t result = (a2 - 1);
    if (!a3) {
      return result;
    }
    char v3 = 1;
  }
  else
  {
    if (!a3) {
      return result;
    }
    char v3 = 0;
  }
  *(unsigned char *)(result + 48) = v3;
  return result;
}

ValueMetadata *type metadata accessor for ItemCounts()
{
  return &type metadata for ItemCounts;
}

unint64_t sub_100A34284()
{
  unint64_t result = qword_101655750;
  if (!qword_101655750)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_101655750);
  }
  return result;
}

unint64_t sub_100A342DC()
{
  unint64_t result = qword_101655758;
  if (!qword_101655758)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_101655758);
  }
  return result;
}

unint64_t sub_100A34334()
{
  unint64_t result = qword_101655760;
  if (!qword_101655760)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_101655760);
  }
  return result;
}

unint64_t sub_100A34388()
{
  unint64_t result = qword_101655770;
  if (!qword_101655770)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_101655770);
  }
  return result;
}

uint64_t sub_100A343DC(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 0x3156676174726961 && a2 == 0xE800000000000000;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x3256676174726961 && a2 == 0xE800000000000000 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0x3156616E6D66 && a2 == 0xE600000000000000 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else if (a1 == 0x3256616E6D66 && a2 == 0xE600000000000000 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 3;
  }
  else if (a1 == 0x6E6D66656C707061 && a2 == 0xEB00000000315661 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 4;
  }
  else if (a1 == 0x6E6D66656C707061 && a2 == 0xEB00000000325661)
  {
    swift_bridgeObjectRelease();
    return 5;
  }
  else
  {
    char v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v6) {
      return 5;
    }
    else {
      return 6;
    }
  }
}

uint64_t sub_100A3465C@<X0>(void *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v5 = sub_10000588C(&qword_101655778);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  unint64_t v8 = (char *)&v14 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10001CD44(a1, a1[3]);
  sub_100A34388();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v2) {
    return _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)a1);
  }
  char v23 = 0;
  uint64_t v9 = KeyedDecodingContainer.decode(_:forKey:)();
  char v22 = 1;
  uint64_t v10 = KeyedDecodingContainer.decode(_:forKey:)();
  char v21 = 2;
  uint64_t v17 = KeyedDecodingContainer.decode(_:forKey:)();
  char v20 = 3;
  uint64_t v16 = KeyedDecodingContainer.decode(_:forKey:)();
  char v19 = 4;
  uint64_t v15 = KeyedDecodingContainer.decode(_:forKey:)();
  char v18 = 5;
  uint64_t v11 = KeyedDecodingContainer.decode(_:forKey:)();
  (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  uint64_t result = _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)a1);
  *a2 = v9;
  a2[1] = v10;
  uint64_t v13 = v16;
  a2[2] = v17;
  a2[3] = v13;
  a2[4] = v15;
  a2[5] = v11;
  return result;
}

unsigned char *storeEnumTagSinglePayload for ItemCounts.CodingKeys(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 5 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 5) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFB) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFA)
  {
    unsigned int v6 = ((a2 - 251) >> 8) + 1;
    *uint64_t result = a2 + 5;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x100A34984);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 5;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for ItemCounts.CodingKeys()
{
  return &type metadata for ItemCounts.CodingKeys;
}

unint64_t sub_100A349C0()
{
  unint64_t result = qword_101655780;
  if (!qword_101655780)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_101655780);
  }
  return result;
}

unint64_t sub_100A34A18()
{
  unint64_t result = qword_101655788;
  if (!qword_101655788)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_101655788);
  }
  return result;
}

unint64_t sub_100A34A70()
{
  unint64_t result = qword_101655790;
  if (!qword_101655790)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_101655790);
  }
  return result;
}

void sub_100A34AC4(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_10000588C(&qword_101649E40);
  __chkstk_darwin(v4 - 8);
  unsigned int v6 = (char *)&v12 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100020260(a1, (uint64_t)v6);
  uint64_t v7 = type metadata accessor for URL();
  uint64_t v8 = *(void *)(v7 - 8);
  uint64_t v10 = 0;
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v8 + 48))(v6, 1, v7) != 1)
  {
    URL._bridgeToObjectiveC()(v9);
    uint64_t v10 = v11;
    (*(void (**)(char *, uint64_t))(v8 + 8))(v6, v7);
  }
  (*(void (**)(uint64_t, void *))(a2 + 16))(a2, v10);
}

id sub_100A34E98()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for UnknownDiscoveryTrampoline();
  return [super dealloc];
}

uint64_t type metadata accessor for UnknownDiscoveryTrampoline()
{
  return self;
}

uint64_t sub_100A34F00()
{
  _Block_release(*(const void **)(v0 + 16));

  return _swift_deallocObject(v0, 24, 7);
}

ValueMetadata *type metadata accessor for AirpodsPairingSpec1_0()
{
  return &type metadata for AirpodsPairingSpec1_0;
}

unint64_t sub_100A34F58()
{
  unint64_t result = qword_101655830;
  if (!qword_101655830)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_101655830);
  }
  return result;
}

uint64_t sub_100A34FAC@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X2>, unint64_t a4@<X3>, uint64_t a5@<X4>, unint64_t a6@<X5>, uint64_t a7@<X6>, unint64_t a8@<X7>, uint64_t a9@<X8>, uint64_t a10, unint64_t a11, uint64_t a12, unint64_t a13)
{
  sub_1002B3344(a1, a2, a3, a4, a5, a6, a7, a8, v23, a10, a11, a12, a13);
  v24[0] = v23[0];
  v24[1] = v23[1];
  v24[2] = v23[2];
  v24[3] = v23[3];
  v24[4] = v23[4];
  __n128 v24[5] = v23[5];
  sub_100A38A48(v24);
  sub_100A38824((uint64_t)v24, a9);
  sub_1000361E0(a1, a2);
  sub_1000361E0(a3, a4);
  sub_1000361E0(a5, a6);
  sub_1000361E0(a7, a8);
  sub_100037A38(a10, a11);
  return sub_100037A38(a12, a13);
}

uint64_t sub_100A35098@<X0>(uint64_t a1@<X8>)
{
  static Data.random(bytes:)();
  sub_100157248();
  uint64_t result = BinaryDecodable.init(data:)();
  if (!v1)
  {
    sub_100A3898C((uint64_t)v4);
    return sub_100A38824((uint64_t)v4, a1);
  }
  return result;
}

uint64_t sub_100A35124(uint64_t *a1, void *a2, uint64_t a3, unint64_t a4)
{
  uint64_t result = sub_100A8AEE4(a3, a4);
  if (!v4)
  {
    uint64_t v10 = result;
    unint64_t v11 = v8;
    uint64_t v12 = v9;
    sub_1000361E0(result, v8);
    sub_100435190(v10, v11, v15);
    uint64_t v13 = v15[0];
    uint64_t v14 = v15[1];
    a1[3] = (uint64_t)&type metadata for CollaborativeKeyGen.v1.C2;
    a1[4] = sub_100061FCC();
    *a1 = v13;
    a1[1] = v14;
    a2[3] = type metadata accessor for CollaborativeKeyGen.v1.OwnerContext();
    a2[4] = &off_1015E6CC0;
    uint64_t result = sub_10001CFB8(v10, v11);
    *a2 = v12;
  }
  return result;
}

unint64_t sub_100A35208()
{
  unint64_t result = qword_101655888;
  if (!qword_101655888)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_101655888);
  }
  return result;
}

unint64_t sub_100A35264()
{
  unint64_t result = qword_101655890;
  if (!qword_101655890)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_101655890);
  }
  return result;
}

unint64_t sub_100A352C0()
{
  unint64_t result = qword_101655898;
  if (!qword_101655898)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_101655898);
  }
  return result;
}

unint64_t sub_100A35318()
{
  unint64_t result = qword_1016558A0;
  if (!qword_1016558A0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1016558A0);
  }
  return result;
}

unint64_t sub_100A35374()
{
  unint64_t result = qword_1016558A8;
  if (!qword_1016558A8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1016558A8);
  }
  return result;
}

unint64_t sub_100A353CC()
{
  unint64_t result = qword_1016558B0;
  if (!qword_1016558B0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1016558B0);
  }
  return result;
}

unint64_t sub_100A35424()
{
  unint64_t result = qword_1016558B8;
  if (!qword_1016558B8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1016558B8);
  }
  return result;
}

unint64_t sub_100A3547C()
{
  unint64_t result = qword_1016558C0;
  if (!qword_1016558C0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1016558C0);
  }
  return result;
}

uint64_t sub_100A354D4()
{
  sub_100A38824(v0, (uint64_t)v3);
  uint64_t v1 = sub_100A39448((uint64_t)v3);
  uint64_t result = 0;
  switch(v1)
  {
    case 1:
      sub_100A398F0((uint64_t)v3);
      uint64_t result = 2;
      break;
    case 2:
      sub_100A398F0((uint64_t)v3);
      uint64_t result = 3;
      break;
    case 3:
      sub_100A398F0((uint64_t)v3);
      uint64_t result = 4;
      break;
    case 4:
      sub_100A398F0((uint64_t)v3);
      uint64_t result = 5;
      break;
    case 5:
      sub_100A398F0((uint64_t)v3);
      uint64_t result = 6;
      break;
    case 6:
      sub_100A398F0((uint64_t)v3);
      uint64_t result = 7;
      break;
    case 7:
      sub_100A398F0((uint64_t)v3);
      uint64_t result = 9;
      break;
    case 8:
      sub_100A398F0((uint64_t)v3);
      uint64_t result = 10;
      break;
    case 9:
      return result;
    case 10:
      uint64_t result = 8;
      break;
    case 11:
      uint64_t result = 11;
      break;
    default:
      sub_100A398F0((uint64_t)v3);
      uint64_t result = 1;
      break;
  }
  return result;
}

uint64_t *sub_100A355FC@<X0>(uint64_t *a1@<X8>)
{
  sub_100A38824(v1, (uint64_t)v90);
  sub_100A38824((uint64_t)v90, (uint64_t)v92);
  sub_100A38824(v1, (uint64_t)v91);
  switch(sub_100A39448((uint64_t)v91))
  {
    case 1u:
      uint64_t v11 = sub_100A398F0((uint64_t)v91);
      long long v80 = *(_OWORD *)(v11 + 16);
      long long v85 = *(_OWORD *)v11;
      long long v75 = *(_OWORD *)(v11 + 48);
      long long v77 = *(_OWORD *)(v11 + 32);
      uint64_t v12 = *(void *)(v11 + 64);
      uint64_t v13 = *(void *)(v11 + 72);
      a1[3] = (uint64_t)&type metadata for AirPodsInitiatePairingCommandPayload;
      a1[4] = sub_100A35264();
      uint64_t v14 = swift_allocObject();
      *a1 = v14;
      *(_OWORD *)(v14 + 16) = v85;
      *(_OWORD *)(v14 + 32) = v80;
      *(_OWORD *)(v14 + 48) = v77;
      *(_OWORD *)(v14 + 64) = v75;
      *(void *)(v14 + 80) = v12;
      *(void *)(v14 + 88) = v13;
      sub_100A38824((uint64_t)v92, (uint64_t)v89);
      uint64_t v15 = (uint64_t *)sub_100A398F0((uint64_t)v89);
      uint64_t v16 = v15[2];
      unint64_t v17 = v15[3];
      uint64_t v18 = v15[4];
      unint64_t v19 = v15[5];
      uint64_t v20 = v15[6];
      unint64_t v21 = v15[7];
      uint64_t v22 = v15[8];
      unint64_t v23 = v15[9];
      sub_1000361E0(*v15, v15[1]);
      sub_1000361E0(v16, v17);
      sub_1000361E0(v18, v19);
      sub_1000361E0(v20, v21);
      return (uint64_t *)sub_100037A38(v22, v23);
    case 2u:
      long long v24 = (const void *)sub_100A398F0((uint64_t)v91);
      a1[3] = (uint64_t)&type metadata for AirPodsSendPairingDataCommandPayloadv1;
      a1[4] = sub_100A35374();
      goto LABEL_6;
    case 3u:
      long long v24 = (const void *)sub_100A398F0((uint64_t)v91);
      a1[3] = (uint64_t)&type metadata for AirPodsSendPairingDataCommandPayloadv2;
      a1[4] = sub_100A353CC();
LABEL_6:
      uint64_t v25 = swift_allocObject();
      *a1 = v25;
      memmove((void *)(v25 + 16), v24, 0xB8uLL);
      sub_100A38824((uint64_t)v92, (uint64_t)v89);
      uint64_t v26 = (uint64_t *)sub_100A398F0((uint64_t)v89);
      return sub_100A397E0(v26);
    case 4u:
      uint64_t v27 = (const void *)sub_100A398F0((uint64_t)v91);
      a1[3] = (uint64_t)&type metadata for AirPodsSendPairingDataCommandPayloadv3;
      a1[4] = sub_100A35424();
      uint64_t v28 = swift_allocObject();
      *a1 = v28;
      memmove((void *)(v28 + 16), v27, 0xC8uLL);
      sub_100A38824((uint64_t)v92, (uint64_t)v89);
      uint64_t v29 = (uint64_t *)sub_100A398F0((uint64_t)v89);
      return sub_100A39624(v29);
    case 5u:
      uint64_t v30 = sub_100A398F0((uint64_t)v91);
      long long v81 = *(_OWORD *)(v30 + 16);
      long long v86 = *(_OWORD *)v30;
      long long v76 = *(_OWORD *)(v30 + 48);
      long long v78 = *(_OWORD *)(v30 + 32);
      long long v74 = *(_OWORD *)(v30 + 64);
      uint64_t v31 = *(void *)(v30 + 80);
      uint64_t v32 = *(void *)(v30 + 88);
      a1[3] = (uint64_t)&type metadata for AirPodsFinalizePairingCommandPayload;
      a1[4] = sub_100A35208();
      uint64_t v33 = swift_allocObject();
      *a1 = v33;
      *(_OWORD *)(v33 + 16) = v86;
      *(_OWORD *)(v33 + 32) = v81;
      *(_OWORD *)(v33 + 48) = v78;
      *(_OWORD *)(v33 + 64) = v76;
      *(_OWORD *)(v33 + 80) = v74;
      *(void *)(v33 + 96) = v31;
      *(void *)(v33 + 104) = v32;
      sub_100A38824((uint64_t)v92, (uint64_t)v89);
      long long v34 = (uint64_t *)sub_100A398F0((uint64_t)v89);
      uint64_t v35 = v34[2];
      unint64_t v36 = v34[3];
      uint64_t v37 = v34[4];
      unint64_t v38 = v34[5];
      uint64_t v39 = v34[6];
      unint64_t v40 = v34[7];
      uint64_t v41 = v34[8];
      unint64_t v42 = v34[9];
      uint64_t v43 = v34[10];
      unint64_t v44 = v34[11];
      sub_1000361E0(*v34, v34[1]);
      sub_1000361E0(v35, v36);
      sub_1000361E0(v37, v38);
      sub_1000361E0(v39, v40);
      sub_100037A38(v41, v42);
      return (uint64_t *)sub_100037A38(v43, v44);
    case 6u:
      uint64_t v45 = sub_100A398F0((uint64_t)v91);
      long long v82 = *(_OWORD *)(v45 + 16);
      long long v87 = *(_OWORD *)v45;
      uint64_t v46 = *(void *)(v45 + 32);
      uint64_t v47 = *(void *)(v45 + 40);
      a1[3] = (uint64_t)&type metadata for AirPodsSendPairingStatusCommandPayload;
      a1[4] = sub_100A3547C();
      uint64_t v48 = swift_allocObject();
      *a1 = v48;
      *(_OWORD *)(v48 + 16) = v87;
      *(_OWORD *)(v48 + 32) = v82;
      *(void *)(v48 + 48) = v46;
      *(void *)(v48 + 56) = v47;
      sub_100A38824((uint64_t)v92, (uint64_t)v89);
      unint64_t v49 = (uint64_t *)sub_100A398F0((uint64_t)v89);
      uint64_t v50 = v49[2];
      unint64_t v51 = v49[3];
      uint64_t v52 = v49[4];
      unint64_t v53 = v49[5];
      sub_1000361E0(*v49, v49[1]);
      sub_1000361E0(v50, v51);
      return (uint64_t *)sub_1000361E0(v52, v53);
    case 7u:
      unint64_t v54 = (uint64_t *)sub_100A398F0((uint64_t)v91);
      uint64_t v55 = *v54;
      uint64_t v56 = v54[1];
      a1[3] = (uint64_t)&type metadata for AirPodsPairingEligibilityDataCommandPayload;
      a1[4] = sub_100A352C0();
      *a1 = v55;
      a1[1] = v56;
      sub_100A38824((uint64_t)v92, (uint64_t)v89);
      uint64_t v57 = sub_100A398F0((uint64_t)v89);
      return (uint64_t *)sub_1000361E0(*(void *)v57, *(void *)(v57 + 8));
    case 8u:
      uint64_t v58 = sub_100A398F0((uint64_t)v91);
      uint64_t v59 = *(void *)(v58 + 16);
      uint64_t v60 = *(void *)(v58 + 24);
      int v61 = *(_DWORD *)(v58 + 32);
      long long v83 = *(_OWORD *)(v58 + 40);
      long long v88 = *(_OWORD *)v58;
      long long v79 = *(_OWORD *)(v58 + 56);
      uint64_t v62 = *(void *)(v58 + 72);
      uint64_t v63 = *(void *)(v58 + 80);
      a1[3] = (uint64_t)&type metadata for AirPodsPairingEligibilityDataResponseCommandPayload;
      a1[4] = sub_100A35318();
      uint64_t v64 = swift_allocObject();
      *a1 = v64;
      *(_OWORD *)(v64 + 16) = v88;
      *(void *)(v64 + 32) = v59;
      *(void *)(v64 + 40) = v60;
      *(_DWORD *)(v64 + 48) = v61;
      *(_OWORD *)(v64 + 56) = v83;
      *(_OWORD *)(v64 + 72) = v79;
      *(void *)(v64 + 88) = v62;
      *(void *)(v64 + 96) = v63;
      sub_100A38824((uint64_t)v92, (uint64_t)v89);
      uint64_t v65 = (uint64_t *)sub_100A398F0((uint64_t)v89);
      uint64_t v66 = v65[2];
      unint64_t v67 = v65[3];
      uint64_t v68 = v65[5];
      unint64_t v69 = v65[6];
      uint64_t v70 = v65[7];
      unint64_t v71 = v65[8];
      uint64_t v72 = v65[9];
      unint64_t v73 = v65[10];
      sub_1000361E0(*v65, v65[1]);
      sub_1000361E0(v66, v67);
      sub_1000361E0(v68, v69);
      sub_1000361E0(v70, v71);
      return (uint64_t *)sub_1000361E0(v72, v73);
    case 9u:
      a1[3] = (uint64_t)&type metadata for AccessoryGenericPayload;
      uint64_t result = (uint64_t *)sub_10006258C();
      goto LABEL_15;
    case 0xAu:
      a1[3] = (uint64_t)&type metadata for AirPodsPairingCompleteCommandPayload;
      uint64_t result = (uint64_t *)sub_100157808();
      goto LABEL_15;
    case 0xBu:
      a1[3] = (uint64_t)&type metadata for UnpairCommandPayload;
      uint64_t result = (uint64_t *)sub_100062118();
LABEL_15:
      a1[4] = (uint64_t)result;
      break;
    default:
      uint64_t v3 = sub_100A398F0((uint64_t)v91);
      long long v84 = *(_OWORD *)v3;
      uint64_t v4 = *(void *)(v3 + 16);
      uint64_t v5 = *(void *)(v3 + 24);
      a1[3] = (uint64_t)&type metadata for AirPodsSendBeaconGroupDataCommandPayload;
      a1[4] = sub_1000624F4();
      uint64_t v6 = swift_allocObject();
      *a1 = v6;
      *(_OWORD *)(v6 + 16) = v84;
      *(void *)(v6 + 32) = v4;
      *(void *)(v6 + 40) = v5;
      sub_100A38824((uint64_t)v92, (uint64_t)v89);
      uint64_t v7 = (uint64_t *)sub_100A398F0((uint64_t)v89);
      uint64_t v8 = v7[2];
      unint64_t v9 = v7[3];
      sub_1000361E0(*v7, v7[1]);
      uint64_t result = (uint64_t *)sub_1000361E0(v8, v9);
      break;
  }
  return result;
}

uint64_t *sub_100A35BF8@<X0>(uint64_t *a1@<X8>)
{
  sub_100A38824(v1, (uint64_t)v4);
  return sub_100A355FC(a1);
}

uint64_t sub_100A35C38()
{
  sub_100A38824(v0, (uint64_t)v2);
  return sub_100A354D4();
}

unint64_t sub_100A35C70(uint64_t a1)
{
  *(void *)(a1 + 8) = sub_100A35CA0();
  unint64_t result = sub_100A35CF4();
  *(void *)(a1 + 16) = result;
  return result;
}

unint64_t sub_100A35CA0()
{
  unint64_t result = qword_101655A10;
  if (!qword_101655A10)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_101655A10);
  }
  return result;
}

unint64_t sub_100A35CF4()
{
  unint64_t result = qword_101655A18;
  if (!qword_101655A18)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_101655A18);
  }
  return result;
}

uint64_t sub_100A35D48@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_100A35DF0(a1, (uint64_t (*)(void))sub_100A37940, (void (*)(void *__return_ptr, uint64_t, unsigned char *))sub_100A38128, (void (*)(_WORD *, uint64_t))sub_100A38824, a2);
}

uint64_t sub_100A35D9C@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_100A35DF0(a1, (uint64_t (*)(void))sub_100A3780C, (void (*)(void *__return_ptr, uint64_t, unsigned char *))sub_100A37A74, (void (*)(_WORD *, uint64_t))sub_100A399B4, a2);
}

uint64_t sub_100A35DF0@<X0>(void *a1@<X0>, uint64_t (*a2)(void)@<X1>, void (*a3)(void *__return_ptr, uint64_t, unsigned char *)@<X2>, void (*a4)(_WORD *, uint64_t)@<X3>, uint64_t a5@<X8>)
{
  void (*v14)(void *__return_ptr, uint64_t, unsigned char *);
  __int16 v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unsigned char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  void (*v29)(_WORD *, uint64_t);
  void (*v31)(_WORD *, uint64_t);
  uint64_t v32;
  uint64_t (*v33)(void);
  void (*v34)(void *__return_ptr, uint64_t, unsigned char *);
  _WORD v35[100];
  unsigned char v36[40];
  void v37[25];
  uint64_t v38[5];
  unsigned char v39[24];
  uint64_t v40;
  void *v41;

  uint64_t v31 = a4;
  uint64_t v32 = a5;
  uint64_t v33 = a2;
  long long v34 = a3;
  uint64_t v7 = type metadata accessor for Endianness();
  uint64_t v8 = *(void *)(v7 - 8);
  __chkstk_darwin(v7);
  uint64_t v10 = (char *)&v31 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = a1[3];
  uint64_t v41 = a1;
  sub_10001CD44(a1, v11);
  dispatch thunk of BinaryDecoding.container()();
  sub_1000BD078((uint64_t)v39, v40);
  sub_100179818();
  dispatch thunk of BinaryDecodingContaining.decode<A>(_:)();
  if (v5)
  {
    uint64_t v12 = (uint64_t)v41;
  }
  else
  {
    uint64_t v13 = v33;
    uint64_t v14 = v34;
    LOWORD(v38[0]) = v35[0];
    static Endianness.current.getter();
    FixedWidthInteger.convert(to:)();
    (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v7);
    uint64_t v15 = v37[0];
    uint64_t v16 = sub_1010E3750(v37[0]);
    if (v16 == 12)
    {
      static os_log_type_t.error.getter();
      uint64_t v12 = (uint64_t)v41;
      if (qword_101637308 != -1) {
        swift_once();
      }
      sub_10000588C((uint64_t *)&unk_10163AD00);
      unint64_t v17 = swift_allocObject();
      *(_OWORD *)(v17 + 16) = xmmword_101342130;
      LOWORD(v37[0]) = v15;
      uint64_t v18 = FixedWidthInteger.data.getter();
      uint64_t v20 = v19;
      unint64_t v21 = Data.hexString.getter();
      unint64_t v23 = v22;
      sub_10001CFB8(v18, v20);
      *(void *)(v17 + 56) = &type metadata for String;
      *(void *)(v17 + 64) = sub_10000B4CC();
      *(void *)(v17 + 32) = v21;
      *(void *)(v17 + 40) = v23;
      os_log(_:dso:log:_:_:)();
      swift_bridgeObjectRelease();
      sub_100A387D0();
      swift_allocError();
      *long long v24 = 1;
      swift_willThrow();
    }
    else
    {
      uint64_t v25 = v16;
      uint64_t v26 = v13();
      uint64_t v28 = v27;
      uint64_t v12 = (uint64_t)v41;
      sub_10001D010((uint64_t)v41, (uint64_t)v37);
      v38[3] = v26;
      v38[4] = v28;
      sub_10001D958(v38);
      dispatch thunk of BinaryDecodable.init(from:)();
      sub_10001D010((uint64_t)v38, (uint64_t)v36);
      v14(v37, v25, v36);
      uint64_t v29 = v31;
      v31(v37, (uint64_t)v35);
      v29(v35, v32);
      _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)v38);
    }
  }
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)v39);
  return _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v12);
}

uint64_t sub_100A3617C(void *a1)
{
  sub_100A38824(v1, (uint64_t)v4);
  return sub_100A361CC(a1);
}

uint64_t sub_100A361CC(void *a1)
{
  uint64_t v2 = type metadata accessor for Endianness();
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  uint64_t v5 = (char *)&v22 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10001CD44(a1, a1[3]);
  dispatch thunk of BinaryEncoding.container()();
  unsigned __int8 v6 = sub_100A354D4();
  LOWORD(v44) = word_101374D7C[v6];
  static Endianness.current.getter();
  sub_100179818();
  FixedWidthInteger.convert(to:)();
  (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
  LOWORD(v44) = v51;
  sub_1000BD078((uint64_t)v64, v65);
  uint64_t v7 = v66;
  dispatch thunk of BinaryEncodingContaining.encode<A>(_:)();
  if (!v7)
  {
    switch(v6)
    {
      case 1u:
        sub_100A355FC((uint64_t *)&v51);
        sub_10000588C(&qword_101639B68);
        if ((swift_dynamicCast() & 1) == 0) {
          goto LABEL_28;
        }
        long long v8 = v31;
        long long v9 = v32;
        long long v44 = v31;
        long long v45 = v32;
        sub_1000BD078((uint64_t)v64, v65);
        sub_10033C228();
        dispatch thunk of BinaryEncodingContaining.encode<A>(_:)();
        sub_100A393F8(v8, *((unint64_t *)&v8 + 1), v9, *((unint64_t *)&v9 + 1));
        return _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)v64);
      case 2u:
        sub_100A355FC((uint64_t *)&v31);
        sub_10000588C(&qword_101639B68);
        if ((swift_dynamicCast() & 1) == 0) {
          goto LABEL_28;
        }
        uint64_t v66 = v44;
        uint64_t v28 = v45;
        unint64_t v29 = *((void *)&v44 + 1);
        long long v10 = v46;
        uint64_t v26 = v47;
        unint64_t v27 = *((void *)&v45 + 1);
        unint64_t v25 = *((void *)&v47 + 1);
        long long v11 = v48;
        long long v51 = v44;
        long long v52 = v45;
        long long v53 = v46;
        long long v54 = v47;
        long long v55 = v48;
        sub_1000BD078((uint64_t)v64, v65);
        sub_100719890();
        dispatch thunk of BinaryEncodingContaining.encode<A>(_:)();
        sub_100A39358(v66, v29, v28, v27, v10, *((unint64_t *)&v10 + 1), v26, v25, v11, *((unint64_t *)&v11 + 1));
        return _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)v64);
      case 3u:
        sub_100A355FC(v50);
        sub_10000588C(&qword_101639B68);
        if ((swift_dynamicCast() & 1) == 0) {
          goto LABEL_28;
        }
        SharingCircleWildAdvertisementKey.init(key:)(&v44);
        sub_10001D608((uint64_t)&v44, (uint64_t)v30, &qword_101655A38);
        sub_10001D608((uint64_t)v30, (uint64_t)&v31, &qword_101655A38);
        long long v59 = v39;
        long long v60 = v40;
        long long v61 = v41;
        *(void *)&long long v62 = v42;
        long long v55 = v35;
        long long v56 = v36;
        long long v57 = v37;
        long long v58 = v38;
        long long v51 = v31;
        long long v52 = v32;
        long long v53 = v33;
        long long v54 = v34;
        sub_1000BD078((uint64_t)v64, v65);
        sub_100A39160();
        dispatch thunk of BinaryEncodingContaining.encode<A>(_:)();
        sub_100A391B4((uint64_t)v30);
        return _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)v64);
      case 4u:
        sub_100A355FC(v50);
        sub_10000588C(&qword_101639B68);
        if ((swift_dynamicCast() & 1) == 0) {
          goto LABEL_28;
        }
        SharingCircleWildAdvertisementKey.init(key:)(&v44);
        sub_10001D608((uint64_t)&v44, (uint64_t)v30, &qword_101655A30);
        sub_10001D608((uint64_t)v30, (uint64_t)&v31, &qword_101655A30);
        long long v59 = v39;
        long long v60 = v40;
        long long v61 = v41;
        *(void *)&long long v62 = v42;
        long long v55 = v35;
        long long v56 = v36;
        long long v57 = v37;
        long long v58 = v38;
        long long v51 = v31;
        long long v52 = v32;
        long long v53 = v33;
        long long v54 = v34;
        sub_1000BD078((uint64_t)v64, v65);
        sub_1008DFFB8();
        dispatch thunk of BinaryEncodingContaining.encode<A>(_:)();
        sub_100A391B4((uint64_t)v30);
        return _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)v64);
      case 5u:
        sub_100A355FC(v50);
        sub_10000588C(&qword_101639B68);
        if ((swift_dynamicCast() & 1) == 0) {
          goto LABEL_28;
        }
        SharingCircleWildAdvertisementKey.init(key:)(&v44);
        sub_10001D608((uint64_t)&v44, (uint64_t)v30, &qword_101655A28);
        sub_10001D608((uint64_t)v30, (uint64_t)&v31, &qword_101655A28);
        long long v61 = v41;
        long long v62 = v42;
        uint64_t v63 = v43;
        long long v57 = v37;
        long long v58 = v38;
        long long v59 = v39;
        long long v60 = v40;
        long long v53 = v33;
        long long v54 = v34;
        long long v55 = v35;
        long long v56 = v36;
        long long v51 = v31;
        long long v52 = v32;
        sub_1000BD078((uint64_t)v64, v65);
        sub_100A38F50();
        dispatch thunk of BinaryEncodingContaining.encode<A>(_:)();
        sub_100A38FA4((uint64_t)v30);
        return _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)v64);
      case 6u:
        sub_100A355FC((uint64_t *)&v31);
        sub_10000588C(&qword_101639B68);
        if ((swift_dynamicCast() & 1) == 0) {
          goto LABEL_28;
        }
        long long v12 = v48;
        long long v13 = v49;
        uint64_t v66 = v44;
        long long v51 = v44;
        uint64_t v28 = v45;
        unint64_t v29 = *((void *)&v44 + 1);
        long long v52 = v45;
        uint64_t v26 = v46;
        unint64_t v27 = *((void *)&v45 + 1);
        long long v53 = v46;
        uint64_t v24 = v47;
        unint64_t v25 = *((void *)&v46 + 1);
        long long v54 = v47;
        unint64_t v23 = *((void *)&v47 + 1);
        long long v55 = v48;
        long long v56 = v49;
        sub_1000BD078((uint64_t)v64, v65);
        sub_1002B3008();
        dispatch thunk of BinaryEncodingContaining.encode<A>(_:)();
        sub_100A38E98(v66, v29, v28, v27, v26, v25, v24, v23, v12, *((unint64_t *)&v12 + 1), v13, *((unint64_t *)&v13 + 1));
        return _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)v64);
      case 7u:
        sub_100A355FC((uint64_t *)&v31);
        sub_10000588C(&qword_101639B68);
        if ((swift_dynamicCast() & 1) == 0) {
          goto LABEL_28;
        }
        long long v14 = v45;
        long long v15 = v46;
        uint64_t v66 = v44;
        long long v51 = v44;
        unint64_t v29 = *((void *)&v44 + 1);
        long long v52 = v45;
        long long v53 = v46;
        sub_1000BD078((uint64_t)v64, v65);
        sub_100557FA0();
        dispatch thunk of BinaryEncodingContaining.encode<A>(_:)();
        sub_100A38E2C(v66, v29, v14, *((unint64_t *)&v14 + 1), v15, *((unint64_t *)&v15 + 1));
        return _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)v64);
      case 8u:
        sub_100A355FC((uint64_t *)&v51);
        sub_10000588C(&qword_101639B68);
        if ((swift_dynamicCast() & 1) == 0) {
          goto LABEL_28;
        }
        sub_1000BD078((uint64_t)v64, v65);
        sub_100A38DD8();
        goto LABEL_27;
      case 9u:
        sub_100A355FC((uint64_t *)&v51);
        sub_10000588C(&qword_101639B68);
        if ((swift_dynamicCast() & 1) == 0) {
          goto LABEL_28;
        }
        long long v16 = v31;
        long long v44 = v31;
        sub_1000BD078((uint64_t)v64, v65);
        sub_100A38D84();
        dispatch thunk of BinaryEncodingContaining.encode<A>(_:)();
        sub_100037A24(v16, *((unint64_t *)&v16 + 1));
        return _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)v64);
      case 0xAu:
        sub_100A355FC((uint64_t *)&v31);
        sub_10000588C(&qword_101639B68);
        if ((swift_dynamicCast() & 1) == 0) {
          goto LABEL_28;
        }
        uint64_t v17 = v46;
        long long v18 = v48;
        unint64_t v19 = v49;
        uint64_t v66 = v44;
        long long v51 = v44;
        uint64_t v28 = v45;
        unint64_t v29 = *((void *)&v44 + 1);
        long long v52 = v45;
        uint64_t v26 = *((void *)&v46 + 1);
        unint64_t v27 = *((void *)&v45 + 1);
        LODWORD(v53) = v46;
        *((void *)&v53 + 1) = *((void *)&v46 + 1);
        uint64_t v24 = *((void *)&v47 + 1);
        unint64_t v25 = v47;
        long long v54 = v47;
        long long v55 = v48;
        *(void *)&long long v56 = v49;
        sub_1000BD078((uint64_t)v64, v65);
        sub_1005A18AC();
        dispatch thunk of BinaryEncodingContaining.encode<A>(_:)();
        sub_100A38CE4(v66, v29, v28, v27, v17, v26, v25, v24, v18, *((uint64_t *)&v18 + 1), v19);
        return _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)v64);
      case 0xBu:
        sub_100A355FC((uint64_t *)&v51);
        sub_10000588C(&qword_101639B68);
        if ((swift_dynamicCast() & 1) == 0) {
          goto LABEL_28;
        }
        sub_1000BD078((uint64_t)v64, v65);
        sub_1001E2D8C();
        goto LABEL_27;
      default:
        sub_100A355FC((uint64_t *)&v51);
        sub_10000588C(&qword_101639B68);
        if (swift_dynamicCast())
        {
          sub_1000BD078((uint64_t)v64, v65);
          sub_1002A576C();
LABEL_27:
          dispatch thunk of BinaryEncodingContaining.encode<A>(_:)();
        }
        else
        {
LABEL_28:
          sub_100A387D0();
          swift_allocError();
          *uint64_t v20 = 0;
          swift_willThrow();
        }
        break;
    }
  }
  return _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)v64);
}

uint64_t sub_100A36CC0(void *a1)
{
  uint64_t v2 = type metadata accessor for Endianness();
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  uint64_t v5 = (char *)&v23 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10001CD44(a1, a1[3]);
  dispatch thunk of BinaryEncoding.container()();
  char v6 = sub_10106DB34();
  LOWORD(v4sub_100A2F554("Can't update non-existant safe location with identifier: %s.", 7) = word_101374D7C[v6];
  static Endianness.current.getter();
  sub_100179818();
  FixedWidthInteger.convert(to:)();
  (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
  LOWORD(v4sub_100A2F554("Can't update non-existant safe location with identifier: %s.", 7) = v55;
  sub_1000BD078((uint64_t)v68, v69);
  uint64_t v7 = v70;
  dispatch thunk of BinaryEncodingContaining.encode<A>(_:)();
  if (!v7)
  {
    switch(v6)
    {
      case 1:
        sub_10106DC64((uint64_t *)&v55);
        sub_10000588C(&qword_101639B68);
        if ((swift_dynamicCast() & 1) == 0) {
          goto LABEL_29;
        }
        long long v8 = v34;
        long long v9 = v35;
        long long v47 = v34;
        long long v48 = v35;
        sub_1000BD078((uint64_t)v68, v69);
        sub_10033C228();
        dispatch thunk of BinaryEncodingContaining.encode<A>(_:)();
        sub_100A393F8(v8, *((unint64_t *)&v8 + 1), v9, *((unint64_t *)&v9 + 1));
        return _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)v68);
      case 2:
        sub_10106DC64((uint64_t *)&v34);
        sub_10000588C(&qword_101639B68);
        if ((swift_dynamicCast() & 1) == 0) {
          goto LABEL_29;
        }
        uint64_t v70 = v47;
        uint64_t v31 = v48;
        unint64_t v32 = *((void *)&v47 + 1);
        long long v10 = v49;
        uint64_t v29 = v50;
        unint64_t v30 = *((void *)&v48 + 1);
        unint64_t v28 = *((void *)&v50 + 1);
        long long v11 = v51;
        long long v55 = v47;
        long long v56 = v48;
        long long v57 = v49;
        long long v58 = v50;
        long long v59 = v51;
        sub_1000BD078((uint64_t)v68, v69);
        sub_100719890();
        dispatch thunk of BinaryEncodingContaining.encode<A>(_:)();
        sub_100A39358(v70, v32, v31, v30, v10, *((unint64_t *)&v10 + 1), v29, v28, v11, *((unint64_t *)&v11 + 1));
        return _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)v68);
      case 3:
        sub_10106DC64(v54);
        sub_10000588C(&qword_101639B68);
        if ((swift_dynamicCast() & 1) == 0) {
          goto LABEL_29;
        }
        SharingCircleWildAdvertisementKey.init(key:)(&v47);
        sub_10001D608((uint64_t)&v47, (uint64_t)v33, &qword_101655A38);
        sub_10001D608((uint64_t)v33, (uint64_t)&v34, &qword_101655A38);
        long long v63 = v42;
        long long v64 = v43;
        long long v65 = v44;
        *(void *)&long long v66 = v45;
        long long v59 = v38;
        long long v60 = v39;
        long long v61 = v40;
        long long v62 = v41;
        long long v55 = v34;
        long long v56 = v35;
        long long v57 = v36;
        long long v58 = v37;
        sub_1000BD078((uint64_t)v68, v69);
        sub_100A39160();
        dispatch thunk of BinaryEncodingContaining.encode<A>(_:)();
        sub_100A391B4((uint64_t)v33);
        return _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)v68);
      case 4:
        sub_10106DC64(v54);
        sub_10000588C(&qword_101639B68);
        if ((swift_dynamicCast() & 1) == 0) {
          goto LABEL_29;
        }
        SharingCircleWildAdvertisementKey.init(key:)(&v47);
        sub_10001D608((uint64_t)&v47, (uint64_t)v33, &qword_101655A30);
        sub_10001D608((uint64_t)v33, (uint64_t)&v34, &qword_101655A30);
        long long v63 = v42;
        long long v64 = v43;
        long long v65 = v44;
        *(void *)&long long v66 = v45;
        long long v59 = v38;
        long long v60 = v39;
        long long v61 = v40;
        long long v62 = v41;
        long long v55 = v34;
        long long v56 = v35;
        long long v57 = v36;
        long long v58 = v37;
        sub_1000BD078((uint64_t)v68, v69);
        sub_1008DFFB8();
        dispatch thunk of BinaryEncodingContaining.encode<A>(_:)();
        sub_100A391B4((uint64_t)v33);
        return _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)v68);
      case 5:
        sub_10106DC64(v54);
        sub_10000588C(&qword_101639B68);
        if ((swift_dynamicCast() & 1) == 0) {
          goto LABEL_29;
        }
        SharingCircleWildAdvertisementKey.init(key:)(&v47);
        sub_10001D608((uint64_t)&v47, (uint64_t)v33, &qword_101655A28);
        sub_10001D608((uint64_t)v33, (uint64_t)&v34, &qword_101655A28);
        long long v65 = v44;
        long long v66 = v45;
        uint64_t v67 = v46;
        long long v61 = v40;
        long long v62 = v41;
        long long v63 = v42;
        long long v64 = v43;
        long long v57 = v36;
        long long v58 = v37;
        long long v59 = v38;
        long long v60 = v39;
        long long v55 = v34;
        long long v56 = v35;
        sub_1000BD078((uint64_t)v68, v69);
        sub_100A38F50();
        dispatch thunk of BinaryEncodingContaining.encode<A>(_:)();
        sub_100A38FA4((uint64_t)v33);
        return _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)v68);
      case 6:
        sub_10106DC64((uint64_t *)&v34);
        sub_10000588C(&qword_101639B68);
        if ((swift_dynamicCast() & 1) == 0) {
          goto LABEL_29;
        }
        long long v12 = v52;
        long long v13 = v53;
        uint64_t v70 = v47;
        long long v55 = v47;
        uint64_t v31 = v48;
        unint64_t v32 = *((void *)&v47 + 1);
        long long v56 = v48;
        uint64_t v29 = v49;
        unint64_t v30 = *((void *)&v48 + 1);
        long long v57 = v49;
        uint64_t v27 = v50;
        unint64_t v28 = *((void *)&v49 + 1);
        long long v58 = v50;
        uint64_t v25 = v51;
        unint64_t v26 = *((void *)&v50 + 1);
        long long v59 = v51;
        unint64_t v24 = *((void *)&v51 + 1);
        long long v60 = v52;
        long long v61 = v53;
        sub_1000BD078((uint64_t)v68, v69);
        sub_10033BF70();
        dispatch thunk of BinaryEncodingContaining.encode<A>(_:)();
        sub_100A39FA4(v70, v32, v31, v30, v29, v28, v27, v26, v25, v24, v12, *((unint64_t *)&v12 + 1), v13, *((unint64_t *)&v13 + 1));
        return _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)v68);
      case 7:
        sub_10106DC64((uint64_t *)&v34);
        sub_10000588C(&qword_101639B68);
        if ((swift_dynamicCast() & 1) == 0) {
          goto LABEL_29;
        }
        long long v14 = v48;
        long long v15 = v49;
        uint64_t v70 = v47;
        long long v55 = v47;
        uint64_t v31 = v50;
        unint64_t v32 = *((void *)&v47 + 1);
        long long v56 = v48;
        long long v57 = v49;
        long long v58 = v50;
        unint64_t v30 = *((void *)&v50 + 1);
        sub_1000BD078((uint64_t)v68, v69);
        sub_10033BF1C();
        dispatch thunk of BinaryEncodingContaining.encode<A>(_:)();
        sub_100A39F1C(v70, v32, v14, *((unint64_t *)&v14 + 1), v15, *((unint64_t *)&v15 + 1), v31, v30);
        return _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)v68);
      case 8:
        sub_10106DC64((uint64_t *)&v55);
        sub_10000588C(&qword_101639B68);
        if ((swift_dynamicCast() & 1) == 0) {
          goto LABEL_29;
        }
        unint64_t v17 = *((void *)&v34 + 1);
        uint64_t v16 = v34;
        long long v47 = v34;
        sub_1000BD078((uint64_t)v68, v69);
        sub_10033BEC8();
        goto LABEL_23;
      case 9:
        sub_10106DC64((uint64_t *)&v55);
        sub_10000588C(&qword_101639B68);
        if ((swift_dynamicCast() & 1) == 0) {
          goto LABEL_29;
        }
        unint64_t v17 = *((void *)&v34 + 1);
        uint64_t v16 = v34;
        long long v47 = v34;
        sub_1000BD078((uint64_t)v68, v69);
        sub_100A38D84();
LABEL_23:
        dispatch thunk of BinaryEncodingContaining.encode<A>(_:)();
        sub_100037A24(v16, v17);
        return _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)v68);
      case 10:
        sub_10106DC64((uint64_t *)&v34);
        sub_10000588C(&qword_101639B68);
        if ((swift_dynamicCast() & 1) == 0) {
          goto LABEL_29;
        }
        uint64_t v18 = v49;
        long long v19 = v51;
        unint64_t v20 = v52;
        uint64_t v70 = v47;
        long long v55 = v47;
        uint64_t v31 = v48;
        unint64_t v32 = *((void *)&v47 + 1);
        long long v56 = v48;
        uint64_t v29 = *((void *)&v49 + 1);
        unint64_t v30 = *((void *)&v48 + 1);
        LODWORD(v5sub_100A2F554("Can't update non-existant safe location with identifier: %s.", 7) = v49;
        *((void *)&v57 + 1) = *((void *)&v49 + 1);
        uint64_t v27 = *((void *)&v50 + 1);
        unint64_t v28 = v50;
        long long v58 = v50;
        long long v59 = v51;
        *(void *)&long long v60 = v52;
        sub_1000BD078((uint64_t)v68, v69);
        sub_1005A18AC();
        dispatch thunk of BinaryEncodingContaining.encode<A>(_:)();
        sub_100A38CE4(v70, v32, v31, v30, v18, v29, v28, v27, v19, *((uint64_t *)&v19 + 1), v20);
        return _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)v68);
      case 11:
        sub_10106DC64((uint64_t *)&v55);
        sub_10000588C(&qword_101639B68);
        if ((swift_dynamicCast() & 1) == 0) {
          goto LABEL_29;
        }
        sub_1000BD078((uint64_t)v68, v69);
        sub_1001E2D8C();
        goto LABEL_28;
      default:
        sub_10106DC64((uint64_t *)&v55);
        sub_10000588C(&qword_101639B68);
        if (swift_dynamicCast())
        {
          sub_1000BD078((uint64_t)v68, v69);
          sub_1002A576C();
LABEL_28:
          dispatch thunk of BinaryEncodingContaining.encode<A>(_:)();
        }
        else
        {
LABEL_29:
          sub_100A387D0();
          swift_allocError();
          *unint64_t v21 = 0;
          swift_willThrow();
        }
        break;
    }
  }
  return _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)v68);
}

ValueMetadata *sub_100A3780C(char a1)
{
  switch(a1)
  {
    case 1:
      uint64_t v1 = &type metadata for AirPodsSendBeaconGroupDataCommandPayload;
      sub_1000624F4();
      break;
    case 2:
      uint64_t v1 = &type metadata for AirPodsInitiatePairingCommandPayload;
      sub_100A35264();
      break;
    case 3:
      uint64_t v1 = &type metadata for AirPodsSendPairingDataCommandPayloadv1;
      sub_100A35374();
      break;
    case 4:
      uint64_t v1 = &type metadata for AirPodsSendPairingDataCommandPayloadv2;
      sub_100A353CC();
      break;
    case 5:
      uint64_t v1 = &type metadata for AirPodsSendPairingDataCommandPayloadv3;
      sub_100A35424();
      break;
    case 6:
      uint64_t v1 = &type metadata for AirPodsSWFinalizePairingCommandPayload;
      sub_100062268();
      break;
    case 7:
      uint64_t v1 = &type metadata for AirPodsSWSendPairingStatusCommandPayload;
      sub_1000621C0();
      break;
    case 8:
      uint64_t v1 = &type metadata for AirPodsSWPairingCompleteCommandPayload;
      sub_10006216C();
      break;
    case 9:
      uint64_t v1 = &type metadata for AirPodsPairingEligibilityDataCommandPayload;
      sub_100A352C0();
      break;
    case 10:
      uint64_t v1 = &type metadata for AirPodsPairingEligibilityDataResponseCommandPayload;
      sub_100A35318();
      break;
    case 11:
      uint64_t v1 = &type metadata for UnpairCommandPayload;
      sub_100062118();
      break;
    default:
      uint64_t v1 = &type metadata for AccessoryGenericPayload;
      sub_10006258C();
      break;
  }
  return v1;
}

ValueMetadata *sub_100A37940(char a1)
{
  switch(a1)
  {
    case 1:
      uint64_t v1 = &type metadata for AirPodsSendBeaconGroupDataCommandPayload;
      sub_1000624F4();
      break;
    case 2:
      uint64_t v1 = &type metadata for AirPodsInitiatePairingCommandPayload;
      sub_100A35264();
      break;
    case 3:
      uint64_t v1 = &type metadata for AirPodsSendPairingDataCommandPayloadv1;
      sub_100A35374();
      break;
    case 4:
      uint64_t v1 = &type metadata for AirPodsSendPairingDataCommandPayloadv2;
      sub_100A353CC();
      break;
    case 5:
      uint64_t v1 = &type metadata for AirPodsSendPairingDataCommandPayloadv3;
      sub_100A35424();
      break;
    case 6:
      uint64_t v1 = &type metadata for AirPodsFinalizePairingCommandPayload;
      sub_100A35208();
      break;
    case 7:
      uint64_t v1 = &type metadata for AirPodsSendPairingStatusCommandPayload;
      sub_100A3547C();
      break;
    case 8:
      uint64_t v1 = &type metadata for AirPodsPairingCompleteCommandPayload;
      sub_100157808();
      break;
    case 9:
      uint64_t v1 = &type metadata for AirPodsPairingEligibilityDataCommandPayload;
      sub_100A352C0();
      break;
    case 10:
      uint64_t v1 = &type metadata for AirPodsPairingEligibilityDataResponseCommandPayload;
      sub_100A35318();
      break;
    case 11:
      uint64_t v1 = &type metadata for UnpairCommandPayload;
      sub_100062118();
      break;
    default:
      uint64_t v1 = &type metadata for AccessoryGenericPayload;
      sub_10006258C();
      break;
  }
  return v1;
}

uint64_t sub_100A37A74@<X0>(char a1@<W0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  sub_10001D010(a2, (uint64_t)v45);
  char v6 = sub_100A3780C(a1);
  sub_10001CD44(v45, v45[3]);
  uint64_t DynamicType = swift_getDynamicType();
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)v45);
  if (v6 != (ValueMetadata *)DynamicType)
  {
    __break(1u);
    JUMPOUT(0x100A380F8);
  }
  switch(a1)
  {
    case 1:
      sub_10001D010(a2, (uint64_t)&v25);
      sub_10000588C(&qword_101639B68);
      if ((swift_dynamicCast() & 1) == 0) {
        goto LABEL_29;
      }
      _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(a2);
      long long v36 = v12;
      long long v37 = v13;
      sub_100A39E7C(&v36);
      goto LABEL_27;
    case 2:
      sub_10001D010(a2, (uint64_t)&v12);
      sub_10000588C(&qword_101639B68);
      if ((swift_dynamicCast() & 1) == 0) {
        goto LABEL_29;
      }
      _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(a2);
      long long v36 = v25;
      long long v37 = v26;
      v38[0] = v27[0];
      v38[1] = v27[1];
      void v38[2] = v27[2];
      sub_100A39E08(&v36);
      goto LABEL_27;
    case 3:
      sub_10001D010(a2, (uint64_t)v35);
      sub_10000588C(&qword_101639B68);
      if ((swift_dynamicCast() & 1) == 0) {
        goto LABEL_29;
      }
      SharingCircleWildAdvertisementKey.init(key:)(&v25);
      _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(a2);
      sub_10001D608((uint64_t)&v25, (uint64_t)v11, &qword_101655A38);
      sub_10001D608((uint64_t)v11, (uint64_t)&v12, &qword_101655A38);
      long long v41 = v20;
      long long v42 = v21;
      long long v43 = v22;
      uint64_t v44 = v23;
      void v38[2] = v16;
      v38[3] = v17;
      long long v39 = v18;
      long long v40 = v19;
      long long v36 = v12;
      long long v37 = v13;
      v38[0] = v14;
      v38[1] = v15;
      sub_100A39D94(&v36);
      goto LABEL_27;
    case 4:
      sub_10001D010(a2, (uint64_t)v35);
      sub_10000588C(&qword_101639B68);
      if ((swift_dynamicCast() & 1) == 0) {
        goto LABEL_29;
      }
      SharingCircleWildAdvertisementKey.init(key:)(&v25);
      _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(a2);
      sub_10001D608((uint64_t)&v25, (uint64_t)v11, &qword_101655A30);
      sub_10001D608((uint64_t)v11, (uint64_t)&v12, &qword_101655A30);
      long long v41 = v20;
      long long v42 = v21;
      long long v43 = v22;
      uint64_t v44 = v23;
      void v38[2] = v16;
      v38[3] = v17;
      long long v39 = v18;
      long long v40 = v19;
      long long v36 = v12;
      long long v37 = v13;
      v38[0] = v14;
      v38[1] = v15;
      sub_100A39D24(&v36);
      goto LABEL_27;
    case 5:
      sub_10001D010(a2, (uint64_t)v35);
      sub_10000588C(&qword_101639B68);
      if ((swift_dynamicCast() & 1) == 0) {
        goto LABEL_29;
      }
      SharingCircleWildAdvertisementKey.init(key:)(&v36);
      _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(a2);
      sub_10001D608((uint64_t)&v36, (uint64_t)v11, &qword_101655A28);
      sub_10001D608((uint64_t)v11, (uint64_t)&v12, &qword_101655A28);
      long long v32 = v22;
      long long v33 = v23;
      uint64_t v34 = v24;
      long long v28 = v18;
      long long v29 = v19;
      long long v30 = v20;
      long long v31 = v21;
      v27[0] = v14;
      v27[1] = v15;
      v27[2] = v16;
      v27[3] = v17;
      long long v25 = v12;
      long long v26 = v13;
      sub_100A39CB0(&v25);
      long long v8 = &v25;
      goto LABEL_28;
    case 6:
      sub_10001D010(a2, (uint64_t)&v12);
      sub_10000588C(&qword_101639B68);
      if ((swift_dynamicCast() & 1) == 0) {
        goto LABEL_29;
      }
      _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(a2);
      long long v36 = v25;
      long long v37 = v26;
      v38[0] = v27[0];
      v38[1] = v27[1];
      void v38[2] = v27[2];
      v38[3] = v27[3];
      long long v39 = v28;
      sub_100A39C38(&v36);
      goto LABEL_27;
    case 7:
      sub_10001D010(a2, (uint64_t)&v12);
      sub_10000588C(&qword_101639B68);
      if ((swift_dynamicCast() & 1) == 0) {
        goto LABEL_29;
      }
      _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(a2);
      long long v36 = v25;
      long long v37 = v26;
      v38[0] = v27[0];
      v38[1] = v27[1];
      sub_100A39BC0(&v36);
      goto LABEL_27;
    case 8:
      sub_10001D010(a2, (uint64_t)&v25);
      sub_10000588C(&qword_101639B68);
      if ((swift_dynamicCast() & 1) == 0) {
        goto LABEL_29;
      }
      _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(a2);
      long long v36 = v12;
      sub_100A39B4C(&v36);
      goto LABEL_27;
    case 9:
      sub_10001D010(a2, (uint64_t)&v25);
      sub_10000588C(&qword_101639B68);
      if ((swift_dynamicCast() & 1) == 0) {
        goto LABEL_29;
      }
      _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(a2);
      long long v36 = v12;
      sub_100A39AD8(&v36);
      goto LABEL_27;
    case 10:
      sub_10001D010(a2, (uint64_t)&v12);
      sub_10000588C(&qword_101639B68);
      if ((swift_dynamicCast() & 1) == 0) {
        goto LABEL_29;
      }
      _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(a2);
      long long v36 = v25;
      long long v37 = v26;
      LODWORD(v38[0]) = v27[0];
      *(_OWORD *)((char *)v38 + 8) = *(_OWORD *)((char *)v27 + 8);
      *(_OWORD *)((char *)&v38[1] + 8) = *(_OWORD *)((char *)&v27[1] + 8);
      *(_OWORD *)((char *)&v38[2] + 8) = *(_OWORD *)((char *)&v27[2] + 8);
      sub_100A39A60(&v36);
      goto LABEL_27;
    case 11:
      sub_10001D010(a2, (uint64_t)&v25);
      sub_10000588C(&qword_101639B68);
      if ((swift_dynamicCast() & 1) == 0) {
        goto LABEL_29;
      }
      LOBYTE(v12) = 0;
      _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(a2);
      sub_100A39A10((uint64_t)&v36);
      goto LABEL_27;
    default:
      sub_10001D010(a2, (uint64_t)&v25);
      sub_10000588C(&qword_101639B68);
      if (swift_dynamicCast())
      {
        LOBYTE(v12) = 0;
        _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(a2);
        sub_100A39EEC((uint64_t)&v36);
LABEL_27:
        long long v8 = &v36;
LABEL_28:
        sub_100A399B4((uint64_t)v8, (uint64_t)v46);
        return sub_100A399B4((uint64_t)v46, a3);
      }
      else
      {
LABEL_29:
        sub_100A387D0();
        swift_allocError();
        *long long v10 = 0;
        swift_willThrow();
        return _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(a2);
      }
  }
}

uint64_t sub_100A38128@<X0>(char a1@<W0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  sub_10001D010(a2, (uint64_t)v39);
  char v6 = sub_100A37940(a1);
  sub_10001CD44(v39, v39[3]);
  uint64_t DynamicType = swift_getDynamicType();
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)v39);
  if (v6 != (ValueMetadata *)DynamicType)
  {
    __break(1u);
    JUMPOUT(0x100A387A0);
  }
  switch(a1)
  {
    case 1:
      sub_10001D010(a2, (uint64_t)&v25);
      sub_10000588C(&qword_101639B68);
      if ((swift_dynamicCast() & 1) == 0) {
        goto LABEL_29;
      }
      _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(a2);
      long long v30 = v12;
      long long v31 = v13;
      sub_100A38C50(&v30);
      goto LABEL_27;
    case 2:
      sub_10001D010(a2, (uint64_t)&v12);
      sub_10000588C(&qword_101639B68);
      if ((swift_dynamicCast() & 1) == 0) {
        goto LABEL_29;
      }
      _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(a2);
      long long v30 = v25;
      long long v31 = v26;
      v32[0] = v27[0];
      v32[1] = v27[1];
      void v32[2] = v27[2];
      sub_100A38BE8(&v30);
      goto LABEL_27;
    case 3:
      sub_10001D010(a2, (uint64_t)v29);
      sub_10000588C(&qword_101639B68);
      if ((swift_dynamicCast() & 1) == 0) {
        goto LABEL_29;
      }
      SharingCircleWildAdvertisementKey.init(key:)(&v25);
      _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(a2);
      sub_10001D608((uint64_t)&v25, (uint64_t)v11, &qword_101655A38);
      sub_10001D608((uint64_t)v11, (uint64_t)&v12, &qword_101655A38);
      long long v35 = v20;
      long long v36 = v21;
      long long v37 = v22;
      uint64_t v38 = v23;
      void v32[2] = v16;
      v32[3] = v17;
      long long v33 = v18;
      long long v34 = v19;
      long long v30 = v12;
      long long v31 = v13;
      v32[0] = v14;
      v32[1] = v15;
      sub_100A38B80(&v30);
      goto LABEL_27;
    case 4:
      sub_10001D010(a2, (uint64_t)v29);
      sub_10000588C(&qword_101639B68);
      if ((swift_dynamicCast() & 1) == 0) {
        goto LABEL_29;
      }
      SharingCircleWildAdvertisementKey.init(key:)(&v25);
      _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(a2);
      sub_10001D608((uint64_t)&v25, (uint64_t)v11, &qword_101655A30);
      sub_10001D608((uint64_t)v11, (uint64_t)&v12, &qword_101655A30);
      long long v35 = v20;
      long long v36 = v21;
      long long v37 = v22;
      uint64_t v38 = v23;
      void v32[2] = v16;
      v32[3] = v17;
      long long v33 = v18;
      long long v34 = v19;
      long long v30 = v12;
      long long v31 = v13;
      v32[0] = v14;
      v32[1] = v15;
      sub_100A38B1C(&v30);
      goto LABEL_27;
    case 5:
      sub_10001D010(a2, (uint64_t)v29);
      sub_10000588C(&qword_101639B68);
      if ((swift_dynamicCast() & 1) == 0) {
        goto LABEL_29;
      }
      SharingCircleWildAdvertisementKey.init(key:)(&v30);
      _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(a2);
      sub_10001D608((uint64_t)&v30, (uint64_t)v11, &qword_101655A28);
      sub_10001D608((uint64_t)v11, (uint64_t)&v12, &qword_101655A28);
      v27[8] = v22;
      v27[9] = v23;
      uint64_t v28 = v24;
      _OWORD v27[4] = v18;
      v27[5] = v19;
      v27[6] = v20;
      v27[7] = v21;
      v27[0] = v14;
      v27[1] = v15;
      v27[2] = v16;
      v27[3] = v17;
      long long v25 = v12;
      long long v26 = v13;
      sub_100A38AB4(&v25);
      long long v8 = &v25;
      goto LABEL_28;
    case 6:
      sub_10001D010(a2, (uint64_t)&v12);
      sub_10000588C(&qword_101639B68);
      if ((swift_dynamicCast() & 1) == 0) {
        goto LABEL_29;
      }
      _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(a2);
      long long v30 = v25;
      long long v31 = v26;
      v32[0] = v27[0];
      v32[1] = v27[1];
      void v32[2] = v27[2];
      v32[3] = v27[3];
      sub_100A38A48(&v30);
      goto LABEL_27;
    case 7:
      sub_10001D010(a2, (uint64_t)&v12);
      sub_10000588C(&qword_101639B68);
      if ((swift_dynamicCast() & 1) == 0) {
        goto LABEL_29;
      }
      _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(a2);
      long long v30 = v25;
      long long v31 = v26;
      v32[0] = v27[0];
      sub_100A389DC(&v30);
      goto LABEL_27;
    case 8:
      sub_10001D010(a2, (uint64_t)&v25);
      sub_10000588C(&qword_101639B68);
      if ((swift_dynamicCast() & 1) == 0) {
        goto LABEL_29;
      }
      LOBYTE(v12) = 0;
      _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(a2);
      sub_100A3898C((uint64_t)&v30);
      goto LABEL_27;
    case 9:
      sub_10001D010(a2, (uint64_t)&v25);
      sub_10000588C(&qword_101639B68);
      if ((swift_dynamicCast() & 1) == 0) {
        goto LABEL_29;
      }
      _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(a2);
      long long v30 = v12;
      sub_100A38924(&v30);
      goto LABEL_27;
    case 10:
      sub_10001D010(a2, (uint64_t)&v12);
      sub_10000588C(&qword_101639B68);
      if ((swift_dynamicCast() & 1) == 0) {
        goto LABEL_29;
      }
      _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(a2);
      long long v30 = v25;
      long long v31 = v26;
      LODWORD(v32[0]) = v27[0];
      *(_OWORD *)((char *)v32 + 8) = *(_OWORD *)((char *)v27 + 8);
      *(_OWORD *)((char *)&v32[1] + 8) = *(_OWORD *)((char *)&v27[1] + 8);
      *(_OWORD *)((char *)&v32[2] + 8) = *(_OWORD *)((char *)&v27[2] + 8);
      sub_100A388BC(&v30);
      goto LABEL_27;
    case 11:
      sub_10001D010(a2, (uint64_t)&v25);
      sub_10000588C(&qword_101639B68);
      if ((swift_dynamicCast() & 1) == 0) {
        goto LABEL_29;
      }
      LOBYTE(v12) = 0;
      _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(a2);
      sub_100A3886C((uint64_t)&v30);
      goto LABEL_27;
    default:
      sub_10001D010(a2, (uint64_t)&v25);
      sub_10000588C(&qword_101639B68);
      if (swift_dynamicCast())
      {
        LOBYTE(v12) = 0;
        _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(a2);
        sub_100A38CB4((uint64_t)&v30);
LABEL_27:
        long long v8 = &v30;
LABEL_28:
        sub_100A38824((uint64_t)v8, (uint64_t)v40);
        return sub_100A38824((uint64_t)v40, a3);
      }
      else
      {
LABEL_29:
        sub_100A387D0();
        swift_allocError();
        *long long v10 = 0;
        swift_willThrow();
        return _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(a2);
      }
  }
}

unint64_t sub_100A387D0()
{
  unint64_t result = qword_101655A20;
  if (!qword_101655A20)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_101655A20);
  }
  return result;
}

uint64_t sub_100A38824(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a2 = *(_OWORD *)a1;
  long long v2 = *(_OWORD *)(a1 + 16);
  long long v3 = *(_OWORD *)(a1 + 32);
  long long v4 = *(_OWORD *)(a1 + 64);
  *(_OWORD *)(a2 + 48) = *(_OWORD *)(a1 + 48);
  *(_OWORD *)(a2 + 64) = v4;
  *(_OWORD *)(a2 + 16) = v2;
  *(_OWORD *)(a2 + 32) = v3;
  long long v5 = *(_OWORD *)(a1 + 80);
  long long v6 = *(_OWORD *)(a1 + 96);
  long long v7 = *(_OWORD *)(a1 + 128);
  *(_OWORD *)(a2 + 112) = *(_OWORD *)(a1 + 112);
  *(_OWORD *)(a2 + 128) = v7;
  *(_OWORD *)(a2 + 80) = v5;
  *(_OWORD *)(a2 + 96) = v6;
  long long v8 = *(_OWORD *)(a1 + 144);
  long long v9 = *(_OWORD *)(a1 + 160);
  long long v10 = *(_OWORD *)(a1 + 176);
  *(void *)(a2 + 192) = *(void *)(a1 + 192);
  *(_OWORD *)(a2 + 160) = v9;
  *(_OWORD *)(a2 + 176) = v10;
  *(_OWORD *)(a2 + 144) = v8;
  return a2;
}

double sub_100A3886C(uint64_t a1)
{
  *(void *)a1 = 2;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_OWORD *)(a1 + 120) = 0u;
  *(_OWORD *)(a1 + 136) = 0u;
  *(_OWORD *)(a1 + 152) = 0u;
  *(void *)(a1 + 168) = 0;
  double result = 1.28822975e-231;
  *(_OWORD *)(a1 + 176) = xmmword_101374CB0;
  *(void *)(a1 + 192) = 0x2000000000000000;
  return result;
}

void *sub_100A388BC(void *result)
{
  unint64_t v1 = result[3] & 0xCFFFFFFFFFFFFFFFLL;
  unint64_t v2 = result[13] & 0xCFFFFFFFFFFFFFFFLL;
  unint64_t v3 = result[15] & 0xCFFFFFFFFFFFFFFFLL;
  unint64_t v4 = result[17] & 0xCFFFFFFFFFFFFFFFLL;
  unint64_t v5 = result[19] & 0xCFFFFFFFFFFFFFFFLL;
  unint64_t v6 = result[22] & 0xCFFFFFFFFFFFFFFFLL;
  unint64_t v7 = result[24] & 0xCFFFFFFFFFFFFFFFLL | 0x2000000000000000;
  result[1] &= 0xCFFFFFFFFFFFFFFFLL;
  result[3] = v1;
  result[13] = v2;
  result[15] = v3;
  result[17] = v4;
  result[19] = v5;
  result[22] = v6;
  result[24] = v7;
  return result;
}

void *sub_100A38924(void *result)
{
  unint64_t v1 = result[3] & 0xCFFFFFFFFFFFFFFFLL;
  unint64_t v2 = result[13] & 0xCFFFFFFFFFFFFFFFLL;
  unint64_t v3 = result[15] & 0xCFFFFFFFFFFFFFFFLL;
  unint64_t v4 = result[17] & 0xCFFFFFFFFFFFFFFFLL;
  unint64_t v5 = result[19] & 0xCFFFFFFFFFFFFFFFLL;
  uint64_t v6 = result[22] | 0x3000000000000000;
  unint64_t v7 = result[24] & 0xCFFFFFFFFFFFFFFFLL | 0x1000000000000000;
  result[1] &= 0xCFFFFFFFFFFFFFFFLL;
  result[3] = v1;
  result[13] = v2;
  result[15] = v3;
  result[17] = v4;
  result[19] = v5;
  result[22] = v6;
  result[24] = v7;
  return result;
}

double sub_100A3898C(uint64_t a1)
{
  *(void *)a1 = 1;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_OWORD *)(a1 + 120) = 0u;
  *(_OWORD *)(a1 + 136) = 0u;
  *(_OWORD *)(a1 + 152) = 0u;
  *(void *)(a1 + 168) = 0;
  double result = 1.28822975e-231;
  *(_OWORD *)(a1 + 176) = xmmword_101374CB0;
  *(void *)(a1 + 192) = 0x2000000000000000;
  return result;
}

void *sub_100A389DC(void *result)
{
  unint64_t v1 = result[3] & 0xCFFFFFFFFFFFFFFFLL;
  unint64_t v2 = result[13] & 0xCFFFFFFFFFFFFFFFLL;
  unint64_t v3 = result[15] & 0xCFFFFFFFFFFFFFFFLL;
  unint64_t v4 = result[17] & 0xCFFFFFFFFFFFFFFFLL;
  unint64_t v5 = result[19] & 0xCFFFFFFFFFFFFFFFLL;
  unint64_t v6 = result[22] & 0xCFFFFFFFFFFFFFFFLL | 0x2000000000000000;
  unint64_t v7 = result[24] & 0xCFFFFFFFFFFFFFFFLL | 0x1000000000000000;
  result[1] &= 0xCFFFFFFFFFFFFFFFLL;
  result[3] = v1;
  result[13] = v2;
  result[15] = v3;
  result[17] = v4;
  result[19] = v5;
  result[22] = v6;
  result[24] = v7;
  return result;
}

void *sub_100A38A48(void *result)
{
  unint64_t v1 = result[3] & 0xCFFFFFFFFFFFFFFFLL;
  unint64_t v2 = result[13] & 0xCFFFFFFFFFFFFFFFLL;
  unint64_t v3 = result[15] & 0xCFFFFFFFFFFFFFFFLL;
  unint64_t v4 = result[17] & 0xCFFFFFFFFFFFFFFFLL;
  unint64_t v5 = result[19] & 0xCFFFFFFFFFFFFFFFLL;
  unint64_t v6 = result[22] & 0xCFFFFFFFFFFFFFFFLL | 0x1000000000000000;
  unint64_t v7 = result[24] & 0xCFFFFFFFFFFFFFFFLL | 0x1000000000000000;
  result[1] &= 0xCFFFFFFFFFFFFFFFLL;
  result[3] = v1;
  result[13] = v2;
  result[15] = v3;
  result[17] = v4;
  result[19] = v5;
  result[22] = v6;
  result[24] = v7;
  return result;
}

void *sub_100A38AB4(void *result)
{
  unint64_t v1 = result[3] & 0xCFFFFFFFFFFFFFFFLL;
  unint64_t v2 = result[13] & 0xCFFFFFFFFFFFFFFFLL;
  unint64_t v3 = result[15] & 0xCFFFFFFFFFFFFFFFLL;
  unint64_t v4 = result[17] & 0xCFFFFFFFFFFFFFFFLL;
  unint64_t v5 = result[19] & 0xCFFFFFFFFFFFFFFFLL;
  unint64_t v6 = result[22] & 0xCFFFFFFFFFFFFFFFLL;
  unint64_t v7 = result[24] & 0xCFFFFFFFFFFFFFFFLL | 0x1000000000000000;
  result[1] &= 0xCFFFFFFFFFFFFFFFLL;
  result[3] = v1;
  result[13] = v2;
  result[15] = v3;
  result[17] = v4;
  result[19] = v5;
  result[22] = v6;
  result[24] = v7;
  return result;
}

void *sub_100A38B1C(void *result)
{
  unint64_t v1 = result[3] & 0xCFFFFFFFFFFFFFFFLL;
  unint64_t v2 = result[13] & 0xCFFFFFFFFFFFFFFFLL;
  unint64_t v3 = result[15] & 0xCFFFFFFFFFFFFFFFLL;
  unint64_t v4 = result[17] & 0xCFFFFFFFFFFFFFFFLL;
  unint64_t v5 = result[19] & 0xCFFFFFFFFFFFFFFFLL;
  unint64_t v6 = result[24] & 0xCFFFFFFFFFFFFFFFLL;
  uint64_t v7 = result[22] | 0x3000000000000000;
  result[1] &= 0xCFFFFFFFFFFFFFFFLL;
  result[3] = v1;
  result[13] = v2;
  result[15] = v3;
  result[17] = v4;
  result[19] = v5;
  result[22] = v7;
  result[24] = v6;
  return result;
}

void *sub_100A38B80(void *result)
{
  unint64_t v1 = result[3] & 0xCFFFFFFFFFFFFFFFLL;
  unint64_t v2 = result[13] & 0xCFFFFFFFFFFFFFFFLL;
  unint64_t v3 = result[15] & 0xCFFFFFFFFFFFFFFFLL;
  unint64_t v4 = result[17] & 0xCFFFFFFFFFFFFFFFLL;
  unint64_t v5 = result[19] & 0xCFFFFFFFFFFFFFFFLL;
  unint64_t v6 = result[24] & 0xCFFFFFFFFFFFFFFFLL;
  unint64_t v7 = result[22] & 0xCFFFFFFFFFFFFFFFLL | 0x2000000000000000;
  result[1] &= 0xCFFFFFFFFFFFFFFFLL;
  result[3] = v1;
  result[13] = v2;
  result[15] = v3;
  result[17] = v4;
  result[19] = v5;
  result[22] = v7;
  result[24] = v6;
  return result;
}

void *sub_100A38BE8(void *result)
{
  unint64_t v1 = result[3] & 0xCFFFFFFFFFFFFFFFLL;
  unint64_t v2 = result[13] & 0xCFFFFFFFFFFFFFFFLL;
  unint64_t v3 = result[15] & 0xCFFFFFFFFFFFFFFFLL;
  unint64_t v4 = result[17] & 0xCFFFFFFFFFFFFFFFLL;
  unint64_t v5 = result[19] & 0xCFFFFFFFFFFFFFFFLL;
  unint64_t v6 = result[24] & 0xCFFFFFFFFFFFFFFFLL;
  unint64_t v7 = result[22] & 0xCFFFFFFFFFFFFFFFLL | 0x1000000000000000;
  result[1] &= 0xCFFFFFFFFFFFFFFFLL;
  result[3] = v1;
  result[13] = v2;
  result[15] = v3;
  result[17] = v4;
  result[19] = v5;
  result[22] = v7;
  result[24] = v6;
  return result;
}

void *sub_100A38C50(void *result)
{
  unint64_t v1 = result[3] & 0xCFFFFFFFFFFFFFFFLL;
  unint64_t v2 = result[13] & 0xCFFFFFFFFFFFFFFFLL;
  unint64_t v3 = result[15] & 0xCFFFFFFFFFFFFFFFLL;
  unint64_t v4 = result[17] & 0xCFFFFFFFFFFFFFFFLL;
  unint64_t v5 = result[19] & 0xCFFFFFFFFFFFFFFFLL;
  unint64_t v6 = result[22] & 0xCFFFFFFFFFFFFFFFLL;
  unint64_t v7 = result[24] & 0xCFFFFFFFFFFFFFFFLL;
  result[1] &= 0xCFFFFFFFFFFFFFFFLL;
  result[3] = v1;
  result[13] = v2;
  result[15] = v3;
  result[17] = v4;
  result[19] = v5;
  result[22] = v6;
  result[24] = v7;
  return result;
}

double sub_100A38CB4(uint64_t a1)
{
  double result = 0.0;
  *(_OWORD *)(a1 + 128) = 0u;
  *(_OWORD *)(a1 + 144) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 160) = 0u;
  *(_OWORD *)(a1 + 176) = xmmword_101374CB0;
  *(void *)(a1 + 192) = 0x2000000000000000;
  return result;
}

uint64_t sub_100A38CE4(uint64_t result, unint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5, uint64_t a6, unint64_t a7, uint64_t a8, unint64_t a9, uint64_t a10, unint64_t a11)
{
  if (a2 >> 60 != 15)
  {
    sub_10001CFB8(result, a2);
    sub_10001CFB8(a3, a4);
    sub_10001CFB8(a6, a7);
    sub_10001CFB8(a8, a9);
    return sub_10001CFB8(a10, a11);
  }
  return result;
}

unint64_t sub_100A38D84()
{
  unint64_t result = qword_101655A40;
  if (!qword_101655A40)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_101655A40);
  }
  return result;
}

unint64_t sub_100A38DD8()
{
  unint64_t result = qword_101655A48;
  if (!qword_101655A48)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_101655A48);
  }
  return result;
}

uint64_t sub_100A38E2C(uint64_t result, unint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5, unint64_t a6)
{
  if (a2 >> 60 != 15)
  {
    sub_10001CFB8(result, a2);
    sub_10001CFB8(a3, a4);
    return sub_10001CFB8(a5, a6);
  }
  return result;
}

uint64_t sub_100A38E98(uint64_t result, unint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5, unint64_t a6, uint64_t a7, unint64_t a8, uint64_t a9, unint64_t a10, uint64_t a11, unint64_t a12)
{
  if (a2 >> 60 != 15)
  {
    sub_10001CFB8(result, a2);
    sub_10001CFB8(a3, a4);
    sub_10001CFB8(a5, a6);
    sub_10001CFB8(a7, a8);
    sub_100037A24(a9, a10);
    return sub_100037A24(a11, a12);
  }
  return result;
}

unint64_t sub_100A38F50()
{
  unint64_t result = qword_101655A50;
  if (!qword_101655A50)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_101655A50);
  }
  return result;
}

uint64_t sub_100A38FA4(uint64_t a1)
{
  sub_100A39010(*(void *)a1, *(void *)(a1 + 8), *(void *)(a1 + 16), *(void *)(a1 + 24), *(void *)(a1 + 32), *(void *)(a1 + 40), *(void *)(a1 + 48), *(void *)(a1 + 56), *(void *)(a1 + 64), *(void *)(a1 + 72), *(void *)(a1 + 80), *(void *)(a1 + 88), *(void *)(a1 + 96), *(void *)(a1 + 104), *(void *)(a1 + 112), *(void *)(a1 + 120), *(void *)(a1 + 128), *(void *)(a1 + 136), *(void *)(a1 + 144),
    *(void *)(a1 + 152),
    *(void *)(a1 + 160),
    *(void *)(a1 + 168),
    *(void *)(a1 + 176),
    *(void *)(a1 + 184),
    *(void *)(a1 + 192));
  return a1;
}

uint64_t sub_100A39010(uint64_t result, unint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5, unint64_t a6, uint64_t a7, unint64_t a8, uint64_t a9, unint64_t a10, uint64_t a11, unint64_t a12, uint64_t a13, unint64_t a14, uint64_t a15, unint64_t a16, uint64_t a17, unint64_t a18, uint64_t a19, unint64_t a20,uint64_t a21,unint64_t a22,uint64_t a23,uint64_t a24,unint64_t a25)
{
  if (a2 >> 60 != 15)
  {
    sub_10001CFB8(result, a2);
    sub_10001CFB8(a3, a4);
    sub_10001CFB8(a5, a6);
    sub_10001CFB8(a7, a8);
    sub_10001CFB8(a9, a10);
    sub_10001CFB8(a11, a12);
    sub_10001CFB8(a13, a14);
    sub_10001CFB8(a15, a16);
    sub_10001CFB8(a17, a18);
    sub_10001CFB8(a19, a20);
    sub_10001CFB8(a21, a22);
    return sub_10001CFB8(a24, a25);
  }
  return result;
}

unint64_t sub_100A39160()
{
  unint64_t result = qword_101655A58;
  if (!qword_101655A58)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_101655A58);
  }
  return result;
}

uint64_t sub_100A391B4(uint64_t a1)
{
  sub_100A39220(*(void *)a1, *(void *)(a1 + 8), *(void *)(a1 + 16), *(void *)(a1 + 24), *(void *)(a1 + 32), *(void *)(a1 + 40), *(void *)(a1 + 48), *(void *)(a1 + 56), *(void *)(a1 + 64), *(void *)(a1 + 72), *(void *)(a1 + 80), *(void *)(a1 + 88), *(void *)(a1 + 96), *(void *)(a1 + 104), *(void *)(a1 + 112), *(void *)(a1 + 120), *(void *)(a1 + 128), *(void *)(a1 + 136), *(void *)(a1 + 144),
    *(void *)(a1 + 152),
    *(void *)(a1 + 160),
    *(void *)(a1 + 168),
    *(void *)(a1 + 176));
  return a1;
}

uint64_t sub_100A39220(uint64_t result, unint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5, unint64_t a6, uint64_t a7, unint64_t a8, uint64_t a9, unint64_t a10, uint64_t a11, unint64_t a12, uint64_t a13, unint64_t a14, uint64_t a15, unint64_t a16, uint64_t a17, unint64_t a18, uint64_t a19, unint64_t a20,uint64_t a21,uint64_t a22,unint64_t a23)
{
  if (a2 >> 60 != 15)
  {
    sub_10001CFB8(result, a2);
    sub_10001CFB8(a3, a4);
    sub_10001CFB8(a5, a6);
    sub_10001CFB8(a7, a8);
    sub_10001CFB8(a9, a10);
    sub_10001CFB8(a11, a12);
    sub_10001CFB8(a13, a14);
    sub_10001CFB8(a15, a16);
    sub_10001CFB8(a17, a18);
    sub_10001CFB8(a19, a20);
    return sub_10001CFB8(a22, a23);
  }
  return result;
}

uint64_t sub_100A39358(uint64_t result, unint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5, unint64_t a6, uint64_t a7, unint64_t a8, uint64_t a9, unint64_t a10)
{
  if (a2 >> 60 != 15)
  {
    sub_10001CFB8(result, a2);
    sub_10001CFB8(a3, a4);
    sub_10001CFB8(a5, a6);
    sub_10001CFB8(a7, a8);
    return sub_100037A24(a9, a10);
  }
  return result;
}

uint64_t sub_100A393F8(uint64_t result, unint64_t a2, uint64_t a3, unint64_t a4)
{
  if (a2 >> 60 != 15)
  {
    sub_10001CFB8(result, a2);
    return sub_10001CFB8(a3, a4);
  }
  return result;
}

uint64_t sub_100A39448(uint64_t a1)
{
  unsigned int v1 = (*(void *)(a1 + 192) >> 58) & 0xC | (*(void *)(a1 + 176) >> 60) & 3;
  if (v1 <= 8) {
    return v1;
  }
  else {
    return (*(_DWORD *)a1 + 9);
  }
}

uint64_t sub_100A39474()
{
  sub_10001CFB8(*(void *)(v0 + 16), *(void *)(v0 + 24));
  sub_10001CFB8(*(void *)(v0 + 32), *(void *)(v0 + 40));
  sub_10001CFB8(*(void *)(v0 + 56), *(void *)(v0 + 64));
  sub_10001CFB8(*(void *)(v0 + 72), *(void *)(v0 + 80));
  sub_10001CFB8(*(void *)(v0 + 88), *(void *)(v0 + 96));

  return _swift_deallocObject(v0, 104, 7);
}

uint64_t sub_100A394CC()
{
  sub_10001CFB8(*(void *)(v0 + 16), *(void *)(v0 + 24));
  sub_10001CFB8(*(void *)(v0 + 32), *(void *)(v0 + 40));
  sub_10001CFB8(*(void *)(v0 + 48), *(void *)(v0 + 56));

  return _swift_deallocObject(v0, 64, 7);
}

uint64_t sub_100A39514()
{
  sub_10001CFB8(v0[2], v0[3]);
  sub_10001CFB8(v0[4], v0[5]);
  sub_10001CFB8(v0[6], v0[7]);
  sub_10001CFB8(v0[8], v0[9]);
  unint64_t v1 = v0[11];
  if (v1 >> 60 != 15) {
    sub_10001CFB8(v0[10], v1);
  }
  unint64_t v2 = v0[13];
  if (v2 >> 60 != 15) {
    sub_10001CFB8(v0[12], v2);
  }

  return _swift_deallocObject(v0, 112, 7);
}

uint64_t sub_100A39594()
{
  sub_10001CFB8(*(void *)(v0 + 16), *(void *)(v0 + 24));
  sub_10001CFB8(*(void *)(v0 + 32), *(void *)(v0 + 40));
  sub_10001CFB8(*(void *)(v0 + 48), *(void *)(v0 + 56));
  sub_10001CFB8(*(void *)(v0 + 64), *(void *)(v0 + 72));
  sub_10001CFB8(*(void *)(v0 + 80), *(void *)(v0 + 88));
  sub_10001CFB8(*(void *)(v0 + 96), *(void *)(v0 + 104));
  sub_10001CFB8(*(void *)(v0 + 112), *(void *)(v0 + 120));
  sub_10001CFB8(*(void *)(v0 + 128), *(void *)(v0 + 136));
  sub_10001CFB8(*(void *)(v0 + 144), *(void *)(v0 + 152));
  sub_10001CFB8(*(void *)(v0 + 160), *(void *)(v0 + 168));
  sub_10001CFB8(*(void *)(v0 + 176), *(void *)(v0 + 184));
  sub_10001CFB8(*(void *)(v0 + 200), *(void *)(v0 + 208));

  return _swift_deallocObject(v0, 216, 7);
}

uint64_t *sub_100A39624(uint64_t *a1)
{
  uint64_t v2 = a1[2];
  unint64_t v3 = a1[3];
  uint64_t v4 = a1[4];
  unint64_t v5 = a1[5];
  uint64_t v6 = a1[6];
  unint64_t v7 = a1[7];
  uint64_t v8 = a1[8];
  unint64_t v9 = a1[9];
  uint64_t v10 = a1[10];
  unint64_t v12 = a1[11];
  unint64_t v13 = a1[13];
  uint64_t v14 = a1[12];
  unint64_t v15 = a1[15];
  uint64_t v16 = a1[14];
  unint64_t v17 = a1[17];
  uint64_t v18 = a1[16];
  unint64_t v19 = a1[19];
  uint64_t v22 = a1[20];
  uint64_t v20 = a1[18];
  unint64_t v21 = a1[21];
  uint64_t v24 = a1[23];
  unint64_t v23 = a1[24];
  sub_1000361E0(*a1, a1[1]);
  sub_1000361E0(v2, v3);
  sub_1000361E0(v4, v5);
  sub_1000361E0(v6, v7);
  sub_1000361E0(v8, v9);
  sub_1000361E0(v10, v12);
  sub_1000361E0(v14, v13);
  sub_1000361E0(v16, v15);
  sub_1000361E0(v18, v17);
  sub_1000361E0(v20, v19);
  sub_1000361E0(v22, v21);
  sub_1000361E0(v24, v23);
  return a1;
}

uint64_t sub_100A39758()
{
  sub_10001CFB8(*(void *)(v0 + 16), *(void *)(v0 + 24));
  sub_10001CFB8(*(void *)(v0 + 32), *(void *)(v0 + 40));
  sub_10001CFB8(*(void *)(v0 + 48), *(void *)(v0 + 56));
  sub_10001CFB8(*(void *)(v0 + 64), *(void *)(v0 + 72));
  sub_10001CFB8(*(void *)(v0 + 80), *(void *)(v0 + 88));
  sub_10001CFB8(*(void *)(v0 + 96), *(void *)(v0 + 104));
  sub_10001CFB8(*(void *)(v0 + 112), *(void *)(v0 + 120));
  sub_10001CFB8(*(void *)(v0 + 128), *(void *)(v0 + 136));
  sub_10001CFB8(*(void *)(v0 + 144), *(void *)(v0 + 152));
  sub_10001CFB8(*(void *)(v0 + 160), *(void *)(v0 + 168));
  sub_10001CFB8(*(void *)(v0 + 184), *(void *)(v0 + 192));

  return _swift_deallocObject(v0, 200, 7);
}

uint64_t *sub_100A397E0(uint64_t *a1)
{
  uint64_t v2 = a1[2];
  unint64_t v3 = a1[3];
  uint64_t v4 = a1[4];
  unint64_t v5 = a1[5];
  uint64_t v6 = a1[6];
  unint64_t v7 = a1[7];
  uint64_t v8 = a1[8];
  unint64_t v9 = a1[9];
  uint64_t v10 = a1[10];
  unint64_t v12 = a1[11];
  unint64_t v13 = a1[13];
  uint64_t v14 = a1[12];
  unint64_t v15 = a1[15];
  uint64_t v16 = a1[14];
  unint64_t v17 = a1[17];
  uint64_t v18 = a1[16];
  unint64_t v19 = a1[19];
  uint64_t v22 = a1[21];
  uint64_t v20 = a1[18];
  unint64_t v21 = a1[22];
  sub_1000361E0(*a1, a1[1]);
  sub_1000361E0(v2, v3);
  sub_1000361E0(v4, v5);
  sub_1000361E0(v6, v7);
  sub_1000361E0(v8, v9);
  sub_1000361E0(v10, v12);
  sub_1000361E0(v14, v13);
  sub_1000361E0(v16, v15);
  sub_1000361E0(v18, v17);
  sub_1000361E0(v20, v19);
  sub_1000361E0(v22, v21);
  return a1;
}

uint64_t sub_100A398F0(uint64_t result)
{
  unint64_t v1 = *(void *)(result + 192) & 0xCFFFFFFFFFFFFFFFLL;
  *(void *)(result + 176) &= 0xCFFFFFFFFFFFFFFFLL;
  *(void *)(result + 192) = v1;
  return result;
}

uint64_t sub_100A3990C()
{
  sub_10001CFB8(v0[2], v0[3]);
  sub_10001CFB8(v0[4], v0[5]);
  sub_10001CFB8(v0[6], v0[7]);
  sub_10001CFB8(v0[8], v0[9]);
  unint64_t v1 = v0[11];
  if (v1 >> 60 != 15) {
    sub_10001CFB8(v0[10], v1);
  }

  return _swift_deallocObject(v0, 96, 7);
}

uint64_t sub_100A39974()
{
  sub_10001CFB8(*(void *)(v0 + 16), *(void *)(v0 + 24));
  sub_10001CFB8(*(void *)(v0 + 32), *(void *)(v0 + 40));

  return _swift_deallocObject(v0, 48, 7);
}

uint64_t sub_100A399B4(uint64_t a1, uint64_t a2)
{
  return a2;
}

double sub_100A39A10(uint64_t a1)
{
  *(void *)a1 = 1;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_OWORD *)(a1 + 120) = 0u;
  *(_OWORD *)(a1 + 136) = 0u;
  *(_OWORD *)(a1 + 152) = 0u;
  *(void *)(a1 + 168) = 0;
  double result = 1.49166815e-154;
  *(_OWORD *)(a1 + 176) = xmmword_101352FE0;
  *(void *)(a1 + 192) = 0x2000000000000000;
  return result;
}

void *sub_100A39A60(void *result)
{
  unint64_t v1 = result[3] & 0xCFFFFFFFFFFFFFFFLL;
  unint64_t v2 = result[11] & 0xCFFFFFFFFFFFFFFFLL;
  unint64_t v3 = result[13] & 0xCFFFFFFFFFFFFFFFLL;
  unint64_t v4 = result[15] & 0xCFFFFFFFFFFFFFFFLL;
  unint64_t v5 = result[17] & 0xCFFFFFFFFFFFFFFFLL;
  unint64_t v6 = result[19] & 0xCFFFFFFFFFFFFFFFLL;
  unint64_t v7 = result[22] & 0xCFFFFFFFFFFFFFFFLL | 0x1000000000000000;
  unint64_t v8 = result[24] & 0xCFFFFFFFFFFFFFFFLL | 0x2000000000000000;
  result[1] &= 0xCFFFFFFFFFFFFFFFLL;
  result[3] = v1;
  result[11] = v2;
  result[13] = v3;
  result[15] = v4;
  result[17] = v5;
  result[19] = v6;
  result[22] = v7;
  result[24] = v8;
  return result;
}

void *sub_100A39AD8(void *result)
{
  unint64_t v1 = result[3] & 0xCFFFFFFFFFFFFFFFLL;
  unint64_t v2 = result[11] & 0xCFFFFFFFFFFFFFFFLL;
  unint64_t v3 = result[13] & 0xCFFFFFFFFFFFFFFFLL;
  unint64_t v4 = result[15] & 0xCFFFFFFFFFFFFFFFLL;
  unint64_t v5 = result[17] & 0xCFFFFFFFFFFFFFFFLL;
  unint64_t v6 = result[19] & 0xCFFFFFFFFFFFFFFFLL;
  unint64_t v7 = result[22] & 0xCFFFFFFFFFFFFFFFLL;
  unint64_t v8 = result[24] & 0xCFFFFFFFFFFFFFFFLL | 0x2000000000000000;
  result[1] &= 0xCFFFFFFFFFFFFFFFLL;
  result[3] = v1;
  result[11] = v2;
  result[13] = v3;
  result[15] = v4;
  result[17] = v5;
  result[19] = v6;
  result[22] = v7;
  result[24] = v8;
  return result;
}

void *sub_100A39B4C(void *result)
{
  unint64_t v1 = result[3] & 0xCFFFFFFFFFFFFFFFLL;
  unint64_t v2 = result[11] & 0xCFFFFFFFFFFFFFFFLL;
  unint64_t v3 = result[13] & 0xCFFFFFFFFFFFFFFFLL;
  unint64_t v4 = result[15] & 0xCFFFFFFFFFFFFFFFLL;
  unint64_t v5 = result[17] & 0xCFFFFFFFFFFFFFFFLL;
  unint64_t v6 = result[19] & 0xCFFFFFFFFFFFFFFFLL;
  uint64_t v7 = result[22] | 0x3000000000000000;
  unint64_t v8 = result[24] & 0xCFFFFFFFFFFFFFFFLL | 0x1000000000000000;
  result[1] &= 0xCFFFFFFFFFFFFFFFLL;
  result[3] = v1;
  result[11] = v2;
  result[13] = v3;
  result[15] = v4;
  result[17] = v5;
  result[19] = v6;
  result[22] = v7;
  result[24] = v8;
  return result;
}

void *sub_100A39BC0(void *result)
{
  unint64_t v1 = result[3] & 0xCFFFFFFFFFFFFFFFLL;
  unint64_t v2 = result[11] & 0xCFFFFFFFFFFFFFFFLL;
  unint64_t v3 = result[13] & 0xCFFFFFFFFFFFFFFFLL;
  unint64_t v4 = result[15] & 0xCFFFFFFFFFFFFFFFLL;
  unint64_t v5 = result[17] & 0xCFFFFFFFFFFFFFFFLL;
  unint64_t v6 = result[19] & 0xCFFFFFFFFFFFFFFFLL;
  unint64_t v7 = result[22] & 0xCFFFFFFFFFFFFFFFLL | 0x2000000000000000;
  unint64_t v8 = result[24] & 0xCFFFFFFFFFFFFFFFLL | 0x1000000000000000;
  result[1] &= 0xCFFFFFFFFFFFFFFFLL;
  result[3] = v1;
  result[11] = v2;
  result[13] = v3;
  result[15] = v4;
  result[17] = v5;
  result[19] = v6;
  result[22] = v7;
  result[24] = v8;
  return result;
}

void *sub_100A39C38(void *result)
{
  unint64_t v1 = result[3] & 0xCFFFFFFFFFFFFFFFLL;
  unint64_t v2 = result[11] & 0xCFFFFFFFFFFFFFFFLL;
  unint64_t v3 = result[13] & 0xCFFFFFFFFFFFFFFFLL;
  unint64_t v4 = result[15] & 0xCFFFFFFFFFFFFFFFLL;
  unint64_t v5 = result[17] & 0xCFFFFFFFFFFFFFFFLL;
  unint64_t v6 = result[19] & 0xCFFFFFFFFFFFFFFFLL;
  unint64_t v7 = result[22] & 0xCFFFFFFFFFFFFFFFLL | 0x1000000000000000;
  unint64_t v8 = result[24] & 0xCFFFFFFFFFFFFFFFLL | 0x1000000000000000;
  result[1] &= 0xCFFFFFFFFFFFFFFFLL;
  result[3] = v1;
  result[11] = v2;
  result[13] = v3;
  result[15] = v4;
  result[17] = v5;
  result[19] = v6;
  result[22] = v7;
  result[24] = v8;
  return result;
}

void *sub_100A39CB0(void *result)
{
  unint64_t v1 = result[3] & 0xCFFFFFFFFFFFFFFFLL;
  unint64_t v2 = result[11] & 0xCFFFFFFFFFFFFFFFLL;
  unint64_t v3 = result[13] & 0xCFFFFFFFFFFFFFFFLL;
  unint64_t v4 = result[15] & 0xCFFFFFFFFFFFFFFFLL;
  unint64_t v5 = result[17] & 0xCFFFFFFFFFFFFFFFLL;
  unint64_t v6 = result[19] & 0xCFFFFFFFFFFFFFFFLL;
  unint64_t v7 = result[22] & 0xCFFFFFFFFFFFFFFFLL;
  unint64_t v8 = result[24] & 0xCFFFFFFFFFFFFFFFLL | 0x1000000000000000;
  result[1] &= 0xCFFFFFFFFFFFFFFFLL;
  result[3] = v1;
  result[11] = v2;
  result[13] = v3;
  result[15] = v4;
  result[17] = v5;
  result[19] = v6;
  result[22] = v7;
  result[24] = v8;
  return result;
}

void *sub_100A39D24(void *result)
{
  unint64_t v1 = result[3] & 0xCFFFFFFFFFFFFFFFLL;
  unint64_t v2 = result[11] & 0xCFFFFFFFFFFFFFFFLL;
  unint64_t v3 = result[13] & 0xCFFFFFFFFFFFFFFFLL;
  unint64_t v4 = result[15] & 0xCFFFFFFFFFFFFFFFLL;
  unint64_t v5 = result[17] & 0xCFFFFFFFFFFFFFFFLL;
  unint64_t v6 = result[19] & 0xCFFFFFFFFFFFFFFFLL;
  unint64_t v7 = result[24] & 0xCFFFFFFFFFFFFFFFLL;
  uint64_t v8 = result[22] | 0x3000000000000000;
  result[1] &= 0xCFFFFFFFFFFFFFFFLL;
  result[3] = v1;
  result[11] = v2;
  result[13] = v3;
  result[15] = v4;
  result[17] = v5;
  result[19] = v6;
  result[22] = v8;
  result[24] = v7;
  return result;
}

void *sub_100A39D94(void *result)
{
  unint64_t v1 = result[3] & 0xCFFFFFFFFFFFFFFFLL;
  unint64_t v2 = result[11] & 0xCFFFFFFFFFFFFFFFLL;
  unint64_t v3 = result[13] & 0xCFFFFFFFFFFFFFFFLL;
  unint64_t v4 = result[15] & 0xCFFFFFFFFFFFFFFFLL;
  unint64_t v5 = result[17] & 0xCFFFFFFFFFFFFFFFLL;
  unint64_t v6 = result[19] & 0xCFFFFFFFFFFFFFFFLL;
  unint64_t v7 = result[24] & 0xCFFFFFFFFFFFFFFFLL;
  unint64_t v8 = result[22] & 0xCFFFFFFFFFFFFFFFLL | 0x2000000000000000;
  result[1] &= 0xCFFFFFFFFFFFFFFFLL;
  result[3] = v1;
  result[11] = v2;
  result[13] = v3;
  result[15] = v4;
  result[17] = v5;
  result[19] = v6;
  result[22] = v8;
  result[24] = v7;
  return result;
}

void *sub_100A39E08(void *result)
{
  unint64_t v1 = result[3] & 0xCFFFFFFFFFFFFFFFLL;
  unint64_t v2 = result[11] & 0xCFFFFFFFFFFFFFFFLL;
  unint64_t v3 = result[13] & 0xCFFFFFFFFFFFFFFFLL;
  unint64_t v4 = result[15] & 0xCFFFFFFFFFFFFFFFLL;
  unint64_t v5 = result[17] & 0xCFFFFFFFFFFFFFFFLL;
  unint64_t v6 = result[19] & 0xCFFFFFFFFFFFFFFFLL;
  unint64_t v7 = result[24] & 0xCFFFFFFFFFFFFFFFLL;
  unint64_t v8 = result[22] & 0xCFFFFFFFFFFFFFFFLL | 0x1000000000000000;
  result[1] &= 0xCFFFFFFFFFFFFFFFLL;
  result[3] = v1;
  result[11] = v2;
  result[13] = v3;
  result[15] = v4;
  result[17] = v5;
  result[19] = v6;
  result[22] = v8;
  result[24] = v7;
  return result;
}

void *sub_100A39E7C(void *result)
{
  unint64_t v1 = result[3] & 0xCFFFFFFFFFFFFFFFLL;
  unint64_t v2 = result[11] & 0xCFFFFFFFFFFFFFFFLL;
  unint64_t v3 = result[13] & 0xCFFFFFFFFFFFFFFFLL;
  unint64_t v4 = result[15] & 0xCFFFFFFFFFFFFFFFLL;
  unint64_t v5 = result[17] & 0xCFFFFFFFFFFFFFFFLL;
  unint64_t v6 = result[19] & 0xCFFFFFFFFFFFFFFFLL;
  unint64_t v7 = result[22] & 0xCFFFFFFFFFFFFFFFLL;
  unint64_t v8 = result[24] & 0xCFFFFFFFFFFFFFFFLL;
  result[1] &= 0xCFFFFFFFFFFFFFFFLL;
  result[3] = v1;
  result[11] = v2;
  result[13] = v3;
  result[15] = v4;
  result[17] = v5;
  result[19] = v6;
  result[22] = v7;
  result[24] = v8;
  return result;
}

double sub_100A39EEC(uint64_t a1)
{
  double result = 0.0;
  *(_OWORD *)(a1 + 128) = 0u;
  *(_OWORD *)(a1 + 144) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 160) = 0u;
  *(_OWORD *)(a1 + 176) = xmmword_101352FE0;
  *(void *)(a1 + 192) = 0x2000000000000000;
  return result;
}

uint64_t sub_100A39F1C(uint64_t result, unint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5, unint64_t a6, uint64_t a7, unint64_t a8)
{
  if (a2 >> 60 != 15)
  {
    sub_10001CFB8(result, a2);
    sub_10001CFB8(a3, a4);
    sub_10001CFB8(a5, a6);
    return sub_10001CFB8(a7, a8);
  }
  return result;
}

uint64_t sub_100A39FA4(uint64_t result, unint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5, unint64_t a6, uint64_t a7, unint64_t a8, uint64_t a9, unint64_t a10, uint64_t a11, unint64_t a12, uint64_t a13, unint64_t a14)
{
  if (a2 >> 60 != 15)
  {
    sub_10001CFB8(result, a2);
    sub_10001CFB8(a3, a4);
    sub_10001CFB8(a5, a6);
    sub_10001CFB8(a7, a8);
    sub_10001CFB8(a9, a10);
    sub_10001CFB8(a11, a12);
    return sub_10001CFB8(a13, a14);
  }
  return result;
}

void destroy for AirPodsPairingCommand1_0(uint64_t a1)
{
  sub_100A3A0FC(*(void *)a1, *(void *)(a1 + 8), *(void *)(a1 + 16), *(void *)(a1 + 24), *(void *)(a1 + 32), *(void *)(a1 + 40), *(void *)(a1 + 48), *(void *)(a1 + 56), *(void *)(a1 + 64), *(void *)(a1 + 72), *(void *)(a1 + 80), *(void *)(a1 + 88), *(void *)(a1 + 96), *(void *)(a1 + 104), *(void *)(a1 + 112), *(void *)(a1 + 120), *(void *)(a1 + 128), *(void *)(a1 + 136), *(void *)(a1 + 144),
    *(void *)(a1 + 152),
    *(void *)(a1 + 160),
    *(void *)(a1 + 168),
    *(void *)(a1 + 176),
    *(void *)(a1 + 184),
    *(void *)(a1 + 192),
    (void (*)(void))sub_10001CFB8,
    (void (*)(uint64_t, uint64_t))sub_100037A24);
}

void sub_100A3A0FC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,unint64_t a23,uint64_t a24,unint64_t a25,void (*a26)(void),void (*a27)(uint64_t, uint64_t))
{
  long long v33 = a26;
  switch((a25 >> 58) & 0xC | (a23 >> 60) & 3)
  {
    case 0uLL:
      long long v37 = a26;
      a26();
      goto LABEL_12;
    case 1uLL:
      long long v36 = a27;
      a26();
      ((void (*)(uint64_t, uint64_t))a26)(a3, a4);
      ((void (*)(uint64_t, uint64_t))a26)(a5, a6);
      ((void (*)(uint64_t, uint64_t))a26)(a7, a8);
      uint64_t v34 = a9;
      uint64_t v35 = a10;
      goto LABEL_7;
    case 2uLL:
    case 3uLL:
      long long v37 = a26;
      a26();
      ((void (*)(uint64_t, uint64_t))a26)(a3, a4);
      ((void (*)(uint64_t, uint64_t))a26)(a5, a6);
      ((void (*)(uint64_t, uint64_t))a26)(a7, a8);
      ((void (*)(uint64_t, uint64_t))a26)(a9, a10);
      ((void (*)(uint64_t, uint64_t))a26)(a11, a12);
      ((void (*)(uint64_t, uint64_t))a26)(a13, a14);
      ((void (*)(uint64_t, uint64_t))a26)(a15, a16);
      ((void (*)(uint64_t, uint64_t))a26)(a17, a18);
      ((void (*)(uint64_t, uint64_t))a26)(a19, a20);
      goto LABEL_12;
    case 4uLL:
      long long v37 = a26;
      a26();
      ((void (*)(uint64_t, uint64_t))a26)(a3, a4);
      ((void (*)(uint64_t, uint64_t))a26)(a5, a6);
      ((void (*)(uint64_t, uint64_t))a26)(a7, a8);
      ((void (*)(uint64_t, uint64_t))a26)(a9, a10);
      ((void (*)(uint64_t, uint64_t))a26)(a11, a12);
      ((void (*)(uint64_t, uint64_t))a26)(a13, a14);
      ((void (*)(uint64_t, uint64_t))a26)(a15, a16);
      ((void (*)(uint64_t, uint64_t))a26)(a17, a18);
      ((void (*)(uint64_t, uint64_t))a26)(a19, a20);
      ((void (*)(uint64_t, uint64_t))a26)(a21, a22);
      goto LABEL_12;
    case 5uLL:
      long long v36 = a27;
      a26();
      ((void (*)(uint64_t, uint64_t))a26)(a3, a4);
      ((void (*)(uint64_t, uint64_t))a26)(a5, a6);
      ((void (*)(uint64_t, uint64_t))a26)(a7, a8);
      a27(a9, a10);
      uint64_t v34 = a11;
      uint64_t v35 = a12;
LABEL_7:
      v36(v34, v35);
      return;
    case 6uLL:
      long long v37 = a26;
      a26();
      ((void (*)(uint64_t, uint64_t))a26)(a3, a4);
      goto LABEL_12;
    case 7uLL:
      goto LABEL_13;
    case 8uLL:
      long long v37 = a26;
      a26();
      ((void (*)(uint64_t, uint64_t))a26)(a3, a4);
      ((void (*)(uint64_t, uint64_t))a26)(a6, a7);
      ((void (*)(uint64_t, uint64_t))a26)(a8, a9);
LABEL_12:
      long long v33 = v37;
LABEL_13:
      v33();
      break;
    default:
      return;
  }
}

uint64_t *initializeWithCopy for AirPodsPairingCommand1_0(uint64_t *a1, uint64_t *a2)
{
  uint64_t v13 = a2[9];
  uint64_t v14 = a2[10];
  uint64_t v15 = a2[11];
  uint64_t v16 = a2[12];
  uint64_t v17 = a2[13];
  uint64_t v18 = a2[14];
  uint64_t v19 = a2[15];
  uint64_t v20 = a2[16];
  uint64_t v21 = a2[17];
  uint64_t v22 = a2[18];
  uint64_t v23 = a2[19];
  uint64_t v24 = a2[20];
  uint64_t v25 = a2[21];
  unint64_t v26 = a2[22];
  uint64_t v27 = a2[23];
  unint64_t v28 = a2[24];
  uint64_t v3 = a2[8];
  uint64_t v4 = *a2;
  uint64_t v5 = a2[1];
  uint64_t v6 = a2[2];
  uint64_t v7 = a2[3];
  uint64_t v8 = a2[4];
  uint64_t v9 = a2[5];
  uint64_t v10 = a2[6];
  uint64_t v11 = a2[7];
  sub_100A3A0FC(*a2, v5, v6, v7, v8, v9, v10, v11, v3, v13, v14, v15, v16, v17, v18, v19, v20, v21, v22,
    v23,
    v24,
    v25,
    v26,
    v27,
    v28,
    (void (*)(void))sub_1000361E0,
    (void (*)(uint64_t, uint64_t))sub_100037A38);
  *a1 = v4;
  a1[1] = v5;
  a1[2] = v6;
  a1[3] = v7;
  a1[4] = v8;
  a1[5] = v9;
  a1[6] = v10;
  a1[7] = v11;
  a1[8] = v3;
  a1[9] = v13;
  a1[10] = v14;
  a1[11] = v15;
  a1[12] = v16;
  a1[13] = v17;
  a1[14] = v18;
  a1[15] = v19;
  a1[16] = v20;
  a1[17] = v21;
  a1[18] = v22;
  a1[19] = v23;
  a1[20] = v24;
  a1[21] = v25;
  a1[22] = v26;
  a1[23] = v27;
  a1[24] = v28;
  return a1;
}

uint64_t assignWithCopy for AirPodsPairingCommand1_0(uint64_t a1, uint64_t *a2)
{
  uint64_t v30 = a2[9];
  uint64_t v31 = a2[10];
  uint64_t v32 = a2[11];
  uint64_t v33 = a2[12];
  uint64_t v34 = a2[13];
  uint64_t v35 = a2[14];
  uint64_t v36 = a2[15];
  uint64_t v37 = a2[16];
  uint64_t v38 = a2[17];
  uint64_t v39 = a2[18];
  uint64_t v40 = a2[19];
  uint64_t v41 = a2[20];
  uint64_t v42 = a2[21];
  unint64_t v43 = a2[22];
  uint64_t v44 = a2[23];
  unint64_t v45 = a2[24];
  uint64_t v3 = a2[8];
  uint64_t v4 = *a2;
  uint64_t v5 = a2[1];
  uint64_t v6 = a2[2];
  uint64_t v7 = a2[3];
  uint64_t v8 = a2[4];
  uint64_t v9 = a2[5];
  uint64_t v10 = a2[6];
  uint64_t v11 = a2[7];
  sub_100A3A0FC(*a2, v5, v6, v7, v8, v9, v10, v11, v3, v30, v31, v32, v33, v34, v35, v36, v37, v38, v39,
    v40,
    v41,
    v42,
    v43,
    v44,
    v45,
    (void (*)(void))sub_1000361E0,
    (void (*)(uint64_t, uint64_t))sub_100037A38);
  uint64_t v12 = *(void *)a1;
  uint64_t v13 = *(void *)(a1 + 8);
  *(void *)a1 = v4;
  *(void *)(a1 + 8) = v5;
  uint64_t v14 = *(void *)(a1 + 16);
  uint64_t v15 = *(void *)(a1 + 24);
  *(void *)(a1 + 16) = v6;
  *(void *)(a1 + 24) = v7;
  uint64_t v16 = *(void *)(a1 + 32);
  uint64_t v17 = *(void *)(a1 + 40);
  *(void *)(a1 + 32) = v8;
  *(void *)(a1 + 40) = v9;
  uint64_t v18 = *(void *)(a1 + 48);
  uint64_t v19 = *(void *)(a1 + 56);
  *(void *)(a1 + 48) = v10;
  *(void *)(a1 + 56) = v11;
  long long v20 = *(_OWORD *)(a1 + 64);
  long long v21 = *(_OWORD *)(a1 + 80);
  *(void *)(a1 + 64) = v3;
  *(void *)(a1 + 72) = v30;
  *(void *)(a1 + 80) = v31;
  *(void *)(a1 + 88) = v32;
  long long v22 = *(_OWORD *)(a1 + 96);
  long long v23 = *(_OWORD *)(a1 + 112);
  *(void *)(a1 + 96) = v33;
  *(void *)(a1 + 104) = v34;
  *(void *)(a1 + 112) = v35;
  *(void *)(a1 + 120) = v36;
  long long v24 = *(_OWORD *)(a1 + 128);
  long long v25 = *(_OWORD *)(a1 + 144);
  *(void *)(a1 + 128) = v37;
  *(void *)(a1 + 136) = v38;
  *(void *)(a1 + 144) = v39;
  *(void *)(a1 + 152) = v40;
  long long v26 = *(_OWORD *)(a1 + 160);
  long long v27 = *(_OWORD *)(a1 + 176);
  *(void *)(a1 + 160) = v41;
  *(void *)(a1 + 168) = v42;
  *(void *)(a1 + 176) = v43;
  *(void *)(a1 + 184) = v44;
  unint64_t v28 = *(void *)(a1 + 192);
  *(void *)(a1 + 192) = v45;
  sub_100A3A0FC(v12, v13, v14, v15, v16, v17, v18, v19, v20, *((uint64_t *)&v20 + 1), v21, *((uint64_t *)&v21 + 1), v22, *((uint64_t *)&v22 + 1), v23, *((uint64_t *)&v23 + 1), v24, *((uint64_t *)&v24 + 1), v25,
    *((uint64_t *)&v25 + 1),
    v26,
    *((uint64_t *)&v26 + 1),
    v27,
    *((uint64_t *)&v27 + 1),
    v28,
    (void (*)(void))sub_10001CFB8,
    (void (*)(uint64_t, uint64_t))sub_100037A24);
  return a1;
}

__n128 initializeWithTake for AirPodsSendPairingDataCommandPayloadv3(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  long long v2 = *(_OWORD *)(a2 + 16);
  long long v3 = *(_OWORD *)(a2 + 32);
  long long v4 = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 64) = v4;
  *(_OWORD *)(a1 + 16) = v2;
  *(_OWORD *)(a1 + 32) = v3;
  long long v5 = *(_OWORD *)(a2 + 80);
  long long v6 = *(_OWORD *)(a2 + 96);
  long long v7 = *(_OWORD *)(a2 + 128);
  *(_OWORD *)(a1 + 112) = *(_OWORD *)(a2 + 112);
  *(_OWORD *)(a1 + 128) = v7;
  *(_OWORD *)(a1 + 80) = v5;
  *(_OWORD *)(a1 + 96) = v6;
  __n128 result = *(__n128 *)(a2 + 144);
  long long v9 = *(_OWORD *)(a2 + 160);
  long long v10 = *(_OWORD *)(a2 + 176);
  *(void *)(a1 + 192) = *(void *)(a2 + 192);
  *(_OWORD *)(a1 + 160) = v9;
  *(_OWORD *)(a1 + 176) = v10;
  *(__n128 *)(a1 + 144) = result;
  return result;
}

uint64_t assignWithTake for AirPodsPairingCommand1_0(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 192);
  uint64_t v5 = *(void *)a1;
  uint64_t v6 = *(void *)(a1 + 8);
  uint64_t v7 = *(void *)(a1 + 16);
  uint64_t v8 = *(void *)(a1 + 24);
  uint64_t v9 = *(void *)(a1 + 32);
  uint64_t v10 = *(void *)(a1 + 40);
  uint64_t v11 = *(void *)(a1 + 48);
  uint64_t v12 = *(void *)(a1 + 56);
  long long v13 = *(_OWORD *)(a1 + 64);
  long long v14 = *(_OWORD *)(a1 + 80);
  long long v15 = *(_OWORD *)(a1 + 96);
  long long v16 = *(_OWORD *)(a1 + 112);
  long long v17 = *(_OWORD *)(a1 + 128);
  long long v18 = *(_OWORD *)(a1 + 144);
  long long v19 = *(_OWORD *)(a1 + 160);
  long long v20 = *(_OWORD *)(a1 + 176);
  unint64_t v21 = *(void *)(a1 + 192);
  long long v22 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v22;
  long long v23 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 48) = v23;
  long long v24 = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 80) = v24;
  long long v25 = *(_OWORD *)(a2 + 112);
  *(_OWORD *)(a1 + 96) = *(_OWORD *)(a2 + 96);
  *(_OWORD *)(a1 + 112) = v25;
  long long v26 = *(_OWORD *)(a2 + 144);
  *(_OWORD *)(a1 + 128) = *(_OWORD *)(a2 + 128);
  *(_OWORD *)(a1 + 144) = v26;
  long long v27 = *(_OWORD *)(a2 + 176);
  *(_OWORD *)(a1 + 160) = *(_OWORD *)(a2 + 160);
  *(_OWORD *)(a1 + 176) = v27;
  *(void *)(a1 + 192) = v4;
  sub_100A3A0FC(v5, v6, v7, v8, v9, v10, v11, v12, v13, *((uint64_t *)&v13 + 1), v14, *((uint64_t *)&v14 + 1), v15, *((uint64_t *)&v15 + 1), v16, *((uint64_t *)&v16 + 1), v17, *((uint64_t *)&v17 + 1), v18,
    *((uint64_t *)&v18 + 1),
    v19,
    *((uint64_t *)&v19 + 1),
    v20,
    *((uint64_t *)&v20 + 1),
    v21,
    (void (*)(void))sub_10001CFB8,
    (void (*)(uint64_t, uint64_t))sub_100037A24);
  return a1;
}

uint64_t getEnumTagSinglePayload for AirPodsPairingCommand1_0(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0xFFF7 && *(unsigned char *)(a1 + 200)) {
    return (*(_DWORD *)a1 + 65527);
  }
  unsigned int v3 = ((((*(void *)(a1 + 192) >> 46) & 0xC000 | *(_WORD *)(a1 + 182) & 0x3FFF) >> 12) | (16
                                                                                          * ((*(void *)(a1 + 24) >> 58) & 0xC | (*(void *)(a1 + 8) >> 60) & 3 | *(unsigned char *)(a1 + 111) & 0x30 | (*(void *)(a1 + 120) >> 54) & 0xC0 | (*(void *)(a1 + 136) >> 52) & 0x300 | (*(void *)(a1 + 152) >> 50) & 0xC00))) ^ 0xFFFF;
  if (v3 >= 0xFFF6) {
    unsigned int v3 = -1;
  }
  return v3 + 1;
}

uint64_t storeEnumTagSinglePayload for AirPodsPairingCommand1_0(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFFF6)
  {
    *(_OWORD *)(result + 168) = 0u;
    *(_OWORD *)(result + 152) = 0u;
    *(_OWORD *)(result + 136) = 0u;
    *(_OWORD *)(result + 184) = 0u;
    *(_OWORD *)(result + 120) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)__n128 result = a2 - 65527;
    if (a3 >= 0xFFF7) {
      *(unsigned char *)(result + 200) = 1;
    }
  }
  else
  {
    if (a3 >= 0xFFF7) {
      *(unsigned char *)(result + 200) = 0;
    }
    if (a2)
    {
      uint64_t v3 = ((unsigned __int16)-(__int16)a2 >> 4) & 0xFFF | ((unsigned __int16)-(__int16)a2 << 12);
      *(void *)__n128 result = 0;
      *(void *)(result + 8) = (unint64_t)(((unsigned __int16)-(__int16)a2 >> 4) & 3) << 60;
      *(void *)(result + 16) = 0;
      *(void *)(result + 24) = (v3 << 58) & 0x3000000000000000;
      *(_OWORD *)(result + 32) = 0u;
      *(_OWORD *)(result + 48) = 0u;
      *(_OWORD *)(result + 64) = 0u;
      *(_OWORD *)(result + 80) = 0u;
      *(void *)(result + 96) = 0;
      *(void *)(result + 104) = (v3 << 56) & 0x3000000000000000;
      *(void *)(result + 112) = 0;
      *(void *)(result + 120) = (v3 << 54) & 0x3000000000000000;
      *(void *)(result + 128) = 0;
      *(void *)(result + 136) = (v3 << 52) & 0x3000000000000000;
      *(void *)(result + 144) = 0;
      *(void *)(result + 152) = (v3 << 50) & 0x3000000000000000;
      *(void *)(result + 160) = 0;
      *(void *)(result + 168) = 0;
      *(void *)(result + 176) = (v3 << 48) & 0x3000000000000000;
      *(void *)(result + 184) = 0;
      *(void *)(result + 192) = (v3 << 46) & 0x3000000000000000;
    }
  }
  return result;
}

uint64_t sub_100A3ABA4(uint64_t result, unsigned int a2)
{
  if (a2 < 9)
  {
    unint64_t v2 = *(void *)(result + 24) & 0xCFFFFFFFFFFFFFFFLL;
    unint64_t v3 = *(void *)(result + 104) & 0xCFFFFFFFFFFFFFFFLL;
    unint64_t v4 = *(void *)(result + 120) & 0xCFFFFFFFFFFFFFFFLL;
    unint64_t v5 = *(void *)(result + 136) & 0xCFFFFFFFFFFFFFFFLL;
    unint64_t v6 = *(void *)(result + 152) & 0xCFFFFFFFFFFFFFFFLL;
    unint64_t v7 = *(void *)(result + 176) & 0xCFFFFFFFFFFFFFFFLL | ((unint64_t)(a2 & 3) << 60);
    unint64_t v8 = *(void *)(result + 192) & 0xCFFFFFFFFFFFFFFFLL | ((((unint64_t)a2 >> 2) & 3) << 60);
    *(void *)(result + 8) &= 0xCFFFFFFFFFFFFFFFLL;
    *(void *)(result + 24) = v2;
    *(void *)(result + 104) = v3;
    *(void *)(result + 120) = v4;
    *(void *)(result + 136) = v5;
    *(void *)(result + 152) = v6;
    *(void *)(result + 176) = v7;
    *(void *)(result + 192) = v8;
  }
  else
  {
    *(void *)__n128 result = a2 - 9;
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 120) = 0u;
    *(_OWORD *)(result + 136) = 0u;
    *(_OWORD *)(result + 152) = 0u;
    *(void *)(result + 168) = 0;
    *(_OWORD *)(result + 176) = xmmword_101374CB0;
    *(void *)(result + 192) = 0x2000000000000000;
  }
  return result;
}

ValueMetadata *type metadata accessor for AirPodsPairingCommand1_0()
{
  return &type metadata for AirPodsPairingCommand1_0;
}

uint64_t sub_100A3AC74@<X0>(char *a1@<X8>)
{
  uint64_t v39 = a1;
  uint64_t v2 = sub_10000588C((uint64_t *)&unk_1016477E0);
  uint64_t v3 = __chkstk_darwin(v2 - 8);
  uint64_t v37 = (char *)&v33 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = __chkstk_darwin(v3);
  uint64_t v35 = (char *)&v33 - v6;
  __chkstk_darwin(v5);
  unint64_t v8 = (char *)&v33 - v7;
  uint64_t v9 = type metadata accessor for MACAddress();
  uint64_t v10 = *(void *)(v9 - 8);
  uint64_t v11 = __chkstk_darwin(v9);
  uint64_t v36 = (char *)&v33 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = __chkstk_darwin(v11);
  uint64_t v34 = (char *)&v33 - v14;
  __chkstk_darwin(v13);
  long long v16 = (char *)&v33 - v15;
  MACAddress.init(data:type:)();
  uint64_t v38 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v10 + 48);
  uint64_t result = v38(v8, 1, v9);
  if (result == 1)
  {
    __break(1u);
    return result;
  }
  long long v18 = *(void (**)(char *, char *, uint64_t))(v10 + 32);
  v18(v16, v8, v9);
  uint64_t v19 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v21 = v20;
  long long v22 = (uint64_t *)(v1 + OBJC_IVAR____TtC12searchpartyd10Peripheral_advertisementData);
  swift_beginAccess();
  uint64_t v23 = *v22;
  if (*(void *)(*v22 + 16))
  {
    swift_bridgeObjectRetain();
    uint64_t v24 = sub_100723FF4(v19, v21);
    if (v25)
    {
      sub_10012F428(*(void *)(v23 + 56) + 32 * v24, (uint64_t)&v41);
    }
    else
    {
      long long v41 = 0u;
      long long v42 = 0u;
    }
    swift_bridgeObjectRelease();
  }
  else
  {
    long long v41 = 0u;
    long long v42 = 0u;
  }
  swift_bridgeObjectRelease();
  if (*((void *)&v42 + 1))
  {
    if (swift_dynamicCast())
    {
      uint64_t v33 = v40;
      uint64_t v26 = *v22;
      if (*(void *)(*v22 + 16))
      {
        swift_bridgeObjectRetain();
        uint64_t v27 = sub_100723FF4(0xD000000000000018, 0x800000010140EE60);
        if (v28)
        {
          sub_10012F428(*(void *)(v26 + 56) + 32 * v27, (uint64_t)&v41);
        }
        else
        {
          long long v41 = 0u;
          long long v42 = 0u;
        }
        swift_bridgeObjectRelease();
        if (*((void *)&v42 + 1))
        {
          if (swift_dynamicCast())
          {
            uint64_t v31 = (uint64_t)v35;
            MACAddress.init(data:type:)();
            uint64_t v32 = v34;
LABEL_24:
            v18(v32, v16, v9);
            if (v38((char *)v31, 1, v9) == 1)
            {
              v18(v39, v32, v9);
              return sub_10001DAB4(v31, (uint64_t *)&unk_1016477E0);
            }
            (*(void (**)(char *, uint64_t))(v10 + 8))(v32, v9);
            long long v29 = v39;
            uint64_t v30 = (char *)v31;
            return ((uint64_t (*)(char *, char *, uint64_t))v18)(v29, v30, v9);
          }
LABEL_23:
          uint64_t v31 = (uint64_t)v37;
          MACAddress.init(data:type:)();
          uint64_t v32 = v36;
          goto LABEL_24;
        }
      }
      else
      {
        long long v41 = 0u;
        long long v42 = 0u;
      }
      sub_10001DAB4((uint64_t)&v41, (uint64_t *)&unk_101644360);
      goto LABEL_23;
    }
  }
  else
  {
    sub_10001DAB4((uint64_t)&v41, (uint64_t *)&unk_101644360);
  }
  long long v29 = v39;
  uint64_t v30 = v16;
  return ((uint64_t (*)(char *, char *, uint64_t))v18)(v29, v30, v9);
}

id sub_100A3B0CC@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  id result = [*(id *)(a1 + OBJC_IVAR____TtC12searchpartyd10Peripheral_underlyingObject) maximumWriteValueLengthForType:1];
  *a2 = result;
  return result;
}

id sub_100A3B114()
{
  if (qword_101637688 != -1) {
    swift_once();
  }
  uint64_t v1 = type metadata accessor for Logger();
  sub_100010324(v1, (uint64_t)qword_10170F8A8);
  sub_100A3C59C(0x74696E696564, 0xE600000000000000);
  v3.receiver = v0;
  v3.super_class = (Class)type metadata accessor for Peripheral();
  return [super dealloc];
}

uint64_t sub_100A3B378()
{
  return type metadata accessor for Peripheral();
}

uint64_t type metadata accessor for Peripheral()
{
  uint64_t result = qword_101655AA0;
  if (!qword_101655AA0) {
    return swift_getSingletonMetadata();
  }
  return result;
}

{
  return type metadata accessor for Peripheral();
}

void sub_100A3B3CC()
{
  uint64_t v1 = type metadata accessor for UUID();
  uint64_t v2 = *(void *)(v1 - 8);
  __chkstk_darwin(v1);
  uint64_t v4 = (char *)&v17 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = *(void **)&v0[OBJC_IVAR____TtC12searchpartyd10Peripheral_underlyingObject];
  uint64_t v6 = (char *)[v5 delegate];
  if (!v6 || (uint64_t v7 = v6, swift_unknownObjectRelease(), v7 != v0))
  {
    if (qword_101637688 != -1) {
      swift_once();
    }
    uint64_t v8 = type metadata accessor for Logger();
    sub_100010324(v8, (uint64_t)qword_10170F8A8);
    long long v18 = v0;
    uint64_t v9 = Logger.logObject.getter();
    os_log_type_t v10 = static os_log_type_t.fault.getter();
    if (os_log_type_enabled(v9, v10))
    {
      uint64_t v11 = (uint8_t *)swift_slowAlloc();
      uint64_t v20 = swift_slowAlloc();
      *(_DWORD *)uint64_t v11 = 136446210;
      id v12 = [v5 identifier:v11 + 4];
      static UUID._unconditionallyBridgeFromObjectiveC(_:)();

      sub_100A42624((unint64_t *)&qword_101638B10, (void (*)(uint64_t))&type metadata accessor for UUID);
      uint64_t v13 = dispatch thunk of CustomStringConvertible.description.getter();
      unint64_t v15 = v14;
      (*(void (**)(char *, uint64_t))(v2 + 8))(v4, v1);
      uint64_t v19 = sub_1008FA0F0(v13, v15, &v20);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();

      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v9, v10, "verifyIntegrity: Peripheral has mismatched delegate! %{public}s", v11, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {

      long long v16 = v18;
    }
  }
}

uint64_t sub_100A3B6E8(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for Date();
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v7 = (char *)&v10 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))(v7, a2, v4);
  uint64_t v8 = a1 + OBJC_IVAR____TtC12searchpartyd10Peripheral_lastSeen;
  swift_beginAccess();
  (*(void (**)(uint64_t, char *, uint64_t))(v5 + 40))(v8, v7, v4);
  return swift_endAccess();
}

uint64_t sub_100A3B808()
{
  return OSAllocatedUnfairLock.callAsFunction<A>(_:)();
}

uint64_t sub_100A3B88C()
{
  uint64_t v0 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v2 = v1;
  uint64_t v7 = &type metadata for Data;
  v6[0] = MACAddress.data.getter();
  v6[1] = v3;
  swift_beginAccess();
  sub_10015D9C8((uint64_t)v6, v0, v2);
  swift_endAccess();
  char v4 = MACAddress.type.getter();
  uint64_t v7 = &type metadata for MACAddress.AddressType;
  LOBYTE(v6[0]) = v4 & 1;
  swift_beginAccess();
  sub_10015D9C8((uint64_t)v6, 0xD000000000000018, 0x800000010140EE60);
  return swift_endAccess();
}

uint64_t sub_100A3B998(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = (void *)(a1 + OBJC_IVAR____TtC12searchpartyd10Peripheral_injectedName);
  *uint64_t v3 = a2;
  v3[1] = a3;
  swift_bridgeObjectRetain();
  return swift_bridgeObjectRelease();
}

uint64_t sub_100A3B9E0(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = 1 << *(unsigned char *)(a1 + 32);
  uint64_t v3 = -1;
  if (v2 < 64) {
    uint64_t v3 = ~(-1 << v2);
  }
  unint64_t v4 = v3 & *(void *)(a1 + 64);
  uint64_t v5 = (void *)(a2 + OBJC_IVAR____TtC12searchpartyd10Peripheral_advertisementData);
  int64_t v35 = (unint64_t)(v2 + 63) >> 6;
  swift_bridgeObjectRetain();
  int64_t v6 = 0;
  while (1)
  {
    if (v4)
    {
      unint64_t v8 = __clz(__rbit64(v4));
      v4 &= v4 - 1;
      unint64_t v9 = v8 | (v6 << 6);
LABEL_8:
      uint64_t v10 = *(void *)(a1 + 56);
      uint64_t v11 = (void *)(*(void *)(a1 + 48) + 16 * v9);
      uint64_t v12 = v11[1];
      *(void *)&long long v37 = *v11;
      *((void *)&v37 + 1) = v12;
      sub_10012F428(v10 + 32 * v9, (uint64_t)v38);
      swift_bridgeObjectRetain();
      goto LABEL_27;
    }
    int64_t v13 = v6 + 1;
    if (__OFADD__(v6, 1)) {
      goto LABEL_42;
    }
    if (v13 < v35)
    {
      unint64_t v14 = *(void *)(v34 + 8 * v13);
      if (v14) {
        goto LABEL_12;
      }
      int64_t v15 = v6 + 2;
      ++v6;
      if (v13 + 1 < v35)
      {
        unint64_t v14 = *(void *)(v34 + 8 * v15);
        if (v14) {
          goto LABEL_15;
        }
        int64_t v6 = v13 + 1;
        if (v13 + 2 < v35)
        {
          unint64_t v14 = *(void *)(v34 + 8 * (v13 + 2));
          if (v14)
          {
            v13 += 2;
            goto LABEL_12;
          }
          int64_t v15 = v13 + 3;
          int64_t v6 = v13 + 2;
          if (v13 + 3 < v35) {
            break;
          }
        }
      }
    }
LABEL_26:
    unint64_t v4 = 0;
    memset(v38, 0, sizeof(v38));
    long long v37 = 0u;
LABEL_27:
    sub_100A3FEA8((uint64_t)&v37, (uint64_t)&v39);
    uint64_t v16 = v40;
    if (!v40) {
      return swift_release();
    }
    uint64_t v17 = v39;
    swift_beginAccess();
    sub_100173E4C(&v41, &v37);
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    long long v42 = (void *)*v5;
    uint64_t v19 = v42;
    *uint64_t v5 = 0x8000000000000000;
    unint64_t v21 = sub_100723FF4(v17, v16);
    uint64_t v22 = v19[2];
    BOOL v23 = (v20 & 1) == 0;
    uint64_t v24 = v22 + v23;
    if (__OFADD__(v22, v23))
    {
      __break(1u);
LABEL_41:
      __break(1u);
LABEL_42:
      __break(1u);
      goto LABEL_43;
    }
    char v25 = v20;
    if (v19[3] >= v24)
    {
      if (isUniquelyReferenced_nonNull_native)
      {
        char v28 = v42;
        if (v20) {
          goto LABEL_4;
        }
      }
      else
      {
        sub_100E7F618();
        char v28 = v42;
        if (v25) {
          goto LABEL_4;
        }
      }
    }
    else
    {
      sub_100E6789C(v24, isUniquelyReferenced_nonNull_native);
      uint64_t v26 = sub_100723FF4(v17, v16);
      if ((v25 & 1) != (v27 & 1)) {
        goto LABEL_44;
      }
      unint64_t v21 = v26;
      char v28 = v42;
      if (v25)
      {
LABEL_4:
        uint64_t v7 = (_OWORD *)(v28[7] + 32 * v21);
        _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)v7);
        sub_100173E4C(&v37, v7);
        goto LABEL_5;
      }
    }
    v28[(v21 >> 6) + 8] |= 1 << v21;
    long long v29 = (uint64_t *)(v28[6] + 16 * v21);
    *long long v29 = v17;
    v29[1] = v16;
    sub_100173E4C(&v37, (_OWORD *)(v28[7] + 32 * v21));
    uint64_t v30 = v28[2];
    BOOL v31 = __OFADD__(v30, 1);
    uint64_t v32 = v30 + 1;
    if (v31) {
      goto LABEL_41;
    }
    v28[2] = v32;
    swift_bridgeObjectRetain();
LABEL_5:
    *uint64_t v5 = v28;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_endAccess();
  }
  unint64_t v14 = *(void *)(v34 + 8 * v15);
  if (v14)
  {
LABEL_15:
    int64_t v13 = v15;
LABEL_12:
    unint64_t v4 = (v14 - 1) & v14;
    unint64_t v9 = __clz(__rbit64(v14)) + (v13 << 6);
    int64_t v6 = v13;
    goto LABEL_8;
  }
  while (1)
  {
    int64_t v13 = v15 + 1;
    if (__OFADD__(v15, 1)) {
      break;
    }
    if (v13 >= v35)
    {
      int64_t v6 = v35 - 1;
      goto LABEL_26;
    }
    unint64_t v14 = *(void *)(v34 + 8 * v13);
    ++v15;
    if (v14) {
      goto LABEL_12;
    }
  }
LABEL_43:
  __break(1u);
LABEL_44:
  uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

uint64_t sub_100A3BDC0()
{
  sub_100A42624(&qword_101655B78, (void (*)(uint64_t))type metadata accessor for Peripheral);
  swift_getObjectType();
  uint64_t v4 = v0;
  CustomStringConvertible.typeDescription.getter();
  type metadata accessor for Peripheral();
  CustomStringConvertible<>.addressDescription.getter();
  id v1 = objc_retainAutoreleasedReturnValue(objc_msgSend(*(id *)(v0
                                                             + OBJC_IVAR____TtC12searchpartyd10Peripheral_underlyingObject), "delegate"));
  if (v1)
  {
    uint64_t v4 = 30768;
    sub_100033838();
    v2._countAndFlagsBits = String.init<A>(_:radix:uppercase:)();
    String.append(_:)(v2);
    swift_unknownObjectRelease();
    id v1 = (id)swift_bridgeObjectRelease();
  }
  __chkstk_darwin(v1);
  OSAllocatedUnfairLock.callAsFunction<A>(_:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v4;
}

void sub_100A3BF90(uint64_t a1@<X0>, void *a2@<X1>, uint64_t a3@<X2>, void *a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, void *a7@<X6>, void *a8@<X8>)
{
  v58._countAndFlagsBits = a3;
  v60._countAndFlagsBits = a6;
  v60._object = a7;
  v58._object = a4;
  long long v57 = a8;
  uint64_t v62 = type metadata accessor for MACAddress();
  uint64_t v67 = *(void *)(v62 - 8);
  __chkstk_darwin(v62);
  long long v61 = (char *)&v57 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v59 = type metadata accessor for Date();
  uint64_t v12 = *(void *)(v59 - 8);
  __chkstk_darwin(v59);
  unint64_t v14 = (char *)&v57 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = type metadata accessor for UUID();
  uint64_t v16 = *(void *)(v15 - 8);
  __chkstk_darwin(v15);
  long long v18 = (char *)&v57 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v63 = 0;
  unint64_t v64 = 0xE000000000000000;
  _StringGuts.grow(_:)(80);
  uint64_t v65 = v63;
  unint64_t v66 = v64;
  v19._countAndFlagsBits = 60;
  v19._object = (void *)0xE100000000000000;
  String.append(_:)(v19);
  v20._countAndFlagsBits = a1;
  v20._object = a2;
  String.append(_:)(v20);
  v21._countAndFlagsBits = 8250;
  v21._object = (void *)0xE200000000000000;
  String.append(_:)(v21);
  String.append(_:)(v58);
  v22._countAndFlagsBits = 32;
  v22._object = (void *)0xE100000000000000;
  String.append(_:)(v22);
  BOOL v23 = *(void **)(a5 + OBJC_IVAR____TtC12searchpartyd10Peripheral_underlyingObject);
  id v24 = [v23 identifier];
  static UUID._unconditionallyBridgeFromObjectiveC(_:)();

  sub_100A42624((unint64_t *)&qword_101638B10, (void (*)(uint64_t))&type metadata accessor for UUID);
  v25._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  String.append(_:)(v25);
  swift_bridgeObjectRelease();
  (*(void (**)(char *, uint64_t))(v16 + 8))(v18, v15);
  v26._countAndFlagsBits = 0x796C7265646E7520;
  v26._object = (void *)0xED0000203A676E69;
  String.append(_:)(v26);
  id v27 = v23;
  id v28 = [v27 description];
  uint64_t v29 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  BOOL v31 = v30;

  v32._countAndFlagsBits = v29;
  v32._object = v31;
  String.append(_:)(v32);

  swift_bridgeObjectRelease();
  v33._countAndFlagsBits = 0x6167656C65645B20;
  v33._object = (void *)0xEC000000203A6574;
  String.append(_:)(v33);
  String.append(_:)(v60);
  v34._object = (void *)0xEC000000203A6E65;
  v34._countAndFlagsBits = 0x65537473616C205DLL;
  String.append(_:)(v34);
  uint64_t v35 = a5 + OBJC_IVAR____TtC12searchpartyd10Peripheral_lastSeen;
  swift_beginAccess();
  uint64_t v36 = v59;
  (*(void (**)(char *, uint64_t, uint64_t))(v12 + 16))(v14, v35, v59);
  sub_100A42624((unint64_t *)&qword_101638DA0, (void (*)(uint64_t))&type metadata accessor for Date);
  v37._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  String.append(_:)(v37);
  swift_bridgeObjectRelease();
  (*(void (**)(char *, uint64_t))(v12 + 8))(v14, v36);
  v38._countAndFlagsBits = 0x203A43414D20;
  v38._object = (void *)0xE600000000000000;
  String.append(_:)(v38);
  uint64_t v39 = v61;
  sub_100A3AC74(v61);
  sub_100A42624((unint64_t *)&qword_101649EE0, (void (*)(uint64_t))&type metadata accessor for MACAddress);
  uint64_t v40 = v62;
  v41._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  String.append(_:)(v41);
  swift_bridgeObjectRelease();
  (*(void (**)(char *, uint64_t))(v67 + 8))(v39, v40);
  v42._countAndFlagsBits = 0x203A656D616E20;
  v42._object = (void *)0xE700000000000000;
  String.append(_:)(v42);
  if (*(void *)(a5 + OBJC_IVAR____TtC12searchpartyd10Peripheral_injectedName + 8))
  {
    uint64_t v43 = *(void *)(a5 + OBJC_IVAR____TtC12searchpartyd10Peripheral_injectedName);
    uint64_t v44 = *(void **)(a5 + OBJC_IVAR____TtC12searchpartyd10Peripheral_injectedName + 8);
LABEL_5:
    swift_bridgeObjectRetain();
    goto LABEL_6;
  }
  id v45 = [v27 name];
  if (v45)
  {
    uint64_t v46 = v45;
    uint64_t v43 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v44 = v47;

    goto LABEL_5;
  }
  uint64_t v43 = 0;
  uint64_t v44 = (void *)0xE000000000000000;
LABEL_6:
  v48._countAndFlagsBits = v43;
  v48._object = v44;
  String.append(_:)(v48);
  swift_bridgeObjectRelease();
  v49._countAndFlagsBits = 0x203A6570797420;
  v49._object = (void *)0xE700000000000000;
  String.append(_:)(v49);
  unsigned int v50 = [v27 connectedTransport];
  if (v50 == 2)
  {
    unint64_t v51 = 0xEA00000000007967;
    uint64_t v52 = 0x72656E45776F6C2ELL;
  }
  else
  {
    unint64_t v51 = 0xE800000000000000;
    if (v50 == 1) {
      uint64_t v52 = 0x63697373616C632ELL;
    }
    else {
      uint64_t v52 = 0x6E776F6E6B6E752ELL;
    }
  }
  long long v53 = v57;
  unint64_t v54 = v51;
  String.append(_:)(*(Swift::String *)&v52);
  swift_bridgeObjectRelease();
  v55._countAndFlagsBits = 62;
  v55._object = (void *)0xE100000000000000;
  String.append(_:)(v55);
  unint64_t v56 = v66;
  *long long v53 = v65;
  v53[1] = v56;
}

void sub_100A3C59C(uint64_t a1, unint64_t a2)
{
  uint64_t v59 = a1;
  uint64_t v4 = type metadata accessor for MACAddress();
  uint64_t v66 = *(void *)(v4 - 8);
  uint64_t v67 = v4;
  __chkstk_darwin(v4);
  uint64_t v65 = (char *)&v52 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = type metadata accessor for Date();
  uint64_t v63 = *(void *)(v6 - 8);
  uint64_t v64 = v6;
  __chkstk_darwin(v6);
  uint64_t v62 = (char *)&v52 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  unint64_t v8 = (void *)type metadata accessor for UUID();
  uint64_t v60 = *(v8 - 1);
  id v61 = v8;
  __chkstk_darwin(v8);
  uint64_t v10 = (char *)&v52 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100A42624(&qword_101655B78, (void (*)(uint64_t))type metadata accessor for Peripheral);
  swift_getObjectType();
  uint64_t v69 = (uint64_t)v2;
  uint64_t v57 = CustomStringConvertible.typeDescription.getter();
  unint64_t v12 = v11;
  type metadata accessor for Peripheral();
  uint64_t v58 = CustomStringConvertible<>.addressDescription.getter();
  unint64_t v14 = v13;
  uint64_t v15 = *(void **)&v2[OBJC_IVAR____TtC12searchpartyd10Peripheral_underlyingObject];
  id v16 = [v15 delegate];
  if (v16)
  {
    uint64_t v69 = 30768;
    unint64_t v70 = 0xE200000000000000;
    v71[0] = (uint64_t)v16;
    sub_100033838();
    v17._countAndFlagsBits = String.init<A>(_:radix:uppercase:)();
    String.append(_:)(v17);
    swift_unknownObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v19 = v69;
    unint64_t v18 = v70;
  }
  else
  {
    unint64_t v18 = 0xE300000000000000;
    uint64_t v19 = 7104878;
  }
  Swift::String v20 = v2;
  swift_bridgeObjectRetain_n();
  Swift::String v21 = v20;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  Swift::String v22 = Logger.logObject.getter();
  int v23 = static os_log_type_t.default.getter();
  if (!os_log_type_enabled(v22, (os_log_type_t)v23))
  {
    swift_bridgeObjectRelease_n();

    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease_n();

    return;
  }
  int v54 = v23;
  os_log_t v55 = v22;
  uint64_t v24 = swift_slowAlloc();
  unint64_t v56 = (void *)swift_slowAlloc();
  uint64_t v53 = swift_slowAlloc();
  v71[0] = v53;
  *(_DWORD *)uint64_t v24 = 136317955;
  swift_bridgeObjectRetain();
  uint64_t v69 = sub_1008FA0F0(v59, a2, v71);
  uint64_t v59 = v19;
  UnsafeMutableRawBufferPointer.copyMemory(from:)();
  swift_bridgeObjectRelease_n();
  *(_WORD *)(v24 + 12) = 2080;
  swift_bridgeObjectRetain();
  uint64_t v69 = sub_1008FA0F0(v57, v12, v71);
  UnsafeMutableRawBufferPointer.copyMemory(from:)();
  swift_bridgeObjectRelease_n();
  *(_WORD *)(v24 + 22) = 2082;
  swift_bridgeObjectRetain();
  uint64_t v69 = sub_1008FA0F0(v58, v14, v71);
  UnsafeMutableRawBufferPointer.copyMemory(from:)();
  swift_bridgeObjectRelease_n();
  *(_WORD *)(v24 + 32) = 2082;
  id v25 = [v15 identifier];
  static UUID._unconditionallyBridgeFromObjectiveC(_:)();

  sub_100A42624((unint64_t *)&qword_101638B10, (void (*)(uint64_t))&type metadata accessor for UUID);
  id v26 = v61;
  uint64_t v27 = dispatch thunk of CustomStringConvertible.description.getter();
  unint64_t v29 = v28;
  (*(void (**)(char *, id))(v60 + 8))(v10, v26);
  uint64_t v69 = sub_1008FA0F0(v27, v29, v71);
  UnsafeMutableRawBufferPointer.copyMemory(from:)();

  swift_bridgeObjectRelease();
  *(_WORD *)(v24 + 42) = 2112;
  uint64_t v69 = (uint64_t)v15;
  id v61 = v15;
  UnsafeMutableRawBufferPointer.copyMemory(from:)();
  *unint64_t v56 = v15;

  *(_WORD *)(v24 + 52) = 2082;
  swift_bridgeObjectRetain();
  uint64_t v69 = sub_1008FA0F0(v59, v18, v71);
  UnsafeMutableRawBufferPointer.copyMemory(from:)();
  swift_bridgeObjectRelease_n();
  *(_WORD *)(v24 + 62) = 2082;
  uint64_t v30 = &v21[OBJC_IVAR____TtC12searchpartyd10Peripheral_lastSeen];
  swift_beginAccess();
  Swift::String v32 = v62;
  uint64_t v31 = v63;
  uint64_t v33 = v64;
  (*(void (**)(char *, char *, uint64_t))(v63 + 16))(v62, v30, v64);
  sub_100A42624((unint64_t *)&qword_101638DA0, (void (*)(uint64_t))&type metadata accessor for Date);
  uint64_t v34 = dispatch thunk of CustomStringConvertible.description.getter();
  unint64_t v36 = v35;
  (*(void (**)(char *, uint64_t))(v31 + 8))(v32, v33);
  uint64_t v68 = sub_1008FA0F0(v34, v36, v71);
  UnsafeMutableRawBufferPointer.copyMemory(from:)();

  swift_bridgeObjectRelease();
  *(_WORD *)(v24 + 72) = 2160;
  uint64_t v68 = 1752392040;
  UnsafeMutableRawBufferPointer.copyMemory(from:)();
  *(_WORD *)(v24 + 82) = 2081;
  Swift::String v37 = v65;
  sub_100A3AC74(v65);
  sub_100A42624((unint64_t *)&qword_101649EE0, (void (*)(uint64_t))&type metadata accessor for MACAddress);
  uint64_t v38 = v67;
  uint64_t v39 = dispatch thunk of CustomStringConvertible.description.getter();
  unint64_t v41 = v40;
  (*(void (**)(char *, uint64_t))(v66 + 8))(v37, v38);
  uint64_t v68 = sub_1008FA0F0(v39, v41, v71);
  UnsafeMutableRawBufferPointer.copyMemory(from:)();

  swift_bridgeObjectRelease();
  *(_WORD *)(v24 + 92) = 2160;
  uint64_t v68 = 1752392040;
  UnsafeMutableRawBufferPointer.copyMemory(from:)();
  *(_WORD *)(v24 + 102) = 2081;
  if (*(void *)&v21[OBJC_IVAR____TtC12searchpartyd10Peripheral_injectedName + 8])
  {
    uint64_t v42 = *(void *)&v21[OBJC_IVAR____TtC12searchpartyd10Peripheral_injectedName];
    unint64_t v43 = *(void *)&v21[OBJC_IVAR____TtC12searchpartyd10Peripheral_injectedName + 8];
    id v44 = v61;
  }
  else
  {
    id v44 = v61;
    id v45 = [v61 name];
    if (!v45)
    {
      uint64_t v42 = 0;
      unint64_t v43 = 0xE000000000000000;
      goto LABEL_11;
    }
    uint64_t v46 = v45;
    uint64_t v42 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    unint64_t v43 = v47;
  }
  swift_bridgeObjectRetain();
LABEL_11:
  uint64_t v68 = sub_1008FA0F0(v42, v43, v71);
  UnsafeMutableRawBufferPointer.copyMemory(from:)();

  swift_bridgeObjectRelease();
  *(_WORD *)(v24 + 112) = 2082;
  unsigned int v48 = [v44 connectedTransport];
  if (v48 == 2)
  {
    unint64_t v49 = 0xEA00000000007967;
    uint64_t v50 = 0x72656E45776F6C2ELL;
  }
  else
  {
    unint64_t v49 = 0xE800000000000000;
    if (v48 == 1) {
      uint64_t v50 = 0x63697373616C632ELL;
    }
    else {
      uint64_t v50 = 0x6E776F6E6B6E752ELL;
    }
  }
  uint64_t v68 = sub_1008FA0F0(v50, v49, v71);
  UnsafeMutableRawBufferPointer.copyMemory(from:)();

  swift_bridgeObjectRelease();
  os_log_t v51 = v55;
  _os_log_impl((void *)&_mh_execute_header, v55, (os_log_type_t)v54, "%s <%s: %{public}s %{public}s underlying: %@ [delegate: %{public}s] lastSeen: %{public}s MAC: %{private,mask.hash}s name: %{private,mask.hash}s type: %{public}s>", (uint8_t *)v24, 0x7Au);
  sub_10000588C((uint64_t *)&unk_101638EA0);
  swift_arrayDestroy();
  swift_slowDealloc();
  swift_arrayDestroy();
  swift_slowDealloc();
  swift_slowDealloc();
}

uint64_t sub_100A3CFB0@<X0>(uint64_t a1@<X0>, unsigned char *a2@<X8>)
{
  uint64_t v4 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v6 = v5;
  uint64_t v7 = (uint64_t *)(a1 + OBJC_IVAR____TtC12searchpartyd10Peripheral_advertisementData);
  swift_beginAccess();
  uint64_t v8 = *v7;
  if (*(void *)(v8 + 16))
  {
    swift_bridgeObjectRetain();
    uint64_t v9 = sub_100723FF4(v4, v6);
    if (v10)
    {
      sub_10012F428(*(void *)(v8 + 56) + 32 * v9, (uint64_t)&v12);
    }
    else
    {
      long long v12 = 0u;
      long long v13 = 0u;
    }
    swift_bridgeObjectRelease();
  }
  else
  {
    long long v12 = 0u;
    long long v13 = 0u;
  }
  swift_bridgeObjectRelease();
  if (!*((void *)&v13 + 1))
  {
    uint64_t result = sub_10001DAB4((uint64_t)&v12, (uint64_t *)&unk_101644360);
    goto LABEL_11;
  }
  uint64_t result = swift_dynamicCast();
  if ((result & 1) == 0) {
LABEL_11:
  }
    *a2 = 2;
  return result;
}

uint64_t sub_100A3D0D8@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  uint64_t v3 = (void *)(a1 + OBJC_IVAR____TtC12searchpartyd10Peripheral_services);
  swift_beginAccess();
  *a2 = *v3;
  return swift_bridgeObjectRetain();
}

void sub_100A3D13C(uint64_t a1, uint64_t a2, uint64_t a3, Class isa)
{
  OSAllocatedUnfairLock.callAsFunction<A>(_:)();
  uint64_t v6 = *(void **)(a3 + OBJC_IVAR____TtC12searchpartyd10Peripheral_underlyingObject);
  if (isa)
  {
    sub_10001D4B0(0, (unint64_t *)&qword_101655B70);
    Class isa = Array._bridgeToObjectiveC()().super.isa;
  }
  [v6 discoverServices:isa];
}

uint64_t sub_100A3D204(char *a1, void (*a2)(void *), uint64_t a3)
{
  uint64_t v4 = &a1[OBJC_IVAR____TtC12searchpartyd10Peripheral_servicesPromise];
  if (*(void *)&a1[OBJC_IVAR____TtC12searchpartyd10Peripheral_servicesPromise])
  {
    if (qword_101637688 != -1) {
      swift_once();
    }
    uint64_t v6 = type metadata accessor for Logger();
    sub_100010324(v6, (uint64_t)qword_10170F8A8);
    uint64_t v7 = Logger.logObject.getter();
    os_log_type_t v8 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v7, v8))
    {
      uint64_t v9 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v9 = 0;
      _os_log_impl((void *)&_mh_execute_header, v7, v8, "Discovery already in flight!", v9, 2u);
      swift_slowDealloc();
    }

    v12[0] = a1;
    __int16 v13 = 259;
    char v10 = a1;
    a2(v12);
    return sub_10001DAB4((uint64_t)v12, &qword_101655B50);
  }
  else
  {
    *(void *)uint64_t v4 = a2;
    *((void *)v4 + 1) = a3;
    swift_retain();
    return sub_1000A1534(0);
  }
}

uint64_t sub_100A3D36C(uint64_t a1)
{
  uint64_t v3 = sub_10000588C(&qword_101638CF0);
  uint64_t v4 = __chkstk_darwin(v3 - 8);
  uint64_t v6 = (char *)v31 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = __chkstk_darwin(v4);
  uint64_t v9 = (char *)v31 - v8;
  __chkstk_darwin(v7);
  unint64_t v11 = (char *)v31 - v10;
  uint64_t v12 = type metadata accessor for ServiceUUID(0);
  __chkstk_darwin(v12 - 8);
  unint64_t v14 = (char *)v31 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v31[0] = v1;
  sub_100A3B3CC();
  uint64_t v15 = *(void *)(a1 + 16);
  id v16 = _swiftEmptyArrayStorage;
  if (!v15)
  {
LABEL_13:
    uint64_t v27 = (void *)v31[0];
    sub_100A3B3CC();
    uint64_t v28 = swift_allocObject();
    *(void *)(v28 + 16) = v27;
    *(void *)(v28 + 24) = v16;
    sub_10000588C((uint64_t *)&unk_101649E90);
    swift_allocObject();
    id v29 = v27;
    swift_bridgeObjectRetain();
    v32[0] = Future.init(_:)();
    sub_100A425A8();
    uint64_t v30 = Publisher.eraseToAnyPublisher()();
    swift_bridgeObjectRelease();
    swift_release();
    return v30;
  }
  uint64_t v33 = _swiftEmptyArrayStorage;
  specialized ContiguousArray.reserveCapacity(_:)();
  uint64_t v17 = a1 + 32;
  uint64_t v31[2] = 0x800000010140EE30;
  void v31[3] = 0x80000001013F2570;
  v31[1] = 0x800000010140EE00;
  while (1)
  {
    sub_10001D010(v17, (uint64_t)v32);
    Swift::String v20 = sub_10001CD44(v32, v32[3]);
    if (*(unsigned char *)v20) {
      break;
    }
    UUID.init(uuidString:)();
    uint64_t v21 = type metadata accessor for UUID();
    uint64_t v25 = *(void *)(v21 - 8);
    uint64_t result = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v25 + 48))(v11, 1, v21);
    if (result == 1) {
      goto LABEL_15;
    }
    uint64_t v24 = *(void (**)(void))(v25 + 32);
LABEL_3:
    v24();
    Class isa = UUID._bridgeToObjectiveC()().super.isa;
    id v19 = [self UUIDWithNSUUID:isa];

    type metadata accessor for UUID();
    (*(void (**)(char *, uint64_t))(*(void *)(v21 - 8) + 8))(v14, v21);
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)v32);
    specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
    specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
    specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
    specialized ContiguousArray._endMutation()();
    v17 += 40;
    if (!--v15)
    {
      id v16 = v33;
      goto LABEL_13;
    }
  }
  if (*(unsigned char *)v20 != 1)
  {
    UUID.init(uuidString:)();
    uint64_t v21 = type metadata accessor for UUID();
    uint64_t v26 = *(void *)(v21 - 8);
    uint64_t result = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v26 + 48))(v6, 1, v21);
    if (result == 1) {
      goto LABEL_16;
    }
    uint64_t v24 = *(void (**)(void))(v26 + 32);
    goto LABEL_3;
  }
  UUID.init(uuidString:)();
  uint64_t v21 = type metadata accessor for UUID();
  uint64_t v22 = *(void *)(v21 - 8);
  uint64_t result = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v22 + 48))(v9, 1, v21);
  if (result != 1)
  {
    uint64_t v24 = *(void (**)(void))(v22 + 32);
    goto LABEL_3;
  }
  __break(1u);
LABEL_15:
  __break(1u);
LABEL_16:
  __break(1u);
  return result;
}

uint64_t sub_100A3D80C(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for ServiceUUID(0);
  __chkstk_darwin(v2 - 8);
  uint64_t v4 = (char *)&v7 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  id v5 = [*(id *)(*(void *)a1 + 32) UUID];
  sub_100BBC528((unint64_t)v4);

  LOBYTE(v5) = static UUID.== infix(_:_:)();
  sub_100A423B0((uint64_t)v4, type metadata accessor for ServiceUUID);
  return v5 & 1;
}

uint64_t sub_100A3D8E4(uint64_t a1, void *a2)
{
  uint64_t v4 = sub_10000588C(&qword_101638CF0);
  uint64_t v5 = __chkstk_darwin(v4 - 8);
  uint64_t v7 = (char *)&v29 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = __chkstk_darwin(v5);
  uint64_t v10 = (char *)&v29 - v9;
  __chkstk_darwin(v8);
  uint64_t v12 = (char *)&v29 - v11;
  uint64_t v13 = type metadata accessor for ServiceUUID(0);
  uint64_t v14 = __chkstk_darwin(v13 - 8);
  id v16 = (char *)&v29 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v14);
  unint64_t v18 = (char *)&v29 - v17;
  id v19 = [*(id *)(*(void *)a1 + 32) UUID];
  sub_100BBC528((unint64_t)v18);

  Swift::String v20 = sub_10001CD44(a2, a2[3]);
  if (!*(unsigned char *)v20)
  {
    UUID.init(uuidString:)();
    uint64_t v24 = type metadata accessor for UUID();
    uint64_t v25 = *(void *)(v24 - 8);
    uint64_t result = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v25 + 48))(v12, 1, v24);
    if (result != 1)
    {
      (*(void (**)(char *, char *, uint64_t))(v25 + 32))(v16, v12, v24);
      goto LABEL_10;
    }
LABEL_12:
    __break(1u);
    goto LABEL_13;
  }
  if (*(unsigned char *)v20 == 1)
  {
    UUID.init(uuidString:)();
    uint64_t v21 = type metadata accessor for UUID();
    uint64_t v22 = *(void *)(v21 - 8);
    uint64_t result = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v22 + 48))(v10, 1, v21);
    if (result != 1)
    {
      (*(void (**)(char *, char *, uint64_t))(v22 + 32))(v16, v10, v21);
LABEL_10:
      char v28 = static UUID.== infix(_:_:)();
      sub_100A423B0((uint64_t)v16, type metadata accessor for ServiceUUID);
      sub_100A423B0((uint64_t)v18, type metadata accessor for ServiceUUID);
      return v28 & 1;
    }
    __break(1u);
    goto LABEL_12;
  }
  UUID.init(uuidString:)();
  uint64_t v26 = type metadata accessor for UUID();
  uint64_t v27 = *(void *)(v26 - 8);
  uint64_t result = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v27 + 48))(v7, 1, v26);
  if (result != 1)
  {
    (*(void (**)(char *, char *, uint64_t))(v27 + 32))(v16, v7, v26);
    goto LABEL_10;
  }
LABEL_13:
  __break(1u);
  return result;
}

void sub_100A3DCA8()
{
  type metadata accessor for Date();
  if (v0 <= 0x3F)
  {
    sub_1003426B0();
    if (v1 <= 0x3F) {
      swift_updateClassMetadata2();
    }
  }
}

uint64_t sub_100A3DDBC(void *a1)
{
  id v2 = [a1 services];
  if (v2)
  {
    uint64_t v3 = v2;
    sub_10001D4B0(0, &qword_101655B68);
    static Array._unconditionallyBridgeFromObjectiveC(_:)();
  }
  sub_100A3B3CC();
  if (qword_101637690 != -1) {
    swift_once();
  }
  uint64_t v4 = type metadata accessor for Logger();
  sub_100010324(v4, (uint64_t)qword_10170F8C0);
  id v5 = v1;
  uint64_t v6 = Logger.logObject.getter();
  os_log_type_t v7 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v6, v7))
  {
    uint64_t v8 = (uint8_t *)swift_slowAlloc();
    uint64_t v9 = (void *)swift_slowAlloc();
    *(_DWORD *)uint64_t v8 = 138412290;
    id v10 = v5;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *uint64_t v9 = v5;

    _os_log_impl((void *)&_mh_execute_header, v6, v7, "CBPeripheralDelegate: peripheral(didDiscoverServices:) called for %@", v8, 0xCu);
    sub_10000588C((uint64_t *)&unk_101638EA0);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
  }
  __chkstk_darwin(v11);
  OSAllocatedUnfairLock.callAsFunction<A>(_:)();
  return swift_bridgeObjectRelease();
}

void sub_100A3E038(char *a1, void *a2, uint64_t a3, unint64_t a4)
{
  uint64_t v4 = (uint64_t *)&a1[OBJC_IVAR____TtC12searchpartyd10Peripheral_servicesPromise];
  id v5 = *(void (**)(uint64_t *))&a1[OBJC_IVAR____TtC12searchpartyd10Peripheral_servicesPromise];
  if (v5)
  {
    if (a3)
    {
      sub_1000BD0E8(*(void *)&a1[OBJC_IVAR____TtC12searchpartyd10Peripheral_servicesPromise]);
      swift_errorRetain();
      if (qword_101637688 != -1) {
        swift_once();
      }
      uint64_t v7 = type metadata accessor for Logger();
      sub_100010324(v7, (uint64_t)qword_10170F8A8);
      swift_errorRetain();
      uint64_t v8 = Logger.logObject.getter();
      os_log_type_t v9 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v8, v9))
      {
        id v10 = (uint8_t *)swift_slowAlloc();
        uint64_t v34 = (void *)swift_slowAlloc();
        *(_DWORD *)id v10 = 138412290;
        v36[0] = _convertErrorToNSError(_:)();
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        *uint64_t v34 = v36[0];
        swift_errorRelease();
        _os_log_impl((void *)&_mh_execute_header, v8, v9, "didDiscoverServices error!: %@", v10, 0xCu);
        sub_10000588C((uint64_t *)&unk_101638EA0);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
      }
      else
      {
        swift_errorRelease();
      }

      v36[0] = a3;
      __int16 v37 = 256;
      swift_errorRetain();
      v5(v36);
      sub_10001DAB4((uint64_t)v36, &qword_101655B50);
      uint64_t v31 = *v4;
      *uint64_t v4 = 0;
      v4[1] = 0;
      sub_1000A1534(v31);
      swift_errorRelease();
    }
    else
    {
      sub_1000BD0E8(*(void *)&a1[OBJC_IVAR____TtC12searchpartyd10Peripheral_servicesPromise]);
      uint64_t v21 = a1;
      uint64_t v22 = sub_100A3F5F8(a4);

      if (qword_101637688 != -1) {
        swift_once();
      }
      uint64_t v23 = type metadata accessor for Logger();
      sub_100010324(v23, (uint64_t)qword_10170F8A8);
      swift_bridgeObjectRetain_n();
      uint64_t v24 = Logger.logObject.getter();
      os_log_type_t v25 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v24, v25))
      {
        unint64_t v35 = v5;
        uint64_t v26 = (uint8_t *)swift_slowAlloc();
        v36[0] = swift_slowAlloc();
        *(_DWORD *)uint64_t v26 = 136446210;
        type metadata accessor for Service();
        swift_bridgeObjectRetain();
        uint64_t v27 = Array.description.getter();
        unint64_t v29 = v28;
        swift_bridgeObjectRelease();
        uint64_t v30 = v27;
        id v5 = v35;
        sub_1008FA0F0(v30, v29, v36);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease_n();
        swift_bridgeObjectRelease();
        _os_log_impl((void *)&_mh_execute_header, v24, v25, "discovered services: %{public}s", v26, 0xCu);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
      }
      else
      {

        swift_bridgeObjectRelease_n();
      }
      swift_beginAccess();
      sub_101020F54((unint64_t)v22);
      swift_endAccess();
      swift_bridgeObjectRelease();
      v36[0] = (uint64_t)v21;
      HIBYTE(v3sub_100A2F554("Can't update non-existant safe location with identifier: %s.", 7) = 0;
      Swift::String v32 = v21;
      v5(v36);
      sub_10001DAB4((uint64_t)v36, &qword_101655B50);
      uint64_t v33 = *v4;
      *uint64_t v4 = 0;
      v4[1] = 0;
      sub_1000A1534(v33);
    }
    sub_1000A1534((uint64_t)v5);
  }
  else
  {
    if (qword_101637688 != -1) {
      swift_once();
    }
    uint64_t v12 = type metadata accessor for Logger();
    sub_100010324(v12, (uint64_t)qword_10170F8A8);
    id v13 = a2;
    uint64_t v14 = Logger.logObject.getter();
    os_log_type_t v15 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v14, v15))
    {
      id v16 = (uint8_t *)swift_slowAlloc();
      uint64_t v17 = (void *)swift_slowAlloc();
      *(_DWORD *)id v16 = 138412290;
      v36[0] = (uint64_t)v13;
      id v18 = v13;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *uint64_t v17 = v13;

      _os_log_impl((void *)&_mh_execute_header, v14, v15, "peripheral(didDiscoverServices:) called with no servicesPromise available!: %@", v16, 0xCu);
      sub_10000588C((uint64_t *)&unk_101638EA0);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
    }
  }
}

uint64_t sub_100A3E698@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  id v5 = (uint64_t *)(a1 + OBJC_IVAR____TtC12searchpartyd10Peripheral_services);
  swift_beginAccess();
  uint64_t v6 = *v5;
  void v9[2] = a2;
  swift_bridgeObjectRetain();
  uint64_t v7 = sub_100E4E988((uint64_t (*)(uint64_t *))sub_100A426D0, (uint64_t)v9, v6);
  uint64_t result = swift_bridgeObjectRelease();
  *a3 = v7;
  return result;
}

void sub_100A3E73C(uint64_t a1, uint64_t a2, void *a3, void *a4)
{
  id v5 = (void *)(a1 + 48);
  uint64_t v6 = *(void (**)(uint64_t *))(a1 + 48);
  if (v6)
  {
    if (a2)
    {
      sub_1000BD0E8(*(void *)(a1 + 48));
      swift_errorRetain();
      if (qword_101637688 != -1) {
        swift_once();
      }
      uint64_t v8 = type metadata accessor for Logger();
      sub_100010324(v8, (uint64_t)qword_10170F8A8);
      swift_errorRetain();
      os_log_type_t v9 = Logger.logObject.getter();
      os_log_type_t v10 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v9, v10))
      {
        uint64_t v11 = (uint8_t *)swift_slowAlloc();
        unint64_t v35 = (void *)swift_slowAlloc();
        *(_DWORD *)uint64_t v11 = 138412290;
        v37[0] = _convertErrorToNSError(_:)();
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        *unint64_t v35 = v37[0];
        swift_errorRelease();
        _os_log_impl((void *)&_mh_execute_header, v9, v10, "didDiscoverCharacteristicsFor error: %@", v11, 0xCu);
        sub_10000588C((uint64_t *)&unk_101638EA0);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
      }
      else
      {
        swift_errorRelease();
      }

      v37[0] = a2;
      __int16 v38 = 256;
      swift_errorRetain();
      v6(v37);
      sub_1000A1534((uint64_t)v6);
      swift_errorRelease();
    }
    else
    {
      swift_retain();
      id v21 = [a3 characteristics];
      if (v21)
      {
        uint64_t v22 = v21;
        sub_10001D4B0(0, &qword_101655B58);
        unint64_t v23 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

        swift_retain();
        id v24 = a4;
        os_log_type_t v25 = sub_100A3F790(v23, (uint64_t)v24, a1);
        swift_bridgeObjectRelease();

        swift_release();
        uint64_t v26 = sub_101159FD8((unint64_t)v25);
        swift_bridgeObjectRelease();
        if (qword_101637690 != -1) {
          swift_once();
        }
        uint64_t v27 = type metadata accessor for Logger();
        sub_100010324(v27, (uint64_t)qword_10170F8C0);
        swift_bridgeObjectRetain_n();
        unint64_t v28 = Logger.logObject.getter();
        os_log_type_t v29 = static os_log_type_t.info.getter();
        if (os_log_type_enabled(v28, v29))
        {
          unint64_t v36 = v6;
          uint64_t v30 = (uint8_t *)swift_slowAlloc();
          v37[0] = swift_slowAlloc();
          *(_DWORD *)uint64_t v30 = 136315138;
          type metadata accessor for Characteristic();
          sub_100A42624(&qword_101655B60, (void (*)(uint64_t))type metadata accessor for Characteristic);
          swift_bridgeObjectRetain();
          uint64_t v31 = Set.description.getter();
          unint64_t v33 = v32;
          swift_bridgeObjectRelease();
          uint64_t v39 = sub_1008FA0F0(v31, v33, v37);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease_n();
          uint64_t v6 = v36;
          swift_bridgeObjectRelease();
          _os_log_impl((void *)&_mh_execute_header, v28, v29, "localCharacteristics: %s", v30, 0xCu);
          swift_arrayDestroy();
          swift_slowDealloc();
          swift_slowDealloc();
        }
        else
        {

          swift_bridgeObjectRelease_n();
        }
        swift_beginAccess();
        sub_10100A6FC(v26);
        swift_endAccess();
      }
      v37[0] = swift_unknownObjectUnownedLoadStrong();
      HIBYTE(v38) = 0;
      v6(v37);
      sub_1000A1534((uint64_t)v6);
    }
    sub_10001DAB4((uint64_t)v37, &qword_101655B50);
    uint64_t v34 = *(void *)(a1 + 48);
    *id v5 = 0;
    v5[1] = 0;
    sub_1000A1534(v34);
  }
  else
  {
    if (qword_101637688 != -1) {
      swift_once();
    }
    uint64_t v12 = type metadata accessor for Logger();
    sub_100010324(v12, (uint64_t)qword_10170F8A8);
    swift_retain_n();
    id v13 = Logger.logObject.getter();
    os_log_type_t v14 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v13, v14))
    {
      os_log_type_t v15 = (uint8_t *)swift_slowAlloc();
      v37[0] = swift_slowAlloc();
      *(_DWORD *)os_log_type_t v15 = 136315138;
      swift_retain();
      uint64_t v16 = sub_101136DF8();
      unint64_t v18 = v17;
      swift_release();
      uint64_t v39 = sub_1008FA0F0(v16, v18, v37);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_release_n();
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v13, v14, "peripheral(didDiscoverCharacteristicsFor:) called with no characteristicsPromise available!: %s", v15, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {

      swift_release_n();
    }
  }
}

void sub_100A3EE28(uint64_t a1, uint64_t a2, void *a3)
{
  if (*(void *)(a1 + 104))
  {
    if (a2)
    {
      uint64_t v26 = a2;
      LOBYTE(v28) = 0;
      swift_retain();
      swift_errorRetain();
      PassthroughSubject.send(completion:)();
      swift_release();
      sub_10001DAB4((uint64_t)&v26, (uint64_t *)&unk_101649EF0);
    }
    else
    {
      swift_retain();
      id v7 = [a3 value];
      if (v7)
      {
        uint64_t v8 = v7;
        uint64_t v9 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
        unint64_t v11 = v10;
      }
      else
      {
        uint64_t v9 = 0;
        unint64_t v11 = 0xC000000000000000;
      }
      uint64_t v26 = v9;
      unint64_t v27 = v11;
      PassthroughSubject.send(_:)();
      swift_release();
      sub_10001CFB8(v9, v11);
    }
  }
  else
  {
    uint64_t v6 = (void *)(a1 + 72);
    id v5 = *(void (**)(uint64_t *))(a1 + 72);
    if (v5)
    {
      if (a2)
      {
        uint64_t v26 = a1;
        unint64_t v27 = a2;
        __int16 v28 = 264;
        swift_errorRetain();
        swift_retain();
        sub_1000BD0E8((uint64_t)v5);
      }
      else
      {
        swift_retain();
        id v20 = [a3 value];
        if (v20)
        {
          id v21 = v20;
          uint64_t v22 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
          unint64_t v24 = v23;
        }
        else
        {
          uint64_t v22 = 0;
          unint64_t v24 = 0xC000000000000000;
        }
        uint64_t v26 = v22;
        unint64_t v27 = v24;
        HIBYTE(v28) = 0;
      }
      v5(&v26);
      sub_1000A1534((uint64_t)v5);
      sub_10001DAB4((uint64_t)&v26, (uint64_t *)&unk_101655B40);
      uint64_t v25 = *(void *)(a1 + 72);
      *uint64_t v6 = 0;
      v6[1] = 0;
      sub_1000A1534(v25);
    }
    else
    {
      if (qword_101637688 != -1) {
        swift_once();
      }
      uint64_t v12 = type metadata accessor for Logger();
      sub_100010324(v12, (uint64_t)qword_10170F8A8);
      swift_retain_n();
      id v13 = Logger.logObject.getter();
      os_log_type_t v14 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v13, v14))
      {
        os_log_type_t v15 = (uint8_t *)swift_slowAlloc();
        uint64_t v16 = swift_slowAlloc();
        *(_DWORD *)os_log_type_t v15 = 136315138;
        uint64_t v26 = v16;
        swift_retain();
        uint64_t v17 = sub_100A6DA6C();
        unint64_t v19 = v18;
        swift_release();
        uint64_t v29 = sub_1008FA0F0(v17, v19, &v26);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_release_n();
        swift_bridgeObjectRelease();
        _os_log_impl((void *)&_mh_execute_header, v13, v14, "didUpdateValueFor characteristic: %s called with no outstanding promise or subject!", v15, 0xCu);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
      }
      else
      {

        swift_release_n();
      }
    }
  }
}

uint64_t sub_100A3F190@<X0>(uint64_t a1@<X0>, void *a2@<X1>, uint64_t (*a3)(uint64_t *)@<X2>, uint64_t *a4@<X8>)
{
  uint64_t v8 = type metadata accessor for ServiceUUID(0);
  __chkstk_darwin(v8 - 8);
  unint64_t v10 = &v16[-((v9 + 15) & 0xFFFFFFFFFFFFFFF0)];
  id v11 = [a2 UUID];
  sub_100BBC528((unint64_t)v10);

  uint64_t v12 = (uint64_t *)(a1 + OBJC_IVAR____TtC12searchpartyd10Peripheral_services);
  swift_beginAccess();
  uint64_t v13 = *v12;
  uint64_t v17 = v10;
  swift_bridgeObjectRetain();
  uint64_t v14 = sub_100E4E988(a3, (uint64_t)v16, v13);
  swift_bridgeObjectRelease();
  uint64_t result = sub_100A423B0((uint64_t)v10, type metadata accessor for ServiceUUID);
  *a4 = v14;
  return result;
}

uint64_t sub_100A3F2BC@<X0>(uint64_t a1@<X0>, void *a2@<X1>, uint64_t (*a3)(uint64_t *)@<X2>, uint64_t *a4@<X8>)
{
  uint64_t v8 = type metadata accessor for CharacteristicUUID(0);
  __chkstk_darwin(v8 - 8);
  unint64_t v10 = &v15[-((v9 + 15) & 0xFFFFFFFFFFFFFFF0)];
  id v11 = [a2 UUID];
  sub_100BBC528((unint64_t)v10);

  swift_beginAccess();
  uint64_t v12 = *(void *)(a1 + 40);
  uint64_t v16 = v10;
  swift_bridgeObjectRetain();
  uint64_t v13 = sub_100E4E9E4(a3, (uint64_t)v15, v12);
  swift_bridgeObjectRelease();
  uint64_t result = sub_100A423B0((uint64_t)v10, type metadata accessor for CharacteristicUUID);
  *a4 = v13;
  return result;
}

uint64_t sub_100A3F3DC@<X0>(uint64_t a1@<X0>, uint64_t (**a2)(uint64_t a1)@<X8>)
{
  uint64_t v3 = *(void *)(a1 + 88);
  uint64_t v4 = *(void *)(a1 + 96);
  *(void *)(a1 + 88) = 0;
  *(void *)(a1 + 96) = 0;
  sub_1000BD0E8(v3);
  sub_1000A1534(v3);
  if (v3)
  {
    uint64_t result = swift_allocObject();
    *(void *)(result + 16) = v3;
    *(void *)(result + 24) = v4;
    uint64_t v6 = sub_1001DF664;
  }
  else
  {
    uint64_t v6 = 0;
    uint64_t result = 0;
  }
  *a2 = v6;
  a2[1] = (uint64_t (*)(uint64_t))result;
  return result;
}

void sub_100A3F480(void *a1, uint64_t a2, void *a3, void *a4, void *a5, void (*a6)(id, void *))
{
  id v10 = a3;
  id v11 = a4;
  id v12 = a1;
  id v13 = a5;
  a6(v11, a5);
}

void *sub_100A3F5F8(unint64_t a1)
{
  if (a1 >> 62) {
    goto LABEL_14;
  }
  uint64_t v2 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
  while (1)
  {
    uint64_t result = _swiftEmptyArrayStorage;
    if (!v2) {
      break;
    }
    uint64_t result = (void *)specialized ContiguousArray.reserveCapacity(_:)();
    if (v2 < 0)
    {
      __break(1u);
      return result;
    }
    uint64_t v4 = 0;
    while (v2 != v4)
    {
      if ((a1 & 0xC000000000000001) != 0) {
        id v5 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
      }
      else {
        id v5 = *(id *)(a1 + 8 * v4 + 32);
      }
      id v6 = v5;
      ++v4;
      type metadata accessor for Service();
      id v7 = (void *)swift_allocObject();
      sub_10000588C((uint64_t *)&unk_101638CE0);
      uint64_t v8 = swift_allocObject();
      *(_DWORD *)(v8 + 16) = 0;
      v7[3] = v8;
      v7[7] = 0;
      _OWORD v7[5] = &_swiftEmptySetSingleton;
      void v7[6] = 0;
      swift_unknownObjectUnownedInit();
      v7[4] = v6;
      specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
      specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
      specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      specialized ContiguousArray._endMutation()();
      if (v2 == v4) {
        return _swiftEmptyArrayStorage;
      }
    }
    __break(1u);
LABEL_14:
    swift_bridgeObjectRetain();
    uint64_t v2 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  return result;
}

void *sub_100A3F790(unint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a1 >> 62) {
    goto LABEL_14;
  }
  uint64_t v5 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
  while (1)
  {
    uint64_t result = _swiftEmptyArrayStorage;
    if (!v5) {
      break;
    }
    uint64_t result = (void *)specialized ContiguousArray.reserveCapacity(_:)();
    if (v5 < 0)
    {
      __break(1u);
      return result;
    }
    uint64_t v7 = 0;
    while (v5 != v7)
    {
      if ((a1 & 0xC000000000000001) != 0) {
        id v8 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
      }
      else {
        id v8 = *(id *)(a1 + 8 * v7 + 32);
      }
      id v9 = v8;
      ++v7;
      type metadata accessor for Characteristic();
      uint64_t v10 = swift_allocObject();
      sub_10000588C((uint64_t *)&unk_101638CE0);
      uint64_t v11 = swift_allocObject();
      *(_DWORD *)(v11 + 16) = 0;
      *(void *)(v10 + 16) = v11;
      *(void *)(v10 + 48) = &_swiftEmptySetSingleton;
      *(_OWORD *)(v10 + 56) = 0u;
      *(_OWORD *)(v10 + 72) = 0u;
      *(_OWORD *)(v10 + 88) = 0u;
      *(void *)(v10 + 104) = 0;
      swift_unknownObjectUnownedInit();
      *(void *)(v10 + 32) = a3;
      *(void *)(v10 + 40) = v9;
      swift_unownedRetain();
      specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
      specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
      specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      specialized ContiguousArray._endMutation()();
      if (v5 == v7) {
        return _swiftEmptyArrayStorage;
      }
    }
    __break(1u);
LABEL_14:
    swift_bridgeObjectRetain();
    uint64_t v5 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  return result;
}

id sub_100A3F940(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v11 = OBJC_IVAR____TtC12searchpartyd10Peripheral_lock;
  sub_10000588C((uint64_t *)&unk_101638CE0);
  uint64_t v12 = swift_allocObject();
  *(void *)&v5[v11] = v12;
  *(void *)&v5[OBJC_IVAR____TtC12searchpartyd10Peripheral_services] = &_swiftEmptySetSingleton;
  *(_DWORD *)(v12 + 16) = 0;
  id v13 = &v5[OBJC_IVAR____TtC12searchpartyd10Peripheral_connectionPromise];
  *(void *)id v13 = 0;
  *((void *)v13 + 1) = 0;
  uint64_t v14 = &v5[OBJC_IVAR____TtC12searchpartyd10Peripheral_disconnectionPromise];
  *(void *)uint64_t v14 = 0;
  *((void *)v14 + 1) = 0;
  os_log_type_t v15 = &v5[OBJC_IVAR____TtC12searchpartyd10Peripheral_servicesPromise];
  *(void *)os_log_type_t v15 = 0;
  *((void *)v15 + 1) = 0;
  uint64_t v16 = &v5[OBJC_IVAR____TtC12searchpartyd10Peripheral_sendDataPromise];
  *(void *)uint64_t v16 = 0;
  *((void *)v16 + 1) = 0;
  uint64_t v17 = (uint64_t)&v5[OBJC_IVAR____TtC12searchpartyd10Peripheral_findMyIdentifier];
  uint64_t v18 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v18 - 8) + 56))(v17, 1, 1, v18);
  unint64_t v19 = &v5[OBJC_IVAR____TtC12searchpartyd10Peripheral_injectedName];
  *(void *)unint64_t v19 = 0;
  *((void *)v19 + 1) = 0;
  *(void *)&v5[OBJC_IVAR____TtC12searchpartyd10Peripheral_underlyingObject] = a1;
  *(void *)&v5[OBJC_IVAR____TtC12searchpartyd10Peripheral_advertisementData] = a2;
  *(void *)&v5[OBJC_IVAR____TtC12searchpartyd10Peripheral_RSSI] = a3;
  id v20 = &v5[OBJC_IVAR____TtC12searchpartyd10Peripheral_lastSeen];
  uint64_t v21 = type metadata accessor for Date();
  uint64_t v22 = *(void *)(v21 - 8);
  (*(void (**)(char *, uint64_t, uint64_t))(v22 + 16))(v20, a4, v21);
  swift_beginAccess();
  unint64_t v23 = v5;
  id v24 = a1;
  sub_100A3FE40(a5, v17);
  swift_endAccess();

  v41.receiver = v23;
  v41.super_class = (Class)type metadata accessor for Peripheral();
  id v25 = [super init];
  id v26 = [v24 delegate];
  if (!v26) {
    goto LABEL_17;
  }
  if (v26 == v25)
  {
LABEL_16:
    swift_unknownObjectRelease();
    goto LABEL_17;
  }
  uint64_t v27 = swift_dynamicCastClass();
  uint64_t v28 = qword_101637688;
  if (!v27)
  {
    if (qword_101637688 != -1) {
      swift_once();
    }
    uint64_t v34 = type metadata accessor for Logger();
    sub_100010324(v34, (uint64_t)qword_10170F8A8);
    unint64_t v35 = Logger.logObject.getter();
    os_log_type_t v36 = static os_log_type_t.fault.getter();
    if (os_log_type_enabled(v35, v36))
    {
      __int16 v37 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)__int16 v37 = 0;
      _os_log_impl((void *)&_mh_execute_header, v35, v36, "CBPeripheral already has a delegate.", v37, 2u);
      swift_slowDealloc();
      swift_unknownObjectRelease();

      goto LABEL_17;
    }

    goto LABEL_16;
  }
  uint64_t v29 = v27;
  uint64_t v40 = a5;
  swift_unknownObjectRetain();
  if (v28 != -1) {
    swift_once();
  }
  uint64_t v30 = type metadata accessor for Logger();
  sub_100010324(v30, (uint64_t)qword_10170F8A8);
  swift_unknownObjectRetain_n();
  uint64_t v31 = Logger.logObject.getter();
  os_log_type_t v32 = static os_log_type_t.fault.getter();
  if (os_log_type_enabled(v31, v32))
  {
    unint64_t v33 = (uint8_t *)swift_slowAlloc();
    uint64_t v39 = (void *)swift_slowAlloc();
    *(_DWORD *)unint64_t v33 = 138543362;
    uint64_t v42 = v29;
    swift_unknownObjectRetain();
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *uint64_t v39 = v29;
    swift_unknownObjectRelease_n();
    _os_log_impl((void *)&_mh_execute_header, v31, v32, "CBPeripheral already has a delegate: %{public}@", v33, 0xCu);
    sub_10000588C((uint64_t *)&unk_101638EA0);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
    swift_unknownObjectRelease_n();
  }
  else
  {

    swift_unknownObjectRelease_n();
  }
  a5 = v40;
LABEL_17:
  [v24 setDelegate:v25, v39];

  sub_10001DAB4(a5, &qword_101638CF0);
  (*(void (**)(uint64_t, uint64_t))(v22 + 8))(a4, v21);
  return v25;
}

uint64_t sub_100A3FE40(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_10000588C(&qword_101638CF0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 24))(a2, a1, v4);
  return a2;
}

uint64_t sub_100A3FEA8(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_10000588C(&qword_101655B18);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_100A3FF10(void *a1, uint64_t a2)
{
  uint64_t v3 = v2;
  uint64_t v30 = a2;
  uint64_t v5 = type metadata accessor for ServiceUUID(0);
  __chkstk_darwin(v5 - 8);
  uint64_t v7 = (char *)&v28 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  id v8 = [a1 UUID];
  sub_100BBC528((unint64_t)v7);

  sub_100A3B3CC();
  if (qword_101637690 != -1) {
    swift_once();
  }
  uint64_t v9 = type metadata accessor for Logger();
  sub_100010324(v9, (uint64_t)qword_10170F8C0);
  uint64_t v10 = a1;
  uint64_t v11 = Logger.logObject.getter();
  os_log_type_t v12 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v11, v12))
  {
    id v13 = (uint8_t *)swift_slowAlloc();
    uint64_t v14 = swift_slowAlloc();
    uint64_t v28 = v9;
    os_log_type_t v15 = (void *)v14;
    uint64_t v29 = v3;
    *(_DWORD *)id v13 = 138412290;
    os_log_type_t v32 = v10;
    uint64_t v16 = v10;
    uint64_t v3 = v29;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *os_log_type_t v15 = v10;

    _os_log_impl((void *)&_mh_execute_header, v11, v12, "CBPeripheralDelegate: peripheral(didDiscoverCharacteristicsFor:) %@", v13, 0xCu);
    sub_10000588C((uint64_t *)&unk_101638EA0);
    swift_arrayDestroy();
    uint64_t v9 = v28;
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {

    uint64_t v11 = v10;
  }

  __chkstk_darwin(v17);
  *(&v28 - 2) = v3;
  *(&v28 - 1) = (uint64_t)v7;
  sub_10000588C(&qword_101655B20);
  uint64_t v18 = OSAllocatedUnfairLock.callAsFunction<A>(_:)();
  unint64_t v19 = v32;
  if (v32)
  {
    __chkstk_darwin(v18);
    uint64_t v20 = v30;
    *(&v28 - 4) = (uint64_t)v19;
    *(&v28 - 3) = v20;
    *(&v28 - 2) = (uint64_t)v10;
    *(&v28 - 1) = v3;
    swift_retain();
    OSAllocatedUnfairLock.callAsFunction<A>(_:)();
    swift_release_n();
  }
  else
  {
    if (qword_101637688 != -1) {
      swift_once();
    }
    sub_100010324(v9, (uint64_t)qword_10170F8A8);
    uint64_t v21 = v10;
    uint64_t v22 = Logger.logObject.getter();
    os_log_type_t v23 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v22, v23))
    {
      id v24 = (uint8_t *)swift_slowAlloc();
      id v25 = (void *)swift_slowAlloc();
      *(_DWORD *)id v24 = 138412290;
      uint64_t v31 = v21;
      id v26 = v21;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *id v25 = v21;

      _os_log_impl((void *)&_mh_execute_header, v22, v23, "Could not find Service for: %@", v24, 0xCu);
      sub_10000588C((uint64_t *)&unk_101638EA0);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {

      uint64_t v22 = v21;
    }
  }
  return sub_100A423B0((uint64_t)v7, type metadata accessor for ServiceUUID);
}

void sub_100A403B0(void *a1, uint8_t *a2)
{
  uint64_t v3 = v2;
  uint64_t v6 = type metadata accessor for UUID();
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  uint64_t v9 = (char *)v44 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100A3B3CC();
  if (qword_101637690 != -1) {
    swift_once();
  }
  unint64_t v49 = (uint8_t *)type metadata accessor for Logger();
  sub_100010324((uint64_t)v49, (uint64_t)qword_10170F8C0);
  id v10 = a1;
  uint64_t v11 = Logger.logObject.getter();
  os_log_type_t v12 = static os_log_type_t.info.getter();
  BOOL v13 = os_log_type_enabled(v11, v12);
  uint64_t v47 = v7;
  uint64_t v48 = v6;
  uint64_t v46 = v9;
  if (v13)
  {
    uint64_t v14 = (uint8_t *)swift_slowAlloc();
    uint64_t v15 = swift_slowAlloc();
    id v45 = a2;
    uint64_t v16 = (void *)v15;
    *(_DWORD *)uint64_t v14 = 138412290;
    uint64_t v51 = (uint64_t)v10;
    id v17 = v10;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    void *v16 = v10;

    _os_log_impl((void *)&_mh_execute_header, v11, v12, "CBPeripheralDelegate: didUpdateValueFor: %@", v14, 0xCu);
    sub_10000588C((uint64_t *)&unk_101638EA0);
    swift_arrayDestroy();
    a2 = v45;
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
  }
  id v18 = [v10 service];
  if (v18)
  {
    unint64_t v19 = v18;
    uint64_t v20 = __chkstk_darwin(v18);
    v44[-2] = v3;
    v44[-1] = v20;
    sub_10000588C(&qword_101655B20);
    uint64_t v21 = OSAllocatedUnfairLock.callAsFunction<A>(_:)();
    uint64_t v22 = v51;
    if (!v51)
    {
      if (qword_101637688 != -1) {
        swift_once();
      }
      sub_100010324((uint64_t)v49, (uint64_t)qword_10170F8A8);
      id v25 = v19;
      id v26 = Logger.logObject.getter();
      os_log_type_t v27 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v26, v27))
      {
        uint64_t v28 = (uint8_t *)swift_slowAlloc();
        uint64_t v51 = swift_slowAlloc();
        *(_DWORD *)uint64_t v28 = 136315138;
        unint64_t v49 = v28 + 4;
        id v29 = [v25 UUID];
        unint64_t v30 = (unint64_t)v46;
        sub_100BBC528((unint64_t)v46);

        sub_100A42624((unint64_t *)&qword_101638B10, (void (*)(uint64_t))&type metadata accessor for UUID);
        uint64_t v31 = v48;
        uint64_t v32 = dispatch thunk of CustomStringConvertible.description.getter();
        unint64_t v34 = v33;
        (*(void (**)(unint64_t, uint64_t))(v47 + 8))(v30, v31);
        uint64_t v50 = sub_1008FA0F0(v32, v34, &v51);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();

        swift_bridgeObjectRelease();
        _os_log_impl((void *)&_mh_execute_header, v26, v27, "Could not find Service for: %s", v28, 0xCu);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();

        return;
      }

      goto LABEL_19;
    }
    __chkstk_darwin(v21);
    v44[-2] = v22;
    v44[-1] = v10;
    swift_retain();
    swift_retain();
    sub_10000588C(&qword_101655B28);
    OSAllocatedUnfairLock.callAsFunction<A>(_:)();
    uint64_t v23 = swift_release();
    uint64_t v24 = v51;
    if (v51)
    {
      __chkstk_darwin(v23);
      v44[-4] = v24;
      v44[-3] = a2;
      v44[-2] = v10;
      swift_retain();
      swift_retain();
      OSAllocatedUnfairLock.callAsFunction<A>(_:)();
      swift_release();
      swift_release_n();
      swift_release_n();

      return;
    }
    if (qword_101637688 != -1) {
      swift_once();
    }
    sub_100010324((uint64_t)v49, (uint64_t)qword_10170F8A8);
    id v35 = v10;
    id v25 = Logger.logObject.getter();
    os_log_type_t v36 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v25, v36))
    {
      __int16 v37 = (uint8_t *)swift_slowAlloc();
      unint64_t v49 = (uint8_t *)swift_slowAlloc();
      uint64_t v51 = (uint64_t)v49;
      *(_DWORD *)__int16 v37 = 136315138;
      v44[1] = v37 + 4;
      id v45 = v37;
      id v38 = [v35 UUID];
      unint64_t v39 = (unint64_t)v46;
      sub_100BBC528((unint64_t)v46);

      sub_100A42624((unint64_t *)&qword_101638B10, (void (*)(uint64_t))&type metadata accessor for UUID);
      uint64_t v40 = v48;
      uint64_t v41 = dispatch thunk of CustomStringConvertible.description.getter();
      unint64_t v43 = v42;
      (*(void (**)(unint64_t, uint64_t))(v47 + 8))(v39, v40);
      uint64_t v50 = sub_1008FA0F0(v41, v43, &v51);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();

      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v25, v36, "Could not find Characteristic for: %s", v45, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      swift_release_n();
LABEL_19:

      return;
    }

    swift_release_n();
  }
}

void sub_100A40BC0(void *a1, uint64_t a2)
{
  uint64_t v54 = a2;
  uint64_t v4 = type metadata accessor for UUID();
  uint64_t v56 = *(void *)(v4 - 8);
  uint64_t v57 = v4;
  __chkstk_darwin(v4);
  unint64_t v55 = (unint64_t)&v54 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v59 = v2;
  sub_100A3B3CC();
  if (qword_101637690 != -1) {
    swift_once();
  }
  uint64_t v58 = (void (*)(void))type metadata accessor for Logger();
  sub_100010324((uint64_t)v58, (uint64_t)qword_10170F8C0);
  uint64_t v6 = a1;
  uint64_t v7 = Logger.logObject.getter();
  os_log_type_t v8 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v7, v8))
  {
    uint64_t v9 = (uint8_t *)swift_slowAlloc();
    id v10 = (void *)swift_slowAlloc();
    *(_DWORD *)uint64_t v9 = 138412290;
    uint64_t v60 = v6;
    uint64_t v11 = v6;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *id v10 = v6;

    _os_log_impl((void *)&_mh_execute_header, v7, v8, "CBPeripheralDelegate: didWriteValueFor: %@", v9, 0xCu);
    sub_10000588C((uint64_t *)&unk_101638EA0);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
  }
  os_log_type_t v12 = (uint8_t *)[v6 service:v54];
  if (v12)
  {
    BOOL v13 = v12;
    uint64_t v14 = __chkstk_darwin(v12);
    *(&v54 - 2) = v15;
    *(&v54 - 1) = v14;
    sub_10000588C(&qword_101655B20);
    uint64_t v16 = OSAllocatedUnfairLock.callAsFunction<A>(_:)();
    uint64_t v17 = (uint64_t)v60;
    if (v60)
    {
      __chkstk_darwin(v16);
      *(&v54 - 2) = v17;
      *(&v54 - 1) = (uint64_t)v6;
      swift_retain();
      swift_retain();
      sub_10000588C(&qword_101655B28);
      OSAllocatedUnfairLock.callAsFunction<A>(_:)();
      swift_release();
      if (v60)
      {
        swift_retain_n();
        id v18 = Logger.logObject.getter();
        os_log_type_t v19 = static os_log_type_t.info.getter();
        if (os_log_type_enabled(v18, v19))
        {
          uint64_t v20 = (uint8_t *)swift_slowAlloc();
          uint64_t v21 = swift_slowAlloc();
          uint64_t v59 = v13;
          uint64_t v60 = (void (*)(void))v21;
          *(_DWORD *)uint64_t v20 = 136315138;
          uint64_t v57 = 0;
          swift_retain();
          uint64_t v22 = sub_100A6DA6C();
          unint64_t v24 = v23;
          swift_release();
          uint64_t v62 = sub_1008FA0F0(v22, v24, (uint64_t *)&v60);
          BOOL v13 = v59;
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_release_n();
          swift_bridgeObjectRelease();
          _os_log_impl((void *)&_mh_execute_header, v18, v19, "CBPeripheralDelegate: didWriteValueFor wrappedCharacteristic: %s", v20, 0xCu);
          swift_arrayDestroy();
          swift_slowDealloc();
          swift_slowDealloc();
        }
        else
        {

          swift_release_n();
        }
        swift_retain();
        sub_10000588C((uint64_t *)&unk_101655B30);
        OSAllocatedUnfairLock.callAsFunction<A>(_:)();
        swift_release();
        uint64_t v46 = v60;
        if (v60)
        {
          if (v54)
          {
            uint64_t v60 = (void (*)(void))v54;
            __int16 v61 = 256;
            sub_1000BD0E8((uint64_t)v46);
            swift_errorRetain();
          }
          else
          {
            HIBYTE(v61) = 0;
            swift_retain();
          }
          v46(&v60);
          sub_1000A1534((uint64_t)v46);
          swift_release();
          sub_1000A1534((uint64_t)v46);
          swift_release();

          swift_release_n();
          sub_10001DAB4((uint64_t)&v60, &qword_10163C5F8);
          return;
        }
        if (qword_101637688 != -1) {
          swift_once();
        }
        sub_100010324((uint64_t)v58, (uint64_t)qword_10170F8A8);
        swift_retain_n();
        __int16 v37 = Logger.logObject.getter();
        os_log_type_t v47 = static os_log_type_t.error.getter();
        if (os_log_type_enabled(v37, v47))
        {
          uint64_t v48 = (uint8_t *)swift_slowAlloc();
          uint64_t v49 = swift_slowAlloc();
          *(_DWORD *)uint64_t v48 = 136315138;
          uint64_t v59 = (uint8_t *)v17;
          uint64_t v60 = (void (*)(void))v49;
          swift_retain();
          uint64_t v50 = sub_100A6DA6C();
          uint64_t v51 = v13;
          unint64_t v53 = v52;
          swift_release();
          uint64_t v62 = sub_1008FA0F0(v50, v53, (uint64_t *)&v60);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_release_n();
          swift_bridgeObjectRelease();
          _os_log_impl((void *)&_mh_execute_header, v37, v47, "didWriteValueFor characteristic: %s called with no outstanding promise!", v48, 0xCu);
          swift_arrayDestroy();
          swift_slowDealloc();
          swift_slowDealloc();

          swift_release_n();
          goto LABEL_28;
        }

        swift_release_n();
      }
      else
      {
        if (qword_101637688 != -1) {
          swift_once();
        }
        sub_100010324((uint64_t)v58, (uint64_t)qword_10170F8A8);
        os_log_type_t v36 = v6;
        __int16 v37 = Logger.logObject.getter();
        os_log_type_t v38 = static os_log_type_t.error.getter();
        if (os_log_type_enabled(v37, v38))
        {
          unint64_t v39 = (uint8_t *)swift_slowAlloc();
          uint64_t v58 = (void (*)(void))swift_slowAlloc();
          uint64_t v59 = (uint8_t *)v17;
          uint64_t v60 = v58;
          *(_DWORD *)unint64_t v39 = 136315138;
          id v40 = [v36 UUID:v39 + 4];
          unint64_t v41 = v55;
          sub_100BBC528(v55);

          sub_100A42624((unint64_t *)&qword_101638B10, (void (*)(uint64_t))&type metadata accessor for UUID);
          uint64_t v42 = v57;
          uint64_t v43 = dispatch thunk of CustomStringConvertible.description.getter();
          unint64_t v45 = v44;
          (*(void (**)(unint64_t, uint64_t))(v56 + 8))(v41, v42);
          uint64_t v62 = sub_1008FA0F0(v43, v45, (uint64_t *)&v60);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();

          swift_bridgeObjectRelease();
          _os_log_impl((void *)&_mh_execute_header, v37, v38, "Could not find Characteristic for: %s", v39, 0xCu);
          swift_arrayDestroy();
          swift_slowDealloc();
          swift_slowDealloc();

LABEL_28:
          swift_release_n();

          return;
        }
      }
      swift_release_n();
      return;
    }
    if (qword_101637688 != -1) {
      swift_once();
    }
    sub_100010324((uint64_t)v58, (uint64_t)qword_10170F8A8);
    id v25 = v13;
    id v26 = Logger.logObject.getter();
    os_log_type_t v27 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v26, v27))
    {
      uint64_t v28 = (uint8_t *)swift_slowAlloc();
      uint64_t v29 = swift_slowAlloc();
      *(_DWORD *)uint64_t v28 = 136315138;
      uint64_t v59 = v28 + 4;
      uint64_t v60 = (void (*)(void))v29;
      id v30 = [(uint8_t *)v25 UUID];
      unint64_t v31 = v55;
      sub_100BBC528(v55);

      sub_100A42624((unint64_t *)&qword_101638B10, (void (*)(uint64_t))&type metadata accessor for UUID);
      uint64_t v32 = v57;
      uint64_t v33 = dispatch thunk of CustomStringConvertible.description.getter();
      unint64_t v35 = v34;
      (*(void (**)(unint64_t, uint64_t))(v56 + 8))(v31, v32);
      uint64_t v62 = sub_1008FA0F0(v33, v35, (uint64_t *)&v60);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();

      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v26, v27, "Could not find Service for: %s", v28, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
    }
  }
}

void sub_100A41708(void *a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = type metadata accessor for UUID();
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v7 = (char *)v53 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100A3B3CC();
  if (qword_101637690 != -1) {
    swift_once();
  }
  uint64_t v8 = type metadata accessor for Logger();
  sub_100010324(v8, (uint64_t)qword_10170F8C0);
  uint64_t v9 = a1;
  id v10 = Logger.logObject.getter();
  os_log_type_t v11 = static os_log_type_t.info.getter();
  BOOL v12 = os_log_type_enabled(v10, v11);
  uint64_t v57 = v5;
  uint64_t v58 = (uint8_t *)v4;
  uint64_t v56 = v7;
  if (v12)
  {
    BOOL v13 = (uint8_t *)swift_slowAlloc();
    uint64_t v14 = swift_slowAlloc();
    uint64_t v55 = v8;
    uint64_t v15 = (void *)v14;
    *(_DWORD *)BOOL v13 = 138412290;
    uint64_t v60 = v9;
    uint64_t v16 = v9;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *uint64_t v15 = v9;

    _os_log_impl((void *)&_mh_execute_header, v10, v11, "CBPeripheralDelegate: didUpdateNotificationStateFor: %@", v13, 0xCu);
    sub_10000588C((uint64_t *)&unk_101638EA0);
    swift_arrayDestroy();
    uint64_t v8 = v55;
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
  }
  id v17 = [v9 service];
  if (v17)
  {
    id v18 = v17;
    uint64_t v19 = __chkstk_darwin(v17);
    v53[-2] = v2;
    v53[-1] = v19;
    sub_10000588C(&qword_101655B20);
    uint64_t v20 = OSAllocatedUnfairLock.callAsFunction<A>(_:)();
    uint64_t v21 = (uint64_t)v60;
    if (v60)
    {
      __chkstk_darwin(v20);
      v53[-2] = v21;
      v53[-1] = v9;
      swift_retain();
      swift_retain();
      sub_10000588C(&qword_101655B28);
      OSAllocatedUnfairLock.callAsFunction<A>(_:)();
      swift_release();
      if (v60)
      {
        uint64_t v22 = (void *)v60[5];
        swift_retain();
        if ([v22 isNotifying])
        {
          if (qword_101637688 != -1) {
            swift_once();
          }
          sub_100010324(v8, (uint64_t)qword_10170F8A8);
          swift_retain_n();
          unint64_t v23 = Logger.logObject.getter();
          os_log_type_t v24 = static os_log_type_t.info.getter();
          if (os_log_type_enabled(v23, v24))
          {
            id v25 = (uint8_t *)swift_slowAlloc();
            uint64_t v60 = (void *)swift_slowAlloc();
            *(_DWORD *)id v25 = 136315138;
            uint64_t v58 = v25 + 4;
            swift_retain();
            uint64_t v26 = sub_100A6DA6C();
            unint64_t v28 = v27;
            swift_release();
            uint64_t v59 = sub_1008FA0F0(v26, v28, (uint64_t *)&v60);
            UnsafeMutableRawBufferPointer.copyMemory(from:)();
            swift_release_n();
            swift_bridgeObjectRelease();
            uint64_t v29 = "Start notifying: %s.";
LABEL_26:
            _os_log_impl((void *)&_mh_execute_header, v23, v24, v29, v25, 0xCu);
            swift_arrayDestroy();
            swift_slowDealloc();
            swift_slowDealloc();

            swift_release_n();
            swift_release_n();

            return;
          }
        }
        else
        {
          if (qword_101637688 != -1) {
            swift_once();
          }
          sub_100010324(v8, (uint64_t)qword_10170F8A8);
          swift_retain_n();
          unint64_t v23 = Logger.logObject.getter();
          os_log_type_t v24 = static os_log_type_t.info.getter();
          if (os_log_type_enabled(v23, v24))
          {
            id v25 = (uint8_t *)swift_slowAlloc();
            uint64_t v60 = (void *)swift_slowAlloc();
            *(_DWORD *)id v25 = 136315138;
            uint64_t v58 = v25 + 4;
            swift_retain();
            uint64_t v50 = sub_100A6DA6C();
            unint64_t v52 = v51;
            swift_release();
            uint64_t v59 = sub_1008FA0F0(v50, v52, (uint64_t *)&v60);
            UnsafeMutableRawBufferPointer.copyMemory(from:)();
            swift_release_n();
            swift_bridgeObjectRelease();
            uint64_t v29 = "Stop notifying: %s.";
            goto LABEL_26;
          }
        }

        swift_release_n();
      }
      else
      {
        if (qword_101637688 != -1) {
          swift_once();
        }
        sub_100010324(v8, (uint64_t)qword_10170F8A8);
        id v40 = v9;
        unint64_t v41 = Logger.logObject.getter();
        os_log_type_t v42 = static os_log_type_t.error.getter();
        if (os_log_type_enabled(v41, v42))
        {
          uint64_t v43 = (uint8_t *)swift_slowAlloc();
          uint64_t v55 = swift_slowAlloc();
          uint64_t v60 = (void *)v55;
          *(_DWORD *)uint64_t v43 = 136315138;
          v53[1] = v43 + 4;
          uint64_t v54 = v43;
          id v44 = [v40 UUID];
          unint64_t v45 = (unint64_t)v56;
          sub_100BBC528((unint64_t)v56);

          sub_100A42624((unint64_t *)&qword_101638B10, (void (*)(uint64_t))&type metadata accessor for UUID);
          uint64_t v46 = v58;
          uint64_t v47 = dispatch thunk of CustomStringConvertible.description.getter();
          unint64_t v49 = v48;
          (*(void (**)(unint64_t, uint8_t *))(v57 + 8))(v45, v46);
          uint64_t v59 = sub_1008FA0F0(v47, v49, (uint64_t *)&v60);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();

          swift_bridgeObjectRelease();
          _os_log_impl((void *)&_mh_execute_header, v41, v42, "Could not find Characteristic for: %s", v54, 0xCu);
          swift_arrayDestroy();
          swift_slowDealloc();
          swift_slowDealloc();

          swift_release_n();
          return;
        }
      }
      swift_release_n();
    }
    else
    {
      if (qword_101637688 != -1) {
        swift_once();
      }
      sub_100010324(v8, (uint64_t)qword_10170F8A8);
      id v30 = v18;
      unint64_t v31 = Logger.logObject.getter();
      os_log_type_t v32 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v31, v32))
      {
        uint64_t v33 = (uint8_t *)swift_slowAlloc();
        uint64_t v60 = (void *)swift_slowAlloc();
        *(_DWORD *)uint64_t v33 = 136315138;
        uint64_t v55 = (uint64_t)(v33 + 4);
        id v34 = [v30 UUID];
        unint64_t v35 = (unint64_t)v56;
        sub_100BBC528((unint64_t)v56);

        sub_100A42624((unint64_t *)&qword_101638B10, (void (*)(uint64_t))&type metadata accessor for UUID);
        os_log_type_t v36 = v58;
        uint64_t v37 = dispatch thunk of CustomStringConvertible.description.getter();
        unint64_t v39 = v38;
        (*(void (**)(unint64_t, uint8_t *))(v57 + 8))(v35, v36);
        uint64_t v59 = sub_1008FA0F0(v37, v39, (uint64_t *)&v60);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();

        swift_bridgeObjectRelease();
        _os_log_impl((void *)&_mh_execute_header, v31, v32, "Could not find Service for: %s", v33, 0xCu);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
      }
      else
      {
      }
    }
  }
}

void sub_100A42164(void *a1)
{
  if (qword_101637690 != -1) {
    swift_once();
  }
  uint64_t v2 = type metadata accessor for Logger();
  sub_100010324(v2, (uint64_t)qword_10170F8C0);
  id v8 = a1;
  uint64_t v3 = Logger.logObject.getter();
  os_log_type_t v4 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v3, v4))
  {
    uint64_t v5 = (uint8_t *)swift_slowAlloc();
    uint64_t v6 = (void *)swift_slowAlloc();
    *(_DWORD *)uint64_t v5 = 138412290;
    id v7 = v8;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *uint64_t v6 = v8;

    _os_log_impl((void *)&_mh_execute_header, v3, v4, "peripheralIsReady: %@", v5, 0xCu);
    sub_10000588C((uint64_t *)&unk_101638EA0);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
  }
}

uint64_t sub_100A42330@<X0>(uint64_t *a1@<X8>)
{
  return sub_100A3F190(*(void *)(v1 + 16), *(void **)(v1 + 24), (uint64_t (*)(uint64_t *))sub_100A42410, a1);
}

uint64_t sub_100A42360@<X0>(uint64_t *a1@<X8>)
{
  return sub_100A3F2BC(*(void *)(v1 + 16), *(void **)(v1 + 24), (uint64_t (*)(uint64_t *))sub_100A42390, a1);
}

uint64_t sub_100A42390(uint64_t a1)
{
  return sub_10113670C(a1) & 1;
}

uint64_t sub_100A423B0(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t sub_100A42410(uint64_t a1)
{
  return sub_100A3D80C(a1) & 1;
}

uint64_t sub_100A42430@<X0>(uint64_t *a1@<X8>)
{
  return sub_100A3F190(*(void *)(v1 + 16), *(void **)(v1 + 24), (uint64_t (*)(uint64_t *))sub_100A426D0, a1);
}

uint64_t sub_100A42460@<X0>(uint64_t *a1@<X8>)
{
  return sub_100A3F2BC(*(void *)(v1 + 16), *(void **)(v1 + 24), (uint64_t (*)(uint64_t *))sub_100A426B4, a1);
}

uint64_t sub_100A42490@<X0>(uint64_t (**a1)(uint64_t a1)@<X8>)
{
  return sub_100A3F3DC(v1, a1);
}

uint64_t sub_100A424AC()
{
  swift_release();

  return _swift_deallocObject(v0, 32, 7);
}

void sub_100A424E4()
{
  sub_100A3EE28(*(void *)(v0 + 16), *(void *)(v0 + 24), *(void **)(v0 + 32));
}

uint64_t sub_100A42504@<X0>(uint64_t *a1@<X8>)
{
  return sub_100A3E698(*(void *)(v1 + 16), *(void *)(v1 + 24), a1);
}

void sub_100A42520()
{
  sub_100A3E73C(*(void *)(v0 + 16), *(void *)(v0 + 24), *(void **)(v0 + 32), *(void **)(v0 + 40));
}

void sub_100A42540()
{
  sub_100A3E038(*(char **)(v0 + 16), *(void **)(v0 + 24), *(void *)(v0 + 32), *(void *)(v0 + 40));
}

uint64_t sub_100A42560()
{
  swift_bridgeObjectRelease();

  return _swift_deallocObject(v0, 32, 7);
}

void sub_100A425A0(uint64_t a1, uint64_t a2)
{
  sub_100A3D13C(a1, a2, *(void *)(v2 + 16), *(Class *)(v2 + 24));
}

unint64_t sub_100A425A8()
{
  unint64_t result = qword_101671CE0;
  if (!qword_101671CE0)
  {
    sub_10000592C((uint64_t *)&unk_101649E90);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_101671CE0);
  }
  return result;
}

uint64_t sub_100A42604()
{
  return sub_100A3D204(*(char **)(v0 + 16), *(void (**)(void *))(v0 + 24), *(void *)(v0 + 32));
}

uint64_t sub_100A42624(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_100A4266C()
{
  return sub_100A3B88C();
}

void sub_100A4268C(void *a1@<X8>)
{
  sub_100A3BF90(*(void *)(v1 + 16), *(void **)(v1 + 24), *(void *)(v1 + 32), *(void **)(v1 + 40), *(void *)(v1 + 48), *(void *)(v1 + 56), *(void **)(v1 + 64), a1);
}

uint64_t sub_100A426B4(uint64_t a1)
{
  return sub_100A42390(a1) & 1;
}

uint64_t sub_100A426D0(uint64_t a1)
{
  return sub_100A42410(a1) & 1;
}

uint64_t sub_100A426EC@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X2>, int a4@<W3>, int a5@<W4>, uint64_t *a6@<X8>, double a7@<D0>, double a8@<D1>, double a9@<D2>)
{
  int v34 = a5;
  int v35 = a4;
  uint64_t v16 = type metadata accessor for Date();
  uint64_t v17 = *(void *)(v16 - 8);
  __chkstk_darwin(v16);
  uint64_t v19 = (char *)&v33 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  Date.timeIntervalSinceReferenceDate.getter();
  if (v20 < 0.0 || v20 > 4294967300.0)
  {
    static os_log_type_t.error.getter();
    sub_1003444E0();
    uint64_t v22 = (void *)static OS_os_log.default.getter();
    os_log(_:dso:log:_:_:)();
    char v23 = 1;
LABEL_19:

    sub_100A45610();
    swift_allocError();
    char *v27 = v23;
    swift_willThrow();
    sub_10001CFB8(a1, a2);
    return (*(uint64_t (**)(uint64_t, uint64_t))(v17 + 8))(a3, v16);
  }
  if (a7 < -90.0 || a7 > 90.0 || a8 < -180.0 || a8 > 180.0)
  {
    static os_log_type_t.error.getter();
    sub_1003444E0();
    uint64_t v22 = (void *)static OS_os_log.default.getter();
    char v23 = 2;
    os_log(_:dso:log:_:_:)();
    goto LABEL_19;
  }
  *a6 = a1;
  a6[1] = a2;
  sub_1000361E0(a1, a2);
  uint64_t result = Date.timeIntervalSinceReferenceDate.getter();
  if ((~*(void *)&v29 & 0x7FF0000000000000) == 0)
  {
    __break(1u);
    goto LABEL_31;
  }
  if (v29 <= -1.0)
  {
LABEL_31:
    __break(1u);
    goto LABEL_32;
  }
  if (v29 >= 4294967300.0)
  {
LABEL_32:
    __break(1u);
    goto LABEL_33;
  }
  Date.init(timeIntervalSinceReferenceDate:)();
  sub_10001CFB8(a1, a2);
  (*(void (**)(uint64_t, uint64_t))(v17 + 8))(a3, v16);
  id v30 = (int *)type metadata accessor for BeaconPayloadv1();
  uint64_t result = (*(uint64_t (**)(char *, char *, uint64_t))(v17 + 32))((char *)a6 + v30[5], v19, v16);
  *((unsigned char *)a6 + v30[6]) = v35;
  double v31 = a7 * 10000000.0;
  if ((~COERCE__INT64(a7 * 10000000.0) & 0x7FF0000000000000) == 0)
  {
LABEL_33:
    __break(1u);
    goto LABEL_34;
  }
  if (v31 <= -2147483650.0)
  {
LABEL_34:
    __break(1u);
    goto LABEL_35;
  }
  if (v31 >= 2147483650.0)
  {
LABEL_35:
    __break(1u);
    goto LABEL_36;
  }
  *(double *)((char *)a6 + v30[7]) = (double)(int)v31 / 10000000.0;
  double v32 = a8 * 10000000.0;
  if ((~COERCE__INT64(a8 * 10000000.0) & 0x7FF0000000000000) == 0)
  {
LABEL_36:
    __break(1u);
    goto LABEL_37;
  }
  if (v32 <= -2147483650.0)
  {
LABEL_37:
    __break(1u);
    goto LABEL_38;
  }
  if (v32 < 2147483650.0)
  {
    *(double *)((char *)a6 + v30[8]) = (double)(int)v32 / 10000000.0;
    *(double *)((char *)a6 + v30[9]) = a9;
    *((unsigned char *)a6 + v30[10]) = v34;
    return result;
  }
LABEL_38:
  __break(1u);
  return result;
}

uint64_t BeaconPayloadv1.init(using:data:advertisement:)@<X0>(void *a1@<X0>, uint64_t a2@<X1>, unint64_t a3@<X2>, uint64_t a4@<X3>, unint64_t a5@<X4>, uint64_t a6@<X8>)
{
  uint64_t v13 = type metadata accessor for BeaconPayloadv1();
  uint64_t v14 = __chkstk_darwin(v13 - 8);
  uint64_t v16 = (void *)((char *)v24 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0));
  __chkstk_darwin(v14);
  uint64_t v18 = (void *)((char *)v24 - v17);
  switch(a3 >> 62)
  {
    case 1uLL:
      LODWORD(v19) = HIDWORD(a2) - a2;
      if (__OFSUB__(HIDWORD(a2), a2))
      {
        __break(1u);
LABEL_13:
        __break(1u);
        JUMPOUT(0x100A42C60);
      }
      uint64_t v19 = (int)v19;
LABEL_6:
      if (v19 < 120)
      {
LABEL_7:
        uint64_t result = sub_100A4431C(a1, a2, a3, a4, a5, v16);
        if (v6) {
          return result;
        }
        return sub_100A442B8((uint64_t)v16, a6);
      }
      uint64_t result = sub_100A43C50(a1, a2, a3, a4, a5, (void *)((char *)v24 - v17));
      uint64_t v16 = v18;
      if (!v6) {
        return sub_100A442B8((uint64_t)v16, a6);
      }
      return result;
    case 2uLL:
      uint64_t v21 = *(void *)(a2 + 16);
      uint64_t v20 = *(void *)(a2 + 24);
      BOOL v22 = __OFSUB__(v20, v21);
      uint64_t v19 = v20 - v21;
      if (!v22) {
        goto LABEL_6;
      }
      goto LABEL_13;
    case 3uLL:
      goto LABEL_7;
    default:
      uint64_t v19 = BYTE6(a3);
      goto LABEL_6;
  }
}

uint64_t type metadata accessor for BeaconPayloadv1()
{
  uint64_t result = qword_101655BE0;
  if (!qword_101655BE0) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t sub_100A42CBC(uint64_t a1, unint64_t a2)
{
  v10[3] = &type metadata for Data;
  v10[4] = &protocol witness table for Data;
  v10[0] = a1;
  v10[1] = a2;
  os_log_type_t v4 = sub_10001CD44(v10, (uint64_t)&type metadata for Data);
  uint64_t v5 = *v4;
  unint64_t v6 = v4[1];
  switch(v6 >> 62)
  {
    case 1uLL:
      if (v5 >> 32 < (int)v5) {
        __break(1u);
      }
      sub_1000361E0(a1, a2);
      sub_1000361E0(v5, v6);
      sub_10089C674((int)v5, v5 >> 32);
      sub_10001CFB8(v5, v6);
      break;
    case 2uLL:
      uint64_t v7 = *(void *)(v5 + 16);
      uint64_t v8 = *(void *)(v5 + 24);
      sub_1000361E0(a1, a2);
      swift_retain();
      swift_retain();
      sub_10089C674(v7, v8);
      swift_release();
      swift_release();
      break;
    default:
      sub_1000361E0(a1, a2);
      Data._Representation.append(contentsOf:)();
      break;
  }
  return _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)v10);
}

uint64_t BeaconPayloadv1.encode()()
{
  uint64_t v2 = type metadata accessor for HashAlgorithm();
  uint64_t v46 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  os_log_type_t v4 = (char *)&v41 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v48 = sub_100A43718();
  unint64_t v6 = v5;
  uint64_t v8 = *v0;
  unint64_t v7 = v0[1];
  sub_1000361E0(v8, v7);
  uint64_t v9 = sub_100A948F8(v8, v7);
  if (!v1)
  {
    uint64_t v10 = v9;
    id v44 = v0;
    unint64_t v45 = v4;
    sub_10001CFB8(v8, v7);
    uint64_t v11 = sub_100A90C58(v10, 0);
    unint64_t v13 = v12;
    CCECCryptorRelease();
    uint64_t v22 = sub_10043A38C(v11, v13);
    unint64_t v24 = v23;
    sub_1000361E0(v22, v23);
    uint64_t v25 = v48;
    sub_100A932C4((uint64_t *)&v50);
    sub_10001CFB8(v22, v24);
    sub_10001CFB8(v22, v24);
    os_log_type_t v42 = v51;
    uint64_t v43 = v50;
    sub_10001CFB8(v25, v6);
    long long v54 = xmmword_101348180;
    unint64_t v27 = v45;
    uint64_t v26 = v46;
    unint64_t v28 = *(void **)(v46 + 104);
    LODWORD(v48) = enum case for HashAlgorithm.sha256(_:);
    uint64_t v47 = v28;
    ((void (*)(char *))v28)(v45);
    double v29 = v27;
    uint64_t v30 = Data.hash(algorithm:)();
    unint64_t v32 = v31;
    int v34 = *(void (**)(char *, uint64_t))(v26 + 8);
    uint64_t v33 = v26 + 8;
    unint64_t v41 = v34;
    v34(v29, v2);
    sub_100A42CBC(v30, v32);
    sub_10001CFB8(v30, v32);
    uint64_t v35 = type metadata accessor for BeaconPayloadv1();
    os_log_type_t v36 = v44;
    Date.timeIntervalSinceReferenceDate.getter();
    if ((~*(void *)&v37 & 0x7FF0000000000000) != 0)
    {
      if (v37 > -1.0)
      {
        uint64_t v46 = v33;
        if (v37 < 4294967300.0)
        {
          unsigned int v49 = bswap32(v37);
          unint64_t v52 = &type metadata for UnsafeRawBufferPointer;
          unint64_t v53 = &protocol witness table for UnsafeRawBufferPointer;
          uint64_t v50 = &v49;
          unint64_t v51 = (uint64_t *)&v50;
          sub_10001CD44(&v50, (uint64_t)&type metadata for UnsafeRawBufferPointer);
          Data._Representation.append(contentsOf:)();
          _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)&v50);
          LOBYTE(v49) = *((unsigned char *)v36 + *(int *)(v35 + 24));
          unint64_t v52 = &type metadata for UnsafeRawBufferPointer;
          unint64_t v53 = &protocol witness table for UnsafeRawBufferPointer;
          uint64_t v50 = &v49;
          unint64_t v51 = (uint64_t *)((char *)&v49 + 1);
          sub_10001CD44(&v50, (uint64_t)&type metadata for UnsafeRawBufferPointer);
          Data._Representation.append(contentsOf:)();
          _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)&v50);
          unint64_t v39 = (unint64_t)v42;
          uint64_t v38 = (uint64_t)v43;
          sub_100A42CBC((uint64_t)v43, (unint64_t)v42);
          id v40 = v45;
          ((void (*)(char *, void, uint64_t))v47)(v45, v48, v2);
          uint64_t v14 = Data.hash(algorithm:)();
          v41(v40, v2);
          sub_10001CFB8(v38, v39);
          return v14;
        }
LABEL_14:
        __break(1u);
      }
    }
    else
    {
      __break(1u);
    }
    __break(1u);
    goto LABEL_14;
  }
  sub_10001CFB8(v8, v7);
  uint64_t v14 = static os_log_type_t.error.getter();
  if (qword_101636F48 != -1) {
    swift_once();
  }
  sub_10000588C((uint64_t *)&unk_10163AD00);
  uint64_t v15 = swift_allocObject();
  *(_OWORD *)(v15 + 16) = xmmword_101342130;
  uint64_t v50 = (unsigned int *)v1;
  swift_errorRetain();
  sub_10000588C(&qword_101638D40);
  uint64_t v16 = String.init<A>(describing:)();
  uint64_t v18 = v17;
  *(void *)(v15 + 56) = &type metadata for String;
  *(void *)(v15 + 64) = sub_10000B4CC();
  *(void *)(v15 + 32) = v16;
  *(void *)(v15 + 40) = v18;
  os_log(_:dso:log:_:_:)();
  swift_bridgeObjectRelease();
  sub_100130148();
  swift_allocError();
  *uint64_t v19 = 1;
  swift_willThrow();
  swift_errorRelease();
  uint64_t v20 = v48;
  sub_10001CFB8(v20, v6);
  return v14;
}

unint64_t sub_100A43444(char a1)
{
  unint64_t result = 0x7369747265766461;
  switch(a1)
  {
    case 1:
      unint64_t result = 0x6D617473656D6974;
      break;
    case 2:
      unint64_t result = 0x617461446174656DLL;
      break;
    case 3:
      unint64_t result = 0xD000000000000010;
      break;
    case 4:
      unint64_t result = 0x656475746974616CLL;
      break;
    case 5:
      unint64_t result = 0x64757469676E6F6CLL;
      break;
    case 6:
      unint64_t result = 0xD000000000000012;
      break;
    case 7:
      unint64_t result = 0x737574617473;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t sub_100A43568(unsigned __int8 *a1, char *a2)
{
  return sub_10071E9FC(*a1, *a2);
}

Swift::Int sub_100A43574()
{
  return sub_100721C64();
}

uint64_t sub_100A43580()
{
  return sub_100720638();
}

Swift::Int sub_100A43588()
{
  return sub_100721C64();
}

unint64_t sub_100A43590@<X0>(Swift::String *a1@<X0>, unsigned char *a2@<X8>)
{
  unint64_t result = sub_100A459DC(*a1);
  *a2 = result;
  return result;
}

unint64_t sub_100A435C0@<X0>(unint64_t *a1@<X8>)
{
  unint64_t result = sub_100A43444(*v1);
  *a1 = result;
  a1[1] = v4;
  return result;
}

uint64_t BeaconPayloadv1.timestamp.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = v1 + *(int *)(type metadata accessor for BeaconPayloadv1() + 20);
  uint64_t v4 = type metadata accessor for Date();
  unint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16);

  return v5(a1, v3, v4);
}

uint64_t BeaconPayloadv1.metaData.getter()
{
  return *(unsigned __int8 *)(v0 + *(int *)(type metadata accessor for BeaconPayloadv1() + 24));
}

double BeaconPayloadv1.latitude.getter()
{
  return *(double *)(v0 + *(int *)(type metadata accessor for BeaconPayloadv1() + 28));
}

double BeaconPayloadv1.longitude.getter()
{
  return *(double *)(v0 + *(int *)(type metadata accessor for BeaconPayloadv1() + 32));
}

double BeaconPayloadv1.horizontalAccuracy.getter()
{
  return *(double *)(v0 + *(int *)(type metadata accessor for BeaconPayloadv1() + 36));
}

uint64_t BeaconPayloadv1.status.getter()
{
  return *(unsigned __int8 *)(v0 + *(int *)(type metadata accessor for BeaconPayloadv1() + 40));
}

uint64_t sub_100A43718()
{
  long long v11 = xmmword_101348180;
  uint64_t v1 = type metadata accessor for BeaconPayloadv1();
  double v2 = *(double *)(v0 + *(int *)(v1 + 28)) * 10000000.0;
  if ((~*(void *)&v2 & 0x7FF0000000000000) == 0)
  {
    __break(1u);
    goto LABEL_9;
  }
  if (v2 <= -2147483650.0)
  {
LABEL_9:
    __break(1u);
    goto LABEL_10;
  }
  if (v2 >= 2147483650.0)
  {
LABEL_10:
    __break(1u);
    goto LABEL_11;
  }
  uint64_t v3 = (int *)v1;
  LODWORD(vsub_100A2F554("Can't update non-existant safe location with identifier: %s.", 7) = bswap32((int)v2);
  uint64_t v9 = &type metadata for UnsafeRawBufferPointer;
  uint64_t v10 = &protocol witness table for UnsafeRawBufferPointer;
  *(void *)&long long v8 = &v7;
  *((void *)&v8 + 1) = (char *)&v7 + 4;
  sub_10001CD44(&v8, (uint64_t)&type metadata for UnsafeRawBufferPointer);
  Data._Representation.append(contentsOf:)();
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)&v8);
  double v4 = *(double *)(v0 + v3[8]) * 10000000.0;
  if ((~*(void *)&v4 & 0x7FF0000000000000) == 0)
  {
LABEL_11:
    __break(1u);
    goto LABEL_12;
  }
  if (v4 <= -2147483650.0)
  {
LABEL_12:
    __break(1u);
LABEL_13:
    __break(1u);
  }
  if (v4 >= 2147483650.0) {
    goto LABEL_13;
  }
  LODWORD(vsub_100A2F554("Can't update non-existant safe location with identifier: %s.", 7) = bswap32((int)v4);
  uint64_t v9 = &type metadata for UnsafeRawBufferPointer;
  uint64_t v10 = &protocol witness table for UnsafeRawBufferPointer;
  *(void *)&long long v8 = &v7;
  *((void *)&v8 + 1) = (char *)&v7 + 4;
  sub_10001CD44(&v8, (uint64_t)&type metadata for UnsafeRawBufferPointer);
  Data._Representation.append(contentsOf:)();
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)&v8);
  uint64_t v7 = *(void *)(v0 + v3[9]);
  long long v8 = xmmword_101374DD0;
  sub_10006145C();
  scale<A, B>(_:_:)();
  uint64_t v9 = &type metadata for UnsafeRawBufferPointer;
  uint64_t v10 = &protocol witness table for UnsafeRawBufferPointer;
  *(void *)&long long v8 = &v6;
  *((void *)&v8 + 1) = &v7;
  sub_10001CD44(&v8, (uint64_t)&type metadata for UnsafeRawBufferPointer);
  Data._Representation.append(contentsOf:)();
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)&v8);
  LOBYTE(vsub_100A2F554("Can't update non-existant safe location with identifier: %s.", 7) = *(unsigned char *)(v0 + v3[10]);
  uint64_t v9 = &type metadata for UnsafeRawBufferPointer;
  uint64_t v10 = &protocol witness table for UnsafeRawBufferPointer;
  *(void *)&long long v8 = &v7;
  *((void *)&v8 + 1) = (char *)&v7 + 1;
  sub_10001CD44(&v8, (uint64_t)&type metadata for UnsafeRawBufferPointer);
  Data._Representation.append(contentsOf:)();
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)&v8);
  return v11;
}

uint64_t sub_100A4399C()
{
  long long v11 = xmmword_101348180;
  uint64_t v1 = type metadata accessor for BeaconPayloadV2();
  double v2 = *(double *)(v0 + *(int *)(v1 + 24)) * 10000000.0;
  if ((~*(void *)&v2 & 0x7FF0000000000000) == 0)
  {
    __break(1u);
    goto LABEL_9;
  }
  if (v2 <= -2147483650.0)
  {
LABEL_9:
    __break(1u);
    goto LABEL_10;
  }
  if (v2 >= 2147483650.0)
  {
LABEL_10:
    __break(1u);
    goto LABEL_11;
  }
  uint64_t v3 = (int *)v1;
  LODWORD(vsub_100A2F554("Can't update non-existant safe location with identifier: %s.", 7) = bswap32((int)v2);
  uint64_t v9 = &type metadata for UnsafeRawBufferPointer;
  uint64_t v10 = &protocol witness table for UnsafeRawBufferPointer;
  *(void *)&long long v8 = &v7;
  *((void *)&v8 + 1) = (char *)&v7 + 4;
  sub_10001CD44(&v8, (uint64_t)&type metadata for UnsafeRawBufferPointer);
  Data._Representation.append(contentsOf:)();
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)&v8);
  double v4 = *(double *)(v0 + v3[7]) * 10000000.0;
  if ((~*(void *)&v4 & 0x7FF0000000000000) == 0)
  {
LABEL_11:
    __break(1u);
    goto LABEL_12;
  }
  if (v4 <= -2147483650.0)
  {
LABEL_12:
    __break(1u);
LABEL_13:
    __break(1u);
  }
  if (v4 >= 2147483650.0) {
    goto LABEL_13;
  }
  LODWORD(vsub_100A2F554("Can't update non-existant safe location with identifier: %s.", 7) = bswap32((int)v4);
  uint64_t v9 = &type metadata for UnsafeRawBufferPointer;
  uint64_t v10 = &protocol witness table for UnsafeRawBufferPointer;
  *(void *)&long long v8 = &v7;
  *((void *)&v8 + 1) = (char *)&v7 + 4;
  sub_10001CD44(&v8, (uint64_t)&type metadata for UnsafeRawBufferPointer);
  Data._Representation.append(contentsOf:)();
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)&v8);
  uint64_t v7 = *(void *)(v0 + v3[8]);
  long long v8 = xmmword_101374DD0;
  sub_10006145C();
  scale<A, B>(_:_:)();
  uint64_t v9 = &type metadata for UnsafeRawBufferPointer;
  uint64_t v10 = &protocol witness table for UnsafeRawBufferPointer;
  *(void *)&long long v8 = &v6;
  *((void *)&v8 + 1) = &v7;
  sub_10001CD44(&v8, (uint64_t)&type metadata for UnsafeRawBufferPointer);
  Data._Representation.append(contentsOf:)();
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)&v8);
  LOBYTE(vsub_100A2F554("Can't update non-existant safe location with identifier: %s.", 7) = *(unsigned char *)(v0 + v3[9]);
  uint64_t v9 = &type metadata for UnsafeRawBufferPointer;
  uint64_t v10 = &protocol witness table for UnsafeRawBufferPointer;
  *(void *)&long long v8 = &v7;
  *((void *)&v8 + 1) = (char *)&v7 + 1;
  sub_10001CD44(&v8, (uint64_t)&type metadata for UnsafeRawBufferPointer);
  Data._Representation.append(contentsOf:)();
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)&v8);
  return v11;
}

uint64_t sub_100A43C24()
{
  uint64_t result = BeaconPayloadv1.encode()();
  if (v0) {
    return v2;
  }
  return result;
}

uint64_t sub_100A43C50@<X0>(void *a1@<X0>, uint64_t a2@<X1>, unint64_t a3@<X2>, uint64_t a4@<X3>, unint64_t a5@<X4>, uint64_t *a6@<X8>)
{
  uint64_t v46 = a6;
  uint64_t v12 = type metadata accessor for Date();
  uint64_t v13 = *(void *)(v12 - 8);
  __chkstk_darwin(v12);
  uint64_t v15 = (char *)&v37 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1000361E0(a2, a3);
  Data.subObject<A>(range:)();
  if (v6)
  {
    sub_10001CFB8(a4, a5);
    sub_10001CFB8(a2, a3);

    return sub_10001CFB8(a2, a3);
  }
  else
  {
    unint64_t v44 = a5;
    uint64_t v45 = v12;
    Date.init(timeIntervalSinceReferenceDate:)();
    Data.subObject<A>(range:)();
    os_log_type_t v42 = (__SecKey *)a1;
    uint64_t v43 = a2;
    id v40 = v15;
    uint64_t v41 = v13;
    int v17 = v49;
    switch(a3 >> 62)
    {
      case 1uLL:
        uint64_t v19 = v43;
        uint64_t v18 = v43 >> 32;
        goto LABEL_7;
      case 2uLL:
        uint64_t v19 = v43;
        uint64_t v18 = *(void *)(v43 + 24);
LABEL_7:
        sub_1000361E0(v19, a3);
        goto LABEL_8;
      case 3uLL:
        goto LABEL_10;
      default:
        uint64_t v18 = BYTE6(a3);
LABEL_8:
        if (v18 < 37)
        {
LABEL_10:
          __break(1u);
          JUMPOUT(0x100A442A8);
        }
        uint64_t v39 = a4;
        int v38 = v17;
        uint64_t v20 = v43;
        uint64_t v21 = Data._Representation.subscript.getter();
        unint64_t v23 = v22;
        sub_10001CFB8(v20, a3);
        sub_100A93EA8(v42, (uint64_t *)&v49);
        unint64_t v37 = v23;
        long long v26 = v49;
        Data.subObject<A>(range:)();
        unsigned int v27 = v49;
        Data.subObject<A>(range:)();
        LODWORD(v25) = v49;
        Data.subObject<A>(range:)();
        char v47 = v49;
        long long v49 = xmmword_101374DD0;
        sub_10006145C();
        unscale<A, B>(_:_:)();
        uint64_t v28 = v48;
        Data.subObject<A>(range:)();
        LODWORD(v24) = bswap32(v27);
        int v29 = bswap32(v25);
        unint64_t v30 = v37;
        uint64_t v31 = v43;
        sub_10001CFB8(v43, a3);
        sub_10001CFB8(v26, *((unint64_t *)&v26 + 1));
        sub_10001CFB8(v21, v30);
        sub_10001CFB8(v31, a3);

        LOBYTE(v31) = v49;
        double v32 = (double)v29;
        uint64_t v33 = (char *)v46;
        unint64_t v34 = v44;
        *uint64_t v46 = v39;
        *((void *)v33 + 1) = v34;
        double v35 = v32 / 10000000.0;
        os_log_type_t v36 = (int *)type metadata accessor for BeaconPayloadv1();
        uint64_t result = (*(uint64_t (**)(char *, char *, uint64_t))(v41 + 32))(&v33[v36[5]], v40, v45);
        v33[v36[6]] = v38;
        *(double *)&v33[v36[7]] = (double)(int)v24 / 10000000.0;
        *(double *)&v33[v36[8]] = v35;
        *(void *)&v33[v36[9]] = v28;
        v33[v36[10]] = v31;
        break;
    }
  }
  return result;
}

uint64_t sub_100A442B8(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for BeaconPayloadv1();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_100A4431C@<X0>(void *a1@<X0>, uint64_t a2@<X1>, unint64_t a3@<X2>, uint64_t a4@<X3>, unint64_t a5@<X4>, uint64_t *a6@<X8>)
{
  uint64_t v45 = a6;
  uint64_t v12 = type metadata accessor for Date();
  uint64_t v13 = *(void *)(v12 - 8);
  __chkstk_darwin(v12);
  uint64_t v15 = (char *)&v34 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1000361E0(a2, a3);
  Data.subObject<A>(range:)();
  if (v6)
  {
    sub_10001CFB8(a4, a5);
    sub_10001CFB8(a2, a3);

    return sub_10001CFB8(a2, a3);
  }
  else
  {
    unint64_t v43 = a5;
    uint64_t v44 = v12;
    Date.init(timeIntervalSinceReferenceDate:)();
    Data.subObject<A>(range:)();
    uint64_t v41 = (__SecKey *)a1;
    uint64_t v42 = a2;
    uint64_t v39 = v15;
    uint64_t v40 = v13;
    int v17 = v48;
    switch(a3 >> 62)
    {
      case 1uLL:
        uint64_t v19 = v42;
        uint64_t v18 = v42 >> 32;
        goto LABEL_7;
      case 2uLL:
        uint64_t v19 = v42;
        uint64_t v18 = *(void *)(v42 + 24);
LABEL_7:
        sub_1000361E0(v19, a3);
        goto LABEL_8;
      case 3uLL:
        goto LABEL_10;
      default:
        uint64_t v18 = BYTE6(a3);
LABEL_8:
        if (v18 < 5)
        {
LABEL_10:
          __break(1u);
          JUMPOUT(0x100A44984);
        }
        uint64_t v38 = a4;
        int v37 = v17;
        uint64_t v20 = v42;
        uint64_t v21 = Data._Representation.subscript.getter();
        unint64_t v23 = v22;
        sub_10001CFB8(v20, a3);
        sub_100A93EA8(v41, (uint64_t *)&v48);
        unint64_t v36 = v23;
        long long v26 = v48;
        Data.subObject<A>(range:)();
        LODWORD(v23) = v48;
        Data.subObject<A>(range:)();
        LODWORD(v24) = v48;
        Data.subObject<A>(range:)();
        char v46 = v48;
        long long v48 = xmmword_101374DD0;
        sub_10006145C();
        unscale<A, B>(_:_:)();
        uint64_t v27 = v47;
        Data.subObject<A>(range:)();
        int v35 = bswap32(v23);
        unint64_t v28 = v36;
        uint64_t v29 = v42;
        sub_10001CFB8(v42, a3);
        sub_10001CFB8(v26, *((unint64_t *)&v26 + 1));
        sub_10001CFB8(v21, v28);
        sub_10001CFB8(v29, a3);

        LOBYTE(v29) = v48;
        double v30 = (double)v35 / 10000000.0;
        uint64_t v31 = (char *)v45;
        unint64_t v32 = v43;
        *uint64_t v45 = v38;
        *((void *)v31 + 1) = v32;
        uint64_t v33 = (int *)type metadata accessor for BeaconPayloadv1();
        uint64_t result = (*(uint64_t (**)(char *, char *, uint64_t))(v40 + 32))(&v31[v33[5]], v39, v44);
        v31[v33[6]] = v37;
        *(double *)&v31[v33[7]] = v30;
        *(double *)&v31[v33[8]] = (double)(int)bswap32(v24) / 10000000.0;
        *(void *)&v31[v33[9]] = v27;
        v31[v33[10]] = v29;
        break;
    }
  }
  return result;
}

uint64_t sub_100A44994@<X0>(void *a1@<X0>, uint64_t a2@<X1>, unint64_t a3@<X2>, uint64_t a4@<X3>, unint64_t a5@<X4>, uint64_t a6@<X8>)
{
  return BeaconPayloadv1.init(using:data:advertisement:)(a1, a2, a3, a4, a5, a6);
}

BOOL _s12searchpartyd15BeaconPayloadv1V2eeoiySbAC_ACtFZ_0(uint64_t *a1, uint64_t *a2)
{
  uint64_t v65 = type metadata accessor for BeaconPayloadv1();
  uint64_t v4 = __chkstk_darwin(v65);
  uint64_t v74 = (uint64_t)&v65 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = __chkstk_darwin(v4);
  uint64_t v72 = (char *)&v65 - v7;
  uint64_t v8 = __chkstk_darwin(v6);
  unint64_t v71 = (char *)&v65 - v9;
  uint64_t v10 = __chkstk_darwin(v8);
  uint64_t v67 = (char *)&v65 - v11;
  uint64_t v12 = __chkstk_darwin(v10);
  uint64_t v66 = (uint64_t)&v65 - v13;
  uint64_t v14 = __chkstk_darwin(v12);
  unint64_t v70 = (char *)&v65 - v15;
  uint64_t v16 = __chkstk_darwin(v14);
  uint64_t v69 = (uint64_t)&v65 - v17;
  uint64_t v18 = __chkstk_darwin(v16);
  uint64_t v68 = (uint64_t)&v65 - v19;
  uint64_t v20 = __chkstk_darwin(v18);
  *(void *)&long long v73 = (char *)&v65 - v21;
  uint64_t v22 = __chkstk_darwin(v20);
  unint64_t v24 = (char *)&v65 - v23;
  uint64_t v25 = __chkstk_darwin(v22);
  uint64_t v27 = (char *)&v65 - v26;
  __chkstk_darwin(v25);
  uint64_t v29 = (char *)&v65 - v28;
  uint64_t v30 = *a1;
  unint64_t v31 = a1[1];
  uint64_t v33 = *a2;
  unint64_t v32 = a2[1];
  sub_1000361E0(*a1, v31);
  sub_1000361E0(v33, v32);
  char v34 = _s12searchpartyd24KeyRepresentableInternalV23__derived_struct_equalsySbAC_ACtFZ_0(v30, v31, v33, v32);
  sub_10001CFB8(v33, v32);
  uint64_t v35 = v30;
  uint64_t v36 = (uint64_t)a2;
  unint64_t v37 = v31;
  uint64_t v38 = (uint64_t)a1;
  sub_10001CFB8(v35, v37);
  sub_100A45664((uint64_t)a1, (uint64_t)v29);
  sub_100A45664((uint64_t)a2, (uint64_t)v27);
  if ((v34 & 1) == 0)
  {
    sub_100A456C8((uint64_t)v27);
    sub_100A456C8((uint64_t)v29);
    sub_100A45664((uint64_t)a1, (uint64_t)v24);
    uint64_t v64 = (uint64_t)a2;
    uint64_t v42 = v73;
    sub_100A45664(v64, v73);
    goto LABEL_9;
  }
  uint64_t v39 = v65;
  char v40 = static Date.== infix(_:_:)();
  sub_100A456C8((uint64_t)v27);
  sub_100A456C8((uint64_t)v29);
  sub_100A45664((uint64_t)a1, (uint64_t)v24);
  uint64_t v41 = (uint64_t)a2;
  uint64_t v42 = v73;
  sub_100A45664(v41, v73);
  if ((v40 & 1) == 0)
  {
LABEL_9:
    sub_100A456C8(v42);
    sub_100A456C8((uint64_t)v24);
    uint64_t v45 = v68;
    sub_100A45664((uint64_t)a1, v68);
    uint64_t v46 = v69;
    sub_100A45664(v36, v69);
    uint64_t v48 = (uint64_t)v71;
    uint64_t v47 = (uint64_t)v72;
    uint64_t v49 = (uint64_t)v70;
    goto LABEL_10;
  }
  int v43 = v24[*(int *)(v39 + 24)];
  sub_100A456C8((uint64_t)v24);
  int v44 = *(unsigned __int8 *)(v42 + *(int *)(v39 + 24));
  sub_100A456C8(v42);
  uint64_t v45 = v68;
  sub_100A45664((uint64_t)a1, v68);
  uint64_t v46 = v69;
  sub_100A45664(v36, v69);
  uint64_t v48 = (uint64_t)v71;
  uint64_t v47 = (uint64_t)v72;
  uint64_t v49 = (uint64_t)v70;
  if (v43 != v44)
  {
LABEL_10:
    sub_100A456C8(v46);
    sub_100A456C8(v45);
    sub_100A45664(v38, v49);
    uint64_t v53 = v66;
    sub_100A45664(v36, v66);
    uint64_t v54 = (uint64_t)v67;
    goto LABEL_11;
  }
  uint64_t v50 = (int *)v65;
  double v51 = *(double *)(v45 + *(int *)(v65 + 28));
  sub_100A456C8(v45);
  double v52 = *(double *)(v46 + v50[7]);
  sub_100A456C8(v46);
  sub_100A45664(v38, v49);
  uint64_t v53 = v66;
  sub_100A45664(v36, v66);
  uint64_t v54 = (uint64_t)v67;
  if (v51 != v52)
  {
LABEL_11:
    sub_100A456C8(v53);
    sub_100A456C8(v49);
    sub_100A45664(v38, v54);
    sub_100A45664(v36, v48);
    goto LABEL_12;
  }
  double v55 = *(double *)(v49 + v50[8]);
  sub_100A456C8(v49);
  double v56 = *(double *)(v53 + v50[8]);
  sub_100A456C8(v53);
  sub_100A45664(v38, v54);
  sub_100A45664(v36, v48);
  if (v55 != v56)
  {
LABEL_12:
    sub_100A456C8(v48);
    sub_100A456C8(v54);
    sub_100A45664(v38, v47);
    uint64_t v60 = v74;
    sub_100A45664(v36, v74);
    goto LABEL_13;
  }
  uint64_t v76 = *(void *)(v54 + v50[9]);
  long long v73 = xmmword_101374DD0;
  long long v75 = xmmword_101374DD0;
  sub_10006145C();
  uint64_t v57 = v54;
  scale<A, B>(_:_:)();
  int v58 = v77;
  uint64_t v76 = *(void *)(v48 + v50[9]);
  long long v75 = v73;
  scale<A, B>(_:_:)();
  int v59 = v77;
  sub_100A456C8(v48);
  sub_100A456C8(v57);
  sub_100A45664(v38, v47);
  uint64_t v60 = v74;
  sub_100A45664(v36, v74);
  if (v58 == v59)
  {
    uint64_t v61 = v65;
    int v62 = *(unsigned __int8 *)(v47 + *(int *)(v65 + 40));
    sub_100A456C8(v47);
    LODWORD(v61) = *(unsigned __int8 *)(v60 + *(int *)(v61 + 40));
    sub_100A456C8(v60);
    return v62 == v61;
  }
LABEL_13:
  sub_100A456C8(v60);
  sub_100A456C8(v47);
  return 0;
}

uint64_t *initializeBufferWithCopyOfBuffer for BeaconPayloadv1(uint64_t *a1, uint64_t *a2, int *a3)
{
  int v5 = *(_DWORD *)(*((void *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v15 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v15 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v7 = *a2;
    unint64_t v8 = a2[1];
    sub_1000361E0(*a2, v8);
    *a1 = v7;
    a1[1] = v8;
    uint64_t v9 = a3[5];
    uint64_t v10 = (char *)a1 + v9;
    uint64_t v11 = (char *)a2 + v9;
    uint64_t v12 = type metadata accessor for Date();
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v12 - 8) + 16))(v10, v11, v12);
    uint64_t v13 = a3[7];
    *((unsigned char *)a1 + a3[6]) = *((unsigned char *)a2 + a3[6]);
    *(uint64_t *)((char *)a1 + v13) = *(uint64_t *)((char *)a2 + v13);
    uint64_t v14 = a3[9];
    *(uint64_t *)((char *)a1 + a3[8]) = *(uint64_t *)((char *)a2 + a3[8]);
    *(uint64_t *)((char *)a1 + v14) = *(uint64_t *)((char *)a2 + v14);
    *((unsigned char *)a1 + a3[10]) = *((unsigned char *)a2 + a3[10]);
  }
  return a1;
}

uint64_t *initializeWithCopy for BeaconPayloadv1(uint64_t *a1, uint64_t *a2, int *a3)
{
  uint64_t v6 = *a2;
  unint64_t v7 = a2[1];
  sub_1000361E0(*a2, v7);
  *a1 = v6;
  a1[1] = v7;
  uint64_t v8 = a3[5];
  uint64_t v9 = (char *)a1 + v8;
  uint64_t v10 = (char *)a2 + v8;
  uint64_t v11 = type metadata accessor for Date();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v11 - 8) + 16))(v9, v10, v11);
  uint64_t v12 = a3[7];
  *((unsigned char *)a1 + a3[6]) = *((unsigned char *)a2 + a3[6]);
  *(uint64_t *)((char *)a1 + v12) = *(uint64_t *)((char *)a2 + v12);
  uint64_t v13 = a3[9];
  *(uint64_t *)((char *)a1 + a3[8]) = *(uint64_t *)((char *)a2 + a3[8]);
  *(uint64_t *)((char *)a1 + v13) = *(uint64_t *)((char *)a2 + v13);
  *((unsigned char *)a1 + a3[10]) = *((unsigned char *)a2 + a3[10]);
  return a1;
}

uint64_t *assignWithCopy for BeaconPayloadv1(uint64_t *a1, uint64_t *a2, int *a3)
{
  uint64_t v6 = *a2;
  unint64_t v7 = a2[1];
  sub_1000361E0(*a2, v7);
  uint64_t v8 = *a1;
  unint64_t v9 = a1[1];
  *a1 = v6;
  a1[1] = v7;
  sub_10001CFB8(v8, v9);
  uint64_t v10 = a3[5];
  uint64_t v11 = (char *)a1 + v10;
  uint64_t v12 = (char *)a2 + v10;
  uint64_t v13 = type metadata accessor for Date();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v13 - 8) + 24))(v11, v12, v13);
  *((unsigned char *)a1 + a3[6]) = *((unsigned char *)a2 + a3[6]);
  *(uint64_t *)((char *)a1 + a3[7]) = *(uint64_t *)((char *)a2 + a3[7]);
  *(uint64_t *)((char *)a1 + a3[8]) = *(uint64_t *)((char *)a2 + a3[8]);
  *(uint64_t *)((char *)a1 + a3[9]) = *(uint64_t *)((char *)a2 + a3[9]);
  *((unsigned char *)a1 + a3[10]) = *((unsigned char *)a2 + a3[10]);
  return a1;
}

_OWORD *initializeWithTake for BeaconPayloadv1(_OWORD *a1, _OWORD *a2, int *a3)
{
  *a1 = *a2;
  uint64_t v6 = a3[5];
  unint64_t v7 = (char *)a1 + v6;
  uint64_t v8 = (char *)a2 + v6;
  uint64_t v9 = type metadata accessor for Date();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v9 - 8) + 32))(v7, v8, v9);
  uint64_t v10 = a3[7];
  *((unsigned char *)a1 + a3[6]) = *((unsigned char *)a2 + a3[6]);
  *(void *)((char *)a1 + v10) = *(void *)((char *)a2 + v10);
  uint64_t v11 = a3[9];
  *(void *)((char *)a1 + a3[8]) = *(void *)((char *)a2 + a3[8]);
  *(void *)((char *)a1 + v11) = *(void *)((char *)a2 + v11);
  *((unsigned char *)a1 + a3[10]) = *((unsigned char *)a2 + a3[10]);
  return a1;
}

uint64_t *assignWithTake for BeaconPayloadv1(uint64_t *a1, _OWORD *a2, int *a3)
{
  uint64_t v6 = *a1;
  unint64_t v7 = a1[1];
  *(_OWORD *)a1 = *a2;
  sub_10001CFB8(v6, v7);
  uint64_t v8 = a3[5];
  uint64_t v9 = (char *)a1 + v8;
  uint64_t v10 = (char *)a2 + v8;
  uint64_t v11 = type metadata accessor for Date();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v11 - 8) + 40))(v9, v10, v11);
  uint64_t v12 = a3[7];
  *((unsigned char *)a1 + a3[6]) = *((unsigned char *)a2 + a3[6]);
  *(uint64_t *)((char *)a1 + v12) = *(void *)((char *)a2 + v12);
  uint64_t v13 = a3[9];
  *(uint64_t *)((char *)a1 + a3[8]) = *(void *)((char *)a2 + a3[8]);
  *(uint64_t *)((char *)a1 + v13) = *(void *)((char *)a2 + v13);
  *((unsigned char *)a1 + a3[10]) = *((unsigned char *)a2 + a3[10]);
  return a1;
}

uint64_t getEnumTagSinglePayload for BeaconPayloadv1(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_100A453D8);
}

uint64_t sub_100A453D8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a2 == 12)
  {
    uint64_t v4 = *(void *)(a1 + 8) >> 60;
    if (((4 * v4) & 0xC) != 0) {
      return 16 - ((4 * v4) & 0xC | (v4 >> 2));
    }
    else {
      return 0;
    }
  }
  else
  {
    uint64_t v8 = type metadata accessor for Date();
    uint64_t v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 48);
    uint64_t v10 = v8;
    uint64_t v11 = a1 + *(int *)(a3 + 20);
    return v9(v11, a2, v10);
  }
}

uint64_t storeEnumTagSinglePayload for BeaconPayloadv1(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_100A454A8);
}

void *sub_100A454A8(void *result, uint64_t a2, int a3, uint64_t a4)
{
  int v5 = result;
  if (a3 == 12)
  {
    *uint64_t result = 0;
    result[1] = (unint64_t)(((-(int)a2 >> 2) & 3) - 4 * a2) << 60;
  }
  else
  {
    uint64_t v7 = type metadata accessor for Date();
    uint64_t v8 = *(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56);
    uint64_t v9 = v7;
    uint64_t v10 = (char *)v5 + *(int *)(a4 + 20);
    return (void *)v8(v10, a2, a2, v9);
  }
  return result;
}

uint64_t sub_100A45558()
{
  uint64_t result = type metadata accessor for Date();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

unint64_t sub_100A45610()
{
  unint64_t result = qword_101655C30;
  if (!qword_101655C30)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_101655C30);
  }
  return result;
}

uint64_t sub_100A45664(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for BeaconPayloadv1();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_100A456C8(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for BeaconPayloadv1();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

unsigned char *storeEnumTagSinglePayload for BeaconPayloadv1.PayloadCreationError(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 2 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 2) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFE) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFD)
  {
    unsigned int v6 = ((a2 - 254) >> 8) + 1;
    *unint64_t result = a2 + 2;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x100A457F0);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 2;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for BeaconPayloadv1.PayloadCreationError()
{
  return &type metadata for BeaconPayloadv1.PayloadCreationError;
}

unsigned char *storeEnumTagSinglePayload for BeaconPayloadv1.EncodingKeys(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 7 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 7) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xF9) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xF8)
  {
    unsigned int v6 = ((a2 - 249) >> 8) + 1;
    *unint64_t result = a2 + 7;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x100A458F4);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 7;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for BeaconPayloadv1.EncodingKeys()
{
  return &type metadata for BeaconPayloadv1.EncodingKeys;
}

unint64_t sub_100A45930()
{
  unint64_t result = qword_101655C38;
  if (!qword_101655C38)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_101655C38);
  }
  return result;
}

unint64_t sub_100A45988()
{
  unint64_t result = qword_101655C40;
  if (!qword_101655C40)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_101655C40);
  }
  return result;
}

unint64_t sub_100A459DC(Swift::String string)
{
  object = string._object;
  v2._countAndFlagsBits = string._countAndFlagsBits;
  v2._object = object;
  unint64_t v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_1015A2E78, v2);
  swift_bridgeObjectRelease();
  if (v3 >= 8) {
    return 8;
  }
  else {
    return v3;
  }
}

uint64_t sub_100A45A28@<X0>(uint64_t *a1@<X0>, unsigned char *a2@<X8>)
{
  uint64_t result = sub_1010AB668(*a1);
  *a2 = result & 1;
  return result;
}

uint64_t sub_100A45A58@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = *a1;
  swift_getKeyPath();
  sub_1010AD23C(v3, a2);

  return swift_release();
}

Swift::Int sub_100A45AB4(void **a1)
{
  uint64_t v2 = *(void *)(type metadata accessor for KeySyncMetadataDisplay() - 8);
  uint64_t v3 = *a1;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    uint64_t v3 = (void *)sub_100B7382C(v3);
  }
  uint64_t v4 = v3[2];
  v6[0] = (char *)v3 + ((*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80));
  v6[1] = v4;
  Swift::Int result = sub_100A592F8(v6);
  *a1 = v3;
  return result;
}

uint64_t sub_100A45B5C(uint64_t a1)
{
  return sub_10044B124(a1, qword_10170E828);
}

unint64_t sub_100A45B88(char a1)
{
  unint64_t result = 0xD00000000000002BLL;
  switch(a1)
  {
    case 1:
    case 4:
      unint64_t result = 0xD00000000000002CLL;
      break;
    case 2:
      unint64_t result = 0xD000000000000041;
      break;
    case 3:
      unint64_t result = 0xD000000000000033;
      break;
    case 5:
      unint64_t result = 0xD000000000000038;
      break;
    case 6:
      unint64_t result = 0xD00000000000003ELL;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t sub_100A45C58(uint64_t a1)
{
  return sub_10044B124(a1, qword_10170E840);
}

uint64_t sub_100A45C7C(unsigned __int8 *a1, char *a2)
{
  return sub_10071C258(*a1, *a2);
}

Swift::Int sub_100A45C88()
{
  return sub_1007211C8();
}

uint64_t sub_100A45C94()
{
  return sub_10071FD50();
}

Swift::Int sub_100A45C9C()
{
  return sub_1007211C8();
}

unint64_t sub_100A45CA4@<X0>(Swift::String *a1@<X0>, unsigned char *a2@<X8>)
{
  unint64_t result = sub_100A5C5D8(*a1);
  *a2 = result;
  return result;
}

unint64_t sub_100A45CD4@<X0>(unint64_t *a1@<X8>)
{
  unint64_t result = sub_100A45B88(*v1);
  *a1 = result;
  a1[1] = v4;
  return result;
}

id sub_100A45D00()
{
  unint64_t v1 = *(void **)(v0 + 272);
  if (v1)
  {
    id v2 = *(id *)(v0 + 272);
  }
  else
  {
    uint64_t v3 = *(void *)(v0 + 280);
    v11[4] = &off_1015CECD8;
    uint64_t v11[5] = &off_1015E5260;
    v11[6] = &off_1015E51D0;
    v11[7] = &off_1015B6D40;
    v11[8] = &off_1015E51F8;
    v11[9] = &off_1016074C8;
    v11[10] = &off_1015C3B10;
    v11[11] = &off_1015BBF28;
    v11[12] = &off_1015E33D0;
    v11[13] = &off_10160C648;
    v11[3] = type metadata accessor for BeaconManagerService();
    v11[0] = v0;
    unint64_t v4 = (objc_class *)type metadata accessor for BeaconManagerTrampoline();
    uint64_t v5 = (char *)objc_allocWithZone(v4);
    sub_1007C7510((uint64_t)v11, (uint64_t)&v5[OBJC_IVAR____TtC12searchpartyd23BeaconManagerTrampoline_implementation]);
    *(void *)&v5[OBJC_IVAR____TtC12searchpartyd23BeaconManagerTrampoline_beaconStore] = v3;
    v10.receiver = v5;
    v10.super_class = v4;
    swift_retain();
    swift_retain();
    id v6 = [super init];
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)v11);
    uint64_t v7 = *(void **)(v0 + 272);
    *(void *)(v0 + 272) = v6;
    id v2 = v6;

    unint64_t v1 = 0;
  }
  id v8 = v1;
  return v2;
}

void *sub_100A45E44()
{
  uint64_t v1 = OBJC_IVAR____TtC12searchpartyd20BeaconManagerService____lazy_storage___handlers;
  if (*(void *)(v0 + OBJC_IVAR____TtC12searchpartyd20BeaconManagerService____lazy_storage___handlers))
  {
    id v2 = *(void **)(v0 + OBJC_IVAR____TtC12searchpartyd20BeaconManagerService____lazy_storage___handlers);
  }
  else
  {
    id v2 = sub_100A45EAC();
    *(void *)(v0 + v1) = v2;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
  }
  swift_bridgeObjectRetain();
  return v2;
}

void *sub_100A45EAC()
{
  uint64_t v0 = type metadata accessor for DarwinNotifications();
  uint64_t v1 = *(void *)(v0 - 8);
  __chkstk_darwin(v0);
  uint64_t v3 = (char *)&v41 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v6 = v5;
  uint64_t v7 = swift_allocObject();
  swift_weakInit();
  swift_retain();
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v42 = _swiftEmptyDictionarySingleton;
  sub_10016CE80((uint64_t)sub_100A61C58, v7, v4, v6, isUniquelyReferenced_nonNull_native);
  uint64_t v9 = v42;
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v10 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v12 = v11;
  uint64_t v13 = swift_allocObject();
  swift_weakInit();
  swift_retain();
  char v14 = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v42 = v9;
  sub_10016CE80((uint64_t)sub_100A61C88, v13, v10, v12, v14);
  uint64_t v15 = v42;
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  (*(void (**)(char *, void, uint64_t))(v1 + 104))(v3, enum case for DarwinNotifications.followersChanged(_:), v0);
  uint64_t v16 = DarwinNotifications.rawValue.getter();
  uint64_t v18 = v17;
  (*(void (**)(char *, uint64_t))(v1 + 8))(v3, v0);
  uint64_t v19 = swift_allocObject();
  swift_weakInit();
  swift_retain();
  char v20 = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v42 = v15;
  sub_10016CE80((uint64_t)sub_100A61C90, v19, v16, v18, v20);
  uint64_t v21 = v42;
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v22 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v24 = v23;
  uint64_t v25 = swift_allocObject();
  swift_weakInit();
  swift_retain();
  char v26 = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v42 = v21;
  sub_10016CE80((uint64_t)sub_100A61C58, v25, v22, v24, v26);
  uint64_t v27 = v42;
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v28 = swift_allocObject();
  swift_weakInit();
  swift_retain();
  char v29 = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v42 = v27;
  sub_10016CE80((uint64_t)sub_100A61C58, v28, 0xD000000000000021, 0x80000001013EE6D0, v29);
  uint64_t v30 = v42;
  swift_release();
  swift_bridgeObjectRelease();
  uint64_t v31 = swift_allocObject();
  swift_weakInit();
  swift_retain();
  char v32 = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v42 = v30;
  sub_10016CE80((uint64_t)sub_100A61C58, v31, 0xD000000000000019, 0x80000001013EE700, v32);
  uint64_t v33 = v42;
  swift_release();
  swift_bridgeObjectRelease();
  uint64_t v34 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v36 = v35;
  uint64_t v37 = swift_allocObject();
  swift_weakInit();
  swift_retain();
  char v38 = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v42 = v33;
  sub_10016CE80((uint64_t)sub_100A61C98, v37, v34, v36, v38);
  uint64_t v39 = v42;
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v39;
}

uint64_t sub_100A463A8(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  uint64_t v6 = (char *)v14 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for DispatchQoS();
  uint64_t v8 = *(void *)(v7 - 8);
  __chkstk_darwin(v7);
  uint64_t v10 = (char *)v14 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_1016368B8 != -1) {
    swift_once();
  }
  OSAllocatedUnfairLock.callAsFunction<A>(_:)();
  swift_beginAccess();
  uint64_t result = swift_weakLoadStrong();
  if (result)
  {
    id v12 = *(id *)(result + 56);
    swift_release();
    aBlock[4] = sub_100A61CA0;
    void aBlock[5] = a2;
    aBlock[0] = _NSConcreteStackBlock;
    aBlock[1] = 1107296256;
    uint64_t aBlock[2] = sub_1004B5480;
    aBlock[3] = &unk_1015E5A08;
    uint64_t v13 = _Block_copy(aBlock);
    swift_retain();
    static DispatchQoS.unspecified.getter();
    v14[1] = _swiftEmptyArrayStorage;
    sub_100A5FAC4((unint64_t *)&qword_10163B7E0, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
    v14[0] = v7;
    sub_10000588C((uint64_t *)&unk_10163F350);
    sub_100062734((unint64_t *)&qword_10163B7F0, (uint64_t *)&unk_10163F350);
    dispatch thunk of SetAlgebra.init<A>(_:)();
    OS_dispatch_queue.async(group:qos:flags:execute:)();
    _Block_release(v13);

    (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
    (*(void (**)(char *, void))(v8 + 8))(v10, v14[0]);
    return swift_release();
  }
  return result;
}

uint64_t sub_100A466F4(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  uint64_t v6 = (char *)&v14 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for DispatchQoS();
  uint64_t v8 = *(void *)(v7 - 8);
  __chkstk_darwin(v7);
  uint64_t v10 = (char *)&v14 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_beginAccess();
  uint64_t result = swift_weakLoadStrong();
  if (result)
  {
    id v12 = *(id *)(result + 56);
    swift_release();
    aBlock[4] = sub_100A61CA0;
    void aBlock[5] = a2;
    aBlock[0] = _NSConcreteStackBlock;
    aBlock[1] = 1107296256;
    uint64_t aBlock[2] = sub_1004B5480;
    aBlock[3] = &unk_1015E59E0;
    uint64_t v13 = _Block_copy(aBlock);
    swift_retain();
    static DispatchQoS.unspecified.getter();
    uint64_t v16 = _swiftEmptyArrayStorage;
    sub_100A5FAC4((unint64_t *)&qword_10163B7E0, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
    uint64_t v15 = v7;
    sub_10000588C((uint64_t *)&unk_10163F350);
    sub_100062734((unint64_t *)&qword_10163B7F0, (uint64_t *)&unk_10163F350);
    dispatch thunk of SetAlgebra.init<A>(_:)();
    OS_dispatch_queue.async(group:qos:flags:execute:)();
    _Block_release(v13);

    (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
    (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v15);
    return swift_release();
  }
  return result;
}

uint64_t sub_100A469D8()
{
  swift_beginAccess();
  uint64_t result = swift_weakLoadStrong();
  if (result)
  {
    sub_100A501F0();
    return swift_release();
  }
  return result;
}

uint64_t sub_100A46A30()
{
  swift_beginAccess();
  uint64_t result = swift_weakLoadStrong();
  if (result)
  {
    static os_log_type_t.default.getter();
    if (qword_101637250 != -1) {
      swift_once();
    }
    os_log(_:dso:log:_:_:)();
    type metadata accessor for Transaction();
    static Transaction.named<A>(_:with:)();
    return swift_release();
  }
  return result;
}

uint64_t sub_100A46B30()
{
  swift_beginAccess();
  uint64_t result = swift_weakLoadStrong();
  if (result)
  {
    sub_100A50698();
    return swift_release();
  }
  return result;
}

void *sub_100A46B88()
{
  uint64_t v1 = OBJC_IVAR____TtC12searchpartyd20BeaconManagerService____lazy_storage___unauthorizedTracking;
  if (*(void *)(v0 + OBJC_IVAR____TtC12searchpartyd20BeaconManagerService____lazy_storage___unauthorizedTracking))
  {
    uint64_t v2 = *(void **)(v0 + OBJC_IVAR____TtC12searchpartyd20BeaconManagerService____lazy_storage___unauthorizedTracking);
  }
  else
  {
    uint64_t v3 = v0;
    uint64_t v4 = *(void *)(v0 + 280);
    uint64_t v5 = *(void *)(v3 + OBJC_IVAR____TtC12searchpartyd20BeaconManagerService_accessoryMetadataManager);
    type metadata accessor for UnauthorizedTracking();
    swift_allocObject();
    swift_retain();
    swift_retain();
    uint64_t v2 = sub_100781D70(v4, v5);
    *(void *)(v3 + v1) = v2;
    swift_retain();
    swift_release();
  }
  swift_retain();
  return v2;
}

uint64_t sub_100A46C38()
{
  uint64_t v1 = OBJC_IVAR____TtC12searchpartyd20BeaconManagerService____lazy_storage___maskedIdentifierService;
  if (*(void *)(v0 + OBJC_IVAR____TtC12searchpartyd20BeaconManagerService____lazy_storage___maskedIdentifierService))
  {
    uint64_t v2 = *(void *)(v0 + OBJC_IVAR____TtC12searchpartyd20BeaconManagerService____lazy_storage___maskedIdentifierService);
  }
  else
  {
    uint64_t v3 = v0;
    type metadata accessor for MaskedIdentifierService();
    swift_allocObject();
    uint64_t v4 = swift_retain();
    uint64_t v2 = sub_1010C2C64(v4);
    *(void *)(v3 + v1) = v2;
    swift_retain();
    swift_release();
  }
  swift_retain();
  return v2;
}

uint64_t sub_100A46CC8()
{
  uint64_t v1 = OBJC_IVAR____TtC12searchpartyd20BeaconManagerService____lazy_storage___accessoryPairingValidator;
  if (*(void *)(v0 + OBJC_IVAR____TtC12searchpartyd20BeaconManagerService____lazy_storage___accessoryPairingValidator))
  {
    uint64_t v2 = *(void *)(v0
                   + OBJC_IVAR____TtC12searchpartyd20BeaconManagerService____lazy_storage___accessoryPairingValidator);
  }
  else
  {
    type metadata accessor for AccessoryPairingValidator();
    uint64_t v2 = swift_allocObject();
    type metadata accessor for DeviceIdentityUtility();
    uint64_t v3 = swift_allocObject();
    swift_defaultActor_initialize();
    uint64_t v4 = v3 + OBJC_IVAR____TtC12searchpartyd21DeviceIdentityUtility_certExpiryDate;
    uint64_t v5 = type metadata accessor for Date();
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 56))(v4, 1, 1, v5);
    *(void *)(v3 + OBJC_IVAR____TtC12searchpartyd21DeviceIdentityUtility_refKey) = 0;
    *(void *)(v3 + OBJC_IVAR____TtC12searchpartyd21DeviceIdentityUtility_certs) = _swiftEmptyArrayStorage;
    *(unsigned char *)(v3 + OBJC_IVAR____TtC12searchpartyd21DeviceIdentityUtility_signingType) = 9;
    *(void *)(v2 + 16) = v3;
    *(void *)(v2 + 24) = 0;
    *(void *)(v0 + v1) = v2;
    swift_retain();
    swift_release();
  }
  swift_retain();
  return v2;
}

uint64_t (*sub_100A46DE0())@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v1 = (uint64_t (**)@<X0>(uint64_t@<X0>, uint64_t@<X1>, uint64_t@<X8>))((char *)v0
                                                                              + OBJC_IVAR____TtC12searchpartyd20BeaconManagerService____lazy_storage___payloadDecodingBlock);
  uint64_t v2 = *(void *)((char *)v0
                 + OBJC_IVAR____TtC12searchpartyd20BeaconManagerService____lazy_storage___payloadDecodingBlock);
  if (v2)
  {
    uint64_t v3 = *(uint64_t (**)@<X0>(uint64_t@<X0>, uint64_t@<X1>, uint64_t@<X8>))((char *)v0
                                                                                 + OBJC_IVAR____TtC12searchpartyd20BeaconManagerService____lazy_storage___payloadDecodingBlock);
  }
  else
  {
    uint64_t v3 = sub_100A61C50;
    *uint64_t v1 = sub_100A61C50;
    v1[1] = v0;
    swift_retain_n();
    sub_1000A1534(0);
  }
  sub_1000BD0E8(v2);
  return v3;
}

uint64_t sub_100A46E68@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v54 = a2;
  uint64_t v7 = type metadata accessor for UUID();
  uint64_t v50 = *(void *)(v7 - 8);
  uint64_t v51 = v7;
  __chkstk_darwin(v7);
  uint64_t v9 = (char *)&v49 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = type metadata accessor for Date();
  uint64_t v11 = *(void *)(v10 - 8);
  __chkstk_darwin(v10);
  uint64_t v13 = (char *)&v49 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = type metadata accessor for DateInterval();
  uint64_t v52 = *(void *)(v14 - 8);
  uint64_t v53 = v14;
  __chkstk_darwin(v14);
  uint64_t v16 = (char *)&v49 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  dispatch_group_t v17 = dispatch_group_create();
  uint64_t v18 = *(void *)(a3 + 280);
  sub_100ACCD98(a1, (uint64_t)&v55);
  if (v56)
  {
    sub_10001CEB0(&v55, (uint64_t)v57);
    (*(void (**)(char *, uint64_t, uint64_t))(v11 + 16))(v13, v54, v10);
    DateInterval.init(start:duration:)();
    uint64_t v19 = v58;
    uint64_t v20 = v59;
    uint64_t v21 = sub_10001CD44(v57, v58);
    uint64_t v22 = sub_100B2F5F4((uint64_t)v21, (uint64_t)v16, 0, 1, 0, v18, v19, v20);
    uint64_t v24 = v22;
    uint64_t v25 = v23;
    switch(v26)
    {
      case 1:
        uint64_t v27 = v16;
        uint64_t v35 = *(void *)(v22 + 16);
        uint64_t v36 = type metadata accessor for TimeBasedKey();
        uint64_t v37 = *(void *)(v36 - 8);
        if (v35)
        {
          uint64_t v38 = a4;
          sub_100A61D20(v24+ ((*(unsigned __int8 *)(*(void *)(v36 - 8) + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(v36 - 8) + 80)), a4, (uint64_t (*)(void))type metadata accessor for TimeBasedKey);
          uint64_t v39 = 0;
        }
        else
        {
          uint64_t v39 = 1;
          uint64_t v38 = a4;
        }
        uint64_t v48 = v52;
        uint64_t v47 = v53;
        (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v37 + 56))(v38, v39, 1, v36);

        sub_1002F6A08(v24, v25, 1u);
        goto LABEL_16;
      case 2:
        sub_1002F6A08(v22, v23, 2u);
        goto LABEL_9;
      case 3:
LABEL_9:
        static os_log_type_t.default.getter();
        if (qword_101637250 != -1) {
          swift_once();
        }
        sub_10000588C((uint64_t *)&unk_10163AD00);
        uint64_t v40 = swift_allocObject();
        *(_OWORD *)(v40 + 16) = xmmword_101342130;
        uint64_t v42 = v58;
        uint64_t v41 = v59;
        sub_10001CD44(v57, v58);
        (*(void (**)(uint64_t))(*(void *)(*(void *)(v41 + 8) + 8) + 32))(v42);
        uint64_t v43 = UUID.uuidString.getter();
        uint64_t v45 = v44;
        (*(void (**)(char *, uint64_t))(v50 + 8))(v9, v51);
        *(void *)(v40 + 56) = &type metadata for String;
        *(void *)(v40 + 64) = sub_10000B4CC();
        *(void *)(v40 + 32) = v43;
        *(void *)(v40 + 40) = v45;
        os_log(_:dso:log:_:_:)();
        swift_bridgeObjectRelease();

        (*(void (**)(char *, uint64_t))(v52 + 8))(v16, v53);
        uint64_t v46 = type metadata accessor for TimeBasedKey();
        (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v46 - 8) + 56))(a4, 1, 1, v46);
        break;
      default:
        uint64_t v27 = v16;
        uint64_t v28 = *(void *)(v22 + 16);
        uint64_t v29 = type metadata accessor for TimeBasedKey();
        uint64_t v30 = *(void *)(v29 - 8);
        if (v28)
        {
          uint64_t v31 = a4;
          sub_100A61D20(v24+ ((*(unsigned __int8 *)(*(void *)(v29 - 8) + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(v29 - 8) + 80)), a4, (uint64_t (*)(void))type metadata accessor for TimeBasedKey);
          uint64_t v32 = 0;
        }
        else
        {
          uint64_t v32 = 1;
          uint64_t v31 = a4;
        }
        uint64_t v48 = v52;
        uint64_t v47 = v53;
        (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v30 + 56))(v31, v32, 1, v29);
        swift_bridgeObjectRetain();

        sub_1002F6A08(v24, v25, 0);
        swift_bridgeObjectRelease();
LABEL_16:
        (*(void (**)(char *, uint64_t))(v48 + 8))(v27, v47);
        break;
    }
    return _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)v57);
  }
  else
  {

    sub_10001DAB4((uint64_t)&v55, (uint64_t *)&unk_10163BBE0);
    uint64_t v33 = type metadata accessor for TimeBasedKey();
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v33 - 8) + 56))(a4, 1, 1, v33);
  }
}

uint64_t sub_100A4745C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5, void *a6, void *a7)
{
  uint64_t v8 = v7;
  long long v88 = a7;
  id v89 = a6;
  long long v87 = a5;
  uint64_t v84 = a4;
  uint64_t v86 = a3;
  uint64_t v85 = a2;
  uint64_t v83 = a1;
  uint64_t v9 = (void *)type metadata accessor for OS_dispatch_queue.Attributes();
  __chkstk_darwin(v9);
  uint64_t v10 = type metadata accessor for DispatchQoS();
  __chkstk_darwin(v10 - 8);
  uint64_t v11 = type metadata accessor for OS_dispatch_queue.AutoreleaseFrequency();
  uint64_t v12 = *(void *)(v11 - 8);
  __chkstk_darwin(v11);
  uint64_t v14 = (char *)v82 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(void *)(v8 + 16) = 0xD000000000000014;
  *(void *)(v8 + 24) = 0x8000000101375270;
  v82[2] = 0x8000000101375270;
  uint64_t v93 = sub_10001D4B0(0, (unint64_t *)&qword_1016376E0);
  *(void *)(v8 + 32) = 0;
  *(void *)(v8 + 40) = 0;
  unsigned int v97 = enum case for OS_dispatch_queue.AutoreleaseFrequency.workItem(_:);
  uint64_t v91 = *(void (**)(char *))(v12 + 104);
  uint64_t v95 = v12 + 104;
  v91(v14);
  static DispatchQoS.unspecified.getter();
  long long aBlock = (void **)_swiftEmptyArrayStorage;
  uint64_t v96 = sub_100A5FAC4((unint64_t *)&qword_101638CC0, (void (*)(uint64_t))&type metadata accessor for OS_dispatch_queue.Attributes);
  uint64_t v94 = sub_10000588C((uint64_t *)&unk_1016376F0);
  uint64_t v15 = sub_100062734((unint64_t *)&qword_101638CD0, (uint64_t *)&unk_1016376F0);
  id v98 = v9;
  dispatch thunk of SetAlgebra.init<A>(_:)();
  *(void *)(v8 + 48) = OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)();
  uint64_t v16 = v97;
  uint64_t v92 = v11;
  dispatch_group_t v17 = (void (*)(char *, uint64_t, uint64_t))v91;
  ((void (*)(char *, void, uint64_t))v91)(v14, v97, v11);
  static DispatchQoS.unspecified.getter();
  long long aBlock = (void **)_swiftEmptyArrayStorage;
  dispatch thunk of SetAlgebra.init<A>(_:)();
  *(void *)(v8 + 56) = OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)();
  v17(v14, v16, v11);
  static DispatchQoS.unspecified.getter();
  long long aBlock = (void **)_swiftEmptyArrayStorage;
  uint64_t v90 = v15;
  dispatch thunk of SetAlgebra.init<A>(_:)();
  *(void *)(v8 + 64) = OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)();
  ((void (*)(char *, void, uint64_t))v91)(v14, v97, v92);
  static DispatchQoS.unspecified.getter();
  long long aBlock = (void **)_swiftEmptyArrayStorage;
  dispatch thunk of SetAlgebra.init<A>(_:)();
  *(void *)(v8 + 72) = OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)();
  *(void *)(v8 + 80) = 0;
  uint64_t v18 = v97;
  uint64_t v19 = v92;
  uint64_t v20 = (void (*)(char *, uint64_t, uint64_t))v91;
  ((void (*)(char *, void, uint64_t))v91)(v14, v97, v92);
  static DispatchQoS.unspecified.getter();
  long long aBlock = (void **)_swiftEmptyArrayStorage;
  dispatch thunk of SetAlgebra.init<A>(_:)();
  *(void *)(v8 + 88) = OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)();
  v20(v14, v18, v19);
  static DispatchQoS.unspecified.getter();
  long long aBlock = (void **)_swiftEmptyArrayStorage;
  dispatch thunk of SetAlgebra.init<A>(_:)();
  *(void *)(v8 + 96) = OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)();
  v20(v14, v97, v19);
  static DispatchQoS.unspecified.getter();
  long long aBlock = (void **)_swiftEmptyArrayStorage;
  dispatch thunk of SetAlgebra.init<A>(_:)();
  v82[1] = 0xD00000000000004ALL;
  *(void *)(v8 + 104) = OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)();
  uint64_t v21 = v97;
  uint64_t v22 = (void (*)(char *, uint64_t, uint64_t))v91;
  ((void (*)(char *, void, uint64_t))v91)(v14, v97, v19);
  static DispatchQoS.unspecified.getter();
  long long aBlock = (void **)_swiftEmptyArrayStorage;
  dispatch thunk of SetAlgebra.init<A>(_:)();
  v82[0] = 0xD00000000000004CLL;
  *(void *)(v8 + 112) = OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)();
  uint64_t v23 = v21;
  uint64_t v24 = v92;
  v22(v14, v23, v92);
  static DispatchQoS.unspecified.getter();
  long long aBlock = (void **)_swiftEmptyArrayStorage;
  dispatch thunk of SetAlgebra.init<A>(_:)();
  *(void *)(v8 + 120) = OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)();
  uint64_t v25 = v24;
  char v26 = v91;
  ((void (*)(char *, void, uint64_t))v91)(v14, v97, v25);
  static DispatchQoS.unspecified.getter();
  long long aBlock = (void **)_swiftEmptyArrayStorage;
  dispatch thunk of SetAlgebra.init<A>(_:)();
  *(void *)(v8 + 128) = OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)();
  uint64_t v27 = v97;
  ((void (*)(char *, void, uint64_t))v26)(v14, v97, v92);
  static DispatchQoS.unspecified.getter();
  long long aBlock = (void **)_swiftEmptyArrayStorage;
  dispatch thunk of SetAlgebra.init<A>(_:)();
  *(void *)(v8 + 136) = OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)();
  ((void (*)(char *, uint64_t, uint64_t))v26)(v14, v27, v92);
  static DispatchQoS.unspecified.getter();
  long long aBlock = (void **)_swiftEmptyArrayStorage;
  dispatch thunk of SetAlgebra.init<A>(_:)();
  *(void *)(v8 + 144) = OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)();
  uint64_t v28 = v92;
  ((void (*)(char *, uint64_t, uint64_t))v26)(v14, v27, v92);
  static DispatchQoS.unspecified.getter();
  long long aBlock = (void **)_swiftEmptyArrayStorage;
  dispatch thunk of SetAlgebra.init<A>(_:)();
  *(void *)(v8 + 152) = OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)();
  ((void (*)(char *, void, uint64_t))v91)(v14, v97, v28);
  static DispatchQoS.unspecified.getter();
  long long aBlock = (void **)_swiftEmptyArrayStorage;
  dispatch thunk of SetAlgebra.init<A>(_:)();
  *(void *)(v8 + 160) = OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)();
  if (qword_101636CD8 != -1) {
    swift_once();
  }
  OS_dispatch_queue.sync<A>(execute:)();
  sub_1010AC2E8((uint64_t)aBlock);
  uint64_t v30 = v29;
  swift_bridgeObjectRelease();
  *(void *)(v8 + 168) = v30;
  *(void *)(v8 + 176) = 0;
  type metadata accessor for MaintenanceConnectionObserveriOS();
  swift_allocObject();
  *(void *)(v8 + 184) = sub_1008DB90C();
  *(_OWORD *)(v8 + 192) = 0u;
  *(_OWORD *)(v8 + 208) = 0u;
  *(_OWORD *)(v8 + 224) = 0u;
  *(unsigned char *)(v8 + 248) = 6;
  type metadata accessor for Sequencer();
  *(void *)(v8 + 256) = Sequencer.__allocating_init(name:softTimeout:hardTimeout:)();
  type metadata accessor for XPCSessionManager();
  swift_allocObject();
  *(void *)(v8 + 264) = XPCSessionManager.init(name:)();
  *(void *)(v8 + 272) = 0;
  *(void *)(v8 + 288) = 0;
  uint64_t v31 = v8 + OBJC_IVAR____TtC12searchpartyd20BeaconManagerService_configSubscription;
  uint64_t v32 = sub_10000588C((uint64_t *)&unk_1016488F0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v32 - 8) + 56))(v31, 1, 1, v32);
  PressuredExitTransactionManager.init()();
  *(void *)(v8 + OBJC_IVAR____TtC12searchpartyd20BeaconManagerService_darwinHelper) = 0;
  *(void *)(v8 + OBJC_IVAR____TtC12searchpartyd20BeaconManagerService_afterFirstUnlockActivity) = 0;
  *(void *)(v8 + OBJC_IVAR____TtC12searchpartyd20BeaconManagerService_pruneActivity) = 0;
  *(void *)(v8 + OBJC_IVAR____TtC12searchpartyd20BeaconManagerService_legacyStateCapture) = 0;
  *(void *)(v8 + OBJC_IVAR____TtC12searchpartyd20BeaconManagerService_stateCapture) = 0;
  uint64_t v33 = OBJC_IVAR____TtC12searchpartyd20BeaconManagerService_locationFetchService;
  type metadata accessor for LocationFetchService();
  swift_allocObject();
  *(void *)(v8 + v33) = sub_1007E346C();
  uint64_t v34 = OBJC_IVAR____TtC12searchpartyd20BeaconManagerService_locatableStateMonitor;
  type metadata accessor for LocatableStateMonitor();
  swift_allocObject();
  *(void *)(v8 + v34) = sub_100EC1704();
  *(void *)(v8 + OBJC_IVAR____TtC12searchpartyd20BeaconManagerService_keySyncMetadataStateCapture) = 0;
  *(void *)(v8 + OBJC_IVAR____TtC12searchpartyd20BeaconManagerService_beaconUUIDsLocalLocating) = &_swiftEmptySetSingleton;
  *(void *)(v8 + OBJC_IVAR____TtC12searchpartyd20BeaconManagerService_beaconUUIDsLocating) = _swiftEmptyDictionarySingleton;
  *(void *)(v8 + OBJC_IVAR____TtC12searchpartyd20BeaconManagerService_beaconKeyManagerURLChangedSubscription) = 1;
  *(void *)(v8 + OBJC_IVAR____TtC12searchpartyd20BeaconManagerService_checkInPostInstallXPCActivity) = 0;
  *(void *)(v8 + OBJC_IVAR____TtC12searchpartyd20BeaconManagerService____lazy_storage___handlers) = 0;
  *(void *)(v8 + OBJC_IVAR____TtC12searchpartyd20BeaconManagerService____lazy_storage___unauthorizedTracking) = 0;
  *(void *)(v8 + OBJC_IVAR____TtC12searchpartyd20BeaconManagerService_pairingSessionCoordinators) = _swiftEmptyDictionarySingleton;
  *(void *)(v8 + OBJC_IVAR____TtC12searchpartyd20BeaconManagerService____lazy_storage___maskedIdentifierService) = 0;
  *(void *)(v8 + OBJC_IVAR____TtC12searchpartyd20BeaconManagerService_playbackCoordinatorByBeaconIdentifier) = _swiftEmptyDictionarySingleton;
  uint64_t v35 = OBJC_IVAR____TtC12searchpartyd20BeaconManagerService_playbackCoordinatorModQueue;
  ((void (*)(char *, void, uint64_t))v91)(v14, v97, v92);
  static DispatchQoS.unspecified.getter();
  long long aBlock = (void **)_swiftEmptyArrayStorage;
  dispatch thunk of SetAlgebra.init<A>(_:)();
  *(void *)(v8 + v35) = OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)();
  uint64_t v36 = OBJC_IVAR____TtC12searchpartyd20BeaconManagerService_pairingValidator;
  type metadata accessor for PairingValidator();
  uint64_t v37 = swift_allocObject();
  *(void *)(v37 + 16) = 0;
  *(void *)(v8 + v36) = v37;
  *(void *)(v8 + OBJC_IVAR____TtC12searchpartyd20BeaconManagerService____lazy_storage___accessoryPairingValidator) = 0;
  uint64_t v38 = OBJC_IVAR____TtC12searchpartyd20BeaconManagerService_connectableDevicesChangedSubject;
  long long aBlock = 0;
  sub_10000588C((uint64_t *)&unk_101653EB0);
  swift_allocObject();
  *(void *)(v8 + v38) = CurrentValueSubject.init(_:)();
  uint64_t v39 = (void *)(v8 + OBJC_IVAR____TtC12searchpartyd20BeaconManagerService____lazy_storage___payloadDecodingBlock);
  *uint64_t v39 = 0;
  v39[1] = 0;
  *(unsigned char *)(v8 + OBJC_IVAR____TtC12searchpartyd20BeaconManagerService_shouldForceFetch) = 0;
  *(unsigned char *)(v8 + OBJC_IVAR____TtC12searchpartyd20BeaconManagerService_notifiedDaemonConfigurationChangedOnce) = 0;
  *(void *)(v8 + OBJC_IVAR____TtC12searchpartyd20BeaconManagerService_messagingDevicesChangedSubscription) = 0;
  *(void *)(v8 + OBJC_IVAR____TtC12searchpartyd20BeaconManagerService_recordDeletedSubscription) = 0;
  *(void *)(v8 + OBJC_IVAR____TtC12searchpartyd20BeaconManagerService_meDeviceChangedSubscription) = 0;
  *(void *)(v8 + OBJC_IVAR____TtC12searchpartyd20BeaconManagerService_triggerFamilyUpdateSubscription) = 0;
  *(unsigned char *)(v8 + OBJC_IVAR____TtC12searchpartyd20BeaconManagerService_nvramAlreadyChecked) = 0;
  uint64_t v40 = v83;
  *(void *)(v8 + 280) = v83;
  *(void *)(v8 + OBJC_IVAR____TtC12searchpartyd20BeaconManagerService_fmipStateManager) = v85;
  *(void *)(v8 + OBJC_IVAR____TtC12searchpartyd20BeaconManagerService_appActivity) = v86;
  uint64_t v41 = v84;
  *(void *)(v8 + OBJC_IVAR____TtC12searchpartyd20BeaconManagerService_localPairingMonitor) = v84;
  uint64_t v42 = qword_101637680;
  swift_retain_n();
  swift_retain();
  swift_retain();
  swift_retain();
  if (v42 != -1) {
    swift_once();
  }
  uint64_t v43 = *(void *)(qword_10170F8A0 + 24);
  id v44 = objc_allocWithZone((Class)RTRoutineManager);
  swift_retain();
  NSString v45 = String._bridgeToObjectiveC()();
  id v46 = [v44 initWithRestorationIdentifier:v45];

  type metadata accessor for LocationOfInterestProvider();
  uint64_t v47 = (void *)swift_allocObject();
  *(void *)(v8 + 240) = sub_100A5A918(v40, v43, (uint64_t)v46, v47);
  id v48 = v89;
  uint64_t v49 = v87;
  if (v89)
  {
    id v98 = v89;
  }
  else
  {
    id v50 = objc_allocWithZone((Class)type metadata accessor for TagCommandManager());
    uint64_t v51 = swift_retain();
    id v98 = sub_1008D4D8C(v51, (uint64_t)sub_100564F60, 0);
    swift_release();
  }
  *(void *)(v8 + OBJC_IVAR____TtC12searchpartyd20BeaconManagerService_tagCommandManager) = v98;
  if (v49)
  {
    id v52 = v48;
    id v53 = v98;
    uint64_t v54 = v49;
  }
  else
  {
    type metadata accessor for BluetoothCommunicationCoordinator();
    swift_allocObject();
    id v55 = v48;
    id v56 = v98;
    uint64_t v54 = sub_1011CED9C();
  }
  *(void *)(v8 + OBJC_IVAR____TtC12searchpartyd20BeaconManagerService_bluetoothCommunicatorCoordinator) = v54;
  type metadata accessor for WildModeAssociationManager();
  swift_allocObject();
  swift_retain();
  swift_retain();
  *(void *)(v8 + OBJC_IVAR____TtC12searchpartyd20BeaconManagerService_wildModeAssociationManager) = sub_1008B6964(v40);
  if (v88)
  {
    uint64_t v57 = v88;
  }
  else
  {
    type metadata accessor for AccessoryMetadataManager();
    swift_allocObject();
    swift_retain();
    swift_retain();
    uint64_t v57 = sub_1002F81B4(v40, (uint64_t)v54);
  }
  *(void *)(v8 + OBJC_IVAR____TtC12searchpartyd20BeaconManagerService_accessoryMetadataManager) = v57;
  type metadata accessor for ProductInfoManager();
  swift_allocObject();
  swift_retain();
  swift_retain();
  swift_retain();
  uint64_t v58 = sub_1010D8C88(v40, (uint64_t)v57);
  swift_release();
  swift_release();
  *(void *)(v8 + OBJC_IVAR____TtC12searchpartyd20BeaconManagerService_productInfoManager) = v58;
  type metadata accessor for ClassicPairingSupport();
  swift_allocObject();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  uint64_t v59 = sub_100413AF0(v40, v41, (uint64_t)v54, (uint64_t)v57);
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  *(void *)(v8 + OBJC_IVAR____TtC12searchpartyd20BeaconManagerService_classicPairingSupport) = v59;
  id v60 = objc_allocWithZone((Class)type metadata accessor for SoundPlaybackManager());
  swift_retain();
  swift_retain();
  *(void *)(v8 + OBJC_IVAR____TtC12searchpartyd20BeaconManagerService_soundPlaybackManager) = sub_100817D98(v40, (uint64_t)v54);
  type metadata accessor for TheftDeterrenceStateManager();
  swift_allocObject();
  *(void *)(v8 + OBJC_IVAR____TtC12searchpartyd20BeaconManagerService_theftDeterrenceStateManager) = sub_100F2CF40();
  swift_retain();
  uint64_t v61 = CurrentValueSubject.eraseToAnyCurrentValuePublisher()();
  swift_release();
  *(void *)(v8 + OBJC_IVAR____TtC12searchpartyd20BeaconManagerService_connectableDevicesChangedPublisher) = v61;
  uint64_t v62 = swift_retain();
  uint64_t v63 = sub_100F66098(v62);
  v105[3] = &type metadata for SingleUserAdapter;
  v105[4] = &off_1015FEE20;
  v105[0] = v63;
  v105[1] = v64;
  v105[2] = v65;
  sub_10001D010((uint64_t)v105, v8 + OBJC_IVAR____TtC12searchpartyd20BeaconManagerService_cbPeripheralManager);
  type metadata accessor for FirmwareUpdateService();
  swift_allocObject();
  uint64_t v66 = swift_retain();
  *(void *)(v8 + OBJC_IVAR____TtC12searchpartyd20BeaconManagerService_firmwareUpdateService) = sub_1001CB788(v66);
  type metadata accessor for FirmwareUpdateScheduler();
  swift_allocObject();
  uint64_t v67 = swift_retain_n();
  *(void *)(v8 + OBJC_IVAR____TtC12searchpartyd20BeaconManagerService_firmwareUpdateScheduler) = sub_1001AED14(v67);
  id v68 = objc_allocWithZone((Class)FMStateCapture);
  swift_retain();
  id v69 = [v68 init];
  uint64_t v70 = swift_allocObject();
  *(void *)(v70 + 16) = sub_100A61E84;
  *(void *)(v70 + 24) = v8;
  uint64_t v103 = sub_100A61E8C;
  uint64_t v104 = v70;
  long long aBlock = _NSConcreteStackBlock;
  uint64_t v100 = 1107296256;
  uint64_t v101 = sub_1000B6B9C;
  uint64_t v102 = &unk_1015E5AA8;
  unint64_t v71 = _Block_copy(&aBlock);
  swift_retain();
  swift_release();
  [v69 setStateCaptureBlock:v71];
  _Block_release(v71);
  swift_release();
  uint64_t v72 = *(void **)(v8 + OBJC_IVAR____TtC12searchpartyd20BeaconManagerService_legacyStateCapture);
  *(void *)(v8 + OBJC_IVAR____TtC12searchpartyd20BeaconManagerService_legacyStateCapture) = v69;

  uint64_t v73 = swift_allocObject();
  swift_weakInit();
  id v74 = [objc_allocWithZone((Class)FMStateCapture) init];
  uint64_t v75 = swift_allocObject();
  *(void *)(v75 + 16) = sub_100A61E94;
  *(void *)(v75 + 24) = v73;
  uint64_t v103 = sub_100A61E9C;
  uint64_t v104 = v75;
  long long aBlock = _NSConcreteStackBlock;
  uint64_t v100 = 1107296256;
  uint64_t v101 = sub_1000B6B9C;
  uint64_t v102 = &unk_1015E5AF8;
  uint64_t v76 = _Block_copy(&aBlock);
  swift_retain();
  swift_release();
  [v74 setStateCaptureBlock:v76];
  _Block_release(v76);
  swift_release();
  unsigned __int8 v77 = *(void **)(v8 + OBJC_IVAR____TtC12searchpartyd20BeaconManagerService_stateCapture);
  *(void *)(v8 + OBJC_IVAR____TtC12searchpartyd20BeaconManagerService_stateCapture) = v74;

  swift_retain();
  long long v78 = (void **)AnyCurrentValuePublisher.publisher.getter();
  swift_release();
  long long aBlock = v78;
  swift_allocObject();
  swift_weakInit();
  sub_10000588C((uint64_t *)&unk_1016569C0);
  sub_100062734((unint64_t *)&qword_10163A518, (uint64_t *)&unk_1016569C0);
  uint64_t v79 = Publisher<>.sink(receiveValue:)();
  swift_release();
  swift_release();
  *(void *)(v8 + OBJC_IVAR____TtC12searchpartyd20BeaconManagerService_meDeviceChangedSubscription) = v79;
  swift_release();
  type metadata accessor for AccessoryFirmwareUpdateManager();
  swift_allocObject();
  long long v80 = sub_101077228(v83);
  swift_release();

  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();

  *(void *)(v8 + 176) = v80;
  swift_release();
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)v105);
  return v8;
}

uint64_t sub_100A48B04()
{
  swift_beginAccess();
  uint64_t result = swift_weakLoadStrong();
  if (result)
  {
    sub_100A9E7EC(20);
    return swift_release();
  }
  return result;
}

uint64_t sub_100A48B64(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = type metadata accessor for DispatchPredicate();
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  uint64_t v6 = (uint64_t *)((char *)&v10 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0));
  static os_log_type_t.debug.getter();
  if (qword_101637250 != -1) {
    swift_once();
  }
  os_log(_:dso:log:_:_:)();
  uint64_t v7 = *(void **)(a2 + 56);
  *uint64_t v6 = v7;
  (*(void (**)(void *, void, uint64_t))(v4 + 104))(v6, enum case for DispatchPredicate.notOnQueue(_:), v3);
  id v8 = v7;
  LOBYTE(vsub_100A2F554("Can't update non-existant safe location with identifier: %s.", 7) = _dispatchPreconditionTest(_:)();
  uint64_t result = (*(uint64_t (**)(void *, uint64_t))(v4 + 8))(v6, v3);
  if (v7)
  {
    type metadata accessor for Transaction();
    return static Transaction.named<A>(_:with:)();
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_100A48D24()
{
  type metadata accessor for Transaction();
  static Transaction.named<A>(_:with:)();
  sub_100EC0168();
  uint64_t result = static SystemInfo.isInternalBuild.getter();
  if (result)
  {
    swift_allocObject();
    swift_weakInit();
    type metadata accessor for StateCapture();
    swift_allocObject();
    *(void *)(v0 + OBJC_IVAR____TtC12searchpartyd20BeaconManagerService_keySyncMetadataStateCapture) = StateCapture.init(_:)();
    return swift_release();
  }
  return result;
}

uint64_t sub_100A48E48(void *a1)
{
  uint64_t v2 = sub_10000588C(&qword_10163C6C8);
  __chkstk_darwin(v2 - 8);
  uint64_t v25 = (char *)&v25 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = sub_10000588C((uint64_t *)&unk_101656720);
  uint64_t v27 = *(void *)(v4 - 8);
  uint64_t v28 = v4;
  __chkstk_darwin(v4);
  char v26 = (char *)&v25 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v31 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  id v8 = (char *)&v25 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v30 = type metadata accessor for DispatchQoS();
  uint64_t v9 = *(void *)(v30 - 8);
  __chkstk_darwin(v30);
  uint64_t v11 = (char *)&v25 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v29 = a1[6];
  aBlock[4] = sub_100A60EE0;
  void aBlock[5] = a1;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  uint64_t aBlock[2] = sub_1004B5480;
  aBlock[3] = &unk_1015E57B0;
  uint64_t v12 = _Block_copy(aBlock);
  swift_retain();
  static DispatchQoS.unspecified.getter();
  uint64_t v33 = _swiftEmptyArrayStorage;
  sub_100A5FAC4((unint64_t *)&qword_10163B7E0, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
  sub_10000588C((uint64_t *)&unk_10163F350);
  sub_100062734((unint64_t *)&qword_10163B7F0, (uint64_t *)&unk_10163F350);
  dispatch thunk of SetAlgebra.init<A>(_:)();
  OS_dispatch_queue.async(group:qos:flags:execute:)();
  _Block_release(v12);
  (*(void (**)(char *, uint64_t))(v31 + 8))(v8, v6);
  (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v30);
  uint64_t result = swift_release();
  uint64_t v14 = a1[5];
  if (v14)
  {
    aBlock[0] = *(void *)(v14 + 408);
    swift_retain();
    swift_retain();
    sub_10000588C(&qword_10163A500);
    sub_100062734((unint64_t *)&unk_101656730, &qword_10163A500);
    uint64_t v15 = Publisher<>.sink(receiveValue:)();
    swift_release();
    swift_release();
    *(void *)((char *)a1 + OBJC_IVAR____TtC12searchpartyd20BeaconManagerService_messagingDevicesChangedSubscription) = v15;
    swift_release();
    aBlock[0] = *(void *)(a1[35] + OBJC_IVAR____TtC12searchpartyd11BeaconStore_recordDeletedPublisher);
    swift_allocObject();
    swift_weakInit();
    swift_retain();
    sub_10000588C((uint64_t *)&unk_10163BD30);
    sub_100062734(&qword_101656740, (uint64_t *)&unk_10163BD30);
    uint64_t v16 = Publisher<>.sink(receiveValue:)();
    swift_release();
    swift_release();
    *(void *)((char *)a1 + OBJC_IVAR____TtC12searchpartyd20BeaconManagerService_recordDeletedSubscription) = v16;
    swift_release();
    type metadata accessor for Transaction();
    swift_retain();
    static Transaction.asyncTask(name:block:)();
    swift_release();
    uint64_t v17 = *(void *)((char *)a1 + OBJC_IVAR____TtC12searchpartyd20BeaconManagerService_classicPairingSupport);
    aBlock[0] = *(void *)((char *)a1
                          + OBJC_IVAR____TtC12searchpartyd20BeaconManagerService_connectableDevicesChangedSubject);
    sub_10000588C((uint64_t *)&unk_101653EB0);
    sub_100062734((unint64_t *)&unk_101656760, (uint64_t *)&unk_101653EB0);
    aBlock[0] = Publisher.eraseToAnyPublisher()();
    uint64_t v33 = *(void **)(v17 + 48);
    id v18 = v33;
    uint64_t v19 = type metadata accessor for OS_dispatch_queue.SchedulerOptions();
    uint64_t v20 = (uint64_t)v25;
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v19 - 8) + 56))(v25, 1, 1, v19);
    id v21 = v18;
    sub_10000588C((uint64_t *)&unk_101648940);
    sub_10001D4B0(0, (unint64_t *)&qword_1016376E0);
    sub_100062734((unint64_t *)&unk_101656770, (uint64_t *)&unk_101648940);
    sub_10027B124();
    uint64_t v22 = v26;
    Publisher.receive<A>(on:options:)();
    sub_10001DAB4(v20, &qword_10163C6C8);

    sub_100062734(&qword_101656780, (uint64_t *)&unk_101656720);
    swift_retain();
    uint64_t v23 = v28;
    uint64_t v24 = Publisher<>.sink(receiveValue:)();
    swift_release();
    (*(void (**)(char *, uint64_t))(v27 + 8))(v22, v23);
    *(void *)(v17 + 160) = v24;
    swift_release();
    return swift_release();
  }
  else
  {
    __break(1u);
  }
  return result;
}

void sub_100A49558(uint64_t a1)
{
  uint64_t v2 = sub_10000588C(&qword_10163C6C8);
  __chkstk_darwin(v2 - 8);
  uint64_t v128 = (char *)v126 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v130 = sub_10000588C(&qword_101656788);
  uint64_t v129 = *(void *)(v130 - 8);
  __chkstk_darwin(v130);
  unint64_t v127 = (char *)v126 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v133 = sub_10000588C((uint64_t *)&unk_101656790);
  uint64_t v132 = *(void *)(v133 - 8);
  __chkstk_darwin(v133);
  uint64_t v131 = (char *)v126 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v155 = type metadata accessor for XPCServiceDescription();
  uint64_t v151 = *(void (**)(char *, uint64_t))(v155 - 8);
  uint64_t v6 = __chkstk_darwin(v155);
  uint64_t v146 = (char *)v126 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  uint64_t v149 = (char *)v126 - v8;
  uint64_t v148 = type metadata accessor for MachServiceName();
  uint64_t v154 = *(void (**)(char *, uint64_t))(v148 - 8);
  uint64_t v9 = __chkstk_darwin(v148);
  uint64_t v145 = (char *)v126 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = __chkstk_darwin(v9);
  uint64_t v147 = (char *)v126 - v12;
  __chkstk_darwin(v11);
  uint64_t v153 = (char *)v126 - v13;
  uint64_t v152 = sub_10000588C(&qword_101657CA0);
  uint64_t v150 = *(void (***)(char *, uint64_t))(v152 - 8);
  __chkstk_darwin(v152);
  unint64_t v144 = (char *)v126 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = sub_10000588C(&qword_1016567A0);
  uint64_t v16 = __chkstk_darwin(v15 - 8);
  uint64_t v143 = (uint64_t)v126 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v16);
  uint64_t v142 = (uint64_t)v126 - v18;
  uint64_t v19 = sub_10000588C(&qword_10164DBB0);
  __chkstk_darwin(v19 - 8);
  uint64_t v141 = (char *)v126 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v140 = type metadata accessor for URL();
  uint64_t v139 = *(void *)(v140 - 8);
  uint64_t v21 = __chkstk_darwin(v140);
  uint64_t v137 = (uint64_t)v126 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v21);
  uint64_t v138 = (char *)v126 - v23;
  uint64_t v24 = type metadata accessor for BeaconPayloadFileManager();
  __chkstk_darwin(v24 - 8);
  uint64_t v136 = (void *)((char *)v126 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v26 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v135 = *(void *)(v26 - 8);
  __chkstk_darwin(v26);
  uint64_t v28 = (char *)v126 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v134 = type metadata accessor for DispatchQoS();
  uint64_t v29 = *(void *)(v134 - 8);
  __chkstk_darwin(v134);
  uint64_t v31 = (char *)v126 - ((v30 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v32 = type metadata accessor for DispatchQoS.QoSClass();
  uint64_t v33 = *(void *)(v32 - 8);
  __chkstk_darwin(v32);
  uint64_t v35 = (char *)v126 - ((v34 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v36 = sub_10001D4B0(0, (unint64_t *)&qword_1016376E0);
  (*(void (**)(char *, void, uint64_t))(v33 + 104))(v35, enum case for DispatchQoS.QoSClass.default(_:), v32);
  v126[1] = v36;
  uint64_t v37 = (void *)static OS_dispatch_queue.global(qos:)();
  (*(void (**)(char *, uint64_t))(v33 + 8))(v35, v32);
  os_log_type_t v159 = sub_100A4B194;
  uint64_t v160 = 0;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = (id)1107296256;
  uint64_t aBlock[2] = sub_1004B5480;
  uint64_t v158 = (ValueMetadata *)&unk_1015E57D8;
  uint64_t v38 = _Block_copy(aBlock);
  static DispatchQoS.unspecified.getter();
  v156[0] = _swiftEmptyArrayStorage;
  sub_100A5FAC4((unint64_t *)&qword_10163B7E0, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
  sub_10000588C((uint64_t *)&unk_10163F350);
  sub_100062734((unint64_t *)&qword_10163B7F0, (uint64_t *)&unk_10163F350);
  dispatch thunk of SetAlgebra.init<A>(_:)();
  OS_dispatch_queue.async(group:qos:flags:execute:)();
  _Block_release(v38);

  (*(void (**)(char *, uint64_t))(v135 + 8))(v28, v26);
  (*(void (**)(char *, uint64_t))(v29 + 8))(v31, v134);
  uint64_t v39 = *(char **)(a1 + 280);
  sub_100AB65DC();
  sub_100377A38();
  sub_1003AD160();
  uint64_t v40 = v137;
  sub_100F7E414(v137);
  uint64_t v41 = (uint64_t)v138;
  URL.appendingPathComponent(_:isDirectory:)();
  (*(void (**)(uint64_t, uint64_t))(v139 + 8))(v40, v140);
  uint64_t v42 = v136;
  sub_1011E9584(v41, v136);
  sub_1011E99A8((uint64_t)sub_100A4DEC4, 0);
  sub_100A61D88((uint64_t)v42, (uint64_t (*)(void))type metadata accessor for BeaconPayloadFileManager);
  static os_log_type_t.default.getter();
  if (qword_101637250 != -1) {
    swift_once();
  }
  os_log(_:dso:log:_:_:)();
  static DispatchQoS.background.getter();
  uint64_t v43 = swift_allocObject();
  swift_weakInit();
  type metadata accessor for XPCActivity();
  swift_allocObject();
  uint64_t v44 = sub_1009D9B34(0xD000000000000032, (void *)0x8000000101410060, (uint64_t)v31, (uint64_t)sub_100A4B2BC, 0, (uint64_t)sub_100A60F98, v43);
  swift_release();
  *(void *)(a1 + OBJC_IVAR____TtC12searchpartyd20BeaconManagerService_checkInPostInstallXPCActivity) = v44;
  swift_release();
  sub_100A45E44();
  type metadata accessor for DarwinNotificationHelper();
  swift_allocObject();
  *(void *)(a1 + OBJC_IVAR____TtC12searchpartyd20BeaconManagerService_darwinHelper) = DarwinNotificationHelper.init(notificationHandlers:)();
  swift_release();
  static os_log_type_t.default.getter();
  os_log(_:dso:log:_:_:)();
  sub_100A46C38();
  swift_release();
  sub_100EBFC28();
  sub_100AB41E4();
  NSString v45 = *(void **)(a1 + OBJC_IVAR____TtC12searchpartyd20BeaconManagerService_locationFetchService);
  aBlock[0] = *(id *)&v39[OBJC_IVAR____TtC12searchpartyd11BeaconStore_estimatedLocationSubject];
  sub_10000588C(&qword_1016567A8);
  sub_100062734(&qword_1016567B0, &qword_1016567A8);
  aBlock[0] = (id)Publisher.eraseToAnyPublisher()();
  uint64_t v46 = swift_allocObject();
  swift_weakInit();
  uint64_t v47 = swift_allocObject();
  *(void *)(v47 + 16) = sub_100A60FA0;
  *(void *)(v47 + 24) = v46;
  sub_10000588C(&qword_1016567B8);
  sub_100062734(&qword_1016567C0, &qword_1016567B8);
  uint64_t v48 = Publisher<>.sink(receiveValue:)();
  swift_release();
  v45[21] = v48;
  swift_release();
  swift_release();
  uint64_t v49 = type metadata accessor for TaskPriority();
  uint64_t v50 = (uint64_t)v141;
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v49 - 8) + 56))(v141, 1, 1, v49);
  uint64_t v51 = (void *)swift_allocObject();
  v51[2] = 0;
  v51[3] = 0;
  v51[4] = v45;
  swift_retain();
  sub_100128234(v50, (uint64_t)&unk_1016567C8, (uint64_t)v51);
  swift_release();
  sub_10001DAB4(v50, &qword_10164DBB0);
  uint64_t v52 = v45[14];
  v45[14] = &unk_1016567D8;
  v45[15] = a1;
  swift_retain();
  sub_1000A1534(v52);
  id v53 = *(void **)(a1 + 288);
  if (v53)
  {
    id v54 = v53;
    dispatch thunk of UserDefaultsObserver.start()();
  }
  uint64_t v55 = v148;
  id v56 = v153;
  uint64_t v57 = v154;
  if (qword_101636CD8 != -1) {
    swift_once();
  }
  uint64_t v141 = v39;
  uint64_t v58 = type metadata accessor for BeaconManagerService();
  uint64_t v158 = (ValueMetadata *)v58;
  os_log_type_t v159 = (uint64_t (*)())&off_1015E51C0;
  aBlock[0] = (id)a1;
  swift_retain();
  uint64_t v59 = v142;
  sub_1000B5EA4((uint64_t)aBlock, v142);
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)aBlock);
  uint64_t v60 = sub_10000588C((uint64_t *)&unk_1016488F0);
  (*(void (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v60 - 8) + 56))(v59, 0, 1, v60);
  uint64_t v61 = v59;
  uint64_t v62 = v143;
  sub_10001D608(v61, v143, &qword_1016567A0);
  uint64_t v63 = a1 + OBJC_IVAR____TtC12searchpartyd20BeaconManagerService_configSubscription;
  swift_beginAccess();
  sub_1001B001C(v62, v63);
  swift_endAccess();
  uint64_t v158 = (ValueMetadata *)v58;
  os_log_type_t v159 = (uint64_t (*)())&off_1015E51A8;
  aBlock[0] = (id)a1;
  swift_retain();
  uint64_t v64 = v144;
  sub_100497078((uint64_t)aBlock, (uint64_t)v144);
  v150[1](v64, v152);
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)aBlock);
  uint64_t v142 = type metadata accessor for Transaction();
  static Transaction.named<A>(_:with:)();
  sub_100A4F6D8();
  MachServiceName.init(_:)();
  uint64_t v65 = v147;
  uint64_t v66 = (void (**)(char *, uint64_t))*((void *)v57 + 2);
  ((void (*)(char *, char *, uint64_t))v66)(v147, v56, v55);
  sub_100A45D00();
  if (qword_101636EF8 != -1) {
    swift_once();
  }
  uint64_t v67 = (void *)qword_101655C50;
  swift_retain();
  id v68 = v67;
  id v69 = v149;
  XPCServiceDescription.init(name:options:exportedObject:exportedInterface:shouldAccept:interruptionHandler:invalidationHandler:)();
  uint64_t v143 = *(void *)(a1 + 264);
  XPCSessionManager.register(service:)();
  MachServiceName.init(_:)();
  unint64_t v144 = (char *)self;
  id v70 = [v144 interfaceWithProtocol:&OBJC_PROTOCOL___SPSimpleBeaconUpdateClientXPCProtocol];
  uint64_t v152 = (uint64_t)v57 + 16;
  uint64_t v150 = v66;
  ((void (*)(char *, char *, uint64_t))v66)(v145, v65, v55);
  sub_100A45D00();
  unint64_t v71 = (void *)qword_101655C50;
  swift_retain();
  id v72 = v71;
  id v73 = v70;
  id v74 = v146;
  XPCServiceDescription.init(name:options:exportedObject:exportedInterface:remoteObjectInterface:shouldAccept:interruptionHandler:invalidationHandler:)();
  XPCSessionManager.register(service:)();

  uint64_t v75 = v65;
  uint64_t v76 = (void (*)(char *, uint64_t))*((void *)v151 + 1);
  unsigned __int8 v77 = v74;
  uint64_t v78 = v155;
  v76(v77, v155);
  uint64_t v79 = v76;
  uint64_t v151 = v76;
  long long v80 = (void (*)(char *, uint64_t))*((void *)v154 + 1);
  v80(v65, v55);
  uint64_t v154 = v80;
  v79(v69, v78);
  long long v81 = v153;
  v80(v153, v55);
  MachServiceName.init(_:)();
  ((void (*)(char *, char *, uint64_t))v150)(v65, v81, v55);
  sub_100A45D00();
  long long v82 = v144;
  id v83 = [v144 interfaceWithProtocol:&OBJC_PROTOCOL___SPPairingManagerXPCProtocol];
  swift_retain();
  XPCServiceDescription.init(name:options:exportedObject:exportedInterface:shouldAccept:interruptionHandler:invalidationHandler:)();
  XPCSessionManager.register(service:)();
  v151(v69, v155);
  v154(v81, v55);
  sub_100A4E8AC();
  MachServiceName.init(_:)();
  id v84 = [v82 interfaceWithProtocol:&OBJC_PROTOCOL___SPCBPeripheralManagementXPCProtocol];
  ((void (*)(char *, char *, uint64_t))v150)(v75, v81, v55);
  sub_100A45D00();
  id v85 = v84;
  XPCServiceDescription.init(name:options:exportedObject:exportedInterface:shouldAccept:interruptionHandler:invalidationHandler:)();
  XPCSessionManager.register(service:)();

  v151(v69, v155);
  v154(v81, v55);
  sub_1003E2FFC();
  if (!*(void *)(a1 + 40))
  {
    __break(1u);
LABEL_25:
    __break(1u);
    return;
  }
  swift_retain();
  uint64_t v86 = AnyCurrentValuePublisher.publisher.getter();
  swift_release();
  uint64_t v87 = (uint64_t)v141;
  if (qword_101637680 != -1) {
    swift_once();
  }
  swift_retain();
  uint64_t v88 = AnyCurrentValuePublisher.publisher.getter();
  swift_release();
  id v89 = objc_allocWithZone((Class)type metadata accessor for CurrentLocationMonitor());
  id v90 = CurrentLocationMonitor.init(mode:desiredAccuracy:)(1, 0, 1);
  uint64_t v158 = &type metadata for SystemInfo;
  os_log_type_t v159 = (uint64_t (*)())&off_1015FD958;
  sub_10001D010((uint64_t)aBlock, (uint64_t)v156);
  uint64_t v91 = sub_1000BD078((uint64_t)v156, v156[3]);
  __chkstk_darwin(v91);
  (*(void (**)(void))(v92 + 16))();
  swift_retain();
  swift_retain();
  uint64_t v93 = sub_100A5C74C(v86, v88, 6, (uint64_t)v90);
  swift_release();
  swift_release();
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)v156);
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)aBlock);
  swift_release();
  swift_release();

  *(void *)(a1 + 216) = v93;
  swift_retain();
  swift_release();
  uint64_t v94 = *(void *)(a1 + 216);
  if (v94)
  {
    aBlock[0] = *(id *)(v94 + 88);
    sub_10000588C(&qword_1016568A0);
    sub_100062734(&qword_1016568A8, &qword_1016568A0);
    sub_100A611D8();
    uint64_t v95 = v127;
    Publisher<>.removeDuplicates()();
    aBlock[0] = *(id *)(a1 + 48);
    id v96 = aBlock[0];
    uint64_t v97 = type metadata accessor for OS_dispatch_queue.SchedulerOptions();
    uint64_t v98 = (uint64_t)v128;
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v97 - 8) + 56))(v128, 1, 1, v97);
    sub_100062734(&qword_1016568B8, &qword_101656788);
    sub_10027B124();
    id v99 = v96;
    uint64_t v100 = v131;
    uint64_t v101 = v130;
    Publisher.receive<A>(on:options:)();
    sub_10001DAB4(v98, &qword_10163C6C8);

    (*(void (**)(char *, uint64_t))(v129 + 8))(v95, v101);
    swift_allocObject();
    swift_weakInit();
    sub_100062734((unint64_t *)&unk_1016568C0, (uint64_t *)&unk_101656790);
    uint64_t v102 = v133;
    uint64_t v103 = Publisher<>.sink(receiveValue:)();
    swift_release();
    (*(void (**)(char *, uint64_t))(v132 + 8))(v100, v102);
  }
  else
  {
    uint64_t v103 = 0;
  }
  *(void *)(a1 + 232) = v103;
  swift_release();
  uint64_t v104 = qword_101636CB8;
  swift_retain();
  if (v104 != -1) {
    swift_once();
  }
  uint64_t v105 = qword_10170E330;
  type metadata accessor for SeparationStateSyncManager();
  uint64_t v106 = swift_allocObject();
  *(_OWORD *)(v106 + 40) = 0u;
  *(_OWORD *)(v106 + 56) = 0u;
  *(void *)(v106 + 72) = 0;
  uint64_t v107 = v106 + OBJC_IVAR____TtC12searchpartyd26SeparationStateSyncManager_observationStoreSubscription;
  uint64_t v108 = sub_10000588C(&qword_10163A798);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v108 - 8) + 56))(v107, 1, 1, v108);
  *(void *)(v106 + 16) = v87;
  *(void *)(v106 + 24) = v105;
  *(void *)(v106 + 32) = v93;
  *(void *)(a1 + 224) = v106;
  swift_retain();
  swift_retain();
  swift_retain();
  swift_release();
  if (!*(void *)(a1 + 40)) {
    goto LABEL_25;
  }
  swift_retain();
  sub_100533208();
  swift_release();
  sub_1008B6AD4();
  sub_1001AF0BC();
  uint64_t v109 = *(void *)(a1 + 184);
  swift_retain();
  uint64_t v110 = (void *)AnyCurrentValuePublisher.publisher.getter();
  swift_release();
  aBlock[0] = v110;
  swift_allocObject();
  swift_weakInit();
  sub_10000588C(&qword_1016568D0);
  sub_100062734(&qword_1016568D8, &qword_1016568D0);
  uint64_t v111 = Publisher<>.sink(receiveValue:)();
  swift_release();
  swift_release();
  *(void *)(a1 + 192) = v111;
  swift_release();
  uint64_t v112 = *(void *)(a1 + OBJC_IVAR____TtC12searchpartyd20BeaconManagerService_connectableDevicesChangedPublisher);
  uint64_t v113 = swift_allocObject();
  *(void *)(v113 + 16) = v109;
  *(void *)(v113 + 24) = v112;
  swift_retain();
  swift_retain();
  static Transaction.asyncTask(name:block:)();
  swift_release();
  swift_retain();
  uint64_t v114 = CurrentValueSubject.eraseToAnyCurrentValuePublisher()();
  uint64_t v115 = *(void *)(qword_10170F8A0 + 24);
  type metadata accessor for PersistentConnectionObserveriOS();
  swift_allocObject();
  swift_retain();
  uint64_t v116 = sub_100996024(v114, v115);
  swift_release();
  swift_release();
  *(void *)(a1 + 200) = v116;
  swift_release();
  if (*(void *)(a1 + 200))
  {
    swift_retain();
    uint64_t v117 = (void *)AnyCurrentValuePublisher.publisher.getter();
    swift_release();
    aBlock[0] = v117;
    swift_allocObject();
    swift_weakInit();
    sub_10000588C(&qword_1016568E8);
    sub_100062734((unint64_t *)&unk_1016568F0, &qword_1016568E8);
    uint64_t v118 = Publisher<>.sink(receiveValue:)();
    swift_release();
    swift_release();
  }
  else
  {
    uint64_t v118 = 0;
  }
  *(void *)(a1 + 208) = v118;
  swift_release();
  uint64_t v119 = *(void *)(a1 + 200);
  if (v119)
  {
    uint64_t v120 = *(void (**)(uint64_t))(*(void *)v119 + 152);
    uint64_t v121 = swift_retain();
    v120(v121);
    swift_release();
  }
  sub_100A093D8();
  uint64_t v122 = (uint64_t (**)())(v87 + OBJC_IVAR____TtC12searchpartyd11BeaconStore_resetHandler);
  uint64_t v123 = *(void *)(v87 + OBJC_IVAR____TtC12searchpartyd11BeaconStore_resetHandler);
  *uint64_t v122 = sub_100A612E0;
  v122[1] = (uint64_t (*)())a1;
  swift_retain();
  sub_1000A1534(v123);
  uint64_t v124 = (uint64_t (**)(uint64_t))(v87 + OBJC_IVAR____TtC12searchpartyd11BeaconStore_beaconStoreChanged);
  uint64_t v125 = *(void *)(v87 + OBJC_IVAR____TtC12searchpartyd11BeaconStore_beaconStoreChanged);
  *uint64_t v124 = sub_100A612E8;
  v124[1] = (uint64_t (*)(uint64_t))a1;
  swift_retain();
  sub_1000A1534(v125);
  swift_retain();
  sub_100B49D90(v87, a1);
  swift_release();
  swift_release();
  swift_release();
  swift_release();
}

uint64_t sub_100A4B194()
{
  uint64_t v0 = type metadata accessor for Date();
  uint64_t v1 = *(void *)(v0 - 8);
  __chkstk_darwin(v0);
  uint64_t v3 = (char *)&v5 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  static Date.trustedNow.getter((uint64_t)v3);
  (*(void (**)(char *, uint64_t))(v1 + 8))(v3, v0);
  static os_log_type_t.default.getter();
  if (qword_101637250 != -1) {
    swift_once();
  }
  return os_log(_:dso:log:_:_:)();
}

uint64_t sub_100A4B2BC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_10001D608(a1, a2, &qword_1016549D0);
}

uint64_t sub_100A4B2E0(uint64_t a1, uint64_t a2, char a3)
{
  swift_beginAccess();
  uint64_t result = swift_weakLoadStrong();
  if (result)
  {
    Transaction.capture()();
    if (a3 == 3)
    {
      sub_1009D7368();
    }
    else if (a3 == 2)
    {
      sub_10037CC38();
      static os_log_type_t.default.getter();
      if (qword_101637250 != -1) {
        swift_once();
      }
      os_log(_:dso:log:_:_:)();
      sub_1009D7390();
    }
    return swift_release();
  }
  return result;
}

uint64_t sub_100A4B3E8(uint64_t a1, uint64_t a2)
{
  *(void *)(v2 + 16) = a1;
  *(void *)(v2 + 24) = a2;
  return _swift_task_switch(sub_100A4B408, 0, 0);
}

uint64_t sub_100A4B408()
{
  uint64_t v1 = (long long *)v0[2];
  uint64_t v2 = v0[3];
  uint64_t v3 = swift_allocObject();
  v0[4] = v3;
  *(void *)(v3 + 16) = v2;
  long long v4 = v1[2];
  long long v5 = v1[3];
  long long v6 = v1[4];
  *(_OWORD *)(v3 + 9sub_100A2F554("Can't update non-existant safe location with identifier: %s.", 7) = *(long long *)((char *)v1 + 73);
  *(_OWORD *)(v3 + 88) = v6;
  *(_OWORD *)(v3 + 72) = v5;
  *(_OWORD *)(v3 + 56) = v4;
  long long v7 = *v1;
  *(_OWORD *)(v3 + 40) = v1[1];
  *(_OWORD *)(v3 + 24) = v7;
  swift_retain();
  sub_10048250C((uint64_t)v1);
  uint64_t v8 = (void *)swift_task_alloc();
  v0[5] = v8;
  *uint64_t v8 = v0;
  v8[1] = sub_100A4B520;
  return unsafeBlocking<A>(_:)(v8, sub_100A61C44, v3, (char *)&type metadata for () + 8);
}

uint64_t sub_100A4B520()
{
  swift_task_dealloc();
  swift_release();
  return _swift_task_switch(sub_1003D0344, 0, 0);
}

uint64_t sub_100A4B638(unsigned __int8 *a1)
{
  int v1 = *a1;
  swift_beginAccess();
  uint64_t result = swift_weakLoadStrong();
  if (result)
  {
    uint64_t v3 = result;
    int v4 = *(unsigned __int8 *)(result + 248);
    if (v1 == 7)
    {
      if (v4 == 7) {
        return swift_release();
      }
    }
    else if (v1 == 6)
    {
      if (v4 == 6) {
        return swift_release();
      }
    }
    else if (v4 & 0xFE) != 6 && (sub_10071A710(v1, v4))
    {
      return swift_release();
    }
    *(unsigned char *)(v3 + 248) = v1;
    if (qword_101636EE0 != -1) {
      swift_once();
    }
    uint64_t v5 = type metadata accessor for Logger();
    sub_100010324(v5, (uint64_t)qword_10170E7C8);
    long long v6 = Logger.logObject.getter();
    os_log_type_t v7 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v6, v7))
    {
      uint64_t v8 = (uint8_t *)swift_slowAlloc();
      uint64_t v11 = swift_slowAlloc();
      *(_DWORD *)uint64_t v8 = 136315138;
      uint64_t v9 = String.init<A>(describing:)();
      sub_1008FA0F0(v9, v10, &v11);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v6, v7, "Notifying clients of separation monitoring policy change to: %s", v8, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }

    swift_retain();
    dispatch thunk of DarwinNotificationHelper.post(bypassRateLimit:)();
    type metadata accessor for Transaction();
    static Transaction.asyncTask(name:block:)();
    swift_release();
    swift_retain();
    dispatch thunk of DarwinNotificationHelper.post(bypassRateLimit:)();
    static Transaction.asyncTask(name:block:)();
    swift_release();
    return swift_release();
  }
  return result;
}

void sub_100A4B910()
{
  swift_beginAccess();
  if (swift_weakLoadStrong())
  {
    uint64_t v0 = CFNotificationCenterGetDarwinNotifyCenter();
    if (v0)
    {
      int v1 = v0;
      CFStringRef v2 = (const __CFString *)SPMaintenancePolicyChangedNotification;
      static os_log_type_t.default.getter();
      if (qword_101637250 != -1) {
        swift_once();
      }
      os_log(_:dso:log:_:_:)();
      CFNotificationCenterPostNotification(v1, v2, 0, 0, 1u);
      swift_release();
    }
    else
    {
      static os_log_type_t.error.getter();
      if (qword_101637250 != -1) {
        swift_once();
      }
      os_log(_:dso:log:_:_:)();
      swift_release();
    }
  }
}

uint64_t sub_100A4BA84()
{
  swift_beginAccess();
  uint64_t result = swift_weakLoadStrong();
  if (result)
  {
    swift_retain();
    swift_release();
    sub_100AACCCC();
    return swift_release();
  }
  return result;
}

uint64_t sub_100A4BAF0()
{
  if (qword_101637250 != -1) {
    swift_once();
  }
  os_log(_:dso:log:_:_:)();
  type metadata accessor for Transaction();
  return static Transaction.named<A>(_:with:)();
}

uint64_t sub_100A4BBD0(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  long long v6 = (char *)v12 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12[0] = type metadata accessor for DispatchQoS();
  uint64_t v7 = *(void *)(v12[0] - 8);
  __chkstk_darwin(v12[0]);
  uint64_t v9 = (char *)v12 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  static os_log_type_t.default.getter();
  if (qword_101637250 != -1) {
    swift_once();
  }
  os_log(_:dso:log:_:_:)();
  aBlock[4] = sub_100A61B2C;
  void aBlock[5] = a2;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  uint64_t aBlock[2] = sub_1004B5480;
  id aBlock[3] = &unk_1015E5990;
  unint64_t v10 = _Block_copy(aBlock);
  swift_retain();
  static DispatchQoS.unspecified.getter();
  v12[1] = _swiftEmptyArrayStorage;
  sub_100A5FAC4((unint64_t *)&qword_10163B7E0, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
  sub_10000588C((uint64_t *)&unk_10163F350);
  sub_100062734((unint64_t *)&qword_10163B7F0, (uint64_t *)&unk_10163F350);
  dispatch thunk of SetAlgebra.init<A>(_:)();
  OS_dispatch_queue.async(group:qos:flags:execute:)();
  _Block_release(v10);
  (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
  (*(void (**)(char *, void))(v7 + 8))(v9, v12[0]);
  return swift_release();
}

uint64_t sub_100A4BED8()
{
  type metadata accessor for Transaction();
  swift_retain();
  static Transaction.asyncTask(name:block:)();

  return swift_release();
}

uint64_t sub_100A4BF4C()
{
  return static Transaction.named<A>(_:with:)();
}

uint64_t sub_100A4BFC4(uint64_t a1, uint64_t a2)
{
  uint64_t v20 = a1;
  uint64_t v3 = type metadata accessor for DispatchQoS();
  __chkstk_darwin(v3 - 8);
  uint64_t v5 = (char *)&v19 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = sub_10000588C(&qword_10163B9F0);
  __chkstk_darwin(v6 - 8);
  uint64_t v8 = (char *)&v19 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = type metadata accessor for OwnedBeaconRecord();
  uint64_t v10 = *(void *)(v9 - 8);
  __chkstk_darwin(v9);
  uint64_t v12 = (char *)&v19 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  static os_log_type_t.default.getter();
  if (qword_101637250 != -1) {
    swift_once();
  }
  os_log(_:dso:log:_:_:)();
  type metadata accessor for Transaction();
  uint64_t v13 = v21;
  static Transaction.named<A>(_:with:)();
  static Transaction.named<A>(_:with:)();
  uint64_t v21 = v13;
  sub_10037A7A0((uint64_t)v8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48))(v8, 1, v9) == 1)
  {
    sub_10001DAB4((uint64_t)v8, &qword_10163B9F0);
  }
  else
  {
    sub_100A616BC((uint64_t)v8, (uint64_t)v12, (uint64_t (*)(void))type metadata accessor for OwnedBeaconRecord);
    uint64_t v14 = v20;
    swift_retain();
    sub_100A5C938((uint64_t)v12, a2, v14);
    swift_release();
    sub_100A61D88((uint64_t)v12, (uint64_t (*)(void))type metadata accessor for OwnedBeaconRecord);
  }
  static DispatchQoS.background.getter();
  uint64_t v15 = swift_allocObject();
  *(_OWORD *)(v15 + 16) = xmmword_101375030;
  uint64_t v16 = swift_allocObject();
  swift_weakInit();
  type metadata accessor for XPCActivity();
  swift_allocObject();
  uint64_t v17 = sub_1009D9B34(0xD000000000000038, (void *)0x8000000101410170, (uint64_t)v5, (uint64_t)sub_100A61300, v15, (uint64_t)sub_100A61308, v16);
  swift_release();
  swift_release();
  *(void *)(a2 + OBJC_IVAR____TtC12searchpartyd20BeaconManagerService_pruneActivity) = v17;
  swift_release();
  if (*(unsigned char *)(a2 + OBJC_IVAR____TtC12searchpartyd20BeaconManagerService_shouldForceFetch) == 1)
  {
    static os_log_type_t.default.getter();
    os_log(_:dso:log:_:_:)();
    sub_100AB24F0();
    sub_10100AC74();
    swift_release();
  }
  return static Transaction.named<A>(_:with:)();
}

uint64_t sub_100A4C424(uint64_t a1, uint64_t a2)
{
  uint64_t result = sub_100A9E7EC(21);
  if (*(void *)(a2 + 40))
  {
    swift_retain();
    sub_1005242B0();
    swift_release();
    return CurrentValueSubject.send(_:)();
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_100A4C4A4(void *a1)
{
  uint64_t v43 = type metadata accessor for ShareRecord();
  uint64_t v2 = *(void *)(v43 - 8);
  uint64_t v3 = __chkstk_darwin(v43);
  uint64_t v5 = (char *)&v31 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v3);
  uint64_t v7 = (char *)&v31 - v6;
  uint64_t v40 = type metadata accessor for UUID();
  uint64_t v8 = *(void *)(v40 - 8);
  __chkstk_darwin(v40);
  uint64_t v10 = (char *)&v31 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_beginAccess();
  uint64_t result = swift_weakLoadStrong();
  if (result)
  {
    uint64_t v32 = v2;
    uint64_t v44 = result;
    int v39 = static os_log_type_t.debug.getter();
    if (qword_1016372A8 != -1) {
      swift_once();
    }
    uint64_t v38 = qword_10170F000;
    uint64_t v42 = sub_10000588C((uint64_t *)&unk_10163AD00);
    uint64_t v12 = swift_allocObject();
    long long v41 = xmmword_101342130;
    *(_OWORD *)(v12 + 16) = xmmword_101342130;
    uint64_t v13 = a1[4];
    uint64_t v37 = a1[3];
    uint64_t v14 = v37;
    uint64_t v15 = sub_10001CD44(a1, v37);
    uint64_t v16 = *(void *)(v13 + 8);
    uint64_t v35 = *(void (**)(uint64_t, uint64_t))(v16 + 32);
    uint64_t v36 = v15;
    v35(v14, v16);
    uint64_t v17 = UUID.uuidString.getter();
    uint64_t v19 = v18;
    uint64_t v20 = *(void (**)(char *, uint64_t))(v8 + 8);
    uint64_t v33 = v8 + 8;
    uint64_t v34 = v20;
    uint64_t v21 = v40;
    v20(v10, v40);
    *(void *)(v12 + 56) = &type metadata for String;
    unint64_t v22 = sub_10000B4CC();
    *(void *)(v12 + 64) = v22;
    *(void *)(v12 + 32) = v17;
    *(void *)(v12 + 40) = v19;
    os_log(_:dso:log:_:_:)();
    swift_bridgeObjectRelease();
    v35(v37, v16);
    uint64_t v23 = sub_100B6DD88();
    v34(v10, v21);
    uint64_t v24 = v23[2];
    if (v24)
    {
      uint64_t v25 = *(unsigned __int8 *)(v32 + 80);
      uint64_t v40 = (uint64_t)v23;
      uint64_t v26 = (uint64_t)v23 + ((v25 + 32) & ~v25);
      uint64_t v27 = *(void *)(v32 + 72);
      while (1)
      {
        sub_100A61D20(v26, (uint64_t)v7, (uint64_t (*)(void))type metadata accessor for ShareRecord);
        static os_log_type_t.debug.getter();
        uint64_t v28 = swift_allocObject();
        *(_OWORD *)(v28 + 16) = v41;
        sub_100A61D20((uint64_t)v7, (uint64_t)v5, (uint64_t (*)(void))type metadata accessor for ShareRecord);
        uint64_t v29 = String.init<A>(describing:)();
        *(void *)(v28 + 56) = &type metadata for String;
        *(void *)(v28 + 64) = v22;
        *(void *)(v28 + 32) = v29;
        *(void *)(v28 + 40) = v30;
        os_log(_:dso:log:_:_:)();
        uint64_t result = swift_bridgeObjectRelease();
        if (!*(void *)(v44 + 40)) {
          break;
        }
        swift_retain();
        sub_1004E5D28((uint64_t)v7, (uint64_t)SharingCircleWildAdvertisementKey.init(key:), 0);
        swift_release();
        sub_100A61D88((uint64_t)v7, (uint64_t (*)(void))type metadata accessor for ShareRecord);
        v26 += v27;
        if (!--v24) {
          goto LABEL_8;
        }
      }
      __break(1u);
    }
    else
    {
LABEL_8:
      swift_release();
      return swift_bridgeObjectRelease();
    }
  }
  return result;
}

uint64_t sub_100A4C900(uint64_t a1)
{
  v1[5] = a1;
  sub_10000588C(&qword_10163C6C8);
  v1[6] = swift_task_alloc();
  uint64_t v2 = sub_10000588C((uint64_t *)&unk_101656720);
  v1[7] = v2;
  v1[8] = *(void *)(v2 - 8);
  v1[9] = swift_task_alloc();
  return _swift_task_switch(sub_100A4C9F4, 0, 0);
}

uint64_t sub_100A4C9F4()
{
  uint64_t v1 = v0[5];
  uint64_t v2 = *(void *)(v1 + OBJC_IVAR____TtC12searchpartyd20BeaconManagerService_firmwareUpdateService);
  v0[10] = v2;
  v0[2] = *(void *)(v1 + OBJC_IVAR____TtC12searchpartyd20BeaconManagerService_connectableDevicesChangedSubject);
  sub_10000588C((uint64_t *)&unk_101653EB0);
  sub_100062734((unint64_t *)&unk_101656760, (uint64_t *)&unk_101653EB0);
  v0[11] = Publisher.eraseToAnyPublisher()();
  return _swift_task_switch(sub_100A4CACC, v2, 0);
}

uint64_t sub_100A4CACC()
{
  uint64_t v1 = *(void *)(v0 + 80);
  uint64_t v3 = *(void *)(v0 + 64);
  uint64_t v2 = *(void *)(v0 + 72);
  uint64_t v4 = *(void *)(v0 + 48);
  uint64_t v11 = *(void *)(v0 + 56);
  *(void *)(v0 + 24) = *(void *)(v0 + 88);
  uint64_t v5 = *(void **)(v1 + 128);
  *(void *)(v0 + 32) = v5;
  uint64_t v6 = type metadata accessor for OS_dispatch_queue.SchedulerOptions();
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 56))(v4, 1, 1, v6);
  id v7 = v5;
  sub_10000588C((uint64_t *)&unk_101648940);
  sub_10001D4B0(0, (unint64_t *)&qword_1016376E0);
  sub_100062734((unint64_t *)&unk_101656770, (uint64_t *)&unk_101648940);
  sub_10027B124();
  Publisher.receive<A>(on:options:)();
  sub_10001DAB4(v4, &qword_10163C6C8);

  sub_100062734(&qword_101656780, (uint64_t *)&unk_101656720);
  swift_retain();
  uint64_t v8 = Publisher<>.sink(receiveValue:)();
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v2, v11);
  *(void *)(v1 + 160) = v8;
  swift_release();
  swift_release();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v9 = *(uint64_t (**)(void))(v0 + 8);
  return v9();
}

uint64_t sub_100A4CCEC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v3[7] = a2;
  v3[8] = a3;
  v3[6] = a1;
  uint64_t v4 = type metadata accessor for StateCaptureDateType();
  v3[9] = v4;
  v3[10] = *(void *)(v4 - 8);
  v3[11] = swift_task_alloc();
  uint64_t v5 = type metadata accessor for UUID();
  v3[12] = v5;
  v3[13] = *(void *)(v5 - 8);
  v3[14] = swift_task_alloc();
  v3[15] = swift_task_alloc();
  v3[16] = *(void *)(type metadata accessor for KeySyncMetadataDisplay() - 8);
  v3[17] = swift_task_alloc();
  uint64_t v6 = type metadata accessor for StateCaptureHintAPI();
  v3[18] = v6;
  v3[19] = *(void *)(v6 - 8);
  v3[20] = swift_task_alloc();
  v3[21] = swift_task_alloc();
  return _swift_task_switch(sub_100A4CF0C, 0, 0);
}

uint64_t sub_100A4CF0C()
{
  uint64_t v2 = *(void *)(v0 + 160);
  uint64_t v1 = *(void *)(v0 + 168);
  uint64_t v3 = *(void *)(v0 + 144);
  uint64_t v4 = *(void *)(v0 + 152);
  StateCaptureHint.api.getter();
  (*(void (**)(uint64_t, void, uint64_t))(v4 + 104))(v2, enum case for StateCaptureHintAPI.request(_:), v3);
  sub_100A5FAC4((unint64_t *)&unk_1016566F0, (void (*)(uint64_t))&type metadata accessor for StateCaptureHintAPI);
  dispatch thunk of RawRepresentable.rawValue.getter();
  dispatch thunk of RawRepresentable.rawValue.getter();
  int v6 = *(_DWORD *)(v0 + 208);
  int v5 = *(_DWORD *)(v0 + 212);
  id v7 = *(void (**)(uint64_t, uint64_t))(v4 + 8);
  v7(v2, v3);
  v7(v1, v3);
  if (v6 == v5 && (swift_beginAccess(), uint64_t Strong = swift_weakLoadStrong(), (*(void *)(v0 + 176) = Strong) != 0))
  {
    uint64_t v9 = (void *)swift_task_alloc();
    *(void *)(v0 + 184) = v9;
    *uint64_t v9 = v0;
    v9[1] = sub_100A4D1D0;
    return sub_10068AB10();
  }
  else
  {
    uint64_t v11 = *(void *)(v0 + 48);
    uint64_t v12 = type metadata accessor for StateCaptureStateData();
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v12 - 8) + 56))(v11, 1, 1, v12);
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v13 = *(uint64_t (**)(void))(v0 + 8);
    return v13();
  }
}

uint64_t sub_100A4D1D0(uint64_t a1)
{
  uint64_t v3 = *v2;
  *(void *)(v3 + 192) = a1;
  *(void *)(v3 + 200) = v1;
  swift_task_dealloc();
  if (v1)
  {
    uint64_t v4 = sub_100A4DB04;
  }
  else
  {
    swift_release();
    uint64_t v4 = sub_100A4D320;
  }
  return _swift_task_switch(v4, 0, 0);
}

uint64_t sub_100A4D320()
{
  uint64_t v76 = v0;
  uint64_t v1 = v0[24];
  uint64_t v2 = *(void *)(v1 + 16);
  if (v2)
  {
    uint64_t v3 = v0[16];
    uint64_t v4 = v0[13];
    uint64_t v5 = v1 + ((*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80));
    uint64_t v6 = (void (**)(unint64_t, uint64_t, uint64_t))(v4 + 16);
    uint64_t v70 = *(void *)(v3 + 72);
    unint64_t v71 = (*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
    uint64_t v66 = v4;
    uint64_t v67 = v0[25];
    id v68 = v0 + 15;
    id v69 = (void (**)(uint64_t, void))(v4 + 8);
    id v72 = v0 + 14;
    swift_bridgeObjectRetain();
    id v7 = _swiftEmptyDictionarySingleton;
    while (1)
    {
      sub_100A61D20(v5, v0[17], (uint64_t (*)(void))type metadata accessor for KeySyncMetadataDisplay);
      if (v7[2])
      {
        unint64_t v11 = sub_1007240CC(v0[17]);
        uint64_t v12 = *v6;
        if (v13)
        {
          uint64_t v14 = v0[17];
          uint64_t v15 = *(void **)(v7[7] + 8 * v11);
          id v73 = *v6;
          v12(v0[15], v14, v0[12]);
          sub_10000588C(&qword_10163A940);
          uint64_t v16 = swift_allocObject();
          *(_OWORD *)(v16 + 16) = xmmword_101342130;
          sub_100A61D20(v14, v16 + v71, (uint64_t (*)(void))type metadata accessor for KeySyncMetadataDisplay);
          uint64_t v75 = v15;
          swift_bridgeObjectRetain();
          sub_100445770(v16);
          swift_bridgeObjectRetain();
          sub_100A45AB4(&v75);
          if (v67)
          {
            return swift_release();
          }
          uint64_t v17 = *v68;
          swift_bridgeObjectRelease();
          uint64_t v18 = v75;
          int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
          uint64_t v75 = v7;
          unint64_t v21 = sub_1007240CC(v17);
          uint64_t v22 = v7[2];
          BOOL v23 = (v20 & 1) == 0;
          uint64_t v24 = v22 + v23;
          if (__OFADD__(v22, v23)) {
            goto LABEL_51;
          }
          char v25 = v20;
          if (v7[3] >= v24)
          {
            if (isUniquelyReferenced_nonNull_native)
            {
              if ((v20 & 1) == 0) {
                goto LABEL_31;
              }
            }
            else
            {
              sub_100E86944();
              id v7 = v75;
              if ((v25 & 1) == 0) {
                goto LABEL_31;
              }
            }
          }
          else
          {
            uint64_t v26 = *v68;
            sub_100E768A0(v24, isUniquelyReferenced_nonNull_native);
            id v7 = v75;
            unint64_t v27 = sub_1007240CC(v26);
            if ((v25 & 1) != (v28 & 1)) {
              goto LABEL_46;
            }
            unint64_t v21 = v27;
            if ((v25 & 1) == 0)
            {
LABEL_31:
              uint64_t v53 = v0[15];
              uint64_t v54 = v0[12];
              v7[(v21 >> 6) + 8] |= 1 << v21;
              v73(v7[6] + *(void *)(v66 + 72) * v21, v53, v54);
              *(void *)(v7[7] + 8 * v21) = v18;
              uint64_t v55 = v7[2];
              BOOL v50 = __OFADD__(v55, 1);
              uint64_t v56 = v55 + 1;
              if (v50) {
                goto LABEL_52;
              }
              _OWORD v7[2] = v56;
              goto LABEL_33;
            }
          }
          uint64_t v52 = v7[7];
          swift_bridgeObjectRelease();
          *(void *)(v52 + 8 * v21) = v18;
LABEL_33:
          swift_bridgeObjectRelease();
          uint64_t v67 = 0;
          uint64_t v9 = v68;
          goto LABEL_5;
        }
        uint64_t v74 = v5;
        uint64_t v29 = v2;
      }
      else
      {
        uint64_t v74 = v5;
        uint64_t v29 = v2;
        uint64_t v12 = *v6;
      }
      uint64_t v30 = v0[17];
      uint64_t v31 = v0[14];
      uint64_t v32 = v0;
      uint64_t v33 = v0[12];
      uint64_t v34 = v6;
      uint64_t v35 = v12;
      v12(v31, v30, v33);
      sub_10000588C(&qword_10163A940);
      uint64_t v36 = swift_allocObject();
      *(_OWORD *)(v36 + 16) = xmmword_101342130;
      sub_100A61D20(v30, v36 + v71, (uint64_t (*)(void))type metadata accessor for KeySyncMetadataDisplay);
      int v37 = swift_isUniquelyReferenced_nonNull_native();
      uint64_t v75 = v7;
      unint64_t v39 = sub_1007240CC(v31);
      uint64_t v40 = v7[2];
      BOOL v41 = (v38 & 1) == 0;
      uint64_t v42 = v40 + v41;
      if (__OFADD__(v40, v41))
      {
        __break(1u);
LABEL_50:
        __break(1u);
LABEL_51:
        __break(1u);
LABEL_52:
        __break(1u);
      }
      char v43 = v38;
      if (v7[3] >= v42)
      {
        if (v37)
        {
          if ((v38 & 1) == 0) {
            goto LABEL_23;
          }
        }
        else
        {
          sub_100E86944();
          id v7 = v75;
          if ((v43 & 1) == 0) {
            goto LABEL_23;
          }
        }
      }
      else
      {
        uint64_t v44 = *v72;
        sub_100E768A0(v42, v37);
        id v7 = v75;
        unint64_t v45 = sub_1007240CC(v44);
        if ((v43 & 1) != (v46 & 1))
        {
LABEL_46:
          return KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
        }
        unint64_t v39 = v45;
        if ((v43 & 1) == 0)
        {
LABEL_23:
          uint64_t v47 = v32[14];
          uint64_t v48 = v32[12];
          v7[(v39 >> 6) + 8] |= 1 << v39;
          v35(v7[6] + *(void *)(v66 + 72) * v39, v47, v48);
          *(void *)(v7[7] + 8 * v39) = v36;
          uint64_t v49 = v7[2];
          BOOL v50 = __OFADD__(v49, 1);
          uint64_t v51 = v49 + 1;
          if (v50) {
            goto LABEL_50;
          }
          _OWORD v7[2] = v51;
          goto LABEL_4;
        }
      }
      uint64_t v8 = v7[7];
      swift_bridgeObjectRelease();
      *(void *)(v8 + 8 * v39) = v36;
LABEL_4:
      swift_bridgeObjectRelease();
      uint64_t v6 = v34;
      uint64_t v0 = v32;
      uint64_t v2 = v29;
      uint64_t v9 = v72;
      uint64_t v5 = v74;
LABEL_5:
      uint64_t v10 = v0[17];
      (*v69)(*v9, v0[12]);
      sub_100A61D88(v10, (uint64_t (*)(void))type metadata accessor for KeySyncMetadataDisplay);
      v5 += v70;
      if (!--v2)
      {
        swift_bridgeObjectRelease();
        uint64_t v57 = v67;
        goto LABEL_36;
      }
    }
  }
  uint64_t v57 = v0[25];
  id v7 = _swiftEmptyDictionarySingleton;
LABEL_36:
  swift_bridgeObjectRelease();
  uint64_t v58 = sub_100A5A5B4((uint64_t)v7);
  swift_bridgeObjectRelease();
  type metadata accessor for PropertyListEncoder();
  swift_allocObject();
  PropertyListEncoder.init()();
  v0[5] = v58;
  sub_10000588C(&qword_101656700);
  sub_100A60E34();
  dispatch thunk of PropertyListEncoder.encode<A>(_:)();
  if (v57)
  {
    swift_release();
    swift_release();
  }
  else
  {
    uint64_t v61 = v0[10];
    uint64_t v60 = v0[11];
    uint64_t v62 = v0[9];
    swift_release();
    swift_release();
    (*(void (**)(uint64_t, void, uint64_t))(v61 + 104))(v60, enum case for StateCaptureDateType.serialized(_:), v62);
    StateCaptureStateData.init(type:title:data:)();
    uint64_t v63 = v0[6];
    uint64_t v64 = type metadata accessor for StateCaptureStateData();
    (*(void (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v64 - 8) + 56))(v63, 0, 1, v64);
  }
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v59 = (uint64_t (*)(void))v0[1];
  return v59();
}

uint64_t sub_100A4DB04()
{
  swift_release();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_100A4DBE8@<X0>(uint64_t *a1@<X0>, void *a2@<X8>)
{
  uint64_t v5 = (int *)type metadata accessor for KeySyncMetadataDisplay();
  uint64_t v6 = *((void *)v5 - 1);
  uint64_t result = __chkstk_darwin(v5);
  uint64_t v9 = (char *)v30 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = *a1;
  int64_t v11 = *(void *)(*a1 + 16);
  uint64_t v12 = _swiftEmptyArrayStorage;
  if (v11)
  {
    v30[0] = a2;
    v30[1] = v2;
    uint64_t v35 = _swiftEmptyArrayStorage;
    sub_1000B6ED0(0, v11, 0);
    uint64_t v13 = v10 + ((*(unsigned __int8 *)(v6 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80));
    uint64_t v31 = *(void *)(v6 + 72);
    do
    {
      sub_100A61D20(v13, (uint64_t)v9, (uint64_t (*)(void))type metadata accessor for KeySyncMetadataDisplay);
      uint64_t v14 = &v9[v5[7]];
      uint64_t v15 = *((void *)v14 + 1);
      uint64_t v33 = *(void *)v14;
      uint64_t v34 = v15;
      swift_bridgeObjectRetain();
      v16._countAndFlagsBits = 47;
      v16._object = (void *)0xE100000000000000;
      String.append(_:)(v16);
      uint64_t v32 = *(void *)&v9[v5[6]];
      v17._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
      String.append(_:)(v17);
      swift_bridgeObjectRelease();
      v18._countAndFlagsBits = 32;
      v18._object = (void *)0xE100000000000000;
      String.append(_:)(v18);
      uint64_t v19 = (uint64_t *)&v9[v5[5]];
      uint64_t v20 = *v19;
      unint64_t v21 = (void *)v19[1];
      swift_bridgeObjectRetain();
      v22._countAndFlagsBits = v20;
      v22._object = v21;
      String.append(_:)(v22);
      swift_bridgeObjectRelease();
      v23._countAndFlagsBits = 8250;
      v23._object = (void *)0xE200000000000000;
      String.append(_:)(v23);
      type metadata accessor for Date();
      sub_100A5FAC4((unint64_t *)&qword_101638DA0, (void (*)(uint64_t))&type metadata accessor for Date);
      v24._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
      String.append(_:)(v24);
      swift_bridgeObjectRelease();
      uint64_t v26 = v33;
      uint64_t v25 = v34;
      sub_100A61D88((uint64_t)v9, (uint64_t (*)(void))type metadata accessor for KeySyncMetadataDisplay);
      uint64_t v12 = v35;
      uint64_t result = swift_isUniquelyReferenced_nonNull_native();
      if ((result & 1) == 0)
      {
        uint64_t result = sub_1000B6ED0(0, v12[2] + 1, 1);
        uint64_t v12 = v35;
      }
      unint64_t v28 = v12[2];
      unint64_t v27 = v12[3];
      if (v28 >= v27 >> 1)
      {
        uint64_t result = sub_1000B6ED0(v27 > 1, v28 + 1, 1);
        uint64_t v12 = v35;
      }
      void v12[2] = v28 + 1;
      uint64_t v29 = &v12[2 * v28];
      v29[4] = v26;
      v29[5] = v25;
      v13 += v31;
      --v11;
    }
    while (v11);
    a2 = (void *)v30[0];
  }
  *a2 = v12;
  return result;
}

void sub_100A4DEC4(uint64_t a1)
{
  if (qword_101636EF0 != -1) {
    swift_once();
  }
  uint64_t v2 = type metadata accessor for Logger();
  sub_100010324(v2, (uint64_t)qword_10170E840);
  swift_errorRetain();
  swift_errorRetain();
  oslog = Logger.logObject.getter();
  os_log_type_t v3 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(oslog, v3))
  {
    uint64_t v4 = (uint8_t *)swift_slowAlloc();
    uint64_t v5 = (void *)swift_slowAlloc();
    *(_DWORD *)uint64_t v4 = 138412290;
    if (a1)
    {
      swift_errorRetain();
      uint64_t v6 = _swift_stdlib_bridgeErrorToNSError();
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
    }
    else
    {
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      uint64_t v6 = 0;
    }
    *uint64_t v5 = v6;
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl((void *)&_mh_execute_header, oslog, v3, "Did delete all beacon payload cache files with result: %@.", v4, 0xCu);
    sub_10000588C((uint64_t *)&unk_101638EA0);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    swift_errorRelease();
    swift_errorRelease();
  }
}

uint64_t sub_100A4E0F8(uint64_t a1, uint64_t a2)
{
  uint64_t v27 = type metadata accessor for SharedBeaconRecord(0);
  uint64_t v5 = *(void *)(v27 - 8);
  uint64_t v6 = __chkstk_darwin(v27);
  uint64_t v26 = (uint64_t)&v20 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  uint64_t v9 = (char *)&v20 - v8;
  uint64_t v24 = *(void *)(a2 + 280);
  uint64_t result = (uint64_t)sub_100AD0D68();
  uint64_t v11 = result;
  uint64_t v12 = _swiftEmptyArrayStorage;
  unint64_t v28 = _swiftEmptyArrayStorage;
  uint64_t v25 = *(void *)(result + 16);
  if (v25)
  {
    uint64_t v21 = a2;
    uint64_t v22 = a1;
    uint64_t v23 = v2;
    unint64_t v13 = 0;
    uint64_t v14 = _swiftEmptyArrayStorage;
    while (v13 < *(void *)(v11 + 16))
    {
      unint64_t v15 = (*(unsigned __int8 *)(v5 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
      uint64_t v16 = *(void *)(v5 + 72);
      sub_100A61D20(v11 + v15 + v16 * v13, (uint64_t)v9, type metadata accessor for SharedBeaconRecord);
      if (v9[*(int *)(v27 + 64)] == 1)
      {
        sub_100A616BC((uint64_t)v9, v26, type metadata accessor for SharedBeaconRecord);
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          sub_1000B7404(0, v14[2] + 1, 1);
        }
        uint64_t v14 = v28;
        unint64_t v18 = v28[2];
        unint64_t v17 = v28[3];
        if (v18 >= v17 >> 1)
        {
          sub_1000B7404(v17 > 1, v18 + 1, 1);
          uint64_t v14 = v28;
        }
        void v14[2] = v18 + 1;
        uint64_t result = sub_100A616BC(v26, (uint64_t)v14 + v15 + v18 * v16, type metadata accessor for SharedBeaconRecord);
      }
      else
      {
        uint64_t result = sub_100A61D88((uint64_t)v9, type metadata accessor for SharedBeaconRecord);
      }
      if (v25 == ++v13)
      {
        uint64_t v12 = v28;
        a1 = v22;
        a2 = v21;
        goto LABEL_13;
      }
    }
    __break(1u);
  }
  else
  {
LABEL_13:
    swift_bridgeObjectRelease();
    uint64_t v19 = sub_100AB5A60((uint64_t)v12);
    uint64_t result = swift_release();
    if (*(void *)(a2 + 40))
    {
      swift_retain();
      swift_retain();
      sub_100520C60((uint64_t)v19, (uint64_t)sub_100A5FFE4, a1);
      swift_bridgeObjectRelease();
      swift_release();
      return swift_release();
    }
  }
  __break(1u);
  return result;
}

void sub_100A4E3D0(uint64_t a1)
{
  Transaction.capture()();
  if (a1)
  {
    swift_errorRetain();
    static os_log_type_t.error.getter();
    if (qword_101637260 != -1) {
      swift_once();
    }
    sub_10000588C((uint64_t *)&unk_10163AD00);
    uint64_t v2 = swift_allocObject();
    *(_OWORD *)(v2 + 16) = xmmword_101342130;
    swift_errorRetain();
    sub_10000588C(&qword_101638D40);
    uint64_t v3 = String.init<A>(describing:)();
    uint64_t v5 = v4;
    *(void *)(v2 + 56) = &type metadata for String;
    *(void *)(v2 + 64) = sub_10000B4CC();
    *(void *)(v2 + 32) = v3;
    *(void *)(v2 + 40) = v5;
    os_log(_:dso:log:_:_:)();
    swift_bridgeObjectRelease();
    swift_errorRelease();
  }
}

uint64_t sub_100A4E500()
{
  sub_1006CAA84();
  if (NSXPCConnection.hasEntitlement<A>(_:)() & 1) != 0 || (NSXPCConnection.hasEntitlement<A>(_:)()) {
    char v0 = 1;
  }
  else {
    char v0 = NSXPCConnection.hasEntitlement<A>(_:)();
  }
  return v0 & 1;
}

id sub_100A4E594()
{
  id result = sub_100A4E5B4();
  qword_101655C50 = (uint64_t)result;
  return result;
}

id sub_100A4E5B4()
{
  id v0 = [self interfaceWithProtocol:&OBJC_PROTOCOL___SPBeaconManagerXPCProtocol];
  sub_100A59298();
  uint64_t v1 = swift_allocObject();
  *(_OWORD *)(v1 + 16) = xmmword_101347BA0;
  uint64_t v2 = sub_10001D4B0(0, (unint64_t *)&qword_10163BC80);
  *(void *)(v1 + 32) = v2;
  uint64_t v3 = sub_10001D4B0(0, &qword_10163EAD0);
  *(void *)(v1 + 40) = v3;
  NSXPCInterface.setClasses(_:for:argumentIndex:ofReply:)();
  swift_bridgeObjectRelease();
  sub_100A59298();
  uint64_t v4 = swift_allocObject();
  *(_OWORD *)(v4 + 16) = xmmword_101347BA0;
  *(void *)(v4 + 32) = v2;
  *(void *)(v4 + 40) = v3;
  NSXPCInterface.setClasses(_:for:argumentIndex:ofReply:)();
  swift_bridgeObjectRelease();
  sub_100A59298();
  uint64_t v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_101342130;
  *(void *)(v5 + 32) = v2;
  NSXPCInterface.setClasses(_:for:argumentIndex:ofReply:)();
  swift_bridgeObjectRelease();
  sub_100A59298();
  uint64_t v6 = swift_allocObject();
  *(_OWORD *)(v6 + 16) = xmmword_101342130;
  *(void *)(v6 + 32) = sub_10001D4B0(0, &qword_101656990);
  NSXPCInterface.setClasses(_:for:argumentIndex:ofReply:)();
  swift_bridgeObjectRelease();
  sub_100A59298();
  uint64_t v7 = swift_allocObject();
  *(_OWORD *)(v7 + 16) = xmmword_10134BF90;
  *(void *)(v7 + 32) = v2;
  *(void *)(v7 + 40) = v3;
  *(void *)(v7 + 48) = sub_10001D4B0(0, (unint64_t *)&qword_101656998);
  *(void *)(v7 + 56) = sub_10001D4B0(0, (unint64_t *)&unk_1016569A0);
  NSXPCInterface.setClasses(_:for:argumentIndex:ofReply:)();
  swift_bridgeObjectRelease();
  sub_100A59298();
  uint64_t v8 = swift_allocObject();
  *(_OWORD *)(v8 + 16) = xmmword_101342130;
  *(void *)(v8 + 32) = sub_10001D4B0(0, (unint64_t *)&qword_101640E40);
  NSXPCInterface.setClasses(_:for:argumentIndex:ofReply:)();
  swift_bridgeObjectRelease();
  return v0;
}

uint64_t sub_100A4E8AC()
{
  uint64_t v1 = type metadata accessor for XPCServiceDescription();
  uint64_t v68 = *(void *)(v1 - 8);
  uint64_t v69 = v1;
  uint64_t v2 = __chkstk_darwin(v1);
  uint64_t v67 = (char *)v54 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = __chkstk_darwin(v2);
  uint64_t v64 = (char *)v54 - v5;
  uint64_t v6 = __chkstk_darwin(v4);
  uint64_t v70 = (char *)v54 - v7;
  __chkstk_darwin(v6);
  uint64_t v9 = (char *)v54 - v8;
  uint64_t v10 = type metadata accessor for MachServiceName();
  uint64_t v11 = *(void *)(v10 - 8);
  uint64_t v12 = __chkstk_darwin(v10);
  uint64_t v63 = (char *)v54 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = __chkstk_darwin(v12);
  uint64_t v60 = (char *)v54 - v15;
  uint64_t v16 = __chkstk_darwin(v14);
  unint64_t v18 = (char *)v54 - v17;
  uint64_t v19 = __chkstk_darwin(v16);
  uint64_t v21 = (char *)v54 - v20;
  __chkstk_darwin(v19);
  uint64_t v23 = (char *)v54 - v22;
  MachServiceName.init(_:)();
  uint64_t v65 = v11;
  uint64_t v66 = v23;
  uint64_t v25 = *(void (**)(char *, char *, uint64_t))(v11 + 16);
  uint64_t v24 = v11 + 16;
  uint64_t v26 = v25;
  v25(v21, v23, v10);
  sub_100A45D00();
  if (qword_101636F00 != -1) {
    swift_once();
  }
  id v27 = (id)qword_101655C58;
  swift_retain();
  XPCServiceDescription.init(name:options:exportedObject:exportedInterface:shouldAccept:interruptionHandler:invalidationHandler:)();
  uint64_t v62 = v9;
  uint64_t v28 = *(void *)(v0 + 264);
  XPCSessionManager.register(service:)();
  MachServiceName.init(_:)();
  id v55 = self;
  id v29 = [v55 interfaceWithProtocol:&OBJC_PROTOCOL___SPLocationFetchClientXPCProtocol];
  uint64_t v30 = v21;
  uint64_t v61 = v21;
  id v31 = v29;
  uint64_t v32 = v26;
  v26(v18, v30, v10);
  uint64_t v56 = v10;
  uint64_t v57 = v24;
  sub_100A45D00();
  uint64_t v33 = (void *)qword_101655C58;
  swift_retain();
  id v34 = v33;
  id v58 = v31;
  XPCServiceDescription.init(name:options:exportedObject:exportedInterface:remoteObjectInterface:shouldAccept:interruptionHandler:invalidationHandler:)();
  v54[1] = v28;
  XPCSessionManager.register(service:)();
  uint64_t v35 = v18;
  uint64_t v59 = v18;
  MachServiceName.init(_:)();
  uint64_t v36 = v60;
  v32(v60, v35, v10);
  int v37 = v32;
  sub_100A45D00();
  id v38 = v55;
  id v39 = [v55 interfaceWithProtocol:&OBJC_PROTOCOL___SPBeaconScanningXPCProtocol];
  id v40 = [v38 interfaceWithProtocol:&OBJC_PROTOCOL___SPBeaconScanningXPCClientProtocol];
  swift_retain();
  BOOL v41 = v64;
  XPCServiceDescription.init(name:options:exportedObject:exportedInterface:remoteObjectInterface:shouldAccept:interruptionHandler:invalidationHandler:)();
  XPCSessionManager.register(service:)();
  MachServiceName.init(_:)();
  id v42 = [v38 interfaceWithProtocol:&OBJC_PROTOCOL___SPDelegatedLocationClientXPCProtocol];
  char v43 = v36;
  uint64_t v44 = v36;
  uint64_t v45 = v56;
  v37(v63, v43, v56);
  sub_100A45D00();
  char v46 = (void *)qword_101655C58;
  swift_retain();
  id v47 = v46;
  id v48 = v42;
  uint64_t v49 = v67;
  XPCServiceDescription.init(name:options:exportedObject:exportedInterface:remoteObjectInterface:shouldAccept:interruptionHandler:invalidationHandler:)();
  XPCSessionManager.register(service:)();

  uint64_t v50 = v69;
  uint64_t v51 = *(void (**)(char *, uint64_t))(v68 + 8);
  v51(v49, v69);
  uint64_t v52 = *(void (**)(char *, uint64_t))(v65 + 8);
  v52(v44, v45);
  v51(v41, v50);
  v52(v59, v45);
  v51(v70, v50);
  v52(v61, v45);
  v51(v62, v50);
  return ((uint64_t (*)(char *, uint64_t))v52)(v66, v45);
}

id sub_100A4EF5C()
{
  id result = sub_100A4EF7C();
  qword_101655C58 = (uint64_t)result;
  return result;
}

id sub_100A4EF7C()
{
  id v0 = [self interfaceWithProtocol:&OBJC_PROTOCOL___SPOwnerSessionXPCProtocol];
  sub_100A59298();
  uint64_t v1 = swift_allocObject();
  *(_OWORD *)(v1 + 16) = xmmword_101347BA0;
  uint64_t v2 = sub_10001D4B0(0, &qword_10163EAD0);
  *(void *)(v1 + 32) = v2;
  uint64_t v3 = sub_10001D4B0(0, (unint64_t *)&qword_10163BC80);
  *(void *)(v1 + 40) = v3;
  NSXPCInterface.setClasses(_:for:argumentIndex:ofReply:)();
  swift_bridgeObjectRelease();
  sub_100A59298();
  uint64_t v4 = swift_allocObject();
  *(_OWORD *)(v4 + 16) = xmmword_101347BA0;
  uint64_t v5 = sub_10001D4B0(0, (unint64_t *)&unk_10163BC70);
  *(void *)(v4 + 32) = v5;
  *(void *)(v4 + 40) = sub_10001D4B0(0, &qword_1016552A0);
  NSXPCInterface.setClasses(_:for:argumentIndex:ofReply:)();
  swift_bridgeObjectRelease();
  sub_100A59298();
  uint64_t v6 = swift_allocObject();
  *(_OWORD *)(v6 + 16) = xmmword_101347BA0;
  *(void *)(v6 + 32) = v2;
  *(void *)(v6 + 40) = v3;
  NSXPCInterface.setClasses(_:for:argumentIndex:ofReply:)();
  swift_bridgeObjectRelease();
  sub_100A59298();
  uint64_t v7 = swift_allocObject();
  *(_OWORD *)(v7 + 16) = xmmword_101347BA0;
  *(void *)(v7 + 32) = v2;
  *(void *)(v7 + 40) = v3;
  NSXPCInterface.setClasses(_:for:argumentIndex:ofReply:)();
  swift_bridgeObjectRelease();
  sub_100A59298();
  uint64_t v8 = swift_allocObject();
  *(_OWORD *)(v8 + 16) = xmmword_10134BF90;
  *(void *)(v8 + 32) = v5;
  uint64_t v9 = sub_10001D4B0(0, (unint64_t *)&unk_10164DC20);
  *(void *)(v8 + 40) = v9;
  uint64_t v10 = sub_10001D4B0(0, &qword_101656690);
  *(void *)(v8 + 48) = v10;
  uint64_t v11 = sub_10001D4B0(0, &qword_101656698);
  *(void *)(v8 + 56) = v11;
  NSXPCInterface.setClasses(_:for:argumentIndex:ofReply:)();
  swift_bridgeObjectRelease();
  sub_100A59298();
  uint64_t v12 = swift_allocObject();
  *(_OWORD *)(v12 + 16) = xmmword_10134BF90;
  *(void *)(v12 + 32) = v2;
  *(void *)(v12 + 40) = v9;
  *(void *)(v12 + 48) = v10;
  *(void *)(v12 + 56) = v11;
  NSXPCInterface.setClasses(_:for:argumentIndex:ofReply:)();
  swift_bridgeObjectRelease();
  sub_100A59298();
  uint64_t v13 = swift_allocObject();
  *(_OWORD *)(v13 + 16) = xmmword_10134BF90;
  *(void *)(v13 + 32) = v2;
  *(void *)(v13 + 40) = v9;
  *(void *)(v13 + 48) = v10;
  *(void *)(v13 + 56) = v11;
  NSXPCInterface.setClasses(_:for:argumentIndex:ofReply:)();
  swift_bridgeObjectRelease();
  sub_100A59298();
  uint64_t v14 = swift_allocObject();
  *(_OWORD *)(v14 + 16) = xmmword_10134BF90;
  *(void *)(v14 + 32) = v2;
  *(void *)(v14 + 40) = v9;
  *(void *)(v14 + 48) = v10;
  *(void *)(v14 + 56) = v11;
  NSXPCInterface.setClasses(_:for:argumentIndex:ofReply:)();
  swift_bridgeObjectRelease();
  sub_100A59298();
  uint64_t v15 = swift_allocObject();
  *(_OWORD *)(v15 + 16) = xmmword_101347BA0;
  *(void *)(v15 + 32) = v2;
  *(void *)(v15 + 40) = sub_10001D4B0(0, (unint64_t *)&unk_1016566A0);
  NSXPCInterface.setClasses(_:for:argumentIndex:ofReply:)();
  swift_bridgeObjectRelease();
  sub_100A59298();
  uint64_t v16 = swift_allocObject();
  *(_OWORD *)(v16 + 16) = xmmword_101342130;
  *(void *)(v16 + 32) = v3;
  NSXPCInterface.setClasses(_:for:argumentIndex:ofReply:)();
  swift_bridgeObjectRelease();
  sub_100A59298();
  uint64_t v17 = swift_allocObject();
  *(_OWORD *)(v17 + 16) = xmmword_101342130;
  *(void *)(v17 + 32) = sub_10001D4B0(0, (unint64_t *)&qword_101638DB0);
  NSXPCInterface.setClasses(_:for:argumentIndex:ofReply:)();
  swift_bridgeObjectRelease();
  sub_100A59298();
  uint64_t v18 = swift_allocObject();
  *(_OWORD *)(v18 + 16) = xmmword_101347500;
  *(void *)(v18 + 32) = v2;
  *(void *)(v18 + 40) = v3;
  *(void *)(v18 + 48) = sub_10001D4B0(0, &qword_1016566B0);
  NSXPCInterface.setClasses(_:for:argumentIndex:ofReply:)();
  swift_bridgeObjectRelease();
  sub_100A59298();
  uint64_t v19 = swift_allocObject();
  *(_OWORD *)(v19 + 16) = xmmword_101347BA0;
  *(void *)(v19 + 32) = v2;
  *(void *)(v19 + 40) = v3;
  NSXPCInterface.setClasses(_:for:argumentIndex:ofReply:)();
  swift_bridgeObjectRelease();
  sub_100A59298();
  uint64_t v20 = swift_allocObject();
  *(_OWORD *)(v20 + 16) = xmmword_101347BA0;
  *(void *)(v20 + 32) = v2;
  *(void *)(v20 + 40) = v3;
  NSXPCInterface.setClasses(_:for:argumentIndex:ofReply:)();
  swift_bridgeObjectRelease();
  sub_100A59298();
  uint64_t v21 = swift_allocObject();
  *(_OWORD *)(v21 + 16) = xmmword_101347BA0;
  *(void *)(v21 + 32) = v2;
  *(void *)(v21 + 40) = v3;
  NSXPCInterface.setClasses(_:for:argumentIndex:ofReply:)();
  swift_bridgeObjectRelease();
  sub_100A59298();
  uint64_t v22 = swift_allocObject();
  *(_OWORD *)(v22 + 16) = xmmword_101347BA0;
  *(void *)(v22 + 32) = v2;
  *(void *)(v22 + 40) = v3;
  NSXPCInterface.setClasses(_:for:argumentIndex:ofReply:)();
  swift_bridgeObjectRelease();
  sub_100A59298();
  uint64_t v23 = swift_allocObject();
  *(_OWORD *)(v23 + 16) = xmmword_101347BA0;
  *(void *)(v23 + 32) = v5;
  *(void *)(v23 + 40) = v3;
  NSXPCInterface.setClasses(_:for:argumentIndex:ofReply:)();
  swift_bridgeObjectRelease();
  sub_10001D4B0(0, (unint64_t *)&unk_1016566B8);
  [v0 setClass:swift_getObjCClassFromMetadata() forSelector:"publishSeparationEventForBeacons:eventType:region:completion:" argumentIndex:1 ofReply:0];
  sub_10001D4B0(0, (unint64_t *)&unk_101653D70);
  [v0 setClass:swift_getObjCClassFromMetadata() forSelector:"updateSafeLocation:completion:" argumentIndex:0 ofReply:0];
  return v0;
}

uint64_t sub_100A4F6D8()
{
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for DispatchQoS();
  __chkstk_darwin(v2 - 8);
  uint64_t v4 = (char *)&v14 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = type metadata accessor for DispatchPredicate();
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v8 = (uint64_t *)((char *)&v14 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v9 = *(void **)(v1 + 48);
  *uint64_t v8 = v9;
  (*(void (**)(void *, void, uint64_t))(v6 + 104))(v8, enum case for DispatchPredicate.onQueue(_:), v5);
  id v10 = v9;
  LOBYTE(v9) = _dispatchPreconditionTest(_:)();
  uint64_t result = (*(uint64_t (**)(void *, uint64_t))(v6 + 8))(v8, v5);
  if (v9)
  {
    static DispatchQoS.background.getter();
    uint64_t v12 = swift_allocObject();
    swift_weakInit();
    type metadata accessor for XPCActivity();
    swift_allocObject();
    uint64_t v13 = sub_1009D9B34(0xD00000000000002ELL, (void *)0x800000010140FE50, (uint64_t)v4, (uint64_t)sub_100A4F8E0, 0, (uint64_t)sub_100A60CD4, v12);
    swift_release();
    *(void *)(v1 + OBJC_IVAR____TtC12searchpartyd20BeaconManagerService_afterFirstUnlockActivity) = v13;
    return swift_release();
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_100A4F8E0@<X0>(void *a1@<X8>)
{
  uint64_t v2 = type metadata accessor for SystemInfo.DeviceLockState();
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t v4 = __chkstk_darwin(v2);
  uint64_t v6 = (char *)v15 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v4);
  uint64_t v8 = (char *)v15 - v7;
  static SystemInfo.lockState.getter();
  (*(void (**)(char *, void, uint64_t))(v3 + 104))(v6, enum case for SystemInfo.DeviceLockState.beforeFirstUnlock(_:), v2);
  sub_100A5FAC4((unint64_t *)&unk_101655610, (void (*)(uint64_t))&type metadata accessor for SystemInfo.DeviceLockState);
  dispatch thunk of RawRepresentable.rawValue.getter();
  dispatch thunk of RawRepresentable.rawValue.getter();
  uint64_t v10 = v15[0];
  uint64_t v9 = v15[1];
  uint64_t v11 = *(void (**)(char *, uint64_t))(v3 + 8);
  v11(v6, v2);
  uint64_t result = ((uint64_t (*)(char *, uint64_t))v11)(v8, v2);
  BOOL v13 = v9 == v10;
  *a1 = 2 * (v9 != v10);
  a1[1] = v13;
  if (v9 == v10) {
    uint64_t v14 = 576;
  }
  else {
    uint64_t v14 = 0;
  }
  a1[2] = v13;
  a1[3] = v13;
  a1[4] = v14;
  return result;
}

uint64_t sub_100A4FA9C(uint64_t a1, uint64_t a2, char a3)
{
  swift_beginAccess();
  uint64_t result = swift_weakLoadStrong();
  if (result)
  {
    Transaction.capture()();
    if (a3 == 3)
    {
      sub_1009D7368();
    }
    else if (a3 == 2)
    {
      static os_log_type_t.default.getter();
      if (qword_101637250 != -1) {
        swift_once();
      }
      os_log(_:dso:log:_:_:)();
      sub_100377A38();
      type metadata accessor for Transaction();
      static Transaction.named<A>(_:with:)();
      sub_1009D7390();
      if (qword_101637680 != -1) {
        swift_once();
      }
      sub_10131B7B8();
    }
    return swift_release();
  }
  return result;
}

uint64_t sub_100A4FC28@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X8>)
{
  sub_10001D608(a1, (uint64_t)v20, &qword_1016549D0);
  uint64_t v8 = v20[0];
  uint64_t v9 = v20[1];
  uint64_t v10 = v20[2];
  uint64_t v11 = v20[3];
  uint64_t v12 = v20[4];
  uint64_t result = sub_10001D608(a1, (uint64_t)v21, &qword_1016549D0);
  BOOL v14 = v21[0] == 2;
  if (v21[0] == 2) {
    uint64_t v15 = 257;
  }
  else {
    uint64_t v15 = v8;
  }
  if (v21[0] == 2) {
    uint64_t v16 = a2;
  }
  else {
    uint64_t v16 = v9;
  }
  if (v21[0] == 2) {
    uint64_t v17 = a2;
  }
  else {
    uint64_t v17 = v10;
  }
  if (v21[0] == 2) {
    uint64_t v18 = a3;
  }
  else {
    uint64_t v18 = v11;
  }
  *a4 = v15;
  a4[1] = v16;
  if (v14) {
    uint64_t v19 = 576;
  }
  else {
    uint64_t v19 = v12;
  }
  a4[2] = v17;
  a4[3] = v18;
  a4[4] = v19;
  return result;
}

uint64_t sub_100A4FCDC(uint64_t a1, uint64_t a2, char a3)
{
  swift_beginAccess();
  uint64_t result = swift_weakLoadStrong();
  if (result)
  {
    Transaction.capture()();
    if (a3 == 3)
    {
      sub_1009D7368();
    }
    else if (a3 == 2)
    {
      static os_log_type_t.default.getter();
      if (qword_1016372B0 != -1) {
        swift_once();
      }
      os_log(_:dso:log:_:_:)();
      swift_retain();
      sub_100AAD054();
      swift_release();
      swift_retain();
      sub_100AAD3F8();
      swift_release();
      sub_1009D7390();
    }
    return swift_release();
  }
  return result;
}

uint64_t sub_100A4FE0C(uint64_t a1)
{
  *(void *)(v1 + 120) = a1;
  return _swift_task_switch(sub_100A4FE2C, 0, 0);
}

uint64_t sub_100A4FE2C()
{
  uint64_t v1 = qword_1016375E8;
  swift_retain();
  if (v1 != -1) {
    swift_once();
  }
  swift_beginAccess();
  uint64_t result = sub_10001D074((uint64_t)&xmmword_10166E8F0, v0 + 56, (uint64_t *)&unk_101638D30);
  if (*(void *)(v0 + 80))
  {
    sub_10001CEB0((long long *)(v0 + 56), v0 + 16);
    swift_release();
    sub_10001CD44((void *)(v0 + 16), *(void *)(v0 + 40));
    uint64_t v4 = (uint64_t (__cdecl *)())((char *)&dword_101639240 + dword_101639240);
    uint64_t v3 = (void *)swift_task_alloc();
    *(void *)(v0 + 128) = v3;
    *uint64_t v3 = v0;
    v3[1] = sub_100A4FF7C;
    return v4();
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_100A4FF7C(uint64_t a1)
{
  *(void *)(*(void *)v1 + 136) = a1;
  swift_task_dealloc();
  return _swift_task_switch(sub_100A5007C, 0, 0);
}

uint64_t sub_100A5007C()
{
  uint64_t v1 = v0 + 16;
  if (*(void *)(v0 + 136))
  {
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v1);
    sub_1002D6644();
    swift_release();
  }
  else
  {
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v1);
    if (qword_101636A50 != -1) {
      swift_once();
    }
    uint64_t v2 = type metadata accessor for Logger();
    sub_100010324(v2, (uint64_t)qword_10170DD90);
    uint64_t v3 = Logger.logObject.getter();
    os_log_type_t v4 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v3, v4))
    {
      uint64_t v5 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v5 = 0;
      _os_log_impl((void *)&_mh_execute_header, v3, v4, "Missing NotifyWhenFoundManager.", v5, 2u);
      swift_slowDealloc();
    }
  }
  uint64_t v6 = *(uint64_t (**)(void))(v0 + 8);
  return v6();
}

uint64_t sub_100A501B4(uint64_t a1, uint64_t a2)
{
  return sub_100A54868(a1, a2, (uint64_t)&unk_1015E5A40, (uint64_t)sub_100A61DEC, (uint64_t)&unk_1015E5A58);
}

uint64_t sub_100A501F0()
{
  uint64_t v37 = type metadata accessor for StableIdentifier();
  __chkstk_darwin(v37);
  uint64_t v2 = (char *)&v33 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v36 = type metadata accessor for OwnedBeaconRecord();
  uint64_t v3 = *(void *)(v36 - 8);
  uint64_t v4 = __chkstk_darwin(v36);
  uint64_t v35 = (uint64_t)&v33 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v4);
  uint64_t v7 = (char *)&v33 - v6;
  uint64_t v8 = type metadata accessor for DispatchPredicate();
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  uint64_t v11 = (uint64_t *)((char *)&v33 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v33 = v0;
  uint64_t v12 = *(void **)(v0 + 56);
  *uint64_t v11 = v12;
  (*(void (**)(void *, void, uint64_t))(v9 + 104))(v11, enum case for DispatchPredicate.onQueue(_:), v8);
  id v13 = v12;
  char v14 = _dispatchPreconditionTest(_:)();
  (*(void (**)(void *, uint64_t))(v9 + 8))(v11, v8);
  if ((v14 & 1) == 0) {
    goto LABEL_22;
  }
  static os_log_type_t.default.getter();
  if (qword_101637280 != -1) {
    goto LABEL_23;
  }
  while (1)
  {
    uint64_t v15 = _swiftEmptyArrayStorage;
    os_log(_:dso:log:_:_:)();
    uint64_t v16 = sub_100ACF5FC();
    id v38 = _swiftEmptyArrayStorage;
    uint64_t v17 = *((void *)v16 + 2);
    if (!v17) {
      break;
    }
    unint64_t v18 = 0;
    uint64_t v19 = _swiftEmptyArrayStorage;
    id v34 = v2;
    while (v18 < *((void *)v16 + 2))
    {
      unint64_t v20 = (*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
      uint64_t v21 = *(void *)(v3 + 72);
      sub_100A61D20((uint64_t)&v16[v20 + v21 * v18], (uint64_t)v7, (uint64_t (*)(void))type metadata accessor for OwnedBeaconRecord);
      sub_100A61D20((uint64_t)&v7[*(int *)(v36 + 24)], (uint64_t)v2, (uint64_t (*)(void))type metadata accessor for StableIdentifier);
      int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
      sub_100A61D88((uint64_t)v2, (uint64_t (*)(void))type metadata accessor for StableIdentifier);
      if (EnumCaseMultiPayload == 4)
      {
        sub_100A61D88((uint64_t)v7, (uint64_t (*)(void))type metadata accessor for OwnedBeaconRecord);
      }
      else
      {
        uint64_t v23 = v3;
        uint64_t v24 = v17;
        sub_100A616BC((uint64_t)v7, v35, (uint64_t (*)(void))type metadata accessor for OwnedBeaconRecord);
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          sub_1000B74D8(0, v19[2] + 1, 1);
        }
        uint64_t v19 = v38;
        unint64_t v26 = v38[2];
        unint64_t v25 = v38[3];
        if (v26 >= v25 >> 1)
        {
          sub_1000B74D8(v25 > 1, v26 + 1, 1);
          uint64_t v19 = v38;
        }
        v19[2] = v26 + 1;
        sub_100A616BC(v35, (uint64_t)v19 + v20 + v26 * v21, (uint64_t (*)(void))type metadata accessor for OwnedBeaconRecord);
        uint64_t v17 = v24;
        uint64_t v3 = v23;
        uint64_t v2 = v34;
      }
      if (v17 == ++v18)
      {
        uint64_t v15 = v38;
        goto LABEL_15;
      }
    }
    __break(1u);
LABEL_22:
    __break(1u);
LABEL_23:
    swift_once();
  }
LABEL_15:
  swift_bridgeObjectRelease();
  uint64_t v27 = v15[2];
  if (!v27) {
    return swift_release();
  }
  uint64_t v28 = (char *)v15 + ((*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80));
  uint64_t result = swift_retain();
  uint64_t v30 = 0;
  uint64_t v31 = v33;
  while (*(void *)(v31 + 40))
  {
    uint64_t v32 = (uint64_t)&v28[*(void *)(v3 + 72) * v30++];
    swift_retain();
    sub_1004E59EC(v32);
    uint64_t result = swift_release();
    if (v27 == v30) {
      return swift_release_n();
    }
  }
  __break(1u);
  return result;
}

uint64_t sub_100A50698()
{
  if (qword_101636EE0 != -1) {
    swift_once();
  }
  uint64_t v0 = type metadata accessor for Logger();
  sub_100010324(v0, (uint64_t)qword_10170E7C8);
  uint64_t v1 = Logger.logObject.getter();
  os_log_type_t v2 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v1, v2))
  {
    uint64_t v3 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v3 = 0;
    _os_log_impl((void *)&_mh_execute_header, v1, v2, "Received RTLocationsOfInterestDidChange notification, scheduling safe lcoation update.", v3, 2u);
    swift_slowDealloc();
  }

  uint64_t v4 = type metadata accessor for Transaction();
  __chkstk_darwin(v4);
  return static Transaction.named<A>(_:with:)();
}

uint64_t sub_100A507F4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  *(void *)(v4 + 16) = a4;
  sub_10000588C(&qword_10163B9F0);
  *(void *)(v4 + 24) = swift_task_alloc();
  return _swift_task_switch(sub_100A50888, 0, 0);
}

uint64_t sub_100A50888()
{
  uint64_t v1 = *(void *)(v0 + 24);
  uint64_t v2 = type metadata accessor for OwnedBeaconRecord();
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v2 - 8) + 56))(v1, 1, 1, v2);
  uint64_t v3 = (void *)swift_task_alloc();
  *(void *)(v0 + 32) = v3;
  *uint64_t v3 = v0;
  v3[1] = sub_100A50960;
  uint64_t v4 = *(void *)(v0 + 24);
  return sub_100A5D098(v4);
}

uint64_t sub_100A50960()
{
  uint64_t v2 = *(void *)(*(void *)v1 + 24);
  *(void *)(*(void *)v1 + 40) = v0;
  swift_task_dealloc();
  sub_10001DAB4(v2, &qword_10163B9F0);
  if (v0) {
    uint64_t v3 = sub_100A50B04;
  }
  else {
    uint64_t v3 = sub_100A50A98;
  }
  return _swift_task_switch(v3, 0, 0);
}

uint64_t sub_100A50A98()
{
  dispatch_group_leave(*(dispatch_group_t *)(v0 + 16));
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_100A50B04()
{
  dispatch_group_leave(*(dispatch_group_t *)(v0 + 16));
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

void sub_100A50B70(uint64_t *a1, uint64_t a2, void **a3, uint64_t a4)
{
  uint64_t v36 = type metadata accessor for StableIdentifier();
  __chkstk_darwin(v36);
  uint64_t v35 = (uint64_t)&v32 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v37 = type metadata accessor for OwnedBeaconRecord();
  uint64_t v8 = __chkstk_darwin(v37);
  uint64_t v10 = (char *)&v32 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8);
  uint64_t v12 = (char *)&v32 - v11;
  uint64_t v14 = (uint64_t)sub_100A59150(a1);
  unint64_t v16 = v15;
  if (!v16)
  {
    uint64_t v14 = 0x6E616843206F4E3CLL;
    unint64_t v16 = 0xEE003E6761546567;
  }
  if (qword_101636EF0 != -1) {
    swift_once();
  }
  uint64_t v17 = type metadata accessor for Logger();
  sub_100010324(v17, (uint64_t)qword_10170E840);
  id v38 = a1;
  sub_100A61D20((uint64_t)a1, (uint64_t)v12, (uint64_t (*)(void))type metadata accessor for OwnedBeaconRecord);
  swift_bridgeObjectRetain();
  unint64_t v18 = Logger.logObject.getter();
  os_log_type_t v19 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v18, v19))
  {
    uint64_t v20 = swift_slowAlloc();
    uint64_t v21 = swift_slowAlloc();
    uint64_t v34 = a4;
    v40[0] = v21;
    *(_DWORD *)uint64_t v20 = 136315394;
    uint64_t v33 = a3;
    swift_bridgeObjectRetain();
    uint64_t v39 = sub_1008FA0F0(v14, v16, v40);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    *(_WORD *)(v20 + 12) = 2080;
    sub_100A61D20((uint64_t)v12, (uint64_t)v10, (uint64_t (*)(void))type metadata accessor for OwnedBeaconRecord);
    uint64_t v22 = v37;
    uint64_t v23 = String.init<A>(describing:)();
    uint64_t v39 = sub_1008FA0F0(v23, v24, v40);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    a3 = v33;
    swift_bridgeObjectRelease();
    sub_100A61D88((uint64_t)v12, (uint64_t (*)(void))type metadata accessor for OwnedBeaconRecord);
    _os_log_impl((void *)&_mh_execute_header, v18, v19, "Successfully updated local beacon [tag: %s]: %s ", (uint8_t *)v20, 0x16u);
    swift_arrayDestroy();
    a4 = v34;
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    swift_bridgeObjectRelease_n();
    sub_100A61D88((uint64_t)v12, (uint64_t (*)(void))type metadata accessor for OwnedBeaconRecord);

    uint64_t v22 = v37;
  }
  swift_beginAccess();
  uint64_t Strong = swift_weakLoadStrong();
  uint64_t v26 = (uint64_t)v38;
  if (Strong)
  {
    uint64_t v27 = Strong;
    uint64_t v28 = sub_100B6DD88();
    if (v28[2]
      && (uint64_t v29 = v35,
          sub_100A61D20(v26 + *(int *)(v22 + 24), v35, (uint64_t (*)(void))type metadata accessor for StableIdentifier), int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(), sub_100A61D88(v29, (uint64_t (*)(void))type metadata accessor for StableIdentifier), !EnumCaseMultiPayload))
    {
      uint64_t v31 = *(void *)(v27 + 40);
      if (v31)
      {
        swift_retain();
        swift_retain();
        sub_100547144((uint64_t)v28, v26, v31, a3, a4);
        swift_release();
        swift_bridgeObjectRelease();
        swift_release();
        swift_release();
      }
      else
      {
        __break(1u);
        __break(1u);
      }
    }
    else
    {
      ((void (*)(void))a3)();
      swift_release();
      swift_bridgeObjectRelease();
    }
  }
}

uint64_t sub_100A5102C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, void (*a6)(char *), uint64_t a7, void (*a8)(void))
{
  uint64_t v47 = a7;
  id v48 = a8;
  uint64_t v45 = a2;
  char v46 = a6;
  uint64_t v43 = a4;
  uint64_t v44 = a5;
  uint64_t v41 = a3;
  uint64_t v9 = sub_10000588C(&qword_10163B9E0);
  __chkstk_darwin(v9 - 8);
  uint64_t v11 = (char *)&v39 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = type metadata accessor for BeaconNamingRecord();
  uint64_t v13 = *(void *)(v12 - 8);
  __chkstk_darwin(v12);
  uint64_t v42 = (uint64_t)&v39 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = type metadata accessor for OwnedBeaconRecord();
  uint64_t v40 = *(void *)(v15 - 8);
  uint64_t v16 = *(void *)(v40 + 64);
  uint64_t v17 = __chkstk_darwin(v15 - 8);
  unint64_t v18 = (char *)&v39 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v17);
  uint64_t v20 = (char *)&v39 - v19;
  uint64_t v21 = sub_10000588C((uint64_t *)&unk_101656900);
  __chkstk_darwin(v21);
  uint64_t v23 = (uint64_t *)((char *)&v39 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0));
  sub_10001D074(a1, (uint64_t)v23, (uint64_t *)&unk_101656900);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v24 = *v23;
    if (qword_101636EF0 != -1) {
      swift_once();
    }
    uint64_t v25 = type metadata accessor for Logger();
    sub_100010324(v25, (uint64_t)qword_10170E840);
    swift_errorRetain();
    swift_errorRetain();
    uint64_t v26 = Logger.logObject.getter();
    os_log_type_t v27 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v26, v27))
    {
      uint64_t v28 = (uint8_t *)swift_slowAlloc();
      uint64_t v29 = swift_slowAlloc();
      uint64_t v49 = v24;
      uint64_t v50 = v29;
      *(_DWORD *)uint64_t v28 = 136315138;
      swift_errorRetain();
      sub_10000588C(&qword_101638D40);
      uint64_t v30 = String.init<A>(describing:)();
      uint64_t v49 = sub_1008FA0F0(v30, v31, &v50);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      swift_errorRelease();
      swift_errorRelease();
      _os_log_impl((void *)&_mh_execute_header, v26, v27, "Failed to update local beacon: %s", v28, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      swift_errorRelease();
      swift_errorRelease();
    }

    v48();
    return swift_errorRelease();
  }
  else
  {
    sub_100A616BC((uint64_t)v23, (uint64_t)v20, (uint64_t (*)(void))type metadata accessor for OwnedBeaconRecord);
    sub_10001D074(v45, (uint64_t)v11, &qword_10163B9E0);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v13 + 48))(v11, 1, v12) == 1)
    {
      sub_10001DAB4((uint64_t)v11, &qword_10163B9E0);
      v46(v20);
    }
    else
    {
      uint64_t v33 = v42;
      sub_100A616BC((uint64_t)v11, v42, (uint64_t (*)(void))type metadata accessor for BeaconNamingRecord);
      uint64_t v34 = *(void *)(v41 + 280);
      sub_100A61D20((uint64_t)v20, (uint64_t)v18, (uint64_t (*)(void))type metadata accessor for OwnedBeaconRecord);
      unint64_t v35 = (*(unsigned __int8 *)(v40 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v40 + 80);
      uint64_t v36 = swift_allocObject();
      uint64_t v37 = v47;
      *(void *)(v36 + 16) = v46;
      *(void *)(v36 + 24) = v37;
      sub_100A616BC((uint64_t)v18, v36 + v35, (uint64_t (*)(void))type metadata accessor for OwnedBeaconRecord);
      uint64_t v38 = v44;
      swift_bridgeObjectRetain_n();
      swift_retain();
      sub_100B4A2D8(v33, 0, (void (*)(uint64_t (*)()))sub_100A61AA8, (void (*)(uint64_t (*)()))v36, v34, v43, v38);
      swift_release();
      swift_bridgeObjectRelease_n();
      sub_100A61D88(v33, (uint64_t (*)(void))type metadata accessor for BeaconNamingRecord);
    }
    return sub_100A61D88((uint64_t)v20, (uint64_t (*)(void))type metadata accessor for OwnedBeaconRecord);
  }
}

uint64_t sub_100A515A8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = (void *)(a1 + *(int *)(type metadata accessor for BeaconNamingRecord() + 32));
  swift_bridgeObjectRetain();
  uint64_t result = swift_bridgeObjectRelease();
  *uint64_t v5 = a2;
  v5[1] = a3;
  return result;
}

uint64_t sub_100A51600(uint64_t a1, uint64_t (*a2)(uint64_t))
{
  if (a1)
  {
    swift_errorRetain();
    static os_log_type_t.error.getter();
    if (qword_101637250 != -1) {
      swift_once();
    }
    sub_10000588C((uint64_t *)&unk_10163AD00);
    uint64_t v3 = swift_allocObject();
    *(_OWORD *)(v3 + 16) = xmmword_101342130;
    swift_errorRetain();
    sub_10000588C(&qword_101638D40);
    uint64_t v4 = String.init<A>(describing:)();
    uint64_t v6 = v5;
    *(void *)(v3 + 56) = &type metadata for String;
    *(void *)(v3 + 64) = sub_10000B4CC();
    *(void *)(v3 + 32) = v4;
    *(void *)(v3 + 40) = v6;
    os_log(_:dso:log:_:_:)();
    swift_bridgeObjectRelease();
    a1 = swift_errorRelease();
  }
  return a2(a1);
}

uint64_t sub_100A5173C(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = sub_10000588C(&qword_10164DBB0);
  __chkstk_darwin(v4 - 8);
  uint64_t v33 = (char *)&v30 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v31 = type metadata accessor for OwnedBeaconRecord();
  uint64_t v6 = *(void *)(v31 - 8);
  __chkstk_darwin(v31);
  uint64_t v30 = (uint64_t)&v30 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = sub_10000588C(&qword_10163B9F0);
  uint64_t v32 = *(void *)(v8 - 8);
  uint64_t v9 = *(void *)(v32 + 64);
  uint64_t v10 = __chkstk_darwin(v8 - 8);
  uint64_t v11 = (char *)&v30 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v10);
  uint64_t v13 = (char *)&v30 - v12;
  uint64_t v14 = type metadata accessor for DispatchPredicate();
  uint64_t v15 = *(void *)(v14 - 8);
  __chkstk_darwin(v14);
  uint64_t v17 = (uint64_t *)((char *)&v30 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0));
  unint64_t v18 = *(void **)(v2 + 56);
  *uint64_t v17 = v18;
  (*(void (**)(void *, void, uint64_t))(v15 + 104))(v17, enum case for DispatchPredicate.onQueue(_:), v14);
  id v19 = v18;
  LOBYTE(v18) = _dispatchPreconditionTest(_:)();
  uint64_t result = (*(uint64_t (**)(void *, uint64_t))(v15 + 8))(v17, v14);
  if (v18)
  {
    uint64_t v21 = dispatch_group_create();
    sub_10001D074(a1, (uint64_t)v13, &qword_10163B9F0);
    type metadata accessor for BeaconKeyManager(0);
    OSAllocatedUnfairLock.callAsFunction<A>(_:)();
    uint64_t v22 = v34;
    type metadata accessor for LocalBeaconingManager();
    swift_allocObject();
    *(void *)(v2 + 32) = sub_100FBA728((uint64_t)v13, v22);
    swift_retain();
    swift_release();
    uint64_t v23 = a1;
    sub_10001D074(a1, (uint64_t)v11, &qword_10163B9F0);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v6 + 48))(v11, 1, v31) == 1)
    {
      sub_10001DAB4((uint64_t)v11, &qword_10163B9F0);
    }
    else
    {
      uint64_t v24 = v30;
      sub_100A616BC((uint64_t)&v30 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0), v30, (uint64_t (*)(void))type metadata accessor for OwnedBeaconRecord);
      sub_100A51E64(v24);
      sub_100A61D88(v24, (uint64_t (*)(void))type metadata accessor for OwnedBeaconRecord);
    }
    dispatch_group_enter(v21);
    uint64_t v25 = type metadata accessor for TaskPriority();
    uint64_t v26 = (uint64_t)v33;
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v25 - 8) + 56))(v33, 1, 1, v25);
    sub_10001D074(v23, (uint64_t)v13, &qword_10163B9F0);
    unint64_t v27 = (*(unsigned __int8 *)(v32 + 80) + 48) & ~(unint64_t)*(unsigned __int8 *)(v32 + 80);
    uint64_t v28 = (void *)swift_allocObject();
    v28[2] = 0;
    uint64_t v28[3] = 0;
    v28[4] = v21;
    v28[5] = v2;
    sub_10001D608((uint64_t)v13, (uint64_t)v28 + v27, &qword_10163B9F0);
    uint64_t v29 = v21;
    swift_retain();
    sub_100885EBC(v26, (uint64_t)&unk_101656610, (uint64_t)v28);
    swift_release();
    OS_dispatch_group.wait()();

    return swift_release();
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_100A51BF0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  *(void *)(v6 + 16) = a4;
  uint64_t v8 = (void *)swift_task_alloc();
  *(void *)(v6 + 24) = v8;
  *uint64_t v8 = v6;
  v8[1] = sub_100A51C88;
  return sub_100A5D098(a6);
}

uint64_t sub_100A51C88()
{
  *(void *)(*(void *)v1 + 32) = v0;
  swift_task_dealloc();
  if (v0) {
    uint64_t v2 = sub_100A51E00;
  }
  else {
    uint64_t v2 = sub_100A51D9C;
  }
  return _swift_task_switch(v2, 0, 0);
}

uint64_t sub_100A51D9C()
{
  dispatch_group_leave(*(dispatch_group_t *)(v0 + 16));
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_100A51E00()
{
  dispatch_group_leave(*(dispatch_group_t *)(v0 + 16));
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_100A51E64(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v63 = a1;
  uint64_t v3 = sub_10000588C(&qword_101642998);
  __chkstk_darwin(v3 - 8);
  uint64_t v5 = (char *)&v60 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = type metadata accessor for OfflineFindingInfo();
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  uint64_t v62 = (uint64_t)&v60 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = sub_10000588C(&qword_101656600);
  uint64_t v10 = __chkstk_darwin(v9);
  uint64_t v12 = (char *)&v60 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v10);
  uint64_t v64 = (char *)&v60 - v13;
  uint64_t v14 = type metadata accessor for DispatchPredicate();
  uint64_t v15 = *(void *)(v14 - 8);
  __chkstk_darwin(v14);
  uint64_t v17 = (uint64_t *)((char *)&v60 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0));
  if (qword_1016371D8 != -1) {
    swift_once();
  }
  v66[0] = (id)0x7365547265646E75;
  v66[1] = (id)0xE900000000000074;
  SynchronousCache.cachedValue<A>(key:computeBlock:)();
  uint64_t result = swift_bridgeObjectRelease();
  if ((v65 & 1) == 0)
  {
    id v19 = *(void **)(v1 + 56);
    *uint64_t v17 = v19;
    (*(void (**)(void *, void, uint64_t))(v15 + 104))(v17, enum case for DispatchPredicate.onQueue(_:), v14);
    id v20 = v19;
    LOBYTE(v19) = _dispatchPreconditionTest(_:)();
    uint64_t v22 = *(uint64_t (**)(void *, uint64_t))(v15 + 8);
    uint64_t v21 = (unsigned char *)(v15 + 8);
    uint64_t result = v22(v17, v14);
    if (v19)
    {
      uint64_t v23 = OBJC_IVAR____TtC12searchpartyd20BeaconManagerService_nvramAlreadyChecked;
      if (*(unsigned char *)(v2 + OBJC_IVAR____TtC12searchpartyd20BeaconManagerService_nvramAlreadyChecked)) {
        return result;
      }
      *(unsigned char *)(v2 + OBJC_IVAR____TtC12searchpartyd20BeaconManagerService_nvramAlreadyChecked) = 1;
      uint64_t v21 = v64;
      sub_10104D4C0(v64);
      sub_10001D074((uint64_t)v21, (uint64_t)v12, &qword_101656600);
      if (swift_getEnumCaseMultiPayload() != 1)
      {
        sub_10001DAB4((uint64_t)v21, &qword_101656600);
        uint64_t v28 = (uint64_t)v12;
        return sub_10001DAB4(v28, &qword_101656600);
      }
      sub_10104DC20();
      *(unsigned char *)(v2 + v23) = 0;
      sub_10037E2BC(v63, (uint64_t)v5);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v7 + 48))(v5, 1, v6) != 1)
      {
        sub_100A616BC((uint64_t)v5, v62, (uint64_t (*)(void))type metadata accessor for OfflineFindingInfo);
        sub_100BFE804();
        if (qword_101636BE0 != -1) {
          swift_once();
        }
        uint64_t v29 = type metadata accessor for Logger();
        uint64_t v30 = sub_100010324(v29, (uint64_t)qword_10170E0E8);
        swift_bridgeObjectRetain_n();
        uint64_t v63 = v30;
        uint64_t v31 = Logger.logObject.getter();
        os_log_type_t v32 = static os_log_type_t.debug.getter();
        if (os_log_type_enabled(v31, v32))
        {
          uint64_t v33 = (uint8_t *)swift_slowAlloc();
          v66[0] = (id)swift_slowAlloc();
          *(_DWORD *)uint64_t v33 = 136315138;
          uint64_t v61 = v33 + 4;
          swift_bridgeObjectRetain();
          uint64_t v34 = Dictionary.description.getter();
          unint64_t v36 = v35;
          swift_bridgeObjectRelease();
          uint64_t v65 = sub_1008FA0F0(v34, v36, (uint64_t *)v66);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease_n();
          swift_bridgeObjectRelease();
          _os_log_impl((void *)&_mh_execute_header, v31, v32, "offineFindingInfo: %s", v33, 0xCu);
          swift_arrayDestroy();
          swift_slowDealloc();
          swift_slowDealloc();
        }
        else
        {

          swift_bridgeObjectRelease_n();
        }
        swift_bridgeObjectRetain_n();
        uint64_t v37 = Logger.logObject.getter();
        os_log_type_t v38 = static os_log_type_t.debug.getter();
        if (os_log_type_enabled(v37, v38))
        {
          uint64_t v39 = (uint8_t *)swift_slowAlloc();
          v66[0] = (id)swift_slowAlloc();
          *(_DWORD *)uint64_t v39 = 136315138;
          uint64_t v61 = v39 + 4;
          swift_bridgeObjectRetain();
          uint64_t v40 = Dictionary.description.getter();
          unint64_t v42 = v41;
          swift_bridgeObjectRelease();
          uint64_t v65 = sub_1008FA0F0(v40, v42, (uint64_t *)v66);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease_n();
          swift_bridgeObjectRelease();
          _os_log_impl((void *)&_mh_execute_header, v37, v38, "dict: %s", v39, 0xCu);
          swift_arrayDestroy();
          swift_slowDealloc();
          swift_slowDealloc();
        }
        else
        {

          swift_bridgeObjectRelease_n();
        }
        uint64_t v43 = v64;
        uint64_t v44 = self;
        Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
        v66[0] = 0;
        id v46 = [v44 dataWithPropertyList:isa format:200 options:0 error:v66];

        id v47 = v66[0];
        if (v46)
        {
          swift_bridgeObjectRelease();
          uint64_t v48 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
          unint64_t v50 = v49;

          sub_10104E030(v48, v50);
          sub_10001CFB8(v48, v50);
        }
        else
        {
          uint64_t v51 = v47;
          _convertNSErrorToError(_:)();

          swift_willThrow();
          swift_errorRetain();
          swift_bridgeObjectRetain();
          swift_errorRetain();
          uint64_t v52 = Logger.logObject.getter();
          os_log_type_t v53 = static os_log_type_t.error.getter();
          if (os_log_type_enabled(v52, v53))
          {
            uint64_t v54 = swift_slowAlloc();
            v66[0] = (id)swift_slowAlloc();
            *(_DWORD *)uint64_t v54 = 136315394;
            swift_bridgeObjectRetain();
            uint64_t v64 = (char *)&type metadata for Any + 8;
            uint64_t v55 = Dictionary.description.getter();
            unint64_t v57 = v56;
            swift_bridgeObjectRelease();
            uint64_t v65 = sub_1008FA0F0(v55, v57, (uint64_t *)v66);
            UnsafeMutableRawBufferPointer.copyMemory(from:)();
            swift_bridgeObjectRelease_n();
            swift_bridgeObjectRelease();
            *(_WORD *)(v54 + 12) = 2080;
            swift_getErrorValue();
            uint64_t v58 = Error.localizedDescription.getter();
            uint64_t v65 = sub_1008FA0F0(v58, v59, (uint64_t *)v66);
            UnsafeMutableRawBufferPointer.copyMemory(from:)();
            swift_bridgeObjectRelease();
            swift_errorRelease();
            swift_errorRelease();
            _os_log_impl((void *)&_mh_execute_header, v52, v53, "Error converting offlineFindingInfo to data: %s error: %s", (uint8_t *)v54, 0x16u);
            swift_arrayDestroy();
            swift_slowDealloc();
            swift_slowDealloc();
          }
          else
          {

            swift_errorRelease();
            swift_errorRelease();
            swift_bridgeObjectRelease_n();
          }
          swift_errorRelease();
        }
        sub_100A61D88(v62, (uint64_t (*)(void))type metadata accessor for OfflineFindingInfo);
        uint64_t v28 = (uint64_t)v43;
        return sub_10001DAB4(v28, &qword_101656600);
      }
      sub_10001DAB4((uint64_t)v5, &qword_101642998);
      if (qword_101636BE0 == -1)
      {
LABEL_9:
        uint64_t v24 = type metadata accessor for Logger();
        sub_100010324(v24, (uint64_t)qword_10170E0E8);
        uint64_t v25 = Logger.logObject.getter();
        os_log_type_t v26 = static os_log_type_t.error.getter();
        if (os_log_type_enabled(v25, v26))
        {
          unint64_t v27 = (uint8_t *)swift_slowAlloc();
          *(_WORD *)unint64_t v27 = 0;
          _os_log_impl((void *)&_mh_execute_header, v25, v26, "offineFindingInfo retured nil", v27, 2u);
          swift_slowDealloc();
        }

        uint64_t v28 = (uint64_t)v21;
        return sub_10001DAB4(v28, &qword_101656600);
      }
    }
    else
    {
      __break(1u);
    }
    swift_once();
    goto LABEL_9;
  }
  return result;
}

void sub_100A528E8(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  uint64_t v7 = sub_10000588C((uint64_t *)&unk_1016565A0);
  uint64_t v8 = *(void *)(v7 - 8);
  uint64_t v9 = *(void *)(v8 + 64);
  __chkstk_darwin(v7);
  XPCSession.proxy.getter();
  uint64_t v10 = v17;
  if (v17)
  {
    if (a4 >> 60 == 15) {
      Class isa = 0;
    }
    else {
      Class isa = Data._bridgeToObjectiveC()().super.isa;
    }
    (*(void (**)(char *, uint64_t, uint64_t))(v8 + 16))((char *)&aBlock[-1] - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0), a1, v7);
    unint64_t v12 = (*(unsigned __int8 *)(v8 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80);
    uint64_t v13 = swift_allocObject();
    *(void *)(v13 + 16) = a2;
    (*(void (**)(unint64_t, char *, uint64_t))(v8 + 32))(v13 + v12, (char *)&aBlock[-1] - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0), v7);
    aBlock[4] = sub_100A5FF6C;
    void aBlock[5] = v13;
    aBlock[0] = _NSConcreteStackBlock;
    aBlock[1] = 1107296256;
    uint64_t aBlock[2] = sub_100769474;
    id aBlock[3] = &unk_1015E5468;
    uint64_t v14 = _Block_copy(aBlock);
    swift_retain();
    swift_release();
    [v10 pushLocalBeaconInfo:isa completion:v14];
    swift_unknownObjectRelease();
    _Block_release(v14);
  }
}

uint64_t sub_100A52AF4(uint64_t a1)
{
  if (a1)
  {
    swift_errorRetain();
    if (qword_101636EF0 != -1) {
      swift_once();
    }
    uint64_t v1 = type metadata accessor for Logger();
    sub_100010324(v1, (uint64_t)qword_10170E840);
    swift_errorRetain();
    uint64_t v2 = Logger.logObject.getter();
    os_log_type_t v3 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v2, v3))
    {
      uint64_t v4 = (uint8_t *)swift_slowAlloc();
      uint64_t v5 = (void *)swift_slowAlloc();
      *(_DWORD *)uint64_t v4 = 138543362;
      uint64_t v7 = _convertErrorToNSError(_:)();
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *uint64_t v5 = v7;
      swift_errorRelease();
      _os_log_impl((void *)&_mh_execute_header, v2, v3, "Error from pushLocalBeaconInfo: %{public}@", v4, 0xCu);
      sub_10000588C((uint64_t *)&unk_101638EA0);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      swift_errorRelease();
    }

    sub_10000588C((uint64_t *)&unk_1016565A0);
    return CheckedContinuation.resume(throwing:)();
  }
  else
  {
    sub_10000588C((uint64_t *)&unk_1016565A0);
    return CheckedContinuation.resume(returning:)();
  }
}

void sub_100A52CD0()
{
  static os_log_type_t.default.getter();
  if (qword_101637250 != -1) {
    swift_once();
  }
  sub_10000588C((uint64_t *)&unk_10163AD00);
  uint64_t v0 = swift_allocObject();
  *(_OWORD *)(v0 + 16) = xmmword_101342130;
  type metadata accessor for OwnedBeaconRecord();
  uint64_t v1 = UUID.uuidString.getter();
  uint64_t v3 = v2;
  *(void *)(v0 + 56) = &type metadata for String;
  *(void *)(v0 + 64) = sub_10000B4CC();
  *(void *)(v0 + 32) = v1;
  *(void *)(v0 + 40) = v3;
  os_log(_:dso:log:_:_:)();
  swift_bridgeObjectRelease();
  sub_100A52E54();
  sub_10104DC20();
  id v4 = [self standardUserDefaults];
  NSString v5 = String._bridgeToObjectiveC()();
  [v4 removeObjectForKey:v5];
}

uint64_t sub_100A52E54()
{
  uint64_t v1 = v0;
  uint64_t v33 = type metadata accessor for OwnedBeaconRecord();
  uint64_t v2 = *(void *)(v33 - 8);
  __chkstk_darwin(v33);
  id v4 = (char *)v25 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v30 = type metadata accessor for UUID();
  uint64_t v5 = *(void *)(v30 - 8);
  __chkstk_darwin(v30);
  uint64_t v7 = (char *)v25 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  dispatch_group_t v29 = dispatch_group_create();
  uint64_t v27 = *(void *)(v0 + OBJC_IVAR____TtC12searchpartyd20BeaconManagerService_localPairingMonitor);
  uint64_t v28 = sub_100ACF0EC();
  sub_1003769C4();
  uint64_t v8 = sub_100ACF0EC();
  int64_t v9 = v8[2];
  if (v9)
  {
    uint64_t v26 = v0;
    uint64_t v34 = _swiftEmptyArrayStorage;
    sub_1000B7034(0, v9, 0);
    unint64_t v10 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
    v25[1] = v8;
    uint64_t v11 = (uint64_t)v8 + v10;
    uint64_t v12 = *(void *)(v2 + 72);
    uint64_t v31 = v5 + 32;
    uint64_t v32 = v12;
    uint64_t v13 = v30;
    do
    {
      sub_100A61D20(v11, (uint64_t)v4, (uint64_t (*)(void))type metadata accessor for OwnedBeaconRecord);
      (*(void (**)(char *, char *, uint64_t))(v5 + 16))(v7, &v4[*(int *)(v33 + 20)], v13);
      sub_100A61D88((uint64_t)v4, (uint64_t (*)(void))type metadata accessor for OwnedBeaconRecord);
      uint64_t v14 = v34;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        sub_1000B7034(0, v14[2] + 1, 1);
        uint64_t v13 = v30;
        uint64_t v14 = v34;
      }
      unint64_t v16 = v14[2];
      unint64_t v15 = v14[3];
      if (v16 >= v15 >> 1)
      {
        sub_1000B7034(v15 > 1, v16 + 1, 1);
        uint64_t v13 = v30;
        uint64_t v14 = v34;
      }
      void v14[2] = v16 + 1;
      (*(void (**)(unint64_t, char *, uint64_t))(v5 + 32))((unint64_t)v14+ ((*(unsigned __int8 *)(v5 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80))+ *(void *)(v5 + 72) * v16, v7, v13);
      uint64_t v34 = v14;
      v11 += v32;
      --v9;
    }
    while (v9);
    swift_bridgeObjectRelease();
    uint64_t v1 = v26;
  }
  else
  {
    swift_bridgeObjectRelease();
    uint64_t v14 = _swiftEmptyArrayStorage;
  }
  static os_log_type_t.default.getter();
  if (qword_101637250 != -1) {
    swift_once();
  }
  sub_10000588C((uint64_t *)&unk_10163AD00);
  uint64_t v17 = swift_allocObject();
  *(_OWORD *)(v17 + 16) = xmmword_101342130;
  swift_bridgeObjectRetain();
  uint64_t v18 = Array.description.getter();
  uint64_t v20 = v19;
  swift_bridgeObjectRelease();
  *(void *)(v17 + 56) = &type metadata for String;
  *(void *)(v17 + 64) = sub_10000B4CC();
  *(void *)(v17 + 32) = v18;
  *(void *)(v17 + 40) = v20;
  os_log(_:dso:log:_:_:)();
  swift_bridgeObjectRelease();
  uint64_t v21 = type metadata accessor for Transaction();
  __chkstk_darwin(v21);
  uint64_t v23 = v28;
  dispatch_group_t v22 = v29;
  v25[-6] = v14;
  v25[-5] = v22;
  v25[-4] = v1;
  v25[-3] = v23;
  v25[-2] = v27;
  static Transaction.named<A>(_:with:)();
  swift_bridgeObjectRelease();

  return swift_bridgeObjectRelease();
}

void sub_100A532B4()
{
  uint64_t v1 = v0;
  uint64_t v2 = sub_10000588C(&qword_101638CF0);
  __chkstk_darwin(v2 - 8);
  id v4 = (char *)&v62 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = type metadata accessor for UUID();
  uint64_t v67 = *(void *)(v5 - 8);
  uint64_t v68 = v5;
  __chkstk_darwin(v5);
  uint64_t v64 = (char *)&v62 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(void *)&long long v70 = sub_10000588C(&qword_10163B9F0);
  uint64_t v7 = __chkstk_darwin(v70);
  int64_t v9 = (char *)&v62 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = __chkstk_darwin(v7);
  uint64_t v72 = (uint64_t)&v62 - v11;
  __chkstk_darwin(v10);
  uint64_t v13 = (char *)&v62 - v12;
  uint64_t v73 = type metadata accessor for OwnedBeaconRecord();
  uint64_t v14 = *(void *)(v73 - 8);
  uint64_t v15 = __chkstk_darwin(v73);
  uint64_t v66 = (uint64_t)&v62 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v17 = __chkstk_darwin(v15);
  uint64_t v65 = (uint64_t)&v62 - v18;
  __chkstk_darwin(v17);
  uint64_t v71 = (uint64_t)&v62 - v19;
  uint64_t v20 = type metadata accessor for DispatchPredicate();
  uint64_t v21 = *(void *)(v20 - 8);
  __chkstk_darwin(v20);
  uint64_t v23 = (uint64_t *)((char *)&v62 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v24 = *(void **)(v1 + 56);
  *uint64_t v23 = v24;
  (*(void (**)(void *, void, uint64_t))(v21 + 104))(v23, enum case for DispatchPredicate.onQueue(_:), v20);
  id v25 = v24;
  char v26 = _dispatchPreconditionTest(_:)();
  (*(void (**)(void *, uint64_t))(v21 + 8))(v23, v20);
  if (v26)
  {
    static os_log_type_t.default.getter();
    if (qword_101637250 == -1) {
      goto LABEL_3;
    }
  }
  else
  {
    __break(1u);
  }
  swift_once();
LABEL_3:
  uint64_t v69 = v9;
  os_log(_:dso:log:_:_:)();
  sub_10037A7A0((uint64_t)v13);
  uint64_t v27 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v14 + 48);
  uint64_t v28 = v73;
  if (v27(v13, 1, v73) == 1)
  {
    sub_10001DAB4((uint64_t)v13, &qword_10163B9F0);
    goto LABEL_5;
  }
  uint64_t v37 = v71;
  sub_100A616BC((uint64_t)v13, v71, (uint64_t (*)(void))type metadata accessor for OwnedBeaconRecord);
  sub_100AB24F0();
  QueueSynchronizer.conditionalSync<A>(_:)();
  swift_release();
  if (v74 != 1)
  {
    *(unsigned char *)(v1 + OBJC_IVAR____TtC12searchpartyd20BeaconManagerService_nvramAlreadyChecked) = 0;
    uint64_t v45 = v72;
    sub_100A61D20(v37, v72, (uint64_t (*)(void))type metadata accessor for OwnedBeaconRecord);
    (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v14 + 56))(v45, 0, 1, v28);
    sub_100A5173C(v45);
    sub_10001DAB4(v45, &qword_10163B9F0);
    uint64_t v46 = v37;
LABEL_24:
    sub_100A61D88(v46, (uint64_t (*)(void))type metadata accessor for OwnedBeaconRecord);
    return;
  }
  uint64_t v63 = 0;
  id v38 = [self standardUserDefaults];
  NSString v39 = String._bridgeToObjectiveC()();
  id v40 = [v38 stringForKey:v39];

  if (!v40)
  {
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v67 + 56))(v4, 1, 1, v68);
    goto LABEL_15;
  }
  static String._unconditionallyBridgeFromObjectiveC(_:)();

  UUID.init(uuidString:)();
  swift_bridgeObjectRelease();
  uint64_t v42 = v67;
  uint64_t v41 = v68;
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v67 + 48))(v4, 1, v68) == 1)
  {
LABEL_15:
    sub_10001DAB4((uint64_t)v4, &qword_101638CF0);
    uint64_t v28 = v73;
    uint64_t v44 = v71;
    goto LABEL_16;
  }
  uint64_t v43 = v64;
  (*(void (**)(char *, char *, uint64_t))(v42 + 32))(v64, v4, v41);
  uint64_t v28 = v73;
  uint64_t v44 = v71;
  if ((static UUID.== infix(_:_:)() & 1) == 0)
  {
    (*(void (**)(char *, uint64_t))(v42 + 8))(v43, v41);
LABEL_16:
    static os_log_type_t.default.getter();
    os_log(_:dso:log:_:_:)();
    if (*(void *)(v44 + *(int *)(v28 + 44) + 8) >> 60 == 15)
    {
      static os_log_type_t.default.getter();
      if (qword_101637260 != -1) {
        swift_once();
      }
      sub_10000588C((uint64_t *)&unk_10163AD00);
      uint64_t v47 = swift_allocObject();
      long long v70 = xmmword_101342130;
      *(_OWORD *)(v47 + 16) = xmmword_101342130;
      uint64_t v48 = v71;
      sub_100A61D20(v71, v65, (uint64_t (*)(void))type metadata accessor for OwnedBeaconRecord);
      uint64_t v49 = String.init<A>(describing:)();
      uint64_t v51 = v50;
      *(void *)(v47 + 56) = &type metadata for String;
      unint64_t v52 = sub_10000B4CC();
      *(void *)(v47 + 64) = v52;
      *(void *)(v47 + 32) = v49;
      *(void *)(v47 + 40) = v51;
      uint64_t v53 = v48;
      os_log(_:dso:log:_:_:)();
      swift_bridgeObjectRelease();
      uint64_t v54 = v66;
      uint64_t v55 = v63;
      sub_100A56324(v53, v66);
      if (v55)
      {
        static os_log_type_t.error.getter();
        uint64_t v56 = swift_allocObject();
        *(_OWORD *)(v56 + 16) = v70;
        swift_getErrorValue();
        uint64_t v57 = Error.localizedDescription.getter();
        *(void *)(v56 + 56) = &type metadata for String;
        *(void *)(v56 + 64) = v52;
        *(void *)(v56 + 32) = v57;
        *(void *)(v56 + 40) = v58;
        os_log(_:dso:log:_:_:)();
        swift_bridgeObjectRelease();
        uint64_t v59 = v72;
        sub_100A61D20(v53, v72, (uint64_t (*)(void))type metadata accessor for OwnedBeaconRecord);
        (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v14 + 56))(v59, 0, 1, v73);
        sub_100A5173C(v59);
        swift_errorRelease();
        sub_10001DAB4(v59, &qword_10163B9F0);
      }
      else
      {
        uint64_t v61 = v72;
        sub_100A61D20(v54, v72, (uint64_t (*)(void))type metadata accessor for OwnedBeaconRecord);
        (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v14 + 56))(v61, 0, 1, v73);
        sub_100A5173C(v61);
        sub_10001DAB4(v61, &qword_10163B9F0);
        sub_100A61D88(v54, (uint64_t (*)(void))type metadata accessor for OwnedBeaconRecord);
      }
      uint64_t v46 = v53;
    }
    else
    {
      uint64_t v60 = v72;
      sub_100A61D20(v44, v72, (uint64_t (*)(void))type metadata accessor for OwnedBeaconRecord);
      (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v14 + 56))(v60, 0, 1, v28);
      sub_100A5173C(v60);
      sub_10001DAB4(v60, &qword_10163B9F0);
      uint64_t v46 = v44;
    }
    goto LABEL_24;
  }
  sub_100A52CD0();
  (*(void (**)(char *, uint64_t))(v42 + 8))(v43, v41);
  sub_100A61D88(v44, (uint64_t (*)(void))type metadata accessor for OwnedBeaconRecord);
LABEL_5:
  dispatch_group_t v29 = dispatch_group_create();
  dispatch_group_enter(v29);
  uint64_t v30 = swift_allocBox();
  uint64_t v32 = v31;
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v14 + 56))(v31, 1, 1, v28);
  uint64_t v33 = (void *)swift_allocObject();
  v33[2] = v29;
  uint64_t v33[3] = v1;
  v33[4] = v30;
  uint64_t v34 = v29;
  swift_retain();
  swift_retain();
  sub_100378F70((uint64_t)sub_100A60730, (uint64_t)v33);
  swift_release();
  OS_dispatch_group.wait()();
  *(unsigned char *)(v1 + OBJC_IVAR____TtC12searchpartyd20BeaconManagerService_nvramAlreadyChecked) = 0;
  swift_beginAccess();
  uint64_t v35 = v72;
  sub_10001D074(v32, v72, &qword_10163B9F0);
  sub_100A5173C(v35);
  sub_10001DAB4(v35, &qword_10163B9F0);
  uint64_t v36 = (uint64_t)v69;
  sub_10001D074(v32, (uint64_t)v69, &qword_10163B9F0);
  if (v27((char *)v36, 1, v28) == 1)
  {
    sub_10001DAB4(v36, &qword_10163B9F0);
    static os_log_type_t.error.getter();
    os_log(_:dso:log:_:_:)();
    swift_release();
  }
  else
  {

    sub_10001DAB4(v36, &qword_10163B9F0);
    swift_release();
  }
}

void sub_100A53E58(uint64_t a1, NSObject *a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  int64_t v9 = (char *)&v17 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = type metadata accessor for DispatchQoS();
  uint64_t v11 = *(void *)(v10 - 8);
  __chkstk_darwin(v10);
  uint64_t v13 = (char *)&v17 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = swift_projectBox();
  uint64_t v15 = type metadata accessor for OwnedBeaconRecord();
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v15 - 8) + 48))(a1, 1, v15) != 1)
  {
    uint64_t v20 = *(void *)(a3 + 56);
    aBlock[4] = sub_100A607A4;
    void aBlock[5] = a3;
    aBlock[0] = _NSConcreteStackBlock;
    aBlock[1] = 1107296256;
    uint64_t aBlock[2] = sub_1004B5480;
    id aBlock[3] = &unk_1015E5738;
    uint64_t v19 = _Block_copy(aBlock);
    swift_retain();
    static DispatchQoS.unspecified.getter();
    uint64_t v22 = _swiftEmptyArrayStorage;
    sub_100A5FAC4((unint64_t *)&qword_10163B7E0, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
    uint64_t v21 = v14;
    sub_10000588C((uint64_t *)&unk_10163F350);
    uint64_t v18 = v10;
    sub_100062734((unint64_t *)&qword_10163B7F0, (uint64_t *)&unk_10163F350);
    uint64_t v14 = v21;
    dispatch thunk of SetAlgebra.init<A>(_:)();
    uint64_t v16 = v19;
    OS_dispatch_queue.async(group:qos:flags:execute:)();
    _Block_release(v16);
    (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
    (*(void (**)(char *, uint64_t))(v11 + 8))(v13, v18);
    swift_release();
  }
  swift_beginAccess();
  sub_100A6073C(a1, v14);
  dispatch_group_leave(a2);
}

void sub_100A541A0()
{
  uint64_t v1 = sub_10000588C(&qword_10164DBB0);
  __chkstk_darwin(v1 - 8);
  uint64_t v3 = (char *)&v14 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = type metadata accessor for DispatchPredicate();
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v7 = (uint64_t *)((char *)&v14 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v8 = *(void **)(v0 + 56);
  *uint64_t v7 = v8;
  (*(void (**)(void *, void, uint64_t))(v5 + 104))(v7, enum case for DispatchPredicate.onQueue(_:), v4);
  id v9 = v8;
  LOBYTE(v8) = _dispatchPreconditionTest(_:)();
  (*(void (**)(void *, uint64_t))(v5 + 8))(v7, v4);
  if ((v8 & 1) == 0)
  {
    __break(1u);
    goto LABEL_5;
  }
  static os_log_type_t.default.getter();
  if (qword_101637250 != -1) {
LABEL_5:
  }
    swift_once();
  os_log(_:dso:log:_:_:)();
  *(void *)(v0 + 32) = 0;
  swift_release();
  sub_1003769C4();
  uint64_t v10 = dispatch_group_create();
  dispatch_group_enter(v10);
  uint64_t v11 = type metadata accessor for TaskPriority();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v11 - 8) + 56))(v3, 1, 1, v11);
  uint64_t v12 = (void *)swift_allocObject();
  void v12[2] = 0;
  v12[3] = 0;
  v12[4] = v10;
  void v12[5] = v0;
  uint64_t v13 = v10;
  swift_retain();
  sub_100885EBC((uint64_t)v3, (uint64_t)&unk_1016565F0, (uint64_t)v12);
  swift_release();
  OS_dispatch_group.wait()();
}

uint64_t sub_100A54414(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = type metadata accessor for OwnedBeaconRecord() - 8;
  uint64_t result = __chkstk_darwin(v5);
  id v9 = (char *)v16 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = *(void *)(a2 + 16);
  if (v10)
  {
    uint64_t v11 = *(unsigned __int8 *)(v7 + 80);
    uint64_t v12 = a2;
    uint64_t v13 = a2 + ((v11 + 32) & ~v11);
    uint64_t v17 = *(void *)(v7 + 72);
    uint64_t v14 = (v11 + 24) & ~v11;
    v16[0] = v12;
    v16[1] = v2;
    swift_bridgeObjectRetain();
    do
    {
      sub_100A61D20(v13, (uint64_t)v9, (uint64_t (*)(void))type metadata accessor for OwnedBeaconRecord);
      uint64_t v15 = swift_allocObject();
      *(void *)(v15 + 16) = a1;
      sub_100A616BC((uint64_t)v9, v15 + v14, (uint64_t (*)(void))type metadata accessor for OwnedBeaconRecord);
      swift_retain();
      sub_10037F0D0(v13, 0, (void (*)(void))sub_100A60608, (void (*)(uint64_t))v15);
      swift_release();
      v13 += v17;
      --v10;
    }
    while (v10);
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t sub_100A545C4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = type metadata accessor for OwnedBeaconRecord();
  __chkstk_darwin(v5);
  uint64_t v7 = (char *)v17 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  Transaction.capture()();
  if (a1)
  {
    swift_errorRetain();
    static os_log_type_t.default.getter();
    if (qword_101637250 != -1) {
      swift_once();
    }
    sub_10000588C((uint64_t *)&unk_10163AD00);
    uint64_t v8 = swift_allocObject();
    *(_OWORD *)(v8 + 16) = xmmword_101342130;
    v17[1] = a1;
    swift_errorRetain();
    sub_10000588C(&qword_101638D40);
    uint64_t v9 = String.init<A>(describing:)();
    uint64_t v11 = v10;
    *(void *)(v8 + 56) = &type metadata for String;
    *(void *)(v8 + 64) = sub_10000B4CC();
    *(void *)(v8 + 32) = v9;
    *(void *)(v8 + 40) = v11;
    os_log(_:dso:log:_:_:)();
    swift_bridgeObjectRelease();
    return swift_errorRelease();
  }
  else
  {
    static os_log_type_t.default.getter();
    if (qword_101637250 != -1) {
      swift_once();
    }
    sub_10000588C((uint64_t *)&unk_10163AD00);
    uint64_t v13 = swift_allocObject();
    *(_OWORD *)(v13 + 16) = xmmword_101342130;
    sub_100A61D20(a3, (uint64_t)v7, (uint64_t (*)(void))type metadata accessor for OwnedBeaconRecord);
    uint64_t v14 = String.init<A>(describing:)();
    uint64_t v16 = v15;
    *(void *)(v13 + 56) = &type metadata for String;
    *(void *)(v13 + 64) = sub_10000B4CC();
    *(void *)(v13 + 32) = v14;
    *(void *)(v13 + 40) = v16;
    os_log(_:dso:log:_:_:)();
    return swift_bridgeObjectRelease();
  }
}

uint64_t sub_100A5482C(uint64_t a1, uint64_t a2)
{
  return sub_100A54868(a1, a2, (uint64_t)&unk_1015E52C0, (uint64_t)sub_100A5FA94, (uint64_t)&unk_1015E52D8);
}

uint64_t sub_100A54868(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v9 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v20 = *(void *)(v9 - 8);
  __chkstk_darwin(v9);
  uint64_t v11 = (char *)&v18 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v19 = type metadata accessor for DispatchQoS();
  uint64_t v12 = *(void *)(v19 - 8);
  __chkstk_darwin(v19);
  uint64_t v14 = (char *)&v18 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v18 = *(void *)(a2 + 56);
  uint64_t v15 = swift_allocObject();
  *(void *)(v15 + 16) = a1;
  *(void *)(v15 + 24) = a2;
  aBlock[4] = a4;
  void aBlock[5] = v15;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  uint64_t aBlock[2] = sub_1004B5480;
  id aBlock[3] = a5;
  uint64_t v16 = _Block_copy(aBlock);
  swift_retain();
  swift_retain();
  static DispatchQoS.unspecified.getter();
  aBlock[7] = _swiftEmptyArrayStorage;
  sub_100A5FAC4((unint64_t *)&qword_10163B7E0, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
  sub_10000588C((uint64_t *)&unk_10163F350);
  sub_100062734((unint64_t *)&qword_10163B7F0, (uint64_t *)&unk_10163F350);
  dispatch thunk of SetAlgebra.init<A>(_:)();
  OS_dispatch_queue.async(group:qos:flags:execute:)();
  _Block_release(v16);
  (*(void (**)(char *, uint64_t))(v20 + 8))(v11, v9);
  (*(void (**)(char *, uint64_t))(v12 + 8))(v14, v19);
  return swift_release();
}

uint64_t sub_100A54B30()
{
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for DispatchPredicate();
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  uint64_t v5 = &v14[-((v4 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v6 = *(void **)(v1 + 56);
  *uint64_t v5 = v6;
  (*(void (**)(void *, void, uint64_t))(v3 + 104))(v5, enum case for DispatchPredicate.onQueue(_:), v2);
  id v7 = v6;
  LOBYTE(v6) = _dispatchPreconditionTest(_:)();
  (*(void (**)(void *, uint64_t))(v3 + 8))(v5, v2);
  if ((v6 & 1) == 0)
  {
    __break(1u);
    goto LABEL_5;
  }
  uint64_t v2 = *(void *)(v1 + 280);
  if (qword_1016370B0 != -1) {
LABEL_5:
  }
    swift_once();
  uint64_t v8 = type metadata accessor for URL();
  uint64_t v9 = sub_100010324(v8, (uint64_t)qword_10170ECC0);
  uint64_t v10 = sub_100B7A5C4(v9);
  swift_retain();
  uint64_t v11 = sub_100A5ABCC((uint64_t)v10, v2);
  swift_bridgeObjectRelease();
  swift_release();
  uint64_t v12 = type metadata accessor for Transaction();
  __chkstk_darwin(v12);
  *(void *)&v14[-16] = v11;
  *(void *)&v14[-8] = v1;
  static Transaction.named<A>(_:with:)();
  swift_bridgeObjectRelease();
  return static Transaction.named<A>(_:with:)();
}

void sub_100A54D64(uint64_t a1, uint64_t a2)
{
  unsigned int v3 = sub_100F2C998();
  uint64_t v12 = sub_1004963A0();
  type metadata accessor for CLAuthorizationStatus(0);
  OS_dispatch_queue.sync<A>(execute:)();

  if (qword_101636CD8 != -1) {
    swift_once();
  }
  unsigned int v4 = v13 - 3;
  OS_dispatch_queue.sync<A>(execute:)();
  int v5 = sub_1010AB668(v13);
  swift_bridgeObjectRelease();
  OS_dispatch_queue.sync<A>(execute:)();
  BOOL v6 = sub_100A5BEB0();
  swift_bridgeObjectRelease();
  unsigned __int8 v7 = sub_100496614();
  static os_log_type_t.default.getter();
  if (qword_101637250 != -1) {
    swift_once();
  }
  sub_10000588C((uint64_t *)&unk_10163AD00);
  uint64_t v8 = swift_allocObject();
  *(_OWORD *)(v8 + 16) = xmmword_10134CDE0;
  *(void *)(v8 + 56) = &type metadata for Bool;
  *(void *)(v8 + 64) = &protocol witness table for Bool;
  *(unsigned char *)(v8 + 32) = v7 & 1;
  *(void *)(v8 + 96) = &type metadata for Bool;
  *(void *)(v8 + 104) = &protocol witness table for Bool;
  *(unsigned char *)(v8 + 72) = v5 & 1;
  *(void *)(v8 + 136) = &type metadata for Bool;
  *(void *)(v8 + 144) = &protocol witness table for Bool;
  *(unsigned char *)(v8 + 112) = v6;
  *(void *)(v8 + 176) = &type metadata for Bool;
  *(void *)(v8 + 184) = &protocol witness table for Bool;
  *(unsigned char *)(v8 + 152) = v3 & 1;
  *(void *)(v8 + 216) = &type metadata for Bool;
  *(void *)(v8 + 224) = &protocol witness table for Bool;
  *(unsigned char *)(v8 + 192) = v4 < 2;
  os_log(_:dso:log:_:_:)();
  swift_bridgeObjectRelease();
  if (v7)
  {
    if ((v5 & v6 & v3 & 1) != 0 && v4 <= 1) {
      sub_100A532B4();
    }
    else {
      sub_100A541A0();
    }
  }
  else
  {
    sub_100A541A0();
    *(unsigned char *)(a2 + OBJC_IVAR____TtC12searchpartyd20BeaconManagerService_nvramAlreadyChecked) = 0;
  }
  uint64_t v9 = CFNotificationCenterGetDarwinNotifyCenter();
  if (v9)
  {
    uint64_t v10 = v9;
    CFStringRef v11 = (const __CFString *)SPBeaconingStateChangedNotification;
    static os_log_type_t.default.getter();
    if (qword_101637260 != -1) {
      swift_once();
    }
    os_log(_:dso:log:_:_:)();
    CFNotificationCenterPostNotification(v10, v11, 0, 0, 1u);
  }
  else
  {
    static os_log_type_t.error.getter();
    if (qword_101637260 != -1) {
      swift_once();
    }
    os_log(_:dso:log:_:_:)();
  }
  Transaction.capture()();
}

uint64_t sub_100A55148()
{
  uint64_t v1 = v0;
  static os_log_type_t.default.getter();
  if (qword_101637250 != -1) {
    swift_once();
  }
  os_log(_:dso:log:_:_:)();
  uint64_t v2 = *(void *)(v0 + OBJC_IVAR____TtC12searchpartyd20BeaconManagerService_pruneActivity);
  if (!v2) {
    goto LABEL_5;
  }
  *(void *)(v1 + OBJC_IVAR____TtC12searchpartyd20BeaconManagerService_pruneActivity) = 0;
  unsigned int v3 = *(NSObject **)(v2 + 16);
  uint64_t v4 = swift_allocObject();
  *(void *)(v4 + 16) = sub_100550644;
  *(void *)(v4 + 24) = v2;
  uint64_t v15 = sub_1003B7AE0;
  uint64_t v16 = v4;
  CFStringRef v11 = _NSConcreteStackBlock;
  uint64_t v12 = 1107296256;
  uint64_t v13 = sub_1000A70B0;
  uint64_t v14 = &unk_1015E5698;
  int v5 = _Block_copy(&v11);
  swift_retain();
  swift_retain();
  swift_release();
  dispatch_sync(v3, v5);
  _Block_release(v5);
  LOBYTE(v3) = swift_isEscapingClosureAtFileLocation();
  swift_release_n();
  uint64_t result = swift_release();
  if ((v3 & 1) == 0)
  {
LABEL_5:
    static os_log_type_t.default.getter();
    if (qword_1016372F0 != -1) {
      swift_once();
    }
    os_log(_:dso:log:_:_:)();
    sub_1008B681C();
    sub_1006E232C();
    swift_release();
    static os_log_type_t.default.getter();
    if (qword_1016372F8 != -1) {
      swift_once();
    }
    os_log(_:dso:log:_:_:)();
    sub_1001AEB10();
    sub_1006E232C();
    uint64_t result = swift_release();
    uint64_t v7 = *(void *)(v1 + 40);
    if (!v7) {
      goto LABEL_13;
    }
    uint64_t v8 = *(NSObject **)(v7 + 56);
    uint64_t v9 = swift_allocObject();
    *(void *)(v9 + 16) = sub_100A60224;
    *(void *)(v9 + 24) = v7;
    uint64_t v15 = sub_1003B7AE0;
    uint64_t v16 = v9;
    CFStringRef v11 = _NSConcreteStackBlock;
    uint64_t v12 = 1107296256;
    uint64_t v13 = sub_1000A70B0;
    uint64_t v14 = &unk_1015E5648;
    uint64_t v10 = _Block_copy(&v11);
    swift_retain_n();
    swift_retain();
    swift_release();
    dispatch_sync(v8, v10);
    _Block_release(v10);
    LOBYTE(v8) = swift_isEscapingClosureAtFileLocation();
    swift_release_n();
    uint64_t result = swift_release();
    if ((v8 & 1) == 0) {
      return result;
    }
    __break(1u);
  }
  __break(1u);
LABEL_13:
  __break(1u);
  return result;
}

void **sub_100A55528()
{
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for UUID();
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  int v5 = (char *)v42 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = type metadata accessor for OSSignpostID();
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  uint64_t v9 = (char *)v42 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  static os_signpost_type_t.begin.getter();
  if (qword_1016372A8 != -1) {
    swift_once();
  }
  static OSSignpostID.exclusive.getter();
  os_signpost(_:dso:log:name:signpostID:)();
  uint64_t v46 = *(void (**)(char *, uint64_t))(v7 + 8);
  v46(v9, v6);
  if (qword_101636CD8 != -1) {
    swift_once();
  }
  OS_dispatch_queue.sync<A>(execute:)();
  uint64_t v10 = sub_1010AAFD0((uint64_t)aBlock);
  swift_bridgeObjectRelease();
  uint64_t v11 = sub_100AD4584();
  if (v11 >= v10)
  {
    uint64_t v31 = v11;
    static os_log_type_t.error.getter();
    sub_10000588C((uint64_t *)&unk_10163AD00);
    uint64_t v32 = swift_allocObject();
    *(_OWORD *)(v32 + 16) = xmmword_101347BA0;
    *(void *)(v32 + 56) = &type metadata for Int;
    *(void *)(v32 + 64) = &protocol witness table for Int;
    *(void *)(v32 + 32) = v10;
    *(void *)(v32 + 96) = &type metadata for Int;
    *(void *)(v32 + 104) = &protocol witness table for Int;
    *(void *)(v32 + 72) = v31;
    os_log(_:dso:log:_:_:)();
    swift_bridgeObjectRelease();
    sub_10000588C(&qword_101642890);
    uint64_t inited = swift_initStackObject();
    *(_OWORD *)(inited + 16) = xmmword_101342130;
    *(void *)(inited + 32) = static String._unconditionallyBridgeFromObjectiveC(_:)();
    *(void *)(inited + 40) = v34;
    long long aBlock = 0;
    unint64_t v48 = 0xE000000000000000;
    _StringGuts.grow(_:)(43);
    swift_bridgeObjectRelease();
    long long aBlock = (void **)0xD000000000000015;
    unint64_t v48 = 0x800000010140FAD0;
    uint64_t v53 = v10;
    v35._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v35);
    swift_bridgeObjectRelease();
    v36._object = (void *)0x800000010140FAF0;
    v36._countAndFlagsBits = 0xD000000000000014;
    String.append(_:)(v36);
    unint64_t v37 = v48;
    *(void *)(inited + 48) = aBlock;
    *(void *)(inited + 56) = v37;
    unint64_t v38 = sub_10092D8F8(inited);
    type metadata accessor for SPPairingSessionError(0);
    uint64_t v53 = 17;
    sub_10065435C(v38);
    swift_bridgeObjectRelease();
    sub_100A5FAC4(&qword_101638770, type metadata accessor for SPPairingSessionError);
    _BridgedStoredNSError.init(_:userInfo:)();
    return aBlock;
  }
  uint64_t v44 = v3;
  uint64_t v45 = v2;
  id v12 = objc_allocWithZone((Class)type metadata accessor for CurrentLocationMonitor());
  id v13 = CurrentLocationMonitor.init(mode:desiredAccuracy:)(0, *(uint64_t *)&kCLLocationAccuracyHundredMeters, 0);
  uint64_t v14 = *(void *)(v1 + OBJC_IVAR____TtC12searchpartyd20BeaconManagerService_pairingValidator);
  uint64_t v15 = *(void **)(v1 + 144);
  type metadata accessor for ItemPairingCoordinator();
  swift_allocObject();
  id v16 = v13;
  swift_retain();
  uint64_t v17 = v15;
  uint64_t v18 = sub_100FFF0A8(v16, v14, v17);
  if (!v18)
  {
    static os_log_type_t.error.getter();
    os_log(_:dso:log:_:_:)();
    sub_10000588C(&qword_101642890);
    uint64_t v39 = swift_initStackObject();
    *(_OWORD *)(v39 + 16) = xmmword_101342130;
    *(void *)(v39 + 32) = static String._unconditionallyBridgeFromObjectiveC(_:)();
    *(void *)(v39 + 40) = v40;
    *(void *)(v39 + 48) = 0xD00000000000003FLL;
    *(void *)(v39 + 56) = 0x800000010140FB40;
    unint64_t v41 = sub_10092D8F8(v39);
    type metadata accessor for SPPairingSessionError(0);
    uint64_t v53 = 3;
    sub_10065435C(v41);
    swift_bridgeObjectRelease();
    sub_100A5FAC4(&qword_101638770, type metadata accessor for SPPairingSessionError);
    _BridgedStoredNSError.init(_:userInfo:)();

    return aBlock;
  }
  uint64_t v19 = v18;
  id v43 = v16;
  uint64_t v20 = swift_allocObject();
  *(void *)(v20 + 16) = v1;
  *(void *)(v20 + 24) = v19;
  uint64_t v21 = swift_allocObject();
  *(void *)(v21 + 16) = sub_100A6020C;
  *(void *)(v21 + 24) = v20;
  v42[2] = v20;
  uint64_t v51 = sub_1003B7AE0;
  uint64_t v52 = v21;
  long long aBlock = _NSConcreteStackBlock;
  unint64_t v48 = 1107296256;
  uint64_t v49 = sub_1000A70B0;
  uint64_t v50 = &unk_1015E55F8;
  uint64_t v22 = _Block_copy(&aBlock);
  swift_retain();
  swift_retain();
  swift_retain();
  swift_release();
  dispatch_sync(v17, v22);
  _Block_release(v22);
  LOBYTE(v22) = swift_isEscapingClosureAtFileLocation();
  uint64_t result = (void **)swift_release();
  if ((v22 & 1) == 0)
  {
    static os_log_type_t.default.getter();
    v42[1] = qword_10170F000;
    sub_10000588C((uint64_t *)&unk_10163AD00);
    uint64_t v24 = swift_allocObject();
    *(_OWORD *)(v24 + 16) = xmmword_101342130;
    id v25 = [*(id *)(v19 + 16) identifier];
    static UUID._unconditionallyBridgeFromObjectiveC(_:)();

    sub_100A5FAC4((unint64_t *)&qword_101638B10, (void (*)(uint64_t))&type metadata accessor for UUID);
    uint64_t v26 = v45;
    uint64_t v27 = dispatch thunk of CustomStringConvertible.description.getter();
    uint64_t v29 = v28;
    (*(void (**)(char *, uint64_t))(v44 + 8))(v5, v26);
    *(void *)(v24 + 56) = &type metadata for String;
    *(void *)(v24 + 64) = sub_10000B4CC();
    *(void *)(v24 + 32) = v27;
    *(void *)(v24 + 40) = v29;
    os_log(_:dso:log:_:_:)();
    swift_bridgeObjectRelease();
    static os_signpost_type_t.end.getter();
    static OSSignpostID.exclusive.getter();
    os_signpost(_:dso:log:name:signpostID:)();
    v46(v9, v6);
    static os_signpost_type_t.begin.getter();
    os_signpost(_:dso:log:name:signpostID:)();

    id v30 = *(id *)(v19 + 16);
    swift_release();
    swift_release();
    return (void **)v30;
  }
  __break(1u);
  return result;
}

uint64_t sub_100A55E5C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for UUID();
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v7 = (char *)&v12 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  id v8 = [*(id *)(a2 + 16) identifier];
  static UUID._unconditionallyBridgeFromObjectiveC(_:)();

  uint64_t v9 = (uint64_t *)(a1 + OBJC_IVAR____TtC12searchpartyd20BeaconManagerService_pairingSessionCoordinators);
  swift_beginAccess();
  swift_retain();
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v12 = *v9;
  *uint64_t v9 = 0x8000000000000000;
  sub_100171298(a2, (uint64_t)v7, isUniquelyReferenced_nonNull_native);
  *uint64_t v9 = v12;
  swift_bridgeObjectRelease();
  (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  return swift_endAccess();
}

uint64_t sub_100A55FBC(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2;
  uint64_t v6 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  uint64_t v9 = (char *)v17 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = type metadata accessor for DispatchQoS();
  uint64_t v11 = *(void *)(v10 - 8);
  __chkstk_darwin(v10);
  id v13 = (char *)v17 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17[0] = *(void *)(v3 + 48);
  uint64_t v14 = (void *)swift_allocObject();
  void v14[2] = v3;
  void v14[3] = a1;
  v14[4] = a2;
  aBlock[4] = sub_100A601DC;
  void aBlock[5] = v14;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  uint64_t aBlock[2] = sub_1004B5480;
  id aBlock[3] = &unk_1015E5580;
  uint64_t v15 = _Block_copy(aBlock);
  swift_retain();
  swift_retain();
  static DispatchQoS.unspecified.getter();
  v17[1] = _swiftEmptyArrayStorage;
  sub_100A5FAC4((unint64_t *)&qword_10163B7E0, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
  sub_10000588C((uint64_t *)&unk_10163F350);
  sub_100062734((unint64_t *)&qword_10163B7F0, (uint64_t *)&unk_10163F350);
  dispatch thunk of SetAlgebra.init<A>(_:)();
  OS_dispatch_queue.async(group:qos:flags:execute:)();
  _Block_release(v15);
  (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
  (*(void (**)(char *, uint64_t))(v11 + 8))(v13, v10);
  return swift_release();
}

uint64_t sub_100A56290(uint64_t a1, uint64_t (*a2)(uint64_t))
{
  type metadata accessor for Transaction();
  uint64_t v3 = static Transaction.named<A>(_:with:)();
  return a2(v3);
}

uint64_t sub_100A56324@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  sub_100D272C4(v15);
  uint64_t v5 = v15[0];
  unint64_t v4 = v15[1];
  if (*(void *)(a1 + *(int *)(type metadata accessor for OwnedBeaconRecord() + 44) + 8) >> 60 == 15)
  {
    uint64_t v6 = dispatch_group_create();
    uint64_t v7 = swift_allocBox();
    uint64_t v9 = v8;
    sub_100A61D20(a1, v8, (uint64_t (*)(void))type metadata accessor for OwnedBeaconRecord);
    dispatch_group_enter(v6);
    uint64_t v14 = a2;
    uint64_t v10 = swift_allocObject();
    *(void *)(v10 + 16) = v5;
    *(void *)(v10 + 24) = v4;
    uint64_t v11 = swift_allocObject();
    *(void *)(v11 + 16) = v7;
    *(void *)(v11 + 24) = v6;
    sub_1000361E0(v5, v4);
    swift_retain();
    uint64_t v12 = v6;
    sub_101073560(a1, 0, (void (*)(uint64_t))sub_100A60174, v10, (void (*)(uint64_t (*)()))sub_100A601BC, (void (*)(uint64_t (*)()))v11);
    swift_release();
    swift_release();
    OS_dispatch_group.wait()();

    swift_beginAccess();
    sub_100A61D20(v9, v14, (uint64_t (*)(void))type metadata accessor for OwnedBeaconRecord);
    swift_release();
  }
  else
  {
    sub_100A61D20(a1, a2, (uint64_t (*)(void))type metadata accessor for OwnedBeaconRecord);
  }
  return sub_10001CFB8(v5, v4);
}

void sub_100A56508(int a1, uint64_t a2, uint64_t a3)
{
  uint64_t v7 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v31 = *(void *)(v7 - 8);
  __chkstk_darwin(v7);
  uint64_t v9 = &v27[-((v8 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v30 = type metadata accessor for DispatchQoS();
  uint64_t v10 = *(void *)(v30 - 8);
  __chkstk_darwin(v30);
  uint64_t v12 = &v27[-((v11 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v13 = sub_10000588C(&qword_10164DBB0);
  __chkstk_darwin(v13 - 8);
  uint64_t v15 = &v27[-((v14 + 15) & 0xFFFFFFFFFFFFFFF0)];
  id v16 = [self currentConnection];
  if (v16)
  {
    uint64_t v17 = v16;
    int v28 = a1;
    uint64_t v29 = a3;
    uint64_t v18 = v3;
    sub_10000588C(&qword_1016565B8);
    swift_allocObject();
    id v19 = v17;
    uint64_t v20 = XPCSession.init(connection:)();
    if (v20)
    {
      uint64_t v21 = v20;
      uint64_t v22 = type metadata accessor for TaskPriority();
      (*(void (**)(unsigned char *, uint64_t, uint64_t, uint64_t))(*(void *)(v22 - 8) + 56))(v15, 1, 1, v22);
      uint64_t v23 = swift_allocObject();
      *(void *)(v23 + 16) = 0;
      *(void *)(v23 + 24) = 0;
      *(void *)(v23 + 32) = v18;
      *(void *)(v23 + 40) = v21;
      *(unsigned char *)(v23 + 48) = v28 & 1;
      uint64_t v24 = v29;
      *(void *)(v23 + 56) = a2;
      *(void *)(v23 + 64) = v24;
      swift_retain();
      swift_retain();
      swift_retain();
      sub_1008F5E44((uint64_t)v15, (uint64_t)&unk_1016565C8, v23);
      swift_release();
      swift_release();

      return;
    }

    a3 = v29;
  }
  uint64_t v25 = swift_allocObject();
  *(void *)(v25 + 16) = a2;
  *(void *)(v25 + 24) = a3;
  aBlock[4] = sub_100A60024;
  void aBlock[5] = v25;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  uint64_t aBlock[2] = sub_1004B5480;
  id aBlock[3] = &unk_1015E54B8;
  uint64_t v26 = _Block_copy(aBlock);
  swift_retain();
  static DispatchQoS.unspecified.getter();
  uint64_t v32 = _swiftEmptyArrayStorage;
  sub_100A5FAC4((unint64_t *)&qword_10163B7E0, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
  sub_10000588C((uint64_t *)&unk_10163F350);
  sub_100062734((unint64_t *)&qword_10163B7F0, (uint64_t *)&unk_10163F350);
  dispatch thunk of SetAlgebra.init<A>(_:)();
  OS_dispatch_queue.async(group:qos:flags:execute:)();
  _Block_release(v26);
  (*(void (**)(unsigned char *, uint64_t))(v31 + 8))(v9, v7);
  (*(void (**)(unsigned char *, uint64_t))(v10 + 8))(v12, v30);
  swift_release();
}

uint64_t sub_100A56954(void (*a1)(uint64_t))
{
  type metadata accessor for BluetoothCommunicationCoordinator.Error();
  sub_100A5FAC4((unint64_t *)&unk_1016565D0, (void (*)(uint64_t))type metadata accessor for BluetoothCommunicationCoordinator.Error);
  uint64_t v2 = swift_allocError();
  swift_storeEnumTagMultiPayload();
  a1(v2);

  return swift_errorRelease();
}

uint64_t sub_100A56A08(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, char a6, uint64_t a7, uint64_t a8)
{
  *(void *)(v8 + 48) = a7;
  *(void *)(v8 + 56) = a8;
  *(unsigned char *)(v8 + 120) = a6;
  *(void *)(v8 + 32) = a4;
  *(void *)(v8 + 40) = a5;
  return _swift_task_switch(sub_100A56A30, 0, 0);
}

uint64_t sub_100A56A30()
{
  swift_retain();
  uint64_t v1 = (void *)swift_task_alloc();
  *(void *)(v0 + 64) = v1;
  uint64_t v2 = type metadata accessor for BeaconKeyManager(0);
  *uint64_t v1 = v0;
  v1[1] = sub_100A56AFC;
  uint64_t v3 = *(void *)(v0 + 32);
  return unsafeBlocking<A>(_:)(v0 + 16, sub_100A60134, v3, v2);
}

uint64_t sub_100A56AFC()
{
  swift_task_dealloc();
  swift_release();
  return _swift_task_switch(sub_100A56C14, 0, 0);
}

uint64_t sub_100A56C14()
{
  uint64_t v1 = v0[2];
  v0[9] = v1;
  type metadata accessor for BeaconScanner();
  swift_allocObject();
  swift_retain();
  swift_retain();
  uint64_t v2 = (void *)swift_task_alloc();
  v0[10] = v2;
  *uint64_t v2 = v0;
  v2[1] = sub_100A56CF0;
  uint64_t v3 = v0[5];
  return sub_100F671EC(v3, v1);
}

uint64_t sub_100A56CF0(uint64_t a1)
{
  uint64_t v3 = *v2;
  uint64_t v4 = *v2;
  *(void *)(v3 + 88) = a1;
  *(void *)(v3 + 96) = v1;
  swift_task_dealloc();
  if (v1)
  {
    return _swift_task_switch(sub_100A56F8C, 0, 0);
  }
  else
  {
    uint64_t v5 = (void *)swift_task_alloc();
    *(void *)(v3 + 104) = v5;
    *uint64_t v5 = v4;
    v5[1] = sub_100A56E78;
    char v6 = *(unsigned char *)(v3 + 120);
    return sub_100F67A2C(v6);
  }
}

uint64_t sub_100A56E78()
{
  *(void *)(*(void *)v1 + 112) = v0;
  swift_task_dealloc();
  if (v0) {
    uint64_t v2 = sub_100A5720C;
  }
  else {
    uint64_t v2 = sub_100A57184;
  }
  return _swift_task_switch(v2, 0, 0);
}

uint64_t sub_100A56F8C()
{
  uint64_t v1 = v0[12];
  swift_release();
  if (qword_101636EE8 != -1) {
    swift_once();
  }
  uint64_t v2 = type metadata accessor for Logger();
  sub_100010324(v2, (uint64_t)qword_10170E828);
  swift_errorRetain();
  uint64_t v3 = Logger.logObject.getter();
  os_log_type_t v4 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v3, v4))
  {
    uint64_t v5 = (uint8_t *)swift_slowAlloc();
    char v6 = (void *)swift_slowAlloc();
    *(_DWORD *)uint64_t v5 = 138543362;
    uint64_t v7 = _convertErrorToNSError(_:)();
    v0[3] = v7;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *char v6 = v7;
    swift_errorRelease();
    _os_log_impl((void *)&_mh_execute_header, v3, v4, "Beacon scan error: %{public}@", v5, 0xCu);
    sub_10000588C((uint64_t *)&unk_101638EA0);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    swift_errorRelease();
  }
  uint64_t v8 = (void (*)(uint64_t))v0[6];

  swift_errorRetain();
  v8(v1);
  swift_errorRelease();
  swift_errorRelease();
  uint64_t v9 = (uint64_t (*)(void))v0[1];
  return v9();
}

uint64_t sub_100A57184()
{
  (*(void (**)(void))(v0 + 48))(0);
  swift_release();
  swift_release();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_100A5720C()
{
  swift_release();
  uint64_t v1 = v0[14];
  swift_release();
  if (qword_101636EE8 != -1) {
    swift_once();
  }
  uint64_t v2 = type metadata accessor for Logger();
  sub_100010324(v2, (uint64_t)qword_10170E828);
  swift_errorRetain();
  uint64_t v3 = Logger.logObject.getter();
  os_log_type_t v4 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v3, v4))
  {
    uint64_t v5 = (uint8_t *)swift_slowAlloc();
    char v6 = (void *)swift_slowAlloc();
    *(_DWORD *)uint64_t v5 = 138543362;
    uint64_t v7 = _convertErrorToNSError(_:)();
    v0[3] = v7;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *char v6 = v7;
    swift_errorRelease();
    _os_log_impl((void *)&_mh_execute_header, v3, v4, "Beacon scan error: %{public}@", v5, 0xCu);
    sub_10000588C((uint64_t *)&unk_101638EA0);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    swift_errorRelease();
  }
  uint64_t v8 = (void (*)(uint64_t))v0[6];

  swift_errorRetain();
  v8(v1);
  swift_errorRelease();
  swift_errorRelease();
  uint64_t v9 = (uint64_t (*)(void))v0[1];
  return v9();
}

uint64_t sub_100A5740C@<X0>(void *a1@<X8>)
{
  type metadata accessor for BeaconKeyManager(0);
  uint64_t result = OSAllocatedUnfairLock.callAsFunction<A>(_:)();
  *a1 = v3;
  return result;
}

uint64_t sub_100A57494(uint64_t a1, int a2)
{
  *(_DWORD *)(v3 + 160) = a2;
  *(void *)(v3 + 120) = a1;
  *(void *)(v3 + 128) = v2;
  return _swift_task_switch(sub_100A574B8, 0, 0);
}

uint64_t sub_100A574B8()
{
  uint64_t v1 = qword_1016375E8;
  swift_retain();
  if (v1 != -1) {
    swift_once();
  }
  swift_beginAccess();
  uint64_t result = sub_10001D074((uint64_t)&xmmword_10166E8F0, v0 + 56, (uint64_t *)&unk_101638D30);
  if (*(void *)(v0 + 80))
  {
    sub_10001CEB0((long long *)(v0 + 56), v0 + 16);
    swift_release();
    sub_10001CD44((void *)(v0 + 16), *(void *)(v0 + 40));
    os_log_type_t v4 = (uint64_t (__cdecl *)())((char *)&dword_101639370 + dword_101639370);
    uint64_t v3 = (void *)swift_task_alloc();
    *(void *)(v0 + 136) = v3;
    *uint64_t v3 = v0;
    v3[1] = sub_100A57608;
    return v4();
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_100A57608(uint64_t a1)
{
  *(void *)(*(void *)v1 + 144) = a1;
  swift_task_dealloc();
  return _swift_task_switch(sub_100A57708, 0, 0);
}

uint64_t sub_100A57708()
{
  uint64_t v1 = v0 + 16;
  if (*(void *)(v0 + 144))
  {
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v1);
    uint64_t v2 = (void *)swift_task_alloc();
    *(void *)(v0 + 152) = v2;
    *uint64_t v2 = v0;
    v2[1] = sub_100A578A4;
    int v3 = *(_DWORD *)(v0 + 160);
    uint64_t v4 = *(void *)(v0 + 120);
    return sub_10017A458(v4, v3);
  }
  else
  {
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v1);
    if (qword_101636EF0 != -1) {
      swift_once();
    }
    uint64_t v6 = type metadata accessor for Logger();
    sub_100010324(v6, (uint64_t)qword_10170E840);
    uint64_t v7 = Logger.logObject.getter();
    os_log_type_t v8 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v7, v8))
    {
      uint64_t v9 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v9 = 0;
      _os_log_impl((void *)&_mh_execute_header, v7, v8, "Unable to get LeechScanningService!", v9, 2u);
      swift_slowDealloc();
    }

    uint64_t v10 = *(uint64_t (**)(void))(v0 + 8);
    return v10();
  }
}

uint64_t sub_100A578A4()
{
  swift_task_dealloc();
  return _swift_task_switch(sub_100A579A0, 0, 0);
}

uint64_t sub_100A579A0()
{
  swift_release();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

id *sub_100A57A00()
{
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();

  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();

  swift_release();
  sub_10001DAB4((uint64_t)v0 + OBJC_IVAR____TtC12searchpartyd20BeaconManagerService_configSubscription, &qword_1016567A0);
  uint64_t v1 = (char *)v0 + OBJC_IVAR____TtC12searchpartyd20BeaconManagerService_transactionManager;
  uint64_t v2 = type metadata accessor for PressuredExitTransactionManager();
  (*(void (**)(char *, uint64_t))(*(void *)(v2 - 8) + 8))(v1, v2);
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();

  swift_release();
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_100A61CBC(*(uint64_t *)((char *)v0
                           + OBJC_IVAR____TtC12searchpartyd20BeaconManagerService_beaconKeyManagerURLChangedSubscription));
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();

  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();

  swift_release();
  swift_release();

  swift_release();
  swift_release();
  sub_1000A1534(*(uint64_t *)((char *)v0
                           + OBJC_IVAR____TtC12searchpartyd20BeaconManagerService____lazy_storage___payloadDecodingBlock));
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  sub_100A61CCC((uint64_t)v0 + OBJC_IVAR____TtC12searchpartyd20BeaconManagerService_cbPeripheralManager);
  return v0;
}

uint64_t sub_100A57E10()
{
  sub_100A57A00();

  return swift_deallocClassInstance();
}

uint64_t sub_100A57E68()
{
  return type metadata accessor for BeaconManagerService();
}

uint64_t type metadata accessor for BeaconManagerService()
{
  uint64_t result = qword_101655CE0;
  if (!qword_101655CE0) {
    return swift_getSingletonMetadata();
  }
  return result;
}

void sub_100A57EBC()
{
  sub_1001AFC64();
  if (v0 <= 0x3F)
  {
    type metadata accessor for PressuredExitTransactionManager();
    if (v1 <= 0x3F) {
      swift_updateClassMetadata2();
    }
  }
}

uint64_t sub_100A580BC()
{
  return sub_100A48D24();
}

uint64_t sub_100A580E8()
{
  *(unsigned char *)(*v0 + OBJC_IVAR____TtC12searchpartyd20BeaconManagerService_shouldForceFetch) = 1;
  return sub_100F2DB0C();
}

uint64_t sub_100A58128(uint64_t a1)
{
  uint64_t v3 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v3;
  *uint64_t v3 = v1;
  v3[1] = sub_10001C878;
  return sub_1009DDBCC(a1);
}

uint64_t sub_100A581CC(uint64_t a1, int a2)
{
  uint64_t v6 = *v2;
  uint64_t v7 = swift_task_alloc();
  *(void *)(v3 + 16) = v7;
  *(void *)uint64_t v7 = v3;
  *(void *)(v7 + 8) = sub_100033F68;
  *(_DWORD *)(v7 + 160) = a2;
  *(void *)(v7 + 120) = a1;
  *(void *)(v7 + 128) = v6;
  return _swift_task_switch(sub_100A574B8, 0, 0);
}

uint64_t sub_100A5828C(uint64_t a1)
{
  uint64_t v5 = (uint64_t (*)(uint64_t))((char *)&dword_101656568 + dword_101656568);
  uint64_t v3 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v3;
  *uint64_t v3 = v1;
  v3[1] = sub_10001D2E4;
  return v5(a1);
}

uint64_t sub_100A58334(uint64_t a1)
{
  uint64_t v5 = (uint64_t (*)(uint64_t))((char *)&dword_101656558 + dword_101656558);
  uint64_t v3 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v3;
  *uint64_t v3 = v1;
  v3[1] = sub_100033F68;
  return v5(a1);
}

void sub_100A583DC()
{
}

uint64_t sub_100A58404(char a1)
{
  uint64_t v2 = v1;
  static os_log_type_t.default.getter();
  if (qword_101637250 != -1) {
    swift_once();
  }
  sub_10000588C((uint64_t *)&unk_10163AD00);
  uint64_t v4 = swift_allocObject();
  *(_OWORD *)(v4 + 16) = xmmword_101342130;
  *(void *)(v4 + 56) = &type metadata for Bool;
  *(void *)(v4 + 64) = &protocol witness table for Bool;
  *(unsigned char *)(v4 + 32) = a1 & 1;
  os_log(_:dso:log:_:_:)();
  swift_bridgeObjectRelease();
  if ((a1 & 1) == 0) {
    sub_100A52E54();
  }
  type metadata accessor for Transaction();
  static Transaction.named<A>(_:with:)();
  uint64_t v5 = *(NSObject **)(v2 + 48);
  uint64_t v6 = swift_allocObject();
  *(void *)(v6 + 16) = sub_100A5FBB8;
  *(void *)(v6 + 24) = v2;
  aBlock[4] = sub_100132424;
  void aBlock[5] = v6;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  uint64_t aBlock[2] = sub_1000A70B0;
  id aBlock[3] = &unk_1015E53C8;
  uint64_t v7 = _Block_copy(aBlock);
  swift_retain();
  swift_retain();
  swift_release();
  dispatch_sync(v5, v7);
  _Block_release(v7);
  LOBYTE(v5) = swift_isEscapingClosureAtFileLocation();
  swift_release();
  uint64_t result = swift_release();
  if (v5) {
    __break(1u);
  }
  return result;
}

uint64_t sub_100A58648(char a1)
{
  static os_log_type_t.default.getter();
  if (qword_101637250 != -1) {
    swift_once();
  }
  sub_10000588C((uint64_t *)&unk_10163AD00);
  uint64_t v2 = swift_allocObject();
  *(_OWORD *)(v2 + 16) = xmmword_101342130;
  *(void *)(v2 + 56) = &type metadata for Bool;
  *(void *)(v2 + 64) = &protocol witness table for Bool;
  *(unsigned char *)(v2 + 32) = a1 & 1;
  os_log(_:dso:log:_:_:)();
  swift_bridgeObjectRelease();
  type metadata accessor for Transaction();
  return static Transaction.named<A>(_:with:)();
}

uint64_t sub_100A58780(uint64_t a1, uint64_t a2, NSObject *a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v66 = a5;
  uint64_t v67 = a6;
  uint64_t v64 = a1;
  uint64_t v65 = a4;
  uint64_t v69 = a3;
  uint64_t v7 = type metadata accessor for UUID();
  os_log_type_t v8 = *(void **)(v7 - 8);
  uint64_t v9 = v8[8];
  uint64_t v10 = __chkstk_darwin(v7);
  uint64_t v63 = (char *)&v43 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v10);
  uint64_t v62 = (char *)&v43 - v11;
  uint64_t v46 = type metadata accessor for DispatchTime();
  uint64_t v45 = *(void *)(v46 - 8);
  uint64_t v12 = __chkstk_darwin(v46);
  id v43 = (char *)&v43 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v12);
  uint64_t v44 = (char *)&v43 - v14;
  uint64_t v15 = sub_10000588C(&qword_101638CF0);
  __chkstk_darwin(v15 - 8);
  uint64_t v17 = (char *)&v43 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v18 = *(void *)(a2 + 16);
  uint64_t v47 = a2;
  if (v18)
  {
    uint64_t v21 = (void (*)(char *, uint64_t, uint64_t))v8[2];
    uint64_t v20 = v8 + 2;
    id v19 = v21;
    uint64_t v22 = *((unsigned __int8 *)v20 + 64);
    uint64_t v23 = (v22 + 32) & ~v22;
    uint64_t v24 = a2 + v23;
    uint64_t v25 = v20[7];
    uint64_t v68 = (void (**)(char *, uint64_t, uint64_t, uint64_t))(v20 + 5);
    uint64_t v61 = (unsigned int (**)(char *, uint64_t, uint64_t))(v20 + 4);
    uint64_t v56 = (void (**)(char *, char *, uint64_t))(v20 + 2);
    uint64_t v57 = v25;
    uint64_t v58 = v23;
    unint64_t v53 = (v9 + v23 + 7) & 0xFFFFFFFFFFFFFFF8;
    uint64_t v54 = v22 | 7;
    unint64_t v52 = (v53 + 15) & 0xFFFFFFFFFFFFFFF8;
    unint64_t v51 = (v52 + 15) & 0xFFFFFFFFFFFFFFF8;
    unint64_t v50 = v51 + 8;
    uint64_t v49 = (void (**)(uint64_t, uint64_t))(v20 - 1);
    swift_bridgeObjectRetain();
    uint64_t v59 = v21;
    uint64_t v60 = v20;
    uint64_t v55 = v17;
    uint64_t v26 = v69;
    while (1)
    {
      v19(v17, v24, v7);
      uint64_t v27 = *v68;
      (*v68)(v17, 0, 1, v7);
      if ((*v61)(v17, 1, v7) == 1) {
        break;
      }
      unint64_t v48 = v27;
      int v28 = *v56;
      uint64_t v71 = v18;
      uint64_t v29 = (uint64_t)v62;
      v28(v62, v17, v7);
      dispatch_group_enter(v26);
      uint64_t v70 = v24;
      uint64_t v30 = v63;
      v19(v63, v29, v7);
      uint64_t v31 = swift_allocObject();
      *(void *)(v31 + 16) = v64;
      *(void *)(v31 + 24) = v26;
      v28((char *)(v31 + v58), v30, v7);
      *(void *)(v31 + v53) = v65;
      uint64_t v32 = v67;
      *(void *)(v31 + v52) = v66;
      *(void *)(v31 + v51) = v32;
      uint64_t v17 = v55;
      swift_retain();
      uint64_t v33 = v26;
      swift_retain();
      uint64_t v34 = v70;
      swift_bridgeObjectRetain();
      id v19 = v59;
      swift_retain();
      sub_10037D6C4(v29, 0, (void (*)(void))sub_100A5FD14, (void (*)(uint64_t))v31);
      swift_release();
      uint64_t v35 = v29;
      uint64_t v36 = v71;
      (*v49)(v35, v7);
      uint64_t v24 = v34 + v57;
      uint64_t v18 = v36 - 1;
      if (!v18)
      {
        v48(v17, 1, 1, v7);
        break;
      }
    }
  }
  else
  {
    unint64_t v37 = (void (*)(char *, uint64_t, uint64_t, uint64_t))v8[7];
    swift_bridgeObjectRetain();
    v37(v17, 1, 1, v7);
  }
  swift_bridgeObjectRelease();
  unint64_t v38 = v43;
  static DispatchTime.now()();
  uint64_t v39 = v44;
  + infix(_:_:)();
  uint64_t v40 = *(void (**)(char *, uint64_t))(v45 + 8);
  uint64_t v41 = v46;
  v40(v38, v46);
  OS_dispatch_group.wait(timeout:)();
  v40(v39, v41);
  uint64_t result = static DispatchTimeoutResult.== infix(_:_:)();
  if (result)
  {
    static os_log_type_t.error.getter();
    if (qword_101637250 != -1) {
      swift_once();
    }
    return os_log(_:dso:log:_:_:)();
  }
  return result;
}

void sub_100A58CF8(uint64_t a1, uint64_t a2, NSObject *a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v10 = sub_10000588C(&qword_10164DBB0);
  __chkstk_darwin(v10 - 8);
  uint64_t v12 = (char *)&v25 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  Transaction.capture()();
  if (a1)
  {
    static os_log_type_t.error.getter();
    if (qword_101637250 != -1) {
      swift_once();
    }
    os_log(_:dso:log:_:_:)();
    dispatch_group_leave(a3);
  }
  else
  {
    dispatch_group_t v26 = a3;
    static os_log_type_t.default.getter();
    if (qword_101637250 != -1) {
      swift_once();
    }
    sub_10000588C((uint64_t *)&unk_10163AD00);
    uint64_t v13 = swift_allocObject();
    *(_OWORD *)(v13 + 16) = xmmword_101342130;
    type metadata accessor for UUID();
    sub_100A5FAC4((unint64_t *)&qword_101638B10, (void (*)(uint64_t))&type metadata accessor for UUID);
    uint64_t v14 = dispatch thunk of CustomStringConvertible.description.getter();
    uint64_t v16 = v15;
    *(void *)(v13 + 56) = &type metadata for String;
    *(void *)(v13 + 64) = sub_10000B4CC();
    *(void *)(v13 + 32) = v14;
    *(void *)(v13 + 40) = v16;
    os_log(_:dso:log:_:_:)();
    swift_bridgeObjectRelease();
    uint64_t v17 = dispatch_group_create();
    dispatch_group_enter(v17);
    uint64_t v18 = type metadata accessor for TaskPriority();
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v18 - 8) + 56))(v12, 1, 1, v18);
    id v19 = (void *)swift_allocObject();
    v19[2] = 0;
    v19[3] = 0;
    v19[4] = v17;
    v19[5] = a5;
    uint64_t v20 = v17;
    swift_retain();
    sub_100885EBC((uint64_t)v12, (uint64_t)&unk_101656578, (uint64_t)v19);
    swift_release();
    OS_dispatch_group.wait()();

    uint64_t v21 = *(void *)(a6 + 16);
    if (v21)
    {
      uint64_t v22 = *(void *)(type metadata accessor for OwnedBeaconRecord() - 8);
      uint64_t v23 = a6 + ((*(unsigned __int8 *)(v22 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v22 + 80));
      uint64_t v24 = *(void *)(v22 + 72);
      swift_bridgeObjectRetain();
      do
      {
        sub_100A632D8(v23);
        v23 += v24;
        --v21;
      }
      while (v21);
      swift_bridgeObjectRelease();
    }
    dispatch_group_leave(v26);
  }
}

uint64_t sub_100A5908C(char a1)
{
  return sub_100A58404(a1);
}

uint64_t sub_100A590B0(char a1)
{
  return sub_100A58648(a1);
}

uint64_t sub_100A590D4(uint64_t a1)
{
  return sub_10044B124(a1, qword_10170E858);
}

uint64_t sub_100A590F8(void *a1)
{
  uint64_t v1 = a1[3];
  uint64_t v2 = a1[4];
  sub_10001CD44(a1, v1);
  return (*(uint64_t (**)(uint64_t, uint64_t))(v2 + 448))(v1, v2);
}

void *sub_100A59150(uint64_t *a1)
{
  uint64_t v3 = *a1;
  unint64_t v2 = a1[1];
  switch(v2 >> 62)
  {
    case 1uLL:
      if ((int)v3 != v3 >> 32) {
        goto LABEL_7;
      }
      return 0;
    case 2uLL:
      if (*(void *)(v3 + 16) == *(void *)(v3 + 24)) {
        return 0;
      }
LABEL_7:
      sub_1000361E0(*a1, v2);
      goto LABEL_8;
    case 3uLL:
      goto LABEL_3;
    default:
      if ((v2 & 0xFF000000000000) == 0)
      {
LABEL_3:
        sub_10001CFB8(*a1, v2);
        return 0;
      }
LABEL_8:
      sub_101156DE4(v3, v2, &v8);
      if (v1)
      {
        __break(1u);
        JUMPOUT(0x100A59288);
      }
      sub_10001CFB8(v3, v2);
      uint64_t v5 = v8;
      if (v8)
      {
        id v6 = [v8 recordChangeTag];

        if (v6)
        {
          uint64_t v5 = (void *)static String._unconditionallyBridgeFromObjectiveC(_:)();

          return v5;
        }
        return 0;
      }
      return v5;
  }
}

uint64_t sub_100A59298()
{
  uint64_t v0 = sub_10000588C(&qword_1016566C8);
  if (swift_isClassType()) {
    uint64_t v1 = v0;
  }
  else {
    uint64_t v1 = 0;
  }
  if (v1) {
    unint64_t v2 = &qword_10166BD20;
  }
  else {
    unint64_t v2 = (uint64_t *)&unk_1016566D0;
  }

  return sub_10000588C(v2);
}

Swift::Int sub_100A592F8(void *a1)
{
  uint64_t v2 = v1;
  uint64_t v141 = type metadata accessor for KeySyncMetadataDisplay();
  uint64_t v134 = *(void *)(v141 - 8);
  uint64_t v4 = __chkstk_darwin(v141);
  uint64_t v131 = (uint64_t)&v125 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = __chkstk_darwin(v4);
  uint64_t v142 = (uint64_t)&v125 - v7;
  uint64_t v8 = __chkstk_darwin(v6);
  uint64_t v138 = (uint64_t)&v125 - v9;
  __chkstk_darwin(v8);
  uint64_t v137 = (uint64_t)&v125 - v10;
  Swift::Int v11 = a1[1];
  Swift::Int result = _minimumMergeRunLength(_:)(v11);
  if (result >= v11)
  {
    if (v11 < 0) {
      goto LABEL_142;
    }
    if (v11) {
      return sub_100A59DD4(0, v11, 1, a1);
    }
    return result;
  }
  if (v11 >= 0) {
    uint64_t v13 = v11;
  }
  else {
    uint64_t v13 = v11 + 1;
  }
  if (v11 < -1) {
    goto LABEL_150;
  }
  Swift::Int v127 = result;
  if (v11 < 2)
  {
    uint64_t v17 = _swiftEmptyArrayStorage;
    unint64_t v133 = (unint64_t)_swiftEmptyArrayStorage
         + ((*(unsigned __int8 *)(v134 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v134 + 80));
    if (v11 != 1)
    {
      unint64_t v20 = _swiftEmptyArrayStorage[2];
      id v19 = (char *)_swiftEmptyArrayStorage;
LABEL_107:
      uint64_t v126 = v17;
      if (v20 >= 2)
      {
        Swift::Int v117 = *a1;
        do
        {
          unint64_t v118 = v20 - 2;
          if (v20 < 2) {
            goto LABEL_137;
          }
          if (!v117) {
            goto LABEL_149;
          }
          uint64_t v119 = v19;
          uint64_t v120 = v19 + 32;
          uint64_t v121 = *(void *)&v19[16 * v118 + 32];
          uint64_t v122 = *(void *)&v19[16 * v20 + 24];
          sub_100A5A098(v117 + *(void *)(v134 + 72) * v121, v117 + *(void *)(v134 + 72) * *(void *)&v120[16 * v20 - 16], v117 + *(void *)(v134 + 72) * v122, v133);
          if (v2) {
            break;
          }
          if (v122 < v121) {
            goto LABEL_138;
          }
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
            uint64_t v119 = sub_100B73584((uint64_t)v119);
          }
          if (v118 >= *((void *)v119 + 2)) {
            goto LABEL_139;
          }
          uint64_t v123 = &v119[16 * v118 + 32];
          *(void *)uint64_t v123 = v121;
          *((void *)v123 + 1) = v122;
          unint64_t v124 = *((void *)v119 + 2);
          if (v20 > v124) {
            goto LABEL_140;
          }
          id v19 = v119;
          memmove(&v119[16 * v20 + 16], &v119[16 * v20 + 32], 16 * (v124 - v20));
          *((void *)v119 + 2) = v124 - 1;
          unint64_t v20 = v124 - 1;
        }
        while (v124 > 2);
      }
LABEL_118:
      swift_bridgeObjectRelease();
      void v126[2] = 0;
      return swift_bridgeObjectRelease();
    }
    uint64_t v126 = _swiftEmptyArrayStorage;
  }
  else
  {
    uint64_t v14 = v13 >> 1;
    uint64_t v15 = static Array._allocateBufferUninitialized(minimumCapacity:)();
    *(void *)(v15 + 16) = v14;
    uint64_t v16 = *(unsigned __int8 *)(v134 + 80);
    uint64_t v126 = (void *)v15;
    unint64_t v133 = v15 + ((v16 + 32) & ~v16);
  }
  Swift::Int v18 = 0;
  id v19 = (char *)_swiftEmptyArrayStorage;
  uint64_t v140 = a1;
  while (1)
  {
    Swift::Int v21 = v18;
    Swift::Int v22 = v18 + 1;
    Swift::Int v132 = v18;
    if (v18 + 1 >= v11)
    {
      Swift::Int v39 = v18 + 1;
      goto LABEL_59;
    }
    uint64_t v129 = v2;
    Swift::Int v23 = *(void *)(v134 + 72);
    uint64_t v24 = *a1 + v23 * v22;
    Swift::Int v136 = *a1;
    Swift::Int v25 = v136;
    uint64_t v26 = v137;
    sub_100A61D20(v24, v137, (uint64_t (*)(void))type metadata accessor for KeySyncMetadataDisplay);
    uint64_t v27 = v25 + v23 * v21;
    uint64_t v28 = v138;
    sub_100A61D20(v27, v138, (uint64_t (*)(void))type metadata accessor for KeySyncMetadataDisplay);
    LODWORD(v139) = static Date.> infix(_:_:)();
    sub_100A61D88(v28, (uint64_t (*)(void))type metadata accessor for KeySyncMetadataDisplay);
    uint64_t v29 = v26;
    Swift::Int v30 = v136;
    sub_100A61D88(v29, (uint64_t (*)(void))type metadata accessor for KeySyncMetadataDisplay);
    Swift::Int v143 = v23;
    if (v21 + 2 >= v11)
    {
      Swift::Int v33 = v21 + 2;
    }
    else
    {
      Swift::Int v31 = v23;
      uint64_t v128 = v19;
      uint64_t v32 = v23 * v22;
      Swift::Int v33 = v21 + 2;
      uint64_t v34 = v31 * (v21 + 2);
      while (1)
      {
        Swift::Int v35 = v11;
        uint64_t v36 = v137;
        sub_100A61D20(v30 + v34, v137, (uint64_t (*)(void))type metadata accessor for KeySyncMetadataDisplay);
        uint64_t v37 = v138;
        sub_100A61D20(v30 + v32, v138, (uint64_t (*)(void))type metadata accessor for KeySyncMetadataDisplay);
        int v38 = static Date.> infix(_:_:)();
        sub_100A61D88(v37, (uint64_t (*)(void))type metadata accessor for KeySyncMetadataDisplay);
        sub_100A61D88(v36, (uint64_t (*)(void))type metadata accessor for KeySyncMetadataDisplay);
        if ((v139 ^ v38)) {
          break;
        }
        v30 += v143;
        ++v33;
        Swift::Int v11 = v35;
        if (v35 == v33)
        {
          Swift::Int v33 = v35;
          id v19 = v128;
          Swift::Int v21 = v132;
          goto LABEL_25;
        }
      }
      id v19 = v128;
      Swift::Int v21 = v132;
      Swift::Int v11 = v35;
    }
LABEL_25:
    a1 = v140;
    if ((v139 & 1) == 0)
    {
      Swift::Int v39 = v33;
      goto LABEL_39;
    }
    if (v33 < v21) {
      goto LABEL_143;
    }
    Swift::Int v39 = v33;
    if (v21 < v33) {
      break;
    }
LABEL_39:
    uint64_t v2 = v129;
    if (v39 < v11) {
      goto LABEL_42;
    }
LABEL_59:
    if (v39 < v21) {
      goto LABEL_136;
    }
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    Swift::Int v139 = v39;
    if ((isUniquelyReferenced_nonNull_native & 1) == 0) {
      id v19 = sub_100B729CC(0, *((void *)v19 + 2) + 1, 1, v19);
    }
    unint64_t v66 = *((void *)v19 + 2);
    unint64_t v65 = *((void *)v19 + 3);
    unint64_t v20 = v66 + 1;
    if (v66 >= v65 >> 1) {
      id v19 = sub_100B729CC((char *)(v65 > 1), v66 + 1, 1, v19);
    }
    *((void *)v19 + 2) = v20;
    uint64_t v67 = v19 + 32;
    uint64_t v68 = &v19[16 * v66 + 32];
    Swift::Int v69 = v139;
    *(void *)uint64_t v68 = v21;
    *((void *)v68 + 1) = v69;
    if (v66)
    {
      while (1)
      {
        unint64_t v70 = v20 - 1;
        if (v20 >= 4)
        {
          uint64_t v75 = &v67[16 * v20];
          uint64_t v76 = *((void *)v75 - 8);
          uint64_t v77 = *((void *)v75 - 7);
          BOOL v81 = __OFSUB__(v77, v76);
          uint64_t v78 = v77 - v76;
          if (v81) {
            goto LABEL_125;
          }
          uint64_t v80 = *((void *)v75 - 6);
          uint64_t v79 = *((void *)v75 - 5);
          BOOL v81 = __OFSUB__(v79, v80);
          uint64_t v73 = v79 - v80;
          char v74 = v81;
          if (v81) {
            goto LABEL_126;
          }
          unint64_t v82 = v20 - 2;
          id v83 = &v67[16 * v20 - 32];
          uint64_t v85 = *(void *)v83;
          uint64_t v84 = *((void *)v83 + 1);
          BOOL v81 = __OFSUB__(v84, v85);
          uint64_t v86 = v84 - v85;
          if (v81) {
            goto LABEL_128;
          }
          BOOL v81 = __OFADD__(v73, v86);
          uint64_t v87 = v73 + v86;
          if (v81) {
            goto LABEL_131;
          }
          if (v87 >= v78)
          {
            uint64_t v105 = &v67[16 * v70];
            uint64_t v107 = *(void *)v105;
            uint64_t v106 = *((void *)v105 + 1);
            BOOL v81 = __OFSUB__(v106, v107);
            uint64_t v108 = v106 - v107;
            if (v81) {
              goto LABEL_135;
            }
            BOOL v98 = v73 < v108;
            goto LABEL_96;
          }
        }
        else
        {
          if (v20 != 3)
          {
            uint64_t v99 = *((void *)v19 + 4);
            uint64_t v100 = *((void *)v19 + 5);
            BOOL v81 = __OFSUB__(v100, v99);
            uint64_t v92 = v100 - v99;
            char v93 = v81;
            goto LABEL_90;
          }
          uint64_t v72 = *((void *)v19 + 4);
          uint64_t v71 = *((void *)v19 + 5);
          BOOL v81 = __OFSUB__(v71, v72);
          uint64_t v73 = v71 - v72;
          char v74 = v81;
        }
        if (v74) {
          goto LABEL_127;
        }
        unint64_t v82 = v20 - 2;
        uint64_t v88 = &v67[16 * v20 - 32];
        uint64_t v90 = *(void *)v88;
        uint64_t v89 = *((void *)v88 + 1);
        BOOL v91 = __OFSUB__(v89, v90);
        uint64_t v92 = v89 - v90;
        char v93 = v91;
        if (v91) {
          goto LABEL_130;
        }
        uint64_t v94 = &v67[16 * v70];
        uint64_t v96 = *(void *)v94;
        uint64_t v95 = *((void *)v94 + 1);
        BOOL v81 = __OFSUB__(v95, v96);
        uint64_t v97 = v95 - v96;
        if (v81) {
          goto LABEL_133;
        }
        if (__OFADD__(v92, v97)) {
          goto LABEL_134;
        }
        if (v92 + v97 >= v73)
        {
          BOOL v98 = v73 < v97;
LABEL_96:
          if (v98) {
            unint64_t v70 = v82;
          }
          goto LABEL_98;
        }
LABEL_90:
        if (v93) {
          goto LABEL_129;
        }
        uint64_t v101 = &v67[16 * v70];
        uint64_t v103 = *(void *)v101;
        uint64_t v102 = *((void *)v101 + 1);
        BOOL v81 = __OFSUB__(v102, v103);
        uint64_t v104 = v102 - v103;
        if (v81) {
          goto LABEL_132;
        }
        if (v104 < v92) {
          goto LABEL_15;
        }
LABEL_98:
        unint64_t v109 = v70 - 1;
        if (v70 - 1 >= v20)
        {
          __break(1u);
LABEL_122:
          __break(1u);
LABEL_123:
          __break(1u);
LABEL_124:
          __break(1u);
LABEL_125:
          __break(1u);
LABEL_126:
          __break(1u);
LABEL_127:
          __break(1u);
LABEL_128:
          __break(1u);
LABEL_129:
          __break(1u);
LABEL_130:
          __break(1u);
LABEL_131:
          __break(1u);
LABEL_132:
          __break(1u);
LABEL_133:
          __break(1u);
LABEL_134:
          __break(1u);
LABEL_135:
          __break(1u);
LABEL_136:
          __break(1u);
LABEL_137:
          __break(1u);
LABEL_138:
          __break(1u);
LABEL_139:
          __break(1u);
LABEL_140:
          __break(1u);
LABEL_141:
          __break(1u);
LABEL_142:
          __break(1u);
LABEL_143:
          __break(1u);
LABEL_144:
          __break(1u);
          goto LABEL_145;
        }
        Swift::Int v110 = *a1;
        if (!*a1) {
          goto LABEL_147;
        }
        uint64_t v111 = v19;
        uint64_t v112 = &v67[16 * v109];
        uint64_t v113 = *(void *)v112;
        uint64_t v114 = &v67[16 * v70];
        uint64_t v115 = *((void *)v114 + 1);
        sub_100A5A098(v110 + *(void *)(v134 + 72) * *(void *)v112, v110 + *(void *)(v134 + 72) * *(void *)v114, v110 + *(void *)(v134 + 72) * v115, v133);
        if (v2) {
          goto LABEL_118;
        }
        if (v115 < v113) {
          goto LABEL_122;
        }
        if (v70 > *((void *)v111 + 2)) {
          goto LABEL_123;
        }
        *(void *)uint64_t v112 = v113;
        *(void *)&v67[16 * v109 + 8] = v115;
        unint64_t v116 = *((void *)v111 + 2);
        if (v70 >= v116) {
          goto LABEL_124;
        }
        id v19 = v111;
        unint64_t v20 = v116 - 1;
        memmove(&v67[16 * v70], v114 + 16, 16 * (v116 - 1 - v70));
        *((void *)v111 + 2) = v116 - 1;
        a1 = v140;
        if (v116 <= 2) {
          goto LABEL_15;
        }
      }
    }
    unint64_t v20 = 1;
LABEL_15:
    Swift::Int v11 = a1[1];
    Swift::Int v18 = v139;
    if (v139 >= v11)
    {
      uint64_t v17 = v126;
      goto LABEL_107;
    }
  }
  Swift::Int v139 = v11;
  uint64_t v128 = v19;
  uint64_t v40 = 0;
  Swift::Int v41 = v143;
  uint64_t v42 = v143 * (v33 - 1);
  Swift::Int v43 = v33 * v143;
  Swift::Int v44 = v21;
  uint64_t v45 = v21 * v143;
  do
  {
    if (v44 != v39 + v40 - 1)
    {
      Swift::Int v46 = v136;
      if (!v136) {
        goto LABEL_148;
      }
      unint64_t v47 = v136 + v45;
      uint64_t v48 = v136 + v42;
      sub_100A616BC(v136 + v45, v131, (uint64_t (*)(void))type metadata accessor for KeySyncMetadataDisplay);
      if (v45 < v42 || v47 >= v46 + v43)
      {
        swift_arrayInitWithTakeFrontToBack();
        Swift::Int v41 = v143;
      }
      else
      {
        Swift::Int v41 = v143;
        if (v45 != v42) {
          swift_arrayInitWithTakeBackToFront();
        }
      }
      sub_100A616BC(v131, v48, (uint64_t (*)(void))type metadata accessor for KeySyncMetadataDisplay);
      a1 = v140;
      Swift::Int v39 = v33;
    }
    ++v44;
    --v40;
    v42 -= v41;
    v43 -= v41;
    v45 += v41;
  }
  while (v44 < v39 + v40);
  id v19 = v128;
  uint64_t v2 = v129;
  Swift::Int v21 = v132;
  Swift::Int v11 = v139;
  if (v39 >= v139) {
    goto LABEL_59;
  }
LABEL_42:
  if (__OFSUB__(v39, v21)) {
    goto LABEL_141;
  }
  if (v39 - v21 >= v127) {
    goto LABEL_59;
  }
  if (__OFADD__(v21, v127)) {
    goto LABEL_144;
  }
  if (v21 + v127 >= v11) {
    Swift::Int v49 = v11;
  }
  else {
    Swift::Int v49 = v21 + v127;
  }
  if (v49 >= v21)
  {
    if (v39 != v49)
    {
      uint64_t v128 = v19;
      uint64_t v129 = v2;
      uint64_t v50 = *(void *)(v134 + 72);
      uint64_t v51 = v50 * (v39 - 1);
      uint64_t v135 = v50;
      Swift::Int v52 = v39 * v50;
      Swift::Int v130 = v49;
      do
      {
        uint64_t v54 = 0;
        Swift::Int v139 = v39;
        Swift::Int v136 = v52;
        while (1)
        {
          Swift::Int v143 = v21;
          Swift::Int v55 = *a1;
          uint64_t v56 = v137;
          sub_100A61D20(v52 + v54 + *a1, v137, (uint64_t (*)(void))type metadata accessor for KeySyncMetadataDisplay);
          uint64_t v57 = v51;
          uint64_t v58 = v51 + v54 + v55;
          uint64_t v59 = a1;
          uint64_t v60 = v138;
          sub_100A61D20(v58, v138, (uint64_t (*)(void))type metadata accessor for KeySyncMetadataDisplay);
          char v61 = static Date.> infix(_:_:)();
          sub_100A61D88(v60, (uint64_t (*)(void))type metadata accessor for KeySyncMetadataDisplay);
          sub_100A61D88(v56, (uint64_t (*)(void))type metadata accessor for KeySyncMetadataDisplay);
          if ((v61 & 1) == 0) {
            break;
          }
          uint64_t v62 = *v59;
          if (!*v59) {
            goto LABEL_146;
          }
          Swift::Int v52 = v136;
          uint64_t v51 = v57;
          uint64_t v63 = v62 + v57 + v54;
          sub_100A616BC(v62 + v136 + v54, v142, (uint64_t (*)(void))type metadata accessor for KeySyncMetadataDisplay);
          swift_arrayInitWithTakeFrontToBack();
          sub_100A616BC(v142, v63, (uint64_t (*)(void))type metadata accessor for KeySyncMetadataDisplay);
          v54 -= v135;
          Swift::Int v21 = v143 + 1;
          Swift::Int v53 = v139;
          a1 = v140;
          if (v139 == v143 + 1) {
            goto LABEL_52;
          }
        }
        Swift::Int v53 = v139;
        a1 = v59;
        uint64_t v51 = v57;
        Swift::Int v52 = v136;
LABEL_52:
        Swift::Int v39 = v53 + 1;
        v51 += v135;
        v52 += v135;
        Swift::Int v21 = v132;
      }
      while (v39 != v130);
      Swift::Int v39 = v130;
      id v19 = v128;
      uint64_t v2 = v129;
    }
    goto LABEL_59;
  }
LABEL_145:
  __break(1u);
LABEL_146:
  __break(1u);
LABEL_147:
  __break(1u);
LABEL_148:
  __break(1u);
LABEL_149:
  __break(1u);
LABEL_150:
  Swift::Int result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_100A59DD4(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  uint64_t v26 = a1;
  uint64_t v29 = type metadata accessor for KeySyncMetadataDisplay();
  uint64_t v7 = __chkstk_darwin(v29);
  uint64_t v30 = (uint64_t)&v24 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = __chkstk_darwin(v7);
  Swift::Int v11 = (char *)&v24 - v10;
  uint64_t result = __chkstk_darwin(v9);
  uint64_t v15 = (char *)&v24 - v14;
  uint64_t v28 = a3;
  uint64_t v25 = a2;
  if (a3 != a2)
  {
    uint64_t v16 = *(void *)(v13 + 72);
    uint64_t v32 = v16 * (v28 - 1);
    uint64_t v27 = v16;
    uint64_t v31 = v16 * v28;
LABEL_5:
    uint64_t v17 = 0;
    uint64_t v18 = v26;
    while (1)
    {
      id v19 = a4;
      uint64_t v20 = *a4;
      sub_100A61D20(v31 + v17 + v20, (uint64_t)v15, (uint64_t (*)(void))type metadata accessor for KeySyncMetadataDisplay);
      sub_100A61D20(v32 + v17 + v20, (uint64_t)v11, (uint64_t (*)(void))type metadata accessor for KeySyncMetadataDisplay);
      char v21 = static Date.> infix(_:_:)();
      sub_100A61D88((uint64_t)v11, (uint64_t (*)(void))type metadata accessor for KeySyncMetadataDisplay);
      a4 = v19;
      uint64_t result = sub_100A61D88((uint64_t)v15, (uint64_t (*)(void))type metadata accessor for KeySyncMetadataDisplay);
      if ((v21 & 1) == 0)
      {
LABEL_4:
        v32 += v27;
        v31 += v27;
        if (++v28 == v25) {
          return result;
        }
        goto LABEL_5;
      }
      uint64_t v22 = *v19;
      if (!*v19) {
        break;
      }
      uint64_t v23 = v22 + v32 + v17;
      sub_100A616BC(v22 + v31 + v17, v30, (uint64_t (*)(void))type metadata accessor for KeySyncMetadataDisplay);
      swift_arrayInitWithTakeFrontToBack();
      uint64_t result = sub_100A616BC(v30, v23, (uint64_t (*)(void))type metadata accessor for KeySyncMetadataDisplay);
      v17 -= v27;
      ++v18;
      a4 = v19;
      if (v28 == v18) {
        goto LABEL_4;
      }
    }
    __break(1u);
  }
  return result;
}

uint64_t sub_100A5A098(unint64_t a1, unint64_t a2, unint64_t a3, unint64_t a4)
{
  uint64_t v44 = type metadata accessor for KeySyncMetadataDisplay();
  uint64_t v8 = __chkstk_darwin(v44);
  uint64_t v43 = (uint64_t)&v40 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8);
  Swift::Int v11 = (char *)&v40 - v10;
  uint64_t v13 = *(void *)(v12 + 72);
  if (!v13)
  {
    __break(1u);
LABEL_61:
    __break(1u);
LABEL_62:
    __break(1u);
    goto LABEL_63;
  }
  if (a2 - a1 == 0x8000000000000000 && v13 == -1) {
    goto LABEL_61;
  }
  int64_t v14 = a3 - a2;
  if (a3 - a2 == 0x8000000000000000 && v13 == -1) {
    goto LABEL_62;
  }
  uint64_t v15 = (uint64_t)(a2 - a1) / v13;
  unint64_t v47 = a1;
  unint64_t v46 = a4;
  uint64_t v16 = v14 / v13;
  if (v15 >= v14 / v13)
  {
    if ((v16 & 0x8000000000000000) == 0)
    {
      uint64_t v18 = v16 * v13;
      if (a4 < a2 || a2 + v18 <= a4)
      {
        swift_arrayInitWithTakeFrontToBack();
      }
      else if (a4 != a2)
      {
        swift_arrayInitWithTakeBackToFront();
      }
      unint64_t v26 = a4 + v18;
      unint64_t v45 = a4 + v18;
      unint64_t v47 = a2;
      if (v18 >= 1 && a1 < a2)
      {
        unint64_t v41 = a4;
        unint64_t v42 = a1;
        do
        {
          unint64_t v28 = a3 - v13;
          sub_100A61D20(v26 - v13, (uint64_t)v11, (uint64_t (*)(void))type metadata accessor for KeySyncMetadataDisplay);
          unint64_t v29 = a2 - v13;
          unint64_t v30 = a3;
          uint64_t v31 = (uint64_t)v11;
          uint64_t v32 = v43;
          sub_100A61D20(a2 - v13, v43, (uint64_t (*)(void))type metadata accessor for KeySyncMetadataDisplay);
          char v33 = static Date.> infix(_:_:)();
          uint64_t v34 = v32;
          Swift::Int v11 = (char *)v31;
          sub_100A61D88(v34, (uint64_t (*)(void))type metadata accessor for KeySyncMetadataDisplay);
          sub_100A61D88(v31, (uint64_t (*)(void))type metadata accessor for KeySyncMetadataDisplay);
          if (v33)
          {
            if (v30 < a2 || v28 >= a2)
            {
              swift_arrayInitWithTakeFrontToBack();
              unint64_t v36 = v41;
              unint64_t v37 = v42;
            }
            else
            {
              BOOL v35 = v30 == a2;
              unint64_t v36 = v41;
              unint64_t v37 = v42;
              if (!v35) {
                swift_arrayInitWithTakeBackToFront();
              }
            }
            v47 -= v13;
          }
          else
          {
            unint64_t v38 = v45;
            v45 -= v13;
            if (v30 < v38 || v28 >= v38)
            {
              swift_arrayInitWithTakeFrontToBack();
              unint64_t v29 = a2;
              unint64_t v36 = v41;
              unint64_t v37 = v42;
            }
            else
            {
              unint64_t v37 = v42;
              if (v30 != v38) {
                swift_arrayInitWithTakeBackToFront();
              }
              unint64_t v29 = a2;
              unint64_t v36 = v41;
            }
          }
          unint64_t v26 = v45;
          if (v45 <= v36) {
            break;
          }
          a2 = v29;
          a3 = v28;
        }
        while (v29 > v37);
      }
      goto LABEL_59;
    }
  }
  else if ((v15 & 0x8000000000000000) == 0)
  {
    uint64_t v17 = v15 * v13;
    if (a4 < a1 || a1 + v17 <= a4)
    {
      swift_arrayInitWithTakeFrontToBack();
    }
    else if (a4 != a1)
    {
      swift_arrayInitWithTakeBackToFront();
    }
    unint64_t v19 = a4 + v17;
    unint64_t v45 = a4 + v17;
    if (v17 >= 1 && a2 < a3)
    {
      do
      {
        sub_100A61D20(a2, (uint64_t)v11, (uint64_t (*)(void))type metadata accessor for KeySyncMetadataDisplay);
        uint64_t v21 = v43;
        sub_100A61D20(a4, v43, (uint64_t (*)(void))type metadata accessor for KeySyncMetadataDisplay);
        char v22 = static Date.> infix(_:_:)();
        sub_100A61D88(v21, (uint64_t (*)(void))type metadata accessor for KeySyncMetadataDisplay);
        sub_100A61D88((uint64_t)v11, (uint64_t (*)(void))type metadata accessor for KeySyncMetadataDisplay);
        unint64_t v23 = v47;
        if (v22)
        {
          unint64_t v24 = a2 + v13;
          if (v47 < a2 || v47 >= v24)
          {
            swift_arrayInitWithTakeFrontToBack();
          }
          else if (v47 == a2)
          {
            unint64_t v23 = a2;
          }
          else
          {
            swift_arrayInitWithTakeBackToFront();
          }
        }
        else
        {
          unint64_t v25 = v46 + v13;
          if (v47 < v46 || v47 >= v25)
          {
            swift_arrayInitWithTakeFrontToBack();
          }
          else if (v47 != v46)
          {
            swift_arrayInitWithTakeBackToFront();
          }
          unint64_t v46 = v25;
          unint64_t v24 = a2;
        }
        unint64_t v47 = v23 + v13;
        a4 = v46;
        if (v46 >= v19) {
          break;
        }
        a2 = v24;
      }
      while (v24 < a3);
    }
LABEL_59:
    sub_100B731D8(&v47, &v46, (uint64_t *)&v45);
    return 1;
  }
LABEL_63:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_100A5A5B4(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for UUID();
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t v4 = __chkstk_darwin(v2);
  unint64_t v38 = (char *)&v31 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v4);
  unint64_t v37 = (char *)&v31 - v6;
  sub_10000588C(&qword_101656718);
  uint64_t result = static _DictionaryStorage.copy(original:)();
  uint64_t v8 = result;
  int64_t v9 = 0;
  uint64_t v40 = a1;
  uint64_t v41 = v3;
  uint64_t v12 = *(void *)(a1 + 64);
  uint64_t v11 = a1 + 64;
  uint64_t v10 = v12;
  uint64_t v13 = 1 << *(unsigned char *)(v11 - 32);
  uint64_t v14 = -1;
  if (v13 < 64) {
    uint64_t v14 = ~(-1 << v13);
  }
  unint64_t v15 = v14 & v10;
  uint64_t v32 = v11;
  int64_t v33 = (unint64_t)(v13 + 63) >> 6;
  uint64_t v35 = v3 + 32;
  uint64_t v36 = v3 + 16;
  uint64_t v34 = result + 64;
  uint64_t v39 = result;
  uint64_t v16 = v38;
  if ((v14 & v10) == 0) {
    goto LABEL_5;
  }
LABEL_4:
  unint64_t v17 = __clz(__rbit64(v15));
  v15 &= v15 - 1;
  int64_t v42 = v9;
  for (unint64_t i = v17 | (v9 << 6); ; unint64_t i = __clz(__rbit64(v21)) + (v20 << 6))
  {
    uint64_t v24 = v40;
    uint64_t v23 = v41;
    unint64_t v25 = *(void *)(v41 + 72) * i;
    unint64_t v26 = v37;
    (*(void (**)(char *, unint64_t, uint64_t))(v41 + 16))(v37, *(void *)(v40 + 48) + v25, v2);
    uint64_t v45 = *(void *)(*(void *)(v24 + 56) + 8 * i);
    uint64_t v27 = *(void (**)(char *, char *, uint64_t))(v23 + 32);
    v27(v16, v26, v2);
    swift_bridgeObjectRetain();
    uint64_t v28 = v43;
    sub_100A4DBE8(&v45, &v44);
    uint64_t v43 = v28;
    if (v28)
    {
      uint64_t v8 = v39;
      swift_release();
      (*(void (**)(char *, uint64_t))(v41 + 8))(v16, v2);
      swift_bridgeObjectRelease();
      return v8;
    }
    swift_bridgeObjectRelease();
    *(void *)(v34 + ((i >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << i;
    uint64_t v8 = v39;
    uint64_t result = ((uint64_t (*)(unint64_t, char *, uint64_t))v27)(*(void *)(v39 + 48) + v25, v16, v2);
    *(void *)(*(void *)(v8 + 56) + 8 * i) = v44;
    uint64_t v29 = *(void *)(v8 + 16);
    BOOL v19 = __OFADD__(v29, 1);
    uint64_t v30 = v29 + 1;
    if (v19)
    {
      __break(1u);
LABEL_27:
      __break(1u);
      goto LABEL_28;
    }
    *(void *)(v8 + 16) = v30;
    int64_t v9 = v42;
    if (v15) {
      goto LABEL_4;
    }
LABEL_5:
    BOOL v19 = __OFADD__(v9, 1);
    int64_t v20 = v9 + 1;
    if (v19) {
      goto LABEL_27;
    }
    if (v20 >= v33) {
      return v8;
    }
    unint64_t v21 = *(void *)(v32 + 8 * v20);
    if (!v21) {
      break;
    }
LABEL_15:
    unint64_t v15 = (v21 - 1) & v21;
    int64_t v42 = v20;
  }
  int64_t v22 = v20 + 1;
  if (v20 + 1 >= v33) {
    return v8;
  }
  unint64_t v21 = *(void *)(v32 + 8 * v22);
  if (v21) {
    goto LABEL_14;
  }
  int64_t v22 = v20 + 2;
  if (v20 + 2 >= v33) {
    return v8;
  }
  unint64_t v21 = *(void *)(v32 + 8 * v22);
  if (v21) {
    goto LABEL_14;
  }
  int64_t v22 = v20 + 3;
  if (v20 + 3 >= v33) {
    return v8;
  }
  unint64_t v21 = *(void *)(v32 + 8 * v22);
  if (v21)
  {
LABEL_14:
    int64_t v20 = v22;
    goto LABEL_15;
  }
  while (1)
  {
    int64_t v20 = v22 + 1;
    if (__OFADD__(v22, 1)) {
      break;
    }
    if (v20 >= v33) {
      return v8;
    }
    unint64_t v21 = *(void *)(v32 + 8 * v20);
    ++v22;
    if (v21) {
      goto LABEL_15;
    }
  }
LABEL_28:
  __break(1u);
  return result;
}

void *sub_100A5A918(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  uint64_t v13 = a1;
  uint64_t v14 = a2;
  uint64_t v6 = type metadata accessor for OS_dispatch_queue.Attributes();
  __chkstk_darwin(v6);
  uint64_t v7 = type metadata accessor for DispatchQoS();
  __chkstk_darwin(v7 - 8);
  uint64_t v8 = type metadata accessor for OS_dispatch_queue.AutoreleaseFrequency();
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  uint64_t v11 = (char *)&v13 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v17 = sub_10001D4B0(0, &qword_1016569D0);
  uint64_t v18 = &off_1015FB640;
  *(void *)&long long v16 = a3;
  sub_10001D4B0(0, (unint64_t *)&qword_1016376E0);
  (*(void (**)(char *, void, uint64_t))(v9 + 104))(v11, enum case for OS_dispatch_queue.AutoreleaseFrequency.workItem(_:), v8);
  static DispatchQoS.unspecified.getter();
  unint64_t v15 = _swiftEmptyArrayStorage;
  sub_100A5FAC4((unint64_t *)&qword_101638CC0, (void (*)(uint64_t))&type metadata accessor for OS_dispatch_queue.Attributes);
  sub_10000588C((uint64_t *)&unk_1016376F0);
  sub_100062734((unint64_t *)&qword_101638CD0, (uint64_t *)&unk_1016376F0);
  dispatch thunk of SetAlgebra.init<A>(_:)();
  a4[2] = OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)();
  a4[8] = v13;
  a4[9] = v14;
  a4[10] = _swiftEmptyArrayStorage;
  sub_10001CEB0(&v16, (uint64_t)(a4 + 3));
  return a4;
}

void *sub_100A5ABCC(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2;
  uint64_t v56 = a2;
  uint64_t v5 = sub_10000588C(&qword_101649E40);
  __chkstk_darwin(v5 - 8);
  uint64_t v7 = (char *)v44 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for URL();
  uint64_t v9 = *(void *)(v8 - 8);
  uint64_t v10 = __chkstk_darwin(v8);
  Swift::Int v55 = (char *)v44 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v10);
  uint64_t v13 = (char *)v44 - v12;
  uint64_t v14 = sub_10000588C(&qword_10163B9F0);
  __chkstk_darwin(v14 - 8);
  long long v16 = (char *)v44 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v17 = type metadata accessor for OwnedBeaconRecord();
  uint64_t v18 = __chkstk_darwin(v17);
  uint64_t v54 = (uint64_t)v44 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v18);
  uint64_t v46 = (uint64_t)v44 - v21;
  uint64_t v65 = *(void *)(a1 + 16);
  if (v65)
  {
    uint64_t v22 = v20;
    uint64_t v61 = type metadata accessor for BeaconStoreFileRecord();
    uint64_t v23 = *(void *)(v61 - 8);
    uint64_t v24 = a1;
    uint64_t v25 = a1 + ((*(unsigned __int8 *)(v23 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v23 + 80));
    uint64_t v60 = (unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48);
    uint64_t v51 = (void (**)(char *, uint64_t, uint64_t))(v9 + 16);
    Swift::Int v52 = (void (**)(char *, char *, uint64_t))(v9 + 32);
    uint64_t v50 = (void (**)(char *, uint64_t))(v9 + 8);
    uint64_t v62 = (void (**)(char *, uint64_t, uint64_t, uint64_t))(v22 + 56);
    uint64_t v45 = v22;
    Swift::Int v49 = (uint64_t (**)(char *, uint64_t, uint64_t))(v22 + 48);
    uint64_t v59 = *(void *)(v23 + 72);
    v44[1] = v24;
    swift_bridgeObjectRetain();
    uint64_t v57 = _swiftEmptyArrayStorage;
    uint64_t v26 = v65;
    Swift::Int v53 = v7;
    uint64_t v47 = v17;
    uint64_t v48 = v16;
    while (1)
    {
      sub_10001D074(v25 + *(int *)(v61 + 20), (uint64_t)v7, &qword_101649E40);
      if ((*v60)(v7, 1, v8) == 1)
      {
        sub_10001DAB4((uint64_t)v7, &qword_101649E40);
        (*v62)(v16, 1, 1, v17);
      }
      else
      {
        uint64_t v65 = v26;
        uint64_t v58 = v3;
        (*v52)(v13, v7, v8);
        uint64_t v27 = *(void *)(v56 + 160);
        uint64_t v28 = v13;
        if (qword_1016370B0 != -1) {
          swift_once();
        }
        uint64_t v29 = sub_100010324(v8, (uint64_t)qword_10170ECC0);
        uint64_t v30 = v55;
        (*v51)(v55, v29, v8);
        __chkstk_darwin(v31);
        v44[-4] = v28;
        v44[-3] = v27;
        v44[-2] = v30;
        sub_10000588C((uint64_t *)&unk_10163BBE0);
        uint64_t v32 = v58;
        OS_dispatch_queue.sync<A>(execute:)();
        uint64_t v3 = v32;
        int64_t v33 = *v50;
        (*v50)(v30, v8);
        v33(v28, v8);
        uint64_t v13 = v28;
        if (v64)
        {
          sub_10000588C((uint64_t *)&unk_10164DBF0);
          uint64_t v17 = v47;
          long long v16 = v48;
          int v34 = swift_dynamicCast();
          (*v62)(v16, v34 ^ 1u, 1, v17);
        }
        else
        {
          sub_10001DAB4((uint64_t)v63, (uint64_t *)&unk_10163BBE0);
          uint64_t v17 = v47;
          long long v16 = v48;
          (*v62)(v48, 1, 1, v47);
        }
        int v35 = (*v49)(v16, 1, v17);
        uint64_t v7 = v53;
        if (v35 != 1)
        {
          uint64_t v36 = v46;
          sub_100A616BC((uint64_t)v16, v46, (uint64_t (*)(void))type metadata accessor for OwnedBeaconRecord);
          sub_100A616BC(v36, v54, (uint64_t (*)(void))type metadata accessor for OwnedBeaconRecord);
          if (swift_isUniquelyReferenced_nonNull_native()) {
            unint64_t v37 = (unint64_t)v57;
          }
          else {
            unint64_t v37 = sub_100A6F6C4(0, v57[2] + 1, 1, (unint64_t)v57);
          }
          unint64_t v39 = *(void *)(v37 + 16);
          unint64_t v38 = *(void *)(v37 + 24);
          uint64_t v40 = v45;
          if (v39 >= v38 >> 1)
          {
            uint64_t v42 = sub_100A6F6C4(v38 > 1, v39 + 1, 1, v37);
            uint64_t v40 = v45;
            unint64_t v37 = v42;
          }
          *(void *)(v37 + 16) = v39 + 1;
          unint64_t v41 = (*(unsigned __int8 *)(v40 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v40 + 80);
          uint64_t v57 = (void *)v37;
          sub_100A616BC(v54, v37 + v41 + *(void *)(v40 + 72) * v39, (uint64_t (*)(void))type metadata accessor for OwnedBeaconRecord);
          uint64_t v26 = v65;
          goto LABEL_5;
        }
        uint64_t v26 = v65;
      }
      sub_10001DAB4((uint64_t)v16, &qword_10163B9F0);
LABEL_5:
      v25 += v59;
      if (!--v26)
      {
        swift_bridgeObjectRelease();
        return v57;
      }
    }
  }
  return _swiftEmptyArrayStorage;
}

void sub_100A5B270()
{
  uint64_t v0 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v1 = *(void *)(v0 - 8);
  __chkstk_darwin(v0);
  uint64_t v3 = (char *)&v23 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = type metadata accessor for DispatchQoS();
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v7 = (char *)&v23 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for DispatchQoS.QoSClass();
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  uint64_t v11 = (char *)&v23 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = CFNotificationCenterGetDarwinNotifyCenter();
  if (v12)
  {
    uint64_t v13 = v12;
    uint64_t v25 = v5;
    uint64_t v14 = (void *)SPSelfBeaconingChangedNotification;
    sub_10001D4B0(0, (unint64_t *)&qword_10163AE70);
    uint64_t v24 = v1;
    uint64_t v15 = (void *)static OS_os_log.default.getter();
    static os_log_type_t.default.getter();
    os_log(_:dso:log:type:_:)();

    sub_10001D4B0(0, (unint64_t *)&qword_1016376E0);
    (*(void (**)(char *, void, uint64_t))(v9 + 104))(v11, enum case for DispatchQoS.QoSClass.default(_:), v8);
    uint64_t v16 = static OS_dispatch_queue.global(qos:)();
    uint64_t v23 = v4;
    uint64_t v17 = (void *)v16;
    (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v8);
    uint64_t v18 = swift_allocObject();
    *(void *)(v18 + 16) = v13;
    *(void *)(v18 + 24) = v14;
    aBlock[4] = sub_100A62264;
    void aBlock[5] = v18;
    aBlock[0] = _NSConcreteStackBlock;
    aBlock[1] = 1107296256;
    uint64_t aBlock[2] = sub_1004B5480;
    id aBlock[3] = &unk_1015E5328;
    uint64_t v19 = _Block_copy(aBlock);
    uint64_t v20 = v13;
    id v21 = v14;
    static DispatchQoS.unspecified.getter();
    uint64_t v26 = _swiftEmptyArrayStorage;
    sub_100A5FAC4((unint64_t *)&qword_10163B7E0, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
    sub_10000588C((uint64_t *)&unk_10163F350);
    sub_100062734((unint64_t *)&qword_10163B7F0, (uint64_t *)&unk_10163F350);
    dispatch thunk of SetAlgebra.init<A>(_:)();
    OS_dispatch_queue.async(group:qos:flags:execute:)();
    _Block_release(v19);

    (*(void (**)(char *, uint64_t))(v24 + 8))(v3, v0);
    (*(void (**)(char *, uint64_t))(v25 + 8))(v7, v23);
    swift_release();
  }
  else
  {
    static os_log_type_t.error.getter();
    sub_10001D4B0(0, (unint64_t *)&qword_10163AE70);
    uint64_t v25 = static OS_os_log.default.getter();
    os_log(_:dso:log:_:_:)();
    uint64_t v22 = (void *)v25;
  }
}

void sub_100A5B728()
{
  uint64_t v0 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v1 = *(void *)(v0 - 8);
  __chkstk_darwin(v0);
  uint64_t v3 = (char *)&v23 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = type metadata accessor for DispatchQoS();
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v7 = (char *)&v23 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for DispatchQoS.QoSClass();
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  uint64_t v11 = (char *)&v23 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = CFNotificationCenterGetDarwinNotifyCenter();
  if (v12)
  {
    uint64_t v13 = v12;
    uint64_t v25 = v5;
    uint64_t v14 = (void *)SPServiceSettingsChangedNotification;
    sub_10001D4B0(0, (unint64_t *)&qword_10163AE70);
    uint64_t v24 = v1;
    uint64_t v15 = (void *)static OS_os_log.default.getter();
    static os_log_type_t.default.getter();
    os_log(_:dso:log:type:_:)();

    sub_10001D4B0(0, (unint64_t *)&qword_1016376E0);
    (*(void (**)(char *, void, uint64_t))(v9 + 104))(v11, enum case for DispatchQoS.QoSClass.default(_:), v8);
    uint64_t v16 = static OS_dispatch_queue.global(qos:)();
    uint64_t v23 = v4;
    uint64_t v17 = (void *)v16;
    (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v8);
    uint64_t v18 = swift_allocObject();
    *(void *)(v18 + 16) = v13;
    *(void *)(v18 + 24) = v14;
    aBlock[4] = sub_100A5FB4C;
    void aBlock[5] = v18;
    aBlock[0] = _NSConcreteStackBlock;
    aBlock[1] = 1107296256;
    uint64_t aBlock[2] = sub_1004B5480;
    id aBlock[3] = &unk_1015E5378;
    uint64_t v19 = _Block_copy(aBlock);
    uint64_t v20 = v13;
    id v21 = v14;
    static DispatchQoS.unspecified.getter();
    uint64_t v26 = _swiftEmptyArrayStorage;
    sub_100A5FAC4((unint64_t *)&qword_10163B7E0, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
    sub_10000588C((uint64_t *)&unk_10163F350);
    sub_100062734((unint64_t *)&qword_10163B7F0, (uint64_t *)&unk_10163F350);
    dispatch thunk of SetAlgebra.init<A>(_:)();
    OS_dispatch_queue.async(group:qos:flags:execute:)();
    _Block_release(v19);

    (*(void (**)(char *, uint64_t))(v24 + 8))(v3, v0);
    (*(void (**)(char *, uint64_t))(v25 + 8))(v7, v23);
    swift_release();
  }
  else
  {
    static os_log_type_t.error.getter();
    sub_10001D4B0(0, (unint64_t *)&qword_10163AE70);
    uint64_t v25 = static OS_os_log.default.getter();
    os_log(_:dso:log:_:_:)();
    uint64_t v22 = (void *)v25;
  }
}

void sub_100A5BBE0()
{
  type metadata accessor for AnyKeyPath();
  swift_getKeyPath();
  char v0 = static AnyKeyPath.== infix(_:_:)();
  swift_release();
  if ((v0 & 1) != 0
    || (swift_getKeyPath(), char v1 = static AnyKeyPath.== infix(_:_:)(), swift_release(), (v1 & 1) != 0)
    || (swift_getKeyPath(), char v2 = static AnyKeyPath.== infix(_:_:)(), swift_release(), (v2 & 1) != 0))
  {
    type metadata accessor for Transaction();
    static Transaction.named<A>(_:with:)();
    sub_100AACCCC();
    dispatch thunk of DarwinNotificationHelper.post(bypassRateLimit:)();
    type metadata accessor for Transaction();
    static Transaction.asyncTask(name:block:)();
  }
  swift_getKeyPath();
  char v3 = static AnyKeyPath.== infix(_:_:)();
  swift_release();
  if (v3) {
    sub_100A5B270();
  }
  static os_log_type_t.default.getter();
  if (qword_101637260 != -1) {
    swift_once();
  }
  sub_10000588C((uint64_t *)&unk_10163AD00);
  uint64_t v4 = swift_allocObject();
  *(_OWORD *)(v4 + 16) = xmmword_101342130;
  type metadata accessor for KeyPath();
  swift_retain();
  uint64_t v5 = String.init<A>(describing:)();
  uint64_t v7 = v6;
  *(void *)(v4 + 56) = &type metadata for String;
  *(void *)(v4 + 64) = sub_10000B4CC();
  *(void *)(v4 + 32) = v5;
  *(void *)(v4 + 40) = v7;
  os_log(_:dso:log:_:_:)();
  swift_bridgeObjectRelease();
  sub_100A5B728();
}

BOOL sub_100A5BEB0()
{
  if (qword_101636CD8 != -1) {
    goto LABEL_34;
  }
  while (1)
  {
    OS_dispatch_queue.sync<A>(execute:)();
    char v0 = (void *)sub_1010AB900(v25);
    uint64_t v1 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v3 = v2;
    if (v1 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v3 == v4) {
      char v6 = 1;
    }
    else {
      char v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    }

    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v7 = sub_1010AB9F8(v25);
    swift_bridgeObjectRelease();
    uint64_t v8 = *(void *)(v7 + 16);
    if (!v8) {
      goto LABEL_18;
    }
    uint64_t v9 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v11 = v10;
    if (v9 != static String._unconditionallyBridgeFromObjectiveC(_:)() || v11 != v12) {
      break;
    }
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease_n();
    if (v8 == 1)
    {
LABEL_17:
      swift_bridgeObjectRelease();
LABEL_18:
      swift_bridgeObjectRelease();
      return (v6 & 1) != 0;
    }
LABEL_21:
    uint64_t v17 = 5;
    while (1)
    {
      uint64_t v18 = v17 - 3;
      if (__OFADD__(v17 - 4, 1)) {
        break;
      }
      uint64_t v19 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      uint64_t v21 = v20;
      if (v19 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v21 == v22)
      {
        swift_bridgeObjectRelease_n();
      }
      else
      {
        char v24 = _stringCompareWithSmolCheck(_:_:expecting:)();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        if ((v24 & 1) == 0) {
          goto LABEL_30;
        }
      }
      ++v17;
      if (v18 == v8) {
        goto LABEL_17;
      }
    }
    __break(1u);
LABEL_34:
    swift_once();
  }
  char v14 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (v14)
  {
    if (v8 == 1) {
      goto LABEL_17;
    }
    goto LABEL_21;
  }
LABEL_30:
  swift_bridgeObjectRelease_n();
  uint64_t v15 = 0;
  BOOL result = 0;
  if ((v6 & 1) == 0) {
    return result;
  }
  return v15;
}

void sub_100A5C148()
{
  if (qword_101636CD8 != -1) {
    swift_once();
  }
  static os_log_type_t.default.getter();
  if (qword_1016372C8 != -1) {
    swift_once();
  }
  os_log(_:dso:log:_:_:)();
  QueueSynchronizer.conditionalSync<A>(_:)();
  id v0 = [self standardUserDefaults];
  NSString v1 = String._bridgeToObjectiveC()();
  [v0 removeObjectForKey:v1];
}

uint64_t sub_100A5C2B4()
{
  return sub_1000A70D8();
}

void sub_100A5C2D0(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for BeaconObservation();
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = __chkstk_darwin(v4);
  uint64_t v8 = (char *)&v22 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  uint64_t v10 = (char *)&v22 - v9;
  if (qword_101636CB8 != -1) {
    swift_once();
  }
  sub_1007B4970(a1, 0, 0, &v24);
  uint64_t v12 = v24;
  uint64_t v13 = v24[2];
  if (v13)
  {
    uint64_t v23 = a2;
    char v24 = _swiftEmptyArrayStorage;
    specialized ContiguousArray.reserveCapacity(_:)();
    uint64_t v14 = *(unsigned __int8 *)(v5 + 80);
    uint64_t v22 = v12;
    uint64_t v15 = (uint64_t)v12 + ((v14 + 32) & ~v14);
    uint64_t v16 = *(void *)(v5 + 72);
    do
    {
      sub_100A61D20(v15, (uint64_t)v10, (uint64_t (*)(void))type metadata accessor for BeaconObservation);
      sub_100A61D20((uint64_t)v10, (uint64_t)v8, (uint64_t (*)(void))type metadata accessor for BeaconObservation);
      id v17 = objc_allocWithZone((Class)SPBeaconObservation);
      Class isa = UUID._bridgeToObjectiveC()().super.isa;
      uint64_t v19 = qword_101375650[v8[*(int *)(v4 + 24)]];
      Class v20 = Date._bridgeToObjectiveC()().super.isa;
      [v17 initWithBeaconIdentifier:isa type:v19 date:v20 location:0];

      sub_100A61D88((uint64_t)v8, (uint64_t (*)(void))type metadata accessor for BeaconObservation);
      sub_100A61D88((uint64_t)v10, (uint64_t (*)(void))type metadata accessor for BeaconObservation);
      specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
      specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
      specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      specialized ContiguousArray._endMutation()();
      v15 += v16;
      --v13;
    }
    while (v13);
    swift_bridgeObjectRelease();
    a2 = v23;
  }
  else
  {
    swift_bridgeObjectRelease();
  }
  sub_10001D4B0(0, (unint64_t *)&unk_1016566A0);
  Class v21 = Array._bridgeToObjectiveC()().super.isa;
  (*(void (**)(uint64_t, Class))(a2 + 16))(a2, v21);
  swift_bridgeObjectRelease();
}

unint64_t sub_100A5C5D8(Swift::String string)
{
  object = string._object;
  v2._countAndFlagsBits = string._countAndFlagsBits;
  v2._object = object;
  unint64_t v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_1015A4DC0, v2);
  swift_bridgeObjectRelease();
  if (v3 >= 7) {
    return 7;
  }
  else {
    return v3;
  }
}

void *sub_100A5C624(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  uint64_t v9 = &type metadata for SystemInfo;
  uint64_t v10 = &off_1015FD958;
  a4[12] = _swiftEmptyArrayStorage;
  a4[2] = a1;
  sub_10000588C(&qword_1016568A0);
  swift_allocObject();
  swift_retain();
  a4[11] = CurrentValueSubject.init(_:)();
  sub_10001D010((uint64_t)v8, (uint64_t)(a4 + 3));
  a4[8] = a3;
  a4[9] = &protocol witness table for CurrentLocationMonitor;
  sub_10000588C((uint64_t *)&unk_101656920);
  swift_allocObject();
  swift_unknownObjectRetain();
  a4[10] = CurrentValueSubject.init(_:)();
  uint64_t v6 = a3 + OBJC_IVAR____TtC12searchpartyd22CurrentLocationMonitor_delegate;
  swift_beginAccess();
  *(void *)(v6 + 8) = &off_1015AAF48;
  swift_unknownObjectWeakAssign();
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)v8);
  return a4;
}

void *sub_100A5C74C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  Class v21 = &type metadata for SystemInfo;
  uint64_t v22 = &off_1015FD958;
  type metadata accessor for SeparationMonitoringStateDecider.iOS();
  uint64_t v8 = (void *)swift_allocObject();
  uint64_t v9 = sub_1000BD078((uint64_t)v20, (uint64_t)&type metadata for SystemInfo);
  __chkstk_darwin(v9);
  (*(void (**)(void))(v10 + 16))();
  uint64_t v18 = &type metadata for SystemInfo;
  uint64_t v19 = &off_1015FD958;
  v8[13] = a1;
  sub_10001D010((uint64_t)v17, (uint64_t)v15);
  uint64_t v11 = sub_1000BD078((uint64_t)v15, v16);
  __chkstk_darwin(v11);
  (*(void (**)(void))(v12 + 16))();
  swift_retain();
  uint64_t v13 = sub_100A5C624(a2, a3, a4, v8);
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)v15);
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)v17);
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)v20);
  return v13;
}

uint64_t sub_100A5C938(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v69 = a1;
  uint64_t v67 = type metadata accessor for OwnedBeaconRecord();
  __chkstk_darwin(v67);
  uint64_t v61 = (uint64_t)&v57 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = type metadata accessor for BeaconNamingRecord();
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  uint64_t v62 = (uint64_t)&v57 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = sub_10000588C(&qword_10163B9E0);
  uint64_t v59 = *(void *)(v9 - 8);
  uint64_t v10 = __chkstk_darwin(v9);
  uint64_t v60 = (uint64_t)&v57 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = __chkstk_darwin(v10);
  uint64_t v14 = (char *)&v57 - v13;
  uint64_t v58 = v15;
  __chkstk_darwin(v12);
  uint64_t v68 = (uint64_t)&v57 - v16;
  swift_retain();
  id v17 = (id)MobileGestalt_get_current_device();
  if (v17)
  {
    uint64_t v18 = v17;
    id v19 = (id)MobileGestalt_copy_userAssignedDeviceName_obj();

    if (v19)
    {
      uint64_t v63 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      unint64_t v66 = v20;
    }
    else
    {
      uint64_t v63 = 0;
      unint64_t v66 = 0xE000000000000000;
    }
    id v21 = (id)MobileGestalt_get_current_device();
    if (v21)
    {
      uint64_t v22 = v21;
      uint64_t v65 = a3;
      id v23 = (id)MobileGestalt_copy_buildVersion_obj();

      if (v23)
      {
        uint64_t v64 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        unint64_t v26 = v25;
      }
      else
      {
        uint64_t v64 = 0;
        unint64_t v26 = 0xE000000000000000;
      }
      uint64_t v27 = a2;
      __chkstk_darwin(v24);
      uint64_t v57 = v28;
      *(&v57 - 2) = v28;
      *(&v57 - 1) = v29;
      uint64_t v30 = v68;
      QueueSynchronizer.conditionalSync<A>(_:)();
      sub_10001D074(v30, (uint64_t)v14, &qword_10163B9E0);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v7 + 48))(v14, 1, v6) == 1)
      {
        sub_10001DAB4((uint64_t)v14, &qword_10163B9E0);
        unint64_t v31 = v66;
        uint64_t v32 = v64;
        goto LABEL_22;
      }
      uint64_t v33 = v62;
      sub_100A616BC((uint64_t)v14, v62, (uint64_t (*)(void))type metadata accessor for BeaconNamingRecord);
      int v34 = (void *)(v33 + *(int *)(v6 + 32));
      unint64_t v31 = v66;
      if (*v34 == v63 && v34[1] == v66)
      {
        uint64_t v35 = v61;
        sub_100A61D20(v69, v61, (uint64_t (*)(void))type metadata accessor for OwnedBeaconRecord);
        uint64_t v32 = v64;
      }
      else
      {
        char v36 = _stringCompareWithSmolCheck(_:_:expecting:)();
        uint64_t v35 = v61;
        sub_100A61D20(v69, v61, (uint64_t (*)(void))type metadata accessor for OwnedBeaconRecord);
        uint64_t v32 = v64;
        if ((v36 & 1) == 0)
        {
          sub_100A61D88(v35, (uint64_t (*)(void))type metadata accessor for OwnedBeaconRecord);
          goto LABEL_21;
        }
      }
      unint64_t v37 = (void *)(v35 + *(int *)(v67 + 60));
      if (*v37 == v32 && v37[1] == v26)
      {
        sub_100A61D88(v35, (uint64_t (*)(void))type metadata accessor for OwnedBeaconRecord);
LABEL_19:
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        Transaction.capture()();
        sub_100A61D88(v33, (uint64_t (*)(void))type metadata accessor for BeaconNamingRecord);
LABEL_27:
        sub_10001DAB4(v68, &qword_10163B9E0);
        return swift_release();
      }
      char v38 = _stringCompareWithSmolCheck(_:_:expecting:)();
      sub_100A61D88(v35, (uint64_t (*)(void))type metadata accessor for OwnedBeaconRecord);
      if (v38) {
        goto LABEL_19;
      }
LABEL_21:
      sub_100A61D88(v33, (uint64_t (*)(void))type metadata accessor for BeaconNamingRecord);
LABEL_22:
      unint64_t v39 = (void *)(v69 + *(int *)(v67 + 60));
      if (*v39 == v32 && v39[1] == v26 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
      {
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        Transaction.capture()();
      }
      else
      {
        uint64_t v40 = swift_allocObject();
        swift_weakInit();
        unint64_t v41 = (void (*)(uint64_t *))swift_allocObject();
        unint64_t v66 = v31;
        uint64_t v42 = v41;
        uint64_t v67 = (uint64_t)j_j___s10FindMyBase11TransactionC7captureyyF;
        *((void *)v41 + 2) = v40;
        *((void *)v41 + 3) = j_j___s10FindMyBase11TransactionC7captureyyF;
        *((void *)v41 + 4) = v65;
        uint64_t v43 = swift_allocObject();
        *(void *)(v43 + 16) = v32;
        *(void *)(v43 + 24) = v26;
        uint64_t v44 = v60;
        sub_10001D074(v68, v60, &qword_10163B9E0);
        unint64_t v45 = (*(unsigned __int8 *)(v59 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v59 + 80);
        unint64_t v46 = (v58 + v45 + 7) & 0xFFFFFFFFFFFFFFF8;
        unint64_t v47 = (v46 + 15) & 0xFFFFFFFFFFFFFFF8;
        unint64_t v48 = (v47 + 23) & 0xFFFFFFFFFFFFFFF8;
        uint64_t v49 = swift_allocObject();
        sub_10001D608(v44, v49 + v45, &qword_10163B9E0);
        *(void *)(v49 + v46) = v27;
        uint64_t v50 = (uint64_t *)(v49 + v47);
        uint64_t v52 = v65;
        unint64_t v51 = v66;
        *uint64_t v50 = v63;
        v50[1] = v51;
        Swift::Int v53 = (void (**)(uint64_t *))(v49 + v48);
        *Swift::Int v53 = sub_100A613D4;
        v53[1] = v42;
        uint64_t v54 = (uint64_t *)(v49 + ((v48 + 23) & 0xFFFFFFFFFFFFFFF8));
        *uint64_t v54 = v67;
        v54[1] = v52;
        uint64_t v55 = swift_allocObject();
        *(void *)(v55 + 16) = sub_100A615EC;
        *(void *)(v55 + 24) = v49;
        swift_retain_n();
        swift_retain();
        swift_retain();
        swift_retain();
        sub_101073560(v69, 0, (void (*)(uint64_t))sub_100289494, v43, (void (*)(uint64_t (*)()))sub_1007AFAF8, (void (*)(uint64_t (*)()))v55);
        swift_release();
        swift_release();
        swift_release();
        swift_release();
      }
      goto LABEL_27;
    }
  }
  else
  {
    swift_release();
    __break(1u);
  }
  uint64_t result = swift_release();
  __break(1u);
  return result;
}

uint64_t sub_100A5D098(uint64_t a1)
{
  v1[7] = a1;
  uint64_t v2 = type metadata accessor for XPCServiceDescription();
  v1[8] = v2;
  v1[9] = *(void *)(v2 - 8);
  v1[10] = swift_task_alloc();
  v1[11] = swift_task_alloc();
  uint64_t v3 = type metadata accessor for MachServiceName();
  v1[12] = v3;
  v1[13] = *(void *)(v3 - 8);
  v1[14] = swift_task_alloc();
  v1[15] = swift_task_alloc();
  uint64_t v4 = type metadata accessor for Date();
  v1[16] = v4;
  v1[17] = *(void *)(v4 - 8);
  v1[18] = swift_task_alloc();
  uint64_t v5 = type metadata accessor for UUID();
  v1[19] = v5;
  v1[20] = *(void *)(v5 - 8);
  v1[21] = swift_task_alloc();
  v1[22] = swift_task_alloc();
  uint64_t v6 = type metadata accessor for LocalBeaconKeyInfo();
  v1[23] = v6;
  v1[24] = *(void *)(v6 - 8);
  v1[25] = swift_task_alloc();
  sub_10000588C(&qword_10163B9F0);
  v1[26] = swift_task_alloc();
  uint64_t v7 = type metadata accessor for OwnedBeaconRecord();
  v1[27] = v7;
  v1[28] = *(void *)(v7 - 8);
  v1[29] = swift_task_alloc();
  return _swift_task_switch(sub_100A5D384, 0, 0);
}

uint64_t sub_100A5D384()
{
  uint64_t My = type metadata accessor for Feature.FindMy();
  v0[5] = My;
  v0[6] = sub_100A5FAC4((unint64_t *)&qword_101653E00, (void (*)(uint64_t))&type metadata accessor for Feature.FindMy);
  uint64_t v2 = sub_10001D958(v0 + 2);
  (*(void (**)(uint64_t *, void, uint64_t))(*(void *)(My - 8) + 104))(v2, enum case for Feature.FindMy.tribeca(_:), My);
  LOBYTE(My) = isFeatureEnabled(_:)();
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)(v0 + 2));
  if (My)
  {
    uint64_t v3 = v0[27];
    uint64_t v4 = v0[28];
    uint64_t v5 = v0[26];
    sub_10001D074(v0[7], v5, &qword_10163B9F0);
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v4 + 48))(v5, 1, v3) == 1)
    {
      sub_10001DAB4(v0[26], &qword_10163B9F0);
      uint64_t v6 = 0;
      unint64_t v7 = 0xF000000000000000;
    }
    else
    {
      uint64_t v9 = v0[29];
      uint64_t v10 = (int *)v0[27];
      uint64_t v11 = v0[20];
      uint64_t v12 = v0[21];
      uint64_t v13 = v0[18];
      uint64_t v14 = v0[19];
      uint64_t v16 = v0[16];
      uint64_t v15 = v0[17];
      sub_100A616BC(v0[26], v9, (uint64_t (*)(void))type metadata accessor for OwnedBeaconRecord);
      uid_t v17 = getuid();
      sub_100DC5FC0(v17);
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v11 + 16))(v12, v9 + v10[5], v14);
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v15 + 16))(v13, v9 + v10[8], v16);
      uint64_t v18 = (uint64_t *)(v9 + v10[13]);
      uint64_t v19 = *v18;
      unint64_t v20 = v18[1];
      id v21 = (uint64_t *)(v9 + v10[9]);
      uint64_t v22 = *v21;
      unint64_t v23 = v21[1];
      sub_1000361E0(v19, v20);
      sub_1000361E0(v22, v23);
      LocalBeaconKeyInfo.init(userIdentifier:beaconIdentifier:pairDate:publicKey:sharedSecretKey:)();
      type metadata accessor for PropertyListEncoder();
      swift_allocObject();
      PropertyListEncoder.init()();
      sub_100A5FAC4(&qword_101656598, (void (*)(uint64_t))&type metadata accessor for LocalBeaconKeyInfo);
      uint64_t v6 = dispatch thunk of PropertyListEncoder.encode<A>(_:)();
      unint64_t v7 = v24;
      uint64_t v25 = v0[29];
      uint64_t v26 = v0[24];
      uint64_t v27 = v0[25];
      uint64_t v28 = v0[23];
      swift_release();
      (*(void (**)(uint64_t, uint64_t))(v26 + 8))(v27, v28);
      sub_100A61D88(v25, (uint64_t (*)(void))type metadata accessor for OwnedBeaconRecord);
    }
    uint64_t v43 = v6;
    unint64_t v44 = v7;
    v0[30] = v6;
    v0[31] = v7;
    uint64_t v31 = v0[14];
    uint64_t v30 = v0[15];
    uint64_t v33 = v0[12];
    uint64_t v32 = v0[13];
    uint64_t v34 = v0[10];
    uint64_t v35 = v0[11];
    uint64_t v37 = v0[8];
    uint64_t v36 = v0[9];
    MachServiceName.init(_:)();
    id v38 = [self interfaceWithProtocol:&OBJC_PROTOCOL____TtP7SPOwner33FindMyBeaconDaemonPushXPCProtocol_];
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v32 + 16))(v31, v30, v33);
    id v39 = v38;
    XPCServiceDescription.init(name:options:remoteObjectInterface:interruptionHandler:invalidationHandler:)();
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v36 + 16))(v34, v35, v37);
    sub_10000588C(&qword_101656590);
    swift_allocObject();
    uint64_t v40 = XPCSession.init(service:)();
    v0[32] = v40;
    XPCSession.resume()();

    (*(void (**)(uint64_t, uint64_t))(v36 + 8))(v35, v37);
    (*(void (**)(uint64_t, uint64_t))(v32 + 8))(v30, v33);
    unint64_t v41 = (void *)swift_task_alloc();
    v0[33] = v41;
    void v41[2] = v40;
    v41[3] = v43;
    v41[4] = v44;
    uint64_t v42 = (void *)swift_task_alloc();
    v0[34] = v42;
    *uint64_t v42 = v0;
    v42[1] = sub_100A5D9A8;
    return withCancellableCheckedThrowingContinuation<A>(_:)();
  }
  else
  {
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v8 = (uint64_t (*)(void))v0[1];
    return v8();
  }
}

uint64_t sub_100A5D9A8()
{
  *(void *)(*(void *)v1 + 280) = v0;
  swift_task_dealloc();
  swift_task_dealloc();
  if (v0) {
    uint64_t v2 = sub_100A5DBD0;
  }
  else {
    uint64_t v2 = sub_100A5DADC;
  }
  return _swift_task_switch(v2, 0, 0);
}

uint64_t sub_100A5DADC()
{
  sub_100037A24(v0[30], v0[31]);
  swift_release();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = (uint64_t (*)(void))v0[1];
  return v1();
}

uint64_t sub_100A5DBD0()
{
  unint64_t v1 = v0[31];
  uint64_t v2 = v0[30];
  swift_release();
  sub_100037A24(v2, v1);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v3 = (uint64_t (*)(void))v0[1];
  return v3();
}

uint64_t sub_100A5DCD0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v3[15] = a2;
  v3[16] = a3;
  v3[17] = type metadata accessor for KeySyncMetadata();
  v3[18] = swift_task_alloc();
  return _swift_task_switch(sub_100A5DD64, 0, 0);
}

uint64_t sub_100A5DD64()
{
  if (qword_1016375E8 != -1) {
    swift_once();
  }
  swift_beginAccess();
  uint64_t result = sub_10001D074((uint64_t)&xmmword_10166E8F0, v0 + 56, (uint64_t *)&unk_101638D30);
  if (*(void *)(v0 + 80))
  {
    sub_10001CEB0((long long *)(v0 + 56), v0 + 16);
    sub_10001CD44((void *)(v0 + 16), *(void *)(v0 + 40));
    uint64_t v3 = (uint64_t (__cdecl *)())((char *)&dword_101639138 + dword_101639138);
    uint64_t v2 = (void *)swift_task_alloc();
    *(void *)(v0 + 152) = v2;
    *uint64_t v2 = v0;
    v2[1] = sub_100A5DEA0;
    return v3();
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_100A5DEA0(uint64_t a1)
{
  *(void *)(*(void *)v1 + 160) = a1;
  swift_task_dealloc();
  return _swift_task_switch(sub_100A5DFA0, 0, 0);
}

uint64_t sub_100A5DFA0()
{
  uint64_t v1 = (uint64_t)(v0 + 2);
  if (v0[20])
  {
    uint64_t v3 = (int *)v0[17];
    uint64_t v2 = v0[18];
    uint64_t v4 = v0[15];
    uint64_t v5 = v0[16];
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v1);
    uint64_t v6 = type metadata accessor for UUID();
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 16))(v2, v4, v6);
    unint64_t v7 = (void *)(v2 + v3[6]);
    v7[3] = &type metadata for PrimaryIndex;
    v7[4] = sub_1001A1640();
    *unint64_t v7 = v5;
    static Date.trustedNow.getter(v2 + v3[7]);
    *(unsigned char *)(v2 + v3[5]) = 4;
    uint64_t v8 = (void *)swift_task_alloc();
    v0[21] = v8;
    *uint64_t v8 = v0;
    v8[1] = sub_100A5E1CC;
    uint64_t v9 = v0[18];
    return sub_101104A5C(v9);
  }
  else
  {
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v1);
    if (qword_101636F08 != -1) {
      swift_once();
    }
    uint64_t v11 = type metadata accessor for Logger();
    sub_100010324(v11, (uint64_t)qword_10170E858);
    uint64_t v12 = Logger.logObject.getter();
    os_log_type_t v13 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v12, v13))
    {
      uint64_t v14 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v14 = 0;
      _os_log_impl((void *)&_mh_execute_header, v12, v13, "Unable to get ObservationStoreService", v14, 2u);
      swift_slowDealloc();
    }

    swift_task_dealloc();
    uint64_t v15 = (uint64_t (*)(void))v0[1];
    return v15();
  }
}

uint64_t sub_100A5E1CC()
{
  *(void *)(*(void *)v1 + 176) = v0;
  swift_task_dealloc();
  if (v0) {
    uint64_t v2 = sub_100A5E36C;
  }
  else {
    uint64_t v2 = sub_100A5E2E0;
  }
  return _swift_task_switch(v2, 0, 0);
}

uint64_t sub_100A5E2E0()
{
  uint64_t v1 = *(void *)(v0 + 144);
  swift_release();
  sub_100A61D88(v1, (uint64_t (*)(void))type metadata accessor for KeySyncMetadata);
  swift_task_dealloc();
  uint64_t v2 = *(uint64_t (**)(void))(v0 + 8);
  return v2();
}

uint64_t sub_100A5E36C()
{
  uint64_t v1 = *(void *)(v0 + 144);
  swift_release();
  sub_100A61D88(v1, (uint64_t (*)(void))type metadata accessor for KeySyncMetadata);
  swift_task_dealloc();
  uint64_t v2 = *(uint64_t (**)(void))(v0 + 8);
  return v2();
}

uint64_t sub_100A5E3F8(uint64_t a1)
{
  v1[17] = a1;
  uint64_t v2 = sub_10000588C(&qword_10163D210);
  v1[18] = v2;
  v1[19] = *(void *)(v2 - 8);
  v1[20] = swift_task_alloc();
  return _swift_task_switch(sub_100A5E4BC, 0, 0);
}

uint64_t sub_100A5E4BC()
{
  unint64_t v20 = v0;
  if (qword_101637310 != -1) {
    swift_once();
  }
  uint64_t v1 = (long long *)(v0 + 7);
  uint64_t v2 = v0[17];
  uint64_t v3 = v0[19];
  uint64_t v4 = v0[20];
  uint64_t v5 = v0[18];
  uint64_t v6 = type metadata accessor for Logger();
  v0[21] = v6;
  sub_100010324(v6, (uint64_t)qword_10170F068);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v3 + 16))(v4, v2, v5);
  unint64_t v7 = Logger.logObject.getter();
  os_log_type_t v8 = static os_log_type_t.default.getter();
  BOOL v9 = os_log_type_enabled(v7, v8);
  uint64_t v11 = v0[19];
  uint64_t v10 = v0[20];
  uint64_t v12 = v0[18];
  if (v9)
  {
    uint64_t v13 = swift_slowAlloc();
    uint64_t v19 = swift_slowAlloc();
    *(_DWORD *)uint64_t v13 = 136446466;
    v0[15] = sub_1008FA0F0(0xD000000000000023, 0x800000010140F780, &v19);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v13 + 12) = 2082;
    sub_100062734(&qword_10163B810, &qword_10163D210);
    uint64_t v14 = dispatch thunk of CustomStringConvertible.description.getter();
    v0[16] = sub_1008FA0F0(v14, v15, &v19);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    (*(void (**)(uint64_t, uint64_t))(v11 + 8))(v10, v12);
    _os_log_impl((void *)&_mh_execute_header, v7, v8, "%{public}s identifier %{public}s", (uint8_t *)v13, 0x16u);
    swift_arrayDestroy();
    swift_slowDealloc();
    uint64_t v1 = (long long *)(v0 + 7);
    swift_slowDealloc();
  }
  else
  {
    (*(void (**)(void, void))(v11 + 8))(v0[20], v0[18]);
  }

  if (qword_1016375E8 != -1) {
    swift_once();
  }
  swift_beginAccess();
  uint64_t result = sub_10001D074((uint64_t)&xmmword_10166E8F0, (uint64_t)v1, (uint64_t *)&unk_101638D30);
  if (v0[10])
  {
    sub_10001CEB0(v1, (uint64_t)(v0 + 2));
    sub_10001CD44(v0 + 2, v0[5]);
    uint64_t v18 = (uint64_t (__cdecl *)())((char *)&dword_101639168 + dword_101639168);
    uid_t v17 = (void *)swift_task_alloc();
    v0[22] = v17;
    *uid_t v17 = v0;
    v17[1] = sub_100A5E840;
    return v18();
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_100A5E840(uint64_t a1)
{
  *(void *)(*(void *)v1 + 184) = a1;
  swift_task_dealloc();
  return _swift_task_switch(sub_100A5E940, 0, 0);
}

uint64_t sub_100A5E940()
{
  uint64_t v1 = (uint64_t)(v0 + 2);
  if (v0[23])
  {
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v1);
    uint64_t v2 = (void *)swift_task_alloc();
    v0[24] = v2;
    *uint64_t v2 = v0;
    v2[1] = sub_100A5EB0C;
    uint64_t v3 = v0[17];
    return sub_100D33440(v3);
  }
  else
  {
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v1);
    if (qword_1016370D0 != -1) {
      swift_once();
    }
    sub_100010324(v0[21], (uint64_t)qword_10170ECF8);
    uint64_t v5 = Logger.logObject.getter();
    os_log_type_t v6 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v5, v6))
    {
      unint64_t v7 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)unint64_t v7 = 0;
      _os_log_impl((void *)&_mh_execute_header, v5, v6, "Unable to get PencilPairingService", v7, 2u);
      swift_slowDealloc();
    }

    sub_1003A4778();
    swift_allocError();
    *os_log_type_t v8 = 11;
    swift_willThrow();
    swift_task_dealloc();
    BOOL v9 = (uint64_t (*)(void))v0[1];
    return v9();
  }
}

uint64_t sub_100A5EB0C()
{
  *(void *)(*(void *)v1 + 200) = v0;
  swift_task_dealloc();
  if (v0) {
    uint64_t v2 = sub_100A5EC90;
  }
  else {
    uint64_t v2 = sub_100A5EC20;
  }
  return _swift_task_switch(v2, 0, 0);
}

uint64_t sub_100A5EC20()
{
  swift_release();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_100A5EC90()
{
  swift_release();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_100A5ECFC(uint64_t a1)
{
  v1[22] = a1;
  uint64_t v2 = sub_10000588C(&qword_10163D210);
  v1[23] = v2;
  v1[24] = *(void *)(v2 - 8);
  v1[25] = swift_task_alloc();
  return _swift_task_switch(sub_100A5EDC0, 0, 0);
}

uint64_t sub_100A5EDC0()
{
  uint64_t v27 = v0;
  uint64_t v1 = (uint64_t *)(v0 + 16);
  if (qword_101637310 != -1) {
    swift_once();
  }
  uint64_t v2 = *(void *)(v0 + 176);
  uint64_t v3 = *(void *)(v0 + 192);
  uint64_t v4 = *(void *)(v0 + 200);
  uint64_t v5 = *(void *)(v0 + 184);
  uint64_t v6 = type metadata accessor for Logger();
  *(void *)(v0 + 208) = v6;
  sub_100010324(v6, (uint64_t)qword_10170F068);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v3 + 16))(v4, v2, v5);
  unint64_t v7 = Logger.logObject.getter();
  os_log_type_t v8 = static os_log_type_t.default.getter();
  BOOL v9 = os_log_type_enabled(v7, v8);
  uint64_t v11 = *(void *)(v0 + 192);
  uint64_t v10 = *(void *)(v0 + 200);
  uint64_t v12 = *(void *)(v0 + 184);
  if (v9)
  {
    uint64_t v13 = swift_slowAlloc();
    v26[0] = swift_slowAlloc();
    *(_DWORD *)uint64_t v13 = 136446466;
    *(void *)(v0 + 160) = sub_1008FA0F0(0xD000000000000025, 0x800000010140F750, v26);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v13 + 12) = 2082;
    sub_100062734(&qword_10163B810, &qword_10163D210);
    uint64_t v14 = dispatch thunk of CustomStringConvertible.description.getter();
    *(void *)(v0 + 168) = sub_1008FA0F0(v14, v15, v26);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    (*(void (**)(uint64_t, uint64_t))(v11 + 8))(v10, v12);
    _os_log_impl((void *)&_mh_execute_header, v7, v8, "%{public}s identifier %{public}s", (uint8_t *)v13, 0x16u);
    swift_arrayDestroy();
    swift_slowDealloc();
    uint64_t v1 = (uint64_t *)(v0 + 16);
    swift_slowDealloc();
  }
  else
  {
    (*(void (**)(void, void))(v11 + 8))(*(void *)(v0 + 200), *(void *)(v0 + 184));
  }

  uint64_t My = type metadata accessor for Feature.FindMy();
  *(void *)(v0 + 40) = My;
  *(void *)(v0 + 48) = sub_100A5FAC4((unint64_t *)&qword_101653E00, (void (*)(uint64_t))&type metadata accessor for Feature.FindMy);
  uid_t v17 = sub_10001D958(v1);
  (*(void (**)(uint64_t *, void, uint64_t))(*(void *)(My - 8) + 104))(v17, enum case for Feature.FindMy.lineUp(_:), My);
  LOBYTE(My) = isFeatureEnabled(_:)();
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)v1);
  if (My)
  {
    if (qword_1016375E8 != -1) {
      swift_once();
    }
    swift_beginAccess();
    uint64_t result = sub_10001D074((uint64_t)&xmmword_10166E8F0, v0 + 96, (uint64_t *)&unk_101638D30);
    if (*(void *)(v0 + 120))
    {
      sub_10001CEB0((long long *)(v0 + 96), v0 + 56);
      sub_10001CD44((void *)(v0 + 56), *(void *)(v0 + 80));
      uint64_t v25 = (uint64_t (__cdecl *)())((char *)&dword_101639168 + dword_101639168);
      uint64_t v19 = (void *)swift_task_alloc();
      *(void *)(v0 + 216) = v19;
      *uint64_t v19 = v0;
      v19[1] = sub_100A5F314;
      return v25();
    }
    else
    {
      __break(1u);
    }
  }
  else
  {
    if (qword_1016370D0 != -1) {
      swift_once();
    }
    sub_100010324(v6, (uint64_t)qword_10170ECF8);
    unint64_t v20 = Logger.logObject.getter();
    os_log_type_t v21 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v20, v21))
    {
      uint64_t v22 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v22 = 0;
      _os_log_impl((void *)&_mh_execute_header, v20, v21, "Feature.FindMy.lineUp is disabled!", v22, 2u);
      swift_slowDealloc();
    }

    sub_1003A4778();
    swift_allocError();
    *unint64_t v23 = 13;
    swift_willThrow();
    swift_task_dealloc();
    unint64_t v24 = *(uint64_t (**)(void))(v0 + 8);
    return v24();
  }
  return result;
}

uint64_t sub_100A5F314(uint64_t a1)
{
  *(void *)(*(void *)v1 + 224) = a1;
  swift_task_dealloc();
  return _swift_task_switch(sub_100A5F414, 0, 0);
}

uint64_t sub_100A5F414()
{
  uint64_t v1 = (uint64_t)(v0 + 7);
  if (!v0[28])
  {
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v1);
    if (qword_1016370D0 != -1) {
      swift_once();
    }
    sub_100010324(v0[26], (uint64_t)qword_10170ECF8);
    uid_t v17 = Logger.logObject.getter();
    os_log_type_t v18 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v17, v18))
    {
      uint64_t v19 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v19 = 0;
      _os_log_impl((void *)&_mh_execute_header, v17, v18, "Unable to get PencilPairingService", v19, 2u);
      swift_slowDealloc();
    }

    sub_1003A4778();
    swift_allocError();
    *unint64_t v20 = 11;
    swift_willThrow();
    swift_task_dealloc();
    uint64_t v10 = (uint64_t (*)(void))v0[1];
    goto LABEL_23;
  }
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v1);
  if (qword_101637188 != -1) {
    swift_once();
  }
  uint64_t v2 = (void *)qword_10170EE68;
  id v3 = [self sharedInstance];
  unsigned int v4 = [v3 isInternalBuild];

  if (v4)
  {
    NSString v5 = String._bridgeToObjectiveC()();
    unsigned __int8 v6 = [v2 BOOLForKey:v5];

    if (v6)
    {
      if (qword_1016370D0 != -1) {
        swift_once();
      }
      sub_100010324(v0[26], (uint64_t)qword_10170ECF8);
      unint64_t v7 = Logger.logObject.getter();
      os_log_type_t v8 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v7, v8))
      {
        BOOL v9 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)BOOL v9 = 0;
        _os_log_impl((void *)&_mh_execute_header, v7, v8, "Ignoring unpairing notification user defaults is set.", v9, 2u);
        swift_slowDealloc();
      }
      swift_release();

      swift_task_dealloc();
      uint64_t v10 = (uint64_t (*)(void))v0[1];
LABEL_23:
      return v10();
    }
  }
  if (qword_1016370D0 != -1) {
    swift_once();
  }
  sub_100010324(v0[26], (uint64_t)qword_10170ECF8);
  uint64_t v11 = Logger.logObject.getter();
  os_log_type_t v12 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v11, v12))
  {
    uint64_t v13 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v13 = 0;
    _os_log_impl((void *)&_mh_execute_header, v11, v12, "Unpairing pencil...", v13, 2u);
    swift_slowDealloc();
  }

  uint64_t v14 = (void *)swift_task_alloc();
  v0[29] = v14;
  *uint64_t v14 = v0;
  v14[1] = sub_100A5F828;
  uint64_t v15 = v0[22];
  return sub_100D32E50(v15, 0);
}

uint64_t sub_100A5F828()
{
  *(void *)(*(void *)v1 + 240) = v0;
  swift_task_dealloc();
  if (v0) {
    uint64_t v2 = sub_100A5F9A8;
  }
  else {
    uint64_t v2 = sub_100A5F93C;
  }
  return _swift_task_switch(v2, 0, 0);
}

uint64_t sub_100A5F93C()
{
  swift_release();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_100A5F9A8()
{
  swift_release();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_100A5FA14@<X0>(uint64_t *a1@<X0>, unsigned char *a2@<X8>)
{
  uint64_t result = sub_1010AB668(*a1);
  *a2 = result & 1;
  return result;
}

uint64_t sub_100A5FA50(uint64_t a1)
{
  return sub_100A54868(a1, v1, (uint64_t)&unk_1015E52C0, (uint64_t)sub_100A5FA94, (uint64_t)&unk_1015E52D8);
}

uint64_t sub_100A5FA94()
{
  return sub_100A61E04(sub_100A54B30);
}

uint64_t sub_100A5FAAC(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_100A5FABC()
{
  return swift_release();
}

uint64_t sub_100A5FAC4(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_100A5FB0C()
{
  return _swift_deallocObject(v0, 32, 7);
}

void sub_100A5FB4C()
{
  CFNotificationCenterPostNotification(*(CFNotificationCenterRef *)(v0 + 16), *(CFNotificationName *)(v0 + 24), 0, 0, 1u);
}

uint64_t sub_100A5FB60(void *a1)
{
  uint64_t v1 = a1[3];
  uint64_t v2 = a1[4];
  sub_10001CD44(a1, v1);
  return (*(uint64_t (**)(uint64_t, uint64_t))(v2 + 448))(v1, v2);
}

void sub_100A5FBB8()
{
  *(unsigned char *)(v0 + OBJC_IVAR____TtC12searchpartyd20BeaconManagerService_notifiedDaemonConfigurationChangedOnce) = 0;
}

uint64_t sub_100A5FBC8()
{
  return _swift_deallocObject(v0, 32, 7);
}

uint64_t sub_100A5FBD8(uint64_t a1)
{
  return sub_100A58780(a1, *(void *)(v1 + 16), *(NSObject **)(v1 + 24), *(void *)(v1 + 32), *(void *)(v1 + 40), *(void *)(v1 + 48));
}

uint64_t sub_100A5FBFC()
{
  uint64_t v1 = type metadata accessor for UUID();
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 32) & ~v3;
  uint64_t v5 = v3 | 7;
  unint64_t v6 = (((((*(void *)(v2 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8;
  swift_release();

  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();

  return _swift_deallocObject(v0, v6 + 8, v5);
}

void sub_100A5FD14(uint64_t a1)
{
  uint64_t v3 = *(void *)(type metadata accessor for UUID() - 8);
  unint64_t v4 = (*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  unint64_t v5 = (*(void *)(v3 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v6 = *(void *)(v1 + 16);
  unint64_t v7 = *(NSObject **)(v1 + 24);
  uint64_t v8 = *(void *)(v1 + v5);
  uint64_t v9 = *(void *)(v1 + ((v5 + 15) & 0xFFFFFFFFFFFFFFF8));

  sub_100A58CF8(a1, v6, v7, v1 + v4, v8, v9);
}

uint64_t sub_100A5FDD0(uint64_t a1)
{
  uint64_t v4 = v1[2];
  uint64_t v5 = v1[3];
  uint64_t v6 = v1[4];
  unint64_t v7 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v7;
  *unint64_t v7 = v2;
  v7[1] = sub_100033F68;
  return sub_100A507F4(a1, v4, v5, v6);
}

void sub_100A5FE90(uint64_t a1)
{
  sub_100A528E8(a1, *(void *)(v1 + 16), *(void *)(v1 + 24), *(void *)(v1 + 32));
}

uint64_t sub_100A5FE9C()
{
  uint64_t v1 = sub_10000588C((uint64_t *)&unk_1016565A0);
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 24) & ~v3;
  uint64_t v5 = v4 + *(void *)(v2 + 64);
  uint64_t v6 = v3 | 7;
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);

  return _swift_deallocObject(v0, v5, v6);
}

uint64_t sub_100A5FF6C(uint64_t a1)
{
  sub_10000588C((uint64_t *)&unk_1016565A0);

  return sub_100A52AF4(a1);
}

void sub_100A5FFE4(uint64_t a1)
{
}

uint64_t sub_100A5FFEC()
{
  swift_release();

  return _swift_deallocObject(v0, 32, 7);
}

uint64_t sub_100A60024()
{
  return sub_100A56954(*(void (**)(uint64_t))(v0 + 16));
}

uint64_t sub_100A6002C()
{
  swift_unknownObjectRelease();
  swift_release();
  swift_release();
  swift_release();

  return _swift_deallocObject(v0, 72, 7);
}

uint64_t sub_100A6007C()
{
  char v2 = *(unsigned char *)(v0 + 48);
  uint64_t v3 = swift_task_alloc();
  long long v4 = *(_OWORD *)(v0 + 32);
  long long v5 = *(_OWORD *)(v0 + 56);
  *(void *)(v1 + 16) = v3;
  *(void *)uint64_t v3 = v1;
  *(void *)(v3 + 8) = sub_10001D2E4;
  *(unsigned char *)(v3 + 120) = v2;
  *(_OWORD *)(v3 + 32) = v4;
  *(_OWORD *)(v3 + 48) = v5;
  return _swift_task_switch(sub_100A56A30, 0, 0);
}

uint64_t sub_100A60134@<X0>(void *a1@<X8>)
{
  return sub_100A5740C(a1);
}

uint64_t sub_100A6013C()
{
  sub_10001CFB8(*(void *)(v0 + 16), *(void *)(v0 + 24));

  return _swift_deallocObject(v0, 32, 7);
}

uint64_t sub_100A60174(uint64_t *a1)
{
  return sub_100B0221C(a1, *(void *)(v1 + 16), *(void *)(v1 + 24));
}

uint64_t sub_100A6017C()
{
  swift_release();

  return _swift_deallocObject(v0, 32, 7);
}

void sub_100A601BC(uint64_t a1)
{
  sub_100B02794(a1, *(void *)(v1 + 16), *(NSObject **)(v1 + 24));
}

uint64_t sub_100A601C4()
{
  return sub_100A6138C((void (*)(void))&_swift_release);
}

uint64_t sub_100A601DC()
{
  return sub_100A56290(*(void *)(v0 + 16), *(uint64_t (**)(uint64_t))(v0 + 24));
}

uint64_t sub_100A601E8(uint64_t a1)
{
  return sub_100B0B6BC(a1, v1[2], v1[3], v1[4]);
}

uint64_t sub_100A6020C()
{
  return sub_100A55E5C(*(void *)(v0 + 16), *(void *)(v0 + 24));
}

uint64_t sub_100A60214()
{
  return _swift_deallocObject(v0, 32, 7);
}

uint64_t sub_100A60224()
{
  return sub_1004FBB28(v0);
}

uint64_t sub_100A6022C()
{
  return _swift_deallocObject(v0, 32, 7);
}

uint64_t sub_100A6023C()
{
  return _swift_deallocObject(v0, 32, 7);
}

uint64_t sub_100A6024C(uint64_t a1)
{
  return sub_100A54414(a1, *(void *)(v1 + 16));
}

void sub_100A60268(uint64_t a1)
{
  sub_100A54D64(a1, v1);
}

uint64_t sub_100A60284()
{
  uint64_t v1 = (int *)type metadata accessor for OwnedBeaconRecord();
  uint64_t v2 = *(unsigned __int8 *)(*((void *)v1 - 1) + 80);
  uint64_t v3 = (v2 + 24) & ~v2;
  uint64_t v19 = *(void *)(*((void *)v1 - 1) + 64);
  swift_release();
  uint64_t v4 = v0 + v3;
  sub_10001CFB8(*(void *)(v0 + v3), *(void *)(v0 + v3 + 8));
  uint64_t v5 = v0 + v3 + v1[5];
  uint64_t v6 = type metadata accessor for UUID();
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = *(void (**)(uint64_t, uint64_t))(v7 + 8);
  v8(v5, v6);
  uint64_t v9 = v0 + v3 + v1[6];
  type metadata accessor for StableIdentifier();
  switch(swift_getEnumCaseMultiPayload())
  {
    case 0u:
    case 4u:
      goto LABEL_6;
    case 1u:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      goto LABEL_6;
    case 2u:
      v8(v9, v6);
      uint64_t v18 = (v2 + 24) & ~v2;
      sub_10000588C(&qword_1016555E0);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      goto LABEL_5;
    case 3u:
      v8(v9, v6);
      uint64_t v18 = (v2 + 24) & ~v2;
      sub_10000588C((uint64_t *)&unk_1016565E0);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
LABEL_5:
      uint64_t v3 = v18;
LABEL_6:
      swift_bridgeObjectRelease();
      break;
    default:
      break;
  }
  uint64_t v10 = v4 + v1[7];
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(v10, 1, v6)) {
    v8(v10, v6);
  }
  uint64_t v11 = v4 + v1[8];
  uint64_t v12 = type metadata accessor for Date();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v12 - 8) + 8))(v11, v12);
  sub_10001CFB8(*(void *)(v4 + v1[9]), *(void *)(v4 + v1[9] + 8));
  uint64_t v13 = (uint64_t *)(v4 + v1[10]);
  unint64_t v14 = v13[1];
  if (v14 >> 60 != 15) {
    sub_10001CFB8(*v13, v14);
  }
  uint64_t v15 = (uint64_t *)(v4 + v1[11]);
  unint64_t v16 = v15[1];
  if (v16 >> 60 != 15) {
    sub_10001CFB8(*v15, v16);
  }
  sub_10001CFB8(*(void *)(v4 + v1[12]), *(void *)(v4 + v1[12] + 8));
  sub_10001CFB8(*(void *)(v4 + v1[13]), *(void *)(v4 + v1[13] + 8));
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return _swift_deallocObject(v0, v3 + v19, v2 | 7);
}

uint64_t sub_100A60608(uint64_t a1)
{
  uint64_t v3 = *(void *)(type metadata accessor for OwnedBeaconRecord() - 8);
  uint64_t v4 = *(void *)(v1 + 16);
  uint64_t v5 = v1 + ((*(unsigned __int8 *)(v3 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80));

  return sub_100A545C4(a1, v4, v5);
}

uint64_t sub_100A6067C@<X0>(uint64_t a1@<X8>)
{
  return sub_100B6A0BC(*(void *)(v1 + 24), *(void *)(v1 + 32), a1);
}

uint64_t sub_100A606A0()
{
  swift_unknownObjectRelease();

  swift_release();

  return _swift_deallocObject(v0, 48, 7);
}

uint64_t sub_100A606E8()
{
  swift_release();
  swift_release();

  return _swift_deallocObject(v0, 40, 7);
}

void sub_100A60730(uint64_t a1)
{
  sub_100A53E58(a1, *(NSObject **)(v1 + 16), *(void *)(v1 + 24));
}

uint64_t sub_100A6073C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_10000588C(&qword_10163B9F0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 24))(a2, a1, v4);
  return a2;
}

uint64_t sub_100A607A8()
{
  uint64_t v1 = *(void *)(sub_10000588C(&qword_10163B9F0) - 8);
  uint64_t v2 = *(unsigned __int8 *)(v1 + 80);
  uint64_t v3 = (v2 + 48) & ~v2;
  uint64_t v4 = *(void *)(v1 + 64);
  swift_unknownObjectRelease();

  swift_release();
  uint64_t v5 = v0 + v3;
  uint64_t v6 = (int *)type metadata accessor for OwnedBeaconRecord();
  if (!(*(unsigned int (**)(uint64_t, uint64_t, int *))(*((void *)v6 - 1) + 48))(v0 + v3, 1, v6))
  {
    sub_10001CFB8(*(void *)v5, *(void *)(v5 + 8));
    uint64_t v7 = v5 + v6[5];
    uint64_t v8 = type metadata accessor for UUID();
    uint64_t v9 = *(void *)(v8 - 8);
    unint64_t v20 = *(void (**)(uint64_t, uint64_t))(v9 + 8);
    v20(v7, v8);
    uint64_t v10 = v5 + v6[6];
    type metadata accessor for StableIdentifier();
    switch(swift_getEnumCaseMultiPayload())
    {
      case 0u:
      case 4u:
        goto LABEL_7;
      case 1u:
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        goto LABEL_7;
      case 2u:
        v20(v10, v8);
        uint64_t v19 = v4;
        sub_10000588C(&qword_1016555E0);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        goto LABEL_6;
      case 3u:
        v20(v10, v8);
        uint64_t v19 = v4;
        sub_10000588C((uint64_t *)&unk_1016565E0);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
LABEL_6:
        uint64_t v4 = v19;
LABEL_7:
        swift_bridgeObjectRelease();
        break;
      default:
        break;
    }
    uint64_t v11 = v5 + v6[7];
    if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v9 + 48))(v11, 1, v8)) {
      v20(v11, v8);
    }
    uint64_t v12 = v5 + v6[8];
    uint64_t v13 = type metadata accessor for Date();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v13 - 8) + 8))(v12, v13);
    sub_10001CFB8(*(void *)(v5 + v6[9]), *(void *)(v5 + v6[9] + 8));
    unint64_t v14 = (uint64_t *)(v5 + v6[10]);
    unint64_t v15 = v14[1];
    if (v15 >> 60 != 15) {
      sub_10001CFB8(*v14, v15);
    }
    unint64_t v16 = (uint64_t *)(v5 + v6[11]);
    unint64_t v17 = v16[1];
    if (v17 >> 60 != 15) {
      sub_10001CFB8(*v16, v17);
    }
    sub_10001CFB8(*(void *)(v5 + v6[12]), *(void *)(v5 + v6[12] + 8));
    sub_10001CFB8(*(void *)(v5 + v6[13]), *(void *)(v5 + v6[13] + 8));
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }

  return _swift_deallocObject(v0, v3 + v4, v2 | 7);
}

uint64_t sub_100A60B7C()
{
  uint64_t v2 = *(void *)(sub_10000588C(&qword_10163B9F0) - 8);
  uint64_t v3 = *(void *)(v0 + 32);
  uint64_t v4 = v0 + ((*(unsigned __int8 *)(v2 + 80) + 48) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80));
  uint64_t v5 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v5;
  *uint64_t v5 = v1;
  v5[1] = sub_10001D2E4;
  _OWORD v5[2] = v3;
  uint64_t v6 = (void *)swift_task_alloc();
  v5[3] = v6;
  *uint64_t v6 = v5;
  v6[1] = sub_100A51C88;
  return sub_100A5D098(v4);
}

uint64_t sub_100A60C9C()
{
  swift_weakDestroy();

  return _swift_deallocObject(v0, 24, 7);
}

uint64_t sub_100A60CD4(uint64_t a1, uint64_t a2, char a3)
{
  return sub_100A4FA9C(a1, a2, a3);
}

uint64_t sub_100A60CE0()
{
  return NSXPCConnection.hasEntitlement<A>(_:)() & 1;
}

unint64_t sub_100A60D18()
{
  unint64_t result = qword_101656680;
  if (!qword_101656680)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_101656680);
  }
  return result;
}

uint64_t sub_100A60D6C()
{
  return sub_100A48E48(v0);
}

uint64_t sub_100A60D88(uint64_t a1, uint64_t a2)
{
  uint64_t v6 = (void *)swift_task_alloc();
  *(void *)(v3 + 16) = v6;
  *uint64_t v6 = v3;
  v6[1] = sub_100033F68;
  return sub_100A4CCEC(a1, a2, v2);
}

unint64_t sub_100A60E34()
{
  unint64_t result = qword_101656708;
  if (!qword_101656708)
  {
    sub_10000592C(&qword_101656700);
    sub_100A5FAC4(&qword_10163B040, (void (*)(uint64_t))&type metadata accessor for UUID);
    sub_100176E3C();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_101656708);
  }
  return result;
}

void sub_100A60EE0()
{
  sub_100A49558(v0);
}

uint64_t sub_100A60EE8(uint64_t a1)
{
  return sub_100A4C424(a1, v1);
}

uint64_t sub_100A60EF0(void *a1)
{
  return sub_100A4C4A4(a1);
}

uint64_t sub_100A60EF8()
{
  uint64_t v2 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v2;
  *uint64_t v2 = v1;
  v2[1] = sub_100033F68;
  return sub_100A4C900(v0);
}

void sub_100A60F88(uint64_t *a1)
{
  sub_1003E3994(a1, v1);
}

uint64_t sub_100A60F90(uint64_t *a1)
{
  return sub_1001CBDC0(a1, v1);
}

uint64_t sub_100A60F98(uint64_t a1, uint64_t a2, char a3)
{
  return sub_100A4B2E0(a1, a2, a3);
}

uint64_t sub_100A60FA0(uint64_t a1, uint64_t a2)
{
  return sub_1007E869C(a1, a2);
}

uint64_t sub_100A60FA8(uint64_t a1)
{
  uint64_t v3 = *(uint64_t (**)(uint64_t, uint64_t))(v1 + 16);
  uint64_t v4 = sub_10000588C((uint64_t *)&unk_1016569B0);
  return v3(a1, a1 + *(int *)(v4 + 48));
}

uint64_t sub_100A60FF4()
{
  return sub_100A6138C((void (*)(void))&_swift_unknownObjectRelease);
}

uint64_t sub_100A6100C(uint64_t a1)
{
  uint64_t v4 = v1[2];
  uint64_t v5 = v1[3];
  uint64_t v6 = v1[4];
  uint64_t v7 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v7;
  *uint64_t v7 = v2;
  v7[1] = sub_100033F68;
  return sub_1007EFD28(a1, v4, v5, v6);
}

uint64_t sub_100A610C0(uint64_t a1)
{
  uint64_t v4 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v4;
  *uint64_t v4 = v2;
  v4[2] = a1;
  v4[3] = v1;
  v4[1] = sub_100033F68;
  return _swift_task_switch(sub_100A4B408, 0, 0);
}

uint64_t sub_100A6116C()
{
  return sub_100A4E500() & 1;
}

uint64_t sub_100A6118C()
{
  return NSXPCConnection.hasEntitlement<A>(_:)() & 1;
}

unint64_t sub_100A611D8()
{
  unint64_t result = qword_1016568B0;
  if (!qword_1016568B0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1016568B0);
  }
  return result;
}

uint64_t sub_100A6122C(unsigned __int8 *a1)
{
  return sub_100A4B638(a1);
}

void sub_100A61234()
{
}

uint64_t sub_100A61240()
{
  uint64_t v2 = *(void *)(v0 + 16);
  uint64_t v3 = *(void *)(v0 + 24);
  uint64_t v4 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v4;
  *uint64_t v4 = v1;
  v4[1] = sub_100033F68;
  return sub_1008DBBF0(v2, v3);
}

uint64_t sub_100A612D8()
{
  return sub_100A4BA84();
}

uint64_t sub_100A612E0()
{
  return sub_100A4BAF0();
}

uint64_t sub_100A612E8(uint64_t a1)
{
  return sub_100A4BBD0(a1, v1);
}

uint64_t sub_100A612F0()
{
  return _swift_deallocObject(v0, 32, 7);
}

uint64_t sub_100A61300@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  return sub_100A4FC28(a1, *(void *)(v2 + 16), *(void *)(v2 + 24), a2);
}

uint64_t sub_100A61308(uint64_t a1, uint64_t a2, char a3)
{
  return sub_100A4FCDC(a1, a2, a3);
}

uint64_t sub_100A61310(uint64_t a1)
{
  return swift_release();
}

uint64_t sub_100A61374()
{
  return sub_100A6138C((void (*)(void))&_swift_release);
}

uint64_t sub_100A6138C(void (*a1)(void))
{
  a1(*(void *)(v1 + 16));
  swift_release();

  return _swift_deallocObject(v1, 40, 7);
}

void sub_100A613D4(uint64_t *a1)
{
  sub_100A50B70(a1, *(void *)(v1 + 16), *(void ***)(v1 + 24), *(void *)(v1 + 32));
}

uint64_t sub_100A613E0()
{
  swift_bridgeObjectRelease();

  return _swift_deallocObject(v0, 32, 7);
}

uint64_t sub_100A61418()
{
  uint64_t v1 = *(void *)(sub_10000588C(&qword_10163B9E0) - 8);
  uint64_t v2 = *(unsigned __int8 *)(v1 + 80);
  uint64_t v3 = (v2 + 16) & ~v2;
  uint64_t v4 = *(void *)(v1 + 64);
  uint64_t v5 = v0 + v3;
  uint64_t v6 = type metadata accessor for BeaconNamingRecord();
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 48))(v0 + v3, 1, v6))
  {
    sub_10001CFB8(*(void *)v5, *(void *)(v5 + 8));
    uint64_t v7 = v5 + *(int *)(v6 + 20);
    uint64_t v8 = type metadata accessor for UUID();
    uint64_t v9 = *(void (**)(uint64_t, uint64_t))(*(void *)(v8 - 8) + 8);
    v9(v7, v8);
    v9(v5 + *(int *)(v6 + 24), v8);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();

  return _swift_deallocObject(v0, ((((((((v4 + v3 + 7) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8)+ 16, v2 | 7);
}

uint64_t sub_100A615EC(uint64_t a1)
{
  uint64_t v3 = *(void *)(sub_10000588C(&qword_10163B9E0) - 8);
  unint64_t v4 = (*(unsigned __int8 *)(v3 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  unint64_t v5 = (*(void *)(v3 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v6 = (v5 + 15) & 0xFFFFFFFFFFFFFFF8;
  return sub_100A5102C(a1, v1 + v4, *(void *)(v1 + v5), *(void *)(v1 + v6), *(void *)(v1 + v6 + 8), *(void (**)(char *))(v1 + ((v6 + 23) & 0xFFFFFFFFFFFFFFF8)), *(void *)(v1 + ((v6 + 23) & 0xFFFFFFFFFFFFFFF8) + 8), *(void (**)(void))(v1 + ((((v6 + 23) & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8)));
}

uint64_t sub_100A616BC(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 32))(a2, a1, v5);
  return a2;
}

uint64_t sub_100A61724()
{
  uint64_t v1 = (int *)type metadata accessor for OwnedBeaconRecord();
  uint64_t v2 = *(unsigned __int8 *)(*((void *)v1 - 1) + 80);
  uint64_t v3 = (v2 + 32) & ~v2;
  uint64_t v19 = *(void *)(*((void *)v1 - 1) + 64);
  swift_release();
  uint64_t v4 = v0 + v3;
  sub_10001CFB8(*(void *)(v0 + v3), *(void *)(v0 + v3 + 8));
  uint64_t v5 = v0 + v3 + v1[5];
  uint64_t v6 = type metadata accessor for UUID();
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = *(void (**)(uint64_t, uint64_t))(v7 + 8);
  v8(v5, v6);
  uint64_t v9 = v0 + v3 + v1[6];
  type metadata accessor for StableIdentifier();
  switch(swift_getEnumCaseMultiPayload())
  {
    case 0u:
    case 4u:
      goto LABEL_6;
    case 1u:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      goto LABEL_6;
    case 2u:
      v8(v9, v6);
      uint64_t v18 = (v2 + 32) & ~v2;
      sub_10000588C(&qword_1016555E0);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      goto LABEL_5;
    case 3u:
      v8(v9, v6);
      uint64_t v18 = (v2 + 32) & ~v2;
      sub_10000588C((uint64_t *)&unk_1016565E0);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
LABEL_5:
      uint64_t v3 = v18;
LABEL_6:
      swift_bridgeObjectRelease();
      break;
    default:
      break;
  }
  uint64_t v10 = v4 + v1[7];
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(v10, 1, v6)) {
    v8(v10, v6);
  }
  uint64_t v11 = v4 + v1[8];
  uint64_t v12 = type metadata accessor for Date();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v12 - 8) + 8))(v11, v12);
  sub_10001CFB8(*(void *)(v4 + v1[9]), *(void *)(v4 + v1[9] + 8));
  uint64_t v13 = (uint64_t *)(v4 + v1[10]);
  unint64_t v14 = v13[1];
  if (v14 >> 60 != 15) {
    sub_10001CFB8(*v13, v14);
  }
  unint64_t v15 = (uint64_t *)(v4 + v1[11]);
  unint64_t v16 = v15[1];
  if (v16 >> 60 != 15) {
    sub_10001CFB8(*v15, v16);
  }
  sub_10001CFB8(*(void *)(v4 + v1[12]), *(void *)(v4 + v1[12] + 8));
  sub_10001CFB8(*(void *)(v4 + v1[13]), *(void *)(v4 + v1[13] + 8));
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return _swift_deallocObject(v0, v3 + v19, v2 | 7);
}

uint64_t sub_100A61AA8()
{
  uint64_t v1 = *(void *)(type metadata accessor for OwnedBeaconRecord() - 8);
  return (*(uint64_t (**)(unint64_t))(v0 + 16))(v0 + ((*(unsigned __int8 *)(v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80)));
}

uint64_t sub_100A61B10(uint64_t a1)
{
  return sub_100A4BFC4(a1, v1);
}

uint64_t sub_100A61B2C()
{
  return sub_100A4BED8();
}

uint64_t sub_100A61B34()
{
  uint64_t v2 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v2;
  *uint64_t v2 = v1;
  v2[1] = sub_100033F68;
  v2[15] = v0;
  return _swift_task_switch(sub_100A4FE2C, 0, 0);
}

uint64_t sub_100A61BDC()
{
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return _swift_deallocObject(v0, 113, 7);
}

uint64_t sub_100A61C44()
{
  return sub_1004551F8((unsigned __int8 *)(v0 + 24), *(void *)(v0 + 16));
}

uint64_t sub_100A61C50@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  return sub_100A46E68(a1, a2, v3, a3);
}

uint64_t sub_100A61C58()
{
  return sub_100A46A30();
}

uint64_t sub_100A61C88(uint64_t a1)
{
  return sub_100A463A8(a1, v1);
}

uint64_t sub_100A61C90(uint64_t a1)
{
  return sub_100A466F4(a1, v1);
}

uint64_t sub_100A61C98()
{
  return sub_100A46B30();
}

uint64_t sub_100A61CA0()
{
  return sub_100A469D8();
}

uint64_t sub_100A61CBC(uint64_t result)
{
  if (result != 1) {
    return swift_release();
  }
  return result;
}

uint64_t sub_100A61CCC(uint64_t a1)
{
  return a1;
}

uint64_t sub_100A61D20(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

uint64_t sub_100A61D88(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t sub_100A61DEC()
{
  return sub_100A61E04(sub_100A501F0);
}

uint64_t sub_100A61E04(uint64_t (*a1)(void))
{
  return a1();
}

uint64_t sub_100A61E44(uint64_t a1)
{
  return sub_100A54868(a1, v1, (uint64_t)&unk_1015E5A40, (uint64_t)sub_100A61DEC, (uint64_t)&unk_1015E5A58);
}

void sub_100A61E84(void *a1@<X8>)
{
  sub_1006E3780(v1, a1);
}

uint64_t sub_100A61E8C()
{
  return sub_100AA665C(*(void (**)(uint64_t *__return_ptr))(v0 + 16));
}

unint64_t sub_100A61E94@<X0>(unint64_t *a1@<X8>)
{
  return sub_10094B31C(a1);
}

uint64_t sub_100A61E9C()
{
  return sub_100AA6844(*(void (**)(uint64_t *__return_ptr))(v0 + 16));
}

uint64_t sub_100A61EA4()
{
  return sub_100A48B04();
}

unsigned char *storeEnumTagSinglePayload for BeaconManagerEntitlement(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 6 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 6) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFA) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xF9)
  {
    unsigned int v6 = ((a2 - 250) >> 8) + 1;
    *unint64_t result = a2 + 6;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x100A61F78);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 6;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for BeaconManagerEntitlement()
{
  return &type metadata for BeaconManagerEntitlement;
}

unsigned char *storeEnumTagSinglePayload for BeaconManagerService.BeaconManagerServiceError(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 14 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 14) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xF2) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xF1)
  {
    unsigned int v6 = ((a2 - 242) >> 8) + 1;
    *unint64_t result = a2 + 14;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x100A6207CLL);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 14;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for BeaconManagerService.BeaconManagerServiceError()
{
  return &type metadata for BeaconManagerService.BeaconManagerServiceError;
}

unint64_t sub_100A620B8()
{
  unint64_t result = qword_1016569D8;
  if (!qword_1016569D8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1016569D8);
  }
  return result;
}

unint64_t sub_100A62110()
{
  unint64_t result = qword_1016569E0;
  if (!qword_1016569E0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1016569E0);
  }
  return result;
}

unint64_t sub_100A62168()
{
  unint64_t result = qword_1016569E8;
  if (!qword_1016569E8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1016569E8);
  }
  return result;
}

ValueMetadata *_s34DisplayIdentifierAndMembershipTypeVMa()
{
  return &_s34DisplayIdentifierAndMembershipTypeVN;
}

uint64_t sub_100A6227C@<X0>(uint64_t a1@<X0>, _OWORD *a2@<X8>)
{
  unsigned int v4 = (int *)type metadata accessor for MemberPeerTrust();
  uint64_t v5 = sub_100A62E38(*(void *)(a1 + v4[8]), *(void *)(a1 + v4[8] + 8));
  uint64_t v7 = v6;
  uint64_t v8 = v4[5];
  uint64_t v9 = a1 + v8;
  uint64_t v10 = (char *)a2 + v8;
  uint64_t v11 = type metadata accessor for UUID();
  (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v11 - 8) + 16))(v10, v9, v11);
  LOBYTE(v9) = *(unsigned char *)(a1 + v4[6]);
  sub_1009CA6F0(a1 + v4[7], (uint64_t)a2 + v4[7]);
  uint64_t v12 = (uint64_t *)(a1 + v4[9]);
  uint64_t v13 = *v12;
  unint64_t v14 = v12[1];
  *a2 = xmmword_101348180;
  *((unsigned char *)a2 + v4[6]) = v9;
  unint64_t v15 = (uint64_t *)((char *)a2 + v4[8]);
  *unint64_t v15 = v5;
  v15[1] = v7;
  unint64_t v16 = (uint64_t *)((char *)a2 + v4[9]);
  uint64_t *v16 = v13;
  v16[1] = v14;

  return sub_1000361E0(v13, v14);
}

uint64_t sub_100A62380@<X0>(uint64_t a1@<X0>, _OWORD *a2@<X8>)
{
  unsigned int v4 = (int *)type metadata accessor for OwnerPeerTrust();
  uint64_t v5 = sub_100A62E38(*(void *)(a1 + v4[8]), *(void *)(a1 + v4[8] + 8));
  uint64_t v7 = v6;
  uint64_t v8 = v4[5];
  uint64_t v9 = a1 + v8;
  uint64_t v10 = (char *)a2 + v8;
  uint64_t v11 = type metadata accessor for UUID();
  (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v11 - 8) + 16))(v10, v9, v11);
  LOBYTE(v9) = *(unsigned char *)(a1 + v4[6]);
  sub_1009CA6F0(a1 + v4[7], (uint64_t)a2 + v4[7]);
  uint64_t v12 = (uint64_t *)(a1 + v4[9]);
  uint64_t v13 = *v12;
  unint64_t v14 = v12[1];
  LOBYTE(v12) = *(unsigned char *)(a1 + v4[10]);
  *a2 = xmmword_101348180;
  *((unsigned char *)a2 + v4[6]) = v9;
  unint64_t v15 = (uint64_t *)((char *)a2 + v4[8]);
  *unint64_t v15 = v5;
  v15[1] = v7;
  unint64_t v16 = (uint64_t *)((char *)a2 + v4[9]);
  uint64_t *v16 = v13;
  v16[1] = v14;
  *((unsigned char *)a2 + v4[10]) = (_BYTE)v12;

  return sub_1000361E0(v13, v14);
}

uint64_t sub_100A62490(uint64_t a1)
{
  uint64_t v2 = v1;
  if (*(void *)(*(void *)(v1 + 248) + 16) <= *(void *)(a1 + 16) >> 3)
  {
    swift_bridgeObjectRetain();
    uint64_t v16 = swift_bridgeObjectRetain();
    sub_10089E68C(v16);
    swift_bridgeObjectRelease();
    uint64_t v5 = (unint64_t *)a1;
    if (*(void *)(a1 + 16)) {
      goto LABEL_3;
    }
  }
  else
  {
    swift_bridgeObjectRetain();
    uint64_t v4 = swift_bridgeObjectRetain();
    uint64_t v5 = sub_1008A03DC(v4, a1);
    swift_bridgeObjectRelease();
    if (v5[2])
    {
LABEL_3:
      uint64_t v6 = swift_bridgeObjectRetain();
      uint64_t v7 = *(void *)(sub_100A629C4(v6, (uint64_t (*)(char *, unint64_t, uint64_t))sub_100A62CBC) + 16);
      swift_release();
      uint64_t v8 = *(void *)(sub_100A629C4((uint64_t)v5, (uint64_t (*)(char *, unint64_t, uint64_t))sub_100A62B3C)+ 16);
      swift_release();
      if (qword_101636888 != -1) {
        swift_once();
      }
      uint64_t v9 = type metadata accessor for Logger();
      sub_100010324(v9, (uint64_t)qword_10170D788);
      uint64_t v10 = Logger.logObject.getter();
      os_log_type_t v11 = static os_log_type_t.fault.getter();
      if (os_log_type_enabled(v10, v11))
      {
        uint64_t v12 = swift_slowAlloc();
        *(_DWORD *)uint64_t v12 = 134218240;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        *(_WORD *)(v12 + 12) = 2048;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        _os_log_impl((void *)&_mh_execute_header, v10, v11, "Display identifiers contain unexpected prefix. Owner: %ld, member: %ld.", (uint8_t *)v12, 0x16u);
        swift_slowDealloc();
      }

      type metadata accessor for Transaction();
      uint64_t v13 = swift_allocObject();
      *(void *)(v13 + 16) = v7;
      *(void *)(v13 + 24) = v8;
      static Transaction.asyncTask(name:block:)();
      swift_release();
      swift_bridgeObjectRetain();
      uint64_t v14 = swift_bridgeObjectRetain();
      *(void *)(v2 + 248) = sub_1009DD0F4(v14, a1);
      return swift_bridgeObjectRelease();
    }
  }

  return swift_bridgeObjectRelease();
}

Swift::Int sub_100A62748()
{
  Swift::UInt v1 = *(unsigned __int8 *)(v0 + 16);
  Hasher.init(_seed:)();
  String.hash(into:)();
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

void sub_100A627AC()
{
  Swift::UInt v1 = *(unsigned __int8 *)(v0 + 16);
  String.hash(into:)();
  Hasher._combine(_:)(v1);
}

Swift::Int sub_100A627E4()
{
  Swift::UInt v1 = *(unsigned __int8 *)(v0 + 16);
  Hasher.init(_seed:)();
  String.hash(into:)();
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

uint64_t sub_100A62844(uint64_t a1, uint64_t a2)
{
  int v2 = *(unsigned __int8 *)(a1 + 16);
  int v3 = *(unsigned __int8 *)(a2 + 16);
  if (*(void *)a1 == *(void *)a2 && *(void *)(a1 + 8) == *(void *)(a2 + 8)) {
    return v2 ^ v3 ^ 1u;
  }
  char v5 = _stringCompareWithSmolCheck(_:_:expecting:)();
  uint64_t result = 0;
  if (v5) {
    return v2 ^ v3 ^ 1u;
  }
  return result;
}

unint64_t sub_100A628A8()
{
  unint64_t result = qword_101656AB0;
  if (!qword_101656AB0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, &qword_101656AB0);
  }
  return result;
}

void sub_100A628FC()
{
  qword_10170E988 = (uint64_t)&off_1015A03C0;
}

uint64_t sub_100A62910(uint64_t a1, uint64_t a2)
{
  uint64_t v7 = (uint64_t (*)(uint64_t, uint64_t))((char *)&dword_101662A20 + dword_101662A20);
  char v5 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v5;
  *char v5 = v2;
  v5[1] = sub_100033F68;
  return v7(a1, a2);
}

uint64_t sub_100A629C4(uint64_t isStackAllocationSafe, uint64_t (*a2)(char *, unint64_t, uint64_t))
{
  uint64_t v4 = isStackAllocationSafe;
  char v5 = *(unsigned char *)(isStackAllocationSafe + 32);
  unint64_t v6 = (unint64_t)((1 << v5) + 63) >> 6;
  size_t v7 = 8 * v6;
  if ((v5 & 0x3Fu) <= 0xD
    || (isStackAllocationSafe = swift_stdlib_isStackAllocationSafe(), (isStackAllocationSafe & 1) != 0))
  {
    __chkstk_darwin(isStackAllocationSafe);
    bzero((char *)&v11 - ((v7 + 15) & 0x3FFFFFFFFFFFFFF0), v7);
    uint64_t v8 = a2((char *)&v11 - ((v7 + 15) & 0x3FFFFFFFFFFFFFF0), v6, v4);
    swift_release();
    if (v2) {
      swift_willThrow();
    }
  }
  else
  {
    uint64_t v9 = (void *)swift_slowAlloc();
    bzero(v9, v7);
    uint64_t v8 = a2((char *)v9, v6, v4);
    swift_release();
    swift_slowDealloc();
  }
  return v8;
}

uint64_t sub_100A62B3C(uint64_t result, uint64_t a2, uint64_t a3)
{
  char v5 = (unint64_t *)result;
  uint64_t v6 = 0;
  int64_t v7 = 0;
  uint64_t v8 = a3 + 56;
  uint64_t v9 = 1 << *(unsigned char *)(a3 + 32);
  uint64_t v10 = -1;
  if (v9 < 64) {
    uint64_t v10 = ~(-1 << v9);
  }
  unint64_t v11 = v10 & *(void *)(a3 + 56);
  int64_t v12 = (unint64_t)(v9 + 63) >> 6;
  while (1)
  {
    if (v11)
    {
      unint64_t v13 = __clz(__rbit64(v11));
      v11 &= v11 - 1;
      unint64_t v14 = v13 | (v7 << 6);
      goto LABEL_5;
    }
    int64_t v15 = v7 + 1;
    if (__OFADD__(v7, 1))
    {
      __break(1u);
      goto LABEL_26;
    }
    if (v15 >= v12) {
      goto LABEL_24;
    }
    unint64_t v16 = *(void *)(v8 + 8 * v15);
    ++v7;
    if (!v16)
    {
      int64_t v7 = v15 + 1;
      if (v15 + 1 >= v12) {
        goto LABEL_24;
      }
      unint64_t v16 = *(void *)(v8 + 8 * v7);
      if (!v16)
      {
        int64_t v7 = v15 + 2;
        if (v15 + 2 >= v12) {
          goto LABEL_24;
        }
        unint64_t v16 = *(void *)(v8 + 8 * v7);
        if (!v16) {
          break;
        }
      }
    }
LABEL_20:
    unint64_t v11 = (v16 - 1) & v16;
    unint64_t v14 = __clz(__rbit64(v16)) + (v7 << 6);
LABEL_5:
    if (*(unsigned char *)(*(void *)(a3 + 48) + 24 * v14 + 16) == 1)
    {
      *(void *)(result + ((v14 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v14;
      if (__OFADD__(v6++, 1))
      {
        __break(1u);
LABEL_24:
        swift_retain();
        return sub_100B289CC(v5, a2, v6, a3);
      }
    }
  }
  int64_t v17 = v15 + 3;
  if (v17 >= v12) {
    goto LABEL_24;
  }
  unint64_t v16 = *(void *)(v8 + 8 * v17);
  if (v16)
  {
    int64_t v7 = v17;
    goto LABEL_20;
  }
  while (1)
  {
    int64_t v7 = v17 + 1;
    if (__OFADD__(v17, 1)) {
      break;
    }
    if (v7 >= v12) {
      goto LABEL_24;
    }
    unint64_t v16 = *(void *)(v8 + 8 * v7);
    ++v17;
    if (v16) {
      goto LABEL_20;
    }
  }
LABEL_26:
  __break(1u);
  return result;
}

uint64_t sub_100A62CBC(uint64_t result, uint64_t a2, uint64_t a3)
{
  char v5 = (unint64_t *)result;
  uint64_t v6 = 0;
  int64_t v7 = 0;
  uint64_t v8 = a3 + 56;
  uint64_t v9 = 1 << *(unsigned char *)(a3 + 32);
  uint64_t v10 = -1;
  if (v9 < 64) {
    uint64_t v10 = ~(-1 << v9);
  }
  unint64_t v11 = v10 & *(void *)(a3 + 56);
  int64_t v12 = (unint64_t)(v9 + 63) >> 6;
  while (1)
  {
    if (v11)
    {
      unint64_t v13 = __clz(__rbit64(v11));
      v11 &= v11 - 1;
      unint64_t v14 = v13 | (v7 << 6);
      goto LABEL_5;
    }
    int64_t v15 = v7 + 1;
    if (__OFADD__(v7, 1))
    {
      __break(1u);
      goto LABEL_26;
    }
    if (v15 >= v12) {
      goto LABEL_24;
    }
    unint64_t v16 = *(void *)(v8 + 8 * v15);
    ++v7;
    if (!v16)
    {
      int64_t v7 = v15 + 1;
      if (v15 + 1 >= v12) {
        goto LABEL_24;
      }
      unint64_t v16 = *(void *)(v8 + 8 * v7);
      if (!v16)
      {
        int64_t v7 = v15 + 2;
        if (v15 + 2 >= v12) {
          goto LABEL_24;
        }
        unint64_t v16 = *(void *)(v8 + 8 * v7);
        if (!v16) {
          break;
        }
      }
    }
LABEL_20:
    unint64_t v11 = (v16 - 1) & v16;
    unint64_t v14 = __clz(__rbit64(v16)) + (v7 << 6);
LABEL_5:
    if ((*(unsigned char *)(*(void *)(a3 + 48) + 24 * v14 + 16) & 1) == 0)
    {
      *(void *)(result + ((v14 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v14;
      if (__OFADD__(v6++, 1))
      {
        __break(1u);
LABEL_24:
        swift_retain();
        return sub_100B289CC(v5, a2, v6, a3);
      }
    }
  }
  int64_t v17 = v15 + 3;
  if (v17 >= v12) {
    goto LABEL_24;
  }
  unint64_t v16 = *(void *)(v8 + 8 * v17);
  if (v16)
  {
    int64_t v7 = v17;
    goto LABEL_20;
  }
  while (1)
  {
    int64_t v7 = v17 + 1;
    if (__OFADD__(v17, 1)) {
      break;
    }
    if (v7 >= v12) {
      goto LABEL_24;
    }
    unint64_t v16 = *(void *)(v8 + 8 * v7);
    ++v17;
    if (v16) {
      goto LABEL_20;
    }
  }
LABEL_26:
  __break(1u);
  return result;
}

uint64_t sub_100A62E38(uint64_t a1, unint64_t a2)
{
  if (qword_101636F10 != -1) {
    swift_once();
  }
  uint64_t v4 = *(void *)(qword_10170E988 + 16);
  if (!v4)
  {
LABEL_15:
    swift_bridgeObjectRetain();
    return a1;
  }
  uint64_t v5 = swift_bridgeObjectRetain() + 40;
  while (1)
  {
    swift_bridgeObjectRetain();
    uint64_t v6 = String.count.getter();
    if (v6 < String.count.getter())
    {
      swift_bridgeObjectRelease();
      goto LABEL_6;
    }
    String.count.getter();
    unint64_t v7 = String.index(_:offsetBy:)();
    String.subscript.getter();
    Swift::String v8 = Substring.lowercased()();
    swift_bridgeObjectRelease();
    Swift::String v9 = String.lowercased()();
    swift_bridgeObjectRelease();
    if (v8._countAndFlagsBits == v9._countAndFlagsBits && v8._object == v9._object) {
      break;
    }
    char v11 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if (v11)
    {
      uint64_t result = swift_bridgeObjectRelease();
      goto LABEL_17;
    }
LABEL_6:
    v5 += 16;
    if (!--v4)
    {
      swift_bridgeObjectRelease();
      goto LABEL_15;
    }
  }
  swift_bridgeObjectRelease();
  uint64_t result = swift_bridgeObjectRelease_n();
LABEL_17:
  uint64_t v13 = HIBYTE(a2) & 0xF;
  if ((a2 & 0x2000000000000000) == 0) {
    uint64_t v13 = a1 & 0xFFFFFFFFFFFFLL;
  }
  if (4 * v13 < v7 >> 14)
  {
    __break(1u);
  }
  else
  {
    String.subscript.getter();
    a1 = static String._fromSubstring(_:)();
    swift_bridgeObjectRelease();
    return a1;
  }
  return result;
}

uint64_t sub_100A63064()
{
  return _swift_deallocObject(v0, 32, 7);
}

uint64_t sub_100A63074()
{
  uint64_t v2 = *(void *)(v0 + 16);
  uint64_t v3 = *(void *)(v0 + 24);
  uint64_t v4 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v4;
  *uint64_t v4 = v1;
  v4[1] = sub_10001D2E4;
  unint64_t v7 = (uint64_t (*)(uint64_t, uint64_t))((char *)&dword_101662A20 + dword_101662A20);
  uint64_t v5 = (void *)swift_task_alloc();
  v4[2] = v5;
  *uint64_t v5 = v4;
  v5[1] = sub_100033F68;
  return v7(v2, v3);
}

unsigned char *_s31DisplayIdentifierMembershipTypeOwst(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFE)
  {
    unsigned int v6 = ((a2 - 255) >> 8) + 1;
    *uint64_t result = a2 + 1;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x100A63238);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 1;
        break;
    }
  }
  return result;
}

ValueMetadata *_s31DisplayIdentifierMembershipTypeOMa()
{
  return &_s31DisplayIdentifierMembershipTypeON;
}

unint64_t sub_100A63274()
{
  unint64_t result = qword_101656AC8;
  if (!qword_101656AC8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_101656AC8);
  }
  return result;
}

uint64_t sub_100A632C8(uint64_t a1)
{
  return sub_100A632E8(a1, "Paired %{private,mask.hash}s [%s]", 0);
}

uint64_t sub_100A632D8(uint64_t a1)
{
  return sub_100A632E8(a1, "Unpaired %{private,mask.hash}s [%s]", 1);
}

uint64_t sub_100A632E8(uint64_t a1, const char *a2, int a3)
{
  uint64_t v6 = type metadata accessor for PairingEvent();
  __chkstk_darwin(v6);
  uint64_t v8 = (char *)&v28 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = type metadata accessor for OwnedBeaconRecord();
  uint64_t v10 = __chkstk_darwin(v9);
  int64_t v12 = (char *)&v28 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v10);
  unint64_t v14 = (char *)&v28 - v13;
  if (qword_101636F18 != -1) {
    swift_once();
  }
  uint64_t v15 = type metadata accessor for Logger();
  sub_100010324(v15, (uint64_t)qword_10170E990);
  sub_100A66210(a1, (uint64_t)v14);
  sub_100A66210(a1, (uint64_t)v12);
  unint64_t v16 = Logger.logObject.getter();
  os_log_type_t v17 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v16, v17))
  {
    uint64_t v18 = swift_slowAlloc();
    uint64_t v32 = v6;
    uint64_t v19 = v18;
    uint64_t v20 = swift_slowAlloc();
    uint64_t v31 = v20;
    *(_DWORD *)uint64_t v19 = 141558531;
    uint64_t v35 = 1752392040;
    uint64_t v36 = v20;
    int v34 = a3;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v19 + 12) = 2081;
    uint64_t v33 = a1;
    os_log_t v30 = v16;
    type metadata accessor for UUID();
    sub_10028B80C();
    uint64_t v21 = dispatch thunk of CustomStringConvertible.description.getter();
    uint64_t v35 = sub_1008FA0F0(v21, v22, &v36);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    sub_100A66274((uint64_t)v14, (uint64_t (*)(void))type metadata accessor for OwnedBeaconRecord);
    *(_WORD *)(v19 + 22) = 2080;
    id v23 = sub_100D1C7BC();
    uint64_t v24 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v29 = a2;
    unint64_t v26 = v25;

    uint64_t v35 = sub_1008FA0F0(v24, v26, &v36);
    a1 = v33;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    sub_100A66274((uint64_t)v12, (uint64_t (*)(void))type metadata accessor for OwnedBeaconRecord);
    unint64_t v16 = v30;
    _os_log_impl((void *)&_mh_execute_header, v30, v17, v29, (uint8_t *)v19, 0x20u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    sub_100A66274((uint64_t)v14, (uint64_t (*)(void))type metadata accessor for OwnedBeaconRecord);
    sub_100A66274((uint64_t)v12, (uint64_t (*)(void))type metadata accessor for OwnedBeaconRecord);
  }

  sub_100A66210(a1, (uint64_t)v8);
  swift_storeEnumTagMultiPayload();
  PassthroughSubject.send(_:)();
  return sub_100A66274((uint64_t)v8, (uint64_t (*)(void))type metadata accessor for PairingEvent);
}

uint64_t type metadata accessor for LocalPairingMonitor()
{
  return self;
}

uint64_t *sub_100A636C4(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) == 0)
  {
    int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    uint64_t v7 = *a2;
    unint64_t v8 = a2[1];
    sub_1000361E0(*a2, v8);
    *a1 = v7;
    a1[1] = v8;
    uint64_t v9 = (int *)type metadata accessor for OwnedBeaconRecord();
    uint64_t v10 = v9[5];
    uint64_t v11 = (char *)a1 + v10;
    int64_t v12 = (char *)a2 + v10;
    uint64_t v13 = type metadata accessor for UUID();
    uint64_t v14 = *(void *)(v13 - 8);
    uint64_t v153 = *(void (**)(char *, char *, uint64_t))(v14 + 16);
    v153(v11, v12, v13);
    uint64_t v15 = v9[6];
    unint64_t v16 = (char *)a1 + v15;
    os_log_type_t v17 = (char *)a2 + v15;
    type metadata accessor for StableIdentifier();
    int v18 = swift_getEnumCaseMultiPayload();
    if (EnumCaseMultiPayload == 1)
    {
      switch(v18)
      {
        case 1:
          uint64_t v22 = *((void *)v17 + 1);
          *(void *)unint64_t v16 = *(void *)v17;
          *((void *)v16 + 1) = v22;
          uint64_t v23 = *((void *)v17 + 3);
          *((void *)v16 + 2) = *((void *)v17 + 2);
          *((void *)v16 + 3) = v23;
          uint64_t v24 = *((void *)v17 + 5);
          *((void *)v16 + 4) = *((void *)v17 + 4);
          *((void *)v16 + 5) = v24;
          goto LABEL_11;
        case 2:
          v153(v16, v17, v13);
          unint64_t v25 = (int *)sub_10000588C(&qword_1016555E0);
          uint64_t v26 = v25[12];
          uint64_t v27 = &v16[v26];
          uint64_t v28 = (uint64_t *)&v17[v26];
          uint64_t v30 = *v28;
          uint64_t v29 = v28[1];
          *(void *)uint64_t v27 = v30;
          *((void *)v27 + 1) = v29;
          uint64_t v31 = v25[16];
          uint64_t v32 = &v16[v31];
          uint64_t v33 = &v17[v31];
          uint64_t v149 = *((void *)v33 + 1);
          *(void *)uint64_t v32 = *(void *)v33;
          *((void *)v32 + 1) = v149;
          uint64_t v34 = v25[20];
          uint64_t v35 = &v16[v34];
          uint64_t v36 = &v17[v34];
          uint64_t v147 = *((void *)v36 + 1);
          *(void *)uint64_t v35 = *(void *)v36;
          *((void *)v35 + 1) = v147;
          *(_WORD *)&v16[v25[24]] = *(_WORD *)&v17[v25[24]];
          uint64_t v37 = v25[28];
          id v38 = &v16[v37];
          id v39 = &v17[v37];
          uint64_t v40 = *((void *)v39 + 1);
          *(void *)id v38 = *(void *)v39;
          *((void *)v38 + 1) = v40;
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          goto LABEL_12;
        case 3:
          v153(v16, v17, v13);
          unint64_t v41 = (int *)sub_10000588C((uint64_t *)&unk_1016565E0);
          uint64_t v42 = v41[12];
          uint64_t v43 = &v16[v42];
          unint64_t v44 = (uint64_t *)&v17[v42];
          uint64_t v46 = *v44;
          uint64_t v45 = v44[1];
          *(void *)uint64_t v43 = v46;
          *((void *)v43 + 1) = v45;
          uint64_t v47 = v41[16];
          unint64_t v48 = &v16[v47];
          uint64_t v49 = &v17[v47];
          uint64_t v150 = *((void *)v49 + 1);
          *(void *)unint64_t v48 = *(void *)v49;
          *((void *)v48 + 1) = v150;
          uint64_t v50 = v41[20];
          unint64_t v51 = &v16[v50];
          uint64_t v52 = &v17[v50];
          uint64_t v53 = *((void *)v52 + 1);
          *(void *)unint64_t v51 = *(void *)v52;
          *((void *)v51 + 1) = v53;
          v16[v41[24]] = v17[v41[24]];
LABEL_11:
          swift_bridgeObjectRetain();
LABEL_12:
          swift_bridgeObjectRetain();
          break;
        default:
          uint64_t v19 = *((void *)v17 + 1);
          *(void *)unint64_t v16 = *(void *)v17;
          *((void *)v16 + 1) = v19;
          break;
      }
      swift_bridgeObjectRetain();
      swift_storeEnumTagMultiPayload();
      uint64_t v54 = v9[7];
      uint64_t v55 = (char *)a1 + v54;
      uint64_t v56 = (char *)a2 + v54;
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v14 + 48))((char *)a2 + v54, 1, v13))
      {
        uint64_t v57 = sub_10000588C(&qword_101638CF0);
        memcpy(v55, v56, *(void *)(*(void *)(v57 - 8) + 64));
      }
      else
      {
        v153(v55, v56, v13);
        (*(void (**)(char *, void, uint64_t, uint64_t))(v14 + 56))(v55, 0, 1, v13);
      }
      uint64_t v58 = v9[8];
      uint64_t v59 = (char *)a1 + v58;
      uint64_t v60 = (char *)a2 + v58;
      uint64_t v61 = type metadata accessor for Date();
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v61 - 8) + 16))(v59, v60, v61);
      uint64_t v62 = v9[9];
      uint64_t v63 = (uint64_t *)((char *)a1 + v62);
      uint64_t v64 = (uint64_t *)((char *)a2 + v62);
      uint64_t v65 = *v64;
      unint64_t v66 = v64[1];
      sub_1000361E0(*v64, v66);
      *uint64_t v63 = v65;
      v63[1] = v66;
      uint64_t v67 = v9[10];
      uint64_t v68 = (char *)a1 + v67;
      uint64_t v69 = (char *)a2 + v67;
      unint64_t v70 = *((void *)v69 + 1);
      if (v70 >> 60 == 15)
      {
        *(_OWORD *)uint64_t v68 = *(_OWORD *)v69;
      }
      else
      {
        uint64_t v71 = *(void *)v69;
        sub_1000361E0(*(void *)v69, *((void *)v69 + 1));
        *(void *)uint64_t v68 = v71;
        *((void *)v68 + 1) = v70;
      }
      uint64_t v72 = v9[11];
      uint64_t v73 = (char *)a1 + v72;
      char v74 = (char *)a2 + v72;
      unint64_t v75 = *((void *)v74 + 1);
      if (v75 >> 60 == 15)
      {
        *(_OWORD *)uint64_t v73 = *(_OWORD *)v74;
LABEL_36:
        uint64_t v128 = v9[12];
        uint64_t v129 = (uint64_t *)((char *)a1 + v128);
        Swift::Int v130 = (uint64_t *)((char *)a2 + v128);
        uint64_t v131 = *v130;
        unint64_t v132 = v130[1];
        sub_1000361E0(*v130, v132);
        *uint64_t v129 = v131;
        v129[1] = v132;
        uint64_t v133 = v9[13];
        uint64_t v134 = (uint64_t *)((char *)a1 + v133);
        uint64_t v135 = (uint64_t *)((char *)a2 + v133);
        uint64_t v136 = *v135;
        unint64_t v137 = v135[1];
        sub_1000361E0(*v135, v137);
        uint64_t *v134 = v136;
        v134[1] = v137;
        uint64_t v138 = v9[14];
        Swift::Int v139 = (uint64_t *)((char *)a1 + v138);
        uint64_t v140 = (uint64_t *)((char *)a2 + v138);
        uint64_t v141 = v140[1];
        *Swift::Int v139 = *v140;
        v139[1] = v141;
        uint64_t v142 = v9[15];
        Swift::Int v143 = (uint64_t *)((char *)a1 + v142);
        unint64_t v144 = (uint64_t *)((char *)a2 + v142);
        uint64_t v145 = v144[1];
        *Swift::Int v143 = *v144;
        v143[1] = v145;
        *(uint64_t *)((char *)a1 + v9[16]) = *(uint64_t *)((char *)a2 + v9[16]);
        *(uint64_t *)((char *)a1 + v9[17]) = *(uint64_t *)((char *)a2 + v9[17]);
        *((unsigned char *)a1 + v9[18]) = *((unsigned char *)a2 + v9[18]);
        *((unsigned char *)a1 + v9[19]) = *((unsigned char *)a2 + v9[19]);
        *((unsigned char *)a1 + v9[20]) = *((unsigned char *)a2 + v9[20]);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_storeEnumTagMultiPayload();
        return a1;
      }
    }
    else
    {
      switch(v18)
      {
        case 1:
          uint64_t v76 = *((void *)v17 + 1);
          *(void *)unint64_t v16 = *(void *)v17;
          *((void *)v16 + 1) = v76;
          uint64_t v77 = *((void *)v17 + 3);
          *((void *)v16 + 2) = *((void *)v17 + 2);
          *((void *)v16 + 3) = v77;
          uint64_t v78 = *((void *)v17 + 5);
          *((void *)v16 + 4) = *((void *)v17 + 4);
          *((void *)v16 + 5) = v78;
          goto LABEL_25;
        case 2:
          v153(v16, v17, v13);
          uint64_t v79 = (int *)sub_10000588C(&qword_1016555E0);
          uint64_t v80 = v79[12];
          BOOL v81 = &v16[v80];
          unint64_t v82 = (uint64_t *)&v17[v80];
          uint64_t v84 = *v82;
          uint64_t v83 = v82[1];
          *(void *)BOOL v81 = v84;
          *((void *)v81 + 1) = v83;
          uint64_t v85 = v79[16];
          uint64_t v86 = &v16[v85];
          uint64_t v87 = &v17[v85];
          uint64_t v151 = *((void *)v87 + 1);
          *(void *)uint64_t v86 = *(void *)v87;
          *((void *)v86 + 1) = v151;
          uint64_t v88 = v79[20];
          uint64_t v89 = &v16[v88];
          uint64_t v90 = &v17[v88];
          uint64_t v148 = *((void *)v90 + 1);
          *(void *)uint64_t v89 = *(void *)v90;
          *((void *)v89 + 1) = v148;
          *(_WORD *)&v16[v79[24]] = *(_WORD *)&v17[v79[24]];
          uint64_t v91 = v79[28];
          uint64_t v92 = &v16[v91];
          char v93 = &v17[v91];
          uint64_t v94 = *((void *)v93 + 1);
          *(void *)uint64_t v92 = *(void *)v93;
          *((void *)v92 + 1) = v94;
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          goto LABEL_26;
        case 3:
          v153(v16, v17, v13);
          uint64_t v95 = (int *)sub_10000588C((uint64_t *)&unk_1016565E0);
          uint64_t v96 = v95[12];
          uint64_t v97 = &v16[v96];
          BOOL v98 = (uint64_t *)&v17[v96];
          uint64_t v100 = *v98;
          uint64_t v99 = v98[1];
          *(void *)uint64_t v97 = v100;
          *((void *)v97 + 1) = v99;
          uint64_t v101 = v95[16];
          uint64_t v102 = &v16[v101];
          uint64_t v103 = &v17[v101];
          uint64_t v152 = *((void *)v103 + 1);
          *(void *)uint64_t v102 = *(void *)v103;
          *((void *)v102 + 1) = v152;
          uint64_t v104 = v95[20];
          uint64_t v105 = &v16[v104];
          uint64_t v106 = &v17[v104];
          uint64_t v107 = *((void *)v106 + 1);
          *(void *)uint64_t v105 = *(void *)v106;
          *((void *)v105 + 1) = v107;
          v16[v95[24]] = v17[v95[24]];
LABEL_25:
          swift_bridgeObjectRetain();
LABEL_26:
          swift_bridgeObjectRetain();
          break;
        default:
          uint64_t v21 = *((void *)v17 + 1);
          *(void *)unint64_t v16 = *(void *)v17;
          *((void *)v16 + 1) = v21;
          break;
      }
      swift_bridgeObjectRetain();
      swift_storeEnumTagMultiPayload();
      uint64_t v108 = v9[7];
      unint64_t v109 = (char *)a1 + v108;
      Swift::Int v110 = (char *)a2 + v108;
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v14 + 48))((char *)a2 + v108, 1, v13))
      {
        uint64_t v111 = sub_10000588C(&qword_101638CF0);
        memcpy(v109, v110, *(void *)(*(void *)(v111 - 8) + 64));
      }
      else
      {
        v153(v109, v110, v13);
        (*(void (**)(char *, void, uint64_t, uint64_t))(v14 + 56))(v109, 0, 1, v13);
      }
      uint64_t v112 = v9[8];
      uint64_t v113 = (char *)a1 + v112;
      uint64_t v114 = (char *)a2 + v112;
      uint64_t v115 = type metadata accessor for Date();
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v115 - 8) + 16))(v113, v114, v115);
      uint64_t v116 = v9[9];
      Swift::Int v117 = (uint64_t *)((char *)a1 + v116);
      unint64_t v118 = (uint64_t *)((char *)a2 + v116);
      uint64_t v119 = *v118;
      unint64_t v120 = v118[1];
      sub_1000361E0(*v118, v120);
      uint64_t *v117 = v119;
      v117[1] = v120;
      uint64_t v121 = v9[10];
      uint64_t v122 = (char *)a1 + v121;
      uint64_t v123 = (char *)a2 + v121;
      unint64_t v124 = *((void *)v123 + 1);
      if (v124 >> 60 == 15)
      {
        *(_OWORD *)uint64_t v122 = *(_OWORD *)v123;
      }
      else
      {
        uint64_t v125 = *(void *)v123;
        sub_1000361E0(*(void *)v123, *((void *)v123 + 1));
        *(void *)uint64_t v122 = v125;
        *((void *)v122 + 1) = v124;
      }
      uint64_t v126 = v9[11];
      uint64_t v73 = (char *)a1 + v126;
      char v74 = (char *)a2 + v126;
      unint64_t v75 = *((void *)v74 + 1);
      if (v75 >> 60 == 15)
      {
        *(_OWORD *)uint64_t v73 = *(_OWORD *)v74;
        goto LABEL_36;
      }
    }
    uint64_t v127 = *(void *)v74;
    sub_1000361E0(*(void *)v74, *((void *)v74 + 1));
    *(void *)uint64_t v73 = v127;
    *((void *)v73 + 1) = v75;
    goto LABEL_36;
  }
  uint64_t v20 = *a2;
  *a1 = *a2;
  a1 = (uint64_t *)(v20 + ((v5 + 16) & ~(unint64_t)v5));
  swift_retain();
  return a1;
}

uint64_t sub_100A63FF8(uint64_t a1)
{
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  sub_10001CFB8(*(void *)a1, *(void *)(a1 + 8));
  int v3 = (int *)type metadata accessor for OwnedBeaconRecord();
  uint64_t v4 = a1 + v3[5];
  uint64_t v5 = type metadata accessor for UUID();
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v7 = *(void (**)(uint64_t, uint64_t))(v6 + 8);
  v7(v4, v5);
  uint64_t v8 = a1 + v3[6];
  type metadata accessor for StableIdentifier();
  int v9 = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload == 1)
  {
    switch(v9)
    {
      case 0:
      case 4:
        goto LABEL_7;
      case 1:
        goto LABEL_4;
      case 2:
        goto LABEL_5;
      case 3:
        goto LABEL_6;
      default:
        break;
    }
  }
  else
  {
    switch(v9)
    {
      case 0:
      case 4:
        goto LABEL_7;
      case 1:
LABEL_4:
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        goto LABEL_7;
      case 2:
LABEL_5:
        v7(v8, v5);
        sub_10000588C(&qword_1016555E0);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        goto LABEL_7;
      case 3:
LABEL_6:
        v7(v8, v5);
        sub_10000588C((uint64_t *)&unk_1016565E0);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
LABEL_7:
        swift_bridgeObjectRelease();
        break;
      default:
        break;
    }
  }
  uint64_t v10 = a1 + v3[7];
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v6 + 48))(v10, 1, v5)) {
    v7(v10, v5);
  }
  uint64_t v11 = a1 + v3[8];
  uint64_t v12 = type metadata accessor for Date();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v12 - 8) + 8))(v11, v12);
  sub_10001CFB8(*(void *)(a1 + v3[9]), *(void *)(a1 + v3[9] + 8));
  uint64_t v13 = (uint64_t *)(a1 + v3[10]);
  unint64_t v14 = v13[1];
  if (v14 >> 60 != 15) {
    sub_10001CFB8(*v13, v14);
  }
  uint64_t v15 = (uint64_t *)(a1 + v3[11]);
  unint64_t v16 = v15[1];
  if (v16 >> 60 != 15) {
    sub_10001CFB8(*v15, v16);
  }
  sub_10001CFB8(*(void *)(a1 + v3[12]), *(void *)(a1 + v3[12] + 8));
  sub_10001CFB8(*(void *)(a1 + v3[13]), *(void *)(a1 + v3[13] + 8));
  swift_bridgeObjectRelease();

  return swift_bridgeObjectRelease();
}

uint64_t *sub_100A64338(uint64_t *a1, uint64_t *a2)
{
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  uint64_t v5 = *a2;
  unint64_t v6 = a2[1];
  sub_1000361E0(*a2, v6);
  *a1 = v5;
  a1[1] = v6;
  uint64_t v7 = (int *)type metadata accessor for OwnedBeaconRecord();
  uint64_t v8 = v7[5];
  int v9 = (char *)a1 + v8;
  uint64_t v10 = (char *)a2 + v8;
  uint64_t v11 = type metadata accessor for UUID();
  uint64_t v12 = *(void *)(v11 - 8);
  unint64_t v172 = *(void (**)(char *, char *, uint64_t))(v12 + 16);
  v172(v9, v10, v11);
  uint64_t v13 = v7[6];
  unint64_t v14 = (char *)a1 + v13;
  uint64_t v15 = (char *)a2 + v13;
  type metadata accessor for StableIdentifier();
  int v16 = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload == 1)
  {
    switch(v16)
    {
      case 1:
        uint64_t v19 = *((void *)v15 + 1);
        *(void *)unint64_t v14 = *(void *)v15;
        *((void *)v14 + 1) = v19;
        uint64_t v20 = *((void *)v15 + 3);
        *((void *)v14 + 2) = *((void *)v15 + 2);
        *((void *)v14 + 3) = v20;
        uint64_t v21 = *((void *)v15 + 5);
        *((void *)v14 + 4) = *((void *)v15 + 4);
        *((void *)v14 + 5) = v21;
        goto LABEL_9;
      case 2:
        v172(v14, v15, v11);
        uint64_t v22 = (int *)sub_10000588C(&qword_1016555E0);
        uint64_t v23 = v22[12];
        uint64_t v24 = &v14[v23];
        unint64_t v25 = (uint64_t *)&v15[v23];
        uint64_t v27 = *v25;
        uint64_t v26 = v25[1];
        *(void *)uint64_t v24 = v27;
        *((void *)v24 + 1) = v26;
        uint64_t v28 = v22[16];
        uint64_t v29 = &v14[v28];
        uint64_t v30 = &v15[v28];
        uint64_t v168 = *((void *)v30 + 1);
        *(void *)uint64_t v29 = *(void *)v30;
        *((void *)v29 + 1) = v168;
        uint64_t v31 = v22[20];
        uint64_t v32 = &v14[v31];
        uint64_t v33 = &v15[v31];
        uint64_t v166 = *((void *)v33 + 1);
        *(void *)uint64_t v32 = *(void *)v33;
        *((void *)v32 + 1) = v166;
        *(_WORD *)&v14[v22[24]] = *(_WORD *)&v15[v22[24]];
        uint64_t v34 = v22[28];
        uint64_t v35 = &v14[v34];
        uint64_t v36 = &v15[v34];
        uint64_t v37 = *((void *)v36 + 1);
        *(void *)uint64_t v35 = *(void *)v36;
        *((void *)v35 + 1) = v37;
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        goto LABEL_10;
      case 3:
        v172(v14, v15, v11);
        id v38 = (int *)sub_10000588C((uint64_t *)&unk_1016565E0);
        uint64_t v39 = v38[12];
        uint64_t v40 = &v14[v39];
        unint64_t v41 = (uint64_t *)&v15[v39];
        uint64_t v43 = *v41;
        uint64_t v42 = v41[1];
        *(void *)uint64_t v40 = v43;
        *((void *)v40 + 1) = v42;
        uint64_t v44 = v38[16];
        uint64_t v45 = &v14[v44];
        uint64_t v46 = &v15[v44];
        uint64_t v169 = *((void *)v46 + 1);
        *(void *)uint64_t v45 = *(void *)v46;
        *((void *)v45 + 1) = v169;
        uint64_t v47 = v38[20];
        unint64_t v48 = &v14[v47];
        uint64_t v49 = &v15[v47];
        uint64_t v50 = *((void *)v49 + 1);
        *(void *)unint64_t v48 = *(void *)v49;
        *((void *)v48 + 1) = v50;
        v14[v38[24]] = v15[v38[24]];
LABEL_9:
        swift_bridgeObjectRetain();
LABEL_10:
        swift_bridgeObjectRetain();
        break;
      default:
        uint64_t v17 = *((void *)v15 + 1);
        *(void *)unint64_t v14 = *(void *)v15;
        *((void *)v14 + 1) = v17;
        break;
    }
    swift_bridgeObjectRetain();
    swift_storeEnumTagMultiPayload();
    uint64_t v51 = v7[7];
    uint64_t v52 = (char *)a1 + v51;
    uint64_t v53 = (char *)a2 + v51;
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v12 + 48))((char *)a2 + v51, 1, v11))
    {
      uint64_t v54 = sub_10000588C(&qword_101638CF0);
      memcpy(v52, v53, *(void *)(*(void *)(v54 - 8) + 64));
    }
    else
    {
      v172(v52, v53, v11);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v12 + 56))(v52, 0, 1, v11);
    }
    uint64_t v55 = v7[8];
    uint64_t v56 = (char *)a1 + v55;
    uint64_t v57 = (char *)a2 + v55;
    uint64_t v58 = type metadata accessor for Date();
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v58 - 8) + 16))(v56, v57, v58);
    uint64_t v59 = v7[9];
    uint64_t v60 = (uint64_t *)((char *)a1 + v59);
    uint64_t v61 = (uint64_t *)((char *)a2 + v59);
    uint64_t v62 = *v61;
    unint64_t v63 = v61[1];
    sub_1000361E0(*v61, v63);
    uint64_t *v60 = v62;
    v60[1] = v63;
    uint64_t v64 = v7[10];
    uint64_t v65 = (char *)a1 + v64;
    unint64_t v66 = (char *)a2 + v64;
    unint64_t v67 = *((void *)v66 + 1);
    if (v67 >> 60 == 15)
    {
      *(_OWORD *)uint64_t v65 = *(_OWORD *)v66;
    }
    else
    {
      uint64_t v68 = *(void *)v66;
      sub_1000361E0(*(void *)v66, *((void *)v66 + 1));
      *(void *)uint64_t v65 = v68;
      *((void *)v65 + 1) = v67;
    }
    uint64_t v69 = v7[11];
    unint64_t v70 = (char *)a1 + v69;
    uint64_t v71 = (char *)a2 + v69;
    unint64_t v72 = *((void *)v71 + 1);
    if (v72 >> 60 == 15)
    {
      *(_OWORD *)unint64_t v70 = *(_OWORD *)v71;
    }
    else
    {
      uint64_t v73 = *(void *)v71;
      sub_1000361E0(*(void *)v71, *((void *)v71 + 1));
      *(void *)unint64_t v70 = v73;
      *((void *)v70 + 1) = v72;
    }
    uint64_t v74 = v7[12];
    unint64_t v75 = (uint64_t *)((char *)a1 + v74);
    uint64_t v76 = (uint64_t *)((char *)a2 + v74);
    uint64_t v77 = *v76;
    unint64_t v78 = v76[1];
    sub_1000361E0(*v76, v78);
    *unint64_t v75 = v77;
    v75[1] = v78;
    uint64_t v79 = v7[13];
    uint64_t v80 = (uint64_t *)((char *)a1 + v79);
    BOOL v81 = (uint64_t *)((char *)a2 + v79);
    uint64_t v82 = *v81;
    unint64_t v83 = v81[1];
    sub_1000361E0(*v81, v83);
    *uint64_t v80 = v82;
    v80[1] = v83;
    uint64_t v84 = v7[14];
    uint64_t v85 = (uint64_t *)((char *)a1 + v84);
    uint64_t v86 = (uint64_t *)((char *)a2 + v84);
    uint64_t v87 = v86[1];
    *uint64_t v85 = *v86;
    v85[1] = v87;
    uint64_t v88 = v7[15];
    uint64_t v89 = (uint64_t *)((char *)a1 + v88);
    uint64_t v90 = (uint64_t *)((char *)a2 + v88);
    uint64_t v91 = v90[1];
    *uint64_t v89 = *v90;
    v89[1] = v91;
  }
  else
  {
    switch(v16)
    {
      case 1:
        uint64_t v92 = *((void *)v15 + 1);
        *(void *)unint64_t v14 = *(void *)v15;
        *((void *)v14 + 1) = v92;
        uint64_t v93 = *((void *)v15 + 3);
        *((void *)v14 + 2) = *((void *)v15 + 2);
        *((void *)v14 + 3) = v93;
        uint64_t v94 = *((void *)v15 + 5);
        *((void *)v14 + 4) = *((void *)v15 + 4);
        *((void *)v14 + 5) = v94;
        goto LABEL_24;
      case 2:
        v172(v14, v15, v11);
        uint64_t v95 = (int *)sub_10000588C(&qword_1016555E0);
        uint64_t v96 = v95[12];
        uint64_t v97 = &v14[v96];
        BOOL v98 = (uint64_t *)&v15[v96];
        uint64_t v100 = *v98;
        uint64_t v99 = v98[1];
        *(void *)uint64_t v97 = v100;
        *((void *)v97 + 1) = v99;
        uint64_t v101 = v95[16];
        uint64_t v102 = &v14[v101];
        uint64_t v103 = &v15[v101];
        uint64_t v170 = *((void *)v103 + 1);
        *(void *)uint64_t v102 = *(void *)v103;
        *((void *)v102 + 1) = v170;
        uint64_t v104 = v95[20];
        uint64_t v105 = &v14[v104];
        uint64_t v106 = &v15[v104];
        uint64_t v167 = *((void *)v106 + 1);
        *(void *)uint64_t v105 = *(void *)v106;
        *((void *)v105 + 1) = v167;
        *(_WORD *)&v14[v95[24]] = *(_WORD *)&v15[v95[24]];
        uint64_t v107 = v95[28];
        uint64_t v108 = &v14[v107];
        unint64_t v109 = &v15[v107];
        uint64_t v110 = *((void *)v109 + 1);
        *(void *)uint64_t v108 = *(void *)v109;
        *((void *)v108 + 1) = v110;
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        goto LABEL_25;
      case 3:
        v172(v14, v15, v11);
        uint64_t v111 = (int *)sub_10000588C((uint64_t *)&unk_1016565E0);
        uint64_t v112 = v111[12];
        uint64_t v113 = &v14[v112];
        uint64_t v114 = (uint64_t *)&v15[v112];
        uint64_t v116 = *v114;
        uint64_t v115 = v114[1];
        *(void *)uint64_t v113 = v116;
        *((void *)v113 + 1) = v115;
        uint64_t v117 = v111[16];
        unint64_t v118 = &v14[v117];
        uint64_t v119 = &v15[v117];
        uint64_t v171 = *((void *)v119 + 1);
        *(void *)unint64_t v118 = *(void *)v119;
        *((void *)v118 + 1) = v171;
        uint64_t v120 = v111[20];
        uint64_t v121 = &v14[v120];
        uint64_t v122 = &v15[v120];
        uint64_t v123 = *((void *)v122 + 1);
        *(void *)uint64_t v121 = *(void *)v122;
        *((void *)v121 + 1) = v123;
        v14[v111[24]] = v15[v111[24]];
LABEL_24:
        swift_bridgeObjectRetain();
LABEL_25:
        swift_bridgeObjectRetain();
        break;
      default:
        uint64_t v18 = *((void *)v15 + 1);
        *(void *)unint64_t v14 = *(void *)v15;
        *((void *)v14 + 1) = v18;
        break;
    }
    swift_bridgeObjectRetain();
    swift_storeEnumTagMultiPayload();
    uint64_t v124 = v7[7];
    uint64_t v125 = (char *)a1 + v124;
    uint64_t v126 = (char *)a2 + v124;
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v12 + 48))((char *)a2 + v124, 1, v11))
    {
      uint64_t v127 = sub_10000588C(&qword_101638CF0);
      memcpy(v125, v126, *(void *)(*(void *)(v127 - 8) + 64));
    }
    else
    {
      v172(v125, v126, v11);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v12 + 56))(v125, 0, 1, v11);
    }
    uint64_t v128 = v7[8];
    uint64_t v129 = (char *)a1 + v128;
    Swift::Int v130 = (char *)a2 + v128;
    uint64_t v131 = type metadata accessor for Date();
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v131 - 8) + 16))(v129, v130, v131);
    uint64_t v132 = v7[9];
    uint64_t v133 = (uint64_t *)((char *)a1 + v132);
    uint64_t v134 = (uint64_t *)((char *)a2 + v132);
    uint64_t v135 = *v134;
    unint64_t v136 = v134[1];
    sub_1000361E0(*v134, v136);
    *uint64_t v133 = v135;
    v133[1] = v136;
    uint64_t v137 = v7[10];
    uint64_t v138 = (char *)a1 + v137;
    Swift::Int v139 = (char *)a2 + v137;
    unint64_t v140 = *((void *)v139 + 1);
    if (v140 >> 60 == 15)
    {
      *(_OWORD *)uint64_t v138 = *(_OWORD *)v139;
    }
    else
    {
      uint64_t v141 = *(void *)v139;
      sub_1000361E0(*(void *)v139, *((void *)v139 + 1));
      *(void *)uint64_t v138 = v141;
      *((void *)v138 + 1) = v140;
    }
    uint64_t v142 = v7[11];
    Swift::Int v143 = (char *)a1 + v142;
    unint64_t v144 = (char *)a2 + v142;
    unint64_t v145 = *((void *)v144 + 1);
    if (v145 >> 60 == 15)
    {
      *(_OWORD *)Swift::Int v143 = *(_OWORD *)v144;
    }
    else
    {
      uint64_t v146 = *(void *)v144;
      sub_1000361E0(*(void *)v144, *((void *)v144 + 1));
      *(void *)Swift::Int v143 = v146;
      *((void *)v143 + 1) = v145;
    }
    uint64_t v147 = v7[12];
    uint64_t v148 = (uint64_t *)((char *)a1 + v147);
    uint64_t v149 = (uint64_t *)((char *)a2 + v147);
    uint64_t v150 = *v149;
    unint64_t v151 = v149[1];
    sub_1000361E0(*v149, v151);
    *uint64_t v148 = v150;
    v148[1] = v151;
    uint64_t v152 = v7[13];
    uint64_t v153 = (uint64_t *)((char *)a1 + v152);
    uint64_t v154 = (uint64_t *)((char *)a2 + v152);
    uint64_t v155 = *v154;
    unint64_t v156 = v154[1];
    sub_1000361E0(*v154, v156);
    uint64_t *v153 = v155;
    v153[1] = v156;
    uint64_t v157 = v7[14];
    uint64_t v158 = (uint64_t *)((char *)a1 + v157);
    os_log_type_t v159 = (uint64_t *)((char *)a2 + v157);
    uint64_t v160 = v159[1];
    *uint64_t v158 = *v159;
    v158[1] = v160;
    uint64_t v161 = v7[15];
    unint64_t v162 = (uint64_t *)((char *)a1 + v161);
    unint64_t v163 = (uint64_t *)((char *)a2 + v161);
    uint64_t v164 = v163[1];
    void *v162 = *v163;
    v162[1] = v164;
  }
  *(uint64_t *)((char *)a1 + v7[16]) = *(uint64_t *)((char *)a2 + v7[16]);
  *(uint64_t *)((char *)a1 + v7[17]) = *(uint64_t *)((char *)a2 + v7[17]);
  *((unsigned char *)a1 + v7[18]) = *((unsigned char *)a2 + v7[18]);
  *((unsigned char *)a1 + v7[19]) = *((unsigned char *)a2 + v7[19]);
  *((unsigned char *)a1 + v7[20]) = *((unsigned char *)a2 + v7[20]);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_storeEnumTagMultiPayload();
  return a1;
}

uint64_t *sub_100A64BC8(uint64_t *a1, uint64_t *a2)
{
  if (a1 != a2)
  {
    sub_100A66274((uint64_t)a1, (uint64_t (*)(void))type metadata accessor for PairingEvent);
    int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    uint64_t v5 = *a2;
    unint64_t v6 = a2[1];
    sub_1000361E0(*a2, v6);
    *a1 = v5;
    a1[1] = v6;
    uint64_t v7 = (int *)type metadata accessor for OwnedBeaconRecord();
    uint64_t v8 = v7[5];
    int v9 = (char *)a1 + v8;
    uint64_t v10 = (char *)a2 + v8;
    uint64_t v11 = type metadata accessor for UUID();
    uint64_t v12 = *(void *)(v11 - 8);
    uint64_t v142 = *(void (**)(char *, char *, uint64_t))(v12 + 16);
    v142(v9, v10, v11);
    uint64_t v13 = v7[6];
    unint64_t v14 = (char *)a1 + v13;
    uint64_t v15 = (char *)a2 + v13;
    type metadata accessor for StableIdentifier();
    int v16 = swift_getEnumCaseMultiPayload();
    if (EnumCaseMultiPayload == 1)
    {
      switch(v16)
      {
        case 1:
          *(void *)unint64_t v14 = *(void *)v15;
          *((void *)v14 + 1) = *((void *)v15 + 1);
          *((void *)v14 + 2) = *((void *)v15 + 2);
          *((void *)v14 + 3) = *((void *)v15 + 3);
          *((void *)v14 + 4) = *((void *)v15 + 4);
          *((void *)v14 + 5) = *((void *)v15 + 5);
          goto LABEL_10;
        case 2:
          v142(v14, v15, v11);
          uint64_t v17 = (int *)sub_10000588C(&qword_1016555E0);
          uint64_t v18 = v17[12];
          uint64_t v19 = &v14[v18];
          uint64_t v20 = &v15[v18];
          *(void *)uint64_t v19 = *(void *)v20;
          *((void *)v19 + 1) = *((void *)v20 + 1);
          uint64_t v21 = v17[16];
          uint64_t v22 = &v14[v21];
          uint64_t v23 = &v15[v21];
          *(void *)uint64_t v22 = *(void *)v23;
          *((void *)v22 + 1) = *((void *)v23 + 1);
          uint64_t v24 = v17[20];
          unint64_t v25 = &v14[v24];
          uint64_t v26 = &v15[v24];
          *(void *)unint64_t v25 = *(void *)v26;
          *((void *)v25 + 1) = *((void *)v26 + 1);
          *(_WORD *)&v14[v17[24]] = *(_WORD *)&v15[v17[24]];
          uint64_t v27 = v17[28];
          uint64_t v28 = &v14[v27];
          uint64_t v29 = &v15[v27];
          *(void *)uint64_t v28 = *(void *)v29;
          *((void *)v28 + 1) = *((void *)v29 + 1);
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          goto LABEL_11;
        case 3:
          v142(v14, v15, v11);
          uint64_t v30 = (int *)sub_10000588C((uint64_t *)&unk_1016565E0);
          uint64_t v31 = v30[12];
          uint64_t v32 = &v14[v31];
          uint64_t v33 = &v15[v31];
          *(void *)uint64_t v32 = *(void *)v33;
          *((void *)v32 + 1) = *((void *)v33 + 1);
          uint64_t v34 = v30[16];
          uint64_t v35 = &v14[v34];
          uint64_t v36 = &v15[v34];
          *(void *)uint64_t v35 = *(void *)v36;
          *((void *)v35 + 1) = *((void *)v36 + 1);
          uint64_t v37 = v30[20];
          id v38 = &v14[v37];
          uint64_t v39 = &v15[v37];
          *(void *)id v38 = *(void *)v39;
          *((void *)v38 + 1) = *((void *)v39 + 1);
          v14[v30[24]] = v15[v30[24]];
LABEL_10:
          swift_bridgeObjectRetain();
LABEL_11:
          swift_bridgeObjectRetain();
          break;
        default:
          *(void *)unint64_t v14 = *(void *)v15;
          *((void *)v14 + 1) = *((void *)v15 + 1);
          break;
      }
      swift_bridgeObjectRetain();
      swift_storeEnumTagMultiPayload();
      uint64_t v40 = v7[7];
      unint64_t v41 = (char *)a1 + v40;
      uint64_t v42 = (char *)a2 + v40;
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v12 + 48))((char *)a2 + v40, 1, v11))
      {
        uint64_t v43 = sub_10000588C(&qword_101638CF0);
        memcpy(v41, v42, *(void *)(*(void *)(v43 - 8) + 64));
      }
      else
      {
        v142(v41, v42, v11);
        (*(void (**)(char *, void, uint64_t, uint64_t))(v12 + 56))(v41, 0, 1, v11);
      }
      uint64_t v44 = v7[8];
      uint64_t v45 = (char *)a1 + v44;
      uint64_t v46 = (char *)a2 + v44;
      uint64_t v47 = type metadata accessor for Date();
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v47 - 8) + 16))(v45, v46, v47);
      uint64_t v48 = v7[9];
      uint64_t v49 = (uint64_t *)((char *)a1 + v48);
      uint64_t v50 = (uint64_t *)((char *)a2 + v48);
      uint64_t v51 = *v50;
      unint64_t v52 = v50[1];
      sub_1000361E0(*v50, v52);
      *uint64_t v49 = v51;
      v49[1] = v52;
      uint64_t v53 = v7[10];
      uint64_t v54 = (char *)a1 + v53;
      uint64_t v55 = (char *)a2 + v53;
      unint64_t v56 = *((void *)v55 + 1);
      if (v56 >> 60 == 15)
      {
        *(_OWORD *)uint64_t v54 = *(_OWORD *)v55;
      }
      else
      {
        uint64_t v57 = *(void *)v55;
        sub_1000361E0(*(void *)v55, *((void *)v55 + 1));
        *(void *)uint64_t v54 = v57;
        *((void *)v54 + 1) = v56;
      }
      uint64_t v58 = v7[11];
      uint64_t v59 = (char *)a1 + v58;
      uint64_t v60 = (char *)a2 + v58;
      unint64_t v61 = *((void *)v60 + 1);
      if (v61 >> 60 == 15)
      {
        *(_OWORD *)uint64_t v59 = *(_OWORD *)v60;
      }
      else
      {
        uint64_t v62 = *(void *)v60;
        sub_1000361E0(*(void *)v60, *((void *)v60 + 1));
        *(void *)uint64_t v59 = v62;
        *((void *)v59 + 1) = v61;
      }
      uint64_t v63 = v7[12];
      uint64_t v64 = (uint64_t *)((char *)a1 + v63);
      uint64_t v65 = (uint64_t *)((char *)a2 + v63);
      uint64_t v66 = *v65;
      unint64_t v67 = v65[1];
      sub_1000361E0(*v65, v67);
      *uint64_t v64 = v66;
      v64[1] = v67;
      uint64_t v68 = v7[13];
      uint64_t v69 = (uint64_t *)((char *)a1 + v68);
      unint64_t v70 = (uint64_t *)((char *)a2 + v68);
      uint64_t v71 = *v70;
      unint64_t v72 = v70[1];
      sub_1000361E0(*v70, v72);
      *uint64_t v69 = v71;
      v69[1] = v72;
      uint64_t v73 = v7[14];
      uint64_t v74 = (uint64_t *)((char *)a1 + v73);
      unint64_t v75 = (uint64_t *)((char *)a2 + v73);
      *uint64_t v74 = *v75;
      v74[1] = v75[1];
      uint64_t v76 = v7[15];
      uint64_t v77 = (uint64_t *)((char *)a1 + v76);
      unint64_t v78 = (uint64_t *)((char *)a2 + v76);
      *uint64_t v77 = *v78;
      v77[1] = v78[1];
    }
    else
    {
      switch(v16)
      {
        case 1:
          *(void *)unint64_t v14 = *(void *)v15;
          *((void *)v14 + 1) = *((void *)v15 + 1);
          *((void *)v14 + 2) = *((void *)v15 + 2);
          *((void *)v14 + 3) = *((void *)v15 + 3);
          *((void *)v14 + 4) = *((void *)v15 + 4);
          *((void *)v14 + 5) = *((void *)v15 + 5);
          goto LABEL_25;
        case 2:
          v142(v14, v15, v11);
          uint64_t v79 = (int *)sub_10000588C(&qword_1016555E0);
          uint64_t v80 = v79[12];
          BOOL v81 = &v14[v80];
          uint64_t v82 = &v15[v80];
          *(void *)BOOL v81 = *(void *)v82;
          *((void *)v81 + 1) = *((void *)v82 + 1);
          uint64_t v83 = v79[16];
          uint64_t v84 = &v14[v83];
          uint64_t v85 = &v15[v83];
          *(void *)uint64_t v84 = *(void *)v85;
          *((void *)v84 + 1) = *((void *)v85 + 1);
          uint64_t v86 = v79[20];
          uint64_t v87 = &v14[v86];
          uint64_t v88 = &v15[v86];
          *(void *)uint64_t v87 = *(void *)v88;
          *((void *)v87 + 1) = *((void *)v88 + 1);
          *(_WORD *)&v14[v79[24]] = *(_WORD *)&v15[v79[24]];
          uint64_t v89 = v79[28];
          uint64_t v90 = &v14[v89];
          uint64_t v91 = &v15[v89];
          *(void *)uint64_t v90 = *(void *)v91;
          *((void *)v90 + 1) = *((void *)v91 + 1);
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          goto LABEL_26;
        case 3:
          v142(v14, v15, v11);
          uint64_t v92 = (int *)sub_10000588C((uint64_t *)&unk_1016565E0);
          uint64_t v93 = v92[12];
          uint64_t v94 = &v14[v93];
          uint64_t v95 = &v15[v93];
          *(void *)uint64_t v94 = *(void *)v95;
          *((void *)v94 + 1) = *((void *)v95 + 1);
          uint64_t v96 = v92[16];
          uint64_t v97 = &v14[v96];
          BOOL v98 = &v15[v96];
          *(void *)uint64_t v97 = *(void *)v98;
          *((void *)v97 + 1) = *((void *)v98 + 1);
          uint64_t v99 = v92[20];
          uint64_t v100 = &v14[v99];
          uint64_t v101 = &v15[v99];
          *(void *)uint64_t v100 = *(void *)v101;
          *((void *)v100 + 1) = *((void *)v101 + 1);
          v14[v92[24]] = v15[v92[24]];
LABEL_25:
          swift_bridgeObjectRetain();
LABEL_26:
          swift_bridgeObjectRetain();
          break;
        default:
          *(void *)unint64_t v14 = *(void *)v15;
          *((void *)v14 + 1) = *((void *)v15 + 1);
          break;
      }
      swift_bridgeObjectRetain();
      swift_storeEnumTagMultiPayload();
      uint64_t v102 = v7[7];
      uint64_t v103 = (char *)a1 + v102;
      uint64_t v104 = (char *)a2 + v102;
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v12 + 48))((char *)a2 + v102, 1, v11))
      {
        uint64_t v105 = sub_10000588C(&qword_101638CF0);
        memcpy(v103, v104, *(void *)(*(void *)(v105 - 8) + 64));
      }
      else
      {
        v142(v103, v104, v11);
        (*(void (**)(char *, void, uint64_t, uint64_t))(v12 + 56))(v103, 0, 1, v11);
      }
      uint64_t v106 = v7[8];
      uint64_t v107 = (char *)a1 + v106;
      uint64_t v108 = (char *)a2 + v106;
      uint64_t v109 = type metadata accessor for Date();
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v109 - 8) + 16))(v107, v108, v109);
      uint64_t v110 = v7[9];
      uint64_t v111 = (uint64_t *)((char *)a1 + v110);
      uint64_t v112 = (uint64_t *)((char *)a2 + v110);
      uint64_t v113 = *v112;
      unint64_t v114 = v112[1];
      sub_1000361E0(*v112, v114);
      *uint64_t v111 = v113;
      v111[1] = v114;
      uint64_t v115 = v7[10];
      uint64_t v116 = (char *)a1 + v115;
      uint64_t v117 = (char *)a2 + v115;
      unint64_t v118 = *((void *)v117 + 1);
      if (v118 >> 60 == 15)
      {
        *(_OWORD *)uint64_t v116 = *(_OWORD *)v117;
      }
      else
      {
        uint64_t v119 = *(void *)v117;
        sub_1000361E0(*(void *)v117, *((void *)v117 + 1));
        *(void *)uint64_t v116 = v119;
        *((void *)v116 + 1) = v118;
      }
      uint64_t v120 = v7[11];
      uint64_t v121 = (char *)a1 + v120;
      uint64_t v122 = (char *)a2 + v120;
      unint64_t v123 = *((void *)v122 + 1);
      if (v123 >> 60 == 15)
      {
        *(_OWORD *)uint64_t v121 = *(_OWORD *)v122;
      }
      else
      {
        uint64_t v124 = *(void *)v122;
        sub_1000361E0(*(void *)v122, *((void *)v122 + 1));
        *(void *)uint64_t v121 = v124;
        *((void *)v121 + 1) = v123;
      }
      uint64_t v125 = v7[12];
      uint64_t v126 = (uint64_t *)((char *)a1 + v125);
      uint64_t v127 = (uint64_t *)((char *)a2 + v125);
      uint64_t v128 = *v127;
      unint64_t v129 = v127[1];
      sub_1000361E0(*v127, v129);
      *uint64_t v126 = v128;
      v126[1] = v129;
      uint64_t v130 = v7[13];
      uint64_t v131 = (uint64_t *)((char *)a1 + v130);
      uint64_t v132 = (uint64_t *)((char *)a2 + v130);
      uint64_t v133 = *v132;
      unint64_t v134 = v132[1];
      sub_1000361E0(*v132, v134);
      *uint64_t v131 = v133;
      v131[1] = v134;
      uint64_t v135 = v7[14];
      unint64_t v136 = (uint64_t *)((char *)a1 + v135);
      uint64_t v137 = (uint64_t *)((char *)a2 + v135);
      void *v136 = *v137;
      v136[1] = v137[1];
      uint64_t v138 = v7[15];
      Swift::Int v139 = (uint64_t *)((char *)a1 + v138);
      unint64_t v140 = (uint64_t *)((char *)a2 + v138);
      *Swift::Int v139 = *v140;
      v139[1] = v140[1];
    }
    *(uint64_t *)((char *)a1 + v7[16]) = *(uint64_t *)((char *)a2 + v7[16]);
    *(uint64_t *)((char *)a1 + v7[17]) = *(uint64_t *)((char *)a2 + v7[17]);
    *((unsigned char *)a1 + v7[18]) = *((unsigned char *)a2 + v7[18]);
    *((unsigned char *)a1 + v7[19]) = *((unsigned char *)a2 + v7[19]);
    *((unsigned char *)a1 + v7[20]) = *((unsigned char *)a2 + v7[20]);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

uint64_t type metadata accessor for PairingEvent()
{
  uint64_t result = qword_101656BF8;
  if (!qword_101656BF8) {
    return swift_getSingletonMetadata();
  }
  return result;
}

_OWORD *sub_100A6559C(_OWORD *a1, char *a2)
{
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  *a1 = *(_OWORD *)a2;
  uint64_t v5 = (int *)type metadata accessor for OwnedBeaconRecord();
  uint64_t v6 = v5[5];
  uint64_t v7 = (char *)a1 + v6;
  uint64_t v8 = &a2[v6];
  uint64_t v9 = type metadata accessor for UUID();
  uint64_t v31 = *(void *)(v9 - 8);
  uint64_t v10 = *(void (**)(char *, char *, uint64_t))(v31 + 32);
  v10(v7, v8, v9);
  uint64_t v11 = v5[6];
  uint64_t v12 = (char *)a1 + v11;
  uint64_t v13 = &a2[v11];
  uint64_t v14 = type metadata accessor for StableIdentifier();
  int v15 = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload == 1)
  {
    if (v15 == 3)
    {
      v10(v12, v13, v9);
      uint64_t v19 = (int *)sub_10000588C((uint64_t *)&unk_1016565E0);
      *(_OWORD *)&v12[v19[12]] = *(_OWORD *)&v13[v19[12]];
      *(_OWORD *)&v12[v19[16]] = *(_OWORD *)&v13[v19[16]];
      *(_OWORD *)&v12[v19[20]] = *(_OWORD *)&v13[v19[20]];
      v12[v19[24]] = v13[v19[24]];
      swift_storeEnumTagMultiPayload();
      uint64_t v16 = v31;
    }
    else
    {
      uint64_t v16 = v31;
      if (v15 == 2)
      {
        v10(v12, v13, v9);
        uint64_t v17 = (int *)sub_10000588C(&qword_1016555E0);
        *(_OWORD *)&v12[v17[12]] = *(_OWORD *)&v13[v17[12]];
        *(_OWORD *)&v12[v17[16]] = *(_OWORD *)&v13[v17[16]];
        *(_OWORD *)&v12[v17[20]] = *(_OWORD *)&v13[v17[20]];
        *(_WORD *)&v12[v17[24]] = *(_WORD *)&v13[v17[24]];
        *(_OWORD *)&v12[v17[28]] = *(_OWORD *)&v13[v17[28]];
        swift_storeEnumTagMultiPayload();
      }
      else
      {
        memcpy(v12, v13, *(void *)(*(void *)(v14 - 8) + 64));
      }
    }
    uint64_t v20 = v5[7];
    uint64_t v21 = (char *)a1 + v20;
    uint64_t v22 = &a2[v20];
    if (!(*(unsigned int (**)(char *, uint64_t, uint64_t))(v16 + 48))(&a2[v20], 1, v9))
    {
LABEL_16:
      v10(v21, v22, v9);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v16 + 56))(v21, 0, 1, v9);
      goto LABEL_17;
    }
  }
  else
  {
    if (v15 == 3)
    {
      v10(v12, v13, v9);
      uint64_t v23 = (int *)sub_10000588C((uint64_t *)&unk_1016565E0);
      *(_OWORD *)&v12[v23[12]] = *(_OWORD *)&v13[v23[12]];
      *(_OWORD *)&v12[v23[16]] = *(_OWORD *)&v13[v23[16]];
      *(_OWORD *)&v12[v23[20]] = *(_OWORD *)&v13[v23[20]];
      v12[v23[24]] = v13[v23[24]];
      swift_storeEnumTagMultiPayload();
      uint64_t v16 = v31;
    }
    else
    {
      uint64_t v16 = v31;
      if (v15 == 2)
      {
        v10(v12, v13, v9);
        uint64_t v18 = (int *)sub_10000588C(&qword_1016555E0);
        *(_OWORD *)&v12[v18[12]] = *(_OWORD *)&v13[v18[12]];
        *(_OWORD *)&v12[v18[16]] = *(_OWORD *)&v13[v18[16]];
        *(_OWORD *)&v12[v18[20]] = *(_OWORD *)&v13[v18[20]];
        *(_WORD *)&v12[v18[24]] = *(_WORD *)&v13[v18[24]];
        *(_OWORD *)&v12[v18[28]] = *(_OWORD *)&v13[v18[28]];
        swift_storeEnumTagMultiPayload();
      }
      else
      {
        memcpy(v12, v13, *(void *)(*(void *)(v14 - 8) + 64));
      }
    }
    uint64_t v24 = v5[7];
    uint64_t v21 = (char *)a1 + v24;
    uint64_t v22 = &a2[v24];
    if (!(*(unsigned int (**)(char *, uint64_t, uint64_t))(v16 + 48))(&a2[v24], 1, v9)) {
      goto LABEL_16;
    }
  }
  uint64_t v25 = sub_10000588C(&qword_101638CF0);
  memcpy(v21, v22, *(void *)(*(void *)(v25 - 8) + 64));
LABEL_17:
  uint64_t v26 = v5[8];
  uint64_t v27 = (char *)a1 + v26;
  uint64_t v28 = &a2[v26];
  uint64_t v29 = type metadata accessor for Date();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v29 - 8) + 32))(v27, v28, v29);
  *(_OWORD *)((char *)a1 + v5[9]) = *(_OWORD *)&a2[v5[9]];
  *(_OWORD *)((char *)a1 + v5[10]) = *(_OWORD *)&a2[v5[10]];
  *(_OWORD *)((char *)a1 + v5[11]) = *(_OWORD *)&a2[v5[11]];
  *(_OWORD *)((char *)a1 + v5[12]) = *(_OWORD *)&a2[v5[12]];
  *(_OWORD *)((char *)a1 + v5[13]) = *(_OWORD *)&a2[v5[13]];
  *(_OWORD *)((char *)a1 + v5[14]) = *(_OWORD *)&a2[v5[14]];
  *(_OWORD *)((char *)a1 + v5[15]) = *(_OWORD *)&a2[v5[15]];
  *(void *)((char *)a1 + v5[16]) = *(void *)&a2[v5[16]];
  *(void *)((char *)a1 + v5[17]) = *(void *)&a2[v5[17]];
  *((unsigned char *)a1 + v5[18]) = a2[v5[18]];
  *((unsigned char *)a1 + v5[19]) = a2[v5[19]];
  *((unsigned char *)a1 + v5[20]) = a2[v5[20]];
  swift_storeEnumTagMultiPayload();
  return a1;
}

char *sub_100A65B38(char *a1, char *a2)
{
  if (a1 != a2)
  {
    sub_100A66274((uint64_t)a1, (uint64_t (*)(void))type metadata accessor for PairingEvent);
    int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    *(_OWORD *)a1 = *(_OWORD *)a2;
    uint64_t v5 = (int *)type metadata accessor for OwnedBeaconRecord();
    uint64_t v6 = v5[5];
    uint64_t v7 = &a1[v6];
    uint64_t v8 = &a2[v6];
    uint64_t v9 = type metadata accessor for UUID();
    uint64_t v31 = *(void *)(v9 - 8);
    uint64_t v10 = *(void (**)(char *, char *, uint64_t))(v31 + 32);
    v10(v7, v8, v9);
    uint64_t v11 = v5[6];
    uint64_t v12 = &a1[v11];
    uint64_t v13 = &a2[v11];
    uint64_t v14 = type metadata accessor for StableIdentifier();
    int v15 = swift_getEnumCaseMultiPayload();
    if (EnumCaseMultiPayload == 1)
    {
      if (v15 == 3)
      {
        v10(v12, v13, v9);
        uint64_t v19 = (int *)sub_10000588C((uint64_t *)&unk_1016565E0);
        *(_OWORD *)&v12[v19[12]] = *(_OWORD *)&v13[v19[12]];
        *(_OWORD *)&v12[v19[16]] = *(_OWORD *)&v13[v19[16]];
        *(_OWORD *)&v12[v19[20]] = *(_OWORD *)&v13[v19[20]];
        v12[v19[24]] = v13[v19[24]];
        swift_storeEnumTagMultiPayload();
        uint64_t v16 = v31;
      }
      else
      {
        uint64_t v16 = v31;
        if (v15 == 2)
        {
          v10(v12, v13, v9);
          uint64_t v17 = (int *)sub_10000588C(&qword_1016555E0);
          *(_OWORD *)&v12[v17[12]] = *(_OWORD *)&v13[v17[12]];
          *(_OWORD *)&v12[v17[16]] = *(_OWORD *)&v13[v17[16]];
          *(_OWORD *)&v12[v17[20]] = *(_OWORD *)&v13[v17[20]];
          *(_WORD *)&v12[v17[24]] = *(_WORD *)&v13[v17[24]];
          *(_OWORD *)&v12[v17[28]] = *(_OWORD *)&v13[v17[28]];
          swift_storeEnumTagMultiPayload();
        }
        else
        {
          memcpy(v12, v13, *(void *)(*(void *)(v14 - 8) + 64));
        }
      }
      uint64_t v20 = v5[7];
      uint64_t v21 = &a1[v20];
      uint64_t v22 = &a2[v20];
      if (!(*(unsigned int (**)(char *, uint64_t, uint64_t))(v16 + 48))(&a2[v20], 1, v9))
      {
LABEL_17:
        v10(v21, v22, v9);
        (*(void (**)(char *, void, uint64_t, uint64_t))(v16 + 56))(v21, 0, 1, v9);
        goto LABEL_18;
      }
    }
    else
    {
      if (v15 == 3)
      {
        v10(v12, v13, v9);
        uint64_t v23 = (int *)sub_10000588C((uint64_t *)&unk_1016565E0);
        *(_OWORD *)&v12[v23[12]] = *(_OWORD *)&v13[v23[12]];
        *(_OWORD *)&v12[v23[16]] = *(_OWORD *)&v13[v23[16]];
        *(_OWORD *)&v12[v23[20]] = *(_OWORD *)&v13[v23[20]];
        v12[v23[24]] = v13[v23[24]];
        swift_storeEnumTagMultiPayload();
        uint64_t v16 = v31;
      }
      else
      {
        uint64_t v16 = v31;
        if (v15 == 2)
        {
          v10(v12, v13, v9);
          uint64_t v18 = (int *)sub_10000588C(&qword_1016555E0);
          *(_OWORD *)&v12[v18[12]] = *(_OWORD *)&v13[v18[12]];
          *(_OWORD *)&v12[v18[16]] = *(_OWORD *)&v13[v18[16]];
          *(_OWORD *)&v12[v18[20]] = *(_OWORD *)&v13[v18[20]];
          *(_WORD *)&v12[v18[24]] = *(_WORD *)&v13[v18[24]];
          *(_OWORD *)&v12[v18[28]] = *(_OWORD *)&v13[v18[28]];
          swift_storeEnumTagMultiPayload();
        }
        else
        {
          memcpy(v12, v13, *(void *)(*(void *)(v14 - 8) + 64));
        }
      }
      uint64_t v24 = v5[7];
      uint64_t v21 = &a1[v24];
      uint64_t v22 = &a2[v24];
      if (!(*(unsigned int (**)(char *, uint64_t, uint64_t))(v16 + 48))(&a2[v24], 1, v9)) {
        goto LABEL_17;
      }
    }
    uint64_t v25 = sub_10000588C(&qword_101638CF0);
    memcpy(v21, v22, *(void *)(*(void *)(v25 - 8) + 64));
LABEL_18:
    uint64_t v26 = v5[8];
    uint64_t v27 = &a1[v26];
    uint64_t v28 = &a2[v26];
    uint64_t v29 = type metadata accessor for Date();
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v29 - 8) + 32))(v27, v28, v29);
    *(_OWORD *)&a1[v5[9]] = *(_OWORD *)&a2[v5[9]];
    *(_OWORD *)&a1[v5[10]] = *(_OWORD *)&a2[v5[10]];
    *(_OWORD *)&a1[v5[11]] = *(_OWORD *)&a2[v5[11]];
    *(_OWORD *)&a1[v5[12]] = *(_OWORD *)&a2[v5[12]];
    *(_OWORD *)&a1[v5[13]] = *(_OWORD *)&a2[v5[13]];
    *(_OWORD *)&a1[v5[14]] = *(_OWORD *)&a2[v5[14]];
    *(_OWORD *)&a1[v5[15]] = *(_OWORD *)&a2[v5[15]];
    *(void *)&a1[v5[16]] = *(void *)&a2[v5[16]];
    *(void *)&a1[v5[17]] = *(void *)&a2[v5[17]];
    a1[v5[18]] = a2[v5[18]];
    a1[v5[19]] = a2[v5[19]];
    a1[v5[20]] = a2[v5[20]];
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

uint64_t sub_100A66104()
{
  uint64_t result = type metadata accessor for OwnedBeaconRecord();
  if (v1 <= 0x3F)
  {
    swift_initEnumMetadataMultiPayload();
    return 0;
  }
  return result;
}

uint64_t sub_100A6618C()
{
  uint64_t v0 = type metadata accessor for Logger();
  sub_10001E384(v0, qword_10170E990);
  sub_100010324(v0, (uint64_t)qword_10170E990);
  return Logger.init(subsystem:category:)();
}

uint64_t sub_100A66210(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for OwnedBeaconRecord();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_100A66274(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

void *sub_100A662D4(void *a1, void *a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v8 = *a2;
    *a1 = *a2;
    a1 = (void *)(v8 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v7 = type metadata accessor for FMNAccountType();
    (*(void (**)(void *, void *, uint64_t))(*(void *)(v7 - 8) + 16))(a1, a2, v7);
    *((unsigned char *)a1 + *(int *)(a3 + 20)) = *((unsigned char *)a2 + *(int *)(a3 + 20));
  }
  return a1;
}

uint64_t sub_100A663A0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for FMNAccountType();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 16))(a1, a2, v6);
  *(unsigned char *)(a1 + *(int *)(a3 + 20)) = *(unsigned char *)(a2 + *(int *)(a3 + 20));
  return a1;
}

uint64_t sub_100A6641C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for FMNAccountType();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 24))(a1, a2, v6);
  *(unsigned char *)(a1 + *(int *)(a3 + 20)) = *(unsigned char *)(a2 + *(int *)(a3 + 20));
  return a1;
}

uint64_t sub_100A66498(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for FMNAccountType();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 32))(a1, a2, v6);
  *(unsigned char *)(a1 + *(int *)(a3 + 20)) = *(unsigned char *)(a2 + *(int *)(a3 + 20));
  return a1;
}

uint64_t sub_100A66514(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for FMNAccountType();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 40))(a1, a2, v6);
  *(unsigned char *)(a1 + *(int *)(a3 + 20)) = *(unsigned char *)(a2 + *(int *)(a3 + 20));
  return a1;
}

uint64_t sub_100A66590(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_100A665A4);
}

uint64_t sub_100A665A4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for FMNAccountType();
  uint64_t v7 = *(void *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == a2)
  {
    uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    return v8(a1, a2, v6);
  }
  else
  {
    unsigned int v10 = *(unsigned __int8 *)(a1 + *(int *)(a3 + 20));
    if (v10 >= 2) {
      return ((v10 + 2147483646) & 0x7FFFFFFF) + 1;
    }
    else {
      return 0;
    }
  }
}

uint64_t sub_100A66674(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_100A66688);
}

uint64_t sub_100A66688(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result = type metadata accessor for FMNAccountType();
  uint64_t v9 = *(void *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    unsigned int v10 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    return v10(a1, a2, a2, result);
  }
  else
  {
    *(unsigned char *)(a1 + *(int *)(a4 + 20)) = a2 + 1;
  }
  return result;
}

uint64_t type metadata accessor for AirPodsLEPairingLockCheckEndPoint()
{
  uint64_t result = qword_101656C88;
  if (!qword_101656C88) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t sub_100A66790()
{
  uint64_t result = type metadata accessor for FMNAccountType();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

void sub_100A66824(uint64_t a1@<X8>)
{
  uint64_t v3 = type metadata accessor for URLComponents();
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  uint64_t v6 = &v20[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v7 = type metadata accessor for FMNAccountType();
  uint64_t v8 = *(void *)(v7 - 8);
  __chkstk_darwin(v7);
  unsigned int v10 = &v20[-((v9 + 15) & 0xFFFFFFFFFFFFFFF0)];
  if (*(unsigned char *)(v1 + *(int *)(type metadata accessor for AirPodsLEPairingLockCheckEndPoint() + 20)) == 1)
  {
    (*(void (**)(unsigned char *, void, uint64_t))(v8 + 104))(v10, enum case for FMNAccountType.none(_:), v7);
    type metadata accessor for AccountURLComponents();
    swift_allocObject();
    sub_1010E7A64((uint64_t)v10);
    sub_10000588C(&qword_101639580);
    OS_dispatch_queue.sync<A>(execute:)();
    URLComponents.init()();
    URLComponents.scheme.setter();
    URLComponents.host.setter();
    URLComponents.path.setter();
    swift_release();
    (*(void (**)(uint64_t, unsigned char *, uint64_t))(v4 + 32))(a1, v6, v3);
    uint64_t v11 = (void (*)(uint64_t *, void))URLComponents.path.modify();
    v12._countAndFlagsBits = 0xD00000000000002ALL;
    v12._object = (void *)0x8000000101410A70;
    String.append(_:)(v12);
    v11(&v21, 0);
  }
  else
  {
    (*(void (**)(unsigned char *, uint64_t, uint64_t))(v8 + 16))(v10, v1, v7);
    type metadata accessor for AccountURLComponents();
    swift_allocObject();
    sub_1010E7A64((uint64_t)v10);
    sub_10000588C(&qword_101639580);
    OS_dispatch_queue.sync<A>(execute:)();
    URLComponents.init()();
    URLComponents.scheme.setter();
    URLComponents.host.setter();
    URLComponents.path.setter();
    swift_release();
    (*(void (**)(uint64_t, unsigned char *, uint64_t))(v4 + 32))(a1, v6, v3);
    uint64_t v13 = (void (*)(uint64_t *, void))URLComponents.path.modify();
    v14._countAndFlagsBits = 0xD00000000000001BLL;
    v14._object = (void *)0x8000000101410A50;
    String.append(_:)(v14);
    v13(&v21, 0);
    if (qword_101637188 != -1) {
      swift_once();
    }
    int v15 = (void *)qword_10170EE68;
    id v16 = [self sharedInstance];
    unsigned int v17 = [v16 isInternalBuild];

    if (v17)
    {
      NSString v18 = String._bridgeToObjectiveC()();
      id v19 = [v15 stringForKey:v18];

      if (v19)
      {
        static String._unconditionallyBridgeFromObjectiveC(_:)();

        URLComponents.host.setter();
      }
    }
  }
}

uint64_t sub_100A66CB4()
{
  uint64_t v0 = type metadata accessor for Logger();
  sub_10001E384(v0, qword_10170E9A8);
  uint64_t v1 = sub_100010324(v0, (uint64_t)qword_10170E9A8);
  if (qword_1016371E8 != -1) {
    swift_once();
  }
  uint64_t v2 = sub_100010324(v0, (uint64_t)qword_10170EF10);
  uint64_t v3 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v0 - 8) + 16);

  return v3(v1, v2, v0);
}

uint64_t sub_100A66D7C()
{
  uint64_t v1 = *v0;
  type metadata accessor for Transaction();
  uint64_t v2 = swift_allocObject();
  *(void *)(v2 + 16) = v0;
  *(void *)(v2 + 24) = v1;
  swift_retain();
  static Transaction.asyncTask(name:block:)();

  return swift_release();
}

uint64_t sub_100A66E3C(uint64_t a1, uint64_t a2)
{
  v2[2] = a1;
  v2[3] = a2;
  sub_10000588C(&qword_10164DBB0);
  v2[4] = swift_task_alloc();
  return _swift_task_switch(sub_100A66ED0, 0, 0);
}

uint64_t sub_100A66ED0()
{
  uint64_t v1 = *(void *)(v0 + 32);
  uint64_t v2 = type metadata accessor for TaskPriority();
  long long v7 = *(_OWORD *)(v0 + 16);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v2 - 8) + 56))(v1, 1, 1, v2);
  uint64_t v3 = swift_allocObject();
  *(void *)(v3 + 16) = 0;
  *(void *)(v3 + 24) = 0;
  *(_OWORD *)(v3 + 32) = v7;
  swift_retain();
  uint64_t v4 = sub_100128234(v1, (uint64_t)&unk_101656E10, v3);
  sub_10001DAB4(v1, &qword_10164DBB0);
  *(void *)(v7 + 40) = v4;
  swift_release();
  swift_task_dealloc();
  uint64_t v5 = *(uint64_t (**)(void))(v0 + 8);
  return v5();
}

uint64_t sub_100A66FF4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v4[44] = a4;
  uint64_t v5 = type metadata accessor for UUID();
  v4[45] = v5;
  v4[46] = *(void *)(v5 - 8);
  v4[47] = swift_task_alloc();
  v4[48] = swift_task_alloc();
  sub_10000588C((uint64_t *)&unk_10163B1D0);
  v4[49] = swift_task_alloc();
  uint64_t v6 = type metadata accessor for LocalFindableAccessoryRecord();
  v4[50] = v6;
  v4[51] = *(void *)(v6 - 8);
  v4[52] = swift_task_alloc();
  uint64_t v7 = type metadata accessor for CloudStorageStore.State(0);
  v4[53] = v7;
  v4[54] = *(void *)(v7 - 8);
  v4[55] = swift_task_alloc();
  sub_10000588C((uint64_t *)&unk_10164E8B0);
  v4[56] = swift_task_alloc();
  uint64_t v8 = sub_10000588C(&qword_10164E8C8);
  v4[57] = v8;
  v4[58] = *(void *)(v8 - 8);
  v4[59] = swift_task_alloc();
  uint64_t v9 = sub_10000588C(&qword_101656E20);
  v4[60] = v9;
  v4[61] = *(void *)(v9 - 8);
  v4[62] = swift_task_alloc();
  uint64_t v10 = sub_10000588C(&qword_10164E8C0);
  v4[63] = v10;
  v4[64] = *(void *)(v10 - 8);
  v4[65] = swift_task_alloc();
  return _swift_task_switch(sub_100A672FC, 0, 0);
}