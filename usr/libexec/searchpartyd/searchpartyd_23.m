ValueMetadata *type metadata accessor for ItemPairingCoordinator.PairingState()
{
  return &type metadata for ItemPairingCoordinator.PairingState;
}

unint64_t sub_101003194()
{
  unint64_t result = qword_101666C60;
  if (!qword_101666C60)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_101666C60);
  }
  return result;
}

uint64_t sub_1010031E8(uint64_t a1)
{
  *(void *)(v1 + 16) = a1;
  if (a1) {
    return _swift_task_switch(sub_101003220, a1, 0);
  }
  else {
    return (*(uint64_t (**)(void))(v1 + 8))();
  }
}

uint64_t sub_101003220()
{
  sub_101198864();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_101003280(void *a1, char a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t (*a6)(void *, void))
{
  int v9 = a2 & 1;
  static os_signpost_type_t.end.getter();
  if (qword_1016372A8 != -1) {
    swift_once();
  }
  os_signpost(_:dso:log:name:signpostID:)();
  type metadata accessor for Transaction();
  *(void *)(swift_allocObject() + 16) = a5;
  swift_retain();
  static Transaction.asyncTask(name:block:)();
  swift_release();
  unsigned int v20 = v9;
  if (v9)
  {
    id v14 = a1;
    static os_log_type_t.default.getter();
    if (qword_1016372D0 != -1) {
      swift_once();
    }
    sub_10000588C((uint64_t *)&unk_10163AD00);
    uint64_t v15 = swift_allocObject();
    *(_OWORD *)(v15 + 16) = xmmword_101342130;
    id v16 = v14;
    uint64_t v17 = _convertErrorToNSError(_:)();
    sub_1003B579C(a1, 1);
    *(void *)(v15 + 56) = sub_10001D4B0(0, (unint64_t *)&qword_101640E40);
    *(void *)(v15 + 64) = sub_100206F48((unint64_t *)&qword_10163C9B0, (unint64_t *)&qword_101640E40);
    *(void *)(v15 + 32) = v17;
    os_log(_:dso:log:_:_:)();
    swift_bridgeObjectRelease();
    uint64_t v18 = swift_allocObject();
    *(void *)(v18 + 16) = a5;
    *(void *)(v18 + 24) = v16;
    swift_retain();
    sub_1003B57DC(a1, 1);
    static Transaction.asyncTask(name:block:)();
    swift_release();
    sub_1003B579C(a1, 1);
  }
  else
  {
    static os_log_type_t.default.getter();
    if (qword_1016372D0 != -1) {
      swift_once();
    }
    sub_10000588C((uint64_t *)&unk_10163AD00);
    uint64_t v10 = swift_allocObject();
    uint64_t v11 = v10;
    *(_OWORD *)(v10 + 16) = xmmword_101342130;
    if (a1) {
      uint64_t v12 = 1702195828;
    }
    else {
      uint64_t v12 = 0x65736C6166;
    }
    if (a1) {
      unint64_t v13 = 0xE400000000000000;
    }
    else {
      unint64_t v13 = 0xE500000000000000;
    }
    *(void *)(v10 + 56) = &type metadata for String;
    *(void *)(v10 + 64) = sub_10000B4CC();
    *(void *)(v11 + 32) = v12;
    *(void *)(v11 + 40) = v13;
    os_log(_:dso:log:_:_:)();
    swift_bridgeObjectRelease();
    *(void *)(swift_allocObject() + 16) = a5;
    swift_retain();
    static Transaction.asyncTask(name:block:)();
    swift_release();
  }
  return a6(a1, v20);
}

uint64_t sub_101003670(uint64_t a1)
{
  v1[5] = a1;
  uint64_t v3 = type metadata accessor for DispatchTime();
  v1[6] = v3;
  v1[7] = *(void *)(v3 - 8);
  v1[8] = swift_task_alloc();
  v1[9] = swift_task_alloc();
  if (a1)
  {
    return _swift_task_switch(sub_101003794, a1, 0);
  }
  else
  {
    swift_task_dealloc();
    swift_task_dealloc();
    v4 = (uint64_t (*)(void))v1[1];
    return v4();
  }
}

uint64_t sub_101003794()
{
  uint64_t v1 = v0[8];
  uint64_t v2 = v0[6];
  uint64_t v3 = v0[7];
  uint64_t v4 = v0[5];
  static DispatchTime.now()();
  unint64_t v5 = DispatchTime.uptimeNanoseconds.getter();
  uint64_t v6 = v4 + OBJC_IVAR____TtC12searchpartyd24SPAnalyticsItemPairEvent_beginAck;
  swift_beginAccess();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v3 + 16))(v1, v6, v2);
  unint64_t v7 = DispatchTime.uptimeNanoseconds.getter();
  v8 = *(uint64_t (**)(uint64_t, uint64_t))(v3 + 8);
  uint64_t result = v8(v1, v2);
  unint64_t v10 = v5 - v7;
  if (v5 < v7)
  {
    __break(1u);
  }
  else
  {
    uint64_t v11 = v0[9];
    uint64_t v12 = v0[5];
    uint64_t v13 = v0[6];
    double v14 = (double)v10 / 1000000000.0;
    type metadata accessor for Transaction();
    uint64_t v15 = swift_allocObject();
    *(void *)(v15 + 16) = v12;
    *(double *)(v15 + 24) = v14;
    swift_retain();
    static Transaction.asyncTask(name:block:)();
    swift_release();
    v8(v11, v13);
    swift_task_dealloc();
    swift_task_dealloc();
    id v16 = (uint64_t (*)(void))v0[1];
    return v16();
  }
  return result;
}

uint64_t sub_101003944(uint64_t a1)
{
  *(void *)(v1 + 16) = a1;
  if (a1) {
    return _swift_task_switch(sub_10100397C, a1, 0);
  }
  else {
    return (*(uint64_t (**)(void))(v1 + 8))();
  }
}

uint64_t sub_10100397C()
{
  uint64_t v1 = *(void *)(v0 + 16);
  type metadata accessor for Transaction();
  uint64_t v2 = swift_allocObject();
  *(void *)(v2 + 16) = v1;
  *(void *)(v2 + 24) = 0;
  *(void *)(v2 + 32) = 0;
  *(void *)(v2 + 40) = 0;
  *(unsigned char *)(v2 + 48) = 1;
  swift_retain();
  static Transaction.asyncTask(name:block:)();
  swift_release();
  uint64_t v3 = *(uint64_t (**)(void))(v0 + 8);
  return v3();
}

uint64_t sub_101003A54(uint64_t a1, uint64_t a2)
{
  *(void *)(v2 + 16) = a1;
  *(void *)(v2 + 24) = a2;
  if (a1) {
    return _swift_task_switch(sub_101003A90, a1, 0);
  }
  else {
    return (*(uint64_t (**)(void))(v2 + 8))();
  }
}

uint64_t sub_101003A90()
{
  uint64_t v1 = v0[2];
  uint64_t v2 = (void *)v0[3];
  type metadata accessor for Transaction();
  uint64_t v3 = swift_allocObject();
  *(void *)(v3 + 16) = v1;
  *(void *)(v3 + 24) = v2;
  *(void *)(v3 + 32) = 0;
  *(void *)(v3 + 40) = 0;
  *(unsigned char *)(v3 + 48) = 0;
  swift_retain();
  id v4 = v2;
  static Transaction.asyncTask(name:block:)();
  swift_release();
  uint64_t v5 = (uint64_t (*)(void))v0[1];
  return v5();
}

void sub_101003B68(void *a1, void (*a2)(void *, uint64_t))
{
  static os_log_type_t.error.getter();
  if (qword_1016372A8 != -1) {
    swift_once();
  }
  sub_10000588C((uint64_t *)&unk_10163AD00);
  uint64_t v4 = swift_allocObject();
  *(_OWORD *)(v4 + 16) = xmmword_101342130;
  swift_errorRetain();
  sub_10000588C(&qword_101638D40);
  uint64_t v5 = String.init<A>(describing:)();
  uint64_t v7 = v6;
  *(void *)(v4 + 56) = &type metadata for String;
  *(void *)(v4 + 64) = sub_10000B4CC();
  *(void *)(v4 + 32) = v5;
  *(void *)(v4 + 40) = v7;
  os_log(_:dso:log:_:_:)();
  swift_bridgeObjectRelease();
  swift_errorRetain();
  type metadata accessor for SPPairingSessionError(0);
  if (swift_dynamicCast())
  {
    id v8 = v12;
    a2(v12, 1);
  }
  else
  {
    sub_10000588C(&qword_101642890);
    uint64_t inited = swift_initStackObject();
    *(_OWORD *)(inited + 16) = xmmword_101342130;
    *(void *)(inited + 32) = static String._unconditionallyBridgeFromObjectiveC(_:)();
    *(void *)(inited + 40) = v10;
    *(void *)(inited + 48) = 0xD000000000000032;
    *(void *)(inited + 56) = 0x800000010141CD30;
    unint64_t v11 = sub_10092D8F8(inited);
    sub_10065435C(v11);
    swift_bridgeObjectRelease();
    sub_101004620(&qword_101638770, type metadata accessor for SPPairingSessionError);
    _BridgedStoredNSError.init(_:userInfo:)();
    id v8 = a1;
    a2(a1, 1);
  }
}

uint64_t sub_101003DD4(uint64_t a1, uint64_t (*a2)(uint64_t, void))
{
  if (qword_1016372A8 != -1) {
    swift_once();
  }
  os_log(_:dso:log:_:_:)();
  return a2(1, 0);
}

unint64_t sub_101003E78()
{
  unint64_t result = qword_101666C68;
  if (!qword_101666C68)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_101666C68);
  }
  return result;
}

uint64_t sub_101003ECC()
{
  swift_release();

  return _swift_deallocObject(v0, 24, 7);
}

uint64_t sub_101003F04()
{
  uint64_t v2 = *(void *)(v0 + 16);
  uint64_t v3 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v3;
  *uint64_t v3 = v1;
  v3[1] = sub_100033F68;
  return sub_1010031E8(v2);
}

uint64_t sub_101003F98()
{
  uint64_t v1 = type metadata accessor for OSSignpostID();
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 24) & ~v3;
  uint64_t v5 = v3 | 7;
  unint64_t v6 = (((*(void *)(v2 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8;
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  swift_release();
  swift_release();

  return _swift_deallocObject(v0, v6 + 16, v5);
}

uint64_t sub_101004094(void *a1, char a2)
{
  char v4 = a2 & 1;
  uint64_t v5 = *(void *)(type metadata accessor for OSSignpostID() - 8);
  unint64_t v6 = (*(unsigned __int8 *)(v5 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
  unint64_t v7 = (*(void *)(v5 + 64) + v6 + 7) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v8 = *(void *)(v2 + 16);
  uint64_t v9 = *(void *)(v2 + v7);
  uint64_t v10 = *(uint64_t (**)(void *, void))(v2 + ((v7 + 15) & 0xFFFFFFFFFFFFFFF8));

  return sub_101003280(a1, v4, v8, v2 + v6, v9, v10);
}

uint64_t sub_101004154()
{
  swift_release();

  return _swift_deallocObject(v0, 32, 7);
}

void sub_10100418C(void *a1)
{
  sub_101003B68(a1, *(void (**)(void *, uint64_t))(v1 + 16));
}

uint64_t sub_101004194(uint64_t a1)
{
  return sub_101003DD4(a1, *(uint64_t (**)(uint64_t, void))(v1 + 16));
}

uint64_t sub_10100419C()
{
  uint64_t v2 = *(void *)(v0 + 16);
  uint64_t v3 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v3;
  *uint64_t v3 = v1;
  v3[1] = sub_100033F68;
  return sub_101003670(v2);
}

uint64_t sub_101004234()
{
  uint64_t v2 = *(void *)(v0 + 16);
  uint64_t v3 = *(void *)(v0 + 24);
  char v4 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v4;
  *char v4 = v1;
  v4[1] = sub_100033F68;
  return sub_101003A54(v2, v3);
}

uint64_t sub_1010042CC()
{
  uint64_t v2 = *(void *)(v0 + 16);
  uint64_t v3 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v3;
  *uint64_t v3 = v1;
  v3[1] = sub_100033F68;
  return sub_101003944(v2);
}

uint64_t sub_101004368()
{
  swift_release();

  return _swift_deallocObject(v0, 32, 7);
}

uint64_t sub_1010043A0()
{
  uint64_t v2 = *(void *)(v0 + 16);
  double v3 = *(double *)(v0 + 24);
  char v4 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v4;
  *char v4 = v1;
  v4[1] = sub_100033F68;
  return sub_101198BC0(v2, v3);
}

uint64_t sub_101004444(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_10000588C(&qword_101642898);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_1010044AC()
{
  uint64_t v2 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v2;
  *uint64_t v2 = v1;
  v2[1] = sub_100033F68;
  v2[2] = v0;
  return _swift_task_switch(sub_101002770, 0, 0);
}

uint64_t sub_101004554()
{
  uint64_t v2 = swift_task_alloc();
  long long v3 = *(_OWORD *)(v0 + 16);
  *(void *)(v1 + 16) = v2;
  *(void *)uint64_t v2 = v1;
  *(void *)(v2 + 8) = sub_100033F68;
  *(_OWORD *)(v2 + 16) = v3;
  return _swift_task_switch(sub_10100281C, 0, 0);
}

uint64_t sub_101004608(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_101004618()
{
  return swift_release();
}

uint64_t sub_101004620(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_101004668(uint64_t a1)
{
  return sub_101002920(a1, *(void *)(v1 + 16), *(void **)(v1 + 24));
}

void sub_101004684(void *a1, char a2)
{
}

uint64_t sub_101004698()
{
  uint64_t v2 = swift_task_alloc();
  long long v3 = *(_OWORD *)(v0 + 16);
  *(void *)(v1 + 16) = v2;
  *(void *)uint64_t v2 = v1;
  *(void *)(v2 + 8) = sub_10001D2E4;
  *(_OWORD *)(v2 + 16) = v3;
  return _swift_task_switch(sub_101001B10, 0, 0);
}

uint64_t sub_101004748()
{
  swift_release();

  return _swift_deallocObject(v0, 41, 7);
}

uint64_t sub_101004788()
{
  uint64_t v2 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v2;
  *uint64_t v2 = v1;
  v2[1] = sub_100033F68;
  v2[2] = v0;
  return _swift_task_switch(sub_101001A64, 0, 0);
}

uint64_t sub_101004830()
{
  sub_1003B579C(*(id *)(v0 + 16), *(unsigned char *)(v0 + 24));

  return _swift_deallocObject(v0, 25, 7);
}

void sub_101004870(uint64_t a1)
{
  sub_101000E28(a1, *(NSObject **)(v1 + 16), *(void *)(v1 + 24));
}

void sub_10100487C(unsigned __int8 *a1)
{
  sub_10100106C(a1, *(NSObject **)(v1 + 16), *(void *)(v1 + 24));
}

uint64_t sub_101004884(uint64_t a1)
{
  return sub_100FFFC3C(a1, v1[2], v1[3], v1[4], v1[5]);
}

uint64_t sub_1010048A4()
{
  swift_release();
  swift_release();
  if (*(void *)(v0 + 32)) {
    swift_release();
  }

  return _swift_deallocObject(v0, 48, 7);
}

uint64_t sub_1010048F4()
{
  return sub_100FFFF10(v0[2], v0[3], v0[4], v0[5]);
}

uint64_t sub_101004904()
{
  return sub_101004918(0);
}

uint64_t sub_101004910()
{
  return sub_101004918(1);
}

uint64_t sub_101004918(uint64_t result)
{
  uint64_t v2 = *(uint64_t (**)(uint64_t))(v1 + 16);
  if (v2) {
    return v2(result & 1);
  }
  return result;
}

uint64_t sub_10100494C(void (*a1)())
{
  uint64_t v2 = (void (**)())(v1 + OBJC_IVAR____TtC12searchpartyd22ItemPairingCoordinator_cleanupBlock);
  uint64_t v3 = *(void *)(v1 + OBJC_IVAR____TtC12searchpartyd22ItemPairingCoordinator_cleanupBlock);
  *uint64_t v2 = sub_1010049A4;
  v2[1] = a1;
  swift_retain();
  return sub_1000A1534(v3);
}

void sub_1010049A4()
{
}

uint64_t *sub_1010049D8(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = a1;
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v8 = *(void *)a2;
    *uint64_t v4 = *(void *)a2;
    uint64_t v4 = (uint64_t *)(v8 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    unint64_t v7 = *(void *)(a2 + 8);
    if (v7 >> 60 == 15)
    {
      *(_OWORD *)a1 = *(_OWORD *)a2;
    }
    else
    {
      uint64_t v9 = *(void *)a2;
      sub_1000361E0(*(void *)a2, *(void *)(a2 + 8));
      *uint64_t v4 = v9;
      v4[1] = v7;
    }
    uint64_t v10 = *(int *)(a3 + 20);
    unint64_t v11 = (char *)v4 + v10;
    uint64_t v12 = a2 + v10;
    uint64_t v13 = type metadata accessor for RequestMethod();
    (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v13 - 8) + 16))(v11, v12, v13);
  }
  return v4;
}

uint64_t sub_101004ADC(uint64_t *a1, uint64_t a2)
{
  unint64_t v4 = a1[1];
  if (v4 >> 60 != 15) {
    sub_10001CFB8(*a1, v4);
  }
  int v5 = (char *)a1 + *(int *)(a2 + 20);
  uint64_t v6 = type metadata accessor for RequestMethod();
  unint64_t v7 = *(uint64_t (**)(char *, uint64_t))(*(void *)(v6 - 8) + 8);

  return v7(v5, v6);
}

uint64_t sub_101004B64(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  unint64_t v6 = a2[1];
  if (v6 >> 60 == 15)
  {
    *(_OWORD *)a1 = *(_OWORD *)a2;
  }
  else
  {
    uint64_t v7 = *a2;
    sub_1000361E0(*a2, a2[1]);
    *(void *)a1 = v7;
    *(void *)(a1 + 8) = v6;
  }
  uint64_t v8 = *(int *)(a3 + 20);
  uint64_t v9 = a1 + v8;
  uint64_t v10 = (uint64_t)a2 + v8;
  uint64_t v11 = type metadata accessor for RequestMethod();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v11 - 8) + 16))(v9, v10, v11);
  return a1;
}

uint64_t *sub_101004C18(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6 = *(void *)(a2 + 8);
  if ((unint64_t)a1[1] >> 60 != 15)
  {
    if (v6 >> 60 != 15)
    {
      uint64_t v8 = *(void *)a2;
      sub_1000361E0(*(void *)a2, *(void *)(a2 + 8));
      uint64_t v9 = *a1;
      unint64_t v10 = a1[1];
      *a1 = v8;
      a1[1] = v6;
      sub_10001CFB8(v9, v10);
      goto LABEL_8;
    }
    sub_1001356D0((uint64_t)a1);
    goto LABEL_6;
  }
  if (v6 >> 60 == 15)
  {
LABEL_6:
    *(_OWORD *)a1 = *(_OWORD *)a2;
    goto LABEL_8;
  }
  uint64_t v7 = *(void *)a2;
  sub_1000361E0(*(void *)a2, *(void *)(a2 + 8));
  *a1 = v7;
  a1[1] = v6;
LABEL_8:
  uint64_t v11 = *(int *)(a3 + 20);
  uint64_t v12 = (char *)a1 + v11;
  uint64_t v13 = a2 + v11;
  uint64_t v14 = type metadata accessor for RequestMethod();
  (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v14 - 8) + 24))(v12, v13, v14);
  return a1;
}

_OWORD *sub_101004D10(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  *a1 = *a2;
  uint64_t v4 = *(int *)(a3 + 20);
  int v5 = (char *)a1 + v4;
  unint64_t v6 = (char *)a2 + v4;
  uint64_t v7 = type metadata accessor for RequestMethod();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v7 - 8) + 32))(v5, v6, v7);
  return a1;
}

uint64_t *sub_101004D8C(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  unint64_t v6 = a1[1];
  if (v6 >> 60 != 15)
  {
    unint64_t v7 = a2[1];
    if (v7 >> 60 != 15)
    {
      uint64_t v8 = *a1;
      *a1 = *a2;
      a1[1] = v7;
      sub_10001CFB8(v8, v6);
      goto LABEL_6;
    }
    sub_1001356D0((uint64_t)a1);
  }
  *(_OWORD *)a1 = *(_OWORD *)a2;
LABEL_6:
  uint64_t v9 = *(int *)(a3 + 20);
  unint64_t v10 = (char *)a1 + v9;
  uint64_t v11 = (char *)a2 + v9;
  uint64_t v12 = type metadata accessor for RequestMethod();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v12 - 8) + 40))(v10, v11, v12);
  return a1;
}

uint64_t sub_101004E4C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_101004E60);
}

uint64_t sub_101004E60(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a2 == 11)
  {
    uint64_t v4 = *(void *)(a1 + 8) >> 60;
    BOOL v5 = ((4 * v4) & 0xC) == 0;
    unsigned int v6 = ((4 * v4) & 0xC | (v4 >> 2)) ^ 0xF;
    if (v5) {
      return 0;
    }
    else {
      return v6;
    }
  }
  else
  {
    uint64_t v10 = type metadata accessor for RequestMethod();
    uint64_t v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 48);
    uint64_t v12 = v10;
    uint64_t v13 = a1 + *(int *)(a3 + 20);
    return v11(v13, a2, v12);
  }
}

uint64_t sub_101004F14(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_101004F28);
}

void *sub_101004F28(void *result, uint64_t a2, int a3, uint64_t a4)
{
  BOOL v5 = result;
  if (a3 == 11)
  {
    *uint64_t result = 0;
    result[1] = (unint64_t)((~a2 >> 2) & 3 | (4 * ~a2)) << 60;
  }
  else
  {
    uint64_t v7 = type metadata accessor for RequestMethod();
    uint64_t v8 = *(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56);
    uint64_t v9 = v7;
    uint64_t v10 = (char *)v5 + *(int *)(a4 + 20);
    return (void *)v8(v10, a2, a2, v9);
  }
  return result;
}

uint64_t type metadata accessor for OfflineLostModeInfoLookupRequest()
{
  uint64_t result = qword_101666D80;
  if (!qword_101666D80) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t sub_101005024()
{
  uint64_t result = type metadata accessor for RequestMethod();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t sub_1010050BC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = v2 + *(int *)(a1 + 20);
  uint64_t v5 = type metadata accessor for RequestMethod();
  unsigned int v6 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16);

  return v6(a2, v4, v5);
}

uint64_t sub_101005130(uint64_t a1)
{
  uint64_t v2 = sub_1010051F0(&qword_101666DC8);

  return RequestContentRepresentable.description.getter(a1, v2);
}

uint64_t sub_101005188()
{
  return sub_1010051F0(&qword_101666DB8);
}

uint64_t sub_1010051BC()
{
  return sub_1010051F0(&qword_101666DC0);
}

uint64_t sub_1010051F0(unint64_t *a1)
{
  uint64_t result = *a1;
  if (!result)
  {
    type metadata accessor for OfflineLostModeInfoLookupRequest();
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

void *sub_101005234(void *a1, uint64_t a2)
{
  uint64_t v3 = v2;
  uint64_t v6 = type metadata accessor for MultipartAccessoryPairingInfo(0);
  uint64_t v75 = *(void *)(v6 - 8);
  __chkstk_darwin(v6 - 8);
  uint64_t v72 = (uint64_t)&v66 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v84 = sub_10000588C(&qword_101639618);
  uint64_t v8 = __chkstk_darwin(v84);
  v71 = (char *)&v66 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = __chkstk_darwin(v8);
  v74 = (uint64_t *)((char *)&v66 - v11);
  uint64_t v12 = __chkstk_darwin(v10);
  uint64_t v14 = (uint64_t *)((char *)&v66 - v13);
  __chkstk_darwin(v12);
  v73 = (uint64_t *)((char *)&v66 - v15);
  uint64_t v16 = *(void *)(a2 + 64);
  uint64_t v68 = a2 + 64;
  uint64_t v17 = 1 << *(unsigned char *)(a2 + 32);
  uint64_t v18 = -1;
  if (v17 < 64) {
    uint64_t v18 = ~(-1 << v17);
  }
  unint64_t v19 = v18 & v16;
  int64_t v69 = (unint64_t)(v17 + 63) >> 6;
  swift_bridgeObjectRetain();
  uint64_t v76 = a2;
  swift_bridgeObjectRetain();
  int64_t v20 = 0;
  v70 = v14;
  while (1)
  {
    if (v19)
    {
      uint64_t v77 = (v19 - 1) & v19;
      int64_t v78 = v20;
      unint64_t v21 = __clz(__rbit64(v19)) | (v20 << 6);
      goto LABEL_21;
    }
    BOOL v22 = __OFADD__(v20, 1);
    int64_t v23 = v20 + 1;
    if (v22) {
      goto LABEL_54;
    }
    if (v23 >= v69) {
      break;
    }
    unint64_t v24 = *(void *)(v68 + 8 * v23);
    if (!v24)
    {
      int64_t v25 = v23 + 1;
      if (v23 + 1 >= v69) {
        break;
      }
      unint64_t v24 = *(void *)(v68 + 8 * v25);
      if (!v24)
      {
        int64_t v25 = v23 + 2;
        if (v23 + 2 >= v69) {
          break;
        }
        unint64_t v24 = *(void *)(v68 + 8 * v25);
        if (!v24)
        {
          int64_t v25 = v23 + 3;
          if (v23 + 3 >= v69) {
            break;
          }
          unint64_t v24 = *(void *)(v68 + 8 * v25);
          if (!v24)
          {
            int64_t v25 = v23 + 4;
            if (v23 + 4 >= v69) {
              break;
            }
            unint64_t v24 = *(void *)(v68 + 8 * v25);
            if (!v24)
            {
              while (1)
              {
                int64_t v23 = v25 + 1;
                if (__OFADD__(v25, 1)) {
                  goto LABEL_58;
                }
                if (v23 >= v69) {
                  goto LABEL_50;
                }
                unint64_t v24 = *(void *)(v68 + 8 * v23);
                ++v25;
                if (v24) {
                  goto LABEL_20;
                }
              }
            }
          }
        }
      }
      int64_t v23 = v25;
    }
LABEL_20:
    uint64_t v77 = (v24 - 1) & v24;
    int64_t v78 = v23;
    unint64_t v21 = __clz(__rbit64(v24)) + (v23 << 6);
LABEL_21:
    uint64_t v26 = *(void *)(v76 + 56);
    v27 = (uint64_t *)(*(void *)(v76 + 48) + 16 * v21);
    uint64_t v28 = *v27;
    unint64_t v29 = v27[1];
    uint64_t v79 = *(void *)(v75 + 72);
    uint64_t v30 = v84;
    v31 = v73;
    sub_100036114(v26 + v79 * v21, (uint64_t)v73 + *(int *)(v84 + 48));
    uint64_t *v31 = v28;
    v31[1] = v29;
    sub_10001D608((uint64_t)v31, (uint64_t)v14, &qword_101639618);
    uint64_t v32 = *(int *)(v30 + 48);
    v33 = v74;
    uint64_t v34 = (uint64_t)v74 + v32;
    uint64_t v35 = (uint64_t)v14 + v32;
    uint64_t v36 = *v14;
    unint64_t v37 = v14[1];
    uint64_t *v74 = *v14;
    v33[1] = v37;
    sub_100036114((uint64_t)v14 + v32, (uint64_t)v33 + v32);
    v82 = (void *)v36;
    unint64_t v83 = v37;
    uint64_t v38 = 0;
    switch(v37 >> 62)
    {
      case 1uLL:
        if (__OFSUB__(HIDWORD(v36), v36)) {
          goto LABEL_56;
        }
        uint64_t v38 = HIDWORD(v36) - (int)v36;
LABEL_26:
        sub_1000361E0(v36, v37);
        sub_1000361E0(v36, v37);
LABEL_27:
        BOOL v22 = __OFSUB__(20, v38);
        uint64_t v41 = 20 - v38;
        if (v22)
        {
          __break(1u);
LABEL_52:
          __break(1u);
LABEL_53:
          __break(1u);
LABEL_54:
          __break(1u);
LABEL_55:
          __break(1u);
LABEL_56:
          __break(1u);
LABEL_57:
          __break(1u);
LABEL_58:
          __break(1u);
LABEL_59:
          KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
          __break(1u);
          JUMPOUT(0x1010058B8);
        }
        if (v41)
        {
          if (v41 <= 14)
          {
            if (v41 < 0) {
              goto LABEL_55;
            }
            unint64_t v44 = (unint64_t)v41 << 48;
            sub_1000361E0(v28, v29);
            swift_bridgeObjectRetain();
            uint64_t v43 = 0;
          }
          else
          {
            uint64_t v67 = v3;
            type metadata accessor for __DataStorage();
            swift_allocObject();
            sub_1000361E0(v28, v29);
            swift_bridgeObjectRetain();
            uint64_t v42 = __DataStorage.init(length:)();
            if ((unint64_t)v41 >= 0x7FFFFFFF)
            {
              type metadata accessor for Data.RangeReference();
              uint64_t v43 = swift_allocObject();
              *(void *)(v43 + 16) = 0;
              *(void *)(v43 + 24) = v41;
              unint64_t v44 = v42 | 0x8000000000000000;
            }
            else
            {
              uint64_t v43 = v41 << 32;
              unint64_t v44 = v42 | 0x4000000000000000;
            }
            uint64_t v3 = v67;
          }
        }
        else
        {
          sub_1000361E0(v28, v29);
          swift_bridgeObjectRetain();
          uint64_t v43 = 0;
          unint64_t v44 = 0xC000000000000000;
        }
        uint64_t v80 = v43;
        unint64_t v81 = v44;
        sub_10072AD40(&v80, 0);
        uint64_t v45 = v80;
        unint64_t v46 = v81;
        Data.append(_:)();
        sub_10001CFB8(v45, v46);
        sub_10001CFB8(v36, v37);
        uint64_t v47 = (uint64_t)v82;
        unint64_t v48 = v83;
        Swift::String v49 = Data.base64EncodedString(options:)(0);
        sub_10001CFB8(v47, v48);
        sub_100036238(v34);
        uint64_t v50 = (uint64_t)&v71[*(int *)(v84 + 48)];
        sub_100036114(v35, v50);
        uint64_t v51 = v72;
        sub_10084EE10(v50, v72);
        int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
        v82 = a1;
        unint64_t v54 = sub_100723FF4(v49._countAndFlagsBits, (uint64_t)v49._object);
        uint64_t v55 = a1[2];
        BOOL v56 = (v53 & 1) == 0;
        uint64_t v57 = v55 + v56;
        if (__OFADD__(v55, v56)) {
          goto LABEL_52;
        }
        char v58 = v53;
        if (a1[3] >= v57)
        {
          if ((isUniquelyReferenced_nonNull_native & 1) == 0) {
            sub_100E8540C();
          }
        }
        else
        {
          sub_100E73F4C(v57, isUniquelyReferenced_nonNull_native);
          uint64_t v59 = sub_100723FF4(v49._countAndFlagsBits, (uint64_t)v49._object);
          if ((v58 & 1) != (v60 & 1)) {
            goto LABEL_59;
          }
          unint64_t v54 = v59;
        }
        uint64_t v61 = v79;
        v62 = v82;
        if (v58)
        {
          sub_10084EED4(v51, v82[7] + v54 * v79);
        }
        else
        {
          v82[(v54 >> 6) + 8] |= 1 << v54;
          *(Swift::String *)(v62[6] + 16 * v54) = v49;
          sub_10084EE10(v51, v62[7] + v54 * v61);
          uint64_t v63 = v62[2];
          BOOL v22 = __OFADD__(v63, 1);
          uint64_t v64 = v63 + 1;
          if (v22) {
            goto LABEL_53;
          }
          v62[2] = v64;
          swift_bridgeObjectRetain();
        }
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        uint64_t v14 = v70;
        sub_10084EE74((uint64_t)v70);
        swift_bridgeObjectRelease();
        a1 = v62;
        unint64_t v19 = v77;
        int64_t v20 = v78;
        break;
      case 2uLL:
        uint64_t v40 = *(void *)(v36 + 16);
        uint64_t v39 = *(void *)(v36 + 24);
        uint64_t v38 = v39 - v40;
        if (!__OFSUB__(v39, v40)) {
          goto LABEL_26;
        }
        goto LABEL_57;
      case 3uLL:
        goto LABEL_27;
      default:
        uint64_t v38 = BYTE6(v37);
        goto LABEL_27;
    }
  }
LABEL_50:
  swift_release();
  return a1;
}

unint64_t sub_1010058C8(char a1)
{
  unint64_t result = 0x4E6E6F6973736573;
  switch(a1)
  {
    case 1:
      unint64_t result = 12645;
      break;
    case 2:
      unint64_t result = 0xD000000000000013;
      break;
    case 3:
      unint64_t result = 0x74617453636E7973;
      break;
    case 4:
      unint64_t result = 0x754E6C6169726573;
      break;
    case 5:
      unint64_t result = 0x6169726553746C61;
      break;
    case 6:
      unint64_t result = 0x644974726170;
      break;
    case 7:
      unint64_t result = 0x6F636165426D756ELL;
      break;
    case 8:
      unint64_t result = 0xD000000000000012;
      break;
    case 9:
      unint64_t result = 0xD00000000000001BLL;
      break;
    case 10:
      unint64_t result = 0x6E55646572616873;
      break;
    case 11:
      unint64_t result = 0x314B64656573;
      break;
    case 12:
      unint64_t result = 0x7374726563;
      break;
    case 13:
      unint64_t result = 7500643;
      break;
    case 14:
      unint64_t result = 0x636E6F4E68747561;
      break;
    case 15:
      unint64_t result = 0x726F737365636361;
      break;
    case 16:
      unint64_t result = 0x7461747365747461;
      break;
    case 17:
      unint64_t result = 0xD000000000000014;
      break;
    case 18:
      unint64_t result = 0xD000000000000011;
      break;
    case 19:
      unint64_t result = 0x69634572656E776FLL;
      break;
    case 20:
      unint64_t result = 0x69684372656E776FLL;
      break;
    case 21:
      unint64_t result = 0x7372655663657073;
      break;
    case 22:
      unint64_t result = 0x657261776D726966;
      break;
    case 23:
      unint64_t result = 0x49746375646F7270;
      break;
    case 24:
      unint64_t result = 0x6449726F646E6576;
      break;
    case 25:
      unint64_t result = 0xD000000000000015;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t sub_101005C10(void *a1)
{
  uint64_t v3 = v1;
  uint64_t v5 = sub_10000588C(&qword_101666DE0);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v8 = (char *)&v10 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10001CD44(a1, a1[3]);
  sub_10100906C();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  long long v12 = *v3;
  char v11 = 0;
  sub_100037BB4();
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  if (!v2)
  {
    long long v12 = v3[1];
    char v11 = 1;
    KeyedEncodingContainer.encode<A>(_:forKey:)();
    sub_10001D608((uint64_t)(v3 + 2), (uint64_t)v13, &qword_101669360);
    sub_10001D608((uint64_t)v13, (uint64_t)&v12, &qword_101669360);
    char v11 = 2;
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)();
    LOBYTE(v12) = 3;
    KeyedEncodingContainer.encode(_:forKey:)();
    long long v12 = *(long long *)((char *)v3 + 56);
    char v11 = 4;
    KeyedEncodingContainer.encode<A>(_:forKey:)();
    long long v12 = *(long long *)((char *)v3 + 72);
    char v11 = 5;
    KeyedEncodingContainer.encode<A>(_:forKey:)();
    LOBYTE(v12) = 6;
    KeyedEncodingContainer.encode(_:forKey:)();
    LOBYTE(v12) = 7;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
    *(void *)&long long v12 = *((void *)v3 + 14);
    char v11 = 8;
    sub_10000588C((uint64_t *)&unk_10164DBD0);
    sub_10025F9B4();
    KeyedEncodingContainer.encode<A>(_:forKey:)();
    *(void *)&long long v12 = *((void *)v3 + 15);
    char v11 = 9;
    sub_10000588C(&qword_10164F080);
    sub_10084F844();
    KeyedEncodingContainer.encode<A>(_:forKey:)();
    LOBYTE(v12) = 10;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
    long long v12 = v3[9];
    char v11 = 11;
    KeyedEncodingContainer.encode<A>(_:forKey:)();
    long long v12 = v3[10];
    char v11 = 12;
    KeyedEncodingContainer.encode<A>(_:forKey:)();
    long long v12 = v3[11];
    char v11 = 13;
    KeyedEncodingContainer.encode<A>(_:forKey:)();
    long long v12 = v3[12];
    char v11 = 14;
    KeyedEncodingContainer.encode<A>(_:forKey:)();
    long long v12 = v3[13];
    char v11 = 15;
    KeyedEncodingContainer.encode<A>(_:forKey:)();
    long long v12 = v3[14];
    char v11 = 16;
    KeyedEncodingContainer.encode<A>(_:forKey:)();
    long long v12 = v3[15];
    char v11 = 17;
    KeyedEncodingContainer.encode<A>(_:forKey:)();
    LOBYTE(v12) = 18;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
    LOBYTE(v12) = 19;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
    LOBYTE(v12) = 20;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
    LOBYTE(v12) = 21;
    KeyedEncodingContainer.encode(_:forKey:)();
    LOBYTE(v12) = 22;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
    LOBYTE(v12) = 23;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
    LOBYTE(v12) = 24;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
    LOBYTE(v12) = 25;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
}

unint64_t sub_101006298()
{
  return sub_1010058C8(*v0);
}

uint64_t sub_1010062A0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_10100935C(a1, a2);
  *a3 = result;
  return result;
}

void sub_1010062C8(unsigned char *a1@<X8>)
{
  *a1 = 26;
}

uint64_t sub_1010062D4(uint64_t a1)
{
  unint64_t v2 = sub_10100906C();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_101006310(uint64_t a1)
{
  unint64_t v2 = sub_10100906C();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_10100634C(void *a1)
{
  memcpy(v4, v1, sizeof(v4));
  return sub_101005C10(a1);
}

uint64_t sub_1010063A0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v6 = *(void *)(a1 + 288);
  unint64_t v7 = *(void *)(a1 + 296);
  uint64_t v8 = *(void *)(a1 + 32);
  unint64_t v9 = *(void *)(a1 + 40);
  uint64_t v10 = *(void *)(a1 + 120);
  unint64_t v11 = *(void *)(a1 + 128);
  uint64_t v12 = *(void *)(a1 + 136);
  unint64_t v13 = *(void *)(a1 + 144);
  unint64_t v71 = *(void *)(a1 + 280);
  uint64_t v72 = *(void *)(a1 + 272);
  sub_1000361E0(v72, v71);
  unint64_t v69 = v7;
  uint64_t v70 = v6;
  sub_1000361E0(v6, v7);
  unint64_t v67 = v9;
  uint64_t v68 = v8;
  sub_100037A38(v8, v9);
  uint64_t v73 = v10;
  unint64_t v66 = v11;
  sub_1000361E0(v10, v11);
  unint64_t v64 = v13;
  uint64_t v65 = v12;
  sub_1000361E0(v12, v13);
  sub_1000362FC();
  uint64_t v52 = DataProtocol.intValue.getter();
  uint64_t v14 = *(void *)(a1 + 176);
  uint64_t v53 = *(void *)(a1 + 168);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  uint64_t v15 = (void *)sub_10092F63C((uint64_t)_swiftEmptyArrayStorage);
  uint64_t v51 = sub_101005234(v15, v14);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v16 = *(void *)(a1 + 208);
  unint64_t v76 = *(void *)(a1 + 216);
  uint64_t v17 = *(void *)(a1 + 224);
  unint64_t v18 = *(void *)(a1 + 232);
  uint64_t v20 = *(void *)(a1 + 104);
  unint64_t v19 = *(void *)(a1 + 112);
  uint64_t v21 = *(void *)(a1 + 240);
  uint64_t v22 = *(void *)(a1 + 16);
  unint64_t v23 = *(void *)(a1 + 24);
  uint64_t v78 = *(void *)a1;
  unint64_t v79 = *(void *)(a1 + 248);
  unint64_t v84 = *(void *)(a1 + 8);
  uint64_t v57 = *(void *)(a1 + 88);
  uint64_t v83 = *(void *)(a1 + 96);
  uint64_t v56 = *(void *)(a1 + 56);
  uint64_t v80 = *(void *)(a1 + 64);
  uint64_t v55 = *(void *)(a1 + 72);
  uint64_t v82 = *(void *)(a1 + 80);
  uint64_t v63 = *(void *)(a1 + 304);
  uint64_t v81 = *(void *)(a1 + 312);
  uint64_t v50 = *(void *)(a1 + 320);
  unint64_t v77 = *(void *)(a1 + 328);
  unint64_t v61 = *(void *)(a1 + 200);
  uint64_t v62 = *(void *)(a1 + 192);
  sub_1000361E0(v62, v61);
  sub_1000361E0(v16, v76);
  unint64_t v60 = v18;
  sub_1000361E0(v17, v18);
  uint64_t v59 = v20;
  uint64_t v24 = v20;
  uint64_t v25 = v81;
  unint64_t v58 = v19;
  sub_1000361E0(v24, v19);
  sub_1000361E0(v21, v79);
  unint64_t v54 = v23;
  sub_1000361E0(v22, v23);
  sub_1000361E0(v78, v84);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if (v77 >> 60 == 15)
  {
    uint64_t result = (uint64_t)sub_10099021C((uint64_t *)a1);
    uint64_t v27 = 0;
    uint64_t v28 = 0;
    uint64_t v29 = 0;
    uint64_t v30 = 0;
    uint64_t v32 = a2;
    uint64_t v31 = a3;
    uint64_t v33 = v63;
  }
  else
  {
    uint64_t v34 = sub_1002AA5D4(v50, v77);
    unint64_t v36 = v35;
    uint64_t v37 = Data.hexString.getter();
    uint64_t v48 = v38;
    uint64_t v49 = v37;
    sub_10001CFB8(v34, v36);
    switch(v77 >> 62)
    {
      case 1uLL:
        LODWORD(v39) = HIDWORD(v50) - v50;
        if (__OFSUB__(HIDWORD(v50), v50)) {
          goto LABEL_11;
        }
        uint64_t v39 = (int)v39;
LABEL_7:
        if (v39 < -1)
        {
          __break(1u);
LABEL_11:
          __break(1u);
LABEL_12:
          __break(1u);
          JUMPOUT(0x1010067ECLL);
        }
LABEL_8:
        uint64_t v43 = Data.subdata(in:)();
        unint64_t v45 = v44;
        uint64_t v27 = Data.hexString.getter();
        uint64_t v28 = v46;
        sub_10099021C((uint64_t *)a1);
        uint64_t result = sub_10001CFB8(v43, v45);
        uint64_t v32 = a2;
        uint64_t v31 = a3;
        uint64_t v25 = v81;
        uint64_t v33 = v63;
        uint64_t v30 = v48;
        uint64_t v29 = v49;
        break;
      case 2uLL:
        uint64_t v41 = *(void *)(v50 + 16);
        uint64_t v40 = *(void *)(v50 + 24);
        BOOL v42 = __OFSUB__(v40, v41);
        uint64_t v39 = v40 - v41;
        if (!v42) {
          goto LABEL_7;
        }
        goto LABEL_12;
      default:
        goto LABEL_8;
    }
  }
  *(void *)a4 = v72;
  *(void *)(a4 + 8) = v71;
  *(void *)(a4 + 16) = v70;
  *(void *)(a4 + 24) = v69;
  *(void *)(a4 + 32) = v68;
  *(void *)(a4 + 40) = v67;
  *(void *)(a4 + 64) = v66;
  *(void *)(a4 + 72) = v65;
  *(void *)(a4 + 80) = v64;
  *(void *)(a4 + 88) = v52;
  *(void *)(a4 + 112) = v53;
  *(void *)(a4 + 120) = v51;
  *(void *)(a4 + 48) = 0;
  *(void *)(a4 + 56) = v73;
  *(void *)(a4 + 96) = *(void *)(a1 + 152);
  uint64_t v47 = *(void *)(a1 + 184);
  *(unsigned char *)(a4 + 104) = *(unsigned char *)(a1 + 160);
  *(void *)(a4 + 128) = v47;
  *(unsigned char *)(a4 + 136) = 0;
  *(void *)(a4 + 144) = v62;
  *(void *)(a4 + 152) = v61;
  *(void *)(a4 + 160) = v16;
  *(void *)(a4 + 168) = v76;
  *(void *)(a4 + 176) = v17;
  *(void *)(a4 + 184) = v60;
  *(void *)(a4 + 192) = v59;
  *(void *)(a4 + 200) = v58;
  *(void *)(a4 + 208) = v22;
  *(void *)(a4 + 216) = v54;
  *(void *)(a4 + 224) = v21;
  *(void *)(a4 + 232) = v79;
  *(void *)(a4 + 240) = v78;
  *(void *)(a4 + 248) = v84;
  *(void *)(a4 + 256) = v57;
  *(void *)(a4 + 264) = v83;
  *(void *)(a4 + 272) = v56;
  *(void *)(a4 + 280) = v80;
  *(void *)(a4 + 288) = v55;
  *(void *)(a4 + 296) = v82;
  *(void *)(a4 + 304) = 0x302E302E33;
  *(void *)(a4 + 312) = 0xE500000000000000;
  *(void *)(a4 + 320) = v33;
  *(void *)(a4 + 328) = v25;
  *(void *)(a4 + 336) = v29;
  *(void *)(a4 + 344) = v30;
  *(void *)(a4 + 352) = v27;
  *(void *)(a4 + 360) = v28;
  *(void *)(a4 + 368) = v32;
  *(void *)(a4 + 376) = v31;
  return result;
}

uint64_t sub_1010067FC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v4[204] = a4;
  v4[203] = a3;
  v4[202] = a2;
  v4[201] = a1;
  uint64_t v5 = type metadata accessor for HashAlgorithm();
  v4[205] = v5;
  v4[206] = *(void *)(v5 - 8);
  v4[207] = swift_task_alloc();
  uint64_t v6 = type metadata accessor for Locale();
  v4[208] = v6;
  v4[209] = *(void *)(v6 - 8);
  v4[210] = swift_task_alloc();
  uint64_t v7 = type metadata accessor for Date();
  v4[211] = v7;
  v4[212] = *(void *)(v7 - 8);
  v4[213] = swift_task_alloc();
  return _swift_task_switch(sub_101006980, 0, 0);
}

void sub_101006980()
{
  unint64_t v1 = sub_10092D8F8((uint64_t)_swiftEmptyArrayStorage);
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  sub_10016C0FC(1702195828, 0xE400000000000000, 0xD00000000000001BLL, 0x80000001013F64C0, isUniquelyReferenced_nonNull_native);
  swift_bridgeObjectRelease();
  id v3 = [self currentDevice];
  if (!v3)
  {
    __break(1u);
    goto LABEL_13;
  }
  uint64_t v4 = v3;
  id v5 = [v3 serverFriendlyDescription];

  if (!v5)
  {
LABEL_13:
    __break(1u);
    return;
  }
  uint64_t v6 = v0[213];
  uint64_t v7 = v0[212];
  uint64_t v8 = v0[211];
  uint64_t v50 = v0[210];
  uint64_t v51 = v0[209];
  uint64_t v52 = v0[208];
  uint64_t v9 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v11 = v10;

  char v12 = swift_isUniquelyReferenced_nonNull_native();
  sub_10016C0FC(v9, v11, 0xD000000000000011, 0x80000001013F64E0, v12);
  unint64_t v13 = v1;
  swift_bridgeObjectRelease();
  Date.init()();
  uint64_t v14 = Date.epoch.getter();
  (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v6, v8);
  v0[198] = v14;
  uint64_t v15 = dispatch thunk of CustomStringConvertible.description.getter();
  uint64_t v17 = v16;
  char v18 = swift_isUniquelyReferenced_nonNull_native();
  sub_10016C0FC(v15, v17, 0xD000000000000015, 0x80000001013F6500, v18);
  swift_bridgeObjectRelease();
  v0[197] = 1;
  uint64_t v19 = dispatch thunk of CustomStringConvertible.description.getter();
  uint64_t v21 = v20;
  char v22 = swift_isUniquelyReferenced_nonNull_native();
  sub_10016C0FC(v19, v21, 0xD000000000000013, 0x80000001013F6520, v22);
  unint64_t v23 = v13;
  uint64_t v24 = swift_bridgeObjectRelease();
  uint64_t v25 = sub_100BCABFC(v24);
  uint64_t v27 = v26;
  char v28 = swift_isUniquelyReferenced_nonNull_native();
  sub_10016C0FC(v25, v27, 0x6567412D72657355, 0xEA0000000000746ELL, v28);
  swift_bridgeObjectRelease();
  static Locale.current.getter();
  uint64_t v29 = Locale.acceptLanguageCode.getter();
  uint64_t v31 = v30;
  (*(void (**)(uint64_t, uint64_t))(v51 + 8))(v50, v52);
  char v32 = swift_isUniquelyReferenced_nonNull_native();
  sub_10016C0FC(v29, v31, 0x4C2D747065636341, 0xEF65676175676E61, v32);
  unint64_t v33 = v23;
  swift_bridgeObjectRelease();
  if (qword_101637188 != -1) {
    swift_once();
  }
  uint64_t v34 = (void *)qword_10170EE68;
  id v35 = [self sharedInstance];
  unsigned int v36 = [v35 isInternalBuild];

  if (v36)
  {
    NSString v37 = String._bridgeToObjectiveC()();
    unsigned int v38 = [v34 BOOLForKey:v37];

    uint64_t v40 = v0 + 98;
    uint64_t v39 = v0 + 2;
    if (v38)
    {
      char v41 = swift_isUniquelyReferenced_nonNull_native();
      sub_10016C0FC(0x7465722C6C616572, 0xEF302D726F727245, 0xD000000000000012, 0x80000001013F6560, v41);
      swift_bridgeObjectRelease();
    }
  }
  else
  {
    uint64_t v40 = v0 + 98;
    uint64_t v39 = v0 + 2;
  }
  v0[214] = v33;
  uint64_t v42 = v0[203];
  uint64_t v43 = v0[202];
  unint64_t v44 = (uint64_t *)v0[201];
  sub_100990058(v44);
  sub_1010063A0((uint64_t)v44, v43, v42, (uint64_t)v39);
  type metadata accessor for JSONEncoder();
  swift_allocObject();
  JSONEncoder.init()();
  memcpy(v40, v39, 0x180uLL);
  sub_101008368();
  uint64_t v45 = dispatch thunk of JSONEncoder.encode<A>(_:)();
  v0[215] = v45;
  v0[216] = v46;
  uint64_t v47 = v45;
  unint64_t v48 = v46;
  swift_release();
  sub_1000361E0(v47, v48);
  uint64_t v53 = (void (__cdecl *)())((char *)&dword_10165AC70 + dword_10165AC70);
  uint64_t v49 = (void *)swift_task_alloc();
  v0[217] = v49;
  *uint64_t v49 = v0;
  v49[1] = sub_101007160;
  v53();
}

uint64_t sub_101007160(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *v2;
  *(void *)(v3 + 1744) = a1;
  *(void *)(v3 + 1752) = a2;
  swift_task_dealloc();
  return _swift_task_switch(sub_101007264, 0, 0);
}

uint64_t sub_101007264()
{
  unint64_t v1 = v0[219];
  uint64_t v2 = v0[218];
  unint64_t v3 = v0[216];
  uint64_t v4 = v0[215];
  uint64_t v5 = v0[207];
  uint64_t v6 = v0[206];
  uint64_t v7 = v0[205];
  v0[194] = v2;
  v0[195] = v1;
  sub_1000361E0(v4, v3);
  sub_1000361E0(v2, v1);
  sub_100A42CBC(v4, v3);
  sub_10001CFB8(v4, v3);
  sub_10001CFB8(v2, v1);
  v0[220] = v0[194];
  v0[221] = v0[195];
  (*(void (**)(uint64_t, void, uint64_t))(v6 + 104))(v5, enum case for HashAlgorithm.sha256(_:), v7);
  uint64_t v8 = Data.hash(algorithm:)();
  uint64_t v10 = v9;
  v0[222] = v8;
  v0[223] = v9;
  (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v5, v7);
  uint64_t v14 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))((char *)&dword_10165AC68 + dword_10165AC68);
  uint64_t v11 = (void *)swift_task_alloc();
  v0[224] = v11;
  *uint64_t v11 = v0;
  v11[1] = sub_101007400;
  uint64_t v12 = v0[204];
  return v14(v8, v10, v12);
}

uint64_t sub_101007400(uint64_t a1)
{
  uint64_t v4 = *(void **)v2;
  *(void *)(*(void *)v2 + 1800) = v1;
  swift_task_dealloc();
  if (v1)
  {
    uint64_t v5 = sub_101007BB0;
  }
  else
  {
    unint64_t v6 = v4[223];
    uint64_t v7 = v4[222];
    v4[226] = a1;
    sub_10001CFB8(v7, v6);
    uint64_t v5 = sub_101007530;
  }
  return _swift_task_switch(v5, 0, 0);
}

uint64_t sub_101007530()
{
  uint64_t v52 = v0;
  uint64_t isa = (uint64_t)v0[226].isa;
  Class v2 = v0[225].isa;
  uint64_t v3 = (uint64_t)v0[214].isa;
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  v51[0] = v3;
  sub_1001EE9C8(isa, (uint64_t)sub_100BD6E00, 0, isUniquelyReferenced_nonNull_native, v51);
  if (v2)
  {
    return swift_bridgeObjectRelease();
  }
  unint64_t v6 = (unint64_t)v0[221].isa;
  uint64_t v7 = (uint64_t)v0[220].isa;
  uint64_t v8 = v51[0];
  swift_bridgeObjectRelease();
  sub_10001CFB8(v7, v6);
  if (qword_101637320 != -1) {
LABEL_39:
  }
    swift_once();
  unint64_t v46 = (uint64_t *)&v0[2];
  uint64_t v47 = v0;
  __dst = v0 + 50;
  uint64_t v9 = type metadata accessor for Logger();
  sub_100010324(v9, (uint64_t)qword_10170F098);
  uint64_t v0 = Logger.logObject.getter();
  os_log_type_t v10 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v0, v10))
  {
    uint64_t v11 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v11 = 0;
    _os_log_impl((void *)&_mh_execute_header, v0, v10, "Pairing lock header:", v11, 2u);
    swift_slowDealloc();
  }

  uint64_t v48 = v8 + 64;
  uint64_t v12 = -1;
  uint64_t v13 = -1 << *(unsigned char *)(v8 + 32);
  if (-v13 < 64) {
    uint64_t v12 = ~(-1 << -(char)v13);
  }
  unint64_t v14 = v12 & *(void *)(v8 + 64);
  int64_t v49 = (unint64_t)(63 - v13) >> 6;
  swift_bridgeObjectRetain();
  for (int64_t i = 0; ; int64_t i = v50)
  {
    if (v14)
    {
      unint64_t v16 = __clz(__rbit64(v14));
      v14 &= v14 - 1;
      int64_t v50 = i;
      unint64_t v17 = v16 | (i << 6);
      goto LABEL_29;
    }
    int64_t v18 = i + 1;
    if (__OFADD__(i, 1))
    {
      __break(1u);
LABEL_38:
      __break(1u);
      goto LABEL_39;
    }
    uint64_t v0 = v47;
    if (v18 >= v49) {
      goto LABEL_31;
    }
    unint64_t v19 = *(void *)(v48 + 8 * v18);
    int64_t v20 = i + 1;
    if (!v19)
    {
      int64_t v20 = i + 2;
      if (i + 2 >= v49) {
        goto LABEL_31;
      }
      unint64_t v19 = *(void *)(v48 + 8 * v20);
      if (!v19)
      {
        int64_t v20 = i + 3;
        if (i + 3 >= v49) {
          goto LABEL_31;
        }
        unint64_t v19 = *(void *)(v48 + 8 * v20);
        if (!v19) {
          break;
        }
      }
    }
LABEL_28:
    unint64_t v14 = (v19 - 1) & v19;
    int64_t v50 = v20;
    unint64_t v17 = __clz(__rbit64(v19)) + (v20 << 6);
LABEL_29:
    uint64_t v22 = 16 * v17;
    unint64_t v23 = (uint64_t *)(*(void *)(v8 + 48) + v22);
    uint64_t v25 = *v23;
    unint64_t v24 = v23[1];
    uint64_t v26 = (uint64_t *)(*(void *)(v8 + 56) + v22);
    uint64_t v27 = *v26;
    unint64_t v28 = v26[1];
    swift_bridgeObjectRetain_n();
    swift_bridgeObjectRetain_n();
    uint64_t v29 = Logger.logObject.getter();
    os_log_type_t v30 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v29, v30))
    {
      uint64_t v31 = v8;
      uint64_t v32 = swift_slowAlloc();
      uint64_t v0 = swift_slowAlloc();
      v51[0] = (uint64_t)v0;
      *(_DWORD *)uint64_t v32 = 136315394;
      swift_bridgeObjectRetain();
      *(void *)(v32 + 4) = sub_1008FA0F0(v25, v24, v51);
      swift_bridgeObjectRelease_n();
      *(_WORD *)(v32 + 12) = 2080;
      swift_bridgeObjectRetain();
      *(void *)(v32 + 14) = sub_1008FA0F0(v27, v28, v51);
      swift_bridgeObjectRelease_n();
      _os_log_impl((void *)&_mh_execute_header, v29, v30, "%s: %s", (uint8_t *)v32, 0x16u);
      swift_arrayDestroy();
      swift_slowDealloc();
      uint64_t v8 = v31;
      swift_slowDealloc();
    }
    else
    {
      swift_bridgeObjectRelease_n();
      swift_bridgeObjectRelease_n();
    }
  }
  uint64_t v21 = i + 4;
  if (i + 4 < v49)
  {
    unint64_t v19 = *(void *)(v48 + 8 * v21);
    if (!v19)
    {
      while (1)
      {
        int64_t v20 = v21 + 1;
        if (__OFADD__(v21, 1)) {
          goto LABEL_38;
        }
        if (v20 >= v49) {
          goto LABEL_31;
        }
        unint64_t v19 = *(void *)(v48 + 8 * v20);
        ++v21;
        if (v19) {
          goto LABEL_28;
        }
      }
    }
    int64_t v20 = i + 4;
    goto LABEL_28;
  }
LABEL_31:
  swift_release();
  sub_1010083BC(v46);
  sub_1010083BC(v46);
  unint64_t v33 = Logger.logObject.getter();
  os_log_type_t v34 = static os_log_type_t.debug.getter();
  BOOL v35 = os_log_type_enabled(v33, v34);
  unint64_t v36 = (unint64_t)v47[216].isa;
  uint64_t v37 = (uint64_t)v47[215].isa;
  unsigned int v38 = (uint64_t *)v47[201].isa;
  if (v35)
  {
    uint64_t v39 = (uint8_t *)swift_slowAlloc();
    v51[0] = swift_slowAlloc();
    *(_DWORD *)uint64_t v39 = 136315138;
    uint64_t v0 = v47;
    memcpy(__dst, v46, 0x180uLL);
    sub_1010083BC(v46);
    uint64_t v40 = String.init<A>(describing:)();
    v47[199].uint64_t isa = (Class)sub_1008FA0F0(v40, v41, v51);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    sub_10100856C(v46);
    sub_10100856C(v46);
    _os_log_impl((void *)&_mh_execute_header, v33, v34, "Pairing lock body %s", v39, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
    swift_release();
    sub_10099021C(v38);

    sub_10001CFB8(v37, v36);
    sub_10100856C(v46);
  }
  else
  {
    sub_10100856C(v46);
    sub_10001CFB8(v37, v36);
    sub_10100856C(v46);
    sub_10100856C(v46);
    swift_release();
    sub_10099021C(v38);
  }
  Class v42 = v0[216].isa;
  Class v43 = v0[215].isa;
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  unint64_t v44 = (uint64_t (*)(uint64_t, Class, Class))v0[1].isa;
  return v44(v8, v43, v42);
}

uint64_t sub_101007BB0()
{
  uint64_t v56 = v0;
  int64_t v1 = (int64_t)v0;
  unint64_t v2 = v0[223];
  uint64_t v3 = v0[222];
  unint64_t v4 = v0[221];
  uint64_t v5 = v0[220];
  sub_10001CFB8(v3, v2);
  sub_10001CFB8(v5, v4);
  unint64_t v6 = (unint64_t)&qword_101637000;
  if (qword_101637320 == -1) {
    goto LABEL_2;
  }
  while (1)
  {
    swift_once();
LABEL_2:
    uint64_t v7 = type metadata accessor for Logger();
    sub_100010324(v7, (uint64_t)qword_10170F098);
    swift_errorRetain();
    swift_errorRetain();
    uint64_t v8 = Logger.logObject.getter();
    os_log_type_t v9 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v8, v9))
    {
      os_log_type_t v10 = (uint8_t *)swift_slowAlloc();
      uint64_t v11 = (void *)swift_slowAlloc();
      *(_DWORD *)os_log_type_t v10 = 138543362;
      swift_errorRetain();
      uint64_t v12 = _swift_stdlib_bridgeErrorToNSError();
      *(void *)(v1 + 1600) = v12;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *uint64_t v11 = v12;
      swift_errorRelease();
      swift_errorRelease();
      _os_log_impl((void *)&_mh_execute_header, v8, v9, "Failed to generate attestation header: %{public}@.", v10, 0xCu);
      sub_10000588C((uint64_t *)&unk_101638EA0);
      swift_arrayDestroy();
      swift_slowDealloc();
      unint64_t v6 = 0x101637000;
      swift_slowDealloc();

      swift_errorRelease();
    }
    else
    {
      swift_errorRelease();
      swift_errorRelease();
      swift_errorRelease();
    }
    uint64_t v51 = *(void *)(v1 + 1712);
    if (*(void *)(v6 + 800) != -1) {
      swift_once();
    }
    int64_t v49 = (void *)v1;
    int64_t v50 = (uint64_t *)(v1 + 16);
    __dst = (void *)(v1 + 400);
    sub_100010324(v7, (uint64_t)qword_10170F098);
    uint64_t v13 = Logger.logObject.getter();
    os_log_type_t v14 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v13, v14))
    {
      uint64_t v15 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v15 = 0;
      _os_log_impl((void *)&_mh_execute_header, v13, v14, "Pairing lock header:", v15, 2u);
      swift_slowDealloc();
    }
    uint64_t v47 = (uint64_t *)(v1 + 1592);

    uint64_t v16 = v51;
    uint64_t v52 = v51 + 64;
    uint64_t v17 = -1;
    uint64_t v18 = -1 << *(unsigned char *)(v51 + 32);
    if (-v18 < 64) {
      uint64_t v17 = ~(-1 << -(char)v18);
    }
    unint64_t v6 = v17 & *(void *)(v51 + 64);
    int64_t v53 = (unint64_t)(63 - v18) >> 6;
    swift_bridgeObjectRetain();
    int64_t v1 = 0;
    while (v6)
    {
      while (1)
      {
        unint64_t v19 = __clz(__rbit64(v6));
        v6 &= v6 - 1;
        unint64_t v20 = v19 | (v1 << 6);
LABEL_29:
        uint64_t v24 = 16 * v20;
        uint64_t v25 = (uint64_t *)(*(void *)(v16 + 48) + v24);
        uint64_t v27 = *v25;
        unint64_t v26 = v25[1];
        unint64_t v28 = (uint64_t *)(*(void *)(v16 + 56) + v24);
        uint64_t v29 = *v28;
        unint64_t v30 = v28[1];
        swift_bridgeObjectRetain_n();
        swift_bridgeObjectRetain_n();
        uint64_t v31 = Logger.logObject.getter();
        os_log_type_t v32 = static os_log_type_t.debug.getter();
        if (os_log_type_enabled(v31, v32)) {
          break;
        }
        swift_bridgeObjectRelease_n();
        swift_bridgeObjectRelease_n();

        if (!v6) {
          goto LABEL_15;
        }
      }
      uint64_t v33 = swift_slowAlloc();
      uint64_t v55 = swift_slowAlloc();
      *(_DWORD *)uint64_t v33 = 136315394;
      swift_bridgeObjectRetain();
      *(void *)(v33 + 4) = sub_1008FA0F0(v27, v26, &v55);
      swift_bridgeObjectRelease_n();
      *(_WORD *)(v33 + 12) = 2080;
      swift_bridgeObjectRetain();
      *(void *)(v33 + 14) = sub_1008FA0F0(v29, v30, &v55);
      swift_bridgeObjectRelease_n();
      _os_log_impl((void *)&_mh_execute_header, v31, v32, "%s: %s", (uint8_t *)v33, 0x16u);
      swift_arrayDestroy();
      swift_slowDealloc();
      uint64_t v16 = v51;
      swift_slowDealloc();
    }
LABEL_15:
    int64_t v21 = v1 + 1;
    if (__OFADD__(v1, 1))
    {
      __break(1u);
      goto LABEL_39;
    }
    if (v21 >= v53) {
      break;
    }
    unint64_t v22 = *(void *)(v52 + 8 * v21);
    ++v1;
    if (v22) {
      goto LABEL_28;
    }
    int64_t v1 = v21 + 1;
    if (v21 + 1 >= v53) {
      break;
    }
    unint64_t v22 = *(void *)(v52 + 8 * v1);
    if (v22) {
      goto LABEL_28;
    }
    int64_t v1 = v21 + 2;
    if (v21 + 2 >= v53) {
      break;
    }
    unint64_t v22 = *(void *)(v52 + 8 * v1);
    if (v22) {
      goto LABEL_28;
    }
    int64_t v23 = v21 + 3;
    if (v23 >= v53) {
      break;
    }
    unint64_t v22 = *(void *)(v52 + 8 * v23);
    if (v22)
    {
      int64_t v1 = v23;
LABEL_28:
      unint64_t v6 = (v22 - 1) & v22;
      unint64_t v20 = __clz(__rbit64(v22)) + (v1 << 6);
      goto LABEL_29;
    }
    while (1)
    {
      int64_t v1 = v23 + 1;
      if (__OFADD__(v23, 1)) {
        break;
      }
      if (v1 >= v53) {
        goto LABEL_32;
      }
      unint64_t v22 = *(void *)(v52 + 8 * v1);
      ++v23;
      if (v22) {
        goto LABEL_28;
      }
    }
LABEL_39:
    __break(1u);
  }
LABEL_32:
  swift_release();
  sub_1010083BC(v50);
  sub_1010083BC(v50);
  os_log_type_t v34 = Logger.logObject.getter();
  os_log_type_t v35 = static os_log_type_t.debug.getter();
  BOOL v36 = os_log_type_enabled(v34, v35);
  unint64_t v37 = v49[216];
  uint64_t v38 = v49[215];
  uint64_t v39 = (uint64_t *)v49[201];
  if (v36)
  {
    uint64_t v54 = (uint64_t *)v49[201];
    uint64_t v40 = (uint8_t *)swift_slowAlloc();
    uint64_t v55 = swift_slowAlloc();
    *(_DWORD *)uint64_t v40 = 136315138;
    memcpy(__dst, v50, 0x180uLL);
    sub_1010083BC(v50);
    uint64_t v41 = String.init<A>(describing:)();
    *uint64_t v47 = sub_1008FA0F0(v41, v42, &v55);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    sub_10100856C(v50);
    sub_10100856C(v50);
    _os_log_impl((void *)&_mh_execute_header, v34, v35, "Pairing lock body %s", v40, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    uint64_t v16 = v51;
    swift_slowDealloc();
    swift_release();
    sub_10099021C(v54);

    sub_10001CFB8(v38, v37);
    sub_10100856C(v50);
  }
  else
  {
    sub_10100856C(v50);
    sub_10001CFB8(v38, v37);
    sub_10100856C(v50);
    sub_10100856C(v50);
    swift_release();
    sub_10099021C(v39);
  }
  uint64_t v43 = v49[216];
  uint64_t v44 = v49[215];
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v45 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))v49[1];
  return v45(v16, v44, v43);
}

unint64_t sub_101008368()
{
  unint64_t result = qword_101666DD8;
  if (!qword_101666DD8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_101666DD8);
  }
  return result;
}

uint64_t *sub_1010083BC(uint64_t *a1)
{
  uint64_t v2 = a1[2];
  unint64_t v3 = a1[3];
  uint64_t v4 = a1[4];
  unint64_t v5 = a1[5];
  uint64_t v6 = a1[7];
  unint64_t v7 = a1[8];
  uint64_t v9 = a1[9];
  unint64_t v8 = a1[10];
  unint64_t v11 = a1[19];
  uint64_t v12 = a1[18];
  unint64_t v13 = a1[21];
  uint64_t v14 = a1[20];
  unint64_t v15 = a1[23];
  uint64_t v16 = a1[22];
  unint64_t v17 = a1[25];
  uint64_t v20 = a1[26];
  uint64_t v18 = a1[24];
  unint64_t v19 = a1[27];
  unint64_t v21 = a1[29];
  uint64_t v22 = a1[28];
  unint64_t v23 = a1[31];
  uint64_t v24 = a1[30];
  sub_1000361E0(*a1, a1[1]);
  sub_1000361E0(v2, v3);
  sub_100037A38(v4, v5);
  sub_1000361E0(v6, v7);
  sub_1000361E0(v9, v8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  sub_1000361E0(v12, v11);
  sub_1000361E0(v14, v13);
  sub_1000361E0(v16, v15);
  sub_1000361E0(v18, v17);
  sub_1000361E0(v20, v19);
  sub_1000361E0(v22, v21);
  sub_1000361E0(v24, v23);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t *sub_10100856C(uint64_t *a1)
{
  uint64_t v2 = a1[2];
  unint64_t v3 = a1[3];
  uint64_t v4 = a1[4];
  unint64_t v5 = a1[5];
  uint64_t v7 = a1[7];
  unint64_t v6 = a1[8];
  uint64_t v9 = a1[9];
  unint64_t v8 = a1[10];
  unint64_t v11 = a1[19];
  uint64_t v12 = a1[18];
  unint64_t v13 = a1[21];
  uint64_t v14 = a1[20];
  unint64_t v15 = a1[23];
  uint64_t v16 = a1[22];
  unint64_t v17 = a1[25];
  uint64_t v18 = a1[24];
  unint64_t v19 = a1[27];
  uint64_t v22 = a1[28];
  uint64_t v20 = a1[26];
  unint64_t v21 = a1[29];
  unint64_t v23 = a1[31];
  uint64_t v24 = a1[30];
  sub_10001CFB8(*a1, a1[1]);
  sub_10001CFB8(v2, v3);
  sub_100037A24(v4, v5);
  sub_10001CFB8(v7, v6);
  sub_10001CFB8(v9, v8);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_10001CFB8(v12, v11);
  sub_10001CFB8(v14, v13);
  sub_10001CFB8(v16, v15);
  sub_10001CFB8(v18, v17);
  sub_10001CFB8(v20, v19);
  sub_10001CFB8(v22, v21);
  sub_10001CFB8(v24, v23);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t destroy for AirPodsSWPairingLockCheckRequestContent(uint64_t *a1)
{
  sub_10001CFB8(*a1, a1[1]);
  sub_10001CFB8(a1[2], a1[3]);
  unint64_t v2 = a1[5];
  if (v2 >> 60 != 15) {
    sub_10001CFB8(a1[4], v2);
  }
  sub_10001CFB8(a1[7], a1[8]);
  sub_10001CFB8(a1[9], a1[10]);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_10001CFB8(a1[18], a1[19]);
  sub_10001CFB8(a1[20], a1[21]);
  sub_10001CFB8(a1[22], a1[23]);
  sub_10001CFB8(a1[24], a1[25]);
  sub_10001CFB8(a1[26], a1[27]);
  sub_10001CFB8(a1[28], a1[29]);
  sub_10001CFB8(a1[30], a1[31]);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for AirPodsSWPairingLockCheckRequestContent(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)a2;
  unint64_t v5 = *(void *)(a2 + 8);
  sub_1000361E0(*(void *)a2, v5);
  *(void *)a1 = v4;
  *(void *)(a1 + 8) = v5;
  uint64_t v6 = *(void *)(a2 + 16);
  unint64_t v7 = *(void *)(a2 + 24);
  sub_1000361E0(v6, v7);
  *(void *)(a1 + 16) = v6;
  *(void *)(a1 + 24) = v7;
  unint64_t v8 = (uint64_t *)(a2 + 32);
  unint64_t v9 = *(void *)(a2 + 40);
  if (v9 >> 60 == 15)
  {
    *(_OWORD *)(a1 + 32) = *(_OWORD *)v8;
  }
  else
  {
    uint64_t v10 = *v8;
    sub_1000361E0(*v8, *(void *)(a2 + 40));
    *(void *)(a1 + 32) = v10;
    *(void *)(a1 + 40) = v9;
  }
  uint64_t v11 = *(void *)(a2 + 56);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  unint64_t v12 = *(void *)(a2 + 64);
  sub_1000361E0(v11, v12);
  *(void *)(a1 + 56) = v11;
  *(void *)(a1 + 64) = v12;
  uint64_t v13 = *(void *)(a2 + 72);
  unint64_t v14 = *(void *)(a2 + 80);
  sub_1000361E0(v13, v14);
  *(void *)(a1 + 72) = v13;
  *(void *)(a1 + 80) = v14;
  uint64_t v15 = *(void *)(a2 + 96);
  *(void *)(a1 + 88) = *(void *)(a2 + 88);
  *(void *)(a1 + 96) = v15;
  *(unsigned char *)(a1 + 104) = *(unsigned char *)(a2 + 104);
  uint64_t v16 = *(void *)(a2 + 120);
  *(void *)(a1 + 112) = *(void *)(a2 + 112);
  *(void *)(a1 + 120) = v16;
  *(void *)(a1 + 128) = *(void *)(a2 + 128);
  *(unsigned char *)(a1 + 136) = *(unsigned char *)(a2 + 136);
  uint64_t v17 = *(void *)(a2 + 144);
  unint64_t v18 = *(void *)(a2 + 152);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  sub_1000361E0(v17, v18);
  *(void *)(a1 + 144) = v17;
  *(void *)(a1 + 152) = v18;
  uint64_t v19 = *(void *)(a2 + 160);
  unint64_t v20 = *(void *)(a2 + 168);
  sub_1000361E0(v19, v20);
  *(void *)(a1 + 160) = v19;
  *(void *)(a1 + 168) = v20;
  uint64_t v21 = *(void *)(a2 + 176);
  unint64_t v22 = *(void *)(a2 + 184);
  sub_1000361E0(v21, v22);
  *(void *)(a1 + 176) = v21;
  *(void *)(a1 + 184) = v22;
  uint64_t v23 = *(void *)(a2 + 192);
  unint64_t v24 = *(void *)(a2 + 200);
  sub_1000361E0(v23, v24);
  *(void *)(a1 + 192) = v23;
  *(void *)(a1 + 200) = v24;
  uint64_t v25 = *(void *)(a2 + 208);
  unint64_t v26 = *(void *)(a2 + 216);
  sub_1000361E0(v25, v26);
  *(void *)(a1 + 208) = v25;
  *(void *)(a1 + 216) = v26;
  uint64_t v27 = *(void *)(a2 + 224);
  unint64_t v28 = *(void *)(a2 + 232);
  sub_1000361E0(v27, v28);
  *(void *)(a1 + 224) = v27;
  *(void *)(a1 + 232) = v28;
  uint64_t v29 = *(void *)(a2 + 240);
  unint64_t v30 = *(void *)(a2 + 248);
  sub_1000361E0(v29, v30);
  *(void *)(a1 + 240) = v29;
  *(void *)(a1 + 248) = v30;
  uint64_t v31 = *(void *)(a2 + 264);
  *(void *)(a1 + 256) = *(void *)(a2 + 256);
  *(void *)(a1 + 264) = v31;
  uint64_t v32 = *(void *)(a2 + 280);
  *(void *)(a1 + 272) = *(void *)(a2 + 272);
  *(void *)(a1 + 280) = v32;
  uint64_t v33 = *(void *)(a2 + 296);
  *(void *)(a1 + 288) = *(void *)(a2 + 288);
  *(void *)(a1 + 296) = v33;
  uint64_t v34 = *(void *)(a2 + 312);
  *(void *)(a1 + 304) = *(void *)(a2 + 304);
  *(void *)(a1 + 312) = v34;
  uint64_t v35 = *(void *)(a2 + 328);
  *(void *)(a1 + 320) = *(void *)(a2 + 320);
  *(void *)(a1 + 328) = v35;
  uint64_t v36 = *(void *)(a2 + 344);
  *(void *)(a1 + 336) = *(void *)(a2 + 336);
  *(void *)(a1 + 344) = v36;
  uint64_t v37 = *(void *)(a2 + 360);
  *(void *)(a1 + 352) = *(void *)(a2 + 352);
  *(void *)(a1 + 360) = v37;
  uint64_t v38 = *(void *)(a2 + 368);
  uint64_t v39 = *(void *)(a2 + 376);
  *(void *)(a1 + 368) = v38;
  *(void *)(a1 + 376) = v39;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for AirPodsSWPairingLockCheckRequestContent(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)a2;
  unint64_t v5 = *(void *)(a2 + 8);
  sub_1000361E0(*(void *)a2, v5);
  uint64_t v6 = *(void *)a1;
  unint64_t v7 = *(void *)(a1 + 8);
  *(void *)a1 = v4;
  *(void *)(a1 + 8) = v5;
  sub_10001CFB8(v6, v7);
  uint64_t v8 = *(void *)(a2 + 16);
  unint64_t v9 = *(void *)(a2 + 24);
  sub_1000361E0(v8, v9);
  uint64_t v10 = *(void *)(a1 + 16);
  unint64_t v11 = *(void *)(a1 + 24);
  *(void *)(a1 + 16) = v8;
  *(void *)(a1 + 24) = v9;
  sub_10001CFB8(v10, v11);
  unint64_t v12 = (uint64_t *)(a2 + 32);
  unint64_t v13 = *(void *)(a2 + 40);
  if (*(void *)(a1 + 40) >> 60 != 15)
  {
    if (v13 >> 60 != 15)
    {
      uint64_t v15 = *v12;
      sub_1000361E0(*v12, *(void *)(a2 + 40));
      uint64_t v16 = *(void *)(a1 + 32);
      unint64_t v17 = *(void *)(a1 + 40);
      *(void *)(a1 + 32) = v15;
      *(void *)(a1 + 40) = v13;
      sub_10001CFB8(v16, v17);
      goto LABEL_8;
    }
    sub_1001356D0(a1 + 32);
    goto LABEL_6;
  }
  if (v13 >> 60 == 15)
  {
LABEL_6:
    *(_OWORD *)(a1 + 32) = *(_OWORD *)v12;
    goto LABEL_8;
  }
  uint64_t v14 = *v12;
  sub_1000361E0(*v12, *(void *)(a2 + 40));
  *(void *)(a1 + 32) = v14;
  *(void *)(a1 + 40) = v13;
LABEL_8:
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  uint64_t v18 = *(void *)(a2 + 56);
  unint64_t v19 = *(void *)(a2 + 64);
  sub_1000361E0(v18, v19);
  uint64_t v20 = *(void *)(a1 + 56);
  unint64_t v21 = *(void *)(a1 + 64);
  *(void *)(a1 + 56) = v18;
  *(void *)(a1 + 64) = v19;
  sub_10001CFB8(v20, v21);
  uint64_t v22 = *(void *)(a2 + 72);
  unint64_t v23 = *(void *)(a2 + 80);
  sub_1000361E0(v22, v23);
  uint64_t v24 = *(void *)(a1 + 72);
  unint64_t v25 = *(void *)(a1 + 80);
  *(void *)(a1 + 72) = v22;
  *(void *)(a1 + 80) = v23;
  sub_10001CFB8(v24, v25);
  *(void *)(a1 + 88) = *(void *)(a2 + 88);
  uint64_t v26 = *(void *)(a2 + 96);
  *(unsigned char *)(a1 + 104) = *(unsigned char *)(a2 + 104);
  *(void *)(a1 + 96) = v26;
  *(void *)(a1 + 112) = *(void *)(a2 + 112);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 120) = *(void *)(a2 + 120);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v27 = *(void *)(a2 + 128);
  *(unsigned char *)(a1 + 136) = *(unsigned char *)(a2 + 136);
  *(void *)(a1 + 128) = v27;
  uint64_t v28 = *(void *)(a2 + 144);
  unint64_t v29 = *(void *)(a2 + 152);
  sub_1000361E0(v28, v29);
  uint64_t v30 = *(void *)(a1 + 144);
  unint64_t v31 = *(void *)(a1 + 152);
  *(void *)(a1 + 144) = v28;
  *(void *)(a1 + 152) = v29;
  sub_10001CFB8(v30, v31);
  uint64_t v32 = *(void *)(a2 + 160);
  unint64_t v33 = *(void *)(a2 + 168);
  sub_1000361E0(v32, v33);
  uint64_t v34 = *(void *)(a1 + 160);
  unint64_t v35 = *(void *)(a1 + 168);
  *(void *)(a1 + 160) = v32;
  *(void *)(a1 + 168) = v33;
  sub_10001CFB8(v34, v35);
  uint64_t v36 = *(void *)(a2 + 176);
  unint64_t v37 = *(void *)(a2 + 184);
  sub_1000361E0(v36, v37);
  uint64_t v38 = *(void *)(a1 + 176);
  unint64_t v39 = *(void *)(a1 + 184);
  *(void *)(a1 + 176) = v36;
  *(void *)(a1 + 184) = v37;
  sub_10001CFB8(v38, v39);
  uint64_t v40 = *(void *)(a2 + 192);
  unint64_t v41 = *(void *)(a2 + 200);
  sub_1000361E0(v40, v41);
  uint64_t v42 = *(void *)(a1 + 192);
  unint64_t v43 = *(void *)(a1 + 200);
  *(void *)(a1 + 192) = v40;
  *(void *)(a1 + 200) = v41;
  sub_10001CFB8(v42, v43);
  uint64_t v44 = *(void *)(a2 + 208);
  unint64_t v45 = *(void *)(a2 + 216);
  sub_1000361E0(v44, v45);
  uint64_t v46 = *(void *)(a1 + 208);
  unint64_t v47 = *(void *)(a1 + 216);
  *(void *)(a1 + 208) = v44;
  *(void *)(a1 + 216) = v45;
  sub_10001CFB8(v46, v47);
  uint64_t v48 = *(void *)(a2 + 224);
  unint64_t v49 = *(void *)(a2 + 232);
  sub_1000361E0(v48, v49);
  uint64_t v50 = *(void *)(a1 + 224);
  unint64_t v51 = *(void *)(a1 + 232);
  *(void *)(a1 + 224) = v48;
  *(void *)(a1 + 232) = v49;
  sub_10001CFB8(v50, v51);
  uint64_t v52 = *(void *)(a2 + 240);
  unint64_t v53 = *(void *)(a2 + 248);
  sub_1000361E0(v52, v53);
  uint64_t v54 = *(void *)(a1 + 240);
  unint64_t v55 = *(void *)(a1 + 248);
  *(void *)(a1 + 240) = v52;
  *(void *)(a1 + 248) = v53;
  sub_10001CFB8(v54, v55);
  *(void *)(a1 + 256) = *(void *)(a2 + 256);
  *(void *)(a1 + 264) = *(void *)(a2 + 264);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 272) = *(void *)(a2 + 272);
  *(void *)(a1 + 280) = *(void *)(a2 + 280);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 288) = *(void *)(a2 + 288);
  *(void *)(a1 + 296) = *(void *)(a2 + 296);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 304) = *(void *)(a2 + 304);
  *(void *)(a1 + 312) = *(void *)(a2 + 312);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 320) = *(void *)(a2 + 320);
  *(void *)(a1 + 328) = *(void *)(a2 + 328);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 336) = *(void *)(a2 + 336);
  *(void *)(a1 + 344) = *(void *)(a2 + 344);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 352) = *(void *)(a2 + 352);
  *(void *)(a1 + 360) = *(void *)(a2 + 360);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 368) = *(void *)(a2 + 368);
  *(void *)(a1 + 376) = *(void *)(a2 + 376);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

void *initializeWithTake for AirPodsSWPairingLockCheckRequestContent(void *a1, const void *a2)
{
  return memcpy(a1, a2, 0x180uLL);
}

uint64_t assignWithTake for AirPodsSWPairingLockCheckRequestContent(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)a1;
  unint64_t v5 = *(void *)(a1 + 8);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  sub_10001CFB8(v4, v5);
  uint64_t v6 = *(void *)(a1 + 16);
  unint64_t v7 = *(void *)(a1 + 24);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  sub_10001CFB8(v6, v7);
  uint64_t v8 = (void *)(a2 + 32);
  unint64_t v9 = *(void *)(a1 + 40);
  if (v9 >> 60 != 15)
  {
    unint64_t v10 = *(void *)(a2 + 40);
    if (v10 >> 60 != 15)
    {
      uint64_t v11 = *(void *)(a1 + 32);
      *(void *)(a1 + 32) = *v8;
      *(void *)(a1 + 40) = v10;
      sub_10001CFB8(v11, v9);
      goto LABEL_6;
    }
    sub_1001356D0(a1 + 32);
  }
  *(_OWORD *)(a1 + 32) = *(_OWORD *)v8;
LABEL_6:
  uint64_t v12 = *(void *)(a2 + 64);
  uint64_t v13 = *(void *)(a1 + 56);
  unint64_t v14 = *(void *)(a1 + 64);
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  *(void *)(a1 + 64) = v12;
  sub_10001CFB8(v13, v14);
  uint64_t v15 = *(void *)(a1 + 72);
  unint64_t v16 = *(void *)(a1 + 80);
  *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 72);
  sub_10001CFB8(v15, v16);
  uint64_t v17 = *(void *)(a2 + 96);
  *(void *)(a1 + 88) = *(void *)(a2 + 88);
  *(void *)(a1 + 96) = v17;
  *(unsigned char *)(a1 + 104) = *(unsigned char *)(a2 + 104);
  *(void *)(a1 + 112) = *(void *)(a2 + 112);
  swift_bridgeObjectRelease();
  *(void *)(a1 + 120) = *(void *)(a2 + 120);
  swift_bridgeObjectRelease();
  *(void *)(a1 + 128) = *(void *)(a2 + 128);
  *(unsigned char *)(a1 + 136) = *(unsigned char *)(a2 + 136);
  uint64_t v18 = *(void *)(a1 + 144);
  unint64_t v19 = *(void *)(a1 + 152);
  *(_OWORD *)(a1 + 144) = *(_OWORD *)(a2 + 144);
  sub_10001CFB8(v18, v19);
  uint64_t v20 = *(void *)(a1 + 160);
  unint64_t v21 = *(void *)(a1 + 168);
  *(_OWORD *)(a1 + 160) = *(_OWORD *)(a2 + 160);
  sub_10001CFB8(v20, v21);
  uint64_t v22 = *(void *)(a1 + 176);
  unint64_t v23 = *(void *)(a1 + 184);
  *(_OWORD *)(a1 + 176) = *(_OWORD *)(a2 + 176);
  sub_10001CFB8(v22, v23);
  uint64_t v24 = *(void *)(a1 + 192);
  unint64_t v25 = *(void *)(a1 + 200);
  *(_OWORD *)(a1 + 192) = *(_OWORD *)(a2 + 192);
  sub_10001CFB8(v24, v25);
  uint64_t v26 = *(void *)(a1 + 208);
  unint64_t v27 = *(void *)(a1 + 216);
  *(_OWORD *)(a1 + 208) = *(_OWORD *)(a2 + 208);
  sub_10001CFB8(v26, v27);
  uint64_t v28 = *(void *)(a1 + 224);
  unint64_t v29 = *(void *)(a1 + 232);
  *(_OWORD *)(a1 + 224) = *(_OWORD *)(a2 + 224);
  sub_10001CFB8(v28, v29);
  uint64_t v30 = *(void *)(a1 + 240);
  unint64_t v31 = *(void *)(a1 + 248);
  *(_OWORD *)(a1 + 240) = *(_OWORD *)(a2 + 240);
  sub_10001CFB8(v30, v31);
  uint64_t v32 = *(void *)(a2 + 264);
  *(void *)(a1 + 256) = *(void *)(a2 + 256);
  *(void *)(a1 + 264) = v32;
  swift_bridgeObjectRelease();
  uint64_t v33 = *(void *)(a2 + 280);
  *(void *)(a1 + 272) = *(void *)(a2 + 272);
  *(void *)(a1 + 280) = v33;
  swift_bridgeObjectRelease();
  uint64_t v34 = *(void *)(a2 + 296);
  *(void *)(a1 + 288) = *(void *)(a2 + 288);
  *(void *)(a1 + 296) = v34;
  swift_bridgeObjectRelease();
  uint64_t v35 = *(void *)(a2 + 312);
  *(void *)(a1 + 304) = *(void *)(a2 + 304);
  *(void *)(a1 + 312) = v35;
  swift_bridgeObjectRelease();
  uint64_t v36 = *(void *)(a2 + 328);
  *(void *)(a1 + 320) = *(void *)(a2 + 320);
  *(void *)(a1 + 328) = v36;
  swift_bridgeObjectRelease();
  uint64_t v37 = *(void *)(a2 + 344);
  *(void *)(a1 + 336) = *(void *)(a2 + 336);
  *(void *)(a1 + 344) = v37;
  swift_bridgeObjectRelease();
  uint64_t v38 = *(void *)(a2 + 360);
  *(void *)(a1 + 352) = *(void *)(a2 + 352);
  *(void *)(a1 + 360) = v38;
  swift_bridgeObjectRelease();
  uint64_t v39 = *(void *)(a2 + 376);
  *(void *)(a1 + 368) = *(void *)(a2 + 368);
  *(void *)(a1 + 376) = v39;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for AirPodsSWPairingLockCheckRequestContent(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 384)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 112);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for AirPodsSWPairingLockCheckRequestContent(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 376) = 0;
    *(_OWORD *)(result + 248) = 0u;
    *(_OWORD *)(result + 232) = 0u;
    *(_OWORD *)(result + 216) = 0u;
    *(_OWORD *)(result + 200) = 0u;
    *(_OWORD *)(result + 184) = 0u;
    *(_OWORD *)(result + 168) = 0u;
    *(_OWORD *)(result + 152) = 0u;
    *(_OWORD *)(result + 136) = 0u;
    *(_OWORD *)(result + 120) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 360) = 0u;
    *(_OWORD *)(result + 344) = 0u;
    *(_OWORD *)(result + 328) = 0u;
    *(_OWORD *)(result + 312) = 0u;
    *(_OWORD *)(result + 296) = 0u;
    *(_OWORD *)(result + 280) = 0u;
    *(_OWORD *)(result + 264) = 0u;
    *(void *)unint64_t result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 384) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 112) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 384) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for AirPodsSWPairingLockCheckRequestContent()
{
  return &type metadata for AirPodsSWPairingLockCheckRequestContent;
}

ValueMetadata *type metadata accessor for AirPodsSWPairingLockCheckRequest()
{
  return &type metadata for AirPodsSWPairingLockCheckRequest;
}

unint64_t sub_10100906C()
{
  unint64_t result = qword_101666DE8;
  if (!qword_101666DE8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_101666DE8);
  }
  return result;
}

uint64_t getEnumTagSinglePayload for AirPodsSWPairingLockCheckRequestContent.CodingKeys(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0xE7) {
    goto LABEL_17;
  }
  if (a2 + 25 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 25) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 8)) - 25;
    }
  }
  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 8)) - 25;
    }
    int v4 = a1[1];
    if (a1[1]) {
      return (*a1 | (v4 << 8)) - 25;
    }
  }
LABEL_17:
  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 0x1A;
  int v8 = v6 - 26;
  if (!v7) {
    int v8 = -1;
  }
  return (v8 + 1);
}

unsigned char *storeEnumTagSinglePayload for AirPodsSWPairingLockCheckRequestContent.CodingKeys(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 25 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 25) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xE7) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xE6)
  {
    unsigned int v6 = ((a2 - 231) >> 8) + 1;
    *unint64_t result = a2 + 25;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x10100921CLL);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 25;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for AirPodsSWPairingLockCheckRequestContent.CodingKeys()
{
  return &type metadata for AirPodsSWPairingLockCheckRequestContent.CodingKeys;
}

unint64_t sub_101009258()
{
  unint64_t result = qword_101666DF0;
  if (!qword_101666DF0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_101666DF0);
  }
  return result;
}

unint64_t sub_1010092B0()
{
  unint64_t result = qword_101666DF8;
  if (!qword_101666DF8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_101666DF8);
  }
  return result;
}

unint64_t sub_101009308()
{
  unint64_t result = qword_101666E00;
  if (!qword_101666E00)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_101666E00);
  }
  return result;
}

uint64_t sub_10100935C(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 0x4E6E6F6973736573 && a2 == 0xEC00000065636E6FLL;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 12645 && a2 == 0xE200000000000000 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0xD000000000000013 && a2 == 0x80000001013EEBB0 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else if (a1 == 0x74617453636E7973 && a2 == 0xEA00000000007375 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 3;
  }
  else if (a1 == 0x754E6C6169726573 && a2 == 0xEC0000007265626DLL {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 4;
  }
  else if (a1 == 0x6169726553746C61 && a2 == 0xEF7265626D754E6CLL {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 5;
  }
  else if (a1 == 0x644974726170 && a2 == 0xE600000000000000 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 6;
  }
  else if (a1 == 0x6F636165426D756ELL && a2 == 0xEA0000000000736ELL {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 7;
  }
  else if (a1 == 0xD000000000000012 && a2 == 0x80000001013F4C90 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 8;
  }
  else if (a1 == 0xD00000000000001BLL && a2 == 0x8000000101408C00 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 9;
  }
  else if (a1 == 0x6E55646572616873 && a2 == 0xEA00000000007469 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 10;
  }
  else if (a1 == 0x314B64656573 && a2 == 0xE600000000000000 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 11;
  }
  else if (a1 == 0x7374726563 && a2 == 0xE500000000000000 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 12;
  }
  else if (a1 == 7500643 && a2 == 0xE300000000000000 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 13;
  }
  else if (a1 == 0x636E6F4E68747561 && a2 == 0xE900000000000065 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 14;
  }
  else if (a1 == 0x726F737365636361 && a2 == 0xED00006E67695379 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 15;
  }
  else if (a1 == 0x7461747365747461 && a2 == 0xEB000000006E6F69 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 16;
  }
  else if (a1 == 0xD000000000000014 && a2 == 0x8000000101408C20 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 17;
  }
  else if (a1 == 0xD000000000000011 && a2 == 0x80000001013F6580 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 18;
  }
  else if (a1 == 0x69634572656E776FLL && a2 == 0xE900000000000064 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 19;
  }
  else if (a1 == 0x69684372656E776FLL && a2 == 0xEB00000000644970 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 20;
  }
  else if (a1 == 0x7372655663657073 && a2 == 0xEB000000006E6F69 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 21;
  }
  else if (a1 == 0x657261776D726966 && a2 == 0xEF6E6F6973726556 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 22;
  }
  else if (a1 == 0x49746375646F7270 && a2 == 0xE900000000000064 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 23;
  }
  else if (a1 == 0x6449726F646E6576 && a2 == 0xE800000000000000 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 24;
  }
  else if (a1 == 0xD000000000000015 && a2 == 0x8000000101408C40)
  {
    swift_bridgeObjectRelease();
    return 25;
  }
  else
  {
    char v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v6) {
      return 25;
    }
    else {
      return 26;
    }
  }
}

uint64_t sub_101009E24@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v16 = a1 + 64;
  uint64_t v3 = 1 << *(unsigned char *)(a1 + 32);
  uint64_t v4 = -1;
  if (v3 < 64) {
    uint64_t v4 = ~(-1 << v3);
  }
  unint64_t v5 = v4 & *(void *)(a1 + 64);
  int64_t v17 = (unint64_t)(v3 + 63) >> 6;
  uint64_t result = swift_bridgeObjectRetain();
  int64_t v7 = 0;
  unint64_t v29 = (char *)&type metadata for Any + 8;
  while (1)
  {
    if (v5)
    {
      unint64_t v8 = __clz(__rbit64(v5));
      v5 &= v5 - 1;
      unint64_t v9 = v8 | (v7 << 6);
      goto LABEL_24;
    }
    int64_t v10 = v7 + 1;
    if (__OFADD__(v7, 1))
    {
      __break(1u);
      goto LABEL_29;
    }
    if (v10 >= v17) {
      goto LABEL_27;
    }
    unint64_t v11 = *(void *)(v16 + 8 * v10);
    ++v7;
    if (!v11)
    {
      int64_t v7 = v10 + 1;
      if (v10 + 1 >= v17) {
        goto LABEL_27;
      }
      unint64_t v11 = *(void *)(v16 + 8 * v7);
      if (!v11)
      {
        int64_t v7 = v10 + 2;
        if (v10 + 2 >= v17) {
          goto LABEL_27;
        }
        unint64_t v11 = *(void *)(v16 + 8 * v7);
        if (!v11)
        {
          int64_t v7 = v10 + 3;
          if (v10 + 3 >= v17) {
            goto LABEL_27;
          }
          unint64_t v11 = *(void *)(v16 + 8 * v7);
          if (!v11) {
            break;
          }
        }
      }
    }
LABEL_23:
    unint64_t v5 = (v11 - 1) & v11;
    unint64_t v9 = __clz(__rbit64(v11)) + (v7 << 6);
LABEL_24:
    sub_100173F4C(*(void *)(a1 + 48) + 40 * v9, (uint64_t)v26);
    sub_10012F428(*(void *)(a1 + 56) + 32 * v9, (uint64_t)v27 + 8);
    long long v23 = v27[0];
    long long v24 = v27[1];
    uint64_t v25 = v28;
    long long v21 = v26[0];
    long long v22 = v26[1];
    sub_100173F4C((uint64_t)&v21, (uint64_t)v19);
    sub_10012F428((uint64_t)&v23 + 8, (uint64_t)&v20);
    type metadata accessor for CKError(0);
    if (swift_dynamicCast())
    {
      sub_1004268DC((uint64_t)v19);
      sub_101020950(&qword_101638668, type metadata accessor for CKError);
      _BridgedStoredNSError.code.getter();

      if (v19[0] == 26)
      {
        uint64_t result = swift_release();
        long long v13 = v24;
        *(_OWORD *)(a2 + 32) = v23;
        *(_OWORD *)(a2 + 48) = v13;
        *(void *)(a2 + 64) = v25;
        long long v14 = v22;
        *(_OWORD *)a2 = v21;
        *(_OWORD *)(a2 + 16) = v14;
        return result;
      }
    }
    else
    {
      sub_1004268DC((uint64_t)v19);
    }
    uint64_t result = sub_10001DAB4((uint64_t)&v21, (uint64_t *)&unk_101651D10);
  }
  int64_t v12 = v10 + 4;
  if (v12 >= v17)
  {
LABEL_27:
    uint64_t result = swift_release();
    *(void *)(a2 + 64) = 0;
    *(_OWORD *)(a2 + 32) = 0u;
    *(_OWORD *)(a2 + 48) = 0u;
    *(_OWORD *)a2 = 0u;
    *(_OWORD *)(a2 + 16) = 0u;
    return result;
  }
  unint64_t v11 = *(void *)(v16 + 8 * v12);
  if (v11)
  {
    int64_t v7 = v12;
    goto LABEL_23;
  }
  while (1)
  {
    int64_t v7 = v12 + 1;
    if (__OFADD__(v12, 1)) {
      break;
    }
    if (v7 >= v17) {
      goto LABEL_27;
    }
    unint64_t v11 = *(void *)(v16 + 8 * v7);
    ++v12;
    if (v11) {
      goto LABEL_23;
    }
  }
LABEL_29:
  __break(1u);
  return result;
}

uint64_t sub_10100A12C(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for UUID();
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t v4 = __chkstk_darwin(v2);
  char v6 = (char *)&v25 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v4);
  unint64_t v8 = (char *)&v25 - v7;
  uint64_t v9 = sub_10000588C(&qword_101638CF0);
  uint64_t result = __chkstk_darwin(v9 - 8);
  int64_t v12 = (char *)&v25 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  int64_t v13 = 0;
  uint64_t v30 = a1;
  uint64_t v16 = *(void *)(a1 + 56);
  uint64_t v15 = a1 + 56;
  uint64_t v14 = v16;
  uint64_t v17 = 1 << *(unsigned char *)(v15 - 24);
  uint64_t v18 = -1;
  if (v17 < 64) {
    uint64_t v18 = ~(-1 << v17);
  }
  unint64_t v19 = v18 & v14;
  uint64_t v25 = v15;
  int64_t v26 = (unint64_t)(v17 + 63) >> 6;
  uint64_t v28 = v3 + 16;
  unint64_t v29 = (void (**)(char *, uint64_t, uint64_t, uint64_t))(v3 + 56);
  uint64_t v27 = v3 + 48;
  if ((v18 & v14) == 0) {
    goto LABEL_5;
  }
LABEL_4:
  unint64_t v20 = __clz(__rbit64(v19));
  v19 &= v19 - 1;
  for (unint64_t i = v20 | (v13 << 6); ; unint64_t i = __clz(__rbit64(v23)) + (v13 << 6))
  {
    (*(void (**)(char *, unint64_t, uint64_t))(v3 + 16))(v12, *(void *)(v30 + 48) + *(void *)(v3 + 72) * i, v2);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v3 + 56))(v12, 0, 1, v2);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v3 + 48))(v12, 1, v2) == 1) {
      return swift_release();
    }
    (*(void (**)(char *, char *, uint64_t))(v3 + 32))(v6, v12, v2);
    sub_100DC8CB8((uint64_t)v8, v6);
    uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v3 + 8))(v8, v2);
    if (v19) {
      goto LABEL_4;
    }
LABEL_5:
    int64_t v22 = v13 + 1;
    if (__OFADD__(v13, 1))
    {
      __break(1u);
      goto LABEL_27;
    }
    if (v22 >= v26) {
      goto LABEL_24;
    }
    unint64_t v23 = *(void *)(v25 + 8 * v22);
    ++v13;
    if (!v23)
    {
      int64_t v13 = v22 + 1;
      if (v22 + 1 >= v26) {
        goto LABEL_24;
      }
      unint64_t v23 = *(void *)(v25 + 8 * v13);
      if (!v23)
      {
        int64_t v13 = v22 + 2;
        if (v22 + 2 >= v26) {
          goto LABEL_24;
        }
        unint64_t v23 = *(void *)(v25 + 8 * v13);
        if (!v23)
        {
          int64_t v13 = v22 + 3;
          if (v22 + 3 >= v26) {
            goto LABEL_24;
          }
          unint64_t v23 = *(void *)(v25 + 8 * v13);
          if (!v23) {
            break;
          }
        }
      }
    }
LABEL_20:
    unint64_t v19 = (v23 - 1) & v23;
  }
  int64_t v24 = v22 + 4;
  if (v24 >= v26)
  {
LABEL_24:
    (*v29)(v12, 1, 1, v2);
    return swift_release();
  }
  unint64_t v23 = *(void *)(v25 + 8 * v24);
  if (v23)
  {
    int64_t v13 = v24;
    goto LABEL_20;
  }
  while (1)
  {
    int64_t v13 = v24 + 1;
    if (__OFADD__(v24, 1)) {
      break;
    }
    if (v13 >= v26) {
      goto LABEL_24;
    }
    unint64_t v23 = *(void *)(v25 + 8 * v13);
    ++v24;
    if (v23) {
      goto LABEL_20;
    }
  }
LABEL_27:
  __break(1u);
  return result;
}

uint64_t sub_10100A48C(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for RawSearchResult();
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t v4 = __chkstk_darwin(v2 - 8);
  char v6 = (unsigned __int8 *)&v24 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = __chkstk_darwin(v4);
  uint64_t v9 = (char *)&v24 - v8;
  uint64_t result = __chkstk_darwin(v7);
  int64_t v12 = (char *)&v24 - v11;
  int64_t v13 = 0;
  uint64_t v14 = *(void *)(a1 + 56);
  uint64_t v25 = a1 + 56;
  uint64_t v15 = 1 << *(unsigned char *)(a1 + 32);
  uint64_t v16 = -1;
  if (v15 < 64) {
    uint64_t v16 = ~(-1 << v15);
  }
  unint64_t v17 = v16 & v14;
  int64_t v18 = (unint64_t)(v15 + 63) >> 6;
  while (1)
  {
    if (v17)
    {
      unint64_t v19 = __clz(__rbit64(v17));
      v17 &= v17 - 1;
      unint64_t v20 = v19 | (v13 << 6);
      goto LABEL_5;
    }
    int64_t v21 = v13 + 1;
    if (__OFADD__(v13, 1))
    {
      __break(1u);
      goto LABEL_25;
    }
    if (v21 >= v18) {
      return swift_release();
    }
    unint64_t v22 = *(void *)(v25 + 8 * v21);
    ++v13;
    if (!v22)
    {
      int64_t v13 = v21 + 1;
      if (v21 + 1 >= v18) {
        return swift_release();
      }
      unint64_t v22 = *(void *)(v25 + 8 * v13);
      if (!v22)
      {
        int64_t v13 = v21 + 2;
        if (v21 + 2 >= v18) {
          return swift_release();
        }
        unint64_t v22 = *(void *)(v25 + 8 * v13);
        if (!v22)
        {
          int64_t v13 = v21 + 3;
          if (v21 + 3 >= v18) {
            return swift_release();
          }
          unint64_t v22 = *(void *)(v25 + 8 * v13);
          if (!v22) {
            break;
          }
        }
      }
    }
LABEL_22:
    unint64_t v17 = (v22 - 1) & v22;
    unint64_t v20 = __clz(__rbit64(v22)) + (v13 << 6);
LABEL_5:
    sub_101023F78(*(void *)(a1 + 48) + *(void *)(v3 + 72) * v20, (uint64_t)v12, (uint64_t (*)(void))type metadata accessor for RawSearchResult);
    sub_101024040((uint64_t)v12, (uint64_t)v6, (uint64_t (*)(void))type metadata accessor for RawSearchResult);
    sub_100DCCAA4((uint64_t)v9, v6);
    uint64_t result = sub_101023FE0((uint64_t)v9, (uint64_t (*)(void))type metadata accessor for RawSearchResult);
  }
  int64_t v23 = v21 + 4;
  if (v23 >= v18) {
    return swift_release();
  }
  unint64_t v22 = *(void *)(v25 + 8 * v23);
  if (v22)
  {
    int64_t v13 = v23;
    goto LABEL_22;
  }
  while (1)
  {
    int64_t v13 = v23 + 1;
    if (__OFADD__(v23, 1)) {
      break;
    }
    if (v13 >= v18) {
      return swift_release();
    }
    unint64_t v22 = *(void *)(v25 + 8 * v13);
    ++v23;
    if (v22) {
      goto LABEL_22;
    }
  }
LABEL_25:
  __break(1u);
  return result;
}

uint64_t sub_10100A6FC(uint64_t result)
{
  uint64_t v1 = result;
  if ((result & 0xC000000000000001) != 0)
  {
    __CocoaSet.makeIterator()();
    type metadata accessor for Characteristic();
    sub_101020950(&qword_101655B60, (void (*)(uint64_t))type metadata accessor for Characteristic);
    uint64_t result = Set.Iterator.init(_cocoa:)();
    uint64_t v1 = v17[1];
    uint64_t v16 = v17[2];
    uint64_t v2 = v17[3];
    uint64_t v3 = v17[4];
    unint64_t v4 = v17[5];
  }
  else
  {
    uint64_t v3 = 0;
    uint64_t v5 = -1 << *(unsigned char *)(result + 32);
    uint64_t v16 = result + 56;
    uint64_t v2 = ~v5;
    uint64_t v6 = -v5;
    if (v6 < 64) {
      uint64_t v7 = ~(-1 << v6);
    }
    else {
      uint64_t v7 = -1;
    }
    unint64_t v4 = v7 & *(void *)(result + 56);
  }
  int64_t v8 = (unint64_t)(v2 + 64) >> 6;
  if (v1 < 0) {
    goto LABEL_10;
  }
  while (1)
  {
    if (v4)
    {
      uint64_t v9 = (v4 - 1) & v4;
      unint64_t v10 = __clz(__rbit64(v4)) | (v3 << 6);
      uint64_t v11 = v3;
      goto LABEL_29;
    }
    int64_t v13 = v3 + 1;
    if (__OFADD__(v3, 1)) {
      break;
    }
    if (v13 >= v8) {
      return sub_100132C20();
    }
    unint64_t v14 = *(void *)(v16 + 8 * v13);
    uint64_t v11 = v3 + 1;
    if (!v14)
    {
      uint64_t v11 = v3 + 2;
      if (v3 + 2 >= v8) {
        return sub_100132C20();
      }
      unint64_t v14 = *(void *)(v16 + 8 * v11);
      if (!v14)
      {
        uint64_t v11 = v3 + 3;
        if (v3 + 3 >= v8) {
          return sub_100132C20();
        }
        unint64_t v14 = *(void *)(v16 + 8 * v11);
        if (!v14)
        {
          uint64_t v11 = v3 + 4;
          if (v3 + 4 >= v8) {
            return sub_100132C20();
          }
          unint64_t v14 = *(void *)(v16 + 8 * v11);
          if (!v14)
          {
            uint64_t v11 = v3 + 5;
            if (v3 + 5 >= v8) {
              return sub_100132C20();
            }
            unint64_t v14 = *(void *)(v16 + 8 * v11);
            if (!v14)
            {
              uint64_t v15 = v3 + 6;
              while (v8 != v15)
              {
                unint64_t v14 = *(void *)(v16 + 8 * v15++);
                if (v14)
                {
                  uint64_t v11 = v15 - 1;
                  goto LABEL_28;
                }
              }
              return sub_100132C20();
            }
          }
        }
      }
    }
LABEL_28:
    uint64_t v9 = (v14 - 1) & v14;
    unint64_t v10 = __clz(__rbit64(v14)) + (v11 << 6);
LABEL_29:
    uint64_t v12 = *(void *)(*(void *)(v1 + 48) + 8 * v10);
    swift_retain();
    if (!v12) {
      return sub_100132C20();
    }
    while (1)
    {
      sub_100DD3A38(v17, v12);
      uint64_t result = swift_release();
      uint64_t v3 = v11;
      unint64_t v4 = v9;
      if ((v1 & 0x8000000000000000) == 0) {
        break;
      }
LABEL_10:
      if (__CocoaSet.Iterator.next()())
      {
        type metadata accessor for Characteristic();
        swift_unknownObjectRetain();
        swift_dynamicCast();
        uint64_t v12 = v17[0];
        swift_unknownObjectRelease();
        uint64_t v11 = v3;
        uint64_t v9 = v4;
        if (v12) {
          continue;
        }
      }
      return sub_100132C20();
    }
  }
  __break(1u);
  return result;
}

void sub_10100A9A8(unint64_t a1)
{
  unint64_t v1 = a1;
  if ((a1 & 0xC000000000000001) != 0)
  {
    __CocoaSet.makeIterator()();
    sub_10001D4B0(0, (unint64_t *)&unk_10165F040);
    sub_10033149C(&qword_10164C950, (unint64_t *)&unk_10165F040);
    Set.Iterator.init(_cocoa:)();
    unint64_t v1 = (unint64_t)v17[1];
    uint64_t v16 = v17[2];
    uint64_t v2 = (uint64_t)v17[3];
    id v3 = v17[4];
    unint64_t v4 = (unint64_t)v17[5];
  }
  else
  {
    id v3 = 0;
    uint64_t v5 = -1 << *(unsigned char *)(a1 + 32);
    uint64_t v16 = (void *)(a1 + 56);
    uint64_t v2 = ~v5;
    uint64_t v6 = -v5;
    if (v6 < 64) {
      uint64_t v7 = ~(-1 << v6);
    }
    else {
      uint64_t v7 = -1;
    }
    unint64_t v4 = v7 & *(void *)(a1 + 56);
  }
  int64_t v8 = (unint64_t)(v2 + 64) >> 6;
  if ((v1 & 0x8000000000000000) != 0) {
    goto LABEL_10;
  }
  while (1)
  {
    if (v4)
    {
      uint64_t v9 = (v4 - 1) & v4;
      unint64_t v10 = __clz(__rbit64(v4)) | ((void)v3 << 6);
      uint64_t v11 = (char *)v3;
      goto LABEL_29;
    }
    uint64_t v13 = (uint64_t)v3 + 1;
    if (__OFADD__(v3, 1)) {
      break;
    }
    if (v13 >= v8) {
      goto LABEL_32;
    }
    unint64_t v14 = v16[v13];
    uint64_t v11 = (char *)v3 + 1;
    if (!v14)
    {
      uint64_t v11 = (char *)v3 + 2;
      if ((uint64_t)v3 + 2 >= v8) {
        goto LABEL_32;
      }
      unint64_t v14 = v16[(void)v11];
      if (!v14)
      {
        uint64_t v11 = (char *)v3 + 3;
        if ((uint64_t)v3 + 3 >= v8) {
          goto LABEL_32;
        }
        unint64_t v14 = v16[(void)v11];
        if (!v14)
        {
          uint64_t v11 = (char *)v3 + 4;
          if ((uint64_t)v3 + 4 >= v8) {
            goto LABEL_32;
          }
          unint64_t v14 = v16[(void)v11];
          if (!v14)
          {
            uint64_t v11 = (char *)v3 + 5;
            if ((uint64_t)v3 + 5 >= v8) {
              goto LABEL_32;
            }
            unint64_t v14 = v16[(void)v11];
            if (!v14)
            {
              uint64_t v15 = (char *)v3 + 6;
              while ((char *)v8 != v15)
              {
                unint64_t v14 = v16[(void)v15++];
                if (v14)
                {
                  uint64_t v11 = v15 - 1;
                  goto LABEL_28;
                }
              }
LABEL_32:
              sub_100132C20();
              return;
            }
          }
        }
      }
    }
LABEL_28:
    uint64_t v9 = (v14 - 1) & v14;
    unint64_t v10 = __clz(__rbit64(v14)) + ((void)v11 << 6);
LABEL_29:
    id v12 = *(id *)(*(void *)(v1 + 48) + 8 * v10);
    if (!v12) {
      goto LABEL_32;
    }
    while (1)
    {
      sub_100DD4CCC(v17, v12);

      id v3 = v11;
      unint64_t v4 = v9;
      if ((v1 & 0x8000000000000000) == 0) {
        break;
      }
LABEL_10:
      if (__CocoaSet.Iterator.next()())
      {
        sub_10001D4B0(0, (unint64_t *)&unk_10165F040);
        swift_unknownObjectRetain();
        swift_dynamicCast();
        id v12 = v17[0];
        swift_unknownObjectRelease();
        uint64_t v11 = (char *)v3;
        uint64_t v9 = v4;
        if (v12) {
          continue;
        }
      }
      goto LABEL_32;
    }
  }
  __break(1u);
}

void sub_10100AC74()
{
  unint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v17 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  unint64_t v4 = (char *)&v14 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = type metadata accessor for DispatchQoS();
  uint64_t v15 = *(void *)(v5 - 8);
  uint64_t v16 = v5;
  __chkstk_darwin(v5);
  uint64_t v7 = (char *)&v14 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  static os_log_type_t.default.getter();
  if (qword_101637268 != -1) {
    swift_once();
  }
  os_log(_:dso:log:_:_:)();
  swift_retain_n();
  QueueSynchronizer.conditionalSync<A>(_:)();
  int v8 = LOBYTE(aBlock[0]);
  static os_log_type_t.default.getter();
  if (qword_101637270 != -1) {
    swift_once();
  }
  sub_10000588C((uint64_t *)&unk_10163AD00);
  uint64_t v9 = swift_allocObject();
  *(_OWORD *)(v9 + 16) = xmmword_101342130;
  *(void *)(v9 + 56) = &type metadata for Bool;
  *(void *)(v9 + 64) = &protocol witness table for Bool;
  *(unsigned char *)(v9 + 32) = v8;
  os_log(_:dso:log:_:_:)();
  swift_bridgeObjectRelease();
  static os_log_type_t.default.getter();
  os_log(_:dso:log:_:_:)();
  if (v8)
  {
    swift_retain();
    id v10 = sub_10100BB0C();
    id v11 = [v10 privateCloudDatabase];

    sub_10101B52C(v11, 0, 0, (uint64_t)sub_101023D2C, v1);
    swift_release_n();
  }
  else
  {
    static os_log_type_t.default.getter();
    os_log(_:dso:log:_:_:)();
    id v12 = (void *)swift_allocObject();
    v12[2] = v0;
    v12[3] = sub_101023D1C;
    v12[4] = v0;
    aBlock[4] = sub_100B64438;
    aBlock[5] = v12;
    aBlock[0] = _NSConcreteStackBlock;
    aBlock[1] = 1107296256;
    aBlock[2] = sub_1004B5480;
    aBlock[3] = &unk_101602C10;
    uint64_t v13 = _Block_copy(aBlock);
    swift_retain_n();
    static DispatchQoS.unspecified.getter();
    int64_t v18 = _swiftEmptyArrayStorage;
    sub_101020950((unint64_t *)&qword_10163B7E0, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
    sub_10000588C((uint64_t *)&unk_10163F350);
    sub_100062734((unint64_t *)&qword_10163B7F0, (uint64_t *)&unk_10163F350);
    dispatch thunk of SetAlgebra.init<A>(_:)();
    OS_dispatch_queue.async(group:qos:flags:execute:)();
    _Block_release(v13);
    (*(void (**)(char *, uint64_t))(v17 + 8))(v4, v2);
    (*(void (**)(char *, uint64_t))(v15 + 8))(v7, v16);
    swift_release_n();
    swift_release();
  }
}

uint64_t sub_10100B19C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = v3;
  uint64_t v8 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v56 = *(void *)(v8 - 8);
  uint64_t v57 = v8;
  __chkstk_darwin(v8);
  uint64_t v54 = (char *)&v47 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v55 = type metadata accessor for DispatchQoS();
  uint64_t v53 = *(void *)(v55 - 8);
  __chkstk_darwin(v55);
  unint64_t v51 = (char *)&v47 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = type metadata accessor for CloudKitChangeSet(0);
  uint64_t v12 = *(void *)(v11 - 8);
  uint64_t v13 = *(void *)(v12 + 64);
  uint64_t v14 = __chkstk_darwin(v11 - 8);
  uint64_t v58 = (uint64_t)&v47 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = __chkstk_darwin(v14);
  uint64_t v50 = (uint64_t)&v47 - v16;
  uint64_t v17 = __chkstk_darwin(v15);
  unint64_t v19 = (char *)&v47 - v18;
  __chkstk_darwin(v17);
  int64_t v21 = (char *)&v47 - v20;
  sub_101023F78(a1, (uint64_t)&v47 - v20, type metadata accessor for CloudKitChangeSet);
  unint64_t v60 = v19;
  sub_101023F78((uint64_t)v21, (uint64_t)v19, type metadata accessor for CloudKitChangeSet);
  uint64_t v22 = *(unsigned __int8 *)(v12 + 80);
  uint64_t v23 = (v22 + 24) & ~v22;
  uint64_t v48 = v13 + 7;
  unint64_t v24 = (v13 + 7 + v23) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v49 = v22 | 7;
  uint64_t v25 = swift_allocObject();
  *(void *)(v25 + 16) = v4;
  sub_101024040((uint64_t)v21, v25 + v23, type metadata accessor for CloudKitChangeSet);
  uint64_t v59 = v25;
  int64_t v26 = (uint64_t *)(v25 + v24);
  uint64_t v52 = a2;
  *int64_t v26 = a2;
  v26[1] = a3;
  swift_retain_n();
  uint64_t v61 = a3;
  swift_retain_n();
  QueueSynchronizer.conditionalSync<A>(_:)();
  int v27 = aBlock;
  static os_log_type_t.default.getter();
  if (qword_101637270 != -1) {
    swift_once();
  }
  sub_10000588C((uint64_t *)&unk_10163AD00);
  uint64_t v28 = swift_allocObject();
  *(_OWORD *)(v28 + 16) = xmmword_101342130;
  *(void *)(v28 + 56) = &type metadata for Bool;
  *(void *)(v28 + 64) = &protocol witness table for Bool;
  *(unsigned char *)(v28 + 32) = v27;
  os_log(_:dso:log:_:_:)();
  swift_bridgeObjectRelease();
  static os_log_type_t.default.getter();
  if (v27)
  {
    os_log(_:dso:log:_:_:)();
    uint64_t v29 = (uint64_t)v60;
    uint64_t v30 = v50;
    sub_101023F78((uint64_t)v60, v50, type metadata accessor for CloudKitChangeSet);
    sub_101023F78(v30, v58, type metadata accessor for CloudKitChangeSet);
    uint64_t v31 = (v22 + 16) & ~v22;
    unint64_t v32 = (v48 + v31) & 0xFFFFFFFFFFFFFFF8;
    unint64_t v33 = (v32 + 23) & 0xFFFFFFFFFFFFFFF8;
    uint64_t v34 = swift_allocObject();
    sub_101024040(v30, v34 + v31, type metadata accessor for CloudKitChangeSet);
    uint64_t v35 = (uint64_t *)(v34 + v32);
    uint64_t v36 = v52;
    uint64_t v37 = v61;
    *uint64_t v35 = v52;
    v35[1] = v37;
    *(void *)(v34 + v33) = v4;
    uint64_t v38 = qword_1016371D8;
    swift_retain_n();
    swift_retain_n();
    if (v38 != -1) {
      swift_once();
    }
    uint64_t aBlock = 0x7365547265646E75;
    unint64_t v64 = 0xE900000000000074;
    SynchronousCache.cachedValue<A>(key:computeBlock:)();
    swift_bridgeObjectRelease();
    if (v62 == 1)
    {
      uint64_t v39 = v58;
      sub_101020148(v58, v36, v37);
      swift_release();
    }
    else
    {
      uint64_t v45 = type metadata accessor for Transaction();
      __chkstk_darwin(v45);
      *(&v47 - 4) = v4;
      *(&v47 - 3) = (uint64_t)sub_10102273C;
      *(&v47 - 2) = v34;
      static Transaction.named<A>(_:with:)();
      swift_release();
      uint64_t v39 = v58;
    }
    sub_101023FE0(v39, type metadata accessor for CloudKitChangeSet);
    swift_release();
    swift_release_n();
    swift_release();
  }
  else
  {
    os_log(_:dso:log:_:_:)();
    static os_log_type_t.default.getter();
    os_log(_:dso:log:_:_:)();
    uint64_t v40 = (void *)swift_allocObject();
    v40[2] = v4;
    v40[3] = sub_10102268C;
    v40[4] = v59;
    unint64_t v67 = sub_100B64438;
    uint64_t v68 = v40;
    uint64_t aBlock = (uint64_t)_NSConcreteStackBlock;
    unint64_t v64 = 1107296256;
    uint64_t v65 = sub_1004B5480;
    unint64_t v66 = &unk_101602080;
    unint64_t v41 = _Block_copy(&aBlock);
    swift_retain();
    swift_retain();
    uint64_t v42 = v51;
    static DispatchQoS.unspecified.getter();
    uint64_t v62 = _swiftEmptyArrayStorage;
    sub_101020950((unint64_t *)&qword_10163B7E0, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
    sub_10000588C((uint64_t *)&unk_10163F350);
    sub_100062734((unint64_t *)&qword_10163B7F0, (uint64_t *)&unk_10163F350);
    unint64_t v43 = v54;
    uint64_t v44 = v57;
    dispatch thunk of SetAlgebra.init<A>(_:)();
    OS_dispatch_queue.async(group:qos:flags:execute:)();
    _Block_release(v41);
    (*(void (**)(char *, uint64_t))(v56 + 8))(v43, v44);
    (*(void (**)(char *, uint64_t))(v53 + 8))(v42, v55);
    swift_release();
    swift_release();
    swift_release();
    uint64_t v29 = (uint64_t)v60;
  }
  sub_101023FE0(v29, type metadata accessor for CloudKitChangeSet);
  return swift_release();
}

uint64_t sub_10100B9F8()
{
  uint64_t v0 = type metadata accessor for Logger();
  sub_10001E384(v0, qword_10170F0E0);
  sub_100010324(v0, (uint64_t)qword_10170F0E0);
  return Logger.init(subsystem:category:)();
}

uint64_t sub_10100BA70@<X0>(uint64_t result@<X0>, unsigned char *a2@<X8>)
{
  *a2 = *(unsigned char *)(result + 72);
  return result;
}

uint64_t sub_10100BA7C()
{
  uint64_t v0 = type metadata accessor for DispatchTimeInterval();
  sub_10001E384(v0, qword_101666E08);
  *(void *)sub_100010324(v0, (uint64_t)qword_101666E08) = 120;
  unint64_t v1 = *(uint64_t (**)(void))(*(void *)(v0 - 8) + 104);

  return v1();
}

id sub_10100BB0C()
{
  unint64_t v1 = *(void **)(v0 + 192);
  if (v1)
  {
    id v2 = *(id *)(v0 + 192);
  }
  else
  {
    id v3 = sub_10100BB64();
    uint64_t v4 = *(void **)(v0 + 192);
    *(void *)(v0 + 192) = v3;
    id v2 = v3;

    unint64_t v1 = 0;
  }
  id v5 = v1;
  return v2;
}

id sub_10100BB64()
{
  id v0 = [self standardUserDefaults];
  id v1 = [self sharedInstance];
  unsigned int v2 = [v1 isInternalBuild];

  if (v2)
  {
    NSString v3 = String._bridgeToObjectiveC()();
    unsigned __int8 v4 = [v0 BOOLForKey:v3];

    if (v4)
    {
      uint64_t v5 = 2;
      goto LABEL_6;
    }
  }
  else
  {
  }
  uint64_t v5 = 1;
LABEL_6:
  id v6 = objc_allocWithZone((Class)CKContainerID);
  NSString v7 = String._bridgeToObjectiveC()();
  id v8 = [v6 initWithContainerIdentifier:v7 environment:v5];

  static os_log_type_t.default.getter();
  if (qword_101637268 != -1) {
    swift_once();
  }
  sub_10000588C((uint64_t *)&unk_10163AD00);
  uint64_t v9 = swift_allocObject();
  *(_OWORD *)(v9 + 16) = xmmword_101342130;
  *(void *)(v9 + 56) = sub_10001D4B0(0, &qword_101667408);
  *(void *)(v9 + 64) = sub_10033149C(&qword_101667410, &qword_101667408);
  *(void *)(v9 + 32) = v8;
  id v10 = v8;
  os_log(_:dso:log:_:_:)();
  swift_bridgeObjectRelease();
  id v11 = [objc_allocWithZone((Class)CKContainer) initWithContainerID:v10];

  return v11;
}

uint64_t sub_10100BDB4()
{
  id v1 = v0;
  uint64_t v48 = *v0;
  uint64_t v2 = sub_10000588C(&qword_10163FE70);
  uint64_t v62 = *(void *)(v2 - 8);
  uint64_t v63 = v2;
  __chkstk_darwin(v2);
  uint64_t v61 = (char *)&v44 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = sub_10000588C(&qword_10163C6C8);
  __chkstk_darwin(v4 - 8);
  unint64_t v60 = (char *)&v44 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v47 = sub_10000588C(&qword_1016673D0);
  uint64_t v46 = *(void *)(v47 - 8);
  __chkstk_darwin(v47);
  uint64_t v45 = (char *)&v44 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v57 = type metadata accessor for OS_dispatch_queue.Attributes();
  __chkstk_darwin(v57);
  uint64_t v56 = (char *)&v44 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for DispatchQoS();
  __chkstk_darwin(v8 - 8);
  uint64_t v55 = (char *)&v44 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = type metadata accessor for OS_dispatch_queue.AutoreleaseFrequency();
  uint64_t v53 = *(void *)(v10 - 8);
  uint64_t v54 = v10;
  __chkstk_darwin(v10);
  uint64_t v52 = (char *)&v44 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v49 = type metadata accessor for OS_dispatch_queue.SchedulerTimeType.Stride();
  uint64_t v12 = *(void *)(v49 - 8);
  __chkstk_darwin(v49);
  uint64_t v14 = (char *)&v44 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = sub_10000588C(&qword_1016673D8);
  uint64_t v16 = *(void *)(v15 - 8);
  uint64_t v50 = v15;
  uint64_t v51 = v16;
  __chkstk_darwin(v15);
  uint64_t v18 = (char *)&v44 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v66[0] = v0[19];
  swift_retain();
  static OS_dispatch_queue.SchedulerTimeType.Stride.seconds(_:)();
  uint64_t v65 = (void *)v0[4];
  uint64_t v19 = sub_10000588C(&qword_101644840);
  sub_10001D4B0(0, (unint64_t *)&qword_1016376E0);
  uint64_t v20 = sub_100062734(&qword_10165D758, &qword_101644840);
  sub_10033149C((unint64_t *)&qword_10166C020, (unint64_t *)&qword_1016376E0);
  uint64_t v58 = v20;
  uint64_t v59 = v19;
  Publisher.throttle<A>(for:scheduler:latest:)();
  (*(void (**)(char *, uint64_t))(v12 + 8))(v14, v49);
  swift_release();
  swift_allocObject();
  swift_weakInit();
  sub_100062734(&qword_1016673E0, &qword_1016673D8);
  uint64_t v21 = v50;
  uint64_t v22 = Publisher<>.sink(receiveValue:)();
  swift_release();
  (*(void (**)(char *, uint64_t))(v51 + 8))(v18, v21);
  v1[20] = v22;
  swift_release();
  v66[0] = 0;
  v66[1] = 0;
  long long v67 = xmmword_101388020;
  uint64_t v68 = 704;
  uint64_t v23 = v1[15];
  type metadata accessor for CloudKitCoalescer();
  swift_allocObject();
  swift_retain();
  v1[17] = sub_1004B2F60((uint64_t)v66, (uint64_t)sub_101023D40, v23);
  swift_release();
  (*(void (**)(char *, void, uint64_t))(v53 + 104))(v52, enum case for OS_dispatch_queue.AutoreleaseFrequency.workItem(_:), v54);
  static DispatchQoS.unspecified.getter();
  uint64_t v65 = _swiftEmptyArrayStorage;
  sub_101020950((unint64_t *)&qword_101638CC0, (void (*)(uint64_t))&type metadata accessor for OS_dispatch_queue.Attributes);
  sub_10000588C((uint64_t *)&unk_1016376F0);
  sub_100062734((unint64_t *)&qword_101638CD0, (uint64_t *)&unk_1016376F0);
  dispatch thunk of SetAlgebra.init<A>(_:)();
  unint64_t v24 = (void *)OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)();
  uint64_t v25 = v1[17];
  if (v25)
  {
    uint64_t v65 = *(void **)(v25 + 24);
    sub_10000588C(&qword_101646650);
    sub_100062734(&qword_101646658, &qword_101646650);
    uint64_t v26 = Publisher.eraseToAnyPublisher()();
    id v64 = v24;
    uint64_t v65 = (void *)v26;
    uint64_t v27 = type metadata accessor for OS_dispatch_queue.SchedulerOptions();
    uint64_t v28 = (uint64_t)v60;
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v27 - 8) + 56))(v60, 1, 1, v27);
    sub_10000588C(&qword_1016673E8);
    sub_100062734(&qword_1016673F0, &qword_1016673E8);
    uint64_t v29 = v45;
    Publisher.receive<A>(on:options:)();
    sub_10001DAB4(v28, &qword_10163C6C8);
    swift_release();
    uint64_t v30 = swift_allocObject();
    swift_weakInit();
    uint64_t v31 = swift_allocObject();
    uint64_t v32 = v48;
    *(void *)(v31 + 16) = v30;
    *(void *)(v31 + 24) = v32;
    sub_100062734(&qword_1016673F8, &qword_1016673D0);
    uint64_t v33 = v47;
    uint64_t v34 = Publisher<>.sink(receiveValue:)();
    swift_release();
    (*(void (**)(char *, uint64_t))(v46 + 8))(v29, v33);
    uint64_t v35 = v28;
  }
  else
  {
    uint64_t v34 = 0;
    uint64_t v35 = (uint64_t)v60;
  }
  v1[18] = v34;
  swift_release();
  uint64_t v65 = *(void **)(v23 + 32);
  uint64_t v36 = Publisher.eraseToAnyPublisher()();
  id v64 = (id)v1[6];
  id v37 = v64;
  uint64_t v65 = (void *)v36;
  uint64_t v38 = type metadata accessor for OS_dispatch_queue.SchedulerOptions();
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v38 - 8) + 56))(v35, 1, 1, v38);
  id v39 = v37;
  sub_10000588C(&qword_10163FE78);
  sub_100062734(&qword_10163FE80, &qword_10163FE78);
  uint64_t v40 = v61;
  Publisher.receive<A>(on:options:)();
  sub_10001DAB4(v35, &qword_10163C6C8);

  swift_release();
  swift_allocObject();
  swift_weakInit();
  sub_100062734(&qword_10163FE88, &qword_10163FE70);
  uint64_t v41 = v63;
  uint64_t v42 = Publisher<>.sink(receiveValue:)();

  swift_release();
  (*(void (**)(char *, uint64_t))(v62 + 8))(v40, v41);
  v1[16] = v42;
  return swift_release();
}

uint64_t sub_10100C838()
{
  swift_beginAccess();
  uint64_t result = swift_weakLoadStrong();
  if (result)
  {
    sub_10100F3C4();
    return swift_release();
  }
  return result;
}

uint64_t sub_10100C890()
{
  swift_retain();
  OSAllocatedUnfairLock.callAsFunction<A>(_:)();
  swift_release();
  return v1;
}

uint64_t sub_10100C914(uint64_t *a1)
{
  uint64_t v2 = type metadata accessor for DispatchTime();
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t v4 = __chkstk_darwin(v2);
  uint64_t v6 = (char *)&v18 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v4);
  uint64_t v8 = (char *)&v18 - v7;
  uint64_t v9 = *a1;
  swift_beginAccess();
  uint64_t result = swift_weakLoadStrong();
  if (result)
  {
    static os_log_type_t.default.getter();
    if (qword_101637268 != -1) {
      swift_once();
    }
    os_log(_:dso:log:_:_:)();
    uint64_t v11 = dispatch_group_create();
    dispatch_group_enter(v11);
    uint64_t v12 = (void *)swift_allocObject();
    v12[2] = v11;
    v12[3] = v9;
    uint64_t v13 = v11;
    swift_retain();
    id v14 = sub_10100BB0C();
    id v15 = [v14 privateCloudDatabase];

    sub_10101B52C(v15, 0, 0, (uint64_t)sub_101023D98, v12);
    swift_release();

    static DispatchTime.now()();
    if (qword_101637378 != -1) {
      swift_once();
    }
    uint64_t v16 = type metadata accessor for DispatchTimeInterval();
    sub_100010324(v16, (uint64_t)qword_101666E08);
    + infix(_:_:)();
    uint64_t v17 = *(void (**)(char *, uint64_t))(v3 + 8);
    v17(v6, v2);
    OS_dispatch_group.wait(timeout:)();
    swift_retain();
    QueueSynchronizer.conditionalSync<A>(_:)();
    swift_release();
    sub_100A5B728();
    sub_10000588C(&qword_101648980);
    sub_100062734(&qword_101667400, &qword_101648980);
    Subject<>.send()();

    v17(v8, v2);
    return swift_release();
  }
  return result;
}

void sub_10100CC50(uint64_t a1, char a2, NSObject *a3)
{
  Transaction.capture()();
  if (a2)
  {
    swift_errorRetain();
    static os_log_type_t.error.getter();
    if (qword_101637268 != -1) {
      swift_once();
    }
    sub_10000588C((uint64_t *)&unk_10163AD00);
    uint64_t v6 = swift_allocObject();
    *(_OWORD *)(v6 + 16) = xmmword_101342130;
    swift_getErrorValue();
    uint64_t v7 = Error.localizedDescription.getter();
    uint64_t v9 = v8;
    *(void *)(v6 + 56) = &type metadata for String;
    *(void *)(v6 + 64) = sub_10000B4CC();
    *(void *)(v6 + 32) = v7;
    *(void *)(v6 + 40) = v9;
    os_log(_:dso:log:_:_:)();
    swift_bridgeObjectRelease();
    sub_100173E88(a1, 1);
  }
  else
  {
    static os_log_type_t.default.getter();
    if (qword_101637268 != -1) {
      swift_once();
    }
    os_log(_:dso:log:_:_:)();
  }
  dispatch_group_leave(a3);
}

uint64_t sub_10100CE00()
{
  return swift_release();
}

uint64_t sub_10100CE48(uint64_t a1)
{
  uint64_t v2 = sub_10000588C((uint64_t *)&unk_10163AC90);
  uint64_t result = __chkstk_darwin(v2 - 8);
  uint64_t v5 = (char *)&v9 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(unsigned char *)(a1 + 184) = 1;
  if (*(void *)(a1 + 136))
  {
    swift_retain();
    static Date.trustedNow.getter((uint64_t)v5);
    uint64_t v6 = type metadata accessor for Date();
    (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v6 - 8) + 56))(v5, 0, 1, v6);
    sub_1004B43AC((uint64_t)v5);
    static os_log_type_t.default.getter();
    if (qword_101637268 != -1) {
      swift_once();
    }
    os_log(_:dso:log:_:_:)();
    uint64_t v7 = sub_1004B4124();
    sub_100173E88(v7, v8 & 1);
    return swift_release();
  }
  return result;
}

uint64_t sub_10100CFA8(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_10000588C(&qword_101667418);
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = *(void *)(v5 + 64);
  __chkstk_darwin(v4);
  uint64_t v7 = &v11[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0)];
  (*(void (**)(unsigned char *, uint64_t, uint64_t))(v5 + 16))(v7, a1, v4);
  unint64_t v8 = (*(unsigned __int8 *)(v5 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
  uint64_t v9 = swift_allocObject();
  (*(void (**)(unint64_t, unsigned char *, uint64_t))(v5 + 32))(v9 + v8, v7, v4);
  type metadata accessor for Transaction();
  uint64_t v12 = a2;
  uint64_t v13 = sub_101023E5C;
  uint64_t v14 = v9;
  static Transaction.named<A>(_:with:)();
  return swift_release();
}

void sub_10100D128(void *a1, char a2)
{
  if (a2)
  {
    swift_errorRetain();
    if (qword_101637370 != -1) {
      swift_once();
    }
    uint64_t v14 = type metadata accessor for Logger();
    sub_100010324(v14, (uint64_t)qword_10170F0E0);
    swift_errorRetain();
    swift_errorRetain();
    id v15 = Logger.logObject.getter();
    os_log_type_t v16 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v15, v16))
    {
      uint64_t v17 = (uint8_t *)swift_slowAlloc();
      uint64_t v26 = swift_slowAlloc();
      *(_DWORD *)uint64_t v17 = 136446210;
      swift_errorRetain();
      sub_10000588C(&qword_101638D40);
      uint64_t v18 = String.init<A>(describing:)();
      sub_1008FA0F0(v18, v19, &v26);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      sub_100173E7C(a1, 1);
      sub_100173E7C(a1, 1);
      _os_log_impl((void *)&_mh_execute_header, v15, v16, "accountInfo error: %{public}s", v17, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      sub_100173E7C(a1, 1);
      sub_100173E7C(a1, 1);
    }

    LOBYTE(v26) = 0;
    sub_10000588C(&qword_101667418);
    CheckedContinuation.resume(returning:)();
    unint64_t v24 = a1;
    char v25 = 1;
  }
  else
  {
    uint64_t v3 = qword_101637370;
    id v4 = a1;
    if (v3 != -1) {
      swift_once();
    }
    uint64_t v5 = type metadata accessor for Logger();
    sub_100010324(v5, (uint64_t)qword_10170F0E0);
    id v6 = v4;
    uint64_t v7 = Logger.logObject.getter();
    os_log_type_t v8 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v7, v8))
    {
      uint64_t v9 = (uint8_t *)swift_slowAlloc();
      uint64_t v26 = swift_slowAlloc();
      *(_DWORD *)uint64_t v9 = 136315138;
      id v10 = [v6 description];
      uint64_t v11 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      unint64_t v13 = v12;

      sub_100173E7C(a1, 0);
      sub_1008FA0F0(v11, v13, &v26);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      sub_100173E7C(a1, 0);
      sub_100173E7C(a1, 0);
      _os_log_impl((void *)&_mh_execute_header, v7, v8, "accountInfo: %s", v9, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      sub_100173E7C(a1, 0);
      sub_100173E7C(a1, 0);
    }

    unsigned int v20 = [v6 supportsDeviceToDeviceEncryption];
    uint64_t v21 = Logger.logObject.getter();
    os_log_type_t v22 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v21, v22))
    {
      uint64_t v23 = (uint8_t *)swift_slowAlloc();
      *(_DWORD *)uint64_t v23 = 67109120;
      LODWORD(v26) = v20;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      _os_log_impl((void *)&_mh_execute_header, v21, v22, "isManateeAvailable: %{BOOL}d", v23, 8u);
      swift_slowDealloc();
    }

    LOBYTE(v26) = v20;
    sub_10000588C(&qword_101667418);
    CheckedContinuation.resume(returning:)();
    unint64_t v24 = a1;
    char v25 = 0;
  }
  sub_100173E7C(v24, v25);
}

uint64_t sub_10100D5E0(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v15 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  id v6 = (char *)&v14 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = type metadata accessor for DispatchQoS();
  uint64_t v7 = *(void *)(v14 - 8);
  __chkstk_darwin(v14);
  uint64_t v9 = (char *)&v14 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10001D4B0(0, (unint64_t *)&qword_1016376E0);
  id v10 = (void *)static OS_dispatch_queue.main.getter();
  uint64_t v11 = swift_allocObject();
  *(void *)(v11 + 16) = a2;
  *(void *)(v11 + 24) = a1;
  aBlock[4] = sub_101023F48;
  aBlock[5] = v11;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_1004B5480;
  aBlock[3] = &unk_101602CD8;
  unint64_t v12 = _Block_copy(aBlock);
  swift_retain();
  swift_retain();
  swift_release();
  static DispatchQoS.unspecified.getter();
  aBlock[0] = _swiftEmptyArrayStorage;
  sub_101020950((unint64_t *)&qword_10163B7E0, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
  sub_10000588C((uint64_t *)&unk_10163F350);
  sub_100062734((unint64_t *)&qword_10163B7F0, (uint64_t *)&unk_10163F350);
  dispatch thunk of SetAlgebra.init<A>(_:)();
  OS_dispatch_queue.async(group:qos:flags:execute:)();
  _Block_release(v12);

  (*(void (**)(char *, uint64_t))(v15 + 8))(v6, v4);
  return (*(uint64_t (**)(char *, uint64_t))(v7 + 8))(v9, v14);
}

void sub_10100D8DC()
{
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for OS_dispatch_queue.Attributes();
  __chkstk_darwin(v2);
  unint64_t v43 = (char *)&v40 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = type metadata accessor for DispatchQoS();
  __chkstk_darwin(v4 - 8);
  uint64_t v5 = type metadata accessor for OS_dispatch_queue.AutoreleaseFrequency();
  uint64_t v42 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v7 = (char *)&v40 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for DispatchPredicate();
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  uint64_t v11 = (uint64_t *)((char *)&v40 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0));
  sub_10001D4B0(0, (unint64_t *)&qword_1016376E0);
  *uint64_t v11 = static OS_dispatch_queue.main.getter();
  (*(void (**)(uint64_t *, void, uint64_t))(v9 + 104))(v11, enum case for DispatchPredicate.onQueue(_:), v8);
  uint64_t v12 = _dispatchPreconditionTest(_:)();
  (*(void (**)(uint64_t *, uint64_t))(v9 + 8))(v11, v8);
  if ((v12 & 1) == 0)
  {
    __break(1u);
    goto LABEL_17;
  }
  if (!*(void *)(v1 + 240))
  {
    uint64_t v13 = v1;
    id v14 = [self mainBundle];
    id v15 = [v14 bundleIdentifier];

    if (v15)
    {
      uint64_t v16 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      uint64_t v18 = v17;

      uint64_t v45 = 0;
      unint64_t v46 = 0xE000000000000000;
      _StringGuts.grow(_:)(29);
      swift_bridgeObjectRelease();
      uint64_t v45 = (void *)0xD00000000000001BLL;
      unint64_t v46 = 0x800000010141EFD0;
      v19._countAndFlagsBits = v16;
      v19._object = v18;
      String.append(_:)(v19);
      swift_bridgeObjectRelease();
      unint64_t v20 = v46;
      uint64_t v41 = v45;
      (*(void (**)(char *, void, uint64_t))(v42 + 104))(v7, enum case for OS_dispatch_queue.AutoreleaseFrequency.workItem(_:), v5);
      static DispatchQoS.unspecified.getter();
      uint64_t v45 = _swiftEmptyArrayStorage;
      sub_101020950((unint64_t *)&qword_101638CC0, (void (*)(uint64_t))&type metadata accessor for OS_dispatch_queue.Attributes);
      sub_10000588C((uint64_t *)&unk_1016376F0);
      sub_100062734((unint64_t *)&qword_101638CD0, (uint64_t *)&unk_1016376F0);
      dispatch thunk of SetAlgebra.init<A>(_:)();
      uint64_t v21 = v41;
      os_log_type_t v22 = (void *)OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)();
      uint64_t v23 = (objc_class *)type metadata accessor for ContainerAPSBridge();
      unint64_t v24 = (char *)objc_allocWithZone(v23);
      *(void *)&v24[OBJC_IVAR____TtC12searchpartyd18ContainerAPSBridge_delegate + 8] = 0;
      *(void *)(swift_unknownObjectWeakInit() + 8) = &off_1015B4B60;
      swift_unknownObjectWeakAssign();
      v44.receiver = v24;
      v44.super_class = v23;
      id v25 = [super init];
      uint64_t v26 = *(void **)(v13 + 248);
      *(void *)(v13 + 248) = v25;

      id v27 = objc_allocWithZone((Class)APSConnection);
      swift_bridgeObjectRetain();
      uint64_t v12 = v22;
      NSString v28 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease();
      NSString v29 = String._bridgeToObjectiveC()();
      id v30 = [v27 initWithEnvironmentName:v28 namedDelegatePort:v29 queue:v12];

      uint64_t v31 = *(void **)(v13 + 240);
      *(void *)(v13 + 240) = v30;

      uint64_t v32 = *(void **)(v13 + 240);
      if (!v32) {
        goto LABEL_8;
      }
      sub_10000588C(&qword_1016552B0);
      uint64_t v33 = swift_allocObject();
      *(_OWORD *)(v33 + 16) = xmmword_101342130;
      *(void *)(v33 + 32) = v21;
      *(void *)(v33 + 40) = v20;
      id v34 = v32;
      swift_bridgeObjectRetain();
      Class isa = Array._bridgeToObjectiveC()().super.isa;
      swift_bridgeObjectRelease();
      [v34 _setEnabledTopics:isa];

      uint64_t v36 = *(void **)(v13 + 240);
      if (v36)
      {
        id v37 = v36;
        NSString v38 = String._bridgeToObjectiveC()();
        swift_bridgeObjectRelease();
        [v37 requestTokenForTopic:v38 identifier:0];

        id v39 = *(void **)(v13 + 240);
        if (!v39)
        {
LABEL_10:
          static os_log_type_t.default.getter();
          if (qword_101637268 == -1)
          {
LABEL_11:
            os_log(_:dso:log:_:_:)();

            return;
          }
LABEL_17:
          swift_once();
          goto LABEL_11;
        }
      }
      else
      {
LABEL_8:
        swift_bridgeObjectRelease();
        id v39 = *(void **)(v13 + 240);
        if (!v39) {
          goto LABEL_10;
        }
      }
      [v39 setDelegate:*(void *)(v13 + 248)];
      goto LABEL_10;
    }
    static os_log_type_t.error.getter();
    if (qword_101637268 != -1) {
      swift_once();
    }
    os_log(_:dso:log:_:_:)();
  }
}

uint64_t sub_10100DFAC(uint64_t a1)
{
  static os_log_type_t.default.getter();
  if (qword_101637270 != -1) {
    swift_once();
  }
  uint64_t result = os_log(_:dso:log:_:_:)();
  *(unsigned char *)(a1 + 72) = 1;
  return result;
}

uint64_t sub_10100E04C()
{
  uint64_t v1 = v0;
  id v2 = [self defaultCenter];
  static os_log_type_t.default.getter();
  if (qword_101637268 != -1) {
    swift_once();
  }
  os_log(_:dso:log:_:_:)();
  [v2 addObserver:v0 selector:"accountDidChange:" name:CKAccountChangedNotification object:0];
  static os_log_type_t.default.getter();
  os_log(_:dso:log:_:_:)();
  uint64_t v3 = swift_allocObject();
  swift_weakInit();
  sub_10000588C((uint64_t *)&unk_10163EAB8);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_101342130;
  uint64_t v5 = swift_allocObject();
  *(void *)(v5 + 16) = sub_101023D14;
  *(void *)(v5 + 24) = v3;
  *(void *)(inited + 32) = 0xD00000000000001CLL;
  *(void *)(inited + 40) = 0x800000010141EE30;
  *(void *)(inited + 48) = sub_1001DF664;
  *(void *)(inited + 56) = v5;
  swift_retain();
  sub_10092E16C(inited);
  type metadata accessor for DarwinNotificationHelper();
  swift_allocObject();
  uint64_t v6 = DarwinNotificationHelper.init(notificationHandlers:)();

  swift_release();
  *(void *)(v1 + 256) = v6;
  return swift_release();
}

uint64_t sub_10100E260()
{
  swift_beginAccess();
  uint64_t result = swift_weakLoadStrong();
  if (result)
  {
    sub_10100AC74();
    return swift_release();
  }
  return result;
}

uint64_t sub_10100E2B8(int a1)
{
  int v20 = a1;
  uint64_t v2 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v27 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  uint64_t v4 = (char *)v18 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = type metadata accessor for DispatchQoS();
  uint64_t v25 = *(void *)(v5 - 8);
  uint64_t v26 = v5;
  __chkstk_darwin(v5);
  uint64_t v7 = (char *)v18 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  Swift::String v19 = (char *)&type metadata for () + 8;
  QueueSynchronizer.conditionalSync<A>(_:)();
  uint64_t v8 = *(void *)(v1 + 64);
  uint64_t v33 = sub_101023C0C;
  uint64_t v34 = v1;
  uint64_t aBlock = _NSConcreteStackBlock;
  uint64_t v30 = 1107296256;
  unint64_t v24 = &v31;
  uint64_t v31 = sub_1004B5480;
  uint64_t v32 = &unk_101602A80;
  uint64_t v9 = _Block_copy(&aBlock);
  swift_retain();
  static DispatchQoS.unspecified.getter();
  NSString v28 = _swiftEmptyArrayStorage;
  uint64_t v23 = sub_101020950((unint64_t *)&qword_10163B7E0, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
  uint64_t v22 = sub_10000588C((uint64_t *)&unk_10163F350);
  uint64_t v10 = sub_100062734((unint64_t *)&qword_10163B7F0, (uint64_t *)&unk_10163F350);
  dispatch thunk of SetAlgebra.init<A>(_:)();
  v18[1] = v8;
  OS_dispatch_queue.async(group:qos:flags:execute:)();
  _Block_release(v9);
  uint64_t v11 = *(void (**)(char *, uint64_t))(v27 + 8);
  v27 += 8;
  uint64_t v21 = v11;
  v11(v4, v2);
  uint64_t v12 = v25 + 8;
  uint64_t v13 = *(void (**)(char *, uint64_t))(v25 + 8);
  v13(v7, v26);
  swift_release();
  type metadata accessor for Transaction();
  static Transaction.named<A>(_:with:)();
  uint64_t v25 = *(void *)(v1 + 48);
  uint64_t v14 = swift_allocObject();
  swift_weakInit();
  uint64_t v33 = sub_101023C30;
  uint64_t v34 = v14;
  uint64_t aBlock = _NSConcreteStackBlock;
  uint64_t v30 = 1107296256;
  uint64_t v31 = sub_1004B5480;
  uint64_t v32 = &unk_101602AA8;
  id v15 = _Block_copy(&aBlock);
  swift_retain();
  static DispatchQoS.unspecified.getter();
  NSString v28 = _swiftEmptyArrayStorage;
  Swift::String v19 = (char *)v10;
  dispatch thunk of SetAlgebra.init<A>(_:)();
  OS_dispatch_queue.async(group:qos:flags:execute:)();
  _Block_release(v15);
  v21(v4, v2);
  uint64_t v25 = v12;
  v13(v7, v26);
  swift_release();
  uint64_t result = swift_release();
  if ((v20 & 1) == 0)
  {
    uint64_t v33 = sub_101023C38;
    uint64_t v34 = v1;
    uint64_t aBlock = _NSConcreteStackBlock;
    uint64_t v30 = 1107296256;
    uint64_t v31 = sub_1004B5480;
    uint64_t v32 = &unk_101602AD0;
    uint64_t v17 = _Block_copy(&aBlock);
    swift_retain();
    static DispatchQoS.unspecified.getter();
    NSString v28 = _swiftEmptyArrayStorage;
    dispatch thunk of SetAlgebra.init<A>(_:)();
    OS_dispatch_queue.async(group:qos:flags:execute:)();
    _Block_release(v17);
    v21(v4, v2);
    v13(v7, v26);
    return swift_release();
  }
  return result;
}

void sub_10100E824(uint64_t a1)
{
  static os_log_type_t.default.getter();
  if (qword_101637268 != -1) {
    swift_once();
  }
  os_log(_:dso:log:_:_:)();
  unint64_t v2 = *(void *)(a1 + 80);
  *(_OWORD *)(a1 + 80) = xmmword_101388030;
  sub_101022184(v2);
  unint64_t v3 = *(void *)(a1 + 80);
  sub_101022194(v3);
  sub_101021860(v3);
  sub_101022184(v3);
  *(unsigned char *)(a1 + 96) = 0;
  *(unsigned char *)(a1 + 72) = 0;
  id v4 = *(id *)(a1 + 56);
  OS_dispatch_semaphore.signal()();

  dispatch_semaphore_t v5 = dispatch_semaphore_create(0);
  uint64_t v6 = *(void **)(a1 + 56);
  *(void *)(a1 + 56) = v5;
}

uint64_t sub_10100E91C(uint64_t a1)
{
  static os_log_type_t.default.getter();
  if (qword_101637270 != -1) {
    swift_once();
  }
  os_log(_:dso:log:_:_:)();
  id v2 = *(id *)(a1 + 56);
  OS_dispatch_semaphore.wait()();

  static os_log_type_t.default.getter();

  return os_log(_:dso:log:_:_:)();
}

uint64_t sub_10100EA00()
{
  swift_beginAccess();
  uint64_t result = swift_weakLoadStrong();
  if (result)
  {
    uint64_t v1 = (void *)result;
    if (swift_unknownObjectWeakLoadStrong())
    {
      sub_100098DAC(v1);
      swift_release();
      return swift_unknownObjectRelease();
    }
    else
    {
      return swift_release();
    }
  }
  return result;
}

uint64_t sub_10100EA80()
{
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for DispatchQoS();
  __chkstk_darwin(v2 - 8);
  id v4 = &v10[-((v3 + 15) & 0xFFFFFFFFFFFFFFF0)];
  static os_log_type_t.default.getter();
  if (qword_101637268 != -1) {
    swift_once();
  }
  os_log(_:dso:log:_:_:)();
  static DispatchQoS.background.getter();
  uint64_t v5 = swift_allocObject();
  swift_weakInit();
  uint64_t v6 = swift_allocObject();
  swift_weakInit();
  type metadata accessor for XPCActivity();
  swift_allocObject();
  uint64_t v7 = sub_1009D9B34(0xD000000000000028, (void *)0x800000010141EB40, (uint64_t)v4, (uint64_t)sub_101023B7C, v5, (uint64_t)sub_101023B84, v6);
  swift_release();
  uint64_t v8 = swift_release();
  __chkstk_darwin(v8);
  *(void *)&v10[-16] = v1;
  *(void *)&v10[-8] = v7;
  QueueSynchronizer.conditionalSync<A>(_:)();
  return swift_release();
}

uint64_t sub_10100EC94@<X0>(uint64_t a1@<X8>)
{
  swift_beginAccess();
  uint64_t result = swift_weakLoadStrong();
  if (result)
  {
    swift_retain();
    sub_10000588C(&qword_1016549D0);
    QueueSynchronizer.conditionalSync<A>(_:)();
    swift_release();
    uint64_t result = swift_release();
    long long v3 = v6;
    long long v4 = v7;
    uint64_t v5 = v8;
  }
  else
  {
    uint64_t v5 = 0;
    long long v3 = xmmword_101354090;
    long long v4 = 0uLL;
  }
  *(_OWORD *)a1 = v3;
  *(_OWORD *)(a1 + 16) = v4;
  *(void *)(a1 + 32) = v5;
  return result;
}

uint64_t sub_10100ED60(uint64_t a1, uint64_t a2, char a3)
{
  swift_beginAccess();
  uint64_t result = swift_weakLoadStrong();
  if (result)
  {
    Transaction.capture()();
    if (a3 == 3)
    {
      sub_1009D7368();
    }
    else if (a3 == 2)
    {
      static os_log_type_t.default.getter();
      if (qword_101637268 != -1) {
        swift_once();
      }
      sub_10000588C((uint64_t *)&unk_10163AD00);
      uint64_t v5 = swift_allocObject();
      *(_OWORD *)(v5 + 16) = xmmword_101342130;
      type metadata accessor for XPCActivity();
      swift_retain();
      uint64_t v6 = String.init<A>(describing:)();
      uint64_t v8 = v7;
      *(void *)(v5 + 56) = &type metadata for String;
      *(void *)(v5 + 64) = sub_10000B4CC();
      *(void *)(v5 + 32) = v6;
      *(void *)(v5 + 40) = v8;
      os_log(_:dso:log:_:_:)();
      swift_bridgeObjectRelease();
      sub_10100E2B8(0);
      PassthroughSubject.send(_:)();
      sub_1009D7390();
    }
    return swift_release();
  }
  return result;
}

uint64_t sub_10100EF00(uint64_t a1)
{
  *(unsigned char *)(a1 + 112) = 1;
  type metadata accessor for Transaction();
  swift_retain();
  static Transaction.named<A>(_:with:)();
  return swift_release();
}

uint64_t sub_10100EFA0(uint64_t a1, uint64_t a2)
{
  uint64_t v18 = a1;
  uint64_t v19 = a2;
  uint64_t v2 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v21 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  long long v4 = (char *)&v17 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v20 = type metadata accessor for DispatchQoS();
  uint64_t v5 = *(void *)(v20 - 8);
  __chkstk_darwin(v20);
  uint64_t v7 = (char *)&v17 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for DispatchQoS.QoSClass();
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  uint64_t v11 = (char *)&v17 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10001D4B0(0, (unint64_t *)&qword_1016376E0);
  (*(void (**)(char *, void, uint64_t))(v9 + 104))(v11, enum case for DispatchQoS.QoSClass.default(_:), v8);
  uint64_t v12 = (void *)static OS_dispatch_queue.global(qos:)();
  (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v8);
  uint64_t v13 = swift_allocObject();
  uint64_t v14 = v19;
  *(void *)(v13 + 16) = v18;
  *(void *)(v13 + 24) = v14;
  aBlock[4] = sub_101023B3C;
  aBlock[5] = v13;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_1004B5480;
  aBlock[3] = &unk_101602A30;
  id v15 = _Block_copy(aBlock);
  swift_retain();
  swift_retain();
  static DispatchQoS.unspecified.getter();
  void aBlock[7] = _swiftEmptyArrayStorage;
  sub_101020950((unint64_t *)&qword_10163B7E0, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
  sub_10000588C((uint64_t *)&unk_10163F350);
  sub_100062734((unint64_t *)&qword_10163B7F0, (uint64_t *)&unk_10163F350);
  dispatch thunk of SetAlgebra.init<A>(_:)();
  OS_dispatch_queue.async(group:qos:flags:execute:)();
  _Block_release(v15);

  (*(void (**)(char *, uint64_t))(v21 + 8))(v4, v2);
  (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v20);
  return swift_release();
}

void sub_10100F354(uint64_t a1, uint64_t a2)
{
  if (a2) {
    OSAllocatedUnfairLock.callAsFunction<A>(_:)();
  }
}

uint64_t sub_10100F3C4()
{
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for DispatchPredicate();
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  uint64_t v5 = (uint64_t *)((char *)v13 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v6 = *(void **)(v1 + 32);
  *uint64_t v5 = v6;
  (*(void (**)(void *, void, uint64_t))(v3 + 104))(v5, enum case for DispatchPredicate.onQueue(_:), v2);
  id v7 = v6;
  LOBYTE(v6) = _dispatchPreconditionTest(_:)();
  (*(void (**)(void *, uint64_t))(v3 + 8))(v5, v2);
  if (v6)
  {
    if (qword_101636CD8 == -1) {
      goto LABEL_3;
    }
  }
  else
  {
    __break(1u);
  }
  swift_once();
LABEL_3:
  OS_dispatch_queue.sync<A>(execute:)();
  sub_1010ABCF4(v13[1]);
  uint64_t v9 = v8;
  swift_bridgeObjectRelease();
  static os_log_type_t.default.getter();
  if (qword_101637268 != -1) {
    swift_once();
  }
  os_log(_:dso:log:_:_:)();
  uint64_t v10 = swift_allocObject();
  *(void *)(v10 + 16) = v1;
  *(void *)(v10 + 24) = v9;
  uint64_t v11 = type metadata accessor for Transaction();
  __chkstk_darwin(v11);
  v13[-4] = v1;
  v13[-3] = (uint64_t)sub_101022E28;
  v13[-2] = v10;
  swift_retain();
  static Transaction.named<A>(_:with:)();
  return swift_release();
}

void sub_10100F674(void *a1, char a2, uint64_t a3, double a4)
{
  uint64_t v8 = type metadata accessor for DispatchTime();
  uint64_t v9 = *(void *)(v8 - 8);
  uint64_t v10 = __chkstk_darwin(v8);
  uint64_t v12 = (char *)v86 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v10);
  uint64_t v14 = (char *)v86 - v13;
  uint64_t v15 = type metadata accessor for DispatchWorkItemFlags();
  __chkstk_darwin(v15);
  uint64_t v17 = (char *)v86 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v18 = type metadata accessor for URL();
  uint64_t v19 = __chkstk_darwin(v18);
  uint64_t v20 = __chkstk_darwin(v19);
  uint64_t v21 = (void *)__chkstk_darwin(v20);
  if (a2)
  {
    swift_errorRetain();
    static os_log_type_t.error.getter();
    if (qword_101637268 != -1) {
      swift_once();
    }
    sub_10000588C((uint64_t *)&unk_10163AD00);
    uint64_t v43 = swift_allocObject();
    *(_OWORD *)(v43 + 16) = xmmword_101342130;
    aBlock._countAndFlagsBits = (uint64_t)a1;
    swift_errorRetain();
    sub_10000588C(&qword_101638D40);
    uint64_t v44 = String.init<A>(describing:)();
    uint64_t v46 = v45;
    *(void *)(v43 + 56) = &type metadata for String;
    *(void *)(v43 + 64) = sub_10000B4CC();
    *(void *)(v43 + 32) = v44;
    *(void *)(v43 + 40) = v46;
    os_log(_:dso:log:_:_:)();
    swift_bridgeObjectRelease();
    uint64_t v47 = a1;
    char v48 = 1;
    goto LABEL_12;
  }
  uint64_t v93 = v25;
  id v94 = v24;
  v95 = (char *)v86 - v22;
  v96 = v23;
  id v97 = v21;
  v86[1] = v15;
  v86[2] = v17;
  v87 = v12;
  v88 = v14;
  uint64_t v89 = v9;
  uint64_t v90 = v8;
  uint64_t v26 = a3;
  id v27 = a1;
  static os_log_type_t.default.getter();
  NSString v28 = a1;
  if (qword_101637268 != -1) {
    swift_once();
  }
  uint64_t v29 = sub_10000588C((uint64_t *)&unk_10163AD00);
  uint64_t v30 = swift_allocObject();
  long long v98 = xmmword_101342130;
  *(_OWORD *)(v30 + 16) = xmmword_101342130;
  id v31 = v27;
  id v32 = [v31 description];
  uint64_t v33 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v35 = v34;

  v99 = v28;
  sub_100173E7C(v28, 0);
  *(void *)(v30 + 56) = &type metadata for String;
  unint64_t v91 = sub_10000B4CC();
  *(void *)(v30 + 64) = v91;
  *(void *)(v30 + 32) = v33;
  *(void *)(v30 + 40) = v35;
  os_log(_:dso:log:_:_:)();
  swift_bridgeObjectRelease();
  uint64_t v36 = v26;
  char v37 = *(unsigned char *)(v26 + 96);
  static os_log_type_t.default.getter();
  uint64_t v92 = v29;
  uint64_t v38 = swift_allocObject();
  *(_OWORD *)(v38 + 16) = v98;
  unsigned __int8 v39 = [v31 supportsDeviceToDeviceEncryption];
  *(void *)(v38 + 56) = &type metadata for Bool;
  *(void *)(v38 + 64) = &protocol witness table for Bool;
  *(unsigned char *)(v38 + 32) = v39;
  os_log(_:dso:log:_:_:)();
  swift_bridgeObjectRelease();
  *(unsigned char *)(v26 + 96) = [v31 supportsDeviceToDeviceEncryption];
  unsigned int v40 = [v31 supportsDeviceToDeviceEncryption];
  if ((v37 & 1) == 0)
  {
    if (!v40) {
      goto LABEL_22;
    }
    uint64_t v42 = v99;
    if (qword_101636CD8 != -1) {
      swift_once();
    }
    sub_1000A5940();
    sub_100F16CBC(1, 1);
    swift_release();
    uint64_t Strong = swift_unknownObjectWeakLoadStrong();
    if (!Strong)
    {
      static os_log_type_t.error.getter();
      os_log(_:dso:log:_:_:)();
LABEL_24:
      uint64_t v70 = v42;
      goto LABEL_25;
    }
    id v50 = *(id *)(Strong + 152);
    swift_unknownObjectRelease();
    type metadata accessor for BeaconStore(0);
    uint64_t v51 = v93;
    sub_100A9DB34(v93);
    uint64_t v52 = (uint64_t)v94;
    URL.appendingPathComponent(_:isDirectory:)();
    id v53 = v97;
    uint64_t v54 = (void (*)(uint64_t, id))v96[1];
    v54(v51, v97);
    uint64_t v55 = v95;
    URL.appendingPathComponent(_:)();
    v54(v52, v53);
    uint64_t v93 = *(void *)(v26 + 272);
    v96 = (void *)sub_1008BE054();
    v54((uint64_t)v55, v53);
    sub_100A9DB34(v52);
    URL.appendingPathComponent(_:isDirectory:)();
    v54(v52, v53);
    v56._countAndFlagsBits = 0x65746176697250;
    v56._object = (void *)0xE700000000000000;
    URL.appendPathComponent(_:)(v56);
    id v57 = [v50 ownerName];
    uint64_t v58 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    unint64_t v60 = v59;

    v61._countAndFlagsBits = v58;
    v61._object = v60;
    URL.appendPathComponent(_:)(v61);
    swift_bridgeObjectRelease();
    id v94 = v50;
    id v62 = [v50 zoneName];
    uint64_t v63 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v65 = v64;

    aBlock._countAndFlagsBits = v63;
    aBlock._object = v65;
    v66._countAndFlagsBits = 0x6E656B6F742ELL;
    v66._object = (void *)0xE600000000000000;
    String.append(_:)(v66);
    URL.appendPathComponent(_:)(aBlock);
    swift_bridgeObjectRelease();
    long long v67 = (void *)sub_1008BE054();
    v54((uint64_t)v55, v53);
    static os_log_type_t.default.getter();
    id v68 = v96;
    os_log(_:dso:log:_:_:)();
    static os_log_type_t.default.getter();
    if (v68 && v67)
    {
      os_log(_:dso:log:_:_:)();
      static os_log_type_t.default.getter();
      os_log(_:dso:log:_:_:)();
      QueueSynchronizer.conditionalSync<A>(_:)();
      static os_log_type_t.default.getter();
      if (qword_101637270 != -1) {
        swift_once();
      }
      os_log(_:dso:log:_:_:)();
      id v69 = *(id *)(v36 + 56);
      OS_dispatch_semaphore.signal()();

      static os_log_type_t.default.getter();
      os_log(_:dso:log:_:_:)();
      sub_100A5B728();
    }
    else
    {
      id v97 = v67;
      os_log(_:dso:log:_:_:)();
      static os_log_type_t.default.getter();
      uint64_t v71 = swift_allocObject();
      *(_OWORD *)(v71 + 16) = v98;
      uint64_t v72 = *(void *)(v36 + 208);
      uint64_t v73 = *(void **)(v36 + 216);
      unint64_t v74 = v91;
      *(void *)(v71 + 56) = &type metadata for String;
      *(void *)(v71 + 64) = v74;
      *(void *)(v71 + 32) = v72;
      *(void *)(v71 + 40) = v73;
      swift_bridgeObjectRetain();
      os_log(_:dso:log:_:_:)();
      swift_bridgeObjectRelease();
      Class v75 = sub_101021DCC(v72, v73);
      swift_retain();
      uint64_t v76 = CKModifySubscriptionsOperation.undeprecated_modifySubscriptionsCompletionBlock.setter();
      __chkstk_darwin(v76);
      v86[-2] = v36;
      v86[-1] = v75;
      QueueSynchronizer.conditionalSync<A>(_:)();
      if (a4 > 0.0)
      {
        v104 = sub_101022E9C;
        uint64_t v105 = v36;
        aBlock._countAndFlagsBits = (uint64_t)_NSConcreteStackBlock;
        aBlock._object = (void *)1107296256;
        v102 = sub_1004B5480;
        v103 = &unk_101602828;
        _Block_copy(&aBlock);
        v100 = _swiftEmptyArrayStorage;
        sub_101020950((unint64_t *)&qword_10163B7E0, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
        swift_retain();
        sub_10000588C((uint64_t *)&unk_10163F350);
        sub_100062734((unint64_t *)&qword_10163B7F0, (uint64_t *)&unk_10163F350);
        dispatch thunk of SetAlgebra.init<A>(_:)();
        type metadata accessor for DispatchWorkItem();
        swift_allocObject();
        uint64_t v77 = DispatchWorkItem.init(flags:block:)();
        swift_release();
        static os_log_type_t.default.getter();
        uint64_t v78 = swift_allocObject();
        *(_OWORD *)(v78 + 16) = v98;
        *(void *)(v78 + 56) = &type metadata for Double;
        *(void *)(v78 + 64) = &protocol witness table for Double;
        *(double *)(v78 + 32) = a4;
        os_log(_:dso:log:_:_:)();
        swift_bridgeObjectRelease();
        *(void *)(v36 + 264) = v77;
        swift_retain();
        swift_release();
        unint64_t v79 = v87;
        static DispatchTime.now()();
        uint64_t v80 = v88;
        + infix(_:_:)();
        uint64_t v81 = *(void (**)(char *, uint64_t))(v89 + 8);
        uint64_t v82 = v79;
        uint64_t v83 = v90;
        v81(v82, v90);
        OS_dispatch_queue.asyncAfter(deadline:execute:)();
        swift_release();
        v81(v80, v83);
      }
      swift_retain();
      id v84 = sub_10100BB0C();
      id v85 = [v84 privateCloudDatabase];

      sub_10101B52C(v85, 0, 0, (uint64_t)sub_101022E90, (id)v36);
      swift_release();
    }
    uint64_t v47 = v99;
    char v48 = 0;
LABEL_12:
    sub_100173E7C(v47, v48);
    return;
  }
  if (!v40)
  {
    static os_log_type_t.error.getter();
    os_log(_:dso:log:_:_:)();
    uint64_t v41 = swift_unknownObjectWeakLoadStrong();
    uint64_t v42 = v99;
    if (v41)
    {
      sub_100098FB0(v26);
      swift_unknownObjectRelease();
    }
    sub_10100E2B8(0);
    goto LABEL_24;
  }
LABEL_22:
  uint64_t v70 = v99;
LABEL_25:

  sub_100173E7C(v70, 0);
}

uint64_t sub_101010434(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (a3)
  {
    swift_errorRetain();
    static os_log_type_t.error.getter();
    if (qword_101637268 != -1) {
      swift_once();
    }
    sub_10000588C((uint64_t *)&unk_10163AD00);
    uint64_t v4 = swift_allocObject();
    *(_OWORD *)(v4 + 16) = xmmword_101342130;
    swift_errorRetain();
    sub_10000588C(&qword_101638D40);
    uint64_t v5 = String.init<A>(describing:)();
    uint64_t v7 = v6;
    *(void *)(v4 + 56) = &type metadata for String;
    *(void *)(v4 + 64) = sub_10000B4CC();
    *(void *)(v4 + 32) = v5;
    *(void *)(v4 + 40) = v7;
    os_log(_:dso:log:_:_:)();
    swift_bridgeObjectRelease();
    return swift_errorRelease();
  }
  else
  {
    static os_log_type_t.default.getter();
    if (qword_101637268 != -1) {
      swift_once();
    }
    sub_10000588C((uint64_t *)&unk_10163AD00);
    uint64_t v10 = swift_allocObject();
    *(_OWORD *)(v10 + 16) = xmmword_101342130;
    uint64_t v12 = *(void *)(a4 + 208);
    uint64_t v11 = *(void *)(a4 + 216);
    *(void *)(v10 + 56) = &type metadata for String;
    *(void *)(v10 + 64) = sub_10000B4CC();
    *(void *)(v10 + 32) = v12;
    *(void *)(v10 + 40) = v11;
    swift_bridgeObjectRetain();
    os_log(_:dso:log:_:_:)();
    return swift_bridgeObjectRelease();
  }
}

void sub_101010640(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for DispatchPredicate();
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  uint64_t v5 = (uint64_t *)((char *)&v8 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v6 = *(void **)(a1 + 32);
  *uint64_t v5 = v6;
  (*(void (**)(void *, void, uint64_t))(v3 + 104))(v5, enum case for DispatchPredicate.onQueue(_:), v2);
  id v7 = v6;
  LOBYTE(v6) = _dispatchPreconditionTest(_:)();
  (*(void (**)(void *, uint64_t))(v3 + 8))(v5, v2);
  if (v6)
  {
    static os_log_type_t.error.getter();
    if (qword_101637268 == -1) {
      goto LABEL_3;
    }
  }
  else
  {
    __break(1u);
  }
  swift_once();
LABEL_3:
  os_log(_:dso:log:_:_:)();
  exit(0);
}

void sub_1010107A0(uint64_t a1, char a2, uint64_t a3)
{
  QueueSynchronizer.conditionalSync<A>(_:)();
  if (a2)
  {
    swift_errorRetain();
    static os_log_type_t.error.getter();
    if (qword_101637268 != -1) {
      swift_once();
    }
    sub_10000588C((uint64_t *)&unk_10163AD00);
    uint64_t v7 = swift_allocObject();
    *(_OWORD *)(v7 + 16) = xmmword_101342130;
    swift_errorRetain();
    sub_10000588C(&qword_101638D40);
    uint64_t v8 = String.init<A>(describing:)();
    uint64_t v10 = v9;
    *(void *)(v7 + 56) = &type metadata for String;
    *(void *)(v7 + 64) = sub_10000B4CC();
    *(void *)(v7 + 32) = v8;
    *(void *)(v7 + 40) = v10;
    os_log(_:dso:log:_:_:)();
    swift_bridgeObjectRelease();
    swift_errorRetain();
    type metadata accessor for CKError(0);
    if (swift_dynamicCast())
    {
      sub_101020950(&qword_101638668, type metadata accessor for CKError);
      _BridgedStoredNSError.code.getter();
      if (a1 == 111)
      {
        static os_log_type_t.default.getter();
        os_log(_:dso:log:_:_:)();
        QueueSynchronizer.conditionalSync<A>(_:)();
      }
      _BridgedStoredNSError.code.getter();
      if ((unint64_t)(a1 - 3) > 1)
      {
        id v11 = v12;
        sub_101010D50((uint64_t)v11);
        sub_100173E88(a1, 1);
      }
      else
      {
        static os_log_type_t.default.getter();
        os_log(_:dso:log:_:_:)();
        QueueSynchronizer.conditionalSync<A>(_:)();
        sub_100173E88(a1, 1);
      }
    }
    else
    {
      sub_100173E88(a1, 1);
    }
  }
  else
  {
    static os_log_type_t.default.getter();
    if (qword_101637268 != -1) {
      swift_once();
    }
    os_log(_:dso:log:_:_:)();
    static os_log_type_t.default.getter();
    os_log(_:dso:log:_:_:)();
    static os_log_type_t.default.getter();
    os_log(_:dso:log:_:_:)();
    QueueSynchronizer.conditionalSync<A>(_:)();
    static os_log_type_t.default.getter();
    if (qword_101637270 != -1) {
      swift_once();
    }
    os_log(_:dso:log:_:_:)();
    id v6 = *(id *)(a3 + 56);
    OS_dispatch_semaphore.signal()();

    static os_log_type_t.default.getter();
    os_log(_:dso:log:_:_:)();
    sub_100A5B728();
  }
}

uint64_t sub_101010C88(uint64_t a1)
{
  if (qword_101637268 != -1) {
    swift_once();
  }
  os_log(_:dso:log:_:_:)();
  if (*(void *)(a1 + 264))
  {
    swift_retain();
    dispatch thunk of DispatchWorkItem.cancel()();
    swift_release();
  }
  *(void *)(a1 + 264) = 0;
  return swift_release();
}

void sub_101010D50(uint64_t a1)
{
  uint64_t v3 = v1;
  uint64_t v5 = type metadata accessor for DispatchPredicate();
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v8 = (void *)((char *)&v42 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v9 = *(void **)(v3 + 32);
  *uint64_t v8 = v9;
  (*(void (**)(void *, void, uint64_t))(v6 + 104))(v8, enum case for DispatchPredicate.notOnQueue(_:), v5);
  id v10 = v9;
  LOBYTE(v9) = _dispatchPreconditionTest(_:)();
  (*(void (**)(void *, uint64_t))(v6 + 8))(v8, v5);
  if ((v9 & 1) == 0)
  {
    __break(1u);
LABEL_36:
    swift_once();
LABEL_10:
    sub_10000588C((uint64_t *)&unk_10163AD00);
    uint64_t v16 = swift_allocObject();
    *(_OWORD *)(v16 + 16) = xmmword_101342130;
    swift_bridgeObjectRetain();
    uint64_t v17 = Dictionary.description.getter();
    uint64_t v19 = v18;
    swift_bridgeObjectRelease();
    *(void *)(v16 + 56) = &type metadata for String;
    *(void *)(v16 + 64) = sub_10000B4CC();
    *(void *)(v16 + 32) = v17;
    *(void *)(v16 + 40) = v19;
    os_log(_:dso:log:_:_:)();
    swift_bridgeObjectRelease();
    sub_101020A28(a1, (void (*)(unsigned char *, id))sub_1010221A4);
    swift_bridgeObjectRelease();
    goto LABEL_12;
  }
  *(void *)&long long v44 = a1;
  swift_errorRetain();
  sub_10000588C(&qword_101638D40);
  type metadata accessor for CKError(0);
  if (!swift_dynamicCast()) {
    return;
  }
  uint64_t v2 = v46;
  sub_101020950(&qword_101638668, type metadata accessor for CKError);
  uint64_t v11 = _BridgedStoredNSError.userInfo.getter();
  uint64_t v12 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  if (*(void *)(v11 + 16) && (uint64_t v14 = sub_100723FF4(v12, v13), (v15 & 1) != 0))
  {
    sub_10012F428(*(void *)(v11 + 56) + 32 * v14, (uint64_t)&v44);
  }
  else
  {
    long long v44 = 0u;
    long long v45 = 0u;
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (*((void *)&v45 + 1))
  {
    sub_10000588C(&qword_1016672D8);
    if ((swift_dynamicCast() & 1) == 0) {
      goto LABEL_12;
    }
    a1 = (uint64_t)v46;
    static os_log_type_t.error.getter();
    if (qword_101637268 == -1) {
      goto LABEL_10;
    }
    goto LABEL_36;
  }
  sub_10001DAB4((uint64_t)&v44, (uint64_t *)&unk_101644360);
LABEL_12:
  id v46 = v2;
  _BridgedStoredNSError.code.getter();
  if ((void)v44 == 21)
  {
    static os_log_type_t.error.getter();
    if (qword_101637268 != -1) {
      swift_once();
    }
    sub_10000588C((uint64_t *)&unk_10163AD00);
    uint64_t v27 = swift_allocObject();
    *(_OWORD *)(v27 + 16) = xmmword_101342130;
    id v21 = v2;
    uint64_t v28 = related decl 'e' for CKErrorCode.description.getter();
    uint64_t v30 = v29;

    *(void *)(v27 + 56) = &type metadata for String;
    *(void *)(v27 + 64) = sub_10000B4CC();
    *(void *)(v27 + 32) = v28;
    *(void *)(v27 + 40) = v30;
    os_log(_:dso:log:_:_:)();
    swift_bridgeObjectRelease();
    if (swift_unknownObjectWeakLoadStrong())
    {
      sub_100098FB0(v3);
      swift_unknownObjectRelease();
    }
    sub_10100E2B8(0);
    goto LABEL_33;
  }
  if ((void)v44 == 26)
  {
    static os_log_type_t.error.getter();
    if (qword_101637268 != -1) {
      swift_once();
    }
    sub_10000588C((uint64_t *)&unk_10163AD00);
    uint64_t v20 = swift_allocObject();
    *(_OWORD *)(v20 + 16) = xmmword_101342130;
    id v21 = v2;
    uint64_t v22 = related decl 'e' for CKErrorCode.description.getter();
    uint64_t v24 = v23;

    *(void *)(v20 + 56) = &type metadata for String;
    *(void *)(v20 + 64) = sub_10000B4CC();
    *(void *)(v20 + 32) = v22;
    *(void *)(v20 + 40) = v24;
    os_log(_:dso:log:_:_:)();
    swift_bridgeObjectRelease();
    unint64_t v25 = *(void *)(v3 + 80);
    *(void *)(v3 + 80) = 0;
    sub_101022184(v25);
    unint64_t v26 = *(void *)(v3 + 80);
    sub_101022194(v26);
    sub_101021860(v26);
    sub_101022184(v26);
    static os_log_type_t.default.getter();
    os_log(_:dso:log:_:_:)();
    sub_101014580(0);
    goto LABEL_33;
  }
  static os_log_type_t.error.getter();
  if (qword_101637268 != -1) {
    swift_once();
  }
  uint64_t v43 = sub_10000588C((uint64_t *)&unk_10163AD00);
  uint64_t v31 = swift_allocObject();
  long long v42 = xmmword_101342130;
  *(_OWORD *)(v31 + 16) = xmmword_101342130;
  id v21 = v2;
  uint64_t v32 = related decl 'e' for CKErrorCode.description.getter();
  uint64_t v34 = v33;

  *(void *)(v31 + 56) = &type metadata for String;
  unint64_t v35 = sub_10000B4CC();
  *(void *)(v31 + 64) = v35;
  *(void *)(v31 + 32) = v32;
  *(void *)(v31 + 40) = v34;
  os_log(_:dso:log:_:_:)();
  swift_bridgeObjectRelease();
  id v46 = v21;
  _BridgedStoredNSError.code.getter();
  if ((void)v44 != 110)
  {
    if ((void)v44 == 112)
    {
      unint64_t v36 = *(void *)(v3 + 80);
      *(void *)(v3 + 80) = 0;
      sub_101022184(v36);
      unint64_t v37 = *(void *)(v3 + 80);
      sub_101022194(v37);
      sub_101021860(v37);
      sub_101022184(v37);
      static os_log_type_t.default.getter();
      os_log(_:dso:log:_:_:)();
      sub_10101A204();
      sub_101014580(4);
      sub_10100E2B8(0);
      goto LABEL_33;
    }
    if ((void)v44 != 111)
    {
      static os_log_type_t.error.getter();
      uint64_t v38 = swift_allocObject();
      *(_OWORD *)(v38 + 16) = v42;
      id v21 = v21;
      uint64_t v39 = related decl 'e' for CKErrorCode.description.getter();
      uint64_t v41 = v40;

      *(void *)(v38 + 56) = &type metadata for String;
      *(void *)(v38 + 64) = v35;
      *(void *)(v38 + 32) = v39;
      *(void *)(v38 + 40) = v41;
      os_log(_:dso:log:_:_:)();
      swift_bridgeObjectRelease();
      goto LABEL_33;
    }
    static os_log_type_t.error.getter();
    goto LABEL_30;
  }
  static os_log_type_t.error.getter();
  os_log(_:dso:log:_:_:)();
  if (*(unsigned char *)(v3 + 96) == 1)
  {
    *(unsigned char *)(v3 + 96) = 0;
    static os_log_type_t.error.getter();
LABEL_30:
    os_log(_:dso:log:_:_:)();
  }
LABEL_33:
}

uint64_t sub_101011748(uint64_t a1)
{
  uint64_t v2 = swift_allocObject();
  swift_weakInit();
  uint64_t v3 = swift_allocObject();
  *(void *)(v3 + 16) = v2;
  *(void *)(v3 + 24) = a1;
  type metadata accessor for Transaction();
  swift_retain();
  swift_retain();
  static Transaction.named<A>(_:with:)();
  swift_release();
  return swift_release();
}

uint64_t sub_101011854()
{
  swift_beginAccess();
  uint64_t result = swift_weakLoadStrong();
  if (result)
  {
    __chkstk_darwin(result);
    swift_retain();
    QueueSynchronizer.conditionalSync<A>(_:)();
    swift_release();
    return swift_release();
  }
  return result;
}

uint64_t sub_101011934(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v40 = *(void *)(v6 - 8);
  uint64_t v41 = v6;
  __chkstk_darwin(v6);
  unint64_t v37 = (char *)&v34 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for DispatchQoS();
  uint64_t v38 = *(void *)(v8 - 8);
  uint64_t v39 = v8;
  __chkstk_darwin(v8);
  uint64_t v35 = a1;
  unint64_t v36 = (char *)&v34 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  Transaction.capture()();
  static os_log_type_t.default.getter();
  if (qword_101637268 != -1) {
    swift_once();
  }
  sub_10000588C((uint64_t *)&unk_10163AD00);
  uint64_t v10 = swift_allocObject();
  *(_OWORD *)(v10 + 16) = xmmword_101347BA0;
  uint64_t v11 = a2;
  id v12 = (id)CKStringFromAccountStatus();
  uint64_t v13 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v15 = v14;

  *(void *)(v10 + 56) = &type metadata for String;
  unint64_t v16 = sub_10000B4CC();
  *(void *)(v10 + 64) = v16;
  *(void *)(v10 + 32) = v13;
  *(void *)(v10 + 40) = v15;
  id v17 = (id)CKStringFromAccountStatus();
  uint64_t v18 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v42 = a3;
  uint64_t v20 = v19;

  *(void *)(v10 + 96) = &type metadata for String;
  *(void *)(v10 + 104) = v16;
  *(void *)(v10 + 72) = v18;
  *(void *)(v10 + 80) = v20;
  uint64_t v21 = v42;
  os_log(_:dso:log:_:_:)();
  swift_bridgeObjectRelease();
  switch(v21)
  {
    case 1:
      uint64_t v23 = v11;
      LOBYTE(aBlock) = 1;
      uint64_t result = PassthroughSubject.send(_:)();
      break;
    case 2:
      static os_log_type_t.error.getter();
      uint64_t result = os_log(_:dso:log:_:_:)();
      uint64_t v23 = v11;
      if (*(void *)(v11 + 88) != 2)
      {
        uint64_t v24 = swift_allocObject();
        *(void *)(v24 + 16) = v35;
        *(void *)(v24 + 24) = v11;
        uint64_t v47 = sub_101023D0C;
        uint64_t v48 = v24;
        Swift::String aBlock = _NSConcreteStackBlock;
        uint64_t v44 = 1107296256;
        long long v45 = sub_1004B5480;
        id v46 = &unk_101602B98;
        unint64_t v25 = _Block_copy(&aBlock);
        swift_retain();
        swift_retain();
        unint64_t v26 = v36;
        static DispatchQoS.unspecified.getter();
        uint64_t v49 = _swiftEmptyArrayStorage;
        sub_101020950((unint64_t *)&qword_10163B7E0, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
        sub_10000588C((uint64_t *)&unk_10163F350);
        sub_100062734((unint64_t *)&qword_10163B7F0, (uint64_t *)&unk_10163F350);
        uint64_t v27 = v37;
        uint64_t v21 = v42;
        uint64_t v28 = v41;
        dispatch thunk of SetAlgebra.init<A>(_:)();
        OS_dispatch_queue.async(group:qos:flags:execute:)();
        _Block_release(v25);
        (*(void (**)(char *, uint64_t))(v40 + 8))(v27, v28);
        (*(void (**)(char *, uint64_t))(v38 + 8))(v26, v39);
        swift_release();
        uint64_t result = sub_10100E2B8(0);
      }
      break;
    case 3:
      static os_log_type_t.error.getter();
      os_log(_:dso:log:_:_:)();
      uint64_t v23 = v11;
      if (*(void *)(v11 + 88) == 3)
      {
        static os_log_type_t.default.getter();
        uint64_t result = os_log(_:dso:log:_:_:)();
      }
      else
      {
        uint64_t v29 = swift_allocObject();
        *(void *)(v29 + 16) = v35;
        *(void *)(v29 + 24) = v11;
        uint64_t v47 = sub_101023CEC;
        uint64_t v48 = v29;
        Swift::String aBlock = _NSConcreteStackBlock;
        uint64_t v44 = 1107296256;
        long long v45 = sub_1004B5480;
        id v46 = &unk_101602B48;
        uint64_t v30 = _Block_copy(&aBlock);
        swift_retain();
        swift_retain();
        uint64_t v31 = v36;
        static DispatchQoS.unspecified.getter();
        uint64_t v49 = _swiftEmptyArrayStorage;
        sub_101020950((unint64_t *)&qword_10163B7E0, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
        sub_10000588C((uint64_t *)&unk_10163F350);
        sub_100062734((unint64_t *)&qword_10163B7F0, (uint64_t *)&unk_10163F350);
        uint64_t v32 = v37;
        uint64_t v33 = v41;
        dispatch thunk of SetAlgebra.init<A>(_:)();
        OS_dispatch_queue.async(group:qos:flags:execute:)();
        _Block_release(v30);
        (*(void (**)(char *, uint64_t))(v40 + 8))(v32, v33);
        (*(void (**)(char *, uint64_t))(v38 + 8))(v31, v39);
        swift_release();
        if (qword_101636CD8 != -1) {
          swift_once();
        }
        sub_1000A5940();
        sub_100F16CBC(0, 0);
        swift_release();
        uint64_t result = sub_10100E2B8(0);
        uint64_t v21 = v42;
      }
      break;
    default:
      static os_log_type_t.error.getter();
      uint64_t result = os_log(_:dso:log:_:_:)();
      uint64_t v23 = v11;
      break;
  }
  *(void *)(v23 + 88) = v21;
  return result;
}

uint64_t sub_1010120B4(uint64_t a1, uint64_t a2)
{
  Transaction.capture()();
  uint64_t result = swift_unknownObjectWeakLoadStrong();
  if (result)
  {
    sub_10009D8A0(a2, 0);
    return swift_unknownObjectRelease();
  }
  return result;
}

uint64_t sub_101012118(uint64_t a1, uint64_t a2)
{
  Transaction.capture()();
  if (swift_unknownObjectWeakLoadStrong())
  {
    sub_10009D8A0(a2, 0);
    swift_unknownObjectRelease();
  }
  uint64_t result = swift_unknownObjectWeakLoadStrong();
  if (result)
  {
    return swift_unknownObjectRelease();
  }
  return result;
}

uint64_t sub_10101219C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v14 = a2;
  uint64_t v5 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v16 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v7 = (char *)&v14 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = type metadata accessor for DispatchQoS();
  uint64_t v8 = *(void *)(v15 - 8);
  __chkstk_darwin(v15);
  uint64_t v10 = (char *)&v14 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  static os_log_type_t.default.getter();
  if (qword_101637270 != -1) {
    swift_once();
  }
  os_log(_:dso:log:_:_:)();
  static os_log_type_t.default.getter();
  os_log(_:dso:log:_:_:)();
  uint64_t v11 = (void *)swift_allocObject();
  v11[2] = v14;
  v11[3] = a3;
  v11[4] = a1;
  aBlock[4] = sub_1005518DC;
  aBlock[5] = v11;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_1004B5480;
  aBlock[3] = &unk_101601FE0;
  id v12 = _Block_copy(aBlock);
  swift_retain();
  swift_retain();
  static DispatchQoS.unspecified.getter();
  id v17 = _swiftEmptyArrayStorage;
  sub_101020950((unint64_t *)&qword_10163B7E0, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
  sub_10000588C((uint64_t *)&unk_10163F350);
  sub_100062734((unint64_t *)&qword_10163B7F0, (uint64_t *)&unk_10163F350);
  dispatch thunk of SetAlgebra.init<A>(_:)();
  OS_dispatch_queue.async(group:qos:flags:execute:)();
  _Block_release(v12);
  (*(void (**)(char *, uint64_t))(v16 + 8))(v7, v5);
  (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v15);
  return swift_release();
}

uint64_t sub_101012504(uint64_t a1, void *a2, uint64_t (*a3)(uint64_t), uint64_t a4)
{
  unint64_t v36 = a3;
  uint64_t v34 = a1;
  uint64_t v6 = sub_10000588C(&qword_10163C6C8);
  __chkstk_darwin(v6 - 8);
  uint64_t v8 = (char *)v28 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = sub_10000588C(&qword_101667310);
  uint64_t v31 = *(void *)(v9 - 8);
  __chkstk_darwin(v9);
  uint64_t v11 = (char *)v28 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = sub_10000588C(&qword_101667318);
  uint64_t v32 = *(void *)(v12 - 8);
  uint64_t v33 = v12;
  __chkstk_darwin(v12);
  uint64_t v14 = (char *)v28 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (a2[17] && (swift_retain(), char v15 = sub_1004B3448(), swift_release(), (v15 & 1) != 0))
  {
    uint64_t v30 = a4;
    static os_log_type_t.default.getter();
    if (qword_101637270 != -1) {
      swift_once();
    }
    os_log(_:dso:log:_:_:)();
    uint64_t v16 = swift_allocObject();
    v28[0] = v16;
    *(void *)(v16 + 16) = 0;
    uint64_t v29 = (uint64_t *)(v16 + 16);
    id v35 = (id)a2[21];
    sub_10000588C(&qword_101648980);
    sub_100062734(&qword_10163C7C0, &qword_101648980);
    Publisher.first()();
    v28[1] = a2;
    id v17 = (void *)a2[6];
    id v35 = v17;
    uint64_t v18 = type metadata accessor for OS_dispatch_queue.SchedulerOptions();
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v18 - 8) + 56))(v8, 1, 1, v18);
    sub_10001D4B0(0, (unint64_t *)&qword_1016376E0);
    sub_100062734(&qword_101667320, &qword_101667310);
    sub_10033149C((unint64_t *)&qword_10166C020, (unint64_t *)&qword_1016376E0);
    id v19 = v17;
    Publisher.receive<A>(on:options:)();
    sub_10001DAB4((uint64_t)v8, &qword_10163C6C8);

    (*(void (**)(char *, uint64_t))(v31 + 8))(v11, v9);
    uint64_t v20 = (void *)swift_allocObject();
    uint64_t v21 = v30;
    v20[2] = v36;
    v20[3] = v21;
    uint64_t v22 = v34;
    v20[4] = v28[0];
    v20[5] = v22;
    sub_100062734(&qword_101667328, &qword_101667318);
    swift_retain();
    swift_retain();
    swift_retain();
    uint64_t v23 = v33;
    uint64_t v24 = Publisher<>.sink(receiveValue:)();
    swift_release();
    (*(void (**)(char *, uint64_t))(v32 + 8))(v14, v23);
    unint64_t v25 = v29;
    swift_beginAccess();
    *unint64_t v25 = v24;
    swift_release();
    swift_retain();
    OSAllocatedUnfairLock.callAsFunction<A>(_:)();
    swift_release();
    return swift_release();
  }
  else
  {
    static os_log_type_t.default.getter();
    if (qword_101637270 != -1) {
      swift_once();
    }
    uint64_t v27 = os_log(_:dso:log:_:_:)();
    return v36(v27);
  }
}

void sub_101012A90(uint64_t a1, void (*a2)(uint64_t))
{
  static os_log_type_t.default.getter();
  if (qword_101637270 != -1) {
    swift_once();
  }
  uint64_t v3 = os_log(_:dso:log:_:_:)();
  a2(v3);
  Transaction.capture()();
}

uint64_t sub_101012B38(void *a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v39 = *(void *)(v4 - 8);
  uint64_t v40 = v4;
  __chkstk_darwin(v4);
  unint64_t v37 = (char *)&v35 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v38 = type metadata accessor for DispatchQoS();
  uint64_t v36 = *(void *)(v38 - 8);
  __chkstk_darwin(v38);
  id v35 = (char *)&v35 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  static os_log_type_t.default.getter();
  if (qword_101637268 != -1) {
    swift_once();
  }
  sub_10000588C((uint64_t *)&unk_10163AD00);
  uint64_t v7 = swift_allocObject();
  long long v41 = xmmword_101342130;
  *(_OWORD *)(v7 + 16) = xmmword_101342130;
  id v8 = a1;
  id v9 = [v8 description];
  uint64_t v10 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v12 = v11;

  *(void *)(v7 + 56) = &type metadata for String;
  *(void *)(v7 + 64) = sub_10000B4CC();
  *(void *)(v7 + 32) = v10;
  *(void *)(v7 + 40) = v12;
  os_log(_:dso:log:_:_:)();
  swift_bridgeObjectRelease();
  sub_10000588C(&qword_1016672C0);
  swift_allocObject();
  uint64_t v13 = Future.init()();
  uint64_t v14 = (void *)swift_allocObject();
  v14[2] = v2;
  v14[3] = v8;
  v14[4] = v13;
  id v15 = v8;
  swift_retain_n();
  swift_retain_n();
  id v42 = v15;
  QueueSynchronizer.conditionalSync<A>(_:)();
  int v16 = aBlock;
  static os_log_type_t.default.getter();
  if (qword_101637270 != -1) {
    swift_once();
  }
  uint64_t v17 = swift_allocObject();
  *(_OWORD *)(v17 + 16) = v41;
  *(void *)(v17 + 56) = &type metadata for Bool;
  *(void *)(v17 + 64) = &protocol witness table for Bool;
  *(unsigned char *)(v17 + 32) = v16;
  os_log(_:dso:log:_:_:)();
  swift_bridgeObjectRelease();
  static os_log_type_t.default.getter();
  if (v16)
  {
    os_log(_:dso:log:_:_:)();
    uint64_t v18 = (char *)swift_allocObject();
    id v19 = v42;
    *((void *)v18 + 2) = v42;
    *((void *)v18 + 3) = v2;
    *((void *)v18 + 4) = v13;
    uint64_t v20 = qword_1016371D8;
    id v21 = v19;
    swift_retain_n();
    swift_retain_n();
    id v22 = v21;
    if (v20 != -1) {
      swift_once();
    }
    uint64_t aBlock = 0x7365547265646E75;
    unint64_t v45 = 0xE900000000000074;
    SynchronousCache.cachedValue<A>(key:computeBlock:)();
    swift_bridgeObjectRelease();
    if (v43 == 1)
    {
      uint64_t v23 = (void *)swift_allocObject();
      v23[2] = v22;
      v23[3] = v2;
      v23[4] = v13;
      id v24 = v22;
      swift_retain();
      swift_retain();
      sub_101015194(v24);
      uint64_t v25 = swift_allocObject();
      *(void *)(v25 + 16) = sub_101022BC0;
      *(void *)(v25 + 24) = v23;
      swift_retain();
      Future.addSuccess(block:)();
      swift_release();
      swift_release();
      unint64_t v26 = (void *)swift_allocObject();
      _OWORD v26[2] = v2;
      v26[3] = v24;
      v26[4] = sub_101022BC0;
      v26[5] = v23;
      id v27 = v24;
      swift_retain();
      swift_retain();
      Future.addFailure(block:)();
      swift_release();
      swift_release();
      swift_release_n();

      swift_release();
      swift_release();
      swift_release();
      swift_release();
    }
    else
    {
      uint64_t v33 = type metadata accessor for Transaction();
      __chkstk_darwin(v33);
      *(&v35 - 4) = v2;
      *(&v35 - 3) = (char *)sub_101022BB0;
      *(&v35 - 2) = v18;
      static Transaction.named<A>(_:with:)();
      swift_release();
      swift_release();
      swift_release_n();
    }
    swift_release();
  }
  else
  {
    os_log(_:dso:log:_:_:)();
    static os_log_type_t.default.getter();
    os_log(_:dso:log:_:_:)();
    uint64_t v28 = (void *)swift_allocObject();
    void v28[2] = v2;
    v28[3] = sub_101022B98;
    v28[4] = v14;
    uint64_t v48 = sub_100B64438;
    uint64_t v49 = v28;
    uint64_t aBlock = (uint64_t)_NSConcreteStackBlock;
    unint64_t v45 = 1107296256;
    id v46 = sub_1004B5480;
    uint64_t v47 = &unk_1016024B8;
    uint64_t v29 = _Block_copy(&aBlock);
    swift_retain();
    swift_retain();
    uint64_t v30 = v35;
    static DispatchQoS.unspecified.getter();
    uint64_t v43 = _swiftEmptyArrayStorage;
    sub_101020950((unint64_t *)&qword_10163B7E0, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
    sub_10000588C((uint64_t *)&unk_10163F350);
    sub_100062734((unint64_t *)&qword_10163B7F0, (uint64_t *)&unk_10163F350);
    uint64_t v31 = v37;
    uint64_t v32 = v40;
    dispatch thunk of SetAlgebra.init<A>(_:)();
    OS_dispatch_queue.async(group:qos:flags:execute:)();
    _Block_release(v29);
    (*(void (**)(char *, uint64_t))(v39 + 8))(v31, v32);
    (*(void (**)(char *, uint64_t))(v36 + 8))(v30, v38);
    swift_release();

    swift_release();
    swift_release();
  }
  swift_release();
  return v13;
}

uint64_t sub_1010133E4(uint64_t a1, uint64_t a2, void *a3, uint64_t a4)
{
  uint64_t v7 = (void *)swift_allocObject();
  v7[2] = a3;
  v7[3] = a2;
  v7[4] = a4;
  uint64_t v8 = qword_1016371D8;
  id v9 = a3;
  swift_retain_n();
  swift_retain_n();
  id v10 = v9;
  if (v8 != -1) {
    swift_once();
  }
  SynchronousCache.cachedValue<A>(key:computeBlock:)();
  swift_bridgeObjectRelease();
  if (v18 == 1)
  {
    uint64_t v11 = (void *)swift_allocObject();
    v11[2] = v10;
    v11[3] = a2;
    v11[4] = a4;
    id v12 = v10;
    swift_retain();
    swift_retain();
    sub_101015194(v12);
    uint64_t v13 = swift_allocObject();
    *(void *)(v13 + 16) = sub_10102451C;
    *(void *)(v13 + 24) = v11;
    swift_retain();
    Future.addSuccess(block:)();
    swift_release();
    swift_release();
    uint64_t v14 = (void *)swift_allocObject();
    v14[2] = a2;
    v14[3] = v12;
    v14[4] = sub_10102451C;
    v14[5] = v11;
    id v15 = v12;
    swift_retain();
    swift_retain();
    Future.addFailure(block:)();
    swift_release();
    swift_release();

    swift_release();
    swift_release();
    swift_release();
    swift_release();
  }
  else
  {
    uint64_t v17 = type metadata accessor for Transaction();
    __chkstk_darwin(v17);
    static Transaction.named<A>(_:with:)();
    swift_release();
    swift_release();
  }
  return swift_release();
}

uint64_t sub_1010136E8(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = (void *)swift_allocObject();
  v6[2] = a1;
  v6[3] = a2;
  v6[4] = a3;
  id v7 = a1;
  swift_retain();
  swift_retain();
  sub_101015194(v7);
  uint64_t v8 = swift_allocObject();
  *(void *)(v8 + 16) = sub_10102451C;
  *(void *)(v8 + 24) = v6;
  swift_retain();
  Future.addSuccess(block:)();
  swift_release();
  swift_release();
  id v9 = (void *)swift_allocObject();
  v9[2] = a2;
  v9[3] = v7;
  v9[4] = sub_10102451C;
  v9[5] = v6;
  id v10 = v7;
  swift_retain();
  swift_retain();
  Future.addFailure(block:)();
  swift_release();
  swift_release();
  swift_release();

  return swift_release();
}

uint64_t sub_101013848(void *a1, uint64_t a2, void *a3, uint64_t a4, void *a5)
{
  uint64_t v40 = a4;
  long long v41 = a5;
  uint64_t v8 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v44 = *(void *)(v8 - 8);
  uint64_t v45 = v8;
  __chkstk_darwin(v8);
  id v10 = (char *)&v39 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = type metadata accessor for DispatchQoS();
  uint64_t v42 = *(void *)(v11 - 8);
  uint64_t v43 = v11;
  __chkstk_darwin(v11);
  uint64_t v13 = (char *)&v39 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (a1)
  {
    id v14 = a1;
    static os_log_type_t.default.getter();
    if (qword_101637268 != -1) {
      swift_once();
    }
    sub_10000588C((uint64_t *)&unk_10163AD00);
    uint64_t v15 = swift_allocObject();
    *(_OWORD *)(v15 + 16) = xmmword_101342130;
    id v16 = a3;
    id v17 = [v16 description];
    uint64_t v18 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v20 = v19;

    *(void *)(v15 + 56) = &type metadata for String;
    *(void *)(v15 + 64) = sub_10000B4CC();
    *(void *)(v15 + 32) = v18;
    *(void *)(v15 + 40) = v20;
    os_log(_:dso:log:_:_:)();
    swift_bridgeObjectRelease();
    uint64_t v21 = swift_allocObject();
    *(void *)(v21 + 16) = v41;
    *(void *)(v21 + 24) = v14;
    uint64_t v51 = (void (*)())sub_1010209C8;
    uint64_t v52 = (void *)v21;
    uint64_t aBlock = _NSConcreteStackBlock;
    uint64_t v48 = 1107296256;
    uint64_t v49 = sub_1004B5480;
    id v50 = &unk_101602670;
    id v22 = _Block_copy(&aBlock);
    id v23 = v14;
    swift_retain();
    static DispatchQoS.unspecified.getter();
    id v46 = _swiftEmptyArrayStorage;
    sub_101020950((unint64_t *)&qword_10163B7E0, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
    sub_10000588C((uint64_t *)&unk_10163F350);
    sub_100062734((unint64_t *)&qword_10163B7F0, (uint64_t *)&unk_10163F350);
    uint64_t v24 = v45;
    dispatch thunk of SetAlgebra.init<A>(_:)();
    OS_dispatch_queue.async(group:qos:flags:execute:)();
    _Block_release(v22);
  }
  else
  {
    static os_log_type_t.error.getter();
    if (qword_101637268 != -1) {
      swift_once();
    }
    sub_10000588C((uint64_t *)&unk_10163AD00);
    uint64_t v25 = swift_allocObject();
    *(_OWORD *)(v25 + 16) = xmmword_101347BA0;
    id v26 = a3;
    id v27 = [v26 description];
    uint64_t v28 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v30 = v29;

    *(void *)(v25 + 56) = &type metadata for String;
    unint64_t v31 = sub_10000B4CC();
    *(void *)(v25 + 64) = v31;
    *(void *)(v25 + 32) = v28;
    *(void *)(v25 + 40) = v30;
    uint64_t aBlock = (void **)a2;
    swift_errorRetain();
    sub_10000588C((uint64_t *)&unk_101638EB0);
    uint64_t v32 = String.init<A>(describing:)();
    *(void *)(v25 + 96) = &type metadata for String;
    *(void *)(v25 + 104) = v31;
    *(void *)(v25 + 72) = v32;
    *(void *)(v25 + 80) = v33;
    os_log(_:dso:log:_:_:)();
    swift_bridgeObjectRelease();
    if (a2)
    {
      swift_errorRetain();
      uint64_t v34 = v40;
      sub_101010D50(a2);
      id v35 = (void *)swift_allocObject();
      v35[2] = v41;
      v35[3] = v34;
      v35[4] = a2;
      uint64_t v51 = (void (*)())sub_101020A24;
      uint64_t v52 = v35;
      uint64_t aBlock = _NSConcreteStackBlock;
      uint64_t v48 = 1107296256;
      uint64_t v49 = sub_1004B5480;
      id v50 = &unk_101602620;
      uint64_t v36 = _Block_copy(&aBlock);
      swift_retain();
      swift_errorRetain();
      swift_retain();
      static DispatchQoS.unspecified.getter();
      id v46 = _swiftEmptyArrayStorage;
      sub_101020950((unint64_t *)&qword_10163B7E0, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
      sub_10000588C((uint64_t *)&unk_10163F350);
      sub_100062734((unint64_t *)&qword_10163B7F0, (uint64_t *)&unk_10163F350);
      uint64_t v24 = v45;
      dispatch thunk of SetAlgebra.init<A>(_:)();
      OS_dispatch_queue.async(group:qos:flags:execute:)();
      _Block_release(v36);
      swift_errorRelease();
    }
    else
    {
      static os_log_type_t.fault.getter();
      os_log(_:dso:log:_:_:)();
      uint64_t v51 = sub_101022C6C;
      uint64_t v52 = v41;
      uint64_t aBlock = _NSConcreteStackBlock;
      uint64_t v48 = 1107296256;
      uint64_t v49 = sub_1004B5480;
      id v50 = &unk_1016025D0;
      unint64_t v37 = _Block_copy(&aBlock);
      swift_retain();
      static DispatchQoS.unspecified.getter();
      id v46 = _swiftEmptyArrayStorage;
      sub_101020950((unint64_t *)&qword_10163B7E0, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
      sub_10000588C((uint64_t *)&unk_10163F350);
      sub_100062734((unint64_t *)&qword_10163B7F0, (uint64_t *)&unk_10163F350);
      uint64_t v24 = v45;
      dispatch thunk of SetAlgebra.init<A>(_:)();
      OS_dispatch_queue.async(group:qos:flags:execute:)();
      _Block_release(v37);
    }
  }
  (*(void (**)(char *, uint64_t))(v44 + 8))(v10, v24);
  (*(void (**)(char *, uint64_t))(v42 + 8))(v13, v43);
  return swift_release();
}

void sub_10101401C()
{
  type metadata accessor for CKError(0);
  sub_1004A0BC8((uint64_t)_swiftEmptyArrayStorage);
  sub_101020950(&qword_101638668, type metadata accessor for CKError);
  _BridgedStoredNSError.init(_:userInfo:)();
  Future.finish(error:)();
}

uint64_t sub_1010140D0(uint64_t a1, uint64_t a2, void *a3, uint64_t (*a4)(void, uint64_t), uint64_t a5)
{
  *(void *)&long long v23 = a1;
  swift_errorRetain();
  sub_10000588C(&qword_101638D40);
  type metadata accessor for CKError(0);
  if ((swift_dynamicCast() & 1) == 0) {
    goto LABEL_21;
  }
  id v9 = v25;
  sub_101020950(&qword_101638668, type metadata accessor for CKError);
  _BridgedStoredNSError.code.getter();
  if ((void)v23 == 26)
  {

LABEL_4:
    static os_log_type_t.error.getter();
    if (qword_101637268 != -1) {
      swift_once();
    }
    os_log(_:dso:log:_:_:)();
    sub_101014580(0);
    static os_log_type_t.default.getter();
    os_log(_:dso:log:_:_:)();
    sub_101015194(a3);
    uint64_t v10 = swift_allocObject();
    *(void *)(v10 + 16) = a4;
    *(void *)(v10 + 24) = a5;
    swift_retain();
    Future.addSuccess(block:)();
    swift_release();
    swift_release();
    uint64_t v11 = swift_allocObject();
    *(void *)(v11 + 16) = a4;
    *(void *)(v11 + 24) = a5;
    swift_retain();
    Future.addFailure(block:)();
    swift_release();
    swift_release();
    return swift_release();
  }
  uint64_t v13 = _BridgedStoredNSError.userInfo.getter();
  uint64_t v14 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  if (*(void *)(v13 + 16) && (uint64_t v16 = sub_100723FF4(v14, v15), (v17 & 1) != 0))
  {
    sub_10012F428(*(void *)(v13 + 56) + 32 * v16, (uint64_t)&v23);
  }
  else
  {
    long long v23 = 0u;
    long long v24 = 0u;
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (!*((void *)&v24 + 1))
  {

    uint64_t v18 = (uint64_t *)&unk_101644360;
LABEL_20:
    sub_10001DAB4((uint64_t)&v23, v18);
    goto LABEL_21;
  }
  sub_10000588C(&qword_101667348);
  if (swift_dynamicCast())
  {
    sub_101009E24((uint64_t)v25, (uint64_t)&v23);
    swift_bridgeObjectRelease();
    if (*((void *)&v24 + 1))
    {
      static os_log_type_t.error.getter();
      if (qword_101637268 != -1) {
        swift_once();
      }
      os_log(_:dso:log:_:_:)();

      sub_10001DAB4((uint64_t)&v23, &qword_101667350);
      goto LABEL_4;
    }

    uint64_t v18 = &qword_101667350;
    goto LABEL_20;
  }

LABEL_21:
  static os_log_type_t.error.getter();
  if (qword_101637268 != -1) {
    swift_once();
  }
  sub_10000588C((uint64_t *)&unk_10163AD00);
  uint64_t v19 = swift_allocObject();
  *(_OWORD *)(v19 + 16) = xmmword_101342130;
  swift_getErrorValue();
  uint64_t v20 = Error.localizedDescription.getter();
  uint64_t v22 = v21;
  *(void *)(v19 + 56) = &type metadata for String;
  *(void *)(v19 + 64) = sub_10000B4CC();
  *(void *)(v19 + 32) = v20;
  *(void *)(v19 + 40) = v22;
  os_log(_:dso:log:_:_:)();
  swift_bridgeObjectRelease();
  return a4(0, a1);
}

void sub_101014580(char a1)
{
  uint64_t v3 = v1;
  uint64_t v5 = type metadata accessor for DispatchPredicate();
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v8 = (id *)((char *)&v46 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0));
  id v9 = (void *)v3[4];
  *uint64_t v8 = v9;
  (*(void (**)(void *, void, uint64_t))(v6 + 104))(v8, enum case for DispatchPredicate.notOnQueue(_:), v5);
  id v10 = v9;
  LOBYTE(v9) = _dispatchPreconditionTest(_:)();
  (*(void (**)(void *, uint64_t))(v6 + 8))(v8, v5);
  if (v9)
  {
    uint64_t v2 = dispatch_group_create();
    static os_log_type_t.default.getter();
    if (qword_101637268 == -1) {
      goto LABEL_3;
    }
  }
  else
  {
    __break(1u);
  }
  swift_once();
LABEL_3:
  uint64_t v49 = sub_10000588C((uint64_t *)&unk_10163AD00);
  uint64_t v11 = swift_allocObject();
  long long v48 = xmmword_101342130;
  *(_OWORD *)(v11 + 16) = xmmword_101342130;
  unint64_t v12 = 0xEE00646E756F4620;
  unint64_t v13 = 0x746F4E20656E6F5ALL;
  uint64_t v14 = (void *)v11;
  switch(a1)
  {
    case 1:
      unint64_t v12 = 0xEA00000000007470;
      unint64_t v13 = 0x6D657474612D6552;
      break;
    case 2:
      unint64_t v12 = 0xEC00000064657465;
      unint64_t v13 = 0x6C656420656E6F5ALL;
      break;
    case 3:
      unint64_t v12 = 0xEB00000000746E75;
      unint64_t v13 = 0x6F6363612077654ELL;
      break;
    case 4:
      unint64_t v12 = 0x800000010141D810;
      unint64_t v13 = 0xD000000000000010;
      break;
    default:
      break;
  }
  *(void *)(v11 + 56) = &type metadata for String;
  unint64_t v47 = sub_10000B4CC();
  v14[8] = v47;
  v14[4] = v13;
  v14[5] = v12;
  os_log(_:dso:log:_:_:)();
  swift_bridgeObjectRelease();
  QueueSynchronizer.conditionalSync<A>(_:)();
  unint64_t v15 = v50;
  if (!v50)
  {
    static os_log_type_t.default.getter();
    os_log(_:dso:log:_:_:)();
    uint64_t Strong = swift_unknownObjectWeakLoadStrong();
    if (!Strong)
    {
      static os_log_type_t.error.getter();
      os_log(_:dso:log:_:_:)();
      static os_log_type_t.default.getter();
      os_log(_:dso:log:_:_:)();
      QueueSynchronizer.conditionalSync<A>(_:)();
      goto LABEL_27;
    }
    id v17 = *(id *)(Strong + 152);
    swift_unknownObjectRelease();
    static os_log_type_t.default.getter();
    id v46 = (id)qword_10170EFC0;
    uint64_t v18 = swift_allocObject();
    *(_OWORD *)(v18 + 16) = v48;
    *(void *)(v18 + 56) = sub_10001D4B0(0, (unint64_t *)&unk_10165F040);
    *(void *)(v18 + 64) = sub_10033149C(&qword_1016672E8, (unint64_t *)&unk_10165F040);
    *(void *)(v18 + 32) = v17;
    id v19 = v17;
    os_log(_:dso:log:_:_:)();
    swift_bridgeObjectRelease();
    dispatch_group_enter(v2);
    QueueSynchronizer.conditionalSync<A>(_:)();
    static os_log_type_t.default.getter();
    os_log(_:dso:log:_:_:)();
    id v20 = objc_allocWithZone((Class)CKRecordZone);
    id v46 = v19;
    id v21 = [v20 initWithZoneID:v19];
    sub_10001D4B0(0, &qword_1016672F0);
    sub_10000588C(&qword_10166BD20);
    uint64_t v22 = swift_allocObject();
    *(_OWORD *)(v22 + 16) = xmmword_101347EF0;
    *(void *)(v22 + 32) = v21;
    unint64_t v50 = v22;
    specialized Array._endMutation()();
    unint64_t v23 = v50;
    id v24 = v21;
    unint64_t v25 = v23;
    id v26 = _swiftEmptyArrayStorage;
    v27.super.super.super.super.Class isa = CKModifyRecordZonesOperation.init(recordZonesToSave:recordZoneIDsToDelete:)(*(Swift::OpaquePointer_optional *)&v25, v51).super.super.super.super.isa;
    uint64_t v28 = (void *)swift_allocObject();
    void v28[2] = v3;
    v28[3] = v24;
    v28[4] = v2;
    id v29 = v24;
    swift_retain();
    uint64_t v30 = v2;
    CKModifyRecordZonesOperation.undeprecated_modifyRecordZonesCompletionBlock.setter();
    if (qos_class_self() >= QOS_CLASS_USER_INITIATED) {
      [(objc_class *)v27.super.super.super.super.isa setQualityOfService:25];
    }
    id v31 = [(objc_class *)v27.super.super.super.super.isa configuration];
    if (v31)
    {
      uint64_t v32 = v31;
      [v31 setAutomaticallyRetryNetworkFailures:0];

      id v33 = [(objc_class *)v27.super.super.super.super.isa configuration];
      if (v33)
      {
        uint64_t v34 = v33;
        [v33 setDiscretionaryNetworkBehavior:0];

        __chkstk_darwin(v35);
        *(&v46 - 2) = v3;
        *(&v46 - 1) = v27.super.super.super.super.isa;
        QueueSynchronizer.conditionalSync<A>(_:)();

        goto LABEL_20;
      }
    }
    else
    {
      __break(1u);
    }
    __break(1u);
    JUMPOUT(0x101014F9CLL);
  }
  if (v50 == 1)
  {
    static os_log_type_t.default.getter();
    os_log(_:dso:log:_:_:)();
    goto LABEL_20;
  }
  if (v50 != 2)
  {
    swift_errorRetain();
    static os_log_type_t.error.getter();
    uint64_t v36 = swift_allocObject();
    *(_OWORD *)(v36 + 16) = v48;
    unint64_t v50 = v15;
    swift_errorRetain();
    sub_10000588C(&qword_101638D40);
    uint64_t v37 = String.init<A>(describing:)();
    unint64_t v38 = v47;
    *(void *)(v36 + 56) = &type metadata for String;
    *(void *)(v36 + 64) = v38;
    *(void *)(v36 + 32) = v37;
    *(void *)(v36 + 40) = v39;
    os_log(_:dso:log:_:_:)();
    swift_bridgeObjectRelease();
    sub_101022184(v15);
LABEL_20:
    static os_log_type_t.default.getter();
    os_log(_:dso:log:_:_:)();
    OS_dispatch_group.wait()();
    QueueSynchronizer.conditionalSync<A>(_:)();
    unint64_t v40 = v50;
    if (v50 < 2)
    {
      static os_log_type_t.error.getter();
    }
    else
    {
      if (v50 != 2)
      {
        swift_errorRetain();
        static os_log_type_t.error.getter();
        uint64_t v41 = swift_allocObject();
        *(_OWORD *)(v41 + 16) = v48;
        unint64_t v50 = v40;
        swift_errorRetain();
        sub_10000588C(&qword_101638D40);
        uint64_t v42 = String.init<A>(describing:)();
        unint64_t v43 = v47;
        *(void *)(v41 + 56) = &type metadata for String;
        *(void *)(v41 + 64) = v43;
        *(void *)(v41 + 32) = v42;
        *(void *)(v41 + 40) = v44;
        os_log(_:dso:log:_:_:)();
        swift_bridgeObjectRelease();
        uint64_t v45 = type metadata accessor for Transaction();
        __chkstk_darwin(v45);
        *(&v46 - 4) = v3;
        *(&v46 - 3) = sub_1010221DC;
        *(&v46 - 2) = v3;
        swift_retain();
        static Transaction.named<A>(_:with:)();

        sub_101022184(v40);
        sub_101022184(v15);
        swift_release();
        sub_101022184(v40);
        return;
      }
      static os_log_type_t.default.getter();
    }
    os_log(_:dso:log:_:_:)();

    sub_101022184(v15);
    return;
  }
  static os_log_type_t.default.getter();
  os_log(_:dso:log:_:_:)();
LABEL_27:
}

uint64_t sub_101014FB0(uint64_t *a1, uint64_t (*a2)(uint64_t, void))
{
  uint64_t v3 = *a1;
  static os_log_type_t.default.getter();
  if (qword_101637268 != -1) {
    swift_once();
  }
  os_log(_:dso:log:_:_:)();
  return a2(v3, 0);
}

uint64_t sub_101015064(uint64_t a1, uint64_t (*a2)(void, uint64_t))
{
  static os_log_type_t.error.getter();
  if (qword_101637268 != -1) {
    swift_once();
  }
  sub_10000588C((uint64_t *)&unk_10163AD00);
  uint64_t v4 = swift_allocObject();
  *(_OWORD *)(v4 + 16) = xmmword_101342130;
  swift_getErrorValue();
  uint64_t v5 = Error.localizedDescription.getter();
  uint64_t v7 = v6;
  *(void *)(v4 + 56) = &type metadata for String;
  *(void *)(v4 + 64) = sub_10000B4CC();
  *(void *)(v4 + 32) = v5;
  *(void *)(v4 + 40) = v7;
  os_log(_:dso:log:_:_:)();
  swift_bridgeObjectRelease();
  return a2(0, a1);
}

id sub_101015194(void *a1)
{
  uint64_t v2 = v1;
  sub_10000588C(&qword_1016672C0);
  swift_allocObject();
  uint64_t v4 = Future.init()();
  uint64_t v5 = sub_10001D4B0(0, &qword_1016672C8);
  sub_10000588C(&qword_10166BD20);
  uint64_t v6 = swift_allocObject();
  *(_OWORD *)(v6 + 16) = xmmword_101347EF0;
  *(void *)(v6 + 32) = a1;
  uint64_t v16 = (void *)v6;
  specialized Array._endMutation()();
  id v7 = a1;
  v17.value._rawValue = v16;
  v17.is_nil = 0;
  v8.super.super.super.super.Class isa = CKModifyRecordsOperation.init(recordsToSave:recordIDsToDelete:)(v17, v18).super.super.super.super.isa;
  if (qos_class_self() >= QOS_CLASS_USER_INITIATED) {
    [(objc_class *)v8.super.super.super.super.isa setQualityOfService:25];
  }
  id result = [(objc_class *)v8.super.super.super.super.isa configuration];
  if (!result)
  {
    __break(1u);
    goto LABEL_9;
  }
  id v10 = result;
  [result setAutomaticallyRetryNetworkFailures:0];

  id result = [(objc_class *)v8.super.super.super.super.isa configuration];
  if (!result)
  {
LABEL_9:
    __break(1u);
    return result;
  }
  uint64_t v11 = result;
  [result setDiscretionaryNetworkBehavior:0];

  uint64_t v12 = swift_allocObject();
  *(void *)(v12 + 16) = v2;
  *(void *)(v12 + 24) = v4;
  swift_retain();
  swift_retain();
  CKModifyRecordsOperation.undeprecated_modifyRecordsCompletionBlock.setter();
  static os_log_type_t.default.getter();
  if (qword_101637268 != -1) {
    swift_once();
  }
  sub_10000588C((uint64_t *)&unk_10163AD00);
  uint64_t v13 = swift_allocObject();
  *(_OWORD *)(v13 + 16) = xmmword_101342130;
  *(void *)(v13 + 56) = v5;
  *(void *)(v13 + 64) = sub_10033149C(&qword_1016672D0, &qword_1016672C8);
  *(CKModifyRecordsOperation *)(v13 + 32) = v8;
  uint64_t v14 = v8.super.super.super.super.isa;
  os_log(_:dso:log:_:_:)();
  uint64_t v15 = swift_bridgeObjectRelease();
  __chkstk_darwin(v15);
  QueueSynchronizer.conditionalSync<A>(_:)();

  return (id)v4;
}

uint64_t sub_101015470(unint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v8 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  uint64_t v11 = (char *)&v29 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = type metadata accessor for DispatchQoS();
  uint64_t v13 = *(void *)(v12 - 8);
  uint64_t result = __chkstk_darwin(v12);
  uint64_t v16 = (char *)&v29 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (a3)
  {
    uint64_t v30 = v8;
    uint64_t v31 = v9;
    uint64_t v32 = v13;
    uint64_t v33 = v12;
    swift_errorRetain();
    static os_log_type_t.error.getter();
    if (qword_101637268 != -1) {
      swift_once();
    }
    sub_10000588C((uint64_t *)&unk_10163AD00);
    uint64_t v17 = swift_allocObject();
    *(_OWORD *)(v17 + 16) = xmmword_101342130;
    swift_getErrorValue();
    uint64_t v18 = Error.localizedDescription.getter();
    uint64_t v20 = v19;
    *(void *)(v17 + 56) = &type metadata for String;
    *(void *)(v17 + 64) = sub_10000B4CC();
    *(void *)(v17 + 32) = v18;
    *(void *)(v17 + 40) = v20;
    os_log(_:dso:log:_:_:)();
    swift_bridgeObjectRelease();
    uint64_t v21 = swift_allocObject();
    *(void *)(v21 + 16) = a5;
    *(void *)(v21 + 24) = a3;
    uint64_t v39 = sub_100552854;
    uint64_t v40 = v21;
    uint64_t aBlock = _NSConcreteStackBlock;
    uint64_t v36 = 1107296256;
    uint64_t v37 = sub_1004B5480;
    unint64_t v38 = &unk_101602440;
    uint64_t v22 = _Block_copy(&aBlock);
    swift_errorRetain();
    swift_retain();
    static DispatchQoS.unspecified.getter();
    uint64_t v34 = _swiftEmptyArrayStorage;
    sub_101020950((unint64_t *)&qword_10163B7E0, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
    sub_10000588C((uint64_t *)&unk_10163F350);
    sub_100062734((unint64_t *)&qword_10163B7F0, (uint64_t *)&unk_10163F350);
    uint64_t v23 = v30;
    dispatch thunk of SetAlgebra.init<A>(_:)();
    OS_dispatch_queue.async(group:qos:flags:execute:)();
    _Block_release(v22);
    swift_errorRelease();
    (*(void (**)(char *, uint64_t))(v31 + 8))(v11, v23);
    goto LABEL_5;
  }
  if (a1)
  {
    uint64_t v31 = a5;
    if (a1 >> 62)
    {
      swift_bridgeObjectRetain();
      id v24 = (void *)_CocoaArrayWrapper.endIndex.getter();
      if (v24)
      {
LABEL_10:
        uint64_t v33 = v12;
        if ((a1 & 0xC000000000000001) != 0)
        {
          id v25 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
        }
        else
        {
          if (!*(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10))
          {
            __break(1u);
            goto LABEL_21;
          }
          id v25 = *(id *)(a1 + 32);
        }
        id v24 = v25;
        uint64_t v32 = v13;
        swift_bridgeObjectRelease();
        static os_log_type_t.default.getter();
        if (qword_101637268 == -1)
        {
LABEL_14:
          os_log(_:dso:log:_:_:)();
          uint64_t v26 = swift_allocObject();
          *(void *)(v26 + 16) = v31;
          *(void *)(v26 + 24) = v24;
          uint64_t v39 = sub_1010209C8;
          uint64_t v40 = v26;
          uint64_t aBlock = _NSConcreteStackBlock;
          uint64_t v36 = 1107296256;
          uint64_t v37 = sub_1004B5480;
          unint64_t v38 = &unk_1016023F0;
          CKModifyRecordZonesOperation v27 = _Block_copy(&aBlock);
          swift_retain();
          id v28 = v24;
          static DispatchQoS.unspecified.getter();
          uint64_t v34 = _swiftEmptyArrayStorage;
          sub_101020950((unint64_t *)&qword_10163B7E0, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
          sub_10000588C((uint64_t *)&unk_10163F350);
          sub_100062734((unint64_t *)&qword_10163B7F0, (uint64_t *)&unk_10163F350);
          dispatch thunk of SetAlgebra.init<A>(_:)();
          OS_dispatch_queue.async(group:qos:flags:execute:)();
          _Block_release(v27);

          (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v8);
LABEL_5:
          (*(void (**)(char *, uint64_t))(v32 + 8))(v16, v33);
          return swift_release();
        }
LABEL_21:
        swift_once();
        goto LABEL_14;
      }
    }
    else
    {
      id v24 = *(void **)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
      swift_bridgeObjectRetain();
      if (v24) {
        goto LABEL_10;
      }
    }
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t sub_101015AE0(void *a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v30 = *(void *)(v4 - 8);
  uint64_t v31 = v4;
  __chkstk_darwin(v4);
  id v28 = (char *)&v26 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v29 = type metadata accessor for DispatchQoS();
  uint64_t v27 = *(void *)(v29 - 8);
  __chkstk_darwin(v29);
  uint64_t v26 = (char *)&v26 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  static os_log_type_t.default.getter();
  if (qword_101637268 != -1) {
    swift_once();
  }
  sub_10000588C((uint64_t *)&unk_10163AD00);
  uint64_t v7 = swift_allocObject();
  long long v32 = xmmword_101342130;
  *(_OWORD *)(v7 + 16) = xmmword_101342130;
  *(void *)(v7 + 56) = sub_10001D4B0(0, &qword_10163CB60);
  *(void *)(v7 + 64) = sub_10033149C(&qword_101667330, &qword_10163CB60);
  *(void *)(v7 + 32) = a1;
  id v8 = a1;
  os_log(_:dso:log:_:_:)();
  swift_bridgeObjectRelease();
  sub_10000588C(&qword_101667338);
  swift_allocObject();
  uint64_t v9 = Future.init()();
  uint64_t v10 = (void *)swift_allocObject();
  v10[2] = v2;
  v10[3] = v8;
  v10[4] = v9;
  id v11 = v8;
  swift_retain_n();
  swift_retain_n();
  id v33 = v11;
  QueueSynchronizer.conditionalSync<A>(_:)();
  int v12 = aBlock;
  static os_log_type_t.default.getter();
  if (qword_101637270 != -1) {
    swift_once();
  }
  uint64_t v13 = swift_allocObject();
  *(_OWORD *)(v13 + 16) = v32;
  *(void *)(v13 + 56) = &type metadata for Bool;
  *(void *)(v13 + 64) = &protocol witness table for Bool;
  *(unsigned char *)(v13 + 32) = v12;
  os_log(_:dso:log:_:_:)();
  swift_bridgeObjectRelease();
  static os_log_type_t.default.getter();
  if (v12)
  {
    os_log(_:dso:log:_:_:)();
    uint64_t v14 = (char *)swift_allocObject();
    id v15 = v33;
    *((void *)v14 + 2) = v33;
    *((void *)v14 + 3) = v2;
    *((void *)v14 + 4) = v9;
    uint64_t v16 = qword_1016371D8;
    id v17 = v15;
    swift_retain_n();
    swift_retain_n();
    id v18 = v17;
    if (v16 != -1) {
      swift_once();
    }
    uint64_t aBlock = 0x7365547265646E75;
    unint64_t v36 = 0xE900000000000074;
    SynchronousCache.cachedValue<A>(key:computeBlock:)();
    swift_bridgeObjectRelease();
    if (v34 == 1)
    {
      sub_101016484(v18, v2, v9);
    }
    else
    {
      uint64_t v24 = type metadata accessor for Transaction();
      __chkstk_darwin(v24);
      *(&v26 - 4) = (char *)v2;
      *(&v26 - 3) = (char *)sub_101022AC4;
      *(&v26 - 2) = v14;
      static Transaction.named<A>(_:with:)();
    }
    swift_release();
    swift_release();
    swift_release_n();

    swift_release();
  }
  else
  {
    os_log(_:dso:log:_:_:)();
    static os_log_type_t.default.getter();
    os_log(_:dso:log:_:_:)();
    *(void *)&long long v32 = *(void *)(v2 + 64);
    uint64_t v19 = (void *)swift_allocObject();
    v19[2] = v2;
    v19[3] = sub_101022AAC;
    v19[4] = v10;
    uint64_t v39 = sub_100B64438;
    uint64_t v40 = v19;
    uint64_t aBlock = (uint64_t)_NSConcreteStackBlock;
    unint64_t v36 = 1107296256;
    uint64_t v37 = sub_1004B5480;
    unint64_t v38 = &unk_101602260;
    uint64_t v20 = _Block_copy(&aBlock);
    swift_retain();
    swift_retain();
    uint64_t v21 = v26;
    static DispatchQoS.unspecified.getter();
    uint64_t v34 = _swiftEmptyArrayStorage;
    sub_101020950((unint64_t *)&qword_10163B7E0, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
    sub_10000588C((uint64_t *)&unk_10163F350);
    sub_100062734((unint64_t *)&qword_10163B7F0, (uint64_t *)&unk_10163F350);
    uint64_t v22 = v28;
    uint64_t v23 = v31;
    dispatch thunk of SetAlgebra.init<A>(_:)();
    OS_dispatch_queue.async(group:qos:flags:execute:)();
    _Block_release(v20);
    (*(void (**)(char *, uint64_t))(v30 + 8))(v22, v23);
    (*(void (**)(char *, uint64_t))(v27 + 8))(v21, v29);
    swift_release();

    swift_release();
    swift_release();
  }
  swift_release();
  return v9;
}

uint64_t sub_101016290(uint64_t a1, uint64_t a2, void *a3, uint64_t a4)
{
  uint64_t v7 = (void *)swift_allocObject();
  v7[2] = a3;
  v7[3] = a2;
  v7[4] = a4;
  uint64_t v8 = qword_1016371D8;
  id v9 = a3;
  swift_retain_n();
  swift_retain_n();
  id v10 = v9;
  if (v8 != -1) {
    swift_once();
  }
  SynchronousCache.cachedValue<A>(key:computeBlock:)();
  swift_bridgeObjectRelease();
  if (v13 == 1)
  {
    sub_101016484(v10, a2, a4);
  }
  else
  {
    uint64_t v12 = type metadata accessor for Transaction();
    __chkstk_darwin(v12);
    static Transaction.named<A>(_:with:)();
  }
  swift_release();
  swift_release();

  return swift_release();
}

void sub_101016484(void *a1, uint64_t a2, uint64_t a3)
{
  static os_log_type_t.default.getter();
  if (qword_101637268 != -1) {
    swift_once();
  }
  sub_10000588C((uint64_t *)&unk_10163AD00);
  uint64_t v6 = swift_allocObject();
  *(_OWORD *)(v6 + 16) = xmmword_101342130;
  *(void *)(v6 + 56) = sub_10001D4B0(0, &qword_10163CB60);
  *(void *)(v6 + 64) = sub_10033149C(&qword_101667330, &qword_10163CB60);
  *(void *)(v6 + 32) = a1;
  id v7 = a1;
  os_log(_:dso:log:_:_:)();
  swift_bridgeObjectRelease();
  sub_10001D4B0(0, &qword_1016672C8);
  sub_10000588C(&qword_10166BD20);
  uint64_t v8 = swift_allocObject();
  *(_OWORD *)(v8 + 16) = xmmword_101347EF0;
  *(void *)(v8 + 32) = v7;
  Swift::Bool v17 = v8;
  specialized Array._endMutation()();
  id v9 = v7;
  v18.value._rawValue = 0;
  v18.is_nil = v17;
  v10.super.super.super.super.Class isa = CKModifyRecordsOperation.init(recordsToSave:recordIDsToDelete:)(v18, v19).super.super.super.super.isa;
  if (qos_class_self() >= QOS_CLASS_USER_INITIATED) {
    [(objc_class *)v10.super.super.super.super.isa setQualityOfService:25];
  }
  id v11 = [(objc_class *)v10.super.super.super.super.isa configuration];
  if (v11)
  {
    uint64_t v12 = v11;
    [v11 setAutomaticallyRetryNetworkFailures:0];

    id v13 = [(objc_class *)v10.super.super.super.super.isa configuration];
    if (v13)
    {
      uint64_t v14 = v13;
      [v13 setDiscretionaryNetworkBehavior:0];

      uint64_t v15 = swift_allocObject();
      *(void *)(v15 + 16) = a2;
      *(void *)(v15 + 24) = a3;
      swift_retain();
      swift_retain();
      uint64_t v16 = CKModifyRecordsOperation.undeprecated_modifyRecordsCompletionBlock.setter();
      __chkstk_darwin(v16);
      QueueSynchronizer.conditionalSync<A>(_:)();

      return;
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
}

uint64_t sub_101016758(uint64_t a1, void **a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v9 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v10 = *(void *)(v9 - 8);
  __chkstk_darwin(v9);
  uint64_t v12 = (char *)&v42 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = type metadata accessor for DispatchQoS();
  uint64_t v14 = __chkstk_darwin(v13);
  uint64_t v16 = (char *)&v42 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v47 = v17;
  uint64_t v48 = v14;
  if (a3)
  {
    unint64_t v43 = (char *)&v42 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
    uint64_t v44 = v12;
    uint64_t v18 = a5;
    uint64_t v45 = v10;
    uint64_t v46 = v9;
    swift_errorRetain();
    static os_log_type_t.error.getter();
    if (qword_101637268 != -1) {
      swift_once();
    }
    sub_10000588C((uint64_t *)&unk_10163AD00);
    uint64_t v19 = swift_allocObject();
    *(_OWORD *)(v19 + 16) = xmmword_101347BA0;
    uint64_t aBlock = a2;
    swift_bridgeObjectRetain();
    sub_10000588C(&qword_101667340);
    uint64_t v20 = String.init<A>(describing:)();
    uint64_t v22 = v21;
    *(void *)(v19 + 56) = &type metadata for String;
    unint64_t v23 = sub_10000B4CC();
    *(void *)(v19 + 64) = v23;
    *(void *)(v19 + 32) = v20;
    *(void *)(v19 + 40) = v22;
    uint64_t aBlock = (void **)a3;
    swift_errorRetain();
    sub_10000588C((uint64_t *)&unk_101638EB0);
    uint64_t v24 = String.init<A>(describing:)();
    *(void *)(v19 + 96) = &type metadata for String;
    *(void *)(v19 + 104) = v23;
    *(void *)(v19 + 72) = v24;
    *(void *)(v19 + 80) = v25;
    os_log(_:dso:log:_:_:)();
    swift_bridgeObjectRelease();
    sub_101010D50(a3);
    uint64_t v26 = swift_allocObject();
    *(void *)(v26 + 16) = v18;
    *(void *)(v26 + 24) = a3;
    uint64_t v54 = sub_100554A58;
    uint64_t v55 = v26;
    uint64_t aBlock = _NSConcreteStackBlock;
    uint64_t v51 = 1107296256;
    uint64_t v52 = sub_1004B5480;
    id v53 = &unk_101602350;
    uint64_t v27 = _Block_copy(&aBlock);
    swift_errorRetain();
    swift_retain();
    uint64_t v16 = v43;
    static DispatchQoS.unspecified.getter();
    uint64_t v49 = _swiftEmptyArrayStorage;
    sub_101020950((unint64_t *)&qword_10163B7E0, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
    sub_10000588C((uint64_t *)&unk_10163F350);
    sub_100062734((unint64_t *)&qword_10163B7F0, (uint64_t *)&unk_10163F350);
    id v28 = v44;
    uint64_t v29 = v46;
    dispatch thunk of SetAlgebra.init<A>(_:)();
    OS_dispatch_queue.async(group:qos:flags:execute:)();
    _Block_release(v27);
    swift_errorRelease();
    (*(void (**)(char *, uint64_t))(v45 + 8))(v28, v29);
LABEL_5:
    (*(void (**)(char *, uint64_t))(v47 + 8))(v16, v48);
    return swift_release();
  }
  uint64_t v45 = a4;
  uint64_t v46 = a5;
  static os_log_type_t.default.getter();
  if (qword_101637268 != -1) {
    swift_once();
  }
  sub_10000588C((uint64_t *)&unk_10163AD00);
  uint64_t v31 = swift_allocObject();
  *(_OWORD *)(v31 + 16) = xmmword_101342130;
  uint64_t aBlock = a2;
  swift_bridgeObjectRetain();
  sub_10000588C(&qword_101667340);
  uint64_t v32 = String.init<A>(describing:)();
  uint64_t v34 = v33;
  *(void *)(v31 + 56) = &type metadata for String;
  *(void *)(v31 + 64) = sub_10000B4CC();
  *(void *)(v31 + 32) = v32;
  *(void *)(v31 + 40) = v34;
  os_log(_:dso:log:_:_:)();
  uint64_t result = swift_bridgeObjectRelease();
  if (a2)
  {
    if ((unint64_t)a2 >> 62)
    {
      swift_bridgeObjectRetain();
      uint64_t result = _CocoaArrayWrapper.endIndex.getter();
      if (result) {
        goto LABEL_12;
      }
    }
    else
    {
      uint64_t v35 = *(void *)(((unint64_t)a2 & 0xFFFFFFFFFFFFFF8) + 0x10);
      uint64_t result = swift_bridgeObjectRetain();
      if (v35)
      {
LABEL_12:
        if (((unint64_t)a2 & 0xC000000000000001) != 0)
        {
          id v36 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
        }
        else
        {
          if (!*(void *)(((unint64_t)a2 & 0xFFFFFFFFFFFFFF8) + 0x10))
          {
            __break(1u);
            return result;
          }
          id v36 = a2[4];
        }
        uint64_t v37 = v36;
        uint64_t v38 = v46;
        swift_bridgeObjectRelease();
        uint64_t v39 = swift_allocObject();
        *(void *)(v39 + 16) = v38;
        *(void *)(v39 + 24) = v37;
        uint64_t v54 = sub_1010209C8;
        uint64_t v55 = v39;
        uint64_t aBlock = _NSConcreteStackBlock;
        uint64_t v51 = 1107296256;
        uint64_t v52 = sub_1004B5480;
        id v53 = &unk_101602300;
        uint64_t v40 = _Block_copy(&aBlock);
        swift_retain();
        id v41 = v37;
        static DispatchQoS.unspecified.getter();
        uint64_t v49 = _swiftEmptyArrayStorage;
        sub_101020950((unint64_t *)&qword_10163B7E0, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
        sub_10000588C((uint64_t *)&unk_10163F350);
        sub_100062734((unint64_t *)&qword_10163B7F0, (uint64_t *)&unk_10163F350);
        dispatch thunk of SetAlgebra.init<A>(_:)();
        OS_dispatch_queue.async(group:qos:flags:execute:)();
        _Block_release(v40);

        (*(void (**)(char *, uint64_t))(v10 + 8))(v12, v9);
        goto LABEL_5;
      }
    }
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t sub_101016E50(void *a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v30 = *(void *)(v4 - 8);
  uint64_t v31 = v4;
  __chkstk_darwin(v4);
  id v28 = (char *)&v26 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v29 = type metadata accessor for DispatchQoS();
  uint64_t v27 = *(void *)(v29 - 8);
  __chkstk_darwin(v29);
  uint64_t v26 = (char *)&v26 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  static os_log_type_t.default.getter();
  if (qword_101637268 != -1) {
    swift_once();
  }
  sub_10000588C((uint64_t *)&unk_10163AD00);
  uint64_t v7 = swift_allocObject();
  long long v32 = xmmword_101342130;
  *(_OWORD *)(v7 + 16) = xmmword_101342130;
  *(void *)(v7 + 56) = sub_10001D4B0(0, (unint64_t *)&qword_10163AE60);
  *(void *)(v7 + 64) = sub_10033149C((unint64_t *)&qword_10163AD10, (unint64_t *)&qword_10163AE60);
  *(void *)(v7 + 32) = a1;
  id v8 = a1;
  os_log(_:dso:log:_:_:)();
  swift_bridgeObjectRelease();
  sub_10000588C(&qword_1016672C0);
  swift_allocObject();
  uint64_t v9 = Future.init()();
  uint64_t v10 = (void *)swift_allocObject();
  v10[2] = a2;
  v10[3] = v8;
  v10[4] = SharingCircleWildAdvertisementKey.init(key:);
  v10[5] = 0;
  v10[6] = v9;
  id v11 = v8;
  swift_retain_n();
  swift_retain_n();
  id v33 = v11;
  QueueSynchronizer.conditionalSync<A>(_:)();
  int v12 = aBlock;
  static os_log_type_t.default.getter();
  if (qword_101637270 != -1) {
    swift_once();
  }
  uint64_t v13 = swift_allocObject();
  *(_OWORD *)(v13 + 16) = v32;
  *(void *)(v13 + 56) = &type metadata for Bool;
  *(void *)(v13 + 64) = &protocol witness table for Bool;
  *(unsigned char *)(v13 + 32) = v12;
  os_log(_:dso:log:_:_:)();
  swift_bridgeObjectRelease();
  static os_log_type_t.default.getter();
  if (v12)
  {
    os_log(_:dso:log:_:_:)();
    uint64_t v14 = (char *)swift_allocObject();
    id v15 = v33;
    *((void *)v14 + 2) = v33;
    *((void *)v14 + 3) = SharingCircleWildAdvertisementKey.init(key:);
    *((void *)v14 + 4) = 0;
    *((void *)v14 + 5) = a2;
    *((void *)v14 + 6) = v9;
    uint64_t v16 = qword_1016371D8;
    id v17 = v15;
    swift_retain_n();
    swift_retain_n();
    id v18 = v17;
    if (v16 != -1) {
      swift_once();
    }
    uint64_t aBlock = 0x7365547265646E75;
    unint64_t v36 = 0xE900000000000074;
    SynchronousCache.cachedValue<A>(key:computeBlock:)();
    swift_bridgeObjectRelease();
    if (v34)
    {
      sub_10101805C(v18, a2, v9);
    }
    else
    {
      uint64_t v24 = type metadata accessor for Transaction();
      __chkstk_darwin(v24);
      *(&v26 - 4) = (char *)a2;
      *(&v26 - 3) = (char *)sub_10102099C;
      *(&v26 - 2) = v14;
      static Transaction.named<A>(_:with:)();
    }
    swift_release();
    swift_release();
    swift_release_n();

    swift_release();
    swift_release();
  }
  else
  {
    os_log(_:dso:log:_:_:)();
    static os_log_type_t.default.getter();
    os_log(_:dso:log:_:_:)();
    *(void *)&long long v32 = *(void *)(a2 + 64);
    uint64_t v19 = (void *)swift_allocObject();
    v19[2] = a2;
    v19[3] = sub_101020920;
    v19[4] = v10;
    uint64_t v39 = sub_100B53AE0;
    uint64_t v40 = v19;
    uint64_t aBlock = (uint64_t)_NSConcreteStackBlock;
    unint64_t v36 = 1107296256;
    uint64_t v37 = sub_1004B5480;
    uint64_t v38 = &unk_101601C20;
    uint64_t v20 = _Block_copy(&aBlock);
    swift_retain();
    swift_retain();
    uint64_t v21 = v26;
    static DispatchQoS.unspecified.getter();
    uint64_t v34 = _swiftEmptyArrayStorage;
    sub_101020950((unint64_t *)&qword_10163B7E0, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
    sub_10000588C((uint64_t *)&unk_10163F350);
    sub_100062734((unint64_t *)&qword_10163B7F0, (uint64_t *)&unk_10163F350);
    uint64_t v22 = v28;
    uint64_t v23 = v31;
    dispatch thunk of SetAlgebra.init<A>(_:)();
    OS_dispatch_queue.async(group:qos:flags:execute:)();
    _Block_release(v20);
    (*(void (**)(char *, uint64_t))(v30 + 8))(v22, v23);
    (*(void (**)(char *, uint64_t))(v27 + 8))(v21, v29);
    swift_release();

    swift_release();
    swift_release();
    swift_release();
  }
  return v9;
}

uint64_t sub_101017624(void *a1, void (*a2)(id *), uint64_t a3)
{
  uint64_t v4 = v3;
  uint64_t v8 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v37 = *(void *)(v8 - 8);
  uint64_t v38 = v8;
  __chkstk_darwin(v8);
  uint64_t v35 = (char *)&v32 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v36 = type metadata accessor for DispatchQoS();
  uint64_t v34 = *(void *)(v36 - 8);
  __chkstk_darwin(v36);
  id v33 = (char *)&v32 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  static os_log_type_t.default.getter();
  if (qword_101637268 != -1) {
    swift_once();
  }
  sub_10000588C((uint64_t *)&unk_10163AD00);
  uint64_t v11 = swift_allocObject();
  long long v40 = xmmword_101342130;
  *(_OWORD *)(v11 + 16) = xmmword_101342130;
  *(void *)(v11 + 56) = sub_10001D4B0(0, (unint64_t *)&qword_10163AE60);
  *(void *)(v11 + 64) = sub_10033149C((unint64_t *)&qword_10163AD10, (unint64_t *)&qword_10163AE60);
  *(void *)(v11 + 32) = a1;
  id v12 = a1;
  os_log(_:dso:log:_:_:)();
  swift_bridgeObjectRelease();
  sub_10000588C(&qword_1016672C0);
  swift_allocObject();
  uint64_t v13 = Future.init()();
  uint64_t v14 = (void *)swift_allocObject();
  v14[2] = v4;
  v14[3] = v12;
  uint64_t v39 = a2;
  v14[4] = a2;
  v14[5] = a3;
  v14[6] = v13;
  id v15 = v12;
  swift_retain_n();
  uint64_t v42 = a3;
  swift_retain_n();
  swift_retain_n();
  id v41 = v15;
  QueueSynchronizer.conditionalSync<A>(_:)();
  int v16 = aBlock;
  static os_log_type_t.default.getter();
  if (qword_101637270 != -1) {
    swift_once();
  }
  uint64_t v17 = swift_allocObject();
  *(_OWORD *)(v17 + 16) = v40;
  *(void *)(v17 + 56) = &type metadata for Bool;
  *(void *)(v17 + 64) = &protocol witness table for Bool;
  *(unsigned char *)(v17 + 32) = v16;
  os_log(_:dso:log:_:_:)();
  swift_bridgeObjectRelease();
  static os_log_type_t.default.getter();
  if (v16)
  {
    os_log(_:dso:log:_:_:)();
    id v18 = (void *)swift_allocObject();
    id v19 = v41;
    uint64_t v20 = v42;
    uint64_t v21 = v39;
    void v18[2] = v41;
    v18[3] = v21;
    v18[4] = v20;
    v18[5] = v4;
    v18[6] = v13;
    uint64_t v22 = qword_1016371D8;
    id v23 = v19;
    swift_retain_n();
    swift_retain_n();
    swift_retain_n();
    id v24 = v23;
    if (v22 != -1) {
      swift_once();
    }
    uint64_t aBlock = 0x7365547265646E75;
    unint64_t v45 = 0xE900000000000074;
    SynchronousCache.cachedValue<A>(key:computeBlock:)();
    swift_bridgeObjectRelease();
    if (v43 == 1)
    {
      sub_101018854(v24, v39, v42, v4, v13);
    }
    else
    {
      uint64_t v30 = type metadata accessor for Transaction();
      __chkstk_darwin(v30);
      *(&v32 - 4) = v4;
      *(&v32 - 3) = (uint64_t)sub_10102099C;
      *(&v32 - 2) = (uint64_t)v18;
      static Transaction.named<A>(_:with:)();
    }
    swift_release();
    swift_release();
    swift_release_n();
    swift_release();

    swift_release();
    swift_release();
    swift_release();
  }
  else
  {
    os_log(_:dso:log:_:_:)();
    static os_log_type_t.default.getter();
    os_log(_:dso:log:_:_:)();
    *(void *)&long long v40 = *(void *)(v4 + 64);
    uint64_t v25 = (void *)swift_allocObject();
    v25[2] = v4;
    v25[3] = sub_101020920;
    v25[4] = v14;
    uint64_t v48 = sub_100B64438;
    uint64_t v49 = v25;
    uint64_t aBlock = (uint64_t)_NSConcreteStackBlock;
    unint64_t v45 = 1107296256;
    uint64_t v46 = sub_1004B5480;
    uint64_t v47 = &unk_1016021C0;
    uint64_t v26 = _Block_copy(&aBlock);
    swift_retain();
    swift_retain();
    uint64_t v27 = v33;
    static DispatchQoS.unspecified.getter();
    unint64_t v43 = _swiftEmptyArrayStorage;
    sub_101020950((unint64_t *)&qword_10163B7E0, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
    sub_10000588C((uint64_t *)&unk_10163F350);
    sub_100062734((unint64_t *)&qword_10163B7F0, (uint64_t *)&unk_10163F350);
    id v28 = v35;
    uint64_t v29 = v38;
    dispatch thunk of SetAlgebra.init<A>(_:)();
    OS_dispatch_queue.async(group:qos:flags:execute:)();
    _Block_release(v26);
    (*(void (**)(char *, uint64_t))(v37 + 8))(v28, v29);
    (*(void (**)(char *, uint64_t))(v34 + 8))(v27, v36);
    swift_release();
    swift_release();

    swift_release();
    swift_release();
    swift_release();
  }
  return v13;
}

uint64_t sub_101017E38(uint64_t a1, uint64_t a2, void *a3, void (*a4)(id *), uint64_t a5, uint64_t a6)
{
  uint64_t v11 = (void *)swift_allocObject();
  v11[2] = a3;
  v11[3] = a4;
  v11[4] = a5;
  v11[5] = a2;
  v11[6] = a6;
  uint64_t v12 = qword_1016371D8;
  id v13 = a3;
  swift_retain_n();
  swift_retain_n();
  swift_retain_n();
  id v14 = v13;
  if (v12 != -1) {
    swift_once();
  }
  SynchronousCache.cachedValue<A>(key:computeBlock:)();
  swift_bridgeObjectRelease();
  if (v17 == 1)
  {
    sub_101018854(v14, a4, a5, a2, a6);
  }
  else
  {
    uint64_t v16 = type metadata accessor for Transaction();
    __chkstk_darwin(v16);
    static Transaction.named<A>(_:with:)();
  }
  swift_release();
  swift_release();
  swift_release();

  return swift_release();
}

void sub_10101805C(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v56 = a2;
  uint64_t v5 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v8 = &v47[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v9 = type metadata accessor for DispatchQoS();
  uint64_t v10 = *(void *)(v9 - 8);
  __chkstk_darwin(v9);
  uint64_t v12 = &v47[-((v11 + 15) & 0xFFFFFFFFFFFFFFF0)];
  id v13 = a1;
  uint64_t v14 = *(void *)(CKRecord.changedKeys()() + 16);
  swift_bridgeObjectRelease();
  os_log_type_t v15 = static os_log_type_t.default.getter();
  if (v14)
  {
    if (qword_101637268 != -1) {
      swift_once();
    }
    sub_10000588C((uint64_t *)&unk_10163AD00);
    uint64_t v16 = swift_allocObject();
    long long v55 = xmmword_101342130;
    *(_OWORD *)(v16 + 16) = xmmword_101342130;
    *(void *)(v16 + 56) = sub_10001D4B0(0, (unint64_t *)&qword_10163AE60);
    *(void *)(v16 + 64) = sub_10033149C((unint64_t *)&qword_10163AD10, (unint64_t *)&qword_10163AE60);
    *(void *)(v16 + 32) = v13;
    id v17 = v13;
    os_log(_:dso:log:_:_:)();
    swift_bridgeObjectRelease();
    uint64_t v18 = sub_10001D4B0(0, &qword_1016672C8);
    sub_10000588C(&qword_10166BD20);
    uint64_t v19 = swift_allocObject();
    *(_OWORD *)(v19 + 16) = xmmword_101347EF0;
    *(void *)(v19 + 32) = v17;
    aBlock[0] = v19;
    specialized Array._endMutation()();
    uint64_t v20 = (void *)aBlock[0];
    id v21 = v17;
    v59.value._rawValue = v20;
    v59.is_nil = 0;
    v22.super.super.super.super.Class isa = CKModifyRecordsOperation.init(recordsToSave:recordIDsToDelete:)(v59, v60).super.super.super.super.isa;
    if (qos_class_self() >= QOS_CLASS_USER_INITIATED) {
      [(objc_class *)v22.super.super.super.super.isa setQualityOfService:25];
    }
    id v23 = [(objc_class *)v22.super.super.super.super.isa configuration];
    if (v23)
    {
      id v24 = v23;
      [v23 setAutomaticallyRetryNetworkFailures:0];

      id v25 = [(objc_class *)v22.super.super.super.super.isa configuration];
      if (v25)
      {
        uint64_t v26 = v25;
        [v25 setDiscretionaryNetworkBehavior:0];

        uint64_t v27 = (void *)swift_allocObject();
        uint64_t v28 = v56;
        _OWORD v27[2] = v56;
        v27[3] = a3;
        v27[4] = v21;
        id v29 = v21;
        swift_retain();
        swift_retain();
        CKModifyRecordsOperation.undeprecated_modifyRecordsCompletionBlock.setter();
        static os_log_type_t.default.getter();
        uint64_t v30 = swift_allocObject();
        *(_OWORD *)(v30 + 16) = v55;
        *(void *)(v30 + 56) = v18;
        *(void *)(v30 + 64) = sub_10033149C(&qword_1016672D0, &qword_1016672C8);
        *(CKModifyRecordsOperation *)(v30 + 32) = v22;
        uint64_t v31 = v22.super.super.super.super.isa;
        os_log(_:dso:log:_:_:)();
        uint64_t v32 = swift_bridgeObjectRelease();
        __chkstk_darwin(v32);
        *(void *)&v47[-16] = v28;
        *(void *)&v47[-8] = v31;
        QueueSynchronizer.conditionalSync<A>(_:)();

        return;
      }
    }
    else
    {
      __break(1u);
    }
    __break(1u);
  }
  else
  {
    uint64_t v54 = v10;
    if (qword_101637268 != -1) {
      swift_once();
    }
    *(void *)&long long v55 = v6;
    id v33 = qword_10170EFC0;
    if (os_log_type_enabled((os_log_t)qword_10170EFC0, v15))
    {
      id v34 = v13;
      id v50 = v34;
      uint64_t v35 = swift_slowAlloc();
      uint64_t v53 = a3;
      uint64_t v36 = v35;
      uint64_t v37 = swift_slowAlloc();
      uint64_t v52 = v37;
      *(_DWORD *)uint64_t v36 = 141558275;
      uint64_t v57 = 1752392040;
      aBlock[0] = v37;
      uint64_t v51 = aBlock;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v36 + 12) = 2081;
      uint64_t v49 = v36 + 14;
      id v38 = [v34 recordID];
      id v39 = [v38 recordName];

      uint64_t v40 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      int v48 = v15;
      unint64_t v42 = v41;

      uint64_t v57 = sub_1008FA0F0(v40, v42, aBlock);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      id v43 = v50;

      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v33, (os_log_type_t)v48, "No updates in the record %{private,mask.hash}s. Skipping.", (uint8_t *)v36, 0x16u);
      swift_arrayDestroy();
      swift_slowDealloc();
      a3 = v53;
      swift_slowDealloc();
    }
    uint64_t v44 = swift_allocObject();
    *(void *)(v44 + 16) = a3;
    *(void *)(v44 + 24) = v13;
    aBlock[4] = (uint64_t)sub_1010209C8;
    aBlock[5] = v44;
    aBlock[0] = (uint64_t)_NSConcreteStackBlock;
    aBlock[1] = 1107296256;
    aBlock[2] = (uint64_t)sub_1004B5480;
    aBlock[3] = (uint64_t)&unk_101601CC0;
    unint64_t v45 = _Block_copy(aBlock);
    id v46 = v13;
    swift_retain();
    static DispatchQoS.unspecified.getter();
    uint64_t v57 = (uint64_t)_swiftEmptyArrayStorage;
    sub_101020950((unint64_t *)&qword_10163B7E0, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
    sub_10000588C((uint64_t *)&unk_10163F350);
    sub_100062734((unint64_t *)&qword_10163B7F0, (uint64_t *)&unk_10163F350);
    dispatch thunk of SetAlgebra.init<A>(_:)();
    OS_dispatch_queue.async(group:qos:flags:execute:)();
    _Block_release(v45);
    (*(void (**)(unsigned char *, uint64_t))(v55 + 8))(v8, v5);
    (*(void (**)(unsigned char *, uint64_t))(v54 + 8))(v12, v9);

    swift_release();
  }
}

void sub_101018854(void *a1, void (*a2)(id *), uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v60 = a4;
  uint64_t v8 = type metadata accessor for DispatchWorkItemFlags();
  *(void *)&long long v59 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  uint64_t v10 = (char *)v52 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = type metadata accessor for DispatchQoS();
  uint64_t v12 = *(void *)(v11 - 8);
  __chkstk_darwin(v11);
  uint64_t v14 = (char *)v52 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v63[0] = a1;
  id v15 = a1;
  a2(v63);
  id v16 = v63[0];
  uint64_t v17 = CKRecord.changedKeys()();

  uint64_t v18 = *(void *)(v17 + 16);
  swift_bridgeObjectRelease();
  os_log_type_t v19 = static os_log_type_t.default.getter();
  if (v18)
  {
    if (qword_101637268 != -1) {
      swift_once();
    }
    sub_10000588C((uint64_t *)&unk_10163AD00);
    uint64_t v20 = swift_allocObject();
    long long v59 = xmmword_101342130;
    *(_OWORD *)(v20 + 16) = xmmword_101342130;
    *(void *)(v20 + 56) = sub_10001D4B0(0, (unint64_t *)&qword_10163AE60);
    *(void *)(v20 + 64) = sub_10033149C((unint64_t *)&qword_10163AD10, (unint64_t *)&qword_10163AE60);
    *(void *)(v20 + 32) = v16;
    id v21 = v16;
    os_log(_:dso:log:_:_:)();
    swift_bridgeObjectRelease();
    uint64_t v22 = sub_10001D4B0(0, &qword_1016672C8);
    sub_10000588C(&qword_10166BD20);
    uint64_t v23 = swift_allocObject();
    *(_OWORD *)(v23 + 16) = xmmword_101347EF0;
    *(void *)(v23 + 32) = v21;
    aBlock[0] = v23;
    specialized Array._endMutation()();
    id v24 = (void *)aBlock[0];
    id v25 = v21;
    v64.value._rawValue = v24;
    v64.is_nil = 0;
    v26.super.super.super.super.Class isa = CKModifyRecordsOperation.init(recordsToSave:recordIDsToDelete:)(v64, v65).super.super.super.super.isa;
    if (qos_class_self() >= QOS_CLASS_USER_INITIATED) {
      [(objc_class *)v26.super.super.super.super.isa setQualityOfService:25];
    }
    id v27 = [(objc_class *)v26.super.super.super.super.isa configuration];
    if (v27)
    {
      uint64_t v28 = v27;
      [v27 setAutomaticallyRetryNetworkFailures:0];

      id v29 = [(objc_class *)v26.super.super.super.super.isa configuration];
      if (v29)
      {
        uint64_t v30 = v29;
        [v29 setDiscretionaryNetworkBehavior:0];

        uint64_t v31 = (void *)swift_allocObject();
        uint64_t v32 = v60;
        v31[2] = v60;
        v31[3] = a5;
        v31[4] = v15;
        id v33 = v15;
        swift_retain();
        swift_retain();
        CKModifyRecordsOperation.undeprecated_modifyRecordsCompletionBlock.setter();
        static os_log_type_t.default.getter();
        uint64_t v34 = swift_allocObject();
        *(_OWORD *)(v34 + 16) = v59;
        *(void *)(v34 + 56) = v22;
        *(void *)(v34 + 64) = sub_10033149C(&qword_1016672D0, &qword_1016672C8);
        *(CKModifyRecordsOperation *)(v34 + 32) = v26;
        uint64_t v35 = v26.super.super.super.super.isa;
        os_log(_:dso:log:_:_:)();
        uint64_t v36 = swift_bridgeObjectRelease();
        __chkstk_darwin(v36);
        v52[-2] = v32;
        v52[-1] = v35;
        QueueSynchronizer.conditionalSync<A>(_:)();

        return;
      }
    }
    else
    {
      __break(1u);
    }
    __break(1u);
  }
  else
  {
    uint64_t v57 = v12;
    uint64_t v58 = v11;
    if (qword_101637268 != -1) {
      swift_once();
    }
    uint64_t v37 = qword_10170EFC0;
    if (os_log_type_enabled((os_log_t)qword_10170EFC0, v19))
    {
      id v38 = v15;
      id v53 = v38;
      uint64_t v39 = swift_slowAlloc();
      uint64_t v56 = a5;
      uint64_t v40 = v39;
      uint64_t v41 = swift_slowAlloc();
      uint64_t v55 = v41;
      *(_DWORD *)uint64_t v40 = 141558275;
      uint64_t v61 = 1752392040;
      aBlock[0] = v41;
      uint64_t v54 = aBlock;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v40 + 12) = 2081;
      v52[1] = v40 + 14;
      id v42 = [v38 recordID];
      id v43 = v15;
      id v44 = [v42 recordName];

      uint64_t v45 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      unint64_t v47 = v46;

      id v15 = v43;
      uint64_t v61 = sub_1008FA0F0(v45, v47, aBlock);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      id v48 = v53;

      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v37, v19, "No updates in the record %{private,mask.hash}s. Skipping.", (uint8_t *)v40, 0x16u);
      swift_arrayDestroy();
      swift_slowDealloc();
      a5 = v56;
      swift_slowDealloc();
    }
    uint64_t v49 = swift_allocObject();
    *(void *)(v49 + 16) = a5;
    *(void *)(v49 + 24) = v15;
    aBlock[4] = (uint64_t)sub_1010209C8;
    aBlock[5] = v49;
    aBlock[0] = (uint64_t)_NSConcreteStackBlock;
    aBlock[1] = 1107296256;
    aBlock[2] = (uint64_t)sub_1004B5480;
    aBlock[3] = (uint64_t)&unk_101601F90;
    id v50 = _Block_copy(aBlock);
    id v51 = v15;
    swift_retain();
    static DispatchQoS.unspecified.getter();
    uint64_t v61 = (uint64_t)_swiftEmptyArrayStorage;
    sub_101020950((unint64_t *)&qword_10163B7E0, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
    sub_10000588C((uint64_t *)&unk_10163F350);
    sub_100062734((unint64_t *)&qword_10163B7F0, (uint64_t *)&unk_10163F350);
    dispatch thunk of SetAlgebra.init<A>(_:)();
    OS_dispatch_queue.async(group:qos:flags:execute:)();
    _Block_release(v50);
    (*(void (**)(char *, uint64_t))(v59 + 8))(v10, v8);
    (*(void (**)(char *, uint64_t))(v57 + 8))(v14, v58);

    swift_release();
  }
}

uint64_t sub_10101907C(unint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, void *a6)
{
  uint64_t v11 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v12 = *(void *)(v11 - 8);
  __chkstk_darwin(v11);
  uint64_t v14 = (char *)&v33 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = type metadata accessor for DispatchQoS();
  uint64_t v16 = *(void *)(v15 - 8);
  uint64_t result = __chkstk_darwin(v15);
  os_log_type_t v19 = (char *)&v33 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (a3)
  {
    uint64_t v20 = v19;
    uint64_t v35 = v16;
    swift_errorRetain();
    sub_101010D50(a3);
    uint64_t v34 = *(void *)(a4 + 48);
    id v21 = (void *)swift_allocObject();
    v21[2] = a5;
    v21[3] = a4;
    v21[4] = a3;
    uint64_t v41 = sub_101020A24;
    id v42 = v21;
    uint64_t aBlock = _NSConcreteStackBlock;
    uint64_t v38 = 1107296256;
    uint64_t v39 = sub_1004B5480;
    uint64_t v40 = &unk_101601D60;
    uint64_t v22 = _Block_copy(&aBlock);
    swift_errorRetain();
    swift_retain();
    swift_retain();
    static DispatchQoS.unspecified.getter();
    uint64_t v36 = _swiftEmptyArrayStorage;
    sub_101020950((unint64_t *)&qword_10163B7E0, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
    sub_10000588C((uint64_t *)&unk_10163F350);
    sub_100062734((unint64_t *)&qword_10163B7F0, (uint64_t *)&unk_10163F350);
    dispatch thunk of SetAlgebra.init<A>(_:)();
    OS_dispatch_queue.async(group:qos:flags:execute:)();
    _Block_release(v22);
    swift_errorRelease();
    (*(void (**)(char *, uint64_t))(v12 + 8))(v14, v11);
    (*(void (**)(char *, uint64_t))(v35 + 8))(v20, v15);
    return swift_release();
  }
  if (a1)
  {
    id v33 = v19;
    uint64_t v34 = v12;
    uint64_t v35 = v16;
    if (a1 >> 62)
    {
      swift_bridgeObjectRetain();
      uint64_t result = _CocoaArrayWrapper.endIndex.getter();
      uint64_t v24 = v11;
      if (result) {
        goto LABEL_8;
      }
    }
    else
    {
      uint64_t v23 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
      uint64_t result = swift_bridgeObjectRetain();
      uint64_t v24 = v11;
      if (v23)
      {
LABEL_8:
        id v25 = v14;
        if ((a1 & 0xC000000000000001) != 0)
        {
          id v26 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
        }
        else
        {
          if (!*(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10))
          {
            __break(1u);
            return result;
          }
          id v26 = *(id *)(a1 + 32);
        }
        id v27 = v26;
        swift_bridgeObjectRelease();
        uint64_t v28 = (void *)swift_allocObject();
        void v28[2] = a6;
        v28[3] = a5;
        v28[4] = v27;
        uint64_t v41 = sub_101020A14;
        id v42 = v28;
        uint64_t aBlock = _NSConcreteStackBlock;
        uint64_t v38 = 1107296256;
        uint64_t v39 = sub_1004B5480;
        uint64_t v40 = &unk_101601D10;
        id v29 = _Block_copy(&aBlock);
        swift_retain();
        id v30 = a6;
        id v31 = v27;
        uint64_t v32 = v33;
        static DispatchQoS.unspecified.getter();
        uint64_t v36 = _swiftEmptyArrayStorage;
        sub_101020950((unint64_t *)&qword_10163B7E0, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
        sub_10000588C((uint64_t *)&unk_10163F350);
        sub_100062734((unint64_t *)&qword_10163B7F0, (uint64_t *)&unk_10163F350);
        dispatch thunk of SetAlgebra.init<A>(_:)();
        OS_dispatch_queue.async(group:qos:flags:execute:)();
        _Block_release(v29);

        (*(void (**)(char *, uint64_t))(v34 + 8))(v25, v24);
        (*(void (**)(char *, uint64_t))(v35 + 8))(v32, v15);
        return swift_release();
      }
    }
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t sub_1010195E0(void *a1)
{
  static os_log_type_t.default.getter();
  if (qword_101637268 != -1) {
    swift_once();
  }
  sub_10000588C((uint64_t *)&unk_10163AD00);
  uint64_t v2 = swift_allocObject();
  *(_OWORD *)(v2 + 16) = xmmword_101342130;
  *(void *)(v2 + 56) = sub_10001D4B0(0, (unint64_t *)&qword_10163AE60);
  *(void *)(v2 + 64) = sub_10033149C((unint64_t *)&qword_10163AD10, (unint64_t *)&qword_10163AE60);
  *(void *)(v2 + 32) = a1;
  id v3 = a1;
  os_log(_:dso:log:_:_:)();
  swift_bridgeObjectRelease();
  return Future.finish(result:)();
}

uint64_t sub_101019724()
{
  sub_1004270C8(v0 + 16);

  swift_release();
  sub_101022184(*(void *)(v0 + 80));
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  swift_release();
  swift_release();
  swift_release();

  return v0;
}

uint64_t sub_101019804()
{
  sub_101019724();

  return swift_deallocClassInstance();
}

void sub_101019838(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  id v8 = sub_10100BB0C();
  uint64_t v9 = (void *)swift_allocObject();
  v9[2] = a2;
  v9[3] = a1;
  v9[4] = a3;
  v9[5] = a4;
  v11[4] = sub_1010223C8;
  v11[5] = v9;
  v11[0] = _NSConcreteStackBlock;
  v11[1] = 1107296256;
  v11[2] = sub_101019F64;
  v11[3] = &unk_101601DD8;
  uint64_t v10 = _Block_copy(v11);
  swift_retain();
  swift_retain();
  swift_retain();
  swift_release();
  [v8 accountStatusWithCompletionHandler:v10];
  _Block_release(v10);
}

uint64_t sub_101019954(uint64_t a1, void **a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v32 = a5;
  uint64_t v33 = a4;
  v31[1] = a3;
  uint64_t v9 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v36 = *(void *)(v9 - 8);
  __chkstk_darwin(v9);
  uint64_t v11 = (char *)v31 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = type metadata accessor for DispatchQoS();
  uint64_t v34 = *(void *)(v12 - 8);
  uint64_t v35 = v12;
  __chkstk_darwin(v12);
  uint64_t v14 = (char *)v31 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (a2)
  {
    v31[0] = a6;
    swift_errorRetain();
    static os_log_type_t.error.getter();
    if (qword_101637268 != -1) {
      swift_once();
    }
    sub_10000588C((uint64_t *)&unk_10163AD00);
    uint64_t v15 = swift_allocObject();
    *(_OWORD *)(v15 + 16) = xmmword_101342130;
    uint64_t aBlock = a2;
    swift_errorRetain();
    sub_10000588C(&qword_101638D40);
    uint64_t v16 = String.init<A>(describing:)();
    uint64_t v18 = v17;
    *(void *)(v15 + 56) = &type metadata for String;
    *(void *)(v15 + 64) = sub_10000B4CC();
    *(void *)(v15 + 32) = v16;
    *(void *)(v15 + 40) = v18;
    os_log(_:dso:log:_:_:)();
    swift_bridgeObjectRelease();
    os_log_type_t v19 = (void *)swift_allocObject();
    uint64_t v20 = v32;
    v19[2] = v33;
    v19[3] = v20;
    v19[4] = v31[0];
    id v42 = sub_101022428;
    id v43 = v19;
    uint64_t aBlock = _NSConcreteStackBlock;
    uint64_t v39 = 1107296256;
    uint64_t v40 = sub_1004B5480;
    uint64_t v41 = &unk_101601E78;
    id v21 = _Block_copy(&aBlock);
    swift_retain();
    swift_retain();
    static DispatchQoS.unspecified.getter();
    uint64_t v37 = _swiftEmptyArrayStorage;
    sub_101020950((unint64_t *)&qword_10163B7E0, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
    sub_10000588C((uint64_t *)&unk_10163F350);
    sub_100062734((unint64_t *)&qword_10163B7F0, (uint64_t *)&unk_10163F350);
    dispatch thunk of SetAlgebra.init<A>(_:)();
    OS_dispatch_queue.async(group:qos:flags:execute:)();
    _Block_release(v21);
    swift_errorRelease();
  }
  else
  {
    LODWORD(v31[0]) = static os_log_type_t.default.getter();
    if (qword_101637268 != -1) {
      swift_once();
    }
    sub_10000588C((uint64_t *)&unk_10163AD00);
    uint64_t v22 = swift_allocObject();
    *(_OWORD *)(v22 + 16) = xmmword_101342130;
    id v23 = (id)CKStringFromAccountStatus();
    uint64_t v24 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v26 = v25;

    *(void *)(v22 + 56) = &type metadata for String;
    *(void *)(v22 + 64) = sub_10000B4CC();
    *(void *)(v22 + 32) = v24;
    *(void *)(v22 + 40) = v26;
    os_log(_:dso:log:_:_:)();
    swift_bridgeObjectRelease();
    id v27 = (void *)swift_allocObject();
    uint64_t v28 = v32;
    _OWORD v27[2] = v33;
    v27[3] = v28;
    v27[4] = a6;
    v27[5] = a1;
    id v42 = sub_1010223DC;
    id v43 = v27;
    uint64_t aBlock = _NSConcreteStackBlock;
    uint64_t v39 = 1107296256;
    uint64_t v40 = sub_1004B5480;
    uint64_t v41 = &unk_101601E28;
    id v29 = _Block_copy(&aBlock);
    swift_retain();
    swift_retain();
    static DispatchQoS.unspecified.getter();
    uint64_t v37 = _swiftEmptyArrayStorage;
    sub_101020950((unint64_t *)&qword_10163B7E0, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
    sub_10000588C((uint64_t *)&unk_10163F350);
    sub_100062734((unint64_t *)&qword_10163B7F0, (uint64_t *)&unk_10163F350);
    dispatch thunk of SetAlgebra.init<A>(_:)();
    OS_dispatch_queue.async(group:qos:flags:execute:)();
    _Block_release(v29);
  }
  (*(void (**)(char *, uint64_t))(v36 + 8))(v11, v9);
  (*(void (**)(char *, uint64_t))(v34 + 8))(v14, v35);
  return swift_release();
}

void sub_101019F64(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v5 = *(void (**)(uint64_t, void *))(a1 + 32);
  swift_retain();
  id v6 = a3;
  v5(a2, a3);
  swift_release();
}

void sub_101019FDC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  id v7 = sub_10100BB0C();
  id v8 = (void *)swift_allocObject();
  v8[2] = a1;
  v8[3] = a3;
  v8[4] = a4;
  v10[4] = sub_101022E60;
  v10[5] = v8;
  v10[0] = _NSConcreteStackBlock;
  v10[1] = 1107296256;
  v10[2] = sub_10001F4BC;
  v10[3] = &unk_101602800;
  uint64_t v9 = _Block_copy(v10);
  swift_retain();
  swift_retain();
  swift_release();
  [v7 accountInfoWithCompletionHandler:v9];
  _Block_release(v9);
}

void sub_10101A0EC(void *a1, void *a2, uint64_t a3, void (*a4)(void *, uint64_t))
{
  Transaction.capture()();
  if (a2)
  {
    swift_errorRetain();
    a4(a2, 1);
    swift_errorRelease();
  }
  else if (a1)
  {
    id v7 = a1;
    a4(a1, 0);
  }
  else
  {
    _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
}

void sub_10101A204()
{
  uint64_t v2 = v0;
  uint64_t v3 = type metadata accessor for DispatchPredicate();
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  id v6 = (uint64_t *)((char *)&v24 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0));
  id v7 = *(void **)(v2 + 32);
  *id v6 = v7;
  (*(void (**)(void *, void, uint64_t))(v4 + 104))(v6, enum case for DispatchPredicate.notOnQueue(_:), v3);
  id v8 = v7;
  uint64_t isa = _dispatchPreconditionTest(_:)();
  uint64_t v11 = *(void (**)(void *, uint64_t))(v4 + 8);
  id v10 = (id)(v4 + 8);
  v11(v6, v3);
  if ((isa & 1) == 0)
  {
    __break(1u);
    goto LABEL_13;
  }
  uint64_t Strong = swift_unknownObjectWeakLoadStrong();
  if (Strong)
  {
    id v13 = *(id *)(Strong + 152);
    swift_unknownObjectRelease();
    uint64_t v14 = dispatch_group_create();
    dispatch_group_enter(v14);
    sub_10001D4B0(0, &qword_1016672F0);
    sub_10000588C(&qword_10166BD20);
    uint64_t v15 = swift_allocObject();
    *(_OWORD *)(v15 + 16) = xmmword_101347EF0;
    *(void *)(v15 + 32) = v13;
    uint64_t v25 = v15;
    specialized Array._endMutation()();
    Swift::Bool v16 = v25;
    id v17 = v13;
    v26.value._rawValue = _swiftEmptyArrayStorage;
    v26.is_nil = v16;
    uint64_t isa = (uint64_t)CKModifyRecordZonesOperation.init(recordZonesToSave:recordZoneIDsToDelete:)(v26, v27).super.super.super.super.isa;
    uint64_t v18 = swift_allocObject();
    *(void *)(v18 + 16) = v17;
    *(void *)(v18 + 24) = v14;
    id v10 = v17;
    uint64_t v1 = v14;
    CKModifyRecordZonesOperation.undeprecated_modifyRecordZonesCompletionBlock.setter();
    if (qos_class_self() >= QOS_CLASS_USER_INITIATED) {
      [(id)isa setQualityOfService:25];
    }
    id v19 = [(id)isa configuration];
    if (v19)
    {
      uint64_t v20 = v19;
      [v19 setAutomaticallyRetryNetworkFailures:0];

      id v21 = [(id)isa configuration];
      if (v21)
      {
        uint64_t v22 = v21;
        [v21 setDiscretionaryNetworkBehavior:0];

        __chkstk_darwin(v23);
        *(&v24 - 4) = (uint64_t)v10;
        *(&v24 - 3) = v2;
        *(&v24 - 2) = isa;
        QueueSynchronizer.conditionalSync<A>(_:)();
        static os_log_type_t.default.getter();
        if (qword_101637268 == -1)
        {
LABEL_8:
          os_log(_:dso:log:_:_:)();
          OS_dispatch_group.wait()();

          return;
        }
LABEL_13:
        swift_once();
        goto LABEL_8;
      }
    }
    else
    {
      __break(1u);
    }
    __break(1u);
  }
  else
  {
    static os_log_type_t.error.getter();
    if (qword_101637268 != -1) {
      swift_once();
    }
    os_log(_:dso:log:_:_:)();
  }
}

void sub_10101A5DC(uint64_t a1, uint64_t a2, uint64_t a3, void *a4, NSObject *a5)
{
  if (a3)
  {
    swift_errorRetain();
    static os_log_type_t.error.getter();
    if (qword_101637268 != -1) {
      swift_once();
    }
    sub_10000588C((uint64_t *)&unk_10163AD00);
    uint64_t v6 = swift_allocObject();
    *(_OWORD *)(v6 + 16) = xmmword_101342130;
    swift_errorRetain();
    sub_10000588C(&qword_101638D40);
    uint64_t v7 = String.init<A>(describing:)();
    uint64_t v9 = v8;
    *(void *)(v6 + 56) = &type metadata for String;
    *(void *)(v6 + 64) = sub_10000B4CC();
    *(void *)(v6 + 32) = v7;
    *(void *)(v6 + 40) = v9;
    os_log(_:dso:log:_:_:)();
    swift_bridgeObjectRelease();
    swift_errorRelease();
  }
  else
  {
    static os_log_type_t.default.getter();
    if (qword_101637268 != -1) {
      swift_once();
    }
    sub_10000588C((uint64_t *)&unk_10163AD00);
    uint64_t v11 = swift_allocObject();
    *(_OWORD *)(v11 + 16) = xmmword_101342130;
    *(void *)(v11 + 56) = sub_10001D4B0(0, (unint64_t *)&unk_10165F040);
    *(void *)(v11 + 64) = sub_10033149C(&qword_1016672E8, (unint64_t *)&unk_10165F040);
    *(void *)(v11 + 32) = a4;
    id v12 = a4;
    os_log(_:dso:log:_:_:)();
    swift_bridgeObjectRelease();
  }
  dispatch_group_leave(a5);
}

void sub_10101A810(void *a1, uint64_t a2, uint64_t a3)
{
  static os_log_type_t.default.getter();
  if (qword_101637268 != -1) {
    swift_once();
  }
  sub_10000588C((uint64_t *)&unk_10163AD00);
  uint64_t v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_101342130;
  *(void *)(v5 + 56) = sub_10001D4B0(0, (unint64_t *)&unk_10165F040);
  *(void *)(v5 + 64) = sub_10033149C(&qword_1016672E8, (unint64_t *)&unk_10165F040);
  *(void *)(v5 + 32) = a1;
  id v6 = a1;
  os_log(_:dso:log:_:_:)();
  swift_bridgeObjectRelease();
  id v7 = sub_10100BB0C();
  id v8 = [v7 privateCloudDatabase];

  [v8 addOperation:a3];
}

uint64_t sub_10101A98C(uint64_t a1)
{
  sub_1010222F0();
  uint64_t v2 = swift_allocError();
  unint64_t v3 = *(void *)(a1 + 80);
  *(void *)(a1 + 80) = v2;
  swift_errorRetain();
  sub_101022184(v3);
  unint64_t v4 = *(void *)(a1 + 80);
  sub_101022194(v4);
  sub_101021860(v4);
  sub_101022184(v4);
  return swift_errorRelease();
}

unint64_t sub_10101AA14(uint64_t a1)
{
  unint64_t v2 = *(void *)(a1 + 80);
  *(void *)(a1 + 80) = 1;
  sub_101022184(v2);
  unint64_t v3 = *(void *)(a1 + 80);
  sub_101022194(v3);
  sub_101021860(v3);
  return sub_101022184(v3);
}

void sub_10101AA68(void *a1, uint64_t a2, uint64_t a3, NSObject *a4)
{
  static os_log_type_t.default.getter();
  if (qword_101637268 != -1) {
    swift_once();
  }
  sub_10000588C((uint64_t *)&unk_10163AD00);
  uint64_t v7 = swift_allocObject();
  *(_OWORD *)(v7 + 16) = xmmword_101342130;
  uint64_t v8 = sub_10001D4B0(0, &qword_101667300);
  *(void *)(v7 + 56) = v8;
  uint64_t v9 = sub_10033149C(&qword_101667308, &qword_101667300);
  *(void *)(v7 + 64) = v9;
  *(void *)(v7 + 32) = a1;
  id v10 = a1;
  os_log(_:dso:log:_:_:)();
  swift_bridgeObjectRelease();
  if (a2)
  {
    unint64_t v11 = *(void *)(a3 + 80);
    *(void *)(a3 + 80) = a2;
    swift_errorRetain();
    swift_errorRetain();
    swift_errorRetain();
    sub_101022184(v11);
    unint64_t v12 = *(void *)(a3 + 80);
    sub_101022194(v12);
    sub_101021860(v12);
    sub_101022184(v12);
    swift_errorRelease();
    static os_log_type_t.default.getter();
    os_log(_:dso:log:_:_:)();
    static os_log_type_t.error.getter();
    uint64_t v13 = swift_allocObject();
    *(_OWORD *)(v13 + 16) = xmmword_101342130;
    swift_errorRetain();
    sub_10000588C(&qword_101638D40);
    uint64_t v14 = String.init<A>(describing:)();
    uint64_t v16 = v15;
    *(void *)(v13 + 56) = &type metadata for String;
    *(void *)(v13 + 64) = sub_10000B4CC();
    *(void *)(v13 + 32) = v14;
    *(void *)(v13 + 40) = v16;
    os_log(_:dso:log:_:_:)();
    swift_bridgeObjectRelease();
    swift_errorRelease();
  }
  else
  {
    unint64_t v17 = *(void *)(a3 + 80);
    *(void *)(a3 + 80) = 2;
    sub_101022184(v17);
    unint64_t v18 = *(void *)(a3 + 80);
    sub_101022194(v18);
    sub_101021860(v18);
    sub_101022184(v18);
    static os_log_type_t.default.getter();
    os_log(_:dso:log:_:_:)();
    static os_log_type_t.default.getter();
    uint64_t v19 = swift_allocObject();
    *(_OWORD *)(v19 + 16) = xmmword_101342130;
    *(void *)(v19 + 56) = v8;
    *(void *)(v19 + 64) = v9;
    *(void *)(v19 + 32) = v10;
    id v20 = v10;
    os_log(_:dso:log:_:_:)();
    swift_bridgeObjectRelease();
    static os_log_type_t.default.getter();
    os_log(_:dso:log:_:_:)();
    QueueSynchronizer.conditionalSync<A>(_:)();
    static os_log_type_t.default.getter();
    if (qword_101637270 != -1) {
      swift_once();
    }
    os_log(_:dso:log:_:_:)();
    id v21 = *(id *)(a3 + 56);
    OS_dispatch_semaphore.signal()();

    static os_log_type_t.default.getter();
    os_log(_:dso:log:_:_:)();
    sub_100A5B728();
  }
  dispatch_group_leave(a4);
}

void sub_10101AEC0(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v32 = *(void *)(v4 - 8);
  uint64_t v33 = v4;
  __chkstk_darwin(v4);
  id v6 = (char *)&v26 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for DispatchQoS();
  uint64_t v30 = *(void *)(v7 - 8);
  uint64_t v31 = v7;
  __chkstk_darwin(v7);
  uint64_t v9 = (char *)&v26 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = type metadata accessor for DispatchTime();
  uint64_t v28 = *(void *)(v10 - 8);
  uint64_t v29 = v10;
  uint64_t v11 = __chkstk_darwin(v10);
  uint64_t v13 = (char *)&v26 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v11);
  uint64_t v15 = (char *)&v26 - v14;
  uint64_t v16 = type metadata accessor for DispatchQoS.QoSClass();
  uint64_t v17 = *(void *)(v16 - 8);
  __chkstk_darwin(v16);
  uint64_t v19 = (char *)&v26 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(void *)(a2 + 200) = a1;
  static os_log_type_t.error.getter();
  if (a1 == 3)
  {
    if (qword_101637268 != -1) {
      swift_once();
    }
    os_log(_:dso:log:_:_:)();
    static os_log_type_t.default.getter();
    os_log(_:dso:log:_:_:)();
    QueueSynchronizer.conditionalSync<A>(_:)();
    static os_log_type_t.default.getter();
    if (qword_101637270 != -1) {
      swift_once();
    }
    os_log(_:dso:log:_:_:)();
    id v20 = *(id *)(a2 + 56);
    OS_dispatch_semaphore.signal()();

    static os_log_type_t.default.getter();
    os_log(_:dso:log:_:_:)();
    sub_100A5B728();
  }
  else
  {
    if (qword_101637268 != -1) {
      swift_once();
    }
    os_log(_:dso:log:_:_:)();
    sub_10001D4B0(0, (unint64_t *)&qword_1016376E0);
    (*(void (**)(char *, void, uint64_t))(v17 + 104))(v19, enum case for DispatchQoS.QoSClass.default(_:), v16);
    uint64_t v27 = static OS_dispatch_queue.global(qos:)();
    (*(void (**)(char *, uint64_t))(v17 + 8))(v19, v16);
    static DispatchTime.now()();
    + infix(_:_:)();
    uint64_t v28 = *(void *)(v28 + 8);
    id v21 = v13;
    uint64_t v22 = v29;
    ((void (*)(char *, uint64_t))v28)(v21, v29);
    aBlock[4] = sub_10102246C;
    aBlock[5] = a2;
    aBlock[0] = _NSConcreteStackBlock;
    aBlock[1] = 1107296256;
    aBlock[2] = sub_1004B5480;
    aBlock[3] = &unk_101601EA0;
    uint64_t v23 = _Block_copy(aBlock);
    swift_retain();
    static DispatchQoS.unspecified.getter();
    uint64_t v34 = _swiftEmptyArrayStorage;
    sub_101020950((unint64_t *)&qword_10163B7E0, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
    sub_10000588C((uint64_t *)&unk_10163F350);
    sub_100062734((unint64_t *)&qword_10163B7F0, (uint64_t *)&unk_10163F350);
    uint64_t v24 = v33;
    dispatch thunk of SetAlgebra.init<A>(_:)();
    uint64_t v25 = (void *)v27;
    OS_dispatch_queue.asyncAfter(deadline:qos:flags:execute:)();
    _Block_release(v23);

    (*(void (**)(char *, uint64_t))(v32 + 8))(v6, v24);
    (*(void (**)(char *, uint64_t))(v30 + 8))(v9, v31);
    ((void (*)(char *, uint64_t))v28)(v15, v22);
    swift_release();
  }
}

void sub_10101B52C(void *a1, int a2, id a3, uint64_t a4, id a5)
{
  uint64_t v6 = v5;
  id v104 = a1;
  uint64_t v11 = (void *)type metadata accessor for URL();
  uint64_t v101 = *(v11 - 1);
  id v102 = v11;
  __chkstk_darwin(v11);
  uint64_t v13 = (char *)&v94 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = type metadata accessor for DispatchPredicate();
  uint64_t v15 = *(void *)(v14 - 8);
  __chkstk_darwin(v14);
  uint64_t v17 = (uint64_t *)((char *)&v94 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v18 = *(void **)(v6 + 32);
  *uint64_t v17 = v18;
  (*(void (**)(void *, void, uint64_t))(v15 + 104))(v17, enum case for DispatchPredicate.notOnQueue(_:), v14);
  id v19 = v18;
  LOBYTE(v18) = _dispatchPreconditionTest(_:)();
  (*(void (**)(void *, uint64_t))(v15 + 8))(v17, v14);
  if ((v18 & 1) == 0)
  {
    __break(1u);
    goto LABEL_34;
  }
  int v97 = a2;
  uint64_t v20 = swift_allocObject();
  *(void *)(v20 + 16) = _swiftEmptyArrayStorage;
  uint64_t v21 = swift_allocObject();
  *(void *)(v21 + 16) = _swiftEmptyArrayStorage;
  id v99 = a5;
  uint64_t v100 = v20;
  uint64_t v98 = a4;
  if (a3)
  {
    os_log_type_t v22 = static os_log_type_t.debug.getter();
    if (qword_101637268 != -1) {
      swift_once();
    }
    uint64_t v23 = qword_10170EFC0;
    os_log_type_t v24 = v22;
    if (os_log_type_enabled((os_log_t)qword_10170EFC0, v22))
    {
      swift_retain_n();
      uint64_t v25 = swift_slowAlloc();
      uint64_t v103 = v6;
      uint64_t v26 = (uint8_t *)v25;
      id v27 = (id)swift_slowAlloc();
      *(_DWORD *)uint64_t v26 = 136315138;
      id aBlock = v27;
      uint64_t v96 = (uint64_t)(v26 + 4);
      uint64_t v28 = v21;
      id v29 = [*(id *)(v103 + 280) debugDescription];
      uint64_t v30 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      unint64_t v32 = v31;

      uint64_t v21 = v28;
      uint64_t v105 = sub_1008FA0F0(v30, v32, (uint64_t *)&aBlock);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_release_n();
      swift_bridgeObjectRelease();
      uint64_t v33 = "fetchDatabaseChanges exclusiveAccessSemaphore -- caller claims to already have access %s";
      uint64_t v34 = v23;
LABEL_13:
      _os_log_impl((void *)&_mh_execute_header, v34, v24, v33, v26, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      uint64_t v6 = v103;
      swift_slowDealloc();
    }
  }
  else
  {
    os_log_type_t v35 = static os_log_type_t.info.getter();
    if (qword_101637268 != -1) {
      swift_once();
    }
    uint64_t v36 = qword_10170EFC0;
    BOOL v37 = os_log_type_enabled((os_log_t)qword_10170EFC0, v35);
    uint64_t v103 = v6;
    if (v37)
    {
      swift_retain_n();
      uint64_t v38 = (uint8_t *)swift_slowAlloc();
      id aBlock = (id)swift_slowAlloc();
      *(_DWORD *)uint64_t v38 = 136315138;
      uint64_t v96 = (uint64_t)(v38 + 4);
      id v39 = [*(id *)(v103 + 280) debugDescription];
      uint64_t v40 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      uint64_t v41 = v21;
      unint64_t v43 = v42;

      uint64_t v105 = sub_1008FA0F0(v40, v43, (uint64_t *)&aBlock);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_release_n();
      uint64_t v21 = v41;
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v36, v35, ">>> fetchDatabaseChanges exclusiveAccessSemaphore.wait() %s", v38, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      uint64_t v6 = v103;
      swift_slowDealloc();
    }
    id v44 = *(void **)(v6 + 280);
    OS_dispatch_semaphore.wait()();
    os_log_type_t v45 = static os_log_type_t.info.getter();
    uint64_t v46 = qword_10170EFC0;
    os_log_type_t v24 = v45;
    if (os_log_type_enabled((os_log_t)qword_10170EFC0, v45))
    {
      swift_retain_n();
      uint64_t v26 = (uint8_t *)swift_slowAlloc();
      id aBlock = (id)swift_slowAlloc();
      *(_DWORD *)uint64_t v26 = 136315138;
      uint64_t v96 = (uint64_t)(v26 + 4);
      id v47 = [v44 debugDescription];
      uint64_t v48 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      uint64_t v49 = v21;
      unint64_t v51 = v50;

      uint64_t v105 = sub_1008FA0F0(v48, v51, (uint64_t *)&aBlock);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_release_n();
      uint64_t v21 = v49;
      swift_bridgeObjectRelease();
      uint64_t v33 = "<<< fetchDatabaseChanges exclusiveAccessSemaphore.wait() %s";
      uint64_t v34 = v46;
      goto LABEL_13;
    }
  }
  sub_1008BD824((uint64_t)[v104 scope]);
  uint64_t v52 = (void *)sub_1008BE054();
  (*(void (**)(char *, id))(v101 + 8))(v13, v102);
  a3 = [objc_allocWithZone((Class)CKFetchDatabaseChangesOperation) initWithPreviousServerChangeToken:v52];
  id v53 = [self sharedInstance];
  unsigned int v54 = [v53 isInternalBuild];

  id v102 = v52;
  if (!v54)
  {
    uint64_t v70 = v100;
    if (v52)
    {
      id v71 = [v52 data];
      uint64_t v72 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
      unint64_t v74 = v73;

      sub_10001CFB8(v72, v74);
      static os_log_type_t.default.getter();
      if (qword_101637268 == -1) {
        goto LABEL_25;
      }
    }
    else
    {
      static os_log_type_t.default.getter();
      if (qword_101637268 == -1)
      {
LABEL_25:
        sub_10000588C((uint64_t *)&unk_10163AD00);
        uint64_t v75 = swift_allocObject();
        *(_OWORD *)(v75 + 16) = xmmword_101342130;
        id aBlock = [v104 scope];
        type metadata accessor for Scope(0);
        uint64_t v76 = String.init<A>(describing:)();
        uint64_t v78 = v77;
        *(void *)(v75 + 56) = &type metadata for String;
        *(void *)(v75 + 64) = sub_10000B4CC();
        *(void *)(v75 + 32) = v76;
        *(void *)(v75 + 40) = v78;
        os_log(_:dso:log:_:_:)();
        swift_bridgeObjectRelease();
        goto LABEL_29;
      }
    }
    swift_once();
    goto LABEL_25;
  }
  LODWORD(v101) = static os_log_type_t.default.getter();
  if (qword_101637268 != -1) {
    swift_once();
  }
  uint64_t v96 = qword_10170EFC0;
  sub_10000588C((uint64_t *)&unk_10163AD00);
  uint64_t v55 = swift_allocObject();
  *(_OWORD *)(v55 + 16) = xmmword_101347BA0;
  id aBlock = [v104 scope];
  type metadata accessor for Scope(0);
  uint64_t v56 = String.init<A>(describing:)();
  uint64_t v58 = v57;
  *(void *)(v55 + 56) = &type metadata for String;
  unint64_t v59 = sub_10000B4CC();
  unint64_t v60 = v59;
  *(void *)(v55 + 64) = v59;
  *(void *)(v55 + 32) = v56;
  *(void *)(v55 + 40) = v58;
  if (!v52)
  {
    id v69 = (uint64_t *)(v55 + 72);
    *(void *)(v55 + 96) = &type metadata for String;
    *(void *)(v55 + 104) = v59;
LABEL_27:
    *id v69 = 7104878;
    unint64_t v68 = 0xE300000000000000;
    goto LABEL_28;
  }
  uint64_t v95 = v21;
  uint64_t v61 = v6;
  id v62 = [v52 data];
  uint64_t v63 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
  unint64_t v65 = v64;

  uint64_t v66 = Data.hexString.getter();
  unint64_t v68 = v67;
  sub_10001CFB8(v63, v65);
  id v69 = (uint64_t *)(v55 + 72);
  *(void *)(v55 + 96) = &type metadata for String;
  *(void *)(v55 + 104) = v60;
  if (!v68)
  {
    uint64_t v6 = v61;
    uint64_t v21 = v95;
    goto LABEL_27;
  }
  *id v69 = v66;
  uint64_t v6 = v61;
  uint64_t v21 = v95;
LABEL_28:
  *(void *)(v55 + 80) = v68;
  os_log(_:dso:log:_:_:)();
  swift_bridgeObjectRelease();
  uint64_t v70 = v100;
LABEL_29:
  [a3 setFetchAllChanges:1];
  id v79 = [a3 configuration];
  if (v79)
  {
    uint64_t v80 = v79;
    [v79 setAutomaticallyRetryNetworkFailures:0];

    id v81 = [a3 configuration];
    if (v81)
    {
      uint64_t v82 = v81;
      char v83 = v97 & 1;
      [v81 setDiscretionaryNetworkBehavior:0];

      v110 = sub_101022EA4;
      uint64_t v111 = v70;
      id aBlock = _NSConcreteStackBlock;
      uint64_t v107 = 1107296256;
      v108 = sub_10101CD08;
      v109 = &unk_101602878;
      id v84 = _Block_copy(&aBlock);
      swift_retain();
      swift_release();
      [a3 setRecordZoneWithIDChangedBlock:v84];
      _Block_release(v84);
      v110 = sub_101022EA4;
      uint64_t v111 = v21;
      id aBlock = _NSConcreteStackBlock;
      uint64_t v107 = 1107296256;
      v108 = sub_10101CD08;
      v109 = &unk_1016028A0;
      id v85 = _Block_copy(&aBlock);
      swift_retain();
      swift_release();
      [a3 setRecordZoneWithIDWasDeletedBlock:v85];
      _Block_release(v85);
      uint64_t v86 = swift_allocObject();
      *(unsigned char *)(v86 + 16) = v83;
      v110 = sub_101022ED0;
      uint64_t v111 = v86;
      id aBlock = _NSConcreteStackBlock;
      uint64_t v107 = 1107296256;
      v108 = sub_10101CD08;
      v109 = &unk_1016028F0;
      v87 = _Block_copy(&aBlock);
      swift_release();
      [a3 setChangeTokenUpdatedBlock:v87];
      _Block_release(v87);
      uint64_t v88 = swift_allocObject();
      *(unsigned char *)(v88 + 16) = v83;
      id v89 = v104;
      *(void *)(v88 + 24) = v6;
      *(void *)(v88 + 32) = v89;
      id v90 = v99;
      *(void *)(v88 + 40) = v98;
      *(void *)(v88 + 48) = v90;
      *(void *)(v88 + 56) = v21;
      *(void *)(v88 + 64) = v70;
      swift_retain();
      swift_retain();
      swift_retain();
      a5 = v89;
      swift_retain();
      CKFetchDatabaseChangesOperation.undeprecated_fetchDatabaseChangesCompletionBlock.setter();
      static os_log_type_t.default.getter();
      if (qword_101637268 == -1)
      {
LABEL_32:
        sub_10000588C((uint64_t *)&unk_10163AD00);
        uint64_t v91 = swift_allocObject();
        *(_OWORD *)(v91 + 16) = xmmword_101342130;
        *(void *)(v91 + 56) = sub_10001D4B0(0, &qword_101667358);
        *(void *)(v91 + 64) = sub_10033149C(&qword_101667360, &qword_101667358);
        *(void *)(v91 + 32) = a3;
        id v92 = a3;
        os_log(_:dso:log:_:_:)();
        uint64_t v93 = swift_bridgeObjectRelease();
        __chkstk_darwin(v93);
        *(&v94 - 2) = (uint64_t)a5;
        *(&v94 - 1) = (uint64_t)v92;
        QueueSynchronizer.conditionalSync<A>(_:)();
        swift_release();
        swift_release();

        return;
      }
LABEL_34:
      swift_once();
      goto LABEL_32;
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
}

void sub_10101C33C(uint64_t a1, void *a2)
{
  if (a2)
  {
    id v18 = a2;
    sub_1008BDCF8((uint64_t)v18);
    static os_log_type_t.default.getter();
    if (qword_101637268 != -1) {
      swift_once();
    }
    sub_10000588C((uint64_t *)&unk_10163AD00);
    uint64_t v2 = swift_allocObject();
    *(_OWORD *)(v2 + 16) = xmmword_101347BA0;
    uint64_t v3 = URL.absoluteString.getter();
    uint64_t v5 = v4;
    *(void *)(v2 + 56) = &type metadata for String;
    unint64_t v6 = sub_10000B4CC();
    *(void *)(v2 + 64) = v6;
    *(void *)(v2 + 32) = v3;
    *(void *)(v2 + 40) = v5;
    id v7 = [v18 data];
    uint64_t v8 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
    unint64_t v10 = v9;

    uint64_t v11 = Data.hexString.getter();
    uint64_t v13 = v12;
    sub_10001CFB8(v8, v10);
    *(void *)(v2 + 96) = &type metadata for String;
    *(void *)(v2 + 104) = v6;
    *(void *)(v2 + 72) = v11;
    *(void *)(v2 + 80) = v13;
    os_log(_:dso:log:_:_:)();
    swift_bridgeObjectRelease();
  }
  else
  {
    sub_1008BDF6C();
    static os_log_type_t.default.getter();
    if (qword_101637268 != -1) {
      swift_once();
    }
    sub_10000588C((uint64_t *)&unk_10163AD00);
    uint64_t v14 = swift_allocObject();
    *(_OWORD *)(v14 + 16) = xmmword_101342130;
    uint64_t v15 = URL.absoluteString.getter();
    uint64_t v17 = v16;
    *(void *)(v14 + 56) = &type metadata for String;
    *(void *)(v14 + 64) = sub_10000B4CC();
    *(void *)(v14 + 32) = v15;
    *(void *)(v14 + 40) = v17;
    os_log(_:dso:log:_:_:)();
    swift_bridgeObjectRelease();
  }
}

uint64_t sub_10101C7E4(void *a1, void *a2)
{
  uint64_t v4 = type metadata accessor for URL();
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  id v7 = (char *)&v25 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  int v28 = static os_log_type_t.default.getter();
  if (qword_101637268 != -1) {
    swift_once();
  }
  uint64_t v27 = qword_10170EFC0;
  sub_10000588C((uint64_t *)&unk_10163AD00);
  uint64_t v8 = swift_allocObject();
  *(_OWORD *)(v8 + 16) = xmmword_101347BA0;
  id v29 = a1;
  id v30 = [a1 scope];
  type metadata accessor for Scope(0);
  uint64_t v9 = String.init<A>(describing:)();
  uint64_t v11 = v10;
  *(void *)(v8 + 56) = &type metadata for String;
  unint64_t v12 = sub_10000B4CC();
  unint64_t v13 = v12;
  *(void *)(v8 + 64) = v12;
  *(void *)(v8 + 32) = v9;
  *(void *)(v8 + 40) = v11;
  if (!a2)
  {
    os_log_type_t v22 = (uint64_t *)(v8 + 72);
    *(void *)(v8 + 96) = &type metadata for String;
    *(void *)(v8 + 104) = v12;
LABEL_8:
    uint64_t v23 = v29;
    *os_log_type_t v22 = 7104878;
    unint64_t v21 = 0xE300000000000000;
    goto LABEL_9;
  }
  uint64_t v25 = v5;
  uint64_t v26 = v4;
  uint64_t v14 = a2;
  id v15 = [a2 data];
  uint64_t v16 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
  unint64_t v18 = v17;

  uint64_t v19 = Data.hexString.getter();
  unint64_t v21 = v20;
  sub_10001CFB8(v16, v18);
  os_log_type_t v22 = (uint64_t *)(v8 + 72);
  *(void *)(v8 + 96) = &type metadata for String;
  *(void *)(v8 + 104) = v13;
  if (!v21)
  {
    a2 = v14;
    uint64_t v5 = v25;
    uint64_t v4 = v26;
    goto LABEL_8;
  }
  *os_log_type_t v22 = v19;
  a2 = v14;
  uint64_t v5 = v25;
  uint64_t v4 = v26;
  uint64_t v23 = v29;
LABEL_9:
  *(void *)(v8 + 80) = v21;
  os_log(_:dso:log:_:_:)();
  swift_bridgeObjectRelease();
  sub_1008BD824((uint64_t)[v23 scope]);
  sub_10101C33C((uint64_t)v7, a2);
  return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v7, v4);
}

uint64_t sub_10101CA88(void *a1, void *a2, void *a3)
{
  uint64_t v6 = type metadata accessor for URL();
  uint64_t v30 = *(void *)(v6 - 8);
  uint64_t v31 = v6;
  __chkstk_darwin(v6);
  uint64_t v8 = (char *)&v26 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  int v29 = static os_log_type_t.default.getter();
  if (qword_101637268 != -1) {
    swift_once();
  }
  uint64_t v28 = qword_10170EFC0;
  sub_10000588C((uint64_t *)&unk_10163AD00);
  uint64_t v9 = swift_allocObject();
  *(_OWORD *)(v9 + 16) = xmmword_101347500;
  id v32 = [a1 scope];
  type metadata accessor for Scope(0);
  uint64_t v10 = String.init<A>(describing:)();
  id v27 = a1;
  uint64_t v12 = v11;
  *(void *)(v9 + 56) = &type metadata for String;
  unint64_t v13 = sub_10000B4CC();
  *(void *)(v9 + 64) = v13;
  *(void *)(v9 + 32) = v10;
  *(void *)(v9 + 40) = v12;
  id v14 = [a2 zoneName];
  uint64_t v15 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v17 = v16;

  *(void *)(v9 + 96) = &type metadata for String;
  *(void *)(v9 + 104) = v13;
  *(void *)(v9 + 72) = v15;
  *(void *)(v9 + 80) = v17;
  id v18 = [a3 data];
  uint64_t v19 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
  unint64_t v21 = v20;

  uint64_t v22 = Data.hexString.getter();
  uint64_t v24 = v23;
  sub_10001CFB8(v19, v21);
  *(void *)(v9 + 136) = &type metadata for String;
  *(void *)(v9 + 144) = v13;
  *(void *)(v9 + 112) = v22;
  *(void *)(v9 + 120) = v24;
  os_log(_:dso:log:_:_:)();
  swift_bridgeObjectRelease();
  sub_1008BDA60((uint64_t)[v27 scope], a2);
  sub_10101C33C((uint64_t)v8, a3);
  return (*(uint64_t (**)(char *, uint64_t))(v30 + 8))(v8, v31);
}

uint64_t sub_10101CD0C(void *a1, uint64_t a2)
{
  swift_beginAccess();
  id v4 = a1;
  specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
  if (*(void *)((*(void *)(a2 + 16) & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((*(void *)(a2 + 16) & 0xFFFFFFFFFFFFFF8)
                                                                                     + 0x18) >> 1)
    specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
  specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
  specialized Array._endMutation()();
  return swift_endAccess();
}

uint64_t sub_10101CDA8(void *a1)
{
  static os_log_type_t.default.getter();
  if (qword_101637268 != -1) {
    swift_once();
  }
  sub_10000588C((uint64_t *)&unk_10163AD00);
  uint64_t v2 = swift_allocObject();
  *(_OWORD *)(v2 + 16) = xmmword_101347BA0;
  uint64_t v3 = String.init<A>(describing:)();
  uint64_t v5 = v4;
  *(void *)(v2 + 56) = &type metadata for String;
  unint64_t v6 = sub_10000B4CC();
  *(void *)(v2 + 64) = v6;
  *(void *)(v2 + 32) = v3;
  *(void *)(v2 + 40) = v5;
  id v7 = [a1 data];
  uint64_t v8 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
  unint64_t v10 = v9;

  uint64_t v11 = Data.hexString.getter();
  uint64_t v13 = v12;
  sub_10001CFB8(v8, v10);
  *(void *)(v2 + 96) = &type metadata for String;
  *(void *)(v2 + 104) = v6;
  *(void *)(v2 + 72) = v11;
  *(void *)(v2 + 80) = v13;
  os_log(_:dso:log:_:_:)();
  return swift_bridgeObjectRelease();
}

void sub_10101CF1C(void *a1, uint64_t a2, uint64_t a3, char a4, uint64_t a5, void *a6, void (*a7)(uint64_t, uint64_t), uint64_t a8, uint64_t a9, uint64_t a10)
{
  int v11 = a4 & 1;
  static os_log_type_t.default.getter();
  if (qword_101637268 != -1) {
    swift_once();
  }
  sub_10000588C((uint64_t *)&unk_10163AD00);
  uint64_t v12 = swift_allocObject();
  *(_OWORD *)(v12 + 16) = xmmword_101347BA0;
  unsigned int v114 = v11;
  LOBYTE(v120[0]) = v11;
  uint64_t v13 = String.init<A>(describing:)();
  uint64_t v15 = v14;
  *(void *)(v12 + 56) = &type metadata for String;
  unint64_t v16 = sub_10000B4CC();
  unint64_t v17 = v16;
  *(void *)(v12 + 64) = v16;
  *(void *)(v12 + 32) = v13;
  *(void *)(v12 + 40) = v15;
  v112 = a1;
  if (a1)
  {
    id v18 = [a1 data];
    uint64_t v19 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
    unint64_t v21 = v20;

    uint64_t v22 = Data.hexString.getter();
    unint64_t v24 = v23;
    sub_10001CFB8(v19, v21);
    uint64_t v25 = (uint64_t *)(v12 + 72);
    *(void *)(v12 + 96) = &type metadata for String;
    *(void *)(v12 + 104) = v17;
    if (v24)
    {
      *uint64_t v25 = v22;
      goto LABEL_8;
    }
  }
  else
  {
    uint64_t v25 = (uint64_t *)(v12 + 72);
    *(void *)(v12 + 96) = &type metadata for String;
    *(void *)(v12 + 104) = v16;
  }
  *uint64_t v25 = 7104878;
  unint64_t v24 = 0xE300000000000000;
LABEL_8:
  *(void *)(v12 + 80) = v24;
  os_log(_:dso:log:_:_:)();
  swift_bridgeObjectRelease();
  if (qword_101637188 != -1) {
    swift_once();
  }
  uint64_t v26 = (void *)qword_10170EE68;
  id v27 = [self sharedInstance];
  unsigned int v28 = [v27 isInternalBuild];

  if (!v28)
  {
    if (!a3) {
      goto LABEL_22;
    }
LABEL_17:
    swift_errorRetain();
    static os_log_type_t.default.getter();
    uint64_t v31 = swift_allocObject();
    *(_OWORD *)(v31 + 16) = xmmword_101342130;
    swift_errorRetain();
    sub_10000588C(&qword_101638D40);
    uint64_t v32 = String.init<A>(describing:)();
    *(void *)(v31 + 56) = &type metadata for String;
    *(void *)(v31 + 64) = v17;
    *(void *)(v31 + 32) = v32;
    *(void *)(v31 + 40) = v33;
    os_log(_:dso:log:_:_:)();
    swift_bridgeObjectRelease();
    v120[0] = a3;
    swift_errorRetain();
    type metadata accessor for CKError(0);
    if (swift_dynamicCast())
    {
      sub_101020950(&qword_101638668, type metadata accessor for CKError);
      _BridgedStoredNSError.code.getter();
      if (v120[0] == 21)
      {
        sub_10101C7E4(a6, 0);
        if (swift_unknownObjectWeakLoadStrong())
        {
          sub_10009D8A0(a5, 1);
          swift_unknownObjectRelease();
        }
        sub_10101B52C(a6, v114, 1, a7, a8);

LABEL_33:
        swift_errorRelease();
        return;
      }
    }
    os_log_type_t v43 = static os_log_type_t.info.getter();
    id v44 = qword_10170EFC0;
    os_log_type_t v45 = v43;
    if (os_log_type_enabled((os_log_t)qword_10170EFC0, v43))
    {
      swift_retain_n();
      uint64_t v46 = (uint8_t *)swift_slowAlloc();
      v120[0] = swift_slowAlloc();
      *(_DWORD *)uint64_t v46 = 136315138;
      id v47 = [*(id *)(a5 + 280) debugDescription];
      uint64_t v48 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      unint64_t v50 = v49;

      id v123 = (id)sub_1008FA0F0(v48, v50, v120);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_release_n();
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v44, v45, ">>> fetchDatabaseChanges (error) exclusiveAccessSemaphore.signal() %s", v46, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    unint64_t v51 = *(void **)(a5 + 280);
    OS_dispatch_semaphore.signal()();
    os_log_type_t v52 = static os_log_type_t.info.getter();
    id v53 = qword_10170EFC0;
    os_log_type_t v54 = v52;
    if (os_log_type_enabled((os_log_t)qword_10170EFC0, v52))
    {
      swift_retain_n();
      uint64_t v55 = (uint8_t *)swift_slowAlloc();
      v120[0] = swift_slowAlloc();
      *(_DWORD *)uint64_t v55 = 136315138;
      id v56 = [v51 debugDescription];
      uint64_t v57 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      unint64_t v59 = v58;

      id v123 = (id)sub_1008FA0F0(v57, v59, v120);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_release_n();
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v53, v54, "<<< fetchDatabaseChanges (error) exclusiveAccessSemaphore.signal() %s", v55, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    swift_errorRetain();
    a7(a3, 1);
    swift_errorRelease();
    goto LABEL_33;
  }
  NSString v29 = String._bridgeToObjectiveC()();
  unsigned __int8 v30 = [v26 BOOLForKey:v29];

  if (a3) {
    goto LABEL_17;
  }
  if (v30)
  {
    v120[3] = (uint64_t)&type metadata for Bool;
    LOBYTE(v120[0]) = 0;
    sub_100ECFBD0((uint64_t)v120, 0xD00000000000001ALL, 0x800000010141E560, (void *)qword_10170EE68);
    sub_10001DAB4((uint64_t)v120, (uint64_t *)&unk_101644360);
    sub_10101C7E4(a6, 0);
    if (swift_unknownObjectWeakLoadStrong())
    {
      sub_10009D8A0(a5, 1);
      swift_unknownObjectRelease();
    }
    sub_10101B52C(a6, v114, 1, a7, a8);
    return;
  }
LABEL_22:
  uint64_t Strong = swift_unknownObjectWeakLoadStrong();
  if (!Strong)
  {
    static os_log_type_t.error.getter();
    unint64_t v60 = qword_10170EFC0;
    os_log(_:dso:log:_:_:)();
    os_log_type_t v61 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v60, v61))
    {
      swift_retain_n();
      id v62 = (uint8_t *)swift_slowAlloc();
      uint64_t v63 = swift_slowAlloc();
      *(_DWORD *)id v62 = 136315138;
      v120[0] = v63;
      id v64 = [*(id *)(a5 + 280) debugDescription];
      uint64_t v65 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      unint64_t v67 = v66;

      id v123 = (id)sub_1008FA0F0(v65, v67, v120);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_release_n();
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v60, v61, ">>> fetchDatabaseChanges (NoZone) exclusiveAccessSemaphore.signal() %s", v62, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    unint64_t v68 = *(void **)(a5 + 280);
    OS_dispatch_semaphore.signal()();
    os_log_type_t v69 = static os_log_type_t.info.getter();
    uint64_t v70 = qword_10170EFC0;
    os_log_type_t v71 = v69;
    if (os_log_type_enabled((os_log_t)qword_10170EFC0, v69))
    {
      swift_retain_n();
      uint64_t v72 = (uint8_t *)swift_slowAlloc();
      v120[0] = swift_slowAlloc();
      *(_DWORD *)uint64_t v72 = 136315138;
      id v73 = [v68 debugDescription];
      uint64_t v74 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      unint64_t v76 = v75;

      id v123 = (id)sub_1008FA0F0(v74, v76, v120);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_release_n();
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v70, v71, "<<< fetchDatabaseChanges (NoZone) exclusiveAccessSemaphore.signal() %s", v72, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    id v77 = [objc_allocWithZone((Class)NSError) init];
    a7((uint64_t)v77, 1);

    return;
  }
  os_log_type_t v35 = (unint64_t *)(a10 + 16);
  id v36 = *(id *)(Strong + 152);
  swift_unknownObjectRelease();
  swift_beginAccess();
  unint64_t v37 = *(void *)(a9 + 16);
  swift_bridgeObjectRetain();
  char v38 = sub_100276960((uint64_t)v36, v37);
  swift_bridgeObjectRelease();
  if (v38)
  {
    char v39 = v114;
    if (swift_unknownObjectWeakLoadStrong())
    {
      sub_10009D8A0(a5, 1);
      swift_unknownObjectRelease();
    }
    unint64_t v40 = *(void *)(a5 + 80);
    *(void *)(a5 + 80) = 0;
    sub_101022184(v40);
    unint64_t v41 = *(void *)(a5 + 80);
    sub_101022194(v41);
    sub_101021860(v41);
    sub_101022184(v41);
    static os_log_type_t.default.getter();
    char v42 = 2;
    os_log(_:dso:log:_:_:)();
    goto LABEL_41;
  }
  swift_beginAccess();
  unint64_t v78 = *v35;
  swift_bridgeObjectRetain();
  char v79 = sub_100276960((uint64_t)v36, v78);
  swift_bridgeObjectRelease();
  char v39 = v114;
  if ((v79 & 1) == 0)
  {
    char v42 = 3;
LABEL_41:
    sub_101014580(v42);
  }
  uint64_t v80 = sub_101022F64();
  id v81 = (void *)sub_10115A540((unint64_t)v80);
  swift_bridgeObjectRelease();
  swift_beginAccess();
  unint64_t v82 = swift_bridgeObjectRetain();
  unint64_t v83 = sub_10115A540(v82);
  swift_bridgeObjectRelease();
  sub_1009DD8E4(v83, v81);
  id v85 = sub_100711644(v84);
  swift_bridgeObjectRelease();
  swift_beginAccess();
  *os_log_type_t v35 = (unint64_t)v85;
  swift_bridgeObjectRelease();
  swift_beginAccess();
  if (*v35 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v92 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (v92) {
      goto LABEL_44;
    }
  }
  else if (*(void *)((*v35 & 0xFFFFFFFFFFFFFF8) + 0x10))
  {
LABEL_44:
    unint64_t v86 = *(void *)(a5 + 80);
    *(void *)(a5 + 80) = 2;
    sub_101022184(v86);
    unint64_t v87 = *(void *)(a5 + 80);
    sub_101022194(v87);
    sub_101021860(v87);
    sub_101022184(v87);
    swift_beginAccess();
    unint64_t v88 = swift_bridgeObjectRetain();
    sub_101023164(v88);
    swift_beginAccess();
    id v89 = (id *)*v35;
    id v90 = (void *)swift_allocObject();
    v90[2] = a5;
    v90[3] = a6;
    v90[4] = v112;
    v90[5] = a7;
    v90[6] = a8;
    id v91 = v112;
    swift_retain();
    swift_retain();
    swift_bridgeObjectRetain();
    sub_10101E1FC(a6, v39, v89, (uint64_t)sub_101023514, (Swift::Int)v90);
    swift_bridgeObjectRelease();
    swift_release();

    return;
  }
  sub_10101C7E4(a6, v112);
  os_log_type_t v93 = static os_log_type_t.info.getter();
  uint64_t v94 = qword_10170EFC0;
  os_log_type_t v95 = v93;
  if (os_log_type_enabled((os_log_t)qword_10170EFC0, v93))
  {
    swift_retain_n();
    uint64_t v96 = (uint8_t *)swift_slowAlloc();
    uint64_t v97 = swift_slowAlloc();
    *(_DWORD *)uint64_t v96 = 136315138;
    v122[0] = v97;
    id v98 = [*(id *)(a5 + 280) debugDescription];
    uint64_t v99 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    id v118 = v36;
    unint64_t v101 = v100;

    uint64_t v121 = sub_1008FA0F0(v99, v101, v122);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release_n();
    id v36 = v118;
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v94, v95, ">>> fetchDatabaseChanges (no zone fetch needed) exclusiveAccessSemaphore.signal() %s", v96, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  id v102 = *(void **)(a5 + 280);
  OS_dispatch_semaphore.signal()();
  os_log_type_t v103 = static os_log_type_t.info.getter();
  id v104 = qword_10170EFC0;
  os_log_type_t v105 = v103;
  if (os_log_type_enabled((os_log_t)qword_10170EFC0, v103))
  {
    swift_retain_n();
    v106 = (uint8_t *)swift_slowAlloc();
    v122[0] = swift_slowAlloc();
    *(_DWORD *)v106 = 136315138;
    id v107 = [v102 debugDescription];
    uint64_t v108 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    id v109 = v36;
    unint64_t v111 = v110;

    uint64_t v121 = sub_1008FA0F0(v108, v111, v122);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release_n();
    id v36 = v109;
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v104, v105, "<<< fetchDatabaseChanges (no zone fetch needed) exclusiveAccessSemaphore.signal() %s", v106, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  a7(0, 0);
}

uint64_t sub_10101DEF0(uint64_t a1, void *a2, void *a3, uint64_t (*a4)(void, void))
{
  sub_10101C7E4(a2, a3);
  os_log_type_t v5 = static os_log_type_t.info.getter();
  if (qword_101637268 != -1) {
    swift_once();
  }
  unint64_t v6 = qword_10170EFC0;
  if (os_log_type_enabled((os_log_t)qword_10170EFC0, v5))
  {
    swift_retain_n();
    id v7 = (uint8_t *)swift_slowAlloc();
    uint64_t v23 = swift_slowAlloc();
    *(_DWORD *)id v7 = 136315138;
    id v8 = [*(id *)(a1 + 280) debugDescription];
    uint64_t v9 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    unint64_t v11 = v10;

    sub_1008FA0F0(v9, v11, &v23);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release_n();
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v6, v5, ">>> fetchDatabaseChanges (zone fetch complete) exclusiveAccessSemaphore.signal() %s", v7, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  uint64_t v12 = *(void **)(a1 + 280);
  OS_dispatch_semaphore.signal()();
  os_log_type_t v13 = static os_log_type_t.info.getter();
  uint64_t v14 = qword_10170EFC0;
  os_log_type_t v15 = v13;
  if (os_log_type_enabled((os_log_t)qword_10170EFC0, v13))
  {
    swift_retain_n();
    unint64_t v16 = (uint8_t *)swift_slowAlloc();
    uint64_t v23 = swift_slowAlloc();
    *(_DWORD *)unint64_t v16 = 136315138;
    id v17 = [v12 debugDescription];
    uint64_t v18 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    unint64_t v20 = v19;

    sub_1008FA0F0(v18, v20, &v23);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release_n();
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v14, v15, "<<< fetchDatabaseChanges (zone fetch complete) exclusiveAccessSemaphore.signal() %s", v16, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  return a4(0, 0);
}

id sub_10101E1FC(void *a1, char a2, id *a3, uint64_t a4, Swift::Int a5)
{
  uint64_t v80 = a4;
  LOBYTE(v8) = a2;
  id v94 = a1;
  uint64_t v93 = type metadata accessor for URL();
  uint64_t v9 = *(char **)(v93 - 8);
  __chkstk_darwin(v93);
  uint64_t v84 = &v76[-((v10 + 15) & 0xFFFFFFFFFFFFFFF0)];
  static os_log_type_t.default.getter();
  if (qword_101637268 != -1) {
LABEL_35:
  }
    swift_once();
  uint64_t v95 = sub_10000588C((uint64_t *)&unk_10163AD00);
  uint64_t v11 = swift_allocObject();
  long long v82 = xmmword_101342130;
  *(_OWORD *)(v11 + 16) = xmmword_101342130;
  *(void *)(v11 + 56) = sub_10000588C(&qword_101667368);
  *(void *)(v11 + 64) = sub_100062734(&qword_101667370, &qword_101667368);
  *(void *)(v11 + 32) = a3;
  swift_bridgeObjectRetain();
  os_log(_:dso:log:_:_:)();
  id result = (id)swift_bridgeObjectRelease();
  if ((unint64_t)a3 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v13 = _CocoaArrayWrapper.endIndex.getter();
    id result = (id)swift_bridgeObjectRelease();
    uint64_t v14 = v84;
    if (!v13) {
      return result;
    }
  }
  else
  {
    uint64_t v13 = *(void *)(((unint64_t)a3 & 0xFFFFFFFFFFFFFF8) + 0x10);
    uint64_t v14 = v84;
    if (!v13) {
      return result;
    }
  }
  id result = self;
  uint64_t v89 = v13 - 1;
  id v90 = result;
  if (v13 < 1)
  {
    __break(1u);
LABEL_39:
    __break(1u);
    goto LABEL_40;
  }
  Swift::Int v78 = a5;
  int v77 = v8 & 1;
  uint64_t v79 = v5;
  uint64_t v15 = *(void *)(v5 + 272);
  unint64_t v91 = (unint64_t)a3 & 0xC000000000000001;
  uint64_t v92 = v15;
  unint64_t v88 = (void (**)(unsigned char *, uint64_t))(v9 + 8);
  swift_bridgeObjectRetain();
  uint64_t v16 = 0;
  a5 = (Swift::Int)&_swiftEmptyDictionarySingleton;
  long long v81 = xmmword_101347BA0;
  unint64_t v83 = a3;
  while (1)
  {
    unint64_t v20 = v91 ? (char *)specialized _ArrayBuffer._getElementSlowPath(_:)() : (char *)a3[v16 + 4];
    uint64_t v9 = v20;
    id v21 = [objc_allocWithZone((Class)CKFetchRecordZoneChangesConfiguration) init];
    sub_1008BDA60((uint64_t)[v94 scope], v9);
    uint64_t v22 = (void *)sub_1008BE054();
    uint64_t v8 = sub_1008BE054();
    [v21 setPreviousServerChangeToken:v8];

    if ((a5 & 0xC000000000000001) != 0)
    {
      if (a5 < 0) {
        uint64_t v5 = a5;
      }
      else {
        uint64_t v5 = a5 & 0xFFFFFFFFFFFFFF8;
      }
      uint64_t v23 = v9;
      id v24 = v21;
      uint64_t v25 = __CocoaDictionary.count.getter();
      if (__OFADD__(v25, 1))
      {
        __break(1u);
        goto LABEL_35;
      }
      a5 = sub_100EE813C(v5, v25 + 1);
    }
    else
    {
      uint64_t v26 = v9;
      id v27 = v21;
    }
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    Swift::Int v97 = a5;
    sub_1001724C0((uint64_t)v21, v9, isUniquelyReferenced_nonNull_native);
    a5 = v97;

    swift_bridgeObjectRelease();
    id v29 = [v90 sharedInstance];
    unsigned int v30 = [v29 isInternalBuild];

    uint64_t v96 = v16;
    if (!v30) {
      break;
    }
    Swift::Int v87 = a5;
    int v85 = static os_log_type_t.default.getter();
    uint64_t v86 = qword_10170EFC0;
    uint64_t v31 = swift_allocObject();
    *(_OWORD *)(v31 + 16) = v81;
    id v32 = [v9 zoneName];
    uint64_t v33 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v35 = v34;

    *(void *)(v31 + 56) = &type metadata for String;
    unint64_t v36 = sub_10000B4CC();
    unint64_t v37 = v36;
    *(void *)(v31 + 64) = v36;
    *(void *)(v31 + 32) = v33;
    *(void *)(v31 + 40) = v35;
    if (!v22)
    {
      id v17 = (uint64_t *)(v31 + 72);
      *(void *)(v31 + 96) = &type metadata for String;
      *(void *)(v31 + 104) = v36;
LABEL_7:
      uint64_t v18 = v96;
      *id v17 = 7104878;
      unint64_t v19 = 0xE300000000000000;
      goto LABEL_8;
    }
    id v38 = [v22 data];
    uint64_t v39 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
    unint64_t v41 = v40;

    uint64_t v42 = Data.hexString.getter();
    unint64_t v19 = v43;
    sub_10001CFB8(v39, v41);
    id v17 = (uint64_t *)(v31 + 72);
    *(void *)(v31 + 96) = &type metadata for String;
    *(void *)(v31 + 104) = v37;
    if (!v19)
    {
      uint64_t v14 = v84;
      goto LABEL_7;
    }
    *id v17 = v42;
    uint64_t v14 = v84;
    uint64_t v18 = v96;
LABEL_8:
    a5 = v87;
    *(void *)(v31 + 80) = v19;
    os_log(_:dso:log:_:_:)();

    swift_bridgeObjectRelease();
    (*v88)(v14, v93);
    a3 = v83;
    if (v89 == v18) {
      goto LABEL_30;
    }
LABEL_9:
    uint64_t v16 = v18 + 1;
  }
  if (v22)
  {
    id v44 = [v22 data];
    uint64_t v45 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
    unint64_t v47 = v46;

    sub_10001CFB8(v45, v47);
    static os_log_type_t.default.getter();
    uint64_t v48 = swift_allocObject();
    *(_OWORD *)(v48 + 16) = v82;
    id v49 = [v9 zoneName];
    uint64_t v50 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v52 = v51;

    *(void *)(v48 + 56) = &type metadata for String;
    *(void *)(v48 + 64) = sub_10000B4CC();
    *(void *)(v48 + 32) = v50;
    *(void *)(v48 + 40) = v52;
    a3 = v83;
    os_log(_:dso:log:_:_:)();
  }
  else
  {
    static os_log_type_t.default.getter();
    uint64_t v53 = swift_allocObject();
    *(_OWORD *)(v53 + 16) = v82;
    id v54 = [v9 zoneName];
    uint64_t v55 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v57 = v56;

    *(void *)(v53 + 56) = &type metadata for String;
    *(void *)(v53 + 64) = sub_10000B4CC();
    *(void *)(v53 + 32) = v55;
    *(void *)(v53 + 40) = v57;
    os_log(_:dso:log:_:_:)();
  }
  swift_bridgeObjectRelease();
  uint64_t v14 = v84;
  (*v88)(v84, v93);
  uint64_t v18 = v96;
  if (v89 != v96) {
    goto LABEL_9;
  }
LABEL_30:
  swift_bridgeObjectRelease();
  static os_log_type_t.default.getter();
  uint64_t v58 = swift_allocObject();
  *(_OWORD *)(v58 + 16) = v82;
  *(void *)(v58 + 56) = sub_10000588C(&qword_101667378);
  *(void *)(v58 + 64) = sub_100062734(&qword_101667380, &qword_101667378);
  *(void *)(v58 + 32) = a5;
  swift_bridgeObjectRetain();
  os_log(_:dso:log:_:_:)();
  swift_bridgeObjectRelease();
  uint64_t v59 = swift_allocObject();
  *(void *)(v59 + 16) = _swiftEmptyArrayStorage;
  uint64_t v60 = swift_allocObject();
  *(void *)(v60 + 16) = _swiftEmptyArrayStorage;
  os_log_type_t v61 = a3;
  uint64_t v62 = sub_10001D4B0(0, &qword_101667388);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v98.value._rawValue = v61;
  v98.is_nil = a5;
  v63.super.super.super.super.uint64_t isa = CKFetchRecordZoneChangesOperation.init(recordZoneIDs:configurationsByRecordZoneID:)(v98, v99).super.super.super.super.isa;
  id result = [(objc_class *)v63.super.super.super.super.isa configuration];
  if (!result) {
    goto LABEL_39;
  }
  id v64 = result;
  [result setAutomaticallyRetryNetworkFailures:0];

  id result = [(objc_class *)v63.super.super.super.super.isa configuration];
  if (result)
  {
    uint64_t v65 = result;
    [result setDiscretionaryNetworkBehavior:0];

    [(objc_class *)v63.super.super.super.super.isa setFetchAllChanges:1];
    swift_retain();
    CKFetchRecordZoneChangesOperation.undeprecated_recordChangedBlock.setter();
    swift_retain();
    CKFetchRecordZoneChangesOperation.recordWithIDWasDeletedBlock.setter();
    uint64_t v66 = swift_allocObject();
    char v67 = v77;
    *(unsigned char *)(v66 + 16) = v77;
    *(void *)(v66 + 24) = v60;
    *(void *)(v66 + 32) = v59;
    uint64_t v68 = v79;
    id v69 = v94;
    *(void *)(v66 + 40) = v79;
    *(void *)(v66 + 48) = v69;
    swift_retain();
    swift_retain();
    swift_retain();
    id v70 = v69;
    CKFetchRecordZoneChangesOperation.undeprecated_recordZoneFetchCompletionBlock.setter();
    uint64_t v71 = swift_allocObject();
    *(unsigned char *)(v71 + 16) = v67;
    *(void *)(v71 + 24) = v83;
    *(void *)(v71 + 32) = v68;
    Swift::Int v72 = v78;
    *(void *)(v71 + 40) = v80;
    *(void *)(v71 + 48) = v72;
    swift_bridgeObjectRetain();
    swift_retain();
    swift_retain();
    CKFetchRecordZoneChangesOperation.undeprecated_fetchRecordZoneChangesCompletionBlock.setter();
    static os_log_type_t.default.getter();
    uint64_t v73 = swift_allocObject();
    *(_OWORD *)(v73 + 16) = v82;
    *(void *)(v73 + 56) = v62;
    *(void *)(v73 + 64) = sub_10033149C(&qword_101667390, &qword_101667388);
    *(CKFetchRecordZoneChangesOperation *)(v73 + 32) = v63;
    uint64_t v74 = v63.super.super.super.super.isa;
    os_log(_:dso:log:_:_:)();
    uint64_t v75 = swift_bridgeObjectRelease();
    __chkstk_darwin(v75);
    *(void *)&v76[-16] = v70;
    *(void *)&v76[-8] = v74;
    QueueSynchronizer.conditionalSync<A>(_:)();

    swift_release();
    swift_release();
    return (id)swift_bridgeObjectRelease();
  }
LABEL_40:
  __break(1u);
  return result;
}

uint64_t sub_10101ECEC(void *a1, uint64_t a2)
{
  uint64_t v3 = (void *)(a2 + 16);
  static os_log_type_t.debug.getter();
  if (qword_101637268 != -1) {
    swift_once();
  }
  sub_10000588C((uint64_t *)&unk_10163AD00);
  uint64_t v4 = swift_allocObject();
  *(_OWORD *)(v4 + 16) = xmmword_101342130;
  id v5 = [a1 debugDescription];
  uint64_t v6 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v8 = v7;

  *(void *)(v4 + 56) = &type metadata for String;
  *(void *)(v4 + 64) = sub_10000B4CC();
  *(void *)(v4 + 32) = v6;
  *(void *)(v4 + 40) = v8;
  os_log(_:dso:log:_:_:)();
  swift_bridgeObjectRelease();
  swift_beginAccess();
  id v9 = a1;
  specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
  if (*(void *)((*v3 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((*v3 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
    specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
  }
  specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
  specialized Array._endMutation()();
  return swift_endAccess();
}

uint64_t sub_10101EE70(void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7 = (void **)(a4 + 16);
  static os_log_type_t.debug.getter();
  if (qword_101637268 != -1) {
    swift_once();
  }
  sub_10000588C((uint64_t *)&unk_10163AD00);
  uint64_t v8 = swift_allocObject();
  *(_OWORD *)(v8 + 16) = xmmword_101342130;
  *(void *)(v8 + 56) = sub_10001D4B0(0, &qword_10163CB60);
  *(void *)(v8 + 64) = sub_10033149C(&qword_101667330, &qword_10163CB60);
  *(void *)(v8 + 32) = a1;
  id v9 = a1;
  os_log(_:dso:log:_:_:)();
  swift_bridgeObjectRelease();
  swift_beginAccess();
  uint64_t v10 = *v7;
  id v11 = v9;
  swift_bridgeObjectRetain();
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  *uint64_t v7 = v10;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
    uint64_t v10 = sub_100A725AC(0, v10[2] + 1, 1, v10);
    *uint64_t v7 = v10;
  }
  unint64_t v14 = v10[2];
  unint64_t v13 = v10[3];
  if (v14 >= v13 >> 1)
  {
    uint64_t v10 = sub_100A725AC((void *)(v13 > 1), v14 + 1, 1, v10);
    *uint64_t v7 = v10;
  }
  v10[2] = v14 + 1;
  uint64_t v15 = &v10[3 * v14];
  v15[4] = v11;
  v15[5] = a2;
  v15[6] = a3;
  return swift_endAccess();
}

void sub_10101F064(void *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, char a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11)
{
  char v15 = a7 & 1;
  static os_log_type_t.default.getter();
  if (qword_101637268 != -1) {
    swift_once();
  }
  id v54 = (void *)(a8 + 16);
  sub_10000588C((uint64_t *)&unk_10163AD00);
  uint64_t v16 = swift_allocObject();
  *(_OWORD *)(v16 + 16) = xmmword_10134BFA0;
  char v53 = v15;
  LOBYTE(v55[0]) = v15;
  uint64_t v17 = String.init<A>(describing:)();
  uint64_t v19 = v18;
  *(void *)(v16 + 56) = &type metadata for String;
  unint64_t v20 = sub_10000B4CC();
  *(void *)(v16 + 64) = v20;
  *(void *)(v16 + 32) = v17;
  *(void *)(v16 + 40) = v19;
  uint64_t v52 = a1;
  id v21 = [a1 zoneName];
  uint64_t v22 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v24 = v23;

  *(void *)(v16 + 96) = &type metadata for String;
  *(void *)(v16 + 104) = v20;
  *(void *)(v16 + 72) = v22;
  *(void *)(v16 + 80) = v24;
  if (a2)
  {
    id v25 = [a2 data];
    uint64_t v26 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
    unint64_t v28 = v27;

    uint64_t v29 = Data.hexString.getter();
    unint64_t v31 = v30;
    sub_10001CFB8(v26, v28);
    id v32 = (uint64_t *)(v16 + 112);
    *(void *)(v16 + 136) = &type metadata for String;
    *(void *)(v16 + 144) = v20;
    if (v31)
    {
      *id v32 = v29;
      goto LABEL_8;
    }
  }
  else
  {
    id v32 = (uint64_t *)(v16 + 112);
    *(void *)(v16 + 136) = &type metadata for String;
    *(void *)(v16 + 144) = v20;
  }
  *id v32 = 7104878;
  unint64_t v31 = 0xE300000000000000;
LABEL_8:
  uint64_t v33 = a9 + 16;
  *(void *)(v16 + 120) = v31;
  swift_beginAccess();
  if (*v54 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v34 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v34 = *(void *)((*v54 & 0xFFFFFFFFFFFFFF8) + 0x10);
  }
  *(void *)(v16 + 176) = &type metadata for Int;
  *(void *)(v16 + 184) = &protocol witness table for Int;
  *(void *)(v16 + 152) = v34;
  swift_beginAccess();
  uint64_t v35 = *(void *)(*(void *)v33 + 16);
  *(void *)(v16 + 216) = &type metadata for Int;
  *(void *)(v16 + 224) = &protocol witness table for Int;
  *(void *)(v16 + 192) = v35;
  uint64_t Strong = swift_unknownObjectWeakLoadStrong();
  if (Strong) {
    swift_unknownObjectRelease();
  }
  *(void *)(v16 + 256) = &type metadata for Bool;
  *(void *)(v16 + 264) = &protocol witness table for Bool;
  *(unsigned char *)(v16 + 232) = Strong != 0;
  os_log(_:dso:log:_:_:)();
  swift_bridgeObjectRelease();
  unint64_t v37 = self;
  id v38 = [v37 standardUserDefaults];
  id v39 = [self sharedInstance];
  unsigned int v40 = [v39 isInternalBuild];

  if (v40)
  {
    NSString v41 = String._bridgeToObjectiveC()();
    unsigned __int8 v42 = [v38 BOOLForKey:v41];

    if (v42)
    {
      id v43 = [v37 standardUserDefaults];
      memset(v55, 0, sizeof(v55));
      sub_100ECFBD0((uint64_t)v55, 0xD000000000000018, 0x800000010141E8D0, v43);

      sub_10001DAB4((uint64_t)v55, (uint64_t *)&unk_101644360);
      type metadata accessor for CKError(0);
      uint64_t v56 = 6;
      sub_1004A0BC8((uint64_t)_swiftEmptyArrayStorage);
      sub_101020950(&qword_101638668, type metadata accessor for CKError);
      _BridgedStoredNSError.init(_:userInfo:)();
      a6 = *(void *)&v55[0];
LABEL_18:
      swift_errorRetain();
      static os_log_type_t.error.getter();
      uint64_t v44 = swift_allocObject();
      *(_OWORD *)(v44 + 16) = xmmword_101347BA0;
      LOBYTE(v55[0]) = v53;
      uint64_t v45 = String.init<A>(describing:)();
      *(void *)(v44 + 56) = &type metadata for String;
      *(void *)(v44 + 64) = v20;
      *(void *)(v44 + 32) = v45;
      *(void *)(v44 + 40) = v46;
      swift_getErrorValue();
      uint64_t v47 = Error.localizedDescription.getter();
      *(void *)(v44 + 96) = &type metadata for String;
      *(void *)(v44 + 104) = v20;
      *(void *)(v44 + 72) = v47;
      *(void *)(v44 + 80) = v48;
      os_log(_:dso:log:_:_:)();
      swift_bridgeObjectRelease();
      sub_101010D50(a6);
      swift_errorRelease();
      swift_errorRelease();
      return;
    }
  }
  else
  {
  }
  if (a6)
  {
    swift_errorRetain();
    goto LABEL_18;
  }
  if (swift_unknownObjectWeakLoadStrong())
  {
    swift_beginAccess();
    unint64_t v49 = swift_bridgeObjectRetain();
    sub_10009FE98(v49);
    swift_bridgeObjectRelease();
    swift_unknownObjectRelease();
  }
  if (swift_unknownObjectWeakLoadStrong())
  {
    swift_beginAccess();
    uint64_t v50 = swift_bridgeObjectRetain();
    sub_10009F72C(v50);
    swift_bridgeObjectRelease();
    swift_unknownObjectRelease();
  }
  swift_beginAccess();
  *id v54 = _swiftEmptyArrayStorage;
  swift_bridgeObjectRelease();
  swift_beginAccess();
  *(void *)uint64_t v33 = _swiftEmptyArrayStorage;
  swift_bridgeObjectRelease();
  if (a2)
  {
    id v51 = a2;
    sub_101023668(v52);
    sub_10101CA88(a11, v52, v51);
  }
}

uint64_t sub_10101F6A8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(uint64_t))
{
  static os_log_type_t.default.getter();
  if (qword_101637268 != -1) {
    swift_once();
  }
  sub_10000588C((uint64_t *)&unk_10163AD00);
  uint64_t v7 = swift_allocObject();
  *(_OWORD *)(v7 + 16) = xmmword_101347BA0;
  uint64_t v8 = String.init<A>(describing:)();
  uint64_t v10 = v9;
  *(void *)(v7 + 56) = &type metadata for String;
  unint64_t v11 = sub_10000B4CC();
  *(void *)(v7 + 64) = v11;
  *(void *)(v7 + 32) = v8;
  *(void *)(v7 + 40) = v10;
  *(void *)(v7 + 96) = sub_10000588C(&qword_101667368);
  *(void *)(v7 + 104) = sub_100062734(&qword_101667370, &qword_101667368);
  *(void *)(v7 + 72) = a3;
  swift_bridgeObjectRetain();
  os_log(_:dso:log:_:_:)();
  uint64_t v12 = swift_bridgeObjectRelease();
  if (a1)
  {
    swift_errorRetain();
    static os_log_type_t.error.getter();
    uint64_t v13 = swift_allocObject();
    *(_OWORD *)(v13 + 16) = xmmword_101347BA0;
    uint64_t v14 = String.init<A>(describing:)();
    *(void *)(v13 + 56) = &type metadata for String;
    *(void *)(v13 + 64) = v11;
    *(void *)(v13 + 32) = v14;
    *(void *)(v13 + 40) = v15;
    swift_getErrorValue();
    uint64_t v16 = Error.localizedDescription.getter();
    *(void *)(v13 + 96) = &type metadata for String;
    *(void *)(v13 + 104) = v11;
    *(void *)(v13 + 72) = v16;
    *(void *)(v13 + 80) = v17;
    os_log(_:dso:log:_:_:)();
    swift_bridgeObjectRelease();
    sub_101010D50(a1);
    uint64_t v12 = swift_errorRelease();
  }
  return a5(v12);
}

void sub_10101F8F0(uint64_t a1, void *a2)
{
  swift_retain();
  id v3 = sub_10100BB0C();
  id v4 = [v3 privateCloudDatabase];

  sub_10101B52C(v4, 0, 0, (uint64_t)sub_1010244AC, a2);
  swift_release();
}

void sub_10101F988(uint64_t a1, char a2)
{
  if (a2)
  {
    swift_errorRetain();
    static os_log_type_t.error.getter();
    if (qword_101637268 != -1) {
      swift_once();
    }
    sub_10000588C((uint64_t *)&unk_10163AD00);
    uint64_t v3 = swift_allocObject();
    *(_OWORD *)(v3 + 16) = xmmword_101342130;
    swift_errorRetain();
    sub_10000588C(&qword_101638D40);
    uint64_t v4 = String.init<A>(describing:)();
    uint64_t v6 = v5;
    *(void *)(v3 + 56) = &type metadata for String;
    *(void *)(v3 + 64) = sub_10000B4CC();
    *(void *)(v3 + 32) = v4;
    *(void *)(v3 + 40) = v6;
    os_log(_:dso:log:_:_:)();
    swift_bridgeObjectRelease();
    swift_errorRetain();
    type metadata accessor for CKError(0);
    if (swift_dynamicCast())
    {
      sub_101020950(&qword_101638668, type metadata accessor for CKError);
      _BridgedStoredNSError.code.getter();
      if ((unint64_t)(a1 - 3) > 1)
      {
        id v7 = v8;
        sub_101010D50((uint64_t)v7);
        sub_100173E88(a1, 1);
      }
      else
      {
        static os_log_type_t.default.getter();
        os_log(_:dso:log:_:_:)();
        QueueSynchronizer.conditionalSync<A>(_:)();
        sub_100173E88(a1, 1);
      }
    }
    else
    {
      sub_100173E88(a1, 1);
    }
  }
  else
  {
    static os_log_type_t.default.getter();
    if (qword_101637268 != -1) {
      swift_once();
    }
    os_log(_:dso:log:_:_:)();
  }
}

uint64_t CKDatabaseScope.debugDescription.getter(uint64_t a1)
{
  switch(a1)
  {
    case 1:
      return 0x63696C627570;
    case 3:
      return 0x646572616873;
    case 2:
      return 0x65746176697270;
  }
  static os_log_type_t.error.getter();
  sub_10001D4B0(0, (unint64_t *)&qword_10163AE70);
  uint64_t v2 = (void *)static OS_os_log.default.getter();
  os_log(_:dso:log:_:_:)();

  return 0x6E776F6E6B6E75;
}

uint64_t sub_10101FD70()
{
  uint64_t v1 = *v0;
  if (*v0 == 1) {
    return 0x63696C627570;
  }
  if (v1 == 3) {
    return 0x646572616873;
  }
  if (v1 == 2) {
    return 0x65746176697270;
  }
  static os_log_type_t.error.getter();
  sub_10001D4B0(0, (unint64_t *)&qword_10163AE70);
  uint64_t v3 = (void *)static OS_os_log.default.getter();
  os_log(_:dso:log:_:_:)();

  return 0x6E776F6E6B6E75;
}

uint64_t sub_10101FE58(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v9 = type metadata accessor for CloudKitChangeSet(0);
  uint64_t v10 = *(void *)(v9 - 8);
  uint64_t v11 = *(void *)(v10 + 64);
  uint64_t v12 = __chkstk_darwin(v9 - 8);
  uint64_t v13 = (char *)v23 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v12);
  uint64_t v15 = (char *)v23 - v14;
  sub_101023F78(a3, (uint64_t)v23 - v14, type metadata accessor for CloudKitChangeSet);
  sub_101023F78((uint64_t)v15, (uint64_t)v13, type metadata accessor for CloudKitChangeSet);
  unint64_t v16 = (*(unsigned __int8 *)(v10 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v10 + 80);
  unint64_t v17 = (v11 + v16 + 7) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v18 = swift_allocObject();
  sub_101024040((uint64_t)v15, v18 + v16, type metadata accessor for CloudKitChangeSet);
  uint64_t v19 = (uint64_t *)(v18 + v17);
  *uint64_t v19 = a4;
  v19[1] = a5;
  *(void *)(v18 + ((v17 + 23) & 0xFFFFFFFFFFFFFFF8)) = a2;
  uint64_t v20 = qword_1016371D8;
  swift_retain_n();
  swift_retain_n();
  if (v20 != -1) {
    swift_once();
  }
  v23[1] = 0x7365547265646E75;
  v23[2] = 0xE900000000000074;
  SynchronousCache.cachedValue<A>(key:computeBlock:)();
  swift_bridgeObjectRelease();
  if (v24 == 1)
  {
    sub_101020148((uint64_t)v13, a4, a5);
  }
  else
  {
    uint64_t v21 = type metadata accessor for Transaction();
    __chkstk_darwin(v21);
    v23[-4] = a2;
    v23[-3] = sub_10102273C;
    v23[-2] = v18;
    static Transaction.named<A>(_:with:)();
  }
  swift_release();
  sub_101023FE0((uint64_t)v13, type metadata accessor for CloudKitChangeSet);
  swift_release();
  return swift_release();
}

void sub_101020148(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = swift_allocObject();
  *(void *)(v6 + 16) = _swiftEmptyDictionarySingleton;
  uint64_t v7 = swift_allocObject();
  *(void *)(v7 + 16) = _swiftEmptyDictionarySingleton;
  uint64_t v8 = sub_10001D4B0(0, &qword_1016672C8);
  uint64_t v9 = *(void **)(a1 + *(int *)(type metadata accessor for CloudKitChangeSet(0) + 20));
  swift_bridgeObjectRetain();
  uint64_t v10 = swift_bridgeObjectRetain();
  unsigned __int8 v11 = sub_100711660(v10);
  swift_bridgeObjectRelease();
  v26.value._rawValue = v9;
  v26.is_nil = v11;
  v12.super.super.super.super.uint64_t isa = CKModifyRecordsOperation.init(recordsToSave:recordIDsToDelete:)(v26, v27).super.super.super.super.isa;
  id v13 = [self currentThread];
  uint64_t v14 = (uint64_t)[v13 qualityOfService];

  if (v14 >= 25) {
    [(objc_class *)v12.super.super.super.super.isa setQualityOfService:25];
  }
  id v15 = [(objc_class *)v12.super.super.super.super.isa configuration];
  if (!v15)
  {
    __break(1u);
    goto LABEL_9;
  }
  unint64_t v16 = v15;
  [v15 setAutomaticallyRetryNetworkFailures:0];

  id v17 = [(objc_class *)v12.super.super.super.super.isa configuration];
  if (!v17)
  {
LABEL_9:
    __break(1u);
    return;
  }
  uint64_t v18 = v17;
  [v17 setDiscretionaryNetworkBehavior:0];

  swift_retain();
  CKModifyRecordsOperation.perRecordDeleteBlock.setter();
  swift_retain();
  CKModifyRecordsOperation.perRecordSaveBlock.setter();
  uint64_t v19 = (void *)swift_allocObject();
  v19[2] = a2;
  v19[3] = a3;
  v19[4] = v6;
  void v19[5] = v7;
  swift_retain();
  swift_retain();
  swift_retain();
  CKModifyRecordsOperation.modifyRecordsResultBlock.setter();
  static os_log_type_t.default.getter();
  if (qword_101637268 != -1) {
    swift_once();
  }
  sub_10000588C((uint64_t *)&unk_10163AD00);
  uint64_t v20 = swift_allocObject();
  *(_OWORD *)(v20 + 16) = xmmword_101347BA0;
  unint64_t v21 = sub_100EE1480();
  uint64_t v23 = v22;
  *(void *)(v20 + 56) = &type metadata for String;
  *(void *)(v20 + 64) = sub_10000B4CC();
  *(void *)(v20 + 32) = v21;
  *(void *)(v20 + 40) = v23;
  *(void *)(v20 + 96) = v8;
  *(void *)(v20 + 104) = sub_10033149C(&qword_1016672D0, &qword_1016672C8);
  *(CKModifyRecordsOperation *)(v20 + 72) = v12;
  char v24 = v12.super.super.super.super.isa;
  os_log(_:dso:log:_:_:)();
  uint64_t v25 = swift_bridgeObjectRelease();
  __chkstk_darwin(v25);
  QueueSynchronizer.conditionalSync<A>(_:)();
  swift_release();
  swift_release();
}

uint64_t sub_10102050C(void *a1, uint64_t a2, char a3, uint64_t a4, void (*a5)(uint64_t, uint64_t), void (*a6)(uint64_t, uint64_t, id, uint64_t))
{
  swift_beginAccess();
  id v12 = a1;
  uint64_t v13 = a3 & 1;
  a5(a2, v13);
  uint64_t isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v16 = *(void *)(a4 + 16);
  *(void *)(a4 + 16) = 0x8000000000000000;
  a6(a2, v13, v12, isUniquelyReferenced_nonNull_native);
  *(void *)(a4 + 16) = v16;

  swift_bridgeObjectRelease();
  return swift_endAccess();
}

uint64_t sub_1010205DC(uint64_t a1, char a2, void (*a3)(uint64_t, uint64_t, uint64_t), uint64_t a4, uint64_t a5, uint64_t a6)
{
  if (a2)
  {
    swift_errorRetain();
    a3(a1, 0, 1);
    return sub_100173E88(a1, 1);
  }
  else
  {
    swift_beginAccess();
    uint64_t v9 = *(void *)(a5 + 16);
    swift_beginAccess();
    uint64_t v10 = *(void *)(a6 + 16);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    a3(v9, v10, 0);
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
}

void sub_1010206D8(uint64_t a1, uint64_t a2)
{
  id v3 = sub_10100BB0C();
  id v4 = [v3 privateCloudDatabase];

  [v4 addOperation:a2];
}

void *sub_101020748(uint64_t a1)
{
  return sub_101020794(a1, &qword_10163A9F0);
}

uint64_t type metadata accessor for CloudKitCoordinator()
{
  return self;
}

ValueMetadata *type metadata accessor for CloudKitCoordinator.ZoneState()
{
  return &type metadata for CloudKitCoordinator.ZoneState;
}

void *sub_101020788(uint64_t a1)
{
  return sub_101020794(a1, &qword_101667420);
}

void *sub_101020794(uint64_t a1, uint64_t *a2)
{
  if (a1 < 0)
  {
    id result = (void *)_assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  else if (a1)
  {
    sub_10000588C(a2);
    id result = (void *)static Array._allocateBufferUninitialized(minimumCapacity:)();
    result[2] = a1;
  }
  else
  {
    return _swiftEmptyArrayStorage;
  }
  return result;
}

uint64_t sub_101020834(uint64_t a1)
{
  if (a1 < 0)
  {
    uint64_t result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  else
  {
    if (a1)
    {
      sub_10000588C(&qword_101652440);
      uint64_t v2 = (void *)static Array._allocateBufferUninitialized(minimumCapacity:)();
      v2[2] = a1;
    }
    else
    {
      uint64_t v2 = _swiftEmptyArrayStorage;
    }
    sub_10000588C(&qword_101652440);
    return (uint64_t)v2;
  }
  return result;
}

void sub_101020924(unsigned char *a1@<X8>)
{
  *a1 = *(unsigned char *)(v1 + 72);
}

uint64_t sub_101020930()
{
  return sub_1006CC968(40);
}

uint64_t sub_101020938(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_101020948()
{
  return swift_release();
}

uint64_t sub_101020950(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_10102099C()
{
  return sub_10102352C((uint64_t (*)(void, void, void, void, void))sub_101018854);
}

uint64_t sub_1010209B8(unint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_10101907C(a1, a2, a3, *(void *)(v3 + 16), *(void *)(v3 + 24), *(void **)(v3 + 32));
}

uint64_t sub_1010209CC()
{
  swift_release();

  return _swift_deallocObject(v0, 40, 7);
}

uint64_t sub_101020A14()
{
  return sub_1010195E0(*(void **)(v0 + 16));
}

uint64_t sub_101020A28(uint64_t a1, void (*a2)(unsigned char *, id))
{
  uint64_t v4 = a1 + 64;
  uint64_t v5 = 1 << *(unsigned char *)(a1 + 32);
  uint64_t v6 = -1;
  if (v5 < 64) {
    uint64_t v6 = ~(-1 << v5);
  }
  unint64_t v7 = v6 & *(void *)(a1 + 64);
  int64_t v8 = (unint64_t)(v5 + 63) >> 6;
  uint64_t result = swift_bridgeObjectRetain();
  int64_t v10 = 0;
  while (1)
  {
    if (v7)
    {
      unint64_t v11 = __clz(__rbit64(v7));
      v7 &= v7 - 1;
      unint64_t v12 = v11 | (v10 << 6);
      goto LABEL_5;
    }
    int64_t v13 = v10 + 1;
    if (__OFADD__(v10, 1))
    {
      __break(1u);
      goto LABEL_25;
    }
    if (v13 >= v8) {
      return swift_release();
    }
    unint64_t v14 = *(void *)(v4 + 8 * v13);
    ++v10;
    if (!v14)
    {
      int64_t v10 = v13 + 1;
      if (v13 + 1 >= v8) {
        return swift_release();
      }
      unint64_t v14 = *(void *)(v4 + 8 * v10);
      if (!v14)
      {
        int64_t v10 = v13 + 2;
        if (v13 + 2 >= v8) {
          return swift_release();
        }
        unint64_t v14 = *(void *)(v4 + 8 * v10);
        if (!v14)
        {
          int64_t v10 = v13 + 3;
          if (v13 + 3 >= v8) {
            return swift_release();
          }
          unint64_t v14 = *(void *)(v4 + 8 * v10);
          if (!v14) {
            break;
          }
        }
      }
    }
LABEL_22:
    unint64_t v7 = (v14 - 1) & v14;
    unint64_t v12 = __clz(__rbit64(v14)) + (v10 << 6);
LABEL_5:
    sub_100173F4C(*(void *)(a1 + 48) + 40 * v12, (uint64_t)v16);
    id v17 = *(id *)(*(void *)(a1 + 56) + 8 * v12);
    a2(v16, v17);
    uint64_t result = sub_10001DAB4((uint64_t)v16, &qword_1016672E0);
  }
  int64_t v15 = v13 + 4;
  if (v15 >= v8) {
    return swift_release();
  }
  unint64_t v14 = *(void *)(v4 + 8 * v15);
  if (v14)
  {
    int64_t v10 = v15;
    goto LABEL_22;
  }
  while (1)
  {
    int64_t v10 = v15 + 1;
    if (__OFADD__(v15, 1)) {
      break;
    }
    if (v10 >= v8) {
      return swift_release();
    }
    unint64_t v14 = *(void *)(v4 + 8 * v10);
    ++v15;
    if (v14) {
      goto LABEL_22;
    }
  }
LABEL_25:
  __break(1u);
  return result;
}

uint64_t sub_101020BCC(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for UUID();
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t v4 = __chkstk_darwin(v2);
  unint64_t v28 = (char *)&v21 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v4);
  Swift::OpaquePointer_optional v27 = (char *)&v21 - v6;
  uint64_t v7 = sub_10000588C(&qword_101638CF0);
  __chkstk_darwin(v7 - 8);
  uint64_t v9 = (char *)&v21 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = *(void *)(a1 + 16);
  if (v10)
  {
    unint64_t v12 = *(void (**)(char *, uint64_t, uint64_t))(v3 + 16);
    uint64_t v11 = v3 + 16;
    uint64_t v13 = a1 + ((*(unsigned __int8 *)(v11 + 64) + 32) & ~(unint64_t)*(unsigned __int8 *)(v11 + 64));
    uint64_t v14 = *(void *)(v11 + 56);
    unint64_t v15 = v11 + 40;
    char v24 = (uint64_t (**)(char *, uint64_t, uint64_t))(v11 + 32);
    uint64_t v25 = v12;
    uint64_t v22 = (void (**)(char *, char *, uint64_t))(v11 + 16);
    uint64_t v23 = v14;
    uint64_t v26 = v11;
    uint64_t v16 = (void (**)(uint64_t, uint64_t))(v11 - 8);
    unint64_t v21 = v15 & 0xFFFFFFFFFFFFLL | 0xA0D1000000000000;
    uint64_t v18 = (uint64_t)v27;
    id v17 = v28;
    while (1)
    {
      v25(v9, v13, v2);
      uint64_t v19 = *(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))v15;
      (*(void (**)(char *, void, uint64_t, uint64_t))v15)(v9, 0, 1, v2);
      uint64_t result = (*v24)(v9, 1, v2);
      if (result == 1) {
        break;
      }
      (*v22)(v17, v9, v2);
      sub_100DC8CB8(v18, v17);
      (*v16)(v18, v2);
      v13 += v23;
      if (!--v10) {
        return v19(v9, 1, 1, v2);
      }
    }
  }
  else
  {
    uint64_t v19 = *(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(v3 + 56);
    return v19(v9, 1, 1, v2);
  }
  return result;
}

uint64_t sub_101020E24(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for RawSearchResult() - 8;
  uint64_t v3 = __chkstk_darwin(v2);
  uint64_t v5 = (unsigned __int8 *)&v13 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t result = __chkstk_darwin(v3);
  uint64_t v9 = (char *)&v13 - v8;
  uint64_t v10 = *(void *)(a1 + 16);
  if (v10)
  {
    uint64_t v11 = a1 + ((*(unsigned __int8 *)(v7 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80));
    uint64_t v12 = *(void *)(v7 + 72);
    do
    {
      sub_101023F78(v11, (uint64_t)v5, (uint64_t (*)(void))type metadata accessor for RawSearchResult);
      sub_100DCCAA4((uint64_t)v9, v5);
      uint64_t result = sub_101023FE0((uint64_t)v9, (uint64_t (*)(void))type metadata accessor for RawSearchResult);
      v11 += v12;
      --v10;
    }
    while (v10);
  }
  return result;
}

unint64_t sub_101020F54(unint64_t result)
{
  unint64_t v1 = result;
  if (result >> 62)
  {
    uint64_t result = _CocoaArrayWrapper.endIndex.getter();
    uint64_t v2 = result;
    if (!result) {
      return result;
    }
  }
  else
  {
    uint64_t v2 = *(void *)((result & 0xFFFFFFFFFFFFFF8) + 0x10);
    if (!v2) {
      return result;
    }
  }
  if (v2 < 1)
  {
    __break(1u);
  }
  else if ((v1 & 0xC000000000000001) != 0)
  {
    for (uint64_t i = 0; i != v2; ++i)
    {
      uint64_t v4 = specialized _ArrayBuffer._getElementSlowPath(_:)();
      sub_100DD37C8(&v7, v4);
      uint64_t result = swift_release();
    }
  }
  else
  {
    uint64_t v5 = (uint64_t *)(v1 + 32);
    do
    {
      uint64_t v6 = *v5++;
      swift_retain();
      sub_100DD37C8(&v7, v6);
      uint64_t result = swift_release();
      --v2;
    }
    while (v2);
  }
  return result;
}

uint64_t sub_101021028(int a1, uint64_t a2, uint64_t *a3, uint8_t *a4)
{
  uint64_t v8 = type metadata accessor for DispatchPredicate();
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  uint64_t v11 = (uint64_t *)((char *)&v62 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v12 = *(void **)(a2 + 32);
  *uint64_t v11 = v12;
  (*(void (**)(void *, void, uint64_t))(v9 + 104))(v11, enum case for DispatchPredicate.notOnQueue(_:), v8);
  id v13 = v12;
  char v14 = _dispatchPreconditionTest(_:)();
  (*(void (**)(void *, uint64_t))(v9 + 8))(v11, v8);
  if (v14)
  {
    uint64_t v65 = a3;
    unint64_t v15 = &qword_101637000;
    a3 = &qword_10170E000;
    if (a1)
    {
      os_log_type_t v16 = static os_log_type_t.debug.getter();
      if (qword_101637268 != -1) {
        swift_once();
      }
      uint64_t v17 = qword_10170EFC0;
      if (os_log_type_enabled((os_log_t)qword_10170EFC0, v16))
      {
        swift_retain_n();
        uint64_t v18 = (uint8_t *)swift_slowAlloc();
        uint64_t v19 = swift_slowAlloc();
        int v64 = a1;
        *(_DWORD *)uint64_t v18 = 136315138;
        uint64_t v67 = v19;
        CKFetchRecordZoneChangesOperation v63 = a4;
        id v20 = [*(id *)(a2 + 280) debugDescription];
        uint64_t v21 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        unint64_t v23 = v22;

        uint64_t v24 = v21;
        a3 = &qword_10170E000;
        uint64_t v66 = sub_1008FA0F0(v24, v23, &v67);
        a4 = v63;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_release_n();
        unint64_t v15 = &qword_101637000;
        swift_bridgeObjectRelease();
        uint64_t v25 = "purgeLocalCloudKitData exclusiveAccessSemaphore -- caller claims to already have access %s";
        uint64_t v26 = v17;
LABEL_13:
        _os_log_impl((void *)&_mh_execute_header, v26, v16, v25, v18, 0xCu);
        swift_arrayDestroy();
        LOBYTE(a1) = v64;
        swift_slowDealloc();
        swift_slowDealloc();
      }
    }
    else
    {
      os_log_type_t v27 = static os_log_type_t.info.getter();
      if (qword_101637268 != -1) {
        swift_once();
      }
      unint64_t v28 = qword_10170EFC0;
      BOOL v29 = os_log_type_enabled((os_log_t)qword_10170EFC0, v27);
      int v64 = a1;
      if (v29)
      {
        swift_retain_n();
        unint64_t v30 = (uint8_t *)swift_slowAlloc();
        uint64_t v67 = swift_slowAlloc();
        *(_DWORD *)unint64_t v30 = 136315138;
        CKFetchRecordZoneChangesOperation v63 = v30 + 4;
        id v31 = [*(id *)(a2 + 280) debugDescription];
        uint64_t v32 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        uint64_t v33 = a4;
        unint64_t v35 = v34;

        a3 = &qword_10170E000;
        uint64_t v66 = sub_1008FA0F0(v32, v35, &v67);
        unint64_t v15 = &qword_101637000;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_release_n();
        a4 = v33;
        swift_bridgeObjectRelease();
        _os_log_impl((void *)&_mh_execute_header, v28, v27, ">>> purgeLocalCloudKitData exclusiveAccessSemaphore.wait() %s", v30, 0xCu);
        swift_arrayDestroy();
        LOBYTE(a1) = v64;
        swift_slowDealloc();
        swift_slowDealloc();
      }
      unint64_t v36 = *(void **)(a2 + 280);
      OS_dispatch_semaphore.wait()();
      os_log_type_t v37 = static os_log_type_t.info.getter();
      uint64_t v38 = qword_10170EFC0;
      os_log_type_t v16 = v37;
      if (os_log_type_enabled((os_log_t)qword_10170EFC0, v37))
      {
        swift_retain_n();
        uint64_t v18 = (uint8_t *)swift_slowAlloc();
        uint64_t v67 = swift_slowAlloc();
        *(_DWORD *)uint64_t v18 = 136315138;
        id v39 = [v36 debugDescription:v18 + 4];
        uint64_t v40 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        CKFetchRecordZoneChangesOperation v63 = a4;
        unint64_t v42 = v41;

        uint64_t v43 = v40;
        a3 = &qword_10170E000;
        uint64_t v66 = sub_1008FA0F0(v43, v42, &v67);
        unint64_t v15 = &qword_101637000;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_release_n();
        a4 = v63;
        swift_bridgeObjectRelease();
        uint64_t v25 = "<<< purgeLocalCloudKitData exclusiveAccessSemaphore.wait() %s";
        uint64_t v26 = v38;
        goto LABEL_13;
      }
    }
    static os_log_type_t.default.getter();
    if (v15[77] == -1) {
      goto LABEL_15;
    }
    goto LABEL_22;
  }
  __break(1u);
LABEL_22:
  swift_once();
LABEL_15:
  uint64_t v44 = a3[504];
  os_log(_:dso:log:_:_:)();
  sub_100B70F2C((uint64_t)v65, a4);
  static os_log_type_t.default.getter();
  uint64_t result = os_log(_:dso:log:_:_:)();
  if ((a1 & 1) == 0)
  {
    os_log_type_t v46 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v44, v46))
    {
      swift_retain_n();
      uint64_t v47 = (uint8_t *)swift_slowAlloc();
      uint64_t v48 = swift_slowAlloc();
      *(_DWORD *)uint64_t v47 = 136315138;
      uint64_t v67 = v48;
      id v49 = [*(id *)(a2 + 280) debugDescription];
      uint64_t v50 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      unint64_t v52 = v51;

      uint64_t v66 = sub_1008FA0F0(v50, v52, &v67);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_release_n();
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v44, v46, ">>> purgeLocalCloudKitData exclusiveAccessSemaphore.signal() %s", v47, 0xCu);
      swift_arrayDestroy();
      a3 = &qword_10170E000;
      swift_slowDealloc();
      swift_slowDealloc();
    }
    char v53 = *(void **)(a2 + 280);
    OS_dispatch_semaphore.signal()();
    os_log_type_t v54 = static os_log_type_t.info.getter();
    uint64_t v55 = a3[504];
    os_log_type_t v56 = v54;
    uint64_t result = os_log_type_enabled(v55, v54);
    if (result)
    {
      swift_retain_n();
      uint64_t v57 = (uint8_t *)swift_slowAlloc();
      uint64_t v67 = swift_slowAlloc();
      *(_DWORD *)uint64_t v57 = 136315138;
      id v58 = [v53 debugDescription];
      uint64_t v59 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      unint64_t v61 = v60;

      uint64_t v66 = sub_1008FA0F0(v59, v61, &v67);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_release_n();
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v55, v56, "<<< purgeLocalCloudKitData exclusiveAccessSemaphore.signal() %s", v57, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      return swift_slowDealloc();
    }
  }
  return result;
}

void sub_101021860(unint64_t a1)
{
  uint64_t v2 = sub_10000588C((uint64_t *)&unk_10163AC90);
  uint64_t v3 = __chkstk_darwin(v2 - 8);
  uint64_t v5 = (void (*)(uint64_t))((char *)&v23 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0));
  __chkstk_darwin(v3);
  uint64_t v7 = (char *)&v23 - v6;
  sub_10000588C((uint64_t *)&unk_10163AD00);
  uint64_t v8 = swift_allocObject();
  long long v23 = xmmword_101342130;
  *(_OWORD *)(v8 + 16) = xmmword_101342130;
  unint64_t v25 = a1;
  sub_101022194(a1);
  uint64_t v9 = String.init<A>(describing:)();
  uint64_t v11 = v10;
  *(void *)(v8 + 56) = &type metadata for String;
  *(void *)(v8 + 64) = sub_10000B4CC();
  *(void *)(v8 + 32) = v9;
  *(void *)(v8 + 40) = v11;
  sub_10001D4B0(0, (unint64_t *)&qword_10163AE70);
  uint64_t v12 = (void *)static OS_os_log.default.getter();
  static os_log_type_t.default.getter();
  os_log(_:dso:log:type:_:)();
  swift_bridgeObjectRelease();

  if (a1 >= 2)
  {
    if (a1 == 2)
    {
      id v13 = (void *)static OS_os_log.default.getter();
      static os_log_type_t.default.getter();
      os_log(_:dso:log:type:_:)();

      if (qword_101636CD8 != -1) {
        swift_once();
      }
      Date.init()();
      uint64_t v14 = type metadata accessor for Date();
      (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v14 - 8) + 56))(v7, 0, 1, v14);
      sub_1000A5940();
      sub_10001E2BC((uint64_t)v7, (uint64_t)v5);
      sub_100F17C58(v5);
      swift_release();
      sub_10001DAB4((uint64_t)v7, (uint64_t *)&unk_10163AC90);
      sub_1000A5940();
      sub_100F17D58(0, 1);
      swift_release();
    }
    else
    {
      unint64_t v25 = a1;
      swift_errorRetain();
      swift_errorRetain();
      sub_10000588C(&qword_101638D40);
      type metadata accessor for CKError(0);
      if (swift_dynamicCast())
      {
        os_log_type_t v16 = v24;
        uint64_t v17 = swift_allocObject();
        *(_OWORD *)(v17 + 16) = v23;
        uint64_t v24 = v16;
        sub_101020950(&qword_101638668, type metadata accessor for CKError);
        _BridgedStoredNSError.code.getter();
        unint64_t v18 = v25;
        *(void *)(v17 + 56) = &type metadata for Int;
        *(void *)(v17 + 64) = &protocol witness table for Int;
        *(void *)(v17 + 32) = v18;
        uint64_t v19 = (void *)static OS_os_log.default.getter();
        static os_log_type_t.default.getter();
        os_log(_:dso:log:type:_:)();
        swift_bridgeObjectRelease();

        if (qword_101636CD8 != -1) {
          swift_once();
        }
        uint64_t v24 = v16;
        _BridgedStoredNSError.code.getter();
        uint64_t v20 = v25;
        sub_1000A5940();
        sub_100F17D58(v20, 0);
      }
      else
      {
        uint64_t v21 = (void *)static OS_os_log.default.getter();
        static os_log_type_t.default.getter();
        os_log(_:dso:log:type:_:)();

        if (qword_101636CD8 != -1) {
          swift_once();
        }
        sub_1000A5940();
        sub_100F17D58(-1, 0);
      }
      swift_release();
      if (qword_101636CD8 != -1) {
        swift_once();
      }
      uint64_t v22 = type metadata accessor for Date();
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v22 - 8) + 56))(v7, 1, 1, v22);
      sub_1000A5940();
      sub_10001E2BC((uint64_t)v7, (uint64_t)v5);
      sub_100F17C58(v5);
      swift_release();
      sub_101022184(a1);
      sub_10001DAB4((uint64_t)v7, (uint64_t *)&unk_10163AC90);
    }
  }
}

Class sub_101021DCC(uint64_t a1, void *a2)
{
  sub_10001D4B0(0, &qword_1016673C0);
  swift_bridgeObjectRetain();
  v4._countAndFlagsBits = a1;
  v4._object = a2;
  Class isa = CKDatabaseSubscription.init(subscriptionID:)(v4).super.super.isa;
  id v6 = [objc_allocWithZone((Class)CKNotificationInfo) init];
  [v6 setShouldSendContentAvailable:1];
  [(objc_class *)isa setNotificationInfo:v6];
  sub_10001D4B0(0, &qword_1016673C8);
  sub_10000588C(&qword_10166BD20);
  uint64_t v7 = swift_allocObject();
  *(_OWORD *)(v7 + 16) = xmmword_101347EF0;
  *(void *)(v7 + 32) = isa;
  uint64_t v15 = v7;
  specialized Array._endMutation()();
  uint64_t v8 = isa;
  uint64_t v9 = _swiftEmptyArrayStorage;
  uint64_t v10 = v15;
  v11.super.super.super.super.Class isa = CKModifySubscriptionsOperation.init(subscriptionsToSave:subscriptionIDsToDelete:)(*(Swift::OpaquePointer_optional *)(&v9 - 1), v16).super.super.super.super.isa;
  Class result = (Class)[(objc_class *)v11.super.super.super.super.isa configuration];
  if (result)
  {
    Class v13 = result;
    [(objc_class *)result setAutomaticallyRetryNetworkFailures:0];

    Class result = (Class)[(objc_class *)v11.super.super.super.super.isa configuration];
    if (result)
    {
      Class v14 = result;
      [(objc_class *)result setDiscretionaryNetworkBehavior:0];

      return v11.super.super.super.super.isa;
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
  return result;
}

uint64_t sub_101021F68(uint64_t a1)
{
  *(void *)&long long v11 = a1;
  swift_errorRetain();
  sub_10000588C(&qword_101638D40);
  type metadata accessor for CKError(0);
  if (!swift_dynamicCast()) {
    goto LABEL_15;
  }
  id v2 = v13;
  sub_101020950(&qword_101638668, type metadata accessor for CKError);
  _BridgedStoredNSError.code.getter();
  if ((void)v11 != 2)
  {
    swift_errorRetain();

    return a1;
  }
  uint64_t v3 = _BridgedStoredNSError.userInfo.getter();
  uint64_t v4 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  if (*(void *)(v3 + 16) && (uint64_t v6 = sub_100723FF4(v4, v5), (v7 & 1) != 0))
  {
    sub_10012F428(*(void *)(v3 + 56) + 32 * v6, (uint64_t)&v11);
  }
  else
  {
    long long v11 = 0u;
    long long v12 = 0u;
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (!*((void *)&v12 + 1))
  {

    sub_10001DAB4((uint64_t)&v11, (uint64_t *)&unk_101644360);
LABEL_15:
    swift_errorRetain();
    return a1;
  }
  sub_10000588C(&qword_1016672D8);
  if ((swift_dynamicCast() & 1) == 0)
  {

    goto LABEL_15;
  }
  if (*((void *)v13 + 2) != 1)
  {
    swift_errorRetain();

    swift_bridgeObjectRelease();
    return a1;
  }
  uint64_t v8 = sub_100711538((uint64_t)v13);
  uint64_t result = swift_bridgeObjectRelease();
  if (v8[2])
  {
    id v10 = (id)v8[4];
    swift_release();

    return (uint64_t)v10;
  }
  else
  {
    __break(1u);
  }
  return result;
}

unint64_t sub_101022184(unint64_t result)
{
  if (result >= 3) {
    return swift_errorRelease();
  }
  return result;
}

unint64_t sub_101022194(unint64_t result)
{
  if (result >= 3) {
    return swift_errorRetain();
  }
  return result;
}

uint64_t sub_1010221A4(uint64_t a1, uint64_t a2)
{
  return sub_101010D50(a2);
}

unint64_t sub_1010221AC@<X0>(unint64_t *a1@<X8>)
{
  unint64_t v2 = *(void *)(v1 + 80);
  *a1 = v2;
  return sub_101022194(v2);
}

void sub_1010221DC(uint64_t a1)
{
  sub_10101AEC0(a1, v1);
}

void sub_1010221E4(uint64_t a1)
{
  sub_101019838(a1, v1[2], v1[3], v1[4]);
}

unint64_t sub_101022204()
{
  return sub_10101AA14(v0);
}

uint64_t sub_101022220()
{
  swift_release();

  return _swift_deallocObject(v0, 40, 7);
}

uint64_t sub_101022268()
{
  return QueueSynchronizer.conditionalSync<A>(_:)();
}

uint64_t sub_1010222D4()
{
  return sub_10101A98C(v0);
}

unint64_t sub_1010222F0()
{
  unint64_t result = qword_1016672F8;
  if (!qword_1016672F8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1016672F8);
  }
  return result;
}

void sub_101022344()
{
  sub_10101AA68(*(void **)(v0 + 16), *(void *)(v0 + 24), *(void *)(v0 + 32), *(NSObject **)(v0 + 40));
}

uint64_t sub_101022364()
{
  return sub_10100DFAC(v0);
}

uint64_t sub_101022380()
{
  swift_release();
  swift_release();
  swift_release();

  return _swift_deallocObject(v0, 48, 7);
}

uint64_t sub_1010223C8(uint64_t a1, void **a2)
{
  return sub_101019954(a1, a2, v2[2], v2[3], v2[4], v2[5]);
}

uint64_t sub_1010223D4()
{
  return sub_1006CC968(48);
}

uint64_t sub_1010223DC()
{
  uint64_t v1 = *(uint64_t (**)(uint64_t))(v0 + 24);
  uint64_t v2 = *(void *)(v0 + 40);
  Transaction.capture()();
  return v1(v2);
}

uint64_t sub_101022420()
{
  return sub_1006CC968(40);
}

uint64_t sub_101022428()
{
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 24);
  Transaction.capture()();
  return v1(0);
}

uint64_t sub_10102246C()
{
  return sub_101014580(1);
}

uint64_t sub_101022474()
{
  return _swift_deallocObject(v0, 32, 7);
}

void sub_1010224B4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  sub_10101A5DC(a1, a2, a3, *(void **)(v3 + 16), *(NSObject **)(v3 + 24));
}

void sub_1010224BC()
{
  sub_10101A810(*(void **)(v0 + 16), *(void *)(v0 + 24), *(void *)(v0 + 32));
}

uint64_t sub_1010224DC()
{
  swift_release();

  return _swift_deallocObject(v0, 24, 7);
}

void sub_101022518(uint64_t a1)
{
  sub_101012A90(a1, *(void (**)(uint64_t))(v1 + 16));
}

uint64_t sub_10102252C()
{
  swift_release();
  swift_release();

  return _swift_deallocObject(v0, 40, 7);
}

uint64_t sub_101022570()
{
  uint64_t v1 = *(void *)(type metadata accessor for CloudKitChangeSet(0) - 8);
  uint64_t v2 = *(unsigned __int8 *)(v1 + 80);
  uint64_t v3 = (v2 + 24) & ~v2;
  uint64_t v4 = v2 | 7;
  unint64_t v5 = ((*(void *)(v1 + 64) + v3 + 7) & 0xFFFFFFFFFFFFFFF8) + 16;
  swift_release();
  uint64_t v6 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v6 - 8) + 8))(v0 + v3, v6);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();

  return _swift_deallocObject(v0, v5, v4);
}

uint64_t sub_10102268C(uint64_t a1)
{
  uint64_t v3 = *(void *)(type metadata accessor for CloudKitChangeSet(0) - 8);
  unint64_t v4 = (*(unsigned __int8 *)(v3 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  uint64_t v5 = *(void *)(v1 + 16);
  uint64_t v6 = v1 + v4;
  char v7 = (uint64_t *)(v1 + ((*(void *)(v3 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8));
  uint64_t v8 = *v7;
  uint64_t v9 = v7[1];

  return sub_10101FE58(a1, v5, v6, v8, v9);
}

uint64_t sub_101022730()
{
  return sub_1006CC968(40);
}

uint64_t sub_101022740()
{
  swift_bridgeObjectRelease();

  return _swift_deallocObject(v0, 24, 7);
}

uint64_t sub_101022778(void *a1, uint64_t a2, char a3)
{
  return sub_10102050C(a1, a2, a3 & 1, v3, (void (*)(uint64_t, uint64_t))sub_10033093C, (void (*)(uint64_t, uint64_t, id, uint64_t))sub_100172600);
}

uint64_t sub_1010227C0(void *a1, uint64_t a2, char a3)
{
  return sub_10102050C(a1, a2, a3 & 1, v3, (void (*)(uint64_t, uint64_t))sub_100C1E464, (void (*)(uint64_t, uint64_t, id, uint64_t))sub_100172654);
}

uint64_t sub_10102280C(uint64_t a1, char a2)
{
  return sub_1010205DC(a1, a2 & 1, *(void (**)(uint64_t, uint64_t, uint64_t))(v2 + 16), *(void *)(v2 + 24), *(void *)(v2 + 32), *(void *)(v2 + 40));
}

uint64_t sub_101022820()
{
  uint64_t v1 = *(void *)(type metadata accessor for CloudKitChangeSet(0) - 8);
  uint64_t v2 = *(unsigned __int8 *)(v1 + 80);
  uint64_t v3 = (v2 + 16) & ~v2;
  uint64_t v4 = v2 | 7;
  unint64_t v5 = (((*(void *)(v1 + 64) + v3 + 7) & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v6 = v0 + v3;
  uint64_t v7 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v7 - 8) + 8))(v6, v7);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();

  return _swift_deallocObject(v0, v5 + 8, v4);
}

void sub_10102294C()
{
  uint64_t v1 = *(void *)(type metadata accessor for CloudKitChangeSet(0) - 8);
  unint64_t v2 = (*(unsigned __int8 *)(v1 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80);
  unint64_t v3 = (*(void *)(v1 + 64) + v2 + 7) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v4 = *(void *)(v0 + v3);
  uint64_t v5 = *(void *)(v0 + v3 + 8);

  sub_101020148(v0 + v2, v4, v5);
}

uint64_t sub_1010229EC()
{
  swift_release();

  swift_release();
  swift_release();

  return _swift_deallocObject(v0, 56, 7);
}

uint64_t sub_101022A3C(uint64_t a1)
{
  return sub_101017E38(a1, *(void *)(v1 + 16), *(void **)(v1 + 24), *(void (**)(id *))(v1 + 32), *(void *)(v1 + 40), *(void *)(v1 + 48));
}

uint64_t sub_101022A4C()
{
  return sub_1006CC968(40);
}

uint64_t sub_101022A58()
{
  swift_release();
  swift_release();
  swift_release();

  return _swift_deallocObject(v0, 56, 7);
}

uint64_t sub_101022AAC(uint64_t a1)
{
  return sub_101016290(a1, *(void *)(v1 + 16), *(void **)(v1 + 24), *(void *)(v1 + 32));
}

uint64_t sub_101022AB8()
{
  return sub_1006CC968(40);
}

void sub_101022AC4()
{
  sub_101016484(*(void **)(v0 + 16), *(void *)(v0 + 24), *(void *)(v0 + 32));
}

uint64_t sub_101022AD0()
{
  return sub_101023EF8((void (*)(void))&_swift_release);
}

uint64_t sub_101022AE8(uint64_t a1, void **a2, uint64_t a3)
{
  return sub_101016758(a1, a2, a3, *(void *)(v3 + 16), *(void *)(v3 + 24));
}

uint64_t sub_101022AF4()
{
  return sub_101023EF8((void (*)(void))&_swift_errorRelease);
}

uint64_t sub_101022B10()
{
  return sub_101023EF8((void (*)(void))&_swift_release);
}

uint64_t sub_101022B28(unint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_101015470(a1, a2, a3, *(void *)(v3 + 16), *(void *)(v3 + 24));
}

uint64_t sub_101022B34()
{
  return sub_101023EF8((void (*)(void))&_swift_errorRelease);
}

uint64_t sub_101022B50()
{
  swift_release();

  swift_release();

  return _swift_deallocObject(v0, 40, 7);
}

uint64_t sub_101022B98(uint64_t a1)
{
  return sub_1010133E4(a1, *(void *)(v1 + 16), *(void **)(v1 + 24), *(void *)(v1 + 32));
}

uint64_t sub_101022BA4()
{
  return sub_1006CC968(40);
}

uint64_t sub_101022BB0()
{
  return sub_1010136E8(*(void **)(v0 + 16), *(void *)(v0 + 24), *(void *)(v0 + 32));
}

uint64_t sub_101022BC0(void *a1, uint64_t a2)
{
  return sub_101013848(a1, a2, *(void **)(v2 + 16), *(void *)(v2 + 24), *(void **)(v2 + 32));
}

uint64_t sub_101022BCC()
{
  swift_release();

  return _swift_deallocObject(v0, 32, 7);
}

uint64_t sub_101022C04(uint64_t *a1)
{
  return sub_101014FB0(a1, *(uint64_t (**)(uint64_t, void))(v1 + 16));
}

uint64_t sub_101022C30(uint64_t a1)
{
  return sub_1010140D0(a1, *(void *)(v1 + 16), *(void **)(v1 + 24), *(uint64_t (**)(void, uint64_t))(v1 + 32), *(void *)(v1 + 40));
}

uint64_t sub_101022C3C(uint64_t *a1)
{
  return sub_101014FB0(a1, *(uint64_t (**)(uint64_t, void))(v1 + 16));
}

uint64_t sub_101022C64(uint64_t a1)
{
  return sub_101015064(a1, *(uint64_t (**)(void, uint64_t))(v1 + 16));
}

void sub_101022C6C()
{
}

uint64_t sub_101022C78()
{
  swift_release();
  swift_release();
  swift_errorRelease();

  return _swift_deallocObject(v0, 40, 7);
}

uint64_t sub_101022CC0()
{
  sub_101021F68(*(void *)(v0 + 32));
  Future.finish(error:)();

  return swift_errorRelease();
}

uint64_t sub_101022D14()
{
  return Future.finish(result:)();
}

uint64_t sub_101022D5C()
{
  swift_release();
  swift_release();

  return _swift_deallocObject(v0, 40, 7);
}

uint64_t sub_101022DA8()
{
  swift_release();

  swift_release();

  return _swift_deallocObject(v0, 48, 7);
}

uint64_t sub_101022DF0()
{
  swift_release();

  return _swift_deallocObject(v0, 32, 7);
}

void sub_101022E28(void *a1, char a2)
{
  sub_10100F674(a1, a2 & 1, *(void *)(v2 + 16), *(double *)(v2 + 24));
}

void sub_101022E38(uint64_t a1)
{
  sub_101019FDC(a1, v1[2], v1[3], v1[4]);
}

uint64_t sub_101022E58()
{
  return sub_1006CC968(40);
}

void sub_101022E60(void *a1, void *a2)
{
  sub_10101A0EC(a1, a2, *(void *)(v2 + 16), *(void (**)(void *, uint64_t))(v2 + 24));
}

uint64_t sub_101022E6C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_101010434(a1, a2, a3, v3);
}

void sub_101022E74()
{
  sub_1010206D8(*(void *)(v0 + 16), *(void *)(v0 + 24));
}

void sub_101022E90(uint64_t a1, char a2)
{
  sub_1010107A0(a1, a2 & 1, v2);
}

void sub_101022E9C()
{
  sub_101010640(v0);
}

uint64_t sub_101022EA4(void *a1)
{
  return sub_10101CD0C(a1, v1);
}

uint64_t sub_101022EC0()
{
  return _swift_deallocObject(v0, 17, 7);
}

uint64_t sub_101022ED0(void *a1)
{
  return sub_10101CDA8(a1);
}

uint64_t sub_101022ED8()
{
  swift_release();

  swift_release();
  swift_release();
  swift_release();

  return _swift_deallocObject(v0, 72, 7);
}

void sub_101022F30(void *a1, uint64_t a2, uint64_t a3)
{
  sub_10101CF1C(a1, a2, a3, *(unsigned char *)(v3 + 16), *(void *)(v3 + 24), *(void **)(v3 + 32), *(void (**)(uint64_t, uint64_t))(v3 + 40), *(void *)(v3 + 48), *(void *)(v3 + 56), *(void *)(v3 + 64));
}

void *sub_101022F64()
{
  id v0 = [self standardUserDefaults];
  NSString v1 = String._bridgeToObjectiveC()();
  id v2 = [v0 objectForKey:v1];

  if (v2)
  {
    _bridgeAnyObjectToAny(_:)();
    swift_unknownObjectRelease();
  }
  else
  {
    memset(v7, 0, sizeof(v7));
  }
  sub_10028DF08((uint64_t)v7, (uint64_t)v8);
  if (!v8[3])
  {
    sub_10001DAB4((uint64_t)v8, (uint64_t *)&unk_101644360);
    return _swiftEmptyArrayStorage;
  }
  if ((swift_dynamicCast() & 1) == 0) {
    return _swiftEmptyArrayStorage;
  }
  type metadata accessor for PropertyListDecoder();
  swift_allocObject();
  PropertyListDecoder.init()();
  sub_10000588C(&qword_101667398);
  sub_101023A40(&qword_1016673B0, &qword_1016673B8);
  dispatch thunk of PropertyListDecoder.decode<A>(_:from:)();
  swift_release();
  uint64_t v4 = sub_100711644(v8[0]);
  swift_bridgeObjectRelease();
  sub_10001CFB8(v5, v6);
  return v4;
}

uint64_t sub_101023164(unint64_t a1)
{
  id v2 = self;
  id v3 = [v2 standardUserDefaults];
  id v4 = [v2 standardUserDefaults];
  NSString v5 = String._bridgeToObjectiveC()();
  id v6 = [v4 objectForKey:v5];

  if (v6)
  {
    _bridgeAnyObjectToAny(_:)();
    swift_unknownObjectRelease();
  }
  else
  {
    memset(v17, 0, sizeof(v17));
  }
  sub_10028DF08((uint64_t)v17, (uint64_t)v18);
  if (!v18[3])
  {
    sub_10001DAB4((uint64_t)v18, (uint64_t *)&unk_101644360);
    goto LABEL_8;
  }
  if ((swift_dynamicCast() & 1) == 0)
  {
LABEL_8:
    Class v14 = &_swiftEmptySetSingleton;
    goto LABEL_9;
  }
  type metadata accessor for PropertyListDecoder();
  swift_allocObject();
  PropertyListDecoder.init()();
  sub_10000588C(&qword_101667398);
  sub_101023A40(&qword_1016673B0, &qword_1016673B8);
  dispatch thunk of PropertyListDecoder.decode<A>(_:from:)();
  sub_10001CFB8(v15, v16);
  swift_release();
  Class v14 = (void *)v18[0];
LABEL_9:
  v18[0] = v14;
  unint64_t v7 = sub_10115A540(a1);
  swift_bridgeObjectRelease();
  sub_10100A9A8(v7);
  type metadata accessor for PropertyListEncoder();
  swift_allocObject();
  PropertyListEncoder.init()();
  *(void *)&v17[0] = v18[0];
  sub_10000588C(&qword_101667398);
  sub_101023A40(&qword_1016673A0, &qword_1016673A8);
  uint64_t v8 = dispatch thunk of PropertyListEncoder.encode<A>(_:)();
  unint64_t v10 = v9;
  swift_release();
  swift_bridgeObjectRelease();
  Class isa = Data._bridgeToObjectiveC()().super.isa;
  NSString v12 = String._bridgeToObjectiveC()();
  [v3 setObject:isa forKey:v12];

  return sub_10001CFB8(v8, v10);
}

uint64_t sub_1010234C4()
{
  swift_release();

  swift_release();

  return _swift_deallocObject(v0, 56, 7);
}

uint64_t sub_101023514()
{
  return sub_10102352C((uint64_t (*)(void, void, void, void, void))sub_10101DEF0);
}

uint64_t sub_10102352C(uint64_t (*a1)(void, void, void, void, void))
{
  return a1(v1[2], v1[3], v1[4], v1[5], v1[6]);
}

uint64_t sub_101023544(void *a1)
{
  return sub_10101ECEC(a1, v1);
}

uint64_t sub_10102354C(void *a1, uint64_t a2, uint64_t a3)
{
  return sub_10101EE70(a1, a2, a3, v3);
}

uint64_t sub_101023554()
{
  swift_release();
  swift_release();
  swift_release();

  return _swift_deallocObject(v0, 56, 7);
}

void sub_1010235A4(void *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  sub_10101F064(a1, a2, a3, a4, a5, a6, *(unsigned char *)(v6 + 16), *(void *)(v6 + 24), *(void *)(v6 + 32), *(void *)(v6 + 40), *(void **)(v6 + 48));
}

uint64_t sub_1010235DC()
{
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();

  return _swift_deallocObject(v0, 56, 7);
}

uint64_t sub_101023624(uint64_t a1)
{
  return sub_10101F6A8(a1, *(unsigned __int8 *)(v1 + 16), *(void *)(v1 + 24), *(void *)(v1 + 32), *(uint64_t (**)(uint64_t))(v1 + 40));
}

id sub_101023634()
{
  return [*(id *)(v0 + 16) addOperation:*(void *)(v0 + 24)];
}

void sub_101023668(void *a1)
{
  id v2 = self;
  id v3 = [v2 standardUserDefaults];
  id v4 = [v2 standardUserDefaults];
  NSString v5 = String._bridgeToObjectiveC()();
  id v6 = [v4 objectForKey:v5];

  if (v6)
  {
    _bridgeAnyObjectToAny(_:)();
    swift_unknownObjectRelease();
  }
  else
  {
    memset(v18, 0, sizeof(v18));
  }
  sub_10028DF08((uint64_t)v18, (uint64_t)v19);
  if (v19[3])
  {
    if (swift_dynamicCast())
    {
      type metadata accessor for PropertyListDecoder();
      swift_allocObject();
      PropertyListDecoder.init()();
      sub_10000588C(&qword_101667398);
      sub_101023A40(&qword_1016673B0, &qword_1016673B8);
      dispatch thunk of PropertyListDecoder.decode<A>(_:from:)();
      sub_10001CFB8(v16, v17);
      swift_release();
      uint64_t v15 = (void *)v19[0];
      goto LABEL_9;
    }
  }
  else
  {
    sub_10001DAB4((uint64_t)v19, (uint64_t *)&unk_101644360);
  }
  uint64_t v15 = &_swiftEmptySetSingleton;
LABEL_9:
  v19[0] = v15;

  uint64_t v7 = v19[0];
  if ((v19[0] & 0xC000000000000001) != 0)
  {
    swift_bridgeObjectRetain();
    uint64_t v8 = __CocoaSet.count.getter();
    swift_bridgeObjectRelease();
    if (v8)
    {
LABEL_11:
      type metadata accessor for PropertyListEncoder();
      swift_allocObject();
      PropertyListEncoder.init()();
      *(void *)&v18[0] = v7;
      sub_10000588C(&qword_101667398);
      sub_101023A40(&qword_1016673A0, &qword_1016673A8);
      uint64_t v9 = dispatch thunk of PropertyListEncoder.encode<A>(_:)();
      unint64_t v11 = v10;
      swift_release();
      swift_bridgeObjectRelease();
      Class isa = Data._bridgeToObjectiveC()().super.isa;
      NSString v14 = String._bridgeToObjectiveC()();
      [v3 setObject:isa forKey:v14];

      sub_10001CFB8(v9, v11);
      return;
    }
  }
  else if (*(void *)(v19[0] + 16))
  {
    goto LABEL_11;
  }
  swift_bridgeObjectRelease();
  NSString v12 = String._bridgeToObjectiveC()();
  [v3 removeObjectForKey:v12];
}

uint64_t sub_101023A40(unint64_t *a1, unint64_t *a2)
{
  uint64_t result = *a1;
  if (!result)
  {
    sub_10000592C(&qword_101667398);
    sub_10033149C(a2, (unint64_t *)&unk_10165F040);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_101023AD0()
{
  return sub_101010C88(v0);
}

uint64_t sub_101023AEC()
{
  return sub_10100EF00(v0);
}

uint64_t sub_101023B08(uint64_t a1)
{
  return sub_10100EFA0(a1, *(void *)(v1 + 16));
}

uint64_t sub_101023B24()
{
  return sub_101023EF8((void (*)(void))&_swift_release);
}

void sub_101023B3C()
{
  sub_10100F354(*(void *)(v0 + 16), *(void *)(v0 + 24));
}

uint64_t sub_101023B44()
{
  swift_weakDestroy();

  return _swift_deallocObject(v0, 24, 7);
}

uint64_t sub_101023B7C@<X0>(uint64_t a1@<X8>)
{
  return sub_10100EC94(a1);
}

uint64_t sub_101023B84(uint64_t a1, uint64_t a2, char a3)
{
  return sub_10100ED60(a1, a2, a3);
}

uint64_t sub_101023B8C()
{
  *(void *)(*(void *)(v0 + 16) + 104) = *(void *)(v0 + 24);
  swift_retain();
  return swift_release();
}

void sub_101023BC8(uint64_t *a1@<X8>)
{
  uint64_t v2 = *(unsigned __int8 *)(v1 + 112);
  uint64_t v3 = 2;
  if (*(unsigned char *)(v1 + 112)) {
    uint64_t v3 = 0;
  }
  *a1 = v3;
  a1[1] = v2;
  if (v2) {
    uint64_t v4 = 707;
  }
  else {
    uint64_t v4 = 0;
  }
  a1[2] = v2;
  a1[3] = v2;
  a1[4] = v4;
}

void sub_101023BF0()
{
  sub_10100E824(v0);
}

uint64_t sub_101023C0C()
{
  return sub_10100E91C(v0);
}

uint64_t sub_101023C14(uint64_t a1)
{
  return sub_101011748(a1);
}

uint64_t sub_101023C30()
{
  return sub_10100EA00();
}

uint64_t sub_101023C38()
{
  return QueueSynchronizer.conditionalSync<A>(_:)();
}

uint64_t sub_101023C94()
{
  return sub_101023EF8((void (*)(void))&_swift_release);
}

uint64_t sub_101023CAC()
{
  return sub_101011854();
}

uint64_t sub_101023CB4()
{
  return sub_101011934(v0[2], v0[3], v0[4]);
}

uint64_t sub_101023CD4()
{
  return sub_101023EF8((void (*)(void))&_swift_release);
}

uint64_t sub_101023CEC()
{
  return sub_101012118(*(void *)(v0 + 16), *(void *)(v0 + 24));
}

uint64_t sub_101023CF4()
{
  return sub_101023EF8((void (*)(void))&_swift_release);
}

uint64_t sub_101023D0C()
{
  return sub_1010120B4(*(void *)(v0 + 16), *(void *)(v0 + 24));
}

uint64_t sub_101023D14()
{
  return sub_10100E260();
}

void sub_101023D1C(uint64_t a1)
{
  sub_10101F8F0(a1, v1);
}

uint64_t sub_101023D24()
{
  return sub_1006CC968(40);
}

void sub_101023D2C(uint64_t a1, char a2)
{
}

uint64_t sub_101023D38()
{
  return sub_10100C838();
}

uint64_t sub_101023D40()
{
  return sub_10100C890();
}

uint64_t sub_101023D48(uint64_t *a1)
{
  return sub_10100C914(a1);
}

uint64_t sub_101023D50()
{
  return sub_10100CE00();
}

uint64_t sub_101023D58()
{
  swift_release();

  return _swift_deallocObject(v0, 32, 7);
}

void sub_101023D98(uint64_t a1, char a2)
{
  sub_10100CC50(a1, a2 & 1, *(NSObject **)(v2 + 16));
}

void sub_101023DA4()
{
  *(unsigned char *)(v0 + 184) = 0;
}

uint64_t sub_101023DAC@<X0>(unsigned char *a1@<X8>)
{
  return sub_10042C738(v1, a1);
}

uint64_t sub_101023DC8()
{
  uint64_t v1 = sub_10000588C(&qword_101667418);
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 16) & ~v3;
  uint64_t v5 = v4 + *(void *)(v2 + 64);
  uint64_t v6 = v3 | 7;
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);

  return _swift_deallocObject(v0, v5, v6);
}

void sub_101023E5C(void *a1, char a2)
{
  char v3 = a2 & 1;
  sub_10000588C(&qword_101667418);

  sub_10100D128(a1, v3);
}

uint64_t sub_101023EE0()
{
  return sub_101023EF8((void (*)(void))&_swift_release);
}

uint64_t sub_101023EF8(void (*a1)(void))
{
  swift_release();
  a1(*(void *)(v1 + 24));

  return _swift_deallocObject(v1, 32, 7);
}

void sub_101023F48()
{
}

uint64_t sub_101023F78(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

uint64_t sub_101023FE0(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t sub_101024040(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 32))(a2, a1, v5);
  return a2;
}

unsigned char *storeEnumTagSinglePayload for CloudKitCoordinator.DatabaseToken(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFE)
  {
    unsigned int v6 = ((a2 - 255) >> 8) + 1;
    *uint64_t result = a2 + 1;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x101024174);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 1;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for CloudKitCoordinator.DatabaseToken()
{
  return &type metadata for CloudKitCoordinator.DatabaseToken;
}

unsigned char *storeEnumTagSinglePayload for CloudKitCoordinator.CloudKitCoordinatorError(unsigned char *result, int a2, int a3)
{
  if ((a3 + 1) >= 0x10000) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) < 0x100) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2)
  {
    switch(v5)
    {
      case 1:
        *uint64_t result = a2;
        return result;
      case 2:
        *(_WORD *)uint64_t result = a2;
        return result;
      case 3:
        goto LABEL_19;
      case 4:
        *(_DWORD *)uint64_t result = a2;
        return result;
      default:
        return result;
    }
  }
  switch(v5)
  {
    case 1:
      *uint64_t result = 0;
      break;
    case 2:
      *(_WORD *)uint64_t result = 0;
      break;
    case 3:
LABEL_19:
      __break(1u);
      JUMPOUT(0x101024248);
    case 4:
      *(_DWORD *)uint64_t result = 0;
      break;
    default:
      return result;
  }
  return result;
}

ValueMetadata *type metadata accessor for CloudKitCoordinator.CloudKitCoordinatorError()
{
  return &type metadata for CloudKitCoordinator.CloudKitCoordinatorError;
}

unint64_t sub_101024284()
{
  unint64_t result = qword_101667428;
  if (!qword_101667428)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_101667428);
  }
  return result;
}

unint64_t sub_1010242DC()
{
  unint64_t result = qword_101667430;
  if (!qword_101667430)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_101667430);
  }
  return result;
}

void sub_101024330(unsigned char *a1@<X8>)
{
}

id sub_1010243F8()
{
  return sub_101023634();
}

unint64_t sub_101024410@<X0>(unint64_t *a1@<X8>)
{
  return sub_1010221AC(a1);
}

void sub_1010244B0()
{
}

uint64_t sub_1010244D4(uint64_t a1)
{
  return sub_100A303F4(a1);
}

void sub_1010244EC(uint64_t a1)
{
}

void sub_101024504(uint64_t a1)
{
}

uint64_t sub_101024524(uint64_t a1, uint64_t a2)
{
  v3[13] = a2;
  v3[14] = v2;
  v3[12] = a1;
  uint64_t v5 = sub_10000588C(&qword_101648FC0);
  v3[15] = v5;
  v3[16] = *(void *)(v5 - 8);
  v3[17] = swift_task_alloc();
  if (a1)
  {
    swift_getObjectType();
    uint64_t v6 = dispatch thunk of Actor.unownedExecutor.getter();
    uint64_t v8 = v7;
  }
  else
  {
    uint64_t v6 = 0;
    uint64_t v8 = 0;
  }
  v3[18] = v6;
  v3[19] = v8;
  return _swift_task_switch(sub_101024628, v6, v8);
}

uint64_t sub_101024628()
{
  v0[20] = AsyncFilterSequence.Iterator.baseIterator.modify();
  uint64_t v1 = sub_10000588C(&qword_101648FB8);
  uint64_t v2 = sub_100062734(&qword_1016677C0, &qword_101648FB8);
  unsigned int v4 = (void *)swift_task_alloc();
  v0[21] = v4;
  *unsigned int v4 = v0;
  v4[1] = sub_101024728;
  uint64_t v5 = v0[12];
  uint64_t v6 = v0[13];
  return __sScI4next9isolation7ElementQzSgScA_pSgYi_tYa7FailureQzYKFTj(v0 + 9, v5, v6, v3, v1, v2);
}

uint64_t sub_101024728()
{
  uint64_t v2 = *v1;
  swift_task_dealloc();
  if (v0)
  {
    uint64_t v3 = *(void *)(v2 + 144);
    uint64_t v4 = *(void *)(v2 + 152);
    uint64_t v5 = sub_1010249F8;
  }
  else
  {
    (*(void (**)(void))(v2 + 160))();
    uint64_t v3 = *(void *)(v2 + 144);
    uint64_t v4 = *(void *)(v2 + 152);
    uint64_t v5 = sub_101024850;
  }
  return _swift_task_switch(v5, v3, v4);
}

uint64_t sub_101024850()
{
  uint64_t v1 = v0[9];
  uint64_t v2 = v0[10];
  uint64_t v3 = v0[11];
  if (v1)
  {
    uint64_t v5 = v0[16];
    uint64_t v4 = v0[17];
    uint64_t v6 = v0[14];
    uint64_t v7 = v0[15];
    v0[6] = v1;
    v0[7] = v2;
    v0[8] = v3;
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 16))(v4, v6, v7);
    uint64_t v8 = (int *)AsyncFilterSequence.Iterator.isIncluded.getter();
    v0[22] = v9;
    (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v4, v7);
    id v13 = (uint64_t (*)(void *))((char *)v8 + *v8);
    uint64_t v10 = (void *)swift_task_alloc();
    v0[23] = v10;
    *uint64_t v10 = v0;
    v10[1] = sub_101024A78;
    return v13(v0 + 6);
  }
  else
  {
    swift_task_dealloc();
    NSString v12 = (uint64_t (*)(void, uint64_t, uint64_t))v0[1];
    return v12(0, v2, v3);
  }
}

uint64_t sub_1010249F8()
{
  (*(void (**)(void))(v0 + 160))();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_101024A78(char a1)
{
  uint64_t v2 = *v1;
  *(unsigned char *)(*v1 + 192) = a1;
  swift_task_dealloc();
  swift_release();
  uint64_t v3 = *(void *)(v2 + 152);
  uint64_t v4 = *(void *)(v2 + 144);
  return _swift_task_switch(sub_101024BC4, v4, v3);
}

uint64_t sub_101024BC4()
{
  if (*(unsigned char *)(v0 + 192) == 1)
  {
    uint64_t v2 = *(void *)(v0 + 48);
    uint64_t v1 = *(void *)(v0 + 56);
    uint64_t v3 = *(void *)(v0 + 64);
    swift_task_dealloc();
    uint64_t v4 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v0 + 8);
    return v4(v2, v1, v3);
  }
  else
  {
    swift_release();
    swift_bridgeObjectRelease();
    *(void *)(v0 + 160) = AsyncFilterSequence.Iterator.baseIterator.modify();
    uint64_t v6 = sub_10000588C(&qword_101648FB8);
    uint64_t v7 = sub_100062734(&qword_1016677C0, &qword_101648FB8);
    uint64_t v9 = (void *)swift_task_alloc();
    *(void *)(v0 + 168) = v9;
    *uint64_t v9 = v0;
    v9[1] = sub_101024728;
    uint64_t v10 = *(void *)(v0 + 96);
    uint64_t v11 = *(void *)(v0 + 104);
    return __sScI4next9isolation7ElementQzSgScA_pSgYi_tYa7FailureQzYKFTj(v0 + 72, v10, v11, v8, v6, v7);
  }
}

uint64_t sub_101024D38(uint64_t a1)
{
  v2[2] = a1;
  v2[3] = v1;
  v2[4] = *v1;
  return _swift_task_switch(sub_101024D80, v1, 0);
}

uint64_t sub_101024D80()
{
  uint64_t v1 = v0[3];
  uint64_t v2 = v0[4];
  uint64_t v3 = v0[2];
  uint64_t v4 = sub_10103975C(&qword_10165E588, 255, (void (*)(uint64_t))type metadata accessor for PencilPairingService);
  uint64_t v5 = (void *)swift_task_alloc();
  v0[5] = v5;
  v5[2] = v1;
  v5[3] = v3;
  v5[4] = v2;
  uint64_t v6 = (void *)swift_task_alloc();
  v0[6] = v6;
  *uint64_t v6 = v0;
  v6[1] = sub_101024EC8;
  return withCheckedThrowingContinuation<A>(isolation:function:_:)(v0 + 8, v1, v4, 0xD00000000000001FLL, 0x800000010141F230, sub_10103912C, v5, &type metadata for LocalAccountCheckResult);
}

uint64_t sub_101024EC8()
{
  uint64_t v2 = *v1;
  *(void *)(*v1 + 56) = v0;
  swift_task_dealloc();
  if (v0)
  {
    uint64_t v3 = *(void *)(v2 + 24);
    uint64_t v4 = sub_100313080;
  }
  else
  {
    uint64_t v5 = *(void *)(v2 + 24);
    swift_task_dealloc();
    uint64_t v4 = sub_101024FF0;
    uint64_t v3 = v5;
  }
  return _swift_task_switch(v4, v3, 0);
}

uint64_t sub_101024FF0()
{
  return (*(uint64_t (**)(void))(v0 + 8))(*(unsigned __int8 *)(v0 + 64));
}

uint64_t sub_10102500C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v21 = a4;
  uint64_t v7 = sub_10000588C(&qword_101667718);
  uint64_t v8 = *(void *)(v7 - 8);
  uint64_t v9 = *(void *)(v8 + 64);
  __chkstk_darwin(v7);
  uint64_t v10 = (char *)&v20 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = sub_10000588C(&qword_10164DBB0);
  __chkstk_darwin(v11 - 8);
  id v13 = (char *)&v20 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = type metadata accessor for TaskPriority();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v14 - 8) + 56))(v13, 1, 1, v14);
  (*(void (**)(char *, uint64_t, uint64_t))(v8 + 16))(v10, a1, v7);
  uint64_t v15 = sub_10103975C(&qword_10165E588, 255, (void (*)(uint64_t))type metadata accessor for PencilPairingService);
  unint64_t v16 = (*(unsigned __int8 *)(v8 + 80) + 48) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80);
  unint64_t v17 = (v9 + v16 + 7) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v18 = (char *)swift_allocObject();
  *((void *)v18 + 2) = a2;
  *((void *)v18 + 3) = v15;
  *((void *)v18 + 4) = a2;
  *((void *)v18 + 5) = a3;
  (*(void (**)(char *, char *, uint64_t))(v8 + 32))(&v18[v16], v10, v7);
  *(void *)&v18[v17] = v21;
  swift_retain_n();
  swift_retain();
  sub_1008F5E44((uint64_t)v13, (uint64_t)&unk_101667728, (uint64_t)v18);
  return swift_release();
}

uint64_t sub_101025254(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  v7[4] = a6;
  v7[5] = a7;
  _OWORD v7[2] = a4;
  v7[3] = a5;
  type metadata accessor for UUID();
  v7[6] = swift_task_alloc();
  uint64_t v9 = sub_10000588C(&qword_101667718);
  v7[7] = v9;
  uint64_t v10 = *(void *)(v9 - 8);
  v7[8] = v10;
  v7[9] = *(void *)(v10 + 64);
  v7[10] = swift_task_alloc();
  v7[11] = swift_task_alloc();
  return _swift_task_switch(sub_101025364, a4, 0);
}

uint64_t sub_101025364()
{
  uint64_t v1 = v0[11];
  uint64_t v2 = v0[8];
  uint64_t v3 = v0[9];
  uint64_t v4 = v0[7];
  uint64_t v21 = v4;
  uint64_t v5 = v0[4];
  uint64_t v19 = v0[5];
  uint64_t v20 = v0[10];
  uint64_t v18 = v5;
  uint64_t v6 = v0[2];
  uint64_t v22 = v0[3];
  type metadata accessor for WorkItemQueue.WorkItem();
  unint64_t v17 = *(void (**)(uint64_t, uint64_t, uint64_t))(v2 + 16);
  v17(v1, v5, v4);
  uint64_t v7 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v8 = (v7 + 32) & ~v7;
  uint64_t v9 = v3 + 7;
  unint64_t v10 = (v8 + v3 + 7) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v11 = swift_allocObject();
  *(void *)(v11 + 16) = v22;
  *(void *)(v11 + 24) = v6;
  unint64_t v16 = *(void (**)(uint64_t, uint64_t, uint64_t))(v2 + 32);
  v16(v11 + v8, v1, v21);
  *(void *)(v11 + v10) = v19;
  v17(v20, v18, v21);
  uint64_t v12 = (v7 + 24) & ~v7;
  uint64_t v13 = swift_allocObject();
  *(void *)(v13 + 16) = v22;
  v16(v13 + v12, v20, v21);
  *(void *)(v13 + ((v12 + v9) & 0xFFFFFFFFFFFFFFF8)) = v19;
  swift_retain_n();
  swift_retain();
  UUID.init()();
  WorkItemQueue.WorkItem.__allocating_init(identifier:block:completion:)();
  dispatch thunk of WorkItemQueue.enqueue(_:)();
  swift_release();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v14 = (uint64_t (*)(void))v0[1];
  return v14();
}

uint64_t sub_1010255A4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v3[8] = a2;
  v3[9] = a3;
  v3[7] = a1;
  uint64_t v4 = sub_10000588C(&qword_10163D210);
  v3[10] = v4;
  v3[11] = *(void *)(v4 - 8);
  v3[12] = swift_task_alloc();
  return _swift_task_switch(sub_10102566C, 0, 0);
}

uint64_t sub_10102566C()
{
  unint64_t v16 = v0;
  if (qword_1016370D8 != -1) {
    swift_once();
  }
  uint64_t v1 = type metadata accessor for Logger();
  sub_100010324(v1, (uint64_t)qword_10165E160);
  swift_retain_n();
  uint64_t v2 = Logger.logObject.getter();
  os_log_type_t v3 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v2, v3))
  {
    os_log_type_t type = v3;
    uint64_t v4 = v0[11];
    uint64_t v5 = v0[12];
    uint64_t v6 = v0[10];
    uint64_t v7 = swift_slowAlloc();
    uint64_t v15 = swift_slowAlloc();
    *(_DWORD *)uint64_t v7 = 136446466;
    v0[5] = sub_1008FA0F0(0xD00000000000001FLL, 0x800000010141F230, &v15);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v7 + 12) = 2080;
    type metadata accessor for Peripheral();
    sub_10103975C(&qword_101639AC8, 255, (void (*)(uint64_t))&type metadata accessor for Peripheral);
    dispatch thunk of PeripheralProtocol.id.getter();
    sub_100062734(&qword_10163B810, &qword_10163D210);
    uint64_t v8 = dispatch thunk of CustomStringConvertible.description.getter();
    unint64_t v10 = v9;
    (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v5, v6);
    v0[6] = sub_1008FA0F0(v8, v10, &v15);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    swift_release_n();
    _os_log_impl((void *)&_mh_execute_header, v2, type, "%{public}s for peripheral: %s", (uint8_t *)v7, 0x16u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    swift_release_n();
  }

  uint64_t v11 = (void *)swift_task_alloc();
  v0[13] = v11;
  *uint64_t v11 = v0;
  v11[1] = sub_101025994;
  uint64_t v12 = v0[7];
  return sub_101025BAC(v12);
}

uint64_t sub_101025994(char a1)
{
  uint64_t v3 = *v2;
  *(void *)(v3 + 32) = v1;
  *(unsigned char *)(v3 + 24) = a1;
  *(void *)(v3 + 16) = v2;
  uint64_t v4 = *v2;
  *(void *)(v3 + 112) = v1;
  swift_task_dealloc();
  if (v1)
  {
    swift_task_dealloc();
    uint64_t v5 = *(uint64_t (**)(void))(v4 + 8);
    return v5();
  }
  else
  {
    return _swift_task_switch(sub_101025AF0, 0, 0);
  }
}

uint64_t sub_101025AF0()
{
  uint64_t v1 = *(void *)(v0 + 112);
  static Task<>.checkCancellation()();
  if (!v1)
  {
    *(unsigned char *)(v0 + 120) = *(unsigned char *)(v0 + 24);
    sub_10000588C(&qword_101667718);
    CheckedContinuation.resume(returning:)();
  }
  swift_task_dealloc();
  uint64_t v2 = *(uint64_t (**)(void))(v0 + 8);
  return v2();
}

uint64_t sub_101025BAC(uint64_t a1)
{
  *(void *)(v2 + 24) = v1;
  uint64_t v4 = (void *)swift_task_alloc();
  *(void *)(v2 + 32) = v4;
  *uint64_t v4 = v2;
  v4[1] = sub_101025C44;
  return sub_100D92E94(a1);
}

uint64_t sub_101025C44(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = (void *)*v3;
  uint64_t v5 = (void *)*v3;
  v4[5] = a1;
  v4[6] = a2;
  swift_task_dealloc();
  if (v2)
  {
    uint64_t v6 = (uint64_t (*)(void))v5[1];
    return v6();
  }
  else
  {
    uint64_t v8 = v4[3];
    return _swift_task_switch(sub_101025D8C, v8, 0);
  }
}

uint64_t sub_101025D8C()
{
  uint64_t v19 = v0;
  if ((v0[6] & 0x3000000000000000) == 0x1000000000000000)
  {
    int v1 = *((unsigned __int8 *)v0 + 40);
    if (qword_1016370D8 != -1) {
      swift_once();
    }
    uint64_t v2 = type metadata accessor for Logger();
    sub_100010324(v2, (uint64_t)qword_10165E160);
    uint64_t v3 = Logger.logObject.getter();
    os_log_type_t v4 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v3, v4))
    {
      uint64_t v5 = 0xD000000000000010;
      uint64_t v6 = (uint8_t *)swift_slowAlloc();
      uint64_t v18 = swift_slowAlloc();
      *(_DWORD *)uint64_t v6 = 136446210;
      if ((_BYTE)v1)
      {
        if (v1 == 1) {
          uint64_t v5 = 0xD000000000000014;
        }
        else {
          uint64_t v5 = 0xD000000000000017;
        }
        if (v1 == 1) {
          unint64_t v7 = 0x8000000101415BD0;
        }
        else {
          unint64_t v7 = 0x8000000101415BB0;
        }
      }
      else
      {
        unint64_t v7 = 0x8000000101415BF0;
      }
      v0[2] = sub_1008FA0F0(v5, v7, &v18);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v3, v4, "FMND status: %{public}s", v6, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }

    uint64_t v15 = (v1 + 1);
  }
  else
  {
    if (qword_1016370D8 != -1) {
      swift_once();
    }
    uint64_t v8 = type metadata accessor for Logger();
    sub_100010324(v8, (uint64_t)qword_10165E160);
    uint64_t v9 = Logger.logObject.getter();
    os_log_type_t v10 = static os_log_type_t.error.getter();
    BOOL v11 = os_log_type_enabled(v9, v10);
    uint64_t v13 = v0[5];
    unint64_t v12 = v0[6];
    if (v11)
    {
      uint64_t v14 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v14 = 0;
      _os_log_impl((void *)&_mh_execute_header, v9, v10, "Unexpected FMND ID response!", v14, 2u);
      swift_slowDealloc();

      sub_100DB4B8C(v13, v12);
    }
    else
    {
      sub_100DB4B8C(v0[5], v0[6]);
    }
    uint64_t v15 = 0;
  }
  unint64_t v16 = (uint64_t (*)(uint64_t))v0[1];
  return v16(v15);
}

uint64_t sub_101026090(uint64_t a1, char a2, uint64_t a3, uint64_t a4)
{
  *(void *)(v4 + 80) = a3;
  *(void *)(v4 + 88) = a4;
  *(unsigned char *)(v4 + 136) = a2;
  *(void *)(v4 + 72) = a1;
  uint64_t v5 = sub_10000588C(&qword_10163D210);
  *(void *)(v4 + 96) = v5;
  *(void *)(v4 + 104) = *(void *)(v5 - 8);
  *(void *)(v4 + 112) = swift_task_alloc();
  *(void *)(v4 + 120) = swift_task_alloc();
  *(void *)(v4 + 128) = swift_task_alloc();
  return _swift_task_switch(sub_101026178, 0, 0);
}

uint64_t sub_101026178()
{
  uint64_t v59 = v0;
  char v1 = *(unsigned char *)(v0 + 136);
  type metadata accessor for Peripheral();
  sub_10103975C(&qword_101639AC8, 255, (void (*)(uint64_t))&type metadata accessor for Peripheral);
  dispatch thunk of PeripheralProtocol.id.getter();
  if (v1)
  {
    uint64_t v18 = *(void *)(v0 + 72);
    swift_errorRetain();
    if (qword_1016370D8 != -1) {
      swift_once();
    }
    uint64_t v19 = *(void *)(v0 + 128);
    uint64_t v21 = *(void *)(v0 + 104);
    uint64_t v20 = *(void *)(v0 + 112);
    uint64_t v22 = *(void *)(v0 + 96);
    uint64_t v23 = *(void *)(v0 + 72);
    uint64_t v24 = type metadata accessor for Logger();
    sub_100010324(v24, (uint64_t)qword_10165E160);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v21 + 16))(v20, v19, v22);
    sub_10033093C(v23, 1);
    swift_errorRetain();
    unint64_t v25 = Logger.logObject.getter();
    os_log_type_t v26 = static os_log_type_t.error.getter();
    BOOL v27 = os_log_type_enabled(v25, v26);
    uint64_t v28 = v18;
    uint64_t v30 = *(void *)(v0 + 104);
    uint64_t v29 = *(void *)(v0 + 112);
    uint64_t v31 = *(void *)(v0 + 96);
    uint64_t v32 = *(void *)(v0 + 72);
    if (v27)
    {
      log = v25;
      uint64_t v33 = swift_slowAlloc();
      os_log_type_t v54 = (void *)swift_slowAlloc();
      uint64_t v58 = swift_slowAlloc();
      *(_DWORD *)uint64_t v33 = 136446723;
      *(void *)(v0 + 32) = sub_1008FA0F0(0xD00000000000001FLL, 0x800000010141F230, &v58);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v33 + 12) = 2081;
      sub_100062734(&qword_10163B810, &qword_10163D210);
      uint64_t v34 = dispatch thunk of CustomStringConvertible.description.getter();
      *(void *)(v0 + 40) = sub_1008FA0F0(v34, v35, &v58);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      unint64_t v36 = *(void (**)(uint64_t, uint64_t))(v30 + 8);
      v36(v29, v31);
      *(_WORD *)(v33 + 22) = 2114;
      uint64_t v37 = v28;
      swift_errorRetain();
      uint64_t v38 = _swift_stdlib_bridgeErrorToNSError();
      *(void *)(v0 + 48) = v38;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *os_log_type_t v54 = v38;
      sub_100173E88(v32, 1);
      sub_100173E88(v32, 1);
      _os_log_impl((void *)&_mh_execute_header, log, v26, "%{public}s failed for %{private}s. Error %{public}@", (uint8_t *)v33, 0x20u);
      sub_10000588C((uint64_t *)&unk_101638EA0);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_arrayDestroy();
      swift_slowDealloc();
      id v39 = v36;
      swift_slowDealloc();

      if ((static Task<>.isCancelled.getter() & 1) == 0)
      {
LABEL_10:
        uint64_t v40 = *(void *)(v0 + 128);
        uint64_t v41 = *(void *)(v0 + 96);
        *(void *)(v0 + 16) = v37;
        sub_10000588C(&qword_101667718);
        CheckedContinuation.resume(throwing:)();
        uint64_t v42 = v40;
        uint64_t v43 = v41;
LABEL_16:
        v39(v42, v43);
        goto LABEL_17;
      }
    }
    else
    {
      id v39 = *(void (**)(uint64_t, uint64_t))(v30 + 8);
      v39(v29, v31);
      sub_100173E88(v32, 1);
      sub_100173E88(v32, 1);

      uint64_t v37 = v28;
      if ((static Task<>.isCancelled.getter() & 1) == 0) {
        goto LABEL_10;
      }
    }
    uint64_t v45 = Logger.logObject.getter();
    os_log_type_t v46 = static os_log_type_t.error.getter();
    BOOL v47 = os_log_type_enabled(v45, v46);
    uint64_t v48 = *(void *)(v0 + 128);
    uint64_t v49 = *(void *)(v0 + 96);
    uint64_t v50 = *(void *)(v0 + 72);
    if (v47)
    {
      uint64_t v57 = *(void *)(v0 + 128);
      uint64_t v56 = *(void *)(v0 + 96);
      unint64_t v51 = (uint8_t *)swift_slowAlloc();
      uint64_t v58 = swift_slowAlloc();
      *(_DWORD *)unint64_t v51 = 136446210;
      *(void *)(v0 + 24) = sub_1008FA0F0(0xD00000000000001FLL, 0x800000010141F230, &v58);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      _os_log_impl((void *)&_mh_execute_header, v45, v46, "%{public}s Not resuming continuation in cancelled task.", v51, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      sub_100173E88(v50, 1);
      v39(v57, v56);
      goto LABEL_17;
    }

    sub_100173E88(v50, 1);
    uint64_t v42 = v48;
    uint64_t v43 = v49;
    goto LABEL_16;
  }
  if (qword_1016370D8 != -1) {
    swift_once();
  }
  uint64_t v2 = *(void *)(v0 + 120);
  uint64_t v3 = *(void *)(v0 + 128);
  uint64_t v4 = *(void *)(v0 + 96);
  uint64_t v5 = *(void *)(v0 + 104);
  uint64_t v6 = type metadata accessor for Logger();
  sub_100010324(v6, (uint64_t)qword_10165E160);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 16))(v2, v3, v4);
  uint64_t v7 = Logger.logObject.getter();
  os_log_type_t v8 = static os_log_type_t.default.getter();
  BOOL v9 = os_log_type_enabled(v7, v8);
  uint64_t v10 = *(void *)(v0 + 120);
  uint64_t v11 = *(void *)(v0 + 128);
  uint64_t v12 = *(void *)(v0 + 96);
  uint64_t v13 = *(void *)(v0 + 104);
  if (v9)
  {
    uint64_t v14 = swift_slowAlloc();
    uint64_t v58 = swift_slowAlloc();
    *(_DWORD *)uint64_t v14 = 136446467;
    *(void *)(v0 + 56) = sub_1008FA0F0(0xD00000000000001FLL, 0x800000010141F230, &v58);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v14 + 12) = 2081;
    sub_100062734(&qword_10163B810, &qword_10163D210);
    uint64_t v15 = dispatch thunk of CustomStringConvertible.description.getter();
    *(void *)(v0 + 64) = sub_1008FA0F0(v15, v16, &v58);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    uint64_t v17 = *(void (**)(uint64_t, uint64_t))(v13 + 8);
    v17(v10, v12);
    _os_log_impl((void *)&_mh_execute_header, v7, v8, "%{public}s succeeded for %{private}s", (uint8_t *)v14, 0x16u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    v17(v11, v12);
  }
  else
  {

    uint64_t v44 = *(void (**)(uint64_t, uint64_t))(v13 + 8);
    v44(v10, v12);
    v44(v11, v12);
  }
LABEL_17:
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  unint64_t v52 = *(uint64_t (**)(void))(v0 + 8);
  return v52();
}

uint64_t sub_101026978@<X0>(uint64_t a1@<X8>)
{
  id v2 = [self standardUserDefaults];
  NSString v3 = String._bridgeToObjectiveC()();
  id v4 = [v2 objectForKey:v3];

  if (v4)
  {
    _bridgeAnyObjectToAny(_:)();
    swift_unknownObjectRelease();
  }
  else
  {
    memset(v9, 0, sizeof(v9));
  }
  sub_10001D608((uint64_t)v9, (uint64_t)v10, (uint64_t *)&unk_101644360);
  if (v11)
  {
    uint64_t v5 = type metadata accessor for Date();
    int v6 = swift_dynamicCast();
    return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v5 - 8) + 56))(a1, v6 ^ 1u, 1, v5);
  }
  else
  {
    sub_10001DAB4((uint64_t)v10, (uint64_t *)&unk_101644360);
    uint64_t v8 = type metadata accessor for Date();
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 56))(a1, 1, 1, v8);
  }
}

uint64_t sub_101026B00()
{
  uint64_t v0 = type metadata accessor for Logger();
  sub_10001E384(v0, qword_101667438);
  uint64_t v1 = sub_100010324(v0, (uint64_t)qword_101667438);
  if (qword_101637388 != -1) {
    swift_once();
  }
  uint64_t v2 = sub_100010324(v0, (uint64_t)qword_10170F0F8);
  NSString v3 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v0 - 8) + 16);

  return v3(v1, v2, v0);
}

uint64_t sub_101026BC8()
{
  *(void *)(v1 + 16) = v0;
  sub_10000588C(&qword_10164DBB0);
  *(void *)(v1 + 24) = swift_task_alloc();
  return _swift_task_switch(sub_101026C5C, v0, 0);
}

uint64_t sub_101026C5C()
{
  if (qword_101637380 != -1) {
    swift_once();
  }
  uint64_t v1 = type metadata accessor for Logger();
  sub_100010324(v1, (uint64_t)qword_101667438);
  uint64_t v2 = Logger.logObject.getter();
  os_log_type_t v3 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v2, v3))
  {
    id v4 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)id v4 = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, v3, "Starting LocalFindableLostModeDetectionService", v4, 2u);
    swift_slowDealloc();
  }
  uint64_t v5 = *(void *)(v0 + 24);

  uint64_t v6 = type metadata accessor for TaskPriority();
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 56))(v5, 1, 1, v6);
  uint64_t v7 = swift_allocObject();
  swift_weakInit();
  uint64_t v8 = (void *)swift_allocObject();
  v8[2] = 0;
  v8[3] = 0;
  uint64_t v8[4] = v7;
  sub_1000212B0(v5, (uint64_t)&unk_1016677D0, (uint64_t)v8);
  swift_release();
  sub_10001DAB4(v5, &qword_10164DBB0);
  swift_task_dealloc();
  BOOL v9 = *(uint64_t (**)(void))(v0 + 8);
  return v9();
}

uint64_t sub_101026E30(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  *(void *)(v4 + 40) = a4;
  return _swift_task_switch(sub_101026E50, 0, 0);
}

uint64_t sub_101026E50()
{
  swift_beginAccess();
  uint64_t Strong = swift_weakLoadStrong();
  v0[6] = Strong;
  if (Strong)
  {
    uint64_t v2 = (void *)swift_task_alloc();
    v0[7] = v2;
    *uint64_t v2 = v0;
    v2[1] = sub_101026F3C;
    return sub_101027178();
  }
  else
  {
    uint64_t v4 = (uint64_t (*)(void))v0[1];
    return v4();
  }
}

uint64_t sub_101026F3C()
{
  uint64_t v1 = *v0;
  uint64_t v2 = *v0;
  swift_task_dealloc();
  os_log_type_t v3 = (void *)swift_task_alloc();
  *(void *)(v1 + 64) = v3;
  *os_log_type_t v3 = v2;
  v3[1] = sub_10102707C;
  return sub_10102AE24();
}

uint64_t sub_10102707C()
{
  swift_task_dealloc();
  return _swift_task_switch(sub_10048C468, 0, 0);
}

uint64_t sub_101027178()
{
  v1[15] = v0;
  v1[16] = *v0;
  sub_10000588C(&qword_10164DBB0);
  v1[17] = swift_task_alloc();
  return _swift_task_switch(sub_101027234, v0, 0);
}

uint64_t sub_101027234()
{
  if (qword_101637380 != -1) {
    swift_once();
  }
  uint64_t v1 = type metadata accessor for Logger();
  *(void *)(v0 + 144) = sub_100010324(v1, (uint64_t)qword_101667438);
  uint64_t v2 = Logger.logObject.getter();
  os_log_type_t v3 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v2, v3))
  {
    uint64_t v4 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v4 = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, v3, "Registering notifications", v4, 2u);
    swift_slowDealloc();
  }

  uint64_t v5 = qword_1016375E8;
  swift_retain();
  if (v5 != -1) {
    swift_once();
  }
  swift_beginAccess();
  uint64_t result = sub_10001D074((uint64_t)&xmmword_10166E8F0, v0 + 56, (uint64_t *)&unk_101638D30);
  if (*(void *)(v0 + 80))
  {
    sub_10001CEB0((long long *)(v0 + 56), v0 + 16);
    swift_release();
    sub_10001CD44((void *)(v0 + 16), *(void *)(v0 + 40));
    uint64_t v8 = (uint64_t (__cdecl *)())((char *)&dword_1016392A0 + dword_1016392A0);
    uint64_t v7 = (void *)swift_task_alloc();
    *(void *)(v0 + 152) = v7;
    *uint64_t v7 = v0;
    v7[1] = sub_101027448;
    return v8();
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_101027448(uint64_t a1)
{
  uint64_t v2 = *(void *)(*(void *)v1 + 120);
  *(void *)(*(void *)v1 + 160) = a1;
  swift_task_dealloc();
  return _swift_task_switch(sub_101027560, v2, 0);
}

uint64_t sub_101027560()
{
  uint64_t v1 = (uint64_t)(v0 + 2);
  uint64_t v2 = v0[20];
  if (v2)
  {
    uint64_t v4 = v0[16];
    uint64_t v3 = v0[17];
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v1);
    uint64_t v5 = type metadata accessor for TaskPriority();
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 56))(v3, 1, 1, v5);
    uint64_t v6 = swift_allocObject();
    swift_weakInit();
    uint64_t v7 = (void *)swift_allocObject();
    _OWORD v7[2] = 0;
    v7[3] = 0;
    v7[4] = v2;
    v7[5] = v6;
    v7[6] = v4;
    swift_retain();
    sub_1000212B0(v3, (uint64_t)&unk_101667790, (uint64_t)v7);
    swift_release();
    swift_release();
    sub_10001DAB4(v3, &qword_10164DBB0);
  }
  else
  {
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v1);
    uint64_t v8 = Logger.logObject.getter();
    uint64_t v9 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v8, (os_log_type_t)v9))
    {
      uint64_t v10 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v10 = 0;
      _os_log_impl((void *)&_mh_execute_header, v8, (os_log_type_t)v9, "No distritbuted notification service to monitor!", v10, 2u);
      swift_slowDealloc();
    }
  }
  swift_task_dealloc();
  uint64_t v11 = (uint64_t (*)(void))v0[1];
  return v11();
}

uint64_t sub_101027734(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  v6[8] = a5;
  v6[9] = a6;
  v6[7] = a4;
  type metadata accessor for UUID();
  v6[10] = swift_task_alloc();
  sub_10000588C(&qword_101648FB8);
  v6[11] = swift_task_alloc();
  uint64_t v7 = sub_10000588C(&qword_101648FC0);
  v6[12] = v7;
  v6[13] = *(void *)(v7 - 8);
  v6[14] = swift_task_alloc();
  uint64_t v8 = sub_10000588C(&qword_101648FC8);
  v6[15] = v8;
  v6[16] = *(void *)(v8 - 8);
  v6[17] = swift_task_alloc();
  v6[18] = sub_10000588C(&qword_101648FD0);
  v6[19] = swift_task_alloc();
  uint64_t v9 = sub_10000588C(&qword_101648FD8);
  v6[20] = v9;
  v6[21] = *(void *)(v9 - 8);
  v6[22] = swift_task_alloc();
  return _swift_task_switch(sub_10102794C, 0, 0);
}

uint64_t sub_10102794C()
{
  uint64_t v1 = v0[17];
  uint64_t v2 = v0[15];
  uint64_t v3 = v0[16];
  Swift::Int v4 = sub_100DF126C((uint64_t)&off_1015A5BE0);
  swift_arrayDestroy();
  sub_10000588C(&qword_101648FE0);
  (*(void (**)(uint64_t, void, uint64_t))(v3 + 104))(v1, enum case for AsyncStream.Continuation.BufferingPolicy.unbounded<A>(_:), v2);
  AsyncStream.init(_:bufferingPolicy:_:)();
  *(void *)(swift_allocObject() + 16) = v4;
  sub_100062734(&qword_101648FF0, &qword_101648FD0);
  AsyncFilterSequence.init(_:isIncluded:)();
  AsyncFilterSequence.base.getter();
  dispatch thunk of AsyncSequence.makeAsyncIterator()();
  AsyncFilterSequence.isIncluded.getter();
  AsyncFilterSequence.Iterator.init(_:isIncluded:)();
  swift_beginAccess();
  uint64_t v7 = (char *)&dword_101667798 + dword_101667798;
  uint64_t v5 = (void *)swift_task_alloc();
  v0[23] = v5;
  *uint64_t v5 = v0;
  v5[1] = sub_101027BB8;
  return ((uint64_t (*)(void, void, void *))v7)(0, 0, v0 + 5);
}

uint64_t sub_101027BB8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  Swift::Int v4 = (void *)*v3;
  v4[24] = a1;
  v4[25] = a2;
  v4[26] = a3;
  swift_task_dealloc();
  return _swift_task_switch(sub_101027CBC, 0, 0);
}

uint64_t sub_101027CBC()
{
  uint64_t v33 = v0;
  if (v0[24])
  {
    unint64_t v1 = v0[26];
    uint64_t Strong = swift_weakLoadStrong();
    v0[27] = Strong;
    if (Strong)
    {
      uint64_t v3 = Strong;
      uint64_t v4 = qword_101637380;
      swift_bridgeObjectRetain();
      if (v4 != -1) {
        swift_once();
      }
      uint64_t v5 = type metadata accessor for Logger();
      sub_100010324(v5, (uint64_t)qword_101667438);
      swift_bridgeObjectRetain_n();
      uint64_t v6 = Logger.logObject.getter();
      os_log_type_t v7 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v6, v7))
      {
        uint64_t v29 = v0[25];
        uint64_t v8 = (uint8_t *)swift_slowAlloc();
        uint64_t v32 = swift_slowAlloc();
        *(_DWORD *)uint64_t v8 = 136315138;
        swift_bridgeObjectRetain();
        v0[6] = sub_1008FA0F0(v29, v1, &v32);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease_n();
        _os_log_impl((void *)&_mh_execute_header, v6, v7, "Getting a notification with name %s", v8, 0xCu);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
      }
      else
      {

        swift_bridgeObjectRelease_n();
      }
      if (v0[25] == 0xD00000000000001ELL && v0[26] == 0x80000001013F1210
        || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0
        || v0[25] == 0xD000000000000020 && v0[26] == 0x80000001013F1260
        || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
      {
        uint64_t v14 = Logger.logObject.getter();
        os_log_type_t v15 = static os_log_type_t.default.getter();
        if (os_log_type_enabled(v14, v15))
        {
          unint64_t v16 = (uint8_t *)swift_slowAlloc();
          *(_WORD *)unint64_t v16 = 0;
          _os_log_impl((void *)&_mh_execute_header, v14, v15, "Onboarding is about to appear, so flush the queue of any pending serial number lookups", v16, 2u);
          swift_slowDealloc();
        }

        v0[28] = *(void *)(v3 + 136);
        uint64_t v31 = (uint64_t (*)(void))((char *)&async function pointer to dispatch thunk of WorkItemQueue.flushQueue()
                                + async function pointer to dispatch thunk of WorkItemQueue.flushQueue());
        swift_retain();
        uint64_t v17 = (void *)swift_task_alloc();
        v0[29] = v17;
        *uint64_t v17 = v0;
        v17[1] = sub_1010282F0;
        return v31();
      }
      else
      {
        uint64_t v18 = Logger.logObject.getter();
        os_log_type_t v19 = static os_log_type_t.default.getter();
        if (os_log_type_enabled(v18, v19))
        {
          uint64_t v20 = (uint8_t *)swift_slowAlloc();
          *(_WORD *)uint64_t v20 = 0;
          _os_log_impl((void *)&_mh_execute_header, v18, v19, "Onboarding is about to disappear, so no need to flush any pending serial number lookups", v20, 2u);
          swift_slowDealloc();
        }

        uint64_t v22 = v0[26];
        uint64_t v21 = v0[27];
        uint64_t v24 = v0[24];
        uint64_t v23 = v0[25];
        uint64_t v25 = v0[9];
        type metadata accessor for WorkItemQueue.WorkItem();
        os_log_type_t v26 = (void *)swift_allocObject();
        _OWORD v26[2] = v23;
        v26[3] = v22;
        v26[4] = v21;
        v26[5] = v25;
        BOOL v27 = (void *)swift_allocObject();
        _OWORD v27[2] = v24;
        v27[3] = v23;
        v27[4] = v22;
        v27[5] = v21;
        swift_retain_n();
        swift_bridgeObjectRetain();
        swift_retain();
        swift_retain();
        UUID.init()();
        WorkItemQueue.WorkItem.__allocating_init(identifier:block:completion:)();
        dispatch thunk of WorkItemQueue.enqueue(_:)();
        swift_bridgeObjectRelease();
        swift_release();
        swift_release();
        swift_release();
        swift_release();
        uint64_t v30 = (char *)&dword_101667798 + dword_101667798;
        uint64_t v28 = (void *)swift_task_alloc();
        v0[23] = v28;
        *uint64_t v28 = v0;
        v28[1] = sub_101027BB8;
        return ((uint64_t (*)(void, void, void *))v30)(0, 0, v0 + 5);
      }
    }
    swift_bridgeObjectRelease();
    swift_release();
  }
  uint64_t v10 = v0[21];
  uint64_t v9 = v0[22];
  uint64_t v11 = v0[20];
  (*(void (**)(void, void))(v0[13] + 8))(v0[14], v0[12]);
  (*(void (**)(uint64_t, uint64_t))(v10 + 8))(v9, v11);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v12 = (uint64_t (*)(void))v0[1];
  return v12();
}

uint64_t sub_1010282F0()
{
  swift_task_dealloc();
  swift_release();
  return _swift_task_switch(sub_101028408, 0, 0);
}

uint64_t sub_101028408()
{
  uint64_t v2 = v0[26];
  uint64_t v1 = v0[27];
  uint64_t v4 = v0[24];
  uint64_t v3 = v0[25];
  uint64_t v5 = v0[9];
  type metadata accessor for WorkItemQueue.WorkItem();
  uint64_t v6 = (void *)swift_allocObject();
  v6[2] = v3;
  v6[3] = v2;
  v6[4] = v1;
  v6[5] = v5;
  os_log_type_t v7 = (void *)swift_allocObject();
  _OWORD v7[2] = v4;
  v7[3] = v3;
  v7[4] = v2;
  v7[5] = v1;
  swift_retain_n();
  swift_bridgeObjectRetain();
  swift_retain();
  swift_retain();
  UUID.init()();
  WorkItemQueue.WorkItem.__allocating_init(identifier:block:completion:)();
  dispatch thunk of WorkItemQueue.enqueue(_:)();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  uint64_t v10 = (char *)&dword_101667798 + dword_101667798;
  uint64_t v8 = (void *)swift_task_alloc();
  v0[23] = v8;
  *uint64_t v8 = v0;
  v8[1] = sub_101027BB8;
  return ((uint64_t (*)(void, void, void *))v10)(0, 0, v0 + 5);
}

uint64_t sub_1010285D4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v3[4] = a2;
  v3[5] = a3;
  v3[3] = a1;
  return _swift_task_switch(sub_1010285F8, 0, 0);
}

uint64_t sub_1010285F8()
{
  uint64_t v29 = v0;
  if (v0[3] == 0xD00000000000001ELL && v0[4] == 0x80000001013F1210
    || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    if (qword_101637380 != -1) {
      swift_once();
    }
    uint64_t v1 = type metadata accessor for Logger();
    v0[6] = sub_100010324(v1, (uint64_t)qword_101667438);
    uint64_t v2 = Logger.logObject.getter();
    os_log_type_t v3 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v2, v3))
    {
      uint64_t v4 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v4 = 0;
      _os_log_impl((void *)&_mh_execute_header, v2, v3, "FindMy onboarding started", v4, 2u);
      swift_slowDealloc();
    }
    uint64_t v5 = v0[5];

    uint64_t v6 = sub_101028C50;
LABEL_33:
    return _swift_task_switch(v6, v5, 0);
  }
  if (v0[3] == 0xD000000000000021 && v0[4] == 0x80000001013F1230
    || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    if (qword_101637380 != -1) {
      swift_once();
    }
    uint64_t v7 = type metadata accessor for Logger();
    v0[7] = sub_100010324(v7, (uint64_t)qword_101667438);
    uint64_t v8 = Logger.logObject.getter();
    os_log_type_t v9 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v8, v9))
    {
      uint64_t v10 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v10 = 0;
      _os_log_impl((void *)&_mh_execute_header, v8, v9, "FindMy onboarding ended", v10, 2u);
      swift_slowDealloc();
    }
    uint64_t v5 = v0[5];

    uint64_t v6 = sub_101028D30;
    goto LABEL_33;
  }
  if (v0[3] == 0xD000000000000020 && v0[4] == 0x80000001013F1260
    || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    if (qword_101637380 != -1) {
      swift_once();
    }
    uint64_t v11 = type metadata accessor for Logger();
    v0[8] = sub_100010324(v11, (uint64_t)qword_101667438);
    uint64_t v12 = Logger.logObject.getter();
    os_log_type_t v13 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v12, v13))
    {
      uint64_t v14 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v14 = 0;
      _os_log_impl((void *)&_mh_execute_header, v12, v13, "PNP onboarding started", v14, 2u);
      swift_slowDealloc();
    }
    uint64_t v5 = v0[5];

    uint64_t v6 = sub_101028E0C;
    goto LABEL_33;
  }
  if (v0[3] == 0xD000000000000023 && v0[4] == 0x80000001013F1290
    || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    if (qword_101637380 != -1) {
      swift_once();
    }
    uint64_t v15 = type metadata accessor for Logger();
    v0[9] = sub_100010324(v15, (uint64_t)qword_101667438);
    unint64_t v16 = Logger.logObject.getter();
    os_log_type_t v17 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v16, v17))
    {
      uint64_t v18 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v18 = 0;
      _os_log_impl((void *)&_mh_execute_header, v16, v17, "PNP onboarding stopped", v18, 2u);
      swift_slowDealloc();
    }
    uint64_t v5 = v0[5];

    uint64_t v6 = sub_101028EEC;
    goto LABEL_33;
  }
  if (qword_101637380 != -1) {
    swift_once();
  }
  uint64_t v19 = type metadata accessor for Logger();
  sub_100010324(v19, (uint64_t)qword_101667438);
  swift_bridgeObjectRetain_n();
  uint64_t v20 = Logger.logObject.getter();
  os_log_type_t v21 = static os_log_type_t.error.getter();
  BOOL v22 = os_log_type_enabled(v20, v21);
  unint64_t v23 = v0[4];
  if (v22)
  {
    uint64_t v27 = v0[3];
    uint64_t v24 = (uint8_t *)swift_slowAlloc();
    uint64_t v28 = swift_slowAlloc();
    *(_DWORD *)uint64_t v24 = 136315138;
    swift_bridgeObjectRetain();
    v0[2] = sub_1008FA0F0(v27, v23, &v28);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    _os_log_impl((void *)&_mh_execute_header, v20, v21, "Received a notification %s that can't be handled", v24, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    swift_bridgeObjectRelease_n();
  }

  uint64_t v25 = (uint64_t (*)(void))v0[1];
  return v25();
}

uint64_t sub_101028C50()
{
  uint64_t v1 = Logger.logObject.getter();
  os_log_type_t v2 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v1, v2))
  {
    os_log_type_t v3 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)os_log_type_t v3 = 0;
    _os_log_impl((void *)&_mh_execute_header, v1, v2, "Find My onboarding is being presented, setting onboardingIsShowing to true", v3, 2u);
    swift_slowDealloc();
  }
  uint64_t v4 = *(void *)(v0 + 40);

  *(unsigned char *)(v4 + 146) = 1;
  uint64_t v5 = *(uint64_t (**)(void))(v0 + 8);
  return v5();
}

uint64_t sub_101028D30()
{
  uint64_t v1 = Logger.logObject.getter();
  os_log_type_t v2 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v1, v2))
  {
    os_log_type_t v3 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)os_log_type_t v3 = 0;
    _os_log_impl((void *)&_mh_execute_header, v1, v2, "Find My onboarding is no longer presented, setting onboardingIsShowing to false", v3, 2u);
    swift_slowDealloc();
  }
  uint64_t v4 = *(void *)(v0 + 40);

  *(unsigned char *)(v4 + 146) = 0;
  uint64_t v5 = *(uint64_t (**)(void))(v0 + 8);
  return v5();
}

uint64_t sub_101028E0C()
{
  uint64_t v1 = Logger.logObject.getter();
  os_log_type_t v2 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v1, v2))
  {
    os_log_type_t v3 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)os_log_type_t v3 = 0;
    _os_log_impl((void *)&_mh_execute_header, v1, v2, "PNP onboarding is being presented, setting onboardingIsShowing to true", v3, 2u);
    swift_slowDealloc();
  }
  uint64_t v4 = *(void *)(v0 + 40);

  *(unsigned char *)(v4 + 145) = 1;
  uint64_t v5 = *(uint64_t (**)(void))(v0 + 8);
  return v5();
}

uint64_t sub_101028EEC()
{
  uint64_t v1 = Logger.logObject.getter();
  os_log_type_t v2 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v1, v2))
  {
    os_log_type_t v3 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)os_log_type_t v3 = 0;
    _os_log_impl((void *)&_mh_execute_header, v1, v2, "PNP onboarding is no longer presented, setting onboardingIsShowing to false", v3, 2u);
    swift_slowDealloc();
  }
  uint64_t v4 = *(void *)(v0 + 40);

  *(unsigned char *)(v4 + 145) = 0;
  uint64_t v5 = *(uint64_t (**)(void))(v0 + 8);
  return v5();
}

uint64_t sub_101028FC8(uint64_t a1, char a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  char v11 = a2 & 1;
  uint64_t v12 = swift_task_alloc();
  *(void *)(v6 + 16) = v12;
  *(void *)uint64_t v12 = v6;
  *(void *)(v12 + 8) = sub_100033F68;
  *(void *)(v12 + 32) = a4;
  *(void *)(v12 + 40) = a5;
  *(unsigned char *)(v12 + 48) = v11;
  *(void *)(v12 + 24) = a1;
  return _swift_task_switch(sub_10102A9C8, a6, 0);
}

uint64_t sub_10102909C(uint64_t a1, uint64_t a2)
{
  v3[8] = a2;
  v3[9] = v2;
  v3[7] = a1;
  uint64_t v4 = type metadata accessor for CentralManager.State();
  v3[10] = v4;
  v3[11] = *(void *)(v4 - 8);
  v3[12] = swift_task_alloc();
  uint64_t v5 = sub_10000588C(&qword_10163D210);
  v3[13] = v5;
  v3[14] = *(void *)(v5 - 8);
  v3[15] = swift_task_alloc();
  v3[16] = swift_task_alloc();
  return _swift_task_switch(sub_1010291D0, v2, 0);
}

uint64_t sub_1010291D0()
{
  unint64_t v23 = v0;
  if (qword_101637380 != -1) {
    swift_once();
  }
  uint64_t v1 = v0[16];
  uint64_t v2 = v0[13];
  uint64_t v3 = v0[14];
  uint64_t v4 = v0[8];
  uint64_t v5 = type metadata accessor for Logger();
  v0[17] = sub_100010324(v5, (uint64_t)qword_101667438);
  uint64_t v6 = *(void (**)(uint64_t, uint64_t, uint64_t))(v3 + 16);
  v0[18] = v6;
  v0[19] = (v3 + 16) & 0xFFFFFFFFFFFFLL | 0xE3BA000000000000;
  v6(v1, v4, v2);
  uint64_t v7 = Logger.logObject.getter();
  os_log_type_t v8 = static os_log_type_t.info.getter();
  BOOL v9 = os_log_type_enabled(v7, v8);
  uint64_t v10 = v0[16];
  uint64_t v11 = v0[13];
  uint64_t v12 = v0[14];
  if (v9)
  {
    uint64_t v13 = swift_slowAlloc();
    uint64_t v22 = swift_slowAlloc();
    *(_DWORD *)uint64_t v13 = 141558275;
    v0[5] = 1752392040;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v13 + 12) = 2081;
    sub_100062734(&qword_10163B810, &qword_10163D210);
    uint64_t v14 = dispatch thunk of CustomStringConvertible.description.getter();
    v0[6] = sub_1008FA0F0(v14, v15, &v22);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    unint64_t v16 = *(void (**)(uint64_t, uint64_t))(v12 + 8);
    v16(v10, v11);
    _os_log_impl((void *)&_mh_execute_header, v7, v8, "Fetching lost mode alert info (onboarding) for peripheral id %{private,mask.hash}s", (uint8_t *)v13, 0x16u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    unint64_t v16 = *(void (**)(uint64_t, uint64_t))(v12 + 8);
    v16(v0[16], v0[13]);
  }

  v0[20] = v16;
  os_log_type_t v17 = Logger.logObject.getter();
  os_log_type_t v18 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v17, v18))
  {
    uint64_t v19 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v19 = 0;
    _os_log_impl((void *)&_mh_execute_header, v17, v18, "Awaiting CentralManager", v19, 2u);
    swift_slowDealloc();
  }

  v0[21] = type metadata accessor for CentralManager();
  uint64_t v20 = (void *)swift_task_alloc();
  v0[22] = v20;
  *uint64_t v20 = v0;
  v20[1] = sub_10102950C;
  return static CentralManager.pairingCentralManager.getter();
}

uint64_t sub_10102950C(uint64_t a1)
{
  uint64_t v3 = *v2;
  uint64_t v4 = *v2;
  *(void *)(v4 + 184) = a1;
  *(void *)(v4 + 192) = v1;
  swift_task_dealloc();
  uint64_t v5 = *(void *)(v3 + 72);
  if (v1) {
    uint64_t v6 = sub_10102A240;
  }
  else {
    uint64_t v6 = sub_101029640;
  }
  return _swift_task_switch(v6, v5, 0);
}

uint64_t sub_101029640()
{
  (*(void (**)(void, void, void))(v0[11] + 104))(v0[12], enum case for CentralManager.State.poweredOn(_:), v0[10]);
  uint64_t v1 = (void *)swift_task_alloc();
  v0[25] = v1;
  uint64_t v2 = sub_10103975C(&qword_101639A90, 255, (void (*)(uint64_t))&type metadata accessor for CentralManager);
  *uint64_t v1 = v0;
  v1[1] = sub_101029740;
  uint64_t v3 = v0[21];
  uint64_t v4 = v0[12];
  return CentralManagerProtocol.await(state:)(v4, v3, v2);
}

uint64_t sub_101029740()
{
  uint64_t v2 = *(void **)v1;
  *(void *)(*(void *)v1 + 208) = v0;
  swift_task_dealloc();
  uint64_t v3 = v2[12];
  uint64_t v4 = v2[11];
  uint64_t v5 = v2[10];
  uint64_t v6 = v2[9];
  (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v3, v5);
  if (v0) {
    uint64_t v7 = sub_10102A40C;
  }
  else {
    uint64_t v7 = sub_1010298BC;
  }
  return _swift_task_switch(v7, v6, 0);
}

uint64_t sub_1010298BC()
{
  uint64_t v1 = Logger.logObject.getter();
  os_log_type_t v2 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v1, v2))
  {
    uint64_t v3 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v3 = 0;
    _os_log_impl((void *)&_mh_execute_header, v1, v2, "CentralManager powered on", v3, 2u);
    swift_slowDealloc();
  }

  sub_10000588C(&qword_10163BC50);
  type metadata accessor for UUID();
  uint64_t v4 = swift_allocObject();
  *(void *)(v0 + 216) = v4;
  *(_OWORD *)(v4 + 16) = xmmword_101342130;
  Identifier.id.getter();
  uint64_t v7 = (uint64_t (*)(uint64_t))((char *)&async function pointer to dispatch thunk of CentralManager.retrievePeripherals(identifiers:)
                                       + async function pointer to dispatch thunk of CentralManager.retrievePeripherals(identifiers:));
  uint64_t v5 = (void *)swift_task_alloc();
  *(void *)(v0 + 224) = v5;
  *uint64_t v5 = v0;
  v5[1] = sub_101029A7C;
  return v7(v4);
}

uint64_t sub_101029A7C(uint64_t a1)
{
  uint64_t v3 = (void *)*v2;
  v3[29] = a1;
  v3[30] = v1;
  swift_task_dealloc();
  if (v1)
  {
    uint64_t v4 = v3[9];
    uint64_t v5 = sub_10102A5E0;
  }
  else
  {
    uint64_t v6 = v3[9];
    swift_bridgeObjectRelease();
    uint64_t v5 = sub_101029BA4;
    uint64_t v4 = v6;
  }
  return _swift_task_switch(v5, v4, 0);
}

void sub_101029BA4()
{
  uint64_t v27 = v0;
  unint64_t v1 = v0[29];
  if (v1 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v5 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (v5) {
      goto LABEL_3;
    }
LABEL_10:
    uint64_t v6 = (void (*)(uint64_t, uint64_t, uint64_t))v0[18];
    uint64_t v7 = v0[15];
    uint64_t v8 = v0[13];
    uint64_t v9 = v0[8];
    swift_bridgeObjectRelease();
    v6(v7, v9, v8);
    uint64_t v10 = Logger.logObject.getter();
    os_log_type_t v11 = static os_log_type_t.error.getter();
    BOOL v12 = os_log_type_enabled(v10, v11);
    uint64_t v13 = v0[15];
    uint64_t v14 = v0[13];
    if (v12)
    {
      uint64_t v25 = (void (*)(uint64_t, uint64_t))v0[20];
      uint64_t v15 = swift_slowAlloc();
      uint64_t v26 = swift_slowAlloc();
      *(_DWORD *)uint64_t v15 = 141558275;
      v0[3] = 1752392040;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v15 + 12) = 2081;
      sub_100062734(&qword_10163B810, &qword_10163D210);
      uint64_t v16 = dispatch thunk of CustomStringConvertible.description.getter();
      v0[4] = sub_1008FA0F0(v16, v17, &v26);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      v25(v13, v14);
      _os_log_impl((void *)&_mh_execute_header, v10, v11, "No peripheral available for id %{private,mask.hash}s", (uint8_t *)v15, 0x16u);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      ((void (*)(uint64_t, uint64_t))v0[20])(v13, v14);
    }

    sub_101038A6C();
    swift_allocError();
    *os_log_type_t v18 = 5;
    swift_willThrow();
    swift_release();
    swift_errorRetain();
    swift_errorRetain();
    uint64_t v19 = Logger.logObject.getter();
    os_log_type_t v20 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v19, v20))
    {
      os_log_type_t v21 = (uint8_t *)swift_slowAlloc();
      uint64_t v22 = (void *)swift_slowAlloc();
      *(_DWORD *)os_log_type_t v21 = 138412290;
      swift_errorRetain();
      uint64_t v23 = _swift_stdlib_bridgeErrorToNSError();
      v0[2] = v23;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *uint64_t v22 = v23;
      swift_errorRelease();
      swift_errorRelease();
      _os_log_impl((void *)&_mh_execute_header, v19, v20, "Failed to fetch lost mode info with error %@", v21, 0xCu);
      sub_10000588C((uint64_t *)&unk_101638EA0);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      swift_errorRelease();
      swift_errorRelease();
    }

    swift_willThrow();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v24 = (void (*)(void))v0[1];
    v24();
    return;
  }
  if (!*(void *)((v1 & 0xFFFFFFFFFFFFFF8) + 0x10)) {
    goto LABEL_10;
  }
LABEL_3:
  if ((v1 & 0xC000000000000001) != 0)
  {
    uint64_t v2 = specialized _ArrayBuffer._getElementSlowPath(_:)();
  }
  else
  {
    if (!*(void *)((v1 & 0xFFFFFFFFFFFFFF8) + 0x10))
    {
      __break(1u);
      return;
    }
    uint64_t v2 = *(void *)(v0[29] + 32);
    swift_retain();
  }
  v0[31] = v2;
  swift_bridgeObjectRelease();
  uint64_t v3 = (void *)swift_task_alloc();
  v0[32] = v3;
  *uint64_t v3 = v0;
  v3[1] = sub_10102A07C;
  uint64_t v4 = v0[7];
  sub_1010316C0(v4, v2);
}

uint64_t sub_10102A07C()
{
  uint64_t v2 = *v1;
  *(void *)(*v1 + 264) = v0;
  swift_task_dealloc();
  uint64_t v3 = *(void *)(v2 + 72);
  if (v0) {
    uint64_t v4 = sub_10102A7C0;
  }
  else {
    uint64_t v4 = sub_10102A1A8;
  }
  return _swift_task_switch(v4, v3, 0);
}

uint64_t sub_10102A1A8()
{
  swift_release();
  swift_release();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  unint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_10102A240()
{
  swift_errorRetain();
  swift_errorRetain();
  unint64_t v1 = Logger.logObject.getter();
  os_log_type_t v2 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v1, v2))
  {
    uint64_t v3 = (uint8_t *)swift_slowAlloc();
    uint64_t v4 = (void *)swift_slowAlloc();
    *(_DWORD *)uint64_t v3 = 138412290;
    swift_errorRetain();
    uint64_t v5 = _swift_stdlib_bridgeErrorToNSError();
    *(void *)(v0 + 16) = v5;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *uint64_t v4 = v5;
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl((void *)&_mh_execute_header, v1, v2, "Failed to fetch lost mode info with error %@", v3, 0xCu);
    sub_10000588C((uint64_t *)&unk_101638EA0);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    swift_errorRelease();
    swift_errorRelease();
  }

  swift_willThrow();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v6 = *(uint64_t (**)(void))(v0 + 8);
  return v6();
}

uint64_t sub_10102A40C()
{
  swift_release();
  swift_errorRetain();
  swift_errorRetain();
  unint64_t v1 = Logger.logObject.getter();
  os_log_type_t v2 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v1, v2))
  {
    uint64_t v3 = (uint8_t *)swift_slowAlloc();
    uint64_t v4 = (void *)swift_slowAlloc();
    *(_DWORD *)uint64_t v3 = 138412290;
    swift_errorRetain();
    uint64_t v5 = _swift_stdlib_bridgeErrorToNSError();
    *(void *)(v0 + 16) = v5;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *uint64_t v4 = v5;
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl((void *)&_mh_execute_header, v1, v2, "Failed to fetch lost mode info with error %@", v3, 0xCu);
    sub_10000588C((uint64_t *)&unk_101638EA0);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    swift_errorRelease();
    swift_errorRelease();
  }

  swift_willThrow();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v6 = *(uint64_t (**)(void))(v0 + 8);
  return v6();
}

uint64_t sub_10102A5E0()
{
  swift_bridgeObjectRelease();
  swift_release();
  swift_errorRetain();
  swift_errorRetain();
  unint64_t v1 = Logger.logObject.getter();
  os_log_type_t v2 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v1, v2))
  {
    uint64_t v3 = (uint8_t *)swift_slowAlloc();
    uint64_t v4 = (void *)swift_slowAlloc();
    *(_DWORD *)uint64_t v3 = 138412290;
    swift_errorRetain();
    uint64_t v5 = _swift_stdlib_bridgeErrorToNSError();
    *(void *)(v0 + 16) = v5;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *uint64_t v4 = v5;
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl((void *)&_mh_execute_header, v1, v2, "Failed to fetch lost mode info with error %@", v3, 0xCu);
    sub_10000588C((uint64_t *)&unk_101638EA0);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    swift_errorRelease();
    swift_errorRelease();
  }

  swift_willThrow();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v6 = *(uint64_t (**)(void))(v0 + 8);
  return v6();
}

uint64_t sub_10102A7C0()
{
  swift_release();
  swift_release();
  swift_errorRetain();
  swift_errorRetain();
  unint64_t v1 = Logger.logObject.getter();
  os_log_type_t v2 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v1, v2))
  {
    uint64_t v3 = (uint8_t *)swift_slowAlloc();
    uint64_t v4 = (void *)swift_slowAlloc();
    *(_DWORD *)uint64_t v3 = 138412290;
    swift_errorRetain();
    uint64_t v5 = _swift_stdlib_bridgeErrorToNSError();
    *(void *)(v0 + 16) = v5;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *uint64_t v4 = v5;
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl((void *)&_mh_execute_header, v1, v2, "Failed to fetch lost mode info with error %@", v3, 0xCu);
    sub_10000588C((uint64_t *)&unk_101638EA0);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    swift_errorRelease();
    swift_errorRelease();
  }

  swift_willThrow();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v6 = *(uint64_t (**)(void))(v0 + 8);
  return v6();
}

uint64_t sub_10102A9A0(uint64_t a1, char a2, uint64_t a3, uint64_t a4)
{
  *(void *)(v5 + 32) = a3;
  *(void *)(v5 + 40) = a4;
  *(unsigned char *)(v5 + 48) = a2;
  *(void *)(v5 + 24) = a1;
  return _swift_task_switch(sub_10102A9C8, v4, 0);
}

uint64_t sub_10102A9C8()
{
  uint64_t v23 = v0;
  if (*(unsigned char *)(v0 + 48))
  {
    uint64_t v8 = (uint64_t *)(v0 + 24);
    swift_errorRetain();
    if (qword_101637380 != -1) {
      swift_once();
    }
    uint64_t v9 = *(void *)(v0 + 24);
    uint64_t v10 = type metadata accessor for Logger();
    sub_100010324(v10, (uint64_t)qword_101667438);
    swift_bridgeObjectRetain();
    sub_10033093C(v9, 1);
    swift_bridgeObjectRetain();
    sub_10033093C(v9, 1);
    os_log_type_t v2 = Logger.logObject.getter();
    os_log_type_t v11 = static os_log_type_t.default.getter();
    BOOL v12 = os_log_type_enabled(v2, v11);
    unint64_t v13 = *(void *)(v0 + 40);
    if (v12)
    {
      uint64_t v20 = *(void *)(v0 + 32);
      uint64_t v21 = *(void *)(v0 + 24);
      uint64_t v14 = swift_slowAlloc();
      uint64_t v15 = (void *)swift_slowAlloc();
      uint64_t v22 = swift_slowAlloc();
      *(_DWORD *)uint64_t v14 = 136446466;
      swift_bridgeObjectRetain();
      *(void *)(v0 + 16) = sub_1008FA0F0(v20, v13, &v22);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      *(_WORD *)(v14 + 12) = 2114;
      swift_errorRetain();
      uint64_t v16 = _swift_stdlib_bridgeErrorToNSError();
      *(void *)(v0 + 16) = v16;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *uint64_t v15 = v16;
      sub_100173E88(v21, 1);
      sub_100173E88(v21, 1);
      _os_log_impl((void *)&_mh_execute_header, v2, v11, "Notification task with name %{public}s failed with error %{public}@", (uint8_t *)v14, 0x16u);
      sub_10000588C((uint64_t *)&unk_101638EA0);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      sub_100173E88(v21, 1);
      goto LABEL_13;
    }
    uint64_t v17 = *v8;
    sub_100173E88(*v8, 1);
    swift_bridgeObjectRelease_n();
    sub_100173E88(v17, 1);
    sub_100173E88(v17, 1);
  }
  else
  {
    if (qword_101637380 != -1) {
      swift_once();
    }
    uint64_t v1 = type metadata accessor for Logger();
    sub_100010324(v1, (uint64_t)qword_101667438);
    swift_bridgeObjectRetain_n();
    os_log_type_t v2 = Logger.logObject.getter();
    os_log_type_t v3 = static os_log_type_t.default.getter();
    BOOL v4 = os_log_type_enabled(v2, v3);
    unint64_t v5 = *(void *)(v0 + 40);
    if (v4)
    {
      uint64_t v6 = *(void *)(v0 + 32);
      uint64_t v7 = (uint8_t *)swift_slowAlloc();
      uint64_t v22 = swift_slowAlloc();
      *(_DWORD *)uint64_t v7 = 136446210;
      swift_bridgeObjectRetain();
      *(void *)(v0 + 16) = sub_1008FA0F0(v6, v5, &v22);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      _os_log_impl((void *)&_mh_execute_header, v2, v3, "Notification task with name %{public}s succeeded", v7, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      swift_bridgeObjectRelease_n();
    }
  }

LABEL_13:
  os_log_type_t v18 = *(uint64_t (**)(void))(v0 + 8);
  return v18();
}

uint64_t sub_10102AE24()
{
  v1[15] = v0;
  v1[16] = *v0;
  sub_10000588C(&qword_10164DBB0);
  v1[17] = swift_task_alloc();
  return _swift_task_switch(sub_10102AEE0, v0, 0);
}

uint64_t sub_10102AEE0()
{
  uint64_t v1 = qword_1016375E8;
  swift_retain();
  if (v1 != -1) {
    swift_once();
  }
  swift_beginAccess();
  uint64_t result = sub_10001D074((uint64_t)&xmmword_10166E8F0, v0 + 56, (uint64_t *)&unk_101638D30);
  if (*(void *)(v0 + 80))
  {
    sub_10001CEB0((long long *)(v0 + 56), v0 + 16);
    swift_release();
    sub_10001CD44((void *)(v0 + 16), *(void *)(v0 + 40));
    BOOL v4 = (uint64_t (__cdecl *)())((char *)&dword_101639168 + dword_101639168);
    uint64_t v3 = (void *)swift_task_alloc();
    *(void *)(v0 + 144) = v3;
    *uint64_t v3 = v0;
    v3[1] = sub_10102B030;
    return v4();
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_10102B030(uint64_t a1)
{
  uint64_t v2 = *(void *)(*(void *)v1 + 120);
  *(void *)(*(void *)v1 + 152) = a1;
  swift_task_dealloc();
  return _swift_task_switch(sub_10102B148, v2, 0);
}

uint64_t sub_10102B148()
{
  uint64_t v1 = v0[19];
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)(v0 + 2));
  if (v1)
  {
    uint64_t v2 = v0[19];
    uint64_t v4 = v0[16];
    uint64_t v3 = v0[17];
    uint64_t v5 = type metadata accessor for TaskPriority();
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 56))(v3, 1, 1, v5);
    uint64_t v6 = swift_allocObject();
    swift_weakInit();
    uint64_t v7 = (void *)swift_allocObject();
    _OWORD v7[2] = 0;
    v7[3] = 0;
    v7[4] = v6;
    v7[5] = v2;
    v7[6] = v4;
    swift_retain();
    sub_1000212B0(v3, (uint64_t)&unk_101667760, (uint64_t)v7);
    swift_release();
    swift_release();
    sub_10001DAB4(v3, &qword_10164DBB0);
  }
  else
  {
    if (qword_101637380 != -1) {
      swift_once();
    }
    uint64_t v8 = type metadata accessor for Logger();
    sub_100010324(v8, (uint64_t)qword_101667438);
    uint64_t v9 = Logger.logObject.getter();
    os_log_type_t v10 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v9, v10))
    {
      os_log_type_t v11 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)os_log_type_t v11 = 0;
      _os_log_impl((void *)&_mh_execute_header, v9, v10, "No local findable pairing service to monitor!", v11, 2u);
      swift_slowDealloc();
    }
  }
  swift_task_dealloc();
  BOOL v12 = (uint64_t (*)(void))v0[1];
  return v12();
}

uint64_t sub_10102B360(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  v6[6] = a5;
  v6[7] = a6;
  v6[5] = a4;
  type metadata accessor for UUID();
  v6[8] = swift_task_alloc();
  uint64_t v7 = sub_10000588C((uint64_t *)&unk_10163D240);
  v6[9] = v7;
  uint64_t v8 = *(void *)(v7 - 8);
  v6[10] = v8;
  v6[11] = *(void *)(v8 + 64);
  v6[12] = swift_task_alloc();
  v6[13] = swift_task_alloc();
  sub_10000588C(&qword_10163D220);
  v6[14] = swift_task_alloc();
  uint64_t v9 = sub_10000588C((uint64_t *)&unk_10163D230);
  v6[15] = v9;
  v6[16] = *(void *)(v9 - 8);
  v6[17] = swift_task_alloc();
  uint64_t v10 = sub_10000588C(&qword_10163D228);
  v6[18] = v10;
  v6[19] = *(void *)(v10 - 8);
  v6[20] = swift_task_alloc();
  return _swift_task_switch(sub_10102B55C, 0, 0);
}

uint64_t sub_10102B55C()
{
  swift_beginAccess();
  uint64_t Strong = swift_weakLoadStrong();
  v0[21] = Strong;
  if (Strong)
  {
    uint64_t v2 = v0[6];
    return _swift_task_switch(sub_10102B670, v2, 0);
  }
  else
  {
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v3 = (uint64_t (*)(void))v0[1];
    return v3();
  }
}

uint64_t sub_10102B670()
{
  sub_100D4E988();
  return _swift_task_switch(sub_10102B6DC, 0, 0);
}

uint64_t sub_10102B6DC()
{
  uint64_t v2 = v0[16];
  uint64_t v1 = v0[17];
  uint64_t v3 = v0[15];
  AsyncStream.makeAsyncIterator()();
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  uint64_t v4 = (void *)swift_task_alloc();
  v0[22] = v4;
  *uint64_t v4 = v0;
  v4[1] = sub_10102B7B8;
  uint64_t v5 = v0[18];
  uint64_t v6 = v0[14];
  return AsyncStream.Iterator.next(isolation:)(v6, 0, 0, v5);
}

uint64_t sub_10102B7B8()
{
  swift_task_dealloc();
  return _swift_task_switch(sub_10102B8B4, 0, 0);
}

uint64_t sub_10102B8B4()
{
  uint64_t v1 = *(uint64_t **)(v0 + 112);
  uint64_t v2 = *(void *)(v0 + 72);
  if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(*(void *)(v0 + 80) + 48))(v1, 1, v2) == 1)
  {
    (*(void (**)(void, void))(*(void *)(v0 + 152) + 8))(*(void *)(v0 + 160), *(void *)(v0 + 144));
    swift_release();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v3 = *(uint64_t (**)(void))(v0 + 8);
    return v3();
  }
  else
  {
    uint64_t v5 = *(void **)(v0 + 104);
    uint64_t v6 = *(int *)(v2 + 48);
    *(_DWORD *)(v0 + 216) = v6;
    uint64_t v7 = *v1;
    *(void *)(v0 + 184) = *v1;
    *uint64_t v5 = v7;
    sub_10001D608((uint64_t)v1 + v6, (uint64_t)v5 + v6, &qword_10163D218);
    uint64_t v8 = qword_101637380;
    swift_retain();
    if (v8 != -1) {
      swift_once();
    }
    uint64_t v9 = type metadata accessor for Logger();
    *(void *)(v0 + 192) = sub_100010324(v9, (uint64_t)qword_101667438);
    uint64_t v10 = Logger.logObject.getter();
    os_log_type_t v11 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v10, v11))
    {
      uint64_t v12 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v12 = 0;
      _os_log_impl((void *)&_mh_execute_header, v10, v11, "Waiting for queue to be empty", v12, 2u);
      swift_slowDealloc();
    }
    uint64_t v13 = *(void *)(v0 + 168);

    *(void *)(v0 + 200) = *(void *)(v13 + 136);
    uint64_t v15 = (uint64_t (*)(void))((char *)&async function pointer to dispatch thunk of WorkItemQueue.awaitEmpty()
                            + async function pointer to dispatch thunk of WorkItemQueue.awaitEmpty());
    swift_retain();
    uint64_t v14 = (void *)swift_task_alloc();
    *(void *)(v0 + 208) = v14;
    *uint64_t v14 = v0;
    v14[1] = sub_10102BB2C;
    return v15();
  }
}

uint64_t sub_10102BB2C()
{
  swift_task_dealloc();
  swift_release();
  return _swift_task_switch(sub_10102BC44, 0, 0);
}

uint64_t sub_10102BC44()
{
  uint64_t v1 = Logger.logObject.getter();
  os_log_type_t v2 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v1, v2))
  {
    uint64_t v3 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v3 = 0;
    _os_log_impl((void *)&_mh_execute_header, v1, v2, "Queue is now empty", v3, 2u);
    swift_slowDealloc();
  }
  uint64_t v4 = *(void *)(v0 + 184);
  uint64_t v5 = *(int *)(v0 + 216);
  uint64_t v6 = *(void *)(v0 + 168);
  uint64_t v7 = *(void **)(v0 + 96);
  uint64_t v8 = *(void *)(v0 + 104);
  uint64_t v9 = *(void *)(v0 + 80);
  uint64_t v10 = *(void *)(v0 + 88);
  uint64_t v11 = *(void *)(v0 + 72);
  uint64_t v21 = v8;
  uint64_t v20 = *(void *)(v0 + 56);

  type metadata accessor for WorkItemQueue.WorkItem();
  uint64_t v12 = (uint64_t)v7 + *(int *)(v11 + 48);
  *uint64_t v7 = v4;
  sub_10001D074(v8 + v5, v12, &qword_10163D218);
  unint64_t v13 = (*(unsigned __int8 *)(v9 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80);
  unint64_t v14 = (v10 + v13 + 7) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v15 = swift_allocObject();
  sub_10001D608((uint64_t)v7, v15 + v13, (uint64_t *)&unk_10163D240);
  *(void *)(v15 + v14) = v6;
  *(void *)(v15 + ((v14 + 15) & 0xFFFFFFFFFFFFFFF8)) = v20;
  swift_retain_n();
  UUID.init()();
  WorkItemQueue.WorkItem.__allocating_init(identifier:block:completion:)();
  dispatch thunk of WorkItemQueue.enqueue(_:)();
  swift_release();
  sub_10001DAB4(v21, (uint64_t *)&unk_10163D240);
  uint64_t v16 = (void *)swift_task_alloc();
  *(void *)(v0 + 176) = v16;
  *uint64_t v16 = v0;
  v16[1] = sub_10102B7B8;
  uint64_t v17 = *(void *)(v0 + 144);
  uint64_t v18 = *(void *)(v0 + 112);
  return AsyncStream.Iterator.next(isolation:)(v18, 0, 0, v17);
}

uint64_t sub_10102BEA0(uint64_t a1, uint64_t a2)
{
  v2[5] = a1;
  v2[6] = a2;
  uint64_t v3 = sub_10000588C(&qword_10163D210);
  v2[7] = v3;
  v2[8] = *(void *)(v3 - 8);
  v2[9] = swift_task_alloc();
  v2[10] = swift_task_alloc();
  v2[11] = swift_task_alloc();
  v2[12] = type metadata accessor for PencilPairingService.PeripheralDiscovery(0);
  v2[13] = swift_task_alloc();
  v2[14] = swift_task_alloc();
  v2[15] = sub_10000588C((uint64_t *)&unk_10163D240);
  v2[16] = swift_task_alloc();
  v2[17] = sub_10000588C(&qword_10163D218);
  v2[18] = swift_task_alloc();
  v2[19] = swift_task_alloc();
  return _swift_task_switch(sub_10102C038, 0, 0);
}

uint64_t sub_10102C038()
{
  uint64_t v45 = v0;
  uint64_t v2 = v0[18];
  uint64_t v1 = v0[19];
  uint64_t v3 = *(int *)(v0[15] + 48);
  uint64_t v4 = v0[16] + v3;
  sub_10001D074(v0[5] + v3, v4, &qword_10163D218);
  sub_10001D608(v4, v1, &qword_10163D218);
  sub_10001D074(v1, v2, &qword_10163D218);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    if (qword_101637380 != -1) {
      swift_once();
    }
    uint64_t v5 = type metadata accessor for Logger();
    sub_100010324(v5, (uint64_t)qword_101667438);
    swift_errorRetain();
    swift_errorRetain();
    uint64_t v6 = Logger.logObject.getter();
    os_log_type_t v7 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v6, v7))
    {
      uint64_t v8 = (uint8_t *)swift_slowAlloc();
      uint64_t v43 = (void *)swift_slowAlloc();
      *(_DWORD *)uint64_t v8 = 138412290;
      swift_errorRetain();
      uint64_t v9 = _swift_stdlib_bridgeErrorToNSError();
      v0[2] = v9;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *uint64_t v43 = v9;
      swift_errorRelease();
      swift_errorRelease();
      _os_log_impl((void *)&_mh_execute_header, v6, v7, "Error in monitoring pencil pairing service %@", v8, 0xCu);
      sub_10000588C((uint64_t *)&unk_101638EA0);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {

      swift_errorRelease();
      swift_errorRelease();
    }
    swift_errorRelease();
    uint64_t v35 = v0[19];
LABEL_18:
    sub_10001DAB4(v35, &qword_10163D218);
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v40 = (uint64_t (*)(void))v0[1];
    return v40();
  }
  uint64_t v11 = v0[13];
  uint64_t v10 = v0[14];
  uint64_t v12 = v0[8];
  sub_101039BE0(v0[18], v10, type metadata accessor for PencilPairingService.PeripheralDiscovery);
  sub_101039C48(v10, v11, type metadata accessor for PencilPairingService.PeripheralDiscovery);
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  unint64_t v14 = *(void (**)(void, uint64_t, uint64_t))(v12 + 32);
  uint64_t v15 = v0[13];
  uint64_t v16 = v0[7];
  if (EnumCaseMultiPayload == 1)
  {
    v14(v0[10], v15, v16);
    if (qword_101637380 != -1) {
      swift_once();
    }
    uint64_t v18 = v0[9];
    uint64_t v17 = v0[10];
    uint64_t v20 = v0[7];
    uint64_t v19 = v0[8];
    uint64_t v21 = type metadata accessor for Logger();
    sub_100010324(v21, (uint64_t)qword_101667438);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v19 + 16))(v18, v17, v20);
    uint64_t v22 = Logger.logObject.getter();
    os_log_type_t v23 = static os_log_type_t.default.getter();
    BOOL v24 = os_log_type_enabled(v22, v23);
    uint64_t v25 = v0[19];
    uint64_t v26 = v0[14];
    uint64_t v27 = v0[9];
    uint64_t v28 = v0[10];
    uint64_t v30 = v0[7];
    uint64_t v29 = v0[8];
    if (v24)
    {
      uint64_t v42 = v0[10];
      uint64_t v41 = v0[14];
      uint64_t v31 = swift_slowAlloc();
      uint64_t v44 = swift_slowAlloc();
      *(_DWORD *)uint64_t v31 = 141558275;
      v0[3] = 1752392040;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v31 + 12) = 2081;
      sub_100062734(&qword_10163B810, &qword_10163D210);
      uint64_t v32 = dispatch thunk of CustomStringConvertible.description.getter();
      v0[4] = sub_1008FA0F0(v32, v33, &v44);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      uint64_t v34 = *(void (**)(uint64_t, uint64_t))(v29 + 8);
      v34(v27, v30);
      _os_log_impl((void *)&_mh_execute_header, v22, v23, "Detached accessory with id %{private,mask.hash}s. Nothing to do here.", (uint8_t *)v31, 0x16u);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      v34(v42, v30);
      sub_101039CB0(v41, type metadata accessor for PencilPairingService.PeripheralDiscovery);
    }
    else
    {

      id v39 = *(void (**)(uint64_t, uint64_t))(v29 + 8);
      v39(v27, v30);
      v39(v28, v30);
      sub_101039CB0(v26, type metadata accessor for PencilPairingService.PeripheralDiscovery);
    }
    uint64_t v35 = v25;
    goto LABEL_18;
  }
  v14(v0[11], v15, v16);
  unint64_t v36 = (void *)swift_task_alloc();
  v0[20] = v36;
  *unint64_t v36 = v0;
  v36[1] = sub_10102C6A4;
  uint64_t v37 = v0[11];
  return sub_10102CC78(v37);
}

uint64_t sub_10102C6A4()
{
  swift_task_dealloc();
  return _swift_task_switch(sub_10102C7A0, 0, 0);
}

uint64_t sub_10102C7A0()
{
  uint64_t v1 = v0[19];
  uint64_t v2 = v0[14];
  (*(void (**)(void, void))(v0[8] + 8))(v0[11], v0[7]);
  sub_101039CB0(v2, type metadata accessor for PencilPairingService.PeripheralDiscovery);
  sub_10001DAB4(v1, &qword_10163D218);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v3 = (uint64_t (*)(void))v0[1];
  return v3();
}

uint64_t sub_10102C8B0(uint64_t a1, char a2, uint64_t a3)
{
  char v6 = a2 & 1;
  uint64_t v7 = swift_task_alloc();
  *(void *)(v3 + 16) = v7;
  *(void *)uint64_t v7 = v3;
  *(void *)(v7 + 8) = sub_100033F68;
  *(unsigned char *)(v7 + 32) = v6;
  *(void *)(v7 + 24) = a1;
  return _swift_task_switch(sub_10102C994, a3, 0);
}

uint64_t sub_10102C970(uint64_t a1, char a2)
{
  *(unsigned char *)(v3 + 32) = a2;
  *(void *)(v3 + 24) = a1;
  return _swift_task_switch(sub_10102C994, v2, 0);
}

uint64_t sub_10102C994()
{
  if (*(unsigned char *)(v0 + 32))
  {
    swift_errorRetain();
    if (qword_101637380 != -1) {
      swift_once();
    }
    uint64_t v5 = type metadata accessor for Logger();
    sub_100010324(v5, (uint64_t)qword_101667438);
    swift_errorRetain();
    swift_errorRetain();
    uint64_t v2 = Logger.logObject.getter();
    os_log_type_t v6 = static os_log_type_t.error.getter();
    BOOL v7 = os_log_type_enabled(v2, v6);
    uint64_t v8 = *(void *)(v0 + 24);
    if (v7)
    {
      uint64_t v9 = (uint8_t *)swift_slowAlloc();
      uint64_t v10 = (void *)swift_slowAlloc();
      *(_DWORD *)uint64_t v9 = 138477827;
      swift_errorRetain();
      uint64_t v11 = _swift_stdlib_bridgeErrorToNSError();
      *(void *)(v0 + 16) = v11;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *uint64_t v10 = v11;
      sub_100173E88(v8, 1);
      sub_100173E88(v8, 1);
      _os_log_impl((void *)&_mh_execute_header, v2, v6, "Discovery failed with error %{private}@", v9, 0xCu);
      sub_10000588C((uint64_t *)&unk_101638EA0);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      sub_100173E88(v8, 1);
      goto LABEL_12;
    }
    sub_100173E88(*(void *)(v0 + 24), 1);
    sub_100173E88(v8, 1);
    swift_errorRelease();
  }
  else
  {
    if (qword_101637380 != -1) {
      swift_once();
    }
    uint64_t v1 = type metadata accessor for Logger();
    sub_100010324(v1, (uint64_t)qword_101667438);
    uint64_t v2 = Logger.logObject.getter();
    os_log_type_t v3 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v2, v3))
    {
      uint64_t v4 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v4 = 0;
      _os_log_impl((void *)&_mh_execute_header, v2, v3, "Discovery succeeded", v4, 2u);
      swift_slowDealloc();
    }
  }

LABEL_12:
  uint64_t v12 = *(uint64_t (**)(void))(v0 + 8);
  return v12();
}

uint64_t sub_10102CC78(uint64_t a1)
{
  v2[46] = a1;
  v2[47] = v1;
  type metadata accessor for LostModeAlertInfo();
  v2[48] = swift_task_alloc();
  uint64_t v3 = type metadata accessor for CentralManager.State();
  v2[49] = v3;
  v2[50] = *(void *)(v3 - 8);
  v2[51] = swift_task_alloc();
  uint64_t v4 = type metadata accessor for UUID();
  v2[52] = v4;
  uint64_t v5 = *(void *)(v4 - 8);
  v2[53] = v5;
  v2[54] = *(void *)(v5 + 64);
  v2[55] = swift_task_alloc();
  v2[56] = swift_task_alloc();
  v2[57] = swift_task_alloc();
  v2[58] = swift_task_alloc();
  v2[59] = swift_task_alloc();
  v2[60] = swift_task_alloc();
  v2[61] = sub_10000588C((uint64_t *)&unk_10163B1D0);
  v2[62] = swift_task_alloc();
  uint64_t v6 = type metadata accessor for LocalFindableAccessoryRecord();
  v2[63] = v6;
  v2[64] = *(void *)(v6 - 8);
  v2[65] = swift_task_alloc();
  uint64_t v7 = sub_10000588C(&qword_10163D210);
  v2[66] = v7;
  v2[67] = *(void *)(v7 - 8);
  v2[68] = swift_task_alloc();
  return _swift_task_switch(sub_10102CEF8, v1, 0);
}

uint64_t sub_10102CEF8()
{
  uint64_t v21 = v0;
  if (qword_101637380 != -1) {
    swift_once();
  }
  uint64_t v1 = (long long *)(v0 + 12);
  uint64_t v2 = v0[68];
  uint64_t v3 = v0[67];
  uint64_t v4 = v0[66];
  uint64_t v5 = v0[46];
  uint64_t v6 = type metadata accessor for Logger();
  v0[69] = sub_100010324(v6, (uint64_t)qword_101667438);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v3 + 16))(v2, v5, v4);
  uint64_t v7 = Logger.logObject.getter();
  os_log_type_t v8 = static os_log_type_t.default.getter();
  BOOL v9 = os_log_type_enabled(v7, v8);
  uint64_t v10 = v0[68];
  uint64_t v11 = v0[67];
  uint64_t v12 = v0[66];
  if (v9)
  {
    uint64_t v13 = swift_slowAlloc();
    uint64_t v20 = swift_slowAlloc();
    *(_DWORD *)uint64_t v13 = 141558275;
    v0[44] = 1752392040;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v13 + 12) = 2081;
    sub_100062734(&qword_10163B810, &qword_10163D210);
    uint64_t v14 = dispatch thunk of CustomStringConvertible.description.getter();
    v0[45] = sub_1008FA0F0(v14, v15, &v20);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    (*(void (**)(uint64_t, uint64_t))(v11 + 8))(v10, v12);
    _os_log_impl((void *)&_mh_execute_header, v7, v8, "Detected local findable attach with peripheral id: %{private,mask.hash}s", (uint8_t *)v13, 0x16u);
    swift_arrayDestroy();
    swift_slowDealloc();
    uint64_t v1 = (long long *)(v0 + 12);
    swift_slowDealloc();
  }
  else
  {
    (*(void (**)(void, void))(v11 + 8))(v0[68], v0[66]);
  }

  uint64_t v16 = qword_1016375E8;
  swift_retain();
  if (v16 != -1) {
    swift_once();
  }
  swift_beginAccess();
  uint64_t result = sub_10001D074((uint64_t)&xmmword_10166E8F0, (uint64_t)v1, (uint64_t *)&unk_101638D30);
  if (v0[15])
  {
    sub_10001CEB0(v1, (uint64_t)(v0 + 2));
    swift_release();
    sub_10001CD44(v0 + 2, v0[5]);
    uint64_t v19 = (uint64_t (__cdecl *)())((char *)&dword_101639288 + dword_101639288);
    uint64_t v18 = (void *)swift_task_alloc();
    v0[70] = v18;
    *uint64_t v18 = v0;
    v18[1] = sub_10102D27C;
    return v19();
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_10102D27C(uint64_t a1)
{
  uint64_t v2 = *(void *)(*(void *)v1 + 376);
  *(void *)(*(void *)v1 + 568) = a1;
  swift_task_dealloc();
  return _swift_task_switch(sub_10102D394, v2, 0);
}

uint64_t sub_10102D394()
{
  uint64_t v1 = v0[71];
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)(v0 + 2));
  uint64_t v2 = Logger.logObject.getter();
  if (v1)
  {
    os_log_type_t v3 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v2, v3))
    {
      uint64_t v4 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v4 = 0;
      _os_log_impl((void *)&_mh_execute_header, v2, v3, "Waiting for first unlock", v4, 2u);
      swift_slowDealloc();
    }

    uint64_t v5 = (void *)swift_task_alloc();
    v0[72] = v5;
    *uint64_t v5 = v0;
    v5[1] = sub_10102D5E0;
    return sub_100611988();
  }
  else
  {
    uint64_t v7 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v2, (os_log_type_t)v7))
    {
      os_log_type_t v8 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)os_log_type_t v8 = 0;
      _os_log_impl((void *)&_mh_execute_header, v2, (os_log_type_t)v7, "First unlock service is not available.  Bailing", v8, 2u);
      swift_slowDealloc();
    }

    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    BOOL v9 = (uint64_t (*)(void))v0[1];
    return v9();
  }
}

uint64_t sub_10102D5E0()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 376);
  swift_task_dealloc();
  return _swift_task_switch(sub_10102D6F0, v1, 0);
}

uint64_t sub_10102D6F0()
{
  uint64_t v1 = Logger.logObject.getter();
  os_log_type_t v2 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v1, v2))
  {
    uint64_t v3 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v3 = 0;
    _os_log_impl((void *)&_mh_execute_header, v1, v2, "Device is now unlocked", v3, 2u);
    swift_slowDealloc();
  }
  uint64_t v4 = *(void *)(v0 + 376);

  if (*(unsigned char *)(v4 + 145) & 1) != 0 || (uint64_t v5 = *(void *)(v0 + 376), (*(unsigned char *)(v5 + 146)))
  {
    uint64_t v6 = Logger.logObject.getter();
    os_log_type_t v7 = static os_log_type_t.default.getter();
    if (!os_log_type_enabled(v6, v7))
    {
LABEL_8:

      swift_release();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      uint64_t v12 = *(uint64_t (**)(void))(v0 + 8);
      return v12();
    }
    os_log_type_t v8 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)os_log_type_t v8 = 0;
    BOOL v9 = "Is currently going through PNP onboarding. Early return";
    uint64_t v10 = v6;
    os_log_type_t v11 = v7;
LABEL_7:
    _os_log_impl((void *)&_mh_execute_header, v10, v11, v9, v8, 2u);
    swift_slowDealloc();
    goto LABEL_8;
  }
  char v14 = *(unsigned char *)(v5 + 144);
  uint64_t v6 = Logger.logObject.getter();
  os_log_type_t v15 = static os_log_type_t.default.getter();
  BOOL v16 = os_log_type_enabled(v6, v15);
  if (v14)
  {
    if (!v16) {
      goto LABEL_8;
    }
    os_log_type_t v8 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)os_log_type_t v8 = 0;
    os_log_type_t v11 = v15;
    BOOL v9 = "Is currently presenting lost mode alert. Early return.";
    uint64_t v10 = v6;
    goto LABEL_7;
  }
  if (v16)
  {
    uint64_t v17 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v17 = 0;
    _os_log_impl((void *)&_mh_execute_header, v6, v15, "Attempting to check if there is a local beacon identifier saved.", v17, 2u);
    swift_slowDealloc();
  }

  uint64_t result = sub_10001D074((uint64_t)&xmmword_10166E8F0, v0 + 176, (uint64_t *)&unk_101638D30);
  if (*(void *)(v0 + 200))
  {
    sub_10001CEB0((long long *)(v0 + 176), v0 + 136);
    sub_10001CD44((void *)(v0 + 136), *(void *)(v0 + 160));
    uint64_t v19 = (uint64_t (__cdecl *)())((char *)&dword_1016390D8 + dword_1016390D8);
    uint64_t v18 = (void *)swift_task_alloc();
    *(void *)(v0 + 584) = v18;
    *uint64_t v18 = v0;
    v18[1] = sub_10102DA64;
    return v19();
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_10102DA64(uint64_t a1)
{
  uint64_t v2 = *(void *)(*(void *)v1 + 376);
  *(void *)(*(void *)v1 + 592) = a1;
  swift_task_dealloc();
  return _swift_task_switch(sub_10102DB7C, v2, 0);
}

uint64_t sub_10102DB7C()
{
  uint64_t v1 = v0[74];
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)(v0 + 17));
  if (v1)
  {
    swift_retain();
    Identifier.id.getter();
    uint64_t v2 = v0[74];
    return _swift_task_switch(sub_10102DD00, v2, 0);
  }
  else
  {
    uint64_t v3 = Logger.logObject.getter();
    os_log_type_t v4 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v3, v4))
    {
      uint64_t v5 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v5 = 0;
      _os_log_impl((void *)&_mh_execute_header, v3, v4, "Awaiting CentralManager", v5, 2u);
      swift_slowDealloc();
    }

    v0[81] = type metadata accessor for CentralManager();
    uint64_t v6 = (void *)swift_task_alloc();
    v0[82] = v6;
    *uint64_t v6 = v0;
    v6[1] = sub_10102E558;
    return static CentralManager.pairingCentralManager.getter();
  }
}

uint64_t sub_10102DD00()
{
  uint64_t v1 = v0[74];
  uint64_t v3 = v0[59];
  uint64_t v2 = v0[60];
  uint64_t v4 = v0[53];
  uint64_t v5 = v0[52];
  v0[75] = *(void *)(v1 + 136);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v4 + 16))(v3, v2, v5);
  unint64_t v6 = (*(unsigned __int8 *)(v4 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
  uint64_t v7 = swift_allocObject();
  v0[76] = v7;
  *(void *)(v7 + 16) = v1;
  (*(void (**)(unint64_t, uint64_t, uint64_t))(v4 + 32))(v7 + v6, v3, v5);
  swift_retain();
  return _swift_task_switch(sub_10102DDF4, 0, 0);
}

uint64_t sub_10102DDF4()
{
  uint64_t v1 = v0[76];
  uint64_t v2 = v0[75];
  uint64_t v3 = (void *)swift_task_alloc();
  v0[77] = v3;
  v3[2] = v2;
  v3[3] = sub_1010390AC;
  v3[4] = v1;
  uint64_t v4 = (void *)swift_task_alloc();
  v0[78] = v4;
  *uint64_t v4 = v0;
  v4[1] = sub_10102DEFC;
  uint64_t v6 = v0[61];
  uint64_t v5 = v0[62];
  return withCheckedContinuation<A>(isolation:function:_:)(v5, 0, 0, 0xD000000000000012, 0x80000001013F1870, sub_101039120, v3, v6);
}

uint64_t sub_10102DEFC()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 480);
  uint64_t v2 = *(void *)(*(void *)v0 + 424);
  uint64_t v3 = *(void *)(*(void *)v0 + 416);
  uint64_t v4 = *(void *)(*(void *)v0 + 376);
  swift_task_dealloc();
  swift_release();
  swift_task_dealloc();
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  return _swift_task_switch(sub_10102E0A8, v4, 0);
}

uint64_t sub_10102E0A8()
{
  uint64_t v1 = v0[62];
  if ((*(unsigned int (**)(uint64_t, uint64_t, void))(v0[64] + 48))(v1, 1, v0[63]) == 1)
  {
    swift_release();
    sub_10001DAB4(v1, (uint64_t *)&unk_10163B1D0);
    uint64_t v2 = Logger.logObject.getter();
    os_log_type_t v3 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v2, v3))
    {
      uint64_t v4 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v4 = 0;
      _os_log_impl((void *)&_mh_execute_header, v2, v3, "Awaiting CentralManager", v4, 2u);
      swift_slowDealloc();
    }

    v0[81] = type metadata accessor for CentralManager();
    uint64_t v5 = (void *)swift_task_alloc();
    v0[82] = v5;
    *uint64_t v5 = v0;
    v5[1] = sub_10102E558;
    return static CentralManager.pairingCentralManager.getter();
  }
  else
  {
    sub_101039BE0(v1, v0[65], (uint64_t (*)(void))type metadata accessor for LocalFindableAccessoryRecord);
    uint64_t v6 = Logger.logObject.getter();
    os_log_type_t v7 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v6, v7))
    {
      uint64_t v8 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v8 = 0;
      _os_log_impl((void *)&_mh_execute_header, v6, v7, "There is a local beacon identifier saved meaning that this is owner. Disable lost mode.", v8, 2u);
      swift_slowDealloc();
    }

    uint64_t v9 = (void *)swift_task_alloc();
    v0[79] = v9;
    *uint64_t v9 = v0;
    v9[1] = sub_10102E304;
    uint64_t v10 = v0[65];
    return sub_1010348CC(v10);
  }
}

uint64_t sub_10102E304()
{
  uint64_t v2 = *v1;
  *(void *)(*v1 + 640) = v0;
  swift_task_dealloc();
  uint64_t v3 = *(void *)(v2 + 376);
  if (v0) {
    uint64_t v4 = sub_1010304BC;
  }
  else {
    uint64_t v4 = sub_10102E430;
  }
  return _swift_task_switch(v4, v3, 0);
}

uint64_t sub_10102E430()
{
  uint64_t v1 = *(void *)(v0 + 520);
  swift_release_n();
  swift_release();
  sub_101039CB0(v1, (uint64_t (*)(void))type metadata accessor for LocalFindableAccessoryRecord);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v2 = *(uint64_t (**)(void))(v0 + 8);
  return v2();
}

uint64_t sub_10102E558(uint64_t a1)
{
  uint64_t v3 = *v2;
  uint64_t v4 = *v2;
  *(void *)(v4 + 664) = a1;
  *(void *)(v4 + 672) = v1;
  swift_task_dealloc();
  uint64_t v5 = *(void *)(v3 + 376);
  if (v1) {
    uint64_t v6 = sub_101030748;
  }
  else {
    uint64_t v6 = sub_10102E690;
  }
  return _swift_task_switch(v6, v5, 0);
}

uint64_t sub_10102E690()
{
  (*(void (**)(void, void, void))(v0[50] + 104))(v0[51], enum case for CentralManager.State.poweredOn(_:), v0[49]);
  uint64_t v1 = (void *)swift_task_alloc();
  v0[85] = v1;
  uint64_t v2 = sub_10103975C(&qword_101639A90, 255, (void (*)(uint64_t))&type metadata accessor for CentralManager);
  *uint64_t v1 = v0;
  v1[1] = sub_10102E790;
  uint64_t v3 = v0[81];
  uint64_t v4 = v0[51];
  return CentralManagerProtocol.await(state:)(v4, v3, v2);
}

uint64_t sub_10102E790()
{
  uint64_t v2 = *(void **)v1;
  *(void *)(*(void *)v1 + 688) = v0;
  swift_task_dealloc();
  uint64_t v3 = v2[51];
  uint64_t v4 = v2[50];
  uint64_t v5 = v2[49];
  uint64_t v6 = v2[47];
  (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v3, v5);
  if (v0) {
    os_log_type_t v7 = sub_1010309B0;
  }
  else {
    os_log_type_t v7 = sub_10102E90C;
  }
  return _swift_task_switch(v7, v6, 0);
}

uint64_t sub_10102E90C()
{
  uint64_t v1 = Logger.logObject.getter();
  os_log_type_t v2 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v1, v2))
  {
    uint64_t v3 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v3 = 0;
    _os_log_impl((void *)&_mh_execute_header, v1, v2, "CentralManager powered on", v3, 2u);
    swift_slowDealloc();
  }
  uint64_t v4 = v0[58];
  uint64_t v5 = v0[52];
  uint64_t v6 = v0[53];

  Identifier.id.getter();
  sub_10000588C(&qword_10163BC50);
  unint64_t v7 = (*(unsigned __int8 *)(v6 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80);
  uint64_t v8 = swift_allocObject();
  v0[87] = v8;
  *(_OWORD *)(v8 + 16) = xmmword_101342130;
  uint64_t v9 = *(void (**)(unint64_t, uint64_t, uint64_t))(v6 + 16);
  v0[88] = v9;
  v0[89] = (v6 + 16) & 0xFFFFFFFFFFFFLL | 0xE3BA000000000000;
  v9(v8 + v7, v4, v5);
  uint64_t v12 = (uint64_t (*)(uint64_t))((char *)&async function pointer to dispatch thunk of CentralManager.retrievePeripherals(identifiers:)
                                        + async function pointer to dispatch thunk of CentralManager.retrievePeripherals(identifiers:));
  uint64_t v10 = (void *)swift_task_alloc();
  v0[90] = v10;
  *uint64_t v10 = v0;
  v10[1] = sub_10102EABC;
  return v12(v8);
}

uint64_t sub_10102EABC(uint64_t a1)
{
  uint64_t v3 = *v2;
  uint64_t v4 = *v2;
  *(void *)(v4 + 728) = a1;
  *(void *)(v4 + 736) = v1;
  swift_task_dealloc();
  uint64_t v5 = *(void *)(v3 + 376);
  swift_bridgeObjectRelease();
  if (v1) {
    uint64_t v6 = sub_101030C24;
  }
  else {
    uint64_t v6 = sub_10102EC10;
  }
  return _swift_task_switch(v6, v5, 0);
}

void sub_10102EC10()
{
  uint64_t v45 = v0;
  unint64_t v1 = *(void *)(v0 + 728);
  if (v1 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v19 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    os_log_type_t v2 = (void *)(v0 + 320);
    if (v19)
    {
LABEL_3:
      if ((v1 & 0xC000000000000001) != 0)
      {
        uint64_t v3 = specialized _ArrayBuffer._getElementSlowPath(_:)();
      }
      else
      {
        if (!*(void *)((v1 & 0xFFFFFFFFFFFFFF8) + 0x10))
        {
          __break(1u);
          goto LABEL_25;
        }
        uint64_t v3 = swift_retain();
      }
      *(void *)(v0 + 744) = v3;
      uint64_t v4 = *(void (**)(uint64_t, uint64_t, uint64_t))(v0 + 704);
      uint64_t v6 = *(void *)(v0 + 456);
      uint64_t v5 = *(void *)(v0 + 464);
      uint64_t v7 = *(void *)(v0 + 416);
      swift_bridgeObjectRelease();
      v4(v6, v5, v7);
      uint64_t v8 = Logger.logObject.getter();
      os_log_type_t v9 = static os_log_type_t.default.getter();
      BOOL v10 = os_log_type_enabled(v8, v9);
      uint64_t v11 = *(void *)(v0 + 456);
      uint64_t v13 = *(void *)(v0 + 416);
      uint64_t v12 = *(void *)(v0 + 424);
      if (v10)
      {
        uint64_t v14 = swift_slowAlloc();
        v44[0] = swift_slowAlloc();
        *(_DWORD *)uint64_t v14 = 141558275;
        *os_log_type_t v2 = 1752392040;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        *(_WORD *)(v14 + 12) = 2081;
        sub_10103975C((unint64_t *)&qword_101638B10, 255, (void (*)(uint64_t))&type metadata accessor for UUID);
        uint64_t v15 = dispatch thunk of CustomStringConvertible.description.getter();
        *(void *)(v0 + 328) = sub_1008FA0F0(v15, v16, v44);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        uint64_t v17 = *(void (**)(uint64_t, uint64_t))(v12 + 8);
        v17(v11, v13);
        _os_log_impl((void *)&_mh_execute_header, v8, v9, "Successfully retrieved peripheral %{private,mask.hash}s from CentralManager", (uint8_t *)v14, 0x16u);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
      }
      else
      {
        uint64_t v17 = *(void (**)(uint64_t, uint64_t))(v12 + 8);
        v17(*(void *)(v0 + 456), *(void *)(v0 + 416));
      }

      *(void *)(v0 + 752) = v17;
      sub_10001D074((uint64_t)&xmmword_10166E8F0, v0 + 56, (uint64_t *)&unk_101638D30);
      if (*(void *)(v0 + 80))
      {
        sub_10001CEB0((long long *)(v0 + 56), v0 + 216);
        sub_10001CD44((void *)(v0 + 216), *(void *)(v0 + 240));
        uint64_t v43 = (void (__cdecl *)())((char *)&dword_101639168 + dword_101639168);
        uint64_t v18 = (void *)swift_task_alloc();
        *(void *)(v0 + 760) = v18;
        *uint64_t v18 = v0;
        v18[1] = sub_10102F3C4;
        v43();
        return;
      }
LABEL_25:
      __break(1u);
      return;
    }
  }
  else
  {
    os_log_type_t v2 = (void *)(v0 + 320);
    if (*(void *)((v1 & 0xFFFFFFFFFFFFFF8) + 0x10)) {
      goto LABEL_3;
    }
  }
  uint64_t v20 = *(void (**)(uint64_t, uint64_t, uint64_t))(v0 + 704);
  uint64_t v21 = *(void *)(v0 + 464);
  uint64_t v22 = *(void *)(v0 + 440);
  uint64_t v23 = *(void *)(v0 + 416);
  swift_bridgeObjectRelease();
  v20(v22, v21, v23);
  BOOL v24 = Logger.logObject.getter();
  os_log_type_t v25 = static os_log_type_t.error.getter();
  BOOL v26 = os_log_type_enabled(v24, v25);
  uint64_t v27 = *(void *)(v0 + 440);
  uint64_t v29 = *(void *)(v0 + 416);
  uint64_t v28 = *(void *)(v0 + 424);
  if (v26)
  {
    uint64_t v30 = swift_slowAlloc();
    v44[0] = swift_slowAlloc();
    *(_DWORD *)uint64_t v30 = 141558275;
    *(void *)(v0 + 336) = 1752392040;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v30 + 12) = 2081;
    sub_10103975C((unint64_t *)&qword_101638B10, 255, (void (*)(uint64_t))&type metadata accessor for UUID);
    uint64_t v31 = dispatch thunk of CustomStringConvertible.description.getter();
    *(void *)(v0 + 344) = sub_1008FA0F0(v31, v32, v44);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    unint64_t v33 = *(void (**)(uint64_t, uint64_t))(v28 + 8);
    v33(v27, v29);
    _os_log_impl((void *)&_mh_execute_header, v24, v25, "Unable to retrieve a Peripheral for %{private,mask.hash}s", (uint8_t *)v30, 0x16u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    unint64_t v33 = *(void (**)(uint64_t, uint64_t))(v28 + 8);
    v33(*(void *)(v0 + 440), *(void *)(v0 + 416));
  }

  uint64_t v34 = *(void *)(v0 + 464);
  uint64_t v35 = *(void *)(v0 + 416);
  sub_101038A6C();
  swift_allocError();
  *unint64_t v36 = 5;
  swift_willThrow();
  swift_release();
  swift_release();
  swift_release();
  v33(v34, v35);
  swift_errorRetain();
  swift_errorRetain();
  uint64_t v37 = Logger.logObject.getter();
  os_log_type_t v38 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v37, v38))
  {
    id v39 = (uint8_t *)swift_slowAlloc();
    v44[0] = swift_slowAlloc();
    *(_DWORD *)id v39 = 136315138;
    swift_getErrorValue();
    uint64_t v40 = Error.localizedDescription.getter();
    *(void *)(v0 + 312) = sub_1008FA0F0(v40, v41, v44);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl((void *)&_mh_execute_header, v37, v38, "Found error %s with handling lost mode", v39, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    swift_errorRelease();
  }
  else
  {
    swift_errorRelease();
    swift_errorRelease();
    swift_errorRelease();
  }
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v42 = *(void (**)(void))(v0 + 8);
  v42();
}

uint64_t sub_10102F3C4(uint64_t a1)
{
  uint64_t v2 = *(void *)(*(void *)v1 + 376);
  *(void *)(*(void *)v1 + 768) = a1;
  swift_task_dealloc();
  return _swift_task_switch(sub_10102F4DC, v2, 0);
}

uint64_t sub_10102F4DC()
{
  uint64_t v1 = v0[96];
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)(v0 + 27));
  if (v1)
  {
    uint64_t v2 = Logger.logObject.getter();
    os_log_type_t v3 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v2, v3))
    {
      uint64_t v4 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v4 = 0;
      _os_log_impl((void *)&_mh_execute_header, v2, v3, "Performing local account check", v4, 2u);
      swift_slowDealloc();
    }

    uint64_t v15 = (uint64_t (*)(uint64_t))((char *)&dword_101667710 + dword_101667710);
    uint64_t v5 = (void *)swift_task_alloc();
    v0[97] = v5;
    *uint64_t v5 = v0;
    v5[1] = sub_10102F7A4;
    uint64_t v6 = v0[93];
    return v15(v6);
  }
  else
  {
    uint64_t v8 = Logger.logObject.getter();
    os_log_type_t v9 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v8, v9))
    {
      BOOL v10 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)BOOL v10 = 0;
      _os_log_impl((void *)&_mh_execute_header, v8, v9, "No local findable pairing service to verify FMNID!", v10, 2u);
      swift_slowDealloc();
    }
    uint64_t v11 = (void (*)(uint64_t, uint64_t))v0[94];
    uint64_t v12 = v0[58];
    uint64_t v13 = v0[52];
    swift_release();
    swift_release();

    swift_release();
    swift_release();
    v11(v12, v13);
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v14 = (uint64_t (*)(void))v0[1];
    return v14();
  }
}

uint64_t sub_10102F7A4(char a1)
{
  uint64_t v4 = *v2;
  *(void *)(v4 + 784) = v1;
  swift_task_dealloc();
  uint64_t v5 = *(void *)(v4 + 376);
  if (v1)
  {
    uint64_t v6 = sub_101030EB8;
  }
  else
  {
    *(unsigned char *)(v4 + 848) = a1;
    uint64_t v6 = sub_10102F8E0;
  }
  return _swift_task_switch(v6, v5, 0);
}

uint64_t sub_10102F8E0()
{
  unsigned int v1 = *(unsigned __int8 *)(v0 + 848);
  if (v1 < 2)
  {
    uint64_t v2 = Logger.logObject.getter();
    os_log_type_t v3 = static os_log_type_t.default.getter();
    BOOL v4 = os_log_type_enabled(v2, v3);
    uint64_t v5 = *(void (**)(uint64_t, uint64_t))(v0 + 752);
    uint64_t v27 = *(void *)(v0 + 416);
    uint64_t v28 = *(void *)(v0 + 464);
    if (v4)
    {
      uint64_t v6 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v6 = 0;
      _os_log_impl((void *)&_mh_execute_header, v2, v3, "Not elligible for lost mode notification, remove", v6, 2u);
      swift_slowDealloc();
    }

    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    v5(v28, v27);
LABEL_19:
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v20 = *(uint64_t (**)(void))(v0 + 8);
    return v20();
  }
  if (v1 == 2)
  {
    Identifier.id.getter();
    uint64_t v7 = (void *)swift_task_alloc();
    *(void *)(v0 + 816) = v7;
    *uint64_t v7 = v0;
    v7[1] = sub_1010301CC;
    uint64_t v8 = *(void *)(v0 + 448);
    return sub_1010348CC(v8);
  }
  else
  {
    char v10 = sub_101035754();
    if (!v10)
    {
      uint64_t v14 = Logger.logObject.getter();
      os_log_type_t v15 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v14, v15))
      {
        uint64_t v16 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)uint64_t v16 = 0;
        _os_log_impl((void *)&_mh_execute_header, v14, v15, "We have exceeded the maximum number of alerts. Return.", v16, 2u);
        swift_slowDealloc();
      }
      uint64_t v17 = *(void (**)(uint64_t, uint64_t))(v0 + 752);
      uint64_t v18 = *(void *)(v0 + 464);
      uint64_t v19 = *(void *)(v0 + 416);
      swift_release();
      swift_release();

      swift_release();
      swift_release();
      swift_release();
      v17(v18, v19);
      goto LABEL_19;
    }
    if (v10 == 1)
    {
      uint64_t v11 = Logger.logObject.getter();
      os_log_type_t v12 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v11, v12))
      {
        uint64_t v13 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)uint64_t v13 = 0;
        _os_log_impl((void *)&_mh_execute_header, v11, v12, "Throttle limit not reached, continue with lookup.", v13, 2u);
        swift_slowDealloc();
      }
    }
    else
    {
      uint64_t v21 = Logger.logObject.getter();
      os_log_type_t v22 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v21, v22))
      {
        uint64_t v23 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)uint64_t v23 = 0;
        _os_log_impl((void *)&_mh_execute_header, v21, v22, "We have exceeded the date interval. Reset number of alerts and date of first lookup. Continue with lost mode lookup.", v23, 2u);
        swift_slowDealloc();
      }

      sub_10103554C();
    }
    BOOL v24 = (void *)swift_task_alloc();
    *(void *)(v0 + 792) = v24;
    *BOOL v24 = v0;
    v24[1] = sub_10102FDE0;
    uint64_t v25 = *(void *)(v0 + 744);
    uint64_t v26 = *(void *)(v0 + 384);
    return sub_1010316C0(v26, v25);
  }
}

uint64_t sub_10102FDE0()
{
  uint64_t v2 = (void *)*v1;
  v2[100] = v0;
  swift_task_dealloc();
  if (v0)
  {
    uint64_t v3 = v2[47];
    return _swift_task_switch(sub_101031168, v3, 0);
  }
  else
  {
    BOOL v4 = (void *)swift_task_alloc();
    v2[101] = v4;
    *BOOL v4 = v2;
    v4[1] = sub_10102FF50;
    uint64_t v5 = v2[48];
    return sub_101034460(v5);
  }
}

uint64_t sub_10102FF50()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 376);
  swift_task_dealloc();
  return _swift_task_switch(sub_101030060, v1, 0);
}

uint64_t sub_101030060()
{
  uint64_t v1 = (void (*)(uint64_t, uint64_t))v0[94];
  uint64_t v2 = v0[58];
  uint64_t v3 = v0[52];
  uint64_t v4 = v0[48];
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  sub_101039CB0(v4, (uint64_t (*)(void))type metadata accessor for LostModeAlertInfo);
  v1(v2, v3);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v5 = (uint64_t (*)(void))v0[1];
  return v5();
}

uint64_t sub_1010301CC()
{
  uint64_t v2 = (void *)*v1;
  v2[103] = v0;
  swift_task_dealloc();
  uint64_t v3 = (void (*)(uint64_t, uint64_t))v2[94];
  uint64_t v4 = v2[56];
  uint64_t v5 = v2[52];
  uint64_t v6 = v2[47];
  uint64_t v7 = (v2[53] + 8) & 0xFFFFFFFFFFFFLL | 0x4F8000000000000;
  if (v0)
  {
    v2[105] = v7;
    v3(v4, v5);
    uint64_t v8 = sub_101031418;
  }
  else
  {
    v2[104] = v7;
    v3(v4, v5);
    uint64_t v8 = sub_101030378;
  }
  return _swift_task_switch(v8, v6, 0);
}

uint64_t sub_101030378()
{
  uint64_t v1 = (void (*)(uint64_t, uint64_t))v0[94];
  uint64_t v2 = v0[58];
  uint64_t v3 = v0[52];
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  v1(v2, v3);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v4 = (uint64_t (*)(void))v0[1];
  return v4();
}

uint64_t sub_1010304BC()
{
  uint64_t v10 = v0;
  uint64_t v1 = v0[65];
  swift_release_n();
  swift_release();
  sub_101039CB0(v1, (uint64_t (*)(void))type metadata accessor for LocalFindableAccessoryRecord);
  swift_errorRetain();
  swift_errorRetain();
  uint64_t v2 = Logger.logObject.getter();
  os_log_type_t v3 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v2, v3))
  {
    uint64_t v4 = (uint8_t *)swift_slowAlloc();
    uint64_t v9 = swift_slowAlloc();
    *(_DWORD *)uint64_t v4 = 136315138;
    swift_getErrorValue();
    uint64_t v5 = Error.localizedDescription.getter();
    v0[39] = sub_1008FA0F0(v5, v6, &v9);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl((void *)&_mh_execute_header, v2, v3, "Found error %s with handling lost mode", v4, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    swift_errorRelease();
  }
  else
  {
    swift_errorRelease();
    swift_errorRelease();
    swift_errorRelease();
  }
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v7 = (uint64_t (*)(void))v0[1];
  return v7();
}

uint64_t sub_101030748()
{
  uint64_t v9 = v0;
  swift_release();
  swift_release();
  swift_errorRetain();
  swift_errorRetain();
  uint64_t v1 = Logger.logObject.getter();
  os_log_type_t v2 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v1, v2))
  {
    os_log_type_t v3 = (uint8_t *)swift_slowAlloc();
    uint64_t v8 = swift_slowAlloc();
    *(_DWORD *)os_log_type_t v3 = 136315138;
    swift_getErrorValue();
    uint64_t v4 = Error.localizedDescription.getter();
    *(void *)(v0 + 312) = sub_1008FA0F0(v4, v5, &v8);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl((void *)&_mh_execute_header, v1, v2, "Found error %s with handling lost mode", v3, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    swift_errorRelease();
  }
  else
  {
    swift_errorRelease();
    swift_errorRelease();
    swift_errorRelease();
  }
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  unint64_t v6 = *(uint64_t (**)(void))(v0 + 8);
  return v6();
}

uint64_t sub_1010309B0()
{
  uint64_t v9 = v0;
  swift_release();
  swift_release();
  swift_release();
  swift_errorRetain();
  swift_errorRetain();
  uint64_t v1 = Logger.logObject.getter();
  os_log_type_t v2 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v1, v2))
  {
    os_log_type_t v3 = (uint8_t *)swift_slowAlloc();
    uint64_t v8 = swift_slowAlloc();
    *(_DWORD *)os_log_type_t v3 = 136315138;
    swift_getErrorValue();
    uint64_t v4 = Error.localizedDescription.getter();
    *(void *)(v0 + 312) = sub_1008FA0F0(v4, v5, &v8);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl((void *)&_mh_execute_header, v1, v2, "Found error %s with handling lost mode", v3, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    swift_errorRelease();
  }
  else
  {
    swift_errorRelease();
    swift_errorRelease();
    swift_errorRelease();
  }
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  unint64_t v6 = *(uint64_t (**)(void))(v0 + 8);
  return v6();
}

uint64_t sub_101030C24()
{
  os_log_type_t v12 = v0;
  uint64_t v1 = v0[58];
  uint64_t v2 = v0[52];
  uint64_t v3 = v0[53];
  swift_release();
  swift_release();
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v1, v2);
  swift_errorRetain();
  swift_errorRetain();
  uint64_t v4 = Logger.logObject.getter();
  os_log_type_t v5 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v4, v5))
  {
    unint64_t v6 = (uint8_t *)swift_slowAlloc();
    uint64_t v11 = swift_slowAlloc();
    *(_DWORD *)unint64_t v6 = 136315138;
    swift_getErrorValue();
    uint64_t v7 = Error.localizedDescription.getter();
    v0[39] = sub_1008FA0F0(v7, v8, &v11);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl((void *)&_mh_execute_header, v4, v5, "Found error %s with handling lost mode", v6, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    swift_errorRelease();
  }
  else
  {
    swift_errorRelease();
    swift_errorRelease();
    swift_errorRelease();
  }
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v9 = (uint64_t (*)(void))v0[1];
  return v9();
}

uint64_t sub_101030EB8()
{
  os_log_type_t v12 = v0;
  uint64_t v1 = (void (*)(uint64_t, uint64_t))v0[94];
  uint64_t v2 = v0[58];
  uint64_t v3 = v0[52];
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  v1(v2, v3);
  swift_errorRetain();
  swift_errorRetain();
  uint64_t v4 = Logger.logObject.getter();
  os_log_type_t v5 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v4, v5))
  {
    unint64_t v6 = (uint8_t *)swift_slowAlloc();
    uint64_t v11 = swift_slowAlloc();
    *(_DWORD *)unint64_t v6 = 136315138;
    swift_getErrorValue();
    uint64_t v7 = Error.localizedDescription.getter();
    v0[39] = sub_1008FA0F0(v7, v8, &v11);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl((void *)&_mh_execute_header, v4, v5, "Found error %s with handling lost mode", v6, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    swift_errorRelease();
  }
  else
  {
    swift_errorRelease();
    swift_errorRelease();
    swift_errorRelease();
  }
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v9 = (uint64_t (*)(void))v0[1];
  return v9();
}

uint64_t sub_101031168()
{
  os_log_type_t v12 = v0;
  uint64_t v1 = (void (*)(uint64_t, uint64_t))v0[94];
  uint64_t v2 = v0[58];
  uint64_t v3 = v0[52];
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  v1(v2, v3);
  swift_errorRetain();
  swift_errorRetain();
  uint64_t v4 = Logger.logObject.getter();
  os_log_type_t v5 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v4, v5))
  {
    unint64_t v6 = (uint8_t *)swift_slowAlloc();
    uint64_t v11 = swift_slowAlloc();
    *(_DWORD *)unint64_t v6 = 136315138;
    swift_getErrorValue();
    uint64_t v7 = Error.localizedDescription.getter();
    v0[39] = sub_1008FA0F0(v7, v8, &v11);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl((void *)&_mh_execute_header, v4, v5, "Found error %s with handling lost mode", v6, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    swift_errorRelease();
  }
  else
  {
    swift_errorRelease();
    swift_errorRelease();
    swift_errorRelease();
  }
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v9 = (uint64_t (*)(void))v0[1];
  return v9();
}

uint64_t sub_101031418()
{
  os_log_type_t v12 = v0;
  uint64_t v1 = (void (*)(uint64_t, uint64_t))v0[94];
  uint64_t v2 = v0[58];
  uint64_t v3 = v0[52];
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  v1(v2, v3);
  swift_errorRetain();
  swift_errorRetain();
  uint64_t v4 = Logger.logObject.getter();
  os_log_type_t v5 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v4, v5))
  {
    unint64_t v6 = (uint8_t *)swift_slowAlloc();
    uint64_t v11 = swift_slowAlloc();
    *(_DWORD *)unint64_t v6 = 136315138;
    swift_getErrorValue();
    uint64_t v7 = Error.localizedDescription.getter();
    v0[39] = sub_1008FA0F0(v7, v8, &v11);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl((void *)&_mh_execute_header, v4, v5, "Found error %s with handling lost mode", v6, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    swift_errorRelease();
  }
  else
  {
    swift_errorRelease();
    swift_errorRelease();
    swift_errorRelease();
  }
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v9 = (uint64_t (*)(void))v0[1];
  return v9();
}

uint64_t sub_1010316C0(uint64_t a1, uint64_t a2)
{
  v3[35] = a2;
  v3[36] = v2;
  v3[34] = a1;
  sub_10000588C(&qword_101649E40);
  v3[37] = swift_task_alloc();
  v3[38] = type metadata accessor for OfflineLostModeInfoLookupResponse();
  v3[39] = swift_task_alloc();
  uint64_t v4 = type metadata accessor for Response();
  v3[40] = v4;
  v3[41] = *(void *)(v4 - 8);
  v3[42] = swift_task_alloc();
  v3[43] = swift_task_alloc();
  sub_10000588C(&qword_1016676F0);
  v3[44] = swift_task_alloc();
  uint64_t v5 = type metadata accessor for OfflineLostModeInfoLookupEndpoint();
  v3[45] = v5;
  v3[46] = *(void *)(v5 - 8);
  v3[47] = swift_task_alloc();
  v3[48] = type metadata accessor for OfflineLostModeInfoLookupRequest();
  v3[49] = swift_task_alloc();
  v3[50] = type metadata accessor for AccessoryMetadata(0);
  v3[51] = swift_task_alloc();
  uint64_t v6 = type metadata accessor for URL();
  v3[52] = v6;
  v3[53] = *(void *)(v6 - 8);
  v3[54] = swift_task_alloc();
  v3[55] = swift_task_alloc();
  v3[56] = swift_task_alloc();
  uint64_t v7 = type metadata accessor for PeripheralPairingInfo();
  v3[57] = v7;
  v3[58] = *(void *)(v7 - 8);
  v3[59] = swift_task_alloc();
  uint64_t v8 = type metadata accessor for MACAddress();
  v3[60] = v8;
  v3[61] = *(void *)(v8 - 8);
  v3[62] = swift_task_alloc();
  uint64_t v9 = sub_10000588C(&qword_10163D210);
  v3[63] = v9;
  v3[64] = *(void *)(v9 - 8);
  v3[65] = swift_task_alloc();
  v3[66] = type metadata accessor for RawAccessoryMetadata(0);
  v3[67] = swift_task_alloc();
  v3[68] = swift_task_alloc();
  return _swift_task_switch(sub_101031AB0, v2, 0);
}

uint64_t sub_101031AB0()
{
  if (qword_101637380 != -1) {
    swift_once();
  }
  uint64_t v1 = type metadata accessor for Logger();
  v0[69] = sub_100010324(v1, (uint64_t)qword_101667438);
  uint64_t v2 = Logger.logObject.getter();
  os_log_type_t v3 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v2, v3))
  {
    uint64_t v4 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v4 = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, v3, "Generating lost mode alert info", v4, 2u);
    swift_slowDealloc();
  }

  uint64_t v9 = (uint64_t (*)(uint64_t, uint64_t))((char *)&dword_10165E678 + dword_10165E678);
  uint64_t v5 = (void *)swift_task_alloc();
  v0[70] = v5;
  *uint64_t v5 = v0;
  v5[1] = sub_101031C1C;
  uint64_t v6 = v0[68];
  uint64_t v7 = v0[35];
  return v9(v6, v7);
}

uint64_t sub_101031C1C()
{
  uint64_t v2 = *v1;
  *(void *)(*v1 + 568) = v0;
  swift_task_dealloc();
  uint64_t v3 = *(void *)(v2 + 288);
  if (v0) {
    uint64_t v4 = sub_101033E08;
  }
  else {
    uint64_t v4 = sub_101031D48;
  }
  return _swift_task_switch(v4, v3, 0);
}

uint64_t sub_101031D48()
{
  os_log_type_t v15 = v0;
  swift_retain_n();
  uint64_t v1 = Logger.logObject.getter();
  os_log_type_t v2 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v1, v2))
  {
    uint64_t v3 = v0[65];
    uint64_t v5 = v0[63];
    uint64_t v4 = v0[64];
    uint64_t v6 = (uint8_t *)swift_slowAlloc();
    uint64_t v14 = swift_slowAlloc();
    *(_DWORD *)uint64_t v6 = 136380675;
    Peripheral.id.getter();
    sub_100062734(&qword_10163B810, &qword_10163D210);
    uint64_t v7 = dispatch thunk of CustomStringConvertible.description.getter();
    unint64_t v9 = v8;
    (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v3, v5);
    v0[33] = sub_1008FA0F0(v7, v9, &v14);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release_n();
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v1, v2, "Retrieving Mac address for peripheral %{private}s", v6, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {

    swift_release_n();
  }
  uint64_t v13 = (uint64_t (*)(uint64_t))((char *)&async function pointer to dispatch thunk of Peripheral.pairingInfo.getter
                                        + async function pointer to dispatch thunk of Peripheral.pairingInfo.getter);
  uint64_t v10 = (void *)swift_task_alloc();
  v0[72] = v10;
  *uint64_t v10 = v0;
  v10[1] = sub_101031FAC;
  uint64_t v11 = v0[59];
  return v13(v11);
}

uint64_t sub_101031FAC()
{
  uint64_t v2 = *v1;
  *(void *)(*v1 + 584) = v0;
  swift_task_dealloc();
  uint64_t v3 = *(void *)(v2 + 288);
  if (v0) {
    uint64_t v4 = sub_101033F50;
  }
  else {
    uint64_t v4 = sub_1010320D8;
  }
  return _swift_task_switch(v4, v3, 0);
}

uint64_t sub_1010320D8()
{
  uint64_t v2 = *(void *)(v0 + 464);
  uint64_t v1 = *(void *)(v0 + 472);
  uint64_t v3 = *(void *)(v0 + 456);
  PeripheralPairingInfo.remoteAddress.getter();
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  uint64_t v4 = Logger.logObject.getter();
  os_log_type_t v5 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v4, v5))
  {
    uint64_t v6 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v6 = 0;
    _os_log_impl((void *)&_mh_execute_header, v4, v5, "Retreived Mac address", v6, 2u);
    swift_slowDealloc();
  }

  uint64_t v7 = qword_1016375E8;
  swift_retain();
  if (v7 != -1) {
    swift_once();
  }
  swift_beginAccess();
  uint64_t result = sub_10001D074((uint64_t)&xmmword_10166E8F0, v0 + 96, (uint64_t *)&unk_101638D30);
  if (*(void *)(v0 + 120))
  {
    sub_10001CEB0((long long *)(v0 + 96), v0 + 16);
    swift_release();
    sub_10001CD44((void *)(v0 + 16), *(void *)(v0 + 40));
    uint64_t v10 = (uint64_t (*)(void))((char *)&dword_101639258 + dword_101639258);
    unint64_t v9 = (void *)swift_task_alloc();
    *(void *)(v0 + 592) = v9;
    *unint64_t v9 = v0;
    v9[1] = sub_1010322D4;
    return v10();
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_1010322D4(uint64_t a1)
{
  uint64_t v2 = *(void *)(*(void *)v1 + 288);
  *(void *)(*(void *)v1 + 600) = a1;
  swift_task_dealloc();
  return _swift_task_switch(sub_1010323EC, v2, 0);
}

uint64_t sub_1010323EC()
{
  uint64_t v40 = v0;
  uint64_t v1 = (uint64_t)(v0 + 2);
  if (!v0[75])
  {
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v1);
    swift_retain_n();
    uint64_t v10 = Logger.logObject.getter();
    os_log_type_t v11 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v10, v11))
    {
      uint64_t v12 = v0[65];
      uint64_t v14 = v0[63];
      uint64_t v13 = v0[64];
      os_log_type_t v15 = (uint8_t *)swift_slowAlloc();
      uint64_t v39 = swift_slowAlloc();
      *(_DWORD *)os_log_type_t v15 = 136315138;
      Peripheral.id.getter();
      sub_100062734(&qword_10163B810, &qword_10163D210);
      uint64_t v16 = dispatch thunk of CustomStringConvertible.description.getter();
      unint64_t v18 = v17;
      (*(void (**)(uint64_t, uint64_t))(v13 + 8))(v12, v14);
      v0[31] = sub_1008FA0F0(v16, v18, &v39);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_release_n();
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v10, v11, "No command service! %s", v15, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {

      swift_release_n();
    }
    uint64_t v6 = v0[68];
    uint64_t v29 = v0[61];
    uint64_t v28 = v0[62];
    uint64_t v30 = v0[60];
    sub_101038A6C();
    swift_allocError();
    unsigned char *v31 = 0;
    swift_willThrow();
    (*(void (**)(uint64_t, uint64_t))(v29 + 8))(v28, v30);
    goto LABEL_10;
  }
  uint64_t v2 = v0[73];
  uint64_t v3 = v0[68];
  uint64_t v4 = v0[67];
  uint64_t v5 = v0[51];
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v1);
  sub_101039C48(v3, v4, type metadata accessor for RawAccessoryMetadata);
  sub_1001A9FB0(v4, v5);
  uint64_t v6 = v0[68];
  if (v2)
  {
    uint64_t v7 = v0[61];
    uint64_t v8 = v0[62];
    uint64_t v9 = v0[60];
    swift_release();
    (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v8, v9);
LABEL_10:
    sub_101039CB0(v6, type metadata accessor for RawAccessoryMetadata);
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    unint64_t v32 = (uint64_t (*)(void))v0[1];
    return v32();
  }
  uint64_t v19 = v0[66];
  uint64_t v20 = v0[51];
  uint64_t v21 = (uint64_t *)(v20 + *(int *)(v0[50] + 20));
  uint64_t v22 = *v21;
  v0[76] = *v21;
  unint64_t v23 = v21[1];
  v0[77] = v23;
  sub_1000361E0(v22, v23);
  sub_101039CB0(v20, type metadata accessor for AccessoryMetadata);
  uint64_t v24 = v6 + *(int *)(v19 + 44);
  unint64_t v25 = *(void *)(v24 + 8);
  if (v25 >> 60 == 15)
  {
    uint64_t v26 = 0;
    uint64_t v27 = 0;
  }
  else
  {
    uint64_t v34 = *(void *)v24;
    sub_1000361E0(*(void *)v24, *(void *)(v24 + 8));
    uint64_t v26 = Data.hexString.getter();
    uint64_t v27 = v35;
    sub_100037A24(v34, v25);
  }
  v0[78] = v27;
  unint64_t v36 = (void *)swift_task_alloc();
  v0[79] = v36;
  *unint64_t v36 = v0;
  v36[1] = sub_1010328E0;
  uint64_t v37 = v0[62];
  uint64_t v38 = v0[56];
  return sub_10122ADBC(v38, v37, v22, v23, v26, v27);
}

uint64_t sub_1010328E0()
{
  uint64_t v2 = *(void **)v1;
  *(void *)(*(void *)v1 + 640) = v0;
  swift_task_dealloc();
  unint64_t v3 = v2[77];
  uint64_t v4 = v2[76];
  uint64_t v5 = v2[36];
  swift_bridgeObjectRelease();
  sub_10001CFB8(v4, v3);
  if (v0) {
    uint64_t v6 = sub_1010340B4;
  }
  else {
    uint64_t v6 = sub_101032A64;
  }
  return _swift_task_switch(v6, v5, 0);
}

uint64_t sub_101032A64()
{
  uint64_t v55 = v0;
  uint64_t v1 = Logger.logObject.getter();
  os_log_type_t v2 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v1, v2))
  {
    unint64_t v3 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)unint64_t v3 = 0;
    _os_log_impl((void *)&_mh_execute_header, v1, v2, "Generated serial number URL", v3, 2u);
    swift_slowDealloc();
  }

  id v4 = [self mainBundle];
  id v5 = [v4 bundleIdentifier];

  if (v5)
  {
    static String._unconditionallyBridgeFromObjectiveC(_:)();
  }
  uint64_t v6 = *(void *)(v0 + 440);
  uint64_t v7 = *(void *)(v0 + 416);
  uint64_t v8 = *(void *)(v0 + 424);
  uint64_t v9 = *(void *)(v0 + 384);
  uint64_t v10 = *(_OWORD **)(v0 + 392);
  uint64_t v11 = *(void *)(v0 + 368);
  uint64_t v50 = *(void *)(v0 + 448);
  uint64_t v52 = *(void *)(v0 + 360);
  uint64_t v12 = *(void *)(v0 + 352);
  type metadata accessor for ServerInteractionController();
  *(void *)(v0 + 648) = ServerInteractionController.__allocating_init(bundleIdentifier:)();
  *uint64_t v10 = xmmword_101347BB0;
  uint64_t v13 = (char *)v10 + *(int *)(v9 + 20);
  uint64_t v14 = enum case for RequestMethod.get(_:);
  uint64_t v15 = type metadata accessor for RequestMethod();
  (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v15 - 8) + 104))(v13, v14, v15);
  uint64_t v16 = *(void (**)(uint64_t, uint64_t, uint64_t))(v8 + 16);
  v16(v6, v50, v7);
  sub_100B96208(v6, v12);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v11 + 48))(v12, 1, v52) == 1)
  {
    uint64_t v17 = *(void *)(v0 + 448);
    uint64_t v18 = *(void *)(v0 + 432);
    uint64_t v19 = *(void *)(v0 + 416);
    sub_10001DAB4(*(void *)(v0 + 352), &qword_1016676F0);
    v16(v18, v17, v19);
    uint64_t v20 = Logger.logObject.getter();
    os_log_type_t v21 = static os_log_type_t.error.getter();
    BOOL v22 = os_log_type_enabled(v20, v21);
    uint64_t v23 = *(void *)(v0 + 424);
    uint64_t v24 = *(void *)(v0 + 432);
    uint64_t v25 = *(void *)(v0 + 416);
    if (v22)
    {
      uint64_t v26 = (uint8_t *)swift_slowAlloc();
      uint64_t v54 = swift_slowAlloc();
      *(_DWORD *)uint64_t v26 = 136315138;
      sub_10103975C((unint64_t *)&qword_1016605A0, 255, (void (*)(uint64_t))&type metadata accessor for URL);
      uint64_t v27 = dispatch thunk of CustomStringConvertible.description.getter();
      *(void *)(v0 + 240) = sub_1008FA0F0(v27, v28, &v54);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      unint64_t v51 = *(void (**)(uint64_t, uint64_t))(v23 + 8);
      v51(v24, v25);
      _os_log_impl((void *)&_mh_execute_header, v20, v21, "Can't create endpoint from url %s", v26, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      unint64_t v51 = *(void (**)(uint64_t, uint64_t))(v23 + 8);
      v51(*(void *)(v0 + 432), *(void *)(v0 + 416));
    }

    uint64_t v49 = *(void *)(v0 + 544);
    uint64_t v41 = *(void *)(v0 + 488);
    uint64_t v42 = *(void *)(v0 + 496);
    uint64_t v43 = *(void *)(v0 + 480);
    uint64_t v44 = *(void *)(v0 + 448);
    uint64_t v45 = *(void *)(v0 + 416);
    uint64_t v46 = *(void *)(v0 + 392);
    sub_101038A6C();
    swift_allocError();
    *BOOL v47 = 3;
    swift_willThrow();
    swift_release();
    swift_release();
    sub_101039CB0(v46, (uint64_t (*)(void))type metadata accessor for OfflineLostModeInfoLookupRequest);
    v51(v44, v45);
    (*(void (**)(uint64_t, uint64_t))(v41 + 8))(v42, v43);
    sub_101039CB0(v49, type metadata accessor for RawAccessoryMetadata);
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v48 = *(uint64_t (**)(void))(v0 + 8);
    return v48();
  }
  else
  {
    sub_101039BE0(*(void *)(v0 + 352), *(void *)(v0 + 376), (uint64_t (*)(void))type metadata accessor for OfflineLostModeInfoLookupEndpoint);
    uint64_t v29 = Logger.logObject.getter();
    os_log_type_t v30 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v29, v30))
    {
      uint64_t v31 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v31 = 0;
      _os_log_impl((void *)&_mh_execute_header, v29, v30, "Sending lost mode info request", v31, 2u);
      swift_slowDealloc();
    }
    uint64_t v32 = *(void *)(v0 + 384);
    uint64_t v33 = *(void *)(v0 + 392);
    uint64_t v34 = *(void *)(v0 + 376);
    uint64_t v35 = *(void *)(v0 + 360);

    *(void *)(v0 + 200) = v35;
    *(void *)(v0 + 208) = sub_10103975C(&qword_1016676F8, 255, (void (*)(uint64_t))type metadata accessor for OfflineLostModeInfoLookupEndpoint);
    unint64_t v36 = sub_10001D958((uint64_t *)(v0 + 176));
    sub_101039C48(v34, (uint64_t)v36, (uint64_t (*)(void))type metadata accessor for OfflineLostModeInfoLookupEndpoint);
    *(void *)(v0 + 160) = v32;
    *(void *)(v0 + 168) = sub_10103975C(&qword_101666DC8, 255, (void (*)(uint64_t))type metadata accessor for OfflineLostModeInfoLookupRequest);
    uint64_t v37 = sub_10001D958((uint64_t *)(v0 + 136));
    sub_101039C48(v33, (uint64_t)v37, (uint64_t (*)(void))type metadata accessor for OfflineLostModeInfoLookupRequest);
    *(_OWORD *)(v0 + 72) = 0u;
    *(_OWORD *)(v0 + 56) = 0u;
    *(void *)(v0 + 88) = 0;
    char v53 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))((char *)&async function pointer to dispatch thunk of ServerInteractionController.send(endpoint:content:credential:)
                                                                     + async function pointer to dispatch thunk of ServerInteractionController.send(endpoint:content:credential:));
    uint64_t v38 = (void *)swift_task_alloc();
    *(void *)(v0 + 656) = v38;
    *uint64_t v38 = v0;
    v38[1] = sub_101033218;
    uint64_t v39 = *(void *)(v0 + 344);
    return v53(v39, v0 + 176, v0 + 136, v0 + 56);
  }
}

uint64_t sub_101033218()
{
  uint64_t v2 = *v1;
  uint64_t v3 = *v1 + 56;
  *(void *)(*v1 + 664) = v0;
  swift_task_dealloc();
  if (v0)
  {
    uint64_t v4 = *(void *)(v2 + 288);
    sub_10001DAB4(v3, &qword_10163A238);
    id v5 = sub_101034244;
    uint64_t v6 = v4;
  }
  else
  {
    uint64_t v7 = v2 + 176;
    uint64_t v8 = v2 + 136;
    uint64_t v9 = *(void *)(v2 + 288);
    sub_10001DAB4(v3, &qword_10163A238);
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v8);
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v7);
    id v5 = sub_101033380;
    uint64_t v6 = v9;
  }
  return _swift_task_switch(v5, v6, 0);
}

uint64_t sub_101033380()
{
  unint64_t v88 = v0;
  uint64_t v1 = (void *)Response.response.getter();
  id v2 = [v1 statusCode];

  if (v2 != (id)200)
  {
    (*(void (**)(void, void, void))(v0[41] + 16))(v0[42], v0[43], v0[40]);
    uint64_t v12 = Logger.logObject.getter();
    os_log_type_t v13 = static os_log_type_t.error.getter();
    BOOL v14 = os_log_type_enabled(v12, v13);
    uint64_t v16 = v0[41];
    uint64_t v15 = v0[42];
    uint64_t v17 = v0[40];
    if (v14)
    {
      uint64_t v18 = (uint8_t *)swift_slowAlloc();
      v87[0] = swift_slowAlloc();
      *(_DWORD *)uint64_t v18 = 136315138;
      sub_10103975C(&qword_101667700, 255, (void (*)(uint64_t))&type metadata accessor for Response);
      uint64_t v19 = dispatch thunk of CustomStringConvertible.description.getter();
      v0[32] = sub_1008FA0F0(v19, v20, v87);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      uint64_t v67 = *(void (**)(uint64_t, uint64_t))(v16 + 8);
      v67(v15, v17);
      _os_log_impl((void *)&_mh_execute_header, v12, v13, "Failed response %s", v18, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      uint64_t v67 = *(void (**)(uint64_t, uint64_t))(v16 + 8);
      v67(v0[42], v0[40]);
    }

    uint64_t v21 = v0[61];
    uint64_t v82 = v0[62];
    uint64_t v85 = v0[68];
    uint64_t v76 = v0[56];
    uint64_t v79 = v0[60];
    uint64_t v22 = v0[53];
    uint64_t v70 = v0[49];
    uint64_t v73 = v0[52];
    uint64_t v23 = v0[47];
    uint64_t v24 = v0[43];
    uint64_t v25 = v0[40];
    sub_101038A6C();
    swift_allocError();
    *uint64_t v26 = 7;
    swift_willThrow();
    swift_release();
    swift_release();
    v67(v24, v25);
    sub_101039CB0(v23, (uint64_t (*)(void))type metadata accessor for OfflineLostModeInfoLookupEndpoint);
    sub_101039CB0(v70, (uint64_t (*)(void))type metadata accessor for OfflineLostModeInfoLookupRequest);
    (*(void (**)(uint64_t, uint64_t))(v22 + 8))(v76, v73);
    (*(void (**)(uint64_t, uint64_t))(v21 + 8))(v82, v79);
    goto LABEL_8;
  }
  uint64_t v3 = v0[83];
  type metadata accessor for JSONDecoder();
  swift_allocObject();
  JSONDecoder.init()();
  uint64_t v4 = Response.body.getter();
  unint64_t v6 = v5;
  sub_10103975C(&qword_101667708, 255, (void (*)(uint64_t))type metadata accessor for OfflineLostModeInfoLookupResponse);
  dispatch thunk of JSONDecoder.decode<A>(_:from:)();
  if (v3)
  {
    uint64_t v81 = v0[62];
    uint64_t v85 = v0[68];
    uint64_t v7 = v0[61];
    uint64_t v75 = v0[56];
    uint64_t v78 = v0[60];
    uint64_t v8 = v0[53];
    uint64_t v69 = v0[49];
    uint64_t v72 = v0[52];
    uint64_t v66 = v0[47];
    uint64_t v9 = v0[43];
    uint64_t v11 = v0[40];
    uint64_t v10 = v0[41];
    sub_10001CFB8(v4, v6);
    swift_release();
    swift_release();
    swift_release();
    (*(void (**)(uint64_t, uint64_t))(v10 + 8))(v9, v11);
    sub_101039CB0(v66, (uint64_t (*)(void))type metadata accessor for OfflineLostModeInfoLookupEndpoint);
    sub_101039CB0(v69, (uint64_t (*)(void))type metadata accessor for OfflineLostModeInfoLookupRequest);
    (*(void (**)(uint64_t, uint64_t))(v8 + 8))(v75, v72);
    (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v81, v78);
LABEL_8:
    sub_101039CB0(v85, type metadata accessor for RawAccessoryMetadata);
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v27 = (uint64_t (*)(void))v0[1];
    goto LABEL_9;
  }
  sub_10001CFB8(v4, v6);
  uint64_t v29 = Logger.logObject.getter();
  uint64_t v30 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v29, (os_log_type_t)v30))
  {
    uint64_t v31 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v31 = 0;
    _os_log_impl((void *)&_mh_execute_header, v29, (os_log_type_t)v30, "Received lost mode info response", v31, 2u);
    swift_slowDealloc();
  }
  uint64_t v32 = v0[39];

  LODWORD(v32) = *(unsigned __int8 *)(v32 + 16);
  uint64_t v33 = Logger.logObject.getter();
  if (v32 != 1)
  {
    os_log_type_t v51 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v33, v51))
    {
      uint64_t v52 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v52 = 0;
      _os_log_impl((void *)&_mh_execute_header, v33, v51, "Device is not in lost mode", v52, 2u);
      swift_slowDealloc();
    }
    uint64_t v53 = v0[61];
    uint64_t v84 = v0[62];
    uint64_t v85 = v0[68];
    uint64_t v77 = v0[56];
    uint64_t v80 = v0[60];
    uint64_t v54 = v0[53];
    uint64_t v71 = v0[49];
    uint64_t v74 = v0[52];
    uint64_t v65 = v0[43];
    uint64_t v68 = v0[47];
    uint64_t v56 = v0[40];
    uint64_t v55 = v0[41];
    uint64_t v57 = v0[39];

    sub_101038A6C();
    swift_allocError();
    *uint64_t v58 = 4;
    swift_willThrow();
    swift_release();
    swift_release();
    swift_release();
    sub_101039CB0(v57, (uint64_t (*)(void))type metadata accessor for OfflineLostModeInfoLookupResponse);
    (*(void (**)(uint64_t, uint64_t))(v55 + 8))(v65, v56);
    sub_101039CB0(v68, (uint64_t (*)(void))type metadata accessor for OfflineLostModeInfoLookupEndpoint);
    sub_101039CB0(v71, (uint64_t (*)(void))type metadata accessor for OfflineLostModeInfoLookupRequest);
    (*(void (**)(uint64_t, uint64_t))(v54 + 8))(v77, v74);
    (*(void (**)(uint64_t, uint64_t))(v53 + 8))(v84, v80);
    goto LABEL_8;
  }
  os_log_type_t v34 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v33, v34))
  {
    uint64_t v35 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v35 = 0;
    _os_log_impl((void *)&_mh_execute_header, v33, v34, "Device is in lost mode, creating lost mode alert info", v35, 2u);
    swift_slowDealloc();
  }
  uint64_t v36 = v0[61];
  uint64_t v63 = v0[62];
  uint64_t v64 = v0[68];
  uint64_t v62 = v0[60];
  uint64_t v83 = v0[56];
  uint64_t v37 = v0[53];
  uint64_t v59 = v0[52];
  uint64_t v86 = v0[49];
  uint64_t v38 = v0[47];
  uint64_t v39 = v0[43];
  uint64_t v40 = v0[41];
  uint64_t v42 = (uint64_t *)v0[39];
  uint64_t v41 = v0[40];
  uint64_t v60 = v0[38];
  uint64_t v61 = v0[37];
  uint64_t v43 = v0[34];

  swift_release();
  swift_release();
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(v40 + 8))(v39, v41);
  sub_101039CB0(v38, (uint64_t (*)(void))type metadata accessor for OfflineLostModeInfoLookupEndpoint);
  sub_101039CB0(v86, (uint64_t (*)(void))type metadata accessor for OfflineLostModeInfoLookupRequest);
  (*(void (**)(uint64_t, uint64_t))(v37 + 8))(v83, v59);
  (*(void (**)(uint64_t, uint64_t))(v36 + 8))(v63, v62);
  sub_101039CB0(v64, type metadata accessor for RawAccessoryMetadata);
  sub_10001D074((uint64_t)v42 + *(int *)(v60 + 36), v61, &qword_101649E40);
  uint64_t v45 = v42[3];
  uint64_t v44 = v42[4];
  uint64_t v47 = *v42;
  uint64_t v46 = v42[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  sub_101039CB0((uint64_t)v42, (uint64_t (*)(void))type metadata accessor for OfflineLostModeInfoLookupResponse);
  sub_10001D608(v61, v43, &qword_101649E40);
  uint64_t v48 = (int *)type metadata accessor for LostModeAlertInfo();
  uint64_t v49 = (void *)(v43 + v48[5]);
  *uint64_t v49 = v45;
  v49[1] = v44;
  uint64_t v50 = (void *)(v43 + v48[6]);
  *uint64_t v50 = v47;
  v50[1] = v46;
  *(unsigned char *)(v43 + v48[7]) = 1;
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v27 = (uint64_t (*)(void))v0[1];
LABEL_9:
  return v27();
}

uint64_t sub_101033E08()
{
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_101033F50()
{
  sub_101039CB0(*(void *)(v0 + 544), type metadata accessor for RawAccessoryMetadata);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_1010340B4()
{
  uint64_t v1 = v0[68];
  uint64_t v3 = v0[61];
  uint64_t v2 = v0[62];
  uint64_t v4 = v0[60];
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v2, v4);
  sub_101039CB0(v1, type metadata accessor for RawAccessoryMetadata);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  unint64_t v5 = (uint64_t (*)(void))v0[1];
  return v5();
}

uint64_t sub_101034244()
{
  uint64_t v11 = v0[68];
  uint64_t v1 = v0[61];
  uint64_t v2 = v0[62];
  uint64_t v3 = v0[60];
  uint64_t v4 = v0[56];
  uint64_t v6 = v0[52];
  uint64_t v5 = v0[53];
  uint64_t v7 = v0[49];
  uint64_t v8 = v0[47];
  swift_release();
  swift_release();
  sub_101039CB0(v8, (uint64_t (*)(void))type metadata accessor for OfflineLostModeInfoLookupEndpoint);
  sub_101039CB0(v7, (uint64_t (*)(void))type metadata accessor for OfflineLostModeInfoLookupRequest);
  (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v4, v6);
  (*(void (**)(uint64_t, uint64_t))(v1 + 8))(v2, v3);
  sub_101039CB0(v11, type metadata accessor for RawAccessoryMetadata);
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)(v0 + 17));
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)(v0 + 22));
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v9 = (uint64_t (*)(void))v0[1];
  return v9();
}

uint64_t sub_101034460(uint64_t a1)
{
  v2[4] = a1;
  v2[5] = v1;
  type metadata accessor for FMRemoteUILauncher.AlertType(0);
  v2[6] = swift_task_alloc();
  return _swift_task_switch(sub_1010344F0, v1, 0);
}

uint64_t sub_1010344F0()
{
  uint64_t receiver = (uint64_t)v0[3].receiver;
  uint64_t v2 = (uint64_t)v0[2].receiver;
  sub_101038D98();
  sub_101039C48(v2, receiver, (uint64_t (*)(void))type metadata accessor for LostModeAlertInfo);
  uint64_t v4 = sub_10103975C(&qword_1016676E8, v3, (void (*)(uint64_t))type metadata accessor for LocalFindableLostModeDetectionService);
  type metadata accessor for FMRemoteUILauncher(0);
  uint64_t v5 = swift_allocObject();
  v0[3].super_class = (Class)v5;
  swift_retain();
  swift_defaultActor_initialize();
  *(void *)(v5 + OBJC_IVAR____TtC12searchpartyd18FMRemoteUILauncher_alertHandle) = 0;
  uint64_t v6 = OBJC_IVAR____TtC12searchpartyd18FMRemoteUILauncher_logger;
  if (qword_1016371D0 != -1) {
    swift_once();
  }
  uint64_t v7 = (uint64_t)v0[3].receiver;
  uint64_t v8 = type metadata accessor for Logger();
  uint64_t v9 = sub_100010324(v8, (uint64_t)qword_10170EED8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 16))(v5 + v6, v9, v8);
  sub_101039C48(v7, v5 + OBJC_IVAR____TtC12searchpartyd18FMRemoteUILauncher_alertType, type metadata accessor for FMRemoteUILauncher.AlertType);
  uint64_t v10 = (objc_class *)type metadata accessor for RemoteHandleObserverDelegateTrampoline();
  uint64_t v11 = (char *)objc_allocWithZone(v10);
  *(void *)&v11[OBJC_IVAR____TtC12searchpartydP33_B6591815384A8DEB8885452F1FDF33D538RemoteHandleObserverDelegateTrampoline_delegate
                + 8] = 0;
  *(void *)(swift_unknownObjectWeakInit() + 8) = v4;
  swift_unknownObjectWeakAssign();
  v0[1].uint64_t receiver = v11;
  v0[1].super_class = v10;
  *(void *)(v5 + OBJC_IVAR____TtC12searchpartyd18FMRemoteUILauncher_alertHandleDelegateTrampoline) = [super init];
  return _swift_task_switch(sub_101034710, v5, 0);
}

uint64_t sub_101034710()
{
  uint64_t v1 = *(void *)(v0 + 40);
  uint64_t v2 = *(void *)(v0 + 48);
  swift_release();
  sub_101039CB0(v2, type metadata accessor for FMRemoteUILauncher.AlertType);
  return _swift_task_switch(sub_101034798, v1, 0);
}

uint64_t sub_101034798()
{
  uint64_t v1 = v0[5];
  *(void *)(v1 + 128) = v0[7];
  swift_release();
  uint64_t v2 = *(void *)(v1 + 128);
  v0[8] = v2;
  if (v2)
  {
    swift_retain();
    return _swift_task_switch(sub_10103485C, v2, 0);
  }
  else
  {
    swift_task_dealloc();
    uint64_t v3 = (uint64_t (*)(void))v0[1];
    return v3();
  }
}

uint64_t sub_10103485C()
{
  sub_100F2946C();
  swift_release();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_1010348CC(uint64_t a1)
{
  v2[15] = a1;
  v2[16] = v1;
  v2[17] = *v1;
  uint64_t v3 = type metadata accessor for UUID();
  v2[18] = v3;
  uint64_t v4 = *(void *)(v3 - 8);
  v2[19] = v4;
  v2[20] = *(void *)(v4 + 64);
  v2[21] = swift_task_alloc();
  return _swift_task_switch(sub_1010349BC, v1, 0);
}

uint64_t sub_1010349BC()
{
  if (qword_101637380 != -1) {
    swift_once();
  }
  uint64_t v1 = type metadata accessor for Logger();
  *(void *)(v0 + 176) = sub_100010324(v1, (uint64_t)qword_101667438);
  uint64_t v2 = Logger.logObject.getter();
  os_log_type_t v3 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v2, v3))
  {
    uint64_t v4 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v4 = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, v3, "This pencil belongs to the owner, disabling lost mode automatically", v4, 2u);
    swift_slowDealloc();
  }

  uint64_t v5 = qword_1016375E8;
  swift_retain();
  if (v5 != -1) {
    swift_once();
  }
  swift_beginAccess();
  uint64_t result = sub_10001D074((uint64_t)&xmmword_10166E8F0, v0 + 56, (uint64_t *)&unk_101638D30);
  if (*(void *)(v0 + 80))
  {
    sub_10001CEB0((long long *)(v0 + 56), v0 + 16);
    swift_release();
    sub_10001CD44((void *)(v0 + 16), *(void *)(v0 + 40));
    uint64_t v8 = (uint64_t (__cdecl *)())((char *)&dword_101639108 + dword_101639108);
    uint64_t v7 = (void *)swift_task_alloc();
    *(void *)(v0 + 184) = v7;
    *uint64_t v7 = v0;
    v7[1] = sub_101034BD0;
    return v8();
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_101034BD0(uint64_t a1)
{
  uint64_t v2 = *(void *)(*(void *)v1 + 128);
  *(void *)(*(void *)v1 + 192) = a1;
  swift_task_dealloc();
  return _swift_task_switch(sub_101034CE8, v2, 0);
}

uint64_t sub_101034CE8()
{
  uint64_t v1 = (uint64_t)(v0 + 2);
  uint64_t v2 = v0[24];
  if (v2)
  {
    uint64_t v4 = v0[20];
    uint64_t v3 = v0[21];
    uint64_t v5 = v0[18];
    uint64_t v6 = v0[19];
    uint64_t v7 = v0[17];
    uint64_t v8 = v0[15];
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v1);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v6 + 16))(v3, v8, v5);
    unint64_t v9 = (*(unsigned __int8 *)(v6 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80);
    uint64_t v10 = swift_allocObject();
    v0[25] = v10;
    *(void *)(v10 + 16) = v2;
    (*(void (**)(unint64_t, uint64_t, uint64_t))(v6 + 32))(v10 + v9, v3, v5);
    *(void *)(v10 + ((v4 + v9 + 7) & 0xFFFFFFFFFFFFFFF8)) = v7;
    swift_retain();
    uint64_t v11 = (void *)swift_task_alloc();
    v0[26] = v11;
    *uint64_t v11 = v0;
    v11[1] = sub_101034F50;
    return unsafeBlocking<A>(_:)(v11, sub_101038B98, v10, (char *)&type metadata for () + 8);
  }
  else
  {
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v1);
    uint64_t v12 = Logger.logObject.getter();
    os_log_type_t v13 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v12, v13))
    {
      BOOL v14 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)BOOL v14 = 0;
      _os_log_impl((void *)&_mh_execute_header, v12, v13, "Unable to get beacon manager service", v14, 2u);
      swift_slowDealloc();
    }

    sub_101038A6C();
    swift_allocError();
    *uint64_t v15 = 1;
    swift_willThrow();
    swift_task_dealloc();
    uint64_t v16 = (uint64_t (*)(void))v0[1];
    return v16();
  }
}

uint64_t sub_101034F50()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 128);
  swift_task_dealloc();
  swift_release();
  return _swift_task_switch(sub_10103507C, v1, 0);
}

uint64_t sub_10103507C()
{
  swift_release();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_1010350EC(uint64_t a1, uint64_t a2)
{
  uint64_t v34 = a1;
  uint64_t v3 = sub_10000588C(&qword_10163BB70);
  __chkstk_darwin(v3 - 8);
  uint64_t v5 = (char *)&v28 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = type metadata accessor for LostModeRecord();
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = *(void *)(v7 + 64);
  uint64_t v9 = __chkstk_darwin(v6);
  uint64_t v32 = (uint64_t)&v28 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9);
  uint64_t v33 = (uint64_t)&v28 - v10;
  static os_log_type_t.default.getter();
  if (qword_1016372E0 != -1) {
    swift_once();
  }
  uint64_t v31 = sub_10000588C((uint64_t *)&unk_10163AD00);
  uint64_t v11 = swift_allocObject();
  long long v30 = xmmword_101342130;
  *(_OWORD *)(v11 + 16) = xmmword_101342130;
  uint64_t v12 = UUID.uuidString.getter();
  uint64_t v14 = v13;
  *(void *)(v11 + 56) = &type metadata for String;
  unint64_t v29 = sub_10000B4CC();
  *(void *)(v11 + 64) = v29;
  *(void *)(v11 + 32) = v12;
  *(void *)(v11 + 40) = v14;
  os_log(_:dso:log:_:_:)();
  swift_bridgeObjectRelease();
  uint64_t v15 = v34;
  uint64_t v16 = sub_100B6D358(a2);
  if (v16[2])
  {
    sub_101039C48((uint64_t)v16 + ((*(unsigned __int8 *)(v7 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80)), (uint64_t)v5, (uint64_t (*)(void))type metadata accessor for LostModeRecord);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v7 + 56))(v5, 0, 1, v6);
  }
  else
  {
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v7 + 56))(v5, 1, 1, v6);
  }
  swift_bridgeObjectRelease();
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v7 + 48))(v5, 1, v6) == 1)
  {
    sub_10001DAB4((uint64_t)v5, &qword_10163BB70);
    static os_log_type_t.error.getter();
    uint64_t v17 = swift_allocObject();
    *(_OWORD *)(v17 + 16) = v30;
    uint64_t v18 = UUID.uuidString.getter();
    unint64_t v19 = v29;
    *(void *)(v17 + 56) = &type metadata for String;
    *(void *)(v17 + 64) = v19;
    *(void *)(v17 + 32) = v18;
    *(void *)(v17 + 40) = v20;
    os_log(_:dso:log:_:_:)();
    swift_bridgeObjectRelease();
    sub_1008EC140();
    uint64_t v21 = swift_allocError();
    *uint64_t v22 = 0;
    sub_1010384C8(v21);
    return swift_errorRelease();
  }
  else
  {
    uint64_t v24 = v33;
    sub_101039BE0((uint64_t)v5, v33, (uint64_t (*)(void))type metadata accessor for LostModeRecord);
    uint64_t v25 = v32;
    sub_101039C48(v24, v32, (uint64_t (*)(void))type metadata accessor for LostModeRecord);
    unint64_t v26 = (*(unsigned __int8 *)(v7 + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80);
    uint64_t v27 = (void *)swift_allocObject();
    _OWORD v27[2] = sub_1010384C8;
    v27[3] = 0;
    v27[4] = v15;
    sub_101039BE0(v25, (uint64_t)v27 + v26, (uint64_t (*)(void))type metadata accessor for LostModeRecord);
    swift_retain();
    sub_1008E8548(v24, 0, (void (*)(void))sub_1008F4A7C, (uint64_t)v27);
    swift_release();
    return sub_101039CB0(v24, (uint64_t (*)(void))type metadata accessor for LostModeRecord);
  }
}

uint64_t sub_10103554C()
{
  uint64_t v0 = sub_10000588C((uint64_t *)&unk_10163AC90);
  __chkstk_darwin(v0 - 8);
  uint64_t v2 = (char *)&v12 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1010369DC(0xD000000000000015, 0x800000010141F210);
  if (qword_101637380 != -1) {
    swift_once();
  }
  uint64_t v3 = type metadata accessor for Logger();
  sub_100010324(v3, (uint64_t)qword_101667438);
  uint64_t v4 = Logger.logObject.getter();
  os_log_type_t v5 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v4, v5))
  {
    uint64_t v6 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v6 = 0;
    _os_log_impl((void *)&_mh_execute_header, v4, v5, "Resetting throttling values", v6, 2u);
    swift_slowDealloc();
  }

  id v7 = [self standardUserDefaults];
  Class isa = UInt._bridgeToObjectiveC()().super.super.isa;
  NSString v9 = String._bridgeToObjectiveC()();
  [v7 setObject:isa forKey:v9];

  uint64_t v10 = type metadata accessor for Date();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 56))(v2, 1, 1, v10);
  return sub_1010388DC((uint64_t)v2);
}

uint64_t sub_101035754()
{
  uint64_t v123 = type metadata accessor for DateInterval();
  uint64_t v121 = *(void *)(v123 - 8);
  uint64_t v1 = __chkstk_darwin(v123);
  v116 = (char *)&v107 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v1);
  v122 = (char *)&v107 - v3;
  uint64_t v4 = sub_10000588C((uint64_t *)&unk_10163AC90);
  uint64_t v5 = __chkstk_darwin(v4 - 8);
  v113 = (char *)&v107 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = __chkstk_darwin(v5);
  NSString v9 = (char *)&v107 - v8;
  uint64_t v10 = __chkstk_darwin(v7);
  uint64_t v12 = (char *)&v107 - v11;
  __chkstk_darwin(v10);
  uint64_t v14 = (char *)&v107 - v13;
  uint64_t v15 = type metadata accessor for Date();
  uint64_t v16 = *(void *)(v15 - 8);
  uint64_t v17 = __chkstk_darwin(v15);
  v117 = (char *)&v107 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v19 = __chkstk_darwin(v17);
  v115 = (char *)&v107 - v20;
  uint64_t v21 = __chkstk_darwin(v19);
  unsigned int v114 = (char *)&v107 - v22;
  uint64_t v23 = __chkstk_darwin(v21);
  unint64_t v110 = (char *)&v107 - v24;
  uint64_t v25 = __chkstk_darwin(v23);
  v112 = (char *)&v107 - v26;
  uint64_t v27 = __chkstk_darwin(v25);
  unint64_t v29 = (char *)&v107 - v28;
  uint64_t v30 = __chkstk_darwin(v27);
  uint64_t v32 = (char *)&v107 - v31;
  uint64_t v33 = __chkstk_darwin(v30);
  uint64_t v35 = (char *)&v107 - v34;
  __chkstk_darwin(v33);
  v124 = (char *)&v107 - v36;
  uint64_t v111 = v0;
  sub_1010369DC(0xD000000000000011, 0x800000010141F160);
  sub_101026978((uint64_t)v14);
  static Date.now.getter();
  v119 = v14;
  sub_10001D074((uint64_t)v14, (uint64_t)v12, (uint64_t *)&unk_10163AC90);
  uint64_t v37 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v16 + 48);
  int v38 = v37(v12, 1, v15);
  v125 = v35;
  uint64_t v118 = v16;
  if (v38 == 1)
  {
    sub_10001DAB4((uint64_t)v12, (uint64_t *)&unk_10163AC90);
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v16 + 32))(v32, v12, v15);
    sub_10103975C((unint64_t *)&qword_1016605E0, 255, (void (*)(uint64_t))&type metadata accessor for Date);
    if ((dispatch thunk of static Comparable.< infix(_:_:)() & 1) == 0)
    {
      uint64_t v42 = *(void (**)(char *, char *, uint64_t))(v16 + 16);
      v120 = (void (*)(char *, uint64_t))((v16 + 16) & 0xFFFFFFFFFFFFLL | 0xE3BA000000000000);
      v42(v124, v32, v15);
      if (qword_101637380 != -1) {
        swift_once();
      }
      uint64_t v50 = type metadata accessor for Logger();
      sub_100010324(v50, (uint64_t)qword_101667438);
      v42(v29, v32, v15);
      os_log_type_t v51 = Logger.logObject.getter();
      os_log_type_t v52 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v51, v52))
      {
        uint64_t v53 = (uint8_t *)swift_slowAlloc();
        v127[0] = swift_slowAlloc();
        *(_DWORD *)uint64_t v53 = 136446210;
        v113 = (char *)(v53 + 4);
        sub_10103975C((unint64_t *)&qword_101638DA0, 255, (void (*)(uint64_t))&type metadata accessor for Date);
        uint64_t v54 = dispatch thunk of CustomStringConvertible.description.getter();
        v128[0] = sub_1008FA0F0(v54, v55, v127);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        uint64_t v56 = *(void (**)(char *, uint64_t))(v118 + 8);
        v56(v29, v15);
        _os_log_impl((void *)&_mh_execute_header, v51, v52, "Fetched a saved dateOfFirstLookup %{public}s", v53, 0xCu);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();

        v56(v32, v15);
      }
      else
      {

        uint64_t v70 = *(void (**)(char *, uint64_t))(v118 + 8);
        v70(v29, v15);
        v70(v32, v15);
      }
      uint64_t v57 = v122;
      uint64_t v68 = v123;
      unint64_t v65 = (unint64_t)v120;
      uint64_t v69 = v121;
      uint64_t v59 = v124;
      uint64_t v66 = v125;
      goto LABEL_26;
    }
    (*(void (**)(char *, uint64_t))(v16 + 8))(v32, v15);
  }
  sub_10001D074((uint64_t)v119, (uint64_t)v9, (uint64_t *)&unk_10163AC90);
  if (v37(v9, 1, v15) == 1)
  {
    sub_10001DAB4((uint64_t)v9, (uint64_t *)&unk_10163AC90);
LABEL_17:
    uint64_t v57 = v122;
    uint64_t v58 = v123;
    uint64_t v59 = v124;
    if (qword_101637380 != -1) {
      swift_once();
    }
    uint64_t v60 = type metadata accessor for Logger();
    sub_100010324(v60, (uint64_t)qword_101667438);
    uint64_t v61 = Logger.logObject.getter();
    os_log_type_t v62 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v61, v62))
    {
      uint64_t v63 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v63 = 0;
      _os_log_impl((void *)&_mh_execute_header, v61, v62, "Saved date is nil, so setting it as the current date", v63, 2u);
      swift_slowDealloc();
    }

    uint64_t v64 = v16;
    uint64_t v42 = *(void (**)(char *, char *, uint64_t))(v16 + 16);
    unint64_t v65 = (v16 + 16) & 0xFFFFFFFFFFFFLL | 0xE3BA000000000000;
    uint64_t v66 = v125;
    v42(v59, v125, v15);
    uint64_t v67 = (uint64_t)v113;
    v42(v113, v66, v15);
    (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v64 + 56))(v67, 0, 1, v15);
    sub_1010388DC(v67);
    uint64_t v68 = v58;
    uint64_t v69 = v121;
    goto LABEL_26;
  }
  uint64_t v39 = v112;
  (*(void (**)(char *, char *, uint64_t))(v16 + 32))(v112, v9, v15);
  if ((static Date.> infix(_:_:)() & 1) == 0)
  {
    (*(void (**)(char *, uint64_t))(v16 + 8))(v39, v15);
    goto LABEL_17;
  }
  if (qword_101637380 != -1) {
    swift_once();
  }
  uint64_t v40 = type metadata accessor for Logger();
  sub_100010324(v40, (uint64_t)qword_101667438);
  uint64_t v41 = v16;
  uint64_t v42 = *(void (**)(char *, char *, uint64_t))(v16 + 16);
  v120 = (void (*)(char *, uint64_t))((v16 + 16) & 0xFFFFFFFFFFFFLL | 0xE3BA000000000000);
  uint64_t v43 = v110;
  v42(v110, v39, v15);
  uint64_t v44 = Logger.logObject.getter();
  os_log_type_t v45 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v44, v45))
  {
    uint64_t v46 = (uint8_t *)swift_slowAlloc();
    uint64_t v109 = swift_slowAlloc();
    v127[0] = v109;
    uint64_t v108 = v46;
    *(_DWORD *)uint64_t v46 = 136446210;
    sub_10103975C((unint64_t *)&qword_101638DA0, 255, (void (*)(uint64_t))&type metadata accessor for Date);
    uint64_t v47 = dispatch thunk of CustomStringConvertible.description.getter();
    v128[0] = sub_1008FA0F0(v47, v48, v127);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    uint64_t v49 = *(void (**)(char *, uint64_t))(v41 + 8);
    v49(v43, v15);
    _os_log_impl((void *)&_mh_execute_header, v44, v45, "dateOfFirstLookup %{public}s is greater than current date for some reason, so setting it to current date and resetting throttling avlues", v108, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    uint64_t v49 = *(void (**)(char *, uint64_t))(v41 + 8);
    v49(v43, v15);
  }

  uint64_t v57 = v122;
  uint64_t v66 = v125;
  sub_10103554C();
  uint64_t v59 = v124;
  v42(v124, v66, v15);
  uint64_t v71 = (uint64_t)v113;
  v42(v113, v66, v15);
  (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v41 + 56))(v71, 0, 1, v15);
  sub_1010388DC(v71);
  v49(v112, v15);
  uint64_t v68 = v123;
  unint64_t v65 = (unint64_t)v120;
  uint64_t v69 = v121;
LABEL_26:
  v42(v114, v59, v15);
  v120 = (void (*)(char *, uint64_t))v65;
  v42(v115, v66, v15);
  DateInterval.init(start:end:)();
  if (qword_101637380 != -1) {
    swift_once();
  }
  uint64_t v72 = type metadata accessor for Logger();
  sub_100010324(v72, (uint64_t)qword_101667438);
  uint64_t v73 = v116;
  (*(void (**)(char *, char *, uint64_t))(v69 + 16))(v116, v57, v68);
  uint64_t v74 = Logger.logObject.getter();
  os_log_type_t v75 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v74, v75))
  {
    uint64_t v76 = (uint8_t *)swift_slowAlloc();
    uint64_t v77 = swift_slowAlloc();
    v115 = (char *)v15;
    v127[0] = v77;
    *(_DWORD *)uint64_t v76 = 136315138;
    sub_10103975C(&qword_10163FF58, 255, (void (*)(uint64_t))&type metadata accessor for DateInterval);
    uint64_t v78 = dispatch thunk of CustomStringConvertible.description.getter();
    v128[0] = sub_1008FA0F0(v78, v79, v127);
    uint64_t v68 = v123;
    uint64_t v80 = v121;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    uint64_t v15 = (uint64_t)v115;
    v116 = *(char **)(v80 + 8);
    ((void (*)(char *, uint64_t))v116)(v73, v68);
    _os_log_impl((void *)&_mh_execute_header, v74, v75, "Date interval is %s", v76, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    v116 = *(char **)(v69 + 8);
    ((void (*)(char *, uint64_t))v116)(v73, v68);
  }

  uint64_t v81 = v125;
  if (qword_101636CD8 != -1) {
    swift_once();
  }
  OS_dispatch_queue.sync<A>(execute:)();
  v115 = 0;
  sub_1010AB70C(v127[0]);
  double v83 = v82;
  swift_bridgeObjectRelease();
  uint64_t v84 = v117;
  v42(v117, v81, v15);
  uint64_t v85 = Logger.logObject.getter();
  os_log_type_t v86 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v85, v86))
  {
    uint64_t v87 = swift_slowAlloc();
    v128[0] = swift_slowAlloc();
    *(_DWORD *)uint64_t v87 = 136315650;
    sub_10103975C((unint64_t *)&qword_101638DA0, 255, (void (*)(uint64_t))&type metadata accessor for Date);
    uint64_t v88 = dispatch thunk of CustomStringConvertible.description.getter();
    v127[0] = sub_1008FA0F0(v88, v89, v128);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    v120 = *(void (**)(char *, uint64_t))(v118 + 8);
    v120(v84, v15);
    *(_WORD *)(v87 + 12) = 2080;
    swift_beginAccess();
    uint64_t v90 = dispatch thunk of CustomStringConvertible.description.getter();
    uint64_t v126 = sub_1008FA0F0(v90, v91, v128);
    uint64_t v68 = v123;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    *(_WORD *)(v87 + 22) = 2048;
    uint64_t v126 = *(void *)&v83;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl((void *)&_mh_execute_header, v85, v86, "Comparing current date %s with date of first lookup %s using a time interval %f", (uint8_t *)v87, 0x20u);
    swift_arrayDestroy();
    swift_slowDealloc();
    uint64_t v81 = v125;
    swift_slowDealloc();
  }
  else
  {
    v120 = *(void (**)(char *, uint64_t))(v118 + 8);
    v120(v84, v15);
  }

  uint64_t v92 = v122;
  DateInterval.duration.getter();
  if (v93 >= v83)
  {
    ((void (*)(char *, uint64_t))v116)(v92, v68);
    Swift::OpaquePointer_optional v98 = v120;
    v120(v81, v15);
    sub_10001DAB4((uint64_t)v119, (uint64_t *)&unk_10163AC90);
    v98(v124, v15);
    return 2;
  }
  else
  {
    OS_dispatch_queue.sync<A>(execute:)();
    unint64_t v94 = sub_1010AB6F8(v128[0]);
    swift_bridgeObjectRelease();
    uint64_t v95 = sub_1010387B0();
    if (v96)
    {
      id v100 = [self standardUserDefaults];
      Class isa = UInt._bridgeToObjectiveC()().super.super.isa;
      NSString v102 = String._bridgeToObjectiveC()();
      [v100 setObject:isa forKey:v102];

      uint64_t v81 = v125;
      unint64_t v97 = 0;
    }
    else
    {
      unint64_t v97 = v95;
    }
    os_log_type_t v103 = Logger.logObject.getter();
    os_log_type_t v104 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v103, v104))
    {
      uint64_t v105 = swift_slowAlloc();
      *(_DWORD *)uint64_t v105 = 134218240;
      v128[0] = v97;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v105 + 12) = 2048;
      v128[0] = v94;
      uint64_t v92 = v122;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      _os_log_impl((void *)&_mh_execute_header, v103, v104, "Comparing current number of alerts %lu with max alerts %lu", (uint8_t *)v105, 0x16u);
      uint64_t v81 = v125;
      swift_slowDealloc();
    }

    ((void (*)(char *, uint64_t))v116)(v92, v68);
    v106 = v120;
    v120(v81, v15);
    sub_10001DAB4((uint64_t)v119, (uint64_t *)&unk_10163AC90);
    v106(v124, v15);
    return v97 < v94;
  }
}

void sub_1010369DC(uint64_t a1, unint64_t a2)
{
  uint64_t v30 = a1;
  unint64_t v31 = a2;
  uint64_t v2 = type metadata accessor for UUID();
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  unint64_t v29 = (char *)&v28 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = sub_10000588C((uint64_t *)&unk_10166EAF0);
  uint64_t v6 = v5 - 8;
  __chkstk_darwin(v5);
  uint64_t v8 = (char *)&v28 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = sub_10000588C(&qword_101638CF0);
  uint64_t v10 = __chkstk_darwin(v9 - 8);
  uint64_t v12 = (char *)&v28 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = __chkstk_darwin(v10);
  uint64_t v15 = (char *)&v28 - v14;
  __chkstk_darwin(v13);
  uint64_t v17 = (char *)&v28 - v16;
  WorkItemQueue.id.getter();
  (*(void (**)(char *, void, uint64_t, uint64_t))(v3 + 56))(v17, 0, 1, v2);
  type metadata accessor for WorkItemQueue();
  static WorkItemQueue.currentWorkItemQueueIdentifier.getter();
  uint64_t v18 = (uint64_t)&v8[*(int *)(v6 + 56)];
  sub_10001D074((uint64_t)v17, (uint64_t)v8, &qword_101638CF0);
  sub_10001D074((uint64_t)v15, v18, &qword_101638CF0);
  uint64_t v19 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v3 + 48);
  if (v19((uint64_t)v8, 1, v2) == 1)
  {
    sub_10001DAB4((uint64_t)v15, &qword_101638CF0);
    sub_10001DAB4((uint64_t)v17, &qword_101638CF0);
    if (v19(v18, 1, v2) == 1)
    {
      sub_10001DAB4((uint64_t)v8, &qword_101638CF0);
      return;
    }
  }
  else
  {
    sub_10001D074((uint64_t)v8, (uint64_t)v12, &qword_101638CF0);
    if (v19(v18, 1, v2) != 1)
    {
      uint64_t v25 = v29;
      (*(void (**)(char *, uint64_t, uint64_t))(v3 + 32))(v29, v18, v2);
      sub_10103975C((unint64_t *)&qword_10163B8F0, 255, (void (*)(uint64_t))&type metadata accessor for UUID);
      char v26 = dispatch thunk of static Equatable.== infix(_:_:)();
      uint64_t v27 = *(void (**)(char *, uint64_t))(v3 + 8);
      v27(v25, v2);
      sub_10001DAB4((uint64_t)v15, &qword_101638CF0);
      sub_10001DAB4((uint64_t)v17, &qword_101638CF0);
      v27(v12, v2);
      sub_10001DAB4((uint64_t)v8, &qword_101638CF0);
      if (v26) {
        return;
      }
      goto LABEL_7;
    }
    sub_10001DAB4((uint64_t)v15, &qword_101638CF0);
    sub_10001DAB4((uint64_t)v17, &qword_101638CF0);
    (*(void (**)(char *, uint64_t))(v3 + 8))(v12, v2);
  }
  sub_10001DAB4((uint64_t)v8, (uint64_t *)&unk_10166EAF0);
LABEL_7:
  if (qword_101637388 != -1) {
    swift_once();
  }
  uint64_t v20 = type metadata accessor for Logger();
  sub_100010324(v20, (uint64_t)qword_10170F0F8);
  unint64_t v21 = v31;
  swift_bridgeObjectRetain_n();
  uint64_t v22 = Logger.logObject.getter();
  os_log_type_t v23 = static os_log_type_t.fault.getter();
  if (os_log_type_enabled(v22, v23))
  {
    uint64_t v24 = (uint8_t *)swift_slowAlloc();
    uint64_t v33 = swift_slowAlloc();
    *(_DWORD *)uint64_t v24 = 136315138;
    swift_bridgeObjectRetain();
    uint64_t v32 = sub_1008FA0F0(v30, v21, &v33);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    _os_log_impl((void *)&_mh_execute_header, v22, v23, "\"%s\" is required to be called from a WorkItemQueue context!", v24, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {

    swift_bridgeObjectRelease_n();
  }
}

uint64_t sub_101036F14()
{
  *(void *)(v1 + 16) = v0;
  return _swift_task_switch(sub_101036F34, v0, 0);
}

uint64_t sub_101036F34()
{
  if (qword_101637380 != -1) {
    swift_once();
  }
  uint64_t v1 = type metadata accessor for Logger();
  sub_100010324(v1, (uint64_t)qword_101667438);
  uint64_t v2 = Logger.logObject.getter();
  os_log_type_t v3 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v2, v3))
  {
    uint64_t v4 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v4 = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, v3, "Find My onboarding is being presented, setting onboardingIsShowing to true", v4, 2u);
    swift_slowDealloc();
  }
  uint64_t v5 = *(void *)(v0 + 16);

  *(unsigned char *)(v5 + 146) = 1;
  uint64_t v6 = *(uint64_t (**)(void))(v0 + 8);
  return v6();
}

uint64_t sub_1010371C0(const void *a1, uint64_t a2)
{
  v2[2] = a2;
  v2[3] = _Block_copy(a1);
  swift_retain();
  uint64_t v4 = (void *)swift_task_alloc();
  v2[4] = v4;
  *uint64_t v4 = v2;
  v4[1] = sub_10103A6EC;
  v4[2] = a2;
  return _swift_task_switch(sub_101036F34, a2, 0);
}

uint64_t sub_101037280()
{
  *(void *)(v1 + 16) = v0;
  return _swift_task_switch(sub_1010372A0, v0, 0);
}

uint64_t sub_1010372A0()
{
  if (qword_101637380 != -1) {
    swift_once();
  }
  uint64_t v1 = type metadata accessor for Logger();
  sub_100010324(v1, (uint64_t)qword_101667438);
  uint64_t v2 = Logger.logObject.getter();
  os_log_type_t v3 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v2, v3))
  {
    uint64_t v4 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v4 = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, v3, "Find My onboarding is no longer presented, setting onboardingIsShowing to false", v4, 2u);
    swift_slowDealloc();
  }
  uint64_t v5 = *(void *)(v0 + 16);

  *(unsigned char *)(v5 + 146) = 0;
  uint64_t v6 = *(uint64_t (**)(void))(v0 + 8);
  return v6();
}

uint64_t sub_101037528(const void *a1, uint64_t a2)
{
  v2[2] = a2;
  v2[3] = _Block_copy(a1);
  swift_retain();
  uint64_t v4 = (void *)swift_task_alloc();
  v2[4] = v4;
  *uint64_t v4 = v2;
  v4[1] = sub_10103A6EC;
  v4[2] = a2;
  return _swift_task_switch(sub_1010372A0, a2, 0);
}

uint64_t sub_1010375E8()
{
  *(void *)(v1 + 16) = v0;
  return _swift_task_switch(sub_101037608, v0, 0);
}

uint64_t sub_101037608()
{
  if (qword_101637380 != -1) {
    swift_once();
  }
  uint64_t v1 = type metadata accessor for Logger();
  sub_100010324(v1, (uint64_t)qword_101667438);
  uint64_t v2 = Logger.logObject.getter();
  os_log_type_t v3 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v2, v3))
  {
    uint64_t v4 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v4 = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, v3, "PNP onboarding is being presented, setting onboardingIsShowing to true", v4, 2u);
    swift_slowDealloc();
  }
  uint64_t v5 = *(void *)(v0 + 16);

  *(unsigned char *)(v5 + 145) = 1;
  uint64_t v6 = *(uint64_t (**)(void))(v0 + 8);
  return v6();
}

uint64_t sub_101037894(const void *a1, uint64_t a2)
{
  v2[2] = a2;
  v2[3] = _Block_copy(a1);
  swift_retain();
  uint64_t v4 = (void *)swift_task_alloc();
  v2[4] = v4;
  *uint64_t v4 = v2;
  v4[1] = sub_10103A6EC;
  v4[2] = a2;
  return _swift_task_switch(sub_101037608, a2, 0);
}

uint64_t sub_101037954()
{
  *(void *)(v1 + 16) = v0;
  return _swift_task_switch(sub_101037974, v0, 0);
}

uint64_t sub_101037974()
{
  if (qword_101637380 != -1) {
    swift_once();
  }
  uint64_t v1 = type metadata accessor for Logger();
  sub_100010324(v1, (uint64_t)qword_101667438);
  uint64_t v2 = Logger.logObject.getter();
  os_log_type_t v3 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v2, v3))
  {
    uint64_t v4 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v4 = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, v3, "PNP onboarding is no longer presented, setting onboardingIsShowing to false", v4, 2u);
    swift_slowDealloc();
  }
  uint64_t v5 = *(void *)(v0 + 16);

  *(unsigned char *)(v5 + 145) = 0;
  uint64_t v6 = *(uint64_t (**)(void))(v0 + 8);
  return v6();
}

uint64_t sub_101037BFC(const void *a1, uint64_t a2)
{
  v2[2] = a2;
  v2[3] = _Block_copy(a1);
  swift_retain();
  uint64_t v4 = (void *)swift_task_alloc();
  v2[4] = v4;
  *uint64_t v4 = v2;
  v4[1] = sub_101037CBC;
  v4[2] = a2;
  return _swift_task_switch(sub_101037974, a2, 0);
}

uint64_t sub_101037CBC()
{
  uint64_t v1 = *(void (***)(void))(*v0 + 24);
  uint64_t v4 = *v0;
  swift_task_dealloc();
  swift_release();
  v1[2](v1);
  _Block_release(v1);
  uint64_t v2 = *(uint64_t (**)(void))(v4 + 8);
  return v2();
}

unint64_t sub_101037DF8(char a1)
{
  unint64_t result = 0xD00000000000001FLL;
  switch(a1)
  {
    case 1:
      unint64_t result = 0xD000000000000020;
      break;
    case 2:
      unint64_t result = 0xD000000000000012;
      break;
    case 3:
      unint64_t result = 0xD000000000000010;
      break;
    case 4:
      unint64_t result = 0x736F4C6E49746F6ELL;
      break;
    case 5:
      unint64_t result = 0xD000000000000011;
      break;
    case 6:
      unint64_t result = 0xD00000000000001BLL;
      break;
    case 7:
      unint64_t result = 0x7574617453646162;
      break;
    case 8:
      unint64_t result = 0xD00000000000002CLL;
      break;
    default:
      return result;
  }
  return result;
}

unint64_t sub_101037F20()
{
  return sub_101037DF8(*v0);
}

uint64_t type metadata accessor for LocalFindableLostModeDetectionService()
{
  return self;
}

uint64_t sub_101037F4C()
{
  uint64_t v1 = type metadata accessor for UUID();
  __chkstk_darwin(v1 - 8);
  swift_defaultActor_initialize();
  *(void *)(v0 + 112) = 0xD000000000000025;
  *(void *)(v0 + 120) = 0x80000001013882F0;
  *(void *)(v0 + 128) = 0;
  type metadata accessor for WorkItemQueue();
  UUID.init()();
  *(void *)(v0 + 136) = WorkItemQueue.__allocating_init(name:identifier:)();
  *(_WORD *)(v0 + 144) = 0;
  *(unsigned char *)(v0 + 146) = 0;
  return v0;
}

uint64_t sub_101038020()
{
  uint64_t v1 = (void *)swift_task_alloc();
  *(void *)(v0 + 16) = v1;
  *uint64_t v1 = v0;
  v1[1] = sub_100033F68;
  return sub_101026BC8();
}

uint64_t sub_1010380AC(uint64_t a1, uint64_t a2)
{
  uint64_t result = sub_10103975C(&qword_1016676D0, a2, (void (*)(uint64_t))type metadata accessor for LocalFindableLostModeDetectionService);
  *(void *)(a1 + 8) = result;
  return result;
}

uint64_t sub_101038104()
{
  uint64_t v0 = type metadata accessor for Logger();
  sub_10001E384(v0, qword_10170F0F8);
  sub_100010324(v0, (uint64_t)qword_10170F0F8);
  return Logger.init(subsystem:category:)();
}

uint64_t sub_101038184(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = (uint64_t (*)(void))((char *)a3 + *a3);
  uint64_t v4 = (void *)swift_task_alloc();
  *(void *)(v3 + 16) = v4;
  *uint64_t v4 = v3;
  v4[1] = sub_100033F68;
  return v6();
}

uint64_t sub_101038250(uint64_t a1, uint64_t a2, uint64_t a3, int *a4)
{
  uint64_t v7 = (uint64_t (*)(void))((char *)a4 + *a4);
  uint64_t v5 = (void *)swift_task_alloc();
  *(void *)(v4 + 16) = v5;
  *uint64_t v5 = v4;
  v5[1] = sub_100033F68;
  return v7();
}

uint64_t sub_10103831C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for TaskPriority();
  uint64_t v7 = *(void *)(v6 - 8);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1, 1, v6) != 1)
  {
    TaskPriority.rawValue.getter();
    (*(void (**)(uint64_t, uint64_t))(v7 + 8))(a1, v6);
    if (!*(void *)(a3 + 16)) {
      goto LABEL_5;
    }
    goto LABEL_3;
  }
  sub_10001DAB4(a1, &qword_10164DBB0);
  if (*(void *)(a3 + 16))
  {
LABEL_3:
    swift_getObjectType();
    swift_unknownObjectRetain();
    dispatch thunk of Actor.unownedExecutor.getter();
    swift_unknownObjectRelease();
  }
LABEL_5:
  uint64_t v8 = swift_allocObject();
  *(void *)(v8 + 16) = a2;
  *(void *)(v8 + 24) = a3;
  return swift_task_create();
}

void sub_1010384C8(uint64_t a1)
{
  if (a1)
  {
    swift_errorRetain();
    sub_10000588C(&qword_101638D40);
    if ((swift_dynamicCast() & 1) == 0 || v10)
    {
      swift_errorRetain();
      if (qword_101637380 != -1) {
        swift_once();
      }
      uint64_t v1 = type metadata accessor for Logger();
      sub_100010324(v1, (uint64_t)qword_101667438);
      swift_errorRetain();
      swift_errorRetain();
      uint64_t v2 = Logger.logObject.getter();
      os_log_type_t v3 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v2, v3))
      {
        uint64_t v4 = (uint8_t *)swift_slowAlloc();
        uint64_t v5 = (void *)swift_slowAlloc();
        *(_DWORD *)uint64_t v4 = 138412290;
        swift_errorRetain();
        uint64_t v11 = _swift_stdlib_bridgeErrorToNSError();
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        *uint64_t v5 = v11;
        swift_errorRelease();
        swift_errorRelease();
        _os_log_impl((void *)&_mh_execute_header, v2, v3, "Error with disabling lost mode %@", v4, 0xCu);
        sub_10000588C((uint64_t *)&unk_101638EA0);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();

        swift_errorRelease();
      }
      else
      {
        swift_errorRelease();
        swift_errorRelease();
        swift_errorRelease();
      }
    }
  }
  else
  {
    if (qword_101637380 != -1) {
      swift_once();
    }
    uint64_t v6 = type metadata accessor for Logger();
    sub_100010324(v6, (uint64_t)qword_101667438);
    oslog = Logger.logObject.getter();
    os_log_type_t v7 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(oslog, v7))
    {
      uint64_t v8 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v8 = 0;
      _os_log_impl((void *)&_mh_execute_header, oslog, v7, "Disabled lost mode", v8, 2u);
      swift_slowDealloc();
    }
  }
}

uint64_t sub_1010387B0()
{
  id v0 = [self standardUserDefaults];
  NSString v1 = String._bridgeToObjectiveC()();
  id v2 = [v0 valueForKey:v1];

  if (v2)
  {
    _bridgeAnyObjectToAny(_:)();
    swift_unknownObjectRelease();
  }
  else
  {
    memset(v5, 0, sizeof(v5));
  }
  sub_10001D608((uint64_t)v5, (uint64_t)v6, (uint64_t *)&unk_101644360);
  if (v7)
  {
    if (swift_dynamicCast()) {
      return v4;
    }
    else {
      return 0;
    }
  }
  else
  {
    sub_10001DAB4((uint64_t)v6, (uint64_t *)&unk_101644360);
    return 0;
  }
}

uint64_t sub_1010388DC(uint64_t a1)
{
  uint64_t v2 = sub_10000588C((uint64_t *)&unk_10163AC90);
  __chkstk_darwin(v2 - 8);
  uint64_t v4 = (char *)&v11 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  id v5 = [self standardUserDefaults];
  sub_10001D074(a1, (uint64_t)v4, (uint64_t *)&unk_10163AC90);
  uint64_t v6 = type metadata accessor for Date();
  uint64_t v7 = *(void *)(v6 - 8);
  Class isa = 0;
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v7 + 48))(v4, 1, v6) != 1)
  {
    Class isa = Date._bridgeToObjectiveC()().super.isa;
    (*(void (**)(char *, uint64_t))(v7 + 8))(v4, v6);
  }
  NSString v9 = String._bridgeToObjectiveC()();
  [v5 setObject:isa forKey:v9];

  swift_unknownObjectRelease();
  return sub_10001DAB4(a1, (uint64_t *)&unk_10163AC90);
}

unint64_t sub_101038A6C()
{
  unint64_t result = qword_1016676E0;
  if (!qword_1016676E0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1016676E0);
  }
  return result;
}

uint64_t sub_101038AC0()
{
  uint64_t v1 = type metadata accessor for UUID();
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 24) & ~v3;
  uint64_t v5 = v3 | 7;
  unint64_t v6 = ((*(void *)(v2 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8) + 8;
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);

  return _swift_deallocObject(v0, v6, v5);
}

uint64_t sub_101038B98()
{
  uint64_t v1 = *(void *)(type metadata accessor for UUID() - 8);
  uint64_t v2 = *(void *)(v0 + 16);
  uint64_t v3 = v0 + ((*(unsigned __int8 *)(v1 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80));

  return sub_1010350EC(v2, v3);
}

uint64_t sub_101038C38()
{
  uint64_t v1 = (int *)(type metadata accessor for LostModeRecord() - 8);
  uint64_t v2 = *(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v3 = (v2 + 40) & ~v2;
  uint64_t v4 = v3 + *(void *)(*(void *)v1 + 64);
  uint64_t v5 = v2 | 7;
  swift_release();
  swift_release();
  uint64_t v6 = v0 + v3;
  sub_10001CFB8(*(void *)(v0 + v3), *(void *)(v0 + v3 + 8));
  uint64_t v7 = v0 + v3 + v1[7];
  uint64_t v8 = type metadata accessor for UUID();
  NSString v9 = *(void (**)(uint64_t, uint64_t))(*(void *)(v8 - 8) + 8);
  v9(v7, v8);
  v9(v6 + v1[8], v8);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return _swift_deallocObject(v0, v4, v5);
}

void sub_101038D98()
{
  uint64_t v0 = sub_1010387B0();
  if (v1)
  {
    id v3 = [self standardUserDefaults];
    Class isa = UInt._bridgeToObjectiveC()().super.super.isa;
    NSString v5 = String._bridgeToObjectiveC()();
    [v3 setObject:isa forKey:v5];

    uint64_t v2 = 0;
  }
  else
  {
    uint64_t v2 = v0;
  }
  if (qword_101637380 != -1) {
    swift_once();
  }
  uint64_t v6 = type metadata accessor for Logger();
  sub_100010324(v6, (uint64_t)qword_101667438);
  uint64_t v7 = Logger.logObject.getter();
  os_log_type_t v8 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v7, v8))
  {
    uint64_t v9 = swift_slowAlloc();
    *(_DWORD *)uint64_t v9 = 134218240;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v9 + 12) = 2048;
    if (v2 != -1)
    {
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      _os_log_impl((void *)&_mh_execute_header, v7, v8, "Incrementing number of alerts from %lu to %lu", (uint8_t *)v9, 0x16u);
      swift_slowDealloc();

LABEL_10:
      id v10 = [self standardUserDefaults];
      Class v11 = UInt._bridgeToObjectiveC()().super.super.isa;
      NSString v12 = String._bridgeToObjectiveC()();
      [v10 setObject:v11 forKey:v12];

      return;
    }
  }
  else
  {

    if (v2 != -1) {
      goto LABEL_10;
    }
    __break(1u);
  }
  __break(1u);
}

uint64_t sub_101038FE0()
{
  uint64_t v1 = type metadata accessor for UUID();
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 24) & ~v3;
  uint64_t v5 = v4 + *(void *)(v2 + 64);
  uint64_t v6 = v3 | 7;
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);

  return _swift_deallocObject(v0, v5, v6);
}

uint64_t sub_1010390AC@<X0>(uint64_t a1@<X8>)
{
  type metadata accessor for UUID();

  return sub_100E60C38(a1);
}

uint64_t sub_101039120(uint64_t a1)
{
  return sub_10012A55C(a1, v1[2], v1[3], v1[4]);
}

uint64_t sub_10103912C(uint64_t a1)
{
  return sub_10102500C(a1, v1[2], v1[3], v1[4]);
}

uint64_t sub_101039138()
{
  uint64_t v1 = sub_10000588C(&qword_101667718);
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 48) & ~v3;
  uint64_t v5 = v3 | 7;
  unint64_t v6 = ((*(void *)(v2 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8) + 8;
  swift_unknownObjectRelease();
  swift_release();
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);

  return _swift_deallocObject(v0, v6, v5);
}

uint64_t sub_101039224(uint64_t a1)
{
  uint64_t v4 = *(void *)(sub_10000588C(&qword_101667718) - 8);
  unint64_t v5 = (*(unsigned __int8 *)(v4 + 80) + 48) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
  uint64_t v6 = v1[2];
  uint64_t v7 = v1[3];
  uint64_t v8 = v1[4];
  uint64_t v9 = v1[5];
  uint64_t v10 = (uint64_t)v1 + v5;
  uint64_t v11 = *(void *)((char *)v1 + ((*(void *)(v4 + 64) + v5 + 7) & 0xFFFFFFFFFFFFFFF8));
  NSString v12 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v12;
  *NSString v12 = v2;
  v12[1] = sub_10001D2E4;
  return sub_101025254(a1, v6, v7, v8, v9, v10, v11);
}

uint64_t sub_101039360()
{
  uint64_t v1 = sub_10000588C(&qword_101667718);
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 32) & ~v3;
  uint64_t v5 = v3 | 7;
  unint64_t v6 = ((*(void *)(v2 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8) + 8;
  swift_release();
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);

  return _swift_deallocObject(v0, v6, v5);
}

uint64_t sub_101039444()
{
  uint64_t v2 = *(void *)(sub_10000588C(&qword_101667718) - 8);
  uint64_t v3 = *(void *)(v0 + 16);
  uint64_t v4 = *(void *)(v0 + 24);
  uint64_t v5 = v0 + ((*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80));
  unint64_t v6 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v6;
  *unint64_t v6 = v1;
  v6[1] = sub_10001D2E4;
  return sub_1010255A4(v3, v4, v5);
}

uint64_t sub_101039558()
{
  uint64_t v1 = sub_10000588C(&qword_101667718);
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 24) & ~v3;
  uint64_t v5 = v3 | 7;
  unint64_t v6 = ((*(void *)(v2 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8) + 8;
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);

  return _swift_deallocObject(v0, v6, v5);
}

uint64_t sub_101039634(uint64_t a1, char a2)
{
  char v5 = a2 & 1;
  uint64_t v6 = *(void *)(sub_10000588C(&qword_101667718) - 8);
  uint64_t v7 = *(void *)(v2 + 16);
  uint64_t v8 = v2 + ((*(unsigned __int8 *)(v6 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80));
  uint64_t v9 = (void *)swift_task_alloc();
  *(void *)(v3 + 16) = v9;
  *uint64_t v9 = v3;
  v9[1] = sub_100033F68;
  return sub_101026090(a1, v5, v7, v8);
}

uint64_t sub_10103975C(unint64_t *a1, uint64_t a2, void (*a3)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a3(a2);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_1010397A4()
{
  swift_weakDestroy();

  return _swift_deallocObject(v0, 24, 7);
}

uint64_t sub_1010397DC()
{
  return sub_101039F64((void (*)(void))&_swift_unknownObjectRelease, (void (*)(void))&_swift_release, 56);
}

uint64_t sub_10103980C(uint64_t a1)
{
  uint64_t v4 = v1[2];
  uint64_t v5 = v1[3];
  uint64_t v6 = v1[4];
  uint64_t v7 = v1[5];
  uint64_t v8 = v1[6];
  uint64_t v9 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v9;
  *uint64_t v9 = v2;
  v9[1] = sub_100033F68;
  return sub_10102B360(a1, v4, v5, v6, v7, v8);
}

uint64_t sub_1010398D4()
{
  uint64_t v1 = (int *)(sub_10000588C((uint64_t *)&unk_10163D240) - 8);
  uint64_t v2 = *(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v3 = (v2 + 16) & ~v2;
  uint64_t v4 = *(void *)(*(void *)v1 + 64);
  swift_release();
  uint64_t v5 = v0 + v3 + v1[14];
  sub_10000588C(&qword_10163D218);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    swift_errorRelease();
  }
  else
  {
    type metadata accessor for PencilPairingService.PeripheralDiscovery(0);
    uint64_t v6 = sub_10000588C(&qword_10163D210);
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v6 - 8) + 8))(v5, v6);
  }
  swift_release();

  return _swift_deallocObject(v0, ((((v4 + v3 + 7) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8) + 8, v2 | 7);
}

uint64_t sub_101039A20()
{
  uint64_t v2 = *(void *)(sub_10000588C((uint64_t *)&unk_10163D240) - 8);
  unint64_t v3 = (*(unsigned __int8 *)(v2 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = v0 + v3;
  uint64_t v5 = *(void *)(v0 + ((*(void *)(v2 + 64) + v3 + 7) & 0xFFFFFFFFFFFFFFF8));
  uint64_t v6 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v6;
  *uint64_t v6 = v1;
  v6[1] = sub_100033F68;
  return sub_10102BEA0(v4, v5);
}

uint64_t sub_101039B38(uint64_t a1, char a2)
{
  char v5 = a2 & 1;
  uint64_t v6 = (void *)swift_task_alloc();
  *(void *)(v3 + 16) = v6;
  *uint64_t v6 = v3;
  v6[1] = sub_100033F68;
  return sub_10102C8B0(a1, v5, v2);
}

uint64_t sub_101039BE0(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 32))(a2, a1, v5);
  return a2;
}

uint64_t sub_101039C48(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

uint64_t sub_101039CB0(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t sub_101039D10()
{
  return sub_101039F64((void (*)(void))&_swift_unknownObjectRelease, (void (*)(void))&_swift_release, 56);
}

uint64_t sub_101039D40(uint64_t a1)
{
  uint64_t v4 = v1[2];
  uint64_t v5 = v1[3];
  uint64_t v6 = v1[4];
  uint64_t v7 = v1[5];
  uint64_t v8 = v1[6];
  uint64_t v9 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v9;
  *uint64_t v9 = v2;
  v9[1] = sub_100033F68;
  return sub_101027734(a1, v4, v5, v6, v7, v8);
}

uint64_t sub_101039E08()
{
  swift_bridgeObjectRelease();

  return _swift_deallocObject(v0, 24, 7);
}

uint64_t sub_101039E40()
{
  swift_bridgeObjectRelease();
  swift_release();

  return _swift_deallocObject(v0, 48, 7);
}

uint64_t sub_101039E80()
{
  uint64_t v2 = *(void *)(v0 + 16);
  uint64_t v3 = swift_task_alloc();
  long long v4 = *(_OWORD *)(v0 + 24);
  *(void *)(v1 + 16) = v3;
  *(void *)uint64_t v3 = v1;
  *(void *)(v3 + 8) = sub_100033F68;
  *(_OWORD *)(v3 + 32) = v4;
  *(void *)(v3 + 24) = v2;
  return _swift_task_switch(sub_1010285F8, 0, 0);
}

uint64_t sub_101039F34()
{
  return sub_101039F64((void (*)(void))&_swift_release, (void (*)(void))&_swift_bridgeObjectRelease, 48);
}

uint64_t sub_101039F64(void (*a1)(void), void (*a2)(void), uint64_t a3)
{
  a1(*(void *)(v3 + 16));
  a2(*(void *)(v3 + 32));
  swift_release();

  return _swift_deallocObject(v3, a3, 7);
}

uint64_t sub_101039FD0(uint64_t a1, char a2)
{
  char v5 = a2 & 1;
  uint64_t v6 = v2[2];
  uint64_t v7 = v2[3];
  uint64_t v9 = v2[4];
  uint64_t v8 = v2[5];
  uint64_t v10 = (void *)swift_task_alloc();
  *(void *)(v3 + 16) = v10;
  *uint64_t v10 = v3;
  v10[1] = sub_100033F68;
  return sub_101028FC8(a1, v5, v6, v7, v9, v8);
}

uint64_t sub_10103A094()
{
  swift_unknownObjectRelease();
  swift_release();

  return _swift_deallocObject(v0, 40, 7);
}

uint64_t sub_10103A0D4()
{
  uint64_t v2 = *(void *)(v0 + 32);
  uint64_t v3 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v3;
  *uint64_t v3 = v1;
  v3[1] = sub_100033F68;
  v3[5] = v2;
  return _swift_task_switch(sub_101026E50, 0, 0);
}

uint64_t sub_10103A184()
{
  uint64_t v2 = *(const void **)(v0 + 16);
  uint64_t v3 = *(void *)(v0 + 24);
  long long v4 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v4;
  *long long v4 = v1;
  v4[1] = sub_100033F68;
  uint64_t v5 = (uint64_t (*)(const void *, uint64_t))((char *)&dword_1016677D8 + dword_1016677D8);
  return v5(v2, v3);
}

uint64_t sub_10103A238()
{
  swift_release();

  return _swift_deallocObject(v0, 32, 7);
}

uint64_t sub_10103A270(uint64_t a1)
{
  long long v4 = *(int **)(v1 + 16);
  uint64_t v5 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v5;
  *uint64_t v5 = v2;
  v5[1] = sub_100033F68;
  uint64_t v6 = (uint64_t (*)(uint64_t, int *))((char *)&dword_1016677F8 + dword_1016677F8);
  return v6(a1, v4);
}

uint64_t sub_10103A32C()
{
  uint64_t v2 = *(const void **)(v0 + 16);
  uint64_t v3 = *(void *)(v0 + 24);
  long long v4 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v4;
  *long long v4 = v1;
  v4[1] = sub_100033F68;
  uint64_t v5 = (uint64_t (*)(const void *, uint64_t))((char *)&dword_101667808 + dword_101667808);
  return v5(v2, v3);
}

uint64_t sub_10103A3E4()
{
  uint64_t v2 = *(const void **)(v0 + 16);
  uint64_t v3 = *(void *)(v0 + 24);
  long long v4 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v4;
  *long long v4 = v1;
  v4[1] = sub_100033F68;
  uint64_t v5 = (uint64_t (*)(const void *, uint64_t))((char *)&dword_101667828 + dword_101667828);
  return v5(v2, v3);
}

uint64_t sub_10103A49C()
{
  _Block_release(*(const void **)(v0 + 16));
  swift_release();

  return _swift_deallocObject(v0, 32, 7);
}

uint64_t sub_10103A4DC()
{
  uint64_t v2 = *(const void **)(v0 + 16);
  uint64_t v3 = *(void *)(v0 + 24);
  long long v4 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v4;
  *long long v4 = v1;
  v4[1] = sub_100033F68;
  uint64_t v5 = (uint64_t (*)(const void *, uint64_t))((char *)&dword_101667848 + dword_101667848);
  return v5(v2, v3);
}

unsigned char *storeEnumTagSinglePayload for LocalFindableLostModeDetectionService.InternalError(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 8 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 8) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xF8) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xF7)
  {
    unsigned int v6 = ((a2 - 248) >> 8) + 1;
    *uint64_t result = a2 + 8;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x10103A65CLL);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 8;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for LocalFindableLostModeDetectionService.InternalError()
{
  return &type metadata for LocalFindableLostModeDetectionService.InternalError;
}

unint64_t sub_10103A698()
{
  unint64_t result = qword_101667868;
  if (!qword_101667868)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_101667868);
  }
  return result;
}

uint64_t *initializeBufferWithCopyOfBuffer for LineUpAccessoryOwnerCommand(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  unint64_t v4 = a2[1];
  sub_10103A734(*a2, v4);
  *a1 = v3;
  a1[1] = v4;
  return a1;
}

uint64_t sub_10103A734(uint64_t result, unint64_t a2)
{
  uint64_t v2 = (a2 >> 60) & 3;
  if (v2)
  {
    if (v2 != 2) {
      return result;
    }
    a2 &= 0xCFFFFFFFFFFFFFFFLL;
  }
  return sub_1000361E0(result, a2);
}

uint64_t destroy for LineUpAccessoryOwnerCommand(uint64_t a1)
{
  return sub_100DB4B8C(*(void *)a1, *(void *)(a1 + 8));
}

uint64_t *assignWithCopy for LineUpAccessoryOwnerCommand(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  unint64_t v4 = a2[1];
  sub_10103A734(*a2, v4);
  uint64_t v5 = *a1;
  unint64_t v6 = a1[1];
  *a1 = v3;
  a1[1] = v4;
  sub_100DB4B8C(v5, v6);
  return a1;
}

uint64_t *assignWithTake for LineUpAccessoryOwnerCommand(uint64_t *a1, _OWORD *a2)
{
  uint64_t v3 = *a1;
  unint64_t v4 = a1[1];
  *(_OWORD *)a1 = *a2;
  sub_100DB4B8C(v3, v4);
  return a1;
}

uint64_t sub_10103A7E0(uint64_t a1)
{
  if (((*(void *)(a1 + 8) >> 60) & 3) == 3) {
    return (*(_DWORD *)a1 + 3);
  }
  else {
    return (*(void *)(a1 + 8) >> 60) & 3;
  }
}

uint64_t sub_10103A7FC(uint64_t result)
{
  *(void *)(result + 8) &= 0xCFFFFFFFFFFFFFFFLL;
  return result;
}

void *sub_10103A80C(void *result, uint64_t a2)
{
  if (a2 < 3)
  {
    result[1] = result[1] & 0xCFFFFFFFFFFFFFFFLL | (a2 << 60);
  }
  else
  {
    *unint64_t result = (a2 - 3);
    result[1] = 0x3000000000000000;
  }
  return result;
}

ValueMetadata *type metadata accessor for LineUpAccessoryOwnerCommand()
{
  return &type metadata for LineUpAccessoryOwnerCommand;
}

uint64_t sub_10103A844(void *a1, uint64_t a2, unint64_t a3)
{
  uint64_t v7 = type metadata accessor for Endianness();
  uint64_t v8 = *(void *)(v7 - 8);
  __chkstk_darwin(v7);
  uint64_t v10 = (char *)&v15 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10001CD44(a1, a1[3]);
  dispatch thunk of BinaryEncoding.container()();
  LOWORD(v15) = 0x404040504080407uLL >> (HIBYTE(a3) & 0x30);
  static Endianness.current.getter();
  sub_100179818();
  FixedWidthInteger.convert(to:)();
  (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v7);
  LOWORD(v15) = v17;
  sub_1000BD078((uint64_t)v21, v22);
  dispatch thunk of BinaryEncodingContaining.encode<A>(_:)();
  if (!v3)
  {
    switch((a3 >> 60) & 3)
    {
      case 1uLL:
        uint64_t v19 = &type metadata for LineUpVerifyFindMyNetworkIdResponsePayload;
        unint64_t v20 = sub_10103B2B4();
        LOBYTE(v17) = a2;
        sub_10000588C(&qword_101639B68);
        if ((swift_dynamicCast() & 1) == 0) {
          goto LABEL_13;
        }
        LOBYTE(v17) = v15;
        sub_1000BD078((uint64_t)v21, v22);
        sub_100BBA14C();
        goto LABEL_12;
      case 2uLL:
        uint64_t v19 = &type metadata for LineUpEncryptedSerialNumberResponsePayload;
        unint64_t v20 = sub_10103B260();
        uint64_t v17 = a2;
        unint64_t v18 = a3 & 0xCFFFFFFFFFFFFFFFLL;
        sub_1000361E0(a2, a3 & 0xCFFFFFFFFFFFFFFFLL);
        sub_10000588C(&qword_101639B68);
        if ((swift_dynamicCast() & 1) == 0) {
          goto LABEL_13;
        }
        uint64_t v11 = v15;
        unint64_t v12 = v16;
        uint64_t v17 = v15;
        unint64_t v18 = v16;
        sub_1000BD078((uint64_t)v21, v22);
        sub_10103B308();
        goto LABEL_7;
      case 3uLL:
        uint64_t v19 = &type metadata for AccessoryGenericPayload;
        unint64_t v20 = sub_10006258C();
        sub_10000588C(&qword_101639B68);
        if (!swift_dynamicCast()) {
          goto LABEL_13;
        }
        sub_1000BD078((uint64_t)v21, v22);
        sub_1002A576C();
LABEL_12:
        dispatch thunk of BinaryEncodingContaining.encode<A>(_:)();
        return _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)v21);
      default:
        uint64_t v19 = &type metadata for VerifyFindMyNetworkIdPayload;
        unint64_t v20 = sub_1005FD2F0();
        uint64_t v17 = a2;
        unint64_t v18 = a3;
        sub_1000361E0(a2, a3);
        sub_10000588C(&qword_101639B68);
        if (swift_dynamicCast())
        {
          uint64_t v11 = v15;
          unint64_t v12 = v16;
          uint64_t v17 = v15;
          unint64_t v18 = v16;
          sub_1000BD078((uint64_t)v21, v22);
          sub_1005FD050();
LABEL_7:
          dispatch thunk of BinaryEncodingContaining.encode<A>(_:)();
          sub_10001CFB8(v11, v12);
        }
        else
        {
LABEL_13:
          sub_10103B20C();
          swift_allocError();
          *uint64_t v13 = 0;
          swift_willThrow();
        }
        break;
    }
  }
  return _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)v21);
}

__int16 *sub_10103AC50@<X0>(void *a1@<X0>, __int16 **a2@<X8>)
{
  unint64_t result = sub_10103AF28(a1);
  if (!v2)
  {
    *a2 = result;
    a2[1] = v5;
  }
  return result;
}

uint64_t sub_10103AC7C(void *a1)
{
  return sub_10103A844(a1, *(void *)v1, *(void *)(v1 + 8));
}

uint64_t sub_10103AC98(uint64_t a1, uint64_t a2)
{
  sub_10001D010(a2, (uint64_t)v10);
  switch((char)a1)
  {
    case 1:
      sub_10103B2B4();
      unint64_t v4 = &type metadata for LineUpVerifyFindMyNetworkIdResponsePayload;
      break;
    case 2:
      sub_10006258C();
      unint64_t v4 = &type metadata for AccessoryGenericPayload;
      break;
    case 3:
      sub_10103B260();
      unint64_t v4 = &type metadata for LineUpEncryptedSerialNumberResponsePayload;
      break;
    default:
      sub_1005FD2F0();
      unint64_t v4 = &type metadata for VerifyFindMyNetworkIdPayload;
      break;
  }
  sub_10001CD44(v10, v10[3]);
  uint64_t DynamicType = swift_getDynamicType();
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)v10);
  if (v4 != (ValueMetadata *)DynamicType)
  {
    __break(1u);
    JUMPOUT(0x10103AF08);
  }
  switch((char)a1)
  {
    case 1:
      sub_10001D010(a2, (uint64_t)v9);
      sub_10000588C(&qword_101639B68);
      if ((swift_dynamicCast() & 1) == 0) {
        goto LABEL_15;
      }
      a1 = v8;
      _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(a2);
      break;
    case 2:
      sub_10001D010(a2, (uint64_t)v9);
      sub_10000588C(&qword_101639B68);
      if ((swift_dynamicCast() & 1) == 0) {
        goto LABEL_15;
      }
      _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(a2);
      a1 = 0;
      break;
    case 3:
      sub_10001D010(a2, (uint64_t)v9);
      sub_10000588C(&qword_101639B68);
      if (swift_dynamicCast()) {
        goto LABEL_9;
      }
      goto LABEL_15;
    default:
      sub_10001D010(a2, (uint64_t)v9);
      sub_10000588C(&qword_101639B68);
      if (swift_dynamicCast())
      {
LABEL_9:
        a1 = v8;
        _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(a2);
      }
      else
      {
LABEL_15:
        sub_10103B20C();
        swift_allocError();
        *unint64_t v6 = 0;
        swift_willThrow();
        _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(a2);
      }
      break;
  }
  return a1;
}

__int16 *sub_10103AF28(void *a1)
{
  uint64_t v3 = type metadata accessor for Endianness();
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  unint64_t v6 = (char *)&v15[-4] - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10001CD44(a1, a1[3]);
  dispatch thunk of BinaryDecoding.container()();
  uint64_t v7 = (__int16 *)sub_1000BD078((uint64_t)v17, v18);
  sub_100179818();
  dispatch thunk of BinaryDecodingContaining.decode<A>(_:)();
  if (v1)
  {
LABEL_10:
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)v17);
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)a1);
  }
  else
  {
    __int16 v19 = v15[0];
    static Endianness.current.getter();
    uint64_t v7 = &v19;
    FixedWidthInteger.convert(to:)();
    (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
    switch(LOWORD(v16[0]))
    {
      case 0x404:
        uint64_t v8 = &type metadata for AccessoryGenericPayload;
        uint64_t v9 = 2;
        unint64_t v10 = sub_10006258C();
        goto LABEL_8;
      case 0x405:
        uint64_t v8 = &type metadata for LineUpEncryptedSerialNumberResponsePayload;
        uint64_t v9 = 3;
        unint64_t v10 = sub_10103B260();
        goto LABEL_8;
      case 0x407:
        uint64_t v8 = &type metadata for VerifyFindMyNetworkIdPayload;
        unint64_t v12 = sub_1005FD2F0();
        uint64_t v9 = 0;
        goto LABEL_9;
      case 0x408:
        uint64_t v8 = &type metadata for LineUpVerifyFindMyNetworkIdResponsePayload;
        uint64_t v9 = 1;
        unint64_t v10 = sub_10103B2B4();
LABEL_8:
        unint64_t v12 = v10;
LABEL_9:
        sub_10001D010((uint64_t)a1, (uint64_t)v15);
        v16[3] = (uint64_t)v8;
        v16[4] = v12;
        sub_10001D958(v16);
        dispatch thunk of BinaryDecodable.init(from:)();
        sub_10001D010((uint64_t)v16, (uint64_t)v15);
        uint64_t v7 = (__int16 *)sub_10103AC98(v9, (uint64_t)v15);
        _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)v16);
        _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)v17);
        _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)a1);
        break;
      default:
        sub_10103B20C();
        swift_allocError();
        *uint64_t v11 = 1;
        swift_willThrow();
        goto LABEL_10;
    }
  }
  return v7;
}

unint64_t sub_10103B20C()
{
  unint64_t result = qword_101667870;
  if (!qword_101667870)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_101667870);
  }
  return result;
}

unint64_t sub_10103B260()
{
  unint64_t result = qword_101667878;
  if (!qword_101667878)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_101667878);
  }
  return result;
}

unint64_t sub_10103B2B4()
{
  unint64_t result = qword_101667880;
  if (!qword_101667880)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_101667880);
  }
  return result;
}

unint64_t sub_10103B308()
{
  unint64_t result = qword_101667888;
  if (!qword_101667888)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_101667888);
  }
  return result;
}

unsigned char *storeEnumTagSinglePayload for LineUpAccessoryOwnerCommand.AccessoryOwnerCommandError(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFE)
  {
    unsigned int v6 = ((a2 - 255) >> 8) + 1;
    *unint64_t result = a2 + 1;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x10103B428);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 1;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for LineUpAccessoryOwnerCommand.AccessoryOwnerCommandError()
{
  return &type metadata for LineUpAccessoryOwnerCommand.AccessoryOwnerCommandError;
}

unint64_t sub_10103B464()
{
  unint64_t result = qword_101667890;
  if (!qword_101667890)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_101667890);
  }
  return result;
}

uint64_t sub_10103B4BC()
{
  NSString v1 = String._bridgeToObjectiveC()();
  id v2 = [v0 valueForProperty:v1];

  if (v2)
  {
    _bridgeAnyObjectToAny(_:)();
    swift_unknownObjectRelease();
  }
  else
  {
    memset(v5, 0, sizeof(v5));
  }
  sub_10028DF08((uint64_t)v5, (uint64_t)v6);
  if (v7)
  {
    sub_10103B670();
    if (swift_dynamicCast()) {
      return v4;
    }
    else {
      return 0;
    }
  }
  else
  {
    sub_100498978((uint64_t)v6);
    return 0;
  }
}

uint64_t sub_10103B5A8()
{
  if ([v0 valueForProperty:NRDevicePropertyUDID])
  {
    _bridgeAnyObjectToAny(_:)();
    swift_unknownObjectRelease();
  }
  else
  {
    memset(v3, 0, sizeof(v3));
  }
  sub_10028DF08((uint64_t)v3, (uint64_t)v4);
  if (v5)
  {
    if (swift_dynamicCast()) {
      return v2;
    }
    else {
      return 0;
    }
  }
  else
  {
    sub_100498978((uint64_t)v4);
    return 0;
  }
}

unint64_t sub_10103B670()
{
  unint64_t result = qword_10163BC80;
  if (!qword_10163BC80)
  {
    self;
    unint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&qword_10163BC80);
  }
  return result;
}

uint64_t sub_10103B6B0()
{
  return sub_10103B5A8();
}

uint64_t sub_10103B6D4()
{
  uint64_t v0 = type metadata accessor for Logger();
  sub_10001E384(v0, qword_10170F110);
  sub_100010324(v0, (uint64_t)qword_10170F110);
  return Logger.init(subsystem:category:)();
}

uint64_t sub_10103B758()
{
  *(void *)(v1 + 24) = v0;
  return _swift_task_switch(sub_10103B778, v0, 0);
}

uint64_t sub_10103B778()
{
  uint64_t v9 = v0;
  if (qword_101637390 != -1) {
    swift_once();
  }
  uint64_t v1 = type metadata accessor for Logger();
  sub_100010324(v1, (uint64_t)qword_10170F110);
  uint64_t v2 = Logger.logObject.getter();
  os_log_type_t v3 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v2, v3))
  {
    uint64_t v4 = (uint8_t *)swift_slowAlloc();
    uint64_t v8 = swift_slowAlloc();
    *(_DWORD *)uint64_t v4 = 136446210;
    v0[2] = sub_1008FA0F0(0xD00000000000001DLL, 0x800000010141F3E0, &v8);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl((void *)&_mh_execute_header, v2, v3, "%{public}s", v4, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }

  uint64_t v5 = (void *)swift_task_alloc();
  v0[4] = v5;
  *uint64_t v5 = v0;
  v5[1] = sub_10103B978;
  uint64_t v6 = v0[3];
  v5[12] = v6;
  return _swift_task_switch(sub_10103BD9C, v6, 0);
}

uint64_t sub_10103B978()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 24);
  swift_task_dealloc();
  return _swift_task_switch(sub_10103BA88, v1, 0);
}

uint64_t sub_10103BA88()
{
  v0[5] = *(void *)(v0[3] + 112);
  uint64_t v1 = (void *)swift_task_alloc();
  v0[6] = v1;
  *uint64_t v1 = v0;
  v1[1] = sub_10103BB24;
  return sub_10103D730(6.0);
}

uint64_t sub_10103BB24(uint64_t a1)
{
  uint64_t v2 = *v1;
  uint64_t v5 = *v1;
  *(void *)(v2 + 56) = a1;
  swift_task_dealloc();
  uint64_t v3 = (void *)swift_task_alloc();
  *(void *)(v2 + 64) = v3;
  *uint64_t v3 = v5;
  v3[1] = sub_10103BC70;
  return sub_10103D32C();
}

uint64_t sub_10103BC70()
{
  uint64_t v1 = *v0;
  uint64_t v5 = *v0;
  swift_task_dealloc();
  uint64_t v2 = *(uint64_t (**)(uint64_t))(v5 + 8);
  uint64_t v3 = *(void *)(v1 + 56);
  return v2(v3);
}

uint64_t sub_10103BD7C()
{
  *(void *)(v1 + 96) = v0;
  return _swift_task_switch(sub_10103BD9C, v0, 0);
}

uint64_t sub_10103BD9C()
{
  uint64_t v0 = (uint64_t (*)())[self sharedInstance];
  if (!v0)
  {
    __break(1u);
    return _swift_task_switch(v0, v1, v2);
  }
  uint64_t v3 = v0;
  id v4 = [v0 getPairedDevices];

  if (!v4)
  {
    uint64_t v6 = (void *)v32;
    if (qword_101637390 == -1) {
      goto LABEL_22;
    }
    goto LABEL_52;
  }
  sub_10103C6A8();
  unint64_t v5 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  uint64_t v6 = (void *)v32;
  if (v5 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v7 = _CocoaArrayWrapper.endIndex.getter();
    unint64_t v31 = v5 >> 62;
    if (v7) {
      goto LABEL_5;
    }
LABEL_25:
    swift_bridgeObjectRelease();
LABEL_26:
    if (qword_101637390 != -1) {
      swift_once();
    }
    uint64_t v20 = type metadata accessor for Logger();
    sub_100010324(v20, (uint64_t)qword_10170F110);
    swift_retain_n();
    swift_bridgeObjectRetain();
    unint64_t v21 = Logger.logObject.getter();
    os_log_type_t v22 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v21, v22))
    {
      uint64_t v23 = swift_slowAlloc();
      *(_DWORD *)uint64_t v23 = 134218240;
      unint64_t v24 = (unint64_t)_swiftEmptyArrayStorage & 0x4000000000000000;
      if (((unint64_t)_swiftEmptyArrayStorage & 0x8000000000000000) != 0 || v24)
      {
        swift_bridgeObjectRetain();
        uint64_t v25 = _CocoaArrayWrapper.endIndex.getter();
        swift_release();
      }
      else
      {
        uint64_t v25 = _swiftEmptyArrayStorage[2];
      }
      swift_release();
      v6[10] = v25;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_release();
      *(_WORD *)(v23 + 12) = 2048;
      if (v31)
      {
        swift_bridgeObjectRetain();
        uint64_t v6 = (void *)v32;
        uint64_t v26 = _CocoaArrayWrapper.endIndex.getter();
        swift_bridgeObjectRelease();
      }
      else
      {
        uint64_t v26 = *(void *)((v5 & 0xFFFFFFFFFFFFFF8) + 0x10);
      }
      swift_bridgeObjectRelease();
      v6[11] = v26;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v21, v22, "%ld elligible out of %ld paired devices.", (uint8_t *)v23, 0x16u);
      swift_slowDealloc();
    }
    else
    {
      swift_bridgeObjectRelease_n();
      swift_release_n();

      unint64_t v24 = (unint64_t)_swiftEmptyArrayStorage & 0x4000000000000000;
    }
    if (((unint64_t)_swiftEmptyArrayStorage & 0x8000000000000000) != 0 || v24)
    {
      swift_retain();
      uint64_t v28 = _CocoaArrayWrapper.endIndex.getter();
      swift_release();
      if (v28)
      {
LABEL_40:
        uint64_t v27 = *(void *)(*(void *)(v32 + 96) + 112);
        *(void *)(v32 + 104) = v27;
        *(void *)(v32 + 112) = sub_100A9CA80((unint64_t)_swiftEmptyArrayStorage);
        swift_release();
        uint64_t v0 = sub_10103C3AC;
        uint64_t v1 = v27;
        uint64_t v2 = 0;
        return _swift_task_switch(v0, v1, v2);
      }
    }
    else if (_swiftEmptyArrayStorage[2])
    {
      goto LABEL_40;
    }
    swift_release();
    unint64_t v16 = Logger.logObject.getter();
    os_log_type_t v17 = static os_log_type_t.default.getter();
    if (!os_log_type_enabled(v16, v17))
    {
LABEL_47:
      uint64_t v6 = (void *)v32;
      goto LABEL_48;
    }
    uint64_t v18 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v18 = 0;
    __int16 v19 = "No autoMe watches found or currently monitoring";
LABEL_46:
    _os_log_impl((void *)&_mh_execute_header, v16, v17, v19, v18, 2u);
    swift_slowDealloc();
    goto LABEL_47;
  }
  uint64_t v7 = *(void *)((v5 & 0xFFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain();
  unint64_t v31 = v5 >> 62;
  if (!v7) {
    goto LABEL_25;
  }
LABEL_5:
  if (v7 >= 1)
  {
    uint64_t v8 = 0;
    uint64_t v9 = v32 + 16;
    uint64_t v10 = (_OWORD *)(v32 + 48);
    unint64_t v11 = v5;
    unint64_t v33 = v5 & 0xC000000000000001;
    uint64_t v12 = NRDevicePropertyCellularEnabled;
    while (1)
    {
      if (v33) {
        id v13 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
      }
      else {
        id v13 = *(id *)(v11 + 8 * v8 + 32);
      }
      uint64_t v14 = v13;
      if (objc_msgSend(v13, "valueForProperty:", v12, v31))
      {
        _bridgeAnyObjectToAny(_:)();
        swift_unknownObjectRelease();
      }
      else
      {
        *uint64_t v10 = 0u;
        *(_OWORD *)(v32 + 64) = 0u;
      }
      sub_10028DF08((uint64_t)v10, v9);
      if (v6[5])
      {
        if (swift_dynamicCast() & 1) != 0 && (*(unsigned char *)(v32 + 136))
        {
          specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
          specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
          uint64_t v6 = (void *)v32;
          specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
          specialized ContiguousArray._endMutation()();
          goto LABEL_9;
        }
      }
      else
      {
        sub_100498978(v9);
      }

LABEL_9:
      if (v7 == ++v8)
      {
        unint64_t v5 = v11;
        swift_bridgeObjectRelease();
        goto LABEL_26;
      }
    }
  }
  __break(1u);
LABEL_52:
  swift_once();
LABEL_22:
  uint64_t v15 = type metadata accessor for Logger();
  sub_100010324(v15, (uint64_t)qword_10170F110);
  unint64_t v16 = Logger.logObject.getter();
  os_log_type_t v17 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v16, v17))
  {
    uint64_t v18 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v18 = 0;
    __int16 v19 = "No watches found for monitoring";
    goto LABEL_46;
  }
LABEL_48:

  unint64_t v29 = (uint64_t (*)(void))v6[1];
  return v29();
}

uint64_t sub_10103C3AC()
{
  uint64_t v1 = v0[13];
  uint64_t v2 = v0[14];
  uint64_t v3 = swift_allocObject();
  v0[15] = v3;
  *(void *)(v3 + 16) = v2;
  *(void *)(v3 + 24) = v1;
  uint64_t v6 = (uint64_t (*)(void *, uint64_t))((char *)&async function pointer to dispatch thunk of WorkItemQueue.enqueueAndAwaitResult(_:)
                                               + async function pointer to dispatch thunk of WorkItemQueue.enqueueAndAwaitResult(_:));
  swift_bridgeObjectRetain();
  swift_retain();
  id v4 = (void *)swift_task_alloc();
  v0[16] = v4;
  *id v4 = v0;
  v4[1] = sub_10103C4B0;
  return v6(&unk_101667960, v3);
}

uint64_t sub_10103C4B0()
{
  uint64_t v2 = *v1;
  uint64_t v3 = *v1;
  swift_task_dealloc();
  if (v0)
  {
    uint64_t v4 = *(void *)(v2 + 104);
    swift_release();
    swift_errorRelease();
    return _swift_task_switch(sub_10103C624, v4, 0);
  }
  else
  {
    swift_release();
    swift_bridgeObjectRelease();
    unint64_t v5 = *(uint64_t (**)(void))(v3 + 8);
    return v5();
  }
}

uint64_t sub_10103C624()
{
  swift_bridgeObjectRelease();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t type metadata accessor for PairedAutoMeCapableWatches()
{
  return self;
}

unint64_t sub_10103C6A8()
{
  unint64_t result = qword_1016608B0;
  if (!qword_1016608B0)
  {
    self;
    unint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&qword_1016608B0);
  }
  return result;
}

uint64_t sub_10103C6E8()
{
  swift_bridgeObjectRelease();
  swift_release();

  return _swift_deallocObject(v0, 32, 7);
}

uint64_t sub_10103C728()
{
  uint64_t v2 = *(void *)(v0 + 16);
  uint64_t v3 = *(void *)(v0 + 24);
  uint64_t v4 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v4;
  *uint64_t v4 = v1;
  v4[1] = sub_10001D2E4;
  return sub_10103CAFC(v2, v3);
}

uint64_t sub_10103C7C0(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  *(unsigned char *)(v4 + 48) = a4;
  *(void *)(v4 + 32) = a2;
  *(void *)(v4 + 40) = a3;
  *(void *)(v4 + 24) = a1;
  return _swift_task_switch(sub_10103C7EC, a1, 0);
}

uint64_t sub_10103C7EC()
{
  sub_10103E800(*(void *)(v0 + 32), *(void *)(v0 + 40), *(unsigned __int8 *)(v0 + 48));
  return _swift_task_switch(sub_10103C85C, 0, 0);
}

uint64_t sub_10103C85C()
{
  uint64_t v11 = v0;
  if (qword_101637390 != -1) {
    swift_once();
  }
  uint64_t v1 = type metadata accessor for Logger();
  sub_100010324(v1, (uint64_t)qword_10170F110);
  swift_bridgeObjectRetain_n();
  uint64_t v2 = Logger.logObject.getter();
  os_log_type_t v3 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v2, v3))
  {
    int v9 = *(unsigned __int8 *)(v0 + 48);
    uint64_t v5 = *(void *)(v0 + 32);
    unint64_t v4 = *(void *)(v0 + 40);
    uint64_t v6 = swift_slowAlloc();
    uint64_t v10 = swift_slowAlloc();
    *(_DWORD *)uint64_t v6 = 141558531;
    *(void *)(v0 + 16) = 1752392040;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v6 + 12) = 2081;
    swift_bridgeObjectRetain();
    *(void *)(v0 + 16) = sub_1008FA0F0(v5, v4, &v10);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    *(_WORD *)(v6 + 22) = 1024;
    *(_DWORD *)(v0 + 16) = v9;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl((void *)&_mh_execute_header, v2, v3, "Connected status for: %{private,mask.hash}s: %{BOOL}d", (uint8_t *)v6, 0x1Cu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    swift_bridgeObjectRelease_n();
  }

  uint64_t v7 = *(void *)(v0 + 24);
  return _swift_task_switch(sub_10103CA98, v7, 0);
}

uint64_t sub_10103CA98()
{
  sub_10103ECE0();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_10103CAFC(uint64_t a1, uint64_t a2)
{
  v2[18] = a1;
  v2[19] = a2;
  sub_10000588C((uint64_t *)&unk_10163AC90);
  v2[20] = swift_task_alloc();
  v2[21] = swift_task_alloc();
  return _swift_task_switch(sub_10103CBA0, 0, 0);
}

uint64_t sub_10103CBA0()
{
  uint64_t v1 = v0[18];
  uint64_t v2 = *(void *)(v1 + 16);
  v0[22] = v2;
  if (v2)
  {
    uint64_t v3 = v0[19];
    uint64_t v4 = OBJC_IVAR____TtC12searchpartyd20PairedBluetoothState_monitorStartDate;
    v0[23] = OBJC_IVAR____TtC12searchpartyd20PairedBluetoothState_dictionaryOfConnected;
    v0[24] = v4;
    v0[25] = 0;
    uint64_t v5 = v1 + 32;
    swift_bridgeObjectRetain();
    sub_10001D010(v5, (uint64_t)(v0 + 2));
    return _swift_task_switch(sub_10103CC94, v3, 0);
  }
  else
  {
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v6 = (uint64_t (*)(void))v0[1];
    return v6();
  }
}

uint64_t sub_10103CC94()
{
  sub_10001D010(*(void *)(v0 + 152) + 112, v0 + 56);
  return _swift_task_switch(sub_10103CD04, 0, 0);
}

uint64_t sub_10103CD04()
{
  uint64_t v1 = v0[19];
  uint64_t v2 = sub_10001CD44(v0 + 7, v0[10]);
  sub_1010404FC((uint64_t)(v0 + 2), v1, *v2);
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)(v0 + 7));
  uint64_t v3 = v0[5];
  uint64_t v4 = v0[6];
  sub_10001CD44(v0 + 2, v3);
  v0[26] = (*(uint64_t (**)(uint64_t, uint64_t))(v4 + 16))(v3, v4);
  v0[27] = v5;
  if (v5)
  {
    uint64_t v6 = v0[19];
    uint64_t v7 = sub_10103CF30;
LABEL_12:
    return _swift_task_switch(v7, v6, 0);
  }
  if (qword_101637390 != -1) {
    swift_once();
  }
  uint64_t v8 = type metadata accessor for Logger();
  sub_100010324(v8, (uint64_t)qword_10170F110);
  int v9 = Logger.logObject.getter();
  os_log_type_t v10 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v9, v10))
  {
    uint64_t v11 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v11 = 0;
    _os_log_impl((void *)&_mh_execute_header, v9, v10, "Cannot read udid from paired device.", v11, 2u);
    swift_slowDealloc();
  }

  uint64_t v12 = v0[22];
  uint64_t v13 = v0[25] + 1;
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)(v0 + 2));
  if (v13 != v12)
  {
    uint64_t v16 = v0[25] + 1;
    v0[25] = v16;
    uint64_t v17 = v0[19];
    sub_10001D010(v0[18] + 40 * v16 + 32, (uint64_t)(v0 + 2));
    uint64_t v7 = sub_10103CC94;
    uint64_t v6 = v17;
    goto LABEL_12;
  }
  swift_bridgeObjectRelease();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v14 = (uint64_t (*)(void))v0[1];
  return v14();
}

uint64_t sub_10103CF30()
{
  uint64_t v2 = v0[26];
  uint64_t v1 = v0[27];
  uint64_t v3 = v0[20];
  uint64_t v4 = v0[21];
  uint64_t v5 = v0[19];
  uint64_t v6 = v5 + v0[24];
  uint64_t v7 = (uint64_t *)(v5 + v0[23]);
  swift_beginAccess();
  swift_bridgeObjectRetain();
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v11 = *v7;
  *uint64_t v7 = 0x8000000000000000;
  sub_100172834(0, v2, v1, isUniquelyReferenced_nonNull_native);
  *uint64_t v7 = v11;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_endAccess();
  static Date.trustedNow.getter(v4);
  uint64_t v9 = type metadata accessor for Date();
  (*(void (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v9 - 8) + 56))(v4, 0, 1, v9);
  sub_1000C69AC(v4, v3);
  swift_beginAccess();
  sub_100C11FB8(v3, v6);
  swift_endAccess();
  return _swift_task_switch(sub_10103D0B8, 0, 0);
}

uint64_t sub_10103D0B8()
{
  uint64_t v15 = v0;
  if (qword_101637390 != -1) {
    swift_once();
  }
  uint64_t v1 = type metadata accessor for Logger();
  sub_100010324(v1, (uint64_t)qword_10170F110);
  swift_bridgeObjectRetain();
  uint64_t v2 = Logger.logObject.getter();
  os_log_type_t v3 = static os_log_type_t.default.getter();
  BOOL v4 = os_log_type_enabled(v2, v3);
  unint64_t v5 = v0[27];
  if (v4)
  {
    uint64_t v6 = v0[26];
    uint64_t v7 = swift_slowAlloc();
    uint64_t v14 = swift_slowAlloc();
    *(_DWORD *)uint64_t v7 = 141558275;
    *(void *)(v7 + 4) = 1752392040;
    *(_WORD *)(v7 + 12) = 2081;
    swift_bridgeObjectRetain();
    *(void *)(v7 + 14) = sub_1008FA0F0(v6, v5, &v14);
    swift_bridgeObjectRelease_n();
    _os_log_impl((void *)&_mh_execute_header, v2, v3, "Currently monitoring bluetooth status for %{private,mask.hash}s", (uint8_t *)v7, 0x16u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {

    swift_bridgeObjectRelease_n();
  }
  uint64_t v8 = v0[22];
  uint64_t v9 = v0[25] + 1;
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)(v0 + 2));
  if (v9 == v8)
  {
    swift_bridgeObjectRelease();
    swift_task_dealloc();
    swift_task_dealloc();
    os_log_type_t v10 = (uint64_t (*)(void))v0[1];
    return v10();
  }
  else
  {
    uint64_t v12 = v0[25] + 1;
    v0[25] = v12;
    uint64_t v13 = v0[19];
    sub_10001D010(v0[18] + 40 * v12 + 32, (uint64_t)(v0 + 2));
    return _swift_task_switch(sub_10103CC94, v13, 0);
  }
}

uint64_t sub_10103D32C()
{
  *(void *)(v1 + 32) = v0;
  *(void *)(v1 + 40) = *v0;
  return _swift_task_switch(sub_10103D374, v0, 0);
}

uint64_t sub_10103D374()
{
  uint64_t v11 = v0;
  if (qword_101637390 != -1) {
    swift_once();
  }
  uint64_t v1 = type metadata accessor for Logger();
  sub_100010324(v1, (uint64_t)qword_10170F110);
  uint64_t v2 = Logger.logObject.getter();
  os_log_type_t v3 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v2, v3))
  {
    uint64_t v4 = swift_slowAlloc();
    uint64_t v10 = swift_slowAlloc();
    *(_DWORD *)uint64_t v4 = 136446466;
    uint64_t v5 = _typeName(_:qualified:)();
    v0[2] = sub_1008FA0F0(v5, v6, &v10);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    *(_WORD *)(v4 + 12) = 2082;
    v0[3] = sub_1008FA0F0(0xD000000000000010, 0x800000010141F500, &v10);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl((void *)&_mh_execute_header, v2, v3, "%{public}s.%{public}s.", (uint8_t *)v4, 0x16u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }

  uint64_t v9 = (uint64_t (*)(void))((char *)&async function pointer to dispatch thunk of WorkItemQueue.invalidate()
                         + async function pointer to dispatch thunk of WorkItemQueue.invalidate());
  uint64_t v7 = (void *)swift_task_alloc();
  v0[6] = v7;
  *uint64_t v7 = v0;
  v7[1] = sub_10103D5C0;
  return v9();
}

uint64_t sub_10103D5C0()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 32);
  swift_task_dealloc();
  return _swift_task_switch(sub_10103D6D0, v1, 0);
}

uint64_t sub_10103D6D0()
{
  sub_10103F7B4();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_10103D730(double a1)
{
  *(void *)(v2 + 112) = v1;
  *(double *)(v2 + 104) = a1;
  sub_10000588C((uint64_t *)&unk_10163AC90);
  *(void *)(v2 + 120) = swift_task_alloc();
  uint64_t v3 = type metadata accessor for Date();
  *(void *)(v2 + 128) = v3;
  *(void *)(v2 + 136) = *(void *)(v3 - 8);
  *(void *)(v2 + 144) = swift_task_alloc();
  *(void *)(v2 + 152) = swift_task_alloc();
  return _swift_task_switch(sub_10103D834, v1, 0);
}

uint64_t sub_10103D834()
{
  uint64_t v1 = *(void *)(v0 + 128);
  uint64_t v2 = *(void *)(v0 + 136);
  uint64_t v3 = *(void *)(v0 + 120);
  uint64_t v4 = *(void *)(v0 + 112) + OBJC_IVAR____TtC12searchpartyd20PairedBluetoothState_monitorStartDate;
  swift_beginAccess();
  sub_10001D074(v4, v3, (uint64_t *)&unk_10163AC90);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v2 + 48))(v3, 1, v1) == 1)
  {
    sub_10001DAB4(*(void *)(v0 + 120), (uint64_t *)&unk_10163AC90);
    if (qword_101637390 != -1) {
      swift_once();
    }
    uint64_t v5 = type metadata accessor for Logger();
    sub_100010324(v5, (uint64_t)qword_10170F110);
    unint64_t v6 = Logger.logObject.getter();
    os_log_type_t v7 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v6, v7))
    {
      uint64_t v8 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v8 = 0;
      _os_log_impl((void *)&_mh_execute_header, v6, v7, "Reading connected devices before starting the monitor!", v8, 2u);
      swift_slowDealloc();
    }

    swift_beginAccess();
    uint64_t v9 = swift_bridgeObjectRetain();
    uint64_t v10 = sub_10103FE84(v9, (uint64_t (*)(char *, unint64_t, uint64_t))sub_10103FFF0);
    swift_bridgeObjectRelease();
    uint64_t v11 = sub_100711028(v10);
    swift_release();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v12 = *(uint64_t (**)(void *))(v0 + 8);
    return v12(v11);
  }
  else
  {
    double v14 = *(double *)(v0 + 104);
    uint64_t v15 = *(void *)(v0 + 144);
    uint64_t v16 = *(void *)(v0 + 128);
    uint64_t v17 = *(void *)(v0 + 136);
    (*(void (**)(void, void, uint64_t))(v17 + 32))(*(void *)(v0 + 152), *(void *)(v0 + 120), v16);
    static Date.trustedNow.getter(v15);
    Date.timeIntervalSince(_:)();
    double v19 = v18;
    uint64_t v20 = *(void (**)(uint64_t, uint64_t))(v17 + 8);
    *(void *)(v0 + 160) = v20;
    *(void *)(v0 + 168) = (v17 + 8) & 0xFFFFFFFFFFFFLL | 0x4F8000000000000;
    v20(v15, v16);
    if (qword_101637390 != -1) {
      swift_once();
    }
    double v21 = v14 - v19;
    uint64_t v22 = type metadata accessor for Logger();
    *(void *)(v0 + 176) = sub_100010324(v22, (uint64_t)qword_10170F110);
    uint64_t v23 = Logger.logObject.getter();
    os_log_type_t v24 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v23, v24))
    {
      uint64_t v25 = (uint8_t *)swift_slowAlloc();
      *(_DWORD *)uint64_t v25 = 134217984;
      *(double *)(v0 + 96) = v21;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      _os_log_impl((void *)&_mh_execute_header, v23, v24, "Waiting up to %f to find connected devices.", v25, 0xCu);
      swift_slowDealloc();
    }

    uint64_t v26 = static Duration.seconds(_:)();
    uint64_t v28 = v27;
    swift_retain();
    unint64_t v29 = (void *)swift_task_alloc();
    *(void *)(v0 + 184) = v29;
    uint64_t v30 = sub_10000588C(&qword_101654A30);
    *unint64_t v29 = v0;
    v29[1] = sub_10103DC84;
    uint64_t v31 = *(void *)(v0 + 112);
    return withTimeout<A>(_:block:)(v0 + 88, v26, v28, &unk_101667B40, v31, v30);
  }
}

uint64_t sub_10103DC84()
{
  uint64_t v2 = *v1;
  *(void *)(*v1 + 192) = v0;
  swift_task_dealloc();
  uint64_t v3 = *(void *)(v2 + 112);
  if (v0)
  {
    uint64_t v4 = sub_10103DE50;
  }
  else
  {
    swift_release();
    uint64_t v4 = sub_10103DDBC;
  }
  return _swift_task_switch(v4, v3, 0);
}

uint64_t sub_10103DDBC()
{
  (*(void (**)(void, void))(v0 + 160))(*(void *)(v0 + 152), *(void *)(v0 + 128));
  uint64_t v1 = *(void *)(v0 + 88);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v2 = *(uint64_t (**)(uint64_t))(v0 + 8);
  return v2(v1);
}

uint64_t sub_10103DE50()
{
  swift_release();
  uint64_t v1 = Logger.logObject.getter();
  os_log_type_t v2 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v1, v2))
  {
    uint64_t v3 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v3 = 0;
    _os_log_impl((void *)&_mh_execute_header, v1, v2, "Sending the device list we have now because of time out.", v3, 2u);
    swift_slowDealloc();
  }
  uint64_t v4 = (void (*)(uint64_t, uint64_t))v0[20];
  uint64_t v5 = v0[19];
  uint64_t v6 = v0[16];

  swift_beginAccess();
  uint64_t v7 = swift_bridgeObjectRetain();
  uint64_t v8 = sub_10103FE84(v7, (uint64_t (*)(char *, unint64_t, uint64_t))sub_10103FFF0);
  swift_bridgeObjectRelease();
  uint64_t v9 = sub_100711028(v8);
  swift_release();
  swift_errorRelease();
  v4(v5, v6);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v10 = (uint64_t (*)(void *))v0[1];
  return v10(v9);
}

uint64_t sub_10103DFF4(uint64_t a1, uint64_t a2)
{
  *(void *)(v2 + 16) = a1;
  *(void *)(v2 + 24) = a2;
  return _swift_task_switch(sub_10103E014, 0, 0);
}

uint64_t sub_10103E014()
{
  uint64_t v1 = (void *)swift_task_alloc();
  v0[4] = v1;
  uint64_t v2 = sub_10000588C(&qword_101654A30);
  *uint64_t v1 = v0;
  v1[1] = sub_10103E0F0;
  uint64_t v3 = v0[2];
  uint64_t v4 = v0[3];
  return withCheckedContinuation<A>(isolation:function:_:)(v3, 0, 0, 0xD00000000000002ELL, 0x800000010141F4D0, sub_101040338, v4, v2);
}

uint64_t sub_10103E0F0()
{
  uint64_t v3 = *v0;
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v3 + 8);
  return v1();
}

uint64_t sub_10103E1E8(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_10000588C(&qword_1016578B8);
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = *(void *)(v5 + 64);
  __chkstk_darwin(v4);
  (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))((char *)&v10 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0), a1, v4);
  unint64_t v7 = (*(unsigned __int8 *)(v5 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
  uint64_t v8 = swift_allocObject();
  *(void *)(v8 + 16) = a2;
  (*(void (**)(unint64_t, char *, uint64_t))(v5 + 32))(v8 + v7, (char *)&v10 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0), v4);
  swift_retain();
  dispatch thunk of WorkItemQueue.enqueue(_:)();
  swift_release();
  return swift_release();
}

uint64_t sub_10103E33C(uint64_t a1, uint64_t a2)
{
  *(void *)(v2 + 48) = a1;
  *(void *)(v2 + 56) = a2;
  return _swift_task_switch(sub_10103E360, a1, 0);
}

uint64_t sub_10103E360()
{
  v0[8] = OBJC_IVAR____TtC12searchpartyd20PairedBluetoothState_dictionaryOfConnected;
  swift_beginAccess();
  uint64_t v1 = swift_bridgeObjectRetain();
  uint64_t v2 = sub_10103FE84(v1, (uint64_t (*)(char *, unint64_t, uint64_t))sub_101040140);
  v0[9] = 0;
  swift_bridgeObjectRelease();
  v0[10] = *(void *)(v2 + 16);
  swift_release();
  return _swift_task_switch(sub_10103E438, 0, 0);
}

uint64_t sub_10103E438()
{
  if (v0[10])
  {
    uint64_t v1 = (void *)swift_task_alloc();
    v0[11] = v1;
    *uint64_t v1 = v0;
    v1[1] = sub_10103E5D0;
    uint64_t v2 = v0[7];
    return sub_10103F3D8(v2);
  }
  else
  {
    if (qword_101637390 != -1) {
      swift_once();
    }
    uint64_t v4 = type metadata accessor for Logger();
    sub_100010324(v4, (uint64_t)qword_10170F110);
    uint64_t v5 = Logger.logObject.getter();
    os_log_type_t v6 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v5, v6))
    {
      unint64_t v7 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)unint64_t v7 = 0;
      _os_log_impl((void *)&_mh_execute_header, v5, v6, "Fetching devices without timeout.", v7, 2u);
      swift_slowDealloc();
    }
    uint64_t v8 = v0[6];

    return _swift_task_switch(sub_10103E6C8, v8, 0);
  }
}

uint64_t sub_10103E5D0()
{
  uint64_t v3 = *v0;
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v3 + 8);
  return v1();
}

uint64_t sub_10103E6C8()
{
  uint64_t v1 = swift_bridgeObjectRetain();
  uint64_t v2 = sub_10103FE84(v1, (uint64_t (*)(char *, unint64_t, uint64_t))sub_10103FFF0);
  swift_bridgeObjectRelease();
  *(void *)(v0 + 96) = sub_100711028(v2);
  swift_release();
  return _swift_task_switch(sub_10103E77C, 0, 0);
}

uint64_t sub_10103E77C()
{
  v0[5] = v0[12];
  sub_10000588C(&qword_1016578B8);
  CheckedContinuation.resume(returning:)();
  uint64_t v1 = (uint64_t (*)(void))v0[1];
  return v1();
}

void sub_10103E800(uint64_t a1, uint64_t a2, int a3)
{
  int v36 = a3;
  uint64_t v37 = a1;
  uint64_t v38 = a2;
  uint64_t v4 = type metadata accessor for UUID();
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v34 = (char *)&v33 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = sub_10000588C((uint64_t *)&unk_10166EAF0);
  uint64_t v8 = v7 - 8;
  __chkstk_darwin(v7);
  uint64_t v10 = (char *)&v33 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = sub_10000588C(&qword_101638CF0);
  uint64_t v12 = __chkstk_darwin(v11 - 8);
  double v14 = (char *)&v33 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = __chkstk_darwin(v12);
  uint64_t v17 = (char *)&v33 - v16;
  __chkstk_darwin(v15);
  double v19 = (char *)&v33 - v18;
  uint64_t v35 = v3;
  WorkItemQueue.id.getter();
  (*(void (**)(char *, void, uint64_t, uint64_t))(v5 + 56))(v19, 0, 1, v4);
  type metadata accessor for WorkItemQueue();
  static WorkItemQueue.currentWorkItemQueueIdentifier.getter();
  uint64_t v20 = (uint64_t)&v10[*(int *)(v8 + 56)];
  sub_10001D074((uint64_t)v19, (uint64_t)v10, &qword_101638CF0);
  sub_10001D074((uint64_t)v17, v20, &qword_101638CF0);
  double v21 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v5 + 48);
  if (v21((uint64_t)v10, 1, v4) == 1)
  {
    sub_10001DAB4((uint64_t)v17, &qword_101638CF0);
    sub_10001DAB4((uint64_t)v19, &qword_101638CF0);
    if (v21(v20, 1, v4) == 1)
    {
      sub_10001DAB4((uint64_t)v10, &qword_101638CF0);
LABEL_13:
      unint64_t v29 = (uint64_t *)(v35 + OBJC_IVAR____TtC12searchpartyd20PairedBluetoothState_dictionaryOfConnected);
      swift_beginAccess();
      uint64_t v30 = v38;
      swift_bridgeObjectRetain();
      char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      uint64_t v39 = *v29;
      *unint64_t v29 = 0x8000000000000000;
      if (v36) {
        char v32 = 1;
      }
      else {
        char v32 = 2;
      }
      sub_100172834(v32, v37, v30, isUniquelyReferenced_nonNull_native);
      *unint64_t v29 = v39;
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_endAccess();
      return;
    }
    goto LABEL_6;
  }
  sub_10001D074((uint64_t)v10, (uint64_t)v14, &qword_101638CF0);
  if (v21(v20, 1, v4) == 1)
  {
    sub_10001DAB4((uint64_t)v17, &qword_101638CF0);
    sub_10001DAB4((uint64_t)v19, &qword_101638CF0);
    (*(void (**)(char *, uint64_t))(v5 + 8))(v14, v4);
LABEL_6:
    sub_10001DAB4((uint64_t)v10, (uint64_t *)&unk_10166EAF0);
    goto LABEL_7;
  }
  uint64_t v26 = v34;
  (*(void (**)(char *, uint64_t, uint64_t))(v5 + 32))(v34, v20, v4);
  sub_100339E68();
  char v27 = dispatch thunk of static Equatable.== infix(_:_:)();
  uint64_t v28 = *(void (**)(char *, uint64_t))(v5 + 8);
  v28(v26, v4);
  sub_10001DAB4((uint64_t)v17, &qword_101638CF0);
  sub_10001DAB4((uint64_t)v19, &qword_101638CF0);
  v28(v14, v4);
  sub_10001DAB4((uint64_t)v10, &qword_101638CF0);
  if (v27) {
    goto LABEL_13;
  }
LABEL_7:
  if (qword_101637390 != -1) {
    swift_once();
  }
  uint64_t v22 = type metadata accessor for Logger();
  sub_100010324(v22, (uint64_t)qword_10170F110);
  uint64_t v23 = Logger.logObject.getter();
  os_log_type_t v24 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v23, v24))
  {
    uint64_t v25 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v25 = 0;
    _os_log_impl((void *)&_mh_execute_header, v23, v24, "Incorrect work item queue usage for setIsNearby.", v25, 2u);
    swift_slowDealloc();
  }
}

void sub_10103ECE0()
{
  uint64_t v1 = sub_10000588C(&qword_1016578B8);
  uint64_t v46 = *(void *)(v1 - 8);
  uint64_t v47 = v1;
  __chkstk_darwin(v1);
  uint64_t v50 = (char *)&v45 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v3 = type metadata accessor for UUID();
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  unint64_t v48 = (char *)&v45 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = sub_10000588C((uint64_t *)&unk_10166EAF0);
  uint64_t v7 = v6 - 8;
  __chkstk_darwin(v6);
  uint64_t v9 = (char *)&v45 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = sub_10000588C(&qword_101638CF0);
  uint64_t v11 = __chkstk_darwin(v10 - 8);
  uint64_t v13 = (char *)&v45 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = __chkstk_darwin(v11);
  uint64_t v16 = (char *)&v45 - v15;
  __chkstk_darwin(v14);
  uint64_t v18 = (char *)&v45 - v17;
  uint64_t v49 = v0;
  WorkItemQueue.id.getter();
  (*(void (**)(char *, void, uint64_t, uint64_t))(v4 + 56))(v18, 0, 1, v3);
  type metadata accessor for WorkItemQueue();
  static WorkItemQueue.currentWorkItemQueueIdentifier.getter();
  uint64_t v19 = (uint64_t)&v9[*(int *)(v7 + 56)];
  sub_10001D074((uint64_t)v18, (uint64_t)v9, &qword_101638CF0);
  sub_10001D074((uint64_t)v16, v19, &qword_101638CF0);
  uint64_t v20 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v4 + 48);
  if (v20((uint64_t)v9, 1, v3) != 1)
  {
    sub_10001D074((uint64_t)v9, (uint64_t)v13, &qword_101638CF0);
    if (v20(v19, 1, v3) != 1)
    {
      uint64_t v26 = v48;
      (*(void (**)(char *, uint64_t, uint64_t))(v4 + 32))(v48, v19, v3);
      sub_100339E68();
      char v27 = dispatch thunk of static Equatable.== infix(_:_:)();
      uint64_t v28 = *(void (**)(char *, uint64_t))(v4 + 8);
      v28(v26, v3);
      sub_10001DAB4((uint64_t)v16, &qword_101638CF0);
      sub_10001DAB4((uint64_t)v18, &qword_101638CF0);
      v28(v13, v3);
      sub_10001DAB4((uint64_t)v9, &qword_101638CF0);
      if (v27) {
        goto LABEL_14;
      }
LABEL_7:
      if (qword_101637390 != -1) {
        swift_once();
      }
      uint64_t v21 = type metadata accessor for Logger();
      sub_100010324(v21, (uint64_t)qword_10170F110);
      uint64_t v22 = Logger.logObject.getter();
      os_log_type_t v23 = static os_log_type_t.error.getter();
      if (!os_log_type_enabled(v22, v23)) {
        goto LABEL_12;
      }
      os_log_type_t v24 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)os_log_type_t v24 = 0;
      uint64_t v25 = "Incorrect work item queue usage for resumeContinuationsIfNeeded.";
      goto LABEL_11;
    }
    sub_10001DAB4((uint64_t)v16, &qword_101638CF0);
    sub_10001DAB4((uint64_t)v18, &qword_101638CF0);
    (*(void (**)(char *, uint64_t))(v4 + 8))(v13, v3);
LABEL_6:
    sub_10001DAB4((uint64_t)v9, (uint64_t *)&unk_10166EAF0);
    goto LABEL_7;
  }
  sub_10001DAB4((uint64_t)v16, &qword_101638CF0);
  sub_10001DAB4((uint64_t)v18, &qword_101638CF0);
  if (v20(v19, 1, v3) != 1) {
    goto LABEL_6;
  }
  sub_10001DAB4((uint64_t)v9, &qword_101638CF0);
LABEL_14:
  unint64_t v29 = (uint64_t *)(v49 + OBJC_IVAR____TtC12searchpartyd20PairedBluetoothState_continuations);
  swift_beginAccess();
  uint64_t v30 = *v29;
  swift_beginAccess();
  swift_bridgeObjectRetain();
  uint64_t v31 = swift_bridgeObjectRetain();
  uint64_t v32 = sub_10103FE84(v31, (uint64_t (*)(char *, unint64_t, uint64_t))sub_101040140);
  swift_bridgeObjectRelease();
  uint64_t v33 = *(void *)(v32 + 16);
  swift_release();
  if (!v33 && *(void *)(*v29 + 16))
  {
    *unint64_t v29 = (uint64_t)_swiftEmptyArrayStorage;
    swift_bridgeObjectRelease();
    uint64_t v34 = swift_bridgeObjectRetain();
    uint64_t v35 = sub_10103FE84(v34, (uint64_t (*)(char *, unint64_t, uint64_t))sub_10103FFF0);
    swift_bridgeObjectRelease();
    int v36 = sub_100711028(v35);
    swift_release();
    uint64_t v37 = *(void *)(v30 + 16);
    if (v37)
    {
      uint64_t v38 = v47;
      uint64_t v39 = *(void (**)(char *, uint64_t, uint64_t))(v46 + 16);
      uint64_t v40 = v30 + ((*(unsigned __int8 *)(v46 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v46 + 80));
      uint64_t v41 = *(void *)(v46 + 72);
      uint64_t v42 = (void (**)(char *, uint64_t))(v46 + 8);
      uint64_t v43 = v50;
      do
      {
        v39(v43, v40, v38);
        os_log_type_t v51 = v36;
        swift_retain();
        CheckedContinuation.resume(returning:)();
        uint64_t v43 = v50;
        (*v42)(v50, v38);
        v40 += v41;
        --v37;
      }
      while (v37);
    }
    swift_release();
    swift_bridgeObjectRelease();
    if (qword_101637390 != -1) {
      swift_once();
    }
    uint64_t v44 = type metadata accessor for Logger();
    sub_100010324(v44, (uint64_t)qword_10170F110);
    uint64_t v22 = Logger.logObject.getter();
    os_log_type_t v23 = static os_log_type_t.default.getter();
    if (!os_log_type_enabled(v22, v23)) {
      goto LABEL_12;
    }
    os_log_type_t v24 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)os_log_type_t v24 = 0;
    uint64_t v25 = "Removed and resumed all continuations.";
LABEL_11:
    _os_log_impl((void *)&_mh_execute_header, v22, v23, v25, v24, 2u);
    swift_slowDealloc();
LABEL_12:

    return;
  }
  swift_bridgeObjectRelease();
}

uint64_t sub_10103F3D8(uint64_t a1)
{
  v2[7] = a1;
  v2[8] = v1;
  v2[9] = *v1;
  uint64_t v3 = sub_10000588C(&qword_1016578B8);
  v2[10] = v3;
  v2[11] = *(void *)(v3 - 8);
  v2[12] = swift_task_alloc();
  return _swift_task_switch(sub_10103F4C4, v1, 0);
}

uint64_t sub_10103F4C4()
{
  uint64_t v19 = v0;
  if (qword_101637390 != -1) {
    swift_once();
  }
  uint64_t v1 = type metadata accessor for Logger();
  sub_100010324(v1, (uint64_t)qword_10170F110);
  uint64_t v2 = Logger.logObject.getter();
  os_log_type_t v3 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v2, v3))
  {
    uint64_t v4 = swift_slowAlloc();
    uint64_t v18 = swift_slowAlloc();
    *(_DWORD *)uint64_t v4 = 136446466;
    uint64_t v5 = _typeName(_:qualified:)();
    v0[5] = sub_1008FA0F0(v5, v6, &v18);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    *(_WORD *)(v4 + 12) = 2082;
    v0[6] = sub_1008FA0F0(0xD00000000000001ELL, 0x800000010141F4B0, &v18);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl((void *)&_mh_execute_header, v2, v3, "%{public}s.%{public}s.", (uint8_t *)v4, 0x16u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }

  uint64_t v7 = v0[8];
  (*(void (**)(void, void, void))(v0[11] + 16))(v0[12], v0[7], v0[10]);
  uint64_t v8 = (unint64_t *)(v7 + OBJC_IVAR____TtC12searchpartyd20PairedBluetoothState_continuations);
  swift_beginAccess();
  unint64_t v9 = *v8;
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  *uint64_t v8 = v9;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
    unint64_t v9 = sub_100A7157C(0, *(void *)(v9 + 16) + 1, 1, v9);
    *uint64_t v8 = v9;
  }
  unint64_t v12 = *(void *)(v9 + 16);
  unint64_t v11 = *(void *)(v9 + 24);
  if (v12 >= v11 >> 1)
  {
    unint64_t v9 = sub_100A7157C(v11 > 1, v12 + 1, 1, v9);
    *uint64_t v8 = v9;
  }
  uint64_t v13 = v0[11];
  uint64_t v14 = v0[12];
  uint64_t v15 = v0[10];
  *(void *)(v9 + 16) = v12 + 1;
  (*(void (**)(unint64_t, uint64_t, uint64_t))(v13 + 32))(v9+ ((*(unsigned __int8 *)(v13 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v13 + 80))+ *(void *)(v13 + 72) * v12, v14, v15);
  swift_endAccess();
  swift_task_dealloc();
  uint64_t v16 = (uint64_t (*)(void))v0[1];
  return v16();
}

uint64_t sub_10103F7B4()
{
  uint64_t v1 = v0;
  uint64_t v2 = sub_10000588C(&qword_1016578B8);
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  uint64_t v5 = (char *)&v25 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_101637390 != -1) {
    swift_once();
  }
  uint64_t v6 = type metadata accessor for Logger();
  sub_100010324(v6, (uint64_t)qword_10170F110);
  uint64_t v7 = Logger.logObject.getter();
  os_log_type_t v8 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v7, v8))
  {
    uint64_t v9 = swift_slowAlloc();
    char v27 = (void (**)(char *, uint64_t))swift_slowAlloc();
    v30[0] = (uint64_t)v27;
    *(_DWORD *)uint64_t v9 = 136446466;
    uint64_t v28 = v1;
    uint64_t v10 = _typeName(_:qualified:)();
    unint64_t v29 = (void *)sub_1008FA0F0(v10, v11, v30);
    uint64_t v1 = v28;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    *(_WORD *)(v9 + 12) = 2082;
    unint64_t v29 = (void *)sub_1008FA0F0(0xD000000000000017, 0x800000010141F490, v30);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl((void *)&_mh_execute_header, v7, v8, "%{public}s.%{public}s.", (uint8_t *)v9, 0x16u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }

  unint64_t v12 = (uint64_t *)(v1 + OBJC_IVAR____TtC12searchpartyd20PairedBluetoothState_continuations);
  swift_beginAccess();
  uint64_t v13 = *v12;
  *unint64_t v12 = (uint64_t)_swiftEmptyArrayStorage;
  uint64_t v14 = *(void *)(v13 + 16);
  if (v14)
  {
    uint64_t v17 = *(void (**)(char *, uint64_t, uint64_t))(v3 + 16);
    uint64_t v16 = v3 + 16;
    uint64_t v15 = v17;
    unint64_t v18 = (*(unsigned __int8 *)(v16 + 64) + 32) & ~(unint64_t)*(unsigned __int8 *)(v16 + 64);
    uint64_t v25 = v13;
    uint64_t v26 = v17;
    uint64_t v19 = v13 + v18;
    uint64_t v20 = *(void *)(v16 + 56);
    char v27 = (void (**)(char *, uint64_t))(v16 - 8);
    uint64_t v28 = v20;
    v17(v5, v13 + v18, v2);
    while (1)
    {
      unint64_t v29 = _swiftEmptyArrayStorage;
      CheckedContinuation.resume(returning:)();
      uint64_t v21 = Logger.logObject.getter();
      os_log_type_t v22 = static os_log_type_t.debug.getter();
      if (os_log_type_enabled(v21, v22))
      {
        os_log_type_t v23 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)os_log_type_t v23 = 0;
        _os_log_impl((void *)&_mh_execute_header, v21, v22, "Resumed a continuation during clear / stop.", v23, 2u);
        uint64_t v15 = v26;
        swift_slowDealloc();
      }

      (*v27)(v5, v2);
      v19 += v28;
      if (!--v14) {
        break;
      }
      v15(v5, v19, v2);
    }
  }
  return swift_bridgeObjectRelease();
}

uint64_t sub_10103FB98()
{
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v0 + 112);
  swift_release();
  sub_10001DAB4(v0 + OBJC_IVAR____TtC12searchpartyd20PairedBluetoothState_monitorStartDate, (uint64_t *)&unk_10163AC90);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_defaultActor_destroy();

  return _swift_defaultActor_deallocate(v0);
}

uint64_t sub_10103FC10()
{
  return type metadata accessor for PairedBluetoothState();
}

uint64_t type metadata accessor for PairedBluetoothState()
{
  uint64_t result = qword_1016679A8;
  if (!qword_1016679A8) {
    return swift_getSingletonMetadata();
  }
  return result;
}

void sub_10103FC64()
{
  sub_1000C7D80();
  if (v0 <= 0x3F) {
    swift_updateClassMetadata2();
  }
}

unsigned char *storeEnumTagSinglePayload for PairedBluetoothState.ConnectedState(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 2 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 2) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFE) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFD)
  {
    unsigned int v6 = ((a2 - 254) >> 8) + 1;
    *uint64_t result = a2 + 2;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x10103FDF4);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 2;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for PairedBluetoothState.ConnectedState()
{
  return &type metadata for PairedBluetoothState.ConnectedState;
}

unint64_t sub_10103FE30()
{
  unint64_t result = qword_101667B28;
  if (!qword_101667B28)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, &qword_101667B28);
  }
  return result;
}

uint64_t sub_10103FE84(uint64_t isStackAllocationSafe, uint64_t (*a2)(char *, unint64_t, uint64_t))
{
  uint64_t v4 = v2;
  uint64_t v5 = isStackAllocationSafe;
  char v6 = *(unsigned char *)(isStackAllocationSafe + 32);
  unint64_t v7 = (unint64_t)((1 << v6) + 63) >> 6;
  size_t v8 = 8 * v7;
  if ((v6 & 0x3Fu) <= 0xD
    || (isStackAllocationSafe = swift_stdlib_isStackAllocationSafe(), (isStackAllocationSafe & 1) != 0))
  {
    __chkstk_darwin(isStackAllocationSafe);
    bzero((char *)&v12 - ((v8 + 15) & 0x3FFFFFFFFFFFFFF0), v8);
    uint64_t v9 = a2((char *)&v12 - ((v8 + 15) & 0x3FFFFFFFFFFFFFF0), v7, v5);
    if (v2) {
      swift_willThrow();
    }
    else {
      return v9;
    }
  }
  else
  {
    uint64_t v10 = (void *)swift_slowAlloc();
    bzero(v10, v8);
    uint64_t v4 = a2((char *)v10, v7, v5);
    swift_slowDealloc();
  }
  return v4;
}

unint64_t *sub_10103FFF0(unint64_t *result, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = 0;
  int64_t v5 = 0;
  uint64_t v6 = a3 + 64;
  uint64_t v7 = 1 << *(unsigned char *)(a3 + 32);
  uint64_t v8 = -1;
  if (v7 < 64) {
    uint64_t v8 = ~(-1 << v7);
  }
  unint64_t v9 = v8 & *(void *)(a3 + 64);
  int64_t v10 = (unint64_t)(v7 + 63) >> 6;
  while (1)
  {
    if (v9)
    {
      unint64_t v11 = __clz(__rbit64(v9));
      v9 &= v9 - 1;
      unint64_t v12 = v11 | (v5 << 6);
      goto LABEL_5;
    }
    int64_t v13 = v5 + 1;
    if (__OFADD__(v5, 1))
    {
      __break(1u);
      goto LABEL_26;
    }
    if (v13 >= v10) {
      return (unint64_t *)sub_1002AD6CC(result, a2, v4, a3);
    }
    unint64_t v14 = *(void *)(v6 + 8 * v13);
    ++v5;
    if (!v14)
    {
      int64_t v5 = v13 + 1;
      if (v13 + 1 >= v10) {
        return (unint64_t *)sub_1002AD6CC(result, a2, v4, a3);
      }
      unint64_t v14 = *(void *)(v6 + 8 * v5);
      if (!v14)
      {
        int64_t v5 = v13 + 2;
        if (v13 + 2 >= v10) {
          return (unint64_t *)sub_1002AD6CC(result, a2, v4, a3);
        }
        unint64_t v14 = *(void *)(v6 + 8 * v5);
        if (!v14) {
          break;
        }
      }
    }
LABEL_20:
    unint64_t v9 = (v14 - 1) & v14;
    unint64_t v12 = __clz(__rbit64(v14)) + (v5 << 6);
LABEL_5:
    if (*(unsigned char *)(*(void *)(a3 + 56) + v12) == 1)
    {
      *(unint64_t *)((char *)result + ((v12 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v12;
      if (__OFADD__(v4++, 1))
      {
        __break(1u);
        return (unint64_t *)sub_1002AD6CC(result, a2, v4, a3);
      }
    }
  }
  int64_t v15 = v13 + 3;
  if (v15 >= v10) {
    return (unint64_t *)sub_1002AD6CC(result, a2, v4, a3);
  }
  unint64_t v14 = *(void *)(v6 + 8 * v15);
  if (v14)
  {
    int64_t v5 = v15;
    goto LABEL_20;
  }
  while (1)
  {
    int64_t v5 = v15 + 1;
    if (__OFADD__(v15, 1)) {
      break;
    }
    if (v5 >= v10) {
      return (unint64_t *)sub_1002AD6CC(result, a2, v4, a3);
    }
    unint64_t v14 = *(void *)(v6 + 8 * v5);
    ++v15;
    if (v14) {
      goto LABEL_20;
    }
  }
LABEL_26:
  __break(1u);
  return result;
}

unint64_t *sub_101040140(unint64_t *result, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = 0;
  int64_t v5 = 0;
  uint64_t v6 = a3 + 64;
  uint64_t v7 = 1 << *(unsigned char *)(a3 + 32);
  uint64_t v8 = -1;
  if (v7 < 64) {
    uint64_t v8 = ~(-1 << v7);
  }
  unint64_t v9 = v8 & *(void *)(a3 + 64);
  int64_t v10 = (unint64_t)(v7 + 63) >> 6;
  while (1)
  {
    if (v9)
    {
      unint64_t v11 = __clz(__rbit64(v9));
      v9 &= v9 - 1;
      unint64_t v12 = v11 | (v5 << 6);
      goto LABEL_5;
    }
    int64_t v13 = v5 + 1;
    if (__OFADD__(v5, 1))
    {
      __break(1u);
      goto LABEL_26;
    }
    if (v13 >= v10) {
      return (unint64_t *)sub_1002AD6CC(result, a2, v4, a3);
    }
    unint64_t v14 = *(void *)(v6 + 8 * v13);
    ++v5;
    if (!v14)
    {
      int64_t v5 = v13 + 1;
      if (v13 + 1 >= v10) {
        return (unint64_t *)sub_1002AD6CC(result, a2, v4, a3);
      }
      unint64_t v14 = *(void *)(v6 + 8 * v5);
      if (!v14)
      {
        int64_t v5 = v13 + 2;
        if (v13 + 2 >= v10) {
          return (unint64_t *)sub_1002AD6CC(result, a2, v4, a3);
        }
        unint64_t v14 = *(void *)(v6 + 8 * v5);
        if (!v14) {
          break;
        }
      }
    }
LABEL_20:
    unint64_t v9 = (v14 - 1) & v14;
    unint64_t v12 = __clz(__rbit64(v14)) + (v5 << 6);
LABEL_5:
    if (!*(unsigned char *)(*(void *)(a3 + 56) + v12))
    {
      *(unint64_t *)((char *)result + ((v12 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v12;
      if (__OFADD__(v4++, 1))
      {
        __break(1u);
        return (unint64_t *)sub_1002AD6CC(result, a2, v4, a3);
      }
    }
  }
  int64_t v15 = v13 + 3;
  if (v15 >= v10) {
    return (unint64_t *)sub_1002AD6CC(result, a2, v4, a3);
  }
  unint64_t v14 = *(void *)(v6 + 8 * v15);
  if (v14)
  {
    int64_t v5 = v15;
    goto LABEL_20;
  }
  while (1)
  {
    int64_t v5 = v15 + 1;
    if (__OFADD__(v15, 1)) {
      break;
    }
    if (v5 >= v10) {
      return (unint64_t *)sub_1002AD6CC(result, a2, v4, a3);
    }
    unint64_t v14 = *(void *)(v6 + 8 * v5);
    ++v15;
    if (v14) {
      goto LABEL_20;
    }
  }
LABEL_26:
  __break(1u);
  return result;
}

uint64_t sub_10104028C(uint64_t a1)
{
  uint64_t v4 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v4;
  *uint64_t v4 = v2;
  v4[2] = a1;
  v4[3] = v1;
  v4[1] = sub_10001D2E4;
  return _swift_task_switch(sub_10103E014, 0, 0);
}

uint64_t sub_101040338(uint64_t a1)
{
  return sub_10103E1E8(a1, v1);
}

uint64_t sub_101040340()
{
  uint64_t v1 = sub_10000588C(&qword_1016578B8);
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 24) & ~v3;
  uint64_t v5 = v4 + *(void *)(v2 + 64);
  uint64_t v6 = v3 | 7;
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);

  return _swift_deallocObject(v0, v5, v6);
}

uint64_t sub_101040410()
{
  uint64_t v2 = *(void *)(sub_10000588C(&qword_1016578B8) - 8);
  uint64_t v3 = *(void *)(v0 + 16);
  uint64_t v4 = v0 + ((*(unsigned __int8 *)(v2 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80));
  uint64_t v5 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v5;
  *uint64_t v5 = v1;
  v5[1] = sub_100033F68;
  v5[6] = v3;
  v5[7] = v4;
  return _swift_task_switch(sub_10103E360, v3, 0);
}

void sub_1010404FC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  sub_10001D010(a1, (uint64_t)v31);
  sub_10000588C(&qword_10163A8C8);
  sub_10103C6A8();
  if (!swift_dynamicCast()) {
    return;
  }
  uint64_t v4 = sub_101040B88();
  if (!v4)
  {
    if (qword_101637390 != -1) {
      swift_once();
    }
    uint64_t v16 = type metadata accessor for Logger();
    sub_100010324(v16, (uint64_t)qword_10170F110);
    uint64_t v5 = Logger.logObject.getter();
    os_log_type_t v17 = static os_log_type_t.error.getter();
    if (!os_log_type_enabled(v5, v17))
    {

      return;
    }
    unint64_t v18 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)unint64_t v18 = 0;
    _os_log_impl((void *)&_mh_execute_header, v5, v17, "Cannot start monitor for device without identifier.", v18, 2u);
    swift_slowDealloc();

    goto LABEL_22;
  }
  uint64_t v5 = v4;
  uint64_t v6 = OBJC_IVAR____TtC12searchpartyd27BluetoothConnectionObserver_currentlyMonitoringDevices;
  uint64_t v7 = *(void *)(a3 + OBJC_IVAR____TtC12searchpartyd27BluetoothConnectionObserver_currentlyMonitoringDevices);
  __chkstk_darwin(v4);
  swift_retain();
  os_unfair_lock_lock((os_unfair_lock_t)(v7 + 24));
  sub_101040AC0((uint64_t *)(v7 + 16), (BOOL *)v31);
  os_unfair_lock_unlock((os_unfair_lock_t)(v7 + 24));
  char v8 = v31[0];
  swift_release();
  if ((v8 & 1) == 0)
  {
    *(void *)(a3 + OBJC_IVAR____TtC12searchpartyd27BluetoothConnectionObserver_delegate + 8) = &off_101603550;
    swift_unknownObjectWeakAssign();
    id v19 = [objc_allocWithZone((Class)NRDeviceMonitor) initWithDeviceIdentifier:v5 delegate:a3 queue:*(void *)(a3 + OBJC_IVAR____TtC12searchpartyd27BluetoothConnectionObserver_bluetoothObserverQueue)];
    uint64_t v20 = *(os_unfair_lock_s **)(a3 + v6);
    __chkstk_darwin(v19);
    swift_retain();
    os_unfair_lock_lock(v20 + 6);
    sub_101040ADC((uint64_t)&v20[4]);
    os_unfair_lock_unlock(v20 + 6);
    swift_release();
    if (qword_101637390 != -1) {
      swift_once();
    }
    uint64_t v21 = type metadata accessor for Logger();
    sub_100010324(v21, (uint64_t)qword_10170F110);
    id v22 = v30;
    os_log_type_t v23 = Logger.logObject.getter();
    os_log_type_t v24 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v23, v24))
    {
      uint64_t v25 = swift_slowAlloc();
      uint64_t v26 = swift_slowAlloc();
      *(_DWORD *)uint64_t v25 = 141558275;
      v31[0] = v26;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v25 + 12) = 2081;
      uint64_t v27 = sub_10103B5A8();
      if (v28)
      {
        unint64_t v29 = v28;
      }
      else
      {
        uint64_t v27 = 0;
        unint64_t v29 = 0xE000000000000000;
      }
      sub_1008FA0F0(v27, v29, v31);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();

      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v23, v24, "Monitor started for %{private,mask.hash}s", (uint8_t *)v25, 0x16u);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      return;
    }

LABEL_22:
    return;
  }
  if (qword_101637390 != -1) {
    swift_once();
  }
  uint64_t v9 = type metadata accessor for Logger();
  sub_100010324(v9, (uint64_t)qword_10170F110);
  int64_t v10 = v5;
  unint64_t v11 = Logger.logObject.getter();
  os_log_type_t v12 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v11, v12))
  {
    uint64_t v13 = swift_slowAlloc();
    unint64_t v14 = (void *)swift_slowAlloc();
    *(_DWORD *)uint64_t v13 = 141558275;
    v31[0] = 1752392040;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v13 + 12) = 2113;
    v31[0] = (uint64_t)v10;
    int64_t v15 = v10;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *unint64_t v14 = v5;

    _os_log_impl((void *)&_mh_execute_header, v11, v12, "Monitor already started for device %{private,mask.hash}@.", (uint8_t *)v13, 0x16u);
    sub_10000588C((uint64_t *)&unk_101638EA0);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
  }
}

void sub_101040AC0(uint64_t *a1@<X0>, BOOL *a2@<X8>)
{
  sub_101041998(a1, *(void **)(v2 + 16), a2);
}

void sub_101040ADC(uint64_t a1)
{
  sub_101040DA8(a1, *(void **)(v1 + 16), *(void **)(v1 + 24));
}

unint64_t sub_101040AF8(uint64_t a1)
{
  unint64_t result = sub_101040B20();
  *(void *)(a1 + 8) = result;
  return result;
}

unint64_t sub_101040B20()
{
  unint64_t result = qword_101667B60;
  if (!qword_101667B60)
  {
    sub_10001D4B0(255, (unint64_t *)&qword_1016608B0);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_101667B60);
  }
  return result;
}

id sub_101040B88()
{
  uint64_t v0 = sub_10000588C(&qword_101638CF0);
  __chkstk_darwin(v0 - 8);
  uint64_t v2 = (char *)&v14 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v3 = type metadata accessor for UUID();
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  uint64_t v6 = (char *)&v14 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = (void *)sub_10103B4BC();
  if (!v7)
  {
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v4 + 56))(v2, 1, 1, v3);
    goto LABEL_5;
  }
  char v8 = v7;
  id v9 = [v7 UUIDString];

  static String._unconditionallyBridgeFromObjectiveC(_:)();
  UUID.init(uuidString:)();
  swift_bridgeObjectRelease();
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v4 + 48))(v2, 1, v3) == 1)
  {
LABEL_5:
    sub_10001DAB4((uint64_t)v2, &qword_101638CF0);
    return 0;
  }
  (*(void (**)(char *, char *, uint64_t))(v4 + 32))(v6, v2, v3);
  int64_t v10 = self;
  Class isa = UUID._bridgeToObjectiveC()().super.isa;
  id v12 = [v10 newDeviceIdentifierWithBluetoothUUID:isa];

  (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
  return v12;
}

void sub_101040DA8(uint64_t a1, void *a2, void *a3)
{
  id v4 = a2;
  sub_100EE7DF0((uint64_t)a3, (uint64_t)v4);
}

void sub_101040DF8(void *a1, int a2)
{
  uint64_t v3 = v2;
  LODWORD(v55) = a2;
  uint64_t v5 = type metadata accessor for UUID();
  uint64_t v56 = *(void *)(v5 - 8);
  uint64_t v6 = __chkstk_darwin(v5);
  char v8 = (char *)&v50 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = __chkstk_darwin(v6);
  unint64_t v11 = (char *)&v50 - v10;
  __chkstk_darwin(v9);
  uint64_t v13 = (char *)&v50 - v12;
  if (qword_101637390 != -1) {
    swift_once();
  }
  uint64_t v54 = v8;
  uint64_t v14 = type metadata accessor for Logger();
  uint64_t v15 = sub_100010324(v14, (uint64_t)qword_10170F110);
  id v16 = a1;
  uint64_t v53 = v15;
  os_log_type_t v17 = Logger.logObject.getter();
  os_log_type_t v18 = static os_log_type_t.default.getter();
  id v19 = &selRef_moveItemAtURL_toURL_error_;
  uint64_t v20 = &selRef_moveItemAtURL_toURL_error_;
  if (os_log_type_enabled(v17, v18))
  {
    uint64_t v21 = swift_slowAlloc();
    uint64_t v51 = v3;
    uint64_t v22 = v21;
    unint64_t v58 = swift_slowAlloc();
    *(_DWORD *)uint64_t v22 = 141558531;
    uint64_t v57 = 1752392040;
    os_log_type_t v52 = v11;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v22 + 12) = 2081;
    id v23 = [v16 deviceIdentifier:v22 + 14];
    id v24 = [v23 nrDeviceIdentifier];

    static UUID._unconditionallyBridgeFromObjectiveC(_:)();
    sub_101041D68((unint64_t *)&qword_101638B10, (void (*)(uint64_t))&type metadata accessor for UUID);
    uint64_t v25 = dispatch thunk of CustomStringConvertible.description.getter();
    unint64_t v27 = v26;
    (*(void (**)(char *, uint64_t))(v56 + 8))(v13, v5);
    uint64_t v28 = v25;
    id v19 = &selRef_moveItemAtURL_toURL_error_;
    uint64_t v57 = sub_1008FA0F0(v28, v27, (uint64_t *)&v58);
    unint64_t v11 = v52;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    uint64_t v20 = &selRef_moveItemAtURL_toURL_error_;
    swift_bridgeObjectRelease();
    *(_WORD *)(v22 + 22) = 1024;
    LODWORD(v57) = v55 & 1;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl((void *)&_mh_execute_header, v17, v18, "Device BT Monitoring: Connection Changed\n%{private,mask.hash}s as %{BOOL}d", (uint8_t *)v22, 0x1Cu);
    swift_arrayDestroy();
    swift_slowDealloc();
    uint64_t v3 = v51;
    swift_slowDealloc();
  }
  else
  {
  }
  id v29 = [v16 v19[298]];
  id v30 = [v29 v20[299]];

  static UUID._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v31 = *(void *)(v3 + OBJC_IVAR____TtC12searchpartyd27BluetoothConnectionObserver_currentlyMonitoringDevices);
  swift_retain();
  os_unfair_lock_lock((os_unfair_lock_t)(v31 + 24));
  sub_1010414C0((void *)(v31 + 16), &v58);
  os_unfair_lock_unlock((os_unfair_lock_t)(v31 + 24));
  unint64_t v32 = v58;
  uint64_t v33 = swift_release();
  __chkstk_darwin(v33);
  *(&v50 - 2) = (uint64_t)v11;
  sub_100E500E0((uint64_t (*)(void *))sub_101041DB0, (uint64_t)(&v50 - 4), v32);
  uint64_t v35 = v34;
  uint64_t v37 = v36;
  swift_bridgeObjectRelease();
  if (v35)
  {

    uint64_t Strong = swift_unknownObjectWeakLoadStrong();
    uint64_t v39 = v56;
    if (Strong)
    {
      uint64_t v40 = Strong;
      id v41 = v35;
      sub_101041DD0(v41, v55 & 1, v40);
      swift_unknownObjectRelease();

      (*(void (**)(char *, uint64_t))(v39 + 8))(v11, v5);
    }
    else
    {

      (*(void (**)(char *, uint64_t))(v39 + 8))(v11, v5);
    }
  }
  else
  {
    uint64_t v42 = v56;
    uint64_t v43 = v54;
    (*(void (**)(char *, char *, uint64_t))(v56 + 16))(v54, v11, v5);
    uint64_t v44 = Logger.logObject.getter();
    os_log_type_t v45 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v44, v45))
    {
      uint64_t v46 = swift_slowAlloc();
      uint64_t v55 = swift_slowAlloc();
      unint64_t v58 = v55;
      *(_DWORD *)uint64_t v46 = 141558275;
      uint64_t v57 = 1752392040;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v46 + 12) = 2081;
      sub_101041D68((unint64_t *)&qword_101638B10, (void (*)(uint64_t))&type metadata accessor for UUID);
      uint64_t v47 = dispatch thunk of CustomStringConvertible.description.getter();
      uint64_t v57 = sub_1008FA0F0(v47, v48, (uint64_t *)&v58);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      uint64_t v49 = *(void (**)(char *, uint64_t))(v42 + 8);
      v49(v43, v5);
      _os_log_impl((void *)&_mh_execute_header, v44, v45, "Notified about a device that didn't match monitored list %{private,mask.hash}s.", (uint8_t *)v46, 0x16u);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      uint64_t v49 = *(void (**)(char *, uint64_t))(v42 + 8);
      v49(v43, v5);
    }

    v49(v11, v5);
  }
}

uint64_t sub_1010414C0@<X0>(void *a1@<X0>, void *a2@<X8>)
{
  *a2 = *a1;
  return swift_bridgeObjectRetain();
}

uint64_t sub_1010414E0(uint64_t a1, uint64_t a2)
{
  uint64_t v33 = a2;
  uint64_t v2 = type metadata accessor for UUID();
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  unint64_t v32 = (char *)&v30 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = sub_10000588C((uint64_t *)&unk_10166EAF0);
  __chkstk_darwin(v5);
  uint64_t v7 = (char *)&v30 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = sub_10000588C(&qword_101638CF0);
  uint64_t v9 = __chkstk_darwin(v8 - 8);
  unint64_t v11 = (char *)&v30 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = __chkstk_darwin(v9);
  uint64_t v14 = (char *)&v30 - v13;
  __chkstk_darwin(v12);
  id v16 = (char *)&v30 - v15;
  id v17 = sub_101040B88();
  if (v17)
  {
    os_log_type_t v18 = v17;
    id v19 = [v17 nrDeviceIdentifier];

    static UUID._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v20 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v3 + 56);
    v20(v16, 0, 1, v2);
  }
  else
  {
    uint64_t v20 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v3 + 56);
    v20(v16, 1, 1, v2);
  }
  (*(void (**)(char *, uint64_t, uint64_t))(v3 + 16))(v14, v33, v2);
  v20(v14, 0, 1, v2);
  uint64_t v21 = (uint64_t)&v7[*(int *)(v5 + 48)];
  sub_1003C5E38((uint64_t)v16, (uint64_t)v7);
  sub_1003C5E38((uint64_t)v14, v21);
  uint64_t v22 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v3 + 48);
  if (v22((uint64_t)v7, 1, v2) == 1)
  {
    sub_10001DAB4((uint64_t)v14, &qword_101638CF0);
    sub_10001DAB4((uint64_t)v16, &qword_101638CF0);
    int v23 = v22(v21, 1, v2);
    if (v23 == 1) {
      id v24 = &qword_101638CF0;
    }
    else {
      id v24 = (uint64_t *)&unk_10166EAF0;
    }
    if (v23 == 1) {
      char v25 = -1;
    }
    else {
      char v25 = 0;
    }
  }
  else
  {
    sub_1003C5E38((uint64_t)v7, (uint64_t)v11);
    if (v22(v21, 1, v2) == 1)
    {
      sub_10001DAB4((uint64_t)v14, &qword_101638CF0);
      sub_10001DAB4((uint64_t)v16, &qword_101638CF0);
      (*(void (**)(char *, uint64_t))(v3 + 8))(v11, v2);
      char v25 = 0;
      id v24 = (uint64_t *)&unk_10166EAF0;
    }
    else
    {
      unint64_t v26 = *(void (**)(char *, uint64_t, uint64_t))(v3 + 32);
      uint64_t v31 = v11;
      unint64_t v27 = v32;
      v26(v32, v21, v2);
      sub_101041D68((unint64_t *)&qword_10163B8F0, (void (*)(uint64_t))&type metadata accessor for UUID);
      char v25 = dispatch thunk of static Equatable.== infix(_:_:)();
      uint64_t v28 = *(void (**)(char *, uint64_t))(v3 + 8);
      v28(v27, v2);
      id v24 = &qword_101638CF0;
      sub_10001DAB4((uint64_t)v14, &qword_101638CF0);
      sub_10001DAB4((uint64_t)v16, &qword_101638CF0);
      v28(v31, v2);
    }
  }
  sub_10001DAB4((uint64_t)v7, v24);
  return v25 & 1;
}

void sub_101041998(uint64_t *a1@<X0>, void *a2@<X1>, BOOL *a3@<X8>)
{
  uint64_t v4 = *a1;
  id v5 = a2;
  uint64_t v6 = sub_1000F7994(v5, v4);

  if (v6) {
  *a3 = v6 != 0;
  }
}

id sub_1010419F8()
{
  ObjectType = (objc_class *)swift_getObjectType();
  uint64_t v11 = type metadata accessor for OS_dispatch_queue.AutoreleaseFrequency();
  uint64_t v1 = *(void *)(v11 - 8);
  __chkstk_darwin(v11);
  uint64_t v3 = (char *)&v10 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = type metadata accessor for OS_dispatch_queue.Attributes();
  __chkstk_darwin(v4);
  uint64_t v5 = type metadata accessor for DispatchQoS();
  __chkstk_darwin(v5 - 8);
  *(void *)&v0[OBJC_IVAR____TtC12searchpartyd27BluetoothConnectionObserver_delegate + 8] = 0;
  swift_unknownObjectWeakInit();
  uint64_t v6 = OBJC_IVAR____TtC12searchpartyd27BluetoothConnectionObserver_currentlyMonitoringDevices;
  sub_10000588C((uint64_t *)&unk_101667C10);
  uint64_t v7 = swift_allocObject();
  *(_DWORD *)(v7 + 24) = 0;
  *(void *)(v7 + 16) = _swiftEmptyDictionarySingleton;
  *(void *)&v0[v6] = v7;
  uint64_t v10 = OBJC_IVAR____TtC12searchpartyd27BluetoothConnectionObserver_bluetoothObserverQueue;
  sub_10001D4B0(0, (unint64_t *)&qword_1016376E0);
  uint64_t v8 = v0;
  static DispatchQoS.unspecified.getter();
  uint64_t v14 = _swiftEmptyArrayStorage;
  sub_101041D68((unint64_t *)&qword_101638CC0, (void (*)(uint64_t))&type metadata accessor for OS_dispatch_queue.Attributes);
  sub_10000588C((uint64_t *)&unk_1016376F0);
  sub_1000058D0();
  dispatch thunk of SetAlgebra.init<A>(_:)();
  (*(void (**)(char *, void, uint64_t))(v1 + 104))(v3, enum case for OS_dispatch_queue.AutoreleaseFrequency.inherit(_:), v11);
  *(void *)&v0[v10] = OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)();

  v13.uint64_t receiver = v8;
  v13.super_class = ObjectType;
  return [super init];
}

uint64_t type metadata accessor for BluetoothConnectionObserver()
{
  return self;
}

uint64_t sub_101041D68(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_101041DB0(uint64_t a1)
{
  return sub_1010414E0(a1, *(void *)(v1 + 16)) & 1;
}

void sub_101041DD0(void *a1, char a2, uint64_t a3)
{
  id v5 = a1;
  uint64_t v6 = sub_10103B5A8();
  if (v7)
  {
    uint64_t v8 = v6;
    uint64_t v9 = v7;
    uint64_t v10 = swift_allocObject();
    *(void *)(v10 + 16) = a3;
    *(void *)(v10 + 24) = v8;
    *(void *)(v10 + 32) = v9;
    *(unsigned char *)(v10 + 40) = a2 & 1;
    swift_retain();
    dispatch thunk of WorkItemQueue.enqueue(_:)();

    swift_release();
    swift_release();
  }
  else
  {
    if (qword_101637390 != -1) {
      swift_once();
    }
    uint64_t v11 = type metadata accessor for Logger();
    sub_100010324(v11, (uint64_t)qword_10170F110);
    oslog = Logger.logObject.getter();
    os_log_type_t v12 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(oslog, v12))
    {
      objc_super v13 = (uint8_t *)swift_slowAlloc();
      *(_DWORD *)objc_super v13 = 67109120;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      _os_log_impl((void *)&_mh_execute_header, oslog, v12, "Cannot read udid from paired device with nearby state %{BOOL}d.", v13, 8u);
      swift_slowDealloc();
    }
    else
    {
    }
  }
}

uint64_t sub_101041FDC()
{
  swift_release();
  swift_bridgeObjectRelease();

  return _swift_deallocObject(v0, 41, 7);
}

uint64_t sub_10104201C()
{
  uint64_t v2 = *(void *)(v0 + 16);
  uint64_t v3 = *(void *)(v0 + 24);
  uint64_t v4 = *(void *)(v0 + 32);
  char v5 = *(unsigned char *)(v0 + 40);
  uint64_t v6 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v6;
  *uint64_t v6 = v1;
  v6[1] = sub_10001D2E4;
  return sub_10103C7C0(v2, v3, v4, v5);
}

ValueMetadata *type metadata accessor for AccessoryCapabilityResponsePayload()
{
  return &type metadata for AccessoryCapabilityResponsePayload;
}

uint64_t sub_1010420DC(void *a1)
{
  sub_10001CD44(a1, a1[3]);
  dispatch thunk of BinaryEncoding.container()();
  sub_100060568();
  uint64_t v1 = FixedWidthInteger.data.getter();
  unint64_t v3 = v2;
  sub_1000BD078((uint64_t)v5, v6);
  sub_100135A44();
  dispatch thunk of BinaryEncodingContaining.encode<A>(sequence:)();
  sub_10001CFB8(v1, v3);
  return _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)v5);
}

uint64_t sub_1010421B4@<X0>(void *a1@<X0>, _DWORD *a2@<X8>)
{
  uint64_t result = sub_101042280(a1);
  if (!v2) {
    *a2 = result;
  }
  return result;
}

uint64_t sub_1010421E0(void *a1)
{
  return sub_1010420DC(a1);
}

unint64_t sub_1010421FC(uint64_t a1)
{
  *(void *)(a1 + 8) = sub_10104222C();
  unint64_t result = sub_100573F78();
  *(void *)(a1 + 16) = result;
  return result;
}

unint64_t sub_10104222C()
{
  unint64_t result = qword_101667C28;
  if (!qword_101667C28)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_101667C28);
  }
  return result;
}

uint64_t sub_101042280(void *a1)
{
  uint64_t v3 = type metadata accessor for Endianness();
  __chkstk_darwin(v3 - 8);
  sub_10001CD44(a1, a1[3]);
  dispatch thunk of BinaryDecoding.container()();
  uint64_t v4 = sub_1000BD078((uint64_t)v13, v14);
  uint64_t v5 = dispatch thunk of BinaryDecodingContaining.decode(length:)();
  if (v1)
  {
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)v13);
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)a1);
  }
  else
  {
    uint64_t v7 = v5;
    unint64_t v8 = v6;
    sub_1000361E0(v5, v6);
    static Endianness.current.getter();
    sub_100060568();
    FixedWidthInteger.init(data:ofEndianness:)();
    if (v12) {
      int v9 = 0;
    }
    else {
      int v9 = v11;
    }
    uint64_t v4 = sub_10110EF00(v9);
    sub_10001CFB8(v7, v8);
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)v13);
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)a1);
  }
  return v4;
}

uint64_t type metadata accessor for PencilLocationSubmit()
{
  return self;
}

uint64_t *sub_101042404(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v5 = *a2;
  unint64_t v6 = a2[1];
  sub_1000361E0(*a2, v6);
  uint64_t v7 = *a1;
  unint64_t v8 = a1[1];
  *a1 = v5;
  a1[1] = v6;
  sub_10001CFB8(v7, v8);
  int v9 = (int *)type metadata accessor for SharedBeaconRecord(0);
  uint64_t v10 = v9[5];
  int v11 = (char *)a1 + v10;
  char v12 = (char *)a2 + v10;
  uint64_t v13 = type metadata accessor for UUID();
  uint64_t v14 = *(void *)(v13 - 8);
  uint64_t v15 = *(void (**)(char *, char *, uint64_t))(v14 + 24);
  v15(v11, v12, v13);
  v15((char *)a1 + v9[6], (char *)a2 + v9[6], v13);
  uint64_t v16 = v9[7];
  id v17 = (char *)a1 + v16;
  os_log_type_t v18 = (char *)a2 + v16;
  *id v17 = *v18;
  *((void *)v17 + 1) = *((void *)v18 + 1);
  *((void *)v17 + 2) = *((void *)v18 + 2);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v19 = v9[8];
  uint64_t v20 = (uint64_t *)((char *)a1 + v19);
  uint64_t v21 = (uint64_t *)((char *)a2 + v19);
  *uint64_t v20 = *v21;
  v20[1] = v21[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v22 = v9[9];
  int v23 = (uint64_t *)((char *)a1 + v22);
  id v24 = (uint64_t *)((char *)a2 + v22);
  *int v23 = *v24;
  v23[1] = v24[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v25 = v9[10];
  unint64_t v26 = (uint64_t *)((char *)a1 + v25);
  unint64_t v27 = (uint64_t *)((char *)a2 + v25);
  *unint64_t v26 = *v27;
  v26[1] = v27[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(uint64_t *)((char *)a1 + v9[11]) = *(uint64_t *)((char *)a2 + v9[11]);
  *(uint64_t *)((char *)a1 + v9[12]) = *(uint64_t *)((char *)a2 + v9[12]);
  *((unsigned char *)a1 + v9[13]) = *((unsigned char *)a2 + v9[13]);
  *((unsigned char *)a1 + v9[14]) = *((unsigned char *)a2 + v9[14]);
  *(uint64_t *)((char *)a1 + v9[15]) = *(uint64_t *)((char *)a2 + v9[15]);
  *((unsigned char *)a1 + v9[16]) = *((unsigned char *)a2 + v9[16]);
  *(uint64_t *)((char *)a1 + v9[17]) = *(uint64_t *)((char *)a2 + v9[17]);
  uint64_t v28 = v9[18];
  id v29 = (char *)a1 + v28;
  uint64_t v30 = (char *)a2 + v28;
  uint64_t v31 = type metadata accessor for Date();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v31 - 8) + 24))(v29, v30, v31);
  uint64_t v32 = v9[19];
  uint64_t v33 = (char *)a1 + v32;
  uint64_t v34 = (char *)a2 + v32;
  uint64_t v35 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v14 + 48);
  unsigned int v36 = v35((char *)a1 + v32, 1, v13);
  uint64_t v61 = v35;
  unsigned int v37 = v35(v34, 1, v13);
  uint64_t v59 = v14;
  if (v36)
  {
    if (!v37)
    {
      (*(void (**)(char *, char *, uint64_t))(v14 + 16))(v33, v34, v13);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v14 + 56))(v33, 0, 1, v13);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v37)
  {
    (*(void (**)(char *, uint64_t))(v14 + 8))(v33, v13);
LABEL_6:
    uint64_t v38 = sub_10000588C(&qword_101638CF0);
    memcpy(v33, v34, *(void *)(*(void *)(v38 - 8) + 64));
    goto LABEL_7;
  }
  v15(v33, v34, v13);
LABEL_7:
  uint64_t v39 = v9[20];
  uint64_t v40 = (_DWORD *)((char *)a1 + v39);
  id v41 = (_DWORD *)((char *)a2 + v39);
  uint64_t v42 = type metadata accessor for SharedBeaconRecord.PropertyListContent(0);
  uint64_t v60 = *(void *)(v42 - 8);
  uint64_t v43 = *(uint64_t (**)(_DWORD *, uint64_t, uint64_t))(v60 + 48);
  int v44 = v43(v40, 1, v42);
  int v45 = v43(v41, 1, v42);
  if (!v44)
  {
    if (!v45)
    {
      *uint64_t v40 = *v41;
      uint64_t v52 = *(int *)(v42 + 20);
      uint64_t v53 = (char *)v40 + v52;
      uint64_t v54 = (char *)v41 + v52;
      unsigned int v55 = v35(v53, 1, v13);
      unsigned int v56 = v35(v54, 1, v13);
      if (v55)
      {
        uint64_t v49 = a3;
        if (!v56)
        {
          (*(void (**)(char *, char *, uint64_t))(v59 + 16))(v53, v54, v13);
          (*(void (**)(char *, void, uint64_t, uint64_t))(v59 + 56))(v53, 0, 1, v13);
          goto LABEL_23;
        }
      }
      else
      {
        uint64_t v49 = a3;
        if (!v56)
        {
          v15(v53, v54, v13);
          goto LABEL_23;
        }
        (*(void (**)(char *, uint64_t))(v59 + 8))(v53, v13);
      }
      uint64_t v57 = sub_10000588C(&qword_101638CF0);
      memcpy(v53, v54, *(void *)(*(void *)(v57 - 8) + 64));
      goto LABEL_23;
    }
    sub_10104421C((uint64_t)v40, type metadata accessor for SharedBeaconRecord.PropertyListContent);
    goto LABEL_13;
  }
  if (v45)
  {
LABEL_13:
    uint64_t v51 = sub_10000588C((uint64_t *)&unk_101653D30);
    memcpy(v40, v41, *(void *)(*(void *)(v51 - 8) + 64));
    uint64_t v49 = a3;
    goto LABEL_23;
  }
  *uint64_t v40 = *v41;
  uint64_t v46 = *(int *)(v42 + 20);
  uint64_t v47 = (char *)v40 + v46;
  unint64_t v48 = (char *)v41 + v46;
  uint64_t v49 = a3;
  if (v61(v48, 1, v13))
  {
    uint64_t v50 = sub_10000588C(&qword_101638CF0);
    memcpy(v47, v48, *(void *)(*(void *)(v50 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v59 + 16))(v47, v48, v13);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v59 + 56))(v47, 0, 1, v13);
  }
  (*(void (**)(_DWORD *, void, uint64_t, uint64_t))(v60 + 56))(v40, 0, 1, v42);
LABEL_23:
  *(uint64_t *)((char *)a1 + *(int *)(v49 + 20)) = *(uint64_t *)((char *)a2 + *(int *)(v49 + 20));
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(uint64_t *)((char *)a1 + *(int *)(v49 + 24)) = *(uint64_t *)((char *)a2 + *(int *)(v49 + 24));
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t *sub_101042A70(uint64_t *a1, char *a2, uint64_t a3)
{
  uint64_t v5 = *a1;
  unint64_t v6 = a1[1];
  *(_OWORD *)a1 = *(_OWORD *)a2;
  sub_10001CFB8(v5, v6);
  uint64_t v7 = (int *)type metadata accessor for SharedBeaconRecord(0);
  uint64_t v8 = v7[5];
  int v9 = (char *)a1 + v8;
  uint64_t v10 = &a2[v8];
  uint64_t v11 = type metadata accessor for UUID();
  uint64_t v12 = *(void *)(v11 - 8);
  uint64_t v13 = *(void (**)(char *, char *, uint64_t))(v12 + 40);
  v13(v9, v10, v11);
  v13((char *)a1 + v7[6], &a2[v7[6]], v11);
  uint64_t v14 = v7[7];
  uint64_t v15 = (char *)a1 + v14;
  uint64_t v16 = &a2[v14];
  *uint64_t v15 = *v16;
  uint64_t v18 = *((void *)v16 + 1);
  uint64_t v17 = *((void *)v16 + 2);
  *((void *)v15 + 1) = v18;
  *((void *)v15 + 2) = v17;
  swift_bridgeObjectRelease();
  uint64_t v19 = v7[8];
  uint64_t v20 = (uint64_t *)((char *)a1 + v19);
  uint64_t v21 = (uint64_t *)&a2[v19];
  uint64_t v23 = *v21;
  uint64_t v22 = v21[1];
  *uint64_t v20 = v23;
  v20[1] = v22;
  swift_bridgeObjectRelease();
  uint64_t v24 = v7[9];
  uint64_t v25 = (uint64_t *)((char *)a1 + v24);
  unint64_t v26 = (uint64_t *)&a2[v24];
  uint64_t v28 = *v26;
  uint64_t v27 = v26[1];
  *uint64_t v25 = v28;
  v25[1] = v27;
  swift_bridgeObjectRelease();
  uint64_t v29 = v7[10];
  uint64_t v30 = (uint64_t *)((char *)a1 + v29);
  uint64_t v31 = (uint64_t *)&a2[v29];
  uint64_t v33 = *v31;
  uint64_t v32 = v31[1];
  *uint64_t v30 = v33;
  v30[1] = v32;
  swift_bridgeObjectRelease();
  *(uint64_t *)((char *)a1 + v7[11]) = *(void *)&a2[v7[11]];
  *(uint64_t *)((char *)a1 + v7[12]) = *(void *)&a2[v7[12]];
  *((unsigned char *)a1 + v7[13]) = a2[v7[13]];
  *((unsigned char *)a1 + v7[14]) = a2[v7[14]];
  *(uint64_t *)((char *)a1 + v7[15]) = *(void *)&a2[v7[15]];
  *((unsigned char *)a1 + v7[16]) = a2[v7[16]];
  *(uint64_t *)((char *)a1 + v7[17]) = *(void *)&a2[v7[17]];
  uint64_t v34 = v7[18];
  uint64_t v35 = (char *)a1 + v34;
  unsigned int v36 = &a2[v34];
  uint64_t v37 = type metadata accessor for Date();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v37 - 8) + 40))(v35, v36, v37);
  uint64_t v38 = v7[19];
  uint64_t v39 = (char *)a1 + v38;
  uint64_t v40 = &a2[v38];
  id v41 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v12 + 48);
  unsigned int v42 = v41((char *)a1 + v38, 1, v11);
  uint64_t v67 = v41;
  unsigned int v43 = v41(v40, 1, v11);
  uint64_t v65 = v12;
  if (v42)
  {
    if (!v43)
    {
      (*(void (**)(char *, char *, uint64_t))(v12 + 32))(v39, v40, v11);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v12 + 56))(v39, 0, 1, v11);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v43)
  {
    (*(void (**)(char *, uint64_t))(v12 + 8))(v39, v11);
LABEL_6:
    uint64_t v44 = sub_10000588C(&qword_101638CF0);
    memcpy(v39, v40, *(void *)(*(void *)(v44 - 8) + 64));
    goto LABEL_7;
  }
  v13(v39, v40, v11);
LABEL_7:
  uint64_t v45 = v7[20];
  uint64_t v46 = (char *)a1 + v45;
  uint64_t v47 = &a2[v45];
  uint64_t v48 = type metadata accessor for SharedBeaconRecord.PropertyListContent(0);
  uint64_t v66 = *(void *)(v48 - 8);
  uint64_t v49 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v66 + 48);
  int v50 = v49(v46, 1, v48);
  int v51 = v49(v47, 1, v48);
  if (!v50)
  {
    if (!v51)
    {
      *(_DWORD *)uint64_t v46 = *(_DWORD *)v47;
      uint64_t v58 = *(int *)(v48 + 20);
      uint64_t v59 = &v46[v58];
      uint64_t v60 = &v47[v58];
      unsigned int v61 = v41(v59, 1, v11);
      unsigned int v62 = v41(v60, 1, v11);
      if (v61)
      {
        uint64_t v55 = a3;
        if (!v62)
        {
          (*(void (**)(char *, char *, uint64_t))(v65 + 32))(v59, v60, v11);
          (*(void (**)(char *, void, uint64_t, uint64_t))(v65 + 56))(v59, 0, 1, v11);
          goto LABEL_23;
        }
      }
      else
      {
        uint64_t v55 = a3;
        if (!v62)
        {
          v13(v59, v60, v11);
          goto LABEL_23;
        }
        (*(void (**)(char *, uint64_t))(v65 + 8))(v59, v11);
      }
      uint64_t v63 = sub_10000588C(&qword_101638CF0);
      memcpy(v59, v60, *(void *)(*(void *)(v63 - 8) + 64));
      goto LABEL_23;
    }
    sub_10104421C((uint64_t)v46, type metadata accessor for SharedBeaconRecord.PropertyListContent);
    goto LABEL_13;
  }
  if (v51)
  {
LABEL_13:
    uint64_t v57 = sub_10000588C((uint64_t *)&unk_101653D30);
    memcpy(v46, v47, *(void *)(*(void *)(v57 - 8) + 64));
    uint64_t v55 = a3;
    goto LABEL_23;
  }
  *(_DWORD *)uint64_t v46 = *(_DWORD *)v47;
  uint64_t v52 = *(int *)(v48 + 20);
  uint64_t v53 = &v46[v52];
  uint64_t v54 = &v47[v52];
  uint64_t v55 = a3;
  if (v67(v54, 1, v11))
  {
    uint64_t v56 = sub_10000588C(&qword_101638CF0);
    memcpy(v53, v54, *(void *)(*(void *)(v56 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v65 + 32))(v53, v54, v11);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v65 + 56))(v53, 0, 1, v11);
  }
  (*(void (**)(char *, void, uint64_t, uint64_t))(v66 + 56))(v46, 0, 1, v48);
LABEL_23:
  *(uint64_t *)((char *)a1 + *(int *)(v55 + 20)) = *(void *)&a2[*(int *)(v55 + 20)];
  swift_bridgeObjectRelease();
  *(uint64_t *)((char *)a1 + *(int *)(v55 + 24)) = *(void *)&a2[*(int *)(v55 + 24)];
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t sub_101043084(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_101043098);
}

uint64_t sub_101043098(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for SharedBeaconRecord(0);
  uint64_t v7 = *(void *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == a2)
  {
    uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    return v8(a1, a2, v6);
  }
  else
  {
    unint64_t v10 = *(void *)(a1 + *(int *)(a3 + 20));
    if (v10 >= 0xFFFFFFFF) {
      LODWORD(v10) = -1;
    }
    return (v10 + 1);
  }
}

uint64_t sub_101043158(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_10104316C);
}

uint64_t sub_10104316C(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result = type metadata accessor for SharedBeaconRecord(0);
  uint64_t v9 = *(void *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    unint64_t v10 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    return v10(a1, a2, a2, result);
  }
  else
  {
    *(void *)(a1 + *(int *)(a4 + 20)) = (a2 - 1);
  }
  return result;
}

uint64_t type metadata accessor for FindMyAccessoryFamilyShareEnvelope(uint64_t a1)
{
  return sub_1000F4EA4(a1, qword_101667D40);
}

uint64_t sub_101043248(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_10104325C);
}

uint64_t sub_10104325C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for UUID();
  uint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 48);

  return v5(a1, a2, v4);
}

uint64_t sub_1010432C8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1010432DC);
}

uint64_t sub_1010432DC(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for UUID();
  uint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 56);

  return v5(a1, a2, a2, v4);
}

uint64_t type metadata accessor for FindMyAccessoryFamilyShareResponseEnvelope(uint64_t a1)
{
  return sub_1000F4EA4(a1, qword_101667DD8);
}

uint64_t sub_10104336C(void *a1)
{
  uint64_t v3 = v1;
  uint64_t v5 = sub_10000588C(&qword_101667E20);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v8 = (char *)&v11 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10001CD44(a1, a1[3]);
  sub_101044134();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  LOBYTE(v13) = 0;
  type metadata accessor for SharedBeaconRecord(0);
  sub_10104427C((unint64_t *)&unk_10166EAA0, (void (*)(uint64_t))type metadata accessor for SharedBeaconRecord);
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  if (!v2)
  {
    uint64_t MyAccessoryFamilyShareEnvelope = type metadata accessor for FindMyAccessoryFamilyShareEnvelope(0);
    uint64_t v13 = *(void *)(v3 + *(int *)(MyAccessoryFamilyShareEnvelope + 20));
    char v12 = 1;
    sub_10000588C(&qword_101649508);
    sub_101044188(&qword_101649510, &qword_101649518);
    KeyedEncodingContainer.encode<A>(_:forKey:)();
    uint64_t v13 = *(void *)(v3 + *(int *)(MyAccessoryFamilyShareEnvelope + 24));
    char v12 = 2;
    KeyedEncodingContainer.encode<A>(_:forKey:)();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
}

uint64_t sub_1010435C8@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v19 = a2;
  uint64_t v4 = type metadata accessor for SharedBeaconRecord(0);
  __chkstk_darwin(v4);
  uint64_t v6 = (char *)&v18 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = sub_10000588C(&qword_101667E30);
  uint64_t v20 = *(void *)(v7 - 8);
  uint64_t v21 = v7;
  __chkstk_darwin(v7);
  uint64_t v9 = (char *)&v18 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t MyAccessoryFamilyShareEnvelope = type metadata accessor for FindMyAccessoryFamilyShareEnvelope(0);
  __chkstk_darwin(MyAccessoryFamilyShareEnvelope);
  char v12 = (char *)&v18 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = a1[3];
  uint64_t v22 = a1;
  sub_10001CD44(a1, v13);
  sub_101044134();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v2) {
    return _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)v22);
  }
  uint64_t v14 = v20;
  uint64_t v15 = (uint64_t)v12;
  LOBYTE(v24) = 0;
  sub_10104427C(&qword_101660D70, (void (*)(uint64_t))type metadata accessor for SharedBeaconRecord);
  uint64_t v16 = v21;
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  sub_10055ABB0((uint64_t)v6, v15);
  sub_10000588C(&qword_101649508);
  char v23 = 1;
  uint64_t v18 = sub_101044188(&qword_101649560, &qword_101649568);
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  *(void *)(v15 + *(int *)(MyAccessoryFamilyShareEnvelope + 20)) = v24;
  char v23 = 2;
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  (*(void (**)(char *, uint64_t))(v14 + 8))(v9, v16);
  *(void *)(v15 + *(int *)(MyAccessoryFamilyShareEnvelope + 24)) = v24;
  sub_1010442C4(v15, v19, type metadata accessor for FindMyAccessoryFamilyShareEnvelope);
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)v22);
  return sub_10104421C(v15, type metadata accessor for FindMyAccessoryFamilyShareEnvelope);
}

uint64_t sub_1010439B0(void *a1)
{
  uint64_t v3 = sub_10000588C(&qword_101667E10);
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  uint64_t v6 = &v8[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)];
  sub_10001CD44(a1, a1[3]);
  sub_1010440E0();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  v8[15] = 0;
  type metadata accessor for UUID();
  sub_10104427C(&qword_10163B040, (void (*)(uint64_t))&type metadata accessor for UUID);
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  if (!v1)
  {
    type metadata accessor for FindMyAccessoryFamilyShareResponseEnvelope(0);
    v8[14] = 1;
    KeyedEncodingContainer.encode<A>(_:forKey:)();
  }
  return (*(uint64_t (**)(unsigned char *, uint64_t))(v4 + 8))(v6, v3);
}

uint64_t sub_101043B70@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v23 = a2;
  uint64_t v4 = type metadata accessor for UUID();
  uint64_t v27 = *(void *)(v4 - 8);
  uint64_t v28 = v4;
  uint64_t v5 = __chkstk_darwin(v4);
  uint64_t v7 = (char *)&v21 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5);
  uint64_t v24 = (char *)&v21 - v8;
  uint64_t v9 = sub_10000588C(&qword_101667E38);
  uint64_t v10 = *(void *)(v9 - 8);
  uint64_t v25 = v9;
  uint64_t v26 = v10;
  __chkstk_darwin(v9);
  char v12 = (char *)&v21 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t MyAccessoryFamilyShareResponseEnvelope = type metadata accessor for FindMyAccessoryFamilyShareResponseEnvelope(0);
  __chkstk_darwin(MyAccessoryFamilyShareResponseEnvelope);
  uint64_t v15 = (char *)&v21 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10001CD44(a1, a1[3]);
  sub_1010440E0();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v2) {
    return _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)a1);
  }
  uint64_t v21 = MyAccessoryFamilyShareResponseEnvelope;
  uint64_t v22 = v15;
  uint64_t v16 = v27;
  char v30 = 0;
  sub_10104427C((unint64_t *)&qword_10163B010, (void (*)(uint64_t))&type metadata accessor for UUID);
  uint64_t v17 = v24;
  uint64_t v18 = v25;
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  uint64_t v24 = *(char **)(v16 + 32);
  ((void (*)(char *, char *, uint64_t))v24)(v22, v17, v28);
  char v29 = 1;
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  (*(void (**)(char *, uint64_t))(v26 + 8))(v12, v18);
  uint64_t v19 = (uint64_t)v22;
  ((void (*)(char *, char *, uint64_t))v24)(&v22[*(int *)(v21 + 20)], v7, v28);
  sub_1010442C4(v19, v23, type metadata accessor for FindMyAccessoryFamilyShareResponseEnvelope);
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)a1);
  return sub_10104421C(v19, type metadata accessor for FindMyAccessoryFamilyShareResponseEnvelope);
}

uint64_t sub_101043F1C(uint64_t a1)
{
  unint64_t v2 = sub_101044134();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_101043F58(uint64_t a1)
{
  unint64_t v2 = sub_101044134();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_101043F94@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_1010435C8(a1, a2);
}

uint64_t sub_101043FAC(void *a1)
{
  return sub_10104336C(a1);
}

uint64_t sub_101043FC4()
{
  if (*v0) {
    return 0x6564496572616873;
  }
  else {
    return 0xD000000000000016;
  }
}

uint64_t sub_101044010@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_101044744(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_101044038(uint64_t a1)
{
  unint64_t v2 = sub_1010440E0();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_101044074(uint64_t a1)
{
  unint64_t v2 = sub_1010440E0();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_1010440B0@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_101043B70(a1, a2);
}

uint64_t sub_1010440C8(void *a1)
{
  return sub_1010439B0(a1);
}

unint64_t sub_1010440E0()
{
  unint64_t result = qword_101667E18;
  if (!qword_101667E18)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_101667E18);
  }
  return result;
}

unint64_t sub_101044134()
{
  unint64_t result = qword_101667E28;
  if (!qword_101667E28)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_101667E28);
  }
  return result;
}

uint64_t sub_101044188(unint64_t *a1, unint64_t *a2)
{
  uint64_t result = *a1;
  if (!result)
  {
    sub_10000592C(&qword_101649508);
    sub_10104427C(a2, (void (*)(uint64_t))type metadata accessor for FamilyCryptoKeysV2);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_10104421C(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t sub_10104427C(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_1010442C4(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

unsigned char *storeEnumTagSinglePayload for FindMyAccessoryFamilyShareEnvelope.CodingKeys(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 2 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 2) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFE) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFD)
  {
    unsigned int v6 = ((a2 - 254) >> 8) + 1;
    *uint64_t result = a2 + 2;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1010443F8);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 2;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for FindMyAccessoryFamilyShareEnvelope.CodingKeys()
{
  return &type metadata for FindMyAccessoryFamilyShareEnvelope.CodingKeys;
}

unsigned char *storeEnumTagSinglePayload for FindMyAccessoryFamilyShareResponseEnvelope.CodingKeys(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFE)
  {
    unsigned int v6 = ((a2 - 255) >> 8) + 1;
    *uint64_t result = a2 + 1;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1010444FCLL);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 1;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for FindMyAccessoryFamilyShareResponseEnvelope.CodingKeys()
{
  return &type metadata for FindMyAccessoryFamilyShareResponseEnvelope.CodingKeys;
}

unint64_t sub_101044538()
{
  unint64_t result = qword_101667E40;
  if (!qword_101667E40)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_101667E40);
  }
  return result;
}

unint64_t sub_101044590()
{
  unint64_t result = qword_101667E48;
  if (!qword_101667E48)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_101667E48);
  }
  return result;
}

unint64_t sub_1010445E8()
{
  unint64_t result = qword_101667E50;
  if (!qword_101667E50)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_101667E50);
  }
  return result;
}

unint64_t sub_101044640()
{
  unint64_t result = qword_101667E58;
  if (!qword_101667E58)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_101667E58);
  }
  return result;
}

unint64_t sub_101044698()
{
  unint64_t result = qword_101667E60;
  if (!qword_101667E60)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_101667E60);
  }
  return result;
}

unint64_t sub_1010446F0()
{
  unint64_t result = qword_101667E68;
  if (!qword_101667E68)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_101667E68);
  }
  return result;
}

uint64_t sub_101044744(uint64_t a1, uint64_t a2)
{
  if (a1 == 0xD000000000000016 && a2 == 0x800000010141F630
    || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x6564496572616873 && a2 == 0xEF7265696669746ELL)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else
  {
    char v5 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v5) {
      return 1;
    }
    else {
      return 2;
    }
  }
}

uint64_t sub_101044858()
{
  uint64_t v0 = type metadata accessor for PrefixedDefaults();
  sub_10001E384(v0, qword_101667E70);
  sub_100010324(v0, (uint64_t)qword_101667E70);
  return PrefixedDefaults.init(prefix:)();
}

uint64_t sub_1010448BC(uint64_t a1)
{
  *(void *)(v1 + 16) = a1;
  return _swift_task_switch(sub_1010448DC, a1, 0);
}

uint64_t sub_1010448DC()
{
  unsigned int v4 = (uint64_t (*)(void *, uint64_t))((char *)&async function pointer to dispatch thunk of WorkItemQueue.enqueueAndAwaitResult(_:)
                                               + async function pointer to dispatch thunk of WorkItemQueue.enqueueAndAwaitResult(_:));
  swift_retain();
  uint64_t v1 = (void *)swift_task_alloc();
  *(void *)(v0 + 24) = v1;
  *uint64_t v1 = v0;
  v1[1] = sub_1010449A8;
  uint64_t v2 = *(void *)(v0 + 16);
  return v4(&unk_1016681D8, v2);
}

uint64_t sub_1010449A8()
{
  uint64_t v2 = *v1;
  swift_task_dealloc();
  swift_release();
  if (v0) {
    swift_errorRelease();
  }
  int v3 = *(uint64_t (**)(void))(v2 + 8);
  return v3();
}

uint64_t sub_101044AC4(uint64_t a1)
{
  *(void *)(v1 + 16) = a1;
  return _swift_task_switch(sub_101044AE4, 0, 0);
}

uint64_t sub_101044AE4()
{
  uint64_t v1 = sub_10001CD44((void *)(*(void *)(v0 + 16) + 112), *(void *)(*(void *)(v0 + 16) + 136));
  uint64_t v2 = *v1;
  *(void *)(v0 + 24) = *v1;
  return _swift_task_switch(sub_101044B58, v2, 0);
}

uint64_t sub_101044B58()
{
  uint64_t v1 = *(void *)(v0 + 16);
  swift_retain();
  swift_retain();
  dispatch thunk of WorkItemQueue.enqueue(_:)();
  swift_release();
  swift_release();
  swift_release();
  return _swift_task_switch(sub_101044C10, v1, 0);
}

uint64_t sub_101044C10()
{
  uint64_t v1 = *(void *)(v0 + 16);
  sub_101044CF4();
  uint64_t v2 = *(void *)(v1 + 192);
  uint64_t v3 = swift_allocObject();
  swift_weakInit();
  uint64_t v4 = *(void *)(v2 + 16);
  *(void *)(v2 + 16) = &unk_1016681E8;
  *(void *)(v2 + 24) = v3;
  sub_1000A1534(v4);
  uint64_t v5 = (void *)swift_task_alloc();
  *(void *)(v0 + 32) = v5;
  *uint64_t v5 = v0;
  v5[1] = sub_10103E0F0;
  return sub_101045070();
}

uint64_t sub_101044CF4()
{
  uint64_t v1 = v0;
  uint64_t v2 = sub_10000588C(&qword_10163C6C8);
  __chkstk_darwin(v2 - 8);
  uint64_t v4 = (char *)v18 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = type metadata accessor for DispatchQoS.QoSClass();
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v8 = (char *)v18 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = sub_10000588C(&qword_1016681F8);
  uint64_t v10 = *(void *)(v9 - 8);
  __chkstk_darwin(v9);
  char v12 = (char *)v18 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10001CD44((void *)(v0 + 152), *(void *)(v0 + 176));
  swift_retain();
  uint64_t v13 = (void *)AnyCurrentValuePublisher.publisher.getter();
  swift_release();
  v18[1] = v13;
  sub_10000584C();
  (*(void (**)(char *, void, uint64_t))(v6 + 104))(v8, enum case for DispatchQoS.QoSClass.default(_:), v5);
  uint64_t v14 = (void *)static OS_dispatch_queue.global(qos:)();
  (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  v18[0] = v14;
  uint64_t v15 = type metadata accessor for OS_dispatch_queue.SchedulerOptions();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v15 - 8) + 56))(v4, 1, 1, v15);
  sub_10000588C((uint64_t *)&unk_1016569C0);
  sub_100062734((unint64_t *)&qword_10163A518, (uint64_t *)&unk_1016569C0);
  sub_10027B124();
  Publisher.receive<A>(on:options:)();
  sub_10001DAB4((uint64_t)v4, &qword_10163C6C8);

  swift_release();
  swift_allocObject();
  swift_weakInit();
  sub_100062734(&qword_101668200, &qword_1016681F8);
  uint64_t v16 = Publisher<>.sink(receiveValue:)();
  swift_release();
  (*(void (**)(char *, uint64_t))(v10 + 8))(v12, v9);
  *(void *)(v1 + 240) = v16;
  return swift_release();
}

uint64_t sub_101045070()
{
  v1[20] = v0;
  uint64_t v2 = type metadata accessor for Logger();
  v1[21] = v2;
  v1[22] = *(void *)(v2 - 8);
  v1[23] = swift_task_alloc();
  v1[24] = sub_10000588C((uint64_t *)&unk_101653D50);
  v1[25] = swift_task_alloc();
  uint64_t v3 = type metadata accessor for SharedBeaconRecord(0);
  v1[26] = v3;
  v1[27] = *(void *)(v3 - 8);
  v1[28] = swift_task_alloc();
  uint64_t v4 = type metadata accessor for MemberSharingCircle();
  v1[29] = v4;
  v1[30] = *(void *)(v4 - 8);
  v1[31] = swift_task_alloc();
  uint64_t v5 = type metadata accessor for UUID();
  v1[32] = v5;
  uint64_t v6 = *(void *)(v5 - 8);
  v1[33] = v6;
  v1[34] = *(void *)(v6 + 64);
  v1[35] = swift_task_alloc();
  v1[36] = swift_task_alloc();
  v1[37] = swift_task_alloc();
  uint64_t v7 = type metadata accessor for OwnerSharingCircle();
  v1[38] = v7;
  v1[39] = *(void *)(v7 - 8);
  v1[40] = swift_task_alloc();
  v1[41] = swift_task_alloc();
  v1[42] = swift_task_alloc();
  sub_10000588C(&qword_10163BC08);
  v1[43] = swift_task_alloc();
  return _swift_task_switch(sub_101045344, v0, 0);
}

uint64_t sub_101045344()
{
  uint64_t v1 = *(void *)(v0 + 344);
  uint64_t v2 = *(void *)(v0 + 160);
  uint64_t v3 = OBJC_IVAR____TtC12searchpartyd20SharesRemovalManager__isFindMyAppInstalledCached;
  *(void *)(v0 + 352) = OBJC_IVAR____TtC12searchpartyd20SharesRemovalManager__isFindMyAppInstalledCached;
  uint64_t v4 = v2 + v3;
  swift_beginAccess();
  sub_10001D074(v4, v1, &qword_10163BC08);
  LOBYTE(v4) = sub_10104ADC4();
  sub_10001DAB4(v1, &qword_10163BC08);
  if ((v4 & 1) != 0
    || (uint64_t v5 = *(void *)(v0 + 344),
        uint64_t v6 = *(void *)(v0 + 160) + OBJC_IVAR____TtC12searchpartyd20SharesRemovalManager__isThisMeDeviceCached,
        swift_beginAccess(),
        sub_10001D074(v6, v5, &qword_10163BC08),
        LOBYTE(v6) = sub_10104ADC4(),
        sub_10001DAB4(v5, &qword_10163BC08),
        (v6 & 1) == 0))
  {
    if (sub_101048378())
    {
      uint64_t v7 = *(void *)(*(void *)(v0 + 160) + 208);
      *(void *)(v0 + 360) = v7;
      uint64_t v8 = (uint64_t)sub_101045888;
      uint64_t v9 = 0;
      return _swift_task_switch(v8, v7, v9);
    }
  }
  uint64_t v10 = self;
  id v11 = [v10 defaultWorkspace];
  if (!v11)
  {
    __break(1u);
    goto LABEL_18;
  }
  char v12 = v11;
  uint64_t v13 = *(void *)(v0 + 160);
  NSString v14 = String._bridgeToObjectiveC()();
  char v15 = [v12 applicationIsInstalled:v14];

  swift_beginAccess();
  sub_10104B99C(v15);
  swift_endAccess();
  sub_10001CD44((void *)(v13 + 152), *(void *)(v13 + 176));
  swift_retain();
  AnyCurrentValuePublisher.value.getter();
  swift_release();
  LOBYTE(v12) = *(unsigned char *)(v0 + 556) == 1;
  swift_beginAccess();
  sub_10104B99C((char)v12);
  swift_endAccess();
  if (qword_101636888 != -1) {
    swift_once();
  }
  uint64_t v17 = *(void *)(v0 + 176);
  uint64_t v16 = *(void *)(v0 + 184);
  uint64_t v18 = *(void *)(v0 + 168);
  uint64_t v19 = sub_100010324(v18, (uint64_t)qword_10170D788);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v17 + 16))(v16, v19, v18);
  swift_retain_n();
  uint64_t v20 = Logger.logObject.getter();
  os_log_type_t v21 = static os_log_type_t.default.getter();
  if (!os_log_type_enabled(v20, v21))
  {
    swift_release_n();
    goto LABEL_14;
  }
  os_log_type_t v29 = v21;
  uint64_t v22 = swift_slowAlloc();
  *(_DWORD *)uint64_t v22 = 67109376;
  id v23 = [v10 defaultWorkspace];
  if (!v23)
  {
LABEL_18:
    uint64_t v8 = swift_release_n();
    __break(1u);
    return _swift_task_switch(v8, v7, v9);
  }
  uint64_t v24 = v23;
  NSString v25 = String._bridgeToObjectiveC()();
  unsigned int v26 = [v24 applicationIsInstalled:v25];

  swift_release();
  *(_DWORD *)(v0 + 536) = v26;
  UnsafeMutableRawBufferPointer.copyMemory(from:)();
  swift_release();
  *(_WORD *)(v22 + 8) = 1024;
  sub_10001CD44((void *)(v13 + 152), *(void *)(v13 + 176));
  swift_retain();
  AnyCurrentValuePublisher.value.getter();
  swift_release();
  LODWORD(v25) = *(unsigned __int8 *)(v0 + 557);
  swift_release();
  *(_DWORD *)(v0 + 540) = v25 == 1;
  UnsafeMutableRawBufferPointer.copyMemory(from:)();
  swift_release();
  _os_log_impl((void *)&_mh_execute_header, v20, v29, "SharesRemovalManager: 3. cached isInstalled: %{BOOL}d, isMeDevice: %{BOOL}d", (uint8_t *)v22, 0xEu);
  swift_slowDealloc();
LABEL_14:

  (*(void (**)(void, void))(*(void *)(v0 + 176) + 8))(*(void *)(v0 + 184), *(void *)(v0 + 168));
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v27 = *(uint64_t (**)(void))(v0 + 8);
  return v27();
}

uint64_t sub_101045888()
{
  *(void *)(v0 + 368) = *(void *)(*(void *)(v0 + 360) + 136);
  swift_retain();
  return _swift_task_switch(sub_1010458FC, 0, 0);
}

uint64_t sub_1010458FC()
{
  uint64_t v2 = v0[45];
  uint64_t v1 = v0[46];
  uint64_t v3 = (void *)swift_task_alloc();
  v0[47] = v3;
  _OWORD v3[2] = v1;
  v3[3] = sub_100075250;
  v3[4] = v2;
  uint64_t v4 = (void *)swift_task_alloc();
  v0[48] = v4;
  uint64_t v5 = sub_10000588C(&qword_10163B8C0);
  *uint64_t v4 = v0;
  v4[1] = sub_101045A14;
  return withCheckedContinuation<A>(isolation:function:_:)(v0 + 18, 0, 0, 0xD000000000000012, 0x80000001013F1870, sub_100075258, v3, v5);
}

uint64_t sub_101045A14()
{
  uint64_t v1 = *v0;
  uint64_t v2 = *(void *)(*v0 + 160);
  swift_task_dealloc();
  swift_release();
  swift_task_dealloc();
  *(void *)(v1 + 392) = *(void *)(v1 + 144);
  return _swift_task_switch(sub_101045B84, v2, 0);
}

uint64_t sub_101045B84(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = v3[49];
  uint64_t v5 = _swiftEmptyArrayStorage;
  uint64_t v6 = *(void *)(v4 + 16);
  if (v6)
  {
    unint64_t v7 = 0;
    uint64_t v8 = v3[38];
    uint64_t v9 = v3[39];
    uint64_t v30 = v8;
    uint64_t v32 = *(void *)(v4 + 16);
    while (v7 < *(void *)(v4 + 16))
    {
      uint64_t v10 = v3[42];
      unint64_t v11 = (*(unsigned __int8 *)(v9 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80);
      uint64_t v12 = *(void *)(v9 + 72);
      sub_10104CDB4(v3[49] + v11 + v12 * v7, v10, (uint64_t (*)(void))type metadata accessor for OwnerSharingCircle);
      uint64_t v13 = v3[42];
      if (*(unsigned char *)(v10 + *(int *)(v8 + 28)) == 2)
      {
        uint64_t v14 = v4;
        sub_10104CEC0(v13, v3[41], (uint64_t (*)(void))type metadata accessor for OwnerSharingCircle);
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          sub_1000B721C(0, _swiftEmptyArrayStorage[2] + 1, 1);
        }
        unint64_t v16 = _swiftEmptyArrayStorage[2];
        unint64_t v15 = _swiftEmptyArrayStorage[3];
        if (v16 >= v15 >> 1) {
          sub_1000B721C(v15 > 1, v16 + 1, 1);
        }
        uint64_t v17 = v3[41];
        _swiftEmptyArrayStorage[2] = v16 + 1;
        a1 = sub_10104CEC0(v17, (uint64_t)_swiftEmptyArrayStorage + v11 + v16 * v12, (uint64_t (*)(void))type metadata accessor for OwnerSharingCircle);
        uint64_t v4 = v14;
        uint64_t v8 = v30;
        uint64_t v6 = v32;
      }
      else
      {
        a1 = sub_10104CF28(v13, (uint64_t (*)(void))type metadata accessor for OwnerSharingCircle);
      }
      if (v6 == ++v7)
      {
        uint64_t v5 = _swiftEmptyArrayStorage;
        goto LABEL_13;
      }
    }
    __break(1u);
  }
  else
  {
LABEL_13:
    swift_bridgeObjectRelease();
    int64_t v18 = _swiftEmptyArrayStorage[2];
    if (v18)
    {
      uint64_t v19 = v3[39];
      uint64_t v33 = v3[38];
      uint64_t v34 = _swiftEmptyArrayStorage;
      uint64_t v20 = v3[33];
      sub_1000B7034(0, v18, 0);
      os_log_type_t v21 = (char *)_swiftEmptyArrayStorage
          + ((*(unsigned __int8 *)(v19 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v19 + 80));
      uint64_t v31 = *(void *)(v19 + 72);
      uint64_t v5 = _swiftEmptyArrayStorage;
      do
      {
        uint64_t v22 = v3[40];
        uint64_t v23 = v3[37];
        uint64_t v24 = v3[32];
        sub_10104CDB4((uint64_t)v21, v22, (uint64_t (*)(void))type metadata accessor for OwnerSharingCircle);
        (*(void (**)(uint64_t, uint64_t, uint64_t))(v20 + 16))(v23, v22 + *(int *)(v33 + 20), v24);
        sub_10104CF28(v22, (uint64_t (*)(void))type metadata accessor for OwnerSharingCircle);
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        {
          sub_1000B7034(0, v5[2] + 1, 1);
          uint64_t v5 = v34;
        }
        unint64_t v26 = v5[2];
        unint64_t v25 = v5[3];
        if (v26 >= v25 >> 1)
        {
          sub_1000B7034(v25 > 1, v26 + 1, 1);
          uint64_t v5 = v34;
        }
        uint64_t v27 = v3[37];
        uint64_t v28 = v3[32];
        _OWORD v5[2] = v26 + 1;
        (*(void (**)(unint64_t, uint64_t, uint64_t))(v20 + 32))((unint64_t)v5+ ((*(unsigned __int8 *)(v20 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v20 + 80))+ *(void *)(v20 + 72) * v26, v27, v28);
        uint64_t v34 = v5;
        v21 += v31;
        --v18;
      }
      while (v18);
    }
    swift_release();
    v3[50] = v5;
    a2 = v3[45];
    a1 = (uint64_t)sub_101045EEC;
    a3 = 0;
  }
  return _swift_task_switch(a1, a2, a3);
}

uint64_t sub_101045EEC()
{
  *(void *)(v0 + 408) = *(void *)(*(void *)(v0 + 360) + 136);
  swift_retain();
  return _swift_task_switch(sub_101045F60, 0, 0);
}

uint64_t sub_101045F60()
{
  uint64_t v1 = v0[51];
  uint64_t v2 = v0[45];
  uint64_t v3 = (void *)swift_task_alloc();
  v0[52] = v3;
  _OWORD v3[2] = v1;
  v3[3] = sub_1000730D8;
  v3[4] = v2;
  uint64_t v4 = (void *)swift_task_alloc();
  v0[53] = v4;
  uint64_t v5 = sub_10000588C((uint64_t *)&unk_101653DF0);
  *uint64_t v4 = v0;
  v4[1] = sub_10104607C;
  return withCheckedContinuation<A>(isolation:function:_:)(v0 + 19, 0, 0, 0xD000000000000012, 0x80000001013F1870, sub_1000730E0, v3, v5);
}

uint64_t sub_10104607C()
{
  uint64_t v1 = *v0;
  uint64_t v2 = *(void *)(*v0 + 160);
  swift_task_dealloc();
  swift_release();
  swift_task_dealloc();
  *(void *)(v1 + 432) = *(void *)(v1 + 152);
  return _swift_task_switch(sub_1010461EC, v2, 0);
}

uint64_t sub_1010461EC()
{
  uint64_t v1 = *(void *)(v0 + 432);
  uint64_t v2 = *(void *)(v1 + 16);
  *(void *)(v0 + 440) = v2;
  if (v2)
  {
    uint64_t v4 = *(void *)(v0 + 232);
    uint64_t v3 = *(void *)(v0 + 240);
    int v5 = *(_DWORD *)(v3 + 80);
    *(_DWORD *)(v0 + 544) = v5;
    uint64_t v6 = *(void *)(v3 + 72);
    uint64_t v7 = *(void *)(v0 + 400);
    *(void *)(v0 + 456) = 0;
    *(void *)(v0 + 464) = v7;
    *(void *)(v0 + 448) = v6;
    uint64_t v8 = *(void *)(v0 + 360);
    sub_10104CDB4(v1 + ((v5 + 32) & ~(unint64_t)v5), *(void *)(v0 + 248), (uint64_t (*)(void))type metadata accessor for MemberSharingCircle);
    *(_DWORD *)(v0 + 548) = *(_DWORD *)(v4 + 24);
    uint64_t v9 = (uint64_t)sub_101046970;
    uint64_t v10 = v8;
    uint64_t v11 = 0;
    return _swift_task_switch(v9, v10, v11);
  }
  swift_bridgeObjectRelease();
  uint64_t v12 = *(void *)(v0 + 400);
  int64_t v13 = *(void *)(v12 + 16);
  if (v13)
  {
    uint64_t v14 = *(void *)(v0 + 264);
    swift_bridgeObjectRetain();
    sub_1000B6ED0(0, v13, 0);
    unint64_t v15 = *(void (**)(uint64_t, uint64_t, uint64_t))(v14 + 16);
    v14 += 16;
    uint64_t v53 = v12;
    uint64_t v16 = v12 + ((*(unsigned __int8 *)(v14 + 64) + 32) & ~(unint64_t)*(unsigned __int8 *)(v14 + 64));
    uint64_t v55 = *(void *)(v14 + 56);
    uint64_t v56 = v15;
    uint64_t v17 = (void (**)(uint64_t, uint64_t))(v14 - 8);
    do
    {
      uint64_t v18 = *(void *)(v0 + 288);
      uint64_t v19 = v0;
      uint64_t v20 = *(void *)(v0 + 256);
      v56(v18, v16, v20);
      uint64_t v21 = UUID.uuidString.getter();
      uint64_t v23 = v22;
      (*v17)(v18, v20);
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
        sub_1000B6ED0(0, _swiftEmptyArrayStorage[2] + 1, 1);
      }
      unint64_t v25 = _swiftEmptyArrayStorage[2];
      unint64_t v24 = _swiftEmptyArrayStorage[3];
      if (v25 >= v24 >> 1) {
        sub_1000B6ED0(v24 > 1, v25 + 1, 1);
      }
      _swiftEmptyArrayStorage[2] = v25 + 1;
      unint64_t v26 = &_swiftEmptyArrayStorage[2 * v25];
      v26[4] = v21;
      v26[5] = v23;
      v16 += v55;
      --v13;
      uint64_t v0 = v19;
    }
    while (v13);
    uint64_t v12 = v53;
    swift_bridgeObjectRelease();
  }
  swift_beginAccess();
  sub_10104B628((uint64_t)_swiftEmptyArrayStorage);
  swift_endAccess();
  if (qword_101636888 != -1) {
    swift_once();
  }
  sub_100010324(*(void *)(v0 + 168), (uint64_t)qword_10170D788);
  swift_bridgeObjectRetain();
  uint64_t v27 = Logger.logObject.getter();
  os_log_type_t v28 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v27, v28))
  {
    os_log_type_t v29 = (uint8_t *)swift_slowAlloc();
    *(_DWORD *)os_log_type_t v29 = 134217984;
    uint64_t v30 = *(void *)(v12 + 16);
    swift_bridgeObjectRelease();
    *(void *)(v0 + 136) = v30;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v27, v28, "SharesRemovalManager: 2. saved %ld revokedCircles.", v29, 0xCu);
    swift_slowDealloc();
  }
  else
  {
    swift_bridgeObjectRelease_n();
  }

  uint64_t v31 = self;
  id v32 = [v31 defaultWorkspace];
  if (!v32)
  {
    __break(1u);
    goto LABEL_29;
  }
  uint64_t v33 = v32;
  uint64_t v34 = *(void *)(v0 + 160);
  NSString v35 = String._bridgeToObjectiveC()();
  unsigned __int8 v36 = [v33 applicationIsInstalled:v35];

  swift_beginAccess();
  char v37 = v36;
  uint64_t v38 = (void *)v0;
  sub_10104B99C(v37);
  swift_endAccess();
  sub_10001CD44((void *)(v34 + 152), *(void *)(v34 + 176));
  swift_retain();
  AnyCurrentValuePublisher.value.getter();
  swift_release();
  LOBYTE(v33) = *(unsigned char *)(v0 + 556) == 1;
  swift_beginAccess();
  sub_10104B99C((char)v33);
  swift_endAccess();
  if (qword_101636888 != -1) {
    swift_once();
  }
  uint64_t v40 = *(void *)(v0 + 176);
  uint64_t v39 = v38[23];
  uint64_t v41 = v38[21];
  uint64_t v42 = sub_100010324(v41, (uint64_t)qword_10170D788);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v40 + 16))(v39, v42, v41);
  swift_retain_n();
  unsigned int v43 = Logger.logObject.getter();
  os_log_type_t v44 = static os_log_type_t.default.getter();
  if (!os_log_type_enabled(v43, v44))
  {
    swift_release_n();
    goto LABEL_25;
  }
  os_log_type_t v54 = v44;
  uint64_t v45 = swift_slowAlloc();
  *(_DWORD *)uint64_t v45 = 67109376;
  id v46 = [v31 defaultWorkspace];
  uint64_t v47 = v38;
  if (!v46)
  {
LABEL_29:
    uint64_t v9 = swift_release_n();
    __break(1u);
    return _swift_task_switch(v9, v10, v11);
  }
  uint64_t v48 = v46;
  NSString v49 = String._bridgeToObjectiveC()();
  unsigned int v50 = [v48 applicationIsInstalled:v49];

  swift_release();
  *((_DWORD *)v47 + 134) = v50;
  UnsafeMutableRawBufferPointer.copyMemory(from:)();
  swift_release();
  *(_WORD *)(v45 + 8) = 1024;
  sub_10001CD44((void *)(v34 + 152), *(void *)(v34 + 176));
  swift_retain();
  AnyCurrentValuePublisher.value.getter();
  swift_release();
  LODWORD(v49) = *((unsigned __int8 *)v47 + 557);
  swift_release();
  *((_DWORD *)v47 + 135) = v49 == 1;
  UnsafeMutableRawBufferPointer.copyMemory(from:)();
  swift_release();
  _os_log_impl((void *)&_mh_execute_header, v43, v54, "SharesRemovalManager: 3. cached isInstalled: %{BOOL}d, isMeDevice: %{BOOL}d", (uint8_t *)v45, 0xEu);
  swift_slowDealloc();
  uint64_t v38 = v47;
LABEL_25:

  (*(void (**)(void, void))(v38[22] + 8))(v38[23], v38[21]);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  int v51 = (uint64_t (*)(void))v38[1];
  return v51();
}

uint64_t sub_101046970()
{
  uint64_t v1 = *(void *)(v0 + 360);
  uint64_t v2 = *(void *)(v0 + 288);
  uint64_t v3 = *(void *)(v0 + 264);
  uint64_t v4 = *(void *)(v0 + 256);
  uint64_t v5 = *(void *)(v0 + 248) + *(int *)(v0 + 548);
  *(void *)(v0 + 472) = *(void *)(v1 + 136);
  uint64_t v6 = *(void (**)(uint64_t, uint64_t, uint64_t))(v3 + 16);
  *(void *)(v0 + 480) = v6;
  *(void *)(v0 + 488) = (v3 + 16) & 0xFFFFFFFFFFFFLL | 0xE3BA000000000000;
  v6(v2, v5, v4);
  int v7 = *(_DWORD *)(v3 + 80);
  *(_DWORD *)(v0 + 552) = v7;
  unint64_t v8 = (v7 + 24) & ~(unint64_t)v7;
  uint64_t v9 = swift_allocObject();
  *(void *)(v0 + 496) = v9;
  *(void *)(v9 + 16) = v1;
  uint64_t v10 = *(void (**)(unint64_t, uint64_t, uint64_t))(v3 + 32);
  *(void *)(v0 + 504) = v10;
  *(void *)(v0 + 512) = (v3 + 32) & 0xFFFFFFFFFFFFLL | 0x48D8000000000000;
  v10(v9 + v8, v2, v4);
  swift_retain();
  return _swift_task_switch(sub_101046A8C, 0, 0);
}

uint64_t sub_101046A8C()
{
  uint64_t v1 = v0[62];
  uint64_t v2 = v0[59];
  uint64_t v3 = (void *)swift_task_alloc();
  v0[65] = v3;
  _OWORD v3[2] = v2;
  v3[3] = sub_10104CE20;
  v3[4] = v1;
  uint64_t v4 = (void *)swift_task_alloc();
  v0[66] = v4;
  *uint64_t v4 = v0;
  v4[1] = sub_101046B94;
  uint64_t v6 = v0[24];
  uint64_t v5 = v0[25];
  return withCheckedContinuation<A>(isolation:function:_:)(v5, 0, 0, 0xD000000000000012, 0x80000001013F1870, sub_100075048, v3, v6);
}

uint64_t sub_101046B94()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 160);
  swift_task_dealloc();
  swift_release();
  swift_task_dealloc();
  return _swift_task_switch(sub_101046CE4, v1, 0);
}

uint64_t sub_101046CE4()
{
  uint64_t v1 = *(void *)(v0 + 208);
  uint64_t v2 = *(void *)(v0 + 200);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v0 + 216) + 48))(v2, 1, v1) == 1)
  {
    sub_10104CF28(*(void *)(v0 + 248), (uint64_t (*)(void))type metadata accessor for MemberSharingCircle);
    sub_10001DAB4(v2, (uint64_t *)&unk_101653D50);
LABEL_10:
    unint64_t v5 = *(void *)(v0 + 464);
    goto LABEL_11;
  }
  uint64_t v3 = *(void *)(v0 + 224);
  sub_10104CEC0(v2, v3, type metadata accessor for SharedBeaconRecord);
  if (*(unsigned char *)(v3 + *(int *)(v1 + 64)) != 2)
  {
    uint64_t v15 = *(void *)(v0 + 248);
    sub_10104CF28(*(void *)(v0 + 224), type metadata accessor for SharedBeaconRecord);
    sub_10104CF28(v15, (uint64_t (*)(void))type metadata accessor for MemberSharingCircle);
    goto LABEL_10;
  }
  (*(void (**)(void, void, void))(v0 + 480))(*(void *)(v0 + 280), *(void *)(v0 + 248) + *(int *)(*(void *)(v0 + 232) + 28), *(void *)(v0 + 256));
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  unint64_t v5 = *(void *)(v0 + 464);
  if ((isUniquelyReferenced_nonNull_native & 1) == 0) {
    unint64_t v5 = sub_100A6F668(0, *(void *)(v5 + 16) + 1, 1, *(void *)(v0 + 464));
  }
  unint64_t v7 = *(void *)(v5 + 16);
  unint64_t v6 = *(void *)(v5 + 24);
  if (v7 >= v6 >> 1) {
    unint64_t v5 = sub_100A6F668(v6 > 1, v7 + 1, 1, v5);
  }
  uint64_t v8 = *(void (**)(unint64_t, uint64_t, uint64_t))(v0 + 504);
  uint64_t v9 = *(unsigned __int8 *)(v0 + 552);
  uint64_t v10 = *(void *)(v0 + 280);
  uint64_t v11 = *(void *)(v0 + 256);
  uint64_t v12 = *(void *)(v0 + 264);
  uint64_t v13 = *(void *)(v0 + 248);
  uint64_t v14 = *(void *)(v0 + 224);
  *(void *)(v5 + 16) = v7 + 1;
  v8(v5 + ((v9 + 32) & ~v9) + *(void *)(v12 + 72) * v7, v10, v11);
  sub_10104CF28(v14, type metadata accessor for SharedBeaconRecord);
  sub_10104CF28(v13, (uint64_t (*)(void))type metadata accessor for MemberSharingCircle);
LABEL_11:
  uint64_t v16 = *(void *)(v0 + 456) + 1;
  if (v16 != *(void *)(v0 + 440))
  {
    *(void *)(v0 + 456) = v16;
    *(void *)(v0 + 464) = v5;
    uint64_t v31 = *(void *)(v0 + 360);
    uint64_t v32 = *(void *)(v0 + 232);
    sub_10104CDB4(*(void *)(v0 + 432)+ ((*(unsigned __int8 *)(v0 + 544) + 32) & ~(unint64_t)*(unsigned __int8 *)(v0 + 544))+ *(void *)(v0 + 448) * v16, *(void *)(v0 + 248), (uint64_t (*)(void))type metadata accessor for MemberSharingCircle);
    *(_DWORD *)(v0 + 548) = *(_DWORD *)(v32 + 24);
    uint64_t v33 = sub_101046970;
    uint64_t v34 = v31;
    uint64_t v35 = 0;
    return _swift_task_switch(v33, v34, v35);
  }
  swift_bridgeObjectRelease();
  int64_t v17 = *(void *)(v5 + 16);
  if (v17)
  {
    uint64_t v18 = *(void *)(v0 + 264);
    swift_bridgeObjectRetain();
    sub_1000B6ED0(0, v17, 0);
    uint64_t v19 = *(void (**)(uint64_t, unint64_t, uint64_t))(v18 + 16);
    v18 += 16;
    unint64_t v62 = v5;
    unint64_t v20 = v5 + ((*(unsigned __int8 *)(v18 + 64) + 32) & ~(unint64_t)*(unsigned __int8 *)(v18 + 64));
    uint64_t v64 = *(void *)(v18 + 56);
    uint64_t v65 = v19;
    uint64_t v21 = (void (**)(uint64_t, uint64_t))(v18 - 8);
    do
    {
      uint64_t v22 = *(void *)(v0 + 288);
      uint64_t v23 = v0;
      uint64_t v24 = *(void *)(v0 + 256);
      v65(v22, v20, v24);
      uint64_t v25 = UUID.uuidString.getter();
      uint64_t v27 = v26;
      (*v21)(v22, v24);
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
        sub_1000B6ED0(0, _swiftEmptyArrayStorage[2] + 1, 1);
      }
      unint64_t v29 = _swiftEmptyArrayStorage[2];
      unint64_t v28 = _swiftEmptyArrayStorage[3];
      if (v29 >= v28 >> 1) {
        sub_1000B6ED0(v28 > 1, v29 + 1, 1);
      }
      _swiftEmptyArrayStorage[2] = v29 + 1;
      uint64_t v30 = &_swiftEmptyArrayStorage[2 * v29];
      v30[4] = v25;
      v30[5] = v27;
      v20 += v64;
      --v17;
      uint64_t v0 = v23;
    }
    while (v17);
    unint64_t v5 = v62;
    swift_bridgeObjectRelease();
  }
  swift_beginAccess();
  sub_10104B628((uint64_t)_swiftEmptyArrayStorage);
  swift_endAccess();
  if (qword_101636888 != -1) {
    swift_once();
  }
  sub_100010324(*(void *)(v0 + 168), (uint64_t)qword_10170D788);
  swift_bridgeObjectRetain();
  unsigned __int8 v36 = Logger.logObject.getter();
  os_log_type_t v37 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v36, v37))
  {
    uint64_t v38 = (uint8_t *)swift_slowAlloc();
    *(_DWORD *)uint64_t v38 = 134217984;
    uint64_t v39 = *(void *)(v5 + 16);
    swift_bridgeObjectRelease();
    *(void *)(v0 + 136) = v39;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v36, v37, "SharesRemovalManager: 2. saved %ld revokedCircles.", v38, 0xCu);
    swift_slowDealloc();
  }
  else
  {
    swift_bridgeObjectRelease_n();
  }

  uint64_t v40 = self;
  id v41 = [v40 defaultWorkspace];
  if (!v41)
  {
    __break(1u);
LABEL_39:
    uint64_t v33 = (uint64_t (*)())swift_release_n();
    __break(1u);
    return _swift_task_switch(v33, v34, v35);
  }
  uint64_t v42 = v41;
  uint64_t v43 = *(void *)(v0 + 160);
  NSString v44 = String._bridgeToObjectiveC()();
  unsigned __int8 v45 = [v42 applicationIsInstalled:v44];

  swift_beginAccess();
  char v46 = v45;
  uint64_t v47 = (void *)v0;
  sub_10104B99C(v46);
  swift_endAccess();
  sub_10001CD44((void *)(v43 + 152), *(void *)(v43 + 176));
  swift_retain();
  AnyCurrentValuePublisher.value.getter();
  swift_release();
  LOBYTE(v42) = *(unsigned char *)(v0 + 556) == 1;
  swift_beginAccess();
  sub_10104B99C((char)v42);
  swift_endAccess();
  if (qword_101636888 != -1) {
    swift_once();
  }
  uint64_t v49 = *(void *)(v0 + 176);
  uint64_t v48 = v47[23];
  uint64_t v50 = v47[21];
  uint64_t v51 = sub_100010324(v50, (uint64_t)qword_10170D788);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v49 + 16))(v48, v51, v50);
  swift_retain_n();
  uint64_t v52 = Logger.logObject.getter();
  os_log_type_t v53 = static os_log_type_t.default.getter();
  if (!os_log_type_enabled(v52, v53))
  {
    swift_release_n();
    goto LABEL_35;
  }
  os_log_type_t v63 = v53;
  uint64_t v54 = swift_slowAlloc();
  *(_DWORD *)uint64_t v54 = 67109376;
  id v55 = [v40 defaultWorkspace];
  uint64_t v56 = v47;
  if (!v55) {
    goto LABEL_39;
  }
  uint64_t v57 = v55;
  NSString v58 = String._bridgeToObjectiveC()();
  unsigned int v59 = [v57 applicationIsInstalled:v58];

  swift_release();
  *((_DWORD *)v56 + 134) = v59;
  UnsafeMutableRawBufferPointer.copyMemory(from:)();
  swift_release();
  *(_WORD *)(v54 + 8) = 1024;
  sub_10001CD44((void *)(v43 + 152), *(void *)(v43 + 176));
  swift_retain();
  AnyCurrentValuePublisher.value.getter();
  swift_release();
  LODWORD(v58) = *((unsigned __int8 *)v56 + 557);
  swift_release();
  *((_DWORD *)v56 + 135) = v58 == 1;
  UnsafeMutableRawBufferPointer.copyMemory(from:)();
  swift_release();
  _os_log_impl((void *)&_mh_execute_header, v52, v63, "SharesRemovalManager: 3. cached isInstalled: %{BOOL}d, isMeDevice: %{BOOL}d", (uint8_t *)v54, 0xEu);
  swift_slowDealloc();
  uint64_t v47 = v56;
LABEL_35:

  (*(void (**)(void, void))(v47[22] + 8))(v47[23], v47[21]);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v60 = (uint64_t (*)(void))v47[1];
  return v60();
}

uint64_t sub_101047624(uint64_t a1, uint64_t a2)
{
  v2[10] = a1;
  v2[11] = a2;
  sub_10000588C(&qword_10163BC10);
  v2[12] = swift_task_alloc();
  return _swift_task_switch(sub_1010476B8, 0, 0);
}

uint64_t sub_1010476B8()
{
  if (qword_101636888 != -1) {
    swift_once();
  }
  uint64_t v1 = type metadata accessor for Logger();
  *(void *)(v0 + 104) = sub_100010324(v1, (uint64_t)qword_10170D788);
  uint64_t v2 = Logger.logObject.getter();
  os_log_type_t v3 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v2, v3))
  {
    uint64_t v4 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v4 = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, v3, "SharesRemovalManager: 1. check shares cleanup conditions.", v4, 2u);
    swift_slowDealloc();
  }

  unint64_t v5 = (void *)swift_task_alloc();
  *(void *)(v0 + 112) = v5;
  *unint64_t v5 = v0;
  v5[1] = sub_101047808;
  return sub_101045070();
}

uint64_t sub_101047808()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 88);
  swift_task_dealloc();
  return _swift_task_switch(sub_101047918, v1, 0);
}

uint64_t sub_101047918()
{
  *(unsigned char *)(v0 + 192) = sub_101048378() & 1;
  return _swift_task_switch(sub_101047988, 0, 0);
}

uint64_t sub_101047988()
{
  if (*(unsigned char *)(v0 + 192) == 1)
  {
    uint64_t v1 = Logger.logObject.getter();
    os_log_type_t v2 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v1, v2))
    {
      uint64_t v3 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v3 = 0;
      _os_log_impl((void *)&_mh_execute_header, v1, v2, "SharesRemovalManager: 4. shares cleanup is required.", v3, 2u);
      swift_slowDealloc();
    }
    uint64_t v4 = *(void *)(v0 + 88);

    return _swift_task_switch(sub_101047AB8, v4, 0);
  }
  else
  {
    **(unsigned char **)(v0 + 80) = 0;
    swift_task_dealloc();
    unint64_t v5 = *(uint64_t (**)(void))(v0 + 8);
    return v5();
  }
}

uint64_t sub_101047AB8()
{
  uint64_t v1 = v0[11];
  uint64_t v2 = v0[12];
  uint64_t v3 = OBJC_IVAR____TtC12searchpartyd20SharesRemovalManager__revokedCircles;
  v0[15] = OBJC_IVAR____TtC12searchpartyd20SharesRemovalManager__revokedCircles;
  uint64_t v4 = v1 + v3;
  swift_beginAccess();
  sub_10001D074(v4, v2, &qword_10163BC10);
  v0[16] = sub_10104B1E0();
  sub_10001DAB4(v2, &qword_10163BC10);
  return _swift_task_switch(sub_101047B74, 0, 0);
}

uint64_t sub_101047B74()
{
  uint64_t v1 = (void *)v0[16];
  uint64_t v2 = v1[2];
  v0[17] = v2;
  if (v2)
  {
    v0[18] = 0;
    uint64_t v4 = v1[4];
    uint64_t v3 = v1[5];
    v0[19] = v3;
    swift_bridgeObjectRetain();
    unint64_t v5 = (void *)swift_task_alloc();
    v0[20] = v5;
    *unint64_t v5 = v0;
    v5[1] = sub_101047C80;
    return sub_101048454(v4, v3);
  }
  else
  {
    uint64_t v7 = v0[11];
    swift_bridgeObjectRelease();
    return _swift_task_switch(sub_101047EB0, v7, 0);
  }
}

uint64_t sub_101047C80()
{
  swift_task_dealloc();
  swift_bridgeObjectRelease();
  return _swift_task_switch(sub_101047D98, 0, 0);
}

uint64_t sub_101047D98()
{
  uint64_t v1 = v0[18] + 1;
  if (v1 == v0[17])
  {
    uint64_t v2 = v0[11];
    swift_bridgeObjectRelease();
    return _swift_task_switch(sub_101047EB0, v2, 0);
  }
  else
  {
    v0[18] = v1;
    uint64_t v3 = v0[16] + 16 * v1;
    uint64_t v5 = *(void *)(v3 + 32);
    uint64_t v4 = *(void *)(v3 + 40);
    v0[19] = v4;
    swift_bridgeObjectRetain();
    uint64_t v6 = (void *)swift_task_alloc();
    v0[20] = v6;
    *uint64_t v6 = v0;
    v6[1] = sub_101047C80;
    return sub_101048454(v5, v4);
  }
}

uint64_t sub_101047EB0()
{
  uint64_t v1 = v0[12];
  sub_10001D074(v0[11] + v0[15], v1, &qword_10163BC10);
  v0[21] = sub_10104B1E0();
  sub_10001DAB4(v1, &qword_10163BC10);
  return _swift_task_switch(sub_101047F44, 0, 0);
}

uint64_t sub_101047F44()
{
  v0[8] = v0[21];
  uint64_t v1 = (void *)swift_task_alloc();
  v0[22] = v1;
  uint64_t v2 = sub_10000588C(&qword_101654A30);
  uint64_t v3 = sub_100062734(&qword_1016681B0, &qword_101654A30);
  *uint64_t v1 = v0;
  v1[1] = sub_101048044;
  uint64_t v4 = v0[11];
  return Sequence.asyncFilter(_:)(&unk_1016681A8, v4, v2, v3);
}

uint64_t sub_101048044(uint64_t a1)
{
  uint64_t v2 = *(void *)(*(void *)v1 + 88);
  *(void *)(*(void *)v1 + 184) = a1;
  swift_task_dealloc();
  swift_bridgeObjectRelease();
  return _swift_task_switch(sub_101048180, v2, 0);
}

uint64_t sub_101048180()
{
  swift_beginAccess();
  uint64_t v0 = swift_bridgeObjectRetain();
  sub_10104B628(v0);
  swift_endAccess();
  return _swift_task_switch(sub_101048228, 0, 0);
}

uint64_t sub_101048228()
{
  swift_bridgeObjectRetain();
  uint64_t v1 = Logger.logObject.getter();
  os_log_type_t v2 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v1, v2))
  {
    uint64_t v3 = *(void *)(v0 + 184);
    uint64_t v4 = (uint8_t *)swift_slowAlloc();
    *(_DWORD *)uint64_t v4 = 134217984;
    uint64_t v5 = *(void *)(v3 + 16);
    swift_bridgeObjectRelease();
    *(void *)(v0 + 72) = v5;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v1, v2, "SharesRemovalManager: 6. after shares cleanup revokedCircles count = %ld.", v4, 0xCu);
    swift_slowDealloc();
  }
  else
  {
    swift_bridgeObjectRelease_n();
  }

  **(unsigned char **)(v0 + 80) = 0;
  swift_task_dealloc();
  uint64_t v6 = *(uint64_t (**)(void))(v0 + 8);
  return v6();
}

id sub_101048378()
{
  sub_10001CD44((void *)(v0 + 152), *(void *)(v0 + 176));
  swift_retain();
  AnyCurrentValuePublisher.value.getter();
  swift_release();
  if (v5 != 1) {
    return 0;
  }
  id result = [self defaultWorkspace];
  if (result)
  {
    os_log_type_t v2 = result;
    NSString v3 = String._bridgeToObjectiveC()();
    unsigned int v4 = [v2 applicationIsInstalled:v3];

    return (id)(v4 ^ 1);
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_101048454(uint64_t a1, uint64_t a2)
{
  v3[10] = a2;
  v3[11] = v2;
  v3[9] = a1;
  sub_10000588C(&qword_101638CF0);
  v3[12] = swift_task_alloc();
  uint64_t v4 = type metadata accessor for UUID();
  v3[13] = v4;
  v3[14] = *(void *)(v4 - 8);
  v3[15] = swift_task_alloc();
  return _swift_task_switch(sub_101048548, v2, 0);
}

uint64_t sub_101048548()
{
  uint64_t v18 = v0;
  uint64_t v1 = v0[13];
  uint64_t v2 = v0[14];
  uint64_t v3 = v0[12];
  UUID.init(uuidString:)();
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v2 + 48))(v3, 1, v1) == 1)
  {
    sub_10001DAB4(v0[12], &qword_101638CF0);
    if (qword_101636888 != -1) {
      swift_once();
    }
    uint64_t v4 = type metadata accessor for Logger();
    sub_100010324(v4, (uint64_t)qword_10170D788);
    swift_bridgeObjectRetain_n();
    char v5 = Logger.logObject.getter();
    os_log_type_t v6 = static os_log_type_t.error.getter();
    BOOL v7 = os_log_type_enabled(v5, v6);
    unint64_t v8 = v0[10];
    if (v7)
    {
      uint64_t v9 = v0[9];
      uint64_t v10 = swift_slowAlloc();
      uint64_t v17 = swift_slowAlloc();
      *(_DWORD *)uint64_t v10 = 141558275;
      v0[5] = 1752392040;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v10 + 12) = 2081;
      swift_bridgeObjectRetain();
      v0[6] = sub_1008FA0F0(v9, v8, &v17);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      _os_log_impl((void *)&_mh_execute_header, v5, v6, "SharesRemovalManager: 5. Can't create UUID for revoked circle!\nIncoming id is %{private,mask.hash}s", (uint8_t *)v10, 0x16u);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      swift_bridgeObjectRelease_n();
    }

    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v15 = (uint64_t (*)(void))v0[1];
    return v15();
  }
  else
  {
    uint64_t v11 = v0[11];
    (*(void (**)(void, void, void))(v0[14] + 32))(v0[15], v0[12], v0[13]);
    uint64_t v16 = (uint64_t (*)(uint64_t))(*(void *)(v11 + 224) + **(int **)(v11 + 224));
    uint64_t v12 = (void *)swift_task_alloc();
    v0[16] = v12;
    *uint64_t v12 = v0;
    v12[1] = sub_101048884;
    uint64_t v13 = v0[15];
    return v16(v13);
  }
}

uint64_t sub_101048884()
{
  uint64_t v2 = *v1;
  *(void *)(*v1 + 136) = v0;
  swift_task_dealloc();
  uint64_t v3 = *(void *)(v2 + 88);
  if (v0) {
    uint64_t v4 = sub_101048A34;
  }
  else {
    uint64_t v4 = sub_1010489B0;
  }
  return _swift_task_switch(v4, v3, 0);
}

uint64_t sub_1010489B0()
{
  (*(void (**)(void, void))(v0[14] + 8))(v0[15], v0[13]);
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = (uint64_t (*)(void))v0[1];
  return v1();
}

uint64_t sub_101048A34()
{
  uint64_t v10 = v0;
  (*(void (**)(void, void))(v0[14] + 8))(v0[15], v0[13]);
  if (qword_101636888 != -1) {
    swift_once();
  }
  uint64_t v1 = type metadata accessor for Logger();
  sub_100010324(v1, (uint64_t)qword_10170D788);
  swift_errorRetain();
  swift_errorRetain();
  uint64_t v2 = Logger.logObject.getter();
  os_log_type_t v3 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v2, v3))
  {
    uint64_t v4 = (uint8_t *)swift_slowAlloc();
    uint64_t v9 = swift_slowAlloc();
    *(_DWORD *)uint64_t v4 = 136315138;
    swift_getErrorValue();
    uint64_t v5 = Error.localizedDescription.getter();
    v0[8] = sub_1008FA0F0(v5, v6, &v9);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl((void *)&_mh_execute_header, v2, v3, "SharesRemovalManager: 5. Error during shares cleanup: %s", v4, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    swift_errorRelease();
  }
  else
  {
    swift_errorRelease();
    swift_errorRelease();
    swift_errorRelease();
  }
  swift_task_dealloc();
  swift_task_dealloc();
  BOOL v7 = (uint64_t (*)(void))v0[1];
  return v7();
}

uint64_t sub_101048C88(uint64_t *a1, uint64_t a2)
{
  v2[2] = a2;
  v2[3] = sub_10000588C((uint64_t *)&unk_10163B7C0);
  v2[4] = swift_task_alloc();
  v2[5] = sub_10000588C((uint64_t *)&unk_101638D10);
  v2[6] = swift_task_alloc();
  sub_10000588C(&qword_101638CF0);
  v2[7] = swift_task_alloc();
  uint64_t v4 = type metadata accessor for UUID();
  v2[8] = v4;
  uint64_t v5 = *(void *)(v4 - 8);
  v2[9] = v5;
  v2[10] = *(void *)(v5 + 64);
  v2[11] = swift_task_alloc();
  uint64_t v6 = swift_task_alloc();
  uint64_t v7 = *a1;
  uint64_t v8 = a1[1];
  v2[12] = v6;
  v2[13] = v7;
  v2[14] = v8;
  return _swift_task_switch(sub_101048E04, 0, 0);
}

uint64_t sub_101048E04()
{
  uint64_t v1 = v0[8];
  uint64_t v2 = v0[9];
  uint64_t v3 = v0[7];
  UUID.init(uuidString:)();
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v2 + 48))(v3, 1, v1) == 1)
  {
    sub_10001DAB4(v0[7], &qword_101638CF0);
    if (qword_101636888 != -1) {
      swift_once();
    }
    uint64_t v4 = type metadata accessor for Logger();
    sub_100010324(v4, (uint64_t)qword_10170D788);
    uint64_t v5 = Logger.logObject.getter();
    os_log_type_t v6 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v5, v6))
    {
      uint64_t v7 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v7 = 0;
      _os_log_impl((void *)&_mh_execute_header, v5, v6, "Can't create UUID for revoked circle from UserDefaults!", v7, 2u);
      swift_slowDealloc();
    }

    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v8 = (uint64_t (*)(void))v0[1];
    return v8(0);
  }
  else
  {
    uint64_t v10 = v0[12];
    uint64_t v11 = v0[8];
    uint64_t v12 = v0[9];
    uint64_t v13 = v0[7];
    uint64_t v14 = v0[2];
    uint64_t v15 = *(void (**)(uint64_t, uint64_t, uint64_t))(v12 + 32);
    v0[15] = v15;
    v0[16] = (v12 + 32) & 0xFFFFFFFFFFFFLL | 0x48D8000000000000;
    v15(v10, v13, v11);
    uint64_t v16 = *(void *)(v14 + 208);
    v0[17] = v16;
    return _swift_task_switch(sub_101049004, v16, 0);
  }
}

uint64_t sub_101049004()
{
  uint64_t v1 = *(void *)(v0 + 136);
  uint64_t v2 = *(void (**)(unint64_t, uint64_t, uint64_t))(v0 + 120);
  uint64_t v4 = *(void *)(v0 + 88);
  uint64_t v3 = *(void *)(v0 + 96);
  uint64_t v5 = *(void *)(v0 + 72);
  uint64_t v6 = *(void *)(v0 + 64);
  *(void *)(v0 + 144) = *(void *)(v1 + 136);
  uint64_t v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 16);
  v5 += 16;
  *(void *)(v0 + 152) = v7;
  *(void *)(v0 + 160) = v5 & 0xFFFFFFFFFFFFLL | 0xE3BA000000000000;
  v7(v4, v3, v6);
  int v8 = *(_DWORD *)(v5 + 64);
  *(_DWORD *)(v0 + 224) = v8;
  unint64_t v9 = (v8 + 24) & ~(unint64_t)v8;
  uint64_t v10 = swift_allocObject();
  *(void *)(v0 + 168) = v10;
  *(void *)(v10 + 16) = v1;
  v2(v10 + v9, v4, v6);
  swift_retain();
  return _swift_task_switch(sub_101049108, 0, 0);
}

uint64_t sub_101049108()
{
  uint64_t v1 = v0[21];
  uint64_t v2 = v0[18];
  uint64_t v3 = (void *)swift_task_alloc();
  v0[22] = v3;
  _OWORD v3[2] = v2;
  v3[3] = sub_10104CD60;
  v3[4] = v1;
  uint64_t v4 = (void *)swift_task_alloc();
  v0[23] = v4;
  *uint64_t v4 = v0;
  v4[1] = sub_101049210;
  uint64_t v6 = v0[5];
  uint64_t v5 = v0[6];
  return withCheckedContinuation<A>(isolation:function:_:)(v5, 0, 0, 0xD000000000000012, 0x80000001013F1870, sub_100090D14, v3, v6);
}

uint64_t sub_101049210()
{
  swift_task_dealloc();
  swift_release();
  swift_task_dealloc();
  return _swift_task_switch(sub_101049344, 0, 0);
}

uint64_t sub_101049344()
{
  uint64_t v1 = *(void *)(v0 + 136);
  uint64_t v2 = *(void *)(v0 + 48);
  uint64_t v3 = type metadata accessor for OwnerSharingCircle();
  *(_DWORD *)(v0 + 228) = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v3 - 8) + 48))(v2, 1, v3);
  sub_10001DAB4(v2, (uint64_t *)&unk_101638D10);
  return _swift_task_switch(sub_1010493FC, v1, 0);
}

uint64_t sub_1010493FC()
{
  uint64_t v1 = *(void (**)(uint64_t, uint64_t, uint64_t))(v0 + 152);
  uint64_t v2 = *(void *)(v0 + 136);
  uint64_t v3 = *(void (**)(unint64_t, uint64_t, uint64_t))(v0 + 120);
  uint64_t v5 = *(void *)(v0 + 88);
  uint64_t v4 = *(void *)(v0 + 96);
  uint64_t v6 = *(void *)(v0 + 64);
  unint64_t v7 = (*(unsigned __int8 *)(v0 + 224) + 24) & ~(unint64_t)*(unsigned __int8 *)(v0 + 224);
  *(void *)(v0 + 192) = *(void *)(v2 + 136);
  v1(v5, v4, v6);
  uint64_t v8 = swift_allocObject();
  *(void *)(v0 + 200) = v8;
  *(void *)(v8 + 16) = v2;
  v3(v8 + v7, v5, v6);
  swift_retain();
  return _swift_task_switch(sub_1010494EC, 0, 0);
}

uint64_t sub_1010494EC()
{
  uint64_t v2 = v0[24];
  uint64_t v1 = v0[25];
  uint64_t v3 = (void *)swift_task_alloc();
  v0[26] = v3;
  _OWORD v3[2] = v2;
  v3[3] = sub_10104CD7C;
  v3[4] = v1;
  uint64_t v4 = (void *)swift_task_alloc();
  v0[27] = v4;
  *uint64_t v4 = v0;
  v4[1] = sub_1010495F0;
  uint64_t v6 = v0[3];
  uint64_t v5 = v0[4];
  return withCheckedContinuation<A>(isolation:function:_:)(v5, 0, 0, 0xD000000000000012, 0x80000001013F1870, sub_100075020, v3, v6);
}

uint64_t sub_1010495F0()
{
  swift_task_dealloc();
  swift_release();
  swift_task_dealloc();
  return _swift_task_switch(sub_101049724, 0, 0);
}

uint64_t sub_101049724()
{
  uint64_t v1 = *(void *)(v0 + 32);
  (*(void (**)(void, void))(*(void *)(v0 + 72) + 8))(*(void *)(v0 + 96), *(void *)(v0 + 64));
  uint64_t v2 = type metadata accessor for MemberSharingCircle();
  BOOL v3 = 1;
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v2 - 8) + 48))(v1, 1, v2) == 1) {
    BOOL v3 = *(_DWORD *)(v0 + 228) != 1;
  }
  sub_10001DAB4(*(void *)(v0 + 32), (uint64_t *)&unk_10163B7C0);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v4 = *(uint64_t (**)(BOOL))(v0 + 8);
  return v4(v3);
}

uint64_t sub_101049844()
{
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v0 + 112);
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v0 + 152);
  swift_unknownObjectRelease();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  sub_10001DAB4(v0 + OBJC_IVAR____TtC12searchpartyd20SharesRemovalManager__isFindMyAppInstalledCached, &qword_10163BC08);
  sub_10001DAB4(v0 + OBJC_IVAR____TtC12searchpartyd20SharesRemovalManager__isThisMeDeviceCached, &qword_10163BC08);
  sub_10001DAB4(v0 + OBJC_IVAR____TtC12searchpartyd20SharesRemovalManager__revokedCircles, &qword_10163BC10);
  swift_defaultActor_destroy();
  return v0;
}

uint64_t sub_1010498EC()
{
  sub_101049844();

  return _swift_defaultActor_deallocate(v0);
}

uint64_t sub_101049918()
{
  return type metadata accessor for SharesRemovalManager();
}

uint64_t type metadata accessor for SharesRemovalManager()
{
  uint64_t result = qword_101667EC8;
  if (!qword_101667EC8) {
    return swift_getSingletonMetadata();
  }
  return result;
}

void sub_10104996C()
{
  sub_101049A7C();
  if (v0 <= 0x3F)
  {
    sub_101049AF4();
    if (v1 <= 0x3F) {
      swift_updateClassMetadata2();
    }
  }
}

void sub_101049A7C()
{
  if (!qword_101667ED8)
  {
    unint64_t v0 = type metadata accessor for PrefixedStored();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_101667ED8);
    }
  }
}

uint64_t type metadata accessor for PrefixedStored()
{
  return sub_1000103A0();
}

void sub_101049AF4()
{
  if (!qword_101667EE0)
  {
    sub_10000592C(&qword_101654A30);
    sub_101049B5C();
    unint64_t v0 = type metadata accessor for PrefixedStored();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_101667EE0);
    }
  }
}

unint64_t sub_101049B5C()
{
  unint64_t result = qword_101667EE8;
  if (!qword_101667EE8)
  {
    sub_10000592C(&qword_101654A30);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_101667EE8);
  }
  return result;
}

uint64_t sub_101049BC8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v4[3] = a4;
  uint64_t v5 = sub_10000588C(&qword_10163BDA8);
  v4[4] = v5;
  v4[5] = *(void *)(v5 - 8);
  v4[6] = swift_task_alloc();
  uint64_t v6 = sub_10000588C(&qword_10163BDB0);
  v4[7] = v6;
  v4[8] = *(void *)(v6 - 8);
  v4[9] = swift_task_alloc();
  return _swift_task_switch(sub_101049CEC, 0, 0);
}

uint64_t sub_101049CEC()
{
  sub_10001CD44((void *)(v0[3] + 112), *(void *)(v0[3] + 136));
  uint64_t v1 = type metadata accessor for SharingScheduler();
  uint64_t v5 = (char *)dword_101662C40 + dword_101662C40[0];
  uint64_t v2 = (void *)swift_task_alloc();
  v0[10] = v2;
  *uint64_t v2 = v0;
  v2[1] = sub_101049E1C;
  uint64_t v3 = v0[6];
  return ((uint64_t (*)(uint64_t, uint64_t, _UNKNOWN **))v5)(v3, v1, &off_1015FBB80);
}

uint64_t sub_101049E1C()
{
  swift_task_dealloc();
  return _swift_task_switch(sub_101049F18, 0, 0);
}

uint64_t sub_101049F18()
{
  uint64_t v2 = v0[5];
  uint64_t v1 = v0[6];
  uint64_t v3 = v0[4];
  AsyncStream.makeAsyncIterator()();
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  uint64_t v4 = (void *)swift_task_alloc();
  v0[11] = v4;
  *uint64_t v4 = v0;
  v4[1] = sub_101049FF8;
  uint64_t v5 = v0[7];
  return AsyncStream.Iterator.next(isolation:)(v0 + 2, 0, 0, v5);
}

uint64_t sub_101049FF8()
{
  swift_task_dealloc();
  return _swift_task_switch(sub_10104A0F4, 0, 0);
}

uint64_t sub_10104A0F4()
{
  if (v0[2])
  {
    uint64_t v1 = v0[3];
    swift_release();
    return _swift_task_switch(sub_10104A1C0, v1, 0);
  }
  else
  {
    (*(void (**)(void, void))(v0[8] + 8))(v0[9], v0[7]);
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v2 = (uint64_t (*)(void))v0[1];
    return v2();
  }
}

uint64_t sub_10104A1C0()
{
  if (qword_101636888 != -1) {
    swift_once();
  }
  uint64_t v1 = type metadata accessor for Logger();
  sub_100010324(v1, (uint64_t)qword_10170D788);
  uint64_t v2 = Logger.logObject.getter();
  os_log_type_t v3 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v2, v3))
  {
    uint64_t v4 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v4 = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, v3, "SharesRemovalManager: 0. check shares cleanup after scheduler fire", v4, 2u);
    swift_slowDealloc();
  }

  unint64_t v9 = (uint64_t (*)(uint64_t, void *, uint64_t, uint64_t))((char *)&async function pointer to dispatch thunk of WorkItemQueue.enqueueAndAwaitResult<A>(_:)
                                                                 + async function pointer to dispatch thunk of WorkItemQueue.enqueueAndAwaitResult<A>(_:));
  swift_retain();
  uint64_t v5 = (void *)swift_task_alloc();
  *(void *)(v0 + 96) = v5;
  uint64_t v6 = sub_10000588C((uint64_t *)&unk_101638DC0);
  *uint64_t v5 = v0;
  v5[1] = sub_10104A368;
  uint64_t v7 = *(void *)(v0 + 24);
  return v9(v0 + 104, &unk_101668188, v7, v6);
}

uint64_t sub_10104A368()
{
  uint64_t v2 = *v1;
  swift_task_dealloc();
  uint64_t v3 = *(void *)(v2 + 24);
  if (v0)
  {
    swift_errorRelease();
    swift_release();
    uint64_t v4 = sub_10104D1D8;
  }
  else
  {
    swift_release();
    uint64_t v4 = sub_10104A4B0;
  }
  return _swift_task_switch(v4, v3, 0);
}

uint64_t sub_10104A4B0()
{
  uint64_t v1 = (void *)swift_task_alloc();
  *(void *)(v0 + 88) = v1;
  *uint64_t v1 = v0;
  v1[1] = sub_101049FF8;
  uint64_t v2 = *(void *)(v0 + 56);
  return AsyncStream.Iterator.next(isolation:)(v0 + 16, 0, 0, v2);
}

uint64_t sub_10104A55C()
{
  if (qword_101636888 != -1) {
    swift_once();
  }
  uint64_t v0 = type metadata accessor for Logger();
  sub_100010324(v0, (uint64_t)qword_10170D788);
  uint64_t v1 = Logger.logObject.getter();
  os_log_type_t v2 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v1, v2))
  {
    uint64_t v3 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v3 = 0;
    _os_log_impl((void *)&_mh_execute_header, v1, v2, "SharesRemovalManager: 0. check shares cleanup after me device change", v3, 2u);
    swift_slowDealloc();
  }

  type metadata accessor for Transaction();
  swift_allocObject();
  swift_beginAccess();
  swift_weakLoadStrong();
  swift_weakInit();
  swift_release();
  swift_retain();
  static Transaction.asyncTask(name:block:)();
  return swift_release_n();
}

uint64_t sub_10104A6E0(uint64_t a1)
{
  *(void *)(v1 + 40) = a1;
  return _swift_task_switch(sub_10104A700, 0, 0);
}

uint64_t sub_10104A700()
{
  swift_beginAccess();
  uint64_t Strong = swift_weakLoadStrong();
  *(void *)(v0 + 48) = Strong;
  if (Strong)
  {
    return _swift_task_switch(sub_10104A7BC, Strong, 0);
  }
  else
  {
    os_log_type_t v2 = *(uint64_t (**)(void))(v0 + 8);
    return v2();
  }
}

uint64_t sub_10104A7BC()
{
  uint64_t v5 = (uint64_t (*)(uint64_t, void *, uint64_t, uint64_t))((char *)&async function pointer to dispatch thunk of WorkItemQueue.enqueueAndAwaitResult<A>(_:)
                                                                 + async function pointer to dispatch thunk of WorkItemQueue.enqueueAndAwaitResult<A>(_:));
  swift_retain();
  uint64_t v1 = (void *)swift_task_alloc();
  *(void *)(v0 + 56) = v1;
  uint64_t v2 = sub_10000588C((uint64_t *)&unk_101638DC0);
  *uint64_t v1 = v0;
  v1[1] = sub_10104A8A8;
  uint64_t v3 = *(void *)(v0 + 48);
  return v5(v0 + 64, &unk_101668218, v3, v2);
}

uint64_t sub_10104A8A8()
{
  uint64_t v2 = *v1;
  swift_task_dealloc();
  uint64_t v3 = *(void *)(v2 + 48);
  if (v0)
  {
    swift_errorRelease();
    swift_release();
    uint64_t v4 = sub_10104D1BC;
  }
  else
  {
    swift_release();
    uint64_t v4 = sub_10048C468;
  }
  return _swift_task_switch(v4, v3, 0);
}

uint64_t sub_10104A9F0(uint64_t a1)
{
  *(void *)(v1 + 40) = a1;
  return _swift_task_switch(sub_10104AA10, 0, 0);
}

uint64_t sub_10104AA10()
{
  if (qword_101636888 != -1) {
    swift_once();
  }
  uint64_t v1 = type metadata accessor for Logger();
  sub_100010324(v1, (uint64_t)qword_10170D788);
  uint64_t v2 = Logger.logObject.getter();
  os_log_type_t v3 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v2, v3))
  {
    uint64_t v4 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v4 = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, v3, "SharesRemovalManager: 0. check shares cleanup after apps list changed", v4, 2u);
    swift_slowDealloc();
  }

  swift_beginAccess();
  uint64_t Strong = swift_weakLoadStrong();
  *(void *)(v0 + 48) = Strong;
  if (Strong)
  {
    return _swift_task_switch(sub_10104AB90, Strong, 0);
  }
  else
  {
    uint64_t v6 = *(uint64_t (**)(void))(v0 + 8);
    return v6();
  }
}

uint64_t sub_10104AB90()
{
  uint64_t v5 = (uint64_t (*)(uint64_t, void *, uint64_t, uint64_t))((char *)&async function pointer to dispatch thunk of WorkItemQueue.enqueueAndAwaitResult<A>(_:)
                                                                 + async function pointer to dispatch thunk of WorkItemQueue.enqueueAndAwaitResult<A>(_:));
  swift_retain();
  uint64_t v1 = (void *)swift_task_alloc();
  *(void *)(v0 + 56) = v1;
  uint64_t v2 = sub_10000588C((uint64_t *)&unk_101638DC0);
  *uint64_t v1 = v0;
  v1[1] = sub_10104AC7C;
  uint64_t v3 = *(void *)(v0 + 48);
  return v5(v0 + 64, &unk_1016681F0, v3, v2);
}

uint64_t sub_10104AC7C()
{
  uint64_t v2 = *v1;
  swift_task_dealloc();
  uint64_t v3 = *(void *)(v2 + 48);
  if (v0) {
    swift_errorRelease();
  }
  swift_release();
  return _swift_task_switch(sub_10104D1BC, v3, 0);
}

uint64_t sub_10104ADC4()
{
  uint64_t v1 = v0;
  uint64_t v2 = sub_10000588C(&qword_10163BC08);
  uint64_t v3 = __chkstk_darwin(v2);
  uint64_t v25 = (uint64_t)&v24 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v3);
  uint64_t v6 = (char *)&v24 - v5;
  uint64_t v7 = type metadata accessor for PrefixedDefaults();
  uint64_t v8 = *(void *)(v7 - 8);
  __chkstk_darwin(v7);
  uint64_t v10 = (char *)&v24 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = sub_10000588C(&qword_1016681C0);
  uint64_t v12 = *(void *)(v11 - 8);
  __chkstk_darwin(v11);
  uint64_t v14 = (char *)&v24 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_1016371D8 != -1) {
    swift_once();
  }
  uint64_t v26 = 0x7365547265646E75;
  unint64_t v27 = 0xE900000000000074;
  SynchronousCache.cachedValue<A>(key:computeBlock:)();
  uint64_t v15 = swift_bridgeObjectRelease();
  if (v28 == 1)
  {
    if (qword_1016373A0 != -1) {
      uint64_t v15 = swift_once();
    }
    __chkstk_darwin(v15);
    *(&v24 - 4) = v16;
    *(&v24 - 3) = v17;
    *(&v24 - 2) = v18;
    sub_10000588C((uint64_t *)&unk_101644360);
    OSAllocatedUnfairLock.callAsFunction<A>(_:)();
    if ((swift_dynamicCast() & 1) == 0) {
      char v28 = 2;
    }
    uint64_t v19 = v25;
    sub_10001D074(v1, v25, &qword_10163BC08);
    if (v28 == 2) {
      uint64_t v20 = *(unsigned __int8 *)(v19 + 16);
    }
    else {
      uint64_t v20 = v28 & 1;
    }
    uint64_t v22 = v19;
  }
  else
  {
    (*(void (**)(char *, uint64_t, uint64_t))(v8 + 16))(v10, v0 + *(int *)(v2 + 40), v7);
    swift_bridgeObjectRetain();
    ManagedDefault.init(prefixedDefaults:key:)();
    ManagedDefault.wrappedValue.getter();
    int v21 = v26;
    (*(void (**)(char *, uint64_t))(v12 + 8))(v14, v11);
    sub_10001D074(v1, (uint64_t)v6, &qword_10163BC08);
    if (v21 == 2) {
      uint64_t v20 = v6[16];
    }
    else {
      uint64_t v20 = v21 & 1;
    }
    uint64_t v22 = (uint64_t)v6;
  }
  sub_10001DAB4(v22, &qword_10163BC08);
  return v20;
}

uint64_t sub_10104B1E0()
{
  uint64_t v1 = v0;
  uint64_t v2 = sub_10000588C(&qword_10163BC10);
  uint64_t v3 = __chkstk_darwin(v2);
  uint64_t v23 = (uint64_t)&v22 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v3);
  uint64_t v6 = (char *)&v22 - v5;
  uint64_t v7 = type metadata accessor for PrefixedDefaults();
  uint64_t v8 = *(void *)(v7 - 8);
  __chkstk_darwin(v7);
  uint64_t v10 = (char *)&v22 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = sub_10000588C(&qword_1016681B8);
  uint64_t v12 = *(void *)(v11 - 8);
  __chkstk_darwin(v11);
  uint64_t v14 = (char *)&v22 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_1016371D8 != -1) {
    swift_once();
  }
  uint64_t v25 = 0x7365547265646E75;
  unint64_t v26 = 0xE900000000000074;
  SynchronousCache.cachedValue<A>(key:computeBlock:)();
  uint64_t v15 = swift_bridgeObjectRelease();
  if (v24 == 1)
  {
    if (qword_1016373A0 != -1) {
      uint64_t v15 = swift_once();
    }
    __chkstk_darwin(v15);
    *(&v22 - 4) = v16;
    *(&v22 - 3) = v17;
    *(&v22 - 2) = v18;
    sub_10000588C((uint64_t *)&unk_101644360);
    OSAllocatedUnfairLock.callAsFunction<A>(_:)();
    sub_10000588C(&qword_101654A30);
    if ((swift_dynamicCast() & 1) == 0) {
      uint64_t v24 = 0;
    }
    uint64_t v19 = v23;
    sub_10001D074(v0, v23, &qword_10163BC10);
    if (v24)
    {
      sub_10001DAB4(v19, &qword_10163BC10);
      return v24;
    }
    else
    {
      uint64_t v20 = *(void *)(v19 + 16);
      swift_bridgeObjectRetain();
      sub_10001DAB4(v19, &qword_10163BC10);
      swift_bridgeObjectRelease();
    }
  }
  else
  {
    (*(void (**)(char *, uint64_t, uint64_t))(v8 + 16))(v10, v0 + *(int *)(v2 + 40), v7);
    swift_bridgeObjectRetain();
    sub_10000588C(&qword_101654A30);
    sub_101049B5C();
    ManagedDefault.init(prefixedDefaults:key:)();
    ManagedDefault.wrappedValue.getter();
    uint64_t v20 = v25;
    (*(void (**)(char *, uint64_t))(v12 + 8))(v14, v11);
    sub_10001D074(v1, (uint64_t)v6, &qword_10163BC10);
    if (!v20)
    {
      uint64_t v20 = *((void *)v6 + 2);
      swift_bridgeObjectRetain();
    }
    sub_10001DAB4((uint64_t)v6, &qword_10163BC10);
  }
  return v20;
}

uint64_t sub_10104B628(uint64_t a1)
{
  uint64_t v3 = type metadata accessor for PrefixedDefaults();
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  uint64_t v6 = (char *)&v17[-1] - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = sub_10000588C(&qword_1016681B8);
  uint64_t v8 = *(void *)(v7 - 8);
  __chkstk_darwin(v7);
  uint64_t v10 = (char *)&v17[-1] - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_1016371D8 != -1) {
    swift_once();
  }
  v17[0] = 0x7365547265646E75;
  v17[1] = 0xE900000000000074;
  SynchronousCache.cachedValue<A>(key:computeBlock:)();
  swift_bridgeObjectRelease();
  if (v19 == 1)
  {
    if (qword_1016373A0 != -1) {
      swift_once();
    }
    uint64_t v11 = qword_10170F128;
    uint64_t v18 = sub_10000588C(&qword_101654A30);
    v17[0] = a1;
    __chkstk_darwin(v18);
    *(&v16 - 4) = v11;
    *(&v16 - 3) = v12;
    *(&v16 - 2) = v13;
    *(&v16 - 1) = (uint64_t)v17;
    swift_bridgeObjectRetain();
    OSAllocatedUnfairLock.callAsFunction<A>(_:)();
    swift_bridgeObjectRelease();
    return sub_10001DAB4((uint64_t)v17, (uint64_t *)&unk_101644360);
  }
  else
  {
    uint64_t v15 = sub_10000588C(&qword_10163BC10);
    (*(void (**)(char *, uint64_t, uint64_t))(v4 + 16))(v6, v1 + *(int *)(v15 + 40), v3);
    swift_bridgeObjectRetain();
    sub_10000588C(&qword_101654A30);
    sub_101049B5C();
    ManagedDefault.init(prefixedDefaults:key:)();
    uint64_t v19 = a1;
    swift_beginAccess();
    swift_bridgeObjectRetain();
    ManagedDefault.wrappedValue.setter();
    swift_endAccess();
    swift_bridgeObjectRelease();
    return (*(uint64_t (**)(char *, uint64_t))(v8 + 8))(v10, v7);
  }
}

uint64_t sub_10104B99C(char a1)
{
  uint64_t v3 = type metadata accessor for PrefixedDefaults();
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  uint64_t v6 = (char *)&v18[-1] - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = sub_10000588C(&qword_1016681C0);
  uint64_t v8 = *(void *)(v7 - 8);
  __chkstk_darwin(v7);
  uint64_t v10 = (char *)&v18[-1] - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_1016371D8 != -1) {
    swift_once();
  }
  v18[0] = 0x7365547265646E75;
  v18[1] = 0xE900000000000074;
  SynchronousCache.cachedValue<A>(key:computeBlock:)();
  uint64_t v11 = swift_bridgeObjectRelease();
  if (v19 == 1)
  {
    if (qword_1016373A0 != -1) {
      uint64_t v11 = swift_once();
    }
    v18[3] = &type metadata for Bool;
    LOBYTE(v18[0]) = a1 & 1;
    __chkstk_darwin(v11);
    *(&v17 - 4) = v12;
    *(&v17 - 3) = v13;
    *(&v17 - 2) = v14;
    *(&v17 - 1) = (uint64_t)v18;
    OSAllocatedUnfairLock.callAsFunction<A>(_:)();
    return sub_10001DAB4((uint64_t)v18, (uint64_t *)&unk_101644360);
  }
  else
  {
    uint64_t v16 = sub_10000588C(&qword_10163BC08);
    (*(void (**)(char *, uint64_t, uint64_t))(v4 + 16))(v6, v1 + *(int *)(v16 + 40), v3);
    swift_bridgeObjectRetain();
    ManagedDefault.init(prefixedDefaults:key:)();
    char v19 = a1 & 1;
    swift_beginAccess();
    ManagedDefault.wrappedValue.setter();
    swift_endAccess();
    return (*(uint64_t (**)(char *, uint64_t))(v8 + 8))(v10, v7);
  }
}

uint64_t sub_10104BCDC()
{
  type metadata accessor for MockUserDefaults();
  uint64_t v0 = swift_allocObject();
  *(void *)(v0 + 16) = _swiftEmptyDictionarySingleton;
  sub_10000588C((uint64_t *)&unk_101638CE0);
  uint64_t result = swift_allocObject();
  *(_DWORD *)(result + 16) = 0;
  *(void *)(v0 + 24) = result;
  qword_10170F128 = v0;
  return result;
}

uint64_t sub_10104BD40@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, _OWORD *a4@<X8>)
{
  uint64_t result = swift_beginAccess();
  uint64_t v9 = *(void *)(a1 + 16);
  if (*(void *)(v9 + 16))
  {
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    uint64_t v10 = sub_100723FF4(a2, a3);
    if (v11)
    {
      sub_10012F428(*(void *)(v9 + 56) + 32 * v10, (uint64_t)a4);
    }
    else
    {
      *a4 = 0u;
      a4[1] = 0u;
    }
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
  else
  {
    *a4 = 0u;
    a4[1] = 0u;
  }
  return result;
}

uint64_t sub_10104BE04(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  sub_10001D074(a4, (uint64_t)v7, (uint64_t *)&unk_101644360);
  swift_beginAccess();
  swift_bridgeObjectRetain();
  sub_10015D9C8((uint64_t)v7, a2, a3);
  return swift_endAccess();
}

uint64_t sub_10104BE94()
{
  swift_bridgeObjectRelease();
  swift_release();

  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for MockUserDefaults()
{
  return self;
}

uint64_t sub_10104BEF8()
{
  uint64_t result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    uint64_t result = type metadata accessor for PrefixedDefaults();
    if (v2 <= 0x3F)
    {
      swift_initStructMetadata();
      return 0;
    }
  }
  return result;
}

uint64_t *sub_10104BFD0(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(a3 + 16);
  uint64_t v6 = *(void *)(v5 - 8);
  int v7 = *(_DWORD *)(v6 + 80);
  uint64_t v8 = v7;
  uint64_t v9 = *(void *)(v6 + 64);
  uint64_t v10 = type metadata accessor for PrefixedDefaults();
  uint64_t v11 = *(void *)(v10 - 8);
  uint64_t v12 = *(_DWORD *)(v11 + 80);
  uint64_t v13 = v9 + v12;
  if ((v12 | (unint64_t)v7) > 7
    || ((*(_DWORD *)(v11 + 80) | v7) & 0x100000) != 0
    || ((v13 + ((v7 + 16) & ~(unint64_t)v7)) & ~v12)
     + *(void *)(*(void *)(v10 - 8) + 64) > 0x18)
  {
    uint64_t v16 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v16
                   + (((v12 | v7) & 0xF8 ^ 0x1F8) & ((v12 | v7) + 16)));
    swift_retain();
  }
  else
  {
    uint64_t v17 = v10;
    uint64_t v18 = ~v12;
    uint64_t v19 = a2[1];
    *a1 = *a2;
    a1[1] = v19;
    uint64_t v20 = (char *)a2 + v8;
    uint64_t v21 = ((unint64_t)a1 + v8 + 16) & ~v8;
    uint64_t v22 = (unint64_t)(v20 + 16) & ~v8;
    uint64_t v23 = *(void (**)(uint64_t, uint64_t, uint64_t))(v6 + 16);
    swift_bridgeObjectRetain();
    v23(v21, v22, v5);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v11 + 16))((v21 + v13) & v18, (v22 + v13) & v18, v17);
  }
  return a1;
}

uint64_t sub_10104C184(uint64_t a1, uint64_t a2)
{
  swift_bridgeObjectRelease();
  uint64_t v4 = *(void *)(*(void *)(a2 + 16) - 8);
  uint64_t v5 = v4 + 8;
  unint64_t v6 = (a1 + *(unsigned __int8 *)(v4 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
  (*(void (**)(unint64_t))(v4 + 8))(v6);
  uint64_t v7 = *(void *)(v5 + 56);
  uint64_t v8 = type metadata accessor for PrefixedDefaults();
  uint64_t v9 = *(void *)(v8 - 8);
  uint64_t v10 = *(uint64_t (**)(unint64_t, uint64_t))(v9 + 8);
  uint64_t v11 = v8;
  unint64_t v12 = (v6 + v7 + *(unsigned __int8 *)(v9 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80);

  return v10(v12, v11);
}

void *sub_10104C250(void *a1, void *a2, uint64_t a3)
{
  uint64_t v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  uint64_t v5 = *(void *)(a3 + 16);
  unint64_t v6 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16);
  uint64_t v7 = *(void *)(v5 - 8) + 16;
  uint64_t v8 = *(unsigned __int8 *)(*(void *)(v5 - 8) + 80);
  uint64_t v9 = ((unint64_t)a1 + v8 + 16) & ~v8;
  uint64_t v10 = ((unint64_t)a2 + v8 + 16) & ~v8;
  swift_bridgeObjectRetain();
  v6(v9, v10, v5);
  uint64_t v11 = *(void *)(v7 + 48);
  uint64_t v12 = type metadata accessor for PrefixedDefaults();
  uint64_t v13 = *(void *)(v12 - 8);
  (*(void (**)(unint64_t, unint64_t, uint64_t))(v13 + 16))((v11 + *(unsigned __int8 *)(v13 + 80) + v9) & ~(unint64_t)*(unsigned __int8 *)(v13 + 80), (v11 + *(unsigned __int8 *)(v13 + 80) + v10) & ~(unint64_t)*(unsigned __int8 *)(v13 + 80), v12);
  return a1;
}

void *sub_10104C330(void *a1, void *a2, uint64_t a3)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v6 = *(void *)(*(void *)(a3 + 16) - 8);
  uint64_t v7 = v6 + 24;
  uint64_t v8 = *(unsigned __int8 *)(v6 + 80);
  uint64_t v9 = ((unint64_t)a1 + v8 + 16) & ~v8;
  uint64_t v10 = ((unint64_t)a2 + v8 + 16) & ~v8;
  (*(void (**)(uint64_t, uint64_t))(v6 + 24))(v9, v10);
  uint64_t v11 = *(void *)(v7 + 40);
  uint64_t v12 = type metadata accessor for PrefixedDefaults();
  uint64_t v13 = *(void *)(v12 - 8);
  (*(void (**)(unint64_t, unint64_t, uint64_t))(v13 + 24))((v11 + *(unsigned __int8 *)(v13 + 80) + v9) & ~(unint64_t)*(unsigned __int8 *)(v13 + 80), (v11 + *(unsigned __int8 *)(v13 + 80) + v10) & ~(unint64_t)*(unsigned __int8 *)(v13 + 80), v12);
  return a1;
}

_OWORD *sub_10104C420(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  *a1 = *a2;
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8);
  uint64_t v5 = v4 + 32;
  uint64_t v6 = *(unsigned __int8 *)(v4 + 80);
  uint64_t v7 = ((unint64_t)a1 + v6 + 16) & ~v6;
  uint64_t v8 = ((unint64_t)a2 + v6 + 16) & ~v6;
  (*(void (**)(uint64_t, uint64_t))(v4 + 32))(v7, v8);
  uint64_t v9 = *(void *)(v5 + 32);
  uint64_t v10 = type metadata accessor for PrefixedDefaults();
  uint64_t v11 = *(void *)(v10 - 8);
  (*(void (**)(unint64_t, unint64_t, uint64_t))(v11 + 32))((v9 + *(unsigned __int8 *)(v11 + 80) + v7) & ~(unint64_t)*(unsigned __int8 *)(v11 + 80), (v9 + *(unsigned __int8 *)(v11 + 80) + v8) & ~(unint64_t)*(unsigned __int8 *)(v11 + 80), v10);
  return a1;
}

void *sub_10104C4F0(void *a1, void *a2, uint64_t a3)
{
  uint64_t v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  swift_bridgeObjectRelease();
  uint64_t v7 = *(void *)(*(void *)(a3 + 16) - 8);
  uint64_t v8 = v7 + 40;
  uint64_t v9 = *(unsigned __int8 *)(v7 + 80);
  uint64_t v10 = ((unint64_t)a1 + v9 + 16) & ~v9;
  uint64_t v11 = ((unint64_t)a2 + v9 + 16) & ~v9;
  (*(void (**)(uint64_t, uint64_t))(v7 + 40))(v10, v11);
  uint64_t v12 = *(void *)(v8 + 24);
  uint64_t v13 = type metadata accessor for PrefixedDefaults();
  uint64_t v14 = *(void *)(v13 - 8);
  (*(void (**)(unint64_t, unint64_t, uint64_t))(v14 + 40))((v12 + *(unsigned __int8 *)(v14 + 80) + v10) & ~(unint64_t)*(unsigned __int8 *)(v14 + 80), (v12 + *(unsigned __int8 *)(v14 + 80) + v11) & ~(unint64_t)*(unsigned __int8 *)(v14 + 80), v13);
  return a1;
}

uint64_t sub_10104C5D0(unsigned __int16 *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(a3 + 16);
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v7 = *(unsigned int *)(v6 + 84);
  uint64_t v8 = type metadata accessor for PrefixedDefaults();
  uint64_t v9 = *(void *)(v8 - 8);
  uint64_t v10 = *(unsigned __int8 *)(v6 + 80);
  uint64_t v11 = *(void *)(v6 + 64);
  uint64_t v12 = *(unsigned __int8 *)(v9 + 80);
  if (v7 <= *(_DWORD *)(v9 + 84)) {
    unsigned int v13 = *(_DWORD *)(v9 + 84);
  }
  else {
    unsigned int v13 = v7;
  }
  if (v13 <= 0x7FFFFFFF) {
    unsigned int v14 = 0x7FFFFFFF;
  }
  else {
    unsigned int v14 = v13;
  }
  if (!a2) {
    return 0;
  }
  if (a2 <= v14) {
    goto LABEL_28;
  }
  uint64_t v15 = ((v11 + v12 + ((v10 + 16) & ~v10)) & ~v12) + *(void *)(*(void *)(v8 - 8) + 64);
  char v16 = 8 * v15;
  if (v15 <= 3)
  {
    unsigned int v19 = ((a2 - v14 + ~(-1 << v16)) >> v16) + 1;
    if (HIWORD(v19))
    {
      int v17 = *(_DWORD *)((char *)a1 + v15);
      if (!v17) {
        goto LABEL_28;
      }
      goto LABEL_18;
    }
    if (v19 > 0xFF)
    {
      int v17 = *(unsigned __int16 *)((char *)a1 + v15);
      if (!*(unsigned __int16 *)((char *)a1 + v15)) {
        goto LABEL_28;
      }
      goto LABEL_18;
    }
    if (v19 < 2)
    {
LABEL_28:
      if ((v13 & 0x80000000) != 0)
      {
        uint64_t v24 = ((unint64_t)a1 + v10 + 16) & ~v10;
        if (v7 == v14)
        {
          uint64_t v25 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v6 + 48);
          return v25(v24, v7, v5);
        }
        else
        {
          uint64_t v26 = (v24 + v11 + v12) & ~v12;
          unint64_t v27 = *(uint64_t (**)(uint64_t))(v9 + 48);
          return v27(v26);
        }
      }
      else
      {
        unint64_t v23 = *((void *)a1 + 1);
        if (v23 >= 0xFFFFFFFF) {
          LODWORD(v23) = -1;
        }
        return (v23 + 1);
      }
    }
  }
  int v17 = *((unsigned __int8 *)a1 + v15);
  if (!*((unsigned char *)a1 + v15)) {
    goto LABEL_28;
  }
LABEL_18:
  int v20 = (v17 - 1) << v16;
  if (v15 > 3) {
    int v20 = 0;
  }
  if (v15)
  {
    if (v15 <= 3) {
      int v21 = v15;
    }
    else {
      int v21 = 4;
    }
    switch(v21)
    {
      case 2:
        int v22 = *a1;
        break;
      case 3:
        int v22 = *a1 | (*((unsigned __int8 *)a1 + 2) << 16);
        break;
      case 4:
        int v22 = *(_DWORD *)a1;
        break;
      default:
        int v22 = *(unsigned __int8 *)a1;
        break;
    }
  }
  else
  {
    int v22 = 0;
  }
  return v14 + (v22 | v20) + 1;
}

void sub_10104C894(_WORD *a1, uint64_t a2, unsigned int a3, uint64_t a4)
{
  uint64_t v7 = *(void *)(a4 + 16);
  uint64_t v8 = *(void *)(v7 - 8);
  uint64_t v27 = v8;
  uint64_t v9 = *(unsigned int *)(v8 + 84);
  uint64_t v10 = type metadata accessor for PrefixedDefaults();
  uint64_t v11 = *(void *)(v10 - 8);
  uint64_t v12 = *(unsigned __int8 *)(v8 + 80);
  uint64_t v13 = *(void *)(v8 + 64);
  uint64_t v14 = *(unsigned __int8 *)(v11 + 80);
  if (v9 <= *(_DWORD *)(v11 + 84)) {
    unsigned int v15 = *(_DWORD *)(v11 + 84);
  }
  else {
    unsigned int v15 = v9;
  }
  if (v15 <= 0x7FFFFFFF) {
    unsigned int v16 = 0x7FFFFFFF;
  }
  else {
    unsigned int v16 = v15;
  }
  size_t v17 = ((v13 + v14 + ((v12 + 16) & ~v12)) & ~v14) + *(void *)(*(void *)(v10 - 8) + 64);
  if (a3 <= v16)
  {
    int v18 = 0;
  }
  else if (v17 <= 3)
  {
    unsigned int v21 = ((a3 - v16 + ~(-1 << (8 * v17))) >> (8 * v17)) + 1;
    if (HIWORD(v21))
    {
      int v18 = 4;
    }
    else if (v21 >= 0x100)
    {
      int v18 = 2;
    }
    else
    {
      int v18 = v21 > 1;
    }
  }
  else
  {
    int v18 = 1;
  }
  if (v16 < a2)
  {
    unsigned int v19 = ~v16 + a2;
    if (v17 < 4)
    {
      int v20 = (v19 >> (8 * v17)) + 1;
      if (v17)
      {
        int v22 = v19 & ~(-1 << (8 * v17));
        bzero(a1, v17);
        if (v17 == 3)
        {
          *a1 = v22;
          *((unsigned char *)a1 + 2) = BYTE2(v22);
        }
        else if (v17 == 2)
        {
          *a1 = v22;
        }
        else
        {
          *(unsigned char *)a1 = v22;
        }
      }
    }
    else
    {
      bzero(a1, v17);
      *(_DWORD *)a1 = v19;
      int v20 = 1;
    }
    switch(v18)
    {
      case 1:
        *((unsigned char *)a1 + v17) = v20;
        return;
      case 2:
        *(_WORD *)((char *)a1 + v17) = v20;
        return;
      case 3:
        goto LABEL_48;
      case 4:
        *(_DWORD *)((char *)a1 + v17) = v20;
        return;
      default:
        return;
    }
  }
  switch(v18)
  {
    case 1:
      *((unsigned char *)a1 + v17) = 0;
      if (!a2) {
        return;
      }
      goto LABEL_27;
    case 2:
      *(_WORD *)((char *)a1 + v17) = 0;
      if (!a2) {
        return;
      }
      goto LABEL_27;
    case 3:
LABEL_48:
      __break(1u);
      JUMPOUT(0x10104CBE0);
    case 4:
      *(_DWORD *)((char *)a1 + v17) = 0;
      goto LABEL_26;
    default:
LABEL_26:
      if (a2)
      {
LABEL_27:
        if ((v15 & 0x80000000) != 0)
        {
          uint64_t v23 = ((unint64_t)a1 + v12 + 16) & ~v12;
          if (v9 == v16)
          {
            uint64_t v24 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v27 + 56);
            v24(v23, a2, v9, v7);
          }
          else
          {
            uint64_t v25 = (v23 + v13 + v14) & ~v14;
            uint64_t v26 = *(void (**)(uint64_t, uint64_t))(v11 + 56);
            v26(v25, a2);
          }
        }
        else if ((a2 & 0x80000000) != 0)
        {
          *(void *)a1 = a2 ^ 0x80000000;
          *((void *)a1 + 1) = 0;
        }
        else
        {
          *((void *)a1 + 1) = (a2 - 1);
        }
      }
      return;
  }
}

uint64_t sub_10104CC08(uint64_t a1)
{
  uint64_t v4 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v4;
  *uint64_t v4 = v2;
  v4[1] = sub_100033F68;
  return sub_101047624(a1, v1);
}

uint64_t sub_10104CCA4(uint64_t *a1)
{
  uint64_t v4 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v4;
  *uint64_t v4 = v2;
  v4[1] = sub_10012E0C8;
  return sub_101048C88(a1, v1);
}

uint64_t sub_10104CD3C()
{
  return sub_10104BE04(v0[2], v0[3], v0[4], v0[5]);
}

uint64_t sub_10104CD60()
{
  return sub_10104CE38((uint64_t (*)(uint64_t, uint64_t))sub_100E5AB7C);
}

uint64_t sub_10104CD7C()
{
  return sub_10104CE38((uint64_t (*)(uint64_t, uint64_t))sub_100E5AEA4);
}

uint64_t sub_10104CD94@<X0>(_OWORD *a1@<X8>)
{
  return sub_10104BD40(v1[2], v1[3], v1[4], a1);
}

uint64_t sub_10104CDB4(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

uint64_t sub_10104CE20()
{
  return sub_10104CE38((uint64_t (*)(uint64_t, uint64_t))sub_100E5F4A8);
}

uint64_t sub_10104CE38(uint64_t (*a1)(uint64_t, uint64_t))
{
  uint64_t v2 = *(void *)(type metadata accessor for UUID() - 8);
  uint64_t v3 = *(void *)(v1 + 16);
  uint64_t v4 = v1 + ((*(unsigned __int8 *)(v2 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80));

  return a1(v3, v4);
}

uint64_t sub_10104CEC0(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 32))(a2, a1, v5);
  return a2;
}

uint64_t sub_10104CF28(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t sub_10104CF88()
{
  uint64_t v2 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v2;
  *uint64_t v2 = v1;
  v2[1] = sub_100033F68;
  v2[2] = v0;
  return _swift_task_switch(sub_101044AE4, 0, 0);
}

uint64_t sub_10104D02C()
{
  swift_weakDestroy();

  return _swift_deallocObject(v0, 24, 7);
}

uint64_t sub_10104D064()
{
  uint64_t v2 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v2;
  *uint64_t v2 = v1;
  v2[1] = sub_100033F68;
  v2[5] = v0;
  return _swift_task_switch(sub_10104AA10, 0, 0);
}

uint64_t sub_10104D10C()
{
  return sub_10104A55C();
}

uint64_t sub_10104D114()
{
  uint64_t v2 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v2;
  *uint64_t v2 = v1;
  v2[1] = sub_10001D2E4;
  v2[5] = v0;
  return _swift_task_switch(sub_10104A700, 0, 0);
}

uint64_t sub_10104D1C0()
{
  return sub_10104CD3C();
}

uint64_t sub_10104D1DC@<X0>(_OWORD *a1@<X8>)
{
  return sub_10104CD94(a1);
}

uint64_t sub_10104D1F4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_10104D208);
}

uint64_t sub_10104D208(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  if (a2 == 0x7FFFFFFF)
  {
    uint64_t v4 = *a1;
    if ((unint64_t)*a1 >= 0xFFFFFFFF) {
      LODWORD(v4) = -1;
    }
    return (v4 + 1);
  }
  else
  {
    uint64_t v8 = type metadata accessor for FMNAccountType();
    uint64_t v9 = *(uint64_t (**)(char *, uint64_t, uint64_t))(*(void *)(v8 - 8) + 48);
    uint64_t v10 = v8;
    uint64_t v11 = (char *)a1 + *(int *)(a3 + 20);
    return v9(v11, a2, v10);
  }
}

uint64_t sub_10104D2B8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_10104D2CC);
}

void *sub_10104D2CC(void *result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *uint64_t result = (a2 - 1);
  }
  else
  {
    uint64_t v7 = type metadata accessor for FMNAccountType();
    uint64_t v8 = *(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56);
    uint64_t v9 = v7;
    uint64_t v10 = (char *)v5 + *(int *)(a4 + 20);
    return (void *)v8(v10, a2, a2, v9);
  }
  return result;
}

uint64_t type metadata accessor for ConfigurationEndpoint()
{
  uint64_t result = qword_101668278;
  if (!qword_101668278) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t sub_10104D3C0()
{
  sub_10000588C(&qword_101639580);
  OS_dispatch_queue.sync<A>(execute:)();
  URLComponents.init()();
  URLComponents.scheme.setter();
  URLComponents.host.setter();
  URLComponents.path.setter();
  uint64_t v0 = (uint64_t (*)(uint64_t *, void))URLComponents.path.modify();
  v1._countAndFlagsBits = 0x6769666E6F632FLL;
  v1._object = (void *)0xE700000000000000;
  String.append(_:)(v1);
  return v0(&v3, 0);
}

uint64_t sub_10104D4C0@<X0>(unsigned char *a1@<X8>)
{
  uint64_t v2 = sub_10000588C(&qword_101642998);
  __chkstk_darwin(v2 - 8);
  uint64_t v4 = (char *)v43 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = type metadata accessor for OfflineFindingInfo();
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v7 = __chkstk_darwin(v5);
  uint64_t v9 = (char *)v43 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v7);
  uint64_t v11 = (char *)v43 - v10;
  uint64_t v12 = sub_10104F7BC();
  uint64_t v14 = v12;
  if (v15)
  {
    *a1 = v12;
    sub_10000588C(&qword_101656600);
  }
  else
  {
    unint64_t v16 = v13;
    size_t v17 = self;
    sub_1000361E0(v14, v16);
    Class isa = Data._bridgeToObjectiveC()().super.isa;
    v50[0] = 0;
    id v19 = [v17 propertyListWithData:isa options:0 format:0 error:v50];

    if (v19)
    {
      id v20 = v50[0];
      _bridgeAnyObjectToAny(_:)();
      swift_unknownObjectRelease();
      sub_10000588C((uint64_t *)&unk_101664240);
      if (swift_dynamicCast())
      {
        uint64_t v21 = swift_bridgeObjectRetain();
        sub_100BFEA20(v21, (uint64_t)v4);
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v6 + 48))(v4, 1, v5) == 1)
        {
          sub_10104FD14(v14, v16, 0);
          swift_bridgeObjectRelease();
          sub_10104FD14(v14, v16, 0);
          sub_10104FD20((uint64_t)v4);
        }
        else
        {
          sub_100C00314((uint64_t)v4, (uint64_t)v11);
          if (qword_1016373A8 != -1) {
            swift_once();
          }
          uint64_t v24 = type metadata accessor for Logger();
          uint64_t v25 = sub_100010324(v24, (uint64_t)qword_10170F130);
          swift_bridgeObjectRetain();
          uint64_t v26 = Logger.logObject.getter();
          os_log_type_t v27 = static os_log_type_t.debug.getter();
          LODWORD(v47) = v27;
          BOOL v28 = os_log_type_enabled(v26, v27);
          uint64_t v48 = v25;
          if (v28)
          {
            char v46 = (uint8_t *)swift_slowAlloc();
            unsigned __int8 v45 = (void *)swift_slowAlloc();
            v50[0] = v45;
            os_log_t v44 = v26;
            unint64_t v29 = v46;
            *(_DWORD *)char v46 = 136315138;
            v43[0] = v29 + 4;
            swift_bridgeObjectRetain();
            v43[1] = (char *)&type metadata for Any + 8;
            uint64_t v30 = Dictionary.description.getter();
            unint64_t v32 = v31;
            swift_bridgeObjectRelease();
            uint64_t v49 = sub_1008FA0F0(v30, v32, (uint64_t *)v50);
            UnsafeMutableRawBufferPointer.copyMemory(from:)();
            swift_bridgeObjectRelease_n();
            swift_bridgeObjectRelease();
            os_log_t v33 = v44;
            _os_log_impl((void *)&_mh_execute_header, v44, (os_log_type_t)v47, "plist: %s", v46, 0xCu);
            swift_arrayDestroy();
            swift_slowDealloc();
            swift_slowDealloc();
          }
          else
          {

            swift_bridgeObjectRelease_n();
          }
          sub_10104FD80((uint64_t)v11, (uint64_t)v9);
          uint64_t v34 = Logger.logObject.getter();
          os_log_type_t v35 = static os_log_type_t.default.getter();
          int v36 = v35;
          if (os_log_type_enabled(v34, v35))
          {
            uint64_t v37 = swift_slowAlloc();
            uint64_t v47 = (void *)swift_slowAlloc();
            v50[0] = v47;
            *(_DWORD *)uint64_t v37 = 141558275;
            uint64_t v49 = 1752392040;
            LODWORD(v46) = v36;
            UnsafeMutableRawBufferPointer.copyMemory(from:)();
            *(_WORD *)(v37 + 12) = 2081;
            unsigned __int8 v45 = (void *)(v37 + 14);
            uint64_t v38 = sub_100BFF688();
            uint64_t v49 = sub_1008FA0F0(v38, v39, (uint64_t *)v50);
            UnsafeMutableRawBufferPointer.copyMemory(from:)();
            swift_bridgeObjectRelease();
            sub_10104FDE4((uint64_t)v9);
            _os_log_impl((void *)&_mh_execute_header, v34, (os_log_type_t)v46, "Successfully decoded plist %{private,mask.hash}s", (uint8_t *)v37, 0x16u);
            swift_arrayDestroy();
            swift_slowDealloc();
            swift_slowDealloc();
          }
          else
          {
            sub_10104FDE4((uint64_t)v9);
          }

          if (*(void *)&v11[*(int *)(v5 + 24)])
          {
            sub_10104FD14(v14, v16, 0);
            sub_10104FD14(v14, v16, 0);
            sub_100C00314((uint64_t)v11, (uint64_t)a1);
            sub_10000588C(&qword_101656600);
            return swift_storeEnumTagMultiPayload();
          }
          uint64_t v40 = Logger.logObject.getter();
          os_log_type_t v41 = static os_log_type_t.error.getter();
          if (os_log_type_enabled(v40, v41))
          {
            uint64_t v42 = (uint8_t *)swift_slowAlloc();
            *(_WORD *)uint64_t v42 = 0;
            _os_log_impl((void *)&_mh_execute_header, v40, v41, "OfflineFindingInfo record from NVRAM was invalid (index == 0)", v42, 2u);
            swift_slowDealloc();
          }
          sub_10104FD14(v14, v16, 0);

          sub_10104FD14(v14, v16, 0);
          sub_10104FDE4((uint64_t)v11);
        }
      }
      else
      {
        sub_10104FD14(v14, v16, 0);
        sub_10104FD14(v14, v16, 0);
      }
    }
    else
    {
      id v23 = v50[0];
      _convertNSErrorToError(_:)();

      swift_willThrow();
      sub_10104FD14(v14, v16, 0);
      sub_10104FD14(v14, v16, 0);
      swift_errorRelease();
    }
    *a1 = 2;
    sub_10000588C(&qword_101656600);
  }
  return swift_storeEnumTagMultiPayload();
}

void sub_10104DC20()
{
  uint64_t v0 = type metadata accessor for DispatchTime();
  uint64_t v1 = *(void *)(v0 - 8);
  uint64_t v2 = __chkstk_darwin(v0);
  uint64_t v4 = (char *)&v19 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v2);
  uint64_t v6 = (char *)&v19 - v5;
  if (qword_1016371D8 != -1) {
    swift_once();
  }
  uint64_t aBlock = 0x7365547265646E75;
  unint64_t v21 = 0xE900000000000074;
  SynchronousCache.cachedValue<A>(key:computeBlock:)();
  swift_bridgeObjectRelease();
  if (v26)
  {
    _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  else
  {
    uint64_t v7 = dispatch_group_create();
    dispatch_group_enter(v7);
    id v8 = [self sharedInstance];
    uint64_t v9 = swift_allocObject();
    *(void *)(v9 + 16) = v7;
    uint64_t v24 = sub_10104FF3C;
    uint64_t v25 = v9;
    uint64_t aBlock = (uint64_t)_NSConcreteStackBlock;
    unint64_t v21 = 1107296256;
    int v22 = sub_100769474;
    id v23 = &unk_1016039A8;
    uint64_t v10 = _Block_copy(&aBlock);
    uint64_t v11 = v7;
    swift_release();
    [v8 clearOfflineFindingInfoWithCompletion:v10];
    _Block_release(v10);

    static DispatchTime.now()();
    if (qword_1016373B0 != -1) {
      swift_once();
    }
    uint64_t v12 = type metadata accessor for DispatchTimeInterval();
    sub_100010324(v12, (uint64_t)qword_1016682B0);
    + infix(_:_:)();
    unint64_t v13 = *(void (**)(char *, uint64_t))(v1 + 8);
    v13(v4, v0);
    OS_dispatch_group.wait(timeout:)();
    v13(v6, v0);
    if (static DispatchTimeoutResult.== infix(_:_:)())
    {
      if (qword_1016373A8 != -1) {
        swift_once();
      }
      uint64_t v14 = type metadata accessor for Logger();
      sub_100010324(v14, (uint64_t)qword_10170F130);
      char v15 = Logger.logObject.getter();
      os_log_type_t v16 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v15, v16))
      {
        size_t v17 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)size_t v17 = 0;
        _os_log_impl((void *)&_mh_execute_header, v15, v16, "Timed out clearing NVRAM", v17, 2u);
        swift_slowDealloc();
        int v18 = v11;
        uint64_t v11 = v15;
      }
      else
      {
        int v18 = v15;
      }
    }
  }
}

uint64_t sub_10104E030(uint64_t a1, unint64_t a2)
{
  uint64_t v4 = type metadata accessor for DispatchTime();
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v58 = v4;
  uint64_t v59 = v5;
  uint64_t v6 = __chkstk_darwin(v4);
  id v8 = (uint8_t *)v54 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  uint64_t v10 = (uint8_t *)v54 - v9;
  if (qword_1016371D8 != -1) {
    swift_once();
  }
  uint64_t aBlock = 0x7365547265646E75;
  unint64_t v62 = 0xE900000000000074;
  SynchronousCache.cachedValue<A>(key:computeBlock:)();
  swift_bridgeObjectRelease();
  if (v60)
  {
LABEL_49:
    _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
    JUMPOUT(0x10104E8E0);
  }
  unint64_t v11 = a2 >> 62;
  switch(a2 >> 62)
  {
    case 1uLL:
      LODWORD(v12) = HIDWORD(a1) - a1;
      if (__OFSUB__(HIDWORD(a1), a1))
      {
        __break(1u);
LABEL_44:
        __break(1u);
LABEL_45:
        swift_once();
        goto LABEL_10;
      }
      uint64_t v12 = (int)v12;
LABEL_8:
      if (v12 <= 256) {
        goto LABEL_15;
      }
      if (qword_1016373A8 != -1) {
        goto LABEL_45;
      }
LABEL_10:
      uint64_t v16 = type metadata accessor for Logger();
      sub_100010324(v16, (uint64_t)qword_10170F130);
      sub_1000361E0(a1, a2);
      size_t v17 = Logger.logObject.getter();
      os_log_type_t v18 = static os_log_type_t.error.getter();
      if (!os_log_type_enabled(v17, v18))
      {
        sub_10001CFB8(a1, a2);
LABEL_41:

        return 0;
      }
      id v8 = (uint8_t *)swift_slowAlloc();
      *(_DWORD *)id v8 = 134217984;
      if (v11 != 2)
      {
        LODWORD(v21) = HIDWORD(a1) - a1;
        if (!__OFSUB__(HIDWORD(a1), a1))
        {
          uint64_t v21 = (int)v21;
LABEL_40:
          uint64_t aBlock = v21;
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          sub_10001CFB8(a1, a2);
          _os_log_impl((void *)&_mh_execute_header, v17, v18, "%ld > 256 byte NVRAM storage limit!", v8, 0xCu);
          swift_slowDealloc();
          goto LABEL_41;
        }
LABEL_48:
        __break(1u);
        goto LABEL_49;
      }
      uint64_t v20 = *(void *)(a1 + 16);
      uint64_t v19 = *(void *)(a1 + 24);
      BOOL v15 = __OFSUB__(v19, v20);
      uint64_t v21 = v19 - v20;
      if (!v15) {
        goto LABEL_40;
      }
      __break(1u);
LABEL_15:
      uint64_t v22 = swift_allocObject();
      *(unsigned char *)(v22 + 16) = 0;
      uint64_t v57 = v22 + 16;
      dispatch_group_t v56 = dispatch_group_create();
      dispatch_group_enter(v56);
      if (qword_1016373A8 != -1) {
        swift_once();
      }
      uint64_t v23 = type metadata accessor for Logger();
      uint64_t v24 = sub_100010324(v23, (uint64_t)qword_10170F130);
      sub_1000361E0(a1, a2);
      uint64_t v25 = Logger.logObject.getter();
      os_log_type_t v26 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v25, v26))
      {
        os_log_type_t v27 = (uint8_t *)swift_slowAlloc();
        *(_DWORD *)os_log_type_t v27 = 134217984;
        BOOL v28 = v27;
        uint64_t v29 = 0;
        switch((int)v11)
        {
          case 1:
            LODWORD(v29) = HIDWORD(a1) - a1;
            if (!__OFSUB__(HIDWORD(a1), a1))
            {
              uint64_t v29 = (int)v29;
LABEL_25:
              uint64_t aBlock = v29;
              UnsafeMutableRawBufferPointer.copyMemory(from:)();
              sub_10001CFB8(a1, a2);
              _os_log_impl((void *)&_mh_execute_header, v25, v26, "Writing %ld bytes to NVRAM.", v28, 0xCu);
              swift_slowDealloc();
              goto LABEL_26;
            }
            __break(1u);
LABEL_47:
            __break(1u);
            break;
          case 2:
            uint64_t v31 = *(void *)(a1 + 16);
            uint64_t v30 = *(void *)(a1 + 24);
            BOOL v15 = __OFSUB__(v30, v31);
            uint64_t v29 = v30 - v31;
            if (!v15) {
              goto LABEL_25;
            }
            goto LABEL_47;
          case 3:
            goto LABEL_25;
          default:
            uint64_t v29 = BYTE6(a2);
            goto LABEL_25;
        }
        goto LABEL_48;
      }
      sub_10001CFB8(a1, a2);
LABEL_26:
      id v55 = v8;

      sub_1000361E0(a1, a2);
      sub_1000361E0(a1, a2);
      unint64_t v32 = Logger.logObject.getter();
      os_log_type_t v33 = static os_log_type_t.debug.getter();
      BOOL v34 = os_log_type_enabled(v32, v33);
      v54[1] = v24;
      if (v34)
      {
        os_log_type_t v35 = (uint8_t *)swift_slowAlloc();
        uint64_t aBlock = swift_slowAlloc();
        *(_DWORD *)os_log_type_t v35 = 136315138;
        uint64_t v36 = Data.hexString.getter();
        v54[0] = a1;
        uint64_t v60 = sub_1008FA0F0(v36, v37, &aBlock);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        a1 = v54[0];
        swift_bridgeObjectRelease();
        sub_10001CFB8(a1, a2);
        sub_10001CFB8(a1, a2);
        _os_log_impl((void *)&_mh_execute_header, v32, v33, "Writing NVRAM data: %s", v35, 0xCu);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
      }
      else
      {
        sub_10001CFB8(a1, a2);
        sub_10001CFB8(a1, a2);
      }

      id v38 = [self sharedInstance];
      Class isa = Data._bridgeToObjectiveC()().super.isa;
      uint64_t v40 = (void *)swift_allocObject();
      dispatch_group_t v41 = v56;
      v40[2] = v56;
      v40[3] = v22;
      v40[4] = a1;
      v40[5] = a2;
      uint64_t v65 = sub_10104FF8C;
      uint64_t v66 = v40;
      uint64_t aBlock = (uint64_t)_NSConcreteStackBlock;
      unint64_t v62 = 1107296256;
      os_log_type_t v63 = sub_100769474;
      uint64_t v64 = &unk_1016039F8;
      uint64_t v42 = _Block_copy(&aBlock);
      sub_1000361E0(a1, a2);
      dispatch_group_t v43 = v41;
      swift_retain();
      swift_release();
      [v38 storeOfflineFindingInfo:isa completion:v42];
      _Block_release(v42);

      os_log_t v44 = v55;
      static DispatchTime.now()();
      if (qword_1016373B0 != -1) {
        swift_once();
      }
      uint64_t v45 = type metadata accessor for DispatchTimeInterval();
      sub_100010324(v45, (uint64_t)qword_1016682B0);
      + infix(_:_:)();
      uint64_t v46 = v58;
      uint64_t v47 = *(void (**)(uint8_t *, uint64_t))(v59 + 8);
      v47(v44, v58);
      OS_dispatch_group.wait(timeout:)();
      v47(v10, v46);
      if (static DispatchTimeoutResult.== infix(_:_:)())
      {
        uint64_t v48 = Logger.logObject.getter();
        os_log_type_t v49 = static os_log_type_t.error.getter();
        if (os_log_type_enabled(v48, v49))
        {
          uint64_t v50 = (uint8_t *)swift_slowAlloc();
          *(_WORD *)uint64_t v50 = 0;
          _os_log_impl((void *)&_mh_execute_header, v48, v49, "Timed out writing to NVRAM", v50, 2u);
          swift_slowDealloc();
          uint64_t v51 = v43;
          dispatch_group_t v43 = v48;
        }
        else
        {
          uint64_t v51 = v48;
        }
      }
      swift_beginAccess();
      uint64_t v52 = *(unsigned __int8 *)(v22 + 16);
      swift_release();
      return v52;
    case 2uLL:
      uint64_t v14 = *(void *)(a1 + 16);
      uint64_t v13 = *(void *)(a1 + 24);
      BOOL v15 = __OFSUB__(v13, v14);
      uint64_t v12 = v13 - v14;
      if (!v15) {
        goto LABEL_8;
      }
      goto LABEL_44;
    default:
      goto LABEL_15;
  }
}

uint64_t sub_10104E900()
{
  uint64_t v0 = type metadata accessor for Logger();
  sub_10001E384(v0, qword_10170F130);
  sub_100010324(v0, (uint64_t)qword_10170F130);
  return Logger.init(subsystem:category:)();
}

unint64_t sub_10104E978()
{
  unint64_t result = qword_1016682D0;
  if (!qword_1016682D0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1016682D0);
  }
  return result;
}

unsigned char *storeEnumTagSinglePayload for NVRAMAccessError(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 2 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 2) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFE) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFD)
  {
    unsigned int v6 = ((a2 - 254) >> 8) + 1;
    *unint64_t result = a2 + 2;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x10104EA98);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 2;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for NVRAMAccessError()
{
  return &type metadata for NVRAMAccessError;
}

uint64_t sub_10104EAD0()
{
  uint64_t v0 = type metadata accessor for DispatchTimeInterval();
  sub_10001E384(v0, qword_1016682B0);
  *(void *)sub_100010324(v0, (uint64_t)qword_1016682B0) = 30;
  uint64_t v1 = *(uint64_t (**)(void))(*(void *)(v0 - 8) + 104);

  return v1();
}

uint64_t sub_10104EB60()
{
  sub_10104F7BC();
  sub_10000588C(&qword_1016682D8);
  swift_allocObject();
  uint64_t result = CurrentValueSubject.init(_:)();
  qword_1016682C8 = result;
  return result;
}

uint64_t sub_10104EBCC()
{
  if (qword_1016373B8 != -1) {
    swift_once();
  }
  swift_retain();
  sub_10000588C(&qword_1016682D8);
  sub_10104FF98();
  uint64_t v0 = Publisher.eraseToAnyPublisher()();
  uint64_t result = swift_release();
  qword_10170F148 = v0;
  return result;
}

void sub_10104EC74(uint64_t a1, NSObject *a2)
{
  if (a1)
  {
    swift_errorRetain();
    if (qword_1016373A8 != -1) {
      swift_once();
    }
    uint64_t v3 = type metadata accessor for Logger();
    sub_100010324(v3, (uint64_t)qword_10170F130);
    swift_errorRetain();
    swift_errorRetain();
    unsigned int v4 = Logger.logObject.getter();
    os_log_type_t v5 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v4, v5))
    {
      unsigned int v6 = (uint8_t *)swift_slowAlloc();
      *(void *)&long long v13 = swift_slowAlloc();
      *(_DWORD *)unsigned int v6 = 136315138;
      swift_getErrorValue();
      uint64_t v7 = Error.localizedDescription.getter();
      sub_1008FA0F0(v7, v8, (uint64_t *)&v13);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      swift_errorRelease();
      swift_errorRelease();
      _os_log_impl((void *)&_mh_execute_header, v4, v5, "NVRAM clear error: %s", v6, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      swift_errorRelease();
    }
    else
    {
      swift_errorRelease();
      swift_errorRelease();
      swift_errorRelease();
    }
  }
  else
  {
    if (qword_1016373A8 != -1) {
      swift_once();
    }
    uint64_t v9 = type metadata accessor for Logger();
    sub_100010324(v9, (uint64_t)qword_10170F130);
    uint64_t v10 = Logger.logObject.getter();
    os_log_type_t v11 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v10, v11))
    {
      uint64_t v12 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v12 = 0;
      _os_log_impl((void *)&_mh_execute_header, v10, v11, "NVRAM cleared.", v12, 2u);
      swift_slowDealloc();
    }

    if (qword_1016373B8 != -1) {
      swift_once();
    }
    long long v13 = xmmword_101347BB0;
    CurrentValueSubject.send(_:)();
  }
  dispatch_group_leave(a2);
}

void sub_10104EF6C(uint64_t a1, unint64_t a2, uint64_t a3, dispatch_group_t group, uint64_t a5, uint64_t a6)
{
  if (a3)
  {
    swift_errorRetain();
    if (qword_1016373A8 != -1) {
      swift_once();
    }
    uint64_t v7 = type metadata accessor for Logger();
    sub_100010324(v7, (uint64_t)qword_10170F130);
    swift_errorRetain();
    swift_errorRetain();
    unint64_t v8 = Logger.logObject.getter();
    os_log_type_t v9 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v8, v9))
    {
      uint64_t v10 = (uint8_t *)swift_slowAlloc();
      v34[0] = swift_slowAlloc();
      *(_DWORD *)uint64_t v10 = 136315138;
      swift_getErrorValue();
      uint64_t v11 = Error.localizedDescription.getter();
      uint64_t v33 = sub_1008FA0F0(v11, v12, v34);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      swift_errorRelease();
      swift_errorRelease();
      _os_log_impl((void *)&_mh_execute_header, v8, v9, "fetchOfflineFindingInfo error: %s", v10, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      swift_errorRelease();
    }
    else
    {
      swift_errorRelease();
      swift_errorRelease();
      swift_errorRelease();
    }
    goto LABEL_32;
  }
  if (a2 >> 60 != 15)
  {
    BOOL v15 = (unsigned char *)(a6 + 16);
    unint64_t v16 = a2 >> 62;
    switch(a2 >> 62)
    {
      case 1uLL:
        if ((int)a1 != a1 >> 32) {
          goto LABEL_15;
        }
        goto LABEL_24;
      case 2uLL:
        if (*(void *)(a1 + 16) == *(void *)(a1 + 24)) {
          goto LABEL_24;
        }
LABEL_15:
        sub_1000361E0(a1, a2);
        goto LABEL_16;
      case 3uLL:
        goto LABEL_13;
      default:
        if ((a2 & 0xFF000000000000) == 0)
        {
LABEL_13:
          sub_100037A24(a1, a2);
LABEL_24:
          swift_beginAccess();
          *BOOL v15 = 1;
          goto LABEL_32;
        }
LABEL_16:
        swift_beginAccess();
        uint64_t v18 = *(void *)(a5 + 16);
        unint64_t v19 = *(void *)(a5 + 24);
        *(void *)(a5 + 16) = a1;
        *(void *)(a5 + 24) = a2;
        sub_1000361E0(a1, a2);
        sub_100037A24(v18, v19);
        if (qword_1016373A8 != -1) {
          swift_once();
        }
        uint64_t v20 = type metadata accessor for Logger();
        sub_100010324(v20, (uint64_t)qword_10170F130);
        sub_1000361E0(a1, a2);
        uint64_t v21 = Logger.logObject.getter();
        os_log_type_t v22 = static os_log_type_t.info.getter();
        if (!os_log_type_enabled(v21, v22))
        {
          sub_100037A24(a1, a2);
          goto LABEL_29;
        }
        uint64_t v23 = (uint8_t *)swift_slowAlloc();
        *(_DWORD *)uint64_t v23 = 134217984;
        if (v16)
        {
          if (v16 == 1)
          {
            LODWORD(v24) = HIDWORD(a1) - a1;
            if (!__OFSUB__(HIDWORD(a1), a1))
            {
              uint64_t v24 = (int)v24;
LABEL_28:
              uint64_t v33 = v24;
              UnsafeMutableRawBufferPointer.copyMemory(from:)();
              sub_100037A24(a1, a2);
              _os_log_impl((void *)&_mh_execute_header, v21, v22, "Read %ld bytes from NVRAM.", v23, 0xCu);
              swift_slowDealloc();
LABEL_29:

              sub_1000361E0(a1, a2);
              sub_1000361E0(a1, a2);
              BOOL v28 = Logger.logObject.getter();
              os_log_type_t v29 = static os_log_type_t.debug.getter();
              if (os_log_type_enabled(v28, v29))
              {
                uint64_t v30 = (uint8_t *)swift_slowAlloc();
                uint64_t v33 = swift_slowAlloc();
                *(_DWORD *)uint64_t v30 = 136315138;
                uint64_t v31 = Data.hexString.getter();
                sub_1008FA0F0(v31, v32, &v33);
                UnsafeMutableRawBufferPointer.copyMemory(from:)();
                swift_bridgeObjectRelease();
                sub_100037A24(a1, a2);
                sub_100037A24(a1, a2);
                _os_log_impl((void *)&_mh_execute_header, v28, v29, "Read NVRAM data: %s", v30, 0xCu);
                swift_arrayDestroy();
                swift_slowDealloc();
                swift_slowDealloc();

                sub_100037A24(a1, a2);
              }
              else
              {
                sub_100037A24(a1, a2);
                sub_100037A24(a1, a2);
                sub_10001CFB8(a1, a2);
              }
LABEL_32:
              dispatch_group_leave(group);
              return;
            }
            __break(1u);
          }
          else
          {
            uint64_t v26 = *(void *)(a1 + 16);
            uint64_t v25 = *(void *)(a1 + 24);
            BOOL v27 = __OFSUB__(v25, v26);
            uint64_t v24 = v25 - v26;
            if (!v27) {
              goto LABEL_28;
            }
          }
          __break(1u);
          JUMPOUT(0x10104F514);
        }
        uint64_t v24 = BYTE6(a2);
        goto LABEL_28;
    }
  }

  dispatch_group_leave(group);
}

void sub_10104F524(uint64_t a1, NSObject *a2, uint64_t a3, uint64_t a4, unint64_t a5)
{
  unsigned int v6 = (unsigned char *)(a3 + 16);
  if (a1)
  {
    swift_beginAccess();
    *unsigned int v6 = 0;
    swift_errorRetain();
    if (qword_1016373A8 != -1) {
      swift_once();
    }
    uint64_t v7 = type metadata accessor for Logger();
    sub_100010324(v7, (uint64_t)qword_10170F130);
    swift_errorRetain();
    swift_errorRetain();
    unint64_t v8 = Logger.logObject.getter();
    os_log_type_t v9 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v8, v9))
    {
      uint64_t v10 = (uint8_t *)swift_slowAlloc();
      v15[0] = swift_slowAlloc();
      *(_DWORD *)uint64_t v10 = 136315138;
      swift_getErrorValue();
      uint64_t v11 = Error.localizedDescription.getter();
      sub_1008FA0F0(v11, v12, v15);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      swift_errorRelease();
      swift_errorRelease();
      _os_log_impl((void *)&_mh_execute_header, v8, v9, "storeOfflineFindingInfo error: %s", v10, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      swift_errorRelease();
    }
    else
    {
      swift_errorRelease();
      swift_errorRelease();
      swift_errorRelease();
    }
  }
  else
  {
    swift_beginAccess();
    *unsigned int v6 = 1;
    if (qword_1016373B8 != -1) {
      swift_once();
    }
    v15[0] = a4;
    v15[1] = a5;
    sub_1000361E0(a4, a5);
    CurrentValueSubject.send(_:)();
    sub_10001CFB8(a4, a5);
  }
  dispatch_group_leave(a2);
}

uint64_t sub_10104F7BC()
{
  uint64_t v0 = type metadata accessor for DispatchTime();
  uint64_t v1 = *(void *)(v0 - 8);
  uint64_t v2 = __chkstk_darwin(v0);
  unsigned int v4 = (char *)v27 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v2);
  unsigned int v6 = (char *)v27 - v5;
  if (qword_1016371D8 != -1) {
    swift_once();
  }
  uint64_t aBlock = 0x7365547265646E75;
  unint64_t v31 = 0xE900000000000074;
  SynchronousCache.cachedValue<A>(key:computeBlock:)();
  swift_bridgeObjectRelease();
  if (v29) {
    return 1;
  }
  uint64_t v8 = swift_allocObject();
  *(_OWORD *)(v8 + 16) = xmmword_101347BB0;
  _OWORD v27[2] = v8 + 16;
  uint64_t v9 = swift_allocObject();
  *(unsigned char *)(v9 + 16) = 3;
  BOOL v28 = (unsigned char *)(v9 + 16);
  uint64_t v10 = dispatch_group_create();
  if (qword_1016373A8 != -1) {
    swift_once();
  }
  uint64_t v11 = type metadata accessor for Logger();
  v27[1] = sub_100010324(v11, (uint64_t)qword_10170F130);
  unint64_t v12 = Logger.logObject.getter();
  os_log_type_t v13 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v12, v13))
  {
    uint64_t v14 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v14 = 0;
    _os_log_impl((void *)&_mh_execute_header, v12, v13, "Reading NVRAM data.", v14, 2u);
    swift_slowDealloc();
  }

  dispatch_group_enter(v10);
  id v15 = [self sharedInstance];
  unint64_t v16 = (void *)swift_allocObject();
  v16[2] = v10;
  v16[3] = v8;
  v16[4] = v9;
  BOOL v34 = sub_10104FEE0;
  os_log_type_t v35 = v16;
  uint64_t aBlock = (uint64_t)_NSConcreteStackBlock;
  unint64_t v31 = 1107296256;
  unint64_t v32 = sub_100769CD8;
  uint64_t v33 = &unk_101603958;
  size_t v17 = _Block_copy(&aBlock);
  uint64_t v18 = v10;
  swift_retain();
  swift_retain();
  swift_release();
  [v15 fetchOfflineFindingInfoWithCompletion:v17];
  _Block_release(v17);

  static DispatchTime.now()();
  if (qword_1016373B0 != -1) {
    swift_once();
  }
  uint64_t v19 = type metadata accessor for DispatchTimeInterval();
  sub_100010324(v19, (uint64_t)qword_1016682B0);
  + infix(_:_:)();
  uint64_t v20 = *(void (**)(char *, uint64_t))(v1 + 8);
  v20(v4, v0);
  OS_dispatch_group.wait(timeout:)();
  v20(v6, v0);
  if (static DispatchTimeoutResult.== infix(_:_:)())
  {
    uint64_t v21 = Logger.logObject.getter();
    os_log_type_t v22 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v21, v22))
    {
      uint64_t v23 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v23 = 0;
      _os_log_impl((void *)&_mh_execute_header, v21, v22, "Timed out reading NVRAM", v23, 2u);
      swift_slowDealloc();
      uint64_t v24 = v18;
    }
    else
    {
      uint64_t v24 = v21;
      uint64_t v21 = v18;
    }

    uint64_t v25 = v28;
    swift_beginAccess();
    *uint64_t v25 = 0;
  }
  else
  {
  }
  swift_beginAccess();
  if (*(void *)(v8 + 24) >> 60 == 15)
  {
    swift_beginAccess();
    LODWORD(v7) = *(unsigned __int8 *)(v9 + 16);
    swift_release();
    swift_release();
    if (v7 == 3) {
      return 1;
    }
    else {
      return v7;
    }
  }
  else
  {
    uint64_t v7 = *(void *)(v8 + 16);
    sub_1000361E0(v7, *(void *)(v8 + 24));
    swift_release();
    swift_release();
  }
  return v7;
}

uint64_t sub_10104FD14(uint64_t a1, unint64_t a2, char a3)
{
  if ((a3 & 1) == 0) {
    return sub_10001CFB8(a1, a2);
  }
  return a1;
}

uint64_t sub_10104FD20(uint64_t a1)
{
  uint64_t v2 = sub_10000588C(&qword_101642998);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_10104FD80(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for OfflineFindingInfo();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_10104FDE4(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for OfflineFindingInfo();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_10104FE40()
{
  unint64_t v1 = *(void *)(v0 + 24);
  if (v1 >> 60 != 15) {
    sub_10001CFB8(*(void *)(v0 + 16), v1);
  }

  return _swift_deallocObject(v0, 32, 7);
}

uint64_t sub_10104FE88()
{
  return _swift_deallocObject(v0, 17, 7);
}

uint64_t sub_10104FE98()
{
  swift_release();
  swift_release();

  return _swift_deallocObject(v0, 40, 7);
}

void sub_10104FEE0(uint64_t a1, unint64_t a2, uint64_t a3)
{
  sub_10104EF6C(a1, a2, a3, *(dispatch_group_t *)(v3 + 16), *(void *)(v3 + 24), *(void *)(v3 + 32));
}

uint64_t sub_10104FEEC(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_10104FEFC()
{
  return swift_release();
}

uint64_t sub_10104FF04()
{
  return _swift_deallocObject(v0, 24, 7);
}

void sub_10104FF3C(uint64_t a1)
{
  sub_10104EC74(a1, *(NSObject **)(v1 + 16));
}

uint64_t sub_10104FF44()
{
  swift_release();
  sub_10001CFB8(*(void *)(v0 + 32), *(void *)(v0 + 40));

  return _swift_deallocObject(v0, 48, 7);
}

void sub_10104FF8C(uint64_t a1)
{
  sub_10104F524(a1, *(NSObject **)(v1 + 16), *(void *)(v1 + 24), *(void *)(v1 + 32), *(void *)(v1 + 40));
}

unint64_t sub_10104FF98()
{
  unint64_t result = qword_1016682E0;
  if (!qword_1016682E0)
  {
    sub_10000592C(&qword_1016682D8);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, &qword_1016682E0);
  }
  return result;
}

uint64_t sub_101050004()
{
  return _swift_task_switch(sub_101050020, 0, 0);
}

uint64_t sub_101050020(uint64_t a1)
{
  v1[3] = sub_1005F52D4(a1);
  if (qword_101636CD8 != -1) {
    swift_once();
  }
  uint64_t v2 = qword_10170E390;
  v1[4] = qword_10170E390;
  swift_retain();
  uint64_t v3 = (void *)swift_task_alloc();
  v1[5] = v3;
  *uint64_t v3 = v1;
  v3[1] = sub_101050134;
  return unsafeBlocking<A>(_:)(v1 + 2, sub_10001D704, v2, &type metadata for Configuration);
}

uint64_t sub_101050134()
{
  swift_task_dealloc();
  swift_release();
  return _swift_task_switch(sub_10105024C, 0, 0);
}

uint64_t sub_10105024C()
{
  char v1 = sub_1010AC2DC(v0[2]);
  swift_bridgeObjectRelease();
  uint64_t v2 = v0[3];
  if ((v1 & 1) == 0)
  {
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    sub_10016C0FC(0xD000000000000018, 0x800000010141F800, 0x2D746E65746E6F63, 0xEC00000065707974, isUniquelyReferenced_nonNull_native);
    swift_bridgeObjectRelease();
    char v4 = swift_isUniquelyReferenced_nonNull_native();
    sub_10016C0FC(0x4554414C464544, 0xE700000000000000, 0xD000000000000010, 0x80000001013EEFA0, v4);
    swift_bridgeObjectRelease();
  }
  uint64_t v5 = (uint64_t (*)(uint64_t))v0[1];
  return v5(v2);
}

uint64_t sub_10105037C()
{
  return _swift_task_switch(sub_101050398, 0, 0);
}

uint64_t sub_101050398(uint64_t a1)
{
  v1[3] = sub_1005F52D4(a1);
  if (qword_101636CD8 != -1) {
    swift_once();
  }
  uint64_t v2 = qword_10170E390;
  v1[4] = qword_10170E390;
  swift_retain();
  uint64_t v3 = (void *)swift_task_alloc();
  v1[5] = v3;
  *uint64_t v3 = v1;
  v3[1] = sub_1010504AC;
  return unsafeBlocking<A>(_:)(v1 + 2, sub_10001D704, v2, &type metadata for Configuration);
}

uint64_t sub_1010504AC()
{
  swift_task_dealloc();
  swift_release();
  return _swift_task_switch(sub_10105A6D0, 0, 0);
}

uint64_t sub_1010505C4(uint64_t a1, uint64_t a2)
{
  *(void *)(v2 + 32) = a1;
  *(void *)(v2 + 40) = a2;
  return _swift_task_switch(sub_101050654, 0, 0);
}

uint64_t sub_101050654()
{
  if (qword_101636CD8 != -1) {
    swift_once();
  }
  uint64_t v1 = qword_10170E390;
  *(void *)(v0 + 48) = qword_10170E390;
  swift_retain();
  uint64_t v2 = (void *)swift_task_alloc();
  *(void *)(v0 + 56) = v2;
  *uint64_t v2 = v0;
  v2[1] = sub_101050788;
  return unsafeBlocking<A>(_:)(v0 + 16, sub_10001D704, v1, &type metadata for Configuration);
}

uint64_t sub_101050788()
{
  swift_task_dealloc();
  swift_release();
  return _swift_task_switch(sub_1010508CC, 0, 0);
}

uint64_t sub_1010508CC()
{
  char v1 = sub_1010AC2DC(*(void *)(v0 + 16));
  swift_bridgeObjectRelease();
  if (v1)
  {
    sub_1000361E0(*(void *)(v0 + 32), *(void *)(v0 + 40));
    uint64_t v2 = *(void *)(v0 + 32);
    uint64_t v3 = *(void *)(v0 + 40);
LABEL_5:
    uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t))(v0 + 8);
    return v8(v2, v3);
  }
  Class isa = Data._bridgeToObjectiveC()().super.isa;
  *(void *)(v0 + 24) = 0;
  id v5 = [(objc_class *)isa compressedDataUsingAlgorithm:3 error:v0 + 24];

  id v6 = *(id *)(v0 + 24);
  if (v5)
  {
    uint64_t v2 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v3 = v7;

    goto LABEL_5;
  }
  uint64_t v10 = v6;
  _convertNSErrorToError(_:)();

  swift_willThrow();
  uint64_t v11 = *(uint64_t (**)(void))(v0 + 8);
  return v11();
}

uint64_t sub_101050A4C(uint64_t a1, uint64_t a2)
{
  *(void *)(v2 + 32) = a1;
  *(void *)(v2 + 40) = a2;
  return _swift_task_switch(sub_101050ADC, 0, 0);
}

uint64_t sub_101050ADC()
{
  if (qword_101636CD8 != -1) {
    swift_once();
  }
  uint64_t v1 = qword_10170E390;
  *(void *)(v0 + 48) = qword_10170E390;
  swift_retain();
  uint64_t v2 = (void *)swift_task_alloc();
  *(void *)(v0 + 56) = v2;
  *uint64_t v2 = v0;
  v2[1] = sub_101050C10;
  return unsafeBlocking<A>(_:)(v0 + 16, sub_10001D704, v1, &type metadata for Configuration);
}

uint64_t sub_101050C10()
{
  swift_task_dealloc();
  swift_release();
  return _swift_task_switch(sub_10105A5E4, 0, 0);
}

uint64_t sub_101050D54(uint64_t a1, uint64_t a2)
{
  *(void *)(v2 + 32) = a1;
  *(void *)(v2 + 40) = a2;
  return _swift_task_switch(sub_101050DE4, 0, 0);
}

uint64_t sub_101050DE4()
{
  if (qword_101636CD8 != -1) {
    swift_once();
  }
  uint64_t v1 = qword_10170E390;
  *(void *)(v0 + 48) = qword_10170E390;
  swift_retain();
  uint64_t v2 = (void *)swift_task_alloc();
  *(void *)(v0 + 56) = v2;
  *uint64_t v2 = v0;
  v2[1] = sub_101050F18;
  return unsafeBlocking<A>(_:)(v0 + 16, sub_10001D704, v1, &type metadata for Configuration);
}

uint64_t sub_101050F18()
{
  swift_task_dealloc();
  swift_release();
  return _swift_task_switch(sub_10105105C, 0, 0);
}

uint64_t sub_10105105C()
{
  char v1 = sub_1010AC2DC(*(void *)(v0 + 16));
  swift_bridgeObjectRelease();
  if (v1)
  {
    sub_1000361E0(*(void *)(v0 + 32), *(void *)(v0 + 40));
    uint64_t v2 = *(void *)(v0 + 32);
    uint64_t v3 = *(void *)(v0 + 40);
LABEL_5:
    uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t))(v0 + 8);
    return v8(v2, v3);
  }
  Class isa = Data._bridgeToObjectiveC()().super.isa;
  *(void *)(v0 + 24) = 0;
  id v5 = [(objc_class *)isa decompressedDataUsingAlgorithm:3 error:v0 + 24];

  id v6 = *(id *)(v0 + 24);
  if (v5)
  {
    uint64_t v2 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v3 = v7;

    goto LABEL_5;
  }
  uint64_t v10 = v6;
  _convertNSErrorToError(_:)();

  swift_willThrow();
  uint64_t v11 = *(uint64_t (**)(void))(v0 + 8);
  return v11();
}

uint64_t sub_1010511DC(uint64_t a1, uint64_t a2)
{
  *(void *)(v2 + 32) = a1;
  *(void *)(v2 + 40) = a2;
  return _swift_task_switch(sub_10105126C, 0, 0);
}

uint64_t sub_10105126C()
{
  if (qword_101636CD8 != -1) {
    swift_once();
  }
  uint64_t v1 = qword_10170E390;
  *(void *)(v0 + 48) = qword_10170E390;
  swift_retain();
  uint64_t v2 = (void *)swift_task_alloc();
  *(void *)(v0 + 56) = v2;
  *uint64_t v2 = v0;
  v2[1] = sub_1010513A0;
  return unsafeBlocking<A>(_:)(v0 + 16, sub_10001D704, v1, &type metadata for Configuration);
}

uint64_t sub_1010513A0()
{
  swift_task_dealloc();
  swift_release();
  return _swift_task_switch(sub_10105A658, 0, 0);
}

uint64_t sub_1010514E4(uint64_t a1, uint64_t a2)
{
  v2[3] = a1;
  v2[4] = a2;
  type metadata accessor for String.Encoding();
  v2[5] = swift_task_alloc();
  return _swift_task_switch(sub_101051574, 0, 0);
}

uint64_t sub_101051574()
{
  if (qword_101636CD8 != -1) {
    swift_once();
  }
  uint64_t v1 = qword_10170E390;
  *(void *)(v0 + 48) = qword_10170E390;
  swift_retain();
  uint64_t v2 = (void *)swift_task_alloc();
  *(void *)(v0 + 56) = v2;
  *uint64_t v2 = v0;
  v2[1] = sub_101051680;
  return unsafeBlocking<A>(_:)(v0 + 16, sub_10001D704, v1, &type metadata for Configuration);
}

uint64_t sub_101051680()
{
  swift_task_dealloc();
  swift_release();
  return _swift_task_switch(sub_101051798, 0, 0);
}

uint64_t sub_101051798()
{
  char v1 = sub_1010AC2DC(*(void *)(v0 + 16));
  swift_bridgeObjectRelease();
  if (v1)
  {
    static String.Encoding.utf8.getter();
    uint64_t v2 = String.init(data:encoding:)();
    uint64_t v4 = v3;
    if (!v3)
    {
      if (qword_101637628 != -1) {
        swift_once();
      }
      uint64_t v5 = type metadata accessor for Logger();
      sub_100010324(v5, (uint64_t)qword_10170F7C8);
      id v6 = Logger.logObject.getter();
      os_log_type_t v7 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v6, v7))
      {
        uint64_t v8 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)uint64_t v8 = 0;
        _os_log_impl((void *)&_mh_execute_header, v6, v7, "Empty description for request body.", v8, 2u);
        swift_slowDealloc();
      }
    }
    swift_task_dealloc();
    uint64_t v9 = *(uint64_t (**)(uint64_t, uint64_t))(v0 + 8);
    return v9(v2, v4);
  }
  else
  {
    uint64_t v11 = swift_task_alloc();
    *(void *)(v0 + 64) = v11;
    *(void *)uint64_t v11 = v0;
    *(void *)(v11 + 8) = sub_101051998;
    *(_OWORD *)(v11 + 32) = *(_OWORD *)(v0 + 24);
    return _swift_task_switch(sub_101050DE4, 0, 0);
  }
}

uint64_t sub_101051998(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = (void *)*v3;
  v4[9] = a1;
  v4[10] = a2;
  v4[11] = v2;
  swift_task_dealloc();
  if (v2) {
    uint64_t v5 = sub_101051C28;
  }
  else {
    uint64_t v5 = sub_101051AB0;
  }
  return _swift_task_switch(v5, 0, 0);
}

uint64_t sub_101051AB0()
{
  static String.Encoding.utf8.getter();
  uint64_t v1 = String.init(data:encoding:)();
  uint64_t v3 = v2;
  if (v2)
  {
    uint64_t v4 = v0[9];
    unint64_t v5 = v0[10];
  }
  else
  {
    if (qword_101637628 != -1) {
      swift_once();
    }
    uint64_t v6 = type metadata accessor for Logger();
    sub_100010324(v6, (uint64_t)qword_10170F7C8);
    uint64_t v7 = Logger.logObject.getter();
    os_log_type_t v8 = static os_log_type_t.error.getter();
    BOOL v9 = os_log_type_enabled(v7, v8);
    uint64_t v11 = v0[9];
    unint64_t v10 = v0[10];
    if (v9)
    {
      uint64_t v12 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v12 = 0;
      _os_log_impl((void *)&_mh_execute_header, v7, v8, "Empty description for request body.", v12, 2u);
      swift_slowDealloc();
    }

    uint64_t v4 = v11;
    unint64_t v5 = v10;
  }
  sub_10001CFB8(v4, v5);
  swift_task_dealloc();
  os_log_type_t v13 = (uint64_t (*)(uint64_t, uint64_t))v0[1];
  return v13(v1, v3);
}

uint64_t sub_101051C28()
{
  if (qword_101637628 != -1) {
    swift_once();
  }
  uint64_t v1 = type metadata accessor for Logger();
  sub_100010324(v1, (uint64_t)qword_10170F7C8);
  uint64_t v2 = Logger.logObject.getter();
  os_log_type_t v3 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v2, v3))
  {
    uint64_t v4 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v4 = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, v3, "Can't get description for request body.", v4, 2u);
    swift_slowDealloc();
  }
  swift_errorRelease();

  swift_task_dealloc();
  unint64_t v5 = *(uint64_t (**)(void, void))(v0 + 8);
  return v5(0, 0);
}

uint64_t sub_101051D58(uint64_t a1, uint64_t a2)
{
  v2[3] = a1;
  v2[4] = a2;
  type metadata accessor for String.Encoding();
  v2[5] = swift_task_alloc();
  return _swift_task_switch(sub_101051DE8, 0, 0);
}

uint64_t sub_101051DE8()
{
  if (qword_101636CD8 != -1) {
    swift_once();
  }
  uint64_t v1 = qword_10170E390;
  *(void *)(v0 + 48) = qword_10170E390;
  swift_retain();
  uint64_t v2 = (void *)swift_task_alloc();
  *(void *)(v0 + 56) = v2;
  *uint64_t v2 = v0;
  v2[1] = sub_101051EF4;
  return unsafeBlocking<A>(_:)(v0 + 16, sub_10001D704, v1, &type metadata for Configuration);
}

uint64_t sub_101051EF4()
{
  swift_task_dealloc();
  swift_release();
  return _swift_task_switch(sub_10105200C, 0, 0);
}

uint64_t sub_10105200C()
{
  char v1 = sub_1010AC2DC(*(void *)(v0 + 16));
  swift_bridgeObjectRelease();
  if (v1)
  {
    static String.Encoding.utf8.getter();
    uint64_t v2 = String.init(data:encoding:)();
    uint64_t v4 = v3;
    if (!v3)
    {
      if (qword_101637628 != -1) {
        swift_once();
      }
      uint64_t v5 = type metadata accessor for Logger();
      sub_100010324(v5, (uint64_t)qword_10170F7C8);
      uint64_t v6 = Logger.logObject.getter();
      os_log_type_t v7 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v6, v7))
      {
        os_log_type_t v8 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)os_log_type_t v8 = 0;
        _os_log_impl((void *)&_mh_execute_header, v6, v7, "Empty description for request body.", v8, 2u);
        swift_slowDealloc();
      }
    }
    swift_task_dealloc();
    BOOL v9 = *(uint64_t (**)(uint64_t, uint64_t))(v0 + 8);
    return v9(v2, v4);
  }
  else
  {
    uint64_t v11 = swift_task_alloc();
    *(void *)(v0 + 64) = v11;
    *(void *)uint64_t v11 = v0;
    *(void *)(v11 + 8) = sub_10105220C;
    *(_OWORD *)(v11 + 32) = *(_OWORD *)(v0 + 24);
    return _swift_task_switch(sub_10105126C, 0, 0);
  }
}

uint64_t sub_10105220C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = (void *)*v3;
  v4[9] = a1;
  v4[10] = a2;
  v4[11] = v2;
  swift_task_dealloc();
  if (v2) {
    uint64_t v5 = sub_10105A6CC;
  }
  else {
    uint64_t v5 = sub_10105A6D4;
  }
  return _swift_task_switch(v5, 0, 0);
}

uint64_t sub_101052324(void *a1)
{
  uint64_t v3 = v1;
  uint64_t v5 = sub_10000588C(&qword_1016684E8);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  os_log_type_t v8 = (char *)&v11 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10001CD44(a1, a1[3]);
  sub_1010599A0();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  LOBYTE(v11) = 0;
  type metadata accessor for UUID();
  sub_101058650(&qword_10163B040, (void (*)(uint64_t))&type metadata accessor for UUID);
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  if (!v2)
  {
    Content = (int *)type metadata accessor for KeyDropCreateRequest.KeyDropCreateContent(0);
    LOBYTE(v11) = 1;
    type metadata accessor for Date();
    sub_101058650((unint64_t *)&unk_10163ACE0, (void (*)(uint64_t))&type metadata accessor for Date);
    KeyedEncodingContainer.encode<A>(_:forKey:)();
    LOBYTE(v11) = *(unsigned char *)(v3 + Content[6]);
    char v12 = 2;
    sub_100176DE8();
    KeyedEncodingContainer.encode<A>(_:forKey:)();
    uint64_t v11 = *(void *)(v3 + Content[7]);
    char v12 = 3;
    sub_10000588C(&qword_1016684F8);
    sub_101059A88(&qword_101668500, &qword_101668508);
    KeyedEncodingContainer.encode<A>(_:forKey:)();
    uint64_t v11 = *(void *)(v3 + Content[8]);
    char v12 = 4;
    sub_10000588C(&qword_10163FBC0);
    sub_1010599F4((unint64_t *)&qword_10163FBC8, &qword_10163FBD0);
    KeyedEncodingContainer.encode<A>(_:forKey:)();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
}

uint64_t sub_10105267C@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v20 = a2;
  uint64_t v3 = type metadata accessor for Date();
  uint64_t v23 = *(void *)(v3 - 8);
  uint64_t v24 = v3;
  __chkstk_darwin(v3);
  uint64_t v5 = (char *)v19 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = type metadata accessor for UUID();
  uint64_t v22 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  uint64_t v25 = (char *)v19 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v27 = sub_10000588C(&qword_101668510);
  uint64_t v21 = *(void *)(v27 - 8);
  __chkstk_darwin(v27);
  BOOL v9 = (char *)v19 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  Content = (int *)type metadata accessor for KeyDropCreateRequest.KeyDropCreateContent(0);
  __chkstk_darwin(Content);
  char v12 = (char *)v19 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10001CD44(a1, a1[3]);
  sub_1010599A0();
  uint64_t v26 = v9;
  uint64_t v13 = (uint64_t)v28;
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v13) {
    return _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)a1);
  }
  uint64_t v14 = v5;
  BOOL v28 = a1;
  uint64_t v16 = v22;
  uint64_t v15 = v23;
  uint64_t v17 = v24;
  LOBYTE(v29) = 0;
  sub_101058650((unint64_t *)&qword_10163B010, (void (*)(uint64_t))&type metadata accessor for UUID);
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  (*(void (**)(char *, char *, uint64_t))(v16 + 32))(v12, v25, v6);
  LOBYTE(v29) = 1;
  sub_101058650(&qword_10163ACC0, (void (*)(uint64_t))&type metadata accessor for Date);
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  v19[1] = v6;
  (*(void (**)(char *, char *, uint64_t))(v15 + 32))(&v12[Content[5]], v14, v17);
  char v30 = 2;
  sub_1005FA260();
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  v12[Content[6]] = v29;
  sub_10000588C(&qword_1016684F8);
  char v30 = 3;
  sub_101059A88(&qword_101668518, &qword_101668520);
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  *(void *)&v12[Content[7]] = v29;
  sub_10000588C(&qword_10163FBC0);
  char v30 = 4;
  sub_1010599F4((unint64_t *)&qword_10165C228, &qword_10165C230);
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  (*(void (**)(char *, uint64_t))(v21 + 8))(v26, v27);
  *(void *)&v12[Content[8]] = v29;
  sub_101059B1C((uint64_t)v12, v20, type metadata accessor for KeyDropCreateRequest.KeyDropCreateContent);
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)v28);
  return sub_10105870C((uint64_t)v12, type metadata accessor for KeyDropCreateRequest.KeyDropCreateContent);
}

uint64_t sub_101052C6C(void *a1)
{
  uint64_t v3 = v1;
  uint64_t v5 = sub_10000588C(&qword_101668540);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v8 = (char *)&v11 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10001CD44(a1, a1[3]);
  sub_101059B84();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  LOBYTE(v13) = 0;
  type metadata accessor for UUID();
  sub_101058650(&qword_10163B040, (void (*)(uint64_t))&type metadata accessor for UUID);
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  if (!v2)
  {
    uint64_t v9 = type metadata accessor for KeyDropCreateRequest.Member(0);
    LOBYTE(v13) = 1;
    KeyedEncodingContainer.encode(_:forKey:)();
    long long v13 = *(_OWORD *)(v3 + *(int *)(v9 + 24));
    char v12 = 2;
    sub_100037BB4();
    KeyedEncodingContainer.encode<A>(_:forKey:)();
    long long v13 = *(_OWORD *)(v3 + *(int *)(v9 + 28));
    char v12 = 3;
    KeyedEncodingContainer.encode<A>(_:forKey:)();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
}

uint64_t sub_101052EAC@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v15 = a2;
  uint64_t v4 = type metadata accessor for UUID();
  uint64_t v17 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v18 = (char *)&v14 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v19 = sub_10000588C(&qword_101668530);
  uint64_t v16 = *(void *)(v19 - 8);
  __chkstk_darwin(v19);
  uint64_t v7 = (char *)&v14 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = (int *)type metadata accessor for KeyDropCreateRequest.Member(0);
  __chkstk_darwin(v8);
  unint64_t v10 = (char *)&v14 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10001CD44(a1, a1[3]);
  sub_101059B84();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v2) {
    return _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)a1);
  }
  uint64_t v14 = a1;
  uint64_t v11 = v17;
  LOBYTE(v20) = 0;
  sub_101058650((unint64_t *)&qword_10163B010, (void (*)(uint64_t))&type metadata accessor for UUID);
  char v12 = v18;
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  (*(void (**)(char *, char *, uint64_t))(v11 + 32))(v10, v12, v4);
  LOBYTE(v20) = 1;
  v10[v8[5]] = KeyedDecodingContainer.decode(_:forKey:)() & 1;
  char v21 = 2;
  sub_100037AA0();
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  *(_OWORD *)&v10[v8[6]] = v20;
  char v21 = 3;
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  (*(void (**)(char *, uint64_t))(v16 + 8))(v7, v19);
  *(_OWORD *)&v10[v8[7]] = v20;
  sub_101059B1C((uint64_t)v10, v15, type metadata accessor for KeyDropCreateRequest.Member);
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)v14);
  return sub_10105870C((uint64_t)v10, type metadata accessor for KeyDropCreateRequest.Member);
}

uint64_t sub_1010532E8()
{
  uint64_t result = 0x64496572616873;
  switch(*v0)
  {
    case 1:
      uint64_t result = 0x6974617269707865;
      break;
    case 2:
      uint64_t result = 1701869940;
      break;
    case 3:
      uint64_t result = 0x737265626D656DLL;
      break;
    case 4:
      uint64_t result = 0x616B63615079656BLL;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t sub_101053394@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_10105A1CC(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_1010533BC(uint64_t a1)
{
  unint64_t v2 = sub_1010599A0();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1010533F8(uint64_t a1)
{
  unint64_t v2 = sub_1010599A0();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_101053434@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_10105267C(a1, a2);
}

uint64_t sub_10105344C(void *a1)
{
  return sub_101052324(a1);
}

uint64_t sub_101053464()
{
  uint64_t result = 0x64497265626D656DLL;
  switch(*v0)
  {
    case 1:
      uint64_t result = 0x72656E776FLL;
      break;
    case 2:
      uint64_t result = 0x654B63696C627570;
      break;
    case 3:
      uint64_t result = 0x6574707972636E65;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t sub_101053500@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_10105A400(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_101053528(uint64_t a1)
{
  unint64_t v2 = sub_101059B84();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_101053564(uint64_t a1)
{
  unint64_t v2 = sub_101059B84();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_1010535A0@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_101052EAC(a1, a2);
}

uint64_t sub_1010535B8(void *a1)
{
  return sub_101052C6C(a1);
}

uint64_t sub_1010535D0(uint64_t a1)
{
  unint64_t v2 = sub_10105994C();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_10105360C(uint64_t a1)
{
  unint64_t v2 = sub_10105994C();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_101053648@<X0>(void *a1@<X0>, unsigned char *a2@<X8>)
{
  uint64_t v5 = sub_10000588C(&qword_1016684D8);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v8 = (char *)&v11 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10001CD44(a1, a1[3]);
  sub_10105994C();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v2) {
    return _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)a1);
  }
  char v9 = KeyedDecodingContainer.decode(_:forKey:)();
  (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  uint64_t result = _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)a1);
  *a2 = v9 & 1;
  return result;
}

uint64_t sub_1010537A8(void *a1)
{
  uint64_t v2 = sub_10000588C(&qword_101668528);
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  uint64_t v5 = (char *)&v7 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10001CD44(a1, a1[3]);
  sub_10105994C();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  KeyedEncodingContainer.encode(_:forKey:)();
  return (*(uint64_t (**)(char *, uint64_t))(v3 + 8))(v5, v2);
}

uint64_t sub_1010538DC(uint64_t a1, uint64_t a2, char a3, uint64_t a4, uint64_t a5)
{
  *(void *)(v6 + 160) = a5;
  *(void *)(v6 + 168) = v5;
  *(void *)(v6 + 144) = a2;
  *(void *)(v6 + 152) = a4;
  *(unsigned char *)(v6 + 360) = a3;
  *(void *)(v6 + 136) = a1;
  *(void *)(v6 + 176) = *(void *)(type metadata accessor for KeyDropCreateRequest.Member(0) - 8);
  *(void *)(v6 + 184) = swift_task_alloc();
  uint64_t v7 = type metadata accessor for Date();
  *(void *)(v6 + 192) = v7;
  *(void *)(v6 + 200) = *(void *)(v7 - 8);
  *(void *)(v6 + 208) = swift_task_alloc();
  *(void *)(v6 + 216) = swift_task_alloc();
  uint64_t v8 = type metadata accessor for UUID();
  *(void *)(v6 + 224) = v8;
  *(void *)(v6 + 232) = *(void *)(v8 - 8);
  *(void *)(v6 + 240) = swift_task_alloc();
  *(void *)(v6 + 248) = swift_task_alloc();
  *(void *)(v6 + 256) = swift_task_alloc();
  return _swift_task_switch(sub_101053A88, v5, 0);
}

uint64_t sub_101053A88()
{
  uint64_t v69 = v0;
  uint64_t v1 = v0;
  if (qword_101637628 != -1) {
    swift_once();
  }
  uint64_t v2 = v0[17];
  uint64_t v3 = v0[32];
  uint64_t v4 = v0[28];
  uint64_t v5 = v0[29];
  uint64_t v7 = v0[24];
  uint64_t v6 = v0[25];
  uint64_t v62 = v0[27];
  uint64_t v8 = v0[18];
  uint64_t v9 = type metadata accessor for Logger();
  v0[33] = sub_100010324(v9, (uint64_t)qword_10170F7C8);
  uint64_t v65 = *(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 16);
  v65(v3, v2, v4);
  uint64_t v10 = *(void (**)(uint64_t, uint64_t, uint64_t))(v6 + 16);
  v10(v62, v8, v7);
  swift_bridgeObjectRetain_n();
  swift_bridgeObjectRetain_n();
  uint64_t v11 = Logger.logObject.getter();
  os_log_type_t v12 = static os_log_type_t.default.getter();
  BOOL v13 = os_log_type_enabled(v11, v12);
  uint64_t v14 = v0[32];
  uint64_t v16 = v0[28];
  uint64_t v15 = v0[29];
  uint64_t v63 = v0[27];
  uint64_t v17 = v0[25];
  uint64_t v60 = v0[24];
  uint64_t v18 = v0[19];
  uint64_t v19 = v1[20];
  if (v13)
  {
    uint64_t v58 = v11;
    uint64_t v59 = v10;
    os_log_type_t v57 = v12;
    uint64_t v56 = v18;
    uint64_t v20 = swift_slowAlloc();
    uint64_t v67 = swift_slowAlloc();
    *(_DWORD *)uint64_t v20 = 141559299;
    v1[11] = 1752392040;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v20 + 12) = 2081;
    sub_101058650((unint64_t *)&qword_101638B10, (void (*)(uint64_t))&type metadata accessor for UUID);
    uint64_t v21 = dispatch thunk of CustomStringConvertible.description.getter();
    v1[12] = sub_1008FA0F0(v21, v22, &v67);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    (*(void (**)(uint64_t, uint64_t))(v15 + 8))(v14, v16);
    uint64_t v23 = v20;
    *(_WORD *)(v20 + 22) = 2082;
    sub_101058650((unint64_t *)&qword_101638DA0, (void (*)(uint64_t))&type metadata accessor for Date);
    uint64_t v24 = dispatch thunk of CustomStringConvertible.description.getter();
    v1[13] = sub_1008FA0F0(v24, v25, &v67);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    (*(void (**)(uint64_t, uint64_t))(v17 + 8))(v63, v60);
    *(_WORD *)(v20 + 32) = 2048;
    uint64_t v26 = *(void *)(v19 + 16);
    swift_bridgeObjectRelease();
    v1[14] = v26;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    *(_WORD *)(v20 + 42) = 2080;
    int64_t v27 = *(void *)(v56 + 16);
    if (v27)
    {
      uint64_t v61 = v20;
      uint64_t v28 = v1[29];
      uint64_t v29 = v1[22];
      uint64_t v30 = v1[19];
      uint64_t v68 = _swiftEmptyArrayStorage;
      sub_1000B7034(0, v27, 0);
      uint64_t v31 = v30 + ((*(unsigned __int8 *)(v29 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v29 + 80));
      uint64_t v64 = *(void *)(v29 + 72);
      unint64_t v32 = v68;
      do
      {
        uint64_t v33 = v1[31];
        uint64_t v34 = v1[28];
        uint64_t v35 = v1[23];
        sub_101059B1C(v31, v35, type metadata accessor for KeyDropCreateRequest.Member);
        v65(v33, v35, v34);
        sub_10105870C(v35, type metadata accessor for KeyDropCreateRequest.Member);
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        {
          sub_1000B7034(0, v32[2] + 1, 1);
          unint64_t v32 = v68;
        }
        unint64_t v37 = v32[2];
        unint64_t v36 = v32[3];
        if (v37 >= v36 >> 1)
        {
          sub_1000B7034(v36 > 1, v37 + 1, 1);
          unint64_t v32 = v68;
        }
        uint64_t v38 = v1[31];
        uint64_t v39 = v1[28];
        v32[2] = v37 + 1;
        (*(void (**)(unint64_t, uint64_t, uint64_t))(v28 + 32))((unint64_t)v32+ ((*(unsigned __int8 *)(v28 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v28 + 80))+ *(void *)(v28 + 72) * v37, v38, v39);
        uint64_t v68 = v32;
        v31 += v64;
        --v27;
      }
      while (v27);
      uint64_t v23 = v61;
    }
    uint64_t v40 = *((unsigned __int8 *)v1 + 360);
    uint64_t v41 = Array.description.getter();
    unint64_t v43 = v42;
    swift_bridgeObjectRelease();
    v1[15] = sub_1008FA0F0(v41, v43, &v67);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease_n();
    *(_WORD *)(v23 + 52) = 2082;
    unint64_t v44 = 0xE400000000000000;
    uint64_t v45 = 1835365481;
    uint64_t v10 = v59;
    switch(v40)
    {
      case 1:
        uint64_t v45 = 1936094325;
        break;
      case 2:
        unint64_t v44 = 0xEA00000000006E6FLL;
        uint64_t v45 = 0x63616542666C6573;
        break;
      case 3:
        unint64_t v44 = 0xEF736E6F69746163;
        uint64_t v45 = 0x6F4C657275636573;
        break;
      case 4:
        unint64_t v44 = 0xE300000000000000;
        uint64_t v45 = 6448503;
        break;
      default:
        break;
    }
    v1[16] = sub_1008FA0F0(v45, v44, &v67);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v58, v57, "Creating share for id: %{private,mask.hash}s, expiration: %{public}s,\nkeyPackage count: %ld, members: %s, type: %{public}s.", (uint8_t *)v23, 0x3Eu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    swift_bridgeObjectRelease();
    (*(void (**)(uint64_t, uint64_t))(v15 + 8))(v14, v16);
    (*(void (**)(uint64_t, uint64_t))(v17 + 8))(v63, v60);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease_n();
  }
  uint64_t v46 = v1[26];
  uint64_t v47 = v1[24];
  uint64_t v48 = v1[18];
  v65(v1[30], v1[17], v1[28]);
  v10(v46, v48, v47);
  uint64_t v66 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))((char *)&dword_1016682F0 + dword_1016682F0);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  os_log_type_t v49 = (void *)swift_task_alloc();
  v1[34] = v49;
  *os_log_type_t v49 = v1;
  v49[1] = sub_101054214;
  uint64_t v50 = v1[26];
  uint64_t v51 = v1[19];
  uint64_t v52 = v1[20];
  uint64_t v53 = *((unsigned __int8 *)v1 + 360);
  uint64_t v54 = v1[30];
  return v66(v54, v50, v53, v51, v52);
}

uint64_t sub_101054214(uint64_t a1, uint64_t a2, unint64_t a3)
{
  uint64_t v7 = (void *)*v4;
  v7[35] = a1;
  v7[36] = a2;
  v7[37] = a3;
  v7[38] = v3;
  swift_task_dealloc();
  if (v3)
  {
    uint64_t v8 = v7[21];
    uint64_t v9 = sub_1010545D8;
  }
  else
  {
    swift_bridgeObjectRetain();
    sub_1000361E0(a2, a3);
    uint64_t v9 = sub_101054364;
    uint64_t v8 = 0;
  }
  return _swift_task_switch(v9, v8, 0);
}

uint64_t sub_101054364()
{
  sub_1000361E0(v0[36], v0[37]);
  uint64_t v1 = (void *)swift_task_alloc();
  v0[39] = v1;
  *uint64_t v1 = v0;
  v1[1] = sub_101054400;
  uint64_t v3 = v0[36];
  uint64_t v2 = v0[37];
  return sub_1010514E4(v3, v2);
}

uint64_t sub_101054400(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = (void *)*v2;
  uint64_t v4 = (void *)*v2;
  v4[7] = v2;
  v4[8] = a1;
  v4[9] = a2;
  unint64_t v5 = v3[37];
  uint64_t v6 = v3[36];
  v4[40] = a2;
  swift_task_dealloc();
  sub_10001CFB8(v6, v5);
  return _swift_task_switch(sub_10105453C, 0, 0);
}

uint64_t sub_10105453C()
{
  uint64_t v1 = v0[40];
  swift_bridgeObjectRelease();
  if (v1)
  {
    unint64_t v2 = v0[40];
    uint64_t v3 = v0[8];
    sub_10001CFB8(v0[36], v0[37]);
  }
  else
  {
    sub_10001CFB8(v0[36], v0[37]);
    unint64_t v2 = 0xE300000000000000;
    uint64_t v3 = 7104878;
  }
  v0[41] = v3;
  v0[42] = v2;
  uint64_t v4 = v0[21];
  return _swift_task_switch(sub_101054684, v4, 0);
}

uint64_t sub_1010545D8()
{
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1(0);
}

uint64_t sub_101054684()
{
  BOOL v13 = v0;
  swift_bridgeObjectRetain();
  uint64_t v1 = Logger.logObject.getter();
  os_log_type_t v2 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v1, v2))
  {
    uint64_t v4 = v0[41];
    unint64_t v3 = v0[42];
    unint64_t v5 = (uint8_t *)swift_slowAlloc();
    uint64_t v12 = swift_slowAlloc();
    *(_DWORD *)unint64_t v5 = 136315138;
    swift_bridgeObjectRetain();
    v0[10] = sub_1008FA0F0(v4, v3, &v12);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    _os_log_impl((void *)&_mh_execute_header, v1, v2, "KeyDropCreateRequest: %s", v5, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    swift_bridgeObjectRelease_n();
  }

  uint64_t v6 = v0[36];
  unint64_t v7 = v0[37];
  uint64_t v8 = v0[35];
  v0[5] = &type metadata for KeyDropCreateRequest;
  v0[6] = sub_1010585FC();
  v0[2] = v8;
  v0[3] = v6;
  v0[4] = v7;
  swift_bridgeObjectRetain();
  sub_1000361E0(v6, v7);
  uint64_t v11 = (uint64_t (*)(uint64_t, char))((char *)&dword_101668308 + dword_101668308);
  uint64_t v9 = (void *)swift_task_alloc();
  v0[43] = v9;
  *uint64_t v9 = v0;
  v9[1] = sub_1010548A8;
  return v11((uint64_t)(v0 + 2), 0);
}

uint64_t sub_1010548A8(char a1)
{
  uint64_t v4 = *v2;
  *(void *)(*v2 + 352) = v1;
  swift_task_dealloc();
  if (v1)
  {
    uint64_t v5 = *(void *)(v4 + 168);
    uint64_t v6 = sub_101054ABC;
  }
  else
  {
    uint64_t v7 = *(void *)(v4 + 168);
    *(unsigned char *)(v4 + 361) = a1 & 1;
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v4 + 16);
    uint64_t v6 = sub_1010549EC;
    uint64_t v5 = v7;
  }
  return _swift_task_switch(v6, v5, 0);
}

uint64_t sub_1010549EC()
{
  uint64_t v1 = *(void *)(v0 + 288);
  unint64_t v2 = *(void *)(v0 + 296);
  swift_bridgeObjectRelease();
  sub_10001CFB8(v1, v2);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  unint64_t v3 = *(uint64_t (**)(uint64_t))(v0 + 8);
  uint64_t v4 = *(unsigned __int8 *)(v0 + 361);
  return v3(v4);
}

uint64_t sub_101054ABC()
{
  uint64_t v2 = v0[36];
  unint64_t v1 = v0[37];
  swift_bridgeObjectRelease();
  sub_10001CFB8(v2, v1);
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)(v0 + 2));
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  unint64_t v3 = (uint64_t (*)(void))v0[1];
  return v3(0);
}

uint64_t sub_101054B8C(uint64_t a1, char a2)
{
  *(unsigned char *)(v3 + 153) = a2;
  *(void *)(v3 + 64) = a1;
  *(void *)(v3 + 72) = v2;
  uint64_t v4 = type metadata accessor for FMNServerInteractionController.FMNResponseFields();
  *(void *)(v3 + 80) = v4;
  *(void *)(v3 + 88) = *(void *)(v4 - 8);
  *(void *)(v3 + 96) = swift_task_alloc();
  *(void *)(v3 + 104) = swift_task_alloc();
  return _swift_task_switch(sub_101054C60, v2, 0);
}

uint64_t sub_101054C60()
{
  unint64_t v1 = *(uint64_t (**)(void))(*(void *)(v0 + 72) + 112);
  if (v1 && (uint64_t v2 = v1()) != 0)
  {
    *(void *)(v0 + 112) = v2;
    uint64_t v3 = *(void **)(v0 + 64);
    uint64_t v4 = v3[3];
    uint64_t v5 = v3[4];
    uint64_t v6 = sub_10001CD44(v3, v4);
    *(void *)(v0 + 40) = v4;
    *(void *)(v0 + 48) = *(void *)(v5 + 8);
    uint64_t v7 = sub_10001D958((uint64_t *)(v0 + 16));
    (*(void (**)(uint64_t *, void *, uint64_t))(*(void *)(v4 - 8) + 16))(v7, v6, v4);
    uint64_t v8 = (void *)swift_task_alloc();
    *(void *)(v0 + 120) = v8;
    *uint64_t v8 = v0;
    v8[1] = sub_101054E00;
    uint64_t v9 = *(void *)(v0 + 104);
    return sub_100487CFC(v9, v0 + 16);
  }
  else
  {
    uint64_t v11 = (void *)swift_task_alloc();
    *(void *)(v0 + 136) = v11;
    *uint64_t v11 = v0;
    v11[1] = sub_101055358;
    char v12 = *(unsigned char *)(v0 + 153);
    return sub_101267244(v12);
  }
}

uint64_t sub_101054E00()
{
  uint64_t v2 = *v1;
  *(void *)(*v1 + 128) = v0;
  swift_task_dealloc();
  if (v0)
  {
    uint64_t v3 = *(void *)(v2 + 72);
    uint64_t v4 = sub_1010552D4;
  }
  else
  {
    uint64_t v5 = *(void *)(v2 + 72);
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v2 + 16);
    uint64_t v4 = sub_101054F28;
    uint64_t v3 = v5;
  }
  return _swift_task_switch(v4, v3, 0);
}

uint64_t sub_101054F28()
{
  uint64_t v27 = v0;
  uint64_t v1 = *(void *)(v0 + 128);
  sub_101267D7C();
  if (v1)
  {
    (*(void (**)(void, void))(*(void *)(v0 + 88) + 8))(*(void *)(v0 + 104), *(void *)(v0 + 80));
    swift_release();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v21 = *(uint64_t (**)(uint64_t))(v0 + 8);
    uint64_t v22 = 0;
  }
  else
  {
    if (qword_101637630 != -1) {
      swift_once();
    }
    if (qword_101637628 != -1) {
      swift_once();
    }
    uint64_t v3 = *(void *)(v0 + 96);
    uint64_t v2 = *(void *)(v0 + 104);
    uint64_t v5 = *(void *)(v0 + 80);
    uint64_t v4 = *(void *)(v0 + 88);
    uint64_t v6 = type metadata accessor for Logger();
    sub_100010324(v6, (uint64_t)qword_10170F7C8);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v4 + 16))(v3, v2, v5);
    uint64_t v7 = Logger.logObject.getter();
    os_log_type_t v8 = static os_log_type_t.default.getter();
    BOOL v9 = os_log_type_enabled(v7, v8);
    uint64_t v11 = *(void *)(v0 + 88);
    uint64_t v10 = *(void *)(v0 + 96);
    uint64_t v12 = *(void *)(v0 + 80);
    if (v9)
    {
      uint64_t v13 = (uint8_t *)swift_slowAlloc();
      uint64_t v26 = swift_slowAlloc();
      *(_DWORD *)uint64_t v13 = 136315138;
      sub_101058650((unint64_t *)&qword_101649E30, (void (*)(uint64_t))&type metadata accessor for FMNServerInteractionController.FMNResponseFields);
      uint64_t v14 = dispatch thunk of CustomStringConvertible.description.getter();
      *(void *)(v0 + 56) = sub_1008FA0F0(v14, v15, &v26);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      uint64_t v16 = *(void (**)(uint64_t, uint64_t))(v11 + 8);
      v16(v10, v12);
      _os_log_impl((void *)&_mh_execute_header, v7, v8, "Response value is %s", v13, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      uint64_t v16 = *(void (**)(uint64_t, uint64_t))(v11 + 8);
      v16(*(void *)(v0 + 96), *(void *)(v0 + 80));
    }

    uint64_t v17 = FMNServerInteractionController.FMNResponseFields.data.getter();
    unint64_t v19 = v18;
    sub_101058698();
    dispatch thunk of JSONDecoder.decode<A>(_:from:)();
    uint64_t v20 = *(void *)(v0 + 104);
    uint64_t v24 = *(void *)(v0 + 80);
    swift_release();
    sub_10001CFB8(v17, v19);
    v16(v20, v24);
    uint64_t v25 = *(unsigned __int8 *)(v0 + 152);
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v21 = *(uint64_t (**)(uint64_t))(v0 + 8);
    uint64_t v22 = v25;
  }
  return v21(v22);
}

uint64_t sub_1010552D4()
{
  swift_release();
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v0 + 16);
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1(0);
}

uint64_t sub_101055358(uint64_t a1)
{
  uint64_t v2 = *(void *)(*(void *)v1 + 72);
  *(void *)(*(void *)v1 + 144) = a1;
  swift_task_dealloc();
  return _swift_task_switch(sub_101055470, v2, 0);
}

uint64_t sub_101055470()
{
  v0[14] = v0[18];
  uint64_t v1 = (void *)v0[8];
  uint64_t v2 = v1[3];
  uint64_t v3 = v1[4];
  uint64_t v4 = sub_10001CD44(v1, v2);
  v0[5] = v2;
  v0[6] = *(void *)(v3 + 8);
  uint64_t v5 = sub_10001D958(v0 + 2);
  (*(void (**)(uint64_t *, void *, uint64_t))(*(void *)(v2 - 8) + 16))(v5, v4, v2);
  uint64_t v6 = (void *)swift_task_alloc();
  v0[15] = (uint64_t)v6;
  *uint64_t v6 = v0;
  v6[1] = sub_101054E00;
  uint64_t v7 = v0[13];
  return sub_100487CFC(v7, (uint64_t)(v0 + 2));
}

uint64_t sub_10105557C(uint64_t a1, uint64_t a2, char a3)
{
  *(void *)(v4 + 72) = a2;
  *(void *)(v4 + 80) = v3;
  *(unsigned char *)(v4 + 160) = a3;
  *(void *)(v4 + 64) = a1;
  uint64_t v5 = type metadata accessor for FMNServerInteractionController.FMNResponseFields();
  *(void *)(v4 + 88) = v5;
  *(void *)(v4 + 96) = *(void *)(v5 - 8);
  *(void *)(v4 + 104) = swift_task_alloc();
  *(void *)(v4 + 112) = swift_task_alloc();
  return _swift_task_switch(sub_101055654, v3, 0);
}

uint64_t sub_101055654()
{
  uint64_t v1 = *(uint64_t (**)(void))(*(void *)(v0 + 80) + 112);
  if (v1 && (uint64_t v2 = v1()) != 0)
  {
    *(void *)(v0 + 120) = v2;
    uint64_t v3 = *(void **)(v0 + 72);
    uint64_t v4 = v3[3];
    uint64_t v5 = v3[4];
    uint64_t v6 = sub_10001CD44(v3, v4);
    *(void *)(v0 + 40) = v4;
    *(void *)(v0 + 48) = *(void *)(v5 + 8);
    uint64_t v7 = sub_10001D958((uint64_t *)(v0 + 16));
    (*(void (**)(uint64_t *, void *, uint64_t))(*(void *)(v4 - 8) + 16))(v7, v6, v4);
    os_log_type_t v8 = (void *)swift_task_alloc();
    *(void *)(v0 + 128) = v8;
    *os_log_type_t v8 = v0;
    v8[1] = sub_1010557F4;
    uint64_t v9 = *(void *)(v0 + 112);
    return sub_100487CFC(v9, v0 + 16);
  }
  else
  {
    uint64_t v11 = (void *)swift_task_alloc();
    *(void *)(v0 + 144) = v11;
    *uint64_t v11 = v0;
    v11[1] = sub_101055CF0;
    char v12 = *(unsigned char *)(v0 + 160);
    return sub_101267244(v12);
  }
}

uint64_t sub_1010557F4()
{
  uint64_t v2 = *v1;
  *(void *)(*v1 + 136) = v0;
  swift_task_dealloc();
  if (v0)
  {
    uint64_t v3 = *(void *)(v2 + 80);
    uint64_t v4 = sub_10105A6DC;
  }
  else
  {
    uint64_t v5 = *(void *)(v2 + 80);
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v2 + 16);
    uint64_t v4 = sub_10105591C;
    uint64_t v3 = v5;
  }
  return _swift_task_switch(v4, v3, 0);
}

uint64_t sub_10105591C()
{
  uint64_t v25 = v0;
  uint64_t v1 = v0[17];
  sub_101267D7C();
  if (v1)
  {
    (*(void (**)(void, void))(v0[12] + 8))(v0[14], v0[11]);
    swift_release();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v21 = (uint64_t (*)(void))v0[1];
  }
  else
  {
    if (qword_101637630 != -1) {
      swift_once();
    }
    if (qword_101637628 != -1) {
      swift_once();
    }
    uint64_t v3 = v0[13];
    uint64_t v2 = v0[14];
    uint64_t v5 = v0[11];
    uint64_t v4 = v0[12];
    uint64_t v6 = type metadata accessor for Logger();
    sub_100010324(v6, (uint64_t)qword_10170F7C8);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v4 + 16))(v3, v2, v5);
    uint64_t v7 = Logger.logObject.getter();
    os_log_type_t v8 = static os_log_type_t.default.getter();
    BOOL v9 = os_log_type_enabled(v7, v8);
    uint64_t v10 = v0[12];
    uint64_t v11 = v0[13];
    uint64_t v12 = v0[11];
    if (v9)
    {
      uint64_t v13 = (uint8_t *)swift_slowAlloc();
      uint64_t v24 = swift_slowAlloc();
      *(_DWORD *)uint64_t v13 = 136315138;
      sub_101058650((unint64_t *)&qword_101649E30, (void (*)(uint64_t))&type metadata accessor for FMNServerInteractionController.FMNResponseFields);
      uint64_t v14 = dispatch thunk of CustomStringConvertible.description.getter();
      v0[7] = sub_1008FA0F0(v14, v15, &v24);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      uint64_t v16 = *(void (**)(uint64_t, uint64_t))(v10 + 8);
      v16(v11, v12);
      _os_log_impl((void *)&_mh_execute_header, v7, v8, "Response value is %s", v13, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      uint64_t v16 = *(void (**)(uint64_t, uint64_t))(v10 + 8);
      v16(v0[13], v0[11]);
    }

    type metadata accessor for KeyDropShareMetaDataResponse(0);
    uint64_t v17 = FMNServerInteractionController.FMNResponseFields.data.getter();
    unint64_t v19 = v18;
    sub_101058650(&qword_101668340, (void (*)(uint64_t))type metadata accessor for KeyDropShareMetaDataResponse);
    dispatch thunk of JSONDecoder.decode<A>(_:from:)();
    uint64_t v20 = v0[14];
    uint64_t v23 = v0[11];
    swift_release();
    sub_10001CFB8(v17, v19);
    v16(v20, v23);
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v21 = (uint64_t (*)(void))v0[1];
  }
  return v21();
}

uint64_t sub_101055CF0(uint64_t a1)
{
  uint64_t v2 = *(void *)(*(void *)v1 + 80);
  *(void *)(*(void *)v1 + 152) = a1;
  swift_task_dealloc();
  return _swift_task_switch(sub_101055E08, v2, 0);
}

uint64_t sub_101055E08()
{
  v0[15] = v0[19];
  uint64_t v1 = (void *)v0[9];
  uint64_t v2 = v1[3];
  uint64_t v3 = v1[4];
  uint64_t v4 = sub_10001CD44(v1, v2);
  v0[5] = v2;
  v0[6] = *(void *)(v3 + 8);
  uint64_t v5 = sub_10001D958(v0 + 2);
  (*(void (**)(uint64_t *, void *, uint64_t))(*(void *)(v2 - 8) + 16))(v5, v4, v2);
  uint64_t v6 = (void *)swift_task_alloc();
  v0[16] = (uint64_t)v6;
  *uint64_t v6 = v0;
  v6[1] = sub_1010557F4;
  uint64_t v7 = v0[14];
  return sub_100487CFC(v7, (uint64_t)(v0 + 2));
}

uint64_t sub_101055F14(uint64_t a1, char a2)
{
  *(unsigned char *)(v3 + 153) = a2;
  *(void *)(v3 + 64) = a1;
  *(void *)(v3 + 72) = v2;
  uint64_t v4 = type metadata accessor for FMNServerInteractionController.FMNResponseFields();
  *(void *)(v3 + 80) = v4;
  *(void *)(v3 + 88) = *(void *)(v4 - 8);
  *(void *)(v3 + 96) = swift_task_alloc();
  *(void *)(v3 + 104) = swift_task_alloc();
  return _swift_task_switch(sub_101055FE8, v2, 0);
}

uint64_t sub_101055FE8()
{
  uint64_t v1 = *(uint64_t (**)(void))(*(void *)(v0 + 72) + 112);
  if (v1 && (uint64_t v2 = v1()) != 0)
  {
    *(void *)(v0 + 112) = v2;
    uint64_t v3 = *(void **)(v0 + 64);
    uint64_t v4 = v3[3];
    uint64_t v5 = v3[4];
    uint64_t v6 = sub_10001CD44(v3, v4);
    *(void *)(v0 + 40) = v4;
    *(void *)(v0 + 48) = *(void *)(v5 + 8);
    uint64_t v7 = sub_10001D958((uint64_t *)(v0 + 16));
    (*(void (**)(uint64_t *, void *, uint64_t))(*(void *)(v4 - 8) + 16))(v7, v6, v4);
    os_log_type_t v8 = (void *)swift_task_alloc();
    *(void *)(v0 + 120) = v8;
    *os_log_type_t v8 = v0;
    v8[1] = sub_101056188;
    uint64_t v9 = *(void *)(v0 + 104);
    return sub_100487CFC(v9, v0 + 16);
  }
  else
  {
    uint64_t v11 = (void *)swift_task_alloc();
    *(void *)(v0 + 136) = v11;
    *uint64_t v11 = v0;
    v11[1] = sub_10105670C;
    char v12 = *(unsigned char *)(v0 + 153);
    return sub_101267244(v12);
  }
}

uint64_t sub_101056188()
{
  uint64_t v2 = *v1;
  *(void *)(*v1 + 128) = v0;
  swift_task_dealloc();
  if (v0)
  {
    uint64_t v3 = *(void *)(v2 + 72);
    uint64_t v4 = sub_10105668C;
  }
  else
  {
    uint64_t v5 = *(void *)(v2 + 72);
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v2 + 16);
    uint64_t v4 = sub_1010562B0;
    uint64_t v3 = v5;
  }
  return _swift_task_switch(v4, v3, 0);
}

uint64_t sub_1010562B0()
{
  uint64_t v27 = v0;
  uint64_t v1 = *(void *)(v0 + 128);
  sub_101267D7C();
  if (v1)
  {
    (*(void (**)(void, void))(*(void *)(v0 + 88) + 8))(*(void *)(v0 + 104), *(void *)(v0 + 80));
    swift_release();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v21 = *(uint64_t (**)(void))(v0 + 8);
    return v21();
  }
  else
  {
    if (qword_101637630 != -1) {
      swift_once();
    }
    if (qword_101637628 != -1) {
      swift_once();
    }
    uint64_t v3 = *(void *)(v0 + 96);
    uint64_t v2 = *(void *)(v0 + 104);
    uint64_t v5 = *(void *)(v0 + 80);
    uint64_t v4 = *(void *)(v0 + 88);
    uint64_t v6 = type metadata accessor for Logger();
    sub_100010324(v6, (uint64_t)qword_10170F7C8);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v4 + 16))(v3, v2, v5);
    uint64_t v7 = Logger.logObject.getter();
    os_log_type_t v8 = static os_log_type_t.default.getter();
    BOOL v9 = os_log_type_enabled(v7, v8);
    uint64_t v11 = *(void *)(v0 + 88);
    uint64_t v10 = *(void *)(v0 + 96);
    uint64_t v12 = *(void *)(v0 + 80);
    if (v9)
    {
      uint64_t v13 = (uint8_t *)swift_slowAlloc();
      uint64_t v26 = swift_slowAlloc();
      *(_DWORD *)uint64_t v13 = 136315138;
      sub_101058650((unint64_t *)&qword_101649E30, (void (*)(uint64_t))&type metadata accessor for FMNServerInteractionController.FMNResponseFields);
      uint64_t v14 = dispatch thunk of CustomStringConvertible.description.getter();
      *(void *)(v0 + 56) = sub_1008FA0F0(v14, v15, &v26);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      uint64_t v16 = *(void (**)(uint64_t, uint64_t))(v11 + 8);
      v16(v10, v12);
      _os_log_impl((void *)&_mh_execute_header, v7, v8, "Response value is %s", v13, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      uint64_t v16 = *(void (**)(uint64_t, uint64_t))(v11 + 8);
      v16(*(void *)(v0 + 96), *(void *)(v0 + 80));
    }

    uint64_t v17 = FMNServerInteractionController.FMNResponseFields.data.getter();
    unint64_t v19 = v18;
    sub_10105876C();
    dispatch thunk of JSONDecoder.decode<A>(_:from:)();
    uint64_t v20 = *(void *)(v0 + 104);
    uint64_t v23 = *(void *)(v0 + 80);
    swift_release();
    sub_10001CFB8(v17, v19);
    v16(v20, v23);
    uint64_t v24 = *(unsigned __int8 *)(v0 + 152);
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v25 = *(uint64_t (**)(uint64_t))(v0 + 8);
    return v25(v24);
  }
}

uint64_t sub_10105668C()
{
  swift_release();
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v0 + 16);
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_10105670C(uint64_t a1)
{
  uint64_t v2 = *(void *)(*(void *)v1 + 72);
  *(void *)(*(void *)v1 + 144) = a1;
  swift_task_dealloc();
  return _swift_task_switch(sub_101056824, v2, 0);
}

uint64_t sub_101056824()
{
  v0[14] = v0[18];
  uint64_t v1 = (void *)v0[8];
  uint64_t v2 = v1[3];
  uint64_t v3 = v1[4];
  uint64_t v4 = sub_10001CD44(v1, v2);
  v0[5] = v2;
  v0[6] = *(void *)(v3 + 8);
  uint64_t v5 = sub_10001D958(v0 + 2);
  (*(void (**)(uint64_t *, void *, uint64_t))(*(void *)(v2 - 8) + 16))(v5, v4, v2);
  uint64_t v6 = (void *)swift_task_alloc();
  v0[15] = (uint64_t)v6;
  *uint64_t v6 = v0;
  v6[1] = sub_101056188;
  uint64_t v7 = v0[13];
  return sub_100487CFC(v7, (uint64_t)(v0 + 2));
}

uint64_t sub_101056930(uint64_t a1, uint64_t a2, char a3)
{
  *(void *)(v4 + 72) = a2;
  *(void *)(v4 + 80) = v3;
  *(unsigned char *)(v4 + 160) = a3;
  *(void *)(v4 + 64) = a1;
  uint64_t v5 = type metadata accessor for FMNServerInteractionController.FMNResponseFields();
  *(void *)(v4 + 88) = v5;
  *(void *)(v4 + 96) = *(void *)(v5 - 8);
  *(void *)(v4 + 104) = swift_task_alloc();
  *(void *)(v4 + 112) = swift_task_alloc();
  return _swift_task_switch(sub_101056A08, v3, 0);
}

uint64_t sub_101056A08()
{
  uint64_t v1 = *(uint64_t (**)(void))(*(void *)(v0 + 80) + 112);
  if (v1 && (uint64_t v2 = v1()) != 0)
  {
    *(void *)(v0 + 120) = v2;
    uint64_t v3 = *(void **)(v0 + 72);
    uint64_t v4 = v3[3];
    uint64_t v5 = v3[4];
    uint64_t v6 = sub_10001CD44(v3, v4);
    *(void *)(v0 + 40) = v4;
    *(void *)(v0 + 48) = *(void *)(v5 + 8);
    uint64_t v7 = sub_10001D958((uint64_t *)(v0 + 16));
    (*(void (**)(uint64_t *, void *, uint64_t))(*(void *)(v4 - 8) + 16))(v7, v6, v4);
    os_log_type_t v8 = (void *)swift_task_alloc();
    *(void *)(v0 + 128) = v8;
    *os_log_type_t v8 = v0;
    v8[1] = sub_101056BA8;
    uint64_t v9 = *(void *)(v0 + 112);
    return sub_100487CFC(v9, v0 + 16);
  }
  else
  {
    uint64_t v11 = (void *)swift_task_alloc();
    *(void *)(v0 + 144) = v11;
    *uint64_t v11 = v0;
    v11[1] = sub_101057124;
    char v12 = *(unsigned char *)(v0 + 160);
    return sub_101267244(v12);
  }
}

uint64_t sub_101056BA8()
{
  uint64_t v2 = *v1;
  *(void *)(*v1 + 136) = v0;
  swift_task_dealloc();
  if (v0)
  {
    uint64_t v3 = *(void *)(v2 + 80);
    uint64_t v4 = sub_1010570A4;
  }
  else
  {
    uint64_t v5 = *(void *)(v2 + 80);
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v2 + 16);
    uint64_t v4 = sub_101056CD0;
    uint64_t v3 = v5;
  }
  return _swift_task_switch(v4, v3, 0);
}

uint64_t sub_101056CD0()
{
  uint64_t v25 = v0;
  uint64_t v1 = v0[17];
  sub_101267D7C();
  if (v1)
  {
    (*(void (**)(void, void))(v0[12] + 8))(v0[14], v0[11]);
    swift_release();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v21 = (uint64_t (*)(void))v0[1];
  }
  else
  {
    if (qword_101637630 != -1) {
      swift_once();
    }
    if (qword_101637628 != -1) {
      swift_once();
    }
    uint64_t v3 = v0[13];
    uint64_t v2 = v0[14];
    uint64_t v5 = v0[11];
    uint64_t v4 = v0[12];
    uint64_t v6 = type metadata accessor for Logger();
    sub_100010324(v6, (uint64_t)qword_10170F7C8);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v4 + 16))(v3, v2, v5);
    uint64_t v7 = Logger.logObject.getter();
    os_log_type_t v8 = static os_log_type_t.default.getter();
    BOOL v9 = os_log_type_enabled(v7, v8);
    uint64_t v10 = v0[12];
    uint64_t v11 = v0[13];
    uint64_t v12 = v0[11];
    if (v9)
    {
      uint64_t v13 = (uint8_t *)swift_slowAlloc();
      uint64_t v24 = swift_slowAlloc();
      *(_DWORD *)uint64_t v13 = 136315138;
      sub_101058650((unint64_t *)&qword_101649E30, (void (*)(uint64_t))&type metadata accessor for FMNServerInteractionController.FMNResponseFields);
      uint64_t v14 = dispatch thunk of CustomStringConvertible.description.getter();
      v0[7] = sub_1008FA0F0(v14, v15, &v24);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      uint64_t v16 = *(void (**)(uint64_t, uint64_t))(v10 + 8);
      v16(v11, v12);
      _os_log_impl((void *)&_mh_execute_header, v7, v8, "Response value is %s", v13, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      uint64_t v16 = *(void (**)(uint64_t, uint64_t))(v10 + 8);
      v16(v0[13], v0[11]);
    }

    type metadata accessor for KeyDropDelegatedShareMetadataResponse(0);
    uint64_t v17 = FMNServerInteractionController.FMNResponseFields.data.getter();
    unint64_t v19 = v18;
    sub_101058650(&qword_101668380, (void (*)(uint64_t))type metadata accessor for KeyDropDelegatedShareMetadataResponse);
    dispatch thunk of JSONDecoder.decode<A>(_:from:)();
    uint64_t v20 = v0[14];
    uint64_t v23 = v0[11];
    swift_release();
    sub_10001CFB8(v17, v19);
    v16(v20, v23);
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v21 = (uint64_t (*)(void))v0[1];
  }
  return v21();
}

uint64_t sub_1010570A4()
{
  swift_release();
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v0 + 16);
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_101057124(uint64_t a1)
{
  uint64_t v2 = *(void *)(*(void *)v1 + 80);
  *(void *)(*(void *)v1 + 152) = a1;
  swift_task_dealloc();
  return _swift_task_switch(sub_10105723C, v2, 0);
}

uint64_t sub_10105723C()
{
  v0[15] = v0[19];
  uint64_t v1 = (void *)v0[9];
  uint64_t v2 = v1[3];
  uint64_t v3 = v1[4];
  uint64_t v4 = sub_10001CD44(v1, v2);
  v0[5] = v2;
  v0[6] = *(void *)(v3 + 8);
  uint64_t v5 = sub_10001D958(v0 + 2);
  (*(void (**)(uint64_t *, void *, uint64_t))(*(void *)(v2 - 8) + 16))(v5, v4, v2);
  uint64_t v6 = (void *)swift_task_alloc();
  v0[16] = (uint64_t)v6;
  *uint64_t v6 = v0;
  v6[1] = sub_101056BA8;
  uint64_t v7 = v0[14];
  return sub_100487CFC(v7, (uint64_t)(v0 + 2));
}

uint64_t sub_101057348(uint64_t a1, char a2)
{
  *(unsigned char *)(v3 + 153) = a2;
  *(void *)(v3 + 64) = a1;
  *(void *)(v3 + 72) = v2;
  uint64_t v4 = type metadata accessor for FMNServerInteractionController.FMNResponseFields();
  *(void *)(v3 + 80) = v4;
  *(void *)(v3 + 88) = *(void *)(v4 - 8);
  *(void *)(v3 + 96) = swift_task_alloc();
  *(void *)(v3 + 104) = swift_task_alloc();
  return _swift_task_switch(sub_10105741C, v2, 0);
}

uint64_t sub_10105741C()
{
  uint64_t v1 = *(uint64_t (**)(void))(*(void *)(v0 + 72) + 112);
  if (v1 && (uint64_t v2 = v1()) != 0)
  {
    *(void *)(v0 + 112) = v2;
    uint64_t v3 = *(void **)(v0 + 64);
    uint64_t v4 = v3[3];
    uint64_t v5 = v3[4];
    uint64_t v6 = sub_10001CD44(v3, v4);
    *(void *)(v0 + 40) = v4;
    *(void *)(v0 + 48) = *(void *)(v5 + 8);
    uint64_t v7 = sub_10001D958((uint64_t *)(v0 + 16));
    (*(void (**)(uint64_t *, void *, uint64_t))(*(void *)(v4 - 8) + 16))(v7, v6, v4);
    os_log_type_t v8 = (void *)swift_task_alloc();
    *(void *)(v0 + 120) = v8;
    *os_log_type_t v8 = v0;
    v8[1] = sub_1010575BC;
    uint64_t v9 = *(void *)(v0 + 104);
    return sub_100487CFC(v9, v0 + 16);
  }
  else
  {
    uint64_t v11 = (void *)swift_task_alloc();
    *(void *)(v0 + 136) = v11;
    *uint64_t v11 = v0;
    v11[1] = sub_101057A90;
    char v12 = *(unsigned char *)(v0 + 153);
    return sub_101267244(v12);
  }
}

uint64_t sub_1010575BC()
{
  uint64_t v2 = *v1;
  *(void *)(*v1 + 128) = v0;
  swift_task_dealloc();
  if (v0)
  {
    uint64_t v3 = *(void *)(v2 + 72);
    uint64_t v4 = sub_10105A6D8;
  }
  else
  {
    uint64_t v5 = *(void *)(v2 + 72);
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v2 + 16);
    uint64_t v4 = sub_1010576E4;
    uint64_t v3 = v5;
  }
  return _swift_task_switch(v4, v3, 0);
}

uint64_t sub_1010576E4()
{
  uint64_t v27 = v0;
  uint64_t v1 = *(void *)(v0 + 128);
  sub_101267D7C();
  if (v1)
  {
    (*(void (**)(void, void))(*(void *)(v0 + 88) + 8))(*(void *)(v0 + 104), *(void *)(v0 + 80));
    swift_release();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v21 = *(uint64_t (**)(uint64_t))(v0 + 8);
    uint64_t v22 = 0;
  }
  else
  {
    if (qword_101637630 != -1) {
      swift_once();
    }
    if (qword_101637628 != -1) {
      swift_once();
    }
    uint64_t v3 = *(void *)(v0 + 96);
    uint64_t v2 = *(void *)(v0 + 104);
    uint64_t v5 = *(void *)(v0 + 80);
    uint64_t v4 = *(void *)(v0 + 88);
    uint64_t v6 = type metadata accessor for Logger();
    sub_100010324(v6, (uint64_t)qword_10170F7C8);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v4 + 16))(v3, v2, v5);
    uint64_t v7 = Logger.logObject.getter();
    os_log_type_t v8 = static os_log_type_t.default.getter();
    BOOL v9 = os_log_type_enabled(v7, v8);
    uint64_t v11 = *(void *)(v0 + 88);
    uint64_t v10 = *(void *)(v0 + 96);
    uint64_t v12 = *(void *)(v0 + 80);
    if (v9)
    {
      uint64_t v13 = (uint8_t *)swift_slowAlloc();
      uint64_t v26 = swift_slowAlloc();
      *(_DWORD *)uint64_t v13 = 136315138;
      sub_101058650((unint64_t *)&qword_101649E30, (void (*)(uint64_t))&type metadata accessor for FMNServerInteractionController.FMNResponseFields);
      uint64_t v14 = dispatch thunk of CustomStringConvertible.description.getter();
      *(void *)(v0 + 56) = sub_1008FA0F0(v14, v15, &v26);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      uint64_t v16 = *(void (**)(uint64_t, uint64_t))(v11 + 8);
      v16(v10, v12);
      _os_log_impl((void *)&_mh_execute_header, v7, v8, "Response value is %s", v13, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      uint64_t v16 = *(void (**)(uint64_t, uint64_t))(v11 + 8);
      v16(*(void *)(v0 + 96), *(void *)(v0 + 80));
    }

    uint64_t v17 = FMNServerInteractionController.FMNResponseFields.data.getter();
    unint64_t v19 = v18;
    sub_1010587C0();
    dispatch thunk of JSONDecoder.decode<A>(_:from:)();
    uint64_t v20 = *(void *)(v0 + 104);
    uint64_t v24 = *(void *)(v0 + 80);
    swift_release();
    sub_10001CFB8(v17, v19);
    v16(v20, v24);
    uint64_t v25 = *(unsigned __int8 *)(v0 + 152);
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v21 = *(uint64_t (**)(uint64_t))(v0 + 8);
    uint64_t v22 = v25;
  }
  return v21(v22);
}

uint64_t sub_101057A90(uint64_t a1)
{
  uint64_t v2 = *(void *)(*(void *)v1 + 72);
  *(void *)(*(void *)v1 + 144) = a1;
  swift_task_dealloc();
  return _swift_task_switch(sub_101057BA8, v2, 0);
}

uint64_t sub_101057BA8()
{
  v0[14] = v0[18];
  uint64_t v1 = (void *)v0[8];
  uint64_t v2 = v1[3];
  uint64_t v3 = v1[4];
  uint64_t v4 = sub_10001CD44(v1, v2);
  v0[5] = v2;
  v0[6] = *(void *)(v3 + 8);
  uint64_t v5 = sub_10001D958(v0 + 2);
  (*(void (**)(uint64_t *, void *, uint64_t))(*(void *)(v2 - 8) + 16))(v5, v4, v2);
  uint64_t v6 = (void *)swift_task_alloc();
  v0[15] = (uint64_t)v6;
  *uint64_t v6 = v0;
  v6[1] = sub_1010575BC;
  uint64_t v7 = v0[13];
  return sub_100487CFC(v7, (uint64_t)(v0 + 2));
}

uint64_t type metadata accessor for KeyDropCreateRequest.Member(uint64_t a1)
{
  return sub_1000F4EA4(a1, qword_101668490);
}

uint64_t sub_101057CD4(uint64_t a1, uint64_t a2, char a3, uint64_t a4, uint64_t a5)
{
  *(void *)(v5 + 32) = a4;
  *(void *)(v5 + 40) = a5;
  *(unsigned char *)(v5 + 192) = a3;
  *(void *)(v5 + 16) = a1;
  *(void *)(v5 + 24) = a2;
  *(void *)(v5 + 48) = type metadata accessor for KeyDropCreateRequest.KeyDropCreateContent(0);
  *(void *)(v5 + 56) = swift_task_alloc();
  uint64_t v6 = type metadata accessor for JSONEncoder.DateEncodingStrategy();
  *(void *)(v5 + 64) = v6;
  *(void *)(v5 + 72) = *(void *)(v6 - 8);
  *(void *)(v5 + 80) = swift_task_alloc();
  uint64_t v9 = (uint64_t (__cdecl *)())((char *)&dword_101668320 + dword_101668320);
  uint64_t v7 = (void *)swift_task_alloc();
  *(void *)(v5 + 88) = v7;
  *uint64_t v7 = v5;
  v7[1] = sub_101057E0C;
  return v9();
}

uint64_t sub_101057E0C(uint64_t a1)
{
  *(void *)(*(void *)v1 + 96) = a1;
  swift_task_dealloc();
  return _swift_task_switch(sub_101057F0C, 0, 0);
}

uint64_t sub_101057F0C()
{
  uint64_t v2 = *(void *)(v0 + 72);
  uint64_t v1 = *(void **)(v0 + 80);
  uint64_t v3 = *(void *)(v0 + 56);
  uint64_t v4 = *(void *)(v0 + 64);
  uint64_t v5 = *(int **)(v0 + 48);
  uint64_t v6 = *(void *)(v0 + 24);
  uint64_t v20 = *(void *)(v0 + 32);
  uint64_t v21 = *(void *)(v0 + 40);
  char v19 = *(unsigned char *)(v0 + 192);
  uint64_t v7 = *(void *)(v0 + 16);
  type metadata accessor for JSONEncoder();
  swift_allocObject();
  swift_bridgeObjectRetain();
  *(void *)(v0 + 104) = JSONEncoder.init()();
  *uint64_t v1 = sub_1003B9190;
  v1[1] = 0;
  (*(void (**)(void *, void, uint64_t))(v2 + 104))(v1, enum case for JSONEncoder.DateEncodingStrategy.custom(_:), v4);
  dispatch thunk of JSONEncoder.dateEncodingStrategy.setter();
  uint64_t v8 = type metadata accessor for UUID();
  *(void *)(v0 + 112) = v8;
  uint64_t v9 = *(void *)(v8 - 8);
  *(void *)(v0 + 120) = v9;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v9 + 16))(v3, v7, v8);
  uint64_t v10 = v3 + v5[5];
  uint64_t v11 = type metadata accessor for Date();
  *(void *)(v0 + 128) = v11;
  uint64_t v12 = *(void *)(v11 - 8);
  *(void *)(v0 + 136) = v12;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v12 + 16))(v10, v6, v11);
  *(unsigned char *)(v3 + v5[6]) = v19;
  *(void *)(v3 + v5[7]) = v20;
  *(void *)(v3 + v5[8]) = v21;
  sub_101058650(&qword_101668328, (void (*)(uint64_t))type metadata accessor for KeyDropCreateRequest.KeyDropCreateContent);
  uint64_t v13 = dispatch thunk of JSONEncoder.encode<A>(_:)();
  *(void *)(v0 + 144) = v13;
  *(void *)(v0 + 152) = v14;
  uint64_t v15 = v13;
  uint64_t v16 = v14;
  uint64_t v22 = (uint64_t (*)(uint64_t, uint64_t))((char *)&dword_101668330 + dword_101668330);
  uint64_t v17 = (void *)swift_task_alloc();
  *(void *)(v0 + 160) = v17;
  *uint64_t v17 = v0;
  v17[1] = sub_10105826C;
  return v22(v15, v16);
}

uint64_t sub_10105826C(uint64_t a1, uint64_t a2)
{
  uint64_t v6 = *v3;
  *(void *)(*v3 + 168) = v2;
  swift_task_dealloc();
  if (v2)
  {
    swift_bridgeObjectRelease();
    uint64_t v7 = sub_1010584F0;
  }
  else
  {
    *(void *)(v6 + 176) = a2;
    *(void *)(v6 + 184) = a1;
    uint64_t v7 = sub_1010583A8;
  }
  return _swift_task_switch(v7, 0, 0);
}

uint64_t sub_1010583A8()
{
  unint64_t v13 = v0[22];
  uint64_t v14 = v0[23];
  uint64_t v2 = v0[16];
  uint64_t v1 = v0[17];
  uint64_t v4 = v0[14];
  uint64_t v3 = v0[15];
  uint64_t v5 = v0[7];
  uint64_t v6 = v0[2];
  uint64_t v7 = v0[3];
  sub_10001CFB8(v0[18], v0[19]);
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(v1 + 8))(v7, v2);
  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v6, v4);
  sub_10105870C(v5, type metadata accessor for KeyDropCreateRequest.KeyDropCreateContent);
  swift_bridgeObjectRetain();
  sub_1000361E0(v14, v13);
  swift_bridgeObjectRelease_n();
  sub_10001CFB8(v14, v13);
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v8 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))v0[1];
  uint64_t v10 = v0[22];
  uint64_t v9 = v0[23];
  uint64_t v11 = v0[12];
  return v8(v11, v9, v10);
}

uint64_t sub_1010584F0()
{
  sub_10001CFB8(v0[18], v0[19]);
  uint64_t v1 = v0[16];
  uint64_t v2 = v0[17];
  uint64_t v3 = v0[14];
  uint64_t v4 = v0[15];
  uint64_t v5 = v0[7];
  uint64_t v7 = v0[2];
  uint64_t v6 = v0[3];
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v6, v1);
  (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v7, v3);
  sub_10105870C(v5, type metadata accessor for KeyDropCreateRequest.KeyDropCreateContent);
  swift_bridgeObjectRelease();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v8 = (uint64_t (*)(void))v0[1];
  return v8();
}

unint64_t sub_1010585FC()
{
  unint64_t result = qword_101668300;
  if (!qword_101668300)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_101668300);
  }
  return result;
}

uint64_t sub_101058650(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

unint64_t sub_101058698()
{
  unint64_t result = qword_101668310;
  if (!qword_101668310)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, &qword_101668310);
  }
  return result;
}

uint64_t type metadata accessor for KeyDropCreateRequest.KeyDropCreateContent(uint64_t a1)
{
  return sub_1000F4EA4(a1, qword_1016683F0);
}

uint64_t sub_10105870C(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

unint64_t sub_10105876C()
{
  unint64_t result = qword_101668350;
  if (!qword_101668350)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, &qword_101668350);
  }
  return result;
}

unint64_t sub_1010587C0()
{
  unint64_t result = qword_101668390;
  if (!qword_101668390)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_101668390);
  }
  return result;
}

void *sub_101058814(void *a1, void *a2, int *a3)
{
  int v5 = *(_DWORD *)(*((void *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v13 = *a2;
    *a1 = *a2;
    a1 = (void *)(v13 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v7 = type metadata accessor for UUID();
    (*(void (**)(void *, void *, uint64_t))(*(void *)(v7 - 8) + 16))(a1, a2, v7);
    uint64_t v8 = a3[5];
    uint64_t v9 = (char *)a1 + v8;
    uint64_t v10 = (char *)a2 + v8;
    uint64_t v11 = type metadata accessor for Date();
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v11 - 8) + 16))(v9, v10, v11);
    uint64_t v12 = a3[7];
    *((unsigned char *)a1 + a3[6]) = *((unsigned char *)a2 + a3[6]);
    *(void *)((char *)a1 + v12) = *(void *)((char *)a2 + v12);
    *(void *)((char *)a1 + a3[8]) = *(void *)((char *)a2 + a3[8]);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  return a1;
}

uint64_t sub_101058950(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8))(a1, v4);
  uint64_t v5 = a1 + *(int *)(a2 + 20);
  uint64_t v6 = type metadata accessor for Date();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v6 - 8) + 8))(v5, v6);
  swift_bridgeObjectRelease();

  return swift_bridgeObjectRelease();
}

uint64_t sub_101058A18(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 16))(a1, a2, v6);
  uint64_t v7 = a3[5];
  uint64_t v8 = a1 + v7;
  uint64_t v9 = a2 + v7;
  uint64_t v10 = type metadata accessor for Date();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 16))(v8, v9, v10);
  uint64_t v11 = a3[7];
  *(unsigned char *)(a1 + a3[6]) = *(unsigned char *)(a2 + a3[6]);
  *(void *)(a1 + v11) = *(void *)(a2 + v11);
  *(void *)(a1 + a3[8]) = *(void *)(a2 + a3[8]);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t sub_101058B04(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 24))(a1, a2, v6);
  uint64_t v7 = a3[5];
  uint64_t v8 = a1 + v7;
  uint64_t v9 = a2 + v7;
  uint64_t v10 = type metadata accessor for Date();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 24))(v8, v9, v10);
  *(unsigned char *)(a1 + a3[6]) = *(unsigned char *)(a2 + a3[6]);
  *(void *)(a1 + a3[7]) = *(void *)(a2 + a3[7]);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + a3[8]) = *(void *)(a2 + a3[8]);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t sub_101058C08(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 32))(a1, a2, v6);
  uint64_t v7 = a3[5];
  uint64_t v8 = a1 + v7;
  uint64_t v9 = a2 + v7;
  uint64_t v10 = type metadata accessor for Date();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 32))(v8, v9, v10);
  uint64_t v11 = a3[7];
  *(unsigned char *)(a1 + a3[6]) = *(unsigned char *)(a2 + a3[6]);
  *(void *)(a1 + v11) = *(void *)(a2 + v11);
  *(void *)(a1 + a3[8]) = *(void *)(a2 + a3[8]);
  return a1;
}

uint64_t sub_101058CE8(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 40))(a1, a2, v6);
  uint64_t v7 = a3[5];
  uint64_t v8 = a1 + v7;
  uint64_t v9 = a2 + v7;
  uint64_t v10 = type metadata accessor for Date();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 40))(v8, v9, v10);
  uint64_t v11 = a3[7];
  *(unsigned char *)(a1 + a3[6]) = *(unsigned char *)(a2 + a3[6]);
  *(void *)(a1 + v11) = *(void *)(a2 + v11);
  swift_bridgeObjectRelease();
  *(void *)(a1 + a3[8]) = *(void *)(a2 + a3[8]);
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t sub_101058DD8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_101058DEC);
}

uint64_t sub_101058DEC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for UUID();
  uint64_t v7 = *(void *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == a2)
  {
    uint64_t v8 = v6;
    uint64_t v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    uint64_t v10 = a1;
LABEL_5:
    return v9(v10, a2, v8);
  }
  uint64_t v11 = type metadata accessor for Date();
  uint64_t v12 = *(void *)(v11 - 8);
  if (*(_DWORD *)(v12 + 84) == a2)
  {
    uint64_t v8 = v11;
    uint64_t v10 = a1 + *(int *)(a3 + 20);
    uint64_t v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v12 + 48);
    goto LABEL_5;
  }
  unint64_t v14 = *(void *)(a1 + *(int *)(a3 + 28));
  if (v14 >= 0xFFFFFFFF) {
    LODWORD(v14) = -1;
  }
  return (v14 + 1);
}

uint64_t sub_101058F00(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_101058F14);
}

uint64_t sub_101058F14(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v8 = type metadata accessor for UUID();
  uint64_t v9 = *(void *)(v8 - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    uint64_t v10 = v8;
    uint64_t v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    uint64_t v12 = a1;
  }
  else
  {
    uint64_t result = type metadata accessor for Date();
    uint64_t v14 = *(void *)(result - 8);
    if (*(_DWORD *)(v14 + 84) != a3)
    {
      *(void *)(a1 + *(int *)(a4 + 28)) = (a2 - 1);
      return result;
    }
    uint64_t v10 = result;
    uint64_t v12 = a1 + *(int *)(a4 + 20);
    uint64_t v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v14 + 56);
  }

  return v11(v12, a2, a2, v10);
}

uint64_t sub_101059024()
{
  uint64_t result = type metadata accessor for UUID();
  if (v1 <= 0x3F)
  {
    uint64_t result = type metadata accessor for Date();
    if (v2 <= 0x3F)
    {
      swift_initStructMetadata();
      return 0;
    }
  }
  return result;
}

unsigned char *storeEnumTagSinglePayload for KeyDropCreateResponse(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFE)
  {
    unsigned int v6 = ((a2 - 255) >> 8) + 1;
    *uint64_t result = a2 + 1;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1010591D0);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 1;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for KeyDropCreateResponse()
{
  return &type metadata for KeyDropCreateResponse;
}

ValueMetadata *type metadata accessor for KeyDropCreateRequest()
{
  return &type metadata for KeyDropCreateRequest;
}

void *sub_101059218(void *a1, void *a2, int *a3)
{
  int v5 = *(_DWORD *)(*((void *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v17 = *a2;
    *a1 = *a2;
    a1 = (void *)(v17 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v7 = type metadata accessor for UUID();
    (*(void (**)(void *, void *, uint64_t))(*(void *)(v7 - 8) + 16))(a1, a2, v7);
    uint64_t v8 = a3[6];
    *((unsigned char *)a1 + a3[5]) = *((unsigned char *)a2 + a3[5]);
    uint64_t v9 = (void *)((char *)a1 + v8);
    uint64_t v10 = *(void *)((char *)a2 + v8);
    unint64_t v11 = *(void *)((char *)a2 + v8 + 8);
    sub_1000361E0(v10, v11);
    *uint64_t v9 = v10;
    v9[1] = v11;
    uint64_t v12 = a3[7];
    uint64_t v13 = (void *)((char *)a1 + v12);
    uint64_t v14 = (void *)((char *)a2 + v12);
    uint64_t v15 = *v14;
    unint64_t v16 = v14[1];
    sub_1000361E0(*v14, v16);
    *uint64_t v13 = v15;
    v13[1] = v16;
  }
  return a1;
}

uint64_t sub_101059328(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8))(a1, v4);
  sub_10001CFB8(*(void *)(a1 + *(int *)(a2 + 24)), *(void *)(a1 + *(int *)(a2 + 24) + 8));
  int v5 = (uint64_t *)(a1 + *(int *)(a2 + 28));
  uint64_t v6 = *v5;
  unint64_t v7 = v5[1];

  return sub_10001CFB8(v6, v7);
}

uint64_t sub_1010593B0(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 16))(a1, a2, v6);
  uint64_t v7 = a3[6];
  *(unsigned char *)(a1 + a3[5]) = *(unsigned char *)(a2 + a3[5]);
  uint64_t v8 = (uint64_t *)(a1 + v7);
  uint64_t v9 = *(void *)(a2 + v7);
  unint64_t v10 = *(void *)(a2 + v7 + 8);
  sub_1000361E0(v9, v10);
  *uint64_t v8 = v9;
  v8[1] = v10;
  uint64_t v11 = a3[7];
  uint64_t v12 = (uint64_t *)(a1 + v11);
  uint64_t v13 = (uint64_t *)(a2 + v11);
  uint64_t v14 = *v13;
  unint64_t v15 = v13[1];
  sub_1000361E0(*v13, v15);
  *uint64_t v12 = v14;
  v12[1] = v15;
  return a1;
}

uint64_t sub_101059470(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 24))(a1, a2, v6);
  *(unsigned char *)(a1 + a3[5]) = *(unsigned char *)(a2 + a3[5]);
  uint64_t v7 = a3[6];
  uint64_t v8 = (uint64_t *)(a1 + v7);
  uint64_t v9 = (uint64_t *)(a2 + v7);
  uint64_t v10 = *v9;
  unint64_t v11 = v9[1];
  sub_1000361E0(*v9, v11);
  uint64_t v12 = *v8;
  unint64_t v13 = v8[1];
  *uint64_t v8 = v10;
  v8[1] = v11;
  sub_10001CFB8(v12, v13);
  uint64_t v14 = a3[7];
  unint64_t v15 = (uint64_t *)(a1 + v14);
  unint64_t v16 = (uint64_t *)(a2 + v14);
  uint64_t v17 = *v16;
  unint64_t v18 = v16[1];
  sub_1000361E0(*v16, v18);
  uint64_t v19 = *v15;
  unint64_t v20 = v15[1];
  *unint64_t v15 = v17;
  v15[1] = v18;
  sub_10001CFB8(v19, v20);
  return a1;
}

uint64_t sub_101059544(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 32))(a1, a2, v6);
  uint64_t v7 = a3[6];
  *(unsigned char *)(a1 + a3[5]) = *(unsigned char *)(a2 + a3[5]);
  *(_OWORD *)(a1 + v7) = *(_OWORD *)(a2 + v7);
  *(_OWORD *)(a1 + a3[7]) = *(_OWORD *)(a2 + a3[7]);
  return a1;
}

uint64_t sub_1010595D4(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 40))(a1, a2, v6);
  uint64_t v7 = a3[6];
  *(unsigned char *)(a1 + a3[5]) = *(unsigned char *)(a2 + a3[5]);
  uint64_t v8 = *(void *)(a1 + v7);
  unint64_t v9 = *(void *)(a1 + v7 + 8);
  *(_OWORD *)(a1 + v7) = *(_OWORD *)(a2 + v7);
  sub_10001CFB8(v8, v9);
  uint64_t v10 = a3[7];
  uint64_t v11 = *(void *)(a1 + v10);
  unint64_t v12 = *(void *)(a1 + v10 + 8);
  *(_OWORD *)(a1 + v10) = *(_OWORD *)(a2 + v10);
  sub_10001CFB8(v11, v12);
  return a1;
}

uint64_t sub_10105967C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_101059690);
}

uint64_t sub_101059690(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for UUID();
  uint64_t v7 = *(void *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == a2)
  {
    uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    return v8(a1, a2, v6);
  }
  else
  {
    unsigned int v10 = *(unsigned __int8 *)(a1 + *(int *)(a3 + 20));
    if (v10 >= 2) {
      return ((v10 + 2147483646) & 0x7FFFFFFF) + 1;
    }
    else {
      return 0;
    }
  }
}

uint64_t sub_101059760(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_101059774);
}

uint64_t sub_101059774(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result = type metadata accessor for UUID();
  uint64_t v9 = *(void *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    unsigned int v10 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    return v10(a1, a2, a2, result);
  }
  else
  {
    *(unsigned char *)(a1 + *(int *)(a4 + 20)) = a2 + 1;
  }
  return result;
}

uint64_t sub_101059830()
{
  uint64_t result = type metadata accessor for UUID();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

unint64_t sub_1010598D0(uint64_t a1)
{
  unint64_t result = sub_1010598F8();
  *(void *)(a1 + 8) = result;
  return result;
}

unint64_t sub_1010598F8()
{
  unint64_t result = qword_1016684D0;
  if (!qword_1016684D0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1016684D0);
  }
  return result;
}

unint64_t sub_10105994C()
{
  unint64_t result = qword_1016684E0;
  if (!qword_1016684E0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1016684E0);
  }
  return result;
}

unint64_t sub_1010599A0()
{
  unint64_t result = qword_1016684F0;
  if (!qword_1016684F0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1016684F0);
  }
  return result;
}

uint64_t sub_1010599F4(unint64_t *a1, unint64_t *a2)
{
  uint64_t result = *a1;
  if (!result)
  {
    sub_10000592C(&qword_10163FBC0);
    sub_101058650(a2, (void (*)(uint64_t))type metadata accessor for KeyDropInterface.KeyPackage);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_101059A88(unint64_t *a1, unint64_t *a2)
{
  uint64_t result = *a1;
  if (!result)
  {
    sub_10000592C(&qword_1016684F8);
    sub_101058650(a2, (void (*)(uint64_t))type metadata accessor for KeyDropCreateRequest.Member);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_101059B1C(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

unint64_t sub_101059B84()
{
  unint64_t result = qword_101668538;
  if (!qword_101668538)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_101668538);
  }
  return result;
}

unsigned char *storeEnumTagSinglePayload for KeyDropCreateRequest.Member.CodingKeys(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 3 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 3) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFD) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFC)
  {
    unsigned int v6 = ((a2 - 253) >> 8) + 1;
    *unint64_t result = a2 + 3;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x101059CA4);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 3;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for KeyDropCreateRequest.Member.CodingKeys()
{
  return &type metadata for KeyDropCreateRequest.Member.CodingKeys;
}

unsigned char *storeEnumTagSinglePayload for KeyDropCreateRequest.KeyDropCreateContent.CodingKeys(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 4 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 4) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFC) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFB)
  {
    unsigned int v6 = ((a2 - 252) >> 8) + 1;
    *unint64_t result = a2 + 4;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x101059DA8);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 4;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for KeyDropCreateRequest.KeyDropCreateContent.CodingKeys()
{
  return &type metadata for KeyDropCreateRequest.KeyDropCreateContent.CodingKeys;
}

unsigned char *storeEnumTagSinglePayload for KeyDropCreateResponse.CodingKeys(unsigned char *result, int a2, int a3)
{
  if ((a3 + 1) >= 0x10000) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) < 0x100) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2)
  {
    switch(v5)
    {
      case 1:
        *unint64_t result = a2;
        return result;
      case 2:
        *(_WORD *)unint64_t result = a2;
        return result;
      case 3:
        goto LABEL_19;
      case 4:
        *(_DWORD *)unint64_t result = a2;
        return result;
      default:
        return result;
    }
  }
  switch(v5)
  {
    case 1:
      *unint64_t result = 0;
      break;
    case 2:
      *(_WORD *)unint64_t result = 0;
      break;
    case 3:
LABEL_19:
      __break(1u);
      JUMPOUT(0x101059E7CLL);
    case 4:
      *(_DWORD *)unint64_t result = 0;
      break;
    default:
      return result;
  }
  return result;
}

ValueMetadata *type metadata accessor for KeyDropCreateResponse.CodingKeys()
{
  return &type metadata for KeyDropCreateResponse.CodingKeys;
}

unint64_t sub_101059EB8()
{
  unint64_t result = qword_101668548;
  if (!qword_101668548)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_101668548);
  }
  return result;
}

unint64_t sub_101059F10()
{
  unint64_t result = qword_101668550;
  if (!qword_101668550)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_101668550);
  }
  return result;
}

unint64_t sub_101059F68()
{
  unint64_t result = qword_101668558;
  if (!qword_101668558)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_101668558);
  }
  return result;
}

unint64_t sub_101059FC0()
{
  unint64_t result = qword_101668560;
  if (!qword_101668560)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_101668560);
  }
  return result;
}

unint64_t sub_10105A018()
{
  unint64_t result = qword_101668568;
  if (!qword_101668568)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_101668568);
  }
  return result;
}

unint64_t sub_10105A070()
{
  unint64_t result = qword_101668570;
  if (!qword_101668570)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_101668570);
  }
  return result;
}

unint64_t sub_10105A0C8()
{
  unint64_t result = qword_101668578;
  if (!qword_101668578)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_101668578);
  }
  return result;
}

unint64_t sub_10105A120()
{
  unint64_t result = qword_101668580;
  if (!qword_101668580)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_101668580);
  }
  return result;
}

unint64_t sub_10105A178()
{
  unint64_t result = qword_101668588;
  if (!qword_101668588)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_101668588);
  }
  return result;
}

uint64_t sub_10105A1CC(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 0x64496572616873 && a2 == 0xE700000000000000;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x6974617269707865 && a2 == 0xEA00000000006E6FLL {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 1701869940 && a2 == 0xE400000000000000 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else if (a1 == 0x737265626D656DLL && a2 == 0xE700000000000000 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 3;
  }
  else if (a1 == 0x616B63615079656BLL && a2 == 0xEB00000000736567)
  {
    swift_bridgeObjectRelease();
    return 4;
  }
  else
  {
    char v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v6) {
      return 4;
    }
    else {
      return 5;
    }
  }
}

uint64_t sub_10105A400(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 0x64497265626D656DLL && a2 == 0xE800000000000000;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x72656E776FLL && a2 == 0xE500000000000000 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0x654B63696C627570 && a2 == 0xE900000000000079 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else if (a1 == 0x6574707972636E65 && a2 == 0xEE00646C65694664)
  {
    swift_bridgeObjectRelease();
    return 3;
  }
  else
  {
    char v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v6) {
      return 3;
    }
    else {
      return 4;
    }
  }
}

uint64_t sub_10105A5E4()
{
  return sub_1010508CC();
}

uint64_t sub_10105A658()
{
  return sub_10105105C();
}

uint64_t sub_10105A6E0(uint64_t a1, char a2)
{
  *(unsigned char *)(v3 + 384) = a2;
  *(void *)(v3 + 248) = a1;
  *(void *)(v3 + 256) = v2;
  uint64_t v4 = type metadata accessor for UUID();
  *(void *)(v3 + 264) = v4;
  uint64_t v5 = *(void *)(v4 - 8);
  *(void *)(v3 + 272) = v5;
  *(void *)(v3 + 280) = *(void *)(v5 + 64);
  *(void *)(v3 + 288) = swift_task_alloc();
  *(void *)(v3 + 296) = swift_task_alloc();
  return _swift_task_switch(sub_10105A7BC, v2, 0);
}

uint64_t sub_10105A7BC()
{
  if (qword_1016375E8 != -1) {
    swift_once();
  }
  swift_beginAccess();
  uint64_t result = sub_10001D074((uint64_t)&xmmword_10166E8F0, v0 + 96, (uint64_t *)&unk_101638D30);
  if (*(void *)(v0 + 120))
  {
    sub_10001CEB0((long long *)(v0 + 96), v0 + 16);
    sub_10001CD44((void *)(v0 + 16), *(void *)(v0 + 40));
    uint64_t v3 = (uint64_t (__cdecl *)())((char *)&dword_1016390D8 + dword_1016390D8);
    uint64_t v2 = (void *)swift_task_alloc();
    *(void *)(v0 + 304) = v2;
    *uint64_t v2 = v0;
    v2[1] = sub_10105A8F8;
    return v3();
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_10105A8F8(uint64_t a1)
{
  uint64_t v2 = *(void *)(*(void *)v1 + 256);
  *(void *)(*(void *)v1 + 312) = a1;
  swift_task_dealloc();
  return _swift_task_switch(sub_10105AA10, v2, 0);
}

uint64_t sub_10105AA10()
{
  uint64_t v1 = v0[39];
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)(v0 + 2));
  if (v1)
  {
    uint64_t v2 = v0[39];
    return _swift_task_switch(sub_10105AB64, v2, 0);
  }
  else
  {
    type metadata accessor for UpdateBatteryLevelError(0);
    v0[26] = 3;
    sub_1004A0BC8((uint64_t)_swiftEmptyArrayStorage);
    sub_10105E0DC(&qword_1016384D0, 255, type metadata accessor for UpdateBatteryLevelError);
    _BridgedStoredNSError.init(_:userInfo:)();
    swift_willThrow();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v3 = (uint64_t (*)(void))v0[1];
    return v3();
  }
}

uint64_t sub_10105AB64()
{
  uint64_t v1 = v0[39];
  uint64_t v2 = v0[37];
  uint64_t v3 = v0[34];
  uint64_t v4 = v0[33];
  uint64_t v5 = v0[31];
  v0[40] = *(void *)(v1 + 136);
  char v6 = *(void (**)(uint64_t, uint64_t, uint64_t))(v3 + 16);
  v0[41] = v6;
  v0[42] = (v3 + 16) & 0xFFFFFFFFFFFFLL | 0xE3BA000000000000;
  v6(v2, v5, v4);
  unint64_t v7 = (*(unsigned __int8 *)(v3 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  uint64_t v8 = swift_allocObject();
  v0[43] = v8;
  *(void *)(v8 + 16) = v1;
  (*(void (**)(unint64_t, uint64_t, uint64_t))(v3 + 32))(v8 + v7, v2, v4);
  swift_retain();
  return _swift_task_switch(sub_10105AC68, 0, 0);
}

uint64_t sub_10105AC68()
{
  uint64_t v1 = v0[43];
  uint64_t v2 = v0[40];
  uint64_t v3 = (void *)swift_task_alloc();
  v0[44] = v3;
  _OWORD v3[2] = v2;
  v3[3] = sub_10001CDDC;
  v3[4] = v1;
  uint64_t v4 = (void *)swift_task_alloc();
  v0[45] = v4;
  uint64_t v5 = sub_10000588C((uint64_t *)&unk_10163BBE0);
  *uint64_t v4 = v0;
  v4[1] = sub_10105AD84;
  return withCheckedContinuation<A>(isolation:function:_:)(v0 + 7, 0, 0, 0xD000000000000012, 0x80000001013F1870, sub_10001CE50, v3, v5);
}

uint64_t sub_10105AD84()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 256);
  swift_task_dealloc();
  swift_release();
  swift_task_dealloc();
  return _swift_task_switch(sub_10105AED4, v1, 0);
}

uint64_t sub_10105AED4()
{
  uint64_t v21 = v0;
  uint64_t v1 = (long long *)(v0 + 56);
  if (*(void *)(v0 + 80))
  {
    sub_10001CEB0(v1, v0 + 136);
    uint64_t v2 = swift_task_alloc();
    *(void *)(v0 + 368) = v2;
    *(void *)uint64_t v2 = v0;
    *(void *)(v2 + 8) = sub_10105B2B4;
    uint64_t v3 = *(void *)(v0 + 256);
    *(unsigned char *)(v2 + 80) = *(unsigned char *)(v0 + 384);
    *(void *)(v2 + 32) = v0 + 136;
    *(void *)(v2 + 40) = v3;
    return _swift_task_switch(sub_10105B510, v3, 0);
  }
  else
  {
    sub_10001DAB4((uint64_t)v1, (uint64_t *)&unk_10163BBE0);
    if (qword_101636880 != -1) {
      swift_once();
    }
    uint64_t v4 = *(void *)(v0 + 248);
    uint64_t v5 = *(void (**)(uint64_t, uint64_t, uint64_t))(v0 + 328);
    uint64_t v6 = *(void *)(v0 + 288);
    uint64_t v7 = *(void *)(v0 + 264);
    uint64_t v8 = type metadata accessor for Logger();
    sub_100010324(v8, (uint64_t)qword_10170D770);
    v5(v6, v4, v7);
    uint64_t v9 = Logger.logObject.getter();
    os_log_type_t v10 = static os_log_type_t.error.getter();
    BOOL v11 = os_log_type_enabled(v9, v10);
    uint64_t v12 = *(void *)(v0 + 288);
    uint64_t v13 = *(void *)(v0 + 264);
    uint64_t v14 = *(void *)(v0 + 272);
    if (v11)
    {
      uint64_t v15 = swift_slowAlloc();
      uint64_t v20 = swift_slowAlloc();
      *(_DWORD *)uint64_t v15 = 141558275;
      *(void *)(v0 + 232) = 1752392040;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v15 + 12) = 2081;
      sub_10105E0DC((unint64_t *)&qword_101638B10, 255, (void (*)(uint64_t))&type metadata accessor for UUID);
      uint64_t v16 = dispatch thunk of CustomStringConvertible.description.getter();
      *(void *)(v0 + 240) = sub_1008FA0F0(v16, v17, &v20);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      (*(void (**)(uint64_t, uint64_t))(v14 + 8))(v12, v13);
      _os_log_impl((void *)&_mh_execute_header, v9, v10, "updateBatteryLevelAndNotify: No beacon record for %{private,mask.hash}s.", (uint8_t *)v15, 0x16u);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      (*(void (**)(void, void))(v14 + 8))(*(void *)(v0 + 288), *(void *)(v0 + 264));
    }

    type metadata accessor for UpdateBatteryLevelError(0);
    *(void *)(v0 + 224) = 1;
    sub_1004A0BC8((uint64_t)_swiftEmptyArrayStorage);
    sub_10105E0DC(&qword_1016384D0, 255, type metadata accessor for UpdateBatteryLevelError);
    _BridgedStoredNSError.init(_:userInfo:)();
    swift_willThrow();
    swift_release();
    swift_task_dealloc();
    swift_task_dealloc();
    unint64_t v18 = *(uint64_t (**)(void))(v0 + 8);
    return v18();
  }
}

uint64_t sub_10105B2B4()
{
  uint64_t v2 = *v1;
  *(void *)(*v1 + 376) = v0;
  swift_task_dealloc();
  uint64_t v3 = *(void *)(v2 + 256);
  if (v0) {
    uint64_t v4 = sub_10105B46C;
  }
  else {
    uint64_t v4 = sub_10105B3E0;
  }
  return _swift_task_switch(v4, v3, 0);
}

uint64_t sub_10105B3E0()
{
  swift_release();
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v0 + 136);
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_10105B46C()
{
  swift_release();
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v0 + 136);
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_10105B4EC(uint64_t a1, char a2)
{
  *(unsigned char *)(v3 + 80) = a2;
  *(void *)(v3 + 32) = a1;
  *(void *)(v3 + 40) = v2;
  return _swift_task_switch(sub_10105B510, v2, 0);
}

uint64_t sub_10105B510()
{
  uint64_t v1 = *(void **)(v0 + 32);
  uint64_t v2 = v1[3];
  uint64_t v3 = v1[4];
  sub_10001CD44(v1, v2);
  if ((*(uint64_t (**)(uint64_t, uint64_t))(v3 + 112))(v2, v3))
  {
    uint64_t v4 = *(void **)(v0 + 32);
    uint64_t v5 = *(void *)(v0 + 40);
    char v6 = *(unsigned char *)(v0 + 80);
    uint64_t v7 = sub_10105DDEC(v4, v6);
    *(void *)(v0 + 48) = v7;
    uint64_t v9 = sub_10105E0DC(&qword_101668690, v8, (void (*)(uint64_t))type metadata accessor for BatteryLevelService);
    uint64_t v10 = swift_task_alloc();
    *(void *)(v0 + 56) = v10;
    *(void *)(v10 + 16) = v7;
    *(unsigned char *)(v10 + 24) = v6;
    *(void *)(v10 + 32) = v5;
    *(void *)(v10 + 40) = v4;
    BOOL v11 = (void *)swift_task_alloc();
    *(void *)(v0 + 64) = v11;
    *BOOL v11 = v0;
    v11[1] = sub_10105B768;
    return withCheckedThrowingContinuation<A>(isolation:function:_:)(v11, v5, v9, 0xD000000000000036, 0x800000010141F870, sub_10105E268, v10, (char *)&type metadata for () + 8);
  }
  else
  {
    type metadata accessor for UpdateBatteryLevelError(0);
    *(void *)(v0 + 24) = 3;
    sub_1004A0BC8((uint64_t)_swiftEmptyArrayStorage);
    sub_10105E0DC(&qword_1016384D0, 255, type metadata accessor for UpdateBatteryLevelError);
    _BridgedStoredNSError.init(_:userInfo:)();
    swift_willThrow();
    uint64_t v12 = *(uint64_t (**)(void))(v0 + 8);
    return v12();
  }
}

uint64_t sub_10105B768()
{
  uint64_t v2 = *v1;
  *(void *)(*v1 + 72) = v0;
  swift_task_dealloc();
  if (v0)
  {
    uint64_t v3 = *(void *)(v2 + 40);
    uint64_t v4 = sub_10105B890;
  }
  else
  {
    uint64_t v5 = *(void *)(v2 + 40);
    swift_task_dealloc();
    uint64_t v4 = sub_1005093B4;
    uint64_t v3 = v5;
  }
  return _swift_task_switch(v4, v3, 0);
}

uint64_t sub_10105B890()
{
  swift_release();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_10105B8FC(uint64_t a1, uint64_t a2, char a3, uint64_t a4, uint64_t a5)
{
  uint64_t v19 = a4;
  uint64_t v20 = a2;
  uint64_t v18 = a1;
  uint64_t v9 = sub_10000588C((uint64_t *)&unk_1016565A0);
  uint64_t v10 = *(void *)(v9 - 8);
  uint64_t v11 = *(void *)(v10 + 64);
  __chkstk_darwin(v9);
  char v22 = a3;
  sub_10001D010(a5, (uint64_t)v21);
  unint64_t v17 = *(void (**)(char *, uint64_t, uint64_t))(v10 + 16);
  v17((char *)&v17 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0), a1, v9);
  uint64_t v12 = *(unsigned __int8 *)(v10 + 80);
  uint64_t v13 = swift_allocObject();
  *(void *)(v13 + 16) = a4;
  sub_10001CEB0(v21, v13 + 24);
  uint64_t v14 = *(void (**)(uint64_t, char *, uint64_t))(v10 + 32);
  v14(v13 + ((v12 + 64) & ~v12), (char *)&v17 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0), v9);
  v17((char *)&v17 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0), v18, v9);
  uint64_t v15 = swift_allocObject();
  v14(v15 + ((v12 + 16) & ~v12), (char *)&v17 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0), v9);
  swift_retain();
  dispatch thunk of HysteresisFilter.processInput(newValue:outputBlock:ignoreBlock:)();
  swift_release();
  return swift_release();
}

uint64_t sub_10105BB00(char *a1, char *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  *(void *)(v5 + 24) = a5;
  char v7 = *a2;
  char v8 = *a1;
  uint64_t v9 = (void *)swift_task_alloc();
  *(void *)(v5 + 32) = v9;
  *uint64_t v9 = v5;
  v9[1] = sub_10105BBBC;
  return sub_10105BEF0(a4, v8, v7);
}

uint64_t sub_10105BBBC()
{
  *(void *)(*(void *)v1 + 40) = v0;
  swift_task_dealloc();
  if (v0) {
    uint64_t v2 = sub_10105BD40;
  }
  else {
    uint64_t v2 = sub_10105BCD0;
  }
  return _swift_task_switch(v2, 0, 0);
}

uint64_t sub_10105BCD0()
{
  sub_10000588C((uint64_t *)&unk_1016565A0);
  CheckedContinuation.resume(returning:)();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_10105BD40()
{
  v0[2] = v0[5];
  sub_10000588C((uint64_t *)&unk_1016565A0);
  CheckedContinuation.resume(throwing:)();
  uint64_t v1 = (uint64_t (*)(void))v0[1];
  return v1();
}

uint64_t sub_10105BDC0(uint64_t a1)
{
  *(void *)(v1 + 32) = a1;
  return _swift_task_switch(sub_10105BDE0, 0, 0);
}

uint64_t sub_10105BDE0()
{
  type metadata accessor for UpdateBatteryLevelError(0);
  v0[3] = 4;
  sub_1004A0BC8((uint64_t)_swiftEmptyArrayStorage);
  sub_10105E0DC(&qword_1016384D0, 255, type metadata accessor for UpdateBatteryLevelError);
  _BridgedStoredNSError.init(_:userInfo:)();
  v0[3] = v0[2];
  sub_10000588C((uint64_t *)&unk_1016565A0);
  CheckedContinuation.resume(throwing:)();
  uint64_t v1 = (uint64_t (*)(void))v0[1];
  return v1();
}

uint64_t sub_10105BEF0(uint64_t a1, char a2, char a3)
{
  *(unsigned char *)(v4 + 721) = a3;
  *(unsigned char *)(v4 + 720) = a2;
  *(void *)(v4 + 480) = a1;
  *(void *)(v4 + 488) = v3;
  uint64_t v5 = type metadata accessor for BeaconNamingRecord();
  *(void *)(v4 + 496) = v5;
  *(void *)(v4 + 504) = *(void *)(v5 - 8);
  *(void *)(v4 + 512) = swift_task_alloc();
  uint64_t v6 = type metadata accessor for UUID();
  *(void *)(v4 + 520) = v6;
  uint64_t v7 = *(void *)(v6 - 8);
  *(void *)(v4 + 528) = v7;
  *(void *)(v4 + 536) = *(void *)(v7 + 64);
  *(void *)(v4 + 544) = swift_task_alloc();
  *(void *)(v4 + 552) = swift_task_alloc();
  *(void *)(v4 + 560) = swift_task_alloc();
  *(void *)(v4 + 568) = swift_task_alloc();
  *(void *)(v4 + 576) = sub_10000588C(&qword_10163B9E0);
  *(void *)(v4 + 584) = swift_task_alloc();
  *(void *)(v4 + 592) = swift_task_alloc();
  return _swift_task_switch(sub_10105C088, v3, 0);
}

uint64_t sub_10105C088()
{
  uint64_t v19 = v0;
  if (sub_101150878(*(void **)(v0 + 480), *(unsigned char *)(v0 + 720), *(unsigned char *)(v0 + 721)))
  {
    if (qword_1016375E8 != -1) {
      swift_once();
    }
    swift_beginAccess();
    uint64_t result = sub_10001D074((uint64_t)&xmmword_10166E8F0, v0 + 320, (uint64_t *)&unk_101638D30);
    if (*(void *)(v0 + 344))
    {
      sub_10001CEB0((long long *)(v0 + 320), v0 + 280);
      sub_10001CD44((void *)(v0 + 280), *(void *)(v0 + 304));
      unint64_t v17 = (uint64_t (__cdecl *)())((char *)&dword_1016390D8 + dword_1016390D8);
      uint64_t v2 = (void *)swift_task_alloc();
      *(void *)(v0 + 600) = v2;
      *uint64_t v2 = v0;
      v2[1] = sub_10105C4C4;
      return v17();
    }
    else
    {
      __break(1u);
    }
  }
  else
  {
    if (qword_101636880 != -1) {
      swift_once();
    }
    uint64_t v3 = *(void *)(v0 + 480);
    uint64_t v4 = type metadata accessor for Logger();
    sub_100010324(v4, (uint64_t)qword_10170D770);
    sub_10001D010(v3, v0 + 160);
    uint64_t v5 = Logger.logObject.getter();
    os_log_type_t v6 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v5, v6))
    {
      uint64_t v7 = *(void *)(v0 + 568);
      uint64_t v8 = *(void *)(v0 + 528);
      uint64_t v9 = *(void *)(v0 + 520);
      uint64_t v10 = swift_slowAlloc();
      uint64_t v18 = swift_slowAlloc();
      *(_DWORD *)uint64_t v10 = 141558275;
      *(void *)(v0 + 416) = 1752392040;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v10 + 12) = 2081;
      uint64_t v12 = *(void *)(v0 + 184);
      uint64_t v11 = *(void *)(v0 + 192);
      sub_10001CD44((void *)(v0 + 160), v12);
      (*(void (**)(uint64_t))(*(void *)(*(void *)(v11 + 8) + 8) + 32))(v12);
      sub_10105E0DC((unint64_t *)&qword_101638B10, 255, (void (*)(uint64_t))&type metadata accessor for UUID);
      uint64_t v13 = dispatch thunk of CustomStringConvertible.description.getter();
      unint64_t v15 = v14;
      (*(void (**)(uint64_t, uint64_t))(v8 + 8))(v7, v9);
      *(void *)(v0 + 408) = sub_1008FA0F0(v13, v15, &v18);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v0 + 160);
      _os_log_impl((void *)&_mh_execute_header, v5, v6, "Not posting low battery notification for %{private,mask.hash}s.", (uint8_t *)v10, 0x16u);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v0 + 160);
    }

    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v16 = *(uint64_t (**)(void))(v0 + 8);
    return v16();
  }
  return result;
}

uint64_t sub_10105C4C4(uint64_t a1)
{
  uint64_t v2 = *(void *)(*(void *)v1 + 488);
  *(void *)(*(void *)v1 + 608) = a1;
  swift_task_dealloc();
  return _swift_task_switch(sub_10105C5DC, v2, 0);
}

uint64_t sub_10105C5DC()
{
  uint64_t v1 = (uint64_t)(v0 + 35);
  if (v0[76])
  {
    uint64_t v2 = (void *)v0[60];
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v1);
    uint64_t v3 = v2[3];
    uint64_t v4 = v2[4];
    sub_10001CD44(v2, v3);
    (*(void (**)(uint64_t))(*(void *)(*(void *)(v4 + 8) + 8) + 32))(v3);
    uint64_t v5 = v0[76];
    return _swift_task_switch(sub_10105C7C0, v5, 0);
  }
  else
  {
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v1);
    type metadata accessor for UpdateBatteryLevelError(0);
    v0[49] = 3;
    sub_1004A0BC8((uint64_t)_swiftEmptyArrayStorage);
    sub_10105E0DC(&qword_1016384D0, 255, type metadata accessor for UpdateBatteryLevelError);
    _BridgedStoredNSError.init(_:userInfo:)();
    swift_willThrow();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    os_log_type_t v6 = (uint64_t (*)(void))v0[1];
    return v6();
  }
}

uint64_t sub_10105C7C0()
{
  uint64_t v1 = v0[76];
  uint64_t v2 = v0[71];
  uint64_t v3 = v0[70];
  uint64_t v4 = v0[66];
  uint64_t v5 = v0[65];
  v0[77] = *(void *)(v1 + 136);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v4 + 16))(v3, v2, v5);
  unint64_t v6 = (*(unsigned __int8 *)(v4 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
  uint64_t v7 = swift_allocObject();
  v0[78] = v7;
  *(void *)(v7 + 16) = v1;
  (*(void (**)(unint64_t, uint64_t, uint64_t))(v4 + 32))(v7 + v6, v3, v5);
  swift_retain();
  return _swift_task_switch(sub_10105C8BC, 0, 0);
}

uint64_t sub_10105C8BC()
{
  uint64_t v1 = v0[78];
  uint64_t v2 = v0[77];
  uint64_t v3 = (void *)swift_task_alloc();
  v0[79] = v3;
  _OWORD v3[2] = v2;
  v3[3] = sub_10105E128;
  v3[4] = v1;
  uint64_t v4 = (void *)swift_task_alloc();
  v0[80] = v4;
  *uint64_t v4 = v0;
  v4[1] = sub_10105C9C8;
  uint64_t v5 = v0[74];
  uint64_t v6 = v0[72];
  return withCheckedContinuation<A>(isolation:function:_:)(v5, 0, 0, 0xD000000000000012, 0x80000001013F1870, sub_100090CE8, v3, v6);
}

uint64_t sub_10105C9C8()
{
  uint64_t v1 = *(void **)v0;
  uint64_t v2 = *(void *)(*(void *)v0 + 568);
  uint64_t v3 = *(void *)(*(void *)v0 + 528);
  uint64_t v4 = *(void *)(*(void *)v0 + 520);
  swift_task_dealloc();
  swift_release();
  swift_task_dealloc();
  uint64_t v5 = *(void (**)(uint64_t, uint64_t))(v3 + 8);
  v1[81] = v5;
  v1[82] = (v3 + 8) & 0xFFFFFFFFFFFFLL | 0x4F8000000000000;
  v5(v2, v4);
  uint64_t v6 = v1[76];
  return _swift_task_switch(sub_10105CB88, v6, 0);
}

uint64_t sub_10105CB88()
{
  *(void *)(v0 + 664) = *(void *)(*(void *)(v0 + 608) + 136);
  swift_retain();
  return _swift_task_switch(sub_10105CBFC, 0, 0);
}

uint64_t sub_10105CBFC()
{
  uint64_t v1 = v0[83];
  uint64_t v2 = v0[76];
  uint64_t v3 = (void *)swift_task_alloc();
  v0[84] = v3;
  _OWORD v3[2] = v1;
  v3[3] = sub_10001DAA0;
  v3[4] = v2;
  uint64_t v4 = (void *)swift_task_alloc();
  v0[85] = v4;
  uint64_t v5 = type metadata accessor for BeaconKeyManager(0);
  *uint64_t v4 = v0;
  v4[1] = sub_10105CD14;
  return withCheckedContinuation<A>(isolation:function:_:)(v0 + 50, 0, 0, 0xD000000000000012, 0x80000001013F1870, sub_10001DAA8, v3, v5);
}

uint64_t sub_10105CD14()
{
  uint64_t v1 = *v0;
  uint64_t v2 = *(void *)(*v0 + 488);
  swift_task_dealloc();
  swift_release();
  swift_task_dealloc();
  *(void *)(v1 + 688) = *(void *)(v1 + 400);
  return _swift_task_switch(sub_10105CE84, v2, 0);
}

uint64_t sub_10105CE84()
{
  uint64_t v33 = v0;
  if (qword_101636880 != -1) {
    swift_once();
  }
  uint64_t v1 = *(void *)(v0 + 480);
  uint64_t v2 = type metadata accessor for Logger();
  *(void *)(v0 + 696) = sub_100010324(v2, (uint64_t)qword_10170D770);
  sub_10001D010(v1, v0 + 240);
  uint64_t v3 = Logger.logObject.getter();
  os_log_type_t v4 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v3, v4))
  {
    uint64_t v31 = *(void (**)(uint64_t, uint64_t))(v0 + 648);
    uint64_t v5 = *(void *)(v0 + 568);
    uint64_t v6 = *(void *)(v0 + 520);
    uint64_t v7 = *(unsigned __int8 *)(v0 + 720);
    uint64_t v8 = swift_slowAlloc();
    uint64_t v32 = swift_slowAlloc();
    *(_DWORD *)uint64_t v8 = 134218499;
    *(void *)(v0 + 456) = v7;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v8 + 12) = 2160;
    *(void *)(v0 + 464) = 1752392040;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v8 + 22) = 2081;
    uint64_t v10 = *(void *)(v0 + 264);
    uint64_t v9 = *(void *)(v0 + 272);
    sub_10001CD44((void *)(v0 + 240), v10);
    (*(void (**)(uint64_t))(*(void *)(*(void *)(v9 + 8) + 8) + 32))(v10);
    sub_10105E0DC((unint64_t *)&qword_101638B10, 255, (void (*)(uint64_t))&type metadata accessor for UUID);
    uint64_t v11 = dispatch thunk of CustomStringConvertible.description.getter();
    unint64_t v13 = v12;
    v31(v5, v6);
    *(void *)(v0 + 472) = sub_1008FA0F0(v11, v13, &v32);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v0 + 240);
    _os_log_impl((void *)&_mh_execute_header, v3, v4, "updateBatteryLevelAndNotify %ld for %{private,mask.hash}s.", (uint8_t *)v8, 0x20u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v0 + 240);
  }

  uint64_t v14 = *(void *)(v0 + 584);
  uint64_t v15 = *(void *)(v0 + 496);
  uint64_t v16 = *(void *)(v0 + 504);
  sub_10001D074(*(void *)(v0 + 592), v14, &qword_10163B9E0);
  int v17 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v16 + 48))(v14, 1, v15);
  uint64_t v18 = *(void *)(v0 + 584);
  if (v17 == 1)
  {
    uint64_t v19 = *(void **)(v0 + 480);
    sub_10001DAB4(v18, &qword_10163B9E0);
    uint64_t v20 = v19[3];
    uint64_t v21 = v19[4];
    sub_10001CD44(v19, v20);
    (*(void (**)(uint64_t))(*(void *)(*(void *)(v21 + 8) + 8) + 32))(v20);
    uid_t v22 = getuid();
    sub_100DC5FC0(v22);
    return _swift_task_switch(sub_10105D358, 0, 0);
  }
  else
  {
    uint64_t v23 = *(void *)(v0 + 512);
    uint64_t v24 = *(void *)(v0 + 496);
    sub_10105E204(v18, v23);
    uint64_t v25 = (uint64_t *)(v23 + *(int *)(v24 + 32));
    uint64_t v26 = *v25;
    uint64_t v27 = v25[1];
    swift_bridgeObjectRetain();
    sub_100DC0750(v23);
    if (qword_101637118 != -1) {
      swift_once();
    }
    uint64_t v28 = *(void *)(v0 + 592);
    sub_101150B58(*(void *)(v0 + 480), *(unsigned __int8 *)(v0 + 720), v26, v27);
    swift_release();
    swift_release();
    swift_bridgeObjectRelease();
    sub_10001DAB4(v28, &qword_10163B9E0);
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v29 = *(uint64_t (**)(void))(v0 + 8);
    return v29();
  }
}

uint64_t sub_10105D358()
{
  uint64_t v1 = (void *)swift_task_alloc();
  v0[88] = v1;
  *uint64_t v1 = v0;
  v1[1] = sub_10105D40C;
  uint64_t v2 = v0[69];
  uint64_t v3 = v0[68];
  return sub_10064B6F4((uint64_t)(v0 + 11), v2, v3);
}

uint64_t sub_10105D40C()
{
  uint64_t v2 = *(void **)v1;
  *(void *)(*(void *)v1 + 712) = v0;
  swift_task_dealloc();
  if (v0)
  {
    uint64_t v3 = sub_10105D9D8;
    uint64_t v4 = 0;
  }
  else
  {
    uint64_t v5 = (void (*)(uint64_t, uint64_t))v2[81];
    uint64_t v6 = v2[69];
    uint64_t v7 = v2[68];
    uint64_t v8 = v2[65];
    uint64_t v9 = v2[61];
    v5(v7, v8);
    v5(v6, v8);
    uint64_t v3 = sub_10105D564;
    uint64_t v4 = v9;
  }
  return _swift_task_switch(v3, v4, 0);
}

uint64_t sub_10105D564()
{
  uint64_t v19 = v0;
  sub_10105E19C(v0 + 88, v0 + 16);
  uint64_t v1 = *(void *)(v0 + 24);
  if (v1)
  {
    uint64_t v2 = *(void *)(v0 + 16);
    swift_bridgeObjectRetain();
    sub_100090C20((uint64_t *)(v0 + 88));
    if (qword_101637118 != -1) {
      swift_once();
    }
    uint64_t v3 = *(void *)(v0 + 592);
    sub_101150B58(*(void *)(v0 + 480), *(unsigned __int8 *)(v0 + 720), v2, v1);
    swift_release();
    swift_release();
    swift_bridgeObjectRelease();
    sub_10001DAB4(v3, &qword_10163B9E0);
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v4 = *(uint64_t (**)(void))(v0 + 8);
  }
  else
  {
    sub_10001D010(*(void *)(v0 + 480), v0 + 200);
    uint64_t v5 = Logger.logObject.getter();
    os_log_type_t v6 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v5, v6))
    {
      int v17 = *(void (**)(uint64_t, uint64_t))(v0 + 648);
      uint64_t v7 = *(void *)(v0 + 568);
      uint64_t v8 = *(void *)(v0 + 520);
      uint64_t v9 = swift_slowAlloc();
      uint64_t v18 = swift_slowAlloc();
      *(_DWORD *)uint64_t v9 = 141558275;
      *(void *)(v0 + 440) = 1752392040;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v9 + 12) = 2081;
      uint64_t v11 = *(void *)(v0 + 224);
      uint64_t v10 = *(void *)(v0 + 232);
      sub_10001CD44((void *)(v0 + 200), v11);
      (*(void (**)(uint64_t))(*(void *)(*(void *)(v10 + 8) + 8) + 32))(v11);
      sub_10105E0DC((unint64_t *)&qword_101638B10, 255, (void (*)(uint64_t))&type metadata accessor for UUID);
      uint64_t v12 = dispatch thunk of CustomStringConvertible.description.getter();
      unint64_t v14 = v13;
      v17(v7, v8);
      *(void *)(v0 + 448) = sub_1008FA0F0(v12, v14, &v18);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v0 + 200);
      _os_log_impl((void *)&_mh_execute_header, v5, v6, "updateBatteryLevelAndNotify: no name record found for %{private,mask.hash}s.", (uint8_t *)v9, 0x16u);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v0 + 200);
    }

    uint64_t v15 = *(void *)(v0 + 592);
    type metadata accessor for UpdateBatteryLevelError(0);
    *(void *)(v0 + 432) = 2;
    sub_1004A0BC8((uint64_t)_swiftEmptyArrayStorage);
    sub_10105E0DC(&qword_1016384D0, 255, type metadata accessor for UpdateBatteryLevelError);
    _BridgedStoredNSError.init(_:userInfo:)();
    swift_willThrow();
    swift_release();
    swift_release();
    sub_10001DAB4(v15, &qword_10163B9E0);
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v4 = *(uint64_t (**)(void))(v0 + 8);
  }
  return v4();
}

uint64_t sub_10105D9D8()
{
  uint64_t v1 = (void (*)(uint64_t, uint64_t))v0[81];
  uint64_t v2 = v0[69];
  uint64_t v3 = v0[68];
  uint64_t v4 = v0[65];
  uint64_t v5 = v0[61];
  swift_errorRelease();
  v1(v3, v4);
  v1(v2, v4);
  return _swift_task_switch(sub_10105DA80, v5, 0);
}

uint64_t sub_10105DA80()
{
  uint64_t v16 = v0;
  sub_10001D010(v0[60], (uint64_t)(v0 + 25));
  uint64_t v1 = Logger.logObject.getter();
  os_log_type_t v2 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v1, v2))
  {
    unint64_t v14 = (void (*)(uint64_t, uint64_t))v0[81];
    uint64_t v3 = v0[71];
    uint64_t v4 = v0[65];
    uint64_t v5 = swift_slowAlloc();
    uint64_t v15 = swift_slowAlloc();
    *(_DWORD *)uint64_t v5 = 141558275;
    v0[55] = 1752392040;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v5 + 12) = 2081;
    uint64_t v7 = v0[28];
    uint64_t v6 = v0[29];
    sub_10001CD44(v0 + 25, v7);
    (*(void (**)(uint64_t))(*(void *)(*(void *)(v6 + 8) + 8) + 32))(v7);
    sub_10105E0DC((unint64_t *)&qword_101638B10, 255, (void (*)(uint64_t))&type metadata accessor for UUID);
    uint64_t v8 = dispatch thunk of CustomStringConvertible.description.getter();
    unint64_t v10 = v9;
    v14(v3, v4);
    v0[56] = sub_1008FA0F0(v8, v10, &v15);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)(v0 + 25));
    _os_log_impl((void *)&_mh_execute_header, v1, v2, "updateBatteryLevelAndNotify: no name record found for %{private,mask.hash}s.", (uint8_t *)v5, 0x16u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)(v0 + 25));
  }

  uint64_t v11 = v0[74];
  type metadata accessor for UpdateBatteryLevelError(0);
  v0[54] = 2;
  sub_1004A0BC8((uint64_t)_swiftEmptyArrayStorage);
  sub_10105E0DC(&qword_1016384D0, 255, type metadata accessor for UpdateBatteryLevelError);
  _BridgedStoredNSError.init(_:userInfo:)();
  swift_willThrow();
  swift_release();
  swift_release();
  sub_10001DAB4(v11, &qword_10163B9E0);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v12 = (uint64_t (*)(void))v0[1];
  return v12();
}

uint64_t sub_10105DDEC(void *a1, char a2)
{
  uint64_t v3 = v2;
  uint64_t v6 = type metadata accessor for UUID();
  uint64_t v24 = *(void *)(v6 - 8);
  uint64_t v25 = v6;
  uint64_t v7 = __chkstk_darwin(v6);
  uint64_t v23 = (char *)&v23 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v7);
  unint64_t v10 = (char *)&v23 - v9;
  uint64_t v12 = a1[3];
  uint64_t v11 = a1[4];
  sub_10001CD44(a1, v12);
  uint64_t v13 = *(void *)(*(void *)(v11 + 8) + 8);
  unint64_t v14 = *(void (**)(uint64_t, uint64_t))(v13 + 32);
  v14(v12, v13);
  uint64_t v15 = (uint64_t *)(v3 + 128);
  swift_beginAccess();
  uint64_t v16 = *(void *)(v3 + 128);
  if (!*(void *)(v16 + 16)) {
    goto LABEL_5;
  }
  swift_bridgeObjectRetain();
  unint64_t v17 = sub_1007240CC((uint64_t)v10);
  if ((v18 & 1) == 0)
  {
    swift_bridgeObjectRelease();
LABEL_5:
    uint64_t v24 = *(void *)(v24 + 8);
    ((void (*)(char *, uint64_t))v24)(v10, v25);
    sub_10000588C(&qword_101668698);
    char v27 = a2;
    uint64_t v19 = HysteresisFilter.__allocating_init(currentValue:threshold:)();
    uint64_t v20 = (uint64_t)v23;
    v14(v12, v13);
    swift_beginAccess();
    swift_retain();
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v26 = *v15;
    *uint64_t v15 = 0x8000000000000000;
    sub_10016EA90(v19, v20, isUniquelyReferenced_nonNull_native);
    *uint64_t v15 = v26;
    swift_bridgeObjectRelease();
    ((void (*)(uint64_t, uint64_t))v24)(v20, v25);
    swift_endAccess();
    return v19;
  }
  uint64_t v19 = *(void *)(*(void *)(v16 + 56) + 8 * v17);
  swift_retain();
  swift_bridgeObjectRelease();
  (*(void (**)(char *, uint64_t))(v24 + 8))(v10, v25);
  return v19;
}

uint64_t type metadata accessor for BatteryLevelService()
{
  return self;
}

uint64_t sub_10105E084(uint64_t a1, uint64_t a2)
{
  uint64_t result = sub_10105E0DC(&qword_101668690, a2, (void (*)(uint64_t))type metadata accessor for BatteryLevelService);
  *(void *)(a1 + 8) = result;
  return result;
}

uint64_t sub_10105E0DC(unint64_t *a1, uint64_t a2, void (*a3)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a3(a2);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_10105E128()
{
  uint64_t v1 = *(void *)(type metadata accessor for UUID() - 8);
  uint64_t v2 = *(void *)(v0 + 16);
  uint64_t v3 = v0 + ((*(unsigned __int8 *)(v1 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80));

  return sub_100E5F4E8(v2, v3);
}

uint64_t sub_10105E19C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_10000588C(&qword_10163A110);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_10105E204(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for BeaconNamingRecord();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_10105E268(uint64_t a1)
{
  return sub_10105B8FC(a1, *(void *)(v1 + 16), *(unsigned char *)(v1 + 24), *(void *)(v1 + 32), *(void *)(v1 + 40));
}

uint64_t sub_10105E278()
{
  uint64_t v1 = sub_10000588C((uint64_t *)&unk_1016565A0);
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 64) & ~v3;
  uint64_t v5 = v4 + *(void *)(v2 + 64);
  uint64_t v6 = v3 | 7;
  swift_release();
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v0 + 24);
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);

  return _swift_deallocObject(v0, v5, v6);
}

uint64_t sub_10105E350(char *a1, char *a2)
{
  uint64_t v6 = *(void *)(sub_10000588C((uint64_t *)&unk_1016565A0) - 8);
  uint64_t v7 = *(void *)(v2 + 16);
  uint64_t v8 = v2 + 24;
  uint64_t v9 = v2 + ((*(unsigned __int8 *)(v6 + 80) + 64) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80));
  unint64_t v10 = (void *)swift_task_alloc();
  *(void *)(v3 + 16) = v10;
  *unint64_t v10 = v3;
  v10[1] = sub_10001D2E4;
  return sub_10105BB00(a1, a2, v7, v8, v9);
}

uint64_t sub_10105E450()
{
  uint64_t v1 = sub_10000588C((uint64_t *)&unk_1016565A0);
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 16) & ~v3;
  uint64_t v5 = v4 + *(void *)(v2 + 64);
  uint64_t v6 = v3 | 7;
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);

  return _swift_deallocObject(v0, v5, v6);
}

uint64_t sub_10105E4E4()
{
  uint64_t v2 = *(void *)(sub_10000588C((uint64_t *)&unk_1016565A0) - 8);
  uint64_t v3 = v0 + ((*(unsigned __int8 *)(v2 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80));
  uint64_t v4 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v4;
  *uint64_t v4 = v1;
  v4[1] = sub_100033F68;
  v4[4] = v3;
  return _swift_task_switch(sub_10105BDE0, 0, 0);
}

uint64_t sub_10105E5D0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, BOOL *a3@<X8>)
{
  uint64_t v5 = *(void *)(a1 + 32);
  uint64_t v6 = v5 + a2;
  if (__OFADD__(v5, a2))
  {
    __break(1u);
    goto LABEL_5;
  }
  uint64_t v3 = a1;
  *(void *)(a1 + 32) = v6;
  static os_log_type_t.error.getter();
  if (qword_101637460 != -1) {
LABEL_5:
  }
    swift_once();
  sub_10000588C((uint64_t *)&unk_10163AD00);
  uint64_t v7 = swift_allocObject();
  *(_OWORD *)(v7 + 16) = xmmword_101347BA0;
  uint64_t v8 = *(void *)(v3 + 32);
  *(void *)(v7 + 56) = &type metadata for Int;
  *(void *)(v7 + 64) = &protocol witness table for Int;
  *(void *)(v7 + 32) = v8;
  *(void *)(v7 + 96) = &type metadata for Bool;
  *(void *)(v7 + 104) = &protocol witness table for Bool;
  *(unsigned char *)(v7 + 72) = v6 > 2;
  os_log(_:dso:log:_:_:)();
  uint64_t result = swift_bridgeObjectRelease();
  *a3 = v6 > 2;
  return result;
}

uint64_t sub_10105E700(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = type metadata accessor for SystemInfo.DeviceLockState();
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = __chkstk_darwin(v4);
  uint64_t v8 = (char *)v19 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  unint64_t v10 = (char *)v19 - v9;
  static SystemInfo.lockState.getter();
  (*(void (**)(char *, void, uint64_t))(v5 + 104))(v8, enum case for SystemInfo.DeviceLockState.beforeFirstUnlock(_:), v4);
  sub_10105EBEC();
  char v11 = dispatch thunk of static Equatable.== infix(_:_:)();
  uint64_t v12 = *(void (**)(char *, uint64_t))(v5 + 8);
  v12(v8, v4);
  uint64_t v13 = ((uint64_t (*)(char *, uint64_t))v12)(v10, v4);
  if (v11)
  {
    static os_log_type_t.default.getter();
    if (qword_101637460 != -1) {
      swift_once();
    }
    sub_10000588C((uint64_t *)&unk_10163AD00);
    uint64_t v14 = swift_allocObject();
    *(_OWORD *)(v14 + 16) = xmmword_101342130;
    v19[0] = a1;
    swift_errorRetain();
    sub_10000588C(&qword_101638D40);
    uint64_t v15 = String.init<A>(describing:)();
    uint64_t v17 = v16;
    *(void *)(v14 + 56) = &type metadata for String;
    *(void *)(v14 + 64) = sub_10000B4CC();
    *(void *)(v14 + 32) = v15;
    *(void *)(v14 + 40) = v17;
    os_log(_:dso:log:_:_:)();
    return swift_bridgeObjectRelease();
  }
  else
  {
    __chkstk_darwin(v13);
    v19[-2] = v2;
    v19[-1] = 1;
    swift_retain();
    OSAllocatedUnfairLock.callAsFunction<A>(_:)();
    uint64_t result = swift_release();
    if (LOBYTE(v19[0]) == 1)
    {
      v19[0] = 1;
      swift_retain();
      KeyedThrottle.throttle(key:block:)();
      return swift_release();
    }
  }
  return result;
}

uint64_t sub_10105EA00(uint64_t a1)
{
  swift_retain();
  OSAllocatedUnfairLock.callAsFunction<A>(_:)();
  uint64_t v2 = swift_release();
  (*(void (**)(uint64_t))(a1 + 56))(v2);
  return 1;
}

uint64_t sub_10105EA88(uint64_t a1)
{
  static os_log_type_t.error.getter();
  if (qword_101637460 != -1) {
    swift_once();
  }
  sub_10000588C((uint64_t *)&unk_10163AD00);
  uint64_t v2 = swift_allocObject();
  *(_OWORD *)(v2 + 16) = xmmword_101342130;
  uint64_t v3 = *(void *)(a1 + 32);
  *(void *)(v2 + 56) = &type metadata for Int;
  *(void *)(v2 + 64) = &protocol witness table for Int;
  *(void *)(v2 + 32) = v3;
  os_log(_:dso:log:_:_:)();
  uint64_t result = swift_bridgeObjectRelease();
  *(void *)(a1 + 32) = 0;
  return result;
}

uint64_t sub_10105EB78()
{
  swift_release();
  swift_release();
  sub_1000A1534(*(void *)(v0 + 40));
  swift_release();

  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for CryptorRepairTool()
{
  return self;
}

unint64_t sub_10105EBEC()
{
  unint64_t result = qword_1016429C8;
  if (!qword_1016429C8)
  {
    type metadata accessor for SystemInfo.DeviceLockState();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1016429C8);
  }
  return result;
}

uint64_t sub_10105EC44@<X0>(BOOL *a1@<X8>)
{
  return sub_10105E5D0(*(void *)(v1 + 16), *(void *)(v1 + 24), a1);
}

uint64_t sub_10105EC60()
{
  return sub_10105EA00(v0);
}

uint64_t sub_10105EC68()
{
  return sub_10105EA88(v0);
}

ValueMetadata *type metadata accessor for PrimaryKeyResponsePayload()
{
  return &type metadata for PrimaryKeyResponsePayload;
}

uint64_t sub_10105EC94@<X0>(void *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = sub_10105ED44(a1);
  if (!v2)
  {
    *a2 = result;
    a2[1] = v5;
  }
  return result;
}

unint64_t sub_10105ECC0(uint64_t a1)
{
  *(void *)(a1 + 8) = sub_10105ECF0();
  unint64_t result = sub_1005FD14C();
  *(void *)(a1 + 16) = result;
  return result;
}

unint64_t sub_10105ECF0()
{
  unint64_t result = qword_1016687F0;
  if (!qword_1016687F0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1016687F0);
  }
  return result;
}

uint64_t sub_10105ED44(void *a1)
{
  sub_10001CD44(a1, a1[3]);
  dispatch thunk of BinaryDecoding.container()();
  sub_1000BD078((uint64_t)v11, v12);
  uint64_t v3 = dispatch thunk of BinaryDecodingContaining.decode(length:)();
  uint64_t v5 = v3;
  if (v1) {
    goto LABEL_8;
  }
  switch(v4 >> 62)
  {
    case 1uLL:
      LODWORD(v6) = HIDWORD(v3) - v3;
      if (__OFSUB__(HIDWORD(v3), v3))
      {
        __break(1u);
LABEL_10:
        __break(1u);
LABEL_11:
        __break(1u);
        JUMPOUT(0x10105EE54);
      }
      uint64_t v6 = (int)v6;
LABEL_7:
      if (v6 != 28) {
        goto LABEL_11;
      }
LABEL_8:
      _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)v11);
      _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)a1);
      return v5;
    case 2uLL:
      uint64_t v8 = *(void *)(v3 + 16);
      uint64_t v7 = *(void *)(v3 + 24);
      BOOL v9 = __OFSUB__(v7, v8);
      uint64_t v6 = v7 - v8;
      if (!v9) {
        goto LABEL_7;
      }
      goto LABEL_10;
    case 3uLL:
      goto LABEL_11;
    default:
      uint64_t v6 = BYTE6(v4);
      goto LABEL_7;
  }
}

uint64_t destroy for SecureLocationLabel()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for SecureLocationLabel(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v3;
  uint64_t v4 = *(void *)(a2 + 24);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = v4;
  uint64_t v5 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v5;
  long long v6 = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 64) = v6;
  *(void *)(a1 + 80) = *(void *)(a2 + 80);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

void *assignWithCopy for SecureLocationLabel(void *a1, void *a2)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  a1[3] = a2[3];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[4] = a2[4];
  a1[5] = a2[5];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[6] = a2[6];
  a1[7] = a2[7];
  a1[8] = a2[8];
  a1[9] = a2[9];
  a1[10] = a2[10];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t assignWithTake for SecureLocationLabel(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v4;
  swift_bridgeObjectRelease();
  uint64_t v5 = *(void *)(a2 + 24);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = v5;
  swift_bridgeObjectRelease();
  uint64_t v6 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v6;
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  uint64_t v7 = *(void *)(a2 + 80);
  *(void *)(a1 + 72) = *(void *)(a2 + 72);
  *(void *)(a1 + 80) = v7;
  swift_bridgeObjectRelease();
  return a1;
}

ValueMetadata *type metadata accessor for SecureLocationLabel()
{
  return &type metadata for SecureLocationLabel;
}

void sub_10105F070(uint64_t a1@<X8>)
{
  uint64_t v2 = type metadata accessor for URLComponents();
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  uint64_t v5 = (char *)&v43 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  URLComponents.init()();
  URLComponents.scheme.setter();
  id v6 = [objc_allocWithZone((Class)ACAccountStore) init];
  id v7 = [v6 aa_primaryAppleAccount];

  if (!v7)
  {
    if (qword_101637070 != -1) {
      swift_once();
    }
    uint64_t v31 = type metadata accessor for Logger();
    sub_100010324(v31, (uint64_t)qword_10170EC30);
    uint64_t v32 = Logger.logObject.getter();
    os_log_type_t v33 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v32, v33))
    {
      uint64_t v34 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v34 = 0;
      _os_log_impl((void *)&_mh_execute_header, v32, v33, "Unable to get account object to create URL for LabelledLocations", v34, 2u);
      swift_slowDealloc();
    }

    goto LABEL_25;
  }
  id v8 = [objc_allocWithZone((Class)ACAccountStore) init];
  id v9 = [v8 aa_primaryAppleAccount];

  if (!v9)
  {
    __break(1u);
    goto LABEL_41;
  }
  id v10 = [v9 aa_personID];

  if (!v10)
  {
    if (qword_101637070 != -1) {
      swift_once();
    }
    uint64_t v40 = type metadata accessor for Logger();
    sub_100010324(v40, (uint64_t)qword_10170EC30);
    unint64_t v36 = Logger.logObject.getter();
    os_log_type_t v37 = static os_log_type_t.error.getter();
    if (!os_log_type_enabled(v36, v37)) {
      goto LABEL_23;
    }
    uint64_t v38 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v38 = 0;
    uint64_t v39 = "Unable to get dsid to create fmf URL for LabelledLocations";
    goto LABEL_22;
  }
  uint64_t v11 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v13 = v12;

  id v14 = [self currentDevice];
  if (!v14
    || (uint64_t v15 = v14,
        id v16 = [v14 uniqueDeviceIdentifier],
        v15,
        !v16))
  {
    swift_bridgeObjectRelease();
    if (qword_101637070 != -1) {
      swift_once();
    }
    uint64_t v35 = type metadata accessor for Logger();
    sub_100010324(v35, (uint64_t)qword_10170EC30);
    unint64_t v36 = Logger.logObject.getter();
    os_log_type_t v37 = static os_log_type_t.error.getter();
    if (!os_log_type_enabled(v36, v37)) {
      goto LABEL_23;
    }
    uint64_t v38 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v38 = 0;
    uint64_t v39 = "Unable to get device identifier to create request for LabelledLocations";
LABEL_22:
    _os_log_impl((void *)&_mh_execute_header, v36, v37, v39, v38, 2u);
    swift_slowDealloc();
LABEL_23:

LABEL_24:
LABEL_25:
    (*(void (**)(uint64_t, char *, uint64_t))(v3 + 32))(a1, v5, v2);
    return;
  }
  uint64_t v43 = a1;
  uint64_t v44 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  char v18 = v17;

  URLComponents.path.setter();
  uint64_t v19 = (void (*)(unsigned char *, void))URLComponents.path.modify();
  v20._countAndFlagsBits = v11;
  v20._object = v13;
  String.append(_:)(v20);
  swift_bridgeObjectRelease();
  v19(v48, 0);
  uint64_t v21 = (void (*)(unsigned char *, void))URLComponents.path.modify();
  v22._countAndFlagsBits = 47;
  v22._object = (void *)0xE100000000000000;
  String.append(_:)(v22);
  v21(v48, 0);
  uint64_t v23 = (void (*)(unsigned char *, void))URLComponents.path.modify();
  v24._countAndFlagsBits = v44;
  v24._object = v18;
  String.append(_:)(v24);
  swift_bridgeObjectRelease();
  v23(v48, 0);
  uint64_t v25 = (void (*)(unsigned char *, void))URLComponents.path.modify();
  v26._countAndFlagsBits = 0xD000000000000016;
  v26._object = (void *)0x800000010141F9F0;
  String.append(_:)(v26);
  v25(v48, 0);
  id v27 = [v7 dataclassProperties];
  if (v27)
  {
    uint64_t v28 = v27;
    *(void *)&long long v46 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    *((void *)&v46 + 1) = v29;
    swift_bridgeObjectRetain();
    id v30 = [v28 __swift_objectForKeyedSubscript:_bridgeAnythingNonVerbatimToObjectiveC<A>(_:)()];
    swift_unknownObjectRelease();

    if (v30)
    {
      _bridgeAnyObjectToAny(_:)();
      swift_unknownObjectRelease();
    }
    else
    {
      long long v46 = 0u;
      long long v47 = 0u;
    }
    sub_10028DF08((uint64_t)&v46, (uint64_t)v48);
    if (v49)
    {
      sub_10106077C();
      if (swift_dynamicCast())
      {
        uint64_t v41 = v45;
        swift_bridgeObjectRelease();
        *(void *)&long long v46 = 0x6E74736F48707061;
        *((void *)&v46 + 1) = 0xEB00000000656D61;
        id v42 = [v41 __swift_objectForKeyedSubscript:_bridgeAnythingNonVerbatimToObjectiveC<A>(_:)()];
        swift_unknownObjectRelease();
        if (v42)
        {
          _bridgeAnyObjectToAny(_:)();
          swift_unknownObjectRelease();
        }
        else
        {
          long long v46 = 0u;
          long long v47 = 0u;
        }
        sub_10028DF08((uint64_t)&v46, (uint64_t)v48);
        a1 = v43;
        if (!v49)
        {

          sub_100498978((uint64_t)v48);
          goto LABEL_25;
        }
        if (swift_dynamicCast()) {
          URLComponents.host.setter();
        }

        goto LABEL_24;
      }
      swift_bridgeObjectRelease();
    }
    else
    {
      swift_bridgeObjectRelease();

      sub_100498978((uint64_t)v48);
    }
    a1 = v43;
    goto LABEL_25;
  }
LABEL_41:
  __break(1u);
}

uint64_t sub_10105F78C()
{
  uint64_t v0 = type metadata accessor for URL();
  uint64_t v1 = *(void *)(v0 - 8);
  uint64_t v2 = __chkstk_darwin(v0);
  uint64_t v4 = (char *)&v6 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10001E384(v2, qword_10170F150);
  sub_100010324(v0, (uint64_t)qword_10170F150);
  type metadata accessor for BeaconStore(0);
  sub_100A9DB34((uint64_t)v4);
  URL.appendingPathComponent(_:isDirectory:)();
  return (*(uint64_t (**)(char *, uint64_t))(v1 + 8))(v4, v0);
}

uint64_t sub_10105F8A8(void *a1)
{
  uint64_t v3 = sub_10000588C(&qword_101668808);
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  uint64_t v6 = &v8[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)];
  sub_10001CD44(a1, a1[3]);
  sub_101060728();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  v8[15] = 0;
  KeyedEncodingContainer.encode(_:forKey:)();
  if (!v1)
  {
    v8[14] = 1;
    KeyedEncodingContainer.encode(_:forKey:)();
    v8[13] = 2;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
    v8[12] = 3;
    KeyedEncodingContainer.encode(_:forKey:)();
    v8[11] = 4;
    KeyedEncodingContainer.encode(_:forKey:)();
    v8[10] = 5;
    KeyedEncodingContainer.encode(_:forKey:)();
    v8[9] = 6;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
  }
  return (*(uint64_t (**)(unsigned char *, uint64_t))(v4 + 8))(v6, v3);
}

uint64_t sub_10105FAD0(char *a1, char *a2)
{
  return sub_10071D284(*a1, *a2);
}

Swift::Int sub_10105FADC()
{
  return sub_100721454();
}

uint64_t sub_10105FAE8()
{
  String.hash(into:)();

  return swift_bridgeObjectRelease();
}

Swift::Int sub_10105FBEC()
{
  return sub_100721454();
}

unint64_t sub_10105FBF4@<X0>(Swift::String *a1@<X0>, unsigned char *a2@<X8>)
{
  unint64_t result = sub_101060314(*a1);
  *a2 = result;
  return result;
}

void sub_10105FC24(uint64_t *a1@<X8>)
{
  unint64_t v2 = 0xE200000000000000;
  uint64_t v3 = 25705;
  switch(*v1)
  {
    case 1:
      unint64_t v2 = 0xE500000000000000;
      uint64_t v3 = 0x6C6562616CLL;
      goto LABEL_3;
    case 2:
      uint64_t v4 = 0x7079546C6562616CLL;
      goto LABEL_7;
    case 3:
      *a1 = 0x656475746974616CLL;
      a1[1] = 0xE800000000000000;
      return;
    case 4:
      uint64_t v4 = 0x64757469676E6F6CLL;
LABEL_7:
      *a1 = v4;
      a1[1] = 0xE900000000000065;
      break;
    case 5:
      *a1 = 0x7354657461647075;
      a1[1] = 0xE800000000000000;
      break;
    case 6:
      *a1 = 0x644972657375;
      a1[1] = 0xE600000000000000;
      break;
    default:
LABEL_3:
      *a1 = v3;
      a1[1] = v2;
      break;
  }
}

uint64_t sub_10105FD08()
{
  uint64_t result = 25705;
  switch(*v0)
  {
    case 1:
      uint64_t result = 0x6C6562616CLL;
      break;
    case 2:
      uint64_t result = 0x7079546C6562616CLL;
      break;
    case 3:
      uint64_t result = 0x656475746974616CLL;
      break;
    case 4:
      uint64_t result = 0x64757469676E6F6CLL;
      break;
    case 5:
      uint64_t result = 0x7354657461647075;
      break;
    case 6:
      uint64_t result = 0x644972657375;
      break;
    default:
      return result;
  }
  return result;
}

unint64_t sub_10105FDD8@<X0>(Swift::String a1@<X1:X0>, unsigned char *a2@<X8>)
{
  unint64_t result = sub_101060314(a1);
  *a2 = result;
  return result;
}

uint64_t sub_10105FE00(uint64_t a1)
{
  unint64_t v2 = sub_101060728();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_10105FE3C(uint64_t a1)
{
  unint64_t v2 = sub_101060728();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_10105FE78()
{
  uint64_t v0 = String.utf8Data.getter();
  unint64_t v2 = v1;
  sub_1000362FC();
  DataProtocol.stableUUID.getter();
  return sub_10001CFB8(v0, v2);
}

double sub_10105FEE4@<D0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  sub_101060360(a1, (uint64_t *)v7);
  if (!v2)
  {
    long long v5 = v7[3];
    *(_OWORD *)(a2 + 32) = v7[2];
    *(_OWORD *)(a2 + 48) = v5;
    *(_OWORD *)(a2 + 64) = v7[4];
    *(void *)(a2 + 80) = v8;
    double result = *(double *)v7;
    long long v6 = v7[1];
    *(_OWORD *)a2 = v7[0];
    *(_OWORD *)(a2 + 16) = v6;
  }
  return result;
}

uint64_t sub_10105FF40(void *a1)
{
  return sub_10105F8A8(a1);
}

unint64_t sub_10105FF58(uint64_t a1)
{
  *(void *)(a1 + 8) = sub_100E8D550();
  unint64_t result = sub_100DB8D74();
  *(void *)(a1 + 16) = result;
  return result;
}

unint64_t sub_10105FF88()
{
  return 0xD000000000000011;
}

uint64_t sub_10105FFA4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_101060C58(a1, a2);
  *a3 = result & 1;
  return result;
}

uint64_t sub_10105FFD0(uint64_t a1)
{
  unint64_t v2 = sub_101060E58();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_10106000C(uint64_t a1)
{
  unint64_t v2 = sub_101060E58();

  return CodingKey.debugDescription.getter(a1, v2);
}

void *sub_101060048@<X0>(void *a1@<X0>, void *a2@<X8>)
{
  uint64_t result = sub_101060CE0(a1);
  if (!v2) {
    *a2 = result;
  }
  return result;
}

id sub_101060074()
{
  unint64_t v0 = sub_10092D8F8((uint64_t)_swiftEmptyArrayStorage);
  id result = [self currentDevice];
  if (result)
  {
    uint64_t v2 = result;
    id v3 = [result serverFriendlyDescription];

    if (v3)
    {
      uint64_t v4 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      uint64_t v6 = v5;

      char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      sub_10016C0FC(v4, v6, 0xD000000000000011, 0x80000001013F64E0, isUniquelyReferenced_nonNull_native);
    }
    else
    {
      sub_100163690(0xD000000000000011, 0x80000001013F64E0);
    }
    swift_bridgeObjectRelease();
    char v8 = swift_isUniquelyReferenced_nonNull_native();
    sub_10016C0FC(49, 0xE100000000000000, 0x562D747065636341, 0xEE006E6F69737265, v8);
    swift_bridgeObjectRelease();
    char v9 = swift_isUniquelyReferenced_nonNull_native();
    sub_10016C0FC(0xD000000000000010, 0x80000001013F87B0, 0x2D746E65746E6F43, 0xEC00000065707954, v9);
    swift_bridgeObjectRelease();
    char v10 = swift_isUniquelyReferenced_nonNull_native();
    sub_10016C0FC(3157554, 0xE300000000000000, 0xD000000000000014, 0x80000001013F11B0, v10);
    swift_bridgeObjectRelease();
    char v11 = swift_isUniquelyReferenced_nonNull_native();
    sub_10016C0FC(49, 0xE100000000000000, 0xD000000000000013, 0x800000010141F9B0, v11);
    swift_bridgeObjectRelease();
    char v12 = swift_isUniquelyReferenced_nonNull_native();
    sub_10016C0FC(0x72657665726F46, 0xE700000000000000, 0xD000000000000012, 0x80000001013F11D0, v12);
    swift_bridgeObjectRelease();
    return (id)v0;
  }
  else
  {
    __break(1u);
  }
  return result;
}

unint64_t sub_101060314(Swift::String string)
{
  object = string._object;
  v2._countAndFlagsBits = string._countAndFlagsBits;
  v2._object = object;
  unint64_t v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_1015A39D8, v2);
  swift_bridgeObjectRelease();
  if (v3 >= 7) {
    return 7;
  }
  else {
    return v3;
  }
}

uint64_t sub_101060360@<X0>(void *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v5 = sub_10000588C(&qword_1016687F8);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  char v8 = (char *)&v30 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10001CD44(a1, a1[3]);
  sub_101060728();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v2)
  {
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)a1);
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
  else
  {
    char v41 = 0;
    uint64_t v9 = KeyedDecodingContainer.decode(_:forKey:)();
    uint64_t v11 = v10;
    uint64_t v34 = v9;
    char v40 = 1;
    swift_bridgeObjectRetain();
    uint64_t v12 = KeyedDecodingContainer.decode(_:forKey:)();
    uint64_t v14 = v13;
    uint64_t v32 = v12;
    os_log_type_t v33 = a2;
    char v39 = 2;
    swift_bridgeObjectRetain();
    uint64_t v15 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
    uint64_t v17 = v16;
    uint64_t v31 = v15;
    char v38 = 3;
    swift_bridgeObjectRetain();
    KeyedDecodingContainer.decode(_:forKey:)();
    uint64_t v19 = v18;
    char v37 = 4;
    KeyedDecodingContainer.decode(_:forKey:)();
    uint64_t v21 = v20;
    char v36 = 5;
    KeyedDecodingContainer.decode(_:forKey:)();
    uint64_t v23 = v22;
    char v35 = 6;
    uint64_t v24 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
    uint64_t v26 = v25;
    id v27 = *(void (**)(char *, uint64_t))(v6 + 8);
    uint64_t v30 = v24;
    v27(v8, v5);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)a1);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t result = swift_bridgeObjectRelease();
    uint64_t v29 = v33;
    uint64_t *v33 = v34;
    v29[1] = v11;
    v29[2] = v32;
    v29[3] = v14;
    v29[4] = v31;
    v29[5] = v17;
    v29[6] = v19;
    v29[7] = v21;
    v29[8] = v23;
    v29[9] = v30;
    v29[10] = v26;
  }
  return result;
}

unint64_t sub_101060728()
{
  unint64_t result = qword_101668800;
  if (!qword_101668800)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_101668800);
  }
  return result;
}

unint64_t sub_10106077C()
{
  unint64_t result = qword_101656998;
  if (!qword_101656998)
  {
    self;
    unint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&qword_101656998);
  }
  return result;
}

ValueMetadata *type metadata accessor for SecureLocationsLabelledLocationsRequest()
{
  return &type metadata for SecureLocationsLabelledLocationsRequest;
}

ValueMetadata *type metadata accessor for SecureLocationLoadLabelledLocationsResponse()
{
  return &type metadata for SecureLocationLoadLabelledLocationsResponse;
}

uint64_t sub_1010607DC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1010607F0);
}

uint64_t sub_1010607F0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for FMNAccountType();
  uint64_t v7 = *(void *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == a2)
  {
    char v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    return v8(a1, a2, v6);
  }
  else
  {
    uint64_t v10 = type metadata accessor for URLComponents();
    uint64_t v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 48);
    uint64_t v12 = v10;
    uint64_t v13 = a1 + *(int *)(a3 + 20);
    return v11(v13, a2, v12);
  }
}

uint64_t sub_1010608E8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1010608FC);
}

uint64_t sub_1010608FC(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v8 = type metadata accessor for FMNAccountType();
  uint64_t v9 = *(void *)(v8 - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    uint64_t v10 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    return v10(a1, a2, a2, v8);
  }
  else
  {
    uint64_t v12 = type metadata accessor for URLComponents();
    uint64_t v13 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v12 - 8) + 56);
    uint64_t v14 = v12;
    uint64_t v15 = a1 + *(int *)(a4 + 20);
    return v13(v15, a2, a2, v14);
  }
}

uint64_t type metadata accessor for SecureLocationsLabelledLocationsEndpoint()
{
  uint64_t result = qword_101668868;
  if (!qword_101668868) {
    return swift_getSingletonMetadata();
  }
  return result;
}

unsigned char *storeEnumTagSinglePayload for SecureLocationLabel.CodingKeys(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 6 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 6) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFA) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xF9)
  {
    unsigned int v6 = ((a2 - 250) >> 8) + 1;
    *uint64_t result = a2 + 6;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x101060B18);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 6;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for SecureLocationLabel.CodingKeys()
{
  return &type metadata for SecureLocationLabel.CodingKeys;
}

unint64_t sub_101060B54()
{
  unint64_t result = qword_1016688A0;
  if (!qword_1016688A0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1016688A0);
  }
  return result;
}

unint64_t sub_101060BAC()
{
  unint64_t result = qword_1016688A8;
  if (!qword_1016688A8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1016688A8);
  }
  return result;
}

unint64_t sub_101060C04()
{
  unint64_t result = qword_1016688B0;
  if (!qword_1016688B0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1016688B0);
  }
  return result;
}

uint64_t sub_101060C58(uint64_t a1, uint64_t a2)
{
  if (a1 == 0xD000000000000011 && a2 == 0x800000010141FA10)
  {
    swift_bridgeObjectRelease();
    char v2 = 0;
  }
  else
  {
    char v3 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    char v2 = v3 ^ 1;
  }
  return v2 & 1;
}

void *sub_101060CE0(void *a1)
{
  uint64_t v3 = sub_10000588C(&qword_1016688B8);
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  unsigned int v6 = (char *)v9 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = sub_10001CD44(a1, a1[3]);
  sub_101060E58();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v1)
  {
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)a1);
  }
  else
  {
    sub_10000588C(&qword_1016688C8);
    sub_101060EAC();
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
    (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
    uint64_t v7 = (void *)v9[1];
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)a1);
  }
  return v7;
}

unint64_t sub_101060E58()
{
  unint64_t result = qword_1016688C0;
  if (!qword_1016688C0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1016688C0);
  }
  return result;
}

unint64_t sub_101060EAC()
{
  unint64_t result = qword_1016688D0;
  if (!qword_1016688D0)
  {
    sub_10000592C(&qword_1016688C8);
    sub_100E8D550();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1016688D0);
  }
  return result;
}

unsigned char *storeEnumTagSinglePayload for SecureLocationLoadLabelledLocationsResponse.CodingKeys(unsigned char *result, int a2, int a3)
{
  if ((a3 + 1) >= 0x10000) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) < 0x100) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2)
  {
    switch(v5)
    {
      case 1:
        *unint64_t result = a2;
        return result;
      case 2:
        *(_WORD *)unint64_t result = a2;
        return result;
      case 3:
        goto LABEL_19;
      case 4:
        *(_DWORD *)unint64_t result = a2;
        return result;
      default:
        return result;
    }
  }
  switch(v5)
  {
    case 1:
      *unint64_t result = 0;
      break;
    case 2:
      *(_WORD *)unint64_t result = 0;
      break;
    case 3:
LABEL_19:
      __break(1u);
      JUMPOUT(0x101060FBCLL);
    case 4:
      *(_DWORD *)unint64_t result = 0;
      break;
    default:
      return result;
  }
  return result;
}

ValueMetadata *type metadata accessor for SecureLocationLoadLabelledLocationsResponse.CodingKeys()
{
  return &type metadata for SecureLocationLoadLabelledLocationsResponse.CodingKeys;
}

unint64_t sub_101060FF8()
{
  unint64_t result = qword_1016688D8;
  if (!qword_1016688D8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1016688D8);
  }
  return result;
}

unint64_t sub_101061050()
{
  unint64_t result = qword_1016688E0;
  if (!qword_1016688E0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1016688E0);
  }
  return result;
}

unint64_t sub_1010610A8()
{
  unint64_t result = qword_1016688E8;
  if (!qword_1016688E8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1016688E8);
  }
  return result;
}

void sub_1010610FC(char a1, uint64_t a2, uint64_t a3)
{
  if (a2) {
    uint64_t v5 = _convertErrorToNSError(_:)();
  }
  else {
    uint64_t v5 = 0;
  }
  id v6 = (id)v5;
  (*(void (**)(uint64_t, void))(a3 + 16))(a3, a1 & 1);
}

Swift::Int sub_10106116C()
{
  return Hasher._finalize()();
}

uint64_t sub_1010611C4()
{
  return String.hash(into:)();
}

Swift::Int sub_1010611E0()
{
  return Hasher._finalize()();
}

uint64_t sub_101061234@<X0>(Swift::String *a1@<X0>, BOOL *a2@<X8>)
{
  Swift::Int v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_1015A4B28, *a1);
  uint64_t result = swift_bridgeObjectRelease();
  *a2 = v3 != 0;
  return result;
}

void sub_101061288(void *a1@<X8>)
{
  *a1 = 0xD000000000000037;
  a1[1] = 0x80000001013F0CB0;
}

uint64_t sub_1010615AC(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2;
  sub_10001D4B0(0, (unint64_t *)&qword_10163AE70);
  id v6 = (void *)static OS_os_log.default.getter();
  static os_log_type_t.default.getter();
  os_log(_:dso:log:type:_:)();

  sub_10001D010(v3 + OBJC_IVAR____TtC12searchpartydP33_A237235B9060AAA443FA0E26E38E988121FinderStateTrampoline_implementation, (uint64_t)v12);
  uint64_t v7 = v13;
  uint64_t v8 = v14;
  sub_10001CD44(v12, v13);
  uint64_t v9 = swift_allocObject();
  *(void *)(v9 + 16) = a1;
  *(void *)(v9 + 24) = a2;
  uint64_t v10 = *(void (**)(void (*)(void *, char), uint64_t, uint64_t, uint64_t))(v8 + 24);
  swift_retain();
  v10(sub_101063494, v9, v7, v8);
  swift_release();
  return _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)v12);
}

void sub_1010616DC(void *a1, char a2, void (*a3)(id, void *))
{
  if (a2)
  {
    swift_errorRetain();
    id v6 = 0;
    uint64_t v7 = a1;
  }
  else
  {
    id v6 = [a1 state];
    uint64_t v7 = 0;
  }
  a3(v6, v7);

  sub_100173E7C(a1, a2 & 1);
}

void sub_1010617E8(void *a1, char a2, void (*a3)(void *, void *))
{
  if (a2)
  {
    swift_errorRetain();
    id v6 = 0;
    uint64_t v7 = a1;
  }
  else
  {
    id v8 = a1;
    id v6 = a1;
    uint64_t v7 = 0;
  }
  a3(v6, v7);

  sub_100173E7C(a1, a2 & 1);
}

uint64_t sub_101061988(uint64_t a1, uint64_t a2, uint64_t a3)
{
  sub_10001D010(v3 + OBJC_IVAR____TtC12searchpartydP33_A237235B9060AAA443FA0E26E38E988121FinderStateTrampoline_implementation, (uint64_t)v10);
  uint64_t v7 = v11;
  uint64_t v8 = v12;
  sub_10001CD44(v10, v11);
  (*(void (**)(void, uint64_t, uint64_t, uint64_t, uint64_t))(v8 + 32))(((unint64_t)(a1 + 1) > 2) | (6u >> ((a1 + 1) & 7)) & 1, a2, a3, v7, v8);
  return _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)v10);
}

id sub_101061B00()
{
  v2.uint64_t receiver = v0;
  v2.super_class = (Class)type metadata accessor for FinderStateTrampoline();
  return [super dealloc];
}

uint64_t type metadata accessor for FinderStateTrampoline()
{
  return self;
}

id sub_101061B6C()
{
  uint64_t v1 = *(void **)(v0 + 48);
  if (v1)
  {
    id v2 = *(id *)(v0 + 48);
  }
  else
  {
    void v10[3] = type metadata accessor for FinderStateManagerService();
    v10[4] = &off_1016041A8;
    v10[0] = v0;
    uint64_t v3 = (objc_class *)type metadata accessor for FinderStateTrampoline();
    id v4 = objc_allocWithZone(v3);
    sub_10001D010((uint64_t)v10, (uint64_t)v4+ OBJC_IVAR____TtC12searchpartydP33_A237235B9060AAA443FA0E26E38E988121FinderStateTrampoline_implementation);
    v9.uint64_t receiver = v4;
    v9.super_class = v3;
    swift_retain();
    id v5 = [super init];
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)v10);
    id v6 = *(void **)(v0 + 48);
    *(void *)(v0 + 48) = v5;
    id v2 = v5;

    uint64_t v1 = 0;
  }
  id v7 = v1;
  return v2;
}

void *sub_101061C34(uint64_t a1)
{
  v9[0] = a1;
  uint64_t v2 = type metadata accessor for OS_dispatch_queue.Attributes();
  __chkstk_darwin(v2);
  uint64_t v3 = type metadata accessor for DispatchQoS();
  __chkstk_darwin(v3 - 8);
  uint64_t v4 = type metadata accessor for OS_dispatch_queue.AutoreleaseFrequency();
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  id v7 = (char *)v9 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v1[2] = 0xD000000000000019;
  v1[3] = 0x8000000101389940;
  sub_10001D4B0(0, (unint64_t *)&qword_1016376E0);
  (*(void (**)(char *, void, uint64_t))(v5 + 104))(v7, enum case for OS_dispatch_queue.AutoreleaseFrequency.workItem(_:), v4);
  static DispatchQoS.unspecified.getter();
  v9[1] = _swiftEmptyArrayStorage;
  sub_10041ECCC((unint64_t *)&qword_101638CC0, (void (*)(uint64_t))&type metadata accessor for OS_dispatch_queue.Attributes);
  sub_10000588C((uint64_t *)&unk_1016376F0);
  sub_1001BF100((unint64_t *)&qword_101638CD0, (uint64_t *)&unk_1016376F0);
  dispatch thunk of SetAlgebra.init<A>(_:)();
  v1[4] = OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)();
  type metadata accessor for XPCSessionManager();
  swift_allocObject();
  v1[5] = XPCSessionManager.init(name:)();
  v1[6] = 0;
  PressuredExitTransactionManager.init()();
  v1[7] = v9[0];
  return v1;
}

uint64_t sub_101061EF4()
{
  uint64_t v1 = *v0;
  uint64_t v2 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  uint64_t v5 = (char *)v13 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = type metadata accessor for DispatchQoS();
  uint64_t v6 = *(void *)(v14 - 8);
  __chkstk_darwin(v14);
  uint64_t v8 = (char *)v13 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = PressuredExitTransactionManager.begin(_:)();
  v13[1] = v0[4];
  uint64_t v10 = (void *)swift_allocObject();
  v10[2] = v0;
  void v10[3] = v9;
  v10[4] = v1;
  aBlock[4] = sub_1010633E4;
  aBlock[5] = v10;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_1004B5480;
  aBlock[3] = &unk_101604280;
  uint64_t v11 = _Block_copy(aBlock);
  swift_retain();
  swift_retain();
  static DispatchQoS.unspecified.getter();
  uint64_t v15 = _swiftEmptyArrayStorage;
  sub_10041ECCC((unint64_t *)&qword_10163B7E0, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
  sub_10000588C((uint64_t *)&unk_10163F350);
  sub_1001BF100((unint64_t *)&qword_10163B7F0, (uint64_t *)&unk_10163F350);
  dispatch thunk of SetAlgebra.init<A>(_:)();
  OS_dispatch_queue.async(group:qos:flags:execute:)();
  _Block_release(v11);
  swift_release();
  (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
  (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v14);
  return swift_release();
}

uint64_t sub_101062200()
{
  uint64_t v0 = type metadata accessor for MachServiceName();
  __chkstk_darwin(v0 - 8);
  uint64_t v1 = type metadata accessor for XPCServiceDescription();
  uint64_t v2 = *(void *)(v1 - 8);
  __chkstk_darwin(v1);
  uint64_t v4 = (char *)&v7 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  MachServiceName.init(_:)();
  sub_101061B6C();
  if (qword_1016373D0 != -1) {
    swift_once();
  }
  id v5 = (id)qword_1016688F0;
  swift_retain();
  XPCServiceDescription.init(name:options:exportedObject:exportedInterface:shouldAccept:interruptionHandler:invalidationHandler:)();
  XPCSessionManager.register(service:)();
  Transaction.end()();
  return (*(uint64_t (**)(char *, uint64_t))(v2 + 8))(v4, v1);
}

id sub_1010623D8()
{
  id result = [self interfaceWithProtocol:&OBJC_PROTOCOL___SPFinderStateXPCProtocol];
  qword_1016688F0 = (uint64_t)result;
  return result;
}

uint64_t sub_101062428()
{
  swift_bridgeObjectRelease();

  swift_release();
  swift_release();
  uint64_t v1 = v0 + OBJC_IVAR____TtC12searchpartyd25FinderStateManagerService_transactionManager;
  uint64_t v2 = type metadata accessor for PressuredExitTransactionManager();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(v1, v2);

  return swift_deallocClassInstance();
}

uint64_t sub_1010624F0()
{
  return type metadata accessor for FinderStateManagerService();
}

uint64_t type metadata accessor for FinderStateManagerService()
{
  uint64_t result = qword_1016689B8;
  if (!qword_1016689B8) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t sub_101062544()
{
  uint64_t result = type metadata accessor for PressuredExitTransactionManager();
  if (v1 <= 0x3F)
  {
    uint64_t result = swift_updateClassMetadata2();
    if (!result) {
      return 0;
    }
  }
  return result;
}

uint64_t sub_101062608()
{
  return sub_101061EF4();
}

uint64_t sub_10106262C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_10000588C(&qword_10164DBB0);
  __chkstk_darwin(v4 - 8);
  uint64_t v6 = (char *)&v13 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10001D4B0(0, (unint64_t *)&qword_10163AE70);
  uint64_t v7 = (void *)static OS_os_log.default.getter();
  static os_log_type_t.default.getter();
  os_log(_:dso:log:type:_:)();

  uint64_t v8 = swift_allocObject();
  *(void *)(v8 + 16) = a1;
  *(void *)(v8 + 24) = a2;
  swift_retain();
  uint64_t v9 = (void *)static OS_os_log.default.getter();
  static os_log_type_t.default.getter();
  os_log(_:dso:log:type:_:)();

  sub_10027832C(0, 2, 2, (uint64_t)sub_101063294, v8);
  swift_release();
  uint64_t v10 = type metadata accessor for TaskPriority();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 56))(v6, 1, 1, v10);
  uint64_t v11 = swift_allocObject();
  *(void *)(v11 + 16) = 0;
  *(void *)(v11 + 24) = 0;
  sub_1008F5E44((uint64_t)v6, (uint64_t)&unk_101668A98, v11);
  return swift_release();
}

uint64_t sub_101062824()
{
  return _swift_task_switch(sub_101062840, 0, 0);
}

uint64_t sub_101062840()
{
  if (qword_1016375E8 != -1) {
    swift_once();
  }
  swift_beginAccess();
  uint64_t result = sub_1000977C4((uint64_t)&xmmword_10166E8F0, v0 + 56);
  if (*(void *)(v0 + 80))
  {
    sub_10001CEB0((long long *)(v0 + 56), v0 + 16);
    sub_10001CD44((void *)(v0 + 16), *(void *)(v0 + 40));
    uint64_t v3 = (uint64_t (__cdecl *)())((char *)&dword_101639138 + dword_101639138);
    uint64_t v2 = (void *)swift_task_alloc();
    *(void *)(v0 + 128) = v2;
    *uint64_t v2 = v0;
    v2[1] = sub_101062974;
    return v3();
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_101062974(uint64_t a1)
{
  *(void *)(*(void *)v1 + 136) = a1;
  swift_task_dealloc();
  return _swift_task_switch(sub_101062A74, 0, 0);
}

uint64_t sub_101062A74()
{
  uint64_t v1 = v0[17];
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)(v0 + 2));
  if (v1)
  {
    swift_retain();
    uint64_t v2 = (void *)swift_task_alloc();
    v0[18] = v2;
    *uint64_t v2 = v0;
    v2[1] = sub_101062C1C;
    return sub_101103BA8();
  }
  else
  {
    if (qword_1016368D8 != -1) {
      swift_once();
    }
    uint64_t v4 = type metadata accessor for Logger();
    sub_100010324(v4, (uint64_t)qword_10170D7E8);
    uint64_t v5 = Logger.logObject.getter();
    os_log_type_t v6 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v5, v6))
    {
      uint64_t v7 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v7 = 0;
      _os_log_impl((void *)&_mh_execute_header, v5, v6, "Cleared anonymous observations due to Finder turn off.", v7, 2u);
      swift_slowDealloc();
    }

    swift_release();
    uint64_t v8 = (uint64_t (*)(void))v0[1];
    return v8();
  }
}

uint64_t sub_101062C1C()
{
  *(void *)(*(void *)v1 + 152) = v0;
  swift_task_dealloc();
  if (v0)
  {
    uint64_t v2 = sub_101062E58;
  }
  else
  {
    swift_release();
    uint64_t v2 = sub_101062D38;
  }
  return _swift_task_switch(v2, 0, 0);
}

uint64_t sub_101062D38()
{
  if (qword_1016368D8 != -1) {
    swift_once();
  }
  uint64_t v1 = type metadata accessor for Logger();
  sub_100010324(v1, (uint64_t)qword_10170D7E8);
  uint64_t v2 = Logger.logObject.getter();
  os_log_type_t v3 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v2, v3))
  {
    uint64_t v4 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v4 = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, v3, "Cleared anonymous observations due to Finder turn off.", v4, 2u);
    swift_slowDealloc();
  }

  swift_release();
  uint64_t v5 = *(uint64_t (**)(void))(v0 + 8);
  return v5();
}

uint64_t sub_101062E58()
{
  swift_release_n();
  if (qword_1016368D8 != -1) {
    swift_once();
  }
  uint64_t v1 = type metadata accessor for Logger();
  sub_100010324(v1, (uint64_t)qword_10170D7E8);
  swift_errorRetain();
  swift_errorRetain();
  uint64_t v2 = Logger.logObject.getter();
  os_log_type_t v3 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v2, v3))
  {
    uint64_t v4 = (uint8_t *)swift_slowAlloc();
    uint64_t v5 = (void *)swift_slowAlloc();
    *(_DWORD *)uint64_t v4 = 138412290;
    swift_errorRetain();
    uint64_t v6 = _swift_stdlib_bridgeErrorToNSError();
    *(void *)(v0 + 120) = v6;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *uint64_t v5 = v6;
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl((void *)&_mh_execute_header, v2, v3, "Failed to clear observations due to Finder turn off, error: %@.", v4, 0xCu);
    sub_10000588C((uint64_t *)&unk_101638EA0);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    swift_errorRelease();
  }
  else
  {
    swift_errorRelease();
    swift_errorRelease();
    swift_errorRelease();
  }
  uint64_t v7 = *(uint64_t (**)(void))(v0 + 8);
  return v7();
}

uint64_t sub_101063068(uint64_t a1, uint64_t a2)
{
  sub_10001D4B0(0, (unint64_t *)&qword_10163AE70);
  uint64_t v4 = (void *)static OS_os_log.default.getter();
  static os_log_type_t.default.getter();
  os_log(_:dso:log:type:_:)();

  uint64_t v5 = (void *)static OS_os_log.default.getter();
  static os_log_type_t.default.getter();
  os_log(_:dso:log:type:_:)();

  return sub_10027832C(1, 2, 2, a1, a2);
}

uint64_t sub_10106315C(uint64_t a1, uint64_t a2)
{
  return sub_10106262C(a1, a2);
}

uint64_t sub_101063180(void (*a1)(id, void), uint64_t a2)
{
  return sub_100279884(a1, a2);
}

uint64_t sub_1010631A8(char a1, uint64_t a2, uint64_t a3)
{
  int v5 = a1 & 1;
  sub_10001D4B0(0, (unint64_t *)&qword_10163AE70);
  uint64_t v6 = (void *)static OS_os_log.default.getter();
  static os_log_type_t.default.getter();
  os_log(_:dso:log:type:_:)();

  return sub_10027832C(2, 2, v5, a2, a3);
}

uint64_t sub_10106325C()
{
  swift_release();

  return _swift_deallocObject(v0, 32, 7);
}

uint64_t sub_101063294(uint64_t result)
{
  if (result) {
    return (*(uint64_t (**)(void))(v1 + 16))();
  }
  return result;
}

uint64_t sub_1010632C8()
{
  swift_unknownObjectRelease();

  return _swift_deallocObject(v0, 32, 7);
}

uint64_t sub_101063300()
{
  uint64_t v1 = (void *)swift_task_alloc();
  *(void *)(v0 + 16) = v1;
  *uint64_t v1 = v0;
  v1[1] = sub_10001D2E4;
  return _swift_task_switch(sub_101062840, 0, 0);
}

uint64_t sub_1010633A4()
{
  swift_release();
  swift_release();

  return _swift_deallocObject(v0, 40, 7);
}

uint64_t sub_1010633E4()
{
  return sub_101062200();
}

uint64_t sub_1010633F0(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_101063400()
{
  return swift_release();
}

uint64_t sub_101063408()
{
  return NSXPCConnection.hasEntitlement<A>(_:)() & 1;
}

unint64_t sub_101063440()
{
  unint64_t result = qword_101668AA8;
  if (!qword_101668AA8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_101668AA8);
  }
  return result;
}

void sub_101063494(void *a1, char a2)
{
  sub_1010616DC(a1, a2 & 1, *(void (**)(id, void *))(v2 + 16));
}

uint64_t sub_1010634A0()
{
  _Block_release(*(const void **)(v0 + 16));

  return _swift_deallocObject(v0, 24, 7);
}

void sub_1010634D8(void *a1, char a2)
{
  sub_1010617E8(a1, a2 & 1, *(void (**)(void *, void *))(v2 + 16));
}

unsigned char *storeEnumTagSinglePayload for FinderStateEntitlement(unsigned char *result, int a2, int a3)
{
  if ((a3 + 1) >= 0x10000) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) < 0x100) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2)
  {
    switch(v5)
    {
      case 1:
        *unint64_t result = a2;
        return result;
      case 2:
        *(_WORD *)unint64_t result = a2;
        return result;
      case 3:
        goto LABEL_19;
      case 4:
        *(_DWORD *)unint64_t result = a2;
        return result;
      default:
        return result;
    }
  }
  switch(v5)
  {
    case 1:
      *unint64_t result = 0;
      break;
    case 2:
      *(_WORD *)unint64_t result = 0;
      break;
    case 3:
LABEL_19:
      __break(1u);
      JUMPOUT(0x101063580);
    case 4:
      *(_DWORD *)unint64_t result = 0;
      break;
    default:
      return result;
  }
  return result;
}

ValueMetadata *type metadata accessor for FinderStateEntitlement()
{
  return &type metadata for FinderStateEntitlement;
}

unint64_t sub_1010635BC()
{
  unint64_t result = qword_101668AB0;
  if (!qword_101668AB0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_101668AB0);
  }
  return result;
}

unint64_t sub_101063614()
{
  unint64_t result = qword_101668AB8[0];
  if (!qword_101668AB8[0])
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, qword_101668AB8);
  }
  return result;
}

uint64_t sub_101063680()
{
  return swift_initClassMetadata2();
}

uint64_t sub_101063728(uint64_t a1)
{
  uint64_t v3 = *v1;
  uint64_t v4 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v7 = (char *)&v29 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v37 = type metadata accessor for DispatchQoS();
  uint64_t result = __chkstk_darwin(v37);
  uint64_t v11 = (char *)&v29 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (v1[32])
  {
    uint64_t v33 = v1[32];
    uint64_t v34 = v11;
    uint64_t v35 = v9;
    char v36 = v7;
    uint64_t v12 = qword_1016373D8;
    uint64_t v32 = v1[33];
    swift_retain();
    if (v12 != -1) {
      swift_once();
    }
    uint64_t v13 = type metadata accessor for Logger();
    sub_100010324(v13, (uint64_t)qword_10170F168);
    swift_retain_n();
    uint64_t v14 = Logger.logObject.getter();
    os_log_type_t v15 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v14, v15))
    {
      uint64_t v16 = swift_slowAlloc();
      uint64_t v30 = (void *)swift_slowAlloc();
      char v38 = v30;
      aBlock[0] = v3;
      *(_DWORD *)uint64_t v16 = 136315394;
      swift_getMetatypeMetadata();
      uint64_t v31 = v4;
      uint64_t v17 = String.init<A>(describing:)();
      aBlock[0] = sub_1008FA0F0(v17, v18, (uint64_t *)&v38);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      *(_WORD *)(v16 + 12) = 2082;
      uint64_t v19 = sub_10042DBD8();
      uint64_t v20 = v5;
      unint64_t v22 = v21;
      swift_release();
      aBlock[0] = sub_1008FA0F0(v19, v22, (uint64_t *)&v38);
      uint64_t v4 = v31;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_release();
      uint64_t v5 = v20;
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v14, v15, "%s: invalidated %{public}s", (uint8_t *)v16, 0x16u);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {

      swift_release_n();
    }
    uint64_t v23 = (void *)swift_allocObject();
    uint64_t v24 = v32;
    uint64_t v25 = v33;
    v23[2] = v33;
    void v23[3] = v24;
    v23[4] = a1;
    aBlock[4] = sub_1005518DC;
    aBlock[5] = v23;
    aBlock[0] = _NSConcreteStackBlock;
    aBlock[1] = 1107296256;
    aBlock[2] = sub_1004B5480;
    aBlock[3] = &unk_101604608;
    uint64_t v26 = _Block_copy(aBlock);
    sub_1000BD0E8(v25);
    swift_retain();
    id v27 = v34;
    static DispatchQoS.unspecified.getter();
    char v38 = _swiftEmptyArrayStorage;
    sub_10106C0D8((unint64_t *)&qword_10163B7E0, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
    sub_10000588C((uint64_t *)&unk_10163F350);
    sub_10002FE84();
    uint64_t v28 = v36;
    dispatch thunk of SetAlgebra.init<A>(_:)();
    OS_dispatch_queue.async(group:qos:flags:execute:)();
    _Block_release(v26);
    sub_1000A1534(v25);
    (*(void (**)(char *, uint64_t))(v5 + 8))(v28, v4);
    (*(void (**)(char *, uint64_t))(v35 + 8))(v27, v37);
    return swift_release();
  }
  return result;
}

void *sub_101063C0C()
{
  uint64_t v1 = *(void **)(v0 + 64);
  NSString v2 = String._bridgeToObjectiveC()();
  id v8 = 0;
  id v3 = [v1 datagramConnectionForSessionDestination:v2 error:&v8];

  id v4 = v8;
  if (v3)
  {
    type metadata accessor for MessagingDatagramConnection();
    swift_allocObject();
    id v5 = v4;
    return sub_100F455B4(v3);
  }
  else
  {
    id v7 = v8;
    _convertNSErrorToError(_:)();

    return (void *)swift_willThrow();
  }
}

Swift::Int sub_101063D00(uint64_t *a1)
{
  uint64_t v2 = *a1;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    uint64_t v2 = sub_100B73598(v2);
  }
  uint64_t v3 = *(void *)(v2 + 16);
  v5[0] = v2 + 32;
  v5[1] = v3;
  Swift::Int result = sub_10106A804(v5);
  *a1 = v2;
  return result;
}

uint64_t sub_101063D6C(uint64_t a1)
{
  return sub_101063D9C(a1, qword_10170F168);
}

uint64_t sub_101063D80(uint64_t a1)
{
  return sub_101063D9C(a1, qword_10170F180);
}

uint64_t sub_101063D9C(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = type metadata accessor for Logger();
  sub_10001E384(v3, a2);
  sub_100010324(v3, (uint64_t)a2);
  return Logger.init(subsystem:category:)();
}

uint64_t sub_101063E1C()
{
  sub_10000588C((uint64_t *)&unk_101638CE0);
  uint64_t result = swift_allocObject();
  *(_DWORD *)(result + 16) = 0;
  qword_10170F198 = result;
  return result;
}

void sub_101063E54()
{
  qword_10170F1A0 = (uint64_t)&_swiftEmptyDictionarySingleton;
}

uint64_t sub_101063E68@<X0>(void *a1@<X0>, void *a2@<X8>)
{
  if (qword_1016373F0 != -1) {
    swift_once();
  }
  swift_beginAccess();
  uint64_t v4 = qword_10170F1A0;
  if (*(void *)(qword_10170F1A0 + 16))
  {
    id v5 = a1;
    unint64_t v6 = sub_100724A28((uint64_t)v5);
    if (v7)
    {
      id v8 = (uint64_t *)(*(void *)(v4 + 56) + 16 * v6);
      uint64_t v10 = *v8;
      uint64_t v9 = v8[1];
      swift_bridgeObjectRetain();
    }
    else
    {
      uint64_t v10 = 0;
      uint64_t v9 = 0;
    }
  }
  else
  {
    uint64_t v10 = 0;
    uint64_t v9 = 0;
  }
  *a2 = v10;
  a2[1] = v9;
  return swift_endAccess();
}

uint64_t sub_101063F50()
{
  if (qword_1016373E8 != -1) {
    swift_once();
  }
  OSAllocatedUnfairLock.callAsFunction<A>(_:)();
  swift_bridgeObjectRelease();
  swift_release();

  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  swift_release();
  sub_1000A1534(*(void *)(v0 + 144));
  sub_1000A1534(*(void *)(v0 + 160));
  sub_1000A1534(*(void *)(v0 + 176));
  sub_1000A1534(*(void *)(v0 + 192));
  sub_1000A1534(*(void *)(v0 + 208));
  sub_1000A1534(*(void *)(v0 + 224));
  sub_1000A1534(*(void *)(v0 + 240));
  sub_1000A1534(*(void *)(v0 + 256));
  return v0;
}

uint64_t sub_101064080(uint64_t a1)
{
  if (qword_1016373F0 != -1) {
    swift_once();
  }
  uint64_t v2 = *(void **)(a1 + 64);
  swift_beginAccess();
  id v3 = v2;
  sub_100164A70((uint64_t)v3);
  swift_endAccess();

  return swift_bridgeObjectRelease();
}

uint64_t sub_10106412C()
{
  sub_101063F50();

  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for MessagingService()
{
  return swift_getGenericMetadata();
}

uint64_t destroy for MessagingStats()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return swift_bridgeObjectRelease();
}

void *initializeWithCopy for MessagingStats(void *a1, void *a2)
{
  uint64_t v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  uint64_t v4 = a2[3];
  a1[2] = a2[2];
  a1[3] = v4;
  uint64_t v5 = a2[5];
  a1[4] = a2[4];
  a1[5] = v5;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

void *assignWithCopy for MessagingStats(void *a1, void *a2)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[3] = a2[3];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[4] = a2[4];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[5] = a2[5];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t assignWithTake for MessagingStats(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  swift_bridgeObjectRelease();
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  swift_bridgeObjectRelease();
  return a1;
}

ValueMetadata *type metadata accessor for MessagingStats()
{
  return &type metadata for MessagingStats;
}

uint64_t sub_10106436C@<X0>(void *a1@<X0>, void *a2@<X8>)
{
  return sub_101065018(a1, a2);
}

uint64_t sub_101064384()
{
  uint64_t v1 = *(void *)(v0 + 16);
  uint64_t v118 = v1;
  uint64_t v94 = v1 + 64;
  uint64_t v2 = 1 << *(unsigned char *)(v1 + 32);
  uint64_t v3 = -1;
  if (v2 < 64) {
    uint64_t v3 = ~(-1 << v2);
  }
  unint64_t v4 = v3 & *(void *)(v1 + 64);
  int64_t v98 = (unint64_t)(v2 + 63) >> 6;
  uint64_t result = swift_bridgeObjectRetain_n();
  int64_t v6 = 0;
  while (1)
  {
    if (v4)
    {
      unint64_t v7 = __clz(__rbit64(v4));
      v4 &= v4 - 1;
      unint64_t v8 = v7 | (v6 << 6);
      goto LABEL_5;
    }
    int64_t v20 = v6 + 1;
    if (__OFADD__(v6, 1))
    {
      __break(1u);
LABEL_99:
      __break(1u);
LABEL_100:
      __break(1u);
LABEL_101:
      __break(1u);
      goto LABEL_102;
    }
    if (v20 >= v98) {
      goto LABEL_25;
    }
    unint64_t v21 = *(void *)(v94 + 8 * v20);
    ++v6;
    if (!v21)
    {
      int64_t v6 = v20 + 1;
      if (v20 + 1 >= v98) {
        goto LABEL_25;
      }
      unint64_t v21 = *(void *)(v94 + 8 * v6);
      if (!v21)
      {
        int64_t v6 = v20 + 2;
        if (v20 + 2 >= v98) {
          goto LABEL_25;
        }
        unint64_t v21 = *(void *)(v94 + 8 * v6);
        if (!v21)
        {
          int64_t v6 = v20 + 3;
          if (v20 + 3 >= v98) {
            goto LABEL_25;
          }
          unint64_t v21 = *(void *)(v94 + 8 * v6);
          if (!v21)
          {
            int64_t v6 = v20 + 4;
            if (v20 + 4 >= v98) {
              goto LABEL_25;
            }
            unint64_t v21 = *(void *)(v94 + 8 * v6);
            if (!v21) {
              break;
            }
          }
        }
      }
    }
LABEL_24:
    unint64_t v4 = (v21 - 1) & v21;
    unint64_t v8 = __clz(__rbit64(v21)) + (v6 << 6);
LABEL_5:
    uint64_t v9 = *(void *)(*(void *)(v1 + 56) + 16 * v8 + 8);
    uint64_t v99 = dispatch thunk of CustomStringConvertible.description.getter();
    uint64_t v107 = v10;
    v11._countAndFlagsBits = 118;
    v11._object = (void *)0xE100000000000000;
    String.append(_:)(v11);
    v12._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v12);
    swift_bridgeObjectRelease();
    uint64_t v13 = v99;
    uint64_t v14 = v107;
    uint64_t v100 = dispatch thunk of CustomStringConvertible.description.getter();
    uint64_t v108 = v15;
    v16._countAndFlagsBits = 23328;
    v16._object = (void *)0xE200000000000000;
    String.append(_:)(v16);
    uint64_t v117 = v9;
    v17._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v17);
    swift_bridgeObjectRelease();
    v18._countAndFlagsBits = 0x5D736574796220;
    v18._object = (void *)0xE700000000000000;
    String.append(_:)(v18);
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    sub_10016C0FC(v100, v108, v13, v14, isUniquelyReferenced_nonNull_native);
    swift_bridgeObjectRelease();
    uint64_t result = swift_bridgeObjectRelease();
  }
  int64_t v22 = v20 + 5;
  if (v22 < v98)
  {
    unint64_t v21 = *(void *)(v94 + 8 * v22);
    if (!v21)
    {
      while (1)
      {
        int64_t v6 = v22 + 1;
        if (__OFADD__(v22, 1)) {
          break;
        }
        if (v6 >= v98) {
          goto LABEL_25;
        }
        unint64_t v21 = *(void *)(v94 + 8 * v6);
        ++v22;
        if (v21) {
          goto LABEL_24;
        }
      }
LABEL_102:
      __break(1u);
      goto LABEL_103;
    }
    int64_t v6 = v22;
    goto LABEL_24;
  }
LABEL_25:
  swift_release();
  sub_10025C634((uint64_t)&v118);
  uint64_t v23 = v88[3];
  uint64_t v117 = v23;
  uint64_t v92 = v23 + 64;
  uint64_t v24 = 1 << *(unsigned char *)(v23 + 32);
  uint64_t v25 = -1;
  if (v24 < 64) {
    uint64_t v25 = ~(-1 << v24);
  }
  unint64_t v26 = v25 & *(void *)(v23 + 64);
  int64_t v95 = (unint64_t)(v24 + 63) >> 6;
  uint64_t result = swift_bridgeObjectRetain_n();
  int64_t v27 = 0;
  while (2)
  {
    if (v26)
    {
      unint64_t v28 = __clz(__rbit64(v26));
      v26 &= v26 - 1;
      unint64_t v29 = v28 | (v27 << 6);
LABEL_29:
      uint64_t v30 = *(void *)(*(void *)(v23 + 56) + 16 * v29 + 8);
      uint64_t v101 = dispatch thunk of CustomStringConvertible.description.getter();
      uint64_t v109 = v31;
      v32._countAndFlagsBits = 118;
      v32._object = (void *)0xE100000000000000;
      String.append(_:)(v32);
      v33._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
      String.append(_:)(v33);
      swift_bridgeObjectRelease();
      uint64_t v35 = v101;
      uint64_t v34 = v109;
      uint64_t v102 = dispatch thunk of CustomStringConvertible.description.getter();
      uint64_t v110 = v36;
      v37._countAndFlagsBits = 23328;
      v37._object = (void *)0xE200000000000000;
      String.append(_:)(v37);
      uint64_t v116 = v30;
      v38._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
      String.append(_:)(v38);
      swift_bridgeObjectRelease();
      v39._countAndFlagsBits = 0x5D736574796220;
      v39._object = (void *)0xE700000000000000;
      String.append(_:)(v39);
      char v40 = swift_isUniquelyReferenced_nonNull_native();
      sub_10016C0FC(v102, v110, v35, v34, v40);
      swift_bridgeObjectRelease();
      uint64_t result = swift_bridgeObjectRelease();
      continue;
    }
    break;
  }
  int64_t v41 = v27 + 1;
  if (__OFADD__(v27, 1)) {
    goto LABEL_99;
  }
  if (v41 < v95)
  {
    unint64_t v42 = *(void *)(v92 + 8 * v41);
    ++v27;
    if (!v42)
    {
      int64_t v27 = v41 + 1;
      if (v41 + 1 >= v95) {
        goto LABEL_49;
      }
      unint64_t v42 = *(void *)(v92 + 8 * v27);
      if (!v42)
      {
        int64_t v27 = v41 + 2;
        if (v41 + 2 >= v95) {
          goto LABEL_49;
        }
        unint64_t v42 = *(void *)(v92 + 8 * v27);
        if (!v42)
        {
          int64_t v27 = v41 + 3;
          if (v41 + 3 >= v95) {
            goto LABEL_49;
          }
          unint64_t v42 = *(void *)(v92 + 8 * v27);
          if (!v42)
          {
            int64_t v27 = v41 + 4;
            if (v41 + 4 >= v95) {
              goto LABEL_49;
            }
            unint64_t v42 = *(void *)(v92 + 8 * v27);
            if (!v42)
            {
              int64_t v43 = v41 + 5;
              if (v43 >= v95) {
                goto LABEL_49;
              }
              unint64_t v42 = *(void *)(v92 + 8 * v43);
              if (!v42)
              {
                while (1)
                {
                  int64_t v27 = v43 + 1;
                  if (__OFADD__(v43, 1)) {
                    break;
                  }
                  if (v27 >= v95) {
                    goto LABEL_49;
                  }
                  unint64_t v42 = *(void *)(v92 + 8 * v27);
                  ++v43;
                  if (v42) {
                    goto LABEL_48;
                  }
                }
LABEL_103:
                __break(1u);
                goto LABEL_104;
              }
              int64_t v27 = v43;
            }
          }
        }
      }
    }
LABEL_48:
    unint64_t v26 = (v42 - 1) & v42;
    unint64_t v29 = __clz(__rbit64(v42)) + (v27 << 6);
    goto LABEL_29;
  }
LABEL_49:
  swift_release();
  sub_10025C634((uint64_t)&v117);
  uint64_t v44 = v88[4];
  uint64_t v116 = v44;
  uint64_t v91 = v44 + 64;
  uint64_t v45 = 1 << *(unsigned char *)(v44 + 32);
  uint64_t v46 = -1;
  if (v45 < 64) {
    uint64_t v46 = ~(-1 << v45);
  }
  unint64_t v47 = v46 & *(void *)(v44 + 64);
  int64_t v93 = (unint64_t)(v45 + 63) >> 6;
  uint64_t v96 = v44;
  uint64_t result = swift_bridgeObjectRetain_n();
  int64_t v48 = 0;
  while (2)
  {
    if (v47)
    {
      unint64_t v49 = __clz(__rbit64(v47));
      v47 &= v47 - 1;
      unint64_t v50 = v49 | (v48 << 6);
LABEL_53:
      uint64_t v51 = *(void *)(*(void *)(v96 + 56) + 16 * v50 + 8);
      uint64_t v103 = dispatch thunk of CustomStringConvertible.description.getter();
      uint64_t v111 = v52;
      v53._countAndFlagsBits = 118;
      v53._object = (void *)0xE100000000000000;
      String.append(_:)(v53);
      v54._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
      String.append(_:)(v54);
      swift_bridgeObjectRelease();
      uint64_t v56 = v103;
      uint64_t v55 = v111;
      uint64_t v104 = dispatch thunk of CustomStringConvertible.description.getter();
      uint64_t v112 = v57;
      v58._countAndFlagsBits = 23328;
      v58._object = (void *)0xE200000000000000;
      String.append(_:)(v58);
      uint64_t v115 = v51;
      v59._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
      String.append(_:)(v59);
      swift_bridgeObjectRelease();
      v60._countAndFlagsBits = 0x5D736574796220;
      v60._object = (void *)0xE700000000000000;
      String.append(_:)(v60);
      char v61 = swift_isUniquelyReferenced_nonNull_native();
      sub_10016C0FC(v104, v112, v56, v55, v61);
      swift_bridgeObjectRelease();
      uint64_t result = swift_bridgeObjectRelease();
      continue;
    }
    break;
  }
  int64_t v62 = v48 + 1;
  if (__OFADD__(v48, 1)) {
    goto LABEL_100;
  }
  if (v62 >= v93)
  {
LABEL_73:
    swift_release();
    sub_10025C634((uint64_t)&v116);
    uint64_t v65 = v88[5];
    uint64_t v115 = v65;
    uint64_t v89 = v65 + 64;
    uint64_t v66 = 1 << *(unsigned char *)(v65 + 32);
    uint64_t v67 = -1;
    if (v66 < 64) {
      uint64_t v67 = ~(-1 << v66);
    }
    uint64_t v68 = v67 & *(void *)(v65 + 64);
    int64_t v90 = (unint64_t)(v66 + 63) >> 6;
    uint64_t result = swift_bridgeObjectRetain_n();
    for (int64_t i = 0; ; int64_t i = v97)
    {
      if (v68)
      {
        v68 &= v68 - 1;
        int64_t v97 = i;
      }
      else
      {
        int64_t v80 = i + 1;
        if (__OFADD__(i, 1)) {
          goto LABEL_101;
        }
        if (v80 >= v90)
        {
LABEL_97:
          swift_release();
          sub_10025C634((uint64_t)&v115);
          sub_10000588C(&qword_101668B48);
          uint64_t v84 = swift_allocObject();
          *(_OWORD *)(v84 + 16) = xmmword_10134CDE0;
          *(void *)(v84 + 32) = 0x4E65636976726573;
          *(void *)(v84 + 40) = 0xEB00000000656D61;
          uint64_t v85 = *v88;
          uint64_t v86 = v88[1];
          *(void *)(v84 + 56) = &type metadata for String;
          *(void *)(v84 + 64) = v85;
          *(void *)(v84 + 72) = v86;
          *(void *)(v84 + 120) = &type metadata for String;
          *(void *)(v84 + 88) = &type metadata for String;
          *(void *)(v84 + 96) = 1953391987;
          *(void *)(v84 + 104) = 0xE400000000000000;
          uint64_t v87 = sub_10000588C(&qword_10163BD60);
          *(void *)(v84 + 128) = _swiftEmptyDictionarySingleton;
          *(void *)(v84 + 152) = v87;
          strcpy((char *)(v84 + 160), "sentResource");
          *(unsigned char *)(v84 + 173) = 0;
          *(_WORD *)(v84 + 174) = -5120;
          *(void *)(v84 + 184) = &type metadata for String;
          *(void *)(v84 + 192) = _swiftEmptyDictionarySingleton;
          *(void *)(v84 + 216) = v87;
          *(void *)(v84 + 224) = 0x6465766965636572;
          *(void *)(v84 + 232) = 0xE800000000000000;
          *(void *)(v84 + 248) = &type metadata for String;
          *(void *)(v84 + 256) = _swiftEmptyDictionarySingleton;
          *(void *)(v84 + 280) = v87;
          *(void *)(v84 + 288) = 0xD000000000000010;
          *(void *)(v84 + 296) = 0x800000010141FE80;
          *(void *)(v84 + 344) = v87;
          *(void *)(v84 + 312) = &type metadata for String;
          *(void *)(v84 + 320) = _swiftEmptyDictionarySingleton;
          sub_10106077C();
          swift_bridgeObjectRetain();
          return NSDictionary.init(dictionaryLiteral:)();
        }
        uint64_t v81 = *(void *)(v89 + 8 * v80);
        int64_t v82 = i + 1;
        if (!v81)
        {
          int64_t v82 = i + 2;
          if (i + 2 >= v90) {
            goto LABEL_97;
          }
          uint64_t v81 = *(void *)(v89 + 8 * v82);
          if (!v81)
          {
            int64_t v82 = i + 3;
            if (i + 3 >= v90) {
              goto LABEL_97;
            }
            uint64_t v81 = *(void *)(v89 + 8 * v82);
            if (!v81)
            {
              int64_t v82 = i + 4;
              if (i + 4 >= v90) {
                goto LABEL_97;
              }
              uint64_t v81 = *(void *)(v89 + 8 * v82);
              if (!v81)
              {
                int64_t v82 = i + 5;
                if (i + 5 >= v90) {
                  goto LABEL_97;
                }
                uint64_t v81 = *(void *)(v89 + 8 * v82);
                if (!v81)
                {
                  uint64_t v83 = i + 6;
                  if (i + 6 >= v90) {
                    goto LABEL_97;
                  }
                  uint64_t v81 = *(void *)(v89 + 8 * v83);
                  if (!v81)
                  {
                    while (1)
                    {
                      int64_t v82 = v83 + 1;
                      if (__OFADD__(v83, 1)) {
                        goto LABEL_105;
                      }
                      if (v82 >= v90) {
                        goto LABEL_97;
                      }
                      uint64_t v81 = *(void *)(v89 + 8 * v82);
                      ++v83;
                      if (v81) {
                        goto LABEL_96;
                      }
                    }
                  }
                  int64_t v82 = i + 6;
                }
              }
            }
          }
        }
LABEL_96:
        uint64_t v68 = (v81 - 1) & v81;
        int64_t v97 = v82;
      }
      uint64_t v105 = dispatch thunk of CustomStringConvertible.description.getter();
      uint64_t v113 = v70;
      v71._countAndFlagsBits = 118;
      v71._object = (void *)0xE100000000000000;
      String.append(_:)(v71);
      v72._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
      String.append(_:)(v72);
      swift_bridgeObjectRelease();
      uint64_t v74 = v105;
      uint64_t v73 = v113;
      uint64_t v106 = dispatch thunk of CustomStringConvertible.description.getter();
      uint64_t v114 = v75;
      v76._countAndFlagsBits = 23328;
      v76._object = (void *)0xE200000000000000;
      String.append(_:)(v76);
      v77._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
      String.append(_:)(v77);
      swift_bridgeObjectRelease();
      v78._countAndFlagsBits = 0x5D736574796220;
      v78._object = (void *)0xE700000000000000;
      String.append(_:)(v78);
      char v79 = swift_isUniquelyReferenced_nonNull_native();
      sub_10016C0FC(v106, v114, v74, v73, v79);
      swift_bridgeObjectRelease();
      uint64_t result = swift_bridgeObjectRelease();
    }
  }
  unint64_t v63 = *(void *)(v91 + 8 * v62);
  ++v48;
  if (v63) {
    goto LABEL_72;
  }
  int64_t v48 = v62 + 1;
  if (v62 + 1 >= v93) {
    goto LABEL_73;
  }
  unint64_t v63 = *(void *)(v91 + 8 * v48);
  if (v63) {
    goto LABEL_72;
  }
  int64_t v48 = v62 + 2;
  if (v62 + 2 >= v93) {
    goto LABEL_73;
  }
  unint64_t v63 = *(void *)(v91 + 8 * v48);
  if (v63) {
    goto LABEL_72;
  }
  int64_t v48 = v62 + 3;
  if (v62 + 3 >= v93) {
    goto LABEL_73;
  }
  unint64_t v63 = *(void *)(v91 + 8 * v48);
  if (v63) {
    goto LABEL_72;
  }
  int64_t v48 = v62 + 4;
  if (v62 + 4 >= v93) {
    goto LABEL_73;
  }
  unint64_t v63 = *(void *)(v91 + 8 * v48);
  if (v63)
  {
LABEL_72:
    unint64_t v47 = (v63 - 1) & v63;
    unint64_t v50 = __clz(__rbit64(v63)) + (v48 << 6);
    goto LABEL_53;
  }
  int64_t v64 = v62 + 5;
  if (v64 >= v93) {
    goto LABEL_73;
  }
  unint64_t v63 = *(void *)(v91 + 8 * v64);
  if (v63)
  {
    int64_t v48 = v64;
    goto LABEL_72;
  }
  while (1)
  {
    int64_t v48 = v64 + 1;
    if (__OFADD__(v64, 1)) {
      break;
    }
    if (v48 >= v93) {
      goto LABEL_73;
    }
    unint64_t v63 = *(void *)(v91 + 8 * v48);
    ++v64;
    if (v63) {
      goto LABEL_72;
    }
  }
LABEL_104:
  __break(1u);
LABEL_105:
  __break(1u);
  return result;
}

uint64_t sub_101065018@<X0>(void *a1@<X0>, void *a2@<X8>)
{
  uint64_t v2 = a1[1];
  uint64_t v3 = a1[2];
  uint64_t v4 = a1[3];
  uint64_t v5 = a1[4];
  uint64_t v6 = a1[5];
  *a2 = *a1;
  a2[1] = v2;
  a2[2] = v3;
  a2[3] = v4;
  a2[4] = v5;
  a2[5] = v6;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return swift_bridgeObjectRetain();
}

uint64_t sub_10106507C(uint64_t a1, char a2, unsigned __int8 a3, uint64_t a4, uint64_t a5, unint64_t a6, char **a7, uint64_t a8)
{
  Swift::String v11 = (unint64_t *)(a8 + 16);
  if (a2)
  {
    sub_10000588C(&qword_10163A828);
    uint64_t v51 = swift_allocObject();
    *(_OWORD *)(v51 + 16) = xmmword_101342130;
    swift_getErrorValue();
    *(void *)(v51 + 56) = v63;
    uint64_t v52 = sub_10001D958((uint64_t *)(v51 + 32));
    (*(void (**)(uint64_t *))(*(void *)(v63 - 8) + 16))(v52);
    swift_errorRetain();
    print(_:separator:terminator:)();
    swift_bridgeObjectRelease();
    sub_10015B4A8(a1, 1);
    Swift::String v18 = 0;
LABEL_39:
    swift_beginAccess();
    uint64_t v53 = swift_bridgeObjectRetain();
    ((void (*)(uint64_t))a6)(v53);
    swift_bridgeObjectRelease();
    return sub_1000A1534((uint64_t)v18);
  }
  if (*(void *)(a1 + 16))
  {
    swift_bridgeObjectRetain();
    unint64_t v15 = sub_100724500(a3, a4, a5);
    if (v16)
    {
      unint64_t v17 = *(void *)(*(void *)(a1 + 56) + 8 * v15);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      if (v17 >> 62) {
        goto LABEL_47;
      }
      Swift::String v18 = *(char **)((v17 & 0xFFFFFFFFFFFFFF8) + 0x10);
      while (v18)
      {
        uint64_t v56 = a7;
        uint64_t v57 = (void (*)(void))a6;
        a6 = 0;
        uint64_t v19 = 0;
        unint64_t v60 = v17 & 0xC000000000000001;
        uint64_t v58 = v17 & 0xFFFFFFFFFFFFFF8;
        int64_t v20 = &selRef_moveItemAtURL_toURL_error_;
        Swift::String v59 = (void *)v17;
        while (v60)
        {
          id v21 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
          int64_t v22 = (char *)(a6 + 1);
          if (__OFADD__(a6, 1)) {
            goto LABEL_42;
          }
LABEL_13:
          char v61 = v21;
          int64_t v62 = v22;
          id v23 = [v21 capabilities:v56, v57];
          static String._unconditionallyBridgeFromObjectiveC(_:)();
          NSString v24 = String._bridgeToObjectiveC()();
          swift_bridgeObjectRelease();
          id v25 = [v23 v20[309] v24];

          if (v25 == (id)1) {
            sub_100DCA438(v65, 0);
          }
          static String._unconditionallyBridgeFromObjectiveC(_:)();
          NSString v26 = String._bridgeToObjectiveC()();
          swift_bridgeObjectRelease();
          id v27 = [v23 v20[309]:v26];

          if (v27 == (id)1) {
            sub_100DCA438(v65, 1);
          }
          static String._unconditionallyBridgeFromObjectiveC(_:)();
          NSString v28 = String._bridgeToObjectiveC()();
          swift_bridgeObjectRelease();
          id v29 = [v23 v20[309] v28];

          if (v29 == (id)1) {
            sub_100DCA438(v65, 2);
          }
          static String._unconditionallyBridgeFromObjectiveC(_:)();
          NSString v30 = String._bridgeToObjectiveC()();
          swift_bridgeObjectRelease();
          id v31 = [v23 v20[309]:v30];

          if (v31 == (id)1) {
            sub_100DCA438(v65, 3);
          }
          static String._unconditionallyBridgeFromObjectiveC(_:)();
          NSString v32 = String._bridgeToObjectiveC()();
          swift_bridgeObjectRelease();
          a7 = v20;
          id v33 = [v23 v20[309]:v32];

          if (v33 == (id)1) {
            sub_100DCA438(v65, 4);
          }
          swift_beginAccess();
          swift_bridgeObjectRetain();
          sub_1000A1534((uint64_t)v19);
          char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
          unint64_t v17 = *v11;
          int64_t v64 = (void *)*v11;
          *Swift::String v11 = 0x8000000000000000;
          unint64_t v36 = sub_100724A78((uint64_t)&_swiftEmptySetSingleton);
          uint64_t v37 = *(void *)(v17 + 16);
          BOOL v38 = (v35 & 1) == 0;
          uint64_t v39 = v37 + v38;
          if (__OFADD__(v37, v38)) {
            goto LABEL_43;
          }
          char v40 = v35;
          if (*(void *)(v17 + 24) >= v39)
          {
            if ((isUniquelyReferenced_nonNull_native & 1) == 0)
            {
              sub_100E88A4C();
              unint64_t v17 = (unint64_t)v64;
            }
          }
          else
          {
            sub_100E799E8(v39, isUniquelyReferenced_nonNull_native);
            unint64_t v17 = (unint64_t)v64;
            unint64_t v41 = sub_100724A78((uint64_t)&_swiftEmptySetSingleton);
            if ((v40 & 1) != (v42 & 1))
            {
              sub_10000588C(&qword_101668B40);
              KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
              __break(1u);
              JUMPOUT(0x101065844);
            }
            unint64_t v36 = v41;
          }
          int64_t v20 = a7;
          *Swift::String v11 = v17;
          swift_bridgeObjectRelease();
          unint64_t v17 = *v11;
          if ((v40 & 1) == 0)
          {
            *(void *)(v17 + 8 * (v36 >> 6) + 64) |= 1 << v36;
            uint64_t v43 = 8 * v36;
            *(void *)(*(void *)(v17 + 48) + v43) = &_swiftEmptySetSingleton;
            *(void *)(*(void *)(v17 + 56) + v43) = 0;
            uint64_t v44 = *(void *)(v17 + 16);
            uint64_t v45 = v44 + 1;
            BOOL v46 = __OFADD__(v44, 1);
            swift_bridgeObjectRetain();
            if (v46) {
              goto LABEL_45;
            }
            *(void *)(v17 + 16) = v45;
            int64_t v20 = a7;
          }
          swift_bridgeObjectRetain();
          uint64_t v47 = *(void *)(v17 + 56);
          uint64_t v48 = *(void *)(v47 + 8 * v36);
          BOOL v49 = __OFADD__(v48, 1);
          uint64_t v50 = v48 + 1;
          if (v49) {
            goto LABEL_44;
          }
          *(void *)(v47 + 8 * v36) = v50;
          swift_endAccess();
          swift_bridgeObjectRelease_n();

          swift_bridgeObjectRelease();
          ++a6;
          uint64_t v19 = sub_100007AB0;
          unint64_t v17 = (unint64_t)v59;
          if (v62 == v18)
          {
            swift_bridgeObjectRelease();
            Swift::String v18 = (char *)sub_100007AB0;
            a6 = (unint64_t)v57;
            goto LABEL_39;
          }
        }
        if (a6 >= *(void *)(v58 + 16)) {
          goto LABEL_46;
        }
        id v21 = *(id *)(v17 + 8 * a6 + 32);
        int64_t v22 = (char *)(a6 + 1);
        if (!__OFADD__(a6, 1)) {
          goto LABEL_13;
        }
LABEL_42:
        __break(1u);
LABEL_43:
        __break(1u);
LABEL_44:
        __break(1u);
LABEL_45:
        __break(1u);
LABEL_46:
        __break(1u);
LABEL_47:
        swift_bridgeObjectRetain();
        Swift::String v18 = (char *)_CocoaArrayWrapper.endIndex.getter();
        swift_bridgeObjectRelease();
      }
      swift_bridgeObjectRelease();
      goto LABEL_39;
    }
    swift_bridgeObjectRelease();
  }
  swift_beginAccess();
  uint64_t v55 = swift_bridgeObjectRetain();
  ((void (*)(uint64_t))a6)(v55);
  return swift_bridgeObjectRelease();
}

uint64_t sub_1010658A8(uint64_t a1, char a2, void (*a3)(void *, uint64_t))
{
  uint64_t v4 = a1;
  if ((a2 & 1) == 0)
  {
    uint64_t v45 = a1 + 64;
    uint64_t v5 = 1 << *(unsigned char *)(a1 + 32);
    uint64_t v6 = -1;
    if (v5 < 64) {
      uint64_t v6 = ~(-1 << v5);
    }
    unint64_t v7 = v6 & *(void *)(a1 + 64);
    int64_t v46 = (unint64_t)(v5 + 63) >> 6;
    swift_bridgeObjectRetain();
    int64_t v8 = 0;
    uint64_t v9 = _swiftEmptyDictionarySingleton;
    uint64_t v44 = v4;
    while (1)
    {
      if (v7)
      {
        unint64_t v10 = __clz(__rbit64(v7));
        uint64_t v11 = (v7 - 1) & v7;
        unint64_t v12 = v10 | (v8 << 6);
      }
      else
      {
        int64_t v13 = v8 + 1;
        if (__OFADD__(v8, 1)) {
          goto LABEL_58;
        }
        if (v13 >= v46)
        {
LABEL_52:
          swift_release();
          a3(v9, 0);
          return swift_bridgeObjectRelease();
        }
        unint64_t v14 = *(void *)(v45 + 8 * v13);
        ++v8;
        if (!v14)
        {
          int64_t v8 = v13 + 1;
          if (v13 + 1 >= v46) {
            goto LABEL_52;
          }
          unint64_t v14 = *(void *)(v45 + 8 * v8);
          if (!v14)
          {
            int64_t v8 = v13 + 2;
            if (v13 + 2 >= v46) {
              goto LABEL_52;
            }
            unint64_t v14 = *(void *)(v45 + 8 * v8);
            if (!v14)
            {
              int64_t v15 = v13 + 3;
              if (v15 >= v46) {
                goto LABEL_52;
              }
              unint64_t v14 = *(void *)(v45 + 8 * v15);
              if (!v14)
              {
                while (1)
                {
                  int64_t v8 = v15 + 1;
                  if (__OFADD__(v15, 1)) {
                    goto LABEL_59;
                  }
                  if (v8 >= v46) {
                    goto LABEL_52;
                  }
                  unint64_t v14 = *(void *)(v45 + 8 * v8);
                  ++v15;
                  if (v14) {
                    goto LABEL_22;
                  }
                }
              }
              int64_t v8 = v15;
            }
          }
        }
LABEL_22:
        uint64_t v11 = (v14 - 1) & v14;
        unint64_t v12 = __clz(__rbit64(v14)) + (v8 << 6);
      }
      uint64_t v16 = *(void *)(v4 + 48) + 24 * v12;
      unsigned __int8 v49 = *(unsigned char *)v16;
      uint64_t v17 = *(void *)(v16 + 16);
      uint64_t v50 = *(void *)(v16 + 8);
      uint64_t v51 = v17;
      unint64_t v18 = *(void *)(*(void *)(v4 + 56) + 8 * v12);
      uint64_t v48 = v9;
      if (v18 >> 62)
      {
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        uint64_t v19 = _CocoaArrayWrapper.endIndex.getter();
        unint64_t v47 = v11;
        if (v19)
        {
LABEL_25:
          uint64_t v20 = 4;
          while (1)
          {
            id v25 = (v18 & 0xC000000000000001) != 0
                ? (id)specialized _ArrayBuffer._getElementSlowPath(_:)()
                : *(id *)(v18 + 8 * v20);
            NSString v26 = v25;
            uint64_t v27 = v20 - 3;
            if (__OFADD__(v20 - 4, 1)) {
              break;
            }
            id v28 = [v25 capabilities];
            static String._unconditionallyBridgeFromObjectiveC(_:)();
            NSString v21 = String._bridgeToObjectiveC()();
            swift_bridgeObjectRelease();
            id v22 = [v28 valueForCapability:v21];

            BOOL v23 = v22 == (id)1;
            ++v20;
            if (v23 || v27 == v19)
            {
              uint64_t v4 = v44;
              uint64_t v17 = v51;
              goto LABEL_38;
            }
          }
          __break(1u);
LABEL_56:
          __break(1u);
LABEL_57:
          __break(1u);
LABEL_58:
          __break(1u);
LABEL_59:
          __break(1u);
LABEL_60:
          KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
          __break(1u);
          JUMPOUT(0x101065DC8);
        }
      }
      else
      {
        uint64_t v19 = *(void *)((v18 & 0xFFFFFFFFFFFFFF8) + 0x10);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        unint64_t v47 = v11;
        if (v19) {
          goto LABEL_25;
        }
      }
      BOOL v23 = 0;
LABEL_38:
      swift_bridgeObjectRelease();
      char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      unint64_t v31 = sub_100724500(v49, v50, v17);
      uint64_t v32 = v48[2];
      BOOL v33 = (v30 & 1) == 0;
      uint64_t v34 = v32 + v33;
      if (__OFADD__(v32, v33)) {
        goto LABEL_56;
      }
      char v35 = v30;
      if (v48[3] >= v34)
      {
        if (isUniquelyReferenced_nonNull_native)
        {
          uint64_t v9 = v48;
          if (v30) {
            goto LABEL_5;
          }
        }
        else
        {
          sub_100E88BF0();
          uint64_t v9 = v48;
          if (v35) {
            goto LABEL_5;
          }
        }
      }
      else
      {
        sub_100E79C50(v34, isUniquelyReferenced_nonNull_native);
        unint64_t v36 = sub_100724500(v49, v50, v51);
        if ((v35 & 1) != (v37 & 1)) {
          goto LABEL_60;
        }
        unint64_t v31 = v36;
        uint64_t v9 = v48;
        if (v35)
        {
LABEL_5:
          *(unsigned char *)(v9[7] + v31) = v23;
          goto LABEL_6;
        }
      }
      v9[(v31 >> 6) + 8] |= 1 << v31;
      uint64_t v38 = v9[6] + 24 * v31;
      *(unsigned char *)uint64_t v38 = v49;
      *(void *)(v38 + 8) = v50;
      *(void *)(v38 + 16) = v51;
      *(unsigned char *)(v9[7] + v31) = v23;
      uint64_t v39 = v9[2];
      BOOL v40 = __OFADD__(v39, 1);
      uint64_t v41 = v39 + 1;
      if (v40) {
        goto LABEL_57;
      }
      void v9[2] = v41;
      swift_bridgeObjectRetain();
LABEL_6:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      unint64_t v7 = v47;
    }
  }
  swift_errorRetain();
  a3((void *)v4, 1);

  return sub_10015B4A8(v4, 1);
}

uint64_t sub_101065DDC()
{
  swift_getWitnessTable();
  v1._countAndFlagsBits = CustomStringConvertible.typeDescription.getter();
  String.append(_:)(v1);
  swift_bridgeObjectRelease();
  v2._countAndFlagsBits = 32;
  v2._object = (void *)0xE100000000000000;
  String.append(_:)(v2);
  v3._countAndFlagsBits = CustomStringConvertible<>.addressDescription.getter();
  String.append(_:)(v3);
  swift_bridgeObjectRelease();
  v4._countAndFlagsBits = 8250;
  v4._object = (void *)0xE200000000000000;
  String.append(_:)(v4);
  uint64_t v6 = *(void *)(v0 + 16);
  uint64_t v5 = *(void **)(v0 + 24);
  swift_bridgeObjectRetain();
  v7._countAndFlagsBits = v6;
  v7._object = v5;
  String.append(_:)(v7);
  swift_bridgeObjectRelease();
  v8._countAndFlagsBits = 62;
  v8._object = (void *)0xE100000000000000;
  String.append(_:)(v8);
  return 60;
}

uint64_t sub_101065F0C()
{
  return sub_101065DDC();
}

uint64_t sub_101065F30(Swift::UInt32 a1, Swift::UInt a2, uint64_t a3)
{
  uint64_t v5 = v3;
  if (!*(void *)(*(void *)(v3 + 16) + 16) || (sub_100723F30(a1, a2), (v9 & 1) == 0))
  {
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v32 = *(void *)(v3 + 16);
    *(void *)(v3 + 16) = 0x8000000000000000;
    sub_100172AA8(0, 0, a1, a2, isUniquelyReferenced_nonNull_native);
    *(void *)(v3 + 16) = v32;
    swift_bridgeObjectRelease();
  }
  char v11 = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v12 = *(void *)(v3 + 16);
  uint64_t v33 = *(void *)(v5 + 16);
  *(void *)(v5 + 16) = 0x8000000000000000;
  unint64_t v14 = sub_100723F30(a1, a2);
  uint64_t v15 = *(void *)(v12 + 16);
  BOOL v16 = (v13 & 1) == 0;
  uint64_t v17 = v15 + v16;
  if (__OFADD__(v15, v16))
  {
    __break(1u);
    goto LABEL_23;
  }
  char v4 = v13;
  if (*(void *)(v12 + 24) >= v17)
  {
    if ((v11 & 1) == 0) {
      goto LABEL_26;
    }
    if (v13) {
      goto LABEL_11;
    }
    goto LABEL_27;
  }
  sub_100E79F7C(v17, v11);
  unint64_t v18 = sub_100723F30(a1, a2);
  if ((v4 & 1) == (v19 & 1))
  {
    unint64_t v14 = v18;
    if (v4) {
      goto LABEL_11;
    }
LABEL_27:
    while (1)
    {
      __break(1u);
LABEL_28:
      uint64_t result = (uint64_t)sub_100E88DA8();
      if ((v4 & 1) == 0) {
        break;
      }
LABEL_20:
      uint64_t v28 = *(void *)(v33 + 56) + 16 * v14;
      uint64_t v30 = *(void *)(v28 + 8);
      id v29 = (void *)(v28 + 8);
      uint64_t v31 = v30 + a3;
      if (!__CFADD__(v30, a3))
      {
        *id v29 = v31;
        *(void *)(v5 + 16) = v33;
        return result;
      }
      while (1)
      {
        __break(1u);
LABEL_26:
        sub_100E88DA8();
        if ((v4 & 1) == 0) {
          break;
        }
LABEL_11:
        uint64_t v20 = (void *)(*(void *)(v33 + 56) + 16 * v14);
        if (__OFADD__(*v20, 1))
        {
LABEL_23:
          __break(1u);
        }
        else
        {
          ++*v20;
          *(void *)(v5 + 16) = v33;
          if (a3 < 0) {
            goto LABEL_30;
          }
          char v21 = swift_isUniquelyReferenced_nonNull_native();
          uint64_t v22 = *(void *)(v5 + 16);
          uint64_t v33 = v22;
          *(void *)(v5 + 16) = 0x8000000000000000;
          unint64_t v14 = sub_100723F30(a1, a2);
          uint64_t v24 = *(void *)(v22 + 16);
          BOOL v25 = (v23 & 1) == 0;
          uint64_t result = v24 + v25;
          if (!__OFADD__(v24, v25))
          {
            char v4 = v23;
            if (*(void *)(v22 + 24) < result)
            {
              sub_100E79F7C(result, v21);
              uint64_t result = sub_100723F30(a1, a2);
              if ((v4 & 1) != (v27 & 1)) {
                goto LABEL_31;
              }
              unint64_t v14 = result;
              if (v4) {
                goto LABEL_20;
              }
              goto LABEL_29;
            }
            if ((v21 & 1) == 0) {
              goto LABEL_28;
            }
            if ((v23 & 1) == 0) {
              goto LABEL_29;
            }
            goto LABEL_20;
          }
        }
        __break(1u);
      }
    }
LABEL_29:
    __break(1u);
LABEL_30:
    _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
LABEL_31:
  uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

uint64_t sub_1010661C8(Swift::UInt32 a1, Swift::UInt a2, uint64_t a3)
{
  uint64_t v5 = v3;
  if (!*(void *)(*(void *)(v3 + 24) + 16) || (sub_100723F30(a1, a2), (v9 & 1) == 0))
  {
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v32 = *(void *)(v3 + 24);
    *(void *)(v3 + 24) = 0x8000000000000000;
    sub_100172AA8(0, 0, a1, a2, isUniquelyReferenced_nonNull_native);
    *(void *)(v3 + 24) = v32;
    swift_bridgeObjectRelease();
  }
  char v11 = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v12 = *(void *)(v3 + 24);
  uint64_t v33 = *(void *)(v5 + 24);
  *(void *)(v5 + 24) = 0x8000000000000000;
  unint64_t v14 = sub_100723F30(a1, a2);
  uint64_t v15 = *(void *)(v12 + 16);
  BOOL v16 = (v13 & 1) == 0;
  uint64_t v17 = v15 + v16;
  if (__OFADD__(v15, v16))
  {
    __break(1u);
    goto LABEL_23;
  }
  char v4 = v13;
  if (*(void *)(v12 + 24) >= v17)
  {
    if ((v11 & 1) == 0) {
      goto LABEL_26;
    }
    if (v13) {
      goto LABEL_11;
    }
    goto LABEL_27;
  }
  sub_100E79F7C(v17, v11);
  unint64_t v18 = sub_100723F30(a1, a2);
  if ((v4 & 1) == (v19 & 1))
  {
    unint64_t v14 = v18;
    if (v4) {
      goto LABEL_11;
    }
LABEL_27:
    while (1)
    {
      __break(1u);
LABEL_28:
      uint64_t result = (uint64_t)sub_100E88DA8();
      if ((v4 & 1) == 0) {
        break;
      }
LABEL_20:
      uint64_t v28 = *(void *)(v33 + 56) + 16 * v14;
      uint64_t v30 = *(void *)(v28 + 8);
      id v29 = (void *)(v28 + 8);
      uint64_t v31 = v30 + a3;
      if (!__CFADD__(v30, a3))
      {
        *id v29 = v31;
        *(void *)(v5 + 24) = v33;
        return result;
      }
      while (1)
      {
        __break(1u);
LABEL_26:
        sub_100E88DA8();
        if ((v4 & 1) == 0) {
          break;
        }
LABEL_11:
        uint64_t v20 = (void *)(*(void *)(v33 + 56) + 16 * v14);
        if (__OFADD__(*v20, 1))
        {
LABEL_23:
          __break(1u);
        }
        else
        {
          ++*v20;
          *(void *)(v5 + 24) = v33;
          if (a3 < 0) {
            goto LABEL_30;
          }
          char v21 = swift_isUniquelyReferenced_nonNull_native();
          uint64_t v22 = *(void *)(v5 + 24);
          uint64_t v33 = v22;
          *(void *)(v5 + 24) = 0x8000000000000000;
          unint64_t v14 = sub_100723F30(a1, a2);
          uint64_t v24 = *(void *)(v22 + 16);
          BOOL v25 = (v23 & 1) == 0;
          uint64_t result = v24 + v25;
          if (!__OFADD__(v24, v25))
          {
            char v4 = v23;
            if (*(void *)(v22 + 24) < result)
            {
              sub_100E79F7C(result, v21);
              uint64_t result = sub_100723F30(a1, a2);
              if ((v4 & 1) != (v27 & 1)) {
                goto LABEL_31;
              }
              unint64_t v14 = result;
              if (v4) {
                goto LABEL_20;
              }
              goto LABEL_29;
            }
            if ((v21 & 1) == 0) {
              goto LABEL_28;
            }
            if ((v23 & 1) == 0) {
              goto LABEL_29;
            }
            goto LABEL_20;
          }
        }
        __break(1u);
      }
    }
LABEL_29:
    __break(1u);
LABEL_30:
    _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
LABEL_31:
  uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

void sub_101066460(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, char a6, uint64_t a7)
{
  uint64_t v8 = v7;
  uint64_t v16 = *(void *)v8;
  dispatch_assert_queue_V2(*(dispatch_queue_t *)(v8 + 48));
  uint64_t v17 = *(void (**)(uint64_t, uint64_t, uint64_t, void, uint64_t))(v8 + 144);
  if (v17)
  {
    uint64_t v30 = v16;
    uint64_t v18 = *(void *)(v8 + 16);
    BOOL v19 = v18 == a1 && *(void *)(v8 + 24) == a2;
    if (v19
      || (uint64_t v20 = a1, v21 = *(void *)(v8 + 24), v29 = v20, (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0))
    {
      swift_retain();
      v17(a3, a4, a5, a6 & 1, a7);
      sub_1000A1534((uint64_t)v17);
    }
    else
    {
      uint64_t v22 = qword_1016373D8;
      swift_retain();
      if (v22 != -1) {
        swift_once();
      }
      uint64_t v23 = type metadata accessor for Logger();
      sub_100010324(v23, (uint64_t)qword_10170F168);
      swift_retain_n();
      swift_bridgeObjectRetain_n();
      uint64_t v24 = Logger.logObject.getter();
      os_log_type_t v25 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v24, v25))
      {
        uint64_t v26 = swift_slowAlloc();
        uint64_t v31 = swift_slowAlloc();
        *(_DWORD *)uint64_t v26 = 136315650;
        uint64_t v32 = v30;
        swift_getMetatypeMetadata();
        uint64_t v27 = String.init<A>(describing:)();
        uint64_t v32 = sub_1008FA0F0(v27, v28, &v31);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        *(_WORD *)(v26 + 12) = 2080;
        swift_bridgeObjectRetain();
        uint64_t v32 = sub_1008FA0F0(v18, v21, &v31);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_release_n();
        swift_bridgeObjectRelease();
        *(_WORD *)(v26 + 22) = 2080;
        swift_bridgeObjectRetain();
        uint64_t v32 = sub_1008FA0F0(v29, a2, &v31);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease_n();
        _os_log_impl((void *)&_mh_execute_header, v24, v25, "%s: Ignoring delegate callback from wrong IDS service! Expected %s, received: %s", (uint8_t *)v26, 0x20u);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
        sub_1000A1534((uint64_t)v17);
      }
      else
      {
        sub_1000A1534((uint64_t)v17);

        swift_bridgeObjectRelease_n();
        swift_release_n();
      }
    }
  }
}

void sub_1010667D8(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9 = v8;
  uint64_t v30 = *(void *)v9;
  dispatch_assert_queue_V2(*(dispatch_queue_t *)(v9 + 48));
  uint64_t v18 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 160);
  if (v18)
  {
    BOOL v19 = *(void *)(v9 + 16) == a1 && *(void *)(v9 + 24) == a2;
    if (v19
      || (uint64_t v28 = a1,
          uint64_t v29 = *(void *)(v9 + 16),
          unint64_t v20 = *(void *)(v9 + 24),
          (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0))
    {
      swift_retain();
      v18(a3, a4, a5, a6, a7, a8);
      sub_1000A1534((uint64_t)v18);
    }
    else
    {
      uint64_t v21 = qword_1016373D8;
      swift_retain();
      if (v21 != -1) {
        swift_once();
      }
      uint64_t v22 = type metadata accessor for Logger();
      sub_100010324(v22, (uint64_t)qword_10170F168);
      swift_retain_n();
      swift_bridgeObjectRetain_n();
      uint64_t v23 = Logger.logObject.getter();
      os_log_type_t v24 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v23, v24))
      {
        uint64_t v25 = swift_slowAlloc();
        uint64_t v31 = swift_slowAlloc();
        *(_DWORD *)uint64_t v25 = 136315650;
        uint64_t v32 = v30;
        swift_getMetatypeMetadata();
        uint64_t v26 = String.init<A>(describing:)();
        uint64_t v32 = sub_1008FA0F0(v26, v27, &v31);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        *(_WORD *)(v25 + 12) = 2080;
        swift_bridgeObjectRetain();
        uint64_t v32 = sub_1008FA0F0(v29, v20, &v31);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_release_n();
        swift_bridgeObjectRelease();
        *(_WORD *)(v25 + 22) = 2080;
        swift_bridgeObjectRetain();
        uint64_t v32 = sub_1008FA0F0(v28, a2, &v31);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease_n();
        _os_log_impl((void *)&_mh_execute_header, v23, v24, "%s: Ignoring delegate callback from wrong IDS service! Expected %s, received: %s", (uint8_t *)v25, 0x20u);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
        sub_1000A1534((uint64_t)v18);
      }
      else
      {
        sub_1000A1534((uint64_t)v18);

        swift_bridgeObjectRelease_n();
        swift_release_n();
      }
    }
  }
}

void sub_101066B58(uint64_t a1, unint64_t a2, uint64_t a3, void (*a4)(char *, NSObject *, uint64_t), NSObject *a5, NSObject *a6, int a7, uint64_t a8, unint64_t a9, uint64_t a10)
{
  char v11 = v10;
  uint64_t v139 = a8;
  LODWORD(v130) = a7;
  v146 = a5;
  v147 = a6;
  v129 = a4;
  uint64_t v128 = a3;
  uint64_t isa = (uint64_t)v10->isa;
  uint64_t v15 = *(NSObject **)(isa + 96);
  v134 = *(NSObject **)(isa + 80);
  v135 = v15;
  uint64_t v16 = type metadata accessor for Message();
  type metadata accessor for MessagingMessageContext();
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  sub_10000592C(&qword_101638D40);
  uint64_t v131 = TupleTypeMetadata2;
  uint64_t v137 = type metadata accessor for Result();
  uint64_t v133 = *(void *)(v137 - 8);
  __chkstk_darwin(v137);
  v132 = (char *)&v123 - v18;
  uint64_t v19 = sub_10000588C(&qword_101638CF0);
  __chkstk_darwin(v19 - 8);
  uint64_t v21 = (char *)&v123 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v22 = type metadata accessor for UUID();
  uint64_t v23 = *(void *)(v22 - 8);
  uint64_t v142 = v22;
  uint64_t v143 = v23;
  uint64_t v24 = __chkstk_darwin(v22);
  v127 = (char *)&v123 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v26 = __chkstk_darwin(v24);
  v138 = (char *)&v123 - v27;
  uint64_t v28 = __chkstk_darwin(v26);
  os_log_t v141 = (os_log_t)((char *)&v123 - v29);
  uint64_t v145 = *(void *)(v16 - 8);
  uint64_t v30 = __chkstk_darwin(v28);
  uint64_t v32 = (char *)&v123 - ((v31 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v33 = __chkstk_darwin(v30);
  v136 = (char *)&v123 - v34;
  uint64_t v35 = __chkstk_darwin(v33);
  char v37 = (char *)&v123 - v36;
  __chkstk_darwin(v35);
  v148 = ((char *)&v123 - v38);
  dispatch_assert_queue_V2((dispatch_queue_t)v11[6].isa);
  uint64_t v40 = (uint64_t)v11[2].isa;
  unint64_t v39 = (unint64_t)v11[3].isa;
  uint64_t v144 = a1;
  BOOL v41 = v40 == a1;
  unint64_t v42 = a2;
  if (v41 && v39 == a2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    v140 = (uint64_t *)isa;
    type metadata accessor for PropertyListDecoder();
    swift_allocObject();
    PropertyListDecoder.init()();
    swift_getWitnessTable();
    dispatch thunk of PropertyListDecoder.decode<A>(_:from:)();
    swift_release();
    uint64_t v125 = a10;
    sub_1003C5E38(a10, (uint64_t)v21);
    uint64_t v43 = v142;
    uint64_t v44 = v143;
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v143 + 48))(v21, 1, v142) == 1)
    {
      sub_10001DAB4((uint64_t)v21, &qword_101638CF0);
      uint64_t v45 = v145;
      if (qword_1016373D8 != -1) {
        swift_once();
      }
      uint64_t v46 = type metadata accessor for Logger();
      sub_100010324(v46, (uint64_t)qword_10170F168);
      uint64_t v143 = *(void *)(v45 + 16);
      ((void (*)(char *, NSObject *, uint64_t))v143)(v32, v148, v16);
      swift_bridgeObjectRetain_n();
      swift_bridgeObjectRetain_n();
      unint64_t v47 = Logger.logObject.getter();
      os_log_type_t v48 = static os_log_type_t.default.getter();
      int v49 = v48;
      if (os_log_type_enabled(v47, v48))
      {
        uint64_t v50 = swift_slowAlloc();
        unint64_t v126 = a9;
        uint64_t v51 = v50;
        uint64_t v142 = swift_slowAlloc();
        v152[0] = v142;
        *(_DWORD *)uint64_t v51 = 136315906;
        os_log_t v141 = v47;
        uint64_t v150 = (uint64_t)v140;
        swift_getMetatypeMetadata();
        uint64_t v52 = String.init<A>(describing:)();
        LODWORD(v138) = v49;
        uint64_t v150 = sub_1008FA0F0(v52, v53, v152);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        *(_WORD *)(v51 + 12) = 2080;
        swift_bridgeObjectRetain();
        uint64_t v150 = sub_1008FA0F0(v144, a2, v152);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease_n();
        *(_WORD *)(v51 + 22) = 2080;
        unint64_t v54 = v126;
        swift_bridgeObjectRetain();
        uint64_t v150 = sub_1008FA0F0(v139, v54, v152);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease_n();
        *(_WORD *)(v51 + 32) = 2080;
        uint64_t v144 = v51 + 34;
        uint64_t v55 = v136;
        ((void (*)(char *, char *, uint64_t))v143)(v136, v32, v16);
        uint64_t v56 = *(void (**)(char *, uint64_t))(v145 + 8);
        v56(v32, v16);
        uint64_t v57 = Message.description.getter(v16);
        unint64_t v59 = v58;
        v56(v55, v16);
        uint64_t v150 = sub_1008FA0F0(v57, v59, v152);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        os_log_t v60 = v141;
        _os_log_impl((void *)&_mh_execute_header, v141, (os_log_type_t)v138, "%s: Received message on %s from %s: %s", (uint8_t *)v51, 0x2Au);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();

        unint64_t v62 = v126;
      }
      else
      {
        uint64_t v56 = *(void (**)(char *, uint64_t))(v45 + 8);
        v56(v32, v16);

        swift_bridgeObjectRelease_n();
        uint64_t v61 = swift_bridgeObjectRelease_n();
        unint64_t v62 = a9;
      }
      __chkstk_darwin(v61);
      int64_t v98 = *(NSObject **)(v97 + 88);
      *(&v123 - 8) = v134;
      *(&v123 - 7) = v98;
      uint64_t v99 = *(NSObject **)(v97 + 104);
      *(&v123 - 6) = v135;
      *(&v123 - 5) = v99;
      uint64_t v100 = v148;
      uint64_t v101 = v146;
      *(&v123 - 4) = v148;
      *(&v123 - 3) = v101;
      *(&v123 - 2) = v147;
      uint64_t v103 = (uint64_t)&v102[4];
      uint64_t v104 = v102 + 16;
      os_unfair_lock_lock(v102 + 16);
      sub_10106BAEC(v103);
      os_unfair_lock_unlock(v104);
      uint64_t v105 = (void (*)(void, void, void, void, void, void, void, void))v11[22].isa;
      if (v105)
      {
        swift_retain();
        unint64_t v106 = sub_10092E5D0((uint64_t)_swiftEmptyArrayStorage);
        v105(v128, v129, v130, v139, v62, v100, v106, v125);
        sub_1000A1534((uint64_t)v105);
        swift_bridgeObjectRelease();
      }
      v56((char *)v100, v16);
    }
    else
    {
      unint64_t v126 = a9;
      os_log_t v70 = v141;
      (*(void (**)(os_log_t, char *, uint64_t))(v44 + 32))(v141, v21, v43);
      uint64_t v71 = v145;
      uint64_t v72 = v43;
      if (qword_1016373D8 != -1) {
        swift_once();
      }
      uint64_t v73 = type metadata accessor for Logger();
      uint64_t v74 = sub_100010324(v73, (uint64_t)qword_10170F168);
      v147 = *(NSObject **)(v71 + 16);
      ((void (*)(char *, NSObject *, uint64_t))v147)(v37, v148, v16);
      uint64_t v75 = v44 + 16;
      Swift::String v76 = *(void (**)(char *, NSObject *, uint64_t))(v44 + 16);
      Swift::String v77 = v138;
      uint64_t v130 = v75;
      v129 = v76;
      v76(v138, v70, v72);
      swift_bridgeObjectRetain_n();
      swift_bridgeObjectRetain_n();
      v134 = v74;
      Swift::String v78 = Logger.logObject.getter();
      os_log_type_t v79 = static os_log_type_t.default.getter();
      int v80 = v79;
      BOOL v81 = os_log_type_enabled(v78, v79);
      v135 = (v71 + 16);
      if (v81)
      {
        uint64_t v82 = swift_slowAlloc();
        int v124 = v80;
        uint64_t v83 = v82;
        uint64_t v128 = swift_slowAlloc();
        v152[0] = v128;
        *(_DWORD *)uint64_t v83 = 136316162;
        os_log_t v123 = v78;
        uint64_t v150 = (uint64_t)v140;
        swift_getMetatypeMetadata();
        uint64_t v84 = String.init<A>(describing:)();
        uint64_t v150 = sub_1008FA0F0(v84, v85, v152);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        *(_WORD *)(v83 + 12) = 2080;
        swift_bridgeObjectRetain();
        uint64_t v150 = sub_1008FA0F0(v144, v42, v152);
        v140 = &v151;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease_n();
        *(_WORD *)(v83 + 22) = 2080;
        unint64_t v86 = v126;
        swift_bridgeObjectRetain();
        uint64_t v150 = sub_1008FA0F0(v139, v86, v152);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease_n();
        *(_WORD *)(v83 + 32) = 2080;
        uint64_t v144 = v83 + 34;
        uint64_t v87 = v136;
        ((void (*)(char *, char *, uint64_t))v147)(v136, v37, v16);
        uint64_t v88 = *(NSObject **)(v145 + 8);
        ((void (*)(char *, uint64_t))v88)(v37, v16);
        uint64_t v89 = Message.description.getter(v16);
        unint64_t v91 = v90;
        v146 = v88;
        ((void (*)(char *, uint64_t))v88)(v87, v16);
        uint64_t v150 = sub_1008FA0F0(v89, v91, v152);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        *(_WORD *)(v83 + 42) = 2080;
        sub_10106C0D8((unint64_t *)&qword_101638B10, (void (*)(uint64_t))&type metadata accessor for UUID);
        uint64_t v92 = v138;
        uint64_t v93 = dispatch thunk of CustomStringConvertible.description.getter();
        uint64_t v150 = sub_1008FA0F0(v93, v94, v152);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        int64_t v95 = *(NSObject **)(v143 + 8);
        ((void (*)(char *, uint64_t))v95)(v92, v142);
        Swift::String v78 = v123;
        _os_log_impl((void *)&_mh_execute_header, v123, (os_log_type_t)v124, "%s: Received message on %s from %s: %s in response to %s", (uint8_t *)v83, 0x34u);
        swift_arrayDestroy();
        swift_slowDealloc();
        uint64_t v96 = v142;
        swift_slowDealloc();
      }
      else
      {
        v146 = *(NSObject **)(v145 + 8);
        ((void (*)(char *, uint64_t))v146)(v37, v16);
        swift_bridgeObjectRelease_n();
        swift_bridgeObjectRelease_n();
        int64_t v95 = *(NSObject **)(v143 + 8);
        uint64_t v96 = v72;
        ((void (*)(char *, uint64_t))v95)(v77, v72);
      }

      uint64_t v107 = v137;
      __chkstk_darwin(v108);
      uint64_t v109 = v141;
      *(&v123 - 2) = v11;
      *(&v123 - 1) = v109;
      swift_getFunctionTypeMetadata1();
      type metadata accessor for Optional();
      OSAllocatedUnfairLock.callAsFunction<A>(_:)();
      uint64_t v110 = (void (*)(char *))v150;
      if (v150)
      {
        uint64_t v111 = v132;
        uint64_t v112 = (uint64_t)&v132[*(int *)(v131 + 48)];
        uint64_t v113 = v148;
        ((void (*)(char *, NSObject *, uint64_t))v147)(v132, v148, v16);
        sub_100CD5E78(v125, v112);
        swift_storeEnumTagMultiPayload();
        swift_retain();
        v110(v111);
        sub_1000A1534((uint64_t)v110);
        sub_1000A1534((uint64_t)v110);
        (*(void (**)(char *, uint64_t))(v133 + 8))(v111, v107);
      }
      else
      {
        v147 = v95;
        uint64_t v114 = v127;
        v129(v127, v109, v96);
        uint64_t v115 = Logger.logObject.getter();
        os_log_type_t v116 = static os_log_type_t.error.getter();
        if (os_log_type_enabled(v115, v116))
        {
          uint64_t v117 = (uint8_t *)swift_slowAlloc();
          v152[0] = swift_slowAlloc();
          *(_DWORD *)uint64_t v117 = 136315138;
          sub_10106C0D8((unint64_t *)&qword_101638B10, (void (*)(uint64_t))&type metadata accessor for UUID);
          uint64_t v118 = dispatch thunk of CustomStringConvertible.description.getter();
          uint64_t v149 = sub_1008FA0F0(v118, v119, v152);
          uint64_t v96 = v142;
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease();
          v120 = v114;
          int64_t v95 = v147;
          ((void (*)(char *, uint64_t))v147)(v120, v96);
          _os_log_impl((void *)&_mh_execute_header, v115, v116, "Could not find promise for %s", v117, 0xCu);
          swift_arrayDestroy();
          swift_slowDealloc();
          swift_slowDealloc();
        }
        else
        {
          uint64_t v121 = v114;
          int64_t v95 = v147;
          ((void (*)(char *, uint64_t))v147)(v121, v96);
        }

        uint64_t v113 = v148;
      }
      v122 = v146;
      ((void (*)(NSObject *, uint64_t))v95)(v109, v96);
      ((void (*)(NSObject *, uint64_t))v122)(v113, v16);
    }
  }
  else
  {
    uint64_t v63 = isa;
    if (qword_1016373D8 != -1) {
      swift_once();
    }
    uint64_t v64 = type metadata accessor for Logger();
    sub_100010324(v64, (uint64_t)qword_10170F168);
    swift_bridgeObjectRetain_n();
    swift_retain_n();
    uint64_t v65 = Logger.logObject.getter();
    os_log_type_t v66 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v65, v66))
    {
      uint64_t v67 = swift_slowAlloc();
      v148 = swift_slowAlloc();
      v152[0] = (uint64_t)v148;
      *(_DWORD *)uint64_t v67 = 136315650;
      uint64_t v150 = v63;
      swift_getMetatypeMetadata();
      uint64_t v68 = String.init<A>(describing:)();
      uint64_t v150 = sub_1008FA0F0(v68, v69, v152);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      *(_WORD *)(v67 + 12) = 2080;
      swift_bridgeObjectRetain();
      uint64_t v150 = sub_1008FA0F0(v40, v39, v152);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_release_n();
      swift_bridgeObjectRelease();
      *(_WORD *)(v67 + 22) = 2080;
      swift_bridgeObjectRetain();
      uint64_t v150 = sub_1008FA0F0(v144, a2, v152);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      _os_log_impl((void *)&_mh_execute_header, v65, v66, "%s: Ignoring delegate callback from wrong IDS service! Expected %s, received: %s", (uint8_t *)v67, 0x20u);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {

      swift_bridgeObjectRelease_n();
      swift_release_n();
    }
  }
}

uint64_t sub_101067FC4@<X0>(_OWORD *a1@<X8>)
{
  swift_beginAccess();
  type metadata accessor for UUID();
  type metadata accessor for Message();
  type metadata accessor for MessagingMessageContext();
  swift_getTupleTypeMetadata2();
  sub_10000592C(&qword_101638D40);
  type metadata accessor for Result();
  swift_getFunctionTypeMetadata1();
  sub_10106C0D8(&qword_10163BC60, (void (*)(uint64_t))&type metadata accessor for UUID);
  Dictionary.subscript.getter();
  *a1 = v3;
  return swift_endAccess();
}

uint64_t sub_101068134(Swift::UInt32 a1, Swift::UInt a2, uint64_t a3)
{
  uint64_t v5 = v3;
  if (!*(void *)(*(void *)(v3 + 32) + 16) || (sub_100723F30(a1, a2), (v9 & 1) == 0))
  {
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v32 = *(void *)(v3 + 32);
    *(void *)(v3 + 32) = 0x8000000000000000;
    sub_100172AA8(0, 0, a1, a2, isUniquelyReferenced_nonNull_native);
    *(void *)(v3 + 32) = v32;
    swift_bridgeObjectRelease();
  }
  char v11 = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v12 = *(void *)(v3 + 32);
  uint64_t v33 = *(void *)(v5 + 32);
  *(void *)(v5 + 32) = 0x8000000000000000;
  unint64_t v14 = sub_100723F30(a1, a2);
  uint64_t v15 = *(void *)(v12 + 16);
  BOOL v16 = (v13 & 1) == 0;
  uint64_t v17 = v15 + v16;
  if (__OFADD__(v15, v16))
  {
    __break(1u);
    goto LABEL_23;
  }
  char v4 = v13;
  if (*(void *)(v12 + 24) >= v17)
  {
    if ((v11 & 1) == 0) {
      goto LABEL_26;
    }
    if (v13) {
      goto LABEL_11;
    }
    goto LABEL_27;
  }
  sub_100E79F7C(v17, v11);
  unint64_t v18 = sub_100723F30(a1, a2);
  if ((v4 & 1) == (v19 & 1))
  {
    unint64_t v14 = v18;
    if (v4) {
      goto LABEL_11;
    }
LABEL_27:
    while (1)
    {
      __break(1u);
LABEL_28:
      uint64_t result = (uint64_t)sub_100E88DA8();
      if ((v4 & 1) == 0) {
        break;
      }
LABEL_20:
      uint64_t v28 = *(void *)(v33 + 56) + 16 * v14;
      uint64_t v30 = *(void *)(v28 + 8);
      uint64_t v29 = (void *)(v28 + 8);
      uint64_t v31 = v30 + a3;
      if (!__CFADD__(v30, a3))
      {
        *uint64_t v29 = v31;
        *(void *)(v5 + 32) = v33;
        return result;
      }
      while (1)
      {
        __break(1u);
LABEL_26:
        sub_100E88DA8();
        if ((v4 & 1) == 0) {
          break;
        }
LABEL_11:
        uint64_t v20 = (void *)(*(void *)(v33 + 56) + 16 * v14);
        if (__OFADD__(*v20, 1))
        {
LABEL_23:
          __break(1u);
        }
        else
        {
          ++*v20;
          *(void *)(v5 + 32) = v33;
          if (a3 < 0) {
            goto LABEL_30;
          }
          char v21 = swift_isUniquelyReferenced_nonNull_native();
          uint64_t v22 = *(void *)(v5 + 32);
          uint64_t v33 = v22;
          *(void *)(v5 + 32) = 0x8000000000000000;
          unint64_t v14 = sub_100723F30(a1, a2);
          uint64_t v24 = *(void *)(v22 + 16);
          BOOL v25 = (v23 & 1) == 0;
          uint64_t result = v24 + v25;
          if (!__OFADD__(v24, v25))
          {
            char v4 = v23;
            if (*(void *)(v22 + 24) < result)
            {
              sub_100E79F7C(result, v21);
              uint64_t result = sub_100723F30(a1, a2);
              if ((v4 & 1) != (v27 & 1)) {
                goto LABEL_31;
              }
              unint64_t v14 = result;
              if (v4) {
                goto LABEL_20;
              }
              goto LABEL_29;
            }
            if ((v21 & 1) == 0) {
              goto LABEL_28;
            }
            if ((v23 & 1) == 0) {
              goto LABEL_29;
            }
            goto LABEL_20;
          }
        }
        __break(1u);
      }
    }
LABEL_29:
    __break(1u);
LABEL_30:
    _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
LABEL_31:
  uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

void sub_1010683CC(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, unsigned int a7, uint64_t a8, unint64_t a9, uint64_t a10)
{
  uint64_t v83 = a8;
  unsigned int v82 = a7;
  uint64_t v80 = a3;
  uint64_t v81 = a4;
  uint64_t v14 = *(void *)v10;
  uint64_t v15 = *(void *)(*(void *)v10 + 96);
  uint64_t v78 = *(void *)(*(void *)v10 + 80);
  uint64_t v79 = v15;
  uint64_t v16 = type metadata accessor for Message();
  uint64_t v17 = *(void *)(v16 - 8);
  uint64_t v18 = __chkstk_darwin(v16);
  uint64_t v20 = (char *)v66 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v21 = __chkstk_darwin(v18);
  char v23 = (char *)v66 - v22;
  __chkstk_darwin(v21);
  uint64_t v84 = (char *)v66 - v24;
  dispatch_assert_queue_V2(*(dispatch_queue_t *)(v10 + 48));
  BOOL v25 = *(void (**)(void, void, void, void, void, void, void, void))(v10 + 176);
  if (v25)
  {
    uint64_t v76 = a6;
    uint64_t v77 = v14;
    uint64_t v26 = *(void *)(v10 + 184);
    uint64_t v28 = *(void *)(v10 + 16);
    unint64_t v27 = *(void *)(v10 + 24);
    unint64_t v85 = v25;
    uint64_t v86 = v26;
    if (v28 == a1 && v27 == a2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
    {
      swift_retain();
      uint64_t v29 = Data.init(contentsOf:options:)();
      unint64_t v31 = v30;
      type metadata accessor for PropertyListDecoder();
      swift_allocObject();
      PropertyListDecoder.init()();
      swift_getWitnessTable();
      uint64_t v32 = v84;
      dispatch thunk of PropertyListDecoder.decode<A>(_:from:)();
      uint64_t v73 = a10;
      uint64_t v74 = v29;
      swift_release();
      if (qword_1016373D8 != -1) {
        swift_once();
      }
      uint64_t v42 = type metadata accessor for Logger();
      sub_100010324(v42, (uint64_t)qword_10170F168);
      uint64_t v75 = v17;
      uint64_t v71 = *(void (**)(char *, char *, uint64_t))(v17 + 16);
      v71(v23, v32, v16);
      swift_bridgeObjectRetain_n();
      uint64_t v43 = Logger.logObject.getter();
      os_log_type_t v44 = static os_log_type_t.default.getter();
      int v70 = v44;
      BOOL v45 = os_log_type_enabled(v43, v44);
      unint64_t v72 = a9;
      if (v45)
      {
        uint64_t v46 = swift_slowAlloc();
        unint64_t v69 = v31;
        uint64_t v47 = v46;
        uint64_t v68 = swift_slowAlloc();
        uint64_t v87 = v68;
        *(_DWORD *)uint64_t v47 = 136315650;
        os_log_t v67 = v43;
        v66[0] = v47 + 4;
        uint64_t v88 = v77;
        swift_getMetatypeMetadata();
        uint64_t v48 = String.init<A>(describing:)();
        uint64_t v88 = sub_1008FA0F0(v48, v49, &v87);
        v66[1] = &v89;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        *(_WORD *)(v47 + 12) = 2080;
        swift_bridgeObjectRetain();
        uint64_t v88 = sub_1008FA0F0(v83, a9, &v87);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease_n();
        *(_WORD *)(v47 + 22) = 2080;
        v71(v20, v23, v16);
        uint64_t v50 = *(void (**)(char *, uint64_t))(v75 + 8);
        v50(v23, v16);
        uint64_t v51 = Message.description.getter(v16);
        unint64_t v53 = v52;
        uint64_t v71 = (void (*)(char *, char *, uint64_t))v50;
        v50(v20, v16);
        uint64_t v88 = sub_1008FA0F0(v51, v53, &v87);
        uint64_t v32 = v84;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        os_log_t v54 = v67;
        _os_log_impl((void *)&_mh_execute_header, v67, (os_log_type_t)v70, "%s: Received resource from %s: %s", (uint8_t *)v47, 0x20u);
        swift_arrayDestroy();
        swift_slowDealloc();
        unint64_t v31 = v69;
        swift_slowDealloc();
      }
      else
      {
        uint64_t v71 = *(void (**)(char *, char *, uint64_t))(v75 + 8);
        ((void (*)(char *, uint64_t))v71)(v23, v16);

        uint64_t v55 = swift_bridgeObjectRelease_n();
      }
      __chkstk_darwin(v55);
      uint64_t v57 = *(void *)(v56 + 88);
      v66[-8] = v78;
      v66[-7] = v57;
      uint64_t v58 = *(void *)(v56 + 104);
      v66[-6] = v79;
      v66[-5] = v58;
      uint64_t v59 = v74;
      v66[-4] = v32;
      v66[-3] = v59;
      v66[-2] = v31;
      os_log_t v60 = v32;
      uint64_t v62 = (uint64_t)&v61[4];
      unint64_t v63 = v31;
      uint64_t v64 = v61 + 16;
      os_unfair_lock_lock(v61 + 16);
      sub_10106BAC0(v62);
      os_unfair_lock_unlock(v64);
      uint64_t v65 = v85;
      v85(v80, v81, v82, v83, v72, v60, v76, v73);
      sub_10001CFB8(v59, v63);
      sub_1000A1534((uint64_t)v65);
      ((void (*)(char *, uint64_t))v71)(v60, v16);
    }
    else
    {
      uint64_t v33 = qword_1016373D8;
      swift_retain();
      if (v33 != -1) {
        swift_once();
      }
      uint64_t v34 = type metadata accessor for Logger();
      sub_100010324(v34, (uint64_t)qword_10170F168);
      swift_retain_n();
      swift_bridgeObjectRetain_n();
      uint64_t v35 = Logger.logObject.getter();
      os_log_type_t v36 = static os_log_type_t.error.getter();
      int v37 = v36;
      if (os_log_type_enabled(v35, v36))
      {
        uint64_t v38 = swift_slowAlloc();
        LODWORD(v84) = v37;
        uint64_t v39 = v38;
        uint64_t v83 = swift_slowAlloc();
        uint64_t v87 = v83;
        *(_DWORD *)uint64_t v39 = 136315650;
        uint64_t v88 = v77;
        swift_getMetatypeMetadata();
        uint64_t v40 = String.init<A>(describing:)();
        uint64_t v88 = sub_1008FA0F0(v40, v41, &v87);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        *(_WORD *)(v39 + 12) = 2080;
        swift_bridgeObjectRetain();
        uint64_t v88 = sub_1008FA0F0(v28, v27, &v87);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_release_n();
        swift_bridgeObjectRelease();
        *(_WORD *)(v39 + 22) = 2080;
        swift_bridgeObjectRetain();
        uint64_t v88 = sub_1008FA0F0(a1, a2, &v87);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease_n();
        _os_log_impl((void *)&_mh_execute_header, v35, (os_log_type_t)v84, "%s: Ignoring delegate callback from wrong IDS service! Expected %s, received: %s", (uint8_t *)v39, 0x20u);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
        sub_1000A1534((uint64_t)v85);
      }
      else
      {
        sub_1000A1534((uint64_t)v85);

        swift_bridgeObjectRelease_n();
        swift_release_n();
      }
    }
  }
}

uint64_t sub_101068E44(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t (*a9)(void, uint64_t, uint64_t))
{
  dispatch thunk of RawRepresentable.rawValue.getter();
  uint64_t v12 = *(void *)(a2 + *(int *)(type metadata accessor for Message() + 36));
  uint64_t v13 = 0;
  switch(a4 >> 62)
  {
    case 1uLL:
      if (__OFSUB__(HIDWORD(a3), a3))
      {
        __break(1u);
LABEL_8:
        __break(1u);
        JUMPOUT(0x101068F3CLL);
      }
      uint64_t v13 = HIDWORD(a3) - (int)a3;
      return a9(v17, v12, v13);
    case 2uLL:
      uint64_t v15 = *(void *)(a3 + 16);
      uint64_t v14 = *(void *)(a3 + 24);
      uint64_t v13 = v14 - v15;
      if (!__OFSUB__(v14, v15)) {
        return a9(v17, v12, v13);
      }
      goto LABEL_8;
    case 3uLL:
      return a9(v17, v12, v13);
    default:
      uint64_t v13 = BYTE6(a4);
      return a9(v17, v12, v13);
  }
}

uint64_t sub_101068F4C(Swift::UInt32 a1, Swift::UInt a2, uint64_t a3)
{
  uint64_t v5 = v3;
  if (!*(void *)(*(void *)(v3 + 40) + 16) || (sub_100723F30(a1, a2), (v9 & 1) == 0))
  {
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v32 = *(void *)(v3 + 40);
    *(void *)(v3 + 40) = 0x8000000000000000;
    sub_100172AA8(0, 0, a1, a2, isUniquelyReferenced_nonNull_native);
    *(void *)(v3 + 40) = v32;
    swift_bridgeObjectRelease();
  }
  char v11 = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v12 = *(void *)(v3 + 40);
  uint64_t v33 = *(void *)(v5 + 40);
  *(void *)(v5 + 40) = 0x8000000000000000;
  unint64_t v14 = sub_100723F30(a1, a2);
  uint64_t v15 = *(void *)(v12 + 16);
  BOOL v16 = (v13 & 1) == 0;
  uint64_t v17 = v15 + v16;
  if (__OFADD__(v15, v16))
  {
    __break(1u);
    goto LABEL_23;
  }
  char v4 = v13;
  if (*(void *)(v12 + 24) >= v17)
  {
    if ((v11 & 1) == 0) {
      goto LABEL_26;
    }
    if (v13) {
      goto LABEL_11;
    }
    goto LABEL_27;
  }
  sub_100E79F7C(v17, v11);
  unint64_t v18 = sub_100723F30(a1, a2);
  if ((v4 & 1) == (v19 & 1))
  {
    unint64_t v14 = v18;
    if (v4) {
      goto LABEL_11;
    }
LABEL_27:
    while (1)
    {
      __break(1u);
LABEL_28:
      uint64_t result = (uint64_t)sub_100E88DA8();
      if ((v4 & 1) == 0) {
        break;
      }
LABEL_20:
      uint64_t v28 = *(void *)(v33 + 56) + 16 * v14;
      uint64_t v30 = *(void *)(v28 + 8);
      uint64_t v29 = (void *)(v28 + 8);
      uint64_t v31 = v30 + a3;
      if (!__CFADD__(v30, a3))
      {
        *uint64_t v29 = v31;
        *(void *)(v5 + 40) = v33;
        return result;
      }
      while (1)
      {
        __break(1u);
LABEL_26:
        sub_100E88DA8();
        if ((v4 & 1) == 0) {
          break;
        }
LABEL_11:
        uint64_t v20 = (void *)(*(void *)(v33 + 56) + 16 * v14);
        if (__OFADD__(*v20, 1))
        {
LABEL_23:
          __break(1u);
        }
        else
        {
          ++*v20;
          *(void *)(v5 + 40) = v33;
          if (a3 < 0) {
            goto LABEL_30;
          }
          char v21 = swift_isUniquelyReferenced_nonNull_native();
          uint64_t v22 = *(void *)(v5 + 40);
          uint64_t v33 = v22;
          *(void *)(v5 + 40) = 0x8000000000000000;
          unint64_t v14 = sub_100723F30(a1, a2);
          uint64_t v24 = *(void *)(v22 + 16);
          BOOL v25 = (v23 & 1) == 0;
          uint64_t result = v24 + v25;
          if (!__OFADD__(v24, v25))
          {
            char v4 = v23;
            if (*(void *)(v22 + 24) < result)
            {
              sub_100E79F7C(result, v21);
              uint64_t result = sub_100723F30(a1, a2);
              if ((v4 & 1) != (v27 & 1)) {
                goto LABEL_31;
              }
              unint64_t v14 = result;
              if (v4) {
                goto LABEL_20;
              }
              goto LABEL_29;
            }
            if ((v21 & 1) == 0) {
              goto LABEL_28;
            }
            if ((v23 & 1) == 0) {
              goto LABEL_29;
            }
            goto LABEL_20;
          }
        }
        __break(1u);
      }
    }
LABEL_29:
    __break(1u);
LABEL_30:
    _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
LABEL_31:
  uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

void sub_1010691E4(uint64_t a1, unint64_t a2, uint64_t a3)
{
  uint64_t v4 = v3;
  uint64_t v8 = *(void *)v4;
  dispatch_assert_queue_V2(*(dispatch_queue_t *)(v4 + 48));
  char v9 = *(void (**)(uint64_t))(v4 + 192);
  if (v9)
  {
    uint64_t v11 = *(void *)(v4 + 16);
    unint64_t v10 = *(void *)(v4 + 24);
    BOOL v12 = v11 == a1 && v10 == a2;
    if (v12 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
    {
      swift_retain();
      v9(a3);
      sub_1000A1534((uint64_t)v9);
    }
    else
    {
      uint64_t v13 = qword_1016373D8;
      swift_retain();
      if (v13 != -1) {
        swift_once();
      }
      uint64_t v14 = type metadata accessor for Logger();
      sub_100010324(v14, (uint64_t)qword_10170F168);
      swift_retain_n();
      swift_bridgeObjectRetain_n();
      uint64_t v15 = Logger.logObject.getter();
      os_log_type_t v16 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v15, v16))
      {
        os_log_type_t type = v16;
        uint64_t v17 = swift_slowAlloc();
        uint64_t v21 = swift_slowAlloc();
        uint64_t v22 = v8;
        *(_DWORD *)uint64_t v17 = 136315650;
        swift_getMetatypeMetadata();
        uint64_t v18 = String.init<A>(describing:)();
        uint64_t v22 = sub_1008FA0F0(v18, v19, &v21);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        *(_WORD *)(v17 + 12) = 2080;
        swift_bridgeObjectRetain();
        uint64_t v22 = sub_1008FA0F0(v11, v10, &v21);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_release_n();
        swift_bridgeObjectRelease();
        *(_WORD *)(v17 + 22) = 2080;
        swift_bridgeObjectRetain();
        uint64_t v22 = sub_1008FA0F0(a1, a2, &v21);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease_n();
        _os_log_impl((void *)&_mh_execute_header, v15, type, "%s: Ignoring delegate callback from wrong IDS service! Expected %s, received: %s", (uint8_t *)v17, 0x20u);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
        sub_1000A1534((uint64_t)v9);
      }
      else
      {
        sub_1000A1534((uint64_t)v9);

        swift_bridgeObjectRelease_n();
        swift_release_n();
      }
    }
  }
}

void sub_101069538(uint64_t a1, unint64_t a2, uint64_t a3)
{
  uint64_t v4 = v3;
  uint64_t v8 = *(void *)v4;
  dispatch_assert_queue_V2(*(dispatch_queue_t *)(v4 + 48));
  char v9 = *(void (**)(uint64_t))(v4 + 208);
  if (v9)
  {
    uint64_t v11 = *(void *)(v4 + 16);
    unint64_t v10 = *(void *)(v4 + 24);
    BOOL v12 = v11 == a1 && v10 == a2;
    if (v12 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
    {
      swift_retain();
      v9(a3);
      sub_1000A1534((uint64_t)v9);
    }
    else
    {
      uint64_t v13 = qword_1016373D8;
      swift_retain();
      if (v13 != -1) {
        swift_once();
      }
      uint64_t v14 = type metadata accessor for Logger();
      sub_100010324(v14, (uint64_t)qword_10170F168);
      swift_retain_n();
      swift_bridgeObjectRetain_n();
      uint64_t v15 = Logger.logObject.getter();
      os_log_type_t v16 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v15, v16))
      {
        os_log_type_t type = v16;
        uint64_t v17 = swift_slowAlloc();
        uint64_t v21 = swift_slowAlloc();
        uint64_t v22 = v8;
        *(_DWORD *)uint64_t v17 = 136315650;
        swift_getMetatypeMetadata();
        uint64_t v18 = String.init<A>(describing:)();
        uint64_t v22 = sub_1008FA0F0(v18, v19, &v21);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        *(_WORD *)(v17 + 12) = 2080;
        swift_bridgeObjectRetain();
        uint64_t v22 = sub_1008FA0F0(v11, v10, &v21);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_release_n();
        swift_bridgeObjectRelease();
        *(_WORD *)(v17 + 22) = 2080;
        swift_bridgeObjectRetain();
        uint64_t v22 = sub_1008FA0F0(a1, a2, &v21);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease_n();
        _os_log_impl((void *)&_mh_execute_header, v15, type, "%s: Ignoring delegate callback from wrong IDS service! Expected %s, received: %s", (uint8_t *)v17, 0x20u);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
        sub_1000A1534((uint64_t)v9);
      }
      else
      {
        sub_1000A1534((uint64_t)v9);

        swift_bridgeObjectRelease_n();
        swift_release_n();
      }
    }
  }
}

void sub_10106988C(uint64_t a1, unint64_t a2, uint64_t a3)
{
  uint64_t v4 = v3;
  uint64_t v8 = *(void *)v4;
  dispatch_assert_queue_V2(*(dispatch_queue_t *)(v4 + 48));
  char v9 = *(void (**)(uint64_t))(v4 + 224);
  if (v9)
  {
    uint64_t v11 = *(void *)(v4 + 16);
    unint64_t v10 = *(void *)(v4 + 24);
    BOOL v12 = v11 == a1 && v10 == a2;
    if (v12 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
    {
      swift_retain();
      v9(a3);
      sub_1000A1534((uint64_t)v9);
    }
    else
    {
      uint64_t v13 = qword_1016373D8;
      swift_retain();
      if (v13 != -1) {
        swift_once();
      }
      uint64_t v14 = type metadata accessor for Logger();
      sub_100010324(v14, (uint64_t)qword_10170F168);
      swift_retain_n();
      swift_bridgeObjectRetain_n();
      uint64_t v15 = Logger.logObject.getter();
      os_log_type_t v16 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v15, v16))
      {
        os_log_type_t type = v16;
        uint64_t v17 = swift_slowAlloc();
        uint64_t v21 = swift_slowAlloc();
        uint64_t v22 = v8;
        *(_DWORD *)uint64_t v17 = 136315650;
        swift_getMetatypeMetadata();
        uint64_t v18 = String.init<A>(describing:)();
        uint64_t v22 = sub_1008FA0F0(v18, v19, &v21);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        *(_WORD *)(v17 + 12) = 2080;
        swift_bridgeObjectRetain();
        uint64_t v22 = sub_1008FA0F0(v11, v10, &v21);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_release_n();
        swift_bridgeObjectRelease();
        *(_WORD *)(v17 + 22) = 2080;
        swift_bridgeObjectRetain();
        uint64_t v22 = sub_1008FA0F0(a1, a2, &v21);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease_n();
        _os_log_impl((void *)&_mh_execute_header, v15, type, "%s: Ignoring delegate callback from wrong IDS service! Expected %s, received: %s", (uint8_t *)v17, 0x20u);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
        sub_1000A1534((uint64_t)v9);
      }
      else
      {
        sub_1000A1534((uint64_t)v9);

        swift_bridgeObjectRelease_n();
        swift_release_n();
      }
    }
  }
}

void sub_101069BE8(uint64_t a1, unint64_t a2, uint64_t a3, void (*a4)(char *, NSObject *, uint64_t), NSObject *a5, NSObject *a6, int a7, uint64_t a8, unint64_t a9, uint64_t a10)
{
}

void sub_101069BF4(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, unsigned int a7, uint64_t a8, unint64_t a9, uint64_t a10)
{
}

void sub_101069C0C(uint64_t a1, uint64_t a2, void *a3, unsigned int a4, uint64_t a5, void *a6, uint64_t a7, unint64_t a8)
{
}

BOOL sub_101069C28(uint64_t a1, uint64_t a2)
{
  if (*(_DWORD *)a1 == *(_DWORD *)a2) {
    return *(void *)(a1 + 8) < *(void *)(a2 + 8);
  }
  else {
    return *(_DWORD *)a1 < *(_DWORD *)a2;
  }
}

BOOL sub_101069C50(uint64_t a1, uint64_t a2)
{
  if (*(_DWORD *)a2 == *(_DWORD *)a1) {
    return *(void *)(a2 + 8) >= *(void *)(a1 + 8);
  }
  else {
    return *(_DWORD *)a2 >= *(_DWORD *)a1;
  }
}

BOOL sub_101069C78(uint64_t a1, uint64_t a2)
{
  if (*(_DWORD *)a1 == *(_DWORD *)a2) {
    return *(void *)(a1 + 8) >= *(void *)(a2 + 8);
  }
  else {
    return *(_DWORD *)a1 >= *(_DWORD *)a2;
  }
}

BOOL sub_101069CA0(uint64_t a1, uint64_t a2)
{
  if (*(_DWORD *)a2 == *(_DWORD *)a1) {
    return *(void *)(a2 + 8) < *(void *)(a1 + 8);
  }
  else {
    return *(_DWORD *)a2 < *(_DWORD *)a1;
  }
}

Swift::Int sub_101069CC8()
{
  Swift::UInt32 v1 = *(_DWORD *)v0;
  Swift::UInt v2 = *(void *)(v0 + 8);
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  Hasher._combine(_:)(v2);
  return Hasher._finalize()();
}

void sub_101069D28()
{
  Swift::UInt v1 = *(void *)(v0 + 8);
  Hasher._combine(_:)(*(_DWORD *)v0);
  Hasher._combine(_:)(v1);
}

Swift::Int sub_101069D68()
{
  Swift::UInt32 v1 = *(_DWORD *)v0;
  Swift::UInt v2 = *(void *)(v0 + 8);
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  Hasher._combine(_:)(v2);
  return Hasher._finalize()();
}

uint64_t sub_101069DC4()
{
  uint64_t v3 = dispatch thunk of CustomStringConvertible.description.getter();
  v0._countAndFlagsBits = 118;
  v0._object = (void *)0xE100000000000000;
  String.append(_:)(v0);
  v1._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  String.append(_:)(v1);
  swift_bridgeObjectRelease();
  return v3;
}

BOOL sub_101069E54(uint64_t a1, uint64_t a2)
{
  return *(_DWORD *)a1 == *(_DWORD *)a2 && *(void *)(a1 + 8) == *(void *)(a2 + 8);
}

unint64_t sub_101069E80()
{
  Swift::String v1 = v0;
  _StringGuts.grow(_:)(38);
  swift_bridgeObjectRelease();
  unint64_t v74 = 0xD000000000000022;
  unint64_t v75 = 0x800000010141FE30;
  uint64_t v2 = *v0;
  uint64_t v3 = (void *)v0[1];
  swift_bridgeObjectRetain();
  v4._countAndFlagsBits = v2;
  v4._object = v3;
  String.append(_:)(v4);
  swift_bridgeObjectRelease();
  v5._countAndFlagsBits = 2570;
  v5._object = (void *)0xE200000000000000;
  String.append(_:)(v5);
  uint64_t v6 = v0[2];
  uint64_t v79 = v6;
  if (*(void *)(v6 + 16))
  {
    v7._countAndFlagsBits = 0xA3A646E6553;
    v7._object = (void *)0xE600000000000000;
    String.append(_:)(v7);
    swift_bridgeObjectRetain_n();
    uint64_t v8 = sub_10070FAFC(v6);
    sub_10025C634((uint64_t)&v79);
    v73._countAndFlagsBits = (uint64_t)v8;
    sub_101063D00(&v73._countAndFlagsBits);
    sub_10025C634((uint64_t)&v79);
    uint64_t v9 = *(void *)(v73._countAndFlagsBits + 16);
    if (v9)
    {
      unint64_t v10 = (Swift::UInt *)(v73._countAndFlagsBits + 40);
      do
      {
        if (*(void *)(v6 + 16))
        {
          Swift::UInt32 v11 = *((_DWORD *)v10 - 2);
          Swift::UInt v12 = *v10;
          sub_100723F30(v11, *v10);
          if (v13)
          {
            v73._countAndFlagsBits = 0;
            v73._object = (void *)0xE000000000000000;
            _StringGuts.grow(_:)(20);
            swift_bridgeObjectRelease();
            v73._countAndFlagsBits = 8224;
            v73._object = (void *)0xE200000000000000;
            LODWORD(v78) = v11;
            v69._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
            v69._object = v14;
            v15._countAndFlagsBits = 118;
            v15._object = (void *)0xE100000000000000;
            String.append(_:)(v15);
            Swift::UInt v78 = v12;
            v16._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
            String.append(_:)(v16);
            swift_bridgeObjectRelease();
            String.append(_:)(v69);
            swift_bridgeObjectRelease();
            v17._countAndFlagsBits = 8250;
            v17._object = (void *)0xE200000000000000;
            String.append(_:)(v17);
            v18._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
            String.append(_:)(v18);
            swift_bridgeObjectRelease();
            v19._countAndFlagsBits = 23328;
            v19._object = (void *)0xE200000000000000;
            String.append(_:)(v19);
            v20._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
            String.append(_:)(v20);
            swift_bridgeObjectRelease();
            v21._countAndFlagsBits = 0xA5D736574796220;
            v21._object = (void *)0xE800000000000000;
            String.append(_:)(v21);
            String.append(_:)(v73);
            swift_bridgeObjectRelease();
          }
        }
        v10 += 2;
        --v9;
      }
      while (v9);
    }
    swift_release();
    Swift::String v1 = v0;
  }
  uint64_t v22 = v1[3];
  Swift::UInt v78 = v22;
  if (*(void *)(v22 + 16))
  {
    v23._countAndFlagsBits = 0x73655220646E6553;
    v23._object = (void *)0xEF0A3A656372756FLL;
    String.append(_:)(v23);
    swift_bridgeObjectRetain_n();
    uint64_t v24 = sub_10070FAFC(v22);
    sub_10025C634((uint64_t)&v78);
    v73._countAndFlagsBits = (uint64_t)v24;
    sub_101063D00(&v73._countAndFlagsBits);
    sub_10025C634((uint64_t)&v78);
    uint64_t v25 = *(void *)(v73._countAndFlagsBits + 16);
    if (v25)
    {
      uint64_t v26 = (Swift::UInt *)(v73._countAndFlagsBits + 40);
      do
      {
        if (*(void *)(v22 + 16))
        {
          Swift::UInt32 v27 = *((_DWORD *)v26 - 2);
          Swift::UInt v28 = *v26;
          sub_100723F30(v27, *v26);
          if (v29)
          {
            v73._countAndFlagsBits = 0;
            v73._object = (void *)0xE000000000000000;
            _StringGuts.grow(_:)(20);
            swift_bridgeObjectRelease();
            v73._countAndFlagsBits = 8224;
            v73._object = (void *)0xE200000000000000;
            LODWORD(v77) = v27;
            v70._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
            v70._object = v30;
            v31._countAndFlagsBits = 118;
            v31._object = (void *)0xE100000000000000;
            String.append(_:)(v31);
            Swift::UInt v77 = v28;
            v32._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
            String.append(_:)(v32);
            swift_bridgeObjectRelease();
            String.append(_:)(v70);
            swift_bridgeObjectRelease();
            v33._countAndFlagsBits = 8250;
            v33._object = (void *)0xE200000000000000;
            String.append(_:)(v33);
            v34._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
            String.append(_:)(v34);
            swift_bridgeObjectRelease();
            v35._countAndFlagsBits = 23328;
            v35._object = (void *)0xE200000000000000;
            String.append(_:)(v35);
            v36._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
            String.append(_:)(v36);
            swift_bridgeObjectRelease();
            v37._countAndFlagsBits = 0xA5D736574796220;
            v37._object = (void *)0xE800000000000000;
            String.append(_:)(v37);
            String.append(_:)(v73);
            swift_bridgeObjectRelease();
          }
        }
        v26 += 2;
        --v25;
      }
      while (v25);
    }
    swift_release();
    Swift::String v1 = v0;
  }
  uint64_t v38 = v1[4];
  Swift::UInt v77 = v38;
  if (*(void *)(v38 + 16))
  {
    v39._countAndFlagsBits = 0x3A65766965636552;
    v39._object = (void *)0xE90000000000000ALL;
    String.append(_:)(v39);
    swift_bridgeObjectRetain_n();
    uint64_t v40 = sub_10070FAFC(v38);
    sub_10025C634((uint64_t)&v77);
    v73._countAndFlagsBits = (uint64_t)v40;
    sub_101063D00(&v73._countAndFlagsBits);
    sub_10025C634((uint64_t)&v77);
    uint64_t v41 = *(void *)(v73._countAndFlagsBits + 16);
    if (v41)
    {
      uint64_t v42 = (Swift::UInt *)(v73._countAndFlagsBits + 40);
      do
      {
        if (*(void *)(v38 + 16))
        {
          Swift::UInt32 v43 = *((_DWORD *)v42 - 2);
          Swift::UInt v44 = *v42;
          sub_100723F30(v43, *v42);
          if (v45)
          {
            v73._countAndFlagsBits = 0;
            v73._object = (void *)0xE000000000000000;
            _StringGuts.grow(_:)(20);
            swift_bridgeObjectRelease();
            v73._countAndFlagsBits = 8224;
            v73._object = (void *)0xE200000000000000;
            LODWORD(v76) = v43;
            v71._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
            v71._object = v46;
            v47._countAndFlagsBits = 118;
            v47._object = (void *)0xE100000000000000;
            String.append(_:)(v47);
            Swift::UInt v76 = v44;
            v48._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
            String.append(_:)(v48);
            swift_bridgeObjectRelease();
            String.append(_:)(v71);
            swift_bridgeObjectRelease();
            v49._countAndFlagsBits = 8250;
            v49._object = (void *)0xE200000000000000;
            String.append(_:)(v49);
            v50._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
            String.append(_:)(v50);
            swift_bridgeObjectRelease();
            v51._countAndFlagsBits = 23328;
            v51._object = (void *)0xE200000000000000;
            String.append(_:)(v51);
            v52._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
            String.append(_:)(v52);
            swift_bridgeObjectRelease();
            v53._countAndFlagsBits = 0xA5D736574796220;
            v53._object = (void *)0xE800000000000000;
            String.append(_:)(v53);
            String.append(_:)(v73);
            swift_bridgeObjectRelease();
          }
        }
        v42 += 2;
        --v41;
      }
      while (v41);
    }
    swift_release();
    Swift::String v1 = v0;
  }
  uint64_t v54 = v1[5];
  Swift::UInt v76 = v54;
  if (*(void *)(v54 + 16))
  {
    v55._object = (void *)0x800000010141FE60;
    v55._countAndFlagsBits = 0xD000000000000012;
    String.append(_:)(v55);
    swift_bridgeObjectRetain_n();
    uint64_t v56 = sub_10070FAFC(v54);
    sub_10025C634((uint64_t)&v76);
    v73._countAndFlagsBits = (uint64_t)v56;
    sub_101063D00(&v73._countAndFlagsBits);
    sub_10025C634((uint64_t)&v76);
    uint64_t v57 = *(void *)(v73._countAndFlagsBits + 16);
    if (v57)
    {
      uint64_t v58 = (Swift::UInt *)(v73._countAndFlagsBits + 40);
      do
      {
        if (*(void *)(v54 + 16))
        {
          sub_100723F30(*((_DWORD *)v58 - 2), *v58);
          if (v59)
          {
            v73._countAndFlagsBits = 0;
            v73._object = (void *)0xE000000000000000;
            _StringGuts.grow(_:)(20);
            swift_bridgeObjectRelease();
            v73._countAndFlagsBits = 8224;
            v73._object = (void *)0xE200000000000000;
            v72._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
            v72._object = v60;
            v61._countAndFlagsBits = 118;
            v61._object = (void *)0xE100000000000000;
            String.append(_:)(v61);
            v62._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
            String.append(_:)(v62);
            swift_bridgeObjectRelease();
            String.append(_:)(v72);
            swift_bridgeObjectRelease();
            v63._countAndFlagsBits = 8250;
            v63._object = (void *)0xE200000000000000;
            String.append(_:)(v63);
            v64._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
            String.append(_:)(v64);
            swift_bridgeObjectRelease();
            v65._countAndFlagsBits = 23328;
            v65._object = (void *)0xE200000000000000;
            String.append(_:)(v65);
            v66._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
            String.append(_:)(v66);
            swift_bridgeObjectRelease();
            v67._countAndFlagsBits = 0xA5D736574796220;
            v67._object = (void *)0xE800000000000000;
            String.append(_:)(v67);
            String.append(_:)(v73);
            swift_bridgeObjectRelease();
          }
        }
        v58 += 2;
        --v57;
      }
      while (v57);
    }
    swift_release();
  }
  return v74;
}

Swift::Int sub_10106A804(uint64_t *a1)
{
  Swift::Int v3 = a1[1];
  Swift::Int result = _minimumMergeRunLength(_:)(v3);
  if (result >= v3)
  {
    if (v3 < 0) {
      goto LABEL_136;
    }
    if (v3) {
      return sub_10106AEC8(0, v3, 1, a1);
    }
    return result;
  }
  if (v3 >= 0) {
    uint64_t v5 = v3;
  }
  else {
    uint64_t v5 = v3 + 1;
  }
  if (v3 < -1) {
    goto LABEL_144;
  }
  Swift::Int v6 = result;
  uint64_t v102 = a1;
  if (v3 < 2)
  {
    uint64_t v9 = _swiftEmptyArrayStorage;
    __dst = (char *)&_swiftEmptyArrayStorage[4];
    if (v3 != 1)
    {
      unint64_t v13 = _swiftEmptyArrayStorage[2];
      Swift::UInt v12 = (char *)_swiftEmptyArrayStorage;
LABEL_102:
      uint64_t v93 = v12;
      uint64_t v104 = v9;
      if (v13 >= 2)
      {
        uint64_t v94 = *v102;
        do
        {
          unint64_t v95 = v13 - 2;
          if (v13 < 2) {
            goto LABEL_131;
          }
          if (!v94) {
            goto LABEL_143;
          }
          uint64_t v96 = v93;
          uint64_t v97 = *(void *)&v93[16 * v95 + 32];
          uint64_t v98 = *(void *)&v93[16 * v13 + 24];
          sub_10106AF5C((char *)(v94 + 16 * v97), (char *)(v94 + 16 * *(void *)&v93[16 * v13 + 16]), v94 + 16 * v98, __dst);
          if (v1) {
            break;
          }
          if (v98 < v97) {
            goto LABEL_132;
          }
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
            uint64_t v96 = sub_100B73584((uint64_t)v96);
          }
          if (v95 >= *((void *)v96 + 2)) {
            goto LABEL_133;
          }
          uint64_t v99 = &v96[16 * v95 + 32];
          *(void *)uint64_t v99 = v97;
          *((void *)v99 + 1) = v98;
          unint64_t v100 = *((void *)v96 + 2);
          if (v13 > v100) {
            goto LABEL_134;
          }
          memmove(&v96[16 * v13 + 16], &v96[16 * v13 + 32], 16 * (v100 - v13));
          uint64_t v93 = v96;
          *((void *)v96 + 2) = v100 - 1;
          unint64_t v13 = v100 - 1;
        }
        while (v100 > 2);
      }
LABEL_99:
      swift_bridgeObjectRelease();
      v104[2] = 0;
      return swift_bridgeObjectRelease();
    }
    uint64_t v104 = _swiftEmptyArrayStorage;
  }
  else
  {
    uint64_t v7 = v5 >> 1;
    uint64_t v8 = static Array._allocateBufferUninitialized(minimumCapacity:)();
    *(void *)(v8 + 16) = v7;
    uint64_t v104 = (void *)v8;
    __dst = (char *)(v8 + 32);
  }
  Swift::Int v10 = 0;
  uint64_t v11 = *a1;
  uint64_t v103 = *a1 + 40;
  uint64_t v101 = *a1 - 16;
  Swift::UInt v12 = (char *)_swiftEmptyArrayStorage;
  Swift::Int v105 = v6;
  Swift::Int v106 = v3;
  uint64_t v107 = v11;
  while (1)
  {
    Swift::Int v14 = v10++;
    if (v10 < v3)
    {
      uint64_t v15 = v11 + 16 * v10;
      int v16 = *(_DWORD *)v15;
      uint64_t v17 = *(void *)(v15 + 8);
      uint64_t v18 = v11 + 16 * v14;
      int v19 = *(_DWORD *)v18;
      int v20 = v17 < *(void *)(v18 + 8);
      BOOL v21 = v16 == v19;
      BOOL v22 = v16 < v19;
      if (!v21) {
        int v20 = v22;
      }
      Swift::Int v10 = v14 + 2;
      if (v14 + 2 < v3)
      {
        Swift::String v23 = (void *)(v103 + 16 * v14);
        while (1)
        {
          int v24 = *((_DWORD *)v23 - 2);
          uint64_t v25 = *v23;
          BOOL v26 = *v23 < v17;
          BOOL v21 = v24 == v16;
          int v27 = v24 < v16;
          if (v21) {
            int v27 = v26;
          }
          if (v20 != v27) {
            break;
          }
          v23 += 2;
          ++v10;
          uint64_t v17 = v25;
          int v16 = v24;
          if (v3 == v10)
          {
            Swift::Int v10 = v3;
            break;
          }
        }
      }
      if (v20)
      {
        if (v10 < v14) {
          goto LABEL_137;
        }
        if (v14 < v10)
        {
          uint64_t v28 = 16 * v10;
          uint64_t v29 = 16 * v14;
          Swift::Int v30 = v10;
          Swift::Int v31 = v14;
          do
          {
            if (v31 != --v30)
            {
              if (!v11) {
                goto LABEL_142;
              }
              uint64_t v32 = v11 + v28;
              int v33 = *(_DWORD *)(v11 + v29);
              uint64_t v34 = *(void *)(v11 + v29 + 8);
              *(_OWORD *)(v11 + v29) = *(_OWORD *)(v11 + v28 - 16);
              *(_DWORD *)(v32 - 16) = v33;
              *(void *)(v32 - 8) = v34;
            }
            ++v31;
            v28 -= 16;
            v29 += 16;
          }
          while (v31 < v30);
        }
      }
    }
    if (v10 >= v3) {
      goto LABEL_52;
    }
    if (__OFSUB__(v10, v14)) {
      goto LABEL_135;
    }
    if (v10 - v14 >= v6) {
      goto LABEL_52;
    }
    Swift::Int v35 = v14 + v6;
    if (__OFADD__(v14, v6)) {
      goto LABEL_138;
    }
    if (v35 >= v3) {
      Swift::Int v35 = v3;
    }
    if (v35 < v14) {
      break;
    }
    if (v10 != v35)
    {
      uint64_t v36 = v101 + 16 * v10;
      do
      {
        uint64_t v37 = v11 + 16 * v10;
        int v38 = *(_DWORD *)v37;
        uint64_t v39 = *(void *)(v37 + 8);
        Swift::Int v40 = v14;
        uint64_t v41 = v36;
        do
        {
          BOOL v42 = v38 < *(_DWORD *)v41;
          if (v38 == *(_DWORD *)v41) {
            BOOL v42 = v39 < *(void *)(v41 + 8);
          }
          if (!v42) {
            break;
          }
          if (!v11) {
            goto LABEL_140;
          }
          *(_OWORD *)(v41 + 16) = *(_OWORD *)v41;
          *(_DWORD *)uint64_t v41 = v38;
          *(void *)(v41 + 8) = v39;
          v41 -= 16;
          ++v40;
        }
        while (v10 != v40);
        ++v10;
        v36 += 16;
      }
      while (v10 != v35);
      Swift::Int v10 = v35;
    }
LABEL_52:
    if (v10 < v14) {
      goto LABEL_130;
    }
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
      Swift::UInt v12 = sub_100B729CC(0, *((void *)v12 + 2) + 1, 1, v12);
    }
    unint64_t v44 = *((void *)v12 + 2);
    unint64_t v43 = *((void *)v12 + 3);
    unint64_t v13 = v44 + 1;
    uint64_t v11 = v107;
    if (v44 >= v43 >> 1)
    {
      uint64_t v92 = sub_100B729CC((char *)(v43 > 1), v44 + 1, 1, v12);
      uint64_t v11 = v107;
      Swift::UInt v12 = v92;
    }
    *((void *)v12 + 2) = v13;
    char v45 = v12 + 32;
    uint64_t v46 = &v12[16 * v44 + 32];
    *(void *)uint64_t v46 = v14;
    *((void *)v46 + 1) = v10;
    if (v44)
    {
      while (1)
      {
        unint64_t v47 = v13 - 1;
        if (v13 >= 4)
        {
          Swift::String v52 = &v45[16 * v13];
          uint64_t v53 = *((void *)v52 - 8);
          uint64_t v54 = *((void *)v52 - 7);
          BOOL v58 = __OFSUB__(v54, v53);
          uint64_t v55 = v54 - v53;
          if (v58) {
            goto LABEL_119;
          }
          uint64_t v57 = *((void *)v52 - 6);
          uint64_t v56 = *((void *)v52 - 5);
          BOOL v58 = __OFSUB__(v56, v57);
          uint64_t v50 = v56 - v57;
          char v51 = v58;
          if (v58) {
            goto LABEL_120;
          }
          unint64_t v59 = v13 - 2;
          os_log_t v60 = &v45[16 * v13 - 32];
          uint64_t v62 = *(void *)v60;
          uint64_t v61 = *((void *)v60 + 1);
          BOOL v58 = __OFSUB__(v61, v62);
          uint64_t v63 = v61 - v62;
          if (v58) {
            goto LABEL_122;
          }
          BOOL v58 = __OFADD__(v50, v63);
          uint64_t v64 = v50 + v63;
          if (v58) {
            goto LABEL_125;
          }
          if (v64 >= v55)
          {
            unsigned int v82 = &v45[16 * v47];
            uint64_t v84 = *(void *)v82;
            uint64_t v83 = *((void *)v82 + 1);
            BOOL v58 = __OFSUB__(v83, v84);
            uint64_t v85 = v83 - v84;
            if (v58) {
              goto LABEL_129;
            }
            BOOL v75 = v50 < v85;
            goto LABEL_89;
          }
        }
        else
        {
          if (v13 != 3)
          {
            uint64_t v76 = *((void *)v12 + 4);
            uint64_t v77 = *((void *)v12 + 5);
            BOOL v58 = __OFSUB__(v77, v76);
            uint64_t v69 = v77 - v76;
            char v70 = v58;
            goto LABEL_83;
          }
          uint64_t v49 = *((void *)v12 + 4);
          uint64_t v48 = *((void *)v12 + 5);
          BOOL v58 = __OFSUB__(v48, v49);
          uint64_t v50 = v48 - v49;
          char v51 = v58;
        }
        if (v51) {
          goto LABEL_121;
        }
        unint64_t v59 = v13 - 2;
        Swift::String v65 = &v45[16 * v13 - 32];
        uint64_t v67 = *(void *)v65;
        uint64_t v66 = *((void *)v65 + 1);
        BOOL v68 = __OFSUB__(v66, v67);
        uint64_t v69 = v66 - v67;
        char v70 = v68;
        if (v68) {
          goto LABEL_124;
        }
        Swift::String v71 = &v45[16 * v47];
        uint64_t v73 = *(void *)v71;
        uint64_t v72 = *((void *)v71 + 1);
        BOOL v58 = __OFSUB__(v72, v73);
        uint64_t v74 = v72 - v73;
        if (v58) {
          goto LABEL_127;
        }
        if (__OFADD__(v69, v74)) {
          goto LABEL_128;
        }
        if (v69 + v74 >= v50)
        {
          BOOL v75 = v50 < v74;
LABEL_89:
          if (v75) {
            unint64_t v47 = v59;
          }
          goto LABEL_91;
        }
LABEL_83:
        if (v70) {
          goto LABEL_123;
        }
        Swift::UInt v78 = &v45[16 * v47];
        uint64_t v80 = *(void *)v78;
        uint64_t v79 = *((void *)v78 + 1);
        BOOL v58 = __OFSUB__(v79, v80);
        uint64_t v81 = v79 - v80;
        if (v58) {
          goto LABEL_126;
        }
        if (v81 < v69) {
          goto LABEL_15;
        }
LABEL_91:
        unint64_t v86 = v47 - 1;
        if (v47 - 1 >= v13)
        {
          __break(1u);
LABEL_116:
          __break(1u);
LABEL_117:
          __break(1u);
LABEL_118:
          __break(1u);
LABEL_119:
          __break(1u);
LABEL_120:
          __break(1u);
LABEL_121:
          __break(1u);
LABEL_122:
          __break(1u);
LABEL_123:
          __break(1u);
LABEL_124:
          __break(1u);
LABEL_125:
          __break(1u);
LABEL_126:
          __break(1u);
LABEL_127:
          __break(1u);
LABEL_128:
          __break(1u);
LABEL_129:
          __break(1u);
LABEL_130:
          __break(1u);
LABEL_131:
          __break(1u);
LABEL_132:
          __break(1u);
LABEL_133:
          __break(1u);
LABEL_134:
          __break(1u);
LABEL_135:
          __break(1u);
LABEL_136:
          __break(1u);
LABEL_137:
          __break(1u);
LABEL_138:
          __break(1u);
          goto LABEL_139;
        }
        if (!v11) {
          goto LABEL_141;
        }
        uint64_t v87 = &v45[16 * v86];
        uint64_t v88 = *(void *)v87;
        uint64_t v89 = &v45[16 * v47];
        uint64_t v90 = *((void *)v89 + 1);
        sub_10106AF5C((char *)(v11 + 16 * *(void *)v87), (char *)(v11 + 16 * *(void *)v89), v11 + 16 * v90, __dst);
        if (v1) {
          goto LABEL_99;
        }
        if (v90 < v88) {
          goto LABEL_116;
        }
        if (v47 > *((void *)v12 + 2)) {
          goto LABEL_117;
        }
        *(void *)uint64_t v87 = v88;
        *(void *)&v45[16 * v86 + 8] = v90;
        unint64_t v91 = *((void *)v12 + 2);
        if (v47 >= v91) {
          goto LABEL_118;
        }
        unint64_t v13 = v91 - 1;
        memmove(&v45[16 * v47], v89 + 16, 16 * (v91 - 1 - v47));
        *((void *)v12 + 2) = v91 - 1;
        uint64_t v11 = v107;
        if (v91 <= 2) {
          goto LABEL_15;
        }
      }
    }
    unint64_t v13 = 1;
LABEL_15:
    Swift::Int v6 = v105;
    Swift::Int v3 = v106;
    if (v10 >= v106)
    {
      uint64_t v9 = v104;
      goto LABEL_102;
    }
  }
LABEL_139:
  __break(1u);
LABEL_140:
  __break(1u);
LABEL_141:
  __break(1u);
LABEL_142:
  __break(1u);
LABEL_143:
  __break(1u);
LABEL_144:
  Swift::Int result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_10106AEC8(uint64_t result, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  if (a3 != a2)
  {
    uint64_t v4 = *a4;
    uint64_t v5 = *a4 + 16 * a3 - 16;
LABEL_5:
    Swift::Int v6 = (int *)(v4 + 16 * a3);
    int v7 = *v6;
    uint64_t v8 = *((void *)v6 + 1);
    uint64_t v9 = result;
    uint64_t v10 = v5;
    while (1)
    {
      BOOL v11 = v7 < *(_DWORD *)v10;
      if (v7 == *(_DWORD *)v10) {
        BOOL v11 = v8 < *(void *)(v10 + 8);
      }
      if (!v11)
      {
LABEL_4:
        ++a3;
        v5 += 16;
        if (a3 == a2) {
          return result;
        }
        goto LABEL_5;
      }
      if (!v4) {
        break;
      }
      *(_OWORD *)(v10 + 16) = *(_OWORD *)v10;
      *(_DWORD *)uint64_t v10 = v7;
      *(void *)(v10 + 8) = v8;
      v10 -= 16;
      if (a3 == ++v9) {
        goto LABEL_4;
      }
    }
    __break(1u);
  }
  return result;
}

uint64_t sub_10106AF5C(char *__src, char *a2, unint64_t a3, char *__dst)
{
  uint64_t v4 = __dst;
  Swift::Int v6 = a2;
  int v7 = __src;
  int64_t v8 = a2 - __src;
  int64_t v9 = a2 - __src + 15;
  if (a2 - __src >= 0) {
    int64_t v9 = a2 - __src;
  }
  uint64_t v10 = v9 >> 4;
  uint64_t v11 = a3 - (void)a2;
  uint64_t v12 = a3 - (void)a2 + 15;
  if ((uint64_t)(a3 - (void)a2) >= 0) {
    uint64_t v12 = a3 - (void)a2;
  }
  uint64_t v13 = v12 >> 4;
  uint64_t v28 = __src;
  int v27 = __dst;
  if (v10 >= v12 >> 4)
  {
    if (v11 >= -15)
    {
      if (__dst != a2 || &a2[16 * v13] <= __dst) {
        memmove(__dst, a2, 16 * v13);
      }
      uint64_t v17 = &v4[16 * v13];
      BOOL v26 = v17;
      uint64_t v28 = v6;
      if (v7 < v6 && v11 >= 16)
      {
        uint64_t v18 = (char *)(a3 - 16);
        int v19 = v6;
        while (1)
        {
          int v20 = v18 + 16;
          int v21 = *((_DWORD *)v17 - 4);
          int v22 = *((_DWORD *)v19 - 4);
          v19 -= 16;
          BOOL v23 = v21 == v22;
          BOOL v24 = v21 < v22;
          if (v23) {
            BOOL v24 = *((void *)v17 - 1) < *((void *)v19 + 1);
          }
          if (v24)
          {
            if (v20 != v6 || v18 >= v6) {
              *(_OWORD *)uint64_t v18 = *(_OWORD *)v19;
            }
            uint64_t v28 = v19;
            if (v19 <= v7) {
              goto LABEL_46;
            }
          }
          else
          {
            BOOL v26 = v17 - 16;
            if (v20 < v17 || v18 >= v17 || v20 != v17) {
              *(_OWORD *)uint64_t v18 = *((_OWORD *)v17 - 1);
            }
            int v19 = v6;
            v17 -= 16;
            if (v6 <= v7) {
              goto LABEL_46;
            }
          }
          v18 -= 16;
          Swift::Int v6 = v19;
          if (v17 <= v4) {
            goto LABEL_46;
          }
        }
      }
      goto LABEL_46;
    }
  }
  else if (v8 >= -15)
  {
    if (__dst != __src || &__src[16 * v10] <= __dst) {
      memmove(__dst, __src, 16 * v10);
    }
    Swift::Int v14 = &v4[16 * v10];
    BOOL v26 = v14;
    if ((unint64_t)v6 < a3 && v8 >= 16)
    {
      do
      {
        BOOL v15 = *(_DWORD *)v6 < *(_DWORD *)v4;
        if (*(_DWORD *)v6 == *(_DWORD *)v4) {
          BOOL v15 = *((void *)v6 + 1) < *((void *)v4 + 1);
        }
        if (v15)
        {
          int v16 = v6 + 16;
          if (v7 < v6 || v7 >= v16 || v7 != v6) {
            *(_OWORD *)int v7 = *(_OWORD *)v6;
          }
        }
        else
        {
          if (v7 != v4) {
            *(_OWORD *)int v7 = *(_OWORD *)v4;
          }
          v4 += 16;
          int v27 = v4;
          int v16 = v6;
        }
        v7 += 16;
        if (v4 >= v14) {
          break;
        }
        Swift::Int v6 = v16;
      }
      while ((unint64_t)v16 < a3);
      uint64_t v28 = v7;
    }
LABEL_46:
    sub_100B72AC8((void **)&v28, (const void **)&v27, &v26);
    return 1;
  }
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

void sub_10106B210(void *a1, unsigned int a2, uint64_t a3, id a4, uint64_t a5, unint64_t a6)
{
  uint64_t v7 = v6;
  uint64_t v72 = a5;
  uint64_t v13 = *(void *)v7;
  uint64_t v14 = type metadata accessor for BeaconSharingSessionContext();
  __chkstk_darwin(v14);
  int v16 = (char *)v60 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  dispatch_assert_queue_V2(*(dispatch_queue_t *)(v7 + 48));
  uint64_t v17 = *(void (**)(void, void, void, void, void))(v7 + 240);
  if (v17)
  {
    uint64_t v67 = v14;
    uint64_t v68 = a3;
    unsigned int v64 = a2;
    uint64_t v18 = qword_1016373D8;
    swift_retain();
    if (v18 != -1) {
      swift_once();
    }
    uint64_t v19 = type metadata accessor for Logger();
    uint64_t v20 = sub_100010324(v19, (uint64_t)qword_10170F168);
    id v21 = a1;
    swift_bridgeObjectRetain();
    uint64_t v22 = v72;
    sub_1000361E0(v72, a6);
    id v71 = v21;
    swift_bridgeObjectRetain();
    sub_1000361E0(v22, a6);
    uint64_t v70 = v20;
    BOOL v23 = Logger.logObject.getter();
    os_log_type_t v24 = static os_log_type_t.debug.getter();
    int v25 = v24;
    BOOL v26 = os_log_type_enabled(v23, v24);
    Swift::String v65 = v16;
    if (v26)
    {
      uint64_t v27 = swift_slowAlloc();
      uint64_t v63 = swift_slowAlloc();
      v73[0] = v63;
      *(_DWORD *)uint64_t v27 = 136315906;
      unint64_t v69 = a6;
      *(void *)&long long v74 = v13;
      swift_getMetatypeMetadata();
      int v62 = v25;
      uint64_t v28 = String.init<A>(describing:)();
      uint64_t v66 = v13;
      *(void *)&long long v74 = sub_1008FA0F0(v28, v29, v73);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      *(_WORD *)(v27 + 12) = 2080;
      v60[1] = v27 + 14;
      id v30 = v71;
      id v31 = [v30 description];
      os_log_t v61 = v23;
      uint64_t v32 = v17;
      id v33 = v31;
      unint64_t v34 = (unint64_t)a4;
      uint64_t v35 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      unint64_t v37 = v36;

      uint64_t v17 = v32;
      uint64_t v38 = v35;
      a4 = (id)v34;
      *(void *)&long long v74 = sub_1008FA0F0(v38, v37, v73);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();

      uint64_t v13 = v66;
      swift_bridgeObjectRelease();
      *(_WORD *)(v27 + 22) = 2080;
      swift_bridgeObjectRetain();
      *(void *)&long long v74 = sub_1008FA0F0(v68, v34, v73);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      *(_WORD *)(v27 + 32) = 2080;
      uint64_t v39 = v72;
      uint64_t v40 = Data.hexString.getter();
      *(void *)&long long v74 = sub_1008FA0F0(v40, v41, v73);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      a6 = v69;
      swift_bridgeObjectRelease();
      sub_10001CFB8(v39, a6);
      sub_10001CFB8(v39, a6);
      BOOL v23 = v61;
      _os_log_impl((void *)&_mh_execute_header, v61, (os_log_type_t)v62, "%s: inviteReceivedFor %s fromId: %s withContext: %s", (uint8_t *)v27, 0x2Au);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      swift_bridgeObjectRelease_n();
      id v42 = v71;

      sub_10001CFB8(v22, a6);
      sub_10001CFB8(v22, a6);
    }

    long long v43 = *(_OWORD *)(v13 + 96);
    long long v74 = *(_OWORD *)(v13 + 80);
    long long v75 = v43;
    type metadata accessor for MessagingSession();
    double v44 = *(double *)(v7 + 96);
    double v45 = *(double *)(v7 + 104);
    uint64_t v46 = *(void *)(v7 + 112);
    unint64_t v47 = v71;
    swift_retain();
    uint64_t v48 = sub_10042DD68(v47, v7, v46, v44, v45);
    swift_retain_n();
    uint64_t v49 = Logger.logObject.getter();
    os_log_type_t v50 = static os_log_type_t.debug.getter();
    int v51 = v50;
    if (os_log_type_enabled(v49, v50))
    {
      uint64_t v52 = swift_slowAlloc();
      uint64_t v63 = swift_slowAlloc();
      v73[0] = v63;
      *(_DWORD *)uint64_t v52 = 136315394;
      int v62 = v51;
      *(void *)&long long v74 = v13;
      swift_getMetatypeMetadata();
      id v71 = a4;
      uint64_t v53 = String.init<A>(describing:)();
      unint64_t v69 = a6;
      *(void *)&long long v74 = sub_1008FA0F0(v53, v54, v73);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      *(_WORD *)(v52 + 12) = 2080;
      uint64_t v55 = sub_10042DBD8();
      uint64_t v66 = v13;
      uint64_t v56 = v17;
      unint64_t v58 = v57;
      swift_release();
      *(void *)&long long v74 = sub_1008FA0F0(v55, v58, v73);
      a4 = v71;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_release();
      uint64_t v17 = v56;
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v49, (os_log_type_t)v62, "%s: session: %s", (uint8_t *)v52, 0x16u);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {

      swift_release_n();
    }
    uint64_t v59 = (uint64_t)v65;
    type metadata accessor for PropertyListDecoder();
    swift_allocObject();
    PropertyListDecoder.init()();
    sub_10106C0D8(&qword_101645EC0, (void (*)(uint64_t))type metadata accessor for BeaconSharingSessionContext);
    dispatch thunk of PropertyListDecoder.decode<A>(_:from:)();
    swift_release();
    v17(v59, v64, v68, a4, v48);
    sub_1000A1534((uint64_t)v17);
    swift_release();
    sub_100494B8C(v59);
  }
}

uint64_t sub_10106BAC0(uint64_t a1)
{
  return sub_10106BB18(a1, (uint64_t (*)(void, uint64_t, uint64_t))sub_101068F4C);
}

uint64_t sub_10106BAEC(uint64_t a1)
{
  return sub_10106BB18(a1, (uint64_t (*)(void, uint64_t, uint64_t))sub_101068134);
}

uint64_t sub_10106BB18(uint64_t a1, uint64_t (*a2)(void, uint64_t, uint64_t))
{
  return sub_101068E44(a1, *(void *)(v2 + 48), *(void *)(v2 + 56), *(void *)(v2 + 64), *(void *)(v2 + 16), *(void *)(v2 + 24), *(void *)(v2 + 32), *(void *)(v2 + 40), a2);
}

uint64_t sub_10106BB50@<X0>(_OWORD *a1@<X8>)
{
  return sub_101067FC4(a1);
}

uint64_t sub_10106BB6C()
{
  return sub_101064080(v0);
}

uint64_t sub_10106BB88()
{
  swift_release();
  swift_release();

  return _swift_deallocObject(v0, 40, 7);
}

uint64_t sub_10106BBC8(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_10106BBD8()
{
  return swift_release();
}

void *sub_10106BBE0()
{
  uint64_t v0 = sub_10000588C((uint64_t *)&unk_101648A20);
  __chkstk_darwin(v0 - 8);
  uint64_t v2 = (char *)v25 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v3 = type metadata accessor for SystemVersionNumber();
  object = *(char **)(v3 - 8);
  uint64_t v5 = __chkstk_darwin(v3);
  BOOL v26 = (char *)v25 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5);
  int64_t v8 = (char *)v25 - v7;
  unint64_t v34 = &_swiftEmptySetSingleton;
  unint64_t v9 = (unint64_t)sub_100529898();
  unint64_t v10 = v9;
  if (v9 >> 62)
  {
LABEL_24:
    uint64_t v11 = _CocoaArrayWrapper.endIndex.getter();
    if (v11) {
      goto LABEL_3;
    }
LABEL_25:
    swift_bridgeObjectRelease();
    return &_swiftEmptySetSingleton;
  }
  uint64_t v11 = *(void *)((v9 & 0xFFFFFFFFFFFFFF8) + 0x10);
  if (!v11) {
    goto LABEL_25;
  }
LABEL_3:
  unint64_t v31 = v10 & 0xC000000000000001;
  id v30 = (unsigned int (**)(char *, uint64_t, uint64_t))(object + 48);
  unint64_t v29 = (void (**)(char *, char *, uint64_t))(object + 32);
  uint64_t v12 = 4;
  uint64_t v28 = (void (**)(char *, uint64_t))(object + 8);
  v25[1] = (unint64_t)(object + 8) & 0xFFFFFFFFFFFFLL | 0x4F8000000000000;
  unint64_t v27 = v10;
  v25[0] = v8;
  while (1)
  {
    uint64_t v13 = v12 - 4;
    if (v31)
    {
      id v14 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
      uint64_t v15 = v12 - 3;
      if (__OFADD__(v13, 1)) {
        goto LABEL_23;
      }
    }
    else
    {
      id v14 = *(id *)(v10 + 8 * v12);
      uint64_t v15 = v12 - 3;
      if (__OFADD__(v13, 1))
      {
LABEL_23:
        __break(1u);
        goto LABEL_24;
      }
    }
    id v16 = v14;
    sub_100E8F03C(v16, (uint64_t)v35);
    object = v36;
    swift_bridgeObjectRetain();
    SystemVersionNumber.init(string:)();
    if ((*v30)(v2, 1, v3) != 1) {
      break;
    }
    sub_10001DAB4((uint64_t)v2, (uint64_t *)&unk_101648A20);
LABEL_5:
    sub_1000A3BB4((uint64_t)v35);
LABEL_6:

LABEL_7:
    ++v12;
    if (v15 == v11)
    {
      swift_bridgeObjectRelease();
      return v34;
    }
  }
  (*v29)(v8, v2, v3);
  Swift::String v17 = String.lowercased()();
  object = (char *)v17._object;
  Swift::String v32 = v17;
  sub_10106C084();
  sub_1000336D4();
  static PartialMatchCase<>.first(containing:)();
  swift_bridgeObjectRelease();
  if (v33 == 4)
  {
    (*v28)(v8, v3);
    goto LABEL_5;
  }
  uint64_t v18 = v26;
  SystemVersionNumber.init(stringLiteral:)();
  sub_10106C0D8((unint64_t *)&qword_10163A550, (void (*)(uint64_t))&type metadata accessor for SystemVersionNumber);
  char v19 = dispatch thunk of static Comparable.< infix(_:_:)();
  object = (char *)*v28;
  (*v28)(v18, v3);
  ((void (*)(char *, uint64_t))object)(v8, v3);
  sub_1000A3BB4((uint64_t)v35);
  unint64_t v10 = v27;
  if (v19) {
    goto LABEL_6;
  }
  uint64_t result = (void *)IDSCopyIDForDevice();
  if (result)
  {
    id v21 = result;
    object = (char *)static String._unconditionallyBridgeFromObjectiveC(_:)();

    Swift::Int v22 = _s12searchpartyd20MessagingDestinationV20stringRepresentationACSgSS_tcfC_0();
    if (v24)
    {
      sub_100DCC8B8((uint64_t)&v32, v22, v23, v24);

      swift_bridgeObjectRelease();
    }
    else
    {
    }
    int64_t v8 = (char *)v25[0];
    unint64_t v10 = v27;
    goto LABEL_7;
  }
  __break(1u);
  return result;
}

unint64_t sub_10106C084()
{
  unint64_t result = qword_101668B50;
  if (!qword_101668B50)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_101668B50);
  }
  return result;
}

uint64_t sub_10106C0D8(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

ValueMetadata *type metadata accessor for MessagingStats.Tally()
{
  return &type metadata for MessagingStats.Tally;
}

ValueMetadata *type metadata accessor for MessagingStats.MessageKey()
{
  return &type metadata for MessagingStats.MessageKey;
}

unint64_t sub_10106C144()
{
  unint64_t result = qword_101668B58[0];
  if (!qword_101668B58[0])
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, qword_101668B58);
  }
  return result;
}

uint64_t sub_10106C198()
{
  type metadata accessor for FailableRecordSequence();
  uint64_t result = type metadata accessor for Optional();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t *sub_10106C234(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4 = type metadata accessor for FailableRecordSequence();
  uint64_t v5 = *(void *)(type metadata accessor for Optional() - 8);
  int v6 = *(_DWORD *)(v5 + 80);
  if ((v6 & 0x20000) != 0)
  {
    uint64_t v9 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v9 + ((v6 + 16) & ~(unint64_t)v6));
    swift_retain();
  }
  else
  {
    uint64_t v7 = v5;
    uint64_t v8 = *(void *)(v4 - 8);
    if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v8 + 48))(a2, 1, v4))
    {
      memcpy(a1, a2, *(void *)(v7 + 64));
    }
    else
    {
      uint64_t v10 = type metadata accessor for URL();
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v10 - 8) + 16))(a1, a2, v10);
      *(uint64_t *)((char *)a1 + *(int *)(v4 + 36)) = *(uint64_t *)((char *)a2 + *(int *)(v4 + 36));
      uint64_t v11 = *(int *)(v4 + 40);
      uint64_t v12 = (char *)a1 + v11;
      uint64_t v13 = (char *)a2 + v11;
      uint64_t v14 = type metadata accessor for DirectorySequence();
      uint64_t v15 = *(void *)(v14 - 8);
      id v16 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v15 + 48);
      swift_retain();
      if (v16(v13, 1, v14))
      {
        uint64_t v17 = sub_10000588C((uint64_t *)&unk_101653C90);
        memcpy(v12, v13, *(void *)(*(void *)(v17 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(v15 + 16))(v12, v13, v14);
        (*(void (**)(char *, void, uint64_t, uint64_t))(v15 + 56))(v12, 0, 1, v14);
      }
      (*(void (**)(uint64_t *, void, uint64_t, uint64_t))(v8 + 56))(a1, 0, 1, v4);
    }
  }
  return a1;
}

uint64_t sub_10106C4A8(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for FailableRecordSequence();
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v2 - 8) + 48))(a1, 1, v2);
  if (!result)
  {
    uint64_t v4 = type metadata accessor for URL();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8))(a1, v4);
    swift_release();
    uint64_t v5 = a1 + *(int *)(v2 + 40);
    uint64_t v6 = type metadata accessor for DirectorySequence();
    uint64_t v8 = *(void *)(v6 - 8);
    uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v8 + 48))(v5, 1, v6);
    if (!result)
    {
      uint64_t v7 = *(uint64_t (**)(uint64_t, uint64_t))(v8 + 8);
      return v7(v5, v6);
    }
  }
  return result;
}

char *sub_10106C5FC(char *a1, char *a2)
{
  uint64_t v4 = type metadata accessor for FailableRecordSequence();
  uint64_t v5 = *(void *)(v4 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v5 + 48))(a2, 1, v4))
  {
    uint64_t v6 = type metadata accessor for Optional();
    memcpy(a1, a2, *(void *)(*(void *)(v6 - 8) + 64));
  }
  else
  {
    uint64_t v7 = type metadata accessor for URL();
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v7 - 8) + 16))(a1, a2, v7);
    *(void *)&a1[*(int *)(v4 + 36)] = *(void *)&a2[*(int *)(v4 + 36)];
    uint64_t v8 = *(int *)(v4 + 40);
    uint64_t v9 = &a1[v8];
    uint64_t v10 = &a2[v8];
    uint64_t v11 = type metadata accessor for DirectorySequence();
    uint64_t v12 = *(void *)(v11 - 8);
    uint64_t v13 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v12 + 48);
    swift_retain();
    if (v13(v10, 1, v11))
    {
      uint64_t v14 = sub_10000588C((uint64_t *)&unk_101653C90);
      memcpy(v9, v10, *(void *)(*(void *)(v14 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v12 + 16))(v9, v10, v11);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v12 + 56))(v9, 0, 1, v11);
    }
    (*(void (**)(char *, void, uint64_t, uint64_t))(v5 + 56))(a1, 0, 1, v4);
  }
  return a1;
}

char *sub_10106C81C(char *a1, char *a2)
{
  uint64_t v4 = type metadata accessor for FailableRecordSequence();
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v5 + 48);
  int v7 = v6(a1, 1, v4);
  int v8 = v6(a2, 1, v4);
  if (!v7)
  {
    if (!v8)
    {
      uint64_t v19 = type metadata accessor for URL();
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v19 - 8) + 24))(a1, a2, v19);
      *(void *)&a1[*(int *)(v4 + 36)] = *(void *)&a2[*(int *)(v4 + 36)];
      swift_retain();
      swift_release();
      uint64_t v20 = *(int *)(v4 + 40);
      id v21 = &a1[v20];
      a2 += v20;
      uint64_t v22 = type metadata accessor for DirectorySequence();
      uint64_t v23 = *(void *)(v22 - 8);
      uint64_t v24 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v23 + 48);
      int v25 = v24(v21, 1, v22);
      int v26 = v24(a2, 1, v22);
      if (v25)
      {
        if (!v26)
        {
          (*(void (**)(char *, char *, uint64_t))(v23 + 16))(v21, a2, v22);
          (*(void (**)(char *, void, uint64_t, uint64_t))(v23 + 56))(v21, 0, 1, v22);
          return a1;
        }
      }
      else
      {
        if (!v26)
        {
          (*(void (**)(char *, char *, uint64_t))(v23 + 24))(v21, a2, v22);
          return a1;
        }
        (*(void (**)(char *, uint64_t))(v23 + 8))(v21, v22);
      }
      size_t v17 = *(void *)(*(void *)(sub_10000588C((uint64_t *)&unk_101653C90) - 8) + 64);
      uint64_t v18 = v21;
      goto LABEL_8;
    }
    (*(void (**)(char *, uint64_t))(v5 + 8))(a1, v4);
LABEL_7:
    size_t v17 = *(void *)(*(void *)(type metadata accessor for Optional() - 8) + 64);
    uint64_t v18 = a1;
LABEL_8:
    memcpy(v18, a2, v17);
    return a1;
  }
  if (v8) {
    goto LABEL_7;
  }
  uint64_t v9 = type metadata accessor for URL();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v9 - 8) + 16))(a1, a2, v9);
  *(void *)&a1[*(int *)(v4 + 36)] = *(void *)&a2[*(int *)(v4 + 36)];
  uint64_t v10 = *(int *)(v4 + 40);
  uint64_t v11 = &a1[v10];
  uint64_t v12 = &a2[v10];
  uint64_t v13 = type metadata accessor for DirectorySequence();
  uint64_t v14 = *(void *)(v13 - 8);
  uint64_t v15 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v14 + 48);
  swift_retain();
  if (v15(v12, 1, v13))
  {
    uint64_t v16 = sub_10000588C((uint64_t *)&unk_101653C90);
    memcpy(v11, v12, *(void *)(*(void *)(v16 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v14 + 16))(v11, v12, v13);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v14 + 56))(v11, 0, 1, v13);
  }
  (*(void (**)(char *, void, uint64_t, uint64_t))(v5 + 56))(a1, 0, 1, v4);
  return a1;
}

char *sub_10106CC00(char *a1, char *a2)
{
  uint64_t v4 = type metadata accessor for FailableRecordSequence();
  uint64_t v5 = *(void *)(v4 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v5 + 48))(a2, 1, v4))
  {
    uint64_t v6 = type metadata accessor for Optional();
    memcpy(a1, a2, *(void *)(*(void *)(v6 - 8) + 64));
  }
  else
  {
    uint64_t v7 = type metadata accessor for URL();
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v7 - 8) + 32))(a1, a2, v7);
    *(void *)&a1[*(int *)(v4 + 36)] = *(void *)&a2[*(int *)(v4 + 36)];
    uint64_t v8 = *(int *)(v4 + 40);
    uint64_t v9 = &a1[v8];
    uint64_t v10 = &a2[v8];
    uint64_t v11 = type metadata accessor for DirectorySequence();
    uint64_t v12 = *(void *)(v11 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v12 + 48))(v10, 1, v11))
    {
      uint64_t v13 = sub_10000588C((uint64_t *)&unk_101653C90);
      memcpy(v9, v10, *(void *)(*(void *)(v13 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v12 + 32))(v9, v10, v11);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v12 + 56))(v9, 0, 1, v11);
    }
    (*(void (**)(char *, void, uint64_t, uint64_t))(v5 + 56))(a1, 0, 1, v4);
  }
  return a1;
}

char *sub_10106CE10(char *a1, char *a2)
{
  uint64_t v4 = type metadata accessor for FailableRecordSequence();
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v5 + 48);
  int v7 = v6(a1, 1, v4);
  int v8 = v6(a2, 1, v4);
  if (!v7)
  {
    if (!v8)
    {
      uint64_t v18 = type metadata accessor for URL();
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v18 - 8) + 40))(a1, a2, v18);
      *(void *)&a1[*(int *)(v4 + 36)] = *(void *)&a2[*(int *)(v4 + 36)];
      swift_release();
      uint64_t v19 = *(int *)(v4 + 40);
      uint64_t v20 = &a1[v19];
      a2 += v19;
      uint64_t v21 = type metadata accessor for DirectorySequence();
      uint64_t v22 = *(void *)(v21 - 8);
      uint64_t v23 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v22 + 48);
      int v24 = v23(v20, 1, v21);
      int v25 = v23(a2, 1, v21);
      if (v24)
      {
        if (!v25)
        {
          (*(void (**)(char *, char *, uint64_t))(v22 + 32))(v20, a2, v21);
          (*(void (**)(char *, void, uint64_t, uint64_t))(v22 + 56))(v20, 0, 1, v21);
          return a1;
        }
      }
      else
      {
        if (!v25)
        {
          (*(void (**)(char *, char *, uint64_t))(v22 + 40))(v20, a2, v21);
          return a1;
        }
        (*(void (**)(char *, uint64_t))(v22 + 8))(v20, v21);
      }
      size_t v16 = *(void *)(*(void *)(sub_10000588C((uint64_t *)&unk_101653C90) - 8) + 64);
      size_t v17 = v20;
      goto LABEL_8;
    }
    (*(void (**)(char *, uint64_t))(v5 + 8))(a1, v4);
LABEL_7:
    size_t v16 = *(void *)(*(void *)(type metadata accessor for Optional() - 8) + 64);
    size_t v17 = a1;
LABEL_8:
    memcpy(v17, a2, v16);
    return a1;
  }
  if (v8) {
    goto LABEL_7;
  }
  uint64_t v9 = type metadata accessor for URL();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v9 - 8) + 32))(a1, a2, v9);
  *(void *)&a1[*(int *)(v4 + 36)] = *(void *)&a2[*(int *)(v4 + 36)];
  uint64_t v10 = *(int *)(v4 + 40);
  uint64_t v11 = &a1[v10];
  uint64_t v12 = &a2[v10];
  uint64_t v13 = type metadata accessor for DirectorySequence();
  uint64_t v14 = *(void *)(v13 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v14 + 48))(v12, 1, v13))
  {
    uint64_t v15 = sub_10000588C((uint64_t *)&unk_101653C90);
    memcpy(v11, v12, *(void *)(*(void *)(v15 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v14 + 32))(v11, v12, v13);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v14 + 56))(v11, 0, 1, v13);
  }
  (*(void (**)(char *, void, uint64_t, uint64_t))(v5 + 56))(a1, 0, 1, v4);
  return a1;
}

uint64_t sub_10106D1D0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_10106D1E4);
}

uint64_t sub_10106D1E4(uint64_t a1, uint64_t a2)
{
  type metadata accessor for FailableRecordSequence();
  uint64_t v4 = type metadata accessor for Optional();
  uint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 48);

  return v5(a1, a2, v4);
}

uint64_t sub_10106D260(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_10106D274);
}

uint64_t sub_10106D274(uint64_t a1, uint64_t a2)
{
  type metadata accessor for FailableRecordSequence();
  uint64_t v4 = type metadata accessor for Optional();
  uint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 56);

  return v5(a1, a2, a2, v4);
}

uint64_t type metadata accessor for RecordSequence()
{
  return sub_1000103A0();
}

uint64_t sub_10106D30C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v41 = a2;
  uint64_t v2 = *(void *)(a1 + 16);
  uint64_t v3 = type metadata accessor for FailableRecord();
  uint64_t v4 = type metadata accessor for Optional();
  uint64_t v37 = *(void *)(v4 - 8);
  uint64_t v38 = v4;
  uint64_t v5 = __chkstk_darwin(v4);
  int v7 = (char *)&v35 - v6;
  uint64_t v8 = *(void *)(v3 - 8);
  uint64_t v9 = __chkstk_darwin(v5);
  uint64_t v11 = (char *)&v35 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9);
  uint64_t v13 = (char *)&v35 - v12;
  uint64_t v42 = v2;
  uint64_t v14 = type metadata accessor for FailableRecordSequence();
  uint64_t v15 = type metadata accessor for Optional();
  uint64_t v16 = *(void *)(v15 - 8);
  uint64_t v17 = __chkstk_darwin(v15);
  uint64_t v19 = (char *)&v35 - v18;
  uint64_t v20 = *(void *)(v14 - 8);
  __chkstk_darwin(v17);
  uint64_t v22 = (char *)&v35 - v21;
  uint64_t v23 = *(void (**)(char *, uint64_t))(v16 + 16);
  uint64_t v39 = v24;
  v23(v19, v43);
  uint64_t v40 = v20;
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v20 + 48))(v19, 1, v14) == 1)
  {
    (*(void (**)(char *, uint64_t))(v16 + 8))(v19, v39);
    uint64_t v25 = v42;
    uint64_t v26 = *(void *)(v42 - 8);
    uint64_t v27 = 1;
LABEL_8:
    uint64_t v33 = v41;
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v26 + 56))(v33, v27, 1, v25);
  }
  uint64_t v36 = v16;
  (*(void (**)(char *, char *, uint64_t))(v40 + 32))(v22, v19, v14);
  uint64_t v44 = v14;
  sub_100BDE1F0(v14, (uint64_t)v7);
  uint64_t v28 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v8 + 48);
  if (v28(v7, 1, v3) == 1)
  {
LABEL_7:
    uint64_t v30 = v40;
    uint64_t v31 = v44;
    (*(void (**)(char *, uint64_t))(v40 + 8))(v22, v44);
    (*(void (**)(char *, uint64_t))(v37 + 8))(v7, v38);
    uint64_t v32 = v43;
    (*(void (**)(uint64_t, uint64_t))(v36 + 8))(v43, v39);
    uint64_t v27 = 1;
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v30 + 56))(v32, 1, 1, v31);
    uint64_t v25 = v42;
    uint64_t v26 = *(void *)(v42 - 8);
    goto LABEL_8;
  }
  unint64_t v29 = *(void (**)(char *, char *, uint64_t))(v8 + 32);
  while (1)
  {
    v29(v13, v7, v3);
    v29(v11, v13, v3);
    if (swift_getEnumCaseMultiPayload() != 1) {
      break;
    }
    (*(void (**)(char *, uint64_t))(v8 + 8))(v11, v3);
    sub_100BDE1F0(v44, (uint64_t)v7);
    if (v28(v7, 1, v3) == 1) {
      goto LABEL_7;
    }
  }
  (*(void (**)(char *, uint64_t))(v40 + 8))(v22, v44);
  uint64_t v33 = v41;
  uint64_t v25 = v42;
  uint64_t v26 = *(void *)(v42 - 8);
  (*(void (**)(uint64_t, char *, uint64_t))(v26 + 32))(v41, v11, v42);
  uint64_t v27 = 0;
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v26 + 56))(v33, v27, 1, v25);
}

uint64_t sub_10106D84C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = j___ss30_copySequenceToContiguousArrayys0dE0Vy7ElementQzGxSTRzlF(v2, a1, a2);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(a1 - 8) + 8))(v2, a1);
  return v4;
}

uint64_t sub_10106D8C4()
{
  return swift_getWitnessTable();
}

ValueMetadata *type metadata accessor for AirpodsPairingSpec1_1()
{
  return &type metadata for AirpodsPairingSpec1_1;
}

unint64_t sub_10106D8F8()
{
  unint64_t result = qword_101668BE0;
  if (!qword_101668BE0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_101668BE0);
  }
  return result;
}

uint64_t sub_10106D94C@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X2>, unint64_t a4@<X3>, uint64_t a5@<X4>, unint64_t a6@<X5>, uint64_t a7@<X6>, unint64_t a8@<X7>, uint64_t a9@<X8>, uint64_t a10, unint64_t a11, uint64_t a12, unint64_t a13)
{
  sub_10106E6E4(a1, a2, a3, a4, a5, a6, a7, a8, (uint64_t)v15, a10, a11, a12, a13);
  return sub_100A399B4((uint64_t)v15, a9);
}

uint64_t sub_10106D998@<X0>(int a1@<W0>, uint64_t a2@<X8>)
{
  LODWORD(v5[0]) = a1;
  sub_100060568();
  FixedWidthInteger.data.getter();
  sub_10036D394();
  uint64_t result = BinaryDecodable.init(data:)();
  if (!v2)
  {
    v5[0] = v5[13];
    sub_100A39B4C(v5);
    return sub_100A399B4((uint64_t)v5, a2);
  }
  return result;
}

uint64_t sub_10106DA48(uint64_t *a1, void *a2, uint64_t a3, unint64_t a4)
{
  uint64_t result = sub_100A8A828(a3, a4);
  if (!v4)
  {
    uint64_t v10 = result;
    unint64_t v11 = v8;
    uint64_t v12 = v9;
    sub_1000361E0(result, v8);
    sub_100435064(v10, v11, v15);
    uint64_t v13 = v15[0];
    uint64_t v14 = v15[1];
    a1[3] = (uint64_t)&type metadata for CollaborativeKeyGen.v2.C2;
    a1[4] = sub_100062020();
    *a1 = v13;
    a1[1] = v14;
    a2[3] = type metadata accessor for CollaborativeKeyGen.v2.OwnerContext();
    a2[4] = &off_1015E6CE0;
    uint64_t result = sub_10001CFB8(v10, v11);
    *a2 = v12;
  }
  return result;
}

uint64_t sub_10106DB34()
{
  sub_100A399B4(v0, (uint64_t)v3);
  uint64_t v1 = sub_10106E468((uint64_t)v3);
  uint64_t result = 0;
  switch(v1)
  {
    case 1:
      sub_100A398F0((uint64_t)v3);
      uint64_t result = 2;
      break;
    case 2:
      sub_100A398F0((uint64_t)v3);
      uint64_t result = 3;
      break;
    case 3:
      sub_100A398F0((uint64_t)v3);
      uint64_t result = 4;
      break;
    case 4:
      sub_100A398F0((uint64_t)v3);
      uint64_t result = 5;
      break;
    case 5:
      sub_100A398F0((uint64_t)v3);
      uint64_t result = 6;
      break;
    case 6:
      sub_100A398F0((uint64_t)v3);
      uint64_t result = 7;
      break;
    case 7:
      sub_100A398F0((uint64_t)v3);
      uint64_t result = 8;
      break;
    case 8:
      sub_100A398F0((uint64_t)v3);
      uint64_t result = 9;
      break;
    case 9:
      sub_100A398F0((uint64_t)v3);
      uint64_t result = 10;
      break;
    case 10:
      return result;
    case 11:
      uint64_t result = 11;
      break;
    default:
      sub_100A398F0((uint64_t)v3);
      uint64_t result = 1;
      break;
  }
  return result;
}

uint64_t *sub_10106DC64@<X0>(uint64_t *a1@<X8>)
{
  sub_100A399B4(v1, (uint64_t)v96);
  sub_100A399B4((uint64_t)v96, (uint64_t)v98);
  sub_100A399B4(v1, (uint64_t)v97);
  switch(sub_10106E468((uint64_t)v97))
  {
    case 1u:
      uint64_t v11 = sub_100A398F0((uint64_t)v97);
      long long v86 = *(_OWORD *)(v11 + 16);
      long long v91 = *(_OWORD *)v11;
      long long v80 = *(_OWORD *)(v11 + 48);
      long long v82 = *(_OWORD *)(v11 + 32);
      uint64_t v12 = *(void *)(v11 + 64);
      uint64_t v13 = *(void *)(v11 + 72);
      a1[3] = (uint64_t)&type metadata for AirPodsInitiatePairingCommandPayload;
      a1[4] = sub_100A35264();
      uint64_t v14 = swift_allocObject();
      *a1 = v14;
      *(_OWORD *)(v14 + 16) = v91;
      *(_OWORD *)(v14 + 32) = v86;
      *(_OWORD *)(v14 + 48) = v82;
      *(_OWORD *)(v14 + 64) = v80;
      *(void *)(v14 + 80) = v12;
      *(void *)(v14 + 88) = v13;
      sub_100A399B4((uint64_t)v98, (uint64_t)v95);
      uint64_t v15 = (uint64_t *)sub_100A398F0((uint64_t)v95);
      uint64_t v16 = v15[2];
      unint64_t v17 = v15[3];
      uint64_t v18 = v15[4];
      unint64_t v19 = v15[5];
      uint64_t v20 = v15[6];
      unint64_t v21 = v15[7];
      uint64_t v22 = v15[8];
      unint64_t v23 = v15[9];
      sub_1000361E0(*v15, v15[1]);
      sub_1000361E0(v16, v17);
      sub_1000361E0(v18, v19);
      sub_1000361E0(v20, v21);
      return (uint64_t *)sub_100037A38(v22, v23);
    case 2u:
      uint64_t v24 = (const void *)sub_100A398F0((uint64_t)v97);
      a1[3] = (uint64_t)&type metadata for AirPodsSendPairingDataCommandPayloadv1;
      a1[4] = sub_100A35374();
      goto LABEL_6;
    case 3u:
      uint64_t v24 = (const void *)sub_100A398F0((uint64_t)v97);
      a1[3] = (uint64_t)&type metadata for AirPodsSendPairingDataCommandPayloadv2;
      a1[4] = sub_100A353CC();
LABEL_6:
      uint64_t v25 = swift_allocObject();
      *a1 = v25;
      memmove((void *)(v25 + 16), v24, 0xB8uLL);
      sub_100A399B4((uint64_t)v98, (uint64_t)v95);
      uint64_t v26 = (uint64_t *)sub_100A398F0((uint64_t)v95);
      return sub_100A397E0(v26);
    case 4u:
      uint64_t v27 = (const void *)sub_100A398F0((uint64_t)v97);
      a1[3] = (uint64_t)&type metadata for AirPodsSendPairingDataCommandPayloadv3;
      a1[4] = sub_100A35424();
      uint64_t v28 = swift_allocObject();
      *a1 = v28;
      memmove((void *)(v28 + 16), v27, 0xC8uLL);
      sub_100A399B4((uint64_t)v98, (uint64_t)v95);
      unint64_t v29 = (uint64_t *)sub_100A398F0((uint64_t)v95);
      return sub_100A39624(v29);
    case 5u:
      uint64_t v30 = sub_100A398F0((uint64_t)v97);
      long long v87 = *(_OWORD *)(v30 + 16);
      long long v92 = *(_OWORD *)v30;
      long long v81 = *(_OWORD *)(v30 + 48);
      long long v83 = *(_OWORD *)(v30 + 32);
      long long v78 = *(_OWORD *)(v30 + 80);
      long long v79 = *(_OWORD *)(v30 + 64);
      uint64_t v31 = *(void *)(v30 + 96);
      uint64_t v32 = *(void *)(v30 + 104);
      a1[3] = (uint64_t)&type metadata for AirPodsSWFinalizePairingCommandPayload;
      a1[4] = sub_100062268();
      uint64_t v33 = swift_allocObject();
      *a1 = v33;
      *(_OWORD *)(v33 + 16) = v92;
      *(_OWORD *)(v33 + 32) = v87;
      *(_OWORD *)(v33 + 48) = v83;
      *(_OWORD *)(v33 + 64) = v81;
      *(_OWORD *)(v33 + 80) = v79;
      *(_OWORD *)(v33 + 96) = v78;
      *(void *)(v33 + 112) = v31;
      *(void *)(v33 + 120) = v32;
      sub_100A399B4((uint64_t)v98, (uint64_t)v95);
      unint64_t v34 = (uint64_t *)sub_100A398F0((uint64_t)v95);
      uint64_t v35 = v34[2];
      unint64_t v36 = v34[3];
      uint64_t v37 = v34[4];
      unint64_t v38 = v34[5];
      uint64_t v39 = v34[6];
      unint64_t v40 = v34[7];
      uint64_t v41 = v34[8];
      unint64_t v42 = v34[9];
      uint64_t v43 = v34[10];
      unint64_t v44 = v34[11];
      *(void *)&long long v92 = v34[12];
      *(void *)&long long v87 = v34[13];
      sub_1000361E0(*v34, v34[1]);
      sub_1000361E0(v35, v36);
      sub_1000361E0(v37, v38);
      sub_1000361E0(v39, v40);
      sub_1000361E0(v41, v42);
      sub_1000361E0(v43, v44);
      return (uint64_t *)sub_1000361E0(v92, v87);
    case 6u:
      uint64_t v45 = sub_100A398F0((uint64_t)v97);
      long long v88 = *(_OWORD *)(v45 + 16);
      long long v93 = *(_OWORD *)v45;
      long long v84 = *(_OWORD *)(v45 + 32);
      uint64_t v46 = *(void *)(v45 + 48);
      uint64_t v47 = *(void *)(v45 + 56);
      a1[3] = (uint64_t)&type metadata for AirPodsSWSendPairingStatusCommandPayload;
      a1[4] = sub_1000621C0();
      uint64_t v48 = swift_allocObject();
      *a1 = v48;
      *(_OWORD *)(v48 + 16) = v93;
      *(_OWORD *)(v48 + 32) = v88;
      *(_OWORD *)(v48 + 48) = v84;
      *(void *)(v48 + 64) = v46;
      *(void *)(v48 + 72) = v47;
      sub_100A399B4((uint64_t)v98, (uint64_t)v95);
      uint64_t v49 = (uint64_t *)sub_100A398F0((uint64_t)v95);
      uint64_t v50 = v49[2];
      unint64_t v51 = v49[3];
      uint64_t v52 = v49[4];
      unint64_t v53 = v49[5];
      uint64_t v54 = v49[6];
      unint64_t v55 = v49[7];
      sub_1000361E0(*v49, v49[1]);
      sub_1000361E0(v50, v51);
      sub_1000361E0(v52, v53);
      return (uint64_t *)sub_1000361E0(v54, v55);
    case 7u:
      uint64_t v56 = (uint64_t *)sub_100A398F0((uint64_t)v97);
      uint64_t v57 = *v56;
      uint64_t v58 = v56[1];
      a1[3] = (uint64_t)&type metadata for AirPodsSWPairingCompleteCommandPayload;
      unint64_t v59 = sub_10006216C();
      goto LABEL_12;
    case 8u:
      os_log_t v60 = (uint64_t *)sub_100A398F0((uint64_t)v97);
      uint64_t v57 = *v60;
      uint64_t v58 = v60[1];
      a1[3] = (uint64_t)&type metadata for AirPodsPairingEligibilityDataCommandPayload;
      unint64_t v59 = sub_100A352C0();
LABEL_12:
      a1[4] = v59;
      *a1 = v57;
      a1[1] = v58;
      sub_100A399B4((uint64_t)v98, (uint64_t)v95);
      uint64_t v61 = sub_100A398F0((uint64_t)v95);
      return (uint64_t *)sub_1000361E0(*(void *)v61, *(void *)(v61 + 8));
    case 9u:
      uint64_t v62 = sub_100A398F0((uint64_t)v97);
      uint64_t v63 = *(void *)(v62 + 16);
      uint64_t v64 = *(void *)(v62 + 24);
      int v65 = *(_DWORD *)(v62 + 32);
      long long v89 = *(_OWORD *)(v62 + 40);
      long long v94 = *(_OWORD *)v62;
      long long v85 = *(_OWORD *)(v62 + 56);
      uint64_t v66 = *(void *)(v62 + 72);
      uint64_t v67 = *(void *)(v62 + 80);
      a1[3] = (uint64_t)&type metadata for AirPodsPairingEligibilityDataResponseCommandPayload;
      a1[4] = sub_100A35318();
      uint64_t v68 = swift_allocObject();
      *a1 = v68;
      *(_OWORD *)(v68 + 16) = v94;
      *(void *)(v68 + 32) = v63;
      *(void *)(v68 + 40) = v64;
      *(_DWORD *)(v68 + 48) = v65;
      *(_OWORD *)(v68 + 56) = v89;
      *(_OWORD *)(v68 + 72) = v85;
      *(void *)(v68 + 88) = v66;
      *(void *)(v68 + 96) = v67;
      sub_100A399B4((uint64_t)v98, (uint64_t)v95);
      unint64_t v69 = (uint64_t *)sub_100A398F0((uint64_t)v95);
      uint64_t v70 = v69[2];
      unint64_t v71 = v69[3];
      uint64_t v72 = v69[5];
      unint64_t v73 = v69[6];
      uint64_t v74 = v69[7];
      unint64_t v75 = v69[8];
      uint64_t v76 = v69[9];
      unint64_t v77 = v69[10];
      sub_1000361E0(*v69, v69[1]);
      sub_1000361E0(v70, v71);
      sub_1000361E0(v72, v73);
      sub_1000361E0(v74, v75);
      return (uint64_t *)sub_1000361E0(v76, v77);
    case 0xAu:
      a1[3] = (uint64_t)&type metadata for AccessoryGenericPayload;
      uint64_t result = (uint64_t *)sub_10006258C();
      goto LABEL_16;
    case 0xBu:
      a1[3] = (uint64_t)&type metadata for UnpairCommandPayload;
      uint64_t result = (uint64_t *)sub_100062118();
LABEL_16:
      a1[4] = (uint64_t)result;
      break;
    default:
      uint64_t v3 = sub_100A398F0((uint64_t)v97);
      long long v90 = *(_OWORD *)v3;
      uint64_t v4 = *(void *)(v3 + 16);
      uint64_t v5 = *(void *)(v3 + 24);
      a1[3] = (uint64_t)&type metadata for AirPodsSendBeaconGroupDataCommandPayload;
      a1[4] = sub_1000624F4();
      uint64_t v6 = swift_allocObject();
      *a1 = v6;
      *(_OWORD *)(v6 + 16) = v90;
      *(void *)(v6 + 32) = v4;
      *(void *)(v6 + 40) = v5;
      sub_100A399B4((uint64_t)v98, (uint64_t)v95);
      int v7 = (uint64_t *)sub_100A398F0((uint64_t)v95);
      uint64_t v8 = v7[2];
      unint64_t v9 = v7[3];
      sub_1000361E0(*v7, v7[1]);
      uint64_t result = (uint64_t *)sub_1000361E0(v8, v9);
      break;
  }
  return result;
}

uint64_t *sub_10106E2B0@<X0>(uint64_t *a1@<X8>)
{
  sub_100A399B4(v1, (uint64_t)v4);
  return sub_10106DC64(a1);
}

uint64_t sub_10106E2F0()
{
  sub_100A399B4(v0, (uint64_t)v2);
  return sub_10106DB34();
}

unint64_t sub_10106E328(uint64_t a1)
{
  *(void *)(a1 + 8) = sub_10106E358();
  unint64_t result = sub_10106E3AC();
  *(void *)(a1 + 16) = result;
  return result;
}

unint64_t sub_10106E358()
{
  unint64_t result = qword_101668D80;
  if (!qword_101668D80)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_101668D80);
  }
  return result;
}

unint64_t sub_10106E3AC()
{
  unint64_t result = qword_101668D88;
  if (!qword_101668D88)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_101668D88);
  }
  return result;
}

uint64_t sub_10106E400@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_100A35D9C(a1, a2);
}

uint64_t sub_10106E418(void *a1)
{
  sub_100A399B4(v1, (uint64_t)v4);
  return sub_100A36CC0(a1);
}

uint64_t sub_10106E468(uint64_t a1)
{
  unsigned int v1 = (*(void *)(a1 + 192) >> 58) & 0xC | (*(void *)(a1 + 176) >> 60) & 3;
  if (v1 <= 9) {
    return v1;
  }
  else {
    return (*(_DWORD *)a1 + 10);
  }
}

uint64_t sub_10106E494()
{
  sub_10001CFB8(*(void *)(v0 + 16), *(void *)(v0 + 24));
  sub_10001CFB8(*(void *)(v0 + 32), *(void *)(v0 + 40));
  sub_10001CFB8(*(void *)(v0 + 56), *(void *)(v0 + 64));
  sub_10001CFB8(*(void *)(v0 + 72), *(void *)(v0 + 80));
  sub_10001CFB8(*(void *)(v0 + 88), *(void *)(v0 + 96));

  return _swift_deallocObject(v0, 104, 7);
}

uint64_t sub_10106E4EC()
{
  sub_10001CFB8(*(void *)(v0 + 16), *(void *)(v0 + 24));
  sub_10001CFB8(*(void *)(v0 + 32), *(void *)(v0 + 40));
  sub_10001CFB8(*(void *)(v0 + 48), *(void *)(v0 + 56));
  sub_10001CFB8(*(void *)(v0 + 64), *(void *)(v0 + 72));

  return _swift_deallocObject(v0, 80, 7);
}

uint64_t sub_10106E53C()
{
  sub_10001CFB8(*(void *)(v0 + 16), *(void *)(v0 + 24));
  sub_10001CFB8(*(void *)(v0 + 32), *(void *)(v0 + 40));
  sub_10001CFB8(*(void *)(v0 + 48), *(void *)(v0 + 56));
  sub_10001CFB8(*(void *)(v0 + 64), *(void *)(v0 + 72));
  sub_10001CFB8(*(void *)(v0 + 80), *(void *)(v0 + 88));
  sub_10001CFB8(*(void *)(v0 + 96), *(void *)(v0 + 104));
  sub_10001CFB8(*(void *)(v0 + 112), *(void *)(v0 + 120));

  return _swift_deallocObject(v0, 128, 7);
}

uint64_t sub_10106E5A4()
{
  sub_10001CFB8(*(void *)(v0 + 16), *(void *)(v0 + 24));
  sub_10001CFB8(*(void *)(v0 + 32), *(void *)(v0 + 40));
  sub_10001CFB8(*(void *)(v0 + 48), *(void *)(v0 + 56));
  sub_10001CFB8(*(void *)(v0 + 64), *(void *)(v0 + 72));
  sub_10001CFB8(*(void *)(v0 + 80), *(void *)(v0 + 88));
  sub_10001CFB8(*(void *)(v0 + 96), *(void *)(v0 + 104));
  sub_10001CFB8(*(void *)(v0 + 112), *(void *)(v0 + 120));
  sub_10001CFB8(*(void *)(v0 + 128), *(void *)(v0 + 136));
  sub_10001CFB8(*(void *)(v0 + 144), *(void *)(v0 + 152));
  sub_10001CFB8(*(void *)(v0 + 160), *(void *)(v0 + 168));
  sub_10001CFB8(*(void *)(v0 + 176), *(void *)(v0 + 184));
  sub_10001CFB8(*(void *)(v0 + 200), *(void *)(v0 + 208));

  return _swift_deallocObject(v0, 216, 7);
}

uint64_t sub_10106E63C()
{
  sub_10001CFB8(v0[2], v0[3]);
  sub_10001CFB8(v0[4], v0[5]);
  sub_10001CFB8(v0[6], v0[7]);
  sub_10001CFB8(v0[8], v0[9]);
  unint64_t v1 = v0[11];
  if (v1 >> 60 != 15) {
    sub_10001CFB8(v0[10], v1);
  }

  return _swift_deallocObject(v0, 96, 7);
}

uint64_t sub_10106E6A4()
{
  sub_10001CFB8(*(void *)(v0 + 16), *(void *)(v0 + 24));
  sub_10001CFB8(*(void *)(v0 + 32), *(void *)(v0 + 40));

  return _swift_deallocObject(v0, 48, 7);
}

uint64_t sub_10106E6E4@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X2>, unint64_t a4@<X3>, uint64_t a5@<X4>, unint64_t a6@<X5>, uint64_t a7@<X6>, unint64_t a8@<X7>, uint64_t a9@<X8>, uint64_t a10, unint64_t a11, uint64_t a12, unint64_t a13)
{
  uint64_t v13 = 0;
  switch(a8 >> 62)
  {
    case 1uLL:
      LODWORD(v13) = HIDWORD(a7) - a7;
      if (__OFSUB__(HIDWORD(a7), a7))
      {
        __break(1u);
LABEL_19:
        __break(1u);
        JUMPOUT(0x10106E8C0);
      }
      uint64_t v13 = (int)v13;
LABEL_6:
      *(void *)&v39[0] = v13;
      sub_10000D64C();
      uint64_t v19 = FixedWidthInteger.data.getter();
      unint64_t v21 = v20;
      uint64_t v22 = Data.trimmed.getter();
      unint64_t v24 = v23;
      sub_10001CFB8(v19, v21);
      if (a11 >> 60 == 15) {
        uint64_t v25 = 0;
      }
      else {
        uint64_t v25 = a10;
      }
      unint64_t v26 = 0xC000000000000000;
      if (a11 >> 60 == 15) {
        unint64_t v27 = 0xC000000000000000;
      }
      else {
        unint64_t v27 = a11;
      }
      if (a13 >> 60 == 15) {
        uint64_t v28 = 0;
      }
      else {
        uint64_t v28 = a12;
      }
      if (a13 >> 60 != 15) {
        unint64_t v26 = a13;
      }
      sub_1003D7AC8(a1, a2, a3, a4, a5, a6, a7, a8, v40, v22, v24, v25, v27, v28, v26);
      v39[0] = v40[0];
      v39[1] = v40[1];
      v39[2] = v40[2];
      v39[3] = v40[3];
      v39[4] = v40[4];
      v39[5] = v40[5];
      v39[6] = v40[6];
      sub_100A39C38(v39);
      sub_100037A38(a10, a11);
      sub_100037A38(a12, a13);
      sub_1000361E0(a7, a8);
      sub_1000361E0(a5, a6);
      sub_1000361E0(a3, a4);
      sub_1000361E0(a1, a2);
      return sub_100A399B4((uint64_t)v39, a9);
    case 2uLL:
      uint64_t v14 = *(void *)(a7 + 16);
      uint64_t v15 = *(void *)(a7 + 24);
      BOOL v16 = __OFSUB__(v15, v14);
      uint64_t v13 = v15 - v14;
      if (!v16) {
        goto LABEL_6;
      }
      goto LABEL_19;
    case 3uLL:
      goto LABEL_6;
    default:
      uint64_t v13 = BYTE6(a8);
      goto LABEL_6;
  }
}

void destroy for AirPodsPairingCommand1_1(uint64_t a1)
{
  sub_10106E950(*(void *)a1, *(void *)(a1 + 8), *(void *)(a1 + 16), *(void *)(a1 + 24), *(void *)(a1 + 32), *(void *)(a1 + 40), *(void *)(a1 + 48), *(void *)(a1 + 56), *(void *)(a1 + 64), *(void *)(a1 + 72), *(void *)(a1 + 80), *(void *)(a1 + 88), *(void *)(a1 + 96), *(void *)(a1 + 104), *(void *)(a1 + 112), *(void *)(a1 + 120), *(void *)(a1 + 128), *(void *)(a1 + 136), *(void *)(a1 + 144),
    *(void *)(a1 + 152),
    *(void *)(a1 + 160),
    *(void *)(a1 + 168),
    *(void *)(a1 + 176),
    *(void *)(a1 + 184),
    *(void *)(a1 + 192),
    (void (*)(void))sub_10001CFB8,
    (void (*)(uint64_t, uint64_t))sub_100037A24);
}

void sub_10106E950(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,unint64_t a23,uint64_t a24,unint64_t a25,void (*a26)(void),void (*a27)(uint64_t, uint64_t))
{
  uint64_t v33 = a26;
  switch((a25 >> 58) & 0xC | (a23 >> 60) & 3)
  {
    case 0uLL:
      unint64_t v34 = a26;
      a26();
      goto LABEL_11;
    case 1uLL:
      a26();
      ((void (*)(uint64_t, uint64_t))a26)(a3, a4);
      ((void (*)(uint64_t, uint64_t))a26)(a5, a6);
      ((void (*)(uint64_t, uint64_t))a26)(a7, a8);
      a27(a9, a10);
      return;
    case 2uLL:
    case 3uLL:
      unint64_t v34 = a26;
      a26();
      ((void (*)(uint64_t, uint64_t))a26)(a3, a4);
      ((void (*)(uint64_t, uint64_t))a26)(a5, a6);
      ((void (*)(uint64_t, uint64_t))a26)(a7, a8);
      ((void (*)(uint64_t, uint64_t))a26)(a9, a10);
      ((void (*)(uint64_t, uint64_t))a26)(a11, a12);
      ((void (*)(uint64_t, uint64_t))a26)(a13, a14);
      ((void (*)(uint64_t, uint64_t))a26)(a15, a16);
      ((void (*)(uint64_t, uint64_t))a26)(a17, a18);
      ((void (*)(uint64_t, uint64_t))a26)(a19, a20);
      goto LABEL_11;
    case 4uLL:
      unint64_t v34 = a26;
      a26();
      ((void (*)(uint64_t, uint64_t))a26)(a3, a4);
      ((void (*)(uint64_t, uint64_t))a26)(a5, a6);
      ((void (*)(uint64_t, uint64_t))a26)(a7, a8);
      ((void (*)(uint64_t, uint64_t))a26)(a9, a10);
      ((void (*)(uint64_t, uint64_t))a26)(a11, a12);
      ((void (*)(uint64_t, uint64_t))a26)(a13, a14);
      ((void (*)(uint64_t, uint64_t))a26)(a15, a16);
      ((void (*)(uint64_t, uint64_t))a26)(a17, a18);
      ((void (*)(uint64_t, uint64_t))a26)(a19, a20);
      ((void (*)(uint64_t, uint64_t))a26)(a21, a22);
      goto LABEL_11;
    case 5uLL:
      unint64_t v34 = a26;
      a26();
      ((void (*)(uint64_t, uint64_t))a26)(a3, a4);
      ((void (*)(uint64_t, uint64_t))a26)(a5, a6);
      ((void (*)(uint64_t, uint64_t))a26)(a7, a8);
      ((void (*)(uint64_t, uint64_t))a26)(a9, a10);
      ((void (*)(uint64_t, uint64_t))a26)(a11, a12);
      goto LABEL_11;
    case 6uLL:
      unint64_t v34 = a26;
      a26();
      ((void (*)(uint64_t, uint64_t))a26)(a3, a4);
      ((void (*)(uint64_t, uint64_t))a26)(a5, a6);
      goto LABEL_11;
    case 7uLL:
    case 8uLL:
      goto LABEL_12;
    case 9uLL:
      unint64_t v34 = a26;
      a26();
      ((void (*)(uint64_t, uint64_t))a26)(a3, a4);
      ((void (*)(uint64_t, uint64_t))a26)(a6, a7);
      ((void (*)(uint64_t, uint64_t))a26)(a8, a9);
LABEL_11:
      uint64_t v33 = v34;
LABEL_12:
      v33();
      break;
    default:
      return;
  }
}

uint64_t *initializeWithCopy for AirPodsPairingCommand1_1(uint64_t *a1, uint64_t *a2)
{
  uint64_t v13 = a2[9];
  uint64_t v14 = a2[10];
  uint64_t v15 = a2[11];
  uint64_t v16 = a2[12];
  uint64_t v17 = a2[13];
  uint64_t v18 = a2[14];
  uint64_t v19 = a2[15];
  uint64_t v20 = a2[16];
  uint64_t v21 = a2[17];
  uint64_t v22 = a2[18];
  uint64_t v23 = a2[19];
  uint64_t v24 = a2[20];
  uint64_t v25 = a2[21];
  unint64_t v26 = a2[22];
  uint64_t v27 = a2[23];
  unint64_t v28 = a2[24];
  uint64_t v3 = a2[8];
  uint64_t v4 = *a2;
  uint64_t v5 = a2[1];
  uint64_t v6 = a2[2];
  uint64_t v7 = a2[3];
  uint64_t v8 = a2[4];
  uint64_t v9 = a2[5];
  uint64_t v10 = a2[6];
  uint64_t v11 = a2[7];
  sub_10106E950(*a2, v5, v6, v7, v8, v9, v10, v11, v3, v13, v14, v15, v16, v17, v18, v19, v20, v21, v22,
    v23,
    v24,
    v25,
    v26,
    v27,
    v28,
    (void (*)(void))sub_1000361E0,
    (void (*)(uint64_t, uint64_t))sub_100037A38);
  *a1 = v4;
  a1[1] = v5;
  a1[2] = v6;
  a1[3] = v7;
  a1[4] = v8;
  a1[5] = v9;
  a1[6] = v10;
  a1[7] = v11;
  a1[8] = v3;
  a1[9] = v13;
  a1[10] = v14;
  a1[11] = v15;
  a1[12] = v16;
  a1[13] = v17;
  a1[14] = v18;
  a1[15] = v19;
  a1[16] = v20;
  a1[17] = v21;
  a1[18] = v22;
  a1[19] = v23;
  a1[20] = v24;
  a1[21] = v25;
  a1[22] = v26;
  a1[23] = v27;
  a1[24] = v28;
  return a1;
}

uint64_t assignWithCopy for AirPodsPairingCommand1_1(uint64_t a1, uint64_t *a2)
{
  uint64_t v30 = a2[9];
  uint64_t v31 = a2[10];
  uint64_t v32 = a2[11];
  uint64_t v33 = a2[12];
  uint64_t v34 = a2[13];
  uint64_t v35 = a2[14];
  uint64_t v36 = a2[15];
  uint64_t v37 = a2[16];
  uint64_t v38 = a2[17];
  uint64_t v39 = a2[18];
  uint64_t v40 = a2[19];
  uint64_t v41 = a2[20];
  uint64_t v42 = a2[21];
  unint64_t v43 = a2[22];
  uint64_t v44 = a2[23];
  unint64_t v45 = a2[24];
  uint64_t v3 = a2[8];
  uint64_t v4 = *a2;
  uint64_t v5 = a2[1];
  uint64_t v6 = a2[2];
  uint64_t v7 = a2[3];
  uint64_t v8 = a2[4];
  uint64_t v9 = a2[5];
  uint64_t v10 = a2[6];
  uint64_t v11 = a2[7];
  sub_10106E950(*a2, v5, v6, v7, v8, v9, v10, v11, v3, v30, v31, v32, v33, v34, v35, v36, v37, v38, v39,
    v40,
    v41,
    v42,
    v43,
    v44,
    v45,
    (void (*)(void))sub_1000361E0,
    (void (*)(uint64_t, uint64_t))sub_100037A38);
  uint64_t v12 = *(void *)a1;
  uint64_t v13 = *(void *)(a1 + 8);
  *(void *)a1 = v4;
  *(void *)(a1 + 8) = v5;
  uint64_t v14 = *(void *)(a1 + 16);
  uint64_t v15 = *(void *)(a1 + 24);
  *(void *)(a1 + 16) = v6;
  *(void *)(a1 + 24) = v7;
  uint64_t v16 = *(void *)(a1 + 32);
  uint64_t v17 = *(void *)(a1 + 40);
  *(void *)(a1 + 32) = v8;
  *(void *)(a1 + 40) = v9;
  uint64_t v18 = *(void *)(a1 + 48);
  uint64_t v19 = *(void *)(a1 + 56);
  *(void *)(a1 + 48) = v10;
  *(void *)(a1 + 56) = v11;
  long long v20 = *(_OWORD *)(a1 + 64);
  long long v21 = *(_OWORD *)(a1 + 80);
  *(void *)(a1 + 64) = v3;
  *(void *)(a1 + 72) = v30;
  *(void *)(a1 + 80) = v31;
  *(void *)(a1 + 88) = v32;
  long long v22 = *(_OWORD *)(a1 + 96);
  long long v23 = *(_OWORD *)(a1 + 112);
  *(void *)(a1 + 96) = v33;
  *(void *)(a1 + 104) = v34;
  *(void *)(a1 + 112) = v35;
  *(void *)(a1 + 120) = v36;
  long long v24 = *(_OWORD *)(a1 + 128);
  long long v25 = *(_OWORD *)(a1 + 144);
  *(void *)(a1 + 128) = v37;
  *(void *)(a1 + 136) = v38;
  *(void *)(a1 + 144) = v39;
  *(void *)(a1 + 152) = v40;
  long long v26 = *(_OWORD *)(a1 + 160);
  long long v27 = *(_OWORD *)(a1 + 176);
  *(void *)(a1 + 160) = v41;
  *(void *)(a1 + 168) = v42;
  *(void *)(a1 + 176) = v43;
  *(void *)(a1 + 184) = v44;
  unint64_t v28 = *(void *)(a1 + 192);
  *(void *)(a1 + 192) = v45;
  sub_10106E950(v12, v13, v14, v15, v16, v17, v18, v19, v20, *((uint64_t *)&v20 + 1), v21, *((uint64_t *)&v21 + 1), v22, *((uint64_t *)&v22 + 1), v23, *((uint64_t *)&v23 + 1), v24, *((uint64_t *)&v24 + 1), v25,
    *((uint64_t *)&v25 + 1),
    v26,
    *((uint64_t *)&v26 + 1),
    v27,
    *((uint64_t *)&v27 + 1),
    v28,
    (void (*)(void))sub_10001CFB8,
    (void (*)(uint64_t, uint64_t))sub_100037A24);
  return a1;
}

uint64_t assignWithTake for AirPodsPairingCommand1_1(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 192);
  uint64_t v5 = *(void *)a1;
  uint64_t v6 = *(void *)(a1 + 8);
  uint64_t v7 = *(void *)(a1 + 16);
  uint64_t v8 = *(void *)(a1 + 24);
  uint64_t v9 = *(void *)(a1 + 32);
  uint64_t v10 = *(void *)(a1 + 40);
  uint64_t v11 = *(void *)(a1 + 48);
  uint64_t v12 = *(void *)(a1 + 56);
  long long v13 = *(_OWORD *)(a1 + 64);
  long long v14 = *(_OWORD *)(a1 + 80);
  long long v15 = *(_OWORD *)(a1 + 96);
  long long v16 = *(_OWORD *)(a1 + 112);
  long long v17 = *(_OWORD *)(a1 + 128);
  long long v18 = *(_OWORD *)(a1 + 144);
  long long v19 = *(_OWORD *)(a1 + 160);
  long long v20 = *(_OWORD *)(a1 + 176);
  unint64_t v21 = *(void *)(a1 + 192);
  long long v22 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v22;
  long long v23 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 48) = v23;
  long long v24 = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 80) = v24;
  long long v25 = *(_OWORD *)(a2 + 112);
  *(_OWORD *)(a1 + 96) = *(_OWORD *)(a2 + 96);
  *(_OWORD *)(a1 + 112) = v25;
  long long v26 = *(_OWORD *)(a2 + 144);
  *(_OWORD *)(a1 + 128) = *(_OWORD *)(a2 + 128);
  *(_OWORD *)(a1 + 144) = v26;
  long long v27 = *(_OWORD *)(a2 + 176);
  *(_OWORD *)(a1 + 160) = *(_OWORD *)(a2 + 160);
  *(_OWORD *)(a1 + 176) = v27;
  *(void *)(a1 + 192) = v4;
  sub_10106E950(v5, v6, v7, v8, v9, v10, v11, v12, v13, *((uint64_t *)&v13 + 1), v14, *((uint64_t *)&v14 + 1), v15, *((uint64_t *)&v15 + 1), v16, *((uint64_t *)&v16 + 1), v17, *((uint64_t *)&v17 + 1), v18,
    *((uint64_t *)&v18 + 1),
    v19,
    *((uint64_t *)&v19 + 1),
    v20,
    *((uint64_t *)&v20 + 1),
    v21,
    (void (*)(void))sub_10001CFB8,
    (void (*)(uint64_t, uint64_t))sub_100037A24);
  return a1;
}

uint64_t getEnumTagSinglePayload for AirPodsPairingCommand1_1(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 > 0x3FFF5 && *(unsigned char *)(a1 + 200)) {
    return (*(_DWORD *)a1 + 262134);
  }
  if ((((((*(void *)(a1 + 192) >> 44) & 0x30000 | (*(void *)(a1 + 176) >> 46) & 0xC000) >> 14) & 0xFFFC000F | (16 * ((*(void *)(a1 + 24) >> 58) & 0xC | (*(void *)(a1 + 8) >> 60) & 3 | *(unsigned char *)(a1 + 95) & 0x30 | (*(void *)(a1 + 104) >> 54) & 0xC0 | (*(void *)(a1 + 120) >> 52) & 0x300 | (*(void *)(a1 + 136) >> 50) & 0xC00 | *(_WORD *)(a1 + 158) & 0x3000))) ^ 0x3FFFF) >= 0x3FFF5) {
    int v3 = -1;
  }
  else {
    int v3 = ((((*(void *)(a1 + 192) >> 44) & 0x30000 | (*(void *)(a1 + 176) >> 46) & 0xC000) >> 14) & 0xFFFC000F | (16 * ((*(void *)(a1 + 24) >> 58) & 0xC | (*(void *)(a1 + 8) >> 60) & 3 | *(unsigned char *)(a1 + 95) & 0x30 | (*(void *)(a1 + 104) >> 54) & 0xC0 | (*(void *)(a1 + 120) >> 52) & 0x300 | (*(void *)(a1 + 136) >> 50) & 0xC00 | *(_WORD *)(a1 + 158) & 0x3000))) ^ 0x3FFFF;
  }
  return (v3 + 1);
}

uint64_t storeEnumTagSinglePayload for AirPodsPairingCommand1_1(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 >= 0x3FFF6)
  {
    *(_OWORD *)(result + 168) = 0u;
    *(_OWORD *)(result + 152) = 0u;
    *(_OWORD *)(result + 136) = 0u;
    *(_OWORD *)(result + 184) = 0u;
    *(_OWORD *)(result + 120) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)unint64_t result = a2 - 262134;
    if (a3 > 0x3FFF5) {
      *(unsigned char *)(result + 200) = 1;
    }
  }
  else
  {
    if (a3 > 0x3FFF5) {
      *(unsigned char *)(result + 200) = 0;
    }
    if (a2)
    {
      uint64_t v3 = ((-a2 >> 4) & 0x3FFF) - (a2 << 14);
      *(void *)unint64_t result = 0;
      *(void *)(result + 8) = (unint64_t)((-a2 >> 4) & 3) << 60;
      *(void *)(result + 16) = 0;
      *(void *)(result + 24) = (v3 << 58) & 0x3000000000000000;
      *(_OWORD *)(result + 32) = 0u;
      *(_OWORD *)(result + 48) = 0u;
      *(_OWORD *)(result + 64) = 0u;
      *(void *)(result + 80) = 0;
      *(void *)(result + 88) = (v3 << 56) & 0x3000000000000000;
      *(void *)(result + 96) = 0;
      *(void *)(result + 104) = (v3 << 54) & 0x3000000000000000;
      *(void *)(result + 112) = 0;
      *(void *)(result + 120) = (v3 << 52) & 0x3000000000000000;
      *(void *)(result + 128) = 0;
      *(void *)(result + 136) = (v3 << 50) & 0x3000000000000000;
      *(void *)(result + 144) = 0;
      *(void *)(result + 152) = (v3 << 48) & 0x3000000000000000;
      *(void *)(result + 160) = 0;
      *(void *)(result + 168) = 0;
      *(void *)(result + 176) = (v3 << 46) & 0x3000000000000000;
      *(void *)(result + 184) = 0;
      *(void *)(result + 192) = (v3 << 44) & 0x3000000000000000;
    }
  }
  return result;
}

uint64_t sub_10106F3F8(uint64_t result, unsigned int a2)
{
  if (a2 < 0xA)
  {
    unint64_t v2 = *(void *)(result + 24) & 0xCFFFFFFFFFFFFFFFLL;
    unint64_t v3 = *(void *)(result + 88) & 0xCFFFFFFFFFFFFFFFLL;
    unint64_t v4 = *(void *)(result + 104) & 0xCFFFFFFFFFFFFFFFLL;
    unint64_t v5 = *(void *)(result + 120) & 0xCFFFFFFFFFFFFFFFLL;
    unint64_t v6 = *(void *)(result + 136) & 0xCFFFFFFFFFFFFFFFLL;
    unint64_t v7 = *(void *)(result + 152) & 0xCFFFFFFFFFFFFFFFLL;
    unint64_t v8 = *(void *)(result + 176) & 0xCFFFFFFFFFFFFFFFLL | ((unint64_t)(a2 & 3) << 60);
    unint64_t v9 = *(void *)(result + 192) & 0xCFFFFFFFFFFFFFFFLL | ((((unint64_t)a2 >> 2) & 3) << 60);
    *(void *)(result + 8) &= 0xCFFFFFFFFFFFFFFFLL;
    *(void *)(result + 24) = v2;
    *(void *)(result + 88) = v3;
    *(void *)(result + 104) = v4;
    *(void *)(result + 120) = v5;
    *(void *)(result + 136) = v6;
    *(void *)(result + 152) = v7;
    *(void *)(result + 176) = v8;
    *(void *)(result + 192) = v9;
  }
  else
  {
    *(void *)unint64_t result = a2 - 10;
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 120) = 0u;
    *(_OWORD *)(result + 136) = 0u;
    *(_OWORD *)(result + 152) = 0u;
    *(void *)(result + 168) = 0;
    *(_OWORD *)(result + 176) = xmmword_101352FE0;
    *(void *)(result + 192) = 0x2000000000000000;
  }
  return result;
}

ValueMetadata *type metadata accessor for AirPodsPairingCommand1_1()
{
  return &type metadata for AirPodsPairingCommand1_1;
}

id sub_10106F4D4(void *a1, char a2)
{
  uint64_t v5 = OBJC_IVAR____TtC12searchpartyd18SharedPairingAgent_lock;
  sub_10000588C((uint64_t *)&unk_101638CE0);
  uint64_t v6 = swift_allocObject();
  *(_DWORD *)(v6 + 16) = 0;
  *(void *)&v2[v5] = v6;
  *(void *)&v2[OBJC_IVAR____TtC12searchpartyd18SharedPairingAgent_pairingSubjects] = _swiftEmptyDictionarySingleton;
  unint64_t v7 = &off_101668000;
  *(void *)&v2[OBJC_IVAR____TtC12searchpartyd18SharedPairingAgent_underlyingObject] = a1;
  v25.uint64_t receiver = v2;
  v25.super_class = (Class)type metadata accessor for SharedPairingAgent();
  id v8 = a1;
  id v9 = [super init];
  uint64_t v10 = qword_101637688;
  id v11 = v9;
  if (v10 != -1) {
    swift_once();
  }
  uint64_t v12 = type metadata accessor for Logger();
  sub_100010324(v12, (uint64_t)qword_10170F8A8);
  id v13 = v11;
  long long v14 = Logger.logObject.getter();
  os_log_type_t v15 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v14, v15))
  {
    long long v16 = (uint8_t *)swift_slowAlloc();
    id v24 = v8;
    char v17 = a2;
    uint64_t v18 = swift_slowAlloc();
    *(_DWORD *)long long v16 = 138543362;
    id v19 = v13;
    unint64_t v7 = &off_101668000;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(void *)uint64_t v18 = v13;

    _os_log_impl((void *)&_mh_execute_header, v14, v15, "PairingAgent init %{public}@", v16, 0xCu);
    sub_10000588C((uint64_t *)&unk_101638EA0);
    swift_arrayDestroy();
    LOBYTE(v18) = v17;
    id v8 = v24;
    swift_slowDealloc();
    swift_slowDealloc();

    if ((v18 & 1) == 0) {
      goto LABEL_8;
    }
    goto LABEL_7;
  }

  if (a2)
  {
LABEL_7:
    long long v20 = *(void **)((char *)v7[434] + (void)v13);
    id v21 = v13;
    id v22 = v20;
    [v22 setDelegate:v21];
  }
LABEL_8:

  return v13;
}

id sub_10106F744()
{
  if (qword_101637688 != -1) {
    swift_once();
  }
  uint64_t v1 = type metadata accessor for Logger();
  sub_100010324(v1, (uint64_t)qword_10170F8A8);
  id v2 = v0;
  unint64_t v3 = Logger.logObject.getter();
  os_log_type_t v4 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v3, v4))
  {
    uint64_t v5 = (uint8_t *)swift_slowAlloc();
    uint64_t v6 = (void *)swift_slowAlloc();
    *(_DWORD *)uint64_t v5 = 138543362;
    id v7 = v2;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *uint64_t v6 = v2;

    _os_log_impl((void *)&_mh_execute_header, v3, v4, "PairingAgent deinit %{public}@", v5, 0xCu);
    sub_10000588C((uint64_t *)&unk_101638EA0);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
  }
  v9.uint64_t receiver = v2;
  v9.super_class = (Class)type metadata accessor for SharedPairingAgent();
  return [super dealloc];
}

uint64_t sub_10106F97C(int a1, void *a2)
{
  LODWORD(v4) = a1;
  uint64_t v5 = type metadata accessor for UUID();
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  id v8 = (char *)&v26 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_101637688 != -1) {
    swift_once();
  }
  uint64_t v9 = type metadata accessor for Logger();
  sub_100010324(v9, (uint64_t)qword_10170F8A8);
  id v10 = a2;
  id v11 = v2;
  uint64_t v12 = (char *)v10;
  id v13 = v11;
  long long v14 = Logger.logObject.getter();
  os_log_type_t v15 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v14, v15))
  {
    uint64_t v16 = swift_slowAlloc();
    int v28 = v4;
    uint64_t v4 = v16;
    char v17 = (void *)swift_slowAlloc();
    uint64_t v27 = swift_slowAlloc();
    uint64_t v30 = v27;
    *(_DWORD *)uint64_t v4 = 136446466;
    uint64_t v26 = v4 + 4;
    id v18 = [[*(id *)&v12[OBJC_IVAR____TtC12searchpartyd10Peripheral_underlyingObject] identifier:v4 + 4, v27];
    static UUID._unconditionallyBridgeFromObjectiveC(_:)();

    sub_101072634((unint64_t *)&qword_101638B10, (void (*)(uint64_t))&type metadata accessor for UUID);
    uint64_t v19 = dispatch thunk of CustomStringConvertible.description.getter();
    uint64_t v20 = v6;
    unint64_t v22 = v21;
    (*(void (**)(char *, uint64_t))(v20 + 8))(v8, v5);
    uint64_t v29 = sub_1008FA0F0(v19, v22, &v30);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    swift_bridgeObjectRelease();
    *(_WORD *)(v4 + 12) = 2114;
    uint64_t v29 = (uint64_t)v13;
    id v23 = v13;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *char v17 = v13;

    _os_log_impl((void *)&_mh_execute_header, v14, v15, "PairingAgent: startPairing %{public}s. %{public}@.", (uint8_t *)v4, 0x16u);
    sub_10000588C((uint64_t *)&unk_101638EA0);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_arrayDestroy();
    swift_slowDealloc();
    LOBYTE(v4) = v28;
    swift_slowDealloc();
  }
  else
  {
  }
  __chkstk_darwin(v24);
  *((unsigned char *)&v26 - 32) = v4 & 1;
  *(&v26 - 3) = (uint64_t)v13;
  *(&v26 - 2) = (uint64_t)v12;
  sub_10000588C(&qword_10163C5E8);
  OSAllocatedUnfairLock.callAsFunction<A>(_:)();
  return v30;
}

uint64_t sub_10106FD64@<X0>(char a1@<W0>, char *a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X8>)
{
  os_log_t v60 = a2;
  unint64_t v59 = a4;
  uint64_t v6 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v56 = *(void *)(v6 - 8);
  uint64_t v57 = v6;
  __chkstk_darwin(v6);
  uint64_t v54 = (char *)v49 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v55 = type metadata accessor for DispatchQoS();
  uint64_t v53 = *(void *)(v55 - 8);
  __chkstk_darwin(v55);
  uint64_t v52 = (char *)v49 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v58 = type metadata accessor for DispatchTime();
  uint64_t v51 = *(void *)(v58 - 8);
  uint64_t v9 = __chkstk_darwin(v58);
  id v11 = (char *)v49 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9);
  uint64_t v50 = (char *)v49 - v12;
  uint64_t v13 = type metadata accessor for DispatchQoS.QoSClass();
  uint64_t v14 = *(void *)(v13 - 8);
  __chkstk_darwin(v13);
  uint64_t v16 = (char *)v49 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v17 = type metadata accessor for UUID();
  uint64_t v18 = *(void *)(v17 - 8);
  uint64_t v19 = __chkstk_darwin(v17);
  unint64_t v21 = (char *)v49 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v22 = __chkstk_darwin(v19);
  uint64_t v24 = (char *)v49 - v23;
  if ((a1 & 1) == 0)
  {
    uint64_t v36 = v22;
    uint64_t v37 = *(void **)(a3 + OBJC_IVAR____TtC12searchpartyd10Peripheral_underlyingObject);
    id v38 = [v37 identifier];
    static UUID._unconditionallyBridgeFromObjectiveC(_:)();

    uint64_t v39 = &v60[OBJC_IVAR____TtC12searchpartyd18SharedPairingAgent_pairingSubjects];
    swift_beginAccess();
    uint64_t v40 = *(void *)v39;
    if (*(void *)(*(void *)v39 + 16))
    {
      swift_bridgeObjectRetain();
      unint64_t v41 = sub_1007240CC((uint64_t)v24);
      if (v42)
      {
        unint64_t v43 = *(void **)(*(void *)(v40 + 56) + 8 * v41);
        swift_retain();
        swift_bridgeObjectRelease();
        (*(void (**)(char *, uint64_t))(v18 + 8))(v24, v36);
        uint64_t v62 = v43;
        sub_10000588C(&qword_101668E38);
        sub_100062734(&qword_101668E50, &qword_101668E38);
        uint64_t v35 = Publisher.eraseToAnyPublisher()();
        goto LABEL_8;
      }
      swift_bridgeObjectRelease();
    }
    uint64_t v44 = *(void (**)(char *, uint64_t))(v18 + 8);
    v44(v24, v36);
    sub_10000588C(&qword_101668E38);
    swift_allocObject();
    uint64_t v45 = PassthroughSubject.init()();
    id v46 = [v37 identifier];
    static UUID._unconditionallyBridgeFromObjectiveC(_:)();

    swift_beginAccess();
    swift_retain();
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v63 = *(void *)v39;
    *(void *)uint64_t v39 = 0x8000000000000000;
    sub_100172BEC(v45, (uint64_t)v21, isUniquelyReferenced_nonNull_native);
    *(void *)uint64_t v39 = v63;
    swift_bridgeObjectRelease();
    v44(v21, v36);
    swift_endAccess();
    [*(id *)&v60[OBJC_IVAR____TtC12searchpartyd18SharedPairingAgent_underlyingObject] pairPeer:v37];
    uint64_t v62 = (void *)v45;
    sub_100062734(&qword_101668E50, &qword_101668E38);
    uint64_t v35 = Publisher.eraseToAnyPublisher()();
    goto LABEL_8;
  }
  v49[0] = v22;
  v49[1] = sub_10000588C(&qword_101668E38);
  swift_allocObject();
  uint64_t v25 = PassthroughSubject.init()();
  id v26 = objc_retainAutoreleasedReturnValue(objc_msgSend(*(id *)(a3
                                                              + OBJC_IVAR____TtC12searchpartyd10Peripheral_underlyingObject), "identifier"));
  static UUID._unconditionallyBridgeFromObjectiveC(_:)();

  uint64_t v27 = &v60[OBJC_IVAR____TtC12searchpartyd18SharedPairingAgent_pairingSubjects];
  swift_beginAccess();
  swift_retain();
  char v28 = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v62 = *(void **)v27;
  *(void *)uint64_t v27 = 0x8000000000000000;
  sub_100172BEC(v25, (uint64_t)v21, v28);
  *(void *)uint64_t v27 = v62;
  swift_bridgeObjectRelease();
  (*(void (**)(char *, void))(v18 + 8))(v21, v49[0]);
  swift_endAccess();
  sub_10000584C();
  (*(void (**)(char *, void, uint64_t))(v14 + 104))(v16, enum case for DispatchQoS.QoSClass.default(_:), v13);
  v49[0] = static OS_dispatch_queue.global(qos:)();
  (*(void (**)(char *, uint64_t))(v14 + 8))(v16, v13);
  static DispatchTime.now()();
  uint64_t v29 = v50;
  + infix(_:_:)();
  os_log_t v60 = *(char **)(v51 + 8);
  ((void (*)(char *, uint64_t))v60)(v11, v58);
  aBlock[4] = j___s7Combine18PassthroughSubjectC4sendyyxF;
  aBlock[5] = v25;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_1004B5480;
  aBlock[3] = &unk_101604978;
  uint64_t v30 = _Block_copy(aBlock);
  swift_retain();
  uint64_t v31 = v52;
  static DispatchQoS.unspecified.getter();
  uint64_t v62 = _swiftEmptyArrayStorage;
  sub_101072634((unint64_t *)&qword_10163B7E0, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
  sub_10000588C((uint64_t *)&unk_10163F350);
  sub_100062734((unint64_t *)&qword_10163B7F0, (uint64_t *)&unk_10163F350);
  uint64_t v32 = v54;
  uint64_t v33 = v57;
  dispatch thunk of SetAlgebra.init<A>(_:)();
  uint64_t v34 = (void *)v49[0];
  OS_dispatch_queue.asyncAfter(deadline:qos:flags:execute:)();
  _Block_release(v30);

  (*(void (**)(char *, uint64_t))(v56 + 8))(v32, v33);
  (*(void (**)(char *, uint64_t))(v53 + 8))(v31, v55);
  ((void (*)(char *, uint64_t))v60)(v29, v58);
  swift_release();
  aBlock[0] = v25;
  sub_100062734(&qword_101668E50, &qword_101668E38);
  uint64_t v35 = Publisher.eraseToAnyPublisher()();
LABEL_8:
  uint64_t result = swift_release();
  *unint64_t v59 = v35;
  return result;
}

uint64_t sub_101070634(void *a1)
{
  uint64_t v3 = type metadata accessor for UUID();
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  uint64_t v6 = (char *)&v21 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_101637688 != -1) {
    swift_once();
  }
  uint64_t v7 = type metadata accessor for Logger();
  sub_100010324(v7, (uint64_t)qword_10170F8A8);
  id v8 = a1;
  id v9 = v1;
  uint64_t v10 = (char *)v8;
  id v11 = (char *)v9;
  uint64_t v12 = Logger.logObject.getter();
  os_log_type_t v13 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v12, v13))
  {
    uint64_t v14 = swift_slowAlloc();
    uint64_t v22 = (void *)swift_slowAlloc();
    uint64_t v23 = swift_slowAlloc();
    uint64_t v25 = v23;
    *(_DWORD *)uint64_t v14 = 136315394;
    uint64_t v21 = v14 + 4;
    id v15 = [*(id *)&v10[OBJC_IVAR____TtC12searchpartyd10Peripheral_underlyingObject] identifier:v14 + 4];
    static UUID._unconditionallyBridgeFromObjectiveC(_:)();

    sub_101072634((unint64_t *)&qword_101638B10, (void (*)(uint64_t))&type metadata accessor for UUID);
    uint64_t v16 = dispatch thunk of CustomStringConvertible.description.getter();
    unint64_t v18 = v17;
    (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
    uint64_t v24 = sub_1008FA0F0(v16, v18, &v25);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    swift_bridgeObjectRelease();
    *(_WORD *)(v14 + 12) = 2114;
    uint64_t v24 = (uint64_t)v11;
    uint64_t v19 = v11;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *uint64_t v22 = v11;

    _os_log_impl((void *)&_mh_execute_header, v12, v13, "PairingAgent: unpair %s. %{public}@", (uint8_t *)v14, 0x16u);
    sub_10000588C((uint64_t *)&unk_101638EA0);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
  }
  __chkstk_darwin([*(id *)&v11[OBJC_IVAR____TtC12searchpartyd18SharedPairingAgent_underlyingObject] unpairPeer:*(void *)&v10[OBJC_IVAR____TtC12searchpartyd10Peripheral_underlyingObject]]);
  *(&v21 - 2) = (uint64_t)v11;
  *(&v21 - 1) = (uint64_t)v10;
  sub_10000588C((uint64_t *)&unk_101668E40);
  OSAllocatedUnfairLock.callAsFunction<A>(_:)();
  return swift_release();
}

uint64_t sub_101070A34@<X0>(uint64_t a1@<X1>, uint64_t *a2@<X8>)
{
  uint64_t v4 = type metadata accessor for UUID();
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v7 = (char *)&v10 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  id v8 = objc_retainAutoreleasedReturnValue(objc_msgSend(*(id *)(a1
                                                             + OBJC_IVAR____TtC12searchpartyd10Peripheral_underlyingObject), "identifier"));
  static UUID._unconditionallyBridgeFromObjectiveC(_:)();

  swift_beginAccess();
  *a2 = sub_100165A7C((uint64_t)v7);
  (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  return swift_endAccess();
}

uint64_t type metadata accessor for SharedPairingAgent()
{
  return self;
}

void sub_101070BD0(uint64_t a1, void *a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for UUID();
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = __chkstk_darwin(v6);
  uint64_t v10 = (char *)&v33 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8);
  uint64_t v12 = (char *)&v33 - v11;
  uint64_t v13 = a1 + OBJC_IVAR____TtC12searchpartyd18SharedPairingAgent_pairingSubjects;
  swift_beginAccess();
  swift_bridgeObjectRetain();
  id v14 = [a2 identifier];
  static UUID._unconditionallyBridgeFromObjectiveC(_:)();

  if (*(void *)(*(void *)v13 + 16))
  {
    swift_bridgeObjectRetain();
    sub_1007240CC((uint64_t)v12);
    if (v15)
    {
      swift_retain();
      swift_bridgeObjectRelease();
      (*(void (**)(char *, uint64_t))(v7 + 8))(v12, v6);
      if (a3)
      {
        v37[0] = a3;
        char v38 = 7;
        swift_errorRetain();
        PassthroughSubject.send(completion:)();
        swift_bridgeObjectRelease();
        swift_release();
        sub_10107257C((uint64_t)v37);
      }
      else
      {
        __break(1u);
      }
      return;
    }
    swift_bridgeObjectRelease();
  }
  uint64_t v16 = *(void (**)(char *, uint64_t))(v7 + 8);
  v16(v12, v6);
  if (qword_101637688 != -1) {
    swift_once();
  }
  uint64_t v17 = type metadata accessor for Logger();
  sub_100010324(v17, (uint64_t)qword_10170F8A8);
  swift_bridgeObjectRetain_n();
  id v18 = a2;
  uint64_t v19 = Logger.logObject.getter();
  os_log_type_t v20 = static os_log_type_t.error.getter();
  int v21 = v20;
  if (os_log_type_enabled(v19, v20))
  {
    uint64_t v22 = swift_slowAlloc();
    uint64_t v36 = swift_slowAlloc();
    v37[0] = v36;
    *(_DWORD *)uint64_t v22 = 136315394;
    id v23 = [v18 identifier:v22 + 4];
    os_log_t v35 = v19;
    id v24 = v23;
    static UUID._unconditionallyBridgeFromObjectiveC(_:)();

    int v34 = v21;
    sub_101072634((unint64_t *)&qword_101638B10, (void (*)(uint64_t))&type metadata accessor for UUID);
    uint64_t v25 = dispatch thunk of CustomStringConvertible.description.getter();
    id v26 = v16;
    unint64_t v28 = v27;
    v26(v10, v6);
    uint64_t v39 = sub_1008FA0F0(v25, v28, v37);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    swift_bridgeObjectRelease();
    *(_WORD *)(v22 + 12) = 2082;
    swift_bridgeObjectRetain();
    sub_10000588C(&qword_101668E38);
    sub_101072634(&qword_10163BC60, (void (*)(uint64_t))&type metadata accessor for UUID);
    uint64_t v29 = Dictionary.Keys.description.getter();
    unint64_t v31 = v30;
    swift_bridgeObjectRelease();
    uint64_t v39 = sub_1008FA0F0(v29, v31, v37);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease();
    os_log_t v32 = v35;
    _os_log_impl((void *)&_mh_execute_header, v35, (os_log_type_t)v34, "peerDidFailToCompletePairing: No pairing subject for %s. Peers %{public}s.", (uint8_t *)v22, 0x16u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
    swift_bridgeObjectRelease();
  }
  else
  {

    swift_bridgeObjectRelease_n();
  }
}

void sub_101071140(uint64_t a1, void *a2)
{
  uint64_t v4 = type metadata accessor for UUID();
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = __chkstk_darwin(v4);
  uint64_t v8 = (char *)v31 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  uint64_t v10 = (char *)v31 - v9;
  uint64_t v11 = a1 + OBJC_IVAR____TtC12searchpartyd18SharedPairingAgent_pairingSubjects;
  swift_beginAccess();
  swift_bridgeObjectRetain();
  id v12 = [a2 identifier];
  static UUID._unconditionallyBridgeFromObjectiveC(_:)();

  if (*(void *)(*(void *)v11 + 16))
  {
    swift_bridgeObjectRetain();
    sub_1007240CC((uint64_t)v10);
    if (v13)
    {
      swift_retain();
      swift_bridgeObjectRelease();
      (*(void (**)(char *, uint64_t))(v5 + 8))(v10, v4);
      PassthroughSubject.send(_:)();
      swift_release();
      swift_bridgeObjectRelease();
      return;
    }
    swift_bridgeObjectRelease();
  }
  id v14 = *(void (**)(char *, uint64_t))(v5 + 8);
  v14(v10, v4);
  if (qword_101637688 != -1) {
    swift_once();
  }
  uint64_t v15 = type metadata accessor for Logger();
  sub_100010324(v15, (uint64_t)qword_10170F8A8);
  swift_bridgeObjectRetain_n();
  id v16 = a2;
  uint64_t v17 = Logger.logObject.getter();
  os_log_type_t v18 = static os_log_type_t.error.getter();
  int v19 = v18;
  if (os_log_type_enabled(v17, v18))
  {
    uint64_t v20 = swift_slowAlloc();
    v31[0] = v14;
    uint64_t v21 = v20;
    uint64_t v34 = swift_slowAlloc();
    uint64_t v36 = v34;
    *(_DWORD *)uint64_t v21 = 136315394;
    v31[1] = v21 + 4;
    id v22 = [v16 identifier];
    os_log_t v33 = v17;
    id v23 = v22;
    static UUID._unconditionallyBridgeFromObjectiveC(_:)();

    int v32 = v19;
    sub_101072634((unint64_t *)&qword_101638B10, (void (*)(uint64_t))&type metadata accessor for UUID);
    uint64_t v24 = dispatch thunk of CustomStringConvertible.description.getter();
    unint64_t v26 = v25;
    ((void (*)(char *, uint64_t))v31[0])(v8, v4);
    uint64_t v35 = sub_1008FA0F0(v24, v26, &v36);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    swift_bridgeObjectRelease();
    *(_WORD *)(v21 + 12) = 2082;
    swift_bridgeObjectRetain();
    sub_10000588C(&qword_101668E38);
    sub_101072634(&qword_10163BC60, (void (*)(uint64_t))&type metadata accessor for UUID);
    uint64_t v27 = Dictionary.Keys.description.getter();
    unint64_t v29 = v28;
    swift_bridgeObjectRelease();
    uint64_t v35 = sub_1008FA0F0(v27, v29, &v36);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease();
    os_log_t v30 = v33;
    _os_log_impl((void *)&_mh_execute_header, v33, (os_log_type_t)v32, "peerDidCompletePairing: No pairing subject for %s. Peers %{public}s.", (uint8_t *)v21, 0x16u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
    swift_bridgeObjectRelease();
  }
  else
  {

    swift_bridgeObjectRelease_n();
  }
}

void sub_101071648(uint64_t a1, void *a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for UUID();
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  uint64_t v9 = (char *)v22 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = a1 + OBJC_IVAR____TtC12searchpartyd18SharedPairingAgent_pairingSubjects;
  swift_beginAccess();
  swift_bridgeObjectRetain();
  id v11 = [a2 identifier];
  static UUID._unconditionallyBridgeFromObjectiveC(_:)();

  if (*(void *)(*(void *)v10 + 16))
  {
    swift_bridgeObjectRetain();
    sub_1007240CC((uint64_t)v9);
    if (v12)
    {
      swift_retain();
      swift_bridgeObjectRelease();
      (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
      swift_release();
      char v13 = *(void **)(a1 + OBJC_IVAR____TtC12searchpartyd18SharedPairingAgent_underlyingObject);
      sub_100930DC8((uint64_t)_swiftEmptyArrayStorage);
      Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
      swift_bridgeObjectRelease();
      [v13 respondToPairingRequest:a2 type:a3 accept:1 data:isa];
      swift_bridgeObjectRelease();

      return;
    }
    swift_bridgeObjectRelease();
  }
  (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
  if (qword_101637688 != -1) {
    swift_once();
  }
  uint64_t v15 = type metadata accessor for Logger();
  sub_100010324(v15, (uint64_t)qword_10170F8A8);
  swift_bridgeObjectRetain_n();
  id v16 = Logger.logObject.getter();
  os_log_type_t v17 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v16, v17))
  {
    os_log_type_t v18 = (uint8_t *)swift_slowAlloc();
    uint64_t v23 = swift_slowAlloc();
    *(_DWORD *)os_log_type_t v18 = 136446210;
    swift_bridgeObjectRetain();
    sub_10000588C(&qword_101668E38);
    sub_101072634(&qword_10163BC60, (void (*)(uint64_t))&type metadata accessor for UUID);
    uint64_t v19 = Dictionary.Keys.description.getter();
    unint64_t v21 = v20;
    swift_bridgeObjectRelease();
    v22[2] = sub_1008FA0F0(v19, v21, &v23);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v16, v17, "peerDidRequestPairing: Identifier mismatch. Skip pairing request. Peers %{public}s.", v18, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
    swift_bridgeObjectRelease();
  }
  else
  {

    swift_bridgeObjectRelease_n();
  }
}

void sub_101071AF4(void *a1)
{
  uint64_t v3 = type metadata accessor for UUID();
  uint64_t v33 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  uint64_t v5 = (char *)v28 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = type metadata accessor for Logger();
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  uint64_t v9 = (char *)v28 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_101637688 != -1) {
    swift_once();
  }
  uint64_t v10 = sub_100010324(v6, (uint64_t)qword_10170F8A8);
  (*(void (**)(char *, uint64_t, uint64_t))(v7 + 16))(v9, v10, v6);
  id v11 = a1;
  id v12 = v1;
  id v13 = v11;
  id v14 = v12;
  uint64_t v15 = Logger.logObject.getter();
  int v32 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v15, (os_log_type_t)v32))
  {
    os_log_t v31 = v15;
    uint64_t v16 = swift_slowAlloc();
    unint64_t v29 = (void *)swift_slowAlloc();
    uint64_t v30 = swift_slowAlloc();
    uint64_t v35 = v30;
    *(_DWORD *)uint64_t v16 = 136446466;
    if (a1)
    {
      v28[1] = v16 + 4;
      id v17 = [v13 identifier];
      static UUID._unconditionallyBridgeFromObjectiveC(_:)();

      sub_101072634((unint64_t *)&qword_101638B10, (void (*)(uint64_t))&type metadata accessor for UUID);
      uint64_t v18 = dispatch thunk of CustomStringConvertible.description.getter();
      unint64_t v20 = v19;
      (*(void (**)(char *, uint64_t))(v33 + 8))(v5, v3);
      uint64_t v34 = sub_1008FA0F0(v18, v20, &v35);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();

      swift_bridgeObjectRelease();
      *(_WORD *)(v16 + 12) = 2114;
      uint64_t v34 = (uint64_t)v14;
      id v21 = v14;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *unint64_t v29 = v14;

      os_log_t v22 = v31;
      _os_log_impl((void *)&_mh_execute_header, v31, (os_log_type_t)v32, "peerDidCompletePairing: %{public}s. %{public}@", (uint8_t *)v16, 0x16u);
      sub_10000588C((uint64_t *)&unk_101638EA0);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      uint64_t v23 = (*(uint64_t (**)(char *, uint64_t))(v7 + 8))(v9, v6);
LABEL_7:
      __chkstk_darwin(v23);
      v28[-2] = v14;
      v28[-1] = v13;
      id v24 = v13;
      OSAllocatedUnfairLock.callAsFunction<A>(_:)();

      return;
    }

    __break(1u);
  }
  else
  {

    uint64_t v23 = (*(uint64_t (**)(char *, uint64_t))(v7 + 8))(v9, v6);
    if (a1) {
      goto LABEL_7;
    }
    unint64_t v25 = Logger.logObject.getter();
    os_log_type_t v26 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v25, v26))
    {
      uint64_t v27 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v27 = 0;
      _os_log_impl((void *)&_mh_execute_header, v25, v26, "peerDidCompletePairing: peer cannot be nil!", v27, 2u);
      swift_slowDealloc();
    }
  }
}

void sub_10107200C(void *a1, uint64_t a2, const char *a3, uint64_t a4, const char *a5)
{
  uint64_t v35 = a5;
  uint64_t v39 = a2;
  uint64_t v40 = a4;
  char v38 = a3;
  uint64_t v7 = type metadata accessor for UUID();
  uint64_t v37 = *(void *)(v7 - 8);
  __chkstk_darwin(v7);
  uint64_t v9 = (char *)&v32 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = type metadata accessor for Logger();
  uint64_t v11 = *(void *)(v10 - 8);
  __chkstk_darwin(v10);
  id v13 = (char *)&v32 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_101637688 != -1) {
    swift_once();
  }
  uint64_t v14 = sub_100010324(v10, (uint64_t)qword_10170F8A8);
  (*(void (**)(char *, uint64_t, uint64_t))(v11 + 16))(v13, v14, v10);
  id v15 = a1;
  id v16 = v5;
  id v17 = v15;
  id v18 = v16;
  unint64_t v19 = (char *)Logger.logObject.getter();
  int v36 = static os_log_type_t.default.getter();
  if (os_log_type_enabled((os_log_t)v19, (os_log_type_t)v36))
  {
    uint64_t v35 = v19;
    uint64_t v20 = swift_slowAlloc();
    uint64_t v33 = (void *)swift_slowAlloc();
    uint64_t v34 = swift_slowAlloc();
    uint64_t v42 = v34;
    *(_DWORD *)uint64_t v20 = 136446466;
    if (a1)
    {
      id v21 = [v17 identifier:v20 + 4];
      static UUID._unconditionallyBridgeFromObjectiveC(_:)();

      sub_101072634((unint64_t *)&qword_101638B10, (void (*)(uint64_t))&type metadata accessor for UUID);
      uint64_t v22 = dispatch thunk of CustomStringConvertible.description.getter();
      unint64_t v24 = v23;
      (*(void (**)(char *, uint64_t))(v37 + 8))(v9, v7);
      uint64_t v41 = sub_1008FA0F0(v22, v24, &v42);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();

      swift_bridgeObjectRelease();
      *(_WORD *)(v20 + 12) = 2114;
      uint64_t v41 = (uint64_t)v18;
      id v25 = v18;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      void *v33 = v18;

      os_log_type_t v26 = (char *)v35;
      _os_log_impl((void *)&_mh_execute_header, v35, (os_log_type_t)v36, v38, (uint8_t *)v20, 0x16u);
      sub_10000588C((uint64_t *)&unk_101638EA0);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      uint64_t v27 = (*(uint64_t (**)(char *, uint64_t))(v11 + 8))(v13, v10);
LABEL_7:
      __chkstk_darwin(v27);
      *(&v32 - 4) = (uint64_t)v18;
      *(&v32 - 3) = (uint64_t)v17;
      *(&v32 - 2) = v39;
      id v28 = v17;
      OSAllocatedUnfairLock.callAsFunction<A>(_:)();

      return;
    }

    __break(1u);
  }
  else
  {

    uint64_t v27 = (*(uint64_t (**)(char *, uint64_t))(v11 + 8))(v13, v10);
    if (a1) {
      goto LABEL_7;
    }
    unint64_t v29 = Logger.logObject.getter();
    os_log_type_t v30 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v29, v30))
    {
      os_log_t v31 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)os_log_t v31 = 0;
      _os_log_impl((void *)&_mh_execute_header, v29, v30, (const char *)v35, v31, 2u);
      swift_slowDealloc();
    }
  }
}

void sub_101072520()
{
  sub_101071648(*(void *)(v0 + 16), *(void **)(v0 + 24), *(void *)(v0 + 32));
}

void sub_101072540()
{
  sub_101071140(*(void *)(v0 + 16), *(void **)(v0 + 24));
}

void sub_10107255C()
{
  sub_101070BD0(*(void *)(v0 + 16), *(void **)(v0 + 24), *(void *)(v0 + 32));
}

uint64_t sub_10107257C(uint64_t a1)
{
  uint64_t v2 = sub_10000588C((uint64_t *)&unk_101649EF0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_1010725DC@<X0>(uint64_t *a1@<X8>)
{
  return sub_101070A34(*(void *)(v1 + 24), a1);
}

uint64_t sub_1010725F8@<X0>(uint64_t *a1@<X8>)
{
  return sub_10106FD64(*(unsigned char *)(v1 + 16), *(char **)(v1 + 24), *(void *)(v1 + 32), a1);
}

uint64_t sub_10107261C(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_10107262C()
{
  return swift_release();
}

uint64_t sub_101072634(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

ValueMetadata *type metadata accessor for AccessoryFirmwareVersionResponsePayload()
{
  return &type metadata for AccessoryFirmwareVersionResponsePayload;
}

unint64_t sub_10107268C(uint64_t a1)
{
  *(void *)(a1 + 8) = sub_1010726BC();
  unint64_t result = sub_100573F24();
  *(void *)(a1 + 16) = result;
  return result;
}

unint64_t sub_1010726BC()
{
  unint64_t result = qword_101668E58;
  if (!qword_101668E58)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_101668E58);
  }
  return result;
}

uint64_t sub_101072710(id *a1, uint64_t a2)
{
  uint64_t v3 = v2;
  uint64_t v6 = type metadata accessor for OwnedBeaconGroup.VersionedGroupMACAddress(0);
  __chkstk_darwin(v6);
  uint64_t v8 = (char *)v61 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = type metadata accessor for OwnedBeaconGroup(0);
  __chkstk_darwin(v9);
  uint64_t v11 = (char *)v61 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10107E808(a2, (uint64_t)v11, type metadata accessor for OwnedBeaconGroup);
  id v12 = [*a1 encryptedValues];
  uint64_t ObjectType = swift_getObjectType();
  int v14 = *(unsigned __int8 *)(v3 + 24);
  uint64_t v63 = v9;
  uint64_t v64 = ObjectType;
  id v65 = v12;
  uint64_t v66 = v11;
  if (v14 != 1)
  {
    uint64_t v20 = *(void *)(v3 + 16);
    if (v20 != 1)
    {
      if (qword_101636A90 != -1) {
        swift_once();
      }
      uint64_t v32 = type metadata accessor for Logger();
      sub_100010324(v32, (uint64_t)qword_10170DDC8);
      uint64_t v33 = Logger.logObject.getter();
      os_log_type_t v34 = static os_log_type_t.fault.getter();
      if (os_log_type_enabled(v33, v34))
      {
        uint64_t v35 = (uint8_t *)swift_slowAlloc();
        *(_DWORD *)uint64_t v35 = 134217984;
        uint64_t v67 = v20;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        _os_log_impl((void *)&_mh_execute_header, v33, v34, "Unexpected OwnedBeaconGroup version: %ld!", v35, 0xCu);
        swift_slowDealloc();
      }

      goto LABEL_17;
    }
    uint64_t v21 = v3 + *(int *)(v9 + 28);
    uint64_t v22 = &v8[*(int *)(v6 + 20)];
    uint64_t v23 = type metadata accessor for MACAddress();
    (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v23 - 8) + 16))(v22, v21, v23);
    *(void *)uint64_t v8 = 1;
    v8[8] = 0;
    uint64_t v24 = sub_1004D5D74();
    unint64_t v26 = v25;
    sub_10107ED9C((uint64_t)v8, type metadata accessor for OwnedBeaconGroup.VersionedGroupMACAddress);
    CKRecordKeyValueSetting.subscript.getter();
    uint64_t v27 = v67;
    unint64_t v28 = v68;
    sub_1000361E0(v24, v26);
    if (v28 >> 60 == 15)
    {
      sub_100037A24(v27, v28);
      sub_100037A24(v24, v26);
    }
    else
    {
      sub_100037A38(v27, v28);
      char v36 = _s12searchpartyd24KeyRepresentableInternalV23__derived_struct_equalsySbAC_ACtFZ_0(v27, v28, v24, v26);
      sub_10001CFB8(v24, v26);
      sub_100037A24(v27, v28);
      sub_100037A24(v27, v28);
      if (v36)
      {
LABEL_16:
        sub_10001CFB8(v24, v26);
        goto LABEL_17;
      }
    }
    unint64_t v69 = &type metadata for Data;
    uint64_t v70 = &protocol witness table for Data;
    uint64_t v67 = v24;
    unint64_t v68 = v26;
    sub_1000361E0(v24, v26);
    CKRecordKeyValueSetting.subscript.setter();
    goto LABEL_16;
  }
  CKRecordKeyValueSetting.subscript.getter();
  uint64_t v15 = v67;
  unint64_t v16 = v68;
  uint64_t v17 = MACAddress.dataRepresentation.getter();
  unint64_t v19 = v18;
  if (v16 >> 60 == 15)
  {
    sub_100037A24(v15, v16);
    sub_100037A24(v17, v19);
  }
  else
  {
    sub_100037A38(v15, v16);
    char v29 = _s12searchpartyd24KeyRepresentableInternalV23__derived_struct_equalsySbAC_ACtFZ_0(v15, v16, v17, v19);
    sub_10001CFB8(v17, v19);
    sub_100037A24(v15, v16);
    sub_100037A24(v15, v16);
    if (v29) {
      goto LABEL_17;
    }
  }
  uint64_t v30 = MACAddress.dataRepresentation.getter();
  unint64_t v69 = &type metadata for Data;
  uint64_t v70 = &protocol witness table for Data;
  uint64_t v67 = v30;
  unint64_t v68 = v31;
  CKRecordKeyValueSetting.subscript.setter();
LABEL_17:
  uint64_t v62 = v3;
  uint64_t v37 = type metadata accessor for OwnedBeaconGroup.PairingState(0);
  unint64_t v38 = sub_1004DB220();
  sub_1004DB274();
  sub_100061B8C();
  sub_10107EFA4(&qword_101647740, (void (*)(uint64_t))type metadata accessor for OwnedBeaconGroup.PairingState);
  sub_10107EFA4(&qword_101647748, (void (*)(uint64_t))type metadata accessor for OwnedBeaconGroup.PairingState);
  uint64_t v39 = Dictionary<>.dataRepresentation.getter();
  unint64_t v41 = v40;
  swift_bridgeObjectRetain();
  v61[0] = v38;
  v61[1] = v37;
  uint64_t v42 = Dictionary<>.dataRepresentation.getter();
  unint64_t v44 = v43;
  swift_bridgeObjectRelease();
  LOBYTE(v37) = _s12searchpartyd24KeyRepresentableInternalV23__derived_struct_equalsySbAC_ACtFZ_0(v39, v41, v42, v44);
  sub_10001CFB8(v42, v44);
  sub_10001CFB8(v39, v41);
  if ((v37 & 1) == 0)
  {
    swift_bridgeObjectRetain();
    uint64_t v45 = Dictionary<>.dataRepresentation.getter();
    unint64_t v47 = v46;
    swift_bridgeObjectRelease();
    unint64_t v69 = &type metadata for Data;
    uint64_t v70 = &protocol witness table for Data;
    uint64_t v67 = v45;
    unint64_t v68 = v47;
    CKRecordKeyValueSetting.subscript.setter();
  }
  uint64_t v48 = v62;
  uint64_t v49 = v63;
  uint64_t v50 = *(int *)(v63 + 36);
  uint64_t v51 = *(void *)(v62 + v50);
  uint64_t v52 = *(void *)(v62 + v50 + 8);
  uint64_t v53 = (uint64_t)v66;
  uint64_t v54 = (uint64_t *)&v66[v50];
  uint64_t v56 = *v54;
  unint64_t v55 = v54[1];
  if ((v51 != *v54 || v52 != v55) && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
  {
    unint64_t v69 = &type metadata for String;
    uint64_t v70 = &protocol witness table for String;
    uint64_t v67 = v56;
    unint64_t v68 = v55;
    swift_bridgeObjectRetain();
    CKRecordKeyValueSetting.subscript.setter();
  }
  uint64_t v57 = *(int *)(v49 + 32);
  int v58 = *(unsigned __int8 *)(v48 + v57);
  int v59 = *(unsigned __int8 *)(v53 + v57);
  if (v58 == v59)
  {
    sub_10107ED9C(v53, type metadata accessor for OwnedBeaconGroup);
    return swift_unknownObjectRelease();
  }
  else
  {
    unint64_t v69 = &type metadata for Bool;
    uint64_t v70 = &protocol witness table for Bool;
    LOBYTE(v67) = v59;
    CKRecordKeyValueSetting.subscript.setter();
    swift_unknownObjectRelease();
    return sub_10107ED9C(v53, type metadata accessor for OwnedBeaconGroup);
  }
}

void sub_101072EAC(uint64_t a1, char a2, void (*a3)(uint64_t), uint64_t a4, void (*a5)(uint64_t (*)(uint64_t a1)), void (*a6)(uint64_t (*)(uint64_t a1)))
{
  uint64_t v49 = a1;
  uint64_t v45 = a5;
  unint64_t v46 = a6;
  unint64_t v47 = a3;
  uint64_t v48 = a4;
  uint64_t v41 = sub_10000588C(&qword_10163C650);
  __chkstk_darwin(v41);
  uint64_t v42 = (uint64_t (*)(uint64_t))((char *)&v40 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v8 = type metadata accessor for OwnedBeaconGroup(0);
  uint64_t v43 = *(void *)(v8 - 8);
  uint64_t v9 = *(void *)(v43 + 64);
  uint64_t v10 = __chkstk_darwin(v8 - 8);
  unint64_t v44 = (char *)&v40 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v10);
  id v12 = (char *)&v40 - v11;
  static os_log_type_t.default.getter();
  if (qword_101637260 != -1) {
    swift_once();
  }
  sub_10000588C((uint64_t *)&unk_10163AD00);
  uint64_t v13 = swift_allocObject();
  uint64_t v14 = v13;
  long long v40 = xmmword_101342130;
  *(_OWORD *)(v13 + 16) = xmmword_101342130;
  int v15 = a2 & 1;
  if (v15) {
    uint64_t v16 = 1702195828;
  }
  else {
    uint64_t v16 = 0x65736C6166;
  }
  if (v15) {
    unint64_t v17 = 0xE400000000000000;
  }
  else {
    unint64_t v17 = 0xE500000000000000;
  }
  *(void *)(v13 + 56) = &type metadata for String;
  *(void *)(v13 + 64) = sub_10000B4CC();
  *(void *)(v14 + 32) = v16;
  *(void *)(v14 + 40) = v17;
  os_log(_:dso:log:_:_:)();
  swift_bridgeObjectRelease();
  if (v15)
  {
    uint64_t v19 = v49;
    Class v20 = sub_1011545F0(v49);
    v51[0] = v20;
    uint64_t v21 = (uint64_t)v44;
    sub_10107E808(v19, (uint64_t)v44, type metadata accessor for OwnedBeaconGroup);
    v47(v21);
    uint64_t v22 = sub_101072710(v51, v21);
    uint64_t v23 = v50;
    __chkstk_darwin(v22);
    *((void *)&v40 - 2) = v24;
    *((void *)&v40 - 1) = v21;
    OS_dispatch_queue.sync<A>(execute:)();
    sub_100A9E7EC(8);
    unint64_t v38 = v42;
    sub_10107E808(v21, (uint64_t)v42, type metadata accessor for OwnedBeaconGroup);
    swift_storeEnumTagMultiPayload();
    v45(v38);
    sub_10001DAB4((uint64_t)v38, &qword_10163C650);
    uint64_t v39 = type metadata accessor for Transaction();
    __chkstk_darwin(v39);
    *((void *)&v40 - 4) = v23;
    *((void *)&v40 - 3) = v51;
    *((void *)&v40 - 2) = v19;
    static Transaction.named<A>(_:with:)();
    sub_10107ED9C(v21, type metadata accessor for OwnedBeaconGroup);
  }
  else
  {
    uint64_t v26 = v49;
    Class v27 = sub_1011545F0(v49);
    unint64_t v44 = (char *)v27;
    sub_100AB24F0();
    uint64_t v42 = type metadata accessor for OwnedBeaconGroup;
    sub_10107E808(v26, (uint64_t)v12, type metadata accessor for OwnedBeaconGroup);
    uint64_t v28 = *(unsigned __int8 *)(v43 + 80);
    uint64_t v43 = v28 | 7;
    uint64_t v29 = swift_allocObject();
    uint64_t v30 = v48;
    *(void *)(v29 + 16) = v47;
    *(void *)(v29 + 24) = v30;
    sub_10107E9C8((uint64_t)v12, v29 + ((v28 + 32) & ~v28), type metadata accessor for OwnedBeaconGroup);
    swift_retain();
    sub_101017624(v27, (void (*)(id *))sub_10107DB58, v29);
    swift_release();
    swift_release();
    uint64_t v31 = swift_allocObject();
    uint64_t v33 = v45;
    uint64_t v32 = v46;
    *(void *)(v31 + 16) = v45;
    *(void *)(v31 + 24) = v32;
    swift_retain();
    Future.addFailure(block:)();
    swift_release();
    swift_release();
    sub_10107E808(v26, (uint64_t)v12, v42);
    uint64_t v34 = (v28 + 16) & ~v28;
    unint64_t v35 = (v9 + v34 + 7) & 0xFFFFFFFFFFFFFFF8;
    uint64_t v36 = swift_allocObject();
    sub_10107E9C8((uint64_t)v12, v36 + v34, type metadata accessor for OwnedBeaconGroup);
    *(void *)(v36 + v35) = v50;
    uint64_t v37 = (void (**)(uint64_t (*)(uint64_t)))(v36 + ((v35 + 15) & 0xFFFFFFFFFFFFFFF8));
    *uint64_t v37 = v33;
    v37[1] = v32;
    swift_retain();
    swift_retain();
    Future.addSuccess(block:)();

    swift_release();
    swift_release();
    swift_release();
  }
}

void sub_101073560(uint64_t a1, char a2, void (*a3)(uint64_t), uint64_t a4, void (*a5)(uint64_t (*)()), void (*a6)(uint64_t (*)()))
{
  uint64_t v49 = a1;
  uint64_t v45 = a5;
  unint64_t v46 = a6;
  unint64_t v47 = a3;
  uint64_t v48 = a4;
  uint64_t v41 = sub_10000588C((uint64_t *)&unk_101656900);
  __chkstk_darwin(v41);
  uint64_t v42 = (uint64_t (*)())((char *)&v40 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v8 = type metadata accessor for OwnedBeaconRecord();
  uint64_t v43 = *(void *)(v8 - 8);
  uint64_t v9 = *(void *)(v43 + 64);
  uint64_t v10 = __chkstk_darwin(v8 - 8);
  unint64_t v44 = (char *)&v40 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v10);
  id v12 = (char *)&v40 - v11;
  static os_log_type_t.default.getter();
  if (qword_101637260 != -1) {
    swift_once();
  }
  sub_10000588C((uint64_t *)&unk_10163AD00);
  uint64_t v13 = swift_allocObject();
  uint64_t v14 = v13;
  long long v40 = xmmword_101342130;
  *(_OWORD *)(v13 + 16) = xmmword_101342130;
  int v15 = a2 & 1;
  if (v15) {
    uint64_t v16 = 1702195828;
  }
  else {
    uint64_t v16 = 0x65736C6166;
  }
  if (v15) {
    unint64_t v17 = 0xE400000000000000;
  }
  else {
    unint64_t v17 = 0xE500000000000000;
  }
  *(void *)(v13 + 56) = &type metadata for String;
  *(void *)(v13 + 64) = sub_10000B4CC();
  *(void *)(v14 + 32) = v16;
  *(void *)(v14 + 40) = v17;
  os_log(_:dso:log:_:_:)();
  swift_bridgeObjectRelease();
  if (v15)
  {
    uint64_t v19 = v49;
    Class v20 = sub_101154964(v49);
    v51[0] = v20;
    uint64_t v21 = (uint64_t)v44;
    sub_10107E808(v19, (uint64_t)v44, (uint64_t (*)(void))type metadata accessor for OwnedBeaconRecord);
    v47(v21);
    sub_101075E90(v51, v21);
    uint64_t v22 = v50;
    uint64_t v23 = QueueSynchronizer.conditionalSync<A>(_:)();
    __chkstk_darwin(v23);
    *((void *)&v40 - 2) = v24;
    *((void *)&v40 - 1) = v21;
    OS_dispatch_queue.sync<A>(execute:)();
    QueueSynchronizer.conditionalSync<A>(_:)();
    sub_100A9E7EC(8);
    unint64_t v38 = v42;
    sub_10107E808(v21, (uint64_t)v42, (uint64_t (*)(void))type metadata accessor for OwnedBeaconRecord);
    swift_storeEnumTagMultiPayload();
    v45(v38);
    sub_10001DAB4((uint64_t)v38, (uint64_t *)&unk_101656900);
    uint64_t v39 = type metadata accessor for Transaction();
    __chkstk_darwin(v39);
    *((void *)&v40 - 4) = v22;
    *((void *)&v40 - 3) = v51;
    *((void *)&v40 - 2) = v19;
    static Transaction.named<A>(_:with:)();
    sub_10107ED9C(v21, (uint64_t (*)(void))type metadata accessor for OwnedBeaconRecord);
  }
  else
  {
    uint64_t v26 = v49;
    Class v27 = sub_101154964(v49);
    unint64_t v44 = (char *)v27;
    sub_100AB24F0();
    uint64_t v42 = type metadata accessor for OwnedBeaconRecord;
    sub_10107E808(v26, (uint64_t)v12, (uint64_t (*)(void))type metadata accessor for OwnedBeaconRecord);
    uint64_t v28 = *(unsigned __int8 *)(v43 + 80);
    uint64_t v43 = v28 | 7;
    uint64_t v29 = swift_allocObject();
    uint64_t v30 = v48;
    *(void *)(v29 + 16) = v47;
    *(void *)(v29 + 24) = v30;
    sub_10107E9C8((uint64_t)v12, v29 + ((v28 + 32) & ~v28), (uint64_t (*)(void))type metadata accessor for OwnedBeaconRecord);
    swift_retain();
    sub_101017624(v27, (void (*)(id *))sub_10107CC5C, v29);
    swift_release();
    swift_release();
    uint64_t v31 = swift_allocObject();
    uint64_t v33 = v45;
    uint64_t v32 = v46;
    *(void *)(v31 + 16) = v45;
    *(void *)(v31 + 24) = v32;
    swift_retain();
    Future.addFailure(block:)();
    swift_release();
    swift_release();
    sub_10107E808(v26, (uint64_t)v12, (uint64_t (*)(void))v42);
    uint64_t v34 = (v28 + 16) & ~v28;
    unint64_t v35 = (v9 + v34 + 7) & 0xFFFFFFFFFFFFFFF8;
    uint64_t v36 = swift_allocObject();
    sub_10107E9C8((uint64_t)v12, v36 + v34, (uint64_t (*)(void))type metadata accessor for OwnedBeaconRecord);
    *(void *)(v36 + v35) = v50;
    uint64_t v37 = (void (**)(uint64_t (*)()))(v36 + ((v35 + 15) & 0xFFFFFFFFFFFFFFF8));
    *uint64_t v37 = v33;
    v37[1] = v32;
    swift_retain();
    swift_retain();
    Future.addSuccess(block:)();

    swift_release();
    swift_release();
    swift_release();
  }
}

void sub_101073C68(uint64_t a1, char a2, void (*a3)(uint64_t), uint64_t a4, void (*a5)(uint64_t (*)(uint64_t a1)), void (*a6)(uint64_t (*)(uint64_t a1)))
{
  uint64_t v49 = a1;
  uint64_t v45 = a5;
  unint64_t v46 = a6;
  unint64_t v47 = a3;
  uint64_t v48 = a4;
  uint64_t v41 = sub_10000588C(&qword_10163FFA0);
  __chkstk_darwin(v41);
  uint64_t v42 = (uint64_t (*)(uint64_t))((char *)&v40 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v8 = type metadata accessor for SharedBeaconRecord(0);
  uint64_t v43 = *(void *)(v8 - 8);
  uint64_t v9 = *(void *)(v43 + 64);
  uint64_t v10 = __chkstk_darwin(v8 - 8);
  unint64_t v44 = (char *)&v40 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v10);
  id v12 = (char *)&v40 - v11;
  static os_log_type_t.default.getter();
  if (qword_101637260 != -1) {
    swift_once();
  }
  sub_10000588C((uint64_t *)&unk_10163AD00);
  uint64_t v13 = swift_allocObject();
  uint64_t v14 = v13;
  long long v40 = xmmword_101342130;
  *(_OWORD *)(v13 + 16) = xmmword_101342130;
  int v15 = a2 & 1;
  if (v15) {
    uint64_t v16 = 1702195828;
  }
  else {
    uint64_t v16 = 0x65736C6166;
  }
  if (v15) {
    unint64_t v17 = 0xE400000000000000;
  }
  else {
    unint64_t v17 = 0xE500000000000000;
  }
  *(void *)(v13 + 56) = &type metadata for String;
  *(void *)(v13 + 64) = sub_10000B4CC();
  *(void *)(v14 + 32) = v16;
  *(void *)(v14 + 40) = v17;
  os_log(_:dso:log:_:_:)();
  swift_bridgeObjectRelease();
  if (v15)
  {
    uint64_t v19 = v49;
    Class v20 = sub_101155754(v49);
    v51[0] = v20;
    uint64_t v21 = (uint64_t)v44;
    sub_10107E808(v19, (uint64_t)v44, type metadata accessor for SharedBeaconRecord);
    v47(v21);
    sub_100CF51A4(v51, v21);
    uint64_t v22 = v50;
    uint64_t v23 = QueueSynchronizer.conditionalSync<A>(_:)();
    __chkstk_darwin(v23);
    *((void *)&v40 - 2) = v24;
    *((void *)&v40 - 1) = v21;
    OS_dispatch_queue.sync<A>(execute:)();
    QueueSynchronizer.conditionalSync<A>(_:)();
    sub_100A9E7EC(8);
    unint64_t v38 = v42;
    sub_10107E808(v21, (uint64_t)v42, type metadata accessor for SharedBeaconRecord);
    swift_storeEnumTagMultiPayload();
    v45(v38);
    sub_10001DAB4((uint64_t)v38, &qword_10163FFA0);
    uint64_t v39 = type metadata accessor for Transaction();
    __chkstk_darwin(v39);
    *((void *)&v40 - 4) = v22;
    *((void *)&v40 - 3) = v51;
    *((void *)&v40 - 2) = v19;
    static Transaction.named<A>(_:with:)();
    sub_10107ED9C(v21, type metadata accessor for SharedBeaconRecord);
  }
  else
  {
    uint64_t v26 = v49;
    Class v27 = sub_101155754(v49);
    unint64_t v44 = (char *)v27;
    sub_100AB24F0();
    uint64_t v42 = type metadata accessor for SharedBeaconRecord;
    sub_10107E808(v26, (uint64_t)v12, type metadata accessor for SharedBeaconRecord);
    uint64_t v28 = *(unsigned __int8 *)(v43 + 80);
    uint64_t v43 = v28 | 7;
    uint64_t v29 = swift_allocObject();
    uint64_t v30 = v48;
    *(void *)(v29 + 16) = v47;
    *(void *)(v29 + 24) = v30;
    sub_10107E9C8((uint64_t)v12, v29 + ((v28 + 32) & ~v28), type metadata accessor for SharedBeaconRecord);
    swift_retain();
    sub_101017624(v27, (void (*)(id *))sub_10107DFC8, v29);
    swift_release();
    swift_release();
    uint64_t v31 = swift_allocObject();
    uint64_t v33 = v45;
    uint64_t v32 = v46;
    *(void *)(v31 + 16) = v45;
    *(void *)(v31 + 24) = v32;
    swift_retain();
    Future.addFailure(block:)();
    swift_release();
    swift_release();
    sub_10107E808(v26, (uint64_t)v12, v42);
    uint64_t v34 = (v28 + 16) & ~v28;
    unint64_t v35 = (v9 + v34 + 7) & 0xFFFFFFFFFFFFFFF8;
    uint64_t v36 = swift_allocObject();
    sub_10107E9C8((uint64_t)v12, v36 + v34, type metadata accessor for SharedBeaconRecord);
    *(void *)(v36 + v35) = v50;
    uint64_t v37 = (void (**)(uint64_t (*)(uint64_t)))(v36 + ((v35 + 15) & 0xFFFFFFFFFFFFFFF8));
    *uint64_t v37 = v33;
    v37[1] = v32;
    swift_retain();
    swift_retain();
    Future.addSuccess(block:)();

    swift_release();
    swift_release();
    swift_release();
  }
}

void sub_101074370(uint64_t a1, char a2, void (*a3)(uint64_t), uint64_t a4, void (*a5)(uint64_t (*)()), void (*a6)(uint64_t (*)()))
{
  uint64_t v49 = a1;
  uint64_t v45 = a5;
  unint64_t v46 = a6;
  unint64_t v47 = a3;
  uint64_t v48 = a4;
  uint64_t v41 = sub_10000588C(&qword_101651918);
  __chkstk_darwin(v41);
  uint64_t v42 = (uint64_t (*)())((char *)&v40 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v8 = type metadata accessor for LostModeRecord();
  uint64_t v43 = *(void *)(v8 - 8);
  uint64_t v9 = *(void *)(v43 + 64);
  uint64_t v10 = __chkstk_darwin(v8 - 8);
  unint64_t v44 = (char *)&v40 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v10);
  id v12 = (char *)&v40 - v11;
  static os_log_type_t.default.getter();
  if (qword_101637260 != -1) {
    swift_once();
  }
  sub_10000588C((uint64_t *)&unk_10163AD00);
  uint64_t v13 = swift_allocObject();
  uint64_t v14 = v13;
  long long v40 = xmmword_101342130;
  *(_OWORD *)(v13 + 16) = xmmword_101342130;
  int v15 = a2 & 1;
  if (v15) {
    uint64_t v16 = 1702195828;
  }
  else {
    uint64_t v16 = 0x65736C6166;
  }
  if (v15) {
    unint64_t v17 = 0xE400000000000000;
  }
  else {
    unint64_t v17 = 0xE500000000000000;
  }
  *(void *)(v13 + 56) = &type metadata for String;
  *(void *)(v13 + 64) = sub_10000B4CC();
  *(void *)(v14 + 32) = v16;
  *(void *)(v14 + 40) = v17;
  os_log(_:dso:log:_:_:)();
  swift_bridgeObjectRelease();
  if (v15)
  {
    uint64_t v19 = v49;
    Class v20 = sub_101153B88(v49);
    v51[0] = v20;
    uint64_t v21 = (uint64_t)v44;
    sub_10107E808(v19, (uint64_t)v44, (uint64_t (*)(void))type metadata accessor for LostModeRecord);
    v47(v21);
    uint64_t v22 = sub_100B223B8(v51, v21);
    uint64_t v23 = v50;
    __chkstk_darwin(v22);
    *((void *)&v40 - 2) = v24;
    *((void *)&v40 - 1) = v21;
    OS_dispatch_queue.sync<A>(execute:)();
    sub_100A9E7EC(8);
    unint64_t v38 = v42;
    sub_10107E808(v21, (uint64_t)v42, (uint64_t (*)(void))type metadata accessor for LostModeRecord);
    swift_storeEnumTagMultiPayload();
    v45(v38);
    sub_10001DAB4((uint64_t)v38, &qword_101651918);
    uint64_t v39 = type metadata accessor for Transaction();
    __chkstk_darwin(v39);
    *((void *)&v40 - 4) = v23;
    *((void *)&v40 - 3) = v51;
    *((void *)&v40 - 2) = v19;
    static Transaction.named<A>(_:with:)();
    sub_10107ED9C(v21, (uint64_t (*)(void))type metadata accessor for LostModeRecord);
  }
  else
  {
    uint64_t v26 = v49;
    Class v27 = sub_101153B88(v49);
    unint64_t v44 = (char *)v27;
    sub_100AB24F0();
    uint64_t v42 = type metadata accessor for LostModeRecord;
    sub_10107E808(v26, (uint64_t)v12, (uint64_t (*)(void))type metadata accessor for LostModeRecord);
    uint64_t v28 = *(unsigned __int8 *)(v43 + 80);
    uint64_t v43 = v28 | 7;
    uint64_t v29 = swift_allocObject();
    uint64_t v30 = v48;
    *(void *)(v29 + 16) = v47;
    *(void *)(v29 + 24) = v30;
    sub_10107E9C8((uint64_t)v12, v29 + ((v28 + 32) & ~v28), (uint64_t (*)(void))type metadata accessor for LostModeRecord);
    swift_retain();
    sub_101017624(v27, (void (*)(id *))sub_10107EA30, v29);
    swift_release();
    swift_release();
    uint64_t v31 = swift_allocObject();
    uint64_t v33 = v45;
    uint64_t v32 = v46;
    *(void *)(v31 + 16) = v45;
    *(void *)(v31 + 24) = v32;
    swift_retain();
    Future.addFailure(block:)();
    swift_release();
    swift_release();
    sub_10107E808(v26, (uint64_t)v12, (uint64_t (*)(void))v42);
    uint64_t v34 = (v28 + 16) & ~v28;
    unint64_t v35 = (v9 + v34 + 7) & 0xFFFFFFFFFFFFFFF8;
    uint64_t v36 = swift_allocObject();
    sub_10107E9C8((uint64_t)v12, v36 + v34, (uint64_t (*)(void))type metadata accessor for LostModeRecord);
    *(void *)(v36 + v35) = v50;
    uint64_t v37 = (void (**)(uint64_t (*)()))(v36 + ((v35 + 15) & 0xFFFFFFFFFFFFFFF8));
    *uint64_t v37 = v33;
    v37[1] = v32;
    swift_retain();
    swift_retain();
    Future.addSuccess(block:)();

    swift_release();
    swift_release();
    swift_release();
  }
}

void sub_101074A24(uint64_t a1, char a2, void (*a3)(uint64_t), uint64_t a4, void (*a5)(uint64_t (*)()), void (*a6)(uint64_t (*)()))
{
  uint64_t v49 = a1;
  uint64_t v45 = a5;
  unint64_t v46 = a6;
  unint64_t v47 = a3;
  uint64_t v48 = a4;
  uint64_t v41 = sub_10000588C(&qword_10164B300);
  __chkstk_darwin(v41);
  uint64_t v42 = (uint64_t (*)())((char *)&v40 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v8 = type metadata accessor for BeaconNamingRecord();
  uint64_t v43 = *(void *)(v8 - 8);
  uint64_t v9 = *(void *)(v43 + 64);
  uint64_t v10 = __chkstk_darwin(v8 - 8);
  unint64_t v44 = (char *)&v40 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v10);
  id v12 = (char *)&v40 - v11;
  static os_log_type_t.default.getter();
  if (qword_101637260 != -1) {
    swift_once();
  }
  sub_10000588C((uint64_t *)&unk_10163AD00);
  uint64_t v13 = swift_allocObject();
  uint64_t v14 = v13;
  long long v40 = xmmword_101342130;
  *(_OWORD *)(v13 + 16) = xmmword_101342130;
  int v15 = a2 & 1;
  if (v15) {
    uint64_t v16 = 1702195828;
  }
  else {
    uint64_t v16 = 0x65736C6166;
  }
  if (v15) {
    unint64_t v17 = 0xE400000000000000;
  }
  else {
    unint64_t v17 = 0xE500000000000000;
  }
  *(void *)(v13 + 56) = &type metadata for String;
  *(void *)(v13 + 64) = sub_10000B4CC();
  *(void *)(v14 + 32) = v16;
  *(void *)(v14 + 40) = v17;
  os_log(_:dso:log:_:_:)();
  swift_bridgeObjectRelease();
  if (v15)
  {
    uint64_t v19 = v49;
    Class v20 = sub_101154D08(v49);
    v51[0] = v20;
    uint64_t v21 = (uint64_t)v44;
    sub_10107E808(v19, (uint64_t)v44, (uint64_t (*)(void))type metadata accessor for BeaconNamingRecord);
    v47(v21);
    sub_101076E58(v51, v21);
    uint64_t v22 = v50;
    uint64_t v23 = QueueSynchronizer.conditionalSync<A>(_:)();
    __chkstk_darwin(v23);
    *((void *)&v40 - 2) = v24;
    *((void *)&v40 - 1) = v21;
    OS_dispatch_queue.sync<A>(execute:)();
    QueueSynchronizer.conditionalSync<A>(_:)();
    sub_100A9E7EC(8);
    unint64_t v38 = v42;
    sub_10107E808(v21, (uint64_t)v42, (uint64_t (*)(void))type metadata accessor for BeaconNamingRecord);
    swift_storeEnumTagMultiPayload();
    v45(v38);
    sub_10001DAB4((uint64_t)v38, &qword_10164B300);
    uint64_t v39 = type metadata accessor for Transaction();
    __chkstk_darwin(v39);
    *((void *)&v40 - 4) = v22;
    *((void *)&v40 - 3) = v51;
    *((void *)&v40 - 2) = v19;
    static Transaction.named<A>(_:with:)();
    sub_10107ED9C(v21, (uint64_t (*)(void))type metadata accessor for BeaconNamingRecord);
  }
  else
  {
    uint64_t v26 = v49;
    Class v27 = sub_101154D08(v49);
    unint64_t v44 = (char *)v27;
    sub_100AB24F0();
    uint64_t v42 = type metadata accessor for BeaconNamingRecord;
    sub_10107E808(v26, (uint64_t)v12, (uint64_t (*)(void))type metadata accessor for BeaconNamingRecord);
    uint64_t v28 = *(unsigned __int8 *)(v43 + 80);
    uint64_t v43 = v28 | 7;
    uint64_t v29 = swift_allocObject();
    uint64_t v30 = v48;
    *(void *)(v29 + 16) = v47;
    *(void *)(v29 + 24) = v30;
    sub_10107E9C8((uint64_t)v12, v29 + ((v28 + 32) & ~v28), (uint64_t (*)(void))type metadata accessor for BeaconNamingRecord);
    swift_retain();
    sub_101017624(v27, (void (*)(id *))sub_10107D82C, v29);
    swift_release();
    swift_release();
    uint64_t v31 = swift_allocObject();
    uint64_t v33 = v45;
    uint64_t v32 = v46;
    *(void *)(v31 + 16) = v45;
    *(void *)(v31 + 24) = v32;
    swift_retain();
    Future.addFailure(block:)();
    swift_release();
    swift_release();
    sub_10107E808(v26, (uint64_t)v12, (uint64_t (*)(void))v42);
    uint64_t v34 = (v28 + 16) & ~v28;
    unint64_t v35 = (v9 + v34 + 7) & 0xFFFFFFFFFFFFFFF8;
    uint64_t v36 = swift_allocObject();
    sub_10107E9C8((uint64_t)v12, v36 + v34, (uint64_t (*)(void))type metadata accessor for BeaconNamingRecord);
    *(void *)(v36 + v35) = v50;
    uint64_t v37 = (void (**)(uint64_t (*)()))(v36 + ((v35 + 15) & 0xFFFFFFFFFFFFFFF8));
    *uint64_t v37 = v33;
    v37[1] = v32;
    swift_retain();
    swift_retain();
    Future.addSuccess(block:)();

    swift_release();
    swift_release();
    swift_release();
  }
}

void sub_10107512C(uint64_t a1, char a2, void (*a3)(uint64_t), uint64_t a4, void (*a5)(uint64_t (*)()), void (*a6)(uint64_t (*)()))
{
  uint64_t v49 = a1;
  uint64_t v45 = a5;
  unint64_t v46 = a6;
  unint64_t v47 = a3;
  uint64_t v48 = a4;
  uint64_t v41 = sub_10000588C(&qword_101648068);
  __chkstk_darwin(v41);
  uint64_t v42 = (uint64_t (*)())((char *)&v40 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v8 = type metadata accessor for ShareRecord();
  uint64_t v43 = *(void *)(v8 - 8);
  uint64_t v9 = *(void *)(v43 + 64);
  uint64_t v10 = __chkstk_darwin(v8 - 8);
  unint64_t v44 = (char *)&v40 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v10);
  id v12 = (char *)&v40 - v11;
  static os_log_type_t.default.getter();
  if (qword_101637260 != -1) {
    swift_once();
  }
  sub_10000588C((uint64_t *)&unk_10163AD00);
  uint64_t v13 = swift_allocObject();
  uint64_t v14 = v13;
  long long v40 = xmmword_101342130;
  *(_OWORD *)(v13 + 16) = xmmword_101342130;
  int v15 = a2 & 1;
  if (v15) {
    uint64_t v16 = 1702195828;
  }
  else {
    uint64_t v16 = 0x65736C6166;
  }
  if (v15) {
    unint64_t v17 = 0xE400000000000000;
  }
  else {
    unint64_t v17 = 0xE500000000000000;
  }
  *(void *)(v13 + 56) = &type metadata for String;
  *(void *)(v13 + 64) = sub_10000B4CC();
  *(void *)(v14 + 32) = v16;
  *(void *)(v14 + 40) = v17;
  os_log(_:dso:log:_:_:)();
  swift_bridgeObjectRelease();
  if (v15)
  {
    uint64_t v19 = v49;
    Class v20 = sub_1011534A0(v49);
    v51[0] = v20;
    uint64_t v21 = (uint64_t)v44;
    sub_10107E808(v19, (uint64_t)v44, (uint64_t (*)(void))type metadata accessor for ShareRecord);
    v47(v21);
    uint64_t v22 = sub_100A9F094(v51, v21);
    uint64_t v23 = v50;
    __chkstk_darwin(v22);
    *((void *)&v40 - 2) = v24;
    *((void *)&v40 - 1) = v21;
    OS_dispatch_queue.sync<A>(execute:)();
    sub_100A9E7EC(8);
    unint64_t v38 = v42;
    sub_10107E808(v21, (uint64_t)v42, (uint64_t (*)(void))type metadata accessor for ShareRecord);
    swift_storeEnumTagMultiPayload();
    v45(v38);
    sub_10001DAB4((uint64_t)v38, &qword_101648068);
    uint64_t v39 = type metadata accessor for Transaction();
    __chkstk_darwin(v39);
    *((void *)&v40 - 4) = v23;
    *((void *)&v40 - 3) = v51;
    *((void *)&v40 - 2) = v19;
    static Transaction.named<A>(_:with:)();
    sub_10107ED9C(v21, (uint64_t (*)(void))type metadata accessor for ShareRecord);
  }
  else
  {
    uint64_t v26 = v49;
    Class v27 = sub_1011534A0(v49);
    unint64_t v44 = (char *)v27;
    sub_100AB24F0();
    uint64_t v42 = type metadata accessor for ShareRecord;
    sub_10107E808(v26, (uint64_t)v12, (uint64_t (*)(void))type metadata accessor for ShareRecord);
    uint64_t v28 = *(unsigned __int8 *)(v43 + 80);
    uint64_t v43 = v28 | 7;
    uint64_t v29 = swift_allocObject();
    uint64_t v30 = v48;
    *(void *)(v29 + 16) = v47;
    *(void *)(v29 + 24) = v30;
    sub_10107E9C8((uint64_t)v12, v29 + ((v28 + 32) & ~v28), (uint64_t (*)(void))type metadata accessor for ShareRecord);
    swift_retain();
    sub_101017624(v27, (void (*)(id *))sub_10107E594, v29);
    swift_release();
    swift_release();
    uint64_t v31 = swift_allocObject();
    uint64_t v33 = v45;
    uint64_t v32 = v46;
    *(void *)(v31 + 16) = v45;
    *(void *)(v31 + 24) = v32;
    swift_retain();
    Future.addFailure(block:)();
    swift_release();
    swift_release();
    sub_10107E808(v26, (uint64_t)v12, (uint64_t (*)(void))v42);
    uint64_t v34 = (v28 + 16) & ~v28;
    unint64_t v35 = (v9 + v34 + 7) & 0xFFFFFFFFFFFFFFF8;
    uint64_t v36 = swift_allocObject();
    sub_10107E9C8((uint64_t)v12, v36 + v34, (uint64_t (*)(void))type metadata accessor for ShareRecord);
    *(void *)(v36 + v35) = v50;
    uint64_t v37 = (void (**)(uint64_t (*)()))(v36 + ((v35 + 15) & 0xFFFFFFFFFFFFFFF8));
    *uint64_t v37 = v33;
    v37[1] = v32;
    swift_retain();
    swift_retain();
    Future.addSuccess(block:)();

    swift_release();
    swift_release();
    swift_release();
  }
}

void sub_1010757E0(uint64_t a1, char a2, void (*a3)(uint64_t), uint64_t a4, void (*a5)(uint64_t (*)()), void (*a6)(uint64_t (*)()))
{
  uint64_t v49 = a1;
  uint64_t v45 = a5;
  unint64_t v46 = a6;
  unint64_t v47 = a3;
  uint64_t v48 = a4;
  uint64_t v41 = sub_10000588C(&qword_10164B328);
  __chkstk_darwin(v41);
  uint64_t v42 = (uint64_t (*)())((char *)&v40 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v8 = type metadata accessor for KeyAlignmentRecord();
  uint64_t v43 = *(void *)(v8 - 8);
  uint64_t v9 = *(void *)(v43 + 64);
  uint64_t v10 = __chkstk_darwin(v8 - 8);
  unint64_t v44 = (char *)&v40 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v10);
  id v12 = (char *)&v40 - v11;
  static os_log_type_t.default.getter();
  if (qword_101637260 != -1) {
    swift_once();
  }
  sub_10000588C((uint64_t *)&unk_10163AD00);
  uint64_t v13 = swift_allocObject();
  uint64_t v14 = v13;
  long long v40 = xmmword_101342130;
  *(_OWORD *)(v13 + 16) = xmmword_101342130;
  int v15 = a2 & 1;
  if (v15) {
    uint64_t v16 = 1702195828;
  }
  else {
    uint64_t v16 = 0x65736C6166;
  }
  if (v15) {
    unint64_t v17 = 0xE400000000000000;
  }
  else {
    unint64_t v17 = 0xE500000000000000;
  }
  *(void *)(v13 + 56) = &type metadata for String;
  *(void *)(v13 + 64) = sub_10000B4CC();
  *(void *)(v14 + 32) = v16;
  *(void *)(v14 + 40) = v17;
  os_log(_:dso:log:_:_:)();
  swift_bridgeObjectRelease();
  if (v15)
  {
    uint64_t v19 = v49;
    Class v20 = sub_101155078(v49);
    v51[0] = v20;
    uint64_t v21 = (uint64_t)v44;
    sub_10107E808(v19, (uint64_t)v44, (uint64_t (*)(void))type metadata accessor for KeyAlignmentRecord);
    v47(v21);
    uint64_t v22 = sub_1000C17FC(v21, v51);
    uint64_t v23 = v50;
    __chkstk_darwin(v22);
    *((void *)&v40 - 2) = v24;
    *((void *)&v40 - 1) = v21;
    OS_dispatch_queue.sync<A>(execute:)();
    sub_100A9E7EC(8);
    unint64_t v38 = v42;
    sub_10107E808(v21, (uint64_t)v42, (uint64_t (*)(void))type metadata accessor for KeyAlignmentRecord);
    swift_storeEnumTagMultiPayload();
    v45(v38);
    sub_10001DAB4((uint64_t)v38, &qword_10164B328);
    uint64_t v39 = type metadata accessor for Transaction();
    __chkstk_darwin(v39);
    *((void *)&v40 - 4) = v23;
    *((void *)&v40 - 3) = v51;
    *((void *)&v40 - 2) = v19;
    static Transaction.named<A>(_:with:)();
    sub_10107ED9C(v21, (uint64_t (*)(void))type metadata accessor for KeyAlignmentRecord);
  }
  else
  {
    uint64_t v26 = v49;
    Class v27 = sub_101155078(v49);
    unint64_t v44 = (char *)v27;
    sub_100AB24F0();
    uint64_t v42 = type metadata accessor for KeyAlignmentRecord;
    sub_10107E808(v26, (uint64_t)v12, (uint64_t (*)(void))type metadata accessor for KeyAlignmentRecord);
    uint64_t v28 = *(unsigned __int8 *)(v43 + 80);
    uint64_t v43 = v28 | 7;
    uint64_t v29 = swift_allocObject();
    uint64_t v30 = v48;
    *(void *)(v29 + 16) = v47;
    *(void *)(v29 + 24) = v30;
    sub_10107E9C8((uint64_t)v12, v29 + ((v28 + 32) & ~v28), (uint64_t (*)(void))type metadata accessor for KeyAlignmentRecord);
    swift_retain();
    sub_101017624(v27, (void (*)(id *))sub_10107D4D0, v29);
    swift_release();
    swift_release();
    uint64_t v31 = swift_allocObject();
    uint64_t v33 = v45;
    uint64_t v32 = v46;
    *(void *)(v31 + 16) = v45;
    *(void *)(v31 + 24) = v32;
    swift_retain();
    Future.addFailure(block:)();
    swift_release();
    swift_release();
    sub_10107E808(v26, (uint64_t)v12, (uint64_t (*)(void))v42);
    uint64_t v34 = (v28 + 16) & ~v28;
    unint64_t v35 = (v9 + v34 + 7) & 0xFFFFFFFFFFFFFFF8;
    uint64_t v36 = swift_allocObject();
    sub_10107E9C8((uint64_t)v12, v36 + v34, (uint64_t (*)(void))type metadata accessor for KeyAlignmentRecord);
    *(void *)(v36 + v35) = v50;
    uint64_t v37 = (void (**)(uint64_t (*)()))(v36 + ((v35 + 15) & 0xFFFFFFFFFFFFFFF8));
    *uint64_t v37 = v33;
    v37[1] = v32;
    swift_retain();
    swift_retain();
    Future.addSuccess(block:)();

    swift_release();
    swift_release();
    swift_release();
  }
}

uint64_t sub_101075E90(id *a1, uint64_t a2)
{
  uint64_t v3 = v2;
  uint64_t v121 = type metadata accessor for Date();
  uint64_t v124 = *(void *)(v121 - 8);
  __chkstk_darwin(v121);
  os_log_t v123 = &v115[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v7 = type metadata accessor for UUID();
  uint64_t v127 = *(void *)(v7 - 8);
  __chkstk_darwin(v7);
  uint64_t v118 = &v115[-((v8 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v9 = sub_10000588C((uint64_t *)&unk_10166EAF0);
  __chkstk_darwin(v9);
  uint64_t v11 = &v115[-((v10 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v12 = sub_10000588C(&qword_101638CF0);
  uint64_t v13 = __chkstk_darwin(v12 - 8);
  v120 = &v115[-((v14 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v15 = __chkstk_darwin(v13);
  unint64_t v119 = &v115[-v16];
  __chkstk_darwin(v15);
  unint64_t v18 = &v115[-v17];
  uint64_t v19 = type metadata accessor for StableIdentifier();
  __chkstk_darwin(v19 - 8);
  uint64_t v21 = &v115[-((v20 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v22 = (int *)type metadata accessor for OwnedBeaconRecord();
  __chkstk_darwin(v22);
  uint64_t v24 = &v115[-((v23 + 15) & 0xFFFFFFFFFFFFFFF0)];
  sub_10107E808(a2, (uint64_t)v24, (uint64_t (*)(void))type metadata accessor for OwnedBeaconRecord);
  unint64_t v126 = a1;
  id v125 = [*a1 encryptedValues];
  uint64_t ObjectType = swift_getObjectType();
  sub_10107E808(v3 + v22[6], (uint64_t)v21, (uint64_t (*)(void))type metadata accessor for StableIdentifier);
  LOBYTE(a1) = sub_101113BD4((uint64_t)v21, (uint64_t)&v24[v22[6]]);
  sub_10107ED9C((uint64_t)v21, (uint64_t (*)(void))type metadata accessor for StableIdentifier);
  if ((a1 & 1) == 0)
  {
    uint64_t v25 = sub_101110C7C();
    *((void *)&v131 + 1) = &type metadata for String;
    v132 = &protocol witness table for String;
    *(void *)&long long v130 = v25;
    *((void *)&v130 + 1) = v26;
    sub_10001D4B0(0, (unint64_t *)&qword_10163AE60);
    CKRecordKeyValueSetting.subscript.setter();
  }
  uint64_t v27 = v22[7];
  uint64_t v128 = v3;
  sub_10001D074(v3 + v27, (uint64_t)v18, &qword_101638CF0);
  uint64_t v28 = (uint64_t)&v24[v22[7]];
  uint64_t v29 = (uint64_t)&v11[*(int *)(v9 + 48)];
  sub_10001D074((uint64_t)v18, (uint64_t)v11, &qword_101638CF0);
  sub_10001D074(v28, v29, &qword_101638CF0);
  uint64_t v30 = v127;
  uint64_t v31 = *(uint64_t (**)(unsigned char *, uint64_t, uint64_t))(v127 + 48);
  int v32 = v31(v11, 1, v7);
  v122 = v24;
  if (v32 == 1)
  {
    sub_10001DAB4((uint64_t)v18, &qword_101638CF0);
    if (v31((unsigned char *)v29, 1, v7) == 1)
    {
      sub_10001DAB4((uint64_t)v11, &qword_101638CF0);
      uint64_t v33 = v128;
      uint64_t v34 = v121;
      goto LABEL_13;
    }
  }
  else
  {
    uint64_t v117 = v28;
    unint64_t v35 = v119;
    sub_10001D074((uint64_t)v11, (uint64_t)v119, &qword_101638CF0);
    if (v31((unsigned char *)v29, 1, v7) != 1)
    {
      unint64_t v100 = v118;
      (*(void (**)(unsigned char *, uint64_t, uint64_t))(v30 + 32))(v118, v29, v7);
      sub_10107EFA4((unint64_t *)&qword_10163B8F0, (void (*)(uint64_t))&type metadata accessor for UUID);
      int v116 = dispatch thunk of static Equatable.== infix(_:_:)();
      uint64_t v101 = *(void (**)(unsigned char *, uint64_t))(v30 + 8);
      v101(v100, v7);
      sub_10001DAB4((uint64_t)v18, &qword_101638CF0);
      v101(v35, v7);
      sub_10001DAB4((uint64_t)v11, &qword_101638CF0);
      uint64_t v33 = v128;
      uint64_t v34 = v121;
      uint64_t v28 = v117;
      if (v116) {
        goto LABEL_13;
      }
      goto LABEL_9;
    }
    sub_10001DAB4((uint64_t)v18, &qword_101638CF0);
    (*(void (**)(unsigned char *, uint64_t))(v30 + 8))(v35, v7);
    uint64_t v28 = v117;
  }
  sub_10001DAB4((uint64_t)v11, (uint64_t *)&unk_10166EAF0);
  uint64_t v33 = v128;
  uint64_t v34 = v121;
LABEL_9:
  uint64_t v36 = v120;
  sub_10001D074(v28, (uint64_t)v120, &qword_101638CF0);
  if (v31(v36, 1, v7) == 1)
  {
    sub_10001DAB4((uint64_t)v36, &qword_101638CF0);
    long long v130 = 0u;
    long long v131 = 0u;
    v132 = 0;
  }
  else
  {
    uint64_t v37 = UUID.uuidString.getter();
    *((void *)&v131 + 1) = &type metadata for String;
    v132 = &protocol witness table for String;
    *(void *)&long long v130 = v37;
    *((void *)&v130 + 1) = v38;
    (*(void (**)(unsigned char *, uint64_t))(v127 + 8))(v36, v7);
  }
  sub_10001D4B0(0, (unint64_t *)&qword_10163AE60);
  CKRecordKeyValueSetting.subscript.setter();
LABEL_13:
  long long v40 = v123;
  uint64_t v39 = v124;
  uint64_t v41 = *(void (**)(uint64_t *, uint64_t, uint64_t))(v124 + 16);
  v41((uint64_t *)v123, v33 + v22[8], v34);
  uint64_t v42 = (uint64_t)v122;
  uint64_t v43 = &v122[v22[8]];
  sub_10107EFA4(&qword_10163AFA0, (void (*)(uint64_t))&type metadata accessor for Date);
  char v44 = dispatch thunk of static Equatable.== infix(_:_:)();
  (*(void (**)(unsigned char *, uint64_t))(v39 + 8))(v40, v34);
  uint64_t v45 = v125;
  if ((v44 & 1) == 0)
  {
    *((void *)&v131 + 1) = v34;
    v132 = &protocol witness table for Date;
    unint64_t v46 = sub_10001D958((uint64_t *)&v130);
    v41(v46, (uint64_t)v43, v34);
    CKRecordKeyValueSetting.subscript.setter();
  }
  uint64_t v47 = v22[9];
  uint64_t v48 = v128;
  uint64_t v49 = *(void *)(v128 + v47);
  unint64_t v50 = *(void *)(v128 + v47 + 8);
  uint64_t v51 = (uint64_t *)(v42 + v47);
  uint64_t v53 = *v51;
  unint64_t v52 = v51[1];
  sub_1000361E0(v49, v50);
  sub_1000361E0(v53, v52);
  char v54 = _s12searchpartyd24KeyRepresentableInternalV23__derived_struct_equalsySbAC_ACtFZ_0(v49, v50, v53, v52);
  sub_10001CFB8(v53, v52);
  sub_10001CFB8(v49, v50);
  if ((v54 & 1) == 0)
  {
    *((void *)&v131 + 1) = &type metadata for Data;
    v132 = &protocol witness table for Data;
    *(void *)&long long v130 = v53;
    *((void *)&v130 + 1) = v52;
    sub_1000361E0(v53, v52);
    CKRecordKeyValueSetting.subscript.setter();
  }
  uint64_t v55 = v22[12];
  uint64_t v56 = *(void *)(v48 + v55);
  unint64_t v57 = *(void *)(v48 + v55 + 8);
  int v58 = (uint64_t *)(v42 + v55);
  uint64_t v60 = *v58;
  unint64_t v59 = v58[1];
  sub_1000361E0(v56, v57);
  sub_1000361E0(v60, v59);
  char v61 = _s12searchpartyd24KeyRepresentableInternalV23__derived_struct_equalsySbAC_ACtFZ_0(v56, v57, v60, v59);
  sub_10001CFB8(v60, v59);
  sub_10001CFB8(v56, v57);
  if ((v61 & 1) == 0)
  {
    *((void *)&v131 + 1) = &type metadata for Data;
    v132 = &protocol witness table for Data;
    *(void *)&long long v130 = v60;
    *((void *)&v130 + 1) = v59;
    sub_1000361E0(v60, v59);
    CKRecordKeyValueSetting.subscript.setter();
  }
  uint64_t v62 = v22[13];
  uint64_t v63 = *(void *)(v48 + v62);
  unint64_t v64 = *(void *)(v48 + v62 + 8);
  id v65 = (uint64_t *)(v42 + v62);
  uint64_t v67 = *v65;
  unint64_t v66 = v65[1];
  sub_1000361E0(v63, v64);
  sub_1000361E0(v67, v66);
  char v68 = _s12searchpartyd24KeyRepresentableInternalV23__derived_struct_equalsySbAC_ACtFZ_0(v63, v64, v67, v66);
  sub_10001CFB8(v67, v66);
  sub_10001CFB8(v63, v64);
  if ((v68 & 1) == 0)
  {
    *((void *)&v131 + 1) = &type metadata for Data;
    v132 = &protocol witness table for Data;
    *(void *)&long long v130 = v67;
    *((void *)&v130 + 1) = v66;
    sub_1000361E0(v67, v66);
    CKRecordKeyValueSetting.subscript.setter();
  }
  uint64_t v69 = v22[14];
  uint64_t v70 = *(void *)(v48 + v69);
  uint64_t v71 = *(void *)(v48 + v69 + 8);
  uint64_t v72 = (uint64_t *)(v42 + v69);
  uint64_t v74 = *v72;
  uint64_t v73 = v72[1];
  if ((v70 != *v72 || v71 != v73) && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
  {
    *((void *)&v131 + 1) = &type metadata for String;
    v132 = &protocol witness table for String;
    *(void *)&long long v130 = v74;
    *((void *)&v130 + 1) = v73;
    swift_bridgeObjectRetain();
    CKRecordKeyValueSetting.subscript.setter();
  }
  uint64_t v75 = v22[15];
  uint64_t v76 = *(void *)(v48 + v75);
  uint64_t v77 = *(void *)(v48 + v75 + 8);
  long long v78 = (uint64_t *)(v42 + v75);
  uint64_t v80 = *v78;
  uint64_t v79 = v78[1];
  if ((v76 != *v78 || v77 != v79) && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
  {
    *((void *)&v131 + 1) = &type metadata for String;
    v132 = &protocol witness table for String;
    *(void *)&long long v130 = v80;
    *((void *)&v130 + 1) = v79;
    swift_bridgeObjectRetain();
    CKRecordKeyValueSetting.subscript.setter();
  }
  uint64_t v81 = v22[16];
  uint64_t v82 = *(void *)(v48 + v81);
  uint64_t v83 = *(void *)(v42 + v81);
  if (v82 != v83)
  {
    *((void *)&v131 + 1) = &type metadata for Int;
    v132 = &protocol witness table for Int;
    *(void *)&long long v130 = v83;
    CKRecordKeyValueSetting.subscript.setter();
  }
  uint64_t v84 = v22[17];
  uint64_t v85 = *(void *)(v48 + v84);
  uint64_t v86 = *(void *)(v42 + v84);
  if (v85 != v86)
  {
    *((void *)&v131 + 1) = &type metadata for Int;
    v132 = &protocol witness table for Int;
    *(void *)&long long v130 = v86;
    CKRecordKeyValueSetting.subscript.setter();
  }
  uint64_t v87 = v22[18];
  int v88 = *(unsigned __int8 *)(v48 + v87);
  uint64_t v89 = *(unsigned __int8 *)(v42 + v87);
  if (v88 == 3)
  {
    if (v89 == 3) {
      goto LABEL_42;
    }
    goto LABEL_40;
  }
  if (v89 == 3 || v88 != v89)
  {
    if (v89 == 3)
    {
      v132 = 0;
      long long v130 = 0u;
      long long v131 = 0u;
LABEL_41:
      CKRecordKeyValueSetting.subscript.setter();
      goto LABEL_42;
    }
LABEL_40:
    *((void *)&v131 + 1) = &type metadata for Int;
    v132 = &protocol witness table for Int;
    *(void *)&long long v130 = v89;
    goto LABEL_41;
  }
LABEL_42:
  uint64_t v90 = v22[19];
  int v91 = *(unsigned __int8 *)(v48 + v90);
  uint64_t v92 = *(unsigned __int8 *)(v42 + v90);
  if (v91 != v92)
  {
    *((void *)&v131 + 1) = &type metadata for Int;
    v132 = &protocol witness table for Int;
    *(void *)&long long v130 = v92;
    CKRecordKeyValueSetting.subscript.setter();
  }
  uint64_t v93 = v22[10];
  uint64_t v94 = *(void *)(v48 + v93);
  unint64_t v95 = *(void *)(v48 + v93 + 8);
  uint64_t v96 = (uint64_t *)(v42 + v93);
  uint64_t v98 = *v96;
  unint64_t v97 = v96[1];
  if (v95 >> 60 == 15)
  {
    if (v97 >> 60 == 15) {
      goto LABEL_53;
    }
    sub_100037A38(v94, v95);
    sub_100037A38(v98, v97);
    sub_100037A24(v94, v95);
    sub_100037A24(v98, v97);
LABEL_52:
    *((void *)&v131 + 1) = &type metadata for Data;
    v132 = &protocol witness table for Data;
    *(void *)&long long v130 = v98;
    *((void *)&v130 + 1) = v97;
    sub_1000361E0(v98, v97);
    sub_1000361E0(v98, v97);
    CKRecordKeyValueSetting.subscript.setter();
    sub_100037A24(v98, v97);
    goto LABEL_53;
  }
  sub_100037A38(v94, v95);
  sub_100037A38(v98, v97);
  if (v97 >> 60 == 15)
  {
    sub_100037A24(v94, v95);
    sub_100037A24(v98, v97);
    NSString v99 = String._bridgeToObjectiveC()();
    [v45 setObject:0 forKeyedSubscript:v99];

    goto LABEL_53;
  }
  char v102 = _s12searchpartyd24KeyRepresentableInternalV23__derived_struct_equalsySbAC_ACtFZ_0(v94, v95, v98, v97);
  sub_100037A24(v98, v97);
  sub_100037A24(v94, v95);
  if ((v102 & 1) == 0) {
    goto LABEL_52;
  }
LABEL_53:
  uint64_t v103 = v22[11];
  uint64_t v104 = *(void *)(v48 + v103);
  unint64_t v105 = *(void *)(v48 + v103 + 8);
  Swift::Int v106 = (uint64_t *)(v42 + v103);
  uint64_t v108 = *v106;
  unint64_t v107 = v106[1];
  if (v105 >> 60 == 15)
  {
    if (v107 >> 60 == 15) {
      goto LABEL_60;
    }
    sub_100037A38(v104, v105);
    sub_100037A38(v108, v107);
    sub_100037A24(v104, v105);
    sub_100037A24(v108, v107);
LABEL_59:
    *((void *)&v131 + 1) = &type metadata for Data;
    v132 = &protocol witness table for Data;
    *(void *)&long long v130 = v108;
    *((void *)&v130 + 1) = v107;
    sub_1000361E0(v108, v107);
    sub_1000361E0(v108, v107);
    CKRecordKeyValueSetting.subscript.setter();
    sub_100037A24(v108, v107);
    goto LABEL_60;
  }
  sub_100037A38(v104, v105);
  sub_100037A38(v108, v107);
  if (v107 >> 60 == 15)
  {
    sub_100037A24(v104, v105);
    sub_100037A24(v108, v107);
    NSString v109 = String._bridgeToObjectiveC()();
    [v45 setObject:0 forKeyedSubscript:v109];

    goto LABEL_60;
  }
  char v110 = _s12searchpartyd24KeyRepresentableInternalV23__derived_struct_equalsySbAC_ACtFZ_0(v104, v105, v108, v107);
  sub_100037A24(v108, v107);
  sub_100037A24(v104, v105);
  if ((v110 & 1) == 0) {
    goto LABEL_59;
  }
LABEL_60:
  uint64_t v111 = v22[20];
  int v112 = *(unsigned __int8 *)(v48 + v111);
  int v113 = *(unsigned __int8 *)(v42 + v111);
  if (v112 == v113)
  {
    sub_10107ED9C(v42, (uint64_t (*)(void))type metadata accessor for OwnedBeaconRecord);
    return swift_unknownObjectRelease();
  }
  else
  {
    *((void *)&v131 + 1) = &type metadata for Bool;
    v132 = &protocol witness table for Bool;
    LOBYTE(v130) = v113;
    CKRecordKeyValueSetting.subscript.setter();
    swift_unknownObjectRelease();
    return sub_10107ED9C(v42, (uint64_t (*)(void))type metadata accessor for OwnedBeaconRecord);
  }
}

uint64_t sub_101076E58(id *a1, uint64_t a2)
{
  uint64_t v3 = v2;
  uint64_t v6 = type metadata accessor for UUID();
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  uint64_t v9 = (char *)&v34 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = (int *)type metadata accessor for BeaconNamingRecord();
  __chkstk_darwin(v10);
  uint64_t v12 = (char *)&v34 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10107E808(a2, (uint64_t)v12, (uint64_t (*)(void))type metadata accessor for BeaconNamingRecord);
  [*a1 encryptedValues];
  swift_getObjectType();
  (*(void (**)(char *, uint64_t, uint64_t))(v7 + 16))(v9, v3 + v10[6], v6);
  sub_10107EFA4((unint64_t *)&qword_10163B8F0, (void (*)(uint64_t))&type metadata accessor for UUID);
  char v13 = dispatch thunk of static Equatable.== infix(_:_:)();
  (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
  if ((v13 & 1) == 0)
  {
    uint64_t v14 = UUID.uuidString.getter();
    *((void *)&v35 + 1) = &type metadata for String;
    uint64_t v36 = &protocol witness table for String;
    *(void *)&long long v34 = v14;
    *((void *)&v34 + 1) = v15;
    CKRecordKeyValueSetting.subscript.setter();
  }
  uint64_t v16 = v10[7];
  uint64_t v17 = *(void *)(v3 + v16);
  uint64_t v18 = *(void *)&v12[v16];
  if (v17 != v18)
  {
    *((void *)&v35 + 1) = &type metadata for Int;
    uint64_t v36 = &protocol witness table for Int;
    *(void *)&long long v34 = v18;
    CKRecordKeyValueSetting.subscript.setter();
  }
  uint64_t v19 = v10[8];
  uint64_t v20 = *(void *)(v3 + v19);
  uint64_t v21 = *(void *)(v3 + v19 + 8);
  uint64_t v22 = &v12[v19];
  uint64_t v24 = *(void *)v22;
  uint64_t v23 = *((void *)v22 + 1);
  BOOL v25 = v20 == *(void *)v22 && v21 == v23;
  if (!v25 && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
  {
    *((void *)&v35 + 1) = &type metadata for String;
    uint64_t v36 = &protocol witness table for String;
    *(void *)&long long v34 = v24;
    *((void *)&v34 + 1) = v23;
    swift_bridgeObjectRetain();
    CKRecordKeyValueSetting.subscript.setter();
  }
  uint64_t v26 = v10[9];
  uint64_t v27 = (void *)(v3 + v26);
  uint64_t v28 = *(void *)(v3 + v26 + 8);
  uint64_t v29 = &v12[v26];
  uint64_t v31 = *(void *)v29;
  uint64_t v30 = *((void *)v29 + 1);
  if (v28)
  {
    if (!v30)
    {
      uint64_t v36 = 0;
      long long v34 = 0u;
      long long v35 = 0u;
      goto LABEL_22;
    }
    BOOL v32 = *v27 == v31 && v28 == v30;
    if (v32 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0) {
      goto LABEL_18;
    }
  }
  else if (!v30)
  {
LABEL_18:
    sub_10107ED9C((uint64_t)v12, (uint64_t (*)(void))type metadata accessor for BeaconNamingRecord);
    return swift_unknownObjectRelease();
  }
  *((void *)&v35 + 1) = &type metadata for String;
  uint64_t v36 = &protocol witness table for String;
  *(void *)&long long v34 = v31;
  *((void *)&v34 + 1) = v30;
LABEL_22:
  swift_bridgeObjectRetain();
  CKRecordKeyValueSetting.subscript.setter();
  swift_unknownObjectRelease();
  return sub_10107ED9C((uint64_t)v12, (uint64_t (*)(void))type metadata accessor for BeaconNamingRecord);
}

void *sub_101077228(uint64_t a1)
{
  uint64_t v3 = type metadata accessor for OS_dispatch_queue.Attributes();
  __chkstk_darwin(v3);
  uint64_t v4 = type metadata accessor for DispatchQoS();
  __chkstk_darwin(v4 - 8);
  uint64_t v5 = type metadata accessor for OS_dispatch_queue.AutoreleaseFrequency();
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v8 = (char *)v10 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v1[2] = 0;
  sub_10001D4B0(0, (unint64_t *)&qword_1016376E0);
  (*(void (**)(char *, void, uint64_t))(v6 + 104))(v8, enum case for OS_dispatch_queue.AutoreleaseFrequency.workItem(_:), v5);
  static DispatchQoS.unspecified.getter();
  v10[1] = _swiftEmptyArrayStorage;
  sub_10107EFA4((unint64_t *)&qword_101638CC0, (void (*)(uint64_t))&type metadata accessor for OS_dispatch_queue.Attributes);
  sub_10000588C((uint64_t *)&unk_1016376F0);
  sub_1001BF100((unint64_t *)&qword_101638CD0, (uint64_t *)&unk_1016376F0);
  dispatch thunk of SetAlgebra.init<A>(_:)();
  v1[3] = OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)();
  v1[4] = _swiftEmptyDictionarySingleton;
  v1[5] = _swiftEmptyDictionarySingleton;
  v1[6] = a1;
  return v1;
}

uint64_t sub_101077490(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v33 = a5;
  uint64_t v34 = a3;
  uint64_t v35 = a4;
  uint64_t v32 = a2;
  uint64_t v39 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v42 = *(void *)(v39 - 8);
  __chkstk_darwin(v39);
  uint64_t v38 = (char *)&v32 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = type metadata accessor for DispatchQoS();
  uint64_t v40 = *(void *)(v9 - 8);
  uint64_t v41 = v9;
  __chkstk_darwin(v9);
  uint64_t v36 = (char *)&v32 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = type metadata accessor for UUID();
  uint64_t v12 = *(void *)(v11 - 8);
  uint64_t v13 = *(void *)(v12 + 64);
  uint64_t v14 = __chkstk_darwin(v11);
  uint64_t v15 = (char *)&v32 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v14);
  uint64_t v17 = (char *)&v32 - v16;
  uint64_t v37 = *(void *)(a2 + 24);
  uint64_t v18 = *(void (**)(char *, uint64_t, uint64_t))(v12 + 16);
  v18((char *)&v32 - v16, v33, v11);
  v18(v15, a6, v11);
  uint64_t v19 = *(unsigned __int8 *)(v12 + 80);
  uint64_t v20 = (v19 + 32) & ~v19;
  unint64_t v21 = (v13 + v20 + 7) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v22 = (v19 + v21 + 8) & ~v19;
  uint64_t v23 = swift_allocObject();
  uint64_t v24 = v35;
  *(void *)(v23 + 16) = v34;
  *(void *)(v23 + 24) = v24;
  uint64_t v25 = v23 + v20;
  uint64_t v26 = *(void (**)(uint64_t, char *, uint64_t))(v12 + 32);
  v26(v25, v17, v11);
  *(void *)(v23 + v21) = v32;
  v26(v23 + v22, v15, v11);
  aBlock[4] = sub_10107EF04;
  aBlock[5] = v23;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_1004B5480;
  aBlock[3] = &unk_101604F58;
  uint64_t v27 = _Block_copy(aBlock);
  swift_retain();
  swift_retain();
  uint64_t v28 = v36;
  static DispatchQoS.unspecified.getter();
  uint64_t aBlock[7] = _swiftEmptyArrayStorage;
  sub_10107EFA4((unint64_t *)&qword_10163B7E0, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
  sub_10000588C((uint64_t *)&unk_10163F350);
  sub_1001BF100((unint64_t *)&qword_10163B7F0, (uint64_t *)&unk_10163F350);
  uint64_t v30 = v38;
  uint64_t v29 = v39;
  dispatch thunk of SetAlgebra.init<A>(_:)();
  OS_dispatch_queue.async(group:qos:flags:execute:)();
  _Block_release(v27);
  (*(void (**)(char *, uint64_t))(v42 + 8))(v30, v29);
  (*(void (**)(char *, uint64_t))(v40 + 8))(v28, v41);
  return swift_release();
}

uint64_t sub_1010778A4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v39 = a5;
  uint64_t v37 = a4;
  uint64_t v35 = a3;
  uint64_t v7 = sub_10000588C(&qword_101649E40);
  uint64_t v8 = __chkstk_darwin(v7 - 8);
  uint64_t v36 = (char *)&v35 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8);
  uint64_t v38 = (char *)&v35 - v10;
  uint64_t v11 = sub_10000588C(&qword_10163CBD0);
  __chkstk_darwin(v11 - 8);
  uint64_t v13 = (char *)&v35 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = type metadata accessor for UUID();
  uint64_t v15 = *(void *)(v14 - 8);
  __chkstk_darwin(v14);
  uint64_t v17 = (char *)&v35 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t updated = type metadata accessor for AccessoryFirmwareUpdateCommandInfo();
  uint64_t v19 = *(void *)(updated - 8);
  uint64_t v20 = __chkstk_darwin(updated);
  uint64_t v22 = (char *)&v35 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v23 = *(void (**)(char *, uint64_t, uint64_t))(v15 + 16);
  v23(&v22[*(int *)(v20 + 20)], v35, v14);
  *(void *)uint64_t v22 = a1;
  *((void *)v22 + 1) = a2;
  v23(v17, v39, v14);
  sub_10107E808((uint64_t)v22, (uint64_t)v13, (uint64_t (*)(void))type metadata accessor for AccessoryFirmwareUpdateCommandInfo);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v19 + 56))(v13, 0, 1, updated);
  swift_beginAccess();
  uint64_t v24 = (uint64_t)v36;
  swift_retain();
  sub_100160BF0((uint64_t)v13, (uint64_t)v17);
  swift_endAccess();
  uint64_t v25 = (uint64_t)v38;
  URL.init(string:)();
  uint64_t v26 = (void *)sub_101079460();
  uint64_t v27 = v25;
  v28.super.Class isa = UUID._bridgeToObjectiveC()().super.isa;
  sub_10001D074(v25, v24, &qword_101649E40);
  uint64_t v29 = type metadata accessor for URL();
  uint64_t v30 = *(void *)(v29 - 8);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v30 + 48))(v24, 1, v29);
  if (result == 1)
  {
    __break(1u);
  }
  else
  {
    URL._bridgeToObjectiveC()(v32);
    uint64_t v34 = v33;
    (*(void (**)(uint64_t, uint64_t))(v30 + 8))(v24, v29);
    [v26 updateFirmwareForDevice:v28.super.isa withAssetURL:v34];

    sub_101077CB0(v39, 2, 0, 0, 0);
    sub_10001DAB4(v27, &qword_101649E40);
    return sub_10107ED9C((uint64_t)v22, (uint64_t (*)(void))type metadata accessor for AccessoryFirmwareUpdateCommandInfo);
  }
  return result;
}

uint64_t sub_101077CB0(uint64_t a1, int a2, uint64_t a3, uint64_t a4, void (*a5)(char *, uint64_t, uint64_t))
{
  uint64_t v6 = v5;
  uint64_t v103 = a5;
  uint64_t v100 = a4;
  uint64_t v102 = a3;
  LODWORD(v101) = a2;
  uint64_t v110 = a1;
  uint64_t updated = (int *)type metadata accessor for AccessoryFirmwareUpdateStateInfo();
  uint64_t v104 = (int *)*((void *)updated - 1);
  __chkstk_darwin(updated);
  uint64_t v105 = (uint64_t)&v91 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v95 = type metadata accessor for DispatchTime();
  uint64_t v94 = *(void *)(v95 - 8);
  uint64_t v9 = __chkstk_darwin(v95);
  uint64_t v92 = (char *)&v91 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9);
  uint64_t v93 = (char *)&v91 - v11;
  uint64_t v12 = sub_10000588C(&qword_10163B9F0);
  __chkstk_darwin(v12 - 8);
  uint64_t v99 = (uint64_t)&v91 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  dispatch_group_t v98 = (dispatch_group_t)type metadata accessor for OwnedBeaconRecord();
  Class isa = v98[-1].isa;
  __chkstk_darwin(v98);
  uint64_t v96 = (uint64_t)&v91 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = sub_10000588C(&qword_10163CB70);
  __chkstk_darwin(v15 - 8);
  uint64_t v17 = (char *)&v91 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v18 = type metadata accessor for UUID();
  uint64_t v107 = *(void *)(v18 - 8);
  uint64_t v108 = v18;
  __chkstk_darwin(v18);
  uint64_t v91 = v19;
  Swift::Int v106 = (char *)&v91 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v20 = type metadata accessor for Date();
  uint64_t v21 = *(void *)(v20 - 8);
  __chkstk_darwin(v20);
  uint64_t v23 = (char *)&v91 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v24 = type metadata accessor for DispatchPredicate();
  uint64_t v25 = *(void *)(v24 - 8);
  __chkstk_darwin(v24);
  uint64_t v27 = (char *)&v91 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  NSUUID v28 = *(void **)(v6 + 24);
  *(void *)uint64_t v27 = v28;
  (*(void (**)(char *, void, uint64_t))(v25 + 104))(v27, enum case for DispatchPredicate.onQueue(_:), v24);
  id v29 = v28;
  LOBYTE(v28) = _dispatchPreconditionTest(_:)();
  (*(void (**)(char *, uint64_t))(v25 + 8))(v27, v24);
  if ((v28 & 1) == 0)
  {
    __break(1u);
    goto LABEL_21;
  }
  uint64_t v109 = swift_allocBox();
  uint64_t v27 = (char *)v30;
  sub_101078F74(v110, v30);
  static Date.trustedNow.getter((uint64_t)v23);
  (*(void (**)(char *, char *, uint64_t))(v21 + 40))(&v27[updated[6]], v23, v20);
  unsigned __int8 v31 = v101;
  v27[updated[5]] = v101;
  uint64_t v32 = v6;
  if (v102)
  {
    swift_getErrorValue();
    uint64_t v33 = v6;
    swift_errorRetain();
    uint64_t v34 = Error.domain.getter();
    uint64_t v36 = v35;
    swift_getErrorValue();
    uint64_t v37 = Error.code.getter();
    swift_errorRelease();
    uint64_t v38 = updated;
    uint64_t v39 = (uint64_t *)&v27[updated[8]];
    swift_bridgeObjectRelease();
    *uint64_t v39 = v34;
    v39[1] = v36;
    uint64_t v32 = v33;
    v39[2] = v37;
  }
  else
  {
    uint64_t v38 = updated;
    uint64_t v40 = &v27[updated[8]];
    swift_bridgeObjectRelease();
    *(void *)uint64_t v40 = 0;
    *((void *)v40 + 1) = 0;
    *((void *)v40 + 2) = 0;
  }
  uint64_t v41 = v38;
  uint64_t v42 = v110;
  uint64_t v43 = v103;
  if (v103)
  {
    char v44 = &v27[v38[7]];
    *(void *)char v44 = v100;
    *((void *)v44 + 1) = v43;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
  }
  uint64_t v45 = (uint64_t)v106;
  unint64_t v46 = *(void (**)(char *, uint64_t, uint64_t))(v107 + 16);
  v46(v106, v42, v108);
  sub_10107E808((uint64_t)v27, (uint64_t)v17, (uint64_t (*)(void))type metadata accessor for AccessoryFirmwareUpdateStateInfo);
  (*((void (**)(char *, void, uint64_t, int *))v104 + 7))(v17, 0, 1, v41);
  swift_beginAccess();
  sub_100160980((uint64_t)v17, v45);
  swift_endAccess();
  int v47 = v31;
  uint64_t v17 = (char *)&type metadata for String;
  uint64_t v48 = &qword_101637000;
  if (v47 != 3)
  {
    swift_retain();
    sub_100A9E7EC(18);
    swift_release();
    goto LABEL_17;
  }
  uint64_t v103 = v46;
  LODWORD(v104) = static os_log_type_t.default.getter();
  uint64_t v102 = sub_10000588C((uint64_t *)&unk_10163AD00);
  uint64_t v49 = swift_allocObject();
  *(_OWORD *)(v49 + 16) = xmmword_101347BA0;
  unint64_t v50 = &v27[v41[7]];
  uint64_t v51 = *((void *)v50 + 1);
  v111[0] = *(void *)v50;
  v111[1] = v51;
  swift_bridgeObjectRetain();
  sub_10000588C(&qword_101644320);
  uint64_t v52 = String.init<A>(describing:)();
  uint64_t v53 = v32;
  uint64_t v55 = v54;
  *(void *)(v49 + 56) = &type metadata for String;
  unint64_t v56 = sub_10000B4CC();
  *(void *)(v49 + 64) = v56;
  *(void *)(v49 + 32) = v52;
  *(void *)(v49 + 40) = v55;
  uint64_t v57 = v53;
  uint64_t v17 = (char *)&type metadata for String;
  uint64_t v58 = UUID.uuidString.getter();
  *(void *)(v49 + 96) = &type metadata for String;
  *(void *)(v49 + 104) = v56;
  unint64_t v101 = v56;
  *(void *)(v49 + 72) = v58;
  *(void *)(v49 + 80) = v59;
  sub_10001D4B0(0, (unint64_t *)&qword_10163AE70);
  uint64_t v60 = (void *)static OS_os_log.default.getter();
  os_log(_:dso:log:_:_:)();
  swift_bridgeObjectRelease();

  swift_retain();
  sub_100ACCD98(v42, (uint64_t)v111);
  swift_release();
  char v61 = (void (**)(uint64_t, uint64_t, uint64_t, dispatch_group_t))((char *)isa + 56);
  if (!v111[3])
  {
    sub_10001DAB4((uint64_t)v111, (uint64_t *)&unk_10163BBE0);
    uint64_t v63 = v99;
    (*v61)(v99, 1, 1, v98);
    goto LABEL_16;
  }
  Class v62 = isa;
  sub_10000588C((uint64_t *)&unk_10164DBF0);
  uint64_t v63 = v99;
  dispatch_group_t v64 = v98;
  int v65 = swift_dynamicCast();
  (*((void (**)(uint64_t, void, uint64_t, dispatch_group_t))v62 + 7))(v63, v65 ^ 1u, 1, v64);
  int v66 = (*((uint64_t (**)(uint64_t, uint64_t, dispatch_group_t))v62 + 6))(v63, 1, v64);
  uint64_t v48 = &qword_101637000;
  if (v66 == 1)
  {
LABEL_16:
    sub_10001DAB4(v63, &qword_10163B9F0);
    goto LABEL_17;
  }
  uint64_t v104 = v41;
  sub_10107E9C8(v63, v96, (uint64_t (*)(void))type metadata accessor for OwnedBeaconRecord);
  dispatch_group_t v98 = dispatch_group_create();
  dispatch_group_enter(v98);
  uint64_t v100 = *(void *)(v57 + 48);
  uint64_t v67 = v106;
  uint64_t v68 = v108;
  v103(v106, v42, v108);
  uint64_t v69 = v107;
  unint64_t v70 = (*(unsigned __int8 *)(v107 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v107 + 80);
  uint64_t v71 = swift_allocObject();
  uint64_t v99 = v71;
  *(void *)(v71 + 16) = v109;
  uint64_t v72 = *(void (**)(unint64_t, char *, uint64_t))(v69 + 32);
  v72(v71 + v70, v67, v68);
  uint64_t v73 = v42;
  uint64_t v74 = v96;
  v103(v67, v73, v68);
  uint64_t v75 = swift_allocObject();
  dispatch_group_t v76 = v98;
  *(void *)(v75 + 16) = v98;
  v72(v75 + v70, v67, v68);
  swift_retain();
  swift_retain();
  uint64_t v77 = v76;
  sub_101073560(v74, 0, (void (*)(uint64_t))sub_10107C724, v99, (void (*)(uint64_t (*)()))sub_10107C864, (void (*)(uint64_t (*)()))v75);
  swift_release();
  swift_release();
  swift_release();
  long long v78 = v92;
  static DispatchTime.now()();
  uint64_t v79 = v93;
  + infix(_:_:)();
  uint64_t v80 = *(void (**)(char *, uint64_t))(v94 + 8);
  uint64_t v81 = v95;
  v80(v78, v95);
  OS_dispatch_group.wait(timeout:)();
  v80(v79, v81);
  if (static DispatchTimeoutResult.== infix(_:_:)())
  {
    static os_log_type_t.error.getter();
    uint64_t v48 = &qword_101637000;
    uint64_t v17 = (char *)&type metadata for String;
    if (qword_1016372F8 != -1) {
      swift_once();
    }
    uint64_t v82 = swift_allocObject();
    *(_OWORD *)(v82 + 16) = xmmword_101342130;
    uint64_t v83 = UUID.uuidString.getter();
    unint64_t v84 = v101;
    *(void *)(v82 + 56) = &type metadata for String;
    *(void *)(v82 + 64) = v84;
    *(void *)(v82 + 32) = v83;
    *(void *)(v82 + 40) = v85;
    os_log(_:dso:log:_:_:)();

    swift_bridgeObjectRelease();
    sub_10107ED9C(v74, (uint64_t (*)(void))type metadata accessor for OwnedBeaconRecord);
  }
  else
  {
    sub_10107ED9C(v74, (uint64_t (*)(void))type metadata accessor for OwnedBeaconRecord);

    uint64_t v17 = (char *)&type metadata for String;
    uint64_t v48 = &qword_101637000;
  }
LABEL_17:
  static os_log_type_t.default.getter();
  if (v48[95] != -1) {
LABEL_21:
  }
    swift_once();
  sub_10000588C((uint64_t *)&unk_10163AD00);
  uint64_t v86 = swift_allocObject();
  *(_OWORD *)(v86 + 16) = xmmword_101342130;
  swift_beginAccess();
  sub_10107E808((uint64_t)v27, v105, (uint64_t (*)(void))type metadata accessor for AccessoryFirmwareUpdateStateInfo);
  uint64_t v87 = String.init<A>(describing:)();
  uint64_t v89 = v88;
  *(void *)(v86 + 56) = v17;
  *(void *)(v86 + 64) = sub_10000B4CC();
  *(void *)(v86 + 32) = v87;
  *(void *)(v86 + 40) = v89;
  os_log(_:dso:log:_:_:)();
  swift_release();
  return swift_bridgeObjectRelease();
}

uint64_t sub_101078988@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  uint64_t v6 = sub_10000588C(&qword_10163CBD0);
  __chkstk_darwin(v6 - 8);
  uint64_t v8 = (char *)&v48 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t updated = type metadata accessor for AccessoryFirmwareUpdateCommandInfo();
  uint64_t v54 = *(void *)(updated - 8);
  uint64_t v55 = updated;
  __chkstk_darwin(updated);
  uint64_t v49 = (uint64_t)&v48 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = (int *)type metadata accessor for AccessoryFirmwareUpdateStateInfo();
  __chkstk_darwin(v11);
  uint64_t v13 = (char *)&v48 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v57 = type metadata accessor for Date();
  uint64_t v14 = *(void *)(v57 - 8);
  __chkstk_darwin(v57);
  uint64_t v16 = (char *)&v48 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  static Date.trustedNow.getter((uint64_t)v16);
  uint64_t v17 = (void *)SPBeaconTaskNameAccessoryFirmwareUpdate;
  uint64_t v50 = a2;
  uint64_t v53 = a1;
  sub_101078F74(a2, (uint64_t)v13);
  uint64_t v18 = v11[5];
  uint64_t v58 = v13;
  int v19 = v13[v18];
  uint64_t v52 = a3;
  unint64_t v56 = v8;
  if (v19 == 1)
  {
    uint64_t v27 = &v58[v11[8]];
    if (*((void *)v27 + 1))
    {
      uint64_t v28 = *((void *)v27 + 2);
      id v29 = objc_allocWithZone((Class)NSError);
      swift_bridgeObjectRetain();
      NSString v30 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease();
      id v25 = [v29 initWithDomain:v30 code:v28 userInfo:0];
    }
    else
    {
      id v25 = 0;
    }
    uint64_t v26 = 3;
    goto LABEL_14;
  }
  if (v19 == 2)
  {
    id v25 = 0;
    uint64_t v26 = 0;
LABEL_14:
    uint64_t v21 = v17;
    goto LABEL_15;
  }
  if (v19 != 4)
  {
    id v25 = 0;
    uint64_t v26 = 2;
    goto LABEL_14;
  }
  uint64_t v20 = &v58[v11[8]];
  uint64_t v21 = v17;
  if (*((void *)v20 + 1))
  {
    uint64_t v22 = *((void *)v20 + 2);
    id v23 = objc_allocWithZone((Class)NSError);
    swift_bridgeObjectRetain();
    NSString v24 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    id v25 = [v23 initWithDomain:v24 code:v22 userInfo:0];
  }
  else
  {
    id v25 = 0;
  }
  uint64_t v26 = 1;
LABEL_15:
  uint64_t v31 = v57;
  uint64_t v51 = *(void (**)(char *, uint64_t))(v14 + 8);
  v51(v16, v57);
  (*(void (**)(char *, char *, uint64_t))(v14 + 16))(v16, &v58[v11[6]], v31);
  id v32 = v21;
  swift_errorRetain();
  v33.super.Class isa = Date._bridgeToObjectiveC()().super.isa;
  if (v25)
  {
    uint64_t v34 = (void *)_convertErrorToNSError(_:)();
    swift_errorRelease();
  }
  else
  {
    uint64_t v34 = 0;
  }
  uint64_t v35 = v54;
  id v36 = [objc_allocWithZone((Class)SPBeaconTaskInformation) initWithName:v32 lastUpdated:v33.super.isa error:v34 state:v26];

  uint64_t v37 = v53;
  swift_beginAccess();
  uint64_t v38 = *(void *)(v37 + 32);
  if (*(void *)(v38 + 16))
  {
    swift_bridgeObjectRetain();
    unint64_t v39 = sub_1007240CC(v50);
    uint64_t v41 = v55;
    uint64_t v40 = (uint64_t)v56;
    if (v42)
    {
      sub_10107E808(*(void *)(v38 + 56) + *(void *)(v35 + 72) * v39, (uint64_t)v56, (uint64_t (*)(void))type metadata accessor for AccessoryFirmwareUpdateCommandInfo);
      uint64_t v43 = 0;
    }
    else
    {
      uint64_t v43 = 1;
    }
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v35 + 56))(v40, v43, 1, v41);
    swift_bridgeObjectRelease();
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v35 + 48))(v40, 1, v41) != 1)
    {
      uint64_t v45 = v40;
      uint64_t v46 = v49;
      sub_10107E9C8(v45, v49, (uint64_t (*)(void))type metadata accessor for AccessoryFirmwareUpdateCommandInfo);
      Class isa = UUID._bridgeToObjectiveC()().super.isa;
      [v36 setCommandIdentifier:isa];

      swift_errorRelease();
      sub_10107ED9C(v46, (uint64_t (*)(void))type metadata accessor for AccessoryFirmwareUpdateCommandInfo);
      sub_10107ED9C((uint64_t)v58, (uint64_t (*)(void))type metadata accessor for AccessoryFirmwareUpdateStateInfo);
      uint64_t result = ((uint64_t (*)(char *, uint64_t))v51)(v16, v57);
      goto LABEL_26;
    }
  }
  else
  {
    uint64_t v40 = (uint64_t)v56;
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v35 + 56))(v56, 1, 1, v55);
  }
  swift_errorRelease();
  sub_10107ED9C((uint64_t)v58, (uint64_t (*)(void))type metadata accessor for AccessoryFirmwareUpdateStateInfo);
  v51(v16, v57);
  uint64_t result = sub_10001DAB4(v40, &qword_10163CBD0);
LABEL_26:
  *uint64_t v52 = v36;
  return result;
}

uint64_t sub_101078F74@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v5 = type metadata accessor for UUID();
  uint64_t v40 = *(void *)(v5 - 8);
  uint64_t v41 = v5;
  __chkstk_darwin(v5);
  uint64_t v7 = (char *)&v38 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = sub_10000588C(&qword_10163CB70);
  uint64_t v9 = __chkstk_darwin(v8 - 8);
  uint64_t v11 = (char *)&v38 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9);
  uint64_t v13 = (char *)&v38 - v12;
  uint64_t v14 = type metadata accessor for DispatchPredicate();
  uint64_t v15 = *(void *)(v14 - 8);
  __chkstk_darwin(v14);
  uint64_t v17 = (uint64_t *)((char *)&v38 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v18 = *(void **)(v2 + 24);
  *uint64_t v17 = v18;
  (*(void (**)(void *, void, uint64_t))(v15 + 104))(v17, enum case for DispatchPredicate.onQueue(_:), v14);
  id v19 = v18;
  LOBYTE(v18) = _dispatchPreconditionTest(_:)();
  uint64_t result = (*(uint64_t (**)(void *, uint64_t))(v15 + 8))(v17, v14);
  if (v18)
  {
    swift_beginAccess();
    uint64_t v21 = *(void *)(v2 + 40);
    uint64_t v22 = *(void *)(v21 + 16);
    unint64_t v39 = v11;
    if (!v22)
    {
      uint64_t updated = (int *)type metadata accessor for AccessoryFirmwareUpdateStateInfo();
      (*(void (**)(char *, uint64_t, uint64_t, int *))(*((void *)updated - 1) + 56))(v13, 1, 1, updated);
LABEL_8:
      sub_10001DAB4((uint64_t)v13, &qword_10163CB70);
      uint64_t v32 = v41;
      NSDate v33 = *(void (**)(uint64_t, uint64_t, uint64_t))(v40 + 16);
      v33(a2, a1, v41);
      type metadata accessor for AccessoryFirmwareUpdateStateInfo();
      static Date.trustedNow.getter(a2 + updated[6]);
      *(unsigned char *)(a2 + updated[5]) = 0;
      uint64_t v34 = (void *)(a2 + updated[7]);
      *uint64_t v34 = 0;
      v34[1] = 0;
      uint64_t v35 = (void *)(a2 + updated[8]);
      *uint64_t v35 = 0;
      v35[1] = 0;
      v35[2] = 0;
      v33((uint64_t)v7, a1, v32);
      uint64_t v36 = a2;
      uint64_t v37 = (uint64_t)v39;
      sub_10107E808(v36, (uint64_t)v39, (uint64_t (*)(void))type metadata accessor for AccessoryFirmwareUpdateStateInfo);
      (*(void (**)(uint64_t, void, uint64_t, int *))(*((void *)updated - 1) + 56))(v37, 0, 1, updated);
      swift_beginAccess();
      sub_100160980(v37, (uint64_t)v7);
      return swift_endAccess();
    }
    uint64_t v38 = v2 + 40;
    swift_bridgeObjectRetain();
    unint64_t v23 = sub_1007240CC(a1);
    if (v24)
    {
      unint64_t v25 = v23;
      uint64_t v26 = a1;
      uint64_t v27 = v7;
      uint64_t v28 = *(void *)(v21 + 56);
      uint64_t updated = (int *)type metadata accessor for AccessoryFirmwareUpdateStateInfo();
      uint64_t v30 = *((void *)updated - 1);
      uint64_t v31 = v28 + *(void *)(v30 + 72) * v25;
      uint64_t v7 = v27;
      a1 = v26;
      sub_10107E808(v31, (uint64_t)v13, (uint64_t (*)(void))type metadata accessor for AccessoryFirmwareUpdateStateInfo);
      (*(void (**)(char *, void, uint64_t, int *))(v30 + 56))(v13, 0, 1, updated);
    }
    else
    {
      uint64_t updated = (int *)type metadata accessor for AccessoryFirmwareUpdateStateInfo();
      (*(void (**)(char *, uint64_t, uint64_t, int *))(*((void *)updated - 1) + 56))(v13, 1, 1, updated);
    }
    swift_bridgeObjectRelease();
    type metadata accessor for AccessoryFirmwareUpdateStateInfo();
    if ((*(unsigned int (**)(char *, uint64_t, int *))(*((void *)updated - 1) + 48))(v13, 1, updated) == 1) {
      goto LABEL_8;
    }
    return sub_10107E9C8((uint64_t)v13, a2, (uint64_t (*)(void))type metadata accessor for AccessoryFirmwareUpdateStateInfo);
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_101079460()
{
  uint64_t v1 = type metadata accessor for DispatchPredicate();
  uint64_t v2 = *(void *)(v1 - 8);
  __chkstk_darwin(v1);
  uint64_t v4 = (uint64_t *)((char *)&v13 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v5 = *(void **)(v0 + 24);
  *uint64_t v4 = v5;
  (*(void (**)(void *, void, uint64_t))(v2 + 104))(v4, enum case for DispatchPredicate.onQueue(_:), v1);
  id v6 = v5;
  LOBYTE(v5) = _dispatchPreconditionTest(_:)();
  uint64_t result = (*(uint64_t (**)(void *, uint64_t))(v2 + 8))(v4, v1);
  if (v5)
  {
    uint64_t v8 = *(void **)(v0 + 16);
    if (v8)
    {
      id v9 = *(id *)(v0 + 16);
    }
    else
    {
      id v10 = [objc_allocWithZone((Class)CLFindMyAccessoryFirmwareUpdateManager) initWithDelegate:v0 delegateQueue:0];
      uint64_t v11 = *(void **)(v0 + 16);
      *(void *)(v0 + 16) = v10;
      id v9 = v10;

      uint64_t v8 = 0;
    }
    id v12 = v8;
    return (uint64_t)v9;
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_1010795B8()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();

  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for AccessoryFirmwareUpdateManager()
{
  return self;
}

uint64_t *sub_1010798A0(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v4 = a1;
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v8 = *a2;
    *uint64_t v4 = *a2;
    uint64_t v4 = (uint64_t *)(v8 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    if (*a2)
    {
      uint64_t v7 = a2[1];
      *uint64_t v4 = *a2;
      v4[1] = v7;
      swift_retain();
    }
    else
    {
      *(_OWORD *)a1 = *(_OWORD *)a2;
    }
    uint64_t v9 = *(int *)(a3 + 20);
    id v10 = (char *)v4 + v9;
    uint64_t v11 = (char *)a2 + v9;
    uint64_t v12 = type metadata accessor for UUID();
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v12 - 8) + 16))(v10, v11, v12);
  }
  return v4;
}

uint64_t sub_10107998C(void *a1, uint64_t a2)
{
  if (*a1) {
    swift_release();
  }
  uint64_t v4 = (char *)a1 + *(int *)(a2 + 20);
  uint64_t v5 = type metadata accessor for UUID();
  id v6 = *(uint64_t (**)(char *, uint64_t))(*(void *)(v5 - 8) + 8);

  return v6(v4, v5);
}

void *sub_101079A0C(void *a1, void *a2, uint64_t a3)
{
  if (*a2)
  {
    uint64_t v6 = a2[1];
    *a1 = *a2;
    a1[1] = v6;
    swift_retain();
  }
  else
  {
    *(_OWORD *)a1 = *(_OWORD *)a2;
  }
  uint64_t v7 = *(int *)(a3 + 20);
  uint64_t v8 = (char *)a1 + v7;
  uint64_t v9 = (char *)a2 + v7;
  uint64_t v10 = type metadata accessor for UUID();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v10 - 8) + 16))(v8, v9, v10);
  return a1;
}

void *sub_101079AA8(void *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6 = *a2;
  if (!*a1)
  {
    if (v6)
    {
      uint64_t v8 = a2[1];
      *a1 = v6;
      a1[1] = v8;
      swift_retain();
      goto LABEL_8;
    }
LABEL_7:
    *(_OWORD *)a1 = *(_OWORD *)a2;
    goto LABEL_8;
  }
  if (!v6)
  {
    swift_release();
    goto LABEL_7;
  }
  uint64_t v7 = a2[1];
  *a1 = v6;
  a1[1] = v7;
  swift_retain();
  swift_release();
LABEL_8:
  uint64_t v9 = *(int *)(a3 + 20);
  uint64_t v10 = (char *)a1 + v9;
  uint64_t v11 = (char *)a2 + v9;
  uint64_t v12 = type metadata accessor for UUID();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v12 - 8) + 24))(v10, v11, v12);
  return a1;
}

void *sub_101079B74(void *a1, void *a2, uint64_t a3)
{
  if (*a2)
  {
    uint64_t v4 = a2[1];
    *a1 = *a2;
    a1[1] = v4;
  }
  else
  {
    *(_OWORD *)a1 = *(_OWORD *)a2;
  }
  uint64_t v5 = *(int *)(a3 + 20);
  uint64_t v6 = (char *)a1 + v5;
  uint64_t v7 = (char *)a2 + v5;
  uint64_t v8 = type metadata accessor for UUID();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v8 - 8) + 32))(v6, v7, v8);
  return a1;
}

void *sub_101079C04(void *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6 = *a2;
  if (!*a1)
  {
    if (v6)
    {
      uint64_t v8 = a2[1];
      *a1 = v6;
      a1[1] = v8;
      goto LABEL_8;
    }
LABEL_7:
    *(_OWORD *)a1 = *(_OWORD *)a2;
    goto LABEL_8;
  }
  if (!v6)
  {
    swift_release();
    goto LABEL_7;
  }
  uint64_t v7 = a2[1];
  *a1 = v6;
  a1[1] = v7;
  swift_release();
LABEL_8:
  uint64_t v9 = *(int *)(a3 + 20);
  uint64_t v10 = (char *)a1 + v9;
  uint64_t v11 = (char *)a2 + v9;
  uint64_t v12 = type metadata accessor for UUID();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v12 - 8) + 40))(v10, v11, v12);
  return a1;
}

uint64_t sub_101079CC4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_101079CD8);
}

uint64_t sub_101079CD8(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  if (a2 == 2147483646)
  {
    uint64_t v4 = *a1;
    if ((unint64_t)*a1 >= 0xFFFFFFFF) {
      LODWORD(v4) = -1;
    }
    int v5 = v4 - 1;
    if (v5 < 0) {
      int v5 = -1;
    }
    return (v5 + 1);
  }
  else
  {
    uint64_t v9 = type metadata accessor for UUID();
    uint64_t v10 = *(uint64_t (**)(char *, uint64_t, uint64_t))(*(void *)(v9 - 8) + 48);
    uint64_t v11 = v9;
    uint64_t v12 = (char *)a1 + *(int *)(a3 + 20);
    return v10(v12, a2, v11);
  }
}

uint64_t sub_101079D94(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_101079DA8);
}

void *sub_101079DA8(void *result, uint64_t a2, int a3, uint64_t a4)
{
  int v5 = result;
  if (a3 == 2147483646)
  {
    *uint64_t result = a2;
  }
  else
  {
    uint64_t v7 = type metadata accessor for UUID();
    uint64_t v8 = *(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56);
    uint64_t v9 = v7;
    uint64_t v10 = (char *)v5 + *(int *)(a4 + 20);
    return (void *)v8(v10, a2, a2, v9);
  }
  return result;
}

uint64_t type metadata accessor for AccessoryFirmwareUpdateCommandInfo()
{
  uint64_t result = qword_101669060;
  if (!qword_101669060) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t sub_101079E9C()
{
  uint64_t result = type metadata accessor for UUID();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t sub_101079F34(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v25 = a4;
  uint64_t v26 = a5;
  uint64_t v24 = a1;
  uint64_t v29 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v32 = *(void *)(v29 - 8);
  __chkstk_darwin(v29);
  uint64_t v28 = (char *)&v24 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for DispatchQoS();
  uint64_t v30 = *(void *)(v8 - 8);
  uint64_t v31 = v8;
  __chkstk_darwin(v8);
  uint64_t v10 = (char *)&v24 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = type metadata accessor for UUID();
  uint64_t v12 = *(void *)(v11 - 8);
  uint64_t v13 = *(void *)(v12 + 64);
  __chkstk_darwin(v11);
  uint64_t v14 = (char *)&v24 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v27 = *(void *)(a2 + 24);
  (*(void (**)(char *, uint64_t, uint64_t))(v12 + 16))(v14, a3, v11);
  unint64_t v15 = (*(unsigned __int8 *)(v12 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v12 + 80);
  unint64_t v16 = (v13 + v15 + 7) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v17 = swift_allocObject();
  *(void *)(v17 + 16) = a2;
  (*(void (**)(unint64_t, char *, uint64_t))(v12 + 32))(v17 + v15, v14, v11);
  uint64_t v18 = (void *)(v17 + v16);
  uint64_t v19 = v26;
  *uint64_t v18 = v25;
  v18[1] = v19;
  *(void *)(v17 + ((v16 + 23) & 0xFFFFFFFFFFFFFFF8)) = v24;
  aBlock[4] = sub_10107F0E8;
  aBlock[5] = v17;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_1004B5480;
  aBlock[3] = &unk_101604FA8;
  uint64_t v20 = _Block_copy(aBlock);
  swift_bridgeObjectRetain();
  swift_retain();
  swift_retain();
  static DispatchQoS.unspecified.getter();
  uint64_t aBlock[7] = _swiftEmptyArrayStorage;
  sub_10107EFA4((unint64_t *)&qword_10163B7E0, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
  sub_10000588C((uint64_t *)&unk_10163F350);
  sub_1001BF100((unint64_t *)&qword_10163B7F0, (uint64_t *)&unk_10163F350);
  uint64_t v22 = v28;
  uint64_t v21 = v29;
  dispatch thunk of SetAlgebra.init<A>(_:)();
  OS_dispatch_queue.async(group:qos:flags:execute:)();
  _Block_release(v20);
  (*(void (**)(char *, uint64_t))(v32 + 8))(v22, v21);
  (*(void (**)(char *, uint64_t))(v30 + 8))(v10, v31);
  return swift_release();
}

uint64_t sub_10107A2F8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v21 = a1;
  uint64_t v23 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v26 = *(void *)(v23 - 8);
  __chkstk_darwin(v23);
  uint64_t v6 = (char *)&v20 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for DispatchQoS();
  uint64_t v24 = *(void *)(v7 - 8);
  uint64_t v25 = v7;
  __chkstk_darwin(v7);
  uint64_t v9 = (char *)&v20 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = type metadata accessor for UUID();
  uint64_t v11 = *(void *)(v10 - 8);
  uint64_t v12 = *(void *)(v11 + 64);
  __chkstk_darwin(v10);
  uint64_t v13 = (char *)&v20 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v22 = *(void *)(a2 + 24);
  (*(void (**)(char *, uint64_t, uint64_t))(v11 + 16))(v13, a3, v10);
  unint64_t v14 = (*(unsigned __int8 *)(v11 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v11 + 80);
  unint64_t v15 = (v12 + v14 + 7) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v16 = swift_allocObject();
  *(void *)(v16 + 16) = a2;
  (*(void (**)(unint64_t, char *, uint64_t))(v11 + 32))(v16 + v14, v13, v10);
  *(void *)(v16 + v15) = v21;
  aBlock[4] = sub_10107D168;
  aBlock[5] = v16;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_1004B5480;
  aBlock[3] = &unk_101604BE8;
  uint64_t v17 = _Block_copy(aBlock);
  swift_retain();
  swift_retain();
  static DispatchQoS.unspecified.getter();
  uint64_t aBlock[7] = _swiftEmptyArrayStorage;
  sub_10107EFA4((unint64_t *)&qword_10163B7E0, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
  sub_10000588C((uint64_t *)&unk_10163F350);
  sub_1001BF100((unint64_t *)&qword_10163B7F0, (uint64_t *)&unk_10163F350);
  uint64_t v18 = v23;
  dispatch thunk of SetAlgebra.init<A>(_:)();
  OS_dispatch_queue.async(group:qos:flags:execute:)();
  _Block_release(v17);
  (*(void (**)(char *, uint64_t))(v26 + 8))(v6, v18);
  (*(void (**)(char *, uint64_t))(v24 + 8))(v9, v25);
  return swift_release();
}

void sub_10107A698(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v60 = a3;
  uint64_t v5 = type metadata accessor for DispatchPredicate();
  uint64_t v57 = *(void *)(v5 - 8);
  uint64_t v58 = v5;
  __chkstk_darwin(v5);
  unint64_t v56 = (uint64_t *)((char *)&v46 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v7 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v53 = *(void *)(v7 - 8);
  uint64_t v54 = v7;
  __chkstk_darwin(v7);
  uint64_t v51 = (char *)&v46 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v52 = type metadata accessor for DispatchQoS();
  uint64_t v50 = *(void *)(v52 - 8);
  __chkstk_darwin(v52);
  uint64_t v49 = (char *)&v46 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = type metadata accessor for DispatchQoS.QoSClass();
  uint64_t v11 = *(void *)(v10 - 8);
  __chkstk_darwin(v10);
  uint64_t v13 = (char *)&v46 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = sub_10000588C(&qword_10163CBD0);
  uint64_t v15 = __chkstk_darwin(v14 - 8);
  uint64_t v48 = (uint64_t)&v46 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v15);
  uint64_t v18 = (char *)&v46 - v17;
  uint64_t updated = type metadata accessor for AccessoryFirmwareUpdateCommandInfo();
  uint64_t v20 = *(void *)(updated - 8);
  uint64_t v21 = *(void *)(v20 + 64);
  uint64_t v22 = __chkstk_darwin(updated);
  uint64_t v23 = (char *)&v46 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v22);
  uint64_t v59 = (uint64_t)&v46 - v24;
  sub_101077CB0(a2, 3, 0, 0, 0);
  uint64_t v47 = a1 + 32;
  swift_beginAccess();
  uint64_t v55 = a1;
  uint64_t v25 = *(void *)(a1 + 32);
  if (!*(void *)(v25 + 16))
  {
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v20 + 56))(v18, 1, 1, updated);
LABEL_7:
    sub_10001DAB4((uint64_t)v18, &qword_10163CBD0);
LABEL_12:
    Transaction.capture()();
    return;
  }
  swift_bridgeObjectRetain();
  uint64_t v46 = a2;
  unint64_t v26 = sub_1007240CC(a2);
  if (v27)
  {
    sub_10107E808(*(void *)(v25 + 56) + *(void *)(v20 + 72) * v26, (uint64_t)v18, (uint64_t (*)(void))type metadata accessor for AccessoryFirmwareUpdateCommandInfo);
    uint64_t v28 = 0;
  }
  else
  {
    uint64_t v28 = 1;
  }
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v20 + 56))(v18, v28, 1, updated);
  swift_bridgeObjectRelease();
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v20 + 48))(v18, 1, updated) == 1) {
    goto LABEL_7;
  }
  uint64_t v29 = v59;
  sub_10107E9C8((uint64_t)v18, v59, (uint64_t (*)(void))type metadata accessor for AccessoryFirmwareUpdateCommandInfo);
  sub_10001D4B0(0, (unint64_t *)&qword_1016376E0);
  (*(void (**)(char *, void, uint64_t))(v11 + 104))(v13, enum case for DispatchQoS.QoSClass.default(_:), v10);
  uint64_t v30 = (void *)static OS_dispatch_queue.global(qos:)();
  (*(void (**)(char *, uint64_t))(v11 + 8))(v13, v10);
  sub_10107E808(v29, (uint64_t)v23, (uint64_t (*)(void))type metadata accessor for AccessoryFirmwareUpdateCommandInfo);
  unint64_t v31 = (*(unsigned __int8 *)(v20 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v20 + 80);
  uint64_t v32 = swift_allocObject();
  sub_10107E9C8((uint64_t)v23, v32 + v31, (uint64_t (*)(void))type metadata accessor for AccessoryFirmwareUpdateCommandInfo);
  aBlock[4] = sub_10107D2F8;
  aBlock[5] = v32;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_1004B5480;
  aBlock[3] = &unk_101604C38;
  NSDate v33 = _Block_copy(aBlock);
  uint64_t v34 = v49;
  static DispatchQoS.unspecified.getter();
  char v61 = _swiftEmptyArrayStorage;
  sub_10107EFA4((unint64_t *)&qword_10163B7E0, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
  sub_10000588C((uint64_t *)&unk_10163F350);
  sub_1001BF100((unint64_t *)&qword_10163B7F0, (uint64_t *)&unk_10163F350);
  uint64_t v35 = v51;
  uint64_t v36 = v54;
  dispatch thunk of SetAlgebra.init<A>(_:)();
  OS_dispatch_queue.async(group:qos:flags:execute:)();
  _Block_release(v33);

  (*(void (**)(char *, uint64_t))(v53 + 8))(v35, v36);
  (*(void (**)(char *, uint64_t))(v50 + 8))(v34, v52);
  swift_release();
  uint64_t v37 = v47;
  swift_beginAccess();
  uint64_t v38 = v48;
  sub_100165A94(v46, v48);
  sub_10001DAB4(v38, &qword_10163CBD0);
  swift_endAccess();
  uint64_t v39 = v55;
  uint64_t v40 = v56;
  uint64_t v41 = *(void **)(v55 + 24);
  *unint64_t v56 = v41;
  uint64_t v43 = v57;
  uint64_t v42 = v58;
  (*(void (**)(void *, void, uint64_t))(v57 + 104))(v40, enum case for DispatchPredicate.onQueue(_:), v58);
  id v44 = v41;
  LOBYTE(v41) = _dispatchPreconditionTest(_:)();
  (*(void (**)(void *, uint64_t))(v43 + 8))(v40, v42);
  if (v41)
  {
    if (!*(void *)(*(void *)v37 + 16))
    {
      uint64_t v45 = *(void **)(v39 + 16);
      *(void *)(v39 + 16) = 0;
    }
    sub_10107ED9C(v59, (uint64_t (*)(void))type metadata accessor for AccessoryFirmwareUpdateCommandInfo);
    goto LABEL_12;
  }
  __break(1u);
}

uint64_t sub_10107AE38(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v23 = a1;
  uint64_t v24 = a4;
  uint64_t v27 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v30 = *(void *)(v27 - 8);
  __chkstk_darwin(v27);
  unint64_t v26 = (char *)&v22 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for DispatchQoS();
  uint64_t v28 = *(void *)(v7 - 8);
  uint64_t v29 = v7;
  __chkstk_darwin(v7);
  uint64_t v9 = (char *)&v22 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = type metadata accessor for UUID();
  uint64_t v11 = *(void *)(v10 - 8);
  uint64_t v12 = *(void *)(v11 + 64);
  __chkstk_darwin(v10);
  uint64_t v13 = (char *)&v22 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v25 = *(void *)(a2 + 24);
  (*(void (**)(char *, uint64_t, uint64_t))(v11 + 16))(v13, a3, v10);
  unint64_t v14 = (*(unsigned __int8 *)(v11 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v11 + 80);
  unint64_t v15 = (v12 + v14 + 7) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v16 = swift_allocObject();
  *(void *)(v16 + 16) = a2;
  (*(void (**)(unint64_t, char *, uint64_t))(v11 + 32))(v16 + v14, v13, v10);
  uint64_t v17 = v23;
  *(void *)(v16 + v15) = v24;
  *(void *)(v16 + ((v15 + 15) & 0xFFFFFFFFFFFFFFF8)) = v17;
  aBlock[4] = sub_10107C404;
  aBlock[5] = v16;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_1004B5480;
  aBlock[3] = &unk_101604A80;
  uint64_t v18 = _Block_copy(aBlock);
  swift_retain();
  swift_errorRetain();
  swift_retain();
  static DispatchQoS.unspecified.getter();
  uint64_t aBlock[7] = _swiftEmptyArrayStorage;
  sub_10107EFA4((unint64_t *)&qword_10163B7E0, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
  sub_10000588C((uint64_t *)&unk_10163F350);
  sub_1001BF100((unint64_t *)&qword_10163B7F0, (uint64_t *)&unk_10163F350);
  uint64_t v20 = v26;
  uint64_t v19 = v27;
  dispatch thunk of SetAlgebra.init<A>(_:)();
  OS_dispatch_queue.async(group:qos:flags:execute:)();
  _Block_release(v18);
  (*(void (**)(char *, uint64_t))(v30 + 8))(v20, v19);
  (*(void (**)(char *, uint64_t))(v28 + 8))(v9, v29);
  return swift_release();
}

void sub_10107B1F0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v46 = a4;
  uint64_t v7 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v44 = *(void *)(v7 - 8);
  uint64_t v45 = v7;
  __chkstk_darwin(v7);
  uint64_t v42 = (char *)&v36 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v43 = type metadata accessor for DispatchQoS();
  uint64_t v41 = *(void *)(v43 - 8);
  __chkstk_darwin(v43);
  uint64_t v40 = (char *)&v36 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = type metadata accessor for DispatchQoS.QoSClass();
  uint64_t v37 = *(void *)(v10 - 8);
  __chkstk_darwin(v10);
  uint64_t v12 = (char *)&v36 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = sub_10000588C(&qword_10163CBD0);
  __chkstk_darwin(v13 - 8);
  unint64_t v15 = (char *)&v36 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t updated = type metadata accessor for AccessoryFirmwareUpdateCommandInfo();
  uint64_t v17 = *(void *)(updated - 8);
  uint64_t v18 = *(void *)(v17 + 64);
  uint64_t v19 = __chkstk_darwin(updated);
  uint64_t v20 = (char *)&v36 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v19);
  uint64_t v38 = (uint64_t)&v36 - v21;
  uint64_t v39 = a3;
  sub_101077CB0(a2, 4, a3, 0, 0);
  swift_beginAccess();
  uint64_t v22 = *(void *)(a1 + 32);
  if (*(void *)(v22 + 16))
  {
    swift_bridgeObjectRetain();
    unint64_t v23 = sub_1007240CC(a2);
    if (v24)
    {
      sub_10107E808(*(void *)(v22 + 56) + *(void *)(v17 + 72) * v23, (uint64_t)v15, (uint64_t (*)(void))type metadata accessor for AccessoryFirmwareUpdateCommandInfo);
      uint64_t v25 = 0;
    }
    else
    {
      uint64_t v25 = 1;
    }
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v17 + 56))(v15, v25, 1, updated);
    swift_bridgeObjectRelease();
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v17 + 48))(v15, 1, updated) != 1)
    {
      uint64_t v26 = (uint64_t)v15;
      uint64_t v27 = v38;
      sub_10107E9C8(v26, v38, (uint64_t (*)(void))type metadata accessor for AccessoryFirmwareUpdateCommandInfo);
      sub_10001D4B0(0, (unint64_t *)&qword_1016376E0);
      uint64_t v28 = v37;
      (*(void (**)(char *, void, uint64_t))(v37 + 104))(v12, enum case for DispatchQoS.QoSClass.default(_:), v10);
      uint64_t v36 = static OS_dispatch_queue.global(qos:)();
      (*(void (**)(char *, uint64_t))(v28 + 8))(v12, v10);
      sub_10107E808(v27, (uint64_t)v20, (uint64_t (*)(void))type metadata accessor for AccessoryFirmwareUpdateCommandInfo);
      unint64_t v29 = (*(unsigned __int8 *)(v17 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v17 + 80);
      uint64_t v30 = swift_allocObject();
      sub_10107E9C8((uint64_t)v20, v30 + v29, (uint64_t (*)(void))type metadata accessor for AccessoryFirmwareUpdateCommandInfo);
      *(void *)(v30 + ((v18 + v29 + 7) & 0xFFFFFFFFFFFFFFF8)) = v39;
      aBlock[4] = sub_10107C5CC;
      aBlock[5] = v30;
      aBlock[0] = _NSConcreteStackBlock;
      aBlock[1] = 1107296256;
      aBlock[2] = sub_1004B5480;
      aBlock[3] = &unk_101604AD0;
      unint64_t v31 = _Block_copy(aBlock);
      swift_errorRetain();
      uint64_t v32 = v40;
      static DispatchQoS.unspecified.getter();
      uint64_t v47 = _swiftEmptyArrayStorage;
      sub_10107EFA4((unint64_t *)&qword_10163B7E0, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
      sub_10000588C((uint64_t *)&unk_10163F350);
      sub_1001BF100((unint64_t *)&qword_10163B7F0, (uint64_t *)&unk_10163F350);
      NSDate v33 = v42;
      uint64_t v34 = v45;
      dispatch thunk of SetAlgebra.init<A>(_:)();
      uint64_t v35 = (void *)v36;
      OS_dispatch_queue.async(group:qos:flags:execute:)();
      _Block_release(v31);

      (*(void (**)(char *, uint64_t))(v44 + 8))(v33, v34);
      (*(void (**)(char *, uint64_t))(v41 + 8))(v32, v43);
      sub_10107ED9C(v27, (uint64_t (*)(void))type metadata accessor for AccessoryFirmwareUpdateCommandInfo);
      swift_release();
      goto LABEL_9;
    }
  }
  else
  {
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v17 + 56))(v15, 1, 1, updated);
  }
  sub_10001DAB4((uint64_t)v15, &qword_10163CBD0);
LABEL_9:
  Transaction.capture()();
}

uint64_t sub_10107B828(void (**a1)(uint64_t), uint64_t a2)
{
  if (*a1) {
    (*a1)(a2);
  }
  static os_log_type_t.default.getter();
  if (qword_1016372F8 != -1) {
    swift_once();
  }

  return os_log(_:dso:log:_:_:)();
}

uint64_t sub_10107B8D0(uint64_t a1)
{
  uint64_t updated = type metadata accessor for AccessoryFirmwareUpdateStateInfo();
  uint64_t v3 = swift_projectBox();
  swift_beginAccess();
  uint64_t v4 = (uint64_t *)(v3 + *(int *)(updated + 28));
  uint64_t v5 = v4[1];
  if (v5)
  {
    uint64_t v6 = *v4;
    uint64_t v7 = (void *)(a1 + *(int *)(type metadata accessor for OwnedBeaconRecord() + 60));
    swift_bridgeObjectRetain();
    uint64_t result = swift_bridgeObjectRelease();
    *uint64_t v7 = v6;
    v7[1] = v5;
  }
  else
  {
    static os_log_type_t.error.getter();
    if (qword_1016372F8 != -1) {
      swift_once();
    }
    sub_10000588C((uint64_t *)&unk_10163AD00);
    uint64_t v9 = swift_allocObject();
    *(_OWORD *)(v9 + 16) = xmmword_101342130;
    uint64_t v10 = UUID.uuidString.getter();
    uint64_t v12 = v11;
    *(void *)(v9 + 56) = &type metadata for String;
    *(void *)(v9 + 64) = sub_10000B4CC();
    *(void *)(v9 + 32) = v10;
    *(void *)(v9 + 40) = v12;
    os_log(_:dso:log:_:_:)();
    return swift_bridgeObjectRelease();
  }
  return result;
}

void sub_10107BA34(uint64_t a1, NSObject *a2)
{
  uint64_t v4 = sub_10000588C((uint64_t *)&unk_101656900);
  __chkstk_darwin(v4);
  uint64_t v6 = (void *)((char *)v19 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0));
  sub_10001D074(a1, (uint64_t)v6, (uint64_t *)&unk_101656900);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v7 = *v6;
    static os_log_type_t.error.getter();
    if (qword_1016372F8 != -1) {
      swift_once();
    }
    sub_10000588C((uint64_t *)&unk_10163AD00);
    uint64_t v8 = swift_allocObject();
    *(_OWORD *)(v8 + 16) = xmmword_101347BA0;
    uint64_t v9 = UUID.uuidString.getter();
    uint64_t v11 = v10;
    *(void *)(v8 + 56) = &type metadata for String;
    unint64_t v12 = sub_10000B4CC();
    *(void *)(v8 + 64) = v12;
    *(void *)(v8 + 32) = v9;
    *(void *)(v8 + 40) = v11;
    v19[1] = v7;
    swift_errorRetain();
    sub_10000588C(&qword_101638D40);
    uint64_t v13 = String.init<A>(describing:)();
    *(void *)(v8 + 96) = &type metadata for String;
    *(void *)(v8 + 104) = v12;
    *(void *)(v8 + 72) = v13;
    *(void *)(v8 + 80) = v14;
    os_log(_:dso:log:_:_:)();
    swift_bridgeObjectRelease();
    swift_errorRelease();
  }
  else
  {
    static os_log_type_t.default.getter();
    if (qword_1016372F8 != -1) {
      swift_once();
    }
    sub_10000588C((uint64_t *)&unk_10163AD00);
    uint64_t v15 = swift_allocObject();
    *(_OWORD *)(v15 + 16) = xmmword_101342130;
    uint64_t v16 = UUID.uuidString.getter();
    uint64_t v18 = v17;
    *(void *)(v15 + 56) = &type metadata for String;
    *(void *)(v15 + 64) = sub_10000B4CC();
    *(void *)(v15 + 32) = v16;
    *(void *)(v15 + 40) = v18;
    os_log(_:dso:log:_:_:)();
    swift_bridgeObjectRelease();
    sub_10001DAB4((uint64_t)v6, (uint64_t *)&unk_101656900);
  }
  dispatch_group_leave(a2);
}

uint64_t sub_10107BCCC(void **a1, uint64_t a2, uint64_t a3, void (*a4)(char *))
{
  return sub_100ACAF60(*a1, a2, a3, a4);
}

uint64_t sub_10107BCD4(void **a1, uint64_t a2, uint64_t a3, void (*a4)(char *))
{
  return sub_100ACB278(*a1, a2, a3, a4);
}

uint64_t sub_10107BCDC(void **a1, uint64_t a2, uint64_t a3, void (*a4)(char *))
{
  return sub_100ACBC20(*a1, a2, a3, a4);
}

uint64_t sub_10107BCE4(uint64_t a1, uint64_t a2)
{
  uint64_t v32 = a1;
  uint64_t v3 = type metadata accessor for UUID();
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  uint64_t v28 = (char *)v27 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = sub_10000588C(&qword_101638CF0);
  uint64_t v7 = __chkstk_darwin(v6 - 8);
  uint64_t v9 = (char *)v27 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v7);
  uint64_t v11 = (char *)v27 - v10;
  int v30 = static os_log_type_t.default.getter();
  if (qword_1016372F8 != -1) {
    swift_once();
  }
  uint64_t v29 = qword_10170F050;
  sub_10000588C((uint64_t *)&unk_10163AD00);
  uint64_t v12 = swift_allocObject();
  *(_OWORD *)(v12 + 16) = xmmword_101347BA0;
  uint64_t v31 = a2;
  sub_10001D074(a2, (uint64_t)v11, &qword_101638CF0);
  uint64_t v13 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v4 + 48);
  if (v13(v11, 1, v3) == 1)
  {
    sub_10001DAB4((uint64_t)v11, &qword_101638CF0);
    uint64_t v14 = 0;
    uint64_t v15 = 0;
  }
  else
  {
    uint64_t v14 = UUID.uuidString.getter();
    uint64_t v15 = v16;
    (*(void (**)(char *, uint64_t))(v4 + 8))(v11, v3);
  }
  uint64_t v33 = v14;
  uint64_t v34 = v15;
  sub_10000588C(&qword_101644320);
  uint64_t v17 = String.init<A>(describing:)();
  uint64_t v19 = v18;
  *(void *)(v12 + 56) = &type metadata for String;
  unint64_t v20 = sub_10000B4CC();
  *(void *)(v12 + 64) = v20;
  *(void *)(v12 + 32) = v17;
  *(void *)(v12 + 40) = v19;
  uint64_t v33 = v32;
  swift_errorRetain();
  sub_10000588C(&qword_101638D40);
  uint64_t v21 = String.init<A>(describing:)();
  *(void *)(v12 + 96) = &type metadata for String;
  *(void *)(v12 + 104) = v20;
  *(void *)(v12 + 72) = v21;
  *(void *)(v12 + 80) = v22;
  os_log(_:dso:log:_:_:)();
  swift_bridgeObjectRelease();
  sub_10001D074(v31, (uint64_t)v9, &qword_101638CF0);
  if (v13(v9, 1, v3) == 1) {
    return sub_10001DAB4((uint64_t)v9, &qword_101638CF0);
  }
  char v24 = v28;
  (*(void (**)(char *, char *, uint64_t))(v4 + 32))(v28, v9, v3);
  uint64_t v25 = type metadata accessor for Transaction();
  __chkstk_darwin(v25);
  v27[-4] = v27[1];
  v27[-3] = v24;
  v27[-2] = v26;
  static Transaction.named<A>(_:with:)();
  return (*(uint64_t (**)(char *, uint64_t))(v4 + 8))(v24, v3);
}

uint64_t sub_10107C0A8(uint64_t a1, uint64_t a2)
{
  static os_log_type_t.default.getter();
  if (qword_1016372F8 != -1) {
    swift_once();
  }
  sub_10000588C((uint64_t *)&unk_10163AD00);
  uint64_t v3 = swift_allocObject();
  *(_OWORD *)(v3 + 16) = xmmword_101347BA0;
  uint64_t v4 = UUID.uuidString.getter();
  uint64_t v6 = v5;
  *(void *)(v3 + 56) = &type metadata for String;
  unint64_t v7 = sub_10000B4CC();
  *(void *)(v3 + 64) = v7;
  *(void *)(v3 + 32) = v4;
  *(void *)(v3 + 40) = v6;
  swift_errorRetain();
  sub_10000588C((uint64_t *)&unk_101638EB0);
  uint64_t v8 = String.init<A>(describing:)();
  *(void *)(v3 + 96) = &type metadata for String;
  *(void *)(v3 + 104) = v7;
  *(void *)(v3 + 72) = v8;
  *(void *)(v3 + 80) = v9;
  os_log(_:dso:log:_:_:)();
  swift_bridgeObjectRelease();
  uint64_t v10 = type metadata accessor for Transaction();
  __chkstk_darwin(v10);
  if (!a2) {
    return static Transaction.named<A>(_:with:)();
  }
  swift_errorRetain();
  static Transaction.named<A>(_:with:)();
  return swift_errorRelease();
}

uint64_t sub_10107C2D0(uint64_t a1)
{
  return sub_10107A2F8(a1, *(void *)(v1 + 16), *(void *)(v1 + 24));
}

uint64_t sub_10107C2EC(uint64_t a1)
{
  return sub_10107AE38(a1, v1[2], v1[3], v1[4]);
}

uint64_t sub_10107C30C()
{
  uint64_t v1 = type metadata accessor for UUID();
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 24) & ~v3;
  uint64_t v5 = v3 | 7;
  unint64_t v6 = (((*(void *)(v2 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8;
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  swift_errorRelease();
  swift_release();

  return _swift_deallocObject(v0, v6 + 8, v5);
}

void sub_10107C404()
{
  uint64_t v1 = *(void *)(type metadata accessor for UUID() - 8);
  unint64_t v2 = (*(unsigned __int8 *)(v1 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80);
  unint64_t v3 = (*(void *)(v1 + 64) + v2 + 7) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v4 = *(void *)(v0 + 16);
  uint64_t v5 = *(void *)(v0 + v3);
  uint64_t v6 = *(void *)(v0 + ((v3 + 15) & 0xFFFFFFFFFFFFFFF8));

  sub_10107B1F0(v4, v0 + v2, v5, v6);
}

uint64_t sub_10107C4A0(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_10107C4B0()
{
  return swift_release();
}

uint64_t sub_10107C4B8()
{
  uint64_t updated = type metadata accessor for AccessoryFirmwareUpdateCommandInfo();
  uint64_t v2 = *(unsigned __int8 *)(*(void *)(updated - 8) + 80);
  uint64_t v3 = (v2 + 16) & ~v2;
  uint64_t v4 = *(void *)(*(void *)(updated - 8) + 64);
  if (*(void *)(v0 + v3)) {
    swift_release();
  }
  uint64_t v5 = v0 + v3 + *(int *)(updated + 20);
  uint64_t v6 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v6 - 8) + 8))(v5, v6);
  swift_errorRelease();

  return _swift_deallocObject(v0, ((v4 + v3 + 7) & 0xFFFFFFFFFFFFFFF8) + 8, v2 | 7);
}

uint64_t sub_10107C5CC()
{
  uint64_t v1 = *(void *)(type metadata accessor for AccessoryFirmwareUpdateCommandInfo() - 8);
  unint64_t v2 = (*(unsigned __int8 *)(v1 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80);
  uint64_t v3 = *(void *)(v0 + ((*(void *)(v1 + 64) + v2 + 7) & 0xFFFFFFFFFFFFFFF8));

  return sub_10107B828((void (**)(uint64_t))(v0 + v2), v3);
}

uint64_t sub_10107C658()
{
  uint64_t v1 = type metadata accessor for UUID();
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 24) & ~v3;
  uint64_t v5 = v4 + *(void *)(v2 + 64);
  uint64_t v6 = v3 | 7;
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);

  return _swift_deallocObject(v0, v5, v6);
}

uint64_t sub_10107C724(uint64_t a1)
{
  type metadata accessor for UUID();

  return sub_10107B8D0(a1);
}

uint64_t sub_10107C798()
{
  uint64_t v1 = type metadata accessor for UUID();
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 24) & ~v3;
  uint64_t v5 = v4 + *(void *)(v2 + 64);
  uint64_t v6 = v3 | 7;

  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);

  return _swift_deallocObject(v0, v5, v6);
}

void sub_10107C864(uint64_t a1)
{
  type metadata accessor for UUID();
  uint64_t v3 = *(NSObject **)(v1 + 16);

  sub_10107BA34(a1, v3);
}

uint64_t sub_10107C8D8()
{
  uint64_t v1 = (int *)type metadata accessor for OwnedBeaconRecord();
  uint64_t v2 = *(unsigned __int8 *)(*((void *)v1 - 1) + 80);
  uint64_t v3 = (v2 + 32) & ~v2;
  uint64_t v19 = *(void *)(*((void *)v1 - 1) + 64);
  swift_release();
  uint64_t v4 = v0 + v3;
  sub_10001CFB8(*(void *)(v0 + v3), *(void *)(v0 + v3 + 8));
  uint64_t v5 = v0 + v3 + v1[5];
  uint64_t v6 = type metadata accessor for UUID();
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = *(void (**)(uint64_t, uint64_t))(v7 + 8);
  v8(v5, v6);
  uint64_t v9 = v0 + v3 + v1[6];
  type metadata accessor for StableIdentifier();
  switch(swift_getEnumCaseMultiPayload())
  {
    case 0u:
    case 4u:
      goto LABEL_6;
    case 1u:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      goto LABEL_6;
    case 2u:
      v8(v9, v6);
      uint64_t v18 = (v2 + 32) & ~v2;
      sub_10000588C(&qword_1016555E0);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      goto LABEL_5;
    case 3u:
      v8(v9, v6);
      uint64_t v18 = (v2 + 32) & ~v2;
      sub_10000588C((uint64_t *)&unk_1016565E0);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
LABEL_5:
      uint64_t v3 = v18;
LABEL_6:
      swift_bridgeObjectRelease();
      break;
    default:
      break;
  }
  uint64_t v10 = v4 + v1[7];
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(v10, 1, v6)) {
    v8(v10, v6);
  }
  uint64_t v11 = v4 + v1[8];
  uint64_t v12 = type metadata accessor for Date();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v12 - 8) + 8))(v11, v12);
  sub_10001CFB8(*(void *)(v4 + v1[9]), *(void *)(v4 + v1[9] + 8));
  uint64_t v13 = (uint64_t *)(v4 + v1[10]);
  unint64_t v14 = v13[1];
  if (v14 >> 60 != 15) {
    sub_10001CFB8(*v13, v14);
  }
  uint64_t v15 = (uint64_t *)(v4 + v1[11]);
  unint64_t v16 = v15[1];
  if (v16 >> 60 != 15) {
    sub_10001CFB8(*v15, v16);
  }
  sub_10001CFB8(*(void *)(v4 + v1[12]), *(void *)(v4 + v1[12] + 8));
  sub_10001CFB8(*(void *)(v4 + v1[13]), *(void *)(v4 + v1[13] + 8));
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return _swift_deallocObject(v0, v3 + v19, v2 | 7);
}

uint64_t sub_10107CC5C(uint64_t a1)
{
  return sub_10107EA5C(a1, (uint64_t (*)(void))type metadata accessor for OwnedBeaconRecord, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_100ACA83C);
}

uint64_t sub_10107CC88(uint64_t a1)
{
  return sub_100ACAEE8(a1, *(void (**)(void *))(v1 + 16), *(void *)(v1 + 24));
}

uint64_t sub_10107CC90()
{
  uint64_t v1 = (int *)type metadata accessor for OwnedBeaconRecord();
  uint64_t v2 = *(unsigned __int8 *)(*((void *)v1 - 1) + 80);
  uint64_t v3 = (v2 + 16) & ~v2;
  uint64_t v19 = *(void *)(*((void *)v1 - 1) + 64);
  uint64_t v4 = v0 + v3;
  sub_10001CFB8(*(void *)(v0 + v3), *(void *)(v0 + v3 + 8));
  uint64_t v5 = v0 + v3 + v1[5];
  uint64_t v6 = type metadata accessor for UUID();
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = *(void (**)(uint64_t, uint64_t))(v7 + 8);
  v8(v5, v6);
  uint64_t v9 = v0 + v3 + v1[6];
  type metadata accessor for StableIdentifier();
  switch(swift_getEnumCaseMultiPayload())
  {
    case 0u:
    case 4u:
      goto LABEL_6;
    case 1u:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      goto LABEL_6;
    case 2u:
      v8(v9, v6);
      uint64_t v18 = (v2 + 16) & ~v2;
      sub_10000588C(&qword_1016555E0);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      goto LABEL_5;
    case 3u:
      v8(v9, v6);
      uint64_t v18 = (v2 + 16) & ~v2;
      sub_10000588C((uint64_t *)&unk_1016565E0);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
LABEL_5:
      uint64_t v3 = v18;
LABEL_6:
      swift_bridgeObjectRelease();
      break;
    default:
      break;
  }
  uint64_t v10 = v4 + v1[7];
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(v10, 1, v6)) {
    v8(v10, v6);
  }
  uint64_t v11 = v4 + v1[8];
  uint64_t v12 = type metadata accessor for Date();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v12 - 8) + 8))(v11, v12);
  sub_10001CFB8(*(void *)(v4 + v1[9]), *(void *)(v4 + v1[9] + 8));
  uint64_t v13 = (uint64_t *)(v4 + v1[10]);
  unint64_t v14 = v13[1];
  if (v14 >> 60 != 15) {
    sub_10001CFB8(*v13, v14);
  }
  uint64_t v15 = (uint64_t *)(v4 + v1[11]);
  unint64_t v16 = v15[1];
  if (v16 >> 60 != 15) {
    sub_10001CFB8(*v15, v16);
  }
  sub_10001CFB8(*(void *)(v4 + v1[12]), *(void *)(v4 + v1[12] + 8));
  sub_10001CFB8(*(void *)(v4 + v1[13]), *(void *)(v4 + v1[13] + 8));
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();

  return _swift_deallocObject(v0, ((((v19 + v3 + 7) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8) + 16, v2 | 7);
}

uint64_t sub_10107D034(uint64_t *a1)
{
  return sub_10107E2DC(a1, (uint64_t (*)(void))type metadata accessor for OwnedBeaconRecord, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))sub_100ACB5C0);
}

uint64_t sub_10107D060(uint64_t a1)
{
  return sub_100AC8DF4(a1, *(void *)(v1 + 16), *(id **)(v1 + 24), *(void *)(v1 + 32));
}

uint64_t sub_10107D080()
{
  uint64_t v1 = type metadata accessor for UUID();
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 24) & ~v3;
  uint64_t v5 = v3 | 7;
  unint64_t v6 = ((*(void *)(v2 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8) + 8;
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  swift_release();

  return _swift_deallocObject(v0, v6, v5);
}

void sub_10107D168()
{
  uint64_t v1 = *(void *)(type metadata accessor for UUID() - 8);
  unint64_t v2 = (*(unsigned __int8 *)(v1 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80);
  uint64_t v3 = *(void *)(v0 + 16);
  uint64_t v4 = *(void *)(v0 + ((*(void *)(v1 + 64) + v2 + 7) & 0xFFFFFFFFFFFFFFF8));

  sub_10107A698(v3, v0 + v2, v4);
}

uint64_t sub_10107D1F8()
{
  uint64_t updated = type metadata accessor for AccessoryFirmwareUpdateCommandInfo();
  uint64_t v2 = *(unsigned __int8 *)(*(void *)(updated - 8) + 80);
  uint64_t v3 = (v2 + 16) & ~v2;
  uint64_t v4 = *(void *)(*(void *)(updated - 8) + 64);
  if (*(void *)(v0 + v3)) {
    swift_release();
  }
  uint64_t v5 = v0 + v3 + *(int *)(updated + 20);
  uint64_t v6 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v6 - 8) + 8))(v5, v6);

  return _swift_deallocObject(v0, v3 + v4, v2 | 7);
}

uint64_t sub_10107D2F8()
{
  uint64_t updated = type metadata accessor for AccessoryFirmwareUpdateCommandInfo();
  uint64_t v3 = *(void *)(updated - 8);
  uint64_t result = updated - 8;
  uint64_t v4 = (uint64_t (**)(void))(v0
                                       + ((*(unsigned __int8 *)(v3 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80)));
  if (*v4) {
    return (*v4)(0);
  }
  return result;
}

uint64_t sub_10107D368()
{
  uint64_t v1 = (int *)(type metadata accessor for KeyAlignmentRecord() - 8);
  uint64_t v2 = *(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v3 = (v2 + 32) & ~v2;
  uint64_t v4 = v3 + *(void *)(*(void *)v1 + 64);
  uint64_t v5 = v2 | 7;
  swift_release();
  uint64_t v6 = v0 + v3;
  sub_10001CFB8(*(void *)(v0 + v3), *(void *)(v0 + v3 + 8));
  uint64_t v7 = v0 + v3 + v1[7];
  uint64_t v8 = type metadata accessor for UUID();
  uint64_t v9 = *(void (**)(uint64_t, uint64_t))(*(void *)(v8 - 8) + 8);
  v9(v7, v8);
  v9(v6 + v1[8], v8);
  uint64_t v10 = v6 + v1[10];
  uint64_t v11 = type metadata accessor for Date();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v11 - 8) + 8))(v10, v11);

  return _swift_deallocObject(v0, v4, v5);
}

uint64_t sub_10107D4D0(uint64_t a1)
{
  return sub_10107EA5C(a1, (uint64_t (*)(void))type metadata accessor for KeyAlignmentRecord, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_100ACA98C);
}

uint64_t sub_10107D4FC(uint64_t a1)
{
  return sub_100ACAF48(a1, *(void (**)(void *))(v1 + 16), *(void *)(v1 + 24));
}

uint64_t sub_10107D504()
{
  uint64_t v1 = (int *)(type metadata accessor for KeyAlignmentRecord() - 8);
  uint64_t v2 = *(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v3 = (v2 + 16) & ~v2;
  uint64_t v12 = v2 | 7;
  unint64_t v4 = (((*(void *)(*(void *)v1 + 64) + v3 + 7) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v5 = v0 + v3;
  sub_10001CFB8(*(void *)(v0 + v3), *(void *)(v0 + v3 + 8));
  uint64_t v6 = v5 + v1[7];
  uint64_t v7 = type metadata accessor for UUID();
  uint64_t v8 = *(void (**)(uint64_t, uint64_t))(*(void *)(v7 - 8) + 8);
  v8(v6, v7);
  v8(v5 + v1[8], v7);
  uint64_t v9 = v5 + v1[10];
  uint64_t v10 = type metadata accessor for Date();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v10 - 8) + 8))(v9, v10);
  swift_release();
  swift_release();

  return _swift_deallocObject(v0, v4 + 16, v12);
}

uint64_t sub_10107D698(uint64_t *a1)
{
  return sub_10107E2DC(a1, (uint64_t (*)(void))type metadata accessor for KeyAlignmentRecord, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))sub_100ACC280);
}

uint64_t sub_10107D6C4(uint64_t a1)
{
  return sub_100AC94D4(a1, *(void *)(v1 + 16), *(id **)(v1 + 24), *(void *)(v1 + 32));
}

uint64_t sub_10107D6E4()
{
  uint64_t v1 = (int *)(type metadata accessor for BeaconNamingRecord() - 8);
  uint64_t v2 = *(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v3 = (v2 + 32) & ~v2;
  uint64_t v4 = v3 + *(void *)(*(void *)v1 + 64);
  uint64_t v5 = v2 | 7;
  swift_release();
  uint64_t v6 = v0 + v3;
  sub_10001CFB8(*(void *)(v0 + v3), *(void *)(v0 + v3 + 8));
  uint64_t v7 = v0 + v3 + v1[7];
  uint64_t v8 = type metadata accessor for UUID();
  uint64_t v9 = *(void (**)(uint64_t, uint64_t))(*(void *)(v8 - 8) + 8);
  v9(v7, v8);
  v9(v6 + v1[8], v8);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return _swift_deallocObject(v0, v4, v5);
}

uint64_t sub_10107D82C(uint64_t a1)
{
  return sub_10107EA5C(a1, (uint64_t (*)(void))type metadata accessor for BeaconNamingRecord, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_100ACA8E4);
}

uint64_t sub_10107D858(uint64_t a1)
{
  return sub_100ACAF18(a1, *(void (**)(void *))(v1 + 16), *(void *)(v1 + 24));
}

uint64_t sub_10107D860()
{
  uint64_t v1 = (int *)(type metadata accessor for BeaconNamingRecord() - 8);
  uint64_t v2 = *(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v3 = (v2 + 16) & ~v2;
  uint64_t v10 = v2 | 7;
  unint64_t v4 = (((*(void *)(*(void *)v1 + 64) + v3 + 7) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v5 = v0 + v3;
  sub_10001CFB8(*(void *)(v0 + v3), *(void *)(v0 + v3 + 8));
  uint64_t v6 = v5 + v1[7];
  uint64_t v7 = type metadata accessor for UUID();
  uint64_t v8 = *(void (**)(uint64_t, uint64_t))(*(void *)(v7 - 8) + 8);
  v8(v6, v7);
  v8(v5 + v1[8], v7);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();

  return _swift_deallocObject(v0, v4 + 16, v10);
}

uint64_t sub_10107D9D4(uint64_t *a1)
{
  return sub_10107E2DC(a1, (uint64_t (*)(void))type metadata accessor for BeaconNamingRecord, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))sub_100ACBC20);
}

uint64_t sub_10107DA00()
{
  uint64_t v1 = (int *)(type metadata accessor for OwnedBeaconGroup(0) - 8);
  uint64_t v2 = *(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v3 = (v2 + 32) & ~v2;
  uint64_t v4 = v3 + *(void *)(*(void *)v1 + 64);
  uint64_t v5 = v2 | 7;
  swift_release();
  uint64_t v6 = v0 + v3;
  sub_10001CFB8(*(void *)(v0 + v3), *(void *)(v0 + v3 + 8));
  uint64_t v7 = v0 + v3 + v1[8];
  uint64_t v8 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v8 - 8) + 8))(v7, v8);
  uint64_t v9 = v6 + v1[9];
  uint64_t v10 = type metadata accessor for MACAddress();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v10 - 8) + 8))(v9, v10);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return _swift_deallocObject(v0, v4, v5);
}

uint64_t sub_10107DB58(uint64_t a1)
{
  return sub_10107EA5C(a1, type metadata accessor for OwnedBeaconGroup, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_100ACA794);
}

uint64_t sub_10107DB84(uint64_t a1)
{
  return sub_100ACAD18(a1, *(void (**)(void *))(v1 + 16), *(void *)(v1 + 24));
}

uint64_t sub_10107DB8C()
{
  uint64_t v1 = (int *)(type metadata accessor for OwnedBeaconGroup(0) - 8);
  uint64_t v2 = *(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v3 = (v2 + 16) & ~v2;
  uint64_t v4 = v2 | 7;
  unint64_t v5 = (((*(void *)(*(void *)v1 + 64) + v3 + 7) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v6 = v0 + v3;
  sub_10001CFB8(*(void *)(v0 + v3), *(void *)(v0 + v3 + 8));
  uint64_t v7 = v6 + v1[8];
  uint64_t v8 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v8 - 8) + 8))(v7, v8);
  uint64_t v9 = v6 + v1[9];
  uint64_t v10 = type metadata accessor for MACAddress();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v10 - 8) + 8))(v9, v10);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();

  return _swift_deallocObject(v0, v5 + 16, v4);
}

uint64_t sub_10107DD0C(uint64_t *a1)
{
  return sub_10107E2DC(a1, type metadata accessor for OwnedBeaconGroup, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))sub_100ACAF60);
}

uint64_t sub_10107DD38()
{
  uint64_t v1 = (int *)type metadata accessor for SharedBeaconRecord(0);
  uint64_t v2 = *(unsigned __int8 *)(*((void *)v1 - 1) + 80);
  uint64_t v16 = *(void *)(*((void *)v1 - 1) + 64);
  swift_release();
  uint64_t v3 = v0 + ((v2 + 32) & ~v2);
  sub_10001CFB8(*(void *)v3, *(void *)(v3 + 8));
  uint64_t v4 = v3 + v1[5];
  uint64_t v5 = type metadata accessor for UUID();
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v7 = *(void (**)(uint64_t, uint64_t))(v6 + 8);
  v7(v4, v5);
  v7(v3 + v1[6], v5);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v8 = v3 + v1[18];
  uint64_t v9 = type metadata accessor for Date();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v9 - 8) + 8))(v8, v9);
  uint64_t v10 = v3 + v1[19];
  uint64_t v11 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v6 + 48);
  if (!v11(v10, 1, v5)) {
    v7(v10, v5);
  }
  uint64_t v12 = v3 + v1[20];
  uint64_t v13 = type metadata accessor for SharedBeaconRecord.PropertyListContent(0);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v13 - 8) + 48))(v12, 1, v13))
  {
    uint64_t v14 = v12 + *(int *)(v13 + 20);
    if (!v11(v14, 1, v5)) {
      v7(v14, v5);
    }
  }

  return _swift_deallocObject(v0, ((v2 + 32) & ~v2) + v16, v2 | 7);
}

uint64_t sub_10107DFC8(uint64_t a1)
{
  return sub_10107EA5C(a1, type metadata accessor for SharedBeaconRecord, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_100ACA7E8);
}

uint64_t sub_10107DFF4(uint64_t a1)
{
  return sub_100ACAED0(a1, *(void (**)(void *))(v1 + 16), *(void *)(v1 + 24));
}

uint64_t sub_10107DFFC()
{
  uint64_t v1 = (int *)type metadata accessor for SharedBeaconRecord(0);
  uint64_t v2 = *(unsigned __int8 *)(*((void *)v1 - 1) + 80);
  uint64_t v15 = *(void *)(*((void *)v1 - 1) + 64);
  uint64_t v16 = (v2 + 16) & ~v2;
  sub_10001CFB8(*(void *)(v0 + v16), *(void *)(v0 + v16 + 8));
  uint64_t v3 = v0 + v16 + v1[5];
  uint64_t v4 = type metadata accessor for UUID();
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = *(void (**)(uint64_t, uint64_t))(v5 + 8);
  v6(v3, v4);
  v6(v0 + v16 + v1[6], v4);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v7 = v0 + v16 + v1[18];
  uint64_t v8 = type metadata accessor for Date();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v8 - 8) + 8))(v7, v8);
  uint64_t v9 = v0 + v16 + v1[19];
  uint64_t v10 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v5 + 48);
  if (!v10(v9, 1, v4)) {
    v6(v9, v4);
  }
  uint64_t v11 = v0 + v16 + v1[20];
  uint64_t v12 = type metadata accessor for SharedBeaconRecord.PropertyListContent(0);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v12 - 8) + 48))(v11, 1, v12))
  {
    uint64_t v13 = v11 + *(int *)(v12 + 20);
    if (!v10(v13, 1, v4)) {
      v6(v13, v4);
    }
  }
  swift_release();
  swift_release();

  return _swift_deallocObject(v0, ((((v15 + v16 + 7) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8) + 16, v2 | 7);
}

uint64_t sub_10107E2B0(uint64_t *a1)
{
  return sub_10107E2DC(a1, type metadata accessor for SharedBeaconRecord, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))sub_100ACB278);
}

uint64_t sub_10107E2DC(uint64_t *a1, uint64_t (*a2)(void), uint64_t (*a3)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))
{
  uint64_t v5 = *(void *)(a2(0) - 8);
  unint64_t v6 = (*(unsigned __int8 *)(v5 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
  unint64_t v7 = (*(void *)(v5 + 64) + v6 + 7) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v8 = v3 + v6;
  uint64_t v9 = *(void *)(v3 + v7);
  uint64_t v10 = (uint64_t *)(v3 + ((v7 + 15) & 0xFFFFFFFFFFFFFFF8));
  uint64_t v11 = *v10;
  uint64_t v12 = v10[1];
  uint64_t v13 = *a1;

  return a3(v13, v8, v9, v11, v12);
}

uint64_t sub_10107E3A0()
{
  uint64_t v1 = (int *)type metadata accessor for ShareRecord();
  uint64_t v2 = *(unsigned __int8 *)(*((void *)v1 - 1) + 80);
  uint64_t v3 = (v2 + 32) & ~v2;
  uint64_t v13 = *(void *)(*((void *)v1 - 1) + 64);
  swift_release();
  sub_10001CFB8(*(void *)(v0 + v3), *(void *)(v0 + v3 + 8));
  uint64_t v4 = v0 + v3 + v1[5];
  uint64_t v5 = type metadata accessor for UUID();
  unint64_t v6 = *(void (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8);
  v6(v4, v5);
  v6(v0 + v3 + v1[6], v5);
  uint64_t v7 = v0 + v3 + v1[7];
  uint64_t v8 = type metadata accessor for Date();
  uint64_t v9 = *(void *)(v8 - 8);
  uint64_t v10 = *(void (**)(uint64_t, uint64_t))(v9 + 8);
  v10(v7, v8);
  uint64_t v11 = v0 + v3 + v1[8];
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v9 + 48))(v11, 1, v8)) {
    v10(v11, v8);
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return _swift_deallocObject(v0, v3 + v13, v2 | 7);
}

uint64_t sub_10107E594(uint64_t a1)
{
  return sub_10107EA5C(a1, (uint64_t (*)(void))type metadata accessor for ShareRecord, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_100ACA938);
}

uint64_t sub_10107E5C0(uint64_t a1)
{
  return sub_100ACAF30(a1, *(void (**)(void *))(v1 + 16), *(void *)(v1 + 24));
}

uint64_t sub_10107E5C8()
{
  uint64_t v1 = (int *)type metadata accessor for ShareRecord();
  uint64_t v2 = *(unsigned __int8 *)(*((void *)v1 - 1) + 80);
  uint64_t v3 = (v2 + 16) & ~v2;
  uint64_t v13 = *(void *)(*((void *)v1 - 1) + 64);
  sub_10001CFB8(*(void *)(v0 + v3), *(void *)(v0 + v3 + 8));
  uint64_t v4 = v0 + v3 + v1[5];
  uint64_t v5 = type metadata accessor for UUID();
  unint64_t v6 = *(void (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8);
  v6(v4, v5);
  v6(v0 + v3 + v1[6], v5);
  uint64_t v7 = v0 + v3 + v1[7];
  uint64_t v8 = type metadata accessor for Date();
  uint64_t v9 = *(void *)(v8 - 8);
  uint64_t v10 = *(void (**)(uint64_t, uint64_t))(v9 + 8);
  v10(v7, v8);
  uint64_t v11 = v0 + v3 + v1[8];
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v9 + 48))(v11, 1, v8)) {
    v10(v11, v8);
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();

  return _swift_deallocObject(v0, ((((v13 + v3 + 7) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8) + 16, v2 | 7);
}

uint64_t sub_10107E7DC(uint64_t a1)
{
  return sub_10107ECD8(a1, (uint64_t (*)(void))type metadata accessor for ShareRecord, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))sub_100B2F84C);
}

uint64_t sub_10107E808(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

uint64_t sub_10107E870()
{
  uint64_t v1 = (int *)(type metadata accessor for LostModeRecord() - 8);
  uint64_t v2 = *(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v3 = (v2 + 32) & ~v2;
  uint64_t v4 = v3 + *(void *)(*(void *)v1 + 64);
  uint64_t v5 = v2 | 7;
  swift_release();
  uint64_t v6 = v0 + v3;
  sub_10001CFB8(*(void *)(v0 + v3), *(void *)(v0 + v3 + 8));
  uint64_t v7 = v0 + v3 + v1[7];
  uint64_t v8 = type metadata accessor for UUID();
  uint64_t v9 = *(void (**)(uint64_t, uint64_t))(*(void *)(v8 - 8) + 8);
  v9(v7, v8);
  v9(v6 + v1[8], v8);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return _swift_deallocObject(v0, v4, v5);
}

uint64_t sub_10107E9C8(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 32))(a2, a1, v5);
  return a2;
}

uint64_t sub_10107EA30(uint64_t a1)
{
  return sub_10107EA5C(a1, (uint64_t (*)(void))type metadata accessor for LostModeRecord, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_100ACA890);
}

uint64_t sub_10107EA5C(uint64_t a1, uint64_t (*a2)(void), uint64_t (*a3)(uint64_t, uint64_t, uint64_t, uint64_t))
{
  uint64_t v5 = *(void *)(a2(0) - 8);
  uint64_t v6 = *(void *)(v3 + 16);
  uint64_t v7 = *(void *)(v3 + 24);
  uint64_t v8 = v3 + ((*(unsigned __int8 *)(v5 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80));

  return a3(a1, v6, v7, v8);
}

uint64_t sub_10107EAE8()
{
  swift_release();

  return _swift_deallocObject(v0, 32, 7);
}

uint64_t sub_10107EB20(uint64_t a1)
{
  return sub_100ACAF00(a1, *(void (**)(void *))(v1 + 16), *(void *)(v1 + 24));
}

uint64_t sub_10107EB28()
{
  uint64_t v1 = (int *)(type metadata accessor for LostModeRecord() - 8);
  uint64_t v2 = *(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v3 = (v2 + 16) & ~v2;
  uint64_t v10 = v2 | 7;
  unint64_t v4 = (((*(void *)(*(void *)v1 + 64) + v3 + 7) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v5 = v0 + v3;
  sub_10001CFB8(*(void *)(v0 + v3), *(void *)(v0 + v3 + 8));
  uint64_t v6 = v5 + v1[7];
  uint64_t v7 = type metadata accessor for UUID();
  uint64_t v8 = *(void (**)(uint64_t, uint64_t))(*(void *)(v7 - 8) + 8);
  v8(v6, v7);
  v8(v5 + v1[8], v7);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();

  return _swift_deallocObject(v0, v4 + 16, v10);
}

uint64_t sub_10107ECAC(uint64_t a1)
{
  return sub_10107ECD8(a1, (uint64_t (*)(void))type metadata accessor for LostModeRecord, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))sub_100B2F5EC);
}

uint64_t sub_10107ECD8(uint64_t a1, uint64_t (*a2)(void), uint64_t (*a3)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))
{
  uint64_t v5 = *(void *)(a2(0) - 8);
  unint64_t v6 = (*(unsigned __int8 *)(v5 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
  unint64_t v7 = (*(void *)(v5 + 64) + v6 + 7) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v8 = v3 + v6;
  uint64_t v9 = *(void *)(v3 + v7);
  uint64_t v10 = (uint64_t *)(v3 + ((v7 + 15) & 0xFFFFFFFFFFFFFFF8));
  uint64_t v11 = *v10;
  uint64_t v12 = v10[1];

  return a3(a1, v8, v9, v11, v12);
}

uint64_t sub_10107ED9C(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t sub_10107EDFC()
{
  uint64_t v1 = type metadata accessor for UUID();
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 32) & ~v3;
  uint64_t v5 = *(void *)(v2 + 64);
  uint64_t v6 = v3 | 7;
  unint64_t v7 = (v3 + ((v5 + v4 + 7) & 0xFFFFFFFFFFFFFFF8) + 8) & ~v3;
  uint64_t v8 = v7 + v5;
  swift_release();
  unint64_t v9 = v0 + v4;
  uint64_t v10 = *(void (**)(unint64_t, uint64_t))(v2 + 8);
  v10(v9, v1);
  swift_release();
  v10(v0 + v7, v1);

  return _swift_deallocObject(v0, v8, v6);
}

uint64_t sub_10107EF04()
{
  uint64_t v1 = *(void *)(type metadata accessor for UUID() - 8);
  uint64_t v2 = *(unsigned __int8 *)(v1 + 80);
  uint64_t v3 = (v2 + 32) & ~v2;
  unint64_t v4 = (*(void *)(v1 + 64) + v3 + 7) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v5 = *(void *)(v0 + 16);
  uint64_t v6 = *(void *)(v0 + 24);
  uint64_t v7 = *(void *)(v0 + v4);

  return sub_1010778A4(v5, v6, v0 + v3, v7, v0 + ((v2 + v4 + 8) & ~v2));
}

uint64_t sub_10107EFA4(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_10107EFEC()
{
  uint64_t v1 = type metadata accessor for UUID();
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 24) & ~v3;
  uint64_t v5 = v3 | 7;
  unint64_t v6 = (((*(void *)(v2 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8;
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  swift_bridgeObjectRelease();
  swift_release();

  return _swift_deallocObject(v0, v6 + 8, v5);
}

void sub_10107F0E8()
{
  uint64_t v1 = *(void *)(type metadata accessor for UUID() - 8);
  unint64_t v2 = (*(unsigned __int8 *)(v1 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80);
  unint64_t v3 = (*(void *)(v1 + 64) + v2 + 7) & 0xFFFFFFFFFFFFFFF8;
  sub_101077CB0(v0 + v2, 4, 0, *(void *)(v0 + v3), *(void (**)(char *, uint64_t, uint64_t))(v0 + v3 + 8));
  Transaction.capture()();
}

uint64_t sub_10107F1D8(uint64_t a1)
{
  return sub_10107C2EC(a1);
}

uint64_t sub_10107F1F0(uint64_t a1)
{
  uint64_t v1 = *(void (**)(uint64_t))(a1 + 32);
  swift_retain();
  uint64_t v2 = swift_unknownObjectRetain();
  v1(v2);
  swift_release();

  return swift_unknownObjectRelease();
}

uint64_t sub_10107F250(uint64_t a1)
{
  uint64_t v1 = *(void (**)(uint64_t))(a1 + 32);
  sub_10001D4B0(0, (unint64_t *)&qword_101669330);
  uint64_t v2 = static Array._unconditionallyBridgeFromObjectiveC(_:)();
  swift_retain();
  v1(v2);
  swift_release();

  return swift_bridgeObjectRelease();
}

uint64_t SPSecureLocationsStewieServiceState.description.getter()
{
  return 0x2D746C7561666564;
}

uint64_t sub_10107F458()
{
  return SPSecureLocationsStewieServiceState.description.getter();
}

uint64_t sub_10107F460(uint64_t a1)
{
  uint64_t v2 = sub_10000588C((uint64_t *)&unk_10163AC90);
  __chkstk_darwin(v2 - 8);
  uint64_t v4 = (char *)&v16 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = type metadata accessor for Date();
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v8 = (char *)&v16 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10001D074(a1, (uint64_t)v4, (uint64_t *)&unk_10163AC90);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v6 + 48))(v4, 1, v5) == 1)
  {
    sub_10001DAB4((uint64_t)v4, (uint64_t *)&unk_10163AC90);
    id v9 = [self standardUserDefaults];
    NSString v10 = String._bridgeToObjectiveC()();
    [v9 setDouble:v10 forKey:0.0];

    return sub_10001DAB4(a1, (uint64_t *)&unk_10163AC90);
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v6 + 32))(v8, v4, v5);
    Date.timeIntervalSince1970.getter();
    double v13 = v12;
    id v14 = [self standardUserDefaults];
    NSString v15 = String._bridgeToObjectiveC()();
    [v14 setDouble:v15 forKey:v13];

    sub_10001DAB4(a1, (uint64_t *)&unk_10163AC90);
    return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  }
}

char *sub_10107F6D0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v32 = a2;
  uint64_t v33 = a3;
  uint64_t v31 = a1;
  uint64_t v4 = type metadata accessor for OS_dispatch_queue.Attributes();
  __chkstk_darwin(v4);
  uint64_t v5 = type metadata accessor for DispatchQoS();
  __chkstk_darwin(v5 - 8);
  uint64_t v6 = type metadata accessor for OS_dispatch_queue.AutoreleaseFrequency();
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  id v9 = (char *)&v30 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  NSString v10 = &v3[OBJC_IVAR____TtC12searchpartyd28SecureLocationsStewieManager_stewieLogPrefix];
  *(void *)NSString v10 = 0x3A656977657473;
  *((void *)v10 + 1) = 0xE700000000000000;
  uint64_t v11 = &v3[OBJC_IVAR____TtC12searchpartyd28SecureLocationsStewieManager_liteLocationThrottleAlarm];
  *(void *)uint64_t v11 = 0xD000000000000044;
  *((void *)v11 + 1) = 0x8000000101420AF0;
  uint64_t v30 = OBJC_IVAR____TtC12searchpartyd28SecureLocationsStewieManager_clientQueue;
  sub_10001D4B0(0, (unint64_t *)&qword_1016376E0);
  (*(void (**)(char *, void, uint64_t))(v7 + 104))(v9, enum case for OS_dispatch_queue.AutoreleaseFrequency.workItem(_:), v6);
  double v12 = v3;
  static DispatchQoS.unspecified.getter();
  uint64_t v36 = _swiftEmptyArrayStorage;
  sub_10109A964((unint64_t *)&qword_101638CC0, (void (*)(uint64_t))&type metadata accessor for OS_dispatch_queue.Attributes);
  sub_10000588C((uint64_t *)&unk_1016376F0);
  sub_100062734((unint64_t *)&qword_101638CD0, (uint64_t *)&unk_1016376F0);
  dispatch thunk of SetAlgebra.init<A>(_:)();
  double v13 = (void *)OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)();
  *(void *)&v3[v30] = v13;
  *(void *)&v12[OBJC_IVAR____TtC12searchpartyd28SecureLocationsStewieManager_dataClient] = 0;
  *(void *)&v12[OBJC_IVAR____TtC12searchpartyd28SecureLocationsStewieManager_coreTelephonyClient] = 0;
  v12[OBJC_IVAR____TtC12searchpartyd28SecureLocationsStewieManager_isFindMyServiceConnectedToStewie] = 0;
  id v14 = &v12[OBJC_IVAR____TtC12searchpartyd28SecureLocationsStewieManager_stewieServiceState];
  *(void *)id v14 = 0;
  v14[8] = 1;
  NSString v15 = &v12[OBJC_IVAR____TtC12searchpartyd28SecureLocationsStewieManager_location];
  uint64_t v16 = type metadata accessor for SecureLocation();
  uint64_t v17 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v16 - 8) + 56);
  v17(v15, 1, 1, v16);
  *(void *)&v12[OBJC_IVAR____TtC12searchpartyd28SecureLocationsStewieManager_publishCompletions] = _swiftEmptyArrayStorage;
  *(void *)&v12[OBJC_IVAR____TtC12searchpartyd28SecureLocationsStewieManager_meDeviceSubscription] = 0;
  uint64_t v18 = &v12[OBJC_IVAR____TtC12searchpartyd28SecureLocationsStewieManager_LastPublishDateKey];
  *(void *)uint64_t v18 = 0xD000000000000017;
  *((void *)v18 + 1) = 0x8000000101420B70;
  uint64_t v19 = &v12[OBJC_IVAR____TtC12searchpartyd28SecureLocationsStewieManager_lastAvailabilityDate];
  uint64_t v20 = type metadata accessor for Date();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v20 - 8) + 56))(v19, 1, 1, v20);
  *(void *)&v12[OBJC_IVAR____TtC12searchpartyd28SecureLocationsStewieManager_cntProactiveAlerts] = 1;
  *(void *)&v12[OBJC_IVAR____TtC12searchpartyd28SecureLocationsStewieManager_notificationTimer] = 0;
  uint64_t v21 = OBJC_IVAR____TtC12searchpartyd28SecureLocationsStewieManager_locationMonitorDistanceThreshold;
  id v22 = objc_allocWithZone((Class)type metadata accessor for CurrentLocationMonitor());
  *(void *)&v12[v21] = CurrentLocationMonitor.init(mode:desiredAccuracy:)(0, 0x4059000000000000, 0);
  v17(&v12[OBJC_IVAR____TtC12searchpartyd28SecureLocationsStewieManager_lastPublishedLocation], 1, 1, v16);
  v12[OBJC_IVAR____TtC12searchpartyd28SecureLocationsStewieManager_isStewieSupported] = 0;
  uint64_t v23 = v32;
  *(void *)&v12[OBJC_IVAR____TtC12searchpartyd28SecureLocationsStewieManager_payloadManager] = v31;
  *(void *)&v12[OBJC_IVAR____TtC12searchpartyd28SecureLocationsStewieManager_clientSessionPool] = v23;
  *(void *)&v12[OBJC_IVAR____TtC12searchpartyd28SecureLocationsStewieManager_keyManager] = v33;
  type metadata accessor for QueueSynchronizer();
  swift_allocObject();
  swift_retain();
  swift_retain();
  swift_retain();
  id v24 = v13;
  *(void *)&v12[OBJC_IVAR____TtC12searchpartyd28SecureLocationsStewieManager_clientQueueSynchronizer] = QueueSynchronizer.init(queue:)();

  uint64_t v25 = (objc_class *)type metadata accessor for SecureLocationsStewieManager();
  v37.uint64_t receiver = v12;
  v37.super_class = v25;
  uint64_t v26 = (char *)[super init];
  uint64_t v27 = *(void *)&v26[OBJC_IVAR____TtC12searchpartyd28SecureLocationsStewieManager_locationMonitorDistanceThreshold]
      + OBJC_IVAR____TtC12searchpartyd22CurrentLocationMonitor_delegate;
  swift_beginAccess();
  *(void *)(v27 + 8) = &off_101604FD0;
  swift_unknownObjectWeakAssign();
  uint64_t v35 = v26;
  uint64_t v28 = v26;
  QueueSynchronizer.conditionalSync<A>(_:)();
  sub_101086958();
  uint64_t v34 = v28;
  QueueSynchronizer.conditionalSync<A>(_:)();
  sub_10108A2B8();
  sub_101080204();

  swift_release();
  swift_release();
  swift_release();
  return v28;
}

void sub_10107FCC8(unsigned char *a1)
{
  uint64_t v2 = OBJC_IVAR____TtC12searchpartyd28SecureLocationsStewieManager_coreTelephonyClient;
  uint64_t v3 = *(void **)&a1[OBJC_IVAR____TtC12searchpartyd28SecureLocationsStewieManager_coreTelephonyClient];
  if (v3
    || (v16 = [objc_allocWithZone((Class)CoreTelephonyClient) initWithQueue:*(void *)&a1[OBJC_IVAR____TtC12searchpartyd28SecureLocationsStewieManager_clientQueue]], v17 = *(void **)&a1[v2], *(void *)&a1[v2] = v16, v17, (v18 = *(void **)&a1[v2]) != 0)&& (objc_msgSend(v18, "setDelegate:", a1), (uint64_t v3 = *(void **)&a1[v2]) != 0))
  {
    id v31 = 0;
    id v4 = v3;
    id v5 = [v4 getStewieSupport:&v31];
    if (v5)
    {
      uint64_t v6 = v5;
      id v7 = v31;
      unsigned __int8 v8 = [v6 status];
      a1[OBJC_IVAR____TtC12searchpartyd28SecureLocationsStewieManager_isStewieSupported] = v8;
      if (qword_101637070 != -1) {
        swift_once();
      }
      uint64_t v9 = type metadata accessor for Logger();
      sub_100010324(v9, (uint64_t)qword_10170EC30);
      NSString v10 = a1;
      uint64_t v11 = Logger.logObject.getter();
      os_log_type_t v12 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v11, v12))
      {
        uint64_t v30 = v4;
        uint64_t v13 = swift_slowAlloc();
        id v31 = (id)swift_slowAlloc();
        *(_DWORD *)uint64_t v13 = 136446466;
        uint64_t v14 = *(void *)&v10[OBJC_IVAR____TtC12searchpartyd28SecureLocationsStewieManager_stewieLogPrefix];
        unint64_t v15 = *(void *)&v10[OBJC_IVAR____TtC12searchpartyd28SecureLocationsStewieManager_stewieLogPrefix + 8];
        swift_bridgeObjectRetain();
        sub_1008FA0F0(v14, v15, (uint64_t *)&v31);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        *(_WORD *)(v13 + 12) = 1024;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();

        _os_log_impl((void *)&_mh_execute_header, v11, v12, "%{public}s - support state %{BOOL}d", (uint8_t *)v13, 0x12u);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
      }
      else
      {
      }
    }
    else
    {
      id v19 = v31;
      _convertNSErrorToError(_:)();

      swift_willThrow();
      if (qword_101637070 != -1) {
        swift_once();
      }
      uint64_t v20 = type metadata accessor for Logger();
      sub_100010324(v20, (uint64_t)qword_10170EC30);
      uint64_t v21 = a1;
      swift_errorRetain();
      id v22 = v21;
      swift_errorRetain();
      uint64_t v23 = Logger.logObject.getter();
      os_log_type_t v24 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v23, v24))
      {
        uint64_t v25 = swift_slowAlloc();
        id v31 = (id)swift_slowAlloc();
        *(_DWORD *)uint64_t v25 = 136446466;
        uint64_t v26 = *(void *)&v22[OBJC_IVAR____TtC12searchpartyd28SecureLocationsStewieManager_stewieLogPrefix];
        unint64_t v27 = *(void *)&v22[OBJC_IVAR____TtC12searchpartyd28SecureLocationsStewieManager_stewieLogPrefix + 8];
        swift_bridgeObjectRetain();
        sub_1008FA0F0(v26, v27, (uint64_t *)&v31);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();

        swift_bridgeObjectRelease();
        *(_WORD *)(v25 + 12) = 2080;
        swift_errorRetain();
        sub_10000588C(&qword_101638D40);
        uint64_t v28 = String.init<A>(describing:)();
        sub_1008FA0F0(v28, v29, (uint64_t *)&v31);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        swift_errorRelease();
        swift_errorRelease();
        _os_log_impl((void *)&_mh_execute_header, v23, v24, "%{public}s - unable to get support state %s", (uint8_t *)v25, 0x16u);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();

        swift_errorRelease();
      }
      else
      {

        swift_errorRelease();
        swift_errorRelease();
        swift_errorRelease();
      }
      v22[OBJC_IVAR____TtC12searchpartyd28SecureLocationsStewieManager_isStewieSupported] = 0;
    }
  }
}

uint64_t sub_101080204()
{
  uint64_t v1 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v19 = *(void *)(v1 - 8);
  __chkstk_darwin(v1);
  uint64_t v3 = (char *)&v17 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = type metadata accessor for DispatchQoS();
  uint64_t v17 = *(void *)(v4 - 8);
  uint64_t v18 = v4;
  __chkstk_darwin(v4);
  uint64_t v6 = (char *)&v17 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for DispatchQoS.QoSClass();
  uint64_t v8 = *(void *)(v7 - 8);
  __chkstk_darwin(v7);
  NSString v10 = (char *)&v17 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_101637680 != -1) {
    swift_once();
  }
  swift_retain();
  uint64_t v11 = AnyCurrentValuePublisher.publisher.getter();
  swift_release();
  aBlock[0] = v11;
  *(void *)(swift_allocObject() + 16) = v0;
  os_log_type_t v12 = v0;
  sub_10000588C((uint64_t *)&unk_1016569C0);
  sub_100062734((unint64_t *)&qword_10163A518, (uint64_t *)&unk_1016569C0);
  uint64_t v13 = Publisher<>.sink(receiveValue:)();
  swift_release();
  swift_release();
  *(void *)&v12[OBJC_IVAR____TtC12searchpartyd28SecureLocationsStewieManager_meDeviceSubscription] = v13;
  swift_release();
  sub_10001D4B0(0, (unint64_t *)&qword_1016376E0);
  (*(void (**)(char *, void, uint64_t))(v8 + 104))(v10, enum case for DispatchQoS.QoSClass.default(_:), v7);
  uint64_t v14 = (void *)static OS_dispatch_queue.global(qos:)();
  (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v7);
  aBlock[4] = sub_100D074B4;
  aBlock[5] = 0;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_1004B5480;
  aBlock[3] = &unk_101605B50;
  unint64_t v15 = _Block_copy(aBlock);
  static DispatchQoS.unspecified.getter();
  uint64_t v20 = _swiftEmptyArrayStorage;
  sub_10109A964((unint64_t *)&qword_10163B7E0, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
  sub_10000588C((uint64_t *)&unk_10163F350);
  sub_100062734((unint64_t *)&qword_10163B7F0, (uint64_t *)&unk_10163F350);
  dispatch thunk of SetAlgebra.init<A>(_:)();
  OS_dispatch_queue.async(group:qos:flags:execute:)();
  _Block_release(v15);

  (*(void (**)(char *, uint64_t))(v19 + 8))(v3, v1);
  return (*(uint64_t (**)(char *, uint64_t))(v17 + 8))(v6, v18);
}

void sub_10108067C(unsigned __int8 *a1, void *a2)
{
  if ((*a1 | 4) == 4)
  {
    if (qword_101637070 != -1) {
      swift_once();
    }
    uint64_t v3 = type metadata accessor for Logger();
    sub_100010324(v3, (uint64_t)qword_10170EC30);
    uint64_t v21 = a2;
    uint64_t v4 = Logger.logObject.getter();
    os_log_type_t v5 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v4, v5))
    {
      uint64_t v6 = (uint8_t *)swift_slowAlloc();
      uint64_t v22 = swift_slowAlloc();
      *(_DWORD *)uint64_t v6 = 136446210;
      uint64_t v7 = *(void *)&v21[OBJC_IVAR____TtC12searchpartyd28SecureLocationsStewieManager_stewieLogPrefix];
      unint64_t v8 = *(void *)&v21[OBJC_IVAR____TtC12searchpartyd28SecureLocationsStewieManager_stewieLogPrefix + 8];
      swift_bridgeObjectRetain();
      sub_1008FA0F0(v7, v8, &v22);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();

      swift_bridgeObjectRelease();
      uint64_t v9 = "%{public}s - me device state is unknown or none";
LABEL_17:
      _os_log_impl((void *)&_mh_execute_header, v4, v5, v9, v6, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      return;
    }
LABEL_18:

    return;
  }
  if (qword_101637080 != -1) {
    swift_once();
  }
  swift_retain();
  char v10 = sub_100D0C0B0();
  swift_release();
  if ((v10 & 1) == 0)
  {
    if (qword_101637070 != -1) {
      swift_once();
    }
    uint64_t v18 = type metadata accessor for Logger();
    sub_100010324(v18, (uint64_t)qword_10170EC30);
    uint64_t v21 = a2;
    uint64_t v4 = Logger.logObject.getter();
    os_log_type_t v5 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v4, v5))
    {
      uint64_t v6 = (uint8_t *)swift_slowAlloc();
      uint64_t v22 = swift_slowAlloc();
      *(_DWORD *)uint64_t v6 = 136446210;
      uint64_t v19 = *(void *)&v21[OBJC_IVAR____TtC12searchpartyd28SecureLocationsStewieManager_stewieLogPrefix];
      unint64_t v20 = *(void *)&v21[OBJC_IVAR____TtC12searchpartyd28SecureLocationsStewieManager_stewieLogPrefix + 8];
      swift_bridgeObjectRetain();
      sub_1008FA0F0(v19, v20, &v22);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();

      swift_bridgeObjectRelease();
      uint64_t v9 = "%{public}s - me device status changed - device is not a location publishing device. not starting monitor";
      goto LABEL_17;
    }
    goto LABEL_18;
  }
  if (qword_101637070 != -1) {
    swift_once();
  }
  uint64_t v11 = type metadata accessor for Logger();
  sub_100010324(v11, (uint64_t)qword_10170EC30);
  os_log_type_t v12 = a2;
  uint64_t v13 = Logger.logObject.getter();
  os_log_type_t v14 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v13, v14))
  {
    unint64_t v15 = (uint8_t *)swift_slowAlloc();
    uint64_t v22 = swift_slowAlloc();
    *(_DWORD *)unint64_t v15 = 136446210;
    uint64_t v16 = *(void *)&v12[OBJC_IVAR____TtC12searchpartyd28SecureLocationsStewieManager_stewieLogPrefix];
    unint64_t v17 = *(void *)&v12[OBJC_IVAR____TtC12searchpartyd28SecureLocationsStewieManager_stewieLogPrefix + 8];
    swift_bridgeObjectRetain();
    sub_1008FA0F0(v16, v17, &v22);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v13, v14, "%{public}s - device is location publishing device - requesting startMonitor", v15, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
  }
  sub_10108A2B8();
}

void sub_101080B5C()
{
  if (*(void *)&v0[OBJC_IVAR____TtC12searchpartyd28SecureLocationsStewieManager_dataClient])
  {
    uint64_t v1 = type metadata accessor for Transaction();
    __chkstk_darwin(v1);
    static Transaction.named<A>(_:with:)();
  }
  else
  {
    type metadata accessor for SecureLocationsStewieError(0);
    sub_1004A0BC8((uint64_t)_swiftEmptyArrayStorage);
    sub_10109A964(&qword_101638540, type metadata accessor for SecureLocationsStewieError);
    _BridgedStoredNSError.init(_:userInfo:)();
    sub_101089870(0, (uint64_t)v9);

    if (qword_101637070 != -1) {
      swift_once();
    }
    uint64_t v2 = type metadata accessor for Logger();
    sub_100010324(v2, (uint64_t)qword_10170EC30);
    uint64_t v3 = v0;
    uint64_t v4 = Logger.logObject.getter();
    os_log_type_t v5 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v4, v5))
    {
      uint64_t v6 = (uint8_t *)swift_slowAlloc();
      id v9 = (id)swift_slowAlloc();
      *(_DWORD *)uint64_t v6 = 136446210;
      uint64_t v7 = *(void *)&v3[OBJC_IVAR____TtC12searchpartyd28SecureLocationsStewieManager_stewieLogPrefix];
      unint64_t v8 = *(void *)&v3[OBJC_IVAR____TtC12searchpartyd28SecureLocationsStewieManager_stewieLogPrefix + 8];
      swift_bridgeObjectRetain();
      sub_1008FA0F0(v7, v8, (uint64_t *)&v9);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();

      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v4, v5, "%{public}s - no dataClient. Not proceeding with requesting context", v6, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
    }
  }
}

uint64_t sub_101080E18(uint64_t a1, char *a2)
{
  uint64_t v4 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v7 = (char *)v15 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = type metadata accessor for DispatchQoS();
  uint64_t v8 = *(void *)(v16 - 8);
  __chkstk_darwin(v16);
  char v10 = (char *)v15 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15[1] = *(void *)&a2[OBJC_IVAR____TtC12searchpartyd28SecureLocationsStewieManager_clientQueue];
  uint64_t v11 = swift_allocObject();
  *(void *)(v11 + 16) = a2;
  *(void *)(v11 + 24) = a1;
  aBlock[4] = sub_10109A8F0;
  aBlock[5] = v11;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_1004B5480;
  aBlock[3] = &unk_101605AB0;
  os_log_type_t v12 = _Block_copy(aBlock);
  uint64_t v13 = a2;
  swift_retain();
  static DispatchQoS.unspecified.getter();
  uint64_t aBlock[7] = _swiftEmptyArrayStorage;
  sub_10109A964((unint64_t *)&qword_10163B7E0, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
  sub_10000588C((uint64_t *)&unk_10163F350);
  sub_100062734((unint64_t *)&qword_10163B7F0, (uint64_t *)&unk_10163F350);
  dispatch thunk of SetAlgebra.init<A>(_:)();
  OS_dispatch_queue.async(group:qos:flags:execute:)();
  _Block_release(v12);
  (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v16);
  return swift_release();
}

void sub_1010810F0(char *a1, id a2)
{
  uint64_t v4 = type metadata accessor for DispatchPredicate();
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v7 = (uint64_t *)((char *)&v46 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v50 = a1;
  char v51 = 0;
  id v8 = 0;
  QueueSynchronizer.conditionalSync<A>(_:)();
  if (LOBYTE(aBlock[0]) != 1)
  {
    type metadata accessor for SecureLocationsStewieError(0);
    uint64_t v53 = 5;
    sub_1004A0BC8((uint64_t)_swiftEmptyArrayStorage);
    sub_10109A964(&qword_101638540, type metadata accessor for SecureLocationsStewieError);
    _BridgedStoredNSError.init(_:userInfo:)();
    os_log_type_t v24 = (void *)aBlock[0];
    sub_101089870(0, aBlock[0]);

    Transaction.capture()();
    return;
  }
  uint64_t v9 = *(void **)&a1[OBJC_IVAR____TtC12searchpartyd28SecureLocationsStewieManager_clientQueue];
  *uint64_t v7 = v9;
  (*(void (**)(void *, void, uint64_t))(v5 + 104))(v7, enum case for DispatchPredicate.onQueue(_:), v4);
  char v10 = v9;
  LOBYTE(v9) = _dispatchPreconditionTest(_:)();
  (*(void (**)(void *, uint64_t))(v5 + 8))(v7, v4);
  if ((v9 & 1) == 0)
  {
    __break(1u);
    goto LABEL_23;
  }
  uint64_t v11 = &a1[OBJC_IVAR____TtC12searchpartyd28SecureLocationsStewieManager_stewieServiceState];
  *(void *)uint64_t v11 = 5;
  v11[8] = 0;
  sub_10108F1FC();
  uint64_t v12 = OBJC_IVAR____TtC12searchpartyd28SecureLocationsStewieManager_coreTelephonyClient;
  uint64_t v13 = *(void **)&a1[OBJC_IVAR____TtC12searchpartyd28SecureLocationsStewieManager_coreTelephonyClient];
  os_log_type_t v14 = &qword_101637000;
  if (v13) {
    goto LABEL_4;
  }
  if (qword_101637070 != -1) {
    swift_once();
  }
  uint64_t v28 = type metadata accessor for Logger();
  sub_100010324(v28, (uint64_t)qword_10170EC30);
  unint64_t v29 = a1;
  uint64_t v30 = Logger.logObject.getter();
  os_log_type_t v31 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v30, v31))
  {
    uint64_t v32 = swift_slowAlloc();
    uint64_t v48 = v10;
    uint64_t v33 = (uint8_t *)v32;
    uint64_t v34 = swift_slowAlloc();
    id v49 = a2;
    uint64_t v46 = v34;
    aBlock[0] = v34;
    *(_DWORD *)uint64_t v33 = 136446210;
    uint64_t v47 = v28;
    uint64_t v35 = *(void *)&v29[OBJC_IVAR____TtC12searchpartyd28SecureLocationsStewieManager_stewieLogPrefix];
    unint64_t v36 = *(void *)&v29[OBJC_IVAR____TtC12searchpartyd28SecureLocationsStewieManager_stewieLogPrefix + 8];
    swift_bridgeObjectRetain();
    uint64_t v53 = sub_1008FA0F0(v35, v36, aBlock);
    os_log_type_t v14 = &qword_101637000;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    uint64_t v28 = v47;
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v30, v31, "%{public}s - re-creating CT client", v33, 0xCu);
    swift_arrayDestroy();
    a2 = v49;
    swift_slowDealloc();
    char v10 = v48;
    swift_slowDealloc();
  }
  else
  {
  }
  id v37 = [objc_allocWithZone((Class)CoreTelephonyClient) initWithQueue:v10];
  uint64_t v38 = *(void **)&a1[v12];
  *(void *)&a1[v12] = v37;

  uint64_t v39 = *(void **)&a1[v12];
  if (v39)
  {
    [v39 setDelegate:v29];
    uint64_t v13 = *(void **)&a1[v12];
    if (v13)
    {
LABEL_4:
      id v15 = objc_allocWithZone((Class)CTStewieRequestContext);
      id v8 = v13;
      uint64_t v7 = [v15 init];
      [v7 setReason:6];
      if (v14[14] == -1)
      {
LABEL_5:
        uint64_t v16 = type metadata accessor for Logger();
        sub_100010324(v16, (uint64_t)qword_10170EC30);
        unint64_t v17 = a1;
        uint64_t v18 = Logger.logObject.getter();
        os_log_type_t v19 = static os_log_type_t.default.getter();
        if (os_log_type_enabled(v18, v19))
        {
          uint64_t v20 = swift_slowAlloc();
          uint64_t v48 = v7;
          uint64_t v21 = (uint8_t *)v20;
          aBlock[0] = swift_slowAlloc();
          *(_DWORD *)uint64_t v21 = 136446210;
          id v49 = v8;
          uint64_t v22 = *(void *)&v17[OBJC_IVAR____TtC12searchpartyd28SecureLocationsStewieManager_stewieLogPrefix];
          unint64_t v23 = *(void *)&v17[OBJC_IVAR____TtC12searchpartyd28SecureLocationsStewieManager_stewieLogPrefix + 8];
          swift_bridgeObjectRetain();
          uint64_t v53 = sub_1008FA0F0(v22, v23, aBlock);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();

          id v8 = v49;
          swift_bridgeObjectRelease();
          _os_log_impl((void *)&_mh_execute_header, v18, v19, "%{public}s - requesting context", v21, 0xCu);
          swift_arrayDestroy();
          swift_slowDealloc();
          uint64_t v7 = v48;
          swift_slowDealloc();
        }
        else
        {
        }
        uint64_t v25 = swift_allocObject();
        *(void *)(v25 + 16) = v17;
        *(void *)(v25 + 24) = a2;
        aBlock[4] = (uint64_t)sub_10109A8FC;
        aBlock[5] = v25;
        aBlock[0] = (uint64_t)_NSConcreteStackBlock;
        aBlock[1] = 1107296256;
        aBlock[2] = (uint64_t)sub_100769474;
        aBlock[3] = (uint64_t)&unk_101605B00;
        uint64_t v26 = _Block_copy(aBlock);
        unint64_t v27 = v17;
        swift_retain();
        swift_release();
        [v8 requestStewieWithContext:v7 completion:v26];
        _Block_release(v26);

        return;
      }
LABEL_23:
      swift_once();
      goto LABEL_5;
    }
  }
  if (v14[14] != -1) {
    swift_once();
  }
  sub_100010324(v28, (uint64_t)qword_10170EC30);
  uint64_t v40 = v29;
  uint64_t v41 = Logger.logObject.getter();
  os_log_type_t v42 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v41, v42))
  {
    uint64_t v43 = (uint8_t *)swift_slowAlloc();
    aBlock[0] = swift_slowAlloc();
    *(_DWORD *)uint64_t v43 = 136446210;
    uint64_t v44 = *(void *)&v40[OBJC_IVAR____TtC12searchpartyd28SecureLocationsStewieManager_stewieLogPrefix];
    unint64_t v45 = *(void *)&v40[OBJC_IVAR____TtC12searchpartyd28SecureLocationsStewieManager_stewieLogPrefix + 8];
    swift_bridgeObjectRetain();
    uint64_t v53 = sub_1008FA0F0(v44, v45, aBlock);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v41, v42, "%{public}s - No CoreTelephonyClient", v43, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
  }
}

void sub_1010818E4(uint64_t a1, void *a2)
{
  if (a1)
  {
    swift_errorRetain();
    if (qword_101637070 != -1) {
      swift_once();
    }
    uint64_t v4 = type metadata accessor for Logger();
    sub_100010324(v4, (uint64_t)qword_10170EC30);
    swift_errorRetain();
    swift_errorRetain();
    uint64_t v5 = a2;
    uint64_t v6 = Logger.logObject.getter();
    os_log_type_t v7 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v6, v7))
    {
      uint64_t v8 = swift_slowAlloc();
      v14[0] = swift_slowAlloc();
      *(_DWORD *)uint64_t v8 = 136446466;
      uint64_t v10 = *(void *)&v5[OBJC_IVAR____TtC12searchpartyd28SecureLocationsStewieManager_stewieLogPrefix];
      unint64_t v9 = *(void *)&v5[OBJC_IVAR____TtC12searchpartyd28SecureLocationsStewieManager_stewieLogPrefix + 8];
      swift_bridgeObjectRetain();
      sub_1008FA0F0(v10, v9, v14);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();

      swift_bridgeObjectRelease();
      *(_WORD *)(v8 + 12) = 2080;
      swift_errorRetain();
      sub_10000588C(&qword_101638D40);
      uint64_t v11 = String.init<A>(describing:)();
      sub_1008FA0F0(v11, v12, v14);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      swift_errorRelease();
      swift_errorRelease();
      _os_log_impl((void *)&_mh_execute_header, v6, v7, "%{public}s - error requesting context %s", (uint8_t *)v8, 0x16u);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {

      swift_errorRelease();
      swift_errorRelease();
    }

    swift_errorRetain();
    sub_101089870(0, a1);
    uint64_t v13 = swift_errorRelease();
    __chkstk_darwin(v13);
    static Transaction.named<A>(_:with:)();
    swift_errorRelease();
  }
  Transaction.capture()();
}

uint64_t sub_101081BF4(uint64_t a1, char *a2, void *a3)
{
  uint64_t v6 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  unint64_t v9 = (char *)v18 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v19 = type metadata accessor for DispatchQoS();
  uint64_t v10 = *(void *)(v19 - 8);
  __chkstk_darwin(v19);
  unint64_t v12 = (char *)v18 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18[1] = *(void *)&a2[OBJC_IVAR____TtC12searchpartyd28SecureLocationsStewieManager_clientQueue];
  uint64_t v13 = (void *)swift_allocObject();
  void v13[2] = a2;
  v13[3] = a3;
  v13[4] = a1;
  aBlock[4] = sub_10109A4AC;
  aBlock[5] = v13;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_1004B5480;
  aBlock[3] = &unk_101605970;
  os_log_type_t v14 = _Block_copy(aBlock);
  id v15 = a3;
  swift_retain();
  uint64_t v16 = a2;
  static DispatchQoS.unspecified.getter();
  uint64_t aBlock[7] = _swiftEmptyArrayStorage;
  sub_10109A964((unint64_t *)&qword_10163B7E0, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
  sub_10000588C((uint64_t *)&unk_10163F350);
  sub_100062734((unint64_t *)&qword_10163B7F0, (uint64_t *)&unk_10163F350);
  dispatch thunk of SetAlgebra.init<A>(_:)();
  OS_dispatch_queue.async(group:qos:flags:execute:)();
  _Block_release(v14);
  (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
  (*(void (**)(char *, uint64_t))(v10 + 8))(v12, v19);
  return swift_release();
}

void sub_101081ED8(void *a1, void *a2, uint64_t a3)
{
  uint64_t v6 = sub_10000588C(&qword_101669310);
  __chkstk_darwin(v6 - 8);
  uint64_t v8 = (char *)&v44 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_101637070 != -1) {
    swift_once();
  }
  uint64_t v9 = type metadata accessor for Logger();
  sub_100010324(v9, (uint64_t)qword_10170EC30);
  id v10 = a2;
  id v11 = a1;
  id v12 = v10;
  uint64_t v13 = (char *)v11;
  os_log_type_t v14 = Logger.logObject.getter();
  os_log_type_t v15 = static os_log_type_t.default.getter();
  BOOL v16 = os_log_type_enabled(v14, v15);
  uint64_t v47 = v8;
  uint64_t v48 = (uint64_t)a2;
  if (v16)
  {
    uint64_t v17 = swift_slowAlloc();
    uint64_t v45 = swift_slowAlloc();
    uint64_t v46 = a3;
    aBlock[0] = v45;
    *(_DWORD *)uint64_t v17 = 136446466;
    uint64_t v18 = v12;
    uint64_t v19 = (uint64_t)a2;
    uint64_t v21 = *(void *)&v13[OBJC_IVAR____TtC12searchpartyd28SecureLocationsStewieManager_stewieLogPrefix];
    unint64_t v20 = *(void *)&v13[OBJC_IVAR____TtC12searchpartyd28SecureLocationsStewieManager_stewieLogPrefix + 8];
    swift_bridgeObjectRetain();
    uint64_t v50 = sub_1008FA0F0(v21, v20, aBlock);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    swift_bridgeObjectRelease();
    *(_WORD *)(v17 + 12) = 2080;
    uint64_t v50 = v19;
    id v22 = v18;
    sub_10000588C(&qword_101669380);
    uint64_t v23 = String.init<A>(describing:)();
    uint64_t v50 = sub_1008FA0F0(v23, v24, aBlock);
    id v12 = v18;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v14, v15, "%{public}s - will exit context - error: %s", (uint8_t *)v17, 0x16u);
    swift_arrayDestroy();
    a3 = v46;
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
  }
  uint64_t v25 = *(void **)&v13[OBJC_IVAR____TtC12searchpartyd28SecureLocationsStewieManager_coreTelephonyClient];
  if (v25)
  {
    id v26 = objc_allocWithZone((Class)CTStewieExitContext);
    id v27 = v25;
    id v28 = [v26 init];
    [v28 setReason:2];
    unint64_t v29 = (void *)swift_allocObject();
    uint64_t v30 = v48;
    v29[2] = v13;
    v29[3] = v30;
    v29[4] = a3;
    aBlock[4] = (uint64_t)sub_10109A528;
    aBlock[5] = (uint64_t)v29;
    aBlock[0] = (uint64_t)_NSConcreteStackBlock;
    aBlock[1] = 1107296256;
    aBlock[2] = (uint64_t)sub_100769474;
    aBlock[3] = (uint64_t)&unk_1016059C0;
    os_log_type_t v31 = _Block_copy(aBlock);
    uint64_t v32 = v13;
    id v33 = v12;
    swift_retain();
    swift_release();
    [v27 exitStewieWithContext:v28 completion:v31];
    _Block_release(v31);
  }
  else
  {
    uint64_t v34 = v13;
    uint64_t v35 = Logger.logObject.getter();
    os_log_type_t v36 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v35, v36))
    {
      id v37 = (uint8_t *)swift_slowAlloc();
      aBlock[0] = swift_slowAlloc();
      *(_DWORD *)id v37 = 136446210;
      uint64_t v38 = *(void *)&v34[OBJC_IVAR____TtC12searchpartyd28SecureLocationsStewieManager_stewieLogPrefix];
      unint64_t v39 = *(void *)&v34[OBJC_IVAR____TtC12searchpartyd28SecureLocationsStewieManager_stewieLogPrefix + 8];
      swift_bridgeObjectRetain();
      uint64_t v50 = sub_1008FA0F0(v38, v39, aBlock);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();

      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v35, v36, "%{public}s - will exit no telephony client", v37, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
    }
    uint64_t v41 = (uint64_t)v47;
    uint64_t v40 = v48;
    sub_1010885CC();
    uint64_t v42 = type metadata accessor for SecureLocation();
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v42 - 8) + 56))(v41, 1, 1, v42);
    uint64_t v43 = (uint64_t)&v34[OBJC_IVAR____TtC12searchpartyd28SecureLocationsStewieManager_location];
    swift_beginAccess();
    sub_100062604(v41, v43, &qword_101669310);
    swift_endAccess();
    sub_101089870(0, v40);
    Transaction.capture()();
  }
}

void sub_10108244C(uint64_t a1, void *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8 = sub_10000588C(&qword_101669310);
  __chkstk_darwin(v8 - 8);
  uint64_t v38 = (char *)&v35 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_101637070 != -1) {
    swift_once();
  }
  uint64_t v10 = type metadata accessor for Logger();
  uint64_t v11 = sub_100010324(v10, (uint64_t)qword_10170EC30);
  id v12 = a2;
  swift_errorRetain();
  uint64_t v13 = (char *)v12;
  swift_errorRetain();
  os_log_type_t v14 = Logger.logObject.getter();
  os_log_type_t v15 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v14, v15))
  {
    uint64_t v16 = swift_slowAlloc();
    uint64_t v36 = v11;
    uint64_t v17 = v16;
    v40[0] = swift_slowAlloc();
    *(_DWORD *)uint64_t v17 = 136446466;
    uint64_t v37 = a4;
    uint64_t v18 = a3;
    uint64_t v19 = *(void *)&v13[OBJC_IVAR____TtC12searchpartyd28SecureLocationsStewieManager_stewieLogPrefix];
    unint64_t v20 = *(void *)&v13[OBJC_IVAR____TtC12searchpartyd28SecureLocationsStewieManager_stewieLogPrefix + 8];
    swift_bridgeObjectRetain();
    uint64_t v39 = sub_1008FA0F0(v19, v20, v40);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    swift_bridgeObjectRelease();
    *(_WORD *)(v17 + 12) = 2080;
    uint64_t v39 = a1;
    swift_errorRetain();
    sub_10000588C((uint64_t *)&unk_101638EB0);
    uint64_t v21 = String.init<A>(describing:)();
    uint64_t v39 = sub_1008FA0F0(v21, v22, v40);
    a3 = v18;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    a4 = v37;
    swift_bridgeObjectRelease();
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl((void *)&_mh_execute_header, v14, v15, "%{public}s - exit completed error - %s", (uint8_t *)v17, 0x16u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    if (!a1) {
      goto LABEL_10;
    }
  }
  else
  {

    swift_errorRelease();
    swift_errorRelease();

    if (!a1) {
      goto LABEL_10;
    }
  }
  swift_errorRetain();
  uint64_t v23 = v13;
  swift_errorRetain();
  unint64_t v24 = v23;
  swift_errorRetain();
  uint64_t v25 = Logger.logObject.getter();
  os_log_type_t v26 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v25, v26))
  {
    uint64_t v27 = swift_slowAlloc();
    v40[0] = swift_slowAlloc();
    *(_DWORD *)uint64_t v27 = 136446466;
    uint64_t v36 = a3;
    uint64_t v37 = a4;
    uint64_t v28 = *(void *)&v24[OBJC_IVAR____TtC12searchpartyd28SecureLocationsStewieManager_stewieLogPrefix];
    unint64_t v29 = *(void *)&v24[OBJC_IVAR____TtC12searchpartyd28SecureLocationsStewieManager_stewieLogPrefix + 8];
    swift_bridgeObjectRetain();
    uint64_t v39 = sub_1008FA0F0(v28, v29, v40);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    swift_bridgeObjectRelease();
    *(_WORD *)(v27 + 12) = 2080;
    uint64_t v39 = a1;
    swift_errorRetain();
    sub_10000588C(&qword_101638D40);
    uint64_t v30 = String.init<A>(describing:)();
    uint64_t v39 = sub_1008FA0F0(v30, v31, v40);
    a3 = v36;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl((void *)&_mh_execute_header, v25, v26, "%{public}s - error exiting %s", (uint8_t *)v27, 0x16u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    swift_errorRelease();
  }
  else
  {
    swift_errorRelease();

    swift_errorRelease();
    swift_errorRelease();
  }
LABEL_10:
  sub_1010885CC();
  uint64_t v32 = type metadata accessor for SecureLocation();
  uint64_t v33 = (uint64_t)v38;
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v32 - 8) + 56))(v38, 1, 1, v32);
  uint64_t v34 = (uint64_t)&v13[OBJC_IVAR____TtC12searchpartyd28SecureLocationsStewieManager_location];
  swift_beginAccess();
  sub_100062604(v33, v34, &qword_101669310);
  swift_endAccess();
  sub_101089870(0, a3);
  Transaction.capture()();
}

void sub_101082988(uint64_t a1)
{
  uint64_t v3 = type metadata accessor for SecureLocation();
  uint64_t v4 = __chkstk_darwin(v3);
  uint64_t v6 = (char *)&v31 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v4);
  uint64_t v8 = (char *)&v31 - v7;
  if (qword_101637070 != -1) {
    swift_once();
  }
  uint64_t v9 = type metadata accessor for Logger();
  uint64_t v10 = sub_100010324(v9, (uint64_t)qword_10170EC30);
  sub_10109A9AC(a1, (uint64_t)v8, (uint64_t (*)(void))type metadata accessor for SecureLocation);
  uint64_t v11 = v1;
  id v12 = Logger.logObject.getter();
  os_log_type_t v13 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v12, v13))
  {
    uint64_t v14 = swift_slowAlloc();
    uint64_t v32 = a1;
    uint64_t v15 = v14;
    uint64_t v35 = (void *)swift_slowAlloc();
    *(_DWORD *)uint64_t v15 = 136446466;
    uint64_t v31 = v3;
    uint64_t v33 = v10;
    uint64_t v16 = *(void *)&v11[OBJC_IVAR____TtC12searchpartyd28SecureLocationsStewieManager_stewieLogPrefix];
    unint64_t v17 = *(void *)&v11[OBJC_IVAR____TtC12searchpartyd28SecureLocationsStewieManager_stewieLogPrefix + 8];
    swift_bridgeObjectRetain();
    uint64_t v34 = sub_1008FA0F0(v16, v17, (uint64_t *)&v35);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    swift_bridgeObjectRelease();
    *(_WORD *)(v15 + 12) = 2080;
    sub_10109A9AC((uint64_t)v8, (uint64_t)v6, (uint64_t (*)(void))type metadata accessor for SecureLocation);
    uint64_t v18 = String.init<A>(describing:)();
    uint64_t v34 = sub_1008FA0F0(v18, v19, (uint64_t *)&v35);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    sub_10109AA14((uint64_t)v8, (uint64_t (*)(void))type metadata accessor for SecureLocation);
    _os_log_impl((void *)&_mh_execute_header, v12, v13, "%{public}s publishLocation called with %s", (uint8_t *)v15, 0x16u);
    swift_arrayDestroy();
    swift_slowDealloc();
    a1 = v32;
    swift_slowDealloc();
  }
  else
  {

    sub_10109AA14((uint64_t)v8, (uint64_t (*)(void))type metadata accessor for SecureLocation);
  }

  unint64_t v20 = *(void **)&v11[OBJC_IVAR____TtC12searchpartyd28SecureLocationsStewieManager_dataClient];
  if (v20)
  {
    uint64_t v21 = type metadata accessor for Transaction();
    __chkstk_darwin(v21);
    *(&v31 - 2) = (uint64_t)v11;
    *(&v31 - 1) = a1;
    id v22 = v20;
    static Transaction.named<A>(_:with:)();
  }
  else
  {
    type metadata accessor for SecureLocationsStewieError(0);
    uint64_t v34 = 4;
    sub_1004A0BC8((uint64_t)_swiftEmptyArrayStorage);
    sub_10109A964(&qword_101638540, type metadata accessor for SecureLocationsStewieError);
    _BridgedStoredNSError.init(_:userInfo:)();
    uint64_t v23 = v35;
    uint64_t v24 = type metadata accessor for Transaction();
    __chkstk_darwin(v24);
    *(&v31 - 2) = (uint64_t)v11;
    *(&v31 - 1) = (uint64_t)v23;
    static Transaction.named<A>(_:with:)();

    uint64_t v25 = v11;
    os_log_type_t v26 = Logger.logObject.getter();
    os_log_type_t v27 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v26, v27))
    {
      uint64_t v28 = (uint8_t *)swift_slowAlloc();
      uint64_t v35 = (void *)swift_slowAlloc();
      *(_DWORD *)uint64_t v28 = 136446210;
      uint64_t v29 = *(void *)&v25[OBJC_IVAR____TtC12searchpartyd28SecureLocationsStewieManager_stewieLogPrefix];
      unint64_t v30 = *(void *)&v25[OBJC_IVAR____TtC12searchpartyd28SecureLocationsStewieManager_stewieLogPrefix + 8];
      swift_bridgeObjectRetain();
      uint64_t v34 = sub_1008FA0F0(v29, v30, (uint64_t *)&v35);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();

      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v26, v27, "%{public}s no dataclient - not proceeding with publishLocation", v28, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
    }
  }
}

uint64_t sub_101082F04(uint64_t a1, char *a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v23 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  uint64_t v8 = (char *)v20 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = type metadata accessor for DispatchQoS();
  uint64_t v21 = *(void *)(v9 - 8);
  uint64_t v22 = v9;
  __chkstk_darwin(v9);
  uint64_t v11 = (char *)v20 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = type metadata accessor for SecureLocation();
  uint64_t v13 = *(void *)(v12 - 8);
  uint64_t v14 = *(void *)(v13 + 64);
  __chkstk_darwin(v12 - 8);
  v20[1] = *(void *)&a2[OBJC_IVAR____TtC12searchpartyd28SecureLocationsStewieManager_clientQueue];
  sub_10109A9AC(a3, (uint64_t)v20 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0), (uint64_t (*)(void))type metadata accessor for SecureLocation);
  unint64_t v15 = (*(unsigned __int8 *)(v13 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v13 + 80);
  uint64_t v16 = swift_allocObject();
  *(void *)(v16 + 16) = a2;
  *(void *)(v16 + 24) = a1;
  sub_1009F9AD4((uint64_t)v20 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0), v16 + v15);
  aBlock[4] = sub_10109A86C;
  aBlock[5] = v16;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_1004B5480;
  aBlock[3] = &unk_101605A60;
  unint64_t v17 = _Block_copy(aBlock);
  uint64_t v18 = a2;
  swift_retain();
  static DispatchQoS.unspecified.getter();
  uint64_t aBlock[7] = _swiftEmptyArrayStorage;
  sub_10109A964((unint64_t *)&qword_10163B7E0, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
  sub_10000588C((uint64_t *)&unk_10163F350);
  sub_100062734((unint64_t *)&qword_10163B7F0, (uint64_t *)&unk_10163F350);
  dispatch thunk of SetAlgebra.init<A>(_:)();
  OS_dispatch_queue.async(group:qos:flags:execute:)();
  _Block_release(v17);
  (*(void (**)(char *, uint64_t))(v23 + 8))(v8, v6);
  (*(void (**)(char *, uint64_t))(v21 + 8))(v11, v22);
  return swift_release();
}

void sub_10108328C(unsigned __int8 *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = sub_10000588C(&qword_101669310);
  __chkstk_darwin(v6 - 8);
  uint64_t v8 = (char *)&v36 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v38 = a1;
  char v39 = 1;
  QueueSynchronizer.conditionalSync<A>(_:)();
  if (LOBYTE(v40[0]) != 1)
  {
    if (qword_101637070 != -1) {
      swift_once();
    }
    uint64_t v26 = type metadata accessor for Logger();
    sub_100010324(v26, (uint64_t)qword_10170EC30);
    os_log_type_t v27 = a1;
    uint64_t v28 = Logger.logObject.getter();
    os_log_type_t v29 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v28, v29))
    {
      unint64_t v30 = (uint8_t *)swift_slowAlloc();
      uint64_t v31 = swift_slowAlloc();
      uint64_t v37 = a2;
      v40[0] = v31;
      *(_DWORD *)unint64_t v30 = 136446210;
      uint64_t v33 = *(void *)&v27[OBJC_IVAR____TtC12searchpartyd28SecureLocationsStewieManager_stewieLogPrefix];
      unint64_t v32 = *(void *)&v27[OBJC_IVAR____TtC12searchpartyd28SecureLocationsStewieManager_stewieLogPrefix + 8];
      swift_bridgeObjectRetain();
      uint64_t v41 = sub_1008FA0F0(v33, v32, v40);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();

      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v28, v29, "%{public}s - publishLocation(location:) - canPublishLocation is false.", v30, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
    }
    type metadata accessor for SecureLocationsStewieError(0);
    uint64_t v41 = 5;
    sub_1004A0BC8((uint64_t)_swiftEmptyArrayStorage);
    sub_10109A964(&qword_101638540, type metadata accessor for SecureLocationsStewieError);
    _BridgedStoredNSError.init(_:userInfo:)();
    uint64_t v34 = (void *)v40[0];
    uint64_t v35 = type metadata accessor for Transaction();
    __chkstk_darwin(v35);
    *(&v36 - 2) = (uint64_t)v27;
    *(&v36 - 1) = (uint64_t)v34;
    static Transaction.named<A>(_:with:)();

    goto LABEL_16;
  }
  sub_10109A9AC(a3, (uint64_t)v8, (uint64_t (*)(void))type metadata accessor for SecureLocation);
  uint64_t v9 = type metadata accessor for SecureLocation();
  (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v9 - 8) + 56))(v8, 0, 1, v9);
  uint64_t v10 = (uint64_t)&a1[OBJC_IVAR____TtC12searchpartyd28SecureLocationsStewieManager_location];
  swift_beginAccess();
  sub_100062604((uint64_t)v8, v10, &qword_101669310);
  swift_endAccess();
  int v11 = a1[OBJC_IVAR____TtC12searchpartyd28SecureLocationsStewieManager_isFindMyServiceConnectedToStewie];
  if (qword_101637070 != -1) {
    swift_once();
  }
  uint64_t v12 = type metadata accessor for Logger();
  sub_100010324(v12, (uint64_t)qword_10170EC30);
  uint64_t v13 = a1;
  uint64_t v14 = Logger.logObject.getter();
  os_log_type_t v15 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v14, v15))
  {
    uint64_t v16 = swift_slowAlloc();
    uint64_t v17 = swift_slowAlloc();
    uint64_t v37 = a2;
    v40[0] = v17;
    *(_DWORD *)uint64_t v16 = 136446466;
    uint64_t v18 = *(void *)&v13[OBJC_IVAR____TtC12searchpartyd28SecureLocationsStewieManager_stewieLogPrefix];
    unint64_t v19 = *(void *)&v13[OBJC_IVAR____TtC12searchpartyd28SecureLocationsStewieManager_stewieLogPrefix + 8];
    swift_bridgeObjectRetain();
    uint64_t v41 = sub_1008FA0F0(v18, v19, v40);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    swift_bridgeObjectRelease();
    *(_WORD *)(v16 + 12) = 1024;
    LODWORD(v41) = v11;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl((void *)&_mh_execute_header, v14, v15, "%{public}s - publishLocation - isFindMyAConnectedService: %{BOOL}d", (uint8_t *)v16, 0x12u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    if (!v11) {
      goto LABEL_6;
    }
    goto LABEL_13;
  }

  if (v11)
  {
LABEL_13:
    sub_101083934();
LABEL_16:
    Transaction.capture()();
    return;
  }
LABEL_6:
  unint64_t v20 = v13;
  uint64_t v21 = Logger.logObject.getter();
  os_log_type_t v22 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v21, v22))
  {
    uint64_t v23 = (uint8_t *)swift_slowAlloc();
    v40[0] = swift_slowAlloc();
    *(_DWORD *)uint64_t v23 = 136446210;
    uint64_t v24 = *(void *)&v20[OBJC_IVAR____TtC12searchpartyd28SecureLocationsStewieManager_stewieLogPrefix];
    unint64_t v25 = *(void *)&v20[OBJC_IVAR____TtC12searchpartyd28SecureLocationsStewieManager_stewieLogPrefix + 8];
    swift_bridgeObjectRetain();
    uint64_t v41 = sub_1008FA0F0(v24, v25, v40);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v21, v22, "%{public}s - publish location called but not active service available", v23, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
  }
}

void sub_101083934()
{
  uint64_t v1 = v0;
  uint64_t v2 = sub_10000588C(&qword_101669310);
  __chkstk_darwin(v2 - 8);
  uint64_t v4 = (char *)v41 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = type metadata accessor for SecureLocation();
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v8 = (char *)v41 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = type metadata accessor for DispatchPredicate();
  uint64_t v10 = *(void *)(v9 - 8);
  __chkstk_darwin(v9);
  uint64_t v12 = (void *)((char *)v41 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v13 = *(void **)&v1[OBJC_IVAR____TtC12searchpartyd28SecureLocationsStewieManager_clientQueue];
  *uint64_t v12 = v13;
  (*(void (**)(void *, void, uint64_t))(v10 + 104))(v12, enum case for DispatchPredicate.onQueue(_:), v9);
  id v14 = v13;
  LOBYTE(v13) = _dispatchPreconditionTest(_:)();
  uint64_t v15 = (*(uint64_t (**)(void *, uint64_t))(v10 + 8))(v12, v9);
  if ((v13 & 1) == 0)
  {
    __break(1u);
    goto LABEL_21;
  }
  __chkstk_darwin(v15);
  v41[-2] = v1;
  LOBYTE(v41[-1]) = 1;
  QueueSynchronizer.conditionalSync<A>(_:)();
  if (v43 != 1)
  {
    if (qword_101637070 == -1)
    {
LABEL_9:
      uint64_t v24 = type metadata accessor for Logger();
      sub_100010324(v24, (uint64_t)qword_10170EC30);
      unint64_t v25 = v1;
      uint64_t v26 = Logger.logObject.getter();
      os_log_type_t v27 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v26, v27))
      {
        uint64_t v28 = (uint8_t *)swift_slowAlloc();
        uint64_t v43 = (void *)swift_slowAlloc();
        *(_DWORD *)uint64_t v28 = 136446210;
        uint64_t v29 = *(void *)&v25[OBJC_IVAR____TtC12searchpartyd28SecureLocationsStewieManager_stewieLogPrefix];
        unint64_t v30 = *(void *)&v25[OBJC_IVAR____TtC12searchpartyd28SecureLocationsStewieManager_stewieLogPrefix + 8];
        swift_bridgeObjectRetain();
        v44[0] = sub_1008FA0F0(v29, v30, (uint64_t *)&v43);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();

        swift_bridgeObjectRelease();
        _os_log_impl((void *)&_mh_execute_header, v26, v27, "%{public}s - _createEncryptedLocation - canPublishLocation is false.", v28, 0xCu);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
      }
      else
      {
      }
      type metadata accessor for SecureLocationsStewieError(0);
      v44[0] = 5;
      sub_1004A0BC8((uint64_t)_swiftEmptyArrayStorage);
      sub_10109A964(&qword_101638540, type metadata accessor for SecureLocationsStewieError);
      _BridgedStoredNSError.init(_:userInfo:)();
      uint64_t v38 = v43;
      uint64_t v39 = type metadata accessor for Transaction();
      __chkstk_darwin(v39);
      v41[-2] = v25;
      v41[-1] = v38;
      static Transaction.named<A>(_:with:)();

      return;
    }
LABEL_21:
    swift_once();
    goto LABEL_9;
  }
  uint64_t v16 = (uint64_t)&v1[OBJC_IVAR____TtC12searchpartyd28SecureLocationsStewieManager_location];
  swift_beginAccess();
  sub_10001D074(v16, (uint64_t)v4, &qword_101669310);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v6 + 48))(v4, 1, v5) == 1)
  {
    sub_10001DAB4((uint64_t)v4, &qword_101669310);
    if (qword_101637070 != -1) {
      swift_once();
    }
    uint64_t v17 = type metadata accessor for Logger();
    sub_100010324(v17, (uint64_t)qword_10170EC30);
    uint64_t v18 = v1;
    unint64_t v19 = Logger.logObject.getter();
    os_log_type_t v20 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v19, v20))
    {
      uint64_t v21 = (uint8_t *)swift_slowAlloc();
      v44[0] = swift_slowAlloc();
      *(_DWORD *)uint64_t v21 = 136446210;
      uint64_t v22 = *(void *)&v18[OBJC_IVAR____TtC12searchpartyd28SecureLocationsStewieManager_stewieLogPrefix];
      unint64_t v23 = *(void *)&v18[OBJC_IVAR____TtC12searchpartyd28SecureLocationsStewieManager_stewieLogPrefix + 8];
      swift_bridgeObjectRetain();
      uint64_t v42 = sub_1008FA0F0(v22, v23, v44);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();

      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v19, v20, "%{public}s - no location for publish", v21, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
    }
  }
  else
  {
    sub_1009F9AD4((uint64_t)v4, (uint64_t)v8);
    if (qword_101637070 != -1) {
      swift_once();
    }
    uint64_t v31 = type metadata accessor for Logger();
    sub_100010324(v31, (uint64_t)qword_10170EC30);
    unint64_t v32 = v1;
    uint64_t v33 = Logger.logObject.getter();
    os_log_type_t v34 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v33, v34))
    {
      uint64_t v35 = (uint8_t *)swift_slowAlloc();
      v44[0] = swift_slowAlloc();
      *(_DWORD *)uint64_t v35 = 136446210;
      v41[1] = v35 + 4;
      uint64_t v37 = *(void *)&v32[OBJC_IVAR____TtC12searchpartyd28SecureLocationsStewieManager_stewieLogPrefix];
      unint64_t v36 = *(void *)&v32[OBJC_IVAR____TtC12searchpartyd28SecureLocationsStewieManager_stewieLogPrefix + 8];
      swift_bridgeObjectRetain();
      uint64_t v42 = sub_1008FA0F0(v37, v36, v44);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();

      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v33, v34, "%{public}s - Creating encrypted payload", v35, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
    }
    uint64_t v40 = type metadata accessor for Transaction();
    __chkstk_darwin(v40);
    v41[-2] = v32;
    v41[-1] = v8;
    static Transaction.named<A>(_:with:)();
    sub_10109AA14((uint64_t)v8, (uint64_t (*)(void))type metadata accessor for SecureLocation);
  }
}

uint64_t sub_1010841B4(uint64_t a1, void *a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for SecureLocation();
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = *(void *)(v7 + 64);
  __chkstk_darwin(v6 - 8);
  uint64_t v9 = swift_allocObject();
  *(void *)(v9 + 16) = a1;
  *(void *)(v9 + 24) = a2;
  sub_10109A9AC(a3, (uint64_t)&v14 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0), (uint64_t (*)(void))type metadata accessor for SecureLocation);
  unint64_t v10 = (*(unsigned __int8 *)(v7 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80);
  uint64_t v11 = swift_allocObject();
  *(void *)(v11 + 16) = sub_10109A5A4;
  *(void *)(v11 + 24) = v9;
  sub_1009F9AD4((uint64_t)&v14 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0), v11 + v10);
  swift_retain();
  swift_retain();
  id v12 = a2;
  swift_retain();
  sub_100BA4560();
  swift_release();
  swift_release();
  return swift_release();
}

void sub_10108435C(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, void *a5)
{
  if (qword_101637070 != -1) {
    swift_once();
  }
  uint64_t v9 = type metadata accessor for Logger();
  sub_100010324(v9, (uint64_t)qword_10170EC30);
  id v10 = a5;
  sub_100037A38(a1, a2);
  uint64_t v11 = (char *)v10;
  sub_100037A38(a1, a2);
  id v12 = Logger.logObject.getter();
  os_log_type_t v13 = static os_log_type_t.default.getter();
  if (!os_log_type_enabled(v12, v13))
  {

    sub_100037A24(a1, a2);
    sub_100037A24(a1, a2);

    if (a3) {
      goto LABEL_5;
    }
LABEL_8:
    sub_101084858(a1, a2);
    goto LABEL_11;
  }
  uint64_t v14 = swift_slowAlloc();
  v30[0] = swift_slowAlloc();
  *(_DWORD *)uint64_t v14 = 136446466;
  uint64_t v16 = *(void *)&v11[OBJC_IVAR____TtC12searchpartyd28SecureLocationsStewieManager_stewieLogPrefix];
  unint64_t v15 = *(void *)&v11[OBJC_IVAR____TtC12searchpartyd28SecureLocationsStewieManager_stewieLogPrefix + 8];
  swift_bridgeObjectRetain();
  sub_1008FA0F0(v16, v15, v30);
  UnsafeMutableRawBufferPointer.copyMemory(from:)();

  swift_bridgeObjectRelease();
  *(_WORD *)(v14 + 12) = 2080;
  v29[1] = a2;
  sub_100037A38(a1, a2);
  sub_10000588C(&qword_101669360);
  uint64_t v17 = String.init<A>(describing:)();
  v29[0] = sub_1008FA0F0(v17, v18, v30);
  UnsafeMutableRawBufferPointer.copyMemory(from:)();
  swift_bridgeObjectRelease();
  sub_100037A24(a1, a2);
  sub_100037A24(a1, a2);
  _os_log_impl((void *)&_mh_execute_header, v12, v13, "%{public}s - got encryptedLocation %s", (uint8_t *)v14, 0x16u);
  swift_arrayDestroy();
  swift_slowDealloc();
  swift_slowDealloc();

  if (!a3) {
    goto LABEL_8;
  }
LABEL_5:
  swift_errorRetain();
  unint64_t v19 = v11;
  swift_errorRetain();
  os_log_type_t v20 = v19;
  swift_errorRetain();
  uint64_t v21 = Logger.logObject.getter();
  os_log_type_t v22 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v21, v22))
  {
    uint64_t v23 = swift_slowAlloc();
    v29[0] = swift_slowAlloc();
    *(_DWORD *)uint64_t v23 = 136446466;
    uint64_t v24 = *(void *)&v20[OBJC_IVAR____TtC12searchpartyd28SecureLocationsStewieManager_stewieLogPrefix];
    unint64_t v25 = *(void *)&v20[OBJC_IVAR____TtC12searchpartyd28SecureLocationsStewieManager_stewieLogPrefix + 8];
    swift_bridgeObjectRetain();
    v30[0] = sub_1008FA0F0(v24, v25, v29);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    swift_bridgeObjectRelease();
    *(_WORD *)(v23 + 12) = 2080;
    v30[0] = a3;
    swift_errorRetain();
    sub_10000588C(&qword_101638D40);
    uint64_t v26 = String.init<A>(describing:)();
    v30[0] = sub_1008FA0F0(v26, v27, v29);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl((void *)&_mh_execute_header, v21, v22, "%{public}s - error payload %s", (uint8_t *)v23, 0x16u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {

    swift_errorRelease();
    swift_errorRelease();
  }

  swift_errorRetain();
  sub_101089870(0, a3);
  swift_errorRelease();
  uint64_t v28 = type metadata accessor for Transaction();
  __chkstk_darwin(v28);
  static Transaction.named<A>(_:with:)();
  swift_errorRelease();
LABEL_11:
  Transaction.capture()();
}

uint64_t sub_101084858(uint64_t a1, unint64_t a2)
{
  uint64_t v5 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v8 = (char *)v17 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = type metadata accessor for DispatchQoS();
  uint64_t v10 = *(void *)(v9 - 8);
  __chkstk_darwin(v9);
  id v12 = (char *)v17 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17[0] = *(void *)&v2[OBJC_IVAR____TtC12searchpartyd28SecureLocationsStewieManager_clientQueue];
  os_log_type_t v13 = (void *)swift_allocObject();
  void v13[2] = v2;
  v13[3] = a1;
  v13[4] = a2;
  aBlock[4] = sub_10109A29C;
  aBlock[5] = v13;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_1004B5480;
  aBlock[3] = &unk_101605830;
  uint64_t v14 = _Block_copy(aBlock);
  unint64_t v15 = v2;
  sub_100037A38(a1, a2);
  static DispatchQoS.unspecified.getter();
  v17[1] = _swiftEmptyArrayStorage;
  sub_10109A964((unint64_t *)&qword_10163B7E0, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
  sub_10000588C((uint64_t *)&unk_10163F350);
  sub_100062734((unint64_t *)&qword_10163B7F0, (uint64_t *)&unk_10163F350);
  dispatch thunk of SetAlgebra.init<A>(_:)();
  OS_dispatch_queue.async(group:qos:flags:execute:)();
  _Block_release(v14);
  (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  (*(void (**)(char *, uint64_t))(v10 + 8))(v12, v9);
  return swift_release();
}

void sub_101084B30(char *a1, uint64_t a2, unint64_t a3)
{
  QueueSynchronizer.conditionalSync<A>(_:)();
  if (aBlock == 1)
  {
    if (a3 >> 60 == 15
      || (uint64_t v6 = *(void **)&a1[OBJC_IVAR____TtC12searchpartyd28SecureLocationsStewieManager_dataClient]) == 0)
    {
      if (qword_101637070 != -1) {
        swift_once();
      }
      uint64_t v16 = type metadata accessor for Logger();
      sub_100010324(v16, (uint64_t)qword_10170EC30);
      sub_100037A38(a2, a3);
      uint64_t v17 = a1;
      sub_100037A38(a2, a3);
      unint64_t v18 = v17;
      unint64_t v19 = Logger.logObject.getter();
      os_log_type_t v20 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v19, v20))
      {
        uint64_t v21 = swift_slowAlloc();
        v56[0] = swift_slowAlloc();
        *(_DWORD *)uint64_t v21 = 136446722;
        uint64_t v23 = *(void *)&v18[OBJC_IVAR____TtC12searchpartyd28SecureLocationsStewieManager_stewieLogPrefix];
        unint64_t v22 = *(void *)&v18[OBJC_IVAR____TtC12searchpartyd28SecureLocationsStewieManager_stewieLogPrefix + 8];
        swift_bridgeObjectRetain();
        sub_1008FA0F0(v23, v22, v56);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        *(_WORD *)(v21 + 12) = 2080;
        uint64_t v51 = a3;
        sub_100037A38(a2, a3);
        sub_10000588C(&qword_101669360);
        uint64_t v24 = String.init<A>(describing:)();
        id aBlock = (id)sub_1008FA0F0(v24, v25, v56);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        sub_100037A24(a2, a3);
        sub_100037A24(a2, a3);
        *(_WORD *)(v21 + 22) = 2080;
        id v26 = *(id *)&v18[OBJC_IVAR____TtC12searchpartyd28SecureLocationsStewieManager_dataClient];
        sub_10000588C(&qword_101669368);
        uint64_t v27 = String.init<A>(describing:)();
        id aBlock = (id)sub_1008FA0F0(v27, v28, v56);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();

        swift_bridgeObjectRelease();
        _os_log_impl((void *)&_mh_execute_header, v19, v20, "%{public}s - publishEncryptedLocation - encryptedData: %s dataClient: %s", (uint8_t *)v21, 0x20u);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
      }
      else
      {
        sub_100037A24(a2, a3);
        sub_100037A24(a2, a3);
      }
      type metadata accessor for SecureLocationsStewieError(0);
      v56[0] = 6;
      sub_1004A0BC8((uint64_t)_swiftEmptyArrayStorage);
      sub_10109A964(&qword_101638540, type metadata accessor for SecureLocationsStewieError);
      _BridgedStoredNSError.init(_:userInfo:)();
      uint64_t v31 = type metadata accessor for Transaction();
      __chkstk_darwin(v31);
      static Transaction.named<A>(_:with:)();
    }
    else
    {
      id v7 = objc_allocWithZone((Class)CTStewieFindMyMessage);
      sub_100037A38(a2, a3);
      sub_100037A38(a2, a3);
      id v8 = v6;
      id v32 = sub_101098FCC();
      sub_100037A24(a2, a3);
      if (qword_101637070 != -1) {
        swift_once();
      }
      uint64_t v33 = type metadata accessor for Logger();
      sub_100010324(v33, (uint64_t)qword_10170EC30);
      os_log_type_t v34 = a1;
      uint64_t v35 = Logger.logObject.getter();
      os_log_type_t v36 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v35, v36))
      {
        uint64_t v37 = (uint8_t *)swift_slowAlloc();
        id v49 = v8;
        id aBlock = (id)swift_slowAlloc();
        *(_DWORD *)uint64_t v37 = 136446210;
        uint64_t v38 = (uint64_t *)&v34[OBJC_IVAR____TtC12searchpartyd28SecureLocationsStewieManager_stewieLogPrefix];
        uint64_t v39 = v34;
        id v40 = v32;
        uint64_t v42 = *v38;
        unint64_t v41 = v38[1];
        swift_bridgeObjectRetain();
        uint64_t v43 = v42;
        id v32 = v40;
        v56[0] = sub_1008FA0F0(v43, v41, (uint64_t *)&aBlock);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();

        swift_bridgeObjectRelease();
        _os_log_impl((void *)&_mh_execute_header, v35, v36, "%{public}s - calling sendMessage", v37, 0xCu);
        swift_arrayDestroy();
        id v8 = v49;
        swift_slowDealloc();
        swift_slowDealloc();
      }
      else
      {
      }
      uint64_t v44 = swift_allocObject();
      swift_unknownObjectWeakInit();
      uint64_t v45 = swift_allocObject();
      *(void *)(v45 + 16) = v44;
      *(void *)(v45 + 24) = v8;
      uint64_t v54 = sub_10109A2B0;
      uint64_t v55 = v45;
      id aBlock = _NSConcreteStackBlock;
      uint64_t v51 = 1107296256;
      uint64_t v52 = sub_1010868B8;
      uint64_t v53 = &unk_101605880;
      uint64_t v46 = _Block_copy(&aBlock);
      id v47 = v8;
      id v48 = v32;
      swift_release();
      [v47 sendMessage:v48 completion:v46];
      sub_100037A24(a2, a3);

      _Block_release(v46);
    }
  }
  else
  {
    if (qword_101637070 != -1) {
      swift_once();
    }
    uint64_t v9 = type metadata accessor for Logger();
    sub_100010324(v9, (uint64_t)qword_10170EC30);
    uint64_t v10 = a1;
    uint64_t v11 = Logger.logObject.getter();
    os_log_type_t v12 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v11, v12))
    {
      os_log_type_t v13 = (uint8_t *)swift_slowAlloc();
      id aBlock = (id)swift_slowAlloc();
      *(_DWORD *)os_log_type_t v13 = 136446210;
      uint64_t v14 = *(void *)&v10[OBJC_IVAR____TtC12searchpartyd28SecureLocationsStewieManager_stewieLogPrefix];
      unint64_t v15 = *(void *)&v10[OBJC_IVAR____TtC12searchpartyd28SecureLocationsStewieManager_stewieLogPrefix + 8];
      swift_bridgeObjectRetain();
      v56[0] = sub_1008FA0F0(v14, v15, (uint64_t *)&aBlock);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();

      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v11, v12, "%{public}s - publishEncryptedLocation - canPublishLocation returned false", v13, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
    }
    type metadata accessor for SecureLocationsStewieError(0);
    v56[0] = 5;
    sub_1004A0BC8((uint64_t)_swiftEmptyArrayStorage);
    sub_10109A964(&qword_101638540, type metadata accessor for SecureLocationsStewieError);
    _BridgedStoredNSError.init(_:userInfo:)();
    id v29 = aBlock;
    uint64_t v30 = type metadata accessor for Transaction();
    __chkstk_darwin(v30);
    static Transaction.named<A>(_:with:)();
  }
}

void sub_101085790(void *a1, uint64_t a2, uint64_t a3, void *a4)
{
  uint64_t v6 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  uint64_t v9 = (char *)v30 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = type metadata accessor for DispatchQoS();
  uint64_t v11 = *(void *)(v10 - 8);
  __chkstk_darwin(v10);
  os_log_type_t v13 = (char *)v30 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_beginAccess();
  uint64_t Strong = swift_unknownObjectWeakLoadStrong();
  if (Strong)
  {
    unint64_t v15 = (void *)Strong;
    v30[1] = *(id *)(Strong + OBJC_IVAR____TtC12searchpartyd28SecureLocationsStewieManager_clientQueue);
    uint64_t v16 = (void *)swift_allocObject();
    v16[2] = v15;
    v16[3] = a1;
    v16[4] = a4;
    aBlock[4] = (uint64_t)sub_10109A300;
    aBlock[5] = (uint64_t)v16;
    aBlock[0] = (uint64_t)_NSConcreteStackBlock;
    aBlock[1] = 1107296256;
    aBlock[2] = (uint64_t)sub_1004B5480;
    aBlock[3] = (uint64_t)&unk_1016058D0;
    uint64_t v17 = _Block_copy(aBlock);
    id v18 = a1;
    v30[0] = v15;
    id v19 = a4;
    static DispatchQoS.unspecified.getter();
    id v32 = _swiftEmptyArrayStorage;
    sub_10109A964((unint64_t *)&qword_10163B7E0, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
    sub_10000588C((uint64_t *)&unk_10163F350);
    sub_100062734((unint64_t *)&qword_10163B7F0, (uint64_t *)&unk_10163F350);
    dispatch thunk of SetAlgebra.init<A>(_:)();
    OS_dispatch_queue.async(group:qos:flags:execute:)();
    _Block_release(v17);
    (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
    (*(void (**)(char *, uint64_t))(v11 + 8))(v13, v10);

    swift_release();
  }
  else
  {
    if (qword_101637070 != -1) {
      swift_once();
    }
    uint64_t v20 = type metadata accessor for Logger();
    sub_100010324(v20, (uint64_t)qword_10170EC30);
    id v21 = a1;
    unint64_t v22 = Logger.logObject.getter();
    os_log_type_t v23 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v22, v23))
    {
      uint64_t v24 = swift_slowAlloc();
      aBlock[0] = swift_slowAlloc();
      *(_DWORD *)uint64_t v24 = 136315394;
      id v32 = (void *)sub_1008FA0F0(0x3A656977657473, 0xE700000000000000, aBlock);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v24 + 12) = 2080;
      id v25 = v21;
      id v26 = [v25 description];
      uint64_t v27 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      unint64_t v29 = v28;

      id v32 = (void *)sub_1008FA0F0(v27, v29, aBlock);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();

      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v22, v23, "%s - got ack for sendMessage but no self %s", (uint8_t *)v24, 0x16u);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
    }
  }
}

uint64_t sub_101085C74(void *a1, void *a2, void *a3)
{
  id v87 = a3;
  uint64_t v5 = type metadata accessor for DispatchPredicate();
  uint64_t v84 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v88 = (void *)((char *)v76 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v80 = sub_10000588C(&qword_101669310);
  __chkstk_darwin(v80);
  uint64_t v89 = (uint64_t)v76 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = sub_10000588C((uint64_t *)&unk_10163AC90);
  __chkstk_darwin(v8 - 8);
  uint64_t v86 = (char *)v76 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = type metadata accessor for Date();
  uint64_t v85 = *(void *)(v10 - 8);
  uint64_t v11 = __chkstk_darwin(v10);
  os_log_type_t v13 = (char *)v76 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v11);
  unint64_t v15 = (char *)v76 - v14;
  if (qword_101637070 != -1) {
    swift_once();
  }
  uint64_t v16 = type metadata accessor for Logger();
  uint64_t v17 = sub_100010324(v16, (uint64_t)qword_10170EC30);
  id v18 = a1;
  id v19 = a2;
  uint64_t v20 = (char *)v18;
  id v21 = v19;
  uint64_t v83 = v17;
  unint64_t v22 = Logger.logObject.getter();
  os_log_type_t v23 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v22, v23))
  {
    uint64_t v24 = swift_slowAlloc();
    uint64_t v82 = v10;
    uint64_t v25 = v24;
    uint64_t v77 = swift_slowAlloc();
    v92[0] = v77;
    *(_DWORD *)uint64_t v25 = 136446466;
    long long v78 = v13;
    uint64_t v81 = v15;
    uint64_t v79 = (void (*)(char *, uint64_t))v5;
    uint64_t v26 = *(void *)&v20[OBJC_IVAR____TtC12searchpartyd28SecureLocationsStewieManager_stewieLogPrefix];
    unint64_t v27 = *(void *)&v20[OBJC_IVAR____TtC12searchpartyd28SecureLocationsStewieManager_stewieLogPrefix + 8];
    swift_bridgeObjectRetain();
    uint64_t v91 = sub_1008FA0F0(v26, v27, v92);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    swift_bridgeObjectRelease();
    *(_WORD *)(v25 + 12) = 2080;
    v76[1] = v25 + 14;
    id v28 = v21;
    unint64_t v29 = v20;
    id v30 = [v28 description];
    uint64_t v31 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    unint64_t v33 = v32;

    uint64_t v20 = v29;
    uint64_t v5 = (uint64_t)v79;
    uint64_t v91 = sub_1008FA0F0(v31, v33, v92);
    unint64_t v15 = v81;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    os_log_type_t v13 = v78;
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v22, v23, "%{public}s - sendMessage returned %s", (uint8_t *)v25, 0x16u);
    swift_arrayDestroy();
    swift_slowDealloc();
    uint64_t v10 = v82;
    swift_slowDealloc();
  }
  else
  {
  }
  os_log_type_t v34 = &v20[OBJC_IVAR____TtC12searchpartyd28SecureLocationsStewieManager_stewieServiceState];
  *(void *)os_log_type_t v34 = 0;
  v34[8] = 0;
  if ([v21 success])
  {
    id v35 = [objc_allocWithZone((Class)SPSecureLocationsStewiePublishResult) init];
    static Date.trustedNow.getter((uint64_t)v15);
    sub_1010892CC();
    Date.addingTimeInterval(_:)();
    Date.timeIntervalSince1970.getter();
    double v37 = v36;
    uint64_t v38 = v85;
    uint64_t v39 = *(void (**)(char *, uint64_t))(v85 + 8);
    id v87 = (id)(v85 + 8);
    uint64_t v79 = v39;
    v39(v13, v10);
    [v35 setNextAllowedPublish:v37];
    Class isa = Date._bridgeToObjectiveC()().super.isa;
    [v35 setLastPublished:isa];

    unint64_t v41 = (char *)v35;
    sub_101089870(v35, 0);
    long long v78 = v41;

    uint64_t v42 = (uint64_t)v86;
    (*(void (**)(char *, char *, uint64_t))(v38 + 16))(v86, v15, v10);
    (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v38 + 56))(v42, 0, 1, v10);
    sub_10107F460(v42);
    uint64_t v43 = (uint64_t)&v20[OBJC_IVAR____TtC12searchpartyd28SecureLocationsStewieManager_location];
    swift_beginAccess();
    uint64_t v44 = v89;
    sub_10001D074(v43, v89, &qword_101669310);
    uint64_t v45 = (uint64_t)&v20[OBJC_IVAR____TtC12searchpartyd28SecureLocationsStewieManager_lastPublishedLocation];
    swift_beginAccess();
    sub_100062604(v44, v45, &qword_101669310);
    swift_endAccess();
    uint64_t v46 = *(void **)&v20[OBJC_IVAR____TtC12searchpartyd28SecureLocationsStewieManager_clientQueue];
    id v47 = v88;
    void *v88 = v46;
    uint64_t v48 = v84;
    (*(void (**)(void *, void, uint64_t))(v84 + 104))(v47, enum case for DispatchPredicate.onQueue(_:), v5);
    id v49 = v46;
    LOBYTE(v46) = _dispatchPreconditionTest(_:)();
    (*(void (**)(void *, uint64_t))(v48 + 8))(v47, v5);
    if (v46)
    {
      *(void *)os_log_type_t v34 = 6;
      v34[8] = 0;
      sub_10108F1FC();
      sub_101087744();
      *(void *)&v20[OBJC_IVAR____TtC12searchpartyd28SecureLocationsStewieManager_cntProactiveAlerts] = 1;
      if (qword_101637118 == -1)
      {
LABEL_9:
        sub_101098E30(0x8000);
        sub_101090DC8();
        uint64_t v50 = v20;
        uint64_t v51 = Logger.logObject.getter();
        os_log_type_t v52 = static os_log_type_t.default.getter();
        if (os_log_type_enabled(v51, v52))
        {
          uint64_t v53 = swift_slowAlloc();
          uint64_t v82 = v10;
          uint64_t v54 = v53;
          uint64_t v88 = (void *)swift_slowAlloc();
          v92[0] = (uint64_t)v88;
          *(_DWORD *)uint64_t v54 = 136446466;
          uint64_t v81 = v15;
          uint64_t v55 = v43;
          uint64_t v56 = *(void *)&v50[OBJC_IVAR____TtC12searchpartyd28SecureLocationsStewieManager_stewieLogPrefix];
          unint64_t v57 = *(void *)&v50[OBJC_IVAR____TtC12searchpartyd28SecureLocationsStewieManager_stewieLogPrefix + 8];
          swift_bridgeObjectRetain();
          uint64_t v90 = sub_1008FA0F0(v56, v57, v92);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          uint64_t v58 = v89;
          swift_bridgeObjectRelease();
          *(_WORD *)(v54 + 12) = 2080;
          sub_10001D074(v55, v58, &qword_101669310);
          uint64_t v59 = String.init<A>(describing:)();
          uint64_t v90 = sub_1008FA0F0(v59, v60, v92);
          unint64_t v15 = v81;
          UnsafeMutableRawBufferPointer.copyMemory(from:)();

          swift_bridgeObjectRelease();
          _os_log_impl((void *)&_mh_execute_header, v51, v52, "%{public}s - successfully published %s", (uint8_t *)v54, 0x16u);
          swift_arrayDestroy();
          swift_slowDealloc();
          uint64_t v10 = v82;
          swift_slowDealloc();
        }
        else
        {
        }
        if (qword_101637440 != -1) {
          swift_once();
        }
        type metadata accessor for Transaction();
        uint64_t v69 = swift_allocObject();
        *(unsigned char *)(v69 + 16) = 1;
        *(void *)(v69 + 24) = 0;
        *(void *)(v69 + 32) = 0;
        swift_retain();
        static Transaction.asyncTask(name:block:)();

        swift_release();
        swift_release();
        v79(v15, v10);
        goto LABEL_21;
      }
    }
    else
    {
      __break(1u);
    }
    swift_once();
    goto LABEL_9;
  }
  char v61 = v21;
  type metadata accessor for SecureLocationsStewieError(0);
  uint64_t v91 = 6;
  sub_1004A0BC8((uint64_t)_swiftEmptyArrayStorage);
  sub_10109A964(&qword_101638540, type metadata accessor for SecureLocationsStewieError);
  _BridgedStoredNSError.init(_:userInfo:)();
  Class v62 = (void *)v92[0];
  sub_101089870(0, v92[0]);

  id v63 = [v87 getState];
  sub_10108DF14(v63, 1);

  if (qword_101637440 != -1) {
    swift_once();
  }
  swift_retain();
  id v64 = [v61 error];
  if (v64)
  {
    int v65 = v64;
    swift_getErrorValue();
    uint64_t v66 = Error.localizedDescription.getter();
    uint64_t v68 = v67;
  }
  else
  {
    uint64_t v66 = 0;
    uint64_t v68 = 0;
  }
  type metadata accessor for Transaction();
  uint64_t v70 = swift_allocObject();
  *(unsigned char *)(v70 + 16) = 0;
  *(void *)(v70 + 24) = v66;
  *(void *)(v70 + 32) = v68;
  swift_bridgeObjectRetain();
  static Transaction.asyncTask(name:block:)();
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
LABEL_21:
  uint64_t v71 = type metadata accessor for SecureLocation();
  uint64_t v72 = v89;
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v71 - 8) + 56))(v89, 1, 1, v71);
  uint64_t v73 = (uint64_t)&v20[OBJC_IVAR____TtC12searchpartyd28SecureLocationsStewieManager_location];
  swift_beginAccess();
  sub_100062604(v72, v73, &qword_101669310);
  swift_endAccess();
  uint64_t v74 = type metadata accessor for Transaction();
  __chkstk_darwin(v74);
  v76[-2] = v20;
  v76[-1] = 0;
  return static Transaction.named<A>(_:with:)();
}

uint64_t sub_1010868B8(uint64_t a1, void *a2, uint64_t a3)
{
  uint64_t v4 = *(void (**)(void))(a1 + 32);
  if (a3) {
    static Dictionary._unconditionallyBridgeFromObjectiveC(_:)();
  }
  swift_retain();
  id v5 = a2;
  v4();
  swift_release();

  return swift_bridgeObjectRelease();
}

void sub_101086958()
{
  if (qword_101637070 != -1) {
    swift_once();
  }
  uint64_t v1 = type metadata accessor for Logger();
  sub_100010324(v1, (uint64_t)qword_10170EC30);
  uint64_t v2 = v0;
  uint64_t v3 = Logger.logObject.getter();
  os_log_type_t v4 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v3, v4))
  {
    id v5 = (uint8_t *)swift_slowAlloc();
    uint64_t v11 = swift_slowAlloc();
    *(_DWORD *)id v5 = 136446210;
    uint64_t v6 = *(void *)&v2[OBJC_IVAR____TtC12searchpartyd28SecureLocationsStewieManager_stewieLogPrefix];
    unint64_t v7 = *(void *)&v2[OBJC_IVAR____TtC12searchpartyd28SecureLocationsStewieManager_stewieLogPrefix + 8];
    swift_bridgeObjectRetain();
    sub_1008FA0F0(v6, v7, &v11);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v3, v4, "%{public}s - setupPublishThrottleTimer", v5, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
  }
  if (qword_101637400 != -1) {
    swift_once();
  }
  uint64_t v8 = *(void *)&v2[OBJC_IVAR____TtC12searchpartyd28SecureLocationsStewieManager_liteLocationThrottleAlarm];
  unint64_t v9 = *(void *)&v2[OBJC_IVAR____TtC12searchpartyd28SecureLocationsStewieManager_liteLocationThrottleAlarm + 8];
  uint64_t v10 = swift_allocObject();
  swift_unknownObjectWeakInit();
  swift_retain();
  sub_101087220(v8, v9, (uint64_t)sub_10109A108, v10);
  swift_release_n();
  sub_1010874D8();
}

void sub_101086BB4(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  id v5 = (char *)v14 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = type metadata accessor for DispatchQoS();
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  unint64_t v9 = (char *)v14 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_beginAccess();
  uint64_t Strong = swift_unknownObjectWeakLoadStrong();
  if (Strong)
  {
    uint64_t v11 = (void *)Strong;
    v14[1] = *(id *)(Strong + OBJC_IVAR____TtC12searchpartyd28SecureLocationsStewieManager_clientQueue);
    uint64_t v12 = swift_allocObject();
    *(void *)(v12 + 16) = v11;
    *(void *)(v12 + 24) = a1;
    aBlock[4] = sub_10109A244;
    aBlock[5] = v12;
    aBlock[0] = _NSConcreteStackBlock;
    aBlock[1] = 1107296256;
    aBlock[2] = sub_1004B5480;
    aBlock[3] = &unk_1016057E0;
    os_log_type_t v13 = _Block_copy(aBlock);
    v14[0] = v11;
    swift_retain();
    static DispatchQoS.unspecified.getter();
    uint64_t v14[2] = _swiftEmptyArrayStorage;
    sub_10109A964((unint64_t *)&qword_10163B7E0, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
    sub_10000588C((uint64_t *)&unk_10163F350);
    sub_100062734((unint64_t *)&qword_10163B7F0, (uint64_t *)&unk_10163F350);
    dispatch thunk of SetAlgebra.init<A>(_:)();
    OS_dispatch_queue.async(group:qos:flags:execute:)();
    _Block_release(v13);
    (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
    (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);

    swift_release();
  }
  else
  {
    Transaction.capture()();
  }
}

void sub_101086EC4(void *a1)
{
  if (qword_101637070 != -1) {
    swift_once();
  }
  uint64_t v2 = type metadata accessor for Logger();
  sub_100010324(v2, (uint64_t)qword_10170EC30);
  uint64_t v3 = a1;
  uint64_t v4 = Logger.logObject.getter();
  os_log_type_t v5 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v4, v5))
  {
    uint64_t v6 = (uint8_t *)swift_slowAlloc();
    uint64_t v19 = swift_slowAlloc();
    *(_DWORD *)uint64_t v6 = 136446210;
    uint64_t v8 = *(void *)&v3[OBJC_IVAR____TtC12searchpartyd28SecureLocationsStewieManager_stewieLogPrefix];
    unint64_t v7 = *(void *)&v3[OBJC_IVAR____TtC12searchpartyd28SecureLocationsStewieManager_stewieLogPrefix + 8];
    swift_bridgeObjectRetain();
    sub_1008FA0F0(v8, v7, &v19);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v4, v5, "%{public}s - throttle period complete", v6, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
  }
  unint64_t v9 = &v3[OBJC_IVAR____TtC12searchpartyd28SecureLocationsStewieManager_stewieServiceState];
  if ((v3[OBJC_IVAR____TtC12searchpartyd28SecureLocationsStewieManager_stewieServiceState + 8] & 1) != 0
    || *(void *)v9 != 6)
  {
    os_log_type_t v13 = v3;
    uint64_t v14 = Logger.logObject.getter();
    os_log_type_t v15 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v14, v15))
    {
      uint64_t v16 = (uint8_t *)swift_slowAlloc();
      uint64_t v19 = swift_slowAlloc();
      *(_DWORD *)uint64_t v16 = 136446210;
      uint64_t v17 = *(void *)&v13[OBJC_IVAR____TtC12searchpartyd28SecureLocationsStewieManager_stewieLogPrefix];
      unint64_t v18 = *(void *)&v13[OBJC_IVAR____TtC12searchpartyd28SecureLocationsStewieManager_stewieLogPrefix + 8];
      swift_bridgeObjectRetain();
      sub_1008FA0F0(v17, v18, &v19);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();

      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v14, v15, "%{public}s - completed throttle deadline but not in throttled state. doing nothing", v16, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
    }
  }
  else
  {
    *(void *)unint64_t v9 = 0;
    v9[8] = 0;
    uint64_t v10 = *(void **)&v3[OBJC_IVAR____TtC12searchpartyd28SecureLocationsStewieManager_dataClient];
    if (v10)
    {
      id v11 = v10;
      id v12 = [v11 getState];
      sub_10108DF14(v12, 1);
    }
  }
  Transaction.capture()();
}

uint64_t sub_101087220(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4)
{
  os_log_type_t v8 = static os_log_type_t.default.getter();
  if (qword_1016373F8 != -1) {
    swift_once();
  }
  unint64_t v9 = qword_1016690A0;
  if (os_log_type_enabled((os_log_t)qword_1016690A0, v8))
  {
    swift_bridgeObjectRetain_n();
    uint64_t v17 = a3;
    uint64_t v10 = a1;
    id v11 = (uint8_t *)swift_slowAlloc();
    uint64_t v18 = swift_slowAlloc();
    *(_DWORD *)id v11 = 136315138;
    swift_bridgeObjectRetain();
    sub_1008FA0F0(v10, a2, &v18);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    _os_log_impl((void *)&_mh_execute_header, v9, v8, "Registering event for: %s", v11, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    a1 = v10;
    a3 = v17;
    swift_slowDealloc();
  }
  uint64_t v12 = swift_allocObject();
  *(void *)(v12 + 16) = a3;
  *(void *)(v12 + 24) = a4;
  swift_bridgeObjectRetain();
  swift_retain();
  sub_10000588C(&qword_101669358);
  OSAllocatedUnfairLock.callAsFunction<A>(_:)();
  uint64_t v13 = v18;
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v18 = v13;
  sub_10016F7B4((uint64_t)sub_10109A1D8, v12, a1, a2, isUniquelyReferenced_nonNull_native);
  swift_bridgeObjectRelease();
  uint64_t v15 = swift_bridgeObjectRelease();
  __chkstk_darwin(v15);
  OSAllocatedUnfairLock.callAsFunction<A>(_:)();
  return swift_bridgeObjectRelease();
}

void sub_1010874D8()
{
  uint64_t v1 = *v0;
  os_log_type_t v2 = static os_log_type_t.default.getter();
  if (qword_1016373F8 != -1) {
    swift_once();
  }
  uint64_t v3 = qword_1016690A0;
  os_log_type_t v4 = v2;
  if (os_log_type_enabled((os_log_t)qword_1016690A0, v2))
  {
    swift_retain();
    os_log_type_t v5 = (uint8_t *)swift_slowAlloc();
    aBlock[0] = swift_slowAlloc();
    *(_DWORD *)os_log_type_t v5 = 136315138;
    uint64_t v6 = v0[2];
    unint64_t v7 = v0[3];
    swift_bridgeObjectRetain();
    sub_1008FA0F0(v6, v7, aBlock);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release();
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v3, v4, "XPC Event Stream will be set to run %s", v5, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  uint64_t v8 = swift_allocObject();
  *(void *)(v8 + 16) = v0;
  *(void *)(v8 + 24) = v1;
  aBlock[4] = (uint64_t)sub_10109A148;
  aBlock[5] = v8;
  aBlock[0] = (uint64_t)_NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = (uint64_t)sub_10107F1F0;
  aBlock[3] = (uint64_t)&unk_101605740;
  unint64_t v9 = _Block_copy(aBlock);
  swift_retain();
  swift_release();
  uint64_t v10 = String.utf8CString.getter();
  xpc_set_event_stream_handler((const char *)(v10 + 32), 0, v9);
  swift_release();
  _Block_release(v9);
}

uint64_t sub_101087744()
{
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for Date();
  uint64_t v40 = *(void *)(v2 - 8);
  uint64_t v3 = __chkstk_darwin(v2);
  uint64_t v39 = (uint64_t)v36 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = __chkstk_darwin(v3);
  unint64_t v7 = (char *)v36 - v6;
  __chkstk_darwin(v5);
  unint64_t v9 = (char *)v36 - v8;
  uint64_t v10 = type metadata accessor for DispatchPredicate();
  uint64_t v11 = *(void *)(v10 - 8);
  __chkstk_darwin(v10);
  uint64_t v13 = (void *)((char *)v36 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v14 = *(void **)&v1[OBJC_IVAR____TtC12searchpartyd28SecureLocationsStewieManager_clientQueue];
  *uint64_t v13 = v14;
  (*(void (**)(void *, void, uint64_t))(v11 + 104))(v13, enum case for DispatchPredicate.onQueue(_:), v10);
  id v15 = v14;
  char v16 = _dispatchPreconditionTest(_:)();
  (*(void (**)(void *, uint64_t))(v11 + 8))(v13, v10);
  if (v16)
  {
    sub_1010892CC();
    Date.addingTimeInterval(_:)();
    if (qword_101637070 == -1) {
      goto LABEL_3;
    }
  }
  else
  {
    __break(1u);
  }
  swift_once();
LABEL_3:
  uint64_t v17 = type metadata accessor for Logger();
  sub_100010324(v17, (uint64_t)qword_10170EC30);
  uint64_t v18 = v40;
  uint64_t v19 = v7;
  (*(void (**)(char *, char *, uint64_t))(v40 + 16))(v7, v9, v2);
  uint64_t v20 = v1;
  id v21 = Logger.logObject.getter();
  os_log_type_t v22 = static os_log_type_t.default.getter();
  int v23 = v22;
  if (os_log_type_enabled(v21, v22))
  {
    uint64_t v24 = swift_slowAlloc();
    uint64_t v38 = swift_slowAlloc();
    uint64_t v42 = v38;
    *(_DWORD *)uint64_t v24 = 136446466;
    int v37 = v23;
    uint64_t v26 = *(void *)&v20[OBJC_IVAR____TtC12searchpartyd28SecureLocationsStewieManager_stewieLogPrefix];
    unint64_t v25 = *(void *)&v20[OBJC_IVAR____TtC12searchpartyd28SecureLocationsStewieManager_stewieLogPrefix + 8];
    swift_bridgeObjectRetain();
    uint64_t v41 = sub_1008FA0F0(v26, v25, &v42);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    swift_bridgeObjectRelease();
    *(_WORD *)(v24 + 12) = 2048;
    v36[1] = v24 + 14;
    uint64_t v27 = v2;
    id v28 = v9;
    unint64_t v29 = v20;
    uint64_t v30 = v39;
    static Date.trustedNow.getter(v39);
    Date.timeIntervalSince(_:)();
    uint64_t v32 = v31;
    unint64_t v33 = *(void (**)(uint64_t, uint64_t))(v40 + 8);
    uint64_t v34 = v30;
    uint64_t v20 = v29;
    unint64_t v9 = v28;
    uint64_t v2 = v27;
    v33(v34, v27);
    uint64_t v41 = v32;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    v33((uint64_t)v19, v27);
    _os_log_impl((void *)&_mh_execute_header, v21, (os_log_type_t)v37, "%{public}s - entering throttle - remaining period %f", (uint8_t *)v24, 0x16u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {

    unint64_t v33 = *(void (**)(uint64_t, uint64_t))(v18 + 8);
    v33((uint64_t)v19, v2);
  }

  if (qword_101637400 != -1) {
    swift_once();
  }
  sub_101087BF0(*(void *)&v20[OBJC_IVAR____TtC12searchpartyd28SecureLocationsStewieManager_liteLocationThrottleAlarm], *(void *)&v20[OBJC_IVAR____TtC12searchpartyd28SecureLocationsStewieManager_liteLocationThrottleAlarm + 8], (uint64_t)v9);
  return ((uint64_t (*)(char *, uint64_t))v33)(v9, v2);
}

uint64_t sub_101087BF0(uint64_t a1, unint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for Date();
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  unint64_t v9 = (char *)&v21 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_101094144(a1, a2);
  os_log_type_t v10 = static os_log_type_t.default.getter();
  if (qword_1016373F8 != -1) {
    swift_once();
  }
  uint64_t v11 = qword_1016690A0;
  (*(void (**)(char *, uint64_t, uint64_t))(v7 + 16))(v9, a3, v6);
  if (os_log_type_enabled(v11, v10))
  {
    swift_bridgeObjectRetain_n();
    uint64_t v12 = swift_slowAlloc();
    os_log_t v21 = v11;
    uint64_t v13 = v12;
    uint64_t v22 = swift_slowAlloc();
    uint64_t v26 = v22;
    *(_DWORD *)uint64_t v13 = 136315394;
    swift_bridgeObjectRetain();
    uint64_t v14 = sub_1008FA0F0(a1, a2, &v26);
    uint64_t v24 = a1;
    uint64_t v25 = v14;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    *(_WORD *)(v13 + 12) = 2080;
    unint64_t v23 = a2;
    sub_10109A964((unint64_t *)&qword_101638DA0, (void (*)(uint64_t))&type metadata accessor for Date);
    uint64_t v15 = dispatch thunk of CustomStringConvertible.description.getter();
    uint64_t v25 = sub_1008FA0F0(v15, v16, &v26);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
    _os_log_impl((void *)&_mh_execute_header, v21, v10, "Scheduling alarm: %s for %s", (uint8_t *)v13, 0x16u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
  }
  xpc_object_t v17 = xpc_dictionary_create(0, 0, 0);
  uint64_t result = Date.timeIntervalSince1970.getter();
  if ((~*(void *)&v19 & 0x7FF0000000000000) == 0)
  {
    __break(1u);
    goto LABEL_12;
  }
  if (v19 <= -9.22337204e18)
  {
LABEL_12:
    __break(1u);
    goto LABEL_13;
  }
  if (v19 >= 9.22337204e18)
  {
LABEL_13:
    __break(1u);
    goto LABEL_14;
  }
  int64_t v20 = 1000000000 * (uint64_t)v19;
  if ((unsigned __int128)((uint64_t)v19 * (__int128)1000000000) >> 64 == v20 >> 63)
  {
    xpc_dictionary_set_date(v17, "Date", v20);
    String.utf8CString.getter();
    String.utf8CString.getter();
    swift_unknownObjectRetain();
    xpc_set_event();
    swift_unknownObjectRelease_n();
    swift_release();
    return swift_release();
  }
LABEL_14:
  __break(1u);
  return result;
}

uint64_t sub_101087FD0(void *a1)
{
  uint64_t v3 = sub_10000588C((uint64_t *)&unk_10163AC90);
  __chkstk_darwin(v3 - 8);
  uint64_t v5 = (char *)&v40 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = type metadata accessor for Date();
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = __chkstk_darwin(v6);
  os_log_type_t v10 = (char *)&v40 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8);
  uint64_t v12 = (char *)&v40 - v11;
  id v13 = [self standardUserDefaults];
  NSString v14 = String._bridgeToObjectiveC()();
  [v13 doubleForKey:v14];
  double v16 = v15;

  if (v16 <= 0.0)
  {
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v7 + 56))(v5, 1, 1, v6);
    return sub_10001DAB4((uint64_t)v5, (uint64_t *)&unk_10163AC90);
  }
  Date.init(timeIntervalSince1970:)();
  (*(void (**)(char *, void, uint64_t, uint64_t))(v7 + 56))(v5, 0, 1, v6);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v7 + 48))(v5, 1, v6) == 1) {
    return sub_10001DAB4((uint64_t)v5, (uint64_t *)&unk_10163AC90);
  }
  (*(void (**)(char *, char *, uint64_t))(v7 + 32))(v12, v5, v6);
  static Date.trustedNow.getter((uint64_t)v10);
  Date.timeIntervalSince(_:)();
  double v18 = v17;
  double v19 = sub_1010892CC();
  if (v18 >= v19)
  {
    if (qword_101637070 != -1) {
      swift_once();
    }
    uint64_t v31 = type metadata accessor for Logger();
    sub_100010324(v31, (uint64_t)qword_10170EC30);
    uint64_t v32 = a1;
    unint64_t v33 = Logger.logObject.getter();
    os_log_type_t v34 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v33, v34))
    {
      uint64_t v44 = v1;
      id v35 = (uint8_t *)swift_slowAlloc();
      uint64_t v43 = swift_slowAlloc();
      uint64_t v46 = v43;
      uint64_t v42 = v35;
      *(_DWORD *)id v35 = 136446210;
      uint64_t v41 = v35 + 4;
      uint64_t v36 = *(void *)&v32[OBJC_IVAR____TtC12searchpartyd28SecureLocationsStewieManager_stewieLogPrefix];
      unint64_t v37 = *(void *)&v32[OBJC_IVAR____TtC12searchpartyd28SecureLocationsStewieManager_stewieLogPrefix + 8];
      swift_bridgeObjectRetain();
      uint64_t v45 = sub_1008FA0F0(v36, v37, &v46);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();

      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v33, v34, "%{public}s - device not in throttle period", v42, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
    }
  }
  else
  {
    uint64_t v20 = *(void *)&v19;
    if (qword_101637070 != -1) {
      swift_once();
    }
    uint64_t v21 = type metadata accessor for Logger();
    sub_100010324(v21, (uint64_t)qword_10170EC30);
    uint64_t v22 = a1;
    unint64_t v23 = Logger.logObject.getter();
    os_log_type_t v24 = static os_log_type_t.default.getter();
    int v25 = v24;
    if (os_log_type_enabled(v23, v24))
    {
      uint64_t v26 = swift_slowAlloc();
      LODWORD(v42) = v25;
      uint64_t v27 = v26;
      uint64_t v43 = swift_slowAlloc();
      uint64_t v46 = v43;
      *(_DWORD *)uint64_t v27 = 136446722;
      uint64_t v41 = (uint8_t *)(v27 + 4);
      uint64_t v44 = v1;
      uint64_t v28 = *(void *)&v22[OBJC_IVAR____TtC12searchpartyd28SecureLocationsStewieManager_stewieLogPrefix];
      unint64_t v29 = *(void *)&v22[OBJC_IVAR____TtC12searchpartyd28SecureLocationsStewieManager_stewieLogPrefix + 8];
      swift_bridgeObjectRetain();
      uint64_t v45 = sub_1008FA0F0(v28, v29, &v46);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();

      swift_bridgeObjectRelease();
      *(_WORD *)(v27 + 12) = 2048;
      uint64_t v45 = *(void *)&v18;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v27 + 22) = 2048;
      uint64_t v45 = v20;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      _os_log_impl((void *)&_mh_execute_header, v23, (os_log_type_t)v42, "%{public}s - still in throttle period %f. configuredThrottle %f", (uint8_t *)v27, 0x20u);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
    }
    uint64_t v38 = &v22[OBJC_IVAR____TtC12searchpartyd28SecureLocationsStewieManager_stewieServiceState];
    *(void *)uint64_t v38 = 6;
    v38[8] = 0;
    sub_101087744();
  }
  uint64_t v39 = *(void (**)(char *, uint64_t))(v7 + 8);
  v39(v10, v6);
  return ((uint64_t (*)(char *, uint64_t))v39)(v12, v6);
}

void sub_1010885CC()
{
  uint64_t v2 = v0;
  uint64_t v3 = type metadata accessor for DispatchPredicate();
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  uint64_t v6 = (void *)((char *)v27 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v7 = *(void **)&v2[OBJC_IVAR____TtC12searchpartyd28SecureLocationsStewieManager_clientQueue];
  *uint64_t v6 = v7;
  (*(void (**)(void *, void, uint64_t))(v4 + 104))(v6, enum case for DispatchPredicate.onQueue(_:), v3);
  id v8 = v7;
  LOBYTE(v7) = _dispatchPreconditionTest(_:)();
  (*(void (**)(void *, uint64_t))(v4 + 8))(v6, v3);
  if ((v7 & 1) == 0)
  {
    __break(1u);
LABEL_15:
    swift_once();
    goto LABEL_5;
  }
  uint64_t v1 = &v2[OBJC_IVAR____TtC12searchpartyd28SecureLocationsStewieManager_stewieServiceState];
  if ((v2[OBJC_IVAR____TtC12searchpartyd28SecureLocationsStewieManager_stewieServiceState + 8] & 1) != 0
    || *(void *)v1 != 5)
  {
    return;
  }
  if (qword_101637070 != -1) {
    goto LABEL_15;
  }
LABEL_5:
  uint64_t v9 = type metadata accessor for Logger();
  uint64_t v10 = sub_100010324(v9, (uint64_t)qword_10170EC30);
  uint64_t v11 = v2;
  uint64_t v12 = Logger.logObject.getter();
  os_log_type_t v13 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v12, v13))
  {
    uint64_t v14 = swift_slowAlloc();
    v27[1] = v10;
    double v15 = (uint8_t *)v14;
    uint64_t v29 = swift_slowAlloc();
    *(_DWORD *)double v15 = 136446210;
    uint64_t v16 = *(void *)&v11[OBJC_IVAR____TtC12searchpartyd28SecureLocationsStewieManager_stewieLogPrefix];
    unint64_t v17 = *(void *)&v11[OBJC_IVAR____TtC12searchpartyd28SecureLocationsStewieManager_stewieLogPrefix + 8];
    swift_bridgeObjectRetain();
    uint64_t v28 = sub_1008FA0F0(v16, v17, &v29);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v12, v13, "%{public}s - resetStateIfPublishInProgress - will reset", v15, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
  }
  *(void *)uint64_t v1 = 0;
  v1[8] = 0;
  double v18 = *(void **)&v11[OBJC_IVAR____TtC12searchpartyd28SecureLocationsStewieManager_dataClient];
  if (v18)
  {
    id v19 = v18;
    id v20 = [v19 getState];
    sub_10108DF14(v20, 1);
  }
  else
  {
    uint64_t v21 = v11;
    uint64_t v22 = Logger.logObject.getter();
    os_log_type_t v23 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v22, v23))
    {
      os_log_type_t v24 = (uint8_t *)swift_slowAlloc();
      uint64_t v29 = swift_slowAlloc();
      *(_DWORD *)os_log_type_t v24 = 136446210;
      uint64_t v25 = *(void *)&v21[OBJC_IVAR____TtC12searchpartyd28SecureLocationsStewieManager_stewieLogPrefix];
      unint64_t v26 = *(void *)&v21[OBJC_IVAR____TtC12searchpartyd28SecureLocationsStewieManager_stewieLogPrefix + 8];
      swift_bridgeObjectRetain();
      uint64_t v28 = sub_1008FA0F0(v25, v26, &v29);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();

      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v22, v23, "%{public}s - resetStateIfPublishInProgress - No data client available", v24, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
    }
  }
}

void sub_1010889F4(char *a1@<X0>, char a2@<W1>, uint8_t *a3@<X8>)
{
  uint64_t My = type metadata accessor for Feature.FindMy();
  *((void *)&v40 + 1) = My;
  *(void *)&long long v41 = sub_10109A964((unint64_t *)&qword_101653E00, (void (*)(uint64_t))&type metadata accessor for Feature.FindMy);
  id v8 = sub_10001D958((uint64_t *)&v39);
  (*(void (**)(uint64_t *, void, uint64_t))(*(void *)(My - 8) + 104))(v8, enum case for Feature.FindMy.fmNiftyCurve(_:), My);
  LOBYTE(My) = isFeatureEnabled(_:)();
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)&v39);
  if ((My & 1) == 0) {
    goto LABEL_12;
  }
  if (qword_101637080 != -1) {
    swift_once();
  }
  swift_retain();
  OS_dispatch_queue.sync<A>(execute:)();
  swift_release();
  long long v49 = v38[10];
  long long v50 = v38[11];
  long long v51 = v38[12];
  long long v45 = v38[6];
  long long v46 = v38[7];
  long long v47 = v38[8];
  long long v48 = v38[9];
  long long v41 = v38[2];
  long long v42 = v38[3];
  long long v43 = v38[4];
  long long v44 = v38[5];
  long long v39 = v38[0];
  long long v40 = v38[1];
  sub_100551984((uint64_t)&v39);
  if (v44 != 1
    || (a1[OBJC_IVAR____TtC12searchpartyd28SecureLocationsStewieManager_isStewieSupported] & 1) == 0)
  {
LABEL_12:
    if (qword_101637070 != -1) {
      swift_once();
    }
    uint64_t v21 = type metadata accessor for Logger();
    sub_100010324(v21, (uint64_t)qword_10170EC30);
    uint64_t v12 = a1;
    os_log_type_t v13 = Logger.logObject.getter();
    os_log_type_t v22 = static os_log_type_t.default.getter();
    if (!os_log_type_enabled(v13, v22)) {
      goto LABEL_35;
    }
    os_log_type_t v23 = (uint8_t *)swift_slowAlloc();
    *(void *)&long long v39 = swift_slowAlloc();
    os_log_type_t v52 = v3;
    *(_DWORD *)os_log_type_t v23 = 136446210;
    uint64_t v24 = *(void *)&v12[OBJC_IVAR____TtC12searchpartyd28SecureLocationsStewieManager_stewieLogPrefix];
    unint64_t v25 = *(void *)&v12[OBJC_IVAR____TtC12searchpartyd28SecureLocationsStewieManager_stewieLogPrefix + 8];
    swift_bridgeObjectRetain();
    *(void *)&v38[0] = sub_1008FA0F0(v24, v25, (uint64_t *)&v39);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    swift_bridgeObjectRelease();
    unint64_t v26 = "%{public}s - canPublishLocation - feature disabled";
    goto LABEL_16;
  }
  swift_retain();
  char v9 = sub_100D0C0B0();
  swift_release();
  if ((v9 & 1) == 0)
  {
    if (qword_101637070 != -1) {
      swift_once();
    }
    uint64_t v27 = type metadata accessor for Logger();
    sub_100010324(v27, (uint64_t)qword_10170EC30);
    uint64_t v12 = a1;
    os_log_type_t v13 = Logger.logObject.getter();
    os_log_type_t v22 = static os_log_type_t.default.getter();
    if (!os_log_type_enabled(v13, v22)) {
      goto LABEL_35;
    }
    os_log_type_t v23 = (uint8_t *)swift_slowAlloc();
    *(void *)&v38[0] = swift_slowAlloc();
    *(_DWORD *)os_log_type_t v23 = 136446210;
    os_log_type_t v52 = v23 + 4;
    uint64_t v28 = *(void *)&v12[OBJC_IVAR____TtC12searchpartyd28SecureLocationsStewieManager_stewieLogPrefix];
    unint64_t v29 = *(void *)&v12[OBJC_IVAR____TtC12searchpartyd28SecureLocationsStewieManager_stewieLogPrefix + 8];
    swift_bridgeObjectRetain();
    uint64_t v37 = sub_1008FA0F0(v28, v29, (uint64_t *)v38);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    swift_bridgeObjectRelease();
    unint64_t v26 = "%{public}s - canPublishLocation - not a location publishing device. ";
LABEL_16:
    _os_log_impl((void *)&_mh_execute_header, v13, v22, v26, v23, 0xCu);
    goto LABEL_17;
  }
  uint64_t v10 = &a1[OBJC_IVAR____TtC12searchpartyd28SecureLocationsStewieManager_stewieServiceState];
  if (a1[OBJC_IVAR____TtC12searchpartyd28SecureLocationsStewieManager_stewieServiceState + 8]) {
    goto LABEL_8;
  }
  uint64_t v30 = *(void *)v10;
  if (*(void *)v10 == 5 && (a2 & 1) == 0)
  {
    if (qword_101637070 != -1) {
      swift_once();
    }
    uint64_t v31 = type metadata accessor for Logger();
    sub_100010324(v31, (uint64_t)qword_10170EC30);
    uint64_t v12 = a1;
    os_log_type_t v13 = Logger.logObject.getter();
    os_log_type_t v22 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v13, v22))
    {
      os_log_type_t v23 = (uint8_t *)swift_slowAlloc();
      *(void *)&v38[0] = swift_slowAlloc();
      *(_DWORD *)os_log_type_t v23 = 136446210;
      os_log_type_t v52 = v23 + 4;
      uint64_t v32 = *(void *)&v12[OBJC_IVAR____TtC12searchpartyd28SecureLocationsStewieManager_stewieLogPrefix];
      unint64_t v33 = *(void *)&v12[OBJC_IVAR____TtC12searchpartyd28SecureLocationsStewieManager_stewieLogPrefix + 8];
      swift_bridgeObjectRetain();
      uint64_t v37 = sub_1008FA0F0(v32, v33, (uint64_t *)v38);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();

      swift_bridgeObjectRelease();
      unint64_t v26 = "%{public}s - canPublishLocation - publish already in progress";
      goto LABEL_16;
    }
LABEL_35:

    goto LABEL_36;
  }
  if (v30 != 1)
  {
    if (v30 == 6)
    {
      if (qword_101637070 != -1) {
        swift_once();
      }
      uint64_t v34 = type metadata accessor for Logger();
      sub_100010324(v34, (uint64_t)qword_10170EC30);
      uint64_t v12 = a1;
      os_log_type_t v13 = Logger.logObject.getter();
      os_log_type_t v22 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v13, v22))
      {
        os_log_type_t v23 = (uint8_t *)swift_slowAlloc();
        *(void *)&v38[0] = swift_slowAlloc();
        *(_DWORD *)os_log_type_t v23 = 136446210;
        os_log_type_t v52 = v23 + 4;
        uint64_t v35 = *(void *)&v12[OBJC_IVAR____TtC12searchpartyd28SecureLocationsStewieManager_stewieLogPrefix];
        unint64_t v36 = *(void *)&v12[OBJC_IVAR____TtC12searchpartyd28SecureLocationsStewieManager_stewieLogPrefix + 8];
        swift_bridgeObjectRetain();
        uint64_t v37 = sub_1008FA0F0(v35, v36, (uint64_t *)v38);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();

        swift_bridgeObjectRelease();
        unint64_t v26 = "%{public}s - canPublishLocation - publish is throttled";
        goto LABEL_16;
      }
      goto LABEL_35;
    }
    if (v30 != 5 || (a2 & 1) == 0)
    {
LABEL_8:
      if (qword_101637070 != -1) {
        swift_once();
      }
      uint64_t v11 = type metadata accessor for Logger();
      sub_100010324(v11, (uint64_t)qword_10170EC30);
      uint64_t v12 = a1;
      os_log_type_t v13 = Logger.logObject.getter();
      os_log_type_t v14 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v13, v14))
      {
        uint64_t v15 = swift_slowAlloc();
        uint64_t v37 = swift_slowAlloc();
        *(_DWORD *)uint64_t v15 = 136446466;
        os_log_type_t v52 = a3;
        uint64_t v16 = *(void *)&v12[OBJC_IVAR____TtC12searchpartyd28SecureLocationsStewieManager_stewieLogPrefix];
        unint64_t v17 = *(void *)&v12[OBJC_IVAR____TtC12searchpartyd28SecureLocationsStewieManager_stewieLogPrefix + 8];
        swift_bridgeObjectRetain();
        *(void *)&v38[0] = sub_1008FA0F0(v16, v17, &v37);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        *(_WORD *)(v15 + 12) = 2080;
        char v18 = v10[8];
        *(void *)&v38[0] = *(void *)v10;
        BYTE8(v38[0]) = v18;
        sub_10000588C((uint64_t *)&unk_101669338);
        uint64_t v19 = String.init<A>(describing:)();
        *(void *)&v38[0] = sub_1008FA0F0(v19, v20, &v37);
        a3 = v52;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();

        swift_bridgeObjectRelease();
        _os_log_impl((void *)&_mh_execute_header, v13, v14, "%{public}s - canPublishLocation - state is not available %s", (uint8_t *)v15, 0x16u);
LABEL_17:
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();

LABEL_37:
        *a3 = 0;
        return;
      }

LABEL_36:
      goto LABEL_37;
    }
  }
  *a3 = 1;
}

double sub_1010892CC()
{
  if (qword_101637188 != -1) {
    swift_once();
  }
  sub_100ECF824(0xD00000000000001BLL, 0x8000000101420960, (void *)qword_10170EE68);
  if (v2)
  {
    if (qword_101637080 != -1) {
      swift_once();
    }
    swift_retain();
    OS_dispatch_queue.sync<A>(execute:)();
    swift_release();
    long long v30 = v22;
    long long v31 = v23;
    long long v32 = v24;
    long long v26 = v18;
    long long v27 = v19;
    long long v28 = v20;
    long long v29 = v21;
    void v25[2] = v14;
    v25[3] = v15;
    v25[4] = v16;
    v25[5] = v17;
    v25[0] = v12;
    v25[1] = v13;
    sub_100551984((uint64_t)v25);
    return *((double *)&v26 + 1);
  }
  else
  {
    uint64_t v3 = v1;
    if (qword_101637070 != -1) {
      swift_once();
    }
    uint64_t v4 = type metadata accessor for Logger();
    sub_100010324(v4, (uint64_t)qword_10170EC30);
    uint64_t v5 = v0;
    uint64_t v6 = Logger.logObject.getter();
    os_log_type_t v7 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v6, v7))
    {
      uint64_t v8 = swift_slowAlloc();
      *(void *)&v25[0] = swift_slowAlloc();
      *(_DWORD *)uint64_t v8 = 136446466;
      uint64_t v9 = *(void *)&v5[OBJC_IVAR____TtC12searchpartyd28SecureLocationsStewieManager_stewieLogPrefix];
      unint64_t v10 = *(void *)&v5[OBJC_IVAR____TtC12searchpartyd28SecureLocationsStewieManager_stewieLogPrefix + 8];
      swift_bridgeObjectRetain();
      sub_1008FA0F0(v9, v10, (uint64_t *)v25);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();

      swift_bridgeObjectRelease();
      *(_WORD *)(v8 + 12) = 2048;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      _os_log_impl((void *)&_mh_execute_header, v6, v7, "%{public}s - using defaults override for timeBetweenPublish %ld", (uint8_t *)v8, 0x16u);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
    }
    return (double)v3;
  }
}

uint64_t sub_1010895BC(uint64_t a1, uint64_t a2)
{
  return sub_10108CAC8(a1, a2, (uint64_t)&unk_1016056B0, (uint64_t)sub_10109A0CC, (uint64_t)&unk_1016056C8);
}

void sub_1010895E4(char *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = swift_allocObject();
  *(void *)(v6 + 16) = a2;
  *(void *)(v6 + 24) = a3;
  os_log_type_t v7 = &a1[OBJC_IVAR____TtC12searchpartyd28SecureLocationsStewieManager_publishCompletions];
  swift_beginAccess();
  uint64_t v8 = *(void **)v7;
  swift_retain();
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  *(void *)os_log_type_t v7 = v8;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
    uint64_t v8 = sub_100A726D4(0, v8[2] + 1, 1, v8);
    *(void *)os_log_type_t v7 = v8;
  }
  unint64_t v11 = v8[2];
  unint64_t v10 = v8[3];
  if (v11 >= v10 >> 1)
  {
    uint64_t v8 = sub_100A726D4((void *)(v10 > 1), v11 + 1, 1, v8);
    *(void *)os_log_type_t v7 = v8;
  }
  v8[2] = v11 + 1;
  long long v12 = &v8[2 * v11];
  v12[4] = sub_10109A0D8;
  v12[5] = v6;
  swift_endAccess();
  if (qword_101637070 != -1) {
    swift_once();
  }
  uint64_t v13 = type metadata accessor for Logger();
  sub_100010324(v13, (uint64_t)qword_10170EC30);
  long long v14 = a1;
  long long v15 = Logger.logObject.getter();
  os_log_type_t v16 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v15, v16))
  {
    long long v17 = (uint8_t *)swift_slowAlloc();
    v20[0] = swift_slowAlloc();
    *(_DWORD *)long long v17 = 136446210;
    uint64_t v18 = *(void *)&v14[OBJC_IVAR____TtC12searchpartyd28SecureLocationsStewieManager_stewieLogPrefix];
    unint64_t v19 = *(void *)&v14[OBJC_IVAR____TtC12searchpartyd28SecureLocationsStewieManager_stewieLogPrefix + 8];
    swift_bridgeObjectRetain();
    sub_1008FA0F0(v18, v19, v20);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v15, v16, "%{public}s - added callback for location publish", v17, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
  }
}

uint64_t sub_101089870(void *a1, uint64_t a2)
{
  uint64_t v5 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v8 = (char *)v18 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = type metadata accessor for DispatchQoS();
  uint64_t v10 = *(void *)(v9 - 8);
  __chkstk_darwin(v9);
  long long v12 = (char *)v18 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18[0] = *(void *)&v2[OBJC_IVAR____TtC12searchpartyd28SecureLocationsStewieManager_clientQueue];
  uint64_t v13 = (void *)swift_allocObject();
  void v13[2] = v2;
  v13[3] = a1;
  v13[4] = a2;
  aBlock[4] = sub_10109A008;
  aBlock[5] = v13;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_1004B5480;
  aBlock[3] = &unk_101605600;
  long long v14 = _Block_copy(aBlock);
  long long v15 = v2;
  id v16 = a1;
  swift_errorRetain();
  static DispatchQoS.unspecified.getter();
  v18[1] = _swiftEmptyArrayStorage;
  sub_10109A964((unint64_t *)&qword_10163B7E0, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
  sub_10000588C((uint64_t *)&unk_10163F350);
  sub_100062734((unint64_t *)&qword_10163B7F0, (uint64_t *)&unk_10163F350);
  dispatch thunk of SetAlgebra.init<A>(_:)();
  OS_dispatch_queue.async(group:qos:flags:execute:)();
  _Block_release(v14);
  (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  (*(void (**)(char *, uint64_t))(v10 + 8))(v12, v9);
  return swift_release();
}

uint64_t sub_101089B48(void *a1, void *a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for DispatchWorkItemFlags();
  *(void *)&long long v64 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  uint64_t v8 = (char *)&v46 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = type metadata accessor for DispatchQoS();
  long long v48 = *(void (***)(char *, uint64_t))(v9 - 8);
  __chkstk_darwin(v9);
  uint64_t v11 = (char *)&v46 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = type metadata accessor for DispatchQoS.QoSClass();
  uint64_t v53 = *(void (***)(char *, uint64_t))(v12 - 8);
  __chkstk_darwin(v12);
  long long v14 = (char *)&v46 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_101637070 != -1) {
    swift_once();
  }
  uint64_t v15 = type metadata accessor for Logger();
  sub_100010324(v15, (uint64_t)qword_10170EC30);
  id v16 = a1;
  long long v17 = Logger.logObject.getter();
  os_log_type_t v18 = static os_log_type_t.default.getter();
  LODWORD(v58) = v18;
  BOOL v19 = os_log_type_enabled(v17, v18);
  uint64_t v62 = v12;
  uint64_t v63 = v9;
  unint64_t v60 = v11;
  char v61 = v14;
  uint64_t v59 = v8;
  if (v19)
  {
    uint64_t v20 = swift_slowAlloc();
    aBlock[0] = swift_slowAlloc();
    *(_DWORD *)uint64_t v20 = 136446466;
    uint64_t v21 = v6;
    uint64_t v22 = a3;
    long long v23 = a2;
    uint64_t v24 = *(void *)&v16[OBJC_IVAR____TtC12searchpartyd28SecureLocationsStewieManager_stewieLogPrefix];
    unint64_t v25 = *(void *)&v16[OBJC_IVAR____TtC12searchpartyd28SecureLocationsStewieManager_stewieLogPrefix + 8];
    swift_bridgeObjectRetain();
    uint64_t v68 = sub_1008FA0F0(v24, v25, aBlock);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    *(_WORD *)(v20 + 12) = 2048;
    long long v26 = &v16[OBJC_IVAR____TtC12searchpartyd28SecureLocationsStewieManager_publishCompletions];
    swift_beginAccess();
    uint64_t v68 = *(void *)(*(void *)v26 + 16);
    a2 = v23;
    a3 = v22;
    uint64_t v6 = v21;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    _os_log_impl((void *)&_mh_execute_header, v17, (os_log_type_t)v58, "%{public}s - calling completions %ld", (uint8_t *)v20, 0x16u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
  }
  long long v27 = &v16[OBJC_IVAR____TtC12searchpartyd28SecureLocationsStewieManager_publishCompletions];
  swift_beginAccess();
  uint64_t v28 = *(void *)v27;
  uint64_t v29 = *(void *)(*(void *)v27 + 16);
  if (v29)
  {
    long long v46 = v27;
    uint64_t v57 = sub_10001D4B0(0, (unint64_t *)&qword_1016376E0);
    unsigned int v56 = enum case for DispatchQoS.QoSClass.default(_:);
    uint64_t v55 = (void (**)(char *, void, uint64_t))(v53 + 13);
    uint64_t v54 = a3;
    ++v53;
    os_log_type_t v52 = v67;
    long long v51 = a2;
    long long v50 = (void (**)(char *, uint64_t))(v64 + 8);
    uint64_t v49 = v6;
    ++v48;
    swift_bridgeObjectRetain_n();
    uint64_t v30 = 0;
    uint64_t v58 = v29;
    uint64_t v47 = v28;
    long long v31 = v60;
    do
    {
      uint64_t v32 = v28 + 16 * v30++;
      uint64_t v33 = swift_allocObject();
      long long v64 = *(_OWORD *)(v32 + 32);
      *(_OWORD *)(v33 + 16) = v64;
      uint64_t v35 = v61;
      uint64_t v34 = v62;
      (*v55)(v61, v56, v62);
      *(void *)&long long v64 = *((void *)&v64 + 1);
      swift_retain_n();
      unint64_t v36 = (void *)static OS_dispatch_queue.global(qos:)();
      (*v53)(v35, v34);
      uint64_t v37 = (void *)swift_allocObject();
      v37[2] = sub_10109A014;
      v37[3] = v33;
      uint64_t v38 = v51;
      uint64_t v39 = v54;
      v37[4] = v51;
      uint64_t v37[5] = v39;
      v67[2] = sub_10109A098;
      v67[3] = v37;
      aBlock[0] = (uint64_t)_NSConcreteStackBlock;
      aBlock[1] = 1107296256;
      v67[0] = sub_1004B5480;
      v67[1] = &unk_101605678;
      long long v40 = _Block_copy(aBlock);
      swift_retain();
      id v41 = v38;
      swift_errorRetain();
      static DispatchQoS.unspecified.getter();
      int v65 = _swiftEmptyArrayStorage;
      sub_10109A964((unint64_t *)&qword_10163B7E0, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
      sub_10000588C((uint64_t *)&unk_10163F350);
      sub_100062734((unint64_t *)&qword_10163B7F0, (uint64_t *)&unk_10163F350);
      long long v42 = v59;
      uint64_t v43 = v49;
      dispatch thunk of SetAlgebra.init<A>(_:)();
      OS_dispatch_queue.async(group:qos:flags:execute:)();
      uint64_t v28 = v47;
      uint64_t v44 = v58;
      swift_release();
      _Block_release(v40);

      (*v50)(v42, v43);
      (*v48)(v31, v63);
      swift_release();
      swift_release();
    }
    while (v44 != v30);
    swift_bridgeObjectRelease_n();
    long long v27 = v46;
  }
  *(void *)long long v27 = _swiftEmptyArrayStorage;
  return swift_bridgeObjectRelease();
}

uint64_t sub_10108A2B8()
{
  if (qword_101637070 != -1) {
    swift_once();
  }
  uint64_t v1 = type metadata accessor for Logger();
  sub_100010324(v1, (uint64_t)qword_10170EC30);
  char v2 = v0;
  uint64_t v3 = Logger.logObject.getter();
  os_log_type_t v4 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v3, v4))
  {
    uint64_t v5 = (uint8_t *)swift_slowAlloc();
    uint64_t v10 = swift_slowAlloc();
    *(_DWORD *)uint64_t v5 = 136446210;
    uint64_t v7 = *(void *)&v2[OBJC_IVAR____TtC12searchpartyd28SecureLocationsStewieManager_stewieLogPrefix];
    unint64_t v6 = *(void *)&v2[OBJC_IVAR____TtC12searchpartyd28SecureLocationsStewieManager_stewieLogPrefix + 8];
    swift_bridgeObjectRetain();
    sub_1008FA0F0(v7, v6, &v10);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v3, v4, "%{public}s - startMonitoring", v5, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
  }
  uint64_t v8 = type metadata accessor for Transaction();
  __chkstk_darwin(v8);
  return static Transaction.named<A>(_:with:)();
}

uint64_t sub_10108A4EC(uint64_t a1, char *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  uint64_t v11 = (char *)v19 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v20 = type metadata accessor for DispatchQoS();
  uint64_t v12 = *(void *)(v20 - 8);
  __chkstk_darwin(v20);
  long long v14 = (char *)v19 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19[1] = *(void *)&a2[OBJC_IVAR____TtC12searchpartyd28SecureLocationsStewieManager_clientQueue];
  uint64_t v15 = (void *)swift_allocObject();
  void v15[2] = a2;
  v15[3] = a1;
  v15[4] = a3;
  v15[5] = a4;
  aBlock[4] = sub_101099F88;
  aBlock[5] = v15;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  uint64_t aBlock[2] = sub_1004B5480;
  aBlock[3] = &unk_101605498;
  id v16 = _Block_copy(aBlock);
  long long v17 = a2;
  swift_retain();
  swift_retain();
  static DispatchQoS.unspecified.getter();
  uint64_t aBlock[7] = _swiftEmptyArrayStorage;
  sub_10109A964((unint64_t *)&qword_10163B7E0, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
  sub_10000588C((uint64_t *)&unk_10163F350);
  sub_100062734((unint64_t *)&qword_10163B7F0, (uint64_t *)&unk_10163F350);
  dispatch thunk of SetAlgebra.init<A>(_:)();
  OS_dispatch_queue.async(group:qos:flags:execute:)();
  _Block_release(v16);
  (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v8);
  (*(void (**)(char *, uint64_t))(v12 + 8))(v14, v20);
  return swift_release();
}

void sub_10108A7D8(void *a1, uint64_t a2, void (*a3)(void *), uint64_t a4)
{
  v192 = a3;
  uint64_t v193 = a4;
  uint64_t v194 = a2;
  uint64_t v5 = (void *)type metadata accessor for DispatchPredicate();
  unint64_t v6 = (char *)*(v5 - 1);
  __chkstk_darwin(v5);
  uint64_t v8 = (void *)((char *)v174 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v189 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v187 = *(void *)(v189 - 8);
  __chkstk_darwin(v189);
  v185 = (char *)v174 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v188 = type metadata accessor for DispatchQoS();
  uint64_t v186 = *(void *)(v188 - 8);
  __chkstk_darwin(v188);
  v184 = (char *)v174 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = type metadata accessor for DispatchQoS.QoSClass();
  uint64_t v182 = *(void *)(v11 - 8);
  uint64_t v183 = v11;
  __chkstk_darwin(v11);
  v181 = (char *)v174 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_101637070 != -1) {
    swift_once();
  }
  uint64_t v13 = type metadata accessor for Logger();
  long long v14 = (char *)sub_100010324(v13, (uint64_t)qword_10170EC30);
  uint64_t v15 = a1;
  id v16 = Logger.logObject.getter();
  os_log_type_t v17 = static os_log_type_t.debug.getter();
  os_log_type_t v18 = (char *)v17;
  if (os_log_type_enabled(v16, v17))
  {
    uint64_t v19 = swift_slowAlloc();
    v190 = v14;
    uint64_t v20 = (uint8_t *)v19;
    uint64_t v21 = (char *)swift_slowAlloc();
    v191 = v5;
    v180 = v21;
    *(void *)&long long v209 = v21;
    *(_DWORD *)uint64_t v20 = 136446210;
    v179 = v20 + 4;
    uint64_t v22 = v8;
    long long v23 = v6;
    uint64_t v25 = *(void *)&v15[OBJC_IVAR____TtC12searchpartyd28SecureLocationsStewieManager_stewieLogPrefix];
    unint64_t v24 = *(void *)&v15[OBJC_IVAR____TtC12searchpartyd28SecureLocationsStewieManager_stewieLogPrefix + 8];
    swift_bridgeObjectRetain();
    uint64_t v26 = v25;
    unint64_t v6 = v23;
    uint64_t v8 = v22;
    *(void *)&long long v196 = sub_1008FA0F0(v26, v24, (uint64_t *)&v209);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v16, (os_log_type_t)v18, "%{public}s - startMonitoring started block", v20, 0xCu);
    swift_arrayDestroy();
    uint64_t v5 = v191;
    swift_slowDealloc();
    long long v14 = v190;
    swift_slowDealloc();
  }
  else
  {
  }
  uint64_t My = type metadata accessor for Feature.FindMy();
  *((void *)&v210 + 1) = My;
  *(void *)&long long v211 = sub_10109A964((unint64_t *)&qword_101653E00, (void (*)(uint64_t))&type metadata accessor for Feature.FindMy);
  uint64_t v28 = sub_10001D958((uint64_t *)&v209);
  (*(void (**)(uint64_t *, void, uint64_t))(*(void *)(My - 8) + 104))(v28, enum case for Feature.FindMy.fmNiftyCurve(_:), My);
  LOBYTE(My) = isFeatureEnabled(_:)();
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)&v209);
  if ((My & 1) == 0) {
    goto LABEL_15;
  }
  os_log_type_t v18 = v15;
  if (qword_101637080 != -1) {
    goto LABEL_72;
  }
  while (1)
  {
    swift_retain();
    OS_dispatch_queue.sync<A>(execute:)();
    swift_release();
    long long v219 = v206;
    long long v220 = v207;
    long long v221 = v208;
    long long v215 = v202;
    long long v216 = v203;
    long long v217 = v204;
    long long v218 = v205;
    long long v211 = v198;
    long long v212 = v199;
    long long v213 = v200;
    long long v214 = v201;
    long long v209 = v196;
    long long v210 = v197;
    sub_100551984((uint64_t)&v209);
    if (v214 == 1) {
      break;
    }
    uint64_t v15 = v18;
LABEL_15:
    uint64_t v38 = *(void **)&v15[OBJC_IVAR____TtC12searchpartyd28SecureLocationsStewieManager_clientQueue];
    *uint64_t v8 = v38;
    (*((void (**)(void *, void, void *))v6 + 13))(v8, enum case for DispatchPredicate.onQueue(_:), v5);
    id v39 = v38;
    LOBYTE(v38) = _dispatchPreconditionTest(_:)();
    long long v40 = (void (*)(void *, void *))*((void *)v6 + 1);
    v6 += 8;
    v40(v8, v5);
    if (v38)
    {
      id v41 = &v15[OBJC_IVAR____TtC12searchpartyd28SecureLocationsStewieManager_stewieServiceState];
      *(void *)id v41 = 7;
      v41[8] = 0;
      sub_10108F1FC();
      long long v42 = v15;
      uint64_t v43 = Logger.logObject.getter();
      os_log_type_t v44 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v43, v44))
      {
        long long v45 = (uint8_t *)swift_slowAlloc();
        *(void *)&long long v209 = swift_slowAlloc();
        *(_DWORD *)long long v45 = 136446210;
        uint64_t v46 = *(void *)&v42[OBJC_IVAR____TtC12searchpartyd28SecureLocationsStewieManager_stewieLogPrefix];
        unint64_t v47 = *(void *)&v42[OBJC_IVAR____TtC12searchpartyd28SecureLocationsStewieManager_stewieLogPrefix + 8];
        swift_bridgeObjectRetain();
        *(void *)&long long v196 = sub_1008FA0F0(v46, v47, (uint64_t *)&v209);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();

        swift_bridgeObjectRelease();
        _os_log_impl((void *)&_mh_execute_header, v43, v44, "%{public}s - startMonitoring: featureDisabled", v45, 0xCu);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
      }
      else
      {
      }
      long long v48 = v192;
      sub_10108CAA0((uint64_t)SharingCircleWildAdvertisementKey.init(key:), 0);
      type metadata accessor for SecureLocationsStewieError(0);
      *(void *)&long long v196 = 3;
      sub_1004A0BC8((uint64_t)_swiftEmptyArrayStorage);
      sub_10109A964(&qword_101638540, type metadata accessor for SecureLocationsStewieError);
      _BridgedStoredNSError.init(_:userInfo:)();
      uint64_t v49 = (void *)v209;
LABEL_20:
      v48(v49);

LABEL_21:
      Transaction.capture()();
      return;
    }
    __break(1u);
LABEL_72:
    swift_once();
  }
  uint64_t v15 = v18;
  if ((v18[OBJC_IVAR____TtC12searchpartyd28SecureLocationsStewieManager_isStewieSupported] & 1) == 0) {
    goto LABEL_15;
  }
  if (sub_100F2C7E4())
  {
    uint64_t v29 = *(void **)&v18[OBJC_IVAR____TtC12searchpartyd28SecureLocationsStewieManager_clientQueue];
    *uint64_t v8 = v29;
    (*((void (**)(void *, void, void *))v6 + 13))(v8, enum case for DispatchPredicate.onQueue(_:), v5);
    id v30 = v29;
    LOBYTE(v29) = _dispatchPreconditionTest(_:)();
    (*((void (**)(void *, void *))v6 + 1))(v8, v5);
    if (v29)
    {
      long long v31 = &v18[OBJC_IVAR____TtC12searchpartyd28SecureLocationsStewieManager_stewieServiceState];
      *(void *)long long v31 = 8;
      v31[8] = 0;
      sub_10108F1FC();
      uint64_t v32 = v18;
      uint64_t v33 = Logger.logObject.getter();
      os_log_type_t v34 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v33, v34))
      {
        uint64_t v35 = (uint8_t *)swift_slowAlloc();
        *(void *)&long long v196 = swift_slowAlloc();
        *(_DWORD *)uint64_t v35 = 136446210;
        uint64_t v36 = *(void *)&v32[OBJC_IVAR____TtC12searchpartyd28SecureLocationsStewieManager_stewieLogPrefix];
        unint64_t v37 = *(void *)&v32[OBJC_IVAR____TtC12searchpartyd28SecureLocationsStewieManager_stewieLogPrefix + 8];
        swift_bridgeObjectRetain();
        uint64_t v195 = sub_1008FA0F0(v36, v37, (uint64_t *)&v196);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();

        swift_bridgeObjectRelease();
        _os_log_impl((void *)&_mh_execute_header, v33, v34, "%{public}s - startMonitoring: disabled in geo", v35, 0xCu);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
      }
      else
      {
      }
      long long v48 = v192;
      sub_10108CAA0((uint64_t)SharingCircleWildAdvertisementKey.init(key:), 0);
      type metadata accessor for SecureLocationsStewieError(0);
      uint64_t v87 = 3;
LABEL_43:
      uint64_t v195 = v87;
      sub_1004A0BC8((uint64_t)_swiftEmptyArrayStorage);
      sub_10109A964(&qword_101638540, type metadata accessor for SecureLocationsStewieError);
      _BridgedStoredNSError.init(_:userInfo:)();
      uint64_t v49 = (void *)v196;
      goto LABEL_20;
    }
    __break(1u);
    goto LABEL_74;
  }
  long long v50 = &v18[OBJC_IVAR____TtC12searchpartyd28SecureLocationsStewieManager_stewieServiceState];
  char v51 = v18[OBJC_IVAR____TtC12searchpartyd28SecureLocationsStewieManager_stewieServiceState + 8];
  v177 = &v18[OBJC_IVAR____TtC12searchpartyd28SecureLocationsStewieManager_stewieServiceState];
  if (v51)
  {
    BOOL v178 = 0;
    BOOL v52 = 0;
  }
  else
  {
    BOOL v52 = *(void *)v50 == 5;
    BOOL v178 = *(void *)v50 == 6;
  }
  v180 = v18;
  uint64_t v53 = Logger.logObject.getter();
  os_log_type_t v54 = static os_log_type_t.default.getter();
  BOOL v55 = os_log_type_enabled(v53, v54);
  LODWORD(v179) = v52;
  if (v55)
  {
    uint64_t v56 = swift_slowAlloc();
    v176 = v8;
    uint64_t v57 = v56;
    v175 = (uint8_t *)swift_slowAlloc();
    *(void *)&long long v196 = v175;
    *(_DWORD *)uint64_t v57 = 136446722;
    uint64_t v58 = v180;
    v190 = v6;
    v191 = v5;
    uint64_t v59 = v14;
    uint64_t v60 = *(void *)&v180[OBJC_IVAR____TtC12searchpartyd28SecureLocationsStewieManager_stewieLogPrefix];
    unint64_t v61 = *(void *)&v180[OBJC_IVAR____TtC12searchpartyd28SecureLocationsStewieManager_stewieLogPrefix + 8];
    swift_bridgeObjectRetain();
    uint64_t v195 = sub_1008FA0F0(v60, v61, (uint64_t *)&v196);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    swift_bridgeObjectRelease();
    *(_WORD *)(v57 + 12) = 1024;
    LODWORD(v195) = v179;
    uint64_t v5 = v191;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v57 + 18) = 1024;
    long long v14 = v59;
    unint64_t v6 = v190;
    BOOL v62 = v178;
    LODWORD(v195) = v178;
    BOOL v52 = (int)v179;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl((void *)&_mh_execute_header, v53, v54, "%{public}s - startMonitoring: isPublishInProgress %{BOOL}d isThrottled %{BOOL}d", (uint8_t *)v57, 0x18u);
    swift_arrayDestroy();
    swift_slowDealloc();
    uint64_t v8 = v176;
    swift_slowDealloc();
  }
  else
  {

    BOOL v62 = v178;
  }
  swift_retain();
  int v63 = sub_100D0C0B0();
  swift_release();
  int v64 = v52 || v62;
  if (((v63 | v64) & 1) == 0)
  {
    uint64_t v77 = *(void **)&v180[OBJC_IVAR____TtC12searchpartyd28SecureLocationsStewieManager_clientQueue];
    *uint64_t v8 = v77;
    (*((void (**)(void *, void, void *))v6 + 13))(v8, enum case for DispatchPredicate.onQueue(_:), v5);
    id v78 = v77;
    LOBYTE(v77) = _dispatchPreconditionTest(_:)();
    (*((void (**)(void *, void *))v6 + 1))(v8, v5);
    if (v77)
    {
      uint64_t v79 = v177;
      *(void *)v177 = 3;
      v79[8] = 0;
      uint64_t v80 = v180;
      sub_10108F1FC();
      uint64_t v81 = v80;
      uint64_t v82 = Logger.logObject.getter();
      os_log_type_t v83 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v82, v83))
      {
        uint64_t v84 = (uint8_t *)swift_slowAlloc();
        *(void *)&long long v196 = swift_slowAlloc();
        *(_DWORD *)uint64_t v84 = 136446210;
        uint64_t v85 = *(void *)&v81[OBJC_IVAR____TtC12searchpartyd28SecureLocationsStewieManager_stewieLogPrefix];
        unint64_t v86 = *(void *)&v81[OBJC_IVAR____TtC12searchpartyd28SecureLocationsStewieManager_stewieLogPrefix + 8];
        swift_bridgeObjectRetain();
        uint64_t v195 = sub_1008FA0F0(v85, v86, (uint64_t *)&v196);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();

        swift_bridgeObjectRelease();
        _os_log_impl((void *)&_mh_execute_header, v82, v83, "%{public}s - startMonitoring: not a location publishing device", v84, 0xCu);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
      }
      else
      {
      }
      long long v48 = v192;
      sub_10108CAA0((uint64_t)SharingCircleWildAdvertisementKey.init(key:), 0);
      type metadata accessor for SecureLocationsStewieError(0);
      uint64_t v87 = 5;
      goto LABEL_43;
    }
LABEL_74:
    __break(1u);
    goto LABEL_75;
  }
  int v65 = (char *)OBJC_IVAR____TtC12searchpartyd28SecureLocationsStewieManager_keyManager;
  swift_retain();
  int v66 = sub_100BA0BA4();
  swift_release();
  if (((v66 | v64) & 1) == 0)
  {
    uint64_t v88 = *(void **)&v180[OBJC_IVAR____TtC12searchpartyd28SecureLocationsStewieManager_clientQueue];
    *uint64_t v8 = v88;
    (*((void (**)(void *, void, void *))v6 + 13))(v8, enum case for DispatchPredicate.onQueue(_:), v5);
    id v89 = v88;
    LOBYTE(v88) = _dispatchPreconditionTest(_:)();
    (*((void (**)(void *, void *))v6 + 1))(v8, v5);
    if (v88)
    {
      uint64_t v90 = v177;
      *(void *)v177 = 9;
      v90[8] = 0;
      uint64_t v91 = v180;
      sub_10108F1FC();
      uint64_t v92 = v91;
      v190 = v14;
      uint64_t v93 = Logger.logObject.getter();
      os_log_type_t v94 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v93, v94))
      {
        uint64_t v95 = (uint8_t *)swift_slowAlloc();
        uint64_t v96 = swift_slowAlloc();
        v191 = v65;
        *(void *)&long long v196 = v96;
        *(_DWORD *)uint64_t v95 = 136446210;
        uint64_t v97 = *(void *)&v92[OBJC_IVAR____TtC12searchpartyd28SecureLocationsStewieManager_stewieLogPrefix];
        unint64_t v98 = *(void *)&v92[OBJC_IVAR____TtC12searchpartyd28SecureLocationsStewieManager_stewieLogPrefix + 8];
        swift_bridgeObjectRetain();
        uint64_t v195 = sub_1008FA0F0(v97, v98, (uint64_t *)&v196);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();

        swift_bridgeObjectRelease();
        _os_log_impl((void *)&_mh_execute_header, v93, v94, "%{public}s - secureLocations not setup. attempting setup before starting monitor", v95, 0xCu);
        swift_arrayDestroy();
        int v65 = (char *)v191;
        swift_slowDealloc();
        swift_slowDealloc();
      }
      else
      {
      }
      uint64_t v99 = v192;
      type metadata accessor for SecureLocationsStewieError(0);
      uint64_t v195 = 4;
      sub_1004A0BC8((uint64_t)_swiftEmptyArrayStorage);
      sub_10109A964(&qword_101638540, type metadata accessor for SecureLocationsStewieError);
      _BridgedStoredNSError.init(_:userInfo:)();
      uint64_t v100 = (void *)v196;
      v99((void *)v196);

      uint64_t v101 = *(void *)&v65[(void)v180];
      uint64_t v102 = swift_allocObject();
      *(void *)(v102 + 16) = v92;
      uint64_t v103 = v92;
      swift_retain();
      if (sub_100BA0BA4())
      {
        sub_10108C67C(1, v103);
      }
      else
      {
        uint64_t v104 = Logger.logObject.getter();
        os_log_type_t v105 = static os_log_type_t.default.getter();
        if (os_log_type_enabled(v104, v105))
        {
          Swift::Int v106 = (uint8_t *)swift_slowAlloc();
          *(_WORD *)Swift::Int v106 = 0;
          _os_log_impl((void *)&_mh_execute_header, v104, v105, "SetupVirtualMeDevice: Waiting on beaconStore to become available", v106, 2u);
          swift_slowDealloc();
        }

        swift_retain();
        swift_retain();
        uint64_t v107 = swift_retain();
        sub_100B500A4(v107, v101, (uint64_t)sub_101099FCC, v102);

        swift_release();
        swift_release();
        swift_release();
      }
      swift_release();
      swift_release();
      goto LABEL_21;
    }
LABEL_75:
    __break(1u);
    goto LABEL_76;
  }
  v176 = v8;
  uint64_t v67 = OBJC_IVAR____TtC12searchpartyd28SecureLocationsStewieManager_dataClient;
  uint64_t v68 = *(void **)&v180[OBJC_IVAR____TtC12searchpartyd28SecureLocationsStewieManager_dataClient];
  if (!v68)
  {
    uint64_t v69 = v180;
    v190 = v14;
    uint64_t v70 = Logger.logObject.getter();
    os_log_type_t v71 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v70, v71))
    {
      uint64_t v72 = (uint8_t *)swift_slowAlloc();
      v191 = (void *)swift_slowAlloc();
      *(void *)&long long v196 = v191;
      v175 = v72;
      *(_DWORD *)uint64_t v72 = 136446210;
      v174[1] = v72 + 4;
      uint64_t v73 = v5;
      uint64_t v75 = *(void *)&v69[OBJC_IVAR____TtC12searchpartyd28SecureLocationsStewieManager_stewieLogPrefix];
      unint64_t v74 = *(void *)&v69[OBJC_IVAR____TtC12searchpartyd28SecureLocationsStewieManager_stewieLogPrefix + 8];
      swift_bridgeObjectRetain();
      uint64_t v76 = v75;
      uint64_t v5 = v73;
      uint64_t v195 = sub_1008FA0F0(v76, v74, (uint64_t *)&v196);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();

      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v70, v71, "%{public}s - startMonitoring but we have no data client - creating one", v175, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
    }
    v69[OBJC_IVAR____TtC12searchpartyd28SecureLocationsStewieManager_isFindMyServiceConnectedToStewie] = 0;
    uint64_t v108 = &unk_101669000;
    id v109 = [objc_allocWithZone((Class)CTStewieDataClient) initWithServices:4 delegate:v69 delegateQueue:*(void *)&v69[OBJC_IVAR____TtC12searchpartyd28SecureLocationsStewieManager_clientQueue]];
    uint64_t v110 = v180;
    uint64_t v111 = *(void **)&v180[v67];
    *(void *)&v180[v67] = v109;

    uint64_t v68 = *(void **)&v110[v67];
    if (!v68)
    {
      v152 = v69;
      v153 = Logger.logObject.getter();
      os_log_type_t v154 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v153, v154))
      {
        v155 = (uint8_t *)swift_slowAlloc();
        v191 = (void *)swift_slowAlloc();
        *(void *)&long long v196 = v191;
        *(_DWORD *)v155 = 136446210;
        v190 = (char *)(v155 + 4);
        v156 = v5;
        uint64_t v158 = *(void *)&v152[OBJC_IVAR____TtC12searchpartyd28SecureLocationsStewieManager_stewieLogPrefix];
        unint64_t v157 = *(void *)&v152[OBJC_IVAR____TtC12searchpartyd28SecureLocationsStewieManager_stewieLogPrefix + 8];
        swift_bridgeObjectRetain();
        uint64_t v159 = v158;
        uint64_t v5 = v156;
        uint64_t v195 = sub_1008FA0F0(v159, v157, (uint64_t *)&v196);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();

        swift_bridgeObjectRelease();
        _os_log_impl((void *)&_mh_execute_header, v153, v154, "%{public}s - attempting to start monitor but no data client instance available", v155, 0xCu);
        swift_arrayDestroy();
        swift_slowDealloc();
        uint64_t v108 = (void *)&unk_101669000;
        swift_slowDealloc();
      }
      else
      {
      }
      v160 = v176;
      if (((v178 | v179) & 1) == 0)
      {
        v161 = *(void **)&v152[v108[23]];
        void *v176 = v161;
        (*((void (**)(void *, void, void *))v6 + 13))(v160, enum case for DispatchPredicate.onQueue(_:), v5);
        id v162 = v161;
        LOBYTE(v161) = _dispatchPreconditionTest(_:)();
        (*((void (**)(void *, void *))v6 + 1))(v160, v5);
        if ((v161 & 1) == 0) {
          goto LABEL_77;
        }
        v163 = v177;
        *(void *)v177 = 0;
        v163[8] = 0;
        sub_10108F1FC();
      }
      sub_10001D4B0(0, (unint64_t *)&qword_1016376E0);
      v165 = v181;
      uint64_t v164 = v182;
      uint64_t v166 = v183;
      (*(void (**)(char *, void, uint64_t))(v182 + 104))(v181, enum case for DispatchQoS.QoSClass.default(_:), v183);
      v167 = (void *)static OS_dispatch_queue.global(qos:)();
      (*(void (**)(char *, uint64_t))(v164 + 8))(v165, v166);
      uint64_t v168 = swift_allocObject();
      uint64_t v169 = v193;
      *(void *)(v168 + 16) = v192;
      *(void *)(v168 + 24) = v169;
      *(void *)&long long v198 = sub_10109AC54;
      *((void *)&v198 + 1) = v168;
      *(void *)&long long v196 = _NSConcreteStackBlock;
      *((void *)&v196 + 1) = 1107296256;
      *(void *)&long long v197 = sub_1004B5480;
      *((void *)&v197 + 1) = &unk_101605510;
      v170 = _Block_copy(&v196);
      swift_retain();
      v171 = v184;
      static DispatchQoS.unspecified.getter();
      uint64_t v195 = (uint64_t)_swiftEmptyArrayStorage;
      sub_10109A964((unint64_t *)&qword_10163B7E0, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
      sub_10000588C((uint64_t *)&unk_10163F350);
      sub_100062734((unint64_t *)&qword_10163B7F0, (uint64_t *)&unk_10163F350);
      v172 = v185;
      uint64_t v173 = v189;
      dispatch thunk of SetAlgebra.init<A>(_:)();
      OS_dispatch_queue.async(group:qos:flags:execute:)();
      _Block_release(v170);

      (*(void (**)(char *, uint64_t))(v187 + 8))(v172, v173);
      (*(void (**)(char *, uint64_t))(v186 + 8))(v171, v188);
      swift_release();
      goto LABEL_21;
    }
  }
  id v112 = v68;
  unsigned __int8 v113 = [v112 start];
  v191 = v112;
  if (v113)
  {
    uint64_t v114 = v180;
    sub_10108F884();
    v190 = (char *)[v112 getState];
    sub_10108DF14(v190, 1);
    sub_10001D4B0(0, (unint64_t *)&qword_1016376E0);
    int v116 = v181;
    uint64_t v115 = v182;
    uint64_t v117 = v183;
    (*(void (**)(char *, void, uint64_t))(v182 + 104))(v181, enum case for DispatchQoS.QoSClass.default(_:), v183);
    uint64_t v118 = (void *)static OS_dispatch_queue.global(qos:)();
    (*(void (**)(char *, uint64_t))(v115 + 8))(v116, v117);
    uint64_t v119 = swift_allocObject();
    uint64_t v120 = v193;
    *(void *)(v119 + 16) = v192;
    *(void *)(v119 + 24) = v120;
    *(void *)&long long v198 = sub_1003C6214;
    *((void *)&v198 + 1) = v119;
    *(void *)&long long v196 = _NSConcreteStackBlock;
    *((void *)&v196 + 1) = 1107296256;
    *(void *)&long long v197 = sub_1004B5480;
    *((void *)&v197 + 1) = &unk_1016055B0;
    uint64_t v121 = _Block_copy(&v196);
    swift_retain();
    v122 = v184;
    static DispatchQoS.unspecified.getter();
    uint64_t v195 = (uint64_t)_swiftEmptyArrayStorage;
    sub_10109A964((unint64_t *)&qword_10163B7E0, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
    sub_10000588C((uint64_t *)&unk_10163F350);
    sub_100062734((unint64_t *)&qword_10163B7F0, (uint64_t *)&unk_10163F350);
    os_log_t v123 = v185;
    uint64_t v124 = v189;
    dispatch thunk of SetAlgebra.init<A>(_:)();
    OS_dispatch_queue.async(group:qos:flags:execute:)();
    _Block_release(v121);

    (*(void (**)(char *, uint64_t))(v187 + 8))(v123, v124);
    (*(void (**)(char *, uint64_t))(v186 + 8))(v122, v188);
    swift_release();
    id v125 = v114;
    unint64_t v126 = Logger.logObject.getter();
    os_log_type_t v127 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v126, v127))
    {
      uint64_t v128 = (uint8_t *)swift_slowAlloc();
      *(void *)&long long v196 = swift_slowAlloc();
      *(_DWORD *)uint64_t v128 = 136446210;
      uint64_t v130 = *(void *)&v125[OBJC_IVAR____TtC12searchpartyd28SecureLocationsStewieManager_stewieLogPrefix];
      unint64_t v129 = *(void *)&v125[OBJC_IVAR____TtC12searchpartyd28SecureLocationsStewieManager_stewieLogPrefix + 8];
      swift_bridgeObjectRetain();
      uint64_t v195 = sub_1008FA0F0(v130, v129, (uint64_t *)&v196);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();

      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v126, v127, "%{public}s - started dataclient", v128, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
    }
    goto LABEL_21;
  }
  if ((v178 | v179))
  {
LABEL_59:
    v135 = v180;
    v136 = Logger.logObject.getter();
    os_log_type_t v137 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v136, v137))
    {
      v138 = (uint8_t *)swift_slowAlloc();
      *(void *)&long long v196 = swift_slowAlloc();
      *(_DWORD *)v138 = 136446210;
      uint64_t v139 = *(void *)&v135[OBJC_IVAR____TtC12searchpartyd28SecureLocationsStewieManager_stewieLogPrefix];
      unint64_t v140 = *(void *)&v135[OBJC_IVAR____TtC12searchpartyd28SecureLocationsStewieManager_stewieLogPrefix + 8];
      swift_bridgeObjectRetain();
      uint64_t v195 = sub_1008FA0F0(v139, v140, (uint64_t *)&v196);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();

      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v136, v137, "%{public}s - start dataclient returned false", v138, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
    }
    uint64_t v141 = v193;
    uint64_t v142 = v192;
    sub_10001D4B0(0, (unint64_t *)&qword_1016376E0);
    uint64_t v144 = v181;
    uint64_t v143 = v182;
    uint64_t v145 = v183;
    (*(void (**)(char *, void, uint64_t))(v182 + 104))(v181, enum case for DispatchQoS.QoSClass.default(_:), v183);
    v146 = (void *)static OS_dispatch_queue.global(qos:)();
    (*(void (**)(char *, uint64_t))(v143 + 8))(v144, v145);
    uint64_t v147 = swift_allocObject();
    *(void *)(v147 + 16) = v142;
    *(void *)(v147 + 24) = v141;
    *(void *)&long long v198 = sub_101099FD4;
    *((void *)&v198 + 1) = v147;
    *(void *)&long long v196 = _NSConcreteStackBlock;
    *((void *)&v196 + 1) = 1107296256;
    *(void *)&long long v197 = sub_1004B5480;
    *((void *)&v197 + 1) = &unk_101605560;
    v148 = _Block_copy(&v196);
    swift_retain();
    uint64_t v149 = v184;
    static DispatchQoS.unspecified.getter();
    uint64_t v195 = (uint64_t)_swiftEmptyArrayStorage;
    sub_10109A964((unint64_t *)&qword_10163B7E0, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
    sub_10000588C((uint64_t *)&unk_10163F350);
    sub_100062734((unint64_t *)&qword_10163B7F0, (uint64_t *)&unk_10163F350);
    uint64_t v150 = v185;
    uint64_t v151 = v189;
    dispatch thunk of SetAlgebra.init<A>(_:)();
    OS_dispatch_queue.async(group:qos:flags:execute:)();

    _Block_release(v148);
    (*(void (**)(char *, uint64_t))(v187 + 8))(v150, v151);
    (*(void (**)(char *, uint64_t))(v186 + 8))(v149, v188);
    swift_release();
    goto LABEL_21;
  }
  long long v131 = *(void **)&v180[OBJC_IVAR____TtC12searchpartyd28SecureLocationsStewieManager_clientQueue];
  v132 = v176;
  void *v176 = v131;
  (*((void (**)(void *, void, void *))v6 + 13))(v132, enum case for DispatchPredicate.onQueue(_:), v5);
  id v133 = v131;
  LOBYTE(v131) = _dispatchPreconditionTest(_:)();
  (*((void (**)(void *, void *))v6 + 1))(v132, v5);
  if (v131)
  {
    v134 = v177;
    *(void *)v177 = 2;
    v134[8] = 0;
    sub_10108F1FC();
    goto LABEL_59;
  }
LABEL_76:
  __break(1u);
LABEL_77:
  __break(1u);
}

void sub_10108C67C(char a1, void *a2)
{
  if (a1)
  {
    if (qword_101637070 != -1) {
      swift_once();
    }
    uint64_t v3 = type metadata accessor for Logger();
    sub_100010324(v3, (uint64_t)qword_10170EC30);
    os_log_type_t v4 = a2;
    uint64_t v5 = Logger.logObject.getter();
    os_log_type_t v6 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v5, v6))
    {
      uint64_t v7 = (uint8_t *)swift_slowAlloc();
      uint64_t v17 = swift_slowAlloc();
      *(_DWORD *)uint64_t v7 = 136446210;
      uint64_t v8 = *(void *)&v4[OBJC_IVAR____TtC12searchpartyd28SecureLocationsStewieManager_stewieLogPrefix];
      unint64_t v9 = *(void *)&v4[OBJC_IVAR____TtC12searchpartyd28SecureLocationsStewieManager_stewieLogPrefix + 8];
      swift_bridgeObjectRetain();
      sub_1008FA0F0(v8, v9, &v17);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();

      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v5, v6, "%{public}s - secure locations is setup - requesting startMonitor", v7, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
    }
    sub_10108A2B8(SharingCircleWildAdvertisementKey.init(key:), 0);
  }
  else
  {
    if (qword_101637070 != -1) {
      swift_once();
    }
    uint64_t v10 = type metadata accessor for Logger();
    sub_100010324(v10, (uint64_t)qword_10170EC30);
    id v16 = a2;
    uint64_t v11 = Logger.logObject.getter();
    os_log_type_t v12 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v11, v12))
    {
      uint64_t v13 = (uint8_t *)swift_slowAlloc();
      uint64_t v17 = swift_slowAlloc();
      *(_DWORD *)uint64_t v13 = 136446210;
      uint64_t v14 = *(void *)&v16[OBJC_IVAR____TtC12searchpartyd28SecureLocationsStewieManager_stewieLogPrefix];
      unint64_t v15 = *(void *)&v16[OBJC_IVAR____TtC12searchpartyd28SecureLocationsStewieManager_stewieLogPrefix + 8];
      swift_bridgeObjectRetain();
      sub_1008FA0F0(v14, v15, &v17);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();

      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v11, v12, "%{public}s - setupSecureLocations returned as false. Cannot start monitor. Not retrying to avoid loop", v13, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
    }
  }
}

void sub_10108C9E4(void (*a1)())
{
  type metadata accessor for SecureLocationsStewieError(0);
  sub_1004A0BC8((uint64_t)_swiftEmptyArrayStorage);
  sub_10109A964(&qword_101638540, type metadata accessor for SecureLocationsStewieError);
  _BridgedStoredNSError.init(_:userInfo:)();
  a1();
}

uint64_t sub_10108CAA0(uint64_t a1, uint64_t a2)
{
  return sub_10108CAC8(a1, a2, (uint64_t)&unk_101605430, (uint64_t)sub_101099F14, (uint64_t)&unk_101605448);
}

uint64_t sub_10108CAC8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  v20[0] = a5;
  uint64_t v9 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v10 = *(void *)(v9 - 8);
  __chkstk_darwin(v9);
  os_log_type_t v12 = (char *)v20 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v21 = type metadata accessor for DispatchQoS();
  uint64_t v13 = *(void *)(v21 - 8);
  __chkstk_darwin(v21);
  unint64_t v15 = (char *)v20 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v20[1] = *(void *)&v5[OBJC_IVAR____TtC12searchpartyd28SecureLocationsStewieManager_clientQueue];
  id v16 = (void *)swift_allocObject();
  v16[2] = v5;
  v16[3] = a1;
  v16[4] = a2;
  aBlock[4] = a4;
  aBlock[5] = v16;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  uint64_t aBlock[2] = sub_1004B5480;
  aBlock[3] = v20[0];
  uint64_t v17 = _Block_copy(aBlock);
  os_log_type_t v18 = v5;
  swift_retain();
  static DispatchQoS.unspecified.getter();
  uint64_t v22 = _swiftEmptyArrayStorage;
  sub_10109A964((unint64_t *)&qword_10163B7E0, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
  sub_10000588C((uint64_t *)&unk_10163F350);
  sub_100062734((unint64_t *)&qword_10163B7F0, (uint64_t *)&unk_10163F350);
  dispatch thunk of SetAlgebra.init<A>(_:)();
  OS_dispatch_queue.async(group:qos:flags:execute:)();
  _Block_release(v17);
  (*(void (**)(char *, uint64_t))(v10 + 8))(v12, v9);
  (*(void (**)(char *, uint64_t))(v13 + 8))(v15, v21);
  return swift_release();
}

void sub_10108CD90(unsigned char *a1, void (*a2)(void))
{
  os_log_type_t v4 = *(void **)&a1[OBJC_IVAR____TtC12searchpartyd28SecureLocationsStewieManager_dataClient];
  *(void *)&a1[OBJC_IVAR____TtC12searchpartyd28SecureLocationsStewieManager_dataClient] = 0;

  a1[OBJC_IVAR____TtC12searchpartyd28SecureLocationsStewieManager_isFindMyServiceConnectedToStewie] = 0;
  a2(0);
  if (qword_101637070 != -1) {
    swift_once();
  }
  uint64_t v5 = type metadata accessor for Logger();
  sub_100010324(v5, (uint64_t)qword_10170EC30);
  uint64_t v11 = a1;
  os_log_type_t v6 = Logger.logObject.getter();
  os_log_type_t v7 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v6, v7))
  {
    uint64_t v8 = (uint8_t *)swift_slowAlloc();
    uint64_t v12 = swift_slowAlloc();
    *(_DWORD *)uint64_t v8 = 136446210;
    uint64_t v9 = *(void *)&v11[OBJC_IVAR____TtC12searchpartyd28SecureLocationsStewieManager_stewieLogPrefix];
    unint64_t v10 = *(void *)&v11[OBJC_IVAR____TtC12searchpartyd28SecureLocationsStewieManager_stewieLogPrefix + 8];
    swift_bridgeObjectRetain();
    sub_1008FA0F0(v9, v10, &v12);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v6, v7, "%{public}s - stopped monitor", v8, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
  }
}

uint64_t sub_10108CF9C(uint64_t a1, uint64_t a2)
{
  return sub_10108CAC8(a1, a2, (uint64_t)&unk_101605340, (uint64_t)sub_101099E30, (uint64_t)&unk_101605358);
}

uint64_t sub_10108CFC4(char *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v57 = type metadata accessor for DispatchWorkItemFlags();
  os_log_type_t v6 = *(uint8_t **)(v57 - 8);
  __chkstk_darwin(v57);
  BOOL v55 = (char *)&v47 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for DispatchQoS();
  uint64_t v56 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  os_log_type_t v54 = (char *)&v47 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = type metadata accessor for DispatchQoS.QoSClass();
  uint64_t v52 = *(void *)(v10 - 8);
  uint64_t v53 = v10;
  __chkstk_darwin(v10);
  uint64_t v12 = (char *)&v47 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (a1[OBJC_IVAR____TtC12searchpartyd28SecureLocationsStewieManager_stewieServiceState + 8] == 1)
  {
    if (qword_101637070 != -1) {
      swift_once();
    }
    uint64_t v13 = type metadata accessor for Logger();
    sub_100010324(v13, (uint64_t)qword_10170EC30);
    uint64_t v14 = a1;
    unint64_t v15 = Logger.logObject.getter();
    os_log_type_t v16 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v15, v16))
    {
      uint64_t v49 = a2;
      uint64_t v17 = (uint8_t *)swift_slowAlloc();
      os_log_type_t v18 = (void **)swift_slowAlloc();
      uint64_t v51 = v8;
      id aBlock = v18;
      uint64_t v50 = a3;
      *(_DWORD *)uint64_t v17 = 136446210;
      long long v48 = v17 + 4;
      uint64_t v19 = v6;
      uint64_t v20 = *(void *)&v14[OBJC_IVAR____TtC12searchpartyd28SecureLocationsStewieManager_stewieLogPrefix];
      unint64_t v21 = *(void *)&v14[OBJC_IVAR____TtC12searchpartyd28SecureLocationsStewieManager_stewieLogPrefix + 8];
      swift_bridgeObjectRetain();
      uint64_t v22 = v20;
      os_log_type_t v6 = v19;
      a2 = v49;
      uint64_t v58 = (void *)sub_1008FA0F0(v22, v21, (uint64_t *)&aBlock);
      a3 = v50;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();

      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v15, v16, "%{public}s - no current state - responding as unknown", v17, 0xCu);
      swift_arrayDestroy();
      uint64_t v8 = v51;
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
    }
    sub_10001D4B0(0, (unint64_t *)&qword_1016376E0);
    uint64_t v35 = v52;
    uint64_t v34 = v53;
    (*(void (**)(char *, void, uint64_t))(v52 + 104))(v12, enum case for DispatchQoS.QoSClass.default(_:), v53);
    uint64_t v36 = (void *)static OS_dispatch_queue.global(qos:)();
    (*(void (**)(char *, uint64_t))(v35 + 8))(v12, v34);
    uint64_t v37 = swift_allocObject();
    *(void *)(v37 + 16) = a2;
    *(void *)(v37 + 24) = a3;
    int v63 = sub_101099E74;
    int v64 = (void *)v37;
    id aBlock = _NSConcreteStackBlock;
    uint64_t v60 = 1107296256;
    uint64_t v38 = &unk_1016053A8;
  }
  else
  {
    uint64_t v23 = *(void *)&a1[OBJC_IVAR____TtC12searchpartyd28SecureLocationsStewieManager_stewieServiceState];
    if (qword_101637070 != -1) {
      swift_once();
    }
    uint64_t v24 = type metadata accessor for Logger();
    sub_100010324(v24, (uint64_t)qword_10170EC30);
    uint64_t v25 = a1;
    uint64_t v26 = Logger.logObject.getter();
    os_log_type_t v27 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v26, v27))
    {
      uint64_t v28 = swift_slowAlloc();
      uint64_t v29 = (void **)swift_slowAlloc();
      uint64_t v51 = v8;
      id aBlock = v29;
      *(_DWORD *)uint64_t v28 = 136446466;
      uint64_t v49 = a2;
      uint64_t v50 = a3;
      long long v48 = v6;
      uint64_t v30 = *(void *)&v25[OBJC_IVAR____TtC12searchpartyd28SecureLocationsStewieManager_stewieLogPrefix];
      unint64_t v31 = *(void *)&v25[OBJC_IVAR____TtC12searchpartyd28SecureLocationsStewieManager_stewieLogPrefix + 8];
      swift_bridgeObjectRetain();
      uint64_t v58 = (void *)sub_1008FA0F0(v30, v31, (uint64_t *)&aBlock);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();

      swift_bridgeObjectRelease();
      *(_WORD *)(v28 + 12) = 2080;
      uint64_t v32 = sub_1011413F8();
      uint64_t v58 = (void *)sub_1008FA0F0(v32, v33, (uint64_t *)&aBlock);
      a2 = v49;
      a3 = v50;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      os_log_type_t v6 = v48;
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v26, v27, "%{public}s - currentState %s", (uint8_t *)v28, 0x16u);
      swift_arrayDestroy();
      uint64_t v8 = v51;
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
    }
    sub_10001D4B0(0, (unint64_t *)&qword_1016376E0);
    uint64_t v40 = v52;
    uint64_t v39 = v53;
    (*(void (**)(char *, void, uint64_t))(v52 + 104))(v12, enum case for DispatchQoS.QoSClass.default(_:), v53);
    uint64_t v36 = (void *)static OS_dispatch_queue.global(qos:)();
    (*(void (**)(char *, uint64_t))(v40 + 8))(v12, v39);
    id v41 = (void *)swift_allocObject();
    void v41[2] = a2;
    v41[3] = a3;
    v41[4] = v23;
    int v63 = sub_101099EDC;
    int v64 = v41;
    id aBlock = _NSConcreteStackBlock;
    uint64_t v60 = 1107296256;
    uint64_t v38 = &unk_1016053F8;
  }
  unint64_t v61 = sub_1004B5480;
  BOOL v62 = v38;
  long long v42 = _Block_copy(&aBlock);
  swift_retain();
  uint64_t v43 = v54;
  static DispatchQoS.unspecified.getter();
  uint64_t v58 = _swiftEmptyArrayStorage;
  sub_10109A964((unint64_t *)&qword_10163B7E0, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
  sub_10000588C((uint64_t *)&unk_10163F350);
  sub_100062734((unint64_t *)&qword_10163B7F0, (uint64_t *)&unk_10163F350);
  os_log_type_t v44 = v55;
  uint64_t v45 = v57;
  dispatch thunk of SetAlgebra.init<A>(_:)();
  OS_dispatch_queue.async(group:qos:flags:execute:)();
  _Block_release(v42);

  (*((void (**)(char *, uint64_t))v6 + 1))(v44, v45);
  (*(void (**)(char *, uint64_t))(v56 + 8))(v43, v8);
  return swift_release();
}

uint64_t sub_10108D7C4(uint64_t a1, uint64_t a2)
{
  return sub_10108CAC8(a1, a2, (uint64_t)&unk_1016052F0, (uint64_t)sub_101099E20, (uint64_t)&unk_101605308);
}

void sub_10108D7EC(void *a1, void (*a2)(id, void), uint64_t a3)
{
  uint64_t v6 = sub_10000588C((uint64_t *)&unk_10163AC90);
  __chkstk_darwin(v6 - 8);
  uint64_t v8 = (char *)&v40 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = type metadata accessor for Date();
  uint64_t v10 = *(void *)(v9 - 8);
  uint64_t v11 = __chkstk_darwin(v9);
  uint64_t v13 = (char *)&v40 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v11);
  unint64_t v15 = (char *)&v40 - v14;
  uint64_t My = type metadata accessor for Feature.FindMy();
  *((void *)&v49 + 1) = My;
  *(void *)&long long v50 = sub_10109A964((unint64_t *)&qword_101653E00, (void (*)(uint64_t))&type metadata accessor for Feature.FindMy);
  uint64_t v17 = sub_10001D958((uint64_t *)&v48);
  (*(void (**)(uint64_t *, void, uint64_t))(*(void *)(My - 8) + 104))(v17, enum case for Feature.FindMy.fmNiftyCurve(_:), My);
  LOBYTE(My) = isFeatureEnabled(_:)();
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)&v48);
  if ((My & 1) == 0) {
    goto LABEL_9;
  }
  uint64_t v44 = v10;
  uint64_t v45 = a3;
  if (qword_101637080 != -1) {
    swift_once();
  }
  swift_retain();
  OS_dispatch_queue.sync<A>(execute:)();
  swift_release();
  long long v58 = v47[10];
  long long v59 = v47[11];
  long long v60 = v47[12];
  long long v54 = v47[6];
  long long v55 = v47[7];
  long long v56 = v47[8];
  long long v57 = v47[9];
  long long v50 = v47[2];
  long long v51 = v47[3];
  long long v52 = v47[4];
  long long v53 = v47[5];
  long long v48 = v47[0];
  long long v49 = v47[1];
  sub_100551984((uint64_t)&v48);
  if (v53 != 1) {
    goto LABEL_9;
  }
  if (*((unsigned char *)a1 + OBJC_IVAR____TtC12searchpartyd28SecureLocationsStewieManager_isStewieSupported))
  {
    id v43 = [objc_allocWithZone((Class)SPSecureLocationsStewiePublishResult) init];
    id v18 = [self standardUserDefaults];
    NSString v19 = String._bridgeToObjectiveC()();
    [v18 doubleForKey:v19];
    double v21 = v20;

    if (v21 <= 0.0)
    {
      uint64_t v22 = v44;
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v44 + 56))(v8, 1, 1, v9);
    }
    else
    {
      Date.init(timeIntervalSince1970:)();
      uint64_t v22 = v44;
      (*(void (**)(char *, void, uint64_t, uint64_t))(v44 + 56))(v8, 0, 1, v9);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v22 + 48))(v8, 1, v9) != 1)
      {
        (*(void (**)(char *, char *, uint64_t))(v22 + 32))(v15, v8, v9);
        Class isa = Date._bridgeToObjectiveC()().super.isa;
        id v24 = v43;
        [v43 setLastPublished:isa];

        sub_1010892CC();
        Date.addingTimeInterval(_:)();
        Date.timeIntervalSince1970.getter();
        [v24 setNextAllowedPublish:];
        uint64_t v25 = v22;
        id v26 = v24;
        a2(v24, 0);

        os_log_type_t v27 = *(void (**)(char *, uint64_t))(v25 + 8);
        v27(v13, v9);
        v27(v15, v9);
        return;
      }
    }
    sub_10001DAB4((uint64_t)v8, (uint64_t *)&unk_10163AC90);
    if (qword_101637070 != -1) {
      swift_once();
    }
    uint64_t v29 = type metadata accessor for Logger();
    sub_100010324(v29, (uint64_t)qword_10170EC30);
    uint64_t v30 = a1;
    unint64_t v31 = Logger.logObject.getter();
    os_log_type_t v32 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v31, v32))
    {
      unint64_t v33 = (uint8_t *)swift_slowAlloc();
      uint64_t v42 = swift_slowAlloc();
      *(void *)&v47[0] = v42;
      *(_DWORD *)unint64_t v33 = 136446210;
      uint64_t v40 = v33 + 4;
      id v41 = v30;
      uint64_t v34 = *(void *)&v30[OBJC_IVAR____TtC12searchpartyd28SecureLocationsStewieManager_stewieLogPrefix];
      unint64_t v35 = *(void *)&v30[OBJC_IVAR____TtC12searchpartyd28SecureLocationsStewieManager_stewieLogPrefix + 8];
      swift_bridgeObjectRetain();
      uint64_t v36 = v34;
      uint64_t v22 = v44;
      uint64_t v46 = sub_1008FA0F0(v36, v35, (uint64_t *)v47);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();

      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v31, v32, "%{public}s - no last publish. allow immediate", v33, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
    }
    id v37 = v43;
    [v43 setLastPublished:0];
    static Date.trustedNow.getter((uint64_t)v13);
    Date.timeIntervalSince1970.getter();
    double v39 = v38;
    (*(void (**)(char *, uint64_t))(v22 + 8))(v13, v9);
    [v37 setNextAllowedPublish:v39];
    id v28 = v37;
    a2(v37, 0);
  }
  else
  {
LABEL_9:
    type metadata accessor for SecureLocationsStewieError(0);
    *(void *)&v47[0] = 3;
    sub_1004A0BC8((uint64_t)_swiftEmptyArrayStorage);
    sub_10109A964(&qword_101638540, type metadata accessor for SecureLocationsStewieError);
    _BridgedStoredNSError.init(_:userInfo:)();
    id v28 = (id)v48;
    a2(0, v48);
  }
}

void sub_10108DF14(void *a1, int a2)
{
  uint64_t v3 = v2;
  uint64_t v6 = sub_10000588C((uint64_t *)&unk_10163AC90);
  uint64_t v7 = __chkstk_darwin(v6 - 8);
  uint64_t v9 = (char *)&v99 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v7);
  uint64_t v11 = (char *)&v99 - v10;
  uint64_t v12 = type metadata accessor for DispatchPredicate();
  uint64_t v13 = *(void *)(v12 - 8);
  __chkstk_darwin(v12);
  unint64_t v15 = (uint8_t **)((char *)&v99 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0));
  os_log_type_t v16 = *(void **)&v3[OBJC_IVAR____TtC12searchpartyd28SecureLocationsStewieManager_clientQueue];
  *unint64_t v15 = v16;
  (*(void (**)(void *, void, uint64_t))(v13 + 104))(v15, enum case for DispatchPredicate.onQueue(_:), v12);
  id v17 = v16;
  LOBYTE(v16) = _dispatchPreconditionTest(_:)();
  NSString v19 = *(void (**)(void *, uint64_t))(v13 + 8);
  id v18 = (char *)(v13 + 8);
  v19(v15, v12);
  if ((v16 & 1) == 0)
  {
    __break(1u);
LABEL_70:
    swift_once();
    goto LABEL_4;
  }
  id v18 = &v3[OBJC_IVAR____TtC12searchpartyd28SecureLocationsStewieManager_stewieServiceState];
  uint64_t v20 = *(void *)&v3[OBJC_IVAR____TtC12searchpartyd28SecureLocationsStewieManager_stewieServiceState];
  LODWORD(v21) = v3[OBJC_IVAR____TtC12searchpartyd28SecureLocationsStewieManager_stewieServiceState + 8];
  uint64_t My = type metadata accessor for Feature.FindMy();
  *((void *)&v110 + 1) = My;
  *(void *)&long long v111 = sub_10109A964((unint64_t *)&qword_101653E00, (void (*)(uint64_t))&type metadata accessor for Feature.FindMy);
  uint64_t v23 = sub_10001D958((uint64_t *)&v109);
  (*(void (**)(uint64_t *, void, uint64_t))(*(void *)(My - 8) + 104))(v23, enum case for Feature.FindMy.fmNiftyCurve(_:), My);
  LOBYTE(My) = isFeatureEnabled(_:)();
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)&v109);
  int v106 = (int)v21;
  if ((My & 1) == 0)
  {
LABEL_14:
    *(void *)id v18 = 7;
    v18[8] = 0;
    goto LABEL_15;
  }
  uint64_t v105 = v20;
  if (qword_101637080 != -1) {
    goto LABEL_70;
  }
LABEL_4:
  swift_retain();
  OS_dispatch_queue.sync<A>(execute:)();
  swift_release();
  long long v119 = v108[10];
  long long v120 = v108[11];
  long long v121 = v108[12];
  long long v115 = v108[6];
  long long v116 = v108[7];
  long long v117 = v108[8];
  long long v118 = v108[9];
  long long v111 = v108[2];
  long long v112 = v108[3];
  long long v113 = v108[4];
  long long v114 = v108[5];
  long long v109 = v108[0];
  long long v110 = v108[1];
  sub_100551984((uint64_t)&v109);
  if (v114 != 1)
  {
    uint64_t v20 = v105;
    goto LABEL_13;
  }
  uint64_t v20 = v105;
  if ((v3[OBJC_IVAR____TtC12searchpartyd28SecureLocationsStewieManager_isStewieSupported] & 1) == 0)
  {
LABEL_13:
    LOBYTE(v21) = v106;
    goto LABEL_14;
  }
  uint64_t v103 = v18;
  char v24 = v18[8];
  int v104 = a2;
  if ((v24 & 1) == 0 && *(void *)v103 == 5)
  {
    if (qword_101637070 != -1) {
      swift_once();
    }
    uint64_t v25 = type metadata accessor for Logger();
    sub_100010324(v25, (uint64_t)qword_10170EC30);
    double v21 = v3;
    id v26 = Logger.logObject.getter();
    os_log_type_t v27 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v26, v27))
    {
      uint64_t v28 = swift_slowAlloc();
      os_log_t v102 = (os_log_t)swift_slowAlloc();
      v107[0] = (uint64_t)v102;
      *(_DWORD *)uint64_t v28 = 136446466;
      uint64_t v30 = *(void *)&v21[OBJC_IVAR____TtC12searchpartyd28SecureLocationsStewieManager_stewieLogPrefix];
      unint64_t v29 = *(void *)&v21[OBJC_IVAR____TtC12searchpartyd28SecureLocationsStewieManager_stewieLogPrefix + 8];
      swift_bridgeObjectRetain();
      *(void *)&v108[0] = sub_1008FA0F0(v30, v29, v107);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      *(_WORD *)(v28 + 12) = 2080;
      id v18 = v103;
      char v31 = v103[8];
      *(void *)&v108[0] = *(void *)v103;
      BYTE8(v108[0]) = v31;
      sub_10000588C((uint64_t *)&unk_101669338);
      uint64_t v32 = String.init<A>(describing:)();
      *(void *)&v108[0] = sub_1008FA0F0(v32, v33, v107);
      a2 = v104;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();

      uint64_t v20 = v105;
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v26, v27, "%{public}s - not updating state since existing state is %s", (uint8_t *)v28, 0x16u);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      LOBYTE(v21) = v106;
      goto LABEL_15;
    }

    goto LABEL_58;
  }
  if (([a1 allowedServices] & 4) != 0)
  {
    if (qword_101637070 != -1) {
      swift_once();
    }
    uint64_t v66 = type metadata accessor for Logger();
    sub_100010324(v66, (uint64_t)qword_10170EC30);
    uint64_t v67 = v3;
    uint64_t v68 = Logger.logObject.getter();
    os_log_type_t v69 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v68, v69))
    {
      os_log_t v102 = v68;
      uint64_t v70 = (uint8_t *)swift_slowAlloc();
      uint64_t v101 = swift_slowAlloc();
      *(void *)&v108[0] = v101;
      *(_DWORD *)uint64_t v70 = 136446210;
      uint64_t v99 = v70 + 4;
      uint64_t v100 = v70;
      uint64_t v72 = *(uint64_t *)((char *)&v67->isa + OBJC_IVAR____TtC12searchpartyd28SecureLocationsStewieManager_stewieLogPrefix);
      unint64_t v71 = *(unint64_t *)((char *)&v67[1].isa
                                + OBJC_IVAR____TtC12searchpartyd28SecureLocationsStewieManager_stewieLogPrefix);
      swift_bridgeObjectRetain();
      v107[0] = sub_1008FA0F0(v72, v71, (uint64_t *)v108);
      uint64_t v20 = v105;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();

      swift_bridgeObjectRelease();
      os_log_t v73 = v102;
      _os_log_impl((void *)&_mh_execute_header, v102, v69, "%{public}s - FindMy Publish is allowed", v100, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
    }
    a2 = v104;
    __chkstk_darwin(v74);
    os_log_t v102 = v67;
    *(&v99 - 2) = (uint8_t *)v67;
    QueueSynchronizer.conditionalSync<A>(_:)();
    id v18 = v103;
    if ((v103[8] & 1) == 0 && *(void *)v103 == 6)
    {
      LOBYTE(v21) = v106;
      goto LABEL_15;
    }
    *(void *)uint64_t v103 = 1;
    v18[8] = 0;
    os_log_t v82 = v102;
    os_log_type_t v83 = (char *)v102 + OBJC_IVAR____TtC12searchpartyd28SecureLocationsStewieManager_lastAvailabilityDate;
    swift_beginAccess();
    sub_10001D074((uint64_t)v83, (uint64_t)v11, (uint64_t *)&unk_10163AC90);
    uint64_t v84 = type metadata accessor for Date();
    uint64_t v85 = *(void *)(v84 - 8);
    int v86 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v85 + 48))(v11, 1, v84);
    sub_10001DAB4((uint64_t)v11, (uint64_t *)&unk_10163AC90);
    if (v86 == 1)
    {
      static Date.trustedNow.getter((uint64_t)v9);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v85 + 56))(v9, 0, 1, v84);
      swift_beginAccess();
      sub_100062604((uint64_t)v9, (uint64_t)v83, (uint64_t *)&unk_10163AC90);
      swift_endAccess();
      *(Class *)((char *)&v82->isa + OBJC_IVAR____TtC12searchpartyd28SecureLocationsStewieManager_cntProactiveAlerts) = (Class)1;
      sub_101090DC8();
      uint64_t v20 = v105;
      if (qword_101637440 != -1) {
        swift_once();
      }
      type metadata accessor for Transaction();
      uint64_t v87 = swift_allocObject();
      *(void *)(v87 + 16) = 0;
      *(unsigned char *)(v87 + 24) = 1;
      swift_retain();
      static Transaction.asyncTask(name:block:)();
      swift_release();
      swift_release();
      a2 = v104;
LABEL_58:
      id v18 = v103;
      LOBYTE(v21) = v106;
      goto LABEL_15;
    }
  }
  else
  {
    if ([a1 status] == (id)1
      && ([a1 reason] == (id)4 || objc_msgSend(a1, "reason") == (id)5))
    {
      if (qword_101637070 != -1) {
        swift_once();
      }
      uint64_t v59 = type metadata accessor for Logger();
      sub_100010324(v59, (uint64_t)qword_10170EC30);
      long long v60 = v3;
      unint64_t v61 = Logger.logObject.getter();
      os_log_type_t v62 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v61, v62))
      {
        int v63 = (uint8_t *)swift_slowAlloc();
        os_log_t v102 = (os_log_t)swift_slowAlloc();
        *(void *)&v108[0] = v102;
        *(_DWORD *)int v63 = 136446210;
        uint64_t v101 = (uint64_t)(v63 + 4);
        uint64_t v65 = *(void *)&v60[OBJC_IVAR____TtC12searchpartyd28SecureLocationsStewieManager_stewieLogPrefix];
        unint64_t v64 = *(void *)&v60[OBJC_IVAR____TtC12searchpartyd28SecureLocationsStewieManager_stewieLogPrefix + 8];
        swift_bridgeObjectRetain();
        v107[0] = sub_1008FA0F0(v65, v64, (uint64_t *)v108);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();

        swift_bridgeObjectRelease();
        _os_log_impl((void *)&_mh_execute_header, v61, v62, "%{public}s - FindMy publish is not allowed due to geo reasons", v63, 0xCu);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
      }
      else
      {
      }
      uint64_t v88 = 8;
    }
    else
    {
      if (qword_101637070 != -1) {
        swift_once();
      }
      uint64_t v75 = type metadata accessor for Logger();
      sub_100010324(v75, (uint64_t)qword_10170EC30);
      uint64_t v76 = v3;
      uint64_t v77 = Logger.logObject.getter();
      os_log_type_t v78 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v77, v78))
      {
        uint64_t v79 = (uint8_t *)swift_slowAlloc();
        os_log_t v102 = (os_log_t)swift_slowAlloc();
        *(void *)&v108[0] = v102;
        *(_DWORD *)uint64_t v79 = 136446210;
        uint64_t v101 = (uint64_t)(v79 + 4);
        uint64_t v81 = *(void *)&v76[OBJC_IVAR____TtC12searchpartyd28SecureLocationsStewieManager_stewieLogPrefix];
        unint64_t v80 = *(void *)&v76[OBJC_IVAR____TtC12searchpartyd28SecureLocationsStewieManager_stewieLogPrefix + 8];
        swift_bridgeObjectRetain();
        v107[0] = sub_1008FA0F0(v81, v80, (uint64_t *)v108);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();

        swift_bridgeObjectRelease();
        _os_log_impl((void *)&_mh_execute_header, v77, v78, "%{public}s - FindMy publish is not available", v79, 0xCu);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
      }
      else
      {
      }
      uint64_t v88 = 2;
    }
    id v89 = v103;
    *(void *)uint64_t v103 = v88;
    v89[8] = 0;
    uint64_t v90 = type metadata accessor for Date();
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v90 - 8) + 56))(v9, 1, 1, v90);
    uint64_t v91 = (uint64_t)&v3[OBJC_IVAR____TtC12searchpartyd28SecureLocationsStewieManager_lastAvailabilityDate];
    swift_beginAccess();
    sub_100062604((uint64_t)v9, v91, (uint64_t *)&unk_10163AC90);
    swift_endAccess();
    sub_101091DF4(1);
    if (qword_101637070 != -1) {
      swift_once();
    }
    uint64_t v92 = type metadata accessor for Logger();
    sub_100010324(v92, (uint64_t)qword_10170EC30);
    uint64_t v93 = v3;
    os_log_type_t v94 = Logger.logObject.getter();
    os_log_type_t v95 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v94, v95))
    {
      uint64_t v96 = swift_slowAlloc();
      *(void *)&v108[0] = swift_slowAlloc();
      *(_DWORD *)uint64_t v96 = 136446210;
      os_log_t v102 = (os_log_t)(v96 + 4);
      uint64_t v98 = *(void *)&v93[OBJC_IVAR____TtC12searchpartyd28SecureLocationsStewieManager_stewieLogPrefix];
      unint64_t v97 = *(void *)&v93[OBJC_IVAR____TtC12searchpartyd28SecureLocationsStewieManager_stewieLogPrefix + 8];
      swift_bridgeObjectRetain();
      v107[0] = sub_1008FA0F0(v98, v97, (uint64_t *)v108);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();

      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v94, v95, "%{public}s - unregistered reminder notification timer", (uint8_t *)v96, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
    }
  }
  a2 = v104;
  id v18 = v103;
  uint64_t v20 = v105;
  LOBYTE(v21) = v106;
LABEL_15:
  char v34 = v18[8];
  if (v21)
  {
    if (!v18[8]) {
      goto LABEL_26;
    }
  }
  else
  {
    if (v20 != *(void *)v18) {
      char v34 = 1;
    }
    if (v34) {
      goto LABEL_26;
    }
  }
  if (a2)
  {
LABEL_26:
    if (qword_101637070 != -1) {
      swift_once();
    }
    uint64_t v46 = type metadata accessor for Logger();
    sub_100010324(v46, (uint64_t)qword_10170EC30);
    uint64_t v47 = v3;
    long long v48 = Logger.logObject.getter();
    os_log_type_t v49 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v48, v49))
    {
      uint64_t v50 = swift_slowAlloc();
      uint64_t v105 = swift_slowAlloc();
      v107[0] = v105;
      *(_DWORD *)uint64_t v50 = 136446978;
      uint64_t v51 = v20;
      int v104 = a2;
      uint64_t v52 = *(void *)&v47[OBJC_IVAR____TtC12searchpartyd28SecureLocationsStewieManager_stewieLogPrefix];
      unint64_t v53 = *(void *)&v47[OBJC_IVAR____TtC12searchpartyd28SecureLocationsStewieManager_stewieLogPrefix + 8];
      swift_bridgeObjectRetain();
      *(void *)&long long v109 = sub_1008FA0F0(v52, v53, v107);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      *(_WORD *)(v50 + 12) = 2080;
      *(void *)&long long v109 = v51;
      BYTE8(v109) = v106;
      sub_10000588C((uint64_t *)&unk_101669338);
      uint64_t v54 = String.init<A>(describing:)();
      *(void *)&long long v109 = sub_1008FA0F0(v54, v55, v107);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      *(_WORD *)(v50 + 22) = 2080;
      char v56 = v18[8];
      *(void *)&long long v109 = *(void *)v18;
      BYTE8(v109) = v56;
      uint64_t v57 = String.init<A>(describing:)();
      *(void *)&long long v109 = sub_1008FA0F0(v57, v58, v107);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();

      swift_bridgeObjectRelease();
      *(_WORD *)(v50 + 32) = 1024;
      LODWORD(v109) = v104 & 1;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      _os_log_impl((void *)&_mh_execute_header, v48, v49, "%{public}s - stateChange old %s new %s forceNotify %{BOOL}d", (uint8_t *)v50, 0x26u);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
    }
    sub_10108F1FC();
    return;
  }
  if (qword_101637070 != -1) {
    swift_once();
  }
  uint64_t v35 = type metadata accessor for Logger();
  sub_100010324(v35, (uint64_t)qword_10170EC30);
  uint64_t v36 = v3;
  id v37 = Logger.logObject.getter();
  os_log_type_t v38 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v37, v38))
  {
    double v39 = v18;
    uint64_t v40 = swift_slowAlloc();
    v107[0] = swift_slowAlloc();
    *(_DWORD *)uint64_t v40 = 136446466;
    uint64_t v41 = *(void *)&v36[OBJC_IVAR____TtC12searchpartyd28SecureLocationsStewieManager_stewieLogPrefix];
    unint64_t v42 = *(void *)&v36[OBJC_IVAR____TtC12searchpartyd28SecureLocationsStewieManager_stewieLogPrefix + 8];
    swift_bridgeObjectRetain();
    *(void *)&long long v109 = sub_1008FA0F0(v41, v42, v107);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    *(_WORD *)(v40 + 12) = 2080;
    char v43 = v39[8];
    *(void *)&long long v109 = *(void *)v39;
    BYTE8(v109) = v43;
    sub_10000588C((uint64_t *)&unk_101669338);
    uint64_t v44 = String.init<A>(describing:)();
    *(void *)&long long v109 = sub_1008FA0F0(v44, v45, v107);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v37, v38, "%{public}s - no change in service state %s", (uint8_t *)v40, 0x16u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
  }
}

uint64_t sub_10108F1FC()
{
  uint64_t v1 = type metadata accessor for DispatchPredicate();
  uint64_t v2 = *(void *)(v1 - 8);
  __chkstk_darwin(v1);
  os_log_type_t v4 = &v13[-((v3 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v5 = *(void **)(v0 + OBJC_IVAR____TtC12searchpartyd28SecureLocationsStewieManager_clientQueue);
  *os_log_type_t v4 = v5;
  (*(void (**)(void *, void, uint64_t))(v2 + 104))(v4, enum case for DispatchPredicate.onQueue(_:), v1);
  id v6 = v5;
  LOBYTE(v5) = _dispatchPreconditionTest(_:)();
  uint64_t result = (*(uint64_t (**)(void *, uint64_t))(v2 + 8))(v4, v1);
  if (v5)
  {
    if (*(unsigned char *)(v0 + OBJC_IVAR____TtC12searchpartyd28SecureLocationsStewieManager_stewieServiceState + 8))
    {
      uint64_t v8 = *(void *)(v0 + OBJC_IVAR____TtC12searchpartyd28SecureLocationsStewieManager_clientSessionPool);
      uint64_t v9 = type metadata accessor for Transaction();
      __chkstk_darwin(v9);
      *(void *)&v13[-16] = v8;
      *(void *)&v13[-8] = 0;
    }
    else
    {
      uint64_t v10 = *(void *)(v0 + OBJC_IVAR____TtC12searchpartyd28SecureLocationsStewieManager_stewieServiceState);
      uint64_t v11 = *(void *)(v0 + OBJC_IVAR____TtC12searchpartyd28SecureLocationsStewieManager_clientSessionPool);
      uint64_t v12 = type metadata accessor for Transaction();
      __chkstk_darwin(v12);
      *(void *)&v13[-16] = v11;
      *(void *)&v13[-8] = v10;
    }
    swift_retain();
    static Transaction.named<A>(_:with:)();
    return swift_release();
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_10108F428()
{
  QueueSynchronizer.conditionalSync<A>(_:)();
  if (LOBYTE(v17[0]) == 1)
  {
    uint64_t v1 = *(void *)&v0[OBJC_IVAR____TtC12searchpartyd28SecureLocationsStewieManager_cntProactiveAlerts];
    if (qword_101637080 != -1) {
      swift_once();
    }
    swift_retain();
    OS_dispatch_queue.sync<A>(execute:)();
    swift_release();
    long long v22 = v16[10];
    long long v23 = v16[11];
    long long v24 = v16[12];
    long long v18 = v16[6];
    long long v19 = v16[7];
    long long v20 = v16[8];
    long long v21 = v16[9];
    void v17[2] = v16[2];
    void v17[3] = v16[3];
    v17[4] = v16[4];
    v17[5] = v16[5];
    v17[0] = v16[0];
    v17[1] = v16[1];
    sub_100551984((uint64_t)v17);
    if (v1 < (uint64_t)v18) {
      return 1;
    }
    if (qword_101637070 != -1) {
      swift_once();
    }
    uint64_t v10 = type metadata accessor for Logger();
    sub_100010324(v10, (uint64_t)qword_10170EC30);
    os_log_type_t v4 = v0;
    uint64_t v11 = Logger.logObject.getter();
    os_log_type_t v12 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v11, v12))
    {
      uint64_t v13 = swift_slowAlloc();
      *(void *)&v16[0] = swift_slowAlloc();
      *(_DWORD *)uint64_t v13 = 136446466;
      uint64_t v14 = *(void *)&v4[OBJC_IVAR____TtC12searchpartyd28SecureLocationsStewieManager_stewieLogPrefix];
      unint64_t v15 = *(void *)&v4[OBJC_IVAR____TtC12searchpartyd28SecureLocationsStewieManager_stewieLogPrefix + 8];
      swift_bridgeObjectRetain();
      sub_1008FA0F0(v14, v15, (uint64_t *)v16);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      *(_WORD *)(v13 + 12) = 2048;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();

      _os_log_impl((void *)&_mh_execute_header, v11, v12, "%{public}s - we have already shown %ld alerts", (uint8_t *)v13, 0x16u);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      return 0;
    }

LABEL_16:
    return 0;
  }
  if (qword_101637070 != -1) {
    swift_once();
  }
  uint64_t v3 = type metadata accessor for Logger();
  sub_100010324(v3, (uint64_t)qword_10170EC30);
  os_log_type_t v4 = v0;
  uint64_t v5 = Logger.logObject.getter();
  os_log_type_t v6 = static os_log_type_t.default.getter();
  if (!os_log_type_enabled(v5, v6))
  {

    goto LABEL_16;
  }
  uint64_t v7 = (uint8_t *)swift_slowAlloc();
  *(void *)&v17[0] = swift_slowAlloc();
  *(_DWORD *)uint64_t v7 = 136446210;
  uint64_t v8 = *(void *)&v4[OBJC_IVAR____TtC12searchpartyd28SecureLocationsStewieManager_stewieLogPrefix];
  unint64_t v9 = *(void *)&v4[OBJC_IVAR____TtC12searchpartyd28SecureLocationsStewieManager_stewieLogPrefix + 8];
  swift_bridgeObjectRetain();
  *(void *)&v16[0] = sub_1008FA0F0(v8, v9, (uint64_t *)v17);
  UnsafeMutableRawBufferPointer.copyMemory(from:)();

  swift_bridgeObjectRelease();
  _os_log_impl((void *)&_mh_execute_header, v5, v6, "%{public}s - canPublishLocation is false. Not showing alert", v7, 0xCu);
  swift_arrayDestroy();
  swift_slowDealloc();
  swift_slowDealloc();

  return 0;
}

uint64_t sub_10108F884()
{
  uint64_t v1 = type metadata accessor for DispatchQoS();
  __chkstk_darwin(v1 - 8);
  uint64_t v3 = (char *)&v21 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = type metadata accessor for DispatchPredicate();
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v7 = (uint64_t *)((char *)&v21 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v8 = *(void **)&v0[OBJC_IVAR____TtC12searchpartyd28SecureLocationsStewieManager_clientQueue];
  *uint64_t v7 = v8;
  (*(void (**)(void *, void, uint64_t))(v5 + 104))(v7, enum case for DispatchPredicate.onQueue(_:), v4);
  id v9 = v8;
  LOBYTE(v8) = _dispatchPreconditionTest(_:)();
  (*(void (**)(void *, uint64_t))(v5 + 8))(v7, v4);
  if (v8)
  {
    if (qword_101637070 == -1) {
      goto LABEL_3;
    }
  }
  else
  {
    __break(1u);
  }
  swift_once();
LABEL_3:
  uint64_t v10 = type metadata accessor for Logger();
  sub_100010324(v10, (uint64_t)qword_10170EC30);
  uint64_t v11 = v0;
  os_log_type_t v12 = Logger.logObject.getter();
  os_log_type_t v13 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v12, v13))
  {
    uint64_t v14 = (uint8_t *)swift_slowAlloc();
    uint64_t v22 = swift_slowAlloc();
    *(_DWORD *)uint64_t v14 = 136446210;
    uint64_t v15 = *(void *)&v11[OBJC_IVAR____TtC12searchpartyd28SecureLocationsStewieManager_stewieLogPrefix];
    unint64_t v16 = *(void *)&v11[OBJC_IVAR____TtC12searchpartyd28SecureLocationsStewieManager_stewieLogPrefix + 8];
    swift_bridgeObjectRetain();
    uint64_t v21 = sub_1008FA0F0(v15, v16, &v22);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v12, v13, "%{public}s - checkinReminderNotificationTimer", v14, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
  }
  static DispatchQoS.default.getter();
  uint64_t v17 = swift_allocObject();
  swift_unknownObjectWeakInit();
  uint64_t v18 = swift_allocObject();
  swift_unknownObjectWeakInit();
  type metadata accessor for XPCActivity();
  swift_allocObject();
  uint64_t v19 = sub_1009D9B34(0xD000000000000045, (void *)0x8000000101420840, (uint64_t)v3, (uint64_t)sub_101099D34, v17, (uint64_t)sub_101099D3C, v18);
  swift_release();
  swift_release();
  *(void *)&v11[OBJC_IVAR____TtC12searchpartyd28SecureLocationsStewieManager_notificationTimer] = v19;
  return swift_release();
}

void sub_10108FC38(uint64_t a1@<X8>)
{
  swift_beginAccess();
  uint64_t Strong = swift_unknownObjectWeakLoadStrong();
  if (Strong)
  {
    uint64_t v3 = (void *)Strong;
    __chkstk_darwin(Strong);
    swift_retain();
    sub_10000588C(&qword_1016549D0);
    QueueSynchronizer.conditionalSync<A>(_:)();
    swift_release();

    long long v4 = v7;
    long long v5 = v8;
    uint64_t v6 = v9;
  }
  else
  {
    uint64_t v6 = 0;
    long long v4 = xmmword_101354090;
    long long v5 = 0uLL;
  }
  *(_OWORD *)a1 = v4;
  *(_OWORD *)(a1 + 16) = v5;
  *(void *)(a1 + 32) = v6;
}

int64x2_t sub_10108FD3C@<Q0>(int64x2_t *a1@<X0>, int64x2_t *a2@<X8>)
{
  if (qword_101637080 != -1) {
    swift_once();
  }
  uint64_t v4 = *(void *)(qword_10170EC60 + 144);
  swift_retain();
  OS_dispatch_queue.sync<A>(execute:)();
  swift_release();
  long long v37 = v30[10];
  long long v38 = v30[11];
  long long v39 = v30[12];
  long long v33 = v30[6];
  long long v34 = v30[7];
  long long v35 = v30[8];
  long long v36 = v30[9];
  void v31[2] = v30[2];
  v31[3] = v30[3];
  v31[4] = v30[4];
  long long v32 = v30[5];
  v31[0] = v30[0];
  v31[1] = v30[1];
  sub_100551984((uint64_t)v31);
  if ((~*((void *)&v32 + 1) & 0x7FF0000000000000) == 0)
  {
    __break(1u);
    goto LABEL_21;
  }
  if (*((double *)&v32 + 1) <= -9.22337204e18)
  {
LABEL_21:
    __break(1u);
    goto LABEL_22;
  }
  if (*((double *)&v32 + 1) < 9.22337204e18)
  {
    uint64_t v4 = (uint64_t)*((double *)&v32 + 1);
    if (qword_101637188 == -1) {
      goto LABEL_7;
    }
    goto LABEL_23;
  }
LABEL_22:
  __break(1u);
LABEL_23:
  swift_once();
LABEL_7:
  sub_100ECF824(0xD000000000000022, 0x8000000101420890, (void *)qword_10170EE68);
  uint64_t v6 = &qword_101637000;
  if ((v7 & 1) == 0)
  {
    uint64_t v8 = v5;
    if (qword_101637070 != -1) {
      swift_once();
    }
    uint64_t v9 = type metadata accessor for Logger();
    sub_100010324(v9, (uint64_t)qword_10170EC30);
    uint64_t v10 = a1;
    uint64_t v11 = Logger.logObject.getter();
    os_log_type_t v12 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v11, v12))
    {
      uint64_t v13 = swift_slowAlloc();
      uint64_t v40 = a1;
      uint64_t v14 = v13;
      *(void *)&v30[0] = swift_slowAlloc();
      *(_DWORD *)uint64_t v14 = 136446466;
      uint64_t v28 = v8;
      uint64_t v15 = *(void *)&v10[OBJC_IVAR____TtC12searchpartyd28SecureLocationsStewieManager_stewieLogPrefix];
      unint64_t v16 = *(void *)&v10[OBJC_IVAR____TtC12searchpartyd28SecureLocationsStewieManager_stewieLogPrefix + 8];
      swift_bridgeObjectRetain();
      sub_1008FA0F0(v15, v16, (uint64_t *)v30);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();

      swift_bridgeObjectRelease();
      *(_WORD *)(v14 + 12) = 2048;
      uint64_t v8 = v28;
      uint64_t v6 = &qword_101637000;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      _os_log_impl((void *)&_mh_execute_header, v11, v12, "%{public}s - using overriden value for alert delay %ld", (uint8_t *)v14, 0x16u);
      swift_arrayDestroy();
      swift_slowDealloc();
      a1 = v40;
      swift_slowDealloc();
    }
    else
    {
    }
    uint64_t v4 = v8;
  }
  uint64_t v17 = *(uint64_t *)((char *)a1->i64 + OBJC_IVAR____TtC12searchpartyd28SecureLocationsStewieManager_cntProactiveAlerts);
  uint64_t v18 = v4 * v17;
  if ((unsigned __int128)(v4 * (__int128)v17) >> 64 == (v4 * v17) >> 63)
  {
    if (v6[14] == -1) {
      goto LABEL_16;
    }
  }
  else
  {
    __break(1u);
  }
  swift_once();
LABEL_16:
  uint64_t v19 = type metadata accessor for Logger();
  sub_100010324(v19, (uint64_t)qword_10170EC30);
  long long v20 = a1;
  uint64_t v21 = Logger.logObject.getter();
  os_log_type_t v22 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v21, v22))
  {
    uint64_t v23 = swift_slowAlloc();
    uint64_t v40 = a2;
    uint64_t v24 = v23;
    *(void *)&v30[0] = swift_slowAlloc();
    *(_DWORD *)uint64_t v24 = 136446466;
    uint64_t v29 = v18;
    uint64_t v25 = *(void *)&v20[OBJC_IVAR____TtC12searchpartyd28SecureLocationsStewieManager_stewieLogPrefix];
    unint64_t v26 = *(void *)&v20[OBJC_IVAR____TtC12searchpartyd28SecureLocationsStewieManager_stewieLogPrefix + 8];
    swift_bridgeObjectRetain();
    sub_1008FA0F0(v25, v26, (uint64_t *)v30);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    uint64_t v18 = v29;
    swift_bridgeObjectRelease();
    *(_WORD *)(v24 + 12) = 2048;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl((void *)&_mh_execute_header, v21, v22, "%{public}s - returning xpc activity for reminder notification with delay %lld", (uint8_t *)v24, 0x16u);
    swift_arrayDestroy();
    swift_slowDealloc();
    a2 = v40;
    swift_slowDealloc();
  }
  else
  {
  }
  a2->i64[0] = 0;
  a2->i64[1] = v18;
  int64x2_t result = vdupq_n_s64(1uLL);
  a2[1] = result;
  a2[2].i64[0] = 514;
  return result;
}

void sub_101090274(uint64_t a1, uint64_t a2, int a3)
{
  int v49 = a3;
  uint64_t v5 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v8 = (char *)&v41 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = type metadata accessor for DispatchQoS();
  uint64_t v10 = *(void *)(v9 - 8);
  __chkstk_darwin(v9);
  os_log_type_t v12 = (char *)&v41 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_beginAccess();
  uint64_t Strong = swift_unknownObjectWeakLoadStrong();
  if (!Strong)
  {
    Transaction.capture()();
    return;
  }
  uint64_t v14 = (void *)Strong;
  uint64_t v47 = a1;
  uint64_t v48 = a2;
  uint64_t v41 = v12;
  if (qword_101637070 != -1) {
    swift_once();
  }
  uint64_t v15 = type metadata accessor for Logger();
  sub_100010324(v15, (uint64_t)qword_10170EC30);
  unint64_t v16 = v14;
  uint64_t v17 = Logger.logObject.getter();
  os_log_type_t v18 = static os_log_type_t.debug.getter();
  BOOL v19 = os_log_type_enabled(v17, v18);
  char v20 = v49;
  uint64_t v45 = v6;
  uint64_t v46 = v5;
  char v43 = v8;
  uint64_t v44 = v9;
  uint64_t v42 = v10;
  if (v19)
  {
    uint64_t v21 = swift_slowAlloc();
    aBlock[0] = swift_slowAlloc();
    *(_DWORD *)uint64_t v21 = 136446466;
    uint64_t v22 = *(void *)&v16[OBJC_IVAR____TtC12searchpartyd28SecureLocationsStewieManager_stewieLogPrefix];
    unint64_t v23 = *(void *)&v16[OBJC_IVAR____TtC12searchpartyd28SecureLocationsStewieManager_stewieLogPrefix + 8];
    swift_bridgeObjectRetain();
    uint64_t v50 = (void *)sub_1008FA0F0(v22, v23, aBlock);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    swift_bridgeObjectRelease();
    *(_WORD *)(v21 + 12) = 2080;
    LOBYTE(v50) = v20;
    uint64_t v24 = String.init<A>(describing:)();
    uint64_t v50 = (void *)sub_1008FA0F0(v24, v25, aBlock);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v17, v18, "%{public}s - state block fired %s", (uint8_t *)v21, 0x16u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
  }
  uint64_t v27 = v47;
  uint64_t v26 = v48;
  if (v20 == 3)
  {
    Transaction.capture()();
    sub_1009D7368();
LABEL_14:

    return;
  }
  if (v20 != 2)
  {
    Transaction.capture()();
    goto LABEL_14;
  }
  uint64_t v28 = v16;
  uint64_t v29 = Logger.logObject.getter();
  os_log_type_t v30 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v29, v30))
  {
    char v31 = (uint8_t *)swift_slowAlloc();
    aBlock[0] = swift_slowAlloc();
    *(_DWORD *)char v31 = 136446210;
    uint64_t v32 = *(void *)&v28[OBJC_IVAR____TtC12searchpartyd28SecureLocationsStewieManager_stewieLogPrefix];
    unint64_t v33 = *(void *)&v28[OBJC_IVAR____TtC12searchpartyd28SecureLocationsStewieManager_stewieLogPrefix + 8];
    swift_bridgeObjectRetain();
    uint64_t v50 = (void *)sub_1008FA0F0(v32, v33, aBlock);
    uint64_t v26 = v48;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v29, v30, "%{public}s - publishReminder timer fired", v31, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
  }
  uint64_t v34 = v44;
  long long v35 = v41;
  long long v36 = (void *)swift_allocObject();
  void v36[2] = v26;
  v36[3] = v27;
  v36[4] = v28;
  aBlock[4] = (uint64_t)sub_101099D8C;
  aBlock[5] = (uint64_t)v36;
  aBlock[0] = (uint64_t)_NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  uint64_t aBlock[2] = (uint64_t)sub_1004B5480;
  aBlock[3] = (uint64_t)&unk_101605290;
  long long v37 = _Block_copy(aBlock);
  long long v38 = v28;
  swift_retain();
  swift_retain();
  static DispatchQoS.unspecified.getter();
  uint64_t v50 = _swiftEmptyArrayStorage;
  sub_10109A964((unint64_t *)&qword_10163B7E0, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
  sub_10000588C((uint64_t *)&unk_10163F350);
  sub_100062734((unint64_t *)&qword_10163B7F0, (uint64_t *)&unk_10163F350);
  long long v39 = v43;
  uint64_t v40 = v46;
  dispatch thunk of SetAlgebra.init<A>(_:)();
  OS_dispatch_queue.async(group:qos:flags:execute:)();
  _Block_release(v37);
  (*(void (**)(char *, uint64_t))(v45 + 8))(v39, v40);
  (*(void (**)(char *, uint64_t))(v42 + 8))(v35, v34);

  swift_release();
}

BOOL sub_1010908D0(uint64_t a1, uint64_t a2, char *a3)
{
  uint64_t v6 = sub_10000588C(&qword_101669310);
  __chkstk_darwin(v6 - 8);
  uint64_t v8 = (char *)&v30 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_101637118 != -1) {
    swift_once();
  }
  if (sub_10109908C(0x8000))
  {
    if (qword_101637070 != -1) {
      swift_once();
    }
    uint64_t v9 = type metadata accessor for Logger();
    sub_100010324(v9, (uint64_t)qword_10170EC30);
    uint64_t v10 = a3;
    uint64_t v11 = Logger.logObject.getter();
    os_log_type_t v12 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v11, v12))
    {
      uint64_t v13 = (uint8_t *)swift_slowAlloc();
      uint64_t v14 = swift_slowAlloc();
      uint64_t v31 = a1;
      v34[0] = v14;
      *(_DWORD *)uint64_t v13 = 136446210;
      uint64_t v15 = *(void *)&v10[OBJC_IVAR____TtC12searchpartyd28SecureLocationsStewieManager_stewieLogPrefix];
      unint64_t v16 = *(void *)&v10[OBJC_IVAR____TtC12searchpartyd28SecureLocationsStewieManager_stewieLogPrefix + 8];
      swift_bridgeObjectRetain();
      uint64_t v33 = sub_1008FA0F0(v15, v16, v34);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();

      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v11, v12, "%{public}s - reminderNotification is already present. Not showing alert", v13, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
    }
  }
  else
  {
    uint64_t v17 = (uint64_t)&a3[OBJC_IVAR____TtC12searchpartyd28SecureLocationsStewieManager_lastPublishedLocation];
    swift_beginAccess();
    sub_10001D074(v17, (uint64_t)v8, &qword_101669310);
    uint64_t v18 = type metadata accessor for SecureLocation();
    LODWORD(v17) = (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(void *)(v18 - 8) + 48))(v8, 1, v18);
    sub_10001DAB4((uint64_t)v8, &qword_101669310);
    if (v17 == 1)
    {
      if (qword_101637070 != -1) {
        swift_once();
      }
      uint64_t v19 = type metadata accessor for Logger();
      sub_100010324(v19, (uint64_t)qword_10170EC30);
      char v20 = a3;
      uint64_t v21 = Logger.logObject.getter();
      os_log_type_t v22 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v21, v22))
      {
        unint64_t v23 = (uint8_t *)swift_slowAlloc();
        uint64_t v24 = swift_slowAlloc();
        uint64_t v31 = a2;
        uint64_t v33 = v24;
        *(_DWORD *)unint64_t v23 = 136446210;
        uint64_t v26 = *(void *)&v20[OBJC_IVAR____TtC12searchpartyd28SecureLocationsStewieManager_stewieLogPrefix];
        unint64_t v25 = *(void *)&v20[OBJC_IVAR____TtC12searchpartyd28SecureLocationsStewieManager_stewieLogPrefix + 8];
        swift_bridgeObjectRetain();
        uint64_t v32 = sub_1008FA0F0(v26, v25, &v33);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();

        swift_bridgeObjectRelease();
        _os_log_impl((void *)&_mh_execute_header, v21, v22, "%{public}s - no last published location to compare distance threshold", v23, 0xCu);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
      }
      else
      {
      }
      uint64_t v28 = type metadata accessor for Transaction();
      __chkstk_darwin(v28);
      *(&v30 - 2) = (uint64_t)v20;
      *((unsigned char *)&v30 - 8) = 0;
      static Transaction.named<A>(_:with:)();
    }
    else
    {
      id v27 = *(id *)&a3[OBJC_IVAR____TtC12searchpartyd28SecureLocationsStewieManager_locationMonitorDistanceThreshold];
      CurrentLocationMonitor.requestLocation()();
    }
  }
  Transaction.capture()();
  return sub_1009D7390();
}

uint64_t sub_101090DC8()
{
  uint64_t v1 = type metadata accessor for DispatchPredicate();
  uint64_t v2 = *(void *)(v1 - 8);
  __chkstk_darwin(v1);
  uint64_t v4 = (void *)((char *)v17 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v5 = *(void **)&v0[OBJC_IVAR____TtC12searchpartyd28SecureLocationsStewieManager_clientQueue];
  *uint64_t v4 = v5;
  (*(void (**)(void *, void, uint64_t))(v2 + 104))(v4, enum case for DispatchPredicate.onQueue(_:), v1);
  id v6 = v5;
  LOBYTE(v5) = _dispatchPreconditionTest(_:)();
  (*(void (**)(void *, uint64_t))(v2 + 8))(v4, v1);
  if (v5)
  {
    if (qword_101637070 == -1) {
      goto LABEL_3;
    }
  }
  else
  {
    __break(1u);
  }
  swift_once();
LABEL_3:
  uint64_t v7 = type metadata accessor for Logger();
  sub_100010324(v7, (uint64_t)qword_10170EC30);
  uint64_t v8 = v0;
  uint64_t v9 = Logger.logObject.getter();
  os_log_type_t v10 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v9, v10))
  {
    uint64_t v11 = (uint8_t *)swift_slowAlloc();
    uint64_t v18 = swift_slowAlloc();
    *(_DWORD *)uint64_t v11 = 136446210;
    uint64_t v12 = *(void *)&v8[OBJC_IVAR____TtC12searchpartyd28SecureLocationsStewieManager_stewieLogPrefix];
    unint64_t v13 = *(void *)&v8[OBJC_IVAR____TtC12searchpartyd28SecureLocationsStewieManager_stewieLogPrefix + 8];
    swift_bridgeObjectRetain();
    v17[1] = sub_1008FA0F0(v12, v13, &v18);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v9, v10, "%{public}s - scheduling notification timer", v11, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
  }
  uint64_t v14 = *(void *)&v8[OBJC_IVAR____TtC12searchpartyd28SecureLocationsStewieManager_notificationTimer];
  uint64_t v15 = type metadata accessor for Transaction();
  __chkstk_darwin(v15);
  v17[-2] = v8;
  v17[-1] = v14;
  swift_retain();
  static Transaction.named<A>(_:with:)();
  return swift_release();
}

uint64_t sub_1010910E8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v16 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v7 = (char *)&v14 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = type metadata accessor for DispatchQoS();
  uint64_t v8 = *(void *)(v15 - 8);
  __chkstk_darwin(v15);
  os_log_type_t v10 = (char *)&v14 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = swift_allocObject();
  *(void *)(v11 + 16) = a1;
  *(void *)(v11 + 24) = a3;
  aBlock[4] = sub_101023B3C;
  aBlock[5] = v11;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  uint64_t aBlock[2] = sub_1004B5480;
  aBlock[3] = &unk_101605218;
  uint64_t v12 = _Block_copy(aBlock);
  swift_retain();
  swift_retain();
  static DispatchQoS.unspecified.getter();
  uint64_t aBlock[7] = _swiftEmptyArrayStorage;
  sub_10109A964((unint64_t *)&qword_10163B7E0, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
  sub_10000588C((uint64_t *)&unk_10163F350);
  sub_100062734((unint64_t *)&qword_10163B7F0, (uint64_t *)&unk_10163F350);
  dispatch thunk of SetAlgebra.init<A>(_:)();
  OS_dispatch_queue.async(group:qos:flags:execute:)();
  _Block_release(v12);
  (*(void (**)(char *, uint64_t))(v16 + 8))(v7, v5);
  (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v15);
  return swift_release();
}

uint64_t sub_1010913C8(uint64_t a1, char *a2, char a3)
{
  uint64_t v6 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  uint64_t v9 = (char *)v17 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v18 = type metadata accessor for DispatchQoS();
  uint64_t v10 = *(void *)(v18 - 8);
  __chkstk_darwin(v18);
  uint64_t v12 = (char *)v17 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17[1] = *(void *)&a2[OBJC_IVAR____TtC12searchpartyd28SecureLocationsStewieManager_clientQueue];
  uint64_t v13 = swift_allocObject();
  *(void *)(v13 + 16) = a1;
  *(void *)(v13 + 24) = a2;
  *(unsigned char *)(v13 + 32) = a3;
  aBlock[4] = sub_101094404;
  aBlock[5] = v13;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  uint64_t aBlock[2] = sub_1004B5480;
  aBlock[3] = &unk_101605060;
  uint64_t v14 = _Block_copy(aBlock);
  swift_retain();
  uint64_t v15 = a2;
  static DispatchQoS.unspecified.getter();
  uint64_t aBlock[7] = _swiftEmptyArrayStorage;
  sub_10109A964((unint64_t *)&qword_10163B7E0, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
  sub_10000588C((uint64_t *)&unk_10163F350);
  sub_100062734((unint64_t *)&qword_10163B7F0, (uint64_t *)&unk_10163F350);
  dispatch thunk of SetAlgebra.init<A>(_:)();
  OS_dispatch_queue.async(group:qos:flags:execute:)();
  _Block_release(v14);
  (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
  (*(void (**)(char *, uint64_t))(v10 + 8))(v12, v18);
  return swift_release();
}

void sub_1010916A8(uint64_t a1, void *a2, char a3)
{
  if ((sub_10108F428() & 1) == 0 && (a3 & 1) == 0)
  {
    if (qword_101637070 != -1) {
      swift_once();
    }
    uint64_t v5 = type metadata accessor for Logger();
    sub_100010324(v5, (uint64_t)qword_10170EC30);
    uint64_t v6 = a2;
    uint64_t v7 = Logger.logObject.getter();
    os_log_type_t v8 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v7, v8))
    {
      uint64_t v9 = (uint8_t *)swift_slowAlloc();
      *(void *)&v45[0] = swift_slowAlloc();
      *(_DWORD *)uint64_t v9 = 136446210;
      uint64_t v10 = *(void *)&v6[OBJC_IVAR____TtC12searchpartyd28SecureLocationsStewieManager_stewieLogPrefix];
      unint64_t v11 = *(void *)&v6[OBJC_IVAR____TtC12searchpartyd28SecureLocationsStewieManager_stewieLogPrefix + 8];
      swift_bridgeObjectRetain();
      *(void *)&long long aBlock = sub_1008FA0F0(v10, v11, (uint64_t *)v45);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();

      swift_bridgeObjectRelease();
      uint64_t v12 = "%{public}s - conditions not satisfied for posting user notification";
LABEL_25:
      _os_log_impl((void *)&_mh_execute_header, v7, v8, v12, v9, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      goto LABEL_27;
    }
    goto LABEL_26;
  }
  if (qword_101637070 != -1) {
    swift_once();
  }
  uint64_t v13 = type metadata accessor for Logger();
  sub_100010324(v13, (uint64_t)qword_10170EC30);
  uint64_t v14 = a2;
  uint64_t v15 = Logger.logObject.getter();
  os_log_type_t v16 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v15, v16))
  {
    uint64_t v17 = (uint8_t *)swift_slowAlloc();
    *(void *)&v45[0] = swift_slowAlloc();
    *(_DWORD *)uint64_t v17 = 136446210;
    uint64_t v19 = *(void *)&v14[OBJC_IVAR____TtC12searchpartyd28SecureLocationsStewieManager_stewieLogPrefix];
    unint64_t v18 = *(void *)&v14[OBJC_IVAR____TtC12searchpartyd28SecureLocationsStewieManager_stewieLogPrefix + 8];
    swift_bridgeObjectRetain();
    *(void *)&long long aBlock = sub_1008FA0F0(v19, v18, (uint64_t *)v45);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v15, v16, "%{public}s - posting publish reminder notification", v17, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
  }
  if (qword_101637118 != -1) {
    swift_once();
  }
  sub_101099564(0x8000u, 0, 0);
  uint64_t v20 = OBJC_IVAR____TtC12searchpartyd28SecureLocationsStewieManager_cntProactiveAlerts;
  uint64_t v21 = *(void *)&v14[OBJC_IVAR____TtC12searchpartyd28SecureLocationsStewieManager_cntProactiveAlerts];
  if (qword_101637440 != -1) {
    swift_once();
  }
  type metadata accessor for Transaction();
  uint64_t v22 = swift_allocObject();
  *(void *)(v22 + 16) = v21;
  *(unsigned char *)(v22 + 24) = 0;
  swift_retain();
  static Transaction.asyncTask(name:block:)();
  swift_release();
  swift_release();
  uint64_t v23 = *(void *)&v14[v20];
  uint64_t v24 = v23 + 1;
  if (__OFADD__(v23, 1))
  {
    __break(1u);
  }
  else
  {
    *(void *)&v14[v20] = v24;
    if (qword_101637080 == -1) {
      goto LABEL_18;
    }
  }
  swift_once();
LABEL_18:
  swift_retain();
  OS_dispatch_queue.sync<A>(execute:)();
  swift_release();
  long long v50 = v42;
  long long v51 = v43;
  long long v52 = v44;
  long long v46 = v38;
  long long v47 = v39;
  long long v48 = v40;
  long long v49 = v41;
  v45[2] = v34;
  v45[3] = v35;
  v45[4] = v36;
  v45[5] = v37;
  v45[0] = aBlock;
  v45[1] = v33;
  sub_100551984((uint64_t)v45);
  if (v24 >= (uint64_t)v46)
  {
LABEL_27:
    Transaction.capture()();
    return;
  }
  uint64_t v25 = OBJC_IVAR____TtC12searchpartyd28SecureLocationsStewieManager_notificationTimer;
  uint64_t v26 = *(void *)&v14[OBJC_IVAR____TtC12searchpartyd28SecureLocationsStewieManager_notificationTimer];
  if (!v26)
  {
LABEL_23:
    uint64_t v6 = v14;
    uint64_t v7 = Logger.logObject.getter();
    os_log_type_t v8 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v7, v8))
    {
      uint64_t v9 = (uint8_t *)swift_slowAlloc();
      *(void *)&long long aBlock = swift_slowAlloc();
      *(_DWORD *)uint64_t v9 = 136446210;
      uint64_t v30 = *(void *)&v6[OBJC_IVAR____TtC12searchpartyd28SecureLocationsStewieManager_stewieLogPrefix];
      unint64_t v31 = *(void *)&v6[OBJC_IVAR____TtC12searchpartyd28SecureLocationsStewieManager_stewieLogPrefix + 8];
      swift_bridgeObjectRetain();
      sub_1008FA0F0(v30, v31, (uint64_t *)&aBlock);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();

      swift_bridgeObjectRelease();
      uint64_t v12 = "%{public}s - scheduled next reminder alert";
      goto LABEL_25;
    }
LABEL_26:

    goto LABEL_27;
  }
  id v27 = *(NSObject **)(v26 + 16);
  uint64_t v28 = swift_allocObject();
  *(void *)(v28 + 16) = sub_100550644;
  *(void *)(v28 + 24) = v26;
  *(void *)&long long v34 = sub_100132424;
  *((void *)&v34 + 1) = v28;
  *(void *)&long long aBlock = _NSConcreteStackBlock;
  *((void *)&aBlock + 1) = 1107296256;
  *(void *)&long long v33 = sub_1000A70B0;
  *((void *)&v33 + 1) = &unk_1016050D8;
  uint64_t v29 = _Block_copy(&aBlock);
  swift_retain_n();
  swift_retain();
  swift_release();
  dispatch_sync(v27, v29);
  _Block_release(v29);
  LOBYTE(v27) = swift_isEscapingClosureAtFileLocation();
  swift_release_n();
  swift_release();
  if ((v27 & 1) == 0)
  {
    if (*(void *)&v14[v25])
    {
      swift_retain();
      OSAllocatedUnfairLock.callAsFunction<A>(_:)();
      swift_release();
    }
    goto LABEL_23;
  }
  __break(1u);
}

uint64_t sub_101091DF4(char a1)
{
  if ((a1 & 1) == 0) {
    goto LABEL_4;
  }
  uint64_t v2 = *(void *)(v1 + OBJC_IVAR____TtC12searchpartyd28SecureLocationsStewieManager_notificationTimer);
  if (!v2) {
    goto LABEL_4;
  }
  uint64_t v3 = *(NSObject **)(v2 + 16);
  uint64_t v4 = swift_allocObject();
  *(void *)(v4 + 16) = sub_100550644;
  *(void *)(v4 + 24) = v2;
  v7[4] = sub_1003B7AE0;
  _OWORD v7[5] = v4;
  v7[0] = _NSConcreteStackBlock;
  v7[1] = 1107296256;
  _OWORD v7[2] = sub_1000A70B0;
  v7[3] = &unk_101605178;
  uint64_t v5 = _Block_copy(v7);
  swift_retain_n();
  swift_retain();
  swift_release();
  dispatch_sync(v3, v5);
  _Block_release(v5);
  LOBYTE(v3) = swift_isEscapingClosureAtFileLocation();
  swift_release_n();
  uint64_t result = swift_release();
  if (v3)
  {
    __break(1u);
  }
  else
  {
LABEL_4:
    *(void *)(v1 + OBJC_IVAR____TtC12searchpartyd28SecureLocationsStewieManager_cntProactiveAlerts) = 1;
    if (qword_101637118 != -1) {
      swift_once();
    }
    return sub_101098E30(0x8000);
  }
  return result;
}

id sub_101091FBC()
{
  v2.uint64_t receiver = v0;
  v2.super_class = (Class)type metadata accessor for SecureLocationsStewieManager();
  return [super dealloc];
}

uint64_t sub_101092148()
{
  return type metadata accessor for SecureLocationsStewieManager();
}

uint64_t type metadata accessor for SecureLocationsStewieManager()
{
  uint64_t result = qword_101669178;
  if (!qword_101669178) {
    return swift_getSingletonMetadata();
  }
  return result;
}

void sub_10109219C()
{
  sub_101092324(319, (unint64_t *)&unk_101669188, (void (*)(uint64_t))type metadata accessor for SecureLocation);
  if (v0 <= 0x3F)
  {
    sub_101092324(319, (unint64_t *)&qword_10165C690, (void (*)(uint64_t))&type metadata accessor for Date);
    if (v1 <= 0x3F) {
      swift_updateClassMetadata2();
    }
  }
}

void sub_101092324(uint64_t a1, unint64_t *a2, void (*a3)(uint64_t))
{
  if (!*a2)
  {
    a3(255);
    unint64_t v4 = type metadata accessor for Optional();
    if (!v5) {
      atomic_store(v4, a2);
    }
  }
}

void sub_101092420(void *a1)
{
  uint64_t v3 = type metadata accessor for DispatchPredicate();
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  uint64_t v6 = (uint64_t *)((char *)&v21 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v7 = *(void **)&v1[OBJC_IVAR____TtC12searchpartyd28SecureLocationsStewieManager_clientQueue];
  *uint64_t v6 = v7;
  (*(void (**)(void *, void, uint64_t))(v4 + 104))(v6, enum case for DispatchPredicate.onQueue(_:), v3);
  id v8 = v7;
  LOBYTE(v7) = _dispatchPreconditionTest(_:)();
  (*(void (**)(void *, uint64_t))(v4 + 8))(v6, v3);
  if (v7)
  {
    if (qword_101637070 == -1) {
      goto LABEL_3;
    }
  }
  else
  {
    __break(1u);
  }
  swift_once();
LABEL_3:
  uint64_t v9 = type metadata accessor for Logger();
  sub_100010324(v9, (uint64_t)qword_10170EC30);
  uint64_t v10 = v1;
  id v11 = a1;
  uint64_t v12 = v10;
  id v13 = v11;
  uint64_t v14 = Logger.logObject.getter();
  os_log_type_t v15 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v14, v15))
  {
    uint64_t v16 = swift_slowAlloc();
    uint64_t v17 = (void *)swift_slowAlloc();
    uint64_t v22 = swift_slowAlloc();
    uint64_t v24 = v22;
    *(_DWORD *)uint64_t v16 = 136446466;
    uint64_t v18 = *(void *)&v12[OBJC_IVAR____TtC12searchpartyd28SecureLocationsStewieManager_stewieLogPrefix];
    unint64_t v19 = *(void *)&v12[OBJC_IVAR____TtC12searchpartyd28SecureLocationsStewieManager_stewieLogPrefix + 8];
    swift_bridgeObjectRetain();
    uint64_t v23 = sub_1008FA0F0(v18, v19, &v24);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    swift_bridgeObjectRelease();
    *(_WORD *)(v16 + 12) = 2112;
    uint64_t v23 = (uint64_t)v13;
    id v20 = v13;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *uint64_t v17 = v13;

    _os_log_impl((void *)&_mh_execute_header, v14, v15, "%{public}s - stateChanged %@", (uint8_t *)v16, 0x16u);
    sub_10000588C((uint64_t *)&unk_101638EA0);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
  }
  sub_10108DF14(v13, 0);
}

void sub_1010927CC(char a1)
{
  uint64_t v3 = v1;
  uint64_t v5 = type metadata accessor for DispatchPredicate();
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  id v8 = (void *)((char *)v31 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v9 = *(void **)&v3[OBJC_IVAR____TtC12searchpartyd28SecureLocationsStewieManager_clientQueue];
  *id v8 = v9;
  (*(void (**)(void *, void, uint64_t))(v6 + 104))(v8, enum case for DispatchPredicate.onQueue(_:), v5);
  id v10 = v9;
  LOBYTE(v9) = _dispatchPreconditionTest(_:)();
  (*(void (**)(void *, uint64_t))(v6 + 8))(v8, v5);
  if (v9)
  {
    uint64_t v2 = OBJC_IVAR____TtC12searchpartyd28SecureLocationsStewieManager_isFindMyServiceConnectedToStewie;
    v3[OBJC_IVAR____TtC12searchpartyd28SecureLocationsStewieManager_isFindMyServiceConnectedToStewie] = (a1 & 4) != 0;
    if (qword_101637070 == -1) {
      goto LABEL_3;
    }
  }
  else
  {
    __break(1u);
  }
  swift_once();
LABEL_3:
  uint64_t v11 = type metadata accessor for Logger();
  uint64_t v12 = sub_100010324(v11, (uint64_t)qword_10170EC30);
  id v13 = v3;
  uint64_t v14 = Logger.logObject.getter();
  os_log_type_t v15 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v14, v15))
  {
    uint64_t v16 = swift_slowAlloc();
    v31[1] = v12;
    uint64_t v17 = v16;
    uint64_t v33 = swift_slowAlloc();
    *(_DWORD *)uint64_t v17 = 136446466;
    uint64_t v18 = *(void *)&v13[OBJC_IVAR____TtC12searchpartyd28SecureLocationsStewieManager_stewieLogPrefix];
    unint64_t v19 = *(void *)&v13[OBJC_IVAR____TtC12searchpartyd28SecureLocationsStewieManager_stewieLogPrefix + 8];
    swift_bridgeObjectRetain();
    uint64_t v32 = sub_1008FA0F0(v18, v19, &v33);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    *(_WORD *)(v17 + 12) = 1024;
    LODWORD(v32) = v3[v2];
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    _os_log_impl((void *)&_mh_execute_header, v14, v15, "%{public}s - connectedServicesChanged: %{BOOL}d", (uint8_t *)v17, 0x12u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
  }
  int v20 = v3[v2];
  uint64_t v21 = v13;
  uint64_t v22 = Logger.logObject.getter();
  os_log_type_t v23 = static os_log_type_t.default.getter();
  BOOL v24 = os_log_type_enabled(v22, v23);
  if (v20 == 1)
  {
    if (v24)
    {
      uint64_t v25 = (uint8_t *)swift_slowAlloc();
      uint64_t v33 = swift_slowAlloc();
      *(_DWORD *)uint64_t v25 = 136446210;
      uint64_t v26 = *(void *)&v21[OBJC_IVAR____TtC12searchpartyd28SecureLocationsStewieManager_stewieLogPrefix];
      unint64_t v27 = *(void *)&v21[OBJC_IVAR____TtC12searchpartyd28SecureLocationsStewieManager_stewieLogPrefix + 8];
      swift_bridgeObjectRetain();
      uint64_t v32 = sub_1008FA0F0(v26, v27, &v33);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();

      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v22, v23, "%{public}s - findMy is part of connected services. we can publish", v25, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
    }
    sub_101083934();
  }
  else
  {
    if (v24)
    {
      uint64_t v28 = (uint8_t *)swift_slowAlloc();
      uint64_t v33 = swift_slowAlloc();
      *(_DWORD *)uint64_t v28 = 136446210;
      uint64_t v29 = *(void *)&v21[OBJC_IVAR____TtC12searchpartyd28SecureLocationsStewieManager_stewieLogPrefix];
      unint64_t v30 = *(void *)&v21[OBJC_IVAR____TtC12searchpartyd28SecureLocationsStewieManager_stewieLogPrefix + 8];
      swift_bridgeObjectRetain();
      uint64_t v32 = sub_1008FA0F0(v29, v30, &v33);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();

      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v22, v23, "%{public}s - findMy is not connected", v28, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
    }
    sub_1010885CC();
  }
}

uint64_t sub_101092D24()
{
  if (qword_101637070 != -1) {
    swift_once();
  }
  uint64_t v1 = type metadata accessor for Logger();
  sub_100010324(v1, (uint64_t)qword_10170EC30);
  uint64_t v2 = v0;
  uint64_t v3 = Logger.logObject.getter();
  os_log_type_t v4 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v3, v4))
  {
    uint64_t v5 = (uint8_t *)swift_slowAlloc();
    uint64_t v10 = swift_slowAlloc();
    *(_DWORD *)uint64_t v5 = 136446210;
    uint64_t v6 = *(void *)&v2[OBJC_IVAR____TtC12searchpartyd28SecureLocationsStewieManager_stewieLogPrefix];
    unint64_t v7 = *(void *)&v2[OBJC_IVAR____TtC12searchpartyd28SecureLocationsStewieManager_stewieLogPrefix + 8];
    swift_bridgeObjectRetain();
    sub_1008FA0F0(v6, v7, &v10);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v3, v4, "%{public}s - supportChanged notification ", v5, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
  }
  __chkstk_darwin(v8);
  QueueSynchronizer.conditionalSync<A>(_:)();
  return sub_10108A2B8();
}

void sub_101092F9C(uint64_t a1, uint64_t a2, void *a3)
{
  if (a3)
  {
    if (*(void *)(v3 + OBJC_IVAR____TtC12searchpartyd28SecureLocationsStewieManager_locationMonitorDistanceThreshold) == a1)
    {
      uint64_t v5 = type metadata accessor for Transaction();
      __chkstk_darwin(v5);
      id v6 = a3;
      static Transaction.named<A>(_:with:)();
    }
  }
}

uint64_t sub_101093070(uint64_t a1, char *a2, void *a3)
{
  uint64_t v6 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  uint64_t v9 = (char *)v18 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v19 = type metadata accessor for DispatchQoS();
  uint64_t v10 = *(void *)(v19 - 8);
  __chkstk_darwin(v19);
  uint64_t v12 = (char *)v18 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18[1] = *(void *)&a2[OBJC_IVAR____TtC12searchpartyd28SecureLocationsStewieManager_clientQueue];
  id v13 = (void *)swift_allocObject();
  void v13[2] = a1;
  v13[3] = a2;
  v13[4] = a3;
  aBlock[4] = sub_1010943D8;
  aBlock[5] = v13;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  uint64_t aBlock[2] = sub_1004B5480;
  aBlock[3] = &unk_101605010;
  uint64_t v14 = _Block_copy(aBlock);
  swift_retain();
  os_log_type_t v15 = a2;
  id v16 = a3;
  static DispatchQoS.unspecified.getter();
  uint64_t aBlock[7] = _swiftEmptyArrayStorage;
  sub_10109A964((unint64_t *)&qword_10163B7E0, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
  sub_10000588C((uint64_t *)&unk_10163F350);
  sub_100062734((unint64_t *)&qword_10163B7F0, (uint64_t *)&unk_10163F350);
  dispatch thunk of SetAlgebra.init<A>(_:)();
  OS_dispatch_queue.async(group:qos:flags:execute:)();
  _Block_release(v14);
  (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
  (*(void (**)(char *, uint64_t))(v10 + 8))(v12, v19);
  return swift_release();
}

void sub_101093354(uint64_t a1, char *a2, void *a3)
{
  uint64_t v5 = sub_10000588C(&qword_101669310);
  __chkstk_darwin(v5 - 8);
  uint64_t v7 = (char *)&v36 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for SecureLocation();
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  uint64_t v11 = (double *)((char *)&v36 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v12 = (uint64_t)&a2[OBJC_IVAR____TtC12searchpartyd28SecureLocationsStewieManager_lastPublishedLocation];
  swift_beginAccess();
  sub_10001D074(v12, (uint64_t)v7, &qword_101669310);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v7, 1, v8) == 1)
  {
    sub_10001DAB4((uint64_t)v7, &qword_101669310);
    uint64_t v13 = type metadata accessor for Transaction();
    __chkstk_darwin(v13);
    *(&v36 - 2) = (uint64_t)a2;
    *((unsigned char *)&v36 - 8) = 0;
    static Transaction.named<A>(_:with:)();
  }
  else
  {
    sub_1009F9AD4((uint64_t)v7, (uint64_t)v11);
    double v15 = v11[2];
    double v14 = v11[3];
    double v17 = v11[7];
    double v16 = v11[8];
    double v19 = v11[4];
    double v18 = v11[5];
    double v20 = v11[6];
    id v21 = objc_allocWithZone((Class)CLLocation);
    Class isa = Date._bridgeToObjectiveC()().super.isa;
    id v23 = [v21 initWithCoordinate:isa, v14, v15, v16, v18, v19, v17, v20];

    [a3 distanceFromLocation:v23];
    double v25 = v24;
    if (qword_101637080 != -1) {
      swift_once();
    }
    swift_retain();
    OS_dispatch_queue.sync<A>(execute:)();
    swift_release();
    long long v45 = v40[10];
    long long v46 = v40[11];
    long long v47 = v40[12];
    v41[6] = v40[6];
    long long v42 = v40[7];
    long long v43 = v40[8];
    long long v44 = v40[9];
    void v41[2] = v40[2];
    v41[3] = v40[3];
    v41[4] = v40[4];
    v41[5] = v40[5];
    v41[0] = v40[0];
    v41[1] = v40[1];
    sub_100551984((uint64_t)v41);
    uint64_t v26 = v42;
    if (*(double *)&v42 <= v25)
    {
      uint64_t v34 = type metadata accessor for Transaction();
      __chkstk_darwin(v34);
      *(&v36 - 2) = (uint64_t)a2;
      *((unsigned char *)&v36 - 8) = 0;
      static Transaction.named<A>(_:with:)();
      id v35 = *(id *)&a2[OBJC_IVAR____TtC12searchpartyd28SecureLocationsStewieManager_locationMonitorDistanceThreshold];
      CurrentLocationMonitor.stopMonitor()();
    }
    else
    {
      if (qword_101637070 != -1) {
        swift_once();
      }
      uint64_t v27 = type metadata accessor for Logger();
      sub_100010324(v27, (uint64_t)qword_10170EC30);
      uint64_t v28 = a2;
      uint64_t v29 = Logger.logObject.getter();
      os_log_type_t v30 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v29, v30))
      {
        uint64_t v31 = swift_slowAlloc();
        uint64_t v37 = swift_slowAlloc();
        *(void *)&v40[0] = v37;
        *(_DWORD *)uint64_t v31 = 136446722;
        id v38 = v23;
        uint64_t v32 = *(void *)&v28[OBJC_IVAR____TtC12searchpartyd28SecureLocationsStewieManager_stewieLogPrefix];
        unint64_t v33 = *(void *)&v28[OBJC_IVAR____TtC12searchpartyd28SecureLocationsStewieManager_stewieLogPrefix + 8];
        swift_bridgeObjectRetain();
        uint64_t v39 = sub_1008FA0F0(v32, v33, (uint64_t *)v40);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();

        swift_bridgeObjectRelease();
        *(_WORD *)(v31 + 12) = 2048;
        uint64_t v39 = *(void *)&v25;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        *(_WORD *)(v31 + 22) = 2048;
        uint64_t v39 = v26;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        _os_log_impl((void *)&_mh_execute_header, v29, v30, "%{public}s - not posting publish reminder notification. distanceMoved %f is less than configThreshold %f", (uint8_t *)v31, 0x20u);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
      }
      else
      {
      }
    }
    sub_10109AA14((uint64_t)v11, (uint64_t (*)(void))type metadata accessor for SecureLocation);
  }
  Transaction.capture()();
}

uint64_t sub_101093940()
{
  uint64_t v0 = String.utf8Data.getter();
  unint64_t v2 = v1;
  sub_1000362FC();
  DataProtocol.stableUUID.getter();
  return sub_10001CFB8(v0, v2);
}

uint64_t sub_1010939C0()
{
  uint64_t v0 = type metadata accessor for LocalizationUtility.Table();
  uint64_t v1 = *(void *)(v0 - 8);
  __chkstk_darwin(v0);
  uint64_t v3 = (char *)&v6 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, void, uint64_t))(v1 + 104))(v3, enum case for LocalizationUtility.Table.stewie(_:), v0);
  uint64_t v4 = static LocalizationUtility.localizedString(key:table:)();
  (*(void (**)(char *, uint64_t))(v1 + 8))(v3, v0);
  return v4;
}

uint64_t sub_101093ADC()
{
  sub_10001D4B0(0, (unint64_t *)&qword_10163AE70);
  uint64_t result = OS_os_log.init(subsystem:category:)();
  qword_1016690A0 = result;
  return result;
}

unint64_t sub_101093B4C()
{
  type metadata accessor for XPCAlarm();
  uint64_t v0 = (void *)swift_allocObject();
  v0[2] = 0x6C7070612E6D6F63;
  v0[3] = 0xEF6D72616C612E65;
  sub_10000588C((uint64_t *)&unk_101638CE0);
  uint64_t v1 = swift_allocObject();
  *(_DWORD *)(v1 + 16) = 0;
  v0[4] = v1;
  unint64_t result = sub_10092F15C((uint64_t)_swiftEmptyArrayStorage);
  v0[5] = result;
  qword_10170F1A8 = (uint64_t)v0;
  return result;
}

uint64_t sub_101093BD8(void *a1, uint64_t a2)
{
  if (xpc_dictionary_get_string(a1, _xpc_event_key_name))
  {
    uint64_t v3 = String.init(cString:)();
    unint64_t v5 = v4;
    swift_bridgeObjectRetain();
    sub_10000588C(&qword_101669358);
    OSAllocatedUnfairLock.callAsFunction<A>(_:)();
    if (*(void *)(v24 + 16))
    {
      uint64_t v6 = sub_100723FF4(v3, v5);
      if (v7)
      {
        long long v23 = *(_OWORD *)(*(void *)(v24 + 56) + 16 * v6);
        swift_retain();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        *(_OWORD *)(swift_allocObject() + 16) = v23;
        os_log_type_t v8 = static os_log_type_t.default.getter();
        if (qword_1016373F8 != -1) {
          swift_once();
        }
        uint64_t v9 = qword_1016690A0;
        if (os_log_type_enabled((os_log_t)qword_1016690A0, v8))
        {
          swift_bridgeObjectRetain_n();
          uint64_t v10 = (uint8_t *)swift_slowAlloc();
          uint64_t v24 = swift_slowAlloc();
          *(_DWORD *)uint64_t v10 = 136315138;
          swift_bridgeObjectRetain();
          sub_1008FA0F0(v3, v5, &v24);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease_n();
          _os_log_impl((void *)&_mh_execute_header, v9, v8, "XPC Event Stream will run %s", v10, 0xCu);
          swift_arrayDestroy();
          swift_slowDealloc();
          swift_slowDealloc();
        }
        uint64_t v11 = type metadata accessor for Transaction();
        __chkstk_darwin(v11);
        static Transaction.named<A>(_:with:)();
        sub_101094144(v3, v5);
        swift_bridgeObjectRelease();
        return swift_release();
      }
    }
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    os_log_type_t v13 = static os_log_type_t.default.getter();
    if (qword_1016373F8 != -1) {
      swift_once();
    }
    double v14 = qword_1016690A0;
    os_log_type_t v15 = v13;
    if (!os_log_type_enabled((os_log_t)qword_1016690A0, v13)) {
      return swift_bridgeObjectRelease();
    }
    swift_bridgeObjectRetain();
    double v16 = (uint8_t *)swift_slowAlloc();
    uint64_t v24 = swift_slowAlloc();
    *(_DWORD *)double v16 = 136315138;
    swift_bridgeObjectRetain();
    sub_1008FA0F0(v3, v5, &v24);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    _os_log_impl((void *)&_mh_execute_header, v14, v15, "No registered event matching %s", v16, 0xCu);
    swift_arrayDestroy();
LABEL_17:
    swift_slowDealloc();
    return swift_slowDealloc();
  }
  os_log_type_t v17 = static os_log_type_t.default.getter();
  if (qword_1016373F8 != -1) {
    swift_once();
  }
  double v18 = qword_1016690A0;
  os_log_type_t v19 = v17;
  uint64_t result = os_log_type_enabled((os_log_t)qword_1016690A0, v17);
  if (result)
  {
    swift_retain();
    double v20 = (uint8_t *)swift_slowAlloc();
    uint64_t v24 = swift_slowAlloc();
    *(_DWORD *)double v20 = 136315138;
    uint64_t v21 = *(void *)(a2 + 16);
    unint64_t v22 = *(void *)(a2 + 24);
    swift_bridgeObjectRetain();
    sub_1008FA0F0(v21, v22, &v24);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release();
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v18, v19, "Unable to determine event name for XPC %s", v20, 0xCu);
    swift_arrayDestroy();
    goto LABEL_17;
  }
  return result;
}

uint64_t sub_101094144(uint64_t a1, unint64_t a2)
{
  os_log_type_t v4 = static os_log_type_t.default.getter();
  if (qword_1016373F8 != -1) {
    swift_once();
  }
  unint64_t v5 = qword_1016690A0;
  if (os_log_type_enabled((os_log_t)qword_1016690A0, v4))
  {
    swift_bridgeObjectRetain_n();
    uint64_t v6 = (uint8_t *)swift_slowAlloc();
    uint64_t v8 = swift_slowAlloc();
    *(_DWORD *)uint64_t v6 = 136315138;
    swift_bridgeObjectRetain();
    sub_1008FA0F0(a1, a2, &v8);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    _os_log_impl((void *)&_mh_execute_header, v5, v4, "Canceling alarm: %s", v6, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  String.utf8CString.getter();
  String.utf8CString.getter();
  xpc_set_event();
  swift_release();
  return swift_release();
}

uint64_t sub_101094308()
{
  swift_bridgeObjectRelease();
  swift_release();
  swift_bridgeObjectRelease();

  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for XPCAlarm()
{
  return self;
}

uint64_t sub_101094374(uint64_t a1)
{
  return sub_101093070(a1, *(char **)(v1 + 16), *(void **)(v1 + 24));
}

uint64_t sub_101094390()
{
  swift_release();

  return _swift_deallocObject(v0, 40, 7);
}

void sub_1010943D8()
{
  sub_101093354(*(void *)(v0 + 16), *(char **)(v0 + 24), *(void **)(v0 + 32));
}

uint64_t sub_1010943E4(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_1010943F4()
{
  return swift_release();
}

uint64_t sub_1010943FC()
{
  return sub_10109A558(33);
}

void sub_101094404()
{
  sub_1010916A8(*(void *)(v0 + 16), *(void **)(v0 + 24), *(unsigned char *)(v0 + 32));
}

id sub_101094410(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for LocalizationUtility.Table();
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  unint64_t v5 = (char *)&v30 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t started = type metadata accessor for DelegatedShareStartUserNotification();
  uint64_t v7 = started - 8;
  __chkstk_darwin(started);
  id v35 = type metadata accessor for DelegatedShareStartUserNotification;
  uint64_t v36 = (uint64_t)&v30 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10109A9AC(a1, v36, (uint64_t (*)(void))type metadata accessor for DelegatedShareStartUserNotification);
  id v9 = [objc_allocWithZone((Class)UNMutableNotificationContent) init];
  [v9 setDefaultActionURL:0];
  id v10 = [self defaultSound];
  [v9 setSound:v10];

  NSString v11 = String._bridgeToObjectiveC()();
  [v9 setCategoryIdentifier:v11];

  uint64_t v12 = enum case for LocalizationUtility.Table.delegatedSharing(_:);
  unint64_t v33 = *(void (**)(char *, uint64_t, uint64_t))(v3 + 104);
  uint64_t v31 = v2;
  v33(v5, enum case for LocalizationUtility.Table.delegatedSharing(_:), v2);
  static LocalizationUtility.localizedString(key:table:)();
  os_log_type_t v13 = *(void (**)(char *, uint64_t))(v3 + 8);
  uint64_t v32 = v3 + 8;
  v13(v5, v2);
  sub_10000588C((uint64_t *)&unk_10163AD00);
  uint64_t v14 = swift_allocObject();
  long long v34 = xmmword_101342130;
  *(_OWORD *)(v14 + 16) = xmmword_101342130;
  os_log_type_t v15 = (uint64_t *)(v36 + *(int *)(v7 + 28));
  uint64_t v16 = *v15;
  uint64_t v17 = v15[1];
  *(void *)(v14 + 56) = &type metadata for String;
  *(void *)(v14 + 64) = sub_10000B4CC();
  *(void *)(v14 + 32) = v16;
  *(void *)(v14 + 40) = v17;
  swift_bridgeObjectRetain();
  String.init(format:arguments:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  NSString v18 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  [v9 setTitle:v18];

  uint64_t v19 = v31;
  v33(v5, v12, v31);
  static LocalizationUtility.localizedString(key:table:)();
  v13(v5, v19);
  NSString v20 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  [v9 setBody:v20];

  [v9 setInterruptionLevel:2];
  sub_10000588C((uint64_t *)&unk_101637F00);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = v34;
  *(void *)(inited + 32) = 0x6564496572616873;
  *(void *)(inited + 40) = 0xEF7265696669746ELL;
  uint64_t v22 = v36;
  uint64_t v23 = UUID.uuidString.getter();
  *(void *)(inited + 72) = &type metadata for String;
  *(void *)(inited + 48) = v23;
  *(void *)(inited + 56) = v24;
  unint64_t v25 = sub_10092CEEC(inited);
  long long v40 = &type metadata for Bool;
  LOBYTE(v39) = 0;
  sub_100173E4C(&v39, v38);
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  unint64_t v37 = v25;
  sub_10016C700(v38, 0xD000000000000023, 0x8000000101418C10, isUniquelyReferenced_nonNull_native);
  uint64_t v27 = v37;
  swift_bridgeObjectRelease();
  sub_100653C34(v27);
  swift_bridgeObjectRelease();
  Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  [v9 setUserInfo:isa];

  [v9 setShouldIgnoreDoNotDisturb:0];
  [v9 setShouldUseRequestIdentifierForDismissalSync:0];
  sub_10109AA14(v22, (uint64_t (*)(void))v35);
  return v9;
}

uint64_t sub_101094930(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for UUID();
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  long long v39 = (char *)&v34 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v46[3] = type metadata accessor for DelegatedShareStartUserNotification();
  v46[4] = (uint64_t)&off_1015A6AA8;
  id v9 = sub_10001D958(v46);
  sub_10109A9AC(a1, (uint64_t)v9, (uint64_t (*)(void))type metadata accessor for DelegatedShareStartUserNotification);
  id v10 = objc_allocWithZone((Class)UNUserNotificationCenter);
  NSString v11 = String._bridgeToObjectiveC()();
  id v12 = [v10 initWithBundleIdentifier:v11];

  id v13 = sub_101094410((uint64_t)v9);
  UUID.uuidString.getter();
  id v14 = v13;
  NSString v15 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  id v16 = [self requestWithIdentifier:v15 content:v14 trigger:0 destinations:7];

  if (qword_101637110 != -1) {
    swift_once();
  }
  uint64_t v17 = type metadata accessor for Logger();
  sub_100010324(v17, (uint64_t)qword_10170ED70);
  sub_10001D010((uint64_t)v46, (uint64_t)aBlock);
  NSString v18 = Logger.logObject.getter();
  os_log_type_t v19 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v18, v19))
  {
    uint64_t v20 = swift_slowAlloc();
    uint64_t v38 = a3;
    uint64_t v21 = (uint8_t *)v20;
    uint64_t v36 = swift_slowAlloc();
    id v37 = v16;
    *(void *)&v45[0] = v36;
    id v35 = v21;
    *(_DWORD *)uint64_t v21 = 136315138;
    long long v34 = v21 + 4;
    uint64_t v22 = sub_10001CD44(aBlock, (uint64_t)v42);
    uint64_t v23 = v39;
    (*(void (**)(char *, void *, uint64_t))(v7 + 16))(v39, v22, v6);
    sub_10109A964((unint64_t *)&qword_101638B10, (void (*)(uint64_t))&type metadata accessor for UUID);
    uint64_t v24 = dispatch thunk of CustomStringConvertible.description.getter();
    uint64_t v25 = v6;
    id v26 = v14;
    id v27 = v12;
    uint64_t v28 = a2;
    unint64_t v30 = v29;
    (*(void (**)(char *, uint64_t))(v7 + 8))(v23, v25);
    uint64_t v40 = sub_1008FA0F0(v24, v30, (uint64_t *)v45);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    a2 = v28;
    id v12 = v27;
    id v14 = v26;
    swift_bridgeObjectRelease();
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)aBlock);
    _os_log_impl((void *)&_mh_execute_header, v18, v19, "Notification with identifier %s **WILL NOT** be forwarded to the companion", v35, 0xCu);
    swift_arrayDestroy();
    id v16 = v37;
    swift_slowDealloc();
    a3 = v38;
    swift_slowDealloc();
  }
  else
  {
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)aBlock);
  }

  sub_10001D010((uint64_t)v46, (uint64_t)v45);
  uint64_t v31 = swift_allocObject();
  sub_10001CEB0(v45, v31 + 16);
  *(void *)(v31 + 56) = a2;
  *(void *)(v31 + 64) = a3;
  long long v43 = sub_1007B31E8;
  uint64_t v44 = v31;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  uint64_t aBlock[2] = sub_100769474;
  long long v42 = &unk_101605CE0;
  uint64_t v32 = _Block_copy(aBlock);
  sub_1000BD0E8(a2);
  swift_release();
  [v12 addNotificationRequest:v16 withCompletionHandler:v32];

  _Block_release(v32);
  return _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)v46);
}

id sub_101094E14()
{
  uint64_t v0 = type metadata accessor for LocalizationUtility.Table();
  uint64_t v1 = *(void *)(v0 - 8);
  __chkstk_darwin(v0);
  uint64_t v3 = (char *)&v7 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  id result = (id)MobileGestalt_get_current_device();
  if (result)
  {
    unint64_t v5 = result;
    MobileGestalt_get_wapiCapability();

    (*(void (**)(char *, void, uint64_t))(v1 + 104))(v3, enum case for LocalizationUtility.Table.stewie(_:), v0);
    uint64_t v6 = static LocalizationUtility.localizedString(key:table:)();
    (*(void (**)(char *, uint64_t))(v1 + 8))(v3, v0);
    return (id)v6;
  }
  else
  {
    __break(1u);
  }
  return result;
}

id sub_101094F60(uint64_t a1)
{
  uint64_t found = type metadata accessor for NotifyWhenFoundUserNotification();
  __chkstk_darwin(found);
  uint64_t v4 = (char *)&v16 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10109A9AC(a1, (uint64_t)v4, (uint64_t (*)(void))type metadata accessor for NotifyWhenFoundUserNotification);
  id v5 = [objc_allocWithZone((Class)UNMutableNotificationContent) init];
  [v5 setDefaultActionURL:0];
  id v6 = [self defaultSound];
  [v5 setSound:v6];

  LODWORD(v6) = v4[1];
  sub_100E040BC(v4[1]);
  NSString v7 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  [v5 setCategoryIdentifier:v7];

  swift_bridgeObjectRetain();
  NSString v8 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  [v5 setTitle:v8];

  sub_10131E32C();
  NSString v9 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  [v5 setBody:v9];

  if (v6 == 67) {
    uint64_t v10 = 1;
  }
  else {
    uint64_t v10 = 2;
  }
  [v5 setInterruptionLevel:v10];
  unint64_t v11 = sub_10131E518();
  uint64_t v20 = &type metadata for Bool;
  LOBYTE(v19) = 1;
  sub_100173E4C(&v19, v18);
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  unint64_t v17 = v11;
  sub_10016C700(v18, 0xD000000000000023, 0x8000000101418C10, isUniquelyReferenced_nonNull_native);
  uint64_t v13 = v17;
  swift_bridgeObjectRelease();
  sub_100653C34(v13);
  swift_bridgeObjectRelease();
  Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  [v5 setUserInfo:isa];

  [v5 setShouldIgnoreDoNotDisturb:0];
  [v5 setShouldUseRequestIdentifierForDismissalSync:0];
  sub_10109AA14((uint64_t)v4, (uint64_t (*)(void))type metadata accessor for NotifyWhenFoundUserNotification);
  return v5;
}

id sub_10109523C(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for LocalizationUtility.Table();
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  id v5 = (char *)v29 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = type metadata accessor for DelegatedShareOwnerReunitedUserNotification(0) - 8;
  uint64_t v34 = v6;
  __chkstk_darwin(v6);
  id v35 = type metadata accessor for DelegatedShareOwnerReunitedUserNotification;
  NSString v8 = (char *)v29 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  unint64_t v33 = v8;
  sub_10109A9AC(a1, (uint64_t)v8, type metadata accessor for DelegatedShareOwnerReunitedUserNotification);
  id v9 = [objc_allocWithZone((Class)UNMutableNotificationContent) init];
  [v9 setDefaultActionURL:0];
  id v10 = [self defaultSound];
  [v9 setSound:v10];

  NSString v11 = String._bridgeToObjectiveC()();
  [v9 setCategoryIdentifier:v11];

  unsigned int v31 = enum case for LocalizationUtility.Table.delegatedSharing(_:);
  unint64_t v30 = *(void (**)(char *))(v3 + 104);
  v29[0] = v2;
  v30(v5);
  static LocalizationUtility.localizedString(key:table:)();
  id v12 = *(void (**)(char *, uint64_t))(v3 + 8);
  v29[1] = v3 + 8;
  v12(v5, v2);
  sub_10000588C((uint64_t *)&unk_10163AD00);
  uint64_t v13 = swift_allocObject();
  long long v32 = xmmword_101342130;
  *(_OWORD *)(v13 + 16) = xmmword_101342130;
  id v14 = &v8[*(int *)(v6 + 32)];
  uint64_t v16 = *(void *)v14;
  uint64_t v15 = *((void *)v14 + 1);
  *(void *)(v13 + 56) = &type metadata for String;
  *(void *)(v13 + 64) = sub_10000B4CC();
  *(void *)(v13 + 32) = v16;
  *(void *)(v13 + 40) = v15;
  swift_bridgeObjectRetain();
  String.init(format:arguments:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  NSString v17 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  [v9 setTitle:v17];

  uint64_t v18 = v29[0];
  ((void (*)(char *, void, void))v30)(v5, v31, v29[0]);
  static LocalizationUtility.localizedString(key:table:)();
  v12(v5, v18);
  NSString v19 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  [v9 setBody:v19];

  [v9 setInterruptionLevel:2];
  sub_10000588C((uint64_t *)&unk_101637F00);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = v32;
  *(void *)(inited + 32) = 0xD000000000000010;
  *(void *)(inited + 40) = 0x80000001013EE1B0;
  uint64_t v21 = (uint64_t)v33;
  uint64_t v22 = UUID.uuidString.getter();
  *(void *)(inited + 72) = &type metadata for String;
  *(void *)(inited + 48) = v22;
  *(void *)(inited + 56) = v23;
  unint64_t v24 = sub_10092CEEC(inited);
  long long v39 = &type metadata for Bool;
  LOBYTE(v38) = 0;
  sub_100173E4C(&v38, v37);
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  unint64_t v36 = v24;
  sub_10016C700(v37, 0xD000000000000023, 0x8000000101418C10, isUniquelyReferenced_nonNull_native);
  uint64_t v26 = v36;
  swift_bridgeObjectRelease();
  sub_100653C34(v26);
  swift_bridgeObjectRelease();
  Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  [v9 setUserInfo:isa];

  [v9 setShouldIgnoreDoNotDisturb:0];
  [v9 setShouldUseRequestIdentifierForDismissalSync:0];
  sub_10109AA14(v21, v35);
  return v9;
}

uint64_t sub_10109577C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for UUID();
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  long long v39 = (char *)&v34 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v46[3] = type metadata accessor for DelegatedShareOwnerReunitedUserNotification(0);
  v46[4] = (uint64_t)&off_1015E5F68;
  id v9 = sub_10001D958(v46);
  sub_10109A9AC(a1, (uint64_t)v9, type metadata accessor for DelegatedShareOwnerReunitedUserNotification);
  id v10 = objc_allocWithZone((Class)UNUserNotificationCenter);
  NSString v11 = String._bridgeToObjectiveC()();
  id v12 = [v10 initWithBundleIdentifier:v11];

  id v13 = sub_10109523C((uint64_t)v9);
  UUID.uuidString.getter();
  id v14 = v13;
  NSString v15 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  id v16 = [self requestWithIdentifier:v15 content:v14 trigger:0 destinations:7];

  if (qword_101637110 != -1) {
    swift_once();
  }
  uint64_t v17 = type metadata accessor for Logger();
  sub_100010324(v17, (uint64_t)qword_10170ED70);
  sub_10001D010((uint64_t)v46, (uint64_t)aBlock);
  uint64_t v18 = Logger.logObject.getter();
  os_log_type_t v19 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v18, v19))
  {
    uint64_t v20 = swift_slowAlloc();
    uint64_t v38 = a3;
    uint64_t v21 = (uint8_t *)v20;
    uint64_t v36 = swift_slowAlloc();
    id v37 = v16;
    *(void *)&v45[0] = v36;
    id v35 = v21;
    *(_DWORD *)uint64_t v21 = 136315138;
    uint64_t v34 = v21 + 4;
    uint64_t v22 = sub_10001CD44(aBlock, (uint64_t)v42);
    uint64_t v23 = v39;
    (*(void (**)(char *, void *, uint64_t))(v7 + 16))(v39, v22, v6);
    sub_10109A964((unint64_t *)&qword_101638B10, (void (*)(uint64_t))&type metadata accessor for UUID);
    uint64_t v24 = dispatch thunk of CustomStringConvertible.description.getter();
    uint64_t v25 = v6;
    id v26 = v14;
    id v27 = v12;
    uint64_t v28 = a2;
    unint64_t v30 = v29;
    (*(void (**)(char *, uint64_t))(v7 + 8))(v23, v25);
    uint64_t v40 = sub_1008FA0F0(v24, v30, (uint64_t *)v45);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    a2 = v28;
    id v12 = v27;
    id v14 = v26;
    swift_bridgeObjectRelease();
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)aBlock);
    _os_log_impl((void *)&_mh_execute_header, v18, v19, "Notification with identifier %s **WILL NOT** be forwarded to the companion", v35, 0xCu);
    swift_arrayDestroy();
    id v16 = v37;
    swift_slowDealloc();
    a3 = v38;
    swift_slowDealloc();
  }
  else
  {
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)aBlock);
  }

  sub_10001D010((uint64_t)v46, (uint64_t)v45);
  uint64_t v31 = swift_allocObject();
  sub_10001CEB0(v45, v31 + 16);
  *(void *)(v31 + 56) = a2;
  *(void *)(v31 + 64) = a3;
  long long v43 = sub_1007B31E8;
  uint64_t v44 = v31;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  uint64_t aBlock[2] = sub_100769474;
  long long v42 = &unk_101605C40;
  long long v32 = _Block_copy(aBlock);
  sub_1000BD0E8(a2);
  swift_release();
  [v12 addNotificationRequest:v16 withCompletionHandler:v32];

  _Block_release(v32);
  return _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)v46);
}

id sub_101095C60(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for LocalizationUtility.Table();
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  id v5 = (char *)v29 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = type metadata accessor for DelegatedShareShareeReunitedShareeUserNotification(0) - 8;
  uint64_t v34 = v6;
  __chkstk_darwin(v6);
  id v35 = type metadata accessor for DelegatedShareShareeReunitedShareeUserNotification;
  uint64_t v8 = (char *)v29 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  unint64_t v33 = v8;
  sub_10109A9AC(a1, (uint64_t)v8, type metadata accessor for DelegatedShareShareeReunitedShareeUserNotification);
  id v9 = [objc_allocWithZone((Class)UNMutableNotificationContent) init];
  [v9 setDefaultActionURL:0];
  id v10 = [self defaultSound];
  [v9 setSound:v10];

  NSString v11 = String._bridgeToObjectiveC()();
  [v9 setCategoryIdentifier:v11];

  unsigned int v31 = enum case for LocalizationUtility.Table.delegatedSharing(_:);
  unint64_t v30 = *(void (**)(char *))(v3 + 104);
  v29[0] = v2;
  v30(v5);
  static LocalizationUtility.localizedString(key:table:)();
  id v12 = *(void (**)(char *, uint64_t))(v3 + 8);
  v29[1] = v3 + 8;
  v12(v5, v2);
  sub_10000588C((uint64_t *)&unk_10163AD00);
  uint64_t v13 = swift_allocObject();
  long long v32 = xmmword_101342130;
  *(_OWORD *)(v13 + 16) = xmmword_101342130;
  id v14 = &v8[*(int *)(v6 + 32)];
  uint64_t v16 = *(void *)v14;
  uint64_t v15 = *((void *)v14 + 1);
  *(void *)(v13 + 56) = &type metadata for String;
  *(void *)(v13 + 64) = sub_10000B4CC();
  *(void *)(v13 + 32) = v16;
  *(void *)(v13 + 40) = v15;
  swift_bridgeObjectRetain();
  String.init(format:arguments:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  NSString v17 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  [v9 setTitle:v17];

  uint64_t v18 = v29[0];
  ((void (*)(char *, void, void))v30)(v5, v31, v29[0]);
  static LocalizationUtility.localizedString(key:table:)();
  v12(v5, v18);
  NSString v19 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  [v9 setBody:v19];

  [v9 setInterruptionLevel:2];
  sub_10000588C((uint64_t *)&unk_101637F00);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = v32;
  *(void *)(inited + 32) = 0xD000000000000010;
  *(void *)(inited + 40) = 0x80000001013EE1B0;
  uint64_t v21 = (uint64_t)v33;
  uint64_t v22 = UUID.uuidString.getter();
  *(void *)(inited + 72) = &type metadata for String;
  *(void *)(inited + 48) = v22;
  *(void *)(inited + 56) = v23;
  unint64_t v24 = sub_10092CEEC(inited);
  long long v39 = &type metadata for Bool;
  LOBYTE(v38) = 0;
  sub_100173E4C(&v38, v37);
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  unint64_t v36 = v24;
  sub_10016C700(v37, 0xD000000000000023, 0x8000000101418C10, isUniquelyReferenced_nonNull_native);
  uint64_t v26 = v36;
  swift_bridgeObjectRelease();
  sub_100653C34(v26);
  swift_bridgeObjectRelease();
  Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  [v9 setUserInfo:isa];

  [v9 setShouldIgnoreDoNotDisturb:0];
  [v9 setShouldUseRequestIdentifierForDismissalSync:0];
  sub_10109AA14(v21, v35);
  return v9;
}

uint64_t sub_10109619C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for UUID();
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  long long v39 = (char *)&v34 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v46[3] = type metadata accessor for DelegatedShareShareeReunitedShareeUserNotification(0);
  v46[4] = (uint64_t)&off_1015E5FD0;
  id v9 = sub_10001D958(v46);
  sub_10109A9AC(a1, (uint64_t)v9, type metadata accessor for DelegatedShareShareeReunitedShareeUserNotification);
  id v10 = objc_allocWithZone((Class)UNUserNotificationCenter);
  NSString v11 = String._bridgeToObjectiveC()();
  id v12 = [v10 initWithBundleIdentifier:v11];

  id v13 = sub_101095C60((uint64_t)v9);
  UUID.uuidString.getter();
  id v14 = v13;
  NSString v15 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  id v16 = [self requestWithIdentifier:v15 content:v14 trigger:0 destinations:7];

  if (qword_101637110 != -1) {
    swift_once();
  }
  uint64_t v17 = type metadata accessor for Logger();
  sub_100010324(v17, (uint64_t)qword_10170ED70);
  sub_10001D010((uint64_t)v46, (uint64_t)aBlock);
  uint64_t v18 = Logger.logObject.getter();
  os_log_type_t v19 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v18, v19))
  {
    uint64_t v20 = swift_slowAlloc();
    uint64_t v38 = a3;
    uint64_t v21 = (uint8_t *)v20;
    uint64_t v36 = swift_slowAlloc();
    id v37 = v16;
    *(void *)&v45[0] = v36;
    id v35 = v21;
    *(_DWORD *)uint64_t v21 = 136315138;
    uint64_t v34 = v21 + 4;
    uint64_t v22 = sub_10001CD44(aBlock, (uint64_t)v42);
    uint64_t v23 = v39;
    (*(void (**)(char *, void *, uint64_t))(v7 + 16))(v39, v22, v6);
    sub_10109A964((unint64_t *)&qword_101638B10, (void (*)(uint64_t))&type metadata accessor for UUID);
    uint64_t v24 = dispatch thunk of CustomStringConvertible.description.getter();
    uint64_t v25 = v6;
    id v26 = v14;
    id v27 = v12;
    uint64_t v28 = a2;
    unint64_t v30 = v29;
    (*(void (**)(char *, uint64_t))(v7 + 8))(v23, v25);
    uint64_t v40 = sub_1008FA0F0(v24, v30, (uint64_t *)v45);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    a2 = v28;
    id v12 = v27;
    id v14 = v26;
    swift_bridgeObjectRelease();
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)aBlock);
    _os_log_impl((void *)&_mh_execute_header, v18, v19, "Notification with identifier %s **WILL NOT** be forwarded to the companion", v35, 0xCu);
    swift_arrayDestroy();
    id v16 = v37;
    swift_slowDealloc();
    a3 = v38;
    swift_slowDealloc();
  }
  else
  {
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)aBlock);
  }

  sub_10001D010((uint64_t)v46, (uint64_t)v45);
  uint64_t v31 = swift_allocObject();
  sub_10001CEB0(v45, v31 + 16);
  *(void *)(v31 + 56) = a2;
  *(void *)(v31 + 64) = a3;
  long long v43 = sub_1007B31E8;
  uint64_t v44 = v31;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  uint64_t aBlock[2] = sub_100769474;
  long long v42 = &unk_101605BF0;
  long long v32 = _Block_copy(aBlock);
  sub_1000BD0E8(a2);
  swift_release();
  [v12 addNotificationRequest:v16 withCompletionHandler:v32];

  _Block_release(v32);
  return _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)v46);
}

id sub_101096680(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for LocalizationUtility.Table();
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  id v5 = (char *)v29 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = type metadata accessor for DelegatedShareExpirationUserNotification(0) - 8;
  uint64_t v34 = v6;
  __chkstk_darwin(v6);
  id v35 = type metadata accessor for DelegatedShareExpirationUserNotification;
  uint64_t v8 = (char *)v29 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  unint64_t v33 = v8;
  sub_10109A9AC(a1, (uint64_t)v8, type metadata accessor for DelegatedShareExpirationUserNotification);
  id v9 = [objc_allocWithZone((Class)UNMutableNotificationContent) init];
  [v9 setDefaultActionURL:0];
  id v10 = [self defaultSound];
  [v9 setSound:v10];

  NSString v11 = String._bridgeToObjectiveC()();
  [v9 setCategoryIdentifier:v11];

  unsigned int v31 = enum case for LocalizationUtility.Table.delegatedSharing(_:);
  unint64_t v30 = *(void (**)(char *))(v3 + 104);
  v29[0] = v2;
  v30(v5);
  static LocalizationUtility.localizedString(key:table:)();
  id v12 = *(void (**)(char *, uint64_t))(v3 + 8);
  v29[1] = v3 + 8;
  v12(v5, v2);
  sub_10000588C((uint64_t *)&unk_10163AD00);
  uint64_t v13 = swift_allocObject();
  long long v32 = xmmword_101342130;
  *(_OWORD *)(v13 + 16) = xmmword_101342130;
  id v14 = &v8[*(int *)(v6 + 32)];
  uint64_t v16 = *(void *)v14;
  uint64_t v15 = *((void *)v14 + 1);
  *(void *)(v13 + 56) = &type metadata for String;
  *(void *)(v13 + 64) = sub_10000B4CC();
  *(void *)(v13 + 32) = v16;
  *(void *)(v13 + 40) = v15;
  swift_bridgeObjectRetain();
  String.init(format:arguments:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  NSString v17 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  [v9 setTitle:v17];

  uint64_t v18 = v29[0];
  ((void (*)(char *, void, void))v30)(v5, v31, v29[0]);
  static LocalizationUtility.localizedString(key:table:)();
  v12(v5, v18);
  NSString v19 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  [v9 setBody:v19];

  [v9 setInterruptionLevel:2];
  sub_10000588C((uint64_t *)&unk_101637F00);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = v32;
  *(void *)(inited + 32) = 0xD000000000000010;
  *(void *)(inited + 40) = 0x80000001013EE1B0;
  uint64_t v21 = (uint64_t)v33;
  uint64_t v22 = UUID.uuidString.getter();
  *(void *)(inited + 72) = &type metadata for String;
  *(void *)(inited + 48) = v22;
  *(void *)(inited + 56) = v23;
  unint64_t v24 = sub_10092CEEC(inited);
  long long v39 = &type metadata for Bool;
  LOBYTE(v38) = 0;
  sub_100173E4C(&v38, v37);
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  unint64_t v36 = v24;
  sub_10016C700(v37, 0xD000000000000023, 0x8000000101418C10, isUniquelyReferenced_nonNull_native);
  uint64_t v26 = v36;
  swift_bridgeObjectRelease();
  sub_100653C34(v26);
  swift_bridgeObjectRelease();
  Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  [v9 setUserInfo:isa];

  [v9 setShouldIgnoreDoNotDisturb:0];
  [v9 setShouldUseRequestIdentifierForDismissalSync:0];
  sub_10109AA14(v21, v35);
  return v9;
}

uint64_t sub_101096BC0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for UUID();
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  long long v39 = (char *)&v34 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v46[3] = type metadata accessor for DelegatedShareExpirationUserNotification(0);
  v46[4] = (uint64_t)&off_1015E5F00;
  id v9 = sub_10001D958(v46);
  sub_10109A9AC(a1, (uint64_t)v9, type metadata accessor for DelegatedShareExpirationUserNotification);
  id v10 = objc_allocWithZone((Class)UNUserNotificationCenter);
  NSString v11 = String._bridgeToObjectiveC()();
  id v12 = [v10 initWithBundleIdentifier:v11];

  id v13 = sub_101096680((uint64_t)v9);
  UUID.uuidString.getter();
  id v14 = v13;
  NSString v15 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  id v16 = [self requestWithIdentifier:v15 content:v14 trigger:0 destinations:7];

  if (qword_101637110 != -1) {
    swift_once();
  }
  uint64_t v17 = type metadata accessor for Logger();
  sub_100010324(v17, (uint64_t)qword_10170ED70);
  sub_10001D010((uint64_t)v46, (uint64_t)aBlock);
  uint64_t v18 = Logger.logObject.getter();
  os_log_type_t v19 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v18, v19))
  {
    uint64_t v20 = swift_slowAlloc();
    uint64_t v38 = a3;
    uint64_t v21 = (uint8_t *)v20;
    uint64_t v36 = swift_slowAlloc();
    id v37 = v16;
    *(void *)&v45[0] = v36;
    id v35 = v21;
    *(_DWORD *)uint64_t v21 = 136315138;
    uint64_t v34 = v21 + 4;
    uint64_t v22 = sub_10001CD44(aBlock, (uint64_t)v42);
    uint64_t v23 = v39;
    (*(void (**)(char *, void *, uint64_t))(v7 + 16))(v39, v22, v6);
    sub_10109A964((unint64_t *)&qword_101638B10, (void (*)(uint64_t))&type metadata accessor for UUID);
    uint64_t v24 = dispatch thunk of CustomStringConvertible.description.getter();
    uint64_t v25 = v6;
    id v26 = v14;
    id v27 = v12;
    uint64_t v28 = a2;
    unint64_t v30 = v29;
    (*(void (**)(char *, uint64_t))(v7 + 8))(v23, v25);
    uint64_t v40 = sub_1008FA0F0(v24, v30, (uint64_t *)v45);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    a2 = v28;
    id v12 = v27;
    id v14 = v26;
    swift_bridgeObjectRelease();
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)aBlock);
    _os_log_impl((void *)&_mh_execute_header, v18, v19, "Notification with identifier %s **WILL NOT** be forwarded to the companion", v35, 0xCu);
    swift_arrayDestroy();
    id v16 = v37;
    swift_slowDealloc();
    a3 = v38;
    swift_slowDealloc();
  }
  else
  {
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)aBlock);
  }

  sub_10001D010((uint64_t)v46, (uint64_t)v45);
  uint64_t v31 = swift_allocObject();
  sub_10001CEB0(v45, v31 + 16);
  *(void *)(v31 + 56) = a2;
  *(void *)(v31 + 64) = a3;
  long long v43 = sub_1007B31E8;
  uint64_t v44 = v31;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  uint64_t aBlock[2] = sub_100769474;
  long long v42 = &unk_101605C90;
  long long v32 = _Block_copy(aBlock);
  sub_1000BD0E8(a2);
  swift_release();
  [v12 addNotificationRequest:v16 withCompletionHandler:v32];

  _Block_release(v32);
  return _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)v46);
}

id sub_1010970A4(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for LocalizationUtility.Table();
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  id v5 = (char *)&v29 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v36 = type metadata accessor for DelegatedSharMaxViewsUserNotification(0) - 8;
  __chkstk_darwin(v36);
  id v35 = type metadata accessor for DelegatedSharMaxViewsUserNotification;
  uint64_t v7 = (char *)&v29 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v34 = v7;
  sub_10109A9AC(a1, (uint64_t)v7, type metadata accessor for DelegatedSharMaxViewsUserNotification);
  id v8 = [objc_allocWithZone((Class)UNMutableNotificationContent) init];
  [v8 setDefaultActionURL:0];
  id v9 = [self defaultSound];
  [v8 setSound:v9];

  NSString v10 = String._bridgeToObjectiveC()();
  [v8 setCategoryIdentifier:v10];

  uint64_t v11 = enum case for LocalizationUtility.Table.delegatedSharing(_:);
  unint64_t v30 = *(void (**)(char *, uint64_t, uint64_t))(v3 + 104);
  uint64_t v29 = v2;
  v30(v5, enum case for LocalizationUtility.Table.delegatedSharing(_:), v2);
  static LocalizationUtility.localizedString(key:table:)();
  id v12 = *(void (**)(char *, uint64_t))(v3 + 8);
  uint64_t v31 = v3 + 8;
  long long v32 = v12;
  v12(v5, v2);
  sub_10000588C((uint64_t *)&unk_10163AD00);
  uint64_t v13 = swift_allocObject();
  long long v33 = xmmword_101342130;
  *(_OWORD *)(v13 + 16) = xmmword_101342130;
  id v14 = &v7[*(int *)(v36 + 32)];
  uint64_t v16 = *(void *)v14;
  uint64_t v15 = *((void *)v14 + 1);
  *(void *)(v13 + 56) = &type metadata for String;
  *(void *)(v13 + 64) = sub_10000B4CC();
  *(void *)(v13 + 32) = v16;
  *(void *)(v13 + 40) = v15;
  swift_bridgeObjectRetain();
  String.init(format:arguments:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  NSString v17 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  [v8 setTitle:v17];

  uint64_t v18 = v29;
  v30(v5, v11, v29);
  static LocalizationUtility.localizedString(key:table:)();
  v32(v5, v18);
  NSString v19 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  [v8 setBody:v19];

  [v8 setInterruptionLevel:2];
  sub_10000588C((uint64_t *)&unk_101637F00);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = v33;
  *(void *)(inited + 32) = 0xD000000000000010;
  *(void *)(inited + 40) = 0x80000001013EE1B0;
  uint64_t v21 = (uint64_t)v34;
  uint64_t v22 = UUID.uuidString.getter();
  *(void *)(inited + 72) = &type metadata for String;
  *(void *)(inited + 48) = v22;
  *(void *)(inited + 56) = v23;
  unint64_t v24 = sub_10092CEEC(inited);
  uint64_t v40 = &type metadata for Bool;
  LOBYTE(v39) = 0;
  sub_100173E4C(&v39, v38);
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  unint64_t v37 = v24;
  sub_10016C700(v38, 0xD000000000000023, 0x8000000101418C10, isUniquelyReferenced_nonNull_native);
  uint64_t v26 = v37;
  swift_bridgeObjectRelease();
  sub_100653C34(v26);
  swift_bridgeObjectRelease();
  Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  [v8 setUserInfo:isa];

  [v8 setShouldIgnoreDoNotDisturb:0];
  [v8 setShouldUseRequestIdentifierForDismissalSync:0];
  sub_10109AA14(v21, v35);
  return v8;
}

uint64_t sub_1010975E8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for UUID();
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  long long v39 = (char *)&v34 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v46[3] = type metadata accessor for DelegatedSharMaxViewsUserNotification(0);
  v46[4] = (uint64_t)&off_1015E6038;
  id v9 = sub_10001D958(v46);
  sub_10109A9AC(a1, (uint64_t)v9, type metadata accessor for DelegatedSharMaxViewsUserNotification);
  id v10 = objc_allocWithZone((Class)UNUserNotificationCenter);
  NSString v11 = String._bridgeToObjectiveC()();
  id v12 = [v10 initWithBundleIdentifier:v11];

  id v13 = sub_1010970A4((uint64_t)v9);
  UUID.uuidString.getter();
  id v14 = v13;
  NSString v15 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  id v16 = [self requestWithIdentifier:v15 content:v14 trigger:0 destinations:7];

  if (qword_101637110 != -1) {
    swift_once();
  }
  uint64_t v17 = type metadata accessor for Logger();
  sub_100010324(v17, (uint64_t)qword_10170ED70);
  sub_10001D010((uint64_t)v46, (uint64_t)aBlock);
  uint64_t v18 = Logger.logObject.getter();
  os_log_type_t v19 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v18, v19))
  {
    uint64_t v20 = swift_slowAlloc();
    uint64_t v38 = a3;
    uint64_t v21 = (uint8_t *)v20;
    uint64_t v36 = swift_slowAlloc();
    id v37 = v16;
    *(void *)&v45[0] = v36;
    id v35 = v21;
    *(_DWORD *)uint64_t v21 = 136315138;
    uint64_t v34 = v21 + 4;
    uint64_t v22 = sub_10001CD44(aBlock, (uint64_t)v42);
    uint64_t v23 = v39;
    (*(void (**)(char *, void *, uint64_t))(v7 + 16))(v39, v22, v6);
    sub_10109A964((unint64_t *)&qword_101638B10, (void (*)(uint64_t))&type metadata accessor for UUID);
    uint64_t v24 = dispatch thunk of CustomStringConvertible.description.getter();
    uint64_t v25 = v6;
    id v26 = v14;
    id v27 = v12;
    uint64_t v28 = a2;
    unint64_t v30 = v29;
    (*(void (**)(char *, uint64_t))(v7 + 8))(v23, v25);
    uint64_t v40 = sub_1008FA0F0(v24, v30, (uint64_t *)v45);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    a2 = v28;
    id v12 = v27;
    id v14 = v26;
    swift_bridgeObjectRelease();
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)aBlock);
    _os_log_impl((void *)&_mh_execute_header, v18, v19, "Notification with identifier %s **WILL NOT** be forwarded to the companion", v35, 0xCu);
    swift_arrayDestroy();
    id v16 = v37;
    swift_slowDealloc();
    a3 = v38;
    swift_slowDealloc();
  }
  else
  {
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)aBlock);
  }

  sub_10001D010((uint64_t)v46, (uint64_t)v45);
  uint64_t v31 = swift_allocObject();
  sub_10001CEB0(v45, v31 + 16);
  *(void *)(v31 + 56) = a2;
  *(void *)(v31 + 64) = a3;
  long long v43 = sub_1007B31E8;
  uint64_t v44 = v31;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  uint64_t aBlock[2] = sub_100769474;
  long long v42 = &unk_101605BA0;
  long long v32 = _Block_copy(aBlock);
  sub_1000BD0E8(a2);
  swift_release();
  [v12 addNotificationRequest:v16 withCompletionHandler:v32];

  _Block_release(v32);
  return _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)v46);
}

uint64_t sub_101097ACC(uint64_t a1)
{
  void v12[3] = type metadata accessor for UnwantedTrackingUserNotification();
  v12[4] = (uint64_t)&off_1015B3E48;
  uint64_t v2 = sub_10001D958(v12);
  sub_10109A9AC(a1, (uint64_t)v2, (uint64_t (*)(void))type metadata accessor for UnwantedTrackingUserNotification);
  id v3 = objc_allocWithZone((Class)UNUserNotificationCenter);
  NSString v4 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  id v5 = [v3 initWithBundleIdentifier:v4];

  sub_10001D010((uint64_t)v12, (uint64_t)v11);
  uint64_t v6 = swift_allocObject();
  sub_10001CEB0(v11, v6 + 16);
  *(void *)(v6 + 56) = v5;
  v10[4] = sub_10109AC58;
  void v10[5] = v6;
  v10[0] = _NSConcreteStackBlock;
  v10[1] = 1107296256;
  void v10[2] = sub_10107F250;
  void v10[3] = &unk_101605D30;
  uint64_t v7 = _Block_copy(v10);
  id v8 = v5;
  swift_release();
  [v8 getDeliveredNotificationsWithCompletionHandler:v7];
  _Block_release(v7);

  return _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)v12);
}

id sub_101097C90(uint64_t a1)
{
  uint64_t v2 = sub_10000588C(&qword_101649E40);
  __chkstk_darwin(v2 - 8);
  NSString v4 = (char *)&v27 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = type metadata accessor for UnwantedTrackingUserNotification();
  __chkstk_darwin(v5);
  uint64_t v7 = (char *)&v27 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10109A9AC(a1, (uint64_t)v7, (uint64_t (*)(void))type metadata accessor for UnwantedTrackingUserNotification);
  id v8 = [objc_allocWithZone((Class)UNMutableNotificationContent) init];
  *(void *)&long long v30 = 0;
  *((void *)&v30 + 1) = 0xE000000000000000;
  _StringGuts.grow(_:)(40);
  swift_bridgeObjectRelease();
  *(void *)&long long v30 = 0xD000000000000026;
  *((void *)&v30 + 1) = 0x80000001013F1A40;
  v9._countAndFlagsBits = UUID.uuidString.getter();
  String.append(_:)(v9);
  swift_bridgeObjectRelease();
  URL.init(string:)();
  swift_bridgeObjectRelease();
  uint64_t v10 = type metadata accessor for URL();
  uint64_t v11 = *(void *)(v10 - 8);
  id v13 = 0;
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v11 + 48))(v4, 1, v10) != 1)
  {
    URL._bridgeToObjectiveC()(v12);
    id v13 = v14;
    (*(void (**)(char *, uint64_t))(v11 + 8))(v4, v10);
  }
  [v8 setDefaultActionURL:v13];

  id v15 = [self defaultSound];
  [v8 setSound:v15];

  uint64_t v16 = *(int *)(v5 + 24);
  int v17 = v7[v16];
  sub_100E040BC(v7[v16]);
  NSString v18 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  [v8 setCategoryIdentifier:v18];

  sub_1001E4A08();
  NSString v19 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  [v8 setTitle:v19];

  sub_1001E5340();
  NSString v20 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  [v8 setBody:v20];

  if (v17 == 67) {
    uint64_t v21 = 1;
  }
  else {
    uint64_t v21 = 2;
  }
  [v8 setInterruptionLevel:v21];
  unint64_t v22 = sub_10092CEEC((uint64_t)_swiftEmptyArrayStorage);
  uint64_t v31 = &type metadata for Bool;
  LOBYTE(v30) = 1;
  sub_100173E4C(&v30, v29);
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  unint64_t v28 = v22;
  sub_10016C700(v29, 0xD000000000000023, 0x8000000101418C10, isUniquelyReferenced_nonNull_native);
  uint64_t v24 = v28;
  swift_bridgeObjectRelease();
  sub_100653C34(v24);
  swift_bridgeObjectRelease();
  Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  [v8 setUserInfo:isa];

  [v8 setShouldIgnoreDoNotDisturb:1];
  [v8 setShouldUseRequestIdentifierForDismissalSync:1];
  sub_10109AA14((uint64_t)v7, (uint64_t (*)(void))type metadata accessor for UnwantedTrackingUserNotification);
  return v8;
}

id sub_1010980C0(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for PlaySoundUserNotification();
  __chkstk_darwin(v2);
  NSString v4 = (char *)&v20 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10109A9AC(a1, (uint64_t)v4, (uint64_t (*)(void))type metadata accessor for PlaySoundUserNotification);
  id v5 = [objc_allocWithZone((Class)UNMutableNotificationContent) init];
  [v5 setDefaultActionURL:0];
  id v6 = [self defaultSound];
  [v5 setSound:v6];

  int v7 = v4[1];
  sub_100E040BC(v4[1]);
  NSString v8 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  [v5 setCategoryIdentifier:v8];

  sub_10085F164();
  NSString v9 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  [v5 setTitle:v9];

  sub_10085F328();
  NSString v10 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  [v5 setBody:v10];

  if (v7 == 67) {
    uint64_t v11 = 1;
  }
  else {
    uint64_t v11 = 2;
  }
  [v5 setInterruptionLevel:v11];
  sub_10000588C((uint64_t *)&unk_101637F00);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_101342130;
  *(void *)(inited + 32) = 1684632949;
  *(void *)(inited + 40) = 0xE400000000000000;
  uint64_t v13 = UUID.uuidString.getter();
  *(void *)(inited + 72) = &type metadata for String;
  *(void *)(inited + 48) = v13;
  *(void *)(inited + 56) = v14;
  unint64_t v15 = sub_10092CEEC(inited);
  uint64_t v24 = &type metadata for Bool;
  LOBYTE(v23) = 1;
  sub_100173E4C(&v23, v22);
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  unint64_t v21 = v15;
  sub_10016C700(v22, 0xD000000000000023, 0x8000000101418C10, isUniquelyReferenced_nonNull_native);
  uint64_t v17 = v21;
  swift_bridgeObjectRelease();
  sub_100653C34(v17);
  swift_bridgeObjectRelease();
  Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  [v5 setUserInfo:isa];

  [v5 setShouldIgnoreDoNotDisturb:0];
  [v5 setShouldUseRequestIdentifierForDismissalSync:0];
  sub_10109AA14((uint64_t)v4, (uint64_t (*)(void))type metadata accessor for PlaySoundUserNotification);
  return v5;
}

id sub_1010983DC(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for LocalizationUtility.Table();
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  id v5 = (char *)v33 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = type metadata accessor for ItemShareRequestReceivedUserNotification() - 8;
  uint64_t v39 = v6;
  __chkstk_darwin(v6);
  id v37 = type metadata accessor for ItemShareRequestReceivedUserNotification;
  NSString v8 = (char *)v33 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10109A9AC(a1, (uint64_t)v8, (uint64_t (*)(void))type metadata accessor for ItemShareRequestReceivedUserNotification);
  id v9 = [objc_allocWithZone((Class)UNMutableNotificationContent) init];
  [v9 setDefaultActionURL:0];
  id v10 = [self defaultSound];
  [v9 setSound:v10];

  unsigned __int8 v11 = v8[1];
  uint64_t v38 = v8;
  sub_100E040BC(v11);
  NSString v12 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  [v9 setCategoryIdentifier:v12];

  sub_10000588C(&qword_1016552B0);
  uint64_t inited = swift_initStackObject();
  long long v40 = xmmword_101342130;
  *(_OWORD *)(inited + 16) = xmmword_101342130;
  uint64_t v14 = &v8[*(int *)(v6 + 40)];
  uint64_t v15 = *((void *)v14 + 1);
  *(void *)(inited + 32) = *(void *)v14;
  *(void *)(inited + 40) = v15;
  unsigned int v36 = enum case for LocalizationUtility.Table.itemSharing(_:);
  id v35 = *(void (**)(char *))(v3 + 104);
  v35(v5);
  swift_bridgeObjectRetain();
  static LocalizationUtility.localizedString(key:table:)();
  uint64_t v16 = *(void (**)(char *, uint64_t))(v3 + 8);
  v33[1] = v3 + 8;
  uint64_t v34 = v16;
  uint64_t v17 = v2;
  v16(v5, v2);
  sub_100A9A508(inited);
  swift_setDeallocating();
  swift_arrayDestroy();
  String.init(format:arguments:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  NSString v18 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  [v9 setTitle:v18];

  uint64_t v19 = swift_initStackObject();
  *(_OWORD *)(v19 + 16) = v40;
  uint64_t v20 = &v38[*(int *)(v39 + 36)];
  uint64_t v21 = *((void *)v20 + 1);
  *(void *)(v19 + 32) = *(void *)v20;
  *(void *)(v19 + 40) = v21;
  ((void (*)(char *, void, uint64_t))v35)(v5, v36, v17);
  swift_bridgeObjectRetain();
  static LocalizationUtility.localizedString(key:table:)();
  swift_bridgeObjectRelease();
  v34(v5, v17);
  sub_100A9A508(v19);
  swift_setDeallocating();
  swift_arrayDestroy();
  String.init(format:arguments:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  NSString v22 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  [v9 setBody:v22];

  uint64_t v23 = (uint64_t)v38;
  if (v38[1] == 67) {
    uint64_t v24 = 1;
  }
  else {
    uint64_t v24 = 2;
  }
  [v9 setInterruptionLevel:v24];
  sub_10000588C((uint64_t *)&unk_101637F00);
  uint64_t v25 = swift_initStackObject();
  *(_OWORD *)(v25 + 16) = v40;
  *(void *)(v25 + 32) = 0x6564496572616873;
  *(void *)(v25 + 40) = 0xEF7265696669746ELL;
  uint64_t v26 = UUID.uuidString.getter();
  *(void *)(v25 + 72) = &type metadata for String;
  *(void *)(v25 + 48) = v26;
  *(void *)(v25 + 56) = v27;
  unint64_t v28 = sub_10092CEEC(v25);
  uint64_t v44 = &type metadata for Bool;
  LOBYTE(v43) = 1;
  sub_100173E4C(&v43, v42);
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  unint64_t v41 = v28;
  sub_10016C700(v42, 0xD000000000000023, 0x8000000101418C10, isUniquelyReferenced_nonNull_native);
  uint64_t v30 = v41;
  swift_bridgeObjectRelease();
  sub_100653C34(v30);
  swift_bridgeObjectRelease();
  Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  [v9 setUserInfo:isa];

  [v9 setShouldIgnoreDoNotDisturb:0];
  [v9 setShouldUseRequestIdentifierForDismissalSync:0];
  sub_10109AA14(v23, (uint64_t (*)(void))v37);
  return v9;
}

id sub_101098A3C(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for UUID();
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  id v5 = (char *)&v29 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = type metadata accessor for LowBatteryUserNotification();
  uint64_t v7 = v6 - 8;
  __chkstk_darwin(v6);
  id v9 = (char *)&v29 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10109A9AC(a1, (uint64_t)v9, (uint64_t (*)(void))type metadata accessor for LowBatteryUserNotification);
  id v10 = [objc_allocWithZone((Class)UNMutableNotificationContent) init];
  [v10 setDefaultActionURL:0];
  id v11 = [self defaultSound];
  [v10 setSound:v11];

  int v12 = v9[1];
  sub_100E040BC(v9[1]);
  NSString v13 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  [v10 setCategoryIdentifier:v13];

  sub_10114FEF0();
  NSString v14 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  [v10 setTitle:v14];

  sub_1011500DC();
  NSString v15 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  [v10 setBody:v15];

  if (v12 == 67) {
    uint64_t v16 = 1;
  }
  else {
    uint64_t v16 = 2;
  }
  [v10 setInterruptionLevel:v16];
  sub_10000588C((uint64_t *)&unk_101637F00);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_101342130;
  *(void *)(inited + 32) = 1684632949;
  *(void *)(inited + 40) = 0xE400000000000000;
  NSString v18 = &v9[*(int *)(v7 + 36)];
  uint64_t v20 = *((void *)v18 + 3);
  uint64_t v19 = *((void *)v18 + 4);
  sub_10001CD44(v18, v20);
  (*(void (**)(uint64_t))(*(void *)(*(void *)(v19 + 8) + 8) + 32))(v20);
  uint64_t v21 = UUID.uuidString.getter();
  uint64_t v23 = v22;
  (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
  *(void *)(inited + 72) = &type metadata for String;
  *(void *)(inited + 48) = v21;
  *(void *)(inited + 56) = v23;
  unint64_t v24 = sub_10092CEEC(inited);
  long long v32 = &type metadata for Bool;
  LOBYTE(v31) = 1;
  sub_100173E4C(&v31, v30);
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  unint64_t v29 = v24;
  sub_10016C700(v30, 0xD000000000000023, 0x8000000101418C10, isUniquelyReferenced_nonNull_native);
  uint64_t v26 = v29;
  swift_bridgeObjectRelease();
  sub_100653C34(v26);
  swift_bridgeObjectRelease();
  Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  [v10 setUserInfo:isa];

  [v10 setShouldIgnoreDoNotDisturb:0];
  [v10 setShouldUseRequestIdentifierForDismissalSync:0];
  sub_10109AA14((uint64_t)v9, (uint64_t (*)(void))type metadata accessor for LowBatteryUserNotification);
  return v10;
}

uint64_t sub_101098E30(__int16 a1)
{
  id v11 = &type metadata for SecureLocationsStewiePublishReminderNotification;
  int v12 = &off_101605DD8;
  v10[0] = a1;
  id v1 = objc_allocWithZone((Class)UNUserNotificationCenter);
  NSString v2 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  id v3 = [v1 initWithBundleIdentifier:v2];

  sub_10001D010((uint64_t)v10, (uint64_t)v9);
  uint64_t v4 = swift_allocObject();
  sub_10001CEB0(v9, v4 + 16);
  *(void *)(v4 + 56) = v3;
  uint64_t v8[4] = sub_1008B7BD8;
  v8[5] = v4;
  v8[0] = _NSConcreteStackBlock;
  v8[1] = 1107296256;
  v8[2] = sub_10107F250;
  v8[3] = &unk_1016051C8;
  id v5 = _Block_copy(v8);
  id v6 = v3;
  swift_release();
  [v6 getDeliveredNotificationsWithCompletionHandler:v5];
  _Block_release(v5);

  return _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)v10);
}

id sub_101098FCC()
{
  Class isa = Data._bridgeToObjectiveC()().super.isa;
  id v6 = 0;
  id v2 = [v0 initWithData:isa error:&v6];

  if (v2)
  {
    id v3 = v6;
  }
  else
  {
    id v4 = v6;
    _convertNSErrorToError(_:)();

    swift_willThrow();
  }
  return v2;
}

BOOL sub_10109908C(__int16 a1)
{
  void v10[3] = &type metadata for SecureLocationsStewiePublishReminderNotification;
  v10[4] = &off_101605DD8;
  LOWORD(v10[0]) = a1;
  sub_10001CD44(v10, (uint64_t)&type metadata for SecureLocationsStewiePublishReminderNotification);
  id v1 = objc_allocWithZone((Class)UNUserNotificationCenter);
  NSString v2 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  id v3 = [v1 initWithBundleIdentifier:v2];

  id v4 = [v3 deliveredNotifications];
  sub_10001D4B0(0, (unint64_t *)&qword_101669330);
  unint64_t v5 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  long long v9[2] = v10;
  unint64_t v6 = (unint64_t)sub_1000A5040(sub_101099D98, v9, v5);
  if (v6 >> 62) {
    uint64_t v7 = _CocoaArrayWrapper.endIndex.getter();
  }
  else {
    uint64_t v7 = *(void *)((v6 & 0xFFFFFFFFFFFFFF8) + 0x10);
  }
  swift_bridgeObjectRelease();

  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)v10);
  return v7 != 0;
}

id sub_101099230(unsigned __int8 a1)
{
  int v2 = a1;
  uint64_t v3 = type metadata accessor for LocalizationUtility.Table();
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  unint64_t v6 = (char *)&v18 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  id v7 = [objc_allocWithZone((Class)UNMutableNotificationContent) init];
  [v7 setDefaultActionURL:0];
  id v8 = [self defaultSound];
  [v7 setSound:v8];

  sub_100E040BC(a1);
  NSString v9 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  [v7 setCategoryIdentifier:v9];

  (*(void (**)(char *, void, uint64_t))(v4 + 104))(v6, enum case for LocalizationUtility.Table.stewie(_:), v3);
  static LocalizationUtility.localizedString(key:table:)();
  (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
  NSString v10 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  [v7 setTitle:v10];

  sub_101094E14();
  NSString v11 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  [v7 setBody:v11];

  if (v2 == 67) {
    uint64_t v12 = 1;
  }
  else {
    uint64_t v12 = 2;
  }
  [v7 setInterruptionLevel:v12];
  unint64_t v13 = sub_10092CEEC((uint64_t)_swiftEmptyArrayStorage);
  uint64_t v22 = &type metadata for Bool;
  LOBYTE(v21) = 1;
  sub_100173E4C(&v21, v20);
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  unint64_t v19 = v13;
  sub_10016C700(v20, 0xD000000000000023, 0x8000000101418C10, isUniquelyReferenced_nonNull_native);
  uint64_t v15 = v19;
  swift_bridgeObjectRelease();
  sub_100653C34(v15);
  swift_bridgeObjectRelease();
  Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  [v7 setUserInfo:isa];

  [v7 setShouldIgnoreDoNotDisturb:0];
  [v7 setShouldUseRequestIdentifierForDismissalSync:0];
  return v7;
}

uint64_t sub_101099564(unsigned int a1, uint64_t a2, uint64_t a3)
{
  uint64_t v26 = a3;
  char v4 = a1;
  unsigned __int8 v5 = BYTE1(a1);
  unsigned int v6 = a1 >> 8;
  uint64_t v7 = type metadata accessor for UUID();
  uint64_t v8 = *(void *)(v7 - 8);
  __chkstk_darwin(v7);
  NSString v10 = (char *)&v25 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  id v35 = &type metadata for SecureLocationsStewiePublishReminderNotification;
  unsigned int v36 = &off_101605DD8;
  v34[0] = v4;
  v34[1] = v6;
  id v11 = objc_allocWithZone((Class)UNUserNotificationCenter);
  NSString v12 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  id v13 = [v11 initWithBundleIdentifier:v12];

  id v14 = sub_101099230(v5);
  uint64_t v15 = String.utf8Data.getter();
  unint64_t v17 = v16;
  long long aBlock = (void **)v15;
  uint64_t v28 = v16;
  sub_1000362FC();
  DataProtocol.stableUUID.getter();
  sub_10001CFB8(v15, v17);
  UUID.uuidString.getter();
  (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v7);
  id v18 = v14;
  NSString v19 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  id v20 = [self requestWithIdentifier:v19 content:v18 trigger:0 destinations:7];

  sub_10001D010((uint64_t)v34, (uint64_t)v33);
  uint64_t v21 = swift_allocObject();
  sub_10001CEB0(v33, v21 + 16);
  uint64_t v22 = v26;
  *(void *)(v21 + 56) = a2;
  *(void *)(v21 + 64) = v22;
  long long v31 = sub_1002F6720;
  uint64_t v32 = v21;
  long long aBlock = _NSConcreteStackBlock;
  uint64_t v28 = 1107296256;
  unint64_t v29 = sub_100769474;
  uint64_t v30 = &unk_101605128;
  uint64_t v23 = _Block_copy(&aBlock);
  sub_1000BD0E8(a2);
  swift_release();
  [v13 addNotificationRequest:v20 withCompletionHandler:v23];

  _Block_release(v23);
  return _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)v34);
}

uint64_t sub_101099890()
{
  return _swift_deallocObject(v0, 25, 7);
}

uint64_t sub_1010998A0()
{
  uint64_t v2 = *(void *)(v0 + 16);
  char v3 = *(unsigned char *)(v0 + 24);
  char v4 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v4;
  *char v4 = v1;
  v4[1] = sub_100033F68;
  return sub_1010E07BC(v2, v3);
}

uint64_t sub_10109993C()
{
  return _swift_deallocObject(v0, 32, 7);
}

void sub_101099950()
{
  sub_10107FCC8(*(unsigned char **)(v0 + 16));
}

void sub_10109996C(uint64_t a1)
{
  uint64_t v3 = type metadata accessor for DispatchPredicate();
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  uint64_t v6 = (uint64_t *)((char *)&v19 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v7 = *(void **)&v1[OBJC_IVAR____TtC12searchpartyd28SecureLocationsStewieManager_clientQueue];
  *uint64_t v6 = v7;
  (*(void (**)(void *, void, uint64_t))(v4 + 104))(v6, enum case for DispatchPredicate.onQueue(_:), v3);
  id v8 = v7;
  LOBYTE(v7) = _dispatchPreconditionTest(_:)();
  (*(void (**)(void *, uint64_t))(v4 + 8))(v6, v3);
  if (v7)
  {
    if (qword_101637070 == -1) {
      goto LABEL_3;
    }
  }
  else
  {
    __break(1u);
  }
  swift_once();
LABEL_3:
  uint64_t v9 = type metadata accessor for Logger();
  sub_100010324(v9, (uint64_t)qword_10170EC30);
  NSString v10 = v1;
  swift_unknownObjectRetain_n();
  id v11 = v10;
  NSString v12 = Logger.logObject.getter();
  os_log_type_t v13 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v12, v13))
  {
    uint64_t v14 = swift_slowAlloc();
    uint64_t v20 = swift_slowAlloc();
    *(_DWORD *)uint64_t v14 = 136446466;
    uint64_t v15 = *(void *)&v11[OBJC_IVAR____TtC12searchpartyd28SecureLocationsStewieManager_stewieLogPrefix];
    unint64_t v16 = *(void *)&v11[OBJC_IVAR____TtC12searchpartyd28SecureLocationsStewieManager_stewieLogPrefix + 8];
    swift_bridgeObjectRetain();
    uint64_t v19 = sub_1008FA0F0(v15, v16, &v20);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    swift_bridgeObjectRelease();
    *(_WORD *)(v14 + 12) = 2080;
    uint64_t v19 = a1;
    swift_unknownObjectRetain();
    sub_10000588C(&qword_101669328);
    uint64_t v17 = String.init<A>(describing:)();
    uint64_t v19 = sub_1008FA0F0(v17, v18, &v20);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_unknownObjectRelease_n();
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v12, v13, "%{public}s - Anomalous - we are not expecting to receive any message %s", (uint8_t *)v14, 0x16u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {

    swift_unknownObjectRelease_n();
  }
}

uint64_t sub_101099C8C()
{
  return _swift_deallocObject(v0, 32, 7);
}

uint64_t sub_101099CA0(uint64_t a1)
{
  return sub_1010910E8(a1, *(void *)(v1 + 16), *(void *)(v1 + 24));
}

uint64_t sub_101099CBC()
{
  swift_release();
  swift_release();

  return _swift_deallocObject(v0, 32, 7);
}

uint64_t sub_101099CFC()
{
  swift_unknownObjectWeakDestroy();

  return _swift_deallocObject(v0, 24, 7);
}

void sub_101099D34(uint64_t a1@<X8>)
{
}

void sub_101099D3C(uint64_t a1, uint64_t a2, int a3)
{
}

uint64_t sub_101099D44()
{
  swift_release();
  swift_release();

  return _swift_deallocObject(v0, 40, 7);
}

BOOL sub_101099D8C()
{
  return sub_1010908D0(*(void *)(v0 + 16), *(void *)(v0 + 24), *(char **)(v0 + 32));
}

uint64_t sub_101099D98(id *a1)
{
  return sub_100E04354(a1, *(void **)(v1 + 16)) & 1;
}

double sub_101099DB8@<D0>(int64x2_t *a1@<X8>)
{
  *(void *)&double result = sub_10108FD3C((int64x2_t *)*(void *)(v1 + 16), a1).u64[0];
  return result;
}

uint64_t sub_101099DD4(uint64_t a1)
{
  return sub_1001FE6F4(a1, *(void *)(v1 + 16), *(void *)(v1 + 24));
}

uint64_t sub_101099DF0()
{
  return sub_101087FD0(*(void **)(v0 + 16));
}

uint64_t sub_101099E0C()
{
  return _swift_deallocObject(v0, 25, 7);
}

void sub_101099E20()
{
  sub_10108D7EC(*(void **)(v0 + 16), *(void (**)(id, void))(v0 + 24), *(void *)(v0 + 32));
}

uint64_t sub_101099E30()
{
  return sub_10108CFC4(*(char **)(v0 + 16), *(void *)(v0 + 24), *(void *)(v0 + 32));
}

uint64_t sub_101099E3C()
{
  swift_release();

  return _swift_deallocObject(v0, 32, 7);
}

uint64_t sub_101099E74()
{
  return (*(uint64_t (**)(void, void))(v0 + 16))(0, 0);
}

uint64_t sub_101099EA4()
{
  swift_release();

  return _swift_deallocObject(v0, 40, 7);
}

uint64_t sub_101099EDC()
{
  return (*(uint64_t (**)(void, void))(v0 + 16))(*(void *)(v0 + 32), 0);
}

void sub_101099F14()
{
  sub_10108CD90(*(unsigned char **)(v0 + 16), *(void (**)(void))(v0 + 24));
}

uint64_t sub_101099F20(uint64_t a1)
{
  return sub_10108A4EC(a1, *(char **)(v1 + 16), *(void *)(v1 + 24), *(void *)(v1 + 32));
}

uint64_t sub_101099F40()
{
  swift_release();
  swift_release();

  return _swift_deallocObject(v0, 48, 7);
}

void sub_101099F88()
{
  sub_10108A7D8(*(void **)(v0 + 16), *(void *)(v0 + 24), *(void (**)(void *))(v0 + 32), *(void *)(v0 + 40));
}

uint64_t sub_101099F94()
{
  return _swift_deallocObject(v0, 24, 7);
}

void sub_101099FCC(char a1)
{
  sub_10108C67C(a1, *(void **)(v1 + 16));
}

void sub_101099FD4()
{
  sub_10108C9E4(*(void (**)())(v0 + 16));
}

uint64_t sub_101099FF0()
{
  return sub_10109A4D0((void (*)(void))&_swift_errorRelease);
}

uint64_t sub_10109A008()
{
  return sub_101089B48(*(void **)(v0 + 16), *(void **)(v0 + 24), *(void *)(v0 + 32));
}

uint64_t sub_10109A014(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(uint64_t (**)(uint64_t *, uint64_t *))(v2 + 16);
  uint64_t v5 = a2;
  uint64_t v6 = a1;
  return v3(&v6, &v5);
}

uint64_t sub_10109A050()
{
  swift_release();

  swift_errorRelease();

  return _swift_deallocObject(v0, 48, 7);
}

uint64_t sub_10109A098()
{
  return (*(uint64_t (**)(void, void))(v0 + 16))(*(void *)(v0 + 32), *(void *)(v0 + 40));
}

void sub_10109A0CC()
{
  sub_1010895E4(*(char **)(v0 + 16), *(void *)(v0 + 24), *(void *)(v0 + 32));
}

uint64_t sub_10109A0D8(void *a1, void *a2)
{
  return (*(uint64_t (**)(void, void))(v2 + 16))(*a1, *a2);
}

void sub_10109A108(uint64_t a1)
{
}

uint64_t sub_10109A110()
{
  swift_release();

  return _swift_deallocObject(v0, 32, 7);
}

uint64_t sub_10109A148(void *a1)
{
  return sub_101093BD8(a1, *(void *)(v1 + 16));
}

uint64_t sub_10109A150@<X0>(void *a1@<X8>)
{
  *a1 = *(void *)(v1 + 40);
  return swift_bridgeObjectRetain();
}

uint64_t sub_10109A170(uint64_t a1)
{
  uint64_t v2 = *(uint64_t (**)(uint64_t *))(v1 + 16);
  uint64_t v4 = a1;
  return v2(&v4);
}

uint64_t sub_10109A1A8()
{
  return (*(uint64_t (**)(void))(v0 + 16))();
}

uint64_t sub_10109A1D8(void *a1)
{
  return (*(uint64_t (**)(void))(v1 + 16))(*a1);
}

uint64_t sub_10109A204()
{
  *(void *)(*(void *)(v0 + 16) + 40) = *(void *)(v0 + 24);
  swift_bridgeObjectRetain();
  return swift_bridgeObjectRelease();
}

void sub_10109A244()
{
  sub_101086EC4(*(void **)(v0 + 16));
}

uint64_t sub_10109A24C()
{
  unint64_t v1 = *(void *)(v0 + 32);
  if (v1 >> 60 != 15) {
    sub_10001CFB8(*(void *)(v0 + 24), v1);
  }

  return _swift_deallocObject(v0, 40, 7);
}

void sub_10109A29C()
{
  sub_101084B30(*(char **)(v0 + 16), *(void *)(v0 + 24), *(void *)(v0 + 32));
}

uint64_t sub_10109A2A8()
{
  return sub_10109A558(32);
}

void sub_10109A2B0(void *a1, uint64_t a2)
{
  sub_101085790(a1, a2, *(void *)(v2 + 16), *(void **)(v2 + 24));
}

uint64_t sub_10109A2B8()
{
  return _swift_deallocObject(v0, 40, 7);
}

uint64_t sub_10109A300()
{
  return sub_101085C74(v0[2], v0[3], v0[4]);
}

uint64_t sub_10109A30C()
{
  swift_bridgeObjectRelease();

  return _swift_deallocObject(v0, 40, 7);
}

uint64_t sub_10109A344()
{
  char v2 = *(unsigned char *)(v0 + 16);
  uint64_t v4 = *(void *)(v0 + 24);
  uint64_t v3 = *(void *)(v0 + 32);
  uint64_t v5 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v5;
  *uint64_t v5 = v1;
  v5[1] = sub_100033F68;
  return sub_1010E02BC(v2, v4, v3);
}

uint64_t sub_10109A3EC()
{
  char v2 = *(unsigned char *)(v0 + 16);
  uint64_t v4 = *(void *)(v0 + 24);
  uint64_t v3 = *(void *)(v0 + 32);
  uint64_t v5 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v5;
  *uint64_t v5 = v1;
  v5[1] = sub_10001D2E4;
  return sub_1010E02BC(v2, v4, v3);
}

uint64_t sub_10109A494()
{
  return sub_10109A4D0((void (*)(void))&_swift_release);
}

void sub_10109A4AC()
{
  sub_101081ED8(*(void **)(v0 + 16), *(void **)(v0 + 24), *(void *)(v0 + 32));
}

uint64_t sub_10109A4B8()
{
  return sub_10109A4D0((void (*)(void))&_swift_release);
}

uint64_t sub_10109A4D0(void (*a1)(void))
{
  a1(*(void *)(v1 + 32));

  return _swift_deallocObject(v1, 40, 7);
}

void sub_10109A528(uint64_t a1)
{
  sub_10108244C(a1, *(void **)(v1 + 16), *(void *)(v1 + 24), *(void *)(v1 + 32));
}

uint64_t sub_10109A534(uint64_t a1)
{
  return sub_1010841B4(a1, *(void **)(v1 + 16), *(void *)(v1 + 24));
}

uint64_t sub_10109A550()
{
  return sub_10109A558(32);
}

uint64_t sub_10109A558(uint64_t a1)
{
  swift_release();

  return _swift_deallocObject(v1, a1, 7);
}

void sub_10109A5A4(uint64_t a1, unint64_t a2, uint64_t a3)
{
  sub_10108435C(a1, a2, a3, *(void *)(v3 + 16), *(void **)(v3 + 24));
}

uint64_t sub_10109A5AC()
{
  uint64_t v1 = (int *)(type metadata accessor for SecureLocation() - 8);
  uint64_t v2 = *(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v3 = (v2 + 32) & ~v2;
  uint64_t v4 = v3 + *(void *)(*(void *)v1 + 64);
  uint64_t v5 = v2 | 7;
  swift_release();
  swift_bridgeObjectRelease();
  uint64_t v6 = v0 + v3 + v1[15];
  uint64_t v7 = type metadata accessor for Date();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v7 - 8) + 8))(v6, v7);
  swift_bridgeObjectRelease();

  return _swift_deallocObject(v0, v4, v5);
}

void sub_10109A6B8(uint64_t a1, uint64_t a2)
{
  type metadata accessor for SecureLocation();
  uint64_t v5 = *(void (**)(uint64_t, unint64_t, uint64_t))(v2 + 16);

  sub_10060A900(a1, a2, v5);
}

uint64_t sub_10109A73C(uint64_t a1)
{
  return sub_101082F04(a1, *(char **)(v1 + 16), *(void *)(v1 + 24));
}

uint64_t sub_10109A758()
{
  uint64_t v1 = (int *)(type metadata accessor for SecureLocation() - 8);
  uint64_t v2 = *(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v3 = (v2 + 32) & ~v2;
  uint64_t v4 = v3 + *(void *)(*(void *)v1 + 64);
  uint64_t v5 = v2 | 7;

  swift_release();
  swift_bridgeObjectRelease();
  uint64_t v6 = v0 + v3 + v1[15];
  uint64_t v7 = type metadata accessor for Date();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v7 - 8) + 8))(v6, v7);
  swift_bridgeObjectRelease();

  return _swift_deallocObject(v0, v4, v5);
}

void sub_10109A86C()
{
  uint64_t v1 = *(void *)(type metadata accessor for SecureLocation() - 8);
  uint64_t v2 = *(unsigned __int8 **)(v0 + 16);
  uint64_t v3 = *(void *)(v0 + 24);
  uint64_t v4 = v0 + ((*(unsigned __int8 *)(v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80));

  sub_10108328C(v2, v3, v4);
}

uint64_t sub_10109A8D0(uint64_t a1)
{
  return sub_101080E18(a1, *(char **)(v1 + 16));
}

void sub_10109A8F0()
{
  sub_1010810F0(*(char **)(v0 + 16), *(id *)(v0 + 24));
}

void sub_10109A8FC(uint64_t a1)
{
  sub_1010818E4(a1, *(void **)(v1 + 16));
}

void sub_10109A904(unsigned __int8 *a1)
{
  sub_10108067C(a1, *(void **)(v1 + 16));
}

uint64_t sub_10109A924()
{
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v0 + 16);

  return _swift_deallocObject(v0, 64, 7);
}

uint64_t sub_10109A964(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_10109A9AC(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

uint64_t sub_10109AA14(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t getEnumTagSinglePayload for SecureLocationsStewiePublishReminderNotification(unsigned __int16 *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0xFE) {
    goto LABEL_17;
  }
  if (a2 + 65282 <= 0xFFFEFFFF) {
    int v2 = 2;
  }
  else {
    int v2 = 4;
  }
  if (a2 + 65282 < 0xFF0000) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 16)) - 65282;
    }
  }
  else
  {
    if (v3 == 2)
    {
      int v4 = a1[1];
      if (!a1[1]) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 16)) - 65282;
    }
    int v4 = *((unsigned __int8 *)a1 + 2);
    if (*((unsigned char *)a1 + 2)) {
      return (*a1 | (v4 << 16)) - 65282;
    }
  }
LABEL_17:
  unsigned int v6 = *(unsigned __int8 *)a1;
  BOOL v7 = v6 >= 3;
  int v8 = v6 - 3;
  if (!v7) {
    int v8 = -1;
  }
  return (v8 + 1);
}

uint64_t storeEnumTagSinglePayload for SecureLocationsStewiePublishReminderNotification(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a3 + 65282 <= 0xFFFEFFFF) {
    int v3 = 2;
  }
  else {
    int v3 = 4;
  }
  if (a3 + 65282 < 0xFF0000) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFE) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFD)
  {
    unsigned int v6 = ((a2 - 254) >> 16) + 1;
    *(_WORD *)uint64_t result = a2 - 254;
    switch(v5)
    {
      case 1:
        *(unsigned char *)(result + 2) = v6;
        break;
      case 2:
        *(_WORD *)(result + 2) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x10109ABD4);
      case 4:
        *(_DWORD *)(result + 2) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        *(unsigned char *)(result + 2) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 2) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 2) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *(unsigned char *)uint64_t result = a2 + 2;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for SecureLocationsStewiePublishReminderNotification()
{
  return &type metadata for SecureLocationsStewiePublishReminderNotification;
}

void sub_10109AC0C()
{
}

uint64_t sub_10109AC24()
{
  return sub_101099DF0();
}

uint64_t sub_10109AC3C@<X0>(void *a1@<X8>)
{
  return sub_10109A150(a1);
}

uint64_t sub_10109AD10(uint64_t a1)
{
  return sub_1009F889C(a1);
}

uint64_t sub_10109AD28(uint64_t a1)
{
  return sub_101099DD4(a1);
}

uint64_t sub_10109AD40(uint64_t a1)
{
  return sub_1007685AC(a1);
}

void sub_10109ADE8(uint8_t *a1@<X8>)
{
}

uint64_t sub_10109AE00(uint64_t a1)
{
  unint64_t v2 = sub_10041AC20();

  return RequestContentRepresentable.description.getter(a1, v2);
}

uint64_t sub_10109AE3C(void *a1)
{
  int v3 = v1;
  uint64_t v5 = sub_10000588C(&qword_101669478);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  int v8 = &v10[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0)];
  sub_10001CD44(a1, a1[3]);
  sub_10109E3D4();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  uint64_t v11 = *v3;
  v10[7] = 0;
  sub_10000588C(&qword_10163BD60);
  sub_1009696EC();
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  if (!v2)
  {
    void v10[6] = 1;
    KeyedEncodingContainer.encode(_:forKey:)();
    void v10[5] = 2;
    KeyedEncodingContainer.encode(_:forKey:)();
  }
  return (*(uint64_t (**)(unsigned char *, uint64_t))(v6 + 8))(v8, v5);
}

uint64_t sub_10109AFE8(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = sub_10000588C(&qword_1016693F8);
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  uint64_t v9 = (char *)v11 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10001CD44(a1, a1[3]);
  sub_10109DCF4();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  char v13 = 0;
  KeyedEncodingContainer.encode(_:forKey:)();
  if (!v3)
  {
    v11[1] = a3;
    char v12 = 1;
    sub_10000588C((uint64_t *)&unk_10164DBD0);
    sub_10109DD48((unint64_t *)&qword_10163F7E0, (uint64_t *)&unk_10164DBD0, (void (*)(void))sub_100037BB4);
    KeyedEncodingContainer.encode<A>(_:forKey:)();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v7 + 8))(v9, v6);
}

uint64_t sub_10109B1AC()
{
  uint64_t v1 = 0x6449746E65696C63;
  if (*v0 != 1) {
    uint64_t v1 = 0x41747865746E6F63;
  }
  if (*v0) {
    return v1;
  }
  else {
    return 0x53776F6C6C616873;
  }
}

uint64_t sub_10109B214@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_10109D220(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_10109B23C(uint64_t a1)
{
  unint64_t v2 = sub_10109E3D4();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_10109B278(uint64_t a1)
{
  unint64_t v2 = sub_10109E3D4();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_10109B2B4(void *a1)
{
  return sub_10109AE3C(a1);
}

uint64_t sub_10109B2CC()
{
  if (*v0) {
    return 0x76654464656E776FLL;
  }
  else {
    return 0x6570795479656BLL;
  }
}

uint64_t sub_10109B314@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_10109D39C(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_10109B33C(uint64_t a1)
{
  unint64_t v2 = sub_10109DCF4();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_10109B378(uint64_t a1)
{
  unint64_t v2 = sub_10109DCF4();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_10109B3B4(void *a1)
{
  return sub_10109AFE8(a1, *v1, v1[1]);
}

uint64_t sub_10109B3D0(void *a1)
{
  uint64_t v3 = v1;
  uint64_t v5 = sub_10000588C(&qword_1016693C8);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v8 = (char *)&v11 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10001CD44(a1, a1[3]);
  sub_10109DBF8();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  long long v9 = v3[1];
  long long v13 = *v3;
  long long v14 = v9;
  uint64_t v15 = *((void *)v3 + 4);
  char v12 = 0;
  sub_10109DC4C();
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  if (!v2)
  {
    *(void *)&long long v13 = *((void *)v3 + 5);
    char v12 = 1;
    sub_10000588C(&qword_1016693E0);
    sub_10109DD48(&qword_1016693E8, &qword_1016693E0, (void (*)(void))sub_10109DCA0);
    KeyedEncodingContainer.encode<A>(_:forKey:)();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
}

uint64_t sub_10109B5AC(void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v14 = a4;
  uint64_t v8 = sub_10000588C(&qword_1016694C8);
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  uint64_t v11 = (char *)&v13 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10001CD44(a1, a1[3]);
  sub_10109EC14();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  uint64_t v15 = a2;
  uint64_t v16 = a3;
  char v17 = 0;
  sub_100037BB4();
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  if (!v4)
  {
    uint64_t v15 = v14;
    char v17 = 1;
    sub_10000588C(&qword_101647338);
    sub_10109EC68(&qword_101647360, &qword_1016471E8);
    KeyedEncodingContainer.encode<A>(_:forKey:)();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v9 + 8))(v11, v8);
}

uint64_t sub_10109B78C()
{
  if (*v0) {
    return 0x6863746566;
  }
  else {
    return 0x6F43746E65696C63;
  }
}

uint64_t sub_10109B7D0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_10109D4B4(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_10109B7F8(uint64_t a1)
{
  unint64_t v2 = sub_10109DBF8();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_10109B834(uint64_t a1)
{
  unint64_t v2 = sub_10109DBF8();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_10109B870(void *a1)
{
  return sub_10109B3D0(a1);
}

uint64_t sub_10109B888(uint64_t a1)
{
  unint64_t v2 = sub_10109E32C();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_10109B8C4(uint64_t a1)
{
  unint64_t v2 = sub_10109E32C();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_10109B900@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result = sub_10109D5C4(a1);
  if (!v2)
  {
    *(void *)a2 = result;
    *(void *)(a2 + 8) = v5;
    *(unsigned char *)(a2 + 16) = v6 & 1;
    *(unsigned char *)(a2 + 17) = HIBYTE(v6) & 1;
  }
  return result;
}

uint64_t sub_10109B93C()
{
  if (*v0) {
    return 0xD000000000000014;
  }
  else {
    return 0x65566769666E6F63;
  }
}

uint64_t sub_10109B988@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_10109D864(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_10109B9B0(uint64_t a1)
{
  unint64_t v2 = sub_10109DB50();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_10109B9EC(uint64_t a1)
{
  unint64_t v2 = sub_10109DB50();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_10109BA28@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result = sub_10109D978(a1);
  if (!v2)
  {
    *(void *)a2 = result;
    *(void *)(a2 + 8) = v5;
    *(void *)(a2 + 16) = v6;
    *(unsigned char *)(a2 + 24) = v7 & 1;
    *(unsigned char *)(a2 + 25) = HIBYTE(v7) & 1;
  }
  return result;
}

uint64_t sub_10109BA68()
{
  if (*v0) {
    return 0x6E6F697461636F6CLL;
  }
  else {
    return 25705;
  }
}

uint64_t sub_10109BAA0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_10109E8A4(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_10109BAC8(uint64_t a1)
{
  unint64_t v2 = sub_10109EC14();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_10109BB04(uint64_t a1)
{
  unint64_t v2 = sub_10109EC14();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_10109BB40@<X0>(void *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = sub_10109E998(a1);
  if (!v2)
  {
    *a2 = result;
    a2[1] = v5;
    a2[2] = v6;
  }
  return result;
}

uint64_t sub_10109BB70(void *a1)
{
  return sub_10109B5AC(a1, *v1, v1[1], v1[2]);
}

uint64_t sub_10109BB90@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v51 = type metadata accessor for HashAlgorithm();
  uint64_t v8 = *(void *)(v51 - 8);
  __chkstk_darwin(v51);
  long long v50 = (char *)&v35 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v49 = type metadata accessor for UUID();
  uint64_t v10 = *(void *)(v49 - 8);
  __chkstk_darwin(v49);
  long long v48 = (char *)&v35 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  unint64_t v12 = sub_10092D8F8((uint64_t)_swiftEmptyArrayStorage);
  sub_10000588C(&qword_101669398);
  uint64_t v13 = swift_allocObject();
  uint64_t v14 = v13;
  *(_OWORD *)(v13 + 16) = xmmword_101342130;
  int64_t v15 = *(void *)(a3 + 16);
  if (v15)
  {
    uint64_t v35 = v13;
    unint64_t v36 = v12;
    uint64_t v38 = a1;
    uint64_t v39 = a2;
    uint64_t v40 = a4;
    long long v52 = _swiftEmptyArrayStorage;
    sub_1000B765C(0, v15, 0);
    char v17 = *(void (**)(char *, uint64_t, uint64_t))(v10 + 16);
    uint64_t v16 = v10 + 16;
    unint64_t v18 = (*(unsigned __int8 *)(v16 + 64) + 32) & ~(unint64_t)*(unsigned __int8 *)(v16 + 64);
    uint64_t v37 = a3;
    uint64_t v19 = a3 + v18;
    uint64_t v45 = *(void *)(v16 + 56);
    long long v46 = v17;
    unsigned int v44 = enum case for HashAlgorithm.sha256(_:);
    long long v42 = (void (**)(char *, uint64_t))(v8 + 8);
    long long v43 = (void (**)(char *, void, uint64_t))(v8 + 104);
    unint64_t v41 = (void (**)(char *, uint64_t))(v16 - 8);
    uint64_t v47 = v16;
    uint64_t v20 = v48;
    uint64_t v21 = v49;
    uint64_t v22 = v50;
    do
    {
      v46(v20, v19, v21);
      uint64_t v23 = UUID.data.getter();
      unint64_t v25 = v24;
      uint64_t v26 = v51;
      (*v43)(v22, v44, v51);
      uint64_t v27 = Data.hash(algorithm:)();
      uint64_t v29 = v28;
      sub_10001CFB8(v23, v25);
      (*v42)(v22, v26);
      (*v41)(v20, v21);
      uint64_t v30 = v52;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        sub_1000B765C(0, v30[2] + 1, 1);
        uint64_t v30 = v52;
      }
      unint64_t v32 = v30[2];
      unint64_t v31 = v30[3];
      if (v32 >= v31 >> 1)
      {
        sub_1000B765C(v31 > 1, v32 + 1, 1);
        uint64_t v30 = v52;
      }
      _OWORD v30[2] = v32 + 1;
      long long v33 = &v30[2 * v32];
      v33[4] = v27;
      v33[5] = v29;
      v19 += v45;
      --v15;
    }
    while (v15);
    uint64_t result = swift_bridgeObjectRelease();
    a2 = v39;
    a4 = v40;
    a1 = v38;
    uint64_t v14 = v35;
    unint64_t v12 = v36;
  }
  else
  {
    uint64_t result = swift_bridgeObjectRelease();
    uint64_t v30 = _swiftEmptyArrayStorage;
  }
  *(void *)(v14 + 32) = 1;
  *(void *)(v14 + 40) = v30;
  *(void *)a4 = v12;
  *(void *)(a4 + 8) = a1;
  *(void *)(a4 + 16) = a2;
  strcpy((char *)(a4 + 24), "searchpartyd");
  *(unsigned char *)(a4 + 37) = 0;
  *(_WORD *)(a4 + 38) = -5120;
  *(void *)(a4 + 40) = v14;
  return result;
}

uint64_t sub_10109BF1C(uint64_t a1, uint64_t a2)
{
  v2[44] = a1;
  v2[45] = a2;
  uint64_t v3 = type metadata accessor for HashAlgorithm();
  v2[46] = v3;
  v2[47] = *(void *)(v3 - 8);
  v2[48] = swift_task_alloc();
  return _swift_task_switch(sub_10109BFDC, 0, 0);
}

uint64_t sub_10109BFDC()
{
  uint64_t v1 = *(void *)(v0 + 352);
  type metadata accessor for JSONEncoder();
  swift_allocObject();
  JSONEncoder.init()();
  long long v3 = *(_OWORD *)(v1 + 16);
  long long v2 = *(_OWORD *)(v1 + 32);
  *(_OWORD *)(v0 + 176) = *(_OWORD *)v1;
  *(_OWORD *)(v0 + 192) = v3;
  *(_OWORD *)(v0 + 208) = v2;
  sub_10109CAF8();
  uint64_t v4 = dispatch thunk of JSONEncoder.encode<A>(_:)();
  *(void *)(v0 + 392) = v4;
  *(void *)(v0 + 400) = v5;
  uint64_t v6 = v4;
  unint64_t v7 = v5;
  uint64_t v8 = *(void *)(v0 + 352);
  swift_release();
  *(void *)(v0 + 320) = *(void *)v8;
  sub_10025C634(v0 + 320);
  *(_OWORD *)(v0 + 272) = *(_OWORD *)(v8 + 8);
  sub_100BD9800(v0 + 272);
  *(_OWORD *)(v0 + 240) = *(_OWORD *)(v8 + 24);
  sub_100BD9800(v0 + 240);
  *(void *)(v0 + 304) = *(void *)(v1 + 40);
  sub_10025C634(v0 + 304);
  sub_10000588C(&qword_101642890);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_10134BF90;
  *(void *)(inited + 32) = 0xD000000000000011;
  *(void *)(inited + 40) = 0x80000001013F64E0;
  id v10 = [self currentDevice];
  if (!v10)
  {
LABEL_13:
    __break(1u);
    goto LABEL_14;
  }
  uint64_t v11 = v10;
  id v12 = [v10 serverFriendlyDescription];

  if (!v12)
  {
LABEL_14:
    __break(1u);
    JUMPOUT(0x10109C3E0);
  }
  uint64_t v13 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v15 = v14;

  *(void *)(inited + 48) = v13;
  *(void *)(inited + 56) = v15;
  strcpy((char *)(inited + 64), "Accept-Version");
  *(unsigned char *)(inited + 79) = -18;
  *(void *)(inited + 80) = 49;
  *(void *)(inited + 88) = 0xE100000000000000;
  strcpy((char *)(inited + 96), "Content-Type");
  *(unsigned char *)(inited + 109) = 0;
  *(_WORD *)(inited + 110) = -5120;
  *(void *)(inited + 112) = 0xD000000000000010;
  *(void *)(inited + 120) = 0x80000001013F87B0;
  strcpy((char *)(inited + 128), "Content-Length");
  *(unsigned char *)(inited + 143) = -18;
  uint64_t v16 = 0;
  switch(v7 >> 62)
  {
    case 1uLL:
      LODWORD(v16) = HIDWORD(v6) - v6;
      if (__OFSUB__(HIDWORD(v6), v6))
      {
        __break(1u);
LABEL_12:
        __break(1u);
        goto LABEL_13;
      }
      uint64_t v16 = (int)v16;
LABEL_8:
      *(void *)(v0 + 328) = v16;
      v20._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
      String.append(_:)(v20);
      swift_bridgeObjectRelease();
      *(void *)(inited + 144) = 0;
      *(void *)(inited + 152) = 0xE000000000000000;
      *(void *)(v0 + 408) = sub_10092D8F8(inited);
      uint64_t v23 = (uint64_t (__cdecl *)())((char *)&dword_10165AB88 + dword_10165AB88);
      uint64_t v21 = (void *)swift_task_alloc();
      *(void *)(v0 + 416) = v21;
      *uint64_t v21 = v0;
      v21[1] = sub_10109C3F0;
      return v23();
    case 2uLL:
      uint64_t v18 = *(void *)(v6 + 16);
      uint64_t v17 = *(void *)(v6 + 24);
      BOOL v19 = __OFSUB__(v17, v18);
      uint64_t v16 = v17 - v18;
      if (!v19) {
        goto LABEL_8;
      }
      goto LABEL_12;
    case 3uLL:
      goto LABEL_8;
    default:
      uint64_t v16 = BYTE6(v7);
      goto LABEL_8;
  }
}

uint64_t sub_10109C3F0(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *v2;
  *(void *)(v3 + 424) = a1;
  *(void *)(v3 + 432) = a2;
  swift_task_dealloc();
  return _swift_task_switch(sub_10109C4F0, 0, 0);
}

uint64_t sub_10109C4F0()
{
  uint64_t v2 = v0[53];
  unint64_t v1 = v0[54];
  uint64_t v4 = v0[49];
  unint64_t v3 = v0[50];
  uint64_t v6 = v0[47];
  uint64_t v5 = v0[48];
  uint64_t v7 = v0[46];
  v0[36] = v2;
  v0[37] = v1;
  sub_1000361E0(v2, v1);
  sub_1000361E0(v4, v3);
  sub_100A42CBC(v4, v3);
  sub_10001CFB8(v4, v3);
  sub_10001CFB8(v2, v1);
  uint64_t v8 = v0[37];
  v0[55] = v0[36];
  v0[56] = v8;
  (*(void (**)(uint64_t, void, uint64_t))(v6 + 104))(v5, enum case for HashAlgorithm.sha256(_:), v7);
  uint64_t v9 = Data.hash(algorithm:)();
  uint64_t v11 = v10;
  v0[57] = v9;
  v0[58] = v10;
  (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v5, v7);
  uint64_t v15 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))((char *)&dword_10165AB80 + dword_10165AB80);
  id v12 = (void *)swift_task_alloc();
  v0[59] = v12;
  *id v12 = v0;
  v12[1] = sub_10109C670;
  uint64_t v13 = v0[45];
  return v15(v9, v11, v13);
}

uint64_t sub_10109C670(uint64_t a1)
{
  uint64_t v4 = *(void **)v2;
  *(void *)(*(void *)v2 + 480) = v1;
  swift_task_dealloc();
  if (v1)
  {
    uint64_t v5 = sub_10109C8AC;
  }
  else
  {
    uint64_t v6 = v4[57];
    unint64_t v7 = v4[58];
    v4[61] = a1;
    sub_10001CFB8(v6, v7);
    uint64_t v5 = sub_10109C79C;
  }
  return _swift_task_switch(v5, 0, 0);
}

uint64_t sub_10109C79C()
{
  uint64_t v13 = v0;
  uint64_t v2 = v0[60];
  uint64_t v1 = v0[61];
  uint64_t v3 = v0[51];
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v12 = v3;
  sub_1001EE9C8(v1, (uint64_t)sub_100BD6E00, 0, isUniquelyReferenced_nonNull_native, &v12);
  if (v2)
  {
    return swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v6 = v0[55];
    unint64_t v7 = v0[56];
    uint64_t v8 = v12;
    swift_bridgeObjectRelease();
    swift_release();
    sub_10001CFB8(v6, v7);
    swift_task_dealloc();
    uint64_t v9 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))v0[1];
    uint64_t v10 = v0[49];
    uint64_t v11 = v0[50];
    return v9(v10, v11, v8);
  }
}

uint64_t sub_10109C8AC()
{
  uint64_t v1 = v0[55];
  unint64_t v2 = v0[56];
  sub_10001CFB8(v0[57], v0[58]);
  sub_10001CFB8(v1, v2);
  if (qword_101636FB8 != -1) {
    swift_once();
  }
  uint64_t v3 = type metadata accessor for Logger();
  sub_100010324(v3, (uint64_t)qword_10170EAA8);
  swift_errorRetain();
  swift_errorRetain();
  uint64_t v4 = Logger.logObject.getter();
  os_log_type_t v5 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v4, v5))
  {
    uint64_t v6 = (uint8_t *)swift_slowAlloc();
    unint64_t v7 = (void *)swift_slowAlloc();
    *(_DWORD *)uint64_t v6 = 138543362;
    swift_errorRetain();
    uint64_t v8 = _swift_stdlib_bridgeErrorToNSError();
    v0[43] = v8;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *unint64_t v7 = v8;
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl((void *)&_mh_execute_header, v4, v5, "Failed to generate fetch request attestation header: %{public}@.", v6, 0xCu);
    sub_10000588C((uint64_t *)&unk_101638EA0);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
    swift_release();

    swift_errorRelease();
  }
  else
  {
    swift_errorRelease();
    swift_errorRelease();
    swift_errorRelease();
    swift_release();
  }
  uint64_t v9 = v0[51];
  swift_task_dealloc();
  uint64_t v10 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))v0[1];
  uint64_t v11 = v0[49];
  uint64_t v12 = v0[50];
  return v10(v11, v12, v9);
}

unint64_t sub_10109CAF8()
{
  unint64_t result = qword_101669390;
  if (!qword_101669390)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_101669390);
  }
  return result;
}

uint64_t destroy for PencilSecureLocationsFetchRequest(uint64_t *a1)
{
  unint64_t v1 = a1[1];
  if (v1 >> 60 != 15) {
    sub_10001CFB8(*a1, v1);
  }

  return swift_bridgeObjectRelease();
}

uint64_t _s12searchpartyd33PencilSecureLocationsFetchRequestVwCP_0(uint64_t a1, uint64_t *a2)
{
  unint64_t v4 = a2[1];
  if (v4 >> 60 == 15)
  {
    *(_OWORD *)a1 = *(_OWORD *)a2;
  }
  else
  {
    uint64_t v5 = *a2;
    sub_1000361E0(*a2, a2[1]);
    *(void *)a1 = v5;
    *(void *)(a1 + 8) = v4;
  }
  *(void *)(a1 + 16) = a2[2];
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t *assignWithCopy for PencilSecureLocationsFetchRequest(uint64_t *a1, uint64_t *a2)
{
  unint64_t v4 = a2[1];
  if ((unint64_t)a1[1] >> 60 != 15)
  {
    if (v4 >> 60 != 15)
    {
      uint64_t v6 = *a2;
      sub_1000361E0(*a2, a2[1]);
      uint64_t v7 = *a1;
      unint64_t v8 = a1[1];
      *a1 = v6;
      a1[1] = v4;
      sub_10001CFB8(v7, v8);
      goto LABEL_8;
    }
    sub_1001356D0((uint64_t)a1);
    goto LABEL_6;
  }
  if (v4 >> 60 == 15)
  {
LABEL_6:
    *(_OWORD *)a1 = *(_OWORD *)a2;
    goto LABEL_8;
  }
  uint64_t v5 = *a2;
  sub_1000361E0(*a2, a2[1]);
  *a1 = v5;
  a1[1] = v4;
LABEL_8:
  a1[2] = a2[2];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t *assignWithTake for PencilSecureLocationsFetchRequest(uint64_t *a1, uint64_t *a2)
{
  unint64_t v4 = a1[1];
  if (v4 >> 60 != 15)
  {
    unint64_t v5 = a2[1];
    if (v5 >> 60 != 15)
    {
      uint64_t v6 = *a1;
      *a1 = *a2;
      a1[1] = v5;
      sub_10001CFB8(v6, v4);
      goto LABEL_6;
    }
    sub_1001356D0((uint64_t)a1);
  }
  *(_OWORD *)a1 = *(_OWORD *)a2;
LABEL_6:
  a1[2] = a2[2];
  swift_bridgeObjectRelease();
  return a1;
}

ValueMetadata *type metadata accessor for PencilSecureLocationsFetchRequest()
{
  return &type metadata for PencilSecureLocationsFetchRequest;
}

ValueMetadata *type metadata accessor for PencilSecureLocationFetchData.FetchData()
{
  return &type metadata for PencilSecureLocationFetchData.FetchData;
}

uint64_t destroy for PencilSecureLocationFetchData()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return swift_bridgeObjectRelease();
}

void *initializeWithCopy for PencilSecureLocationFetchData(void *a1, void *a2)
{
  uint64_t v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  uint64_t v4 = a2[3];
  a1[2] = a2[2];
  a1[3] = v4;
  uint64_t v5 = a2[5];
  a1[4] = a2[4];
  a1[5] = v5;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

void *assignWithCopy for PencilSecureLocationFetchData(void *a1, void *a2)
{
  *a1 = *a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[1] = a2[1];
  a1[2] = a2[2];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[3] = a2[3];
  a1[4] = a2[4];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[5] = a2[5];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t assignWithTake for PencilSecureLocationFetchData(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  swift_bridgeObjectRelease();
  uint64_t v4 = *(void *)(a2 + 16);
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(void *)(a1 + 16) = v4;
  swift_bridgeObjectRelease();
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for PencilSecureLocationFetchData(uint64_t *a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *((unsigned char *)a1 + 48)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  uint64_t v2 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for PencilSecureLocationFetchData(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 40) = 0;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)unint64_t result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 48) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)unint64_t result = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 48) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for PencilSecureLocationFetchData()
{
  return &type metadata for PencilSecureLocationFetchData;
}

uint64_t initializeWithCopy for PencilSecureLocationFetchResponse(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v3;
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(unsigned char *)(a1 + 24) = *(unsigned char *)(a2 + 24);
  *(unsigned char *)(a1 + 25) = *(unsigned char *)(a2 + 25);
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for PencilSecureLocationFetchResponse(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v4 = *(void *)(a2 + 16);
  *(unsigned char *)(a1 + 24) = *(unsigned char *)(a2 + 24);
  *(void *)(a1 + 16) = v4;
  *(unsigned char *)(a1 + 25) = *(unsigned char *)(a2 + 25);
  return a1;
}

__n128 initializeWithTake for PencilSecureLocationFetchResponse(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  *(_OWORD *)(a1 + 10) = *(_OWORD *)(a2 + 10);
  *(__n128 *)a1 = result;
  return result;
}

uint64_t assignWithTake for PencilSecureLocationFetchResponse(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v4;
  swift_bridgeObjectRelease();
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(unsigned char *)(a1 + 24) = *(unsigned char *)(a2 + 24);
  *(unsigned char *)(a1 + 25) = *(unsigned char *)(a2 + 25);
  return a1;
}

uint64_t getEnumTagSinglePayload for PencilSecureLocationFetchResponse(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 26)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for PencilSecureLocationFetchResponse(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 8) = 0;
    *(void *)(result + 16) = 0;
    *(_WORD *)(result + 24) = 0;
    *(void *)__n128 result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 26) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 8) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 26) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for PencilSecureLocationFetchResponse()
{
  return &type metadata for PencilSecureLocationFetchResponse;
}

unint64_t sub_10109D174()
{
  unint64_t result = qword_1016693A0;
  if (!qword_1016693A0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1016693A0);
  }
  return result;
}

unint64_t sub_10109D1CC()
{
  unint64_t result = qword_1016693A8;
  if (!qword_1016693A8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1016693A8);
  }
  return result;
}

uint64_t sub_10109D220(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 0x53776F6C6C616873 && a2 == 0xEC00000073746174;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x6449746E65696C63 && a2 == 0xE800000000000000 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0x41747865746E6F63 && a2 == 0xEA00000000007070)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else
  {
    char v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v6) {
      return 2;
    }
    else {
      return 3;
    }
  }
}

uint64_t sub_10109D39C(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 0x6570795479656BLL && a2 == 0xE700000000000000;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x76654464656E776FLL && a2 == 0xEE00736449656369)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else
  {
    char v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v6) {
      return 1;
    }
    else {
      return 2;
    }
  }
}

uint64_t sub_10109D4B4(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 0x6F43746E65696C63 && a2 == 0xED0000747865746ELL;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x6863746566 && a2 == 0xE500000000000000)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else
  {
    char v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v6) {
      return 1;
    }
    else {
      return 2;
    }
  }
}

uint64_t sub_10109D5C4(void *a1)
{
  uint64_t v3 = sub_10000588C(&qword_101669450);
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  char v6 = &v9[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v7 = a1[3];
  sub_10001CD44(a1, v7);
  sub_10109E32C();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v1)
  {
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)a1);
  }
  else
  {
    sub_10000588C(&qword_101669460);
    v9[15] = 0;
    sub_10109DD48(&qword_101669468, &qword_101669460, (void (*)(void))sub_10109E380);
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    uint64_t v7 = v10;
    v9[14] = 1;
    swift_bridgeObjectRetain();
    KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
    v9[12] = 2;
    sub_100BDB454();
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    (*(void (**)(unsigned char *, uint64_t))(v4 + 8))(v6, v3);
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)a1);
    swift_bridgeObjectRelease();
  }
  return v7;
}

uint64_t sub_10109D864(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 0x65566769666E6F63 && a2 == 0xED00006E6F697372;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0xD000000000000014 && a2 == 0x80000001013F0F70)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else
  {
    char v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v6) {
      return 1;
    }
    else {
      return 2;
    }
  }
}

uint64_t sub_10109D978(void *a1)
{
  uint64_t v3 = sub_10000588C(&qword_1016693B0);
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  char v6 = &v9[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v7 = a1[3];
  sub_10001CD44(a1, v7);
  sub_10109DB50();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (!v1)
  {
    v9[8] = 0;
    uint64_t v7 = KeyedDecodingContainer.decode(_:forKey:)();
    v9[7] = 1;
    sub_10109DBA4();
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    (*(void (**)(unsigned char *, uint64_t))(v4 + 8))(v6, v3);
  }
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)a1);
  return v7;
}

unint64_t sub_10109DB50()
{
  unint64_t result = qword_1016693B8;
  if (!qword_1016693B8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1016693B8);
  }
  return result;
}

unint64_t sub_10109DBA4()
{
  unint64_t result = qword_1016693C0;
  if (!qword_1016693C0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1016693C0);
  }
  return result;
}

unint64_t sub_10109DBF8()
{
  unint64_t result = qword_1016693D0;
  if (!qword_1016693D0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1016693D0);
  }
  return result;
}

unint64_t sub_10109DC4C()
{
  unint64_t result = qword_1016693D8;
  if (!qword_1016693D8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1016693D8);
  }
  return result;
}

unint64_t sub_10109DCA0()
{
  unint64_t result = qword_1016693F0;
  if (!qword_1016693F0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1016693F0);
  }
  return result;
}

unint64_t sub_10109DCF4()
{
  unint64_t result = qword_101669400;
  if (!qword_101669400)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_101669400);
  }
  return result;
}

uint64_t sub_10109DD48(unint64_t *a1, uint64_t *a2, void (*a3)(void))
{
  uint64_t result = *a1;
  if (!result)
  {
    sub_10000592C(a2);
    a3();
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

ValueMetadata *type metadata accessor for PencilSecureLocationFetchData.FetchData.CodingKeys()
{
  return &type metadata for PencilSecureLocationFetchData.FetchData.CodingKeys;
}

ValueMetadata *type metadata accessor for PencilSecureLocationFetchData.CodingKeys()
{
  return &type metadata for PencilSecureLocationFetchData.CodingKeys;
}

ValueMetadata *type metadata accessor for PencilSecureLocationFetchResponse.CodingKeys()
{
  return &type metadata for PencilSecureLocationFetchResponse.CodingKeys;
}

uint64_t destroy for PencilSecureLocationFetchData.ClientContext()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return swift_bridgeObjectRelease();
}

void *initializeWithCopy for PencilSecureLocationFetchData.ClientContext(void *a1, void *a2)
{
  uint64_t v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  uint64_t v4 = a2[3];
  a1[2] = a2[2];
  a1[3] = v4;
  a1[4] = a2[4];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

void *assignWithCopy for PencilSecureLocationFetchData.ClientContext(void *a1, void *a2)
{
  *a1 = *a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[1] = a2[1];
  a1[2] = a2[2];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[3] = a2[3];
  a1[4] = a2[4];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

void *assignWithTake for PencilSecureLocationFetchData.ClientContext(void *a1, void *a2)
{
  *a1 = *a2;
  swift_bridgeObjectRelease();
  uint64_t v4 = a2[2];
  a1[1] = a2[1];
  a1[2] = v4;
  swift_bridgeObjectRelease();
  uint64_t v5 = a2[4];
  a1[3] = a2[3];
  a1[4] = v5;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for PencilSecureLocationFetchData.ClientContext(uint64_t *a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *((unsigned char *)a1 + 40)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  uint64_t v2 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for PencilSecureLocationFetchData.ClientContext(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(void *)uint64_t result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 40) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)uint64_t result = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 40) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for PencilSecureLocationFetchData.ClientContext()
{
  return &type metadata for PencilSecureLocationFetchData.ClientContext;
}

ValueMetadata *type metadata accessor for PencilSecureLocationFetchResponse.OwnDeviceLocationPayload()
{
  return &type metadata for PencilSecureLocationFetchResponse.OwnDeviceLocationPayload;
}

unint64_t sub_10109E018()
{
  unint64_t result = qword_101669408;
  if (!qword_101669408)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_101669408);
  }
  return result;
}

unint64_t sub_10109E070()
{
  unint64_t result = qword_101669410;
  if (!qword_101669410)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_101669410);
  }
  return result;
}

unint64_t sub_10109E0C8()
{
  unint64_t result = qword_101669418;
  if (!qword_101669418)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_101669418);
  }
  return result;
}

unint64_t sub_10109E120()
{
  unint64_t result = qword_101669420;
  if (!qword_101669420)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_101669420);
  }
  return result;
}

unint64_t sub_10109E178()
{
  unint64_t result = qword_101669428;
  if (!qword_101669428)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_101669428);
  }
  return result;
}

unint64_t sub_10109E1D0()
{
  unint64_t result = qword_101669430;
  if (!qword_101669430)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_101669430);
  }
  return result;
}

unint64_t sub_10109E228()
{
  unint64_t result = qword_101669438;
  if (!qword_101669438)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_101669438);
  }
  return result;
}

unint64_t sub_10109E280()
{
  unint64_t result = qword_101669440;
  if (!qword_101669440)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_101669440);
  }
  return result;
}

unint64_t sub_10109E2D8()
{
  unint64_t result = qword_101669448;
  if (!qword_101669448)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_101669448);
  }
  return result;
}

unint64_t sub_10109E32C()
{
  unint64_t result = qword_101669458;
  if (!qword_101669458)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_101669458);
  }
  return result;
}

unint64_t sub_10109E380()
{
  unint64_t result = qword_101669470;
  if (!qword_101669470)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_101669470);
  }
  return result;
}

unint64_t sub_10109E3D4()
{
  unint64_t result = qword_101669480;
  if (!qword_101669480)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_101669480);
  }
  return result;
}

ValueMetadata *type metadata accessor for PencilSecureLocationFetchData.ClientContext.CodingKeys()
{
  return &type metadata for PencilSecureLocationFetchData.ClientContext.CodingKeys;
}

unsigned char *_s12searchpartyd29PencilSecureLocationFetchDataV13ClientContextV10CodingKeysOwst_0(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 2 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 2) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFE) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFD)
  {
    unsigned int v6 = ((a2 - 254) >> 8) + 1;
    *unint64_t result = a2 + 2;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x10109E508);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 2;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for PencilSecureLocationFetchResponse.OwnDeviceLocationPayload.CodingKeys()
{
  return &type metadata for PencilSecureLocationFetchResponse.OwnDeviceLocationPayload.CodingKeys;
}

uint64_t destroy for DeviceEventEncodedPayloadResponse(uint64_t a1)
{
  sub_10001CFB8(*(void *)a1, *(void *)(a1 + 8));

  return swift_bridgeObjectRelease();
}

uint64_t *_s12searchpartyd33DeviceEventEncodedPayloadResponseVwCP_0(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4 = *a2;
  unint64_t v5 = a2[1];
  sub_1000361E0(*a2, v5);
  *a1 = v4;
  a1[1] = v5;
  a1[2] = a2[2];
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t *assignWithCopy for DeviceEventEncodedPayloadResponse(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4 = *a2;
  unint64_t v5 = a2[1];
  sub_1000361E0(*a2, v5);
  uint64_t v6 = *a1;
  unint64_t v7 = a1[1];
  *a1 = v4;
  a1[1] = v5;
  sub_10001CFB8(v6, v7);
  a1[2] = a2[2];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t *assignWithTake for DeviceEventEncodedPayloadResponse(uint64_t *a1, uint64_t a2)
{
  uint64_t v4 = *a1;
  unint64_t v5 = a1[1];
  *(_OWORD *)a1 = *(_OWORD *)a2;
  sub_10001CFB8(v4, v5);
  a1[2] = *(void *)(a2 + 16);
  swift_bridgeObjectRelease();
  return a1;
}

ValueMetadata *type metadata accessor for DeviceEventEncodedPayloadResponse()
{
  return &type metadata for DeviceEventEncodedPayloadResponse;
}

unint64_t sub_10109E698()
{
  unint64_t result = qword_101669488;
  if (!qword_101669488)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_101669488);
  }
  return result;
}

unint64_t sub_10109E6F0()
{
  unint64_t result = qword_101669490;
  if (!qword_101669490)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_101669490);
  }
  return result;
}

unint64_t sub_10109E748()
{
  unint64_t result = qword_101669498;
  if (!qword_101669498)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_101669498);
  }
  return result;
}

unint64_t sub_10109E7A0()
{
  unint64_t result = qword_1016694A0;
  if (!qword_1016694A0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1016694A0);
  }
  return result;
}

unint64_t sub_10109E7F8()
{
  unint64_t result = qword_1016694A8;
  if (!qword_1016694A8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1016694A8);
  }
  return result;
}

unint64_t sub_10109E850()
{
  unint64_t result = qword_1016694B0;
  if (!qword_1016694B0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1016694B0);
  }
  return result;
}

uint64_t sub_10109E8A4(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 25705 && a2 == 0xE200000000000000;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x6E6F697461636F6CLL && a2 == 0xEC0000006F666E49)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else
  {
    char v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v6) {
      return 1;
    }
    else {
      return 2;
    }
  }
}

uint64_t sub_10109E998(void *a1)
{
  uint64_t v3 = sub_10000588C(&qword_1016694B8);
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  char v6 = (char *)&v10 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = a1[3];
  sub_10001CD44(a1, v7);
  sub_10109EC14();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v1)
  {
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)a1);
  }
  else
  {
    char v11 = 0;
    sub_100037AA0();
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    uint64_t v7 = v12;
    unint64_t v9 = v13;
    sub_10000588C(&qword_101647338);
    char v11 = 1;
    sub_1000361E0(v7, v9);
    sub_10109EC68(&qword_101647340, &qword_1016471E0);
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
    sub_1000361E0(v7, v9);
    swift_bridgeObjectRetain();
    sub_10001CFB8(v7, v9);
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)a1);
    sub_10001CFB8(v7, v9);
    swift_bridgeObjectRelease();
  }
  return v7;
}

unint64_t sub_10109EC14()
{
  unint64_t result = qword_1016694C0;
  if (!qword_1016694C0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1016694C0);
  }
  return result;
}

uint64_t sub_10109EC68(unint64_t *a1, unint64_t *a2)
{
  uint64_t result = *a1;
  if (!result)
  {
    sub_10000592C(&qword_101647338);
    sub_10109ECE8(a2);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_10109ECE8(unint64_t *a1)
{
  uint64_t result = *a1;
  if (!result)
  {
    type metadata accessor for DeviceEventEncodedInfo(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

unsigned char *_s12searchpartyd29PencilSecureLocationFetchDataV9FetchDataV10CodingKeysOwst_0(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFE)
  {
    unsigned int v6 = ((a2 - 255) >> 8) + 1;
    *uint64_t result = a2 + 1;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x10109EDF8);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 1;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for DeviceEventEncodedPayloadResponse.CodingKeys()
{
  return &type metadata for DeviceEventEncodedPayloadResponse.CodingKeys;
}

unint64_t sub_10109EE34()
{
  unint64_t result = qword_1016694D0;
  if (!qword_1016694D0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1016694D0);
  }
  return result;
}

unint64_t sub_10109EE8C()
{
  unint64_t result = qword_1016694D8;
  if (!qword_1016694D8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1016694D8);
  }
  return result;
}

unint64_t sub_10109EEE4()
{
  unint64_t result = qword_1016694E0;
  if (!qword_1016694E0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, &qword_1016694E0);
  }
  return result;
}

uint64_t sub_10109EF38(uint64_t a1, char a2, uint64_t a3)
{
  *(void *)(v4 + 120) = a3;
  *(void *)(v4 + 128) = v3;
  *(unsigned char *)(v4 + 264) = a2;
  *(void *)(v4 + 112) = a1;
  uint64_t v5 = type metadata accessor for UUID();
  *(void *)(v4 + 136) = v5;
  *(void *)(v4 + 144) = *(void *)(v5 - 8);
  *(void *)(v4 + 152) = swift_task_alloc();
  *(void *)(v4 + 160) = swift_task_alloc();
  return _swift_task_switch(sub_10109F010, v3, 0);
}

uint64_t sub_10109F010()
{
  uint64_t v26 = v0;
  if (qword_101637628 != -1) {
    swift_once();
  }
  uint64_t v1 = *(void *)(v0 + 112);
  uint64_t v2 = *(void *)(v0 + 160);
  uint64_t v3 = *(void *)(v0 + 136);
  uint64_t v4 = *(void *)(v0 + 144);
  uint64_t v5 = type metadata accessor for Logger();
  *(void *)(v0 + 168) = sub_100010324(v5, (uint64_t)qword_10170F7C8);
  unsigned int v6 = *(void (**)(uint64_t, uint64_t, uint64_t))(v4 + 16);
  v6(v2, v1, v3);
  swift_bridgeObjectRetain_n();
  uint64_t v7 = Logger.logObject.getter();
  os_log_type_t v8 = static os_log_type_t.default.getter();
  BOOL v9 = os_log_type_enabled(v7, v8);
  uint64_t v10 = *(void *)(v0 + 160);
  uint64_t v12 = *(void *)(v0 + 136);
  uint64_t v11 = *(void *)(v0 + 144);
  uint64_t v13 = *(void *)(v0 + 120);
  if (v9)
  {
    os_log_type_t type = v8;
    uint64_t v14 = swift_slowAlloc();
    uint64_t v25 = swift_slowAlloc();
    *(_DWORD *)uint64_t v14 = 141558531;
    *(void *)(v0 + 88) = 1752392040;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v14 + 12) = 2081;
    sub_1010A3D9C((unint64_t *)&qword_101638B10, (void (*)(uint64_t))&type metadata accessor for UUID);
    uint64_t v15 = dispatch thunk of CustomStringConvertible.description.getter();
    *(void *)(v0 + 96) = sub_1008FA0F0(v15, v16, &v25);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    (*(void (**)(uint64_t, uint64_t))(v11 + 8))(v10, v12);
    *(_WORD *)(v14 + 22) = 2048;
    uint64_t v17 = *(void *)(v13 + 16);
    swift_bridgeObjectRelease();
    *(void *)(v0 + 104) = v17;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v7, type, "Updating keys for share id: %{private,mask.hash}s, keyPackages count: %ld.", (uint8_t *)v14, 0x20u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    swift_bridgeObjectRelease();
    (*(void (**)(uint64_t, uint64_t))(v11 + 8))(v10, v12);
    swift_bridgeObjectRelease();
  }
  v6(*(void *)(v0 + 152), *(void *)(v0 + 112), *(void *)(v0 + 136));
  uint64_t v24 = (uint64_t (*)(uint64_t, char, uint64_t))((char *)&dword_101669508 + dword_101669508);
  swift_bridgeObjectRetain();
  uint64_t v18 = (void *)swift_task_alloc();
  *(void *)(v0 + 176) = v18;
  *uint64_t v18 = v0;
  v18[1] = sub_10109F398;
  uint64_t v19 = *(void *)(v0 + 152);
  uint64_t v20 = *(void *)(v0 + 120);
  char v21 = *(unsigned char *)(v0 + 264);
  return v24(v19, v21, v20);
}

uint64_t sub_10109F398(uint64_t a1, uint64_t a2, unint64_t a3)
{
  uint64_t v7 = (void *)*v4;
  v7[23] = a1;
  v7[24] = a2;
  v7[25] = a3;
  v7[26] = v3;
  swift_task_dealloc();
  if (v3)
  {
    uint64_t v8 = v7[16];
    BOOL v9 = sub_10109F75C;
  }
  else
  {
    swift_bridgeObjectRetain();
    sub_1000361E0(a2, a3);
    BOOL v9 = sub_10109F4E8;
    uint64_t v8 = 0;
  }
  return _swift_task_switch(v9, v8, 0);
}

uint64_t sub_10109F4E8()
{
  sub_1000361E0(v0[24], v0[25]);
  uint64_t v1 = (void *)swift_task_alloc();
  v0[27] = v1;
  *uint64_t v1 = v0;
  v1[1] = sub_10109F584;
  uint64_t v3 = v0[24];
  uint64_t v2 = v0[25];
  return sub_101051D58(v3, v2);
}

uint64_t sub_10109F584(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = (void *)*v2;
  uint64_t v4 = (void *)*v2;
  v4[7] = v2;
  v4[8] = a1;
  v4[9] = a2;
  unint64_t v5 = v3[25];
  uint64_t v6 = v3[24];
  v4[28] = a2;
  swift_task_dealloc();
  sub_10001CFB8(v6, v5);
  return _swift_task_switch(sub_10109F6C0, 0, 0);
}

uint64_t sub_10109F6C0()
{
  uint64_t v1 = v0[28];
  swift_bridgeObjectRelease();
  if (v1)
  {
    unint64_t v2 = v0[28];
    uint64_t v3 = v0[8];
    sub_10001CFB8(v0[24], v0[25]);
  }
  else
  {
    sub_10001CFB8(v0[24], v0[25]);
    unint64_t v2 = 0xE300000000000000;
    uint64_t v3 = 7104878;
  }
  v0[29] = v3;
  v0[30] = v2;
  uint64_t v4 = v0[16];
  return _swift_task_switch(sub_10109F7C8, v4, 0);
}

uint64_t sub_10109F75C()
{
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_10109F7C8()
{
  uint64_t v13 = v0;
  swift_bridgeObjectRetain();
  uint64_t v1 = Logger.logObject.getter();
  os_log_type_t v2 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v1, v2))
  {
    uint64_t v4 = v0[29];
    unint64_t v3 = v0[30];
    unint64_t v5 = (uint8_t *)swift_slowAlloc();
    uint64_t v12 = swift_slowAlloc();
    *(_DWORD *)unint64_t v5 = 136315138;
    swift_bridgeObjectRetain();
    v0[10] = sub_1008FA0F0(v4, v3, &v12);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    _os_log_impl((void *)&_mh_execute_header, v1, v2, "KeyDropUpdateRequest: %s", v5, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    swift_bridgeObjectRelease_n();
  }

  uint64_t v6 = v0[24];
  unint64_t v7 = v0[25];
  uint64_t v8 = v0[23];
  v0[5] = &type metadata for KeyDropUpdateRequest;
  v0[6] = sub_1010A3D48();
  v0[2] = v8;
  v0[3] = v6;
  v0[4] = v7;
  swift_bridgeObjectRetain();
  sub_1000361E0(v6, v7);
  uint64_t v11 = (uint64_t (*)(uint64_t, char))((char *)&dword_101668348 + dword_101668348);
  BOOL v9 = (void *)swift_task_alloc();
  v0[31] = v9;
  *BOOL v9 = v0;
  v9[1] = sub_10109F9EC;
  return v11((uint64_t)(v0 + 2), 2);
}

uint64_t sub_10109F9EC(char a1)
{
  uint64_t v4 = *v2;
  *(void *)(*v2 + 256) = v1;
  swift_task_dealloc();
  if (v1)
  {
    uint64_t v5 = *(void *)(v4 + 128);
    uint64_t v6 = sub_10109FBC0;
  }
  else
  {
    uint64_t v7 = *(void *)(v4 + 128);
    *(unsigned char *)(v4 + 265) = a1;
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v4 + 16);
    uint64_t v6 = sub_10109FB2C;
    uint64_t v5 = v7;
  }
  return _swift_task_switch(v6, v5, 0);
}

uint64_t sub_10109FB2C()
{
  uint64_t v1 = *(void *)(v0 + 192);
  unint64_t v2 = *(void *)(v0 + 200);
  swift_bridgeObjectRelease();
  sub_10001CFB8(v1, v2);
  swift_task_dealloc();
  swift_task_dealloc();
  unint64_t v3 = *(uint64_t (**)(uint64_t))(v0 + 8);
  uint64_t v4 = *(unsigned __int8 *)(v0 + 265);
  return v3(v4);
}

uint64_t sub_10109FBC0()
{
  uint64_t v2 = v0[24];
  unint64_t v1 = v0[25];
  swift_bridgeObjectRelease();
  sub_10001CFB8(v2, v1);
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)(v0 + 2));
  swift_task_dealloc();
  swift_task_dealloc();
  unint64_t v3 = (uint64_t (*)(void))v0[1];
  return v3();
}

uint64_t sub_10109FC58(uint64_t a1, uint64_t a2, uint64_t a3, char a4, uint64_t a5, uint64_t a6)
{
  *(void *)(v7 + 96) = a6;
  *(void *)(v7 + 104) = v6;
  *(unsigned char *)(v7 + 200) = a4;
  *(void *)(v7 + 80) = a3;
  *(void *)(v7 + 88) = a5;
  *(void *)(v7 + 64) = a1;
  *(void *)(v7 + 72) = a2;
  type metadata accessor for String.Encoding();
  *(void *)(v7 + 112) = swift_task_alloc();
  type metadata accessor for KeyDropJoinToken(0);
  *(void *)(v7 + 120) = swift_task_alloc();
  uint64_t v8 = type metadata accessor for UUID();
  *(void *)(v7 + 128) = v8;
  *(void *)(v7 + 136) = *(void *)(v8 - 8);
  *(void *)(v7 + 144) = swift_task_alloc();
  *(void *)(v7 + 152) = swift_task_alloc();
  return _swift_task_switch(sub_10109FD8C, v6, 0);
}

uint64_t sub_10109FD8C()
{
  uint64_t v32 = v0;
  uint64_t v1 = *(void *)(v0 + 144);
  uint64_t v2 = *(void *)(v0 + 152);
  uint64_t v3 = *(void *)(v0 + 128);
  uint64_t v4 = *(void *)(v0 + 120);
  uint64_t v6 = *(void *)(v0 + 88);
  uint64_t v5 = *(void *)(v0 + 96);
  uint64_t v7 = *(void *)(v0 + 80);
  uint64_t v8 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v0 + 136) + 16);
  int v29 = *(unsigned __int8 *)(v0 + 200);
  v8(v2, *(void *)(v0 + 72), v3);
  v8(v1, v7, v3);
  sub_1010A6A9C(v6, v4, type metadata accessor for KeyDropJoinToken);
  swift_bridgeObjectRetain();
  uint64_t v9 = sub_1010A2BF0(v2, v1, v29, v5, v4);
  *(void *)(v0 + 160) = v9;
  *(void *)(v0 + 168) = v10;
  *(void *)(v0 + 176) = v11;
  uint64_t v12 = v9;
  uint64_t v13 = v10;
  unint64_t v14 = v11;
  if (qword_101637628 != -1) {
    swift_once();
  }
  uint64_t v15 = type metadata accessor for Logger();
  sub_100010324(v15, (uint64_t)qword_10170F7C8);
  swift_bridgeObjectRetain();
  sub_1000361E0(v13, v14);
  swift_bridgeObjectRetain();
  sub_1000361E0(v13, v14);
  unint64_t v16 = Logger.logObject.getter();
  os_log_type_t v17 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v16, v17))
  {
    uint64_t v18 = (uint8_t *)swift_slowAlloc();
    uint64_t v31 = swift_slowAlloc();
    *(_DWORD *)uint64_t v18 = 136315138;
    swift_bridgeObjectRetain();
    sub_1000361E0(v13, v14);
    sub_1000361E0(v13, v14);
    static String.Encoding.utf8.getter();
    uint64_t v19 = String.init(data:encoding:)();
    if (v20)
    {
      uint64_t v21 = v19;
      unint64_t v22 = v20;
      sub_10001CFB8(v13, v14);
      swift_bridgeObjectRelease();
      sub_10001CFB8(v13, v14);
    }
    else
    {
      uint64_t v23 = Logger.logObject.getter();
      os_log_type_t v24 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v23, v24))
      {
        uint64_t v25 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)uint64_t v25 = 0;
        _os_log_impl((void *)&_mh_execute_header, v23, v24, "Empty description for request body.", v25, 2u);
        swift_slowDealloc();
      }

      sub_10001CFB8(v13, v14);
      swift_bridgeObjectRelease();
      sub_10001CFB8(v13, v14);
      unint64_t v22 = 0xE300000000000000;
      uint64_t v21 = 7104878;
    }
    *(void *)(v0 + 56) = sub_1008FA0F0(v21, v22, &v31);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    sub_10001CFB8(v13, v14);
    swift_bridgeObjectRelease();
    sub_10001CFB8(v13, v14);
    _os_log_impl((void *)&_mh_execute_header, v16, v17, "KeyDropShareMetaDataRequest: %s", v18, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    swift_bridgeObjectRelease();
    sub_10001CFB8(v13, v14);
    swift_bridgeObjectRelease();
    sub_10001CFB8(v13, v14);
  }

  *(void *)(v0 + 40) = &type metadata for KeyDropShareMetaDataRequest;
  *(void *)(v0 + 48) = sub_1010A3440();
  *(void *)(v0 + 16) = v12;
  *(void *)(v0 + 24) = v13;
  *(void *)(v0 + 32) = v14;
  swift_bridgeObjectRetain();
  sub_1000361E0(v13, v14);
  uint64_t v30 = (uint64_t (*)(uint64_t, uint64_t, char))((char *)&dword_101668338 + dword_101668338);
  uint64_t v26 = (void *)swift_task_alloc();
  *(void *)(v0 + 184) = v26;
  *uint64_t v26 = v0;
  v26[1] = sub_1010A0258;
  uint64_t v27 = *(void *)(v0 + 64);
  return v30(v27, v0 + 16, 1);
}

uint64_t sub_1010A0258()
{
  uint64_t v2 = *v1;
  *(void *)(*v1 + 192) = v0;
  swift_task_dealloc();
  if (v0)
  {
    uint64_t v3 = *(void *)(v2 + 104);
    uint64_t v4 = sub_1010A042C;
  }
  else
  {
    uint64_t v5 = *(void *)(v2 + 104);
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v2 + 16);
    uint64_t v4 = sub_1010A0380;
    uint64_t v3 = v5;
  }
  return _swift_task_switch(v4, v3, 0);
}

uint64_t sub_1010A0380()
{
  uint64_t v1 = v0[21];
  unint64_t v2 = v0[22];
  swift_bridgeObjectRelease();
  sub_10001CFB8(v1, v2);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v3 = (uint64_t (*)(void))v0[1];
  return v3();
}

uint64_t sub_1010A042C()
{
  uint64_t v2 = v0[21];
  unint64_t v1 = v0[22];
  swift_bridgeObjectRelease();
  sub_10001CFB8(v2, v1);
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)(v0 + 2));
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v3 = (uint64_t (*)(void))v0[1];
  return v3();
}

uint64_t sub_1010A04D8(void *a1, char a2)
{
  uint64_t v5 = sub_10000588C(&qword_1016698C0);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v8 = &v10[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0)];
  sub_10001CD44(a1, a1[3]);
  sub_1010A6CC8();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  v10[15] = a2;
  v10[14] = 0;
  sub_1010A6D1C();
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  if (!v2)
  {
    v10[13] = 1;
    KeyedEncodingContainer.encode(_:forKey:)();
  }
  return (*(uint64_t (**)(unsigned char *, uint64_t))(v6 + 8))(v8, v5);
}

uint64_t sub_1010A0650(void *a1)
{
  uint64_t v3 = v1;
  uint64_t v5 = sub_10000588C(&qword_101669870);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v8 = (char *)v11 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10001CD44(a1, a1[3]);
  sub_1010A6B04();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  char v17 = 0;
  type metadata accessor for UUID();
  sub_1010A3D9C(&qword_10163B040, (void (*)(uint64_t))&type metadata accessor for UUID);
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  if (!v2)
  {
    uint64_t v9 = (int *)type metadata accessor for KeyDropShareMetaDataRequest.KeyDropMetaDataContent(0);
    char v16 = *(unsigned char *)(v3 + v9[5]);
    char v15 = 1;
    sub_100176DE8();
    KeyedEncodingContainer.encode<A>(_:forKey:)();
    v11[0] = v3 + v9[6];
    char v14 = 2;
    type metadata accessor for Date();
    sub_1010A3D9C((unint64_t *)&unk_10163ACE0, (void (*)(uint64_t))&type metadata accessor for Date);
    KeyedEncodingContainer.encode<A>(_:forKey:)();
    char v13 = 3;
    KeyedEncodingContainer.encode<A>(_:forKey:)();
    v11[1] = *(void *)(v3 + v9[8]);
    char v12 = 4;
    sub_10000588C(&qword_101669880);
    sub_1010A6B58();
    KeyedEncodingContainer.encode<A>(_:forKey:)();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
}

uint64_t sub_1010A092C()
{
  if (*v0) {
    return 0x617461646174656DLL;
  }
  else {
    return 1701869940;
  }
}

uint64_t sub_1010A0960@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_1010A7C4C(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_1010A0988(uint64_t a1)
{
  unint64_t v2 = sub_1010A6CC8();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1010A09C4(uint64_t a1)
{
  unint64_t v2 = sub_1010A6CC8();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_1010A0A00(void *a1)
{
  return sub_1010A04D8(a1, *v1);
}

uint64_t sub_1010A0A30()
{
  uint64_t result = 0x64496572616873;
  switch(*v0)
  {
    case 1:
      uint64_t result = 1701869940;
      break;
    case 2:
      uint64_t result = 0x6D617473656D6974;
      break;
    case 3:
      uint64_t result = 0x64497265626D656DLL;
      break;
    case 4:
      uint64_t result = 0x736567616B636170;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t sub_1010A0AD8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_1010A7D30(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_1010A0B00(uint64_t a1)
{
  unint64_t v2 = sub_1010A6B04();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1010A0B3C(uint64_t a1)
{
  unint64_t v2 = sub_1010A6B04();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_1010A0B78(void *a1)
{
  return sub_1010A0650(a1);
}

uint64_t sub_1010A0B90(void *a1)
{
  uint64_t v3 = v1;
  uint64_t v5 = sub_10000588C(&qword_1016698A8);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v8 = &v11[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0)];
  sub_10001CD44(a1, a1[3]);
  sub_1010A6C74();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  char v15 = 0;
  type metadata accessor for UUID();
  sub_1010A3D9C(&qword_10163B040, (void (*)(uint64_t))&type metadata accessor for UUID);
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  if (!v2)
  {
    uint64_t updated = type metadata accessor for KeyDropUpdateRequest.UpdateRequestContent(0);
    char v14 = *(unsigned char *)(v3 + *(int *)(updated + 20));
    char v13 = 1;
    sub_100176DE8();
    KeyedEncodingContainer.encode<A>(_:forKey:)();
    uint64_t v12 = *(void *)(v3 + *(int *)(updated + 24));
    v11[15] = 2;
    sub_10000588C(&qword_10163FBC0);
    sub_1002707D0();
    KeyedEncodingContainer.encode<A>(_:forKey:)();
  }
  return (*(uint64_t (**)(unsigned char *, uint64_t))(v6 + 8))(v8, v5);
}

uint64_t sub_1010A0DB0()
{
  uint64_t v1 = 1701869940;
  if (*v0 != 1) {
    uint64_t v1 = 0x616B63615079656BLL;
  }
  if (*v0) {
    return v1;
  }
  else {
    return 0x64496572616873;
  }
}

uint64_t sub_1010A0E0C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_1010A7F4C(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_1010A0E34(uint64_t a1)
{
  unint64_t v2 = sub_1010A6C74();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1010A0E70(uint64_t a1)
{
  unint64_t v2 = sub_1010A6C74();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_1010A0EAC(void *a1)
{
  return sub_1010A0B90(a1);
}

uint64_t sub_1010A0EC4(void *a1)
{
  uint64_t v3 = v1;
  uint64_t v5 = sub_10000588C(&qword_101669920);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v8 = &v10[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0)];
  sub_10001CD44(a1, a1[3]);
  sub_1010A6EA8();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  v10[15] = *v3;
  v10[14] = 0;
  sub_1010A6D1C();
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  if (!v2)
  {
    type metadata accessor for KeyDropShareMetaDataResponse.ShareMetaData(0);
    v10[13] = 1;
    type metadata accessor for KeyDropInterface.KeyAlignment(0);
    sub_1010A3D9C(&qword_101669928, (void (*)(uint64_t))type metadata accessor for KeyDropInterface.KeyAlignment);
    KeyedEncodingContainer.encode<A>(_:forKey:)();
    _WORD v10[12] = 2;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
    v10[11] = 3;
    KeyedEncodingContainer.encode(_:forKey:)();
  }
  return (*(uint64_t (**)(unsigned char *, uint64_t))(v6 + 8))(v8, v5);
}

uint64_t sub_1010A10F8@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v26 = a2;
  uint64_t v4 = type metadata accessor for KeyDropInterface.KeyAlignment(0);
  __chkstk_darwin(v4);
  uint64_t v6 = (char *)&v24 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = sub_10000588C(&qword_101669900);
  uint64_t v27 = *(void *)(v7 - 8);
  uint64_t v28 = v7;
  __chkstk_darwin(v7);
  uint64_t v9 = (char *)&v24 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = type metadata accessor for KeyDropShareMetaDataResponse.ShareMetaData(0);
  __chkstk_darwin(v10);
  uint64_t v12 = (char *)&v24 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = a1[3];
  int v29 = a1;
  sub_10001CD44(a1, v13);
  sub_1010A6EA8();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v2) {
    return _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)v29);
  }
  uint64_t v14 = (uint64_t)v6;
  uint64_t v25 = v10;
  char v15 = v12;
  uint64_t v16 = v27;
  char v33 = 0;
  sub_1010A6EFC();
  uint64_t v17 = v28;
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  *char v15 = v34;
  char v32 = 1;
  sub_1010A3D9C(&qword_101669918, (void (*)(uint64_t))type metadata accessor for KeyDropInterface.KeyAlignment);
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  uint64_t v18 = v25;
  sub_1010A6F50(v14, (uint64_t)&v15[*(int *)(v25 + 20)]);
  char v31 = 2;
  uint64_t v19 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
  unint64_t v20 = &v15[*(int *)(v18 + 24)];
  *(void *)unint64_t v20 = v19;
  v20[8] = v21 & 1;
  char v30 = 3;
  uint64_t v23 = KeyedDecodingContainer.decode(_:forKey:)();
  (*(void (**)(char *, uint64_t))(v16 + 8))(v9, v17);
  *(void *)&v15[*(int *)(v18 + 28)] = v23;
  sub_1010A6A9C((uint64_t)v15, v26, type metadata accessor for KeyDropShareMetaDataResponse.ShareMetaData);
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)v29);
  return sub_1010A34B4((uint64_t)v15, type metadata accessor for KeyDropShareMetaDataResponse.ShareMetaData);
}

uint64_t sub_1010A149C(void *a1)
{
  uint64_t v3 = v1;
  uint64_t v5 = sub_10000588C(&qword_101669940);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v8 = &v11[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0)];
  sub_10001CD44(a1, a1[3]);
  sub_1010A6FB4();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  LOBYTE(v12) = 0;
  type metadata accessor for UUID();
  sub_1010A3D9C(&qword_10163B040, (void (*)(uint64_t))&type metadata accessor for UUID);
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  if (!v2)
  {
    uint64_t v9 = type metadata accessor for KeyDropShareMetaDataResponse.Member(0);
    LOBYTE(v12) = 1;
    KeyedEncodingContainer.encode(_:forKey:)();
    long long v12 = *(_OWORD *)(v3 + *(int *)(v9 + 24));
    v11[15] = 2;
    sub_100037BB4();
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)();
  }
  return (*(uint64_t (**)(unsigned char *, uint64_t))(v6 + 8))(v8, v5);
}

uint64_t sub_1010A1698@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v16 = a2;
  uint64_t v4 = type metadata accessor for UUID();
  uint64_t v18 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  unint64_t v20 = (char *)&v15 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v19 = sub_10000588C(&qword_101669930);
  uint64_t v17 = *(void *)(v19 - 8);
  __chkstk_darwin(v19);
  uint64_t v7 = (char *)&v15 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for KeyDropShareMetaDataResponse.Member(0);
  __chkstk_darwin(v8);
  uint64_t v10 = (char *)&v15 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10001CD44(a1, a1[3]);
  sub_1010A6FB4();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v2) {
    return _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)a1);
  }
  uint64_t v11 = (uint64_t)v10;
  uint64_t v12 = v18;
  LOBYTE(v21) = 0;
  sub_1010A3D9C((unint64_t *)&qword_10163B010, (void (*)(uint64_t))&type metadata accessor for UUID);
  uint64_t v13 = v19;
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  (*(void (**)(uint64_t, char *, uint64_t))(v12 + 32))(v11, v20, v4);
  LOBYTE(v21) = 1;
  *(unsigned char *)(v11 + *(int *)(v8 + 20)) = KeyedDecodingContainer.decode(_:forKey:)() & 1;
  char v22 = 2;
  sub_100037AA0();
  KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
  (*(void (**)(char *, uint64_t))(v17 + 8))(v7, v13);
  *(_OWORD *)(v11 + *(int *)(v8 + 24)) = v21;
  sub_1010A6A9C(v11, v16, type metadata accessor for KeyDropShareMetaDataResponse.Member);
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)a1);
  return sub_1010A34B4(v11, type metadata accessor for KeyDropShareMetaDataResponse.Member);
}

uint64_t sub_1010A1A44(void *a1)
{
  uint64_t v3 = v1;
  uint64_t v5 = sub_10000588C(&qword_1016698D8);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v8 = (char *)&v11 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10001CD44(a1, a1[3]);
  sub_1010A69A4();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  LOBYTE(v12) = 0;
  type metadata accessor for UUID();
  sub_1010A3D9C(&qword_10163B040, (void (*)(uint64_t))&type metadata accessor for UUID);
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  if (!v2)
  {
    uint64_t v9 = type metadata accessor for KeyDropShareMetaDataResponse(0);
    LOBYTE(v12) = 1;
    type metadata accessor for Date();
    sub_1010A3D9C((unint64_t *)&unk_10163ACE0, (void (*)(uint64_t))&type metadata accessor for Date);
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)();
    uint64_t v12 = *(void *)(v3 + *(int *)(v9 + 24));
    HIBYTE(v11) = 2;
    sub_10000588C(&qword_101669840);
    sub_1010A6D70(&qword_1016698E0, &qword_1016698E8);
    KeyedEncodingContainer.encode<A>(_:forKey:)();
    uint64_t v12 = *(void *)(v3 + *(int *)(v9 + 28));
    HIBYTE(v11) = 3;
    sub_10000588C(&qword_101669858);
    sub_1010A6E04();
    KeyedEncodingContainer.encode<A>(_:forKey:)();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
}

uint64_t sub_1010A1D20@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v19 = a2;
  uint64_t v3 = sub_10000588C((uint64_t *)&unk_10163AC90);
  __chkstk_darwin(v3 - 8);
  uint64_t v5 = (char *)&v19 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = type metadata accessor for UUID();
  uint64_t v21 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  char v22 = (char *)&v19 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v23 = sub_10000588C(&qword_101669830);
  uint64_t v20 = *(void *)(v23 - 8);
  __chkstk_darwin(v23);
  uint64_t v9 = (char *)&v19 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = (int *)type metadata accessor for KeyDropShareMetaDataResponse(0);
  __chkstk_darwin(v10);
  uint64_t v12 = (char *)&v19 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10001CD44(a1, a1[3]);
  sub_1010A69A4();
  uint64_t v24 = v9;
  uint64_t v13 = (uint64_t)v25;
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v13) {
    return _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)a1);
  }
  uint64_t v25 = a1;
  uint64_t v14 = (uint64_t)v12;
  uint64_t v15 = v21;
  LOBYTE(v27) = 0;
  sub_1010A3D9C((unint64_t *)&qword_10163B010, (void (*)(uint64_t))&type metadata accessor for UUID);
  uint64_t v16 = v22;
  uint64_t v17 = v23;
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  (*(void (**)(uint64_t, char *, uint64_t))(v15 + 32))(v14, v16, v6);
  type metadata accessor for Date();
  LOBYTE(v27) = 1;
  sub_1010A3D9C(&qword_10163ACC0, (void (*)(uint64_t))&type metadata accessor for Date);
  KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
  sub_1000C69AC((uint64_t)v5, v14 + v10[5]);
  sub_10000588C(&qword_101669840);
  char v26 = 2;
  sub_1010A6D70(&qword_101669848, &qword_101669850);
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  *(void *)(v14 + v10[6]) = v27;
  sub_10000588C(&qword_101669858);
  char v26 = 3;
  sub_1010A69F8();
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  (*(void (**)(char *, uint64_t))(v20 + 8))(v24, v17);
  *(void *)(v14 + v10[7]) = v27;
  sub_1010A6A9C(v14, v19, type metadata accessor for KeyDropShareMetaDataResponse);
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)v25);
  return sub_1010A34B4(v14, type metadata accessor for KeyDropShareMetaDataResponse);
}

uint64_t sub_1010A227C()
{
  uint64_t result = 1701869940;
  switch(*v0)
  {
    case 1:
      uint64_t result = 0x6E656D6E67696C61;
      break;
    case 2:
      uint64_t result = 0x61745365676E6172;
      break;
    case 3:
      uint64_t result = 0x646E4565676E6172;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t sub_1010A230C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_1010A80AC(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_1010A2334(uint64_t a1)
{
  unint64_t v2 = sub_1010A6EA8();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1010A2370(uint64_t a1)
{
  unint64_t v2 = sub_1010A6EA8();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_1010A23AC@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_1010A10F8(a1, a2);
}

uint64_t sub_1010A23C4(void *a1)
{
  return sub_1010A0EC4(a1);
}

uint64_t sub_1010A23E0()
{
  uint64_t v1 = 0x72656E776FLL;
  if (*v0 != 1) {
    uint64_t v1 = 0x6574707972636E65;
  }
  if (*v0) {
    return v1;
  }
  else {
    return 0x64497265626D656DLL;
  }
}

uint64_t sub_1010A2444@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_1010A8270(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_1010A246C(uint64_t a1)
{
  unint64_t v2 = sub_1010A6FB4();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1010A24A8(uint64_t a1)
{
  unint64_t v2 = sub_1010A6FB4();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_1010A24E4@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_1010A1698(a1, a2);
}

uint64_t sub_1010A24FC(void *a1)
{
  return sub_1010A149C(a1);
}

uint64_t sub_1010A2518()
{
  uint64_t result = 0x64496572616873;
  switch(*v0)
  {
    case 1:
      uint64_t result = 0x6974617269707865;
      break;
    case 2:
      uint64_t result = 0x616B63615079656BLL;
      break;
    case 3:
      uint64_t result = 0x737265626D656DLL;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t sub_1010A25B0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_1010A83E4(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_1010A25D8(uint64_t a1)
{
  unint64_t v2 = sub_1010A69A4();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1010A2614(uint64_t a1)
{
  unint64_t v2 = sub_1010A69A4();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_1010A2650@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_1010A1D20(a1, a2);
}

uint64_t sub_1010A2668(void *a1)
{
  return sub_1010A1A44(a1);
}

uint64_t sub_1010A2680(uint64_t a1)
{
  unint64_t v2 = sub_1010A6C20();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1010A26BC(uint64_t a1)
{
  unint64_t v2 = sub_1010A6C20();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_1010A26F8@<X0>(void *a1@<X0>, unsigned char *a2@<X8>)
{
  uint64_t v5 = sub_10000588C(&qword_101669898);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v8 = (char *)&v11 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10001CD44(a1, a1[3]);
  sub_1010A6C20();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v2) {
    return _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)a1);
  }
  char v9 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
  (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  uint64_t result = _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)a1);
  *a2 = v9;
  return result;
}

uint64_t sub_1010A2854(void *a1)
{
  uint64_t v2 = sub_10000588C(&qword_1016698B8);
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  uint64_t v5 = (char *)&v7 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10001CD44(a1, a1[3]);
  sub_1010A6C20();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
  return (*(uint64_t (**)(char *, uint64_t))(v3 + 8))(v5, v2);
}

BOOL sub_1010A2988(char *a1, char *a2)
{
  char v4 = *a2;
  unint64_t v5 = sub_1012638E4(*a1);
  uint64_t v7 = v6;
  if (v5 == sub_1012638E4(v4) && v7 == v8)
  {
    swift_bridgeObjectRelease_n();
    goto LABEL_8;
  }
  char v10 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  BOOL result = 0;
  if (v10)
  {
LABEL_8:
    uint64_t v12 = (int *)type metadata accessor for KeyDropShareMetaDataResponse.ShareMetaData(0);
    uint64_t v13 = v12[5];
    uint64_t v14 = &a1[v13];
    uint64_t v15 = &a2[v13];
    if ((static Date.== infix(_:_:)() & 1) == 0) {
      return 0;
    }
    uint64_t v16 = type metadata accessor for KeyDropInterface.KeyAlignment(0);
    if (*(void *)&v14[*(int *)(v16 + 20)] != *(void *)&v15[*(int *)(v16 + 20)]
      || (static Date.== infix(_:_:)() & 1) == 0)
    {
      return 0;
    }
    uint64_t v17 = v12[6];
    uint64_t v18 = &a1[v17];
    char v19 = a1[v17 + 8];
    uint64_t v20 = &a2[v17];
    int v21 = a2[v17 + 8];
    if (v19)
    {
      if (!v21) {
        return 0;
      }
    }
    else
    {
      if (*(void *)v18 != *(void *)v20) {
        LOBYTE(v21) = 1;
      }
      if (v21) {
        return 0;
      }
    }
    return *(void *)&a1[v12[7]] == *(void *)&a2[v12[7]];
  }
  return result;
}

BOOL sub_1010A2AD0(uint64_t a1, uint64_t a2)
{
  if ((static UUID.== infix(_:_:)() & 1) == 0) {
    return 0;
  }
  uint64_t v4 = type metadata accessor for KeyDropShareMetaDataResponse.Member(0);
  if (*(unsigned __int8 *)(a1 + *(int *)(v4 + 20)) != *(unsigned __int8 *)(a2 + *(int *)(v4 + 20))) {
    return 0;
  }
  uint64_t v5 = *(int *)(v4 + 24);
  uint64_t v6 = a1 + v5;
  uint64_t v7 = *(void *)(a1 + v5);
  unint64_t v8 = *(void *)(v6 + 8);
  char v9 = (uint64_t *)(a2 + v5);
  uint64_t v10 = *v9;
  unint64_t v11 = v9[1];
  if (v8 >> 60 == 15)
  {
    if (v11 >> 60 == 15) {
      return 1;
    }
    goto LABEL_7;
  }
  if (v11 >> 60 == 15)
  {
LABEL_7:
    sub_100037A38(v7, *(void *)(v6 + 8));
    sub_100037A38(v10, v11);
    sub_100037A24(v7, v8);
    sub_100037A24(v10, v11);
    return 0;
  }
  sub_100037A38(v7, *(void *)(v6 + 8));
  sub_100037A38(v10, v11);
  char v12 = _s12searchpartyd24KeyRepresentableInternalV23__derived_struct_equalsySbAC_ACtFZ_0(v7, v8, v10, v11);
  sub_100037A24(v10, v11);
  sub_100037A24(v7, v8);
  return (v12 & 1) != 0;
}

void *sub_1010A2BF0(uint64_t a1, uint64_t a2, int a3, uint64_t a4, uint64_t a5)
{
  uint64_t v71 = a5;
  LODWORD(v69._object) = a3;
  uint64_t v8 = type metadata accessor for P256.Signing.PrivateKey();
  uint64_t v62 = *(void *)(v8 - 8);
  uint64_t v63 = v8;
  __chkstk_darwin(v8);
  uint64_t v67 = (char *)&v59 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = type metadata accessor for P256.Signing.ECDSASignature();
  uint64_t v60 = *(void *)(v10 - 8);
  uint64_t v61 = v10;
  __chkstk_darwin(v10);
  unint64_t v64 = (char *)&v59 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v69._countAndFlagsBits = type metadata accessor for KeyDropShareMetaDataRequest.KeyDropMetaDataContent(0);
  __chkstk_darwin(v69._countAndFlagsBits);
  uint64_t v13 = (uint64_t *)((char *)&v59 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v14 = type metadata accessor for JSONEncoder.DateEncodingStrategy();
  uint64_t v15 = *(void *)(v14 - 8);
  __chkstk_darwin(v14);
  uint64_t v17 = (uint64_t *)((char *)&v59 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0));
  type metadata accessor for JSONEncoder();
  swift_allocObject();
  uint64_t v18 = JSONEncoder.init()();
  *uint64_t v17 = sub_1003B9190;
  v17[1] = 0;
  (*(void (**)(void *, void, uint64_t))(v15 + 104))(v17, enum case for JSONEncoder.DateEncodingStrategy.custom(_:), v14);
  dispatch thunk of JSONEncoder.dateEncodingStrategy.setter();
  int64_t v19 = *(void *)(a4 + 16);
  uint64_t v74 = a1;
  uint64_t v68 = v18;
  if (v19)
  {
    uint64_t v65 = a2;
    uint64_t v66 = v13;
    uint64_t v72 = _swiftEmptyArrayStorage;
    sub_1000B763C(0, v19, 0);
    uint64_t v20 = 0;
    int v21 = v72;
    uint64_t v22 = v72[2];
    uint64_t v23 = 2 * v22;
    uint64_t v24 = a4;
    do
    {
      char v25 = *(unsigned char *)(v24 + v20 + 32);
      uint64_t v72 = v21;
      unint64_t v26 = v21[3];
      uint64_t v27 = v22 + v20 + 1;
      if (v22 + v20 >= v26 >> 1)
      {
        uint64_t v29 = v24;
        sub_1000B763C(v26 > 1, v22 + v20 + 1, 1);
        uint64_t v24 = v29;
        int v21 = v72;
      }
      ++v20;
      long long v21[2] = v27;
      uint64_t v28 = (char *)v21 + v23;
      v28[32] = v25;
      v28[33] = 1;
      v23 += 2;
    }
    while (v19 != v20);
    swift_bridgeObjectRelease();
    uint64_t v30 = v74;
    a2 = v65;
    uint64_t v13 = v66;
  }
  else
  {
    swift_bridgeObjectRelease();
    uint64_t v30 = a1;
    int v21 = _swiftEmptyArrayStorage;
  }
  uint64_t v31 = type metadata accessor for UUID();
  uint64_t v32 = *(void *)(v31 - 8);
  char v33 = *(void (**)(void *, uint64_t, uint64_t))(v32 + 16);
  v33(v13, v30, v31);
  countAndFlagsBits = (int *)v69._countAndFlagsBits;
  static Date.trustedNow.getter((uint64_t)v13 + *(int *)(v69._countAndFlagsBits + 24));
  v33((void *)((char *)v13 + countAndFlagsBits[7]), a2, v31);
  *((unsigned char *)v13 + countAndFlagsBits[5]) = v69._object;
  *(void *)((char *)v13 + countAndFlagsBits[8]) = v21;
  sub_1010A3D9C(&qword_1016694F8, (void (*)(uint64_t))type metadata accessor for KeyDropShareMetaDataRequest.KeyDropMetaDataContent);
  uint64_t v35 = v70;
  uint64_t v37 = dispatch thunk of JSONEncoder.encode<A>(_:)();
  uint64_t v38 = v74;
  if (v35)
  {
    swift_release();
    sub_1010A34B4(v71, type metadata accessor for KeyDropJoinToken);
    uint64_t v39 = *(void (**)(uint64_t, uint64_t))(v32 + 8);
    v39(a2, v31);
    v39(v38, v31);
    sub_1010A34B4((uint64_t)v13, type metadata accessor for KeyDropShareMetaDataRequest.KeyDropMetaDataContent);
  }
  else
  {
    unint64_t v40 = v36;
    uint64_t v70 = (void *)v37;
    uint64_t v41 = v32;
    uint64_t v42 = v71 + *(int *)(type metadata accessor for KeyDropJoinToken(0) + 20);
    unint64_t v43 = *(void *)(v42 + 8);
    uint64_t v72 = *(void **)v42;
    unint64_t v73 = v43;
    sub_1000361E0((uint64_t)v72, v43);
    unsigned int v44 = v67;
    P256.Signing.PrivateKey.init<A>(rawRepresentation:)();
    uint64_t v72 = v70;
    unint64_t v73 = v40;
    sub_1000362FC();
    P256.Signing.PrivateKey.signature<A>(for:)();
    uint64_t v66 = v13;
    uint64_t v46 = (*(uint64_t (**)(char *, uint64_t))(v62 + 8))(v44, v63);
    uint64_t v13 = (void *)sub_1005F52D4(v46);
    if (qword_101637188 != -1) {
      swift_once();
    }
    v69._countAndFlagsBits = qword_10170EE68;
    id v47 = [self sharedInstance];
    LODWORD(v69._object) = [v47 isInternalBuild];

    uint64_t v48 = v31;
    if (LODWORD(v69._object)
      && (NSString v49 = String._bridgeToObjectiveC()(),
          unsigned __int8 v50 = [(id)v69._countAndFlagsBits BOOLForKey:v49],
          v49,
          (v50 & 1) != 0))
    {
      swift_release();
      uint64_t v51 = v64;
    }
    else
    {
      uint64_t v51 = v64;
      uint64_t v52 = P256.Signing.ECDSASignature.derRepresentation.getter();
      uint64_t v53 = v48;
      unint64_t v55 = v54;
      Swift::String v69 = Data.base64EncodedString(options:)(0);
      unint64_t v56 = v55;
      uint64_t v48 = v53;
      sub_10001CFB8(v52, v56);
      char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      uint64_t v72 = v13;
      sub_10016C0FC(v69._countAndFlagsBits, (uint64_t)v69._object, 0xD000000000000012, 0x80000001013F42A0, isUniquelyReferenced_nonNull_native);
      uint64_t v13 = v72;
      swift_release();
      swift_bridgeObjectRelease();
    }
    sub_1010A34B4(v71, type metadata accessor for KeyDropJoinToken);
    unint64_t v58 = *(void (**)(uint64_t, uint64_t))(v41 + 8);
    v58(a2, v48);
    v58(v74, v48);
    (*(void (**)(char *, uint64_t))(v60 + 8))(v51, v61);
    sub_1010A34B4((uint64_t)v66, type metadata accessor for KeyDropShareMetaDataRequest.KeyDropMetaDataContent);
  }
  return v13;
}

unint64_t sub_1010A3440()
{
  unint64_t result = qword_1016694F0;
  if (!qword_1016694F0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1016694F0);
  }
  return result;
}

uint64_t type metadata accessor for KeyDropShareMetaDataRequest.KeyDropMetaDataContent(uint64_t a1)
{
  return sub_1000F4EA4(a1, qword_101669610);
}

uint64_t sub_1010A34B4(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t sub_1010A3514(uint64_t a1, char a2, uint64_t a3)
{
  *(unsigned char *)(v3 + 160) = a2;
  *(void *)(v3 + 16) = a1;
  *(void *)(v3 + 24) = a3;
  *(void *)(v3 + 32) = type metadata accessor for KeyDropUpdateRequest.UpdateRequestContent(0);
  *(void *)(v3 + 40) = swift_task_alloc();
  uint64_t v4 = type metadata accessor for JSONEncoder.DateEncodingStrategy();
  *(void *)(v3 + 48) = v4;
  *(void *)(v3 + 56) = *(void *)(v4 - 8);
  *(void *)(v3 + 64) = swift_task_alloc();
  uint64_t v7 = (uint64_t (__cdecl *)())((char *)&dword_101668370 + dword_101668370);
  uint64_t v5 = (void *)swift_task_alloc();
  *(void *)(v3 + 72) = v5;
  *uint64_t v5 = v3;
  v5[1] = sub_1010A3648;
  return v7();
}

uint64_t sub_1010A3648(uint64_t a1)
{
  *(void *)(*(void *)v1 + 80) = a1;
  swift_task_dealloc();
  return _swift_task_switch(sub_1010A3748, 0, 0);
}

uint64_t sub_1010A3748()
{
  uint64_t v2 = *(void *)(v0 + 56);
  uint64_t v1 = *(void **)(v0 + 64);
  uint64_t v3 = *(void *)(v0 + 40);
  uint64_t v4 = *(void *)(v0 + 48);
  uint64_t v5 = *(void *)(v0 + 32);
  char v6 = *(unsigned char *)(v0 + 160);
  uint64_t v16 = *(void *)(v0 + 24);
  uint64_t v7 = *(void *)(v0 + 16);
  type metadata accessor for JSONEncoder();
  swift_allocObject();
  swift_bridgeObjectRetain();
  *(void *)(v0 + 88) = JSONEncoder.init()();
  *uint64_t v1 = sub_1003B9190;
  v1[1] = 0;
  (*(void (**)(void *, void, uint64_t))(v2 + 104))(v1, enum case for JSONEncoder.DateEncodingStrategy.custom(_:), v4);
  dispatch thunk of JSONEncoder.dateEncodingStrategy.setter();
  uint64_t v8 = type metadata accessor for UUID();
  *(void *)(v0 + 96) = v8;
  uint64_t v9 = *(void *)(v8 - 8);
  *(void *)(v0 + 104) = v9;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v9 + 16))(v3, v7, v8);
  *(unsigned char *)(v3 + *(int *)(v5 + 20)) = v6;
  *(void *)(v3 + *(int *)(v5 + 24)) = v16;
  sub_1010A3D9C(&qword_101669518, (void (*)(uint64_t))type metadata accessor for KeyDropUpdateRequest.UpdateRequestContent);
  uint64_t v10 = dispatch thunk of JSONEncoder.encode<A>(_:)();
  *(void *)(v0 + 112) = v10;
  *(void *)(v0 + 120) = v11;
  uint64_t v12 = v10;
  uint64_t v13 = v11;
  uint64_t v17 = (uint64_t (*)(uint64_t, uint64_t))((char *)&dword_101668368 + dword_101668368);
  uint64_t v14 = (void *)swift_task_alloc();
  *(void *)(v0 + 128) = v14;
  *uint64_t v14 = v0;
  v14[1] = sub_1010A3A10;
  return v17(v12, v13);
}

uint64_t sub_1010A3A10(uint64_t a1, uint64_t a2)
{
  uint64_t v6 = *v3;
  *(void *)(*v3 + 136) = v2;
  swift_task_dealloc();
  if (v2)
  {
    swift_bridgeObjectRelease();
    uint64_t v7 = sub_1010A3C68;
  }
  else
  {
    *(void *)(v6 + 144) = a2;
    *(void *)(v6 + 152) = a1;
    uint64_t v7 = sub_1010A3B4C;
  }
  return _swift_task_switch(v7, 0, 0);
}

uint64_t sub_1010A3B4C()
{
  unint64_t v1 = v0[18];
  uint64_t v2 = v0[19];
  uint64_t v3 = v0[12];
  uint64_t v4 = v0[13];
  uint64_t v5 = v0[5];
  uint64_t v6 = v0[2];
  sub_10001CFB8(v0[14], v0[15]);
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v6, v3);
  sub_1010A34B4(v5, type metadata accessor for KeyDropUpdateRequest.UpdateRequestContent);
  swift_bridgeObjectRetain();
  sub_1000361E0(v2, v1);
  swift_bridgeObjectRelease_n();
  sub_10001CFB8(v2, v1);
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v7 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))v0[1];
  uint64_t v9 = v0[18];
  uint64_t v8 = v0[19];
  uint64_t v10 = v0[10];
  return v7(v10, v8, v9);
}

uint64_t sub_1010A3C68()
{
  sub_10001CFB8(v0[14], v0[15]);
  uint64_t v1 = v0[12];
  uint64_t v2 = v0[13];
  uint64_t v3 = v0[5];
  uint64_t v4 = v0[2];
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v4, v1);
  sub_1010A34B4(v3, type metadata accessor for KeyDropUpdateRequest.UpdateRequestContent);
  swift_bridgeObjectRelease();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v5 = (uint64_t (*)(void))v0[1];
  return v5();
}

unint64_t sub_1010A3D48()
{
  unint64_t result = qword_101669510;
  if (!qword_101669510)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_101669510);
  }
  return result;
}

uint64_t sub_1010A3D9C(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t type metadata accessor for KeyDropUpdateRequest.UpdateRequestContent(uint64_t a1)
{
  return sub_1000F4EA4(a1, qword_101669578);
}

void *sub_1010A3E04(void *a1, void *a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v9 = *a2;
    *a1 = *a2;
    a1 = (void *)(v9 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v7 = type metadata accessor for UUID();
    (*(void (**)(void *, void *, uint64_t))(*(void *)(v7 - 8) + 16))(a1, a2, v7);
    uint64_t v8 = *(int *)(a3 + 24);
    *((unsigned char *)a1 + *(int *)(a3 + 20)) = *((unsigned char *)a2 + *(int *)(a3 + 20));
    *(void *)((char *)a1 + v8) = *(void *)((char *)a2 + v8);
    swift_bridgeObjectRetain();
  }
  return a1;
}

uint64_t sub_1010A3EDC(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);

  return swift_bridgeObjectRelease();
}

uint64_t sub_1010A3F50(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 16))(a1, a2, v6);
  uint64_t v7 = *(int *)(a3 + 24);
  *(unsigned char *)(a1 + *(int *)(a3 + 20)) = *(unsigned char *)(a2 + *(int *)(a3 + 20));
  *(void *)(a1 + v7) = *(void *)(a2 + v7);
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t sub_1010A3FD8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 24))(a1, a2, v6);
  *(unsigned char *)(a1 + *(int *)(a3 + 20)) = *(unsigned char *)(a2 + *(int *)(a3 + 20));
  *(void *)(a1 + *(int *)(a3 + 24)) = *(void *)(a2 + *(int *)(a3 + 24));
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t sub_1010A4070(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 40))(a1, a2, v6);
  uint64_t v7 = *(int *)(a3 + 24);
  *(unsigned char *)(a1 + *(int *)(a3 + 20)) = *(unsigned char *)(a2 + *(int *)(a3 + 20));
  *(void *)(a1 + v7) = *(void *)(a2 + v7);
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t sub_1010A40FC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1010A4110);
}

uint64_t sub_1010A4110(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for UUID();
  uint64_t v7 = *(void *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == a2)
  {
    uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    return v8(a1, a2, v6);
  }
  else
  {
    unint64_t v10 = *(void *)(a1 + *(int *)(a3 + 24));
    if (v10 >= 0xFFFFFFFF) {
      LODWORD(v10) = -1;
    }
    return (v10 + 1);
  }
}

uint64_t sub_1010A41D0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1010A41E4);
}

uint64_t sub_1010A41E4(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result = type metadata accessor for UUID();
  uint64_t v9 = *(void *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    unint64_t v10 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    return v10(a1, a2, a2, result);
  }
  else
  {
    *(void *)(a1 + *(int *)(a4 + 24)) = (a2 - 1);
  }
  return result;
}

uint64_t sub_1010A42A0()
{
  return sub_1010A680C();
}

uint64_t getEnumTagSinglePayload for KeyDropUpdateResponse(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0xFE) {
    goto LABEL_17;
  }
  if (a2 + 2 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 2) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 8)) - 2;
    }
  }
  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 8)) - 2;
    }
    int v4 = a1[1];
    if (a1[1]) {
      return (*a1 | (v4 << 8)) - 2;
    }
  }
LABEL_17:
  unsigned int v6 = *a1;
  if (v6 >= 2) {
    int v7 = ((v6 + 2147483646) & 0x7FFFFFFF) - 1;
  }
  else {
    int v7 = -2;
  }
  if (v7 < 0) {
    int v7 = -1;
  }
  return (v7 + 1);
}

unsigned char *storeEnumTagSinglePayload for KeyDropUpdateResponse(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 2 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 2) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFE) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFD)
  {
    unsigned int v6 = ((a2 - 254) >> 8) + 1;
    *uint64_t result = a2 + 2;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1010A4430);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 2;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for KeyDropUpdateResponse()
{
  return &type metadata for KeyDropUpdateResponse;
}

ValueMetadata *type metadata accessor for KeyDropUpdateRequest()
{
  return &type metadata for KeyDropUpdateRequest;
}

uint64_t getEnumTagSinglePayload for KeyDropShareMetaDataRequest.MetaDataPackageRequest(unsigned __int16 *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0xFF) {
    goto LABEL_17;
  }
  if (a2 + 65281 <= 0xFFFEFFFF) {
    int v2 = 2;
  }
  else {
    int v2 = 4;
  }
  if (a2 + 65281 < 0xFF0000) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 16)) - 65281;
    }
  }
  else
  {
    if (v3 == 2)
    {
      int v4 = a1[1];
      if (!a1[1]) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 16)) - 65281;
    }
    int v4 = *((unsigned __int8 *)a1 + 2);
    if (*((unsigned char *)a1 + 2)) {
      return (*a1 | (v4 << 16)) - 65281;
    }
  }
LABEL_17:
  unsigned int v6 = *((unsigned __int8 *)a1 + 1);
  BOOL v7 = v6 >= 2;
  int v8 = (v6 + 2147483646) & 0x7FFFFFFF;
  if (!v7) {
    int v8 = -1;
  }
  return (v8 + 1);
}

uint64_t storeEnumTagSinglePayload for KeyDropShareMetaDataRequest.MetaDataPackageRequest(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a3 + 65281 <= 0xFFFEFFFF) {
    int v3 = 2;
  }
  else {
    int v3 = 4;
  }
  if (a3 + 65281 < 0xFF0000) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFE)
  {
    unsigned int v6 = ((a2 - 255) >> 16) + 1;
    *(_WORD *)uint64_t result = a2 - 255;
    switch(v5)
    {
      case 1:
        *(unsigned char *)(result + 2) = v6;
        break;
      case 2:
        *(_WORD *)(result + 2) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1010A45FCLL);
      case 4:
        *(_DWORD *)(result + 2) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        *(unsigned char *)(result + 2) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 2) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 2) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *(unsigned char *)(result + 1) = a2 + 1;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for KeyDropShareMetaDataRequest.MetaDataPackageRequest()
{
  return &type metadata for KeyDropShareMetaDataRequest.MetaDataPackageRequest;
}

void *sub_1010A4634(void *a1, void *a2, int *a3)
{
  int v5 = *(_DWORD *)(*((void *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v13 = *a2;
    *a1 = *a2;
    a1 = (void *)(v13 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v7 = type metadata accessor for UUID();
    int v8 = *(void (**)(void *, void *, uint64_t))(*(void *)(v7 - 8) + 16);
    v8(a1, a2, v7);
    uint64_t v9 = a3[6];
    *((unsigned char *)a1 + a3[5]) = *((unsigned char *)a2 + a3[5]);
    unint64_t v10 = (char *)a1 + v9;
    uint64_t v11 = (char *)a2 + v9;
    uint64_t v12 = type metadata accessor for Date();
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v12 - 8) + 16))(v10, v11, v12);
    v8((void *)((char *)a1 + a3[7]), (void *)((char *)a2 + a3[7]), v7);
    *(void *)((char *)a1 + a3[8]) = *(void *)((char *)a2 + a3[8]);
    swift_bridgeObjectRetain();
  }
  return a1;
}

uint64_t sub_1010A4784(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for UUID();
  int v5 = *(void (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8);
  v5(a1, v4);
  uint64_t v6 = a1 + *(int *)(a2 + 24);
  uint64_t v7 = type metadata accessor for Date();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v7 - 8) + 8))(v6, v7);
  v5(a1 + *(int *)(a2 + 28), v4);

  return swift_bridgeObjectRelease();
}

uint64_t sub_1010A4864(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for UUID();
  uint64_t v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 16);
  v7(a1, a2, v6);
  uint64_t v8 = a3[6];
  *(unsigned char *)(a1 + a3[5]) = *(unsigned char *)(a2 + a3[5]);
  uint64_t v9 = a1 + v8;
  uint64_t v10 = a2 + v8;
  uint64_t v11 = type metadata accessor for Date();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v11 - 8) + 16))(v9, v10, v11);
  v7(a1 + a3[7], a2 + a3[7], v6);
  *(void *)(a1 + a3[8]) = *(void *)(a2 + a3[8]);
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t sub_1010A4964(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for UUID();
  uint64_t v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 24);
  v7(a1, a2, v6);
  *(unsigned char *)(a1 + a3[5]) = *(unsigned char *)(a2 + a3[5]);
  uint64_t v8 = a3[6];
  uint64_t v9 = a1 + v8;
  uint64_t v10 = a2 + v8;
  uint64_t v11 = type metadata accessor for Date();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v11 - 8) + 24))(v9, v10, v11);
  v7(a1 + a3[7], a2 + a3[7], v6);
  *(void *)(a1 + a3[8]) = *(void *)(a2 + a3[8]);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t sub_1010A4A74(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for UUID();
  uint64_t v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 32);
  v7(a1, a2, v6);
  uint64_t v8 = a3[6];
  *(unsigned char *)(a1 + a3[5]) = *(unsigned char *)(a2 + a3[5]);
  uint64_t v9 = a1 + v8;
  uint64_t v10 = a2 + v8;
  uint64_t v11 = type metadata accessor for Date();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v11 - 8) + 32))(v9, v10, v11);
  v7(a1 + a3[7], a2 + a3[7], v6);
  *(void *)(a1 + a3[8]) = *(void *)(a2 + a3[8]);
  return a1;
}

uint64_t sub_1010A4B70(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for UUID();
  uint64_t v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 40);
  v7(a1, a2, v6);
  uint64_t v8 = a3[6];
  *(unsigned char *)(a1 + a3[5]) = *(unsigned char *)(a2 + a3[5]);
  uint64_t v9 = a1 + v8;
  uint64_t v10 = a2 + v8;
  uint64_t v11 = type metadata accessor for Date();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v11 - 8) + 40))(v9, v10, v11);
  v7(a1 + a3[7], a2 + a3[7], v6);
  *(void *)(a1 + a3[8]) = *(void *)(a2 + a3[8]);
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t sub_1010A4C74(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1010A4C88);
}

uint64_t sub_1010A4C88(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for UUID();
  uint64_t v7 = *(void *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == a2)
  {
    uint64_t v8 = v6;
    uint64_t v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    uint64_t v10 = a1;
LABEL_5:
    return v9(v10, a2, v8);
  }
  uint64_t v11 = type metadata accessor for Date();
  uint64_t v12 = *(void *)(v11 - 8);
  if (*(_DWORD *)(v12 + 84) == a2)
  {
    uint64_t v8 = v11;
    uint64_t v10 = a1 + *(int *)(a3 + 24);
    uint64_t v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v12 + 48);
    goto LABEL_5;
  }
  unint64_t v14 = *(void *)(a1 + *(int *)(a3 + 32));
  if (v14 >= 0xFFFFFFFF) {
    LODWORD(v14) = -1;
  }
  return (v14 + 1);
}

uint64_t sub_1010A4D9C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1010A4DB0);
}

uint64_t sub_1010A4DB0(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v8 = type metadata accessor for UUID();
  uint64_t v9 = *(void *)(v8 - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    uint64_t v10 = v8;
    uint64_t v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    uint64_t v12 = a1;
  }
  else
  {
    uint64_t result = type metadata accessor for Date();
    uint64_t v14 = *(void *)(result - 8);
    if (*(_DWORD *)(v14 + 84) != a3)
    {
      *(void *)(a1 + *(int *)(a4 + 32)) = (a2 - 1);
      return result;
    }
    uint64_t v10 = result;
    uint64_t v12 = a1 + *(int *)(a4 + 24);
    uint64_t v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v14 + 56);
  }

  return v11(v12, a2, a2, v10);
}

uint64_t sub_1010A4EC0()
{
  uint64_t result = type metadata accessor for UUID();
  if (v1 <= 0x3F)
  {
    uint64_t result = type metadata accessor for Date();
    if (v2 <= 0x3F)
    {
      swift_initStructMetadata();
      return 0;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for KeyDropShareMetaDataRequest()
{
  return &type metadata for KeyDropShareMetaDataRequest;
}

uint64_t *sub_1010A4FB0(uint64_t *a1, uint64_t *a2, int *a3)
{
  int v5 = *(_DWORD *)(*((void *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v14 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v14 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v7 = type metadata accessor for UUID();
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v7 - 8) + 16))(a1, a2, v7);
    uint64_t v8 = a3[5];
    uint64_t v9 = (char *)a1 + v8;
    uint64_t v10 = (char *)a2 + v8;
    uint64_t v11 = type metadata accessor for Date();
    uint64_t v12 = *(void *)(v11 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v12 + 48))(v10, 1, v11))
    {
      uint64_t v13 = sub_10000588C((uint64_t *)&unk_10163AC90);
      memcpy(v9, v10, *(void *)(*(void *)(v13 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v12 + 16))(v9, v10, v11);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v12 + 56))(v9, 0, 1, v11);
    }
    uint64_t v15 = a3[7];
    *(uint64_t *)((char *)a1 + a3[6]) = *(uint64_t *)((char *)a2 + a3[6]);
    *(uint64_t *)((char *)a1 + v15) = *(uint64_t *)((char *)a2 + v15);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  return a1;
}

uint64_t sub_1010A5178(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8))(a1, v4);
  uint64_t v5 = a1 + *(int *)(a2 + 20);
  uint64_t v6 = type metadata accessor for Date();
  uint64_t v7 = *(void *)(v6 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(v5, 1, v6)) {
    (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v5, v6);
  }
  swift_bridgeObjectRelease();

  return swift_bridgeObjectRelease();
}

uint64_t sub_1010A5284(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 16))(a1, a2, v6);
  uint64_t v7 = a3[5];
  uint64_t v8 = (void *)(a1 + v7);
  uint64_t v9 = (const void *)(a2 + v7);
  uint64_t v10 = type metadata accessor for Date();
  uint64_t v11 = *(void *)(v10 - 8);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v11 + 48))(v9, 1, v10))
  {
    uint64_t v12 = sub_10000588C((uint64_t *)&unk_10163AC90);
    memcpy(v8, v9, *(void *)(*(void *)(v12 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v11 + 16))(v8, v9, v10);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v11 + 56))(v8, 0, 1, v10);
  }
  uint64_t v13 = a3[7];
  *(void *)(a1 + a3[6]) = *(void *)(a2 + a3[6]);
  *(void *)(a1 + v13) = *(void *)(a2 + v13);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t sub_1010A53FC(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 24))(a1, a2, v6);
  uint64_t v7 = a3[5];
  uint64_t v8 = (void *)(a1 + v7);
  uint64_t v9 = (void *)(a2 + v7);
  uint64_t v10 = type metadata accessor for Date();
  uint64_t v11 = *(void *)(v10 - 8);
  uint64_t v12 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v11 + 48);
  int v13 = v12(v8, 1, v10);
  int v14 = v12(v9, 1, v10);
  if (!v13)
  {
    if (!v14)
    {
      (*(void (**)(void *, void *, uint64_t))(v11 + 24))(v8, v9, v10);
      goto LABEL_7;
    }
    (*(void (**)(void *, uint64_t))(v11 + 8))(v8, v10);
    goto LABEL_6;
  }
  if (v14)
  {
LABEL_6:
    uint64_t v15 = sub_10000588C((uint64_t *)&unk_10163AC90);
    memcpy(v8, v9, *(void *)(*(void *)(v15 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(void *, void *, uint64_t))(v11 + 16))(v8, v9, v10);
  (*(void (**)(void *, void, uint64_t, uint64_t))(v11 + 56))(v8, 0, 1, v10);
LABEL_7:
  *(void *)(a1 + a3[6]) = *(void *)(a2 + a3[6]);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + a3[7]) = *(void *)(a2 + a3[7]);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t sub_1010A55F0(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 32))(a1, a2, v6);
  uint64_t v7 = a3[5];
  uint64_t v8 = (void *)(a1 + v7);
  uint64_t v9 = (const void *)(a2 + v7);
  uint64_t v10 = type metadata accessor for Date();
  uint64_t v11 = *(void *)(v10 - 8);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v11 + 48))(v9, 1, v10))
  {
    uint64_t v12 = sub_10000588C((uint64_t *)&unk_10163AC90);
    memcpy(v8, v9, *(void *)(*(void *)(v12 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v11 + 32))(v8, v9, v10);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v11 + 56))(v8, 0, 1, v10);
  }
  uint64_t v13 = a3[7];
  *(void *)(a1 + a3[6]) = *(void *)(a2 + a3[6]);
  *(void *)(a1 + v13) = *(void *)(a2 + v13);
  return a1;
}

uint64_t sub_1010A575C(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 40))(a1, a2, v6);
  uint64_t v7 = a3[5];
  uint64_t v8 = (void *)(a1 + v7);
  uint64_t v9 = (void *)(a2 + v7);
  uint64_t v10 = type metadata accessor for Date();
  uint64_t v11 = *(void *)(v10 - 8);
  uint64_t v12 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v11 + 48);
  int v13 = v12(v8, 1, v10);
  int v14 = v12(v9, 1, v10);
  if (!v13)
  {
    if (!v14)
    {
      (*(void (**)(void *, void *, uint64_t))(v11 + 40))(v8, v9, v10);
      goto LABEL_7;
    }
    (*(void (**)(void *, uint64_t))(v11 + 8))(v8, v10);
    goto LABEL_6;
  }
  if (v14)
  {
LABEL_6:
    uint64_t v15 = sub_10000588C((uint64_t *)&unk_10163AC90);
    memcpy(v8, v9, *(void *)(*(void *)(v15 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(void *, void *, uint64_t))(v11 + 32))(v8, v9, v10);
  (*(void (**)(void *, void, uint64_t, uint64_t))(v11 + 56))(v8, 0, 1, v10);
LABEL_7:
  *(void *)(a1 + a3[6]) = *(void *)(a2 + a3[6]);
  swift_bridgeObjectRelease();
  *(void *)(a1 + a3[7]) = *(void *)(a2 + a3[7]);
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t sub_1010A5940(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1010A5954);
}

uint64_t sub_1010A5954(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for UUID();
  uint64_t v7 = *(void *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == a2)
  {
    uint64_t v8 = v6;
    uint64_t v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    uint64_t v10 = a1;
LABEL_5:
    return v9(v10, a2, v8);
  }
  uint64_t v11 = sub_10000588C((uint64_t *)&unk_10163AC90);
  uint64_t v12 = *(void *)(v11 - 8);
  if (*(_DWORD *)(v12 + 84) == a2)
  {
    uint64_t v8 = v11;
    uint64_t v10 = a1 + *(int *)(a3 + 20);
    uint64_t v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v12 + 48);
    goto LABEL_5;
  }
  unint64_t v14 = *(void *)(a1 + *(int *)(a3 + 24));
  if (v14 >= 0xFFFFFFFF) {
    LODWORD(v14) = -1;
  }
  return (v14 + 1);
}

uint64_t sub_1010A5A6C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1010A5A80);
}

uint64_t sub_1010A5A80(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v8 = type metadata accessor for UUID();
  uint64_t v9 = *(void *)(v8 - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    uint64_t v10 = v8;
    uint64_t v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    uint64_t v12 = a1;
  }
  else
  {
    uint64_t result = sub_10000588C((uint64_t *)&unk_10163AC90);
    uint64_t v14 = *(void *)(result - 8);
    if (*(_DWORD *)(v14 + 84) != a3)
    {
      *(void *)(a1 + *(int *)(a4 + 24)) = (a2 - 1);
      return result;
    }
    uint64_t v10 = result;
    uint64_t v12 = a1 + *(int *)(a4 + 20);
    uint64_t v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v14 + 56);
  }

  return v11(v12, a2, a2, v10);
}

uint64_t type metadata accessor for KeyDropShareMetaDataResponse(uint64_t a1)
{
  return sub_1000F4EA4(a1, qword_1016696B0);
}

void sub_1010A5BB4()
{
  type metadata accessor for UUID();
  if (v0 <= 0x3F)
  {
    sub_1000C7D80();
    if (v1 <= 0x3F) {
      swift_initStructMetadata();
    }
  }
}

uint64_t *sub_1010A5C8C(uint64_t *a1, uint64_t *a2, int *a3)
{
  uint64_t v4 = a1;
  int v5 = *(_DWORD *)(*((void *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v17 = *a2;
    *uint64_t v4 = *a2;
    uint64_t v4 = (uint64_t *)(v17 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    *(unsigned char *)a1 = *(unsigned char *)a2;
    uint64_t v7 = a3[5];
    uint64_t v8 = (char *)a1 + v7;
    uint64_t v9 = (char *)a2 + v7;
    uint64_t v10 = type metadata accessor for Date();
    uint64_t v11 = *(void (**)(unsigned char *, char *, uint64_t))(*(void *)(v10 - 8) + 16);
    v11(v8, v9, v10);
    uint64_t v12 = type metadata accessor for KeyDropInterface.KeyAlignment(0);
    *(void *)&v8[*(int *)(v12 + 20)] = *(void *)&v9[*(int *)(v12 + 20)];
    v11(&v8[*(int *)(v12 + 24)], &v9[*(int *)(v12 + 24)], v10);
    uint64_t v13 = a3[6];
    uint64_t v14 = a3[7];
    uint64_t v15 = (char *)v4 + v13;
    uint64_t v16 = (char *)a2 + v13;
    *(void *)uint64_t v15 = *(void *)v16;
    v15[8] = v16[8];
    *(uint64_t *)((char *)v4 + v14) = *(uint64_t *)((char *)a2 + v14);
  }
  return v4;
}

uint64_t sub_1010A5DC8(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = a1 + *(int *)(a2 + 20);
  uint64_t v3 = type metadata accessor for Date();
  uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8);
  ((void (*)(void *__return_ptr, uint64_t, uint64_t))v6)((void *)(v3 - 8), v2, v3);
  uint64_t v4 = v2 + *(int *)(type metadata accessor for KeyDropInterface.KeyAlignment(0) + 24);

  return v6(v4, v3);
}

unsigned char *sub_1010A5E68(unsigned char *a1, unsigned char *a2, int *a3)
{
  *a1 = *a2;
  uint64_t v6 = a3[5];
  uint64_t v7 = &a1[v6];
  uint64_t v8 = &a2[v6];
  uint64_t v9 = type metadata accessor for Date();
  uint64_t v10 = *(void (**)(unsigned char *, unsigned char *, uint64_t))(*(void *)(v9 - 8) + 16);
  v10(v7, v8, v9);
  uint64_t v11 = type metadata accessor for KeyDropInterface.KeyAlignment(0);
  *(void *)&v7[*(int *)(v11 + 20)] = *(void *)&v8[*(int *)(v11 + 20)];
  v10(&v7[*(int *)(v11 + 24)], &v8[*(int *)(v11 + 24)], v9);
  uint64_t v12 = a3[6];
  uint64_t v13 = a3[7];
  uint64_t v14 = &a1[v12];
  uint64_t v15 = &a2[v12];
  *(void *)uint64_t v14 = *(void *)v15;
  v14[8] = v15[8];
  *(void *)&a1[v13] = *(void *)&a2[v13];
  return a1;
}

unsigned char *sub_1010A5F54(unsigned char *a1, unsigned char *a2, int *a3)
{
  *a1 = *a2;
  uint64_t v6 = a3[5];
  uint64_t v7 = &a1[v6];
  uint64_t v8 = &a2[v6];
  uint64_t v9 = type metadata accessor for Date();
  uint64_t v10 = *(void (**)(unsigned char *, unsigned char *, uint64_t))(*(void *)(v9 - 8) + 24);
  v10(v7, v8, v9);
  uint64_t v11 = type metadata accessor for KeyDropInterface.KeyAlignment(0);
  *(void *)&v7[*(int *)(v11 + 20)] = *(void *)&v8[*(int *)(v11 + 20)];
  v10(&v7[*(int *)(v11 + 24)], &v8[*(int *)(v11 + 24)], v9);
  uint64_t v12 = a3[6];
  uint64_t v13 = &a1[v12];
  uint64_t v14 = &a2[v12];
  uint64_t v15 = *(void *)v14;
  v13[8] = v14[8];
  *(void *)uint64_t v13 = v15;
  *(void *)&a1[a3[7]] = *(void *)&a2[a3[7]];
  return a1;
}

unsigned char *sub_1010A6044(unsigned char *a1, unsigned char *a2, int *a3)
{
  *a1 = *a2;
  uint64_t v6 = a3[5];
  uint64_t v7 = &a1[v6];
  uint64_t v8 = &a2[v6];
  uint64_t v9 = type metadata accessor for Date();
  uint64_t v10 = *(void (**)(unsigned char *, unsigned char *, uint64_t))(*(void *)(v9 - 8) + 32);
  v10(v7, v8, v9);
  uint64_t v11 = type metadata accessor for KeyDropInterface.KeyAlignment(0);
  *(void *)&v7[*(int *)(v11 + 20)] = *(void *)&v8[*(int *)(v11 + 20)];
  v10(&v7[*(int *)(v11 + 24)], &v8[*(int *)(v11 + 24)], v9);
  uint64_t v12 = a3[6];
  uint64_t v13 = a3[7];
  uint64_t v14 = &a1[v12];
  uint64_t v15 = &a2[v12];
  *(void *)uint64_t v14 = *(void *)v15;
  v14[8] = v15[8];
  *(void *)&a1[v13] = *(void *)&a2[v13];
  return a1;
}

unsigned char *sub_1010A6130(unsigned char *a1, unsigned char *a2, int *a3)
{
  *a1 = *a2;
  uint64_t v6 = a3[5];
  uint64_t v7 = &a1[v6];
  uint64_t v8 = &a2[v6];
  uint64_t v9 = type metadata accessor for Date();
  uint64_t v10 = *(void (**)(unsigned char *, unsigned char *, uint64_t))(*(void *)(v9 - 8) + 40);
  v10(v7, v8, v9);
  uint64_t v11 = type metadata accessor for KeyDropInterface.KeyAlignment(0);
  *(void *)&v7[*(int *)(v11 + 20)] = *(void *)&v8[*(int *)(v11 + 20)];
  v10(&v7[*(int *)(v11 + 24)], &v8[*(int *)(v11 + 24)], v9);
  uint64_t v12 = a3[6];
  uint64_t v13 = a3[7];
  uint64_t v14 = &a1[v12];
  uint64_t v15 = &a2[v12];
  *(void *)uint64_t v14 = *(void *)v15;
  v14[8] = v15[8];
  *(void *)&a1[v13] = *(void *)&a2[v13];
  return a1;
}

uint64_t sub_1010A621C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1010A6230);
}

uint64_t sub_1010A6230(unsigned __int8 *a1, uint64_t a2, uint64_t a3)
{
  if (a2 == 239)
  {
    unsigned int v4 = *a1;
    if (v4 >= 0x11) {
      return v4 - 16;
    }
    else {
      return 0;
    }
  }
  else
  {
    uint64_t v8 = type metadata accessor for KeyDropInterface.KeyAlignment(0);
    uint64_t v9 = *(uint64_t (**)(unsigned __int8 *, uint64_t, uint64_t))(*(void *)(v8 - 8) + 48);
    uint64_t v10 = v8;
    uint64_t v11 = &a1[*(int *)(a3 + 20)];
    return v9(v11, a2, v10);
  }
}

uint64_t sub_1010A62D8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1010A62EC);
}

unsigned char *sub_1010A62EC(unsigned char *result, uint64_t a2, int a3, uint64_t a4)
{
  int v5 = result;
  if (a3 == 239)
  {
    *uint64_t result = a2 + 16;
  }
  else
  {
    uint64_t v7 = type metadata accessor for KeyDropInterface.KeyAlignment(0);
    uint64_t v8 = *(uint64_t (**)(unsigned char *, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56);
    uint64_t v9 = v7;
    uint64_t v10 = &v5[*(int *)(a4 + 20)];
    return (unsigned char *)v8(v10, a2, a2, v9);
  }
  return result;
}

uint64_t type metadata accessor for KeyDropShareMetaDataResponse.ShareMetaData(uint64_t a1)
{
  return sub_1000F4EA4(a1, qword_101669748);
}

uint64_t sub_1010A63B0()
{
  uint64_t result = type metadata accessor for KeyDropInterface.KeyAlignment(319);
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t sub_1010A6460(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 24))(a1, a2, v6);
  *(unsigned char *)(a1 + *(int *)(a3 + 20)) = *(unsigned char *)(a2 + *(int *)(a3 + 20));
  uint64_t v7 = *(int *)(a3 + 24);
  uint64_t v8 = (uint64_t *)(a1 + v7);
  uint64_t v9 = (uint64_t *)(a2 + v7);
  unint64_t v10 = *(void *)(a2 + v7 + 8);
  if (*(void *)(a1 + v7 + 8) >> 60 != 15)
  {
    if (v10 >> 60 != 15)
    {
      uint64_t v12 = *v9;
      sub_1000361E0(v12, v10);
      uint64_t v13 = *v8;
      unint64_t v14 = v8[1];
      *uint64_t v8 = v12;
      v8[1] = v10;
      sub_10001CFB8(v13, v14);
      return a1;
    }
    sub_1001356D0((uint64_t)v8);
    goto LABEL_6;
  }
  if (v10 >> 60 == 15)
  {
LABEL_6:
    *(_OWORD *)uint64_t v8 = *(_OWORD *)v9;
    return a1;
  }
  uint64_t v11 = *v9;
  sub_1000361E0(v11, v10);
  *uint64_t v8 = v11;
  v8[1] = v10;
  return a1;
}

uint64_t sub_1010A655C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 40))(a1, a2, v6);
  uint64_t v7 = *(int *)(a3 + 24);
  *(unsigned char *)(a1 + *(int *)(a3 + 20)) = *(unsigned char *)(a2 + *(int *)(a3 + 20));
  uint64_t v8 = (uint64_t *)(a1 + v7);
  uint64_t v9 = (uint64_t *)(a2 + v7);
  unint64_t v10 = *(void *)(a1 + v7 + 8);
  if (v10 >> 60 != 15)
  {
    unint64_t v11 = v9[1];
    if (v11 >> 60 != 15)
    {
      uint64_t v12 = *v8;
      *uint64_t v8 = *v9;
      v8[1] = v11;
      sub_10001CFB8(v12, v10);
      return a1;
    }
    sub_1001356D0((uint64_t)v8);
  }
  *(_OWORD *)uint64_t v8 = *(_OWORD *)v9;
  return a1;
}

uint64_t sub_1010A6624(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1010A6638);
}

uint64_t sub_1010A6638(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for UUID();
  uint64_t v7 = *(void *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == a2)
  {
    uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    return v8(a1, a2, v6);
  }
  else
  {
    unsigned int v10 = *(unsigned __int8 *)(a1 + *(int *)(a3 + 20));
    if (v10 >= 2) {
      return ((v10 + 2147483646) & 0x7FFFFFFF) + 1;
    }
    else {
      return 0;
    }
  }
}

uint64_t sub_1010A6708(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1010A671C);
}

uint64_t sub_1010A671C(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result = type metadata accessor for UUID();
  uint64_t v9 = *(void *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    unsigned int v10 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    return v10(a1, a2, a2, result);
  }
  else
  {
    *(unsigned char *)(a1 + *(int *)(a4 + 20)) = a2 + 1;
  }
  return result;
}

uint64_t type metadata accessor for KeyDropShareMetaDataResponse.Member(uint64_t a1)
{
  return sub_1000F4EA4(a1, qword_1016697E0);
}

uint64_t sub_1010A67F8()
{
  return sub_1010A680C();
}

uint64_t sub_1010A680C()
{
  uint64_t result = type metadata accessor for UUID();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

unint64_t sub_1010A68AC(uint64_t a1)
{
  unint64_t result = sub_1010A68D4();
  *(void *)(a1 + 8) = result;
  return result;
}

unint64_t sub_1010A68D4()
{
  unint64_t result = qword_101669820;
  if (!qword_101669820)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_101669820);
  }
  return result;
}

unint64_t sub_1010A6928(uint64_t a1)
{
  unint64_t result = sub_1010A6950();
  *(void *)(a1 + 8) = result;
  return result;
}

unint64_t sub_1010A6950()
{
  unint64_t result = qword_101669828;
  if (!qword_101669828)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_101669828);
  }
  return result;
}

unint64_t sub_1010A69A4()
{
  unint64_t result = qword_101669838;
  if (!qword_101669838)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_101669838);
  }
  return result;
}

unint64_t sub_1010A69F8()
{
  unint64_t result = qword_101669860;
  if (!qword_101669860)
  {
    sub_10000592C(&qword_101669858);
    sub_1010A3D9C(&qword_101669868, (void (*)(uint64_t))type metadata accessor for KeyDropShareMetaDataResponse.Member);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_101669860);
  }
  return result;
}

uint64_t sub_1010A6A9C(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

unint64_t sub_1010A6B04()
{
  unint64_t result = qword_101669878;
  if (!qword_101669878)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_101669878);
  }
  return result;
}

unint64_t sub_1010A6B58()
{
  unint64_t result = qword_101669888;
  if (!qword_101669888)
  {
    sub_10000592C(&qword_101669880);
    sub_1010A6BCC();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_101669888);
  }
  return result;
}

unint64_t sub_1010A6BCC()
{
  unint64_t result = qword_101669890;
  if (!qword_101669890)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_101669890);
  }
  return result;
}

unint64_t sub_1010A6C20()
{
  unint64_t result = qword_1016698A0;
  if (!qword_1016698A0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1016698A0);
  }
  return result;
}

unint64_t sub_1010A6C74()
{
  unint64_t result = qword_1016698B0;
  if (!qword_1016698B0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1016698B0);
  }
  return result;
}

unint64_t sub_1010A6CC8()
{
  unint64_t result = qword_1016698C8;
  if (!qword_1016698C8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1016698C8);
  }
  return result;
}

unint64_t sub_1010A6D1C()
{
  unint64_t result = qword_1016698D0;
  if (!qword_1016698D0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1016698D0);
  }
  return result;
}

uint64_t sub_1010A6D70(unint64_t *a1, unint64_t *a2)
{
  uint64_t result = *a1;
  if (!result)
  {
    sub_10000592C(&qword_101669840);
    sub_1010A3D9C(a2, (void (*)(uint64_t))type metadata accessor for KeyDropShareMetaDataResponse.ShareMetaData);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

unint64_t sub_1010A6E04()
{
  unint64_t result = qword_1016698F0;
  if (!qword_1016698F0)
  {
    sub_10000592C(&qword_101669858);
    sub_1010A3D9C(&qword_1016698F8, (void (*)(uint64_t))type metadata accessor for KeyDropShareMetaDataResponse.Member);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1016698F0);
  }
  return result;
}

unint64_t sub_1010A6EA8()
{
  unint64_t result = qword_101669908;
  if (!qword_101669908)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_101669908);
  }
  return result;
}

unint64_t sub_1010A6EFC()
{
  unint64_t result = qword_101669910;
  if (!qword_101669910)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_101669910);
  }
  return result;
}

uint64_t sub_1010A6F50(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for KeyDropInterface.KeyAlignment(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

unint64_t sub_1010A6FB4()
{
  unint64_t result = qword_101669938;
  if (!qword_101669938)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_101669938);
  }
  return result;
}

ValueMetadata *type metadata accessor for KeyDropShareMetaDataResponse.Member.CodingKeys()
{
  return &type metadata for KeyDropShareMetaDataResponse.Member.CodingKeys;
}

ValueMetadata *type metadata accessor for KeyDropShareMetaDataResponse.ShareMetaData.CodingKeys()
{
  return &type metadata for KeyDropShareMetaDataResponse.ShareMetaData.CodingKeys;
}

unsigned char *storeEnumTagSinglePayload for KeyDropShareMetaDataRequest.MetaDataPackageRequest.CodingKeys(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFE)
  {
    unsigned int v6 = ((a2 - 255) >> 8) + 1;
    *unint64_t result = a2 + 1;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1010A70FCLL);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 1;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for KeyDropShareMetaDataRequest.MetaDataPackageRequest.CodingKeys()
{
  return &type metadata for KeyDropShareMetaDataRequest.MetaDataPackageRequest.CodingKeys;
}

unsigned char *_s12searchpartyd28KeyDropShareMetaDataResponseV6MemberV10CodingKeysOwst_0(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 2 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 2) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFE) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFD)
  {
    unsigned int v6 = ((a2 - 254) >> 8) + 1;
    *unint64_t result = a2 + 2;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1010A7200);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 2;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for KeyDropUpdateRequest.UpdateRequestContent.CodingKeys()
{
  return &type metadata for KeyDropUpdateRequest.UpdateRequestContent.CodingKeys;
}

unsigned char *storeEnumTagSinglePayload for KeyDropUpdateResponse.CodingKeys(unsigned char *result, int a2, int a3)
{
  if ((a3 + 1) >= 0x10000) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) < 0x100) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2)
  {
    switch(v5)
    {
      case 1:
        *unint64_t result = a2;
        return result;
      case 2:
        *(_WORD *)unint64_t result = a2;
        return result;
      case 3:
        goto LABEL_19;
      case 4:
        *(_DWORD *)unint64_t result = a2;
        return result;
      default:
        return result;
    }
  }
  switch(v5)
  {
    case 1:
      *unint64_t result = 0;
      break;
    case 2:
      *(_WORD *)unint64_t result = 0;
      break;
    case 3:
LABEL_19:
      __break(1u);
      JUMPOUT(0x1010A72D4);
    case 4:
      *(_DWORD *)unint64_t result = 0;
      break;
    default:
      return result;
  }
  return result;
}

ValueMetadata *type metadata accessor for KeyDropUpdateResponse.CodingKeys()
{
  return &type metadata for KeyDropUpdateResponse.CodingKeys;
}

unsigned char *storeEnumTagSinglePayload for KeyDropShareMetaDataRequest.KeyDropMetaDataContent.CodingKeys(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 4 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 4) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFC) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFB)
  {
    unsigned int v6 = ((a2 - 252) >> 8) + 1;
    *unint64_t result = a2 + 4;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1010A73D8);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 4;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for KeyDropShareMetaDataRequest.KeyDropMetaDataContent.CodingKeys()
{
  return &type metadata for KeyDropShareMetaDataRequest.KeyDropMetaDataContent.CodingKeys;
}

unsigned char *_s12searchpartyd28KeyDropShareMetaDataResponseV13ShareMetaDataV10CodingKeysOwst_0(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 3 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 3) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFD) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFC)
  {
    unsigned int v6 = ((a2 - 253) >> 8) + 1;
    *unint64_t result = a2 + 3;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1010A74DCLL);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 3;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for KeyDropShareMetaDataResponse.CodingKeys()
{
  return &type metadata for KeyDropShareMetaDataResponse.CodingKeys;
}

unint64_t sub_1010A7518()
{
  unint64_t result = qword_101669948;
  if (!qword_101669948)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_101669948);
  }
  return result;
}

unint64_t sub_1010A7570()
{
  unint64_t result = qword_101669950;
  if (!qword_101669950)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_101669950);
  }
  return result;
}

unint64_t sub_1010A75C8()
{
  unint64_t result = qword_101669958;
  if (!qword_101669958)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_101669958);
  }
  return result;
}

unint64_t sub_1010A7620()
{
  unint64_t result = qword_101669960;
  if (!qword_101669960)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_101669960);
  }
  return result;
}

unint64_t sub_1010A7678()
{
  unint64_t result = qword_101669968;
  if (!qword_101669968)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_101669968);
  }
  return result;
}

unint64_t sub_1010A76D0()
{
  unint64_t result = qword_101669970;
  if (!qword_101669970)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_101669970);
  }
  return result;
}

unint64_t sub_1010A7728()
{
  unint64_t result = qword_101669978;
  if (!qword_101669978)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_101669978);
  }
  return result;
}

unint64_t sub_1010A7780()
{
  unint64_t result = qword_101669980;
  if (!qword_101669980)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_101669980);
  }
  return result;
}

unint64_t sub_1010A77D8()
{
  unint64_t result = qword_101669988;
  if (!qword_101669988)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_101669988);
  }
  return result;
}

unint64_t sub_1010A7830()
{
  unint64_t result = qword_101669990;
  if (!qword_101669990)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_101669990);
  }
  return result;
}

unint64_t sub_1010A7888()
{
  unint64_t result = qword_101669998;
  if (!qword_101669998)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_101669998);
  }
  return result;
}

unint64_t sub_1010A78E0()
{
  unint64_t result = qword_1016699A0;
  if (!qword_1016699A0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1016699A0);
  }
  return result;
}

unint64_t sub_1010A7938()
{
  unint64_t result = qword_1016699A8;
  if (!qword_1016699A8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1016699A8);
  }
  return result;
}

unint64_t sub_1010A7990()
{
  unint64_t result = qword_1016699B0;
  if (!qword_1016699B0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1016699B0);
  }
  return result;
}

unint64_t sub_1010A79E8()
{
  unint64_t result = qword_1016699B8;
  if (!qword_1016699B8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1016699B8);
  }
  return result;
}

unint64_t sub_1010A7A40()
{
  unint64_t result = qword_1016699C0;
  if (!qword_1016699C0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1016699C0);
  }
  return result;
}

unint64_t sub_1010A7A98()
{
  unint64_t result = qword_1016699C8;
  if (!qword_1016699C8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1016699C8);
  }
  return result;
}

unint64_t sub_1010A7AF0()
{
  unint64_t result = qword_1016699D0;
  if (!qword_1016699D0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1016699D0);
  }
  return result;
}

unint64_t sub_1010A7B48()
{
  unint64_t result = qword_1016699D8;
  if (!qword_1016699D8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1016699D8);
  }
  return result;
}

unint64_t sub_1010A7BA0()
{
  unint64_t result = qword_1016699E0;
  if (!qword_1016699E0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1016699E0);
  }
  return result;
}

unint64_t sub_1010A7BF8()
{
  unint64_t result = qword_1016699E8;
  if (!qword_1016699E8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1016699E8);
  }
  return result;
}

uint64_t sub_1010A7C4C(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 1701869940 && a2 == 0xE400000000000000;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x617461646174656DLL && a2 == 0xE800000000000000)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else
  {
    char v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v6) {
      return 1;
    }
    else {
      return 2;
    }
  }
}

uint64_t sub_1010A7D30(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 0x64496572616873 && a2 == 0xE700000000000000;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 1701869940 && a2 == 0xE400000000000000 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0x6D617473656D6974 && a2 == 0xE900000000000070 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else if (a1 == 0x64497265626D656DLL && a2 == 0xE800000000000000 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 3;
  }
  else if (a1 == 0x736567616B636170 && a2 == 0xE800000000000000)
  {
    swift_bridgeObjectRelease();
    return 4;
  }
  else
  {
    char v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v6) {
      return 4;
    }
    else {
      return 5;
    }
  }
}

uint64_t sub_1010A7F4C(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 0x64496572616873 && a2 == 0xE700000000000000;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 1701869940 && a2 == 0xE400000000000000 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0x616B63615079656BLL && a2 == 0xEB00000000736567)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else
  {
    char v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v6) {
      return 2;
    }
    else {
      return 3;
    }
  }
}

uint64_t sub_1010A80AC(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 1701869940 && a2 == 0xE400000000000000;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x6E656D6E67696C61 && a2 == 0xE900000000000074 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0x61745365676E6172 && a2 == 0xEA00000000007472 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else if (a1 == 0x646E4565676E6172 && a2 == 0xE800000000000000)
  {
    swift_bridgeObjectRelease();
    return 3;
  }
  else
  {
    char v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v6) {
      return 3;
    }
    else {
      return 4;
    }
  }
}

uint64_t sub_1010A8270(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 0x64497265626D656DLL && a2 == 0xE800000000000000;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x72656E776FLL && a2 == 0xE500000000000000 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0x6574707972636E65 && a2 == 0xEE00646C65694664)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else
  {
    char v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v6) {
      return 2;
    }
    else {
      return 3;
    }
  }
}

uint64_t sub_1010A83E4(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 0x64496572616873 && a2 == 0xE700000000000000;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x6974617269707865 && a2 == 0xEA00000000006E6FLL {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0x616B63615079656BLL && a2 == 0xEB00000000736567 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else if (a1 == 0x737265626D656DLL && a2 == 0xE700000000000000)
  {
    swift_bridgeObjectRelease();
    return 3;
  }
  else
  {
    char v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v6) {
      return 3;
    }
    else {
      return 4;
    }
  }
}

void *sub_1010A85D0(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  int v3 = (void *)a1;
  int v4 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v4 & 0x20000) != 0)
  {
    uint64_t v9 = *a2;
    *int v3 = *a2;
    int v3 = (void *)(v9 + ((v4 + 16) & ~(unint64_t)v4));
    swift_retain();
  }
  else
  {
    *(_DWORD *)a1 = *(_DWORD *)a2;
    *(unsigned char *)(a1 + 4) = *((unsigned char *)a2 + 4);
    uint64_t v5 = *(int *)(a3 + 28);
    uint64_t v6 = a1 + v5;
    uint64_t v7 = (uint64_t)a2 + v5;
    uint64_t v8 = type metadata accessor for Bit();
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 16))(v6, v7, v8);
  }
  return v3;
}

uint64_t sub_1010A86A4(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = a1 + *(int *)(a2 + 28);
  uint64_t v3 = type metadata accessor for Bit();
  int v4 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8);

  return v4(v2, v3);
}

uint64_t sub_1010A870C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(_DWORD *)a1 = *(_DWORD *)a2;
  *(unsigned char *)(a1 + 4) = *(unsigned char *)(a2 + 4);
  uint64_t v4 = *(int *)(a3 + 28);
  uint64_t v5 = a1 + v4;
  uint64_t v6 = a2 + v4;
  uint64_t v7 = type metadata accessor for Bit();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 16))(v5, v6, v7);
  return a1;
}

uint64_t sub_1010A8790(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(_WORD *)a1 = *(_WORD *)a2;
  *(_WORD *)(a1 + 2) = *(_WORD *)(a2 + 2);
  *(unsigned char *)(a1 + 4) = *(unsigned char *)(a2 + 4);
  uint64_t v4 = *(int *)(a3 + 28);
  uint64_t v5 = a1 + v4;
  uint64_t v6 = a2 + v4;
  uint64_t v7 = type metadata accessor for Bit();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 24))(v5, v6, v7);
  return a1;
}

uint64_t sub_1010A881C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(_DWORD *)a1 = *(_DWORD *)a2;
  *(unsigned char *)(a1 + 4) = *(unsigned char *)(a2 + 4);
  uint64_t v4 = *(int *)(a3 + 28);
  uint64_t v5 = a1 + v4;
  uint64_t v6 = a2 + v4;
  uint64_t v7 = type metadata accessor for Bit();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 32))(v5, v6, v7);
  return a1;
}

uint64_t sub_1010A88A0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(_DWORD *)a1 = *(_DWORD *)a2;
  *(unsigned char *)(a1 + 4) = *(unsigned char *)(a2 + 4);
  uint64_t v4 = *(int *)(a3 + 28);
  uint64_t v5 = a1 + v4;
  uint64_t v6 = a2 + v4;
  uint64_t v7 = type metadata accessor for Bit();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 40))(v5, v6, v7);
  return a1;
}

uint64_t sub_1010A8924(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1010A8938);
}

uint64_t sub_1010A8938(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = a1 + *(int *)(a3 + 28);
  uint64_t v5 = type metadata accessor for Bit();
  uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 48);

  return v6(v4, a2, v5);
}

uint64_t sub_1010A89A8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1010A89BC);
}

uint64_t sub_1010A89BC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = a1 + *(int *)(a4 + 28);
  uint64_t v6 = type metadata accessor for Bit();
  uint64_t v7 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 56);

  return v7(v5, a2, a2, v6);
}

uint64_t type metadata accessor for SubmitPayloadFieldLengthV2()
{
  uint64_t result = qword_101669A48;
  if (!qword_101669A48) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t sub_1010A8A7C()
{
  uint64_t result = type metadata accessor for Bit();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t sub_1010A8B28(void *a1)
{
  sub_10001CD44(a1, a1[3]);
  dispatch thunk of BinaryEncoding.container()();
  if (((*(unsigned __int16 *)v1 - 1) & 0xFFFF0000) != 0)
  {
    __break(1u);
    goto LABEL_10;
  }
  if (((*((unsigned __int16 *)v1 + 1) - 1) & 0xFFFF0000) != 0)
  {
LABEL_10:
    __break(1u);
    goto LABEL_11;
  }
  if (((v1[4] - 1) & 0xFFFFFF00) != 0)
  {
LABEL_11:
    __break(1u);
    goto LABEL_12;
  }
  sub_100179818();
  uint64_t v2 = FixedWidthInteger.bits()();
  if (*(void *)(v2 + 16) < 0xDuLL)
  {
LABEL_12:
    __break(1u);
LABEL_13:
    __break(1u);
    __break(1u);
LABEL_15:
    __break(1u);
  }
  uint64_t v3 = v2;
  uint64_t v4 = type metadata accessor for Bit();
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = *(unsigned __int8 *)(v5 + 80);
  uint64_t v7 = FixedWidthInteger.bits()();
  if (*(void *)(v7 + 16) < 0xAuLL) {
    goto LABEL_13;
  }
  uint64_t v8 = (void *)v7;
  uint64_t v9 = (v6 + 32) & ~v6;
  uint64_t v17 = v7 + v9;
  sub_10006145C();
  uint64_t v10 = FixedWidthInteger.bits()();
  sub_10000588C(&qword_101657D48);
  uint64_t v11 = swift_allocObject();
  *(_OWORD *)(v11 + 16) = xmmword_101342130;
  uint64_t v12 = type metadata accessor for SubmitPayloadFieldLengthV2();
  (*(void (**)(uint64_t, char *, uint64_t))(v5 + 16))(v11 + v9, &v1[*(int *)(v12 + 28)], v4);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  sub_1010AA3D4(v8, v17, 0, 0x15uLL);
  swift_bridgeObjectRelease();
  uint64_t v13 = *(void *)(v10 + 16);
  if (__OFADD__(v13, 13)) {
    goto LABEL_15;
  }
  sub_100A71F0C(0, (v13 + 13) & ~((v13 + 13) >> 63), 0, (unint64_t)_swiftEmptyArrayStorage);
  int64_t v14 = swift_unknownObjectRetain();
  sub_100445D78(v14, v3 + v9, 0, 0x1BuLL);
  uint64_t v15 = swift_bridgeObjectRetain();
  sub_1004463E8(v15);
  swift_bridgeObjectRelease();
  swift_unknownObjectRelease();
  sub_1004463E8(v11);
  sub_100060568();
  FixedWidthInteger.init(bits:)();
  sub_1000BD078((uint64_t)v18, v19);
  dispatch thunk of BinaryEncodingContaining.encode<A>(_:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)v18);
}

uint64_t sub_1010A8E84(void *a1)
{
  return sub_1010A8B28(a1);
}

uint64_t sub_1010A8E9C(uint64_t a1)
{
  unint64_t v3 = *(void *)(v1 + 24);
  uint64_t v4 = *(void **)v1;
  int64_t v5 = v3 >> 1;
  if ((v3 & 1) == 0
    || (char isUniquelyReferenced_nonNull = swift_isUniquelyReferenced_nonNull(),
        *(void *)uint64_t v1 = v4,
        (isUniquelyReferenced_nonNull & 1) == 0))
  {
    uint64_t v10 = v4;
    goto LABEL_9;
  }
  uint64_t v7 = *(void *)(v1 + 16);
  uint64_t v8 = v5 - v7;
  if (__OFSUB__(v5, v7)) {
    goto LABEL_44;
  }
  uint64_t v9 = *(void *)(v1 + 8);
  type metadata accessor for __ContiguousArrayStorageBase();
  swift_unknownObjectRetain();
  uint64_t v10 = (void *)swift_dynamicCastClass();
  if (!v10)
  {
    swift_unknownObjectRelease();
    uint64_t v10 = _swiftEmptyArrayStorage;
  }
  uint64_t v11 = *(void *)(type metadata accessor for Bit() - 8);
  uint64_t v12 = v10[2];
  if ((void *)(v9 + *(void *)(v11 + 72) * v7 + *(void *)(v11 + 72) * v8) == (void *)((char *)v10
                                                                                            + ((*(unsigned __int8 *)(v11 + 80)
                                                                                              + 32) & ~(unint64_t)*(unsigned __int8 *)(v11 + 80))
                                                                                            + *(void *)(v11 + 72)
                                                                                            * v12))
    goto LABEL_34;
  uint64_t result = swift_release();
  while (1)
  {
    if (v8 >= a1) {
      goto LABEL_31;
    }
    uint64_t v10 = *(void **)v1;
LABEL_9:
    uint64_t v14 = *(void *)(v1 + 16);
    uint64_t v8 = v5 - v14;
    if (__OFSUB__(v5, v14))
    {
      __break(1u);
LABEL_38:
      __break(1u);
      goto LABEL_39;
    }
    uint64_t v15 = *(void *)(v1 + 8);
    uint64_t v12 = v8 <= a1 ? a1 : v5 - v14;
    if (!v12) {
      break;
    }
    sub_10000588C(&qword_101657D48);
    uint64_t v16 = *(void *)(type metadata accessor for Bit() - 8);
    a1 = *(void *)(v16 + 72);
    unint64_t v17 = (*(unsigned __int8 *)(v16 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v16 + 80);
    uint64_t v4 = (void *)swift_allocObject();
    size_t v18 = j__malloc_size(v4);
    if (!a1) {
      goto LABEL_42;
    }
    if (v18 - v17 == 0x8000000000000000 && a1 == -1) {
      goto LABEL_43;
    }
    v4[2] = v8;
    v4[3] = 2 * ((uint64_t)(v18 - v17) / a1);
    if (v5 >= v14) {
      goto LABEL_20;
    }
LABEL_33:
    __break(1u);
LABEL_34:
    unint64_t v27 = v10[3];
    uint64_t result = swift_release();
    uint64_t v28 = (v27 >> 1) - v12;
    BOOL v29 = __OFADD__(v8, v28);
    v8 += v28;
    if (v29) {
      goto LABEL_45;
    }
  }
  uint64_t v4 = _swiftEmptyArrayStorage;
  if (v5 < v14) {
    goto LABEL_33;
  }
LABEL_20:
  if (v8 < 0) {
    goto LABEL_46;
  }
  uint64_t v20 = *(void *)(type metadata accessor for Bit() - 8);
  int v21 = (char *)v4 + ((*(unsigned __int8 *)(v20 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v20 + 80));
  uint64_t v22 = *(void *)(v20 + 72);
  unint64_t v23 = v15 + v22 * v14;
  if (v23 < (unint64_t)&v21[v22 * v8] && (unint64_t)v21 < v23 + v22 * v8) {
    goto LABEL_46;
  }
  swift_arrayInitWithCopy();
  if (__OFSUB__(0, v14)) {
    goto LABEL_38;
  }
  uint64_t v25 = v4[2];
  uint64_t v26 = v14 + v25;
  if (__OFADD__(v14, v25))
  {
LABEL_39:
    __break(1u);
    goto LABEL_40;
  }
  if (v26 < v14)
  {
LABEL_40:
    __break(1u);
    goto LABEL_41;
  }
  uint64_t result = swift_unknownObjectRelease();
  if ((v26 & 0x8000000000000000) == 0)
  {
    *(void *)(v1 + 8) = &v21[v22 * -v14];
    *(void *)(v1 + 16) = v14;
    *(void *)(v1 + 24) = (2 * v26) | 1;
LABEL_31:
    *(void *)uint64_t v1 = v4;
    return result;
  }
LABEL_41:
  __break(1u);
LABEL_42:
  __break(1u);
LABEL_43:
  __break(1u);
LABEL_44:
  __break(1u);
LABEL_45:
  __break(1u);
LABEL_46:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_1010A9240(uint64_t *a1, uint64_t a2, uint64_t a3, void (*a4)(unint64_t, uint64_t))
{
  int64_t v5 = v4;
  uint64_t v6 = v4[2];
  uint64_t v7 = v4[3] >> 1;
  uint64_t v8 = (void *)(v7 - v6);
  if (__OFSUB__(v7, v6))
  {
    __break(1u);
    goto LABEL_43;
  }
  uint64_t v10 = *a1;
  uint64_t v11 = *(void *)(*a1 + 16);
  BOOL v12 = __OFSUB__(v11, a2);
  uint64_t v13 = v11 - a2;
  if (v12)
  {
LABEL_43:
    __break(1u);
    goto LABEL_44;
  }
  uint64_t v15 = v13 - a3;
  if (__OFSUB__(v13, a3))
  {
LABEL_44:
    __break(1u);
    goto LABEL_45;
  }
  uint64_t v16 = (char *)v8 - a2;
  if (__OFSUB__(v8, a2))
  {
LABEL_45:
    __break(1u);
    goto LABEL_46;
  }
  unint64_t v43 = &v16[-v15];
  if (__OFSUB__(v16, v15))
  {
LABEL_46:
    __break(1u);
    goto LABEL_47;
  }
  uint64_t v38 = v15;
  uint64_t v44 = type metadata accessor for Bit();
  unint64_t v17 = (*(unsigned __int8 *)(*(void *)(v44 - 8) + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(v44 - 8) + 80);
  uint64_t v18 = *(void *)(*(void *)(v44 - 8) + 72);
  unint64_t v42 = v10 + v17;
  unint64_t v19 = v10 + v17 + v18 * a2;
  unint64_t v40 = v19 + v18 * a3;
  uint64_t v20 = sub_1010A99B4(v8);
  uint64_t v39 = v10;
  if (!v20)
  {
    uint64_t v22 = v5[2];
    uint64_t v29 = v22 + a2;
    if (__OFADD__(v22, a2))
    {
LABEL_52:
      __break(1u);
      goto LABEL_53;
    }
    if (v29 < v22)
    {
LABEL_53:
      __break(1u);
      goto LABEL_54;
    }
    if (__OFSUB__(v29, v22))
    {
LABEL_54:
      __break(1u);
      goto LABEL_55;
    }
    unint64_t v27 = v42;
    swift_arrayInitWithCopy();
    a4(v42 + a2 * v18, a3);
    uint64_t v30 = &v43[v29];
    if (__OFADD__(v29, v43))
    {
LABEL_55:
      __break(1u);
      goto LABEL_56;
    }
    uint64_t v31 = (char *)(v5[3] >> 1);
    if ((uint64_t)v31 < (uint64_t)v30)
    {
LABEL_56:
      __break(1u);
      goto LABEL_57;
    }
    if (__OFSUB__(v31, v30))
    {
LABEL_57:
      __break(1u);
LABEL_58:
      __break(1u);
      goto LABEL_59;
    }
    swift_arrayInitWithCopy();
LABEL_37:
    swift_retain();
    uint64_t result = swift_unknownObjectRelease();
    if (!__OFSUB__(0, v22))
    {
      uint64_t v34 = *(void *)(v39 + 16);
      BOOL v12 = __OFADD__(v22, v34);
      uint64_t v35 = v22 + v34;
      if (!v12)
      {
        if (v35 >= v22)
        {
          if ((v35 & 0x8000000000000000) == 0)
          {
            *int64_t v5 = v39;
            v5[1] = v27 + -v22 * v18;
            uint64_t v5[2] = v22;
            v5[3] = (2 * v35) | 1;
            return result;
          }
          goto LABEL_50;
        }
LABEL_49:
        __break(1u);
LABEL_50:
        __break(1u);
        goto LABEL_51;
      }
LABEL_48:
      __break(1u);
      goto LABEL_49;
    }
LABEL_47:
    __break(1u);
    goto LABEL_48;
  }
  if (!v18)
  {
LABEL_51:
    __break(1u);
    goto LABEL_52;
  }
  uint64_t v21 = v20;
  uint64_t v37 = v8;
  uint64_t v22 = v5[2];
  unint64_t v23 = v5[1] + v22 * v18;
  unint64_t v24 = v20 + v17;
  if (v23 - v24 == 0x8000000000000000 && v18 == -1) {
    goto LABEL_58;
  }
  unint64_t v36 = v24;
  swift_arrayDestroy();
  if (a2 < 0) {
    goto LABEL_60;
  }
  unint64_t v26 = v23 + v18 * a2;
  unint64_t v27 = v42;
  if (v42 < v23 || v42 >= v26)
  {
    swift_arrayInitWithTakeFrontToBack();
  }
  else if (v42 != v23)
  {
    swift_arrayInitWithTakeBackToFront();
  }
  swift_arrayDestroy();
  a4(v19, a3);
  if (v38 < 0) {
    goto LABEL_60;
  }
  unint64_t v32 = v26 + v18 * (void)v43;
  if (v40 < v32 || v40 >= v32 + v18 * v38)
  {
    swift_arrayInitWithTakeFrontToBack();
  }
  else if (v40 != v32)
  {
    swift_arrayInitWithTakeBackToFront();
  }
  if (v36 + *(void *)(v21 + 16) * v18 - (v23 + v18 * (void)v37) != 0x8000000000000000 || v18 != -1)
  {
    swift_arrayDestroy();
    *(void *)(v21 + 16) = 0;
    swift_release();
    goto LABEL_37;
  }
LABEL_59:
  __break(1u);
LABEL_60:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

void *sub_1010A95F4(void *result)
{
  uint64_t v2 = *(void *)(v1 + 16);
  unint64_t v3 = *(void *)(v1 + 24);
  unint64_t v4 = v3 >> 1;
  BOOL v5 = __OFSUB__(v3 >> 1, v2);
  uint64_t v6 = (v3 >> 1) - v2;
  if (v5)
  {
    __break(1u);
    goto LABEL_12;
  }
  uint64_t v7 = (char *)result - v6;
  if (__OFSUB__(result, v6))
  {
LABEL_12:
    __break(1u);
LABEL_13:
    __break(1u);
    goto LABEL_14;
  }
  if (!v7) {
    return result;
  }
  type metadata accessor for __ContiguousArrayStorageBase();
  swift_unknownObjectRetain();
  uint64_t result = (void *)swift_dynamicCastClass();
  if (!result)
  {
    swift_unknownObjectRelease();
    uint64_t result = _swiftEmptyArrayStorage;
  }
  uint64_t v8 = result[2];
  BOOL v5 = __OFADD__(v8, v7);
  uint64_t v9 = &v7[v8];
  if (v5) {
    goto LABEL_13;
  }
  result[2] = v9;
  uint64_t result = (void *)swift_release();
  uint64_t v10 = &v7[v4];
  if (__OFADD__(v4, v7))
  {
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }
  if (((unint64_t)v10 & 0x8000000000000000) != 0)
  {
LABEL_15:
    __break(1u);
    return result;
  }
  *(void *)(v1 + 24) = v3 & 1 | (2 * (void)v10);
  return result;
}

void *sub_1010A96AC(void *result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, unint64_t a6)
{
  uint64_t v8 = (a6 >> 1) - a5;
  if (__OFSUB__(a6 >> 1, a5))
  {
    __break(1u);
LABEL_39:
    if (v8 >= v7) {
      goto LABEL_23;
    }
    goto LABEL_19;
  }
  uint64_t v7 = a2;
  uint64_t v6 = result;
  if ((a6 & 1) == 0) {
    goto LABEL_39;
  }
  uint64_t v35 = result;
  type metadata accessor for __ContiguousArrayStorageBase();
  swift_unknownObjectRetain();
  uint64_t v11 = (void *)swift_dynamicCastClass();
  if (!v11)
  {
    swift_unknownObjectRelease();
    uint64_t v11 = _swiftEmptyArrayStorage;
  }
  uint64_t v12 = *(void *)(type metadata accessor for Bit() - 8);
  unint64_t v13 = (*(unsigned __int8 *)(v12 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v12 + 80);
  uint64_t v14 = v11[2];
  uint64_t v15 = *(void *)(v12 + 72);
  uint64_t v16 = (void *)(a4 + v15 * a5 + v15 * v8);
  if (v16 == (void *)((char *)v11 + v13 + v15 * v14))
  {
    unint64_t v18 = v11[3];
    uint64_t result = (void *)swift_release();
    uint64_t v19 = (v18 >> 1) - v14;
    uint64_t v17 = v8 + v19;
    if (__OFADD__(v8, v19))
    {
LABEL_43:
      __break(1u);
LABEL_44:
      __break(1u);
      goto LABEL_45;
    }
  }
  else
  {
    swift_release();
    uint64_t v17 = v8;
  }
  swift_unknownObjectRetain();
  uint64_t v20 = (void *)swift_dynamicCastClass();
  if (v17 < v7)
  {
    if (!v20)
    {
      swift_unknownObjectRelease();
      uint64_t v20 = _swiftEmptyArrayStorage;
    }
    uint64_t v21 = v20[2];
    if (v16 == (void *)((char *)v20 + v13 + v15 * v21))
    {
      unint64_t v23 = v20[3];
      uint64_t result = (void *)swift_release();
      uint64_t v24 = (v23 >> 1) - v21;
      BOOL v25 = __OFADD__(v8, v24);
      v8 += v24;
      if (v25)
      {
LABEL_45:
        __break(1u);
        goto LABEL_46;
      }
    }
    else
    {
      uint64_t result = (void *)swift_release();
    }
    uint64_t v6 = v35;
LABEL_19:
    if (v8 + 0x4000000000000000 < 0)
    {
LABEL_42:
      __break(1u);
      goto LABEL_43;
    }
    v8 *= 2;
LABEL_23:
    if (v8 <= v7) {
      uint64_t v28 = v7;
    }
    else {
      uint64_t v28 = v8;
    }
    if (v28 <= (uint64_t)v6) {
      uint64_t v29 = v6;
    }
    else {
      uint64_t v29 = (void *)v28;
    }
    if (!v29) {
      return _swiftEmptyArrayStorage;
    }
    sub_10000588C(&qword_101657D48);
    uint64_t v30 = *(void *)(type metadata accessor for Bit() - 8);
    uint64_t v31 = *(void *)(v30 + 72);
    unint64_t v32 = (*(unsigned __int8 *)(v30 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v30 + 80);
    char v33 = (void *)swift_allocObject();
    uint64_t result = (void *)j__malloc_size(v33);
    if (v31)
    {
      if ((void *)((char *)result - v32) != (void *)0x8000000000000000 || v31 != -1)
      {
        long long v33[2] = v6;
        v33[3] = 2 * ((uint64_t)((uint64_t)result - v32) / v31);
        return v33;
      }
      goto LABEL_44;
    }
    __break(1u);
    goto LABEL_42;
  }
  if (!v20)
  {
    swift_unknownObjectRelease();
    uint64_t v20 = _swiftEmptyArrayStorage;
  }
  uint64_t v22 = v20[2];
  if (v16 != (void *)((char *)v20 + v13 + v15 * v22))
  {
    swift_release();
LABEL_22:
    uint64_t v6 = v35;
    goto LABEL_23;
  }
  unint64_t v26 = v20[3];
  uint64_t result = (void *)swift_release();
  uint64_t v27 = (v26 >> 1) - v22;
  BOOL v25 = __OFADD__(v8, v27);
  v8 += v27;
  if (!v25) {
    goto LABEL_22;
  }
LABEL_46:
  __break(1u);
  return result;
}

uint64_t (*sub_1010A9998())()
{
  return SharingCircleWildAdvertisementKey.init(key:);
}

uint64_t sub_1010A99B4(void *a1)
{
  uint64_t result = swift_isUniquelyReferenced_nonNull();
  if (!result) {
    return 0;
  }
  uint64_t v6 = v1[2];
  unint64_t v5 = v1[3];
  uint64_t v7 = (v5 >> 1) - v6;
  if (__OFSUB__(v5 >> 1, v6))
  {
    __break(1u);
LABEL_21:
    __break(1u);
    goto LABEL_22;
  }
  uint64_t v8 = v1[1];
  if ((v5 & 1) == 0) {
    goto LABEL_8;
  }
  type metadata accessor for __ContiguousArrayStorageBase();
  swift_unknownObjectRetain();
  uint64_t v9 = (void *)swift_dynamicCastClass();
  if (!v9)
  {
    swift_unknownObjectRelease();
    uint64_t v9 = _swiftEmptyArrayStorage;
  }
  uint64_t v10 = *(void *)(type metadata accessor for Bit() - 8);
  uint64_t v11 = v9[2];
  if ((void *)(v8 + *(void *)(v10 + 72) * v6 + *(void *)(v10 + 72) * v7) != (void *)((char *)v9
                                                                                            + ((*(unsigned __int8 *)(v10 + 80)
                                                                                              + 32) & ~(unint64_t)*(unsigned __int8 *)(v10 + 80))
                                                                                            + *(void *)(v10 + 72)
                                                                                            * v11))
  {
    swift_release();
LABEL_8:
    uint64_t v12 = v7;
    goto LABEL_10;
  }
  unint64_t v13 = v9[3];
  uint64_t result = swift_release();
  uint64_t v14 = (v13 >> 1) - v11;
  BOOL v15 = __OFADD__(v7, v14);
  uint64_t v12 = v7 + v14;
  if (v15)
  {
    __break(1u);
    goto LABEL_25;
  }
LABEL_10:
  if (v12 < (uint64_t)a1) {
    return 0;
  }
  type metadata accessor for __ContiguousArrayStorageBase();
  swift_unknownObjectRetain();
  a1 = (void *)swift_dynamicCastClass();
  if (!a1)
  {
    swift_unknownObjectRelease();
    a1 = _swiftEmptyArrayStorage;
  }
  uint64_t v16 = type metadata accessor for Bit();
  uint64_t v17 = *(void *)(v16 - 8);
  uint64_t result = v16 - 8;
  uint64_t v18 = v17;
  uint64_t v19 = *(void *)(v17 + 72);
  if (!v19) {
    goto LABEL_21;
  }
  int64_t v20 = v8
      + v19 * v6
      - ((void)a1
       + ((*(unsigned __int8 *)(v18 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v18 + 80)));
  if (v19 != -1 || v20 != 0x8000000000000000)
  {
    uint64_t v21 = v20 / v19;
    uint64_t result = v7 + v21;
    if (!__OFADD__(v7, v21))
    {
      uint64_t v4 = a1[2];
      if (result >= v4) {
        return (uint64_t)a1;
      }
LABEL_23:
      sub_1010A9BF0(result, v4, 0);
      return (uint64_t)a1;
    }
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
LABEL_25:
  __break(1u);
  return result;
}

unint64_t sub_1010A9BF0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v7 = *v3;
  uint64_t v8 = *(void *)(type metadata accessor for Bit() - 8);
  uint64_t v9 = *(void *)(v8 + 72);
  uint64_t v10 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
    goto LABEL_20;
  }
  uint64_t v11 = v7 + ((*(unsigned __int8 *)(v8 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80));
  uint64_t v12 = v11 + v9 * a1;
  unint64_t result = swift_arrayDestroy();
  uint64_t v14 = a3 - v10;
  if (__OFSUB__(a3, v10))
  {
LABEL_20:
    __break(1u);
    goto LABEL_21;
  }
  uint64_t v15 = v9 * a3;
  if (v14)
  {
    uint64_t v16 = *(void *)(v7 + 16);
    uint64_t v17 = v16 - a2;
    if (!__OFSUB__(v16, a2))
    {
      if (v17 < 0)
      {
LABEL_24:
        unint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
        __break(1u);
        return result;
      }
      unint64_t result = v12 + v15;
      unint64_t v18 = v11 + v9 * a2;
      if (v12 + v15 < v18 || result >= v18 + v17 * v9)
      {
        unint64_t result = swift_arrayInitWithTakeFrontToBack();
      }
      else if (result != v18)
      {
        unint64_t result = swift_arrayInitWithTakeBackToFront();
      }
      uint64_t v20 = *(void *)(v7 + 16);
      BOOL v21 = __OFADD__(v20, v14);
      uint64_t v22 = v20 + v14;
      if (!v21)
      {
        *(void *)(v7 + 16) = v22;
        goto LABEL_16;
      }
LABEL_22:
      __break(1u);
LABEL_23:
      __break(1u);
      goto LABEL_24;
    }
LABEL_21:
    __break(1u);
    goto LABEL_22;
  }
LABEL_16:
  if (a3 >= 1 && v15 > 0) {
    goto LABEL_23;
  }
  return result;
}

void *sub_1010A9D8C(void *a1)
{
  uint64_t v3 = type metadata accessor for Bit();
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  uint64_t v6 = (char *)&v55 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = sub_10000588C(&qword_10163C630);
  uint64_t v8 = __chkstk_darwin(v7 - 8);
  uint64_t v10 = (char *)&v55 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = __chkstk_darwin(v8);
  unint64_t v13 = (char *)&v55 - v12;
  unint64_t result = (void *)__chkstk_darwin(v11);
  uint64_t v16 = (char *)&v55 - v15;
  uint64_t v17 = v1[2];
  uint64_t v18 = v1[3] >> 1;
  uint64_t v19 = v18 - v17;
  if (!__OFSUB__(v18, v17))
  {
    uint64_t v58 = v4;
    uint64_t v20 = a1[1];
    uint64_t v21 = a1[2];
    uint64_t v61 = v21;
    uint64_t v62 = v20;
    uint64_t v22 = a1[4];
    uint64_t v65 = a1[3] >> 1;
    uint64_t v66 = v6;
    if (v22 == v65)
    {
      uint64_t v71 = v22;
      uint64_t v23 = v58;
      unint64_t v64 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v58 + 56);
      v64((char *)&v55 - v15, 1, 1, v3);
      uint64_t v24 = v1;
    }
    else
    {
      if (v22 < v21 || v22 >= v65) {
        goto LABEL_53;
      }
      uint64_t v24 = v1;
      uint64_t v23 = v58;
      uint64_t v25 = v22;
      (*(void (**)(char *, uint64_t, uint64_t))(v58 + 16))((char *)&v55 - v15, v62 + *(void *)(v58 + 72) * v22, v3);
      uint64_t v71 = v25 + 1;
      unint64_t v64 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v23 + 56);
      v64(v16, 0, 1, v3);
    }
    sub_1010AA788((uint64_t)v16, (uint64_t)v13);
    Swift::String v69 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v23 + 48);
    uint64_t v70 = v23 + 48;
    if (v69(v13, 1, v3) == 1)
    {
LABEL_8:
      sub_1010AA7F0((uint64_t)v16);
      return (void *)sub_1010AA7F0((uint64_t)v13);
    }
    uint64_t v67 = (void (**)(char *))(v58 + 32);
    uint64_t v59 = v24;
    uint64_t v60 = (void (**)(char *, uint64_t, uint64_t))(v58 + 16);
    uint64_t v63 = v58 + 56;
    unint64_t v56 = (uint64_t (**)(char *, uint64_t))(v58 + 8);
    uint64_t v57 = v13;
    while (1)
    {
      unint64_t result = (void *)sub_1010AA7F0((uint64_t)v13);
      if (__OFADD__(v19, 1)) {
        goto LABEL_44;
      }
      uint64_t v72 = sub_1010A96AC((void *)v19, v19 + 1, *v24, v24[1], v24[2], v24[3]);
      unint64_t v26 = sub_1010A9998();
      sub_1010A9240((uint64_t *)&v72, v19, 0, (void (*)(unint64_t, uint64_t))v26);
      uint64_t v27 = v59;
      swift_release();
      unint64_t result = (void *)swift_release();
      uint64_t v29 = v27[2];
      unint64_t v28 = v27[3];
      uint64_t v30 = (v28 >> 1) - v29;
      if (__OFSUB__(v28 >> 1, v29)) {
        break;
      }
      uint64_t v31 = v27[1];
      if (v28)
      {
        type metadata accessor for __ContiguousArrayStorageBase();
        swift_unknownObjectRetain();
        unint64_t v32 = (void *)swift_dynamicCastClass();
        if (!v32)
        {
          swift_unknownObjectRelease();
          unint64_t v32 = _swiftEmptyArrayStorage;
        }
        uint64_t v33 = v32[2];
        uint64_t v34 = *(void *)(v58 + 72);
        uint64_t v35 = v34 * v29;
        if ((void *)(v31 + v34 * v29 + v34 * v30) == (void *)((char *)v32
                                                                 + ((*(unsigned __int8 *)(v58 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v58 + 80))
                                                                 + v34 * v33))
        {
          unint64_t v36 = v32[3];
          unint64_t result = (void *)swift_release();
          uint64_t v37 = (v36 >> 1) - v33;
          BOOL v38 = __OFADD__(v30, v37);
          v30 += v37;
          if (v38) {
            goto LABEL_51;
          }
        }
        else
        {
          swift_release();
        }
      }
      else
      {
        uint64_t v34 = *(void *)(v58 + 72);
        uint64_t v35 = v34 * v29;
      }
      sub_1010AA788((uint64_t)v16, (uint64_t)v10);
      if (v69(v10, 1, v3) != 1)
      {
        uint64_t v39 = *v67;
        if (v30 <= v19) {
          uint64_t v40 = v19;
        }
        else {
          uint64_t v40 = v30;
        }
        uint64_t v68 = v40;
        uint64_t v41 = v31 + v35 + v34 * v19;
        do
        {
          unint64_t v43 = v10;
          uint64_t v44 = v66;
          uint64_t v45 = v43;
          v39(v66);
          if (v68 == v19)
          {
            unint64_t result = (void *)(*v56)(v44, v3);
            uint64_t v19 = v68;
            uint64_t v10 = v45;
            goto LABEL_33;
          }
          sub_1010AA7F0((uint64_t)v16);
          unint64_t result = (void *)((uint64_t (*)(uint64_t, char *, uint64_t))v39)(v41, v44, v3);
          if (v71 == v65)
          {
            uint64_t v42 = v65;
            v64(v16, 1, 1, v3);
            uint64_t v71 = v42;
            uint64_t v10 = v45;
          }
          else
          {
            if (v71 < v61 || v71 >= v65)
            {
              __break(1u);
LABEL_44:
              __break(1u);
              goto LABEL_45;
            }
            uint64_t v10 = v45;
            uint64_t v46 = v71;
            (*v60)(v16, v62 + v71 * v34, v3);
            uint64_t v71 = v46 + 1;
            v64(v16, 0, 1, v3);
          }
          sub_1010AA788((uint64_t)v16, (uint64_t)v10);
          v41 += v34;
          ++v19;
        }
        while (v69(v10, 1, v3) != 1);
      }
      unint64_t result = (void *)sub_1010AA7F0((uint64_t)v10);
LABEL_33:
      uint64_t v24 = v59;
      uint64_t v47 = v59[2];
      unint64_t v48 = v59[3];
      unint64_t v49 = v48 >> 1;
      BOOL v38 = __OFSUB__(v48 >> 1, v47);
      uint64_t v50 = (v48 >> 1) - v47;
      if (v38) {
        goto LABEL_46;
      }
      uint64_t v51 = v19 - v50;
      if (__OFSUB__(v19, v50)) {
        goto LABEL_47;
      }
      if (v51)
      {
        type metadata accessor for __ContiguousArrayStorageBase();
        swift_unknownObjectRetain();
        unint64_t result = (void *)swift_dynamicCastClass();
        if (!result)
        {
          swift_unknownObjectRelease();
          unint64_t result = _swiftEmptyArrayStorage;
        }
        uint64_t v52 = result[2];
        BOOL v38 = __OFADD__(v52, v51);
        uint64_t v53 = v52 + v51;
        if (v38) {
          goto LABEL_48;
        }
        result[2] = v53;
        unint64_t result = (void *)swift_release();
        uint64_t v54 = v49 + v51;
        if (__OFADD__(v49, v51)) {
          goto LABEL_49;
        }
        if (v54 < 0) {
          goto LABEL_50;
        }
        uint64_t v24 = v59;
        v59[3] = v48 & 1 | (2 * v54);
      }
      unint64_t v13 = v57;
      sub_1010AA788((uint64_t)v16, (uint64_t)v57);
      if (v69(v13, 1, v3) == 1) {
        goto LABEL_8;
      }
    }
LABEL_45:
    __break(1u);
LABEL_46:
    __break(1u);
LABEL_47:
    __break(1u);
LABEL_48:
    __break(1u);
LABEL_49:
    __break(1u);
LABEL_50:
    __break(1u);
LABEL_51:
    __break(1u);
  }
  __break(1u);
LABEL_53:
  __break(1u);
  return result;
}

void *sub_1010AA3D4(void *result, uint64_t a2, void *a3, unint64_t a4)
{
  uint64_t v34 = result;
  uint64_t v9 = (void *)(a4 >> 1);
  uint64_t v10 = (a4 >> 1) - (void)a3;
  if (__OFSUB__(a4 >> 1, a3))
  {
    __break(1u);
    goto LABEL_41;
  }
  unint64_t v6 = v5[2];
  unint64_t v11 = v5[3];
  uint64_t v4 = (v11 >> 1) - v6;
  if (__OFSUB__(v11 >> 1, v6))
  {
LABEL_41:
    __break(1u);
    goto LABEL_42;
  }
  if ((v11 & 1) == 0)
  {
LABEL_8:
    uint64_t v16 = v4;
    goto LABEL_10;
  }
  uint64_t v14 = v5[1];
  type metadata accessor for __ContiguousArrayStorageBase();
  swift_unknownObjectRetain();
  uint64_t v7 = (void *)swift_dynamicCastClass();
  if (!v7)
  {
    swift_unknownObjectRelease();
    uint64_t v7 = _swiftEmptyArrayStorage;
  }
  uint64_t v15 = *(void *)(type metadata accessor for Bit() - 8);
  unint64_t v8 = v7[2];
  if ((void *)(v14 + *(void *)(v15 + 72) * v6 + *(void *)(v15 + 72) * v4) != (void *)((char *)v7
                                                                                             + ((*(unsigned __int8 *)(v15 + 80)
                                                                                               + 32) & ~(unint64_t)*(unsigned __int8 *)(v15 + 80))
                                                                                             + *(void *)(v15 + 72)
                                                                                             * v8))
  {
    swift_release();
    goto LABEL_8;
  }
  unint64_t v6 = v7[3];
  swift_release();
  unint64_t v17 = (v6 >> 1) - v8;
  BOOL v18 = __OFADD__(v4, v17);
  uint64_t v16 = v4 + v17;
  if (v18)
  {
LABEL_49:
    __break(1u);
    goto LABEL_50;
  }
LABEL_10:
  unint64_t result = (void *)(v4 + v10);
  if (__OFADD__(v4, v10))
  {
LABEL_42:
    __break(1u);
LABEL_43:
    __break(1u);
    goto LABEL_44;
  }
  if (v16 < (uint64_t)result)
  {
    if (v16 + 0x4000000000000000 < 0)
    {
LABEL_47:
      __break(1u);
      goto LABEL_48;
    }
    uint64_t v19 = 2 * v16;
    if (v19 > (uint64_t)result) {
      unint64_t result = (void *)v19;
    }
  }
  unint64_t result = (void *)sub_1010A8E9C((uint64_t)result);
  unint64_t v8 = v5[2];
  unint64_t v20 = v5[3];
  uint64_t v4 = (v20 >> 1) - v8;
  if (__OFSUB__(v20 >> 1, v8)) {
    goto LABEL_43;
  }
  unint64_t v36 = v9;
  uint64_t v37 = a2;
  uint64_t v7 = a3;
  uint64_t v21 = v5[1];
  unint64_t result = (void *)type metadata accessor for Bit();
  uint64_t v22 = *(result - 1);
  unint64_t v6 = *(void *)(v22 + 72);
  unint64_t v8 = v21 + v6 * v8 + v6 * v4;
  if ((v20 & 1) == 0)
  {
LABEL_44:
    uint64_t v26 = v4;
    uint64_t v25 = v7;
    goto LABEL_21;
  }
  type metadata accessor for __ContiguousArrayStorageBase();
  swift_unknownObjectRetain();
  uint64_t v23 = (void *)swift_dynamicCastClass();
  if (!v23)
  {
    swift_unknownObjectRelease();
    uint64_t v23 = _swiftEmptyArrayStorage;
  }
  uint64_t v24 = v23[2];
  uint64_t v25 = v7;
  if ((void *)v8 != (void *)((char *)v23
                                + ((*(unsigned __int8 *)(v22 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v22 + 80))
                                + v24 * v6))
  {
    unint64_t result = (void *)swift_release();
    uint64_t v26 = v4;
LABEL_21:
    unint64_t v28 = v36;
    uint64_t v27 = v37;
    goto LABEL_23;
  }
  unint64_t v29 = v23[3];
  unint64_t result = (void *)swift_release();
  uint64_t v30 = (v29 >> 1) - v24;
  BOOL v18 = __OFADD__(v4, v30);
  uint64_t v26 = v4 + v30;
  unint64_t v28 = v36;
  uint64_t v27 = v37;
  if (v18)
  {
LABEL_50:
    __break(1u);
    goto LABEL_51;
  }
LABEL_23:
  uint64_t v31 = v26 - v4;
  if (__OFSUB__(v26, v4))
  {
    __break(1u);
LABEL_46:
    __break(1u);
    goto LABEL_47;
  }
  if (v28 == v25)
  {
    if (v10 <= 0)
    {
      uint64_t v10 = 0;
      unint64_t v28 = v25;
      goto LABEL_37;
    }
    goto LABEL_46;
  }
  if (v31 < v10)
  {
LABEL_48:
    __break(1u);
    goto LABEL_49;
  }
  if (v10 < 0) {
    goto LABEL_52;
  }
  unint64_t v32 = v27 + v6 * (void)v25;
  if (v32 < v8 + v6 * v10 && v8 < v32 + v6 * v10) {
    goto LABEL_52;
  }
  unint64_t result = (void *)swift_arrayInitWithCopy();
  if (v10)
  {
    if (__OFADD__(v4, v10))
    {
LABEL_51:
      __break(1u);
LABEL_52:
      unint64_t result = (void *)_fatalErrorMessage(_:_:file:line:flags:)();
      __break(1u);
      return result;
    }
    unint64_t result = sub_1010A95F4((void *)(v4 + v10));
  }
LABEL_37:
  if (v10 == v31)
  {
    v38[0] = v34;
    v38[1] = v27;
    _OWORD v38[2] = v25;
    v38[3] = a4;
    v38[4] = v28;
    return sub_1010A9D8C(v38);
  }
  return result;
}

uint64_t sub_1010AA788(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_10000588C(&qword_10163C630);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_1010AA7F0(uint64_t a1)
{
  uint64_t v2 = sub_10000588C(&qword_10163C630);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_1010AA850(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1010AA864);
}

uint64_t sub_1010AA864(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for FMNAccountType();
  uint64_t v7 = *(void *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == a2)
  {
    unint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    return v8(a1, a2, v6);
  }
  else
  {
    unsigned int v10 = *(unsigned __int8 *)(a1 + *(int *)(a3 + 20));
    if (v10 >= 2) {
      return ((v10 + 2147483646) & 0x7FFFFFFF) + 1;
    }
    else {
      return 0;
    }
  }
}

uint64_t sub_1010AA934(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1010AA948);
}

uint64_t sub_1010AA948(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result = type metadata accessor for FMNAccountType();
  uint64_t v9 = *(void *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    unsigned int v10 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    return v10(a1, a2, a2, result);
  }
  else
  {
    *(unsigned char *)(a1 + *(int *)(a4 + 20)) = a2 + 1;
  }
  return result;
}

uint64_t type metadata accessor for AccessoryIdentityPairingLockCheckEndPoint()
{
  uint64_t result = qword_101669AE0;
  if (!qword_101669AE0) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t sub_1010AAA50()
{
  uint64_t result = type metadata accessor for FMNAccountType();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

void sub_1010AAAE4(uint64_t a1@<X8>)
{
  uint64_t v3 = type metadata accessor for URLComponents();
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  uint64_t v6 = &v20[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v7 = type metadata accessor for FMNAccountType();
  uint64_t v8 = *(void *)(v7 - 8);
  __chkstk_darwin(v7);
  unsigned int v10 = &v20[-((v9 + 15) & 0xFFFFFFFFFFFFFFF0)];
  if (*(unsigned char *)(v1 + *(int *)(type metadata accessor for AccessoryIdentityPairingLockCheckEndPoint() + 20)) == 1)
  {
    (*(void (**)(unsigned char *, void, uint64_t))(v8 + 104))(v10, enum case for FMNAccountType.none(_:), v7);
    type metadata accessor for AccountURLComponents();
    swift_allocObject();
    sub_1010E7A64((uint64_t)v10);
    sub_10000588C(&qword_101639580);
    OS_dispatch_queue.sync<A>(execute:)();
    URLComponents.init()();
    URLComponents.scheme.setter();
    URLComponents.host.setter();
    URLComponents.path.setter();
    swift_release();
    (*(void (**)(uint64_t, unsigned char *, uint64_t))(v4 + 32))(a1, v6, v3);
    unint64_t v11 = (void (*)(uint64_t *, void))URLComponents.path.modify();
    v12._countAndFlagsBits = 0xD00000000000002ALL;
    v12._object = (void *)0x8000000101420BB0;
    String.append(_:)(v12);
    v11(&v21, 0);
  }
  else
  {
    (*(void (**)(unsigned char *, uint64_t, uint64_t))(v8 + 16))(v10, v1, v7);
    type metadata accessor for AccountURLComponents();
    swift_allocObject();
    sub_1010E7A64((uint64_t)v10);
    sub_10000588C(&qword_101639580);
    OS_dispatch_queue.sync<A>(execute:)();
    URLComponents.init()();
    URLComponents.scheme.setter();
    URLComponents.host.setter();
    URLComponents.path.setter();
    swift_release();
    (*(void (**)(uint64_t, unsigned char *, uint64_t))(v4 + 32))(a1, v6, v3);
    unint64_t v13 = (void (*)(uint64_t *, void))URLComponents.path.modify();
    v14._countAndFlagsBits = 0xD00000000000001BLL;
    v14._object = (void *)0x8000000101420B90;
    String.append(_:)(v14);
    v13(&v21, 0);
    if (qword_101637188 != -1) {
      swift_once();
    }
    uint64_t v15 = (void *)qword_10170EE68;
    id v16 = [self sharedInstance];
    unsigned int v17 = [v16 isInternalBuild];

    if (v17)
    {
      NSString v18 = String._bridgeToObjectiveC()();
      id v19 = [v15 stringForKey:v18];

      if (v19)
      {
        static String._unconditionallyBridgeFromObjectiveC(_:)();

        URLComponents.host.setter();
      }
    }
  }
}

ValueMetadata *type metadata accessor for Configuration()
{
  return &type metadata for Configuration;
}

uint64_t sub_1010AAF84(uint64_t a1)
{
  return sub_1010AC7C4(a1);
}

uint64_t sub_1010AAF90(uint64_t a1)
{
  return sub_1010AC6B0(a1);
}

uint64_t sub_1010AAF9C(uint64_t a1)
{
  return sub_1010AC7C4(a1);
}

uint64_t sub_1010AAFA8(uint64_t a1)
{
  return sub_1010AC560(a1, (uint64_t)&unk_10138BC90, &qword_101649650);
}

uint64_t sub_1010AAFBC(uint64_t a1)
{
  return sub_1010AC560(a1, (uint64_t)&unk_10138CEB0, &qword_101669B48);
}

uint64_t sub_1010AAFD0(uint64_t a1)
{
  return sub_1010AC560(a1, (uint64_t)&unk_10138C438, &qword_101649650);
}

uint64_t sub_1010AAFE4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_1010ABB24(a1, &qword_101638CF0, (uint64_t (*)(void))&type metadata accessor for UUID, a2);
}

void *sub_1010AB00C(void *a1)
{
  uint64_t v2 = sub_10000588C(&qword_101665FB8);
  __chkstk_darwin(v2 - 8);
  uint64_t v4 = (char *)&v25 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = type metadata accessor for DefaultConfigurationLayer();
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v7 = __chkstk_darwin(v5);
  uint64_t v9 = (char *)&v25 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = __chkstk_darwin(v7);
  Swift::String v12 = (char *)&v25 - v11;
  __chkstk_darwin(v10);
  Swift::String v14 = (char *)&v25 - v13;
  uint64_t v15 = _swiftEmptyArrayStorage;
  uint64_t v30 = _swiftEmptyArrayStorage;
  uint64_t v16 = a1[2];
  swift_bridgeObjectRetain();
  if (v16)
  {
    uint64_t v26 = v14;
    uint64_t v27 = v5;
    unint64_t v28 = v4;
    unint64_t v29 = a1;
    unint64_t v17 = (*(unsigned __int8 *)(v6 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80);
    uint64_t v18 = *(void *)(v6 + 72);
    uint64_t v19 = (uint64_t)a1 + v17;
    while (2)
    {
      sub_100946E74(v19, (uint64_t)v12);
      switch(v12[25])
      {
        case 1:
          swift_bridgeObjectRelease();
          goto LABEL_8;
        default:
          char v20 = _stringCompareWithSmolCheck(_:_:expecting:)();
          swift_bridgeObjectRelease();
          if (v20)
          {
LABEL_8:
            sub_1010ADFF4((uint64_t)v12, (uint64_t)v9);
            if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
              sub_1000B7534(0, v15[2] + 1, 1);
            }
            uint64_t v15 = v30;
            unint64_t v22 = v30[2];
            unint64_t v21 = v30[3];
            if (v22 >= v21 >> 1)
            {
              sub_1000B7534(v21 > 1, v22 + 1, 1);
              uint64_t v15 = v30;
            }
            void v15[2] = v22 + 1;
            sub_1010ADFF4((uint64_t)v9, (uint64_t)v15 + v17 + v22 * v18);
          }
          else
          {
            sub_100946ED8((uint64_t)v12);
          }
          v19 += v18;
          if (--v16) {
            continue;
          }
          a1 = v29;
          uint64_t v15 = v30;
          uint64_t v5 = v27;
          uint64_t v4 = v28;
          Swift::String v14 = v26;
          break;
      }
      break;
    }
  }
  swift_bridgeObjectRelease();
  if (v15[2])
  {
    sub_100946E74((uint64_t)v15 + ((*(unsigned __int8 *)(v6 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80)), (uint64_t)v4);
    uint64_t v23 = 0;
  }
  else
  {
    uint64_t v23 = 1;
  }
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v6 + 56))(v4, v23, 1, v5);
  swift_release();
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v6 + 48))(v4, 1, v5) == 1)
  {
    sub_10001DAB4((uint64_t)v4, &qword_101665FB8);
    swift_bridgeObjectRetain();
  }
  else
  {
    sub_1010ADFF4((uint64_t)v4, (uint64_t)v14);
    *((void *)v14 + 2) = 0;
    v14[24] = 0;
    a1 = sub_1010AB3DC((uint64_t)v14, (uint64_t)a1);
    sub_100946ED8((uint64_t)v14);
  }
  return a1;
}

void *sub_1010AB3DC(uint64_t a1, uint64_t a2)
{
  v12[2] = a1;
  swift_bridgeObjectRetain();
  uint64_t v4 = sub_1000A434C((uint64_t (*)(char *))sub_1010AE7B8, v12, a2);
  sub_10000588C(&qword_10163A760);
  uint64_t v5 = *(void *)(type metadata accessor for DefaultConfigurationLayer() - 8);
  unint64_t v6 = (*(unsigned __int8 *)(v5 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
  uint64_t v7 = swift_allocObject();
  *(_OWORD *)(v7 + 16) = xmmword_101342130;
  sub_100946E74(a1, v7 + v6);
  sub_100442D50(v7);
  uint64_t v8 = (void *)v4;
  if (qword_101636868 != -1) {
    swift_once();
  }
  uint64_t v9 = qword_10170D738;
  uint64_t v11 = v8;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  sub_1010B11D4(&v11, v9);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v11;
}

uint64_t sub_1010AB5A0(uint64_t a1)
{
  uint64_t KeyPath = swift_getKeyPath();
  sub_100FCBD58(KeyPath, a1, &v4);
  swift_release();
  return v4;
}

uint64_t sub_1010AB5F0(uint64_t a1)
{
  return sub_1010AC560(a1, (uint64_t)&unk_10138BB50, &qword_101669B48);
}

uint64_t sub_1010AB604(uint64_t a1)
{
  return sub_1010AC7C4(a1);
}

uint64_t sub_1010AB610(uint64_t a1)
{
  return sub_1010AC6B0(a1);
}

uint64_t sub_1010AB61C(uint64_t a1)
{
  return sub_1010AC06C(a1, (uint64_t)&unk_10138D338, &qword_101669BB8);
}

uint64_t sub_1010AB630(uint64_t a1)
{
  return sub_1010AC6B0(a1);
}

uint64_t sub_1010AB63C(uint64_t a1)
{
  return sub_1010AC30C(a1);
}

uint64_t sub_1010AB648(uint64_t a1)
{
  return sub_1010AC560(a1, (uint64_t)&unk_10138B9C0, &qword_101649650);
}

uint64_t sub_1010AB65C(uint64_t a1)
{
  return sub_1010AC6B0(a1);
}

uint64_t sub_1010AB668(uint64_t a1)
{
  return sub_1010AC6B0(a1);
}

uint64_t sub_1010AB674(uint64_t a1)
{
  return sub_1010AC560(a1, (uint64_t)&unk_10138C0A0, &qword_101649650);
}

uint64_t sub_1010AB688(uint64_t a1)
{
  return sub_1010AC560(a1, (uint64_t)&unk_10138BCE0, &qword_101649650);
}

uint64_t sub_1010AB69C(uint64_t a1)
{
  return sub_1010AC560(a1, (uint64_t)&unk_10138C910, &qword_101649650);
}

uint64_t sub_1010AB6B0(uint64_t a1)
{
  return sub_1010AC560(a1, (uint64_t)&unk_10138BCB8, &qword_101649650);
}

uint64_t sub_1010AB6C4(uint64_t a1)
{
  return sub_1010AC7C4(a1);
}

uint64_t sub_1010AB6D0(uint64_t a1)
{
  return sub_1010AC560(a1, (uint64_t)&unk_10138BA38, &qword_101649650);
}

uint64_t sub_1010AB6E4(uint64_t a1)
{
  return sub_1010AC560(a1, (uint64_t)&unk_10138BA10, &qword_101649650);
}

uint64_t sub_1010AB6F8(uint64_t a1)
{
  return sub_1010AC560(a1, (uint64_t)&unk_10138BEC0, &qword_101669B48);
}

uint64_t sub_1010AB70C(uint64_t a1)
{
  return sub_1010AC7C4(a1);
}

uint64_t sub_1010AB718(uint64_t a1)
{
  return sub_1010AC560(a1, (uint64_t)&unk_10138C140, &qword_101649650);
}

uint64_t sub_1010AB72C(uint64_t a1)
{
  return sub_1010AC560(a1, (uint64_t)&unk_10138C5F0, &qword_101649650);
}

uint64_t sub_1010AB740(uint64_t a1)
{
  return sub_1010AC560(a1, (uint64_t)&unk_10138D310, &qword_101649650);
}

uint64_t sub_1010AB754(uint64_t a1)
{
  return sub_1010AC06C(a1, (uint64_t)&unk_10138B808, &qword_101669B18);
}

uint64_t sub_1010AB768(uint64_t a1)
{
  return sub_1010AC6B0(a1);
}

uint64_t sub_1010AB774(uint64_t a1)
{
  return sub_1010AC06C(a1, (uint64_t)&unk_10138C208, &qword_101669B98);
}

uint64_t sub_1010AB788(uint64_t a1)
{
  return sub_1010AC560(a1, (uint64_t)&unk_10138D2E8, &qword_101649650);
}

uint64_t sub_1010AB79C(uint64_t a1)
{
  return sub_1010AC560(a1, (uint64_t)&unk_10138C028, &qword_101649650);
}

uint64_t sub_1010AB7B0(uint64_t a1)
{
  return sub_1010AC560(a1, (uint64_t)&unk_10138BFD8, &qword_101649650);
}

uint64_t sub_1010AB7C4(uint64_t a1)
{
  return sub_1010AC560(a1, (uint64_t)&unk_10138BE70, &qword_101649650);
}

uint64_t sub_1010AB7D8(uint64_t a1)
{
  return sub_1010AC560(a1, (uint64_t)&unk_10138BE48, &qword_101649650);
}

uint64_t sub_1010AB7EC(uint64_t a1)
{
  return sub_1010AC560(a1, (uint64_t)&unk_10138C118, &qword_101649650);
}

uint64_t sub_1010AB800(uint64_t a1)
{
  return sub_1010AC560(a1, (uint64_t)&unk_10138C6E0, &qword_101649650);
}

uint64_t sub_1010AB814(uint64_t a1)
{
  return sub_1010AC560(a1, (uint64_t)&unk_10138C000, &qword_101649650);
}

uint64_t sub_1010AB828(uint64_t a1)
{
  return sub_1010AC560(a1, (uint64_t)&unk_10138C0F0, &qword_101649650);
}

uint64_t sub_1010AB83C(uint64_t a1)
{
  return sub_1010AC560(a1, (uint64_t)&unk_10138C0C8, &qword_101649650);
}

uint64_t sub_1010AB850(uint64_t a1)
{
  return sub_1010AC6B0(a1);
}

uint64_t sub_1010AB85C(uint64_t a1)
{
  return sub_1010AC560(a1, (uint64_t)&unk_10138D2C0, &qword_101649650);
}

uint64_t sub_1010AB870(uint64_t a1)
{
  return sub_1010AC560(a1, (uint64_t)&unk_10138D298, &qword_101649650);
}

uint64_t sub_1010AB884(uint64_t a1)
{
  return sub_1010AC560(a1, (uint64_t)&unk_10138C618, &qword_101649650);
}

uint64_t sub_1010AB898(uint64_t a1)
{
  return sub_1010AC560(a1, (uint64_t)&unk_10138CDC0, &qword_101649650);
}

uint64_t sub_1010AB8AC(uint64_t a1)
{
  return sub_1010AC560(a1, (uint64_t)&unk_10138CD48, &qword_101649650);
}

uint64_t sub_1010AB8C0(uint64_t a1)
{
  return sub_1010AC560(a1, (uint64_t)&unk_10138CD98, &qword_101649650);
}

uint64_t sub_1010AB8D4(uint64_t a1)
{
  return sub_1010AC560(a1, (uint64_t)&unk_10138CD70, &qword_101649650);
}

uint64_t sub_1010AB8E8(uint64_t a1)
{
  return sub_1010AC7C4(a1);
}

uint64_t sub_1010AB8F4(uint64_t a1)
{
  return sub_1010AC7C4(a1);
}

uint64_t sub_1010AB900(uint64_t a1)
{
  uint64_t KeyPath = swift_getKeyPath();
  uint64_t v3 = sub_1010AD25C(KeyPath, a1);
  if (v3)
  {
    uint64_t v4 = v3;
    swift_release();
    return v4;
  }
  else
  {
    _StringGuts.grow(_:)(40);
    v6._object = (void *)0x8000000101402410;
    v6._countAndFlagsBits = 0xD000000000000026;
    String.append(_:)(v6);
    sub_10000588C(&qword_101669B38);
    _print_unlocked<A, B>(_:_:)();
    uint64_t result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  return result;
}

uint64_t sub_1010AB9F8(uint64_t a1)
{
  return sub_1010AC06C(a1, (uint64_t)&unk_10138B948, &qword_101669B30);
}

uint64_t sub_1010ABA0C(uint64_t a1)
{
  return sub_1010AC560(a1, (uint64_t)&unk_10138C730, &qword_101649650);
}

uint64_t sub_1010ABA20(uint64_t a1)
{
  return sub_1010AC560(a1, (uint64_t)&unk_10138C7F8, &qword_101649650);
}

uint64_t sub_1010ABA34(uint64_t a1)
{
  return sub_1010AC560(a1, (uint64_t)&unk_10138C758, &qword_101649650);
}

uint64_t sub_1010ABA48(uint64_t a1)
{
  return sub_1010AC560(a1, (uint64_t)&unk_10138D270, &qword_101649650);
}

uint64_t sub_1010ABA5C(uint64_t a1)
{
  return sub_1010AC560(a1, (uint64_t)&unk_10138C7A8, &qword_101649650);
}

uint64_t sub_1010ABA70(uint64_t a1)
{
  return sub_1010AC6B0(a1);
}

uint64_t sub_1010ABA7C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_1010ABB24(a1, (uint64_t *)&unk_10163AC90, (uint64_t (*)(void))&type metadata accessor for Date, a2);
}

uint64_t sub_1010ABAA4(uint64_t a1)
{
  uint64_t KeyPath = swift_getKeyPath();
  uint64_t v3 = sub_1010ACB18(KeyPath, a1);
  swift_release();
  return v3;
}

uint64_t sub_1010ABAFC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_1010ABB24(a1, (uint64_t *)&unk_10163AC90, (uint64_t (*)(void))&type metadata accessor for Date, a2);
}

uint64_t sub_1010ABB24@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X2>, uint64_t (*a3)(void)@<X3>, uint64_t a4@<X8>)
{
  swift_getKeyPath();
  sub_1010AD4D8(a1, a2, a3, a4);

  return swift_release();
}

uint64_t sub_1010ABB94(uint64_t a1)
{
  return sub_1010AC560(a1, (uint64_t)&unk_10138D1A8, &qword_101649650);
}

uint64_t sub_1010ABBA8(uint64_t a1)
{
  return sub_1010AC560(a1, (uint64_t)&unk_10138D180, &qword_101649650);
}

uint64_t sub_1010ABBBC(uint64_t a1)
{
  return sub_1010AC7C4(a1);
}

uint64_t sub_1010ABBC8(uint64_t a1)
{
  return sub_1010AC7C4(a1);
}

uint64_t sub_1010ABBD4(uint64_t a1)
{
  return sub_1010AC7C4(a1);
}

uint64_t sub_1010ABBE0(uint64_t a1)
{
  return sub_1010AC7C4(a1);
}

__n128 sub_1010ABBEC@<Q0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t KeyPath = swift_getKeyPath();
  sub_100FCC0B4(KeyPath, a1, (uint64_t)v12);
  swift_release();
  uint64_t v5 = v13;
  uint64_t v6 = v17;
  __n128 result = v14;
  long long v8 = v15;
  long long v9 = v16;
  long long v10 = v12[1];
  long long v11 = v12[2];
  *(_OWORD *)a2 = v12[0];
  *(_OWORD *)(a2 + 16) = v10;
  *(_OWORD *)(a2 + 32) = v11;
  *(void *)(a2 + 48) = v5;
  *(__n128 *)(a2 + 56) = result;
  *(_OWORD *)(a2 + 72) = v8;
  *(_OWORD *)(a2 + 88) = v9;
  *(void *)(a2 + 104) = v6;
  return result;
}

uint64_t sub_1010ABC7C(uint64_t a1)
{
  return sub_1010AC6B0(a1);
}

uint64_t sub_1010ABC88(uint64_t a1)
{
  return sub_1010AC6B0(a1);
}

uint64_t sub_1010ABC94(uint64_t a1)
{
  return sub_1010AC6B0(a1);
}

uint64_t sub_1010ABCA0(uint64_t a1)
{
  return sub_1010AC7C4(a1);
}

uint64_t sub_1010ABCAC(uint64_t a1)
{
  return sub_1010AC7C4(a1);
}

uint64_t sub_1010ABCB8(uint64_t a1)
{
  return sub_1010AC7C4(a1);
}

uint64_t sub_1010ABCC4(uint64_t a1)
{
  return sub_1010AC7C4(a1);
}

uint64_t sub_1010ABCD0(uint64_t a1)
{
  return sub_1010AC7C4(a1);
}

uint64_t sub_1010ABCDC(uint64_t a1)
{
  return sub_1010AC7C4(a1);
}

uint64_t sub_1010ABCE8(uint64_t a1)
{
  return sub_1010AC7C4(a1);
}

uint64_t sub_1010ABCF4(uint64_t a1)
{
  return sub_1010AC7C4(a1);
}

uint64_t sub_1010ABD00(uint64_t a1)
{
  return sub_1010AC30C(a1);
}

uint64_t sub_1010ABD0C(uint64_t a1)
{
  return sub_1010AC560(a1, (uint64_t)&unk_10138D068, &qword_101649650);
}

uint64_t sub_1010ABD20(uint64_t a1)
{
  return sub_1010AC30C(a1);
}

uint64_t sub_1010ABD2C(uint64_t a1)
{
  return sub_1010AC560(a1, (uint64_t)&unk_10138D018, &qword_101649650);
}

uint64_t sub_1010ABD40(uint64_t a1)
{
  return sub_1010AC06C(a1, (uint64_t)&unk_10138CFF0, &qword_101669B20);
}

uint64_t sub_1010ABD54(uint64_t a1)
{
  return sub_1010AC30C(a1);
}

uint64_t sub_1010ABD60(uint64_t a1)
{
  return sub_1010AC7C4(a1);
}

uint64_t sub_1010ABD6C(uint64_t a1)
{
  return sub_1010AC6B0(a1);
}

uint64_t sub_1010ABD78(uint64_t a1)
{
  return sub_1010AC6B0(a1);
}

uint64_t sub_1010ABD84(uint64_t a1)
{
  return sub_1010AC6B0(a1);
}

uint64_t sub_1010ABD90(uint64_t a1)
{
  return sub_1010AC6B0(a1);
}

uint64_t sub_1010ABD9C(uint64_t a1)
{
  return sub_1010AC560(a1, (uint64_t)&unk_10138B920, &qword_101649650);
}

uint64_t sub_1010ABDB0(uint64_t a1)
{
  return sub_1010AC560(a1, (uint64_t)&unk_10138B8F8, &qword_101649650);
}

uint64_t sub_1010ABDC4(uint64_t a1)
{
  return sub_1010AC560(a1, (uint64_t)&unk_10138CE10, &qword_101649650);
}

uint64_t sub_1010ABDD8(uint64_t a1)
{
  return sub_1010AC560(a1, (uint64_t)&unk_10138CE38, &qword_101649650);
}

uint64_t sub_1010ABDEC(uint64_t a1)
{
  return sub_1010AC560(a1, (uint64_t)&unk_10138CFC8, &qword_101649650);
}

uint64_t sub_1010ABE00(uint64_t a1)
{
  return sub_1010AC7C4(a1);
}

uint64_t sub_1010ABE0C(uint64_t a1)
{
  return sub_1010AC7C4(a1);
}

uint64_t sub_1010ABE18(uint64_t a1)
{
  return sub_1010AC7C4(a1);
}

uint64_t sub_1010ABE24(uint64_t a1)
{
  return sub_1010AC560(a1, (uint64_t)&unk_10138C078, &qword_101649650);
}

uint64_t sub_1010ABE38(uint64_t a1)
{
  return sub_1010AC560(a1, (uint64_t)&unk_10138C050, &qword_101649650);
}

uint64_t sub_1010ABE4C(uint64_t a1)
{
  return sub_1010AC560(a1, (uint64_t)&unk_10138CB90, &qword_101649650);
}

uint64_t sub_1010ABE60(uint64_t a1)
{
  return sub_1010AC7C4(a1);
}

uint64_t sub_1010ABE6C(uint64_t a1)
{
  return sub_1010AC7C4(a1);
}

uint64_t sub_1010ABE78(uint64_t a1)
{
  return sub_1010AC560(a1, (uint64_t)&unk_10138BAD8, &qword_101649650);
}

uint64_t sub_1010ABE8C(uint64_t a1)
{
  return sub_1010AC560(a1, (uint64_t)&unk_10138BAB0, &qword_101649650);
}

uint64_t sub_1010ABEA0(uint64_t a1)
{
  return sub_1010AC560(a1, (uint64_t)&unk_10138BA60, &qword_101649650);
}

uint64_t sub_1010ABEB4(uint64_t a1)
{
  return sub_1010AC560(a1, (uint64_t)&unk_10138CFA0, &qword_101649650);
}

uint64_t sub_1010ABEC8(uint64_t a1)
{
  return sub_1010AC560(a1, (uint64_t)&unk_10138BA88, &qword_101649650);
}

uint64_t sub_1010ABEDC(uint64_t a1)
{
  return sub_1010AC560(a1, (uint64_t)&unk_10138CF78, &qword_101649650);
}

uint64_t sub_1010ABEF0(uint64_t a1)
{
  return sub_1010AC560(a1, (uint64_t)&unk_10138BB28, &qword_101649650);
}

uint64_t sub_1010ABF04(uint64_t a1)
{
  return sub_1010AC560(a1, (uint64_t)&unk_10138BB00, &qword_101649650);
}

uint64_t sub_1010ABF18(uint64_t a1)
{
  return sub_1010AC7C4(a1);
}

uint64_t sub_1010ABF24(uint64_t a1)
{
  return sub_1010AC6B0(a1);
}

uint64_t sub_1010ABF30(uint64_t a1)
{
  return sub_1010AC7C4(a1);
}

uint64_t sub_1010ABF3C(uint64_t a1)
{
  return sub_1010AC7C4(a1);
}

uint64_t sub_1010ABF48(uint64_t a1)
{
  return sub_1010AC560(a1, (uint64_t)&unk_10138C460, &qword_101649650);
}

uint64_t sub_1010ABF5C(uint64_t a1)
{
  return sub_1010AC6B0(a1);
}

uint64_t sub_1010ABF68(uint64_t a1)
{
  return sub_1010AC6B0(a1);
}

uint64_t sub_1010ABF74(uint64_t a1)
{
  return sub_1010AC6B0(a1);
}

uint64_t sub_1010ABF80(uint64_t a1)
{
  return sub_1010AC560(a1, (uint64_t)&unk_10138CC80, &qword_101649650);
}

uint64_t sub_1010ABF94(uint64_t a1)
{
  return sub_1010AC7C4(a1);
}

uint64_t sub_1010ABFA0(uint64_t a1)
{
  return sub_1010AC7C4(a1);
}

uint64_t sub_1010ABFAC(uint64_t a1)
{
  return sub_1010AC560(a1, (uint64_t)&unk_10138C280, &qword_101669BA0);
}

uint64_t sub_1010ABFC0(uint64_t a1)
{
  return sub_1010AC560(a1, (uint64_t)&unk_10138C258, &qword_101669BA0);
}

uint64_t sub_1010ABFD4(uint64_t a1)
{
  return sub_1010AC560(a1, (uint64_t)&unk_10138C2D0, &qword_101669BA0);
}

uint64_t sub_1010ABFE8(uint64_t a1)
{
  return sub_1010AC560(a1, (uint64_t)&unk_10138C2A8, &qword_101669BA0);
}

uint64_t sub_1010ABFFC(uint64_t a1)
{
  return sub_1010AC7C4(a1);
}

uint64_t sub_1010AC008(uint64_t a1)
{
  return sub_1010AC6B0(a1);
}

uint64_t sub_1010AC014(uint64_t a1)
{
  return sub_1010AC7C4(a1);
}

uint64_t sub_1010AC020(uint64_t a1)
{
  return sub_1010AC7C4(a1);
}

uint64_t sub_1010AC02C(uint64_t a1)
{
  return sub_1010AC06C(a1, (uint64_t)&unk_10138B830, &qword_101669B20);
}

uint64_t sub_1010AC040(uint64_t a1)
{
  return sub_1010AC6B0(a1);
}

uint64_t sub_1010AC04C(uint64_t a1)
{
  return sub_1010AC6B0(a1);
}

uint64_t sub_1010AC058(uint64_t a1)
{
  return sub_1010AC06C(a1, (uint64_t)&unk_10138C8E8, &qword_101669BA8);
}

uint64_t sub_1010AC06C(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t KeyPath = swift_getKeyPath();
  uint64_t v6 = sub_1010ACD78(KeyPath, a1);
  if (v6)
  {
    uint64_t v7 = v6;
    swift_release();
    return v7;
  }
  else
  {
    _StringGuts.grow(_:)(40);
    v9._object = (void *)0x8000000101402410;
    v9._countAndFlagsBits = 0xD000000000000026;
    String.append(_:)(v9);
    sub_10000588C(a3);
    _print_unlocked<A, B>(_:_:)();
    uint64_t result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  return result;
}

uint64_t sub_1010AC168(uint64_t a1)
{
  return sub_1010AC7C4(a1);
}

uint64_t sub_1010AC174(uint64_t a1)
{
  return sub_1010AC7C4(a1);
}

uint64_t sub_1010AC180(uint64_t a1)
{
  return sub_1010AC6B0(a1);
}

uint64_t sub_1010AC18C(uint64_t a1)
{
  return sub_1010AC6B0(a1);
}

uint64_t sub_1010AC198(uint64_t a1)
{
  return sub_1010AC560(a1, (uint64_t)&unk_10138BC40, &qword_101669B48);
}

uint64_t sub_1010AC1AC(uint64_t a1)
{
  return sub_1010AC560(a1, (uint64_t)&unk_10138BD30, &qword_101669B48);
}

uint64_t sub_1010AC1C0(uint64_t a1)
{
  return sub_1010AC560(a1, (uint64_t)&unk_10138C3E8, &qword_101669B48);
}

uint64_t sub_1010AC1D4(uint64_t a1)
{
  return sub_1010AC560(a1, (uint64_t)&unk_10138BD58, &qword_101669B48);
}

uint64_t sub_1010AC1E8(uint64_t a1)
{
  return sub_1010AC560(a1, (uint64_t)&unk_10138BDA8, &qword_101669B48);
}

uint64_t sub_1010AC1FC(uint64_t a1)
{
  return sub_1010AC560(a1, (uint64_t)&unk_10138BC68, &qword_101669B48);
}

uint64_t sub_1010AC210(uint64_t a1)
{
  return sub_1010AC560(a1, (uint64_t)&unk_10138C320, &qword_101669B48);
}

uint64_t sub_1010AC224(uint64_t a1)
{
  return sub_1010AC560(a1, (uint64_t)&unk_10138BD80, &qword_101669B48);
}

uint64_t sub_1010AC238(uint64_t a1)
{
  return sub_1010AC560(a1, (uint64_t)&unk_10138C500, &qword_101669B48);
}

uint64_t sub_1010AC24C(uint64_t a1)
{
  return sub_1010AC560(a1, (uint64_t)&unk_10138C4D8, &qword_101669B48);
}

uint64_t sub_1010AC260(uint64_t a1)
{
  return sub_1010AC560(a1, (uint64_t)&unk_10138C4B0, &qword_101669B48);
}

uint64_t sub_1010AC274(uint64_t a1)
{
  return sub_1010AC560(a1, (uint64_t)&unk_10138C528, &qword_101669B48);
}

uint64_t sub_1010AC288(uint64_t a1)
{
  return sub_1010AC560(a1, (uint64_t)&unk_10138C550, &qword_101669B48);
}

uint64_t sub_1010AC29C(uint64_t a1)
{
  return sub_1010AC560(a1, (uint64_t)&unk_10138C398, &qword_101669B48);
}

uint64_t sub_1010AC2B0(uint64_t a1)
{
  return sub_1010AC560(a1, (uint64_t)&unk_10138C3C0, &qword_101669B48);
}

uint64_t sub_1010AC2C4(uint64_t a1)
{
  return sub_1010AC7C4(a1);
}

uint64_t sub_1010AC2D0(uint64_t a1)
{
  return sub_1010AC7C4(a1);
}

uint64_t sub_1010AC2DC(uint64_t a1)
{
  return sub_1010AC6B0(a1);
}

uint64_t sub_1010AC2E8(uint64_t a1)
{
  return sub_1010AC7C4(a1);
}

uint64_t sub_1010AC2F4(uint64_t a1)
{
  return sub_1010AC7C4(a1);
}

uint64_t sub_1010AC300(uint64_t a1)
{
  return sub_1010AC30C(a1);
}

uint64_t sub_1010AC30C(uint64_t a1)
{
  uint64_t KeyPath = swift_getKeyPath();
  uint64_t v3 = sub_1010ACFD8(KeyPath, a1);
  if (v4)
  {
    uint64_t v5 = v3;
    swift_release();
    return v5;
  }
  else
  {
    _StringGuts.grow(_:)(40);
    v7._object = (void *)0x8000000101402410;
    v7._countAndFlagsBits = 0xD000000000000026;
    String.append(_:)(v7);
    sub_10000588C(&qword_101669B50);
    _print_unlocked<A, B>(_:_:)();
    uint64_t result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  return result;
}

uint64_t sub_1010AC410(uint64_t a1)
{
  return sub_1010AC560(a1, (uint64_t)&unk_10138BDD0, &qword_101669B48);
}

uint64_t sub_1010AC424(uint64_t a1)
{
  return sub_1010AC7C4(a1);
}

uint64_t sub_1010AC430(uint64_t a1)
{
  return sub_1010AC7C4(a1);
}

uint64_t sub_1010AC43C(uint64_t a1)
{
  return sub_1010AC6B0(a1);
}

uint64_t sub_1010AC448(uint64_t a1)
{
  return sub_1010AC6B0(a1);
}

uint64_t sub_1010AC454(uint64_t a1)
{
  uint64_t KeyPath = swift_getKeyPath();
  unint64_t v3 = sub_1010AD83C(KeyPath, a1);
  if ((v3 & 0x100000000) != 0)
  {
    _StringGuts.grow(_:)(40);
    v6._object = (void *)0x8000000101402410;
    v6._countAndFlagsBits = 0xD000000000000026;
    String.append(_:)(v6);
    sub_10000588C(&qword_101669BB0);
    _print_unlocked<A, B>(_:_:)();
    uint64_t result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  else
  {
    unint64_t v4 = v3;
    swift_release();
    return v4;
  }
  return result;
}

uint64_t sub_1010AC54C(uint64_t a1)
{
  return sub_1010AC560(a1, (uint64_t)&unk_10138BF88, &qword_101649650);
}

uint64_t sub_1010AC560(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t KeyPath = swift_getKeyPath();
  uint64_t v6 = sub_1010ACB18(KeyPath, a1);
  if (v7)
  {
    _StringGuts.grow(_:)(40);
    v10._object = (void *)0x8000000101402410;
    v10._countAndFlagsBits = 0xD000000000000026;
    String.append(_:)(v10);
    sub_10000588C(a3);
    _print_unlocked<A, B>(_:_:)();
    uint64_t result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  else
  {
    uint64_t v8 = v6;
    swift_release();
    return v8;
  }
  return result;
}

uint64_t sub_1010AC65C(uint64_t a1)
{
  return sub_1010AC7C4(a1);
}

uint64_t sub_1010AC668(uint64_t a1)
{
  return sub_1010AC7C4(a1);
}

uint64_t sub_1010AC674(uint64_t a1)
{
  return sub_1010AC7C4(a1);
}

uint64_t sub_1010AC680(uint64_t a1)
{
  return sub_1010AC7C4(a1);
}

uint64_t sub_1010AC68C(uint64_t a1)
{
  return sub_1010AC7C4(a1);
}

uint64_t sub_1010AC698(uint64_t a1)
{
  return sub_1010AC7C4(a1);
}

uint64_t sub_1010AC6A4(uint64_t a1)
{
  return sub_1010AC6B0(a1);
}

uint64_t sub_1010AC6B0(uint64_t a1)
{
  uint64_t KeyPath = swift_getKeyPath();
  char v3 = sub_1010AC8B8(KeyPath, a1);
  if (v3 == 2)
  {
    _StringGuts.grow(_:)(40);
    v6._object = (void *)0x8000000101402410;
    v6._countAndFlagsBits = 0xD000000000000026;
    String.append(_:)(v6);
    sub_10000588C(&qword_101669B40);
    _print_unlocked<A, B>(_:_:)();
    uint64_t result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  else
  {
    char v4 = v3;
    swift_release();
    return v4 & 1;
  }
  return result;
}

uint64_t sub_1010AC7AC(uint64_t a1)
{
  return sub_1010AC7C4(a1);
}

uint64_t sub_1010AC7B8(uint64_t a1)
{
  return sub_1010AC7C4(a1);
}

uint64_t sub_1010AC7C4(uint64_t a1)
{
  uint64_t KeyPath = swift_getKeyPath();
  sub_1010ACB18(KeyPath, a1);
  if ((v3 & 1) == 0) {
    return swift_release();
  }
  _StringGuts.grow(_:)(40);
  v5._object = (void *)0x8000000101402410;
  v5._countAndFlagsBits = 0xD000000000000026;
  String.append(_:)(v5);
  sub_10000588C(&qword_101669B28);
  _print_unlocked<A, B>(_:_:)();
  uint64_t result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_1010AC8B8(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = type metadata accessor for DefaultConfigurationLayer();
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  Swift::String v6 = (char *)&v18 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = sub_10000588C(&qword_101665FB8);
  __chkstk_darwin(v7 - 8);
  Swift::String v9 = (char *)&v18 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = *(void *)(a2 + 16);
  if (v10)
  {
    uint64_t v11 = a2 + ((*(unsigned __int8 *)(v4 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80));
    uint64_t v12 = *(void *)(v4 + 72);
    uint64_t v18 = a2;
    swift_bridgeObjectRetain();
    while (1)
    {
      sub_100946E74(v11, (uint64_t)v6);
      uint64_t v20[3] = v3;
      v20[4] = (uint64_t)&off_1015DC910;
      uint64_t v13 = sub_10001D958(v20);
      sub_100946E74((uint64_t)v6, (uint64_t)v13);
      swift_getAtKeyPath();
      int v14 = v19;
      _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)v20);
      if (v14 != 2) {
        break;
      }
      sub_100946ED8((uint64_t)v6);
      v11 += v12;
      if (!--v10)
      {
        uint64_t v15 = 1;
        goto LABEL_8;
      }
    }
    sub_1010ADFF4((uint64_t)v6, (uint64_t)v9);
    uint64_t v15 = 0;
  }
  else
  {
    swift_bridgeObjectRetain();
    uint64_t v15 = 1;
  }
LABEL_8:
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v4 + 56))(v9, v15, 1, v3);
  swift_bridgeObjectRelease();
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v4 + 48))(v9, 1, v3) == 1)
  {
    sub_10001DAB4((uint64_t)v9, &qword_101665FB8);
    return 2;
  }
  else
  {
    v21[3] = v3;
    v21[4] = (uint64_t)&off_1015DC910;
    uint64_t v17 = sub_10001D958(v21);
    sub_1010ADFF4((uint64_t)v9, (uint64_t)v17);
    swift_getAtKeyPath();
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)v21);
    return LOBYTE(v20[0]);
  }
}

uint64_t sub_1010ACB18(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = type metadata accessor for DefaultConfigurationLayer();
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  Swift::String v6 = (char *)v18 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = sub_10000588C(&qword_101665FB8);
  __chkstk_darwin(v7 - 8);
  Swift::String v9 = (char *)v18 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = *(void *)(a2 + 16);
  if (v10)
  {
    uint64_t v11 = a2 + ((*(unsigned __int8 *)(v4 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80));
    uint64_t v12 = *(void *)(v4 + 72);
    v18[1] = a2;
    swift_bridgeObjectRetain();
    while (1)
    {
      sub_100946E74(v11, (uint64_t)v6);
      uint64_t v20[3] = v3;
      v20[4] = (uint64_t)&off_1015DC910;
      uint64_t v13 = sub_10001D958(v20);
      sub_100946E74((uint64_t)v6, (uint64_t)v13);
      swift_getAtKeyPath();
      char v14 = v19;
      _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)v20);
      if ((v14 & 1) == 0) {
        break;
      }
      sub_100946ED8((uint64_t)v6);
      v11 += v12;
      if (!--v10)
      {
        uint64_t v15 = 1;
        goto LABEL_8;
      }
    }
    sub_1010ADFF4((uint64_t)v6, (uint64_t)v9);
    uint64_t v15 = 0;
  }
  else
  {
    swift_bridgeObjectRetain();
    uint64_t v15 = 1;
  }
LABEL_8:
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v4 + 56))(v9, v15, 1, v3);
  swift_bridgeObjectRelease();
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v4 + 48))(v9, 1, v3) == 1)
  {
    sub_10001DAB4((uint64_t)v9, &qword_101665FB8);
    return 0;
  }
  else
  {
    v21[3] = v3;
    v21[4] = (uint64_t)&off_1015DC910;
    uint64_t v17 = sub_10001D958(v21);
    sub_1010ADFF4((uint64_t)v9, (uint64_t)v17);
    swift_getAtKeyPath();
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)v21);
    return v20[0];
  }
}

uint64_t sub_1010ACD78(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = type metadata accessor for DefaultConfigurationLayer();
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  Swift::String v6 = (char *)v18 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = sub_10000588C(&qword_101665FB8);
  __chkstk_darwin(v7 - 8);
  Swift::String v9 = (char *)v18 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = *(void *)(a2 + 16);
  if (v10)
  {
    uint64_t v11 = a2 + ((*(unsigned __int8 *)(v4 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80));
    uint64_t v12 = *(void *)(v4 + 72);
    v18[0] = a2;
    swift_bridgeObjectRetain();
    while (1)
    {
      sub_100946E74(v11, (uint64_t)v6);
      v19[3] = v3;
      void v19[4] = (uint64_t)&off_1015DC910;
      uint64_t v13 = sub_10001D958(v19);
      sub_100946E74((uint64_t)v6, (uint64_t)v13);
      swift_getAtKeyPath();
      uint64_t v14 = v18[1];
      swift_bridgeObjectRelease();
      _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)v19);
      if (v14) {
        break;
      }
      sub_100946ED8((uint64_t)v6);
      v11 += v12;
      if (!--v10)
      {
        uint64_t v15 = 1;
        goto LABEL_8;
      }
    }
    sub_1010ADFF4((uint64_t)v6, (uint64_t)v9);
    uint64_t v15 = 0;
  }
  else
  {
    swift_bridgeObjectRetain();
    uint64_t v15 = 1;
  }
LABEL_8:
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v4 + 56))(v9, v15, 1, v3);
  swift_bridgeObjectRelease();
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v4 + 48))(v9, 1, v3) == 1)
  {
    sub_10001DAB4((uint64_t)v9, &qword_101665FB8);
    return 0;
  }
  else
  {
    uint64_t v20[3] = v3;
    v20[4] = (uint64_t)&off_1015DC910;
    uint64_t v17 = sub_10001D958(v20);
    sub_1010ADFF4((uint64_t)v9, (uint64_t)v17);
    swift_getAtKeyPath();
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)v20);
    return v19[0];
  }
}

uint64_t sub_1010ACFD8(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = type metadata accessor for DefaultConfigurationLayer();
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  Swift::String v6 = (char *)v18 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = sub_10000588C(&qword_101665FB8);
  __chkstk_darwin(v7 - 8);
  Swift::String v9 = (char *)v18 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = *(void *)(a2 + 16);
  if (v10)
  {
    uint64_t v11 = a2 + ((*(unsigned __int8 *)(v4 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80));
    uint64_t v12 = *(void *)(v4 + 72);
    v18[1] = a2;
    swift_bridgeObjectRetain();
    while (1)
    {
      sub_100946E74(v11, (uint64_t)v6);
      v19[3] = v3;
      void v19[4] = (uint64_t)&off_1015DC910;
      uint64_t v13 = sub_10001D958(v19);
      sub_100946E74((uint64_t)v6, (uint64_t)v13);
      swift_getAtKeyPath();
      uint64_t v14 = v18[3];
      swift_bridgeObjectRelease();
      _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)v19);
      if (v14) {
        break;
      }
      sub_100946ED8((uint64_t)v6);
      v11 += v12;
      if (!--v10)
      {
        uint64_t v15 = 1;
        goto LABEL_8;
      }
    }
    sub_1010ADFF4((uint64_t)v6, (uint64_t)v9);
    uint64_t v15 = 0;
  }
  else
  {
    swift_bridgeObjectRetain();
    uint64_t v15 = 1;
  }
LABEL_8:
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v4 + 56))(v9, v15, 1, v3);
  swift_bridgeObjectRelease();
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v4 + 48))(v9, 1, v3) == 1)
  {
    sub_10001DAB4((uint64_t)v9, &qword_101665FB8);
    return 0;
  }
  else
  {
    uint64_t v20[3] = v3;
    v20[4] = (uint64_t)&off_1015DC910;
    uint64_t v17 = sub_10001D958(v20);
    sub_1010ADFF4((uint64_t)v9, (uint64_t)v17);
    swift_getAtKeyPath();
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)v20);
    return v19[0];
  }
}

uint64_t sub_1010AD23C@<X0>(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  return sub_1010AD4D8(a1, &qword_101638CF0, (uint64_t (*)(void))&type metadata accessor for UUID, a2);
}

uint64_t sub_1010AD25C(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = type metadata accessor for DefaultConfigurationLayer();
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  Swift::String v6 = (char *)&v18 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = sub_10000588C(&qword_101665FB8);
  __chkstk_darwin(v7 - 8);
  Swift::String v9 = (char *)&v18 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = *(void *)(a2 + 16);
  if (v10)
  {
    uint64_t v11 = a2 + ((*(unsigned __int8 *)(v4 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80));
    uint64_t v12 = *(void *)(v4 + 72);
    uint64_t v18 = a2;
    swift_bridgeObjectRetain();
    while (1)
    {
      sub_100946E74(v11, (uint64_t)v6);
      uint64_t v20[3] = v3;
      v20[4] = (uint64_t)&off_1015DC910;
      uint64_t v13 = sub_10001D958(v20);
      sub_100946E74((uint64_t)v6, (uint64_t)v13);
      swift_getAtKeyPath();
      id v14 = v19;

      _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)v20);
      if (v14) {
        break;
      }
      sub_100946ED8((uint64_t)v6);
      v11 += v12;
      if (!--v10)
      {
        uint64_t v15 = 1;
        goto LABEL_8;
      }
    }
    sub_1010ADFF4((uint64_t)v6, (uint64_t)v9);
    uint64_t v15 = 0;
  }
  else
  {
    swift_bridgeObjectRetain();
    uint64_t v15 = 1;
  }
LABEL_8:
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v4 + 56))(v9, v15, 1, v3);
  swift_bridgeObjectRelease();
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v4 + 48))(v9, 1, v3) == 1)
  {
    sub_10001DAB4((uint64_t)v9, &qword_101665FB8);
    return 0;
  }
  else
  {
    v21[3] = v3;
    v21[4] = (uint64_t)&off_1015DC910;
    uint64_t v17 = sub_10001D958(v21);
    sub_1010ADFF4((uint64_t)v9, (uint64_t)v17);
    swift_getAtKeyPath();
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)v21);
    return v20[0];
  }
}

uint64_t sub_1010AD4B8@<X0>(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  return sub_1010AD4D8(a1, (uint64_t *)&unk_10163AC90, (uint64_t (*)(void))&type metadata accessor for Date, a2);
}

uint64_t sub_1010AD4D8@<X0>(uint64_t a1@<X1>, uint64_t *a2@<X2>, uint64_t (*a3)(void)@<X3>, uint64_t a4@<X8>)
{
  uint64_t v8 = sub_10000588C(a2);
  __chkstk_darwin(v8 - 8);
  uint64_t v10 = (char *)v30 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = type metadata accessor for DefaultConfigurationLayer();
  uint64_t v12 = *(void *)(v11 - 8);
  __chkstk_darwin(v11);
  id v14 = (char *)v30 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = sub_10000588C(&qword_101665FB8);
  __chkstk_darwin(v15 - 8);
  uint64_t v32 = (uint64_t)v30 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v17 = *(void *)(a1 + 16);
  if (v17)
  {
    uint64_t v18 = v12;
    uint64_t v19 = a1 + ((*(unsigned __int8 *)(v12 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v12 + 80));
    uint64_t v20 = a1;
    v30[0] = v18;
    uint64_t v21 = *(void *)(v18 + 72);
    v30[1] = v20;
    uint64_t v31 = a4;
    swift_bridgeObjectRetain();
    while (1)
    {
      sub_100946E74(v19, (uint64_t)v14);
      v33[3] = v11;
      v33[4] = (uint64_t)&off_1015DC910;
      unint64_t v22 = sub_10001D958(v33);
      sub_100946E74((uint64_t)v14, (uint64_t)v22);
      swift_getAtKeyPath();
      uint64_t v23 = a3(0);
      int v24 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(void *)(v23 - 8) + 48))(v10, 1, v23);
      sub_10001DAB4((uint64_t)v10, a2);
      _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)v33);
      if (v24 != 1) {
        break;
      }
      sub_100946ED8((uint64_t)v14);
      v19 += v21;
      if (!--v17)
      {
        uint64_t v25 = 1;
        a4 = v31;
        uint64_t v12 = v30[0];
        goto LABEL_7;
      }
    }
    uint64_t v26 = v32;
    sub_1010ADFF4((uint64_t)v14, v32);
    uint64_t v25 = 0;
    a4 = v31;
    uint64_t v12 = v30[0];
  }
  else
  {
    swift_bridgeObjectRetain();
    uint64_t v25 = 1;
LABEL_7:
    uint64_t v26 = v32;
  }
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v12 + 56))(v26, v25, 1, v11);
  swift_bridgeObjectRelease();
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v12 + 48))(v26, 1, v11) == 1)
  {
    sub_10001DAB4(v26, &qword_101665FB8);
    uint64_t v27 = a3(0);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v27 - 8) + 56))(a4, 1, 1, v27);
  }
  else
  {
    uint64_t v34[3] = v11;
    v34[4] = (uint64_t)&off_1015DC910;
    unint64_t v29 = sub_10001D958(v34);
    sub_1010ADFF4(v26, (uint64_t)v29);
    swift_getAtKeyPath();
    return _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)v34);
  }
}

unint64_t sub_1010AD83C(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = type metadata accessor for DefaultConfigurationLayer();
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  Swift::String v6 = (char *)&v20 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = sub_10000588C(&qword_101665FB8);
  __chkstk_darwin(v7 - 8);
  uint64_t v9 = (char *)&v20 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = *(void *)(a2 + 16);
  if (v10)
  {
    uint64_t v11 = a2 + ((*(unsigned __int8 *)(v4 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80));
    uint64_t v12 = *(void *)(v4 + 72);
    uint64_t v20 = a2;
    swift_bridgeObjectRetain();
    while (1)
    {
      sub_100946E74(v11, (uint64_t)v6);
      void v22[3] = v3;
      v22[4] = (uint64_t)&off_1015DC910;
      uint64_t v13 = sub_10001D958(v22);
      sub_100946E74((uint64_t)v6, (uint64_t)v13);
      swift_getAtKeyPath();
      char v14 = v21;
      _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)v22);
      if ((v14 & 1) == 0) {
        break;
      }
      sub_100946ED8((uint64_t)v6);
      v11 += v12;
      if (!--v10)
      {
        uint64_t v15 = 1;
        goto LABEL_8;
      }
    }
    sub_1010ADFF4((uint64_t)v6, (uint64_t)v9);
    uint64_t v15 = 0;
  }
  else
  {
    swift_bridgeObjectRetain();
    uint64_t v15 = 1;
  }
LABEL_8:
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v4 + 56))(v9, v15, 1, v3);
  swift_bridgeObjectRelease();
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v4 + 48))(v9, 1, v3) == 1)
  {
    sub_10001DAB4((uint64_t)v9, &qword_101665FB8);
    uint64_t v16 = 0;
    unsigned __int8 v17 = 1;
  }
  else
  {
    void v23[3] = v3;
    v23[4] = (uint64_t)&off_1015DC910;
    uint64_t v18 = sub_10001D958(v23);
    sub_1010ADFF4((uint64_t)v9, (uint64_t)v18);
    swift_getAtKeyPath();
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)v23);
    uint64_t v16 = LODWORD(v22[0]);
    unsigned __int8 v17 = BYTE4(v22[0]);
  }
  return v16 | ((unint64_t)v17 << 32);
}

uint64_t sub_1010ADAA8(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = 0x746C7561666564;
  uint64_t v3 = *(unsigned __int8 *)(a1 + 25);
  unint64_t v4 = 0xE700000000000000;
  uint64_t v5 = 0x746C7561666564;
  switch(v3)
  {
    case 1:
      unint64_t v4 = 0xE600000000000000;
      uint64_t v5 = 0x726576726573;
      break;
    case 2:
      unint64_t v4 = 0xE500000000000000;
      uint64_t v5 = 0x73656C6F72;
      break;
    case 3:
      uint64_t v5 = 0x6166654472657375;
      unint64_t v4 = 0xEC00000073746C75;
      break;
    case 4:
      uint64_t v5 = 0x5365636976726573;
      unint64_t v4 = 0xEF73676E69747465;
      break;
    default:
      break;
  }
  unint64_t v6 = 0xE700000000000000;
  switch(*(unsigned char *)(a2 + 25))
  {
    case 1:
      unint64_t v6 = 0xE600000000000000;
      if (v5 == 0x726576726573) {
        goto LABEL_13;
      }
      goto LABEL_16;
    case 2:
      unint64_t v6 = 0xE500000000000000;
      if (v5 != 0x73656C6F72) {
        goto LABEL_16;
      }
      goto LABEL_13;
    case 3:
      uint64_t v2 = 0x6166654472657375;
      unint64_t v6 = 0xEC00000073746C75;
      goto LABEL_12;
    case 4:
      unint64_t v6 = 0xEF73676E69747465;
      if (v5 != 0x5365636976726573) {
        goto LABEL_16;
      }
      goto LABEL_13;
    default:
LABEL_12:
      if (v5 != v2) {
        goto LABEL_16;
      }
LABEL_13:
      if (v4 == v6)
      {
        swift_bridgeObjectRelease_n();
        char v7 = 0;
      }
      else
      {
LABEL_16:
        char v8 = _stringCompareWithSmolCheck(_:_:expecting:)();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        char v7 = v8 ^ 1;
      }
      return v7 & 1;
  }
}

uint64_t sub_1010ADCA4(void *a1, uint64_t a2)
{
  uint64_t v4 = sub_10000588C(&qword_101669B80);
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  char v7 = (char *)v9 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10001CD44(a1, a1[3]);
  sub_1010B17C0();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  v9[1] = a2;
  sub_10000588C(&qword_101669B68);
  sub_1010B1814(&qword_101669B88, &qword_101669B90);
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v7, v4);
}

uint64_t sub_1010ADE2C()
{
  return 0x73726579616CLL;
}

uint64_t sub_1010ADE40@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  if (a1 == 0x73726579616CLL && a2 == 0xE600000000000000)
  {
    uint64_t result = swift_bridgeObjectRelease();
    char v7 = 0;
  }
  else
  {
    char v5 = _stringCompareWithSmolCheck(_:_:expecting:)();
    uint64_t result = swift_bridgeObjectRelease();
    char v7 = v5 ^ 1;
  }
  *a3 = v7 & 1;
  return result;
}

uint64_t sub_1010ADED0(uint64_t a1)
{
  unint64_t v2 = sub_1010B17C0();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1010ADF0C(uint64_t a1)
{
  unint64_t v2 = sub_1010B17C0();

  return CodingKey.debugDescription.getter(a1, v2);
}

void *sub_1010ADF48@<X0>(void *a1@<X0>, void *a2@<X8>)
{
  uint64_t result = sub_1010B1610(a1);
  if (!v2) {
    *a2 = result;
  }
  return result;
}

uint64_t sub_1010ADF74(void *a1)
{
  return sub_1010ADCA4(a1, *v1);
}

uint64_t sub_1010ADF90(uint64_t *a1, uint64_t *a2)
{
  return sub_100338690(*a1, *a2);
}

uint64_t sub_1010ADF9C@<X0>(void *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v3 = a1[3];
  uint64_t v4 = a1[4];
  sub_10001CD44(a1, v3);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(v4 + 360))(v3, v4);
  *a2 = result;
  return result;
}

uint64_t sub_1010ADFF4(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for DefaultConfigurationLayer();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_1010AE058@<X0>(void *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v3 = a1[3];
  uint64_t v4 = a1[4];
  sub_10001CD44(a1, v3);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(v4 + 1032))(v3, v4);
  *a2 = result;
  return result;
}

uint64_t sub_1010AE0B0@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = a1[3];
  uint64_t v4 = a1[4];
  sub_10001CD44(a1, v3);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(v4 + 520))(v3, v4);
  *(void *)a2 = result;
  *(unsigned char *)(a2 + 8) = v6 & 1;
  return result;
}

uint64_t sub_1010AE110@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = a1[3];
  uint64_t v4 = a1[4];
  sub_10001CD44(a1, v3);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(v4 + 512))(v3, v4);
  *(void *)a2 = result;
  *(unsigned char *)(a2 + 8) = v6 & 1;
  return result;
}

uint64_t sub_1010AE170@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = a1[3];
  uint64_t v4 = a1[4];
  sub_10001CD44(a1, v3);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(v4 + 504))(v3, v4);
  *(void *)a2 = result;
  *(unsigned char *)(a2 + 8) = v6 & 1;
  return result;
}

uint64_t sub_1010AE1D0@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = a1[3];
  uint64_t v4 = a1[4];
  sub_10001CD44(a1, v3);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(v4 + 496))(v3, v4);
  *(void *)a2 = result;
  *(unsigned char *)(a2 + 8) = v6 & 1;
  return result;
}

uint64_t sub_1010AE230@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = a1[3];
  uint64_t v4 = a1[4];
  sub_10001CD44(a1, v3);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(v4 + 728))(v3, v4);
  *(void *)a2 = result;
  *(unsigned char *)(a2 + 8) = v6 & 1;
  return result;
}

uint64_t sub_1010AE290@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = a1[3];
  uint64_t v4 = a1[4];
  sub_10001CD44(a1, v3);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(v4 + 720))(v3, v4);
  *(void *)a2 = result;
  *(unsigned char *)(a2 + 8) = v6 & 1;
  return result;
}

uint64_t sub_1010AE2F0@<X0>(void *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v3 = a1[3];
  uint64_t v4 = a1[4];
  sub_10001CD44(a1, v3);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(v4 + 392))(v3, v4);
  *a2 = result;
  return result;
}

uint64_t sub_1010AE348@<X0>(void *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v3 = a1[3];
  uint64_t v4 = a1[4];
  sub_10001CD44(a1, v3);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(v4 + 384))(v3, v4);
  *a2 = result;
  return result;
}

uint64_t sub_1010AE3A0@<X0>(void *a1@<X0>, unsigned char *a2@<X8>)
{
  uint64_t v3 = a1[3];
  uint64_t v4 = a1[4];
  sub_10001CD44(a1, v3);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(v4 + 56))(v3, v4);
  *a2 = result;
  return result;
}

uint64_t sub_1010AE3F8@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = a1[3];
  uint64_t v4 = a1[4];
  sub_10001CD44(a1, v3);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(v4 + 80))(v3, v4);
  *(void *)a2 = result;
  *(unsigned char *)(a2 + 8) = v6 & 1;
  return result;
}

uint64_t sub_1010AE458@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = a1[3];
  uint64_t v4 = a1[4];
  sub_10001CD44(a1, v3);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(v4 + 888))(v3, v4);
  *(void *)a2 = result;
  *(unsigned char *)(a2 + 8) = v6 & 1;
  return result;
}

uint64_t sub_1010AE4B8@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = a1[3];
  uint64_t v4 = a1[4];
  sub_10001CD44(a1, v3);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(v4 + 152))(v3, v4);
  *(void *)a2 = result;
  *(unsigned char *)(a2 + 8) = v6 & 1;
  return result;
}

uint64_t sub_1010AE518@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = a1[3];
  uint64_t v4 = a1[4];
  sub_10001CD44(a1, v3);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(v4 + 144))(v3, v4);
  *(void *)a2 = result;
  *(unsigned char *)(a2 + 8) = v6 & 1;
  return result;
}

uint64_t sub_1010AE578@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = a1[3];
  uint64_t v4 = a1[4];
  sub_10001CD44(a1, v3);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(v4 + 840))(v3, v4);
  *(void *)a2 = result;
  *(unsigned char *)(a2 + 8) = v6 & 1;
  return result;
}

uint64_t sub_1010AE5D8@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = a1[3];
  uint64_t v4 = a1[4];
  sub_10001CD44(a1, v3);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(v4 + 856))(v3, v4);
  *(void *)a2 = result;
  *(unsigned char *)(a2 + 8) = v6 & 1;
  return result;
}

uint64_t sub_1010AE638@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = a1[3];
  uint64_t v4 = a1[4];
  sub_10001CD44(a1, v3);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(v4 + 832))(v3, v4);
  *(void *)a2 = result;
  *(unsigned char *)(a2 + 8) = v6 & 1;
  return result;
}

uint64_t sub_1010AE698@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = a1[3];
  uint64_t v4 = a1[4];
  sub_10001CD44(a1, v3);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(v4 + 824))(v3, v4);
  *(void *)a2 = result;
  *(unsigned char *)(a2 + 8) = v6 & 1;
  return result;
}

uint64_t sub_1010AE6F8@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = a1[3];
  uint64_t v4 = a1[4];
  sub_10001CD44(a1, v3);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(v4 + 880))(v3, v4);
  *(void *)a2 = result;
  *(unsigned char *)(a2 + 8) = v6 & 1;
  return result;
}

uint64_t sub_1010AE758@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = a1[3];
  uint64_t v4 = a1[4];
  sub_10001CD44(a1, v3);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(v4 + 872))(v3, v4);
  *(void *)a2 = result;
  *(unsigned char *)(a2 + 8) = v6 & 1;
  return result;
}

uint64_t sub_1010AE7B8(uint64_t a1)
{
  return sub_1010ADAA8(a1, *(void *)(v1 + 16)) & 1;
}

uint64_t sub_1010AE7D8(unint64_t a1, unint64_t a2, unint64_t a3, unint64_t a4, uint64_t a5)
{
  uint64_t v76 = type metadata accessor for DefaultConfigurationLayer();
  uint64_t v10 = __chkstk_darwin(v76);
  unint64_t v80 = (unint64_t)&v73 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = __chkstk_darwin(v10);
  uint64_t v13 = __chkstk_darwin(v12);
  uint64_t v79 = (uint64_t)&v73 - v14;
  __chkstk_darwin(v13);
  uint64_t v78 = (uint64_t)&v73 - v16;
  uint64_t v18 = *(void *)(v17 + 72);
  if (!v18) {
    goto LABEL_150;
  }
  if (a2 - a1 == 0x8000000000000000 && v18 == -1)
  {
LABEL_151:
    __break(1u);
LABEL_152:
    __break(1u);
    goto LABEL_153;
  }
  int64_t v19 = a3 - a2;
  if (a3 - a2 == 0x8000000000000000 && v18 == -1) {
    goto LABEL_152;
  }
  uint64_t v20 = (uint64_t)(a2 - a1) / v18;
  unint64_t v84 = a1;
  unint64_t v83 = a4;
  uint64_t v21 = v19 / v18;
  if (v20 >= v19 / v18)
  {
    if (v21 < 0) {
      goto LABEL_153;
    }
    uint64_t v78 = v15;
    uint64_t v23 = v21 * v18;
    if (a4 < a2 || a2 + v23 <= a4)
    {
      swift_arrayInitWithTakeFrontToBack();
    }
    else if (a4 != a2)
    {
      swift_arrayInitWithTakeBackToFront();
    }
    unint64_t v46 = a4 + v23;
    unint64_t v82 = a4 + v23;
    unint64_t v84 = a2;
    unint64_t v75 = a1;
    if (v23 < 1 || a1 >= a2) {
      goto LABEL_147;
    }
    uint64_t v48 = *(void *)(a5 + 16);
    uint64_t v79 = -v18;
    uint64_t v49 = a5 + 32;
    unint64_t v74 = a4;
LABEL_89:
    uint64_t v50 = v78;
    uint64_t v51 = v79;
    sub_100946E74(v46 + v79, v78);
    unint64_t v81 = a2;
    unint64_t v52 = a2 + v51;
    sub_100946E74(a2 + v51, v80);
    uint64_t v77 = a3;
    if (!v48)
    {
      uint64_t v60 = 0;
      uint64_t v53 = 0;
      goto LABEL_133;
    }
    uint64_t v53 = 0;
    uint64_t v54 = *(unsigned __int8 *)(v50 + 25);
    while (1)
    {
      unint64_t v55 = 0xE700000000000000;
      uint64_t v56 = 0x746C7561666564;
      switch(*(unsigned char *)(v49 + v53))
      {
        case 1:
          unint64_t v55 = 0xE600000000000000;
          uint64_t v56 = 0x726576726573;
          break;
        case 2:
          unint64_t v55 = 0xE500000000000000;
          uint64_t v56 = 0x73656C6F72;
          break;
        case 3:
          uint64_t v56 = 0x6166654472657375;
          unint64_t v55 = 0xEC00000073746C75;
          break;
        case 4:
          uint64_t v56 = 0x5365636976726573;
          unint64_t v55 = 0xEF73676E69747465;
          break;
        default:
          break;
      }
      unint64_t v57 = 0xE700000000000000;
      uint64_t v58 = 0x746C7561666564;
      switch(v54)
      {
        case 1:
          unint64_t v57 = 0xE600000000000000;
          if (v56 == 0x726576726573) {
            goto LABEL_103;
          }
          goto LABEL_104;
        case 2:
          unint64_t v57 = 0xE500000000000000;
          uint64_t v58 = 0x73656C6F72;
          goto LABEL_102;
        case 3:
          unint64_t v57 = 0xEC00000073746C75;
          if (v56 != 0x6166654472657375) {
            goto LABEL_104;
          }
          goto LABEL_103;
        case 4:
          unint64_t v57 = 0xEF73676E69747465;
          if (v56 != 0x5365636976726573) {
            goto LABEL_104;
          }
          goto LABEL_103;
        default:
LABEL_102:
          if (v56 != v58) {
            goto LABEL_104;
          }
LABEL_103:
          if (v55 == v57)
          {
            swift_bridgeObjectRelease_n();
LABEL_111:
            uint64_t v60 = 0;
            uint64_t v61 = *(unsigned __int8 *)(v80 + 25);
            while (2)
            {
              unint64_t v62 = 0xE700000000000000;
              uint64_t v63 = 0x746C7561666564;
              switch(*(unsigned char *)(v49 + v60))
              {
                case 1:
                  unint64_t v62 = 0xE600000000000000;
                  uint64_t v63 = 0x726576726573;
                  break;
                case 2:
                  unint64_t v62 = 0xE500000000000000;
                  uint64_t v63 = 0x73656C6F72;
                  break;
                case 3:
                  uint64_t v63 = 0x6166654472657375;
                  unint64_t v62 = 0xEC00000073746C75;
                  break;
                case 4:
                  uint64_t v63 = 0x5365636976726573;
                  unint64_t v62 = 0xEF73676E69747465;
                  break;
                default:
                  break;
              }
              unint64_t v64 = 0xE700000000000000;
              uint64_t v65 = 0x746C7561666564;
              switch(v61)
              {
                case 1:
                  unint64_t v64 = 0xE600000000000000;
                  if (v63 != 0x726576726573) {
                    goto LABEL_125;
                  }
                  goto LABEL_124;
                case 2:
                  unint64_t v64 = 0xE500000000000000;
                  uint64_t v65 = 0x73656C6F72;
                  goto LABEL_123;
                case 3:
                  unint64_t v64 = 0xEC00000073746C75;
                  if (v63 != 0x6166654472657375) {
                    goto LABEL_125;
                  }
                  goto LABEL_124;
                case 4:
                  unint64_t v64 = 0xEF73676E69747465;
                  if (v63 != 0x5365636976726573) {
                    goto LABEL_125;
                  }
                  goto LABEL_124;
                default:
LABEL_123:
                  if (v63 != v65) {
                    goto LABEL_125;
                  }
LABEL_124:
                  if (v62 != v64)
                  {
LABEL_125:
                    char v66 = _stringCompareWithSmolCheck(_:_:expecting:)();
                    swift_bridgeObjectRelease();
                    swift_bridgeObjectRelease();
                    if (v66) {
                      goto LABEL_132;
                    }
                    uint64_t v67 = v60 + 1;
                    if (__OFADD__(v60, 1)) {
                      goto LABEL_149;
                    }
                    ++v60;
                    if (v67 == v48)
                    {
                      uint64_t v60 = 0;
                      goto LABEL_132;
                    }
                    continue;
                  }
                  swift_bridgeObjectRelease_n();
LABEL_132:
                  uint64_t v51 = v79;
LABEL_133:
                  unint64_t v68 = v77;
                  unint64_t v69 = v77 + v51;
                  sub_100946ED8(v80);
                  sub_100946ED8(v78);
                  if (v53 >= v60)
                  {
                    unint64_t v52 = v81;
                    unint64_t v71 = v82;
                    v82 += v51;
                    unint64_t v70 = v74;
                    if (v68 < v71 || v69 >= v71)
                    {
                      swift_arrayInitWithTakeFrontToBack();
                    }
                    else if (v68 != v71)
                    {
                      swift_arrayInitWithTakeBackToFront();
                    }
                  }
                  else
                  {
                    unint64_t v70 = v74;
                    if (v68 < v81 || v69 >= v81)
                    {
                      swift_arrayInitWithTakeFrontToBack();
                    }
                    else if (v68 != v81)
                    {
                      swift_arrayInitWithTakeBackToFront();
                    }
                    v84 += v79;
                  }
                  unint64_t v46 = v82;
                  if (v82 <= v70) {
                    goto LABEL_147;
                  }
                  a2 = v52;
                  a3 = v69;
                  if (v52 <= v75) {
                    goto LABEL_147;
                  }
                  break;
              }
              goto LABEL_89;
            }
          }
LABEL_104:
          char v59 = _stringCompareWithSmolCheck(_:_:expecting:)();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          if (v59) {
            goto LABEL_111;
          }
          if (v48 == ++v53)
          {
            uint64_t v53 = 0;
            goto LABEL_111;
          }
          break;
      }
    }
  }
  if (v20 < 0)
  {
LABEL_153:
    swift_bridgeObjectRelease();
    _fatalErrorMessage(_:_:file:line:flags:)();
    __break(1u);
    JUMPOUT(0x1010AF40CLL);
  }
  uint64_t v22 = v20 * v18;
  if (a4 < a1 || a1 + v22 <= a4)
  {
    swift_arrayInitWithTakeFrontToBack();
  }
  else if (a4 != a1)
  {
    swift_arrayInitWithTakeBackToFront();
  }
  unint64_t v80 = a4 + v22;
  unint64_t v82 = a4 + v22;
  if (v22 < 1 || a2 >= a3) {
    goto LABEL_147;
  }
  uint64_t v25 = *(void *)(a5 + 16);
  uint64_t v26 = a5 + 32;
  uint64_t v77 = v18;
LABEL_23:
  uint64_t v27 = v78;
  sub_100946E74(a2, v78);
  sub_100946E74(a4, v79);
  unint64_t v81 = a2;
  if (!v25)
  {
    uint64_t v35 = 0;
    uint64_t v28 = 0;
    goto LABEL_67;
  }
  uint64_t v28 = 0;
  uint64_t v29 = *(unsigned __int8 *)(v27 + 25);
  while (2)
  {
    unint64_t v30 = 0xE700000000000000;
    uint64_t v31 = 0x746C7561666564;
    switch(*(unsigned char *)(v26 + v28))
    {
      case 1:
        unint64_t v30 = 0xE600000000000000;
        uint64_t v31 = 0x726576726573;
        break;
      case 2:
        unint64_t v30 = 0xE500000000000000;
        uint64_t v31 = 0x73656C6F72;
        break;
      case 3:
        uint64_t v31 = 0x6166654472657375;
        unint64_t v30 = 0xEC00000073746C75;
        break;
      case 4:
        uint64_t v31 = 0x5365636976726573;
        unint64_t v30 = 0xEF73676E69747465;
        break;
      default:
        break;
    }
    unint64_t v32 = 0xE700000000000000;
    uint64_t v33 = 0x746C7561666564;
    switch(v29)
    {
      case 1:
        unint64_t v32 = 0xE600000000000000;
        if (v31 == 0x726576726573) {
          goto LABEL_37;
        }
        goto LABEL_38;
      case 2:
        unint64_t v32 = 0xE500000000000000;
        uint64_t v33 = 0x73656C6F72;
        goto LABEL_36;
      case 3:
        unint64_t v32 = 0xEC00000073746C75;
        if (v31 != 0x6166654472657375) {
          goto LABEL_38;
        }
        goto LABEL_37;
      case 4:
        unint64_t v32 = 0xEF73676E69747465;
        if (v31 != 0x5365636976726573) {
          goto LABEL_38;
        }
        goto LABEL_37;
      default:
LABEL_36:
        if (v31 != v33) {
          goto LABEL_38;
        }
LABEL_37:
        if (v30 != v32)
        {
LABEL_38:
          char v34 = _stringCompareWithSmolCheck(_:_:expecting:)();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          if (v34) {
            goto LABEL_45;
          }
          if (v25 == ++v28)
          {
            uint64_t v28 = 0;
            goto LABEL_45;
          }
          continue;
        }
        swift_bridgeObjectRelease_n();
LABEL_45:
        uint64_t v35 = 0;
        uint64_t v36 = *(unsigned __int8 *)(v79 + 25);
        while (2)
        {
          unint64_t v37 = 0xE700000000000000;
          uint64_t v38 = 0x746C7561666564;
          switch(*(unsigned char *)(v26 + v35))
          {
            case 1:
              unint64_t v37 = 0xE600000000000000;
              uint64_t v38 = 0x726576726573;
              break;
            case 2:
              unint64_t v37 = 0xE500000000000000;
              uint64_t v38 = 0x73656C6F72;
              break;
            case 3:
              uint64_t v38 = 0x6166654472657375;
              unint64_t v37 = 0xEC00000073746C75;
              break;
            case 4:
              uint64_t v38 = 0x5365636976726573;
              unint64_t v37 = 0xEF73676E69747465;
              break;
            default:
              break;
          }
          unint64_t v39 = 0xE700000000000000;
          uint64_t v40 = 0x746C7561666564;
          switch(v36)
          {
            case 1:
              unint64_t v39 = 0xE600000000000000;
              if (v38 != 0x726576726573) {
                goto LABEL_59;
              }
              goto LABEL_58;
            case 2:
              unint64_t v39 = 0xE500000000000000;
              uint64_t v40 = 0x73656C6F72;
              goto LABEL_57;
            case 3:
              unint64_t v39 = 0xEC00000073746C75;
              if (v38 != 0x6166654472657375) {
                goto LABEL_59;
              }
              goto LABEL_58;
            case 4:
              unint64_t v39 = 0xEF73676E69747465;
              if (v38 != 0x5365636976726573) {
                goto LABEL_59;
              }
              goto LABEL_58;
            default:
LABEL_57:
              if (v38 != v40) {
                goto LABEL_59;
              }
LABEL_58:
              if (v37 != v39)
              {
LABEL_59:
                char v41 = _stringCompareWithSmolCheck(_:_:expecting:)();
                swift_bridgeObjectRelease();
                swift_bridgeObjectRelease();
                if (v41) {
                  goto LABEL_66;
                }
                uint64_t v42 = v35 + 1;
                if (__OFADD__(v35, 1))
                {
                  __break(1u);
LABEL_149:
                  __break(1u);
LABEL_150:
                  __break(1u);
                  goto LABEL_151;
                }
                ++v35;
                if (v42 == v25)
                {
                  uint64_t v35 = 0;
                  goto LABEL_66;
                }
                continue;
              }
              swift_bridgeObjectRelease_n();
LABEL_66:
              uint64_t v18 = v77;
LABEL_67:
              sub_100946ED8(v79);
              sub_100946ED8(v78);
              unint64_t v43 = v84;
              if (v28 >= v35)
              {
                unint64_t v45 = v83 + v18;
                if (v84 < v83 || v84 >= v45)
                {
                  swift_arrayInitWithTakeFrontToBack();
                }
                else if (v84 != v83)
                {
                  swift_arrayInitWithTakeBackToFront();
                }
                unint64_t v83 = v45;
                unint64_t v44 = v81;
              }
              else
              {
                unint64_t v44 = v81 + v18;
                if (v84 < v81 || v84 >= v44)
                {
                  swift_arrayInitWithTakeFrontToBack();
                }
                else if (v84 == v81)
                {
                  unint64_t v43 = v81;
                }
                else
                {
                  swift_arrayInitWithTakeBackToFront();
                }
              }
              unint64_t v84 = v43 + v18;
              a4 = v83;
              if (v83 < v80)
              {
                a2 = v44;
                if (v44 < a3) {
                  goto LABEL_23;
                }
              }
LABEL_147:
              sub_100B72CD4(&v84, &v83, (uint64_t *)&v82);
              return 1;
          }
        }
    }
  }
}

uint64_t sub_1010AF4AC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4, uint64_t a5)
{
  unint64_t v55 = a4;
  uint64_t v49 = a1;
  uint64_t v48 = type metadata accessor for DefaultConfigurationLayer();
  uint64_t v8 = __chkstk_darwin(v48);
  uint64_t v52 = (uint64_t)&v45 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = __chkstk_darwin(v8);
  uint64_t v56 = (uint64_t)&v45 - v11;
  uint64_t result = __chkstk_darwin(v10);
  uint64_t v15 = (char *)&v45 - v14;
  uint64_t v46 = a2;
  if (a3 != a2)
  {
    uint64_t v16 = *(void *)(a5 + 16);
    uint64_t v17 = *(void *)(v13 + 72);
    uint64_t v50 = (char *)&v45 - v14;
    uint64_t v51 = v17;
    uint64_t v18 = a5 + 32;
LABEL_5:
    uint64_t v47 = a3;
    uint64_t v19 = a3;
LABEL_8:
    uint64_t v20 = v19 - 1;
    uint64_t v21 = *v55;
    uint64_t v22 = v51;
    uint64_t v53 = v51 * v19;
    sub_100946E74(v21 + v51 * v19, (uint64_t)v15);
    uint64_t v23 = v22 * v20;
    sub_100946E74(v21 + v23, v56);
    uint64_t v54 = v20;
    if (!v16)
    {
      uint64_t v31 = 0;
      uint64_t v24 = 0;
      goto LABEL_52;
    }
    uint64_t v24 = 0;
    uint64_t v25 = v15[25];
    while (1)
    {
      unint64_t v26 = 0xE700000000000000;
      uint64_t v27 = 0x746C7561666564;
      switch(*(unsigned char *)(v18 + v24))
      {
        case 1:
          unint64_t v26 = 0xE600000000000000;
          uint64_t v27 = 0x726576726573;
          break;
        case 2:
          unint64_t v26 = 0xE500000000000000;
          uint64_t v27 = 0x73656C6F72;
          break;
        case 3:
          uint64_t v27 = 0x6166654472657375;
          unint64_t v26 = 0xEC00000073746C75;
          break;
        case 4:
          uint64_t v27 = 0x5365636976726573;
          unint64_t v26 = 0xEF73676E69747465;
          break;
        default:
          break;
      }
      unint64_t v28 = 0xE700000000000000;
      uint64_t v29 = 0x746C7561666564;
      switch(v25)
      {
        case 1:
          unint64_t v28 = 0xE600000000000000;
          if (v27 == 0x726576726573) {
            goto LABEL_22;
          }
          goto LABEL_23;
        case 2:
          unint64_t v28 = 0xE500000000000000;
          if (v27 != 0x73656C6F72) {
            goto LABEL_23;
          }
          goto LABEL_22;
        case 3:
          uint64_t v29 = 0x6166654472657375;
          unint64_t v28 = 0xEC00000073746C75;
          goto LABEL_21;
        case 4:
          unint64_t v28 = 0xEF73676E69747465;
          if (v27 != 0x5365636976726573) {
            goto LABEL_23;
          }
          goto LABEL_22;
        default:
LABEL_21:
          if (v27 != v29) {
            goto LABEL_23;
          }
LABEL_22:
          if (v26 == v28)
          {
            swift_bridgeObjectRelease_n();
LABEL_30:
            uint64_t v31 = 0;
            uint64_t v32 = *(unsigned __int8 *)(v56 + 25);
            while (2)
            {
              unint64_t v33 = 0xE700000000000000;
              uint64_t v34 = 0x746C7561666564;
              switch(*(unsigned char *)(v18 + v31))
              {
                case 1:
                  unint64_t v33 = 0xE600000000000000;
                  uint64_t v34 = 0x726576726573;
                  break;
                case 2:
                  unint64_t v33 = 0xE500000000000000;
                  uint64_t v34 = 0x73656C6F72;
                  break;
                case 3:
                  uint64_t v34 = 0x6166654472657375;
                  unint64_t v33 = 0xEC00000073746C75;
                  break;
                case 4:
                  uint64_t v34 = 0x5365636976726573;
                  unint64_t v33 = 0xEF73676E69747465;
                  break;
                default:
                  break;
              }
              unint64_t v35 = 0xE700000000000000;
              uint64_t v36 = 0x746C7561666564;
              switch(v32)
              {
                case 1:
                  unint64_t v35 = 0xE600000000000000;
                  if (v34 != 0x726576726573) {
                    goto LABEL_44;
                  }
                  goto LABEL_43;
                case 2:
                  unint64_t v35 = 0xE500000000000000;
                  if (v34 != 0x73656C6F72) {
                    goto LABEL_44;
                  }
                  goto LABEL_43;
                case 3:
                  uint64_t v36 = 0x6166654472657375;
                  unint64_t v35 = 0xEC00000073746C75;
                  goto LABEL_42;
                case 4:
                  unint64_t v35 = 0xEF73676E69747465;
                  if (v34 != 0x5365636976726573) {
                    goto LABEL_44;
                  }
                  goto LABEL_43;
                default:
LABEL_42:
                  if (v34 != v36) {
                    goto LABEL_44;
                  }
LABEL_43:
                  if (v33 != v35)
                  {
LABEL_44:
                    char v37 = _stringCompareWithSmolCheck(_:_:expecting:)();
                    swift_bridgeObjectRelease();
                    swift_bridgeObjectRelease();
                    if (v37) {
                      goto LABEL_51;
                    }
                    uint64_t v38 = v31 + 1;
                    if (__OFADD__(v31, 1))
                    {
                      __break(1u);
                      goto LABEL_58;
                    }
                    ++v31;
                    if (v38 == v16)
                    {
                      uint64_t v31 = 0;
                      goto LABEL_51;
                    }
                    continue;
                  }
                  swift_bridgeObjectRelease_n();
LABEL_51:
                  uint64_t v15 = v50;
LABEL_52:
                  sub_100946ED8(v56);
                  uint64_t result = sub_100946ED8((uint64_t)v15);
                  if (v24 < v31)
                  {
                    uint64_t v39 = *v55;
                    if (!*v55)
                    {
LABEL_58:
                      __break(1u);
                      JUMPOUT(0x1010AFA68);
                    }
                    uint64_t v40 = v53;
                    unint64_t v41 = v39 + v53;
                    uint64_t v42 = v39 + v23;
                    sub_1010ADFF4(v39 + v53, v52);
                    BOOL v43 = v40 < v23;
                    uint64_t v44 = v54;
                    if (v43 || v41 >= v42 + v51) {
                      swift_arrayInitWithTakeFrontToBack();
                    }
                    uint64_t result = sub_1010ADFF4(v52, v42);
                    uint64_t v19 = v44;
                    uint64_t v15 = v50;
                    if (v44 != v49) {
                      goto LABEL_8;
                    }
                  }
                  a3 = v47 + 1;
                  if (v47 + 1 != v46) {
                    goto LABEL_5;
                  }
                  return result;
              }
            }
          }
LABEL_23:
          char v30 = _stringCompareWithSmolCheck(_:_:expecting:)();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          if (v30) {
            goto LABEL_30;
          }
          if (v16 == ++v24)
          {
            uint64_t v24 = 0;
            goto LABEL_30;
          }
          break;
      }
    }
  }
  return result;
}

uint64_t sub_1010AFAB8(uint64_t *a1, uint64_t a2)
{
  uint64_t v199 = type metadata accessor for DefaultConfigurationLayer();
  uint64_t v196 = *(void *)(v199 - 8);
  uint64_t v5 = __chkstk_darwin(v199);
  uint64_t v193 = (uint64_t)&v186 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = __chkstk_darwin(v5);
  uint64_t v206 = (uint64_t)&v186 - v8;
  uint64_t v9 = __chkstk_darwin(v7);
  uint64_t v208 = (uint64_t)&v186 - v10;
  uint64_t v11 = __chkstk_darwin(v9);
  long long v203 = (char *)&v186 - v12;
  uint64_t v13 = __chkstk_darwin(v11);
  uint64_t v198 = (uint64_t)&v186 - v14;
  uint64_t v15 = __chkstk_darwin(v13);
  uint64_t v17 = (char *)&v186 - v16;
  uint64_t v18 = __chkstk_darwin(v15);
  uint64_t v190 = (uint64_t)&v186 - v19;
  __chkstk_darwin(v18);
  uint64_t v21 = (char *)&v186 - v20;
  long long v207 = a1;
  Swift::Int v22 = a1[1];
  swift_bridgeObjectRetain_n();
  Swift::Int v189 = _minimumMergeRunLength(_:)(v22);
  if (v189 >= v22)
  {
    if (v22 < 0) {
      goto LABEL_286;
    }
    if (v22)
    {
      swift_bridgeObjectRetain();
      sub_1010AF4AC(0, v22, 1, v207, a2);
    }
    return swift_bridgeObjectRelease_n();
  }
  else
  {
    if (v22 >= 0) {
      uint64_t v23 = v22;
    }
    else {
      uint64_t v23 = v22 + 1;
    }
    if (v22 < -1) {
      goto LABEL_294;
    }
    uint64_t v197 = a2;
    uint64_t v194 = v17;
    uint64_t v200 = v2;
    if (v22 >= 2)
    {
      uint64_t v24 = v22;
      uint64_t v25 = v23 >> 1;
      uint64_t v26 = static Array._allocateBufferUninitialized(minimumCapacity:)();
      *(void *)(v26 + 16) = v25;
      uint64_t v27 = *(unsigned __int8 *)(v196 + 80);
      uint64_t v187 = (void *)v26;
      unint64_t v195 = v26 + ((v27 + 32) & ~v27);
LABEL_14:
      uint64_t v30 = 0;
      uint64_t v209 = a2 + 32;
      uint64_t v29 = (char *)_swiftEmptyArrayStorage;
      uint64_t v188 = v21;
      uint64_t v31 = v24;
      while (1)
      {
        uint64_t v32 = v30 + 1;
        long long v201 = v29;
        uint64_t v202 = v30;
        uint64_t v33 = v31;
        if (v30 + 1 >= v31) {
          goto LABEL_194;
        }
        uint64_t v34 = *v207;
        unint64_t v35 = (char *)(v30 + 1);
        uint64_t v36 = *v207 + *(void *)(v196 + 72) * v32;
        uint64_t v37 = *(void *)(v196 + 72);
        sub_100946E74(v36, (uint64_t)v21);
        uint64_t v204 = v34;
        sub_100946E74(v34 + v37 * v30, v190);
        uint64_t v38 = v21;
        uint64_t v39 = *(void *)(a2 + 16);
        uint64_t v191 = v33;
        uint64_t v40 = 0;
        if (!v39)
        {
          uint64_t v192 = 0;
          goto LABEL_62;
        }
        uint64_t v41 = v38[25];
        while (2)
        {
          unint64_t v42 = 0xE700000000000000;
          uint64_t v43 = 0x746C7561666564;
          switch(*(unsigned char *)(v209 + v40))
          {
            case 1:
              unint64_t v42 = 0xE600000000000000;
              uint64_t v43 = 0x726576726573;
              break;
            case 2:
              unint64_t v42 = 0xE500000000000000;
              uint64_t v43 = 0x73656C6F72;
              break;
            case 3:
              uint64_t v43 = 0x6166654472657375;
              unint64_t v42 = 0xEC00000073746C75;
              break;
            case 4:
              uint64_t v43 = 0x5365636976726573;
              unint64_t v42 = 0xEF73676E69747465;
              break;
            default:
              break;
          }
          unint64_t v44 = 0xE700000000000000;
          uint64_t v45 = 0x746C7561666564;
          switch(v41)
          {
            case 1:
              unint64_t v44 = 0xE600000000000000;
              if (v43 == 0x726576726573) {
                goto LABEL_30;
              }
              goto LABEL_31;
            case 2:
              unint64_t v44 = 0xE500000000000000;
              uint64_t v45 = 0x73656C6F72;
              goto LABEL_29;
            case 3:
              unint64_t v44 = 0xEC00000073746C75;
              if (v43 != 0x6166654472657375) {
                goto LABEL_31;
              }
              goto LABEL_30;
            case 4:
              unint64_t v44 = 0xEF73676E69747465;
              if (v43 != 0x5365636976726573) {
                goto LABEL_31;
              }
              goto LABEL_30;
            default:
LABEL_29:
              if (v43 != v45) {
                goto LABEL_31;
              }
LABEL_30:
              if (v42 == v44)
              {
                uint64_t v192 = v40;
                swift_bridgeObjectRelease_n();
                goto LABEL_40;
              }
LABEL_31:
              char v46 = _stringCompareWithSmolCheck(_:_:expecting:)();
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              if ((v46 & 1) == 0)
              {
                if (v39 == ++v40)
                {
                  uint64_t v192 = 0;
                  goto LABEL_40;
                }
                continue;
              }
              uint64_t v192 = v40;
LABEL_40:
              uint64_t v40 = 0;
              uint64_t v47 = *(unsigned __int8 *)(v190 + 25);
              while (2)
              {
                unint64_t v48 = 0xE700000000000000;
                uint64_t v49 = 0x746C7561666564;
                switch(*(unsigned char *)(v209 + v40))
                {
                  case 1:
                    unint64_t v48 = 0xE600000000000000;
                    uint64_t v49 = 0x726576726573;
                    break;
                  case 2:
                    unint64_t v48 = 0xE500000000000000;
                    uint64_t v49 = 0x73656C6F72;
                    break;
                  case 3:
                    uint64_t v49 = 0x6166654472657375;
                    unint64_t v48 = 0xEC00000073746C75;
                    break;
                  case 4:
                    uint64_t v49 = 0x5365636976726573;
                    unint64_t v48 = 0xEF73676E69747465;
                    break;
                  default:
                    break;
                }
                unint64_t v50 = 0xE700000000000000;
                uint64_t v51 = 0x746C7561666564;
                switch(v47)
                {
                  case 1:
                    unint64_t v50 = 0xE600000000000000;
                    if (v49 != 0x726576726573) {
                      goto LABEL_54;
                    }
                    goto LABEL_53;
                  case 2:
                    unint64_t v50 = 0xE500000000000000;
                    uint64_t v51 = 0x73656C6F72;
                    goto LABEL_52;
                  case 3:
                    unint64_t v50 = 0xEC00000073746C75;
                    if (v49 != 0x6166654472657375) {
                      goto LABEL_54;
                    }
                    goto LABEL_53;
                  case 4:
                    unint64_t v50 = 0xEF73676E69747465;
                    if (v49 != 0x5365636976726573) {
                      goto LABEL_54;
                    }
                    goto LABEL_53;
                  default:
LABEL_52:
                    if (v49 != v51) {
                      goto LABEL_54;
                    }
LABEL_53:
                    if (v48 != v50)
                    {
LABEL_54:
                      char v52 = _stringCompareWithSmolCheck(_:_:expecting:)();
                      swift_bridgeObjectRelease();
                      swift_bridgeObjectRelease();
                      if (v52) {
                        goto LABEL_61;
                      }
                      uint64_t v53 = v40 + 1;
                      if (__OFADD__(v40, 1)) {
                        goto LABEL_278;
                      }
                      ++v40;
                      if (v53 == v39)
                      {
                        uint64_t v40 = 0;
                        goto LABEL_61;
                      }
                      continue;
                    }
                    swift_bridgeObjectRelease_n();
LABEL_61:
                    uint64_t v33 = v191;
LABEL_62:
                    sub_100946ED8(v190);
                    sub_100946ED8((uint64_t)v188);
                    uint64_t v54 = (char *)(v202 + 2);
                    if (v202 + 2 >= v33) {
                      goto LABEL_112;
                    }
                    unint64_t v55 = v35;
LABEL_64:
                    uint64_t v56 = v204;
                    long long v205 = v54;
                    uint64_t v57 = (uint64_t)v194;
                    sub_100946E74(v204 + (void)v54 * v37, (uint64_t)v194);
                    sub_100946E74(v56 + (void)v55 * v37, v198);
                    if (!v39)
                    {
                      uint64_t v65 = 0;
                      uint64_t v58 = 0;
                      goto LABEL_108;
                    }
                    uint64_t v58 = 0;
                    uint64_t v59 = *(unsigned __int8 *)(v57 + 25);
                    while (2)
                    {
                      unint64_t v60 = 0xE700000000000000;
                      uint64_t v61 = 0x746C7561666564;
                      switch(*(unsigned char *)(v209 + v58))
                      {
                        case 1:
                          unint64_t v60 = 0xE600000000000000;
                          uint64_t v61 = 0x726576726573;
                          break;
                        case 2:
                          unint64_t v60 = 0xE500000000000000;
                          uint64_t v61 = 0x73656C6F72;
                          break;
                        case 3:
                          uint64_t v61 = 0x6166654472657375;
                          unint64_t v60 = 0xEC00000073746C75;
                          break;
                        case 4:
                          uint64_t v61 = 0x5365636976726573;
                          unint64_t v60 = 0xEF73676E69747465;
                          break;
                        default:
                          break;
                      }
                      unint64_t v62 = 0xE700000000000000;
                      uint64_t v63 = 0x746C7561666564;
                      switch(v59)
                      {
                        case 1:
                          unint64_t v62 = 0xE600000000000000;
                          if (v61 == 0x726576726573) {
                            goto LABEL_78;
                          }
                          goto LABEL_79;
                        case 2:
                          unint64_t v62 = 0xE500000000000000;
                          uint64_t v63 = 0x73656C6F72;
                          goto LABEL_77;
                        case 3:
                          unint64_t v62 = 0xEC00000073746C75;
                          if (v61 != 0x6166654472657375) {
                            goto LABEL_79;
                          }
                          goto LABEL_78;
                        case 4:
                          unint64_t v62 = 0xEF73676E69747465;
                          if (v61 != 0x5365636976726573) {
                            goto LABEL_79;
                          }
                          goto LABEL_78;
                        default:
LABEL_77:
                          if (v61 != v63) {
                            goto LABEL_79;
                          }
LABEL_78:
                          if (v60 != v62)
                          {
LABEL_79:
                            char v64 = _stringCompareWithSmolCheck(_:_:expecting:)();
                            swift_bridgeObjectRelease();
                            swift_bridgeObjectRelease();
                            if (v64) {
                              goto LABEL_86;
                            }
                            if (v39 == ++v58)
                            {
                              uint64_t v58 = 0;
                              goto LABEL_86;
                            }
                            continue;
                          }
                          swift_bridgeObjectRelease_n();
LABEL_86:
                          uint64_t v65 = 0;
                          uint64_t v66 = *(unsigned __int8 *)(v198 + 25);
                          while (2)
                          {
                            unint64_t v67 = 0xE700000000000000;
                            uint64_t v68 = 0x746C7561666564;
                            switch(*(unsigned char *)(v209 + v65))
                            {
                              case 1:
                                unint64_t v67 = 0xE600000000000000;
                                uint64_t v68 = 0x726576726573;
                                break;
                              case 2:
                                unint64_t v67 = 0xE500000000000000;
                                uint64_t v68 = 0x73656C6F72;
                                break;
                              case 3:
                                uint64_t v68 = 0x6166654472657375;
                                unint64_t v67 = 0xEC00000073746C75;
                                break;
                              case 4:
                                uint64_t v68 = 0x5365636976726573;
                                unint64_t v67 = 0xEF73676E69747465;
                                break;
                              default:
                                break;
                            }
                            unint64_t v69 = 0xE700000000000000;
                            uint64_t v70 = 0x746C7561666564;
                            switch(v66)
                            {
                              case 1:
                                unint64_t v69 = 0xE600000000000000;
                                if (v68 != 0x726576726573) {
                                  goto LABEL_100;
                                }
                                goto LABEL_99;
                              case 2:
                                unint64_t v69 = 0xE500000000000000;
                                uint64_t v70 = 0x73656C6F72;
                                goto LABEL_98;
                              case 3:
                                unint64_t v69 = 0xEC00000073746C75;
                                if (v68 != 0x6166654472657375) {
                                  goto LABEL_100;
                                }
                                goto LABEL_99;
                              case 4:
                                unint64_t v69 = 0xEF73676E69747465;
                                if (v68 != 0x5365636976726573) {
                                  goto LABEL_100;
                                }
                                goto LABEL_99;
                              default:
LABEL_98:
                                if (v68 != v70) {
                                  goto LABEL_100;
                                }
LABEL_99:
                                if (v67 != v69)
                                {
LABEL_100:
                                  char v71 = _stringCompareWithSmolCheck(_:_:expecting:)();
                                  swift_bridgeObjectRelease();
                                  swift_bridgeObjectRelease();
                                  if (v71) {
                                    goto LABEL_107;
                                  }
                                  uint64_t v72 = v65 + 1;
                                  if (__OFADD__(v65, 1))
                                  {
LABEL_263:
                                    __break(1u);
LABEL_264:
                                    __break(1u);
LABEL_265:
                                    __break(1u);
LABEL_266:
                                    __break(1u);
LABEL_267:
                                    __break(1u);
LABEL_268:
                                    __break(1u);
LABEL_269:
                                    __break(1u);
LABEL_270:
                                    __break(1u);
LABEL_271:
                                    __break(1u);
LABEL_272:
                                    __break(1u);
LABEL_273:
                                    __break(1u);
LABEL_274:
                                    __break(1u);
LABEL_275:
                                    __break(1u);
LABEL_276:
                                    __break(1u);
LABEL_277:
                                    __break(1u);
LABEL_278:
                                    __break(1u);
LABEL_279:
                                    __break(1u);
LABEL_280:
                                    __break(1u);
LABEL_281:
                                    __break(1u);
LABEL_282:
                                    __break(1u);
LABEL_283:
                                    __break(1u);
LABEL_284:
                                    __break(1u);
LABEL_285:
                                    __break(1u);
LABEL_286:
                                    __break(1u);
LABEL_287:
                                    __break(1u);
LABEL_288:
                                    __break(1u);
LABEL_289:
                                    __break(1u);
LABEL_290:
                                    swift_bridgeObjectRelease_n();
                                    __break(1u);
LABEL_291:
                                    swift_bridgeObjectRelease_n();
                                    __break(1u);
LABEL_292:
                                    swift_bridgeObjectRelease_n();
                                    __break(1u);
LABEL_293:
                                    swift_bridgeObjectRelease_n();
                                    __break(1u);
LABEL_294:
                                    swift_bridgeObjectRelease_n();
                                    _assertionFailure(_:_:file:line:flags:)();
                                    __break(1u);
                                    JUMPOUT(0x1010B10E4);
                                  }
                                  ++v65;
                                  if (v72 == v39)
                                  {
                                    uint64_t v65 = 0;
                                    goto LABEL_107;
                                  }
                                  continue;
                                }
                                swift_bridgeObjectRelease_n();
LABEL_107:
                                uint64_t v33 = v191;
LABEL_108:
                                BOOL v73 = v192 < v40;
                                sub_100946ED8(v198);
                                sub_100946ED8((uint64_t)v194);
                                if (v73 != v58 >= v65)
                                {
                                  unint64_t v55 = v205;
                                  uint64_t v54 = v205 + 1;
                                  uint64_t v29 = v201;
                                  if (v205 + 1 == (char *)v33)
                                  {
                                    uint64_t v54 = (char *)v33;
                                    goto LABEL_112;
                                  }
                                  goto LABEL_64;
                                }
                                uint64_t v29 = v201;
                                uint64_t v54 = v205;
LABEL_112:
                                uint64_t v74 = v197;
                                Swift::Int v75 = v189;
                                if (v192 >= v40)
                                {
                                  uint64_t v32 = (uint64_t)v54;
                                  uint64_t v30 = v202;
                                  if ((uint64_t)v54 >= v33) {
                                    goto LABEL_194;
                                  }
                                }
                                else
                                {
                                  uint64_t v30 = v202;
                                  if ((uint64_t)v54 < v202) {
                                    goto LABEL_289;
                                  }
                                  if (v202 >= (uint64_t)v54)
                                  {
                                    uint64_t v32 = (uint64_t)v54;
                                    if ((uint64_t)v54 >= v33) {
                                      goto LABEL_194;
                                    }
                                  }
                                  else
                                  {
                                    uint64_t v76 = 0;
                                    uint64_t v77 = v37 * (void)(v54 - 1);
                                    uint64_t v78 = (void)v54 * v37;
                                    uint64_t v79 = (char *)v202;
                                    uint64_t v80 = v202 * v37;
                                    long long v205 = v54;
                                    do
                                    {
                                      if (v79 != &v54[v76 - 1])
                                      {
                                        uint64_t v82 = v37;
                                        uint64_t v83 = v204;
                                        if (!v204) {
                                          goto LABEL_292;
                                        }
                                        unint64_t v84 = v204 + v80;
                                        uint64_t v192 = v204 + v77;
                                        sub_1010ADFF4(v204 + v80, v193);
                                        if (v80 < v77 || v84 >= v83 + v78)
                                        {
                                          uint64_t v81 = v192;
                                          swift_arrayInitWithTakeFrontToBack();
                                        }
                                        else
                                        {
                                          uint64_t v81 = v192;
                                          if (v80 != v77) {
                                            swift_arrayInitWithTakeBackToFront();
                                          }
                                        }
                                        sub_1010ADFF4(v193, v81);
                                        uint64_t v37 = v82;
                                        uint64_t v54 = v205;
                                      }
                                      ++v79;
                                      --v76;
                                      v77 -= v37;
                                      v78 -= v37;
                                      v80 += v37;
                                    }
                                    while ((uint64_t)v79 < (uint64_t)&v54[v76]);
                                    uint64_t v32 = (uint64_t)v54;
                                    uint64_t v74 = v197;
                                    uint64_t v29 = v201;
                                    Swift::Int v75 = v189;
                                    uint64_t v33 = v191;
                                    if ((uint64_t)v54 >= v191) {
                                      goto LABEL_194;
                                    }
                                  }
                                }
                                if (__OFSUB__(v32, v30)) {
                                  goto LABEL_285;
                                }
                                if (v32 - v30 >= v75) {
                                  goto LABEL_194;
                                }
                                if (__OFADD__(v30, v75)) {
                                  goto LABEL_287;
                                }
                                if (v30 + v75 >= v33) {
                                  uint64_t v85 = v33;
                                }
                                else {
                                  uint64_t v85 = v30 + v75;
                                }
                                if (v85 < v30) {
                                  goto LABEL_288;
                                }
                                if (v32 == v85) {
                                  goto LABEL_194;
                                }
                                uint64_t v86 = *(void *)(v74 + 16);
                                uint64_t v204 = *(void *)(v196 + 72);
                                uint64_t v87 = (uint64_t)v203;
                                uint64_t v191 = v85;
LABEL_141:
                                uint64_t v192 = v32;
                                uint64_t v88 = (char *)v32;
LABEL_144:
                                id v89 = v88 - 1;
                                uint64_t v90 = *v207;
                                uint64_t v91 = v204;
                                uint64_t v92 = v204 * (void)v88;
                                sub_100946E74(*v207 + v204 * (void)v88, v87);
                                uint64_t v93 = v91 * (void)v89;
                                sub_100946E74(v90 + v91 * (void)v89, v208);
                                long long v205 = v89;
                                if (!v86)
                                {
                                  uint64_t v101 = 0;
                                  uint64_t v94 = 0;
                                  goto LABEL_188;
                                }
                                uint64_t v94 = 0;
                                uint64_t v95 = *(unsigned __int8 *)(v87 + 25);
                                while (2)
                                {
                                  unint64_t v96 = 0xE700000000000000;
                                  uint64_t v97 = 0x746C7561666564;
                                  switch(*(unsigned char *)(v209 + v94))
                                  {
                                    case 1:
                                      unint64_t v96 = 0xE600000000000000;
                                      uint64_t v97 = 0x726576726573;
                                      break;
                                    case 2:
                                      unint64_t v96 = 0xE500000000000000;
                                      uint64_t v97 = 0x73656C6F72;
                                      break;
                                    case 3:
                                      uint64_t v97 = 0x6166654472657375;
                                      unint64_t v96 = 0xEC00000073746C75;
                                      break;
                                    case 4:
                                      uint64_t v97 = 0x5365636976726573;
                                      unint64_t v96 = 0xEF73676E69747465;
                                      break;
                                    default:
                                      break;
                                  }
                                  unint64_t v98 = 0xE700000000000000;
                                  uint64_t v99 = 0x746C7561666564;
                                  switch(v95)
                                  {
                                    case 1:
                                      unint64_t v98 = 0xE600000000000000;
                                      if (v97 == 0x726576726573) {
                                        goto LABEL_158;
                                      }
                                      goto LABEL_159;
                                    case 2:
                                      unint64_t v98 = 0xE500000000000000;
                                      uint64_t v99 = 0x73656C6F72;
                                      goto LABEL_157;
                                    case 3:
                                      unint64_t v98 = 0xEC00000073746C75;
                                      if (v97 != 0x6166654472657375) {
                                        goto LABEL_159;
                                      }
                                      goto LABEL_158;
                                    case 4:
                                      unint64_t v98 = 0xEF73676E69747465;
                                      if (v97 != 0x5365636976726573) {
                                        goto LABEL_159;
                                      }
                                      goto LABEL_158;
                                    default:
LABEL_157:
                                      if (v97 != v99) {
                                        goto LABEL_159;
                                      }
LABEL_158:
                                      if (v96 != v98)
                                      {
LABEL_159:
                                        char v100 = _stringCompareWithSmolCheck(_:_:expecting:)();
                                        swift_bridgeObjectRelease();
                                        swift_bridgeObjectRelease();
                                        if (v100) {
                                          goto LABEL_166;
                                        }
                                        if (v86 == ++v94)
                                        {
                                          uint64_t v94 = 0;
                                          goto LABEL_166;
                                        }
                                        continue;
                                      }
                                      swift_bridgeObjectRelease_n();
LABEL_166:
                                      uint64_t v101 = 0;
                                      uint64_t v102 = *(unsigned __int8 *)(v208 + 25);
LABEL_167:
                                      unint64_t v103 = 0xE700000000000000;
                                      uint64_t v104 = 0x746C7561666564;
                                      switch(*(unsigned char *)(v209 + v101))
                                      {
                                        case 1:
                                          unint64_t v103 = 0xE600000000000000;
                                          uint64_t v104 = 0x726576726573;
                                          break;
                                        case 2:
                                          unint64_t v103 = 0xE500000000000000;
                                          uint64_t v104 = 0x73656C6F72;
                                          break;
                                        case 3:
                                          uint64_t v104 = 0x6166654472657375;
                                          unint64_t v103 = 0xEC00000073746C75;
                                          break;
                                        case 4:
                                          uint64_t v104 = 0x5365636976726573;
                                          unint64_t v103 = 0xEF73676E69747465;
                                          break;
                                        default:
                                          goto LABEL_172;
                                      }
                                      break;
                                  }
                                  break;
                                }
                                break;
                            }
                            break;
                          }
                          break;
                      }
                      break;
                    }
                    break;
                }
                break;
              }
LABEL_172:
              unint64_t v105 = 0xE700000000000000;
              uint64_t v106 = 0x746C7561666564;
              switch(v102)
              {
                case 1:
                  unint64_t v105 = 0xE600000000000000;
                  if (v104 != 0x726576726573) {
                    goto LABEL_180;
                  }
                  goto LABEL_179;
                case 2:
                  unint64_t v105 = 0xE500000000000000;
                  uint64_t v106 = 0x73656C6F72;
                  goto LABEL_178;
                case 3:
                  unint64_t v105 = 0xEC00000073746C75;
                  if (v104 != 0x6166654472657375) {
                    goto LABEL_180;
                  }
                  goto LABEL_179;
                case 4:
                  unint64_t v105 = 0xEF73676E69747465;
                  if (v104 != 0x5365636976726573) {
                    goto LABEL_180;
                  }
                  goto LABEL_179;
                default:
LABEL_178:
                  if (v104 != v106) {
                    goto LABEL_180;
                  }
LABEL_179:
                  if (v103 != v105)
                  {
LABEL_180:
                    char v107 = _stringCompareWithSmolCheck(_:_:expecting:)();
                    swift_bridgeObjectRelease();
                    swift_bridgeObjectRelease();
                    if (v107) {
                      goto LABEL_187;
                    }
                    uint64_t v108 = v101 + 1;
                    if (__OFADD__(v101, 1))
                    {
                      __break(1u);
                      goto LABEL_263;
                    }
                    ++v101;
                    if (v108 == v86)
                    {
                      uint64_t v101 = 0;
                      goto LABEL_187;
                    }
                    goto LABEL_167;
                  }
                  swift_bridgeObjectRelease_n();
LABEL_187:
                  uint64_t v87 = (uint64_t)v203;
LABEL_188:
                  sub_100946ED8(v208);
                  sub_100946ED8(v87);
                  if (v94 < v101)
                  {
                    uint64_t v109 = *v207;
                    uint64_t v30 = v202;
                    if (!*v207) {
                      goto LABEL_290;
                    }
                    unint64_t v110 = v109 + v92;
                    uint64_t v111 = v109 + v93;
                    sub_1010ADFF4(v109 + v92, v206);
                    if (v92 < v93 || v110 >= v111 + v204) {
                      swift_arrayInitWithTakeFrontToBack();
                    }
                    sub_1010ADFF4(v206, v111);
                    uint64_t v88 = v205;
                    uint64_t v87 = (uint64_t)v203;
                    if (v205 == (char *)v30) {
                      goto LABEL_140;
                    }
                    goto LABEL_144;
                  }
                  uint64_t v30 = v202;
LABEL_140:
                  uint64_t v32 = v192 + 1;
                  if (v192 + 1 != v191) {
                    goto LABEL_141;
                  }
                  uint64_t v32 = v191;
                  uint64_t v29 = v201;
LABEL_194:
                  if (v32 < v30) {
                    goto LABEL_284;
                  }
                  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
                    uint64_t v29 = sub_100B729CC(0, *((void *)v29 + 2) + 1, 1, v29);
                  }
                  unint64_t v113 = *((void *)v29 + 2);
                  unint64_t v112 = *((void *)v29 + 3);
                  unint64_t v114 = v113 + 1;
                  if (v113 >= v112 >> 1) {
                    uint64_t v29 = sub_100B729CC((char *)(v112 > 1), v113 + 1, 1, v29);
                  }
                  *((void *)v29 + 2) = v114;
                  long long v115 = v29 + 32;
                  long long v116 = &v29[16 * v113 + 32];
                  *(void *)long long v116 = v30;
                  *((void *)v116 + 1) = v32;
                  uint64_t v192 = v32;
                  if (v113)
                  {
                    long long v201 = v29;
                    long long v205 = v29 + 32;
                    while (1)
                    {
                      unint64_t v117 = v114 - 1;
                      if (v114 >= 4)
                      {
                        v122 = &v115[16 * v114];
                        uint64_t v123 = *((void *)v122 - 8);
                        uint64_t v124 = *((void *)v122 - 7);
                        BOOL v128 = __OFSUB__(v124, v123);
                        uint64_t v125 = v124 - v123;
                        if (v128) {
                          goto LABEL_268;
                        }
                        uint64_t v127 = *((void *)v122 - 6);
                        uint64_t v126 = *((void *)v122 - 5);
                        BOOL v128 = __OFSUB__(v126, v127);
                        uint64_t v120 = v126 - v127;
                        char v121 = v128;
                        if (v128) {
                          goto LABEL_269;
                        }
                        unint64_t v129 = v114 - 2;
                        uint64_t v130 = &v115[16 * v114 - 32];
                        uint64_t v132 = *(void *)v130;
                        uint64_t v131 = *((void *)v130 + 1);
                        BOOL v128 = __OFSUB__(v131, v132);
                        uint64_t v133 = v131 - v132;
                        if (v128) {
                          goto LABEL_271;
                        }
                        BOOL v128 = __OFADD__(v120, v133);
                        uint64_t v134 = v120 + v133;
                        if (v128) {
                          goto LABEL_274;
                        }
                        if (v134 >= v125)
                        {
                          v152 = &v115[16 * v117];
                          uint64_t v154 = *(void *)v152;
                          uint64_t v153 = *((void *)v152 + 1);
                          BOOL v128 = __OFSUB__(v153, v154);
                          uint64_t v155 = v153 - v154;
                          if (v128) {
                            goto LABEL_279;
                          }
                          BOOL v145 = v120 < v155;
                          goto LABEL_232;
                        }
                      }
                      else
                      {
                        if (v114 != 3)
                        {
                          uint64_t v146 = *((void *)v29 + 4);
                          uint64_t v147 = *((void *)v29 + 5);
                          BOOL v128 = __OFSUB__(v147, v146);
                          uint64_t v139 = v147 - v146;
                          char v140 = v128;
                          goto LABEL_226;
                        }
                        uint64_t v119 = *((void *)v29 + 4);
                        uint64_t v118 = *((void *)v29 + 5);
                        BOOL v128 = __OFSUB__(v118, v119);
                        uint64_t v120 = v118 - v119;
                        char v121 = v128;
                      }
                      if (v121) {
                        goto LABEL_270;
                      }
                      unint64_t v129 = v114 - 2;
                      v135 = &v115[16 * v114 - 32];
                      uint64_t v137 = *(void *)v135;
                      uint64_t v136 = *((void *)v135 + 1);
                      BOOL v138 = __OFSUB__(v136, v137);
                      uint64_t v139 = v136 - v137;
                      char v140 = v138;
                      if (v138) {
                        goto LABEL_273;
                      }
                      uint64_t v141 = &v115[16 * v117];
                      uint64_t v143 = *(void *)v141;
                      uint64_t v142 = *((void *)v141 + 1);
                      BOOL v128 = __OFSUB__(v142, v143);
                      uint64_t v144 = v142 - v143;
                      if (v128) {
                        goto LABEL_276;
                      }
                      if (__OFADD__(v139, v144)) {
                        goto LABEL_277;
                      }
                      if (v139 + v144 >= v120)
                      {
                        BOOL v145 = v120 < v144;
LABEL_232:
                        if (v145) {
                          unint64_t v117 = v129;
                        }
                        goto LABEL_234;
                      }
LABEL_226:
                      if (v140) {
                        goto LABEL_272;
                      }
                      v148 = &v115[16 * v117];
                      uint64_t v150 = *(void *)v148;
                      uint64_t v149 = *((void *)v148 + 1);
                      BOOL v128 = __OFSUB__(v149, v150);
                      uint64_t v151 = v149 - v150;
                      if (v128) {
                        goto LABEL_275;
                      }
                      if (v151 < v139) {
                        goto LABEL_243;
                      }
LABEL_234:
                      unint64_t v156 = v117 - 1;
                      if (v117 - 1 >= v114) {
                        goto LABEL_264;
                      }
                      uint64_t v157 = *v207;
                      if (!*v207) {
                        goto LABEL_291;
                      }
                      uint64_t v158 = &v115[16 * v156];
                      uint64_t v159 = *(void *)v158;
                      unint64_t v160 = v117;
                      v161 = &v115[16 * v117];
                      uint64_t v162 = *((void *)v161 + 1);
                      uint64_t v163 = v197;
                      uint64_t v164 = *(void *)(v196 + 72);
                      unint64_t v165 = v157 + v164 * *(void *)v158;
                      unint64_t v166 = v157 + v164 * *(void *)v161;
                      unint64_t v167 = v157 + v164 * v162;
                      swift_bridgeObjectRetain();
                      unint64_t v168 = v165;
                      uint64_t v169 = v200;
                      sub_1010AE7D8(v168, v166, v167, v195, v163);
                      uint64_t v200 = v169;
                      if (v169)
                      {
LABEL_259:
                        swift_bridgeObjectRelease();
                        swift_bridgeObjectRelease();
                        v187[2] = 0;
                        swift_bridgeObjectRelease_n();
                        return swift_bridgeObjectRelease();
                      }
                      swift_bridgeObjectRelease();
                      if (v162 < v159) {
                        goto LABEL_265;
                      }
                      uint64_t v29 = v201;
                      if (v160 > *((void *)v201 + 2)) {
                        goto LABEL_266;
                      }
                      *(void *)uint64_t v158 = v159;
                      long long v115 = v205;
                      *(void *)&v205[16 * v156 + 8] = v162;
                      unint64_t v170 = *((void *)v29 + 2);
                      if (v160 >= v170) {
                        goto LABEL_267;
                      }
                      unint64_t v114 = v170 - 1;
                      memmove(v161, v161 + 16, 16 * (v170 - 1 - v160));
                      *((void *)v29 + 2) = v170 - 1;
                      if (v170 <= 2) {
                        goto LABEL_243;
                      }
                    }
                  }
                  unint64_t v114 = 1;
LABEL_243:
                  uint64_t v31 = v207[1];
                  uint64_t v30 = v192;
                  a2 = v197;
                  uint64_t v21 = v188;
                  if (v192 >= v31) {
                    goto LABEL_247;
                  }
                  break;
              }
              break;
          }
          break;
        }
      }
    }
    uint64_t v29 = (char *)_swiftEmptyArrayStorage;
    unint64_t v195 = (unint64_t)_swiftEmptyArrayStorage
         + ((*(unsigned __int8 *)(v196 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v196 + 80));
    uint64_t v187 = _swiftEmptyArrayStorage;
    if (v22 == 1)
    {
      uint64_t v24 = 1;
      goto LABEL_14;
    }
    unint64_t v114 = _swiftEmptyArrayStorage[2];
LABEL_247:
    if (v114 >= 2)
    {
      uint64_t v171 = *v207;
      do
      {
        unint64_t v172 = v114 - 2;
        if (v114 < 2) {
          goto LABEL_280;
        }
        long long v201 = v29;
        if (!v171) {
          goto LABEL_293;
        }
        uint64_t v173 = *(void *)&v201[16 * v172 + 32];
        uint64_t v174 = *(void *)&v201[16 * v114 + 24];
        uint64_t v175 = v197;
        uint64_t v176 = *(void *)(v196 + 72);
        unint64_t v177 = v171 + v176 * v173;
        unint64_t v178 = v171 + v176 * *(void *)&v201[16 * v114 + 16];
        unint64_t v179 = v171 + v176 * v174;
        swift_bridgeObjectRetain();
        unint64_t v180 = v177;
        uint64_t v181 = v200;
        sub_1010AE7D8(v180, v178, v179, v195, v175);
        uint64_t v200 = v181;
        if (v181) {
          goto LABEL_259;
        }
        swift_bridgeObjectRelease();
        if (v174 < v173) {
          goto LABEL_281;
        }
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          long long v201 = sub_100B73584((uint64_t)v201);
        }
        uint64_t v182 = v201;
        if (v172 >= *((void *)v201 + 2)) {
          goto LABEL_282;
        }
        uint64_t v183 = v201 + 32;
        v184 = &v201[16 * v172 + 32];
        *(void *)v184 = v173;
        *((void *)v184 + 1) = v174;
        unint64_t v185 = *((void *)v182 + 2);
        if (v114 > v185) {
          goto LABEL_283;
        }
        memmove(&v183[16 * v114 - 16], &v183[16 * v114], 16 * (v185 - v114));
        *((void *)v182 + 2) = v185 - 1;
        unint64_t v114 = v185 - 1;
        uint64_t v29 = v182;
      }
      while (v185 > 2);
    }
    swift_bridgeObjectRelease();
    v187[2] = 0;
    swift_bridgeObjectRelease_n();
    return swift_bridgeObjectRelease();
  }
}

uint64_t sub_1010B11D4(void **a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(type metadata accessor for DefaultConfigurationLayer() - 8);
  uint64_t v5 = *a1;
  swift_bridgeObjectRetain_n();
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    uint64_t v5 = (void *)sub_100B7364C(v5);
  }
  uint64_t v6 = v5[2];
  v8[0] = (uint64_t)v5 + ((*(unsigned __int8 *)(v4 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80));
  v8[1] = v6;
  swift_bridgeObjectRetain();
  sub_1010AFAB8(v8, a2);
  swift_bridgeObjectRelease();
  *a1 = v5;
  return swift_bridgeObjectRelease_n();
}

uint64_t sub_1010B12BC@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = a1[3];
  uint64_t v4 = a1[4];
  sub_10001CD44(a1, v3);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(v4 + 16))(v3, v4);
  *(void *)a2 = result;
  *(unsigned char *)(a2 + 8) = v6 & 1;
  return result;
}

uint64_t sub_1010B1320@<X0>(void *a1@<X0>, unsigned char *a2@<X8>)
{
  uint64_t v3 = a1[3];
  uint64_t v4 = a1[4];
  sub_10001CD44(a1, v3);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(v4 + 88))(v3, v4);
  *a2 = result;
  return result;
}

uint64_t sub_1010B1378@<X0>(void *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v3 = a1[3];
  uint64_t v4 = a1[4];
  sub_10001CD44(a1, v3);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(v4 + 672))(v3, v4);
  *a2 = result;
  a2[1] = v6;
  return result;
}

uint64_t sub_1010B13D0@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = a1[3];
  uint64_t v4 = a1[4];
  sub_10001CD44(a1, v3);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(v4 + 904))(v3, v4);
  *(void *)a2 = result;
  *(unsigned char *)(a2 + 8) = v6 & 1;
  return result;
}

uint64_t sub_1010B1430@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = a1[3];
  uint64_t v4 = a1[4];
  sub_10001CD44(a1, v3);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(v4 + 1272))(v3, v4);
  *(void *)a2 = result;
  *(unsigned char *)(a2 + 8) = v6 & 1;
  return result;
}

uint64_t sub_1010B1490@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = a1[3];
  uint64_t v4 = a1[4];
  sub_10001CD44(a1, v3);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(v4 + 1104))(v3, v4);
  *(void *)a2 = result;
  *(unsigned char *)(a2 + 8) = v6 & 1;
  return result;
}

uint64_t sub_1010B14F0@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = a1[3];
  uint64_t v4 = a1[4];
  sub_10001CD44(a1, v3);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(v4 + 1152))(v3, v4);
  *(void *)a2 = result;
  *(unsigned char *)(a2 + 8) = v6 & 1;
  return result;
}

uint64_t sub_1010B1550@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = a1[3];
  uint64_t v4 = a1[4];
  sub_10001CD44(a1, v3);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(v4 + 104))(v3, v4);
  *(void *)a2 = result;
  *(unsigned char *)(a2 + 8) = v6 & 1;
  return result;
}

uint64_t sub_1010B15B0@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = a1[3];
  uint64_t v4 = a1[4];
  sub_10001CD44(a1, v3);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(v4 + 128))(v3, v4);
  *(void *)a2 = result;
  *(unsigned char *)(a2 + 8) = v6 & 1;
  return result;
}

void *sub_1010B1610(void *a1)
{
  uint64_t v3 = sub_10000588C(&qword_101669B58);
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  char v6 = (char *)v9 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = sub_10001CD44(a1, a1[3]);
  sub_1010B17C0();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v1)
  {
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)a1);
  }
  else
  {
    sub_10000588C(&qword_101669B68);
    sub_1010B1814(&qword_101669B70, &qword_101669B78);
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
    uint64_t v7 = (void *)v9[1];
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)a1);
  }
  return v7;
}

unint64_t sub_1010B17C0()
{
  unint64_t result = qword_101669B60;
  if (!qword_101669B60)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_101669B60);
  }
  return result;
}

uint64_t sub_1010B1814(unint64_t *a1, unint64_t *a2)
{
  uint64_t result = *a1;
  if (!result)
  {
    sub_10000592C(&qword_101669B68);
    sub_1010B1894(a2);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_1010B1894(unint64_t *a1)
{
  uint64_t result = *a1;
  if (!result)
  {
    type metadata accessor for DefaultConfigurationLayer();
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_1010B18D8@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = a1[3];
  uint64_t v4 = a1[4];
  sub_10001CD44(a1, v3);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(v4 + 112))(v3, v4);
  *(void *)a2 = result;
  *(unsigned char *)(a2 + 8) = v6 & 1;
  return result;
}

uint64_t sub_1010B1938@<X0>(void *a1@<X0>, unsigned char *a2@<X8>)
{
  uint64_t v3 = a1[3];
  uint64_t v4 = a1[4];
  sub_10001CD44(a1, v3);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(v4 + 1248))(v3, v4);
  *a2 = result;
  return result;
}

uint64_t sub_1010B1990@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = a1[3];
  uint64_t v4 = a1[4];
  sub_10001CD44(a1, v3);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(v4 + 1112))(v3, v4);
  *(void *)a2 = result;
  *(unsigned char *)(a2 + 8) = v6 & 1;
  return result;
}

uint64_t sub_1010B19F0@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = a1[3];
  uint64_t v4 = a1[4];
  sub_10001CD44(a1, v3);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(v4 + 1128))(v3, v4);
  *(void *)a2 = result;
  *(unsigned char *)(a2 + 8) = v6 & 1;
  return result;
}

uint64_t sub_1010B1A50@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = a1[3];
  uint64_t v4 = a1[4];
  sub_10001CD44(a1, v3);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(v4 + 1168))(v3, v4);
  *(void *)a2 = result;
  *(unsigned char *)(a2 + 8) = v6 & 1;
  return result;
}

uint64_t sub_1010B1AB0@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = a1[3];
  uint64_t v4 = a1[4];
  sub_10001CD44(a1, v3);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(v4 + 1144))(v3, v4);
  *(void *)a2 = result;
  *(unsigned char *)(a2 + 8) = v6 & 1;
  return result;
}

uint64_t sub_1010B1B10@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = a1[3];
  uint64_t v4 = a1[4];
  sub_10001CD44(a1, v3);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(v4 + 1288))(v3, v4);
  *(void *)a2 = result;
  *(unsigned char *)(a2 + 8) = v6 & 1;
  return result;
}

uint64_t sub_1010B1B70@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = a1[3];
  uint64_t v4 = a1[4];
  sub_10001CD44(a1, v3);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(v4 + 1240))(v3, v4);
  *(void *)a2 = result;
  *(unsigned char *)(a2 + 8) = v6 & 1;
  return result;
}

uint64_t sub_1010B1BD0@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = a1[3];
  uint64_t v4 = a1[4];
  sub_10001CD44(a1, v3);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(v4 + 680))(v3, v4);
  *(void *)a2 = result;
  *(unsigned char *)(a2 + 8) = v6 & 1;
  return result;
}

uint64_t sub_1010B1C30@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = a1[3];
  uint64_t v4 = a1[4];
  sub_10001CD44(a1, v3);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(v4 + 248))(v3, v4);
  *(void *)a2 = result;
  *(unsigned char *)(a2 + 8) = v6 & 1;
  return result;
}

uint64_t sub_1010B1C90@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = a1[3];
  uint64_t v4 = a1[4];
  sub_10001CD44(a1, v3);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(v4 + 240))(v3, v4);
  *(void *)a2 = result;
  *(unsigned char *)(a2 + 8) = v6 & 1;
  return result;
}

uint64_t sub_1010B1CF0@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = a1[3];
  uint64_t v4 = a1[4];
  sub_10001CD44(a1, v3);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(v4 + 1080))(v3, v4);
  *(void *)a2 = result;
  *(unsigned char *)(a2 + 8) = v6 & 1;
  return result;
}

uint64_t sub_1010B1D50@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = a1[3];
  uint64_t v4 = a1[4];
  sub_10001CD44(a1, v3);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(v4 + 168))(v3, v4);
  *(void *)a2 = result;
  *(unsigned char *)(a2 + 8) = v6 & 1;
  return result;
}

uint64_t sub_1010B1DB0@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = a1[3];
  uint64_t v4 = a1[4];
  sub_10001CD44(a1, v3);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(v4 + 160))(v3, v4);
  *(void *)a2 = result;
  *(unsigned char *)(a2 + 8) = v6 & 1;
  return result;
}

uint64_t sub_1010B1E10@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = a1[3];
  uint64_t v4 = a1[4];
  sub_10001CD44(a1, v3);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(v4 + 616))(v3, v4);
  *(void *)a2 = result;
  *(unsigned char *)(a2 + 8) = v6 & 1;
  return result;
}

uint64_t sub_1010B1E70@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = a1[3];
  uint64_t v4 = a1[4];
  sub_10001CD44(a1, v3);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(v4 + 1360))(v3, v4);
  *(void *)a2 = result;
  *(unsigned char *)(a2 + 8) = v6 & 1;
  return result;
}

uint64_t sub_1010B1ED0@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = a1[3];
  uint64_t v4 = a1[4];
  sub_10001CD44(a1, v3);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(v4 + 1352))(v3, v4);
  *(void *)a2 = result;
  *(unsigned char *)(a2 + 8) = v6 & 1;
  return result;
}

uint64_t sub_1010B1F30@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = a1[3];
  uint64_t v4 = a1[4];
  sub_10001CD44(a1, v3);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(v4 + 1344))(v3, v4);
  *(void *)a2 = result;
  *(unsigned char *)(a2 + 8) = v6 & 1;
  return result;
}

uint64_t sub_1010B1F90@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = a1[3];
  uint64_t v4 = a1[4];
  sub_10001CD44(a1, v3);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(v4 + 1368))(v3, v4);
  *(void *)a2 = result;
  *(unsigned char *)(a2 + 8) = v6 & 1;
  return result;
}

uint64_t sub_1010B1FF0@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = a1[3];
  uint64_t v4 = a1[4];
  sub_10001CD44(a1, v3);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(v4 + 232))(v3, v4);
  *(void *)a2 = result;
  *(unsigned char *)(a2 + 8) = v6 & 1;
  return result;
}

uint64_t sub_1010B2050@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = a1[3];
  uint64_t v4 = a1[4];
  sub_10001CD44(a1, v3);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(v4 + 264))(v3, v4);
  *(void *)a2 = result;
  *(unsigned char *)(a2 + 8) = v6 & 1;
  return result;
}

uint64_t sub_1010B20B0@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = a1[3];
  uint64_t v4 = a1[4];
  sub_10001CD44(a1, v3);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(v4 + 224))(v3, v4);
  *(void *)a2 = result;
  *(unsigned char *)(a2 + 8) = v6 & 1;
  return result;
}

uint64_t sub_1010B2110@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = a1[3];
  uint64_t v4 = a1[4];
  sub_10001CD44(a1, v3);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(v4 + 800))(v3, v4);
  *(void *)a2 = result;
  *(unsigned char *)(a2 + 8) = v6 & 1;
  return result;
}

uint64_t sub_1010B2170@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = a1[3];
  uint64_t v4 = a1[4];
  sub_10001CD44(a1, v3);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(v4 + 792))(v3, v4);
  *(void *)a2 = result;
  *(unsigned char *)(a2 + 8) = v6 & 1;
  return result;
}

uint64_t sub_1010B21D4@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = a1[3];
  uint64_t v4 = a1[4];
  sub_10001CD44(a1, v3);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(v4 + 288))(v3, v4);
  *(void *)a2 = result;
  *(unsigned char *)(a2 + 8) = v6 & 1;
  return result;
}

uint64_t sub_1010B2234@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = a1[3];
  uint64_t v4 = a1[4];
  sub_10001CD44(a1, v3);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(v4 + 272))(v3, v4);
  *(void *)a2 = result;
  *(unsigned char *)(a2 + 8) = v6 & 1;
  return result;
}

uint64_t sub_1010B2294@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = a1[3];
  uint64_t v4 = a1[4];
  sub_10001CD44(a1, v3);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(v4 + 256))(v3, v4);
  *(void *)a2 = result;
  *(unsigned char *)(a2 + 8) = v6 & 1;
  return result;
}

uint64_t sub_1010B22F4@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = a1[3];
  uint64_t v4 = a1[4];
  sub_10001CD44(a1, v3);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(v4 + 176))(v3, v4);
  *(void *)a2 = result;
  *(unsigned char *)(a2 + 8) = v6 & 1;
  return result;
}

uint64_t sub_1010B2354@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = a1[3];
  uint64_t v4 = a1[4];
  sub_10001CD44(a1, v3);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(v4 + 1008))(v3, v4);
  *(void *)a2 = result;
  *(unsigned char *)(a2 + 8) = v6 & 1;
  return result;
}

uint64_t sub_1010B23B4@<X0>(void *a1@<X0>, unsigned char *a2@<X8>)
{
  uint64_t v3 = a1[3];
  uint64_t v4 = a1[4];
  sub_10001CD44(a1, v3);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(v4 + 1016))(v3, v4);
  *a2 = result;
  return result;
}

uint64_t sub_1010B240C@<X0>(void *a1@<X0>, unsigned char *a2@<X8>)
{
  uint64_t v3 = a1[3];
  uint64_t v4 = a1[4];
  sub_10001CD44(a1, v3);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(v4 + 1296))(v3, v4);
  *a2 = result;
  return result;
}

uint64_t sub_1010B2464@<X0>(void *a1@<X0>, unsigned char *a2@<X8>)
{
  uint64_t v3 = a1[3];
  uint64_t v4 = a1[4];
  sub_10001CD44(a1, v3);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(v4 + 200))(v3, v4);
  *a2 = result;
  return result;
}

uint64_t sub_1010B24BC@<X0>(void *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v3 = a1[3];
  uint64_t v4 = a1[4];
  sub_10001CD44(a1, v3);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(v4 + 208))(v3, v4);
  *a2 = result;
  return result;
}

uint64_t sub_1010B2514@<X0>(void *a1@<X0>, unsigned char *a2@<X8>)
{
  uint64_t v3 = a1[3];
  uint64_t v4 = a1[4];
  sub_10001CD44(a1, v3);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(v4 + 688))(v3, v4);
  *a2 = result;
  return result;
}

uint64_t sub_1010B256C@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = a1[3];
  uint64_t v4 = a1[4];
  sub_10001CD44(a1, v3);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(v4 + 984))(v3, v4);
  *(void *)a2 = result;
  *(unsigned char *)(a2 + 8) = v6 & 1;
  return result;
}

uint64_t sub_1010B25CC@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = a1[3];
  uint64_t v4 = a1[4];
  sub_10001CD44(a1, v3);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(v4 + 976))(v3, v4);
  *(void *)a2 = result;
  *(unsigned char *)(a2 + 8) = v6 & 1;
  return result;
}

uint64_t sub_1010B262C@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = a1[3];
  uint64_t v4 = a1[4];
  sub_10001CD44(a1, v3);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(v4 + 1000))(v3, v4);
  *(void *)a2 = result;
  *(unsigned char *)(a2 + 8) = v6 & 1;
  return result;
}

uint64_t sub_1010B268C@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = a1[3];
  uint64_t v4 = a1[4];
  sub_10001CD44(a1, v3);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(v4 + 992))(v3, v4);
  *(void *)a2 = result;
  *(unsigned char *)(a2 + 8) = v6 & 1;
  return result;
}

uint64_t sub_1010B26F0@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = a1[3];
  uint64_t v4 = a1[4];
  sub_10001CD44(a1, v3);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(v4 + 1160))(v3, v4);
  *(void *)a2 = result;
  *(unsigned char *)(a2 + 8) = v6 & 1;
  return result;
}

uint64_t sub_1010B2750@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = a1[3];
  uint64_t v4 = a1[4];
  sub_10001CD44(a1, v3);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(v4 + 1376))(v3, v4);
  *(void *)a2 = result;
  *(unsigned char *)(a2 + 8) = v6 & 1;
  return result;
}

uint64_t sub_1010B27B0@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = a1[3];
  uint64_t v4 = a1[4];
  sub_10001CD44(a1, v3);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(v4 + 1384))(v3, v4);
  *(void *)a2 = result;
  *(unsigned char *)(a2 + 8) = v6 & 1;
  return result;
}

uint64_t sub_1010B2810@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = a1[3];
  uint64_t v4 = a1[4];
  sub_10001CD44(a1, v3);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(v4 + 1216))(v3, v4);
  *(void *)a2 = result;
  *(unsigned char *)(a2 + 8) = v6 & 1;
  return result;
}

uint64_t sub_1010B2870@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = a1[3];
  uint64_t v4 = a1[4];
  sub_10001CD44(a1, v3);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(v4 + 1224))(v3, v4);
  *(void *)a2 = result;
  *(unsigned char *)(a2 + 8) = v6 & 1;
  return result;
}

uint64_t sub_1010B28D0@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = a1[3];
  uint64_t v4 = a1[4];
  sub_10001CD44(a1, v3);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(v4 + 1120))(v3, v4);
  *(void *)a2 = result;
  *(unsigned char *)(a2 + 8) = v6 & 1;
  return result;
}

uint64_t sub_1010B2930@<X0>(void *a1@<X0>, unsigned char *a2@<X8>)
{
  uint64_t v3 = a1[3];
  uint64_t v4 = a1[4];
  sub_10001CD44(a1, v3);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(v4 + 936))(v3, v4);
  *a2 = result;
  return result;
}

uint64_t sub_1010B2988@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = a1[3];
  uint64_t v4 = a1[4];
  sub_10001CD44(a1, v3);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(v4 + 784))(v3, v4);
  *(void *)a2 = result;
  *(unsigned char *)(a2 + 8) = v6 & 1;
  return result;
}

uint64_t sub_1010B29E8@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = a1[3];
  uint64_t v4 = a1[4];
  sub_10001CD44(a1, v3);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(v4 + 920))(v3, v4);
  *(void *)a2 = result;
  *(unsigned char *)(a2 + 8) = v6 & 1;
  return result;
}

uint64_t sub_1010B2A48@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = a1[3];
  uint64_t v4 = a1[4];
  sub_10001CD44(a1, v3);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(v4 + 960))(v3, v4);
  *(void *)a2 = result;
  *(unsigned char *)(a2 + 8) = v6 & 1;
  return result;
}

uint64_t sub_1010B2AA8@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = a1[3];
  uint64_t v4 = a1[4];
  sub_10001CD44(a1, v3);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(v4 + 1192))(v3, v4);
  *(void *)a2 = result;
  *(unsigned char *)(a2 + 8) = v6 & 1;
  return result;
}

uint64_t sub_1010B2B08@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = a1[3];
  uint64_t v4 = a1[4];
  sub_10001CD44(a1, v3);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(v4 + 1184))(v3, v4);
  *(void *)a2 = result;
  *(unsigned char *)(a2 + 8) = v6 & 1;
  return result;
}

uint64_t sub_1010B2B68@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = a1[3];
  uint64_t v4 = a1[4];
  sub_10001CD44(a1, v3);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(v4 + 1176))(v3, v4);
  *(void *)a2 = result;
  *(unsigned char *)(a2 + 8) = v6 & 1;
  return result;
}

uint64_t sub_1010B2BC8@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = a1[3];
  uint64_t v4 = a1[4];
  sub_10001CD44(a1, v3);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(v4 + 1200))(v3, v4);
  *(void *)a2 = result;
  *(unsigned char *)(a2 + 8) = v6 & 1;
  return result;
}

uint64_t sub_1010B2C28@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = a1[3];
  uint64_t v4 = a1[4];
  sub_10001CD44(a1, v3);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(v4 + 1208))(v3, v4);
  *(void *)a2 = result;
  *(unsigned char *)(a2 + 8) = v6 & 1;
  return result;
}

uint64_t sub_1010B2C88@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = a1[3];
  uint64_t v4 = a1[4];
  sub_10001CD44(a1, v3);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(v4 + 1320))(v3, v4);
  *(void *)a2 = result;
  *(unsigned char *)(a2 + 8) = v6 & 1;
  return result;
}

uint64_t sub_1010B2CE8@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = a1[3];
  uint64_t v4 = a1[4];
  sub_10001CD44(a1, v3);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(v4 + 1312))(v3, v4);
  *(void *)a2 = result;
  *(unsigned char *)(a2 + 8) = v6 & 1;
  return result;
}

uint64_t sub_1010B2D48@<X0>(void *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v3 = a1[3];
  uint64_t v4 = a1[4];
  sub_10001CD44(a1, v3);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(v4 + 64))(v3, v4);
  *a2 = result;
  a2[1] = v6;
  return result;
}

uint64_t sub_1010B2DA0@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = a1[3];
  uint64_t v4 = a1[4];
  sub_10001CD44(a1, v3);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(v4 + 184))(v3, v4);
  *(void *)a2 = result;
  *(unsigned char *)(a2 + 8) = v6 & 1;
  return result;
}

uint64_t sub_1010B2E00@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = a1[3];
  uint64_t v4 = a1[4];
  sub_10001CD44(a1, v3);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(v4 + 320))(v3, v4);
  *(void *)a2 = result;
  *(unsigned char *)(a2 + 8) = v6 & 1;
  return result;
}

uint64_t sub_1010B2E60@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = a1[3];
  uint64_t v4 = a1[4];
  sub_10001CD44(a1, v3);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(v4 + 600))(v3, v4);
  *(void *)a2 = result;
  *(unsigned char *)(a2 + 8) = v6 & 1;
  return result;
}

uint64_t sub_1010B2EC0@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = a1[3];
  uint64_t v4 = a1[4];
  sub_10001CD44(a1, v3);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(v4 + 1416))(v3, v4);
  *(void *)a2 = result;
  *(unsigned char *)(a2 + 8) = v6 & 1;
  return result;
}

uint64_t sub_1010B2F20@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = a1[3];
  uint64_t v4 = a1[4];
  sub_10001CD44(a1, v3);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(v4 + 1408))(v3, v4);
  *(void *)a2 = result;
  *(unsigned char *)(a2 + 8) = v6 & 1;
  return result;
}

uint64_t sub_1010B2F80@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = a1[3];
  uint64_t v4 = a1[4];
  sub_10001CD44(a1, v3);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(v4 + 1040))(v3, v4);
  *(void *)a2 = result;
  *(unsigned char *)(a2 + 8) = v6 & 1;
  return result;
}

uint64_t sub_1010B2FE0@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = a1[3];
  uint64_t v4 = a1[4];
  sub_10001CD44(a1, v3);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(v4 + 280))(v3, v4);
  *(void *)a2 = result;
  *(unsigned char *)(a2 + 8) = v6 & 1;
  return result;
}

uint64_t sub_1010B3040@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = a1[3];
  uint64_t v4 = a1[4];
  sub_10001CD44(a1, v3);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(v4 + 816))(v3, v4);
  *(void *)a2 = result;
  *(unsigned char *)(a2 + 8) = v6 & 1;
  return result;
}

uint64_t sub_1010B30A4@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = a1[3];
  uint64_t v4 = a1[4];
  sub_10001CD44(a1, v3);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(v4 + 416))(v3, v4);
  *(void *)a2 = result;
  *(unsigned char *)(a2 + 8) = v6 & 1;
  return result;
}

uint64_t sub_1010B3104@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = a1[3];
  uint64_t v4 = a1[4];
  sub_10001CD44(a1, v3);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(v4 + 368))(v3, v4);
  *(void *)a2 = result;
  *(unsigned char *)(a2 + 8) = v6 & 1;
  return result;
}

uint64_t sub_1010B3164@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = a1[3];
  uint64_t v4 = a1[4];
  sub_10001CD44(a1, v3);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(v4 + 432))(v3, v4);
  *(void *)a2 = result;
  *(unsigned char *)(a2 + 8) = v6 & 1;
  return result;
}

uint64_t sub_1010B31C4@<X0>(void *a1@<X0>, unsigned char *a2@<X8>)
{
  uint64_t v3 = a1[3];
  uint64_t v4 = a1[4];
  sub_10001CD44(a1, v3);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(v4 + 1064))(v3, v4);
  *a2 = result;
  return result;
}

uint64_t sub_1010B321C@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = a1[3];
  uint64_t v4 = a1[4];
  sub_10001CD44(a1, v3);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(v4 + 408))(v3, v4);
  *(void *)a2 = result;
  *(unsigned char *)(a2 + 8) = v6 & 1;
  return result;
}

uint64_t sub_1010B327C@<X0>(void *a1@<X0>, unsigned char *a2@<X8>)
{
  uint64_t v3 = a1[3];
  uint64_t v4 = a1[4];
  sub_10001CD44(a1, v3);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(v4 + 896))(v3, v4);
  *a2 = result;
  return result;
}

uint64_t sub_1010B32D4@<X0>(void *a1@<X0>, unsigned char *a2@<X8>)
{
  uint64_t v3 = a1[3];
  uint64_t v4 = a1[4];
  sub_10001CD44(a1, v3);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(v4 + 1096))(v3, v4);
  *a2 = result;
  return result;
}

uint64_t sub_1010B332C@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = a1[3];
  uint64_t v4 = a1[4];
  sub_10001CD44(a1, v3);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(v4 + 376))(v3, v4);
  *(void *)a2 = result;
  *(unsigned char *)(a2 + 8) = v6 & 1;
  return result;
}

uint64_t sub_1010B338C@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = a1[3];
  uint64_t v4 = a1[4];
  sub_10001CD44(a1, v3);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(v4 + 968))(v3, v4);
  *(void *)a2 = result;
  *(unsigned char *)(a2 + 8) = v6 & 1;
  return result;
}

uint64_t sub_1010B33EC@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = a1[3];
  uint64_t v4 = a1[4];
  sub_10001CD44(a1, v3);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(v4 + 136))(v3, v4);
  *(void *)a2 = result;
  *(unsigned char *)(a2 + 8) = v6 & 1;
  return result;
}

uint64_t sub_1010B344C@<X0>(void *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v3 = a1[3];
  uint64_t v4 = a1[4];
  sub_10001CD44(a1, v3);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(v4 + 1056))(v3, v4);
  *a2 = result;
  return result;
}

uint64_t sub_1010B34A4@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = a1[3];
  uint64_t v4 = a1[4];
  sub_10001CD44(a1, v3);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(v4 + 120))(v3, v4);
  *(void *)a2 = result;
  *(unsigned char *)(a2 + 8) = v6 & 1;
  return result;
}

uint64_t sub_1010B3504@<X0>(void *a1@<X0>, unsigned char *a2@<X8>)
{
  uint64_t v3 = a1[3];
  uint64_t v4 = a1[4];
  sub_10001CD44(a1, v3);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(v4 + 1400))(v3, v4);
  *a2 = result;
  return result;
}

uint64_t sub_1010B355C@<X0>(void *a1@<X0>, unsigned char *a2@<X8>)
{
  uint64_t v3 = a1[3];
  uint64_t v4 = a1[4];
  sub_10001CD44(a1, v3);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(v4 + 1328))(v3, v4);
  *a2 = result;
  return result;
}

uint64_t sub_1010B35B4@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = a1[3];
  uint64_t v4 = a1[4];
  sub_10001CD44(a1, v3);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(v4 + 768))(v3, v4);
  *(void *)a2 = result;
  *(unsigned char *)(a2 + 8) = v6 & 1;
  return result;
}

uint64_t sub_1010B3614@<X0>(void *a1@<X0>, unsigned char *a2@<X8>)
{
  uint64_t v3 = a1[3];
  uint64_t v4 = a1[4];
  sub_10001CD44(a1, v3);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(v4 + 296))(v3, v4);
  *a2 = result;
  return result;
}

uint64_t sub_1010B366C@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = a1[3];
  uint64_t v4 = a1[4];
  sub_10001CD44(a1, v3);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(v4 + 808))(v3, v4);
  *(void *)a2 = result;
  *(unsigned char *)(a2 + 8) = v6 & 1;
  return result;
}

uint64_t sub_1010B36CC@<X0>(void *a1@<X0>, unsigned char *a2@<X8>)
{
  uint64_t v3 = a1[3];
  uint64_t v4 = a1[4];
  sub_10001CD44(a1, v3);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(v4 + 1304))(v3, v4);
  *a2 = result;
  return result;
}

uint64_t sub_1010B3724@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = a1[3];
  uint64_t v4 = a1[4];
  sub_10001CD44(a1, v3);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(v4 + 1232))(v3, v4);
  *(void *)a2 = result;
  *(unsigned char *)(a2 + 8) = v6 & 1;
  return result;
}

uint64_t sub_1010B3784@<X0>(void *a1@<X0>, unsigned char *a2@<X8>)
{
  uint64_t v3 = a1[3];
  uint64_t v4 = a1[4];
  sub_10001CD44(a1, v3);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(v4 + 704))(v3, v4);
  *a2 = result;
  return result;
}

uint64_t sub_1010B37DC@<X0>(void *a1@<X0>, unsigned char *a2@<X8>)
{
  uint64_t v3 = a1[3];
  uint64_t v4 = a1[4];
  sub_10001CD44(a1, v3);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(v4 + 696))(v3, v4);
  *a2 = result;
  return result;
}

uint64_t sub_1010B3834@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = a1[3];
  uint64_t v4 = a1[4];
  sub_10001CD44(a1, v3);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(v4 + 592))(v3, v4);
  *(void *)a2 = result;
  *(unsigned char *)(a2 + 8) = v6 & 1;
  return result;
}

uint64_t sub_1010B3898@<X0>(void *a1@<X0>, unsigned char *a2@<X8>)
{
  uint64_t v3 = a1[3];
  uint64_t v4 = a1[4];
  sub_10001CD44(a1, v3);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(v4 + 712))(v3, v4);
  *a2 = result;
  return result;
}

uint64_t sub_1010B38F0@<X0>(void *a1@<X0>, unsigned char *a2@<X8>)
{
  uint64_t v3 = a1[3];
  uint64_t v4 = a1[4];
  sub_10001CD44(a1, v3);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(v4 + 544))(v3, v4);
  *a2 = result;
  return result;
}

uint64_t sub_1010B3948@<X0>(void *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v3 = a1[3];
  uint64_t v4 = a1[4];
  sub_10001CD44(a1, v3);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(v4 + 1280))(v3, v4);
  *a2 = result;
  a2[1] = v6;
  return result;
}

uint64_t sub_1010B39A0@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = a1[3];
  uint64_t v4 = a1[4];
  sub_10001CD44(a1, v3);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(v4 + 1072))(v3, v4);
  *(void *)a2 = result;
  *(unsigned char *)(a2 + 8) = v6 & 1;
  return result;
}

uint64_t sub_1010B3A00@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = a1[3];
  uint64_t v4 = a1[4];
  sub_10001CD44(a1, v3);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(v4 + 624))(v3, v4);
  *(void *)a2 = result;
  *(unsigned char *)(a2 + 8) = v6 & 1;
  return result;
}

uint64_t sub_1010B3A60@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = a1[3];
  uint64_t v4 = a1[4];
  sub_10001CD44(a1, v3);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(v4 + 584))(v3, v4);
  *(void *)a2 = result;
  *(unsigned char *)(a2 + 8) = v6 & 1;
  return result;
}

uint64_t sub_1010B3AC0@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = a1[3];
  uint64_t v4 = a1[4];
  sub_10001CD44(a1, v3);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(v4 + 576))(v3, v4);
  *(void *)a2 = result;
  *(unsigned char *)(a2 + 8) = v6 & 1;
  return result;
}

uint64_t sub_1010B3B20@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = a1[3];
  uint64_t v4 = a1[4];
  sub_10001CD44(a1, v3);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(v4 + 1392))(v3, v4);
  *(void *)a2 = result;
  *(unsigned char *)(a2 + 8) = v6 & 1;
  return result;
}

uint64_t sub_1010B3B80@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = a1[3];
  uint64_t v4 = a1[4];
  sub_10001CD44(a1, v3);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(v4 + 1256))(v3, v4);
  *(void *)a2 = result;
  *(unsigned char *)(a2 + 8) = v6 & 1;
  return result;
}

uint64_t sub_1010B3BE0@<X0>(void *a1@<X0>, unsigned char *a2@<X8>)
{
  uint64_t v3 = a1[3];
  uint64_t v4 = a1[4];
  sub_10001CD44(a1, v3);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(v4 + 40))(v3, v4);
  *a2 = result;
  return result;
}

uint64_t sub_1010B3C38@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = a1[3];
  uint64_t v4 = a1[4];
  sub_10001CD44(a1, v3);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(v4 + 952))(v3, v4);
  *(void *)a2 = result;
  *(unsigned char *)(a2 + 8) = v6 & 1;
  return result;
}

uint64_t sub_1010B3C98@<X0>(void *a1@<X0>, unsigned char *a2@<X8>)
{
  uint64_t v3 = a1[3];
  uint64_t v4 = a1[4];
  sub_10001CD44(a1, v3);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(v4 + 944))(v3, v4);
  *a2 = result;
  return result;
}

uint64_t sub_1010B3CF0@<X0>(void *a1@<X0>, unsigned char *a2@<X8>)
{
  uint64_t v3 = a1[3];
  uint64_t v4 = a1[4];
  sub_10001CD44(a1, v3);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(v4 + 928))(v3, v4);
  *a2 = result;
  return result;
}

uint64_t sub_1010B3D48@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = a1[3];
  uint64_t v4 = a1[4];
  sub_10001CD44(a1, v3);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(v4 + 776))(v3, v4);
  *(void *)a2 = result;
  *(unsigned char *)(a2 + 8) = v6 & 1;
  return result;
}

uint64_t sub_1010B3DA8@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = a1[3];
  uint64_t v4 = a1[4];
  sub_10001CD44(a1, v3);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(v4 + 760))(v3, v4);
  *(void *)a2 = result;
  *(unsigned char *)(a2 + 8) = v6 & 1;
  return result;
}

uint64_t sub_1010B3E08@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = a1[3];
  uint64_t v4 = a1[4];
  sub_10001CD44(a1, v3);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(v4 + 336))(v3, v4);
  *(void *)a2 = result;
  *(unsigned char *)(a2 + 8) = v6 & 1;
  return result;
}

uint64_t sub_1010B3E68@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = a1[3];
  uint64_t v4 = a1[4];
  sub_10001CD44(a1, v3);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(v4 + 352))(v3, v4);
  *(void *)a2 = result;
  *(unsigned char *)(a2 + 8) = v6 & 1;
  return result;
}

uint64_t sub_1010B3EC8@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = a1[3];
  uint64_t v4 = a1[4];
  sub_10001CD44(a1, v3);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(v4 + 344))(v3, v4);
  *(void *)a2 = result;
  *(unsigned char *)(a2 + 8) = v6 & 1;
  return result;
}

uint64_t sub_1010B3F28@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = a1[3];
  uint64_t v4 = a1[4];
  sub_10001CD44(a1, v3);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(v4 + 328))(v3, v4);
  *(void *)a2 = result;
  *(unsigned char *)(a2 + 8) = v6 & 1;
  return result;
}

uint64_t sub_1010B3F88@<X0>(void *a1@<X0>, unsigned char *a2@<X8>)
{
  uint64_t v3 = a1[3];
  uint64_t v4 = a1[4];
  sub_10001CD44(a1, v3);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(v4 + 72))(v3, v4);
  *a2 = result;
  return result;
}

uint64_t sub_1010B3FE0@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = a1[3];
  uint64_t v4 = a1[4];
  sub_10001CD44(a1, v3);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(v4 + 736))(v3, v4);
  *(void *)a2 = result;
  *(unsigned char *)(a2 + 8) = v6 & 1;
  return result;
}

uint64_t sub_1010B4040@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = a1[3];
  uint64_t v4 = a1[4];
  sub_10001CD44(a1, v3);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(v4 + 744))(v3, v4);
  *(void *)a2 = result;
  *(unsigned char *)(a2 + 8) = v6 & 1;
  return result;
}

uint64_t sub_1010B40A0@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = a1[3];
  uint64_t v4 = a1[4];
  sub_10001CD44(a1, v3);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(v4 + 1336))(v3, v4);
  *(_DWORD *)a2 = result;
  *(unsigned char *)(a2 + 4) = BYTE4(result) & 1;
  return result;
}

uint64_t sub_1010B4100@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = a1[3];
  uint64_t v4 = a1[4];
  sub_10001CD44(a1, v3);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(v4 + 1264))(v3, v4);
  *(void *)a2 = result;
  *(unsigned char *)(a2 + 8) = v6 & 1;
  return result;
}

uint64_t sub_1010B4160@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = a1[3];
  uint64_t v4 = a1[4];
  sub_10001CD44(a1, v3);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(v4 + 1136))(v3, v4);
  *(void *)a2 = result;
  *(unsigned char *)(a2 + 8) = v6 & 1;
  return result;
}

uint64_t sub_1010B41C0@<X0>(void *a1@<X0>, unsigned char *a2@<X8>)
{
  uint64_t v3 = a1[3];
  uint64_t v4 = a1[4];
  sub_10001CD44(a1, v3);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(v4 + 1088))(v3, v4);
  *a2 = result;
  return result;
}

uint64_t sub_1010B4218@<X0>(void *a1@<X0>, unsigned char *a2@<X8>)
{
  uint64_t v3 = a1[3];
  uint64_t v4 = a1[4];
  sub_10001CD44(a1, v3);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(v4 + 1048))(v3, v4);
  *a2 = result;
  return result;
}

uint64_t sub_1010B4270@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = a1[3];
  uint64_t v4 = a1[4];
  sub_10001CD44(a1, v3);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(v4 + 1024))(v3, v4);
  *(void *)a2 = result;
  *(unsigned char *)(a2 + 8) = v6 & 1;
  return result;
}

uint64_t sub_1010B42D0@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = a1[3];
  uint64_t v4 = a1[4];
  sub_10001CD44(a1, v3);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(v4 + 912))(v3, v4);
  *(void *)a2 = result;
  *(unsigned char *)(a2 + 8) = v6 & 1;
  return result;
}

uint64_t sub_1010B4330@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = a1[3];
  uint64_t v4 = a1[4];
  sub_10001CD44(a1, v3);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(v4 + 864))(v3, v4);
  *(void *)a2 = result;
  *(unsigned char *)(a2 + 8) = v6 & 1;
  return result;
}

uint64_t sub_1010B4390@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = a1[3];
  uint64_t v4 = a1[4];
  sub_10001CD44(a1, v3);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(v4 + 848))(v3, v4);
  *(void *)a2 = result;
  *(unsigned char *)(a2 + 8) = v6 & 1;
  return result;
}

uint64_t sub_1010B43F0@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = a1[3];
  uint64_t v4 = a1[4];
  sub_10001CD44(a1, v3);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(v4 + 752))(v3, v4);
  *(void *)a2 = result;
  *(unsigned char *)(a2 + 8) = v6 & 1;
  return result;
}

uint64_t sub_1010B4450@<X0>(void *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v3 = a1[3];
  uint64_t v4 = a1[4];
  sub_10001CD44(a1, v3);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(v4 + 664))(v3, v4);
  *a2 = result;
  return result;
}

uint64_t sub_1010B44A8@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = a1[3];
  uint64_t v4 = a1[4];
  sub_10001CD44(a1, v3);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(v4 + 656))(v3, v4);
  *(void *)a2 = result;
  *(unsigned char *)(a2 + 8) = v6 & 1;
  return result;
}

uint64_t sub_1010B4508@<X0>(void *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v3 = a1[3];
  uint64_t v4 = a1[4];
  sub_10001CD44(a1, v3);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(v4 + 648))(v3, v4);
  *a2 = result;
  a2[1] = v6;
  return result;
}

uint64_t sub_1010B4560@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = a1[3];
  uint64_t v4 = a1[4];
  sub_10001CD44(a1, v3);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(v4 + 640))(v3, v4);
  *(void *)a2 = result;
  *(unsigned char *)(a2 + 8) = v6 & 1;
  return result;
}

uint64_t sub_1010B45C0@<X0>(void *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v3 = a1[3];
  uint64_t v4 = a1[4];
  sub_10001CD44(a1, v3);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(v4 + 632))(v3, v4);
  *a2 = result;
  a2[1] = v6;
  return result;
}

uint64_t sub_1010B4618@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = a1[3];
  uint64_t v4 = a1[4];
  sub_10001CD44(a1, v3);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(v4 + 608))(v3, v4);
  *(void *)a2 = result;
  *(unsigned char *)(a2 + 8) = v6 & 1;
  return result;
}

uint64_t sub_1010B4678@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = a1[3];
  uint64_t v4 = a1[4];
  sub_10001CD44(a1, v3);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(v4 + 568))(v3, v4);
  *(void *)a2 = result;
  *(unsigned char *)(a2 + 8) = v6 & 1;
  return result;
}

uint64_t sub_1010B46D8@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = a1[3];
  uint64_t v4 = a1[4];
  sub_10001CD44(a1, v3);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(v4 + 560))(v3, v4);
  *(void *)a2 = result;
  *(unsigned char *)(a2 + 8) = v6 & 1;
  return result;
}

uint64_t sub_1010B4738@<X0>(void *a1@<X0>, unsigned char *a2@<X8>)
{
  uint64_t v3 = a1[3];
  uint64_t v4 = a1[4];
  sub_10001CD44(a1, v3);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(v4 + 552))(v3, v4);
  *a2 = result;
  return result;
}

uint64_t sub_1010B4790@<X0>(void *a1@<X0>, unsigned char *a2@<X8>)
{
  uint64_t v3 = a1[3];
  uint64_t v4 = a1[4];
  sub_10001CD44(a1, v3);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(v4 + 536))(v3, v4);
  *a2 = result;
  return result;
}

uint64_t sub_1010B47E8@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = a1[3];
  uint64_t v4 = a1[4];
  sub_10001CD44(a1, v3);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(v4 + 488))(v3, v4);
  *(void *)a2 = result;
  *(unsigned char *)(a2 + 8) = v6 & 1;
  return result;
}

uint64_t sub_1010B4848@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = a1[3];
  uint64_t v4 = a1[4];
  sub_10001CD44(a1, v3);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(v4 + 480))(v3, v4);
  *(void *)a2 = result;
  *(unsigned char *)(a2 + 8) = v6 & 1;
  return result;
}

uint64_t sub_1010B48B4@<X0>(void *a1@<X0>, unsigned char *a2@<X8>)
{
  uint64_t v3 = a1[3];
  uint64_t v4 = a1[4];
  sub_10001CD44(a1, v3);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(v4 + 440))(v3, v4);
  *a2 = result;
  return result;
}

uint64_t sub_1010B490C@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = a1[3];
  uint64_t v4 = a1[4];
  sub_10001CD44(a1, v3);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(v4 + 424))(v3, v4);
  *(void *)a2 = result;
  *(unsigned char *)(a2 + 8) = v6 & 1;
  return result;
}