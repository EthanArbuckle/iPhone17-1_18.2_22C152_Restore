Swift::Int sub_100B25970(uint64_t (*a1)(uint64_t, uint64_t), uint64_t a2)
{
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  Swift::Int v25;
  Swift::Int result;
  uint64_t v27;
  Swift::Int v28;
  uint64_t v29;
  uint64_t v30;
  void *v31;
  uint64_t v32;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  int v47;
  uint64_t v48;
  Swift::Int v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  unint64_t v58;
  unint64_t v59;
  unint64_t v60;
  char *v61;
  char *v62;
  uint64_t v63;
  unint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  char v68;
  char *v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  BOOL v75;
  unint64_t v76;
  char *v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  char *v82;
  uint64_t v83;
  uint64_t v84;
  BOOL v85;
  uint64_t v86;
  char v87;
  char *v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  BOOL v92;
  uint64_t v93;
  uint64_t v94;
  char *v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  char *v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  unint64_t v103;
  char *v104;
  char *v105;
  uint64_t v106;
  char *v107;
  uint64_t v108;
  unint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  char v122;
  char v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  unint64_t v128;
  uint64_t v129;
  uint64_t v130;
  char *v131;
  unint64_t v132;
  char *v133;
  char *v134;
  uint64_t v135;
  char *v136;
  Swift::Int v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  void *v141;
  char *v142;
  char *v143;
  uint64_t v144;
  uint64_t v145;
  char *v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  unint64_t v152;
  uint64_t v153;
  uint64_t *v154;
  uint64_t (*v155)(uint64_t, uint64_t);
  uint64_t v156;

  v4 = v3;
  v156 = a2;
  v155 = a1;
  v147 = type metadata accessor for BeaconStatus(0);
  v153 = *(void *)(v147 - 8);
  v5 = __chkstk_darwin(v147);
  v148 = (uint64_t)&v133 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = __chkstk_darwin(v5);
  v151 = (uint64_t)&v133 - v8;
  v9 = __chkstk_darwin(v7);
  v11 = (char *)&v133 - v10;
  v12 = __chkstk_darwin(v9);
  v14 = (char *)&v133 - v13;
  v15 = __chkstk_darwin(v12);
  v17 = (char *)&v133 - v16;
  v18 = __chkstk_darwin(v15);
  v20 = (char *)&v133 - v19;
  v21 = __chkstk_darwin(v18);
  v23 = (char *)&v133 - v22;
  __chkstk_darwin(v21);
  v138 = (uint64_t)&v133 - v24;
  v154 = v2;
  v25 = v2[1];
  result = _minimumMergeRunLength(_:)(v25);
  if (result >= v25)
  {
    if (v25 < 0) {
      goto LABEL_149;
    }
    if (v25) {
      return sub_100B26D64(0, v25, 1, v155);
    }
    return result;
  }
  if (v25 >= 0) {
    v27 = v25;
  }
  else {
    v27 = v25 + 1;
  }
  if (v25 <= -2) {
    goto LABEL_158;
  }
  v137 = result;
  v28 = v25;
  if (v25 < 2)
  {
    v31 = _swiftEmptyArrayStorage;
    v152 = (unint64_t)_swiftEmptyArrayStorage
         + ((*(unsigned __int8 *)(v153 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v153 + 80));
    if (v28 != 1)
    {
      v60 = _swiftEmptyArrayStorage[2];
      v33 = (char *)_swiftEmptyArrayStorage;
      goto LABEL_111;
    }
    v29 = 1;
    v134 = v23;
    v142 = v20;
    v143 = v17;
    v146 = v11;
  }
  else
  {
    v29 = v25;
    v134 = v23;
    v142 = v20;
    v143 = v17;
    v146 = v11;
    v30 = v27 >> 1;
    v31 = (void *)static Array._allocateBufferUninitialized(minimumCapacity:)();
    v31[2] = v30;
    v152 = (unint64_t)v31
         + ((*(unsigned __int8 *)(v153 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v153 + 80));
  }
  v141 = v31;
  v32 = 0;
  v33 = (char *)_swiftEmptyArrayStorage;
  v136 = v14;
  v34 = v29;
  do
  {
    v35 = v32;
    v36 = v32 + 1;
    if (v32 + 1 >= v34)
    {
      v41 = v32 + 1;
      v48 = v32;
LABEL_48:
      if (v41 < v48) {
        goto LABEL_148;
      }
      goto LABEL_49;
    }
    v150 = v34;
    v37 = *v154;
    v38 = *(void *)(v153 + 72);
    v39 = v138;
    sub_100B30D0C(*v154 + v38 * v36, v138, type metadata accessor for BeaconStatus);
    v40 = (uint64_t)v134;
    sub_100B30D0C(v37 + v38 * v35, (uint64_t)v134, type metadata accessor for BeaconStatus);
    LODWORD(v149) = v155(v39, v40);
    if (v4)
    {
      sub_100B310AC(v40, type metadata accessor for BeaconStatus);
      sub_100B310AC(v39, type metadata accessor for BeaconStatus);
LABEL_125:
      swift_bridgeObjectRelease();
      goto LABEL_126;
    }
    sub_100B310AC(v40, type metadata accessor for BeaconStatus);
    sub_100B310AC(v39, type metadata accessor for BeaconStatus);
    v135 = v35;
    v41 = v35 + 2;
    v42 = v150;
    v140 = v37;
    if (v35 + 2 < v150)
    {
      v43 = v37;
      v133 = v33;
      v144 = v38 * v41;
      v145 = v38 * v36;
      while (1)
      {
        v44 = v41;
        v45 = (uint64_t)v142;
        sub_100B30D0C(v43 + v144, (uint64_t)v142, type metadata accessor for BeaconStatus);
        v46 = (uint64_t)v143;
        sub_100B30D0C(v43 + v145, (uint64_t)v143, type metadata accessor for BeaconStatus);
        v47 = v155(v45, v46);
        sub_100B310AC(v46, type metadata accessor for BeaconStatus);
        sub_100B310AC(v45, type metadata accessor for BeaconStatus);
        if ((v149 ^ v47)) {
          break;
        }
        v41 = v44 + 1;
        v43 += v38;
        v42 = v150;
        if (v150 == v44 + 1)
        {
          v41 = v150;
          v33 = v133;
          v4 = 0;
          goto LABEL_23;
        }
      }
      v33 = v133;
      v41 = v44;
      v4 = 0;
      v42 = v150;
LABEL_23:
      v37 = v140;
    }
    v49 = v137;
    v48 = v135;
    if ((v149 & 1) == 0) {
      goto LABEL_37;
    }
    if (v41 < v135) {
      goto LABEL_153;
    }
    if (v135 < v41)
    {
      v133 = v33;
      v50 = 0;
      v51 = v38 * (v41 - 1);
      v52 = v41 * v38;
      v53 = v135;
      v54 = v135 * v38;
      v139 = v38;
      do
      {
        if (v53 != v41 + v50 - 1)
        {
          if (!v37) {
            goto LABEL_156;
          }
          v149 = v37 + v51;
          sub_100B30DB4(v37 + v54, v148, type metadata accessor for BeaconStatus);
          if (v54 < v51 || v37 + v54 >= (unint64_t)(v37 + v52))
          {
            v55 = v149;
            swift_arrayInitWithTakeFrontToBack();
          }
          else
          {
            v55 = v149;
            if (v54 != v51) {
              swift_arrayInitWithTakeBackToFront();
            }
          }
          sub_100B30DB4(v148, v55, type metadata accessor for BeaconStatus);
          v38 = v139;
          v37 = v140;
        }
        ++v53;
        --v50;
        v51 -= v38;
        v52 -= v38;
        v54 += v38;
      }
      while (v53 < v41 + v50);
      v33 = v133;
      v56 = (uint64_t)v136;
      v49 = v137;
      v48 = v135;
      v42 = v150;
      if (v41 >= v150) {
        goto LABEL_48;
      }
    }
    else
    {
LABEL_37:
      v56 = (uint64_t)v136;
      if (v41 >= v42) {
        goto LABEL_48;
      }
    }
    if (__OFSUB__(v41, v48)) {
      goto LABEL_150;
    }
    if (v41 - v48 >= v49) {
      goto LABEL_48;
    }
    if (__OFADD__(v48, v49)) {
      goto LABEL_151;
    }
    if (v48 + v49 >= v42) {
      v57 = v42;
    }
    else {
      v57 = v48 + v49;
    }
    if (v57 < v48)
    {
LABEL_152:
      __break(1u);
LABEL_153:
      __break(1u);
LABEL_154:
      __break(1u);
LABEL_155:
      __break(1u);
LABEL_156:
      __break(1u);
LABEL_157:
      __break(1u);
LABEL_158:
      result = _assertionFailure(_:_:file:line:flags:)();
      __break(1u);
      return result;
    }
    if (v41 == v57) {
      goto LABEL_48;
    }
    v150 = v4;
    v133 = v33;
    v110 = *(void *)(v153 + 72);
    v111 = v110 * (v41 - 1);
    v144 = v110;
    v112 = v41 * v110;
    v135 = v48;
    v140 = v57;
    do
    {
      v113 = 0;
      v114 = v48;
      v149 = v41;
      v145 = v112;
      while (1)
      {
        v116 = *v154;
        sub_100B30D0C(v112 + v113 + *v154, v56, type metadata accessor for BeaconStatus);
        v117 = v111;
        v118 = v111 + v113 + v116;
        v119 = v56;
        v120 = (uint64_t)v146;
        sub_100B30D0C(v118, (uint64_t)v146, type metadata accessor for BeaconStatus);
        v121 = v150;
        v122 = v155(v119, v120);
        v150 = v121;
        if (v121)
        {
          sub_100B310AC(v120, type metadata accessor for BeaconStatus);
          sub_100B310AC(v119, type metadata accessor for BeaconStatus);
          swift_bridgeObjectRelease();
LABEL_126:
          v141[2] = 0;
          return swift_bridgeObjectRelease();
        }
        v123 = v122;
        v124 = v114;
        sub_100B310AC(v120, type metadata accessor for BeaconStatus);
        sub_100B310AC(v119, type metadata accessor for BeaconStatus);
        v56 = v119;
        if ((v123 & 1) == 0) {
          break;
        }
        v125 = *v154;
        if (!*v154) {
          goto LABEL_155;
        }
        v111 = v117;
        v112 = v145;
        v126 = v125 + v111 + v113;
        sub_100B30DB4(v125 + v145 + v113, v151, type metadata accessor for BeaconStatus);
        swift_arrayInitWithTakeFrontToBack();
        sub_100B30DB4(v151, v126, type metadata accessor for BeaconStatus);
        v113 -= v144;
        v114 = v124 + 1;
        v115 = v149;
        if (v149 == v124 + 1) {
          goto LABEL_106;
        }
      }
      v115 = v149;
      v111 = v117;
      v112 = v145;
LABEL_106:
      v41 = v115 + 1;
      v111 += v144;
      v112 += v144;
      v48 = v135;
    }
    while (v41 != v140);
    v41 = v140;
    v33 = v133;
    v4 = v150;
    if (v140 < v135) {
      goto LABEL_148;
    }
LABEL_49:
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
      v33 = sub_100B729CC(0, *((void *)v33 + 2) + 1, 1, v33);
    }
    v59 = *((void *)v33 + 2);
    v58 = *((void *)v33 + 3);
    v60 = v59 + 1;
    v149 = v41;
    if (v59 >= v58 >> 1) {
      v33 = sub_100B729CC((char *)(v58 > 1), v59 + 1, 1, v33);
    }
    *((void *)v33 + 2) = v60;
    v61 = v33 + 32;
    v62 = &v33[16 * v59 + 32];
    v63 = v149;
    *(void *)v62 = v48;
    *((void *)v62 + 1) = v63;
    if (v59)
    {
      while (2)
      {
        v64 = v60 - 1;
        if (v60 >= 4)
        {
          v69 = &v61[16 * v60];
          v70 = *((void *)v69 - 8);
          v71 = *((void *)v69 - 7);
          v75 = __OFSUB__(v71, v70);
          v72 = v71 - v70;
          if (v75) {
            goto LABEL_133;
          }
          v74 = *((void *)v69 - 6);
          v73 = *((void *)v69 - 5);
          v75 = __OFSUB__(v73, v74);
          v67 = v73 - v74;
          v68 = v75;
          if (v75) {
            goto LABEL_134;
          }
          v76 = v60 - 2;
          v77 = &v61[16 * v60 - 32];
          v79 = *(void *)v77;
          v78 = *((void *)v77 + 1);
          v75 = __OFSUB__(v78, v79);
          v80 = v78 - v79;
          if (v75) {
            goto LABEL_136;
          }
          v75 = __OFADD__(v67, v80);
          v81 = v67 + v80;
          if (v75) {
            goto LABEL_139;
          }
          if (v81 >= v72)
          {
            v99 = &v61[16 * v64];
            v101 = *(void *)v99;
            v100 = *((void *)v99 + 1);
            v75 = __OFSUB__(v100, v101);
            v102 = v100 - v101;
            if (v75) {
              goto LABEL_143;
            }
            v92 = v67 < v102;
          }
          else
          {
LABEL_67:
            if (v68) {
              goto LABEL_135;
            }
            v76 = v60 - 2;
            v82 = &v61[16 * v60 - 32];
            v84 = *(void *)v82;
            v83 = *((void *)v82 + 1);
            v85 = __OFSUB__(v83, v84);
            v86 = v83 - v84;
            v87 = v85;
            if (v85) {
              goto LABEL_138;
            }
            v88 = &v61[16 * v64];
            v90 = *(void *)v88;
            v89 = *((void *)v88 + 1);
            v75 = __OFSUB__(v89, v90);
            v91 = v89 - v90;
            if (v75) {
              goto LABEL_141;
            }
            if (__OFADD__(v86, v91)) {
              goto LABEL_142;
            }
            if (v86 + v91 < v67) {
              goto LABEL_79;
            }
            v92 = v67 < v91;
          }
          if (v92) {
            v64 = v76;
          }
        }
        else
        {
          if (v60 == 3)
          {
            v66 = *((void *)v33 + 4);
            v65 = *((void *)v33 + 5);
            v75 = __OFSUB__(v65, v66);
            v67 = v65 - v66;
            v68 = v75;
            goto LABEL_67;
          }
          v93 = *((void *)v33 + 4);
          v94 = *((void *)v33 + 5);
          v75 = __OFSUB__(v94, v93);
          v86 = v94 - v93;
          v87 = v75;
LABEL_79:
          if (v87) {
            goto LABEL_137;
          }
          v95 = &v61[16 * v64];
          v97 = *(void *)v95;
          v96 = *((void *)v95 + 1);
          v75 = __OFSUB__(v96, v97);
          v98 = v96 - v97;
          if (v75) {
            goto LABEL_140;
          }
          if (v98 < v86) {
            goto LABEL_96;
          }
        }
        v103 = v64 - 1;
        if (v64 - 1 >= v60)
        {
          __break(1u);
LABEL_130:
          __break(1u);
LABEL_131:
          __break(1u);
LABEL_132:
          __break(1u);
LABEL_133:
          __break(1u);
LABEL_134:
          __break(1u);
LABEL_135:
          __break(1u);
LABEL_136:
          __break(1u);
LABEL_137:
          __break(1u);
LABEL_138:
          __break(1u);
LABEL_139:
          __break(1u);
LABEL_140:
          __break(1u);
LABEL_141:
          __break(1u);
LABEL_142:
          __break(1u);
LABEL_143:
          __break(1u);
LABEL_144:
          __break(1u);
LABEL_145:
          __break(1u);
LABEL_146:
          __break(1u);
LABEL_147:
          __break(1u);
LABEL_148:
          __break(1u);
LABEL_149:
          __break(1u);
LABEL_150:
          __break(1u);
LABEL_151:
          __break(1u);
          goto LABEL_152;
        }
        if (!*v154) {
          goto LABEL_154;
        }
        v104 = v33;
        v105 = &v61[16 * v103];
        v106 = *(void *)v105;
        v107 = &v61[16 * v64];
        v108 = *((void *)v107 + 1);
        sub_100B27DB8(*v154 + *(void *)(v153 + 72) * *(void *)v105, *v154 + *(void *)(v153 + 72) * *(void *)v107, *v154 + *(void *)(v153 + 72) * v108, v152, (uint64_t (*)(char *, char *))v155, v156);
        if (v4) {
          goto LABEL_125;
        }
        if (v108 < v106) {
          goto LABEL_130;
        }
        if (v64 > *((void *)v104 + 2)) {
          goto LABEL_131;
        }
        *(void *)v105 = v106;
        *(void *)&v61[16 * v103 + 8] = v108;
        v109 = *((void *)v104 + 2);
        if (v64 >= v109) {
          goto LABEL_132;
        }
        v33 = v104;
        v60 = v109 - 1;
        memmove(&v61[16 * v64], v107 + 16, 16 * (v109 - 1 - v64));
        *((void *)v33 + 2) = v109 - 1;
        if (v109 <= 2) {
          goto LABEL_96;
        }
        continue;
      }
    }
    v60 = 1;
LABEL_96:
    v34 = v154[1];
    v32 = v149;
    v31 = v141;
  }
  while (v149 < v34);
LABEL_111:
  if (v60 >= 2)
  {
    v127 = *v154;
    v141 = v31;
    do
    {
      v128 = v60 - 2;
      if (v60 < 2) {
        goto LABEL_144;
      }
      if (!v127) {
        goto LABEL_157;
      }
      v129 = *(void *)&v33[16 * v128 + 32];
      v130 = *(void *)&v33[16 * v60 + 24];
      sub_100B27DB8(v127 + *(void *)(v153 + 72) * v129, v127 + *(void *)(v153 + 72) * *(void *)&v33[16 * v60 + 16], v127 + *(void *)(v153 + 72) * v130, v152, (uint64_t (*)(char *, char *))v155, v156);
      if (v4) {
        goto LABEL_125;
      }
      if (v130 < v129) {
        goto LABEL_145;
      }
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
        v33 = sub_100B73584((uint64_t)v33);
      }
      if (v128 >= *((void *)v33 + 2)) {
        goto LABEL_146;
      }
      v131 = &v33[16 * v128 + 32];
      *(void *)v131 = v129;
      *((void *)v131 + 1) = v130;
      v132 = *((void *)v33 + 2);
      if (v60 > v132) {
        goto LABEL_147;
      }
      memmove(&v33[16 * v60 + 16], &v33[16 * v60 + 32], 16 * (v132 - v60));
      *((void *)v33 + 2) = v132 - 1;
      v60 = v132 - 1;
      v31 = v141;
    }
    while (v132 > 2);
  }
  swift_bridgeObjectRelease();
  v31[2] = 0;
  return swift_bridgeObjectRelease();
}

uint64_t sub_100B26658(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  v53 = a4;
  uint64_t v39 = a1;
  uint64_t v43 = sub_10000588C(&qword_1016594C0);
  uint64_t v6 = __chkstk_darwin(v43);
  v56 = (char *)&v37 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  v9 = (char *)&v37 - v8;
  uint64_t v48 = type metadata accessor for BeaconEstimatedLocation();
  uint64_t v10 = __chkstk_darwin(v48);
  uint64_t v50 = (uint64_t)&v37 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = __chkstk_darwin(v10);
  v14 = (char *)&v37 - v13;
  uint64_t result = __chkstk_darwin(v12);
  v18 = (char *)&v37 - v17;
  uint64_t v47 = a3;
  uint64_t v38 = a2;
  if (a3 != a2)
  {
    uint64_t v19 = *(void *)(v16 + 72);
    uint64_t v20 = v19 * (v47 - 1);
    uint64_t v44 = v19;
    uint64_t v21 = v19 * v47;
    v41 = v14;
    v42 = v9;
    v40 = (char *)&v37 - v17;
LABEL_5:
    uint64_t v22 = 0;
    uint64_t v54 = v39;
    uint64_t v45 = v21;
    uint64_t v46 = v20;
    while (1)
    {
      uint64_t v23 = *v53;
      uint64_t v52 = v21 + v22;
      sub_100B30D0C(v21 + v22 + v23, (uint64_t)v18, (uint64_t (*)(void))type metadata accessor for BeaconEstimatedLocation);
      uint64_t v51 = v20 + v22;
      sub_100B30D0C(v20 + v22 + v23, (uint64_t)v14, (uint64_t (*)(void))type metadata accessor for BeaconEstimatedLocation);
      uint64_t v25 = *(int *)(v48 + 40);
      uint64_t v24 = *(int *)(v48 + 44);
      unsigned int v26 = v18[v24];
      v27 = &v18[v25];
      unsigned int v28 = v14[v24];
      v55 = &v14[v25];
      unsigned char *v9 = v26;
      uint64_t v29 = v43;
      v30 = &v9[*(int *)(v43 + 48)];
      uint64_t v31 = type metadata accessor for Date();
      v32 = *(void (**)(unsigned char *, char *, uint64_t))(*(void *)(v31 - 8) + 16);
      v49 = v30;
      v32(v30, v27, v31);
      v33 = v56;
      unsigned char *v56 = v28;
      v32(&v33[*(int *)(v29 + 48)], v55, v31);
      if (v26 == v28)
      {
        sub_100B22DA4((unint64_t *)&qword_1016605E0, (void (*)(uint64_t))&type metadata accessor for Date);
        char v34 = dispatch thunk of static Comparable.> infix(_:_:)();
      }
      else
      {
        char v34 = v28 < v26;
      }
      sub_10001DAB4((uint64_t)v56, &qword_1016594C0);
      v9 = v42;
      sub_10001DAB4((uint64_t)v42, &qword_1016594C0);
      v14 = v41;
      sub_100B310AC((uint64_t)v41, (uint64_t (*)(void))type metadata accessor for BeaconEstimatedLocation);
      v18 = v40;
      uint64_t result = sub_100B310AC((uint64_t)v40, (uint64_t (*)(void))type metadata accessor for BeaconEstimatedLocation);
      uint64_t v21 = v45;
      uint64_t v20 = v46;
      if ((v34 & 1) == 0)
      {
LABEL_4:
        v20 += v44;
        v21 += v44;
        if (++v47 == v38) {
          return result;
        }
        goto LABEL_5;
      }
      uint64_t v35 = *v53;
      if (!*v53) {
        break;
      }
      uint64_t v36 = v35 + v46 + v22;
      sub_100B30DB4(v35 + v45 + v22, v50, (uint64_t (*)(void))type metadata accessor for BeaconEstimatedLocation);
      swift_arrayInitWithTakeFrontToBack();
      uint64_t result = sub_100B30DB4(v50, v36, (uint64_t (*)(void))type metadata accessor for BeaconEstimatedLocation);
      v22 -= v44;
      if (v47 == ++v54) {
        goto LABEL_4;
      }
    }
    __break(1u);
  }
  return result;
}

uint64_t sub_100B26AA0(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  uint64_t v26 = a1;
  uint64_t v29 = type metadata accessor for OwnedBeaconRecord();
  uint64_t v7 = __chkstk_darwin(v29);
  uint64_t v30 = (uint64_t)&v24 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = __chkstk_darwin(v7);
  uint64_t v11 = (char *)&v24 - v10;
  uint64_t result = __chkstk_darwin(v9);
  v15 = (char *)&v24 - v14;
  uint64_t v28 = a3;
  uint64_t v25 = a2;
  if (a3 != a2)
  {
    uint64_t v16 = *(void *)(v13 + 72);
    uint64_t v32 = v16 * (v28 - 1);
    uint64_t v27 = v16;
    uint64_t v31 = v16 * v28;
LABEL_5:
    uint64_t v17 = 0;
    uint64_t v18 = v26;
    while (1)
    {
      uint64_t v19 = a4;
      uint64_t v20 = *a4;
      sub_100B30D0C(v31 + v17 + v20, (uint64_t)v15, (uint64_t (*)(void))type metadata accessor for OwnedBeaconRecord);
      sub_100B30D0C(v32 + v17 + v20, (uint64_t)v11, (uint64_t (*)(void))type metadata accessor for OwnedBeaconRecord);
      char v21 = static Date.< infix(_:_:)();
      sub_100B310AC((uint64_t)v11, (uint64_t (*)(void))type metadata accessor for OwnedBeaconRecord);
      a4 = v19;
      uint64_t result = sub_100B310AC((uint64_t)v15, (uint64_t (*)(void))type metadata accessor for OwnedBeaconRecord);
      if ((v21 & 1) == 0)
      {
LABEL_4:
        v32 += v27;
        v31 += v27;
        if (++v28 == v25) {
          return result;
        }
        goto LABEL_5;
      }
      uint64_t v22 = *v19;
      if (!*v19) {
        break;
      }
      uint64_t v23 = v22 + v32 + v17;
      sub_100B30DB4(v22 + v31 + v17, v30, (uint64_t (*)(void))type metadata accessor for OwnedBeaconRecord);
      swift_arrayInitWithTakeFrontToBack();
      uint64_t result = sub_100B30DB4(v30, v23, (uint64_t (*)(void))type metadata accessor for OwnedBeaconRecord);
      v17 -= v27;
      ++v18;
      a4 = v19;
      if (v28 == v18) {
        goto LABEL_4;
      }
    }
    __break(1u);
  }
  return result;
}

uint64_t sub_100B26D64(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(uint64_t, uint64_t))
{
  uint64_t v35 = a4;
  uint64_t v29 = type metadata accessor for BeaconStatus(0);
  uint64_t v7 = __chkstk_darwin(v29);
  uint64_t v38 = (uint64_t)&v26 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = __chkstk_darwin(v7);
  uint64_t v34 = (uint64_t)&v26 - v10;
  uint64_t result = __chkstk_darwin(v9);
  uint64_t v33 = (uint64_t)&v26 - v13;
  uint64_t v28 = a2;
  if (a3 != a2)
  {
    uint64_t v14 = *(void *)(v12 + 72);
    uint64_t v15 = v14 * (a3 - 1);
    uint64_t v30 = v14;
    uint64_t v16 = v14 * a3;
    uint64_t v27 = a1;
LABEL_4:
    uint64_t v17 = 0;
    uint64_t v31 = v16;
    uint64_t v32 = a3;
    while (1)
    {
      uint64_t v19 = *v39;
      uint64_t v36 = v16 + v17;
      uint64_t v37 = a1;
      uint64_t v20 = v33;
      sub_100B30D0C(v16 + v17 + v19, v33, type metadata accessor for BeaconStatus);
      uint64_t v21 = v34;
      sub_100B30D0C(v15 + v17 + v19, v34, type metadata accessor for BeaconStatus);
      uint64_t v22 = v40;
      char v23 = v35(v20, v21);
      sub_100B310AC(v21, type metadata accessor for BeaconStatus);
      uint64_t result = sub_100B310AC(v20, type metadata accessor for BeaconStatus);
      uint64_t v40 = v22;
      if (v22) {
        break;
      }
      if ((v23 & 1) == 0)
      {
        uint64_t v16 = v31;
        uint64_t v18 = v32;
LABEL_11:
        a3 = v18 + 1;
        v15 += v30;
        v16 += v30;
        a1 = v27;
        if (a3 != v28) {
          goto LABEL_4;
        }
        return result;
      }
      uint64_t v24 = *v39;
      if (!*v39)
      {
        __break(1u);
        return result;
      }
      uint64_t v16 = v31;
      uint64_t v25 = v24 + v15 + v17;
      sub_100B30DB4(v24 + v31 + v17, v38, type metadata accessor for BeaconStatus);
      swift_arrayInitWithTakeFrontToBack();
      uint64_t result = sub_100B30DB4(v38, v25, type metadata accessor for BeaconStatus);
      v17 -= v30;
      a1 = v37 + 1;
      uint64_t v18 = v32;
      if (v32 == v37 + 1) {
        goto LABEL_11;
      }
    }
  }
  return result;
}

uint64_t sub_100B27040(unint64_t a1, unint64_t a2, unint64_t a3, unint64_t a4)
{
  uint64_t v90 = sub_10000588C(&qword_1016594C0);
  uint64_t v8 = __chkstk_darwin(v90);
  v89 = (char *)&v78 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = __chkstk_darwin(v8);
  uint64_t v12 = (char *)&v78 - v11;
  uint64_t v13 = __chkstk_darwin(v10);
  v88 = (char *)&v78 - v14;
  __chkstk_darwin(v13);
  uint64_t v16 = (char *)&v78 - v15;
  uint64_t v92 = type metadata accessor for BeaconEstimatedLocation();
  uint64_t v17 = __chkstk_darwin(v92);
  uint64_t v87 = (uint64_t)&v78 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v19 = __chkstk_darwin(v17);
  uint64_t v86 = (uint64_t)&v78 - v20;
  uint64_t v21 = __chkstk_darwin(v19);
  uint64_t v85 = (uint64_t)&v78 - v22;
  __chkstk_darwin(v21);
  uint64_t v84 = (uint64_t)&v78 - v23;
  uint64_t v25 = *(void *)(v24 + 72);
  if (!v25)
  {
    __break(1u);
LABEL_68:
    __break(1u);
LABEL_69:
    __break(1u);
    goto LABEL_70;
  }
  if (a2 - a1 == 0x8000000000000000 && v25 == -1) {
    goto LABEL_68;
  }
  int64_t v26 = a3 - a2;
  if (a3 - a2 == 0x8000000000000000 && v25 == -1) {
    goto LABEL_69;
  }
  uint64_t v27 = (uint64_t)(a2 - a1) / v25;
  v96 = (unsigned char *)a1;
  v95 = (unsigned char *)a4;
  uint64_t v28 = v26 / v25;
  if (v27 >= v26 / v25)
  {
    if ((v28 & 0x8000000000000000) == 0)
    {
      uint64_t v30 = v28 * v25;
      if (a4 < a2 || a2 + v30 <= a4)
      {
        swift_arrayInitWithTakeFrontToBack();
      }
      else if (a4 != a2)
      {
        swift_arrayInitWithTakeBackToFront();
      }
      unint64_t v52 = a4 + v30;
      unint64_t v94 = a4 + v30;
      v96 = (unsigned char *)a2;
      if (v30 >= 1 && a1 < a2)
      {
        uint64_t v54 = -v25;
        unint64_t v82 = a1;
        unint64_t v83 = a4;
        v81 = v12;
        uint64_t v85 = v54;
        do
        {
          unint64_t v91 = a3;
          uint64_t v55 = v86;
          sub_100B30D0C(v52 + v54, v86, (uint64_t (*)(void))type metadata accessor for BeaconEstimatedLocation);
          unint64_t v93 = a2;
          v88 = (unsigned char *)(a2 + v54);
          uint64_t v56 = v87;
          sub_100B30D0C(a2 + v54, v87, (uint64_t (*)(void))type metadata accessor for BeaconEstimatedLocation);
          uint64_t v58 = *(int *)(v92 + 40);
          uint64_t v57 = *(int *)(v92 + 44);
          unsigned int v59 = *(unsigned __int8 *)(v55 + v57);
          uint64_t v60 = v55 + v58;
          unsigned int v61 = *(unsigned __int8 *)(v56 + v57);
          uint64_t v62 = v56 + v58;
          *uint64_t v12 = v59;
          uint64_t v63 = v90;
          v64 = &v12[*(int *)(v90 + 48)];
          uint64_t v65 = type metadata accessor for Date();
          v66 = *(void (**)(unsigned char *, uint64_t, uint64_t))(*(void *)(v65 - 8) + 16);
          v66(v64, v60, v65);
          v67 = v89;
          unsigned char *v89 = v61;
          v66(&v67[*(int *)(v63 + 48)], v62, v65);
          if (v59 == v61)
          {
            sub_100B22DA4((unint64_t *)&qword_1016605E0, (void (*)(uint64_t))&type metadata accessor for Date);
            char v68 = dispatch thunk of static Comparable.> infix(_:_:)();
          }
          else
          {
            char v68 = v61 < v59;
          }
          unint64_t v69 = v91;
          uint64_t v54 = v85;
          unint64_t v70 = v91 + v85;
          sub_10001DAB4((uint64_t)v89, &qword_1016594C0);
          uint64_t v12 = v81;
          sub_10001DAB4((uint64_t)v81, &qword_1016594C0);
          sub_100B310AC(v87, (uint64_t (*)(void))type metadata accessor for BeaconEstimatedLocation);
          sub_100B310AC(v86, (uint64_t (*)(void))type metadata accessor for BeaconEstimatedLocation);
          v71 = (unsigned char *)v93;
          unint64_t v72 = v82;
          if (v68)
          {
            unint64_t v73 = v83;
            if (v69 < v93 || v70 >= v93)
            {
              v75 = v88;
              swift_arrayInitWithTakeFrontToBack();
            }
            else
            {
              BOOL v74 = v69 == v93;
              v75 = v88;
              if (!v74) {
                swift_arrayInitWithTakeBackToFront();
              }
            }
            v96 += v54;
          }
          else
          {
            unint64_t v76 = v94;
            v94 += v54;
            unint64_t v73 = v83;
            if (v69 < v76 || v70 >= v76)
            {
              swift_arrayInitWithTakeFrontToBack();
            }
            else if (v69 != v76)
            {
              swift_arrayInitWithTakeBackToFront();
            }
            v75 = v71;
          }
          unint64_t v52 = v94;
          if (v94 <= v73) {
            break;
          }
          a2 = (unint64_t)v75;
          a3 = v70;
        }
        while ((unint64_t)v75 > v72);
      }
      goto LABEL_66;
    }
  }
  else if ((v27 & 0x8000000000000000) == 0)
  {
    uint64_t v29 = v27 * v25;
    if (a4 < a1 || a1 + v29 <= a4)
    {
      swift_arrayInitWithTakeFrontToBack();
    }
    else if (a4 != a1)
    {
      swift_arrayInitWithTakeBackToFront();
    }
    v89 = (unsigned char *)(a4 + v29);
    unint64_t v94 = a4 + v29;
    if (v29 >= 1 && a2 < a3)
    {
      unint64_t v91 = a3;
      v79 = v16;
      uint64_t v80 = v25;
      do
      {
        unint64_t v93 = a2;
        uint64_t v32 = v84;
        sub_100B30D0C(a2, v84, (uint64_t (*)(void))type metadata accessor for BeaconEstimatedLocation);
        uint64_t v33 = v85;
        sub_100B30D0C(a4, v85, (uint64_t (*)(void))type metadata accessor for BeaconEstimatedLocation);
        uint64_t v35 = *(int *)(v92 + 40);
        uint64_t v34 = *(int *)(v92 + 44);
        unsigned int v36 = *(unsigned __int8 *)(v32 + v34);
        uint64_t v37 = v32 + v35;
        unsigned int v38 = *(unsigned __int8 *)(v33 + v34);
        uint64_t v39 = v33 + v35;
        *uint64_t v16 = v36;
        uint64_t v40 = v90;
        v41 = &v16[*(int *)(v90 + 48)];
        uint64_t v42 = type metadata accessor for Date();
        uint64_t v43 = *(void (**)(unsigned char *, uint64_t, uint64_t))(*(void *)(v42 - 8) + 16);
        v43(v41, v37, v42);
        uint64_t v44 = v88;
        unsigned char *v88 = v38;
        v43(&v44[*(int *)(v40 + 48)], v39, v42);
        if (v36 == v38)
        {
          sub_100B22DA4((unint64_t *)&qword_1016605E0, (void (*)(uint64_t))&type metadata accessor for Date);
          char v45 = dispatch thunk of static Comparable.> infix(_:_:)();
        }
        else
        {
          char v45 = v38 < v36;
        }
        sub_10001DAB4((uint64_t)v88, &qword_1016594C0);
        uint64_t v16 = v79;
        sub_10001DAB4((uint64_t)v79, &qword_1016594C0);
        sub_100B310AC(v85, (uint64_t (*)(void))type metadata accessor for BeaconEstimatedLocation);
        sub_100B310AC(v84, (uint64_t (*)(void))type metadata accessor for BeaconEstimatedLocation);
        unint64_t v46 = (unint64_t)v96;
        uint64_t v47 = v80;
        if (v45)
        {
          unint64_t v48 = v93 + v80;
          if ((unint64_t)v96 < v93 || (unint64_t)v96 >= v48)
          {
            swift_arrayInitWithTakeFrontToBack();
            unint64_t v49 = v91;
          }
          else
          {
            unint64_t v49 = v91;
            if (v96 == (unsigned char *)v93) {
              unint64_t v46 = v93;
            }
            else {
              swift_arrayInitWithTakeBackToFront();
            }
          }
        }
        else
        {
          unint64_t v50 = (unint64_t)&v95[v80];
          if (v96 < v95 || (unint64_t)v96 >= v50)
          {
            swift_arrayInitWithTakeFrontToBack();
            unint64_t v49 = v91;
            unint64_t v51 = v93;
          }
          else
          {
            unint64_t v49 = v91;
            unint64_t v51 = v93;
            if (v96 != v95) {
              swift_arrayInitWithTakeBackToFront();
            }
          }
          v95 = (unsigned char *)v50;
          unint64_t v48 = v51;
        }
        v96 = (unsigned char *)(v46 + v47);
        a4 = (unint64_t)v95;
        if (v95 >= v89) {
          break;
        }
        a2 = v48;
      }
      while (v48 < v49);
    }
LABEL_66:
    sub_100B72CA4((unint64_t *)&v96, (unint64_t *)&v95, (uint64_t *)&v94);
    return 1;
  }
LABEL_70:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_100B2789C(unint64_t a1, unint64_t a2, unint64_t a3, unint64_t a4)
{
  uint64_t v44 = type metadata accessor for OwnedBeaconRecord();
  uint64_t v8 = __chkstk_darwin(v44);
  uint64_t v43 = (uint64_t)&v40 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8);
  uint64_t v11 = (char *)&v40 - v10;
  uint64_t v13 = *(void *)(v12 + 72);
  if (!v13)
  {
    __break(1u);
LABEL_61:
    __break(1u);
LABEL_62:
    __break(1u);
    goto LABEL_63;
  }
  if (a2 - a1 == 0x8000000000000000 && v13 == -1) {
    goto LABEL_61;
  }
  int64_t v14 = a3 - a2;
  if (a3 - a2 == 0x8000000000000000 && v13 == -1) {
    goto LABEL_62;
  }
  uint64_t v15 = (uint64_t)(a2 - a1) / v13;
  unint64_t v47 = a1;
  unint64_t v46 = a4;
  uint64_t v16 = v14 / v13;
  if (v15 >= v14 / v13)
  {
    if ((v16 & 0x8000000000000000) == 0)
    {
      uint64_t v18 = v16 * v13;
      if (a4 < a2 || a2 + v18 <= a4)
      {
        swift_arrayInitWithTakeFrontToBack();
      }
      else if (a4 != a2)
      {
        swift_arrayInitWithTakeBackToFront();
      }
      unint64_t v26 = a4 + v18;
      unint64_t v45 = a4 + v18;
      unint64_t v47 = a2;
      if (v18 >= 1 && a1 < a2)
      {
        unint64_t v41 = a4;
        unint64_t v42 = a1;
        do
        {
          unint64_t v28 = a3 - v13;
          sub_100B30D0C(v26 - v13, (uint64_t)v11, (uint64_t (*)(void))type metadata accessor for OwnedBeaconRecord);
          unint64_t v29 = a2 - v13;
          unint64_t v30 = a3;
          uint64_t v31 = (uint64_t)v11;
          uint64_t v32 = v43;
          sub_100B30D0C(a2 - v13, v43, (uint64_t (*)(void))type metadata accessor for OwnedBeaconRecord);
          char v33 = static Date.< infix(_:_:)();
          uint64_t v34 = v32;
          uint64_t v11 = (char *)v31;
          sub_100B310AC(v34, (uint64_t (*)(void))type metadata accessor for OwnedBeaconRecord);
          sub_100B310AC(v31, (uint64_t (*)(void))type metadata accessor for OwnedBeaconRecord);
          if (v33)
          {
            if (v30 < a2 || v28 >= a2)
            {
              swift_arrayInitWithTakeFrontToBack();
              unint64_t v36 = v41;
              unint64_t v37 = v42;
            }
            else
            {
              BOOL v35 = v30 == a2;
              unint64_t v36 = v41;
              unint64_t v37 = v42;
              if (!v35) {
                swift_arrayInitWithTakeBackToFront();
              }
            }
            v47 -= v13;
          }
          else
          {
            unint64_t v38 = v45;
            v45 -= v13;
            if (v30 < v38 || v28 >= v38)
            {
              swift_arrayInitWithTakeFrontToBack();
              unint64_t v29 = a2;
              unint64_t v36 = v41;
              unint64_t v37 = v42;
            }
            else
            {
              unint64_t v37 = v42;
              if (v30 != v38) {
                swift_arrayInitWithTakeBackToFront();
              }
              unint64_t v29 = a2;
              unint64_t v36 = v41;
            }
          }
          unint64_t v26 = v45;
          if (v45 <= v36) {
            break;
          }
          a2 = v29;
          a3 = v28;
        }
        while (v29 > v37);
      }
      goto LABEL_59;
    }
  }
  else if ((v15 & 0x8000000000000000) == 0)
  {
    uint64_t v17 = v15 * v13;
    if (a4 < a1 || a1 + v17 <= a4)
    {
      swift_arrayInitWithTakeFrontToBack();
    }
    else if (a4 != a1)
    {
      swift_arrayInitWithTakeBackToFront();
    }
    unint64_t v19 = a4 + v17;
    unint64_t v45 = a4 + v17;
    if (v17 >= 1 && a2 < a3)
    {
      do
      {
        sub_100B30D0C(a2, (uint64_t)v11, (uint64_t (*)(void))type metadata accessor for OwnedBeaconRecord);
        uint64_t v21 = v43;
        sub_100B30D0C(a4, v43, (uint64_t (*)(void))type metadata accessor for OwnedBeaconRecord);
        char v22 = static Date.< infix(_:_:)();
        sub_100B310AC(v21, (uint64_t (*)(void))type metadata accessor for OwnedBeaconRecord);
        sub_100B310AC((uint64_t)v11, (uint64_t (*)(void))type metadata accessor for OwnedBeaconRecord);
        unint64_t v23 = v47;
        if (v22)
        {
          unint64_t v24 = a2 + v13;
          if (v47 < a2 || v47 >= v24)
          {
            swift_arrayInitWithTakeFrontToBack();
          }
          else if (v47 == a2)
          {
            unint64_t v23 = a2;
          }
          else
          {
            swift_arrayInitWithTakeBackToFront();
          }
        }
        else
        {
          unint64_t v25 = v46 + v13;
          if (v47 < v46 || v47 >= v25)
          {
            swift_arrayInitWithTakeFrontToBack();
          }
          else if (v47 != v46)
          {
            swift_arrayInitWithTakeBackToFront();
          }
          unint64_t v46 = v25;
          unint64_t v24 = a2;
        }
        unint64_t v47 = v23 + v13;
        a4 = v46;
        if (v46 >= v19) {
          break;
        }
        a2 = v24;
      }
      while (v24 < a3);
    }
LABEL_59:
    sub_100B72D38(&v47, &v46, (uint64_t *)&v45);
    return 1;
  }
LABEL_63:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_100B27DB8(unint64_t a1, unint64_t a2, unint64_t a3, unint64_t a4, uint64_t (*a5)(char *, char *), uint64_t a6)
{
  unint64_t v7 = v6;
  uint64_t v55 = a6;
  uint64_t v56 = a5;
  uint64_t v54 = type metadata accessor for BeaconStatus(0);
  uint64_t v12 = __chkstk_darwin(v54);
  int64_t v14 = (char *)&v49 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = __chkstk_darwin(v12);
  uint64_t v16 = __chkstk_darwin(v15);
  uint64_t v18 = (char *)&v49 - v17;
  __chkstk_darwin(v16);
  uint64_t v21 = (char *)&v49 - v20;
  uint64_t v23 = *(void *)(v22 + 72);
  if (!v23)
  {
    __break(1u);
LABEL_66:
    __break(1u);
LABEL_67:
    __break(1u);
    goto LABEL_68;
  }
  if (a2 - a1 == 0x8000000000000000 && v23 == -1) {
    goto LABEL_66;
  }
  int64_t v24 = a3 - a2;
  if (a3 - a2 == 0x8000000000000000 && v23 == -1) {
    goto LABEL_67;
  }
  uint64_t v25 = (uint64_t)(a2 - a1) / v23;
  unint64_t v59 = a1;
  unint64_t v58 = a4;
  uint64_t v26 = v24 / v23;
  if (v25 >= v24 / v23)
  {
    if ((v26 & 0x8000000000000000) == 0)
    {
      uint64_t v28 = v23;
      unint64_t v29 = a3;
      uint64_t v30 = v26 * v28;
      uint64_t v31 = v19;
      if (a4 < a2 || a2 + v30 <= a4)
      {
        swift_arrayInitWithTakeFrontToBack();
      }
      else if (a4 != a2)
      {
        swift_arrayInitWithTakeBackToFront();
      }
      unint64_t v38 = a4 + v30;
      unint64_t v57 = a4 + v30;
      unint64_t v59 = a2;
      if (v30 < 1 || a1 >= a2) {
        goto LABEL_63;
      }
      unint64_t v51 = a4;
      unint64_t v52 = (unint64_t)v14;
      uint64_t v40 = -v28;
      unint64_t v49 = a1;
      uint64_t v50 = -v28;
      while (1)
      {
        sub_100B30D0C(v38 + v40, v31, type metadata accessor for BeaconStatus);
        unint64_t v41 = a2;
        a2 += v40;
        uint64_t v21 = (char *)v31;
        uint64_t v18 = (char *)v52;
        sub_100B30D0C(a2, v52, type metadata accessor for BeaconStatus);
        char v42 = v56(v21, v18);
        if (v7) {
          goto LABEL_62;
        }
        char v43 = v42;
        unint64_t v53 = 0;
        unint64_t v44 = v29 + v40;
        sub_100B310AC((uint64_t)v18, type metadata accessor for BeaconStatus);
        sub_100B310AC((uint64_t)v21, type metadata accessor for BeaconStatus);
        uint64_t v31 = (uint64_t)v21;
        if (v43)
        {
          if (v29 < v41 || v44 >= v41)
          {
            swift_arrayInitWithTakeFrontToBack();
            unint64_t v46 = v51;
          }
          else
          {
            BOOL v45 = v29 == v41;
            unint64_t v46 = v51;
            if (!v45) {
              swift_arrayInitWithTakeBackToFront();
            }
          }
          uint64_t v40 = v50;
          v59 += v50;
        }
        else
        {
          unint64_t v47 = v57;
          v57 += v40;
          if (v29 < v47 || v44 >= v47)
          {
            swift_arrayInitWithTakeFrontToBack();
          }
          else if (v29 != v47)
          {
            swift_arrayInitWithTakeBackToFront();
          }
          a2 = v41;
          uint64_t v40 = v50;
          unint64_t v46 = v51;
        }
        unint64_t v38 = v57;
        if (v57 > v46)
        {
          unint64_t v29 = v44;
          unint64_t v7 = v53;
          if (a2 > v49) {
            continue;
          }
        }
        goto LABEL_63;
      }
    }
  }
  else
  {
    unint64_t v53 = a3;
    if ((v25 & 0x8000000000000000) == 0)
    {
      uint64_t v27 = v25 * v23;
      if (a4 < a1 || a1 + v27 <= a4)
      {
        swift_arrayInitWithTakeFrontToBack();
      }
      else if (a4 != a1)
      {
        swift_arrayInitWithTakeBackToFront();
      }
      unint64_t v52 = a4 + v27;
      unint64_t v57 = a4 + v27;
      if (v27 < 1 || a2 >= v53) {
        goto LABEL_63;
      }
      while (1)
      {
        sub_100B30D0C(a2, (uint64_t)v21, type metadata accessor for BeaconStatus);
        sub_100B30D0C(a4, (uint64_t)v18, type metadata accessor for BeaconStatus);
        char v33 = v56(v21, v18);
        if (v6) {
          break;
        }
        char v34 = v33;
        sub_100B310AC((uint64_t)v18, type metadata accessor for BeaconStatus);
        sub_100B310AC((uint64_t)v21, type metadata accessor for BeaconStatus);
        unint64_t v35 = v59;
        if (v34)
        {
          unint64_t v36 = a2 + v23;
          if (v59 < a2 || v59 >= v36)
          {
            swift_arrayInitWithTakeFrontToBack();
          }
          else if (v59 == a2)
          {
            unint64_t v35 = a2;
          }
          else
          {
            swift_arrayInitWithTakeBackToFront();
          }
        }
        else
        {
          unint64_t v37 = v58 + v23;
          if (v59 < v58 || v59 >= v37)
          {
            swift_arrayInitWithTakeFrontToBack();
          }
          else if (v59 != v58)
          {
            swift_arrayInitWithTakeBackToFront();
          }
          unint64_t v58 = v37;
          unint64_t v36 = a2;
        }
        unint64_t v59 = v35 + v23;
        a4 = v58;
        if (v58 < v52)
        {
          a2 = v36;
          if (v36 < v53) {
            continue;
          }
        }
        goto LABEL_63;
      }
LABEL_62:
      sub_100B310AC((uint64_t)v18, type metadata accessor for BeaconStatus);
      sub_100B310AC((uint64_t)v21, type metadata accessor for BeaconStatus);
LABEL_63:
      sub_100B72E40(&v59, &v58, (uint64_t *)&v57);
      return 1;
    }
  }
LABEL_68:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_100B2838C(unint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  char v34 = a1;
  uint64_t v7 = type metadata accessor for UUID();
  uint64_t v37 = *(void *)(v7 - 8);
  __chkstk_darwin(v7);
  uint64_t v9 = (char *)&v32 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (!a3)
  {
    swift_release();
    return (uint64_t)&_swiftEmptySetSingleton;
  }
  if (*(void *)(a4 + 16) == a3) {
    return a4;
  }
  sub_10000588C(&qword_101659178);
  uint64_t result = static _SetStorage.allocate(capacity:)();
  uint64_t v10 = result;
  uint64_t v33 = a2;
  if (a2 < 1) {
    unint64_t v12 = 0;
  }
  else {
    unint64_t v12 = *v34;
  }
  uint64_t v13 = 0;
  uint64_t v14 = result + 56;
  unint64_t v35 = (uint64_t (**)(unint64_t, char *, uint64_t))(v37 + 32);
  uint64_t v36 = v37 + 16;
  while (1)
  {
    if (v12)
    {
      unint64_t v15 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v16 = v15 | (v13 << 6);
    }
    else
    {
      uint64_t v17 = v13 + 1;
      if (__OFADD__(v13, 1)) {
        goto LABEL_40;
      }
      if (v17 >= v33)
      {
LABEL_37:
        swift_release();
        return v10;
      }
      unint64_t v18 = v34[v17];
      ++v13;
      if (!v18)
      {
        uint64_t v13 = v17 + 1;
        if (v17 + 1 >= v33) {
          goto LABEL_37;
        }
        unint64_t v18 = v34[v13];
        if (!v18)
        {
          uint64_t v13 = v17 + 2;
          if (v17 + 2 >= v33) {
            goto LABEL_37;
          }
          unint64_t v18 = v34[v13];
          if (!v18)
          {
            uint64_t v19 = v17 + 3;
            if (v19 >= v33) {
              goto LABEL_37;
            }
            unint64_t v18 = v34[v19];
            if (!v18)
            {
              while (1)
              {
                uint64_t v13 = v19 + 1;
                if (__OFADD__(v19, 1)) {
                  goto LABEL_41;
                }
                if (v13 >= v33) {
                  goto LABEL_37;
                }
                unint64_t v18 = v34[v13];
                ++v19;
                if (v18) {
                  goto LABEL_24;
                }
              }
            }
            uint64_t v13 = v19;
          }
        }
      }
LABEL_24:
      unint64_t v12 = (v18 - 1) & v18;
      unint64_t v16 = __clz(__rbit64(v18)) + (v13 << 6);
    }
    uint64_t v20 = a4;
    uint64_t v21 = *(void *)(a4 + 48);
    uint64_t v22 = *(void *)(v37 + 72);
    (*(void (**)(char *, unint64_t, uint64_t))(v37 + 16))(v9, v21 + v22 * v16, v7);
    sub_100B22DA4(&qword_10163BC60, (void (*)(uint64_t))&type metadata accessor for UUID);
    uint64_t result = dispatch thunk of Hashable._rawHashValue(seed:)();
    uint64_t v23 = -1 << *(unsigned char *)(v10 + 32);
    unint64_t v24 = result & ~v23;
    unint64_t v25 = v24 >> 6;
    if (((-1 << v24) & ~*(void *)(v14 + 8 * (v24 >> 6))) != 0)
    {
      unint64_t v26 = __clz(__rbit64((-1 << v24) & ~*(void *)(v14 + 8 * (v24 >> 6)))) | v24 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      char v27 = 0;
      unint64_t v28 = (unint64_t)(63 - v23) >> 6;
      do
      {
        if (++v25 == v28 && (v27 & 1) != 0)
        {
          __break(1u);
          goto LABEL_39;
        }
        BOOL v29 = v25 == v28;
        if (v25 == v28) {
          unint64_t v25 = 0;
        }
        v27 |= v29;
        uint64_t v30 = *(void *)(v14 + 8 * v25);
      }
      while (v30 == -1);
      unint64_t v26 = __clz(__rbit64(~v30)) + (v25 << 6);
    }
    *(void *)(v14 + ((v26 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v26;
    uint64_t result = (*v35)(*(void *)(v10 + 48) + v26 * v22, v9, v7);
    ++*(void *)(v10 + 16);
    if (__OFSUB__(a3--, 1)) {
      break;
    }
    a4 = v20;
    if (!a3) {
      goto LABEL_37;
    }
  }
LABEL_39:
  __break(1u);
LABEL_40:
  __break(1u);
LABEL_41:
  __break(1u);
  return result;
}

char *sub_100B28718(unint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8 = type metadata accessor for SharedBeaconRecord(0);
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8 - 8);
  uint64_t v11 = (char *)&v25 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (!a3)
  {
    swift_release();
    return (char *)&_swiftEmptySetSingleton;
  }
  if (*(void *)(a4 + 16) == a3) {
    return (char *)a4;
  }
  sub_10000588C(&qword_10165F020);
  uint64_t result = (char *)static _SetStorage.allocate(capacity:)();
  unint64_t v12 = result;
  unint64_t v26 = a1;
  uint64_t v27 = a2;
  if (a2 < 1) {
    unint64_t v14 = 0;
  }
  else {
    unint64_t v14 = *a1;
  }
  uint64_t v15 = 0;
  unint64_t v16 = result + 56;
  while (1)
  {
    if (v14)
    {
      unint64_t v17 = __clz(__rbit64(v14));
      v14 &= v14 - 1;
      unint64_t v18 = v17 | (v15 << 6);
    }
    else
    {
      uint64_t v19 = v15 + 1;
      if (__OFADD__(v15, 1)) {
        goto LABEL_30;
      }
      if (v19 >= v27)
      {
LABEL_27:
        swift_release();
        return v12;
      }
      unint64_t v20 = v26[v19];
      ++v15;
      if (!v20)
      {
        uint64_t v15 = v19 + 1;
        if (v19 + 1 >= v27) {
          goto LABEL_27;
        }
        unint64_t v20 = v26[v15];
        if (!v20)
        {
          uint64_t v15 = v19 + 2;
          if (v19 + 2 >= v27) {
            goto LABEL_27;
          }
          unint64_t v20 = v26[v15];
          if (!v20)
          {
            uint64_t v21 = v19 + 3;
            if (v21 >= v27) {
              goto LABEL_27;
            }
            unint64_t v20 = v26[v21];
            if (!v20)
            {
              while (1)
              {
                uint64_t v15 = v21 + 1;
                if (__OFADD__(v21, 1)) {
                  goto LABEL_31;
                }
                if (v15 >= v27) {
                  goto LABEL_27;
                }
                unint64_t v20 = v26[v15];
                ++v21;
                if (v20) {
                  goto LABEL_24;
                }
              }
            }
            uint64_t v15 = v21;
          }
        }
      }
LABEL_24:
      unint64_t v14 = (v20 - 1) & v20;
      unint64_t v18 = __clz(__rbit64(v20)) + (v15 << 6);
    }
    uint64_t v22 = *(void *)(v9 + 72);
    sub_100B30D0C(*(void *)(a4 + 48) + v22 * v18, (uint64_t)v11, type metadata accessor for SharedBeaconRecord);
    Hasher.init(_seed:)();
    sub_10120EF7C();
    Hasher._finalize()();
    unint64_t v23 = _HashTable.nextHole(atOrAfter:)();
    *(void *)&v16[(v23 >> 3) & 0x1FFFFFFFFFFFFFF8] |= 1 << v23;
    uint64_t result = (char *)sub_100B30DB4((uint64_t)v11, *((void *)v12 + 6) + v23 * v22, type metadata accessor for SharedBeaconRecord);
    ++*((void *)v12 + 2);
    if (__OFSUB__(a3--, 1)) {
      break;
    }
    if (!a3) {
      goto LABEL_27;
    }
  }
  __break(1u);
LABEL_30:
  __break(1u);
LABEL_31:
  __break(1u);
  return result;
}

uint64_t sub_100B289CC(unint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4 = a4;
  if (!a3)
  {
    uint64_t v8 = &_swiftEmptySetSingleton;
LABEL_36:
    swift_release();
    return (uint64_t)v8;
  }
  uint64_t v5 = a3;
  if (*(void *)(a4 + 16) == a3) {
    return v4;
  }
  sub_10000588C(&qword_1016591B0);
  uint64_t result = static _SetStorage.allocate(capacity:)();
  uint64_t v8 = (unsigned char *)result;
  uint64_t v31 = a2;
  if (a2 < 1) {
    unint64_t v9 = 0;
  }
  else {
    unint64_t v9 = *a1;
  }
  uint64_t v10 = 0;
  uint64_t v11 = result + 56;
  while (1)
  {
    if (v9)
    {
      unint64_t v12 = __clz(__rbit64(v9));
      v9 &= v9 - 1;
      unint64_t v13 = v12 | (v10 << 6);
      goto LABEL_24;
    }
    uint64_t v14 = v10 + 1;
    if (__OFADD__(v10, 1)) {
      goto LABEL_39;
    }
    if (v14 >= v31) {
      goto LABEL_36;
    }
    unint64_t v15 = a1[v14];
    ++v10;
    if (!v15)
    {
      uint64_t v10 = v14 + 1;
      if (v14 + 1 >= v31) {
        goto LABEL_36;
      }
      unint64_t v15 = a1[v10];
      if (!v15)
      {
        uint64_t v10 = v14 + 2;
        if (v14 + 2 >= v31) {
          goto LABEL_36;
        }
        unint64_t v15 = a1[v10];
        if (!v15) {
          break;
        }
      }
    }
LABEL_23:
    unint64_t v9 = (v15 - 1) & v15;
    unint64_t v13 = __clz(__rbit64(v15)) + (v10 << 6);
LABEL_24:
    uint64_t v17 = *(void *)(v4 + 48) + 24 * v13;
    uint64_t v18 = *(void *)v17;
    uint64_t v19 = *(void *)(v17 + 8);
    Swift::UInt v20 = *(unsigned __int8 *)(v17 + 16);
    Hasher.init(_seed:)();
    swift_bridgeObjectRetain();
    String.hash(into:)();
    Hasher._combine(_:)(v20);
    uint64_t result = Hasher._finalize()();
    uint64_t v21 = -1 << v8[32];
    unint64_t v22 = result & ~v21;
    unint64_t v23 = v22 >> 6;
    if (((-1 << v22) & ~*(void *)(v11 + 8 * (v22 >> 6))) != 0)
    {
      unint64_t v24 = __clz(__rbit64((-1 << v22) & ~*(void *)(v11 + 8 * (v22 >> 6)))) | v22 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      char v25 = 0;
      unint64_t v26 = (unint64_t)(63 - v21) >> 6;
      do
      {
        if (++v23 == v26 && (v25 & 1) != 0)
        {
          __break(1u);
          goto LABEL_38;
        }
        BOOL v27 = v23 == v26;
        if (v23 == v26) {
          unint64_t v23 = 0;
        }
        v25 |= v27;
        uint64_t v28 = *(void *)(v11 + 8 * v23);
      }
      while (v28 == -1);
      unint64_t v24 = __clz(__rbit64(~v28)) + (v23 << 6);
    }
    *(void *)(v11 + ((v24 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v24;
    uint64_t v29 = *((void *)v8 + 6) + 24 * v24;
    *(void *)uint64_t v29 = v18;
    *(void *)(v29 + 8) = v19;
    *(unsigned char *)(v29 + 16) = v20;
    ++*((void *)v8 + 2);
    if (__OFSUB__(v5--, 1))
    {
LABEL_38:
      __break(1u);
LABEL_39:
      __break(1u);
      goto LABEL_40;
    }
    if (!v5) {
      goto LABEL_36;
    }
  }
  uint64_t v16 = v14 + 3;
  if (v16 >= v31) {
    goto LABEL_36;
  }
  unint64_t v15 = a1[v16];
  if (v15)
  {
    uint64_t v10 = v16;
    goto LABEL_23;
  }
  while (1)
  {
    uint64_t v10 = v16 + 1;
    if (__OFADD__(v16, 1)) {
      break;
    }
    if (v10 >= v31) {
      goto LABEL_36;
    }
    unint64_t v15 = a1[v10];
    ++v16;
    if (v15) {
      goto LABEL_23;
    }
  }
LABEL_40:
  __break(1u);
  return result;
}

uint64_t sub_100B28C80(unint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4 = a4;
  if (!a3)
  {
    uint64_t v8 = &_swiftEmptySetSingleton;
LABEL_36:
    swift_release();
    return (uint64_t)v8;
  }
  uint64_t v5 = a3;
  if (*(void *)(a4 + 16) == a3) {
    return v4;
  }
  sub_10000588C(&qword_1016592F8);
  uint64_t result = static _SetStorage.allocate(capacity:)();
  uint64_t v8 = (unsigned char *)result;
  uint64_t v30 = a2;
  if (a2 < 1) {
    unint64_t v9 = 0;
  }
  else {
    unint64_t v9 = *a1;
  }
  uint64_t v10 = 0;
  uint64_t v11 = result + 56;
  while (1)
  {
    if (v9)
    {
      unint64_t v12 = __clz(__rbit64(v9));
      v9 &= v9 - 1;
      unint64_t v13 = v12 | (v10 << 6);
      goto LABEL_24;
    }
    uint64_t v14 = v10 + 1;
    if (__OFADD__(v10, 1)) {
      goto LABEL_39;
    }
    if (v14 >= v30) {
      goto LABEL_36;
    }
    unint64_t v15 = a1[v14];
    ++v10;
    if (!v15)
    {
      uint64_t v10 = v14 + 1;
      if (v14 + 1 >= v30) {
        goto LABEL_36;
      }
      unint64_t v15 = a1[v10];
      if (!v15)
      {
        uint64_t v10 = v14 + 2;
        if (v14 + 2 >= v30) {
          goto LABEL_36;
        }
        unint64_t v15 = a1[v10];
        if (!v15) {
          break;
        }
      }
    }
LABEL_23:
    unint64_t v9 = (v15 - 1) & v15;
    unint64_t v13 = __clz(__rbit64(v15)) + (v10 << 6);
LABEL_24:
    uint64_t v17 = (uint64_t *)(*(void *)(v4 + 48) + 16 * v13);
    uint64_t v18 = *v17;
    unint64_t v19 = v17[1];
    Hasher.init(_seed:)();
    sub_1000361E0(v18, v19);
    Data.hash(into:)();
    uint64_t result = Hasher._finalize()();
    uint64_t v20 = -1 << v8[32];
    unint64_t v21 = result & ~v20;
    unint64_t v22 = v21 >> 6;
    if (((-1 << v21) & ~*(void *)(v11 + 8 * (v21 >> 6))) != 0)
    {
      unint64_t v23 = __clz(__rbit64((-1 << v21) & ~*(void *)(v11 + 8 * (v21 >> 6)))) | v21 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      char v24 = 0;
      unint64_t v25 = (unint64_t)(63 - v20) >> 6;
      do
      {
        if (++v22 == v25 && (v24 & 1) != 0)
        {
          __break(1u);
          goto LABEL_38;
        }
        BOOL v26 = v22 == v25;
        if (v22 == v25) {
          unint64_t v22 = 0;
        }
        v24 |= v26;
        uint64_t v27 = *(void *)(v11 + 8 * v22);
      }
      while (v27 == -1);
      unint64_t v23 = __clz(__rbit64(~v27)) + (v22 << 6);
    }
    *(void *)(v11 + ((v23 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v23;
    uint64_t v28 = (uint64_t *)(*((void *)v8 + 6) + 16 * v23);
    *uint64_t v28 = v18;
    v28[1] = v19;
    ++*((void *)v8 + 2);
    if (__OFSUB__(v5--, 1))
    {
LABEL_38:
      __break(1u);
LABEL_39:
      __break(1u);
      goto LABEL_40;
    }
    if (!v5) {
      goto LABEL_36;
    }
  }
  uint64_t v16 = v14 + 3;
  if (v16 >= v30) {
    goto LABEL_36;
  }
  unint64_t v15 = a1[v16];
  if (v15)
  {
    uint64_t v10 = v16;
    goto LABEL_23;
  }
  while (1)
  {
    uint64_t v10 = v16 + 1;
    if (__OFADD__(v16, 1)) {
      break;
    }
    if (v10 >= v30) {
      goto LABEL_36;
    }
    unint64_t v15 = a1[v10];
    ++v16;
    if (v15) {
      goto LABEL_23;
    }
  }
LABEL_40:
  __break(1u);
  return result;
}

unsigned char *sub_100B28F1C(unint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4 = a4;
  if (!a3)
  {
    unint64_t v9 = &_swiftEmptySetSingleton;
    goto LABEL_36;
  }
  uint64_t v5 = a3;
  if (*(void *)(a4 + 16) != a3)
  {
    sub_10000588C(&qword_101659328);
    uint64_t v8 = static _SetStorage.allocate(capacity:)();
    unint64_t v9 = (unsigned char *)v8;
    uint64_t v30 = a1;
    if (a2 < 1) {
      unint64_t v10 = 0;
    }
    else {
      unint64_t v10 = *a1;
    }
    uint64_t v11 = 0;
    uint64_t v12 = v8 + 56;
    while (1)
    {
      if (v10)
      {
        unint64_t v13 = __clz(__rbit64(v10));
        v10 &= v10 - 1;
        unint64_t v14 = v13 | (v11 << 6);
      }
      else
      {
        uint64_t v15 = v11 + 1;
        if (__OFADD__(v11, 1)) {
          goto LABEL_39;
        }
        if (v15 >= a2) {
          goto LABEL_36;
        }
        unint64_t v16 = v30[v15];
        ++v11;
        if (!v16)
        {
          uint64_t v11 = v15 + 1;
          if (v15 + 1 >= a2) {
            goto LABEL_36;
          }
          unint64_t v16 = v30[v11];
          if (!v16)
          {
            uint64_t v11 = v15 + 2;
            if (v15 + 2 >= a2) {
              goto LABEL_36;
            }
            unint64_t v16 = v30[v11];
            if (!v16)
            {
              uint64_t v17 = v15 + 3;
              if (v17 >= a2) {
                goto LABEL_36;
              }
              unint64_t v16 = v30[v17];
              if (!v16)
              {
                while (1)
                {
                  uint64_t v11 = v17 + 1;
                  if (__OFADD__(v17, 1)) {
                    goto LABEL_40;
                  }
                  if (v11 >= a2) {
                    goto LABEL_36;
                  }
                  unint64_t v16 = v30[v11];
                  ++v17;
                  if (v16) {
                    goto LABEL_23;
                  }
                }
              }
              uint64_t v11 = v17;
            }
          }
        }
LABEL_23:
        unint64_t v10 = (v16 - 1) & v16;
        unint64_t v14 = __clz(__rbit64(v16)) + (v11 << 6);
      }
      char v18 = *(unsigned char *)(*(void *)(v4 + 48) + v14);
      Hasher.init(_seed:)();
      String.hash(into:)();
      swift_bridgeObjectRelease();
      Swift::Int v19 = Hasher._finalize()();
      uint64_t v20 = -1 << v9[32];
      unint64_t v21 = v19 & ~v20;
      unint64_t v22 = v21 >> 6;
      if (((-1 << v21) & ~*(void *)(v12 + 8 * (v21 >> 6))) != 0)
      {
        unint64_t v23 = __clz(__rbit64((-1 << v21) & ~*(void *)(v12 + 8 * (v21 >> 6)))) | v21 & 0x7FFFFFFFFFFFFFC0;
        goto LABEL_34;
      }
      char v24 = 0;
      unint64_t v25 = (unint64_t)(63 - v20) >> 6;
      do
      {
        if (++v22 == v25 && (v24 & 1) != 0)
        {
          __break(1u);
LABEL_38:
          __break(1u);
LABEL_39:
          __break(1u);
LABEL_40:
          __break(1u);
          JUMPOUT(0x100B29438);
        }
        BOOL v26 = v22 == v25;
        if (v22 == v25) {
          unint64_t v22 = 0;
        }
        v24 |= v26;
        uint64_t v27 = *(void *)(v12 + 8 * v22);
      }
      while (v27 == -1);
      unint64_t v23 = __clz(__rbit64(~v27)) + (v22 << 6);
LABEL_34:
      *(void *)(v12 + ((v23 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v23;
      *(unsigned char *)(*((void *)v9 + 6) + v23) = v18;
      ++*((void *)v9 + 2);
      if (__OFSUB__(v5--, 1)) {
        goto LABEL_38;
      }
      if (!v5)
      {
LABEL_36:
        swift_release();
        return v9;
      }
    }
  }
  return (unsigned char *)v4;
}

char *sub_100B29490(unint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v28 = a1;
  uint64_t v7 = (int *)type metadata accessor for OwnerSharingCircle();
  uint64_t v30 = *((void *)v7 - 1);
  __chkstk_darwin(v7);
  unint64_t v9 = (uint64_t *)((char *)&v27 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0));
  if (!a3)
  {
    swift_release();
    return (char *)&_swiftEmptySetSingleton;
  }
  if (*(void *)(a4 + 16) == a3) {
    return (char *)a4;
  }
  sub_10000588C(&qword_1016592B8);
  uint64_t result = (char *)static _SetStorage.allocate(capacity:)();
  unint64_t v10 = result;
  uint64_t v27 = a2;
  if (a2 < 1) {
    unint64_t v12 = 0;
  }
  else {
    unint64_t v12 = *v28;
  }
  uint64_t v13 = 0;
  uint64_t v29 = result + 56;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      uint64_t v31 = v13;
      unint64_t v15 = v14 | (v13 << 6);
    }
    else
    {
      uint64_t v16 = v13 + 1;
      if (__OFADD__(v13, 1)) {
        goto LABEL_30;
      }
      if (v16 >= v27)
      {
LABEL_27:
        swift_release();
        return v10;
      }
      unint64_t v17 = v28[v16];
      uint64_t v18 = v13 + 1;
      if (!v17)
      {
        uint64_t v18 = v13 + 2;
        if (v13 + 2 >= v27) {
          goto LABEL_27;
        }
        unint64_t v17 = v28[v18];
        if (!v17)
        {
          uint64_t v18 = v13 + 3;
          if (v13 + 3 >= v27) {
            goto LABEL_27;
          }
          unint64_t v17 = v28[v18];
          if (!v17)
          {
            uint64_t v19 = v13 + 4;
            if (v13 + 4 >= v27) {
              goto LABEL_27;
            }
            unint64_t v17 = v28[v19];
            if (!v17)
            {
              while (1)
              {
                uint64_t v18 = v19 + 1;
                if (__OFADD__(v19, 1)) {
                  goto LABEL_31;
                }
                if (v18 >= v27) {
                  goto LABEL_27;
                }
                unint64_t v17 = v28[v18];
                ++v19;
                if (v17) {
                  goto LABEL_24;
                }
              }
            }
            uint64_t v18 = v13 + 4;
          }
        }
      }
LABEL_24:
      unint64_t v12 = (v17 - 1) & v17;
      uint64_t v31 = v18;
      unint64_t v15 = __clz(__rbit64(v17)) + (v18 << 6);
    }
    uint64_t v20 = *(void *)(v30 + 72);
    sub_100B30D0C(*(void *)(a4 + 48) + v20 * v15, (uint64_t)v9, (uint64_t (*)(void))type metadata accessor for OwnerSharingCircle);
    Hasher.init(_seed:)();
    uint64_t v21 = *v9;
    unint64_t v22 = v9[1];
    sub_1000361E0(*v9, v22);
    Data.hash(into:)();
    sub_10001CFB8(v21, v22);
    type metadata accessor for UUID();
    sub_100B22DA4(&qword_10163BC60, (void (*)(uint64_t))&type metadata accessor for UUID);
    dispatch thunk of Hashable.hash(into:)();
    dispatch thunk of Hashable.hash(into:)();
    Hasher._combine(_:)(*((unsigned __int8 *)v9 + v7[7]));
    uint64_t v23 = *(uint64_t *)((char *)v9 + v7[8]);
    swift_bridgeObjectRetain();
    sub_100DF9434(v32, v23);
    swift_bridgeObjectRelease();
    Hasher._combine(_:)(*((unsigned __int8 *)v9 + v7[9]));
    Hasher._finalize()();
    char v24 = v29;
    unint64_t v25 = _HashTable.nextHole(atOrAfter:)();
    *(void *)&v24[(v25 >> 3) & 0x1FFFFFFFFFFFFFF8] |= 1 << v25;
    uint64_t result = (char *)sub_100B30DB4((uint64_t)v9, *((void *)v10 + 6) + v25 * v20, (uint64_t (*)(void))type metadata accessor for OwnerSharingCircle);
    ++*((void *)v10 + 2);
    if (__OFSUB__(a3--, 1)) {
      break;
    }
    uint64_t v13 = v31;
    if (!a3) {
      goto LABEL_27;
    }
  }
  __break(1u);
LABEL_30:
  __break(1u);
LABEL_31:
  __break(1u);
  return result;
}

uint64_t sub_100B29854(unint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_100B2A16C(a1, a2, a3, a4, (uint64_t *)&unk_10165F070);
}

uint64_t sub_100B29860(unint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4 = a4;
  if (!a3)
  {
    uint64_t v8 = &_swiftEmptySetSingleton;
LABEL_36:
    swift_release();
    return (uint64_t)v8;
  }
  uint64_t v5 = a3;
  if (*(void *)(a4 + 16) == a3) {
    return v4;
  }
  sub_10000588C(&qword_1016592F0);
  uint64_t result = static _SetStorage.allocate(capacity:)();
  uint64_t v8 = (unsigned char *)result;
  uint64_t v31 = a2;
  if (a2 < 1) {
    unint64_t v9 = 0;
  }
  else {
    unint64_t v9 = *a1;
  }
  uint64_t v10 = 0;
  uint64_t v11 = result + 56;
  while (1)
  {
    if (v9)
    {
      unint64_t v12 = __clz(__rbit64(v9));
      v9 &= v9 - 1;
      unint64_t v13 = v12 | (v10 << 6);
      goto LABEL_24;
    }
    uint64_t v14 = v10 + 1;
    if (__OFADD__(v10, 1)) {
      goto LABEL_39;
    }
    if (v14 >= v31) {
      goto LABEL_36;
    }
    unint64_t v15 = a1[v14];
    ++v10;
    if (!v15)
    {
      uint64_t v10 = v14 + 1;
      if (v14 + 1 >= v31) {
        goto LABEL_36;
      }
      unint64_t v15 = a1[v10];
      if (!v15)
      {
        uint64_t v10 = v14 + 2;
        if (v14 + 2 >= v31) {
          goto LABEL_36;
        }
        unint64_t v15 = a1[v10];
        if (!v15) {
          break;
        }
      }
    }
LABEL_23:
    unint64_t v9 = (v15 - 1) & v15;
    unint64_t v13 = __clz(__rbit64(v15)) + (v10 << 6);
LABEL_24:
    unint64_t v17 = (unsigned __int8 *)(*(void *)(v4 + 48) + 24 * v13);
    Swift::UInt v18 = *v17;
    uint64_t v19 = *((void *)v17 + 1);
    uint64_t v20 = *((void *)v17 + 2);
    Hasher.init(_seed:)();
    Hasher._combine(_:)(v18);
    swift_bridgeObjectRetain_n();
    String.hash(into:)();
    swift_bridgeObjectRelease();
    uint64_t result = Hasher._finalize()();
    uint64_t v21 = -1 << v8[32];
    unint64_t v22 = result & ~v21;
    unint64_t v23 = v22 >> 6;
    if (((-1 << v22) & ~*(void *)(v11 + 8 * (v22 >> 6))) != 0)
    {
      unint64_t v24 = __clz(__rbit64((-1 << v22) & ~*(void *)(v11 + 8 * (v22 >> 6)))) | v22 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      char v25 = 0;
      unint64_t v26 = (unint64_t)(63 - v21) >> 6;
      do
      {
        if (++v23 == v26 && (v25 & 1) != 0)
        {
          __break(1u);
          goto LABEL_38;
        }
        BOOL v27 = v23 == v26;
        if (v23 == v26) {
          unint64_t v23 = 0;
        }
        v25 |= v27;
        uint64_t v28 = *(void *)(v11 + 8 * v23);
      }
      while (v28 == -1);
      unint64_t v24 = __clz(__rbit64(~v28)) + (v23 << 6);
    }
    *(void *)(v11 + ((v24 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v24;
    uint64_t v29 = *((void *)v8 + 6) + 24 * v24;
    *(unsigned char *)uint64_t v29 = v18;
    *(void *)(v29 + 8) = v19;
    *(void *)(v29 + 16) = v20;
    ++*((void *)v8 + 2);
    if (__OFSUB__(v5--, 1))
    {
LABEL_38:
      __break(1u);
LABEL_39:
      __break(1u);
      goto LABEL_40;
    }
    if (!v5) {
      goto LABEL_36;
    }
  }
  uint64_t v16 = v14 + 3;
  if (v16 >= v31) {
    goto LABEL_36;
  }
  unint64_t v15 = a1[v16];
  if (v15)
  {
    uint64_t v10 = v16;
    goto LABEL_23;
  }
  while (1)
  {
    uint64_t v10 = v16 + 1;
    if (__OFADD__(v16, 1)) {
      break;
    }
    if (v10 >= v31) {
      goto LABEL_36;
    }
    unint64_t v15 = a1[v10];
    ++v16;
    if (v15) {
      goto LABEL_23;
    }
  }
LABEL_40:
  __break(1u);
  return result;
}

uint64_t sub_100B29B20(unint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  char v34 = a1;
  uint64_t v7 = type metadata accessor for CorrelationIdentifier();
  uint64_t v37 = *(void *)(v7 - 8);
  __chkstk_darwin(v7);
  unint64_t v9 = (char *)&v32 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (!a3)
  {
    swift_release();
    return (uint64_t)&_swiftEmptySetSingleton;
  }
  if (*(void *)(a4 + 16) == a3) {
    return a4;
  }
  sub_10000588C(&qword_1016592E8);
  uint64_t result = static _SetStorage.allocate(capacity:)();
  uint64_t v10 = result;
  uint64_t v33 = a2;
  if (a2 < 1) {
    unint64_t v12 = 0;
  }
  else {
    unint64_t v12 = *v34;
  }
  uint64_t v13 = 0;
  uint64_t v14 = result + 56;
  unint64_t v35 = (uint64_t (**)(unint64_t, char *, uint64_t))(v37 + 32);
  uint64_t v36 = v37 + 16;
  while (1)
  {
    if (v12)
    {
      unint64_t v15 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v16 = v15 | (v13 << 6);
    }
    else
    {
      uint64_t v17 = v13 + 1;
      if (__OFADD__(v13, 1)) {
        goto LABEL_40;
      }
      if (v17 >= v33)
      {
LABEL_37:
        swift_release();
        return v10;
      }
      unint64_t v18 = v34[v17];
      ++v13;
      if (!v18)
      {
        uint64_t v13 = v17 + 1;
        if (v17 + 1 >= v33) {
          goto LABEL_37;
        }
        unint64_t v18 = v34[v13];
        if (!v18)
        {
          uint64_t v13 = v17 + 2;
          if (v17 + 2 >= v33) {
            goto LABEL_37;
          }
          unint64_t v18 = v34[v13];
          if (!v18)
          {
            uint64_t v19 = v17 + 3;
            if (v19 >= v33) {
              goto LABEL_37;
            }
            unint64_t v18 = v34[v19];
            if (!v18)
            {
              while (1)
              {
                uint64_t v13 = v19 + 1;
                if (__OFADD__(v19, 1)) {
                  goto LABEL_41;
                }
                if (v13 >= v33) {
                  goto LABEL_37;
                }
                unint64_t v18 = v34[v13];
                ++v19;
                if (v18) {
                  goto LABEL_24;
                }
              }
            }
            uint64_t v13 = v19;
          }
        }
      }
LABEL_24:
      unint64_t v12 = (v18 - 1) & v18;
      unint64_t v16 = __clz(__rbit64(v18)) + (v13 << 6);
    }
    uint64_t v20 = a4;
    uint64_t v21 = *(void *)(a4 + 48);
    uint64_t v22 = *(void *)(v37 + 72);
    (*(void (**)(char *, unint64_t, uint64_t))(v37 + 16))(v9, v21 + v22 * v16, v7);
    sub_100B22DA4((unint64_t *)&unk_10166C250, (void (*)(uint64_t))&type metadata accessor for CorrelationIdentifier);
    uint64_t result = dispatch thunk of Hashable._rawHashValue(seed:)();
    uint64_t v23 = -1 << *(unsigned char *)(v10 + 32);
    unint64_t v24 = result & ~v23;
    unint64_t v25 = v24 >> 6;
    if (((-1 << v24) & ~*(void *)(v14 + 8 * (v24 >> 6))) != 0)
    {
      unint64_t v26 = __clz(__rbit64((-1 << v24) & ~*(void *)(v14 + 8 * (v24 >> 6)))) | v24 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      char v27 = 0;
      unint64_t v28 = (unint64_t)(63 - v23) >> 6;
      do
      {
        if (++v25 == v28 && (v27 & 1) != 0)
        {
          __break(1u);
          goto LABEL_39;
        }
        BOOL v29 = v25 == v28;
        if (v25 == v28) {
          unint64_t v25 = 0;
        }
        v27 |= v29;
        uint64_t v30 = *(void *)(v14 + 8 * v25);
      }
      while (v30 == -1);
      unint64_t v26 = __clz(__rbit64(~v30)) + (v25 << 6);
    }
    *(void *)(v14 + ((v26 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v26;
    uint64_t result = (*v35)(*(void *)(v10 + 48) + v26 * v22, v9, v7);
    ++*(void *)(v10 + 16);
    if (__OFSUB__(a3--, 1)) {
      break;
    }
    a4 = v20;
    if (!a3) {
      goto LABEL_37;
    }
  }
LABEL_39:
  __break(1u);
LABEL_40:
  __break(1u);
LABEL_41:
  __break(1u);
  return result;
}

char *sub_100B29EAC(unint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8 = type metadata accessor for RawSearchResult();
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8 - 8);
  uint64_t v11 = (char *)&v25 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (!a3)
  {
    swift_release();
    return (char *)&_swiftEmptySetSingleton;
  }
  if (*(void *)(a4 + 16) == a3) {
    return (char *)a4;
  }
  sub_10000588C(&qword_101659580);
  uint64_t result = (char *)static _SetStorage.allocate(capacity:)();
  unint64_t v12 = result;
  unint64_t v26 = a1;
  uint64_t v27 = a2;
  if (a2 < 1) {
    unint64_t v14 = 0;
  }
  else {
    unint64_t v14 = *a1;
  }
  uint64_t v15 = 0;
  unint64_t v16 = result + 56;
  while (1)
  {
    if (v14)
    {
      unint64_t v17 = __clz(__rbit64(v14));
      v14 &= v14 - 1;
      unint64_t v18 = v17 | (v15 << 6);
    }
    else
    {
      uint64_t v19 = v15 + 1;
      if (__OFADD__(v15, 1)) {
        goto LABEL_30;
      }
      if (v19 >= v27)
      {
LABEL_27:
        swift_release();
        return v12;
      }
      unint64_t v20 = v26[v19];
      ++v15;
      if (!v20)
      {
        uint64_t v15 = v19 + 1;
        if (v19 + 1 >= v27) {
          goto LABEL_27;
        }
        unint64_t v20 = v26[v15];
        if (!v20)
        {
          uint64_t v15 = v19 + 2;
          if (v19 + 2 >= v27) {
            goto LABEL_27;
          }
          unint64_t v20 = v26[v15];
          if (!v20)
          {
            uint64_t v21 = v19 + 3;
            if (v21 >= v27) {
              goto LABEL_27;
            }
            unint64_t v20 = v26[v21];
            if (!v20)
            {
              while (1)
              {
                uint64_t v15 = v21 + 1;
                if (__OFADD__(v21, 1)) {
                  goto LABEL_31;
                }
                if (v15 >= v27) {
                  goto LABEL_27;
                }
                unint64_t v20 = v26[v15];
                ++v21;
                if (v20) {
                  goto LABEL_24;
                }
              }
            }
            uint64_t v15 = v21;
          }
        }
      }
LABEL_24:
      unint64_t v14 = (v20 - 1) & v20;
      unint64_t v18 = __clz(__rbit64(v20)) + (v15 << 6);
    }
    uint64_t v22 = *(void *)(v9 + 72);
    sub_100B30D0C(*(void *)(a4 + 48) + v22 * v18, (uint64_t)v11, (uint64_t (*)(void))type metadata accessor for RawSearchResult);
    Hasher.init(_seed:)();
    sub_100CC2EC0();
    Hasher._finalize()();
    unint64_t v23 = _HashTable.nextHole(atOrAfter:)();
    *(void *)&v16[(v23 >> 3) & 0x1FFFFFFFFFFFFFF8] |= 1 << v23;
    uint64_t result = (char *)sub_100B30DB4((uint64_t)v11, *((void *)v12 + 6) + v23 * v22, (uint64_t (*)(void))type metadata accessor for RawSearchResult);
    ++*((void *)v12 + 2);
    if (__OFSUB__(a3--, 1)) {
      break;
    }
    if (!a3) {
      goto LABEL_27;
    }
  }
  __break(1u);
LABEL_30:
  __break(1u);
LABEL_31:
  __break(1u);
  return result;
}

uint64_t sub_100B2A160(unint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_100B2A16C(a1, a2, a3, a4, (uint64_t *)&unk_10165F0B0);
}

uint64_t sub_100B2A16C(unint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t *a5)
{
  uint64_t v5 = a4;
  if (!a3)
  {
    uint64_t v10 = &_swiftEmptySetSingleton;
LABEL_36:
    swift_release();
    return (uint64_t)v10;
  }
  uint64_t v6 = a3;
  if (*(void *)(a4 + 16) == a3) {
    return v5;
  }
  sub_10000588C(a5);
  uint64_t result = static _SetStorage.allocate(capacity:)();
  uint64_t v10 = (void *)result;
  uint64_t v30 = a1;
  if (a2 < 1) {
    unint64_t v11 = 0;
  }
  else {
    unint64_t v11 = *a1;
  }
  uint64_t v12 = 0;
  uint64_t v13 = result + 56;
  while (1)
  {
    if (v11)
    {
      unint64_t v14 = __clz(__rbit64(v11));
      v11 &= v11 - 1;
      unint64_t v15 = v14 | (v12 << 6);
      goto LABEL_24;
    }
    uint64_t v16 = v12 + 1;
    if (__OFADD__(v12, 1)) {
      goto LABEL_39;
    }
    if (v16 >= a2) {
      goto LABEL_36;
    }
    unint64_t v17 = v30[v16];
    ++v12;
    if (!v17)
    {
      uint64_t v12 = v16 + 1;
      if (v16 + 1 >= a2) {
        goto LABEL_36;
      }
      unint64_t v17 = v30[v12];
      if (!v17)
      {
        uint64_t v12 = v16 + 2;
        if (v16 + 2 >= a2) {
          goto LABEL_36;
        }
        unint64_t v17 = v30[v12];
        if (!v17) {
          break;
        }
      }
    }
LABEL_23:
    unint64_t v11 = (v17 - 1) & v17;
    unint64_t v15 = __clz(__rbit64(v17)) + (v12 << 6);
LABEL_24:
    Swift::Int v19 = v10[5];
    id v20 = *(id *)(*(void *)(v5 + 48) + 8 * v15);
    uint64_t result = NSObject._rawHashValue(seed:)(v19);
    uint64_t v21 = -1 << *((unsigned char *)v10 + 32);
    unint64_t v22 = result & ~v21;
    unint64_t v23 = v22 >> 6;
    if (((-1 << v22) & ~*(void *)(v13 + 8 * (v22 >> 6))) != 0)
    {
      unint64_t v24 = __clz(__rbit64((-1 << v22) & ~*(void *)(v13 + 8 * (v22 >> 6)))) | v22 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      char v25 = 0;
      unint64_t v26 = (unint64_t)(63 - v21) >> 6;
      do
      {
        if (++v23 == v26 && (v25 & 1) != 0)
        {
          __break(1u);
          goto LABEL_38;
        }
        BOOL v27 = v23 == v26;
        if (v23 == v26) {
          unint64_t v23 = 0;
        }
        v25 |= v27;
        uint64_t v28 = *(void *)(v13 + 8 * v23);
      }
      while (v28 == -1);
      unint64_t v24 = __clz(__rbit64(~v28)) + (v23 << 6);
    }
    *(void *)(v13 + ((v24 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v24;
    *(void *)(v10[6] + 8 * v24) = v20;
    ++v10[2];
    if (__OFSUB__(v6--, 1))
    {
LABEL_38:
      __break(1u);
LABEL_39:
      __break(1u);
      goto LABEL_40;
    }
    if (!v6) {
      goto LABEL_36;
    }
  }
  uint64_t v18 = v16 + 3;
  if (v18 >= a2) {
    goto LABEL_36;
  }
  unint64_t v17 = v30[v18];
  if (v17)
  {
    uint64_t v12 = v18;
    goto LABEL_23;
  }
  while (1)
  {
    uint64_t v12 = v18 + 1;
    if (__OFADD__(v18, 1)) {
      break;
    }
    if (v12 >= a2) {
      goto LABEL_36;
    }
    unint64_t v17 = v30[v12];
    ++v18;
    if (v17) {
      goto LABEL_23;
    }
  }
LABEL_40:
  __break(1u);
  return result;
}

uint64_t sub_100B2A3C8(unint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8 = type metadata accessor for BeaconIdentifier();
  uint64_t v35 = *(void *)(v8 - 8);
  uint64_t v36 = v8;
  __chkstk_darwin(v8);
  uint64_t v10 = (char *)&v32 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (!a3)
  {
    swift_release();
    return (uint64_t)&_swiftEmptySetSingleton;
  }
  if (*(void *)(a4 + 16) == a3) {
    return a4;
  }
  sub_10000588C(&qword_101659180);
  uint64_t result = static _SetStorage.allocate(capacity:)();
  uint64_t v11 = result;
  uint64_t v32 = a1;
  uint64_t v33 = a2;
  if (a2 < 1) {
    unint64_t v13 = 0;
  }
  else {
    unint64_t v13 = *a1;
  }
  uint64_t v14 = 0;
  uint64_t v15 = result + 56;
  uint64_t v34 = a4;
  while (1)
  {
    if (v13)
    {
      unint64_t v16 = __clz(__rbit64(v13));
      v13 &= v13 - 1;
      unint64_t v17 = v16 | (v14 << 6);
    }
    else
    {
      uint64_t v18 = v14 + 1;
      if (__OFADD__(v14, 1)) {
        goto LABEL_40;
      }
      if (v18 >= v33)
      {
LABEL_37:
        swift_release();
        return v11;
      }
      unint64_t v19 = v32[v18];
      ++v14;
      if (!v19)
      {
        uint64_t v14 = v18 + 1;
        if (v18 + 1 >= v33) {
          goto LABEL_37;
        }
        unint64_t v19 = v32[v14];
        if (!v19)
        {
          uint64_t v14 = v18 + 2;
          if (v18 + 2 >= v33) {
            goto LABEL_37;
          }
          unint64_t v19 = v32[v14];
          if (!v19)
          {
            uint64_t v20 = v18 + 3;
            if (v20 >= v33) {
              goto LABEL_37;
            }
            unint64_t v19 = v32[v20];
            if (!v19)
            {
              while (1)
              {
                uint64_t v14 = v20 + 1;
                if (__OFADD__(v20, 1)) {
                  goto LABEL_41;
                }
                if (v14 >= v33) {
                  goto LABEL_37;
                }
                unint64_t v19 = v32[v14];
                ++v20;
                if (v19) {
                  goto LABEL_24;
                }
              }
            }
            uint64_t v14 = v20;
          }
        }
      }
LABEL_24:
      unint64_t v13 = (v19 - 1) & v19;
      unint64_t v17 = __clz(__rbit64(v19)) + (v14 << 6);
    }
    uint64_t v21 = *(void *)(a4 + 48);
    uint64_t v22 = *(void *)(v35 + 72);
    sub_100B30D0C(v21 + v22 * v17, (uint64_t)v10, (uint64_t (*)(void))type metadata accessor for BeaconIdentifier);
    Hasher.init(_seed:)();
    type metadata accessor for UUID();
    sub_100B22DA4(&qword_10163BC60, (void (*)(uint64_t))&type metadata accessor for UUID);
    dispatch thunk of Hashable.hash(into:)();
    dispatch thunk of Hashable.hash(into:)();
    uint64_t result = Hasher._finalize()();
    uint64_t v23 = -1 << *(unsigned char *)(v11 + 32);
    unint64_t v24 = result & ~v23;
    unint64_t v25 = v24 >> 6;
    if (((-1 << v24) & ~*(void *)(v15 + 8 * (v24 >> 6))) != 0)
    {
      unint64_t v26 = __clz(__rbit64((-1 << v24) & ~*(void *)(v15 + 8 * (v24 >> 6)))) | v24 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      char v27 = 0;
      unint64_t v28 = (unint64_t)(63 - v23) >> 6;
      do
      {
        if (++v25 == v28 && (v27 & 1) != 0)
        {
          __break(1u);
          goto LABEL_39;
        }
        BOOL v29 = v25 == v28;
        if (v25 == v28) {
          unint64_t v25 = 0;
        }
        v27 |= v29;
        uint64_t v30 = *(void *)(v15 + 8 * v25);
      }
      while (v30 == -1);
      unint64_t v26 = __clz(__rbit64(~v30)) + (v25 << 6);
    }
    *(void *)(v15 + ((v26 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v26;
    uint64_t result = sub_100B30DB4((uint64_t)v10, *(void *)(v11 + 48) + v26 * v22, (uint64_t (*)(void))type metadata accessor for BeaconIdentifier);
    ++*(void *)(v11 + 16);
    if (__OFSUB__(a3--, 1)) {
      break;
    }
    a4 = v34;
    if (!a3) {
      goto LABEL_37;
    }
  }
LABEL_39:
  __break(1u);
LABEL_40:
  __break(1u);
LABEL_41:
  __break(1u);
  return result;
}

uint64_t sub_100B2A768(unint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_100B2A780(a1, a2, a3, a4, &qword_10165EF90);
}

uint64_t sub_100B2A774(unint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_100B2A780(a1, a2, a3, a4, &qword_10165F010);
}

uint64_t sub_100B2A780(unint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t *a5)
{
  uint64_t v5 = a4;
  if (!a3)
  {
    uint64_t v10 = &_swiftEmptySetSingleton;
LABEL_36:
    swift_release();
    return (uint64_t)v10;
  }
  uint64_t v6 = a3;
  if (*(void *)(a4 + 16) == a3) {
    return v5;
  }
  sub_10000588C(a5);
  uint64_t result = static _SetStorage.allocate(capacity:)();
  uint64_t v10 = (unsigned char *)result;
  BOOL v29 = a1;
  if (a2 < 1) {
    unint64_t v11 = 0;
  }
  else {
    unint64_t v11 = *a1;
  }
  uint64_t v12 = 0;
  uint64_t v13 = result + 56;
  while (1)
  {
    if (v11)
    {
      unint64_t v14 = __clz(__rbit64(v11));
      v11 &= v11 - 1;
      unint64_t v15 = v14 | (v12 << 6);
      goto LABEL_24;
    }
    uint64_t v16 = v12 + 1;
    if (__OFADD__(v12, 1)) {
      goto LABEL_39;
    }
    if (v16 >= a2) {
      goto LABEL_36;
    }
    unint64_t v17 = v29[v16];
    ++v12;
    if (!v17)
    {
      uint64_t v12 = v16 + 1;
      if (v16 + 1 >= a2) {
        goto LABEL_36;
      }
      unint64_t v17 = v29[v12];
      if (!v17)
      {
        uint64_t v12 = v16 + 2;
        if (v16 + 2 >= a2) {
          goto LABEL_36;
        }
        unint64_t v17 = v29[v12];
        if (!v17) {
          break;
        }
      }
    }
LABEL_23:
    unint64_t v11 = (v17 - 1) & v17;
    unint64_t v15 = __clz(__rbit64(v17)) + (v12 << 6);
LABEL_24:
    Swift::UInt v19 = *(unsigned __int8 *)(*(void *)(v5 + 48) + v15);
    Hasher.init(_seed:)();
    Hasher._combine(_:)(v19);
    uint64_t result = Hasher._finalize()();
    uint64_t v20 = -1 << v10[32];
    unint64_t v21 = result & ~v20;
    unint64_t v22 = v21 >> 6;
    if (((-1 << v21) & ~*(void *)(v13 + 8 * (v21 >> 6))) != 0)
    {
      unint64_t v23 = __clz(__rbit64((-1 << v21) & ~*(void *)(v13 + 8 * (v21 >> 6)))) | v21 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      char v24 = 0;
      unint64_t v25 = (unint64_t)(63 - v20) >> 6;
      do
      {
        if (++v22 == v25 && (v24 & 1) != 0)
        {
          __break(1u);
          goto LABEL_38;
        }
        BOOL v26 = v22 == v25;
        if (v22 == v25) {
          unint64_t v22 = 0;
        }
        v24 |= v26;
        uint64_t v27 = *(void *)(v13 + 8 * v22);
      }
      while (v27 == -1);
      unint64_t v23 = __clz(__rbit64(~v27)) + (v22 << 6);
    }
    *(void *)(v13 + ((v23 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v23;
    *(unsigned char *)(*((void *)v10 + 6) + v23) = v19;
    ++*((void *)v10 + 2);
    if (__OFSUB__(v6--, 1))
    {
LABEL_38:
      __break(1u);
LABEL_39:
      __break(1u);
      goto LABEL_40;
    }
    if (!v6) {
      goto LABEL_36;
    }
  }
  uint64_t v18 = v16 + 3;
  if (v18 >= a2) {
    goto LABEL_36;
  }
  unint64_t v17 = v29[v18];
  if (v17)
  {
    uint64_t v12 = v18;
    goto LABEL_23;
  }
  while (1)
  {
    uint64_t v12 = v18 + 1;
    if (__OFADD__(v18, 1)) {
      break;
    }
    if (v12 >= a2) {
      goto LABEL_36;
    }
    unint64_t v17 = v29[v12];
    ++v18;
    if (v17) {
      goto LABEL_23;
    }
  }
LABEL_40:
  __break(1u);
  return result;
}

uint64_t sub_100B2A9E8(unint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4 = a4;
  if (!a3)
  {
    uint64_t v10 = &_swiftEmptySetSingleton;
LABEL_36:
    swift_release();
    return (uint64_t)v10;
  }
  uint64_t v5 = a3;
  if (*(void *)(a4 + 16) == a3) {
    return v4;
  }
  sub_10000588C((uint64_t *)&unk_10165EFF0);
  uint64_t result = static _SetStorage.allocate(capacity:)();
  uint64_t v10 = (unsigned char *)result;
  if (a2 < 1) {
    unint64_t v11 = 0;
  }
  else {
    unint64_t v11 = *a1;
  }
  uint64_t v12 = 0;
  uint64_t v13 = result + 56;
  while (1)
  {
    if (v11)
    {
      unint64_t v14 = __clz(__rbit64(v11));
      v11 &= v11 - 1;
      unint64_t v15 = v14 | (v12 << 6);
      goto LABEL_24;
    }
    uint64_t v16 = v12 + 1;
    if (__OFADD__(v12, 1)) {
      goto LABEL_39;
    }
    if (v16 >= a2) {
      goto LABEL_36;
    }
    unint64_t v17 = a1[v16];
    ++v12;
    if (!v17)
    {
      uint64_t v12 = v16 + 1;
      if (v16 + 1 >= a2) {
        goto LABEL_36;
      }
      unint64_t v17 = a1[v12];
      if (!v17)
      {
        uint64_t v12 = v16 + 2;
        if (v16 + 2 >= a2) {
          goto LABEL_36;
        }
        unint64_t v17 = a1[v12];
        if (!v17) {
          break;
        }
      }
    }
LABEL_23:
    unint64_t v11 = (v17 - 1) & v17;
    unint64_t v15 = __clz(__rbit64(v17)) + (v12 << 6);
LABEL_24:
    *(void *)&long long v9 = *(void *)(*(void *)(v4 + 48) + 8 * v15);
    long long v28 = v9;
    Hasher.init(_seed:)();
    Hasher._combine(_:)(v28);
    Hasher._combine(_:)(DWORD1(v28));
    uint64_t result = Hasher._finalize()();
    uint64_t v19 = -1 << v10[32];
    unint64_t v20 = result & ~v19;
    unint64_t v21 = v20 >> 6;
    if (((-1 << v20) & ~*(void *)(v13 + 8 * (v20 >> 6))) != 0)
    {
      unint64_t v22 = __clz(__rbit64((-1 << v20) & ~*(void *)(v13 + 8 * (v20 >> 6)))) | v20 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      char v23 = 0;
      unint64_t v24 = (unint64_t)(63 - v19) >> 6;
      do
      {
        if (++v21 == v24 && (v23 & 1) != 0)
        {
          __break(1u);
          goto LABEL_38;
        }
        BOOL v25 = v21 == v24;
        if (v21 == v24) {
          unint64_t v21 = 0;
        }
        v23 |= v25;
        uint64_t v26 = *(void *)(v13 + 8 * v21);
      }
      while (v26 == -1);
      unint64_t v22 = __clz(__rbit64(~v26)) + (v21 << 6);
    }
    *(void *)(v13 + ((v22 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v22;
    *((void *)&v9 + 1) = *((void *)&v28 + 1);
    *(void *)(*((void *)v10 + 6) + 8 * v22) = v28;
    ++*((void *)v10 + 2);
    if (__OFSUB__(v5--, 1))
    {
LABEL_38:
      __break(1u);
LABEL_39:
      __break(1u);
      goto LABEL_40;
    }
    if (!v5) {
      goto LABEL_36;
    }
  }
  uint64_t v18 = v16 + 3;
  if (v18 >= a2) {
    goto LABEL_36;
  }
  unint64_t v17 = a1[v18];
  if (v17)
  {
    uint64_t v12 = v18;
    goto LABEL_23;
  }
  while (1)
  {
    uint64_t v12 = v18 + 1;
    if (__OFADD__(v18, 1)) {
      break;
    }
    if (v12 >= a2) {
      goto LABEL_36;
    }
    unint64_t v17 = a1[v12];
    ++v18;
    if (v17) {
      goto LABEL_23;
    }
  }
LABEL_40:
  __break(1u);
  return result;
}

uint64_t sub_100B2AC68(uint64_t isStackAllocationSafe, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = (uint64_t (*)(char *))isStackAllocationSafe;
  char v6 = *(unsigned char *)(a3 + 32);
  unint64_t v7 = (unint64_t)((1 << v6) + 63) >> 6;
  size_t v8 = 8 * v7;
  if ((v6 & 0x3Fu) <= 0xD
    || (isStackAllocationSafe = swift_stdlib_isStackAllocationSafe(), (isStackAllocationSafe & 1) != 0))
  {
    __chkstk_darwin(isStackAllocationSafe);
    bzero((char *)&v12 - ((v8 + 15) & 0x3FFFFFFFFFFFFFF0), v8);
    uint64_t v9 = sub_100B2ADEC((unint64_t *)((char *)&v12 - ((v8 + 15) & 0x3FFFFFFFFFFFFFF0)), v7, a3, v5);
    swift_release();
    if (v3) {
      swift_willThrow();
    }
  }
  else
  {
    uint64_t v10 = (void *)swift_slowAlloc();
    bzero(v10, v8);
    uint64_t v9 = sub_100B2ADEC((unint64_t *)v10, v7, a3, v5);
    swift_release();
    swift_slowDealloc();
  }
  return v9;
}

uint64_t sub_100B2ADEC(unint64_t *a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(char *))
{
  uint64_t v36 = a4;
  uint64_t v28 = a2;
  BOOL v29 = a1;
  uint64_t v35 = type metadata accessor for UUID();
  uint64_t result = __chkstk_darwin(v35);
  uint64_t v9 = (char *)&v27 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  int64_t v10 = 0;
  uint64_t v37 = a3;
  uint64_t v11 = *(void *)(a3 + 56);
  uint64_t v30 = 0;
  uint64_t v31 = a3 + 56;
  uint64_t v12 = 1 << *(unsigned char *)(a3 + 32);
  uint64_t v13 = -1;
  if (v12 < 64) {
    uint64_t v13 = ~(-1 << v12);
  }
  unint64_t v14 = v13 & v11;
  int64_t v32 = (unint64_t)(v12 + 63) >> 6;
  uint64_t v33 = v7 + 16;
  uint64_t v34 = v7;
  unint64_t v15 = (uint64_t (**)(char *, uint64_t))(v7 + 8);
  while (v14)
  {
    unint64_t v16 = __clz(__rbit64(v14));
    v14 &= v14 - 1;
    unint64_t v17 = v16 | (v10 << 6);
LABEL_17:
    uint64_t v21 = v35;
    (*(void (**)(char *, unint64_t, uint64_t))(v34 + 16))(v9, *(void *)(v37 + 48) + *(void *)(v34 + 72) * v17, v35);
    char v22 = v36(v9);
    if (v4) {
      return (*v15)(v9, v21);
    }
    char v23 = v22;
    uint64_t result = (*v15)(v9, v21);
    if (v23)
    {
      *(unint64_t *)((char *)v29 + ((v17 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v17;
      BOOL v18 = __OFADD__(v30++, 1);
      if (v18) {
        goto LABEL_30;
      }
    }
  }
  BOOL v18 = __OFADD__(v10++, 1);
  if (v18)
  {
    __break(1u);
    goto LABEL_29;
  }
  if (v10 >= v32) {
    goto LABEL_27;
  }
  unint64_t v19 = *(void *)(v31 + 8 * v10);
  if (v19)
  {
LABEL_16:
    unint64_t v14 = (v19 - 1) & v19;
    unint64_t v17 = __clz(__rbit64(v19)) + (v10 << 6);
    goto LABEL_17;
  }
  int64_t v20 = v10 + 1;
  if (v10 + 1 >= v32) {
    goto LABEL_27;
  }
  unint64_t v19 = *(void *)(v31 + 8 * v20);
  if (v19) {
    goto LABEL_15;
  }
  int64_t v20 = v10 + 2;
  if (v10 + 2 >= v32) {
    goto LABEL_27;
  }
  unint64_t v19 = *(void *)(v31 + 8 * v20);
  if (v19) {
    goto LABEL_15;
  }
  int64_t v20 = v10 + 3;
  if (v10 + 3 >= v32)
  {
LABEL_27:
    uint64_t v24 = v28;
    uint64_t v25 = v30;
    uint64_t v26 = v37;
    swift_retain();
    return sub_100B2838C(v29, v24, v25, v26);
  }
  unint64_t v19 = *(void *)(v31 + 8 * v20);
  if (v19)
  {
LABEL_15:
    int64_t v10 = v20;
    goto LABEL_16;
  }
  while (1)
  {
    int64_t v10 = v20 + 1;
    if (__OFADD__(v20, 1)) {
      break;
    }
    if (v10 >= v32) {
      goto LABEL_27;
    }
    unint64_t v19 = *(void *)(v31 + 8 * v10);
    ++v20;
    if (v19) {
      goto LABEL_16;
    }
  }
LABEL_29:
  __break(1u);
LABEL_30:
  __break(1u);
  return result;
}

uint64_t sub_100B2B0C8(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = type metadata accessor for StableIdentifier();
  uint64_t v37 = *(void *)(v4 - 8);
  uint64_t v5 = __chkstk_darwin(v4 - 8);
  uint64_t v36 = (uint64_t)&v33 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5);
  uint64_t v35 = (uint64_t)&v33 - v7;
  sub_10000588C((uint64_t *)&unk_101660950);
  uint64_t v8 = static _DictionaryStorage.copy(original:)();
  uint64_t v9 = (void *)v8;
  int64_t v10 = 0;
  uint64_t v38 = a1;
  uint64_t v13 = *(void *)(a1 + 64);
  uint64_t v12 = a1 + 64;
  uint64_t v11 = v13;
  uint64_t v14 = 1 << *(unsigned char *)(v12 - 32);
  uint64_t v15 = -1;
  if (v14 < 64) {
    uint64_t v15 = ~(-1 << v14);
  }
  unint64_t v16 = v15 & v11;
  uint64_t v33 = v12;
  int64_t v34 = (unint64_t)(v14 + 63) >> 6;
  uint64_t v17 = v8 + 64;
  if ((v15 & v11) == 0) {
    goto LABEL_5;
  }
LABEL_4:
  unint64_t v18 = __clz(__rbit64(v16));
  v16 &= v16 - 1;
  for (unint64_t i = v18 | (v10 << 6); ; unint64_t i = __clz(__rbit64(v21)) + (v10 << 6))
  {
    uint64_t v23 = v38;
    unint64_t v24 = *(void *)(v37 + 72) * i;
    uint64_t v25 = v35;
    sub_100B30D0C(*(void *)(v38 + 48) + v24, v35, (uint64_t (*)(void))type metadata accessor for StableIdentifier);
    uint64_t v26 = *(void **)(*(void *)(v23 + 56) + 8 * i);
    uint64_t v27 = v25;
    uint64_t v28 = v36;
    sub_100B30DB4(v27, v36, (uint64_t (*)(void))type metadata accessor for StableIdentifier);
    uint64_t v39 = v26;
    swift_bridgeObjectRetain_n();
    sub_100AA8594(&v39);
    if (v2) {
      break;
    }
    uint64_t v2 = 0;
    swift_bridgeObjectRelease();
    BOOL v29 = v39;
    *(void *)(v17 + ((i >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << i;
    sub_100B30DB4(v28, v9[6] + v24, (uint64_t (*)(void))type metadata accessor for StableIdentifier);
    *(void *)(v9[7] + 8 * i) = v29;
    uint64_t v30 = v9[2];
    BOOL v20 = __OFADD__(v30, 1);
    uint64_t v31 = v30 + 1;
    if (v20)
    {
      __break(1u);
LABEL_26:
      __break(1u);
LABEL_27:
      __break(1u);
      break;
    }
    v9[2] = v31;
    if (v16) {
      goto LABEL_4;
    }
LABEL_5:
    BOOL v20 = __OFADD__(v10++, 1);
    if (v20) {
      goto LABEL_26;
    }
    if (v10 >= v34) {
      return (uint64_t)v9;
    }
    unint64_t v21 = *(void *)(v33 + 8 * v10);
    if (!v21)
    {
      int64_t v22 = v10 + 1;
      if (v10 + 1 >= v34) {
        return (uint64_t)v9;
      }
      unint64_t v21 = *(void *)(v33 + 8 * v22);
      if (!v21)
      {
        int64_t v22 = v10 + 2;
        if (v10 + 2 >= v34) {
          return (uint64_t)v9;
        }
        unint64_t v21 = *(void *)(v33 + 8 * v22);
        if (!v21)
        {
          int64_t v22 = v10 + 3;
          if (v10 + 3 >= v34) {
            return (uint64_t)v9;
          }
          unint64_t v21 = *(void *)(v33 + 8 * v22);
          if (!v21)
          {
            while (1)
            {
              int64_t v10 = v22 + 1;
              if (__OFADD__(v22, 1)) {
                goto LABEL_27;
              }
              if (v10 >= v34) {
                return (uint64_t)v9;
              }
              unint64_t v21 = *(void *)(v33 + 8 * v10);
              ++v22;
              if (v21) {
                goto LABEL_15;
              }
            }
          }
        }
      }
      int64_t v10 = v22;
    }
LABEL_15:
    unint64_t v16 = (v21 - 1) & v21;
  }
  uint64_t result = swift_release();
  __break(1u);
  return result;
}

uint64_t sub_100B2B3E4(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for StableIdentifier();
  uint64_t v29 = *(void *)(v2 - 8);
  __chkstk_darwin(v2 - 8);
  uint64_t v4 = (char *)&v26 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10000588C(&qword_1016593E8);
  uint64_t result = static _DictionaryStorage.copy(original:)();
  uint64_t v6 = (void *)result;
  int64_t v7 = 0;
  uint64_t v30 = a1;
  uint64_t v10 = *(void *)(a1 + 64);
  uint64_t v9 = a1 + 64;
  uint64_t v8 = v10;
  uint64_t v11 = 1 << *(unsigned char *)(v9 - 32);
  uint64_t v12 = -1;
  if (v11 < 64) {
    uint64_t v12 = ~(-1 << v11);
  }
  unint64_t v13 = v12 & v8;
  uint64_t v27 = v9;
  int64_t v28 = (unint64_t)(v11 + 63) >> 6;
  uint64_t v14 = result + 64;
  if ((v12 & v8) == 0) {
    goto LABEL_5;
  }
LABEL_4:
  unint64_t v15 = __clz(__rbit64(v13));
  v13 &= v13 - 1;
  for (unint64_t i = v15 | (v7 << 6); ; unint64_t i = __clz(__rbit64(v18)) + (v7 << 6))
  {
    uint64_t v20 = v30;
    unint64_t v21 = *(void *)(v29 + 72) * i;
    sub_100B30D0C(*(void *)(v30 + 48) + v21, (uint64_t)v4, (uint64_t (*)(void))type metadata accessor for StableIdentifier);
    uint64_t v22 = *(void *)(*(void *)(*(void *)(v20 + 56) + 8 * i) + 16);
    *(void *)(v14 + ((i >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << i;
    uint64_t result = sub_100B30DB4((uint64_t)v4, v6[6] + v21, (uint64_t (*)(void))type metadata accessor for StableIdentifier);
    *(void *)(v6[7] + 8 * i) = v22;
    uint64_t v23 = v6[2];
    BOOL v24 = __OFADD__(v23, 1);
    uint64_t v25 = v23 + 1;
    if (v24)
    {
      __break(1u);
LABEL_24:
      __break(1u);
      goto LABEL_25;
    }
    v6[2] = v25;
    if (v13) {
      goto LABEL_4;
    }
LABEL_5:
    int64_t v17 = v7 + 1;
    if (__OFADD__(v7, 1)) {
      goto LABEL_24;
    }
    if (v17 >= v28) {
      return (uint64_t)v6;
    }
    unint64_t v18 = *(void *)(v27 + 8 * v17);
    ++v7;
    if (!v18)
    {
      int64_t v7 = v17 + 1;
      if (v17 + 1 >= v28) {
        return (uint64_t)v6;
      }
      unint64_t v18 = *(void *)(v27 + 8 * v7);
      if (!v18)
      {
        int64_t v7 = v17 + 2;
        if (v17 + 2 >= v28) {
          return (uint64_t)v6;
        }
        unint64_t v18 = *(void *)(v27 + 8 * v7);
        if (!v18) {
          break;
        }
      }
    }
LABEL_18:
    unint64_t v13 = (v18 - 1) & v18;
  }
  int64_t v19 = v17 + 3;
  if (v19 >= v28) {
    return (uint64_t)v6;
  }
  unint64_t v18 = *(void *)(v27 + 8 * v19);
  if (v18)
  {
    int64_t v7 = v19;
    goto LABEL_18;
  }
  while (1)
  {
    int64_t v7 = v19 + 1;
    if (__OFADD__(v19, 1)) {
      break;
    }
    if (v7 >= v28) {
      return (uint64_t)v6;
    }
    unint64_t v18 = *(void *)(v27 + 8 * v7);
    ++v19;
    if (v18) {
      goto LABEL_18;
    }
  }
LABEL_25:
  __break(1u);
  return result;
}

uint64_t sub_100B2B684(void **a1, uint64_t a2, uint64_t a3, uint64_t a4, void (*a5)(void), uint64_t a6)
{
  return sub_1003914F0(*a1, a2, a3, a4, a5, a6);
}

id sub_100B2B68C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v417 = a2;
  uint64_t v362 = sub_10000588C(&qword_10163B8A8);
  __chkstk_darwin(v362);
  v364 = (char *)&v351 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v363 = type metadata accessor for KeyDropLostItemDates(0);
  uint64_t v361 = *(void *)(v363 - 8);
  __chkstk_darwin(v363);
  uint64_t v356 = (uint64_t)&v351 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = sub_10000588C((uint64_t *)&unk_101653D30);
  __chkstk_darwin(v9 - 8);
  uint64_t v358 = (uint64_t)&v351 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = sub_10000588C((uint64_t *)&unk_101653D50);
  __chkstk_darwin(v11 - 8);
  v394 = (char *)&v351 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v374 = type metadata accessor for SharedBeaconRecord(0);
  uint64_t v377 = *(void *)(v374 - 8);
  uint64_t v13 = __chkstk_darwin(v374);
  v366 = (char *)&v351 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = __chkstk_darwin(v13);
  uint64_t v353 = (uint64_t)&v351 - v16;
  uint64_t v17 = __chkstk_darwin(v15);
  uint64_t v359 = (uint64_t)&v351 - v18;
  uint64_t v360 = v19;
  __chkstk_darwin(v17);
  uint64_t v398 = (uint64_t)&v351 - v20;
  uint64_t v21 = sub_10000588C(&qword_101638CF0);
  uint64_t v22 = __chkstk_darwin(v21 - 8);
  BOOL v24 = (char *)&v351 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v22);
  uint64_t v372 = (uint64_t)&v351 - v25;
  uint64_t v26 = sub_10000588C(&qword_10163B9F0);
  __chkstk_darwin(v26 - 8);
  v393 = (char *)&v351 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v404 = type metadata accessor for OwnedBeaconRecord();
  uint64_t v392 = *(void *)(v404 - 8);
  __chkstk_darwin(v404);
  uint64_t v373 = (uint64_t)&v351 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v390 = sub_10000588C(&qword_10163B9E0);
  __chkstk_darwin(v390);
  v382 = (char *)&v351 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v391 = type metadata accessor for BeaconNamingRecord();
  uint64_t v389 = *(void *)(v391 - 8);
  __chkstk_darwin(v391);
  uint64_t v401 = (uint64_t)&v351 - ((v30 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v31 = sub_10000588C((uint64_t *)&unk_10163B1D0);
  __chkstk_darwin(v31 - 8);
  v388 = (char *)&v351 - ((v32 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v33 = sub_10000588C(&qword_10163BBB0);
  uint64_t v34 = __chkstk_darwin(v33 - 8);
  uint64_t v371 = (uint64_t)&v351 - ((v35 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v34);
  uint64_t v378 = (uint64_t)&v351 - v36;
  uint64_t v403 = type metadata accessor for BeaconProductInfoRecord();
  uint64_t v402 = *(void *)(v403 - 8);
  uint64_t v37 = __chkstk_darwin(v403);
  uint64_t v357 = (uint64_t)&v351 - ((v38 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v37);
  uint64_t v367 = (uint64_t)&v351 - v39;
  uint64_t v40 = sub_10000588C(&qword_10163BB80);
  __chkstk_darwin(v40 - 8);
  v381 = (char *)&v351 - ((v41 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v387 = type metadata accessor for KeyAlignmentRecord();
  uint64_t v386 = *(void *)(v387 - 8);
  __chkstk_darwin(v387);
  uint64_t v370 = (uint64_t)&v351 - ((v42 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v383 = sub_10000588C((uint64_t *)&unk_101653D40);
  uint64_t v43 = __chkstk_darwin(v383);
  uint64_t v385 = (uint64_t)&v351 - ((v44 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v45 = __chkstk_darwin(v43);
  v384 = (uint64_t *)((char *)&v351 - v46);
  __chkstk_darwin(v45);
  unint64_t v48 = (char *)&v351 - v47;
  uint64_t v434 = type metadata accessor for LocationProvider();
  uint64_t v49 = *(void *)(v434 - 8);
  uint64_t v50 = __chkstk_darwin(v434 - 8);
  uint64_t v427 = (uint64_t)&v351 - ((v51 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v50);
  unint64_t v53 = (char *)&v351 - v52;
  uint64_t v54 = sub_10000588C(&qword_1016426B0);
  uint64_t v55 = __chkstk_darwin(v54 - 8);
  uint64_t v429 = (uint64_t)&v351 - ((v56 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v55);
  uint64_t v431 = (uint64_t)&v351 - v57;
  uint64_t v400 = sub_10000588C(&qword_10163BB30);
  uint64_t v58 = __chkstk_darwin(v400);
  v399 = (char *)&v351 - ((v59 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v58);
  v410 = (char *)&v351 - v60;
  uint64_t v61 = sub_10000588C((uint64_t *)&unk_10163AC90);
  uint64_t v62 = __chkstk_darwin(v61 - 8);
  v352 = (char *)&v351 - ((v63 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v64 = __chkstk_darwin(v62);
  uint64_t v354 = (uint64_t)&v351 - v65;
  uint64_t v66 = __chkstk_darwin(v64);
  v380 = (char *)&v351 - v67;
  __chkstk_darwin(v66);
  uint64_t v376 = (uint64_t)&v351 - v68;
  uint64_t v69 = sub_10000588C(&qword_10163BB70);
  __chkstk_darwin(v69 - 8);
  v396 = (uint64_t *)((char *)&v351 - ((v70 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v430 = type metadata accessor for Date();
  uint64_t v419 = *(void *)(v430 - 8);
  uint64_t v71 = __chkstk_darwin(v430);
  v351 = (char *)&v351 - ((v72 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v73 = __chkstk_darwin(v71);
  v355 = (char *)&v351 - v74;
  uint64_t v75 = __chkstk_darwin(v73);
  v379 = (char *)&v351 - v76;
  uint64_t v77 = __chkstk_darwin(v75);
  v432 = (char *)&v351 - v78;
  uint64_t v79 = __chkstk_darwin(v77);
  v409 = (char *)&v351 - v80;
  __chkstk_darwin(v79);
  v405 = (char *)&v351 - v81;
  uint64_t v423 = type metadata accessor for UUID();
  uint64_t v406 = *(void *)(v423 - 8);
  uint64_t v82 = __chkstk_darwin(v423);
  uint64_t v397 = (uint64_t)&v351 - ((v83 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v84 = __chkstk_darwin(v82);
  v395 = (long long *)((char *)&v351 - v85);
  uint64_t v86 = __chkstk_darwin(v84);
  v420 = (char *)&v351 - v87;
  __chkstk_darwin(v86);
  v413 = (char *)&v351 - v88;
  v445[3] = a3;
  v445[4] = a4;
  v89 = sub_10001D958(v445);
  (*(void (**)(uint64_t *, uint64_t, uint64_t))(*(void *)(a3 - 8) + 16))(v89, a1, a3);
  id v422 = [objc_allocWithZone((Class)SPBeacon) init];
  uint64_t v90 = *(uint64_t (**)(uint64_t, uint64_t))(a4 + 48);
  v428 = (void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(a4 + 48);
  v416 = v90;
  uint64_t v91 = v90(a3, a4);
  uint64_t v92 = *(uint64_t (**)(uint64_t, uint64_t))(a4 + 56);
  uint64_t v414 = a4;
  v433 = v92;
  uint64_t v93 = v92(a3, a4);
  uint64_t v94 = sub_1002AAF08(v91, v93);
  uint64_t v421 = a3;
  v426 = v89;
  v407 = v48;
  v365 = v24;
  uint64_t v415 = a4 + 56;
  if (v95 >> 60 == 15)
  {
    if (qword_101636F50 != -1) {
      swift_once();
    }
    uint64_t v96 = type metadata accessor for Logger();
    sub_100010324(v96, (uint64_t)qword_10170E9E8);
    sub_10001D010((uint64_t)v445, (uint64_t)&v436);
    sub_10001D010((uint64_t)v445, (uint64_t)&v443);
    v97 = Logger.logObject.getter();
    os_log_type_t v98 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v97, v98))
    {
      uint64_t v99 = swift_slowAlloc();
      *(_DWORD *)uint64_t v99 = 134218240;
      uint64_t v425 = v99 + 4;
      sub_10001CD44(&v436, v438);
      uint64_t v100 = a3;
      uint64_t v101 = a3;
      uint64_t v102 = v414;
      uint64_t v103 = v416(v100, v414);
      _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)&v436);
      *(void *)&long long v435 = v103;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v99 + 12) = 2048;
      uint64_t v425 = v99 + 14;
      sub_10001CD44(&v443, v444);
      uint64_t v104 = v433(v101, v102);
      _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)&v443);
      *(void *)&long long v436 = v104;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      _os_log_impl((void *)&_mh_execute_header, v97, v98, "Unable to create AccessoryProductData from %ld/%ld", (uint8_t *)v99, 0x16u);
      swift_slowDealloc();
    }
    else
    {
      _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)&v443);
      _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)&v436);
    }

    UUID.init(uuid:)();
  }
  else
  {
    uint64_t v105 = v94;
    unint64_t v106 = v95;
    if (qword_101636960 != -1) {
      swift_once();
    }
    long long v436 = xmmword_1016408F8;
    sub_1000361E0(xmmword_1016408F8, *((unint64_t *)&xmmword_1016408F8 + 1));
    Data.append(_:)();
    uint64_t v107 = v436;
    uint64_t v108 = v105;
    unint64_t v109 = *((void *)&v436 + 1);
    long long v443 = v436;
    sub_1000362FC();
    DataProtocol.stableUUID.getter();
    sub_10001CFB8(v107, v109);
    sub_100037A24(v108, v106);
  }
  uint64_t v110 = v414;
  uint64_t v111 = *(void *)(*(void *)(v414 + 8) + 8);
  v418 = *(void (**)(uint64_t, uint64_t))(v111 + 32);
  v112 = v420;
  uint64_t v113 = v421;
  v418(v421, v111);
  Class isa = UUID._bridgeToObjectiveC()().super.isa;
  v115 = *(void (**)(uint64_t, uint64_t))(v406 + 8);
  uint64_t v425 = v406 + 8;
  v424 = v115;
  v115((uint64_t)v112, v423);
  id v116 = v422;
  [v422 setIdentifier:isa];

  (*(void (**)(uint64_t, uint64_t))(v110 + 16))(v113, v110);
  NSString v117 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  [v116 setModel:v117];

  sub_10001D4B0(0, &qword_10163B870);
  sub_10033149C(&qword_10163B878, &qword_10163B870);
  Class v118 = Set._bridgeToObjectiveC()().super.isa;
  [v116 setShares:v118];

  (*(void (**)(uint64_t, uint64_t))(v110 + 24))(v113, v110);
  NSString v119 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  [v116 setSystemVersion:v119];

  Class v120 = UUID._bridgeToObjectiveC()().super.isa;
  [v116 setProductUUID:v120];

  [v116 setVendorId:v416(v113, v110)];
  [v116 setProductId:v433(v113, v110)];
  v121 = *(void (**)(uint64_t, uint64_t))(v110 + 184);
  v122 = v405;
  uint64_t v369 = v110 + 184;
  v368 = v121;
  v121(v113, v110);
  Class v123 = Date._bridgeToObjectiveC()().super.isa;
  v124 = *(void (**)(char *, long long *))(v419 + 8);
  uint64_t v412 = v419 + 8;
  v411 = v124;
  v124(v122, (long long *)v430);
  [v116 setPairingDate:v123];

  v125 = (void *)(*(uint64_t (**)(uint64_t, uint64_t))(v110 + 176))(v113, v110);
  [v116 setType:v125];

  uint64_t v126 = (uint64_t)v395;
  v416 = (uint64_t (*)(uint64_t, uint64_t))v111;
  uint64_t v415 = v111 + 32;
  v418(v113, v111);
  uint64_t v408 = *(void *)(v417 + 160);
  v127 = sub_100B6D358(v126);
  uint64_t v128 = v127[2];
  v129 = (int *)type metadata accessor for LostModeRecord();
  uint64_t v130 = *((void *)v129 - 1);
  if (v128)
  {
    v131 = v396;
    sub_100B30D0C((uint64_t)v127+ ((*(unsigned __int8 *)(*((void *)v129 - 1) + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*((void *)v129 - 1) + 80)), (uint64_t)v396, (uint64_t (*)(void))type metadata accessor for LostModeRecord);
    uint64_t v132 = 0;
    uint64_t v133 = v397;
  }
  else
  {
    uint64_t v132 = 1;
    uint64_t v133 = v397;
    v131 = v396;
  }
  (*(void (**)(uint64_t *, uint64_t, uint64_t, int *))(v130 + 56))(v131, v132, 1, v129);
  swift_bridgeObjectRelease();
  v424(v126, v423);
  int v134 = (*(uint64_t (**)(uint64_t *, uint64_t, int *))(v130 + 48))(v131, 1, v129);
  v135 = (long long *)v430;
  if (v134 == 1)
  {
    sub_10001DAB4((uint64_t)v131, &qword_10163BB70);
    id v136 = 0;
  }
  else
  {
    v137 = (char *)v131 + v129[9];
    uint64_t v138 = *((void *)v137 + 1);
    v433 = *(uint64_t (**)(uint64_t, uint64_t))v137;
    v396 = (uint64_t *)v138;
    uint64_t v139 = v129[8];
    v140 = (uint64_t *)((char *)v131 + v129[7]);
    uint64_t v141 = v140[1];
    uint64_t v397 = *v140;
    uint64_t v142 = *(uint64_t *)((char *)v131 + v139 + 8);
    v428 = *(void (***)(uint64_t, uint64_t, uint64_t, uint64_t))((char *)v131 + v139);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    uint64_t v144 = v376;
    sub_100B23660(v131, v376);
    (*(void (**)(uint64_t, void, uint64_t, long long *))(v419 + 56))(v144, 0, 1, v135);
    id v145 = objc_allocWithZone((Class)SPLostModeInfo);
    id v136 = sub_100B23CB8((uint64_t)v433, (uint64_t)v396, v397, v141, (uint64_t)v428, v142, v144);
    sub_100B310AC((uint64_t)v131, (uint64_t (*)(void))type metadata accessor for LostModeRecord);
  }
  v146 = v410;
  [v422 setLostModeInfo:v136];

  v418(v421, (uint64_t)v416);
  if (qword_101636CB8 != -1) {
    swift_once();
  }
  sub_1007B4970(v133, 0, 0, &v436);
  uint64_t v148 = v400;
  uint64_t v149 = (uint64_t)&v146[*(int *)(v400 + 48)];
  LOBYTE(v147) = sub_100AF7A38(v149, v133, (void *)v436, 1);
  swift_bridgeObjectRelease();
  v424(v133, v423);
  char v150 = v147 & 1;
  unsigned char *v146 = v147 & 1;
  [v422 setConnected:v147 & 1];
  uint64_t v151 = *(int *)(v148 + 48);
  v152 = v399;
  v153 = &v399[v151];
  char *v399 = v150;
  sub_10001D074(v149, (uint64_t)&v152[v151], (uint64_t *)&unk_10163AC90);
  v154 = *(char **)(v419 + 48);
  uint64_t v400 = v419 + 48;
  v399 = v154;
  if (((unsigned int (*)(char *, uint64_t, long long *))v154)(v153, 1, v135) == 1)
  {
    Class v155 = 0;
  }
  else
  {
    Class v155 = Date._bridgeToObjectiveC()().super.isa;
    v411(v153, v135);
  }
  uint64_t v156 = v421;
  id v157 = v422;
  [v422 setConnectedStateExpiryDate:v155];

  [v157 setIsAppleAudioAccessory:(*(uint64_t (**)(uint64_t))(v414 + 120))(v156) & 1];
  if (qword_101636CD8 != -1) {
    swift_once();
  }
  OS_dispatch_queue.sync<A>(execute:)();
  uint64_t v397 = 0;
  sub_1010ABF18(v436);
  swift_bridgeObjectRelease();
  v158 = v409;
  Date.init(timeIntervalSinceNow:)();
  uint64_t v159 = (uint64_t)v420;
  v418(v156, (uint64_t)v416);
  v160 = (uint64_t (*)(uint64_t, uint64_t))sub_100B6EE9C(v159);
  v424(v159, v423);
  v161 = *(void (**)(char *, uint64_t, uint64_t))(v419 + 16);
  uint64_t v376 = v419 + 16;
  v375 = v161;
  v161(v432, (uint64_t)v158, (uint64_t)v135);
  v162 = (void **)SPLocationProvider_ptr;
  uint64_t v163 = sub_10001D4B0(0, (unint64_t *)&unk_10166BF70);
  v164 = (long long *)sub_10033149C(&qword_1016426B8, (unint64_t *)&unk_10166BF70);
  swift_bridgeObjectRetain();
  v396 = (uint64_t *)v163;
  v395 = v164;
  v165 = 0;
  *(void *)&long long v436 = Set.init(minimumCapacity:)();
  v166 = (void **)*((void *)v160 + 2);
  v428 = (void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v49 + 56);
  v433 = v160;
  if (v166) {
    goto LABEL_25;
  }
LABEL_28:
  while (1)
  {
    uint64_t v167 = 1;
    v165 = v166;
LABEL_30:
    uint64_t v168 = v431;
    uint64_t v169 = v434;
    (*v428)(v431, v167, 1, v434);
    uint64_t v170 = v168;
    uint64_t v171 = v429;
    sub_10001D608(v170, v429, &qword_1016426B0);
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v49 + 48))(v171, 1, v169) == 1) {
      break;
    }
    uint64_t v172 = v427;
    sub_100B30DB4(v171, v427, (uint64_t (*)(void))type metadata accessor for LocationProvider);
    char v173 = sub_100B967D0(*(unsigned __int8 *)(v172 + *(int *)(v169 + 24)), *(void *)(v172 + *(int *)(v169 + 24) + 8), *(void **)(v172 + *(int *)(v169 + 24) + 16));
    v162 = (void **)sub_100ECF4F0(v173, v174, v175);
    swift_bridgeObjectRelease();
    id v176 = objc_allocWithZone((Class)SPLocationProvider);
    Class v177 = Date._bridgeToObjectiveC()().super.isa;
    id v178 = [v176 initWithTimestamp:v177 provider:v162];

    sub_100B310AC(v172, (uint64_t (*)(void))type metadata accessor for LocationProvider);
    v164 = &v436;
    sub_100DCCD24(&v443, v178);

    v135 = (long long *)v430;
    v160 = v433;
    if (v165 != v166)
    {
LABEL_25:
      while ((unint64_t)v165 < *((void *)v160 + 2))
      {
        v162 = (void **)((char *)v165 + 1);
        sub_100B30D0C((uint64_t)v160+ ((*(unsigned __int8 *)(v49 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v49 + 80))+ *(void *)(v49 + 72) * (void)v165, (uint64_t)v53, (uint64_t (*)(void))type metadata accessor for LocationProvider);
        sub_100B22DA4((unint64_t *)&qword_1016605E0, (void (*)(uint64_t))&type metadata accessor for Date);
        v164 = v135;
        if ((dispatch thunk of static Comparable.< infix(_:_:)() & 1) == 0)
        {
          sub_100B30DB4((uint64_t)v53, v431, (uint64_t (*)(void))type metadata accessor for LocationProvider);
          uint64_t v167 = 0;
          v165 = (void **)((char *)v165 + 1);
          goto LABEL_30;
        }
        sub_100B310AC((uint64_t)v53, (uint64_t (*)(void))type metadata accessor for LocationProvider);
        v165 = (void **)((char *)v165 + 1);
        v160 = v433;
        if (v166 == v162) {
          goto LABEL_28;
        }
      }
      __break(1u);
      goto LABEL_77;
    }
  }
  swift_bridgeObjectRelease();
  Class v179 = Set._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  id v180 = v422;
  [v422 setLocationProviders:v179];

  type metadata accessor for BeaconKeyManager(0);
  uint64_t v181 = v397;
  OSAllocatedUnfairLock.callAsFunction<A>(_:)();
  uint64_t v431 = v181;
  uint64_t v182 = v436;
  sub_10001D010((uint64_t)v445, (uint64_t)&v436);
  uint64_t v183 = swift_allocObject();
  *(void *)(v183 + 16) = v182;
  sub_10001CEB0(&v436, v183 + 24);
  uint64_t v434 = v182;
  swift_retain();
  uint64_t v184 = (uint64_t)v407;
  unsafeFromAsyncTask<A>(_:)();
  swift_release();
  v185 = (uint64_t *)&unk_101653D40;
  v186 = v384;
  sub_10001D074(v184, (uint64_t)v384, (uint64_t *)&unk_101653D40);
  uint64_t v187 = sub_10000588C(&qword_10163F7B0);
  v188 = *(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(*(void *)(v187 - 8) + 48);
  uint64_t v189 = 1;
  if (v188(v186, 1, v187) != 1)
  {
    uint64_t v189 = *v186;
    v185 = &qword_10163F7B0;
  }
  uint64_t v190 = v423;
  uint64_t v191 = (uint64_t)v381;
  sub_10001DAB4((uint64_t)v186, v185);
  id v192 = v180;
  [v180 setKeySyncLastObservedIndex:v189];
  uint64_t v193 = v385;
  sub_10001D074(v184, v385, (uint64_t *)&unk_101653D40);
  if (v188((uint64_t *)v193, 1, v187) == 1)
  {
    sub_10001DAB4(v193, (uint64_t *)&unk_101653D40);
    v194 = *(void (***)(uint64_t, uint64_t, uint64_t, uint64_t))(v419 + 56);
    uint64_t v195 = (uint64_t)v380;
    v196 = v380;
    uint64_t v197 = 1;
    uint64_t v198 = v430;
  }
  else
  {
    uint64_t v199 = v193 + *(int *)(v187 + 36);
    uint64_t v195 = (uint64_t)v380;
    uint64_t v198 = v430;
    v375(v380, v199, v430);
    sub_10001DAB4(v193, &qword_10163F7B0);
    v194 = *(void (***)(uint64_t, uint64_t, uint64_t, uint64_t))(v419 + 56);
    v196 = (char *)v195;
    uint64_t v197 = 0;
  }
  v428 = v194;
  ((void (*)(char *, uint64_t, uint64_t, uint64_t))v194)(v196, v197, 1, v198);
  v200 = v379;
  sub_10001D010((uint64_t)v445, (uint64_t)&v443);
  if (((unsigned int (*)(uint64_t, uint64_t, uint64_t))v399)(v195, 1, v198) == 1)
  {
    sub_10001CD44(&v443, v444);
    uint64_t v201 = v421;
    v368(v421, v414);
    sub_10001DAB4(v195, (uint64_t *)&unk_10163AC90);
  }
  else
  {
    (*(void (**)(char *, uint64_t, uint64_t))(v419 + 32))(v200, v195, v198);
    uint64_t v201 = v421;
  }
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)&v443);
  Class v202 = Date._bridgeToObjectiveC()().super.isa;
  v203 = v200;
  v204 = (void (*)(char *, uint64_t))v411;
  v411(v203, (long long *)v198);
  [v192 setKeySyncLastIndexObservationDate:v202];

  [v192 setKeySyncWildIndexFallback:1];
  v205 = v420;
  v418(v201, (uint64_t)v416);
  sub_100B6C53C(v191);
  v424((uint64_t)v205, v190);
  uint64_t v206 = v387;
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v386 + 48))(v191, 1, v387) == 1)
  {
    sub_10001DAB4(v191, &qword_10163BB80);
    [v192 setKeyAlignmentLastObservedIndex:0];
    v207 = v405;
    static Date.distantPast.getter();
    Class v208 = Date._bridgeToObjectiveC()().super.isa;
    v204(v207, v198);
    [v192 setKeyAlignmentLastIndexObservationDate:v208];
  }
  else
  {
    uint64_t v209 = v370;
    sub_100B30DB4(v191, v370, (uint64_t (*)(void))type metadata accessor for KeyAlignmentRecord);
    [v192 setKeyAlignmentLastObservedIndex:*(void *)(v209 + *(int *)(v206 + 28))];
    Class v210 = Date._bridgeToObjectiveC()().super.isa;
    [v192 setKeyAlignmentLastIndexObservationDate:v210];

    sub_100B310AC(v209, (uint64_t (*)(void))type metadata accessor for KeyAlignmentRecord);
  }
  id v211 = [v192 type];
  uint64_t v212 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v214 = v213;
  if (v212 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v214 == v215) {
    goto LABEL_46;
  }
  char v217 = _stringCompareWithSmolCheck(_:_:expecting:)();

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v216 = v417;
  if (v217) {
    goto LABEL_48;
  }
  id v211 = [v192 type];
  uint64_t v234 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v236 = v235;
  if (v234 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v236 == v237)
  {
LABEL_46:

    swift_bridgeObjectRelease_n();
    uint64_t v216 = v417;
    goto LABEL_48;
  }
  char v238 = _stringCompareWithSmolCheck(_:_:expecting:)();

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v216 = v417;
  if (v238)
  {
LABEL_48:
    id v218 = [v192 identifier];
    uint64_t v219 = (uint64_t)v420;
    static UUID._unconditionallyBridgeFromObjectiveC(_:)();

    uint64_t v220 = v378;
    sub_100AE311C(v219, v378);
    v424(v219, v423);
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v402 + 48))(v220, 1, v403) == 1)
    {
      sub_10001DAB4(v220, &qword_10163BBB0);
    }
    else
    {
      uint64_t v221 = v367;
      sub_100B30DB4(v220, v367, (uint64_t (*)(void))type metadata accessor for BeaconProductInfoRecord);
      id v222 = sub_100853D90();
      [v192 setAccessoryProductInfo:v222];

      sub_100B310AC(v221, (uint64_t (*)(void))type metadata accessor for BeaconProductInfoRecord);
    }
  }
  sub_10001D010((uint64_t)v445, (uint64_t)&v436);
  uint64_t v223 = sub_10000588C((uint64_t *)&unk_10164DBF0);
  uint64_t v224 = type metadata accessor for LocalFindableAccessoryRecord();
  uint64_t v225 = (uint64_t)v388;
  uint64_t v429 = v223;
  int v226 = swift_dynamicCast();
  v227 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v224 - 8) + 56);
  if (v226)
  {
    v227(v225, 0, 1, v224);
    sub_10001DAB4(v225, (uint64_t *)&unk_10163B1D0);
    id v228 = [v192 identifier];
    uint64_t v229 = (uint64_t)v420;
    static UUID._unconditionallyBridgeFromObjectiveC(_:)();

    uint64_t v230 = v371;
    sub_100AE311C(v229, v371);
    uint64_t v231 = v423;
    v424(v229, v423);
    int v232 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v402 + 48))(v230, 1, v403);
    uint64_t v233 = (uint64_t)v382;
    if (v232 == 1)
    {
      sub_10001DAB4(v230, &qword_10163BBB0);
    }
    else
    {
      uint64_t v239 = v230;
      uint64_t v240 = v357;
      sub_100B30DB4(v239, v357, (uint64_t (*)(void))type metadata accessor for BeaconProductInfoRecord);
      id v241 = sub_100853D90();
      [v192 setAccessoryProductInfo:v241];

      sub_100B310AC(v240, (uint64_t (*)(void))type metadata accessor for BeaconProductInfoRecord);
    }
  }
  else
  {
    v227(v225, 1, 1, v224);
    sub_10001DAB4(v225, (uint64_t *)&unk_10163B1D0);
    uint64_t v231 = v423;
    uint64_t v233 = (uint64_t)v382;
  }
  v242 = v420;
  uint64_t v243 = v421;
  uint64_t v244 = ((uint64_t (*)(uint64_t, void))v418)(v421, v416);
  __chkstk_darwin(v244);
  QueueSynchronizer.conditionalSync<A>(_:)();
  v424((uint64_t)v242, v231);
  uint64_t v245 = v391;
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v389 + 48))(v233, 1, v391) == 1)
  {
    sub_10001DAB4(v233, &qword_10163B9E0);
    sub_10001D010((uint64_t)v445, (uint64_t)&v435);
    uint64_t v246 = swift_allocObject();
    *(void *)(v246 + 16) = v216;
    sub_10001CEB0(&v435, v246 + 24);
    swift_retain();
    sub_10000588C(&qword_10163A110);
    unsafeFromAsyncTask<A>(_:)();
    swift_release();
    v162 = (void **)*((void *)&v436 + 1);
    if (!*((void *)&v436 + 1))
    {
      uint64_t v272 = v398;
      uint64_t v273 = (uint64_t)v394;
      uint64_t v49 = v404;
      goto LABEL_79;
    }
    v160 = (uint64_t (*)(uint64_t, uint64_t))v436;
    v247 = v192;
    uint64_t v248 = v437;
    uint64_t v431 = v438;
    uint64_t v250 = v439;
    v249 = v440;
    uint64_t v251 = v441;
    uint64_t v252 = v442;
    NSString v253 = String._bridgeToObjectiveC()();
    [v247 setName:v253];

    uint64_t v254 = (*(uint64_t (**)(uint64_t, uint64_t))(v414 + 200))(v248, v421);
    v164 = (long long *)v254;
    uint64_t v427 = v251;
    v420 = v249;
    if (v248 == SPBeaconRoleIdOther && v250 && v254)
    {
      swift_bridgeObjectRetain();
      id v255 = [v164 role];
      static String._unconditionallyBridgeFromObjectiveC(_:)();

      id v256 = objc_allocWithZone((Class)SPBeaconRole);
      NSString v257 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease();
      NSString v258 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease();
      id v259 = [v256 initWithRoleId:v248 role:v257 roleEmoji:v258];

      [v422 setRole:v259];
    }
    else
    {
      [v422 setRole:v254];
    }
    uint64_t v49 = v404;
    if (v252)
    {
      swift_bridgeObjectRetain();
      NSString v274 = String._bridgeToObjectiveC()();
      sub_100090C68((uint64_t)v160, (uint64_t)v162);
      swift_bridgeObjectRelease();
    }
    else
    {
LABEL_77:
      sub_100090C68((uint64_t)v160, (uint64_t)v162);
      NSString v274 = 0;
    }
    uint64_t v272 = v398;
    id v192 = v422;
    [v422 setSerialNumber:v274];

    uint64_t v231 = v423;
    uint64_t v216 = v417;
    uint64_t v273 = (uint64_t)v394;
    goto LABEL_79;
  }
  uint64_t v260 = v401;
  sub_100B30DB4(v233, v401, (uint64_t (*)(void))type metadata accessor for BeaconNamingRecord);
  uint64_t v261 = v245;
  swift_bridgeObjectRetain();
  NSString v262 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  [v192 setName:v262];

  uint64_t v263 = *(void *)(v260 + *(int *)(v261 + 28));
  uint64_t v264 = (*(uint64_t (**)(uint64_t, uint64_t))(v414 + 200))(v263, v243);
  v265 = (void *)v264;
  uint64_t v49 = v404;
  if (v263 == SPBeaconRoleIdOther && *(void *)(v401 + *(int *)(v261 + 36) + 8) && v264)
  {
    swift_bridgeObjectRetain();
    id v266 = [v265 role];
    static String._unconditionallyBridgeFromObjectiveC(_:)();

    id v267 = objc_allocWithZone((Class)SPBeaconRole);
    NSString v268 = String._bridgeToObjectiveC()();
    id v192 = v422;
    swift_bridgeObjectRelease();
    NSString v269 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    v270 = v267;
    uint64_t v216 = v417;
    id v271 = [v270 initWithRoleId:v263 role:v268 roleEmoji:v269];

    uint64_t v231 = v423;
    [v192 setRole:v271];

    v265 = v271;
  }
  else
  {
    [v192 setRole:v264];
  }
  uint64_t v272 = v398;
  uint64_t v273 = (uint64_t)v394;

  sub_100B310AC(v401, (uint64_t (*)(void))type metadata accessor for BeaconNamingRecord);
LABEL_79:
  sub_10001D010((uint64_t)v445, (uint64_t)&v436);
  uint64_t v275 = (uint64_t)v393;
  int v276 = swift_dynamicCast();
  v277 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v392 + 56);
  if (v276)
  {
    v277(v275, 0, 1, v49);
    uint64_t v278 = v373;
    sub_100B30DB4(v275, v373, (uint64_t (*)(void))type metadata accessor for OwnedBeaconRecord);
    sub_101110C7C();
    NSString v279 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    [v192 setStableIdentifier:v279];

    uint64_t v280 = v372;
    sub_10001D074(v278 + *(int *)(v49 + 28), v372, &qword_101638CF0);
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v406 + 48))(v280, 1, v231) == 1)
    {
      Class v281 = 0;
    }
    else
    {
      Class v281 = UUID._bridgeToObjectiveC()().super.isa;
      v424(v280, v231);
    }
    v297 = v413;
    v298 = (void (*)(char *, uint64_t))v411;
    uint64_t v299 = v430;
    [v192 setGroupIdentifier:v281];

    sub_100B351DC(v278);
    if (v300)
    {
      NSString v301 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease();
    }
    else
    {
      NSString v301 = 0;
    }
    [v192 setSerialNumber:v301];

    [v192 setPartIdentifier:sub_100B354CC(v278)];
    uint64_t v304 = v404;
    [v192 setBatteryLevel:*(unsigned __int8 *)(v278 + *(int *)(v404 + 76))];
    [v192 setIsZeus:*(unsigned __int8 *)(v278 + *(int *)(v304 + 80))];
    if (qword_1016370B8 != -1) {
      swift_once();
    }
    [v192 setOwner:qword_10170ECD8];
    [v192 setAccepted:1];
    NSString v305 = String._bridgeToObjectiveC()();
    [v192 setCorrelationIdentifier:v305];

    [v192 setInternalShareType:-1];
    [v192 setOwnerBeaconIdentifier:0];
    swift_bridgeObjectRelease();
    swift_release();
    v298(v432, v299);
    sub_100B310AC(v278, (uint64_t (*)(void))type metadata accessor for OwnedBeaconRecord);
    sub_10001DAB4((uint64_t)v407, (uint64_t *)&unk_101653D40);
    v298(v409, v299);
    sub_10001DAB4((uint64_t)v410, &qword_10163BB30);
    v306 = v297;
    goto LABEL_93;
  }
  v277(v275, 1, 1, v49);
  sub_10001DAB4(v275, &qword_10163B9F0);
  sub_10001D010((uint64_t)v445, (uint64_t)&v436);
  v282 = (int *)v374;
  char v283 = swift_dynamicCast();
  v284 = *(void (**)(uint64_t, uint64_t, uint64_t, int *))(v377 + 56);
  if (v283)
  {
    v284(v273, 0, 1, v282);
    sub_100B30DB4(v273, v272, type metadata accessor for SharedBeaconRecord);
    NSString v285 = String._bridgeToObjectiveC()();
    [v192 setStableIdentifier:v285];

    uint64_t v286 = v272 + v282[7];
    v287 = v282;
    uint64_t v288 = *(void *)(v286 + 8);
    v289 = *(void **)(v286 + 16);
    char v290 = *(unsigned char *)v286;
    swift_bridgeObjectRetain();
    v291 = (void *)sub_100ECF4F0(v290, v288, v289);
    swift_bridgeObjectRelease();
    [v192 setOwner:v291];

    [v192 setAccepted:*(unsigned __int8 *)(v272 + v287[13])];
    swift_bridgeObjectRetain();
    NSString v292 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    [v192 setCorrelationIdentifier:v292];

    [v192 setInternalShareType:*(unsigned __int8 *)(v272 + v287[16])];
    uint64_t v293 = v358;
    sub_10001D074(v272 + v287[20], v358, (uint64_t *)&unk_101653D30);
    uint64_t v294 = type metadata accessor for SharedBeaconRecord.PropertyListContent(0);
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v294 - 8) + 48))(v293, 1, v294) == 1)
    {
      sub_10001DAB4(v293, (uint64_t *)&unk_101653D30);
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v406 + 56))(v365, 1, 1, v231);
      Class v295 = 0;
      uint64_t v296 = (uint64_t)v366;
    }
    else
    {
      uint64_t v309 = (uint64_t)v365;
      sub_10001D074(v293 + *(int *)(v294 + 20), (uint64_t)v365, &qword_101638CF0);
      sub_100B310AC(v293, type metadata accessor for SharedBeaconRecord.PropertyListContent);
      int v310 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v406 + 48))(v309, 1, v231);
      uint64_t v296 = (uint64_t)v366;
      if (v310 == 1)
      {
        Class v295 = 0;
      }
      else
      {
        Class v295 = UUID._bridgeToObjectiveC()().super.isa;
        v424(v309, v231);
      }
    }
    [v192 setOwnerBeaconIdentifier:v295];

    uint64_t v311 = v359;
    sub_100B30D0C(v272, v359, type metadata accessor for SharedBeaconRecord);
    unint64_t v312 = (*(unsigned __int8 *)(v377 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v377 + 80);
    uint64_t v313 = swift_allocObject();
    *(void *)(v313 + 16) = v216;
    sub_100B30DB4(v311, v313 + v312, type metadata accessor for SharedBeaconRecord);
    swift_retain();
    uint64_t v314 = (uint64_t)v364;
    unsafeFromAsyncTask<A>(_:)();
    swift_release();
    uint64_t v315 = v363;
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v361 + 48))(v314, 1, v363) == 1)
    {
      sub_10001DAB4(v314, &qword_10163B8A8);
      v316 = (void (*)(char *, uint64_t))v411;
      uint64_t v317 = v430;
    }
    else
    {
      uint64_t v318 = v314;
      uint64_t v319 = v315;
      uint64_t v320 = v356;
      sub_100B30DB4(v318, v356, type metadata accessor for KeyDropLostItemDates);
      uint64_t v321 = v320 + *(int *)(v319 + 20);
      uint64_t v322 = v354;
      sub_10001D074(v321, v354, (uint64_t *)&unk_10163AC90);
      uint64_t v317 = v430;
      int v323 = ((uint64_t (*)(uint64_t, uint64_t, uint64_t))v399)(v322, 1, v430);
      v316 = (void (*)(char *, uint64_t))v411;
      if (v323 != 1)
      {
        v332 = v355;
        (*(void (**)(char *, uint64_t, uint64_t))(v419 + 32))(v355, v322, v317);
        if (qword_101636888 != -1) {
          swift_once();
        }
        uint64_t v333 = type metadata accessor for Logger();
        sub_100010324(v333, (uint64_t)qword_10170D788);
        uint64_t v334 = v353;
        sub_100B30D0C(v272, v353, type metadata accessor for SharedBeaconRecord);
        v335 = v351;
        v375(v351, (uint64_t)v332, v317);
        v336 = Logger.logObject.getter();
        os_log_type_t v337 = static os_log_type_t.default.getter();
        int v338 = v337;
        if (os_log_type_enabled(v336, v337))
        {
          uint64_t v339 = swift_slowAlloc();
          uint64_t v431 = swift_slowAlloc();
          *(void *)&long long v436 = v431;
          *(_DWORD *)uint64_t v339 = 141558531;
          *(void *)&long long v435 = 1752392040;
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          *(_WORD *)(v339 + 12) = 2081;
          LODWORD(v429) = v338;
          sub_100B22DA4((unint64_t *)&qword_101638B10, (void (*)(uint64_t))&type metadata accessor for UUID);
          uint64_t v340 = dispatch thunk of CustomStringConvertible.description.getter();
          *(void *)&long long v435 = sub_1008FA0F0(v340, v341, (uint64_t *)&v436);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease();
          sub_100B310AC(v334, type metadata accessor for SharedBeaconRecord);
          *(_WORD *)(v339 + 22) = 2080;
          sub_100B22DA4((unint64_t *)&qword_101638DA0, (void (*)(uint64_t))&type metadata accessor for Date);
          uint64_t v342 = dispatch thunk of CustomStringConvertible.description.getter();
          *(void *)&long long v435 = sub_1008FA0F0(v342, v343, (uint64_t *)&v436);
          uint64_t v317 = v430;
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease();
          v316(v335, v317);
          _os_log_impl((void *)&_mh_execute_header, v336, (os_log_type_t)v429, "Lost mode is enabled for shared beacon %{private,mask.hash}s\nwith timestamp of %s.", (uint8_t *)v339, 0x20u);
          swift_arrayDestroy();
          swift_slowDealloc();
          v332 = v355;
          swift_slowDealloc();
        }
        else
        {
          sub_100B310AC(v334, type metadata accessor for SharedBeaconRecord);
          v316(v335, v317);
        }

        uint64_t v344 = (uint64_t)v407;
        v345 = v352;
        v375(v352, (uint64_t)v332, v317);
        ((void (*)(char *, void, uint64_t, uint64_t))v428)(v345, 0, 1, v317);
        int v346 = ((uint64_t (*)(char *, uint64_t, uint64_t))v399)(v345, 1, v317);
        uint64_t v347 = v398;
        if (v346 == 1)
        {
          Class v348 = 0;
        }
        else
        {
          Class v348 = Date._bridgeToObjectiveC()().super.isa;
          v316(v345, v317);
        }
        uint64_t v349 = v423;
        id v350 = [objc_allocWithZone((Class)SPLostModeInfo) initWithMessage:0 email:0 phoneNumber:0 timestamp:v348];

        [v192 setLostModeInfo:v350];
        swift_bridgeObjectRelease();
        swift_release();

        v316(v432, v317);
        v316(v355, v317);
        sub_100B310AC(v356, type metadata accessor for KeyDropLostItemDates);
        sub_100B310AC(v347, type metadata accessor for SharedBeaconRecord);
        sub_10001DAB4(v344, (uint64_t *)&unk_101653D40);
        v316(v409, v317);
        sub_10001DAB4((uint64_t)v410, &qword_10163BB30);
        v306 = v413;
        uint64_t v307 = v349;
        goto LABEL_94;
      }
      sub_100B310AC(v320, type metadata accessor for KeyDropLostItemDates);
      sub_10001DAB4(v322, (uint64_t *)&unk_10163AC90);
    }
    [v192 setLostModeInfo:0];
    if (qword_101636888 != -1) {
      swift_once();
    }
    uint64_t v324 = type metadata accessor for Logger();
    sub_100010324(v324, (uint64_t)qword_10170D788);
    sub_100B30D0C(v272, v296, type metadata accessor for SharedBeaconRecord);
    v325 = Logger.logObject.getter();
    os_log_type_t v326 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v325, v326))
    {
      uint64_t v327 = v296;
      uint64_t v328 = swift_slowAlloc();
      *(void *)&long long v436 = swift_slowAlloc();
      *(_DWORD *)uint64_t v328 = 141558275;
      *(void *)&long long v435 = 1752392040;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v328 + 12) = 2081;
      sub_100B22DA4((unint64_t *)&qword_101638B10, (void (*)(uint64_t))&type metadata accessor for UUID);
      uint64_t v329 = dispatch thunk of CustomStringConvertible.description.getter();
      *(void *)&long long v435 = sub_1008FA0F0(v329, v330, (uint64_t *)&v436);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      sub_100B310AC(v327, type metadata accessor for SharedBeaconRecord);
      _os_log_impl((void *)&_mh_execute_header, v325, v326, "Lost mode is not enabled for shared beacon %{private,mask.hash}s.", (uint8_t *)v328, 0x16u);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
      swift_bridgeObjectRelease();
      swift_release();

      uint64_t v331 = v430;
      v316(v432, v430);
      sub_100B310AC(v398, type metadata accessor for SharedBeaconRecord);
      sub_10001DAB4((uint64_t)v407, (uint64_t *)&unk_101653D40);
      v316(v409, v331);
      sub_10001DAB4((uint64_t)v410, &qword_10163BB30);
      v306 = v413;
      uint64_t v307 = v231;
      id v192 = v422;
      goto LABEL_94;
    }

    sub_100B310AC(v296, type metadata accessor for SharedBeaconRecord);
    swift_bridgeObjectRelease();
    swift_release();
    v316(v432, v317);
    sub_100B310AC(v272, type metadata accessor for SharedBeaconRecord);
    sub_10001DAB4((uint64_t)v407, (uint64_t *)&unk_101653D40);
    v316(v409, v317);
    sub_10001DAB4((uint64_t)v410, &qword_10163BB30);
    v306 = v413;
LABEL_93:
    uint64_t v307 = v231;
LABEL_94:
    v424((uint64_t)v306, v307);
    goto LABEL_95;
  }
  v284(v273, 1, 1, v282);
  swift_bridgeObjectRelease();
  swift_release();
  uint64_t v302 = v430;
  v303 = (void (*)(char *, uint64_t))v411;
  v411(v432, (long long *)v430);
  sub_10001DAB4((uint64_t)v407, (uint64_t *)&unk_101653D40);
  v303(v409, v302);
  sub_10001DAB4((uint64_t)v410, &qword_10163BB30);
  v424((uint64_t)v413, v231);
  sub_10001DAB4(v273, (uint64_t *)&unk_101653D50);
LABEL_95:
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)v445);
  return v192;
}

uint64_t sub_100B2F5EC(void **a1, uint64_t a2, uint64_t a3, void (*a4)(char *))
{
  return sub_100ACB908(*a1, a2, a3, a4);
}

uint64_t sub_100B2F5F4(uint64_t a1, uint64_t a2, char a3, int a4, int a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v23 = a4;
  int v24 = a5;
  uint64_t v13 = type metadata accessor for DateInterval();
  uint64_t v14 = *(void *)(v13 - 8);
  uint64_t v15 = *(void *)(v14 + 64);
  __chkstk_darwin(v13);
  v26[3] = a7;
  v26[4] = a8;
  uint64_t v16 = sub_10001D958(v26);
  (*(void (**)(uint64_t *, uint64_t, uint64_t))(*(void *)(a7 - 8) + 16))(v16, a1, a7);
  type metadata accessor for BeaconKeyManager(0);
  OSAllocatedUnfairLock.callAsFunction<A>(_:)();
  uint64_t v17 = v25;
  sub_10001D010((uint64_t)v26, (uint64_t)&v25);
  (*(void (**)(char *, uint64_t, uint64_t))(v14 + 16))((char *)&v23 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0), a2, v13);
  unint64_t v18 = (*(unsigned __int8 *)(v14 + 80) + 64) & ~(unint64_t)*(unsigned __int8 *)(v14 + 80);
  uint64_t v19 = swift_allocObject();
  *(void *)(v19 + 16) = v17;
  sub_10001CEB0(&v25, v19 + 24);
  (*(void (**)(unint64_t, char *, uint64_t))(v14 + 32))(v19 + v18, (char *)&v23 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0), v13);
  uint64_t v20 = (unsigned char *)(v19 + v18 + v15);
  *uint64_t v20 = a3;
  v20[1] = v23;
  v20[2] = v24;
  swift_retain();
  unsafeFromAsyncTask<A>(_:)();
  swift_release();
  swift_release();
  uint64_t v21 = v25;
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)v26);
  return v21;
}

uint64_t sub_100B2F84C(void **a1, uint64_t a2, uint64_t a3, void (*a4)(char *))
{
  return sub_100ACBF68(*a1, a2, a3, a4);
}

BOOL sub_100B2F854(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for BeaconStatus(0);
  uint64_t v5 = __chkstk_darwin(v4);
  uint64_t v7 = (char *)&v20 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = __chkstk_darwin(v5);
  uint64_t v10 = (char *)&v20 - v9;
  uint64_t v11 = __chkstk_darwin(v8);
  uint64_t v13 = (char *)&v20 - v12;
  __chkstk_darwin(v11);
  uint64_t v15 = (char *)&v20 - v14;
  char v16 = static UUID.== infix(_:_:)();
  sub_100B30D0C(a1, (uint64_t)v15, type metadata accessor for BeaconStatus);
  sub_100B30D0C(a2, (uint64_t)v13, type metadata accessor for BeaconStatus);
  if ((v16 & 1) == 0)
  {
    sub_100B310AC((uint64_t)v13, type metadata accessor for BeaconStatus);
    sub_100B310AC((uint64_t)v15, type metadata accessor for BeaconStatus);
    sub_100B30D0C(a1, (uint64_t)v10, type metadata accessor for BeaconStatus);
    sub_100B30D0C(a2, (uint64_t)v7, type metadata accessor for BeaconStatus);
    goto LABEL_5;
  }
  char v17 = static Date.== infix(_:_:)();
  sub_100B310AC((uint64_t)v13, type metadata accessor for BeaconStatus);
  sub_100B310AC((uint64_t)v15, type metadata accessor for BeaconStatus);
  sub_100B30D0C(a1, (uint64_t)v10, type metadata accessor for BeaconStatus);
  sub_100B30D0C(a2, (uint64_t)v7, type metadata accessor for BeaconStatus);
  if ((v17 & 1) == 0)
  {
LABEL_5:
    BOOL v18 = 0;
    goto LABEL_6;
  }
  BOOL v18 = v10[*(int *)(v4 + 20)] == v7[*(int *)(v4 + 20)];
LABEL_6:
  sub_100B310AC((uint64_t)v7, type metadata accessor for BeaconStatus);
  sub_100B310AC((uint64_t)v10, type metadata accessor for BeaconStatus);
  return v18;
}

void sub_100B2FAB4(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2;
  uint64_t v76 = a2;
  uint64_t v102 = a1;
  uint64_t v4 = sub_10000588C(&qword_101649E40);
  __chkstk_darwin(v4 - 8);
  uint64_t v103 = (char *)&v67 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = type metadata accessor for URL();
  v97 = *(char **)(v6 - 8);
  __chkstk_darwin(v6);
  uint64_t v8 = (char *)&v67 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = sub_10000588C((uint64_t *)&unk_101653C90);
  __chkstk_darwin(v9 - 8);
  uint64_t v88 = (uint64_t)&v67 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v87 = type metadata accessor for DirectorySequence();
  uint64_t v91 = *(unsigned int (***)(uint64_t, uint64_t, uint64_t))(v87 - 8);
  __chkstk_darwin(v87);
  unint64_t v95 = (char *)&v67 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = sub_10000588C(&qword_1016594B0);
  uint64_t v13 = __chkstk_darwin(v12 - 8);
  uint64_t v15 = (char *)&v67 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v13);
  uint64_t v100 = (uint64_t)&v67 - v16;
  uint64_t v17 = sub_10000588C(&qword_1016594B8);
  uint64_t v70 = *(void (***)(uint64_t, uint64_t, uint64_t, uint64_t))(v17 - 8);
  uint64_t v18 = __chkstk_darwin(v17);
  uint64_t v96 = (char *)&v67 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v18);
  uint64_t v90 = (uint64_t)&v67 - v20;
  uint64_t v21 = sub_10000588C(&qword_1016594A8);
  __chkstk_darwin(v21 - 8);
  int v23 = (char *)&v67 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v24 = sub_10000588C(&qword_101660DC0);
  uint64_t v99 = *(char **)(v24 - 8);
  __chkstk_darwin(v24);
  v89 = (char *)&v67 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v26 = sub_10000588C(&qword_10163B9F0);
  __chkstk_darwin(v26 - 8);
  uint64_t v78 = (uint64_t)&v67 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v77 = type metadata accessor for OwnedBeaconRecord();
  uint64_t v68 = *(void *)(v77 - 8);
  uint64_t v28 = __chkstk_darwin(v77);
  uint64_t v74 = (uint64_t)&v67 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v28);
  uint64_t v75 = (uint64_t)&v67 - v30;
  uint64_t v31 = sub_10000588C(&qword_101659498);
  __chkstk_darwin(v31 - 8);
  uint64_t v33 = (char *)&v67 - ((v32 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v104 = _swiftEmptyArrayStorage;
  uint64_t v34 = v99;
  sub_10001D608(v102, (uint64_t)v33, &qword_101659498);
  uint64_t v80 = v33;
  sub_10001D074((uint64_t)v33, (uint64_t)v23, &qword_1016594A8);
  uint64_t v35 = (unsigned int (*)(char *, uint64_t, uint64_t))*((void *)v34 + 6);
  uint64_t v79 = v24;
  uint64_t v73 = v34 + 48;
  uint64_t v72 = v35;
  if (v35(v23, 1, v24) == 1)
  {
LABEL_2:
    sub_10001DAB4((uint64_t)v23, &qword_1016594A8);
    uint64_t v36 = v78;
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v68 + 56))(v78, 1, 1, v77);
LABEL_3:
    sub_10001DAB4((uint64_t)v80, &qword_101659498);
    sub_10001DAB4(v36, &qword_10163B9F0);
    return;
  }
  uint64_t v101 = (char **)(v91 + 6);
  os_log_type_t v98 = (char **)(v91 + 4);
  uint64_t v93 = (unsigned int (**)(char *, uint64_t, uint64_t))(v97 + 48);
  uint64_t v83 = (void (**)(char *, uint64_t, uint64_t))(v97 + 32);
  uint64_t v92 = (void (**)(char *, uint64_t))(v91 + 1);
  uint64_t v82 = (void (**)(uint64_t, uint64_t))(v97 + 8);
  uint64_t v81 = (void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v91 + 7);
  uint64_t v86 = v70 + 7;
  uint64_t v91 = (unsigned int (**)(uint64_t, uint64_t, uint64_t))(v70 + 6);
  uint64_t v70 = (void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v68 + 56);
  uint64_t v67 = (void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v34 + 56);
  uint64_t v69 = (unsigned int (**)(uint64_t, uint64_t, uint64_t))(v68 + 48);
  uint64_t v37 = v79;
  uint64_t v84 = v15;
  uint64_t v85 = v8;
  uint64_t v94 = v6;
  uint64_t v71 = v23;
  while (1)
  {
    uint64_t v102 = v3;
    uint64_t v38 = v89;
    sub_10001D608((uint64_t)v23, (uint64_t)v89, &qword_101660DC0);
    uint64_t v39 = (uint64_t)&v38[*(int *)(v37 + 40)];
    uint64_t v40 = v88;
    sub_10001D074(v39, v88, (uint64_t *)&unk_101653C90);
    uint64_t v41 = v87;
    uint64_t v99 = *v101;
    if (((unsigned int (*)(uint64_t, uint64_t, uint64_t))v99)(v40, 1, v87) != 1) {
      break;
    }
    uint64_t v42 = v100;
LABEL_17:
    sub_10001DAB4(v40, (uint64_t *)&unk_101653C90);
    (*v86)(v42, 1, 1, v17);
LABEL_18:
    uint64_t v3 = v102;
    int v23 = v71;
    sub_10001DAB4((uint64_t)v89, &qword_101660DC0);
    sub_10001DAB4(v42, &qword_1016594B0);
    uint64_t v55 = (uint64_t)v80;
    sub_10001DAB4((uint64_t)v80, &qword_1016594A8);
    uint64_t v56 = 1;
    uint64_t v37 = v79;
    (*v67)(v55, 1, 1, v79);
    uint64_t v36 = v78;
LABEL_19:
    uint64_t v57 = v56;
    uint64_t v58 = v77;
    (*v70)(v36, v57, 1, v77);
    if ((*v69)(v36, 1, v58) == 1) {
      goto LABEL_3;
    }
    uint64_t v59 = v36;
    uint64_t v60 = v75;
    sub_100B30DB4(v59, v75, (uint64_t (*)(void))type metadata accessor for OwnedBeaconRecord);
    char v61 = sub_100ACFD84(v60, v76);
    if (v3)
    {
      sub_100B310AC(v60, (uint64_t (*)(void))type metadata accessor for OwnedBeaconRecord);
      sub_10001DAB4((uint64_t)v80, &qword_101659498);
      swift_release();
      return;
    }
    if (v61)
    {
      sub_100B30DB4(v60, v74, (uint64_t (*)(void))type metadata accessor for OwnedBeaconRecord);
      uint64_t v62 = v104;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        sub_1000B74D8(0, v62[2] + 1, 1);
        uint64_t v62 = v104;
      }
      uint64_t v63 = v68;
      unint64_t v65 = v62[2];
      unint64_t v64 = v62[3];
      if (v65 >= v64 >> 1)
      {
        sub_1000B74D8(v64 > 1, v65 + 1, 1);
        uint64_t v63 = v68;
        uint64_t v62 = v104;
      }
      v62[2] = v65 + 1;
      sub_100B30DB4(v74, (uint64_t)v62+ ((*(unsigned __int8 *)(v63 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v63 + 80))+ *(void *)(v63 + 72) * v65, (uint64_t (*)(void))type metadata accessor for OwnedBeaconRecord);
      uint64_t v37 = v79;
    }
    else
    {
      sub_100B310AC(v60, (uint64_t (*)(void))type metadata accessor for OwnedBeaconRecord);
    }
    sub_10001D074((uint64_t)v80, (uint64_t)v23, &qword_1016594A8);
    if (v72(v23, 1, v37) == 1) {
      goto LABEL_2;
    }
  }
  v97 = *v98;
  while (1)
  {
    uint64_t v43 = v95;
    ((void (*)(char *, uint64_t, uint64_t))v97)(v95, v40, v41);
    DirectorySequence.next()();
    uint64_t v44 = (uint64_t)v103;
    uint64_t v45 = v94;
    if ((*v93)(v103, 1, v94) == 1)
    {
      (*v92)(v43, v41);
      sub_10001DAB4(v44, &qword_101649E40);
      sub_10001DAB4(v39, (uint64_t *)&unk_101653C90);
      (*v81)(v39, 1, 1, v41);
      uint64_t v42 = v100;
      (*v86)(v100, 1, 1, v17);
      goto LABEL_14;
    }
    uint64_t v46 = (uint64_t)v85;
    (*v83)(v85, v44, v45);
    uint64_t v48 = (uint64_t)v84;
    uint64_t v49 = v102;
    sub_100E557A8(v46, v89, (uint64_t)v84);
    uint64_t v102 = v49;
    if (v49) {
      break;
    }
    uint64_t v50 = v43;
    uint64_t v51 = v87;
    (*v92)(v50, v87);
    (*v82)(v46, v45);
    uint64_t v52 = v48;
    uint64_t v41 = v51;
    uint64_t v42 = v100;
    sub_10001D608(v52, v100, &qword_1016594B0);
    uint64_t v40 = v88;
LABEL_14:
    uint64_t v53 = (uint64_t)v96;
    if ((*v91)(v42, 1, v17) == 1) {
      goto LABEL_18;
    }
    uint64_t v54 = v90;
    sub_10001D608(v42, v90, &qword_1016594B8);
    sub_10001D608(v54, v53, &qword_1016594B8);
    if (swift_getEnumCaseMultiPayload() != 1)
    {
      sub_10001DAB4((uint64_t)v89, &qword_101660DC0);
      uint64_t v66 = v53;
      uint64_t v36 = v78;
      sub_100B30DB4(v66, v78, (uint64_t (*)(void))type metadata accessor for OwnedBeaconRecord);
      uint64_t v56 = 0;
      uint64_t v3 = v102;
      int v23 = v71;
      uint64_t v37 = v79;
      goto LABEL_19;
    }
    sub_10001DAB4(v53, &qword_1016594B8);
    sub_10001D074(v39, v40, (uint64_t *)&unk_101653C90);
    if (((unsigned int (*)(uint64_t, uint64_t, uint64_t))v99)(v40, 1, v41) == 1) {
      goto LABEL_17;
    }
  }
  __break(1u);
}

uint64_t sub_100B30768()
{
  if (qword_101636F08 != -1) {
    swift_once();
  }
  uint64_t v0 = type metadata accessor for Logger();
  sub_100010324(v0, (uint64_t)qword_10170E858);
  uint64_t v1 = Logger.logObject.getter();
  os_log_type_t v2 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v1, v2))
  {
    uint64_t v3 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v3 = 0;
    _os_log_impl((void *)&_mh_execute_header, v1, v2, "Posting SPManagedCBPeripheralChanged from BeaconStore.", v3, 2u);
    swift_slowDealloc();
  }

  uint64_t v4 = (void *)SPManagedCBPeripheralChangedNotification;
  type metadata accessor for DarwinNotificationHelper();
  swift_allocObject();
  id v5 = v4;
  DarwinNotificationHelper.init(notificationName:rateLimit:)();
  dispatch thunk of DarwinNotificationHelper.post(bypassRateLimit:)();

  return swift_release();
}

uint64_t sub_100B308A8()
{
  static os_log_type_t.debug.getter();
  if (qword_101637260 != -1) {
    swift_once();
  }
  sub_10000588C((uint64_t *)&unk_10163AD00);
  uint64_t v0 = swift_allocObject();
  *(_OWORD *)(v0 + 16) = xmmword_101342130;
  uint64_t v1 = self;
  id v2 = [v1 standardUserDefaults];
  NSString v3 = String._bridgeToObjectiveC()();
  id v4 = [v2 objectForKey:v3];

  if (v4)
  {
    _bridgeAnyObjectToAny(_:)();
    swift_unknownObjectRelease();
  }
  else
  {
    long long v15 = 0u;
    long long v16 = 0u;
  }
  sub_10001D608((uint64_t)&v15, (uint64_t)v17, (uint64_t *)&unk_101644360);
  if (v18)
  {
    int v5 = swift_dynamicCast();
    char v6 = v14;
    if (!v5) {
      char v6 = 2;
    }
  }
  else
  {
    sub_10001DAB4((uint64_t)v17, (uint64_t *)&unk_101644360);
    char v6 = 2;
  }
  v17[0] = v6;
  sub_10000588C(&qword_101649EA0);
  uint64_t v7 = String.init<A>(describing:)();
  uint64_t v9 = v8;
  *(void *)(v0 + 56) = &type metadata for String;
  *(void *)(v0 + 64) = sub_10000B4CC();
  *(void *)(v0 + 32) = v7;
  *(void *)(v0 + 40) = v9;
  os_log(_:dso:log:_:_:)();
  swift_bridgeObjectRelease();
  id v10 = [v1 standardUserDefaults];
  NSString v11 = String._bridgeToObjectiveC()();
  id v12 = [v10 objectForKey:v11];

  if (v12)
  {
    _bridgeAnyObjectToAny(_:)();
    swift_unknownObjectRelease();
  }
  else
  {
    long long v15 = 0u;
    long long v16 = 0u;
  }
  sub_10001D608((uint64_t)&v15, (uint64_t)v17, (uint64_t *)&unk_101644360);
  if (v18)
  {
    uint64_t result = swift_dynamicCast();
    if (result) {
      return v14;
    }
  }
  else
  {
    sub_10001DAB4((uint64_t)v17, (uint64_t *)&unk_101644360);
    return 0;
  }
  return result;
}

void sub_100B30B88(char a1)
{
  static os_log_type_t.debug.getter();
  if (qword_101637260 != -1) {
    swift_once();
  }
  sub_10000588C((uint64_t *)&unk_10163AD00);
  uint64_t v2 = swift_allocObject();
  uint64_t v3 = v2;
  *(_OWORD *)(v2 + 16) = xmmword_101342130;
  uint64_t v4 = a1 & 1;
  if (v4) {
    uint64_t v5 = 1702195828;
  }
  else {
    uint64_t v5 = 0x65736C6166;
  }
  if (v4) {
    unint64_t v6 = 0xE400000000000000;
  }
  else {
    unint64_t v6 = 0xE500000000000000;
  }
  *(void *)(v2 + 56) = &type metadata for String;
  *(void *)(v2 + 64) = sub_10000B4CC();
  *(void *)(v3 + 32) = v5;
  *(void *)(v3 + 40) = v6;
  os_log(_:dso:log:_:_:)();
  swift_bridgeObjectRelease();
  id v7 = [self standardUserDefaults];
  NSString v8 = String._bridgeToObjectiveC()();
  [v7 setBool:v4 forKey:v8];
}

uint64_t sub_100B30D0C(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

uint64_t sub_100B30D74@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = sub_100AB2B80();
  *a1 = result;
  return result;
}

uint64_t sub_100B30DA4()
{
  return sub_1006CAD68(64);
}

uint64_t sub_100B30DAC()
{
  return sub_1006CAD68(64);
}

uint64_t sub_100B30DB4(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 32))(a2, a1, v5);
  return a2;
}

uint64_t sub_100B30E1C()
{
  uint64_t v1 = (int *)type metadata accessor for SharedBeaconRecord(0);
  uint64_t v2 = *(unsigned __int8 *)(*((void *)v1 - 1) + 80);
  uint64_t v16 = *(void *)(*((void *)v1 - 1) + 64);
  swift_release();
  uint64_t v3 = v0 + ((v2 + 24) & ~v2);
  sub_10001CFB8(*(void *)v3, *(void *)(v3 + 8));
  uint64_t v4 = v3 + v1[5];
  uint64_t v5 = type metadata accessor for UUID();
  uint64_t v6 = *(void *)(v5 - 8);
  id v7 = *(void (**)(uint64_t, uint64_t))(v6 + 8);
  v7(v4, v5);
  v7(v3 + v1[6], v5);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v8 = v3 + v1[18];
  uint64_t v9 = type metadata accessor for Date();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v9 - 8) + 8))(v8, v9);
  uint64_t v10 = v3 + v1[19];
  NSString v11 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v6 + 48);
  if (!v11(v10, 1, v5)) {
    v7(v10, v5);
  }
  uint64_t v12 = v3 + v1[20];
  uint64_t v13 = type metadata accessor for SharedBeaconRecord.PropertyListContent(0);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v13 - 8) + 48))(v12, 1, v13))
  {
    uint64_t v14 = v12 + *(int *)(v13 + 20);
    if (!v11(v14, 1, v5)) {
      v7(v14, v5);
    }
  }

  return _swift_deallocObject(v0, ((v2 + 24) & ~v2) + v16, v2 | 7);
}

uint64_t sub_100B310AC(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t sub_100B3110C(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  uint64_t v113 = type metadata accessor for BeaconStoreFileRecord();
  uint64_t v110 = *(void *)(v113 - 8);
  __chkstk_darwin(v113);
  uint64_t v108 = (char *)v94 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = type metadata accessor for URL();
  v112 = *(uint64_t (**)(uint64_t))(v9 - 8);
  uint64_t v10 = __chkstk_darwin(v9);
  uint64_t v107 = (char *)v94 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v10);
  os_log_type_t v98 = (char *)v94 - v12;
  NSString v117 = (void *)type metadata accessor for UUID();
  v115 = (uint64_t (*)(uint64_t))*(v117 - 1);
  uint64_t v13 = __chkstk_darwin(v117);
  v94[1] = (char *)v94 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = __chkstk_darwin(v13);
  uint64_t v106 = (uint64_t)v94 - v16;
  __chkstk_darwin(v15);
  v97 = (char *)v94 - v17;
  uint64_t v95 = sub_10000588C(&qword_1016426E8);
  __chkstk_darwin(v95);
  uint64_t v96 = (char *)v94 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v19 = type metadata accessor for OwnedBeaconGroup(0);
  uint64_t v102 = *(void *)(v19 - 8);
  uint64_t v20 = __chkstk_darwin(v19);
  uint64_t v103 = v21;
  uint64_t v104 = (char *)v94 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v20);
  int v23 = ((char *)v94 - v22);
  uint64_t v24 = swift_allocObject();
  *(void *)(v24 + 16) = a3;
  *(void *)(v24 + 24) = a4;
  uint64_t v111 = v24;
  swift_retain();
  unint64_t v109 = a4;
  static os_log_type_t.default.getter();
  if (qword_101637260 != -1) {
    swift_once();
  }
  uint64_t v100 = sub_10000588C((uint64_t *)&unk_10163AD00);
  uint64_t v25 = swift_allocObject();
  long long v99 = xmmword_101342130;
  *(_OWORD *)(v25 + 16) = xmmword_101342130;
  sub_100B30D0C(a1, (uint64_t)v23, type metadata accessor for OwnedBeaconGroup);
  uint64_t v114 = v19;
  uint64_t v26 = String.init<A>(describing:)();
  uint64_t v28 = v27;
  *(void *)(v25 + 56) = &type metadata for String;
  unint64_t v101 = sub_10000B4CC();
  *(void *)(v25 + 64) = v101;
  *(void *)(v25 + 32) = v26;
  *(void *)(v25 + 40) = v28;
  os_log(_:dso:log:_:_:)();
  swift_bridgeObjectRelease();
  if (qword_101637188 != -1) {
    swift_once();
  }
  uint64_t v29 = (void *)qword_10170EE68;
  id v30 = [self sharedInstance];
  unsigned int v31 = [v30 isInternalBuild];

  if (v31)
  {
    NSString v32 = String._bridgeToObjectiveC()();
    unsigned int v33 = [v29 BOOLForKey:v32];
  }
  else
  {
    unsigned int v33 = 0;
  }
  id v34 = [self defaultStore];
  if (v34)
  {
    uint64_t v35 = v34;
    uint64_t v36 = v9;
    id v37 = [v34 aa_primaryAppleAccount];

    uint64_t v116 = a1;
    uint64_t v105 = a2;
    if (v37 && (v37, (v33 & 1) == 0))
    {
      unint64_t v109 = v23;
      sub_10001D4B0(0, &qword_10163CB60);
      uint64_t v54 = a1 + *(int *)(v114 + 24);
      uint64_t v55 = UUID.uuidString.getter();
      uint64_t v57 = v56;
      id v58 = *(id *)(a2 + 152);
      v59._countAndFlagsBits = v55;
      v59._object = v57;
      Class isa = CKRecordID.init(recordName:zoneID:)(v59, (CKRecordZoneID)v58).super.isa;
      sub_100AB24F0();
      uint64_t v114 = (uint64_t)isa;
      uint64_t v108 = (char *)sub_101015AE0(isa);
      swift_release();
      uint64_t v61 = swift_allocBox();
      uint64_t v106 = v62;
      uint64_t v107 = (char *)v61;
      uint64_t v63 = *(char **)(v110 + 56);
      uint64_t v64 = v113;
      v110 += 56;
      uint64_t v104 = v63;
      ((void (*)(uint64_t, uint64_t, uint64_t, uint64_t))v63)(v62, 1, 1, v113);
      uint64_t v65 = *(void *)(a2 + 160);
      uint64_t v66 = v115;
      uint64_t v67 = v97;
      (*((void (**)(char *, uint64_t, void *))v115 + 2))(v97, v54, v117);
      if (qword_101636B50 != -1) {
        swift_once();
      }
      uint64_t v68 = sub_100010324(v36, (uint64_t)qword_10170DF88);
      uint64_t v69 = v112;
      uint64_t v70 = v98;
      uint64_t v71 = (*((uint64_t (**)(char *, uint64_t, uint64_t))v112 + 2))(v98, v68, v36);
      __chkstk_darwin(v71);
      v94[-4] = v65;
      v94[-3] = v67;
      v94[-2] = v70;
      uint64_t v72 = (uint64_t)v96;
      OS_dispatch_queue.sync<A>(execute:)();
      (*((void (**)(char *, uint64_t))v69 + 1))(v70, v36);
      (*((void (**)(char *, void *))v66 + 1))(v67, v117);
      ((void (*)(uint64_t, void, uint64_t, uint64_t))v104)(v72, 0, 1, v64);
      sub_100062604(v72, v106, &qword_1016426E8);
      unint64_t v74 = v101;
      uint64_t v75 = (void *)v114;
      static os_log_type_t.default.getter();
      uint64_t v76 = swift_allocObject();
      *(_OWORD *)(v76 + 16) = v99;
      uint64_t v77 = v75;
      NSString v117 = v77;
      id v78 = [v77 description];
      uint64_t v79 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      uint64_t v81 = v80;

      *(void *)(v76 + 56) = &type metadata for String;
      *(void *)(v76 + 64) = v74;
      *(void *)(v76 + 32) = v79;
      *(void *)(v76 + 40) = v81;
      os_log(_:dso:log:_:_:)();
      swift_bridgeObjectRelease();
      v115 = type metadata accessor for OwnedBeaconGroup;
      uint64_t v82 = v109;
      sub_100B30D0C(v116, (uint64_t)v109, type metadata accessor for OwnedBeaconGroup);
      uint64_t v83 = *(unsigned __int8 *)(v102 + 80);
      uint64_t v84 = (v83 + 32) & ~v83;
      unint64_t v85 = (v103 + v84 + 7) & 0xFFFFFFFFFFFFFFF8;
      uint64_t v113 = v85 + 16;
      uint64_t v114 = v83 | 7;
      uint64_t v86 = swift_allocObject();
      uint64_t v87 = v107;
      uint64_t v88 = v105;
      *(void *)(v86 + 16) = v107;
      *(void *)(v86 + 24) = v88;
      v112 = type metadata accessor for OwnedBeaconGroup;
      sub_100B30DB4((uint64_t)v82, v86 + v84, type metadata accessor for OwnedBeaconGroup);
      v89 = (void (**)(uint64_t))(v86 + v85);
      uint64_t v90 = (void (*)(uint64_t))v111;
      char *v89 = sub_100B5BE48;
      v89[1] = v90;
      swift_retain();
      swift_retain();
      swift_retain();
      Future.addSuccess(block:)();
      swift_release();
      swift_release();
      sub_100B30D0C(v116, (uint64_t)v82, v115);
      uint64_t v91 = swift_allocObject();
      *(void *)(v91 + 16) = v87;
      *(void *)(v91 + 24) = v88;
      sub_100B30DB4((uint64_t)v82, v91 + v84, v112);
      uint64_t v92 = (void (**)(uint64_t))(v91 + v85);
      *uint64_t v92 = sub_100B5BE48;
      v92[1] = v90;
      swift_retain();
      swift_retain();
      swift_retain();
      Future.addFailure(block:)();
      swift_release();
      swift_release();
      swift_release();

      swift_release();
    }
    else
    {
      uint64_t v110 = a3;
      if (qword_101636F50 != -1) {
        swift_once();
      }
      uint64_t v38 = type metadata accessor for Logger();
      uint64_t v103 = sub_100010324(v38, (uint64_t)qword_10170E9E8);
      uint64_t v39 = Logger.logObject.getter();
      os_log_type_t v40 = static os_log_type_t.info.getter();
      BOOL v41 = os_log_type_enabled(v39, v40);
      uint64_t v42 = v114;
      if (v41)
      {
        uint64_t v43 = a2;
        BOOL v44 = v37 != 0;
        uint64_t v45 = swift_slowAlloc();
        *(_DWORD *)uint64_t v45 = 67109376;
        LODWORD(v118) = v33;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        *(_WORD *)(v45 + 8) = 1024;
        LODWORD(v118) = v44;
        a2 = v43;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        _os_log_impl((void *)&_mh_execute_header, v39, v40, "Skipping cloud delete. skipCloudSave: %{BOOL}d, isiCloudSignedIn %{BOOL}d", (uint8_t *)v45, 0xEu);
        swift_slowDealloc();
      }

      uint64_t v46 = *(void *)(a2 + 160);
      uint64_t v47 = v116 + *(int *)(v42 + 24);
      uint64_t v48 = v106;
      (*((void (**)(uint64_t, uint64_t, void *))v115 + 2))(v106, v47, v117);
      if (qword_101636B50 != -1) {
        swift_once();
      }
      uint64_t v49 = sub_100010324(v9, (uint64_t)qword_10170DF88);
      uint64_t v50 = v112;
      uint64_t v51 = v107;
      uint64_t v52 = (*((uint64_t (**)(char *, uint64_t, uint64_t))v112 + 2))(v107, v49, v9);
      __chkstk_darwin(v52);
      v94[-4] = v46;
      v94[-3] = v48;
      v94[-2] = v51;
      uint64_t v53 = (uint64_t)v108;
      OS_dispatch_queue.sync<A>(execute:)();
      (*((void (**)(char *, uint64_t))v50 + 1))(v51, v9);
      (*((void (**)(uint64_t, void *))v115 + 1))(v48, v117);
      sub_100B79EF4(v53);
      QueueSynchronizer.conditionalSync<A>(_:)();
      sub_100A9E7EC(9);
      sub_100A9EE98();
      uint64_t v73 = v110;
      swift_beginAccess();
      *(void *)(v73 + 16) = 0;
      swift_errorRelease();
      dispatch_group_leave(v109);
      sub_100B310AC(v53, (uint64_t (*)(void))type metadata accessor for BeaconStoreFileRecord);
    }
    return swift_release();
  }
  else
  {

    uint64_t result = swift_release();
    __break(1u);
  }
  return result;
}

void *sub_100B32238(uint64_t a1, uint64_t a2)
{
  uint64_t v29 = type metadata accessor for BeaconObservation();
  uint64_t v5 = __chkstk_darwin(v29);
  id v7 = (char *)v25 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5);
  uint64_t v10 = (char *)v25 - v9;
  uint64_t result = _swiftEmptyArrayStorage;
  id v30 = _swiftEmptyArrayStorage;
  uint64_t v12 = *(void *)(a1 + 16);
  if (!v12) {
    return result;
  }
  v25[1] = v2;
  uint64_t v13 = 0;
  uint64_t v14 = *(void *)(v8 + 72);
  unint64_t v28 = (*(unsigned __int8 *)(v8 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80);
  uint64_t v15 = a1 + v28;
  uint64_t v16 = _swiftEmptyArrayStorage;
  uint64_t v26 = v15;
  uint64_t v27 = v12;
  while (1)
  {
    uint64_t result = (void *)sub_100B30D0C(v15 + v14 * v13, (uint64_t)v10, (uint64_t (*)(void))type metadata accessor for BeaconObservation);
    uint64_t v17 = *(void *)(a2 + 16);
    if (v17)
    {
      uint64_t v18 = qword_101376FF0[v10[*(int *)(v29 + 24)]];
      if (qword_101376FF0[*(char *)(a2 + 32)] == v18)
      {
LABEL_7:
        uint64_t v19 = v14;
        sub_100B30DB4((uint64_t)v10, (uint64_t)v7, (uint64_t (*)(void))type metadata accessor for BeaconObservation);
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          sub_1000B77F0(0, v16[2] + 1, 1);
        }
        uint64_t v16 = v30;
        unint64_t v21 = v30[2];
        unint64_t v20 = v30[3];
        if (v21 >= v20 >> 1)
        {
          sub_1000B77F0(v20 > 1, v21 + 1, 1);
          uint64_t v16 = v30;
        }
        v16[2] = v21 + 1;
        uint64_t v22 = (uint64_t)v16 + v28 + v21 * v19;
        uint64_t v14 = v19;
        sub_100B30DB4((uint64_t)v7, v22, (uint64_t (*)(void))type metadata accessor for BeaconObservation);
        uint64_t v15 = v26;
        uint64_t v12 = v27;
        goto LABEL_4;
      }
      if (v17 != 1) {
        break;
      }
    }
LABEL_3:
    sub_100B310AC((uint64_t)v10, (uint64_t (*)(void))type metadata accessor for BeaconObservation);
LABEL_4:
    if (++v13 == v12) {
      return v30;
    }
  }
  uint64_t v23 = 33;
  while (1)
  {
    uint64_t v24 = v23 - 31;
    if (__OFADD__(v23 - 32, 1)) {
      break;
    }
    if (qword_101376FF0[*(char *)(a2 + v23)] == v18) {
      goto LABEL_7;
    }
    ++v23;
    if (v24 == v17) {
      goto LABEL_3;
    }
  }
  __break(1u);
  return result;
}

uint64_t sub_100B324E0(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for UUID();
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  unint64_t v28 = (char *)&v23 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = sub_10000588C(&qword_101638CF0);
  __chkstk_darwin(v5 - 8);
  id v7 = (char *)&v23 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = *(void *)(a1 + 56);
  uint64_t v24 = a1 + 56;
  uint64_t v9 = 1 << *(unsigned char *)(a1 + 32);
  uint64_t v10 = -1;
  if (v9 < 64) {
    uint64_t v10 = ~(-1 << v9);
  }
  unint64_t v11 = v10 & v8;
  uint64_t v30 = v3 + 16;
  unsigned int v31 = (void (**)(char *, uint64_t, uint64_t, uint64_t))(v3 + 56);
  uint64_t v29 = v3 + 48;
  uint64_t v27 = (void (**)(char *, char *, uint64_t))(v3 + 32);
  int64_t v25 = (unint64_t)(v9 + 63) >> 6;
  uint64_t v26 = (void (**)(uint64_t, uint64_t))(v3 + 8);
  uint64_t v35 = a1;
  uint64_t result = swift_bridgeObjectRetain();
  int64_t v13 = 0;
  uint64_t v14 = _swiftEmptyArrayStorage;
  if (v11) {
    goto LABEL_29;
  }
LABEL_6:
  int64_t v15 = v13 + 1;
  if (__OFADD__(v13, 1))
  {
    __break(1u);
  }
  else
  {
    if (v15 >= v25) {
      goto LABEL_30;
    }
    unint64_t v16 = *(void *)(v24 + 8 * v15);
    ++v13;
    if (v16) {
      goto LABEL_21;
    }
    int64_t v13 = v15 + 1;
    if (v15 + 1 >= v25) {
      goto LABEL_30;
    }
    unint64_t v16 = *(void *)(v24 + 8 * v13);
    if (v16) {
      goto LABEL_21;
    }
    int64_t v13 = v15 + 2;
    if (v15 + 2 >= v25) {
      goto LABEL_30;
    }
    unint64_t v16 = *(void *)(v24 + 8 * v13);
    if (v16) {
      goto LABEL_21;
    }
    int64_t v13 = v15 + 3;
    if (v15 + 3 >= v25) {
      goto LABEL_30;
    }
    unint64_t v16 = *(void *)(v24 + 8 * v13);
    if (v16) {
      goto LABEL_21;
    }
    int64_t v17 = v15 + 4;
    if (v17 >= v25)
    {
LABEL_30:
      (*v31)(v7, 1, 1, v2);
LABEL_31:
      swift_release();
      return (uint64_t)v14;
    }
    unint64_t v16 = *(void *)(v24 + 8 * v17);
    if (v16)
    {
      int64_t v13 = v17;
LABEL_21:
      unint64_t v11 = (v16 - 1) & v16;
      for (unint64_t i = __clz(__rbit64(v16)) + (v13 << 6); ; unint64_t i = v22 | (v13 << 6))
      {
        (*(void (**)(char *, unint64_t, uint64_t))(v3 + 16))(v7, *(void *)(v35 + 48) + *(void *)(v3 + 72) * i, v2);
        (*(void (**)(char *, void, uint64_t, uint64_t))(v3 + 56))(v7, 0, 1, v2);
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v3 + 48))(v7, 1, v2) == 1) {
          break;
        }
        uint64_t v19 = (uint64_t)v28;
        (*v27)(v28, v7, v2);
        sub_100ACCD98(v19, (uint64_t)&v32);
        (*v26)(v19, v2);
        if (v33)
        {
          sub_10001CEB0(&v32, (uint64_t)v34);
          sub_10001CEB0(v34, (uint64_t)&v32);
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
            uint64_t v14 = sub_100A6F7F0(0, v14[2] + 1, 1, v14);
          }
          unint64_t v21 = v14[2];
          unint64_t v20 = v14[3];
          if (v21 >= v20 >> 1) {
            uint64_t v14 = sub_100A6F7F0((void *)(v20 > 1), v21 + 1, 1, v14);
          }
          v14[2] = v21 + 1;
          uint64_t result = sub_10001CEB0(&v32, (uint64_t)&v14[5 * v21 + 4]);
          if (!v11) {
            goto LABEL_6;
          }
        }
        else
        {
          uint64_t result = sub_10001DAB4((uint64_t)&v32, (uint64_t *)&unk_10163BBE0);
          if (!v11) {
            goto LABEL_6;
          }
        }
LABEL_29:
        unint64_t v22 = __clz(__rbit64(v11));
        v11 &= v11 - 1;
      }
      goto LABEL_31;
    }
    while (1)
    {
      int64_t v13 = v17 + 1;
      if (__OFADD__(v17, 1)) {
        break;
      }
      if (v13 >= v25) {
        goto LABEL_30;
      }
      unint64_t v16 = *(void *)(v24 + 8 * v13);
      ++v17;
      if (v16) {
        goto LABEL_21;
      }
    }
  }
  __break(1u);
  return result;
}

void *sub_100B32900(uint64_t a1, char a2, char a3, int a4)
{
  LODWORD(v45) = a4;
  uint64_t v7 = type metadata accessor for StableIdentifier();
  __chkstk_darwin(v7);
  uint64_t v9 = (char *)&v45 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = sub_10000588C(&qword_10163B9F0);
  __chkstk_darwin(v10 - 8);
  uint64_t v12 = (char *)&v45 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = type metadata accessor for OwnedBeaconRecord();
  uint64_t v14 = *(void *)(v13 - 8);
  uint64_t v15 = __chkstk_darwin(v13);
  int64_t v17 = (char *)&v45 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v18 = __chkstk_darwin(v15);
  unint64_t v20 = (char *)&v45 - v19;
  v48[3] = v18;
  v48[4] = sub_100B22DA4(&qword_101638DD0, (void (*)(uint64_t))type metadata accessor for OwnedBeaconRecord);
  unint64_t v21 = sub_10001D958(v48);
  sub_100B30D0C(a1, (uint64_t)v21, (uint64_t (*)(void))type metadata accessor for OwnedBeaconRecord);
  sub_10001D010((uint64_t)v48, (uint64_t)v47);
  sub_10000588C((uint64_t *)&unk_10164DBF0);
  int v22 = swift_dynamicCast();
  uint64_t v23 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v14 + 56);
  if (!v22)
  {
    v23(v12, 1, 1, v13);
    sub_10001DAB4((uint64_t)v12, &qword_10163B9F0);
    goto LABEL_16;
  }
  v23(v12, 0, 1, v13);
  sub_100B30DB4((uint64_t)v12, (uint64_t)v20, (uint64_t (*)(void))type metadata accessor for OwnedBeaconRecord);
  sub_100B30D0C((uint64_t)&v20[*(int *)(v13 + 24)], (uint64_t)v9, (uint64_t (*)(void))type metadata accessor for StableIdentifier);
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload == 2)
  {
    uint64_t v30 = sub_10000588C(&qword_1016555E0);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    unsigned int v31 = (unsigned __int8 *)&v9[*(int *)(v30 + 96)];
    unsigned __int8 v32 = *v31;
    unsigned __int8 v33 = v31[1];
    swift_bridgeObjectRelease();
    if ((v33 & 1) == 0)
    {
      char v27 = a2 & 1;
      char v28 = a3 & 1;
      char v29 = v45 & 1;
      unsigned __int8 v26 = v32;
      goto LABEL_13;
    }
    sub_100B310AC((uint64_t)v20, (uint64_t (*)(void))type metadata accessor for OwnedBeaconRecord);
    uint64_t v34 = type metadata accessor for UUID();
    (*(void (**)(char *, uint64_t))(*(void *)(v34 - 8) + 8))(v9, v34);
LABEL_16:
    uint64_t v42 = &_swiftEmptySetSingleton;
    goto LABEL_17;
  }
  if (EnumCaseMultiPayload != 3)
  {
    if (qword_101636F60 != -1) {
      swift_once();
    }
    uint64_t v35 = type metadata accessor for Logger();
    sub_100010324(v35, (uint64_t)qword_10170EA18);
    sub_100B30D0C((uint64_t)v20, (uint64_t)v17, (uint64_t (*)(void))type metadata accessor for OwnedBeaconRecord);
    uint64_t v36 = Logger.logObject.getter();
    os_log_type_t v37 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v36, v37))
    {
      uint64_t v38 = swift_slowAlloc();
      uint64_t v39 = swift_slowAlloc();
      uint64_t v45 = v39;
      *(_DWORD *)uint64_t v38 = 141558275;
      uint64_t v46 = 1752392040;
      v47[0] = v39;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v38 + 12) = 2081;
      uint64_t v40 = sub_101110C7C();
      uint64_t v46 = sub_1008FA0F0(v40, v41, v47);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      sub_100B310AC((uint64_t)v17, (uint64_t (*)(void))type metadata accessor for OwnedBeaconRecord);
      _os_log_impl((void *)&_mh_execute_header, v36, v37, "nearbyParts: Invalid stableIdentifier %{private,mask.hash}s", (uint8_t *)v38, 0x16u);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      sub_100B310AC((uint64_t)v17, (uint64_t (*)(void))type metadata accessor for OwnedBeaconRecord);
    }

    sub_100B310AC((uint64_t)v20, (uint64_t (*)(void))type metadata accessor for OwnedBeaconRecord);
    sub_100B310AC((uint64_t)v9, (uint64_t (*)(void))type metadata accessor for StableIdentifier);
    goto LABEL_16;
  }
  uint64_t v25 = sub_10000588C((uint64_t *)&unk_1016565E0);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  unsigned __int8 v26 = v9[*(int *)(v25 + 96)];
  char v27 = a2 & 1;
  char v28 = a3 & 1;
  char v29 = v45 & 1;
LABEL_13:
  uint64_t v42 = sub_1000D0B80(v26, v27, v28, v29);
  sub_100B310AC((uint64_t)v20, (uint64_t (*)(void))type metadata accessor for OwnedBeaconRecord);
  uint64_t v43 = type metadata accessor for UUID();
  (*(void (**)(char *, uint64_t))(*(void *)(v43 - 8) + 8))(v9, v43);
LABEL_17:
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)v48);
  return v42;
}

uint64_t sub_100B32F60(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = type metadata accessor for OwnedBeaconRecord();
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v7 = __chkstk_darwin(v5 - 8);
  uint64_t v22 = (uint64_t)&v19 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t result = __chkstk_darwin(v7);
  uint64_t v11 = (char *)&v19 - v10;
  uint64_t v12 = _swiftEmptyArrayStorage;
  uint64_t v23 = _swiftEmptyArrayStorage;
  uint64_t v21 = *(void *)(a1 + 16);
  if (v21)
  {
    unint64_t v13 = 0;
    uint64_t v19 = a2;
    uint64_t v20 = a1;
    while (v13 < *(void *)(a1 + 16))
    {
      unint64_t v14 = (*(unsigned __int8 *)(v6 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80);
      uint64_t v15 = *(void *)(v6 + 72);
      sub_100B30D0C(a1 + v14 + v15 * v13, (uint64_t)v11, (uint64_t (*)(void))type metadata accessor for OwnedBeaconRecord);
      BOOL v16 = sub_100AFE398((uint64_t)v11, a2);
      if (v2)
      {
        sub_100B310AC((uint64_t)v11, (uint64_t (*)(void))type metadata accessor for OwnedBeaconRecord);
        swift_release();
        swift_bridgeObjectRelease();
        return (uint64_t)v12;
      }
      if (v16)
      {
        sub_100B30DB4((uint64_t)v11, v22, (uint64_t (*)(void))type metadata accessor for OwnedBeaconRecord);
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          sub_1000B74D8(0, v12[2] + 1, 1);
        }
        uint64_t v12 = v23;
        unint64_t v18 = v23[2];
        unint64_t v17 = v23[3];
        if (v18 >= v17 >> 1)
        {
          sub_1000B74D8(v17 > 1, v18 + 1, 1);
          uint64_t v12 = v23;
        }
        v12[2] = v18 + 1;
        uint64_t result = sub_100B30DB4(v22, (uint64_t)v12 + v14 + v18 * v15, (uint64_t (*)(void))type metadata accessor for OwnedBeaconRecord);
        a2 = v19;
        a1 = v20;
      }
      else
      {
        uint64_t result = sub_100B310AC((uint64_t)v11, (uint64_t (*)(void))type metadata accessor for OwnedBeaconRecord);
      }
      if (v21 == ++v13)
      {
        uint64_t v12 = v23;
        goto LABEL_15;
      }
    }
    __break(1u);
  }
  else
  {
LABEL_15:
    swift_bridgeObjectRelease();
    return (uint64_t)v12;
  }
  return result;
}

void *sub_100B331E0(uint64_t a1, int a2, int a3, int a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v50 = a7;
  uint64_t v51 = a1;
  uint64_t v47 = a5;
  int v44 = a3;
  int v45 = a4;
  int v43 = a2;
  uint64_t v8 = sub_10000588C(&qword_10163BB20);
  __chkstk_darwin(v8 - 8);
  uint64_t v10 = &v42[-((v9 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v11 = type metadata accessor for OwnedBeaconGroup(0);
  uint64_t v46 = *(void *)(v11 - 8);
  __chkstk_darwin(v11);
  unint64_t v13 = &v42[-((v12 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v14 = sub_10000588C(&qword_101638CF0);
  __chkstk_darwin(v14 - 8);
  BOOL v16 = &v42[-((v15 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v17 = type metadata accessor for UUID();
  uint64_t v48 = *(void *)(v17 - 8);
  uint64_t v49 = v17;
  __chkstk_darwin(v17);
  uint64_t v19 = &v42[-((v18 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v20 = sub_10000588C(&qword_10163B9F0);
  __chkstk_darwin(v20 - 8);
  uint64_t v22 = &v42[-((v21 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v23 = type metadata accessor for OwnedBeaconRecord();
  uint64_t v24 = *(void *)(v23 - 8);
  __chkstk_darwin(v23);
  unsigned __int8 v26 = &v42[-((v25 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v53[3] = a6;
  v53[4] = v50;
  char v27 = sub_10001D958(v53);
  (*(void (**)(uint64_t *, uint64_t, uint64_t))(*(void *)(a6 - 8) + 16))(v27, v51, a6);
  sub_10001D010((uint64_t)v53, (uint64_t)v52);
  sub_10000588C((uint64_t *)&unk_10164DBF0);
  int v28 = swift_dynamicCast();
  char v29 = *(void (**)(unsigned char *, uint64_t, uint64_t, uint64_t))(v24 + 56);
  if (v28)
  {
    uint64_t v51 = v11;
    uint64_t v30 = v47;
    v29(v22, 0, 1, v23);
    sub_100B30DB4((uint64_t)v22, (uint64_t)v26, (uint64_t (*)(void))type metadata accessor for OwnedBeaconRecord);
    sub_10001D074((uint64_t)&v26[*(int *)(v23 + 28)], (uint64_t)v16, &qword_101638CF0);
    uint64_t v31 = v48;
    uint64_t v32 = v49;
    if ((*(unsigned int (**)(unsigned char *, uint64_t, uint64_t))(v48 + 48))(v16, 1, v49) == 1)
    {
      sub_10001DAB4((uint64_t)v16, &qword_101638CF0);
    }
    else
    {
      (*(void (**)(unsigned char *, unsigned char *, uint64_t))(v31 + 32))(v19, v16, v32);
      sub_100AE75E0((uint64_t)v19, (uint64_t)v10);
      if ((*(unsigned int (**)(unsigned char *, uint64_t, uint64_t))(v46 + 48))(v10, 1, v51) != 1)
      {
        uint64_t v35 = (uint64_t)v10;
        uint64_t v36 = (uint64_t)v13;
        sub_100B30DB4(v35, (uint64_t)v13, type metadata accessor for OwnedBeaconGroup);
        uint64_t v37 = v31;
        uint64_t v38 = sub_100B32900((uint64_t)v26, v43 & 1, v44 & 1, v45 & 1);
        uint64_t v39 = sub_1004D1434();
        swift_retain();
        uint64_t v40 = sub_100B33F6C(v39, v30);
        swift_bridgeObjectRelease();
        swift_release();
        uint64_t v41 = sub_100B32F60((uint64_t)v40, (uint64_t)v38);
        swift_bridgeObjectRelease();
        unsigned __int8 v33 = sub_100A9A618(v41);
        swift_bridgeObjectRelease();
        sub_100B310AC(v36, type metadata accessor for OwnedBeaconGroup);
        (*(void (**)(unsigned char *, uint64_t))(v37 + 8))(v19, v32);
        sub_100B310AC((uint64_t)v26, (uint64_t (*)(void))type metadata accessor for OwnedBeaconRecord);
        goto LABEL_9;
      }
      sub_10001DAB4((uint64_t)v10, &qword_10163BB20);
      (*(void (**)(unsigned char *, uint64_t))(v31 + 8))(v19, v32);
    }
    sub_100B310AC((uint64_t)v26, (uint64_t (*)(void))type metadata accessor for OwnedBeaconRecord);
  }
  else
  {
    v29(v22, 1, 1, v23);
    sub_10001DAB4((uint64_t)v22, &qword_10163B9F0);
  }
  unsigned __int8 v33 = _swiftEmptyArrayStorage;
LABEL_9:
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)v53);
  return v33;
}

double sub_100B3376C(double a1)
{
  double v1 = a1;
  if (a1 < 4.0)
  {
    static os_log_type_t.error.getter();
    if (qword_101637260 != -1) {
      swift_once();
    }
    sub_10000588C((uint64_t *)&unk_10163AD00);
    uint64_t v2 = swift_allocObject();
    *(_OWORD *)(v2 + 16) = xmmword_101347BA0;
    *(void *)(v2 + 56) = &type metadata for Double;
    *(void *)(v2 + 64) = &protocol witness table for Double;
    *(double *)(v2 + 32) = v1;
    *(void *)(v2 + 96) = &type metadata for Double;
    *(void *)(v2 + 104) = &protocol witness table for Double;
    *(void *)(v2 + 72) = 0x4010000000000000;
    os_log(_:dso:log:_:_:)();
    double v1 = 4.0;
LABEL_9:
    swift_bridgeObjectRelease();
    return v1;
  }
  if (a1 > 20.0)
  {
    static os_log_type_t.error.getter();
    if (qword_101637260 != -1) {
      swift_once();
    }
    sub_10000588C((uint64_t *)&unk_10163AD00);
    uint64_t v3 = swift_allocObject();
    *(_OWORD *)(v3 + 16) = xmmword_101347BA0;
    *(void *)(v3 + 56) = &type metadata for Double;
    *(void *)(v3 + 64) = &protocol witness table for Double;
    *(double *)(v3 + 32) = v1;
    *(void *)(v3 + 96) = &type metadata for Double;
    *(void *)(v3 + 104) = &protocol witness table for Double;
    *(void *)(v3 + 72) = 0x4034000000000000;
    os_log(_:dso:log:_:_:)();
    double v1 = 20.0;
    goto LABEL_9;
  }
  return v1;
}

void *sub_100B33934(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2;
  uint64_t v70 = a2;
  uint64_t v64 = type metadata accessor for URL();
  uint64_t v5 = *(uint64_t **)(v64 - 8);
  __chkstk_darwin(v64);
  uint64_t v63 = (char *)&v46 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v62 = sub_10000588C((uint64_t *)&unk_10163B890);
  __chkstk_darwin(v62);
  uint64_t v8 = (char *)&v46 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v61 = type metadata accessor for MemberPeerTrust();
  uint64_t v9 = *(void **)(v61 - 8);
  __chkstk_darwin(v61);
  uint64_t v51 = (uint64_t)&v46 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v50 = sub_10000588C((uint64_t *)&unk_101657AD0);
  uint64_t v49 = *(void *)(v50 - 8);
  uint64_t v11 = __chkstk_darwin(v50);
  uint64_t v59 = (uint64_t)&v46 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = __chkstk_darwin(v11);
  uint64_t v48 = (uint64_t)&v46 - v14;
  __chkstk_darwin(v13);
  uint64_t v47 = (uint64_t)&v46 - v15;
  uint64_t v60 = *(void *)(a1 + 16);
  if (!v60) {
    return _swiftEmptyArrayStorage;
  }
  uint64_t v58 = type metadata accessor for MemberSharingCircle();
  unint64_t v16 = *(void *)(v58 - 8);
  uint64_t v17 = a1 + ((*(unsigned __int8 *)(v16 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v16 + 80));
  uint64_t v18 = qword_101637160;
  uint64_t v46 = a1;
  swift_bridgeObjectRetain();
  if (v18 != -1) {
LABEL_17:
  }
    swift_once();
  uint64_t v19 = 0;
  uint64_t v20 = *(void *)(v70 + 160);
  uint64_t v56 = *(void *)(v16 + 72);
  uint64_t v57 = v20;
  uint64_t v54 = (void (**)(char *, uint64_t))(v5 + 1);
  uint64_t v55 = (void (**)(char *, uint64_t, uint64_t))(v5 + 2);
  uint64_t v53 = (unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 6);
  uint64_t v9 = _swiftEmptyArrayStorage;
  uint64_t v52 = (void *)0x8000000101402BA0;
  do
  {
    if (__OFADD__(v19, 1))
    {
      __break(1u);
      goto LABEL_17;
    }
    uint64_t v65 = v19 + 1;
    uint64_t v66 = v19;
    uint64_t v24 = *(int *)(v58 + 32);
    uint64_t v70 = v3;
    uint64_t v68 = v9;
    uint64_t v69 = v17 + v24;
    uint64_t v25 = v64;
    uint64_t v26 = sub_100010324(v64, (uint64_t)qword_10170EE20);
    char v27 = v63;
    (*v55)(v63, v26, v25);
    v28._countAndFlagsBits = 0xD000000000000014;
    v28._object = v52;
    prohibitAsyncContext(functionName:)(v28);
    uint64_t v29 = v61;
    uint64_t v71 = v61;
    sub_10000588C(&qword_10163A060);
    uint64_t v30 = v8;
    uint64_t v31 = String.init<A>(describing:)();
    uint64_t v33 = v32;
    uint64_t v67 = v17;
    uint64_t v35 = v34;
    uint64_t v5 = &v46;
    unint64_t v16 = *(void *)(v57 + 16);
    __chkstk_darwin(v34);
    uint64_t v36 = v69;
    uint64_t v37 = v70;
    *(&v46 - 6) = v38;
    *(&v46 - 5) = v36;
    *(&v46 - 4) = (uint64_t)v27;
    *(&v46 - 3) = v31;
    uint64_t v8 = v30;
    *(&v46 - 2) = v33;
    OS_dispatch_queue.sync<A>(execute:)();
    uint64_t v3 = v37;
    swift_bridgeObjectRelease();
    (*v54)(v27, v25);
    if ((*v53)(v8, 1, v29) == 1)
    {
      sub_10001DAB4((uint64_t)v8, (uint64_t *)&unk_10163B890);
      uint64_t v22 = v66;
      uint64_t v21 = v67;
      uint64_t v9 = v68;
      uint64_t v23 = v65;
    }
    else
    {
      uint64_t v39 = v51;
      sub_100B30DB4((uint64_t)v8, v51, (uint64_t (*)(void))type metadata accessor for MemberPeerTrust);
      uint64_t v40 = v48;
      uint64_t v41 = v48 + *(int *)(v50 + 48);
      sub_100B30DB4(v39, v48, (uint64_t (*)(void))type metadata accessor for MemberPeerTrust);
      uint64_t v21 = v67;
      sub_100B30D0C(v67, v41, (uint64_t (*)(void))type metadata accessor for MemberSharingCircle);
      uint64_t v42 = v47;
      sub_10001D608(v40, v47, (uint64_t *)&unk_101657AD0);
      sub_10001D608(v42, v59, (uint64_t *)&unk_101657AD0);
      uint64_t v9 = v68;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
        uint64_t v9 = (void *)sub_100A71F74(0, v9[2] + 1, 1, (unint64_t)v9);
      }
      uint64_t v23 = v65;
      uint64_t v22 = v66;
      unint64_t v44 = v9[2];
      unint64_t v43 = v9[3];
      unint64_t v16 = v44 + 1;
      if (v44 >= v43 >> 1) {
        uint64_t v9 = (void *)sub_100A71F74(v43 > 1, v44 + 1, 1, (unint64_t)v9);
      }
      v9[2] = v16;
      sub_10001D608(v59, (uint64_t)v9+ ((*(unsigned __int8 *)(v49 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v49 + 80))+ *(void *)(v49 + 72) * v44, (uint64_t *)&unk_101657AD0);
    }
    uint64_t v19 = v22 + 1;
    uint64_t v17 = v21 + v56;
  }
  while (v23 != v60);
  swift_bridgeObjectRelease();
  return v9;
}

void *sub_100B33F6C(uint64_t a1, uint64_t a2)
{
  uint64_t v47 = a2;
  uint64_t v3 = sub_10000588C(&qword_10163B9F0);
  __chkstk_darwin(v3 - 8);
  uint64_t v5 = (char *)&v36 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v46 = type metadata accessor for OwnedBeaconRecord();
  uint64_t v6 = *(void *)(v46 - 8);
  uint64_t v7 = __chkstk_darwin(v46);
  uint64_t v40 = (uint64_t)&v36 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v7);
  uint64_t v38 = (uint64_t)&v36 - v9;
  uint64_t v10 = type metadata accessor for UUID();
  uint64_t v11 = *(void *)(v10 - 8);
  __chkstk_darwin(v10);
  uint64_t v13 = (char *)&v36 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = sub_10000588C(&qword_101638CF0);
  __chkstk_darwin(v14 - 8);
  unint64_t v16 = (char *)&v36 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v17 = *(void *)(a1 + 56);
  uint64_t v42 = a1 + 56;
  uint64_t v18 = 1 << *(unsigned char *)(a1 + 32);
  uint64_t v19 = -1;
  if (v18 < 64) {
    uint64_t v19 = ~(-1 << v18);
  }
  unint64_t v20 = v19 & v17;
  uint64_t v49 = v11 + 16;
  uint64_t v50 = (void (**)(char *, uint64_t, uint64_t, uint64_t))(v11 + 56);
  uint64_t v48 = v11 + 48;
  int v45 = (void (**)(char *, char *, uint64_t))(v11 + 32);
  int64_t v43 = (unint64_t)(v18 + 63) >> 6;
  unint64_t v44 = (void (**)(char *, uint64_t))(v11 + 8);
  uint64_t v39 = v6;
  uint64_t v21 = (unsigned int (**)(char *, uint64_t, uint64_t))(v6 + 48);
  uint64_t v51 = a1;
  uint64_t result = (void *)swift_bridgeObjectRetain();
  int64_t v23 = 0;
  uint64_t v41 = _swiftEmptyArrayStorage;
  while (1)
  {
    if (v20)
    {
      unint64_t v24 = __clz(__rbit64(v20));
      v20 &= v20 - 1;
      unint64_t v25 = v24 | (v23 << 6);
      goto LABEL_22;
    }
    int64_t v26 = v23 + 1;
    if (__OFADD__(v23, 1))
    {
      __break(1u);
      goto LABEL_33;
    }
    if (v26 >= v43) {
      goto LABEL_30;
    }
    unint64_t v27 = *(void *)(v42 + 8 * v26);
    ++v23;
    if (!v27)
    {
      int64_t v23 = v26 + 1;
      if (v26 + 1 >= v43) {
        goto LABEL_30;
      }
      unint64_t v27 = *(void *)(v42 + 8 * v23);
      if (!v27)
      {
        int64_t v23 = v26 + 2;
        if (v26 + 2 >= v43) {
          goto LABEL_30;
        }
        unint64_t v27 = *(void *)(v42 + 8 * v23);
        if (!v27)
        {
          int64_t v23 = v26 + 3;
          if (v26 + 3 >= v43) {
            goto LABEL_30;
          }
          unint64_t v27 = *(void *)(v42 + 8 * v23);
          if (!v27) {
            break;
          }
        }
      }
    }
LABEL_21:
    unint64_t v20 = (v27 - 1) & v27;
    unint64_t v25 = __clz(__rbit64(v27)) + (v23 << 6);
LABEL_22:
    (*(void (**)(char *, unint64_t, uint64_t))(v11 + 16))(v16, *(void *)(v51 + 48) + *(void *)(v11 + 72) * v25, v10);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v11 + 56))(v16, 0, 1, v10);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v11 + 48))(v16, 1, v10) == 1) {
      goto LABEL_31;
    }
    (*v45)(v13, v16, v10);
    sub_100ACD178((uint64_t)v5);
    (*v44)(v13, v10);
    if ((*v21)(v5, 1, v46) == 1)
    {
      uint64_t result = (void *)sub_10001DAB4((uint64_t)v5, &qword_10163B9F0);
    }
    else
    {
      uint64_t v37 = type metadata accessor for OwnedBeaconRecord;
      uint64_t v29 = v38;
      sub_100B30DB4((uint64_t)v5, v38, (uint64_t (*)(void))type metadata accessor for OwnedBeaconRecord);
      sub_100B30DB4(v29, v40, (uint64_t (*)(void))v37);
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
        uint64_t v41 = (void *)sub_100A6F6C4(0, v41[2] + 1, 1, (unint64_t)v41);
      }
      unint64_t v31 = v41[2];
      unint64_t v30 = v41[3];
      uint64_t v32 = (uint64_t (*)())(v31 + 1);
      if (v31 >= v30 >> 1)
      {
        uint64_t v37 = (uint64_t (*)())(v31 + 1);
        uint64_t v35 = (void *)sub_100A6F6C4(v30 > 1, v31 + 1, 1, (unint64_t)v41);
        uint64_t v32 = v37;
        uint64_t v41 = v35;
      }
      uint64_t v33 = v40;
      uint64_t v34 = v41;
      v41[2] = v32;
      uint64_t result = (void *)sub_100B30DB4(v33, (uint64_t)v34+ ((*(unsigned __int8 *)(v39 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v39 + 80))+ *(void *)(v39 + 72) * v31, (uint64_t (*)(void))type metadata accessor for OwnedBeaconRecord);
    }
  }
  int64_t v28 = v26 + 4;
  if (v28 >= v43)
  {
LABEL_30:
    (*v50)(v16, 1, 1, v10);
LABEL_31:
    swift_release();
    return v41;
  }
  unint64_t v27 = *(void *)(v42 + 8 * v28);
  if (v27)
  {
    int64_t v23 = v28;
    goto LABEL_21;
  }
  while (1)
  {
    int64_t v23 = v28 + 1;
    if (__OFADD__(v28, 1)) {
      break;
    }
    if (v23 >= v43) {
      goto LABEL_30;
    }
    unint64_t v27 = *(void *)(v42 + 8 * v23);
    ++v28;
    if (v27) {
      goto LABEL_21;
    }
  }
LABEL_33:
  __break(1u);
  return result;
}

void *sub_100B344E8(uint64_t a1, uint64_t a2, unint64_t a3)
{
  uint64_t v63 = a2;
  unint64_t v64 = a3;
  uint64_t v5 = type metadata accessor for StableIdentifier();
  __chkstk_darwin(v5);
  uint64_t v7 = (char *)&v56 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for OwnedBeaconRecord();
  uint64_t v9 = __chkstk_darwin(v8);
  uint64_t v62 = (uint64_t)&v56 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9);
  uint64_t v13 = (char *)&v56 - v12;
  uint64_t result = _swiftEmptyArrayStorage;
  uint64_t v70 = _swiftEmptyArrayStorage;
  uint64_t v15 = *(void *)(a1 + 16);
  if (v15)
  {
    uint64_t v16 = *(unsigned __int8 *)(v11 + 80);
    uint64_t v17 = *(void *)(v11 + 72);
    uint64_t v66 = v7 + 8;
    uint64_t v67 = v17;
    uint64_t v56 = v3;
    uint64_t v57 = (v16 + 32) & ~v16;
    uint64_t v18 = a1 + v57;
    uint64_t v61 = v5;
    uint64_t v65 = v8;
    while (1)
    {
      sub_100B30D0C(v18, (uint64_t)v13, (uint64_t (*)(void))type metadata accessor for OwnedBeaconRecord);
      sub_100B30D0C((uint64_t)&v13[*(int *)(v8 + 24)], (uint64_t)v7, (uint64_t (*)(void))type metadata accessor for StableIdentifier);
      int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
      if (EnumCaseMultiPayload == 3)
      {
        uint64_t v29 = sub_10000588C((uint64_t *)&unk_1016565E0);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        unint64_t v30 = &v7[*(int *)(v29 + 80)];
        uint64_t v32 = *(void *)v30;
        unint64_t v31 = *((void *)v30 + 1);
        uint64_t v68 = v32;
        unint64_t v69 = v31;
        sub_1000336D4();
        uint64_t v33 = Data.init<A>(hexString:)();
        if (v34 >> 60 == 15) {
          goto LABEL_12;
        }
        uint64_t v35 = v33;
        unint64_t v36 = v34;
        uint64_t v68 = v33;
        unint64_t v69 = v34;
        sub_1000362FC();
        if (DataProtocol.isNull.getter())
        {
          sub_100037A24(v35, v36);
LABEL_12:
          uint64_t v37 = type metadata accessor for UUID();
          (*(void (**)(char *, uint64_t))(*(void *)(v37 - 8) + 8))(v7, v37);
          goto LABEL_15;
        }
        uint64_t v45 = Data.trimmed.getter();
        unint64_t v58 = v46;
        uint64_t v59 = v45;
        uint64_t v47 = v63;
        unint64_t v48 = v64;
        sub_1000361E0(v63, v64);
        uint64_t v49 = v45;
        unint64_t v50 = v58;
        int v60 = _s12searchpartyd24KeyRepresentableInternalV23__derived_struct_equalsySbAC_ACtFZ_0(v49, v58, v47, v48);
        sub_10001CFB8(v47, v48);
        sub_100037A24(v35, v36);
        unint64_t v51 = v50;
        uint64_t v8 = v65;
        sub_10001CFB8(v59, v51);
        uint64_t v52 = type metadata accessor for UUID();
        (*(void (**)(char *, uint64_t))(*(void *)(v52 - 8) + 8))(v7, v52);
        if (v60)
        {
LABEL_19:
          sub_100B30DB4((uint64_t)v13, v62, (uint64_t (*)(void))type metadata accessor for OwnedBeaconRecord);
          uint64_t v53 = v70;
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
          {
            sub_1000B74D8(0, v53[2] + 1, 1);
            uint64_t v53 = v70;
          }
          unint64_t v55 = v53[2];
          unint64_t v54 = v53[3];
          if (v55 >= v54 >> 1)
          {
            sub_1000B74D8(v54 > 1, v55 + 1, 1);
            uint64_t v53 = v70;
          }
          v53[2] = v55 + 1;
          sub_100B30DB4(v62, (uint64_t)v53 + v57 + v55 * v67, (uint64_t (*)(void))type metadata accessor for OwnedBeaconRecord);
          uint64_t v8 = v65;
          goto LABEL_16;
        }
      }
      else
      {
        if (EnumCaseMultiPayload != 2)
        {
          sub_100B310AC((uint64_t)v7, (uint64_t (*)(void))type metadata accessor for StableIdentifier);
          goto LABEL_15;
        }
        uint64_t v20 = sub_10000588C(&qword_1016555E0);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        uint64_t v21 = &v7[*(int *)(v20 + 80)];
        uint64_t v22 = *(void *)v21;
        unint64_t v23 = *((void *)v21 + 1);
        swift_bridgeObjectRelease();
        uint64_t v68 = v22;
        unint64_t v69 = v23;
        sub_1000336D4();
        uint64_t v24 = Data.init<A>(hexString:)();
        if (v25 >> 60 == 15) {
          goto LABEL_8;
        }
        uint64_t v26 = v24;
        unint64_t v27 = v25;
        uint64_t v68 = v24;
        unint64_t v69 = v25;
        sub_1000362FC();
        if (DataProtocol.isNull.getter())
        {
          sub_100037A24(v26, v27);
LABEL_8:
          uint64_t v28 = type metadata accessor for UUID();
          (*(void (**)(char *, uint64_t))(*(void *)(v28 - 8) + 8))(v7, v28);
          uint64_t v8 = v65;
          goto LABEL_15;
        }
        uint64_t v38 = Data.trimmed.getter();
        unint64_t v58 = v39;
        uint64_t v59 = v38;
        uint64_t v40 = v63;
        unint64_t v41 = v64;
        sub_1000361E0(v63, v64);
        uint64_t v42 = v38;
        unint64_t v43 = v58;
        int v60 = _s12searchpartyd24KeyRepresentableInternalV23__derived_struct_equalsySbAC_ACtFZ_0(v42, v58, v40, v41);
        sub_10001CFB8(v40, v41);
        sub_100037A24(v26, v27);
        sub_10001CFB8(v59, v43);
        uint64_t v44 = type metadata accessor for UUID();
        (*(void (**)(char *, uint64_t))(*(void *)(v44 - 8) + 8))(v7, v44);
        uint64_t v8 = v65;
        if (v60) {
          goto LABEL_19;
        }
      }
LABEL_15:
      sub_100B310AC((uint64_t)v13, (uint64_t (*)(void))type metadata accessor for OwnedBeaconRecord);
LABEL_16:
      v18 += v67;
      if (!--v15) {
        return v70;
      }
    }
  }
  return result;
}

void *sub_100B34AD4(uint64_t a1, uint64_t a2)
{
  uint64_t v47 = a2;
  uint64_t v3 = sub_10000588C(&qword_10164B478);
  __chkstk_darwin(v3 - 8);
  uint64_t v5 = (char *)&v36 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v46 = type metadata accessor for SharedBeaconGroup();
  uint64_t v6 = *(void *)(v46 - 8);
  uint64_t v7 = __chkstk_darwin(v46);
  uint64_t v40 = (uint64_t)&v36 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v7);
  uint64_t v38 = (uint64_t)&v36 - v9;
  uint64_t v10 = type metadata accessor for UUID();
  uint64_t v11 = *(void *)(v10 - 8);
  __chkstk_darwin(v10);
  uint64_t v13 = (char *)&v36 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = sub_10000588C(&qword_101638CF0);
  __chkstk_darwin(v14 - 8);
  uint64_t v16 = (char *)&v36 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v17 = *(void *)(a1 + 56);
  uint64_t v42 = a1 + 56;
  uint64_t v18 = 1 << *(unsigned char *)(a1 + 32);
  uint64_t v19 = -1;
  if (v18 < 64) {
    uint64_t v19 = ~(-1 << v18);
  }
  unint64_t v20 = v19 & v17;
  uint64_t v49 = v11 + 16;
  unint64_t v50 = (void (**)(char *, uint64_t, uint64_t, uint64_t))(v11 + 56);
  uint64_t v48 = v11 + 48;
  uint64_t v45 = (void (**)(char *, char *, uint64_t))(v11 + 32);
  int64_t v43 = (unint64_t)(v18 + 63) >> 6;
  uint64_t v44 = (void (**)(char *, uint64_t))(v11 + 8);
  uint64_t v39 = v6;
  uint64_t v21 = (unsigned int (**)(char *, uint64_t, uint64_t))(v6 + 48);
  uint64_t v51 = a1;
  uint64_t result = (void *)swift_bridgeObjectRetain();
  int64_t v23 = 0;
  unint64_t v41 = _swiftEmptyArrayStorage;
  while (1)
  {
    if (v20)
    {
      unint64_t v24 = __clz(__rbit64(v20));
      v20 &= v20 - 1;
      unint64_t v25 = v24 | (v23 << 6);
      goto LABEL_22;
    }
    int64_t v26 = v23 + 1;
    if (__OFADD__(v23, 1))
    {
      __break(1u);
      goto LABEL_33;
    }
    if (v26 >= v43) {
      goto LABEL_30;
    }
    unint64_t v27 = *(void *)(v42 + 8 * v26);
    ++v23;
    if (!v27)
    {
      int64_t v23 = v26 + 1;
      if (v26 + 1 >= v43) {
        goto LABEL_30;
      }
      unint64_t v27 = *(void *)(v42 + 8 * v23);
      if (!v27)
      {
        int64_t v23 = v26 + 2;
        if (v26 + 2 >= v43) {
          goto LABEL_30;
        }
        unint64_t v27 = *(void *)(v42 + 8 * v23);
        if (!v27)
        {
          int64_t v23 = v26 + 3;
          if (v26 + 3 >= v43) {
            goto LABEL_30;
          }
          unint64_t v27 = *(void *)(v42 + 8 * v23);
          if (!v27) {
            break;
          }
        }
      }
    }
LABEL_21:
    unint64_t v20 = (v27 - 1) & v27;
    unint64_t v25 = __clz(__rbit64(v27)) + (v23 << 6);
LABEL_22:
    (*(void (**)(char *, unint64_t, uint64_t))(v11 + 16))(v16, *(void *)(v51 + 48) + *(void *)(v11 + 72) * v25, v10);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v11 + 56))(v16, 0, 1, v10);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v11 + 48))(v16, 1, v10) == 1) {
      goto LABEL_31;
    }
    (*v45)(v13, v16, v10);
    sub_100AE86F4((uint64_t)v13, (uint64_t)v5);
    (*v44)(v13, v10);
    if ((*v21)(v5, 1, v46) == 1)
    {
      uint64_t result = (void *)sub_10001DAB4((uint64_t)v5, &qword_10164B478);
    }
    else
    {
      uint64_t v37 = type metadata accessor for SharedBeaconGroup;
      uint64_t v29 = v38;
      sub_100B30DB4((uint64_t)v5, v38, (uint64_t (*)(void))type metadata accessor for SharedBeaconGroup);
      sub_100B30DB4(v29, v40, (uint64_t (*)(void))v37);
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
        unint64_t v41 = (void *)sub_100A7083C(0, v41[2] + 1, 1, (unint64_t)v41);
      }
      unint64_t v31 = v41[2];
      unint64_t v30 = v41[3];
      uint64_t v32 = (uint64_t (*)())(v31 + 1);
      if (v31 >= v30 >> 1)
      {
        uint64_t v37 = (uint64_t (*)())(v31 + 1);
        uint64_t v35 = (void *)sub_100A7083C(v30 > 1, v31 + 1, 1, (unint64_t)v41);
        uint64_t v32 = v37;
        unint64_t v41 = v35;
      }
      uint64_t v33 = v40;
      unint64_t v34 = v41;
      v41[2] = v32;
      uint64_t result = (void *)sub_100B30DB4(v33, (uint64_t)v34+ ((*(unsigned __int8 *)(v39 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v39 + 80))+ *(void *)(v39 + 72) * v31, (uint64_t (*)(void))type metadata accessor for SharedBeaconGroup);
    }
  }
  int64_t v28 = v26 + 4;
  if (v28 >= v43)
  {
LABEL_30:
    (*v50)(v16, 1, 1, v10);
LABEL_31:
    swift_release();
    return v41;
  }
  unint64_t v27 = *(void *)(v42 + 8 * v28);
  if (v27)
  {
    int64_t v23 = v28;
    goto LABEL_21;
  }
  while (1)
  {
    int64_t v23 = v28 + 1;
    if (__OFADD__(v28, 1)) {
      break;
    }
    if (v23 >= v43) {
      goto LABEL_30;
    }
    unint64_t v27 = *(void *)(v42 + 8 * v23);
    ++v28;
    if (v27) {
      goto LABEL_21;
    }
  }
LABEL_33:
  __break(1u);
  return result;
}

void *sub_100B35050(uint64_t a1, uint64_t (*a2)(void, void))
{
  uint64_t v2 = *(void *)(a1 + 16);
  if (!v2) {
    return _swiftEmptyArrayStorage;
  }
  uint64_t v5 = sub_10000588C(&qword_10163A958);
  uint64_t v6 = a1
     + ((*(unsigned __int8 *)(*(void *)(v5 - 8) + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(v5 - 8) + 80));
  uint64_t v7 = *(void *)(*(void *)(v5 - 8) + 72);
  swift_bridgeObjectRetain();
  uint64_t v8 = _swiftEmptyArrayStorage;
  uint64_t v15 = a2;
  do
  {
    uint64_t v9 = a2(v6, v6 + *(int *)(v5 + 48));
    if ((v10 & 1) == 0)
    {
      uint64_t v11 = v9;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
        uint64_t v8 = sub_100A70A3C(0, v8[2] + 1, 1, v8);
      }
      unint64_t v13 = v8[2];
      unint64_t v12 = v8[3];
      if (v13 >= v12 >> 1) {
        uint64_t v8 = sub_100A70A3C((void *)(v12 > 1), v13 + 1, 1, v8);
      }
      v8[2] = v13 + 1;
      v8[v13 + 4] = v11;
      a2 = v15;
    }
    v6 += v7;
    --v2;
  }
  while (v2);
  swift_bridgeObjectRelease();
  return v8;
}

uint64_t sub_100B351DC(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for String.Encoding();
  __chkstk_darwin(v2 - 8);
  uint64_t v3 = type metadata accessor for StableIdentifier();
  __chkstk_darwin(v3);
  uint64_t v5 = (char *)&v25 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = type metadata accessor for OwnedBeaconRecord();
  sub_100B30D0C(a1 + *(int *)(v6 + 24), (uint64_t)v5, (uint64_t (*)(void))type metadata accessor for StableIdentifier);
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload == 3)
  {
    uint64_t v9 = sub_10000588C((uint64_t *)&unk_1016565E0);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    char v10 = &v5[*(int *)(v9 + 80)];
    uint64_t v8 = *(void *)v10;
    unint64_t v11 = *((void *)v10 + 1);
  }
  else
  {
    if (EnumCaseMultiPayload != 2)
    {
      if (EnumCaseMultiPayload == 1)
      {
        uint64_t v8 = *((void *)v5 + 4);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
      }
      else
      {
        sub_100B310AC((uint64_t)v5, (uint64_t (*)(void))type metadata accessor for StableIdentifier);
        return 0;
      }
      return v8;
    }
    uint64_t v12 = sub_10000588C(&qword_1016555E0);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    unint64_t v13 = &v5[*(int *)(v12 + 80)];
    uint64_t v8 = *(void *)v13;
    unint64_t v11 = *((void *)v13 + 1);
    swift_bridgeObjectRelease();
  }
  uint64_t v14 = type metadata accessor for UUID();
  (*(void (**)(char *, uint64_t))(*(void *)(v14 - 8) + 8))(v5, v14);
  uint64_t v25 = v8;
  unint64_t v26 = v11;
  sub_1000336D4();
  swift_bridgeObjectRetain();
  uint64_t v15 = Data.init<A>(hexString:)();
  if (v16 >> 60 != 15)
  {
    uint64_t v17 = v15;
    unint64_t v18 = v16;
    uint64_t v25 = v15;
    unint64_t v26 = v16;
    sub_1000362FC();
    if ((DataProtocol.isNull.getter() & 1) == 0)
    {
      uint64_t v19 = Data.trimmed.getter();
      unint64_t v21 = v20;
      swift_bridgeObjectRelease();
      static String.Encoding.utf8.getter();
      uint64_t v22 = String.init(data:encoding:)();
      if (!v23) {
        uint64_t v22 = Data.hexString.getter();
      }
      uint64_t v8 = v22;
      sub_10001CFB8(v19, v21);
    }
    sub_100037A24(v17, v18);
  }
  return v8;
}

uint64_t sub_100B354CC(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for StableIdentifier();
  __chkstk_darwin(v2);
  uint64_t v4 = (char *)&v15 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = type metadata accessor for OwnedBeaconRecord();
  sub_100B30D0C(a1 + *(int *)(v5 + 24), (uint64_t)v4, (uint64_t (*)(void))type metadata accessor for StableIdentifier);
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  switch(EnumCaseMultiPayload)
  {
    case 1:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      return -1;
    case 3:
      uint64_t v12 = sub_10000588C((uint64_t *)&unk_1016565E0);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      uint64_t v9 = v4[*(int *)(v12 + 96)];
      break;
    case 2:
      uint64_t v7 = sub_10000588C(&qword_1016555E0);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      uint64_t v8 = &v4[*(int *)(v7 + 96)];
      uint64_t v9 = *v8;
      unsigned __int8 v10 = v8[1];
      swift_bridgeObjectRelease();
      if (v10)
      {
        uint64_t v11 = type metadata accessor for UUID();
        (*(void (**)(char *, uint64_t))(*(void *)(v11 - 8) + 8))(v4, v11);
        return -1;
      }
      break;
    default:
      sub_100B310AC((uint64_t)v4, (uint64_t (*)(void))type metadata accessor for StableIdentifier);
      return -1;
  }
  uint64_t v13 = type metadata accessor for UUID();
  (*(void (**)(char *, uint64_t))(*(void *)(v13 - 8) + 8))(v4, v13);
  return v9;
}

uint64_t sub_100B35700@<X0>(uint64_t a1@<X8>)
{
  return sub_100AE94D0(*(void *)(v1 + 16), *(void *)(v1 + 24), a1);
}

BOOL sub_100B3571C()
{
  return sub_100AFB468();
}

uint64_t sub_100B3573C(uint64_t a1)
{
  return sub_100AA5110(a1, *(void *)(v1 + 16)) & 1;
}

void *sub_100B3575C(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2;
  uint64_t v80 = a2;
  uint64_t v79 = type metadata accessor for URL();
  uint64_t v91 = *(void *)(v79 - 8);
  __chkstk_darwin(v79);
  id v78 = (char *)v61 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v77 = sub_10000588C((uint64_t *)&unk_10163B890);
  __chkstk_darwin(v77);
  uint64_t v7 = (char *)v61 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v90 = type metadata accessor for MemberPeerTrust();
  uint64_t v8 = *(void *)(v90 - 8);
  uint64_t v9 = __chkstk_darwin(v90);
  uint64_t v76 = (uint64_t)v61 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9);
  uint64_t v65 = (uint64_t)v61 - v11;
  uint64_t v12 = type metadata accessor for UUID();
  uint64_t v13 = *(void *)(v12 - 8);
  uint64_t v14 = __chkstk_darwin(v12);
  unint64_t v64 = (char *)v61 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v14);
  uint64_t v17 = (char *)v61 - v16;
  uint64_t v18 = sub_10000588C(&qword_101638CF0);
  __chkstk_darwin(v18 - 8);
  unint64_t v20 = (char *)v61 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v21 = *(void *)(a1 + 16);
  if (v21)
  {
    uint64_t v23 = *(void (**)(char *, uint64_t, uint64_t))(v13 + 16);
    uint64_t v22 = v13 + 16;
    unint64_t v85 = v23;
    uint64_t v24 = a1;
    uint64_t v25 = a1 + ((*(unsigned __int8 *)(v22 + 64) + 32) & ~(unint64_t)*(unsigned __int8 *)(v22 + 64));
    uint64_t v81 = (void (**)(char *, uint64_t, uint64_t, uint64_t))(v22 + 40);
    uint64_t v75 = (unsigned int (**)(char *, uint64_t, uint64_t))(v22 + 32);
    uint64_t v26 = *(void *)(v22 + 56);
    uint64_t v72 = (void (**)(char *, char *, uint64_t))(v22 + 16);
    uint64_t v73 = v26;
    uint64_t v71 = (void (**)(char *, uint64_t, uint64_t))(v91 + 16);
    uint64_t v70 = (void (**)(char *, uint64_t))(v91 + 8);
    uint64_t v63 = v8;
    v89 = (uint64_t (**)(uint64_t, uint64_t, uint64_t))(v8 + 48);
    uint64_t v67 = (void (**)(char *, uint64_t))(v22 - 8);
    v61[0] = v24;
    swift_bridgeObjectRetain();
    uint64_t v86 = _swiftEmptyArrayStorage;
    unint64_t v69 = (void *)0x8000000101402BA0;
    *(void *)&long long v27 = 141558275;
    long long v62 = v27;
    v61[1] = (char *)&type metadata for Any + 8;
    uint64_t v83 = v22;
    uint64_t v84 = v7;
    uint64_t v74 = v12;
    uint64_t v68 = v20;
    uint64_t v82 = v17;
    while (1)
    {
      v85(v20, v25, v12);
      uint64_t v66 = *v81;
      v66(v20, 0, 1, v12);
      if ((*v75)(v20, 1, v12) == 1) {
        break;
      }
      uint64_t v91 = v3;
      uint64_t v87 = v25;
      uint64_t v88 = v21;
      (*v72)(v17, v20, v12);
      uint64_t v29 = *(void *)(v80 + 160);
      if (qword_101637160 != -1) {
        swift_once();
      }
      uint64_t v30 = v79;
      uint64_t v31 = sub_100010324(v79, (uint64_t)qword_10170EE20);
      uint64_t v32 = v78;
      (*v71)(v78, v31, v30);
      v33._countAndFlagsBits = 0xD000000000000014;
      v33._object = v69;
      prohibitAsyncContext(functionName:)(v33);
      uint64_t v92 = v90;
      sub_10000588C(&qword_10163A060);
      uint64_t v34 = String.init<A>(describing:)();
      uint64_t v36 = v35;
      __chkstk_darwin(v37);
      v61[-6] = v29;
      v61[-5] = v17;
      v61[-4] = v32;
      v61[-3] = v34;
      v61[-2] = v36;
      uint64_t v38 = (uint64_t)v84;
      uint64_t v39 = v91;
      OS_dispatch_queue.sync<A>(execute:)();
      swift_bridgeObjectRelease();
      (*v70)(v32, v30);
      uint64_t v40 = *v89;
      unsigned int v41 = (*v89)(v38, 1, v90);
      uint64_t v91 = v39;
      if (v41 == 1)
      {
        uint64_t v12 = v74;
        if (qword_101636888 != -1) {
          swift_once();
        }
        uint64_t v42 = type metadata accessor for Logger();
        sub_100010324(v42, (uint64_t)qword_10170D788);
        int64_t v43 = v64;
        uint64_t v17 = v82;
        v85(v64, (uint64_t)v82, v12);
        uint64_t v44 = Logger.logObject.getter();
        os_log_type_t v45 = static os_log_type_t.error.getter();
        if (os_log_type_enabled(v44, v45))
        {
          uint64_t v46 = v43;
          uint64_t v47 = swift_slowAlloc();
          uint64_t v92 = swift_slowAlloc();
          *(_DWORD *)uint64_t v47 = v62;
          *(void *)(v47 + 4) = 1752392040;
          *(_WORD *)(v47 + 12) = 2081;
          sub_100B22DA4((unint64_t *)&qword_101638B10, (void (*)(uint64_t))&type metadata accessor for UUID);
          uint64_t v48 = dispatch thunk of CustomStringConvertible.description.getter();
          *(void *)(v47 + 14) = sub_1008FA0F0(v48, v49, &v92);
          swift_bridgeObjectRelease();
          unint64_t v50 = *v67;
          uint64_t v51 = v46;
          uint64_t v17 = v82;
          (*v67)(v51, v12);
          _os_log_impl((void *)&_mh_execute_header, v44, v45, "No peerTrust record to delete for peerTrustIdentifier: %{private,mask.hash}s.", (uint8_t *)v47, 0x16u);
          swift_arrayDestroy();
          swift_slowDealloc();
          swift_slowDealloc();
        }
        else
        {
          unint64_t v50 = *v67;
          (*v67)(v43, v12);
        }

        uint64_t v38 = (uint64_t)v84;
      }
      else
      {
        unint64_t v50 = *v67;
        uint64_t v12 = v74;
        uint64_t v17 = v82;
      }
      unint64_t v20 = v68;
      v50(v17, v12);
      if (v40(v38, 1, v90) == 1)
      {
        sub_10001DAB4(v38, (uint64_t *)&unk_10163B890);
        uint64_t v3 = v91;
        uint64_t v28 = v88;
      }
      else
      {
        uint64_t v52 = v65;
        sub_100B30DB4(v38, v65, (uint64_t (*)(void))type metadata accessor for MemberPeerTrust);
        sub_100B30DB4(v52, v76, (uint64_t (*)(void))type metadata accessor for MemberPeerTrust);
        char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
        uint64_t v3 = v91;
        uint64_t v28 = v88;
        if ((isUniquelyReferenced_nonNull_native & 1) == 0) {
          uint64_t v86 = (void *)sub_100A6F9A8(0, v86[2] + 1, 1, (unint64_t)v86);
        }
        unint64_t v55 = v86[2];
        unint64_t v54 = v86[3];
        uint64_t v56 = v63;
        if (v55 >= v54 >> 1)
        {
          unint64_t v58 = (void *)sub_100A6F9A8(v54 > 1, v55 + 1, 1, (unint64_t)v86);
          uint64_t v56 = v63;
          uint64_t v86 = v58;
        }
        uint64_t v57 = v86;
        v86[2] = v55 + 1;
        sub_100B30DB4(v76, (uint64_t)v57+ ((*(unsigned __int8 *)(v56 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v56 + 80))+ *(void *)(v56 + 72) * v55, (uint64_t (*)(void))type metadata accessor for MemberPeerTrust);
      }
      uint64_t v25 = v87 + v73;
      uint64_t v21 = v28 - 1;
      if (!v21)
      {
        v66(v20, 1, 1, v12);
        break;
      }
    }
  }
  else
  {
    uint64_t v59 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v13 + 56);
    swift_bridgeObjectRetain();
    uint64_t v86 = _swiftEmptyArrayStorage;
    v59(v20, 1, 1, v12);
  }
  swift_bridgeObjectRelease();
  return v86;
}

void *sub_100B360B4(uint64_t a1, void (*a2)(uint64_t, void), uint64_t a3)
{
  uint64_t v29 = a3;
  uint64_t v6 = sub_10000588C((uint64_t *)&unk_1016607D0);
  __chkstk_darwin(v6 - 8);
  uint64_t v8 = (char *)v23 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = type metadata accessor for OwnerPeerTrust();
  uint64_t v10 = *(void *)(v9 - 8);
  uint64_t v11 = __chkstk_darwin(v9);
  uint64_t v28 = (uint64_t)v23 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v11);
  uint64_t v26 = (uint64_t)v23 - v13;
  uint64_t v14 = *(void *)(a1 + 16);
  if (!v14) {
    return _swiftEmptyArrayStorage;
  }
  v23[2] = v3;
  uint64_t v15 = sub_10000588C(&qword_1016554F8);
  uint64_t v16 = *(void *)(v15 - 8);
  uint64_t v17 = a1 + ((*(unsigned __int8 *)(v16 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v16 + 80));
  uint64_t v25 = v10;
  uint64_t v27 = *(void *)(v16 + 72);
  v23[1] = a1;
  swift_bridgeObjectRetain();
  uint64_t v18 = _swiftEmptyArrayStorage;
  uint64_t v24 = v15;
  do
  {
    a2(v17, *(unsigned __int8 *)(v17 + *(int *)(v15 + 48)));
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48))(v8, 1, v9) == 1)
    {
      sub_10001DAB4((uint64_t)v8, (uint64_t *)&unk_1016607D0);
    }
    else
    {
      uint64_t v19 = v26;
      sub_100B30DB4((uint64_t)v8, v26, (uint64_t (*)(void))type metadata accessor for OwnerPeerTrust);
      sub_100B30DB4(v19, v28, (uint64_t (*)(void))type metadata accessor for OwnerPeerTrust);
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
        uint64_t v18 = (void *)sub_100A6F84C(0, v18[2] + 1, 1, (unint64_t)v18);
      }
      unint64_t v21 = v18[2];
      unint64_t v20 = v18[3];
      if (v21 >= v20 >> 1) {
        uint64_t v18 = (void *)sub_100A6F84C(v20 > 1, v21 + 1, 1, (unint64_t)v18);
      }
      v18[2] = v21 + 1;
      sub_100B30DB4(v28, (uint64_t)v18+ ((*(unsigned __int8 *)(v25 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v25 + 80))+ *(void *)(v25 + 72) * v21, (uint64_t (*)(void))type metadata accessor for OwnerPeerTrust);
      uint64_t v15 = v24;
    }
    v17 += v27;
    --v14;
  }
  while (v14);
  swift_bridgeObjectRelease();
  return v18;
}

void *sub_100B363EC(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2;
  uint64_t v66 = a2;
  uint64_t v65 = type metadata accessor for URL();
  uint64_t v5 = *(void *)(v65 - 8);
  __chkstk_darwin(v65);
  unint64_t v64 = (char *)&v48 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v63 = sub_10000588C((uint64_t *)&unk_1016607D0);
  __chkstk_darwin(v63);
  long long v62 = (char *)&v48 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v76 = type metadata accessor for OwnerPeerTrust();
  uint64_t v8 = *(void *)(v76 - 8);
  uint64_t v9 = __chkstk_darwin(v76);
  uint64_t v50 = (uint64_t)&v48 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9);
  uint64_t v48 = (uint64_t)&v48 - v11;
  uint64_t v12 = type metadata accessor for UUID();
  uint64_t v13 = *(void *)(v12 - 8);
  __chkstk_darwin(v12);
  uint64_t v15 = (char *)&v48 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = sub_10000588C(&qword_101638CF0);
  __chkstk_darwin(v16 - 8);
  uint64_t v18 = (char *)&v48 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v19 = *(void *)(a1 + 56);
  uint64_t v52 = a1 + 56;
  uint64_t v20 = 1 << *(unsigned char *)(a1 + 32);
  uint64_t v21 = -1;
  if (v20 < 64) {
    uint64_t v21 = ~(-1 << v20);
  }
  unint64_t v22 = v21 & v19;
  int64_t v53 = (unint64_t)(v20 + 63) >> 6;
  uint64_t v70 = v13;
  uint64_t v71 = (void (**)(char *, uint64_t, uint64_t, uint64_t))(v13 + 56);
  uint64_t v68 = v13 + 48;
  uint64_t v69 = v13 + 16;
  int v60 = (void (**)(char *, uint64_t, uint64_t))(v5 + 16);
  uint64_t v61 = (void (**)(char *, char *, uint64_t))(v13 + 32);
  unint64_t v58 = (void (**)(char *, uint64_t))(v13 + 8);
  uint64_t v59 = (void (**)(uint64_t, uint64_t))(v5 + 8);
  uint64_t v49 = v8;
  uint64_t v57 = (unsigned int (**)(uint64_t, uint64_t, uint64_t))(v8 + 48);
  uint64_t v72 = a1;
  uint64_t result = (void *)swift_bridgeObjectRetain();
  int64_t v24 = 0;
  uint64_t v51 = _swiftEmptyArrayStorage;
  uint64_t v56 = (void *)0x8000000101402BA0;
  uint64_t v67 = v18;
  uint64_t v55 = v12;
  unint64_t v54 = v15;
  while (1)
  {
    if (v22)
    {
      unint64_t v25 = __clz(__rbit64(v22));
      uint64_t v26 = (v22 - 1) & v22;
      unint64_t v27 = v25 | (v24 << 6);
      goto LABEL_19;
    }
    if (__OFADD__(v24++, 1))
    {
      __break(1u);
      goto LABEL_36;
    }
    if (v24 >= v53) {
      goto LABEL_33;
    }
    unint64_t v29 = *(void *)(v52 + 8 * v24);
    if (!v29) {
      break;
    }
LABEL_18:
    uint64_t v26 = (v29 - 1) & v29;
    unint64_t v27 = __clz(__rbit64(v29)) + (v24 << 6);
LABEL_19:
    uint64_t v31 = v70;
    (*(void (**)(char *, unint64_t, uint64_t))(v70 + 16))(v18, *(void *)(v72 + 48) + *(void *)(v70 + 72) * v27, v12);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v31 + 56))(v18, 0, 1, v12);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v31 + 48))(v18, 1, v12) == 1) {
      goto LABEL_34;
    }
    unint64_t v73 = v26;
    uint64_t v74 = v3;
    int64_t v75 = v24;
    (*v61)(v15, v18, v12);
    uint64_t v32 = *(void *)(v66 + 160);
    if (qword_101636958 != -1) {
      swift_once();
    }
    uint64_t v33 = v65;
    uint64_t v34 = sub_100010324(v65, (uint64_t)qword_10170DAB8);
    uint64_t v35 = (uint64_t)v64;
    (*v60)(v64, v34, v33);
    v36._countAndFlagsBits = 0xD000000000000014;
    v36._object = v56;
    prohibitAsyncContext(functionName:)(v36);
    uint64_t v77 = v76;
    sub_10000588C(&qword_1016607E0);
    uint64_t v37 = String.init<A>(describing:)();
    uint64_t v39 = v38;
    __chkstk_darwin(v40);
    uint64_t v15 = v54;
    *(&v48 - 6) = v32;
    *(&v48 - 5) = (uint64_t)v15;
    *(&v48 - 4) = v35;
    *(&v48 - 3) = v37;
    *(&v48 - 2) = v39;
    uint64_t v41 = (uint64_t)v62;
    uint64_t v42 = v74;
    OS_dispatch_queue.sync<A>(execute:)();
    uint64_t v3 = v42;
    swift_bridgeObjectRelease();
    (*v59)(v35, v33);
    uint64_t v12 = v55;
    (*v58)(v15, v55);
    if ((*v57)(v41, 1, v76) == 1)
    {
      uint64_t result = (void *)sub_10001DAB4(v41, (uint64_t *)&unk_1016607D0);
      uint64_t v18 = v67;
      int64_t v24 = v75;
      unint64_t v22 = v73;
    }
    else
    {
      uint64_t v43 = v48;
      sub_100B30DB4(v41, v48, (uint64_t (*)(void))type metadata accessor for OwnerPeerTrust);
      sub_100B30DB4(v43, v50, (uint64_t (*)(void))type metadata accessor for OwnerPeerTrust);
      char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      unint64_t v22 = v73;
      if ((isUniquelyReferenced_nonNull_native & 1) == 0) {
        uint64_t v51 = (void *)sub_100A6F84C(0, v51[2] + 1, 1, (unint64_t)v51);
      }
      uint64_t v18 = v67;
      unint64_t v46 = v51[2];
      unint64_t v45 = v51[3];
      if (v46 >= v45 >> 1) {
        uint64_t v51 = (void *)sub_100A6F84C(v45 > 1, v46 + 1, 1, (unint64_t)v51);
      }
      uint64_t v47 = v51;
      v51[2] = v46 + 1;
      uint64_t result = (void *)sub_100B30DB4(v50, (uint64_t)v47+ ((*(unsigned __int8 *)(v49 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v49 + 80))+ *(void *)(v49 + 72) * v46, (uint64_t (*)(void))type metadata accessor for OwnerPeerTrust);
      int64_t v24 = v75;
    }
  }
  int64_t v30 = v24 + 1;
  if (v24 + 1 >= v53) {
    goto LABEL_33;
  }
  unint64_t v29 = *(void *)(v52 + 8 * v30);
  if (v29) {
    goto LABEL_17;
  }
  int64_t v30 = v24 + 2;
  if (v24 + 2 >= v53) {
    goto LABEL_33;
  }
  unint64_t v29 = *(void *)(v52 + 8 * v30);
  if (v29) {
    goto LABEL_17;
  }
  int64_t v30 = v24 + 3;
  if (v24 + 3 >= v53) {
    goto LABEL_33;
  }
  unint64_t v29 = *(void *)(v52 + 8 * v30);
  if (v29) {
    goto LABEL_17;
  }
  int64_t v30 = v24 + 4;
  if (v24 + 4 >= v53)
  {
LABEL_33:
    (*v71)(v18, 1, 1, v12);
LABEL_34:
    swift_release();
    return v51;
  }
  unint64_t v29 = *(void *)(v52 + 8 * v30);
  if (v29)
  {
LABEL_17:
    int64_t v24 = v30;
    goto LABEL_18;
  }
  while (1)
  {
    int64_t v24 = v30 + 1;
    if (__OFADD__(v30, 1)) {
      break;
    }
    if (v24 >= v53) {
      goto LABEL_33;
    }
    unint64_t v29 = *(void *)(v52 + 8 * v24);
    ++v30;
    if (v29) {
      goto LABEL_18;
    }
  }
LABEL_36:
  __break(1u);
  return result;
}

void sub_100B36BFC(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2;
  uint64_t v45 = a2;
  uint64_t v5 = sub_10000588C((uint64_t *)&unk_10163AC90);
  __chkstk_darwin(v5 - 8);
  uint64_t v36 = (uint64_t)&v34 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v52 = type metadata accessor for UUID();
  uint64_t v7 = *(void *)(v52 - 8);
  uint64_t v8 = __chkstk_darwin(v52);
  uint64_t v43 = (char *)&v34 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8);
  unint64_t v46 = (char *)&v34 - v10;
  uint64_t v11 = sub_10000588C(&qword_101638CF0);
  __chkstk_darwin(v11 - 8);
  uint64_t v13 = (char *)&v34 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = *(void *)(a1 + 56);
  uint64_t v34 = a1 + 56;
  uint64_t v15 = 1 << *(unsigned char *)(a1 + 32);
  uint64_t v16 = -1;
  if (v15 < 64) {
    uint64_t v16 = ~(-1 << v15);
  }
  unint64_t v17 = v16 & v14;
  int64_t v35 = (unint64_t)(v15 + 63) >> 6;
  uint64_t v41 = v7;
  uint64_t v42 = (void (**)(char *, uint64_t, uint64_t, uint64_t))(v7 + 56);
  uint64_t v39 = v7 + 48;
  uint64_t v40 = v7 + 16;
  uint64_t v37 = (void (**)(char *, char *, uint64_t))(v7 + 32);
  uint64_t v38 = (void (**)(char *, uint64_t))(v7 + 8);
  uint64_t v44 = a1;
  swift_bridgeObjectRetain();
  int64_t v18 = 0;
  while (1)
  {
    if (v17)
    {
      unint64_t v19 = __clz(__rbit64(v17));
      v17 &= v17 - 1;
      unint64_t v20 = v19 | (v18 << 6);
      uint64_t v21 = (uint64_t)v43;
      uint64_t v22 = v52;
      goto LABEL_19;
    }
    BOOL v23 = __OFADD__(v18++, 1);
    uint64_t v21 = (uint64_t)v43;
    if (v23)
    {
      __break(1u);
      goto LABEL_35;
    }
    uint64_t v22 = v52;
    if (v18 >= v35) {
      goto LABEL_33;
    }
    unint64_t v24 = *(void *)(v34 + 8 * v18);
    if (!v24) {
      break;
    }
LABEL_18:
    unint64_t v17 = (v24 - 1) & v24;
    unint64_t v20 = __clz(__rbit64(v24)) + (v18 << 6);
LABEL_19:
    uint64_t v26 = v41;
    (*(void (**)(char *, unint64_t, uint64_t))(v41 + 16))(v13, *(void *)(v44 + 48) + *(void *)(v41 + 72) * v20, v22);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v26 + 56))(v13, 0, 1, v22);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v26 + 48))(v13, 1, v22) == 1) {
      goto LABEL_32;
    }
    uint64_t v27 = (uint64_t)v46;
    (*v37)(v46, v13, v22);
    sub_100ACCD98(v27, (uint64_t)&v47);
    if (!v48)
    {
      sub_10001DAB4((uint64_t)&v47, (uint64_t *)&unk_10163BBE0);
      (*v38)(v46, v22);
LABEL_32:
      swift_release();
      return;
    }
    sub_10001CEB0(&v47, (uint64_t)v49);
    uint64_t v29 = v50;
    uint64_t v28 = v51;
    sub_10001CD44(v49, v50);
    (*(void (**)(uint64_t))(*(void *)(*(void *)(v28 + 8) + 8) + 32))(v29);
    if (qword_101636CB8 != -1) {
      swift_once();
    }
    sub_1007B4970(v21, 0, 0, &v47);
    if (v3) {
      goto LABEL_36;
    }
    uint64_t v30 = v36;
    a1 = sub_100AF7A38(v36, v21, (void *)v47, 1);
    swift_bridgeObjectRelease();
    uint64_t v31 = *v38;
    uint64_t v32 = v21;
    uint64_t v33 = v52;
    (*v38)((char *)v32, v52);
    sub_10001DAB4(v30, (uint64_t *)&unk_10163AC90);
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)v49);
    v31(v46, v33);
    uint64_t v3 = 0;
    if ((a1 & 1) == 0) {
      goto LABEL_32;
    }
  }
  int64_t v25 = v18 + 1;
  if (v18 + 1 >= v35) {
    goto LABEL_33;
  }
  unint64_t v24 = *(void *)(v34 + 8 * v25);
  if (v24) {
    goto LABEL_17;
  }
  int64_t v25 = v18 + 2;
  if (v18 + 2 >= v35) {
    goto LABEL_33;
  }
  unint64_t v24 = *(void *)(v34 + 8 * v25);
  if (v24) {
    goto LABEL_17;
  }
  int64_t v25 = v18 + 3;
  if (v18 + 3 >= v35) {
    goto LABEL_33;
  }
  unint64_t v24 = *(void *)(v34 + 8 * v25);
  if (v24) {
    goto LABEL_17;
  }
  int64_t v25 = v18 + 4;
  if (v18 + 4 >= v35)
  {
LABEL_33:
    (*v42)(v13, 1, 1, v52);
    swift_release();
    return;
  }
  unint64_t v24 = *(void *)(v34 + 8 * v25);
  if (v24)
  {
LABEL_17:
    int64_t v18 = v25;
    goto LABEL_18;
  }
  while (1)
  {
    int64_t v18 = v25 + 1;
    if (__OFADD__(v25, 1)) {
      break;
    }
    if (v18 >= v35) {
      goto LABEL_33;
    }
    unint64_t v24 = *(void *)(v34 + 8 * v18);
    ++v25;
    if (v24) {
      goto LABEL_18;
    }
  }
LABEL_35:
  __break(1u);
LABEL_36:
  __break(1u);
}

void *sub_100B371A0(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = type metadata accessor for UUID();
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v8 = (char *)v27 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v29 = type metadata accessor for OwnerSharingCircle();
  uint64_t v9 = __chkstk_darwin(v29);
  uint64_t v33 = (uint64_t)v27 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9);
  uint64_t v36 = (uint64_t)v27 - v12;
  uint64_t result = _swiftEmptyArrayStorage;
  uint64_t v40 = _swiftEmptyArrayStorage;
  uint64_t v32 = *(void *)(a1 + 16);
  if (v32)
  {
    v27[1] = v2;
    uint64_t v28 = v6;
    uint64_t v14 = 0;
    unint64_t v30 = (*(unsigned __int8 *)(v11 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v11 + 80);
    uint64_t v31 = a1 + v30;
    uint64_t v34 = *(void *)(v11 + 72);
    uint64_t v37 = v6 + 16;
    uint64_t v38 = a2 + 56;
    uint64_t v15 = (void (**)(char *, uint64_t))(v6 + 8);
    uint64_t v39 = a2;
    do
    {
      uint64_t v35 = v14;
      sub_100B30D0C(v31 + v34 * v14, v36, (uint64_t (*)(void))type metadata accessor for OwnerSharingCircle);
      if (*(void *)(a2 + 16)
        && (sub_100B22DA4(&qword_10163BC60, (void (*)(uint64_t))&type metadata accessor for UUID),
            uint64_t v16 = dispatch thunk of Hashable._rawHashValue(seed:)(),
            uint64_t v17 = v39,
            uint64_t v18 = -1 << *(unsigned char *)(v39 + 32),
            unint64_t v19 = v16 & ~v18,
            ((*(void *)(v38 + ((v19 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v19) & 1) != 0))
      {
        uint64_t v20 = ~v18;
        uint64_t v21 = *(void *)(v28 + 72);
        uint64_t v22 = *(void (**)(char *, unint64_t, uint64_t))(v28 + 16);
        while (1)
        {
          v22(v8, *(void *)(v17 + 48) + v21 * v19, v5);
          sub_100B22DA4((unint64_t *)&qword_10163B8F0, (void (*)(uint64_t))&type metadata accessor for UUID);
          char v23 = dispatch thunk of static Equatable.== infix(_:_:)();
          (*v15)(v8, v5);
          if (v23) {
            break;
          }
          unint64_t v19 = (v19 + 1) & v20;
          uint64_t v17 = v39;
          if (((*(void *)(v38 + ((v19 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v19) & 1) == 0) {
            goto LABEL_10;
          }
        }
        sub_100B310AC(v36, (uint64_t (*)(void))type metadata accessor for OwnerSharingCircle);
      }
      else
      {
LABEL_10:
        sub_100B30DB4(v36, v33, (uint64_t (*)(void))type metadata accessor for OwnerSharingCircle);
        unint64_t v24 = v40;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        {
          sub_1000B721C(0, v24[2] + 1, 1);
          unint64_t v24 = v40;
        }
        unint64_t v26 = v24[2];
        unint64_t v25 = v24[3];
        if (v26 >= v25 >> 1)
        {
          sub_1000B721C(v25 > 1, v26 + 1, 1);
          unint64_t v24 = v40;
        }
        v24[2] = v26 + 1;
        sub_100B30DB4(v33, (uint64_t)v24 + v30 + v26 * v34, (uint64_t (*)(void))type metadata accessor for OwnerSharingCircle);
      }
      uint64_t v14 = v35 + 1;
      a2 = v39;
    }
    while (v35 + 1 != v32);
    return v40;
  }
  return result;
}

void *sub_100B375C4(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_10000588C(&qword_101638CF0);
  __chkstk_darwin(v4 - 8);
  long long v47 = (char *)&v38 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v48 = type metadata accessor for DispatchPredicate();
  uint64_t v6 = *(void *)(v48 - 8);
  __chkstk_darwin(v48);
  uint64_t v8 = (uint64_t *)((char *)&v38 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v50 = type metadata accessor for SharedBeaconRecord(0);
  uint64_t v9 = __chkstk_darwin(v50);
  uint64_t v49 = (uint64_t)&v38 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9);
  uint64_t v13 = (char *)&v38 - v12;
  uint64_t result = _swiftEmptyArrayStorage;
  uint64_t v51 = _swiftEmptyArrayStorage;
  uint64_t v15 = *(void *)(a1 + 16);
  if (v15)
  {
    uint64_t v46 = OBJC_IVAR____TtC12searchpartyd11BeaconStore_cachedBeaconRecordsQueue;
    uint64_t v41 = OBJC_IVAR____TtC12searchpartyd11BeaconStore_sharedBeaconUUIDMapper;
    unint64_t v16 = (*(unsigned __int8 *)(v11 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v11 + 80);
    uint64_t v17 = *(void *)(v11 + 72);
    uint64_t v18 = a1 + v16;
    unsigned int v45 = enum case for DispatchPredicate.onQueue(_:);
    uint64_t v44 = (void (**)(void *, void, uint64_t))(v6 + 104);
    unint64_t v42 = v16;
    uint64_t v43 = (uint64_t (**)(void *, uint64_t))(v6 + 8);
    uint64_t v39 = a2;
    while (1)
    {
      sub_100B30D0C(v18, (uint64_t)v13, type metadata accessor for SharedBeaconRecord);
      unint64_t v19 = *(void **)(a2 + v46);
      *uint64_t v8 = v19;
      uint64_t v20 = v48;
      (*v44)(v8, v45, v48);
      id v21 = v19;
      LOBYTE(v19) = _dispatchPreconditionTest(_:)();
      uint64_t result = (void *)(*v43)(v8, v20);
      if ((v19 & 1) == 0) {
        break;
      }
      if (v13[*(int *)(v50 + 64)] != 1) {
        goto LABEL_12;
      }
      uint64_t v22 = *(void *)(a2 + v41);
      uint64_t v23 = *(int *)(v50 + 20);
      swift_beginAccess();
      uint64_t v24 = *(void *)(v22 + 24);
      if (*(void *)(v24 + 16) && (unint64_t v25 = sub_1007240CC((uint64_t)&v13[v23]), (v26 & 1) != 0))
      {
        unint64_t v27 = v25;
        uint64_t v40 = *(void *)(v24 + 56);
        uint64_t v28 = type metadata accessor for UUID();
        uint64_t v29 = *(void *)(v28 - 8);
        uint64_t v30 = v29;
        uint64_t v31 = v40 + *(void *)(v29 + 72) * v27;
        uint64_t v32 = v47;
        (*(void (**)(char *, uint64_t, uint64_t))(v29 + 16))(v47, v31, v28);
        (*(void (**)(char *, void, uint64_t, uint64_t))(v30 + 56))(v32, 0, 1, v28);
        a2 = v39;
      }
      else
      {
        uint64_t v28 = type metadata accessor for UUID();
        (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v28 - 8) + 56))(v47, 1, 1, v28);
      }
      swift_endAccess();
      type metadata accessor for UUID();
      uint64_t v33 = (uint64_t)v47;
      int v34 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(void *)(v28 - 8) + 48))(v47, 1, v28);
      sub_10001DAB4(v33, &qword_101638CF0);
      if (v34 != 1)
      {
        sub_100B310AC((uint64_t)v13, type metadata accessor for SharedBeaconRecord);
      }
      else
      {
LABEL_12:
        sub_100B30DB4((uint64_t)v13, v49, type metadata accessor for SharedBeaconRecord);
        uint64_t v35 = v51;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        {
          sub_1000B7404(0, v35[2] + 1, 1);
          uint64_t v35 = v51;
        }
        unint64_t v37 = v35[2];
        unint64_t v36 = v35[3];
        if (v37 >= v36 >> 1)
        {
          sub_1000B7404(v36 > 1, v37 + 1, 1);
          uint64_t v35 = v51;
        }
        v35[2] = v37 + 1;
        sub_100B30DB4(v49, (uint64_t)v35 + v42 + v37 * v17, type metadata accessor for SharedBeaconRecord);
      }
      v18 += v17;
      if (!--v15) {
        return v51;
      }
    }
    __break(1u);
  }
  return result;
}

uint64_t sub_100B37AEC(uint64_t a1, uint64_t a2)
{
  uint64_t v51 = a2;
  uint64_t v4 = sub_10000588C(&qword_10163B9F0);
  __chkstk_darwin(v4 - 8);
  uint64_t v50 = (uint64_t)v38 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v49 = type metadata accessor for OwnedBeaconRecord();
  uint64_t v6 = *(void *)(v49 - 8);
  __chkstk_darwin(v49);
  uint64_t v39 = (uint64_t)v38 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v54 = type metadata accessor for UUID();
  uint64_t v8 = *(void *)(v54 - 8);
  uint64_t v9 = __chkstk_darwin(v54);
  int64_t v53 = (char *)v38 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9);
  uint64_t v48 = (char *)v38 - v11;
  uint64_t v12 = sub_10000588C(&qword_10163A918);
  uint64_t v46 = *(void *)(v12 - 8);
  uint64_t v47 = v12;
  __chkstk_darwin(v12);
  uint64_t v14 = (void *)((char *)v38 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0));
  int64_t v15 = *(void *)(a1 + 16);
  unint64_t v16 = _swiftEmptyArrayStorage;
  if (!v15) {
    return (uint64_t)v16;
  }
  v38[1] = v2;
  uint64_t v55 = _swiftEmptyArrayStorage;
  sub_1000B7BF4(0, v15, 0);
  uint64_t result = sub_10115FE18(a1);
  uint64_t v18 = result;
  uint64_t v20 = v19;
  int v22 = v21 & 1;
  uint64_t v44 = v8;
  uint64_t v45 = a1 + 56;
  uint64_t v42 = v8 + 32;
  uint64_t v43 = v8 + 16;
  uint64_t v40 = (void (**)(char *, uint64_t))(v8 + 8);
  uint64_t v41 = (unsigned int (**)(uint64_t, uint64_t, uint64_t))(v6 + 48);
  while ((v18 & 0x8000000000000000) == 0 && v18 < 1 << *(unsigned char *)(a1 + 32))
  {
    if (((*(void *)(v45 + (((unint64_t)v18 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v18) & 1) == 0) {
      goto LABEL_18;
    }
    if (*(_DWORD *)(a1 + 36) != v20) {
      goto LABEL_19;
    }
    int v52 = v22;
    uint64_t v23 = a1;
    uint64_t v24 = *(void *)(a1 + 48) + *(void *)(v8 + 72) * v18;
    unint64_t v25 = v14;
    char v26 = v48;
    uint64_t v27 = v54;
    (*(void (**)(char *, uint64_t, uint64_t))(v8 + 16))(v48, v24, v54);
    uint64_t v28 = v26;
    uint64_t v14 = v25;
    (*(void (**)(char *, char *, uint64_t))(v8 + 32))(v53, v28, v27);
    uint64_t v29 = (uint64_t)v25 + *(int *)(v47 + 48);
    uint64_t v30 = v50;
    sub_100ACD178(v50);
    if ((*v41)(v30, 1, v49) == 1)
    {
      sub_10001DAB4(v30, &qword_10163B9F0);
      static Date.distantPast.getter();
      uint64_t v31 = 0;
    }
    else
    {
      uint64_t v32 = v30;
      uint64_t v33 = v39;
      sub_100B30DB4(v32, v39, (uint64_t (*)(void))type metadata accessor for OwnedBeaconRecord);
      uint64_t v31 = sub_100AFB4FC(v29, v33);
      sub_100B310AC(v33, (uint64_t (*)(void))type metadata accessor for OwnedBeaconRecord);
    }
    *unint64_t v25 = v31;
    (*v40)(v53, v54);
    unint64_t v16 = v55;
    a1 = v23;
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    {
      sub_1000B7BF4(0, v16[2] + 1, 1);
      unint64_t v16 = v55;
    }
    unint64_t v35 = v16[2];
    unint64_t v34 = v16[3];
    if (v35 >= v34 >> 1)
    {
      sub_1000B7BF4(v34 > 1, v35 + 1, 1);
      unint64_t v16 = v55;
    }
    v16[2] = v35 + 1;
    sub_10001D608((uint64_t)v14, (uint64_t)v16+ ((*(unsigned __int8 *)(v46 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v46 + 80))+ *(void *)(v46 + 72) * v35, &qword_10163A918);
    uint64_t result = sub_10052CB9C(v18, v20, v52 & 1, v23);
    uint64_t v18 = result;
    uint64_t v20 = v36;
    int v22 = v37 & 1;
    --v15;
    uint64_t v8 = v44;
    if (!v15)
    {
      sub_1001A1CB8(result, v36, v22);
      return (uint64_t)v16;
    }
  }
  __break(1u);
LABEL_18:
  __break(1u);
LABEL_19:
  __break(1u);
  return result;
}

void *sub_100B37FD8(uint64_t a1, int a2, int a3, int a4, uint64_t a5)
{
  uint64_t v43 = a5;
  int v40 = a3;
  int v41 = a4;
  int v39 = a2;
  uint64_t v6 = sub_10000588C(&qword_10163BB20);
  __chkstk_darwin(v6 - 8);
  uint64_t v8 = &v38[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v9 = type metadata accessor for OwnedBeaconGroup(0);
  uint64_t v42 = *(void *)(v9 - 8);
  __chkstk_darwin(v9);
  uint64_t v11 = &v38[-((v10 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v12 = sub_10000588C(&qword_101638CF0);
  __chkstk_darwin(v12 - 8);
  uint64_t v14 = &v38[-((v13 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v15 = type metadata accessor for UUID();
  uint64_t v44 = *(void *)(v15 - 8);
  uint64_t v45 = v15;
  __chkstk_darwin(v15);
  uint64_t v17 = &v38[-((v16 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v18 = sub_10000588C(&qword_10163B9F0);
  __chkstk_darwin(v18 - 8);
  uint64_t v20 = &v38[-((v19 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v21 = type metadata accessor for OwnedBeaconRecord();
  uint64_t v22 = *(void *)(v21 - 8);
  uint64_t v23 = __chkstk_darwin(v21);
  unint64_t v25 = &v38[-((v24 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v47[3] = v23;
  v47[4] = sub_100B22DA4(&qword_101638DD0, (void (*)(uint64_t))type metadata accessor for OwnedBeaconRecord);
  char v26 = sub_10001D958(v47);
  sub_100B30D0C(a1, (uint64_t)v26, (uint64_t (*)(void))type metadata accessor for OwnedBeaconRecord);
  sub_10001D010((uint64_t)v47, (uint64_t)v46);
  sub_10000588C((uint64_t *)&unk_10164DBF0);
  int v27 = swift_dynamicCast();
  uint64_t v28 = *(void (**)(unsigned char *, uint64_t, uint64_t, uint64_t))(v22 + 56);
  if (v27)
  {
    uint64_t v29 = v43;
    v28(v20, 0, 1, v21);
    sub_100B30DB4((uint64_t)v20, (uint64_t)v25, (uint64_t (*)(void))type metadata accessor for OwnedBeaconRecord);
    sub_10001D074((uint64_t)&v25[*(int *)(v21 + 28)], (uint64_t)v14, &qword_101638CF0);
    uint64_t v30 = v44;
    if ((*(unsigned int (**)(unsigned char *, uint64_t, uint64_t))(v44 + 48))(v14, 1, v45) == 1)
    {
      sub_10001DAB4((uint64_t)v14, &qword_101638CF0);
    }
    else
    {
      (*(void (**)(unsigned char *, unsigned char *, uint64_t))(v30 + 32))(v17, v14, v45);
      sub_100AE75E0((uint64_t)v17, (uint64_t)v8);
      if ((*(unsigned int (**)(unsigned char *, uint64_t, uint64_t))(v42 + 48))(v8, 1, v9) != 1)
      {
        sub_100B30DB4((uint64_t)v8, (uint64_t)v11, type metadata accessor for OwnedBeaconGroup);
        uint64_t v33 = v30;
        unint64_t v34 = sub_100B32900((uint64_t)v25, v39 & 1, v40 & 1, v41 & 1);
        uint64_t v35 = sub_1004D1434();
        swift_retain();
        uint64_t v36 = sub_100B33F6C(v35, v29);
        swift_bridgeObjectRelease();
        swift_release();
        uint64_t v37 = sub_100B32F60((uint64_t)v36, (uint64_t)v34);
        swift_bridgeObjectRelease();
        uint64_t v31 = sub_100A9A618(v37);
        swift_bridgeObjectRelease();
        sub_100B310AC((uint64_t)v11, type metadata accessor for OwnedBeaconGroup);
        (*(void (**)(unsigned char *, uint64_t))(v33 + 8))(v17, v45);
        sub_100B310AC((uint64_t)v25, (uint64_t (*)(void))type metadata accessor for OwnedBeaconRecord);
        goto LABEL_9;
      }
      sub_10001DAB4((uint64_t)v8, &qword_10163BB20);
      (*(void (**)(unsigned char *, uint64_t))(v30 + 8))(v17, v45);
    }
    sub_100B310AC((uint64_t)v25, (uint64_t (*)(void))type metadata accessor for OwnedBeaconRecord);
  }
  else
  {
    v28(v20, 1, 1, v21);
    sub_10001DAB4((uint64_t)v20, &qword_10163B9F0);
  }
  uint64_t v31 = _swiftEmptyArrayStorage;
LABEL_9:
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)v47);
  return v31;
}

void *sub_100B38580(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_10000588C(&qword_101638CF0);
  __chkstk_darwin(v4 - 8);
  uint64_t v6 = (char *)&v43 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for UUID();
  uint64_t v8 = __chkstk_darwin(v7);
  uint64_t v56 = (char *)&v43 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8);
  uint64_t v12 = (char *)&v43 - v11;
  uint64_t v13 = *(void *)(a1 + 56);
  uint64_t v50 = a1 + 56;
  uint64_t v14 = 1 << *(unsigned char *)(a1 + 32);
  uint64_t v61 = &_swiftEmptySetSingleton;
  if (v14 < 64) {
    uint64_t v15 = ~(-1 << v14);
  }
  else {
    uint64_t v15 = -1;
  }
  unint64_t v16 = v15 & v13;
  int64_t v51 = (unint64_t)(v14 + 63) >> 6;
  uint64_t v17 = (unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48);
  uint64_t v49 = (void (**)(char *, char *, uint64_t))(v10 + 32);
  uint64_t v55 = v10 + 16;
  uint64_t v44 = v10;
  uint64_t v57 = (void (**)(char *, uint64_t))(v10 + 8);
  swift_bridgeObjectRetain();
  int64_t v18 = 0;
  uint64_t v19 = 0;
  uint64_t v47 = v6;
  uint64_t v48 = a1;
  unint64_t v58 = v12;
  uint64_t v45 = v17;
  uint64_t v46 = a2;
  if (v16) {
    goto LABEL_7;
  }
LABEL_8:
  if (!__OFADD__(v18++, 1))
  {
    if (v18 < v51)
    {
      unint64_t v22 = *(void *)(v50 + 8 * v18);
      if (v22)
      {
LABEL_18:
        uint64_t v54 = (v22 - 1) & v22;
        for (unint64_t i = __clz(__rbit64(v22)) + (v18 << 6); ; unint64_t i = __clz(__rbit64(v16)) | (v18 << 6))
        {
          uint64_t v24 = *(void *)(*(void *)(a1 + 48) + 8 * i);
          sub_10001D074(a2, (uint64_t)v6, &qword_101638CF0);
          if ((*v17)(v6, 1, v7) == 1) {
            break;
          }
          int64_t v52 = v18;
          (*v49)(v12, v6, v7);
          uint64_t v25 = *(void *)(v24 + 16);
          uint64_t v53 = v19;
          if (!v25)
          {
            swift_bridgeObjectRetain();
LABEL_28:
            uint64_t v12 = v58;
            (*v57)(v58, v7);
            uint64_t v6 = v47;
            a1 = v48;
            a2 = v46;
            uint64_t v17 = v45;
            int64_t v18 = v52;
            uint64_t v19 = v53;
LABEL_29:
            sub_100A9D3A0(v24, (uint64_t)&v61);
            swift_bridgeObjectRelease();
            unint64_t v16 = v54;
            if (!v54) {
              goto LABEL_8;
            }
            goto LABEL_7;
          }
          sub_100B22DA4(&qword_10163BC60, (void (*)(uint64_t))&type metadata accessor for UUID);
          swift_bridgeObjectRetain();
          uint64_t v26 = dispatch thunk of Hashable._rawHashValue(seed:)();
          uint64_t v27 = -1 << *(unsigned char *)(v24 + 32);
          unint64_t v28 = v26 & ~v27;
          if (((*(void *)(v24 + 56 + ((v28 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v28) & 1) == 0) {
            goto LABEL_28;
          }
          uint64_t v29 = ~v27;
          uint64_t v30 = *(void *)(v44 + 72);
          uint64_t v31 = *(void (**)(char *, unint64_t, uint64_t))(v44 + 16);
          while (1)
          {
            uint64_t v32 = v56;
            v31(v56, *(void *)(v24 + 48) + v30 * v28, v7);
            sub_100B22DA4((unint64_t *)&qword_10163B8F0, (void (*)(uint64_t))&type metadata accessor for UUID);
            char v33 = dispatch thunk of static Equatable.== infix(_:_:)();
            unint64_t v34 = *v57;
            (*v57)(v32, v7);
            if (v33) {
              break;
            }
            unint64_t v28 = (v28 + 1) & v29;
            if (((*(void *)(v24 + 56 + ((v28 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v28) & 1) == 0) {
              goto LABEL_28;
            }
          }
          sub_100DD0C54(v60, v24);
          swift_bridgeObjectRelease();
          uint64_t v12 = v58;
          v34(v58, v7);
          uint64_t v6 = v47;
          a1 = v48;
          a2 = v46;
          uint64_t v17 = v45;
          int64_t v18 = v52;
          uint64_t v19 = v53;
          unint64_t v16 = v54;
          if (!v54) {
            goto LABEL_8;
          }
LABEL_7:
          uint64_t v54 = (v16 - 1) & v16;
        }
        swift_bridgeObjectRetain();
        sub_10001DAB4((uint64_t)v6, &qword_101638CF0);
        goto LABEL_29;
      }
      int64_t v23 = v18 + 1;
      if (v18 + 1 < v51)
      {
        unint64_t v22 = *(void *)(v50 + 8 * v23);
        if (v22) {
          goto LABEL_17;
        }
        int64_t v23 = v18 + 2;
        if (v18 + 2 >= v51) {
          goto LABEL_35;
        }
        unint64_t v22 = *(void *)(v50 + 8 * v23);
        if (v22)
        {
LABEL_17:
          int64_t v18 = v23;
          goto LABEL_18;
        }
        int64_t v23 = v18 + 3;
        if (v18 + 3 < v51)
        {
          unint64_t v22 = *(void *)(v50 + 8 * v23);
          if (v22) {
            goto LABEL_17;
          }
          while (1)
          {
            int64_t v18 = v23 + 1;
            if (__OFADD__(v23, 1)) {
              goto LABEL_40;
            }
            if (v18 >= v51) {
              break;
            }
            unint64_t v22 = *(void *)(v50 + 8 * v18);
            ++v23;
            if (v22) {
              goto LABEL_18;
            }
          }
        }
      }
    }
LABEL_35:
    swift_release();
    if (qword_101636F60 == -1) {
      goto LABEL_36;
    }
    goto LABEL_41;
  }
  __break(1u);
LABEL_40:
  __break(1u);
LABEL_41:
  swift_once();
LABEL_36:
  uint64_t v35 = type metadata accessor for Logger();
  sub_100010324(v35, (uint64_t)qword_10170EA18);
  uint64_t v36 = Logger.logObject.getter();
  os_log_type_t v37 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v36, v37))
  {
    uint64_t v38 = (uint8_t *)swift_slowAlloc();
    v60[0] = swift_slowAlloc();
    *(_DWORD *)uint64_t v38 = 136315138;
    swift_beginAccess();
    swift_bridgeObjectRetain();
    sub_10000588C((uint64_t *)&unk_101653DC0);
    sub_100062734(&qword_101659310, (uint64_t *)&unk_101653DC0);
    uint64_t v39 = Set.description.getter();
    unint64_t v41 = v40;
    swift_bridgeObjectRelease();
    uint64_t v59 = sub_1008FA0F0(v39, v41, v60);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v36, v37, "Multipart Status after separating non-primary parts: %s", v38, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }

  swift_beginAccess();
  return v61;
}

id sub_100B38C7C()
{
  id v0 = [objc_allocWithZone((Class)SPBeaconGroup) init];
  [v0 setVersion:-1];
  Class isa = UUID._bridgeToObjectiveC()().super.isa;
  [v0 setIdentifier:isa];

  NSString v2 = String._bridgeToObjectiveC()();
  [v0 setName:v2];

  [v0 setClassification:0];
  [v0 setIsPairingComplete:1];
  [v0 setIsFindMyNetworkEnabled:0];
  [v0 setStatus:0];
  type metadata accessor for SharedBeaconGroup();
  type metadata accessor for UUID();
  sub_100B22DA4(&qword_10163BC60, (void (*)(uint64_t))&type metadata accessor for UUID);
  Class v3 = Set._bridgeToObjectiveC()().super.isa;
  [v0 setBeaconIdentifiers:v3];

  [v0 setIsConnected:0];
  return v0;
}

uint64_t sub_100B38DFC(uint64_t a1, void *a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v26 = *(void *)(v6 - 8);
  uint64_t v27 = v6;
  __chkstk_darwin(v6);
  uint64_t v24 = (char *)&v21 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v25 = type metadata accessor for DispatchQoS();
  uint64_t v23 = *(void *)(v25 - 8);
  __chkstk_darwin(v25);
  unint64_t v22 = (char *)&v21 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = swift_allocObject();
  *(void *)(v9 + 16) = a2;
  *(void *)(v9 + 24) = a3;
  swift_retain();
  uint64_t v21 = a3;
  uint64_t v10 = swift_retain();
  uint64_t v11 = sub_100AB24F0(v10);
  uint64_t v12 = (void *)swift_allocObject();
  v12[2] = sub_100B56B1C;
  v12[3] = v9;
  v12[4] = a1;
  swift_retain_n();
  uint64_t v28 = a1;
  swift_retain_n();
  QueueSynchronizer.conditionalSync<A>(_:)();
  int v13 = LOBYTE(aBlock[0]);
  static os_log_type_t.default.getter();
  if (qword_101637270 != -1) {
    swift_once();
  }
  sub_10000588C((uint64_t *)&unk_10163AD00);
  uint64_t v14 = swift_allocObject();
  *(_OWORD *)(v14 + 16) = xmmword_101342130;
  *(void *)(v14 + 56) = &type metadata for Bool;
  *(void *)(v14 + 64) = &protocol witness table for Bool;
  *(unsigned char *)(v14 + 32) = v13;
  os_log(_:dso:log:_:_:)();
  swift_bridgeObjectRelease();
  static os_log_type_t.default.getter();
  os_log(_:dso:log:_:_:)();
  if (v13)
  {
    sub_10009F1B0(a2, v21);
    swift_release();
    swift_release();
    swift_release_n();
  }
  else
  {
    static os_log_type_t.default.getter();
    os_log(_:dso:log:_:_:)();
    uint64_t v21 = *(void *)(v11 + 64);
    uint64_t v15 = (void *)swift_allocObject();
    v15[2] = v11;
    v15[3] = sub_100B565F4;
    v15[4] = v12;
    aBlock[4] = sub_100B64438;
    aBlock[5] = v15;
    aBlock[0] = _NSConcreteStackBlock;
    aBlock[1] = 1107296256;
    aBlock[2] = sub_1004B5480;
    aBlock[3] = &unk_1015E7FE8;
    unint64_t v16 = _Block_copy(aBlock);
    swift_retain();
    swift_retain();
    uint64_t v17 = v22;
    static DispatchQoS.unspecified.getter();
    uint64_t v29 = _swiftEmptyArrayStorage;
    sub_100B22DA4((unint64_t *)&qword_10163B7E0, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
    sub_10000588C((uint64_t *)&unk_10163F350);
    sub_100062734((unint64_t *)&qword_10163B7F0, (uint64_t *)&unk_10163F350);
    int64_t v18 = v24;
    uint64_t v19 = v27;
    dispatch thunk of SetAlgebra.init<A>(_:)();
    OS_dispatch_queue.async(group:qos:flags:execute:)();
    _Block_release(v16);
    (*(void (**)(char *, uint64_t))(v26 + 8))(v18, v19);
    (*(void (**)(char *, uint64_t))(v23 + 8))(v17, v25);
    swift_release();
    swift_release();
    swift_release_n();
    swift_release();
  }
  return swift_release();
}

void sub_100B39338(uint64_t a1, int a2, uint64_t a3, void *a4, uint64_t a5)
{
  uint64_t v42 = a3;
  uint64_t v43 = a1;
  uint64_t v8 = sub_10000588C(&qword_10163C650);
  __chkstk_darwin(v8);
  uint64_t v10 = (char *)v38 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = type metadata accessor for OwnedBeaconGroup(0);
  __chkstk_darwin(v11 - 8);
  int v13 = (char *)v38 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = swift_allocObject();
  *(void *)(v14 + 16) = a4;
  *(void *)(v14 + 24) = a5;
  uint64_t v15 = qword_101636F50;
  unint64_t v41 = a4;
  swift_retain();
  if (v15 != -1) {
    swift_once();
  }
  uint64_t v16 = type metadata accessor for Logger();
  sub_100010324(v16, (uint64_t)qword_10170E9E8);
  uint64_t v17 = Logger.logObject.getter();
  os_log_type_t v18 = static os_log_type_t.default.getter();
  BOOL v19 = os_log_type_enabled(v17, v18);
  uint64_t v40 = v8;
  if (v19)
  {
    uint64_t v20 = (uint8_t *)swift_slowAlloc();
    *(_DWORD *)uint64_t v20 = 67109120;
    LODWORD(v44) = a2 & 1;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl((void *)&_mh_execute_header, v17, v18, "Saving record. Disk First? %{BOOL}d", v20, 8u);
    swift_slowDealloc();
  }

  if (qword_101637188 != -1) {
    swift_once();
  }
  uint64_t v21 = (void *)qword_10170EE68;
  id v22 = [self sharedInstance];
  unsigned int v23 = [v22 isInternalBuild];

  if (v23)
  {
    NSString v24 = String._bridgeToObjectiveC()();
    unsigned int v23 = [v21 BOOLForKey:v24];
  }
  id v25 = [self defaultStore];
  if (v25)
  {
    uint64_t v26 = v25;
    id v27 = [v25 aa_primaryAppleAccount];

    if (v27 && (v27, ((a2 | v23) & 1) == 0))
    {
      sub_100AC3F6C(v43, (uint64_t)sub_100B5C0D8, v14);
    }
    else
    {
      uint64_t v39 = a5;
      uint64_t v28 = sub_100B30D0C(v43, (uint64_t)v13, type metadata accessor for OwnedBeaconGroup);
      __chkstk_darwin(v28);
      v38[-2] = v29;
      v38[-1] = v13;
      OS_dispatch_queue.sync<A>(execute:)();
      v38[1] = v14;
      uint64_t v30 = Logger.logObject.getter();
      os_log_type_t v31 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v30, v31))
      {
        uint64_t v32 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)uint64_t v32 = 0;
        _os_log_impl((void *)&_mh_execute_header, v30, v31, "Saved LocalStorageBacked record. Calling completion.", v32, 2u);
        swift_slowDealloc();
      }

      sub_100B30D0C(v43, (uint64_t)v10, type metadata accessor for OwnedBeaconGroup);
      swift_storeEnumTagMultiPayload();
      sub_100BF82C8((uint64_t)v10, v41, v39);
      sub_10001DAB4((uint64_t)v10, &qword_10163C650);
      if (((v27 != 0) & ~v23) != 0)
      {
        uint64_t v36 = type metadata accessor for Transaction();
        __chkstk_darwin(v36);
        v38[-4] = v42;
        v38[-3] = v37;
        v38[-2] = v13;
        static Transaction.named<A>(_:with:)();
      }
      else
      {
        char v33 = Logger.logObject.getter();
        os_log_type_t v34 = static os_log_type_t.info.getter();
        if (os_log_type_enabled(v33, v34))
        {
          uint64_t v35 = swift_slowAlloc();
          *(_DWORD *)uint64_t v35 = 67109376;
          LODWORD(v44) = v23;
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          *(_WORD *)(v35 + 8) = 1024;
          LODWORD(v44) = v27 != 0;
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          _os_log_impl((void *)&_mh_execute_header, v33, v34, "Skipping save to cloud. skipCloudSave: %{BOOL}d, isiCloudSignedIn %{BOOL}d", (uint8_t *)v35, 0xEu);
          swift_slowDealloc();
        }
      }
      sub_100B310AC((uint64_t)v13, type metadata accessor for OwnedBeaconGroup);
    }
    swift_release();
  }
  else
  {
    swift_release();

    __break(1u);
  }
}

void sub_100B39ADC(uint64_t a1, int a2, uint64_t a3, void *a4, uint64_t a5)
{
  uint64_t v40 = a3;
  uint64_t v41 = a1;
  uint64_t v8 = sub_10000588C(&qword_10163C650);
  __chkstk_darwin(v8);
  uint64_t v10 = (char *)v38 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = type metadata accessor for OwnedBeaconGroup(0);
  __chkstk_darwin(v11 - 8);
  int v13 = (char *)v38 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = swift_allocObject();
  *(void *)(v14 + 16) = a4;
  *(void *)(v14 + 24) = a5;
  uint64_t v15 = qword_101636F50;
  uint64_t v39 = a4;
  swift_retain();
  if (v15 != -1) {
    swift_once();
  }
  uint64_t v16 = type metadata accessor for Logger();
  sub_100010324(v16, (uint64_t)qword_10170E9E8);
  uint64_t v17 = Logger.logObject.getter();
  os_log_type_t v18 = static os_log_type_t.default.getter();
  BOOL v19 = os_log_type_enabled(v17, v18);
  v38[3] = v8;
  if (v19)
  {
    uint64_t v20 = (uint8_t *)swift_slowAlloc();
    *(_DWORD *)uint64_t v20 = 67109120;
    LODWORD(v42) = a2 & 1;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl((void *)&_mh_execute_header, v17, v18, "Saving record. Disk First? %{BOOL}d", v20, 8u);
    swift_slowDealloc();
  }

  if (qword_101637188 != -1) {
    swift_once();
  }
  uint64_t v21 = (void *)qword_10170EE68;
  id v22 = [self sharedInstance];
  unsigned int v23 = [v22 isInternalBuild];

  if (v23)
  {
    NSString v24 = String._bridgeToObjectiveC()();
    unsigned int v23 = [v21 BOOLForKey:v24];
  }
  id v25 = [self defaultStore];
  if (v25)
  {
    uint64_t v26 = v25;
    id v27 = [v25 aa_primaryAppleAccount];

    if (v27 && (v27, ((a2 | v23) & 1) == 0))
    {
      sub_100AC3F6C(v41, (uint64_t)sub_100B5C0CC, v14);
    }
    else
    {
      void v38[2] = a5;
      uint64_t v28 = sub_100B30D0C(v41, (uint64_t)v13, type metadata accessor for OwnedBeaconGroup);
      __chkstk_darwin(v28);
      v38[-2] = v29;
      v38[-1] = v13;
      OS_dispatch_queue.sync<A>(execute:)();
      v38[1] = v14;
      uint64_t v30 = Logger.logObject.getter();
      os_log_type_t v31 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v30, v31))
      {
        uint64_t v32 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)uint64_t v32 = 0;
        _os_log_impl((void *)&_mh_execute_header, v30, v31, "Saved LocalStorageBacked record. Calling completion.", v32, 2u);
        swift_slowDealloc();
      }

      sub_100B30D0C(v41, (uint64_t)v10, type metadata accessor for OwnedBeaconGroup);
      swift_storeEnumTagMultiPayload();
      sub_100BFB574((uint64_t)v10, v39);
      sub_10001DAB4((uint64_t)v10, &qword_10163C650);
      if (((v27 != 0) & ~v23) != 0)
      {
        uint64_t v36 = type metadata accessor for Transaction();
        __chkstk_darwin(v36);
        v38[-4] = v40;
        v38[-3] = v37;
        v38[-2] = v13;
        static Transaction.named<A>(_:with:)();
      }
      else
      {
        char v33 = Logger.logObject.getter();
        os_log_type_t v34 = static os_log_type_t.info.getter();
        if (os_log_type_enabled(v33, v34))
        {
          uint64_t v35 = swift_slowAlloc();
          *(_DWORD *)uint64_t v35 = 67109376;
          LODWORD(v42) = v23;
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          *(_WORD *)(v35 + 8) = 1024;
          LODWORD(v42) = v27 != 0;
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          _os_log_impl((void *)&_mh_execute_header, v33, v34, "Skipping save to cloud. skipCloudSave: %{BOOL}d, isiCloudSignedIn %{BOOL}d", (uint8_t *)v35, 0xEu);
          swift_slowDealloc();
        }
      }
      sub_100B310AC((uint64_t)v13, type metadata accessor for OwnedBeaconGroup);
    }
    swift_release();
  }
  else
  {
    swift_release();

    __break(1u);
  }
}

uint64_t sub_100B3A280(uint64_t a1, uint64_t a2, void (*a3)(uint64_t), uint64_t a4)
{
  uint64_t v111 = (uint64_t (*)(void))type metadata accessor for BeaconStoreFileRecord();
  uint64_t v108 = *((void *)v111 - 1);
  __chkstk_darwin(v111);
  uint64_t v105 = (char *)&v91 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v110 = type metadata accessor for URL();
  uint64_t v9 = *(void *)(v110 - 8);
  uint64_t v10 = __chkstk_darwin(v110);
  uint64_t v104 = (char *)&v91 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v10);
  uint64_t v96 = (char *)&v91 - v12;
  int v13 = (void *)type metadata accessor for UUID();
  uint64_t v113 = (uint64_t (*)())*(v13 - 1);
  id v114 = v13;
  uint64_t v14 = __chkstk_darwin(v13);
  uint64_t v93 = (uint64_t)&v91 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = __chkstk_darwin(v14);
  os_log_type_t v18 = (char *)&v91 - v17;
  __chkstk_darwin(v16);
  uint64_t v95 = (char *)&v91 - v19;
  uint64_t v20 = sub_10000588C(&qword_1016426E8);
  __chkstk_darwin(v20);
  uint64_t v94 = (char *)&v91 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v22 = type metadata accessor for OwnedDeviceKeyRecord();
  uint64_t v100 = *(void *)(v22 - 8);
  uint64_t v23 = __chkstk_darwin(v22);
  uint64_t v101 = v24;
  uint64_t v102 = (char *)&v91 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v23);
  uint64_t v26 = (void (*)(uint64_t))((char *)&v91 - v25);
  uint64_t v27 = swift_allocObject();
  uint64_t v106 = a3;
  uint64_t v107 = a4;
  *(void *)(v27 + 16) = a3;
  *(void *)(v27 + 24) = a4;
  uint64_t v109 = v27;
  swift_retain();
  static os_log_type_t.default.getter();
  if (qword_101637260 != -1) {
    swift_once();
  }
  uint64_t v98 = sub_10000588C((uint64_t *)&unk_10163AD00);
  uint64_t v28 = swift_allocObject();
  long long v97 = xmmword_101342130;
  *(_OWORD *)(v28 + 16) = xmmword_101342130;
  uint64_t v115 = a1;
  sub_100B30D0C(a1, (uint64_t)v26, (uint64_t (*)(void))type metadata accessor for OwnedDeviceKeyRecord);
  uint64_t v112 = v22;
  uint64_t v29 = String.init<A>(describing:)();
  uint64_t v31 = v30;
  *(void *)(v28 + 56) = &type metadata for String;
  unint64_t v99 = sub_10000B4CC();
  *(void *)(v28 + 64) = v99;
  *(void *)(v28 + 32) = v29;
  *(void *)(v28 + 40) = v31;
  os_log(_:dso:log:_:_:)();
  swift_bridgeObjectRelease();
  if (qword_101637188 != -1) {
    swift_once();
  }
  uint64_t v32 = (void *)qword_10170EE68;
  id v33 = [self sharedInstance];
  unsigned int v34 = [v33 isInternalBuild];

  if (v34)
  {
    NSString v35 = String._bridgeToObjectiveC()();
    unsigned int v34 = [v32 BOOLForKey:v35];
  }
  uint64_t v36 = v115;
  id v37 = [self defaultStore];
  if (v37)
  {
    uint64_t v38 = v37;
    id v39 = [v37 aa_primaryAppleAccount];

    uint64_t v103 = a2;
    if (v39 && (v39, (v34 & 1) == 0))
    {
      uint64_t v106 = v26;
      uint64_t v107 = v9;
      sub_10001D4B0(0, &qword_10163CB60);
      uint64_t v52 = v36 + *(int *)(v112 + 20);
      uint64_t v53 = UUID.uuidString.getter();
      uint64_t v55 = v54;
      id v56 = *(id *)(a2 + 152);
      v57._countAndFlagsBits = v53;
      v57._object = v55;
      Class isa = CKRecordID.init(recordName:zoneID:)(v57, (CKRecordZoneID)v56).super.isa;
      sub_100AB24F0(isa);
      uint64_t v105 = (char *)isa;
      uint64_t v104 = (char *)sub_101015AE0(isa);
      swift_release();
      uint64_t v102 = (char *)swift_allocBox();
      uint64_t v59 = *(void (**)(uint64_t, void, uint64_t, uint64_t (*)(void)))(v108 + 56);
      uint64_t v93 = v60;
      uint64_t v61 = v111;
      v108 += 56;
      uint64_t v92 = v59;
      v59(v60, 1, 1, v111);
      uint64_t v62 = *(void *)(a2 + 160);
      uint64_t v63 = v113;
      unint64_t v64 = v95;
      uint64_t v65 = v52;
      id v66 = v114;
      (*((void (**)(char *, uint64_t, id))v113 + 2))(v95, v65, v114);
      if (qword_1016374B0 != -1) {
        swift_once();
      }
      uint64_t v67 = v110;
      sub_100010324(v110, (uint64_t)qword_10170F308);
      UUID.uuidString.getter();
      uint64_t v68 = v96;
      URL.appendingPathComponent(_:isDirectory:)();
      uint64_t v69 = swift_bridgeObjectRelease();
      __chkstk_darwin(v69);
      *(&v91 - 4) = v62;
      *(&v91 - 3) = (uint64_t)v64;
      *(&v91 - 2) = (uint64_t)v68;
      uint64_t v70 = (uint64_t)v94;
      OS_dispatch_queue.sync<A>(execute:)();
      (*(void (**)(char *, uint64_t))(v107 + 8))(v68, v67);
      (*((void (**)(char *, id))v63 + 1))(v64, v66);
      v92(v70, 0, 1, v61);
      sub_100062604(v70, v93, &qword_1016426E8);
      uint64_t v72 = v105;
      uint64_t v71 = (uint64_t)v106;
      unint64_t v73 = v99;
      static os_log_type_t.default.getter();
      uint64_t v74 = swift_allocObject();
      *(_OWORD *)(v74 + 16) = v97;
      id v75 = v72;
      id v114 = v75;
      id v76 = [v75 description];
      uint64_t v77 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      uint64_t v79 = v78;

      *(void *)(v74 + 56) = &type metadata for String;
      *(void *)(v74 + 64) = v73;
      *(void *)(v74 + 32) = v77;
      *(void *)(v74 + 40) = v79;
      os_log(_:dso:log:_:_:)();
      swift_bridgeObjectRelease();
      uint64_t v113 = type metadata accessor for OwnedDeviceKeyRecord;
      sub_100B30D0C(v115, v71, (uint64_t (*)(void))type metadata accessor for OwnedDeviceKeyRecord);
      uint64_t v80 = *(unsigned __int8 *)(v100 + 80);
      uint64_t v81 = (v80 + 32) & ~v80;
      uint64_t v112 = v80 | 7;
      unint64_t v82 = (v101 + v81 + 7) & 0xFFFFFFFFFFFFFFF8;
      uint64_t v83 = swift_allocObject();
      unint64_t v85 = v102;
      uint64_t v84 = v103;
      *(void *)(v83 + 16) = v102;
      *(void *)(v83 + 24) = v84;
      uint64_t v111 = (uint64_t (*)(void))type metadata accessor for OwnedDeviceKeyRecord;
      sub_100B30DB4(v71, v83 + v81, (uint64_t (*)(void))type metadata accessor for OwnedDeviceKeyRecord);
      uint64_t v86 = (uint64_t (**)(uint64_t))(v83 + v82);
      uint64_t v110 = (uint64_t)sub_100B640E0;
      uint64_t v87 = (uint64_t (*)(uint64_t))v109;
      *uint64_t v86 = sub_100B640E0;
      v86[1] = v87;
      swift_retain();
      swift_retain();
      swift_retain();
      Future.addSuccess(block:)();
      swift_release();
      swift_release();
      sub_100B30D0C(v115, v71, (uint64_t (*)(void))v113);
      uint64_t v88 = swift_allocObject();
      *(void *)(v88 + 16) = v85;
      *(void *)(v88 + 24) = v84;
      sub_100B30DB4(v71, v88 + v81, v111);
      v89 = (void *)(v88 + v82);
      void *v89 = v110;
      v89[1] = v87;
      swift_retain();
      swift_retain();
      swift_retain();
      Future.addFailure(block:)();
      swift_release();
      swift_release();
      swift_release();

      swift_release();
    }
    else
    {
      if (qword_101636F50 != -1) {
        swift_once();
      }
      uint64_t v40 = type metadata accessor for Logger();
      uint64_t v108 = sub_100010324(v40, (uint64_t)qword_10170E9E8);
      uint64_t v41 = Logger.logObject.getter();
      os_log_type_t v42 = static os_log_type_t.info.getter();
      if (os_log_type_enabled(v41, v42))
      {
        BOOL v43 = v39 != 0;
        uint64_t v44 = a2;
        uint64_t v45 = swift_slowAlloc();
        *(_DWORD *)uint64_t v45 = 67109376;
        LODWORD(v116) = v34;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        *(_WORD *)(v45 + 8) = 1024;
        LODWORD(v116) = v43;
        uint64_t v36 = v115;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        _os_log_impl((void *)&_mh_execute_header, v41, v42, "Skipping cloud delete. skipCloudSave: %{BOOL}d, isiCloudSignedIn %{BOOL}d", (uint8_t *)v45, 0xEu);
        a2 = v44;
        swift_slowDealloc();
      }
      uint64_t v46 = v9;

      uint64_t v47 = *(void *)(a2 + 160);
      (*((void (**)(char *, uint64_t, id))v113 + 2))(v18, v36 + *(int *)(v112 + 20), v114);
      if (qword_1016374B0 != -1) {
        swift_once();
      }
      uint64_t v48 = v110;
      sub_100010324(v110, (uint64_t)qword_10170F308);
      UUID.uuidString.getter();
      uint64_t v49 = v104;
      URL.appendingPathComponent(_:isDirectory:)();
      uint64_t v50 = swift_bridgeObjectRelease();
      __chkstk_darwin(v50);
      *(&v91 - 4) = v47;
      *(&v91 - 3) = (uint64_t)v18;
      *(&v91 - 2) = (uint64_t)v49;
      uint64_t v51 = (uint64_t)v105;
      OS_dispatch_queue.sync<A>(execute:)();
      (*(void (**)(char *, uint64_t))(v46 + 8))(v49, v48);
      (*((void (**)(char *, id))v113 + 1))(v18, v114);
      sub_100B79EF4(v51);
      QueueSynchronizer.conditionalSync<A>(_:)();
      sub_100A9E7EC(9);
      sub_100A9EE98();
      v106(1);
      sub_100B310AC(v51, (uint64_t (*)(void))type metadata accessor for BeaconStoreFileRecord);
    }
    return swift_release();
  }
  else
  {
    uint64_t result = swift_release();
    __break(1u);
  }
  return result;
}

uint64_t sub_100B3B370(uint64_t a1, int a2, void *a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v50 = a1;
  uint64_t v46 = sub_10000588C((uint64_t *)&unk_101656900);
  __chkstk_darwin(v46);
  uint64_t v12 = (char *)&v45 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = type metadata accessor for OwnedBeaconRecord();
  __chkstk_darwin(v13 - 8);
  uint64_t v51 = (void **)((char *)&v45 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v15 = (void *)swift_allocObject();
  v15[2] = a4;
  v15[3] = a5;
  uint64_t v47 = a5;
  v15[4] = a6;
  uint64_t v16 = qword_101636F50;
  swift_retain();
  swift_retain();
  if (v16 != -1) {
    swift_once();
  }
  uint64_t v17 = type metadata accessor for Logger();
  sub_100010324(v17, (uint64_t)qword_10170E9E8);
  os_log_type_t v18 = Logger.logObject.getter();
  os_log_type_t v19 = static os_log_type_t.default.getter();
  BOOL v20 = os_log_type_enabled(v18, v19);
  uint64_t v48 = a4;
  uint64_t v49 = a6;
  if (v20)
  {
    uint64_t v21 = (uint8_t *)swift_slowAlloc();
    *(_DWORD *)uint64_t v21 = 67109120;
    LODWORD(v52) = a2 & 1;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl((void *)&_mh_execute_header, v18, v19, "Saving record. Disk First? %{BOOL}d", v21, 8u);
    swift_slowDealloc();
  }

  if (qword_101637188 != -1) {
    swift_once();
  }
  uint64_t v22 = (void *)qword_10170EE68;
  id v23 = [self sharedInstance];
  unsigned int v24 = [v23 isInternalBuild];

  if (v24)
  {
    NSString v25 = String._bridgeToObjectiveC()();
    unsigned int v26 = [v22 BOOLForKey:v25];
  }
  else
  {
    unsigned int v26 = 0;
  }
  id v27 = [self defaultStore];
  if (v27)
  {
    uint64_t v28 = v27;
    id v29 = [v27 aa_primaryAppleAccount];

    if (v29 && (v29, ((a2 | v26) & 1) == 0))
    {
      sub_100AC4188(v50, (uint64_t)sub_100B602E8, (uint64_t)v15);
    }
    else
    {
      uint64_t v45 = v15;
      uint64_t v30 = (uint64_t)v51;
      sub_100B30D0C(v50, (uint64_t)v51, (uint64_t (*)(void))type metadata accessor for OwnedBeaconRecord);
      uint64_t v31 = QueueSynchronizer.conditionalSync<A>(_:)();
      __chkstk_darwin(v31);
      *(&v45 - 2) = v32;
      *(&v45 - 1) = (void *)v30;
      OS_dispatch_queue.sync<A>(execute:)();
      id v33 = Logger.logObject.getter();
      os_log_type_t v34 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v33, v34))
      {
        NSString v35 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)NSString v35 = 0;
        _os_log_impl((void *)&_mh_execute_header, v33, v34, "Saved LocalStorageBacked record. Calling completion.", v35, 2u);
        swift_slowDealloc();
      }

      uint64_t v36 = v50;
      sub_100B30D0C(v50, (uint64_t)v12, (uint64_t (*)(void))type metadata accessor for OwnedBeaconRecord);
      swift_storeEnumTagMultiPayload();
      sub_100AFF320((uint64_t)v12, v48, v47, v49);
      sub_10001DAB4((uint64_t)v12, (uint64_t *)&unk_101656900);
      if (((v29 != 0) & ~v26) != 0)
      {
        uint64_t v42 = type metadata accessor for Transaction();
        __chkstk_darwin(v42);
        *(&v45 - 4) = a3;
        *(&v45 - 3) = (void *)v36;
        uint64_t v43 = (uint64_t)v51;
        *(&v45 - 2) = v51;
        static Transaction.named<A>(_:with:)();
        uint64_t v41 = v43;
      }
      else
      {
        id v37 = Logger.logObject.getter();
        os_log_type_t v38 = static os_log_type_t.info.getter();
        if (os_log_type_enabled(v37, v38))
        {
          BOOL v39 = v29 != 0;
          uint64_t v40 = swift_slowAlloc();
          *(_DWORD *)uint64_t v40 = 67109376;
          LODWORD(v52) = v26;
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          *(_WORD *)(v40 + 8) = 1024;
          LODWORD(v52) = v39;
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          _os_log_impl((void *)&_mh_execute_header, v37, v38, "Skipping save to cloud. skipCloudSave: %{BOOL}d, isiCloudSignedIn %{BOOL}d", (uint8_t *)v40, 0xEu);
          swift_slowDealloc();
        }

        uint64_t v41 = (uint64_t)v51;
      }
      sub_100B310AC(v41, (uint64_t (*)(void))type metadata accessor for OwnedBeaconRecord);
    }
    return swift_release();
  }
  else
  {
    swift_release();
    uint64_t result = swift_release();
    __break(1u);
  }
  return result;
}

uint64_t sub_100B3BB80(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v29 = *(void *)(v8 - 8);
  uint64_t v30 = v8;
  __chkstk_darwin(v8);
  id v27 = (char *)&v22 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v28 = type metadata accessor for DispatchQoS();
  uint64_t v26 = *(void *)(v28 - 8);
  __chkstk_darwin(v28);
  NSString v25 = (char *)&v22 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = (void *)swift_allocObject();
  v11[2] = a2;
  v11[3] = a3;
  v11[4] = a4;
  swift_retain();
  uint64_t v23 = a3;
  swift_retain();
  uint64_t v24 = a4;
  swift_retain();
  uint64_t v12 = sub_100AB24F0();
  uint64_t v13 = (void *)swift_allocObject();
  v13[2] = sub_100B6028C;
  v13[3] = v11;
  v13[4] = a1;
  swift_retain_n();
  uint64_t v31 = a1;
  swift_retain_n();
  QueueSynchronizer.conditionalSync<A>(_:)();
  int v14 = LOBYTE(aBlock[0]);
  static os_log_type_t.default.getter();
  if (qword_101637270 != -1) {
    swift_once();
  }
  sub_10000588C((uint64_t *)&unk_10163AD00);
  uint64_t v15 = swift_allocObject();
  *(_OWORD *)(v15 + 16) = xmmword_101342130;
  *(void *)(v15 + 56) = &type metadata for Bool;
  *(void *)(v15 + 64) = &protocol witness table for Bool;
  *(unsigned char *)(v15 + 32) = v14;
  os_log(_:dso:log:_:_:)();
  swift_bridgeObjectRelease();
  static os_log_type_t.default.getter();
  os_log(_:dso:log:_:_:)();
  if (v14)
  {
    sub_1003AB42C(a2, v23, v24);
    swift_release();
    swift_release();
    swift_release_n();
  }
  else
  {
    static os_log_type_t.default.getter();
    os_log(_:dso:log:_:_:)();
    uint64_t v16 = (void *)swift_allocObject();
    v16[2] = v12;
    v16[3] = sub_100B565F4;
    v16[4] = v13;
    aBlock[4] = sub_100B64438;
    aBlock[5] = v16;
    aBlock[0] = _NSConcreteStackBlock;
    aBlock[1] = 1107296256;
    aBlock[2] = sub_1004B5480;
    aBlock[3] = &unk_1015E9820;
    uint64_t v17 = _Block_copy(aBlock);
    swift_retain();
    swift_retain();
    os_log_type_t v18 = v25;
    static DispatchQoS.unspecified.getter();
    uint64_t v32 = _swiftEmptyArrayStorage;
    sub_100B22DA4((unint64_t *)&qword_10163B7E0, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
    sub_10000588C((uint64_t *)&unk_10163F350);
    sub_100062734((unint64_t *)&qword_10163B7F0, (uint64_t *)&unk_10163F350);
    os_log_type_t v19 = v27;
    uint64_t v20 = v30;
    dispatch thunk of SetAlgebra.init<A>(_:)();
    OS_dispatch_queue.async(group:qos:flags:execute:)();
    _Block_release(v17);
    (*(void (**)(char *, uint64_t))(v29 + 8))(v19, v20);
    (*(void (**)(char *, uint64_t))(v26 + 8))(v18, v28);
    swift_release();
    swift_release();
    swift_release_n();
    swift_release();
  }
  return swift_release();
}

uint64_t sub_100B3C0CC()
{
  return 1;
}

void sub_100B3C35C(uint64_t a1, char a2, void (*a3)(Class), uint64_t a4, uint64_t a5, void (*a6)(uint64_t), uint64_t a7)
{
  uint64_t v51 = a4;
  uint64_t v52 = a5;
  uint64_t v50 = a3;
  uint64_t v54 = a1;
  uint64_t v45 = sub_10000588C(&qword_10163C650);
  __chkstk_darwin(v45);
  uint64_t v46 = (uint64_t)&v43 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = type metadata accessor for OwnedBeaconGroup(0);
  uint64_t v44 = *(void *)(v11 - 8);
  uint64_t v12 = *(void *)(v44 + 64);
  uint64_t v13 = __chkstk_darwin(v11 - 8);
  int v14 = (char *)&v43 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v13);
  Class v48 = (Class)((char *)&v43 - v15);
  uint64_t v16 = swift_allocObject();
  uint64_t v47 = a6;
  *(void *)(v16 + 16) = a6;
  *(void *)(v16 + 24) = a7;
  uint64_t v53 = v16;
  uint64_t v49 = a7;
  swift_retain();
  static os_log_type_t.default.getter();
  if (qword_101637260 != -1) {
    swift_once();
  }
  sub_10000588C((uint64_t *)&unk_10163AD00);
  uint64_t v17 = swift_allocObject();
  uint64_t v18 = v17;
  long long v43 = xmmword_101342130;
  *(_OWORD *)(v17 + 16) = xmmword_101342130;
  if (a2) {
    uint64_t v19 = 1702195828;
  }
  else {
    uint64_t v19 = 0x65736C6166;
  }
  if (a2) {
    unint64_t v20 = 0xE400000000000000;
  }
  else {
    unint64_t v20 = 0xE500000000000000;
  }
  *(void *)(v17 + 56) = &type metadata for String;
  *(void *)(v17 + 64) = sub_10000B4CC();
  *(void *)(v18 + 32) = v19;
  *(void *)(v18 + 40) = v20;
  os_log(_:dso:log:_:_:)();
  swift_bridgeObjectRelease();
  if (a2)
  {
    uint64_t v22 = v54;
    Class v23 = sub_1011545F0(v54);
    v55[0] = v23;
    Class v24 = v48;
    sub_100B30D0C(v22, (uint64_t)v48, type metadata accessor for OwnedBeaconGroup);
    v50(v24);
    uint64_t v25 = sub_101072710(v55, (uint64_t)v24);
    uint64_t v26 = v52;
    __chkstk_darwin(v25);
    *((void *)&v43 - 2) = v27;
    *((void *)&v43 - 1) = v24;
    OS_dispatch_queue.sync<A>(execute:)();
    sub_100A9E7EC(8);
    uint64_t v40 = v46;
    sub_100B30D0C((uint64_t)v24, v46, type metadata accessor for OwnedBeaconGroup);
    swift_storeEnumTagMultiPayload();
    sub_10046421C(v40, v47);
    sub_10001DAB4(v40, &qword_10163C650);
    uint64_t v41 = type metadata accessor for Transaction();
    __chkstk_darwin(v41);
    *((void *)&v43 - 4) = v26;
    *((void *)&v43 - 3) = v55;
    *((void *)&v43 - 2) = v22;
    static Transaction.named<A>(_:with:)();
    sub_100B310AC((uint64_t)v24, type metadata accessor for OwnedBeaconGroup);
    id v42 = v55[0];
    swift_release();
  }
  else
  {
    uint64_t v29 = v54;
    Class v48 = sub_1011545F0(v54);
    uint64_t v30 = v52;
    sub_100AB24F0();
    sub_100B30D0C(v29, (uint64_t)v14, type metadata accessor for OwnedBeaconGroup);
    uint64_t v31 = *(unsigned __int8 *)(v44 + 80);
    uint64_t v49 = v31 | 7;
    uint64_t v32 = swift_allocObject();
    uint64_t v33 = v51;
    *(void *)(v32 + 16) = v50;
    *(void *)(v32 + 24) = v33;
    sub_100B30DB4((uint64_t)v14, v32 + ((v31 + 32) & ~v31), type metadata accessor for OwnedBeaconGroup);
    swift_retain();
    sub_101017624(v48, (void (*)(id *))sub_100B63770, v32);
    swift_release();
    swift_release();
    uint64_t v34 = swift_allocObject();
    NSString v35 = (uint64_t (*)(uint64_t))v53;
    *(void *)(v34 + 16) = sub_100B63610;
    *(void *)(v34 + 24) = v35;
    swift_retain();
    Future.addFailure(block:)();
    swift_release();
    swift_release();
    sub_100B30D0C(v54, (uint64_t)v14, type metadata accessor for OwnedBeaconGroup);
    uint64_t v36 = (v31 + 16) & ~v31;
    unint64_t v37 = (v12 + v36 + 7) & 0xFFFFFFFFFFFFFFF8;
    uint64_t v38 = swift_allocObject();
    sub_100B30DB4((uint64_t)v14, v38 + v36, type metadata accessor for OwnedBeaconGroup);
    *(void *)(v38 + v37) = v30;
    BOOL v39 = (uint64_t (**)(uint64_t))(v38 + ((v37 + 15) & 0xFFFFFFFFFFFFFFF8));
    *BOOL v39 = sub_100B63610;
    v39[1] = v35;
    swift_retain();
    swift_retain();
    Future.addSuccess(block:)();
    swift_release();

    swift_release();
    swift_release();
    swift_release();
  }
}

void sub_100B3CA80(uint64_t a1, char a2, void (*a3)(Class), uint64_t a4, uint64_t a5, void *a6)
{
  uint64_t v49 = a5;
  uint64_t v45 = a3;
  uint64_t v46 = a4;
  uint64_t v47 = a1;
  uint64_t v42 = sub_10000588C(&qword_101651918);
  __chkstk_darwin(v42);
  uint64_t v43 = (uint64_t)&v39 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = type metadata accessor for LostModeRecord();
  uint64_t v40 = *(void *)(v9 - 8);
  uint64_t v10 = *(void *)(v40 + 64);
  uint64_t v11 = __chkstk_darwin(v9 - 8);
  uint64_t v12 = (char *)&v39 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v11);
  Class v44 = (Class)((char *)&v39 - v13);
  uint64_t v48 = swift_allocObject();
  *(void *)(v48 + 16) = a6;
  uint64_t v41 = a6;
  static os_log_type_t.default.getter();
  if (qword_101637260 != -1) {
    swift_once();
  }
  sub_10000588C((uint64_t *)&unk_10163AD00);
  uint64_t v14 = swift_allocObject();
  uint64_t v15 = v14;
  long long v39 = xmmword_101342130;
  *(_OWORD *)(v14 + 16) = xmmword_101342130;
  if (a2) {
    uint64_t v16 = 1702195828;
  }
  else {
    uint64_t v16 = 0x65736C6166;
  }
  if (a2) {
    unint64_t v17 = 0xE400000000000000;
  }
  else {
    unint64_t v17 = 0xE500000000000000;
  }
  *(void *)(v14 + 56) = &type metadata for String;
  *(void *)(v14 + 64) = sub_10000B4CC();
  *(void *)(v15 + 32) = v16;
  *(void *)(v15 + 40) = v17;
  os_log(_:dso:log:_:_:)();
  swift_bridgeObjectRelease();
  if (a2)
  {
    uint64_t v19 = v47;
    Class v20 = sub_101153B88(v47);
    v50[0] = v20;
    Class v21 = v44;
    sub_100B30D0C(v19, (uint64_t)v44, (uint64_t (*)(void))type metadata accessor for LostModeRecord);
    v45(v21);
    uint64_t v22 = sub_100B223B8(v50, (uint64_t)v21);
    uint64_t v23 = v49;
    __chkstk_darwin(v22);
    *((void *)&v39 - 2) = v24;
    *((void *)&v39 - 1) = v21;
    OS_dispatch_queue.sync<A>(execute:)();
    sub_100A9E7EC(8);
    uint64_t v36 = v43;
    sub_100B30D0C((uint64_t)v21, v43, (uint64_t (*)(void))type metadata accessor for LostModeRecord);
    swift_storeEnumTagMultiPayload();
    sub_1008EA7DC(v36, v41);
    sub_10001DAB4(v36, &qword_101651918);
    uint64_t v37 = type metadata accessor for Transaction();
    __chkstk_darwin(v37);
    *((void *)&v39 - 4) = v23;
    *((void *)&v39 - 3) = v50;
    *((void *)&v39 - 2) = v19;
    static Transaction.named<A>(_:with:)();
    sub_100B310AC((uint64_t)v21, (uint64_t (*)(void))type metadata accessor for LostModeRecord);
    id v38 = v50[0];
    swift_release();
  }
  else
  {
    uint64_t v26 = v47;
    Class v44 = sub_101153B88(v47);
    sub_100AB24F0();
    sub_100B30D0C(v26, (uint64_t)v12, (uint64_t (*)(void))type metadata accessor for LostModeRecord);
    uint64_t v27 = *(unsigned __int8 *)(v40 + 80);
    uint64_t v43 = v27 | 7;
    uint64_t v28 = swift_allocObject();
    uint64_t v29 = v46;
    *(void *)(v28 + 16) = v45;
    *(void *)(v28 + 24) = v29;
    sub_100B30DB4((uint64_t)v12, v28 + ((v27 + 32) & ~v27), (uint64_t (*)(void))type metadata accessor for LostModeRecord);
    swift_retain();
    sub_101017624(v44, (void (*)(id *))sub_100B627B8, v28);
    swift_release();
    swift_release();
    uint64_t v30 = swift_allocObject();
    uint64_t v31 = v48;
    *(void *)(v30 + 16) = sub_100B62658;
    *(void *)(v30 + 24) = v31;
    swift_retain();
    Future.addFailure(block:)();
    swift_release();
    swift_release();
    sub_100B30D0C(v26, (uint64_t)v12, (uint64_t (*)(void))type metadata accessor for LostModeRecord);
    uint64_t v32 = (v27 + 16) & ~v27;
    unint64_t v33 = (v10 + v32 + 7) & 0xFFFFFFFFFFFFFFF8;
    uint64_t v34 = swift_allocObject();
    sub_100B30DB4((uint64_t)v12, v34 + v32, (uint64_t (*)(void))type metadata accessor for LostModeRecord);
    *(void *)(v34 + v33) = v49;
    NSString v35 = (void (**)(uint64_t))(v34 + ((v33 + 15) & 0xFFFFFFFFFFFFFFF8));
    *NSString v35 = sub_100B62658;
    v35[1] = (void (*)(uint64_t))v31;
    swift_retain();
    swift_retain();
    Future.addSuccess(block:)();
    swift_release();

    swift_release();
    swift_release();
    swift_release();
  }
}

uint64_t sub_100B3D190(uint64_t a1, int a2, uint64_t a3, uint64_t a4, void *a5)
{
  uint64_t v43 = a3;
  uint64_t v44 = a1;
  uint64_t v41 = sub_10000588C(&qword_101651918);
  __chkstk_darwin(v41);
  uint64_t v9 = (char *)v40 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = type metadata accessor for LostModeRecord();
  __chkstk_darwin(v10 - 8);
  uint64_t v12 = (char *)v40 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = swift_allocObject();
  *(void *)(v13 + 16) = a4;
  *(void *)(v13 + 24) = a5;
  uint64_t v14 = qword_101636F50;
  swift_retain();
  uint64_t v15 = a5;
  if (v14 != -1) {
    swift_once();
  }
  uint64_t v16 = type metadata accessor for Logger();
  sub_100010324(v16, (uint64_t)qword_10170E9E8);
  unint64_t v17 = Logger.logObject.getter();
  os_log_type_t v18 = static os_log_type_t.default.getter();
  BOOL v19 = os_log_type_enabled(v17, v18);
  uint64_t v42 = v15;
  if (v19)
  {
    Class v20 = (uint8_t *)swift_slowAlloc();
    *(_DWORD *)Class v20 = 67109120;
    LODWORD(v46) = a2 & 1;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl((void *)&_mh_execute_header, v17, v18, "Saving record. Disk First? %{BOOL}d", v20, 8u);
    swift_slowDealloc();
  }

  if (qword_101637188 != -1) {
    swift_once();
  }
  Class v21 = (void *)qword_10170EE68;
  id v22 = [self sharedInstance];
  unsigned int v23 = [v22 isInternalBuild];

  if (v23)
  {
    NSString v24 = String._bridgeToObjectiveC()();
    unsigned int v23 = [v21 BOOLForKey:v24];
  }
  id v25 = [self defaultStore];
  if (v25)
  {
    uint64_t v26 = v25;
    id v27 = [v25 aa_primaryAppleAccount];

    if (v27 && (v27, ((a2 | v23) & 1) == 0))
    {
      sub_100AC47DC(v44, (uint64_t)sub_100B630A0, v13);
    }
    else
    {
      v40[2] = a4;
      uint64_t v28 = sub_100B30D0C(v44, (uint64_t)v12, (uint64_t (*)(void))type metadata accessor for LostModeRecord);
      __chkstk_darwin(v28);
      v40[-2] = v29;
      v40[-1] = v12;
      OS_dispatch_queue.sync<A>(execute:)();
      v40[1] = v13;
      uint64_t v30 = Logger.logObject.getter();
      os_log_type_t v31 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v30, v31))
      {
        uint64_t v32 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)uint64_t v32 = 0;
        _os_log_impl((void *)&_mh_execute_header, v30, v31, "Saved LocalStorageBacked record. Calling completion.", v32, 2u);
        swift_slowDealloc();
      }

      uint64_t v33 = v44;
      sub_100B30D0C(v44, (uint64_t)v9, (uint64_t (*)(void))type metadata accessor for LostModeRecord);
      swift_storeEnumTagMultiPayload();
      uint64_t v34 = swift_projectBox();
      swift_beginAccess();
      sub_1008F4734((uint64_t)v9, v34);
      dispatch_group_leave(v42);
      sub_10001DAB4((uint64_t)v9, &qword_101651918);
      if (((v27 != 0) & ~v23) != 0)
      {
        uint64_t v38 = type metadata accessor for Transaction();
        __chkstk_darwin(v38);
        v40[-4] = v43;
        v40[-3] = v33;
        v40[-2] = v12;
        static Transaction.named<A>(_:with:)();
      }
      else
      {
        NSString v35 = Logger.logObject.getter();
        os_log_type_t v36 = static os_log_type_t.info.getter();
        if (os_log_type_enabled(v35, v36))
        {
          uint64_t v37 = swift_slowAlloc();
          *(_DWORD *)uint64_t v37 = 67109376;
          LODWORD(v45) = v23;
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          *(_WORD *)(v37 + 8) = 1024;
          LODWORD(v45) = v27 != 0;
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          _os_log_impl((void *)&_mh_execute_header, v35, v36, "Skipping save to cloud. skipCloudSave: %{BOOL}d, isiCloudSignedIn %{BOOL}d", (uint8_t *)v37, 0xEu);
          swift_slowDealloc();
        }
      }
      sub_100B310AC((uint64_t)v12, (uint64_t (*)(void))type metadata accessor for LostModeRecord);
    }
    return swift_release();
  }
  else
  {

    uint64_t result = swift_release();
    __break(1u);
  }
  return result;
}

uint64_t sub_100B3D974(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v114 = a2;
  uint64_t v5 = type metadata accessor for BeaconStoreFileRecord();
  uint64_t v107 = *(uint64_t (**)(uint64_t))(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v106 = (char *)&v92 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for URL();
  uint64_t v108 = *(uint64_t (**)())(v7 - 8);
  uint64_t v8 = __chkstk_darwin(v7);
  uint64_t v105 = (char *)&v92 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8);
  uint64_t v100 = (char *)&v92 - v10;
  uint64_t v116 = (void *)type metadata accessor for UUID();
  uint64_t v113 = (uint64_t (*)())*(v116 - 1);
  uint64_t v11 = __chkstk_darwin(v116);
  uint64_t v94 = (char *)&v92 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = __chkstk_darwin(v11);
  uint64_t v104 = (uint64_t)&v92 - v14;
  __chkstk_darwin(v13);
  long long v97 = (char *)&v92 - v15;
  uint64_t v95 = sub_10000588C(&qword_1016426E8);
  __chkstk_darwin(v95);
  uint64_t v96 = (char *)&v92 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v17 = type metadata accessor for LostModeRecord();
  uint64_t v101 = *(void *)(v17 - 8);
  os_log_type_t v18 = *(char **)(v101 + 64);
  uint64_t v19 = __chkstk_darwin(v17);
  uint64_t v103 = (char *)&v92 - ((unint64_t)(v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v19);
  Class v21 = (char *)&v92 - v20;
  uint64_t v22 = swift_allocObject();
  *(void *)(v22 + 16) = a3;
  uint64_t v23 = swift_allocObject();
  *(void *)(v23 + 16) = sub_100B62D9C;
  *(void *)(v23 + 24) = v22;
  uint64_t v109 = v23;
  id v110 = a3;
  uint64_t v111 = v22;
  swift_retain();
  static os_log_type_t.default.getter();
  if (qword_101637260 != -1) {
    swift_once();
  }
  uint64_t v99 = sub_10000588C((uint64_t *)&unk_10163AD00);
  uint64_t v24 = swift_allocObject();
  long long v98 = xmmword_101342130;
  *(_OWORD *)(v24 + 16) = xmmword_101342130;
  uint64_t v115 = a1;
  sub_100B30D0C(a1, (uint64_t)v21, (uint64_t (*)(void))type metadata accessor for LostModeRecord);
  uint64_t v102 = (uint64_t)v21;
  uint64_t v112 = v17;
  uint64_t v25 = String.init<A>(describing:)();
  uint64_t v27 = v26;
  *(void *)(v24 + 56) = &type metadata for String;
  unint64_t v28 = sub_10000B4CC();
  *(void *)(v24 + 64) = v28;
  *(void *)(v24 + 32) = v25;
  *(void *)(v24 + 40) = v27;
  os_log(_:dso:log:_:_:)();
  swift_bridgeObjectRelease();
  if (qword_101637188 != -1) {
    swift_once();
  }
  uint64_t v29 = (void *)qword_10170EE68;
  id v30 = [self sharedInstance];
  unsigned int v31 = [v30 isInternalBuild];

  if (v31)
  {
    NSString v32 = String._bridgeToObjectiveC()();
    unsigned int v31 = [v29 BOOLForKey:v32];
  }
  id v33 = [self defaultStore];
  if (v33)
  {
    uint64_t v34 = v33;
    id v35 = [v33 aa_primaryAppleAccount];

    if (v35 && (v35, (v31 & 1) == 0))
    {
      uint64_t v106 = (char *)v28;
      uint64_t v104 = v7;
      sub_10001D4B0(0, &qword_10163CB60);
      uint64_t v50 = v115 + *(int *)(v112 + 20);
      uint64_t v51 = UUID.uuidString.getter();
      uint64_t v52 = v5;
      uint64_t v54 = v53;
      uint64_t v55 = v114;
      id v56 = *(id *)(v114 + 152);
      v57._countAndFlagsBits = v51;
      v57._object = v54;
      Class isa = CKRecordID.init(recordName:zoneID:)(v57, (CKRecordZoneID)v56).super.isa;
      sub_100AB24F0();
      uint64_t v105 = (char *)isa;
      uint64_t v94 = (char *)sub_101015AE0(isa);
      swift_release();
      uint64_t v95 = swift_allocBox();
      uint64_t v59 = (void (*)(uint64_t, void, uint64_t, uint64_t))*((void *)v107 + 7);
      uint64_t v93 = v60;
      uint64_t v107 = (uint64_t (*)(uint64_t))((char *)v107 + 56);
      uint64_t v92 = v59;
      v59(v60, 1, 1, v52);
      uint64_t v61 = *(void (**)(uint64_t, void, uint64_t, uint64_t))(v55 + 160);
      uint64_t v62 = v97;
      uint64_t v63 = v50;
      unint64_t v64 = v116;
      (*((void (**)(char *, uint64_t, void *))v113 + 2))(v97, v63, v116);
      if (qword_101637130 != -1) {
        swift_once();
      }
      uint64_t v103 = v18;
      uint64_t v65 = v104;
      sub_100010324(v104, (uint64_t)qword_10170ED90);
      UUID.uuidString.getter();
      id v66 = v100;
      URL.appendingPathComponent(_:isDirectory:)();
      uint64_t v67 = swift_bridgeObjectRelease();
      __chkstk_darwin(v67);
      *(&v92 - 4) = v61;
      *(&v92 - 3) = (void (*)(uint64_t, void, uint64_t, uint64_t))v62;
      *(&v92 - 2) = (void (*)(uint64_t, void, uint64_t, uint64_t))v66;
      uint64_t v68 = (uint64_t)v96;
      OS_dispatch_queue.sync<A>(execute:)();
      (*((void (**)(char *, uint64_t))v108 + 1))(v66, v65);
      (*((void (**)(char *, void *))v113 + 1))(v62, v64);
      v92(v68, 0, 1, v52);
      sub_100062604(v68, v93, &qword_1016426E8);
      uint64_t v70 = v102;
      uint64_t v72 = v105;
      uint64_t v71 = v106;
      static os_log_type_t.default.getter();
      uint64_t v73 = swift_allocObject();
      *(_OWORD *)(v73 + 16) = v98;
      uint64_t v74 = v72;
      uint64_t v116 = v74;
      id v75 = [v74 description];
      uint64_t v76 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      uint64_t v78 = v77;

      *(void *)(v73 + 56) = &type metadata for String;
      *(void *)(v73 + 64) = v71;
      *(void *)(v73 + 32) = v76;
      *(void *)(v73 + 40) = v78;
      os_log(_:dso:log:_:_:)();
      swift_bridgeObjectRelease();
      uint64_t v113 = type metadata accessor for LostModeRecord;
      sub_100B30D0C(v115, v70, (uint64_t (*)(void))type metadata accessor for LostModeRecord);
      uint64_t v79 = *(unsigned __int8 *)(v101 + 80);
      uint64_t v80 = (v79 + 32) & ~v79;
      uint64_t v112 = v79 | 7;
      uint64_t v81 = v70;
      unint64_t v82 = (unint64_t)&v103[v80 + 7] & 0xFFFFFFFFFFFFFFF8;
      uint64_t v83 = swift_allocObject();
      uint64_t v84 = v95;
      uint64_t v85 = v114;
      *(void *)(v83 + 16) = v95;
      *(void *)(v83 + 24) = v85;
      uint64_t v108 = type metadata accessor for LostModeRecord;
      sub_100B30DB4(v70, v83 + v80, (uint64_t (*)(void))type metadata accessor for LostModeRecord);
      uint64_t v86 = (uint64_t (**)(uint64_t))(v83 + v82);
      uint64_t v107 = sub_100B640E0;
      uint64_t v87 = (uint64_t (*)(uint64_t))v109;
      *uint64_t v86 = sub_100B640E0;
      v86[1] = v87;
      swift_retain();
      swift_retain();
      swift_retain();
      Future.addSuccess(block:)();
      swift_release();
      swift_release();
      sub_100B30D0C(v115, v81, (uint64_t (*)(void))v113);
      uint64_t v88 = swift_allocObject();
      *(void *)(v88 + 16) = v84;
      *(void *)(v88 + 24) = v85;
      sub_100B30DB4(v81, v88 + v80, (uint64_t (*)(void))v108);
      v89 = (uint64_t (**)(uint64_t))(v88 + v82);
      void *v89 = v107;
      v89[1] = v87;
      swift_retain();
      swift_retain();
      swift_retain();
      Future.addFailure(block:)();

      swift_release();
      swift_release();
      swift_release();
      swift_release();

      swift_release();
    }
    else
    {
      uint64_t v36 = v7;
      uint64_t v107 = (uint64_t (*)(uint64_t))v5;
      if (qword_101636F50 != -1) {
        swift_once();
      }
      uint64_t v37 = v113;
      uint64_t v38 = type metadata accessor for Logger();
      uint64_t v102 = sub_100010324(v38, (uint64_t)qword_10170E9E8);
      long long v39 = Logger.logObject.getter();
      os_log_type_t v40 = static os_log_type_t.info.getter();
      BOOL v41 = os_log_type_enabled(v39, v40);
      uint64_t v42 = v104;
      if (v41)
      {
        uint64_t v43 = swift_slowAlloc();
        *(_DWORD *)uint64_t v43 = 67109376;
        LODWORD(v117) = v31;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        *(_WORD *)(v43 + 8) = 1024;
        LODWORD(v117) = v35 != 0;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        _os_log_impl((void *)&_mh_execute_header, v39, v40, "Skipping cloud delete. skipCloudSave: %{BOOL}d, isiCloudSignedIn %{BOOL}d", (uint8_t *)v43, 0xEu);
        swift_slowDealloc();
      }

      uint64_t v44 = *(void (**)(uint64_t, void, uint64_t, uint64_t))(v114 + 160);
      uint64_t v45 = v115 + *(int *)(v112 + 20);
      uint64_t v101 = *((void *)v37 + 2);
      ((void (*)(uint64_t, uint64_t, void *))v101)(v42, v45, v116);
      uint64_t v46 = (void (*)(uint64_t, void, uint64_t, uint64_t))v42;
      if (qword_101637130 != -1) {
        swift_once();
      }
      sub_100010324(v36, (uint64_t)qword_10170ED90);
      UUID.uuidString.getter();
      uint64_t v47 = v105;
      URL.appendingPathComponent(_:isDirectory:)();
      uint64_t v48 = swift_bridgeObjectRelease();
      __chkstk_darwin(v48);
      *(&v92 - 4) = v44;
      *(&v92 - 3) = v46;
      *(&v92 - 2) = (void (*)(uint64_t, void, uint64_t, uint64_t))v47;
      uint64_t v49 = (uint64_t)v106;
      OS_dispatch_queue.sync<A>(execute:)();
      (*((void (**)(char *, uint64_t))v108 + 1))(v47, v36);
      (*((void (**)(void (*)(uint64_t, void, uint64_t, uint64_t), void *))v37 + 1))(v46, v116);
      sub_100B79EF4(v49);
      QueueSynchronizer.conditionalSync<A>(_:)();
      sub_100A9E7EC(9);
      sub_100A9EE98();
      uint64_t v69 = v110;
      static os_log_type_t.default.getter();
      if (qword_1016372E0 != -1) {
        swift_once();
      }
      os_log(_:dso:log:_:_:)();
      dispatch_group_leave(v69);

      sub_100B310AC(v49, (uint64_t (*)(void))type metadata accessor for BeaconStoreFileRecord);
      swift_release();
    }
    return swift_release();
  }
  else
  {
    id v91 = v110;

    uint64_t result = swift_release();
    __break(1u);
  }
  return result;
}

uint64_t sub_100B3EBC8(uint64_t a1, uint64_t a2, void (*a3)(uint64_t), objc_class *a4)
{
  uint64_t v112 = type metadata accessor for BeaconStoreFileRecord();
  uint64_t v108 = *(void *)(v112 - 8);
  __chkstk_darwin(v112);
  uint64_t v105 = (char *)&v92 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v111 = (uint64_t (*)(void))type metadata accessor for URL();
  uint64_t v109 = (uint64_t (*)(uint64_t))*((void *)v111 - 1);
  uint64_t v9 = __chkstk_darwin(v111);
  uint64_t v104 = (uint64_t)&v92 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9);
  uint64_t v95 = (char *)&v92 - v11;
  uint64_t v12 = (objc_class *)type metadata accessor for UUID();
  uint64_t v114 = (uint64_t (*)())*((void *)v12 - 1);
  uint64_t v115 = v12;
  uint64_t v13 = __chkstk_darwin(v12);
  uint64_t v92 = (char *)&v92 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = __chkstk_darwin(v13);
  uint64_t v17 = (char *)&v92 - v16;
  __chkstk_darwin(v15);
  uint64_t v94 = (char *)&v92 - v18;
  uint64_t v19 = sub_10000588C(&qword_1016426E8);
  __chkstk_darwin(v19);
  uint64_t v93 = (char *)&v92 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v21 = type metadata accessor for LostModeRecord();
  uint64_t v99 = *(void *)(v21 - 8);
  uint64_t v22 = __chkstk_darwin(v21);
  uint64_t v102 = (char *)&v92 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v100 = v23;
  __chkstk_darwin(v22);
  uint64_t v25 = (char *)&v92 - v24;
  uint64_t v26 = swift_allocObject();
  uint64_t v106 = a3;
  Class v107 = a4;
  *(void *)(v26 + 16) = a3;
  *(void *)(v26 + 24) = a4;
  uint64_t v110 = v26;
  swift_retain();
  static os_log_type_t.default.getter();
  if (qword_101637260 != -1) {
    swift_once();
  }
  uint64_t v97 = sub_10000588C((uint64_t *)&unk_10163AD00);
  uint64_t v27 = swift_allocObject();
  long long v96 = xmmword_101342130;
  *(_OWORD *)(v27 + 16) = xmmword_101342130;
  sub_100B30D0C(a1, (uint64_t)v25, (uint64_t (*)(void))type metadata accessor for LostModeRecord);
  uint64_t v101 = v25;
  uint64_t v113 = v21;
  uint64_t v28 = String.init<A>(describing:)();
  uint64_t v30 = v29;
  *(void *)(v27 + 56) = &type metadata for String;
  unint64_t v98 = sub_10000B4CC();
  *(void *)(v27 + 64) = v98;
  *(void *)(v27 + 32) = v28;
  *(void *)(v27 + 40) = v30;
  os_log(_:dso:log:_:_:)();
  swift_bridgeObjectRelease();
  if (qword_101637188 != -1) {
    swift_once();
  }
  unsigned int v31 = (void *)qword_10170EE68;
  id v32 = [self sharedInstance];
  unsigned int v33 = [v32 isInternalBuild];

  uint64_t v34 = v17;
  if (v33)
  {
    NSString v35 = String._bridgeToObjectiveC()();
    unsigned int v33 = [v31 BOOLForKey:v35];
  }
  uint64_t v36 = a2;
  id v37 = [self defaultStore];
  if (v37)
  {
    uint64_t v38 = v37;
    id v39 = [v37 aa_primaryAppleAccount];

    uint64_t v103 = a2;
    if (v39 && (v39, (v33 & 1) == 0))
    {
      sub_10001D4B0(0, &qword_10163CB60);
      uint64_t v51 = a1 + *(int *)(v113 + 20);
      uint64_t v52 = UUID.uuidString.getter();
      uint64_t v54 = v53;
      id v55 = *(id *)(v36 + 152);
      v56._countAndFlagsBits = v52;
      v56._object = v54;
      Class isa = CKRecordID.init(recordName:zoneID:)(v56, (CKRecordZoneID)v55).super.isa;
      sub_100AB24F0();
      Class v107 = isa;
      uint64_t v106 = (void (*)(uint64_t))sub_101015AE0(isa);
      swift_release();
      uint64_t v58 = swift_allocBox();
      uint64_t v104 = v59;
      uint64_t v105 = (char *)v58;
      uint64_t v60 = *(char **)(v108 + 56);
      uint64_t v61 = v112;
      v108 += 56;
      uint64_t v102 = v60;
      ((void (*)(uint64_t, uint64_t, uint64_t, uint64_t))v60)(v59, 1, 1, v112);
      uint64_t v62 = a1;
      uint64_t v63 = *(char **)(v36 + 160);
      unint64_t v64 = v114;
      uint64_t v65 = v94;
      uint64_t v66 = v51;
      uint64_t v67 = v115;
      (*((void (**)(char *, uint64_t, objc_class *))v114 + 2))(v94, v66, v115);
      if (qword_101637130 != -1) {
        swift_once();
      }
      uint64_t v68 = v111;
      sub_100010324((uint64_t)v111, (uint64_t)qword_10170ED90);
      uint64_t v113 = v62;
      UUID.uuidString.getter();
      uint64_t v69 = v95;
      URL.appendingPathComponent(_:isDirectory:)();
      uint64_t v70 = swift_bridgeObjectRelease();
      __chkstk_darwin(v70);
      *(&v92 - 4) = v63;
      *(&v92 - 3) = v65;
      *(&v92 - 2) = v69;
      uint64_t v71 = (uint64_t)v93;
      OS_dispatch_queue.sync<A>(execute:)();
      (*((void (**)(char *, uint64_t (*)(void)))v109 + 1))(v69, v68);
      (*((void (**)(char *, objc_class *))v64 + 1))(v65, v67);
      ((void (*)(uint64_t, void, uint64_t, uint64_t))v102)(v71, 0, 1, v61);
      sub_100062604(v71, v104, &qword_1016426E8);
      unint64_t v72 = v98;
      Class v73 = v107;
      static os_log_type_t.default.getter();
      uint64_t v74 = swift_allocObject();
      *(_OWORD *)(v74 + 16) = v96;
      id v75 = v73;
      uint64_t v115 = v75;
      id v76 = [(objc_class *)v75 description];
      uint64_t v77 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      uint64_t v79 = v78;

      *(void *)(v74 + 56) = &type metadata for String;
      *(void *)(v74 + 64) = v72;
      *(void *)(v74 + 32) = v77;
      *(void *)(v74 + 40) = v79;
      os_log(_:dso:log:_:_:)();
      swift_bridgeObjectRelease();
      uint64_t v114 = type metadata accessor for LostModeRecord;
      uint64_t v80 = (uint64_t)v101;
      sub_100B30D0C(v113, (uint64_t)v101, (uint64_t (*)(void))type metadata accessor for LostModeRecord);
      uint64_t v81 = *(unsigned __int8 *)(v99 + 80);
      uint64_t v82 = (v81 + 32) & ~v81;
      uint64_t v112 = v81 | 7;
      unint64_t v83 = (v100 + v82 + 7) & 0xFFFFFFFFFFFFFFF8;
      uint64_t v84 = swift_allocObject();
      uint64_t v85 = v105;
      uint64_t v86 = v103;
      *(void *)(v84 + 16) = v105;
      *(void *)(v84 + 24) = v86;
      uint64_t v111 = (uint64_t (*)(void))type metadata accessor for LostModeRecord;
      sub_100B30DB4(v80, v84 + v82, (uint64_t (*)(void))type metadata accessor for LostModeRecord);
      uint64_t v87 = (uint64_t (**)(uint64_t))(v84 + v83);
      uint64_t v109 = sub_100B640E0;
      uint64_t v88 = (uint64_t (*)(uint64_t))v110;
      *uint64_t v87 = sub_100B640E0;
      v87[1] = v88;
      swift_retain();
      swift_retain();
      swift_retain();
      Future.addSuccess(block:)();
      swift_release();
      swift_release();
      sub_100B30D0C(v113, v80, (uint64_t (*)(void))v114);
      uint64_t v89 = swift_allocObject();
      *(void *)(v89 + 16) = v85;
      *(void *)(v89 + 24) = v86;
      sub_100B30DB4(v80, v89 + v82, v111);
      uint64_t v90 = (uint64_t (**)(uint64_t))(v89 + v83);
      *uint64_t v90 = v109;
      v90[1] = v88;
      swift_retain();
      swift_retain();
      swift_retain();
      Future.addFailure(block:)();
      swift_release();
      swift_release();
      swift_release();

      swift_release();
    }
    else
    {
      if (qword_101636F50 != -1) {
        swift_once();
      }
      uint64_t v40 = type metadata accessor for Logger();
      uint64_t v108 = sub_100010324(v40, (uint64_t)qword_10170E9E8);
      BOOL v41 = Logger.logObject.getter();
      os_log_type_t v42 = static os_log_type_t.info.getter();
      BOOL v43 = os_log_type_enabled(v41, v42);
      uint64_t v44 = v111;
      if (v43)
      {
        uint64_t v45 = swift_slowAlloc();
        *(_DWORD *)uint64_t v45 = 67109376;
        LODWORD(v116) = v33;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        *(_WORD *)(v45 + 8) = 1024;
        LODWORD(v116) = v39 != 0;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        _os_log_impl((void *)&_mh_execute_header, v41, v42, "Skipping cloud delete. skipCloudSave: %{BOOL}d, isiCloudSignedIn %{BOOL}d", (uint8_t *)v45, 0xEu);
        uint64_t v36 = a2;
        swift_slowDealloc();
      }

      uint64_t v46 = *(char **)(v36 + 160);
      (*((void (**)(char *, uint64_t, objc_class *))v114 + 2))(v34, a1 + *(int *)(v113 + 20), v115);
      uint64_t v47 = v34;
      if (qword_101637130 != -1) {
        swift_once();
      }
      sub_100010324((uint64_t)v44, (uint64_t)qword_10170ED90);
      UUID.uuidString.getter();
      uint64_t v48 = v104;
      URL.appendingPathComponent(_:isDirectory:)();
      uint64_t v49 = swift_bridgeObjectRelease();
      __chkstk_darwin(v49);
      *(&v92 - 4) = v46;
      *(&v92 - 3) = v47;
      *(&v92 - 2) = (char *)v48;
      uint64_t v50 = (uint64_t)v105;
      OS_dispatch_queue.sync<A>(execute:)();
      (*((void (**)(uint64_t, uint64_t (*)(void)))v109 + 1))(v48, v44);
      (*((void (**)(char *, objc_class *))v114 + 1))(v47, v115);
      sub_100B79EF4(v50);
      QueueSynchronizer.conditionalSync<A>(_:)();
      sub_100A9E7EC(9);
      sub_100A9EE98();
      v106(1);
      sub_100B310AC(v50, (uint64_t (*)(void))type metadata accessor for BeaconStoreFileRecord);
    }
    return swift_release();
  }
  else
  {
    uint64_t result = swift_release();
    __break(1u);
  }
  return result;
}

uint64_t sub_100B3FCB8()
{
  id v0 = [self standardUserDefaults];
  NSString v1 = String._bridgeToObjectiveC()();
  [v0 setInteger:28 forKey:v1];

  static os_log_type_t.default.getter();
  if (qword_101637260 != -1) {
    swift_once();
  }
  sub_10000588C((uint64_t *)&unk_10163AD00);
  uint64_t v2 = swift_allocObject();
  *(_OWORD *)(v2 + 16) = xmmword_101342130;
  *(void *)(v2 + 56) = &type metadata for Int;
  *(void *)(v2 + 64) = &protocol witness table for Int;
  *(void *)(v2 + 32) = 28;
  os_log(_:dso:log:_:_:)();

  return swift_bridgeObjectRelease();
}

void sub_100B3FE00()
{
}

uint64_t sub_100B3FE08(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_100B3FE18()
{
  return swift_release();
}

uint64_t sub_100B3FE20(uint64_t a1, uint64_t a2, void (*a3)(uint64_t), objc_class *a4)
{
  uint64_t v112 = type metadata accessor for BeaconStoreFileRecord();
  uint64_t v108 = *(void *)(v112 - 8);
  __chkstk_darwin(v112);
  uint64_t v105 = (char *)&v92 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v111 = (uint64_t (*)(void))type metadata accessor for URL();
  uint64_t v109 = (uint64_t (*)(uint64_t))*((void *)v111 - 1);
  uint64_t v9 = __chkstk_darwin(v111);
  uint64_t v104 = (uint64_t)&v92 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9);
  uint64_t v95 = (char *)&v92 - v11;
  uint64_t v12 = (objc_class *)type metadata accessor for UUID();
  uint64_t v114 = (uint64_t (*)())*((void *)v12 - 1);
  uint64_t v115 = v12;
  uint64_t v13 = __chkstk_darwin(v12);
  uint64_t v92 = (char *)&v92 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = __chkstk_darwin(v13);
  uint64_t v17 = (char *)&v92 - v16;
  __chkstk_darwin(v15);
  uint64_t v94 = (char *)&v92 - v18;
  uint64_t v19 = sub_10000588C(&qword_1016426E8);
  __chkstk_darwin(v19);
  uint64_t v93 = (char *)&v92 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v21 = type metadata accessor for ShareRecord();
  uint64_t v99 = *(void *)(v21 - 8);
  uint64_t v22 = __chkstk_darwin(v21);
  uint64_t v102 = (char *)&v92 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v100 = v23;
  __chkstk_darwin(v22);
  uint64_t v25 = (char *)&v92 - v24;
  uint64_t v26 = swift_allocObject();
  uint64_t v106 = a3;
  Class v107 = a4;
  *(void *)(v26 + 16) = a3;
  *(void *)(v26 + 24) = a4;
  uint64_t v110 = v26;
  swift_retain();
  static os_log_type_t.default.getter();
  if (qword_101637260 != -1) {
    swift_once();
  }
  uint64_t v97 = sub_10000588C((uint64_t *)&unk_10163AD00);
  uint64_t v27 = swift_allocObject();
  long long v96 = xmmword_101342130;
  *(_OWORD *)(v27 + 16) = xmmword_101342130;
  sub_100B30D0C(a1, (uint64_t)v25, (uint64_t (*)(void))type metadata accessor for ShareRecord);
  uint64_t v101 = v25;
  uint64_t v113 = v21;
  uint64_t v28 = String.init<A>(describing:)();
  uint64_t v30 = v29;
  *(void *)(v27 + 56) = &type metadata for String;
  unint64_t v98 = sub_10000B4CC();
  *(void *)(v27 + 64) = v98;
  *(void *)(v27 + 32) = v28;
  *(void *)(v27 + 40) = v30;
  os_log(_:dso:log:_:_:)();
  swift_bridgeObjectRelease();
  if (qword_101637188 != -1) {
    swift_once();
  }
  unsigned int v31 = (void *)qword_10170EE68;
  id v32 = [self sharedInstance];
  unsigned int v33 = [v32 isInternalBuild];

  uint64_t v34 = v17;
  if (v33)
  {
    NSString v35 = String._bridgeToObjectiveC()();
    unsigned int v33 = [v31 BOOLForKey:v35];
  }
  uint64_t v36 = a2;
  id v37 = [self defaultStore];
  if (v37)
  {
    uint64_t v38 = v37;
    id v39 = [v37 aa_primaryAppleAccount];

    uint64_t v103 = a2;
    if (v39 && (v39, (v33 & 1) == 0))
    {
      sub_10001D4B0(0, &qword_10163CB60);
      uint64_t v51 = a1 + *(int *)(v113 + 20);
      uint64_t v52 = UUID.uuidString.getter();
      uint64_t v54 = v53;
      id v55 = *(id *)(v36 + 152);
      v56._countAndFlagsBits = v52;
      v56._object = v54;
      Class isa = CKRecordID.init(recordName:zoneID:)(v56, (CKRecordZoneID)v55).super.isa;
      sub_100AB24F0();
      Class v107 = isa;
      uint64_t v106 = (void (*)(uint64_t))sub_101015AE0(isa);
      swift_release();
      uint64_t v58 = swift_allocBox();
      uint64_t v104 = v59;
      uint64_t v105 = (char *)v58;
      uint64_t v60 = *(char **)(v108 + 56);
      uint64_t v61 = v112;
      v108 += 56;
      uint64_t v102 = v60;
      ((void (*)(uint64_t, uint64_t, uint64_t, uint64_t))v60)(v59, 1, 1, v112);
      uint64_t v62 = a1;
      uint64_t v63 = *(char **)(v36 + 160);
      unint64_t v64 = v114;
      uint64_t v65 = v94;
      uint64_t v66 = v51;
      uint64_t v67 = v115;
      (*((void (**)(char *, uint64_t, objc_class *))v114 + 2))(v94, v66, v115);
      if (qword_101636878 != -1) {
        swift_once();
      }
      uint64_t v68 = v111;
      sub_100010324((uint64_t)v111, (uint64_t)qword_10170D758);
      uint64_t v113 = v62;
      UUID.uuidString.getter();
      uint64_t v69 = v95;
      URL.appendingPathComponent(_:isDirectory:)();
      uint64_t v70 = swift_bridgeObjectRelease();
      __chkstk_darwin(v70);
      *(&v92 - 4) = v63;
      *(&v92 - 3) = v65;
      *(&v92 - 2) = v69;
      uint64_t v71 = (uint64_t)v93;
      OS_dispatch_queue.sync<A>(execute:)();
      (*((void (**)(char *, uint64_t (*)(void)))v109 + 1))(v69, v68);
      (*((void (**)(char *, objc_class *))v64 + 1))(v65, v67);
      ((void (*)(uint64_t, void, uint64_t, uint64_t))v102)(v71, 0, 1, v61);
      sub_100062604(v71, v104, &qword_1016426E8);
      unint64_t v72 = v98;
      Class v73 = v107;
      static os_log_type_t.default.getter();
      uint64_t v74 = swift_allocObject();
      *(_OWORD *)(v74 + 16) = v96;
      id v75 = v73;
      uint64_t v115 = v75;
      id v76 = [(objc_class *)v75 description];
      uint64_t v77 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      uint64_t v79 = v78;

      *(void *)(v74 + 56) = &type metadata for String;
      *(void *)(v74 + 64) = v72;
      *(void *)(v74 + 32) = v77;
      *(void *)(v74 + 40) = v79;
      os_log(_:dso:log:_:_:)();
      swift_bridgeObjectRelease();
      uint64_t v114 = type metadata accessor for ShareRecord;
      uint64_t v80 = (uint64_t)v101;
      sub_100B30D0C(v113, (uint64_t)v101, (uint64_t (*)(void))type metadata accessor for ShareRecord);
      uint64_t v81 = *(unsigned __int8 *)(v99 + 80);
      uint64_t v82 = (v81 + 32) & ~v81;
      uint64_t v112 = v81 | 7;
      unint64_t v83 = (v100 + v82 + 7) & 0xFFFFFFFFFFFFFFF8;
      uint64_t v84 = swift_allocObject();
      uint64_t v85 = v105;
      uint64_t v86 = v103;
      *(void *)(v84 + 16) = v105;
      *(void *)(v84 + 24) = v86;
      uint64_t v111 = (uint64_t (*)(void))type metadata accessor for ShareRecord;
      sub_100B30DB4(v80, v84 + v82, (uint64_t (*)(void))type metadata accessor for ShareRecord);
      uint64_t v87 = (uint64_t (**)(uint64_t))(v84 + v83);
      uint64_t v109 = sub_100B640E0;
      uint64_t v88 = (uint64_t (*)(uint64_t))v110;
      *uint64_t v87 = sub_100B640E0;
      v87[1] = v88;
      swift_retain();
      swift_retain();
      swift_retain();
      Future.addSuccess(block:)();
      swift_release();
      swift_release();
      sub_100B30D0C(v113, v80, (uint64_t (*)(void))v114);
      uint64_t v89 = swift_allocObject();
      *(void *)(v89 + 16) = v85;
      *(void *)(v89 + 24) = v86;
      sub_100B30DB4(v80, v89 + v82, v111);
      uint64_t v90 = (uint64_t (**)(uint64_t))(v89 + v83);
      *uint64_t v90 = v109;
      v90[1] = v88;
      swift_retain();
      swift_retain();
      swift_retain();
      Future.addFailure(block:)();
      swift_release();
      swift_release();
      swift_release();

      swift_release();
    }
    else
    {
      if (qword_101636F50 != -1) {
        swift_once();
      }
      uint64_t v40 = type metadata accessor for Logger();
      uint64_t v108 = sub_100010324(v40, (uint64_t)qword_10170E9E8);
      BOOL v41 = Logger.logObject.getter();
      os_log_type_t v42 = static os_log_type_t.info.getter();
      BOOL v43 = os_log_type_enabled(v41, v42);
      uint64_t v44 = v111;
      if (v43)
      {
        uint64_t v45 = swift_slowAlloc();
        *(_DWORD *)uint64_t v45 = 67109376;
        LODWORD(v116) = v33;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        *(_WORD *)(v45 + 8) = 1024;
        LODWORD(v116) = v39 != 0;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        _os_log_impl((void *)&_mh_execute_header, v41, v42, "Skipping cloud delete. skipCloudSave: %{BOOL}d, isiCloudSignedIn %{BOOL}d", (uint8_t *)v45, 0xEu);
        uint64_t v36 = a2;
        swift_slowDealloc();
      }

      uint64_t v46 = *(char **)(v36 + 160);
      (*((void (**)(char *, uint64_t, objc_class *))v114 + 2))(v34, a1 + *(int *)(v113 + 20), v115);
      uint64_t v47 = v34;
      if (qword_101636878 != -1) {
        swift_once();
      }
      sub_100010324((uint64_t)v44, (uint64_t)qword_10170D758);
      UUID.uuidString.getter();
      uint64_t v48 = v104;
      URL.appendingPathComponent(_:isDirectory:)();
      uint64_t v49 = swift_bridgeObjectRelease();
      __chkstk_darwin(v49);
      *(&v92 - 4) = v46;
      *(&v92 - 3) = v47;
      *(&v92 - 2) = (char *)v48;
      uint64_t v50 = (uint64_t)v105;
      OS_dispatch_queue.sync<A>(execute:)();
      (*((void (**)(uint64_t, uint64_t (*)(void)))v109 + 1))(v48, v44);
      (*((void (**)(char *, objc_class *))v114 + 1))(v47, v115);
      sub_100B79EF4(v50);
      QueueSynchronizer.conditionalSync<A>(_:)();
      sub_100A9E7EC(9);
      sub_100A9EE98();
      v106(1);
      sub_100B310AC(v50, (uint64_t (*)(void))type metadata accessor for BeaconStoreFileRecord);
    }
    return swift_release();
  }
  else
  {
    uint64_t result = swift_release();
    __break(1u);
  }
  return result;
}

void sub_100B40F10(uint64_t a1, char a2, void (*a3)(uint64_t (*)()), void (*a4)(uint64_t (*)()), uint64_t a5, void *a6)
{
  uint64_t v54 = a5;
  id v55 = a3;
  Swift::String v56 = a4;
  uint64_t v53 = a1;
  uint64_t v50 = (uint64_t (*)(void))sub_10000588C(&qword_10164B300);
  __chkstk_darwin(v50);
  uint64_t v51 = (uint64_t (*)())((char *)&v46 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v9 = type metadata accessor for BeaconNamingRecord();
  uint64_t v49 = *(void **)(v9 - 8);
  uint64_t v10 = v49[8];
  uint64_t v11 = __chkstk_darwin(v9);
  uint64_t v12 = (char *)&v46 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v11);
  uint64_t v52 = (uint64_t)&v46 - v13;
  uint64_t v57 = swift_allocObject();
  *(void *)(v57 + 16) = a6;
  id v48 = a6;
  static os_log_type_t.default.getter();
  if (qword_101637260 != -1) {
    swift_once();
  }
  uint64_t v47 = sub_10000588C((uint64_t *)&unk_10163AD00);
  uint64_t v14 = swift_allocObject();
  uint64_t v15 = v14;
  long long v46 = xmmword_101342130;
  *(_OWORD *)(v14 + 16) = xmmword_101342130;
  if (a2) {
    uint64_t v16 = 1702195828;
  }
  else {
    uint64_t v16 = 0x65736C6166;
  }
  if (a2) {
    unint64_t v17 = 0xE400000000000000;
  }
  else {
    unint64_t v17 = 0xE500000000000000;
  }
  *(void *)(v14 + 56) = &type metadata for String;
  *(void *)(v14 + 64) = sub_10000B4CC();
  *(void *)(v15 + 32) = v16;
  *(void *)(v15 + 40) = v17;
  os_log(_:dso:log:_:_:)();
  swift_bridgeObjectRelease();
  if (a2)
  {
    uint64_t v19 = v53;
    Class v20 = sub_101154D08(v53);
    uint64_t v21 = v54;
    Class v22 = v20;
    v58[0] = v22;
    uint64_t v23 = v52;
    sub_100B30D0C(v19, v52, (uint64_t (*)(void))type metadata accessor for BeaconNamingRecord);
    *(void *)(v23 + *(int *)(v9 + 28)) = [v48 roleId:v46];
    sub_101076E58(v58, v23);
    uint64_t v24 = QueueSynchronizer.conditionalSync<A>(_:)();
    __chkstk_darwin(v24);
    *((void *)&v46 - 2) = v25;
    *((void *)&v46 - 1) = v23;
    OS_dispatch_queue.sync<A>(execute:)();
    QueueSynchronizer.conditionalSync<A>(_:)();
    sub_100A9E7EC(8);
    BOOL v43 = v51;
    sub_100B30D0C(v23, (uint64_t)v51, (uint64_t (*)(void))type metadata accessor for BeaconNamingRecord);
    swift_storeEnumTagMultiPayload();
    v55(v43);
    sub_10001DAB4((uint64_t)v43, &qword_10164B300);
    uint64_t v44 = type metadata accessor for Transaction();
    __chkstk_darwin(v44);
    *((void *)&v46 - 4) = v21;
    *((void *)&v46 - 3) = v58;
    *((void *)&v46 - 2) = v19;
    static Transaction.named<A>(_:with:)();
    sub_100B310AC(v23, (uint64_t (*)(void))type metadata accessor for BeaconNamingRecord);
    id v45 = v58[0];
    swift_release();
  }
  else
  {
    uint64_t v27 = v53;
    Class v28 = sub_101154D08(v53);
    uint64_t v29 = v54;
    Class v30 = v28;
    sub_100AB24F0();
    uint64_t v51 = type metadata accessor for BeaconNamingRecord;
    sub_100B30D0C(v27, (uint64_t)v12, (uint64_t (*)(void))type metadata accessor for BeaconNamingRecord);
    uint64_t v31 = *((unsigned __int8 *)v49 + 80);
    uint64_t v52 = v31 | 7;
    uint64_t v32 = swift_allocObject();
    uint64_t v33 = v57;
    *(void *)(v32 + 16) = sub_100B5B020;
    *(void *)(v32 + 24) = v33;
    uint64_t v50 = (uint64_t (*)(void))type metadata accessor for BeaconNamingRecord;
    sub_100B30DB4((uint64_t)v12, v32 + ((v31 + 32) & ~v31), (uint64_t (*)(void))type metadata accessor for BeaconNamingRecord);
    swift_retain();
    sub_101017624(v30, (void (*)(id *))sub_100B5B02C, v32);
    swift_release();
    swift_release();
    uint64_t v34 = swift_allocObject();
    uint64_t v35 = v27;
    uint64_t v49 = v30;
    uint64_t v36 = v55;
    uint64_t v37 = v29;
    uint64_t v38 = v56;
    *(void *)(v34 + 16) = v55;
    *(void *)(v34 + 24) = v38;
    swift_retain();
    Future.addFailure(block:)();
    swift_release();
    swift_release();
    sub_100B30D0C(v35, (uint64_t)v12, (uint64_t (*)(void))v51);
    uint64_t v39 = (v31 + 16) & ~v31;
    unint64_t v40 = (v10 + v39 + 7) & 0xFFFFFFFFFFFFFFF8;
    uint64_t v41 = swift_allocObject();
    sub_100B30DB4((uint64_t)v12, v41 + v39, v50);
    *(void *)(v41 + v40) = v37;
    os_log_type_t v42 = (void (**)(uint64_t (*)()))(v41 + ((v40 + 15) & 0xFFFFFFFFFFFFFFF8));
    NSObject *v42 = v36;
    v42[1] = v38;
    swift_retain();
    swift_retain();
    Future.addSuccess(block:)();
    swift_release();

    swift_release();
    swift_release();
    swift_release();
  }
}

void sub_100B416AC(uint64_t a1, uint64_t a2, void (*a3)(void), uint64_t a4)
{
  uint64_t v105 = type metadata accessor for BeaconStoreFileRecord();
  uint64_t v102 = *(void *)(v105 - 8);
  __chkstk_darwin(v105);
  uint64_t v99 = (char *)v88 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = (uint64_t (*)(void))type metadata accessor for URL();
  uint64_t v103 = (uint64_t (*)(uint64_t))*((void *)v9 - 1);
  uint64_t v104 = (uint64_t (*)())v9;
  uint64_t v10 = __chkstk_darwin(v9);
  unint64_t v98 = (char *)v88 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v10);
  uint64_t v92 = (char *)v88 - v12;
  uint64_t v13 = (void *)type metadata accessor for UUID();
  uint64_t v109 = (uint64_t (*)())*(v13 - 1);
  id v110 = v13;
  uint64_t v14 = __chkstk_darwin(v13);
  v88[1] = (char *)v88 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = __chkstk_darwin(v14);
  uint64_t v18 = (char *)v88 - v17;
  __chkstk_darwin(v16);
  id v91 = (char *)v88 - v19;
  uint64_t v89 = sub_10000588C(&qword_1016426E8);
  __chkstk_darwin(v89);
  uint64_t v90 = (char *)v88 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v21 = type metadata accessor for BeaconNamingRecord();
  uint64_t v94 = *(void *)(v21 - 8);
  uint64_t v22 = *(void *)(v94 + 64);
  uint64_t v23 = __chkstk_darwin(v21);
  long long v96 = (char *)v88 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v23);
  uint64_t v25 = (char *)v88 - v24;
  uint64_t v26 = swift_allocObject();
  uint64_t v100 = a3;
  uint64_t v101 = a4;
  *(void *)(v26 + 16) = a3;
  *(void *)(v26 + 24) = a4;
  uint64_t v106 = v26;
  swift_retain();
  static os_log_type_t.default.getter();
  if (qword_101637260 != -1) {
    swift_once();
  }
  uint64_t v97 = sub_10000588C((uint64_t *)&unk_10163AD00);
  uint64_t v27 = swift_allocObject();
  long long v93 = xmmword_101342130;
  *(_OWORD *)(v27 + 16) = xmmword_101342130;
  sub_100B30D0C(a1, (uint64_t)v25, (uint64_t (*)(void))type metadata accessor for BeaconNamingRecord);
  uint64_t v95 = v25;
  uint64_t v108 = v21;
  uint64_t v28 = String.init<A>(describing:)();
  uint64_t v30 = v29;
  *(void *)(v27 + 56) = &type metadata for String;
  unint64_t v31 = sub_10000B4CC();
  *(void *)(v27 + 64) = v31;
  *(void *)(v27 + 32) = v28;
  *(void *)(v27 + 40) = v30;
  os_log(_:dso:log:_:_:)();
  swift_bridgeObjectRelease();
  if (qword_101637188 != -1) {
    swift_once();
  }
  uint64_t v32 = (void *)qword_10170EE68;
  id v33 = [self sharedInstance];
  unsigned int v34 = [v33 isInternalBuild];

  if (v34)
  {
    NSString v35 = String._bridgeToObjectiveC()();
    unsigned int v36 = [v32 BOOLForKey:v35];
  }
  else
  {
    unsigned int v36 = 0;
  }
  id v37 = [self defaultStore];
  uint64_t v38 = v108;
  if (v37)
  {
    uint64_t v39 = v37;
    id v40 = [v37 aa_primaryAppleAccount];

    uint64_t v107 = a1;
    if (v40 && (v40, (v36 & 1) == 0))
    {
      uint64_t v100 = (void (*)(void))v31;
      sub_10001D4B0(0, &qword_10163CB60);
      uint64_t v52 = a1 + *(int *)(v38 + 20);
      uint64_t v53 = UUID.uuidString.getter();
      id v55 = v54;
      id v56 = *(id *)(a2 + 152);
      v57._countAndFlagsBits = v53;
      v57._object = v55;
      Class isa = CKRecordID.init(recordName:zoneID:)(v57, (CKRecordZoneID)v56).super.isa;
      sub_100AB24F0(isa);
      long long v96 = (char *)isa;
      uint64_t v99 = (char *)sub_101015AE0(isa);
      swift_release();
      unint64_t v98 = (char *)swift_allocBox();
      uint64_t v59 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v102 + 56);
      uint64_t v89 = v60;
      uint64_t v61 = v105;
      v102 += 56;
      v59(v60, 1, 1, v105);
      uint64_t v62 = *(void *)(a2 + 160);
      uint64_t v63 = v91;
      (*((void (**)(char *, uint64_t, id))v109 + 2))(v91, v52, v110);
      uint64_t v65 = v92;
      sub_100DBF2A0();
      uint64_t v101 = v22;
      uint64_t v108 = a2;
      __chkstk_darwin(v66);
      v88[-4] = v62;
      v88[-3] = v63;
      v88[-2] = v65;
      uint64_t v67 = (uint64_t)v90;
      OS_dispatch_queue.sync<A>(execute:)();
      (*((void (**)(char *, uint64_t (*)()))v103 + 1))(v65, v104);
      (*((void (**)(char *, id))v109 + 1))(v63, v110);
      v59(v67, 0, 1, v61);
      sub_100062604(v67, v89, &qword_1016426E8);
      uint64_t v68 = v107;
      uint64_t v69 = v100;
      uint64_t v70 = v96;
      static os_log_type_t.default.getter();
      uint64_t v71 = swift_allocObject();
      *(_OWORD *)(v71 + 16) = v93;
      id v72 = v70;
      id v110 = v72;
      id v73 = [v72 description];
      uint64_t v74 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      uint64_t v76 = v75;

      *(void *)(v71 + 56) = &type metadata for String;
      *(void *)(v71 + 64) = v69;
      *(void *)(v71 + 32) = v74;
      *(void *)(v71 + 40) = v76;
      os_log(_:dso:log:_:_:)();
      swift_bridgeObjectRelease();
      uint64_t v109 = type metadata accessor for BeaconNamingRecord;
      uint64_t v77 = (uint64_t)v95;
      sub_100B30D0C(v68, (uint64_t)v95, (uint64_t (*)(void))type metadata accessor for BeaconNamingRecord);
      uint64_t v78 = *(unsigned __int8 *)(v94 + 80);
      uint64_t v79 = (v78 + 32) & ~v78;
      uint64_t v105 = v78 | 7;
      unint64_t v80 = (v101 + v79 + 7) & 0xFFFFFFFFFFFFFFF8;
      uint64_t v81 = swift_allocObject();
      uint64_t v82 = v98;
      uint64_t v83 = v108;
      *(void *)(v81 + 16) = v98;
      *(void *)(v81 + 24) = v83;
      uint64_t v104 = type metadata accessor for BeaconNamingRecord;
      sub_100B30DB4(v77, v81 + v79, (uint64_t (*)(void))type metadata accessor for BeaconNamingRecord);
      uint64_t v84 = (uint64_t (**)(uint64_t))(v81 + v80);
      uint64_t v103 = sub_100B640E0;
      uint64_t v85 = (uint64_t (*)(uint64_t))v106;
      *uint64_t v84 = sub_100B640E0;
      v84[1] = v85;
      swift_retain();
      swift_retain();
      swift_retain();
      Future.addSuccess(block:)();
      swift_release();
      swift_release();
      sub_100B30D0C(v107, v77, (uint64_t (*)(void))v109);
      uint64_t v86 = swift_allocObject();
      *(void *)(v86 + 16) = v82;
      *(void *)(v86 + 24) = v83;
      sub_100B30DB4(v77, v86 + v79, (uint64_t (*)(void))v104);
      uint64_t v87 = (uint64_t (**)(uint64_t))(v86 + v80);
      *uint64_t v87 = v103;
      v87[1] = v85;
      swift_retain();
      swift_retain();
      swift_retain();
      Future.addFailure(block:)();
      swift_release();
      swift_release();
      swift_release();

      swift_release();
    }
    else
    {
      if (qword_101636F50 != -1) {
        swift_once();
      }
      uint64_t v41 = type metadata accessor for Logger();
      sub_100010324(v41, (uint64_t)qword_10170E9E8);
      os_log_type_t v42 = Logger.logObject.getter();
      os_log_type_t v43 = static os_log_type_t.info.getter();
      if (os_log_type_enabled(v42, v43))
      {
        uint64_t v44 = a2;
        BOOL v45 = v40 != 0;
        uint64_t v46 = swift_slowAlloc();
        *(_DWORD *)uint64_t v46 = 67109376;
        LODWORD(v111) = v36;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        *(_WORD *)(v46 + 8) = 1024;
        LODWORD(v111) = v45;
        a2 = v44;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        _os_log_impl((void *)&_mh_execute_header, v42, v43, "Skipping cloud delete. skipCloudSave: %{BOOL}d, isiCloudSignedIn %{BOOL}d", (uint8_t *)v46, 0xEu);
        swift_slowDealloc();
      }

      uint64_t v47 = *(void *)(a2 + 160);
      (*((void (**)(char *, uint64_t, id))v109 + 2))(v18, v107 + *(int *)(v108 + 20), v110);
      uint64_t v49 = v98;
      sub_100DBF2A0();
      __chkstk_darwin(v50);
      v88[-4] = v47;
      v88[-3] = v18;
      v88[-2] = v49;
      uint64_t v51 = (uint64_t)v99;
      OS_dispatch_queue.sync<A>(execute:)();
      (*((void (**)(char *, uint64_t (*)()))v103 + 1))(v49, v104);
      (*((void (**)(char *, id))v109 + 1))(v18, v110);
      sub_100B79EF4(v51);
      QueueSynchronizer.conditionalSync<A>(_:)();
      sub_100A9E7EC(9);
      sub_100A9EE98();
      v100(1);
      sub_100B310AC(v51, (uint64_t (*)(void))type metadata accessor for BeaconStoreFileRecord);
    }
    swift_release();
  }
  else
  {
    swift_release();
    __break(1u);
    swift_release();
    __break(1u);
  }
}

void sub_100B42710(uint64_t a1, int a2, uint64_t a3, uint64_t a4, const void *a5)
{
  uint64_t v51 = a1;
  uint64_t v47 = sub_10000588C(&qword_10164B300);
  __chkstk_darwin(v47);
  uint64_t v10 = &v44[-((v9 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v11 = type metadata accessor for BeaconNamingRecord();
  __chkstk_darwin(v11 - 8);
  uint64_t v52 = &v44[-((v12 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v13 = swift_allocObject();
  *(void *)(v13 + 16) = a5;
  uint64_t v14 = (void *)swift_allocObject();
  v14[2] = sub_100287680;
  v14[3] = v13;
  v14[4] = a4;
  _Block_copy(a5);
  _Block_copy(a5);
  uint64_t v15 = qword_101636F50;
  uint64_t v50 = v13;
  swift_retain();
  swift_retain();
  if (v15 != -1) {
    swift_once();
  }
  uint64_t v16 = type metadata accessor for Logger();
  uint64_t v49 = sub_100010324(v16, (uint64_t)qword_10170E9E8);
  uint64_t v17 = Logger.logObject.getter();
  os_log_type_t v18 = static os_log_type_t.default.getter();
  BOOL v19 = os_log_type_enabled(v17, v18);
  uint64_t v48 = a4;
  if (v19)
  {
    uint64_t v20 = (uint8_t *)swift_slowAlloc();
    *(_DWORD *)uint64_t v20 = 67109120;
    LODWORD(v53) = a2 & 1;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl((void *)&_mh_execute_header, v17, v18, "Saving record. Disk First? %{BOOL}d", v20, 8u);
    swift_slowDealloc();
  }

  if (qword_101637188 != -1) {
    swift_once();
  }
  uint64_t v21 = (void *)qword_10170EE68;
  id v22 = [self sharedInstance];
  unsigned int v23 = [v22 isInternalBuild];

  if (v23)
  {
    NSString v24 = String._bridgeToObjectiveC()();
    unsigned int v25 = [v21 BOOLForKey:v24];
  }
  else
  {
    unsigned int v25 = 0;
  }
  id v26 = [self defaultStore];
  if (v26)
  {
    uint64_t v27 = v26;
    id v28 = [v26 aa_primaryAppleAccount];

    if (v28 && (v28, ((a2 | v25) & 1) == 0))
    {
      sub_100AC43A4(v51, (uint64_t)sub_100B5B014, (uint64_t)v14);
    }
    else
    {
      unsigned int v45 = v25;
      uint64_t v46 = v14;
      uint64_t v29 = v52;
      sub_100B30D0C(v51, (uint64_t)v52, (uint64_t (*)(void))type metadata accessor for BeaconNamingRecord);
      uint64_t v30 = QueueSynchronizer.conditionalSync<A>(_:)();
      __chkstk_darwin(v30);
      *(void *)&v44[-16] = v31;
      *(void *)&v44[-8] = v29;
      OS_dispatch_queue.sync<A>(execute:)();
      uint64_t v32 = Logger.logObject.getter();
      os_log_type_t v33 = static os_log_type_t.default.getter();
      BOOL v34 = os_log_type_enabled(v32, v33);
      uint64_t v35 = v48;
      if (v34)
      {
        unsigned int v36 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)unsigned int v36 = 0;
        _os_log_impl((void *)&_mh_execute_header, v32, v33, "Saved LocalStorageBacked record. Calling completion.", v36, 2u);
        swift_slowDealloc();
      }

      uint64_t v37 = v51;
      sub_100B30D0C(v51, (uint64_t)v10, (uint64_t (*)(void))type metadata accessor for BeaconNamingRecord);
      swift_storeEnumTagMultiPayload();
      _Block_copy(a5);
      sub_1006BDA38((uint64_t)v10, v35, (uint64_t)a5);
      _Block_release(a5);
      sub_10001DAB4((uint64_t)v10, &qword_10164B300);
      unsigned int v38 = v45;
      if (((v28 != 0) & ~v45) != 0)
      {
        uint64_t v42 = type metadata accessor for Transaction();
        __chkstk_darwin(v42);
        *(void *)&v44[-32] = a3;
        *(void *)&v44[-24] = v37;
        os_log_type_t v43 = v52;
        *(void *)&v44[-16] = v52;
        static Transaction.named<A>(_:with:)();
        sub_100B310AC((uint64_t)v43, (uint64_t (*)(void))type metadata accessor for BeaconNamingRecord);
      }
      else
      {
        uint64_t v39 = Logger.logObject.getter();
        os_log_type_t v40 = static os_log_type_t.info.getter();
        if (os_log_type_enabled(v39, v40))
        {
          uint64_t v41 = swift_slowAlloc();
          *(_DWORD *)uint64_t v41 = 67109376;
          LODWORD(v53) = v38;
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          *(_WORD *)(v41 + 8) = 1024;
          LODWORD(v53) = v28 != 0;
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          _os_log_impl((void *)&_mh_execute_header, v39, v40, "Skipping save to cloud. skipCloudSave: %{BOOL}d, isiCloudSignedIn %{BOOL}d", (uint8_t *)v41, 0xEu);
          swift_slowDealloc();
        }

        sub_100B310AC((uint64_t)v52, (uint64_t (*)(void))type metadata accessor for BeaconNamingRecord);
      }
    }
    swift_release();
    swift_release();
    _Block_release(a5);
  }
  else
  {
    swift_release();
    _Block_release(a5);
    _Block_release(a5);
    swift_release();
    __break(1u);
  }
}

void sub_100B42F98(uint64_t a1, int a2, uint64_t a3, void *a4, uint64_t a5)
{
  uint64_t v51 = a1;
  uint64_t v9 = sub_10000588C(&qword_10164B300);
  __chkstk_darwin(v9);
  uint64_t v11 = &v45[-((v10 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v12 = type metadata accessor for BeaconNamingRecord();
  __chkstk_darwin(v12 - 8);
  uint64_t v52 = &v45[-((v13 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v14 = swift_allocObject();
  *(void *)(v14 + 16) = a4;
  *(void *)(v14 + 24) = a5;
  uint64_t v50 = v14;
  uint64_t v15 = qword_101636F50;
  uint64_t v16 = a4;
  swift_retain();
  if (v15 != -1) {
    swift_once();
  }
  uint64_t v17 = type metadata accessor for Logger();
  uint64_t v48 = sub_100010324(v17, (uint64_t)qword_10170E9E8);
  os_log_type_t v18 = Logger.logObject.getter();
  os_log_type_t v19 = static os_log_type_t.default.getter();
  BOOL v20 = os_log_type_enabled(v18, v19);
  uint64_t v49 = v16;
  if (v20)
  {
    uint64_t v21 = (uint8_t *)swift_slowAlloc();
    *(_DWORD *)uint64_t v21 = 67109120;
    LODWORD(v53) = a2 & 1;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl((void *)&_mh_execute_header, v18, v19, "Saving record. Disk First? %{BOOL}d", v21, 8u);
    swift_slowDealloc();
  }

  if (qword_101637188 != -1) {
    swift_once();
  }
  id v22 = (void *)qword_10170EE68;
  id v23 = [self sharedInstance];
  unsigned int v24 = [v23 isInternalBuild];

  if (v24)
  {
    NSString v25 = String._bridgeToObjectiveC()();
    unsigned int v26 = [v22 BOOLForKey:v25];
  }
  else
  {
    unsigned int v26 = 0;
  }
  id v27 = [self defaultStore];
  if (v27)
  {
    id v28 = v27;
    id v29 = [v27 aa_primaryAppleAccount];

    if (v29 && (v29, ((a2 | v26) & 1) == 0))
    {
      sub_100AC43A4(v51, (uint64_t)sub_100B5ABBC, v50);
    }
    else
    {
      unsigned int v46 = v26;
      uint64_t v47 = v9;
      uint64_t v30 = a5;
      uint64_t v31 = v52;
      sub_100B30D0C(v51, (uint64_t)v52, (uint64_t (*)(void))type metadata accessor for BeaconNamingRecord);
      uint64_t v32 = QueueSynchronizer.conditionalSync<A>(_:)();
      __chkstk_darwin(v32);
      *(void *)&v45[-16] = v33;
      *(void *)&v45[-8] = v31;
      OS_dispatch_queue.sync<A>(execute:)();
      BOOL v34 = Logger.logObject.getter();
      os_log_type_t v35 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v34, v35))
      {
        unsigned int v36 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)unsigned int v36 = 0;
        _os_log_impl((void *)&_mh_execute_header, v34, v35, "Saved LocalStorageBacked record. Calling completion.", v36, 2u);
        swift_slowDealloc();
      }

      uint64_t v37 = v51;
      sub_100B30D0C(v51, (uint64_t)v11, (uint64_t (*)(void))type metadata accessor for BeaconNamingRecord);
      swift_storeEnumTagMultiPayload();
      sub_10068E440((uint64_t)v11, v49, v30);
      sub_10001DAB4((uint64_t)v11, &qword_10164B300);
      unsigned int v38 = v46;
      if (((v29 != 0) & ~v46) != 0)
      {
        uint64_t v43 = type metadata accessor for Transaction();
        __chkstk_darwin(v43);
        *(void *)&v45[-32] = a3;
        *(void *)&v45[-24] = v37;
        uint64_t v44 = v52;
        *(void *)&v45[-16] = v52;
        static Transaction.named<A>(_:with:)();
        uint64_t v42 = v44;
      }
      else
      {
        uint64_t v39 = Logger.logObject.getter();
        os_log_type_t v40 = static os_log_type_t.info.getter();
        if (os_log_type_enabled(v39, v40))
        {
          uint64_t v41 = swift_slowAlloc();
          *(_DWORD *)uint64_t v41 = 67109376;
          LODWORD(v53) = v38;
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          *(_WORD *)(v41 + 8) = 1024;
          LODWORD(v53) = v29 != 0;
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          _os_log_impl((void *)&_mh_execute_header, v39, v40, "Skipping save to cloud. skipCloudSave: %{BOOL}d, isiCloudSignedIn %{BOOL}d", (uint8_t *)v41, 0xEu);
          swift_slowDealloc();
        }

        uint64_t v42 = v52;
      }
      sub_100B310AC((uint64_t)v42, (uint64_t (*)(void))type metadata accessor for BeaconNamingRecord);
    }
    swift_release();
  }
  else
  {
    swift_release();

    __break(1u);
  }
}

uint64_t sub_100B4378C(uint64_t a1, void (*a2)(uint64_t), uint64_t a3)
{
  uint64_t v6 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v26 = *(void *)(v6 - 8);
  uint64_t v27 = v6;
  __chkstk_darwin(v6);
  unsigned int v24 = (char *)&v21 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v25 = type metadata accessor for DispatchQoS();
  uint64_t v23 = *(void *)(v25 - 8);
  __chkstk_darwin(v25);
  id v22 = (char *)&v21 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = swift_allocObject();
  uint64_t v21 = a2;
  *(void *)(v9 + 16) = a2;
  *(void *)(v9 + 24) = a3;
  swift_retain();
  uint64_t v10 = sub_100AB24F0();
  uint64_t v11 = (void *)swift_allocObject();
  v11[2] = sub_100B5C0E0;
  v11[3] = v9;
  v11[4] = a1;
  swift_retain_n();
  uint64_t v28 = a1;
  swift_retain_n();
  QueueSynchronizer.conditionalSync<A>(_:)();
  int v12 = LOBYTE(aBlock[0]);
  static os_log_type_t.default.getter();
  if (qword_101637270 != -1) {
    swift_once();
  }
  sub_10000588C((uint64_t *)&unk_10163AD00);
  uint64_t v13 = swift_allocObject();
  *(_OWORD *)(v13 + 16) = xmmword_101342130;
  *(void *)(v13 + 56) = &type metadata for Bool;
  *(void *)(v13 + 64) = &protocol witness table for Bool;
  *(unsigned char *)(v13 + 32) = v12;
  os_log(_:dso:log:_:_:)();
  swift_bridgeObjectRelease();
  static os_log_type_t.default.getter();
  if (v12)
  {
    uint64_t v14 = os_log(_:dso:log:_:_:)();
    v21(v14);
    swift_release();
    swift_release();
    swift_release_n();
  }
  else
  {
    os_log(_:dso:log:_:_:)();
    static os_log_type_t.default.getter();
    os_log(_:dso:log:_:_:)();
    uint64_t v21 = *(void (**)(uint64_t))(v10 + 64);
    uint64_t v15 = (void *)swift_allocObject();
    v15[2] = v10;
    v15[3] = sub_100B565F4;
    v15[4] = v11;
    aBlock[4] = sub_100B64438;
    aBlock[5] = v15;
    aBlock[0] = _NSConcreteStackBlock;
    aBlock[1] = 1107296256;
    aBlock[2] = sub_1004B5480;
    aBlock[3] = &unk_1015EA018;
    uint64_t v16 = _Block_copy(aBlock);
    swift_retain();
    swift_retain();
    uint64_t v17 = v22;
    static DispatchQoS.unspecified.getter();
    id v29 = _swiftEmptyArrayStorage;
    sub_100B22DA4((unint64_t *)&qword_10163B7E0, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
    sub_10000588C((uint64_t *)&unk_10163F350);
    sub_100062734((unint64_t *)&qword_10163B7F0, (uint64_t *)&unk_10163F350);
    os_log_type_t v18 = v24;
    uint64_t v19 = v27;
    dispatch thunk of SetAlgebra.init<A>(_:)();
    OS_dispatch_queue.async(group:qos:flags:execute:)();
    _Block_release(v16);
    (*(void (**)(char *, uint64_t))(v26 + 8))(v18, v19);
    (*(void (**)(char *, uint64_t))(v23 + 8))(v17, v25);
    swift_release();
    swift_release();
    swift_release_n();
    swift_release();
  }
  return swift_release();
}

void *sub_100B43CC4(uint64_t a1, int a2, int a3, int a4, uint64_t a5, uint64_t a6)
{
  int v48 = a3;
  LODWORD(v49) = a4;
  int v47 = a2;
  uint64_t v9 = type metadata accessor for StableIdentifier();
  __chkstk_darwin(v9);
  uint64_t v11 = (char *)&v46 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = sub_10000588C(&qword_10163B9F0);
  __chkstk_darwin(v12 - 8);
  uint64_t v14 = (char *)&v46 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = type metadata accessor for OwnedBeaconRecord();
  uint64_t v16 = *(void *)(v15 - 8);
  uint64_t v17 = __chkstk_darwin(v15);
  uint64_t v19 = (char *)&v46 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v17);
  uint64_t v21 = (char *)&v46 - v20;
  v52[3] = a5;
  v52[4] = a6;
  id v22 = sub_10001D958(v52);
  (*(void (**)(uint64_t *, uint64_t, uint64_t))(*(void *)(a5 - 8) + 16))(v22, a1, a5);
  sub_10001D010((uint64_t)v52, (uint64_t)v51);
  sub_10000588C((uint64_t *)&unk_10164DBF0);
  int v23 = swift_dynamicCast();
  unsigned int v24 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v16 + 56);
  if (!v23)
  {
    v24(v14, 1, 1, v15);
    sub_10001DAB4((uint64_t)v14, &qword_10163B9F0);
    goto LABEL_16;
  }
  v24(v14, 0, 1, v15);
  sub_100B30DB4((uint64_t)v14, (uint64_t)v21, (uint64_t (*)(void))type metadata accessor for OwnedBeaconRecord);
  sub_100B30D0C((uint64_t)&v21[*(int *)(v15 + 24)], (uint64_t)v11, (uint64_t (*)(void))type metadata accessor for StableIdentifier);
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload == 2)
  {
    uint64_t v31 = sub_10000588C(&qword_1016555E0);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v32 = (unsigned __int8 *)&v11[*(int *)(v31 + 96)];
    unsigned __int8 v33 = *v32;
    unsigned __int8 v34 = v32[1];
    swift_bridgeObjectRelease();
    if ((v34 & 1) == 0)
    {
      char v28 = v47 & 1;
      char v29 = v48 & 1;
      char v30 = v49 & 1;
      unsigned __int8 v27 = v33;
      goto LABEL_13;
    }
    sub_100B310AC((uint64_t)v21, (uint64_t (*)(void))type metadata accessor for OwnedBeaconRecord);
    uint64_t v35 = type metadata accessor for UUID();
    (*(void (**)(char *, uint64_t))(*(void *)(v35 - 8) + 8))(v11, v35);
LABEL_16:
    uint64_t v43 = &_swiftEmptySetSingleton;
    goto LABEL_17;
  }
  if (EnumCaseMultiPayload != 3)
  {
    if (qword_101636F60 != -1) {
      swift_once();
    }
    uint64_t v36 = type metadata accessor for Logger();
    sub_100010324(v36, (uint64_t)qword_10170EA18);
    sub_100B30D0C((uint64_t)v21, (uint64_t)v19, (uint64_t (*)(void))type metadata accessor for OwnedBeaconRecord);
    uint64_t v37 = Logger.logObject.getter();
    os_log_type_t v38 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v37, v38))
    {
      uint64_t v39 = swift_slowAlloc();
      uint64_t v40 = swift_slowAlloc();
      uint64_t v49 = v40;
      *(_DWORD *)uint64_t v39 = 141558275;
      uint64_t v50 = 1752392040;
      v51[0] = v40;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v39 + 12) = 2081;
      uint64_t v41 = sub_101110C7C();
      uint64_t v50 = sub_1008FA0F0(v41, v42, v51);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      sub_100B310AC((uint64_t)v19, (uint64_t (*)(void))type metadata accessor for OwnedBeaconRecord);
      _os_log_impl((void *)&_mh_execute_header, v37, v38, "nearbyParts: Invalid stableIdentifier %{private,mask.hash}s", (uint8_t *)v39, 0x16u);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      sub_100B310AC((uint64_t)v19, (uint64_t (*)(void))type metadata accessor for OwnedBeaconRecord);
    }

    sub_100B310AC((uint64_t)v21, (uint64_t (*)(void))type metadata accessor for OwnedBeaconRecord);
    sub_100B310AC((uint64_t)v11, (uint64_t (*)(void))type metadata accessor for StableIdentifier);
    goto LABEL_16;
  }
  uint64_t v26 = sub_10000588C((uint64_t *)&unk_1016565E0);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  unsigned __int8 v27 = v11[*(int *)(v26 + 96)];
  char v28 = v47 & 1;
  char v29 = v48 & 1;
  char v30 = v49 & 1;
LABEL_13:
  uint64_t v43 = sub_1000D0B80(v27, v28, v29, v30);
  sub_100B310AC((uint64_t)v21, (uint64_t (*)(void))type metadata accessor for OwnedBeaconRecord);
  uint64_t v44 = type metadata accessor for UUID();
  (*(void (**)(char *, uint64_t))(*(void *)(v44 - 8) + 8))(v11, v44);
LABEL_17:
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)v52);
  return v43;
}

unint64_t sub_100B44310(unint64_t result)
{
  if (result >= 0x19) {
    return 25;
  }
  return result;
}

uint64_t sub_100B44320(uint64_t a1, int a2, uint64_t a3, uint64_t a4, void *a5)
{
  uint64_t v57 = a1;
  uint64_t v58 = a3;
  uint64_t v8 = sub_10000588C(&qword_1016554C8);
  __chkstk_darwin(v8 - 8);
  uint64_t v10 = (char *)&v50 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = sub_10000588C(&qword_1016554C0);
  uint64_t v53 = *(void *)(v11 - 8);
  __chkstk_darwin(v11);
  uint64_t v13 = (char *)&v50 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = type metadata accessor for SafeLocation();
  __chkstk_darwin(v14 - 8);
  uint64_t v16 = (char *)&v50 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v17 = swift_allocObject();
  *(void *)(v17 + 16) = a4;
  *(void *)(v17 + 24) = a5;
  uint64_t v18 = qword_101636F50;
  uint64_t v56 = a4;
  swift_retain();
  id v55 = a5;
  if (v18 != -1) {
    swift_once();
  }
  uint64_t v19 = type metadata accessor for Logger();
  sub_100010324(v19, (uint64_t)qword_10170E9E8);
  uint64_t v20 = Logger.logObject.getter();
  os_log_type_t v21 = static os_log_type_t.default.getter();
  BOOL v22 = os_log_type_enabled(v20, v21);
  uint64_t v54 = v11;
  if (v22)
  {
    int v23 = (uint8_t *)swift_slowAlloc();
    *(_DWORD *)int v23 = 67109120;
    LODWORD(v60) = a2 & 1;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl((void *)&_mh_execute_header, v20, v21, "Saving record. Disk First? %{BOOL}d", v23, 8u);
    swift_slowDealloc();
  }

  if (qword_101637188 != -1) {
    swift_once();
  }
  unsigned int v24 = (void *)qword_10170EE68;
  id v25 = [self sharedInstance];
  unsigned int v26 = [v25 isInternalBuild];

  if (v26)
  {
    NSString v27 = String._bridgeToObjectiveC()();
    unsigned int v28 = [v24 BOOLForKey:v27];
  }
  else
  {
    unsigned int v28 = 0;
  }
  id v29 = [self defaultStore];
  if (v29)
  {
    char v30 = v29;
    id v31 = [v29 aa_primaryAppleAccount];

    if (v31 && (v31, ((a2 | v28) & 1) == 0))
    {
      sub_100AC4E30(v57, (uint64_t)sub_100B5B80C, v17);
    }
    else
    {
      uint64_t v52 = v17;
      uint64_t v32 = v57;
      uint64_t v33 = sub_100B30D0C(v57, (uint64_t)v16, (uint64_t (*)(void))type metadata accessor for SafeLocation);
      __chkstk_darwin(v33);
      *(&v50 - 2) = v34;
      *(&v50 - 1) = (uint64_t)v16;
      OS_dispatch_queue.sync<A>(execute:)();
      uint64_t v51 = v16;
      uint64_t v35 = Logger.logObject.getter();
      os_log_type_t v36 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v35, v36))
      {
        uint64_t v37 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)uint64_t v37 = 0;
        _os_log_impl((void *)&_mh_execute_header, v35, v36, "Saved LocalStorageBacked record. Calling completion.", v37, 2u);
        swift_slowDealloc();
      }

      sub_100B30D0C(v32, (uint64_t)v13, (uint64_t (*)(void))type metadata accessor for SafeLocation);
      uint64_t v38 = v54;
      swift_storeEnumTagMultiPayload();
      uint64_t v39 = swift_projectBox();
      sub_10001D074((uint64_t)v13, (uint64_t)v10, &qword_1016554C0);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v53 + 56))(v10, 0, 1, v38);
      swift_beginAccess();
      sub_100062604((uint64_t)v10, v39, &qword_1016554C8);
      dispatch_group_leave(v55);
      sub_10001DAB4((uint64_t)v13, &qword_1016554C0);
      if (((v31 != 0) & ~v28) != 0)
      {
        uint64_t v46 = type metadata accessor for Transaction();
        __chkstk_darwin(v46);
        uint64_t v47 = v57;
        *(&v50 - 4) = v58;
        *(&v50 - 3) = v47;
        uint64_t v48 = (uint64_t)v51;
        *(&v50 - 2) = (uint64_t)v51;
        static Transaction.named<A>(_:with:)();
        uint64_t v45 = v48;
      }
      else
      {
        uint64_t v40 = Logger.logObject.getter();
        os_log_type_t v41 = static os_log_type_t.info.getter();
        BOOL v42 = os_log_type_enabled(v40, v41);
        uint64_t v43 = (uint64_t)v51;
        if (v42)
        {
          uint64_t v44 = swift_slowAlloc();
          *(_DWORD *)uint64_t v44 = 67109376;
          LODWORD(v59) = v28;
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          *(_WORD *)(v44 + 8) = 1024;
          LODWORD(v59) = v31 != 0;
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          _os_log_impl((void *)&_mh_execute_header, v40, v41, "Skipping save to cloud. skipCloudSave: %{BOOL}d, isiCloudSignedIn %{BOOL}d", (uint8_t *)v44, 0xEu);
          swift_slowDealloc();
        }

        uint64_t v45 = v43;
      }
      sub_100B310AC(v45, (uint64_t (*)(void))type metadata accessor for SafeLocation);
    }
    return swift_release();
  }
  else
  {

    uint64_t result = swift_release();
    __break(1u);
  }
  return result;
}

uint64_t sub_100B44C54(uint64_t a1, uint64_t a2, void (*a3)(void), uint64_t a4)
{
  uint64_t v117 = a2;
  uint64_t v113 = type metadata accessor for BeaconStoreFileRecord();
  uint64_t v109 = *(void *)(v113 - 8);
  __chkstk_darwin(v113);
  uint64_t v107 = (uint64_t)v94 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for URL();
  uint64_t v111 = *(uint64_t (**)())(v8 - 8);
  unint64_t v112 = v8;
  uint64_t v9 = __chkstk_darwin(v8);
  uint64_t v106 = (char *)v94 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9);
  unint64_t v98 = (char *)v94 - v11;
  uint64_t v116 = (uint64_t (*)(void))type metadata accessor for UUID();
  Class v118 = (Class)*((void *)v116 - 1);
  uint64_t v12 = __chkstk_darwin(v116);
  v94[1] = (char *)v94 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = __chkstk_darwin(v12);
  uint64_t v16 = (char *)v94 - v15;
  __chkstk_darwin(v14);
  uint64_t v97 = (char *)v94 - v17;
  uint64_t v95 = sub_10000588C(&qword_1016426E8);
  __chkstk_darwin(v95);
  long long v96 = (char *)v94 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v19 = type metadata accessor for SafeLocation();
  uint64_t v102 = *(void *)(v19 - 8);
  uint64_t v20 = __chkstk_darwin(v19);
  uint64_t v105 = (char *)v94 - (((unint64_t)v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v103 = v21;
  __chkstk_darwin(v20);
  int v23 = (char *)v94 - v22;
  uint64_t v24 = swift_allocObject();
  uint64_t v108 = a3;
  *(void *)(v24 + 16) = a3;
  *(void *)(v24 + 24) = a4;
  swift_retain();
  static os_log_type_t.default.getter();
  if (qword_101637260 != -1) {
    swift_once();
  }
  uint64_t v100 = sub_10000588C((uint64_t *)&unk_10163AD00);
  uint64_t v25 = swift_allocObject();
  long long v99 = xmmword_101342130;
  *(_OWORD *)(v25 + 16) = xmmword_101342130;
  sub_100B30D0C(a1, (uint64_t)v23, (uint64_t (*)(void))type metadata accessor for SafeLocation);
  uint64_t v104 = v23;
  uint64_t v115 = v19;
  uint64_t v26 = String.init<A>(describing:)();
  uint64_t v28 = v27;
  *(void *)(v25 + 56) = &type metadata for String;
  unint64_t v101 = sub_10000B4CC();
  *(void *)(v25 + 64) = v101;
  *(void *)(v25 + 32) = v26;
  *(void *)(v25 + 40) = v28;
  os_log(_:dso:log:_:_:)();
  swift_bridgeObjectRelease();
  if (qword_101637188 != -1) {
    swift_once();
  }
  id v29 = (void *)qword_10170EE68;
  id v30 = [self sharedInstance];
  unsigned int v31 = [v30 isInternalBuild];

  if (v31)
  {
    NSString v32 = String._bridgeToObjectiveC()();
    unsigned int v33 = [v29 BOOLForKey:v32];
  }
  else
  {
    unsigned int v33 = 0;
  }
  uint64_t v34 = (void (**)(char *, void, uint64_t (*)(void)))v118;
  id v35 = [self defaultStore];
  if (v35)
  {
    os_log_type_t v36 = v35;
    id v37 = [v35 aa_primaryAppleAccount];

    uint64_t v110 = v24;
    uint64_t v114 = a1;
    if (v37 && (v37, (v33 & 1) == 0))
    {
      uint64_t v53 = v111;
      sub_10001D4B0(0, &qword_10163CB60);
      uint64_t v54 = a1 + *(int *)(v115 + 20);
      uint64_t v55 = UUID.uuidString.getter();
      uint64_t v57 = v56;
      uint64_t v58 = v117;
      id v59 = *(id *)(v117 + 152);
      v60._countAndFlagsBits = v55;
      v60._object = v57;
      uint64_t v61 = v58;
      Class isa = CKRecordID.init(recordName:zoneID:)(v60, (CKRecordZoneID)v59).super.isa;
      sub_100AB24F0();
      Class v118 = isa;
      uint64_t v115 = sub_101015AE0(isa);
      swift_release();
      uint64_t v63 = swift_allocBox();
      uint64_t v107 = v64;
      uint64_t v108 = (void (*)(void))v63;
      uint64_t v65 = *(char **)(v109 + 56);
      uint64_t v66 = v113;
      v109 += 56;
      uint64_t v106 = v65;
      ((void (*)(uint64_t, uint64_t, uint64_t, uint64_t))v65)(v64, 1, 1, v113);
      uint64_t v67 = *(void *)(v61 + 160);
      uint64_t v68 = v97;
      v34[2](v97, v54, v116);
      if (qword_1016371B8 != -1) {
        swift_once();
      }
      uint64_t v69 = v112;
      uint64_t v70 = sub_100010324(v112, (uint64_t)qword_10170EEB8);
      uint64_t v71 = v98;
      uint64_t v72 = (*((uint64_t (**)(char *, uint64_t, uint64_t))v53 + 2))(v98, v70, v69);
      __chkstk_darwin(v72);
      v94[-4] = v67;
      v94[-3] = v68;
      v94[-2] = v71;
      uint64_t v73 = (uint64_t)v96;
      OS_dispatch_queue.sync<A>(execute:)();
      (*((void (**)(char *, uint64_t))v53 + 1))(v71, v69);
      ((void (*)(char *, uint64_t (*)(void)))v34[1])(v68, v116);
      ((void (*)(uint64_t, void, uint64_t, uint64_t))v106)(v73, 0, 1, v66);
      sub_100062604(v73, v107, &qword_1016426E8);
      unint64_t v74 = v101;
      Class v75 = v118;
      static os_log_type_t.default.getter();
      uint64_t v76 = swift_allocObject();
      *(_OWORD *)(v76 + 16) = v99;
      uint64_t v77 = v75;
      Class v118 = v77;
      id v78 = [(objc_class *)v77 description];
      uint64_t v79 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      uint64_t v81 = v80;

      *(void *)(v76 + 56) = &type metadata for String;
      *(void *)(v76 + 64) = v74;
      *(void *)(v76 + 32) = v79;
      *(void *)(v76 + 40) = v81;
      os_log(_:dso:log:_:_:)();
      swift_bridgeObjectRelease();
      uint64_t v116 = (uint64_t (*)(void))type metadata accessor for SafeLocation;
      uint64_t v82 = (uint64_t)v104;
      sub_100B30D0C(v114, (uint64_t)v104, (uint64_t (*)(void))type metadata accessor for SafeLocation);
      uint64_t v83 = *(unsigned __int8 *)(v102 + 80);
      uint64_t v84 = (v83 + 32) & ~v83;
      unint64_t v85 = ((unint64_t)v103 + v84 + 7) & 0xFFFFFFFFFFFFFFF8;
      unint64_t v112 = v85 + 16;
      uint64_t v113 = v83 | 7;
      uint64_t v86 = swift_allocObject();
      uint64_t v87 = v108;
      uint64_t v88 = v117;
      *(void *)(v86 + 16) = v108;
      *(void *)(v86 + 24) = v88;
      uint64_t v111 = type metadata accessor for SafeLocation;
      sub_100B30DB4(v82, v86 + v84, (uint64_t (*)(void))type metadata accessor for SafeLocation);
      uint64_t v89 = (uint64_t (**)(uint64_t))(v86 + v85);
      uint64_t v90 = (uint64_t (*)(uint64_t))v110;
      void *v89 = sub_100B640E0;
      v89[1] = v90;
      swift_retain();
      swift_retain();
      swift_retain();
      Future.addSuccess(block:)();
      swift_release();
      swift_release();
      sub_100B30D0C(v114, v82, v116);
      uint64_t v91 = swift_allocObject();
      *(void *)(v91 + 16) = v87;
      *(void *)(v91 + 24) = v88;
      sub_100B30DB4(v82, v91 + v84, (uint64_t (*)(void))v111);
      uint64_t v92 = (uint64_t (**)(uint64_t))(v91 + v85);
      *uint64_t v92 = sub_100B640E0;
      v92[1] = v90;
      swift_retain();
      swift_retain();
      swift_retain();
      Future.addFailure(block:)();
      swift_release();
      swift_release();
      swift_release();

      swift_release();
    }
    else
    {
      uint64_t v109 = a4;
      if (qword_101636F50 != -1) {
        swift_once();
      }
      uint64_t v38 = v111;
      uint64_t v39 = type metadata accessor for Logger();
      uint64_t v104 = (char *)sub_100010324(v39, (uint64_t)qword_10170E9E8);
      uint64_t v40 = Logger.logObject.getter();
      os_log_type_t v41 = static os_log_type_t.info.getter();
      if (os_log_type_enabled(v40, v41))
      {
        BOOL v42 = v37 != 0;
        uint64_t v43 = swift_slowAlloc();
        *(_DWORD *)uint64_t v43 = 67109376;
        LODWORD(v119) = v33;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        *(_WORD *)(v43 + 8) = 1024;
        LODWORD(v119) = v42;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        _os_log_impl((void *)&_mh_execute_header, v40, v41, "Skipping cloud delete. skipCloudSave: %{BOOL}d, isiCloudSignedIn %{BOOL}d", (uint8_t *)v43, 0xEu);
        swift_slowDealloc();
      }

      uint64_t v44 = *(void *)(v117 + 160);
      uint64_t v45 = v116;
      uint64_t v46 = a1 + *(int *)(v115 + 20);
      uint64_t v103 = (void (*)(char *, uint64_t, uint64_t (*)(void)))*((void *)v118 + 2);
      v103(v16, v46, v116);
      if (qword_1016371B8 != -1) {
        swift_once();
      }
      uint64_t v47 = v112;
      uint64_t v48 = sub_100010324(v112, (uint64_t)qword_10170EEB8);
      uint64_t v49 = v38;
      uint64_t v50 = v106;
      uint64_t v51 = (*((uint64_t (**)(char *, uint64_t, uint64_t))v38 + 2))(v106, v48, v47);
      __chkstk_darwin(v51);
      v94[-4] = v44;
      v94[-3] = v16;
      v94[-2] = v50;
      uint64_t v52 = v107;
      OS_dispatch_queue.sync<A>(execute:)();
      (*((void (**)(char *, uint64_t))v49 + 1))(v50, v47);
      (*((void (**)(char *, uint64_t (*)(void)))v118 + 1))(v16, v45);
      sub_100B79EF4(v52);
      QueueSynchronizer.conditionalSync<A>(_:)();
      sub_100A9E7EC(9);
      sub_100A9EE98();
      v108(1);
      sub_100B310AC(v52, (uint64_t (*)(void))type metadata accessor for BeaconStoreFileRecord);
    }
    return swift_release();
  }
  else
  {
    uint64_t result = swift_release();
    __break(1u);
  }
  return result;
}

uint64_t sub_100B45D40(uint64_t a1, uint64_t a2, void (*a3)(void), uint64_t a4)
{
  uint64_t v117 = a2;
  uint64_t v113 = type metadata accessor for BeaconStoreFileRecord();
  uint64_t v109 = *(void *)(v113 - 8);
  __chkstk_darwin(v113);
  uint64_t v107 = (uint64_t)v94 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for URL();
  uint64_t v111 = *(uint64_t (**)())(v8 - 8);
  unint64_t v112 = v8;
  uint64_t v9 = __chkstk_darwin(v8);
  uint64_t v106 = (char *)v94 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9);
  unint64_t v98 = (char *)v94 - v11;
  uint64_t v116 = (uint64_t (*)(void))type metadata accessor for UUID();
  Class v118 = (Class)*((void *)v116 - 1);
  uint64_t v12 = __chkstk_darwin(v116);
  v94[1] = (char *)v94 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = __chkstk_darwin(v12);
  uint64_t v16 = (char *)v94 - v15;
  __chkstk_darwin(v14);
  uint64_t v97 = (char *)v94 - v17;
  uint64_t v95 = sub_10000588C(&qword_1016426E8);
  __chkstk_darwin(v95);
  long long v96 = (char *)v94 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v19 = type metadata accessor for LeashRecord();
  uint64_t v102 = *(void *)(v19 - 8);
  uint64_t v20 = __chkstk_darwin(v19);
  uint64_t v105 = (char *)v94 - (((unint64_t)v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v103 = v21;
  __chkstk_darwin(v20);
  int v23 = (char *)v94 - v22;
  uint64_t v24 = swift_allocObject();
  uint64_t v108 = a3;
  *(void *)(v24 + 16) = a3;
  *(void *)(v24 + 24) = a4;
  swift_retain();
  static os_log_type_t.default.getter();
  if (qword_101637260 != -1) {
    swift_once();
  }
  uint64_t v100 = sub_10000588C((uint64_t *)&unk_10163AD00);
  uint64_t v25 = swift_allocObject();
  long long v99 = xmmword_101342130;
  *(_OWORD *)(v25 + 16) = xmmword_101342130;
  sub_100B30D0C(a1, (uint64_t)v23, (uint64_t (*)(void))type metadata accessor for LeashRecord);
  uint64_t v104 = v23;
  uint64_t v115 = v19;
  uint64_t v26 = String.init<A>(describing:)();
  uint64_t v28 = v27;
  *(void *)(v25 + 56) = &type metadata for String;
  unint64_t v101 = sub_10000B4CC();
  *(void *)(v25 + 64) = v101;
  *(void *)(v25 + 32) = v26;
  *(void *)(v25 + 40) = v28;
  os_log(_:dso:log:_:_:)();
  swift_bridgeObjectRelease();
  if (qword_101637188 != -1) {
    swift_once();
  }
  id v29 = (void *)qword_10170EE68;
  id v30 = [self sharedInstance];
  unsigned int v31 = [v30 isInternalBuild];

  if (v31)
  {
    NSString v32 = String._bridgeToObjectiveC()();
    unsigned int v33 = [v29 BOOLForKey:v32];
  }
  else
  {
    unsigned int v33 = 0;
  }
  uint64_t v34 = (void (**)(char *, void, uint64_t (*)(void)))v118;
  id v35 = [self defaultStore];
  if (v35)
  {
    os_log_type_t v36 = v35;
    id v37 = [v35 aa_primaryAppleAccount];

    uint64_t v110 = v24;
    uint64_t v114 = a1;
    if (v37 && (v37, (v33 & 1) == 0))
    {
      uint64_t v53 = v111;
      sub_10001D4B0(0, &qword_10163CB60);
      uint64_t v54 = a1 + *(int *)(v115 + 20);
      uint64_t v55 = UUID.uuidString.getter();
      uint64_t v57 = v56;
      uint64_t v58 = v117;
      id v59 = *(id *)(v117 + 152);
      v60._countAndFlagsBits = v55;
      v60._object = v57;
      uint64_t v61 = v58;
      Class isa = CKRecordID.init(recordName:zoneID:)(v60, (CKRecordZoneID)v59).super.isa;
      sub_100AB24F0();
      Class v118 = isa;
      uint64_t v115 = sub_101015AE0(isa);
      swift_release();
      uint64_t v63 = swift_allocBox();
      uint64_t v107 = v64;
      uint64_t v108 = (void (*)(void))v63;
      uint64_t v65 = *(char **)(v109 + 56);
      uint64_t v66 = v113;
      v109 += 56;
      uint64_t v106 = v65;
      ((void (*)(uint64_t, uint64_t, uint64_t, uint64_t))v65)(v64, 1, 1, v113);
      uint64_t v67 = *(void *)(v61 + 160);
      uint64_t v68 = v97;
      v34[2](v97, v54, v116);
      if (qword_101637620 != -1) {
        swift_once();
      }
      uint64_t v69 = v112;
      uint64_t v70 = sub_100010324(v112, (uint64_t)qword_10170F7B0);
      uint64_t v71 = v98;
      uint64_t v72 = (*((uint64_t (**)(char *, uint64_t, uint64_t))v53 + 2))(v98, v70, v69);
      __chkstk_darwin(v72);
      v94[-4] = v67;
      v94[-3] = v68;
      v94[-2] = v71;
      uint64_t v73 = (uint64_t)v96;
      OS_dispatch_queue.sync<A>(execute:)();
      (*((void (**)(char *, uint64_t))v53 + 1))(v71, v69);
      ((void (*)(char *, uint64_t (*)(void)))v34[1])(v68, v116);
      ((void (*)(uint64_t, void, uint64_t, uint64_t))v106)(v73, 0, 1, v66);
      sub_100062604(v73, v107, &qword_1016426E8);
      unint64_t v74 = v101;
      Class v75 = v118;
      static os_log_type_t.default.getter();
      uint64_t v76 = swift_allocObject();
      *(_OWORD *)(v76 + 16) = v99;
      uint64_t v77 = v75;
      Class v118 = v77;
      id v78 = [(objc_class *)v77 description];
      uint64_t v79 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      uint64_t v81 = v80;

      *(void *)(v76 + 56) = &type metadata for String;
      *(void *)(v76 + 64) = v74;
      *(void *)(v76 + 32) = v79;
      *(void *)(v76 + 40) = v81;
      os_log(_:dso:log:_:_:)();
      swift_bridgeObjectRelease();
      uint64_t v116 = (uint64_t (*)(void))type metadata accessor for LeashRecord;
      uint64_t v82 = (uint64_t)v104;
      sub_100B30D0C(v114, (uint64_t)v104, (uint64_t (*)(void))type metadata accessor for LeashRecord);
      uint64_t v83 = *(unsigned __int8 *)(v102 + 80);
      uint64_t v84 = (v83 + 32) & ~v83;
      unint64_t v85 = ((unint64_t)v103 + v84 + 7) & 0xFFFFFFFFFFFFFFF8;
      unint64_t v112 = v85 + 16;
      uint64_t v113 = v83 | 7;
      uint64_t v86 = swift_allocObject();
      uint64_t v87 = v108;
      uint64_t v88 = v117;
      *(void *)(v86 + 16) = v108;
      *(void *)(v86 + 24) = v88;
      uint64_t v111 = type metadata accessor for LeashRecord;
      sub_100B30DB4(v82, v86 + v84, (uint64_t (*)(void))type metadata accessor for LeashRecord);
      uint64_t v89 = (uint64_t (**)(uint64_t))(v86 + v85);
      uint64_t v90 = (uint64_t (*)(uint64_t))v110;
      void *v89 = sub_100B640E0;
      v89[1] = v90;
      swift_retain();
      swift_retain();
      swift_retain();
      Future.addSuccess(block:)();
      swift_release();
      swift_release();
      sub_100B30D0C(v114, v82, v116);
      uint64_t v91 = swift_allocObject();
      *(void *)(v91 + 16) = v87;
      *(void *)(v91 + 24) = v88;
      sub_100B30DB4(v82, v91 + v84, (uint64_t (*)(void))v111);
      uint64_t v92 = (uint64_t (**)(uint64_t))(v91 + v85);
      *uint64_t v92 = sub_100B640E0;
      v92[1] = v90;
      swift_retain();
      swift_retain();
      swift_retain();
      Future.addFailure(block:)();
      swift_release();
      swift_release();
      swift_release();

      swift_release();
    }
    else
    {
      uint64_t v109 = a4;
      if (qword_101636F50 != -1) {
        swift_once();
      }
      uint64_t v38 = v111;
      uint64_t v39 = type metadata accessor for Logger();
      uint64_t v104 = (char *)sub_100010324(v39, (uint64_t)qword_10170E9E8);
      uint64_t v40 = Logger.logObject.getter();
      os_log_type_t v41 = static os_log_type_t.info.getter();
      if (os_log_type_enabled(v40, v41))
      {
        BOOL v42 = v37 != 0;
        uint64_t v43 = swift_slowAlloc();
        *(_DWORD *)uint64_t v43 = 67109376;
        LODWORD(v119) = v33;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        *(_WORD *)(v43 + 8) = 1024;
        LODWORD(v119) = v42;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        _os_log_impl((void *)&_mh_execute_header, v40, v41, "Skipping cloud delete. skipCloudSave: %{BOOL}d, isiCloudSignedIn %{BOOL}d", (uint8_t *)v43, 0xEu);
        swift_slowDealloc();
      }

      uint64_t v44 = *(void *)(v117 + 160);
      uint64_t v45 = v116;
      uint64_t v46 = a1 + *(int *)(v115 + 20);
      uint64_t v103 = (void (*)(char *, uint64_t, uint64_t (*)(void)))*((void *)v118 + 2);
      v103(v16, v46, v116);
      if (qword_101637620 != -1) {
        swift_once();
      }
      uint64_t v47 = v112;
      uint64_t v48 = sub_100010324(v112, (uint64_t)qword_10170F7B0);
      uint64_t v49 = v38;
      uint64_t v50 = v106;
      uint64_t v51 = (*((uint64_t (**)(char *, uint64_t, uint64_t))v38 + 2))(v106, v48, v47);
      __chkstk_darwin(v51);
      v94[-4] = v44;
      v94[-3] = v16;
      v94[-2] = v50;
      uint64_t v52 = v107;
      OS_dispatch_queue.sync<A>(execute:)();
      (*((void (**)(char *, uint64_t))v49 + 1))(v50, v47);
      (*((void (**)(char *, uint64_t (*)(void)))v118 + 1))(v16, v45);
      sub_100B79EF4(v52);
      QueueSynchronizer.conditionalSync<A>(_:)();
      sub_100A9E7EC(9);
      sub_100A9EE98();
      v108(1);
      sub_100B310AC(v52, (uint64_t (*)(void))type metadata accessor for BeaconStoreFileRecord);
    }
    return swift_release();
  }
  else
  {
    uint64_t result = swift_release();
    __break(1u);
  }
  return result;
}

uint64_t sub_100B46E2C(uint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v44 = a3;
  uint64_t v45 = a1;
  uint64_t v42 = sub_10000588C((uint64_t *)&unk_1016554E0);
  __chkstk_darwin(v42);
  uint64_t v9 = (char *)v41 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = type metadata accessor for LeashRecord();
  __chkstk_darwin(v10 - 8);
  uint64_t v46 = (uint64_t)v41 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = swift_allocObject();
  *(void *)(v12 + 16) = a4;
  *(void *)(v12 + 24) = a5;
  uint64_t v13 = qword_101636F50;
  swift_bridgeObjectRetain();
  swift_retain();
  if (v13 != -1) {
    swift_once();
  }
  uint64_t v14 = type metadata accessor for Logger();
  sub_100010324(v14, (uint64_t)qword_10170E9E8);
  uint64_t v15 = Logger.logObject.getter();
  os_log_type_t v16 = static os_log_type_t.default.getter();
  BOOL v17 = os_log_type_enabled(v15, v16);
  uint64_t v43 = a4;
  if (v17)
  {
    uint64_t v18 = (uint8_t *)swift_slowAlloc();
    *(_DWORD *)uint64_t v18 = 67109120;
    LODWORD(v47) = a2 & 1;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl((void *)&_mh_execute_header, v15, v16, "Saving record. Disk First? %{BOOL}d", v18, 8u);
    swift_slowDealloc();
  }

  if (qword_101637188 != -1) {
    swift_once();
  }
  uint64_t v19 = (void *)qword_10170EE68;
  id v20 = [self sharedInstance];
  unsigned int v21 = [v20 isInternalBuild];

  if (v21)
  {
    NSString v22 = String._bridgeToObjectiveC()();
    unsigned int v21 = [v19 BOOLForKey:v22];
  }
  uint64_t v23 = v45;
  id v24 = [self defaultStore];
  if (v24)
  {
    uint64_t v25 = v24;
    id v26 = [v24 aa_primaryAppleAccount];

    if (v26 && (v26, ((a2 | v21) & 1) == 0))
    {
      sub_100AC504C(v23, (uint64_t)sub_100B61320, v12);
    }
    else
    {
      v41[1] = v12;
      uint64_t v27 = v46;
      uint64_t v28 = sub_100B30D0C(v23, v46, (uint64_t (*)(void))type metadata accessor for LeashRecord);
      __chkstk_darwin(v28);
      v41[-2] = v29;
      v41[-1] = v27;
      OS_dispatch_queue.sync<A>(execute:)();
      id v30 = Logger.logObject.getter();
      os_log_type_t v31 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v30, v31))
      {
        NSString v32 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)NSString v32 = 0;
        _os_log_impl((void *)&_mh_execute_header, v30, v31, "Saved LocalStorageBacked record. Calling completion.", v32, 2u);
        swift_slowDealloc();
      }

      uint64_t v33 = v45;
      sub_100B30D0C(v45, (uint64_t)v9, (uint64_t (*)(void))type metadata accessor for LeashRecord);
      swift_storeEnumTagMultiPayload();
      sub_100A20048((uint64_t)v9, v43, a5);
      sub_10001DAB4((uint64_t)v9, (uint64_t *)&unk_1016554E0);
      if (((v26 != 0) & ~v21) != 0)
      {
        uint64_t v38 = type metadata accessor for Transaction();
        __chkstk_darwin(v38);
        v41[-4] = v44;
        v41[-3] = v33;
        uint64_t v39 = v46;
        v41[-2] = v46;
        static Transaction.named<A>(_:with:)();
        uint64_t v37 = v39;
      }
      else
      {
        uint64_t v34 = Logger.logObject.getter();
        os_log_type_t v35 = static os_log_type_t.info.getter();
        if (os_log_type_enabled(v34, v35))
        {
          uint64_t v36 = swift_slowAlloc();
          *(_DWORD *)uint64_t v36 = 67109376;
          LODWORD(v47) = v21;
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          *(_WORD *)(v36 + 8) = 1024;
          LODWORD(v47) = v26 != 0;
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          _os_log_impl((void *)&_mh_execute_header, v34, v35, "Skipping save to cloud. skipCloudSave: %{BOOL}d, isiCloudSignedIn %{BOOL}d", (uint8_t *)v36, 0xEu);
          swift_slowDealloc();
        }

        uint64_t v37 = v46;
      }
      sub_100B310AC(v37, (uint64_t (*)(void))type metadata accessor for LeashRecord);
    }
    return swift_release();
  }
  else
  {
    swift_release();
    uint64_t result = swift_bridgeObjectRelease();
    __break(1u);
  }
  return result;
}

uint64_t sub_100B475F0(uint64_t a1, int a2, uint64_t a3, uint64_t a4, void *a5)
{
  uint64_t v43 = a3;
  uint64_t v44 = a1;
  uint64_t v8 = sub_10000588C((uint64_t *)&unk_1016554E0);
  __chkstk_darwin(v8);
  uint64_t v10 = (char *)v39 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = type metadata accessor for LeashRecord();
  __chkstk_darwin(v11 - 8);
  uint64_t v13 = (char *)v39 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = swift_allocObject();
  *(void *)(v14 + 16) = a4;
  *(void *)(v14 + 24) = a5;
  uint64_t v15 = qword_101636F50;
  swift_retain();
  uint64_t v42 = a5;
  if (v15 != -1) {
    swift_once();
  }
  uint64_t v16 = type metadata accessor for Logger();
  sub_100010324(v16, (uint64_t)qword_10170E9E8);
  BOOL v17 = Logger.logObject.getter();
  os_log_type_t v18 = static os_log_type_t.default.getter();
  BOOL v19 = os_log_type_enabled(v17, v18);
  uint64_t v41 = v8;
  if (v19)
  {
    id v20 = (uint8_t *)swift_slowAlloc();
    *(_DWORD *)id v20 = 67109120;
    LODWORD(v45) = a2 & 1;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl((void *)&_mh_execute_header, v17, v18, "Saving record. Disk First? %{BOOL}d", v20, 8u);
    swift_slowDealloc();
  }

  if (qword_101637188 != -1) {
    swift_once();
  }
  unsigned int v21 = (void *)qword_10170EE68;
  id v22 = [self sharedInstance];
  unsigned int v23 = [v22 isInternalBuild];

  if (v23)
  {
    NSString v24 = String._bridgeToObjectiveC()();
    unsigned int v23 = [v21 BOOLForKey:v24];
  }
  id v25 = [self defaultStore];
  if (v25)
  {
    id v26 = v25;
    id v27 = [v25 aa_primaryAppleAccount];

    if (v27 && (v27, ((a2 | v23) & 1) == 0))
    {
      sub_100AC504C(v44, (uint64_t)sub_100B5B3A0, v14);
    }
    else
    {
      uint64_t v40 = a4;
      uint64_t v28 = sub_100B30D0C(v44, (uint64_t)v13, (uint64_t (*)(void))type metadata accessor for LeashRecord);
      __chkstk_darwin(v28);
      v39[-2] = v29;
      v39[-1] = v13;
      OS_dispatch_queue.sync<A>(execute:)();
      v39[1] = v14;
      id v30 = Logger.logObject.getter();
      os_log_type_t v31 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v30, v31))
      {
        NSString v32 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)NSString v32 = 0;
        _os_log_impl((void *)&_mh_execute_header, v30, v31, "Saved LocalStorageBacked record. Calling completion.", v32, 2u);
        swift_slowDealloc();
      }

      sub_100B30D0C(v44, (uint64_t)v10, (uint64_t (*)(void))type metadata accessor for LeashRecord);
      swift_storeEnumTagMultiPayload();
      sub_100A224EC((uint64_t)v10, v40, v42);
      sub_10001DAB4((uint64_t)v10, (uint64_t *)&unk_1016554E0);
      if (((v27 != 0) & ~v23) != 0)
      {
        uint64_t v36 = type metadata accessor for Transaction();
        __chkstk_darwin(v36);
        v39[-4] = v43;
        v39[-3] = v37;
        v39[-2] = v13;
        static Transaction.named<A>(_:with:)();
      }
      else
      {
        uint64_t v33 = Logger.logObject.getter();
        os_log_type_t v34 = static os_log_type_t.info.getter();
        if (os_log_type_enabled(v33, v34))
        {
          uint64_t v35 = swift_slowAlloc();
          *(_DWORD *)uint64_t v35 = 67109376;
          LODWORD(v45) = v23;
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          *(_WORD *)(v35 + 8) = 1024;
          LODWORD(v45) = v27 != 0;
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          _os_log_impl((void *)&_mh_execute_header, v33, v34, "Skipping save to cloud. skipCloudSave: %{BOOL}d, isiCloudSignedIn %{BOOL}d", (uint8_t *)v35, 0xEu);
          swift_slowDealloc();
        }
      }
      sub_100B310AC((uint64_t)v13, (uint64_t (*)(void))type metadata accessor for LeashRecord);
    }
    return swift_release();
  }
  else
  {

    uint64_t result = swift_release();
    __break(1u);
  }
  return result;
}

void sub_100B47D94(uint64_t a1, char a2, uint64_t (*a3)(), objc_class *a4, uint64_t a5, uint64_t a6, void *a7)
{
  uint64_t v63 = a5;
  id v59 = a3;
  Class v60 = a4;
  uint64_t v61 = a1;
  uint64_t v10 = sub_10000588C(&qword_1016554F0);
  __chkstk_darwin(v10 - 8);
  uint64_t v56 = (uint64_t)&v50 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = sub_10000588C((uint64_t *)&unk_1016554E0);
  uint64_t v52 = *(void *)(v12 - 8);
  uint64_t v53 = v12;
  __chkstk_darwin(v12);
  uint64_t v57 = (uint64_t)&v50 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = type metadata accessor for LeashRecord();
  uint64_t v51 = *(void *)(v14 - 8);
  uint64_t v15 = *(void *)(v51 + 64);
  uint64_t v16 = __chkstk_darwin(v14 - 8);
  BOOL v17 = (char *)&v50 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v16);
  uint64_t v58 = (uint64_t)&v50 - v18;
  uint64_t v19 = swift_allocObject();
  *(void *)(v19 + 16) = a6;
  *(void *)(v19 + 24) = a7;
  uint64_t v62 = v19;
  uint64_t v55 = a6;
  swift_retain();
  dispatch_group_t v54 = a7;
  static os_log_type_t.default.getter();
  if (qword_101637260 != -1) {
    swift_once();
  }
  sub_10000588C((uint64_t *)&unk_10163AD00);
  uint64_t v20 = swift_allocObject();
  uint64_t v21 = v20;
  long long v50 = xmmword_101342130;
  *(_OWORD *)(v20 + 16) = xmmword_101342130;
  if (a2) {
    uint64_t v22 = 1702195828;
  }
  else {
    uint64_t v22 = 0x65736C6166;
  }
  if (a2) {
    unint64_t v23 = 0xE400000000000000;
  }
  else {
    unint64_t v23 = 0xE500000000000000;
  }
  *(void *)(v20 + 56) = &type metadata for String;
  *(void *)(v20 + 64) = sub_10000B4CC();
  *(void *)(v21 + 32) = v22;
  *(void *)(v21 + 40) = v23;
  os_log(_:dso:log:_:_:)();
  swift_bridgeObjectRelease();
  if (a2)
  {
    uint64_t v25 = v61;
    Class v26 = sub_10115312C(v61);
    v64[0] = v26;
    uint64_t v27 = v58;
    sub_100B30D0C(v25, v58, (uint64_t (*)(void))type metadata accessor for LeashRecord);
    ((void (*)(uint64_t))v59)(v27);
    uint64_t v28 = sub_100B2396C(v64, v27);
    uint64_t v29 = v63;
    __chkstk_darwin(v28);
    *((void *)&v50 - 2) = v30;
    *((void *)&v50 - 1) = v27;
    OS_dispatch_queue.sync<A>(execute:)();
    sub_100A9E7EC(8);
    uint64_t v44 = v57;
    sub_100B30D0C(v27, v57, (uint64_t (*)(void))type metadata accessor for LeashRecord);
    uint64_t v45 = v53;
    swift_storeEnumTagMultiPayload();
    uint64_t v46 = swift_projectBox();
    uint64_t v47 = v56;
    sub_10001D074(v44, v56, (uint64_t *)&unk_1016554E0);
    (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v52 + 56))(v47, 0, 1, v45);
    swift_beginAccess();
    sub_100062604(v47, v46, &qword_1016554F0);
    dispatch_group_leave(v54);
    sub_10001DAB4(v44, (uint64_t *)&unk_1016554E0);
    uint64_t v48 = type metadata accessor for Transaction();
    __chkstk_darwin(v48);
    *((void *)&v50 - 4) = v29;
    *((void *)&v50 - 3) = v64;
    *((void *)&v50 - 2) = v25;
    static Transaction.named<A>(_:with:)();
    sub_100B310AC(v27, (uint64_t (*)(void))type metadata accessor for LeashRecord);
    id v49 = v64[0];
    swift_release();
  }
  else
  {
    uint64_t v32 = v61;
    Class v33 = sub_10115312C(v61);
    sub_100AB24F0(v34);
    sub_100B30D0C(v32, (uint64_t)v17, (uint64_t (*)(void))type metadata accessor for LeashRecord);
    uint64_t v35 = *(unsigned __int8 *)(v51 + 80);
    uint64_t v58 = v35 | 7;
    uint64_t v36 = swift_allocObject();
    Class v37 = v60;
    *(void *)(v36 + 16) = v59;
    *(void *)(v36 + 24) = v37;
    id v59 = type metadata accessor for LeashRecord;
    sub_100B30DB4((uint64_t)v17, v36 + ((v35 + 32) & ~v35), (uint64_t (*)(void))type metadata accessor for LeashRecord);
    swift_retain();
    sub_101017624(v33, (void (*)(id *))sub_100B53260, v36);
    swift_release();
    swift_release();
    uint64_t v38 = swift_allocObject();
    Class v60 = v33;
    uint64_t v39 = (void (*)(uint64_t))v62;
    *(void *)(v38 + 16) = sub_100B5312C;
    *(void *)(v38 + 24) = v39;
    swift_retain();
    Future.addFailure(block:)();
    swift_release();
    swift_release();
    sub_100B30D0C(v32, (uint64_t)v17, (uint64_t (*)(void))type metadata accessor for LeashRecord);
    uint64_t v40 = (v35 + 16) & ~v35;
    unint64_t v41 = (v15 + v40 + 7) & 0xFFFFFFFFFFFFFFF8;
    uint64_t v42 = swift_allocObject();
    sub_100B30DB4((uint64_t)v17, v42 + v40, (uint64_t (*)(void))v59);
    *(void *)(v42 + v41) = v63;
    uint64_t v43 = (void (**)(uint64_t))(v42 + ((v41 + 15) & 0xFFFFFFFFFFFFFFF8));
    *uint64_t v43 = sub_100B5312C;
    v43[1] = v39;
    swift_retain();
    swift_retain();
    Future.addSuccess(block:)();
    swift_release();

    swift_release();
    swift_release();
    swift_release();
  }
}

void sub_100B48638(uint64_t a1, char a2, uint64_t (*a3)(), objc_class *a4, uint64_t a5, uint64_t a6, void *a7)
{
  uint64_t v63 = a5;
  id v59 = a3;
  Class v60 = a4;
  uint64_t v61 = a1;
  uint64_t v10 = sub_10000588C(&qword_1016554C8);
  __chkstk_darwin(v10 - 8);
  uint64_t v56 = (uint64_t)&v50 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = sub_10000588C(&qword_1016554C0);
  uint64_t v52 = *(void *)(v12 - 8);
  uint64_t v53 = v12;
  __chkstk_darwin(v12);
  uint64_t v57 = (uint64_t)&v50 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = type metadata accessor for SafeLocation();
  uint64_t v51 = *(void *)(v14 - 8);
  uint64_t v15 = *(void *)(v51 + 64);
  uint64_t v16 = __chkstk_darwin(v14 - 8);
  BOOL v17 = (char *)&v50 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v16);
  uint64_t v58 = (uint64_t)&v50 - v18;
  uint64_t v19 = swift_allocObject();
  *(void *)(v19 + 16) = a6;
  *(void *)(v19 + 24) = a7;
  uint64_t v62 = v19;
  uint64_t v55 = a6;
  swift_retain();
  dispatch_group_t v54 = a7;
  static os_log_type_t.default.getter();
  if (qword_101637260 != -1) {
    swift_once();
  }
  sub_10000588C((uint64_t *)&unk_10163AD00);
  uint64_t v20 = swift_allocObject();
  uint64_t v21 = v20;
  long long v50 = xmmword_101342130;
  *(_OWORD *)(v20 + 16) = xmmword_101342130;
  if (a2) {
    uint64_t v22 = 1702195828;
  }
  else {
    uint64_t v22 = 0x65736C6166;
  }
  if (a2) {
    unint64_t v23 = 0xE400000000000000;
  }
  else {
    unint64_t v23 = 0xE500000000000000;
  }
  *(void *)(v20 + 56) = &type metadata for String;
  *(void *)(v20 + 64) = sub_10000B4CC();
  *(void *)(v21 + 32) = v22;
  *(void *)(v21 + 40) = v23;
  os_log(_:dso:log:_:_:)();
  swift_bridgeObjectRelease();
  if (a2)
  {
    uint64_t v25 = v61;
    Class v26 = sub_101153814(v61);
    v64[0] = v26;
    uint64_t v27 = v58;
    sub_100B30D0C(v25, v58, (uint64_t (*)(void))type metadata accessor for SafeLocation);
    ((void (*)(uint64_t))v59)(v27);
    uint64_t v28 = sub_100B2280C(v64, v27);
    uint64_t v29 = v63;
    __chkstk_darwin(v28);
    *((void *)&v50 - 2) = v30;
    *((void *)&v50 - 1) = v27;
    OS_dispatch_queue.sync<A>(execute:)();
    sub_100A9E7EC(8);
    uint64_t v44 = v57;
    sub_100B30D0C(v27, v57, (uint64_t (*)(void))type metadata accessor for SafeLocation);
    uint64_t v45 = v53;
    swift_storeEnumTagMultiPayload();
    uint64_t v46 = swift_projectBox();
    uint64_t v47 = v56;
    sub_10001D074(v44, v56, &qword_1016554C0);
    (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v52 + 56))(v47, 0, 1, v45);
    swift_beginAccess();
    sub_100062604(v47, v46, &qword_1016554C8);
    dispatch_group_leave(v54);
    sub_10001DAB4(v44, &qword_1016554C0);
    uint64_t v48 = type metadata accessor for Transaction();
    __chkstk_darwin(v48);
    *((void *)&v50 - 4) = v29;
    *((void *)&v50 - 3) = v64;
    *((void *)&v50 - 2) = v25;
    static Transaction.named<A>(_:with:)();
    sub_100B310AC(v27, (uint64_t (*)(void))type metadata accessor for SafeLocation);
    id v49 = v64[0];
    swift_release();
  }
  else
  {
    uint64_t v32 = v61;
    Class v33 = sub_101153814(v61);
    sub_100AB24F0(v34);
    sub_100B30D0C(v32, (uint64_t)v17, (uint64_t (*)(void))type metadata accessor for SafeLocation);
    uint64_t v35 = *(unsigned __int8 *)(v51 + 80);
    uint64_t v58 = v35 | 7;
    uint64_t v36 = swift_allocObject();
    Class v37 = v60;
    *(void *)(v36 + 16) = v59;
    *(void *)(v36 + 24) = v37;
    id v59 = type metadata accessor for SafeLocation;
    sub_100B30DB4((uint64_t)v17, v36 + ((v35 + 32) & ~v35), (uint64_t (*)(void))type metadata accessor for SafeLocation);
    swift_retain();
    sub_101017624(v33, (void (*)(id *))sub_100B52BC8, v36);
    swift_release();
    swift_release();
    uint64_t v38 = swift_allocObject();
    Class v60 = v33;
    uint64_t v39 = (void (*)(uint64_t))v62;
    *(void *)(v38 + 16) = sub_100B52A84;
    *(void *)(v38 + 24) = v39;
    swift_retain();
    Future.addFailure(block:)();
    swift_release();
    swift_release();
    sub_100B30D0C(v32, (uint64_t)v17, (uint64_t (*)(void))type metadata accessor for SafeLocation);
    uint64_t v40 = (v35 + 16) & ~v35;
    unint64_t v41 = (v15 + v40 + 7) & 0xFFFFFFFFFFFFFFF8;
    uint64_t v42 = swift_allocObject();
    sub_100B30DB4((uint64_t)v17, v42 + v40, (uint64_t (*)(void))v59);
    *(void *)(v42 + v41) = v63;
    uint64_t v43 = (void (**)(uint64_t))(v42 + ((v41 + 15) & 0xFFFFFFFFFFFFFFF8));
    *uint64_t v43 = sub_100B52A84;
    v43[1] = v39;
    swift_retain();
    swift_retain();
    Future.addSuccess(block:)();
    swift_release();

    swift_release();
    swift_release();
    swift_release();
  }
}

uint64_t sub_100B48EDC(uint64_t a1, void (*a2)(uint64_t), uint64_t a3)
{
  uint64_t v6 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v26 = *(void *)(v6 - 8);
  uint64_t v27 = v6;
  __chkstk_darwin(v6);
  NSString v24 = (char *)&v21 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v25 = type metadata accessor for DispatchQoS();
  uint64_t v23 = *(void *)(v25 - 8);
  __chkstk_darwin(v25);
  uint64_t v22 = (char *)&v21 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = swift_allocObject();
  uint64_t v21 = a2;
  *(void *)(v9 + 16) = a2;
  *(void *)(v9 + 24) = a3;
  swift_retain();
  uint64_t v10 = sub_100AB24F0();
  uint64_t v11 = (void *)swift_allocObject();
  v11[2] = sub_100B5EF80;
  v11[3] = v9;
  v11[4] = a1;
  swift_retain_n();
  uint64_t v28 = a1;
  swift_retain_n();
  QueueSynchronizer.conditionalSync<A>(_:)();
  int v12 = LOBYTE(aBlock[0]);
  static os_log_type_t.default.getter();
  if (qword_101637270 != -1) {
    swift_once();
  }
  sub_10000588C((uint64_t *)&unk_10163AD00);
  uint64_t v13 = swift_allocObject();
  *(_OWORD *)(v13 + 16) = xmmword_101342130;
  *(void *)(v13 + 56) = &type metadata for Bool;
  *(void *)(v13 + 64) = &protocol witness table for Bool;
  *(unsigned char *)(v13 + 32) = v12;
  os_log(_:dso:log:_:_:)();
  swift_bridgeObjectRelease();
  static os_log_type_t.default.getter();
  if (v12)
  {
    os_log(_:dso:log:_:_:)();
    static os_log_type_t.default.getter();
    if (qword_101636DC8 != -1) {
      swift_once();
    }
    uint64_t v14 = os_log(_:dso:log:_:_:)();
    v21(v14);
    swift_release();
    swift_release();
    swift_release_n();
  }
  else
  {
    os_log(_:dso:log:_:_:)();
    static os_log_type_t.default.getter();
    os_log(_:dso:log:_:_:)();
    uint64_t v21 = *(void (**)(uint64_t))(v10 + 64);
    uint64_t v15 = (void *)swift_allocObject();
    v15[2] = v10;
    v15[3] = sub_100B565F4;
    v15[4] = v11;
    aBlock[4] = sub_100B64438;
    aBlock[5] = v15;
    aBlock[0] = _NSConcreteStackBlock;
    aBlock[1] = 1107296256;
    aBlock[2] = sub_1004B5480;
    aBlock[3] = &unk_1015E9370;
    uint64_t v16 = _Block_copy(aBlock);
    swift_retain();
    swift_retain();
    BOOL v17 = v22;
    static DispatchQoS.unspecified.getter();
    uint64_t v29 = _swiftEmptyArrayStorage;
    sub_100B22DA4((unint64_t *)&qword_10163B7E0, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
    sub_10000588C((uint64_t *)&unk_10163F350);
    sub_100062734((unint64_t *)&qword_10163B7F0, (uint64_t *)&unk_10163F350);
    uint64_t v18 = v24;
    uint64_t v19 = v27;
    dispatch thunk of SetAlgebra.init<A>(_:)();
    OS_dispatch_queue.async(group:qos:flags:execute:)();
    _Block_release(v16);
    (*(void (**)(char *, uint64_t))(v26 + 8))(v18, v19);
    (*(void (**)(char *, uint64_t))(v23 + 8))(v17, v25);
    swift_release();
    swift_release();
    swift_release_n();
    swift_release();
  }
  return swift_release();
}

uint64_t sub_100B4947C()
{
  uint64_t v0 = type metadata accessor for SystemInfo.DeviceLockState();
  uint64_t v1 = *(void *)(v0 - 8);
  uint64_t v2 = __chkstk_darwin(v0);
  uint64_t v4 = (char *)v16 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v2);
  uint64_t v6 = (char *)v16 - v5;
  static SystemInfo.lockState.getter();
  (*(void (**)(char *, void, uint64_t))(v1 + 104))(v4, enum case for SystemInfo.DeviceLockState.beforeFirstUnlock(_:), v0);
  sub_100B22DA4((unint64_t *)&unk_101655610, (void (*)(uint64_t))&type metadata accessor for SystemInfo.DeviceLockState);
  dispatch thunk of RawRepresentable.rawValue.getter();
  dispatch thunk of RawRepresentable.rawValue.getter();
  uint64_t v8 = v16[2];
  uint64_t v7 = v17;
  uint64_t v9 = *(void (**)(char *, uint64_t))(v1 + 8);
  v9(v4, v0);
  v9(v6, v0);
  if (v7 == v8)
  {
    static os_log_type_t.default.getter();
    if (qword_101637260 != -1) {
      swift_once();
    }
    sub_10000588C((uint64_t *)&unk_10163AD00);
    uint64_t v10 = swift_allocObject();
    *(_OWORD *)(v10 + 16) = xmmword_101342130;
    char v11 = sub_100B308A8();
    *(void *)(v10 + 56) = &type metadata for Bool;
    *(void *)(v10 + 64) = &protocol witness table for Bool;
    *(unsigned char *)(v10 + 32) = v11 & 1;
    os_log(_:dso:log:_:_:)();
    swift_bridgeObjectRelease();
  }
  else
  {
    char v12 = sub_100AD4584() > 0;
    sub_100B30B88(v12);
    static os_log_type_t.default.getter();
    if (qword_101637260 != -1) {
      swift_once();
    }
    sub_10000588C((uint64_t *)&unk_10163AD00);
    uint64_t v13 = swift_allocObject();
    *(_OWORD *)(v13 + 16) = xmmword_101342130;
    char v14 = sub_100B308A8();
    *(void *)(v13 + 56) = &type metadata for Bool;
    *(void *)(v13 + 64) = &protocol witness table for Bool;
    *(unsigned char *)(v13 + 32) = v14 & 1;
    os_log(_:dso:log:_:_:)();
    swift_bridgeObjectRelease();
    LOBYTE(v17) = sub_100B308A8() & 1;
    CurrentValueSubject.send(_:)();
  }
  type metadata accessor for Transaction();
  static Transaction.named<A>(_:with:)();
  QueueSynchronizer.conditionalSync<A>(_:)();
  sub_100A9E7EC(5);
  sub_100AACCCC();
  swift_retain();
  static Transaction.asyncTask(name:block:)();
  return swift_release();
}

uint64_t sub_100B49888(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v22 = *(void *)(v4 - 8);
  uint64_t v23 = v4;
  __chkstk_darwin(v4);
  uint64_t v20 = (char *)v17 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v21 = type metadata accessor for DispatchQoS();
  uint64_t v19 = *(void *)(v21 - 8);
  __chkstk_darwin(v21);
  uint64_t v18 = (char *)v17 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_retain();
  uint64_t v7 = sub_100AB24F0();
  uint64_t v8 = (void *)swift_allocObject();
  v8[2] = sub_100B5F840;
  v8[3] = a2;
  v8[4] = a1;
  swift_retain_n();
  swift_retain_n();
  QueueSynchronizer.conditionalSync<A>(_:)();
  int v9 = LOBYTE(aBlock[0]);
  static os_log_type_t.default.getter();
  if (qword_101637270 != -1) {
    swift_once();
  }
  sub_10000588C((uint64_t *)&unk_10163AD00);
  uint64_t v10 = swift_allocObject();
  *(_OWORD *)(v10 + 16) = xmmword_101342130;
  *(void *)(v10 + 56) = &type metadata for Bool;
  *(void *)(v10 + 64) = &protocol witness table for Bool;
  *(unsigned char *)(v10 + 32) = v9;
  os_log(_:dso:log:_:_:)();
  swift_bridgeObjectRelease();
  static os_log_type_t.default.getter();
  os_log(_:dso:log:_:_:)();
  if (v9)
  {
    sub_100B4947C();
    swift_release();
    swift_release();
    swift_release_n();
  }
  else
  {
    static os_log_type_t.default.getter();
    os_log(_:dso:log:_:_:)();
    v17[1] = *(void *)(v7 + 64);
    char v11 = (void *)swift_allocObject();
    v11[2] = v7;
    v11[3] = sub_100B565F4;
    v11[4] = v8;
    aBlock[4] = sub_100B64438;
    aBlock[5] = v11;
    aBlock[0] = _NSConcreteStackBlock;
    aBlock[1] = 1107296256;
    aBlock[2] = sub_1004B5480;
    aBlock[3] = &unk_1015E94B0;
    char v12 = _Block_copy(aBlock);
    swift_retain();
    swift_retain();
    uint64_t v13 = v18;
    static DispatchQoS.unspecified.getter();
    NSString v24 = _swiftEmptyArrayStorage;
    sub_100B22DA4((unint64_t *)&qword_10163B7E0, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
    sub_10000588C((uint64_t *)&unk_10163F350);
    sub_100062734((unint64_t *)&qword_10163B7F0, (uint64_t *)&unk_10163F350);
    char v14 = v20;
    uint64_t v15 = v23;
    dispatch thunk of SetAlgebra.init<A>(_:)();
    OS_dispatch_queue.async(group:qos:flags:execute:)();
    _Block_release(v12);
    (*(void (**)(char *, uint64_t))(v22 + 8))(v14, v15);
    (*(void (**)(char *, uint64_t))(v19 + 8))(v13, v21);
    swift_release();
    swift_release();
    swift_release_n();
    swift_release();
  }
  return swift_release();
}

uint64_t sub_100B49D90(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v22 = *(void *)(v4 - 8);
  uint64_t v23 = v4;
  __chkstk_darwin(v4);
  uint64_t v20 = (char *)&v17 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v21 = type metadata accessor for DispatchQoS();
  uint64_t v19 = *(void *)(v21 - 8);
  __chkstk_darwin(v21);
  uint64_t v18 = (char *)&v17 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_retain();
  uint64_t v7 = sub_100AB24F0();
  uint64_t v8 = (void *)swift_allocObject();
  v8[2] = sub_100B60F70;
  v8[3] = a2;
  v8[4] = a1;
  swift_retain_n();
  uint64_t v24 = a1;
  swift_retain_n();
  QueueSynchronizer.conditionalSync<A>(_:)();
  int v9 = LOBYTE(aBlock[0]);
  static os_log_type_t.default.getter();
  if (qword_101637270 != -1) {
    swift_once();
  }
  sub_10000588C((uint64_t *)&unk_10163AD00);
  uint64_t v10 = swift_allocObject();
  *(_OWORD *)(v10 + 16) = xmmword_101342130;
  *(void *)(v10 + 56) = &type metadata for Bool;
  *(void *)(v10 + 64) = &protocol witness table for Bool;
  *(unsigned char *)(v10 + 32) = v9;
  os_log(_:dso:log:_:_:)();
  swift_bridgeObjectRelease();
  static os_log_type_t.default.getter();
  os_log(_:dso:log:_:_:)();
  if (v9)
  {
    type metadata accessor for Transaction();
    static Transaction.named<A>(_:with:)();
    swift_release();
    swift_release();
    swift_release_n();
  }
  else
  {
    static os_log_type_t.default.getter();
    os_log(_:dso:log:_:_:)();
    uint64_t v17 = *(void *)(v7 + 64);
    char v11 = (void *)swift_allocObject();
    v11[2] = v7;
    v11[3] = sub_100B565F4;
    v11[4] = v8;
    aBlock[4] = sub_100B64438;
    aBlock[5] = v11;
    aBlock[0] = _NSConcreteStackBlock;
    aBlock[1] = 1107296256;
    aBlock[2] = sub_1004B5480;
    aBlock[3] = &unk_1015E9A28;
    char v12 = _Block_copy(aBlock);
    swift_retain();
    swift_retain();
    uint64_t v13 = v18;
    static DispatchQoS.unspecified.getter();
    uint64_t v25 = _swiftEmptyArrayStorage;
    sub_100B22DA4((unint64_t *)&qword_10163B7E0, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
    sub_10000588C((uint64_t *)&unk_10163F350);
    sub_100062734((unint64_t *)&qword_10163B7F0, (uint64_t *)&unk_10163F350);
    char v14 = v20;
    uint64_t v15 = v23;
    dispatch thunk of SetAlgebra.init<A>(_:)();
    OS_dispatch_queue.async(group:qos:flags:execute:)();
    _Block_release(v12);
    (*(void (**)(char *, uint64_t))(v22 + 8))(v14, v15);
    (*(void (**)(char *, uint64_t))(v19 + 8))(v13, v21);
    swift_release();
    swift_release();
    swift_release_n();
    swift_release();
  }
  return swift_release();
}

void sub_100B4A2D8(uint64_t a1, char a2, void (*a3)(uint64_t (*)()), void (*a4)(uint64_t (*)()), uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v55 = a5;
  uint64_t v56 = a3;
  uint64_t v57 = a4;
  uint64_t v58 = a1;
  uint64_t v52 = sub_10000588C(&qword_10164B300);
  __chkstk_darwin(v52);
  uint64_t v53 = (uint64_t (*)())((char *)&v47 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v11 = type metadata accessor for BeaconNamingRecord();
  uint64_t v50 = *(void *)(v11 - 8);
  uint64_t v12 = *(void *)(v50 + 64);
  uint64_t v13 = __chkstk_darwin(v11);
  char v14 = (char *)&v47 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v13);
  Class v54 = (Class)((char *)&v47 - v15);
  uint64_t v16 = swift_allocObject();
  uint64_t v51 = a6;
  *(void *)(v16 + 16) = a6;
  *(void *)(v16 + 24) = a7;
  uint64_t v59 = v16;
  swift_bridgeObjectRetain();
  static os_log_type_t.default.getter();
  if (qword_101637260 != -1) {
    swift_once();
  }
  uint64_t v49 = sub_10000588C((uint64_t *)&unk_10163AD00);
  uint64_t v17 = swift_allocObject();
  uint64_t v18 = (void *)v17;
  long long v47 = xmmword_101342130;
  *(_OWORD *)(v17 + 16) = xmmword_101342130;
  if (a2) {
    uint64_t v19 = 1702195828;
  }
  else {
    uint64_t v19 = 0x65736C6166;
  }
  if (a2) {
    unint64_t v20 = 0xE400000000000000;
  }
  else {
    unint64_t v20 = 0xE500000000000000;
  }
  *(void *)(v17 + 56) = &type metadata for String;
  unint64_t v48 = sub_10000B4CC();
  v18[8] = v48;
  v18[4] = v19;
  v18[5] = v20;
  os_log(_:dso:log:_:_:)();
  swift_bridgeObjectRelease();
  if (a2)
  {
    uint64_t v22 = v58;
    Class v23 = sub_101154D08(v58);
    uint64_t v24 = v55;
    Class v25 = v23;
    v60[0] = v25;
    Class v26 = v54;
    sub_100B30D0C(v22, (uint64_t)v54, (uint64_t (*)(void))type metadata accessor for BeaconNamingRecord);
    uint64_t v27 = (void *)((char *)v26 + *(int *)(v11 + 32));
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    void *v27 = v51;
    v27[1] = a7;
    sub_101076E58(v60, (uint64_t)v26);
    uint64_t v28 = QueueSynchronizer.conditionalSync<A>(_:)();
    __chkstk_darwin(v28);
    *((void *)&v47 - 2) = v29;
    *((void *)&v47 - 1) = v26;
    OS_dispatch_queue.sync<A>(execute:)();
    QueueSynchronizer.conditionalSync<A>(_:)();
    sub_100A9E7EC(8);
    uint64_t v44 = v53;
    sub_100B30D0C((uint64_t)v26, (uint64_t)v53, (uint64_t (*)(void))type metadata accessor for BeaconNamingRecord);
    swift_storeEnumTagMultiPayload();
    v56(v44);
    sub_10001DAB4((uint64_t)v44, &qword_10164B300);
    uint64_t v45 = type metadata accessor for Transaction();
    __chkstk_darwin(v45);
    *((void *)&v47 - 4) = v24;
    *((void *)&v47 - 3) = v60;
    *((void *)&v47 - 2) = v22;
    static Transaction.named<A>(_:with:)();
    sub_100B310AC((uint64_t)v26, (uint64_t (*)(void))type metadata accessor for BeaconNamingRecord);
    id v46 = v60[0];
    swift_release();
  }
  else
  {
    uint64_t v31 = v58;
    Class v54 = sub_101154D08(v58);
    uint64_t v32 = v55;
    sub_100AB24F0();
    sub_100B30D0C(v31, (uint64_t)v14, (uint64_t (*)(void))type metadata accessor for BeaconNamingRecord);
    uint64_t v33 = *(unsigned __int8 *)(v50 + 80);
    uint64_t v34 = swift_allocObject();
    uint64_t v35 = v59;
    *(void *)(v34 + 16) = sub_100B60FE4;
    *(void *)(v34 + 24) = v35;
    uint64_t v53 = type metadata accessor for BeaconNamingRecord;
    sub_100B30DB4((uint64_t)v14, v34 + ((v33 + 32) & ~v33), (uint64_t (*)(void))type metadata accessor for BeaconNamingRecord);
    swift_retain();
    sub_101017624(v54, (void (*)(id *))sub_100B64440, v34);
    swift_release();
    swift_release();
    uint64_t v36 = swift_allocObject();
    uint64_t v37 = v32;
    uint64_t v38 = v56;
    uint64_t v39 = v57;
    *(void *)(v36 + 16) = v56;
    *(void *)(v36 + 24) = v39;
    swift_retain();
    Future.addFailure(block:)();
    swift_release();
    swift_release();
    sub_100B30D0C(v58, (uint64_t)v14, (uint64_t (*)(void))type metadata accessor for BeaconNamingRecord);
    uint64_t v40 = (v33 + 16) & ~v33;
    unint64_t v41 = (v12 + v40 + 7) & 0xFFFFFFFFFFFFFFF8;
    uint64_t v42 = swift_allocObject();
    sub_100B30DB4((uint64_t)v14, v42 + v40, (uint64_t (*)(void))v53);
    *(void *)(v42 + v41) = v37;
    uint64_t v43 = (void (**)(uint64_t (*)()))(v42 + ((v41 + 15) & 0xFFFFFFFFFFFFFFF8));
    *uint64_t v43 = v38;
    v43[1] = v39;
    swift_retain();
    swift_retain();
    Future.addSuccess(block:)();
    swift_release();

    swift_release();
    swift_release();
    swift_release();
  }
}

uint64_t sub_100B4AA7C()
{
  uint64_t v0 = sub_10000588C(&qword_101659570);
  uint64_t v1 = *(void *)(v0 - 8);
  __chkstk_darwin(v0);
  uint64_t v3 = (char *)&v27 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = sub_10000588C((uint64_t *)&unk_10163AC90);
  __chkstk_darwin(v4 - 8);
  uint64_t v6 = (char *)&v27 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for Date();
  uint64_t v8 = *(void *)(v7 - 8);
  uint64_t v9 = __chkstk_darwin(v7);
  uint64_t v11 = (char *)&v27 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9);
  uint64_t v13 = (char *)&v27 - v12;
  if (qword_101636F90 != -1) {
    swift_once();
  }
  uint64_t v14 = sub_100010324(v0, (uint64_t)qword_101658728);
  swift_beginAccess();
  (*(void (**)(char *, uint64_t, uint64_t))(v1 + 16))(v3, v14, v0);
  ManagedDefault.wrappedValue.getter();
  (*(void (**)(char *, uint64_t))(v1 + 8))(v3, v0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v8 + 48))(v6, 1, v7) == 1)
  {
    sub_10001DAB4((uint64_t)v6, (uint64_t *)&unk_10163AC90);
    return 1;
  }
  (*(void (**)(char *, char *, uint64_t))(v8 + 32))(v13, v6, v7);
  Date.init()();
  if (qword_101636F80 != -1) {
    swift_once();
  }
  double v15 = (double)(Duration.milliseconds.getter() / 1000);
  Date.timeIntervalSinceReferenceDate.getter();
  double v17 = v16;
  Date.timeIntervalSinceReferenceDate.getter();
  double v19 = v17 - v18;
  if (v19 > v15)
  {
    unint64_t v20 = *(void (**)(char *, uint64_t))(v8 + 8);
    v20(v11, v7);
    v20(v13, v7);
    return 1;
  }
  if (qword_101636F58 != -1) {
    swift_once();
  }
  uint64_t v22 = type metadata accessor for Logger();
  sub_100010324(v22, (uint64_t)qword_10170EA00);
  Class v23 = Logger.logObject.getter();
  os_log_type_t v24 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v23, v24))
  {
    uint64_t v25 = swift_slowAlloc();
    *(_DWORD *)uint64_t v25 = 134218240;
    double v27 = v19;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v25 + 12) = 2048;
    double v27 = v15;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl((void *)&_mh_execute_header, v23, v24, "Not publishing metrics: duration %f < threshold %f", (uint8_t *)v25, 0x16u);
    swift_slowDealloc();
  }

  Class v26 = *(void (**)(char *, uint64_t))(v8 + 8);
  v26(v11, v7);
  v26(v13, v7);
  return 0;
}

uint64_t sub_100B4AF00(uint64_t a1, uint64_t a2, uint64_t a3, void *a4, uint64_t a5)
{
  uint64_t v25 = a4;
  uint64_t v26 = a3;
  uint64_t v23 = a2;
  uint64_t v24 = a1;
  uint64_t v6 = type metadata accessor for OS_dispatch_queue.Attributes();
  __chkstk_darwin(v6);
  uint64_t v7 = type metadata accessor for DispatchQoS();
  __chkstk_darwin(v7 - 8);
  uint64_t v21 = type metadata accessor for OS_dispatch_queue.AutoreleaseFrequency();
  uint64_t v8 = *(void *)(v21 - 8);
  __chkstk_darwin(v21);
  uint64_t v10 = (char *)v18 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(void *)(a5 + 24) = 0;
  uint64_t v22 = a5 + 16;
  swift_unknownObjectWeakInit();
  v18[2] = sub_10001D4B0(0, (unint64_t *)&qword_1016376E0);
  unsigned int v20 = enum case for OS_dispatch_queue.AutoreleaseFrequency.workItem(_:);
  double v19 = *(void (**)(char *))(v8 + 104);
  v19(v10);
  static DispatchQoS.unspecified.getter();
  double v27 = _swiftEmptyArrayStorage;
  v18[1] = sub_100B22DA4((unint64_t *)&qword_101638CC0, (void (*)(uint64_t))&type metadata accessor for OS_dispatch_queue.Attributes);
  sub_10000588C((uint64_t *)&unk_1016376F0);
  sub_100062734((unint64_t *)&qword_101638CD0, (uint64_t *)&unk_1016376F0);
  dispatch thunk of SetAlgebra.init<A>(_:)();
  *(void *)(a5 + 32) = OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)();
  *(void *)(a5 + 56) = dispatch_semaphore_create(0);
  ((void (*)(char *, void, uint64_t))v19)(v10, v20, v21);
  static DispatchQoS.unspecified.getter();
  double v27 = _swiftEmptyArrayStorage;
  dispatch thunk of SetAlgebra.init<A>(_:)();
  *(void *)(a5 + 64) = OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)();
  *(unsigned char *)(a5 + 72) = 0;
  *(void *)(a5 + 104) = 0;
  *(unsigned char *)(a5 + 112) = 0;
  *(void *)(a5 + 80) = 0;
  *(void *)(a5 + 88) = 0;
  *(unsigned char *)(a5 + 96) = 0;
  *(void *)(a5 + 136) = 0;
  *(void *)(a5 + 144) = 0;
  *(void *)(a5 + 128) = 0;
  sub_10000588C(&qword_101644840);
  swift_allocObject();
  *(void *)(a5 + 152) = PassthroughSubject.init()();
  *(void *)(a5 + 160) = 0;
  sub_10000588C(&qword_101648980);
  swift_allocObject();
  *(void *)(a5 + 168) = PassthroughSubject.init()();
  *(void *)(a5 + 176) = _swiftEmptyArrayStorage;
  *(_WORD *)(a5 + 184) = 0;
  *(void *)(a5 + 192) = 0;
  *(void *)(a5 + 200) = 0;
  *(void *)(a5 + 208) = 0x2D65746176697270;
  *(void *)(a5 + 216) = 0xEF7365676E616863;
  *(void *)(a5 + 224) = static String._unconditionallyBridgeFromObjectiveC(_:)();
  *(void *)(a5 + 232) = v11;
  *(_OWORD *)(a5 + 240) = 0u;
  *(_OWORD *)(a5 + 256) = 0u;
  *(void *)(a5 + 280) = dispatch_semaphore_create(1);
  static os_log_type_t.default.getter();
  if (qword_101637268 != -1) {
    swift_once();
  }
  os_log(_:dso:log:_:_:)();
  *(void *)(a5 + 272) = v24;
  *(void *)(a5 + 24) = &off_1015AAD20;
  swift_unknownObjectWeakAssign();
  uint64_t v12 = v25;
  *(void *)(a5 + 48) = v25;
  type metadata accessor for CloudKitUpdateEligibility();
  swift_allocObject();
  swift_retain();
  id v13 = v12;
  uint64_t v14 = swift_retain();
  *(void *)(a5 + 120) = sub_10042C120(v14);
  double v15 = *(void **)(a5 + 32);
  type metadata accessor for QueueSynchronizer();
  swift_allocObject();
  id v16 = v15;
  *(void *)(a5 + 40) = QueueSynchronizer.init(queue:)();
  sub_10100BDB4();
  return a5;
}

void sub_100B4B3DC(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  sub_10001D608(a1, (uint64_t)v13, &qword_1016549D0);
  uint64_t v5 = v13[0];
  uint64_t v4 = v13[1];
  uint64_t v7 = v13[2];
  uint64_t v6 = v13[3];
  uint64_t v8 = v13[4];
  sub_10001D608(a1, (uint64_t)v14, &qword_1016549D0);
  if (v14[0] == 2)
  {
    if (qword_101636F50 != -1) {
      swift_once();
    }
    uint64_t v9 = type metadata accessor for Logger();
    sub_100010324(v9, (uint64_t)qword_10170E9E8);
    uint64_t v10 = Logger.logObject.getter();
    os_log_type_t v11 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v10, v11))
    {
      uint64_t v12 = swift_slowAlloc();
      *(_DWORD *)uint64_t v12 = 134218496;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v12 + 12) = 2048;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v12 + 22) = 2048;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      _os_log_impl((void *)&_mh_execute_header, v10, v11, "BeaconStore XPC criteria: delay %lld, gracePeriod %lld, interval %lld", (uint8_t *)v12, 0x20u);
      swift_slowDealloc();
    }

    uint64_t v8 = 64;
    uint64_t v6 = 86400;
    uint64_t v4 = 43200;
    uint64_t v5 = 257;
    uint64_t v7 = 43200;
  }
  *a2 = v5;
  a2[1] = v4;
  a2[2] = v7;
  a2[3] = v6;
  a2[4] = v8;
}

uint64_t sub_100B4B5A4(uint64_t a1, int a2, void *a3, uint64_t a4, void (*a5)(char *), uint64_t a6)
{
  uint64_t v50 = a1;
  uint64_t v46 = sub_10000588C(&qword_10163FFA0);
  __chkstk_darwin(v46);
  uint64_t v12 = (char *)&v45 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = type metadata accessor for SharedBeaconRecord(0);
  __chkstk_darwin(v13 - 8);
  uint64_t v51 = (void **)((char *)&v45 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0));
  double v15 = (void *)swift_allocObject();
  v15[2] = a4;
  v15[3] = a5;
  long long v47 = a5;
  v15[4] = a6;
  uint64_t v16 = qword_101636F50;
  swift_retain();
  swift_retain();
  if (v16 != -1) {
    swift_once();
  }
  uint64_t v17 = type metadata accessor for Logger();
  sub_100010324(v17, (uint64_t)qword_10170E9E8);
  double v18 = Logger.logObject.getter();
  os_log_type_t v19 = static os_log_type_t.default.getter();
  BOOL v20 = os_log_type_enabled(v18, v19);
  uint64_t v48 = a4;
  uint64_t v49 = a6;
  if (v20)
  {
    uint64_t v21 = (uint8_t *)swift_slowAlloc();
    *(_DWORD *)uint64_t v21 = 67109120;
    LODWORD(v52) = a2 & 1;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl((void *)&_mh_execute_header, v18, v19, "Saving record. Disk First? %{BOOL}d", v21, 8u);
    swift_slowDealloc();
  }

  if (qword_101637188 != -1) {
    swift_once();
  }
  uint64_t v22 = (void *)qword_10170EE68;
  id v23 = [self sharedInstance];
  unsigned int v24 = [v23 isInternalBuild];

  if (v24)
  {
    NSString v25 = String._bridgeToObjectiveC()();
    unsigned int v26 = [v22 BOOLForKey:v25];
  }
  else
  {
    unsigned int v26 = 0;
  }
  id v27 = [self defaultStore];
  if (v27)
  {
    uint64_t v28 = v27;
    id v29 = [v27 aa_primaryAppleAccount];

    if (v29 && (v29, ((a2 | v26) & 1) == 0))
    {
      sub_100AC4C14(v50, (uint64_t)sub_100B61F5C, (uint64_t)v15);
    }
    else
    {
      uint64_t v45 = v15;
      uint64_t v30 = (uint64_t)v51;
      sub_100B30D0C(v50, (uint64_t)v51, type metadata accessor for SharedBeaconRecord);
      uint64_t v31 = QueueSynchronizer.conditionalSync<A>(_:)();
      __chkstk_darwin(v31);
      *(&v45 - 2) = v32;
      *(&v45 - 1) = (void *)v30;
      OS_dispatch_queue.sync<A>(execute:)();
      uint64_t v33 = Logger.logObject.getter();
      os_log_type_t v34 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v33, v34))
      {
        uint64_t v35 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)uint64_t v35 = 0;
        _os_log_impl((void *)&_mh_execute_header, v33, v34, "Saved LocalStorageBacked record. Calling completion.", v35, 2u);
        swift_slowDealloc();
      }

      uint64_t v36 = v50;
      sub_100B30D0C(v50, (uint64_t)v12, type metadata accessor for SharedBeaconRecord);
      swift_storeEnumTagMultiPayload();
      sub_101169334((uint64_t)v12, v48, v47, v49);
      sub_10001DAB4((uint64_t)v12, &qword_10163FFA0);
      if (((v29 != 0) & ~v26) != 0)
      {
        uint64_t v42 = type metadata accessor for Transaction();
        __chkstk_darwin(v42);
        *(&v45 - 4) = a3;
        *(&v45 - 3) = (void *)v36;
        uint64_t v43 = (uint64_t)v51;
        *(&v45 - 2) = v51;
        static Transaction.named<A>(_:with:)();
        uint64_t v41 = v43;
      }
      else
      {
        uint64_t v37 = Logger.logObject.getter();
        os_log_type_t v38 = static os_log_type_t.info.getter();
        if (os_log_type_enabled(v37, v38))
        {
          BOOL v39 = v29 != 0;
          uint64_t v40 = swift_slowAlloc();
          *(_DWORD *)uint64_t v40 = 67109376;
          LODWORD(v52) = v26;
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          *(_WORD *)(v40 + 8) = 1024;
          LODWORD(v52) = v39;
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          _os_log_impl((void *)&_mh_execute_header, v37, v38, "Skipping save to cloud. skipCloudSave: %{BOOL}d, isiCloudSignedIn %{BOOL}d", (uint8_t *)v40, 0xEu);
          swift_slowDealloc();
        }

        uint64_t v41 = (uint64_t)v51;
      }
      sub_100B310AC(v41, type metadata accessor for SharedBeaconRecord);
    }
    return swift_release();
  }
  else
  {
    swift_release();
    uint64_t result = swift_release();
    __break(1u);
  }
  return result;
}

uint64_t sub_100B4BDB4(uint64_t a1, int a2, void *a3, uint64_t a4, void (*a5)(char *), uint64_t a6)
{
  uint64_t v50 = a1;
  uint64_t v46 = sub_10000588C(&qword_10163FFA0);
  __chkstk_darwin(v46);
  uint64_t v12 = (char *)&v45 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = type metadata accessor for SharedBeaconRecord(0);
  __chkstk_darwin(v13 - 8);
  uint64_t v51 = (void **)((char *)&v45 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0));
  double v15 = (void *)swift_allocObject();
  v15[2] = a4;
  v15[3] = a5;
  long long v47 = a5;
  v15[4] = a6;
  uint64_t v16 = qword_101636F50;
  swift_retain();
  swift_retain();
  if (v16 != -1) {
    swift_once();
  }
  uint64_t v17 = type metadata accessor for Logger();
  sub_100010324(v17, (uint64_t)qword_10170E9E8);
  double v18 = Logger.logObject.getter();
  os_log_type_t v19 = static os_log_type_t.default.getter();
  BOOL v20 = os_log_type_enabled(v18, v19);
  uint64_t v48 = a4;
  uint64_t v49 = a6;
  if (v20)
  {
    uint64_t v21 = (uint8_t *)swift_slowAlloc();
    *(_DWORD *)uint64_t v21 = 67109120;
    LODWORD(v52) = a2 & 1;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl((void *)&_mh_execute_header, v18, v19, "Saving record. Disk First? %{BOOL}d", v21, 8u);
    swift_slowDealloc();
  }

  if (qword_101637188 != -1) {
    swift_once();
  }
  uint64_t v22 = (void *)qword_10170EE68;
  id v23 = [self sharedInstance];
  unsigned int v24 = [v23 isInternalBuild];

  if (v24)
  {
    NSString v25 = String._bridgeToObjectiveC()();
    unsigned int v26 = [v22 BOOLForKey:v25];
  }
  else
  {
    unsigned int v26 = 0;
  }
  id v27 = [self defaultStore];
  if (v27)
  {
    uint64_t v28 = v27;
    id v29 = [v27 aa_primaryAppleAccount];

    if (v29 && (v29, ((a2 | v26) & 1) == 0))
    {
      sub_100AC4C14(v50, (uint64_t)sub_100B61F84, (uint64_t)v15);
    }
    else
    {
      uint64_t v45 = v15;
      uint64_t v30 = (uint64_t)v51;
      sub_100B30D0C(v50, (uint64_t)v51, type metadata accessor for SharedBeaconRecord);
      uint64_t v31 = QueueSynchronizer.conditionalSync<A>(_:)();
      __chkstk_darwin(v31);
      *(&v45 - 2) = v32;
      *(&v45 - 1) = (void *)v30;
      OS_dispatch_queue.sync<A>(execute:)();
      uint64_t v33 = Logger.logObject.getter();
      os_log_type_t v34 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v33, v34))
      {
        uint64_t v35 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)uint64_t v35 = 0;
        _os_log_impl((void *)&_mh_execute_header, v33, v34, "Saved LocalStorageBacked record. Calling completion.", v35, 2u);
        swift_slowDealloc();
      }

      uint64_t v36 = v50;
      sub_100B30D0C(v50, (uint64_t)v12, type metadata accessor for SharedBeaconRecord);
      swift_storeEnumTagMultiPayload();
      sub_10116B618((uint64_t)v12, v48, v47, v49);
      sub_10001DAB4((uint64_t)v12, &qword_10163FFA0);
      if (((v29 != 0) & ~v26) != 0)
      {
        uint64_t v42 = type metadata accessor for Transaction();
        __chkstk_darwin(v42);
        *(&v45 - 4) = a3;
        *(&v45 - 3) = (void *)v36;
        uint64_t v43 = (uint64_t)v51;
        *(&v45 - 2) = v51;
        static Transaction.named<A>(_:with:)();
        uint64_t v41 = v43;
      }
      else
      {
        uint64_t v37 = Logger.logObject.getter();
        os_log_type_t v38 = static os_log_type_t.info.getter();
        if (os_log_type_enabled(v37, v38))
        {
          BOOL v39 = v29 != 0;
          uint64_t v40 = swift_slowAlloc();
          *(_DWORD *)uint64_t v40 = 67109376;
          LODWORD(v52) = v26;
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          *(_WORD *)(v40 + 8) = 1024;
          LODWORD(v52) = v39;
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          _os_log_impl((void *)&_mh_execute_header, v37, v38, "Skipping save to cloud. skipCloudSave: %{BOOL}d, isiCloudSignedIn %{BOOL}d", (uint8_t *)v40, 0xEu);
          swift_slowDealloc();
        }

        uint64_t v41 = (uint64_t)v51;
      }
      sub_100B310AC(v41, type metadata accessor for SharedBeaconRecord);
    }
    return swift_release();
  }
  else
  {
    swift_release();
    uint64_t result = swift_release();
    __break(1u);
  }
  return result;
}

void sub_100B4C5C4(uint64_t a1, int a2, uint64_t a3, void *a4, uint64_t a5)
{
  uint64_t v42 = a3;
  uint64_t v43 = a1;
  uint64_t v8 = sub_10000588C(&qword_10164B328);
  __chkstk_darwin(v8);
  uint64_t v10 = (char *)v38 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = type metadata accessor for KeyAlignmentRecord();
  __chkstk_darwin(v11 - 8);
  uint64_t v13 = (char *)v38 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = swift_allocObject();
  *(void *)(v14 + 16) = a4;
  *(void *)(v14 + 24) = a5;
  uint64_t v15 = qword_101636F50;
  uint64_t v41 = a4;
  swift_retain();
  if (v15 != -1) {
    swift_once();
  }
  uint64_t v16 = type metadata accessor for Logger();
  sub_100010324(v16, (uint64_t)qword_10170E9E8);
  uint64_t v17 = Logger.logObject.getter();
  os_log_type_t v18 = static os_log_type_t.default.getter();
  BOOL v19 = os_log_type_enabled(v17, v18);
  uint64_t v40 = v8;
  if (v19)
  {
    BOOL v20 = (uint8_t *)swift_slowAlloc();
    *(_DWORD *)BOOL v20 = 67109120;
    LODWORD(v44) = a2 & 1;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl((void *)&_mh_execute_header, v17, v18, "Saving record. Disk First? %{BOOL}d", v20, 8u);
    swift_slowDealloc();
  }

  if (qword_101637188 != -1) {
    swift_once();
  }
  uint64_t v21 = (void *)qword_10170EE68;
  id v22 = [self sharedInstance];
  unsigned int v23 = [v22 isInternalBuild];

  if (v23)
  {
    NSString v24 = String._bridgeToObjectiveC()();
    unsigned int v23 = [v21 BOOLForKey:v24];
  }
  id v25 = [self defaultStore];
  if (v25)
  {
    unsigned int v26 = v25;
    id v27 = [v25 aa_primaryAppleAccount];

    if (v27 && (v27, ((a2 | v23) & 1) == 0))
    {
      sub_100AC5268(v43, (uint64_t)sub_100B5C120, v14);
    }
    else
    {
      uint64_t v39 = a5;
      uint64_t v28 = sub_100B30D0C(v43, (uint64_t)v13, (uint64_t (*)(void))type metadata accessor for KeyAlignmentRecord);
      __chkstk_darwin(v28);
      v38[-2] = v29;
      v38[-1] = v13;
      OS_dispatch_queue.sync<A>(execute:)();
      v38[1] = v14;
      uint64_t v30 = Logger.logObject.getter();
      os_log_type_t v31 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v30, v31))
      {
        uint64_t v32 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)uint64_t v32 = 0;
        _os_log_impl((void *)&_mh_execute_header, v30, v31, "Saved LocalStorageBacked record. Calling completion.", v32, 2u);
        swift_slowDealloc();
      }

      sub_100B30D0C(v43, (uint64_t)v10, (uint64_t (*)(void))type metadata accessor for KeyAlignmentRecord);
      swift_storeEnumTagMultiPayload();
      sub_100BA3134((uint64_t)v10, v41, v39);
      sub_10001DAB4((uint64_t)v10, &qword_10164B328);
      if (((v27 != 0) & ~v23) != 0)
      {
        uint64_t v36 = type metadata accessor for Transaction();
        __chkstk_darwin(v36);
        v38[-4] = v42;
        v38[-3] = v37;
        v38[-2] = v13;
        static Transaction.named<A>(_:with:)();
      }
      else
      {
        uint64_t v33 = Logger.logObject.getter();
        os_log_type_t v34 = static os_log_type_t.info.getter();
        if (os_log_type_enabled(v33, v34))
        {
          uint64_t v35 = swift_slowAlloc();
          *(_DWORD *)uint64_t v35 = 67109376;
          LODWORD(v44) = v23;
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          *(_WORD *)(v35 + 8) = 1024;
          LODWORD(v44) = v27 != 0;
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          _os_log_impl((void *)&_mh_execute_header, v33, v34, "Skipping save to cloud. skipCloudSave: %{BOOL}d, isiCloudSignedIn %{BOOL}d", (uint8_t *)v35, 0xEu);
          swift_slowDealloc();
        }
      }
      sub_100B310AC((uint64_t)v13, (uint64_t (*)(void))type metadata accessor for KeyAlignmentRecord);
    }
    swift_release();
  }
  else
  {
    swift_release();

    __break(1u);
  }
}

uint64_t sub_100B4CD68(uint64_t a1, uint64_t a2, void (*a3)(void), uint64_t a4)
{
  uint64_t v117 = a2;
  uint64_t v113 = type metadata accessor for BeaconStoreFileRecord();
  uint64_t v109 = *(void *)(v113 - 8);
  __chkstk_darwin(v113);
  uint64_t v107 = (uint64_t)v94 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for URL();
  uint64_t v111 = *(uint64_t (**)(uint64_t))(v8 - 8);
  unint64_t v112 = v8;
  uint64_t v9 = __chkstk_darwin(v8);
  uint64_t v106 = (char *)v94 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9);
  unint64_t v98 = (char *)v94 - v11;
  uint64_t v116 = (uint64_t (*)(void))type metadata accessor for UUID();
  Class v118 = (Class)*((void *)v116 - 1);
  uint64_t v12 = __chkstk_darwin(v116);
  v94[1] = (char *)v94 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = __chkstk_darwin(v12);
  uint64_t v16 = (char *)v94 - v15;
  __chkstk_darwin(v14);
  uint64_t v97 = (char *)v94 - v17;
  uint64_t v95 = sub_10000588C(&qword_1016426E8);
  __chkstk_darwin(v95);
  long long v96 = (char *)v94 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v19 = type metadata accessor for OwnedBeaconGroup(0);
  uint64_t v102 = *(void *)(v19 - 8);
  uint64_t v20 = __chkstk_darwin(v19);
  uint64_t v105 = (char *)v94 - (((unint64_t)v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v103 = v21;
  __chkstk_darwin(v20);
  unsigned int v23 = (char *)v94 - v22;
  uint64_t v24 = swift_allocObject();
  uint64_t v108 = a3;
  *(void *)(v24 + 16) = a3;
  *(void *)(v24 + 24) = a4;
  swift_retain();
  static os_log_type_t.default.getter();
  if (qword_101637260 != -1) {
    swift_once();
  }
  uint64_t v100 = sub_10000588C((uint64_t *)&unk_10163AD00);
  uint64_t v25 = swift_allocObject();
  long long v99 = xmmword_101342130;
  *(_OWORD *)(v25 + 16) = xmmword_101342130;
  sub_100B30D0C(a1, (uint64_t)v23, type metadata accessor for OwnedBeaconGroup);
  uint64_t v104 = v23;
  uint64_t v115 = v19;
  uint64_t v26 = String.init<A>(describing:)();
  uint64_t v28 = v27;
  *(void *)(v25 + 56) = &type metadata for String;
  unint64_t v101 = sub_10000B4CC();
  *(void *)(v25 + 64) = v101;
  *(void *)(v25 + 32) = v26;
  *(void *)(v25 + 40) = v28;
  os_log(_:dso:log:_:_:)();
  swift_bridgeObjectRelease();
  if (qword_101637188 != -1) {
    swift_once();
  }
  uint64_t v29 = (void *)qword_10170EE68;
  id v30 = [self sharedInstance];
  unsigned int v31 = [v30 isInternalBuild];

  if (v31)
  {
    NSString v32 = String._bridgeToObjectiveC()();
    unsigned int v33 = [v29 BOOLForKey:v32];
  }
  else
  {
    unsigned int v33 = 0;
  }
  os_log_type_t v34 = (void (**)(char *, void, uint64_t (*)(void)))v118;
  id v35 = [self defaultStore];
  if (v35)
  {
    uint64_t v36 = v35;
    id v37 = [v35 aa_primaryAppleAccount];

    uint64_t v110 = v24;
    uint64_t v114 = a1;
    if (v37 && (v37, (v33 & 1) == 0))
    {
      uint64_t v53 = v111;
      sub_10001D4B0(0, &qword_10163CB60);
      uint64_t v54 = a1 + *(int *)(v115 + 24);
      uint64_t v55 = UUID.uuidString.getter();
      uint64_t v57 = v56;
      uint64_t v58 = v117;
      id v59 = *(id *)(v117 + 152);
      v60._countAndFlagsBits = v55;
      v60._object = v57;
      uint64_t v61 = v58;
      Class isa = CKRecordID.init(recordName:zoneID:)(v60, (CKRecordZoneID)v59).super.isa;
      sub_100AB24F0(isa);
      Class v118 = isa;
      uint64_t v115 = sub_101015AE0(isa);
      swift_release();
      uint64_t v63 = swift_allocBox();
      uint64_t v107 = v64;
      uint64_t v108 = (void (*)(void))v63;
      uint64_t v65 = *(char **)(v109 + 56);
      uint64_t v66 = v113;
      v109 += 56;
      uint64_t v106 = v65;
      ((void (*)(uint64_t, uint64_t, uint64_t, uint64_t))v65)(v64, 1, 1, v113);
      uint64_t v67 = *(void *)(v61 + 160);
      uint64_t v68 = v97;
      v34[2](v97, v54, v116);
      if (qword_101636B50 != -1) {
        swift_once();
      }
      uint64_t v69 = v112;
      uint64_t v70 = sub_100010324(v112, (uint64_t)qword_10170DF88);
      uint64_t v71 = v98;
      uint64_t v72 = (*((uint64_t (**)(char *, uint64_t, uint64_t))v53 + 2))(v98, v70, v69);
      __chkstk_darwin(v72);
      v94[-4] = v67;
      v94[-3] = v68;
      v94[-2] = v71;
      uint64_t v73 = (uint64_t)v96;
      OS_dispatch_queue.sync<A>(execute:)();
      (*((void (**)(char *, uint64_t))v53 + 1))(v71, v69);
      ((void (*)(char *, uint64_t (*)(void)))v34[1])(v68, v116);
      ((void (*)(uint64_t, void, uint64_t, uint64_t))v106)(v73, 0, 1, v66);
      sub_100062604(v73, v107, &qword_1016426E8);
      unint64_t v74 = v101;
      Class v75 = v118;
      static os_log_type_t.default.getter();
      uint64_t v76 = swift_allocObject();
      *(_OWORD *)(v76 + 16) = v99;
      uint64_t v77 = v75;
      Class v118 = v77;
      id v78 = [(objc_class *)v77 description];
      uint64_t v79 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      uint64_t v81 = v80;

      *(void *)(v76 + 56) = &type metadata for String;
      *(void *)(v76 + 64) = v74;
      *(void *)(v76 + 32) = v79;
      *(void *)(v76 + 40) = v81;
      os_log(_:dso:log:_:_:)();
      swift_bridgeObjectRelease();
      uint64_t v116 = type metadata accessor for OwnedBeaconGroup;
      uint64_t v82 = (uint64_t)v104;
      sub_100B30D0C(v114, (uint64_t)v104, type metadata accessor for OwnedBeaconGroup);
      uint64_t v83 = *(unsigned __int8 *)(v102 + 80);
      uint64_t v84 = (v83 + 32) & ~v83;
      unint64_t v85 = ((unint64_t)v103 + v84 + 7) & 0xFFFFFFFFFFFFFFF8;
      unint64_t v112 = v85 + 16;
      uint64_t v113 = v83 | 7;
      uint64_t v86 = swift_allocObject();
      uint64_t v87 = v108;
      uint64_t v88 = v117;
      *(void *)(v86 + 16) = v108;
      *(void *)(v86 + 24) = v88;
      uint64_t v111 = type metadata accessor for OwnedBeaconGroup;
      sub_100B30DB4(v82, v86 + v84, type metadata accessor for OwnedBeaconGroup);
      uint64_t v89 = (uint64_t (**)(uint64_t))(v86 + v85);
      uint64_t v90 = (uint64_t (*)(uint64_t))v110;
      void *v89 = sub_100B640E0;
      v89[1] = v90;
      swift_retain();
      swift_retain();
      swift_retain();
      Future.addSuccess(block:)();
      swift_release();
      swift_release();
      sub_100B30D0C(v114, v82, v116);
      uint64_t v91 = swift_allocObject();
      *(void *)(v91 + 16) = v87;
      *(void *)(v91 + 24) = v88;
      sub_100B30DB4(v82, v91 + v84, v111);
      uint64_t v92 = (uint64_t (**)(uint64_t))(v91 + v85);
      *uint64_t v92 = sub_100B640E0;
      v92[1] = v90;
      swift_retain();
      swift_retain();
      swift_retain();
      Future.addFailure(block:)();
      swift_release();
      swift_release();
      swift_release();

      swift_release();
    }
    else
    {
      uint64_t v109 = a4;
      if (qword_101636F50 != -1) {
        swift_once();
      }
      os_log_type_t v38 = v111;
      uint64_t v39 = type metadata accessor for Logger();
      uint64_t v104 = (char *)sub_100010324(v39, (uint64_t)qword_10170E9E8);
      uint64_t v40 = Logger.logObject.getter();
      os_log_type_t v41 = static os_log_type_t.info.getter();
      if (os_log_type_enabled(v40, v41))
      {
        BOOL v42 = v37 != 0;
        uint64_t v43 = swift_slowAlloc();
        *(_DWORD *)uint64_t v43 = 67109376;
        LODWORD(v119) = v33;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        *(_WORD *)(v43 + 8) = 1024;
        LODWORD(v119) = v42;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        _os_log_impl((void *)&_mh_execute_header, v40, v41, "Skipping cloud delete. skipCloudSave: %{BOOL}d, isiCloudSignedIn %{BOOL}d", (uint8_t *)v43, 0xEu);
        swift_slowDealloc();
      }

      uint64_t v44 = *(void *)(v117 + 160);
      uint64_t v45 = v116;
      uint64_t v46 = a1 + *(int *)(v115 + 24);
      uint64_t v103 = (void (*)(char *, uint64_t, uint64_t (*)(void)))*((void *)v118 + 2);
      v103(v16, v46, v116);
      if (qword_101636B50 != -1) {
        swift_once();
      }
      uint64_t v47 = v112;
      uint64_t v48 = sub_100010324(v112, (uint64_t)qword_10170DF88);
      uint64_t v49 = v38;
      uint64_t v50 = v106;
      uint64_t v51 = (*((uint64_t (**)(char *, uint64_t, uint64_t))v38 + 2))(v106, v48, v47);
      __chkstk_darwin(v51);
      v94[-4] = v44;
      v94[-3] = v16;
      v94[-2] = v50;
      uint64_t v52 = v107;
      OS_dispatch_queue.sync<A>(execute:)();
      (*((void (**)(char *, uint64_t))v49 + 1))(v50, v47);
      (*((void (**)(char *, uint64_t (*)(void)))v118 + 1))(v16, v45);
      sub_100B79EF4(v52);
      QueueSynchronizer.conditionalSync<A>(_:)();
      sub_100A9E7EC(9);
      sub_100A9EE98();
      v108(1);
      sub_100B310AC(v52, (uint64_t (*)(void))type metadata accessor for BeaconStoreFileRecord);
    }
    return swift_release();
  }
  else
  {
    uint64_t result = swift_release();
    __break(1u);
  }
  return result;
}

uint64_t sub_100B4DE54(uint64_t a1, uint64_t a2, void (*a3)(void), uint64_t a4)
{
  uint64_t v114 = a2;
  uint64_t v111 = (uint64_t (*)(void))type metadata accessor for BeaconStoreFileRecord();
  uint64_t v108 = *((void *)v111 - 1);
  __chkstk_darwin(v111);
  uint64_t v105 = (char *)&v93 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v110 = type metadata accessor for URL();
  uint64_t v8 = *(void *)(v110 - 8);
  uint64_t v9 = __chkstk_darwin(v110);
  uint64_t v104 = (char *)&v93 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9);
  long long v96 = (char *)&v93 - v11;
  uint64_t v12 = (uint64_t (*)(void))type metadata accessor for UUID();
  uint64_t v13 = (void (**)(void, void, void))*((void *)v12 - 1);
  uint64_t v115 = (uint64_t (*)())v12;
  uint64_t v116 = v13;
  uint64_t v14 = __chkstk_darwin(v12);
  long long v93 = (char *)&v93 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = __chkstk_darwin(v14);
  uint64_t v103 = (char *)&v93 - v17;
  __chkstk_darwin(v16);
  uint64_t v95 = (char *)&v93 - v18;
  uint64_t v19 = sub_10000588C(&qword_1016426E8);
  __chkstk_darwin(v19);
  uint64_t v94 = (char *)&v93 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v21 = type metadata accessor for KeyAlignmentRecord();
  uint64_t v99 = *(void *)(v21 - 8);
  uint64_t v22 = __chkstk_darwin(v21);
  uint64_t v102 = (uint64_t)&v93 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v100 = v23;
  __chkstk_darwin(v22);
  uint64_t v25 = (char *)&v93 - v24;
  uint64_t v26 = swift_allocObject();
  uint64_t v106 = a3;
  uint64_t v107 = a4;
  *(void *)(v26 + 16) = a3;
  *(void *)(v26 + 24) = a4;
  swift_retain();
  static os_log_type_t.default.getter();
  if (qword_101637260 != -1) {
    swift_once();
  }
  uint64_t v98 = sub_10000588C((uint64_t *)&unk_10163AD00);
  uint64_t v27 = swift_allocObject();
  long long v97 = xmmword_101342130;
  *(_OWORD *)(v27 + 16) = xmmword_101342130;
  sub_100B30D0C(a1, (uint64_t)v25, (uint64_t (*)(void))type metadata accessor for KeyAlignmentRecord);
  unint64_t v101 = (void (*)(void, void, void))v25;
  uint64_t v113 = v21;
  uint64_t v28 = String.init<A>(describing:)();
  uint64_t v30 = v29;
  *(void *)(v27 + 56) = &type metadata for String;
  unint64_t v31 = sub_10000B4CC();
  *(void *)(v27 + 64) = v31;
  *(void *)(v27 + 32) = v28;
  *(void *)(v27 + 40) = v30;
  os_log(_:dso:log:_:_:)();
  swift_bridgeObjectRelease();
  if (qword_101637188 != -1) {
    swift_once();
  }
  NSString v32 = (void *)qword_10170EE68;
  id v33 = [self sharedInstance];
  unsigned int v34 = [v33 isInternalBuild];

  if (v34)
  {
    NSString v35 = String._bridgeToObjectiveC()();
    unsigned int v36 = [v32 BOOLForKey:v35];
  }
  else
  {
    unsigned int v36 = 0;
  }
  id v37 = [self defaultStore];
  uint64_t v38 = v113;
  if (v37)
  {
    uint64_t v39 = v37;
    id v40 = [v37 aa_primaryAppleAccount];

    uint64_t v112 = a1;
    uint64_t v109 = v26;
    if (v40 && (v40, (v36 & 1) == 0))
    {
      uint64_t v106 = (void (*)(void))v31;
      uint64_t v107 = v8;
      sub_10001D4B0(0, &qword_10163CB60);
      uint64_t v54 = a1 + *(int *)(v38 + 20);
      uint64_t v55 = UUID.uuidString.getter();
      uint64_t v57 = v56;
      uint64_t v58 = v114;
      id v59 = *(id *)(v114 + 152);
      v60._countAndFlagsBits = v55;
      v60._object = v57;
      Class isa = CKRecordID.init(recordName:zoneID:)(v60, (CKRecordZoneID)v59).super.isa;
      sub_100AB24F0(isa);
      uint64_t v105 = (char *)isa;
      uint64_t v104 = (char *)sub_101015AE0(isa);
      swift_release();
      uint64_t v103 = (char *)swift_allocBox();
      uint64_t v62 = *(char **)(v108 + 56);
      uint64_t v102 = v63;
      uint64_t v64 = v111;
      v108 += 56;
      long long v93 = v62;
      ((void (*)(uint64_t))v62)(v63);
      uint64_t v65 = *(char **)(v58 + 160);
      uint64_t v66 = v115;
      uint64_t v67 = v95;
      ((void (**)(char *, uint64_t, uint64_t (*)()))v116)[2](v95, v54, v115);
      if (qword_101636870 != -1) {
        swift_once();
      }
      uint64_t v69 = v110;
      sub_100010324(v110, (uint64_t)qword_10170D740);
      UUID.uuidString.getter();
      uint64_t v70 = v96;
      URL.appendingPathComponent(_:)();
      swift_bridgeObjectRelease();
      __chkstk_darwin(v71);
      *(&v93 - 4) = v65;
      *(&v93 - 3) = v67;
      *(&v93 - 2) = v70;
      uint64_t v72 = (uint64_t)v94;
      OS_dispatch_queue.sync<A>(execute:)();
      (*(void (**)(char *, uint64_t))(v107 + 8))(v70, v69);
      ((void (*)(char *, uint64_t (*)()))v116[1])(v67, v66);
      ((void (*)(uint64_t, void, uint64_t, uint64_t (*)(void)))v93)(v72, 0, 1, v64);
      sub_100062604(v72, v102, &qword_1016426E8);
      unint64_t v74 = v105;
      uint64_t v73 = v106;
      static os_log_type_t.default.getter();
      uint64_t v75 = swift_allocObject();
      *(_OWORD *)(v75 + 16) = v97;
      id v76 = v74;
      uint64_t v116 = (void (**)(void, void, void))v76;
      id v77 = [v76 description];
      uint64_t v78 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      uint64_t v80 = v79;

      *(void *)(v75 + 56) = &type metadata for String;
      *(void *)(v75 + 64) = v73;
      *(void *)(v75 + 32) = v78;
      *(void *)(v75 + 40) = v80;
      os_log(_:dso:log:_:_:)();
      swift_bridgeObjectRelease();
      uint64_t v115 = type metadata accessor for KeyAlignmentRecord;
      uint64_t v81 = v101;
      sub_100B30D0C(v112, (uint64_t)v101, (uint64_t (*)(void))type metadata accessor for KeyAlignmentRecord);
      uint64_t v82 = *(unsigned __int8 *)(v99 + 80);
      uint64_t v83 = (v82 + 32) & ~v82;
      uint64_t v113 = v82 | 7;
      unint64_t v84 = (v100 + v83 + 7) & 0xFFFFFFFFFFFFFFF8;
      uint64_t v85 = swift_allocObject();
      uint64_t v86 = v103;
      uint64_t v87 = v114;
      *(void *)(v85 + 16) = v103;
      *(void *)(v85 + 24) = v87;
      uint64_t v111 = (uint64_t (*)(void))type metadata accessor for KeyAlignmentRecord;
      sub_100B30DB4((uint64_t)v81, v85 + v83, (uint64_t (*)(void))type metadata accessor for KeyAlignmentRecord);
      uint64_t v88 = (uint64_t (**)(uint64_t))(v85 + v84);
      uint64_t v110 = (uint64_t)sub_100B640E0;
      uint64_t v89 = (uint64_t (*)(uint64_t))v109;
      unsigned char *v88 = sub_100B640E0;
      v88[1] = v89;
      swift_retain();
      swift_retain();
      swift_retain();
      Future.addSuccess(block:)();
      swift_release();
      swift_release();
      sub_100B30D0C(v112, (uint64_t)v81, (uint64_t (*)(void))v115);
      uint64_t v90 = swift_allocObject();
      *(void *)(v90 + 16) = v86;
      *(void *)(v90 + 24) = v87;
      sub_100B30DB4((uint64_t)v81, v90 + v83, v111);
      uint64_t v91 = (void *)(v90 + v84);
      *uint64_t v91 = v110;
      v91[1] = v89;
      swift_retain();
      swift_retain();
      swift_retain();
      Future.addFailure(block:)();
      swift_release();
      swift_release();
      swift_release();

      swift_release();
    }
    else
    {
      if (qword_101636F50 != -1) {
        swift_once();
      }
      uint64_t v41 = type metadata accessor for Logger();
      uint64_t v108 = sub_100010324(v41, (uint64_t)qword_10170E9E8);
      BOOL v42 = Logger.logObject.getter();
      os_log_type_t v43 = static os_log_type_t.info.getter();
      if (os_log_type_enabled(v42, v43))
      {
        uint64_t v44 = swift_slowAlloc();
        *(_DWORD *)uint64_t v44 = 67109376;
        LODWORD(v117) = v36;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        *(_WORD *)(v44 + 8) = 1024;
        LODWORD(v117) = v40 != 0;
        uint64_t v38 = v113;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        _os_log_impl((void *)&_mh_execute_header, v42, v43, "Skipping cloud delete. skipCloudSave: %{BOOL}d, isiCloudSignedIn %{BOOL}d", (uint8_t *)v44, 0xEu);
        a1 = v112;
        swift_slowDealloc();
      }
      uint64_t v45 = v8;

      uint64_t v46 = *(char **)(v114 + 160);
      uint64_t v47 = a1 + *(int *)(v38 + 20);
      uint64_t v48 = v103;
      unint64_t v101 = v116[2];
      v101(v103, v47, v115);
      if (qword_101636870 != -1) {
        swift_once();
      }
      uint64_t v50 = v110;
      sub_100010324(v110, (uint64_t)qword_10170D740);
      UUID.uuidString.getter();
      uint64_t v51 = v104;
      URL.appendingPathComponent(_:)();
      swift_bridgeObjectRelease();
      __chkstk_darwin(v52);
      *(&v93 - 4) = v46;
      *(&v93 - 3) = v48;
      *(&v93 - 2) = v51;
      uint64_t v53 = (uint64_t)v105;
      OS_dispatch_queue.sync<A>(execute:)();
      (*(void (**)(char *, uint64_t))(v45 + 8))(v51, v50);
      ((void (*)(char *, uint64_t (*)()))v116[1])(v48, v115);
      sub_100B79EF4(v53);
      QueueSynchronizer.conditionalSync<A>(_:)();
      sub_100A9E7EC(9);
      sub_100A9EE98();
      v106(1);
      sub_100B310AC(v53, (uint64_t (*)(void))type metadata accessor for BeaconStoreFileRecord);
    }
    return swift_release();
  }
  else
  {
    uint64_t result = swift_release();
    __break(1u);
  }
  return result;
}

uint64_t sub_100B4EF7C(uint64_t a1, uint64_t a2, void (*a3)(void), uint64_t a4)
{
  uint64_t v114 = a2;
  uint64_t v111 = (uint64_t (*)(void))type metadata accessor for BeaconStoreFileRecord();
  uint64_t v108 = *((void *)v111 - 1);
  __chkstk_darwin(v111);
  uint64_t v105 = (char *)&v93 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v110 = type metadata accessor for URL();
  uint64_t v8 = *(void *)(v110 - 8);
  uint64_t v9 = __chkstk_darwin(v110);
  uint64_t v104 = (char *)&v93 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9);
  long long v96 = (char *)&v93 - v11;
  uint64_t v12 = (uint64_t (*)(void))type metadata accessor for UUID();
  uint64_t v13 = (void (**)(void, void, void))*((void *)v12 - 1);
  uint64_t v115 = (uint64_t (*)())v12;
  uint64_t v116 = v13;
  uint64_t v14 = __chkstk_darwin(v12);
  long long v93 = (char *)&v93 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = __chkstk_darwin(v14);
  uint64_t v103 = (char *)&v93 - v17;
  __chkstk_darwin(v16);
  uint64_t v95 = (char *)&v93 - v18;
  uint64_t v19 = sub_10000588C(&qword_1016426E8);
  __chkstk_darwin(v19);
  uint64_t v94 = (char *)&v93 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v21 = type metadata accessor for BeaconEstimatedLocation();
  uint64_t v99 = *(void *)(v21 - 8);
  uint64_t v22 = __chkstk_darwin(v21);
  uint64_t v102 = (uint64_t)&v93 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v100 = v23;
  __chkstk_darwin(v22);
  uint64_t v25 = (char *)&v93 - v24;
  uint64_t v26 = swift_allocObject();
  uint64_t v106 = a3;
  uint64_t v107 = a4;
  *(void *)(v26 + 16) = a3;
  *(void *)(v26 + 24) = a4;
  swift_retain();
  static os_log_type_t.default.getter();
  if (qword_101637260 != -1) {
    swift_once();
  }
  uint64_t v98 = sub_10000588C((uint64_t *)&unk_10163AD00);
  uint64_t v27 = swift_allocObject();
  long long v97 = xmmword_101342130;
  *(_OWORD *)(v27 + 16) = xmmword_101342130;
  sub_100B30D0C(a1, (uint64_t)v25, (uint64_t (*)(void))type metadata accessor for BeaconEstimatedLocation);
  unint64_t v101 = (void (*)(void, void, void))v25;
  uint64_t v113 = v21;
  uint64_t v28 = String.init<A>(describing:)();
  uint64_t v30 = v29;
  *(void *)(v27 + 56) = &type metadata for String;
  unint64_t v31 = sub_10000B4CC();
  *(void *)(v27 + 64) = v31;
  *(void *)(v27 + 32) = v28;
  *(void *)(v27 + 40) = v30;
  os_log(_:dso:log:_:_:)();
  swift_bridgeObjectRelease();
  if (qword_101637188 != -1) {
    swift_once();
  }
  NSString v32 = (void *)qword_10170EE68;
  id v33 = [self sharedInstance];
  unsigned int v34 = [v33 isInternalBuild];

  if (v34)
  {
    NSString v35 = String._bridgeToObjectiveC()();
    unsigned int v36 = [v32 BOOLForKey:v35];
  }
  else
  {
    unsigned int v36 = 0;
  }
  id v37 = [self defaultStore];
  uint64_t v38 = v113;
  if (v37)
  {
    uint64_t v39 = v37;
    id v40 = [v37 aa_primaryAppleAccount];

    uint64_t v112 = a1;
    uint64_t v109 = v26;
    if (v40 && (v40, (v36 & 1) == 0))
    {
      uint64_t v106 = (void (*)(void))v31;
      uint64_t v107 = v8;
      sub_10001D4B0(0, &qword_10163CB60);
      uint64_t v54 = a1 + *(int *)(v38 + 20);
      uint64_t v55 = UUID.uuidString.getter();
      uint64_t v57 = v56;
      uint64_t v58 = v114;
      id v59 = *(id *)(v114 + 152);
      v60._countAndFlagsBits = v55;
      v60._object = v57;
      Class isa = CKRecordID.init(recordName:zoneID:)(v60, (CKRecordZoneID)v59).super.isa;
      sub_100AB24F0(isa);
      uint64_t v105 = (char *)isa;
      uint64_t v104 = (char *)sub_101015AE0(isa);
      swift_release();
      uint64_t v103 = (char *)swift_allocBox();
      uint64_t v62 = *(char **)(v108 + 56);
      uint64_t v102 = v63;
      uint64_t v64 = v111;
      v108 += 56;
      long long v93 = v62;
      ((void (*)(uint64_t))v62)(v63);
      uint64_t v65 = *(char **)(v58 + 160);
      uint64_t v66 = v115;
      uint64_t v67 = v95;
      ((void (**)(char *, uint64_t, uint64_t (*)()))v116)[2](v95, v54, v115);
      if (qword_101637030 != -1) {
        swift_once();
      }
      uint64_t v69 = v110;
      sub_100010324(v110, (uint64_t)qword_10170EB70);
      UUID.uuidString.getter();
      uint64_t v70 = v96;
      URL.appendingPathComponent(_:)();
      swift_bridgeObjectRelease();
      __chkstk_darwin(v71);
      *(&v93 - 4) = v65;
      *(&v93 - 3) = v67;
      *(&v93 - 2) = v70;
      uint64_t v72 = (uint64_t)v94;
      OS_dispatch_queue.sync<A>(execute:)();
      (*(void (**)(char *, uint64_t))(v107 + 8))(v70, v69);
      ((void (*)(char *, uint64_t (*)()))v116[1])(v67, v66);
      ((void (*)(uint64_t, void, uint64_t, uint64_t (*)(void)))v93)(v72, 0, 1, v64);
      sub_100062604(v72, v102, &qword_1016426E8);
      unint64_t v74 = v105;
      uint64_t v73 = v106;
      static os_log_type_t.default.getter();
      uint64_t v75 = swift_allocObject();
      *(_OWORD *)(v75 + 16) = v97;
      id v76 = v74;
      uint64_t v116 = (void (**)(void, void, void))v76;
      id v77 = [v76 description];
      uint64_t v78 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      uint64_t v80 = v79;

      *(void *)(v75 + 56) = &type metadata for String;
      *(void *)(v75 + 64) = v73;
      *(void *)(v75 + 32) = v78;
      *(void *)(v75 + 40) = v80;
      os_log(_:dso:log:_:_:)();
      swift_bridgeObjectRelease();
      uint64_t v115 = type metadata accessor for BeaconEstimatedLocation;
      uint64_t v81 = v101;
      sub_100B30D0C(v112, (uint64_t)v101, (uint64_t (*)(void))type metadata accessor for BeaconEstimatedLocation);
      uint64_t v82 = *(unsigned __int8 *)(v99 + 80);
      uint64_t v83 = (v82 + 32) & ~v82;
      uint64_t v113 = v82 | 7;
      unint64_t v84 = (v100 + v83 + 7) & 0xFFFFFFFFFFFFFFF8;
      uint64_t v85 = swift_allocObject();
      uint64_t v86 = v103;
      uint64_t v87 = v114;
      *(void *)(v85 + 16) = v103;
      *(void *)(v85 + 24) = v87;
      uint64_t v111 = (uint64_t (*)(void))type metadata accessor for BeaconEstimatedLocation;
      sub_100B30DB4((uint64_t)v81, v85 + v83, (uint64_t (*)(void))type metadata accessor for BeaconEstimatedLocation);
      uint64_t v88 = (uint64_t (**)(uint64_t))(v85 + v84);
      uint64_t v110 = (uint64_t)sub_100B521F4;
      uint64_t v89 = (uint64_t (*)(uint64_t))v109;
      unsigned char *v88 = sub_100B521F4;
      v88[1] = v89;
      swift_retain();
      swift_retain();
      swift_retain();
      Future.addSuccess(block:)();
      swift_release();
      swift_release();
      sub_100B30D0C(v112, (uint64_t)v81, (uint64_t (*)(void))v115);
      uint64_t v90 = swift_allocObject();
      *(void *)(v90 + 16) = v86;
      *(void *)(v90 + 24) = v87;
      sub_100B30DB4((uint64_t)v81, v90 + v83, v111);
      uint64_t v91 = (void *)(v90 + v84);
      *uint64_t v91 = v110;
      v91[1] = v89;
      swift_retain();
      swift_retain();
      swift_retain();
      Future.addFailure(block:)();
      swift_release();
      swift_release();
      swift_release();

      swift_release();
    }
    else
    {
      if (qword_101636F50 != -1) {
        swift_once();
      }
      uint64_t v41 = type metadata accessor for Logger();
      uint64_t v108 = sub_100010324(v41, (uint64_t)qword_10170E9E8);
      BOOL v42 = Logger.logObject.getter();
      os_log_type_t v43 = static os_log_type_t.info.getter();
      if (os_log_type_enabled(v42, v43))
      {
        uint64_t v44 = swift_slowAlloc();
        *(_DWORD *)uint64_t v44 = 67109376;
        LODWORD(v117) = v36;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        *(_WORD *)(v44 + 8) = 1024;
        LODWORD(v117) = v40 != 0;
        uint64_t v38 = v113;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        _os_log_impl((void *)&_mh_execute_header, v42, v43, "Skipping cloud delete. skipCloudSave: %{BOOL}d, isiCloudSignedIn %{BOOL}d", (uint8_t *)v44, 0xEu);
        a1 = v112;
        swift_slowDealloc();
      }
      uint64_t v45 = v8;

      uint64_t v46 = *(char **)(v114 + 160);
      uint64_t v47 = a1 + *(int *)(v38 + 20);
      uint64_t v48 = v103;
      unint64_t v101 = v116[2];
      v101(v103, v47, v115);
      if (qword_101637030 != -1) {
        swift_once();
      }
      uint64_t v50 = v110;
      sub_100010324(v110, (uint64_t)qword_10170EB70);
      UUID.uuidString.getter();
      uint64_t v51 = v104;
      URL.appendingPathComponent(_:)();
      swift_bridgeObjectRelease();
      __chkstk_darwin(v52);
      *(&v93 - 4) = v46;
      *(&v93 - 3) = v48;
      *(&v93 - 2) = v51;
      uint64_t v53 = (uint64_t)v105;
      OS_dispatch_queue.sync<A>(execute:)();
      (*(void (**)(char *, uint64_t))(v45 + 8))(v51, v50);
      ((void (*)(char *, uint64_t (*)()))v116[1])(v48, v115);
      sub_100B79EF4(v53);
      QueueSynchronizer.conditionalSync<A>(_:)();
      sub_100A9E7EC(9);
      sub_100A9EE98();
      v106(1);
      sub_100B310AC(v53, (uint64_t (*)(void))type metadata accessor for BeaconStoreFileRecord);
    }
    return swift_release();
  }
  else
  {
    uint64_t result = swift_release();
    __break(1u);
  }
  return result;
}

uint64_t sub_100B500A4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v29 = *(void *)(v8 - 8);
  uint64_t v30 = v8;
  __chkstk_darwin(v8);
  uint64_t v27 = (char *)&v22 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v28 = type metadata accessor for DispatchQoS();
  uint64_t v26 = *(void *)(v28 - 8);
  __chkstk_darwin(v28);
  uint64_t v25 = (char *)&v22 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = (void *)swift_allocObject();
  v11[2] = a2;
  v11[3] = a3;
  uint64_t v23 = a3;
  v11[4] = a4;
  swift_retain();
  uint64_t v24 = a4;
  swift_retain();
  uint64_t v12 = sub_100AB24F0();
  uint64_t v13 = (void *)swift_allocObject();
  v13[2] = sub_100B565D0;
  v13[3] = v11;
  v13[4] = a1;
  swift_retain_n();
  uint64_t v31 = a1;
  swift_retain_n();
  QueueSynchronizer.conditionalSync<A>(_:)();
  int v14 = LOBYTE(aBlock[0]);
  static os_log_type_t.default.getter();
  if (qword_101637270 != -1) {
    swift_once();
  }
  sub_10000588C((uint64_t *)&unk_10163AD00);
  uint64_t v15 = swift_allocObject();
  *(_OWORD *)(v15 + 16) = xmmword_101342130;
  *(void *)(v15 + 56) = &type metadata for Bool;
  *(void *)(v15 + 64) = &protocol witness table for Bool;
  *(unsigned char *)(v15 + 32) = v14;
  os_log(_:dso:log:_:_:)();
  swift_bridgeObjectRelease();
  static os_log_type_t.default.getter();
  os_log(_:dso:log:_:_:)();
  if (v14)
  {
    sub_100BB59F4(a2, v23, v24);
    swift_release();
    swift_release();
    swift_release_n();
  }
  else
  {
    static os_log_type_t.default.getter();
    os_log(_:dso:log:_:_:)();
    uint64_t v24 = *(void *)(v12 + 64);
    uint64_t v16 = (void *)swift_allocObject();
    v16[2] = v12;
    void v16[3] = sub_100B565F4;
    v16[4] = v13;
    aBlock[4] = sub_100B64438;
    aBlock[5] = v16;
    aBlock[0] = _NSConcreteStackBlock;
    aBlock[1] = 1107296256;
    aBlock[2] = sub_1004B5480;
    aBlock[3] = &unk_1015E7EA8;
    uint64_t v17 = _Block_copy(aBlock);
    swift_retain();
    swift_retain();
    uint64_t v18 = v25;
    static DispatchQoS.unspecified.getter();
    NSString v32 = _swiftEmptyArrayStorage;
    sub_100B22DA4((unint64_t *)&qword_10163B7E0, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
    sub_10000588C((uint64_t *)&unk_10163F350);
    sub_100062734((unint64_t *)&qword_10163B7F0, (uint64_t *)&unk_10163F350);
    uint64_t v19 = v27;
    uint64_t v20 = v30;
    dispatch thunk of SetAlgebra.init<A>(_:)();
    OS_dispatch_queue.async(group:qos:flags:execute:)();
    _Block_release(v17);
    (*(void (**)(char *, uint64_t))(v29 + 8))(v19, v20);
    (*(void (**)(char *, uint64_t))(v26 + 8))(v18, v28);
    swift_release();
    swift_release();
    swift_release_n();
    swift_release();
  }
  return swift_release();
}

uint64_t sub_100B505EC(uint64_t a1, void (*a2)(uint64_t), uint64_t a3)
{
  uint64_t v6 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v26 = *(void *)(v6 - 8);
  uint64_t v27 = v6;
  __chkstk_darwin(v6);
  uint64_t v24 = (char *)&v21 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v25 = type metadata accessor for DispatchQoS();
  uint64_t v23 = *(void *)(v25 - 8);
  __chkstk_darwin(v25);
  uint64_t v22 = (char *)&v21 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = swift_allocObject();
  uint64_t v21 = a2;
  *(void *)(v9 + 16) = a2;
  *(void *)(v9 + 24) = a3;
  swift_retain();
  uint64_t v10 = sub_100AB24F0();
  uint64_t v11 = (void *)swift_allocObject();
  v11[2] = sub_100B5C0E0;
  v11[3] = v9;
  v11[4] = a1;
  swift_retain_n();
  uint64_t v28 = a1;
  swift_retain_n();
  QueueSynchronizer.conditionalSync<A>(_:)();
  int v12 = LOBYTE(aBlock[0]);
  static os_log_type_t.default.getter();
  if (qword_101637270 != -1) {
    swift_once();
  }
  sub_10000588C((uint64_t *)&unk_10163AD00);
  uint64_t v13 = swift_allocObject();
  *(_OWORD *)(v13 + 16) = xmmword_101342130;
  *(void *)(v13 + 56) = &type metadata for Bool;
  *(void *)(v13 + 64) = &protocol witness table for Bool;
  *(unsigned char *)(v13 + 32) = v12;
  os_log(_:dso:log:_:_:)();
  swift_bridgeObjectRelease();
  static os_log_type_t.default.getter();
  if (v12)
  {
    uint64_t v14 = os_log(_:dso:log:_:_:)();
    v21(v14);
    swift_release();
    swift_release();
    swift_release_n();
  }
  else
  {
    os_log(_:dso:log:_:_:)();
    static os_log_type_t.default.getter();
    os_log(_:dso:log:_:_:)();
    uint64_t v21 = *(void (**)(uint64_t))(v10 + 64);
    uint64_t v15 = (void *)swift_allocObject();
    v15[2] = v10;
    v15[3] = sub_100B565F4;
    v15[4] = v11;
    aBlock[4] = sub_100B64438;
    aBlock[5] = v15;
    aBlock[0] = _NSConcreteStackBlock;
    aBlock[1] = 1107296256;
    aBlock[2] = sub_1004B5480;
    aBlock[3] = &unk_1015E8CB8;
    uint64_t v16 = _Block_copy(aBlock);
    swift_retain();
    swift_retain();
    uint64_t v17 = v22;
    static DispatchQoS.unspecified.getter();
    uint64_t v29 = _swiftEmptyArrayStorage;
    sub_100B22DA4((unint64_t *)&qword_10163B7E0, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
    sub_10000588C((uint64_t *)&unk_10163F350);
    sub_100062734((unint64_t *)&qword_10163B7F0, (uint64_t *)&unk_10163F350);
    uint64_t v18 = v24;
    uint64_t v19 = v27;
    dispatch thunk of SetAlgebra.init<A>(_:)();
    OS_dispatch_queue.async(group:qos:flags:execute:)();
    _Block_release(v16);
    (*(void (**)(char *, uint64_t))(v26 + 8))(v18, v19);
    (*(void (**)(char *, uint64_t))(v23 + 8))(v17, v25);
    swift_release();
    swift_release();
    swift_release_n();
    swift_release();
  }
  return swift_release();
}

uint64_t sub_100B50B24(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for StableIdentifier();
  uint64_t v39 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  uint64_t v4 = (char *)v38 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v44 = type metadata accessor for OwnedBeaconRecord();
  uint64_t v5 = __chkstk_darwin(v44);
  uint64_t v7 = (char *)v38 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5);
  uint64_t v10 = (char *)v38 - v9;
  uint64_t v11 = *(void *)(a1 + 16);
  if (v11)
  {
    v38[0] = v2;
    v38[1] = a1;
    unint64_t v12 = (*(unsigned __int8 *)(v8 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80);
    uint64_t v13 = a1 + v12;
    uint64_t v40 = *(void *)(v8 + 72);
    unint64_t v41 = v12;
    swift_bridgeObjectRetain();
    uint64_t v14 = _swiftEmptyDictionarySingleton;
    BOOL v42 = v10;
    os_log_type_t v43 = v4;
    while (1)
    {
      sub_100B30D0C(v13, (uint64_t)v10, (uint64_t (*)(void))type metadata accessor for OwnedBeaconRecord);
      sub_100B30D0C((uint64_t)&v10[*(int *)(v44 + 24)], (uint64_t)v4, (uint64_t (*)(void))type metadata accessor for StableIdentifier);
      sub_100B30D0C((uint64_t)v10, (uint64_t)v7, (uint64_t (*)(void))type metadata accessor for OwnedBeaconRecord);
      swift_bridgeObjectRetain();
      int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      uint64_t v45 = v14;
      unint64_t v17 = sub_10072525C((uint64_t)v4);
      uint64_t v18 = v14[2];
      BOOL v19 = (v16 & 1) == 0;
      uint64_t v20 = v18 + v19;
      if (__OFADD__(v18, v19)) {
        break;
      }
      char v21 = v16;
      if (v14[3] >= v20)
      {
        if (isUniquelyReferenced_nonNull_native)
        {
          uint64_t v22 = v14;
        }
        else
        {
          sub_100E86D30();
          uint64_t v22 = v45;
        }
      }
      else
      {
        sub_100E76E0C(v20, isUniquelyReferenced_nonNull_native);
        uint64_t v22 = v45;
        unint64_t v23 = sub_10072525C((uint64_t)v4);
        if ((v21 & 1) != (v24 & 1)) {
          goto LABEL_23;
        }
        unint64_t v17 = v23;
      }
      swift_bridgeObjectRelease();
      if ((v21 & 1) == 0)
      {
        v22[(v17 >> 6) + 8] |= 1 << v17;
        sub_100B30D0C((uint64_t)v4, v22[6] + *(void *)(v39 + 72) * v17, (uint64_t (*)(void))type metadata accessor for StableIdentifier);
        *(void *)(v22[7] + 8 * v17) = _swiftEmptyArrayStorage;
        uint64_t v25 = v22[2];
        BOOL v26 = __OFADD__(v25, 1);
        uint64_t v27 = v25 + 1;
        if (v26) {
          goto LABEL_22;
        }
        v22[2] = v27;
      }
      uint64_t v28 = (uint64_t)v7;
      uint64_t v29 = v22[7];
      unint64_t v30 = *(void *)(v29 + 8 * v17);
      char v31 = swift_isUniquelyReferenced_nonNull_native();
      *(void *)(v29 + 8 * v17) = v30;
      if ((v31 & 1) == 0)
      {
        unint64_t v30 = sub_100A6F6C4(0, *(void *)(v30 + 16) + 1, 1, v30);
        *(void *)(v29 + 8 * v17) = v30;
      }
      unint64_t v33 = *(void *)(v30 + 16);
      unint64_t v32 = *(void *)(v30 + 24);
      if (v33 >= v32 >> 1)
      {
        unint64_t v30 = sub_100A6F6C4(v32 > 1, v33 + 1, 1, v30);
        *(void *)(v29 + 8 * v17) = v30;
      }
      *(void *)(v30 + 16) = v33 + 1;
      unint64_t v34 = v30 + v41;
      uint64_t v35 = v40;
      uint64_t v7 = (char *)v28;
      sub_100B30DB4(v28, v34 + v33 * v40, (uint64_t (*)(void))type metadata accessor for OwnedBeaconRecord);
      uint64_t v4 = v43;
      sub_100B310AC((uint64_t)v43, (uint64_t (*)(void))type metadata accessor for StableIdentifier);
      uint64_t v10 = v42;
      sub_100B310AC((uint64_t)v42, (uint64_t (*)(void))type metadata accessor for OwnedBeaconRecord);
      swift_bridgeObjectRelease();
      v13 += v35;
      uint64_t v14 = v22;
      if (!--v11)
      {
        swift_bridgeObjectRelease();
        goto LABEL_20;
      }
    }
    __break(1u);
LABEL_22:
    __break(1u);
LABEL_23:
    uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
  }
  else
  {
    uint64_t v22 = _swiftEmptyDictionarySingleton;
LABEL_20:
    uint64_t v36 = sub_100B2B0C8((uint64_t)v22);
    swift_bridgeObjectRelease();
    return v36;
  }
  return result;
}

void sub_100B50F60(const __CFString *a1)
{
  uint64_t v2 = CFNotificationCenterGetDarwinNotifyCenter();
  if (v2)
  {
    center = v2;
    static os_log_type_t.default.getter();
    if (qword_101637260 != -1) {
      swift_once();
    }
    sub_10000588C((uint64_t *)&unk_10163AD00);
    uint64_t v3 = swift_allocObject();
    *(_OWORD *)(v3 + 16) = xmmword_101342130;
    uint64_t v4 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v6 = v5;
    *(void *)(v3 + 56) = &type metadata for String;
    *(void *)(v3 + 64) = sub_10000B4CC();
    *(void *)(v3 + 32) = v4;
    *(void *)(v3 + 40) = v6;
    os_log(_:dso:log:_:_:)();
    swift_bridgeObjectRelease();
    CFNotificationCenterPostNotification(center, a1, 0, 0, 1u);
  }
  else
  {
    static os_log_type_t.error.getter();
    if (qword_101637260 != -1) {
      swift_once();
    }
    os_log(_:dso:log:_:_:)();
  }
}

uint64_t sub_100B51124()
{
  swift_unknownObjectRelease();

  return _swift_deallocObject(v0, 32, 7);
}

uint64_t sub_100B5115C()
{
  uint64_t v1 = (void *)swift_task_alloc();
  *(void *)(v0 + 16) = v1;
  *uint64_t v1 = v0;
  v1[1] = sub_100033F68;
  return _swift_task_switch(sub_100AF227C, 0, 0);
}

uint64_t sub_100B51200()
{
  swift_weakDestroy();

  return _swift_deallocObject(v0, 24, 7);
}

uint64_t sub_100B51238(uint64_t a1)
{
  uint64_t v4 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v4;
  *uint64_t v4 = v2;
  v4[1] = sub_100033F68;
  return sub_100B896BC(a1, v1);
}

uint64_t sub_100B512D4()
{
  uint64_t v1 = sub_10000588C(&qword_1016575E0);
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 40) & ~v3;
  uint64_t v5 = v4 + *(void *)(v2 + 64);
  uint64_t v6 = v3 | 7;
  swift_unknownObjectRelease();
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);

  return _swift_deallocObject(v0, v5, v6);
}

uint64_t sub_100B513AC(uint64_t a1)
{
  uint64_t v4 = *(void *)(sub_10000588C(&qword_1016575E0) - 8);
  uint64_t v5 = v1[2];
  uint64_t v6 = v1[3];
  uint64_t v7 = v1[4];
  uint64_t v8 = (uint64_t)v1 + ((*(unsigned __int8 *)(v4 + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80));
  uint64_t v9 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v9;
  void *v9 = v2;
  v9[1] = sub_100033F68;
  return sub_100AE084C(a1, v5, v6, v7, v8);
}

uint64_t sub_100B514AC()
{
  uint64_t v1 = sub_10000588C(&qword_1016575E0);
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 24) & ~v3;
  uint64_t v5 = v4 + *(void *)(v2 + 64);
  uint64_t v6 = v3 | 7;
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);

  return _swift_deallocObject(v0, v5, v6);
}

uint64_t sub_100B5157C()
{
  uint64_t v1 = *(void *)(sub_10000588C(&qword_1016575E0) - 8);
  uint64_t v2 = *(void *)(v0 + 16);
  uint64_t v3 = v0 + ((*(unsigned __int8 *)(v1 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80));

  return sub_100AE0A64(v2, v3);
}

uint64_t sub_100B515F4()
{
  return sub_1004AF4AC(&qword_1016575E0);
}

uint64_t sub_100B51600()
{
  return CheckedContinuation.resume(returning:)();
}

uint64_t sub_100B51668()
{
  return sub_100B612CC((void (*)(void))&_swift_release, 32);
}

void sub_100B51684()
{
}

uint64_t sub_100B5168C(char a1)
{
  return sub_100B0E9D0(a1);
}

void sub_100B516B8(void *a1, char a2)
{
}

BOOL sub_100B516E4(uint64_t a1)
{
  return sub_100B0EADC(a1, *(void *)(v1 + 16));
}

void sub_100B51704(void *a1, char a2)
{
}

uint64_t sub_100B51730()
{
  uint64_t v1 = type metadata accessor for UUID();
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 24) & ~v3;
  uint64_t v5 = v3 | 7;
  unint64_t v6 = (((*(void *)(v2 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8;
  swift_bridgeObjectRelease();
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  swift_release();
  swift_release();

  return _swift_deallocObject(v0, v6 + 16, v5);
}

uint64_t sub_100B5182C()
{
  uint64_t v1 = *(void *)(type metadata accessor for UUID() - 8);
  unint64_t v2 = (*(unsigned __int8 *)(v1 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80);
  unint64_t v3 = (*(void *)(v1 + 64) + v2 + 7) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v4 = *(void *)(v0 + 16);
  uint64_t v5 = v0 + v2;
  uint64_t v6 = *(void *)(v0 + v3);
  uint64_t v7 = v0 + ((v3 + 15) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v8 = *(void (**)(void, void))v7;
  uint64_t v9 = *(void *)(v7 + 8);

  return sub_100A1C954(v4, v5, v6, v8, v9);
}

uint64_t sub_100B518CC()
{
  return sub_1006CAD68(64);
}

uint64_t sub_100B518D4(uint64_t a1)
{
  uint64_t v4 = *(void *)(v1 + 16);
  uint64_t v5 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v5;
  *uint64_t v5 = v2;
  v5[1] = sub_100033F68;
  return sub_100B0F6CC(a1, v4, v1 + 24);
}

uint64_t sub_100B51984()
{
  return sub_1006CAD68(64);
}

uint64_t sub_100B5198C(uint64_t a1)
{
  uint64_t v4 = *(void *)(v1 + 16);
  uint64_t v5 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v5;
  *uint64_t v5 = v2;
  v5[1] = sub_100033F68;
  return sub_100B0FBB0(a1, v4, v1 + 24);
}

uint64_t sub_100B51A3C()
{
  uint64_t v1 = type metadata accessor for UUID();
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 24) & ~v3;
  uint64_t v5 = *(void *)(v2 + 64);
  uint64_t v6 = v3 | 7;
  uint64_t v7 = (v5 + v3 + v4) & ~v3;
  uint64_t v8 = v7 + v5;
  swift_release();
  uint64_t v9 = v0 + v4;
  uint64_t v10 = *(void (**)(uint64_t, uint64_t))(v2 + 8);
  v10(v9, v1);
  v10(v0 + v7, v1);

  return _swift_deallocObject(v0, v8, v6);
}

void sub_100B51B30(char a1)
{
  uint64_t v3 = *(void *)(type metadata accessor for UUID() - 8);
  uint64_t v4 = *(unsigned __int8 *)(v3 + 80);
  uint64_t v5 = (v4 + 24) & ~v4;
  uint64_t v6 = *(void *)(v1 + 16);
  uint64_t v7 = v1 + ((*(void *)(v3 + 64) + v4 + v5) & ~v4);

  sub_100B0F04C(a1, v6, v1 + v5, v7);
}

uint64_t sub_100B51BD0()
{
  uint64_t v1 = type metadata accessor for UUID();
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 24) & ~v3;
  uint64_t v5 = *(void *)(v2 + 64);
  uint64_t v6 = (int *)(type metadata accessor for OwnedBeaconGroup(0) - 8);
  uint64_t v7 = *(unsigned __int8 *)(*(void *)v6 + 80);
  uint64_t v8 = (v4 + v5 + v7) & ~v7;
  uint64_t v9 = v3 | v7 | 7;
  unint64_t v10 = ((v8 + *(void *)(*(void *)v6 + 64)) & 0xFFFFFFFFFFFFFFF8) + 16;
  swift_release();
  uint64_t v11 = v0 + v4;
  unint64_t v12 = *(void (**)(uint64_t, uint64_t))(v2 + 8);
  v12(v11, v1);
  uint64_t v13 = v0 + v8;
  sub_10001CFB8(*(void *)v13, *(void *)(v13 + 8));
  v12(v13 + v6[8], v1);
  uint64_t v14 = v13 + v6[9];
  uint64_t v15 = type metadata accessor for MACAddress();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v15 - 8) + 8))(v14, v15);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();

  return _swift_deallocObject(v0, v10, v9);
}

void sub_100B51DA0(int a1)
{
  uint64_t v3 = *(void *)(type metadata accessor for UUID() - 8);
  unint64_t v4 = (*(unsigned __int8 *)(v3 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  uint64_t v5 = *(void *)(v3 + 64);
  uint64_t v6 = *(void *)(type metadata accessor for OwnedBeaconGroup(0) - 8);
  unint64_t v7 = (v4 + v5 + *(unsigned __int8 *)(v6 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80);
  unint64_t v8 = v7 + *(void *)(v6 + 64);
  uint64_t v9 = *(void *)(v1 + 16);
  int v10 = *(unsigned __int8 *)(v1 + v8);
  uint64_t v11 = *(void *)((v8 & 0xFFFFFFFFFFFFFFF8) + v1 + 8);

  sub_100B0EC9C(a1, v9, v1 + v4, v1 + v7, v10, v11);
}

uint64_t sub_100B51EA8(char a1)
{
  return sub_100B0E9D0(a1);
}

uint64_t sub_100B51ED4()
{
  uint64_t v1 = type metadata accessor for UUID();
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 24) & ~v3;
  uint64_t v5 = v3 | 7;
  unint64_t v6 = ((*(void *)(v2 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8) + 16;
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  swift_release();

  return _swift_deallocObject(v0, v6, v5);
}

uint64_t sub_100B51FC0(uint64_t a1)
{
  uint64_t v3 = *(void *)(type metadata accessor for UUID() - 8);
  uint64_t v4 = *(uint64_t (**)(uint64_t))(v1
                                         + ((*(void *)(v3 + 64)
                                           + ((*(unsigned __int8 *)(v3 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80))
                                           + 7) & 0xFFFFFFFFFFFFFFF8));
  QueueSynchronizer.conditionalSync<A>(_:)();
  return v4(a1);
}

uint64_t sub_100B520B4()
{
  uint64_t v1 = type metadata accessor for UUID();
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 24) & ~v3;
  uint64_t v5 = v4 + *(void *)(v2 + 64);
  uint64_t v6 = v3 | 7;
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);

  return _swift_deallocObject(v0, v5, v6);
}

void sub_100B52180(char a1)
{
  type metadata accessor for UUID();

  sub_100B0E8BC(a1);
}

uint64_t sub_100B521F4(uint64_t a1)
{
  return (*(uint64_t (**)(BOOL))(v1 + 16))(a1 == 0);
}

uint64_t sub_100B52228(uint64_t *a1)
{
  return sub_100B62DA8(a1, (uint64_t (*)(void))type metadata accessor for BeaconEstimatedLocation, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))sub_100393748);
}

uint64_t sub_100B52258()
{
  uint64_t v1 = (int *)type metadata accessor for BeaconEstimatedLocation();
  uint64_t v2 = *(unsigned __int8 *)(*((void *)v1 - 1) + 80);
  uint64_t v3 = (v2 + 32) & ~v2;
  uint64_t v13 = *(void *)(*((void *)v1 - 1) + 64);
  swift_release();
  swift_release();
  sub_10001CFB8(*(void *)(v0 + v3), *(void *)(v0 + v3 + 8));
  uint64_t v4 = v0 + v3 + v1[5];
  uint64_t v5 = type metadata accessor for UUID();
  uint64_t v6 = *(void (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8);
  v6(v4, v5);
  v6(v0 + v3 + v1[6], v5);
  uint64_t v7 = v0 + v3 + v1[10];
  uint64_t v8 = type metadata accessor for Date();
  uint64_t v9 = *(void *)(v8 - 8);
  int v10 = *(void (**)(uint64_t, uint64_t))(v9 + 8);
  v10(v7, v8);
  uint64_t v11 = v0 + v3 + v1[12];
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v9 + 48))(v11, 1, v8)) {
    v10(v11, v8);
  }
  swift_bridgeObjectRelease();
  swift_release();

  return _swift_deallocObject(v0, ((v13 + v3 + 7) & 0xFFFFFFFFFFFFFFF8) + 16, v2 | 7);
}

uint64_t sub_100B52458(uint64_t a1)
{
  return sub_100B62FE0(a1, (uint64_t (*)(void))type metadata accessor for BeaconEstimatedLocation, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))sub_1003940F8);
}

uint64_t sub_100B52488(uint64_t *a1)
{
  return sub_100B62DA8(a1, (uint64_t (*)(void))type metadata accessor for BeaconNamingRecord, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))sub_100392998);
}

uint64_t sub_100B524B8()
{
  uint64_t v1 = (int *)(type metadata accessor for BeaconNamingRecord() - 8);
  uint64_t v2 = *(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v3 = (v2 + 32) & ~v2;
  uint64_t v4 = v2 | 7;
  unint64_t v5 = ((*(void *)(*(void *)v1 + 64) + v3 + 7) & 0xFFFFFFFFFFFFFFF8) + 16;
  swift_release();
  swift_release();
  uint64_t v6 = v0 + v3;
  sub_10001CFB8(*(void *)(v0 + v3), *(void *)(v0 + v3 + 8));
  uint64_t v7 = v0 + v3 + v1[7];
  uint64_t v8 = type metadata accessor for UUID();
  uint64_t v9 = *(void (**)(uint64_t, uint64_t))(*(void *)(v8 - 8) + 8);
  v9(v7, v8);
  v9(v6 + v1[8], v8);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();

  return _swift_deallocObject(v0, v5, v4);
}

uint64_t sub_100B52620(uint64_t a1)
{
  return sub_100B62FE0(a1, (uint64_t (*)(void))type metadata accessor for BeaconNamingRecord, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))sub_100394098);
}

uint64_t sub_100B5264C()
{
  return sub_100AE2F8C(*(void *)(v0 + 16), *(void *)(v0 + 24));
}

uint64_t sub_100B5266C(uint64_t *a1)
{
  return sub_100B62DA8(a1, (uint64_t (*)(void))type metadata accessor for KeyAlignmentRecord, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))sub_1003933EC);
}

uint64_t sub_100B5269C()
{
  uint64_t v1 = (int *)(type metadata accessor for KeyAlignmentRecord() - 8);
  uint64_t v2 = *(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v3 = (v2 + 32) & ~v2;
  uint64_t v4 = v2 | 7;
  unint64_t v5 = ((*(void *)(*(void *)v1 + 64) + v3 + 7) & 0xFFFFFFFFFFFFFFF8) + 16;
  swift_release();
  swift_release();
  uint64_t v6 = v0 + v3;
  sub_10001CFB8(*(void *)(v0 + v3), *(void *)(v0 + v3 + 8));
  uint64_t v7 = v0 + v3 + v1[7];
  uint64_t v8 = type metadata accessor for UUID();
  uint64_t v9 = *(void (**)(uint64_t, uint64_t))(*(void *)(v8 - 8) + 8);
  v9(v7, v8);
  v9(v6 + v1[8], v8);
  uint64_t v10 = v6 + v1[10];
  uint64_t v11 = type metadata accessor for Date();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v11 - 8) + 8))(v10, v11);
  swift_release();

  return _swift_deallocObject(v0, v5, v4);
}

uint64_t sub_100B52824(uint64_t a1)
{
  return sub_100B62FE0(a1, (uint64_t (*)(void))type metadata accessor for KeyAlignmentRecord, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))sub_1003940E0);
}

uint64_t sub_100B52854(uint64_t *a1)
{
  return sub_100B62DA8(a1, type metadata accessor for OwnedBeaconGroup, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))sub_1003914F0);
}

uint64_t sub_100B52884(uint64_t a1)
{
  return sub_100B62FE0(a1, type metadata accessor for OwnedBeaconGroup, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))sub_100393AA4);
}

uint64_t sub_100B528B4(uint64_t *a1)
{
  return sub_100B62DA8(a1, (uint64_t (*)(void))type metadata accessor for OwnedDeviceKeyRecord, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))sub_100391BE8);
}

uint64_t sub_100B528E4()
{
  uint64_t v1 = (int *)(type metadata accessor for OwnedDeviceKeyRecord() - 8);
  uint64_t v2 = *(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v3 = (v2 + 32) & ~v2;
  uint64_t v4 = v2 | 7;
  unint64_t v5 = ((*(void *)(*(void *)v1 + 64) + v3 + 7) & 0xFFFFFFFFFFFFFFF8) + 16;
  swift_release();
  swift_release();
  uint64_t v6 = v0 + v3;
  sub_10001CFB8(*(void *)(v0 + v3), *(void *)(v0 + v3 + 8));
  uint64_t v7 = v0 + v3 + v1[7];
  uint64_t v8 = type metadata accessor for UUID();
  uint64_t v9 = *(void (**)(uint64_t, uint64_t))(*(void *)(v8 - 8) + 8);
  v9(v7, v8);
  v9(v6 + v1[8], v8);
  sub_10001CFB8(*(void *)(v6 + v1[9]), *(void *)(v6 + v1[9] + 8));
  sub_10001CFB8(*(void *)(v6 + v1[10]), *(void *)(v6 + v1[10] + 8));
  swift_release();

  return _swift_deallocObject(v0, v5, v4);
}

uint64_t sub_100B52A4C(uint64_t a1)
{
  return sub_100B62FE0(a1, (uint64_t (*)(void))type metadata accessor for OwnedDeviceKeyRecord, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))sub_100393D74);
}

void sub_100B52A78()
{
}

void sub_100B52A84(uint64_t a1)
{
  sub_100AACBB8(a1, *(void *)(v1 + 16), *(NSObject **)(v1 + 24), &qword_1016554C8, &qword_1016554C0);
}

uint64_t sub_100B52AB0()
{
  uint64_t v1 = (int *)(type metadata accessor for SafeLocation() - 8);
  uint64_t v2 = *(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v3 = (v2 + 32) & ~v2;
  uint64_t v4 = v3 + *(void *)(*(void *)v1 + 64);
  uint64_t v5 = v2 | 7;
  swift_release();
  sub_10001CFB8(*(void *)(v0 + v3), *(void *)(v0 + v3 + 8));
  uint64_t v6 = v0 + v3 + v1[7];
  uint64_t v7 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v7 - 8) + 8))(v6, v7);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return _swift_deallocObject(v0, v4, v5);
}

uint64_t sub_100B52BC8(id *a1)
{
  uint64_t v3 = *(void *)(type metadata accessor for SafeLocation() - 8);
  return sub_100ACAB44(a1, *(void (**)(char *))(v1 + 16), *(void *)(v1 + 24), v1 + ((*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80)), (uint64_t (*)(void))type metadata accessor for SafeLocation, (void (*)(id))sub_100F1047C, (void (*)(id *, char *))sub_100B2280C, (uint64_t (*)(void))type metadata accessor for SafeLocation);
}

uint64_t sub_100B52C80(uint64_t a1)
{
  return sub_100AC5484(a1, *(void (**)(void *))(v1 + 16), *(void *)(v1 + 24), &qword_1016554C0, (uint64_t)"Update failed: %@", 17);
}

uint64_t sub_100B52CB0()
{
  uint64_t v1 = (int *)(type metadata accessor for SafeLocation() - 8);
  uint64_t v2 = *(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v3 = (v2 + 16) & ~v2;
  uint64_t v4 = v2 | 7;
  unint64_t v5 = (((*(void *)(*(void *)v1 + 64) + v3 + 7) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v6 = v0 + v3;
  sub_10001CFB8(*(void *)(v0 + v3), *(void *)(v0 + v3 + 8));
  uint64_t v7 = v6 + v1[7];
  uint64_t v8 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v8 - 8) + 8))(v7, v8);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();

  return _swift_deallocObject(v0, v5 + 16, v4);
}

uint64_t sub_100B52DF0(uint64_t *a1)
{
  return sub_100B62A50(a1, (uint64_t (*)(void))type metadata accessor for SafeLocation, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))sub_100ACC8B0);
}

uint64_t sub_100B52E1C(uint64_t a1)
{
  return sub_100AC9844(a1, *(void *)(v1 + 16), *(id **)(v1 + 24), *(void *)(v1 + 32));
}

uint64_t sub_100B52E3C()
{
  uint64_t v1 = (int *)(type metadata accessor for SafeLocation() - 8);
  uint64_t v2 = *(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v3 = (v2 + 24) & ~v2;
  uint64_t v4 = v2 | 7;
  unint64_t v5 = ((*(void *)(*(void *)v1 + 64) + v3 + 7) & 0xFFFFFFFFFFFFFFF8) + 8;
  swift_release();
  sub_10001CFB8(*(void *)(v0 + v3), *(void *)(v0 + v3 + 8));
  uint64_t v6 = v0 + v3 + v1[7];
  uint64_t v7 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v7 - 8) + 8))(v6, v7);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();

  return _swift_deallocObject(v0, v5, v4);
}

void sub_100B52F70(void **a1, uint64_t a2)
{
  uint64_t v5 = *(void *)(type metadata accessor for SafeLocation() - 8);
  unint64_t v6 = (*(unsigned __int8 *)(v5 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
  sub_100ACA458(*a1, a2, *(void *)(v2 + 16), v2 + v6, *(void *)(v2 + ((*(void *)(v5 + 64) + v6 + 7) & 0xFFFFFFFFFFFFFFF8)), (uint64_t (*)(void))type metadata accessor for SafeLocation, (uint64_t (*)(void))sub_100F1047C, (uint64_t)sub_100B64348, (uint64_t (*)(void))type metadata accessor for SafeLocation);
}

uint64_t sub_100B5306C()
{
  return dispatch thunk of static Equatable.== infix(_:_:)() & 1;
}

uint64_t sub_100B530FC()
{
  return sub_100B5E370((uint64_t (*)(void, void, void, void, void))sub_100E50CA0);
}

void sub_100B5312C(uint64_t a1)
{
  sub_100AACBB8(a1, *(void *)(v1 + 16), *(NSObject **)(v1 + 24), &qword_1016554F0, (uint64_t *)&unk_1016554E0);
}

uint64_t sub_100B53158()
{
  uint64_t v1 = (int *)(type metadata accessor for LeashRecord() - 8);
  uint64_t v2 = *(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v3 = (v2 + 32) & ~v2;
  uint64_t v4 = v3 + *(void *)(*(void *)v1 + 64);
  uint64_t v5 = v2 | 7;
  swift_release();
  sub_10001CFB8(*(void *)(v0 + v3), *(void *)(v0 + v3 + 8));
  uint64_t v6 = v0 + v3 + v1[7];
  uint64_t v7 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v7 - 8) + 8))(v6, v7);
  swift_bridgeObjectRelease();

  return _swift_deallocObject(v0, v4, v5);
}

uint64_t sub_100B53260(id *a1)
{
  uint64_t v3 = *(void *)(type metadata accessor for LeashRecord() - 8);
  return sub_100ACAB44(a1, *(void (**)(char *))(v1 + 16), *(void *)(v1 + 24), v1 + ((*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80)), (uint64_t (*)(void))type metadata accessor for LeashRecord, (void (*)(id))sub_10126128C, (void (*)(id *, char *))sub_100B2396C, (uint64_t (*)(void))type metadata accessor for LeashRecord);
}

uint64_t sub_100B53318(uint64_t a1)
{
  return sub_100AC5484(a1, *(void (**)(void *))(v1 + 16), *(void *)(v1 + 24), (uint64_t *)&unk_1016554E0, (uint64_t)"Update failed: %@", 17);
}

uint64_t sub_100B53348()
{
  uint64_t v1 = (int *)(type metadata accessor for LeashRecord() - 8);
  uint64_t v2 = *(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v3 = (v2 + 16) & ~v2;
  uint64_t v4 = v2 | 7;
  unint64_t v5 = (((*(void *)(*(void *)v1 + 64) + v3 + 7) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v6 = v0 + v3;
  sub_10001CFB8(*(void *)(v0 + v3), *(void *)(v0 + v3 + 8));
  uint64_t v7 = v6 + v1[7];
  uint64_t v8 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v8 - 8) + 8))(v7, v8);
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();

  return _swift_deallocObject(v0, v5 + 16, v4);
}

uint64_t sub_100B53478(uint64_t *a1)
{
  return sub_100B62A50(a1, (uint64_t (*)(void))type metadata accessor for LeashRecord, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))sub_100ACC598);
}

uint64_t sub_100B534A4(uint64_t a1)
{
  return sub_100AC968C(a1, *(void *)(v1 + 16), *(id **)(v1 + 24), *(void *)(v1 + 32));
}

uint64_t sub_100B534C4()
{
  uint64_t v1 = (int *)(type metadata accessor for LeashRecord() - 8);
  uint64_t v2 = *(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v3 = (v2 + 24) & ~v2;
  uint64_t v4 = v2 | 7;
  unint64_t v5 = ((*(void *)(*(void *)v1 + 64) + v3 + 7) & 0xFFFFFFFFFFFFFFF8) + 8;
  swift_release();
  sub_10001CFB8(*(void *)(v0 + v3), *(void *)(v0 + v3 + 8));
  uint64_t v6 = v0 + v3 + v1[7];
  uint64_t v7 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v7 - 8) + 8))(v6, v7);
  swift_bridgeObjectRelease();
  swift_release();

  return _swift_deallocObject(v0, v5, v4);
}

void sub_100B535E8(void **a1, uint64_t a2)
{
  uint64_t v5 = *(void *)(type metadata accessor for LeashRecord() - 8);
  unint64_t v6 = (*(unsigned __int8 *)(v5 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
  sub_100ACA458(*a1, a2, *(void *)(v2 + 16), v2 + v6, *(void *)(v2 + ((*(void *)(v5 + 64) + v6 + 7) & 0xFFFFFFFFFFFFFFF8)), (uint64_t (*)(void))type metadata accessor for LeashRecord, (uint64_t (*)(void))sub_10126128C, (uint64_t)sub_100B64360, (uint64_t (*)(void))type metadata accessor for LeashRecord);
}

uint64_t sub_100B536E8(uint64_t *a1)
{
  return sub_100B62DA8(a1, (uint64_t (*)(void))type metadata accessor for ShareRecord, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))sub_10039263C);
}

uint64_t sub_100B53718()
{
  uint64_t v1 = (int *)type metadata accessor for ShareRecord();
  uint64_t v2 = *(unsigned __int8 *)(*((void *)v1 - 1) + 80);
  uint64_t v3 = (v2 + 32) & ~v2;
  uint64_t v13 = *(void *)(*((void *)v1 - 1) + 64);
  swift_release();
  swift_release();
  sub_10001CFB8(*(void *)(v0 + v3), *(void *)(v0 + v3 + 8));
  uint64_t v4 = v0 + v3 + v1[5];
  uint64_t v5 = type metadata accessor for UUID();
  unint64_t v6 = *(void (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8);
  v6(v4, v5);
  v6(v0 + v3 + v1[6], v5);
  uint64_t v7 = v0 + v3 + v1[7];
  uint64_t v8 = type metadata accessor for Date();
  uint64_t v9 = *(void *)(v8 - 8);
  uint64_t v10 = *(void (**)(uint64_t, uint64_t))(v9 + 8);
  v10(v7, v8);
  uint64_t v11 = v0 + v3 + v1[8];
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v9 + 48))(v11, 1, v8)) {
    v10(v11, v8);
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();

  return _swift_deallocObject(v0, ((v13 + v3 + 7) & 0xFFFFFFFFFFFFFFF8) + 16, v2 | 7);
}

uint64_t sub_100B5392C(uint64_t a1)
{
  return sub_100B62FE0(a1, (uint64_t (*)(void))type metadata accessor for ShareRecord, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))sub_100394080);
}

uint64_t sub_100B53958()
{
  return sub_100B5E370((uint64_t (*)(void, void, void, void, void))sub_100E50638);
}

uint64_t sub_100B53984()
{
  uint64_t v2 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v2;
  *uint64_t v2 = v1;
  v2[1] = sub_100033F68;
  return sub_100AB142C(v0);
}

uint64_t sub_100B53A14(uint64_t a1, uint64_t a2)
{
  unint64_t v6 = (void *)swift_task_alloc();
  *(void *)(v3 + 16) = v6;
  *unint64_t v6 = v3;
  v6[1] = sub_100033F68;
  return sub_100AB1B84(a1, a2, v2);
}

uint64_t sub_100B53ABC(uint64_t a1)
{
  return sub_100B1B310(a1, v1);
}

uint64_t sub_100B53AC4()
{
  return sub_100B63B6C((void (*)(void))&_swift_release, 40);
}

uint64_t sub_100B53AE0()
{
  return sub_10101219C(v0[2], v0[3], v0[4]);
}

uint64_t sub_100B53AEC()
{
  return sub_100B63B6C((void (*)(void))&_swift_unknownObjectRelease, 40);
}

uint64_t sub_100B53B08(uint64_t a1)
{
  uint64_t v4 = v1[2];
  uint64_t v5 = v1[3];
  uint64_t v6 = v1[4];
  uint64_t v7 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v7;
  *uint64_t v7 = v2;
  v7[1] = sub_100033F68;
  return sub_100B1B554(a1, v4, v5, v6);
}

uint64_t sub_100B53BBC(uint64_t a1)
{
  return sub_100B1CC18(a1, *(void *)(v1 + 16), *(void *)(v1 + 24));
}

uint64_t sub_100B53BC4()
{
  uint64_t v1 = (int *)type metadata accessor for OwnedBeaconRecord();
  uint64_t v24 = *(unsigned __int8 *)(*((void *)v1 - 1) + 80);
  uint64_t v22 = *(void *)(*((void *)v1 - 1) + 64);
  uint64_t v2 = sub_10000588C((uint64_t *)&unk_1016565A0);
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t v21 = *(unsigned __int8 *)(v3 + 80);
  uint64_t v20 = *(void *)(v3 + 64);
  swift_unknownObjectRelease();
  swift_release();
  uint64_t v23 = (v24 + 40) & ~v24;
  uint64_t v4 = v0 + v23;
  sub_10001CFB8(*(void *)(v0 + v23), *(void *)(v0 + v23 + 8));
  uint64_t v5 = v0 + v23 + v1[5];
  uint64_t v6 = type metadata accessor for UUID();
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = *(void (**)(uint64_t, uint64_t))(v7 + 8);
  v8(v5, v6);
  uint64_t v9 = v0 + v23 + v1[6];
  type metadata accessor for StableIdentifier();
  switch(swift_getEnumCaseMultiPayload())
  {
    case 0u:
    case 4u:
      goto LABEL_6;
    case 1u:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      goto LABEL_6;
    case 2u:
      v8(v9, v6);
      uint64_t v19 = v2;
      sub_10000588C(&qword_1016555E0);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      goto LABEL_5;
    case 3u:
      v8(v9, v6);
      uint64_t v19 = v2;
      sub_10000588C((uint64_t *)&unk_1016565E0);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
LABEL_5:
      uint64_t v2 = v19;
LABEL_6:
      swift_bridgeObjectRelease();
      break;
    default:
      break;
  }
  uint64_t v10 = v4 + v1[7];
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(v10, 1, v6)) {
    v8(v10, v6);
  }
  uint64_t v11 = v4 + v1[8];
  uint64_t v12 = type metadata accessor for Date();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v12 - 8) + 8))(v11, v12);
  sub_10001CFB8(*(void *)(v4 + v1[9]), *(void *)(v4 + v1[9] + 8));
  uint64_t v13 = (uint64_t *)(v4 + v1[10]);
  unint64_t v14 = v13[1];
  if (v14 >> 60 != 15) {
    sub_10001CFB8(*v13, v14);
  }
  uint64_t v15 = (uint64_t *)(v4 + v1[11]);
  unint64_t v16 = v15[1];
  if (v16 >> 60 != 15) {
    sub_10001CFB8(*v15, v16);
  }
  uint64_t v17 = (v23 + v22 + v21) & ~v21;
  sub_10001CFB8(*(void *)(v4 + v1[12]), *(void *)(v4 + v1[12] + 8));
  sub_10001CFB8(*(void *)(v4 + v1[13]), *(void *)(v4 + v1[13] + 8));
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v0 + v17, v2);

  return _swift_deallocObject(v0, v17 + v20, v24 | v21 | 7);
}

uint64_t sub_100B53FEC(uint64_t a1)
{
  uint64_t v3 = v2;
  uint64_t v5 = *(void *)(type metadata accessor for OwnedBeaconRecord() - 8);
  unint64_t v6 = (*(unsigned __int8 *)(v5 + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
  unint64_t v7 = v6 + *(void *)(v5 + 64);
  uint64_t v8 = *(void *)(sub_10000588C((uint64_t *)&unk_1016565A0) - 8);
  unint64_t v9 = (v7 + *(unsigned __int8 *)(v8 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80);
  uint64_t v10 = v1[2];
  uint64_t v11 = v1[3];
  uint64_t v12 = v1[4];
  uint64_t v13 = (uint64_t)v1 + v6;
  uint64_t v14 = (uint64_t)v1 + v9;
  uint64_t v15 = (void *)swift_task_alloc();
  *(void *)(v3 + 16) = v15;
  void *v15 = v3;
  v15[1] = sub_100033F68;
  return sub_100B1CEC4(a1, v10, v11, v12, v13, v14);
}

uint64_t sub_100B54150()
{
  uint64_t v1 = (int *)type metadata accessor for OwnedBeaconRecord();
  uint64_t v24 = *(unsigned __int8 *)(*((void *)v1 - 1) + 80);
  uint64_t v22 = *(void *)(*((void *)v1 - 1) + 64);
  uint64_t v2 = sub_10000588C((uint64_t *)&unk_1016565A0);
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t v21 = *(unsigned __int8 *)(v3 + 80);
  uint64_t v20 = *(void *)(v3 + 64);
  swift_release();
  uint64_t v23 = (v24 + 24) & ~v24;
  uint64_t v4 = v0 + v23;
  sub_10001CFB8(*(void *)(v0 + v23), *(void *)(v0 + v23 + 8));
  uint64_t v5 = v0 + v23 + v1[5];
  uint64_t v6 = type metadata accessor for UUID();
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = *(void (**)(uint64_t, uint64_t))(v7 + 8);
  v8(v5, v6);
  uint64_t v9 = v0 + v23 + v1[6];
  type metadata accessor for StableIdentifier();
  switch(swift_getEnumCaseMultiPayload())
  {
    case 0u:
    case 4u:
      goto LABEL_6;
    case 1u:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      goto LABEL_6;
    case 2u:
      v8(v9, v6);
      uint64_t v19 = v2;
      sub_10000588C(&qword_1016555E0);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      goto LABEL_5;
    case 3u:
      v8(v9, v6);
      uint64_t v19 = v2;
      sub_10000588C((uint64_t *)&unk_1016565E0);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
LABEL_5:
      uint64_t v2 = v19;
LABEL_6:
      swift_bridgeObjectRelease();
      break;
    default:
      break;
  }
  uint64_t v10 = v4 + v1[7];
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(v10, 1, v6)) {
    v8(v10, v6);
  }
  uint64_t v11 = v4 + v1[8];
  uint64_t v12 = type metadata accessor for Date();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v12 - 8) + 8))(v11, v12);
  sub_10001CFB8(*(void *)(v4 + v1[9]), *(void *)(v4 + v1[9] + 8));
  uint64_t v13 = (uint64_t *)(v4 + v1[10]);
  unint64_t v14 = v13[1];
  if (v14 >> 60 != 15) {
    sub_10001CFB8(*v13, v14);
  }
  uint64_t v15 = (uint64_t *)(v4 + v1[11]);
  unint64_t v16 = v15[1];
  if (v16 >> 60 != 15) {
    sub_10001CFB8(*v15, v16);
  }
  uint64_t v17 = (v23 + v22 + v21) & ~v21;
  sub_10001CFB8(*(void *)(v4 + v1[12]), *(void *)(v4 + v1[12] + 8));
  sub_10001CFB8(*(void *)(v4 + v1[13]), *(void *)(v4 + v1[13] + 8));
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v0 + v17, v2);

  return _swift_deallocObject(v0, v17 + v20, v24 | v21 | 7);
}

uint64_t sub_100B54570()
{
  uint64_t v1 = *(void *)(type metadata accessor for OwnedBeaconRecord() - 8);
  unint64_t v2 = (*(unsigned __int8 *)(v1 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80);
  unint64_t v3 = v2 + *(void *)(v1 + 64);
  uint64_t v4 = *(void *)(sub_10000588C((uint64_t *)&unk_1016565A0) - 8);
  uint64_t v5 = *(void *)(v0 + 16);
  uint64_t v6 = v0 + ((v3 + *(unsigned __int8 *)(v4 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80));

  return sub_100B1D1A8(v5, v0 + v2, v6);
}

uint64_t sub_100B5464C()
{
  return sub_1004AF4AC((uint64_t *)&unk_1016565A0);
}

uint64_t sub_100B54658(uint64_t a1)
{
  return sub_100B5D964(a1, (uint64_t *)&unk_1016565A0, (uint64_t (*)(uint64_t, uint64_t))sub_10076E484);
}

uint64_t sub_100B5467C()
{
  return sub_100B63B6C((void (*)(void))&_swift_unknownObjectRelease, 40);
}

uint64_t sub_100B54698()
{
  return sub_1004AF4AC((uint64_t *)&unk_1016565A0);
}

uint64_t sub_100B546A4(uint64_t a1, char a2)
{
  char v3 = a2 & 1;
  sub_10000588C((uint64_t *)&unk_1016565A0);

  return sub_100ABAEEC(a1, v3);
}

uint64_t sub_100B54728()
{
  uint64_t v1 = *(void *)(type metadata accessor for CloudKitChangeSet(0) - 8);
  uint64_t v2 = *(unsigned __int8 *)(v1 + 80);
  uint64_t v3 = (v2 + 16) & ~v2;
  uint64_t v4 = v2 | 7;
  unint64_t v5 = ((((((*(void *)(v1 + 64) + v3 + 7) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8)
     + 8;
  uint64_t v6 = v0 + v3;
  uint64_t v7 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v7 - 8) + 8))(v6, v7);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();

  return _swift_deallocObject(v0, v5, v4);
}

uint64_t sub_100B5485C(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = *(void *)(type metadata accessor for CloudKitChangeSet(0) - 8);
  unint64_t v6 = (*(unsigned __int8 *)(v5 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
  unint64_t v7 = (*(void *)(v5 + 64) + v6 + 7) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v8 = (v7 + 15) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v9 = *(void *)(v2 + v7);
  uint64_t v10 = *(void *)(v2 + v8);
  uint64_t v11 = *(void *)(v2 + v8 + 8);
  uint64_t v12 = *(void *)(v2 + ((v8 + 23) & 0xFFFFFFFFFFFFFFF8));

  return sub_100B103E8(a1, a2, v2 + v6, v9, v10, v11, v12);
}

uint64_t sub_100B54924()
{
  uint64_t v1 = *(void *)(type metadata accessor for CloudKitChangeSet(0) - 8);
  uint64_t v2 = *(unsigned __int8 *)(v1 + 80);
  uint64_t v3 = (v2 + 32) & ~v2;
  uint64_t v4 = v2 | 7;
  unint64_t v5 = ((((((((*(void *)(v1 + 64) + v3 + 7) & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8)
       + 23) & 0xFFFFFFFFFFFFFFF8)
     + 8;
  swift_release();
  uint64_t v6 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v6 - 8) + 8))(v0 + v3, v6);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();

  return _swift_deallocObject(v0, v5, v4);
}

uint64_t sub_100B54A74(uint64_t a1, uint64_t a2, char a3)
{
  int v6 = a3 & 1;
  uint64_t v7 = *(void *)(type metadata accessor for CloudKitChangeSet(0) - 8);
  unint64_t v8 = (*(unsigned __int8 *)(v7 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80);
  unint64_t v9 = (*(void *)(v7 + 64) + v8 + 7) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v10 = (v9 + 23) & 0xFFFFFFFFFFFFFFF8;
  return sub_100B11CD4(a1, a2, v6, *(void *)(v3 + 16), *(void *)(v3 + 24), v3 + v8, *(void *)(v3 + v9), *(void *)(v3 + v9 + 8), *(void *)(v3 + v10), *(void *)(v3 + ((v10 + 15) & 0xFFFFFFFFFFFFFFF8)), *(void *)(v3 + ((v10 + 15) & 0xFFFFFFFFFFFFFFF8) + 8), *(void *)(v3 + ((((v10 + 15) & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8)));
}

uint64_t sub_100B54B5C()
{
  uint64_t v1 = *(void *)(type metadata accessor for CloudKitChangeSet(0) - 8);
  uint64_t v2 = *(unsigned __int8 *)(v1 + 80);
  uint64_t v3 = (v2 + 16) & ~v2;
  uint64_t v4 = v2 | 7;
  unint64_t v5 = (((*(void *)(v1 + 64) + v3 + 7) & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v6 = v0 + v3;
  uint64_t v7 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v7 - 8) + 8))(v6, v7);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();

  return _swift_deallocObject(v0, v5 + 16, v4);
}

uint64_t sub_100B54C8C()
{
  uint64_t v1 = *(void *)(type metadata accessor for CloudKitChangeSet(0) - 8);
  unint64_t v2 = (*(unsigned __int8 *)(v1 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80);
  unint64_t v3 = (*(void *)(v1 + 64) + v2 + 7) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v4 = v0 + v2;
  unint64_t v5 = *(void (**)(void))(v0 + v3);
  uint64_t v6 = *(void *)(v0 + v3 + 8);
  (*(void (**)(void, void))(v0 + ((v3 + 23) & 0xFFFFFFFFFFFFFFF8)))(0, 0);

  return sub_100B1192C(v4, v5, v6);
}

uint64_t sub_100B54D58()
{
  uint64_t v1 = *(void *)(type metadata accessor for CloudKitChangeSet(0) - 8);
  uint64_t v2 = *(unsigned __int8 *)(v1 + 80);
  uint64_t v3 = (v2 + 24) & ~v2;
  uint64_t v4 = v2 | 7;
  unint64_t v5 = (*(void *)(v1 + 64) + v3 + 7) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v6 = v0 + v3;
  uint64_t v7 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v7 - 8) + 8))(v6, v7);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  sub_100B54ED0(*(void *)(v0 + ((v5 + 23) & 0xFFFFFFFFFFFFFFF8)), *(void *)(v0 + ((v5 + 23) & 0xFFFFFFFFFFFFFFF8) + 8), *(unsigned char *)(v0 + ((v5 + 23) & 0xFFFFFFFFFFFFFFF8) + 16));
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();

  return _swift_deallocObject(v0, ((((((((v5 + 47) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8)+ 8, v4);
}

uint64_t sub_100B54ED0(uint64_t a1, uint64_t a2, char a3)
{
  if (a3)
  {
    return swift_errorRelease();
  }
  else
  {
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
}

uint64_t sub_100B54F1C()
{
  uint64_t v1 = *(void *)(type metadata accessor for CloudKitChangeSet(0) - 8);
  unint64_t v2 = (*(unsigned __int8 *)(v1 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80);
  unint64_t v3 = (*(void *)(v1 + 64) + v2 + 7) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v4 = (v3 + 47) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v5 = (v4 + 15) & 0xFFFFFFFFFFFFFFF8;
  return sub_100B12168(*(void *)(v0 + 16), v0 + v2, *(uint64_t (**)(void))(v0 + v3), *(void *)(v0 + v3 + 8), *(void *)(v0 + ((v3 + 23) & 0xFFFFFFFFFFFFFFF8)), *(void *)(v0 + ((v3 + 23) & 0xFFFFFFFFFFFFFFF8) + 8), *(unsigned char *)(v0 + ((v3 + 23) & 0xFFFFFFFFFFFFFFF8) + 16), *(void *)(v0 + v4), *(void *)(v0 + v5), *(void (**)(uint64_t, uint64_t))(v0 + ((v5 + 15) & 0xFFFFFFFFFFFFFFF8)), *(void *)(v0 + ((v5 + 15) & 0xFFFFFFFFFFFFFFF8) + 8));
}

uint64_t sub_100B54FFC(uint64_t a1, uint64_t a2, char a3)
{
  if (a3)
  {
    return swift_errorRetain();
  }
  else
  {
    swift_bridgeObjectRetain();
    return swift_bridgeObjectRetain();
  }
}

uint64_t sub_100B55048(uint64_t a1)
{
  uint64_t v2 = sub_10000588C(&qword_101649E40);
  __chkstk_darwin(v2 - 8);
  unint64_t v4 = (char *)&v55 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = type metadata accessor for URL();
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  unint64_t v8 = (char *)&v55 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v69 = type metadata accessor for BeaconStoreFileRecord();
  uint64_t v65 = *(void *)(v69 - 8);
  __chkstk_darwin(v69);
  unint64_t v10 = (char *)&v55 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = sub_10000588C(&qword_101659260);
  uint64_t v12 = __chkstk_darwin(v11 - 8);
  unint64_t v14 = (uint64_t *)((char *)&v55 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0));
  __chkstk_darwin(v12);
  unint64_t v16 = (void **)((char *)&v55 - v15);
  uint64_t v17 = *(void *)(a1 + 64);
  uint64_t v57 = a1 + 64;
  uint64_t v18 = 1 << *(unsigned char *)(a1 + 32);
  uint64_t v19 = -1;
  if (v18 < 64) {
    uint64_t v19 = ~(-1 << v18);
  }
  unint64_t v20 = v19 & v17;
  uint64_t v68 = (unsigned int (**)(char *, uint64_t, uint64_t))(v6 + 48);
  uint64_t v61 = (void (**)(char *, uint64_t))(v6 + 8);
  uint64_t v62 = (void (**)(char *, char *, uint64_t))(v6 + 32);
  int64_t v60 = (unint64_t)(v18 + 63) >> 6;
  int64_t v56 = v60 - 1;
  uint64_t v66 = a1;
  uint64_t v21 = (uint64_t)v10;
  swift_bridgeObjectRetain();
  int64_t v22 = 0;
  uint64_t v58 = 0;
  uint64_t v23 = (uint64_t *)&unk_101659268;
  long long v59 = xmmword_101342130;
  uint64_t v70 = v8;
  uint64_t v71 = v5;
  uint64_t v63 = v21;
  uint64_t v64 = v4;
  uint64_t v67 = v14;
  while (1)
  {
    if (v20)
    {
      unint64_t v24 = __clz(__rbit64(v20));
      v20 &= v20 - 1;
      int64_t v72 = v22;
      unint64_t v25 = v24 | (v22 << 6);
LABEL_8:
      uint64_t v26 = *(void *)(v66 + 56);
      uint64_t v27 = *(void **)(*(void *)(v66 + 48) + 8 * v25);
      void *v14 = v27;
      uint64_t v28 = v26 + *(void *)(v65 + 72) * v25;
      uint64_t v29 = sub_10000588C(v23);
      sub_100B30D0C(v28, (uint64_t)v14 + *(int *)(v29 + 48), (uint64_t (*)(void))type metadata accessor for BeaconStoreFileRecord);
      (*(void (**)(void *, void, uint64_t, uint64_t))(*(void *)(v29 - 8) + 56))(v14, 0, 1, v29);
      id v30 = v27;
      unint64_t v8 = v70;
      uint64_t v5 = v71;
      goto LABEL_21;
    }
    int64_t v31 = v22 + 1;
    if (__OFADD__(v22, 1))
    {
      __break(1u);
LABEL_40:
      __break(1u);
    }
    if (v31 >= v60) {
      goto LABEL_19;
    }
    unint64_t v32 = *(void *)(v57 + 8 * v31);
    if (v32) {
      goto LABEL_12;
    }
    v22 += 2;
    if (v31 + 1 >= v60) {
      goto LABEL_37;
    }
    unint64_t v32 = *(void *)(v57 + 8 * v22);
    if (v32) {
      goto LABEL_15;
    }
    if (v31 + 2 >= v60)
    {
LABEL_19:
      int64_t v72 = v22;
    }
    else
    {
      unint64_t v32 = *(void *)(v57 + 8 * (v31 + 2));
      if (v32)
      {
        v31 += 2;
        goto LABEL_12;
      }
      int64_t v22 = v31 + 3;
      if (v31 + 3 < v60)
      {
        unint64_t v32 = *(void *)(v57 + 8 * v22);
        if (v32)
        {
LABEL_15:
          int64_t v31 = v22;
LABEL_12:
          unint64_t v20 = (v32 - 1) & v32;
          unint64_t v25 = __clz(__rbit64(v32)) + (v31 << 6);
          int64_t v72 = v31;
          goto LABEL_8;
        }
        while (1)
        {
          int64_t v31 = v22 + 1;
          if (__OFADD__(v22, 1)) {
            goto LABEL_40;
          }
          if (v31 >= v60) {
            break;
          }
          unint64_t v32 = *(void *)(v57 + 8 * v31);
          ++v22;
          if (v32) {
            goto LABEL_12;
          }
        }
        int64_t v31 = v56;
LABEL_37:
        int64_t v72 = v31;
        goto LABEL_20;
      }
      int64_t v72 = v31 + 2;
    }
LABEL_20:
    uint64_t v33 = sub_10000588C(v23);
    (*(void (**)(void *, uint64_t, uint64_t, uint64_t))(*(void *)(v33 - 8) + 56))(v14, 1, 1, v33);
    unint64_t v20 = 0;
LABEL_21:
    sub_10001D608((uint64_t)v14, (uint64_t)v16, &qword_101659260);
    uint64_t v34 = sub_10000588C(v23);
    if ((*(unsigned int (**)(void **, uint64_t, uint64_t))(*(void *)(v34 - 8) + 48))(v16, 1, v34) == 1) {
      return swift_release();
    }
    uint64_t v35 = v23;
    uint64_t v36 = *v16;
    sub_100B30DB4((uint64_t)v16 + *(int *)(v34 + 48), v21, (uint64_t (*)(void))type metadata accessor for BeaconStoreFileRecord);
    sub_10001D074(v21 + *(int *)(v69 + 20), (uint64_t)v4, &qword_101649E40);
    if ((*v68)(v4, 1, v5) == 1)
    {
      sub_10001DAB4((uint64_t)v4, &qword_101649E40);
    }
    else
    {
      (*v62)(v8, v4, v5);
      id v37 = v8;
      id v38 = [self defaultManager];
      URL._bridgeToObjectiveC()(v39);
      unint64_t v41 = v40;
      URL._bridgeToObjectiveC()(v42);
      uint64_t v44 = v43;
      id v73 = 0;
      unsigned __int8 v45 = [v38 moveItemAtURL:v41 toURL:v43 error:&v73];

      if (v45)
      {
        uint64_t v46 = *v61;
        id v47 = v73;
        v46(v37, v5);
        unint64_t v4 = v64;
        unint64_t v8 = v37;
      }
      else
      {
        id v48 = v73;
        uint64_t v49 = (void *)_convertNSErrorToError(_:)();

        swift_willThrow();
        static os_log_type_t.default.getter();
        if (qword_101637260 != -1) {
          swift_once();
        }
        sub_10000588C((uint64_t *)&unk_10163AD00);
        uint64_t v50 = swift_allocObject();
        *(_OWORD *)(v50 + 16) = v59;
        id v73 = v49;
        swift_errorRetain();
        sub_10000588C(&qword_101638D40);
        uint64_t v51 = String.init<A>(describing:)();
        uint64_t v53 = v52;
        *(void *)(v50 + 56) = &type metadata for String;
        *(void *)(v50 + 64) = sub_10000B4CC();
        *(void *)(v50 + 32) = v51;
        *(void *)(v50 + 40) = v53;
        os_log(_:dso:log:_:_:)();
        swift_bridgeObjectRelease();
        swift_errorRelease();
        unint64_t v8 = v70;
        uint64_t v5 = v71;
        (*v61)(v70, v71);
        uint64_t v58 = 0;
        unint64_t v4 = v64;
      }
      uint64_t v21 = v63;
    }

    sub_100B310AC(v21, (uint64_t (*)(void))type metadata accessor for BeaconStoreFileRecord);
    uint64_t v23 = v35;
    unint64_t v14 = v67;
    int64_t v22 = v72;
  }
}

uint64_t sub_100B557E0(uint64_t a1)
{
  uint64_t v2 = sub_10000588C(&qword_101649E40);
  __chkstk_darwin(v2 - 8);
  uint64_t v64 = (uint64_t)&v51 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = type metadata accessor for URL();
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v7 = (char *)&v51 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v63 = type metadata accessor for BeaconStoreFileRecord();
  uint64_t v60 = *(void *)(v63 - 8);
  __chkstk_darwin(v63);
  uint64_t v67 = (uint64_t)&v51 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = sub_10000588C(&qword_101659260);
  uint64_t v10 = __chkstk_darwin(v9 - 8);
  uint64_t v12 = (uint64_t *)((char *)&v51 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0));
  __chkstk_darwin(v10);
  unint64_t v14 = (id *)((char *)&v51 - v13);
  uint64_t v15 = *(void *)(a1 + 64);
  uint64_t v53 = a1 + 64;
  uint64_t v16 = 1 << *(unsigned char *)(a1 + 32);
  uint64_t v17 = -1;
  if (v16 < 64) {
    uint64_t v17 = ~(-1 << v16);
  }
  unint64_t v18 = v17 & v15;
  uint64_t v61 = a1;
  uint64_t v62 = (unsigned int (**)(uint64_t, uint64_t, uint64_t))(v5 + 48);
  uint64_t v58 = (void (**)(char *, uint64_t))(v5 + 8);
  long long v59 = (void (**)(char *, uint64_t, uint64_t))(v5 + 32);
  int64_t v57 = (unint64_t)(v16 + 63) >> 6;
  int64_t v52 = v57 - 1;
  swift_bridgeObjectRetain();
  int64_t v19 = 0;
  uint64_t v54 = 0;
  unint64_t v20 = (uint64_t *)&unk_101659268;
  long long v55 = xmmword_101342130;
  uint64_t v65 = v4;
  int64_t v56 = v7;
  while (1)
  {
    if (v18)
    {
      unint64_t v21 = __clz(__rbit64(v18));
      v18 &= v18 - 1;
      int64_t v66 = v19;
      unint64_t v22 = v21 | (v19 << 6);
LABEL_8:
      uint64_t v23 = *(void *)(v61 + 56);
      unint64_t v24 = *(void **)(*(void *)(v61 + 48) + 8 * v22);
      *uint64_t v12 = v24;
      uint64_t v25 = v23 + *(void *)(v60 + 72) * v22;
      uint64_t v26 = sub_10000588C(v20);
      sub_100B30D0C(v25, (uint64_t)v12 + *(int *)(v26 + 48), (uint64_t (*)(void))type metadata accessor for BeaconStoreFileRecord);
      (*(void (**)(void *, void, uint64_t, uint64_t))(*(void *)(v26 - 8) + 56))(v12, 0, 1, v26);
      id v27 = v24;
      uint64_t v4 = v65;
      goto LABEL_21;
    }
    int64_t v28 = v19 + 1;
    if (__OFADD__(v19, 1))
    {
      __break(1u);
LABEL_39:
      __break(1u);
    }
    if (v28 >= v57) {
      goto LABEL_19;
    }
    unint64_t v29 = *(void *)(v53 + 8 * v28);
    if (v29) {
      goto LABEL_12;
    }
    v19 += 2;
    if (v28 + 1 >= v57) {
      goto LABEL_36;
    }
    unint64_t v29 = *(void *)(v53 + 8 * v19);
    if (v29) {
      goto LABEL_15;
    }
    if (v28 + 2 >= v57)
    {
LABEL_19:
      int64_t v66 = v19;
    }
    else
    {
      unint64_t v29 = *(void *)(v53 + 8 * (v28 + 2));
      if (v29)
      {
        v28 += 2;
        goto LABEL_12;
      }
      int64_t v19 = v28 + 3;
      if (v28 + 3 < v57)
      {
        unint64_t v29 = *(void *)(v53 + 8 * v19);
        if (v29)
        {
LABEL_15:
          int64_t v28 = v19;
LABEL_12:
          unint64_t v18 = (v29 - 1) & v29;
          unint64_t v22 = __clz(__rbit64(v29)) + (v28 << 6);
          int64_t v66 = v28;
          goto LABEL_8;
        }
        while (1)
        {
          int64_t v28 = v19 + 1;
          if (__OFADD__(v19, 1)) {
            goto LABEL_39;
          }
          if (v28 >= v57) {
            break;
          }
          unint64_t v29 = *(void *)(v53 + 8 * v28);
          ++v19;
          if (v29) {
            goto LABEL_12;
          }
        }
        int64_t v28 = v52;
LABEL_36:
        int64_t v66 = v28;
        goto LABEL_20;
      }
      int64_t v66 = v28 + 2;
    }
LABEL_20:
    uint64_t v30 = sub_10000588C(v20);
    (*(void (**)(void *, uint64_t, uint64_t, uint64_t))(*(void *)(v30 - 8) + 56))(v12, 1, 1, v30);
    unint64_t v18 = 0;
LABEL_21:
    sub_10001D608((uint64_t)v12, (uint64_t)v14, &qword_101659260);
    int64_t v31 = v20;
    uint64_t v32 = sub_10000588C(v20);
    if ((*(unsigned int (**)(id *, uint64_t, uint64_t))(*(void *)(v32 - 8) + 48))(v14, 1, v32) == 1) {
      return swift_release();
    }

    uint64_t v33 = v67;
    sub_100B30DB4((uint64_t)v14 + *(int *)(v32 + 48), v67, (uint64_t (*)(void))type metadata accessor for BeaconStoreFileRecord);
    uint64_t v34 = v33 + *(int *)(v63 + 20);
    uint64_t v35 = v64;
    sub_10001D074(v34, v64, &qword_101649E40);
    if ((*v62)(v35, 1, v4) == 1)
    {
      sub_10001DAB4(v35, &qword_101649E40);
    }
    else
    {
      (*v59)(v7, v35, v4);
      id v36 = [self defaultManager];
      URL._bridgeToObjectiveC()(v37);
      uint64_t v38 = v4;
      uint64_t v40 = v39;
      id v68 = 0;
      unsigned __int8 v41 = [v36 removeItemAtURL:v39 error:&v68];

      if (v41)
      {
        BOOL v42 = *v58;
        id v43 = v68;
        v42(v7, v38);
        uint64_t v4 = v38;
      }
      else
      {
        id v44 = v68;
        unsigned __int8 v45 = (void *)_convertNSErrorToError(_:)();

        swift_willThrow();
        static os_log_type_t.default.getter();
        if (qword_101637260 != -1) {
          swift_once();
        }
        sub_10000588C((uint64_t *)&unk_10163AD00);
        uint64_t v46 = swift_allocObject();
        *(_OWORD *)(v46 + 16) = v55;
        id v68 = v45;
        swift_errorRetain();
        sub_10000588C(&qword_101638D40);
        uint64_t v47 = String.init<A>(describing:)();
        uint64_t v49 = v48;
        *(void *)(v46 + 56) = &type metadata for String;
        *(void *)(v46 + 64) = sub_10000B4CC();
        *(void *)(v46 + 32) = v47;
        *(void *)(v46 + 40) = v49;
        os_log(_:dso:log:_:_:)();
        swift_bridgeObjectRelease();
        swift_errorRelease();
        uint64_t v7 = v56;
        uint64_t v4 = v65;
        (*v58)(v56, v65);
        uint64_t v54 = 0;
      }
    }
    sub_100B310AC(v67, (uint64_t (*)(void))type metadata accessor for BeaconStoreFileRecord);
    unint64_t v20 = v31;
    int64_t v19 = v66;
  }
}

uint64_t *sub_100B55F50(uint64_t *a1)
{
  uint64_t v2 = a1[2];
  unint64_t v3 = a1[3];
  uint64_t v4 = a1[4];
  unint64_t v5 = a1[5];
  sub_10001CFB8(*a1, a1[1]);
  sub_10001CFB8(v2, v3);
  sub_10001CFB8(v4, v5);
  return a1;
}

uint64_t sub_100B55FB0()
{
  uint64_t v1 = type metadata accessor for UUID();
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 24) & ~v3;
  uint64_t v5 = v3 | 7;
  unint64_t v6 = (*(void *)(v2 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8;

  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  swift_release();

  return _swift_deallocObject(v0, v6 + 8, v5);
}

uint64_t sub_100B56098(uint64_t a1)
{
  return sub_100B56D18(a1, (uint64_t (*)(void))&type metadata accessor for UUID, (uint64_t (*)(uint64_t, uint64_t, unint64_t, uint64_t))sub_100B1D89C);
}

uint64_t sub_100B560C4(uint64_t a1)
{
  return sub_100AC03E0(a1, v1[2], v1[3], v1[4]);
}

uint64_t sub_100B560E4(uint64_t a1)
{
  return sub_100AC5484(a1, *(void (**)(void *))(v1 + 16), *(void *)(v1 + 24), &qword_1016592B0, (uint64_t)"Save failed: %@", 15);
}

uint64_t sub_100B56114()
{
  uint64_t v1 = (int *)(type metadata accessor for OwnedDeviceKeyRecord() - 8);
  uint64_t v2 = *(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v3 = (v2 + 24) & ~v2;
  uint64_t v4 = v2 | 7;
  unint64_t v5 = ((*(void *)(*(void *)v1 + 64) + v3 + 7) & 0xFFFFFFFFFFFFFFF8) + 16;
  swift_release();
  uint64_t v6 = v0 + v3;
  sub_10001CFB8(*(void *)(v0 + v3), *(void *)(v0 + v3 + 8));
  uint64_t v7 = v0 + v3 + v1[7];
  uint64_t v8 = type metadata accessor for UUID();
  uint64_t v9 = *(void (**)(uint64_t, uint64_t))(*(void *)(v8 - 8) + 8);
  v9(v7, v8);
  v9(v6 + v1[8], v8);
  sub_10001CFB8(*(void *)(v6 + v1[9]), *(void *)(v6 + v1[9] + 8));
  sub_10001CFB8(*(void *)(v6 + v1[10]), *(void *)(v6 + v1[10] + 8));
  swift_release();

  return _swift_deallocObject(v0, v5, v4);
}

uint64_t sub_100B56274(uint64_t *a1)
{
  return sub_100B57760(a1, (uint64_t (*)(void))type metadata accessor for OwnedDeviceKeyRecord, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))sub_100AC61A8);
}

uint64_t sub_100B562A0()
{
  return sub_100B632C0();
}

uint64_t sub_100B562CC()
{
  uint64_t v1 = (int *)(type metadata accessor for OwnedDeviceKeyRecord() - 8);
  uint64_t v2 = *(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v3 = (v2 + 24) & ~v2;
  uint64_t v4 = *(void *)(*(void *)v1 + 64);
  uint64_t v13 = v2 | 7;
  unint64_t v5 = (v2 + ((v4 + v3 + 7) & 0xFFFFFFFFFFFFFFF8) + 8) & ~v2;
  uint64_t v6 = v5 + v4;
  swift_release();
  uint64_t v7 = v0 + v3;
  sub_10001CFB8(*(void *)(v0 + v3), *(void *)(v0 + v3 + 8));
  uint64_t v8 = v0 + v3 + v1[7];
  uint64_t v9 = type metadata accessor for UUID();
  uint64_t v10 = *(void (**)(uint64_t, uint64_t))(*(void *)(v9 - 8) + 8);
  v10(v8, v9);
  v10(v7 + v1[8], v9);
  sub_10001CFB8(*(void *)(v7 + v1[9]), *(void *)(v7 + v1[9] + 8));
  sub_10001CFB8(*(void *)(v7 + v1[10]), *(void *)(v7 + v1[10] + 8));
  swift_release();
  uint64_t v11 = v0 + v5;
  sub_10001CFB8(*(void *)(v0 + v5), *(void *)(v0 + v5 + 8));
  v10(v0 + v5 + v1[7], v9);
  v10(v0 + v5 + v1[8], v9);
  sub_10001CFB8(*(void *)(v11 + v1[9]), *(void *)(v11 + v1[9] + 8));
  sub_10001CFB8(*(void *)(v11 + v1[10]), *(void *)(v11 + v1[10] + 8));

  return _swift_deallocObject(v0, v6, v13);
}

void sub_100B5649C(uint64_t a1)
{
  uint64_t v3 = *(void *)(type metadata accessor for OwnedDeviceKeyRecord() - 8);
  uint64_t v4 = *(unsigned __int8 *)(v3 + 80);
  uint64_t v5 = (v4 + 24) & ~v4;
  unint64_t v6 = (*(void *)(v3 + 64) + v5 + 7) & 0xFFFFFFFFFFFFFFF8;
  sub_100AC2F64(a1, *(void *)(v1 + 16), v1 + v5, *(void *)(v1 + v6), v1 + ((v4 + v6 + 8) & ~v4), (uint64_t (*)(void))type metadata accessor for OwnedDeviceKeyRecord, &qword_1016592B0, (uint64_t (*)(void))type metadata accessor for OwnedDeviceKeyRecord, (uint64_t)sub_100B64378, (uint64_t (*)(void))type metadata accessor for OwnedDeviceKeyRecord);
}

uint64_t sub_100B565B4()
{
  return sub_100B63B6C((void (*)(void))&_swift_release, 40);
}

uint64_t sub_100B565D0(uint64_t a1)
{
  return sub_100BA07E8(a1, v1[2], v1[3], v1[4]);
}

uint64_t sub_100B565DC()
{
  return sub_100B63B00((void (*)(void))&_swift_release);
}

uint64_t sub_100B565F8()
{
  return sub_100B63B6C((void (*)(void))&_swift_release, 40);
}

uint64_t sub_100B56614()
{
  uint64_t v1 = (int *)type metadata accessor for OwnedBeaconRecord();
  uint64_t v2 = *(unsigned __int8 *)(*((void *)v1 - 1) + 80);
  uint64_t v3 = (v2 + 24) & ~v2;
  uint64_t v19 = *(void *)(*((void *)v1 - 1) + 64);
  swift_release();
  uint64_t v4 = v0 + v3;
  sub_10001CFB8(*(void *)(v0 + v3), *(void *)(v0 + v3 + 8));
  uint64_t v5 = v0 + v3 + v1[5];
  uint64_t v6 = type metadata accessor for UUID();
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = *(void (**)(uint64_t, uint64_t))(v7 + 8);
  v8(v5, v6);
  uint64_t v9 = v0 + v3 + v1[6];
  type metadata accessor for StableIdentifier();
  switch(swift_getEnumCaseMultiPayload())
  {
    case 0u:
    case 4u:
      goto LABEL_6;
    case 1u:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      goto LABEL_6;
    case 2u:
      v8(v9, v6);
      uint64_t v18 = (v2 + 24) & ~v2;
      sub_10000588C(&qword_1016555E0);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      goto LABEL_5;
    case 3u:
      v8(v9, v6);
      uint64_t v18 = (v2 + 24) & ~v2;
      sub_10000588C((uint64_t *)&unk_1016565E0);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
LABEL_5:
      uint64_t v3 = v18;
LABEL_6:
      swift_bridgeObjectRelease();
      break;
    default:
      break;
  }
  uint64_t v10 = v4 + v1[7];
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(v10, 1, v6)) {
    v8(v10, v6);
  }
  uint64_t v11 = v4 + v1[8];
  uint64_t v12 = type metadata accessor for Date();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v12 - 8) + 8))(v11, v12);
  sub_10001CFB8(*(void *)(v4 + v1[9]), *(void *)(v4 + v1[9] + 8));
  uint64_t v13 = (uint64_t *)(v4 + v1[10]);
  unint64_t v14 = v13[1];
  if (v14 >> 60 != 15) {
    sub_10001CFB8(*v13, v14);
  }
  uint64_t v15 = (uint64_t *)(v4 + v1[11]);
  unint64_t v16 = v15[1];
  if (v16 >> 60 != 15) {
    sub_10001CFB8(*v15, v16);
  }
  sub_10001CFB8(*(void *)(v4 + v1[12]), *(void *)(v4 + v1[12] + 8));
  sub_10001CFB8(*(void *)(v4 + v1[13]), *(void *)(v4 + v1[13] + 8));
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();

  return _swift_deallocObject(v0, ((v19 + v3 + 7) & 0xFFFFFFFFFFFFFFF8) + 8, v2 | 7);
}

uint64_t sub_100B569AC(uint64_t *a1, uint64_t a2)
{
  return sub_100B569D8(a1, a2, (uint64_t (*)(void))type metadata accessor for OwnedBeaconRecord, (uint64_t (*)(uint64_t, uint64_t, uint64_t, unint64_t, uint64_t))sub_100AC9D70);
}

uint64_t sub_100B569D8(uint64_t *a1, uint64_t a2, uint64_t (*a3)(void), uint64_t (*a4)(uint64_t, uint64_t, uint64_t, unint64_t, uint64_t))
{
  uint64_t v7 = *(void *)(a3(0) - 8);
  unint64_t v8 = (*(unsigned __int8 *)(v7 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80);
  uint64_t v9 = *(void *)(v4 + 16);
  uint64_t v10 = *(void *)(v4 + ((*(void *)(v7 + 64) + v8 + 7) & 0xFFFFFFFFFFFFFFF8));
  uint64_t v11 = *a1;

  return a4(v11, a2, v9, v4 + v8, v10);
}

uint64_t sub_100B56AA4(uint64_t *a1)
{
  return sub_100B62DA8(a1, (uint64_t (*)(void))type metadata accessor for LostModeRecord, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))sub_1003922E0);
}

uint64_t sub_100B56AD4(uint64_t a1)
{
  return sub_100B62FE0(a1, (uint64_t (*)(void))type metadata accessor for LostModeRecord, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))sub_100394068);
}

uint64_t sub_100B56B00()
{
  return sub_100B612CC((void (*)(void))&_swift_release, 32);
}

void sub_100B56B1C(uint64_t a1)
{
  sub_100098FA4(a1, *(void **)(v1 + 16), *(void *)(v1 + 24));
}

uint64_t sub_100B56B24()
{
  return sub_100B63B00((void (*)(void))&_swift_release);
}

uint64_t sub_100B56B3C()
{
  return sub_100B63B6C((void (*)(void))&_swift_release, 40);
}

uint64_t sub_100B56B58()
{
  swift_errorRelease();

  return _swift_deallocObject(v0, 24, 7);
}

uint64_t sub_100B56B90()
{
  uint64_t v1 = (int *)(type metadata accessor for BeaconNamingRecord() - 8);
  uint64_t v2 = *(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v3 = (v2 + 24) & ~v2;
  uint64_t v4 = v2 | 7;
  unint64_t v5 = (*(void *)(*(void *)v1 + 64) + v3 + 7) & 0xFFFFFFFFFFFFFFF8;

  uint64_t v6 = v0 + v3;
  sub_10001CFB8(*(void *)(v0 + v3), *(void *)(v0 + v3 + 8));
  uint64_t v7 = v0 + v3 + v1[7];
  uint64_t v8 = type metadata accessor for UUID();
  uint64_t v9 = *(void (**)(uint64_t, uint64_t))(*(void *)(v8 - 8) + 8);
  v9(v7, v8);
  v9(v6 + v1[8], v8);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();

  return _swift_deallocObject(v0, v5 + 8, v4);
}

uint64_t sub_100B56CEC(uint64_t a1)
{
  return sub_100B56D18(a1, (uint64_t (*)(void))type metadata accessor for BeaconNamingRecord, (uint64_t (*)(uint64_t, uint64_t, unint64_t, uint64_t))sub_100AF4304);
}

uint64_t sub_100B56D18(uint64_t a1, uint64_t (*a2)(void), uint64_t (*a3)(uint64_t, uint64_t, unint64_t, uint64_t))
{
  uint64_t v5 = *(void *)(a2(0) - 8);
  unint64_t v6 = (*(unsigned __int8 *)(v5 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
  uint64_t v7 = *(void *)(v3 + 16);
  uint64_t v8 = *(void *)(v3 + ((*(void *)(v5 + 64) + v6 + 7) & 0xFFFFFFFFFFFFFFF8));

  return a3(a1, v7, v3 + v6, v8);
}

uint64_t sub_100B56DD0()
{
  uint64_t v1 = (int *)(type metadata accessor for KeyAlignmentRecord() - 8);
  uint64_t v2 = *(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v3 = (v2 + 32) & ~v2;
  uint64_t v4 = *(void *)(*(void *)v1 + 64);
  uint64_t v5 = (int *)(type metadata accessor for KeySyncMetadata() - 8);
  uint64_t v6 = *(unsigned __int8 *)(*(void *)v5 + 80);
  uint64_t v7 = (v3 + v4 + v6) & ~v6;
  uint64_t v8 = *(void *)(*(void *)v5 + 64);
  uint64_t v9 = type metadata accessor for UUID();
  uint64_t v10 = *(void *)(v9 - 8);
  uint64_t v11 = *(unsigned __int8 *)(v10 + 80);
  uint64_t v18 = (v7 + v8 + v11) & ~v11;
  unint64_t v19 = ((*(void *)(v10 + 64) + v18 + 7) & 0xFFFFFFFFFFFFFFF8) + 8;
  uint64_t v20 = v2 | v6 | v11 | 7;

  swift_release();
  uint64_t v12 = v0 + v3;
  sub_10001CFB8(*(void *)(v0 + v3), *(void *)(v0 + v3 + 8));
  uint64_t v13 = *(void (**)(uint64_t, uint64_t))(v10 + 8);
  v13(v12 + v1[7], v9);
  v13(v12 + v1[8], v9);
  uint64_t v14 = v12 + v1[10];
  uint64_t v15 = type metadata accessor for Date();
  unint64_t v16 = *(void (**)(uint64_t, uint64_t))(*(void *)(v15 - 8) + 8);
  v16(v14, v15);
  v13(v0 + v7, v9);
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v0 + v7 + v5[8]);
  v16(v0 + v7 + v5[9], v15);
  v13(v0 + v18, v9);
  swift_release();

  return _swift_deallocObject(v0, v19, v20);
}

void sub_100B5705C(uint64_t a1)
{
  uint64_t v3 = *(void *)(type metadata accessor for KeyAlignmentRecord() - 8);
  unint64_t v4 = (*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  uint64_t v5 = *(void *)(v3 + 64);
  uint64_t v6 = *(void *)(type metadata accessor for KeySyncMetadata() - 8);
  unint64_t v7 = (v4 + v5 + *(unsigned __int8 *)(v6 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80);
  uint64_t v8 = *(void *)(v6 + 64);
  uint64_t v9 = *(void *)(type metadata accessor for UUID() - 8);
  unint64_t v10 = (v7 + v8 + *(unsigned __int8 *)(v9 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80);
  uint64_t v11 = *(NSObject **)(v1 + 16);
  uint64_t v12 = *(void *)(v1 + 24);
  uint64_t v13 = *(void *)(v1 + ((*(void *)(v9 + 64) + v10 + 7) & 0xFFFFFFFFFFFFFFF8));

  sub_100AF4B08(a1, v11, v12, v1 + v4, v1 + v7, v1 + v10, v13);
}

uint64_t sub_100B571C4()
{
  uint64_t v1 = type metadata accessor for UUID();
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v21 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v3 = (v21 + 40) & ~v21;
  uint64_t v4 = *(void *)(v2 + 64);
  uint64_t v5 = (int *)type metadata accessor for OwnedBeaconRecord();
  uint64_t v6 = *(unsigned __int8 *)(*((void *)v5 - 1) + 80);
  uint64_t v7 = (v3 + v4 + v6) & ~v6;
  uint64_t v20 = *(void *)(*((void *)v5 - 1) + 64);
  swift_release();
  swift_release();
  uint64_t v8 = *(void (**)(uint64_t, uint64_t))(v2 + 8);
  v8(v0 + v3, v1);
  uint64_t v9 = v0 + v7;
  sub_10001CFB8(*(void *)(v0 + v7), *(void *)(v0 + v7 + 8));
  v8(v0 + v7 + v5[5], v1);
  uint64_t v10 = v0 + v7 + v5[6];
  type metadata accessor for StableIdentifier();
  switch(swift_getEnumCaseMultiPayload())
  {
    case 0u:
    case 4u:
      goto LABEL_6;
    case 1u:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      goto LABEL_6;
    case 2u:
      v8(v10, v1);
      uint64_t v19 = v7;
      sub_10000588C(&qword_1016555E0);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      goto LABEL_5;
    case 3u:
      v8(v10, v1);
      uint64_t v19 = v7;
      sub_10000588C((uint64_t *)&unk_1016565E0);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
LABEL_5:
      uint64_t v7 = v19;
LABEL_6:
      swift_bridgeObjectRelease();
      break;
    default:
      break;
  }
  uint64_t v11 = v9 + v5[7];
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v2 + 48))(v11, 1, v1)) {
    v8(v11, v1);
  }
  uint64_t v12 = v9 + v5[8];
  uint64_t v13 = type metadata accessor for Date();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v13 - 8) + 8))(v12, v13);
  sub_10001CFB8(*(void *)(v9 + v5[9]), *(void *)(v9 + v5[9] + 8));
  uint64_t v14 = (uint64_t *)(v9 + v5[10]);
  unint64_t v15 = v14[1];
  if (v15 >> 60 != 15) {
    sub_10001CFB8(*v14, v15);
  }
  unint64_t v16 = (uint64_t *)(v9 + v5[11]);
  unint64_t v17 = v16[1];
  if (v17 >> 60 != 15) {
    sub_10001CFB8(*v16, v17);
  }
  sub_10001CFB8(*(void *)(v9 + v5[12]), *(void *)(v9 + v5[12] + 8));
  sub_10001CFB8(*(void *)(v9 + v5[13]), *(void *)(v9 + v5[13] + 8));
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return _swift_deallocObject(v0, v7 + v20, v21 | v6 | 7);
}

uint64_t sub_100B57594()
{
  uint64_t v1 = *(void *)(type metadata accessor for UUID() - 8);
  unint64_t v2 = (*(unsigned __int8 *)(v1 + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80);
  uint64_t v3 = *(void *)(v1 + 64);
  uint64_t v4 = *(void *)(type metadata accessor for OwnedBeaconRecord() - 8);
  uint64_t v5 = v0[2];
  uint64_t v6 = (void (*)(void *, char *))v0[3];
  uint64_t v7 = v0[4];
  uint64_t v8 = (uint64_t)v0 + ((v2 + v3 + *(unsigned __int8 *)(v4 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80));

  return sub_100AF6870(v5, v6, v7, (uint64_t)v0 + v2, v8);
}

void sub_100B5766C(uint64_t a1)
{
  sub_100AF45DC(a1, *(NSObject **)(v1 + 16), *(void *)(v1 + 24));
}

uint64_t sub_100B57674()
{
  return sub_100B63B00((void (*)(void))&_swift_errorRelease);
}

uint64_t sub_100B5768C()
{
  return sub_100B63B00((void (*)(void))&_swift_errorRelease);
}

uint64_t sub_100B576A4()
{
  return sub_100AF49A4(*(void (**)(void *, char *))(v0 + 16), *(void *)(v0 + 24), *(void *)(v0 + 32));
}

uint64_t sub_100B576C4()
{
  return sub_100AF4824(*(void (**)(uint64_t *, char *))(v0 + 16));
}

uint64_t sub_100B576E0(uint64_t a1)
{
  return sub_100ABFEB0(a1, v1[2], v1[3], v1[4]);
}

uint64_t sub_100B57700(uint64_t a1)
{
  return sub_100AC5484(a1, *(void (**)(void *))(v1 + 16), *(void *)(v1 + 24), (uint64_t *)&unk_101656900, (uint64_t)"Save failed: %@", 15);
}

uint64_t sub_100B57734(uint64_t *a1)
{
  return sub_100B57760(a1, (uint64_t (*)(void))type metadata accessor for OwnedBeaconRecord, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))sub_100AC5A08);
}

uint64_t sub_100B57760(uint64_t *a1, uint64_t (*a2)(void), uint64_t (*a3)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))
{
  uint64_t v5 = *(void *)(a2(0) - 8);
  unint64_t v6 = (*(unsigned __int8 *)(v5 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
  uint64_t v7 = *(void *)(v3 + 16);
  uint64_t v8 = v3 + v6;
  uint64_t v9 = (uint64_t *)(v3 + ((*(void *)(v5 + 64) + v6 + 7) & 0xFFFFFFFFFFFFFFF8));
  uint64_t v10 = *v9;
  uint64_t v11 = v9[1];
  uint64_t v12 = *a1;

  return a3(v12, v7, v8, v10, v11);
}

uint64_t sub_100B5781C()
{
  return sub_100AC7C58();
}

uint64_t sub_100B57864()
{
  uint64_t v1 = (int *)type metadata accessor for OwnedBeaconRecord();
  uint64_t v34 = *(unsigned __int8 *)(*((void *)v1 - 1) + 80);
  uint64_t v2 = (v34 + 24) & ~v34;
  uint64_t v31 = *(void *)(*((void *)v1 - 1) + 64);
  unint64_t v3 = (v31 + v2 + 7) & 0xFFFFFFFFFFFFFFF8;
  swift_release();
  uint64_t v32 = v0;
  uint64_t v4 = v0 + v2;
  sub_10001CFB8(*(void *)(v0 + v2), *(void *)(v0 + v2 + 8));
  uint64_t v5 = v0 + v2 + v1[5];
  uint64_t v6 = type metadata accessor for UUID();
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v33 = *(void (**)(uint64_t, uint64_t))(v7 + 8);
  v33(v5, v6);
  uint64_t v8 = v4 + v1[6];
  type metadata accessor for StableIdentifier();
  switch(swift_getEnumCaseMultiPayload())
  {
    case 0u:
    case 4u:
      goto LABEL_6;
    case 1u:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      goto LABEL_6;
    case 2u:
      v33(v8, v6);
      unint64_t v9 = v3;
      sub_10000588C(&qword_1016555E0);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      goto LABEL_5;
    case 3u:
      v33(v8, v6);
      unint64_t v9 = v3;
      sub_10000588C((uint64_t *)&unk_1016565E0);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
LABEL_5:
      unint64_t v3 = v9;
LABEL_6:
      swift_bridgeObjectRelease();
      break;
    default:
      break;
  }
  uint64_t v10 = v4 + v1[7];
  uint64_t v30 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
  if (!v30(v10, 1, v6)) {
    v33(v10, v6);
  }
  uint64_t v11 = v34 + v3 + 8;
  uint64_t v12 = v4 + v1[8];
  uint64_t v13 = type metadata accessor for Date();
  uint64_t v14 = (void (**)(uint64_t, uint64_t))(*(void *)(v13 - 8) + 8);
  unint64_t v29 = *v14;
  (*v14)(v12, v13);
  sub_10001CFB8(*(void *)(v4 + v1[9]), *(void *)(v4 + v1[9] + 8));
  unint64_t v15 = (uint64_t *)(v4 + v1[10]);
  unint64_t v16 = v15[1];
  if (v16 >> 60 != 15) {
    sub_10001CFB8(*v15, v16);
  }
  uint64_t v17 = v11 & ~v34;
  uint64_t v18 = (uint64_t *)(v4 + v1[11]);
  unint64_t v19 = v18[1];
  if (v19 >> 60 != 15) {
    sub_10001CFB8(*v18, v19);
  }
  sub_10001CFB8(*(void *)(v4 + v1[12]), *(void *)(v4 + v1[12] + 8));
  sub_10001CFB8(*(void *)(v4 + v1[13]), *(void *)(v4 + v1[13] + 8));
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  uint64_t v20 = v11 & ~v34;
  uint64_t v21 = v32 + v17;
  sub_10001CFB8(*(void *)v21, *(void *)(v21 + 8));
  v33(v32 + v17 + v1[5], v6);
  uint64_t v22 = v32 + v17 + v1[6];
  switch(swift_getEnumCaseMultiPayload())
  {
    case 0u:
    case 4u:
      goto LABEL_17;
    case 1u:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      goto LABEL_17;
    case 2u:
      v33(v22, v6);
      sub_10000588C(&qword_1016555E0);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      goto LABEL_17;
    case 3u:
      v33(v22, v6);
      sub_10000588C((uint64_t *)&unk_1016565E0);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
LABEL_17:
      swift_bridgeObjectRelease();
      break;
    default:
      break;
  }
  uint64_t v23 = v21 + v1[7];
  if (!v30(v23, 1, v6)) {
    v33(v23, v6);
  }
  v29(v21 + v1[8], v13);
  sub_10001CFB8(*(void *)(v21 + v1[9]), *(void *)(v21 + v1[9] + 8));
  unint64_t v24 = (uint64_t *)(v21 + v1[10]);
  unint64_t v25 = v24[1];
  if (v25 >> 60 != 15) {
    sub_10001CFB8(*v24, v25);
  }
  uint64_t v26 = (uint64_t *)(v21 + v1[11]);
  unint64_t v27 = v26[1];
  if (v27 >> 60 != 15) {
    sub_10001CFB8(*v26, v27);
  }
  sub_10001CFB8(*(void *)(v21 + v1[12]), *(void *)(v21 + v1[12] + 8));
  sub_10001CFB8(*(void *)(v21 + v1[13]), *(void *)(v21 + v1[13] + 8));
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return _swift_deallocObject(v32, v20 + v31, v34 | 7);
}

uint64_t sub_100B57E8C(uint64_t a1)
{
  return sub_100B57EB8(a1, (uint64_t (*)(void))type metadata accessor for OwnedBeaconRecord, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, unint64_t))sub_100AC1608);
}

uint64_t sub_100B57EB8(uint64_t a1, uint64_t (*a2)(void), uint64_t (*a3)(uint64_t, uint64_t, uint64_t, uint64_t, unint64_t))
{
  uint64_t v5 = *(void *)(a2(0) - 8);
  uint64_t v6 = *(unsigned __int8 *)(v5 + 80);
  uint64_t v7 = (v6 + 24) & ~v6;
  unint64_t v8 = (*(void *)(v5 + 64) + v7 + 7) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v9 = *(void *)(v3 + 16);
  uint64_t v10 = *(void *)(v3 + v8);

  return a3(a1, v9, v3 + v7, v10, v3 + ((v6 + v8 + 8) & ~v6));
}

uint64_t sub_100B57F80(uint64_t a1)
{
  return sub_100AF5060(a1, v1[2], v1[3], v1[4]);
}

void sub_100B57FA0(uint64_t a1)
{
  sub_100AF5A84(a1, *(void *)(v1 + 16), *(void *)(v1 + 24));
}

uint64_t sub_100B57FBC()
{
  uint64_t v1 = type metadata accessor for UUID();
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 24) & ~v3;
  uint64_t v5 = *(void *)(v2 + 64);
  uint64_t v6 = (int *)(type metadata accessor for OwnedDeviceKeyRecord() - 8);
  uint64_t v7 = *(unsigned __int8 *)(*(void *)v6 + 80);
  uint64_t v8 = (v4 + v5 + v7) & ~v7;
  uint64_t v9 = v8 + *(void *)(*(void *)v6 + 64);
  uint64_t v10 = v3 | v7 | 7;
  swift_release();
  uint64_t v11 = v0 + v4;
  uint64_t v12 = *(void (**)(uint64_t, uint64_t))(v2 + 8);
  v12(v11, v1);
  uint64_t v13 = v0 + v8;
  sub_10001CFB8(*(void *)v13, *(void *)(v13 + 8));
  v12(v13 + v6[7], v1);
  v12(v13 + v6[8], v1);
  sub_10001CFB8(*(void *)(v13 + v6[9]), *(void *)(v13 + v6[9] + 8));
  sub_10001CFB8(*(void *)(v13 + v6[10]), *(void *)(v13 + v6[10] + 8));

  return _swift_deallocObject(v0, v9, v10);
}

void sub_100B5814C(uint64_t a1)
{
  uint64_t v3 = *(void *)(type metadata accessor for UUID() - 8);
  unint64_t v4 = (*(unsigned __int8 *)(v3 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  uint64_t v5 = *(void *)(v3 + 64);
  uint64_t v6 = *(void *)(type metadata accessor for OwnedDeviceKeyRecord() - 8);
  uint64_t v7 = *(void *)(v1 + 16);
  uint64_t v8 = v1 + ((v4 + v5 + *(unsigned __int8 *)(v6 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80));

  sub_100AF6048(a1, v7, (v1 + v4), v8);
}

uint64_t sub_100B58224()
{
  uint64_t v1 = (int *)(type metadata accessor for KeyAlignmentRecord() - 8);
  uint64_t v2 = *(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v3 = (v2 + 24) & ~v2;
  uint64_t v4 = v3 + *(void *)(*(void *)v1 + 64);
  uint64_t v5 = v2 | 7;
  swift_release();
  uint64_t v6 = v0 + v3;
  sub_10001CFB8(*(void *)(v0 + v3), *(void *)(v0 + v3 + 8));
  uint64_t v7 = v0 + v3 + v1[7];
  uint64_t v8 = type metadata accessor for UUID();
  uint64_t v9 = *(void (**)(uint64_t, uint64_t))(*(void *)(v8 - 8) + 8);
  v9(v7, v8);
  v9(v6 + v1[8], v8);
  uint64_t v10 = v6 + v1[10];
  uint64_t v11 = type metadata accessor for Date();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v11 - 8) + 8))(v10, v11);

  return _swift_deallocObject(v0, v4, v5);
}

uint64_t sub_100B5838C(uint64_t a1)
{
  type metadata accessor for KeyAlignmentRecord();

  return sub_100AF5354(a1);
}

uint64_t sub_100B58400()
{
  uint64_t v1 = (int *)(type metadata accessor for KeySyncMetadata() - 8);
  uint64_t v2 = *(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v3 = (v2 + 32) & ~v2;
  uint64_t v4 = v3 + *(void *)(*(void *)v1 + 64);
  uint64_t v5 = v2 | 7;
  swift_unknownObjectRelease();
  uint64_t v6 = v0 + v3;
  uint64_t v7 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v7 - 8) + 8))(v6, v7);
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v6 + v1[8]);
  uint64_t v8 = v6 + v1[9];
  uint64_t v9 = type metadata accessor for Date();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v9 - 8) + 8))(v8, v9);

  return _swift_deallocObject(v0, v4, v5);
}

uint64_t sub_100B58538()
{
  uint64_t v2 = *(void *)(type metadata accessor for KeySyncMetadata() - 8);
  uint64_t v3 = v0 + ((*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80));
  uint64_t v4 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v4;
  *uint64_t v4 = v1;
  v4[1] = sub_10001D2E4;
  v4[15] = v3;
  return _swift_task_switch(sub_100AF55F8, 0, 0);
}

uint64_t sub_100B5861C(uint64_t a1)
{
  return sub_100AC1370(a1, v1[2], v1[3], v1[4]);
}

uint64_t sub_100B5863C(uint64_t a1)
{
  return sub_100AC5484(a1, *(void (**)(void *))(v1 + 16), *(void *)(v1 + 24), &qword_10164B328, (uint64_t)"Save failed: %@", 15);
}

uint64_t sub_100B5866C()
{
  uint64_t v1 = (int *)(type metadata accessor for KeyAlignmentRecord() - 8);
  uint64_t v2 = *(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v3 = (v2 + 24) & ~v2;
  uint64_t v4 = v2 | 7;
  unint64_t v5 = ((*(void *)(*(void *)v1 + 64) + v3 + 7) & 0xFFFFFFFFFFFFFFF8) + 16;
  swift_release();
  uint64_t v6 = v0 + v3;
  sub_10001CFB8(*(void *)(v0 + v3), *(void *)(v0 + v3 + 8));
  uint64_t v7 = v0 + v3 + v1[7];
  uint64_t v8 = type metadata accessor for UUID();
  uint64_t v9 = *(void (**)(uint64_t, uint64_t))(*(void *)(v8 - 8) + 8);
  v9(v7, v8);
  v9(v6 + v1[8], v8);
  uint64_t v10 = v6 + v1[10];
  uint64_t v11 = type metadata accessor for Date();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v11 - 8) + 8))(v10, v11);
  swift_release();

  return _swift_deallocObject(v0, v5, v4);
}

uint64_t sub_100B587EC(uint64_t *a1)
{
  return sub_100B57760(a1, (uint64_t (*)(void))type metadata accessor for KeyAlignmentRecord, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))sub_100AC7888);
}

uint64_t sub_100B58818()
{
  return sub_100B632C0();
}

uint64_t sub_100B58844()
{
  uint64_t v1 = (int *)(type metadata accessor for KeyAlignmentRecord() - 8);
  uint64_t v2 = *(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v3 = (v2 + 24) & ~v2;
  uint64_t v4 = *(void *)(*(void *)v1 + 64);
  unint64_t v12 = (v2 + ((v4 + v3 + 7) & 0xFFFFFFFFFFFFFFF8) + 8) & ~v2;
  uint64_t v13 = v12 + v4;
  uint64_t v14 = v2 | 7;
  swift_release();
  sub_10001CFB8(*(void *)(v0 + v3), *(void *)(v0 + v3 + 8));
  uint64_t v5 = v0 + v3 + v1[7];
  uint64_t v6 = type metadata accessor for UUID();
  uint64_t v7 = *(void (**)(uint64_t, uint64_t))(*(void *)(v6 - 8) + 8);
  v7(v5, v6);
  v7(v0 + v3 + v1[8], v6);
  uint64_t v8 = v0 + v3 + v1[10];
  uint64_t v9 = type metadata accessor for Date();
  uint64_t v10 = *(void (**)(uint64_t, uint64_t))(*(void *)(v9 - 8) + 8);
  v10(v8, v9);
  swift_release();
  sub_10001CFB8(*(void *)(v0 + v12), *(void *)(v0 + v12 + 8));
  v7(v0 + v12 + v1[7], v6);
  v7(v0 + v12 + v1[8], v6);
  v10(v0 + v12 + v1[10], v9);

  return _swift_deallocObject(v0, v13, v14);
}

uint64_t sub_100B58A34(uint64_t a1)
{
  return sub_100B57EB8(a1, (uint64_t (*)(void))type metadata accessor for KeyAlignmentRecord, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, unint64_t))sub_100AC3758);
}

uint64_t sub_100B58A60(uint64_t a1)
{
  return sub_100AC0148(a1, v1[2], v1[3], v1[4]);
}

uint64_t sub_100B58A80(uint64_t a1)
{
  return sub_100AC5484(a1, *(void (**)(void *))(v1 + 16), *(void *)(v1 + 24), &qword_10164B300, (uint64_t)"Save failed: %@", 15);
}

uint64_t sub_100B58AB0()
{
  uint64_t v1 = (int *)(type metadata accessor for BeaconNamingRecord() - 8);
  uint64_t v2 = *(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v3 = (v2 + 24) & ~v2;
  uint64_t v4 = v2 | 7;
  unint64_t v5 = ((*(void *)(*(void *)v1 + 64) + v3 + 7) & 0xFFFFFFFFFFFFFFF8) + 16;
  swift_release();
  uint64_t v6 = v0 + v3;
  sub_10001CFB8(*(void *)(v0 + v3), *(void *)(v0 + v3 + 8));
  uint64_t v7 = v0 + v3 + v1[7];
  uint64_t v8 = type metadata accessor for UUID();
  uint64_t v9 = *(void (**)(uint64_t, uint64_t))(*(void *)(v8 - 8) + 8);
  v9(v7, v8);
  v9(v6 + v1[8], v8);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();

  return _swift_deallocObject(v0, v5, v4);
}

uint64_t sub_100B58C10(uint64_t *a1)
{
  return sub_100B57760(a1, (uint64_t (*)(void))type metadata accessor for BeaconNamingRecord, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))sub_100AC5DD8);
}

uint64_t sub_100B58C3C()
{
  return sub_100AC7C58();
}

uint64_t sub_100B58C84()
{
  uint64_t v1 = (int *)(type metadata accessor for BeaconNamingRecord() - 8);
  uint64_t v2 = *(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v3 = (v2 + 24) & ~v2;
  uint64_t v4 = *(void *)(*(void *)v1 + 64);
  uint64_t v12 = v2 | 7;
  unint64_t v5 = (v2 + ((v4 + v3 + 7) & 0xFFFFFFFFFFFFFFF8) + 8) & ~v2;
  uint64_t v6 = v5 + v4;
  swift_release();
  uint64_t v7 = v0 + v3;
  sub_10001CFB8(*(void *)(v0 + v3), *(void *)(v0 + v3 + 8));
  uint64_t v8 = v0 + v3 + v1[7];
  uint64_t v9 = type metadata accessor for UUID();
  uint64_t v10 = *(void (**)(uint64_t, uint64_t))(*(void *)(v9 - 8) + 8);
  v10(v8, v9);
  v10(v7 + v1[8], v9);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  sub_10001CFB8(*(void *)(v0 + v5), *(void *)(v0 + v5 + 8));
  v10(v0 + v5 + v1[7], v9);
  v10(v0 + v5 + v1[8], v9);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return _swift_deallocObject(v0, v6, v12);
}

uint64_t sub_100B58E54(uint64_t a1)
{
  return sub_100B57EB8(a1, (uint64_t (*)(void))type metadata accessor for BeaconNamingRecord, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, unint64_t))sub_100AC1E7C);
}

uint64_t sub_100B58E80(uint64_t a1)
{
  return sub_100AC0910(a1, v1[2], v1[3], v1[4]);
}

uint64_t sub_100B58EA0(uint64_t a1)
{
  return sub_100AC5484(a1, *(void (**)(void *))(v1 + 16), *(void *)(v1 + 24), &qword_101648068, (uint64_t)"Save failed: %@", 15);
}

uint64_t sub_100B58ED0()
{
  uint64_t v1 = (int *)type metadata accessor for ShareRecord();
  uint64_t v2 = *(unsigned __int8 *)(*((void *)v1 - 1) + 80);
  uint64_t v3 = (v2 + 24) & ~v2;
  uint64_t v13 = *(void *)(*((void *)v1 - 1) + 64);
  swift_release();
  sub_10001CFB8(*(void *)(v0 + v3), *(void *)(v0 + v3 + 8));
  uint64_t v4 = v0 + v3 + v1[5];
  uint64_t v5 = type metadata accessor for UUID();
  uint64_t v6 = *(void (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8);
  v6(v4, v5);
  v6(v0 + v3 + v1[6], v5);
  uint64_t v7 = v0 + v3 + v1[7];
  uint64_t v8 = type metadata accessor for Date();
  uint64_t v9 = *(void *)(v8 - 8);
  uint64_t v10 = *(void (**)(uint64_t, uint64_t))(v9 + 8);
  v10(v7, v8);
  uint64_t v11 = v0 + v3 + v1[8];
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v9 + 48))(v11, 1, v8)) {
    v10(v11, v8);
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();

  return _swift_deallocObject(v0, ((v13 + v3 + 7) & 0xFFFFFFFFFFFFFFF8) + 16, v2 | 7);
}

uint64_t sub_100B590DC(uint64_t *a1)
{
  return sub_100B57760(a1, (uint64_t (*)(void))type metadata accessor for ShareRecord, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))sub_100AC6948);
}

uint64_t sub_100B59108()
{
  return sub_100B632C0();
}

uint64_t sub_100B59134()
{
  uint64_t v1 = v0;
  uint64_t v2 = (int *)type metadata accessor for ShareRecord();
  uint64_t v3 = *(unsigned __int8 *)(*((void *)v2 - 1) + 80);
  uint64_t v4 = (v3 + 24) & ~v3;
  uint64_t v16 = *(void *)(*((void *)v2 - 1) + 64);
  uint64_t v17 = v3;
  unint64_t v15 = (v3 + ((v16 + v4 + 7) & 0xFFFFFFFFFFFFFFF8) + 8) & ~v3;
  swift_release();
  sub_10001CFB8(*(void *)(v1 + v4), *(void *)(v1 + v4 + 8));
  uint64_t v5 = v1 + v4 + v2[5];
  uint64_t v6 = type metadata accessor for UUID();
  uint64_t v7 = *(void (**)(uint64_t, uint64_t))(*(void *)(v6 - 8) + 8);
  v7(v5, v6);
  v7(v1 + v4 + v2[6], v6);
  uint64_t v8 = v1 + v4 + v2[7];
  uint64_t v9 = type metadata accessor for Date();
  uint64_t v10 = *(void *)(v9 - 8);
  uint64_t v18 = *(void (**)(uint64_t, uint64_t))(v10 + 8);
  v18(v8, v9);
  uint64_t v11 = v1 + v4 + v2[8];
  uint64_t v14 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v10 + 48);
  if (!v14(v11, 1, v9)) {
    v18(v11, v9);
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  sub_10001CFB8(*(void *)(v1 + v15), *(void *)(v1 + v15 + 8));
  v7(v1 + v15 + v2[5], v6);
  v7(v1 + v15 + v2[6], v6);
  v18(v1 + v15 + v2[7], v9);
  unint64_t v12 = v1 + v15 + v2[8];
  if (!v14(v12, 1, v9)) {
    v18(v12, v9);
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return _swift_deallocObject(v1, v15 + v16, v17 | 7);
}

void sub_100B59428(uint64_t a1)
{
  uint64_t v3 = *(void *)(type metadata accessor for ShareRecord() - 8);
  uint64_t v4 = *(unsigned __int8 *)(v3 + 80);
  uint64_t v5 = (v4 + 24) & ~v4;
  unint64_t v6 = (*(void *)(v3 + 64) + v5 + 7) & 0xFFFFFFFFFFFFFFF8;
  sub_100AC2F64(a1, *(void *)(v1 + 16), v1 + v5, *(void *)(v1 + v6), v1 + ((v4 + v6 + 8) & ~v4), (uint64_t (*)(void))type metadata accessor for ShareRecord, &qword_101648068, (uint64_t (*)(void))type metadata accessor for ShareRecord, (uint64_t)sub_100B643D8, (uint64_t (*)(void))type metadata accessor for ShareRecord);
}

uint64_t sub_100B59544()
{
  return _swift_deallocObject(v0, 24, 7);
}

uint64_t sub_100B59554(uint64_t a1)
{
  return sub_100681850(a1, *(void *)(v1 + 16));
}

uint64_t sub_100B5955C()
{
  uint64_t v1 = (int *)type metadata accessor for ShareRecord();
  uint64_t v2 = *(unsigned __int8 *)(*((void *)v1 - 1) + 80);
  uint64_t v3 = (v2 + 32) & ~v2;
  uint64_t v13 = *(void *)(*((void *)v1 - 1) + 64);
  swift_release();
  sub_10001CFB8(*(void *)(v0 + v3), *(void *)(v0 + v3 + 8));
  uint64_t v4 = v0 + v3 + v1[5];
  uint64_t v5 = type metadata accessor for UUID();
  unint64_t v6 = *(void (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8);
  v6(v4, v5);
  v6(v0 + v3 + v1[6], v5);
  uint64_t v7 = v0 + v3 + v1[7];
  uint64_t v8 = type metadata accessor for Date();
  uint64_t v9 = *(void *)(v8 - 8);
  uint64_t v10 = *(void (**)(uint64_t, uint64_t))(v9 + 8);
  v10(v7, v8);
  uint64_t v11 = v0 + v3 + v1[8];
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v9 + 48))(v11, 1, v8)) {
    v10(v11, v8);
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return _swift_deallocObject(v0, v3 + v13, v2 | 7);
}

uint64_t sub_100B59750(id *a1)
{
  uint64_t v3 = *(void *)(type metadata accessor for ShareRecord() - 8);
  return sub_100ACAB44(a1, *(void (**)(char *))(v1 + 16), *(void *)(v1 + 24), v1 + ((*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80)), (uint64_t (*)(void))type metadata accessor for ShareRecord, (void (*)(id))sub_1000C3DBC, (void (*)(id *, char *))sub_100A9F094, (uint64_t (*)(void))type metadata accessor for ShareRecord);
}

uint64_t sub_100B59808(uint64_t a1)
{
  return sub_100AC5484(a1, *(void (**)(void *))(v1 + 16), *(void *)(v1 + 24), &qword_101648068, (uint64_t)"Update failed: %@", 17);
}

uint64_t sub_100B59838()
{
  uint64_t v1 = (int *)type metadata accessor for ShareRecord();
  uint64_t v2 = *(unsigned __int8 *)(*((void *)v1 - 1) + 80);
  uint64_t v3 = (v2 + 16) & ~v2;
  uint64_t v13 = *(void *)(*((void *)v1 - 1) + 64);
  sub_10001CFB8(*(void *)(v0 + v3), *(void *)(v0 + v3 + 8));
  uint64_t v4 = v0 + v3 + v1[5];
  uint64_t v5 = type metadata accessor for UUID();
  unint64_t v6 = *(void (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8);
  v6(v4, v5);
  v6(v0 + v3 + v1[6], v5);
  uint64_t v7 = v0 + v3 + v1[7];
  uint64_t v8 = type metadata accessor for Date();
  uint64_t v9 = *(void *)(v8 - 8);
  uint64_t v10 = *(void (**)(uint64_t, uint64_t))(v9 + 8);
  v10(v7, v8);
  uint64_t v11 = v0 + v3 + v1[8];
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v9 + 48))(v11, 1, v8)) {
    v10(v11, v8);
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();

  return _swift_deallocObject(v0, ((((v13 + v3 + 7) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8) + 16, v2 | 7);
}

uint64_t sub_100B59A4C(uint64_t *a1)
{
  return sub_100B62A50(a1, (uint64_t (*)(void))type metadata accessor for ShareRecord, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))sub_100ACBF68);
}

uint64_t sub_100B59A78(uint64_t a1)
{
  return sub_100AC931C(a1, *(void *)(v1 + 16), *(id **)(v1 + 24), *(void *)(v1 + 32));
}

uint64_t sub_100B59A98()
{
  uint64_t v1 = (int *)type metadata accessor for ShareRecord();
  uint64_t v2 = *(unsigned __int8 *)(*((void *)v1 - 1) + 80);
  uint64_t v3 = (v2 + 24) & ~v2;
  uint64_t v13 = *(void *)(*((void *)v1 - 1) + 64);
  swift_release();
  sub_10001CFB8(*(void *)(v0 + v3), *(void *)(v0 + v3 + 8));
  uint64_t v4 = v0 + v3 + v1[5];
  uint64_t v5 = type metadata accessor for UUID();
  unint64_t v6 = *(void (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8);
  v6(v4, v5);
  v6(v0 + v3 + v1[6], v5);
  uint64_t v7 = v0 + v3 + v1[7];
  uint64_t v8 = type metadata accessor for Date();
  uint64_t v9 = *(void *)(v8 - 8);
  uint64_t v10 = *(void (**)(uint64_t, uint64_t))(v9 + 8);
  v10(v7, v8);
  uint64_t v11 = v0 + v3 + v1[8];
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v9 + 48))(v11, 1, v8)) {
    v10(v11, v8);
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();

  return _swift_deallocObject(v0, ((v13 + v3 + 7) & 0xFFFFFFFFFFFFFFF8) + 8, v2 | 7);
}

void sub_100B59CA0(void **a1, uint64_t a2)
{
  uint64_t v5 = *(void *)(type metadata accessor for ShareRecord() - 8);
  unint64_t v6 = (*(unsigned __int8 *)(v5 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
  sub_100ACA458(*a1, a2, *(void *)(v2 + 16), v2 + v6, *(void *)(v2 + ((*(void *)(v5 + 64) + v6 + 7) & 0xFFFFFFFFFFFFFFF8)), (uint64_t (*)(void))type metadata accessor for ShareRecord, (uint64_t (*)(void))sub_1000C3DBC, (uint64_t)sub_100B643D8, (uint64_t (*)(void))type metadata accessor for ShareRecord);
}

uint64_t sub_100B59D9C(uint64_t a1, uint64_t a2)
{
  return sub_100AFE00C(a1, a2, *(void *)(v2 + 16)) & 1;
}

uint64_t sub_100B59DBC()
{
  return sub_100B63B6C((void (*)(void))&_swift_release, 40);
}

void sub_100B59DD8()
{
}

uint64_t sub_100B59DE4()
{
  return _swift_deallocObject(v0, 32, 7);
}

uint64_t sub_100B59DF4()
{
  swift_release();
  swift_release();
  swift_release();

  return _swift_deallocObject(v0, 56, 7);
}

uint64_t sub_100B59E3C()
{
  return sub_100B15DF4(*(void *)(v0 + 16), *(void *)(v0 + 24), *(unsigned __int8 *)(v0 + 32), *(void *)(v0 + 40), *(void *)(v0 + 48));
}

uint64_t sub_100B59E4C()
{
  uint64_t v1 = (int *)type metadata accessor for OwnedBeaconRecord();
  uint64_t v2 = *(unsigned __int8 *)(*((void *)v1 - 1) + 80);
  uint64_t v3 = (v2 + 24) & ~v2;
  uint64_t v19 = *(void *)(*((void *)v1 - 1) + 64);

  uint64_t v4 = v0 + v3;
  sub_10001CFB8(*(void *)(v0 + v3), *(void *)(v0 + v3 + 8));
  uint64_t v5 = v0 + v3 + v1[5];
  uint64_t v6 = type metadata accessor for UUID();
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = *(void (**)(uint64_t, uint64_t))(v7 + 8);
  v8(v5, v6);
  uint64_t v9 = v0 + v3 + v1[6];
  type metadata accessor for StableIdentifier();
  switch(swift_getEnumCaseMultiPayload())
  {
    case 0u:
    case 4u:
      goto LABEL_6;
    case 1u:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      goto LABEL_6;
    case 2u:
      v8(v9, v6);
      uint64_t v18 = (v2 + 24) & ~v2;
      sub_10000588C(&qword_1016555E0);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      goto LABEL_5;
    case 3u:
      v8(v9, v6);
      uint64_t v18 = (v2 + 24) & ~v2;
      sub_10000588C((uint64_t *)&unk_1016565E0);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
LABEL_5:
      uint64_t v3 = v18;
LABEL_6:
      swift_bridgeObjectRelease();
      break;
    default:
      break;
  }
  uint64_t v10 = v4 + v1[7];
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(v10, 1, v6)) {
    v8(v10, v6);
  }
  uint64_t v11 = v4 + v1[8];
  uint64_t v12 = type metadata accessor for Date();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v12 - 8) + 8))(v11, v12);
  sub_10001CFB8(*(void *)(v4 + v1[9]), *(void *)(v4 + v1[9] + 8));
  uint64_t v13 = (uint64_t *)(v4 + v1[10]);
  unint64_t v14 = v13[1];
  if (v14 >> 60 != 15) {
    sub_10001CFB8(*v13, v14);
  }
  unint64_t v15 = (uint64_t *)(v4 + v1[11]);
  unint64_t v16 = v15[1];
  if (v16 >> 60 != 15) {
    sub_10001CFB8(*v15, v16);
  }
  sub_10001CFB8(*(void *)(v4 + v1[12]), *(void *)(v4 + v1[12] + 8));
  sub_10001CFB8(*(void *)(v4 + v1[13]), *(void *)(v4 + v1[13] + 8));
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();

  return _swift_deallocObject(v0, ((v19 + v3 + 7) & 0xFFFFFFFFFFFFFFF8) + 8, v2 | 7);
}

void sub_100B5A1E4(uint64_t a1)
{
  uint64_t v3 = *(void *)(type metadata accessor for OwnedBeaconRecord() - 8);
  unint64_t v4 = (*(unsigned __int8 *)(v3 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  uint64_t v5 = *(NSObject **)(v1 + 16);
  uint64_t v6 = *(void *)(v1 + ((*(void *)(v3 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8));

  sub_100B1A63C(a1, v5, v1 + v4, v6);
}

uint64_t sub_100B5A288()
{
  uint64_t v1 = (int *)type metadata accessor for OwnedBeaconRecord();
  uint64_t v2 = *(unsigned __int8 *)(*((void *)v1 - 1) + 80);
  uint64_t v3 = (v2 + 16) & ~v2;
  uint64_t v19 = *(void *)(*((void *)v1 - 1) + 64);
  uint64_t v4 = v0 + v3;
  sub_10001CFB8(*(void *)(v0 + v3), *(void *)(v0 + v3 + 8));
  uint64_t v5 = v0 + v3 + v1[5];
  uint64_t v6 = type metadata accessor for UUID();
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = *(void (**)(uint64_t, uint64_t))(v7 + 8);
  v8(v5, v6);
  uint64_t v9 = v0 + v3 + v1[6];
  type metadata accessor for StableIdentifier();
  switch(swift_getEnumCaseMultiPayload())
  {
    case 0u:
    case 4u:
      goto LABEL_6;
    case 1u:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      goto LABEL_6;
    case 2u:
      v8(v9, v6);
      uint64_t v18 = (v2 + 16) & ~v2;
      sub_10000588C(&qword_1016555E0);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      goto LABEL_5;
    case 3u:
      v8(v9, v6);
      uint64_t v18 = (v2 + 16) & ~v2;
      sub_10000588C((uint64_t *)&unk_1016565E0);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
LABEL_5:
      uint64_t v3 = v18;
LABEL_6:
      swift_bridgeObjectRelease();
      break;
    default:
      break;
  }
  uint64_t v10 = v4 + v1[7];
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(v10, 1, v6)) {
    v8(v10, v6);
  }
  uint64_t v11 = v4 + v1[8];
  uint64_t v12 = type metadata accessor for Date();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v12 - 8) + 8))(v11, v12);
  sub_10001CFB8(*(void *)(v4 + v1[9]), *(void *)(v4 + v1[9] + 8));
  uint64_t v13 = (uint64_t *)(v4 + v1[10]);
  unint64_t v14 = v13[1];
  if (v14 >> 60 != 15) {
    sub_10001CFB8(*v13, v14);
  }
  unint64_t v15 = (uint64_t *)(v4 + v1[11]);
  unint64_t v16 = v15[1];
  if (v16 >> 60 != 15) {
    sub_10001CFB8(*v15, v16);
  }
  sub_10001CFB8(*(void *)(v4 + v1[12]), *(void *)(v4 + v1[12] + 8));
  sub_10001CFB8(*(void *)(v4 + v1[13]), *(void *)(v4 + v1[13] + 8));
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();

  return _swift_deallocObject(v0, ((((v19 + v3 + 7) & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8) + 10, v2 | 7);
}

uint64_t sub_100B5A62C()
{
  swift_release();
  swift_release();
  swift_release();

  return _swift_deallocObject(v0, 48, 7);
}

uint64_t sub_100B5A674()
{
  return sub_100B1AEE0(*(void *)(v0 + 16), *(void *)(v0 + 24), *(void (**)(void *, void))(v0 + 32));
}

uint64_t sub_100B5A680(uint64_t a1)
{
  return sub_100ABFC18(a1, v1[2], v1[3], v1[4]);
}

uint64_t sub_100B5A6A0(uint64_t a1)
{
  return sub_100AC5484(a1, *(void (**)(void *))(v1 + 16), *(void *)(v1 + 24), &qword_10163C650, (uint64_t)"Save failed: %@", 15);
}

uint64_t sub_100B5A6D0()
{
  uint64_t v1 = (int *)(type metadata accessor for OwnedBeaconGroup(0) - 8);
  uint64_t v2 = *(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v3 = (v2 + 24) & ~v2;
  uint64_t v4 = v2 | 7;
  unint64_t v5 = ((*(void *)(*(void *)v1 + 64) + v3 + 7) & 0xFFFFFFFFFFFFFFF8) + 16;
  swift_release();
  uint64_t v6 = v0 + v3;
  sub_10001CFB8(*(void *)(v0 + v3), *(void *)(v0 + v3 + 8));
  uint64_t v7 = v0 + v3 + v1[8];
  uint64_t v8 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v8 - 8) + 8))(v7, v8);
  uint64_t v9 = v6 + v1[9];
  uint64_t v10 = type metadata accessor for MACAddress();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v10 - 8) + 8))(v9, v10);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();

  return _swift_deallocObject(v0, v5, v4);
}

uint64_t sub_100B5A848(uint64_t *a1)
{
  return sub_100B57760(a1, type metadata accessor for OwnedBeaconGroup, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))sub_100AC5638);
}

uint64_t sub_100B5A874()
{
  return sub_100B632C0();
}

uint64_t sub_100B5A8A0()
{
  uint64_t v1 = (int *)(type metadata accessor for OwnedBeaconGroup(0) - 8);
  uint64_t v2 = *(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v3 = (v2 + 24) & ~v2;
  uint64_t v4 = *(void *)(*(void *)v1 + 64);
  unint64_t v12 = (v2 + ((v4 + v3 + 7) & 0xFFFFFFFFFFFFFFF8) + 8) & ~v2;
  uint64_t v13 = v12 + v4;
  uint64_t v14 = v2 | 7;
  swift_release();
  sub_10001CFB8(*(void *)(v0 + v3), *(void *)(v0 + v3 + 8));
  uint64_t v5 = v0 + v3 + v1[8];
  uint64_t v6 = type metadata accessor for UUID();
  uint64_t v7 = *(void (**)(uint64_t, uint64_t))(*(void *)(v6 - 8) + 8);
  v7(v5, v6);
  uint64_t v8 = v0 + v3 + v1[9];
  uint64_t v9 = type metadata accessor for MACAddress();
  uint64_t v10 = *(void (**)(uint64_t, uint64_t))(*(void *)(v9 - 8) + 8);
  v10(v8, v9);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  sub_10001CFB8(*(void *)(v0 + v12), *(void *)(v0 + v12 + 8));
  v7(v0 + v12 + v1[8], v6);
  v10(v0 + v12 + v1[9], v9);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return _swift_deallocObject(v0, v13, v14);
}

void sub_100B5AAA0(uint64_t a1)
{
  uint64_t v3 = *(void *)(type metadata accessor for OwnedBeaconGroup(0) - 8);
  uint64_t v4 = *(unsigned __int8 *)(v3 + 80);
  uint64_t v5 = (v4 + 24) & ~v4;
  unint64_t v6 = (*(void *)(v3 + 64) + v5 + 7) & 0xFFFFFFFFFFFFFFF8;
  sub_100AC2F64(a1, *(void *)(v1 + 16), v1 + v5, *(void *)(v1 + v6), v1 + ((v4 + v6 + 8) & ~v4), type metadata accessor for OwnedBeaconGroup, &qword_10163C650, type metadata accessor for OwnedBeaconGroup, (uint64_t)sub_100B643F0, type metadata accessor for OwnedBeaconGroup);
}

void sub_100B5ABBC(uint64_t a1)
{
  sub_10068E440(a1, *(NSObject **)(v1 + 16), *(void *)(v1 + 24));
}

uint64_t sub_100B5ABC4()
{
  uint64_t v1 = (int *)(type metadata accessor for KeyAlignmentRecord() - 8);
  uint64_t v2 = *(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v3 = (v2 + 24) & ~v2;
  uint64_t v4 = v2 | 7;
  unint64_t v5 = ((*(void *)(*(void *)v1 + 64) + v3 + 7) & 0xFFFFFFFFFFFFFFF8) + 8;
  swift_release();
  uint64_t v6 = v0 + v3;
  sub_10001CFB8(*(void *)(v0 + v3), *(void *)(v0 + v3 + 8));
  uint64_t v7 = v0 + v3 + v1[7];
  uint64_t v8 = type metadata accessor for UUID();
  uint64_t v9 = *(void (**)(uint64_t, uint64_t))(*(void *)(v8 - 8) + 8);
  v9(v7, v8);
  v9(v6 + v1[8], v8);
  uint64_t v10 = v6 + v1[10];
  uint64_t v11 = type metadata accessor for Date();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v11 - 8) + 8))(v10, v11);
  swift_release();

  return _swift_deallocObject(v0, v5, v4);
}

void sub_100B5AD40(void **a1, uint64_t a2)
{
  uint64_t v5 = *(void *)(type metadata accessor for KeyAlignmentRecord() - 8);
  unint64_t v6 = (*(unsigned __int8 *)(v5 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
  sub_100ACA458(*a1, a2, *(void *)(v2 + 16), v2 + v6, *(void *)(v2 + ((*(void *)(v5 + 64) + v6 + 7) & 0xFFFFFFFFFFFFFFF8)), (uint64_t (*)(void))type metadata accessor for KeyAlignmentRecord, (uint64_t (*)(void))sub_1000BFAD8, (uint64_t)sub_100B643A8, (uint64_t (*)(void))type metadata accessor for KeyAlignmentRecord);
}

uint64_t sub_100B5AE3C()
{
  uint64_t v1 = (int *)(type metadata accessor for BeaconNamingRecord() - 8);
  uint64_t v2 = *(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v3 = (v2 + 24) & ~v2;
  uint64_t v4 = v2 | 7;
  unint64_t v5 = ((*(void *)(*(void *)v1 + 64) + v3 + 7) & 0xFFFFFFFFFFFFFFF8) + 8;
  swift_release();
  uint64_t v6 = v0 + v3;
  sub_10001CFB8(*(void *)(v0 + v3), *(void *)(v0 + v3 + 8));
  uint64_t v7 = v0 + v3 + v1[7];
  uint64_t v8 = type metadata accessor for UUID();
  uint64_t v9 = *(void (**)(uint64_t, uint64_t))(*(void *)(v8 - 8) + 8);
  v9(v7, v8);
  v9(v6 + v1[8], v8);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();

  return _swift_deallocObject(v0, v5, v4);
}

uint64_t sub_100B5AF98(uint64_t *a1, uint64_t a2)
{
  return sub_100B569D8(a1, a2, (uint64_t (*)(void))type metadata accessor for BeaconNamingRecord, (uint64_t (*)(uint64_t, uint64_t, uint64_t, unint64_t, uint64_t))sub_100ACA0E4);
}

uint64_t sub_100B5AFC4()
{
  _Block_release(*(const void **)(v0 + 16));

  return _swift_deallocObject(v0, 24, 7);
}

uint64_t sub_100B5AFFC()
{
  return sub_100B63B00((void (*)(void))&_swift_release);
}

uint64_t sub_100B5B014(uint64_t a1)
{
  return sub_10067E10C(a1, *(void (**)(uint64_t))(v1 + 16));
}

uint64_t sub_100B5B020(uint64_t a1)
{
  return sub_10067B0C8(a1, *(id *)(v1 + 16));
}

uint64_t sub_100B5B02C(id *a1)
{
  uint64_t v3 = *(void *)(type metadata accessor for BeaconNamingRecord() - 8);
  return sub_100ACAB44(a1, *(void (**)(char *))(v1 + 16), *(void *)(v1 + 24), v1 + ((*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80)), (uint64_t (*)(void))type metadata accessor for BeaconNamingRecord, (void (*)(id))sub_100DBEB18, (void (*)(id *, char *))sub_101076E58, (uint64_t (*)(void))type metadata accessor for BeaconNamingRecord);
}

uint64_t sub_100B5B0E4(uint64_t a1)
{
  return sub_100AC5484(a1, *(void (**)(void *))(v1 + 16), *(void *)(v1 + 24), &qword_10164B300, (uint64_t)"Update failed: %@", 17);
}

uint64_t sub_100B5B118(uint64_t a1)
{
  return sub_100B63A04(a1, (uint64_t (*)(void))type metadata accessor for BeaconNamingRecord, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))sub_10107BCDC);
}

uint64_t sub_100B5B144(uint64_t a1)
{
  return sub_100AC9164(a1, *(void *)(v1 + 16), *(id **)(v1 + 24), *(void *)(v1 + 32));
}

uint64_t sub_100B5B164@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_100B06FE4(a1, *(void *)(v2 + 16), *(void *)(v2 + 24), a2);
}

uint64_t sub_100B5B180()
{
  return sub_1006CAD68(72);
}

uint64_t sub_100B5B188(uint64_t a1)
{
  uint64_t v4 = *(void *)(v1 + 16);
  uint64_t v5 = v1 + 24;
  uint64_t v6 = *(void *)(v1 + 64);
  uint64_t v7 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v7;
  *uint64_t v7 = v2;
  v7[1] = sub_100033F68;
  v7[5] = v5;
  v7[6] = v6;
  v7[3] = a1;
  v7[4] = v4;
  return _swift_task_switch(sub_100B086DC, 0, 0);
}

uint64_t sub_100B5B24C()
{
  return sub_1006CAD68(81);
}

uint64_t sub_100B5B254(uint64_t a1)
{
  uint64_t v4 = *(void *)(v1 + 16);
  uint64_t v5 = v1 + 24;
  uint64_t v6 = *(void *)(v1 + 64);
  uint64_t v7 = *(void *)(v1 + 72);
  char v8 = *(unsigned char *)(v1 + 80);
  uint64_t v9 = swift_task_alloc();
  *(void *)(v2 + 16) = v9;
  *(void *)uint64_t v9 = v2;
  *(void *)(v9 + 8) = sub_100033F68;
  *(unsigned char *)(v9 + 104) = v8;
  *(void *)(v9 + 48) = v6;
  *(void *)(v9 + 56) = v7;
  *(void *)(v9 + 32) = v4;
  *(void *)(v9 + 40) = v5;
  *(void *)(v9 + 24) = a1;
  return _swift_task_switch(sub_100B0B3C8, 0, 0);
}

uint64_t sub_100B5B32C(uint64_t a1)
{
  return sub_100B5D378(a1, (uint64_t (*)(void))type metadata accessor for LocationProvider, (uint64_t (*)(uint64_t, uint64_t))&static Date.< infix(_:_:)) & 1;
}

uint64_t sub_100B5B370()
{
  return sub_100B5E370((uint64_t (*)(void, void, void, void, void))sub_100E508C8);
}

void sub_100B5B3A0(uint64_t a1)
{
  sub_100A224EC(a1, *(void *)(v1 + 16), *(NSObject **)(v1 + 24));
}

uint64_t sub_100B5B3A8(uint64_t a1)
{
  return sub_100AC10D8(a1, v1[2], v1[3], v1[4]);
}

uint64_t sub_100B5B3C8(uint64_t a1)
{
  return sub_100AC5484(a1, *(void (**)(void *))(v1 + 16), *(void *)(v1 + 24), (uint64_t *)&unk_1016554E0, (uint64_t)"Save failed: %@", 15);
}

uint64_t sub_100B5B3F8()
{
  uint64_t v1 = (int *)(type metadata accessor for LeashRecord() - 8);
  uint64_t v2 = *(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v3 = (v2 + 24) & ~v2;
  uint64_t v4 = v2 | 7;
  unint64_t v5 = ((*(void *)(*(void *)v1 + 64) + v3 + 7) & 0xFFFFFFFFFFFFFFF8) + 16;
  swift_release();
  sub_10001CFB8(*(void *)(v0 + v3), *(void *)(v0 + v3 + 8));
  uint64_t v6 = v0 + v3 + v1[7];
  uint64_t v7 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v7 - 8) + 8))(v6, v7);
  swift_bridgeObjectRelease();
  swift_release();

  return _swift_deallocObject(v0, v5, v4);
}

uint64_t sub_100B5B520(uint64_t *a1)
{
  return sub_100B57760(a1, (uint64_t (*)(void))type metadata accessor for LeashRecord, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))sub_100AC74B8);
}

uint64_t sub_100B5B54C()
{
  return sub_100B632C0();
}

uint64_t sub_100B5B578()
{
  uint64_t v1 = (int *)(type metadata accessor for LeashRecord() - 8);
  uint64_t v2 = *(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v3 = (v2 + 24) & ~v2;
  uint64_t v4 = *(void *)(*(void *)v1 + 64);
  uint64_t v11 = v2 | 7;
  unint64_t v5 = (v2 + ((v4 + v3 + 7) & 0xFFFFFFFFFFFFFFF8) + 8) & ~v2;
  uint64_t v6 = v5 + v4;
  swift_release();
  sub_10001CFB8(*(void *)(v0 + v3), *(void *)(v0 + v3 + 8));
  uint64_t v7 = v0 + v3 + v1[7];
  uint64_t v8 = type metadata accessor for UUID();
  uint64_t v9 = *(void (**)(uint64_t, uint64_t))(*(void *)(v8 - 8) + 8);
  v9(v7, v8);
  swift_bridgeObjectRelease();
  swift_release();
  sub_10001CFB8(*(void *)(v0 + v5), *(void *)(v0 + v5 + 8));
  v9(v0 + v5 + v1[7], v8);
  swift_bridgeObjectRelease();

  return _swift_deallocObject(v0, v6, v11);
}

void sub_100B5B6F0(uint64_t a1)
{
  uint64_t v3 = *(void *)(type metadata accessor for LeashRecord() - 8);
  uint64_t v4 = *(unsigned __int8 *)(v3 + 80);
  uint64_t v5 = (v4 + 24) & ~v4;
  unint64_t v6 = (*(void *)(v3 + 64) + v5 + 7) & 0xFFFFFFFFFFFFFFF8;
  sub_100AC2F64(a1, *(void *)(v1 + 16), v1 + v5, *(void *)(v1 + v6), v1 + ((v4 + v6 + 8) & ~v4), (uint64_t (*)(void))type metadata accessor for LeashRecord, (uint64_t *)&unk_1016554E0, (uint64_t (*)(void))type metadata accessor for LeashRecord, (uint64_t)sub_100B64360, (uint64_t (*)(void))type metadata accessor for LeashRecord);
}

void sub_100B5B80C(uint64_t a1)
{
  sub_100A18880(a1, *(void *)(v1 + 16), *(NSObject **)(v1 + 24));
}

uint64_t sub_100B5B814(uint64_t a1)
{
  return sub_100AC0E40(a1, v1[2], v1[3], v1[4]);
}

uint64_t sub_100B5B834(uint64_t a1)
{
  return sub_100AC5484(a1, *(void (**)(void *))(v1 + 16), *(void *)(v1 + 24), &qword_1016554C0, (uint64_t)"Save failed: %@", 15);
}

uint64_t sub_100B5B864()
{
  uint64_t v1 = (int *)(type metadata accessor for SafeLocation() - 8);
  uint64_t v2 = *(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v3 = (v2 + 24) & ~v2;
  uint64_t v4 = v2 | 7;
  unint64_t v5 = ((*(void *)(*(void *)v1 + 64) + v3 + 7) & 0xFFFFFFFFFFFFFFF8) + 16;
  swift_release();
  sub_10001CFB8(*(void *)(v0 + v3), *(void *)(v0 + v3 + 8));
  uint64_t v6 = v0 + v3 + v1[7];
  uint64_t v7 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v7 - 8) + 8))(v6, v7);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();

  return _swift_deallocObject(v0, v5, v4);
}

uint64_t sub_100B5B99C(uint64_t *a1)
{
  return sub_100B57760(a1, (uint64_t (*)(void))type metadata accessor for SafeLocation, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))sub_100AC70E8);
}

uint64_t sub_100B5B9C8()
{
  return sub_100B632C0();
}

uint64_t sub_100B5B9F4()
{
  uint64_t v1 = (int *)(type metadata accessor for SafeLocation() - 8);
  uint64_t v2 = *(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v3 = (v2 + 24) & ~v2;
  uint64_t v4 = *(void *)(*(void *)v1 + 64);
  uint64_t v11 = v2 | 7;
  unint64_t v5 = (v2 + ((v4 + v3 + 7) & 0xFFFFFFFFFFFFFFF8) + 8) & ~v2;
  uint64_t v6 = v5 + v4;
  swift_release();
  sub_10001CFB8(*(void *)(v0 + v3), *(void *)(v0 + v3 + 8));
  uint64_t v7 = v0 + v3 + v1[7];
  uint64_t v8 = type metadata accessor for UUID();
  uint64_t v9 = *(void (**)(uint64_t, uint64_t))(*(void *)(v8 - 8) + 8);
  v9(v7, v8);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  sub_10001CFB8(*(void *)(v0 + v5), *(void *)(v0 + v5 + 8));
  v9(v0 + v5 + v1[7], v8);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return _swift_deallocObject(v0, v6, v11);
}

void sub_100B5BB8C(uint64_t a1)
{
  uint64_t v3 = *(void *)(type metadata accessor for SafeLocation() - 8);
  uint64_t v4 = *(unsigned __int8 *)(v3 + 80);
  uint64_t v5 = (v4 + 24) & ~v4;
  unint64_t v6 = (*(void *)(v3 + 64) + v5 + 7) & 0xFFFFFFFFFFFFFFF8;
  sub_100AC2F64(a1, *(void *)(v1 + 16), v1 + v5, *(void *)(v1 + v6), v1 + ((v4 + v6 + 8) & ~v4), (uint64_t (*)(void))type metadata accessor for SafeLocation, &qword_1016554C0, (uint64_t (*)(void))type metadata accessor for SafeLocation, (uint64_t)sub_100B64348, (uint64_t (*)(void))type metadata accessor for SafeLocation);
}

uint64_t sub_100B5BCA8(uint64_t *a1)
{
  return sub_100B62DA8(a1, (uint64_t (*)(void))type metadata accessor for SafeLocation, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))sub_100392D34);
}

uint64_t sub_100B5BCD8()
{
  uint64_t v1 = (int *)(type metadata accessor for SafeLocation() - 8);
  uint64_t v2 = *(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v3 = (v2 + 32) & ~v2;
  uint64_t v4 = v2 | 7;
  unint64_t v5 = ((*(void *)(*(void *)v1 + 64) + v3 + 7) & 0xFFFFFFFFFFFFFFF8) + 16;
  swift_release();
  swift_release();
  sub_10001CFB8(*(void *)(v0 + v3), *(void *)(v0 + v3 + 8));
  uint64_t v6 = v0 + v3 + v1[7];
  uint64_t v7 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v7 - 8) + 8))(v6, v7);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();

  return _swift_deallocObject(v0, v5, v4);
}

uint64_t sub_100B5BE18(uint64_t a1)
{
  return sub_100B62FE0(a1, (uint64_t (*)(void))type metadata accessor for SafeLocation, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))sub_1003940B0);
}

void sub_100B5BE48(uint64_t a1)
{
  sub_10065A724(a1, *(void *)(v1 + 16), *(NSObject **)(v1 + 24));
}

uint64_t sub_100B5BE58()
{
  uint64_t v1 = (int *)(type metadata accessor for OwnedBeaconGroup(0) - 8);
  uint64_t v2 = *(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v3 = (v2 + 24) & ~v2;
  uint64_t v4 = v2 | 7;
  unint64_t v5 = ((*(void *)(*(void *)v1 + 64) + v3 + 7) & 0xFFFFFFFFFFFFFFF8) + 8;
  swift_release();
  uint64_t v6 = v0 + v3;
  sub_10001CFB8(*(void *)(v0 + v3), *(void *)(v0 + v3 + 8));
  uint64_t v7 = v0 + v3 + v1[8];
  uint64_t v8 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v8 - 8) + 8))(v7, v8);
  uint64_t v9 = v6 + v1[9];
  uint64_t v10 = type metadata accessor for MACAddress();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v10 - 8) + 8))(v9, v10);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();

  return _swift_deallocObject(v0, v5, v4);
}

void sub_100B5BFCC(void **a1, uint64_t a2)
{
  uint64_t v5 = *(void *)(type metadata accessor for OwnedBeaconGroup(0) - 8);
  unint64_t v6 = (*(unsigned __int8 *)(v5 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
  sub_100ACA458(*a1, a2, *(void *)(v2 + 16), v2 + v6, *(void *)(v2 + ((*(void *)(v5 + 64) + v6 + 7) & 0xFFFFFFFFFFFFFFF8)), type metadata accessor for OwnedBeaconGroup, (uint64_t (*)(void))sub_1004CFDAC, (uint64_t)sub_100B643F0, type metadata accessor for OwnedBeaconGroup);
}

void sub_100B5C0CC(uint64_t a1)
{
  sub_100BFB574(a1, *(NSObject **)(v1 + 16));
}

void sub_100B5C0D8(uint64_t a1)
{
  sub_100BF82C8(a1, *(NSObject **)(v1 + 16), *(void *)(v1 + 24));
}

uint64_t sub_100B5C0E0(uint64_t a1)
{
  return sub_10046458C(a1, *(uint64_t (**)(void))(v1 + 16));
}

uint64_t sub_100B5C0E8()
{
  return sub_100B63B00((void (*)(void))&_swift_release);
}

uint64_t sub_100B5C100()
{
  return sub_100B63B6C((void (*)(void))&_swift_release, 40);
}

void sub_100B5C120(uint64_t a1)
{
  sub_100BA3134(a1, *(NSObject **)(v1 + 16), *(void *)(v1 + 24));
}

uint64_t sub_100B5C12C()
{
  uint64_t v1 = (int *)type metadata accessor for OwnedBeaconRecord();
  uint64_t v2 = *(unsigned __int8 *)(*((void *)v1 - 1) + 80);
  uint64_t v3 = (v2 + 24) & ~v2;
  uint64_t v19 = *(void *)(*((void *)v1 - 1) + 64);
  swift_release();
  uint64_t v4 = v0 + v3;
  sub_10001CFB8(*(void *)(v0 + v3), *(void *)(v0 + v3 + 8));
  uint64_t v5 = v0 + v3 + v1[5];
  uint64_t v6 = type metadata accessor for UUID();
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = *(void (**)(uint64_t, uint64_t))(v7 + 8);
  v8(v5, v6);
  uint64_t v9 = v0 + v3 + v1[6];
  type metadata accessor for StableIdentifier();
  switch(swift_getEnumCaseMultiPayload())
  {
    case 0u:
    case 4u:
      goto LABEL_6;
    case 1u:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      goto LABEL_6;
    case 2u:
      v8(v9, v6);
      uint64_t v18 = (v2 + 24) & ~v2;
      sub_10000588C(&qword_1016555E0);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      goto LABEL_5;
    case 3u:
      v8(v9, v6);
      uint64_t v18 = (v2 + 24) & ~v2;
      sub_10000588C((uint64_t *)&unk_1016565E0);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
LABEL_5:
      uint64_t v3 = v18;
LABEL_6:
      swift_bridgeObjectRelease();
      break;
    default:
      break;
  }
  uint64_t v10 = v4 + v1[7];
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(v10, 1, v6)) {
    v8(v10, v6);
  }
  uint64_t v11 = v4 + v1[8];
  uint64_t v12 = type metadata accessor for Date();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v12 - 8) + 8))(v11, v12);
  sub_10001CFB8(*(void *)(v4 + v1[9]), *(void *)(v4 + v1[9] + 8));
  uint64_t v13 = (uint64_t *)(v4 + v1[10]);
  unint64_t v14 = v13[1];
  if (v14 >> 60 != 15) {
    sub_10001CFB8(*v13, v14);
  }
  unint64_t v15 = (uint64_t *)(v4 + v1[11]);
  unint64_t v16 = v15[1];
  if (v16 >> 60 != 15) {
    sub_10001CFB8(*v15, v16);
  }
  sub_10001CFB8(*(void *)(v4 + v1[12]), *(void *)(v4 + v1[12] + 8));
  sub_10001CFB8(*(void *)(v4 + v1[13]), *(void *)(v4 + v1[13] + 8));
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();

  return _swift_deallocObject(v0, ((v19 + v3 + 7) & 0xFFFFFFFFFFFFFFF8) + 16, v2 | 7);
}

uint64_t sub_100B5C4C8(uint64_t a1)
{
  uint64_t v3 = *(void *)(type metadata accessor for OwnedBeaconRecord() - 8);
  unint64_t v4 = (*(unsigned __int8 *)(v3 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  uint64_t v5 = *(void *)(v1 + 16);
  uint64_t v6 = v1 + v4;
  uint64_t v7 = (uint64_t *)(v1 + ((*(void *)(v3 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8));
  uint64_t v8 = *v7;
  uint64_t v9 = v7[1];

  return sub_100B0144C(a1, v5, v6, v8, v9);
}

uint64_t sub_100B5C56C()
{
  uint64_t v1 = *(void *)(sub_10000588C((uint64_t *)&unk_101656900) - 8);
  uint64_t v36 = *(unsigned __int8 *)(v1 + 80);
  uint64_t v2 = (v36 + 16) & ~v36;
  uint64_t v3 = *(void *)(v1 + 64);
  unint64_t v4 = (int *)type metadata accessor for OwnedBeaconRecord();
  uint64_t v5 = *(unsigned __int8 *)(*((void *)v4 - 1) + 80);
  uint64_t v6 = (v2 + v3 + v5) & ~v5;
  uint64_t v35 = *(void *)(*((void *)v4 - 1) + 64);
  uint64_t v7 = v0 + v2;
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    swift_errorRelease();
  }
  else
  {
    uint64_t v34 = v6;
    sub_10001CFB8(*(void *)v7, *(void *)(v7 + 8));
    uint64_t v8 = v7 + v4[5];
    uint64_t v9 = type metadata accessor for UUID();
    uint64_t v10 = *(void *)(v9 - 8);
    uint64_t v11 = *(void (**)(uint64_t, uint64_t))(v10 + 8);
    v11(v8, v9);
    uint64_t v12 = v7 + v4[6];
    type metadata accessor for StableIdentifier();
    switch(swift_getEnumCaseMultiPayload())
    {
      case 0u:
      case 4u:
        goto LABEL_7;
      case 1u:
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        goto LABEL_7;
      case 2u:
        v11(v12, v9);
        sub_10000588C(&qword_1016555E0);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        goto LABEL_7;
      case 3u:
        v11(v12, v9);
        sub_10000588C((uint64_t *)&unk_1016565E0);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
LABEL_7:
        swift_bridgeObjectRelease();
        break;
      default:
        break;
    }
    uint64_t v13 = v7 + v4[7];
    if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v10 + 48))(v13, 1, v9)) {
      v11(v13, v9);
    }
    uint64_t v14 = v7 + v4[8];
    uint64_t v15 = type metadata accessor for Date();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v15 - 8) + 8))(v14, v15);
    sub_10001CFB8(*(void *)(v7 + v4[9]), *(void *)(v7 + v4[9] + 8));
    unint64_t v16 = (uint64_t *)(v7 + v4[10]);
    unint64_t v17 = v16[1];
    if (v17 >> 60 != 15) {
      sub_10001CFB8(*v16, v17);
    }
    uint64_t v18 = (uint64_t *)(v7 + v4[11]);
    unint64_t v19 = v18[1];
    uint64_t v6 = v34;
    if (v19 >> 60 != 15) {
      sub_10001CFB8(*v18, v19);
    }
    sub_10001CFB8(*(void *)(v7 + v4[12]), *(void *)(v7 + v4[12] + 8));
    sub_10001CFB8(*(void *)(v7 + v4[13]), *(void *)(v7 + v4[13] + 8));
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  uint64_t v20 = v0 + v6;
  sub_10001CFB8(*(void *)(v0 + v6), *(void *)(v0 + v6 + 8));
  uint64_t v21 = v0 + v6 + v4[5];
  uint64_t v22 = type metadata accessor for UUID();
  uint64_t v23 = *(void *)(v22 - 8);
  unint64_t v24 = *(void (**)(uint64_t, uint64_t))(v23 + 8);
  v24(v21, v22);
  uint64_t v25 = v0 + v6 + v4[6];
  type metadata accessor for StableIdentifier();
  switch(swift_getEnumCaseMultiPayload())
  {
    case 0u:
    case 4u:
      goto LABEL_19;
    case 1u:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      goto LABEL_19;
    case 2u:
      v24(v25, v22);
      sub_10000588C(&qword_1016555E0);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      goto LABEL_19;
    case 3u:
      v24(v25, v22);
      sub_10000588C((uint64_t *)&unk_1016565E0);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
LABEL_19:
      swift_bridgeObjectRelease();
      break;
    default:
      break;
  }
  uint64_t v26 = v20 + v4[7];
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v23 + 48))(v26, 1, v22)) {
    v24(v26, v22);
  }
  uint64_t v27 = v20 + v4[8];
  uint64_t v28 = type metadata accessor for Date();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v28 - 8) + 8))(v27, v28);
  sub_10001CFB8(*(void *)(v20 + v4[9]), *(void *)(v20 + v4[9] + 8));
  unint64_t v29 = (uint64_t *)(v20 + v4[10]);
  unint64_t v30 = v29[1];
  if (v30 >> 60 != 15) {
    sub_10001CFB8(*v29, v30);
  }
  uint64_t v31 = (uint64_t *)(v20 + v4[11]);
  unint64_t v32 = v31[1];
  if (v32 >> 60 != 15) {
    sub_10001CFB8(*v31, v32);
  }
  sub_10001CFB8(*(void *)(v20 + v4[12]), *(void *)(v20 + v4[12] + 8));
  sub_10001CFB8(*(void *)(v20 + v4[13]), *(void *)(v20 + v4[13] + 8));
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();

  return _swift_deallocObject(v0, ((((v35 + v6 + 7) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8) + 16, v36 | v5 | 7);
}

uint64_t sub_100B5CC58()
{
  uint64_t v1 = *(void *)(sub_10000588C((uint64_t *)&unk_101656900) - 8);
  unint64_t v2 = (*(unsigned __int8 *)(v1 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80);
  uint64_t v3 = *(void *)(v1 + 64);
  uint64_t v4 = *(void *)(type metadata accessor for OwnedBeaconRecord() - 8);
  unint64_t v5 = (v2 + v3 + *(unsigned __int8 *)(v4 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
  unint64_t v6 = (*(void *)(v4 + 64) + v5 + 7) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v7 = v0 + v5;
  uint64_t v8 = *(void *)(v0 + v6);
  uint64_t v9 = v0 + ((v6 + 15) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v10 = *(void (**)(void *))v9;
  uint64_t v11 = *(void *)(v9 + 8);

  return sub_100B018B4(v0 + v2, v7, v8, v10, v11);
}

uint64_t sub_100B5CD6C()
{
  return sub_100AFF244(*(void (**)(uint64_t *))(v0 + 16), *(void *)(v0 + 24), 14);
}

uint64_t sub_100B5CD8C()
{
  return sub_100B5E370((uint64_t (*)(void, void, void, void, void))sub_100E52DA8);
}

uint64_t sub_100B5CDB8()
{
  return sub_100B5E370((uint64_t (*)(void, void, void, void, void))sub_100E53FC0);
}

uint64_t sub_100B5CDE4()
{
  return sub_100B5E370((uint64_t (*)(void, void, void, void, void))sub_100E50A10);
}

uint64_t sub_100B5CE10()
{
  return sub_100B5E370((uint64_t (*)(void, void, void, void, void))sub_100E506DC);
}

uint64_t sub_100B5CE3C()
{
  return sub_100B5E370((uint64_t (*)(void, void, void, void, void))sub_100E50BFC);
}

uint64_t sub_100B5CE68()
{
  return sub_100B5E370((uint64_t (*)(void, void, void, void, void))sub_100E51E64);
}

uint64_t sub_100B5CE94@<X0>(uint64_t a1@<X8>)
{
  return sub_100E51F08(*(char **)(v1 + 16), *(void *)(v1 + 24), *(void *)(v1 + 32), *(void (**)(char *, uint64_t))(v1 + 40), *(void *)(v1 + 48), a1);
}

uint64_t sub_100B5CEB8(uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t sub_100B5CF1C()
{
  return sub_100B5E370((uint64_t (*)(void, void, void, void, void))sub_100E51DC0);
}

uint64_t sub_100B5CF48()
{
  return sub_100B5E370((uint64_t (*)(void, void, void, void, void))sub_100E52E4C);
}

uint64_t sub_100B5CF74()
{
  return sub_100B5E370((uint64_t (*)(void, void, void, void, void))sub_100E50824);
}

uint64_t sub_100B5CFA0()
{
  return sub_100B5E370((uint64_t (*)(void, void, void, void, void))sub_100E53F64);
}

uint64_t sub_100B5CFCC()
{
  return sub_100B5E370((uint64_t (*)(void, void, void, void, void))sub_100E50B58);
}

uint64_t sub_100B5CFF8()
{
  return sub_100B5E370((uint64_t (*)(void, void, void, void, void))sub_100E50780);
}

uint64_t sub_100B5D024()
{
  return sub_100B5E370((uint64_t (*)(void, void, void, void, void))sub_100E5096C);
}

uint64_t sub_100B5D050()
{
  return sub_100B5E370((uint64_t (*)(void, void, void, void, void))sub_100E50AB4);
}

uint64_t sub_100B5D07C()
{
  return sub_100B5E370((uint64_t (*)(void, void, void, void, void))sub_100E5044C);
}

uint64_t sub_100B5D0A8()
{
  return sub_100B63B6C((void (*)(void))&_swift_release, 48);
}

uint64_t sub_100B5D0C4()
{
  return sub_100AF0A2C(v0[2], v0[3], v0[4], v0[5]);
}

uint64_t sub_100B5D0D0()
{
  return sub_100B63B00((void (*)(void))&_swift_bridgeObjectRelease);
}

uint64_t sub_100B5D0E8()
{
  uint64_t v1 = *(void (**)(uint64_t, void))(v0 + 16);
  uint64_t v2 = sub_100B2B3E4(*(void *)(v0 + 32));
  v1(v2, 0);

  return swift_release();
}

uint64_t sub_100B5D154()
{
  uint64_t v1 = type metadata accessor for UUID();
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 17) & ~v3;
  uint64_t v5 = v4 + *(void *)(v2 + 64);
  uint64_t v6 = v3 | 7;
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);

  return _swift_deallocObject(v0, v5, v6);
}

uint64_t sub_100B5D1E4()
{
  uint64_t v2 = *(void *)(type metadata accessor for UUID() - 8);
  char v3 = *(unsigned char *)(v0 + 16);
  uint64_t v4 = v0 + ((*(unsigned __int8 *)(v2 + 80) + 17) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80));
  uint64_t v5 = swift_task_alloc();
  *(void *)(v1 + 16) = v5;
  *(void *)uint64_t v5 = v1;
  *(void *)(v5 + 8) = sub_100033F68;
  *(void *)(v5 + 120) = v4;
  *(unsigned char *)(v5 + 160) = v3;
  return _swift_task_switch(sub_100AEA0CC, 0, 0);
}

uint64_t sub_100B5D2D0(uint64_t a1)
{
  return sub_100AE8D48(a1, *(void *)(v1 + 16)) & 1;
}

uint64_t sub_100B5D2F0(uint64_t a1)
{
  return sub_100B5D378(a1, type metadata accessor for OwnedBeaconGroup, (uint64_t (*)(uint64_t, uint64_t))&static MACAddress.== infix(_:_:)) & 1;
}

uint64_t sub_100B5D334(uint64_t a1)
{
  return sub_100B5D378(a1, type metadata accessor for WildModeAssociationRecord, (uint64_t (*)(uint64_t, uint64_t))&static MACAddress.== infix(_:_:)) & 1;
}

uint64_t sub_100B5D378(uint64_t a1, uint64_t (*a2)(void), uint64_t (*a3)(uint64_t, uint64_t))
{
  uint64_t v6 = *(void *)(v3 + 16);
  uint64_t v7 = a2(0);
  return a3(a1 + *(int *)(v7 + 28), v6) & 1;
}

uint64_t sub_100B5D3D4()
{
  uint64_t v1 = (int *)type metadata accessor for OwnedBeaconRecord();
  uint64_t v2 = *(unsigned __int8 *)(*((void *)v1 - 1) + 80);
  uint64_t v3 = (v2 + 24) & ~v2;
  uint64_t v19 = *(void *)(*((void *)v1 - 1) + 64);
  swift_release();
  uint64_t v4 = v0 + v3;
  sub_10001CFB8(*(void *)(v0 + v3), *(void *)(v0 + v3 + 8));
  uint64_t v5 = v0 + v3 + v1[5];
  uint64_t v6 = type metadata accessor for UUID();
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = *(void (**)(uint64_t, uint64_t))(v7 + 8);
  v8(v5, v6);
  uint64_t v9 = v0 + v3 + v1[6];
  type metadata accessor for StableIdentifier();
  switch(swift_getEnumCaseMultiPayload())
  {
    case 0u:
    case 4u:
      goto LABEL_6;
    case 1u:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      goto LABEL_6;
    case 2u:
      v8(v9, v6);
      uint64_t v18 = (v2 + 24) & ~v2;
      sub_10000588C(&qword_1016555E0);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      goto LABEL_5;
    case 3u:
      v8(v9, v6);
      uint64_t v18 = (v2 + 24) & ~v2;
      sub_10000588C((uint64_t *)&unk_1016565E0);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
LABEL_5:
      uint64_t v3 = v18;
LABEL_6:
      swift_bridgeObjectRelease();
      break;
    default:
      break;
  }
  uint64_t v10 = v4 + v1[7];
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(v10, 1, v6)) {
    v8(v10, v6);
  }
  uint64_t v11 = v4 + v1[8];
  uint64_t v12 = type metadata accessor for Date();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v12 - 8) + 8))(v11, v12);
  sub_10001CFB8(*(void *)(v4 + v1[9]), *(void *)(v4 + v1[9] + 8));
  uint64_t v13 = (uint64_t *)(v4 + v1[10]);
  unint64_t v14 = v13[1];
  if (v14 >> 60 != 15) {
    sub_10001CFB8(*v13, v14);
  }
  uint64_t v15 = (uint64_t *)(v4 + v1[11]);
  unint64_t v16 = v15[1];
  if (v16 >> 60 != 15) {
    sub_10001CFB8(*v15, v16);
  }
  sub_10001CFB8(*(void *)(v4 + v1[12]), *(void *)(v4 + v1[12] + 8));
  sub_10001CFB8(*(void *)(v4 + v1[13]), *(void *)(v4 + v1[13] + 8));
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return _swift_deallocObject(v0, v3 + v19, v2 | 7);
}

uint64_t sub_100B5D758(uint64_t a1)
{
  uint64_t v4 = *(void *)(type metadata accessor for OwnedBeaconRecord() - 8);
  uint64_t v5 = *(void *)(v1 + 16);
  uint64_t v6 = v1 + ((*(unsigned __int8 *)(v4 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80));
  uint64_t v7 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v7;
  *uint64_t v7 = v2;
  v7[1] = sub_100033F68;
  return sub_100AE1D5C(a1, v5, v6);
}

uint64_t sub_100B5D840(uint64_t a1)
{
  return sub_100AE1E28(a1, v1[2], v1[3], v1[4], v1[5]);
}

uint64_t sub_100B5D860()
{
  uint64_t v1 = sub_10000588C(&qword_10163F7B0);
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 16) & ~v3;
  uint64_t v5 = v4 + *(void *)(v2 + 64);
  uint64_t v6 = v3 | 7;
  uint64_t v7 = v0 + *(int *)(v1 + 36) + v4;
  uint64_t v8 = type metadata accessor for Date();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v8 - 8) + 8))(v7, v8);

  return _swift_deallocObject(v0, v5, v6);
}

uint64_t sub_100B5D944(uint64_t a1)
{
  return sub_100B5D964(a1, &qword_10163F7B0, (uint64_t (*)(uint64_t, uint64_t))sub_100AE2190);
}

uint64_t sub_100B5D964(uint64_t a1, uint64_t *a2, uint64_t (*a3)(uint64_t, uint64_t))
{
  uint64_t v5 = *(void *)(sub_10000588C(a2) - 8);
  uint64_t v6 = v3 + ((*(unsigned __int8 *)(v5 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80));

  return a3(a1, v6);
}

uint64_t sub_100B5D9E8()
{
  uint64_t v1 = type metadata accessor for UUID();
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 24) & ~v3;
  uint64_t v5 = *(void *)(v2 + 64);
  uint64_t v6 = (int *)(type metadata accessor for KeyAlignmentRecord() - 8);
  uint64_t v7 = *(unsigned __int8 *)(*(void *)v6 + 80);
  uint64_t v8 = (v4 + v5 + v7) & ~v7;
  uint64_t v9 = *(void *)(*(void *)v6 + 64);
  uint64_t v10 = (int *)(sub_10000588C(&qword_10163F7B0) - 8);
  uint64_t v11 = *(unsigned __int8 *)(*(void *)v10 + 80);
  uint64_t v12 = (v8 + v9 + v11) & ~v11;
  uint64_t v21 = v12 + *(void *)(*(void *)v10 + 64);
  uint64_t v13 = v3 | v7 | v11 | 7;
  swift_release();
  uint64_t v14 = v0 + v4;
  uint64_t v15 = *(void (**)(uint64_t, uint64_t))(v2 + 8);
  v15(v14, v1);
  uint64_t v16 = v0 + v8;
  sub_10001CFB8(*(void *)v16, *(void *)(v16 + 8));
  v15(v16 + v6[7], v1);
  v15(v16 + v6[8], v1);
  uint64_t v17 = v16 + v6[10];
  uint64_t v18 = type metadata accessor for Date();
  uint64_t v19 = *(void (**)(uint64_t, uint64_t))(*(void *)(v18 - 8) + 8);
  v19(v17, v18);
  v19(v0 + v10[11] + v12, v18);

  return _swift_deallocObject(v0, v21, v13);
}

void sub_100B5DC30(uint64_t a1)
{
  uint64_t v3 = *(void *)(type metadata accessor for UUID() - 8);
  unint64_t v4 = (*(unsigned __int8 *)(v3 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  uint64_t v5 = *(void *)(v3 + 64);
  uint64_t v6 = *(void *)(type metadata accessor for KeyAlignmentRecord() - 8);
  unint64_t v7 = (v4 + v5 + *(unsigned __int8 *)(v6 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80);
  uint64_t v8 = *(void *)(v6 + 64);
  uint64_t v9 = *(void *)(sub_10000588C(&qword_10163F7B0) - 8);
  uint64_t v10 = *(void *)(v1 + 16);
  uint64_t v11 = v1 + ((v7 + v8 + *(unsigned __int8 *)(v9 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80));

  sub_100AE2238(a1, v10, v1 + v4, v1 + v7, v11);
}

uint64_t sub_100B5DD70(uint64_t a1, uint64_t a2)
{
  return sub_100B06B60(a1, a2, *(void *)(v2 + 16));
}

uint64_t sub_100B5DD78()
{
  return sub_100B63B00((void (*)(void))&_swift_release);
}

uint64_t sub_100B5DD90()
{
  return sub_100B63B6C((void (*)(void))&_swift_release, 40);
}

uint64_t sub_100B5DDAC(uint64_t a1)
{
  return sub_100B5E314(a1, (uint64_t (*)(void))type metadata accessor for MemberSharingCircle, (uint64_t (*)(uint64_t, uint64_t))&static UUID.== infix(_:_:)) & 1;
}

uint64_t sub_100B5DDF0()
{
  return sub_100B5E370((uint64_t (*)(void, void, void, void, void))sub_100E53F08);
}

uint64_t sub_100B5DE1C()
{
  return sub_1006CAD68(64);
}

uint64_t sub_100B5DE24(uint64_t a1)
{
  uint64_t v4 = *(void *)(v1 + 16);
  uint64_t v5 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v5;
  *uint64_t v5 = v2;
  v5[1] = sub_100033F68;
  return sub_100ADCE0C(a1, v4, v1 + 24);
}

uint64_t sub_100B5DED4()
{
  return sub_1006CAD68(64);
}

uint64_t sub_100B5DEDC(uint64_t a1)
{
  uint64_t v4 = *(void *)(v1 + 16);
  uint64_t v5 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v5;
  *uint64_t v5 = v2;
  v5[1] = sub_100033F68;
  return sub_100ADD290(a1, v4, v1 + 24);
}

uint64_t sub_100B5DF8C()
{
  return sub_1006CAD68(64);
}

uint64_t sub_100B5DF94(uint64_t a1)
{
  uint64_t v4 = *(void *)(v1 + 16);
  uint64_t v5 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v5;
  *uint64_t v5 = v2;
  v5[1] = sub_100033F68;
  return sub_100ADD718(a1, v4, v1 + 24);
}

uint64_t sub_100B5E044()
{
  return sub_100B5E370((uint64_t (*)(void, void, void, void, void))sub_100E53EAC);
}

uint64_t sub_100B5E070@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_100ADA5EC(a1, *(void *)(v2 + 16), *(void *)(v2 + 24), a2);
}

uint64_t sub_100B5E078(uint64_t a1)
{
  return sub_100ADAE70(a1, *(void *)(v1 + 16)) & 1;
}

uint64_t sub_100B5E098(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 40))(a2, a1, v5);
  return a2;
}

uint64_t sub_100B5E100@<X0>(void *a1@<X8>)
{
  *a1 = *(void *)(v1 + OBJC_IVAR____TtC12searchpartyd11BeaconStore_cachedSharedBeaconRecords);
  return swift_bridgeObjectRetain();
}

uint64_t sub_100B5E128@<X0>(void *a1@<X8>)
{
  return sub_100AD167C(*(void *)(v1 + 16), *(void *)(v1 + 24), a1);
}

uint64_t sub_100B5E144()
{
  swift_unknownObjectRelease();
  swift_release();
  swift_bridgeObjectRelease();

  return _swift_deallocObject(v0, 48, 7);
}

uint64_t sub_100B5E18C()
{
  uint64_t v2 = swift_task_alloc();
  long long v3 = *(_OWORD *)(v0 + 32);
  *(void *)(v1 + 16) = v2;
  *(void *)uint64_t v2 = v1;
  *(void *)(v2 + 8) = sub_100033F68;
  *(_OWORD *)(v2 + 24) = v3;
  return _swift_task_switch(sub_100AD2680, 0, 0);
}

uint64_t sub_100B5E238@<X0>(void *a1@<X8>)
{
  return sub_100AD2A4C(a1);
}

uint64_t sub_100B5E240(uint64_t a1)
{
  return sub_100AD73C0(a1, *(void *)(v1 + 16), *(unsigned char *)(v1 + 24)) & 1;
}

uint64_t sub_100B5E264@<X0>(void *a1@<X8>)
{
  *a1 = *(void *)(v1 + OBJC_IVAR____TtC12searchpartyd11BeaconStore_cachedOwnedBeaconRecords);
  return swift_bridgeObjectRetain();
}

uint64_t sub_100B5E28C()
{
  *(void *)(*(void *)(v0 + 16) + OBJC_IVAR____TtC12searchpartyd11BeaconStore_cachedOwnedBeaconRecords) = *(void *)(v0 + 24);
  swift_bridgeObjectRetain();
  return swift_bridgeObjectRelease();
}

uint64_t sub_100B5E2D0(uint64_t a1)
{
  return sub_100B5E314(a1, (uint64_t (*)(void))type metadata accessor for OwnedBeaconRecord, sub_101113BD4) & 1;
}

uint64_t sub_100B5E314(uint64_t a1, uint64_t (*a2)(void), uint64_t (*a3)(uint64_t, uint64_t))
{
  uint64_t v6 = *(void *)(v3 + 16);
  uint64_t v7 = a2(0);
  return a3(a1 + *(int *)(v7 + 24), v6) & 1;
}

uint64_t sub_100B5E370(uint64_t (*a1)(void, void, void, void, void))
{
  return a1(v1[2], v1[3], v1[4], v1[5], v1[6]);
}

uint64_t sub_100B5E39C()
{
  return sub_10042C5FC(v0);
}

uint64_t sub_100B5E3B8()
{
  uint64_t v1 = (int *)type metadata accessor for BeaconEstimatedLocation();
  uint64_t v2 = *(unsigned __int8 *)(*((void *)v1 - 1) + 80);
  uint64_t v3 = (v2 + 16) & ~v2;
  uint64_t v13 = *(void *)(*((void *)v1 - 1) + 64);
  sub_10001CFB8(*(void *)(v0 + v3), *(void *)(v0 + v3 + 8));
  uint64_t v4 = v0 + v3 + v1[5];
  uint64_t v5 = type metadata accessor for UUID();
  uint64_t v6 = *(void (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8);
  v6(v4, v5);
  v6(v0 + v3 + v1[6], v5);
  uint64_t v7 = v0 + v3 + v1[10];
  uint64_t v8 = type metadata accessor for Date();
  uint64_t v9 = *(void *)(v8 - 8);
  uint64_t v10 = *(void (**)(uint64_t, uint64_t))(v9 + 8);
  v10(v7, v8);
  uint64_t v11 = v0 + v3 + v1[12];
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v9 + 48))(v11, 1, v8)) {
    v10(v11, v8);
  }
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();

  return _swift_deallocObject(v0, ((((v13 + v3 + 7) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8) + 16, v2 | 7);
}

void sub_100B5E5B8()
{
  uint64_t v1 = *(void *)(type metadata accessor for BeaconEstimatedLocation() - 8);
  unint64_t v2 = (*(unsigned __int8 *)(v1 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80);
  unint64_t v3 = (*(void *)(v1 + 64) + v2 + 7) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v4 = v0 + v2;
  uint64_t v5 = *(void *)(v0 + v3);
  uint64_t v6 = (void (**)(uint64_t))(v0 + ((v3 + 15) & 0xFFFFFFFFFFFFFFF8));
  uint64_t v7 = *v6;
  uint64_t v8 = v6[1];

  sub_100AB74E4(v4, v5, v7, v8);
}

uint64_t sub_100B5E654()
{
  uint64_t v1 = (int *)type metadata accessor for BeaconEstimatedLocation();
  uint64_t v15 = *(unsigned __int8 *)(*((void *)v1 - 1) + 80);
  uint64_t v2 = (v15 + 24) & ~v15;
  uint64_t v14 = *(void *)(*((void *)v1 - 1) + 64);
  uint64_t v3 = type metadata accessor for Date();
  uint64_t v4 = *(void *)(v3 - 8);
  uint64_t v13 = *(unsigned __int8 *)(v4 + 80);
  uint64_t v12 = *(void *)(v4 + 64);
  swift_release();
  sub_10001CFB8(*(void *)(v0 + v2), *(void *)(v0 + v2 + 8));
  uint64_t v5 = v0 + v2 + v1[5];
  uint64_t v6 = type metadata accessor for UUID();
  uint64_t v7 = *(void (**)(uint64_t, uint64_t))(*(void *)(v6 - 8) + 8);
  v7(v5, v6);
  v7(v0 + v2 + v1[6], v6);
  uint64_t v8 = *(void (**)(uint64_t, uint64_t))(v4 + 8);
  v8(v0 + v2 + v1[10], v3);
  uint64_t v9 = v0 + v2 + v1[12];
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v4 + 48))(v9, 1, v3)) {
    v8(v9, v3);
  }
  uint64_t v10 = (v2 + v14 + v13) & ~v13;
  swift_bridgeObjectRelease();
  v8(v0 + v10, v3);
  swift_release();

  return _swift_deallocObject(v0, ((v12 + v10 + 7) & 0xFFFFFFFFFFFFFFF8) + 16, v15 | v13 | 7);
}

uint64_t sub_100B5E89C()
{
  uint64_t v1 = *(void *)(type metadata accessor for BeaconEstimatedLocation() - 8);
  unint64_t v2 = (*(unsigned __int8 *)(v1 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80);
  uint64_t v3 = *(void *)(v1 + 64);
  uint64_t v4 = *(void *)(type metadata accessor for Date() - 8);
  unint64_t v5 = (v2 + v3 + *(unsigned __int8 *)(v4 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
  uint64_t v6 = *(void *)(v0 + 16);
  uint64_t v7 = v0 + v5;
  uint64_t v8 = v0 + ((*(void *)(v4 + 64) + v5 + 7) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v9 = *(void (**)(uint64_t))v8;
  uint64_t v10 = *(void *)(v8 + 8);

  return sub_100AB9DBC(v6, v0 + v2, v7, v9, v10);
}

void sub_100B5E99C()
{
  sub_100D4763C(*(void *)(v0 + 16), *(void *)(v0 + 24));
}

uint64_t sub_100B5E9B8()
{
  uint64_t v1 = (int *)type metadata accessor for BeaconEstimatedLocation();
  uint64_t v2 = *(unsigned __int8 *)(*((void *)v1 - 1) + 80);
  uint64_t v3 = (v2 + 24) & ~v2;
  uint64_t v14 = *(void *)(*((void *)v1 - 1) + 64);
  swift_release();
  sub_10001CFB8(*(void *)(v0 + v3), *(void *)(v0 + v3 + 8));
  uint64_t v4 = v0 + v3 + v1[5];
  uint64_t v5 = type metadata accessor for UUID();
  uint64_t v6 = *(void (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8);
  v6(v4, v5);
  v6(v0 + v3 + v1[6], v5);
  uint64_t v7 = v0 + v3 + v1[10];
  uint64_t v8 = type metadata accessor for Date();
  uint64_t v9 = *(void *)(v8 - 8);
  uint64_t v10 = *(void (**)(uint64_t, uint64_t))(v9 + 8);
  v10(v7, v8);
  uint64_t v11 = v0 + v3 + v1[12];
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v9 + 48))(v11, 1, v8)) {
    v10(v11, v8);
  }
  unint64_t v12 = (v14 + v3 + 7) & 0xFFFFFFFFFFFFFFF8;
  swift_bridgeObjectRelease();
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v0 + v12);

  return _swift_deallocObject(v0, v12 + 40, v2 | 7);
}

uint64_t sub_100B5EBAC()
{
  uint64_t v1 = *(void *)(type metadata accessor for BeaconEstimatedLocation() - 8);
  unint64_t v2 = (*(unsigned __int8 *)(v1 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80);
  uint64_t v3 = *(void *)(v0 + 16);
  uint64_t v4 = v0 + ((*(void *)(v1 + 64) + v2 + 7) & 0xFFFFFFFFFFFFFFF8);

  return sub_100ABACC8(v3, v0 + v2, v4);
}

uint64_t sub_100B5EC3C()
{
  return static Date.< infix(_:_:)() & 1;
}

uint64_t sub_100B5EC8C()
{
  return sub_100B63B6C((void (*)(void))&_swift_unknownObjectRelease, 40);
}

uint64_t sub_100B5ECAC()
{
  uint64_t v1 = type metadata accessor for DateInterval();
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 64) & ~v3;
  uint64_t v5 = v3 | 7;
  uint64_t v6 = *(void *)(v2 + 64) + v4 + 3;
  swift_release();
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v0 + 24);
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);

  return _swift_deallocObject(v0, v6, v5);
}

uint64_t sub_100B5ED84(uint64_t a1)
{
  uint64_t v4 = *(void *)(type metadata accessor for DateInterval() - 8);
  unint64_t v5 = (*(unsigned __int8 *)(v4 + 80) + 64) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
  uint64_t v6 = v1 + 24;
  uint64_t v7 = v1 + v5;
  uint64_t v8 = (unsigned __int8 *)(v1 + *(void *)(v4 + 64) + v5);
  uint64_t v9 = v8[1];
  uint64_t v10 = v8[2];
  uint64_t v11 = *v8;
  unint64_t v12 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v12;
  *unint64_t v12 = v2;
  v12[1] = sub_100033F68;
  v12[2] = a1;
  uint64_t v15 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))((char *)&dword_10164B7F0 + dword_10164B7F0);
  uint64_t v13 = (void *)swift_task_alloc();
  v12[3] = v13;
  *uint64_t v13 = v12;
  v13[1] = sub_100B0315C;
  return v15(v6, v7, v11, v9, v10);
}

uint64_t sub_100B5EF14()
{
  return sub_100AB46A4();
}

uint64_t sub_100B5EF1C(uint64_t a1)
{
  return sub_10100D5E0(a1, v1);
}

uint64_t sub_100B5EF38()
{
  return sub_1012DB6A4(v0);
}

uint64_t sub_100B5EF40()
{
  return sub_100AB4EC8();
}

uint64_t sub_100B5EF48()
{
  swift_release();

  return _swift_deallocObject(v0, 32, 7);
}

uint64_t sub_100B5EF80(uint64_t a1)
{
  return sub_1012DB998(a1, *(uint64_t (**)(uint64_t))(v1 + 16));
}

uint64_t sub_100B5EF88()
{
  return sub_100B63B00((void (*)(void))&_swift_release);
}

uint64_t sub_100B5EFA0()
{
  return sub_100B63B6C((void (*)(void))&_swift_release, 40);
}

uint64_t sub_100B5EFBC@<X0>(void *a1@<X8>)
{
  return sub_100AF0128(a1);
}

uint64_t sub_100B5EFC4@<X0>(uint64_t a1@<X8>)
{
  return sub_100AF0180(a1);
}

uint64_t sub_100B5EFD0()
{
  uint64_t v1 = type metadata accessor for UUID();
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 24) & ~v3;
  uint64_t v5 = v4 + *(void *)(v2 + 64);
  uint64_t v6 = (int *)(sub_10000588C((uint64_t *)&unk_10164E870) - 8);
  uint64_t v7 = *(unsigned __int8 *)(*(void *)v6 + 80);
  uint64_t v8 = (v5 + v7) & ~v7;
  uint64_t v9 = v8 + *(void *)(*(void *)v6 + 64);
  uint64_t v10 = v3 | v7 | 7;
  swift_release();
  uint64_t v11 = v0 + v4;
  unint64_t v12 = *(void (**)(uint64_t, uint64_t))(v2 + 8);
  v12(v11, v1);
  swift_bridgeObjectRelease();
  v12(v0 + v8 + v6[11], v1);

  return _swift_deallocObject(v0, v9, v10);
}

uint64_t sub_100B5F12C()
{
  uint64_t v1 = *(void *)(type metadata accessor for UUID() - 8);
  unint64_t v2 = (*(unsigned __int8 *)(v1 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80);
  unint64_t v3 = v2 + *(void *)(v1 + 64);
  uint64_t v4 = *(void *)(sub_10000588C((uint64_t *)&unk_10164E870) - 8);
  uint64_t v5 = *(void *)(v0 + 16);
  uint64_t v6 = v0 + ((v3 + *(unsigned __int8 *)(v4 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80));

  return sub_100AE9AC0(v5, v0 + v2, v6);
}

uint64_t sub_100B5F200()
{
  uint64_t v1 = type metadata accessor for UUID();
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 24) & ~v3;
  uint64_t v5 = *(void *)(v2 + 64);
  uint64_t v19 = type metadata accessor for Date();
  uint64_t v6 = *(void *)(v19 - 8);
  uint64_t v7 = *(unsigned __int8 *)(v6 + 80);
  uint64_t v8 = (v4 + v5 + v7) & ~v7;
  uint64_t v9 = *(void *)(v6 + 64);
  uint64_t v10 = (int *)(type metadata accessor for BeaconStatus(0) - 8);
  uint64_t v11 = *(unsigned __int8 *)(*(void *)v10 + 80);
  uint64_t v12 = (v8 + v9 + v11) & ~v11;
  unint64_t v17 = ((*(void *)(*(void *)v10 + 64) + v12 + 9) & 0xFFFFFFFFFFFFFFF8) + 8;
  uint64_t v18 = v3 | v7 | v11 | 7;
  swift_release();
  uint64_t v13 = *(void (**)(uint64_t, uint64_t))(v2 + 8);
  v13(v0 + v4, v1);
  uint64_t v14 = v0 + v8;
  uint64_t v15 = *(void (**)(uint64_t, uint64_t))(v6 + 8);
  v15(v14, v19);
  v13(v0 + v12, v1);
  v15(v0 + v12 + v10[8], v19);
  swift_bridgeObjectRelease();
  swift_release();

  return _swift_deallocObject(v0, v17, v18);
}

uint64_t sub_100B5F41C()
{
  uint64_t v1 = *(void *)(type metadata accessor for UUID() - 8);
  unint64_t v2 = (*(unsigned __int8 *)(v1 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80);
  uint64_t v3 = *(void *)(v1 + 64);
  uint64_t v4 = *(void *)(type metadata accessor for Date() - 8);
  unint64_t v5 = (v2 + v3 + *(unsigned __int8 *)(v4 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
  uint64_t v6 = *(void *)(v4 + 64);
  uint64_t v7 = *(void *)(type metadata accessor for BeaconStatus(0) - 8);
  unint64_t v8 = (v5 + v6 + *(unsigned __int8 *)(v7 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80);
  unint64_t v9 = v8 + *(void *)(v7 + 64);
  uint64_t v10 = *(void *)(v0 + 16);
  uint64_t v11 = *(void **)(v0 + ((v9 + 9) & 0xFFFFFFFFFFFFFFF8));
  unsigned int v12 = *(unsigned __int8 *)(v0 + v9 + 1);
  int v13 = *(unsigned __int8 *)(v0 + v9);

  return sub_100AEABD4(v10, v0 + v2, (v0 + v5), v0 + v8, v13, v12, v11);
}

uint64_t sub_100B5F580()
{
  uint64_t v1 = (int *)(type metadata accessor for BeaconStatus(0) - 8);
  uint64_t v2 = *(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v3 = (v2 + 64) & ~v2;
  uint64_t v4 = v3 + *(void *)(*(void *)v1 + 64);
  uint64_t v5 = v2 | 7;
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v0 + 24);
  uint64_t v6 = v0 + v3;
  uint64_t v7 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v7 - 8) + 8))(v6, v7);
  uint64_t v8 = v6 + v1[8];
  uint64_t v9 = type metadata accessor for Date();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v9 - 8) + 8))(v8, v9);
  swift_bridgeObjectRelease();

  return _swift_deallocObject(v0, v4, v5);
}

uint64_t sub_100B5F6B8()
{
  uint64_t v2 = *(void *)(type metadata accessor for BeaconStatus(0) - 8);
  char v3 = *(unsigned char *)(v0 + 16);
  uint64_t v4 = v0 + 24;
  uint64_t v5 = v0 + ((*(unsigned __int8 *)(v2 + 80) + 64) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80));
  uint64_t v6 = swift_task_alloc();
  *(void *)(v1 + 16) = v6;
  *(void *)uint64_t v6 = v1;
  *(void *)(v6 + 8) = sub_100033F68;
  *(void *)(v6 + 224) = v4;
  *(void *)(v6 + 232) = v5;
  *(unsigned char *)(v6 + 296) = v3;
  return _swift_task_switch(sub_100AEC0A0, 0, 0);
}

uint64_t sub_100B5F7B0()
{
  uint64_t v2 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v2;
  *uint64_t v2 = v1;
  v2[1] = sub_10001D2E4;
  return sub_100AECCC0(v0);
}

uint64_t sub_100B5F840()
{
  return sub_100B4947C();
}

uint64_t sub_100B5F848()
{
  return sub_100B63B00((void (*)(void))&_swift_release);
}

uint64_t sub_100B5F860()
{
  return sub_100B63B6C((void (*)(void))&_swift_release, 40);
}

uint64_t sub_100B5F87C(uint64_t a1)
{
  return sub_100AB4774(a1, v1);
}

uint64_t sub_100B5F898()
{
  uint64_t v2 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v2;
  *uint64_t v2 = v1;
  v2[1] = sub_100033F68;
  v2[15] = v0;
  return _swift_task_switch(sub_100AB4C14, 0, 0);
}

uint64_t sub_100B5F940()
{
  return sub_100B612CC((void (*)(void))&_swift_release, 32);
}

uint64_t sub_100B5F95C()
{
  return sub_100AB4A48(*(void *)(v0 + 16), *(uint64_t **)(v0 + 24));
}

uint64_t sub_100B5F964(uint64_t a1)
{
  return sub_100B14514(a1, *(void *)(v1 + 16), *(void *)(v1 + 24));
}

uint64_t sub_100B5F980()
{
  return sub_100B612CC((void (*)(void))&_swift_release, 40);
}

uint64_t sub_100B5F99C(char a1)
{
  return sub_100B145F4(a1, *(void (**)(char *, uint64_t))(v1 + 16), *(void *)(v1 + 24), *(void *)(v1 + 32));
}

uint64_t sub_100B5F9A8(uint64_t a1)
{
  return sub_100B14290(a1, *(void *)(v1 + 16), *(void *)(v1 + 24));
}

uint64_t sub_100B5F9C4()
{
  swift_bridgeObjectRelease();

  return _swift_deallocObject(v0, 24, 7);
}

uint64_t sub_100B5F9FC(unsigned __int8 *a1)
{
  return sub_100DC6050(*a1, *(void *)(v1 + 16));
}

uint64_t sub_100B5FA08()
{
  return sub_100B63B6C((void (*)(void))&_swift_release, 40);
}

uint64_t sub_100B5FA24(unsigned __int8 *a1)
{
  uint64_t v2 = *(uint64_t (**)(BOOL))(v1 + 24);
  int v3 = *a1;
  Transaction.capture()();
  return v2(v3 == 1);
}

uint64_t sub_100B5FA70()
{
  uint64_t v1 = type metadata accessor for UUID();
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 16) & ~v3;
  uint64_t v5 = v3 | 7;
  unint64_t v6 = ((((((*(void *)(v2 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8)
     + 8;
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  swift_release();
  swift_release();

  return _swift_deallocObject(v0, v6, v5);
}

void sub_100B5FB34(char a1)
{
  uint64_t v3 = *(void *)(type metadata accessor for UUID() - 8);
  unint64_t v4 = (*(unsigned __int8 *)(v3 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  unint64_t v5 = (*(void *)(v3 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v6 = (v5 + 15) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v7 = *(void **)(v1 + v5);
  uint64_t v8 = *(void *)(v1 + v6);
  uint64_t v9 = *(void *)(v1 + ((v6 + 15) & 0xFFFFFFFFFFFFFFF8));

  sub_100B14E34(a1, v1 + v4, v7, v8, v9);
}

uint64_t sub_100B5FBE8()
{
  return sub_100B63B6C((void (*)(void))&_swift_release, 40);
}

uint64_t sub_100B5FC04(uint64_t a1, char a2)
{
  return sub_100B15400(a1, a2 & 1, v2[2], v2[3], v2[4]);
}

uint64_t sub_100B5FC14()
{
  return (*(uint64_t (**)(void))(v0 + 16))(0);
}

uint64_t sub_100B5FC40()
{
  swift_release();

  return _swift_deallocObject(v0, 33, 7);
}

uint64_t sub_100B5FC78()
{
  uint64_t v1 = type metadata accessor for UUID();
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 24) & ~v3;
  uint64_t v5 = v3 | 7;
  unint64_t v6 = ((*(void *)(v2 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8) + 8;
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);

  return _swift_deallocObject(v0, v6, v5);
}

void sub_100B5FD50(uint64_t a1, char a2)
{
  char v3 = a2 & 1;
  type metadata accessor for UUID();

  sub_100B15184(a1, v3);
}

uint64_t sub_100B5FE00(uint64_t a1)
{
  return sub_100B15B00(a1, *(void *)(v1 + 16), *(unsigned char *)(v1 + 24), *(void *)(v1 + 32), *(void *)(v1 + 40));
}

uint64_t sub_100B5FE24()
{
  swift_release();
  swift_release();
  if (*(void *)(v0 + 32)) {
    swift_release();
  }

  return _swift_deallocObject(v0, 48, 7);
}

uint64_t sub_100B5FE74()
{
  return sub_100B0B9AC(*(void *)(v0 + 16), *(void *)(v0 + 24), *(uint64_t (**)(uint64_t))(v0 + 32));
}

char *sub_100B5FE80@<X0>(char **a1@<X8>)
{
  return sub_100AB29D8(a1);
}

uint64_t sub_100B5FE88()
{
  return sub_100AA6468(*(void (**)(uint64_t *__return_ptr))(v0 + 16));
}

unint64_t sub_100B5FE90()
{
  unint64_t result = qword_101659528;
  if (!qword_101659528)
  {
    sub_10000592C(&qword_101649660);
    sub_100B22DA4(&qword_10163B040, (void (*)(uint64_t))&type metadata accessor for UUID);
    sub_100B5FF3C();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_101659528);
  }
  return result;
}

unint64_t sub_100B5FF3C()
{
  unint64_t result = qword_101659530;
  if (!qword_101659530)
  {
    sub_10000592C(&qword_101649718);
    sub_100B22DA4(&qword_10165C6F0, (void (*)(uint64_t))type metadata accessor for BeaconEstimatedLocation);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, &qword_101659530);
  }
  return result;
}

void sub_100B5FFE0(uint64_t *a1@<X8>)
{
  sub_100AB2594(v1, a1);
}

uint64_t sub_100B5FFFC()
{
  return sub_100B63B6C((void (*)(void))&_swift_unknownObjectRelease, 48);
}

uint64_t sub_100B60018(uint64_t a1)
{
  uint64_t v4 = *((void *)v1 + 2);
  uint64_t v5 = *((void *)v1 + 3);
  uint64_t v6 = *((void *)v1 + 4);
  double v7 = v1[5];
  uint64_t v8 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v8;
  *uint64_t v8 = v2;
  v8[1] = sub_100033F68;
  return sub_100AADE88(v7, a1, v4, v5, v6);
}

uint64_t sub_100B600DC()
{
  return _swift_deallocObject(v0, 24, 7);
}

uint64_t sub_100B600EC(uint64_t a1, uint64_t a2)
{
  double v6 = *(double *)(v2 + 16);
  double v7 = (void *)swift_task_alloc();
  *(void *)(v3 + 16) = v7;
  *double v7 = v3;
  v7[1] = sub_100033F68;
  return sub_100AAE524(a1, a2, v6);
}

uint64_t sub_100B6019C(uint64_t a1, uint64_t a2)
{
  double v6 = (void *)swift_task_alloc();
  *(void *)(v3 + 16) = v6;
  *double v6 = v3;
  v6[1] = sub_100033F68;
  return sub_100AAE9F4(a1, a2, v2);
}

uint64_t sub_100B60244()
{
  swift_release();
  swift_release();
  swift_release();

  return _swift_deallocObject(v0, 40, 7);
}

uint64_t sub_100B6028C(uint64_t a1)
{
  return sub_100377100(a1, v1[2], v1[3], v1[4]);
}

uint64_t sub_100B60298()
{
  return sub_100B63B00((void (*)(void))&_swift_release);
}

uint64_t sub_100B602B0()
{
  return sub_100B63B6C((void (*)(void))&_swift_release, 40);
}

uint64_t sub_100B602CC()
{
  return sub_100B63B6C((void (*)(void))&_swift_release, 40);
}

uint64_t sub_100B602E8(uint64_t a1)
{
  return sub_100AFF320(a1, v1[2], v1[3], v1[4]);
}

uint64_t sub_100B602F4()
{
  uint64_t v1 = *(void *)(sub_10000588C((uint64_t *)&unk_101656900) - 8);
  uint64_t v2 = *(unsigned __int8 *)(v1 + 80);
  uint64_t v3 = (v2 + 16) & ~v2;
  uint64_t v4 = *(void *)(v1 + 64);
  uint64_t v5 = v0 + v3;
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    swift_errorRelease();
  }
  else
  {
    sub_10001CFB8(*(void *)v5, *(void *)(v5 + 8));
    double v6 = (int *)type metadata accessor for OwnedBeaconRecord();
    uint64_t v7 = v5 + v6[5];
    uint64_t v8 = type metadata accessor for UUID();
    uint64_t v9 = *(void *)(v8 - 8);
    uint64_t v20 = *(void (**)(uint64_t, uint64_t))(v9 + 8);
    v20(v7, v8);
    uint64_t v10 = v5 + v6[6];
    type metadata accessor for StableIdentifier();
    switch(swift_getEnumCaseMultiPayload())
    {
      case 0u:
      case 4u:
        goto LABEL_8;
      case 1u:
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        goto LABEL_8;
      case 2u:
        v20(v10, v8);
        uint64_t v19 = v4;
        sub_10000588C(&qword_1016555E0);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        goto LABEL_7;
      case 3u:
        v20(v10, v8);
        uint64_t v19 = v4;
        sub_10000588C((uint64_t *)&unk_1016565E0);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
LABEL_7:
        uint64_t v4 = v19;
LABEL_8:
        swift_bridgeObjectRelease();
        break;
      default:
        break;
    }
    uint64_t v11 = v5 + v6[7];
    if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v9 + 48))(v11, 1, v8)) {
      v20(v11, v8);
    }
    uint64_t v12 = v5 + v6[8];
    uint64_t v13 = type metadata accessor for Date();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v13 - 8) + 8))(v12, v13);
    sub_10001CFB8(*(void *)(v5 + v6[9]), *(void *)(v5 + v6[9] + 8));
    uint64_t v14 = (uint64_t *)(v5 + v6[10]);
    unint64_t v15 = v14[1];
    if (v15 >> 60 != 15) {
      sub_10001CFB8(*v14, v15);
    }
    uint64_t v16 = (uint64_t *)(v5 + v6[11]);
    unint64_t v17 = v16[1];
    if (v17 >> 60 != 15) {
      sub_10001CFB8(*v16, v17);
    }
    sub_10001CFB8(*(void *)(v5 + v6[12]), *(void *)(v5 + v6[12] + 8));
    sub_10001CFB8(*(void *)(v5 + v6[13]), *(void *)(v5 + v6[13] + 8));
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  swift_release();
  swift_release();

  return _swift_deallocObject(v0, ((((v4 + v3 + 7) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8) + 16, v2 | 7);
}

id sub_100B606CC()
{
  uint64_t v1 = *(void *)(sub_10000588C((uint64_t *)&unk_101656900) - 8);
  unint64_t v2 = (*(unsigned __int8 *)(v1 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80);
  unint64_t v3 = (*(void *)(v1 + 64) + v2 + 7) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v4 = v0 + v2;
  uint64_t v5 = *(void *)(v0 + v3);
  uint64_t v6 = v0 + ((v3 + 15) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v7 = *(void (**)(void *))v6;
  uint64_t v8 = *(void *)(v6 + 8);

  return sub_100AFF6B8(v4, v5, v7, v8);
}

uint64_t sub_100B6076C()
{
  uint64_t v1 = (int *)type metadata accessor for OwnedBeaconRecord();
  uint64_t v2 = *(unsigned __int8 *)(*((void *)v1 - 1) + 80);
  uint64_t v3 = (v2 + 40) & ~v2;
  uint64_t v19 = *(void *)(*((void *)v1 - 1) + 64);
  swift_release();
  swift_release();
  uint64_t v4 = v0 + v3;
  sub_10001CFB8(*(void *)(v0 + v3), *(void *)(v0 + v3 + 8));
  uint64_t v5 = v0 + v3 + v1[5];
  uint64_t v6 = type metadata accessor for UUID();
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = *(void (**)(uint64_t, uint64_t))(v7 + 8);
  v8(v5, v6);
  uint64_t v9 = v0 + v3 + v1[6];
  type metadata accessor for StableIdentifier();
  switch(swift_getEnumCaseMultiPayload())
  {
    case 0u:
    case 4u:
      goto LABEL_6;
    case 1u:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      goto LABEL_6;
    case 2u:
      v8(v9, v6);
      uint64_t v18 = (v2 + 40) & ~v2;
      sub_10000588C(&qword_1016555E0);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      goto LABEL_5;
    case 3u:
      v8(v9, v6);
      uint64_t v18 = (v2 + 40) & ~v2;
      sub_10000588C((uint64_t *)&unk_1016565E0);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
LABEL_5:
      uint64_t v3 = v18;
LABEL_6:
      swift_bridgeObjectRelease();
      break;
    default:
      break;
  }
  uint64_t v10 = v4 + v1[7];
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(v10, 1, v6)) {
    v8(v10, v6);
  }
  uint64_t v11 = v4 + v1[8];
  uint64_t v12 = type metadata accessor for Date();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v12 - 8) + 8))(v11, v12);
  sub_10001CFB8(*(void *)(v4 + v1[9]), *(void *)(v4 + v1[9] + 8));
  uint64_t v13 = (uint64_t *)(v4 + v1[10]);
  unint64_t v14 = v13[1];
  if (v14 >> 60 != 15) {
    sub_10001CFB8(*v13, v14);
  }
  unint64_t v15 = (uint64_t *)(v4 + v1[11]);
  unint64_t v16 = v15[1];
  if (v16 >> 60 != 15) {
    sub_10001CFB8(*v15, v16);
  }
  sub_10001CFB8(*(void *)(v4 + v1[12]), *(void *)(v4 + v1[12] + 8));
  sub_10001CFB8(*(void *)(v4 + v1[13]), *(void *)(v4 + v1[13] + 8));
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return _swift_deallocObject(v0, v3 + v19, v2 | 7);
}

uint64_t sub_100B60AF8(uint64_t a1)
{
  uint64_t v3 = *(void *)(type metadata accessor for OwnedBeaconRecord() - 8);
  uint64_t v4 = v1[2];
  uint64_t v5 = v1[3];
  uint64_t v6 = v1[4];
  uint64_t v7 = (uint64_t)v1 + ((*(unsigned __int8 *)(v3 + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80));

  return sub_100AFFE78(a1, v4, v5, v6, v7);
}

uint64_t sub_100B60B74()
{
  uint64_t v1 = (int *)type metadata accessor for OwnedBeaconRecord();
  uint64_t v2 = *(unsigned __int8 *)(*((void *)v1 - 1) + 80);
  uint64_t v3 = (v2 + 32) & ~v2;
  uint64_t v19 = *(void *)(*((void *)v1 - 1) + 64);
  swift_release();
  uint64_t v4 = v0 + v3;
  sub_10001CFB8(*(void *)(v0 + v3), *(void *)(v0 + v3 + 8));
  uint64_t v5 = v0 + v3 + v1[5];
  uint64_t v6 = type metadata accessor for UUID();
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = *(void (**)(uint64_t, uint64_t))(v7 + 8);
  v8(v5, v6);
  uint64_t v9 = v0 + v3 + v1[6];
  type metadata accessor for StableIdentifier();
  switch(swift_getEnumCaseMultiPayload())
  {
    case 0u:
    case 4u:
      goto LABEL_6;
    case 1u:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      goto LABEL_6;
    case 2u:
      v8(v9, v6);
      uint64_t v18 = (v2 + 32) & ~v2;
      sub_10000588C(&qword_1016555E0);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      goto LABEL_5;
    case 3u:
      v8(v9, v6);
      uint64_t v18 = (v2 + 32) & ~v2;
      sub_10000588C((uint64_t *)&unk_1016565E0);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
LABEL_5:
      uint64_t v3 = v18;
LABEL_6:
      swift_bridgeObjectRelease();
      break;
    default:
      break;
  }
  uint64_t v10 = v4 + v1[7];
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(v10, 1, v6)) {
    v8(v10, v6);
  }
  uint64_t v11 = v4 + v1[8];
  uint64_t v12 = type metadata accessor for Date();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v12 - 8) + 8))(v11, v12);
  sub_10001CFB8(*(void *)(v4 + v1[9]), *(void *)(v4 + v1[9] + 8));
  uint64_t v13 = (uint64_t *)(v4 + v1[10]);
  unint64_t v14 = v13[1];
  if (v14 >> 60 != 15) {
    sub_10001CFB8(*v13, v14);
  }
  unint64_t v15 = (uint64_t *)(v4 + v1[11]);
  unint64_t v16 = v15[1];
  if (v16 >> 60 != 15) {
    sub_10001CFB8(*v15, v16);
  }
  sub_10001CFB8(*(void *)(v4 + v1[12]), *(void *)(v4 + v1[12] + 8));
  sub_10001CFB8(*(void *)(v4 + v1[13]), *(void *)(v4 + v1[13] + 8));
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return _swift_deallocObject(v0, v3 + v19, v2 | 7);
}

uint64_t sub_100B60EF8()
{
  uint64_t v1 = *(void *)(type metadata accessor for OwnedBeaconRecord() - 8);
  return sub_100B02144(*(void (**)(char *))(v0 + 16), *(void *)(v0 + 24), v0 + ((*(unsigned __int8 *)(v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80)));
}

uint64_t sub_100B60F50()
{
  return sub_100AFF244(*(void (**)(uint64_t *))(v0 + 16), *(void *)(v0 + 24), 7);
}

uint64_t sub_100B60F70()
{
  return sub_100A4BF4C();
}

uint64_t sub_100B60F78()
{
  return sub_100B63B00((void (*)(void))&_swift_release);
}

uint64_t sub_100B60F90()
{
  return sub_100B63B6C((void (*)(void))&_swift_release, 40);
}

uint64_t sub_100B60FAC()
{
  swift_bridgeObjectRelease();

  return _swift_deallocObject(v0, 32, 7);
}

uint64_t sub_100B60FE4(uint64_t a1)
{
  return sub_100A515A8(a1, *(void *)(v1 + 16), *(void *)(v1 + 24));
}

uint64_t sub_100B60FF0()
{
  uint64_t v1 = (int *)(type metadata accessor for BeaconNamingRecord() - 8);
  uint64_t v2 = *(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v3 = (v2 + 32) & ~v2;
  uint64_t v4 = v3 + *(void *)(*(void *)v1 + 64);
  uint64_t v5 = v2 | 7;
  swift_release();
  uint64_t v6 = v0 + v3;
  sub_10001CFB8(*(void *)(v0 + v3), *(void *)(v0 + v3 + 8));
  uint64_t v7 = v0 + v3 + v1[7];
  uint64_t v8 = type metadata accessor for UUID();
  uint64_t v9 = *(void (**)(uint64_t, uint64_t))(*(void *)(v8 - 8) + 8);
  v9(v7, v8);
  v9(v6 + v1[8], v8);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return _swift_deallocObject(v0, v4, v5);
}

uint64_t sub_100B6113C()
{
  uint64_t v1 = (int *)(type metadata accessor for BeaconNamingRecord() - 8);
  uint64_t v2 = *(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v3 = (v2 + 16) & ~v2;
  uint64_t v10 = v2 | 7;
  unint64_t v4 = (((*(void *)(*(void *)v1 + 64) + v3 + 7) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v5 = v0 + v3;
  sub_10001CFB8(*(void *)(v0 + v3), *(void *)(v0 + v3 + 8));
  uint64_t v6 = v5 + v1[7];
  uint64_t v7 = type metadata accessor for UUID();
  uint64_t v8 = *(void (**)(uint64_t, uint64_t))(*(void *)(v7 - 8) + 8);
  v8(v6, v7);
  v8(v5 + v1[8], v7);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();

  return _swift_deallocObject(v0, v4 + 16, v10);
}

uint64_t sub_100B612B0()
{
  return sub_100B612CC((void (*)(void))&_swift_bridgeObjectRelease, 32);
}

uint64_t sub_100B612CC(void (*a1)(void), uint64_t a2)
{
  a1(*(void *)(v2 + 16));
  swift_release();

  return _swift_deallocObject(v2, a2, 7);
}

void sub_100B61320(uint64_t a1)
{
  sub_100A20048(a1, *(void *)(v1 + 16), *(void *)(v1 + 24));
}

uint64_t sub_100B6132C(uint64_t *a1)
{
  return sub_100B62DA8(a1, (uint64_t (*)(void))type metadata accessor for LeashRecord, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))sub_100393090);
}

uint64_t sub_100B6135C()
{
  uint64_t v1 = (int *)(type metadata accessor for LeashRecord() - 8);
  uint64_t v2 = *(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v3 = (v2 + 32) & ~v2;
  uint64_t v4 = v2 | 7;
  unint64_t v5 = ((*(void *)(*(void *)v1 + 64) + v3 + 7) & 0xFFFFFFFFFFFFFFF8) + 16;
  swift_release();
  swift_release();
  sub_10001CFB8(*(void *)(v0 + v3), *(void *)(v0 + v3 + 8));
  uint64_t v6 = v0 + v3 + v1[7];
  uint64_t v7 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v7 - 8) + 8))(v6, v7);
  swift_bridgeObjectRelease();
  swift_release();

  return _swift_deallocObject(v0, v5, v4);
}

uint64_t sub_100B6148C(uint64_t a1)
{
  return sub_100B62FE0(a1, (uint64_t (*)(void))type metadata accessor for LeashRecord, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))sub_1003940C8);
}

uint64_t sub_100B614B8(uint64_t a1)
{
  return sub_100AC0BA8(a1, v1[2], v1[3], v1[4]);
}

uint64_t sub_100B614D8(uint64_t a1)
{
  return sub_100AC5484(a1, *(void (**)(void *))(v1 + 16), *(void *)(v1 + 24), &qword_10163FFA0, (uint64_t)"Save failed: %@", 15);
}

uint64_t sub_100B61508()
{
  uint64_t v1 = (int *)type metadata accessor for SharedBeaconRecord(0);
  uint64_t v2 = *(unsigned __int8 *)(*((void *)v1 - 1) + 80);
  uint64_t v16 = *(void *)(*((void *)v1 - 1) + 64);
  swift_release();
  uint64_t v3 = v0 + ((v2 + 24) & ~v2);
  sub_10001CFB8(*(void *)v3, *(void *)(v3 + 8));
  uint64_t v4 = v3 + v1[5];
  uint64_t v5 = type metadata accessor for UUID();
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v7 = *(void (**)(uint64_t, uint64_t))(v6 + 8);
  v7(v4, v5);
  v7(v3 + v1[6], v5);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v8 = v3 + v1[18];
  uint64_t v9 = type metadata accessor for Date();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v9 - 8) + 8))(v8, v9);
  uint64_t v10 = v3 + v1[19];
  uint64_t v11 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v6 + 48);
  if (!v11(v10, 1, v5)) {
    v7(v10, v5);
  }
  uint64_t v12 = v3 + v1[20];
  uint64_t v13 = type metadata accessor for SharedBeaconRecord.PropertyListContent(0);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v13 - 8) + 48))(v12, 1, v13))
  {
    uint64_t v14 = v12 + *(int *)(v13 + 20);
    if (!v11(v14, 1, v5)) {
      v7(v14, v5);
    }
  }
  swift_release();

  return _swift_deallocObject(v0, ((v16 + ((v2 + 24) & ~v2) + 7) & 0xFFFFFFFFFFFFFFF8) + 16, v2 | 7);
}

uint64_t sub_100B617B8(uint64_t *a1)
{
  return sub_100B57760(a1, type metadata accessor for SharedBeaconRecord, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))sub_100AC6D18);
}

uint64_t sub_100B617E4()
{
  return sub_100AC7C58();
}

uint64_t sub_100B6182C()
{
  uint64_t v1 = (int *)type metadata accessor for SharedBeaconRecord(0);
  uint64_t v2 = *(unsigned __int8 *)(*((void *)v1 - 1) + 80);
  uint64_t v3 = (v2 + 24) & ~v2;
  uint64_t v23 = *(void *)(*((void *)v1 - 1) + 64);
  unint64_t v4 = v2 + ((v23 + v3 + 7) & 0xFFFFFFFFFFFFFFF8) + 8;
  swift_release();
  uint64_t v26 = v0;
  uint64_t v5 = v0 + v3;
  sub_10001CFB8(*(void *)v5, *(void *)(v5 + 8));
  uint64_t v6 = v5 + v1[5];
  uint64_t v7 = type metadata accessor for UUID();
  uint64_t v8 = *(void *)(v7 - 8);
  uint64_t v9 = *(void (**)(uint64_t, uint64_t))(v8 + 8);
  v9(v6, v7);
  v9(v5 + v1[6], v7);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v10 = v5 + v1[18];
  uint64_t v11 = type metadata accessor for Date();
  uint64_t v22 = *(void (**)(uint64_t, uint64_t))(*(void *)(v11 - 8) + 8);
  v22(v10, v11);
  uint64_t v12 = v5 + v1[19];
  unint64_t v24 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v8 + 48);
  if (!v24(v12, 1, v7)) {
    v9(v12, v7);
  }
  unint64_t v25 = v4 & ~v2;
  uint64_t v13 = v5 + v1[20];
  uint64_t v14 = type metadata accessor for SharedBeaconRecord.PropertyListContent(0);
  unint64_t v15 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v14 - 8) + 48);
  if (!v15(v13, 1, v14))
  {
    uint64_t v16 = v13 + *(int *)(v14 + 20);
    if (!v24(v16, 1, v7)) {
      v9(v16, v7);
    }
  }
  swift_release();
  uint64_t v17 = v26 + v25;
  sub_10001CFB8(*(void *)v17, *(void *)(v17 + 8));
  v9(v26 + v25 + v1[5], v7);
  v9(v26 + v25 + v1[6], v7);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v22(v26 + v25 + v1[18], v11);
  unint64_t v18 = v26 + v25 + v1[19];
  if (!v24(v18, 1, v7)) {
    v9(v18, v7);
  }
  uint64_t v19 = v17 + v1[20];
  if (!v15(v19, 1, v14))
  {
    uint64_t v20 = v19 + *(int *)(v14 + 20);
    if (!v24(v20, 1, v7)) {
      v9(v20, v7);
    }
  }

  return _swift_deallocObject(v26, v25 + v23, v2 | 7);
}

uint64_t sub_100B61C3C(uint64_t a1)
{
  return sub_100B57EB8(a1, type metadata accessor for SharedBeaconRecord, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, unint64_t))sub_100AC26F0);
}

uint64_t sub_100B61C68()
{
  uint64_t v1 = (int *)type metadata accessor for SharedBeaconRecord(0);
  uint64_t v2 = *(unsigned __int8 *)(*((void *)v1 - 1) + 80);
  uint64_t v16 = *(void *)(*((void *)v1 - 1) + 64);
  swift_release();
  uint64_t v3 = v0 + ((v2 + 24) & ~v2);
  sub_10001CFB8(*(void *)v3, *(void *)(v3 + 8));
  uint64_t v4 = v3 + v1[5];
  uint64_t v5 = type metadata accessor for UUID();
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v7 = *(void (**)(uint64_t, uint64_t))(v6 + 8);
  v7(v4, v5);
  v7(v3 + v1[6], v5);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v8 = v3 + v1[18];
  uint64_t v9 = type metadata accessor for Date();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v9 - 8) + 8))(v8, v9);
  uint64_t v10 = v3 + v1[19];
  uint64_t v11 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v6 + 48);
  if (!v11(v10, 1, v5)) {
    v7(v10, v5);
  }
  uint64_t v12 = v3 + v1[20];
  uint64_t v13 = type metadata accessor for SharedBeaconRecord.PropertyListContent(0);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v13 - 8) + 48))(v12, 1, v13))
  {
    uint64_t v14 = v12 + *(int *)(v13 + 20);
    if (!v11(v14, 1, v5)) {
      v7(v14, v5);
    }
  }
  swift_release();

  return _swift_deallocObject(v0, ((v16 + ((v2 + 24) & ~v2) + 7) & 0xFFFFFFFFFFFFFFF8) + 8, v2 | 7);
}

uint64_t sub_100B61F14(uint64_t *a1, uint64_t a2)
{
  return sub_100B569D8(a1, a2, type metadata accessor for SharedBeaconRecord, (uint64_t (*)(uint64_t, uint64_t, uint64_t, unint64_t, uint64_t))sub_100AC99FC);
}

uint64_t sub_100B61F40()
{
  return sub_100B63B6C((void (*)(void))&_swift_release, 40);
}

uint64_t sub_100B61F5C(uint64_t a1)
{
  return sub_101169334(a1, *(void *)(v1 + 16), *(void (**)(char *))(v1 + 24), *(void *)(v1 + 32));
}

uint64_t sub_100B61F68()
{
  return sub_100B63B6C((void (*)(void))&_swift_release, 40);
}

uint64_t sub_100B61F84(uint64_t a1)
{
  return sub_10116B618(a1, *(void *)(v1 + 16), *(void (**)(char *))(v1 + 24), *(void *)(v1 + 32));
}

uint64_t sub_100B61F90()
{
  uint64_t v1 = (int *)type metadata accessor for SharedBeaconRecord(0);
  uint64_t v2 = *(unsigned __int8 *)(*((void *)v1 - 1) + 80);
  uint64_t v16 = *(void *)(*((void *)v1 - 1) + 64);
  swift_release();
  uint64_t v3 = v0 + ((v2 + 32) & ~v2);
  sub_10001CFB8(*(void *)v3, *(void *)(v3 + 8));
  uint64_t v4 = v3 + v1[5];
  uint64_t v5 = type metadata accessor for UUID();
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v7 = *(void (**)(uint64_t, uint64_t))(v6 + 8);
  v7(v4, v5);
  v7(v3 + v1[6], v5);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v8 = v3 + v1[18];
  uint64_t v9 = type metadata accessor for Date();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v9 - 8) + 8))(v8, v9);
  uint64_t v10 = v3 + v1[19];
  uint64_t v11 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v6 + 48);
  if (!v11(v10, 1, v5)) {
    v7(v10, v5);
  }
  uint64_t v12 = v3 + v1[20];
  uint64_t v13 = type metadata accessor for SharedBeaconRecord.PropertyListContent(0);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v13 - 8) + 48))(v12, 1, v13))
  {
    uint64_t v14 = v12 + *(int *)(v13 + 20);
    if (!v11(v14, 1, v5)) {
      v7(v14, v5);
    }
  }

  return _swift_deallocObject(v0, ((v2 + 32) & ~v2) + v16, v2 | 7);
}

uint64_t sub_100B62220(id *a1)
{
  uint64_t v3 = *(void *)(type metadata accessor for SharedBeaconRecord(0) - 8);
  return sub_100ACAB44(a1, *(void (**)(char *))(v1 + 16), *(void *)(v1 + 24), v1 + ((*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80)), type metadata accessor for SharedBeaconRecord, (void (*)(id))sub_10120C214, (void (*)(id *, char *))sub_100CF51A4, type metadata accessor for SharedBeaconRecord);
}

uint64_t sub_100B622D8()
{
  uint64_t v1 = (int *)type metadata accessor for SharedBeaconRecord(0);
  uint64_t v2 = *(unsigned __int8 *)(*((void *)v1 - 1) + 80);
  uint64_t v15 = *(void *)(*((void *)v1 - 1) + 64);
  uint64_t v16 = (v2 + 16) & ~v2;
  sub_10001CFB8(*(void *)(v0 + v16), *(void *)(v0 + v16 + 8));
  uint64_t v3 = v0 + v16 + v1[5];
  uint64_t v4 = type metadata accessor for UUID();
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = *(void (**)(uint64_t, uint64_t))(v5 + 8);
  v6(v3, v4);
  v6(v0 + v16 + v1[6], v4);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v7 = v0 + v16 + v1[18];
  uint64_t v8 = type metadata accessor for Date();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v8 - 8) + 8))(v7, v8);
  uint64_t v9 = v0 + v16 + v1[19];
  uint64_t v10 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v5 + 48);
  if (!v10(v9, 1, v4)) {
    v6(v9, v4);
  }
  uint64_t v11 = v0 + v16 + v1[20];
  uint64_t v12 = type metadata accessor for SharedBeaconRecord.PropertyListContent(0);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v12 - 8) + 48))(v11, 1, v12))
  {
    uint64_t v13 = v11 + *(int *)(v12 + 20);
    if (!v10(v13, 1, v4)) {
      v6(v13, v4);
    }
  }
  swift_release();
  swift_release();

  return _swift_deallocObject(v0, ((((v15 + v16 + 7) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8) + 16, v2 | 7);
}

uint64_t sub_100B6258C(uint64_t a1)
{
  return sub_100B63A04(a1, type metadata accessor for SharedBeaconRecord, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))sub_10107BCD4);
}

uint64_t sub_100B625B8(uint64_t a1)
{
  return sub_100AC8C3C(a1, *(void *)(v1 + 16), *(id **)(v1 + 24), *(void *)(v1 + 32));
}

uint64_t sub_100B625D8()
{
  sub_10001CFB8(*(void *)(v0 + 16), *(void *)(v0 + 24));
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return _swift_deallocObject(v0, 72, 7);
}

uint64_t sub_100B62620()
{
  return _swift_deallocObject(v0, 24, 7);
}

void sub_100B62658(uint64_t a1)
{
  sub_1008EA7DC(a1, *(NSObject **)(v1 + 16));
}

uint64_t sub_100B62660()
{
  uint64_t v1 = (int *)(type metadata accessor for LostModeRecord() - 8);
  uint64_t v2 = *(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v3 = (v2 + 32) & ~v2;
  uint64_t v4 = v3 + *(void *)(*(void *)v1 + 64);
  uint64_t v5 = v2 | 7;
  swift_release();
  uint64_t v6 = v0 + v3;
  sub_10001CFB8(*(void *)(v0 + v3), *(void *)(v0 + v3 + 8));
  uint64_t v7 = v0 + v3 + v1[7];
  uint64_t v8 = type metadata accessor for UUID();
  uint64_t v9 = *(void (**)(uint64_t, uint64_t))(*(void *)(v8 - 8) + 8);
  v9(v7, v8);
  v9(v6 + v1[8], v8);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return _swift_deallocObject(v0, v4, v5);
}

uint64_t sub_100B627B8(id *a1)
{
  uint64_t v3 = *(void *)(type metadata accessor for LostModeRecord() - 8);
  return sub_100ACAB44(a1, *(void (**)(char *))(v1 + 16), *(void *)(v1 + 24), v1 + ((*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80)), (uint64_t (*)(void))type metadata accessor for LostModeRecord, (void (*)(id))sub_100E92AFC, (void (*)(id *, char *))sub_100B223B8, (uint64_t (*)(void))type metadata accessor for LostModeRecord);
}

uint64_t sub_100B62870(uint64_t a1)
{
  return sub_100AC5484(a1, *(void (**)(void *))(v1 + 16), *(void *)(v1 + 24), &qword_101651918, (uint64_t)"Update failed: %@", 17);
}

uint64_t sub_100B628A0()
{
  uint64_t v1 = (int *)(type metadata accessor for LostModeRecord() - 8);
  uint64_t v2 = *(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v3 = (v2 + 16) & ~v2;
  uint64_t v10 = v2 | 7;
  unint64_t v4 = (((*(void *)(*(void *)v1 + 64) + v3 + 7) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v5 = v0 + v3;
  sub_10001CFB8(*(void *)(v0 + v3), *(void *)(v0 + v3 + 8));
  uint64_t v6 = v5 + v1[7];
  uint64_t v7 = type metadata accessor for UUID();
  uint64_t v8 = *(void (**)(uint64_t, uint64_t))(*(void *)(v7 - 8) + 8);
  v8(v6, v7);
  v8(v5 + v1[8], v7);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();

  return _swift_deallocObject(v0, v4 + 16, v10);
}

uint64_t sub_100B62A24(uint64_t *a1)
{
  return sub_100B62A50(a1, (uint64_t (*)(void))type metadata accessor for LostModeRecord, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))sub_100ACB908);
}

uint64_t sub_100B62A50(uint64_t *a1, uint64_t (*a2)(void), uint64_t (*a3)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))
{
  uint64_t v5 = *(void *)(a2(0) - 8);
  unint64_t v6 = (*(unsigned __int8 *)(v5 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
  unint64_t v7 = (*(void *)(v5 + 64) + v6 + 7) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v8 = v3 + v6;
  uint64_t v9 = *(void *)(v3 + v7);
  uint64_t v10 = (uint64_t *)(v3 + ((v7 + 15) & 0xFFFFFFFFFFFFFFF8));
  uint64_t v11 = *v10;
  uint64_t v12 = v10[1];
  uint64_t v13 = *a1;

  return a3(v13, v8, v9, v11, v12);
}

uint64_t sub_100B62B14(uint64_t a1)
{
  return sub_100AC8FAC(a1, *(void *)(v1 + 16), *(id **)(v1 + 24), *(void *)(v1 + 32));
}

uint64_t sub_100B62B34()
{
  uint64_t v1 = (int *)(type metadata accessor for LostModeRecord() - 8);
  uint64_t v2 = *(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v3 = (v2 + 24) & ~v2;
  uint64_t v4 = v2 | 7;
  unint64_t v5 = ((*(void *)(*(void *)v1 + 64) + v3 + 7) & 0xFFFFFFFFFFFFFFF8) + 8;
  swift_release();
  uint64_t v6 = v0 + v3;
  sub_10001CFB8(*(void *)(v0 + v3), *(void *)(v0 + v3 + 8));
  uint64_t v7 = v0 + v3 + v1[7];
  uint64_t v8 = type metadata accessor for UUID();
  uint64_t v9 = *(void (**)(uint64_t, uint64_t))(*(void *)(v8 - 8) + 8);
  v9(v7, v8);
  v9(v6 + v1[8], v8);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();

  return _swift_deallocObject(v0, v5, v4);
}

void sub_100B62CA0(void **a1, uint64_t a2)
{
  uint64_t v5 = *(void *)(type metadata accessor for LostModeRecord() - 8);
  unint64_t v6 = (*(unsigned __int8 *)(v5 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
  sub_100ACA458(*a1, a2, *(void *)(v2 + 16), v2 + v6, *(void *)(v2 + ((*(void *)(v5 + 64) + v6 + 7) & 0xFFFFFFFFFFFFFFF8)), (uint64_t (*)(void))type metadata accessor for LostModeRecord, (uint64_t (*)(void))sub_100E92AFC, (uint64_t)sub_100B64420, (uint64_t (*)(void))type metadata accessor for LostModeRecord);
}

void sub_100B62D9C(char a1)
{
  sub_1008EA4F0(a1, *(NSObject **)(v1 + 16));
}

uint64_t sub_100B62DA8(uint64_t *a1, uint64_t (*a2)(void), uint64_t (*a3)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))
{
  uint64_t v5 = *(void *)(a2(0) - 8);
  unint64_t v6 = (*(unsigned __int8 *)(v5 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
  uint64_t v7 = *(void *)(v3 + 16);
  uint64_t v8 = *(void *)(v3 + 24);
  uint64_t v9 = v3 + v6;
  uint64_t v10 = (uint64_t *)(v3 + ((*(void *)(v5 + 64) + v6 + 7) & 0xFFFFFFFFFFFFFFF8));
  uint64_t v11 = *v10;
  uint64_t v12 = v10[1];
  uint64_t v13 = *a1;

  return a3(v13, v7, v8, v9, v11, v12);
}

uint64_t sub_100B62E68()
{
  uint64_t v1 = (int *)(type metadata accessor for LostModeRecord() - 8);
  uint64_t v2 = *(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v3 = (v2 + 32) & ~v2;
  uint64_t v4 = v2 | 7;
  unint64_t v5 = ((*(void *)(*(void *)v1 + 64) + v3 + 7) & 0xFFFFFFFFFFFFFFF8) + 16;
  swift_release();
  swift_release();
  uint64_t v6 = v0 + v3;
  sub_10001CFB8(*(void *)(v0 + v3), *(void *)(v0 + v3 + 8));
  uint64_t v7 = v0 + v3 + v1[7];
  uint64_t v8 = type metadata accessor for UUID();
  uint64_t v9 = *(void (**)(uint64_t, uint64_t))(*(void *)(v8 - 8) + 8);
  v9(v7, v8);
  v9(v6 + v1[8], v8);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();

  return _swift_deallocObject(v0, v5, v4);
}

uint64_t sub_100B62FE0(uint64_t a1, uint64_t (*a2)(void), uint64_t (*a3)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))
{
  uint64_t v5 = *(void *)(a2(0) - 8);
  unint64_t v6 = (*(unsigned __int8 *)(v5 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
  uint64_t v7 = *(void *)(v3 + 16);
  uint64_t v8 = *(void *)(v3 + 24);
  uint64_t v9 = v3 + v6;
  uint64_t v10 = (uint64_t *)(v3 + ((*(void *)(v5 + 64) + v6 + 7) & 0xFFFFFFFFFFFFFFF8));
  uint64_t v11 = *v10;
  uint64_t v12 = v10[1];

  return a3(a1, v7, v8, v9, v11, v12);
}

uint64_t sub_100B630A0(uint64_t a1)
{
  return sub_1008E8544(a1, *(void *)(v1 + 16), *(void *)(v1 + 24));
}

uint64_t sub_100B630A8(uint64_t a1)
{
  return sub_100AC0678(a1, v1[2], v1[3], v1[4]);
}

uint64_t sub_100B630C8(uint64_t a1)
{
  return sub_100AC5484(a1, *(void (**)(void *))(v1 + 16), *(void *)(v1 + 24), &qword_101651918, (uint64_t)"Save failed: %@", 15);
}

uint64_t sub_100B630F8()
{
  uint64_t v1 = (int *)(type metadata accessor for LostModeRecord() - 8);
  uint64_t v2 = *(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v3 = (v2 + 24) & ~v2;
  uint64_t v4 = v2 | 7;
  unint64_t v5 = ((*(void *)(*(void *)v1 + 64) + v3 + 7) & 0xFFFFFFFFFFFFFFF8) + 16;
  swift_release();
  uint64_t v6 = v0 + v3;
  sub_10001CFB8(*(void *)(v0 + v3), *(void *)(v0 + v3 + 8));
  uint64_t v7 = v0 + v3 + v1[7];
  uint64_t v8 = type metadata accessor for UUID();
  uint64_t v9 = *(void (**)(uint64_t, uint64_t))(*(void *)(v8 - 8) + 8);
  v9(v7, v8);
  v9(v6 + v1[8], v8);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();

  return _swift_deallocObject(v0, v5, v4);
}

uint64_t sub_100B63268(uint64_t *a1)
{
  return sub_100B57760(a1, (uint64_t (*)(void))type metadata accessor for LostModeRecord, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))sub_100AC6578);
}

uint64_t sub_100B63294()
{
  return sub_100B632C0();
}

uint64_t sub_100B632C0()
{
  return OS_dispatch_queue.sync<A>(execute:)();
}

uint64_t sub_100B63308()
{
  uint64_t v1 = (int *)(type metadata accessor for LostModeRecord() - 8);
  uint64_t v2 = *(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v3 = (v2 + 24) & ~v2;
  uint64_t v4 = *(void *)(*(void *)v1 + 64);
  uint64_t v12 = v2 | 7;
  unint64_t v5 = (v2 + ((v4 + v3 + 7) & 0xFFFFFFFFFFFFFFF8) + 8) & ~v2;
  uint64_t v6 = v5 + v4;
  swift_release();
  uint64_t v7 = v0 + v3;
  sub_10001CFB8(*(void *)(v0 + v3), *(void *)(v0 + v3 + 8));
  uint64_t v8 = v0 + v3 + v1[7];
  uint64_t v9 = type metadata accessor for UUID();
  uint64_t v10 = *(void (**)(uint64_t, uint64_t))(*(void *)(v9 - 8) + 8);
  v10(v8, v9);
  v10(v7 + v1[8], v9);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  sub_10001CFB8(*(void *)(v0 + v5), *(void *)(v0 + v5 + 8));
  v10(v0 + v5 + v1[7], v9);
  v10(v0 + v5 + v1[8], v9);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return _swift_deallocObject(v0, v6, v12);
}

void sub_100B634F8(uint64_t a1)
{
  uint64_t v3 = *(void *)(type metadata accessor for LostModeRecord() - 8);
  uint64_t v4 = *(unsigned __int8 *)(v3 + 80);
  uint64_t v5 = (v4 + 24) & ~v4;
  unint64_t v6 = (*(void *)(v3 + 64) + v5 + 7) & 0xFFFFFFFFFFFFFFF8;
  sub_100AC2F64(a1, *(void *)(v1 + 16), v1 + v5, *(void *)(v1 + v6), v1 + ((v4 + v6 + 8) & ~v4), (uint64_t (*)(void))type metadata accessor for LostModeRecord, &qword_101651918, (uint64_t (*)(void))type metadata accessor for LostModeRecord, (uint64_t)sub_100B64420, (uint64_t (*)(void))type metadata accessor for LostModeRecord);
}

uint64_t sub_100B63610(uint64_t a1)
{
  return sub_10046421C(a1, *(void (**)(uint64_t))(v1 + 16));
}

uint64_t sub_100B63618()
{
  uint64_t v1 = (int *)(type metadata accessor for OwnedBeaconGroup(0) - 8);
  uint64_t v2 = *(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v3 = (v2 + 32) & ~v2;
  uint64_t v4 = v3 + *(void *)(*(void *)v1 + 64);
  uint64_t v5 = v2 | 7;
  swift_release();
  uint64_t v6 = v0 + v3;
  sub_10001CFB8(*(void *)(v0 + v3), *(void *)(v0 + v3 + 8));
  uint64_t v7 = v0 + v3 + v1[8];
  uint64_t v8 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v8 - 8) + 8))(v7, v8);
  uint64_t v9 = v6 + v1[9];
  uint64_t v10 = type metadata accessor for MACAddress();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v10 - 8) + 8))(v9, v10);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return _swift_deallocObject(v0, v4, v5);
}

uint64_t sub_100B63770(id *a1)
{
  uint64_t v3 = *(void *)(type metadata accessor for OwnedBeaconGroup(0) - 8);
  return sub_100ACAB44(a1, *(void (**)(char *))(v1 + 16), *(void *)(v1 + 24), v1 + ((*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80)), type metadata accessor for OwnedBeaconGroup, (void (*)(id))sub_1004CFDAC, (void (*)(id *, char *))sub_101072710, type metadata accessor for OwnedBeaconGroup);
}

uint64_t sub_100B63828(uint64_t a1)
{
  return sub_100AC5484(a1, *(void (**)(void *))(v1 + 16), *(void *)(v1 + 24), &qword_10163C650, (uint64_t)"Update failed: %@", 17);
}

uint64_t sub_100B63858()
{
  uint64_t v1 = (int *)(type metadata accessor for OwnedBeaconGroup(0) - 8);
  uint64_t v2 = *(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v3 = (v2 + 16) & ~v2;
  uint64_t v4 = v2 | 7;
  unint64_t v5 = (((*(void *)(*(void *)v1 + 64) + v3 + 7) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v6 = v0 + v3;
  sub_10001CFB8(*(void *)(v0 + v3), *(void *)(v0 + v3 + 8));
  uint64_t v7 = v6 + v1[8];
  uint64_t v8 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v8 - 8) + 8))(v7, v8);
  uint64_t v9 = v6 + v1[9];
  uint64_t v10 = type metadata accessor for MACAddress();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v10 - 8) + 8))(v9, v10);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();

  return _swift_deallocObject(v0, v5 + 16, v4);
}

uint64_t sub_100B639D8(uint64_t a1)
{
  return sub_100B63A04(a1, type metadata accessor for OwnedBeaconGroup, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))sub_10107BCCC);
}

uint64_t sub_100B63A04(uint64_t a1, uint64_t (*a2)(void), uint64_t (*a3)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))
{
  uint64_t v5 = *(void *)(a2(0) - 8);
  unint64_t v6 = (*(unsigned __int8 *)(v5 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
  unint64_t v7 = (*(void *)(v5 + 64) + v6 + 7) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v8 = v3 + v6;
  uint64_t v9 = *(void *)(v3 + v7);
  uint64_t v10 = (uint64_t *)(v3 + ((v7 + 15) & 0xFFFFFFFFFFFFFFF8));
  uint64_t v11 = *v10;
  uint64_t v12 = v10[1];

  return a3(a1, v8, v9, v11, v12);
}

uint64_t sub_100B63AC8(uint64_t a1)
{
  return sub_100AC8A84(a1, *(void *)(v1 + 16), *(id **)(v1 + 24), *(void *)(v1 + 32));
}

uint64_t sub_100B63AE8()
{
  return sub_100B63B00((void (*)(void))&_swift_release);
}

uint64_t sub_100B63B00(void (*a1)(void))
{
  swift_release();
  a1(*(void *)(v1 + 32));

  return _swift_deallocObject(v1, 40, 7);
}

uint64_t sub_100B63B50()
{
  return sub_100B63B6C((void (*)(void))&_swift_release, 40);
}

uint64_t sub_100B63B6C(void (*a1)(void), uint64_t a2)
{
  a1(*(void *)(v2 + 16));
  swift_release();

  return _swift_deallocObject(v2, a2, 7);
}

unint64_t sub_100B63BC0()
{
  unint64_t result = qword_101659588;
  if (!qword_101659588)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_101659588);
  }
  return result;
}

unint64_t sub_100B63C14()
{
  unint64_t result = qword_101659590;
  if (!qword_101659590)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_101659590);
  }
  return result;
}

uint64_t sub_100B63C68()
{
  return sub_100AB3F8C();
}

uint64_t sub_100B63C70()
{
  return _swift_deallocObject(v0, 24, 7);
}

uint64_t sub_100B63C80@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  sub_100B4B3DC(a1, v4);
  return sub_10001D608((uint64_t)v4, a2, &qword_1016549D0);
}

void sub_100B63CC4(uint64_t a1, uint64_t a2, char a3)
{
}

uint64_t sub_100B63CCC(uint64_t a1)
{
  return swift_release();
}

void sub_100B63D1C(uint64_t a1, char a2)
{
}

uint64_t sub_100B63D28()
{
  return _swift_deallocObject(v0, 33, 7);
}

unint64_t sub_100B63D38()
{
  return sub_100AB5558();
}

unint64_t sub_100B63D44()
{
  unint64_t result = qword_1016595C8;
  if (!qword_1016595C8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1016595C8);
  }
  return result;
}

uint64_t getEnumTagSinglePayload for BeaconStore.BeaconsChangedNotificationReason(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0xE8) {
    goto LABEL_17;
  }
  if (a2 + 24 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 24) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 8)) - 24;
    }
  }
  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 8)) - 24;
    }
    int v4 = a1[1];
    if (a1[1]) {
      return (*a1 | (v4 << 8)) - 24;
    }
  }
LABEL_17:
  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 0x19;
  int v8 = v6 - 25;
  if (!v7) {
    int v8 = -1;
  }
  return (v8 + 1);
}

unsigned char *storeEnumTagSinglePayload for BeaconStore.BeaconsChangedNotificationReason(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 24 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 24) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xE8) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xE7)
  {
    unsigned int v6 = ((a2 - 232) >> 8) + 1;
    *unint64_t result = a2 + 24;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x100B63EF4);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 24;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for BeaconStore.BeaconsChangedNotificationReason()
{
  return &type metadata for BeaconStore.BeaconsChangedNotificationReason;
}

unsigned char *storeEnumTagSinglePayload for BeaconStore.BeaconStoreError(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 18 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 18) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xEE) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xED)
  {
    unsigned int v6 = ((a2 - 238) >> 8) + 1;
    *unint64_t result = a2 + 18;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x100B63FF8);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 18;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for BeaconStore.BeaconStoreError()
{
  return &type metadata for BeaconStore.BeaconStoreError;
}

unint64_t sub_100B64034()
{
  unint64_t result = qword_1016595E0;
  if (!qword_1016595E0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1016595E0);
  }
  return result;
}

unint64_t sub_100B6408C()
{
  unint64_t result = qword_1016595E8;
  if (!qword_1016595E8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1016595E8);
  }
  return result;
}

uint64_t sub_100B640E4@<X0>(uint64_t *a1@<X8>)
{
  return sub_100B30D74(a1);
}

void sub_100B64348()
{
}

void sub_100B64360()
{
}

void sub_100B64378()
{
}

void sub_100B64390()
{
}

void sub_100B643A8()
{
}

void sub_100B643C0()
{
}

void sub_100B643D8()
{
}

void sub_100B643F0()
{
}

void sub_100B64408()
{
}

void sub_100B64420()
{
}

uint64_t sub_100B64448(uint64_t a1)
{
  return sub_100B58A60(a1);
}

uint64_t sub_100B64460()
{
  return sub_100B5B3A8();
}

uint64_t sub_100B64478()
{
  return sub_100B5B814();
}

uint64_t sub_100B64490(uint64_t a1)
{
  return sub_100B5A680(a1);
}

uint64_t sub_100B644A8(uint64_t a1)
{
  return sub_100B5861C(a1);
}

uint64_t sub_100B644C0(uint64_t a1)
{
  return sub_100B576E0(a1);
}

uint64_t sub_100B644D8(uint64_t a1)
{
  return sub_100B5B144(a1);
}

uint64_t sub_100B644F0(uint64_t a1)
{
  return sub_100B614B8(a1);
}

uint64_t sub_100B64508()
{
  return sub_100B630A8();
}

unint64_t sub_100B64524(char a1)
{
  unint64_t result = 0xD000000000000044;
  switch(a1)
  {
    case 1:
      unint64_t result = 0xD000000000000047;
      break;
    case 2:
      unint64_t result = 0xD000000000000045;
      break;
    case 3:
      unint64_t result = 0xD000000000000049;
      break;
    case 4:
      unint64_t result = 0xD000000000000049;
      break;
    case 5:
      unint64_t result = 0xD00000000000004BLL;
      break;
    case 6:
      unint64_t result = 0xD00000000000004BLL;
      break;
    case 7:
    case 8:
      unint64_t result = 0xD000000000000036;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t sub_100B6461C(uint64_t a1, uint64_t a2, unsigned __int8 a3)
{
  uint64_t v5 = type metadata accessor for Date();
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v7 = __chkstk_darwin(v5);
  uint64_t v9 = &v33[-((v8 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __chkstk_darwin(v7);
  uint64_t v11 = &v33[-v10];
  uint64_t v12 = (0x66u >> a3) & 1;
  uint64_t ObjectType = swift_getObjectType();
  uint64_t v14 = (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(a2 + 56))(v12, (0x2Bu >> a3) & 1, ObjectType, a2);
  uint64_t v15 = *(void (**)(uint64_t, uint64_t, uint64_t))(a2 + 80);
  uint64_t v38 = v14;
  v15(v14, ObjectType, a2);
  uint64_t v16 = (uint64_t)v11;
  Date.timeIntervalSinceNow.getter();
  if ((~*(void *)&v17 & 0x7FF0000000000000) == 0)
  {
    __break(1u);
    goto LABEL_25;
  }
  if (v17 <= -9.22337204e18)
  {
LABEL_25:
    __break(1u);
    goto LABEL_26;
  }
  if (v17 < 9.22337204e18)
  {
    uint64_t v16 = (uint64_t)v17;
    if (qword_101636820 == -1) {
      goto LABEL_5;
    }
    goto LABEL_27;
  }
LABEL_26:
  __break(1u);
LABEL_27:
  swift_once();
LABEL_5:
  uint64_t v18 = v16 & ~(v16 >> 63);
  uint64_t v19 = type metadata accessor for Logger();
  sub_100010324(v19, (uint64_t)qword_10170D690);
  (*(void (**)(unsigned char *, unsigned char *, uint64_t))(v6 + 16))(v9, v11, v5);
  uint64_t v20 = Logger.logObject.getter();
  int v21 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v20, (os_log_type_t)v21))
  {
    unsigned int v34 = (0x2Bu >> a3) & 1;
    uint64_t v37 = v18;
    uint64_t v22 = a3;
    uint64_t v23 = swift_slowAlloc();
    uint64_t v35 = swift_slowAlloc();
    uint64_t v40 = v35;
    *(_DWORD *)uint64_t v23 = 136447490;
    unint64_t v24 = 0xE800000000000000;
    uint64_t v25 = 0x7265776F50776F6CLL;
    int v36 = v21;
    switch(v22)
    {
      case 1:
        unint64_t v24 = 0xEB00000000726577;
        uint64_t v25 = 0x6F506D756964656DLL;
        break;
      case 2:
        unint64_t v24 = 0xE900000000000072;
        uint64_t v25 = 0x65776F5068676968;
        break;
      case 3:
        uint64_t v27 = 0x694669576ELL;
        goto LABEL_12;
      case 4:
        uint64_t v27 = 0x6C6C65436ELL;
LABEL_12:
        unint64_t v24 = v27 & 0xFFFFFFFFFFFFLL | 0xED00000000000000;
        uint64_t v25 = 0x4F7265776F506E6FLL;
        break;
      case 5:
        unint64_t v24 = 0xEF694669576E4F79;
        goto LABEL_15;
      case 6:
        unint64_t v24 = 0xEF6C6C65436E4F79;
LABEL_15:
        uint64_t v25 = 0x7265747461426E6FLL;
        break;
      case 7:
        unint64_t v24 = 0xEF79627261654E6ELL;
        uint64_t v25 = 0x6F696E61706D6F63;
        break;
      case 8:
        unint64_t v24 = 0xEF646E756F466E65;
        uint64_t v25 = 0x6857796669746F6ELL;
        break;
      default:
        break;
    }
    uint64_t v39 = sub_1008FA0F0(v25, v24, &v40);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    *(_WORD *)(v23 + 12) = 1024;
    LODWORD(v39) = v12;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v23 + 18) = 1024;
    LODWORD(v39) = v34;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v23 + 24) = 2080;
    uint64_t v28 = 0x4669577265776F70;
    unint64_t v29 = 0xE900000000000069;
    switch((char)v38)
    {
      case 1:
        unint64_t v29 = 0xE90000000000006CLL;
        uint64_t v28 = 0x6C65437265776F70;
        break;
      case 2:
        unint64_t v29 = 0xEB00000000694669;
        uint64_t v28 = 0x5779726574746162;
        break;
      case 3:
        unint64_t v29 = 0xEB000000006C6C65;
        uint64_t v28 = 0x4379726574746162;
        break;
      default:
        break;
    }
    uint64_t v39 = sub_1008FA0F0(v28, v29, &v40);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    *(_WORD *)(v23 + 34) = 2082;
    sub_100B64C58();
    uint64_t v30 = dispatch thunk of CustomStringConvertible.description.getter();
    uint64_t v39 = sub_1008FA0F0(v30, v31, &v40);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    uint64_t v26 = *(void (**)(unsigned char *, uint64_t))(v6 + 8);
    v26(v9, v5);
    *(_WORD *)(v23 + 44) = 2048;
    uint64_t v18 = v37;
    uint64_t v39 = v37;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl((void *)&_mh_execute_header, v20, (os_log_type_t)v36, "Publish delay: policy:%{public}s onBattery: %{BOOL}d, onWiFi: %{BOOL}d, powerMode: %s, next publish date: %{public}s, delay: %lld.", (uint8_t *)v23, 0x36u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {

    uint64_t v26 = *(void (**)(unsigned char *, uint64_t))(v6 + 8);
    v26(v9, v5);
  }
  v26(v11, v5);
  return v18;
}

unint64_t sub_100B64C58()
{
  unint64_t result = qword_101638DA0;
  if (!qword_101638DA0)
  {
    type metadata accessor for Date();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_101638DA0);
  }
  return result;
}

uint64_t sub_100B64CB0()
{
  if (qword_101636CD8 != -1) {
    swift_once();
  }
  OS_dispatch_queue.sync<A>(execute:)();
  uint64_t v0 = sub_1010AB61C(v12);
  swift_bridgeObjectRelease();
  uint64_t v1 = *(void *)(v0 + 16);
  if (v1)
  {
    swift_bridgeObjectRetain();
    int v2 = (void **)(v0 + 40);
    int v3 = _swiftEmptyArrayStorage;
    do
    {
      uint64_t v4 = (uint64_t)*(v2 - 1);
      uint64_t v5 = *v2;
      swift_bridgeObjectRetain();
      v6._countAndFlagsBits = v4;
      v6._object = v5;
      unint64_t v7 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_10159F2C8, v6);
      swift_bridgeObjectRelease();
      if (v7 <= 8)
      {
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          int v3 = sub_100A6E8F4(0, v3[2] + 1, 1, v3);
        }
        unint64_t v9 = v3[2];
        unint64_t v8 = v3[3];
        if (v9 >= v8 >> 1) {
          int v3 = sub_100A6E8F4((void *)(v8 > 1), v9 + 1, 1, v3);
        }
        v3[2] = v9 + 1;
        *((unsigned char *)v3 + v9 + 32) = v7;
      }
      v2 += 2;
      --v1;
    }
    while (v1);
    swift_bridgeObjectRelease();
  }
  else
  {
    int v3 = _swiftEmptyArrayStorage;
  }
  swift_bridgeObjectRelease();
  uint64_t v10 = sub_1011585E0((uint64_t)v3);
  swift_bridgeObjectRelease();
  return v10;
}

unsigned char *storeEnumTagSinglePayload for TokenSequenceError(unsigned char *result, int a2, int a3)
{
  if ((a3 + 1) >= 0x10000) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) < 0x100) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2)
  {
    switch(v5)
    {
      case 1:
        *unint64_t result = a2;
        return result;
      case 2:
        *(_WORD *)unint64_t result = a2;
        return result;
      case 3:
        goto LABEL_19;
      case 4:
        *(_DWORD *)unint64_t result = a2;
        return result;
      default:
        return result;
    }
  }
  switch(v5)
  {
    case 1:
      *unint64_t result = 0;
      break;
    case 2:
      *(_WORD *)unint64_t result = 0;
      break;
    case 3:
LABEL_19:
      __break(1u);
      JUMPOUT(0x100B64F04);
    case 4:
      *(_DWORD *)unint64_t result = 0;
      break;
    default:
      return result;
  }
  return result;
}

ValueMetadata *type metadata accessor for TokenSequenceError()
{
  return &type metadata for TokenSequenceError;
}

unint64_t sub_100B64F40()
{
  unint64_t result = qword_1016595F0;
  if (!qword_1016595F0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1016595F0);
  }
  return result;
}

uint64_t sub_100B64F94@<X0>(uint64_t a1@<X8>)
{
  uint64_t v32 = a1;
  uint64_t v1 = sub_10000588C(&qword_101641B60);
  __chkstk_darwin(v1 - 8);
  int v3 = (char *)&v29 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = type metadata accessor for URLComponents();
  uint64_t v31 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v30 = (char *)&v29 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = type metadata accessor for FMNAccountType();
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  unint64_t v9 = (char *)&v29 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = sub_10000588C(&qword_101649E40);
  __chkstk_darwin(v10 - 8);
  uint64_t v12 = (char *)&v29 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = type metadata accessor for URL();
  uint64_t v14 = *(void *)(v13 - 8);
  __chkstk_darwin(v13);
  uint64_t v16 = (char *)&v29 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for FMNAuthenticationProvider();
  (*(void (**)(char *, void, uint64_t))(v7 + 104))(v9, enum case for FMNAccountType.secureLocations(_:), v6);
  static FMNAuthenticationProvider.configurationURL(accountType:)();
  (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v14 + 48))(v12, 1, v13) == 1)
  {
    double v17 = &qword_101649E40;
    uint64_t v18 = (uint64_t)v12;
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v14 + 32))(v16, v12, v13);
    URLComponents.init(url:resolvingAgainstBaseURL:)();
    uint64_t v19 = v31;
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v31 + 48))(v3, 1, v4) != 1)
    {
      uint64_t v25 = *(void (**)(char *, char *, uint64_t))(v19 + 32);
      uint64_t v26 = v30;
      v25(v30, v3, v4);
      uint64_t v27 = (void (*)(unsigned char *, void))URLComponents.path.modify();
      v28._countAndFlagsBits = 0x7263736275736E75;
      v28._object = (void *)0xEB00000000656269;
      String.append(_:)(v28);
      v27(v33, 0);
      (*(void (**)(char *, uint64_t))(v14 + 8))(v16, v13);
      return ((uint64_t (*)(uint64_t, char *, uint64_t))v25)(v32, v26, v4);
    }
    (*(void (**)(char *, uint64_t))(v14 + 8))(v16, v13);
    double v17 = &qword_101641B60;
    uint64_t v18 = (uint64_t)v3;
  }
  sub_10001DAB4(v18, v17);
  if (qword_101637070 != -1) {
    swift_once();
  }
  uint64_t v20 = type metadata accessor for Logger();
  sub_100010324(v20, (uint64_t)qword_10170EC30);
  int v21 = Logger.logObject.getter();
  os_log_type_t v22 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v21, v22))
  {
    uint64_t v23 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v23 = 0;
    _os_log_impl((void *)&_mh_execute_header, v21, v22, "No url found in account bag.", v23, 2u);
    swift_slowDealloc();
  }

  URLComponents.init()();
  URLComponents.scheme.setter();
  URLComponents.path.setter();
  return URLComponents.host.setter();
}

uint64_t sub_100B6549C(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v14 = a5;
  uint64_t v15 = a4;
  uint64_t v7 = sub_10000588C(&qword_1016596B8);
  uint64_t v8 = *(void *)(v7 - 8);
  __chkstk_darwin(v7);
  uint64_t v10 = (char *)&v13 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10001CD44(a1, a1[3]);
  sub_100B66394();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  LOBYTE(v17) = 0;
  KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
  if (!v5)
  {
    uint64_t v11 = v14;
    uint64_t v17 = v15;
    char v16 = 1;
    sub_10000588C((uint64_t *)&unk_10164DBD0);
    sub_100B663E8((unint64_t *)&qword_10163F7E0, (uint64_t *)&unk_10164DBD0, (void (*)(void))sub_100037BB4);
    KeyedEncodingContainer.encode<A>(_:forKey:)();
    uint64_t v17 = v11;
    char v16 = 2;
    type metadata accessor for SPSecureLocationSubscriptionMode(0);
    sub_1004CB4F0();
    KeyedEncodingContainer.encode<A>(_:forKey:)();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v8 + 8))(v10, v7);
}

uint64_t sub_100B6569C()
{
  uint64_t v1 = 7562345;
  if (*v0 != 1) {
    uint64_t v1 = 1701080941;
  }
  if (*v0) {
    return v1;
  }
  else {
    return 1682533734;
  }
}

uint64_t sub_100B656E0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_100B66878(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_100B65708(uint64_t a1)
{
  unint64_t v2 = sub_100B66394();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_100B65744(uint64_t a1)
{
  unint64_t v2 = sub_100B66394();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_100B65780(void *a1)
{
  return sub_100B6549C(a1, *v1, v1[1], v1[2], v1[3]);
}

uint64_t sub_100B657A0(void *a1)
{
  uint64_t v3 = v1;
  uint64_t v5 = sub_10000588C(&qword_101659690);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v8 = (char *)v13 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10001CD44(a1, a1[3]);
  sub_100B662EC();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  *(void *)&v13[0] = *(void *)v3;
  char v15 = 0;
  sub_10000588C(&qword_1016596A0);
  sub_100B663E8(&qword_1016596A8, &qword_1016596A0, (void (*)(void))sub_100B66340);
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  if (!v2)
  {
    long long v9 = *(_OWORD *)(v3 + 88);
    v13[4] = *(_OWORD *)(v3 + 72);
    void v13[5] = v9;
    v13[6] = *(_OWORD *)(v3 + 104);
    uint64_t v14 = *(void *)(v3 + 120);
    long long v10 = *(_OWORD *)(v3 + 24);
    v13[0] = *(_OWORD *)(v3 + 8);
    v13[1] = v10;
    long long v11 = *(_OWORD *)(v3 + 56);
    v13[2] = *(_OWORD *)(v3 + 40);
    v13[3] = v11;
    char v15 = 1;
    sub_1004CABF4();
    KeyedEncodingContainer.encode<A>(_:forKey:)();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
}

uint64_t sub_100B6598C()
{
  if (*v0) {
    return 0x6F43746E65696C63;
  }
  else {
    return 0x7263736275736E75;
  }
}

uint64_t sub_100B659DC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_100B669A0(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_100B65A04(uint64_t a1)
{
  unint64_t v2 = sub_100B662EC();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_100B65A40(uint64_t a1)
{
  unint64_t v2 = sub_100B662EC();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_100B65A7C(void *a1)
{
  return sub_100B657A0(a1);
}

id sub_100B65AC8(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = a1;
  if (!*(void *)(a1 + 16))
  {
    swift_bridgeObjectRelease();
    sub_1004CA21C(a2);
    return 0;
  }
  uint64_t v4 = *(void *)a2;
  uint64_t v5 = *(void *)(a2 + 8);
  uint64_t v6 = *(void *)(a2 + 16);
  uint64_t v7 = *(void *)(a2 + 24);
  uint64_t v8 = *(void *)(a2 + 32);
  long long v36 = *(_OWORD *)(a2 + 40);
  uint64_t v9 = *(void *)(a2 + 56);
  uint64_t v34 = *(void *)(a2 + 72);
  uint64_t v35 = *(void *)(a2 + 64);
  uint64_t v32 = *(void *)(a2 + 88);
  uint64_t v33 = *(void *)(a2 + 80);
  uint64_t v31 = *(void *)(a2 + 96);
  char v30 = *(unsigned char *)(a2 + 104);
  uint64_t v29 = *(void *)(a2 + 112);
  unint64_t v10 = sub_10092D8F8((uint64_t)_swiftEmptyArrayStorage);
  unint64_t v47 = v10;
  id result = [self currentDevice];
  if (result)
  {
    uint64_t v12 = result;
    id v13 = [result serverFriendlyDescription];

    if (v13)
    {
      uint64_t v14 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      uint64_t v28 = v3;
      uint64_t v15 = v8;
      uint64_t v16 = v7;
      uint64_t v17 = v6;
      uint64_t v18 = v5;
      uint64_t v19 = v4;
      uint64_t v20 = v9;
      uint64_t v22 = v21;

      char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      v37[0] = v10;
      unint64_t v47 = 0x8000000000000000;
      uint64_t v24 = v22;
      uint64_t v9 = v20;
      uint64_t v4 = v19;
      uint64_t v5 = v18;
      uint64_t v6 = v17;
      uint64_t v7 = v16;
      uint64_t v8 = v15;
      uint64_t v3 = v28;
      sub_10016C0FC(v14, v24, 0xD000000000000011, 0x80000001013F64E0, isUniquelyReferenced_nonNull_native);
      swift_bridgeObjectRelease();
    }
    else
    {
      sub_100163690(0xD000000000000011, 0x80000001013F64E0);
      swift_bridgeObjectRelease();
      unint64_t v10 = v47;
    }
    char v25 = swift_isUniquelyReferenced_nonNull_native();
    sub_10016C0FC(49, 0xE100000000000000, 0x562D747065636341, 0xEE006E6F69737265, v25);
    swift_bridgeObjectRelease();
    char v26 = swift_isUniquelyReferenced_nonNull_native();
    sub_10016C0FC(0xD000000000000010, 0x80000001013F87B0, 0x2D746E65746E6F43, 0xEC00000065707954, v26);
    unint64_t v27 = v10;
    unint64_t v47 = v10;
    swift_bridgeObjectRelease();
    v37[0] = v3;
    v37[1] = v4;
    v37[2] = v5;
    v37[3] = v6;
    v37[4] = v7;
    v37[5] = v8;
    long long v38 = v36;
    uint64_t v39 = v9;
    uint64_t v40 = v35;
    uint64_t v41 = v34;
    uint64_t v42 = v33;
    uint64_t v43 = v32;
    uint64_t v44 = v31;
    char v45 = v30;
    uint64_t v46 = v29;
    type metadata accessor for JSONEncoder();
    swift_allocObject();
    JSONEncoder.init()();
    sub_100B65EF8();
    dispatch thunk of JSONEncoder.encode<A>(_:)();
    swift_release();
    sub_1004CA194((uint64_t)v37);
    return (id)v27;
  }
  __break(1u);
  return result;
}

unint64_t sub_100B65EF8()
{
  unint64_t result = qword_1016595F8;
  if (!qword_1016595F8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1016595F8);
  }
  return result;
}

ValueMetadata *type metadata accessor for SecureLocationsUnsubscribeBody()
{
  return &type metadata for SecureLocationsUnsubscribeBody;
}

ValueMetadata *type metadata accessor for SecureLocationsUnsubscribeRequest()
{
  return &type metadata for SecureLocationsUnsubscribeRequest;
}

void *initializeWithCopy for SecureLocationsUnsubscribeData(void *a1, void *a2)
{
  uint64_t v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  uint64_t v4 = a2[3];
  a1[2] = a2[2];
  a1[3] = v4;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

void *assignWithCopy for SecureLocationsUnsubscribeData(void *a1, void *a2)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[3] = a2[3];
  return a1;
}

uint64_t assignWithTake for SecureLocationsUnsubscribeData(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  swift_bridgeObjectRelease();
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  return a1;
}

ValueMetadata *type metadata accessor for SecureLocationsUnsubscribeData()
{
  return &type metadata for SecureLocationsUnsubscribeData;
}

uint64_t sub_100B6607C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_100B66090);
}

uint64_t sub_100B66090(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for FMNAccountType();
  uint64_t v7 = *(void *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == a2)
  {
    uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    return v8(a1, a2, v6);
  }
  else
  {
    uint64_t v10 = type metadata accessor for URLComponents();
    long long v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 48);
    uint64_t v12 = v10;
    uint64_t v13 = a1 + *(int *)(a3 + 20);
    return v11(v13, a2, v12);
  }
}

uint64_t sub_100B66188(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_100B6619C);
}

uint64_t sub_100B6619C(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v8 = type metadata accessor for FMNAccountType();
  uint64_t v9 = *(void *)(v8 - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    uint64_t v10 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    return v10(a1, a2, a2, v8);
  }
  else
  {
    uint64_t v12 = type metadata accessor for URLComponents();
    uint64_t v13 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v12 - 8) + 56);
    uint64_t v14 = v12;
    uint64_t v15 = a1 + *(int *)(a4 + 20);
    return v13(v15, a2, a2, v14);
  }
}

uint64_t type metadata accessor for SecureLocationsUnsubscribeEndpoint()
{
  uint64_t result = qword_101659658;
  if (!qword_101659658) {
    return swift_getSingletonMetadata();
  }
  return result;
}

unint64_t sub_100B662EC()
{
  unint64_t result = qword_101659698;
  if (!qword_101659698)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_101659698);
  }
  return result;
}

unint64_t sub_100B66340()
{
  unint64_t result = qword_1016596B0;
  if (!qword_1016596B0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1016596B0);
  }
  return result;
}

unint64_t sub_100B66394()
{
  unint64_t result = qword_1016596C0;
  if (!qword_1016596C0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1016596C0);
  }
  return result;
}

uint64_t sub_100B663E8(unint64_t *a1, uint64_t *a2, void (*a3)(void))
{
  uint64_t result = *a1;
  if (!result)
  {
    sub_10000592C(a2);
    a3();
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

unsigned char *storeEnumTagSinglePayload for SecureLocationsUnsubscribeData.CodingKeys(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 2 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 2) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFE) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFD)
  {
    unsigned int v6 = ((a2 - 254) >> 8) + 1;
    *uint64_t result = a2 + 2;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x100B6652CLL);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 2;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for SecureLocationsUnsubscribeData.CodingKeys()
{
  return &type metadata for SecureLocationsUnsubscribeData.CodingKeys;
}

unsigned char *storeEnumTagSinglePayload for SecureLocationsUnsubscribeBody.CodingKeys(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFE)
  {
    unsigned int v6 = ((a2 - 255) >> 8) + 1;
    *uint64_t result = a2 + 1;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x100B66630);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 1;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for SecureLocationsUnsubscribeBody.CodingKeys()
{
  return &type metadata for SecureLocationsUnsubscribeBody.CodingKeys;
}

unint64_t sub_100B6666C()
{
  unint64_t result = qword_1016596C8;
  if (!qword_1016596C8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1016596C8);
  }
  return result;
}

unint64_t sub_100B666C4()
{
  unint64_t result = qword_1016596D0;
  if (!qword_1016596D0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1016596D0);
  }
  return result;
}

unint64_t sub_100B6671C()
{
  unint64_t result = qword_1016596D8;
  if (!qword_1016596D8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1016596D8);
  }
  return result;
}

unint64_t sub_100B66774()
{
  unint64_t result = qword_1016596E0;
  if (!qword_1016596E0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1016596E0);
  }
  return result;
}

unint64_t sub_100B667CC()
{
  unint64_t result = qword_1016596E8;
  if (!qword_1016596E8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1016596E8);
  }
  return result;
}

unint64_t sub_100B66824()
{
  unint64_t result = qword_1016596F0;
  if (!qword_1016596F0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1016596F0);
  }
  return result;
}

uint64_t sub_100B66878(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 1682533734 && a2 == 0xE400000000000000;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 7562345 && a2 == 0xE300000000000000 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 1701080941 && a2 == 0xE400000000000000)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else
  {
    char v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v6) {
      return 2;
    }
    else {
      return 3;
    }
  }
}

uint64_t sub_100B669A0(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 0x7263736275736E75 && a2 == 0xEB00000000656269;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x6F43746E65696C63 && a2 == 0xED0000747865746ELL)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else
  {
    char v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v6) {
      return 1;
    }
    else {
      return 2;
    }
  }
}

uint64_t sub_100B66AD0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, char a6@<W5>, char a7@<W6>, uint64_t *a8@<X8>)
{
  if (a7)
  {
    if (a6)
    {
      uint64_t v14 = type metadata accessor for ItemShareInviteReceivedAirTagWithBlockedMembersUserNotification(0);
      uint64_t v15 = &off_1015EA5F8;
    }
    else
    {
      uint64_t v14 = type metadata accessor for ItemShareInviteReceivedWithBlockedMembersUserNotification(0);
      uint64_t v15 = &off_1015EA660;
    }
  }
  else if (a6)
  {
    uint64_t v14 = type metadata accessor for ItemShareInviteReceivedAirTagUserNotification(0);
    uint64_t v15 = &off_1015EA6C8;
  }
  else
  {
    uint64_t v14 = type metadata accessor for ItemShareInviteReceivedUserNotification(0);
    uint64_t v15 = &off_1015EA730;
  }
  a8[3] = v14;
  a8[4] = (uint64_t)v15;
  uint64_t v16 = sub_10001D958(a8);
  sub_1002C506C(a1, (uint64_t)v16);
  uint64_t v17 = (uint64_t *)((char *)v16 + *(int *)(v14 + 20));
  *uint64_t v17 = a2;
  v17[1] = a3;
  uint64_t v18 = (uint64_t *)((char *)v16 + *(int *)(v14 + 24));
  void *v18 = a4;
  v18[1] = a5;
  swift_bridgeObjectRetain();

  return swift_bridgeObjectRetain();
}

uint64_t type metadata accessor for ItemShareInviteReceivedUserNotification(uint64_t a1)
{
  return sub_1000F4EA4(a1, qword_101659918);
}

uint64_t type metadata accessor for ItemShareInviteReceivedAirTagUserNotification(uint64_t a1)
{
  return sub_1000F4EA4(a1, qword_101659880);
}

uint64_t type metadata accessor for ItemShareInviteReceivedWithBlockedMembersUserNotification(uint64_t a1)
{
  return sub_1000F4EA4(a1, qword_1016597E8);
}

uint64_t type metadata accessor for ItemShareInviteReceivedAirTagWithBlockedMembersUserNotification(uint64_t a1)
{
  return sub_1000F4EA4(a1, qword_101659750);
}

uint64_t sub_100B66C60(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_100B66C74);
}

uint64_t sub_100B66C78(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_100B66C8C);
}

uint64_t sub_100B66C94(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_100B66CA8);
}

uint64_t sub_100B66CAC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_100B66CC0);
}

uint64_t sub_100B66CC4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_100B66CD8);
}

uint64_t sub_100B66CDC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_100B66CF0);
}

uint64_t *sub_100B66CF4(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v23 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v23 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v7 = *a2;
    unint64_t v8 = a2[1];
    sub_1000361E0(*a2, v8);
    *a1 = v7;
    a1[1] = v8;
    uint64_t v9 = (int *)type metadata accessor for MemberSharingCircle();
    uint64_t v10 = v9[5];
    long long v11 = (char *)a1 + v10;
    uint64_t v12 = (char *)a2 + v10;
    uint64_t v13 = type metadata accessor for UUID();
    uint64_t v14 = *(void (**)(char *, char *, uint64_t))(*(void *)(v13 - 8) + 16);
    v14(v11, v12, v13);
    v14((char *)a1 + v9[6], (char *)a2 + v9[6], v13);
    v14((char *)a1 + v9[7], (char *)a2 + v9[7], v13);
    v14((char *)a1 + v9[8], (char *)a2 + v9[8], v13);
    *(uint64_t *)((char *)a1 + v9[9]) = *(uint64_t *)((char *)a2 + v9[9]);
    *((unsigned char *)a1 + v9[10]) = *((unsigned char *)a2 + v9[10]);
    uint64_t v15 = *(int *)(a3 + 20);
    uint64_t v16 = *(int *)(a3 + 24);
    uint64_t v17 = (uint64_t *)((char *)a1 + v15);
    uint64_t v18 = (uint64_t *)((char *)a2 + v15);
    uint64_t v19 = v18[1];
    *uint64_t v17 = *v18;
    v17[1] = v19;
    uint64_t v20 = (uint64_t *)((char *)a1 + v16);
    uint64_t v21 = (uint64_t *)((char *)a2 + v16);
    uint64_t v22 = v21[1];
    *uint64_t v20 = *v21;
    v20[1] = v22;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  return a1;
}

uint64_t sub_100B66EA0(uint64_t a1)
{
  sub_10001CFB8(*(void *)a1, *(void *)(a1 + 8));
  BOOL v2 = (int *)type metadata accessor for MemberSharingCircle();
  uint64_t v3 = a1 + v2[5];
  uint64_t v4 = type metadata accessor for UUID();
  int v5 = *(void (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8);
  v5(v3, v4);
  v5(a1 + v2[6], v4);
  v5(a1 + v2[7], v4);
  v5(a1 + v2[8], v4);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return swift_bridgeObjectRelease();
}

uint64_t *sub_100B66FB8(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6 = *a2;
  unint64_t v7 = a2[1];
  sub_1000361E0(*a2, v7);
  *a1 = v6;
  a1[1] = v7;
  unint64_t v8 = (int *)type metadata accessor for MemberSharingCircle();
  uint64_t v9 = v8[5];
  uint64_t v10 = (char *)a1 + v9;
  long long v11 = (char *)a2 + v9;
  uint64_t v12 = type metadata accessor for UUID();
  uint64_t v13 = *(void (**)(char *, char *, uint64_t))(*(void *)(v12 - 8) + 16);
  v13(v10, v11, v12);
  v13((char *)a1 + v8[6], (char *)a2 + v8[6], v12);
  v13((char *)a1 + v8[7], (char *)a2 + v8[7], v12);
  v13((char *)a1 + v8[8], (char *)a2 + v8[8], v12);
  *(uint64_t *)((char *)a1 + v8[9]) = *(uint64_t *)((char *)a2 + v8[9]);
  *((unsigned char *)a1 + v8[10]) = *((unsigned char *)a2 + v8[10]);
  uint64_t v14 = *(int *)(a3 + 20);
  uint64_t v15 = *(int *)(a3 + 24);
  uint64_t v16 = (uint64_t *)((char *)a1 + v14);
  uint64_t v17 = (uint64_t *)((char *)a2 + v14);
  uint64_t v18 = v17[1];
  *uint64_t v16 = *v17;
  v16[1] = v18;
  uint64_t v19 = (uint64_t *)((char *)a1 + v15);
  uint64_t v20 = (uint64_t *)((char *)a2 + v15);
  uint64_t v21 = v20[1];
  *uint64_t v19 = *v20;
  v19[1] = v21;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t *sub_100B67114(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6 = *a2;
  unint64_t v7 = a2[1];
  sub_1000361E0(*a2, v7);
  uint64_t v8 = *a1;
  unint64_t v9 = a1[1];
  *a1 = v6;
  a1[1] = v7;
  sub_10001CFB8(v8, v9);
  uint64_t v10 = (int *)type metadata accessor for MemberSharingCircle();
  uint64_t v11 = v10[5];
  uint64_t v12 = (char *)a1 + v11;
  uint64_t v13 = (char *)a2 + v11;
  uint64_t v14 = type metadata accessor for UUID();
  uint64_t v15 = *(void (**)(char *, char *, uint64_t))(*(void *)(v14 - 8) + 24);
  v15(v12, v13, v14);
  v15((char *)a1 + v10[6], (char *)a2 + v10[6], v14);
  v15((char *)a1 + v10[7], (char *)a2 + v10[7], v14);
  v15((char *)a1 + v10[8], (char *)a2 + v10[8], v14);
  *(uint64_t *)((char *)a1 + v10[9]) = *(uint64_t *)((char *)a2 + v10[9]);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *((unsigned char *)a1 + v10[10]) = *((unsigned char *)a2 + v10[10]);
  uint64_t v16 = *(int *)(a3 + 20);
  uint64_t v17 = (uint64_t *)((char *)a1 + v16);
  uint64_t v18 = (uint64_t *)((char *)a2 + v16);
  *uint64_t v17 = *v18;
  v17[1] = v18[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v19 = *(int *)(a3 + 24);
  uint64_t v20 = (uint64_t *)((char *)a1 + v19);
  uint64_t v21 = (uint64_t *)((char *)a2 + v19);
  *uint64_t v20 = *v21;
  v20[1] = v21[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

char *sub_100B672A8(char *a1, char *a2, uint64_t a3)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  uint64_t v6 = (int *)type metadata accessor for MemberSharingCircle();
  uint64_t v7 = v6[5];
  uint64_t v8 = &a1[v7];
  unint64_t v9 = &a2[v7];
  uint64_t v10 = type metadata accessor for UUID();
  uint64_t v11 = *(void (**)(char *, char *, uint64_t))(*(void *)(v10 - 8) + 32);
  v11(v8, v9, v10);
  v11(&a1[v6[6]], &a2[v6[6]], v10);
  v11(&a1[v6[7]], &a2[v6[7]], v10);
  v11(&a1[v6[8]], &a2[v6[8]], v10);
  *(void *)&a1[v6[9]] = *(void *)&a2[v6[9]];
  a1[v6[10]] = a2[v6[10]];
  uint64_t v12 = *(int *)(a3 + 24);
  *(_OWORD *)&a1[*(int *)(a3 + 20)] = *(_OWORD *)&a2[*(int *)(a3 + 20)];
  *(_OWORD *)&a1[v12] = *(_OWORD *)&a2[v12];
  return a1;
}

uint64_t *sub_100B673D4(uint64_t *a1, char *a2, uint64_t a3)
{
  uint64_t v6 = *a1;
  unint64_t v7 = a1[1];
  *(_OWORD *)a1 = *(_OWORD *)a2;
  sub_10001CFB8(v6, v7);
  uint64_t v8 = (int *)type metadata accessor for MemberSharingCircle();
  uint64_t v9 = v8[5];
  uint64_t v10 = (char *)a1 + v9;
  uint64_t v11 = &a2[v9];
  uint64_t v12 = type metadata accessor for UUID();
  uint64_t v13 = *(void (**)(char *, char *, uint64_t))(*(void *)(v12 - 8) + 40);
  v13(v10, v11, v12);
  v13((char *)a1 + v8[6], &a2[v8[6]], v12);
  v13((char *)a1 + v8[7], &a2[v8[7]], v12);
  v13((char *)a1 + v8[8], &a2[v8[8]], v12);
  *(uint64_t *)((char *)a1 + v8[9]) = *(void *)&a2[v8[9]];
  swift_bridgeObjectRelease();
  *((unsigned char *)a1 + v8[10]) = a2[v8[10]];
  uint64_t v14 = *(int *)(a3 + 20);
  uint64_t v15 = (uint64_t *)((char *)a1 + v14);
  uint64_t v16 = (uint64_t *)&a2[v14];
  uint64_t v18 = *v16;
  uint64_t v17 = v16[1];
  void *v15 = v18;
  v15[1] = v17;
  swift_bridgeObjectRelease();
  uint64_t v19 = *(int *)(a3 + 24);
  uint64_t v20 = (uint64_t *)((char *)a1 + v19);
  uint64_t v21 = (uint64_t *)&a2[v19];
  uint64_t v23 = *v21;
  uint64_t v22 = v21[1];
  *uint64_t v20 = v23;
  v20[1] = v22;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t sub_100B67538(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_100B6754C);
}

uint64_t sub_100B67550(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for MemberSharingCircle();
  uint64_t v7 = *(void *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == a2)
  {
    uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    return v8(a1, a2, v6);
  }
  else
  {
    unint64_t v10 = *(void *)(a1 + *(int *)(a3 + 20) + 8);
    if (v10 >= 0xFFFFFFFF) {
      LODWORD(v10) = -1;
    }
    return (v10 + 1);
  }
}

uint64_t sub_100B67614(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_100B67628);
}

uint64_t sub_100B6762C(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result = type metadata accessor for MemberSharingCircle();
  uint64_t v9 = *(void *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    unint64_t v10 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    return v10(a1, a2, a2, result);
  }
  else
  {
    *(void *)(a1 + *(int *)(a4 + 20) + 8) = (a2 - 1);
  }
  return result;
}

uint64_t sub_100B676EC()
{
  uint64_t result = type metadata accessor for MemberSharingCircle();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t sub_100B67784(uint64_t (*a1)(void))
{
  uint64_t v3 = type metadata accessor for LocalizationUtility.Table();
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  uint64_t v6 = &v12[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)];
  sub_10000588C(&qword_1016552B0);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_101342130;
  uint64_t v8 = (void *)(v1 + *(int *)(a1(0) + 20));
  uint64_t v9 = v8[1];
  *(void *)(inited + 32) = *v8;
  *(void *)(inited + 40) = v9;
  (*(void (**)(unsigned char *, void, uint64_t))(v4 + 104))(v6, enum case for LocalizationUtility.Table.itemSharing(_:), v3);
  swift_bridgeObjectRetain();
  static LocalizationUtility.localizedString(key:table:)();
  (*(void (**)(unsigned char *, uint64_t))(v4 + 8))(v6, v3);
  sub_100A9A508(inited);
  swift_setDeallocating();
  swift_arrayDestroy();
  uint64_t v10 = String.init(format:arguments:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v10;
}

uint64_t sub_100B6794C(uint64_t (*a1)(void))
{
  uint64_t v3 = type metadata accessor for LocalizationUtility.Table();
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  uint64_t v6 = &v14[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)];
  sub_10000588C(&qword_1016552B0);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_101342130;
  uint64_t v8 = *(void *)(v1 + *(int *)(a1(0) + 24));
  swift_bridgeObjectRetain();
  uint64_t v9 = sub_101115048(v8);
  uint64_t v11 = v10;
  swift_bridgeObjectRelease();
  *(void *)(inited + 32) = v9;
  *(void *)(inited + 40) = v11;
  (*(void (**)(unsigned char *, void, uint64_t))(v4 + 104))(v6, enum case for LocalizationUtility.Table.itemSharing(_:), v3);
  static LocalizationUtility.localizedString(key:table:)();
  (*(void (**)(unsigned char *, uint64_t))(v4 + 8))(v6, v3);
  sub_100A9A508(inited);
  swift_setDeallocating();
  swift_arrayDestroy();
  uint64_t v12 = String.init(format:arguments:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v12;
}

uint64_t sub_100B67B30()
{
  return 97;
}

uint64_t sub_100B67B38()
{
  return sub_100B67784(type metadata accessor for ItemShareInviteReceivedUserNotification);
}

uint64_t sub_100B67B64()
{
  return sub_100B6794C(type metadata accessor for ItemShareInviteReceivedUserNotification);
}

uint64_t sub_100B67BAC()
{
  return sub_100B67784(type metadata accessor for ItemShareInviteReceivedWithBlockedMembersUserNotification);
}

uint64_t sub_100B67BD8()
{
  return sub_100B6794C(type metadata accessor for ItemShareInviteReceivedWithBlockedMembersUserNotification);
}

uint64_t sub_100B67C1C()
{
  return sub_100B67784(type metadata accessor for ItemShareInviteReceivedAirTagUserNotification);
}

uint64_t sub_100B67C48()
{
  return sub_100B6794C(type metadata accessor for ItemShareInviteReceivedAirTagUserNotification);
}

uint64_t sub_100B67C8C()
{
  return sub_100B67784(type metadata accessor for ItemShareInviteReceivedAirTagWithBlockedMembersUserNotification);
}

uint64_t sub_100B67CB8()
{
  return sub_100B6794C(type metadata accessor for ItemShareInviteReceivedAirTagWithBlockedMembersUserNotification);
}

unint64_t sub_100B67CFC()
{
  sub_10000588C((uint64_t *)&unk_101637F00);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_101342130;
  *(void *)(inited + 32) = 0x6564496572616873;
  *(void *)(inited + 40) = 0xEF7265696669746ELL;
  type metadata accessor for MemberSharingCircle();
  uint64_t v1 = UUID.uuidString.getter();
  *(void *)(inited + 72) = &type metadata for String;
  *(void *)(inited + 48) = v1;
  *(void *)(inited + 56) = v2;
  return sub_10092CEEC(inited);
}

ValueMetadata *type metadata accessor for AccessorySetMaxConnectionsPayload()
{
  return &type metadata for AccessorySetMaxConnectionsPayload;
}

uint64_t sub_100B67DA4@<X0>(void *a1@<X0>, unsigned char *a2@<X8>)
{
  uint64_t result = sub_100B67E54(a1);
  if (!v2) {
    *a2 = result;
  }
  return result;
}

unint64_t sub_100B67DD0(uint64_t a1)
{
  *(void *)(a1 + 8) = sub_100B67E00();
  unint64_t result = sub_1002A59B8();
  *(void *)(a1 + 16) = result;
  return result;
}

unint64_t sub_100B67E00()
{
  unint64_t result = qword_101659958;
  if (!qword_101659958)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_101659958);
  }
  return result;
}

uint64_t sub_100B67E54(void *a1)
{
  uint64_t v3 = type metadata accessor for Endianness();
  __chkstk_darwin(v3 - 8);
  sub_10001CD44(a1, a1[3]);
  dispatch thunk of BinaryDecoding.container()();
  uint64_t v4 = sub_1000BD078((uint64_t)v13, v14);
  uint64_t v5 = dispatch thunk of BinaryDecodingContaining.decode(length:)();
  if (!v1)
  {
    uint64_t v7 = v5;
    unint64_t v8 = v6;
    sub_1000361E0(v5, v6);
    static Endianness.current.getter();
    sub_10006145C();
    FixedWidthInteger.init(data:ofEndianness:)();
    if (v12 != 1)
    {
      uint64_t v4 = v11;
      sub_10001CFB8(v7, v8);
      _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)v13);
      _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)a1);
      return v4;
    }
    uint64_t v4 = type metadata accessor for BinaryDecodingError();
    sub_100499A70();
    swift_allocError();
    (*(void (**)(uint64_t, void, uint64_t))(*(void *)(v4 - 8) + 104))(v9, enum case for BinaryDecodingError.decodingError(_:), v4);
    swift_willThrow();
    sub_10001CFB8(v7, v8);
  }
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)v13);
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)a1);
  return v4;
}

uint64_t sub_100B68024()
{
  int64_t v2 = v0[3];
  uint64_t v1 = v0[4];
  int64_t v3 = v2;
  if (!v1)
  {
    int64_t v6 = v2 + 1;
    if (__OFADD__(v2, 1)) {
      goto LABEL_26;
    }
    int64_t v7 = (unint64_t)(v0[2] + 64) >> 6;
    if (v6 < v7)
    {
      uint64_t v8 = v0[1];
      uint64_t v9 = *(void *)(v8 + 8 * v6);
      if (v9)
      {
LABEL_8:
        uint64_t v4 = (v9 - 1) & v9;
        int64_t v3 = v6;
        goto LABEL_3;
      }
      int64_t v10 = v2 + 2;
      int64_t v3 = v2 + 1;
      if (v2 + 2 < v7)
      {
        uint64_t v9 = *(void *)(v8 + 8 * v10);
        if (v9)
        {
LABEL_11:
          int64_t v6 = v10;
          goto LABEL_8;
        }
        int64_t v3 = v2 + 2;
        if (v2 + 3 < v7)
        {
          uint64_t v9 = *(void *)(v8 + 8 * (v2 + 3));
          if (v9)
          {
            int64_t v6 = v2 + 3;
            goto LABEL_8;
          }
          int64_t v10 = v2 + 4;
          int64_t v3 = v2 + 3;
          if (v2 + 4 < v7)
          {
            uint64_t v9 = *(void *)(v8 + 8 * v10);
            if (v9) {
              goto LABEL_11;
            }
            int64_t v6 = v2 + 5;
            int64_t v3 = v2 + 4;
            if (v2 + 5 < v7)
            {
              uint64_t v9 = *(void *)(v8 + 8 * v6);
              if (v9) {
                goto LABEL_8;
              }
              int64_t v3 = v7 - 1;
              int64_t v11 = v2 + 6;
              while (v7 != v11)
              {
                uint64_t v9 = *(void *)(v8 + 8 * v11++);
                if (v9)
                {
                  int64_t v6 = v11 - 1;
                  goto LABEL_8;
                }
              }
            }
          }
        }
      }
    }
    uint64_t v5 = 0;
    v0[3] = v3;
    v0[4] = 0;
    return v5;
  }
  uint64_t v4 = (v1 - 1) & v1;
LABEL_3:
  v0[3] = v3;
  v0[4] = v4;
  uint64_t v5 = v0[5];
  if (!__OFADD__(v5, 1))
  {
    v0[5] = v5 + 1;
    swift_bridgeObjectRetain();
    return v5;
  }
  __break(1u);
LABEL_26:
  __break(1u);
  return result;
}

Swift::Int sub_100B681A8(void **a1)
{
  int64_t v2 = *a1;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    int64_t v2 = (void *)sub_100B73840(v2);
  }
  uint64_t v3 = v2[2];
  v5[0] = (uint64_t)(v2 + 4);
  v5[1] = v3;
  Swift::Int result = sub_100B72058(v5);
  *a1 = v2;
  return result;
}

uint64_t sub_100B68214()
{
  Swift::Int v0 = sub_100DF126C((uint64_t)&off_10159F510);
  uint64_t result = swift_arrayDestroy();
  qword_101659960 = v0;
  return result;
}

void *sub_100B68260(uint64_t a1)
{
  int64_t v2 = v1;
  uint64_t v21 = a1;
  uint64_t v22 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v20 = *(void *)(v22 - 8);
  __chkstk_darwin(v22);
  uint64_t v4 = (char *)&v18 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = type metadata accessor for OS_dispatch_queue.Attributes();
  __chkstk_darwin(v5);
  uint64_t v6 = type metadata accessor for DispatchQoS();
  uint64_t v18 = *(void *)(v6 - 8);
  uint64_t v19 = v6;
  __chkstk_darwin(v6);
  uint64_t v8 = (char *)&v18 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = type metadata accessor for OS_dispatch_queue.AutoreleaseFrequency();
  uint64_t v10 = *(void *)(v9 - 8);
  __chkstk_darwin(v9);
  char v12 = (char *)&v18 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10001D4B0(0, (unint64_t *)&qword_1016376E0);
  (*(void (**)(char *, void, uint64_t))(v10 + 104))(v12, enum case for OS_dispatch_queue.AutoreleaseFrequency.workItem(_:), v9);
  static DispatchQoS.unspecified.getter();
  aBlock[0] = _swiftEmptyArrayStorage;
  sub_100B7B55C((unint64_t *)&qword_101638CC0, (void (*)(uint64_t))&type metadata accessor for OS_dispatch_queue.Attributes);
  sub_10000588C((uint64_t *)&unk_1016376F0);
  sub_100062734((unint64_t *)&qword_101638CD0, (uint64_t *)&unk_1016376F0);
  dispatch thunk of SetAlgebra.init<A>(_:)();
  v1[2] = OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)();
  v1[4] = 0;
  type metadata accessor for PropertyListDecoder();
  swift_allocObject();
  v1[5] = PropertyListDecoder.init()();
  sub_10000588C(&qword_101659D50);
  swift_allocObject();
  v1[6] = PassthroughSubject.init()();
  v1[8] = 0;
  v1[9] = _swiftEmptyDictionarySingleton;
  static os_log_type_t.default.getter();
  if (qword_101637260 != -1) {
    swift_once();
  }
  os_log(_:dso:log:_:_:)();
  v1[3] = v21;
  uint64_t v13 = v1[6];
  sub_10000588C(&qword_101659D58);
  uint64_t v14 = swift_allocObject();
  *(void *)(v14 + 16) = v13;
  v2[7] = v14;
  aBlock[4] = sub_100B7B558;
  aBlock[5] = v2;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_1004B5480;
  aBlock[3] = &unk_1015EA898;
  uint64_t v15 = _Block_copy(aBlock);
  swift_retain();
  swift_retain();
  swift_retain();
  static DispatchQoS.unspecified.getter();
  uint64_t v23 = _swiftEmptyArrayStorage;
  sub_100B7B55C((unint64_t *)&qword_10163B7E0, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
  sub_10000588C((uint64_t *)&unk_10163F350);
  sub_100062734((unint64_t *)&qword_10163B7F0, (uint64_t *)&unk_10163F350);
  uint64_t v16 = v22;
  dispatch thunk of SetAlgebra.init<A>(_:)();
  OS_dispatch_queue.async(group:qos:flags:execute:)();
  _Block_release(v15);
  swift_release();
  (*(void (**)(char *, uint64_t))(v20 + 8))(v4, v16);
  (*(void (**)(char *, uint64_t))(v18 + 8))(v8, v19);
  swift_release();
  return v2;
}

void sub_100B687E4()
{
  uint64_t v1 = (void *)type metadata accessor for DispatchPredicate();
  uint64_t v2 = *(v1 - 1);
  __chkstk_darwin(v1);
  uint64_t v4 = (uint64_t *)((char *)&v15 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v5 = *(void **)(v0 + 16);
  *uint64_t v4 = v5;
  (*(void (**)(void *, void, void *))(v2 + 104))(v4, enum case for DispatchPredicate.onQueue(_:), v1);
  id v6 = v5;
  LOBYTE(v5) = _dispatchPreconditionTest(_:)();
  (*(void (**)(void *, void *))(v2 + 8))(v4, v1);
  if (v5)
  {
    uint64_t v1 = [self defaultManager];
    if (qword_1016370B0 == -1) {
      goto LABEL_3;
    }
  }
  else
  {
    __break(1u);
  }
  swift_once();
LABEL_3:
  uint64_t v7 = type metadata accessor for URL();
  sub_100010324(v7, (uint64_t)qword_10170ECC0);
  uint64_t v8 = NSFileManager.entryCount(directory:)();
  if (qword_1016375F0 != -1) {
    swift_once();
  }
  sub_100010324(v7, (uint64_t)qword_10170F760);
  uint64_t v9 = NSFileManager.entryCount(directory:)();
  if (qword_1016370E8 != -1) {
    swift_once();
  }
  sub_100010324(v7, (uint64_t)qword_10170ED10);
  uint64_t v10 = NSFileManager.entryCount(directory:)();
  if (qword_101636F50 != -1) {
    swift_once();
  }
  uint64_t v11 = type metadata accessor for Logger();
  sub_100010324(v11, (uint64_t)qword_10170E9E8);
  char v12 = Logger.logObject.getter();
  os_log_type_t v13 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v12, v13))
  {
    uint64_t v14 = swift_slowAlloc();
    *(_DWORD *)uint64_t v14 = 134218496;
    uint64_t v15 = v8;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v14 + 12) = 2048;
    uint64_t v15 = v9;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v14 + 22) = 2048;
    uint64_t v15 = v10;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl((void *)&_mh_execute_header, v12, v13, "RecordCount: OwnedBeaconRecord: %ld OwnedBeaconRecord: %ld BeaconNamingRecord: %ld", (uint8_t *)v14, 0x20u);
    swift_slowDealloc();
  }
}

uint64_t sub_100B68B6C@<X0>(char *a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t v61 = a1;
  uint64_t v63 = a2;
  uint64_t v57 = a3;
  uint64_t v3 = type metadata accessor for URL();
  uint64_t v4 = *(void *)(v3 - 8);
  uint64_t v5 = __chkstk_darwin(v3);
  int64_t v56 = (char *)&v55 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = __chkstk_darwin(v5);
  uint64_t v9 = (char *)&v55 - v8;
  uint64_t v10 = __chkstk_darwin(v7);
  char v12 = (char *)&v55 - v11;
  __chkstk_darwin(v10);
  uint64_t v14 = (char *)&v55 - v13;
  UUID.uuidString.getter();
  URL.appendingPathComponent(_:)();
  swift_bridgeObjectRelease();
  URL.appendingPathExtension(_:)();
  uint64_t v62 = v4;
  uint64_t v16 = *(void (**)(char *, uint64_t))(v4 + 8);
  v16(v12, v3);
  UUID.uuidString.getter();
  URL.appendingPathComponent(_:)();
  swift_bridgeObjectRelease();
  URL.appendingPathExtension(_:)();
  uint64_t v63 = v3;
  uint64_t v58 = v16;
  uint64_t v59 = v4 + 8;
  v16(v12, v3);
  uint64_t v18 = self;
  id v19 = [v18 defaultManager];
  uint64_t v61 = v14;
  URL._bridgeToObjectiveC()(v20);
  uint64_t v22 = v21;
  URL._bridgeToObjectiveC()(v23);
  char v25 = v24;
  id v65 = 0;
  LODWORD(v14) = [v19 moveItemAtURL:v22 toURL:v24 error:&v65];

  if (v14)
  {
    char v26 = v61;
    id v27 = v65;
  }
  else
  {
    id v28 = v65;
    _convertNSErrorToError(_:)();

    swift_willThrow();
    id v29 = [v18 defaultManager];
    URL._bridgeToObjectiveC()(v30);
    uint64_t v32 = v31;
    URL._bridgeToObjectiveC()(v33);
    uint64_t v35 = v34;
    id v65 = 0;
    unsigned __int8 v36 = [v29 replaceItemAtURL:v32 withItemAtURL:v34 backupItemName:0 options:1 resultingItemURL:0 error:&v65];

    if ((v36 & 1) == 0)
    {
      id v52 = v65;
      _convertNSErrorToError(_:)();

      swift_willThrow();
      swift_errorRelease();
      uint64_t v53 = v63;
      uint64_t v54 = (uint64_t (*)(char *, uint64_t))v58;
      v58(v9, v63);
      return v54(v61, v53);
    }
    char v26 = v61;
    id v37 = v65;
    swift_errorRelease();
    uint64_t v60 = 0;
  }
  uint64_t v38 = v63;
  uint64_t v39 = v56;
  if (qword_101636F50 != -1) {
    swift_once();
  }
  uint64_t v40 = type metadata accessor for Logger();
  sub_100010324(v40, (uint64_t)qword_10170E9E8);
  (*(void (**)(char *, char *, uint64_t))(v62 + 16))(v39, v26, v38);
  uint64_t v41 = Logger.logObject.getter();
  os_log_type_t v42 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v41, v42))
  {
    uint64_t v43 = swift_slowAlloc();
    uint64_t v61 = v9;
    uint64_t v44 = (uint8_t *)v43;
    id v65 = (id)swift_slowAlloc();
    *(_DWORD *)uint64_t v44 = 136315138;
    sub_100B7B55C((unint64_t *)&qword_1016605A0, (void (*)(uint64_t))&type metadata accessor for URL);
    uint64_t v45 = dispatch thunk of CustomStringConvertible.description.getter();
    uint64_t v64 = sub_1008FA0F0(v45, v46, (uint64_t *)&v65);
    uint64_t v38 = v63;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    v58(v39, v38);
    _os_log_impl((void *)&_mh_execute_header, v41, v42, "Tombstoned record %s", v44, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    uint64_t v9 = v61;
    swift_slowDealloc();
  }
  else
  {
    v58(v39, v38);
  }

  uint64_t v47 = v62;
  uint64_t v48 = *(void (**)(uint64_t, char *, uint64_t))(v62 + 32);
  uint64_t v49 = v57;
  v48(v57, v26, v38);
  uint64_t v50 = v49 + *(int *)(type metadata accessor for BeaconStoreFileRecord() + 20);
  v48(v50, v9, v38);
  return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(v47 + 56))(v50, 0, 1, v38);
}

uint64_t sub_100B69190@<X0>(char *a1@<X8>)
{
  id v27 = a1;
  uint64_t v1 = type metadata accessor for URL();
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = __chkstk_darwin(v1);
  uint64_t v5 = (char *)&v26 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v3);
  uint64_t v7 = (char *)&v26 - v6;
  UUID.uuidString.getter();
  URL.appendingPathComponent(_:)();
  swift_bridgeObjectRelease();
  URL.appendingPathExtension(_:)();
  char v26 = *(void (**)(char *, uint64_t))(v2 + 8);
  v26(v5, v1);
  id v9 = [self defaultManager];
  URL._bridgeToObjectiveC()(v10);
  char v12 = v11;
  id v28 = 0;
  LODWORD(v5) = [v9 removeItemAtURL:v11 error:&v28];

  if (v5)
  {
    id v13 = v28;
    static os_log_type_t.default.getter();
    if (qword_101637260 != -1) {
      swift_once();
    }
    sub_10000588C((uint64_t *)&unk_10163AD00);
    uint64_t v14 = swift_allocObject();
    *(_OWORD *)(v14 + 16) = xmmword_101342130;
    sub_100B7B55C((unint64_t *)&qword_1016605A0, (void (*)(uint64_t))&type metadata accessor for URL);
    uint64_t v15 = dispatch thunk of CustomStringConvertible.description.getter();
    uint64_t v17 = v16;
    *(void *)(v14 + 56) = &type metadata for String;
    *(void *)(v14 + 64) = sub_10000B4CC();
    *(void *)(v14 + 32) = v15;
    *(void *)(v14 + 40) = v17;
    os_log(_:dso:log:_:_:)();
    swift_bridgeObjectRelease();
    char v18 = 1;
  }
  else
  {
    id v19 = v28;
    uint64_t v20 = (void *)_convertNSErrorToError(_:)();

    swift_willThrow();
    static os_log_type_t.default.getter();
    if (qword_101637260 != -1) {
      swift_once();
    }
    sub_10000588C((uint64_t *)&unk_10163AD00);
    uint64_t v21 = swift_allocObject();
    *(_OWORD *)(v21 + 16) = xmmword_101342130;
    id v28 = v20;
    swift_errorRetain();
    sub_10000588C(&qword_101638D40);
    uint64_t v22 = String.init<A>(describing:)();
    uint64_t v24 = v23;
    *(void *)(v21 + 56) = &type metadata for String;
    *(void *)(v21 + 64) = sub_10000B4CC();
    *(void *)(v21 + 32) = v22;
    *(void *)(v21 + 40) = v24;
    os_log(_:dso:log:_:_:)();
    swift_bridgeObjectRelease();
    swift_errorRelease();
    char v18 = 0;
  }
  uint64_t result = ((uint64_t (*)(char *, uint64_t))v26)(v7, v1);
  char *v27 = v18;
  return result;
}

uint64_t sub_100B695A4@<X0>(uint64_t a1@<X1>, unsigned char *a2@<X8>)
{
  uint64_t v53 = a2;
  uint64_t v60 = a1;
  uint64_t v2 = sub_10000588C(&qword_101638CF0);
  __chkstk_darwin(v2 - 8);
  uint64_t v4 = (char *)&v47 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = type metadata accessor for UUID();
  int64_t v66 = *(void (**)(char *, uint64_t))(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v61 = (char *)&v47 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for URL();
  uint64_t v8 = *(void *)(v7 - 8);
  uint64_t v9 = __chkstk_darwin(v7);
  id v65 = (char *)&v47 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9);
  char v12 = (char *)&v47 - v11;
  uint64_t v13 = sub_10000588C(&qword_101649E40);
  __chkstk_darwin(v13 - 8);
  uint64_t v15 = (char *)&v47 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v52 = type metadata accessor for DirectorySequence();
  uint64_t v51 = *(void *)(v52 - 8);
  __chkstk_darwin(v52);
  uint64_t v17 = (char *)&v47 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  id v49 = self;
  id v18 = [v49 defaultManager];
  NSFileManager.deepSequence(at:includingPropertiesForKeys:options:)();

  DirectorySequence.next()();
  id v68 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v8 + 48);
  uint64_t v69 = v8 + 48;
  if (v68(v15, 1, v7) == 1)
  {
    LOBYTE(v19) = 0;
    goto LABEL_24;
  }
  int v19 = 0;
  uint64_t v20 = v8 + 32;
  uint64_t v67 = *(void (**)(char *, char *, uint64_t))(v8 + 32);
  uint64_t v21 = (void (**)(char *, uint64_t))(v8 + 8);
  uint64_t v62 = (unsigned int (**)(char *, uint64_t, uint64_t))((char *)v66 + 48);
  uint64_t v55 = (void (**)(char *, uint64_t))((char *)v66 + 8);
  int64_t v56 = (void (**)(char *, char *, uint64_t))((char *)v66 + 32);
  long long v59 = xmmword_101342130;
  uint64_t v57 = v5;
  uint64_t v58 = v4;
  uint64_t v63 = v20;
  uint64_t v64 = v17;
  do
  {
    int v50 = v19;
    while (1)
    {
      v67(v12, v15, v7);
      if ((URL.hasDirectoryPath.getter() & 1) == 0) {
        break;
      }
      (*v21)(v12, v7);
LABEL_6:
      DirectorySequence.next()();
      if (v68(v15, 1, v7) == 1)
      {
        LOBYTE(v19) = v50;
        goto LABEL_24;
      }
    }
    uint64_t v22 = v65;
    URL.deletingPathExtension()();
    URL.lastPathComponent.getter();
    int64_t v66 = *v21;
    v66(v22, v7);
    UUID.init(uuidString:)();
    swift_bridgeObjectRelease();
    if ((*v62)(v4, 1, v5) == 1)
    {
      sub_10001DAB4((uint64_t)v4, &qword_101638CF0);
      static os_log_type_t.error.getter();
      if (qword_101637260 != -1) {
        swift_once();
      }
      sub_10000588C((uint64_t *)&unk_10163AD00);
      uint64_t v23 = swift_allocObject();
      *(_OWORD *)(v23 + 16) = v59;
      sub_100B7B55C((unint64_t *)&qword_1016605A0, (void (*)(uint64_t))&type metadata accessor for URL);
      uint64_t v24 = dispatch thunk of CustomStringConvertible.description.getter();
      uint64_t v26 = v25;
      *(void *)(v23 + 56) = &type metadata for String;
      *(void *)(v23 + 64) = sub_10000B4CC();
      *(void *)(v23 + 32) = v24;
      *(void *)(v23 + 40) = v26;
      os_log(_:dso:log:_:_:)();
      swift_bridgeObjectRelease();
      v66(v12, v7);
      uint64_t v5 = v57;
      uint64_t v4 = v58;
      uint64_t v17 = v64;
      goto LABEL_6;
    }
    id v27 = v61;
    (*v56)(v61, v4, v5);
    char v28 = static UUID.== infix(_:_:)();
    uint64_t v17 = v64;
    if ((v28 & 1) == 0)
    {
      (*v55)(v27, v5);
      v66(v12, v7);
      goto LABEL_6;
    }
    id v29 = [v49 defaultManager];
    URL._bridgeToObjectiveC()(v30);
    uint64_t v32 = v31;
    id v70 = 0;
    LODWORD(v48) = [v29 removeItemAtURL:v31 error:&v70];

    if (v48)
    {
      id v33 = v70;
      int v50 = static os_log_type_t.default.getter();
      if (qword_101637260 != -1) {
        swift_once();
      }
      uint64_t v48 = qword_10170EFB8;
      sub_10000588C((uint64_t *)&unk_10163AD00);
      uint64_t v34 = swift_allocObject();
      *(_OWORD *)(v34 + 16) = v59;
      sub_100B7B55C((unint64_t *)&qword_1016605A0, (void (*)(uint64_t))&type metadata accessor for URL);
      uint64_t v35 = dispatch thunk of CustomStringConvertible.description.getter();
      uint64_t v47 = v36;
      *(void *)(v34 + 56) = &type metadata for String;
      *(void *)(v34 + 64) = sub_10000B4CC();
      uint64_t v37 = v47;
      *(void *)(v34 + 32) = v35;
      *(void *)(v34 + 40) = v37;
      os_log(_:dso:log:_:_:)();
      swift_bridgeObjectRelease();
      int v50 = 1;
      uint64_t v38 = v61;
    }
    else
    {
      id v39 = v70;
      uint64_t v40 = (void *)_convertNSErrorToError(_:)();

      swift_willThrow();
      LODWORD(v54) = static os_log_type_t.default.getter();
      if (qword_101637260 != -1) {
        swift_once();
      }
      sub_10000588C((uint64_t *)&unk_10163AD00);
      uint64_t v41 = swift_allocObject();
      *(_OWORD *)(v41 + 16) = v59;
      id v70 = v40;
      swift_errorRetain();
      sub_10000588C(&qword_101638D40);
      uint64_t v42 = String.init<A>(describing:)();
      uint64_t v44 = v43;
      *(void *)(v41 + 56) = &type metadata for String;
      *(void *)(v41 + 64) = sub_10000B4CC();
      *(void *)(v41 + 32) = v42;
      *(void *)(v41 + 40) = v44;
      os_log(_:dso:log:_:_:)();
      swift_bridgeObjectRelease();
      swift_errorRelease();
      uint64_t v54 = 0;
      uint64_t v5 = v57;
      uint64_t v4 = v58;
      uint64_t v38 = v61;
      uint64_t v17 = v64;
    }
    (*v55)(v38, v5);
    v66(v12, v7);
    DirectorySequence.next()();
    unsigned int v45 = v68(v15, 1, v7);
    int v19 = v50;
  }
  while (v45 != 1);
LABEL_24:
  uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v51 + 8))(v17, v52);
  unsigned char *v53 = v19 & 1;
  return result;
}

void sub_100B69EFC(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for URL();
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = __chkstk_darwin(v4);
  uint64_t v8 = (char *)&v14 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  uint64_t v10 = (char *)&v14 - v9;
  UUID.uuidString.getter();
  URL.appendingPathComponent(_:)();
  swift_bridgeObjectRelease();
  URL.appendingPathExtension(_:)();
  char v12 = *(void (**)(char *, uint64_t))(v5 + 8);
  v12(v8, v4);
  uint64_t v16 = v10;
  uint64_t v17 = v2;
  uint64_t v18 = a2;
  sub_10000588C((uint64_t *)&unk_10163BBE0);
  OS_dispatch_queue.sync<A>(execute:)();
  v12(v10, v4);
}

uint64_t sub_100B6A0BC@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t v67 = a2;
  uint64_t v74 = a1;
  uint64_t v75 = a3;
  uint64_t v69 = type metadata accessor for CryptoError();
  uint64_t v72 = *(void *)(v69 - 8);
  uint64_t v4 = __chkstk_darwin(v69);
  int64_t v66 = (char *)&v54 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = __chkstk_darwin(v4);
  uint64_t v71 = (char *)&v54 - v7;
  __chkstk_darwin(v6);
  id v68 = (char *)&v54 - v8;
  uint64_t v61 = type metadata accessor for SharedBeaconRecord(0);
  __chkstk_darwin(v61);
  uint64_t v63 = (char *)&v54 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v62 = type metadata accessor for OwnedBeaconRecord();
  __chkstk_darwin(v62);
  uint64_t v64 = (char *)&v54 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v70 = type metadata accessor for URL();
  uint64_t v65 = *(void *)(v70 - 8);
  __chkstk_darwin(v70);
  id v73 = (char *)&v54 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = type metadata accessor for SystemInfo.DeviceLockState();
  uint64_t v13 = *(void *)(v12 - 8);
  uint64_t v14 = __chkstk_darwin(v12);
  uint64_t v16 = (char *)&v54 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v14);
  uint64_t v18 = (char *)&v54 - v17;
  static SystemInfo.lockState.getter();
  (*(void (**)(char *, void, uint64_t))(v13 + 104))(v16, enum case for SystemInfo.DeviceLockState.beforeFirstUnlock(_:), v12);
  sub_100B7B55C((unint64_t *)&unk_101655610, (void (*)(uint64_t))&type metadata accessor for SystemInfo.DeviceLockState);
  dispatch thunk of RawRepresentable.rawValue.getter();
  dispatch thunk of RawRepresentable.rawValue.getter();
  uint64_t v19 = v77;
  uint64_t v20 = v76;
  uint64_t v21 = *(void (**)(char *, uint64_t))(v13 + 8);
  v21(v16, v12);
  v21(v18, v12);
  if (v19 != v20)
  {
    uint64_t v24 = Data.init(contentsOf:options:)();
    if (v3)
    {
      uint64_t result = swift_errorRelease();
LABEL_17:
      uint64_t v48 = (_OWORD *)v75;
      *(void *)(v75 + 32) = 0;
      *uint64_t v48 = 0u;
      v48[1] = 0u;
      return result;
    }
    uint64_t v26 = v24;
    unint64_t v27 = v25;
    static os_log_type_t.info.getter();
    if (qword_101637260 != -1) {
      swift_once();
    }
    uint64_t v60 = qword_10170EFB8;
    uint64_t v57 = sub_10000588C((uint64_t *)&unk_10163AD00);
    uint64_t v28 = swift_allocObject();
    long long v58 = xmmword_101342130;
    *(_OWORD *)(v28 + 16) = xmmword_101342130;
    uint64_t v29 = sub_100B7B55C((unint64_t *)&qword_1016605A0, (void (*)(uint64_t))&type metadata accessor for URL);
    uint64_t v30 = v70;
    uint64_t v31 = dispatch thunk of CustomStringConvertible.description.getter();
    uint64_t v33 = v32;
    *(void *)(v28 + 56) = &type metadata for String;
    unint64_t v59 = sub_10000B4CC();
    *(void *)(v28 + 64) = v59;
    *(void *)(v28 + 32) = v31;
    *(void *)(v28 + 40) = v33;
    os_log(_:dso:log:_:_:)();
    swift_bridgeObjectRelease();
    uint64_t v60 = v26;
    uint64_t v34 = sub_1010EBE40();
    uint64_t v35 = v73;
    uint64_t v54 = v29;
    uint64_t v55 = v34;
    unint64_t v56 = v36;
    uint64_t v37 = v65;
    (*(void (**)(char *, uint64_t, uint64_t))(v65 + 16))(v73, v67, v30);
    if (qword_1016370B0 != -1) {
      swift_once();
    }
    sub_100010324(v30, (uint64_t)qword_10170ECC0);
    sub_100B7B55C(&qword_10164C4F0, (void (*)(uint64_t))&type metadata accessor for URL);
    if (dispatch thunk of static Equatable.== infix(_:_:)())
    {
      (*(void (**)(char *, uint64_t))(v37 + 8))(v35, v30);
      uint64_t v39 = (uint64_t)v64;
      uint64_t v40 = v55;
      unint64_t v41 = v56;
      sub_100E555D8();
      uint64_t v42 = (uint64_t *)v75;
      *(void *)(v75 + 24) = v62;
      unsigned char v42[4] = sub_100B7B55C(&qword_101638DD0, (void (*)(uint64_t))type metadata accessor for OwnedBeaconRecord);
      uint64_t v43 = sub_10001D958(v42);
      uint64_t v44 = (uint64_t (*)(void))type metadata accessor for OwnedBeaconRecord;
    }
    else
    {
      if (qword_1016375F0 != -1) {
        swift_once();
      }
      sub_100010324(v30, (uint64_t)qword_10170F760);
      unsigned int v45 = v73;
      char v46 = dispatch thunk of static Equatable.== infix(_:_:)();
      (*(void (**)(char *, uint64_t))(v37 + 8))(v45, v30);
      if ((v46 & 1) == 0)
      {
        static os_log_type_t.error.getter();
        uint64_t v49 = swift_allocObject();
        *(_OWORD *)(v49 + 16) = v58;
        uint64_t v50 = dispatch thunk of CustomStringConvertible.description.getter();
        unint64_t v51 = v59;
        *(void *)(v49 + 56) = &type metadata for String;
        *(void *)(v49 + 64) = v51;
        *(void *)(v49 + 32) = v50;
        *(void *)(v49 + 40) = v52;
        os_log(_:dso:log:_:_:)();
        sub_10001CFB8(v55, v56);
        sub_10001CFB8(v60, v27);
        uint64_t result = swift_bridgeObjectRelease();
        goto LABEL_17;
      }
      uint64_t v39 = (uint64_t)v63;
      uint64_t v40 = v55;
      unint64_t v41 = v56;
      sub_100E55408();
      uint64_t v53 = (uint64_t *)v75;
      *(void *)(v75 + 24) = v61;
      v53[4] = sub_100B7B55C(&qword_101639EA0, (void (*)(uint64_t))type metadata accessor for SharedBeaconRecord);
      uint64_t v43 = sub_10001D958(v53);
      uint64_t v44 = type metadata accessor for SharedBeaconRecord;
    }
    sub_100B7B5A4(v39, (uint64_t)v43, v44);
    sub_10001CFB8(v40, v41);
    return sub_10001CFB8(v60, v27);
  }
  static os_log_type_t.default.getter();
  if (qword_101637260 != -1) {
    swift_once();
  }
  uint64_t result = os_log(_:dso:log:_:_:)();
  uint64_t v23 = (_OWORD *)v75;
  *(void *)(v75 + 32) = 0;
  *uint64_t v23 = 0u;
  v23[1] = 0u;
  return result;
}

uint64_t sub_100B6ACC4()
{
  v0._object = (void *)0x8000000101402BA0;
  v0._countAndFlagsBits = 0xD000000000000014;
  prohibitAsyncContext(functionName:)(v0);
  swift_getMetatypeMetadata();
  String.init<A>(describing:)();
  type metadata accessor for Optional();
  OS_dispatch_queue.sync<A>(execute:)();
  return swift_bridgeObjectRelease();
}

uint64_t sub_100B6ADBC@<X0>(uint64_t a1@<X0>, unint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X4>, uint64_t a5@<X5>, uint64_t a6@<X6>, uint64_t a7@<X8>)
{
  uint64_t v93 = a5;
  uint64_t v80 = a6;
  unint64_t v87 = a2;
  uint64_t v88 = a4;
  uint64_t v85 = a1;
  uint64_t v86 = a3;
  uint64_t v92 = a7;
  uint64_t v82 = type metadata accessor for CryptoError();
  uint64_t v84 = *(void *)(v82 - 8);
  uint64_t v7 = __chkstk_darwin(v82);
  uint64_t v81 = (char *)&v75 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = __chkstk_darwin(v7);
  uint64_t v79 = (char *)&v75 - v10;
  __chkstk_darwin(v9);
  uint64_t v83 = (char *)&v75 - v11;
  uint64_t v12 = type metadata accessor for URL();
  uint64_t v13 = *(void *)(v12 - 8);
  uint64_t v90 = v12;
  uint64_t v91 = v13;
  uint64_t v14 = __chkstk_darwin(v12);
  uint64_t v16 = (char *)&v75 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v14);
  uint64_t v89 = (char *)&v75 - v17;
  uint64_t v18 = type metadata accessor for SystemInfo.DeviceLockState();
  uint64_t v19 = *(void *)(v18 - 8);
  uint64_t v20 = __chkstk_darwin(v18);
  uint64_t v22 = (char *)&v75 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v20);
  uint64_t v24 = (char *)&v75 - v23;
  static SystemInfo.lockState.getter();
  (*(void (**)(char *, void, uint64_t))(v19 + 104))(v22, enum case for SystemInfo.DeviceLockState.beforeFirstUnlock(_:), v18);
  sub_100B7B55C((unint64_t *)&unk_101655610, (void (*)(uint64_t))&type metadata accessor for SystemInfo.DeviceLockState);
  dispatch thunk of RawRepresentable.rawValue.getter();
  dispatch thunk of RawRepresentable.rawValue.getter();
  uint64_t v25 = v97[0];
  uint64_t v26 = v98;
  unint64_t v27 = *(void (**)(char *, uint64_t))(v19 + 8);
  v27(v22, v18);
  v27(v24, v18);
  if (v25 == v26)
  {
    static os_log_type_t.default.getter();
    if (qword_101637260 != -1) {
      swift_once();
    }
    os_log(_:dso:log:_:_:)();
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v93 - 8) + 56))(v92, 1, 1);
  }
  UUID.uuidString.getter();
  URL.appendingPathComponent(_:)();
  swift_bridgeObjectRelease();
  uint64_t v30 = v89;
  URL.appendingPathExtension(_:)();
  uint64_t v31 = v90;
  uint64_t v32 = v91 + 8;
  uint64_t v33 = *(void (**)(char *, uint64_t))(v91 + 8);
  v33(v16, v90);
  uint64_t v34 = v94;
  uint64_t v35 = Data.init(contentsOf:options:)();
  if (v34)
  {
    swift_errorRelease();
    v33(v30, v31);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v93 - 8) + 56))(v92, 1, 1);
  }
  uint64_t v78 = v35;
  unint64_t v87 = v36;
  uint64_t v91 = v32;
  static os_log_type_t.debug.getter();
  if (qword_101637260 != -1) {
    swift_once();
  }
  uint64_t v76 = sub_10000588C((uint64_t *)&unk_10163AD00);
  uint64_t v37 = swift_allocObject();
  long long v75 = xmmword_101342130;
  *(_OWORD *)(v37 + 16) = xmmword_101342130;
  sub_100B7B55C((unint64_t *)&qword_1016605A0, (void (*)(uint64_t))&type metadata accessor for URL);
  uint64_t v38 = dispatch thunk of CustomStringConvertible.description.getter();
  uint64_t v40 = v39;
  *(void *)(v37 + 56) = &type metadata for String;
  unint64_t v77 = sub_10000B4CC();
  *(void *)(v37 + 64) = v77;
  *(void *)(v37 + 32) = v38;
  *(void *)(v37 + 40) = v40;
  os_log(_:dso:log:_:_:)();
  swift_bridgeObjectRelease();
  uint64_t v41 = v85;
  uint64_t v42 = (uint64_t *)(v85 + 72);
  swift_beginAccess();
  uint64_t v43 = v88;
  swift_bridgeObjectRetain();
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v98 = *(void *)(v41 + 72);
  uint64_t v45 = v98;
  *(void *)(v41 + 72) = 0x8000000000000000;
  unint64_t v47 = sub_100723FF4(v86, v43);
  uint64_t v48 = *(void *)(v45 + 16);
  BOOL v49 = (v46 & 1) == 0;
  uint64_t v50 = v48 + v49;
  if (__OFADD__(v48, v49))
  {
    __break(1u);
    goto LABEL_32;
  }
  LOBYTE(v43) = v46;
  if (*(void *)(v45 + 24) >= v50)
  {
    if ((isUniquelyReferenced_nonNull_native & 1) == 0) {
      goto LABEL_34;
    }
    while (1)
    {
LABEL_14:
      uint64_t *v42 = v45;
      swift_bridgeObjectRelease();
      uint64_t v42 = (uint64_t *)*v42;
      if ((v43 & 1) == 0)
      {
        swift_bridgeObjectRetain();
        sub_100007AB0(&v98);
        sub_100E7C5B4(v47, v86, v88, v98, v42);
      }
      swift_bridgeObjectRetain();
      uint64_t v53 = v42[7];
      uint64_t v54 = *(void *)(v53 + 8 * v47);
      BOOL v55 = __OFADD__(v54, 1);
      uint64_t v56 = v54 + 1;
      if (v55)
      {
LABEL_32:
        __break(1u);
      }
      else
      {
        *(void *)(v53 + 8 * v47) = v56;
        swift_endAccess();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        uint64_t v57 = *(void *)(v41 + 64);
        BOOL v55 = __OFADD__(v57, 1);
        uint64_t v58 = v57 + 1;
        if (!v55)
        {
          *(void *)(v41 + 64) = v58;
          if (__ROR8__(0x1CAC083126E978D5 * v58 + 0x10624DD2F1A9FB8, 3) < 0x4189374BC6A7EFuLL)
          {
            uint64_t v94 = sub_100B6BC28();
            unint64_t v60 = v59;
            uint64_t v61 = swift_bridgeObjectRetain();
            uint64_t v62 = sub_100E4D3E8(v61);
            char v64 = v63;
            swift_bridgeObjectRelease();
            if ((v64 & 1) != 0 || v62 < 10001)
            {
              if (qword_101636F50 != -1) {
                swift_once();
              }
              uint64_t v68 = type metadata accessor for Logger();
              sub_100010324(v68, (uint64_t)qword_10170E9E8);
              swift_bridgeObjectRetain();
              int64_t v66 = Logger.logObject.getter();
              os_log_type_t v67 = static os_log_type_t.info.getter();
            }
            else
            {
              if (qword_101636F50 != -1) {
                swift_once();
              }
              uint64_t v65 = type metadata accessor for Logger();
              sub_100010324(v65, (uint64_t)qword_10170E9E8);
              swift_bridgeObjectRetain();
              int64_t v66 = Logger.logObject.getter();
              os_log_type_t v67 = static os_log_type_t.error.getter();
            }
            os_log_type_t v69 = v67;
            if (os_log_type_enabled(v66, v67))
            {
              uint64_t v70 = (uint8_t *)swift_slowAlloc();
              v97[0] = swift_slowAlloc();
              *(_DWORD *)uint64_t v70 = 136446210;
              swift_bridgeObjectRetain();
              uint64_t v98 = sub_1008FA0F0(v94, v60, v97);
              UnsafeMutableRawBufferPointer.copyMemory(from:)();
              swift_bridgeObjectRelease_n();
              _os_log_impl((void *)&_mh_execute_header, v66, v69, "readStatistics:\n%{public}s", v70, 0xCu);
              swift_arrayDestroy();
              swift_slowDealloc();
              swift_slowDealloc();
            }
            else
            {

              swift_bridgeObjectRelease_n();
            }
          }
          uint64_t v71 = sub_1010EBE40();
          unint64_t v73 = v72;
          type metadata accessor for Optional();
          uint64_t v74 = v80;
          uint64_t v96 = *(void *)(v80 + 8);
          swift_getWitnessTable();
          uint64_t v95 = *(void *)(v74 + 16);
          swift_getWitnessTable();
          sub_100B6FFF4();
          v33(v89, v90);
          sub_10001CFB8(v71, v73);
          return sub_10001CFB8(v78, v87);
        }
      }
      __break(1u);
LABEL_34:
      sub_100E7F96C();
      uint64_t v45 = v98;
    }
  }
  sub_100E68000(v50, isUniquelyReferenced_nonNull_native);
  uint64_t v45 = v98;
  uint64_t v51 = sub_100723FF4(v86, v88);
  if ((v43 & 1) == (v52 & 1))
  {
    unint64_t v47 = v51;
    goto LABEL_14;
  }
  uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

uint64_t sub_100B6BC28()
{
  swift_beginAccess();
  swift_bridgeObjectRetain_n();
  Swift::String v0 = (void *)sub_100B79D2C();
  swift_bridgeObjectRelease();
  uint64_t v14 = v0;
  sub_100B681A8(&v14);
  swift_bridgeObjectRelease();
  uint64_t v1 = v14[2];
  if (v1)
  {
    uint64_t v2 = v14 + 7;
    uint64_t v3 = _swiftEmptyArrayStorage;
    do
    {
      uint64_t v4 = *(v2 - 1);
      uint64_t v14 = (void *)*(v2 - 2);
      uint64_t v15 = v4;
      swift_bridgeObjectRetain_n();
      v5._countAndFlagsBits = 8250;
      v5._object = (void *)0xE200000000000000;
      String.append(_:)(v5);
      v6._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
      String.append(_:)(v6);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      uint64_t v7 = v14;
      uint64_t v8 = v15;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
        uint64_t v3 = sub_100A6E25C(0, v3[2] + 1, 1, v3);
      }
      unint64_t v10 = v3[2];
      unint64_t v9 = v3[3];
      if (v10 >= v9 >> 1) {
        uint64_t v3 = sub_100A6E25C((void *)(v9 > 1), v10 + 1, 1, v3);
      }
      v2 += 4;
      v3[2] = v10 + 1;
      uint64_t v11 = &v3[2 * v10];
      v11[4] = v7;
      v11[5] = v8;
      --v1;
    }
    while (v1);
  }
  else
  {
    uint64_t v3 = _swiftEmptyArrayStorage;
  }
  swift_release();
  uint64_t v14 = v3;
  sub_10000588C(&qword_101654A30);
  sub_100062734((unint64_t *)&qword_10163A100, &qword_101654A30);
  uint64_t v12 = BidirectionalCollection<>.joined(separator:)();
  swift_bridgeObjectRelease();
  return v12;
}

void *sub_100B6BE48()
{
  return sub_100B6C0C8(&qword_1016375F0, (uint64_t)qword_10170F760, (void (*)(char *, uint64_t, void **, void **))sub_100B1FFD4, (void (*)(char *, uint64_t, void **, void **))sub_10120E230);
}

uint64_t sub_100B6BE80@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  v15[1] = a2;
  uint64_t v4 = type metadata accessor for URL();
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v7 = (char *)v15 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_1016371B8 != -1) {
    swift_once();
  }
  uint64_t v8 = sub_100010324(v4, (uint64_t)qword_10170EEB8);
  (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))(v7, v8, v4);
  v9._object = (void *)0x8000000101402BA0;
  v9._countAndFlagsBits = 0xD000000000000014;
  prohibitAsyncContext(functionName:)(v9);
  v15[3] = type metadata accessor for SafeLocation();
  sub_10000588C(&qword_1016593E0);
  uint64_t v10 = String.init<A>(describing:)();
  uint64_t v12 = v11;
  v15[0] = v4;
  __chkstk_darwin(v13);
  v15[-6] = v2;
  v15[-5] = a1;
  v15[-4] = v7;
  v15[-3] = v10;
  v15[-2] = v12;
  sub_10000588C(&qword_101653F20);
  OS_dispatch_queue.sync<A>(execute:)();
  swift_bridgeObjectRelease();
  return (*(uint64_t (**)(char *, void))(v5 + 8))(v7, v15[0]);
}

void *sub_100B6C090()
{
  return sub_100B6C0C8(&qword_1016371B8, (uint64_t)qword_10170EEB8, (void (*)(char *, uint64_t, void **, void **))sub_100B2046C, (void (*)(char *, uint64_t, void **, void **))sub_100F11BE8);
}

void *sub_100B6C0C8(void *a1, uint64_t a2, void (*a3)(char *, uint64_t, void **, void **), void (*a4)(char *, uint64_t, void **, void **))
{
  uint64_t v44 = a4;
  uint64_t v8 = v4;
  uint64_t v9 = sub_10000588C(&qword_101649E40);
  __chkstk_darwin(v9 - 8);
  uint64_t v11 = (char *)&v39 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = type metadata accessor for DirectorySequence();
  uint64_t v39 = *(void *)(v12 - 8);
  uint64_t v40 = v12;
  __chkstk_darwin(v12);
  uint64_t v45 = (char *)&v39 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = type metadata accessor for URL();
  uint64_t v15 = *(void *)(v14 - 8);
  uint64_t v16 = __chkstk_darwin(v14);
  uint64_t v18 = (char *)&v39 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v16);
  uint64_t v20 = (char *)&v39 - v19;
  if (*a1 != -1) {
    swift_once();
  }
  uint64_t v21 = sub_100010324(v14, a2);
  (*(void (**)(char *, uint64_t, uint64_t))(v15 + 16))(v20, v21, v14);
  char v46 = _swiftEmptyArrayStorage;
  unint64_t v47 = _swiftEmptyArrayStorage;
  id v22 = [self defaultManager];
  uint64_t v41 = v20;
  NSFileManager.deepSequence(at:includingPropertiesForKeys:options:)();

  DirectorySequence.next()();
  uint64_t v42 = v15;
  uint64_t v23 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v15 + 48);
  unsigned int v24 = v23(v11, 1, v14);
  uint64_t v25 = v14;
  uint64_t v43 = v8;
  uint64_t v44 = a3;
  if (v24 != 1)
  {
    uint64_t v26 = *(void (**)(char *, char *, uint64_t))(v42 + 32);
    unint64_t v27 = (void (**)(char *, uint64_t))(v42 + 8);
    do
    {
      v26(v18, v11, v25);
      uint64_t v28 = v23;
      v44(v18, v43, &v47, &v46);
      (*v27)(v18, v25);
      DirectorySequence.next()();
      uint64_t v23 = v28;
    }
    while (v28(v11, 1, v25) != 1);
  }
  (*(void (**)(char *, uint64_t))(v39 + 8))(v45, v40);
  static os_log_type_t.debug.getter();
  sub_10001D4B0(0, (unint64_t *)&qword_10163AE70);
  uint64_t v30 = (void *)static OS_os_log.default.getter();
  sub_10000588C((uint64_t *)&unk_10163AD00);
  uint64_t v31 = swift_allocObject();
  *(_OWORD *)(v31 + 16) = xmmword_101347BA0;
  uint64_t v32 = v47;
  uint64_t v33 = v47[2];
  *(void *)(v31 + 56) = &type metadata for Int;
  *(void *)(v31 + 64) = &protocol witness table for Int;
  *(void *)(v31 + 32) = v33;
  sub_100B7B55C((unint64_t *)&qword_1016605A0, (void (*)(uint64_t))&type metadata accessor for URL);
  uint64_t v34 = v41;
  uint64_t v35 = dispatch thunk of CustomStringConvertible.description.getter();
  uint64_t v37 = v36;
  *(void *)(v31 + 96) = &type metadata for String;
  *(void *)(v31 + 104) = sub_10000B4CC();
  *(void *)(v31 + 72) = v35;
  *(void *)(v31 + 80) = v37;
  os_log(_:dso:log:_:_:)();

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  (*(void (**)(char *, uint64_t))(v42 + 8))(v34, v25);
  return v32;
}

uint64_t sub_100B6C53C@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = sub_10000588C(&qword_101649E40);
  __chkstk_darwin(v2 - 8);
  uint64_t v4 = (char *)&v40 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = type metadata accessor for DirectorySequence();
  uint64_t v40 = *(void *)(v5 - 8);
  uint64_t v41 = v5;
  __chkstk_darwin(v5);
  uint64_t v7 = (char *)&v40 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for URL();
  uint64_t v9 = *(void *)(v8 - 8);
  uint64_t v10 = __chkstk_darwin(v8);
  uint64_t v12 = (char *)&v40 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v10);
  uint64_t v14 = (char *)&v40 - v13;
  if (qword_101636870 != -1) {
    swift_once();
  }
  uint64_t v43 = a1;
  sub_100010324(v8, (uint64_t)qword_10170D740);
  UUID.uuidString.getter();
  URL.appendingPathComponent(_:)();
  swift_bridgeObjectRelease();
  unint64_t v47 = _swiftEmptyArrayStorage;
  uint64_t v48 = _swiftEmptyArrayStorage;
  id v16 = [self defaultManager];
  uint64_t v42 = v14;
  NSFileManager.deepSequence(at:includingPropertiesForKeys:options:)();

  DirectorySequence.next()();
  uint64_t v44 = v9;
  uint64_t v18 = v9 + 48;
  uint64_t v17 = *(unsigned int (**)(void, void, void))(v9 + 48);
  uint64_t v19 = v7;
  if (v17(v4, 1, v8) != 1)
  {
    uint64_t v45 = *(void (**)(char *, char *, uint64_t))(v44 + 32);
    uint64_t v20 = (void (**)(char *, uint64_t))(v44 + 8);
    do
    {
      v45(v12, v4, v8);
      uint64_t v21 = v18;
      id v22 = v17;
      sub_100B2031C((uint64_t)v12, v46, (uint64_t *)&v48, (unint64_t *)&v47);
      unsigned int v24 = v23;
      uint64_t v17 = v22;
      uint64_t v18 = v21;
      (*v20)(v12, v8);
      DirectorySequence.next()();
    }
    while (v17(v4, 1, v8) != 1);
  }
  (*(void (**)(char *, uint64_t))(v40 + 8))(v19, v41);
  static os_log_type_t.debug.getter();
  sub_10001D4B0(0, (unint64_t *)&qword_10163AE70);
  uint64_t v25 = (void *)static OS_os_log.default.getter();
  sub_10000588C((uint64_t *)&unk_10163AD00);
  uint64_t v26 = swift_allocObject();
  *(_OWORD *)(v26 + 16) = xmmword_101347BA0;
  unint64_t v27 = v48;
  uint64_t v28 = v48[2];
  *(void *)(v26 + 56) = &type metadata for Int;
  *(void *)(v26 + 64) = &protocol witness table for Int;
  *(void *)(v26 + 32) = v28;
  sub_100B7B55C((unint64_t *)&qword_1016605A0, (void (*)(uint64_t))&type metadata accessor for URL);
  uint64_t v29 = v42;
  uint64_t v30 = dispatch thunk of CustomStringConvertible.description.getter();
  uint64_t v32 = v31;
  *(void *)(v26 + 96) = &type metadata for String;
  *(void *)(v26 + 104) = sub_10000B4CC();
  *(void *)(v26 + 72) = v30;
  *(void *)(v26 + 80) = v32;
  os_log(_:dso:log:_:_:)();

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v33 = v27[2];
  uint64_t v34 = type metadata accessor for KeyAlignmentRecord();
  uint64_t v35 = *(void *)(v34 - 8);
  if (v33)
  {
    uint64_t v36 = v43;
    sub_100B7B490((uint64_t)v27+ ((*(unsigned __int8 *)(*(void *)(v34 - 8) + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(v34 - 8) + 80)), v43, (uint64_t (*)(void))type metadata accessor for KeyAlignmentRecord);
    uint64_t v37 = 0;
  }
  else
  {
    uint64_t v37 = 1;
    uint64_t v36 = v43;
  }
  uint64_t v38 = v44;
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v35 + 56))(v36, v37, 1, v34);
  swift_bridgeObjectRelease();
  return (*(uint64_t (**)(char *, uint64_t))(v38 + 8))(v29, v8);
}

void *sub_100B6CA70()
{
  return sub_100B6C0C8(&qword_1016370A0, (uint64_t)qword_10170EC98, (void (*)(char *, uint64_t, void **, void **))sub_100B20124, (void (*)(char *, uint64_t, void **, void **))sub_100D10DF8);
}

void *sub_100B6CAA8()
{
  return sub_100B6C0C8(&qword_101637620, (uint64_t)qword_10170F7B0, (void (*)(char *, uint64_t, void **, void **))sub_100B20514, (void (*)(char *, uint64_t, void **, void **))sub_1012619E0);
}

uint64_t sub_100B6CAE0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  v15[1] = a2;
  uint64_t v4 = type metadata accessor for URL();
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v7 = (char *)v15 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_101636958 != -1) {
    swift_once();
  }
  uint64_t v8 = sub_100010324(v4, (uint64_t)qword_10170DAB8);
  (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))(v7, v8, v4);
  v9._object = (void *)0x8000000101402BA0;
  v9._countAndFlagsBits = 0xD000000000000014;
  prohibitAsyncContext(functionName:)(v9);
  v15[3] = type metadata accessor for OwnerPeerTrust();
  sub_10000588C(&qword_1016607E0);
  uint64_t v10 = String.init<A>(describing:)();
  uint64_t v12 = v11;
  v15[0] = v4;
  __chkstk_darwin(v13);
  v15[-6] = v2;
  v15[-5] = a1;
  v15[-4] = v7;
  v15[-3] = v10;
  v15[-2] = v12;
  sub_10000588C((uint64_t *)&unk_1016607D0);
  OS_dispatch_queue.sync<A>(execute:)();
  swift_bridgeObjectRelease();
  return (*(uint64_t (**)(char *, void))(v5 + 8))(v7, v15[0]);
}

uint64_t sub_100B6CCF0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  v15[1] = a2;
  uint64_t v4 = type metadata accessor for URL();
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v7 = (char *)v15 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_101637160 != -1) {
    swift_once();
  }
  uint64_t v8 = sub_100010324(v4, (uint64_t)qword_10170EE20);
  (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))(v7, v8, v4);
  v9._object = (void *)0x8000000101402BA0;
  v9._countAndFlagsBits = 0xD000000000000014;
  prohibitAsyncContext(functionName:)(v9);
  v15[3] = type metadata accessor for MemberPeerTrust();
  sub_10000588C(&qword_10163A060);
  uint64_t v10 = String.init<A>(describing:)();
  uint64_t v12 = v11;
  v15[0] = v4;
  __chkstk_darwin(v13);
  v15[-6] = v2;
  v15[-5] = a1;
  v15[-4] = v7;
  v15[-3] = v10;
  v15[-2] = v12;
  sub_10000588C((uint64_t *)&unk_10163B890);
  OS_dispatch_queue.sync<A>(execute:)();
  swift_bridgeObjectRelease();
  return (*(uint64_t (**)(char *, void))(v5 + 8))(v7, v15[0]);
}

uint64_t sub_100B6CF00@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  v15[1] = a2;
  uint64_t v4 = type metadata accessor for URL();
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v7 = (char *)v15 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_1016370F0 != -1) {
    swift_once();
  }
  uint64_t v8 = sub_100010324(v4, (uint64_t)qword_10170ED28);
  (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))(v7, v8, v4);
  v9._object = (void *)0x8000000101402BA0;
  v9._countAndFlagsBits = 0xD000000000000014;
  prohibitAsyncContext(functionName:)(v9);
  v15[3] = type metadata accessor for OwnerSharingCircle();
  sub_10000588C(&qword_101660760);
  uint64_t v10 = String.init<A>(describing:)();
  uint64_t v12 = v11;
  v15[0] = v4;
  __chkstk_darwin(v13);
  v15[-6] = v2;
  v15[-5] = a1;
  v15[-4] = v7;
  v15[-3] = v10;
  v15[-2] = v12;
  sub_10000588C((uint64_t *)&unk_101638D10);
  OS_dispatch_queue.sync<A>(execute:)();
  swift_bridgeObjectRelease();
  return (*(uint64_t (**)(char *, void))(v5 + 8))(v7, v15[0]);
}

uint64_t sub_100B6D110@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  v15[1] = a2;
  uint64_t v4 = type metadata accessor for URL();
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v7 = (char *)v15 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_101636A48 != -1) {
    swift_once();
  }
  uint64_t v8 = sub_100010324(v4, (uint64_t)qword_10170DD78);
  (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))(v7, v8, v4);
  v9._object = (void *)0x8000000101402BA0;
  v9._countAndFlagsBits = 0xD000000000000014;
  prohibitAsyncContext(functionName:)(v9);
  v15[3] = type metadata accessor for MemberSharingCircle();
  sub_10000588C(&qword_101659D38);
  uint64_t v10 = String.init<A>(describing:)();
  uint64_t v12 = v11;
  v15[0] = v4;
  __chkstk_darwin(v13);
  v15[-6] = v2;
  v15[-5] = a1;
  v15[-4] = v7;
  v15[-3] = v10;
  v15[-2] = v12;
  sub_10000588C((uint64_t *)&unk_10163B7C0);
  OS_dispatch_queue.sync<A>(execute:)();
  swift_bridgeObjectRelease();
  return (*(uint64_t (**)(char *, void))(v5 + 8))(v7, v15[0]);
}

void *sub_100B6D320()
{
  return sub_100B6C0C8(&qword_1016370C8, (uint64_t)qword_10170ECE0, (void (*)(char *, uint64_t, void **, void **))sub_100B215AC, (void (*)(char *, uint64_t, void **, void **))sub_100D28994);
}

void *sub_100B6D358(uint64_t a1)
{
  return sub_100B6D3C8(a1, &qword_101637130, (uint64_t)qword_10170ED90, (void (*)(char *, uint64_t, void **, void **))sub_100B201CC, (uint64_t)sub_100E934D0);
}

void *sub_100B6D390(uint64_t a1)
{
  return sub_100B6D3C8(a1, &qword_101636830, (uint64_t)qword_10170D6C0, (void (*)(char *, uint64_t, void **, void **))sub_100B2145C, (uint64_t)sub_100036398);
}

void *sub_100B6D3C8(uint64_t a1, void *a2, uint64_t a3, void (*a4)(char *, uint64_t, void **, void **), uint64_t a5)
{
  uint64_t v43 = a5;
  uint64_t v44 = a4;
  uint64_t v8 = v5;
  uint64_t v9 = sub_10000588C(&qword_101649E40);
  __chkstk_darwin(v9 - 8);
  uint64_t v11 = (char *)&v39 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = type metadata accessor for DirectorySequence();
  uint64_t v39 = *(void *)(v12 - 8);
  uint64_t v40 = v12;
  __chkstk_darwin(v12);
  uint64_t v45 = (char *)&v39 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = type metadata accessor for URL();
  uint64_t v15 = *(void *)(v14 - 8);
  uint64_t v16 = __chkstk_darwin(v14);
  uint64_t v18 = (char *)&v39 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v16);
  uint64_t v20 = (char *)&v39 - v19;
  if (*a2 != -1) {
    swift_once();
  }
  sub_100010324(v14, a3);
  UUID.uuidString.getter();
  URL.appendingPathComponent(_:isDirectory:)();
  swift_bridgeObjectRelease();
  uint64_t v46 = _swiftEmptyArrayStorage;
  unint64_t v47 = _swiftEmptyArrayStorage;
  id v22 = [self defaultManager];
  uint64_t v41 = v20;
  NSFileManager.deepSequence(at:includingPropertiesForKeys:options:)();

  DirectorySequence.next()();
  uint64_t v42 = v15;
  uint64_t v23 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v15 + 48);
  unsigned int v24 = v23(v11, 1, v14);
  uint64_t v25 = v14;
  uint64_t v43 = v8;
  if (v24 != 1)
  {
    uint64_t v26 = *(void (**)(char *, char *, uint64_t))(v42 + 32);
    unint64_t v27 = (void (**)(char *, uint64_t))(v42 + 8);
    do
    {
      v26(v18, v11, v25);
      uint64_t v28 = v23;
      v44(v18, v43, &v47, &v46);
      (*v27)(v18, v25);
      DirectorySequence.next()();
      uint64_t v23 = v28;
    }
    while (v28(v11, 1, v25) != 1);
  }
  (*(void (**)(char *, uint64_t))(v39 + 8))(v45, v40);
  static os_log_type_t.debug.getter();
  sub_10001D4B0(0, (unint64_t *)&qword_10163AE70);
  uint64_t v30 = (void *)static OS_os_log.default.getter();
  sub_10000588C((uint64_t *)&unk_10163AD00);
  uint64_t v31 = swift_allocObject();
  *(_OWORD *)(v31 + 16) = xmmword_101347BA0;
  uint64_t v32 = v47;
  uint64_t v33 = v47[2];
  *(void *)(v31 + 56) = &type metadata for Int;
  *(void *)(v31 + 64) = &protocol witness table for Int;
  *(void *)(v31 + 32) = v33;
  sub_100B7B55C((unint64_t *)&qword_1016605A0, (void (*)(uint64_t))&type metadata accessor for URL);
  uint64_t v34 = v41;
  uint64_t v35 = dispatch thunk of CustomStringConvertible.description.getter();
  uint64_t v37 = v36;
  *(void *)(v31 + 96) = &type metadata for String;
  *(void *)(v31 + 104) = sub_10000B4CC();
  *(void *)(v31 + 72) = v35;
  *(void *)(v31 + 80) = v37;
  os_log(_:dso:log:_:_:)();

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  (*(void (**)(char *, uint64_t))(v42 + 8))(v34, v25);
  return v32;
}

uint64_t sub_100B6D850@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  v15[1] = a2;
  uint64_t v4 = type metadata accessor for URL();
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v7 = (char *)v15 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_101636BB0 != -1) {
    swift_once();
  }
  uint64_t v8 = sub_100010324(v4, (uint64_t)qword_10170E088);
  (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))(v7, v8, v4);
  v9._object = (void *)0x8000000101402BA0;
  v9._countAndFlagsBits = 0xD000000000000014;
  prohibitAsyncContext(functionName:)(v9);
  v15[3] = type metadata accessor for SecureLocationsCachedPayload();
  sub_10000588C(&qword_101659388);
  uint64_t v10 = String.init<A>(describing:)();
  uint64_t v12 = v11;
  v15[0] = v4;
  __chkstk_darwin(v13);
  v15[-6] = v2;
  v15[-5] = a1;
  v15[-4] = v7;
  v15[-3] = v10;
  v15[-2] = v12;
  sub_10000588C(&qword_10164A370);
  OS_dispatch_queue.sync<A>(execute:)();
  swift_bridgeObjectRelease();
  return (*(uint64_t (**)(char *, void))(v5 + 8))(v7, v15[0]);
}

uint64_t sub_100B6DA60@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  v15[1] = a2;
  uint64_t v4 = type metadata accessor for URL();
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v7 = (char *)v15 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_101636FA8 != -1) {
    swift_once();
  }
  uint64_t v8 = sub_100010324(v4, (uint64_t)qword_10170EA78);
  (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))(v7, v8, v4);
  v9._object = (void *)0x8000000101402BA0;
  v9._countAndFlagsBits = 0xD000000000000014;
  prohibitAsyncContext(functionName:)(v9);
  v15[3] = type metadata accessor for SecureLocationsCachedSharedKey(0);
  sub_10000588C(&qword_1016593A0);
  uint64_t v10 = String.init<A>(describing:)();
  uint64_t v12 = v11;
  v15[0] = v4;
  __chkstk_darwin(v13);
  v15[-6] = v2;
  v15[-5] = a1;
  v15[-4] = v7;
  v15[-3] = v10;
  v15[-2] = v12;
  sub_10000588C(&qword_10164A380);
  OS_dispatch_queue.sync<A>(execute:)();
  swift_bridgeObjectRelease();
  return (*(uint64_t (**)(char *, void))(v5 + 8))(v7, v15[0]);
}

void *sub_100B6DC70()
{
  return sub_100B6C0C8(&qword_101636FA8, (uint64_t)qword_10170EA78, (void (*)(char *, uint64_t, void **, void **))sub_100B21504, (void (*)(char *, uint64_t, void **, void **))sub_100B9DBE4);
}

void *sub_100B6DCA8()
{
  return sub_100B6C0C8(&qword_1016373C8, (uint64_t)qword_10170F150, (void (*)(char *, uint64_t, void **, void **))sub_100B207B4, (void (*)(char *, uint64_t, void **, void **))sub_10105F78C);
}

void *sub_100B6DCE0()
{
  return sub_100B6C0C8(&qword_101636BB0, (uint64_t)qword_10170E088, (void (*)(char *, uint64_t, void **, void **))sub_100B2070C, (void (*)(char *, uint64_t, void **, void **))sub_1005FF7CC);
}

void *sub_100B6DD18()
{
  return sub_100B6C0C8(&qword_101636940, (uint64_t)qword_10170DA70, (void (*)(char *, uint64_t, void **, void **))sub_100B20664, (void (*)(char *, uint64_t, void **, void **))sub_10028F7E0);
}

void *sub_100B6DD50()
{
  return sub_100B6C0C8(&qword_101636B50, (uint64_t)qword_10170DF88, (void (*)(char *, uint64_t, void **, void **))sub_100B2007C, (void (*)(char *, uint64_t, void **, void **))sub_1004D53C0);
}

void *sub_100B6DD88()
{
  uint64_t v1 = v0;
  uint64_t v2 = sub_10000588C(&qword_101649E40);
  __chkstk_darwin(v2 - 8);
  uint64_t v4 = (char *)&v32 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = type metadata accessor for DirectorySequence();
  uint64_t v33 = *(void *)(v5 - 8);
  uint64_t v34 = v5;
  __chkstk_darwin(v5);
  uint64_t v38 = (char *)&v32 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for URL();
  uint64_t v8 = *(void *)(v7 - 8);
  uint64_t v9 = __chkstk_darwin(v7);
  uint64_t v11 = (char *)&v32 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9);
  uint64_t v13 = (char *)&v32 - v12;
  if (qword_101636878 != -1) {
    swift_once();
  }
  sub_100010324(v7, (uint64_t)qword_10170D758);
  UUID.uuidString.getter();
  URL.appendingPathComponent(_:isDirectory:)();
  swift_bridgeObjectRelease();
  uint64_t v39 = _swiftEmptyArrayStorage;
  uint64_t v40 = _swiftEmptyArrayStorage;
  id v15 = [self defaultManager];
  uint64_t v35 = v13;
  NSFileManager.deepSequence(at:includingPropertiesForKeys:options:)();

  DirectorySequence.next()();
  uint64_t v36 = v8;
  uint64_t v16 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v8 + 48);
  unsigned int v17 = v16(v4, 1, v7);
  uint64_t v18 = v7;
  uint64_t v37 = v1;
  if (v17 != 1)
  {
    uint64_t v19 = *(void (**)(char *, char *, uint64_t))(v36 + 32);
    uint64_t v20 = (void (**)(char *, uint64_t))(v36 + 8);
    do
    {
      v19(v11, v4, v18);
      uint64_t v21 = v16;
      sub_100B203C4((uint64_t)v11, v37, (uint64_t *)&v40, (unint64_t *)&v39);
      (*v20)(v11, v18);
      DirectorySequence.next()();
      uint64_t v16 = v21;
    }
    while (v21(v4, 1, v18) != 1);
  }
  (*(void (**)(char *, uint64_t))(v33 + 8))(v38, v34);
  static os_log_type_t.debug.getter();
  sub_10001D4B0(0, (unint64_t *)&qword_10163AE70);
  uint64_t v23 = (void *)static OS_os_log.default.getter();
  sub_10000588C((uint64_t *)&unk_10163AD00);
  uint64_t v24 = swift_allocObject();
  *(_OWORD *)(v24 + 16) = xmmword_101347BA0;
  uint64_t v25 = v40;
  uint64_t v26 = v40[2];
  *(void *)(v24 + 56) = &type metadata for Int;
  *(void *)(v24 + 64) = &protocol witness table for Int;
  *(void *)(v24 + 32) = v26;
  sub_100B7B55C((unint64_t *)&qword_1016605A0, (void (*)(uint64_t))&type metadata accessor for URL);
  unint64_t v27 = v35;
  uint64_t v28 = dispatch thunk of CustomStringConvertible.description.getter();
  uint64_t v30 = v29;
  *(void *)(v24 + 96) = &type metadata for String;
  *(void *)(v24 + 104) = sub_10000B4CC();
  *(void *)(v24 + 72) = v28;
  *(void *)(v24 + 80) = v30;
  os_log(_:dso:log:_:_:)();

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  (*(void (**)(char *, uint64_t))(v36 + 8))(v27, v18);
  return v25;
}

void *sub_100B6E218(uint64_t a1)
{
  return sub_100B6EED4(a1, &qword_101637030, (uint64_t)qword_10170EB70, (void (*)(char *, uint64_t, void **, void **))sub_100B205BC, (uint64_t)sub_100CC8978);
}

void *sub_100B6E250()
{
  uint64_t v1 = v0;
  uint64_t v2 = sub_10000588C(&qword_101649E40);
  __chkstk_darwin(v2 - 8);
  uint64_t v4 = (char *)&v32 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = type metadata accessor for DirectorySequence();
  uint64_t v33 = *(void *)(v5 - 8);
  uint64_t v34 = v5;
  __chkstk_darwin(v5);
  uint64_t v38 = (char *)&v32 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for URL();
  uint64_t v8 = *(void *)(v7 - 8);
  uint64_t v9 = __chkstk_darwin(v7);
  uint64_t v11 = (char *)&v32 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9);
  uint64_t v13 = (char *)&v32 - v12;
  if (qword_101637030 != -1) {
    swift_once();
  }
  sub_100010324(v7, (uint64_t)qword_10170EB70);
  UUID.uuidString.getter();
  URL.appendingPathComponent(_:)();
  swift_bridgeObjectRelease();
  uint64_t v39 = _swiftEmptyArrayStorage;
  uint64_t v40 = _swiftEmptyArrayStorage;
  id v15 = [self defaultManager];
  uint64_t v35 = v13;
  NSFileManager.deepSequence(at:includingPropertiesForKeys:options:)();

  DirectorySequence.next()();
  uint64_t v36 = v8;
  uint64_t v16 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v8 + 48);
  unsigned int v17 = v16(v4, 1, v7);
  uint64_t v18 = v7;
  uint64_t v37 = v1;
  if (v17 != 1)
  {
    uint64_t v19 = *(void (**)(char *, char *, uint64_t))(v36 + 32);
    uint64_t v20 = (void (**)(char *, uint64_t))(v36 + 8);
    do
    {
      v19(v11, v4, v18);
      uint64_t v21 = v16;
      sub_100B205BC((uint64_t)v11, v37, (uint64_t *)&v40, (unint64_t *)&v39);
      (*v20)(v11, v18);
      DirectorySequence.next()();
      uint64_t v16 = v21;
    }
    while (v21(v4, 1, v18) != 1);
  }
  (*(void (**)(char *, uint64_t))(v33 + 8))(v38, v34);
  static os_log_type_t.debug.getter();
  sub_10001D4B0(0, (unint64_t *)&qword_10163AE70);
  uint64_t v23 = (void *)static OS_os_log.default.getter();
  sub_10000588C((uint64_t *)&unk_10163AD00);
  uint64_t v24 = swift_allocObject();
  *(_OWORD *)(v24 + 16) = xmmword_101347BA0;
  uint64_t v25 = v40;
  uint64_t v26 = v40[2];
  *(void *)(v24 + 56) = &type metadata for Int;
  *(void *)(v24 + 64) = &protocol witness table for Int;
  *(void *)(v24 + 32) = v26;
  sub_100B7B55C((unint64_t *)&qword_1016605A0, (void (*)(uint64_t))&type metadata accessor for URL);
  unint64_t v27 = v35;
  uint64_t v28 = dispatch thunk of CustomStringConvertible.description.getter();
  uint64_t v30 = v29;
  *(void *)(v24 + 96) = &type metadata for String;
  *(void *)(v24 + 104) = sub_10000B4CC();
  *(void *)(v24 + 72) = v28;
  *(void *)(v24 + 80) = v30;
  os_log(_:dso:log:_:_:)();

  swift_bridgeObjectRelease();
  (*(void (**)(char *, uint64_t))(v36 + 8))(v27, v18);
  return v25;
}

void *sub_100B6E6DC(uint64_t a1)
{
  return sub_100B6D3C8(a1, &qword_1016370E8, (uint64_t)qword_10170ED10, (void (*)(char *, uint64_t, void **, void **))sub_100B21654, (uint64_t)sub_100DBF454);
}

void *sub_100B6E714()
{
  return sub_100B6C0C8(&qword_1016370E8, (uint64_t)qword_10170ED10, (void (*)(char *, uint64_t, void **, void **))sub_100B21654, (void (*)(char *, uint64_t, void **, void **))sub_100DBF454);
}

void *sub_100B6E74C(uint64_t a1)
{
  return sub_100B6D3C8(a1, &qword_101636B38, (uint64_t)qword_10170DF58, (void (*)(char *, uint64_t, void **, void **))sub_100B213B4, (uint64_t)sub_10048F528);
}

void *sub_100B6E784()
{
  return sub_100B6C0C8(&qword_101636B38, (uint64_t)qword_10170DF58, (void (*)(char *, uint64_t, void **, void **))sub_100B213B4, (void (*)(char *, uint64_t, void **, void **))sub_10048F528);
}

void *sub_100B6E7BC@<X0>(uint64_t a1@<X8>)
{
  uint64_t v44 = a1;
  uint64_t found = type metadata accessor for NotifyWhenFoundRecord();
  uint64_t v2 = *(void *)(found - 8);
  __chkstk_darwin(found);
  uint64_t v4 = (char *)&v42 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = sub_10000588C(&qword_101660BB0);
  __chkstk_darwin(v5 - 8);
  uint64_t v7 = (char *)&v42 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = sub_10000588C(&qword_101659D28);
  uint64_t v9 = __chkstk_darwin(v8 - 8);
  uint64_t v11 = (char *)&v42 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9);
  uint64_t v13 = (char *)&v42 - v12;
  if (qword_101636B38 == -1) {
    goto LABEL_2;
  }
LABEL_39:
  swift_once();
LABEL_2:
  uint64_t v14 = type metadata accessor for URL();
  sub_100010324(v14, (uint64_t)qword_10170DF58);
  uint64_t result = sub_100B1E108();
  uint64_t v16 = result[8];
  uint64_t v45 = result + 8;
  uint64_t v17 = 1 << *((unsigned char *)result + 32);
  uint64_t v18 = -1;
  if (v17 < 64) {
    uint64_t v18 = ~(-1 << v17);
  }
  unint64_t v19 = v18 & v16;
  uint64_t v50 = (uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v2 + 56);
  int64_t v51 = 0;
  uint64_t v48 = v11;
  BOOL v49 = (unsigned int (**)(char *, uint64_t, uint64_t))(v2 + 48);
  int64_t v46 = (unint64_t)(v17 + 63) >> 6;
  unint64_t v47 = result;
  int64_t v43 = v46 - 1;
  char v52 = v13;
  if (v19)
  {
LABEL_5:
    uint64_t v20 = v7;
    uint64_t v21 = v2;
    uint64_t v53 = (v19 - 1) & v19;
    unint64_t v22 = __clz(__rbit64(v19)) | (v51 << 6);
LABEL_6:
    uint64_t v23 = v47;
    uint64_t v24 = v47[6];
    uint64_t v25 = type metadata accessor for UUID();
    (*(void (**)(char *, unint64_t, uint64_t))(*(void *)(v25 - 8) + 16))(v11, v24 + *(void *)(*(void *)(v25 - 8) + 72) * v22, v25);
    uint64_t v26 = v23[7];
    uint64_t v27 = sub_10000588C(&qword_101659D30);
    *(void *)&v11[*(int *)(v27 + 48)] = *(void *)(v26 + 8 * v22);
    (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v27 - 8) + 56))(v11, 0, 1, v27);
    swift_bridgeObjectRetain();
    uint64_t v2 = v21;
    uint64_t v7 = v20;
    uint64_t v13 = v52;
    goto LABEL_25;
  }
  while (1)
  {
    int64_t v28 = v51 + 1;
    if (__OFADD__(v51, 1))
    {
      __break(1u);
      goto LABEL_39;
    }
    if (v28 < v46)
    {
      unint64_t v29 = v45[v28];
      if (v29) {
        goto LABEL_10;
      }
      int64_t v30 = v51 + 2;
      ++v51;
      if (v28 + 1 < v46)
      {
        unint64_t v29 = v45[v30];
        if (v29) {
          goto LABEL_13;
        }
        int64_t v51 = v28 + 1;
        if (v28 + 2 < v46)
        {
          unint64_t v29 = v45[v28 + 2];
          if (v29)
          {
            v28 += 2;
            goto LABEL_10;
          }
          int64_t v30 = v28 + 3;
          int64_t v51 = v28 + 2;
          if (v28 + 3 < v46) {
            break;
          }
        }
      }
    }
LABEL_24:
    uint64_t v31 = sub_10000588C(&qword_101659D30);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v31 - 8) + 56))(v11, 1, 1, v31);
    uint64_t v53 = 0;
LABEL_25:
    sub_10001D608((uint64_t)v11, (uint64_t)v13, &qword_101659D28);
    uint64_t v32 = sub_10000588C(&qword_101659D30);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v32 - 8) + 48))(v13, 1, v32) == 1)
    {
      swift_release();
      return (void *)(*v50)(v44, 1, 1, found);
    }
    uint64_t v33 = *(void *)&v13[*(int *)(v32 + 48)];
    uint64_t v34 = *(void *)(v33 + 16);
    if (v34)
    {
      uint64_t v35 = v33 + ((*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80));
      swift_bridgeObjectRetain();
      uint64_t v36 = v2;
      uint64_t v37 = *(void *)(v2 + 72);
      while (1)
      {
        sub_100B7B490(v35, (uint64_t)v4, (uint64_t (*)(void))type metadata accessor for NotifyWhenFoundRecord);
        if (static UUID.== infix(_:_:)()) {
          break;
        }
        sub_100B7B4F8((uint64_t)v4, (uint64_t (*)(void))type metadata accessor for NotifyWhenFoundRecord);
        v35 += v37;
        if (!--v34)
        {
          swift_bridgeObjectRelease();
          uint64_t v2 = v36;
          uint64_t v13 = v52;
          goto LABEL_31;
        }
      }
      swift_bridgeObjectRelease();
      sub_100B7B5A4((uint64_t)v4, (uint64_t)v7, (uint64_t (*)(void))type metadata accessor for NotifyWhenFoundRecord);
      uint64_t v38 = *v50;
      (*v50)((uint64_t)v7, 0, 1, found);
      uint64_t v2 = v36;
      uint64_t v13 = v52;
    }
    else
    {
LABEL_31:
      uint64_t v38 = *v50;
      (*v50)((uint64_t)v7, 1, 1, found);
    }
    swift_bridgeObjectRelease();
    if ((*v49)(v7, 1, found) != 1)
    {
      swift_release();
      uint64_t v40 = v44;
      sub_100B7B5A4((uint64_t)v7, v44, (uint64_t (*)(void))type metadata accessor for NotifyWhenFoundRecord);
      v38(v40, 0, 1, found);
      uint64_t v41 = type metadata accessor for UUID();
      return (void *)(*(uint64_t (**)(char *, uint64_t))(*(void *)(v41 - 8) + 8))(v13, v41);
    }
    sub_10001DAB4((uint64_t)v7, &qword_101660BB0);
    uint64_t v39 = type metadata accessor for UUID();
    uint64_t result = (void *)(*(uint64_t (**)(char *, uint64_t))(*(void *)(v39 - 8) + 8))(v13, v39);
    uint64_t v11 = v48;
    unint64_t v19 = v53;
    if (v53) {
      goto LABEL_5;
    }
  }
  unint64_t v29 = v45[v30];
  if (v29)
  {
LABEL_13:
    int64_t v28 = v30;
LABEL_10:
    uint64_t v20 = v7;
    uint64_t v21 = v2;
    uint64_t v53 = (v29 - 1) & v29;
    unint64_t v22 = __clz(__rbit64(v29)) + (v28 << 6);
    int64_t v51 = v28;
    goto LABEL_6;
  }
  while (1)
  {
    int64_t v28 = v30 + 1;
    if (__OFADD__(v30, 1)) {
      break;
    }
    if (v28 >= v46)
    {
      int64_t v51 = v43;
      goto LABEL_24;
    }
    unint64_t v29 = v45[v28];
    ++v30;
    if (v29) {
      goto LABEL_10;
    }
  }
  __break(1u);
  return result;
}

void *sub_100B6EE9C(uint64_t a1)
{
  return sub_100B6EED4(a1, &qword_101637638, (uint64_t)qword_10170F7E8, (void (*)(char *, uint64_t, void **, void **))sub_100B20274, (uint64_t)sub_1012705A0);
}

void *sub_100B6EED4(uint64_t a1, void *a2, uint64_t a3, void (*a4)(char *, uint64_t, void **, void **), uint64_t a5)
{
  uint64_t v43 = a5;
  uint64_t v44 = a4;
  uint64_t v8 = v5;
  uint64_t v9 = sub_10000588C(&qword_101649E40);
  __chkstk_darwin(v9 - 8);
  uint64_t v11 = (char *)&v39 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = type metadata accessor for DirectorySequence();
  uint64_t v39 = *(void *)(v12 - 8);
  uint64_t v40 = v12;
  __chkstk_darwin(v12);
  uint64_t v45 = (char *)&v39 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = type metadata accessor for URL();
  uint64_t v15 = *(void *)(v14 - 8);
  uint64_t v16 = __chkstk_darwin(v14);
  uint64_t v18 = (char *)&v39 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v16);
  uint64_t v20 = (char *)&v39 - v19;
  if (*a2 != -1) {
    swift_once();
  }
  sub_100010324(v14, a3);
  UUID.uuidString.getter();
  URL.appendingPathComponent(_:)();
  swift_bridgeObjectRelease();
  int64_t v46 = _swiftEmptyArrayStorage;
  unint64_t v47 = _swiftEmptyArrayStorage;
  id v22 = [self defaultManager];
  uint64_t v41 = v20;
  NSFileManager.deepSequence(at:includingPropertiesForKeys:options:)();

  DirectorySequence.next()();
  uint64_t v42 = v15;
  uint64_t v23 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v15 + 48);
  unsigned int v24 = v23(v11, 1, v14);
  uint64_t v25 = v14;
  uint64_t v43 = v8;
  if (v24 != 1)
  {
    uint64_t v26 = *(void (**)(char *, char *, uint64_t))(v42 + 32);
    uint64_t v27 = (void (**)(char *, uint64_t))(v42 + 8);
    do
    {
      v26(v18, v11, v25);
      int64_t v28 = v23;
      v44(v18, v43, &v47, &v46);
      (*v27)(v18, v25);
      DirectorySequence.next()();
      uint64_t v23 = v28;
    }
    while (v28(v11, 1, v25) != 1);
  }
  (*(void (**)(char *, uint64_t))(v39 + 8))(v45, v40);
  static os_log_type_t.debug.getter();
  sub_10001D4B0(0, (unint64_t *)&qword_10163AE70);
  int64_t v30 = (void *)static OS_os_log.default.getter();
  sub_10000588C((uint64_t *)&unk_10163AD00);
  uint64_t v31 = swift_allocObject();
  *(_OWORD *)(v31 + 16) = xmmword_101347BA0;
  uint64_t v32 = v47;
  uint64_t v33 = v47[2];
  *(void *)(v31 + 56) = &type metadata for Int;
  *(void *)(v31 + 64) = &protocol witness table for Int;
  *(void *)(v31 + 32) = v33;
  sub_100B7B55C((unint64_t *)&qword_1016605A0, (void (*)(uint64_t))&type metadata accessor for URL);
  uint64_t v34 = v41;
  uint64_t v35 = dispatch thunk of CustomStringConvertible.description.getter();
  uint64_t v37 = v36;
  *(void *)(v31 + 96) = &type metadata for String;
  *(void *)(v31 + 104) = sub_10000B4CC();
  *(void *)(v31 + 72) = v35;
  *(void *)(v31 + 80) = v37;
  os_log(_:dso:log:_:_:)();

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  (*(void (**)(char *, uint64_t))(v42 + 8))(v34, v25);
  return v32;
}

uint64_t sub_100B6F358()
{
  return OS_dispatch_queue.sync<A>(execute:)();
}

void sub_100B6F3B4(uint64_t a1, uint64_t a2, void *a3, uint64_t a4)
{
  uint64_t v88 = a2;
  uint64_t v84 = a1;
  uint64_t v74 = *(a3 - 1);
  __chkstk_darwin(a1);
  unint64_t v73 = (char *)&v68 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v80 = type metadata accessor for URLResourceValues();
  uint64_t v79 = *(void *)(v80 - 8);
  __chkstk_darwin(v80);
  uint64_t v83 = (char *)&v68 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v78 = type metadata accessor for UUID();
  uint64_t v77 = *(void *)(v78 - 8);
  __chkstk_darwin(v78);
  *(void *)&long long v82 = (char *)&v68 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = type metadata accessor for URL();
  uint64_t v85 = *(void *)(v9 - 8);
  uint64_t v86 = v9;
  uint64_t v10 = __chkstk_darwin(v9);
  uint64_t v76 = (char *)&v68 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = __chkstk_darwin(v10);
  uint64_t v81 = (char *)&v68 - v13;
  __chkstk_darwin(v12);
  long long v75 = (char *)&v68 - v14;
  uint64_t v15 = type metadata accessor for SystemInfo.DeviceLockState();
  uint64_t v16 = *(void *)(v15 - 8);
  uint64_t v17 = __chkstk_darwin(v15);
  uint64_t v19 = (char *)&v68 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v17);
  uint64_t v21 = (char *)&v68 - v20;
  static SystemInfo.lockState.getter();
  (*(void (**)(char *, void, uint64_t))(v16 + 104))(v19, enum case for SystemInfo.DeviceLockState.beforeFirstUnlock(_:), v15);
  sub_100B7B55C((unint64_t *)&unk_101655610, (void (*)(uint64_t))&type metadata accessor for SystemInfo.DeviceLockState);
  dispatch thunk of RawRepresentable.rawValue.getter();
  dispatch thunk of RawRepresentable.rawValue.getter();
  id v23 = v89;
  id v22 = v90[0];
  unsigned int v24 = *(void (**)(char *, uint64_t))(v16 + 8);
  v24(v19, v15);
  v24(v21, v15);
  if (v22 == v23)
  {
    static os_log_type_t.default.getter();
    if (qword_101637260 != -1) {
      swift_once();
    }
    os_log(_:dso:log:_:_:)();
    sub_10009FD9C();
    swift_allocError();
    *uint64_t v25 = 0;
    swift_willThrow();
  }
  else
  {
    Class v26 = isa;
    sub_100B7B27C();
    if (!v26)
    {
      uint64_t v29 = v27;
      unint64_t v30 = v28;
      uint64_t v31 = sub_1010EB9E4(v27, v28, 0);
      unint64_t v33 = v32;
      uint64_t v72 = v29;
      unint64_t v71 = v30;
      Class isa = Data._bridgeToObjectiveC()().super.isa;
      sub_10001CFB8((uint64_t)v31, v33);
      sub_10001D4B0(0, (unint64_t *)&qword_101642980);
      uint64_t v70 = *(void (**)(void *, uint64_t))(a4 + 40);
      uint64_t v34 = v75;
      v70(a3, a4);
      static NSFileManager.createDirectoryIfNecessary(url:attributes:)();
      uint64_t v35 = v85 + 8;
      uint64_t v36 = *(void (**)(char *, uint64_t))(v85 + 8);
      v36(v34, v86);
      (*(void (**)(void *, uint64_t))(a4 + 32))(a3, a4);
      os_log_type_t v69 = a3;
      uint64_t v68 = (void *)a4;
      v70(a3, a4);
      UUID.uuidString.getter();
      uint64_t v38 = v76;
      URL.appendingPathComponent(_:)();
      swift_bridgeObjectRelease();
      uint64_t v39 = v81;
      URL.appendingPathExtension(_:)();
      uint64_t v40 = v86;
      v36(v38, v86);
      uint64_t v85 = v35;
      uint64_t v76 = (char *)v36;
      v36(v34, v40);
      (*(void (**)(void, uint64_t))(v77 + 8))(v82, v78);
      URLResourceValues.init()();
      URLResourceValues.isExcludedFromBackup.setter();
      URL._bridgeToObjectiveC()(v42);
      uint64_t v44 = v43;
      [(objc_class *)isa writeToURL:v43 atomically:1];

      static os_log_type_t.default.getter();
      if (qword_101637260 != -1) {
        swift_once();
      }
      sub_10000588C((uint64_t *)&unk_10163AD00);
      uint64_t v45 = swift_allocObject();
      long long v82 = xmmword_101342130;
      *(_OWORD *)(v45 + 16) = xmmword_101342130;
      sub_100B7B55C((unint64_t *)&qword_1016605A0, (void (*)(uint64_t))&type metadata accessor for URL);
      uint64_t v46 = dispatch thunk of CustomStringConvertible.description.getter();
      uint64_t v48 = v47;
      *(void *)(v45 + 56) = &type metadata for String;
      unint64_t v49 = sub_10000B4CC();
      *(void *)(v45 + 64) = v49;
      *(void *)(v45 + 32) = v46;
      *(void *)(v45 + 40) = v48;
      os_log(_:dso:log:_:_:)();
      swift_bridgeObjectRelease();
      sub_10000588C(&qword_101650640);
      uint64_t inited = swift_initStackObject();
      *(_OWORD *)(inited + 16) = v82;
      *(void *)(inited + 32) = NSFileProtectionKey;
      *(void *)(inited + 40) = NSFileProtectionCompleteUntilFirstUserAuthentication;
      int64_t v51 = NSFileProtectionKey;
      char v52 = NSFileProtectionCompleteUntilFirstUserAuthentication;
      unint64_t v53 = sub_10092DE24(inited);
      id v54 = [self defaultManager];
      sub_100653FB8(v53);
      swift_bridgeObjectRelease();
      type metadata accessor for FileAttributeKey(0);
      sub_100B7B55C(&qword_1016387D0, type metadata accessor for FileAttributeKey);
      Class v55 = Dictionary._bridgeToObjectiveC()().super.isa;
      swift_bridgeObjectRelease();
      URL.path.getter();
      NSString v56 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease();
      v90[0] = 0;
      LODWORD(v48) = [v54 setAttributes:v55 ofItemAtPath:v56 error:v90];

      if (v48)
      {
        id v57 = v90[0];
        uint64_t v58 = v83;
        URL.setResourceValues(_:)();
        LODWORD(v77) = static os_log_type_t.default.getter();
        uint64_t v78 = qword_10170EFB8;
        uint64_t v60 = swift_allocObject();
        *(_OWORD *)(v60 + 16) = v82;
        uint64_t v61 = *(void (**)(char *, uint64_t, void *))(v74 + 16);
        uint64_t v62 = v88;
        char v63 = v69;
        v61(v73, v88, v69);
        uint64_t v64 = String.init<A>(describing:)();
        *(void *)(v60 + 56) = &type metadata for String;
        *(void *)(v60 + 64) = v49;
        *(void *)(v60 + 32) = v64;
        *(void *)(v60 + 40) = v65;
        os_log(_:dso:log:_:_:)();
        swift_bridgeObjectRelease();
        v90[3] = v63;
        v90[4] = v68;
        int64_t v66 = sub_10001D958((uint64_t *)v90);
        v61((char *)v66, v62, v63);
        PassthroughSubject.send(_:)();

        sub_10001CFB8(v72, v71);
        (*(void (**)(char *, uint64_t))(v79 + 8))(v58, v80);
        _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)v90);
        os_log_type_t v67 = v81;
      }
      else
      {
        id v59 = v90[0];
        _convertNSErrorToError(_:)();

        swift_willThrow();
        sub_10001CFB8(v72, v71);
        (*(void (**)(char *, uint64_t))(v79 + 8))(v83, v80);
        os_log_type_t v67 = v39;
      }
      ((void (*)(char *, uint64_t))v76)(v67, v86);
    }
  }
}

uint64_t sub_100B6FF54@<X0>(uint64_t *a1@<X8>)
{
  type metadata accessor for PropertyListEncoder();
  swift_allocObject();
  PropertyListEncoder.init()();
  uint64_t v3 = dispatch thunk of PropertyListEncoder.encode<A>(_:)();
  uint64_t v5 = v4;
  uint64_t result = swift_release();
  if (!v1)
  {
    *a1 = v3;
    a1[1] = v5;
  }
  return result;
}

void sub_100B6FFF4()
{
  sub_100B70088();
}

uint64_t sub_100B70088()
{
  uint64_t result = dispatch thunk of PropertyListDecoder.decode<A>(_:from:)();
  if (v0)
  {
    static os_log_type_t.error.getter();
    if (qword_101637260 != -1) {
      swift_once();
    }
    sub_10000588C((uint64_t *)&unk_10163AD00);
    uint64_t v2 = swift_allocObject();
    *(_OWORD *)(v2 + 16) = xmmword_101347BA0;
    swift_getMetatypeMetadata();
    uint64_t v3 = String.init<A>(describing:)();
    uint64_t v5 = v4;
    *(void *)(v2 + 56) = &type metadata for String;
    unint64_t v6 = sub_10000B4CC();
    *(void *)(v2 + 64) = v6;
    *(void *)(v2 + 32) = v3;
    *(void *)(v2 + 40) = v5;
    swift_errorRetain();
    sub_10000588C(&qword_101638D40);
    uint64_t v7 = String.init<A>(describing:)();
    *(void *)(v2 + 96) = &type metadata for String;
    *(void *)(v2 + 104) = v6;
    *(void *)(v2 + 72) = v7;
    *(void *)(v2 + 80) = v8;
    os_log(_:dso:log:_:_:)();
    swift_bridgeObjectRelease();
    return swift_willThrow();
  }
  return result;
}

uint64_t sub_100B701EC()
{
  dispatch_assert_queue_V2(*(dispatch_queue_t *)(v0 + 16));
  sub_10001D4B0(0, (unint64_t *)&qword_101642980);
  static NSFileManager.removeDirectory(url:)();
  return 0;
}

void sub_100B7039C()
{
  if (qword_101636F50 != -1) {
    swift_once();
  }
  uint64_t v0 = type metadata accessor for Logger();
  sub_100010324(v0, (uint64_t)qword_10170E9E8);
  swift_errorRetain();
  oslog = Logger.logObject.getter();
  os_log_type_t v1 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(oslog, v1))
  {
    uint64_t v2 = (uint8_t *)swift_slowAlloc();
    uint64_t v3 = (void *)swift_slowAlloc();
    *(_DWORD *)uint64_t v2 = 138412290;
    uint64_t v5 = _convertErrorToNSError(_:)();
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *uint64_t v3 = v5;
    swift_errorRelease();
    _os_log_impl((void *)&_mh_execute_header, oslog, v1, "Error purging storage %@", v2, 0xCu);
    sub_10000588C((uint64_t *)&unk_101638EA0);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    swift_errorRelease();
  }
}

void sub_100B70558()
{
  if (qword_101636F50 != -1) {
    swift_once();
  }
  uint64_t v0 = type metadata accessor for Logger();
  sub_100010324(v0, (uint64_t)qword_10170E9E8);
  os_log_type_t v1 = Logger.logObject.getter();
  os_log_type_t v2 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v1, v2))
  {
    uint64_t v3 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v3 = 0;
    _os_log_impl((void *)&_mh_execute_header, v1, v2, "Purging all cache storage", v3, 2u);
    swift_slowDealloc();
  }

  type metadata accessor for Transaction();
  swift_allocObject();
  uint64_t v4 = swift_weakInit();
  __chkstk_darwin(v4);
  static Transaction.named<A>(_:with:)();
  swift_release();
  sub_100B7071C();
}

void sub_100B7071C()
{
  uint64_t v2 = v0;
  uint64_t v3 = type metadata accessor for URL();
  uint64_t v30 = *(void *)(v3 - 8);
  uint64_t v4 = __chkstk_darwin(v3);
  unint64_t v6 = (char *)v29 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v4);
  uint64_t v8 = (char *)v29 - v7;
  uint64_t v9 = type metadata accessor for DispatchPredicate();
  uint64_t v10 = *(void *)(v9 - 8);
  __chkstk_darwin(v9);
  uint64_t v12 = (void *)((char *)v29 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v13 = *(void **)(v2 + 16);
  *uint64_t v12 = v13;
  (*(void (**)(void *, void, uint64_t))(v10 + 104))(v12, enum case for DispatchPredicate.onQueue(_:), v9);
  id v14 = v13;
  LOBYTE(v13) = _dispatchPreconditionTest(_:)();
  (*(void (**)(void *, uint64_t))(v10 + 8))(v12, v9);
  if (v13)
  {
    if (qword_101636F50 == -1) {
      goto LABEL_3;
    }
  }
  else
  {
    __break(1u);
  }
  swift_once();
LABEL_3:
  uint64_t v15 = type metadata accessor for Logger();
  sub_100010324(v15, (uint64_t)qword_10170E9E8);
  uint64_t v16 = Logger.logObject.getter();
  os_log_type_t v17 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v16, v17))
  {
    uint64_t v18 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v18 = 0;
    _os_log_impl((void *)&_mh_execute_header, v16, v17, "Purging local cache storage", v18, 2u);
    swift_slowDealloc();
  }
  v29[1] = v1;

  if (qword_101637638 != -1) {
    swift_once();
  }
  sub_100010324(v3, (uint64_t)qword_10170F7E8);
  sub_100B701EC();
  type metadata accessor for BeaconStore(0);
  sub_100A9DB34((uint64_t)v6);
  URL.appendingPathComponent(_:isDirectory:)();
  uint64_t v19 = *(void (**)(char *, uint64_t))(v30 + 8);
  v19(v6, v3);
  sub_100B701EC();
  swift_errorRelease();
  v19(v8, v3);
  if (qword_101636940 != -1) {
    swift_once();
  }
  sub_100010324(v3, (uint64_t)qword_10170DA70);
  sub_100B701EC();
  swift_errorRelease();
  if (qword_101636D10 != -1) {
    swift_once();
  }
  sub_100010324(v3, (uint64_t)qword_10170E3E8);
  sub_100B701EC();
  swift_errorRelease();
  if (qword_101636CC0 != -1) {
    swift_once();
  }
  sub_100010324(v3, (uint64_t)qword_10170E338);
  sub_100B701EC();
  swift_errorRelease();
  sub_100F7E414((uint64_t)v6);
  URL.appendingPathComponent(_:isDirectory:)();
  v19(v6, v3);
  sub_100B701EC();
  swift_errorRelease();
  v19(v8, v3);
  uint64_t v20 = v19;
  if (qword_1016373C8 != -1) {
    swift_once();
  }
  uint64_t v21 = sub_100010324(v3, (uint64_t)qword_10170F150);
  id v22 = *(void (**)(char *, uint64_t, uint64_t))(v30 + 16);
  v30 += 16;
  v22(v8, v21, v3);
  sub_100B701EC();
  swift_errorRelease();
  v29[0] = v20;
  v20(v8, v3);
  if (qword_101636FA8 != -1) {
    swift_once();
  }
  sub_100010324(v3, (uint64_t)qword_10170EA78);
  sub_100B701EC();
  swift_errorRelease();
  if (qword_101636BB0 != -1) {
    swift_once();
  }
  sub_100010324(v3, (uint64_t)qword_10170E088);
  sub_100B701EC();
  swift_errorRelease();
  if (qword_101636BF0 != -1) {
    swift_once();
  }
  uint64_t v23 = sub_100010324(v3, (uint64_t)qword_10170E118);
  v22(v8, v23, v3);
  uint64_t v24 = sub_100B701EC();
  swift_errorRelease();
  ((void (*)(char *, uint64_t))v29[0])(v8, v3);
  swift_errorRetain();
  if (qword_101636CD8 != -1) {
    swift_once();
  }
  static os_log_type_t.default.getter();
  if (qword_1016372C8 != -1) {
    swift_once();
  }
  os_log(_:dso:log:_:_:)();
  QueueSynchronizer.conditionalSync<A>(_:)();
  id v25 = [self standardUserDefaults];
  id v26 = [v25 dictionaryRepresentation];
  uint64_t v27 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)();

  id v28 = v25;
  sub_100B7A23C(v27, v28);
  swift_bridgeObjectRelease();

  if (v24)
  {
    swift_willThrow();
    swift_errorRelease();
  }
}

uint64_t sub_100B70F2C(uint64_t a1, void *a2)
{
  uint64_t v4 = type metadata accessor for DispatchTime();
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = __chkstk_darwin(v4);
  uint64_t v8 = (char *)&v17 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  uint64_t v10 = (char *)&v17 - v9;
  dispatch_queue_t v18 = *(dispatch_queue_t *)(a1 + 16);
  uint64_t v11 = swift_allocObject();
  *(void *)(v11 + 16) = a2;
  *(void *)(v11 + 24) = a1;
  uint64_t v12 = swift_allocObject();
  *(void *)(v12 + 16) = sub_100B7B1D8;
  *(void *)(v12 + 24) = v11;
  aBlock[4] = sub_100132424;
  aBlock[5] = v12;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_1000A70B0;
  aBlock[3] = &unk_1015EA848;
  uint64_t v13 = _Block_copy(aBlock);
  a2;
  swift_retain();
  swift_retain();
  swift_release();
  dispatch_sync(v18, v13);
  _Block_release(v13);
  LOBYTE(a1) = swift_isEscapingClosureAtFileLocation();
  swift_release();
  if (a1)
  {
    __break(1u);
LABEL_9:
    swift_once();
    goto LABEL_7;
  }
  static DispatchTime.now()();
  + infix(_:_:)();
  id v14 = *(void (**)(char *, uint64_t))(v5 + 8);
  v14(v8, v4);
  char v15 = OS_dispatch_group.wait(timeout:)();
  v14(v10, v4);
  if (v15)
  {
    static os_log_type_t.error.getter();
    if (qword_101637260 != -1) {
      swift_once();
    }
    os_log(_:dso:log:_:_:)();
  }
  static os_log_type_t.default.getter();
  if (qword_101637268 != -1) {
    goto LABEL_9;
  }
LABEL_7:
  os_log(_:dso:log:_:_:)();
  return swift_release();
}

uint64_t sub_100B71260(NSObject *a1)
{
  v75[0] = a1;
  uint64_t v1 = type metadata accessor for URL();
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = __chkstk_darwin(v1);
  uint64_t v5 = (char *)v75 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = __chkstk_darwin(v3);
  uint64_t v8 = (char *)v75 - v7;
  uint64_t v9 = __chkstk_darwin(v6);
  uint64_t v11 = (char *)v75 - v10;
  __chkstk_darwin(v9);
  uint64_t v13 = (char *)v75 - v12;
  static os_log_type_t.default.getter();
  if (qword_101637260 != -1) {
    swift_once();
  }
  os_log(_:dso:log:_:_:)();
  v75[1] = (dispatch_group_t)type metadata accessor for BeaconStore(0);
  sub_100A9DB34((uint64_t)v11);
  URL.appendingPathComponent(_:isDirectory:)();
  uint64_t v76 = *(void (**)(char *, uint64_t))(v2 + 8);
  v76(v11, v1);
  static os_log_type_t.default.getter();
  if (qword_101637268 != -1) {
    swift_once();
  }
  os_log(_:dso:log:_:_:)();
  uint64_t v14 = sub_100B701EC();
  if (qword_1016370B0 != -1) {
    swift_once();
  }
  sub_100010324(v1, (uint64_t)qword_10170ECC0);
  uint64_t v15 = sub_100B701EC();
  if (v15)
  {
    uint64_t v16 = v15;
    swift_errorRelease();
    uint64_t v14 = v16;
  }
  if (qword_1016375F0 != -1) {
    swift_once();
  }
  sub_100010324(v1, (uint64_t)qword_10170F760);
  uint64_t v17 = sub_100B701EC();
  if (v17)
  {
    uint64_t v18 = v17;
    swift_errorRelease();
    uint64_t v14 = v18;
  }
  if (qword_1016370E8 != -1) {
    swift_once();
  }
  sub_100010324(v1, (uint64_t)qword_10170ED10);
  uint64_t v19 = sub_100B701EC();
  if (v19)
  {
    uint64_t v20 = v19;
    swift_errorRelease();
    uint64_t v14 = v20;
  }
  if (qword_101636878 != -1) {
    swift_once();
  }
  sub_100010324(v1, (uint64_t)qword_10170D758);
  uint64_t v21 = sub_100B701EC();
  if (v21)
  {
    uint64_t v22 = v21;
    swift_errorRelease();
    uint64_t v14 = v22;
  }
  if (qword_101637030 != -1) {
    swift_once();
  }
  sub_100010324(v1, (uint64_t)qword_10170EB70);
  uint64_t v23 = sub_100B701EC();
  if (v23)
  {
    uint64_t v24 = v23;
    swift_errorRelease();
    uint64_t v14 = v24;
  }
  if (qword_101636CC0 != -1) {
    swift_once();
  }
  sub_100010324(v1, (uint64_t)qword_10170E338);
  uint64_t v25 = sub_100B701EC();
  if (v25)
  {
    uint64_t v26 = v25;
    swift_errorRelease();
    uint64_t v14 = v26;
  }
  if (qword_101636B38 != -1) {
    swift_once();
  }
  sub_100010324(v1, (uint64_t)qword_10170DF58);
  uint64_t v27 = sub_100B701EC();
  if (v27)
  {
    uint64_t v28 = v27;
    swift_errorRelease();
    uint64_t v14 = v28;
  }
  if (qword_101636B50 != -1) {
    swift_once();
  }
  sub_100010324(v1, (uint64_t)qword_10170DF88);
  uint64_t v29 = sub_100B701EC();
  if (v29)
  {
    uint64_t v30 = v29;
    swift_errorRelease();
    uint64_t v14 = v30;
  }
  sub_100A9DB34((uint64_t)v11);
  URL.appendingPathComponent(_:isDirectory:)();
  v76(v11, v1);
  uint64_t v31 = sub_100B701EC();
  if (v31)
  {
    uint64_t v32 = v31;
    swift_errorRelease();
    uint64_t v14 = v32;
  }
  sub_100A9DB34((uint64_t)v5);
  URL.appendingPathComponent(_:isDirectory:)();
  unint64_t v33 = v76;
  v76(v5, v1);
  uint64_t v34 = sub_100B701EC();
  v33(v11, v1);
  uint64_t v35 = v8;
  if (v34)
  {
    swift_errorRelease();
    uint64_t v14 = v34;
  }
  sub_100A9DB34((uint64_t)v5);
  URL.appendingPathComponent(_:isDirectory:)();
  uint64_t v36 = v76;
  v76(v5, v1);
  uint64_t v37 = sub_100B701EC();
  v36(v11, v1);
  if (v37)
  {
    swift_errorRelease();
    uint64_t v14 = v37;
  }
  sub_100A9DB34((uint64_t)v5);
  URL.appendingPathComponent(_:isDirectory:)();
  uint64_t v38 = v76;
  v76(v5, v1);
  uint64_t v39 = sub_100B701EC();
  v38(v11, v1);
  uint64_t v40 = v35;
  if (v39)
  {
    swift_errorRelease();
    uint64_t v14 = v39;
  }
  uint64_t v41 = v13;
  sub_100A9DB34((uint64_t)v5);
  URL.appendingPathComponent(_:isDirectory:)();
  uint64_t v42 = v76;
  v76(v5, v1);
  uint64_t v43 = sub_100B701EC();
  v42(v11, v1);
  if (v43)
  {
    swift_errorRelease();
    uint64_t v14 = v43;
  }
  sub_100A9DB34((uint64_t)v5);
  URL.appendingPathComponent(_:isDirectory:)();
  uint64_t v44 = v5;
  uint64_t v45 = v76;
  v76(v44, v1);
  uint64_t v46 = sub_100B701EC();
  v45(v11, v1);
  if (v46)
  {
    swift_errorRelease();
    uint64_t v14 = v46;
  }
  if (qword_101637620 != -1) {
    swift_once();
  }
  sub_100010324(v1, (uint64_t)qword_10170F7B0);
  uint64_t v47 = sub_100B701EC();
  if (v47)
  {
    uint64_t v48 = v47;
    swift_errorRelease();
    uint64_t v14 = v48;
  }
  if (qword_1016371B8 != -1) {
    swift_once();
  }
  sub_100010324(v1, (uint64_t)qword_10170EEB8);
  uint64_t v49 = sub_100B701EC();
  if (v49)
  {
    uint64_t v50 = v49;
    swift_errorRelease();
    uint64_t v14 = v50;
  }
  if (qword_101636870 != -1) {
    swift_once();
  }
  sub_100010324(v1, (uint64_t)qword_10170D740);
  uint64_t v51 = sub_100B701EC();
  if (v51)
  {
    uint64_t v52 = v51;
    swift_errorRelease();
    uint64_t v14 = v52;
  }
  if (qword_101636830 != -1) {
    swift_once();
  }
  sub_100010324(v1, (uint64_t)qword_10170D6C0);
  uint64_t v53 = sub_100B701EC();
  if (v53)
  {
    uint64_t v54 = v53;
    swift_errorRelease();
    uint64_t v14 = v54;
  }
  if (qword_101637130 != -1) {
    swift_once();
  }
  sub_100010324(v1, (uint64_t)qword_10170ED90);
  uint64_t v55 = sub_100B701EC();
  if (v55)
  {
    uint64_t v56 = v55;
    swift_errorRelease();
    uint64_t v14 = v56;
  }
  if (qword_1016374B0 != -1) {
    swift_once();
  }
  sub_100010324(v1, (uint64_t)qword_10170F308);
  uint64_t v57 = sub_100B701EC();
  if (v57)
  {
    uint64_t v58 = v57;
    swift_errorRelease();
    uint64_t v14 = v58;
  }
  if (qword_101636958 != -1) {
    swift_once();
  }
  sub_100010324(v1, (uint64_t)qword_10170DAB8);
  uint64_t v59 = sub_100B701EC();
  if (v59)
  {
    uint64_t v60 = v59;
    swift_errorRelease();
    uint64_t v14 = v60;
  }
  if (qword_101637160 != -1) {
    swift_once();
  }
  sub_100010324(v1, (uint64_t)qword_10170EE20);
  uint64_t v61 = sub_100B701EC();
  if (v61)
  {
    uint64_t v62 = v61;
    swift_errorRelease();
    uint64_t v14 = v62;
  }
  if (qword_1016370F0 != -1) {
    swift_once();
  }
  sub_100010324(v1, (uint64_t)qword_10170ED28);
  uint64_t v63 = sub_100B701EC();
  if (v63)
  {
    uint64_t v64 = v63;
    swift_errorRelease();
    uint64_t v14 = v64;
  }
  if (qword_101636A48 != -1) {
    swift_once();
  }
  sub_100010324(v1, (uint64_t)qword_10170DD78);
  uint64_t v65 = sub_100B701EC();
  if (v65)
  {
    uint64_t v66 = v65;
    swift_errorRelease();
    uint64_t v14 = v66;
  }
  if (qword_1016370C8 != -1) {
    swift_once();
  }
  sub_100010324(v1, (uint64_t)qword_10170ECE0);
  uint64_t v67 = sub_100B701EC();
  if (v67)
  {
    uint64_t v68 = v67;
    swift_errorRelease();
    uint64_t v14 = v68;
LABEL_95:
    swift_errorRetain();
    static os_log_type_t.default.getter();
    sub_10000588C((uint64_t *)&unk_10163AD00);
    uint64_t v69 = swift_allocObject();
    *(_OWORD *)(v69 + 16) = xmmword_101342130;
    uint64_t v77 = v14;
    swift_errorRetain();
    sub_10000588C(&qword_101638D40);
    uint64_t v70 = String.init<A>(describing:)();
    uint64_t v72 = v71;
    *(void *)(v69 + 56) = &type metadata for String;
    *(void *)(v69 + 64) = sub_10000B4CC();
    *(void *)(v69 + 32) = v70;
    *(void *)(v69 + 40) = v72;
    os_log(_:dso:log:_:_:)();
    swift_bridgeObjectRelease();
    swift_errorRelease();
    goto LABEL_96;
  }
  if (v14)
  {
    swift_errorRetain();
    goto LABEL_95;
  }
LABEL_96:
  unint64_t v73 = v76;
  v76(v40, v1);
  v73(v41, v1);
  dispatch_group_leave(v75[0]);
  return swift_errorRelease();
}

uint64_t sub_100B71FB0()
{
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  return v0;
}

uint64_t sub_100B72000()
{
  sub_100B71FB0();

  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for BeaconStoreFileManager()
{
  return self;
}

Swift::Int sub_100B72058(uint64_t *a1)
{
  Swift::Int v3 = a1[1];
  Swift::Int result = _minimumMergeRunLength(_:)(v3);
  if (result >= v3)
  {
    if (v3 < 0) {
      goto LABEL_136;
    }
    if ((unint64_t)v3 >= 2)
    {
      uint64_t v90 = 0;
      uint64_t v91 = *a1;
      for (uint64_t i = 1; i != v3; ++i)
      {
        uint64_t v93 = *(void *)(v91 + 32 * i + 24);
        uint64_t v94 = v90;
        do
        {
          uint64_t v95 = v91 + v94;
          if (*(void *)(v91 + v94 + 24) >= v93) {
            break;
          }
          if (!v91) {
            goto LABEL_140;
          }
          uint64_t v96 = v91 + v94;
          uint64_t v97 = *(void *)(v91 + v94 + 48);
          long long v98 = *(_OWORD *)(v95 + 32);
          long long v99 = *(_OWORD *)(v95 + 16);
          *(_OWORD *)(v95 + 32) = *(_OWORD *)v95;
          *(_OWORD *)(v95 + 48) = v99;
          *(_OWORD *)uint64_t v96 = v98;
          *(void *)(v96 + 16) = v97;
          *(void *)(v95 + 24) = v93;
          v94 -= 32;
        }
        while (v94 != -32);
        v90 += 32;
      }
    }
    return result;
  }
  if (v3 >= 0) {
    uint64_t v5 = v3;
  }
  else {
    uint64_t v5 = v3 + 1;
  }
  if (v3 < -1) {
    goto LABEL_145;
  }
  Swift::Int v6 = result;
  uint64_t v108 = a1;
  if (v3 < 2)
  {
    uint64_t v9 = _swiftEmptyArrayStorage;
    __dst = (char *)&_swiftEmptyArrayStorage[4];
    if (v3 != 1)
    {
      unint64_t v13 = _swiftEmptyArrayStorage[2];
      uint64_t v12 = (char *)_swiftEmptyArrayStorage;
LABEL_102:
      uint64_t v100 = v12;
      uint64_t v110 = v9;
      if (v13 >= 2)
      {
        uint64_t v101 = *v108;
        do
        {
          unint64_t v102 = v13 - 2;
          if (v13 < 2) {
            goto LABEL_131;
          }
          if (!v101) {
            goto LABEL_144;
          }
          uint64_t v103 = v100;
          uint64_t v104 = *(void *)&v100[16 * v102 + 32];
          uint64_t v105 = *(void *)&v100[16 * v13 + 24];
          sub_100B72740((char *)(v101 + 32 * v104), (char *)(v101 + 32 * *(void *)&v100[16 * v13 + 16]), v101 + 32 * v105, __dst);
          if (v1) {
            break;
          }
          if (v105 < v104) {
            goto LABEL_132;
          }
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
            uint64_t v103 = sub_100B73584((uint64_t)v103);
          }
          if (v102 >= *((void *)v103 + 2)) {
            goto LABEL_133;
          }
          uint64_t v106 = &v103[16 * v102 + 32];
          *(void *)uint64_t v106 = v104;
          *((void *)v106 + 1) = v105;
          unint64_t v107 = *((void *)v103 + 2);
          if (v13 > v107) {
            goto LABEL_134;
          }
          memmove(&v103[16 * v13 + 16], &v103[16 * v13 + 32], 16 * (v107 - v13));
          uint64_t v100 = v103;
          *((void *)v103 + 2) = v107 - 1;
          unint64_t v13 = v107 - 1;
        }
        while (v107 > 2);
      }
LABEL_93:
      swift_bridgeObjectRelease();
      v110[2] = 0;
      return swift_bridgeObjectRelease();
    }
    uint64_t v110 = _swiftEmptyArrayStorage;
  }
  else
  {
    uint64_t v7 = v5 >> 1;
    sub_10000588C(&qword_10163A770);
    uint64_t v8 = static Array._allocateBufferUninitialized(minimumCapacity:)();
    *(void *)(v8 + 16) = v7;
    uint64_t v110 = (void *)v8;
    __dst = (char *)(v8 + 32);
  }
  Swift::Int v10 = 0;
  uint64_t v11 = *a1;
  uint64_t v109 = *a1 + 88;
  uint64_t v12 = (char *)_swiftEmptyArrayStorage;
  Swift::Int v111 = v6;
  Swift::Int v112 = v3;
  uint64_t v113 = v11;
  while (1)
  {
    Swift::Int v14 = v10++;
    if (v10 < v3)
    {
      uint64_t v15 = *(void *)(v11 + 32 * v10 + 24);
      uint64_t v16 = *(void *)(v11 + 32 * v14 + 24);
      Swift::Int v10 = v14 + 2;
      if (v14 + 2 < v3)
      {
        uint64_t v17 = (uint64_t *)(v109 + 32 * v14);
        uint64_t v18 = v15;
        while (1)
        {
          uint64_t v20 = *v17;
          v17 += 4;
          uint64_t v19 = v20;
          if (v16 < v15 == v18 >= v20) {
            break;
          }
          ++v10;
          uint64_t v18 = v19;
          if (v3 == v10)
          {
            Swift::Int v10 = v3;
            break;
          }
        }
      }
      if (v16 < v15)
      {
        if (v10 < v14) {
          goto LABEL_137;
        }
        if (v14 < v10)
        {
          uint64_t v21 = 32 * v10;
          uint64_t v22 = 32 * v14;
          Swift::Int v23 = v10;
          Swift::Int v24 = v14;
          do
          {
            if (v24 != --v23)
            {
              if (!v11) {
                goto LABEL_143;
              }
              uint64_t v25 = (_OWORD *)(v11 + v22);
              uint64_t v26 = v11 + v21;
              uint64_t v27 = *(void *)(v11 + v22 + 16);
              uint64_t v28 = *(void *)(v11 + v22 + 24);
              long long v29 = *(_OWORD *)(v11 + v22);
              long long v30 = *(_OWORD *)(v11 + v21 - 16);
              *uint64_t v25 = *(_OWORD *)(v11 + v21 - 32);
              v25[1] = v30;
              *(_OWORD *)(v26 - 32) = v29;
              *(void *)(v26 - 16) = v27;
              *(void *)(v26 - 8) = v28;
            }
            ++v24;
            v21 -= 32;
            v22 += 32;
          }
          while (v24 < v23);
        }
      }
    }
    if (v10 >= v3) {
      goto LABEL_46;
    }
    if (__OFSUB__(v10, v14)) {
      goto LABEL_135;
    }
    if (v10 - v14 >= v6) {
      goto LABEL_46;
    }
    Swift::Int v31 = v14 + v6;
    if (__OFADD__(v14, v6)) {
      goto LABEL_138;
    }
    if (v31 >= v3) {
      Swift::Int v31 = v3;
    }
    if (v31 < v14) {
      break;
    }
    if (v10 != v31)
    {
      uint64_t v32 = (long long *)(v11 + 32 * v10);
      do
      {
        uint64_t v33 = *(void *)(v11 + 32 * v10 + 24);
        Swift::Int v34 = v14;
        uint64_t v35 = v32;
        do
        {
          if (*((void *)v35 - 1) >= v33) {
            break;
          }
          if (!v11) {
            goto LABEL_141;
          }
          uint64_t v36 = *((void *)v35 + 2);
          long long v37 = *v35;
          long long v38 = *(v35 - 1);
          *uint64_t v35 = *(v35 - 2);
          v35[1] = v38;
          *((void *)v35 - 2) = v36;
          *((void *)v35 - 1) = v33;
          *(v35 - 2) = v37;
          v35 -= 2;
          ++v34;
        }
        while (v10 != v34);
        ++v10;
        v32 += 2;
      }
      while (v10 != v31);
      Swift::Int v10 = v31;
    }
LABEL_46:
    if (v10 < v14) {
      goto LABEL_130;
    }
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
      uint64_t v12 = sub_100B729CC(0, *((void *)v12 + 2) + 1, 1, v12);
    }
    unint64_t v40 = *((void *)v12 + 2);
    unint64_t v39 = *((void *)v12 + 3);
    unint64_t v13 = v40 + 1;
    uint64_t v11 = v113;
    if (v40 >= v39 >> 1)
    {
      uint64_t v89 = sub_100B729CC((char *)(v39 > 1), v40 + 1, 1, v12);
      uint64_t v11 = v113;
      uint64_t v12 = v89;
    }
    *((void *)v12 + 2) = v13;
    uint64_t v41 = v12 + 32;
    uint64_t v42 = &v12[16 * v40 + 32];
    *(void *)uint64_t v42 = v14;
    *((void *)v42 + 1) = v10;
    if (v40)
    {
      while (1)
      {
        unint64_t v43 = v13 - 1;
        if (v13 >= 4)
        {
          uint64_t v48 = &v41[16 * v13];
          uint64_t v49 = *((void *)v48 - 8);
          uint64_t v50 = *((void *)v48 - 7);
          BOOL v54 = __OFSUB__(v50, v49);
          uint64_t v51 = v50 - v49;
          if (v54) {
            goto LABEL_119;
          }
          uint64_t v53 = *((void *)v48 - 6);
          uint64_t v52 = *((void *)v48 - 5);
          BOOL v54 = __OFSUB__(v52, v53);
          uint64_t v46 = v52 - v53;
          char v47 = v54;
          if (v54) {
            goto LABEL_120;
          }
          unint64_t v55 = v13 - 2;
          uint64_t v56 = &v41[16 * v13 - 32];
          uint64_t v58 = *(void *)v56;
          uint64_t v57 = *((void *)v56 + 1);
          BOOL v54 = __OFSUB__(v57, v58);
          uint64_t v59 = v57 - v58;
          if (v54) {
            goto LABEL_122;
          }
          BOOL v54 = __OFADD__(v46, v59);
          uint64_t v60 = v46 + v59;
          if (v54) {
            goto LABEL_125;
          }
          if (v60 >= v51)
          {
            uint64_t v78 = &v41[16 * v43];
            uint64_t v80 = *(void *)v78;
            uint64_t v79 = *((void *)v78 + 1);
            BOOL v54 = __OFSUB__(v79, v80);
            uint64_t v81 = v79 - v80;
            if (v54) {
              goto LABEL_129;
            }
            BOOL v71 = v46 < v81;
            goto LABEL_83;
          }
        }
        else
        {
          if (v13 != 3)
          {
            uint64_t v72 = *((void *)v12 + 4);
            uint64_t v73 = *((void *)v12 + 5);
            BOOL v54 = __OFSUB__(v73, v72);
            uint64_t v65 = v73 - v72;
            char v66 = v54;
            goto LABEL_77;
          }
          uint64_t v45 = *((void *)v12 + 4);
          uint64_t v44 = *((void *)v12 + 5);
          BOOL v54 = __OFSUB__(v44, v45);
          uint64_t v46 = v44 - v45;
          char v47 = v54;
        }
        if (v47) {
          goto LABEL_121;
        }
        unint64_t v55 = v13 - 2;
        uint64_t v61 = &v41[16 * v13 - 32];
        uint64_t v63 = *(void *)v61;
        uint64_t v62 = *((void *)v61 + 1);
        BOOL v64 = __OFSUB__(v62, v63);
        uint64_t v65 = v62 - v63;
        char v66 = v64;
        if (v64) {
          goto LABEL_124;
        }
        uint64_t v67 = &v41[16 * v43];
        uint64_t v69 = *(void *)v67;
        uint64_t v68 = *((void *)v67 + 1);
        BOOL v54 = __OFSUB__(v68, v69);
        uint64_t v70 = v68 - v69;
        if (v54) {
          goto LABEL_127;
        }
        if (__OFADD__(v65, v70)) {
          goto LABEL_128;
        }
        if (v65 + v70 >= v46)
        {
          BOOL v71 = v46 < v70;
LABEL_83:
          if (v71) {
            unint64_t v43 = v55;
          }
          goto LABEL_85;
        }
LABEL_77:
        if (v66) {
          goto LABEL_123;
        }
        uint64_t v74 = &v41[16 * v43];
        uint64_t v76 = *(void *)v74;
        uint64_t v75 = *((void *)v74 + 1);
        BOOL v54 = __OFSUB__(v75, v76);
        uint64_t v77 = v75 - v76;
        if (v54) {
          goto LABEL_126;
        }
        if (v77 < v65) {
          goto LABEL_15;
        }
LABEL_85:
        unint64_t v82 = v43 - 1;
        if (v43 - 1 >= v13)
        {
          __break(1u);
LABEL_116:
          __break(1u);
LABEL_117:
          __break(1u);
LABEL_118:
          __break(1u);
LABEL_119:
          __break(1u);
LABEL_120:
          __break(1u);
LABEL_121:
          __break(1u);
LABEL_122:
          __break(1u);
LABEL_123:
          __break(1u);
LABEL_124:
          __break(1u);
LABEL_125:
          __break(1u);
LABEL_126:
          __break(1u);
LABEL_127:
          __break(1u);
LABEL_128:
          __break(1u);
LABEL_129:
          __break(1u);
LABEL_130:
          __break(1u);
LABEL_131:
          __break(1u);
LABEL_132:
          __break(1u);
LABEL_133:
          __break(1u);
LABEL_134:
          __break(1u);
LABEL_135:
          __break(1u);
LABEL_136:
          __break(1u);
LABEL_137:
          __break(1u);
LABEL_138:
          __break(1u);
          goto LABEL_139;
        }
        if (!v11) {
          goto LABEL_142;
        }
        uint64_t v83 = v12;
        uint64_t v84 = &v41[16 * v82];
        uint64_t v85 = *(void *)v84;
        uint64_t v86 = &v41[16 * v43];
        uint64_t v87 = *((void *)v86 + 1);
        sub_100B72740((char *)(v11 + 32 * *(void *)v84), (char *)(v11 + 32 * *(void *)v86), v11 + 32 * v87, __dst);
        if (v1) {
          goto LABEL_93;
        }
        if (v87 < v85) {
          goto LABEL_116;
        }
        if (v43 > *((void *)v83 + 2)) {
          goto LABEL_117;
        }
        *(void *)uint64_t v84 = v85;
        *(void *)&v41[16 * v82 + 8] = v87;
        unint64_t v88 = *((void *)v83 + 2);
        if (v43 >= v88) {
          goto LABEL_118;
        }
        uint64_t v12 = v83;
        unint64_t v13 = v88 - 1;
        memmove(&v41[16 * v43], v86 + 16, 16 * (v88 - 1 - v43));
        *((void *)v83 + 2) = v88 - 1;
        uint64_t v11 = v113;
        if (v88 <= 2) {
          goto LABEL_15;
        }
      }
    }
    unint64_t v13 = 1;
LABEL_15:
    Swift::Int v6 = v111;
    Swift::Int v3 = v112;
    if (v10 >= v112)
    {
      uint64_t v9 = v110;
      goto LABEL_102;
    }
  }
LABEL_139:
  __break(1u);
LABEL_140:
  __break(1u);
LABEL_141:
  __break(1u);
LABEL_142:
  __break(1u);
LABEL_143:
  __break(1u);
LABEL_144:
  __break(1u);
LABEL_145:
  Swift::Int result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_100B72740(char *__src, char *a2, unint64_t a3, char *__dst)
{
  uint64_t v4 = __dst;
  Swift::Int v6 = a2;
  uint64_t v7 = __src;
  int64_t v8 = a2 - __src;
  int64_t v9 = a2 - __src + 31;
  if (a2 - __src >= 0) {
    int64_t v9 = a2 - __src;
  }
  uint64_t v10 = v9 >> 5;
  uint64_t v11 = a3 - (void)a2;
  uint64_t v12 = a3 - (void)a2 + 31;
  if ((uint64_t)(a3 - (void)a2) >= 0) {
    uint64_t v12 = a3 - (void)a2;
  }
  uint64_t v13 = v12 >> 5;
  uint64_t v28 = __src;
  uint64_t v27 = __dst;
  if (v10 >= v12 >> 5)
  {
    if (v11 >= -31)
    {
      if (__dst != a2 || &a2[32 * v13] <= __dst) {
        memmove(__dst, a2, 32 * v13);
      }
      uint64_t v19 = &v4[32 * v13];
      uint64_t v26 = v19;
      uint64_t v28 = v6;
      if (v7 < v6 && v11 >= 32)
      {
        uint64_t v20 = (char *)(a3 - 32);
        do
        {
          uint64_t v21 = v20 + 32;
          if (*((void *)v6 - 1) >= *((void *)v19 - 1))
          {
            uint64_t v26 = v19 - 32;
            if (v21 < v19 || v20 >= v19 || v21 != v19)
            {
              long long v24 = *((_OWORD *)v19 - 1);
              *(_OWORD *)uint64_t v20 = *((_OWORD *)v19 - 2);
              *((_OWORD *)v20 + 1) = v24;
            }
            uint64_t v22 = v6;
            v19 -= 32;
            if (v6 <= v7) {
              break;
            }
          }
          else
          {
            uint64_t v22 = v6 - 32;
            if (v21 != v6 || v20 >= v6)
            {
              long long v23 = *((_OWORD *)v6 - 1);
              *(_OWORD *)uint64_t v20 = *(_OWORD *)v22;
              *((_OWORD *)v20 + 1) = v23;
            }
            uint64_t v28 = v6 - 32;
            if (v22 <= v7) {
              break;
            }
          }
          v20 -= 32;
          Swift::Int v6 = v22;
        }
        while (v19 > v4);
      }
LABEL_44:
      sub_100B731F0((void **)&v28, &v27, &v26);
      return 1;
    }
  }
  else if (v8 >= -31)
  {
    if (__dst != __src || &__src[32 * v10] <= __dst) {
      memmove(__dst, __src, 32 * v10);
    }
    Swift::Int v14 = &v4[32 * v10];
    uint64_t v26 = v14;
    if ((unint64_t)v6 < a3 && v8 >= 32)
    {
      uint64_t v15 = v4;
      while (1)
      {
        if (*((void *)v15 + 3) >= *((void *)v6 + 3))
        {
          uint64_t v4 = v15 + 32;
          uint64_t v17 = v15;
          uint64_t v16 = v6;
          if (v7 == v15)
          {
            v15 += 32;
            if (v7 < v4) {
              goto LABEL_22;
            }
          }
          else
          {
            v15 += 32;
          }
        }
        else
        {
          uint64_t v16 = v6 + 32;
          uint64_t v17 = v6;
          if (v7 == v6 && v7 < v16) {
            goto LABEL_22;
          }
        }
        long long v18 = *((_OWORD *)v17 + 1);
        *(_OWORD *)uint64_t v7 = *(_OWORD *)v17;
        *((_OWORD *)v7 + 1) = v18;
LABEL_22:
        v7 += 32;
        if (v15 < v14)
        {
          Swift::Int v6 = v16;
          if ((unint64_t)v16 < a3) {
            continue;
          }
        }
        uint64_t v27 = v4;
        uint64_t v28 = v7;
        goto LABEL_44;
      }
    }
    goto LABEL_44;
  }
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

char *sub_100B729CC(char *result, int64_t a2, char a3, char *a4)
{
  char v5 = (char)result;
  if (a3)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    sub_10000588C(&qword_101659D00);
    uint64_t v10 = (char *)swift_allocObject();
    int64_t v11 = j__malloc_size(v10);
    uint64_t v12 = v11 - 32;
    if (v11 < 32) {
      uint64_t v12 = v11 - 17;
    }
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * (v12 >> 4);
  }
  else
  {
    uint64_t v10 = (char *)_swiftEmptyArrayStorage;
  }
  uint64_t v13 = v10 + 32;
  Swift::Int v14 = a4 + 32;
  if (v5)
  {
    if (v10 != a4 || v13 >= &v14[16 * v8]) {
      memmove(v13, v14, 16 * v8);
    }
    *((void *)a4 + 2) = 0;
  }
  else
  {
    memcpy(v13, v14, 16 * v8);
  }
  swift_bridgeObjectRelease();
  return v10;
}

char *sub_100B72AC8(void **a1, const void **a2, void *a3)
{
  Swift::Int v3 = (char *)*a2;
  uint64_t v4 = *a3 - (void)v3;
  uint64_t v5 = v4 + 15;
  if (v4 >= 0) {
    uint64_t v5 = *a3 - (void)v3;
  }
  if (v4 <= -16)
  {
    uint64_t result = (char *)_fatalErrorMessage(_:_:file:line:flags:)();
    __break(1u);
  }
  else
  {
    uint64_t result = (char *)*a1;
    uint64_t v7 = v5 >> 4;
    if (result != v3 || result >= &v3[16 * v7])
    {
      return (char *)memmove(result, v3, 16 * v7);
    }
  }
  return result;
}

uint64_t sub_100B72B84(unint64_t *a1, unint64_t *a2, uint64_t *a3)
{
  return sub_100B73440(a1, a2, a3, (uint64_t (*)(void))&type metadata accessor for UUID);
}

uint64_t sub_100B72B9C(unint64_t *a1, unint64_t *a2, uint64_t *a3)
{
  return sub_100B73440(a1, a2, a3, (uint64_t (*)(void))type metadata accessor for LeaderDevice);
}

char *sub_100B72BB8(void **a1, const void **a2, void *a3)
{
  Swift::Int v3 = (char *)*a2;
  uint64_t v4 = *a3 - (void)v3;
  if (v4 <= -24)
  {
    uint64_t result = (char *)_fatalErrorMessage(_:_:file:line:flags:)();
    __break(1u);
  }
  else
  {
    uint64_t result = (char *)*a1;
    uint64_t v6 = v4 / 24;
    if (result != v3 || result >= &v3[24 * v6])
    {
      return (char *)memmove(result, v3, 24 * v6);
    }
  }
  return result;
}

uint64_t sub_100B72C88(unint64_t *a1, unint64_t *a2, uint64_t *a3)
{
  return sub_100B73440(a1, a2, a3, (uint64_t (*)(void))type metadata accessor for OwnerSharingCircle);
}

uint64_t sub_100B72CA4(unint64_t *a1, unint64_t *a2, uint64_t *a3)
{
  return sub_100B73440(a1, a2, a3, (uint64_t (*)(void))type metadata accessor for BeaconEstimatedLocation);
}

uint64_t sub_100B72CBC(unint64_t *a1, unint64_t *a2, uint64_t *a3)
{
  return sub_100B73440(a1, a2, a3, (uint64_t (*)(void))type metadata accessor for BeaconObservation);
}

uint64_t sub_100B72CD4(unint64_t *a1, unint64_t *a2, uint64_t *a3)
{
  return sub_100B73440(a1, a2, a3, (uint64_t (*)(void))type metadata accessor for DefaultConfigurationLayer);
}

uint64_t sub_100B72CEC(unint64_t *a1, unint64_t *a2, uint64_t *a3)
{
  return sub_100B73440(a1, a2, a3, type metadata accessor for PairingErrorRecord);
}

uint64_t sub_100B72D04(unint64_t *a1, unint64_t *a2, uint64_t *a3)
{
  return sub_100B73440(a1, a2, a3, (uint64_t (*)(void))type metadata accessor for UpdateDeviceState);
}

uint64_t sub_100B72D1C(unint64_t *a1, unint64_t *a2, uint64_t *a3)
{
  return sub_100B73440(a1, a2, a3, (uint64_t (*)(void))type metadata accessor for OwnedDeviceKeyRecord);
}

uint64_t sub_100B72D38(unint64_t *a1, unint64_t *a2, uint64_t *a3)
{
  return sub_100B73440(a1, a2, a3, (uint64_t (*)(void))type metadata accessor for OwnedBeaconRecord);
}

uint64_t sub_100B72D50(unint64_t *a1, unint64_t *a2, uint64_t *a3)
{
  return sub_100B73440(a1, a2, a3, type metadata accessor for OwnedBeaconGroup);
}

uint64_t sub_100B72D68(unint64_t *a1, unint64_t *a2, uint64_t *a3)
{
  return sub_100B73440(a1, a2, a3, (uint64_t (*)(void))type metadata accessor for StandaloneBeacon);
}

char *sub_100B72D80(void **a1, const void **a2, void *a3)
{
  Swift::Int v3 = (char *)*a2;
  uint64_t v4 = *a3 - (void)v3;
  uint64_t v5 = v4 + 7;
  if (v4 >= 0) {
    uint64_t v5 = *a3 - (void)v3;
  }
  if (v4 <= -8)
  {
    uint64_t result = (char *)_fatalErrorMessage(_:_:file:line:flags:)();
    __break(1u);
  }
  else
  {
    uint64_t result = (char *)*a1;
    uint64_t v7 = v5 >> 3;
    if (result != v3 || result >= &v3[8 * v7])
    {
      return (char *)memmove(result, v3, 8 * v7);
    }
  }
  return result;
}

uint64_t sub_100B72E40(unint64_t *a1, unint64_t *a2, uint64_t *a3)
{
  return sub_100B73440(a1, a2, a3, type metadata accessor for BeaconStatus);
}

uint64_t sub_100B72E58(unint64_t *a1, unint64_t *a2, uint64_t *a3)
{
  return sub_100B73440(a1, a2, a3, type metadata accessor for WildModeTrackingLocation);
}

uint64_t sub_100B72E70(unint64_t *a1, unint64_t *a2, uint64_t *a3)
{
  return sub_100B73440(a1, a2, a3, (uint64_t (*)(void))type metadata accessor for ShareRecord);
}

uint64_t sub_100B72E88(unint64_t *a1, unint64_t *a2, uint64_t *a3)
{
  return sub_100B73440(a1, a2, a3, type metadata accessor for FetchRequestBeacon);
}

char *sub_100B72EA0(void **a1, const void **a2, void *a3)
{
  Swift::Int v3 = (char *)*a2;
  uint64_t v4 = *a3 - (void)v3;
  if (v4 <= -40)
  {
    uint64_t result = (char *)_fatalErrorMessage(_:_:file:line:flags:)();
    __break(1u);
  }
  else
  {
    uint64_t result = (char *)*a1;
    uint64_t v6 = v4 / 40;
    if (result != v3 || result >= &v3[40 * v6])
    {
      return (char *)memmove(result, v3, 40 * v6);
    }
  }
  return result;
}

uint64_t sub_100B72F6C(unint64_t *a1, unint64_t *a2, uint64_t *a3)
{
  return sub_100B73440(a1, a2, a3, (uint64_t (*)(void))type metadata accessor for RawSearchResult);
}

char *sub_100B72F84(void **a1, const void **a2, void *a3)
{
  Swift::Int v3 = (char *)*a2;
  uint64_t v4 = *a3 - (void)v3;
  if (v4 <= -32)
  {
    uint64_t result = (char *)_fatalErrorMessage(_:_:file:line:flags:)();
    __break(1u);
  }
  else
  {
    uint64_t result = (char *)*a1;
    size_t v6 = (v4 + (v4 < 0 ? 0x1FuLL : 0)) & 0xFFFFFFFFFFFFFFE0;
    if (result != v3 || result >= &v3[v6])
    {
      return (char *)memmove(result, v3, v6);
    }
  }
  return result;
}

char *sub_100B7303C(void **a1, const void **a2, void *a3)
{
  Swift::Int v3 = (char *)*a2;
  uint64_t v4 = *a3 - (void)v3;
  if (v4 <= -88)
  {
    uint64_t result = (char *)_fatalErrorMessage(_:_:file:line:flags:)();
    __break(1u);
  }
  else
  {
    uint64_t result = (char *)*a1;
    uint64_t v6 = v4 / 88;
    if (result != v3 || result >= &v3[88 * v6])
    {
      return (char *)memmove(result, v3, 88 * v6);
    }
  }
  return result;
}

uint64_t sub_100B73110(unint64_t *a1, unint64_t *a2, uint64_t *a3)
{
  return sub_100B73440(a1, a2, a3, type metadata accessor for BeaconKeyServiceBuilder.KeyIndexMapInfo);
}

char *sub_100B73128(void **a1, const void **a2, void *a3)
{
  Swift::Int v3 = (char *)*a2;
  int64_t v4 = *a3 - (void)v3;
  if (v4 < 0)
  {
    uint64_t result = (char *)_fatalErrorMessage(_:_:file:line:flags:)();
    __break(1u);
  }
  else
  {
    uint64_t result = (char *)*a1;
    if (result != v3 || result >= &v3[v4])
    {
      return (char *)memmove(result, v3, v4);
    }
  }
  return result;
}

uint64_t sub_100B731CC(unint64_t *a1, unint64_t *a2, uint64_t *a3)
{
  return sub_100B732B8(a1, a2, a3, &qword_101655620);
}

uint64_t sub_100B731D8(unint64_t *a1, unint64_t *a2, uint64_t *a3)
{
  return sub_100B73440(a1, a2, a3, (uint64_t (*)(void))type metadata accessor for KeySyncMetadataDisplay);
}

char *sub_100B731F0(void **a1, const void **a2, void *a3)
{
  Swift::Int v3 = (char *)*a2;
  uint64_t v4 = *a3 - (void)v3;
  uint64_t v5 = v4 + 31;
  if (v4 >= 0) {
    uint64_t v5 = *a3 - (void)v3;
  }
  if (v4 <= -32)
  {
    uint64_t result = (char *)_fatalErrorMessage(_:_:file:line:flags:)();
    __break(1u);
  }
  else
  {
    uint64_t result = (char *)*a1;
    uint64_t v7 = v5 >> 5;
    if (result != v3 || result >= &v3[32 * v7])
    {
      return (char *)memmove(result, v3, 32 * v7);
    }
  }
  return result;
}

uint64_t sub_100B732AC(unint64_t *a1, unint64_t *a2, uint64_t *a3)
{
  return sub_100B732B8(a1, a2, a3, &qword_10163A838);
}

uint64_t sub_100B732B8(unint64_t *a1, unint64_t *a2, uint64_t *a3, uint64_t *a4)
{
  unint64_t v4 = *a1;
  unint64_t v5 = *a2;
  uint64_t v6 = *a3;
  uint64_t result = sub_10000588C(a4);
  uint64_t v8 = *(void *)(*(void *)(result - 8) + 72);
  if (!v8)
  {
    __break(1u);
LABEL_18:
    __break(1u);
    goto LABEL_19;
  }
  uint64_t v9 = v6 - v5;
  if (v6 - v5 == 0x8000000000000000 && v8 == -1) {
    goto LABEL_18;
  }
  if (v9 / v8 < 0)
  {
LABEL_19:
    uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
    __break(1u);
    return result;
  }
  if (v4 < v5 || v4 >= v5 + v9 / v8 * v8)
  {
    return swift_arrayInitWithTakeFrontToBack();
  }
  else if (v4 != v5)
  {
    return swift_arrayInitWithTakeBackToFront();
  }
  return result;
}

uint64_t sub_100B733F8(unint64_t *a1, unint64_t *a2, uint64_t *a3)
{
  return sub_100B73440(a1, a2, a3, type metadata accessor for BeaconKeyManager.PersistenceInstruction);
}

uint64_t sub_100B73410(unint64_t *a1, unint64_t *a2, uint64_t *a3)
{
  return sub_100B73440(a1, a2, a3, type metadata accessor for BeaconKeyManager.KeyIndexMapInfo);
}

uint64_t sub_100B73428(unint64_t *a1, unint64_t *a2, uint64_t *a3)
{
  return sub_100B73440(a1, a2, a3, type metadata accessor for BeaconKeyManager.KeyMapInfo);
}

uint64_t sub_100B73440(unint64_t *a1, unint64_t *a2, uint64_t *a3, uint64_t (*a4)(void))
{
  unint64_t v4 = *a1;
  unint64_t v5 = *a2;
  uint64_t v6 = *a3;
  uint64_t result = a4(0);
  uint64_t v8 = *(void *)(*(void *)(result - 8) + 72);
  if (!v8)
  {
    __break(1u);
LABEL_18:
    __break(1u);
    goto LABEL_19;
  }
  uint64_t v9 = v6 - v5;
  if (v6 - v5 == 0x8000000000000000 && v8 == -1) {
    goto LABEL_18;
  }
  if (v9 / v8 < 0)
  {
LABEL_19:
    uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
    __break(1u);
    return result;
  }
  if (v4 < v5 || v4 >= v5 + v9 / v8 * v8)
  {
    return swift_arrayInitWithTakeFrontToBack();
  }
  else if (v4 != v5)
  {
    return swift_arrayInitWithTakeBackToFront();
  }
  return result;
}

char *sub_100B73584(uint64_t a1)
{
  return sub_100B729CC(0, *(void *)(a1 + 16), 0, (char *)a1);
}

uint64_t sub_100B73598(uint64_t a1)
{
  return sub_1000B8A2C(0, *(void *)(a1 + 16), 0, (char *)a1);
}

uint64_t sub_100B735AC(void *a1)
{
  return sub_1000B8B8C(0, a1[2], 0, a1);
}

uint64_t sub_100B735C0(void *a1)
{
  return sub_1000B8D08(0, a1[2], 0, a1);
}

uint64_t sub_100B735D4(void *a1)
{
  return sub_1000B918C(0, a1[2], 0, a1);
}

uint64_t sub_100B735E8(void *a1)
{
  return sub_1000B91A0(0, a1[2], 0, a1);
}

uint64_t sub_100B735FC(void *a1)
{
  return sub_1000B9360(0, a1[2], 0, a1);
}

uint64_t sub_100B73610(uint64_t a1)
{
  return sub_1000B9380(0, *(void *)(a1 + 16), 0, (char *)a1);
}

uint64_t sub_100B73624(void *a1)
{
  return sub_1000B9518(0, a1[2], 0, a1);
}

uint64_t sub_100B73638(void *a1)
{
  return sub_1000B96A8(0, a1[2], 0, a1);
}

uint64_t sub_100B7364C(void *a1)
{
  return sub_1000B986C(0, a1[2], 0, a1);
}

uint64_t sub_100B73660(void *a1)
{
  return sub_1000BA000(0, a1[2], 0, a1);
}

uint64_t sub_100B73674(void *a1)
{
  return sub_1000BA020(0, a1[2], 0, a1);
}

uint64_t sub_100B73688(void *a1)
{
  return sub_1000BA494(0, a1[2], 0, a1);
}

uint64_t sub_100B7369C(uint64_t a1)
{
  return sub_1000BA4B4(0, *(void *)(a1 + 16), 0, (char *)a1);
}

uint64_t sub_100B736B0(void *a1)
{
  return sub_1000B96C8(0, a1[2], 0, a1);
}

uint64_t sub_100B736C4(void *a1)
{
  return sub_1000BAB0C(0, a1[2], 0, a1);
}

uint64_t sub_100B736D8(void *a1)
{
  return sub_1000BAB2C(0, a1[2], 0, a1);
}

uint64_t sub_100B736EC(uint64_t a1)
{
  return specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(a1 + 16), 0, a1);
}

uint64_t sub_100B73700(void *a1)
{
  return sub_1000B988C(0, a1[2], 0, a1);
}

uint64_t sub_100B73714(void *a1)
{
  return sub_1000BACCC(0, a1[2], 0, a1);
}

uint64_t sub_100B73728(void *a1)
{
  return sub_1000BAE74(0, a1[2], 0, a1);
}

uint64_t sub_100B7373C(void *a1)
{
  return sub_1000BB01C(0, a1[2], 0, a1);
}

uint64_t sub_100B73750(void *a1)
{
  return sub_1000BB1E4(0, a1[2], 0, a1);
}

uint64_t sub_100B73764(void *a1)
{
  return sub_1000BB38C(0, a1[2], 0, a1);
}

uint64_t sub_100B73778(void *a1)
{
  return sub_1000BACB8(0, a1[2], 0, a1);
}

uint64_t sub_100B7378C(void *a1)
{
  return sub_1000BB538(0, a1[2], 0, a1);
}

uint64_t sub_100B737A0(uint64_t a1)
{
  return sub_1000BB558(0, *(void *)(a1 + 16), 0, (char *)a1);
}

uint64_t sub_100B737B4(uint64_t a1)
{
  return sub_1000B8A20(0, *(void *)(a1 + 16), 0, (char *)a1);
}

uint64_t sub_100B737C8(uint64_t a1)
{
  return sub_1000BB6F8(0, *(void *)(a1 + 16), 0, (char *)a1);
}

uint64_t sub_100B737DC(void *a1)
{
  return sub_1000BBBAC(0, a1[2], 0, a1);
}

uint64_t sub_100B737F0(uint64_t a1)
{
  return sub_1000BBBCC(0, *(void *)(a1 + 16), 0, (char *)a1);
}

uint64_t sub_100B73804(uint64_t a1)
{
  return sub_1000BBD2C(0, *(void *)(a1 + 16), 0, (char *)a1);
}

uint64_t sub_100B73818(void *a1)
{
  return sub_1000BC168(0, a1[2], 0, a1);
}

uint64_t sub_100B7382C(void *a1)
{
  return sub_1000BB6D8(0, a1[2], 0, a1);
}

uint64_t sub_100B73840(void *a1)
{
  return sub_1000BC17C(0, a1[2], 0, a1);
}

uint64_t sub_100B73854(uint64_t a1)
{
  return sub_1000B8728(0, *(void *)(a1 + 16), 0, (char *)a1);
}

uint64_t sub_100B73868(void *a1)
{
  return sub_1000BCA94(0, a1[2], 0, a1);
}

uint64_t sub_100B7387C(void *a1)
{
  return sub_1000BCCE8(0, a1[2], 0, a1);
}

uint64_t sub_100B73890(void *a1)
{
  return sub_1000BCD08(0, a1[2], 0, a1);
}

uint64_t sub_100B738A4(void *a1)
{
  return sub_1000BCD28(0, a1[2], 0, a1);
}

size_t sub_100B738B8(const void **a1)
{
  v124 = a1;
  uint64_t v1 = sub_10000588C(&qword_101649E40);
  __chkstk_darwin(v1 - 8);
  uint64_t v110 = (char *)v88 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v113 = type metadata accessor for URL();
  Swift::Int v111 = *(void (***)(char *, uint64_t, uint64_t, uint64_t))(v113 - 8);
  __chkstk_darwin(v113);
  uint64_t v109 = (char *)v88 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = sub_10000588C((uint64_t *)&unk_101653C90);
  __chkstk_darwin(v4 - 8);
  uint64_t v6 = (char *)v88 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for DirectorySequence();
  v121 = *(char **)(v7 - 8);
  __chkstk_darwin(v7);
  Class v120 = (char *)v88 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = sub_10000588C(&qword_101659D40);
  uint64_t v10 = __chkstk_darwin(v9 - 8);
  uint64_t v108 = (uint64_t)v88 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v10);
  uint64_t v13 = (char *)v88 - v12;
  uint64_t v14 = sub_10000588C(&qword_101659D48);
  Class v118 = *(unsigned int (***)(char *, uint64_t, uint64_t))(v14 - 8);
  uint64_t v15 = __chkstk_darwin(v14);
  uint64_t v17 = (char *)v88 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v15);
  uint64_t v115 = (uint64_t)v88 - v18;
  uint64_t v19 = sub_10000588C(&qword_101659480);
  __chkstk_darwin(v19 - 8);
  uint64_t v21 = (char *)v88 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v22 = sub_10000588C((uint64_t *)&unk_101660DB0);
  Class v123 = *(char **)(v22 - 8);
  __chkstk_darwin(v22);
  uint64_t v114 = (char *)v88 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v24 = sub_10000588C((uint64_t *)&unk_101653D50);
  __chkstk_darwin(v24 - 8);
  uint64_t v96 = (uint64_t)v88 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v97 = type metadata accessor for SharedBeaconRecord(0);
  uint64_t v26 = *(void *)(v97 - 8);
  __chkstk_darwin(v97);
  uint64_t v102 = (uint64_t)v88 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v28 = sub_10000588C(&qword_101659470);
  __chkstk_darwin(v28 - 8);
  long long v30 = (char *)v88 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v104 = (char *)*(unsigned __int8 *)(v26 + 80);
  sub_10001D074((uint64_t)v124, (uint64_t)v30, &qword_101659470);
  uint64_t v101 = v30;
  uint64_t v31 = (uint64_t)v30;
  uint64_t v32 = v123;
  sub_10001D074(v31, (uint64_t)v21, &qword_101659480);
  uint64_t v33 = (uint64_t (*)(void, void, void))*((void *)v32 + 6);
  long long v98 = v21;
  uint64_t v99 = v22;
  uint64_t v94 = v32 + 48;
  uint64_t v93 = v33;
  int v34 = v33(v21, 1, v22);
  uint64_t v35 = (char *)_swiftEmptyArrayStorage;
  uint64_t v95 = v26;
  if (v34 == 1)
  {
    uint64_t v103 = 0;
    uint64_t v36 = (uint64_t)v98;
LABEL_38:
    uint64_t v58 = v35;
    sub_10001DAB4(v36, &qword_101659480);
    uint64_t v61 = v96;
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v95 + 56))(v96, 1, 1, v97);
  }
  else
  {
    uint64_t v37 = v26;
    uint64_t v103 = 0;
    uint64_t v117 = 0;
    uint64_t v89 = (unint64_t)(v104 + 32) & ~(unint64_t)v104;
    long long v38 = (char *)_swiftEmptyArrayStorage + v89;
    v124 = (const void **)(v121 + 48);
    v122 = (char **)(v121 + 32);
    uint64_t v119 = (unsigned int (**)(uint64_t, uint64_t, uint64_t))(v111 + 6);
    unint64_t v107 = (void (**)(char *, uint64_t, uint64_t))(v111 + 4);
    uint64_t v116 = (void (**)(char *, uint64_t))(v121 + 8);
    uint64_t v106 = (void (**)(uint64_t, uint64_t))(v111 + 1);
    uint64_t v105 = (void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v121 + 56);
    Swift::Int v111 = (void (**)(char *, uint64_t, uint64_t, uint64_t))(v118 + 7);
    v118 += 6;
    uint64_t v92 = (void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v37 + 56);
    uint64_t v90 = (void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v32 + 56);
    uint64_t v91 = (unsigned int (**)(uint64_t, uint64_t, uint64_t))(v37 + 48);
    v88[1] = (unint64_t)v104 | 7;
    unint64_t v39 = (char *)_swiftEmptyArrayStorage;
    uint64_t v40 = (uint64_t)v110;
    uint64_t v41 = v113;
    uint64_t v112 = v14;
    uint64_t v36 = (uint64_t)v98;
    uint64_t v42 = v99;
    while (1)
    {
      uint64_t v100 = v39;
      unint64_t v43 = v114;
      sub_10001D608(v36, (uint64_t)v114, (uint64_t *)&unk_101660DB0);
      uint64_t v44 = (uint64_t)&v43[*(int *)(v42 + 40)];
      sub_10001D074(v44, (uint64_t)v6, (uint64_t *)&unk_101653C90);
      Class v123 = (char *)*v124;
      int v45 = ((uint64_t (*)(char *, uint64_t, uint64_t))v123)(v6, 1, v7);
      uint64_t v104 = v38;
      if (v45 == 1)
      {
LABEL_12:
        sub_10001DAB4((uint64_t)v6, (uint64_t *)&unk_101653C90);
        (*v111)(v13, 1, 1, v14);
      }
      else
      {
        v121 = *v122;
        while (1)
        {
          uint64_t v46 = v17;
          char v47 = v120;
          ((void (*)(char *, char *, uint64_t))v121)(v120, v6, v7);
          DirectorySequence.next()();
          if ((*v119)(v40, 1, v41) == 1)
          {
            (*v116)(v47, v7);
            sub_10001DAB4(v40, &qword_101649E40);
            sub_10001DAB4(v44, (uint64_t *)&unk_101653C90);
            (*v105)(v44, 1, 1, v7);
            (*v111)(v13, 1, 1, v14);
          }
          else
          {
            uint64_t v48 = (uint64_t)v109;
            (*v107)(v109, v40, v41);
            uint64_t v50 = v13;
            uint64_t v51 = v6;
            uint64_t v52 = v108;
            uint64_t v53 = v117;
            sub_100E55828(v48, v114, v108);
            uint64_t v117 = v53;
            uint64_t v41 = v113;
            BOOL v54 = v49;
            uint64_t v40 = (uint64_t)v110;
            (*v116)(v47, v7);
            (*v106)(v48, v41);
            uint64_t v55 = v52;
            uint64_t v6 = v51;
            uint64_t v13 = v50;
            uint64_t v14 = v112;
            sub_10001D608(v55, (uint64_t)v13, &qword_101659D40);
          }
          uint64_t v17 = v46;
          if ((*v118)(v13, 1, v14) == 1) {
            break;
          }
          uint64_t v56 = v115;
          sub_10001D608((uint64_t)v13, v115, &qword_101659D48);
          sub_10001D608(v56, (uint64_t)v17, &qword_101659D48);
          if (swift_getEnumCaseMultiPayload() != 1)
          {
            sub_10001DAB4((uint64_t)v114, (uint64_t *)&unk_101660DB0);
            uint64_t v61 = v96;
            sub_100B7B5A4((uint64_t)v17, v96, type metadata accessor for SharedBeaconRecord);
            uint64_t v60 = 0;
            uint64_t v57 = (uint64_t)v98;
            uint64_t v58 = v100;
            goto LABEL_14;
          }
          sub_10001DAB4((uint64_t)v17, &qword_101659D48);
          sub_10001D074(v44, (uint64_t)v6, (uint64_t *)&unk_101653C90);
          if (((unsigned int (*)(char *, uint64_t, uint64_t))v123)(v6, 1, v7) == 1) {
            goto LABEL_12;
          }
        }
      }
      uint64_t v57 = (uint64_t)v98;
      uint64_t v58 = v100;
      sub_10001DAB4((uint64_t)v114, (uint64_t *)&unk_101660DB0);
      sub_10001DAB4((uint64_t)v13, &qword_101659D40);
      uint64_t v59 = (uint64_t)v101;
      sub_10001DAB4((uint64_t)v101, &qword_101659480);
      uint64_t v60 = 1;
      (*v90)(v59, 1, 1, v99);
      uint64_t v61 = v96;
LABEL_14:
      uint64_t v62 = v60;
      uint64_t v63 = v97;
      (*v92)(v61, v62, 1, v97);
      if ((*v91)(v61, 1, v63) == 1) {
        break;
      }
      size_t result = sub_100B7B5A4(v61, v102, type metadata accessor for SharedBeaconRecord);
      if (v103)
      {
        uint64_t v65 = v58;
        uint64_t v41 = v113;
        uint64_t v66 = v95;
        uint64_t v67 = v103 - 1;
        if (__OFSUB__(v103, 1)) {
          goto LABEL_43;
        }
      }
      else
      {
        unint64_t v68 = *((void *)v58 + 3);
        uint64_t v66 = v95;
        if ((uint64_t)((v68 >> 1) + 0x4000000000000000) < 0) {
          goto LABEL_44;
        }
        int64_t v69 = v68 & 0xFFFFFFFFFFFFFFFELL;
        if (v69 <= 1) {
          uint64_t v70 = 1;
        }
        else {
          uint64_t v70 = v69;
        }
        sub_10000588C(&qword_10163A7E0);
        uint64_t v71 = *(void *)(v66 + 72);
        uint64_t v72 = v89;
        Class v123 = (char *)swift_allocObject();
        size_t result = j__malloc_size(v123);
        if (!v71) {
          goto LABEL_45;
        }
        int64_t v73 = result - v72;
        if (result - v72 == 0x8000000000000000 && v71 == -1) {
          goto LABEL_46;
        }
        uint64_t v75 = v73 / v71;
        uint64_t v76 = v123;
        *((void *)v123 + 2) = v70;
        *((void *)v76 + 3) = 2 * (v73 / v71);
        uint64_t v77 = &v76[v72];
        uint64_t v78 = *((void *)v58 + 3) >> 1;
        uint64_t v79 = v78 * v71;
        if (*((void *)v58 + 2))
        {
          if (v76 < v58 || v77 >= &v58[v89 + v79])
          {
            swift_arrayInitWithTakeFrontToBack();
          }
          else if (v76 != v58)
          {
            swift_arrayInitWithTakeBackToFront();
          }
          *((void *)v58 + 2) = 0;
        }
        uint64_t v104 = &v77[v79];
        uint64_t v80 = (v75 & 0x7FFFFFFFFFFFFFFFLL) - v78;
        size_t result = swift_release();
        uint64_t v65 = v123;
        uint64_t v40 = (uint64_t)v110;
        uint64_t v41 = v113;
        uint64_t v57 = (uint64_t)v98;
        uint64_t v67 = v80 - 1;
        if (__OFSUB__(v80, 1))
        {
LABEL_43:
          __break(1u);
LABEL_44:
          __break(1u);
LABEL_45:
          __break(1u);
LABEL_46:
          __break(1u);
          goto LABEL_47;
        }
      }
      uint64_t v103 = v67;
      uint64_t v81 = (uint64_t)v104;
      unint64_t v82 = v65;
      sub_100B7B5A4(v102, (uint64_t)v104, type metadata accessor for SharedBeaconRecord);
      long long v38 = (char *)(v81 + *(void *)(v66 + 72));
      sub_10001D074((uint64_t)v101, v57, &qword_101659480);
      uint64_t v42 = v99;
      int v83 = v93(v57, 1, v99);
      uint64_t v35 = v82;
      uint64_t v36 = v57;
      unint64_t v39 = v82;
      uint64_t v14 = v112;
      if (v83 == 1) {
        goto LABEL_38;
      }
    }
  }
  sub_10001DAB4((uint64_t)v101, &qword_101659470);
  size_t result = sub_10001DAB4(v61, (uint64_t *)&unk_101653D50);
  unint64_t v84 = *((void *)v58 + 3);
  if (v84 < 2) {
    return (size_t)v58;
  }
  unint64_t v85 = v84 >> 1;
  BOOL v86 = __OFSUB__(v85, v103);
  uint64_t v87 = v85 - v103;
  if (!v86)
  {
    *((void *)v58 + 2) = v87;
    return (size_t)v58;
  }
LABEL_47:
  __break(1u);
  return result;
}

size_t sub_100B745D0(const void **a1)
{
  v124 = a1;
  uint64_t v1 = sub_10000588C(&qword_101649E40);
  __chkstk_darwin(v1 - 8);
  uint64_t v110 = (char *)v88 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v113 = type metadata accessor for URL();
  Swift::Int v111 = *(void (***)(char *, uint64_t, uint64_t, uint64_t))(v113 - 8);
  __chkstk_darwin(v113);
  uint64_t v109 = (char *)v88 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = sub_10000588C((uint64_t *)&unk_101653C90);
  __chkstk_darwin(v4 - 8);
  uint64_t v6 = (char *)v88 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for DirectorySequence();
  v121 = *(char **)(v7 - 8);
  __chkstk_darwin(v7);
  Class v120 = (char *)v88 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = sub_10000588C((uint64_t *)&unk_101660590);
  uint64_t v10 = __chkstk_darwin(v9 - 8);
  uint64_t v108 = (uint64_t)v88 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v10);
  uint64_t v13 = (char *)v88 - v12;
  uint64_t v14 = sub_10000588C(&qword_10164B2B0);
  Class v118 = *(unsigned int (***)(char *, uint64_t, uint64_t))(v14 - 8);
  uint64_t v15 = __chkstk_darwin(v14);
  uint64_t v17 = (char *)v88 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v15);
  uint64_t v115 = (uint64_t)v88 - v18;
  uint64_t v19 = sub_10000588C(&qword_101653CB0);
  __chkstk_darwin(v19 - 8);
  uint64_t v21 = (char *)v88 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v22 = sub_10000588C((uint64_t *)&unk_101653C80);
  Class v123 = *(char **)(v22 - 8);
  __chkstk_darwin(v22);
  uint64_t v114 = (char *)v88 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v24 = sub_10000588C((uint64_t *)&unk_10163B7C0);
  __chkstk_darwin(v24 - 8);
  uint64_t v96 = (uint64_t)v88 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v97 = type metadata accessor for MemberSharingCircle();
  uint64_t v26 = *(void *)(v97 - 8);
  __chkstk_darwin(v97);
  uint64_t v102 = (uint64_t)v88 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v28 = sub_10000588C(&qword_1016496E0);
  __chkstk_darwin(v28 - 8);
  long long v30 = (char *)v88 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v104 = (char *)*(unsigned __int8 *)(v26 + 80);
  sub_10001D074((uint64_t)v124, (uint64_t)v30, &qword_1016496E0);
  uint64_t v101 = v30;
  uint64_t v31 = (uint64_t)v30;
  uint64_t v32 = v123;
  sub_10001D074(v31, (uint64_t)v21, &qword_101653CB0);
  uint64_t v33 = (uint64_t (*)(void, void, void))*((void *)v32 + 6);
  long long v98 = v21;
  uint64_t v99 = v22;
  uint64_t v94 = v32 + 48;
  uint64_t v93 = v33;
  int v34 = v33(v21, 1, v22);
  uint64_t v35 = (char *)_swiftEmptyArrayStorage;
  uint64_t v95 = v26;
  if (v34 == 1)
  {
    uint64_t v103 = 0;
    uint64_t v36 = (uint64_t)v98;
LABEL_38:
    uint64_t v58 = v35;
    sub_10001DAB4(v36, &qword_101653CB0);
    uint64_t v61 = v96;
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v95 + 56))(v96, 1, 1, v97);
  }
  else
  {
    uint64_t v37 = v26;
    uint64_t v103 = 0;
    uint64_t v117 = 0;
    uint64_t v89 = (unint64_t)(v104 + 32) & ~(unint64_t)v104;
    long long v38 = (char *)_swiftEmptyArrayStorage + v89;
    v124 = (const void **)(v121 + 48);
    v122 = (char **)(v121 + 32);
    uint64_t v119 = (unsigned int (**)(uint64_t, uint64_t, uint64_t))(v111 + 6);
    unint64_t v107 = (void (**)(char *, uint64_t, uint64_t))(v111 + 4);
    uint64_t v116 = (void (**)(char *, uint64_t))(v121 + 8);
    uint64_t v106 = (void (**)(uint64_t, uint64_t))(v111 + 1);
    uint64_t v105 = (void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v121 + 56);
    Swift::Int v111 = (void (**)(char *, uint64_t, uint64_t, uint64_t))(v118 + 7);
    v118 += 6;
    uint64_t v92 = (void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v37 + 56);
    uint64_t v90 = (void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v32 + 56);
    uint64_t v91 = (unsigned int (**)(uint64_t, uint64_t, uint64_t))(v37 + 48);
    v88[1] = (unint64_t)v104 | 7;
    unint64_t v39 = (char *)_swiftEmptyArrayStorage;
    uint64_t v40 = (uint64_t)v110;
    uint64_t v41 = v113;
    uint64_t v112 = v14;
    uint64_t v36 = (uint64_t)v98;
    uint64_t v42 = v99;
    while (1)
    {
      uint64_t v100 = v39;
      unint64_t v43 = v114;
      sub_10001D608(v36, (uint64_t)v114, (uint64_t *)&unk_101653C80);
      uint64_t v44 = (uint64_t)&v43[*(int *)(v42 + 40)];
      sub_10001D074(v44, (uint64_t)v6, (uint64_t *)&unk_101653C90);
      Class v123 = (char *)*v124;
      int v45 = ((uint64_t (*)(char *, uint64_t, uint64_t))v123)(v6, 1, v7);
      uint64_t v104 = v38;
      if (v45 == 1)
      {
LABEL_12:
        sub_10001DAB4((uint64_t)v6, (uint64_t *)&unk_101653C90);
        (*v111)(v13, 1, 1, v14);
      }
      else
      {
        v121 = *v122;
        while (1)
        {
          uint64_t v46 = v17;
          char v47 = v120;
          ((void (*)(char *, char *, uint64_t))v121)(v120, v6, v7);
          DirectorySequence.next()();
          if ((*v119)(v40, 1, v41) == 1)
          {
            (*v116)(v47, v7);
            sub_10001DAB4(v40, &qword_101649E40);
            sub_10001DAB4(v44, (uint64_t *)&unk_101653C90);
            (*v105)(v44, 1, 1, v7);
            (*v111)(v13, 1, 1, v14);
          }
          else
          {
            uint64_t v48 = (uint64_t)v109;
            (*v107)(v109, v40, v41);
            uint64_t v50 = v13;
            uint64_t v51 = v6;
            uint64_t v52 = v108;
            uint64_t v53 = v117;
            sub_100E56BAC(v48, v114, v108);
            uint64_t v117 = v53;
            uint64_t v41 = v113;
            BOOL v54 = v49;
            uint64_t v40 = (uint64_t)v110;
            (*v116)(v47, v7);
            (*v106)(v48, v41);
            uint64_t v55 = v52;
            uint64_t v6 = v51;
            uint64_t v13 = v50;
            uint64_t v14 = v112;
            sub_10001D608(v55, (uint64_t)v13, (uint64_t *)&unk_101660590);
          }
          uint64_t v17 = v46;
          if ((*v118)(v13, 1, v14) == 1) {
            break;
          }
          uint64_t v56 = v115;
          sub_10001D608((uint64_t)v13, v115, &qword_10164B2B0);
          sub_10001D608(v56, (uint64_t)v17, &qword_10164B2B0);
          if (swift_getEnumCaseMultiPayload() != 1)
          {
            sub_10001DAB4((uint64_t)v114, (uint64_t *)&unk_101653C80);
            uint64_t v61 = v96;
            sub_100B7B5A4((uint64_t)v17, v96, (uint64_t (*)(void))type metadata accessor for MemberSharingCircle);
            uint64_t v60 = 0;
            uint64_t v57 = (uint64_t)v98;
            uint64_t v58 = v100;
            goto LABEL_14;
          }
          sub_10001DAB4((uint64_t)v17, &qword_10164B2B0);
          sub_10001D074(v44, (uint64_t)v6, (uint64_t *)&unk_101653C90);
          if (((unsigned int (*)(char *, uint64_t, uint64_t))v123)(v6, 1, v7) == 1) {
            goto LABEL_12;
          }
        }
      }
      uint64_t v57 = (uint64_t)v98;
      uint64_t v58 = v100;
      sub_10001DAB4((uint64_t)v114, (uint64_t *)&unk_101653C80);
      sub_10001DAB4((uint64_t)v13, (uint64_t *)&unk_101660590);
      uint64_t v59 = (uint64_t)v101;
      sub_10001DAB4((uint64_t)v101, &qword_101653CB0);
      uint64_t v60 = 1;
      (*v90)(v59, 1, 1, v99);
      uint64_t v61 = v96;
LABEL_14:
      uint64_t v62 = v60;
      uint64_t v63 = v97;
      (*v92)(v61, v62, 1, v97);
      if ((*v91)(v61, 1, v63) == 1) {
        break;
      }
      size_t result = sub_100B7B5A4(v61, v102, (uint64_t (*)(void))type metadata accessor for MemberSharingCircle);
      if (v103)
      {
        uint64_t v65 = v58;
        uint64_t v41 = v113;
        uint64_t v66 = v95;
        uint64_t v67 = v103 - 1;
        if (__OFSUB__(v103, 1)) {
          goto LABEL_43;
        }
      }
      else
      {
        unint64_t v68 = *((void *)v58 + 3);
        uint64_t v66 = v95;
        if ((uint64_t)((v68 >> 1) + 0x4000000000000000) < 0) {
          goto LABEL_44;
        }
        int64_t v69 = v68 & 0xFFFFFFFFFFFFFFFELL;
        if (v69 <= 1) {
          uint64_t v70 = 1;
        }
        else {
          uint64_t v70 = v69;
        }
        sub_10000588C(&qword_101657970);
        uint64_t v71 = *(void *)(v66 + 72);
        uint64_t v72 = v89;
        Class v123 = (char *)swift_allocObject();
        size_t result = j__malloc_size(v123);
        if (!v71) {
          goto LABEL_45;
        }
        int64_t v73 = result - v72;
        if (result - v72 == 0x8000000000000000 && v71 == -1) {
          goto LABEL_46;
        }
        uint64_t v75 = v73 / v71;
        uint64_t v76 = v123;
        *((void *)v123 + 2) = v70;
        *((void *)v76 + 3) = 2 * (v73 / v71);
        uint64_t v77 = &v76[v72];
        uint64_t v78 = *((void *)v58 + 3) >> 1;
        uint64_t v79 = v78 * v71;
        if (*((void *)v58 + 2))
        {
          if (v76 < v58 || v77 >= &v58[v89 + v79])
          {
            swift_arrayInitWithTakeFrontToBack();
          }
          else if (v76 != v58)
          {
            swift_arrayInitWithTakeBackToFront();
          }
          *((void *)v58 + 2) = 0;
        }
        uint64_t v104 = &v77[v79];
        uint64_t v80 = (v75 & 0x7FFFFFFFFFFFFFFFLL) - v78;
        size_t result = swift_release();
        uint64_t v65 = v123;
        uint64_t v40 = (uint64_t)v110;
        uint64_t v41 = v113;
        uint64_t v57 = (uint64_t)v98;
        uint64_t v67 = v80 - 1;
        if (__OFSUB__(v80, 1))
        {
LABEL_43:
          __break(1u);
LABEL_44:
          __break(1u);
LABEL_45:
          __break(1u);
LABEL_46:
          __break(1u);
          goto LABEL_47;
        }
      }
      uint64_t v103 = v67;
      uint64_t v81 = (uint64_t)v104;
      unint64_t v82 = v65;
      sub_100B7B5A4(v102, (uint64_t)v104, (uint64_t (*)(void))type metadata accessor for MemberSharingCircle);
      long long v38 = (char *)(v81 + *(void *)(v66 + 72));
      sub_10001D074((uint64_t)v101, v57, &qword_101653CB0);
      uint64_t v42 = v99;
      int v83 = v93(v57, 1, v99);
      uint64_t v35 = v82;
      uint64_t v36 = v57;
      unint64_t v39 = v82;
      uint64_t v14 = v112;
      if (v83 == 1) {
        goto LABEL_38;
      }
    }
  }
  sub_10001DAB4((uint64_t)v101, &qword_1016496E0);
  size_t result = sub_10001DAB4(v61, (uint64_t *)&unk_10163B7C0);
  unint64_t v84 = *((void *)v58 + 3);
  if (v84 < 2) {
    return (size_t)v58;
  }
  unint64_t v85 = v84 >> 1;
  BOOL v86 = __OFSUB__(v85, v103);
  uint64_t v87 = v85 - v103;
  if (!v86)
  {
    *((void *)v58 + 2) = v87;
    return (size_t)v58;
  }
LABEL_47:
  __break(1u);
  return result;
}

size_t sub_100B752E8(uint64_t a1)
{
  uint64_t v2 = sub_10000588C((uint64_t *)&unk_101655530);
  uint64_t v3 = __chkstk_darwin(v2 - 8);
  uint64_t v5 = (char *)v45 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v3);
  uint64_t v51 = (char *)v45 - v6;
  uint64_t v7 = type metadata accessor for BeaconObservation();
  __chkstk_darwin(v7);
  uint64_t v53 = (uint64_t)v45 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = *(unsigned __int8 *)(v9 + 80);
  uint64_t v11 = (v10 + 32) & ~v10;
  unint64_t v54 = (unint64_t)_swiftEmptyArrayStorage + v11;
  uint64_t v55 = _swiftEmptyArrayStorage;
  uint64_t v12 = (void (**)(char *, uint64_t, uint64_t, uint64_t))(v9 + 56);
  v45[1] = v9 + 48;
  uint64_t v46 = v9;
  v45[0] = v10 | 7;
  size_t result = swift_bridgeObjectRetain();
  uint64_t v14 = 0;
  unint64_t v15 = 0;
  uint64_t v50 = v11;
LABEL_4:
  unint64_t v17 = *(void *)(a1 + 16);
  if (v15 != v17)
  {
    if (v15 < v17)
    {
      while (1)
      {
        uint64_t v18 = *(void *)(a1 + 32 + 8 * v15);
        swift_bridgeObjectRetain();
        size_t result = swift_bridgeObjectRelease();
        if (v18) {
          break;
        }
LABEL_9:
        ++v15;
        unint64_t v19 = *(void *)(a1 + 16);
        if (v15 == v19) {
          goto LABEL_38;
        }
        if (v15 >= v19) {
          goto LABEL_44;
        }
      }
      unint64_t v16 = *(void *)(v18 + 16);
      if (!v16)
      {
        (*v12)(v5, 1, 1, v7);
        size_t result = sub_10001DAB4((uint64_t)v5, (uint64_t *)&unk_101655530);
        goto LABEL_9;
      }
      unint64_t v20 = 0;
      ++v15;
      while (1)
      {
        if (v20 >= v16) {
          goto LABEL_45;
        }
        unint64_t v47 = v20;
        uint64_t v48 = v14;
        uint64_t v21 = v46;
        uint64_t v49 = *(void *)(v46 + 72);
        sub_100B7B490(v18 + v11 + v49 * v20, (uint64_t)v5, (uint64_t (*)(void))type metadata accessor for BeaconObservation);
        (*(void (**)(char *, void, uint64_t, uint64_t))(v21 + 56))(v5, 0, 1, v7);
        uint64_t v22 = (uint64_t)v51;
        sub_10001D608((uint64_t)v5, (uint64_t)v51, (uint64_t *)&unk_101655530);
        if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v21 + 48))(v22, 1, v7) == 1)
        {
          swift_bridgeObjectRelease();
          uint64_t v41 = v55;
          uint64_t v14 = v48;
          goto LABEL_39;
        }
        size_t result = sub_100B7B5A4(v22, v53, (uint64_t (*)(void))type metadata accessor for BeaconObservation);
        if (!v48) {
          break;
        }
        uint64_t v52 = v55;
        unint64_t v23 = v47;
        uint64_t v14 = v48 - 1;
        if (__OFSUB__(v48, 1)) {
          goto LABEL_46;
        }
LABEL_37:
        unint64_t v20 = v23 + 1;
        uint64_t v40 = v54;
        size_t result = sub_100B7B5A4(v53, v54, (uint64_t (*)(void))type metadata accessor for BeaconObservation);
        unint64_t v54 = v40 + v49;
        uint64_t v55 = v52;
        uint64_t v11 = v50;
        unint64_t v16 = *(void *)(v18 + 16);
        if (v20 == v16)
        {
          (*v12)(v5, 1, 1, v7);
          size_t result = sub_10001DAB4((uint64_t)v5, (uint64_t *)&unk_101655530);
          goto LABEL_4;
        }
      }
      unint64_t v24 = v55[3];
      unint64_t v23 = v47;
      if ((uint64_t)((v24 >> 1) + 0x4000000000000000) < 0) {
        goto LABEL_48;
      }
      int64_t v25 = v24 & 0xFFFFFFFFFFFFFFFELL;
      if (v25 <= 1) {
        uint64_t v26 = 1;
      }
      else {
        uint64_t v26 = v25;
      }
      sub_10000588C(&qword_10163A778);
      uint64_t v27 = v50;
      unint64_t v54 = v26;
      uint64_t v28 = v49;
      uint64_t v52 = (void *)swift_allocObject();
      size_t result = j__malloc_size(v52);
      if (!v28) {
        goto LABEL_49;
      }
      uint64_t v29 = v28;
      int64_t v30 = result - v27;
      if (result - v27 == 0x8000000000000000 && v28 == -1) {
        goto LABEL_50;
      }
      uint64_t v32 = v30 / v28;
      uint64_t v33 = v52;
      unint64_t v34 = (unint64_t)v55;
      v52[2] = v54;
      v33[3] = 2 * (v30 / v29);
      unint64_t v35 = (unint64_t)v33 + v27;
      uint64_t v36 = *(void *)(v34 + 24) >> 1;
      uint64_t v37 = v36 * v29;
      if (!*(void *)(v34 + 16))
      {
LABEL_36:
        unint64_t v54 = v35 + v37;
        uint64_t v38 = (v32 & 0x7FFFFFFFFFFFFFFFLL) - v36;
        size_t result = swift_release();
        BOOL v39 = __OFSUB__(v38, 1);
        uint64_t v14 = v38 - 1;
        if (v39) {
          goto LABEL_46;
        }
        goto LABEL_37;
      }
      if ((unint64_t)v52 < v34 || v35 >= v34 + v50 + v37)
      {
        unint64_t v54 = v35;
        uint64_t v48 = v37;
        swift_arrayInitWithTakeFrontToBack();
      }
      else
      {
        if (v52 == v55)
        {
LABEL_35:
          id v55[2] = 0;
          goto LABEL_36;
        }
        unint64_t v54 = v35;
        uint64_t v48 = v37;
        swift_arrayInitWithTakeBackToFront();
      }
      uint64_t v37 = v48;
      unint64_t v35 = v54;
      goto LABEL_35;
    }
LABEL_44:
    __break(1u);
LABEL_45:
    __break(1u);
LABEL_46:
    __break(1u);
    goto LABEL_47;
  }
LABEL_38:
  uint64_t v22 = (uint64_t)v51;
  (*v12)(v51, 1, 1, v7);
  swift_bridgeObjectRelease();
  uint64_t v41 = v55;
LABEL_39:
  swift_bridgeObjectRelease();
  size_t result = sub_10001DAB4(v22, (uint64_t *)&unk_101655530);
  unint64_t v42 = v41[3];
  if (v42 < 2) {
    return (size_t)v41;
  }
  unint64_t v43 = v42 >> 1;
  BOOL v39 = __OFSUB__(v43, v14);
  unint64_t v44 = v43 - v14;
  if (!v39)
  {
    void v41[2] = v44;
    return (size_t)v41;
  }
LABEL_47:
  __break(1u);
LABEL_48:
  __break(1u);
LABEL_49:
  __break(1u);
LABEL_50:
  __break(1u);
  return result;
}

size_t sub_100B7580C(uint64_t a1)
{
  return sub_100B7659C(a1, &qword_101659D60, (uint64_t (*)(void))type metadata accessor for KeyGenerationBeaconInfo, (uint64_t (*)(void))type metadata accessor for KeyGenerationBeaconInfo, &qword_101657A30);
}

size_t sub_100B75848(const void **a1)
{
  v124 = a1;
  uint64_t v1 = sub_10000588C(&qword_101649E40);
  __chkstk_darwin(v1 - 8);
  uint64_t v110 = (char *)v88 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v113 = type metadata accessor for URL();
  Swift::Int v111 = *(void (***)(char *, uint64_t, uint64_t, uint64_t))(v113 - 8);
  __chkstk_darwin(v113);
  uint64_t v109 = (char *)v88 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = sub_10000588C((uint64_t *)&unk_101653C90);
  __chkstk_darwin(v4 - 8);
  uint64_t v6 = (char *)v88 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for DirectorySequence();
  v121 = *(char **)(v7 - 8);
  __chkstk_darwin(v7);
  Class v120 = (char *)v88 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = sub_10000588C(&qword_1016591E8);
  uint64_t v10 = __chkstk_darwin(v9 - 8);
  uint64_t v108 = (uint64_t)v88 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v10);
  uint64_t v13 = (char *)v88 - v12;
  uint64_t v14 = sub_10000588C(&qword_1016591F0);
  Class v118 = *(unsigned int (***)(char *, uint64_t, uint64_t))(v14 - 8);
  uint64_t v15 = __chkstk_darwin(v14);
  unint64_t v17 = (char *)v88 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v15);
  uint64_t v115 = (uint64_t)v88 - v18;
  uint64_t v19 = sub_10000588C(&qword_10164B3C8);
  __chkstk_darwin(v19 - 8);
  uint64_t v21 = (char *)v88 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v22 = sub_10000588C(&qword_101660680);
  Class v123 = *(char **)(v22 - 8);
  __chkstk_darwin(v22);
  uint64_t v114 = (char *)v88 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v24 = sub_10000588C((uint64_t *)&unk_101660670);
  __chkstk_darwin(v24 - 8);
  uint64_t v96 = (uint64_t)v88 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v97 = type metadata accessor for OwnedDeviceKeyRecord();
  uint64_t v26 = *(void *)(v97 - 8);
  __chkstk_darwin(v97);
  uint64_t v102 = (uint64_t)v88 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v28 = sub_10000588C((uint64_t *)&unk_101660A60);
  __chkstk_darwin(v28 - 8);
  int64_t v30 = (char *)v88 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v104 = (char *)*(unsigned __int8 *)(v26 + 80);
  sub_10001D074((uint64_t)v124, (uint64_t)v30, (uint64_t *)&unk_101660A60);
  uint64_t v101 = v30;
  uint64_t v31 = (uint64_t)v30;
  uint64_t v32 = v123;
  sub_10001D074(v31, (uint64_t)v21, &qword_10164B3C8);
  uint64_t v33 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))*((void *)v32 + 6);
  long long v98 = v21;
  uint64_t v99 = v22;
  uint64_t v94 = v32 + 48;
  uint64_t v93 = v33;
  int v34 = v33((uint64_t)v21, 1, v22);
  unint64_t v35 = (char *)_swiftEmptyArrayStorage;
  uint64_t v95 = v26;
  if (v34 == 1)
  {
    uint64_t v103 = 0;
    uint64_t v36 = (uint64_t)v98;
LABEL_38:
    uint64_t v58 = v35;
    sub_10001DAB4(v36, &qword_10164B3C8);
    uint64_t v61 = v96;
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v95 + 56))(v96, 1, 1, v97);
  }
  else
  {
    uint64_t v37 = v26;
    uint64_t v103 = 0;
    uint64_t v117 = 0;
    uint64_t v89 = (unint64_t)(v104 + 32) & ~(unint64_t)v104;
    uint64_t v38 = (char *)_swiftEmptyArrayStorage + v89;
    v124 = (const void **)(v121 + 48);
    v122 = (char **)(v121 + 32);
    uint64_t v119 = (unsigned int (**)(uint64_t, uint64_t, uint64_t))(v111 + 6);
    unint64_t v107 = (void (**)(char *, uint64_t, uint64_t))(v111 + 4);
    uint64_t v116 = (void (**)(char *, uint64_t))(v121 + 8);
    uint64_t v106 = (void (**)(uint64_t, uint64_t))(v111 + 1);
    uint64_t v105 = (void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v121 + 56);
    Swift::Int v111 = (void (**)(char *, uint64_t, uint64_t, uint64_t))(v118 + 7);
    v118 += 6;
    uint64_t v92 = (void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v37 + 56);
    uint64_t v90 = (void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v32 + 56);
    uint64_t v91 = (unsigned int (**)(uint64_t, uint64_t, uint64_t))(v37 + 48);
    v88[1] = (unint64_t)v104 | 7;
    BOOL v39 = (char *)_swiftEmptyArrayStorage;
    uint64_t v40 = (uint64_t)v110;
    uint64_t v41 = v113;
    uint64_t v112 = v14;
    uint64_t v36 = (uint64_t)v98;
    uint64_t v42 = v99;
    while (1)
    {
      uint64_t v100 = v39;
      unint64_t v43 = v114;
      sub_10001D608(v36, (uint64_t)v114, &qword_101660680);
      uint64_t v44 = (uint64_t)&v43[*(int *)(v42 + 40)];
      sub_10001D074(v44, (uint64_t)v6, (uint64_t *)&unk_101653C90);
      Class v123 = (char *)*v124;
      int v45 = ((uint64_t (*)(char *, uint64_t, uint64_t))v123)(v6, 1, v7);
      uint64_t v104 = v38;
      if (v45 == 1)
      {
LABEL_12:
        sub_10001DAB4((uint64_t)v6, (uint64_t *)&unk_101653C90);
        (*v111)(v13, 1, 1, v14);
      }
      else
      {
        v121 = *v122;
        while (1)
        {
          uint64_t v46 = v17;
          unint64_t v47 = v120;
          ((void (*)(char *, char *, uint64_t))v121)(v120, v6, v7);
          DirectorySequence.next()();
          if ((*v119)(v40, 1, v41) == 1)
          {
            (*v116)(v47, v7);
            sub_10001DAB4(v40, &qword_101649E40);
            sub_10001DAB4(v44, (uint64_t *)&unk_101653C90);
            (*v105)(v44, 1, 1, v7);
            (*v111)(v13, 1, 1, v14);
          }
          else
          {
            uint64_t v48 = (uint64_t)v109;
            (*v107)(v109, v40, v41);
            uint64_t v50 = v13;
            uint64_t v51 = v6;
            uint64_t v52 = v108;
            uint64_t v53 = v117;
            sub_100E56C2C(v48, v114, v108);
            uint64_t v117 = v53;
            uint64_t v41 = v113;
            unint64_t v54 = v49;
            uint64_t v40 = (uint64_t)v110;
            (*v116)(v47, v7);
            (*v106)(v48, v41);
            uint64_t v55 = v52;
            uint64_t v6 = v51;
            uint64_t v13 = v50;
            uint64_t v14 = v112;
            sub_10001D608(v55, (uint64_t)v13, &qword_1016591E8);
          }
          unint64_t v17 = v46;
          if ((*v118)(v13, 1, v14) == 1) {
            break;
          }
          uint64_t v56 = v115;
          sub_10001D608((uint64_t)v13, v115, &qword_1016591F0);
          sub_10001D608(v56, (uint64_t)v17, &qword_1016591F0);
          if (swift_getEnumCaseMultiPayload() != 1)
          {
            sub_10001DAB4((uint64_t)v114, &qword_101660680);
            uint64_t v61 = v96;
            sub_100B7B5A4((uint64_t)v17, v96, (uint64_t (*)(void))type metadata accessor for OwnedDeviceKeyRecord);
            uint64_t v60 = 0;
            uint64_t v57 = (uint64_t)v98;
            uint64_t v58 = v100;
            goto LABEL_14;
          }
          sub_10001DAB4((uint64_t)v17, &qword_1016591F0);
          sub_10001D074(v44, (uint64_t)v6, (uint64_t *)&unk_101653C90);
          if (((unsigned int (*)(char *, uint64_t, uint64_t))v123)(v6, 1, v7) == 1) {
            goto LABEL_12;
          }
        }
      }
      uint64_t v57 = (uint64_t)v98;
      uint64_t v58 = v100;
      sub_10001DAB4((uint64_t)v114, &qword_101660680);
      sub_10001DAB4((uint64_t)v13, &qword_1016591E8);
      uint64_t v59 = (uint64_t)v101;
      sub_10001DAB4((uint64_t)v101, &qword_10164B3C8);
      uint64_t v60 = 1;
      (*v90)(v59, 1, 1, v99);
      uint64_t v61 = v96;
LABEL_14:
      uint64_t v62 = v60;
      uint64_t v63 = v97;
      (*v92)(v61, v62, 1, v97);
      if ((*v91)(v61, 1, v63) == 1) {
        break;
      }
      size_t result = sub_100B7B5A4(v61, v102, (uint64_t (*)(void))type metadata accessor for OwnedDeviceKeyRecord);
      if (v103)
      {
        uint64_t v65 = v58;
        uint64_t v41 = v113;
        uint64_t v66 = v95;
        uint64_t v67 = v103 - 1;
        if (__OFSUB__(v103, 1)) {
          goto LABEL_43;
        }
      }
      else
      {
        unint64_t v68 = *((void *)v58 + 3);
        uint64_t v66 = v95;
        if ((uint64_t)((v68 >> 1) + 0x4000000000000000) < 0) {
          goto LABEL_44;
        }
        int64_t v69 = v68 & 0xFFFFFFFFFFFFFFFELL;
        if (v69 <= 1) {
          uint64_t v70 = 1;
        }
        else {
          uint64_t v70 = v69;
        }
        sub_10000588C((uint64_t *)&unk_101657780);
        uint64_t v71 = *(void *)(v66 + 72);
        uint64_t v72 = v89;
        Class v123 = (char *)swift_allocObject();
        size_t result = j__malloc_size(v123);
        if (!v71) {
          goto LABEL_45;
        }
        int64_t v73 = result - v72;
        if (result - v72 == 0x8000000000000000 && v71 == -1) {
          goto LABEL_46;
        }
        uint64_t v75 = v73 / v71;
        uint64_t v76 = v123;
        *((void *)v123 + 2) = v70;
        *((void *)v76 + 3) = 2 * (v73 / v71);
        uint64_t v77 = &v76[v72];
        uint64_t v78 = *((void *)v58 + 3) >> 1;
        uint64_t v79 = v78 * v71;
        if (*((void *)v58 + 2))
        {
          if (v76 < v58 || v77 >= &v58[v89 + v79])
          {
            swift_arrayInitWithTakeFrontToBack();
          }
          else if (v76 != v58)
          {
            swift_arrayInitWithTakeBackToFront();
          }
          *((void *)v58 + 2) = 0;
        }
        uint64_t v104 = &v77[v79];
        uint64_t v80 = (v75 & 0x7FFFFFFFFFFFFFFFLL) - v78;
        size_t result = swift_release();
        uint64_t v65 = v123;
        uint64_t v40 = (uint64_t)v110;
        uint64_t v41 = v113;
        uint64_t v57 = (uint64_t)v98;
        uint64_t v67 = v80 - 1;
        if (__OFSUB__(v80, 1))
        {
LABEL_43:
          __break(1u);
LABEL_44:
          __break(1u);
LABEL_45:
          __break(1u);
LABEL_46:
          __break(1u);
          goto LABEL_47;
        }
      }
      uint64_t v103 = v67;
      uint64_t v81 = (uint64_t)v104;
      unint64_t v82 = v65;
      sub_100B7B5A4(v102, (uint64_t)v104, (uint64_t (*)(void))type metadata accessor for OwnedDeviceKeyRecord);
      uint64_t v38 = (char *)(v81 + *(void *)(v66 + 72));
      sub_10001D074((uint64_t)v101, v57, &qword_10164B3C8);
      uint64_t v42 = v99;
      int v83 = v93(v57, 1, v99);
      unint64_t v35 = v82;
      uint64_t v36 = v57;
      BOOL v39 = v82;
      uint64_t v14 = v112;
      if (v83 == 1) {
        goto LABEL_38;
      }
    }
  }
  sub_10001DAB4((uint64_t)v101, (uint64_t *)&unk_101660A60);
  size_t result = sub_10001DAB4(v61, (uint64_t *)&unk_101660670);
  unint64_t v84 = *((void *)v58 + 3);
  if (v84 < 2) {
    return (size_t)v58;
  }
  unint64_t v85 = v84 >> 1;
  BOOL v86 = __OFSUB__(v85, v103);
  uint64_t v87 = v85 - v103;
  if (!v86)
  {
    *((void *)v58 + 2) = v87;
    return (size_t)v58;
  }
LABEL_47:
  __break(1u);
  return result;
}

size_t sub_100B76560(uint64_t a1)
{
  return sub_100B7659C(a1, (uint64_t *)&unk_10163B1D0, (uint64_t (*)(void))type metadata accessor for LocalFindableAccessoryRecord, (uint64_t (*)(void))type metadata accessor for LocalFindableAccessoryRecord, &qword_101657690);
}

size_t sub_100B7659C(uint64_t a1, uint64_t *a2, uint64_t (*a3)(void), uint64_t (*a4)(void), uint64_t *a5)
{
  uint64_t v42 = a5;
  v41[0] = a2;
  uint64_t v8 = sub_10000588C(a2);
  __chkstk_darwin(v8 - 8);
  uint64_t v10 = (char *)v41 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = a3(0);
  uint64_t v12 = *(void *)(v11 - 8);
  __chkstk_darwin(v11);
  uint64_t v14 = (char *)v41 - v13;
  uint64_t v15 = *(unsigned __int8 *)(v12 + 80);
  swift_retain();
  uint64_t v44 = a1;
  dispatch thunk of _AnyIteratorBoxBase.next()();
  uint64_t v43 = v12;
  uint64_t v46 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v12 + 48);
  uint64_t v47 = v12 + 48;
  uint64_t v16 = _swiftEmptyArrayStorage;
  if (v46(v10, 1, v11) != 1)
  {
    uint64_t v17 = 0;
    uint64_t v45 = (v15 + 32) & ~v15;
    uint64_t v23 = (char *)_swiftEmptyArrayStorage + v45;
    v41[1] = (uint64_t *)(v15 | 7);
    uint64_t v24 = _swiftEmptyArrayStorage;
    uint64_t v25 = v43;
    while (1)
    {
      size_t result = sub_100B7B5A4((uint64_t)v10, (uint64_t)v14, a4);
      if (v17)
      {
        uint64_t v16 = v24;
        BOOL v21 = __OFSUB__(v17--, 1);
        if (v21) {
          goto LABEL_32;
        }
      }
      else
      {
        unint64_t v26 = v24[3];
        if ((uint64_t)((v26 >> 1) + 0x4000000000000000) < 0) {
          goto LABEL_33;
        }
        int64_t v27 = v26 & 0xFFFFFFFFFFFFFFFELL;
        if (v27 <= 1) {
          uint64_t v28 = 1;
        }
        else {
          uint64_t v28 = v27;
        }
        sub_10000588C(v42);
        uint64_t v29 = *(void *)(v25 + 72);
        uint64_t v30 = v45;
        uint64_t v16 = (void *)swift_allocObject();
        size_t result = j__malloc_size(v16);
        if (!v29) {
          goto LABEL_34;
        }
        int64_t v31 = result - v30;
        if (result - v30 == 0x8000000000000000 && v29 == -1) {
          goto LABEL_35;
        }
        uint64_t v33 = a4;
        uint64_t v34 = v11;
        uint64_t v35 = v31 / v29;
        v16[2] = v28;
        void v16[3] = 2 * (v31 / v29);
        uint64_t v36 = (char *)v16 + v30;
        uint64_t v37 = v24[3] >> 1;
        uint64_t v38 = v37 * v29;
        if (v24[2])
        {
          if (v16 < v24 || v36 >= (char *)v24 + v45 + v38)
          {
            swift_arrayInitWithTakeFrontToBack();
          }
          else if (v16 != v24)
          {
            swift_arrayInitWithTakeBackToFront();
          }
          v24[2] = 0;
        }
        uint64_t v23 = &v36[v38];
        uint64_t v40 = (v35 & 0x7FFFFFFFFFFFFFFFLL) - v37;
        size_t result = swift_release();
        uint64_t v11 = v34;
        a4 = v33;
        uint64_t v25 = v43;
        BOOL v21 = __OFSUB__(v40, 1);
        uint64_t v17 = v40 - 1;
        if (v21)
        {
LABEL_32:
          __break(1u);
LABEL_33:
          __break(1u);
LABEL_34:
          __break(1u);
LABEL_35:
          __break(1u);
LABEL_36:
          __break(1u);
          return result;
        }
      }
      sub_100B7B5A4((uint64_t)v14, (uint64_t)v23, a4);
      v23 += *(void *)(v25 + 72);
      dispatch thunk of _AnyIteratorBoxBase.next()();
      uint64_t v24 = v16;
      if (v46(v10, 1, v11) == 1) {
        goto LABEL_3;
      }
    }
  }
  uint64_t v17 = 0;
LABEL_3:
  swift_release();
  size_t result = sub_10001DAB4((uint64_t)v10, v41[0]);
  unint64_t v19 = v16[3];
  if (v19 >= 2)
  {
    unint64_t v20 = v19 >> 1;
    BOOL v21 = __OFSUB__(v20, v17);
    uint64_t v22 = v20 - v17;
    if (v21) {
      goto LABEL_36;
    }
    v16[2] = v22;
  }
  return (size_t)v16;
}

size_t sub_100B768CC(const void **a1)
{
  v124 = a1;
  uint64_t v1 = sub_10000588C(&qword_101649E40);
  __chkstk_darwin(v1 - 8);
  uint64_t v110 = (char *)v88 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v113 = type metadata accessor for URL();
  Swift::Int v111 = *(void (***)(char *, uint64_t, uint64_t, uint64_t))(v113 - 8);
  __chkstk_darwin(v113);
  uint64_t v109 = (char *)v88 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = sub_10000588C((uint64_t *)&unk_101653C90);
  __chkstk_darwin(v4 - 8);
  uint64_t v6 = (char *)v88 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for DirectorySequence();
  v121 = *(char **)(v7 - 8);
  __chkstk_darwin(v7);
  Class v120 = (char *)v88 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = sub_10000588C(&qword_101659D08);
  uint64_t v10 = __chkstk_darwin(v9 - 8);
  uint64_t v108 = (uint64_t)v88 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v10);
  uint64_t v13 = (char *)v88 - v12;
  uint64_t v14 = sub_10000588C(&qword_101659D10);
  Class v118 = *(unsigned int (***)(char *, uint64_t, uint64_t))(v14 - 8);
  uint64_t v15 = __chkstk_darwin(v14);
  uint64_t v17 = (char *)v88 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v15);
  uint64_t v115 = (uint64_t)v88 - v18;
  uint64_t v19 = sub_10000588C(&qword_101659460);
  __chkstk_darwin(v19 - 8);
  BOOL v21 = (char *)v88 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v22 = sub_10000588C(&qword_101659458);
  Class v123 = *(char **)(v22 - 8);
  __chkstk_darwin(v22);
  uint64_t v114 = (char *)v88 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v24 = sub_10000588C((uint64_t *)&unk_1016607D0);
  __chkstk_darwin(v24 - 8);
  uint64_t v96 = (uint64_t)v88 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v97 = type metadata accessor for OwnerPeerTrust();
  uint64_t v26 = *(void *)(v97 - 8);
  __chkstk_darwin(v97);
  uint64_t v102 = (uint64_t)v88 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v28 = sub_10000588C((uint64_t *)&unk_1016607C0);
  __chkstk_darwin(v28 - 8);
  uint64_t v30 = (char *)v88 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v104 = (char *)*(unsigned __int8 *)(v26 + 80);
  sub_10001D074((uint64_t)v124, (uint64_t)v30, (uint64_t *)&unk_1016607C0);
  uint64_t v101 = v30;
  uint64_t v31 = (uint64_t)v30;
  uint64_t v32 = v123;
  sub_10001D074(v31, (uint64_t)v21, &qword_101659460);
  uint64_t v33 = (uint64_t (*)(void, void, void))*((void *)v32 + 6);
  long long v98 = v21;
  uint64_t v99 = v22;
  uint64_t v94 = v32 + 48;
  uint64_t v93 = v33;
  int v34 = v33(v21, 1, v22);
  uint64_t v35 = (char *)_swiftEmptyArrayStorage;
  uint64_t v95 = v26;
  if (v34 == 1)
  {
    uint64_t v103 = 0;
    uint64_t v36 = (uint64_t)v98;
LABEL_38:
    uint64_t v58 = v35;
    sub_10001DAB4(v36, &qword_101659460);
    uint64_t v61 = v96;
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v95 + 56))(v96, 1, 1, v97);
  }
  else
  {
    uint64_t v37 = v26;
    uint64_t v103 = 0;
    uint64_t v117 = 0;
    uint64_t v89 = (unint64_t)(v104 + 32) & ~(unint64_t)v104;
    uint64_t v38 = (char *)_swiftEmptyArrayStorage + v89;
    v124 = (const void **)(v121 + 48);
    v122 = (char **)(v121 + 32);
    uint64_t v119 = (unsigned int (**)(uint64_t, uint64_t, uint64_t))(v111 + 6);
    unint64_t v107 = (void (**)(char *, uint64_t, uint64_t))(v111 + 4);
    uint64_t v116 = (void (**)(char *, uint64_t))(v121 + 8);
    uint64_t v106 = (void (**)(uint64_t, uint64_t))(v111 + 1);
    uint64_t v105 = (void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v121 + 56);
    Swift::Int v111 = (void (**)(char *, uint64_t, uint64_t, uint64_t))(v118 + 7);
    v118 += 6;
    uint64_t v92 = (void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v37 + 56);
    uint64_t v90 = (void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v32 + 56);
    uint64_t v91 = (unsigned int (**)(uint64_t, uint64_t, uint64_t))(v37 + 48);
    v88[1] = (unint64_t)v104 | 7;
    BOOL v39 = (char *)_swiftEmptyArrayStorage;
    uint64_t v40 = (uint64_t)v110;
    uint64_t v41 = v113;
    uint64_t v112 = v14;
    uint64_t v36 = (uint64_t)v98;
    uint64_t v42 = v99;
    while (1)
    {
      uint64_t v100 = v39;
      uint64_t v43 = v114;
      sub_10001D608(v36, (uint64_t)v114, &qword_101659458);
      uint64_t v44 = (uint64_t)&v43[*(int *)(v42 + 40)];
      sub_10001D074(v44, (uint64_t)v6, (uint64_t *)&unk_101653C90);
      Class v123 = (char *)*v124;
      int v45 = ((uint64_t (*)(char *, uint64_t, uint64_t))v123)(v6, 1, v7);
      uint64_t v104 = v38;
      if (v45 == 1)
      {
LABEL_12:
        sub_10001DAB4((uint64_t)v6, (uint64_t *)&unk_101653C90);
        (*v111)(v13, 1, 1, v14);
      }
      else
      {
        v121 = *v122;
        while (1)
        {
          uint64_t v46 = v17;
          uint64_t v47 = v120;
          ((void (*)(char *, char *, uint64_t))v121)(v120, v6, v7);
          DirectorySequence.next()();
          if ((*v119)(v40, 1, v41) == 1)
          {
            (*v116)(v47, v7);
            sub_10001DAB4(v40, &qword_101649E40);
            sub_10001DAB4(v44, (uint64_t *)&unk_101653C90);
            (*v105)(v44, 1, 1, v7);
            (*v111)(v13, 1, 1, v14);
          }
          else
          {
            uint64_t v48 = (uint64_t)v109;
            (*v107)(v109, v40, v41);
            uint64_t v50 = v13;
            uint64_t v51 = v6;
            uint64_t v52 = v108;
            uint64_t v53 = v117;
            sub_100E56D2C(v48, v114, v108);
            uint64_t v117 = v53;
            uint64_t v41 = v113;
            unint64_t v54 = v49;
            uint64_t v40 = (uint64_t)v110;
            (*v116)(v47, v7);
            (*v106)(v48, v41);
            uint64_t v55 = v52;
            uint64_t v6 = v51;
            uint64_t v13 = v50;
            uint64_t v14 = v112;
            sub_10001D608(v55, (uint64_t)v13, &qword_101659D08);
          }
          uint64_t v17 = v46;
          if ((*v118)(v13, 1, v14) == 1) {
            break;
          }
          uint64_t v56 = v115;
          sub_10001D608((uint64_t)v13, v115, &qword_101659D10);
          sub_10001D608(v56, (uint64_t)v17, &qword_101659D10);
          if (swift_getEnumCaseMultiPayload() != 1)
          {
            sub_10001DAB4((uint64_t)v114, &qword_101659458);
            uint64_t v61 = v96;
            sub_100B7B5A4((uint64_t)v17, v96, (uint64_t (*)(void))type metadata accessor for OwnerPeerTrust);
            uint64_t v60 = 0;
            uint64_t v57 = (uint64_t)v98;
            uint64_t v58 = v100;
            goto LABEL_14;
          }
          sub_10001DAB4((uint64_t)v17, &qword_101659D10);
          sub_10001D074(v44, (uint64_t)v6, (uint64_t *)&unk_101653C90);
          if (((unsigned int (*)(char *, uint64_t, uint64_t))v123)(v6, 1, v7) == 1) {
            goto LABEL_12;
          }
        }
      }
      uint64_t v57 = (uint64_t)v98;
      uint64_t v58 = v100;
      sub_10001DAB4((uint64_t)v114, &qword_101659458);
      sub_10001DAB4((uint64_t)v13, &qword_101659D08);
      uint64_t v59 = (uint64_t)v101;
      sub_10001DAB4((uint64_t)v101, &qword_101659460);
      uint64_t v60 = 1;
      (*v90)(v59, 1, 1, v99);
      uint64_t v61 = v96;
LABEL_14:
      uint64_t v62 = v60;
      uint64_t v63 = v97;
      (*v92)(v61, v62, 1, v97);
      if ((*v91)(v61, 1, v63) == 1) {
        break;
      }
      size_t result = sub_100B7B5A4(v61, v102, (uint64_t (*)(void))type metadata accessor for OwnerPeerTrust);
      if (v103)
      {
        uint64_t v65 = v58;
        uint64_t v41 = v113;
        uint64_t v66 = v95;
        uint64_t v67 = v103 - 1;
        if (__OFSUB__(v103, 1)) {
          goto LABEL_43;
        }
      }
      else
      {
        unint64_t v68 = *((void *)v58 + 3);
        uint64_t v66 = v95;
        if ((uint64_t)((v68 >> 1) + 0x4000000000000000) < 0) {
          goto LABEL_44;
        }
        int64_t v69 = v68 & 0xFFFFFFFFFFFFFFFELL;
        if (v69 <= 1) {
          uint64_t v70 = 1;
        }
        else {
          uint64_t v70 = v69;
        }
        sub_10000588C((uint64_t *)&unk_101657800);
        uint64_t v71 = *(void *)(v66 + 72);
        uint64_t v72 = v89;
        Class v123 = (char *)swift_allocObject();
        size_t result = j__malloc_size(v123);
        if (!v71) {
          goto LABEL_45;
        }
        int64_t v73 = result - v72;
        if (result - v72 == 0x8000000000000000 && v71 == -1) {
          goto LABEL_46;
        }
        uint64_t v75 = v73 / v71;
        uint64_t v76 = v123;
        *((void *)v123 + 2) = v70;
        *((void *)v76 + 3) = 2 * (v73 / v71);
        uint64_t v77 = &v76[v72];
        uint64_t v78 = *((void *)v58 + 3) >> 1;
        uint64_t v79 = v78 * v71;
        if (*((void *)v58 + 2))
        {
          if (v76 < v58 || v77 >= &v58[v89 + v79])
          {
            swift_arrayInitWithTakeFrontToBack();
          }
          else if (v76 != v58)
          {
            swift_arrayInitWithTakeBackToFront();
          }
          *((void *)v58 + 2) = 0;
        }
        uint64_t v104 = &v77[v79];
        uint64_t v80 = (v75 & 0x7FFFFFFFFFFFFFFFLL) - v78;
        size_t result = swift_release();
        uint64_t v65 = v123;
        uint64_t v40 = (uint64_t)v110;
        uint64_t v41 = v113;
        uint64_t v57 = (uint64_t)v98;
        uint64_t v67 = v80 - 1;
        if (__OFSUB__(v80, 1))
        {
LABEL_43:
          __break(1u);
LABEL_44:
          __break(1u);
LABEL_45:
          __break(1u);
LABEL_46:
          __break(1u);
          goto LABEL_47;
        }
      }
      uint64_t v103 = v67;
      uint64_t v81 = (uint64_t)v104;
      unint64_t v82 = v65;
      sub_100B7B5A4(v102, (uint64_t)v104, (uint64_t (*)(void))type metadata accessor for OwnerPeerTrust);
      uint64_t v38 = (char *)(v81 + *(void *)(v66 + 72));
      sub_10001D074((uint64_t)v101, v57, &qword_101659460);
      uint64_t v42 = v99;
      int v83 = v93(v57, 1, v99);
      uint64_t v35 = v82;
      uint64_t v36 = v57;
      BOOL v39 = v82;
      uint64_t v14 = v112;
      if (v83 == 1) {
        goto LABEL_38;
      }
    }
  }
  sub_10001DAB4((uint64_t)v101, (uint64_t *)&unk_1016607C0);
  size_t result = sub_10001DAB4(v61, (uint64_t *)&unk_1016607D0);
  unint64_t v84 = *((void *)v58 + 3);
  if (v84 < 2) {
    return (size_t)v58;
  }
  unint64_t v85 = v84 >> 1;
  BOOL v86 = __OFSUB__(v85, v103);
  uint64_t v87 = v85 - v103;
  if (!v86)
  {
    *((void *)v58 + 2) = v87;
    return (size_t)v58;
  }
LABEL_47:
  __break(1u);
  return result;
}

size_t sub_100B775E4(const void **a1)
{
  v124 = a1;
  uint64_t v1 = sub_10000588C(&qword_101649E40);
  __chkstk_darwin(v1 - 8);
  uint64_t v110 = (char *)v88 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v113 = type metadata accessor for URL();
  Swift::Int v111 = *(void (***)(char *, uint64_t, uint64_t, uint64_t))(v113 - 8);
  __chkstk_darwin(v113);
  uint64_t v109 = (char *)v88 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = sub_10000588C((uint64_t *)&unk_101653C90);
  __chkstk_darwin(v4 - 8);
  uint64_t v6 = (char *)v88 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for DirectorySequence();
  v121 = *(char **)(v7 - 8);
  __chkstk_darwin(v7);
  Class v120 = (char *)v88 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = sub_10000588C(&qword_101659D18);
  uint64_t v10 = __chkstk_darwin(v9 - 8);
  uint64_t v108 = (uint64_t)v88 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v10);
  uint64_t v13 = (char *)v88 - v12;
  uint64_t v14 = sub_10000588C((uint64_t *)&unk_101660A30);
  Class v118 = *(unsigned int (***)(char *, uint64_t, uint64_t))(v14 - 8);
  uint64_t v15 = __chkstk_darwin(v14);
  uint64_t v17 = (char *)v88 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v15);
  uint64_t v115 = (uint64_t)v88 - v18;
  uint64_t v19 = sub_10000588C((uint64_t *)&unk_101660A20);
  __chkstk_darwin(v19 - 8);
  BOOL v21 = (char *)v88 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v22 = sub_10000588C((uint64_t *)&unk_101660A10);
  Class v123 = *(char **)(v22 - 8);
  __chkstk_darwin(v22);
  uint64_t v114 = (char *)v88 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v24 = sub_10000588C((uint64_t *)&unk_10163B890);
  __chkstk_darwin(v24 - 8);
  uint64_t v96 = (uint64_t)v88 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v97 = type metadata accessor for MemberPeerTrust();
  uint64_t v26 = *(void *)(v97 - 8);
  __chkstk_darwin(v97);
  uint64_t v102 = (uint64_t)v88 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v28 = sub_10000588C(&qword_101659468);
  __chkstk_darwin(v28 - 8);
  uint64_t v30 = (char *)v88 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v104 = (char *)*(unsigned __int8 *)(v26 + 80);
  sub_10001D074((uint64_t)v124, (uint64_t)v30, &qword_101659468);
  uint64_t v101 = v30;
  uint64_t v31 = (uint64_t)v30;
  uint64_t v32 = v123;
  sub_10001D074(v31, (uint64_t)v21, (uint64_t *)&unk_101660A20);
  uint64_t v33 = (uint64_t (*)(void, void, void))*((void *)v32 + 6);
  long long v98 = v21;
  uint64_t v99 = v22;
  uint64_t v94 = v32 + 48;
  uint64_t v93 = v33;
  int v34 = v33(v21, 1, v22);
  uint64_t v35 = (char *)_swiftEmptyArrayStorage;
  uint64_t v95 = v26;
  if (v34 == 1)
  {
    uint64_t v103 = 0;
    uint64_t v36 = (uint64_t)v98;
LABEL_38:
    uint64_t v58 = v35;
    sub_10001DAB4(v36, (uint64_t *)&unk_101660A20);
    uint64_t v61 = v96;
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v95 + 56))(v96, 1, 1, v97);
  }
  else
  {
    uint64_t v37 = v26;
    uint64_t v103 = 0;
    uint64_t v117 = 0;
    uint64_t v89 = (unint64_t)(v104 + 32) & ~(unint64_t)v104;
    uint64_t v38 = (char *)_swiftEmptyArrayStorage + v89;
    v124 = (const void **)(v121 + 48);
    v122 = (char **)(v121 + 32);
    uint64_t v119 = (unsigned int (**)(uint64_t, uint64_t, uint64_t))(v111 + 6);
    unint64_t v107 = (void (**)(char *, uint64_t, uint64_t))(v111 + 4);
    uint64_t v116 = (void (**)(char *, uint64_t))(v121 + 8);
    uint64_t v106 = (void (**)(uint64_t, uint64_t))(v111 + 1);
    uint64_t v105 = (void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v121 + 56);
    Swift::Int v111 = (void (**)(char *, uint64_t, uint64_t, uint64_t))(v118 + 7);
    v118 += 6;
    uint64_t v92 = (void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v37 + 56);
    uint64_t v90 = (void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v32 + 56);
    uint64_t v91 = (unsigned int (**)(uint64_t, uint64_t, uint64_t))(v37 + 48);
    v88[1] = (unint64_t)v104 | 7;
    BOOL v39 = (char *)_swiftEmptyArrayStorage;
    uint64_t v40 = (uint64_t)v110;
    uint64_t v41 = v113;
    uint64_t v112 = v14;
    uint64_t v36 = (uint64_t)v98;
    uint64_t v42 = v99;
    while (1)
    {
      uint64_t v100 = v39;
      uint64_t v43 = v114;
      sub_10001D608(v36, (uint64_t)v114, (uint64_t *)&unk_101660A10);
      uint64_t v44 = (uint64_t)&v43[*(int *)(v42 + 40)];
      sub_10001D074(v44, (uint64_t)v6, (uint64_t *)&unk_101653C90);
      Class v123 = (char *)*v124;
      int v45 = ((uint64_t (*)(char *, uint64_t, uint64_t))v123)(v6, 1, v7);
      uint64_t v104 = v38;
      if (v45 == 1)
      {
LABEL_12:
        sub_10001DAB4((uint64_t)v6, (uint64_t *)&unk_101653C90);
        (*v111)(v13, 1, 1, v14);
      }
      else
      {
        v121 = *v122;
        while (1)
        {
          uint64_t v46 = v17;
          uint64_t v47 = v120;
          ((void (*)(char *, char *, uint64_t))v121)(v120, v6, v7);
          DirectorySequence.next()();
          if ((*v119)(v40, 1, v41) == 1)
          {
            (*v116)(v47, v7);
            sub_10001DAB4(v40, &qword_101649E40);
            sub_10001DAB4(v44, (uint64_t *)&unk_101653C90);
            (*v105)(v44, 1, 1, v7);
            (*v111)(v13, 1, 1, v14);
          }
          else
          {
            uint64_t v48 = (uint64_t)v109;
            (*v107)(v109, v40, v41);
            uint64_t v50 = v13;
            uint64_t v51 = v6;
            uint64_t v52 = v108;
            uint64_t v53 = v117;
            sub_100E56DAC(v48, v114, v108);
            uint64_t v117 = v53;
            uint64_t v41 = v113;
            unint64_t v54 = v49;
            uint64_t v40 = (uint64_t)v110;
            (*v116)(v47, v7);
            (*v106)(v48, v41);
            uint64_t v55 = v52;
            uint64_t v6 = v51;
            uint64_t v13 = v50;
            uint64_t v14 = v112;
            sub_10001D608(v55, (uint64_t)v13, &qword_101659D18);
          }
          uint64_t v17 = v46;
          if ((*v118)(v13, 1, v14) == 1) {
            break;
          }
          uint64_t v56 = v115;
          sub_10001D608((uint64_t)v13, v115, (uint64_t *)&unk_101660A30);
          sub_10001D608(v56, (uint64_t)v17, (uint64_t *)&unk_101660A30);
          if (swift_getEnumCaseMultiPayload() != 1)
          {
            sub_10001DAB4((uint64_t)v114, (uint64_t *)&unk_101660A10);
            uint64_t v61 = v96;
            sub_100B7B5A4((uint64_t)v17, v96, (uint64_t (*)(void))type metadata accessor for MemberPeerTrust);
            uint64_t v60 = 0;
            uint64_t v57 = (uint64_t)v98;
            uint64_t v58 = v100;
            goto LABEL_14;
          }
          sub_10001DAB4((uint64_t)v17, (uint64_t *)&unk_101660A30);
          sub_10001D074(v44, (uint64_t)v6, (uint64_t *)&unk_101653C90);
          if (((unsigned int (*)(char *, uint64_t, uint64_t))v123)(v6, 1, v7) == 1) {
            goto LABEL_12;
          }
        }
      }
      uint64_t v57 = (uint64_t)v98;
      uint64_t v58 = v100;
      sub_10001DAB4((uint64_t)v114, (uint64_t *)&unk_101660A10);
      sub_10001DAB4((uint64_t)v13, &qword_101659D18);
      uint64_t v59 = (uint64_t)v101;
      sub_10001DAB4((uint64_t)v101, (uint64_t *)&unk_101660A20);
      uint64_t v60 = 1;
      (*v90)(v59, 1, 1, v99);
      uint64_t v61 = v96;
LABEL_14:
      uint64_t v62 = v60;
      uint64_t v63 = v97;
      (*v92)(v61, v62, 1, v97);
      if ((*v91)(v61, 1, v63) == 1) {
        break;
      }
      size_t result = sub_100B7B5A4(v61, v102, (uint64_t (*)(void))type metadata accessor for MemberPeerTrust);
      if (v103)
      {
        uint64_t v65 = v58;
        uint64_t v41 = v113;
        uint64_t v66 = v95;
        uint64_t v67 = v103 - 1;
        if (__OFSUB__(v103, 1)) {
          goto LABEL_43;
        }
      }
      else
      {
        unint64_t v68 = *((void *)v58 + 3);
        uint64_t v66 = v95;
        if ((uint64_t)((v68 >> 1) + 0x4000000000000000) < 0) {
          goto LABEL_44;
        }
        int64_t v69 = v68 & 0xFFFFFFFFFFFFFFFELL;
        if (v69 <= 1) {
          uint64_t v70 = 1;
        }
        else {
          uint64_t v70 = v69;
        }
        sub_10000588C(&qword_10163A9F8);
        uint64_t v71 = *(void *)(v66 + 72);
        uint64_t v72 = v89;
        Class v123 = (char *)swift_allocObject();
        size_t result = j__malloc_size(v123);
        if (!v71) {
          goto LABEL_45;
        }
        int64_t v73 = result - v72;
        if (result - v72 == 0x8000000000000000 && v71 == -1) {
          goto LABEL_46;
        }
        uint64_t v75 = v73 / v71;
        uint64_t v76 = v123;
        *((void *)v123 + 2) = v70;
        *((void *)v76 + 3) = 2 * (v73 / v71);
        uint64_t v77 = &v76[v72];
        uint64_t v78 = *((void *)v58 + 3) >> 1;
        uint64_t v79 = v78 * v71;
        if (*((void *)v58 + 2))
        {
          if (v76 < v58 || v77 >= &v58[v89 + v79])
          {
            swift_arrayInitWithTakeFrontToBack();
          }
          else if (v76 != v58)
          {
            swift_arrayInitWithTakeBackToFront();
          }
          *((void *)v58 + 2) = 0;
        }
        uint64_t v104 = &v77[v79];
        uint64_t v80 = (v75 & 0x7FFFFFFFFFFFFFFFLL) - v78;
        size_t result = swift_release();
        uint64_t v65 = v123;
        uint64_t v40 = (uint64_t)v110;
        uint64_t v41 = v113;
        uint64_t v57 = (uint64_t)v98;
        uint64_t v67 = v80 - 1;
        if (__OFSUB__(v80, 1))
        {
LABEL_43:
          __break(1u);
LABEL_44:
          __break(1u);
LABEL_45:
          __break(1u);
LABEL_46:
          __break(1u);
          goto LABEL_47;
        }
      }
      uint64_t v103 = v67;
      uint64_t v81 = (uint64_t)v104;
      unint64_t v82 = v65;
      sub_100B7B5A4(v102, (uint64_t)v104, (uint64_t (*)(void))type metadata accessor for MemberPeerTrust);
      uint64_t v38 = (char *)(v81 + *(void *)(v66 + 72));
      sub_10001D074((uint64_t)v101, v57, (uint64_t *)&unk_101660A20);
      uint64_t v42 = v99;
      int v83 = v93(v57, 1, v99);
      uint64_t v35 = v82;
      uint64_t v36 = v57;
      BOOL v39 = v82;
      uint64_t v14 = v112;
      if (v83 == 1) {
        goto LABEL_38;
      }
    }
  }
  sub_10001DAB4((uint64_t)v101, &qword_101659468);
  size_t result = sub_10001DAB4(v61, (uint64_t *)&unk_10163B890);
  unint64_t v84 = *((void *)v58 + 3);
  if (v84 < 2) {
    return (size_t)v58;
  }
  unint64_t v85 = v84 >> 1;
  BOOL v86 = __OFSUB__(v85, v103);
  uint64_t v87 = v85 - v103;
  if (!v86)
  {
    *((void *)v58 + 2) = v87;
    return (size_t)v58;
  }
LABEL_47:
  __break(1u);
  return result;
}

size_t sub_100B782FC(const void **a1)
{
  v124 = a1;
  uint64_t v1 = sub_10000588C(&qword_101649E40);
  __chkstk_darwin(v1 - 8);
  uint64_t v110 = (char *)v88 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v113 = type metadata accessor for URL();
  Swift::Int v111 = *(void (***)(char *, uint64_t, uint64_t, uint64_t))(v113 - 8);
  __chkstk_darwin(v113);
  uint64_t v109 = (char *)v88 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = sub_10000588C((uint64_t *)&unk_101653C90);
  __chkstk_darwin(v4 - 8);
  uint64_t v6 = (char *)v88 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for DirectorySequence();
  v121 = *(char **)(v7 - 8);
  __chkstk_darwin(v7);
  Class v120 = (char *)v88 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = sub_10000588C(&qword_10164B298);
  uint64_t v10 = __chkstk_darwin(v9 - 8);
  uint64_t v108 = (uint64_t)v88 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v10);
  uint64_t v13 = (char *)v88 - v12;
  uint64_t v14 = sub_10000588C(&qword_10164B2A0);
  Class v118 = *(unsigned int (***)(char *, uint64_t, uint64_t))(v14 - 8);
  uint64_t v15 = __chkstk_darwin(v14);
  uint64_t v17 = (char *)v88 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v15);
  uint64_t v115 = (uint64_t)v88 - v18;
  uint64_t v19 = sub_10000588C(&qword_101645758);
  __chkstk_darwin(v19 - 8);
  BOOL v21 = (char *)v88 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v22 = sub_10000588C(&qword_101645750);
  Class v123 = *(char **)(v22 - 8);
  __chkstk_darwin(v22);
  uint64_t v114 = (char *)v88 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v24 = sub_10000588C((uint64_t *)&unk_101638D10);
  __chkstk_darwin(v24 - 8);
  uint64_t v96 = (uint64_t)v88 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v97 = type metadata accessor for OwnerSharingCircle();
  uint64_t v26 = *(void *)(v97 - 8);
  __chkstk_darwin(v97);
  uint64_t v102 = (uint64_t)v88 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v28 = sub_10000588C((uint64_t *)&unk_101653CA0);
  __chkstk_darwin(v28 - 8);
  uint64_t v30 = (char *)v88 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v104 = (char *)*(unsigned __int8 *)(v26 + 80);
  sub_10001D074((uint64_t)v124, (uint64_t)v30, (uint64_t *)&unk_101653CA0);
  uint64_t v101 = v30;
  uint64_t v31 = (uint64_t)v30;
  uint64_t v32 = v123;
  sub_10001D074(v31, (uint64_t)v21, &qword_101645758);
  uint64_t v33 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))*((void *)v32 + 6);
  long long v98 = v21;
  uint64_t v99 = v22;
  uint64_t v94 = v32 + 48;
  uint64_t v93 = v33;
  int v34 = v33((uint64_t)v21, 1, v22);
  uint64_t v35 = (char *)_swiftEmptyArrayStorage;
  uint64_t v95 = v26;
  if (v34 == 1)
  {
    uint64_t v103 = 0;
    uint64_t v36 = (uint64_t)v98;
LABEL_38:
    uint64_t v58 = v35;
    sub_10001DAB4(v36, &qword_101645758);
    uint64_t v61 = v96;
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v95 + 56))(v96, 1, 1, v97);
  }
  else
  {
    uint64_t v37 = v26;
    uint64_t v103 = 0;
    uint64_t v117 = 0;
    uint64_t v89 = (unint64_t)(v104 + 32) & ~(unint64_t)v104;
    uint64_t v38 = (char *)_swiftEmptyArrayStorage + v89;
    v124 = (const void **)(v121 + 48);
    v122 = (char **)(v121 + 32);
    uint64_t v119 = (unsigned int (**)(uint64_t, uint64_t, uint64_t))(v111 + 6);
    unint64_t v107 = (void (**)(char *, uint64_t, uint64_t))(v111 + 4);
    uint64_t v116 = (void (**)(char *, uint64_t))(v121 + 8);
    uint64_t v106 = (void (**)(uint64_t, uint64_t))(v111 + 1);
    uint64_t v105 = (void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v121 + 56);
    Swift::Int v111 = (void (**)(char *, uint64_t, uint64_t, uint64_t))(v118 + 7);
    v118 += 6;
    uint64_t v92 = (void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v37 + 56);
    uint64_t v90 = (void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v32 + 56);
    uint64_t v91 = (unsigned int (**)(uint64_t, uint64_t, uint64_t))(v37 + 48);
    v88[1] = (unint64_t)v104 | 7;
    BOOL v39 = (char *)_swiftEmptyArrayStorage;
    uint64_t v40 = (uint64_t)v110;
    uint64_t v41 = v113;
    uint64_t v112 = v14;
    uint64_t v36 = (uint64_t)v98;
    uint64_t v42 = v99;
    while (1)
    {
      uint64_t v100 = v39;
      uint64_t v43 = v114;
      sub_10001D608(v36, (uint64_t)v114, &qword_101645750);
      uint64_t v44 = (uint64_t)&v43[*(int *)(v42 + 40)];
      sub_10001D074(v44, (uint64_t)v6, (uint64_t *)&unk_101653C90);
      Class v123 = (char *)*v124;
      int v45 = ((uint64_t (*)(char *, uint64_t, uint64_t))v123)(v6, 1, v7);
      uint64_t v104 = v38;
      if (v45 == 1)
      {
LABEL_12:
        sub_10001DAB4((uint64_t)v6, (uint64_t *)&unk_101653C90);
        (*v111)(v13, 1, 1, v14);
      }
      else
      {
        v121 = *v122;
        while (1)
        {
          uint64_t v46 = v17;
          uint64_t v47 = v120;
          ((void (*)(char *, char *, uint64_t))v121)(v120, v6, v7);
          DirectorySequence.next()();
          if ((*v119)(v40, 1, v41) == 1)
          {
            (*v116)(v47, v7);
            sub_10001DAB4(v40, &qword_101649E40);
            sub_10001DAB4(v44, (uint64_t *)&unk_101653C90);
            (*v105)(v44, 1, 1, v7);
            (*v111)(v13, 1, 1, v14);
          }
          else
          {
            uint64_t v48 = (uint64_t)v109;
            (*v107)(v109, v40, v41);
            uint64_t v50 = v13;
            uint64_t v51 = v6;
            uint64_t v52 = v108;
            uint64_t v53 = v117;
            sub_100E56CAC(v48, v114, v108);
            uint64_t v117 = v53;
            uint64_t v41 = v113;
            unint64_t v54 = v49;
            uint64_t v40 = (uint64_t)v110;
            (*v116)(v47, v7);
            (*v106)(v48, v41);
            uint64_t v55 = v52;
            uint64_t v6 = v51;
            uint64_t v13 = v50;
            uint64_t v14 = v112;
            sub_10001D608(v55, (uint64_t)v13, &qword_10164B298);
          }
          uint64_t v17 = v46;
          if ((*v118)(v13, 1, v14) == 1) {
            break;
          }
          uint64_t v56 = v115;
          sub_10001D608((uint64_t)v13, v115, &qword_10164B2A0);
          sub_10001D608(v56, (uint64_t)v17, &qword_10164B2A0);
          if (swift_getEnumCaseMultiPayload() != 1)
          {
            sub_10001DAB4((uint64_t)v114, &qword_101645750);
            uint64_t v61 = v96;
            sub_100B7B5A4((uint64_t)v17, v96, (uint64_t (*)(void))type metadata accessor for OwnerSharingCircle);
            uint64_t v60 = 0;
            uint64_t v57 = (uint64_t)v98;
            uint64_t v58 = v100;
            goto LABEL_14;
          }
          sub_10001DAB4((uint64_t)v17, &qword_10164B2A0);
          sub_10001D074(v44, (uint64_t)v6, (uint64_t *)&unk_101653C90);
          if (((unsigned int (*)(char *, uint64_t, uint64_t))v123)(v6, 1, v7) == 1) {
            goto LABEL_12;
          }
        }
      }
      uint64_t v57 = (uint64_t)v98;
      uint64_t v58 = v100;
      sub_10001DAB4((uint64_t)v114, &qword_101645750);
      sub_10001DAB4((uint64_t)v13, &qword_10164B298);
      uint64_t v59 = (uint64_t)v101;
      sub_10001DAB4((uint64_t)v101, &qword_101645758);
      uint64_t v60 = 1;
      (*v90)(v59, 1, 1, v99);
      uint64_t v61 = v96;
LABEL_14:
      uint64_t v62 = v60;
      uint64_t v63 = v97;
      (*v92)(v61, v62, 1, v97);
      if ((*v91)(v61, 1, v63) == 1) {
        break;
      }
      size_t result = sub_100B7B5A4(v61, v102, (uint64_t (*)(void))type metadata accessor for OwnerSharingCircle);
      if (v103)
      {
        uint64_t v65 = v58;
        uint64_t v41 = v113;
        uint64_t v66 = v95;
        uint64_t v67 = v103 - 1;
        if (__OFSUB__(v103, 1)) {
          goto LABEL_43;
        }
      }
      else
      {
        unint64_t v68 = *((void *)v58 + 3);
        uint64_t v66 = v95;
        if ((uint64_t)((v68 >> 1) + 0x4000000000000000) < 0) {
          goto LABEL_44;
        }
        int64_t v69 = v68 & 0xFFFFFFFFFFFFFFFELL;
        if (v69 <= 1) {
          uint64_t v70 = 1;
        }
        else {
          uint64_t v70 = v69;
        }
        sub_10000588C(&qword_101657700);
        uint64_t v71 = *(void *)(v66 + 72);
        uint64_t v72 = v89;
        Class v123 = (char *)swift_allocObject();
        size_t result = j__malloc_size(v123);
        if (!v71) {
          goto LABEL_45;
        }
        int64_t v73 = result - v72;
        if (result - v72 == 0x8000000000000000 && v71 == -1) {
          goto LABEL_46;
        }
        uint64_t v75 = v73 / v71;
        uint64_t v76 = v123;
        *((void *)v123 + 2) = v70;
        *((void *)v76 + 3) = 2 * (v73 / v71);
        uint64_t v77 = &v76[v72];
        uint64_t v78 = *((void *)v58 + 3) >> 1;
        uint64_t v79 = v78 * v71;
        if (*((void *)v58 + 2))
        {
          if (v76 < v58 || v77 >= &v58[v89 + v79])
          {
            swift_arrayInitWithTakeFrontToBack();
          }
          else if (v76 != v58)
          {
            swift_arrayInitWithTakeBackToFront();
          }
          *((void *)v58 + 2) = 0;
        }
        uint64_t v104 = &v77[v79];
        uint64_t v80 = (v75 & 0x7FFFFFFFFFFFFFFFLL) - v78;
        size_t result = swift_release();
        uint64_t v65 = v123;
        uint64_t v40 = (uint64_t)v110;
        uint64_t v41 = v113;
        uint64_t v57 = (uint64_t)v98;
        uint64_t v67 = v80 - 1;
        if (__OFSUB__(v80, 1))
        {
LABEL_43:
          __break(1u);
LABEL_44:
          __break(1u);
LABEL_45:
          __break(1u);
LABEL_46:
          __break(1u);
          goto LABEL_47;
        }
      }
      uint64_t v103 = v67;
      uint64_t v81 = (uint64_t)v104;
      unint64_t v82 = v65;
      sub_100B7B5A4(v102, (uint64_t)v104, (uint64_t (*)(void))type metadata accessor for OwnerSharingCircle);
      uint64_t v38 = (char *)(v81 + *(void *)(v66 + 72));
      sub_10001D074((uint64_t)v101, v57, &qword_101645758);
      uint64_t v42 = v99;
      int v83 = v93(v57, 1, v99);
      uint64_t v35 = v82;
      uint64_t v36 = v57;
      BOOL v39 = v82;
      uint64_t v14 = v112;
      if (v83 == 1) {
        goto LABEL_38;
      }
    }
  }
  sub_10001DAB4((uint64_t)v101, (uint64_t *)&unk_101653CA0);
  size_t result = sub_10001DAB4(v61, (uint64_t *)&unk_101638D10);
  unint64_t v84 = *((void *)v58 + 3);
  if (v84 < 2) {
    return (size_t)v58;
  }
  unint64_t v85 = v84 >> 1;
  BOOL v86 = __OFSUB__(v85, v103);
  uint64_t v87 = v85 - v103;
  if (!v86)
  {
    *((void *)v58 + 2) = v87;
    return (size_t)v58;
  }
LABEL_47:
  __break(1u);
  return result;
}

size_t sub_100B79014(const void **a1)
{
  v124 = a1;
  uint64_t v1 = sub_10000588C(&qword_101649E40);
  __chkstk_darwin(v1 - 8);
  uint64_t v110 = (char *)v88 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v113 = type metadata accessor for URL();
  Swift::Int v111 = *(void (***)(char *, uint64_t, uint64_t, uint64_t))(v113 - 8);
  __chkstk_darwin(v113);
  uint64_t v109 = (char *)v88 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = sub_10000588C((uint64_t *)&unk_101653C90);
  __chkstk_darwin(v4 - 8);
  uint64_t v6 = (char *)v88 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for DirectorySequence();
  v121 = *(char **)(v7 - 8);
  __chkstk_darwin(v7);
  Class v120 = (char *)v88 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = sub_10000588C(&qword_101659D20);
  uint64_t v10 = __chkstk_darwin(v9 - 8);
  uint64_t v108 = (uint64_t)v88 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v10);
  uint64_t v13 = (char *)v88 - v12;
  uint64_t v14 = sub_10000588C((uint64_t *)&unk_101660AE0);
  Class v118 = *(unsigned int (***)(char *, uint64_t, uint64_t))(v14 - 8);
  uint64_t v15 = __chkstk_darwin(v14);
  uint64_t v17 = (char *)v88 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v15);
  uint64_t v115 = (uint64_t)v88 - v18;
  uint64_t v19 = sub_10000588C((uint64_t *)&unk_101660AC0);
  __chkstk_darwin(v19 - 8);
  BOOL v21 = (char *)v88 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v22 = sub_10000588C((uint64_t *)&unk_101660AB0);
  Class v123 = *(char **)(v22 - 8);
  __chkstk_darwin(v22);
  uint64_t v114 = (char *)v88 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v24 = sub_10000588C(&qword_1016593B8);
  __chkstk_darwin(v24 - 8);
  uint64_t v96 = (uint64_t)v88 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v97 = type metadata accessor for SharingCircleSecret();
  uint64_t v26 = *(void *)(v97 - 8);
  __chkstk_darwin(v97);
  uint64_t v102 = (uint64_t)v88 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v28 = sub_10000588C(&qword_101659448);
  __chkstk_darwin(v28 - 8);
  uint64_t v30 = (char *)v88 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v104 = (char *)*(unsigned __int8 *)(v26 + 80);
  sub_10001D074((uint64_t)v124, (uint64_t)v30, &qword_101659448);
  uint64_t v101 = v30;
  uint64_t v31 = (uint64_t)v30;
  uint64_t v32 = v123;
  sub_10001D074(v31, (uint64_t)v21, (uint64_t *)&unk_101660AC0);
  uint64_t v33 = (uint64_t (*)(void, void, void))*((void *)v32 + 6);
  long long v98 = v21;
  uint64_t v99 = v22;
  uint64_t v94 = v32 + 48;
  uint64_t v93 = v33;
  int v34 = v33(v21, 1, v22);
  uint64_t v35 = (char *)_swiftEmptyArrayStorage;
  uint64_t v95 = v26;
  if (v34 == 1)
  {
    uint64_t v103 = 0;
    uint64_t v36 = (uint64_t)v98;
LABEL_38:
    uint64_t v58 = v35;
    sub_10001DAB4(v36, (uint64_t *)&unk_101660AC0);
    uint64_t v61 = v96;
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v95 + 56))(v96, 1, 1, v97);
  }
  else
  {
    uint64_t v37 = v26;
    uint64_t v103 = 0;
    uint64_t v117 = 0;
    uint64_t v89 = (unint64_t)(v104 + 32) & ~(unint64_t)v104;
    uint64_t v38 = (char *)_swiftEmptyArrayStorage + v89;
    v124 = (const void **)(v121 + 48);
    v122 = (char **)(v121 + 32);
    uint64_t v119 = (unsigned int (**)(uint64_t, uint64_t, uint64_t))(v111 + 6);
    unint64_t v107 = (void (**)(char *, uint64_t, uint64_t))(v111 + 4);
    uint64_t v116 = (void (**)(char *, uint64_t))(v121 + 8);
    uint64_t v106 = (void (**)(uint64_t, uint64_t))(v111 + 1);
    uint64_t v105 = (void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v121 + 56);
    Swift::Int v111 = (void (**)(char *, uint64_t, uint64_t, uint64_t))(v118 + 7);
    v118 += 6;
    uint64_t v92 = (void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v37 + 56);
    uint64_t v90 = (void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v32 + 56);
    uint64_t v91 = (unsigned int (**)(uint64_t, uint64_t, uint64_t))(v37 + 48);
    v88[1] = (unint64_t)v104 | 7;
    BOOL v39 = (char *)_swiftEmptyArrayStorage;
    uint64_t v40 = (uint64_t)v110;
    uint64_t v41 = v113;
    uint64_t v112 = v14;
    uint64_t v36 = (uint64_t)v98;
    uint64_t v42 = v99;
    while (1)
    {
      uint64_t v100 = v39;
      uint64_t v43 = v114;
      sub_10001D608(v36, (uint64_t)v114, (uint64_t *)&unk_101660AB0);
      uint64_t v44 = (uint64_t)&v43[*(int *)(v42 + 40)];
      sub_10001D074(v44, (uint64_t)v6, (uint64_t *)&unk_101653C90);
      Class v123 = (char *)*v124;
      int v45 = ((uint64_t (*)(char *, uint64_t, uint64_t))v123)(v6, 1, v7);
      uint64_t v104 = v38;
      if (v45 == 1)
      {
LABEL_12:
        sub_10001DAB4((uint64_t)v6, (uint64_t *)&unk_101653C90);
        (*v111)(v13, 1, 1, v14);
      }
      else
      {
        v121 = *v122;
        while (1)
        {
          uint64_t v46 = v17;
          uint64_t v47 = v120;
          ((void (*)(char *, char *, uint64_t))v121)(v120, v6, v7);
          DirectorySequence.next()();
          if ((*v119)(v40, 1, v41) == 1)
          {
            (*v116)(v47, v7);
            sub_10001DAB4(v40, &qword_101649E40);
            sub_10001DAB4(v44, (uint64_t *)&unk_101653C90);
            (*v105)(v44, 1, 1, v7);
            (*v111)(v13, 1, 1, v14);
          }
          else
          {
            uint64_t v48 = (uint64_t)v109;
            (*v107)(v109, v40, v41);
            uint64_t v50 = v13;
            uint64_t v51 = v6;
            uint64_t v52 = v108;
            uint64_t v53 = v117;
            sub_100E56E2C(v48, v114, v108);
            uint64_t v117 = v53;
            uint64_t v41 = v113;
            unint64_t v54 = v49;
            uint64_t v40 = (uint64_t)v110;
            (*v116)(v47, v7);
            (*v106)(v48, v41);
            uint64_t v55 = v52;
            uint64_t v6 = v51;
            uint64_t v13 = v50;
            uint64_t v14 = v112;
            sub_10001D608(v55, (uint64_t)v13, &qword_101659D20);
          }
          uint64_t v17 = v46;
          if ((*v118)(v13, 1, v14) == 1) {
            break;
          }
          uint64_t v56 = v115;
          sub_10001D608((uint64_t)v13, v115, (uint64_t *)&unk_101660AE0);
          sub_10001D608(v56, (uint64_t)v17, (uint64_t *)&unk_101660AE0);
          if (swift_getEnumCaseMultiPayload() != 1)
          {
            sub_10001DAB4((uint64_t)v114, (uint64_t *)&unk_101660AB0);
            uint64_t v61 = v96;
            sub_100B7B5A4((uint64_t)v17, v96, (uint64_t (*)(void))type metadata accessor for SharingCircleSecret);
            uint64_t v60 = 0;
            uint64_t v57 = (uint64_t)v98;
            uint64_t v58 = v100;
            goto LABEL_14;
          }
          sub_10001DAB4((uint64_t)v17, (uint64_t *)&unk_101660AE0);
          sub_10001D074(v44, (uint64_t)v6, (uint64_t *)&unk_101653C90);
          if (((unsigned int (*)(char *, uint64_t, uint64_t))v123)(v6, 1, v7) == 1) {
            goto LABEL_12;
          }
        }
      }
      uint64_t v57 = (uint64_t)v98;
      uint64_t v58 = v100;
      sub_10001DAB4((uint64_t)v114, (uint64_t *)&unk_101660AB0);
      sub_10001DAB4((uint64_t)v13, &qword_101659D20);
      uint64_t v59 = (uint64_t)v101;
      sub_10001DAB4((uint64_t)v101, (uint64_t *)&unk_101660AC0);
      uint64_t v60 = 1;
      (*v90)(v59, 1, 1, v99);
      uint64_t v61 = v96;
LABEL_14:
      uint64_t v62 = v60;
      uint64_t v63 = v97;
      (*v92)(v61, v62, 1, v97);
      if ((*v91)(v61, 1, v63) == 1) {
        break;
      }
      size_t result = sub_100B7B5A4(v61, v102, (uint64_t (*)(void))type metadata accessor for SharingCircleSecret);
      if (v103)
      {
        uint64_t v65 = v58;
        uint64_t v41 = v113;
        uint64_t v66 = v95;
        uint64_t v67 = v103 - 1;
        if (__OFSUB__(v103, 1)) {
          goto LABEL_43;
        }
      }
      else
      {
        unint64_t v68 = *((void *)v58 + 3);
        uint64_t v66 = v95;
        if ((uint64_t)((v68 >> 1) + 0x4000000000000000) < 0) {
          goto LABEL_44;
        }
        int64_t v69 = v68 & 0xFFFFFFFFFFFFFFFELL;
        if (v69 <= 1) {
          uint64_t v70 = 1;
        }
        else {
          uint64_t v70 = v69;
        }
        sub_10000588C(&qword_10163A878);
        uint64_t v71 = *(void *)(v66 + 72);
        uint64_t v72 = v89;
        Class v123 = (char *)swift_allocObject();
        size_t result = j__malloc_size(v123);
        if (!v71) {
          goto LABEL_45;
        }
        int64_t v73 = result - v72;
        if (result - v72 == 0x8000000000000000 && v71 == -1) {
          goto LABEL_46;
        }
        uint64_t v75 = v73 / v71;
        uint64_t v76 = v123;
        *((void *)v123 + 2) = v70;
        *((void *)v76 + 3) = 2 * (v73 / v71);
        uint64_t v77 = &v76[v72];
        uint64_t v78 = *((void *)v58 + 3) >> 1;
        uint64_t v79 = v78 * v71;
        if (*((void *)v58 + 2))
        {
          if (v76 < v58 || v77 >= &v58[v89 + v79])
          {
            swift_arrayInitWithTakeFrontToBack();
          }
          else if (v76 != v58)
          {
            swift_arrayInitWithTakeBackToFront();
          }
          *((void *)v58 + 2) = 0;
        }
        uint64_t v104 = &v77[v79];
        uint64_t v80 = (v75 & 0x7FFFFFFFFFFFFFFFLL) - v78;
        size_t result = swift_release();
        uint64_t v65 = v123;
        uint64_t v40 = (uint64_t)v110;
        uint64_t v41 = v113;
        uint64_t v57 = (uint64_t)v98;
        uint64_t v67 = v80 - 1;
        if (__OFSUB__(v80, 1))
        {
LABEL_43:
          __break(1u);
LABEL_44:
          __break(1u);
LABEL_45:
          __break(1u);
LABEL_46:
          __break(1u);
          goto LABEL_47;
        }
      }
      uint64_t v103 = v67;
      uint64_t v81 = (uint64_t)v104;
      unint64_t v82 = v65;
      sub_100B7B5A4(v102, (uint64_t)v104, (uint64_t (*)(void))type metadata accessor for SharingCircleSecret);
      uint64_t v38 = (char *)(v81 + *(void *)(v66 + 72));
      sub_10001D074((uint64_t)v101, v57, (uint64_t *)&unk_101660AC0);
      uint64_t v42 = v99;
      int v83 = v93(v57, 1, v99);
      uint64_t v35 = v82;
      uint64_t v36 = v57;
      BOOL v39 = v82;
      uint64_t v14 = v112;
      if (v83 == 1) {
        goto LABEL_38;
      }
    }
  }
  sub_10001DAB4((uint64_t)v101, &qword_101659448);
  size_t result = sub_10001DAB4(v61, &qword_1016593B8);
  unint64_t v84 = *((void *)v58 + 3);
  if (v84 < 2) {
    return (size_t)v58;
  }
  unint64_t v85 = v84 >> 1;
  BOOL v86 = __OFSUB__(v85, v103);
  uint64_t v87 = v85 - v103;
  if (!v86)
  {
    *((void *)v58 + 2) = v87;
    return (size_t)v58;
  }
LABEL_47:
  __break(1u);
  return result;
}

uint64_t sub_100B79D2C()
{
  swift_bridgeObjectRetain();
  uint64_t result = sub_100B68024();
  uint64_t v4 = _swiftEmptyArrayStorage;
  if (v2)
  {
    uint64_t v5 = result;
    uint64_t v6 = v1;
    uint64_t v7 = v2;
    uint64_t v8 = v3;
    uint64_t v9 = 0;
    uint64_t v10 = &_swiftEmptyArrayStorage[4];
    while (1)
    {
      if (!v9)
      {
        unint64_t v11 = v4[3];
        if ((uint64_t)((v11 >> 1) + 0x4000000000000000) < 0) {
          goto LABEL_28;
        }
        int64_t v12 = v11 & 0xFFFFFFFFFFFFFFFELL;
        if (v12 <= 1) {
          uint64_t v13 = 1;
        }
        else {
          uint64_t v13 = v12;
        }
        sub_10000588C(&qword_10163A768);
        uint64_t v14 = (void *)swift_allocObject();
        int64_t v15 = j__malloc_size(v14);
        uint64_t v16 = v15 - 32;
        if (v15 < 32) {
          uint64_t v16 = v15 - 1;
        }
        uint64_t v17 = v16 >> 5;
        v14[2] = v13;
        v14[3] = 2 * (v16 >> 5);
        unint64_t v18 = (unint64_t)(v14 + 4);
        uint64_t v19 = v4[3] >> 1;
        if (v4[2])
        {
          if (v14 != v4 || v18 >= (unint64_t)&v4[4 * v19 + 4]) {
            memmove(v14 + 4, v4 + 4, 32 * v19);
          }
          v4[2] = 0;
        }
        uint64_t v10 = (uint64_t *)(v18 + 32 * v19);
        uint64_t v9 = (v17 & 0x7FFFFFFFFFFFFFFFLL) - v19;
        uint64_t result = swift_release();
        uint64_t v4 = v14;
      }
      BOOL v21 = __OFSUB__(v9--, 1);
      if (v21) {
        break;
      }
      *uint64_t v10 = v5;
      v10[1] = v6;
      v10[2] = v7;
      v10[3] = v8;
      v10 += 4;
      uint64_t result = sub_100B68024();
      uint64_t v5 = result;
      uint64_t v6 = v22;
      uint64_t v7 = v23;
      uint64_t v8 = v24;
      if (!v23) {
        goto LABEL_23;
      }
    }
    __break(1u);
LABEL_28:
    __break(1u);
    goto LABEL_29;
  }
  uint64_t v9 = 0;
LABEL_23:
  uint64_t result = sub_100132C20();
  unint64_t v25 = v4[3];
  if (v25 < 2) {
    return (uint64_t)v4;
  }
  unint64_t v26 = v25 >> 1;
  BOOL v21 = __OFSUB__(v26, v9);
  uint64_t v27 = v26 - v9;
  if (!v21)
  {
    v4[2] = v27;
    return (uint64_t)v4;
  }
LABEL_29:
  __break(1u);
  return result;
}

uint64_t sub_100B79EF4(uint64_t a1)
{
  uint64_t v2 = sub_10000588C(&qword_101649E40);
  __chkstk_darwin(v2 - 8);
  uint64_t v4 = &v24[-((v3 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v5 = type metadata accessor for URL();
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v8 = &v24[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v9 = type metadata accessor for BeaconStoreFileRecord();
  sub_10001D074(a1 + *(int *)(v9 + 20), (uint64_t)v4, &qword_101649E40);
  if ((*(unsigned int (**)(unsigned char *, uint64_t, uint64_t))(v6 + 48))(v4, 1, v5) == 1) {
    return sub_10001DAB4((uint64_t)v4, &qword_101649E40);
  }
  (*(void (**)(unsigned char *, unsigned char *, uint64_t))(v6 + 32))(v8, v4, v5);
  id v11 = [self defaultManager];
  URL._bridgeToObjectiveC()(v12);
  uint64_t v14 = v13;
  id v25 = 0;
  unsigned int v15 = [v11 removeItemAtURL:v13 error:&v25];

  if (v15)
  {
    uint64_t v16 = *(uint64_t (**)(unsigned char *, uint64_t))(v6 + 8);
    id v17 = v25;
    return v16(v8, v5);
  }
  else
  {
    id v18 = v25;
    uint64_t v19 = (void *)_convertNSErrorToError(_:)();

    swift_willThrow();
    static os_log_type_t.default.getter();
    if (qword_101637260 != -1) {
      swift_once();
    }
    sub_10000588C((uint64_t *)&unk_10163AD00);
    uint64_t v20 = swift_allocObject();
    *(_OWORD *)(v20 + 16) = xmmword_101342130;
    id v25 = v19;
    swift_errorRetain();
    sub_10000588C(&qword_101638D40);
    uint64_t v21 = String.init<A>(describing:)();
    uint64_t v23 = v22;
    *(void *)(v20 + 56) = &type metadata for String;
    *(void *)(v20 + 64) = sub_10000B4CC();
    *(void *)(v20 + 32) = v21;
    *(void *)(v20 + 40) = v23;
    os_log(_:dso:log:_:_:)();
    swift_bridgeObjectRelease();
    swift_errorRelease();
    return (*(uint64_t (**)(unsigned char *, uint64_t))(v6 + 8))(v8, v5);
  }
}

void sub_100B7A23C(uint64_t a1, void *a2)
{
  uint64_t v3 = a1;
  uint64_t v4 = a1 + 64;
  uint64_t v5 = 1 << *(unsigned char *)(a1 + 32);
  uint64_t v6 = -1;
  if (v5 < 64) {
    uint64_t v6 = ~(-1 << v5);
  }
  unint64_t v7 = v6 & *(void *)(a1 + 64);
  int64_t v27 = (unint64_t)(v5 + 63) >> 6;
  int64_t v8 = 0;
  p_ivar_base_size = &AnalyticsEvent.ivar_base_size;
  uint64_t v10 = &off_101659000;
  uint64_t v25 = a1 + 64;
  uint64_t v26 = swift_bridgeObjectRetain();
  if (v7) {
    goto LABEL_6;
  }
LABEL_7:
  int64_t v14 = v8 + 1;
  if (!__OFADD__(v8, 1))
  {
    if (v14 < v27)
    {
      unint64_t v15 = *(void *)(v4 + 8 * v14);
      ++v8;
      if (v15) {
        goto LABEL_22;
      }
      int64_t v8 = v14 + 1;
      if (v14 + 1 >= v27) {
        goto LABEL_33;
      }
      unint64_t v15 = *(void *)(v4 + 8 * v8);
      if (v15) {
        goto LABEL_22;
      }
      int64_t v8 = v14 + 2;
      if (v14 + 2 >= v27) {
        goto LABEL_33;
      }
      unint64_t v15 = *(void *)(v4 + 8 * v8);
      if (v15) {
        goto LABEL_22;
      }
      int64_t v8 = v14 + 3;
      if (v14 + 3 >= v27) {
        goto LABEL_33;
      }
      unint64_t v15 = *(void *)(v4 + 8 * v8);
      if (v15)
      {
LABEL_22:
        unint64_t v7 = (v15 - 1) & v15;
        for (unint64_t i = __clz(__rbit64(v15)) + (v8 << 6); ; unint64_t i = v12 | (v8 << 6))
        {
          id v17 = (uint64_t *)(*(void *)(v3 + 48) + 16 * i);
          uint64_t v18 = *v17;
          unint64_t v19 = v17[1];
          uint64_t v20 = *((void *)p_ivar_base_size + 499);
          swift_bridgeObjectRetain();
          if (v20 != -1) {
            swift_once();
          }
          if (sub_100DC6054(v18, v19, (uint64_t)v10[300]))
          {
            if (qword_101636F50 != -1) {
              swift_once();
            }
            uint64_t v21 = type metadata accessor for Logger();
            sub_100010324(v21, (uint64_t)qword_10170E9E8);
            swift_bridgeObjectRetain_n();
            uint64_t v22 = Logger.logObject.getter();
            os_log_type_t v23 = static os_log_type_t.debug.getter();
            if (os_log_type_enabled(v22, v23))
            {
              uint64_t v24 = swift_slowAlloc();
              uint64_t v28 = swift_slowAlloc();
              *(_DWORD *)uint64_t v24 = 136315138;
              swift_bridgeObjectRetain();
              *(void *)(v24 + 4) = sub_1008FA0F0(v18, v19, &v28);
              swift_bridgeObjectRelease_n();
              _os_log_impl((void *)&_mh_execute_header, v22, v23, "Ignore persisted user defaults: %s", (uint8_t *)v24, 0xCu);
              swift_arrayDestroy();
              uint64_t v3 = v26;
              swift_slowDealloc();
              uint64_t v4 = v25;
              swift_slowDealloc();
              swift_bridgeObjectRelease();
            }
            else
            {

              swift_bridgeObjectRelease_n();
            }
            p_ivar_base_size = (_DWORD *)(&AnalyticsEvent + 8);
            uint64_t v10 = &off_101659000;
            if (!v7) {
              goto LABEL_7;
            }
          }
          else
          {
            NSString v11 = String._bridgeToObjectiveC()();
            [a2 removeObjectForKey:v11];
            swift_bridgeObjectRelease();

            if (!v7) {
              goto LABEL_7;
            }
          }
LABEL_6:
          unint64_t v12 = __clz(__rbit64(v7));
          v7 &= v7 - 1;
        }
      }
      int64_t v16 = v14 + 4;
      if (v16 < v27)
      {
        unint64_t v15 = *(void *)(v4 + 8 * v16);
        if (v15)
        {
          int64_t v8 = v16;
          goto LABEL_22;
        }
        while (1)
        {
          int64_t v8 = v16 + 1;
          if (__OFADD__(v16, 1)) {
            goto LABEL_35;
          }
          if (v8 >= v27) {
            break;
          }
          unint64_t v15 = *(void *)(v4 + 8 * v8);
          ++v16;
          if (v15) {
            goto LABEL_22;
          }
        }
      }
    }
LABEL_33:
    swift_release();
    return;
  }
  __break(1u);
LABEL_35:
  __break(1u);
}

void *sub_100B7A5C4(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for BeaconStoreFileRecord();
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t v4 = __chkstk_darwin(v2);
  uint64_t v53 = (uint64_t)&v43 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v4);
  uint64_t v52 = (uint64_t)&v43 - v6;
  uint64_t v7 = sub_10000588C(&qword_101638CF0);
  __chkstk_darwin(v7 - 8);
  uint64_t v58 = (char *)&v43 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v60 = type metadata accessor for UUID();
  uint64_t v9 = *(void *)(v60 - 8);
  __chkstk_darwin(v60);
  uint64_t v51 = (char *)&v43 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = sub_10000588C(&qword_101649E40);
  __chkstk_darwin(v11 - 8);
  uint64_t v13 = (char *)&v43 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = type metadata accessor for URL();
  uint64_t v15 = *(void *)(v14 - 8);
  uint64_t v16 = __chkstk_darwin(v14);
  unint64_t v54 = (char *)&v43 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v18 = __chkstk_darwin(v16);
  uint64_t v59 = (char *)&v43 - v19;
  __chkstk_darwin(v18);
  uint64_t v21 = (char *)&v43 - v20;
  id v22 = [self defaultManager];
  os_log_type_t v23 = NSFileManager.enumerator(at:includingPropertiesForKeys:options:errorHandler:)();

  id v66 = v23;
  if (v23)
  {
    uint64_t v48 = v3;
    uint64_t v49 = v2;
    uint64_t v50 = a1;
    BOOL v64 = (unsigned int (**)(char *, uint64_t, uint64_t))(v15 + 48);
    uint64_t v65 = (void (**)(char *, void, uint64_t, uint64_t))(v15 + 56);
    uint64_t v62 = (void (**)(char *, char *, uint64_t))(v15 + 32);
    uint64_t v24 = (void (**)(char *, uint64_t))(v15 + 8);
    uint64_t v57 = (unsigned int (**)(uint64_t, uint64_t, uint64_t))(v9 + 48);
    uint64_t v47 = (void (**)(char *, uint64_t, uint64_t))(v9 + 32);
    uint64_t v46 = (void (**)(uint64_t, char *, uint64_t))(v15 + 16);
    int v45 = (void (**)(char *, uint64_t))(v9 + 8);
    uint64_t v55 = _swiftEmptyArrayStorage;
    uint64_t v63 = (char *)&type metadata for Any + 8;
    uint64_t v61 = "shold: %{public}@";
    unint64_t v56 = 0x80000001013FB020;
    while (1)
    {
      if ([v66 nextObject])
      {
        _bridgeAnyObjectToAny(_:)();
        swift_unknownObjectRelease();
      }
      else
      {
        memset(v67, 0, sizeof(v67));
      }
      sub_10001D608((uint64_t)v67, (uint64_t)&v68, (uint64_t *)&unk_101644360);
      if (!*((void *)&v69 + 1))
      {
        uint64_t v41 = v55;
        goto LABEL_22;
      }
      int v25 = swift_dynamicCast();
      uint64_t v26 = (void (*)(uint64_t, void, uint64_t, uint64_t))*v65;
      (*v65)(v13, v25 ^ 1u, 1, v14);
      if ((*v64)(v13, 1, v14) == 1)
      {
        uint64_t v41 = v55;
        goto LABEL_24;
      }
      (*v62)(v21, v13, v14);
      if (URL.pathExtension.getter() == 0xD000000000000010 && v27 == v56)
      {
        swift_bridgeObjectRelease();
LABEL_13:
        uint64_t v29 = v15;
        uint64_t v30 = v59;
        URL.deletingPathExtension()();
        URL.lastPathComponent.getter();
        uint64_t v31 = *v24;
        (*v24)(v30, v14);
        uint64_t v32 = (uint64_t)v58;
        UUID.init(uuidString:)();
        swift_bridgeObjectRelease();
        if ((*v57)(v32, 1, v60) == 1)
        {
          v31(v21, v14);
          sub_10001DAB4(v32, &qword_101638CF0);
        }
        else
        {
          (*v47)(v51, v32, v60);
          UUID.uuidString.getter();
          uint64_t v33 = v59;
          URL.appendingPathComponent(_:)();
          swift_bridgeObjectRelease();
          URL.appendingPathExtension(_:)();
          v31(v33, v14);
          int v34 = *v46;
          uint64_t v35 = v52;
          (*v46)(v52, v54, v14);
          uint64_t v36 = v34;
          uint64_t v37 = v35 + *(int *)(v49 + 20);
          v36(v37, v21, v14);
          v26(v37, 0, 1, v14);
          sub_100B7B490(v35, v53, (uint64_t (*)(void))type metadata accessor for BeaconStoreFileRecord);
          uint64_t v15 = v29;
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
            uint64_t v55 = (void *)sub_100A6F718(0, v55[2] + 1, 1, (unint64_t)v55);
          }
          unint64_t v39 = v55[2];
          unint64_t v38 = v55[3];
          if (v39 >= v38 >> 1) {
            uint64_t v55 = (void *)sub_100A6F718(v38 > 1, v39 + 1, 1, (unint64_t)v55);
          }
          uint64_t v40 = v55;
          id v55[2] = v39 + 1;
          sub_100B7B5A4(v53, (uint64_t)v40+ ((*(unsigned __int8 *)(v48 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v48 + 80))+ *(void *)(v48 + 72) * v39, (uint64_t (*)(void))type metadata accessor for BeaconStoreFileRecord);
          sub_100B7B4F8(v52, (uint64_t (*)(void))type metadata accessor for BeaconStoreFileRecord);
          v31(v54, v14);
          (*v45)(v51, v60);
          v31(v21, v14);
        }
      }
      else
      {
        char v28 = _stringCompareWithSmolCheck(_:_:expecting:)();
        swift_bridgeObjectRelease();
        if (v28) {
          goto LABEL_13;
        }
        (*v24)(v21, v14);
      }
    }
  }
  long long v68 = 0u;
  long long v69 = 0u;
  uint64_t v41 = _swiftEmptyArrayStorage;
LABEL_22:
  sub_10001DAB4((uint64_t)&v68, (uint64_t *)&unk_101644360);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v15 + 56))(v13, 1, 1, v14);
LABEL_24:

  sub_10001DAB4((uint64_t)v13, &qword_101649E40);
  return v41;
}

uint64_t sub_100B7AE38(uint64_t a1)
{
  uint64_t v2 = sub_10000588C(&qword_101649E40);
  __chkstk_darwin(v2 - 8);
  uint64_t v4 = &v27[-((v3 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v5 = type metadata accessor for URL();
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v8 = &v27[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v9 = type metadata accessor for BeaconStoreFileRecord();
  sub_10001D074(a1 + *(int *)(v9 + 20), (uint64_t)v4, &qword_101649E40);
  if ((*(unsigned int (**)(unsigned char *, uint64_t, uint64_t))(v6 + 48))(v4, 1, v5) == 1) {
    return sub_10001DAB4((uint64_t)v4, &qword_101649E40);
  }
  (*(void (**)(unsigned char *, unsigned char *, uint64_t))(v6 + 32))(v8, v4, v5);
  id v11 = [self defaultManager];
  URL._bridgeToObjectiveC()(v12);
  uint64_t v14 = v13;
  URL._bridgeToObjectiveC()(v15);
  uint64_t v17 = v16;
  id v28 = 0;
  unsigned int v18 = [v11 moveItemAtURL:v14 toURL:v16 error:&v28];

  if (v18)
  {
    uint64_t v19 = *(uint64_t (**)(unsigned char *, uint64_t))(v6 + 8);
    id v20 = v28;
    return v19(v8, v5);
  }
  else
  {
    id v21 = v28;
    id v22 = (void *)_convertNSErrorToError(_:)();

    swift_willThrow();
    static os_log_type_t.default.getter();
    if (qword_101637260 != -1) {
      swift_once();
    }
    sub_10000588C((uint64_t *)&unk_10163AD00);
    uint64_t v23 = swift_allocObject();
    *(_OWORD *)(v23 + 16) = xmmword_101342130;
    id v28 = v22;
    swift_errorRetain();
    sub_10000588C(&qword_101638D40);
    uint64_t v24 = String.init<A>(describing:)();
    uint64_t v26 = v25;
    *(void *)(v23 + 56) = &type metadata for String;
    *(void *)(v23 + 64) = sub_10000B4CC();
    *(void *)(v23 + 32) = v24;
    *(void *)(v23 + 40) = v26;
    os_log(_:dso:log:_:_:)();
    swift_bridgeObjectRelease();
    swift_errorRelease();
    return (*(uint64_t (**)(unsigned char *, uint64_t))(v6 + 8))(v8, v5);
  }
}

uint64_t sub_100B7B198()
{
  swift_release();

  return _swift_deallocObject(v0, 32, 7);
}

uint64_t sub_100B7B1D8()
{
  return sub_100B71260(*(NSObject **)(v0 + 16));
}

uint64_t sub_100B7B1E0()
{
  return _swift_deallocObject(v0, 32, 7);
}

uint64_t sub_100B7B1F0(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_100B7B200()
{
  return swift_release();
}

uint64_t sub_100B7B208()
{
  swift_weakDestroy();

  return _swift_deallocObject(v0, 24, 7);
}

uint64_t sub_100B7B240(uint64_t a1)
{
  return sub_1010EAFAC(a1, *(void *)(v1 + 16), *(void *)(v1 + 24));
}

void sub_100B7B25C()
{
  sub_100B6F3B4(*(void *)(v0 + 32), *(void *)(v0 + 40), *(void **)(v0 + 16), *(void *)(v0 + 24));
}

void sub_100B7B27C()
{
  sub_100B6FF54(&v1);
}

uint64_t sub_100B7B308()
{
  return sub_100B7B43C((uint64_t (*)(void, void, void, void, void))sub_100E51DC0);
}

uint64_t sub_100B7B334()
{
  return sub_100B7B43C((uint64_t (*)(void, void, void, void, void))sub_100E51E64);
}

uint64_t sub_100B7B360()
{
  return sub_100B7B43C((uint64_t (*)(void, void, void, void, void))sub_100E504F0);
}

uint64_t sub_100B7B38C()
{
  return sub_100B7B43C((uint64_t (*)(void, void, void, void, void))sub_100E50594);
}

uint64_t sub_100B7B3B8()
{
  return sub_100B7B43C((uint64_t (*)(void, void, void, void, void))sub_100E53F08);
}

uint64_t sub_100B7B3E4()
{
  return sub_100B7B43C((uint64_t (*)(void, void, void, void, void))sub_100E53EAC);
}

uint64_t sub_100B7B410()
{
  return sub_100B7B43C((uint64_t (*)(void, void, void, void, void))sub_100E50AB4);
}

uint64_t sub_100B7B43C(uint64_t (*a1)(void, void, void, void, void))
{
  return a1(v1[2], v1[3], v1[4], v1[5], v1[6]);
}

uint64_t sub_100B7B468@<X0>(uint64_t a1@<X8>)
{
  return sub_100B6ADBC(*(void *)(v1 + 32), *(void *)(v1 + 48), *(void *)(v1 + 56), *(void *)(v1 + 64), *(void *)(v1 + 16), *(void *)(v1 + 24), a1);
}

uint64_t sub_100B7B490(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

uint64_t sub_100B7B4F8(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t sub_100B7B55C(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_100B7B5A4(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 32))(a2, a1, v5);
  return a2;
}

void sub_100B7B614(int a1, uint64_t a2, void (*a3)(char *, uint64_t, uint64_t))
{
  uint64_t v4 = v3;
  uint64_t v8 = sub_100ACF5FC();
  swift_retain();
  uint64_t v9 = sub_100B7DE38((uint64_t)v8, v4);
  swift_bridgeObjectRelease();
  swift_release();
  CurrentValueSubject.value.getter();
  if (LOBYTE(v30[0]) == 7)
  {
    if (qword_101636EE0 != -1) {
      swift_once();
    }
    uint64_t v10 = type metadata accessor for Logger();
    sub_100010324(v10, (uint64_t)qword_10170E7C8);
    id v11 = Logger.logObject.getter();
    os_log_type_t v12 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v11, v12))
    {
      uint64_t v13 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v13 = 0;
      _os_log_impl((void *)&_mh_execute_header, v11, v12, "SeparationStateSyncService: Responding to remote sync request", v13, 2u);
      swift_slowDealloc();
    }

    sub_100B7DC40(v4 + 40, (uint64_t)v30);
    if (v30[3])
    {
      sub_10001D010((uint64_t)v30, (uint64_t)v29);
      sub_10001DAB4((uint64_t)v30, &qword_101659EB0);
      uint64_t v14 = *sub_10001CD44(v29, v29[3]);
      swift_bridgeObjectRetain();
      sub_1004F8CC0(15, 1, (uint64_t)v9, (uint64_t)v25);
      uint64_t v19 = v27;
      uint64_t v24 = v26;
      id v20 = v28;
      int v21 = v25[0];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      unint64_t v22 = sub_10092E5D0((uint64_t)_swiftEmptyArrayStorage);
      uint64_t v23 = (unsigned int (*)(uint64_t, uint64_t, uint64_t))sub_101158790((uint64_t)_swiftEmptyArrayStorage);
      sub_10053466C(v21, v24, v19, v20, v22, a1, a2, (uint64_t)a3, 0, 0, 1, 1, (uint64_t)&_swiftEmptySetSingleton, v23, 0, 0, v14, (uint64_t)v9, a1,
        a2,
        a3);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      sub_10001CFB8((uint64_t)v19, (unint64_t)v20);
      swift_bridgeObjectRelease();
      _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)v29);
    }
    else
    {
      swift_bridgeObjectRelease();
      sub_10001DAB4((uint64_t)v30, &qword_101659EB0);
    }
  }
  else
  {
    swift_bridgeObjectRelease();
    if (qword_101636EE0 != -1) {
      swift_once();
    }
    uint64_t v15 = type metadata accessor for Logger();
    sub_100010324(v15, (uint64_t)qword_10170E7C8);
    uint64_t v16 = Logger.logObject.getter();
    os_log_type_t v17 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v16, v17))
    {
      unsigned int v18 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)unsigned int v18 = 0;
      _os_log_impl((void *)&_mh_execute_header, v16, v17, "SeparationStateSyncService: This is not the monitoring device, won't accept remote sync request.", v18, 2u);
      swift_slowDealloc();
    }
  }
}

uint64_t sub_100B7BAE0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v7 = type metadata accessor for BeaconObservation();
  uint64_t v37 = *(void *)(v7 - 8);
  uint64_t v38 = v7;
  uint64_t v8 = __chkstk_darwin(v7);
  uint64_t v10 = (char *)&v31 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8);
  uint64_t v35 = (char *)&v31 - v11;
  uint64_t v12 = *(int *)(type metadata accessor for OwnedBeaconRecord() + 20);
  uint64_t v34 = a2;
  swift_retain_n();
  sub_10000588C(&qword_101655540);
  OS_dispatch_queue.sync<A>(execute:)();
  uint64_t v32 = v3;
  uint64_t v13 = v39;
  if (!v39[2] || (unint64_t v14 = sub_1007240CC(a1 + v12), (v15 & 1) == 0))
  {
    swift_bridgeObjectRelease();
    id v20 = _swiftEmptyArrayStorage;
LABEL_18:
    swift_release_n();
    sub_100E4D5E0((uint64_t)v20, a3);
    return swift_bridgeObjectRelease();
  }
  uint64_t v16 = *(void *)(v13[7] + 8 * v14);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  os_log_type_t v17 = sub_1007100C0(v16);
  swift_bridgeObjectRelease();
  size_t v18 = sub_100B752E8((uint64_t)v17);
  uint64_t result = swift_release();
  id v20 = _swiftEmptyArrayStorage;
  unint64_t v39 = _swiftEmptyArrayStorage;
  uint64_t v36 = *(void *)(v18 + 16);
  if (!v36)
  {
LABEL_17:
    swift_release();
    goto LABEL_18;
  }
  uint64_t v31 = a3;
  unint64_t v21 = 0;
  uint64_t v22 = (uint64_t)v35;
  while (v21 < *(void *)(v18 + 16))
  {
    unint64_t v23 = (*(unsigned __int8 *)(v37 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v37 + 80);
    uint64_t v24 = *(void *)(v37 + 72);
    sub_1001A2590(v18 + v23 + v24 * v21, v22);
    uint64_t v25 = qword_1013778E0[*(char *)(v22 + *(int *)(v38 + 24))];
    if (v25 == 700 || v25 == 701)
    {
      uint64_t v26 = v22;
      uint64_t v27 = (uint64_t)v10;
      sub_1001A26B0(v26, (uint64_t)v10);
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
        sub_1000B77F0(0, v20[2] + 1, 1);
      }
      id v20 = v39;
      unint64_t v29 = v39[2];
      unint64_t v28 = v39[3];
      if (v29 >= v28 >> 1)
      {
        sub_1000B77F0(v28 > 1, v29 + 1, 1);
        id v20 = v39;
      }
      v20[2] = v29 + 1;
      uint64_t v30 = (uint64_t)v20 + v23 + v29 * v24;
      uint64_t v10 = (char *)v27;
      uint64_t result = sub_1001A26B0(v27, v30);
      uint64_t v22 = (uint64_t)v35;
    }
    else
    {
      uint64_t result = sub_1001A2654(v22);
    }
    if (v36 == ++v21)
    {
      id v20 = v39;
      a3 = v31;
      goto LABEL_17;
    }
  }
  __break(1u);
  return result;
}

void sub_100B7BE20(uint64_t a1)
{
  uint64_t v3 = sub_10000588C((uint64_t *)&unk_101655530);
  __chkstk_darwin(v3 - 8);
  uint64_t v5 = (char *)v85 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = type metadata accessor for BeaconObservation();
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = *(void *)(v7 + 64);
  uint64_t v9 = __chkstk_darwin(v6);
  uint64_t v96 = (char *)v85 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = __chkstk_darwin(v9);
  uint64_t v97 = (uint64_t)v85 - v11;
  uint64_t v12 = __chkstk_darwin(v10);
  uint64_t v95 = (char *)v85 - v13;
  uint64_t v14 = __chkstk_darwin(v12);
  BOOL v86 = (char *)v85 - v15;
  uint64_t v16 = __chkstk_darwin(v14);
  uint64_t v114 = (uint64_t)v85 - v17;
  uint64_t v18 = __chkstk_darwin(v16);
  uint64_t v112 = (char *)v85 - v19;
  uint64_t v20 = __chkstk_darwin(v18);
  uint64_t v22 = (char *)v85 - v21;
  uint64_t v23 = __chkstk_darwin(v20);
  uint64_t v25 = (char *)v85 - v24;
  uint64_t v26 = __chkstk_darwin(v23);
  unint64_t v28 = (char *)v85 - v27;
  __chkstk_darwin(v26);
  uint64_t v110 = (uint64_t)v85 - v29;
  uint64_t v111 = v1;
  CurrentValueSubject.value.getter();
  if (LOBYTE(v115[0]) == 7)
  {
    if (qword_101636EE0 != -1) {
      goto LABEL_59;
    }
    goto LABEL_3;
  }
  uint64_t v102 = *(void *)(a1 + 16);
  if (v102)
  {
    uint64_t v92 = v28;
    uint64_t v106 = *(void *)(v111 + 24);
    uint64_t v34 = *(unsigned __int8 *)(v7 + 80);
    uint64_t v35 = (v34 + 32) & ~v34;
    uint64_t v101 = a1 + v35;
    uint64_t v36 = *(void *)(v7 + 72);
    long long v98 = (void (**)(char *, uint64_t, uint64_t, uint64_t))(v7 + 56);
    uint64_t v99 = (unsigned int (**)(char *, uint64_t, uint64_t))(v7 + 48);
    uint64_t v100 = OBJC_IVAR____TtC12searchpartyd22BeaconObservationStore_observationsConcurrentQueue;
    uint64_t v94 = (v34 + 24) & ~v34;
    uint64_t v93 = v94 + v8;
    uint64_t v103 = v34 | 7;
    uint64_t v113 = v35;
    uint64_t v91 = v36 + v35;
    v85[1] = a1;
    swift_bridgeObjectRetain();
    uint64_t v37 = 0;
    uint64_t v38 = 0;
    *(void *)&long long v39 = 136315138;
    long long v90 = v39;
    uint64_t v89 = (char *)&type metadata for Any + 8;
    long long v88 = xmmword_101342130;
    uint64_t v87 = (char *)&type metadata for () + 8;
    uint64_t v104 = v25;
    uint64_t v105 = v5;
    uint64_t v40 = v110;
    while (1)
    {
      uint64_t v108 = v37;
      sub_1001A2590(v101 + v36 * v37, v40);
      swift_retain();
      sub_10000588C(&qword_101655540);
      OS_dispatch_queue.sync<A>(execute:)();
      uint64_t v43 = v115[0];
      uint64_t v44 = *(void *)(v115[0] + 16);
      uint64_t v107 = v38;
      if (v44 && (unint64_t v45 = sub_1007240CC(v40), (v46 & 1) != 0))
      {
        uint64_t v47 = *(void *)(*(void *)(v43 + 56) + 8 * v45);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRelease();
        uint64_t v48 = sub_1007100C0(v47);
        swift_bridgeObjectRelease();
        size_t v49 = sub_100B752E8((uint64_t)v48);
        swift_release();
        uint64_t v50 = _swiftEmptyArrayStorage;
        v115[0] = (uint64_t)_swiftEmptyArrayStorage;
        uint64_t v51 = *(void *)(v49 + 16);
        if (v51)
        {
          unint64_t v52 = 0;
          uint64_t v53 = (uint64_t)v112;
          uint64_t v54 = v49 + v113;
          while (v52 < *(void *)(v49 + 16))
          {
            sub_1001A2590(v54, v53);
            uint64_t v55 = qword_1013778E0[*(char *)(v53 + *(int *)(v6 + 24))];
            if (v55 == 700 || v55 == 701)
            {
              uint64_t v56 = v6;
              sub_1001A26B0(v53, v114);
              if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
                sub_1000B77F0(0, v50[2] + 1, 1);
              }
              uint64_t v50 = (void *)v115[0];
              unint64_t v58 = *(void *)(v115[0] + 16);
              unint64_t v57 = *(void *)(v115[0] + 24);
              if (v58 >= v57 >> 1)
              {
                sub_1000B77F0(v57 > 1, v58 + 1, 1);
                uint64_t v50 = (void *)v115[0];
              }
              id v50[2] = v58 + 1;
              sub_1001A26B0(v114, (uint64_t)v50 + v113 + v58 * v36);
              uint64_t v6 = v56;
              uint64_t v53 = (uint64_t)v112;
            }
            else
            {
              sub_1001A2654(v53);
            }
            ++v52;
            v54 += v36;
            if (v51 == v52)
            {
              uint64_t v50 = (void *)v115[0];
              uint64_t v25 = v104;
              uint64_t v5 = v105;
              uint64_t v38 = v107;
              goto LABEL_27;
            }
          }
          __break(1u);
LABEL_59:
          swift_once();
LABEL_3:
          uint64_t v30 = type metadata accessor for Logger();
          sub_100010324(v30, (uint64_t)qword_10170E7C8);
          uint64_t v31 = Logger.logObject.getter();
          os_log_type_t v32 = static os_log_type_t.default.getter();
          if (os_log_type_enabled(v31, v32))
          {
            uint64_t v33 = (uint8_t *)swift_slowAlloc();
            *(_WORD *)uint64_t v33 = 0;
            _os_log_impl((void *)&_mh_execute_header, v31, v32, "SeparationStateSyncService: This is the monitoring device, won't accept forwarded state.", v33, 2u);
            swift_slowDealloc();
          }

          return;
        }
LABEL_27:
        swift_release();
        uint64_t v40 = v110;
      }
      else
      {
        swift_bridgeObjectRelease();
        uint64_t v50 = _swiftEmptyArrayStorage;
      }
      swift_release();
      uint64_t v59 = v50[2];
      if (v59)
      {
        sub_1001A2590((uint64_t)v50 + v113, (uint64_t)v25);
        swift_bridgeObjectRetain();
        uint64_t v60 = v59 - 1;
        if (v60)
        {
          uint64_t v70 = (uint64_t)v50 + v91;
          do
          {
            sub_1001A2590(v70, (uint64_t)v22);
            if (static Date.< infix(_:_:)())
            {
              sub_1001A2654((uint64_t)v25);
              sub_1001A26B0((uint64_t)v22, (uint64_t)v25);
            }
            else
            {
              sub_1001A2654((uint64_t)v22);
            }
            v70 += v36;
            --v60;
          }
          while (v60);
        }
        swift_bridgeObjectRelease();
        sub_1001A26B0((uint64_t)v25, (uint64_t)v5);
        (*v98)(v5, 0, 1, v6);
        swift_bridgeObjectRelease();
        uint64_t v40 = v110;
      }
      else
      {
        (*v98)(v5, 1, 1, v6);
        swift_bridgeObjectRelease();
      }
      if ((*v99)(v5, 1, v6) == 1)
      {
        sub_10001DAB4((uint64_t)v5, (uint64_t *)&unk_101655530);
      }
      else
      {
        uint64_t v61 = (uint64_t)v92;
        sub_1001A26B0((uint64_t)v5, (uint64_t)v92);
        if (static Date.> infix(_:_:)())
        {
          uint64_t v62 = (uint64_t)v86;
          if (qword_101636EE0 != -1) {
            swift_once();
          }
          uint64_t v63 = type metadata accessor for Logger();
          sub_100010324(v63, (uint64_t)qword_10170E7C8);
          sub_1001A2590(v40, v62);
          uint64_t v64 = v40;
          uint64_t v65 = Logger.logObject.getter();
          os_log_type_t v66 = static os_log_type_t.default.getter();
          if (os_log_type_enabled(v65, v66))
          {
            uint64_t v67 = swift_slowAlloc();
            uint64_t v109 = (void *)swift_slowAlloc();
            v115[0] = (uint64_t)v109;
            *(_DWORD *)uint64_t v67 = v90;
            type metadata accessor for UUID();
            sub_10028B80C();
            uint64_t v68 = dispatch thunk of CustomStringConvertible.description.getter();
            *(void *)(v67 + 4) = sub_1008FA0F0(v68, v69, v115);
            swift_bridgeObjectRelease();
            sub_1001A2654(v62);
            _os_log_impl((void *)&_mh_execute_header, v65, v66, "SeparationStateSyncService: We already have a newer observation for %s, ignoring.", (uint8_t *)v67, 0xCu);
            swift_arrayDestroy();
            swift_slowDealloc();
            swift_slowDealloc();

            sub_1001A2654((uint64_t)v92);
            uint64_t v40 = v110;
            sub_1001A2654(v110);
            uint64_t v25 = v104;
          }
          else
          {

            sub_1001A2654(v62);
            sub_1001A2654((uint64_t)v92);
            sub_1001A2654(v64);
            uint64_t v25 = v104;
            uint64_t v40 = v64;
          }
          uint64_t v42 = v108;
          goto LABEL_10;
        }
        sub_1001A2654(v61);
      }
      uint64_t v71 = (uint64_t)v95;
      if (qword_101636EE0 != -1) {
        swift_once();
      }
      uint64_t v72 = type metadata accessor for Logger();
      sub_100010324(v72, (uint64_t)qword_10170E7C8);
      sub_1001A2590(v40, v71);
      int64_t v73 = Logger.logObject.getter();
      os_log_type_t v74 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v73, v74))
      {
        uint64_t v75 = swift_slowAlloc();
        v115[0] = swift_slowAlloc();
        *(_DWORD *)uint64_t v75 = v90;
        type metadata accessor for UUID();
        sub_10028B80C();
        uint64_t v76 = dispatch thunk of CustomStringConvertible.description.getter();
        *(void *)(v75 + 4) = sub_1008FA0F0(v76, v77, v115);
        swift_bridgeObjectRelease();
        sub_1001A2654(v71);
        _os_log_impl((void *)&_mh_execute_header, v73, v74, "SeparationStateSyncService: Received remote observation for %s", (uint8_t *)v75, 0xCu);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
      }
      else
      {
        sub_1001A2654(v71);
      }

      uint64_t v78 = (uint64_t)v96;
      uint64_t v79 = v111;
      uint64_t v80 = v97;
      sub_1001A2590(v110, v97);
      sub_1001A2590(v80, v78);
      uint64_t v81 = swift_allocObject();
      *(void *)(v81 + 16) = v79;
      sub_1001A26B0(v80, v81 + v94);
      swift_retain_n();
      uint64_t v82 = sub_100AB24F0();
      if (qword_1016371D8 != -1) {
        swift_once();
      }
      v115[0] = 0x7365547265646E75;
      v115[1] = 0xE900000000000074;
      SynchronousCache.cachedValue<A>(key:computeBlock:)();
      swift_bridgeObjectRelease();
      if (v116 == 1)
      {
        sub_10000588C(&qword_10163A778);
        uint64_t v83 = swift_allocObject();
        *(_OWORD *)(v83 + 16) = v88;
        sub_1001A2590(v78, v83 + v113);
        uint64_t v84 = type metadata accessor for Transaction();
        __chkstk_darwin(v84);
        uint64_t v38 = v107;
        v85[-4] = v106;
        v85[-3] = v83;
        v85[-2] = 0;
        v85[-1] = 0;
        static Transaction.named<A>(_:with:)();
        swift_release();
        swift_release();
        swift_release();
        swift_bridgeObjectRelease();
      }
      else
      {
        uint64_t v41 = type metadata accessor for Transaction();
        __chkstk_darwin(v41);
        v85[-4] = v82;
        v85[-3] = sub_100B7DDD4;
        v85[-2] = v81;
        uint64_t v38 = v107;
        static Transaction.named<A>(_:with:)();
        swift_release();
        swift_release();
        swift_release();
      }
      uint64_t v42 = v108;
      sub_1001A2654(v78);
      uint64_t v40 = v110;
      sub_1001A2654(v110);
      uint64_t v25 = v104;
LABEL_10:
      uint64_t v37 = v42 + 1;
      uint64_t v5 = v105;
      if (v37 == v102)
      {
        swift_bridgeObjectRelease();
        return;
      }
    }
  }
}

uint64_t sub_100B7CB60(uint64_t a1, uint64_t a2)
{
  sub_10000588C(&qword_10163A778);
  uint64_t v3 = *(void *)(type metadata accessor for BeaconObservation() - 8);
  unint64_t v4 = (*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  uint64_t v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_101342130;
  sub_1001A2590(a2, v5 + v4);
  type metadata accessor for Transaction();
  static Transaction.named<A>(_:with:)();
  return swift_bridgeObjectRelease();
}

uint64_t sub_100B7CC84()
{
  swift_release();
  swift_release();
  swift_release();
  sub_10001DAB4(v0 + 40, &qword_101659EB0);
  sub_10001DAB4(v0 + OBJC_IVAR____TtC12searchpartyd26SeparationStateSyncManager_observationStoreSubscription, &qword_101642638);

  return swift_deallocClassInstance();
}

uint64_t sub_100B7CD18()
{
  return type metadata accessor for SeparationStateSyncManager();
}

uint64_t type metadata accessor for SeparationStateSyncManager()
{
  uint64_t result = qword_101659D98;
  if (!qword_101659D98) {
    return swift_getSingletonMetadata();
  }
  return result;
}

void sub_100B7CD6C()
{
  sub_10036C7B8();
  if (v0 <= 0x3F) {
    swift_updateClassMetadata2();
  }
}

void sub_100B7CE18(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for BeaconObservation();
  uint64_t v3 = __chkstk_darwin(v2);
  uint64_t v5 = &v13[-((v4 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v6 = *(int *)(v3 + 24);
  if (qword_1013778E0[*(char *)(a1 + v6)] == 501)
  {
    sub_1001A2590(a1, (uint64_t)v5);
    sub_1001A2654((uint64_t)v5);
  }
  else
  {
    sub_1001A2590(a1, (uint64_t)v5);
    BOOL v7 = sub_1002738F8(v5[*(int *)(v2 + 24)], (uint64_t)&off_1015A27E8);
    sub_1001A2654((uint64_t)v5);
    if (!v7) {
      return;
    }
  }
  CurrentValueSubject.value.getter();
  if (v13[15] == 7)
  {
    uint64_t v8 = *(unsigned __int8 *)(a1 + v6);
    if (sub_1002738F8(v8, (uint64_t)&off_1015A2860))
    {
      sub_100B7D078(a1);
    }
    else if (sub_1002738F8(v8, (uint64_t)&off_1015A2888))
    {
      sub_100B7D468(a1);
    }
  }
  else
  {
    if (qword_101636EE0 != -1) {
      swift_once();
    }
    uint64_t v9 = type metadata accessor for Logger();
    sub_100010324(v9, (uint64_t)qword_10170E7C8);
    uint64_t v10 = Logger.logObject.getter();
    os_log_type_t v11 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v10, v11))
    {
      uint64_t v12 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v12 = 0;
      _os_log_impl((void *)&_mh_execute_header, v10, v11, "SeparationStateSyncService: Not a monitoring device, won't update separation state.", v12, 2u);
      swift_slowDealloc();
    }
  }
}

uint64_t sub_100B7D078(uint64_t a1)
{
  uint64_t v3 = type metadata accessor for BeaconObservation();
  uint64_t v4 = *(void *)(v3 - 8);
  uint64_t v5 = __chkstk_darwin(v3);
  BOOL v7 = (char *)v29 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = __chkstk_darwin(v5);
  uint64_t v10 = (char *)v29 - v9;
  uint64_t v11 = __chkstk_darwin(v8);
  uint64_t v13 = (char *)v29 - v12;
  BOOL v14 = sub_1002738F8(*(unsigned __int8 *)(a1 + *(int *)(v11 + 24)), (uint64_t)&off_1015A2838);
  sub_1001A2590(a1, (uint64_t)v13);
  if (v14)
  {
    uint64_t v15 = *(void *)(v1 + 24);
    char v16 = sub_100B7D850((uint64_t)v13);
    uint64_t result = sub_1001A2654((uint64_t)v13);
    if ((v16 & 1) == 0) {
      return result;
    }
    uint64_t v18 = type metadata accessor for UUID();
    (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v18 - 8) + 16))(v10, a1, v18);
    Date.addingTimeInterval(_:)();
    v10[*(int *)(v3 + 24)] = 42;
    if (qword_101636EE0 != -1) {
      swift_once();
    }
    uint64_t v19 = type metadata accessor for Logger();
    sub_100010324(v19, (uint64_t)qword_10170E7C8);
    sub_1001A2590(a1, (uint64_t)v7);
    uint64_t v20 = Logger.logObject.getter();
    os_log_type_t v21 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v20, v21))
    {
      uint64_t v22 = (uint8_t *)swift_slowAlloc();
      uint64_t v23 = swift_slowAlloc();
      uint64_t v30 = v15;
      uint64_t v32 = v23;
      *(_DWORD *)uint64_t v22 = 136315138;
      v29[1] = v22 + 4;
      sub_10028B80C();
      uint64_t v24 = dispatch thunk of CustomStringConvertible.description.getter();
      uint64_t v31 = sub_1008FA0F0(v24, v25, &v32);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      sub_1001A2654((uint64_t)v7);
      _os_log_impl((void *)&_mh_execute_header, v20, v21, "SeparationStateSyncService: Detected reunite event for %s.", v22, 0xCu);
      swift_arrayDestroy();
      uint64_t v15 = v30;
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      sub_1001A2654((uint64_t)v7);
    }

    sub_10000588C(&qword_10163A778);
    unint64_t v26 = (*(unsigned __int8 *)(v4 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
    uint64_t v27 = swift_allocObject();
    *(_OWORD *)(v27 + 16) = xmmword_101342130;
    sub_1001A2590((uint64_t)v10, v27 + v26);
    uint64_t v28 = type metadata accessor for Transaction();
    __chkstk_darwin(v28);
    v29[-4] = v15;
    v29[-3] = v27;
    v29[-2] = 0;
    v29[-1] = 0;
    static Transaction.named<A>(_:with:)();
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v10 = v13;
  }
  return sub_1001A2654((uint64_t)v10);
}

uint64_t sub_100B7D468(uint64_t a1)
{
  uint64_t v3 = type metadata accessor for BeaconObservation();
  __chkstk_darwin(v3 - 8);
  uint64_t v5 = (char *)&v14 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_101636EE0 != -1) {
    swift_once();
  }
  uint64_t v6 = type metadata accessor for Logger();
  uint64_t v7 = sub_100010324(v6, (uint64_t)qword_10170E7C8);
  sub_1001A2590(a1, (uint64_t)v5);
  uint64_t v8 = Logger.logObject.getter();
  os_log_type_t v9 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v8, v9))
  {
    uint64_t v15 = a1;
    uint64_t v16 = v7;
    uint64_t v10 = (uint8_t *)swift_slowAlloc();
    v18[0] = swift_slowAlloc();
    *(_DWORD *)uint64_t v10 = 136315138;
    type metadata accessor for UUID();
    sub_10028B80C();
    uint64_t v11 = dispatch thunk of CustomStringConvertible.description.getter();
    v17[0] = sub_1008FA0F0(v11, v12, v18);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    a1 = v15;
    swift_bridgeObjectRelease();
    sub_1001A2654((uint64_t)v5);
    _os_log_impl((void *)&_mh_execute_header, v8, v9, "SeparationStateSyncService: Forwarding Separation State Update for %s.", v10, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    sub_1001A2654((uint64_t)v5);
  }

  sub_100B7DC40(v1 + 40, (uint64_t)v18);
  if (!v18[3]) {
    return sub_10001DAB4((uint64_t)v18, &qword_101659EB0);
  }
  sub_10001D010((uint64_t)v18, (uint64_t)v17);
  sub_10001DAB4((uint64_t)v18, &qword_101659EB0);
  sub_10001CD44(v17, v17[3]);
  sub_1005104FC(a1);
  return _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)v17);
}

uint64_t sub_100B7D850(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for BeaconObservation();
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t v4 = __chkstk_darwin(v2);
  uint64_t v36 = (uint64_t)&v31 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v4);
  uint64_t v7 = (char *)&v31 - v6;
  uint64_t v8 = sub_10000588C((uint64_t *)&unk_101655530);
  __chkstk_darwin(v8 - 8);
  uint64_t v10 = (char *)&v31 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10000588C(&qword_101655540);
  OS_dispatch_queue.sync<A>(execute:)();
  unint64_t v12 = v37;
  if (!v37[2] || (unint64_t v13 = sub_1007240CC(a1), (v14 & 1) == 0))
  {
    swift_bridgeObjectRelease();
    uint64_t v19 = _swiftEmptyArrayStorage;
    goto LABEL_21;
  }
  uint64_t v15 = *(void *)(v12[7] + 8 * v13);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v16 = sub_1007100C0(v15);
  swift_bridgeObjectRelease();
  size_t v17 = sub_100B752E8((uint64_t)v16);
  uint64_t result = swift_release();
  uint64_t v19 = _swiftEmptyArrayStorage;
  uint64_t v37 = _swiftEmptyArrayStorage;
  uint64_t v20 = *(void *)(v17 + 16);
  if (!v20)
  {
LABEL_20:
    swift_release();
LABEL_21:
    sub_100E4D5E0((uint64_t)v19, (uint64_t)v10);
    swift_bridgeObjectRelease();
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v3 + 48))(v10, 1, v2) == 1)
    {
      sub_10001DAB4((uint64_t)v10, (uint64_t *)&unk_101655530);
      return 0;
    }
    else
    {
      int v30 = v10[*(int *)(v2 + 24)];
      sub_1001A2654((uint64_t)v10);
      return v30 == 41;
    }
  }
  uint64_t v32 = v11;
  uint64_t v33 = v10;
  unint64_t v21 = 0;
  uint64_t v34 = v20;
  uint64_t v35 = v3;
  while (v21 < *(void *)(v17 + 16))
  {
    unint64_t v22 = (*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
    uint64_t v23 = *(void *)(v3 + 72);
    uint64_t result = sub_1001A2590(v17 + v22 + v23 * v21, (uint64_t)v7);
    uint64_t v24 = qword_1013778E0[v7[*(int *)(v2 + 24)]];
    if (v24 != 700)
    {
      uint64_t v28 = &stru_100000020.cmd + 1;
      while (1)
      {
        uint64_t v29 = v28 - 31;
        if (__OFADD__(v28 - 32, 1)) {
          break;
        }
        if (qword_1013778E0[*((char *)&off_1015A2810 + v28)] == v24) {
          goto LABEL_8;
        }
        ++v28;
        if (v29 == 2)
        {
          uint64_t result = sub_1001A2654((uint64_t)v7);
          goto LABEL_5;
        }
      }
      __break(1u);
      break;
    }
LABEL_8:
    uint64_t v25 = v2;
    sub_1001A26B0((uint64_t)v7, v36);
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
      sub_1000B77F0(0, v19[2] + 1, 1);
    }
    uint64_t v19 = v37;
    unint64_t v27 = v37[2];
    unint64_t v26 = v37[3];
    if (v27 >= v26 >> 1)
    {
      sub_1000B77F0(v26 > 1, v27 + 1, 1);
      uint64_t v19 = v37;
    }
    v19[2] = v27 + 1;
    uint64_t result = sub_1001A26B0(v36, (uint64_t)v19 + v22 + v27 * v23);
    uint64_t v2 = v25;
    uint64_t v20 = v34;
    uint64_t v3 = v35;
LABEL_5:
    if (++v21 == v20)
    {
      uint64_t v19 = v37;
      uint64_t v11 = v32;
      uint64_t v10 = v33;
      goto LABEL_20;
    }
  }
  __break(1u);
  return result;
}

void sub_100B7DC1C(uint64_t a1)
{
}

uint64_t sub_100B7DC40(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_10000588C(&qword_101659EB0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_100B7DCA8()
{
  uint64_t v1 = (int *)(type metadata accessor for BeaconObservation() - 8);
  uint64_t v2 = *(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v3 = (v2 + 24) & ~v2;
  uint64_t v4 = v3 + *(void *)(*(void *)v1 + 64);
  uint64_t v5 = v2 | 7;
  swift_release();
  uint64_t v6 = v0 + v3;
  uint64_t v7 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v7 - 8) + 8))(v6, v7);
  uint64_t v8 = v6 + v1[7];
  uint64_t v9 = type metadata accessor for Date();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v9 - 8) + 8))(v8, v9);

  return _swift_deallocObject(v0, v4, v5);
}

uint64_t sub_100B7DDD4()
{
  uint64_t v1 = *(void *)(type metadata accessor for BeaconObservation() - 8);
  uint64_t v2 = *(void *)(v0 + 16);
  uint64_t v3 = v0 + ((*(unsigned __int8 *)(v1 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80));

  return sub_100B7CB60(v2, v3);
}

void *sub_100B7DE38(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = sub_10000588C((uint64_t *)&unk_101655530);
  __chkstk_darwin(v5 - 8);
  uint64_t v7 = (char *)v22 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v27 = type metadata accessor for BeaconObservation();
  uint64_t v8 = *(void *)(v27 - 8);
  uint64_t v9 = __chkstk_darwin(v27);
  uint64_t v26 = (uint64_t)v22 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9);
  uint64_t v25 = (uint64_t)v22 - v11;
  uint64_t v12 = *(void *)(a1 + 16);
  if (!v12) {
    return _swiftEmptyArrayStorage;
  }
  uint64_t v13 = *(void *)(type metadata accessor for OwnedBeaconRecord() - 8);
  uint64_t v14 = a1 + ((*(unsigned __int8 *)(v13 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v13 + 80));
  uint64_t v23 = v8;
  uint64_t v15 = (unsigned int (**)(char *, uint64_t, uint64_t))(v8 + 48);
  uint64_t v16 = *(void *)(v13 + 72);
  v22[1] = a1;
  swift_bridgeObjectRetain();
  size_t v17 = _swiftEmptyArrayStorage;
  uint64_t v24 = a2;
  do
  {
    sub_100B7BAE0(v14, a2, (uint64_t)v7);
    if (v2)
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      return v17;
    }
    if ((*v15)(v7, 1, v27) == 1)
    {
      sub_10001DAB4((uint64_t)v7, (uint64_t *)&unk_101655530);
    }
    else
    {
      uint64_t v18 = v25;
      sub_1001A26B0((uint64_t)v7, v25);
      sub_1001A26B0(v18, v26);
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
        size_t v17 = (void *)sub_100A70BDC(0, v17[2] + 1, 1, (unint64_t)v17);
      }
      unint64_t v20 = v17[2];
      unint64_t v19 = v17[3];
      if (v20 >= v19 >> 1) {
        size_t v17 = (void *)sub_100A70BDC(v19 > 1, v20 + 1, 1, (unint64_t)v17);
      }
      void v17[2] = v20 + 1;
      sub_1001A26B0(v26, (uint64_t)v17+ ((*(unsigned __int8 *)(v23 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v23 + 80))+ *(void *)(v23 + 72) * v20);
      a2 = v24;
    }
    v14 += v16;
    --v12;
  }
  while (v12);
  swift_bridgeObjectRelease();
  return v17;
}

uint64_t sub_100B7E124@<X0>(uint64_t a1@<X0>, uint64_t (*a2)(uint64_t, uint64_t)@<X1>, uint64_t a3@<X8>)
{
  uint64_t v36 = a3;
  uint64_t v40 = a2;
  uint64_t v4 = sub_10000588C(&qword_101661010);
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v39 = (uint64_t)&v36 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v46 = type metadata accessor for UUID();
  uint64_t v7 = *(void *)(v46 - 8);
  uint64_t v8 = __chkstk_darwin(v46);
  uint64_t v47 = (char *)&v36 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8);
  unint64_t v45 = (char *)&v36 - v10;
  uint64_t v11 = sub_10000588C(&qword_10163B8A0);
  __chkstk_darwin(v11 - 8);
  uint64_t v13 = (char *)&v36 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = *(void *)(a1 + 64);
  uint64_t v37 = a1 + 64;
  uint64_t v15 = 1 << *(unsigned char *)(a1 + 32);
  uint64_t v16 = -1;
  if (v15 < 64) {
    uint64_t v16 = ~(-1 << v15);
  }
  unint64_t v17 = v16 & v14;
  int64_t v38 = (unint64_t)(v15 + 63) >> 6;
  uint64_t v48 = v7;
  uint64_t v42 = v7 + 32;
  uint64_t v43 = v7 + 16;
  uint64_t v50 = (void (**)(char *, uint64_t, uint64_t, uint64_t))(v5 + 56);
  uint64_t v51 = a1;
  uint64_t v41 = (unsigned int (**)(char *, uint64_t, uint64_t))(v5 + 48);
  uint64_t result = swift_bridgeObjectRetain();
  int64_t v19 = 0;
  uint64_t v49 = v4;
  uint64_t v44 = v13;
  uint64_t v20 = v46;
  unint64_t v21 = v47;
  if (!v17) {
    goto LABEL_5;
  }
LABEL_4:
  uint64_t v52 = (v17 - 1) & v17;
  int64_t v53 = v19;
  for (unint64_t i = __clz(__rbit64(v17)) | (v19 << 6); ; unint64_t i = __clz(__rbit64(v24)) + (v25 << 6))
  {
    uint64_t v27 = v51;
    uint64_t v28 = v48;
    unint64_t v29 = *(void *)(v48 + 72) * i;
    int v30 = *(void (**)(char *, unint64_t, uint64_t))(v48 + 16);
    v30(v45, *(void *)(v51 + 48) + v29, v20);
    v30(v21, *(void *)(v27 + 56) + v29, v20);
    uint64_t v4 = v49;
    uint64_t v31 = &v44[*(int *)(v49 + 48)];
    uint64_t v32 = *(void (**)(void))(v28 + 32);
    uint64_t v13 = v44;
    v32();
    ((void (*)(char *, char *, uint64_t))v32)(v31, v21, v20);
    uint64_t v33 = *v50;
    (*v50)(v13, 0, 1, v4);
    if ((*v41)(v13, 1, v4) == 1) {
      goto LABEL_28;
    }
    uint64_t v34 = v39;
    sub_10001D608((uint64_t)v13, v39, &qword_101661010);
    if (v40(v34, v34 + *(int *)(v4 + 48)))
    {
      swift_release();
      uint64_t v35 = v36;
      sub_10001D608(v34, v36, &qword_101661010);
      return ((uint64_t (*)(uint64_t, void, uint64_t, uint64_t))v33)(v35, 0, 1, v4);
    }
    uint64_t result = sub_10001DAB4(v34, &qword_101661010);
    int64_t v19 = v53;
    unint64_t v17 = v52;
    if (v52) {
      goto LABEL_4;
    }
LABEL_5:
    int64_t v23 = v19 + 1;
    if (__OFADD__(v19, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v23 >= v38) {
      goto LABEL_27;
    }
    unint64_t v24 = *(void *)(v37 + 8 * v23);
    int64_t v25 = v19 + 1;
    if (!v24)
    {
      int64_t v25 = v19 + 2;
      if (v19 + 2 >= v38) {
        goto LABEL_27;
      }
      unint64_t v24 = *(void *)(v37 + 8 * v25);
      if (!v24)
      {
        int64_t v25 = v19 + 3;
        if (v19 + 3 >= v38) {
          goto LABEL_27;
        }
        unint64_t v24 = *(void *)(v37 + 8 * v25);
        if (!v24)
        {
          int64_t v25 = v19 + 4;
          if (v19 + 4 >= v38) {
            goto LABEL_27;
          }
          unint64_t v24 = *(void *)(v37 + 8 * v25);
          if (!v24) {
            break;
          }
        }
      }
    }
LABEL_20:
    uint64_t v52 = (v24 - 1) & v24;
    int64_t v53 = v25;
  }
  uint64_t v26 = v19 + 5;
  if (v19 + 5 >= v38)
  {
LABEL_27:
    uint64_t v33 = *v50;
    (*v50)(v13, 1, 1, v4);
LABEL_28:
    swift_release();
    return ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))v33)(v36, 1, 1, v4);
  }
  unint64_t v24 = *(void *)(v37 + 8 * v26);
  if (v24)
  {
    int64_t v25 = v19 + 5;
    goto LABEL_20;
  }
  while (1)
  {
    int64_t v25 = v26 + 1;
    if (__OFADD__(v26, 1)) {
      break;
    }
    if (v25 >= v38) {
      goto LABEL_27;
    }
    unint64_t v24 = *(void *)(v37 + 8 * v25);
    ++v26;
    if (v24) {
      goto LABEL_20;
    }
  }
LABEL_30:
  __break(1u);
  return result;
}

uint64_t sub_100B7E630@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v24 = a2;
  uint64_t v3 = sub_10000588C(&qword_10165F390);
  uint64_t v23 = *(void *)(v3 - 8);
  uint64_t v4 = __chkstk_darwin(v3);
  uint64_t v6 = (char *)&v23 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v4);
  uint64_t v8 = (char *)&v23 - v7;
  uint64_t v9 = *(void *)(a1 + 64);
  uint64_t v25 = a1 + 64;
  uint64_t v10 = 1 << *(unsigned char *)(a1 + 32);
  uint64_t v11 = -1;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  unint64_t v12 = v11 & v9;
  int64_t v26 = (unint64_t)(v10 + 63) >> 6;
  uint64_t result = swift_bridgeObjectRetain();
  int64_t v14 = 0;
  if (!v12) {
    goto LABEL_5;
  }
LABEL_4:
  unint64_t v15 = __clz(__rbit64(v12));
  v12 &= v12 - 1;
  for (unint64_t i = v15 | (v14 << 6); ; unint64_t i = __clz(__rbit64(v18)) + (v14 << 6))
  {
    uint64_t v20 = *(void *)(a1 + 48);
    uint64_t v21 = type metadata accessor for UUID();
    (*(void (**)(char *, unint64_t, uint64_t))(*(void *)(v21 - 8) + 16))(v8, v20 + *(void *)(*(void *)(v21 - 8) + 72) * i, v21);
    v8[*(int *)(v3 + 48)] = *(unsigned char *)(*(void *)(a1 + 56) + i);
    sub_10001D608((uint64_t)v8, (uint64_t)v6, &qword_10165F390);
    if (v6[*(int *)(v3 + 48)] == 2)
    {
      swift_release();
      uint64_t v22 = v24;
      sub_10001D608((uint64_t)v6, v24, &qword_10165F390);
      return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(v23 + 56))(v22, 0, 1, v3);
    }
    uint64_t result = sub_10001DAB4((uint64_t)v6, &qword_10165F390);
    if (v12) {
      goto LABEL_4;
    }
LABEL_5:
    int64_t v17 = v14 + 1;
    if (__OFADD__(v14, 1))
    {
      __break(1u);
      goto LABEL_27;
    }
    if (v17 >= v26) {
      goto LABEL_25;
    }
    unint64_t v18 = *(void *)(v25 + 8 * v17);
    ++v14;
    if (!v18)
    {
      int64_t v14 = v17 + 1;
      if (v17 + 1 >= v26) {
        goto LABEL_25;
      }
      unint64_t v18 = *(void *)(v25 + 8 * v14);
      if (!v18)
      {
        int64_t v14 = v17 + 2;
        if (v17 + 2 >= v26) {
          goto LABEL_25;
        }
        unint64_t v18 = *(void *)(v25 + 8 * v14);
        if (!v18)
        {
          int64_t v14 = v17 + 3;
          if (v17 + 3 >= v26) {
            goto LABEL_25;
          }
          unint64_t v18 = *(void *)(v25 + 8 * v14);
          if (!v18) {
            break;
          }
        }
      }
    }
LABEL_20:
    unint64_t v12 = (v18 - 1) & v18;
  }
  int64_t v19 = v17 + 4;
  if (v19 >= v26)
  {
LABEL_25:
    swift_release();
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v23 + 56))(v24, 1, 1, v3);
  }
  unint64_t v18 = *(void *)(v25 + 8 * v19);
  if (v18)
  {
    int64_t v14 = v19;
    goto LABEL_20;
  }
  while (1)
  {
    int64_t v14 = v19 + 1;
    if (__OFADD__(v19, 1)) {
      break;
    }
    if (v14 >= v26) {
      goto LABEL_25;
    }
    unint64_t v18 = *(void *)(v25 + 8 * v14);
    ++v19;
    if (v18) {
      goto LABEL_20;
    }
  }
LABEL_27:
  __break(1u);
  return result;
}

uint64_t sub_100B7E940()
{
  uint64_t v0 = type metadata accessor for Logger();
  sub_10001E384(v0, qword_10170EA60);
  sub_100010324(v0, (uint64_t)qword_10170EA60);
  return Logger.init(subsystem:category:)();
}

uint64_t sub_100B7E9C4(uint64_t a1)
{
  *(void *)(v2 + 200) = a1;
  *(void *)(v2 + 208) = v1;
  return _swift_task_switch(sub_100B7E9E4, v1, 0);
}

uint64_t sub_100B7E9E4()
{
  sub_10001D074(*(void *)(v0 + 208) + 144, v0 + 56, &qword_10165A1E8);
  if (*(void *)(v0 + 80))
  {
    uint64_t v1 = *(void *)(v0 + 200);
    sub_10001CEB0((long long *)(v0 + 56), v0 + 16);
    sub_10001CEB0((long long *)(v0 + 16), v1);
    uint64_t v2 = *(uint64_t (**)(void))(v0 + 8);
    return v2();
  }
  else
  {
    sub_10001DAB4(v0 + 56, &qword_10165A1E8);
    uint64_t v4 = qword_1016375E8;
    swift_retain();
    if (v4 != -1) {
      swift_once();
    }
    swift_beginAccess();
    uint64_t result = sub_10001D074((uint64_t)&xmmword_10166E8F0, v0 + 136, (uint64_t *)&unk_101638D30);
    if (*(void *)(v0 + 160))
    {
      sub_10001CEB0((long long *)(v0 + 136), v0 + 96);
      swift_release();
      sub_10001CD44((void *)(v0 + 96), *(void *)(v0 + 120));
      uint64_t v6 = (uint64_t (*)(void))((char *)&dword_1016390A8 + dword_1016390A8);
      uint64_t v5 = (void *)swift_task_alloc();
      *(void *)(v0 + 216) = v5;
      *uint64_t v5 = v0;
      v5[1] = sub_100B7EBCC;
      return v6();
    }
    else
    {
      __break(1u);
    }
  }
  return result;
}

uint64_t sub_100B7EBCC(uint64_t a1)
{
  uint64_t v2 = *(void *)(*(void *)v1 + 208);
  *(void *)(*(void *)v1 + 224) = a1;
  swift_task_dealloc();
  return _swift_task_switch(sub_100B7ECE4, v2, 0);
}

uint64_t sub_100B7ECE4()
{
  uint64_t v1 = (uint64_t)(v0 + 12);
  uint64_t v2 = v0[28];
  if (v2)
  {
    uint64_t v3 = (void *)v0[25];
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v1);
    v3[3] = type metadata accessor for FamilyCircleService();
    v3[4] = &off_1015F13C8;
    *uint64_t v3 = v2;
    uint64_t v4 = (uint64_t (*)(void))v0[1];
  }
  else
  {
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v1);
    if (qword_101636FA0 != -1) {
      swift_once();
    }
    uint64_t v5 = type metadata accessor for Logger();
    sub_100010324(v5, (uint64_t)qword_10170EA60);
    uint64_t v6 = Logger.logObject.getter();
    os_log_type_t v7 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v6, v7))
    {
      uint64_t v8 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v8 = 0;
      _os_log_impl((void *)&_mh_execute_header, v6, v7, "No FamilyCircleService available!", v8, 2u);
      swift_slowDealloc();
    }

    sub_10001CEC8();
    swift_allocError();
    void *v9 = 0xD000000000000013;
    v9[1] = 0x80000001013F6A00;
    swift_willThrow();
    uint64_t v4 = (uint64_t (*)(void))v0[1];
  }
  return v4();
}

uint64_t sub_100B7EE7C()
{
  *(void *)(v1 + 120) = v0;
  return _swift_task_switch(sub_100B7EE9C, v0, 0);
}

uint64_t sub_100B7EE9C()
{
  uint64_t v1 = *(void *)(v0 + 120);
  uint64_t v2 = *(void *)(v1 + 184);
  *(void *)(v0 + 128) = v2;
  if (v2)
  {
    uint64_t v3 = *(void *)(v1 + 192);
    uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t))(v0 + 8);
    uint64_t v4 = swift_unknownObjectRetain();
    return v8(v4, v3);
  }
  else
  {
    uint64_t v6 = qword_1016375E8;
    swift_retain();
    if (v6 != -1) {
      swift_once();
    }
    swift_beginAccess();
    uint64_t result = sub_10001D074((uint64_t)&xmmword_10166E8F0, v0 + 56, (uint64_t *)&unk_101638D30);
    if (*(void *)(v0 + 80))
    {
      sub_10001CEB0((long long *)(v0 + 56), v0 + 16);
      swift_release();
      sub_10001CD44((void *)(v0 + 16), *(void *)(v0 + 40));
      uint64_t v9 = (uint64_t (__cdecl *)())((char *)&dword_1016390F0 + dword_1016390F0);
      os_log_type_t v7 = (void *)swift_task_alloc();
      *(void *)(v0 + 136) = v7;
      *os_log_type_t v7 = v0;
      v7[1] = sub_100B7F048;
      return v9();
    }
    else
    {
      __break(1u);
    }
  }
  return result;
}

uint64_t sub_100B7F048(uint64_t a1)
{
  uint64_t v2 = *(void *)(*(void *)v1 + 120);
  *(void *)(*(void *)v1 + 144) = a1;
  swift_task_dealloc();
  return _swift_task_switch(sub_100B7F160, v2, 0);
}

uint64_t sub_100B7F160()
{
  uint64_t v1 = *(void *)(v0 + 144);
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v0 + 16);
  if (v1)
  {
    uint64_t v2 = *(void *)(v0 + 144);
    uint64_t v10 = *(uint64_t (**)(uint64_t, _UNKNOWN **))(v0 + 8);
    swift_unknownObjectRetain();
    return v10(v2, &off_1015FA0B8);
  }
  else
  {
    if (qword_101636FA0 != -1) {
      swift_once();
    }
    uint64_t v4 = type metadata accessor for Logger();
    sub_100010324(v4, (uint64_t)qword_10170EA60);
    uint64_t v5 = Logger.logObject.getter();
    os_log_type_t v6 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v5, v6))
    {
      os_log_type_t v7 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)os_log_type_t v7 = 0;
      _os_log_impl((void *)&_mh_execute_header, v5, v6, "No PeerTrustService available!", v7, 2u);
      swift_slowDealloc();
    }

    sub_10001CEC8();
    swift_allocError();
    *uint64_t v8 = 0xD000000000000010;
    v8[1] = 0x80000001013F89D0;
    swift_willThrow();
    uint64_t v9 = *(uint64_t (**)(void))(v0 + 8);
    return v9();
  }
}

uint64_t sub_100B7F320(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2;
  uint64_t v6 = sub_10000588C(&qword_1016578F0);
  uint64_t v7 = v6 - 8;
  uint64_t v8 = __chkstk_darwin(v6);
  uint64_t v10 = &v17[-((v9 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __chkstk_darwin(v8);
  unint64_t v12 = &v17[-v11];
  uint64_t v13 = &v17[*(int *)(v7 + 56) - v11];
  sub_10001D074(a1, (uint64_t)&v17[-v11], (uint64_t *)&unk_10163B7C0);
  sub_100B95ED4(a2, (uint64_t)v13, (uint64_t (*)(void))type metadata accessor for MemberSharingCircle);
  uint64_t v14 = (uint64_t)&v10[*(int *)(v7 + 56)];
  sub_10001D074((uint64_t)v12, (uint64_t)v10, (uint64_t *)&unk_10163B7C0);
  sub_100B95ED4((uint64_t)v13, v14, (uint64_t (*)(void))type metadata accessor for MemberSharingCircle);
  unint64_t v18 = v10;
  swift_beginAccess();
  uint64_t result = sub_100B9553C((uint64_t (*)(unint64_t))sub_100B96070, (uint64_t)v17, &qword_1016578F0, (uint64_t (*)(uint64_t))sub_100BBD3F8);
  uint64_t v16 = *(void *)(*(void *)(v3 + 208) + 16);
  if (v16 < result)
  {
    __break(1u);
  }
  else
  {
    sub_100A30198(result, v16);
    swift_endAccess();
    sub_10001DAB4((uint64_t)v12, &qword_1016578F0);
    return sub_10001DAB4((uint64_t)v10, &qword_1016578F0);
  }
  return result;
}

uint64_t sub_100B7F4E0(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_10000588C(&qword_1016578F0);
  uint64_t v5 = v4 - 8;
  uint64_t v6 = __chkstk_darwin(v4);
  uint64_t v8 = (char *)v18 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  uint64_t v10 = (char *)v18 - v9;
  uint64_t v11 = *(int *)(v5 + 56);
  unint64_t v12 = (char *)v18 + v11 - v9;
  uint64_t v13 = a1 + v11;
  sub_10001D074(a1, (uint64_t)v18 - v9, (uint64_t *)&unk_10163B7C0);
  sub_100B95ED4(v13, (uint64_t)v12, (uint64_t (*)(void))type metadata accessor for MemberSharingCircle);
  uint64_t v14 = *(int *)(v5 + 56);
  uint64_t v15 = (uint64_t)&v8[v14];
  uint64_t v16 = a2 + v14;
  sub_10001D074(a2, (uint64_t)v8, (uint64_t *)&unk_10163B7C0);
  sub_100B95ED4(v16, v15, (uint64_t (*)(void))type metadata accessor for MemberSharingCircle);
  LOBYTE(a2) = sub_100B7F670((uint64_t)v10, (uint64_t)v12, (uint64_t)v8, v15);
  sub_100B95DC0(v15, (uint64_t (*)(void))type metadata accessor for MemberSharingCircle);
  sub_10001DAB4((uint64_t)v8, (uint64_t *)&unk_10163B7C0);
  sub_100B95DC0((uint64_t)v12, (uint64_t (*)(void))type metadata accessor for MemberSharingCircle);
  sub_10001DAB4((uint64_t)v10, (uint64_t *)&unk_10163B7C0);
  return a2 & 1;
}

BOOL sub_100B7F670(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v32 = a3;
  uint64_t v33 = a4;
  uint64_t v31 = (char *)a2;
  uint64_t v5 = type metadata accessor for MemberSharingCircle();
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v30 = (uint64_t)&v30 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = sub_10000588C((uint64_t *)&unk_10163B7C0);
  __chkstk_darwin(v8 - 8);
  uint64_t v10 = (char *)&v30 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = sub_10000588C(&qword_10165A148);
  uint64_t v12 = v11 - 8;
  __chkstk_darwin(v11);
  uint64_t v14 = (char *)&v30 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = sub_10000588C(&qword_10165A1E0);
  uint64_t v16 = v15 - 8;
  uint64_t v17 = __chkstk_darwin(v15);
  int64_t v19 = (char *)&v30 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v17);
  uint64_t v21 = (char *)&v30 - v20;
  sub_10001D074(a1, (uint64_t)&v30 - v20, (uint64_t *)&unk_10163B7C0);
  uint64_t v22 = (uint64_t)v31;
  uint64_t v31 = &v21[*(int *)(v16 + 56)];
  sub_100B95ED4(v22, (uint64_t)v31, (uint64_t (*)(void))type metadata accessor for MemberSharingCircle);
  sub_10001D074(v32, (uint64_t)v19, (uint64_t *)&unk_10163B7C0);
  uint64_t v23 = (uint64_t)&v19[*(int *)(v16 + 56)];
  sub_100B95ED4(v33, v23, (uint64_t (*)(void))type metadata accessor for MemberSharingCircle);
  uint64_t v24 = (uint64_t)&v14[*(int *)(v12 + 56)];
  sub_10001D074((uint64_t)v21, (uint64_t)v14, (uint64_t *)&unk_10163B7C0);
  sub_10001D074((uint64_t)v19, v24, (uint64_t *)&unk_10163B7C0);
  uint64_t v25 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v6 + 48);
  if (v25((uint64_t)v14, 1, v5) != 1)
  {
    sub_10001D074((uint64_t)v14, (uint64_t)v10, (uint64_t *)&unk_10163B7C0);
    if (v25(v24, 1, v5) != 1)
    {
      uint64_t v26 = v30;
      sub_100B95FE8(v24, v30, (uint64_t (*)(void))type metadata accessor for MemberSharingCircle);
      BOOL v27 = sub_1002C51D4((uint64_t)v10, v26);
      sub_100B95DC0(v26, (uint64_t (*)(void))type metadata accessor for MemberSharingCircle);
      sub_100B95DC0((uint64_t)v10, (uint64_t (*)(void))type metadata accessor for MemberSharingCircle);
      sub_10001DAB4((uint64_t)v14, (uint64_t *)&unk_10163B7C0);
      if (v27) {
        goto LABEL_8;
      }
LABEL_9:
      BOOL v28 = 0;
      goto LABEL_10;
    }
    sub_100B95DC0((uint64_t)v10, (uint64_t (*)(void))type metadata accessor for MemberSharingCircle);
LABEL_6:
    sub_10001DAB4((uint64_t)v14, &qword_10165A148);
    goto LABEL_9;
  }
  if (v25(v24, 1, v5) != 1) {
    goto LABEL_6;
  }
  sub_10001DAB4((uint64_t)v14, (uint64_t *)&unk_10163B7C0);
LABEL_8:
  BOOL v28 = sub_1002C51D4((uint64_t)v31, v23);
LABEL_10:
  sub_10001DAB4((uint64_t)v19, &qword_10165A1E0);
  sub_10001DAB4((uint64_t)v21, &qword_10165A1E0);
  return v28;
}

BOOL sub_100B7FA38(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v32 = a3;
  uint64_t v33 = a4;
  uint64_t v31 = (char *)a2;
  uint64_t v5 = type metadata accessor for SharedBeaconRecord(0);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v30 = (uint64_t)&v30 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = sub_10000588C((uint64_t *)&unk_101653D50);
  __chkstk_darwin(v8 - 8);
  uint64_t v10 = (char *)&v30 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = sub_10000588C(&qword_10165A1D0);
  uint64_t v12 = v11 - 8;
  __chkstk_darwin(v11);
  uint64_t v14 = (char *)&v30 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = sub_10000588C(&qword_10165A1D8);
  uint64_t v16 = v15 - 8;
  uint64_t v17 = __chkstk_darwin(v15);
  int64_t v19 = (char *)&v30 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v17);
  uint64_t v21 = (char *)&v30 - v20;
  sub_10001D074(a1, (uint64_t)&v30 - v20, (uint64_t *)&unk_101653D50);
  uint64_t v22 = (uint64_t)v31;
  uint64_t v31 = &v21[*(int *)(v16 + 56)];
  sub_100B95ED4(v22, (uint64_t)v31, type metadata accessor for SharedBeaconRecord);
  sub_10001D074(v32, (uint64_t)v19, (uint64_t *)&unk_101653D50);
  uint64_t v23 = (uint64_t)&v19[*(int *)(v16 + 56)];
  sub_100B95ED4(v33, v23, type metadata accessor for SharedBeaconRecord);
  uint64_t v24 = (uint64_t)&v14[*(int *)(v12 + 56)];
  sub_10001D074((uint64_t)v21, (uint64_t)v14, (uint64_t *)&unk_101653D50);
  sub_10001D074((uint64_t)v19, v24, (uint64_t *)&unk_101653D50);
  uint64_t v25 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v6 + 48);
  if (v25((uint64_t)v14, 1, v5) != 1)
  {
    sub_10001D074((uint64_t)v14, (uint64_t)v10, (uint64_t *)&unk_101653D50);
    if (v25(v24, 1, v5) != 1)
    {
      uint64_t v26 = v30;
      sub_100B95FE8(v24, v30, type metadata accessor for SharedBeaconRecord);
      BOOL v27 = sub_101212AE0((uint64_t)v10, v26);
      sub_100B95DC0(v26, type metadata accessor for SharedBeaconRecord);
      sub_100B95DC0((uint64_t)v10, type metadata accessor for SharedBeaconRecord);
      sub_10001DAB4((uint64_t)v14, (uint64_t *)&unk_101653D50);
      if (v27) {
        goto LABEL_8;
      }
LABEL_9:
      BOOL v28 = 0;
      goto LABEL_10;
    }
    sub_100B95DC0((uint64_t)v10, type metadata accessor for SharedBeaconRecord);
LABEL_6:
    sub_10001DAB4((uint64_t)v14, &qword_10165A1D0);
    goto LABEL_9;
  }
  if (v25(v24, 1, v5) != 1) {
    goto LABEL_6;
  }
  sub_10001DAB4((uint64_t)v14, (uint64_t *)&unk_101653D50);
LABEL_8:
  BOOL v28 = sub_101212AE0((uint64_t)v31, v23);
LABEL_10:
  sub_10001DAB4((uint64_t)v19, &qword_10165A1D8);
  sub_10001DAB4((uint64_t)v21, &qword_10165A1D8);
  return v28;
}

BOOL sub_100B7FE00(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v32 = a3;
  uint64_t v33 = a4;
  uint64_t v31 = (char *)a2;
  uint64_t v5 = type metadata accessor for OwnerSharingCircle();
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v30 = (uint64_t)&v30 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = sub_10000588C((uint64_t *)&unk_101638D10);
  __chkstk_darwin(v8 - 8);
  uint64_t v10 = (char *)&v30 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = sub_10000588C(&qword_10165A1C0);
  uint64_t v12 = v11 - 8;
  __chkstk_darwin(v11);
  uint64_t v14 = (char *)&v30 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = sub_10000588C(&qword_10165A1C8);
  uint64_t v16 = v15 - 8;
  uint64_t v17 = __chkstk_darwin(v15);
  int64_t v19 = (char *)&v30 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v17);
  uint64_t v21 = (char *)&v30 - v20;
  sub_10001D074(a1, (uint64_t)&v30 - v20, (uint64_t *)&unk_101638D10);
  uint64_t v22 = (uint64_t)v31;
  uint64_t v31 = &v21[*(int *)(v16 + 56)];
  sub_100B95ED4(v22, (uint64_t)v31, (uint64_t (*)(void))type metadata accessor for OwnerSharingCircle);
  sub_10001D074(v32, (uint64_t)v19, (uint64_t *)&unk_101638D10);
  uint64_t v23 = (uint64_t)&v19[*(int *)(v16 + 56)];
  sub_100B95ED4(v33, v23, (uint64_t (*)(void))type metadata accessor for OwnerSharingCircle);
  uint64_t v24 = (uint64_t)&v14[*(int *)(v12 + 56)];
  sub_10001D074((uint64_t)v21, (uint64_t)v14, (uint64_t *)&unk_101638D10);
  sub_10001D074((uint64_t)v19, v24, (uint64_t *)&unk_101638D10);
  uint64_t v25 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v6 + 48);
  if (v25((uint64_t)v14, 1, v5) != 1)
  {
    sub_10001D074((uint64_t)v14, (uint64_t)v10, (uint64_t *)&unk_101638D10);
    if (v25(v24, 1, v5) != 1)
    {
      uint64_t v26 = v30;
      sub_100B95FE8(v24, v30, (uint64_t (*)(void))type metadata accessor for OwnerSharingCircle);
      BOOL v27 = sub_100DF98B0((uint64_t)v10, v26);
      sub_100B95DC0(v26, (uint64_t (*)(void))type metadata accessor for OwnerSharingCircle);
      sub_100B95DC0((uint64_t)v10, (uint64_t (*)(void))type metadata accessor for OwnerSharingCircle);
      sub_10001DAB4((uint64_t)v14, (uint64_t *)&unk_101638D10);
      if (v27) {
        goto LABEL_8;
      }
LABEL_9:
      BOOL v28 = 0;
      goto LABEL_10;
    }
    sub_100B95DC0((uint64_t)v10, (uint64_t (*)(void))type metadata accessor for OwnerSharingCircle);
LABEL_6:
    sub_10001DAB4((uint64_t)v14, &qword_10165A1C0);
    goto LABEL_9;
  }
  if (v25(v24, 1, v5) != 1) {
    goto LABEL_6;
  }
  sub_10001DAB4((uint64_t)v14, (uint64_t *)&unk_101638D10);
LABEL_8:
  BOOL v28 = sub_100DF98B0((uint64_t)v31, v23);
LABEL_10:
  sub_10001DAB4((uint64_t)v19, &qword_10165A1C8);
  sub_10001DAB4((uint64_t)v21, &qword_10165A1C8);
  return v28;
}

uint64_t sub_100B801C8(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2;
  uint64_t v6 = sub_10000588C(&qword_1016578D0);
  uint64_t v7 = v6 - 8;
  uint64_t v8 = __chkstk_darwin(v6);
  uint64_t v10 = &v17[-((v9 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __chkstk_darwin(v8);
  uint64_t v12 = &v17[-v11];
  uint64_t v13 = &v17[*(int *)(v7 + 56) - v11];
  sub_10001D074(a1, (uint64_t)&v17[-v11], (uint64_t *)&unk_101653D50);
  sub_100B95ED4(a2, (uint64_t)v13, type metadata accessor for SharedBeaconRecord);
  uint64_t v14 = (uint64_t)&v10[*(int *)(v7 + 56)];
  sub_10001D074((uint64_t)v12, (uint64_t)v10, (uint64_t *)&unk_101653D50);
  sub_100B95ED4((uint64_t)v13, v14, type metadata accessor for SharedBeaconRecord);
  uint64_t v18 = v10;
  swift_beginAccess();
  uint64_t result = sub_100B9553C((uint64_t (*)(unint64_t))sub_100B96050, (uint64_t)v17, &qword_1016578D0, (uint64_t (*)(uint64_t))sub_100BBD40C);
  uint64_t v16 = *(void *)(*(void *)(v3 + 216) + 16);
  if (v16 < result)
  {
    __break(1u);
  }
  else
  {
    sub_100A301B8(result, v16);
    swift_endAccess();
    sub_10001DAB4((uint64_t)v12, &qword_1016578D0);
    return sub_10001DAB4((uint64_t)v10, &qword_1016578D0);
  }
  return result;
}

uint64_t sub_100B80388(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_10000588C(&qword_1016578D0);
  uint64_t v5 = v4 - 8;
  uint64_t v6 = __chkstk_darwin(v4);
  uint64_t v8 = (char *)v18 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  uint64_t v10 = (char *)v18 - v9;
  uint64_t v11 = *(int *)(v5 + 56);
  uint64_t v12 = (char *)v18 + v11 - v9;
  uint64_t v13 = a1 + v11;
  sub_10001D074(a1, (uint64_t)v18 - v9, (uint64_t *)&unk_101653D50);
  sub_100B95ED4(v13, (uint64_t)v12, type metadata accessor for SharedBeaconRecord);
  uint64_t v14 = *(int *)(v5 + 56);
  uint64_t v15 = (uint64_t)&v8[v14];
  uint64_t v16 = a2 + v14;
  sub_10001D074(a2, (uint64_t)v8, (uint64_t *)&unk_101653D50);
  sub_100B95ED4(v16, v15, type metadata accessor for SharedBeaconRecord);
  LOBYTE(a2) = sub_100B7FA38((uint64_t)v10, (uint64_t)v12, (uint64_t)v8, v15);
  sub_100B95DC0(v15, type metadata accessor for SharedBeaconRecord);
  sub_10001DAB4((uint64_t)v8, (uint64_t *)&unk_101653D50);
  sub_100B95DC0((uint64_t)v12, type metadata accessor for SharedBeaconRecord);
  sub_10001DAB4((uint64_t)v10, (uint64_t *)&unk_101653D50);
  return a2 & 1;
}

uint64_t sub_100B80518(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2;
  uint64_t v6 = sub_10000588C(&qword_1016578E0);
  uint64_t v7 = v6 - 8;
  uint64_t v8 = __chkstk_darwin(v6);
  uint64_t v10 = &v17[-((v9 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __chkstk_darwin(v8);
  uint64_t v12 = &v17[-v11];
  uint64_t v13 = &v17[*(int *)(v7 + 56) - v11];
  sub_10001D074(a1, (uint64_t)&v17[-v11], (uint64_t *)&unk_101638D10);
  sub_100B95ED4(a2, (uint64_t)v13, (uint64_t (*)(void))type metadata accessor for OwnerSharingCircle);
  uint64_t v14 = (uint64_t)&v10[*(int *)(v7 + 56)];
  sub_10001D074((uint64_t)v12, (uint64_t)v10, (uint64_t *)&unk_101638D10);
  sub_100B95ED4((uint64_t)v13, v14, (uint64_t (*)(void))type metadata accessor for OwnerSharingCircle);
  uint64_t v18 = v10;
  swift_beginAccess();
  uint64_t result = sub_100B9553C((uint64_t (*)(unint64_t))sub_100B95FC8, (uint64_t)v17, &qword_1016578E0, (uint64_t (*)(uint64_t))sub_100BBD420);
  uint64_t v16 = *(void *)(*(void *)(v3 + 224) + 16);
  if (v16 < result)
  {
    __break(1u);
  }
  else
  {
    sub_100A301D8(result, v16);
    swift_endAccess();
    sub_10001DAB4((uint64_t)v12, &qword_1016578E0);
    return sub_10001DAB4((uint64_t)v10, &qword_1016578E0);
  }
  return result;
}

uint64_t sub_100B806D8(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_10000588C(&qword_1016578E0);
  uint64_t v5 = v4 - 8;
  uint64_t v6 = __chkstk_darwin(v4);
  uint64_t v8 = (char *)v18 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  uint64_t v10 = (char *)v18 - v9;
  uint64_t v11 = *(int *)(v5 + 56);
  uint64_t v12 = (char *)v18 + v11 - v9;
  uint64_t v13 = a1 + v11;
  sub_10001D074(a1, (uint64_t)v18 - v9, (uint64_t *)&unk_101638D10);
  sub_100B95ED4(v13, (uint64_t)v12, (uint64_t (*)(void))type metadata accessor for OwnerSharingCircle);
  uint64_t v14 = *(int *)(v5 + 56);
  uint64_t v15 = (uint64_t)&v8[v14];
  uint64_t v16 = a2 + v14;
  sub_10001D074(a2, (uint64_t)v8, (uint64_t *)&unk_101638D10);
  sub_100B95ED4(v16, v15, (uint64_t (*)(void))type metadata accessor for OwnerSharingCircle);
  LOBYTE(a2) = sub_100B7FE00((uint64_t)v10, (uint64_t)v12, (uint64_t)v8, v15);
  sub_100B95DC0(v15, (uint64_t (*)(void))type metadata accessor for OwnerSharingCircle);
  sub_10001DAB4((uint64_t)v8, (uint64_t *)&unk_101638D10);
  sub_100B95DC0((uint64_t)v12, (uint64_t (*)(void))type metadata accessor for OwnerSharingCircle);
  sub_10001DAB4((uint64_t)v10, (uint64_t *)&unk_101638D10);
  return a2 & 1;
}

uint64_t sub_100B80868(uint64_t a1)
{
  *(void *)(v2 + 120) = a1;
  *(void *)(v2 + 128) = v1;
  uint64_t v4 = type metadata accessor for SharedBeaconRecord(0);
  *(void *)(v2 + 136) = v4;
  *(void *)(v2 + 144) = *(void *)(v4 - 8);
  *(void *)(v2 + 152) = swift_task_alloc();
  *(void *)(v2 + 160) = swift_task_alloc();
  *(void *)(v2 + 168) = swift_task_alloc();
  *(void *)(v2 + 176) = swift_task_alloc();
  uint64_t v5 = type metadata accessor for MemberPeerTrust();
  *(void *)(v2 + 184) = v5;
  *(void *)(v2 + 192) = *(void *)(v5 - 8);
  *(void *)(v2 + 200) = swift_task_alloc();
  *(void *)(v2 + 208) = swift_task_alloc();
  *(void *)(v2 + 216) = swift_task_alloc();
  *(void *)(v2 + 224) = sub_10000588C((uint64_t *)&unk_10163B890);
  *(void *)(v2 + 232) = swift_task_alloc();
  *(void *)(v2 + 240) = swift_task_alloc();
  *(void *)(v2 + 248) = swift_task_alloc();
  uint64_t v6 = type metadata accessor for UUID();
  *(void *)(v2 + 256) = v6;
  uint64_t v7 = *(void *)(v6 - 8);
  *(void *)(v2 + 264) = v7;
  *(void *)(v2 + 272) = *(void *)(v7 + 64);
  *(void *)(v2 + 280) = swift_task_alloc();
  *(void *)(v2 + 288) = sub_10000588C((uint64_t *)&unk_101653D50);
  *(void *)(v2 + 296) = swift_task_alloc();
  *(void *)(v2 + 304) = swift_task_alloc();
  *(void *)(v2 + 312) = swift_task_alloc();
  uint64_t v8 = type metadata accessor for MemberSharingCircle();
  *(void *)(v2 + 320) = v8;
  uint64_t v9 = *(int *)(v8 + 24);
  *(_DWORD *)(v2 + 484) = v9;
  uint64_t v10 = a1 + v9;
  uint64_t v11 = (void *)swift_task_alloc();
  *(void *)(v2 + 328) = v11;
  *uint64_t v11 = v2;
  v11[1] = sub_100B80B20;
  return sub_100B945DC(v10);
}

uint64_t sub_100B80B20(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = (void *)*v2;
  uint64_t v4 = (void *)*v2;
  v4[7] = v2;
  v4[8] = a1;
  v4[9] = a2;
  uint64_t v5 = v3[16];
  v4[42] = a2;
  swift_task_dealloc();
  return _swift_task_switch(sub_100B80C3C, v5, 0);
}

uint64_t sub_100B80C3C()
{
  uint64_t v1 = *(void *)(*(void *)(v0 + 128) + 136);
  *(void *)(v0 + 344) = v1;
  return _swift_task_switch(sub_100B80C60, v1, 0);
}

uint64_t sub_100B80C60()
{
  uint64_t v1 = *(void *)(v0 + 344);
  uint64_t v2 = *(void *)(v0 + 280);
  uint64_t v3 = *(void *)(v0 + 256);
  uint64_t v4 = *(void *)(v0 + 264);
  uint64_t v5 = *(void *)(v0 + 120) + *(int *)(v0 + 484);
  *(void *)(v0 + 352) = *(void *)(v1 + 136);
  uint64_t v6 = *(void (**)(uint64_t, uint64_t, uint64_t))(v4 + 16);
  *(void *)(v0 + 360) = v6;
  *(void *)(v0 + 368) = (v4 + 16) & 0xFFFFFFFFFFFFLL | 0xE3BA000000000000;
  v6(v2, v5, v3);
  int v7 = *(_DWORD *)(v4 + 80);
  *(_DWORD *)(v0 + 488) = v7;
  unint64_t v8 = (v7 + 24) & ~(unint64_t)v7;
  uint64_t v9 = swift_allocObject();
  *(void *)(v0 + 376) = v9;
  *(void *)(v9 + 16) = v1;
  uint64_t v10 = *(void (**)(unint64_t, uint64_t, uint64_t))(v4 + 32);
  *(void *)(v0 + 384) = v10;
  *(void *)(v0 + 392) = (v4 + 32) & 0xFFFFFFFFFFFFLL | 0x48D8000000000000;
  v10(v9 + v8, v2, v3);
  swift_retain();
  return _swift_task_switch(sub_100B80D7C, 0, 0);
}

uint64_t sub_100B80D7C()
{
  uint64_t v1 = v0[47];
  uint64_t v2 = v0[44];
  uint64_t v3 = (void *)swift_task_alloc();
  v0[50] = v3;
  v3[2] = v2;
  v3[3] = sub_100B959D0;
  v3[4] = v1;
  uint64_t v4 = (void *)swift_task_alloc();
  v0[51] = v4;
  *uint64_t v4 = v0;
  v4[1] = sub_100B80E88;
  uint64_t v5 = v0[39];
  uint64_t v6 = v0[36];
  return withCheckedContinuation<A>(isolation:function:_:)(v5, 0, 0, 0xD000000000000012, 0x80000001013F1870, sub_100091084, v3, v6);
}

uint64_t sub_100B80E88()
{
  uint64_t v1 = *v0;
  uint64_t v2 = *(void *)(*v0 + 344);
  uint64_t v3 = *(void *)(*v0 + 320);
  swift_task_dealloc();
  swift_release();
  swift_task_dealloc();
  *(_DWORD *)(v1 + 492) = *(_DWORD *)(v3 + 32);
  return _swift_task_switch(sub_100B80FFC, v2, 0);
}

uint64_t sub_100B80FFC()
{
  uint64_t v1 = *(void (**)(unint64_t, uint64_t, uint64_t))(v0 + 384);
  uint64_t v2 = *(void (**)(uint64_t, uint64_t, uint64_t))(v0 + 360);
  uint64_t v3 = *(void *)(v0 + 344);
  uint64_t v4 = *(void *)(v0 + 280);
  uint64_t v5 = *(void *)(v0 + 256);
  uint64_t v6 = *(void *)(v0 + 120) + *(int *)(v0 + 492);
  unint64_t v7 = (*(unsigned __int8 *)(v0 + 488) + 24) & ~(unint64_t)*(unsigned __int8 *)(v0 + 488);
  *(void *)(v0 + 416) = *(void *)(v3 + 136);
  v2(v4, v6, v5);
  uint64_t v8 = swift_allocObject();
  *(void *)(v0 + 424) = v8;
  *(void *)(v8 + 16) = v3;
  v1(v8 + v7, v4, v5);
  swift_retain();
  return _swift_task_switch(sub_100B810F4, 0, 0);
}

uint64_t sub_100B810F4()
{
  uint64_t v2 = v0[52];
  uint64_t v1 = v0[53];
  uint64_t v3 = (void *)swift_task_alloc();
  v0[54] = v3;
  v3[2] = v2;
  v3[3] = sub_100B959EC;
  v3[4] = v1;
  uint64_t v4 = (void *)swift_task_alloc();
  v0[55] = v4;
  *uint64_t v4 = v0;
  v4[1] = sub_100B811FC;
  uint64_t v5 = v0[31];
  uint64_t v6 = v0[28];
  return withCheckedContinuation<A>(isolation:function:_:)(v5, 0, 0, 0xD000000000000012, 0x80000001013F1870, sub_1007E0D10, v3, v6);
}

uint64_t sub_100B811FC()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 128);
  swift_task_dealloc();
  swift_release();
  swift_task_dealloc();
  return _swift_task_switch(sub_100B8134C, v1, 0);
}

uint64_t sub_100B8134C()
{
  uint64_t v1 = swift_bridgeObjectRetain();
  uint64_t v2 = sub_10070FB1C(v1);
  swift_bridgeObjectRelease();
  v0[14] = v2;
  uint64_t v3 = (void *)swift_task_alloc();
  v0[56] = v3;
  uint64_t v4 = sub_10000588C((uint64_t *)&unk_1016636E0);
  uint64_t v5 = sub_1001BF100((unint64_t *)&qword_10163FBF0, (uint64_t *)&unk_1016636E0);
  *uint64_t v3 = v0;
  v3[1] = sub_100B81460;
  uint64_t v6 = v0[23];
  uint64_t v7 = v0[16];
  return Sequence.asyncCompactMap<A>(_:)(&unk_10165A1B8, v7, v4, v6, v5);
}

uint64_t sub_100B81460(uint64_t a1)
{
  uint64_t v2 = *(void *)(*(void *)v1 + 128);
  *(void *)(*(void *)v1 + 456) = a1;
  swift_task_dealloc();
  swift_bridgeObjectRelease();
  return _swift_task_switch(sub_100B8159C, v2, 0);
}

void sub_100B8159C()
{
  uint64_t v1 = *(void *)(v0 + 336);
  if (!v1)
  {
    swift_bridgeObjectRelease();
LABEL_8:
    if (qword_101636FA0 != -1) {
LABEL_60:
    }
      swift_once();
    uint64_t v14 = *(void *)(v0 + 312);
    uint64_t v15 = *(void *)(v0 + 296);
    uint64_t v16 = *(void *)(v0 + 248);
    uint64_t v17 = *(void *)(v0 + 232);
    uint64_t v18 = type metadata accessor for Logger();
    sub_100010324(v18, (uint64_t)qword_10170EA60);
    sub_10001D074(v16, v17, (uint64_t *)&unk_10163B890);
    sub_10001D074(v14, v15, (uint64_t *)&unk_101653D50);
    swift_bridgeObjectRetain();
    int64_t v19 = Logger.logObject.getter();
    os_log_type_t v20 = static os_log_type_t.error.getter();
    BOOL v21 = os_log_type_enabled(v19, v20);
    uint64_t v22 = *(void *)(v0 + 296);
    uint64_t v23 = *(void *)(v0 + 232);
    if (v21)
    {
      BOOL v24 = v1 != 0;
      uint64_t v25 = *(void *)(v0 + 192);
      uint64_t v96 = *(void *)(v0 + 184);
      uint64_t v26 = *(void *)(v0 + 144);
      uint64_t v97 = *(void *)(v0 + 136);
      os_log_type_t typea = v20;
      uint64_t v27 = swift_slowAlloc();
      *(_DWORD *)uint64_t v27 = 67109632;
      swift_bridgeObjectRelease();
      *(_DWORD *)(v0 + 472) = v24;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      *(_WORD *)(v27 + 8) = 1024;
      LODWORD(v25) = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v25 + 48))(v23, 1, v96) != 1;
      sub_10001DAB4(v23, (uint64_t *)&unk_10163B890);
      *(_DWORD *)(v0 + 468) = v25;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v27 + 14) = 1024;
      BOOL v28 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v26 + 48))(v22, 1, v97) != 1;
      sub_10001DAB4(v22, (uint64_t *)&unk_101653D50);
      *(_DWORD *)(v0 + 464) = v28;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      _os_log_impl((void *)&_mh_execute_header, v19, typea, "            Can't post Share Suggestion Notification!\n            beaconName(%{BOOL}d),\n            ownerPeerTrust(%{BOOL}d),\n            sharedBeacon(%{BOOL}d)", (uint8_t *)v27, 0x14u);
      swift_slowDealloc();
    }
    else
    {
      sub_10001DAB4(*(void *)(v0 + 296), (uint64_t *)&unk_101653D50);
      sub_10001DAB4(v23, (uint64_t *)&unk_10163B890);
      swift_bridgeObjectRelease_n();
    }

    uint64_t v29 = *(void *)(v0 + 312);
    uint64_t v30 = *(void *)(v0 + 248);
    sub_100B954CC();
    swift_allocError();
    *uint64_t v31 = 0;
    swift_willThrow();
    sub_10001DAB4(v30, (uint64_t *)&unk_10163B890);
    sub_10001DAB4(v29, (uint64_t *)&unk_101653D50);
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v32 = *(void (**)(void))(v0 + 8);
    goto LABEL_13;
  }
  uint64_t v2 = *(void *)(v0 + 240);
  uint64_t v4 = *(void *)(v0 + 184);
  uint64_t v3 = *(void *)(v0 + 192);
  sub_10001D074(*(void *)(v0 + 248), v2, (uint64_t *)&unk_10163B890);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v3 + 48))(v2, 1, v4) == 1)
  {
    uint64_t v5 = *(void *)(v0 + 240);
    swift_bridgeObjectRelease();
    uint64_t v6 = (uint64_t *)&unk_10163B890;
LABEL_7:
    sub_10001DAB4(v5, v6);
    goto LABEL_8;
  }
  uint64_t v8 = *(void *)(v0 + 304);
  uint64_t v7 = *(void *)(v0 + 312);
  uint64_t v10 = *(void *)(v0 + 136);
  uint64_t v9 = *(void *)(v0 + 144);
  sub_100B95FE8(*(void *)(v0 + 240), *(void *)(v0 + 216), (uint64_t (*)(void))type metadata accessor for MemberPeerTrust);
  sub_10001D074(v7, v8, (uint64_t *)&unk_101653D50);
  int v11 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v9 + 48))(v8, 1, v10);
  uint64_t v12 = *(void *)(v0 + 456);
  uint64_t v5 = *(void *)(v0 + 304);
  if (v11 == 1)
  {
    uint64_t v13 = *(void *)(v0 + 216);
    swift_bridgeObjectRetain();
    sub_100B95DC0(v13, (uint64_t (*)(void))type metadata accessor for MemberPeerTrust);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v6 = (uint64_t *)&unk_101653D50;
    goto LABEL_7;
  }
  uint64_t v95 = v1;
  sub_100B95FE8(v5, *(void *)(v0 + 176), type metadata accessor for SharedBeaconRecord);
  uint64_t v101 = *(void *)(v12 + 16);
  if (!v101)
  {
LABEL_41:
    swift_bridgeObjectRelease();
    uint64_t v58 = _swiftEmptyArrayStorage[2];
    swift_release();
    if (qword_101636FA0 != -1) {
      swift_once();
    }
    uint64_t v59 = *(void *)(v0 + 168);
    uint64_t v60 = *(void *)(v0 + 176);
    uint64_t v61 = type metadata accessor for Logger();
    sub_100010324(v61, (uint64_t)qword_10170EA60);
    sub_100B95ED4(v60, v59, type metadata accessor for SharedBeaconRecord);
    uint64_t v62 = Logger.logObject.getter();
    os_log_type_t v63 = static os_log_type_t.default.getter();
    BOOL v64 = os_log_type_enabled(v62, v63);
    uint64_t v65 = *(void *)(v0 + 168);
    if (!v64)
    {
      sub_100B95DC0(*(void *)(v0 + 168), type metadata accessor for SharedBeaconRecord);
LABEL_53:
      uint64_t v73 = *(void *)(v0 + 216);
      uint64_t v74 = *(void *)(v0 + 176);
      uint64_t v75 = *(void *)(v0 + 184);
      uint64_t v76 = *(void *)(v0 + 152);
      uint64_t v77 = *(void *)(v0 + 136);

      uint64_t v78 = (uint64_t *)(v73 + *(int *)(v75 + 32));
      uint64_t v79 = *v78;
      uint64_t v80 = v78[1];
      uint64_t v81 = *(void *)(v74 + *(int *)(v77 + 44));
      sub_100B95ED4(v74, v76, type metadata accessor for SharedBeaconRecord);
      uint64_t v94 = v79;
      if (v81 == 76)
      {
        uint64_t v82 = qword_1016375F8;
        swift_bridgeObjectRetain();
        if (v82 != -1) {
          swift_once();
        }
        uint64_t v83 = (uint64_t *)(v0 + 16);
        BOOL v84 = sub_100DC71B4(*(void *)(*(void *)(v0 + 152) + *(int *)(*(void *)(v0 + 136) + 48)), qword_10170F778);
      }
      else
      {
        uint64_t v83 = (uint64_t *)(v0 + 16);
        swift_bridgeObjectRetain();
        BOOL v84 = 0;
      }
      uint64_t v85 = *(void *)(v0 + 64);
      uint64_t v86 = *(void *)(v0 + 312);
      uint64_t v92 = *(void *)(v0 + 216);
      uint64_t v93 = *(void *)(v0 + 248);
      uint64_t v91 = *(void *)(v0 + 176);
      uint64_t v87 = *(void *)(v0 + 120);
      sub_100B95DC0(*(void *)(v0 + 152), type metadata accessor for SharedBeaconRecord);
      sub_100B66AD0(v87, v85, v95, v94, v80, v84, v58 != 0, v83);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_unownedRetainStrong();
      uint64_t v88 = *(void *)(v0 + 40);
      uint64_t v89 = *(void *)(v0 + 48);
      long long v90 = sub_10001CD44(v83, v88);
      sub_100E0525C((uint64_t)v90, 0, 0, v88, v89);
      swift_release();
      _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)v83);
      sub_100B95DC0(v91, type metadata accessor for SharedBeaconRecord);
      sub_100B95DC0(v92, (uint64_t (*)(void))type metadata accessor for MemberPeerTrust);
      sub_10001DAB4(v93, (uint64_t *)&unk_10163B890);
      sub_10001DAB4(v86, (uint64_t *)&unk_101653D50);
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      uint64_t v32 = *(void (**)(void))(v0 + 8);
LABEL_13:
      v32();
      return;
    }
    uint64_t v66 = *(void *)(v0 + 160);
    uint64_t v67 = *(void *)(v0 + 136);
    uint64_t v68 = swift_slowAlloc();
    *(_DWORD *)uint64_t v68 = 67109376;
    uint64_t v69 = *(void *)(v65 + *(int *)(v67 + 44));
    sub_100B95ED4(v65, v66, type metadata accessor for SharedBeaconRecord);
    if (v69 == 76)
    {
      if (qword_1016375F8 != -1) {
        swift_once();
      }
      uint64_t v70 = *(void *)(v0 + 160);
      BOOL v71 = sub_100DC71B4(*(void *)(v70 + *(int *)(*(void *)(v0 + 136) + 48)), qword_10170F778);
      sub_100B95DC0(v70, type metadata accessor for SharedBeaconRecord);
      if (v71)
      {
        int v72 = 1;
LABEL_52:
        sub_100B95DC0(*(void *)(v0 + 168), type metadata accessor for SharedBeaconRecord);
        *(_DWORD *)(v0 + 476) = v72;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        *(_WORD *)(v68 + 8) = 1024;
        *(_DWORD *)(v0 + 480) = v58 != 0;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        _os_log_impl((void *)&_mh_execute_header, v62, v63, "post Share Suggestion Notification,\nisAirTag:%{BOOL}d,\nisContainBlockedMembers:%{BOOL}d", (uint8_t *)v68, 0xEu);
        swift_slowDealloc();
        goto LABEL_53;
      }
    }
    else
    {
      sub_100B95DC0(*(void *)(v0 + 160), type metadata accessor for SharedBeaconRecord);
    }
    int v72 = 0;
    goto LABEL_52;
  }
  unint64_t v33 = 0;
  uint64_t v98 = *(void *)(v0 + 184);
  *(void *)type = *(void *)(v0 + 192);
  while (1)
  {
    if (v33 >= *(void *)(v12 + 16))
    {
      __break(1u);
      goto LABEL_60;
    }
    uint64_t v34 = *(void *)(v0 + 208);
    unint64_t v35 = (*(unsigned __int8 *)(*(void *)type + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)type + 80);
    uint64_t v36 = *(void *)(*(void *)type + 72);
    sub_100B95ED4(*(void *)(v0 + 456) + v35 + v36 * v33, v34, (uint64_t (*)(void))type metadata accessor for MemberPeerTrust);
    uint64_t v37 = (uint64_t *)(v34 + *(int *)(v98 + 32));
    uint64_t v1 = *v37;
    unint64_t v38 = v37[1];
    uint64_t v39 = HIBYTE(v38) & 0xF;
    if ((v38 & 0x2000000000000000) == 0) {
      uint64_t v39 = v1 & 0xFFFFFFFFFFFFLL;
    }
    if (!v39) {
      goto LABEL_18;
    }
    *(void *)(v0 + 80) = v1;
    *(void *)(v0 + 88) = v38;
    *(void *)(v0 + 96) = 64;
    *(void *)(v0 + 104) = 0xE100000000000000;
    sub_1000336D4();
    swift_bridgeObjectRetain();
    char v40 = StringProtocol.contains<A>(_:)();
    NSString v41 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    if ((v40 & 1) == 0)
    {
      uint64_t v48 = (void *)IDSCopyIDForPhoneNumber();

      if (!v48) {
        goto LABEL_63;
      }
      uint64_t v49 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      uint64_t v51 = v50;

      uint64_t v52 = (void *)sub_100ECF4F0(1, v49, v51);
      NSString v53 = [v52 destination];

      if (!v53)
      {
        static String._unconditionallyBridgeFromObjectiveC(_:)();
        NSString v53 = String._bridgeToObjectiveC()();
        swift_bridgeObjectRelease();
      }
      uint64_t v1 = CFPhoneNumberCreate();

      if (!CMFItemCreateWithPhoneNumber()) {
        goto LABEL_64;
      }

      goto LABEL_35;
    }
    uint64_t v42 = (void *)IDSCopyIDForEmailAddress();

    if (!v42) {
      break;
    }
    uint64_t v43 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    unint64_t v45 = v44;

    uint64_t v46 = (void *)sub_100ECF4F0(0, v43, v45);
    uint64_t v1 = (uint64_t)[v46 destination];

    if (!v1)
    {
      static String._unconditionallyBridgeFromObjectiveC(_:)();
      uint64_t v1 = (uint64_t)String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease();
    }
    uint64_t v47 = CMFItemCreateWithEmailAddress();

    if (!v47) {
      goto LABEL_62;
    }
LABEL_35:
    int IsItemBlocked = CMFBlockListIsItemBlocked();
    swift_unknownObjectRelease();
    swift_bridgeObjectRelease();
    if (IsItemBlocked)
    {
      sub_100B95FE8(*(void *)(v0 + 208), *(void *)(v0 + 200), (uint64_t (*)(void))type metadata accessor for MemberPeerTrust);
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
        sub_1000B7440(0, _swiftEmptyArrayStorage[2] + 1, 1);
      }
      unint64_t v56 = _swiftEmptyArrayStorage[2];
      unint64_t v55 = _swiftEmptyArrayStorage[3];
      if (v56 >= v55 >> 1) {
        sub_1000B7440(v55 > 1, v56 + 1, 1);
      }
      uint64_t v57 = *(void *)(v0 + 200);
      _swiftEmptyArrayStorage[2] = v56 + 1;
      sub_100B95FE8(v57, (uint64_t)_swiftEmptyArrayStorage + v35 + v56 * v36, (uint64_t (*)(void))type metadata accessor for MemberPeerTrust);
      goto LABEL_19;
    }
LABEL_18:
    sub_100B95DC0(*(void *)(v0 + 208), (uint64_t (*)(void))type metadata accessor for MemberPeerTrust);
LABEL_19:
    if (v101 == ++v33) {
      goto LABEL_41;
    }
  }
  __break(1u);
LABEL_62:
  __break(1u);
LABEL_63:
  __break(1u);
LABEL_64:
  __break(1u);
}

uint64_t sub_100B822C4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v3[3] = a2;
  v3[4] = a3;
  v3[2] = a1;
  uint64_t v4 = type metadata accessor for UUID();
  v3[5] = v4;
  uint64_t v5 = *(void *)(v4 - 8);
  v3[6] = v5;
  v3[7] = *(void *)(v5 + 64);
  v3[8] = swift_task_alloc();
  return _swift_task_switch(sub_100B82390, 0, 0);
}

uint64_t sub_100B82390()
{
  uint64_t v1 = *(void *)(*(void *)(v0 + 32) + 136);
  *(void *)(v0 + 72) = v1;
  return _swift_task_switch(sub_100B823B4, v1, 0);
}

uint64_t sub_100B823B4()
{
  uint64_t v1 = v0[8];
  uint64_t v2 = v0[9];
  uint64_t v3 = v0[6];
  uint64_t v4 = v0[5];
  uint64_t v5 = v0[3];
  v0[10] = *(void *)(v2 + 136);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v3 + 16))(v1, v5, v4);
  unint64_t v6 = (*(unsigned __int8 *)(v3 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  uint64_t v7 = swift_allocObject();
  v0[11] = v7;
  *(void *)(v7 + 16) = v2;
  (*(void (**)(unint64_t, uint64_t, uint64_t))(v3 + 32))(v7 + v6, v1, v4);
  swift_retain();
  return _swift_task_switch(sub_100B824A8, 0, 0);
}

uint64_t sub_100B824A8()
{
  uint64_t v2 = v0[10];
  uint64_t v1 = v0[11];
  uint64_t v3 = (void *)swift_task_alloc();
  v0[12] = v3;
  v3[2] = v2;
  v3[3] = sub_100B959EC;
  v3[4] = v1;
  uint64_t v4 = (void *)swift_task_alloc();
  v0[13] = v4;
  uint64_t v5 = sub_10000588C((uint64_t *)&unk_10163B890);
  *uint64_t v4 = v0;
  v4[1] = sub_100B825BC;
  uint64_t v6 = v0[2];
  return withCheckedContinuation<A>(isolation:function:_:)(v6, 0, 0, 0xD000000000000012, 0x80000001013F1870, sub_1007E0D10, v3, v5);
}

uint64_t sub_100B825BC()
{
  uint64_t v3 = *v0;
  swift_task_dealloc();
  swift_release();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v3 + 8);
  return v1();
}

uint64_t sub_100B82710(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v5[53] = a4;
  v5[54] = v4;
  v5[51] = a2;
  v5[52] = a3;
  v5[50] = a1;
  v5[55] = type metadata accessor for ItemShareRequestReceivedUserNotification();
  v5[56] = swift_task_alloc();
  sub_10000588C(&qword_10163B8A0);
  v5[57] = swift_task_alloc();
  sub_10000588C(&qword_10164B630);
  v5[58] = swift_task_alloc();
  sub_10000588C(&qword_101638CF0);
  v5[59] = swift_task_alloc();
  v5[60] = swift_task_alloc();
  v5[61] = swift_task_alloc();
  v5[62] = swift_task_alloc();
  v5[63] = sub_10000588C((uint64_t *)&unk_1016607D0);
  v5[64] = swift_task_alloc();
  v5[65] = swift_task_alloc();
  uint64_t v6 = type metadata accessor for OwnerPeerTrust();
  v5[66] = v6;
  v5[67] = *(void *)(v6 - 8);
  v5[68] = swift_task_alloc();
  v5[69] = swift_task_alloc();
  v5[70] = swift_task_alloc();
  uint64_t v7 = type metadata accessor for UUID();
  v5[71] = v7;
  uint64_t v8 = *(void *)(v7 - 8);
  v5[72] = v8;
  v5[73] = *(void *)(v8 + 64);
  v5[74] = swift_task_alloc();
  v5[75] = swift_task_alloc();
  v5[76] = swift_task_alloc();
  v5[77] = swift_task_alloc();
  uint64_t v9 = (void *)swift_task_alloc();
  v5[78] = v9;
  void *v9 = v5;
  v9[1] = sub_100B829F4;
  v9[15] = v4;
  return _swift_task_switch(sub_100B7EE9C, v4, 0);
}

uint64_t sub_100B829F4(uint64_t a1)
{
  uint64_t v3 = (void *)*v2;
  v3[79] = a1;
  swift_task_dealloc();
  if (v1)
  {
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v4 = (uint64_t (*)(void))v3[1];
    return v4();
  }
  else
  {
    uint64_t v6 = (void *)swift_task_alloc();
    v3[80] = v6;
    *uint64_t v6 = v3;
    v6[1] = sub_100B82C70;
    uint64_t v7 = v3[54];
    v6[25] = v3 + 28;
    v6[26] = v7;
    return _swift_task_switch(sub_100B7E9E4, v7, 0);
  }
}

uint64_t sub_100B82C70()
{
  uint64_t v2 = *v1;
  *(void *)(v2 + 648) = v0;
  swift_task_dealloc();
  if (v0)
  {
    uint64_t v3 = *(void *)(v2 + 432);
    return _swift_task_switch(sub_100B87D20, v3, 0);
  }
  else
  {
    uint64_t v4 = *(void *)(v2 + 400);
    uint64_t v5 = type metadata accessor for OwnerSharingCircle();
    *(void *)(v2 + 656) = v5;
    uint64_t v6 = *(int *)(v5 + 24);
    *(_DWORD *)(v2 + 932) = v6;
    uint64_t v7 = v4 + v6;
    uint64_t v8 = (void *)swift_task_alloc();
    *(void *)(v2 + 664) = v8;
    *uint64_t v8 = v2;
    v8[1] = sub_100B82E08;
    return sub_100B945DC(v7);
  }
}

uint64_t sub_100B82E08(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *v2;
  uint64_t v4 = *(void *)(*v2 + 432);
  *(void *)(v3 + 672) = a1;
  *(void *)(v3 + 680) = a2;
  swift_task_dealloc();
  return _swift_task_switch(sub_100B82F24, v4, 0);
}

uint64_t sub_100B82F24()
{
  uint64_t v1 = *(void *)(*(void *)(v0 + 432) + 136);
  *(void *)(v0 + 688) = v1;
  return _swift_task_switch(sub_100B82F48, v1, 0);
}

uint64_t sub_100B82F48()
{
  uint64_t v1 = *(void *)(v0 + 688);
  uint64_t v2 = *(void *)(v0 + 616);
  uint64_t v3 = *(void *)(v0 + 576);
  uint64_t v4 = *(void *)(v0 + 568);
  uint64_t v5 = *(void *)(v0 + 400) + *(int *)(v0 + 932);
  *(void *)(v0 + 696) = *(void *)(v1 + 136);
  uint64_t v6 = *(void (**)(uint64_t, uint64_t, uint64_t))(v3 + 16);
  *(void *)(v0 + 704) = v6;
  *(void *)(v0 + 712) = (v3 + 16) & 0xFFFFFFFFFFFFLL | 0xE3BA000000000000;
  v6(v2, v5, v4);
  int v7 = *(_DWORD *)(v3 + 80);
  *(_DWORD *)(v0 + 936) = v7;
  unint64_t v8 = (v7 + 24) & ~(unint64_t)v7;
  uint64_t v9 = swift_allocObject();
  *(void *)(v0 + 720) = v9;
  *(void *)(v9 + 16) = v1;
  uint64_t v10 = *(void (**)(unint64_t, uint64_t, uint64_t))(v3 + 32);
  *(void *)(v0 + 728) = v10;
  *(void *)(v0 + 736) = (v3 + 32) & 0xFFFFFFFFFFFFLL | 0x48D8000000000000;
  v10(v9 + v8, v2, v4);
  swift_retain();
  return _swift_task_switch(sub_100B83074, 0, 0);
}

uint64_t sub_100B83074()
{
  uint64_t v1 = v0[90];
  uint64_t v2 = v0[87];
  uint64_t v3 = (void *)swift_task_alloc();
  v0[93] = v3;
  v3[2] = v2;
  v3[3] = sub_10001CDDC;
  v3[4] = v1;
  uint64_t v4 = (void *)swift_task_alloc();
  v0[94] = v4;
  uint64_t v5 = sub_10000588C((uint64_t *)&unk_10163BBE0);
  *uint64_t v4 = v0;
  v4[1] = sub_100B83190;
  return withCheckedContinuation<A>(isolation:function:_:)(v0 + 8, 0, 0, 0xD000000000000012, 0x80000001013F1870, sub_10001CE50, v3, v5);
}

uint64_t sub_100B83190()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 432);
  swift_task_dealloc();
  swift_release();
  swift_task_dealloc();
  return _swift_task_switch(sub_100B832E0, v1, 0);
}

uint64_t sub_100B832E0()
{
  uint64_t v1 = *(void *)(v0 + 424);
  if (v1)
  {
    uint64_t v2 = *(unsigned __int8 *)(v0 + 408);
    uint64_t v3 = (void *)swift_task_alloc();
    *(void *)(v0 + 760) = v3;
    *uint64_t v3 = v0;
    v3[1] = sub_100B8373C;
    uint64_t v4 = *(void *)(v0 + 416);
    return sub_100EA2DF0(v2, v4, v1);
  }
  uint64_t v6 = *(void *)(v0 + 576);
  uint64_t v7 = *(void *)(v0 + 464);
  uint64_t v8 = swift_bridgeObjectRetain();
  sub_100B7E630(v8, v7);
  swift_bridgeObjectRelease();
  uint64_t v9 = sub_10000588C(&qword_10165F390);
  uint64_t v10 = (void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v6 + 56);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 48))(v7, 1, v9) == 1)
  {
    uint64_t v11 = *(void *)(v0 + 568);
    uint64_t v12 = *(void *)(v0 + 496);
    sub_10001DAB4(*(void *)(v0 + 464), &qword_10164B630);
    (*v10)(v12, 1, 1, v11);
LABEL_8:
    uint64_t v16 = *(void *)(v0 + 496);
    swift_bridgeObjectRelease();
    sub_10001DAB4(v16, &qword_101638CF0);
    if (qword_101636FA0 != -1) {
      swift_once();
    }
    uint64_t v17 = type metadata accessor for Logger();
    sub_100010324(v17, (uint64_t)qword_10170EA60);
    uint64_t v18 = Logger.logObject.getter();
    os_log_type_t v19 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v18, v19))
    {
      os_log_type_t v20 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)os_log_type_t v20 = 0;
      _os_log_impl((void *)&_mh_execute_header, v18, v19, "Can't post Request Received Notification! invalid member destination.", v20, 2u);
      swift_slowDealloc();
    }

    swift_unknownObjectRelease();
    sub_10001DAB4(v0 + 64, (uint64_t *)&unk_10163BBE0);
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v0 + 224);
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    BOOL v21 = *(uint64_t (**)(void))(v0 + 8);
    return v21();
  }
  uint64_t v13 = *(void *)(v0 + 576);
  uint64_t v14 = *(void *)(v0 + 568);
  uint64_t v15 = *(void *)(v0 + 496);
  (*(void (**)(uint64_t, void, uint64_t))(v0 + 728))(v15, *(void *)(v0 + 464), v14);
  (*v10)(v15, 0, 1, v14);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v13 + 48))(v15, 1, v14) == 1) {
    goto LABEL_8;
  }
  uint64_t v22 = *(void *)(v0 + 688);
  (*(void (**)(void, void, void))(v0 + 728))(*(void *)(v0 + 608), *(void *)(v0 + 496), *(void *)(v0 + 568));
  return _swift_task_switch(sub_100B85690, v22, 0);
}

uint64_t sub_100B8373C(uint64_t a1)
{
  uint64_t v3 = *v2;
  uint64_t v4 = *v2;
  *(void *)(v4 + 768) = a1;
  *(void *)(v4 + 776) = v1;
  swift_task_dealloc();
  uint64_t v5 = *(void *)(v3 + 432);
  if (v1)
  {
    swift_errorRelease();
    uint64_t v6 = sub_100B83E44;
  }
  else
  {
    uint64_t v6 = sub_100B83880;
  }
  return _swift_task_switch(v6, v5, 0);
}

uint64_t sub_100B83880()
{
  uint64_t v1 = *(void *)(v0 + 768);
  if (*(void *)(v1 + 16))
  {
    uint64_t v2 = *(unsigned __int8 *)(*(void *)(v0 + 536) + 80);
    sub_100B95ED4(v1 + ((v2 + 32) & ~v2), *(void *)(v0 + 520), (uint64_t (*)(void))type metadata accessor for OwnerPeerTrust);
    uint64_t v3 = 0;
  }
  else
  {
    uint64_t v3 = 1;
  }
  uint64_t v4 = *(void *)(v0 + 536);
  uint64_t v5 = *(void *)(v0 + 528);
  uint64_t v6 = *(void *)(v0 + 520);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v4 + 56))(v6, v3, 1, v5);
  swift_bridgeObjectRelease();
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v4 + 48))(v6, 1, v5) == 1)
  {
    sub_10001DAB4(*(void *)(v0 + 520), (uint64_t *)&unk_1016607D0);
  }
  else
  {
    uint64_t v7 = *(void *)(v0 + 656);
    uint64_t v8 = *(void *)(v0 + 400);
    sub_100B95FE8(*(void *)(v0 + 520), *(void *)(v0 + 552), (uint64_t (*)(void))type metadata accessor for OwnerPeerTrust);
    uint64_t v9 = *(void *)(v8 + *(int *)(v7 + 32));
    if (*(void *)(v9 + 16))
    {
      unint64_t v10 = sub_1007240CC(*(void *)(v0 + 552) + *(int *)(*(void *)(v0 + 528) + 20));
      if ((v11 & 1) != 0 && *(unsigned char *)(*(void *)(v9 + 56) + v10) == 2)
      {
        uint64_t v12 = *(void *)(v0 + 424);
        char v13 = *(unsigned char *)(v0 + 408);
        sub_100B95ED4(*(void *)(v0 + 552), *(void *)(v0 + 560), (uint64_t (*)(void))type metadata accessor for OwnerPeerTrust);
        sub_10001CD44((void *)(v0 + 224), *(void *)(v0 + 248));
        uint64_t v14 = (void *)swift_task_alloc();
        *(void *)(v0 + 784) = v14;
        void *v14 = v0;
        v14[1] = sub_100B84244;
        uint64_t v15 = *(void *)(v0 + 416);
        return sub_100CFA33C(v13, v15, v12);
      }
    }
    sub_100B95DC0(*(void *)(v0 + 552), (uint64_t (*)(void))type metadata accessor for OwnerPeerTrust);
  }
  uint64_t v17 = *(void *)(v0 + 576);
  uint64_t v18 = *(void *)(v0 + 464);
  uint64_t v19 = swift_bridgeObjectRetain();
  sub_100B7E630(v19, v18);
  swift_bridgeObjectRelease();
  uint64_t v20 = sub_10000588C(&qword_10165F390);
  BOOL v21 = (void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v17 + 56);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v20 - 8) + 48))(v18, 1, v20) == 1)
  {
    uint64_t v22 = *(void *)(v0 + 568);
    uint64_t v23 = *(void *)(v0 + 496);
    sub_10001DAB4(*(void *)(v0 + 464), &qword_10164B630);
    (*v21)(v23, 1, 1, v22);
LABEL_16:
    uint64_t v27 = *(void *)(v0 + 496);
    swift_bridgeObjectRelease();
    sub_10001DAB4(v27, &qword_101638CF0);
    if (qword_101636FA0 != -1) {
      swift_once();
    }
    uint64_t v28 = type metadata accessor for Logger();
    sub_100010324(v28, (uint64_t)qword_10170EA60);
    uint64_t v29 = Logger.logObject.getter();
    os_log_type_t v30 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v29, v30))
    {
      uint64_t v31 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v31 = 0;
      _os_log_impl((void *)&_mh_execute_header, v29, v30, "Can't post Request Received Notification! invalid member destination.", v31, 2u);
      swift_slowDealloc();
    }

    swift_unknownObjectRelease();
    sub_10001DAB4(v0 + 64, (uint64_t *)&unk_10163BBE0);
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v0 + 224);
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v32 = *(uint64_t (**)(void))(v0 + 8);
    return v32();
  }
  uint64_t v24 = *(void *)(v0 + 576);
  uint64_t v25 = *(void *)(v0 + 568);
  uint64_t v26 = *(void *)(v0 + 496);
  (*(void (**)(uint64_t, void, uint64_t))(v0 + 728))(v26, *(void *)(v0 + 464), v25);
  (*v21)(v26, 0, 1, v25);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v24 + 48))(v26, 1, v25) == 1) {
    goto LABEL_16;
  }
  uint64_t v33 = *(void *)(v0 + 688);
  (*(void (**)(void, void, void))(v0 + 728))(*(void *)(v0 + 608), *(void *)(v0 + 496), *(void *)(v0 + 568));
  return _swift_task_switch(sub_100B85690, v33, 0);
}

uint64_t sub_100B83E44()
{
  (*(void (**)(void, uint64_t, uint64_t, void))(*(void *)(v0 + 536) + 56))(*(void *)(v0 + 520), 1, 1, *(void *)(v0 + 528));
  sub_10001DAB4(*(void *)(v0 + 520), (uint64_t *)&unk_1016607D0);
  uint64_t v1 = *(void *)(v0 + 576);
  uint64_t v2 = *(void *)(v0 + 464);
  uint64_t v3 = swift_bridgeObjectRetain();
  sub_100B7E630(v3, v2);
  swift_bridgeObjectRelease();
  uint64_t v4 = sub_10000588C(&qword_10165F390);
  uint64_t v5 = (void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v1 + 56);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 48))(v2, 1, v4) == 1)
  {
    uint64_t v6 = *(void *)(v0 + 568);
    uint64_t v7 = *(void *)(v0 + 496);
    sub_10001DAB4(*(void *)(v0 + 464), &qword_10164B630);
    (*v5)(v7, 1, 1, v6);
LABEL_4:
    uint64_t v11 = *(void *)(v0 + 496);
    swift_bridgeObjectRelease();
    sub_10001DAB4(v11, &qword_101638CF0);
    if (qword_101636FA0 != -1) {
      swift_once();
    }
    uint64_t v12 = type metadata accessor for Logger();
    sub_100010324(v12, (uint64_t)qword_10170EA60);
    char v13 = Logger.logObject.getter();
    os_log_type_t v14 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v13, v14))
    {
      uint64_t v15 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v15 = 0;
      _os_log_impl((void *)&_mh_execute_header, v13, v14, "Can't post Request Received Notification! invalid member destination.", v15, 2u);
      swift_slowDealloc();
    }

    swift_unknownObjectRelease();
    sub_10001DAB4(v0 + 64, (uint64_t *)&unk_10163BBE0);
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v0 + 224);
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v16 = *(uint64_t (**)(void))(v0 + 8);
    return v16();
  }
  uint64_t v8 = *(void *)(v0 + 576);
  uint64_t v9 = *(void *)(v0 + 568);
  uint64_t v10 = *(void *)(v0 + 496);
  (*(void (**)(uint64_t, void, uint64_t))(v0 + 728))(v10, *(void *)(v0 + 464), v9);
  (*v5)(v10, 0, 1, v9);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v8 + 48))(v10, 1, v9) == 1) {
    goto LABEL_4;
  }
  uint64_t v18 = *(void *)(v0 + 688);
  (*(void (**)(void, void, void))(v0 + 728))(*(void *)(v0 + 608), *(void *)(v0 + 496), *(void *)(v0 + 568));
  return _swift_task_switch(sub_100B85690, v18, 0);
}

uint64_t sub_100B84244(uint64_t a1, uint64_t a2)
{
  uint64_t v6 = (void *)*v3;
  v6[99] = v2;
  swift_task_dealloc();
  uint64_t v7 = v6[54];
  if (v2)
  {
    swift_errorRelease();
    uint64_t v8 = sub_100B85040;
  }
  else
  {
    v6[100] = a2;
    v6[101] = a1;
    uint64_t v8 = sub_100B84394;
  }
  return _swift_task_switch(v8, v7, 0);
}

uint64_t sub_100B84394()
{
  uint64_t v1 = v0 + 224;
  uint64_t v71 = *(void *)(v0 + 800);
  uint64_t v68 = *(void *)(v0 + 808);
  sub_100B95DC0(*(void *)(v0 + 552), (uint64_t (*)(void))type metadata accessor for OwnerPeerTrust);
  uint64_t v2 = *(void *)(v0 + 560);
  uint64_t v3 = *(void *)(v0 + 456);
  uint64_t v4 = *(void *)(v0 + 400);
  uint64_t v5 = swift_bridgeObjectRetain();
  uint64_t v6 = sub_10070FB1C(v5);
  swift_bridgeObjectRelease();
  uint64_t v7 = swift_task_alloc();
  *(void *)(v7 + 16) = v4;
  uint64_t v8 = sub_1000D137C((uint64_t)_swiftEmptyDictionarySingleton, (void (*)(uint64_t *, char *))sub_100B961F0, v7, v6);
  swift_release();
  swift_task_dealloc();
  *(void *)(swift_task_alloc() + 16) = v2;
  sub_100B7E124(v8, (uint64_t (*)(uint64_t, uint64_t))sub_100B95BF4, v3);
  swift_bridgeObjectRelease();
  swift_task_dealloc();
  uint64_t v9 = sub_10000588C(&qword_101661010);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 48))(v3, 1, v9) == 1)
  {
    uint64_t v10 = *(void *)(v0 + 576);
    uint64_t v11 = *(void *)(v0 + 568);
    uint64_t v12 = *(void *)(v0 + 488);
    sub_10001DAB4(*(void *)(v0 + 456), &qword_10163B8A0);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v10 + 56))(v12, 1, 1, v11);
  }
  else
  {
    uint64_t v13 = *(void *)(v0 + 576);
    uint64_t v14 = *(void *)(v0 + 568);
    uint64_t v15 = *(void *)(v0 + 488);
    uint64_t v16 = *(void *)(v0 + 456) + *(int *)(v9 + 48);
    (*(void (**)(uint64_t))(v0 + 728))(v15);
    (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v13 + 56))(v15, 0, 1, v14);
    (*(void (**)(uint64_t, uint64_t))(v13 + 8))(v16, v14);
  }
  uint64_t v17 = *(void *)(v0 + 680);
  uint64_t v70 = v0 + 64;
  if (!v17) {
    goto LABEL_11;
  }
  sub_10001D074(v0 + 64, v0 + 264, (uint64_t *)&unk_10163BBE0);
  if (!*(void *)(v0 + 288))
  {
    sub_10001DAB4(v0 + 264, (uint64_t *)&unk_10163BBE0);
    goto LABEL_11;
  }
  sub_10001CEB0((long long *)(v0 + 264), v0 + 144);
  if (!v71)
  {
LABEL_9:
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v0 + 144);
LABEL_11:
    if (qword_101636FA0 != -1) {
      swift_once();
    }
    uint64_t v21 = *(void *)(v0 + 488);
    uint64_t v22 = *(void *)(v0 + 472);
    uint64_t v23 = type metadata accessor for Logger();
    sub_100010324(v23, (uint64_t)qword_10170EA60);
    sub_10001D074(v0 + 64, v0 + 184, (uint64_t *)&unk_10163BBE0);
    sub_10001D074(v21, v22, &qword_101638CF0);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    uint64_t v24 = Logger.logObject.getter();
    os_log_type_t v25 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v24, v25))
    {
      BOOL v26 = v17 != 0;
      uint64_t v27 = *(void *)(v0 + 576);
      uint64_t v66 = *(void *)(v0 + 568);
      uint64_t v63 = *(void *)(v0 + 472);
      uint64_t v28 = swift_slowAlloc();
      *(_DWORD *)uint64_t v28 = 67109888;
      swift_bridgeObjectRelease();
      *(_DWORD *)(v0 + 924) = v26;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      *(_WORD *)(v28 + 8) = 1024;
      swift_bridgeObjectRelease();
      *(_DWORD *)(v0 + 920) = v71 != 0;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      *(_WORD *)(v28 + 14) = 1024;
      BOOL v29 = *(void *)(v0 + 208) != 0;
      sub_10001DAB4(v0 + 184, (uint64_t *)&unk_10163BBE0);
      *(_DWORD *)(v0 + 916) = v29;
      uint64_t v1 = v0 + 224;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v28 + 20) = 1024;
      LODWORD(v27) = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v27 + 48))(v63, 1, v66) != 1;
      sub_10001DAB4(v63, &qword_101638CF0);
      *(_DWORD *)(v0 + 912) = v27;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      _os_log_impl((void *)&_mh_execute_header, v24, v25, "Can't post Request Received Notification!\nbeaconName(%{BOOL}d), memberName(%{BOOL}d),\nbeaconRecord(%{BOOL}d), clientShareIdentifier(%{BOOL}d)", (uint8_t *)v28, 0x1Au);
      swift_slowDealloc();
    }
    else
    {
      sub_10001DAB4(*(void *)(v0 + 472), &qword_101638CF0);
      sub_10001DAB4(v0 + 184, (uint64_t *)&unk_10163BBE0);
      swift_bridgeObjectRelease_n();
      swift_bridgeObjectRelease_n();
    }

    uint64_t v30 = *(void *)(v0 + 560);
    uint64_t v31 = *(void *)(v0 + 488);
    sub_100B954CC();
    swift_allocError();
    *uint64_t v32 = 0;
    swift_willThrow();
    swift_unknownObjectRelease();
    sub_10001DAB4(v31, &qword_101638CF0);
    sub_10001DAB4(v70, (uint64_t *)&unk_10163BBE0);
    sub_100B95DC0(v30, (uint64_t (*)(void))type metadata accessor for OwnerPeerTrust);
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v1);
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v33 = *(uint64_t (**)(void))(v0 + 8);
    goto LABEL_17;
  }
  uint64_t v18 = *(void *)(v0 + 576);
  uint64_t v19 = *(void *)(v0 + 568);
  uint64_t v20 = *(void *)(v0 + 480);
  sub_10001D074(*(void *)(v0 + 488), v20, &qword_101638CF0);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v18 + 48))(v20, 1, v19) == 1)
  {
    sub_10001DAB4(*(void *)(v0 + 480), &qword_101638CF0);
    goto LABEL_9;
  }
  (*(void (**)(void, void, void))(v0 + 728))(*(void *)(v0 + 592), *(void *)(v0 + 480), *(void *)(v0 + 568));
  if (qword_101636FA0 != -1) {
    swift_once();
  }
  uint64_t v35 = type metadata accessor for Logger();
  sub_100010324(v35, (uint64_t)qword_10170EA60);
  uint64_t v67 = (void *)(v0 + 144);
  sub_10001D010(v0 + 144, v0 + 344);
  uint64_t v36 = Logger.logObject.getter();
  os_log_type_t v37 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v36, v37))
  {
    unint64_t v38 = (uint8_t *)swift_slowAlloc();
    *(_DWORD *)unint64_t v38 = 67109120;
    uint64_t v39 = *(void *)(v0 + 368);
    uint64_t v40 = *(void *)(v0 + 376);
    sub_10001CD44((void *)(v0 + 344), v39);
    LODWORD(v39) = (*(uint64_t (**)(uint64_t, uint64_t))(v40 + 96))(v39, v40) & 1;
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v0 + 344);
    *(_DWORD *)(v0 + 928) = v39;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl((void *)&_mh_execute_header, v36, v37, "post Request Received Notification, isAirTag:%{BOOL}d", v38, 8u);
    swift_slowDealloc();
  }
  else
  {
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v0 + 344);
  }

  NSString v41 = *(void (**)(char *, uint64_t, uint64_t))(v0 + 704);
  uint64_t v42 = *(void *)(v0 + 592);
  uint64_t v43 = *(void *)(v0 + 568);
  uint64_t v69 = *(void *)(v0 + 560);
  uint64_t v64 = *(void *)(v0 + 576);
  uint64_t v65 = *(void *)(v0 + 488);
  uint64_t v44 = *(int **)(v0 + 440);
  unint64_t v45 = *(char **)(v0 + 448);
  uint64_t v62 = *(void *)(v0 + 672);
  uint64_t v46 = *(void *)(v0 + 168);
  uint64_t v47 = *(void *)(v0 + 176);
  sub_10001CD44(v67, v46);
  char v48 = (*(uint64_t (**)(uint64_t, uint64_t))(v47 + 96))(v46, v47);
  *(_WORD *)unint64_t v45 = 25089;
  v41(&v45[v44[6]], v42, v43);
  uint64_t v49 = &v45[v44[7]];
  *(void *)uint64_t v49 = v68;
  *((void *)v49 + 1) = v71;
  uint64_t v50 = &v45[v44[8]];
  *(void *)uint64_t v50 = v62;
  *((void *)v50 + 1) = v17;
  v45[v44[9]] = v48 & 1;
  uint64_t v51 = (uint64_t)v45;
  swift_unownedRetainStrong();
  *(void *)(v0 + 328) = v44;
  *(void *)(v0 + 336) = &off_1015BD7F0;
  uint64_t v52 = sub_10001D958((uint64_t *)(v0 + 304));
  sub_100B95ED4((uint64_t)v45, (uint64_t)v52, (uint64_t (*)(void))type metadata accessor for ItemShareRequestReceivedUserNotification);
  id v53 = objc_allocWithZone((Class)UNUserNotificationCenter);
  NSString v54 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  id v55 = [v53 initWithBundleIdentifier:v54];

  id v56 = sub_1010983DC((uint64_t)v52);
  UUID.uuidString.getter();
  id v57 = v56;
  NSString v58 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  id v59 = [self requestWithIdentifier:v58 content:v57 trigger:0 destinations:7];

  sub_10001D010(v0 + 304, v0 + 104);
  uint64_t v60 = swift_allocObject();
  sub_10001CEB0((long long *)(v0 + 104), v60 + 16);
  *(void *)(v60 + 56) = 0;
  *(void *)(v60 + 64) = 0;
  *(void *)(v0 + 48) = sub_1002F6720;
  *(void *)(v0 + 56) = v60;
  *(void *)(v0 + 16) = _NSConcreteStackBlock;
  *(void *)(v0 + 24) = 1107296256;
  *(void *)(v0 + 32) = sub_100769474;
  *(void *)(v0 + 40) = &unk_1015EAB70;
  uint64_t v61 = _Block_copy((const void *)(v0 + 16));
  swift_release();
  [v55 addNotificationRequest:v59 withCompletionHandler:v61];

  _Block_release(v61);
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v0 + 304);
  swift_release();
  swift_unknownObjectRelease();
  sub_100B95DC0(v51, (uint64_t (*)(void))type metadata accessor for ItemShareRequestReceivedUserNotification);
  (*(void (**)(uint64_t, uint64_t))(v64 + 8))(v42, v43);
  sub_10001DAB4(v65, &qword_101638CF0);
  sub_10001DAB4(v70, (uint64_t *)&unk_10163BBE0);
  sub_100B95DC0(v69, (uint64_t (*)(void))type metadata accessor for OwnerPeerTrust);
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)v67);
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v0 + 224);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v33 = *(uint64_t (**)(void))(v0 + 8);
LABEL_17:
  return v33();
}

uint64_t sub_100B85040()
{
  uint64_t v1 = v0 + 64;
  sub_100B95DC0(*(void *)(v0 + 552), (uint64_t (*)(void))type metadata accessor for OwnerPeerTrust);
  uint64_t v2 = *(void *)(v0 + 560);
  uint64_t v3 = *(void *)(v0 + 456);
  uint64_t v4 = *(void *)(v0 + 400);
  uint64_t v5 = swift_bridgeObjectRetain();
  uint64_t v6 = sub_10070FB1C(v5);
  swift_bridgeObjectRelease();
  uint64_t v7 = swift_task_alloc();
  *(void *)(v7 + 16) = v4;
  uint64_t v8 = sub_1000D137C((uint64_t)_swiftEmptyDictionarySingleton, (void (*)(uint64_t *, char *))sub_100B961F0, v7, v6);
  swift_release();
  swift_task_dealloc();
  *(void *)(swift_task_alloc() + 16) = v2;
  sub_100B7E124(v8, (uint64_t (*)(uint64_t, uint64_t))sub_100B95BF4, v3);
  swift_bridgeObjectRelease();
  swift_task_dealloc();
  uint64_t v9 = sub_10000588C(&qword_101661010);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 48))(v3, 1, v9) == 1)
  {
    uint64_t v10 = *(void *)(v0 + 576);
    uint64_t v11 = *(void *)(v0 + 568);
    uint64_t v12 = *(void *)(v0 + 488);
    sub_10001DAB4(*(void *)(v0 + 456), &qword_10163B8A0);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v10 + 56))(v12, 1, 1, v11);
  }
  else
  {
    uint64_t v13 = *(void *)(v0 + 576);
    uint64_t v14 = *(void *)(v0 + 568);
    uint64_t v15 = *(void *)(v0 + 488);
    uint64_t v16 = *(void *)(v0 + 456) + *(int *)(v9 + 48);
    (*(void (**)(uint64_t))(v0 + 728))(v15);
    (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v13 + 56))(v15, 0, 1, v14);
    (*(void (**)(uint64_t, uint64_t))(v13 + 8))(v16, v14);
  }
  uint64_t v17 = *(void *)(v0 + 680);
  if (v17)
  {
    sub_10001D074(v0 + 64, v0 + 264, (uint64_t *)&unk_10163BBE0);
    if (*(void *)(v0 + 288))
    {
      sub_10001CEB0((long long *)(v0 + 264), v0 + 144);
      _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v0 + 144);
    }
    else
    {
      sub_10001DAB4(v0 + 264, (uint64_t *)&unk_10163BBE0);
    }
  }
  if (qword_101636FA0 != -1) {
    swift_once();
  }
  uint64_t v18 = *(void *)(v0 + 488);
  uint64_t v19 = *(void *)(v0 + 472);
  uint64_t v20 = type metadata accessor for Logger();
  sub_100010324(v20, (uint64_t)qword_10170EA60);
  sub_10001D074(v0 + 64, v0 + 184, (uint64_t *)&unk_10163BBE0);
  sub_10001D074(v18, v19, &qword_101638CF0);
  swift_bridgeObjectRetain();
  uint64_t v21 = Logger.logObject.getter();
  os_log_type_t v22 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v21, v22))
  {
    BOOL v23 = v17 != 0;
    uint64_t v24 = *(void *)(v0 + 576);
    uint64_t v35 = *(void *)(v0 + 568);
    uint64_t v34 = *(void *)(v0 + 472);
    uint64_t v25 = swift_slowAlloc();
    *(_DWORD *)uint64_t v25 = 67109888;
    swift_bridgeObjectRelease();
    *(_DWORD *)(v0 + 924) = v23;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    *(_WORD *)(v25 + 8) = 1024;
    swift_bridgeObjectRelease();
    *(_DWORD *)(v0 + 920) = 0;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    *(_WORD *)(v25 + 14) = 1024;
    BOOL v26 = *(void *)(v0 + 208) != 0;
    sub_10001DAB4(v0 + 184, (uint64_t *)&unk_10163BBE0);
    *(_DWORD *)(v0 + 916) = v26;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v25 + 20) = 1024;
    int v27 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v24 + 48))(v34, 1, v35);
    uint64_t v1 = v0 + 64;
    BOOL v28 = v27 != 1;
    sub_10001DAB4(v34, &qword_101638CF0);
    *(_DWORD *)(v0 + 912) = v28;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl((void *)&_mh_execute_header, v21, v22, "Can't post Request Received Notification!\nbeaconName(%{BOOL}d), memberName(%{BOOL}d),\nbeaconRecord(%{BOOL}d), clientShareIdentifier(%{BOOL}d)", (uint8_t *)v25, 0x1Au);
    swift_slowDealloc();
  }
  else
  {
    sub_10001DAB4(*(void *)(v0 + 472), &qword_101638CF0);
    sub_10001DAB4(v0 + 184, (uint64_t *)&unk_10163BBE0);
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease_n();
  }

  uint64_t v29 = *(void *)(v0 + 560);
  uint64_t v30 = *(void *)(v0 + 488);
  sub_100B954CC();
  swift_allocError();
  *uint64_t v31 = 0;
  swift_willThrow();
  swift_unknownObjectRelease();
  sub_10001DAB4(v30, &qword_101638CF0);
  sub_10001DAB4(v1, (uint64_t *)&unk_10163BBE0);
  sub_100B95DC0(v29, (uint64_t (*)(void))type metadata accessor for OwnerPeerTrust);
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v0 + 224);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v32 = *(uint64_t (**)(void))(v0 + 8);
  return v32();
}

uint64_t sub_100B85690()
{
  uint64_t v1 = *(void (**)(unint64_t, uint64_t, uint64_t))(v0 + 728);
  uint64_t v2 = *(void (**)(uint64_t, uint64_t, uint64_t))(v0 + 704);
  uint64_t v3 = *(void *)(v0 + 688);
  uint64_t v4 = *(void *)(v0 + 616);
  uint64_t v5 = *(void *)(v0 + 608);
  uint64_t v6 = *(void *)(v0 + 568);
  unint64_t v7 = (*(unsigned __int8 *)(v0 + 936) + 24) & ~(unint64_t)*(unsigned __int8 *)(v0 + 936);
  *(void *)(v0 + 816) = *(void *)(v3 + 136);
  v2(v4, v5, v6);
  uint64_t v8 = swift_allocObject();
  *(void *)(v0 + 824) = v8;
  *(void *)(v8 + 16) = v3;
  v1(v8 + v7, v4, v6);
  swift_retain();
  return _swift_task_switch(sub_100B8578C, 0, 0);
}

uint64_t sub_100B8578C()
{
  uint64_t v1 = v0[103];
  uint64_t v2 = v0[102];
  uint64_t v3 = (void *)swift_task_alloc();
  v0[104] = v3;
  v3[2] = v2;
  v3[3] = sub_100B95BDC;
  v3[4] = v1;
  uint64_t v4 = (void *)swift_task_alloc();
  v0[105] = v4;
  *uint64_t v4 = v0;
  v4[1] = sub_100B85894;
  uint64_t v6 = v0[63];
  uint64_t v5 = v0[64];
  return withCheckedContinuation<A>(isolation:function:_:)(v5, 0, 0, 0xD000000000000012, 0x80000001013F1870, sub_100090E94, v3, v6);
}

uint64_t sub_100B85894()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 432);
  swift_task_dealloc();
  swift_release();
  swift_task_dealloc();
  return _swift_task_switch(sub_100B859E4, v1, 0);
}

uint64_t sub_100B859E4()
{
  BOOL v28 = v0;
  uint64_t v1 = v0[66];
  uint64_t v2 = v0[64];
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v0[67] + 48))(v2, 1, v1) == 1)
  {
    swift_bridgeObjectRelease();
    sub_10001DAB4(v2, (uint64_t *)&unk_1016607D0);
    if (qword_101636FA0 != -1) {
      swift_once();
    }
    uint64_t v3 = (void (*)(uint64_t, uint64_t, uint64_t))v0[88];
    uint64_t v4 = v0[76];
    uint64_t v5 = v0[75];
    uint64_t v6 = v0[71];
    uint64_t v7 = type metadata accessor for Logger();
    sub_100010324(v7, (uint64_t)qword_10170EA60);
    v3(v5, v4, v6);
    uint64_t v8 = Logger.logObject.getter();
    os_log_type_t v9 = static os_log_type_t.error.getter();
    BOOL v10 = os_log_type_enabled(v8, v9);
    uint64_t v11 = v0[75];
    uint64_t v12 = v0[72];
    uint64_t v13 = v0[71];
    if (v10)
    {
      uint64_t v14 = swift_slowAlloc();
      uint64_t v27 = swift_slowAlloc();
      *(_DWORD *)uint64_t v14 = 141558275;
      v0[49] = 1752392040;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v14 + 12) = 2081;
      sub_100B95984((unint64_t *)&qword_101638B10, 255, (void (*)(uint64_t))&type metadata accessor for UUID);
      uint64_t v15 = dispatch thunk of CustomStringConvertible.description.getter();
      v0[48] = sub_1008FA0F0(v15, v16, &v27);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      uint64_t v17 = *(void (**)(uint64_t, uint64_t))(v12 + 8);
      v17(v11, v13);
      _os_log_impl((void *)&_mh_execute_header, v8, v9, "Can't post Request Received Notification!\nNo peer trust for %{private,mask.hash}s", (uint8_t *)v14, 0x16u);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      uint64_t v17 = *(void (**)(uint64_t, uint64_t))(v12 + 8);
      v17(v0[75], v0[71]);
    }

    uint64_t v22 = v0[76];
    uint64_t v23 = v0[71];
    sub_100B954CC();
    swift_allocError();
    *uint64_t v24 = 0;
    swift_willThrow();
    swift_unknownObjectRelease();
    v17(v22, v23);
    sub_10001DAB4((uint64_t)(v0 + 8), (uint64_t *)&unk_10163BBE0);
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)(v0 + 28));
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v25 = (uint64_t (*)(void))v0[1];
    return v25();
  }
  else
  {
    uint64_t v18 = v0[68];
    sub_100B95FE8(v2, v18, (uint64_t (*)(void))type metadata accessor for OwnerPeerTrust);
    uint64_t v19 = v18 + *(int *)(v1 + 28);
    BOOL v26 = (uint64_t (*)(uint64_t))((char *)&dword_101661678 + dword_101661678);
    uint64_t v20 = (void *)swift_task_alloc();
    v0[106] = v20;
    *uint64_t v20 = v0;
    v20[1] = sub_100B85EA8;
    return v26(v19);
  }
}

uint64_t sub_100B85EA8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = (void *)*v4;
  v5[107] = a1;
  v5[108] = a2;
  v5[109] = a3;
  swift_task_dealloc();
  if (v3)
  {
    uint64_t v6 = v5[54];
    swift_bridgeObjectRelease();
    swift_errorRelease();
    uint64_t v7 = sub_100B865FC;
    uint64_t v8 = v6;
  }
  else
  {
    uint64_t v8 = v5[54];
    uint64_t v7 = sub_100B85FE0;
  }
  return _swift_task_switch(v7, v8, 0);
}

uint64_t sub_100B85FE0()
{
  uint64_t v26 = v0;
  uint64_t v1 = *(void *)(v0 + 872);
  if (v1)
  {
    char v2 = *(unsigned char *)(v0 + 856);
    sub_100B95ED4(*(void *)(v0 + 544), *(void *)(v0 + 560), (uint64_t (*)(void))type metadata accessor for OwnerPeerTrust);
    sub_10001CD44((void *)(v0 + 224), *(void *)(v0 + 248));
    uint64_t v3 = (void *)swift_task_alloc();
    *(void *)(v0 + 880) = v3;
    *uint64_t v3 = v0;
    v3[1] = sub_100B86480;
    uint64_t v4 = *(void *)(v0 + 864);
    return sub_100CFA33C(v2, v4, v1);
  }
  else
  {
    swift_bridgeObjectRelease();
    sub_100B95DC0(*(void *)(v0 + 544), (uint64_t (*)(void))type metadata accessor for OwnerPeerTrust);
    if (qword_101636FA0 != -1) {
      swift_once();
    }
    uint64_t v6 = *(void (**)(uint64_t, uint64_t, uint64_t))(v0 + 704);
    uint64_t v7 = *(void *)(v0 + 608);
    uint64_t v8 = *(void *)(v0 + 600);
    uint64_t v9 = *(void *)(v0 + 568);
    uint64_t v10 = type metadata accessor for Logger();
    sub_100010324(v10, (uint64_t)qword_10170EA60);
    v6(v8, v7, v9);
    uint64_t v11 = Logger.logObject.getter();
    os_log_type_t v12 = static os_log_type_t.error.getter();
    BOOL v13 = os_log_type_enabled(v11, v12);
    uint64_t v14 = *(void *)(v0 + 600);
    uint64_t v15 = *(void *)(v0 + 576);
    uint64_t v16 = *(void *)(v0 + 568);
    if (v13)
    {
      uint64_t v17 = swift_slowAlloc();
      uint64_t v25 = swift_slowAlloc();
      *(_DWORD *)uint64_t v17 = 141558275;
      *(void *)(v0 + 392) = 1752392040;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v17 + 12) = 2081;
      sub_100B95984((unint64_t *)&qword_101638B10, 255, (void (*)(uint64_t))&type metadata accessor for UUID);
      uint64_t v18 = dispatch thunk of CustomStringConvertible.description.getter();
      *(void *)(v0 + 384) = sub_1008FA0F0(v18, v19, &v25);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      uint64_t v20 = *(void (**)(uint64_t, uint64_t))(v15 + 8);
      v20(v14, v16);
      _os_log_impl((void *)&_mh_execute_header, v11, v12, "Can't post Request Received Notification!\nNo peer trust for %{private,mask.hash}s", (uint8_t *)v17, 0x16u);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      uint64_t v20 = *(void (**)(uint64_t, uint64_t))(v15 + 8);
      v20(*(void *)(v0 + 600), *(void *)(v0 + 568));
    }

    uint64_t v21 = *(void *)(v0 + 608);
    uint64_t v22 = *(void *)(v0 + 568);
    sub_100B954CC();
    swift_allocError();
    *uint64_t v23 = 0;
    swift_willThrow();
    swift_unknownObjectRelease();
    v20(v21, v22);
    sub_10001DAB4(v0 + 64, (uint64_t *)&unk_10163BBE0);
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v0 + 224);
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v24 = *(uint64_t (**)(void))(v0 + 8);
    return v24();
  }
}

uint64_t sub_100B86480(uint64_t a1, uint64_t a2)
{
  uint64_t v6 = (void *)*v3;
  v6[111] = v2;
  swift_task_dealloc();
  uint64_t v7 = v6[54];
  if (v2)
  {
    swift_errorRelease();
    swift_bridgeObjectRelease();
    uint64_t v8 = sub_100B876AC;
  }
  else
  {
    swift_bridgeObjectRelease();
    v6[112] = a2;
    v6[113] = a1;
    uint64_t v8 = sub_100B869DC;
  }
  return _swift_task_switch(v8, v7, 0);
}

uint64_t sub_100B865FC()
{
  uint64_t v22 = v0;
  sub_100B95DC0(v0[68], (uint64_t (*)(void))type metadata accessor for OwnerPeerTrust);
  if (qword_101636FA0 != -1) {
    swift_once();
  }
  uint64_t v1 = (void (*)(uint64_t, uint64_t, uint64_t))v0[88];
  uint64_t v2 = v0[76];
  uint64_t v3 = v0[75];
  uint64_t v4 = v0[71];
  uint64_t v5 = type metadata accessor for Logger();
  sub_100010324(v5, (uint64_t)qword_10170EA60);
  v1(v3, v2, v4);
  uint64_t v6 = Logger.logObject.getter();
  os_log_type_t v7 = static os_log_type_t.error.getter();
  BOOL v8 = os_log_type_enabled(v6, v7);
  uint64_t v9 = v0[75];
  uint64_t v10 = v0[72];
  uint64_t v11 = v0[71];
  if (v8)
  {
    uint64_t v12 = swift_slowAlloc();
    uint64_t v21 = swift_slowAlloc();
    *(_DWORD *)uint64_t v12 = 141558275;
    v0[49] = 1752392040;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v12 + 12) = 2081;
    sub_100B95984((unint64_t *)&qword_101638B10, 255, (void (*)(uint64_t))&type metadata accessor for UUID);
    uint64_t v13 = dispatch thunk of CustomStringConvertible.description.getter();
    v0[48] = sub_1008FA0F0(v13, v14, &v21);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    uint64_t v15 = *(void (**)(uint64_t, uint64_t))(v10 + 8);
    v15(v9, v11);
    _os_log_impl((void *)&_mh_execute_header, v6, v7, "Can't post Request Received Notification!\nNo peer trust for %{private,mask.hash}s", (uint8_t *)v12, 0x16u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    uint64_t v15 = *(void (**)(uint64_t, uint64_t))(v10 + 8);
    v15(v0[75], v0[71]);
  }

  uint64_t v16 = v0[76];
  uint64_t v17 = v0[71];
  sub_100B954CC();
  swift_allocError();
  unsigned char *v18 = 0;
  swift_willThrow();
  swift_unknownObjectRelease();
  v15(v16, v17);
  sub_10001DAB4((uint64_t)(v0 + 8), (uint64_t *)&unk_10163BBE0);
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)(v0 + 28));
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  unint64_t v19 = (uint64_t (*)(void))v0[1];
  return v19();
}

uint64_t sub_100B869DC()
{
  uint64_t v1 = v0 + 224;
  uint64_t v74 = *(void *)(v0 + 896);
  uint64_t v71 = *(void *)(v0 + 904);
  uint64_t v2 = *(void *)(v0 + 608);
  uint64_t v3 = *(void *)(v0 + 576);
  uint64_t v4 = *(void *)(v0 + 568);
  sub_100B95DC0(*(void *)(v0 + 544), (uint64_t (*)(void))type metadata accessor for OwnerPeerTrust);
  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v2, v4);
  uint64_t v5 = *(void *)(v0 + 560);
  uint64_t v6 = *(void *)(v0 + 456);
  uint64_t v7 = *(void *)(v0 + 400);
  uint64_t v8 = swift_bridgeObjectRetain();
  uint64_t v9 = sub_10070FB1C(v8);
  swift_bridgeObjectRelease();
  uint64_t v10 = swift_task_alloc();
  *(void *)(v10 + 16) = v7;
  uint64_t v11 = sub_1000D137C((uint64_t)_swiftEmptyDictionarySingleton, (void (*)(uint64_t *, char *))sub_100B961F0, v10, v9);
  swift_release();
  swift_task_dealloc();
  *(void *)(swift_task_alloc() + 16) = v5;
  sub_100B7E124(v11, (uint64_t (*)(uint64_t, uint64_t))sub_100B95BF4, v6);
  swift_bridgeObjectRelease();
  swift_task_dealloc();
  uint64_t v12 = sub_10000588C(&qword_101661010);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v12 - 8) + 48))(v6, 1, v12) == 1)
  {
    uint64_t v13 = *(void *)(v0 + 576);
    uint64_t v14 = *(void *)(v0 + 568);
    uint64_t v15 = *(void *)(v0 + 488);
    sub_10001DAB4(*(void *)(v0 + 456), &qword_10163B8A0);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v13 + 56))(v15, 1, 1, v14);
  }
  else
  {
    uint64_t v16 = *(void *)(v0 + 576);
    uint64_t v17 = *(void *)(v0 + 568);
    uint64_t v18 = *(void *)(v0 + 488);
    uint64_t v19 = *(void *)(v0 + 456) + *(int *)(v12 + 48);
    (*(void (**)(uint64_t))(v0 + 728))(v18);
    (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v16 + 56))(v18, 0, 1, v17);
    (*(void (**)(uint64_t, uint64_t))(v16 + 8))(v19, v17);
  }
  uint64_t v20 = *(void *)(v0 + 680);
  uint64_t v73 = v0 + 64;
  if (!v20) {
    goto LABEL_11;
  }
  sub_10001D074(v0 + 64, v0 + 264, (uint64_t *)&unk_10163BBE0);
  if (!*(void *)(v0 + 288))
  {
    sub_10001DAB4(v0 + 264, (uint64_t *)&unk_10163BBE0);
    goto LABEL_11;
  }
  sub_10001CEB0((long long *)(v0 + 264), v0 + 144);
  if (!v74)
  {
LABEL_9:
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v0 + 144);
LABEL_11:
    if (qword_101636FA0 != -1) {
      swift_once();
    }
    uint64_t v24 = *(void *)(v0 + 488);
    uint64_t v25 = *(void *)(v0 + 472);
    uint64_t v26 = type metadata accessor for Logger();
    sub_100010324(v26, (uint64_t)qword_10170EA60);
    sub_10001D074(v0 + 64, v0 + 184, (uint64_t *)&unk_10163BBE0);
    sub_10001D074(v24, v25, &qword_101638CF0);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    uint64_t v27 = Logger.logObject.getter();
    os_log_type_t v28 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v27, v28))
    {
      BOOL v29 = v20 != 0;
      uint64_t v30 = *(void *)(v0 + 576);
      uint64_t v69 = *(void *)(v0 + 568);
      uint64_t v66 = *(void *)(v0 + 472);
      uint64_t v31 = swift_slowAlloc();
      *(_DWORD *)uint64_t v31 = 67109888;
      swift_bridgeObjectRelease();
      *(_DWORD *)(v0 + 924) = v29;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      *(_WORD *)(v31 + 8) = 1024;
      swift_bridgeObjectRelease();
      *(_DWORD *)(v0 + 920) = v74 != 0;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      *(_WORD *)(v31 + 14) = 1024;
      BOOL v32 = *(void *)(v0 + 208) != 0;
      sub_10001DAB4(v0 + 184, (uint64_t *)&unk_10163BBE0);
      *(_DWORD *)(v0 + 916) = v32;
      uint64_t v1 = v0 + 224;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v31 + 20) = 1024;
      LODWORD(v30) = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v30 + 48))(v66, 1, v69) != 1;
      sub_10001DAB4(v66, &qword_101638CF0);
      *(_DWORD *)(v0 + 912) = v30;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      _os_log_impl((void *)&_mh_execute_header, v27, v28, "Can't post Request Received Notification!\nbeaconName(%{BOOL}d), memberName(%{BOOL}d),\nbeaconRecord(%{BOOL}d), clientShareIdentifier(%{BOOL}d)", (uint8_t *)v31, 0x1Au);
      swift_slowDealloc();
    }
    else
    {
      sub_10001DAB4(*(void *)(v0 + 472), &qword_101638CF0);
      sub_10001DAB4(v0 + 184, (uint64_t *)&unk_10163BBE0);
      swift_bridgeObjectRelease_n();
      swift_bridgeObjectRelease_n();
    }

    uint64_t v33 = *(void *)(v0 + 560);
    uint64_t v34 = *(void *)(v0 + 488);
    sub_100B954CC();
    swift_allocError();
    *uint64_t v35 = 0;
    swift_willThrow();
    swift_unknownObjectRelease();
    sub_10001DAB4(v34, &qword_101638CF0);
    sub_10001DAB4(v73, (uint64_t *)&unk_10163BBE0);
    sub_100B95DC0(v33, (uint64_t (*)(void))type metadata accessor for OwnerPeerTrust);
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v1);
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v36 = *(uint64_t (**)(void))(v0 + 8);
    goto LABEL_17;
  }
  uint64_t v21 = *(void *)(v0 + 576);
  uint64_t v22 = *(void *)(v0 + 568);
  uint64_t v23 = *(void *)(v0 + 480);
  sub_10001D074(*(void *)(v0 + 488), v23, &qword_101638CF0);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v21 + 48))(v23, 1, v22) == 1)
  {
    sub_10001DAB4(*(void *)(v0 + 480), &qword_101638CF0);
    goto LABEL_9;
  }
  (*(void (**)(void, void, void))(v0 + 728))(*(void *)(v0 + 592), *(void *)(v0 + 480), *(void *)(v0 + 568));
  if (qword_101636FA0 != -1) {
    swift_once();
  }
  uint64_t v38 = type metadata accessor for Logger();
  sub_100010324(v38, (uint64_t)qword_10170EA60);
  uint64_t v70 = (void *)(v0 + 144);
  sub_10001D010(v0 + 144, v0 + 344);
  uint64_t v39 = Logger.logObject.getter();
  os_log_type_t v40 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v39, v40))
  {
    NSString v41 = (uint8_t *)swift_slowAlloc();
    *(_DWORD *)NSString v41 = 67109120;
    uint64_t v42 = *(void *)(v0 + 368);
    uint64_t v43 = *(void *)(v0 + 376);
    sub_10001CD44((void *)(v0 + 344), v42);
    LODWORD(v42) = (*(uint64_t (**)(uint64_t, uint64_t))(v43 + 96))(v42, v43) & 1;
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v0 + 344);
    *(_DWORD *)(v0 + 928) = v42;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl((void *)&_mh_execute_header, v39, v40, "post Request Received Notification, isAirTag:%{BOOL}d", v41, 8u);
    swift_slowDealloc();
  }
  else
  {
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v0 + 344);
  }

  uint64_t v44 = *(void (**)(char *, uint64_t, uint64_t))(v0 + 704);
  uint64_t v45 = *(void *)(v0 + 592);
  uint64_t v46 = *(void *)(v0 + 568);
  uint64_t v72 = *(void *)(v0 + 560);
  uint64_t v67 = *(void *)(v0 + 576);
  uint64_t v68 = *(void *)(v0 + 488);
  uint64_t v47 = *(int **)(v0 + 440);
  char v48 = *(char **)(v0 + 448);
  uint64_t v65 = *(void *)(v0 + 672);
  uint64_t v49 = *(void *)(v0 + 168);
  uint64_t v50 = *(void *)(v0 + 176);
  sub_10001CD44(v70, v49);
  char v51 = (*(uint64_t (**)(uint64_t, uint64_t))(v50 + 96))(v49, v50);
  *(_WORD *)char v48 = 25089;
  v44(&v48[v47[6]], v45, v46);
  uint64_t v52 = &v48[v47[7]];
  *(void *)uint64_t v52 = v71;
  *((void *)v52 + 1) = v74;
  id v53 = &v48[v47[8]];
  *(void *)id v53 = v65;
  *((void *)v53 + 1) = v20;
  v48[v47[9]] = v51 & 1;
  uint64_t v54 = (uint64_t)v48;
  swift_unownedRetainStrong();
  *(void *)(v0 + 328) = v47;
  *(void *)(v0 + 336) = &off_1015BD7F0;
  id v55 = sub_10001D958((uint64_t *)(v0 + 304));
  sub_100B95ED4((uint64_t)v48, (uint64_t)v55, (uint64_t (*)(void))type metadata accessor for ItemShareRequestReceivedUserNotification);
  id v56 = objc_allocWithZone((Class)UNUserNotificationCenter);
  NSString v57 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  id v58 = [v56 initWithBundleIdentifier:v57];

  id v59 = sub_1010983DC((uint64_t)v55);
  UUID.uuidString.getter();
  id v60 = v59;
  NSString v61 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  id v62 = [self requestWithIdentifier:v61 content:v60 trigger:0 destinations:7];

  sub_10001D010(v0 + 304, v0 + 104);
  uint64_t v63 = swift_allocObject();
  sub_10001CEB0((long long *)(v0 + 104), v63 + 16);
  *(void *)(v63 + 56) = 0;
  *(void *)(v63 + 64) = 0;
  *(void *)(v0 + 48) = sub_1002F6720;
  *(void *)(v0 + 56) = v63;
  *(void *)(v0 + 16) = _NSConcreteStackBlock;
  *(void *)(v0 + 24) = 1107296256;
  *(void *)(v0 + 32) = sub_100769474;
  *(void *)(v0 + 40) = &unk_1015EAB70;
  uint64_t v64 = _Block_copy((const void *)(v0 + 16));
  swift_release();
  [v58 addNotificationRequest:v62 withCompletionHandler:v64];

  _Block_release(v64);
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v0 + 304);
  swift_release();
  swift_unknownObjectRelease();
  sub_100B95DC0(v54, (uint64_t (*)(void))type metadata accessor for ItemShareRequestReceivedUserNotification);
  (*(void (**)(uint64_t, uint64_t))(v67 + 8))(v45, v46);
  sub_10001DAB4(v68, &qword_101638CF0);
  sub_10001DAB4(v73, (uint64_t *)&unk_10163BBE0);
  sub_100B95DC0(v72, (uint64_t (*)(void))type metadata accessor for OwnerPeerTrust);
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)v70);
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v0 + 224);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v36 = *(uint64_t (**)(void))(v0 + 8);
LABEL_17:
  return v36();
}

uint64_t sub_100B876AC()
{
  uint64_t v1 = v0 + 64;
  uint64_t v2 = *(void *)(v0 + 608);
  uint64_t v3 = *(void *)(v0 + 576);
  uint64_t v4 = *(void *)(v0 + 568);
  sub_100B95DC0(*(void *)(v0 + 544), (uint64_t (*)(void))type metadata accessor for OwnerPeerTrust);
  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v2, v4);
  uint64_t v5 = *(void *)(v0 + 560);
  uint64_t v6 = *(void *)(v0 + 456);
  uint64_t v7 = *(void *)(v0 + 400);
  uint64_t v8 = swift_bridgeObjectRetain();
  uint64_t v9 = sub_10070FB1C(v8);
  swift_bridgeObjectRelease();
  uint64_t v10 = swift_task_alloc();
  *(void *)(v10 + 16) = v7;
  uint64_t v11 = sub_1000D137C((uint64_t)_swiftEmptyDictionarySingleton, (void (*)(uint64_t *, char *))sub_100B961F0, v10, v9);
  swift_release();
  swift_task_dealloc();
  *(void *)(swift_task_alloc() + 16) = v5;
  sub_100B7E124(v11, (uint64_t (*)(uint64_t, uint64_t))sub_100B95BF4, v6);
  swift_bridgeObjectRelease();
  swift_task_dealloc();
  uint64_t v12 = sub_10000588C(&qword_101661010);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v12 - 8) + 48))(v6, 1, v12) == 1)
  {
    uint64_t v13 = *(void *)(v0 + 576);
    uint64_t v14 = *(void *)(v0 + 568);
    uint64_t v15 = *(void *)(v0 + 488);
    sub_10001DAB4(*(void *)(v0 + 456), &qword_10163B8A0);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v13 + 56))(v15, 1, 1, v14);
  }
  else
  {
    uint64_t v16 = *(void *)(v0 + 576);
    uint64_t v17 = *(void *)(v0 + 568);
    uint64_t v18 = *(void *)(v0 + 488);
    uint64_t v19 = *(void *)(v0 + 456) + *(int *)(v12 + 48);
    (*(void (**)(uint64_t))(v0 + 728))(v18);
    (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v16 + 56))(v18, 0, 1, v17);
    (*(void (**)(uint64_t, uint64_t))(v16 + 8))(v19, v17);
  }
  uint64_t v20 = *(void *)(v0 + 680);
  if (v20)
  {
    sub_10001D074(v0 + 64, v0 + 264, (uint64_t *)&unk_10163BBE0);
    if (*(void *)(v0 + 288))
    {
      sub_10001CEB0((long long *)(v0 + 264), v0 + 144);
      _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v0 + 144);
    }
    else
    {
      sub_10001DAB4(v0 + 264, (uint64_t *)&unk_10163BBE0);
    }
  }
  if (qword_101636FA0 != -1) {
    swift_once();
  }
  uint64_t v21 = *(void *)(v0 + 488);
  uint64_t v22 = *(void *)(v0 + 472);
  uint64_t v23 = type metadata accessor for Logger();
  sub_100010324(v23, (uint64_t)qword_10170EA60);
  sub_10001D074(v0 + 64, v0 + 184, (uint64_t *)&unk_10163BBE0);
  sub_10001D074(v21, v22, &qword_101638CF0);
  swift_bridgeObjectRetain();
  uint64_t v24 = Logger.logObject.getter();
  os_log_type_t v25 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v24, v25))
  {
    BOOL v26 = v20 != 0;
    uint64_t v27 = *(void *)(v0 + 576);
    uint64_t v38 = *(void *)(v0 + 568);
    uint64_t v37 = *(void *)(v0 + 472);
    uint64_t v28 = swift_slowAlloc();
    *(_DWORD *)uint64_t v28 = 67109888;
    swift_bridgeObjectRelease();
    *(_DWORD *)(v0 + 924) = v26;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    *(_WORD *)(v28 + 8) = 1024;
    swift_bridgeObjectRelease();
    *(_DWORD *)(v0 + 920) = 0;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    *(_WORD *)(v28 + 14) = 1024;
    BOOL v29 = *(void *)(v0 + 208) != 0;
    sub_10001DAB4(v0 + 184, (uint64_t *)&unk_10163BBE0);
    *(_DWORD *)(v0 + 916) = v29;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v28 + 20) = 1024;
    int v30 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v27 + 48))(v37, 1, v38);
    uint64_t v1 = v0 + 64;
    BOOL v31 = v30 != 1;
    sub_10001DAB4(v37, &qword_101638CF0);
    *(_DWORD *)(v0 + 912) = v31;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl((void *)&_mh_execute_header, v24, v25, "Can't post Request Received Notification!\nbeaconName(%{BOOL}d), memberName(%{BOOL}d),\nbeaconRecord(%{BOOL}d), clientShareIdentifier(%{BOOL}d)", (uint8_t *)v28, 0x1Au);
    swift_slowDealloc();
  }
  else
  {
    sub_10001DAB4(*(void *)(v0 + 472), &qword_101638CF0);
    sub_10001DAB4(v0 + 184, (uint64_t *)&unk_10163BBE0);
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease_n();
  }

  uint64_t v32 = *(void *)(v0 + 560);
  uint64_t v33 = *(void *)(v0 + 488);
  sub_100B954CC();
  swift_allocError();
  *uint64_t v34 = 0;
  swift_willThrow();
  swift_unknownObjectRelease();
  sub_10001DAB4(v33, &qword_101638CF0);
  sub_10001DAB4(v1, (uint64_t *)&unk_10163BBE0);
  sub_100B95DC0(v32, (uint64_t (*)(void))type metadata accessor for OwnerPeerTrust);
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v0 + 224);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v35 = *(uint64_t (**)(void))(v0 + 8);
  return v35();
}

uint64_t sub_100B87D20()
{
  swift_unknownObjectRelease();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_100B87E70(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  *(void *)(v6 + 72) = a5;
  *(void *)(v6 + 80) = v5;
  *(void *)(v6 + 56) = a3;
  *(void *)(v6 + 64) = a4;
  *(void *)(v6 + 40) = a1;
  *(void *)(v6 + 48) = a2;
  uint64_t v8 = type metadata accessor for MemberPeerTrust();
  *(void *)(v6 + 88) = v8;
  *(void *)(v6 + 96) = *(void *)(v8 - 8);
  *(void *)(v6 + 104) = swift_task_alloc();
  uint64_t v9 = type metadata accessor for SharedBeaconRecord(0);
  *(void *)(v6 + 112) = v9;
  *(void *)(v6 + 120) = *(void *)(v9 - 8);
  *(void *)(v6 + 128) = swift_task_alloc();
  *(void *)(v6 + 136) = swift_task_alloc();
  *(void *)(v6 + 144) = swift_task_alloc();
  *(void *)(v6 + 152) = swift_task_alloc();
  *(void *)(v6 + 160) = sub_10000588C((uint64_t *)&unk_10163B890);
  *(void *)(v6 + 168) = swift_task_alloc();
  *(void *)(v6 + 176) = swift_task_alloc();
  *(void *)(v6 + 184) = swift_task_alloc();
  uint64_t v10 = type metadata accessor for UUID();
  *(void *)(v6 + 192) = v10;
  uint64_t v11 = *(void *)(v10 - 8);
  *(void *)(v6 + 200) = v11;
  *(void *)(v6 + 208) = *(void *)(v11 + 64);
  *(void *)(v6 + 216) = swift_task_alloc();
  *(void *)(v6 + 224) = sub_10000588C((uint64_t *)&unk_101653D50);
  *(void *)(v6 + 232) = swift_task_alloc();
  *(void *)(v6 + 240) = swift_task_alloc();
  *(void *)(v6 + 248) = swift_task_alloc();
  uint64_t v12 = type metadata accessor for MemberSharingCircle();
  *(void *)(v6 + 256) = v12;
  uint64_t v13 = *(int *)(v12 + 24);
  *(_DWORD *)(v6 + 404) = v13;
  uint64_t v14 = a2 + v13;
  uint64_t v15 = (void *)swift_task_alloc();
  *(void *)(v6 + 264) = v15;
  void *v15 = v6;
  v15[1] = sub_100B88114;
  return sub_100B945DC(v14);
}

uint64_t sub_100B88114(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = (void *)*v2;
  uint64_t v4 = (void *)*v2;
  v4[2] = v2;
  v4[3] = a1;
  v4[4] = a2;
  uint64_t v5 = v3[10];
  v4[34] = a2;
  swift_task_dealloc();
  return _swift_task_switch(sub_100B88230, v5, 0);
}

uint64_t sub_100B88230()
{
  uint64_t v1 = *(void *)(*(void *)(v0 + 80) + 136);
  *(void *)(v0 + 280) = v1;
  return _swift_task_switch(sub_100B88254, v1, 0);
}

uint64_t sub_100B88254()
{
  uint64_t v1 = *(void *)(v0 + 280);
  uint64_t v2 = *(void *)(v0 + 216);
  uint64_t v3 = *(void *)(v0 + 192);
  uint64_t v4 = *(void *)(v0 + 200);
  uint64_t v5 = *(void *)(v0 + 48) + *(int *)(v0 + 404);
  *(void *)(v0 + 288) = *(void *)(v1 + 136);
  uint64_t v6 = *(void (**)(uint64_t, uint64_t, uint64_t))(v4 + 16);
  *(void *)(v0 + 296) = v6;
  *(void *)(v0 + 304) = (v4 + 16) & 0xFFFFFFFFFFFFLL | 0xE3BA000000000000;
  v6(v2, v5, v3);
  int v7 = *(_DWORD *)(v4 + 80);
  *(_DWORD *)(v0 + 408) = v7;
  unint64_t v8 = (v7 + 24) & ~(unint64_t)v7;
  uint64_t v9 = swift_allocObject();
  *(void *)(v0 + 312) = v9;
  *(void *)(v9 + 16) = v1;
  uint64_t v10 = *(void (**)(unint64_t, uint64_t, uint64_t))(v4 + 32);
  *(void *)(v0 + 320) = v10;
  *(void *)(v0 + 328) = (v4 + 32) & 0xFFFFFFFFFFFFLL | 0x48D8000000000000;
  v10(v9 + v8, v2, v3);
  swift_retain();
  return _swift_task_switch(sub_100B88370, 0, 0);
}

uint64_t sub_100B88370()
{
  uint64_t v1 = v0[39];
  uint64_t v2 = v0[36];
  uint64_t v3 = (void *)swift_task_alloc();
  v0[42] = v3;
  v3[2] = v2;
  v3[3] = sub_100B959D0;
  v3[4] = v1;
  uint64_t v4 = (void *)swift_task_alloc();
  v0[43] = v4;
  *uint64_t v4 = v0;
  v4[1] = sub_100B8847C;
  uint64_t v5 = v0[31];
  uint64_t v6 = v0[28];
  return withCheckedContinuation<A>(isolation:function:_:)(v5, 0, 0, 0xD000000000000012, 0x80000001013F1870, sub_100091084, v3, v6);
}

uint64_t sub_100B8847C()
{
  uint64_t v1 = *v0;
  uint64_t v2 = *(void *)(*v0 + 280);
  uint64_t v3 = *(void *)(*v0 + 256);
  swift_task_dealloc();
  swift_release();
  swift_task_dealloc();
  *(_DWORD *)(v1 + 412) = *(_DWORD *)(v3 + 32);
  return _swift_task_switch(sub_100B885F0, v2, 0);
}

uint64_t sub_100B885F0()
{
  uint64_t v1 = *(void (**)(unint64_t, uint64_t, uint64_t))(v0 + 320);
  uint64_t v2 = *(void (**)(uint64_t, uint64_t, uint64_t))(v0 + 296);
  uint64_t v3 = *(void *)(v0 + 280);
  uint64_t v4 = *(void *)(v0 + 216);
  uint64_t v5 = *(void *)(v0 + 192);
  uint64_t v6 = *(void *)(v0 + 48) + *(int *)(v0 + 412);
  unint64_t v7 = (*(unsigned __int8 *)(v0 + 408) + 24) & ~(unint64_t)*(unsigned __int8 *)(v0 + 408);
  *(void *)(v0 + 352) = *(void *)(v3 + 136);
  v2(v4, v6, v5);
  uint64_t v8 = swift_allocObject();
  *(void *)(v0 + 360) = v8;
  *(void *)(v8 + 16) = v3;
  v1(v8 + v7, v4, v5);
  swift_retain();
  return _swift_task_switch(sub_100B886E8, 0, 0);
}

uint64_t sub_100B886E8()
{
  uint64_t v2 = v0[44];
  uint64_t v1 = v0[45];
  uint64_t v3 = (void *)swift_task_alloc();
  v0[46] = v3;
  v3[2] = v2;
  v3[3] = sub_100B959EC;
  v3[4] = v1;
  uint64_t v4 = (void *)swift_task_alloc();
  v0[47] = v4;
  *uint64_t v4 = v0;
  v4[1] = sub_100B887F0;
  uint64_t v5 = v0[23];
  uint64_t v6 = v0[20];
  return withCheckedContinuation<A>(isolation:function:_:)(v5, 0, 0, 0xD000000000000012, 0x80000001013F1870, sub_1007E0D10, v3, v6);
}

uint64_t sub_100B887F0()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 80);
  swift_task_dealloc();
  swift_release();
  swift_task_dealloc();
  return _swift_task_switch(sub_100B88940, v1, 0);
}

uint64_t sub_100B88940()
{
  uint64_t v1 = *(void *)(v0 + 272);
  if (!v1) {
    goto LABEL_7;
  }
  uint64_t v2 = *(void *)(v0 + 240);
  uint64_t v3 = *(void *)(v0 + 112);
  uint64_t v4 = *(void *)(v0 + 120);
  sub_10001D074(*(void *)(v0 + 248), v2, (uint64_t *)&unk_101653D50);
  int v5 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v4 + 48))(v2, 1, v3);
  uint64_t v6 = *(void *)(v0 + 240);
  if (v5 == 1)
  {
    unint64_t v7 = (uint64_t *)&unk_101653D50;
LABEL_6:
    sub_10001DAB4(v6, v7);
LABEL_7:
    if (qword_101636FA0 != -1) {
      swift_once();
    }
    uint64_t v14 = *(void *)(v0 + 248);
    uint64_t v15 = *(void *)(v0 + 232);
    uint64_t v16 = *(void *)(v0 + 184);
    uint64_t v17 = *(void *)(v0 + 168);
    uint64_t v18 = type metadata accessor for Logger();
    sub_100010324(v18, (uint64_t)qword_10170EA60);
    sub_10001D074(v14, v15, (uint64_t *)&unk_101653D50);
    sub_10001D074(v16, v17, (uint64_t *)&unk_10163B890);
    swift_bridgeObjectRetain();
    uint64_t v19 = Logger.logObject.getter();
    os_log_type_t v20 = static os_log_type_t.error.getter();
    BOOL v21 = os_log_type_enabled(v19, v20);
    uint64_t v22 = *(void *)(v0 + 232);
    uint64_t v23 = *(void *)(v0 + 168);
    if (v21)
    {
      os_log_type_t type = v20;
      BOOL v24 = v1 != 0;
      uint64_t v25 = *(void *)(v0 + 120);
      uint64_t v68 = *(void *)(v0 + 112);
      uint64_t v26 = *(void *)(v0 + 96);
      uint64_t v70 = *(void *)(v0 + 88);
      uint64_t v27 = swift_slowAlloc();
      *(_DWORD *)uint64_t v27 = 67109632;
      swift_bridgeObjectRelease();
      *(_DWORD *)(v0 + 384) = v24;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      *(_WORD *)(v27 + 8) = 1024;
      LODWORD(v25) = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v25 + 48))(v22, 1, v68) != 1;
      sub_10001DAB4(v22, (uint64_t *)&unk_101653D50);
      *(_DWORD *)(v0 + 388) = v25;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v27 + 14) = 1024;
      BOOL v28 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v26 + 48))(v23, 1, v70) != 1;
      sub_10001DAB4(v23, (uint64_t *)&unk_10163B890);
      *(_DWORD *)(v0 + 392) = v28;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      _os_log_impl((void *)&_mh_execute_header, v19, type, "Can't create Transparency Notification!\nbeaconName(%{BOOL}d), beaconRecord(%{BOOL}d),\nownerPeerTrust(%{BOOL}d)", (uint8_t *)v27, 0x14u);
      swift_slowDealloc();
    }
    else
    {
      sub_10001DAB4(*(void *)(v0 + 168), (uint64_t *)&unk_10163B890);
      sub_10001DAB4(v22, (uint64_t *)&unk_101653D50);
      swift_bridgeObjectRelease_n();
    }

    uint64_t v29 = *(void *)(v0 + 248);
    uint64_t v30 = *(void *)(v0 + 184);
    sub_100B954CC();
    swift_allocError();
    *BOOL v31 = 0;
    swift_willThrow();
    sub_10001DAB4(v30, (uint64_t *)&unk_10163B890);
    sub_10001DAB4(v29, (uint64_t *)&unk_101653D50);
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v32 = *(uint64_t (**)(void))(v0 + 8);
    goto LABEL_13;
  }
  uint64_t v8 = *(void *)(v0 + 176);
  uint64_t v9 = *(void *)(v0 + 184);
  uint64_t v10 = *(void *)(v0 + 88);
  uint64_t v11 = *(void *)(v0 + 96);
  sub_100B95FE8(v6, *(void *)(v0 + 152), type metadata accessor for SharedBeaconRecord);
  sub_10001D074(v9, v8, (uint64_t *)&unk_10163B890);
  int v12 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v11 + 48))(v8, 1, v10);
  uint64_t v13 = *(void *)(v0 + 176);
  if (v12 == 1)
  {
    sub_100B95DC0(*(void *)(v0 + 152), type metadata accessor for SharedBeaconRecord);
    unint64_t v7 = (uint64_t *)&unk_10163B890;
    uint64_t v6 = v13;
    goto LABEL_6;
  }
  sub_100B95FE8(*(void *)(v0 + 176), *(void *)(v0 + 104), (uint64_t (*)(void))type metadata accessor for MemberPeerTrust);
  swift_bridgeObjectRetain();
  _s12searchpartyd20MessagingDestinationV6stringACSgSS_tcfC_0();
  if (v36)
  {
    char v37 = sub_100B96948(v34, v35, v36);
    swift_bridgeObjectRelease();
    int v38 = v37 & 1;
  }
  else
  {
    int v38 = 0;
  }
  if (qword_101636FA0 != -1) {
    swift_once();
  }
  uint64_t v39 = *(void *)(v0 + 144);
  uint64_t v40 = *(void *)(v0 + 152);
  uint64_t v41 = type metadata accessor for Logger();
  sub_100010324(v41, (uint64_t)qword_10170EA60);
  sub_100B95ED4(v40, v39, type metadata accessor for SharedBeaconRecord);
  uint64_t v42 = Logger.logObject.getter();
  os_log_type_t v43 = static os_log_type_t.default.getter();
  BOOL v44 = os_log_type_enabled(v42, v43);
  uint64_t v45 = *(void *)(v0 + 144);
  if (v44)
  {
    uint64_t v46 = *(void *)(v0 + 136);
    uint64_t v47 = *(void *)(v0 + 112);
    uint64_t v48 = swift_slowAlloc();
    *(_DWORD *)uint64_t v48 = 67109376;
    uint64_t v49 = *(void *)(v45 + *(int *)(v47 + 44));
    sub_100B95ED4(v45, v46, type metadata accessor for SharedBeaconRecord);
    if (v49 == 76)
    {
      if (qword_1016375F8 != -1) {
        swift_once();
      }
      uint64_t v50 = *(void *)(v0 + 136);
      BOOL v51 = sub_100DC71B4(*(void *)(v50 + *(int *)(*(void *)(v0 + 112) + 48)), qword_10170F778);
      sub_100B95DC0(v50, type metadata accessor for SharedBeaconRecord);
      if (v51)
      {
        int v52 = 1;
LABEL_30:
        sub_100B95DC0(*(void *)(v0 + 144), type metadata accessor for SharedBeaconRecord);
        *(_DWORD *)(v0 + 396) = v52;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        *(_WORD *)(v48 + 8) = 1024;
        *(_DWORD *)(v0 + 400) = v38;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        _os_log_impl((void *)&_mh_execute_header, v42, v43, "create Transparency Notification,\nisAirTag:%{BOOL}d,\nisContainBlockedMembers:%{BOOL}d", (uint8_t *)v48, 0xEu);
        swift_slowDealloc();
        goto LABEL_31;
      }
    }
    else
    {
      sub_100B95DC0(*(void *)(v0 + 136), type metadata accessor for SharedBeaconRecord);
    }
    int v52 = 0;
    goto LABEL_30;
  }
  sub_100B95DC0(*(void *)(v0 + 144), type metadata accessor for SharedBeaconRecord);
LABEL_31:

  uint64_t v53 = *(void *)(v0 + 152);
  uint64_t v54 = *(void *)(v53 + *(int *)(*(void *)(v0 + 112) + 44));
  sub_100B95ED4(v53, *(void *)(v0 + 128), type metadata accessor for SharedBeaconRecord);
  char v71 = v38;
  if (v54 == 76)
  {
    if (qword_1016375F8 != -1) {
      swift_once();
    }
    BOOL v64 = sub_100DC71B4(*(void *)(*(void *)(v0 + 128) + *(int *)(*(void *)(v0 + 112) + 48)), qword_10170F778);
  }
  else
  {
    BOOL v64 = 0;
  }
  uint64_t v55 = *(void *)(v0 + 272);
  uint64_t v63 = *(void *)(v0 + 24);
  uint64_t v67 = *(void *)(v0 + 248);
  uint64_t v65 = *(void *)(v0 + 152);
  uint64_t v66 = *(void *)(v0 + 184);
  uint64_t v56 = *(void *)(v0 + 104);
  uint64_t v57 = *(void *)(v0 + 88);
  uint64_t v58 = *(void *)(v0 + 64);
  uint64_t v59 = *(void *)(v0 + 72);
  uint64_t v61 = *(void *)(v0 + 48);
  uint64_t v60 = *(void *)(v0 + 56);
  uint64_t v62 = *(void *)(v0 + 40);
  sub_100B95DC0(*(void *)(v0 + 128), type metadata accessor for SharedBeaconRecord);
  sub_10028987C(v61, v63, v55, v64, v60, v58, v59, v71, v62, *(void *)(v56 + *(int *)(v57 + 32)), *(void *)(v56 + *(int *)(v57 + 32) + 8));
  swift_bridgeObjectRelease();
  sub_100B95DC0(v56, (uint64_t (*)(void))type metadata accessor for MemberPeerTrust);
  sub_100B95DC0(v65, type metadata accessor for SharedBeaconRecord);
  sub_10001DAB4(v66, (uint64_t *)&unk_10163B890);
  sub_10001DAB4(v67, (uint64_t *)&unk_101653D50);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v32 = *(uint64_t (**)(void))(v0 + 8);
LABEL_13:
  return v32();
}

void sub_100B89274(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 16);
  if (!v2)
  {
    uint64_t v4 = _swiftEmptyArrayStorage;
    uint64_t v8 = _swiftEmptyArrayStorage[2];
    if (!v8) {
      goto LABEL_17;
    }
    goto LABEL_14;
  }
  uint64_t v3 = a1 + 32;
  swift_bridgeObjectRetain();
  uint64_t v4 = _swiftEmptyArrayStorage;
  uint64_t v5 = v2;
  do
  {
    sub_10001D074(v3, (uint64_t)v27, (uint64_t *)&unk_101657C40);
    sub_10001D608((uint64_t)v27, (uint64_t)&v24, (uint64_t *)&unk_101657C40);
    if (v25)
    {
      sub_10001CEB0(&v24, (uint64_t)v26);
      sub_10001CEB0(v26, (uint64_t)&v24);
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
        uint64_t v4 = sub_100A6F078(0, v4[2] + 1, 1, v4);
      }
      unint64_t v7 = v4[2];
      unint64_t v6 = v4[3];
      if (v7 >= v6 >> 1) {
        uint64_t v4 = sub_100A6F078((void *)(v6 > 1), v7 + 1, 1, v4);
      }
      v4[2] = v7 + 1;
      sub_10001CEB0(&v24, (uint64_t)&v4[5 * v7 + 4]);
    }
    else
    {
      sub_10001DAB4((uint64_t)&v24, (uint64_t *)&unk_101657C40);
    }
    v3 += 40;
    --v5;
  }
  while (v5);
  swift_bridgeObjectRelease();
  uint64_t v8 = v4[2];
  if (v8)
  {
LABEL_14:
    uint64_t v9 = v4 + 4;
    swift_bridgeObjectRetain();
    do
    {
      swift_unownedRetainStrong();
      uint64_t v10 = v9[3];
      uint64_t v11 = v9[4];
      int v12 = sub_10001CD44(v9, v10);
      v27[3] = v10;
      uint64_t v13 = *(void *)(v11 + 8);
      v27[4] = v13;
      uint64_t v14 = sub_10001D958(v27);
      (*(void (**)(uint64_t *, void *, uint64_t))(*(void *)(v10 - 8) + 16))(v14, v12, v10);
      sub_100E0525C((uint64_t)v14, 0, 0, v10, v13);
      swift_release();
      _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)v27);
      v9 += 5;
      --v8;
    }
    while (v8);
    swift_bridgeObjectRelease();
  }
LABEL_17:
  swift_bridgeObjectRelease();
  if (qword_101636FA0 != -1) {
    swift_once();
  }
  uint64_t v15 = type metadata accessor for Logger();
  sub_100010324(v15, (uint64_t)qword_10170EA60);
  swift_bridgeObjectRetain_n();
  uint64_t v16 = Logger.logObject.getter();
  os_log_type_t v17 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v16, v17))
  {
    uint64_t v18 = (uint8_t *)swift_slowAlloc();
    *(_DWORD *)uint64_t v18 = 134217984;
    if (v2)
    {
      uint64_t v19 = a1 + 32;
      swift_bridgeObjectRetain();
      os_log_type_t v20 = _swiftEmptyArrayStorage;
      do
      {
        sub_10001D074(v19, (uint64_t)v27, (uint64_t *)&unk_101657C40);
        sub_10001D608((uint64_t)v27, (uint64_t)&v24, (uint64_t *)&unk_101657C40);
        if (v25)
        {
          sub_10001CEB0(&v24, (uint64_t)v26);
          sub_10001CEB0(v26, (uint64_t)&v24);
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
            os_log_type_t v20 = sub_100A6F078(0, v20[2] + 1, 1, v20);
          }
          unint64_t v22 = v20[2];
          unint64_t v21 = v20[3];
          if (v22 >= v21 >> 1) {
            os_log_type_t v20 = sub_100A6F078((void *)(v21 > 1), v22 + 1, 1, v20);
          }
          v20[2] = v22 + 1;
          sub_10001CEB0(&v24, (uint64_t)&v20[5 * v22 + 4]);
        }
        else
        {
          sub_10001DAB4((uint64_t)&v24, (uint64_t *)&unk_101657C40);
        }
        v19 += 40;
        --v2;
      }
      while (v2);
      swift_bridgeObjectRelease();
    }
    else
    {
      os_log_type_t v20 = _swiftEmptyArrayStorage;
    }
    uint64_t v23 = v20[2];
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v27[0] = v23;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v16, v17, "postTransparencyNotifications, notifications count = %ld", v18, 0xCu);
    swift_slowDealloc();
  }
  else
  {

    swift_bridgeObjectRelease_n();
  }
}

uint64_t sub_100B896BC(uint64_t a1, uint64_t a2)
{
  *(void *)(v2 + 40) = a1;
  *(void *)(v2 + 48) = a2;
  return _swift_task_switch(sub_100B896DC, 0, 0);
}

uint64_t sub_100B896DC()
{
  swift_beginAccess();
  uint64_t Strong = swift_weakLoadStrong();
  *(void *)(v0 + 56) = Strong;
  if (Strong)
  {
    uint64_t v2 = (void *)swift_task_alloc();
    *(void *)(v0 + 64) = v2;
    *uint64_t v2 = v0;
    v2[1] = sub_100B897F0;
    v2[25] = Strong;
    return _swift_task_switch(sub_100B89954, Strong, 0);
  }
  else
  {
    **(unsigned char **)(v0 + 40) = 1;
    uint64_t v3 = *(uint64_t (**)(void))(v0 + 8);
    return v3();
  }
}

uint64_t sub_100B897F0()
{
  swift_task_dealloc();
  swift_release();
  return _swift_task_switch(sub_100B89908, 0, 0);
}

uint64_t sub_100B89908()
{
  **(unsigned char **)(v0 + 40) = *(void *)(v0 + 56) == 0;
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100B89934()
{
  *(void *)(v1 + 200) = v0;
  return _swift_task_switch(sub_100B89954, v0, 0);
}

uint64_t sub_100B89954()
{
  if (qword_101636FA0 != -1) {
    swift_once();
  }
  uint64_t v1 = type metadata accessor for Logger();
  v0[26] = sub_100010324(v1, (uint64_t)qword_10170EA60);
  swift_retain();
  uint64_t v2 = Logger.logObject.getter();
  os_log_type_t v3 = static os_log_type_t.default.getter();
  BOOL v4 = os_log_type_enabled(v2, v3);
  uint64_t v5 = v0[25];
  if (v4)
  {
    uint64_t v6 = swift_slowAlloc();
    *(_DWORD *)uint64_t v6 = 134218240;
    swift_beginAccess();
    v0[22] = *(void *)(*(void *)(v5 + 224) + 16);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v6 + 12) = 2048;
    swift_beginAccess();
    v0[24] = *(void *)(*(void *)(v5 + 208) + 16);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release();
    _os_log_impl((void *)&_mh_execute_header, v2, v3, "Evaluate notification posting for saved records.\nOwned pairs count: %ld, Member pairs count: %ld.", (uint8_t *)v6, 0x16u);
    swift_slowDealloc();
  }
  else
  {
    swift_release();
  }

  uint64_t v7 = v0[25];
  swift_beginAccess();
  v0[23] = *(void *)(v7 + 224);
  swift_bridgeObjectRetain();
  uint64_t v8 = (void *)swift_task_alloc();
  v0[27] = v8;
  uint64_t v9 = sub_10000588C(&qword_10165A160);
  uint64_t v10 = sub_1001BF100(&qword_10165A168, &qword_10165A160);
  *uint64_t v8 = v0;
  v8[1] = sub_100B89BF0;
  uint64_t v11 = v0[25];
  return Sequence.asyncForEach(_:)(&unk_10165A158, v11, v9, v10);
}

uint64_t sub_100B89BF0()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 200);
  swift_task_dealloc();
  swift_bridgeObjectRelease();
  return _swift_task_switch(sub_100B89D24, v1, 0);
}

uint64_t sub_100B89D24()
{
  uint64_t v1 = v0[25];
  swift_beginAccess();
  v0[21] = *(void *)(v1 + 208);
  swift_bridgeObjectRetain();
  uint64_t v2 = (void *)swift_task_alloc();
  v0[28] = v2;
  uint64_t v3 = sub_10000588C(&qword_10165A180);
  uint64_t v4 = sub_1001BF100(&qword_10165A188, &qword_10165A180);
  *uint64_t v2 = v0;
  v2[1] = sub_100B89E30;
  uint64_t v5 = v0[25];
  return Sequence.asyncForEach(_:)(&unk_10165A178, v5, v3, v4);
}

uint64_t sub_100B89E30()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 200);
  swift_task_dealloc();
  swift_bridgeObjectRelease();
  return _swift_task_switch(sub_100B89F64, v1, 0);
}

uint64_t sub_100B89F64()
{
  uint64_t v1 = v0[25];
  swift_beginAccess();
  v0[17] = *(void *)(v1 + 216);
  swift_bridgeObjectRetain();
  uint64_t v2 = (void *)swift_task_alloc();
  v0[29] = v2;
  uint64_t v3 = sub_10000588C(&qword_10165A1A0);
  uint64_t v4 = sub_1001BF100(&qword_10165A1A8, &qword_10165A1A0);
  *uint64_t v2 = v0;
  v2[1] = sub_100B8A070;
  uint64_t v5 = v0[25];
  return Sequence.asyncForEach(_:)(&unk_10165A198, v5, v3, v4);
}

uint64_t sub_100B8A070()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 200);
  swift_task_dealloc();
  swift_bridgeObjectRelease();
  return _swift_task_switch(sub_100B8A1A4, v1, 0);
}

uint64_t sub_100B8A1A4()
{
  swift_retain();
  uint64_t v1 = Logger.logObject.getter();
  os_log_type_t v2 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v1, v2))
  {
    uint64_t v3 = (void *)v0[25];
    uint64_t v4 = swift_slowAlloc();
    *(_DWORD *)uint64_t v4 = 134218496;
    v0[18] = *(void *)(v3[28] + 16);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v4 + 12) = 2048;
    v0[19] = *(void *)(v3[26] + 16);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v4 + 22) = 2048;
    v0[20] = *(void *)(v3[27] + 16);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release();
    _os_log_impl((void *)&_mh_execute_header, v1, v2, "After notification posting evaluation:\n    ownerCirclePairs: %ld,\n    memberCirclePairs: %ld,\n    sharedBeaconsPairs: %ld.", (uint8_t *)v4, 0x20u);
    swift_slowDealloc();
  }
  else
  {
    swift_release();
  }

  uint64_t v5 = (uint64_t (*)(void))v0[1];
  return v5();
}

uint64_t sub_100B8A320(uint64_t a1, uint64_t a2)
{
  v2[2] = a1;
  v2[3] = a2;
  v2[4] = sub_10000588C(&qword_1016578E0);
  v2[5] = swift_task_alloc();
  v2[6] = swift_task_alloc();
  return _swift_task_switch(sub_100B8A3C8, 0, 0);
}

uint64_t sub_100B8A3C8()
{
  uint64_t v1 = *(void *)(v0 + 48);
  uint64_t v2 = *(void *)(v0 + 16);
  uint64_t v3 = *(int *)(*(void *)(v0 + 32) + 48);
  *(_DWORD *)(v0 + 72) = v3;
  uint64_t v4 = v1 + v3;
  uint64_t v5 = v2 + v3;
  sub_10001D074(v2, v1, (uint64_t *)&unk_101638D10);
  sub_100B95ED4(v5, v4, (uint64_t (*)(void))type metadata accessor for OwnerSharingCircle);
  uint64_t v6 = (void *)swift_task_alloc();
  *(void *)(v0 + 56) = v6;
  *uint64_t v6 = v0;
  v6[1] = sub_100B8A4B4;
  uint64_t v7 = *(void *)(v0 + 48);
  return sub_100B8ECC0(v7, v4);
}

uint64_t sub_100B8A4B4()
{
  uint64_t v2 = *v1;
  *(void *)(*v1 + 64) = v0;
  swift_task_dealloc();
  if (v0)
  {
    uint64_t v3 = sub_100B8A768;
  }
  else
  {
    uint64_t v4 = *(void *)(v2 + 48);
    sub_100B95DC0(v4 + *(int *)(v2 + 72), (uint64_t (*)(void))type metadata accessor for OwnerSharingCircle);
    sub_10001DAB4(v4, (uint64_t *)&unk_101638D10);
    uint64_t v3 = sub_100B8A5FC;
  }
  return _swift_task_switch(v3, 0, 0);
}

uint64_t sub_100B8A5FC()
{
  uint64_t v1 = *(void *)(v0 + 40);
  uint64_t v2 = *(void *)(v0 + 16);
  uint64_t v3 = *(void *)(v0 + 24);
  uint64_t v4 = v2 + *(int *)(v0 + 72);
  uint64_t v5 = *(int *)(*(void *)(v0 + 32) + 48);
  *(_DWORD *)(v0 + 76) = v5;
  uint64_t v6 = v1 + v5;
  sub_10001D074(v2, v1, (uint64_t *)&unk_101638D10);
  sub_100B95ED4(v4, v6, (uint64_t (*)(void))type metadata accessor for OwnerSharingCircle);
  return _swift_task_switch(sub_100B8A6AC, v3, 0);
}

uint64_t sub_100B8A6AC()
{
  uint64_t v1 = *(void *)(v0 + 40);
  uint64_t v2 = v1 + *(int *)(v0 + 76);
  sub_100B80518(v1, v2);
  sub_100B95DC0(v2, (uint64_t (*)(void))type metadata accessor for OwnerSharingCircle);
  sub_10001DAB4(v1, (uint64_t *)&unk_101638D10);
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v3 = *(uint64_t (**)(void))(v0 + 8);
  return v3();
}

uint64_t sub_100B8A768()
{
  uint64_t v1 = *(void *)(v0 + 48);
  sub_100B95DC0(v1 + *(int *)(v0 + 72), (uint64_t (*)(void))type metadata accessor for OwnerSharingCircle);
  sub_10001DAB4(v1, (uint64_t *)&unk_101638D10);
  swift_errorRelease();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v2 = *(uint64_t (**)(void))(v0 + 8);
  return v2();
}

uint64_t sub_100B8A814(uint64_t a1, uint64_t a2)
{
  v2[2] = a1;
  v2[3] = a2;
  v2[4] = sub_10000588C(&qword_1016578F0);
  v2[5] = swift_task_alloc();
  v2[6] = swift_task_alloc();
  return _swift_task_switch(sub_100B8A8BC, 0, 0);
}

uint64_t sub_100B8A8BC()
{
  uint64_t v1 = *(void *)(v0 + 48);
  uint64_t v2 = *(void *)(v0 + 16);
  uint64_t v3 = *(int *)(*(void *)(v0 + 32) + 48);
  *(_DWORD *)(v0 + 72) = v3;
  uint64_t v4 = v1 + v3;
  uint64_t v5 = v2 + v3;
  sub_10001D074(v2, v1, (uint64_t *)&unk_10163B7C0);
  sub_100B95ED4(v5, v4, (uint64_t (*)(void))type metadata accessor for MemberSharingCircle);
  uint64_t v6 = (void *)swift_task_alloc();
  *(void *)(v0 + 56) = v6;
  *uint64_t v6 = v0;
  v6[1] = sub_100B8A9A8;
  uint64_t v7 = *(void *)(v0 + 48);
  return sub_100B8CAB8(v7, v4);
}

uint64_t sub_100B8A9A8()
{
  uint64_t v2 = *v1;
  *(void *)(*v1 + 64) = v0;
  swift_task_dealloc();
  if (v0)
  {
    uint64_t v3 = sub_100B8AC5C;
  }
  else
  {
    uint64_t v4 = *(void *)(v2 + 48);
    sub_100B95DC0(v4 + *(int *)(v2 + 72), (uint64_t (*)(void))type metadata accessor for MemberSharingCircle);
    sub_10001DAB4(v4, (uint64_t *)&unk_10163B7C0);
    uint64_t v3 = sub_100B8AAF0;
  }
  return _swift_task_switch(v3, 0, 0);
}

uint64_t sub_100B8AAF0()
{
  uint64_t v1 = *(void *)(v0 + 40);
  uint64_t v2 = *(void *)(v0 + 16);
  uint64_t v3 = *(void *)(v0 + 24);
  uint64_t v4 = v2 + *(int *)(v0 + 72);
  uint64_t v5 = *(int *)(*(void *)(v0 + 32) + 48);
  *(_DWORD *)(v0 + 76) = v5;
  uint64_t v6 = v1 + v5;
  sub_10001D074(v2, v1, (uint64_t *)&unk_10163B7C0);
  sub_100B95ED4(v4, v6, (uint64_t (*)(void))type metadata accessor for MemberSharingCircle);
  return _swift_task_switch(sub_100B8ABA0, v3, 0);
}

uint64_t sub_100B8ABA0()
{
  uint64_t v1 = *(void *)(v0 + 40);
  uint64_t v2 = v1 + *(int *)(v0 + 76);
  sub_100B7F320(v1, v2);
  sub_100B95DC0(v2, (uint64_t (*)(void))type metadata accessor for MemberSharingCircle);
  sub_10001DAB4(v1, (uint64_t *)&unk_10163B7C0);
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v3 = *(uint64_t (**)(void))(v0 + 8);
  return v3();
}

uint64_t sub_100B8AC5C()
{
  uint64_t v1 = *(void *)(v0 + 48);
  sub_100B95DC0(v1 + *(int *)(v0 + 72), (uint64_t (*)(void))type metadata accessor for MemberSharingCircle);
  sub_10001DAB4(v1, (uint64_t *)&unk_10163B7C0);
  swift_errorRelease();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v2 = *(uint64_t (**)(void))(v0 + 8);
  return v2();
}

uint64_t sub_100B8AD08(uint64_t a1, uint64_t a2)
{
  v2[2] = a1;
  v2[3] = a2;
  v2[4] = sub_10000588C(&qword_1016578D0);
  v2[5] = swift_task_alloc();
  v2[6] = swift_task_alloc();
  return _swift_task_switch(sub_100B8ADB0, 0, 0);
}

uint64_t sub_100B8ADB0()
{
  uint64_t v1 = *(void *)(v0 + 48);
  uint64_t v2 = *(void *)(v0 + 16);
  uint64_t v3 = *(int *)(*(void *)(v0 + 32) + 48);
  *(_DWORD *)(v0 + 72) = v3;
  uint64_t v4 = v1 + v3;
  uint64_t v5 = v2 + v3;
  sub_10001D074(v2, v1, (uint64_t *)&unk_101653D50);
  sub_100B95ED4(v5, v4, type metadata accessor for SharedBeaconRecord);
  uint64_t v6 = (void *)swift_task_alloc();
  *(void *)(v0 + 56) = v6;
  *uint64_t v6 = v0;
  v6[1] = sub_100B8AE9C;
  uint64_t v7 = *(void *)(v0 + 48);
  return sub_100B8B1FC(v7, v4);
}

uint64_t sub_100B8AE9C()
{
  uint64_t v2 = *v1;
  *(void *)(*v1 + 64) = v0;
  swift_task_dealloc();
  if (v0)
  {
    uint64_t v3 = sub_100B8B150;
  }
  else
  {
    uint64_t v4 = *(void *)(v2 + 48);
    sub_100B95DC0(v4 + *(int *)(v2 + 72), type metadata accessor for SharedBeaconRecord);
    sub_10001DAB4(v4, (uint64_t *)&unk_101653D50);
    uint64_t v3 = sub_100B8AFE4;
  }
  return _swift_task_switch(v3, 0, 0);
}

uint64_t sub_100B8AFE4()
{
  uint64_t v1 = *(void *)(v0 + 40);
  uint64_t v2 = *(void *)(v0 + 16);
  uint64_t v3 = *(void *)(v0 + 24);
  uint64_t v4 = v2 + *(int *)(v0 + 72);
  uint64_t v5 = *(int *)(*(void *)(v0 + 32) + 48);
  *(_DWORD *)(v0 + 76) = v5;
  uint64_t v6 = v1 + v5;
  sub_10001D074(v2, v1, (uint64_t *)&unk_101653D50);
  sub_100B95ED4(v4, v6, type metadata accessor for SharedBeaconRecord);
  return _swift_task_switch(sub_100B8B094, v3, 0);
}

uint64_t sub_100B8B094()
{
  uint64_t v1 = *(void *)(v0 + 40);
  uint64_t v2 = v1 + *(int *)(v0 + 76);
  sub_100B801C8(v1, v2);
  sub_100B95DC0(v2, type metadata accessor for SharedBeaconRecord);
  sub_10001DAB4(v1, (uint64_t *)&unk_101653D50);
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v3 = *(uint64_t (**)(void))(v0 + 8);
  return v3();
}

uint64_t sub_100B8B150()
{
  uint64_t v1 = *(void *)(v0 + 48);
  sub_100B95DC0(v1 + *(int *)(v0 + 72), type metadata accessor for SharedBeaconRecord);
  sub_10001DAB4(v1, (uint64_t *)&unk_101653D50);
  swift_errorRelease();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v2 = *(uint64_t (**)(void))(v0 + 8);
  return v2();
}

uint64_t sub_100B8B1FC(uint64_t a1, uint64_t a2)
{
  *(void *)(v3 + 32) = v2;
  *(void *)(v3 + 40) = sub_10000588C(&qword_10165A148);
  *(void *)(v3 + 48) = swift_task_alloc();
  sub_10000588C((uint64_t *)&unk_10163B7C0);
  *(void *)(v3 + 56) = swift_task_alloc();
  *(void *)(v3 + 64) = swift_task_alloc();
  *(void *)(v3 + 72) = swift_task_alloc();
  uint64_t v6 = type metadata accessor for MemberSharingCircle();
  *(void *)(v3 + 80) = v6;
  *(void *)(v3 + 88) = *(void *)(v6 - 8);
  *(void *)(v3 + 96) = swift_task_alloc();
  *(void *)(v3 + 104) = swift_task_alloc();
  uint64_t v7 = type metadata accessor for UUID();
  *(void *)(v3 + 112) = v7;
  *(void *)(v3 + 120) = *(void *)(v7 - 8);
  *(void *)(v3 + 128) = swift_task_alloc();
  sub_10000588C((uint64_t *)&unk_101653D50);
  *(void *)(v3 + 136) = swift_task_alloc();
  uint64_t v8 = sub_10000588C(&qword_1016578D0);
  *(void *)(v3 + 144) = v8;
  *(void *)(v3 + 152) = swift_task_alloc();
  *(void *)(v3 + 160) = swift_task_alloc();
  *(void *)(v3 + 168) = swift_task_alloc();
  *(void *)(v3 + 176) = swift_task_alloc();
  *(void *)(v3 + 184) = swift_task_alloc();
  uint64_t v9 = swift_task_alloc();
  *(void *)(v3 + 192) = v9;
  uint64_t v10 = *(int *)(v8 + 48);
  *(_DWORD *)(v3 + 296) = v10;
  uint64_t v11 = v9 + v10;
  sub_10001D074(a1, v9, (uint64_t *)&unk_101653D50);
  sub_100B95ED4(a2, v11, type metadata accessor for SharedBeaconRecord);
  return _swift_task_switch(sub_100B8B4AC, v2, 0);
}

uint64_t sub_100B8B4AC()
{
  uint64_t v2 = *(void *)(v0 + 184);
  uint64_t v1 = *(void *)(v0 + 192);
  uint64_t v3 = v1 + *(int *)(v0 + 296);
  uint64_t v4 = v2 + *(int *)(*(void *)(v0 + 144) + 48);
  sub_10001D074(v1, v2, (uint64_t *)&unk_101653D50);
  sub_100B95ED4(v3, v4, type metadata accessor for SharedBeaconRecord);
  uint64_t v5 = type metadata accessor for SharedBeaconRecord(0);
  *(void *)(v0 + 200) = v5;
  LODWORD(v3) = *(unsigned __int8 *)(v4 + *(int *)(v5 + 64));
  sub_100B95DC0(v4, type metadata accessor for SharedBeaconRecord);
  sub_10001DAB4(v2, (uint64_t *)&unk_101653D50);
  if (v3 == 2)
  {
    uint64_t v6 = *(void *)(v0 + 192);
    uint64_t v7 = *(void *)(v0 + 176);
    uint64_t v8 = *(void *)(v0 + 136);
    uint64_t v9 = v6 + *(int *)(v0 + 296);
    uint64_t v10 = v7 + *(int *)(*(void *)(v0 + 144) + 48);
    sub_10001D074(v6, v7, (uint64_t *)&unk_101653D50);
    sub_100B95ED4(v9, v10, type metadata accessor for SharedBeaconRecord);
    sub_10001D608(v7, v8, (uint64_t *)&unk_101653D50);
    uint64_t v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 48);
    int v12 = v11(v8, 1, v5);
    uint64_t v13 = *(void *)(v0 + 192);
    uint64_t v14 = *(void *)(v0 + 168);
    uint64_t v15 = *(void *)(v0 + 136);
    uint64_t v16 = *(void *)(v0 + 144);
    uint64_t v17 = v13 + *(int *)(v0 + 296);
    if (v12 == 1)
    {
      sub_100B95DC0(v10, type metadata accessor for SharedBeaconRecord);
      sub_10001DAB4(v15, (uint64_t *)&unk_101653D50);
      uint64_t v18 = v14 + *(int *)(v16 + 48);
      sub_10001D074(v13, v14, (uint64_t *)&unk_101653D50);
      sub_100B95ED4(v17, v18, type metadata accessor for SharedBeaconRecord);
    }
    else
    {
      int v35 = *(unsigned __int8 *)(v15 + *(int *)(v5 + 64));
      sub_100B95DC0(v15, type metadata accessor for SharedBeaconRecord);
      sub_100B95DC0(v10, type metadata accessor for SharedBeaconRecord);
      uint64_t v20 = v14 + *(int *)(v16 + 48);
      sub_10001D074(v13, v14, (uint64_t *)&unk_101653D50);
      sub_100B95ED4(v17, v20, type metadata accessor for SharedBeaconRecord);
      if (v35 == 4)
      {
        uint64_t v21 = *(void *)(v0 + 168);
LABEL_8:
        uint64_t v23 = *(void *)(v0 + 184);
        uint64_t v22 = *(void *)(v0 + 192);
        uint64_t v24 = *(void *)(v0 + 144);
        uint64_t v25 = *(void *)(v0 + 120);
        uint64_t v36 = *(void *)(v0 + 128);
        uint64_t v26 = *(void *)(v0 + 112);
        uint64_t v27 = v22 + *(int *)(v0 + 296);
        sub_10001DAB4(v21, &qword_1016578D0);
        uint64_t v28 = v23 + *(int *)(v24 + 48);
        sub_10001D074(v22, v23, (uint64_t *)&unk_101653D50);
        sub_100B95ED4(v27, v28, type metadata accessor for SharedBeaconRecord);
        uint64_t v29 = v28 + *(int *)(v5 + 20);
        uint64_t v30 = *(void (**)(uint64_t, uint64_t, uint64_t))(v25 + 16);
        *(void *)(v0 + 208) = v30;
        *(void *)(v0 + 216) = (v25 + 16) & 0xFFFFFFFFFFFFLL | 0xE3BA000000000000;
        v30(v36, v29, v26);
        sub_100B95DC0(v28, type metadata accessor for SharedBeaconRecord);
        BOOL v31 = (void *)swift_task_alloc();
        *(void *)(v0 + 224) = v31;
        *BOOL v31 = v0;
        v31[1] = sub_100B8B990;
        uint64_t v32 = *(void *)(v0 + 128);
        return sub_100E5B3AC(v32);
      }
    }
    uint64_t v21 = *(void *)(v0 + 168);
    if (v11(v21, 1, v5) == 1) {
      goto LABEL_8;
    }
    uint64_t v19 = *(void *)(v0 + 192);
    sub_10001DAB4(v21, &qword_1016578D0);
  }
  else
  {
    uint64_t v19 = *(void *)(v0 + 192);
  }
  sub_10001DAB4(v19, &qword_1016578D0);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  unsigned __int8 v34 = *(uint64_t (**)(void))(v0 + 8);
  return v34();
}

uint64_t sub_100B8B990(uint64_t a1)
{
  uint64_t v2 = *(void **)v1;
  uint64_t v3 = *(void *)(*(void *)v1 + 184);
  uint64_t v4 = *(void *)(*(void *)v1 + 128);
  uint64_t v5 = *(void *)(*(void *)v1 + 120);
  uint64_t v6 = *(void *)(*(void *)v1 + 112);
  uint64_t v7 = *(void *)(*(void *)v1 + 32);
  v2[29] = a1;
  swift_task_dealloc();
  uint64_t v8 = *(void (**)(uint64_t, uint64_t))(v5 + 8);
  v2[30] = v8;
  v2[31] = (v5 + 8) & 0xFFFFFFFFFFFFLL | 0x4F8000000000000;
  v8(v4, v6);
  sub_10001DAB4(v3, (uint64_t *)&unk_101653D50);
  return _swift_task_switch(sub_100B8BB3C, v7, 0);
}

uint64_t sub_100B8BB3C()
{
  uint64_t v43 = v0;
  uint64_t v1 = *(void *)(v0 + 232);
  unint64_t v2 = *(void *)(v1 + 16);
  if (v2 >= 2)
  {
    if (qword_101636FA0 != -1) {
LABEL_25:
    }
      swift_once();
    uint64_t v3 = *(void *)(v0 + 192);
    uint64_t v5 = *(void *)(v0 + 152);
    uint64_t v4 = *(void *)(v0 + 160);
    uint64_t v6 = *(void *)(v0 + 144);
    uint64_t v7 = v3 + *(int *)(v0 + 296);
    uint64_t v8 = type metadata accessor for Logger();
    sub_100010324(v8, (uint64_t)qword_10170EA60);
    uint64_t v9 = v4 + *(int *)(v6 + 48);
    sub_10001D074(v3, v4, (uint64_t *)&unk_101653D50);
    sub_100B95ED4(v7, v9, type metadata accessor for SharedBeaconRecord);
    sub_10001D608(v4, v5, &qword_1016578D0);
    uint64_t v10 = Logger.logObject.getter();
    os_log_type_t v11 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v10, v11))
    {
      uint64_t v40 = v1;
      int v38 = *(void (**)(uint64_t, uint64_t))(v0 + 240);
      uint64_t v37 = *(void (**)(uint64_t, uint64_t, uint64_t))(v0 + 208);
      uint64_t v36 = *(void *)(v0 + 200);
      uint64_t v12 = *(void *)(v0 + 184);
      uint64_t v13 = *(void *)(v0 + 144);
      uint64_t v41 = *(void *)(v0 + 152);
      os_log_type_t type = v11;
      uint64_t v14 = *(void *)(v0 + 128);
      uint64_t v15 = *(void *)(v0 + 112);
      uint64_t v16 = swift_slowAlloc();
      uint64_t v42 = swift_slowAlloc();
      *(_DWORD *)uint64_t v16 = 141558275;
      *(void *)(v0 + 16) = 1752392040;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v16 + 12) = 2081;
      uint64_t v17 = *(int *)(v13 + 48);
      uint64_t v18 = v12 + v17;
      uint64_t v19 = v41 + v17;
      sub_10001D074(v41, v12, (uint64_t *)&unk_101653D50);
      sub_100B95ED4(v19, v18, type metadata accessor for SharedBeaconRecord);
      v37(v14, v18 + *(int *)(v36 + 20), v15);
      uint64_t v20 = v18;
      uint64_t v1 = v40;
      sub_100B95DC0(v20, type metadata accessor for SharedBeaconRecord);
      sub_10001DAB4(v12, (uint64_t *)&unk_101653D50);
      sub_100B95984((unint64_t *)&qword_101638B10, 255, (void (*)(uint64_t))&type metadata accessor for UUID);
      uint64_t v21 = dispatch thunk of CustomStringConvertible.description.getter();
      unint64_t v23 = v22;
      v38(v14, v15);
      *(void *)(v0 + 24) = sub_1008FA0F0(v21, v23, &v42);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      sub_10001DAB4(v41, &qword_1016578D0);
      _os_log_impl((void *)&_mh_execute_header, v10, type, "    Several explicit shares for a beacon %{private,mask.hash}s!", (uint8_t *)v16, 0x16u);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      sub_10001DAB4(*(void *)(v0 + 152), &qword_1016578D0);
    }

    unint64_t v2 = *(void *)(v1 + 16);
  }
  *(void *)(v0 + 256) = v2;
  if (v2)
  {
    uint64_t v24 = *(void *)(v0 + 88);
    *(_DWORD *)(v0 + 300) = *(_DWORD *)(v24 + 80);
    *(void *)(v0 + 264) = *(void *)(v24 + 72);
    swift_bridgeObjectRetain();
    uint64_t v25 = 0;
    while (1)
    {
      *(void *)(v0 + 272) = v25 + 1;
      if (__OFADD__(v25, 1))
      {
        __break(1u);
        goto LABEL_25;
      }
      uint64_t v27 = *(void *)(v0 + 104);
      uint64_t v28 = *(void *)(v0 + 80);
      sub_100B95ED4(*(void *)(v0 + 232)+ ((*(unsigned __int8 *)(v0 + 300) + 32) & ~(unint64_t)*(unsigned __int8 *)(v0 + 300))+ *(void *)(v0 + 264) * v25, v27, (uint64_t (*)(void))type metadata accessor for MemberSharingCircle);
      if (!*(unsigned char *)(v27 + *(int *)(v28 + 40))) {
        break;
      }
      if (qword_101636FA0 != -1) {
        swift_once();
      }
      uint64_t v29 = type metadata accessor for Logger();
      sub_100010324(v29, (uint64_t)qword_10170EA60);
      uint64_t v30 = Logger.logObject.getter();
      os_log_type_t v31 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v30, v31))
      {
        uint64_t v1 = swift_slowAlloc();
        *(_WORD *)uint64_t v1 = 0;
        _os_log_impl((void *)&_mh_execute_header, v30, v31, "    Member sharing circle has been accepted already, skip notification posting.", (uint8_t *)v1, 2u);
        swift_slowDealloc();
      }
      uint64_t v26 = *(void *)(v0 + 104);

      sub_100B95DC0(v26, (uint64_t (*)(void))type metadata accessor for MemberSharingCircle);
      uint64_t v25 = *(void *)(v0 + 272);
      if (v25 == *(void *)(v0 + 256))
      {
        swift_bridgeObjectRelease_n();
        goto LABEL_21;
      }
    }
    uint64_t v32 = (void *)swift_task_alloc();
    *(void *)(v0 + 280) = v32;
    *uint64_t v32 = v0;
    v32[1] = sub_100B8C198;
    uint64_t v33 = *(void *)(v0 + 104);
    return sub_100B80868(v33);
  }
  else
  {
    swift_bridgeObjectRelease();
LABEL_21:
    sub_10001DAB4(*(void *)(v0 + 192), &qword_1016578D0);
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    int v35 = *(uint64_t (**)(void))(v0 + 8);
    return v35();
  }
}

uint64_t sub_100B8C198()
{
  uint64_t v2 = *v1;
  *(void *)(*v1 + 288) = v0;
  swift_task_dealloc();
  if (v0)
  {
    uint64_t v3 = *(void *)(v2 + 32);
    uint64_t v4 = sub_100B8C408;
  }
  else
  {
    uint64_t v5 = *(void *)(v2 + 32);
    swift_bridgeObjectRelease_n();
    uint64_t v4 = sub_100B8C2C4;
    uint64_t v3 = v5;
  }
  return _swift_task_switch(v4, v3, 0);
}

uint64_t sub_100B8C2C4()
{
  uint64_t v1 = v0[24];
  sub_100B95DC0(v0[13], (uint64_t (*)(void))type metadata accessor for MemberSharingCircle);
  sub_10001DAB4(v1, &qword_1016578D0);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v2 = (uint64_t (*)(void))v0[1];
  return v2();
}

void sub_100B8C408()
{
  unint64_t v1 = *(void *)(v0 + 256);
  uint64_t v2 = *(void *)(v0 + 232);
  if (v1 > *(void *)(v2 + 16))
  {
LABEL_27:
    __break(1u);
    return;
  }
  uint64_t v3 = *(void *)(v0 + 104);
  uint64_t v4 = *(void *)(v0 + 80);
  uint64_t v5 = *(void *)(v0 + 88);
  uint64_t v7 = *(void *)(v0 + 64);
  uint64_t v6 = *(void *)(v0 + 72);
  uint64_t v8 = *(void *)(v0 + 48);
  uint64_t v36 = *(void *)(v0 + 40);
  sub_100B95ED4(v2+ ((*(unsigned __int8 *)(v0 + 300) + 32) & ~(unint64_t)*(unsigned __int8 *)(v0 + 300))+ *(void *)(v0 + 264) * (v1 - 1), v6, (uint64_t (*)(void))type metadata accessor for MemberSharingCircle);
  uint64_t v9 = *(void (**)(uint64_t, void, uint64_t, uint64_t))(v5 + 56);
  v9(v6, 0, 1, v4);
  sub_100B95ED4(v3, v7, (uint64_t (*)(void))type metadata accessor for MemberSharingCircle);
  v9(v7, 0, 1, v4);
  uint64_t v10 = v8 + *(int *)(v36 + 48);
  sub_10001D074(v6, v8, (uint64_t *)&unk_10163B7C0);
  sub_10001D074(v7, v10, (uint64_t *)&unk_10163B7C0);
  os_log_type_t v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v5 + 48);
  int v12 = v11(v8, 1, v4);
  uint64_t v13 = *(void *)(v0 + 80);
  if (v12 == 1)
  {
    uint64_t v14 = *(void *)(v0 + 72);
    sub_10001DAB4(*(void *)(v0 + 64), (uint64_t *)&unk_10163B7C0);
    sub_10001DAB4(v14, (uint64_t *)&unk_10163B7C0);
    if (v11(v10, 1, v13) == 1)
    {
      sub_10001DAB4(*(void *)(v0 + 48), (uint64_t *)&unk_10163B7C0);
LABEL_19:
      uint64_t v32 = *(void *)(v0 + 192);
      uint64_t v33 = *(void *)(v0 + 104);
      swift_bridgeObjectRelease_n();
      swift_willThrow();
      sub_100B95DC0(v33, (uint64_t (*)(void))type metadata accessor for MemberSharingCircle);
      sub_10001DAB4(v32, &qword_1016578D0);
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      uint64_t v18 = *(void (**)(void))(v0 + 8);
      goto LABEL_20;
    }
    goto LABEL_7;
  }
  sub_10001D074(*(void *)(v0 + 48), *(void *)(v0 + 56), (uint64_t *)&unk_10163B7C0);
  if (v11(v10, 1, v13) == 1)
  {
    uint64_t v15 = *(void *)(v0 + 72);
    uint64_t v16 = *(void *)(v0 + 56);
    sub_10001DAB4(*(void *)(v0 + 64), (uint64_t *)&unk_10163B7C0);
    sub_10001DAB4(v15, (uint64_t *)&unk_10163B7C0);
    sub_100B95DC0(v16, (uint64_t (*)(void))type metadata accessor for MemberSharingCircle);
LABEL_7:
    sub_10001DAB4(*(void *)(v0 + 48), &qword_10165A148);
    goto LABEL_8;
  }
  uint64_t v26 = *(void *)(v0 + 96);
  uint64_t v28 = *(void *)(v0 + 64);
  uint64_t v27 = *(void *)(v0 + 72);
  uint64_t v30 = *(void *)(v0 + 48);
  uint64_t v29 = *(void *)(v0 + 56);
  sub_100B95FE8(v10, v26, (uint64_t (*)(void))type metadata accessor for MemberSharingCircle);
  BOOL v31 = sub_1002C51D4(v29, v26);
  sub_100B95DC0(v26, (uint64_t (*)(void))type metadata accessor for MemberSharingCircle);
  sub_10001DAB4(v28, (uint64_t *)&unk_10163B7C0);
  sub_10001DAB4(v27, (uint64_t *)&unk_10163B7C0);
  sub_100B95DC0(v29, (uint64_t (*)(void))type metadata accessor for MemberSharingCircle);
  sub_10001DAB4(v30, (uint64_t *)&unk_10163B7C0);
  if (v31) {
    goto LABEL_19;
  }
LABEL_8:
  sub_100B95DC0(*(void *)(v0 + 104), (uint64_t (*)(void))type metadata accessor for MemberSharingCircle);
  swift_errorRelease();
  uint64_t v17 = *(void *)(v0 + 272);
  if (v17 == *(void *)(v0 + 256))
  {
LABEL_9:
    swift_bridgeObjectRelease_n();
    sub_10001DAB4(*(void *)(v0 + 192), &qword_1016578D0);
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v18 = *(void (**)(void))(v0 + 8);
LABEL_20:
    v18();
    return;
  }
  while (1)
  {
    *(void *)(v0 + 272) = v17 + 1;
    if (__OFADD__(v17, 1))
    {
      __break(1u);
      goto LABEL_27;
    }
    uint64_t v20 = *(void *)(v0 + 104);
    uint64_t v21 = *(void *)(v0 + 80);
    sub_100B95ED4(*(void *)(v0 + 232)+ ((*(unsigned __int8 *)(v0 + 300) + 32) & ~(unint64_t)*(unsigned __int8 *)(v0 + 300))+ *(void *)(v0 + 264) * v17, v20, (uint64_t (*)(void))type metadata accessor for MemberSharingCircle);
    if (!*(unsigned char *)(v20 + *(int *)(v21 + 40))) {
      break;
    }
    if (qword_101636FA0 != -1) {
      swift_once();
    }
    uint64_t v22 = type metadata accessor for Logger();
    sub_100010324(v22, (uint64_t)qword_10170EA60);
    unint64_t v23 = Logger.logObject.getter();
    os_log_type_t v24 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v23, v24))
    {
      uint64_t v25 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v25 = 0;
      _os_log_impl((void *)&_mh_execute_header, v23, v24, "    Member sharing circle has been accepted already, skip notification posting.", v25, 2u);
      swift_slowDealloc();
    }
    uint64_t v19 = *(void *)(v0 + 104);

    sub_100B95DC0(v19, (uint64_t (*)(void))type metadata accessor for MemberSharingCircle);
    uint64_t v17 = *(void *)(v0 + 272);
    if (v17 == *(void *)(v0 + 256)) {
      goto LABEL_9;
    }
  }
  unsigned __int8 v34 = (void *)swift_task_alloc();
  *(void *)(v0 + 280) = v34;
  *unsigned __int8 v34 = v0;
  v34[1] = sub_100B8C198;
  uint64_t v35 = *(void *)(v0 + 104);
  sub_100B80868(v35);
}

uint64_t sub_100B8CAB8(uint64_t a1, uint64_t a2)
{
  *(void *)(v3 + 104) = v2;
  *(void *)(v3 + 112) = sub_10000588C((uint64_t *)&unk_10163B890);
  *(void *)(v3 + 120) = swift_task_alloc();
  uint64_t v6 = type metadata accessor for MemberPeerTrust();
  *(void *)(v3 + 128) = v6;
  *(void *)(v3 + 136) = *(void *)(v6 - 8);
  *(void *)(v3 + 144) = swift_task_alloc();
  sub_10000588C((uint64_t *)&unk_10165F400);
  *(void *)(v3 + 152) = swift_task_alloc();
  *(void *)(v3 + 160) = swift_task_alloc();
  sub_10000588C((uint64_t *)&unk_10163B7C0);
  *(void *)(v3 + 168) = swift_task_alloc();
  *(void *)(v3 + 176) = swift_task_alloc();
  uint64_t v7 = type metadata accessor for UUID();
  *(void *)(v3 + 184) = v7;
  uint64_t v8 = *(void *)(v7 - 8);
  *(void *)(v3 + 192) = v8;
  *(void *)(v3 + 200) = *(void *)(v8 + 64);
  *(void *)(v3 + 208) = swift_task_alloc();
  *(void *)(v3 + 216) = swift_task_alloc();
  *(void *)(v3 + 224) = swift_task_alloc();
  *(void *)(v3 + 232) = swift_task_alloc();
  *(void *)(v3 + 240) = sub_10000588C((uint64_t *)&unk_101653D50);
  *(void *)(v3 + 248) = swift_task_alloc();
  uint64_t v9 = type metadata accessor for SharedBeaconRecord(0);
  *(void *)(v3 + 256) = v9;
  *(void *)(v3 + 264) = *(void *)(v9 - 8);
  *(void *)(v3 + 272) = swift_task_alloc();
  uint64_t v10 = sub_10000588C(&qword_1016578F0);
  *(void *)(v3 + 280) = v10;
  *(void *)(v3 + 288) = swift_task_alloc();
  *(void *)(v3 + 296) = swift_task_alloc();
  *(void *)(v3 + 304) = swift_task_alloc();
  *(void *)(v3 + 312) = swift_task_alloc();
  uint64_t v11 = swift_task_alloc();
  *(void *)(v3 + 320) = v11;
  uint64_t v12 = *(int *)(v10 + 48);
  *(_DWORD *)(v3 + 512) = v12;
  uint64_t v13 = v11 + v12;
  sub_10001D074(a1, v11, (uint64_t *)&unk_10163B7C0);
  sub_100B95ED4(a2, v13, (uint64_t (*)(void))type metadata accessor for MemberSharingCircle);
  return _swift_task_switch(sub_100B8CE10, v2, 0);
}

uint64_t sub_100B8CE10()
{
  uint64_t v2 = *(void *)(v0 + 312);
  uint64_t v1 = *(void *)(v0 + 320);
  uint64_t v3 = *(void *)(v0 + 280);
  uint64_t v4 = *(void *)(v0 + 232);
  uint64_t v5 = *(void *)(v0 + 184);
  uint64_t v6 = *(void *)(v0 + 192);
  uint64_t v7 = v1 + *(int *)(v0 + 512);
  uint64_t v8 = *(void *)(*(void *)(v0 + 104) + 136);
  *(void *)(v0 + 328) = v8;
  uint64_t v9 = v2 + *(int *)(v3 + 48);
  sub_10001D074(v1, v2, (uint64_t *)&unk_10163B7C0);
  sub_100B95ED4(v7, v9, (uint64_t (*)(void))type metadata accessor for MemberSharingCircle);
  uint64_t v10 = type metadata accessor for MemberSharingCircle();
  *(void *)(v0 + 336) = v10;
  uint64_t v11 = v9 + *(int *)(v10 + 24);
  uint64_t v12 = *(void (**)(uint64_t, uint64_t, uint64_t))(v6 + 16);
  *(void *)(v0 + 344) = v12;
  *(void *)(v0 + 352) = (v6 + 16) & 0xFFFFFFFFFFFFLL | 0xE3BA000000000000;
  v12(v4, v11, v5);
  sub_100B95DC0(v9, (uint64_t (*)(void))type metadata accessor for MemberSharingCircle);
  return _swift_task_switch(sub_100B8CF2C, v8, 0);
}

uint64_t sub_100B8CF2C()
{
  uint64_t v1 = *(void (**)(uint64_t, uint64_t, uint64_t))(v0 + 344);
  uint64_t v2 = *(void *)(v0 + 328);
  uint64_t v4 = *(void *)(v0 + 224);
  uint64_t v3 = *(void *)(v0 + 232);
  uint64_t v5 = *(void *)(v0 + 192);
  uint64_t v6 = *(void *)(v0 + 184);
  *(void *)(v0 + 360) = *(void *)(v2 + 136);
  v1(v4, v3, v6);
  int v7 = *(_DWORD *)(v5 + 80);
  *(_DWORD *)(v0 + 516) = v7;
  unint64_t v8 = (v7 + 24) & ~(unint64_t)v7;
  uint64_t v9 = swift_allocObject();
  *(void *)(v0 + 368) = v9;
  *(void *)(v9 + 16) = v2;
  uint64_t v10 = *(void (**)(unint64_t, uint64_t, uint64_t))(v5 + 32);
  *(void *)(v0 + 376) = v10;
  *(void *)(v0 + 384) = (v5 + 32) & 0xFFFFFFFFFFFFLL | 0x48D8000000000000;
  v10(v9 + v8, v4, v6);
  swift_retain();
  return _swift_task_switch(sub_100B8D028, 0, 0);
}

uint64_t sub_100B8D028()
{
  uint64_t v2 = v0[45];
  uint64_t v1 = v0[46];
  uint64_t v3 = (void *)swift_task_alloc();
  v0[49] = v3;
  v3[2] = v2;
  v3[3] = sub_100B959D0;
  v3[4] = v1;
  uint64_t v4 = (void *)swift_task_alloc();
  v0[50] = v4;
  *uint64_t v4 = v0;
  v4[1] = sub_100B8D12C;
  uint64_t v6 = v0[30];
  uint64_t v5 = v0[31];
  return withCheckedContinuation<A>(isolation:function:_:)(v5, 0, 0, 0xD000000000000012, 0x80000001013F1870, sub_100075048, v3, v6);
}

uint64_t sub_100B8D12C()
{
  uint64_t v1 = *v0;
  uint64_t v2 = *(void *)(*v0 + 312);
  uint64_t v3 = *(void *)(*v0 + 232);
  uint64_t v4 = *(void *)(*v0 + 192);
  uint64_t v5 = *(void *)(*v0 + 184);
  uint64_t v6 = *(void *)(*v0 + 104);
  swift_task_dealloc();
  swift_release();
  swift_task_dealloc();
  int v7 = *(void (**)(uint64_t, uint64_t))(v4 + 8);
  *(void *)(v1 + 408) = v7;
  *(void *)(v1 + 416) = (v4 + 8) & 0xFFFFFFFFFFFFLL | 0x4F8000000000000;
  v7(v3, v5);
  sub_10001DAB4(v2, (uint64_t *)&unk_10163B7C0);
  return _swift_task_switch(sub_100B8D310, v6, 0);
}

uint64_t sub_100B8D310()
{
  uint64_t v1 = *(void *)(v0 + 256);
  uint64_t v2 = *(void *)(v0 + 248);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v0 + 264) + 48))(v2, 1, v1) == 1)
  {
    sub_10001DAB4(*(void *)(v0 + 320), &qword_1016578F0);
    uint64_t v3 = (uint64_t *)&unk_101653D50;
LABEL_7:
    uint64_t v14 = v2;
LABEL_12:
    sub_10001DAB4(v14, v3);
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    os_log_type_t v24 = *(uint64_t (**)(void))(v0 + 8);
    return v24();
  }
  uint64_t v4 = *(void *)(v0 + 272);
  sub_100B95FE8(v2, v4, type metadata accessor for SharedBeaconRecord);
  if (*(unsigned char *)(v4 + *(int *)(v1 + 64)) != 2)
  {
    uint64_t v2 = *(void *)(v0 + 320);
    sub_100B95DC0(*(void *)(v0 + 272), type metadata accessor for SharedBeaconRecord);
    uint64_t v3 = &qword_1016578F0;
    goto LABEL_7;
  }
  uint64_t v5 = *(void *)(v0 + 336);
  uint64_t v6 = *(void *)(v0 + 320);
  uint64_t v7 = *(void *)(v0 + 304);
  uint64_t v8 = *(void *)(v0 + 176);
  uint64_t v9 = v6 + *(int *)(v0 + 512);
  uint64_t v10 = v7 + *(int *)(*(void *)(v0 + 280) + 48);
  sub_10001D074(v6, v7, (uint64_t *)&unk_10163B7C0);
  sub_100B95ED4(v9, v10, (uint64_t (*)(void))type metadata accessor for MemberSharingCircle);
  sub_10001D608(v7, v8, (uint64_t *)&unk_10163B7C0);
  uint64_t v11 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 48);
  if (v11(v8, 1, v5) == 1)
  {
    uint64_t v12 = *(void *)(v0 + 176);
    sub_100B95DC0(v10, (uint64_t (*)(void))type metadata accessor for MemberSharingCircle);
    sub_10001DAB4(v12, (uint64_t *)&unk_10163B7C0);
    int v13 = 6;
  }
  else
  {
    uint64_t v15 = *(void *)(v0 + 176);
    int v13 = *(unsigned __int8 *)(v15 + *(int *)(*(void *)(v0 + 336) + 40));
    sub_100B95DC0(v15, (uint64_t (*)(void))type metadata accessor for MemberSharingCircle);
    sub_100B95DC0(v10, (uint64_t (*)(void))type metadata accessor for MemberSharingCircle);
  }
  uint64_t v16 = *(void *)(v0 + 336);
  uint64_t v17 = *(void *)(v0 + 320);
  uint64_t v18 = *(void *)(v0 + 296);
  uint64_t v19 = v17 + *(int *)(v0 + 512);
  uint64_t v20 = v18 + *(int *)(*(void *)(v0 + 280) + 48);
  sub_10001D074(v17, v18, (uint64_t *)&unk_10163B7C0);
  sub_100B95ED4(v19, v20, (uint64_t (*)(void))type metadata accessor for MemberSharingCircle);
  int v21 = *(unsigned __int8 *)(v20 + *(int *)(v16 + 40));
  sub_100B95DC0(v20, (uint64_t (*)(void))type metadata accessor for MemberSharingCircle);
  if (v13 != 1 || v21 != 1)
  {
    uint64_t v22 = *(void *)(v0 + 320);
    uint64_t v23 = *(void *)(v0 + 272);
LABEL_11:
    sub_100B95DC0(v23, type metadata accessor for SharedBeaconRecord);
    sub_10001DAB4(v22, &qword_1016578F0);
    uint64_t v14 = *(void *)(v0 + 296);
    uint64_t v3 = (uint64_t *)&unk_10163B7C0;
    goto LABEL_12;
  }
  uint64_t v26 = *(void *)(v0 + 336);
  uint64_t v27 = *(void *)(v0 + 320);
  uint64_t v28 = *(void *)(v0 + 288);
  uint64_t v29 = *(void *)(v0 + 168);
  uint64_t v30 = v27 + *(int *)(v0 + 512);
  uint64_t v31 = v28 + *(int *)(*(void *)(v0 + 280) + 48);
  sub_10001D074(v27, v28, (uint64_t *)&unk_10163B7C0);
  sub_100B95ED4(v30, v31, (uint64_t (*)(void))type metadata accessor for MemberSharingCircle);
  sub_10001D608(v28, v29, (uint64_t *)&unk_10163B7C0);
  if (v11(v29, 1, v26) == 1)
  {
    uint64_t v32 = *(void *)(v0 + 168);
    sub_100B95DC0(v31, (uint64_t (*)(void))type metadata accessor for MemberSharingCircle);
    sub_10001DAB4(v32, (uint64_t *)&unk_10163B7C0);
    unint64_t v33 = sub_1009302E8((uint64_t)_swiftEmptyArrayStorage);
  }
  else
  {
    uint64_t v34 = *(void *)(v0 + 168);
    unint64_t v33 = *(void *)(v34 + *(int *)(*(void *)(v0 + 336) + 36));
    swift_bridgeObjectRetain();
    sub_100B95DC0(v34, (uint64_t (*)(void))type metadata accessor for MemberSharingCircle);
    sub_100B95DC0(v31, (uint64_t (*)(void))type metadata accessor for MemberSharingCircle);
  }
  *(void *)(v0 + 424) = v33;
  uint64_t v35 = *(void *)(v0 + 336);
  uint64_t v37 = *(void *)(v0 + 312);
  uint64_t v36 = *(void *)(v0 + 320);
  uint64_t v38 = v36 + *(int *)(v0 + 512);
  uint64_t v39 = v37 + *(int *)(*(void *)(v0 + 280) + 48);
  sub_10001D074(v36, v37, (uint64_t *)&unk_10163B7C0);
  sub_100B95ED4(v38, v39, (uint64_t (*)(void))type metadata accessor for MemberSharingCircle);
  *(void *)(v0 + 432) = *(void *)(v39 + *(int *)(v35 + 36));
  swift_bridgeObjectRetain();
  sub_100B95DC0(v39, (uint64_t (*)(void))type metadata accessor for MemberSharingCircle);
  uint64_t v40 = sub_10001DAB4(v37, (uint64_t *)&unk_10163B7C0);
  int64_t v43 = 0;
  char v44 = *(unsigned char *)(v33 + 32);
  *(unsigned char *)(v0 + 520) = v44;
  uint64_t v45 = 1 << v44;
  if (v45 < 64) {
    uint64_t v46 = ~(-1 << v45);
  }
  else {
    uint64_t v46 = -1;
  }
  unint64_t v47 = v46 & *(void *)(v33 + 64);
  while (1)
  {
    if (v47)
    {
      unint64_t v48 = __clz(__rbit64(v47));
      v47 &= v47 - 1;
      unint64_t v49 = v48 | (v43 << 6);
      uint64_t v50 = *(void *)(v0 + 424);
LABEL_26:
      uint64_t v51 = *(void *)(v0 + 152);
      (*(void (**)(uint64_t, unint64_t, void))(v0 + 344))(v51, *(void *)(v50 + 48) + *(void *)(*(void *)(v0 + 192) + 72) * v49, *(void *)(v0 + 184));
      uint64_t v52 = *(void *)(v50 + 56);
      uint64_t v53 = sub_10000588C(&qword_10164F3F8);
      *(unsigned char *)(v51 + *(int *)(v53 + 48)) = *(unsigned char *)(v52 + v49);
      (*(void (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v53 - 8) + 56))(v51, 0, 1, v53);
      goto LABEL_33;
    }
    int64_t v54 = v43 + 1;
    if (__OFADD__(v43, 1))
    {
      __break(1u);
      return _swift_task_switch(v40, v41, v42);
    }
    int64_t v55 = (unint64_t)((1 << *(unsigned char *)(v0 + 520)) + 63) >> 6;
    if (v54 >= v55)
    {
      int64_t v58 = v43;
    }
    else
    {
      uint64_t v50 = *(void *)(v0 + 424);
      uint64_t v56 = v50 + 64;
      unint64_t v57 = *(void *)(v50 + 64 + 8 * v54);
      if (v57) {
        goto LABEL_30;
      }
      int64_t v58 = v43 + 1;
      if (v43 + 2 < v55)
      {
        unint64_t v57 = *(void *)(v56 + 8 * (v43 + 2));
        if (v57)
        {
          int64_t v54 = v43 + 2;
LABEL_30:
          unint64_t v47 = (v57 - 1) & v57;
          unint64_t v49 = __clz(__rbit64(v57)) + (v54 << 6);
          int64_t v43 = v54;
          goto LABEL_26;
        }
        int64_t v58 = v43 + 2;
        if (v43 + 3 < v55)
        {
          unint64_t v57 = *(void *)(v56 + 8 * (v43 + 3));
          if (v57)
          {
            int64_t v54 = v43 + 3;
            goto LABEL_30;
          }
          int64_t v54 = v43 + 4;
          int64_t v58 = v43 + 3;
          if (v43 + 4 < v55)
          {
            unint64_t v57 = *(void *)(v56 + 8 * v54);
            if (v57) {
              goto LABEL_30;
            }
            int64_t v58 = v55 - 1;
            int64_t v69 = v55 - 5;
            while (v69 != v43)
            {
              unint64_t v57 = *(void *)(v50 + 104 + 8 * v43++);
              if (v57)
              {
                int64_t v54 = v43 + 4;
                goto LABEL_30;
              }
            }
          }
        }
      }
    }
    uint64_t v59 = *(void *)(v0 + 152);
    uint64_t v60 = sub_10000588C(&qword_10164F3F8);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v60 - 8) + 56))(v59, 1, 1, v60);
    unint64_t v47 = 0;
    int64_t v43 = v58;
LABEL_33:
    *(void *)(v0 + 440) = v43;
    *(void *)(v0 + 448) = v47;
    uint64_t v61 = *(void *)(v0 + 160);
    sub_10001D608(*(void *)(v0 + 152), v61, (uint64_t *)&unk_10165F400);
    uint64_t v62 = sub_10000588C(&qword_10164F3F8);
    int v63 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v62 - 8) + 48))(v61, 1, v62);
    uint64_t v64 = *(void *)(v0 + 432);
    if (v63 == 1)
    {
      uint64_t v22 = *(void *)(v0 + 320);
      uint64_t v23 = *(void *)(v0 + 272);
      swift_bridgeObjectRelease();
      swift_release();
      goto LABEL_11;
    }
    int v65 = *(unsigned __int8 *)(*(void *)(v0 + 160) + *(int *)(v62 + 48));
    (*(void (**)(void))(v0 + 376))(*(void *)(v0 + 216));
    if (*(void *)(v64 + 16))
    {
      unint64_t v66 = sub_1007240CC(*(void *)(v0 + 216));
      if ((v67 & 1) != 0 && !v65 && *(unsigned char *)(*(void *)(*(void *)(v0 + 432) + 56) + v66) == 1) {
        break;
      }
    }
    uint64_t v40 = (*(uint64_t (**)(void, void))(v0 + 408))(*(void *)(v0 + 216), *(void *)(v0 + 184));
  }
  uint64_t v41 = *(void *)(v0 + 328);
  uint64_t v40 = (uint64_t)sub_100B8DB88;
  uint64_t v42 = 0;
  return _swift_task_switch(v40, v41, v42);
}

uint64_t sub_100B8DB88()
{
  uint64_t v1 = *(void (**)(unint64_t, uint64_t, uint64_t))(v0 + 376);
  uint64_t v2 = *(void (**)(uint64_t, uint64_t, uint64_t))(v0 + 344);
  uint64_t v3 = *(void *)(v0 + 328);
  uint64_t v4 = *(void *)(v0 + 232);
  uint64_t v5 = *(void *)(v0 + 216);
  uint64_t v6 = *(void *)(v0 + 184);
  unint64_t v7 = (*(unsigned __int8 *)(v0 + 516) + 24) & ~(unint64_t)*(unsigned __int8 *)(v0 + 516);
  *(void *)(v0 + 456) = *(void *)(v3 + 136);
  v2(v4, v5, v6);
  uint64_t v8 = swift_allocObject();
  *(void *)(v0 + 464) = v8;
  *(void *)(v8 + 16) = v3;
  v1(v8 + v7, v4, v6);
  swift_retain();
  return _swift_task_switch(sub_100B8DC7C, 0, 0);
}

uint64_t sub_100B8DC7C()
{
  uint64_t v2 = v0[57];
  uint64_t v1 = v0[58];
  uint64_t v3 = (void *)swift_task_alloc();
  v0[59] = v3;
  v3[2] = v2;
  v3[3] = sub_100B959EC;
  v3[4] = v1;
  uint64_t v4 = (void *)swift_task_alloc();
  v0[60] = v4;
  *uint64_t v4 = v0;
  v4[1] = sub_100B8DD80;
  uint64_t v6 = v0[14];
  uint64_t v5 = v0[15];
  return withCheckedContinuation<A>(isolation:function:_:)(v5, 0, 0, 0xD000000000000012, 0x80000001013F1870, sub_1000750F8, v3, v6);
}

uint64_t sub_100B8DD80()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 104);
  swift_task_dealloc();
  swift_release();
  swift_task_dealloc();
  return _swift_task_switch(sub_100B8DED0, v1, 0);
}

uint64_t sub_100B8DED0()
{
  uint64_t v32 = v0;
  uint64_t v1 = *(void *)(v0 + 128);
  uint64_t v2 = *(void *)(v0 + 120);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v0 + 136) + 48))(v2, 1, v1) == 1)
  {
    swift_bridgeObjectRelease();
    sub_10001DAB4(v2, (uint64_t *)&unk_10163B890);
    if (qword_101636FA0 != -1) {
      swift_once();
    }
    uint64_t v3 = *(void (**)(uint64_t, uint64_t, uint64_t))(v0 + 344);
    uint64_t v4 = *(void *)(v0 + 208);
    uint64_t v5 = *(void *)(v0 + 216);
    uint64_t v6 = *(void *)(v0 + 184);
    uint64_t v7 = type metadata accessor for Logger();
    sub_100010324(v7, (uint64_t)qword_10170EA60);
    v3(v4, v5, v6);
    uint64_t v8 = Logger.logObject.getter();
    os_log_type_t v9 = static os_log_type_t.error.getter();
    BOOL v10 = os_log_type_enabled(v8, v9);
    uint64_t v11 = *(void (**)(uint64_t, uint64_t))(v0 + 408);
    uint64_t v12 = *(void *)(v0 + 208);
    uint64_t v13 = *(void *)(v0 + 184);
    if (v10)
    {
      uint64_t v14 = (uint8_t *)swift_slowAlloc();
      uint64_t v31 = swift_slowAlloc();
      *(_DWORD *)uint64_t v14 = 136380675;
      sub_100B95984((unint64_t *)&qword_101638B10, 255, (void (*)(uint64_t))&type metadata accessor for UUID);
      uint64_t v15 = dispatch thunk of CustomStringConvertible.description.getter();
      *(void *)(v0 + 96) = sub_1008FA0F0(v15, v16, &v31);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      v11(v12, v13);
      _os_log_impl((void *)&_mh_execute_header, v8, v9, "Can't post transparency notification due to no member peer trust for %{private}s identifier.", v14, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      v11(*(void *)(v0 + 208), *(void *)(v0 + 184));
    }

    sub_100B954CC();
    swift_allocError();
    *uint64_t v26 = 0;
    swift_willThrow();
    uint64_t v27 = *(void *)(v0 + 320);
    uint64_t v28 = *(void *)(v0 + 296);
    uint64_t v29 = *(void *)(v0 + 272);
    (*(void (**)(void, void))(v0 + 408))(*(void *)(v0 + 216), *(void *)(v0 + 184));
    swift_release();
    sub_100B95DC0(v29, type metadata accessor for SharedBeaconRecord);
    sub_10001DAB4(v27, &qword_1016578F0);
    sub_10001DAB4(v28, (uint64_t *)&unk_10163B7C0);
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v30 = *(uint64_t (**)(void))(v0 + 8);
    return v30();
  }
  else
  {
    uint64_t v17 = *(int *)(v0 + 512);
    uint64_t v18 = *(void *)(v0 + 320);
    uint64_t v19 = *(void *)(v0 + 144);
    sub_100B95FE8(v2, v19, (uint64_t (*)(void))type metadata accessor for MemberPeerTrust);
    uint64_t v20 = v19 + *(int *)(v1 + 20);
    int v21 = (uint64_t *)(v19 + *(int *)(v1 + 32));
    uint64_t v22 = *v21;
    uint64_t v23 = v21[1];
    *(void *)(v0 + 488) = v23;
    swift_bridgeObjectRetain();
    os_log_type_t v24 = (void *)swift_task_alloc();
    *(void *)(v0 + 496) = v24;
    *os_log_type_t v24 = v0;
    v24[1] = sub_100B8E390;
    return sub_100B87E70(v0 + 16, v18 + v17, v20, v22, v23);
  }
}

uint64_t sub_100B8E390()
{
  uint64_t v2 = *v1;
  *(void *)(*v1 + 504) = v0;
  swift_task_dealloc();
  uint64_t v3 = *(void *)(v2 + 104);
  if (v0) {
    uint64_t v4 = sub_100B8EAE0;
  }
  else {
    uint64_t v4 = sub_100B8E4BC;
  }
  return _swift_task_switch(v4, v3, 0);
}

uint64_t sub_100B8E4BC()
{
  uint64_t v1 = (void *)(v0 + 16);
  uint64_t v45 = (uint64_t *)(v0 + 56);
  if (qword_101636FA0 != -1) {
LABEL_43:
  }
    swift_once();
  uint64_t v2 = type metadata accessor for Logger();
  sub_100010324(v2, (uint64_t)qword_10170EA60);
  uint64_t v3 = Logger.logObject.getter();
  os_log_type_t v4 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v3, v4))
  {
    uint64_t v5 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v5 = 0;
    _os_log_impl((void *)&_mh_execute_header, v3, v4, "Post Transparency Notification", v5, 2u);
    swift_slowDealloc();
  }
  char v44 = *(void (**)(uint64_t, uint64_t))(v0 + 408);
  uint64_t v42 = *(void *)(v0 + 184);
  uint64_t v43 = *(void *)(v0 + 216);
  uint64_t v6 = *(void *)(v0 + 144);

  swift_unownedRetainStrong();
  uint64_t v8 = *(void *)(v0 + 40);
  uint64_t v7 = *(void *)(v0 + 48);
  os_log_type_t v9 = sub_10001CD44(v1, v8);
  *(void *)(v0 + 80) = v8;
  uint64_t v10 = *(void *)(v7 + 8);
  *(void *)(v0 + 88) = v10;
  uint64_t v11 = (uint64_t)v1;
  uint64_t v12 = sub_10001D958(v45);
  (*(void (**)(uint64_t *, void *, uint64_t))(*(void *)(v8 - 8) + 16))(v12, v9, v8);
  sub_100E0525C((uint64_t)v12, 0, 0, v8, v10);
  swift_release();
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)v45);
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v11);
  swift_bridgeObjectRelease();
  sub_100B95DC0(v6, (uint64_t (*)(void))type metadata accessor for MemberPeerTrust);
  v44(v43, v42);
  int64_t v13 = *(void *)(v0 + 440);
  unint64_t v14 = *(void *)(v0 + 448);
  uint64_t v1 = &unk_10165F400;
  while (1)
  {
    if (v14)
    {
      unint64_t v15 = __clz(__rbit64(v14));
      v14 &= v14 - 1;
      unint64_t v16 = v15 | (v13 << 6);
      uint64_t v17 = *(void *)(v0 + 424);
LABEL_8:
      uint64_t v18 = *(void *)(v0 + 152);
      (*(void (**)(uint64_t, unint64_t, void))(v0 + 344))(v18, *(void *)(v17 + 48) + *(void *)(*(void *)(v0 + 192) + 72) * v16, *(void *)(v0 + 184));
      uint64_t v19 = *(void *)(v17 + 56);
      uint64_t v20 = sub_10000588C(&qword_10164F3F8);
      *(unsigned char *)(v18 + *(int *)(v20 + 48)) = *(unsigned char *)(v19 + v16);
      (*(void (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v20 - 8) + 56))(v18, 0, 1, v20);
      goto LABEL_15;
    }
    int64_t v21 = v13 + 1;
    if (__OFADD__(v13, 1))
    {
      __break(1u);
      goto LABEL_43;
    }
    int64_t v22 = (unint64_t)((1 << *(unsigned char *)(v0 + 520)) + 63) >> 6;
    if (v21 >= v22)
    {
      int64_t v25 = v13;
    }
    else
    {
      uint64_t v17 = *(void *)(v0 + 424);
      uint64_t v23 = v17 + 64;
      unint64_t v24 = *(void *)(v17 + 64 + 8 * v21);
      if (v24) {
        goto LABEL_12;
      }
      int64_t v25 = v13 + 1;
      if (v13 + 2 < v22)
      {
        unint64_t v24 = *(void *)(v23 + 8 * (v13 + 2));
        if (v24)
        {
          int64_t v21 = v13 + 2;
LABEL_12:
          unint64_t v14 = (v24 - 1) & v24;
          unint64_t v16 = __clz(__rbit64(v24)) + (v21 << 6);
          int64_t v13 = v21;
          goto LABEL_8;
        }
        int64_t v25 = v13 + 2;
        if (v13 + 3 < v22)
        {
          unint64_t v24 = *(void *)(v23 + 8 * (v13 + 3));
          if (v24)
          {
            int64_t v21 = v13 + 3;
            goto LABEL_12;
          }
          int64_t v21 = v13 + 4;
          int64_t v25 = v13 + 3;
          if (v13 + 4 < v22)
          {
            unint64_t v24 = *(void *)(v23 + 8 * v21);
            if (v24) {
              goto LABEL_12;
            }
            int64_t v25 = v22 - 1;
            int64_t v36 = v22 - 5;
            while (v36 != v13)
            {
              unint64_t v24 = *(void *)(v17 + 104 + 8 * v13++);
              if (v24)
              {
                int64_t v21 = v13 + 4;
                goto LABEL_12;
              }
            }
          }
        }
      }
    }
    uint64_t v26 = *(void *)(v0 + 152);
    uint64_t v27 = sub_10000588C(&qword_10164F3F8);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v27 - 8) + 56))(v26, 1, 1, v27);
    unint64_t v14 = 0;
    int64_t v13 = v25;
LABEL_15:
    *(void *)(v0 + 440) = v13;
    *(void *)(v0 + 448) = v14;
    uint64_t v28 = *(void *)(v0 + 160);
    sub_10001D608(*(void *)(v0 + 152), v28, (uint64_t *)&unk_10165F400);
    uint64_t v29 = sub_10000588C(&qword_10164F3F8);
    int v30 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v29 - 8) + 48))(v28, 1, v29);
    uint64_t v31 = *(void *)(v0 + 432);
    if (v30 == 1) {
      break;
    }
    int v32 = *(unsigned __int8 *)(*(void *)(v0 + 160) + *(int *)(v29 + 48));
    (*(void (**)(void))(v0 + 376))(*(void *)(v0 + 216));
    if (*(void *)(v31 + 16))
    {
      unint64_t v33 = sub_1007240CC(*(void *)(v0 + 216));
      if ((v34 & 1) != 0 && !v32 && *(unsigned char *)(*(void *)(*(void *)(v0 + 432) + 56) + v33) == 1)
      {
        uint64_t v41 = *(void *)(v0 + 328);
        return _swift_task_switch(sub_100B8DB88, v41, 0);
      }
    }
    (*(void (**)(void, void))(v0 + 408))(*(void *)(v0 + 216), *(void *)(v0 + 184));
  }
  uint64_t v37 = *(void *)(v0 + 320);
  uint64_t v38 = *(void *)(v0 + 272);
  swift_bridgeObjectRelease();
  swift_release();
  sub_100B95DC0(v38, type metadata accessor for SharedBeaconRecord);
  sub_10001DAB4(v37, &qword_1016578F0);
  sub_10001DAB4(*(void *)(v0 + 296), (uint64_t *)&unk_10163B7C0);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v39 = *(uint64_t (**)(void))(v0 + 8);
  return v39();
}

uint64_t sub_100B8EAE0()
{
  uint64_t v1 = *(void *)(v0 + 144);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_100B95DC0(v1, (uint64_t (*)(void))type metadata accessor for MemberPeerTrust);
  uint64_t v2 = *(void *)(v0 + 320);
  uint64_t v3 = *(void *)(v0 + 296);
  uint64_t v4 = *(void *)(v0 + 272);
  (*(void (**)(void, void))(v0 + 408))(*(void *)(v0 + 216), *(void *)(v0 + 184));
  swift_release();
  sub_100B95DC0(v4, type metadata accessor for SharedBeaconRecord);
  sub_10001DAB4(v2, &qword_1016578F0);
  sub_10001DAB4(v3, (uint64_t *)&unk_10163B7C0);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v5 = *(uint64_t (**)(void))(v0 + 8);
  return v5();
}

uint64_t sub_100B8ECC0(uint64_t a1, uint64_t a2)
{
  *(void *)(v3 + 16) = v2;
  uint64_t v6 = type metadata accessor for UUID();
  *(void *)(v3 + 24) = v6;
  *(void *)(v3 + 32) = *(void *)(v6 - 8);
  *(void *)(v3 + 40) = swift_task_alloc();
  uint64_t v7 = sub_10000588C(&qword_1016578E0);
  *(void *)(v3 + 48) = v7;
  *(void *)(v3 + 56) = swift_task_alloc();
  *(void *)(v3 + 64) = swift_task_alloc();
  *(void *)(v3 + 72) = swift_task_alloc();
  uint64_t v8 = swift_task_alloc();
  *(void *)(v3 + 80) = v8;
  uint64_t v9 = *(int *)(v7 + 48);
  *(_DWORD *)(v3 + 128) = v9;
  uint64_t v10 = v8 + v9;
  sub_10001D074(a1, v8, (uint64_t *)&unk_101638D10);
  sub_100B95ED4(a2, v10, (uint64_t (*)(void))type metadata accessor for OwnerSharingCircle);
  return _swift_task_switch(sub_100B8EE3C, v2, 0);
}

uint64_t sub_100B8EE3C()
{
  uint64_t v1 = *(void *)(v0 + 80);
  uint64_t v2 = (int *)type metadata accessor for OwnerSharingCircle();
  if ((*(unsigned int (**)(uint64_t, uint64_t, int *))(*((void *)v2 - 1) + 48))(v1, 1, v2) == 1)
  {
    uint64_t v4 = *(void *)(v0 + 64);
    uint64_t v3 = *(void *)(v0 + 72);
    uint64_t v5 = *(void *)(v0 + 48);
    uint64_t v6 = v1 + *(int *)(v0 + 128);
    uint64_t v7 = v3 + *(int *)(v5 + 48);
    sub_10001D074(v1, v3, (uint64_t *)&unk_101638D10);
    sub_100B95ED4(v6, v7, (uint64_t (*)(void))type metadata accessor for OwnerSharingCircle);
    int v8 = *(unsigned __int8 *)(v7 + v2[7]);
    sub_100B95DC0(v7, (uint64_t (*)(void))type metadata accessor for OwnerSharingCircle);
    sub_10001DAB4(v3, (uint64_t *)&unk_101638D10);
    uint64_t v9 = v4 + *(int *)(v5 + 48);
    sub_10001D074(v1, v4, (uint64_t *)&unk_101638D10);
    sub_100B95ED4(v6, v9, (uint64_t (*)(void))type metadata accessor for OwnerSharingCircle);
    if (v8 == 2)
    {
      uint64_t v11 = *(void *)(v0 + 64);
      uint64_t v10 = *(void *)(v0 + 72);
      uint64_t v12 = v10 + *(int *)(*(void *)(v0 + 48) + 48);
      sub_10001D074(v11, v10, (uint64_t *)&unk_101638D10);
      sub_100B95ED4(v9, v12, (uint64_t (*)(void))type metadata accessor for OwnerSharingCircle);
      int v13 = *(unsigned __int8 *)(v12 + v2[9]);
      sub_100B95DC0(v12, (uint64_t (*)(void))type metadata accessor for OwnerSharingCircle);
      sub_10001DAB4(v11, &qword_1016578E0);
      sub_10001DAB4(v10, (uint64_t *)&unk_101638D10);
      uint64_t v1 = *(void *)(v0 + 80);
      if (v13 == 2)
      {
        uint64_t v14 = *(void *)(v0 + 72);
        uint64_t v15 = *(void *)(v0 + 48);
        uint64_t v16 = *(void *)(v0 + 32);
        uint64_t v25 = *(void *)(v0 + 24);
        uint64_t v26 = *(void *)(v0 + 40);
        uint64_t v17 = v1 + *(int *)(v0 + 128);
        sub_100B958BC();
        sub_100B95910();
        uint64_t v18 = static CaseIterable<>.allMembers.getter();
        uint64_t v19 = sub_1008A5510((uint64_t)&off_1015A5948, v18);
        *(void *)(v0 + 88) = v19;
        uint64_t v20 = v14 + *(int *)(v15 + 48);
        sub_10001D074(v1, v14, (uint64_t *)&unk_101638D10);
        sub_100B95ED4(v17, v20, (uint64_t (*)(void))type metadata accessor for OwnerSharingCircle);
        (*(void (**)(uint64_t, uint64_t, uint64_t))(v16 + 16))(v26, v20 + v2[6], v25);
        sub_100B95DC0(v20, (uint64_t (*)(void))type metadata accessor for OwnerSharingCircle);
        int64_t v21 = (void *)swift_task_alloc();
        *(void *)(v0 + 96) = v21;
        *int64_t v21 = v0;
        v21[1] = sub_100B8F1F0;
        uint64_t v22 = *(void *)(v0 + 40);
        return sub_100E59F38(v22, (uint64_t)v19);
      }
    }
    else
    {
      sub_10001DAB4(*(void *)(v0 + 64), &qword_1016578E0);
      uint64_t v1 = *(void *)(v0 + 80);
    }
  }
  sub_10001DAB4(v1, &qword_1016578E0);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  unint64_t v24 = *(uint64_t (**)(void))(v0 + 8);
  return v24();
}

uint64_t sub_100B8F1F0(uint64_t a1)
{
  uint64_t v2 = *(void *)(*(void *)v1 + 72);
  uint64_t v3 = *(void *)(*(void *)v1 + 40);
  uint64_t v4 = *(void *)(*(void *)v1 + 32);
  uint64_t v5 = *(void *)(*(void *)v1 + 24);
  uint64_t v6 = *(void *)(*(void *)v1 + 16);
  *(void *)(*(void *)v1 + 104) = a1;
  swift_task_dealloc();
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v3, v5);
  sub_10001DAB4(v2, (uint64_t *)&unk_101638D10);
  return _swift_task_switch(sub_100B8F3AC, v6, 0);
}

uint64_t sub_100B8F3AC()
{
  uint64_t v1 = *(void *)(v0 + 104);
  uint64_t v2 = *(void *)(v0 + 80);
  uint64_t v3 = *(void *)(v0 + 56);
  uint64_t v4 = v2 + *(int *)(v0 + 128);
  uint64_t v5 = v3 + *(int *)(*(void *)(v0 + 48) + 48);
  sub_10001D074(v2, v3, (uint64_t *)&unk_101638D10);
  sub_100B95ED4(v4, v5, (uint64_t (*)(void))type metadata accessor for OwnerSharingCircle);
  uint64_t v6 = (void *)swift_task_alloc();
  v6[2] = v3;
  uint64_t v7 = sub_1000A3E84((uint64_t (*)(char *))sub_100B95964, v6, v1);
  swift_task_dealloc();
  sub_10001DAB4(v3, &qword_1016578E0);
  uint64_t v8 = *(void *)(v7 + 16);
  swift_bridgeObjectRelease();
  if (v8)
  {
    if (qword_101636FA0 != -1) {
      swift_once();
    }
    uint64_t v9 = type metadata accessor for Logger();
    sub_100010324(v9, (uint64_t)qword_10170EA60);
    uint64_t v10 = Logger.logObject.getter();
    os_log_type_t v11 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v10, v11))
    {
      uint64_t v12 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v12 = 0;
      _os_log_impl((void *)&_mh_execute_header, v10, v11, "Beacon already requested by the sharee!", v12, 2u);
      swift_slowDealloc();
    }

    sub_10001DAB4(*(void *)(v0 + 80), &qword_1016578E0);
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    int v13 = *(uint64_t (**)(void))(v0 + 8);
    return v13();
  }
  else
  {
    uint64_t v15 = *(int *)(v0 + 128);
    uint64_t v16 = *(void *)(v0 + 80);
    uint64_t v17 = (void *)swift_task_alloc();
    *(void *)(v0 + 112) = v17;
    *uint64_t v17 = v0;
    v17[1] = sub_100B8F648;
    return sub_100B82710(v16 + v15, 0, 0, 0);
  }
}

uint64_t sub_100B8F648()
{
  uint64_t v2 = *v1;
  *(void *)(*v1 + 120) = v0;
  swift_task_dealloc();
  uint64_t v3 = *(void *)(v2 + 16);
  if (v0) {
    uint64_t v4 = sub_100B8F824;
  }
  else {
    uint64_t v4 = sub_100B8F774;
  }
  return _swift_task_switch(v4, v3, 0);
}

uint64_t sub_100B8F774()
{
  sub_10001DAB4(*(void *)(v0 + 80), &qword_1016578E0);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_100B8F824()
{
  sub_10001DAB4(*(void *)(v0 + 80), &qword_1016578E0);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_100B8F8D4(uint64_t a1, uint64_t a2)
{
  uint64_t v49 = a1;
  uint64_t v4 = type metadata accessor for UUID();
  uint64_t v45 = *(void *)(v4 - 8);
  uint64_t v46 = v4;
  uint64_t v5 = __chkstk_darwin(v4);
  char v44 = (char *)&v42 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5);
  unint64_t v48 = (char *)&v42 - v7;
  uint64_t v8 = (int *)type metadata accessor for OwnerSharingCircle();
  __chkstk_darwin(v8);
  uint64_t v51 = (uint64_t)&v42 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = sub_10000588C(&qword_1016578E0);
  uint64_t v11 = __chkstk_darwin(v10);
  int v13 = (char *)&v42 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = __chkstk_darwin(v11);
  uint64_t v16 = (char *)&v42 - v15;
  uint64_t v17 = *(void *)(a1 + v8[8]);
  uint64_t v18 = *(int *)(v14 + 48);
  uint64_t v19 = (char *)&v42 + v18 - v15;
  uint64_t v20 = a2;
  uint64_t v50 = (char *)a2;
  uint64_t v21 = a2 + v18;
  sub_10001D074(v20, (uint64_t)&v42 - v15, (uint64_t *)&unk_101638D10);
  sub_100B95ED4(v21, (uint64_t)v19, (uint64_t (*)(void))type metadata accessor for OwnerSharingCircle);
  uint64_t v22 = *(void *)&v19[v8[8]];
  swift_bridgeObjectRetain();
  sub_100B95DC0((uint64_t)v19, (uint64_t (*)(void))type metadata accessor for OwnerSharingCircle);
  int v47 = sub_100DF62D4(v17, v22);
  uint64_t v23 = v51;
  swift_bridgeObjectRelease();
  uint64_t v43 = v16;
  uint64_t v24 = (uint64_t)v16;
  uint64_t v25 = v10;
  sub_10001DAB4(v24, (uint64_t *)&unk_101638D10);
  LODWORD(v19) = *(unsigned __int8 *)(v49 + v8[9]);
  sub_100B95ED4(v49, v23, (uint64_t (*)(void))type metadata accessor for OwnerSharingCircle);
  uint64_t v26 = (uint64_t)&v13[*(int *)(v10 + 48)];
  uint64_t v27 = (uint64_t)v50;
  uint64_t v50 = v13;
  sub_10001D074(v27, (uint64_t)v13, (uint64_t *)&unk_101638D10);
  sub_100B95ED4(v21, v26, (uint64_t (*)(void))type metadata accessor for OwnerSharingCircle);
  if v19 == 2 && (v47)
  {
    uint64_t v28 = v23 + v8[5];
    uint64_t v30 = v45;
    uint64_t v29 = v46;
    uint64_t v31 = *(void (**)(char *, uint64_t, uint64_t))(v45 + 16);
    v31(v48, v28, v46);
    uint64_t v32 = *(int *)(v25 + 48);
    uint64_t v33 = (uint64_t)v43;
    uint64_t v34 = (uint64_t)&v43[v32];
    uint64_t v35 = (uint64_t)v50;
    sub_10001D074((uint64_t)v50, (uint64_t)v43, (uint64_t *)&unk_101638D10);
    sub_100B95ED4(v26, v34, (uint64_t (*)(void))type metadata accessor for OwnerSharingCircle);
    uint64_t v36 = v34 + v8[5];
    uint64_t v37 = v44;
    v31(v44, v36, v29);
    sub_100B95DC0(v34, (uint64_t (*)(void))type metadata accessor for OwnerSharingCircle);
    sub_100B95984((unint64_t *)&qword_10163B8F0, 255, (void (*)(uint64_t))&type metadata accessor for UUID);
    uint64_t v38 = v48;
    LOBYTE(v34) = dispatch thunk of static Equatable.== infix(_:_:)();
    uint64_t v39 = *(void (**)(char *, uint64_t))(v30 + 8);
    v39(v37, v29);
    v39(v38, v29);
    sub_10001DAB4(v35, &qword_1016578E0);
    sub_100B95DC0(v51, (uint64_t (*)(void))type metadata accessor for OwnerSharingCircle);
    char v40 = v34 ^ 1;
    sub_10001DAB4(v33, (uint64_t *)&unk_101638D10);
  }
  else
  {
    sub_10001DAB4((uint64_t)v50, &qword_1016578E0);
    sub_100B95DC0(v23, (uint64_t (*)(void))type metadata accessor for OwnerSharingCircle);
    char v40 = 0;
  }
  return v40 & 1;
}

uint64_t sub_100B8FD24(uint64_t a1)
{
  v2[7] = a1;
  v2[8] = v1;
  v2[9] = type metadata accessor for DelegatedShareStartUserNotification();
  v2[10] = swift_task_alloc();
  uint64_t v3 = type metadata accessor for UUID();
  v2[11] = v3;
  uint64_t v4 = *(void *)(v3 - 8);
  v2[12] = v4;
  v2[13] = *(void *)(v4 + 64);
  v2[14] = swift_task_alloc();
  v2[15] = swift_task_alloc();
  v2[16] = sub_10000588C((uint64_t *)&unk_10163B7C0);
  v2[17] = swift_task_alloc();
  uint64_t v5 = type metadata accessor for MemberSharingCircle();
  v2[18] = v5;
  v2[19] = *(void *)(v5 - 8);
  v2[20] = swift_task_alloc();
  return _swift_task_switch(sub_100B8FEBC, v1, 0);
}

uint64_t sub_100B8FEBC()
{
  uint64_t v1 = *(void *)(*(void *)(v0 + 64) + 136);
  *(void *)(v0 + 168) = v1;
  return _swift_task_switch(sub_100B8FEE0, v1, 0);
}

uint64_t sub_100B8FEE0()
{
  uint64_t v1 = v0[21];
  uint64_t v2 = v0[15];
  uint64_t v3 = v0[12];
  uint64_t v4 = v0[11];
  uint64_t v5 = v0[7];
  v0[22] = *(void *)(v1 + 136);
  uint64_t v6 = *(void (**)(uint64_t, uint64_t, uint64_t))(v3 + 16);
  v0[23] = v6;
  v0[24] = (v3 + 16) & 0xFFFFFFFFFFFFLL | 0xE3BA000000000000;
  v6(v2, v5, v4);
  unint64_t v7 = (*(unsigned __int8 *)(v3 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  uint64_t v8 = swift_allocObject();
  v0[25] = v8;
  *(void *)(v8 + 16) = v1;
  (*(void (**)(unint64_t, uint64_t, uint64_t))(v3 + 32))(v8 + v7, v2, v4);
  swift_retain();
  return _swift_task_switch(sub_100B8FFE4, 0, 0);
}

uint64_t sub_100B8FFE4()
{
  uint64_t v1 = v0[25];
  uint64_t v2 = v0[22];
  uint64_t v3 = (void *)swift_task_alloc();
  v0[26] = v3;
  v3[2] = v2;
  v3[3] = sub_100B958A4;
  v3[4] = v1;
  uint64_t v4 = (void *)swift_task_alloc();
  v0[27] = v4;
  *uint64_t v4 = v0;
  v4[1] = sub_100B900EC;
  uint64_t v6 = v0[16];
  uint64_t v5 = v0[17];
  return withCheckedContinuation<A>(isolation:function:_:)(v5, 0, 0, 0xD000000000000012, 0x80000001013F1870, sub_100075020, v3, v6);
}

uint64_t sub_100B900EC()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 64);
  swift_task_dealloc();
  swift_release();
  swift_task_dealloc();
  return _swift_task_switch(sub_100B9023C, v1, 0);
}

uint64_t sub_100B9023C()
{
  uint64_t v1 = v0[18];
  uint64_t v2 = v0[17];
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v0[19] + 48))(v2, 1, v1) == 1)
  {
    sub_10001DAB4(v2, (uint64_t *)&unk_10163B7C0);
    sub_100B954CC();
    swift_allocError();
    *uint64_t v3 = 0;
    swift_willThrow();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v4 = (uint64_t (*)(void))v0[1];
    return v4();
  }
  else
  {
    uint64_t v6 = v0[20];
    sub_100B95FE8(v2, v6, (uint64_t (*)(void))type metadata accessor for MemberSharingCircle);
    uint64_t v7 = v6 + *(int *)(v1 + 24);
    uint64_t v8 = (void *)swift_task_alloc();
    v0[28] = v8;
    *uint64_t v8 = v0;
    v8[1] = sub_100B903F4;
    return sub_100B945DC(v7);
  }
}

uint64_t sub_100B903F4(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = (void *)*v2;
  uint64_t v4 = (void *)*v2;
  v4[2] = v2;
  v4[3] = a1;
  v4[4] = a2;
  uint64_t v5 = v3[8];
  v4[29] = a2;
  swift_task_dealloc();
  return _swift_task_switch(sub_100B90510, v5, 0);
}

uint64_t sub_100B90510()
{
  uint64_t v26 = v0;
  uint64_t v1 = *(void *)(v0 + 232);
  if (v1)
  {
    uint64_t v2 = *(void *)(v0 + 24);
    uint64_t v3 = *(void *)(v0 + 80);
    uint64_t v4 = *(void *)(v0 + 72);
    (*(void (**)(uint64_t, void, void))(v0 + 184))(v3, *(void *)(v0 + 56), *(void *)(v0 + 88));
    uint64_t v5 = (void *)(v3 + *(int *)(v4 + 20));
    *uint64_t v5 = v2;
    v5[1] = v1;
    if (qword_101636FA0 != -1) {
      swift_once();
    }
    uint64_t v6 = *(void (**)(uint64_t, uint64_t, uint64_t))(v0 + 184);
    uint64_t v7 = *(void *)(v0 + 112);
    uint64_t v8 = *(void *)(v0 + 88);
    uint64_t v9 = *(void *)(v0 + 56);
    uint64_t v10 = type metadata accessor for Logger();
    sub_100010324(v10, (uint64_t)qword_10170EA60);
    v6(v7, v9, v8);
    uint64_t v11 = Logger.logObject.getter();
    os_log_type_t v12 = static os_log_type_t.default.getter();
    BOOL v13 = os_log_type_enabled(v11, v12);
    uint64_t v14 = *(void *)(v0 + 112);
    uint64_t v15 = *(void *)(v0 + 88);
    uint64_t v16 = *(void *)(v0 + 96);
    if (v13)
    {
      uint64_t v17 = swift_slowAlloc();
      uint64_t v25 = swift_slowAlloc();
      *(_DWORD *)uint64_t v17 = 141558275;
      *(void *)(v0 + 40) = 1752392040;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v17 + 12) = 2081;
      sub_100B95984((unint64_t *)&qword_101638B10, 255, (void (*)(uint64_t))&type metadata accessor for UUID);
      uint64_t v18 = dispatch thunk of CustomStringConvertible.description.getter();
      *(void *)(v0 + 48) = sub_1008FA0F0(v18, v19, &v25);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      (*(void (**)(uint64_t, uint64_t))(v16 + 8))(v14, v15);
      _os_log_impl((void *)&_mh_execute_header, v11, v12, "Post transparency notification for delegation start, share id: %{private,mask.hash}s", (uint8_t *)v17, 0x16u);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      (*(void (**)(void, void))(v16 + 8))(*(void *)(v0 + 112), *(void *)(v0 + 88));
    }

    uint64_t v22 = *(void *)(v0 + 160);
    uint64_t v23 = *(void *)(v0 + 80);
    swift_unownedRetainStrong();
    sub_101094930(v23, 0, 0);
    swift_release();
    sub_100B95DC0(v23, (uint64_t (*)(void))type metadata accessor for DelegatedShareStartUserNotification);
    sub_100B95DC0(v22, (uint64_t (*)(void))type metadata accessor for MemberSharingCircle);
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v21 = *(uint64_t (**)(void))(v0 + 8);
  }
  else
  {
    sub_100B95DC0(*(void *)(v0 + 160), (uint64_t (*)(void))type metadata accessor for MemberSharingCircle);
    sub_100B954CC();
    swift_allocError();
    *uint64_t v20 = 0;
    swift_willThrow();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v21 = *(uint64_t (**)(void))(v0 + 8);
  }
  return v21();
}

uint64_t sub_100B908E8(uint64_t a1)
{
  v2[8] = a1;
  v2[9] = v1;
  v2[10] = type metadata accessor for OwnerSharingCircle();
  v2[11] = swift_task_alloc();
  v2[12] = swift_task_alloc();
  v2[13] = swift_task_alloc();
  v2[14] = type metadata accessor for DelegatedShareExpirationUserNotification(0);
  v2[15] = swift_task_alloc();
  sub_10000588C(&qword_10163B8A0);
  v2[16] = swift_task_alloc();
  sub_10000588C(&qword_101638CF0);
  v2[17] = swift_task_alloc();
  uint64_t v3 = type metadata accessor for UUID();
  v2[18] = v3;
  uint64_t v4 = *(void *)(v3 - 8);
  v2[19] = v4;
  v2[20] = *(void *)(v4 + 64);
  v2[21] = swift_task_alloc();
  v2[22] = swift_task_alloc();
  v2[23] = sub_10000588C(&qword_10163B9E0);
  v2[24] = swift_task_alloc();
  return _swift_task_switch(sub_100B90AD0, v1, 0);
}

uint64_t sub_100B90AD0()
{
  uint64_t v1 = *(void *)(v0 + 80);
  uint64_t v2 = *(void *)(*(void *)(v0 + 72) + 136);
  *(void *)(v0 + 200) = v2;
  *(_DWORD *)(v0 + 272) = *(_DWORD *)(v1 + 24);
  return _swift_task_switch(sub_100B90AFC, v2, 0);
}

uint64_t sub_100B90AFC()
{
  uint64_t v1 = *(void *)(v0 + 200);
  uint64_t v2 = *(void *)(v0 + 176);
  uint64_t v3 = *(void *)(v0 + 152);
  uint64_t v4 = *(void *)(v0 + 144);
  uint64_t v5 = *(void *)(v0 + 64) + *(int *)(v0 + 272);
  *(void *)(v0 + 208) = *(void *)(v1 + 136);
  uint64_t v6 = *(void (**)(uint64_t, uint64_t, uint64_t))(v3 + 16);
  *(void *)(v0 + 216) = v6;
  *(void *)(v0 + 224) = (v3 + 16) & 0xFFFFFFFFFFFFLL | 0xE3BA000000000000;
  v6(v2, v5, v4);
  unint64_t v7 = (*(unsigned __int8 *)(v3 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  uint64_t v8 = swift_allocObject();
  *(void *)(v0 + 232) = v8;
  *(void *)(v8 + 16) = v1;
  uint64_t v9 = *(void (**)(unint64_t, uint64_t, uint64_t))(v3 + 32);
  *(void *)(v0 + 240) = v9;
  *(void *)(v0 + 248) = (v3 + 32) & 0xFFFFFFFFFFFFLL | 0x48D8000000000000;
  v9(v8 + v7, v2, v4);
  swift_retain();
  return _swift_task_switch(sub_100B90C14, 0, 0);
}

uint64_t sub_100B90C14()
{
  uint64_t v1 = v0[29];
  uint64_t v2 = v0[26];
  uint64_t v3 = (void *)swift_task_alloc();
  v0[32] = v3;
  v3[2] = v2;
  v3[3] = sub_100B954B0;
  v3[4] = v1;
  uint64_t v4 = (void *)swift_task_alloc();
  v0[33] = v4;
  *uint64_t v4 = v0;
  v4[1] = sub_100B90D1C;
  uint64_t v6 = v0[23];
  uint64_t v5 = v0[24];
  return withCheckedContinuation<A>(isolation:function:_:)(v5, 0, 0, 0xD000000000000012, 0x80000001013F1870, sub_100B961EC, v3, v6);
}

uint64_t sub_100B90D1C()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 72);
  swift_task_dealloc();
  swift_release();
  swift_task_dealloc();
  return _swift_task_switch(sub_100B90E6C, v1, 0);
}

uint64_t sub_100B90E6C()
{
  uint64_t v63 = v0;
  uint64_t v1 = *(void *)(v0 + 192);
  uint64_t v2 = type metadata accessor for BeaconNamingRecord();
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v2 - 8) + 48))(v1, 1, v2) == 1)
  {
    sub_10001DAB4(v1, &qword_10163B9E0);
    if (qword_101636FA0 != -1) {
      swift_once();
    }
    uint64_t v3 = *(void *)(v0 + 88);
    uint64_t v4 = *(void *)(v0 + 64);
    uint64_t v5 = type metadata accessor for Logger();
    sub_100010324(v5, (uint64_t)qword_10170EA60);
    sub_100B95ED4(v4, v3, (uint64_t (*)(void))type metadata accessor for OwnerSharingCircle);
    uint64_t v6 = Logger.logObject.getter();
    os_log_type_t v7 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v6, v7))
    {
      uint64_t v8 = *(void *)(v0 + 88);
      uint64_t v9 = swift_slowAlloc();
      v62[0] = swift_slowAlloc();
      *(_DWORD *)uint64_t v9 = 141558275;
      *(void *)(v0 + 16) = 1752392040;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v9 + 12) = 2081;
      sub_100B95984((unint64_t *)&qword_101638B10, 255, (void (*)(uint64_t))&type metadata accessor for UUID);
      uint64_t v10 = dispatch thunk of CustomStringConvertible.description.getter();
      *(void *)(v0 + 24) = sub_1008FA0F0(v10, v11, v62);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      sub_100B95DC0(v8, (uint64_t (*)(void))type metadata accessor for OwnerSharingCircle);
      _os_log_impl((void *)&_mh_execute_header, v6, v7, "Error posting notification for expired delegation - invalid beacon name %{private,mask.hash}s", (uint8_t *)v9, 0x16u);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      sub_100B95DC0(*(void *)(v0 + 88), (uint64_t (*)(void))type metadata accessor for OwnerSharingCircle);
    }

LABEL_17:
    sub_100B954CC();
    swift_allocError();
    *uint64_t v38 = 0;
    swift_willThrow();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v39 = *(uint64_t (**)(void))(v0 + 8);
    goto LABEL_18;
  }
  uint64_t v12 = *(void *)(v0 + 64);
  uint64_t v13 = *(void *)(v0 + 128);
  uint64_t v14 = (uint64_t *)(v1 + *(int *)(v2 + 32));
  uint64_t v15 = v14[1];
  uint64_t v61 = *v14;
  swift_bridgeObjectRetain();
  sub_100B95DC0(v1, (uint64_t (*)(void))type metadata accessor for BeaconNamingRecord);
  uint64_t v16 = swift_bridgeObjectRetain();
  uint64_t v17 = sub_10070FB1C(v16);
  swift_bridgeObjectRelease();
  uint64_t v18 = swift_task_alloc();
  *(void *)(v18 + 16) = v12;
  uint64_t v19 = sub_1000D137C((uint64_t)_swiftEmptyDictionarySingleton, (void (*)(uint64_t *, char *))sub_100B961F0, v18, v17);
  swift_release();
  swift_task_dealloc();
  sub_10115B3C4(v19, v13);
  swift_bridgeObjectRelease();
  uint64_t v20 = sub_10000588C(&qword_101661010);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v20 - 8) + 48))(v13, 1, v20) == 1)
  {
    uint64_t v21 = *(void *)(v0 + 144);
    uint64_t v22 = *(void *)(v0 + 152);
    uint64_t v23 = *(void *)(v0 + 136);
    sub_10001DAB4(*(void *)(v0 + 128), &qword_10163B8A0);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v22 + 56))(v23, 1, 1, v21);
LABEL_11:
    uint64_t v28 = *(void *)(v0 + 136);
    swift_bridgeObjectRelease();
    sub_10001DAB4(v28, &qword_101638CF0);
    if (qword_101636FA0 != -1) {
      swift_once();
    }
    uint64_t v29 = *(void *)(v0 + 96);
    uint64_t v30 = *(void *)(v0 + 64);
    uint64_t v31 = type metadata accessor for Logger();
    sub_100010324(v31, (uint64_t)qword_10170EA60);
    sub_100B95ED4(v30, v29, (uint64_t (*)(void))type metadata accessor for OwnerSharingCircle);
    uint64_t v32 = Logger.logObject.getter();
    os_log_type_t v33 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v32, v33))
    {
      uint64_t v34 = *(void *)(v0 + 96);
      uint64_t v35 = swift_slowAlloc();
      v62[0] = swift_slowAlloc();
      *(_DWORD *)uint64_t v35 = 141558275;
      *(void *)(v0 + 32) = 1752392040;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v35 + 12) = 2081;
      sub_100B95984((unint64_t *)&qword_101638B10, 255, (void (*)(uint64_t))&type metadata accessor for UUID);
      uint64_t v36 = dispatch thunk of CustomStringConvertible.description.getter();
      *(void *)(v0 + 40) = sub_1008FA0F0(v36, v37, v62);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      sub_100B95DC0(v34, (uint64_t (*)(void))type metadata accessor for OwnerSharingCircle);
      _os_log_impl((void *)&_mh_execute_header, v32, v33, "Error posting notification for expired delegation - invalid client share identifier %{private,mask.hash}s", (uint8_t *)v35, 0x16u);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      sub_100B95DC0(*(void *)(v0 + 96), (uint64_t (*)(void))type metadata accessor for OwnerSharingCircle);
    }

    goto LABEL_17;
  }
  uint64_t v24 = *(void *)(v0 + 144);
  uint64_t v25 = *(void *)(v0 + 152);
  uint64_t v26 = *(void *)(v0 + 136);
  uint64_t v27 = *(void *)(v0 + 128) + *(int *)(v20 + 48);
  (*(void (**)(uint64_t))(v0 + 240))(v26);
  (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v25 + 56))(v26, 0, 1, v24);
  uint64_t v60 = *(void (**)(uint64_t, uint64_t))(v25 + 8);
  v60(v27, v24);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v25 + 48))(v26, 1, v24) == 1) {
    goto LABEL_11;
  }
  uint64_t v41 = *(void (**)(uint64_t, uint64_t, uint64_t))(v0 + 216);
  uint64_t v42 = *(void *)(v0 + 168);
  uint64_t v43 = *(void *)(v0 + 144);
  uint64_t v44 = *(void *)(v0 + 64) + *(int *)(v0 + 272);
  uint64_t v46 = *(void *)(v0 + 112);
  uint64_t v45 = *(void *)(v0 + 120);
  (*(void (**)(uint64_t, void, uint64_t))(v0 + 240))(v42, *(void *)(v0 + 136), v43);
  v41(v45, v42, v43);
  v41(v45 + *(int *)(v46 + 20), v44, v43);
  int v47 = (void *)(v45 + *(int *)(v46 + 24));
  *int v47 = v61;
  v47[1] = v15;
  if (qword_101636FA0 != -1) {
    swift_once();
  }
  uint64_t v48 = *(void *)(v0 + 104);
  uint64_t v49 = *(void *)(v0 + 64);
  uint64_t v50 = type metadata accessor for Logger();
  sub_100010324(v50, (uint64_t)qword_10170EA60);
  sub_100B95ED4(v49, v48, (uint64_t (*)(void))type metadata accessor for OwnerSharingCircle);
  uint64_t v51 = Logger.logObject.getter();
  os_log_type_t v52 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v51, v52))
  {
    uint64_t v53 = *(void *)(v0 + 104);
    uint64_t v54 = swift_slowAlloc();
    v62[0] = swift_slowAlloc();
    *(_DWORD *)uint64_t v54 = 141558275;
    *(void *)(v0 + 48) = 1752392040;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v54 + 12) = 2081;
    sub_100B95984((unint64_t *)&qword_101638B10, 255, (void (*)(uint64_t))&type metadata accessor for UUID);
    uint64_t v55 = dispatch thunk of CustomStringConvertible.description.getter();
    *(void *)(v0 + 56) = sub_1008FA0F0(v55, v56, v62);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    sub_100B95DC0(v53, (uint64_t (*)(void))type metadata accessor for OwnerSharingCircle);
    _os_log_impl((void *)&_mh_execute_header, v51, v52, "Post transparency notification for expired Delegation %{private,mask.hash}s", (uint8_t *)v54, 0x16u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    sub_100B95DC0(*(void *)(v0 + 104), (uint64_t (*)(void))type metadata accessor for OwnerSharingCircle);
  }

  uint64_t v57 = *(void *)(v0 + 168);
  uint64_t v58 = *(void *)(v0 + 144);
  uint64_t v59 = *(void *)(v0 + 120);
  swift_unownedRetainStrong();
  sub_101096BC0(v59, 0, 0);
  swift_release();
  sub_100B95DC0(v59, type metadata accessor for DelegatedShareExpirationUserNotification);
  v60(v57, v58);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v39 = *(uint64_t (**)(void))(v0 + 8);
LABEL_18:
  return v39();
}

uint64_t sub_100B91950(uint64_t a1)
{
  v2[8] = a1;
  v2[9] = v1;
  v2[10] = type metadata accessor for OwnerSharingCircle();
  v2[11] = swift_task_alloc();
  v2[12] = swift_task_alloc();
  v2[13] = swift_task_alloc();
  v2[14] = type metadata accessor for DelegatedShareOwnerReunitedUserNotification(0);
  v2[15] = swift_task_alloc();
  sub_10000588C(&qword_10163B8A0);
  v2[16] = swift_task_alloc();
  sub_10000588C(&qword_101638CF0);
  v2[17] = swift_task_alloc();
  uint64_t v3 = type metadata accessor for UUID();
  v2[18] = v3;
  uint64_t v4 = *(void *)(v3 - 8);
  v2[19] = v4;
  v2[20] = *(void *)(v4 + 64);
  v2[21] = swift_task_alloc();
  v2[22] = swift_task_alloc();
  v2[23] = sub_10000588C(&qword_10163B9E0);
  v2[24] = swift_task_alloc();
  return _swift_task_switch(sub_100B91B38, v1, 0);
}

uint64_t sub_100B91B38()
{
  uint64_t v1 = *(void *)(v0 + 80);
  uint64_t v2 = *(void *)(*(void *)(v0 + 72) + 136);
  *(void *)(v0 + 200) = v2;
  *(_DWORD *)(v0 + 272) = *(_DWORD *)(v1 + 24);
  return _swift_task_switch(sub_100B91B64, v2, 0);
}

uint64_t sub_100B91B64()
{
  uint64_t v1 = *(void *)(v0 + 200);
  uint64_t v2 = *(void *)(v0 + 176);
  uint64_t v3 = *(void *)(v0 + 152);
  uint64_t v4 = *(void *)(v0 + 144);
  uint64_t v5 = *(void *)(v0 + 64) + *(int *)(v0 + 272);
  *(void *)(v0 + 208) = *(void *)(v1 + 136);
  uint64_t v6 = *(void (**)(uint64_t, uint64_t, uint64_t))(v3 + 16);
  *(void *)(v0 + 216) = v6;
  *(void *)(v0 + 224) = (v3 + 16) & 0xFFFFFFFFFFFFLL | 0xE3BA000000000000;
  v6(v2, v5, v4);
  unint64_t v7 = (*(unsigned __int8 *)(v3 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  uint64_t v8 = swift_allocObject();
  *(void *)(v0 + 232) = v8;
  *(void *)(v8 + 16) = v1;
  uint64_t v9 = *(void (**)(unint64_t, uint64_t, uint64_t))(v3 + 32);
  *(void *)(v0 + 240) = v9;
  *(void *)(v0 + 248) = (v3 + 32) & 0xFFFFFFFFFFFFLL | 0x48D8000000000000;
  v9(v8 + v7, v2, v4);
  swift_retain();
  return _swift_task_switch(sub_100B91C7C, 0, 0);
}

uint64_t sub_100B91C7C()
{
  uint64_t v1 = v0[29];
  uint64_t v2 = v0[26];
  uint64_t v3 = (void *)swift_task_alloc();
  v0[32] = v3;
  v3[2] = v2;
  v3[3] = sub_100B954B0;
  v3[4] = v1;
  uint64_t v4 = (void *)swift_task_alloc();
  v0[33] = v4;
  *uint64_t v4 = v0;
  v4[1] = sub_100B91D84;
  uint64_t v6 = v0[23];
  uint64_t v5 = v0[24];
  return withCheckedContinuation<A>(isolation:function:_:)(v5, 0, 0, 0xD000000000000012, 0x80000001013F1870, sub_100B961EC, v3, v6);
}

uint64_t sub_100B91D84()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 72);
  swift_task_dealloc();
  swift_release();
  swift_task_dealloc();
  return _swift_task_switch(sub_100B91ED4, v1, 0);
}

uint64_t sub_100B91ED4()
{
  uint64_t v63 = v0;
  uint64_t v1 = *(void *)(v0 + 192);
  uint64_t v2 = type metadata accessor for BeaconNamingRecord();
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v2 - 8) + 48))(v1, 1, v2) == 1)
  {
    sub_10001DAB4(v1, &qword_10163B9E0);
    if (qword_101636FA0 != -1) {
      swift_once();
    }
    uint64_t v3 = *(void *)(v0 + 88);
    uint64_t v4 = *(void *)(v0 + 64);
    uint64_t v5 = type metadata accessor for Logger();
    sub_100010324(v5, (uint64_t)qword_10170EA60);
    sub_100B95ED4(v4, v3, (uint64_t (*)(void))type metadata accessor for OwnerSharingCircle);
    uint64_t v6 = Logger.logObject.getter();
    os_log_type_t v7 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v6, v7))
    {
      uint64_t v8 = *(void *)(v0 + 88);
      uint64_t v9 = swift_slowAlloc();
      v62[0] = swift_slowAlloc();
      *(_DWORD *)uint64_t v9 = 141558275;
      *(void *)(v0 + 16) = 1752392040;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v9 + 12) = 2081;
      sub_100B95984((unint64_t *)&qword_101638B10, 255, (void (*)(uint64_t))&type metadata accessor for UUID);
      uint64_t v10 = dispatch thunk of CustomStringConvertible.description.getter();
      *(void *)(v0 + 24) = sub_1008FA0F0(v10, v11, v62);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      sub_100B95DC0(v8, (uint64_t (*)(void))type metadata accessor for OwnerSharingCircle);
      _os_log_impl((void *)&_mh_execute_header, v6, v7, "Error posting notification for reunited delegation - invalid beacon name %{private,mask.hash}s", (uint8_t *)v9, 0x16u);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      sub_100B95DC0(*(void *)(v0 + 88), (uint64_t (*)(void))type metadata accessor for OwnerSharingCircle);
    }

LABEL_17:
    sub_100B954CC();
    swift_allocError();
    *uint64_t v38 = 0;
    swift_willThrow();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v39 = *(uint64_t (**)(void))(v0 + 8);
    goto LABEL_18;
  }
  uint64_t v12 = *(void *)(v0 + 64);
  uint64_t v13 = *(void *)(v0 + 128);
  uint64_t v14 = (uint64_t *)(v1 + *(int *)(v2 + 32));
  uint64_t v15 = v14[1];
  uint64_t v61 = *v14;
  swift_bridgeObjectRetain();
  sub_100B95DC0(v1, (uint64_t (*)(void))type metadata accessor for BeaconNamingRecord);
  uint64_t v16 = swift_bridgeObjectRetain();
  uint64_t v17 = sub_10070FB1C(v16);
  swift_bridgeObjectRelease();
  uint64_t v18 = swift_task_alloc();
  *(void *)(v18 + 16) = v12;
  uint64_t v19 = sub_1000D137C((uint64_t)_swiftEmptyDictionarySingleton, (void (*)(uint64_t *, char *))sub_100B961F0, v18, v17);
  swift_release();
  swift_task_dealloc();
  sub_10115B3C4(v19, v13);
  swift_bridgeObjectRelease();
  uint64_t v20 = sub_10000588C(&qword_101661010);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v20 - 8) + 48))(v13, 1, v20) == 1)
  {
    uint64_t v21 = *(void *)(v0 + 144);
    uint64_t v22 = *(void *)(v0 + 152);
    uint64_t v23 = *(void *)(v0 + 136);
    sub_10001DAB4(*(void *)(v0 + 128), &qword_10163B8A0);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v22 + 56))(v23, 1, 1, v21);
LABEL_11:
    uint64_t v28 = *(void *)(v0 + 136);
    swift_bridgeObjectRelease();
    sub_10001DAB4(v28, &qword_101638CF0);
    if (qword_101636FA0 != -1) {
      swift_once();
    }
    uint64_t v29 = *(void *)(v0 + 96);
    uint64_t v30 = *(void *)(v0 + 64);
    uint64_t v31 = type metadata accessor for Logger();
    sub_100010324(v31, (uint64_t)qword_10170EA60);
    sub_100B95ED4(v30, v29, (uint64_t (*)(void))type metadata accessor for OwnerSharingCircle);
    uint64_t v32 = Logger.logObject.getter();
    os_log_type_t v33 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v32, v33))
    {
      uint64_t v34 = *(void *)(v0 + 96);
      uint64_t v35 = swift_slowAlloc();
      v62[0] = swift_slowAlloc();
      *(_DWORD *)uint64_t v35 = 141558275;
      *(void *)(v0 + 32) = 1752392040;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v35 + 12) = 2081;
      sub_100B95984((unint64_t *)&qword_101638B10, 255, (void (*)(uint64_t))&type metadata accessor for UUID);
      uint64_t v36 = dispatch thunk of CustomStringConvertible.description.getter();
      *(void *)(v0 + 40) = sub_1008FA0F0(v36, v37, v62);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      sub_100B95DC0(v34, (uint64_t (*)(void))type metadata accessor for OwnerSharingCircle);
      _os_log_impl((void *)&_mh_execute_header, v32, v33, "Error posting notification for reunited delegation - invalid client share identifier %{private,mask.hash}s", (uint8_t *)v35, 0x16u);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      sub_100B95DC0(*(void *)(v0 + 96), (uint64_t (*)(void))type metadata accessor for OwnerSharingCircle);
    }

    goto LABEL_17;
  }
  uint64_t v24 = *(void *)(v0 + 144);
  uint64_t v25 = *(void *)(v0 + 152);
  uint64_t v26 = *(void *)(v0 + 136);
  uint64_t v27 = *(void *)(v0 + 128) + *(int *)(v20 + 48);
  (*(void (**)(uint64_t))(v0 + 240))(v26);
  (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v25 + 56))(v26, 0, 1, v24);
  uint64_t v60 = *(void (**)(uint64_t, uint64_t))(v25 + 8);
  v60(v27, v24);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v25 + 48))(v26, 1, v24) == 1) {
    goto LABEL_11;
  }
  uint64_t v41 = *(void (**)(uint64_t, uint64_t, uint64_t))(v0 + 216);
  uint64_t v42 = *(void *)(v0 + 168);
  uint64_t v43 = *(void *)(v0 + 144);
  uint64_t v44 = *(void *)(v0 + 64) + *(int *)(v0 + 272);
  uint64_t v46 = *(void *)(v0 + 112);
  uint64_t v45 = *(void *)(v0 + 120);
  (*(void (**)(uint64_t, void, uint64_t))(v0 + 240))(v42, *(void *)(v0 + 136), v43);
  v41(v45, v42, v43);
  v41(v45 + *(int *)(v46 + 20), v44, v43);
  int v47 = (void *)(v45 + *(int *)(v46 + 24));
  *int v47 = v61;
  v47[1] = v15;
  if (qword_101636FA0 != -1) {
    swift_once();
  }
  uint64_t v48 = *(void *)(v0 + 104);
  uint64_t v49 = *(void *)(v0 + 64);
  uint64_t v50 = type metadata accessor for Logger();
  sub_100010324(v50, (uint64_t)qword_10170EA60);
  sub_100B95ED4(v49, v48, (uint64_t (*)(void))type metadata accessor for OwnerSharingCircle);
  uint64_t v51 = Logger.logObject.getter();
  os_log_type_t v52 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v51, v52))
  {
    uint64_t v53 = *(void *)(v0 + 104);
    uint64_t v54 = swift_slowAlloc();
    v62[0] = swift_slowAlloc();
    *(_DWORD *)uint64_t v54 = 141558275;
    *(void *)(v0 + 48) = 1752392040;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v54 + 12) = 2081;
    sub_100B95984((unint64_t *)&qword_101638B10, 255, (void (*)(uint64_t))&type metadata accessor for UUID);
    uint64_t v55 = dispatch thunk of CustomStringConvertible.description.getter();
    *(void *)(v0 + 56) = sub_1008FA0F0(v55, v56, v62);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    sub_100B95DC0(v53, (uint64_t (*)(void))type metadata accessor for OwnerSharingCircle);
    _os_log_impl((void *)&_mh_execute_header, v51, v52, "Post transparency notification for reunited Delegation %{private,mask.hash}s", (uint8_t *)v54, 0x16u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    sub_100B95DC0(*(void *)(v0 + 104), (uint64_t (*)(void))type metadata accessor for OwnerSharingCircle);
  }

  uint64_t v57 = *(void *)(v0 + 168);
  uint64_t v58 = *(void *)(v0 + 144);
  uint64_t v59 = *(void *)(v0 + 120);
  swift_unownedRetainStrong();
  sub_10109577C(v59, 0, 0);
  swift_release();
  sub_100B95DC0(v59, type metadata accessor for DelegatedShareOwnerReunitedUserNotification);
  v60(v57, v58);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v39 = *(uint64_t (**)(void))(v0 + 8);
LABEL_18:
  return v39();
}

uint64_t sub_100B929B8(uint64_t a1)
{
  v2[2] = a1;
  v2[3] = v1;
  v2[4] = type metadata accessor for DelegatedShareShareeReunitedShareeUserNotification(0);
  v2[5] = swift_task_alloc();
  sub_10000588C(&qword_10163B8A0);
  v2[6] = swift_task_alloc();
  sub_10000588C(&qword_101638CF0);
  v2[7] = swift_task_alloc();
  uint64_t v3 = type metadata accessor for UUID();
  v2[8] = v3;
  uint64_t v4 = *(void *)(v3 - 8);
  v2[9] = v4;
  v2[10] = *(void *)(v4 + 64);
  v2[11] = swift_task_alloc();
  v2[12] = swift_task_alloc();
  v2[13] = sub_10000588C(&qword_10163B9E0);
  v2[14] = swift_task_alloc();
  return _swift_task_switch(sub_100B92B54, v1, 0);
}

uint64_t sub_100B92B54()
{
  uint64_t v1 = *(void *)(*(void *)(v0 + 24) + 136);
  *(void *)(v0 + 120) = v1;
  uint64_t v2 = type metadata accessor for OwnerSharingCircle();
  *(void *)(v0 + 128) = v2;
  *(_DWORD *)(v0 + 200) = *(_DWORD *)(v2 + 24);
  return _swift_task_switch(sub_100B92BD4, v1, 0);
}

uint64_t sub_100B92BD4()
{
  uint64_t v1 = *(void *)(v0 + 120);
  uint64_t v2 = *(void *)(v0 + 96);
  uint64_t v3 = *(void *)(v0 + 72);
  uint64_t v4 = *(void *)(v0 + 64);
  uint64_t v5 = *(void *)(v0 + 16) + *(int *)(v0 + 200);
  *(void *)(v0 + 136) = *(void *)(v1 + 136);
  uint64_t v6 = *(void (**)(uint64_t, uint64_t, uint64_t))(v3 + 16);
  *(void *)(v0 + 144) = v6;
  *(void *)(v0 + 152) = (v3 + 16) & 0xFFFFFFFFFFFFLL | 0xE3BA000000000000;
  v6(v2, v5, v4);
  unint64_t v7 = (*(unsigned __int8 *)(v3 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  uint64_t v8 = swift_allocObject();
  *(void *)(v0 + 160) = v8;
  *(void *)(v8 + 16) = v1;
  uint64_t v9 = *(void (**)(unint64_t, uint64_t, uint64_t))(v3 + 32);
  *(void *)(v0 + 168) = v9;
  *(void *)(v0 + 176) = (v3 + 32) & 0xFFFFFFFFFFFFLL | 0x48D8000000000000;
  v9(v8 + v7, v2, v4);
  swift_retain();
  return _swift_task_switch(sub_100B92CEC, 0, 0);
}

uint64_t sub_100B92CEC()
{
  uint64_t v1 = v0[20];
  uint64_t v2 = v0[17];
  uint64_t v3 = (void *)swift_task_alloc();
  v0[23] = v3;
  v3[2] = v2;
  v3[3] = sub_100B954B0;
  v3[4] = v1;
  uint64_t v4 = (void *)swift_task_alloc();
  v0[24] = v4;
  *uint64_t v4 = v0;
  v4[1] = sub_100B92DF4;
  uint64_t v6 = v0[13];
  uint64_t v5 = v0[14];
  return withCheckedContinuation<A>(isolation:function:_:)(v5, 0, 0, 0xD000000000000012, 0x80000001013F1870, sub_100B961EC, v3, v6);
}

uint64_t sub_100B92DF4()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 24);
  swift_task_dealloc();
  swift_release();
  swift_task_dealloc();
  return _swift_task_switch(sub_100B92F44, v1, 0);
}

uint64_t sub_100B92F44()
{
  uint64_t v1 = *(void *)(v0 + 112);
  uint64_t v2 = type metadata accessor for BeaconNamingRecord();
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v2 - 8) + 48))(v1, 1, v2) == 1)
  {
    sub_10001DAB4(v1, &qword_10163B9E0);
    if (qword_101636FA0 != -1) {
      swift_once();
    }
    uint64_t v3 = type metadata accessor for Logger();
    sub_100010324(v3, (uint64_t)qword_10170EA60);
    uint64_t v4 = Logger.logObject.getter();
    os_log_type_t v5 = static os_log_type_t.default.getter();
    if (!os_log_type_enabled(v4, v5)) {
      goto LABEL_14;
    }
    uint64_t v6 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v6 = 0;
    unint64_t v7 = "Error while creating transparency notification on owner for delegation stop due to item reunited with sharee- i"
         "nvalid owner peer trust or beacon name";
LABEL_13:
    _os_log_impl((void *)&_mh_execute_header, v4, v5, v7, v6, 2u);
    swift_slowDealloc();
LABEL_14:

    sub_100B954CC();
    swift_allocError();
    *uint64_t v28 = 0;
    swift_willThrow();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v29 = *(uint64_t (**)(void))(v0 + 8);
    goto LABEL_15;
  }
  uint64_t v8 = *(void *)(v0 + 48);
  uint64_t v9 = *(void *)(v0 + 16);
  uint64_t v10 = (uint64_t *)(v1 + *(int *)(v2 + 32));
  uint64_t v12 = *v10;
  uint64_t v11 = v10[1];
  swift_bridgeObjectRetain();
  sub_100B95DC0(v1, (uint64_t (*)(void))type metadata accessor for BeaconNamingRecord);
  uint64_t v13 = swift_bridgeObjectRetain();
  uint64_t v14 = sub_10070FB1C(v13);
  swift_bridgeObjectRelease();
  uint64_t v15 = swift_task_alloc();
  *(void *)(v15 + 16) = v9;
  uint64_t v16 = sub_1000D137C((uint64_t)_swiftEmptyDictionarySingleton, (void (*)(uint64_t *, char *))sub_100B961F0, v15, v14);
  swift_release();
  swift_task_dealloc();
  sub_10115B3C4(v16, v8);
  swift_bridgeObjectRelease();
  uint64_t v17 = sub_10000588C(&qword_101661010);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v17 - 8) + 48))(v8, 1, v17) == 1)
  {
    uint64_t v18 = *(void *)(v0 + 64);
    uint64_t v19 = *(void *)(v0 + 72);
    uint64_t v20 = *(void *)(v0 + 56);
    sub_10001DAB4(*(void *)(v0 + 48), &qword_10163B8A0);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v19 + 56))(v20, 1, 1, v18);
LABEL_9:
    uint64_t v26 = *(void *)(v0 + 56);
    swift_bridgeObjectRelease();
    sub_10001DAB4(v26, &qword_101638CF0);
    if (qword_101636FA0 != -1) {
      swift_once();
    }
    uint64_t v27 = type metadata accessor for Logger();
    sub_100010324(v27, (uint64_t)qword_10170EA60);
    uint64_t v4 = Logger.logObject.getter();
    os_log_type_t v5 = static os_log_type_t.default.getter();
    if (!os_log_type_enabled(v4, v5)) {
      goto LABEL_14;
    }
    uint64_t v6 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v6 = 0;
    unint64_t v7 = "Error while creating transparency notification on owner for delegation stop due to item reunited with sharee - "
         "invalid client share identifier";
    goto LABEL_13;
  }
  uint64_t v21 = *(void *)(v0 + 64);
  uint64_t v22 = *(void *)(v0 + 72);
  uint64_t v23 = *(void *)(v0 + 56);
  uint64_t v24 = *(void *)(v0 + 48) + *(int *)(v17 + 48);
  (*(void (**)(uint64_t))(v0 + 168))(v23);
  (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v22 + 56))(v23, 0, 1, v21);
  uint64_t v25 = *(void (**)(uint64_t, uint64_t))(v22 + 8);
  v25(v24, v21);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v22 + 48))(v23, 1, v21) == 1) {
    goto LABEL_9;
  }
  uint64_t v45 = v12;
  uint64_t v46 = v25;
  uint64_t v31 = *(void (**)(uint64_t, uint64_t, uint64_t))(v0 + 144);
  uint64_t v32 = *(void *)(v0 + 88);
  uint64_t v33 = *(void *)(v0 + 64);
  uint64_t v34 = *(void *)(v0 + 16) + *(int *)(v0 + 200);
  uint64_t v36 = *(void *)(v0 + 32);
  uint64_t v35 = *(void *)(v0 + 40);
  (*(void (**)(uint64_t, void, uint64_t))(v0 + 168))(v32, *(void *)(v0 + 56), v33);
  v31(v35, v32, v33);
  v31(v35 + *(int *)(v36 + 20), v34, v33);
  unint64_t v37 = (void *)(v35 + *(int *)(v36 + 24));
  *unint64_t v37 = v45;
  v37[1] = v11;
  if (qword_101636FA0 != -1) {
    swift_once();
  }
  uint64_t v38 = type metadata accessor for Logger();
  sub_100010324(v38, (uint64_t)qword_10170EA60);
  uint64_t v39 = Logger.logObject.getter();
  os_log_type_t v40 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v39, v40))
  {
    uint64_t v41 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v41 = 0;
    _os_log_impl((void *)&_mh_execute_header, v39, v40, "Post transparency notification on owner for delegation stop due to item reunited with sharee", v41, 2u);
    swift_slowDealloc();
  }
  uint64_t v42 = *(void *)(v0 + 88);
  uint64_t v43 = *(void *)(v0 + 64);
  uint64_t v44 = *(void *)(v0 + 40);

  swift_unownedRetainStrong();
  sub_10109619C(v44, 0, 0);
  swift_release();
  sub_100B95DC0(v44, type metadata accessor for DelegatedShareShareeReunitedShareeUserNotification);
  v46(v42, v43);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v29 = *(uint64_t (**)(void))(v0 + 8);
LABEL_15:
  return v29();
}

uint64_t sub_100B93574(uint64_t a1)
{
  v2[8] = a1;
  v2[9] = v1;
  v2[10] = type metadata accessor for OwnerSharingCircle();
  v2[11] = swift_task_alloc();
  v2[12] = swift_task_alloc();
  v2[13] = swift_task_alloc();
  v2[14] = type metadata accessor for DelegatedSharMaxViewsUserNotification(0);
  v2[15] = swift_task_alloc();
  sub_10000588C(&qword_10163B8A0);
  v2[16] = swift_task_alloc();
  sub_10000588C(&qword_101638CF0);
  v2[17] = swift_task_alloc();
  uint64_t v3 = type metadata accessor for UUID();
  v2[18] = v3;
  uint64_t v4 = *(void *)(v3 - 8);
  v2[19] = v4;
  v2[20] = *(void *)(v4 + 64);
  v2[21] = swift_task_alloc();
  v2[22] = swift_task_alloc();
  v2[23] = sub_10000588C(&qword_10163B9E0);
  v2[24] = swift_task_alloc();
  return _swift_task_switch(sub_100B9375C, v1, 0);
}

uint64_t sub_100B9375C()
{
  uint64_t v1 = *(void *)(v0 + 80);
  uint64_t v2 = *(void *)(*(void *)(v0 + 72) + 136);
  *(void *)(v0 + 200) = v2;
  *(_DWORD *)(v0 + 272) = *(_DWORD *)(v1 + 24);
  return _swift_task_switch(sub_100B93788, v2, 0);
}

uint64_t sub_100B93788()
{
  uint64_t v1 = *(void *)(v0 + 200);
  uint64_t v2 = *(void *)(v0 + 176);
  uint64_t v3 = *(void *)(v0 + 152);
  uint64_t v4 = *(void *)(v0 + 144);
  uint64_t v5 = *(void *)(v0 + 64) + *(int *)(v0 + 272);
  *(void *)(v0 + 208) = *(void *)(v1 + 136);
  uint64_t v6 = *(void (**)(uint64_t, uint64_t, uint64_t))(v3 + 16);
  *(void *)(v0 + 216) = v6;
  *(void *)(v0 + 224) = (v3 + 16) & 0xFFFFFFFFFFFFLL | 0xE3BA000000000000;
  v6(v2, v5, v4);
  unint64_t v7 = (*(unsigned __int8 *)(v3 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  uint64_t v8 = swift_allocObject();
  *(void *)(v0 + 232) = v8;
  *(void *)(v8 + 16) = v1;
  uint64_t v9 = *(void (**)(unint64_t, uint64_t, uint64_t))(v3 + 32);
  *(void *)(v0 + 240) = v9;
  *(void *)(v0 + 248) = (v3 + 32) & 0xFFFFFFFFFFFFLL | 0x48D8000000000000;
  v9(v8 + v7, v2, v4);
  swift_retain();
  return _swift_task_switch(sub_100B938A0, 0, 0);
}

uint64_t sub_100B938A0()
{
  uint64_t v1 = v0[29];
  uint64_t v2 = v0[26];
  uint64_t v3 = (void *)swift_task_alloc();
  v0[32] = v3;
  v3[2] = v2;
  v3[3] = sub_100B954B0;
  v3[4] = v1;
  uint64_t v4 = (void *)swift_task_alloc();
  v0[33] = v4;
  *uint64_t v4 = v0;
  v4[1] = sub_100B939A8;
  uint64_t v6 = v0[23];
  uint64_t v5 = v0[24];
  return withCheckedContinuation<A>(isolation:function:_:)(v5, 0, 0, 0xD000000000000012, 0x80000001013F1870, sub_100B961EC, v3, v6);
}

uint64_t sub_100B939A8()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 72);
  swift_task_dealloc();
  swift_release();
  swift_task_dealloc();
  return _swift_task_switch(sub_100B93AF8, v1, 0);
}

uint64_t sub_100B93AF8()
{
  uint64_t v63 = v0;
  uint64_t v1 = *(void *)(v0 + 192);
  uint64_t v2 = type metadata accessor for BeaconNamingRecord();
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v2 - 8) + 48))(v1, 1, v2) == 1)
  {
    sub_10001DAB4(v1, &qword_10163B9E0);
    if (qword_101636FA0 != -1) {
      swift_once();
    }
    uint64_t v3 = *(void *)(v0 + 88);
    uint64_t v4 = *(void *)(v0 + 64);
    uint64_t v5 = type metadata accessor for Logger();
    sub_100010324(v5, (uint64_t)qword_10170EA60);
    sub_100B95ED4(v4, v3, (uint64_t (*)(void))type metadata accessor for OwnerSharingCircle);
    uint64_t v6 = Logger.logObject.getter();
    os_log_type_t v7 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v6, v7))
    {
      uint64_t v8 = *(void *)(v0 + 88);
      uint64_t v9 = swift_slowAlloc();
      v62[0] = swift_slowAlloc();
      *(_DWORD *)uint64_t v9 = 141558275;
      *(void *)(v0 + 16) = 1752392040;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v9 + 12) = 2081;
      sub_100B95984((unint64_t *)&qword_101638B10, 255, (void (*)(uint64_t))&type metadata accessor for UUID);
      uint64_t v10 = dispatch thunk of CustomStringConvertible.description.getter();
      *(void *)(v0 + 24) = sub_1008FA0F0(v10, v11, v62);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      sub_100B95DC0(v8, (uint64_t (*)(void))type metadata accessor for OwnerSharingCircle);
      _os_log_impl((void *)&_mh_execute_header, v6, v7, "Error while creating transparency notification for expired delegation - invalid beacon name %{private,mask.hash}s.", (uint8_t *)v9, 0x16u);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      sub_100B95DC0(*(void *)(v0 + 88), (uint64_t (*)(void))type metadata accessor for OwnerSharingCircle);
    }

LABEL_17:
    sub_100B954CC();
    swift_allocError();
    *uint64_t v38 = 0;
    swift_willThrow();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v39 = *(uint64_t (**)(void))(v0 + 8);
    goto LABEL_18;
  }
  uint64_t v12 = *(void *)(v0 + 64);
  uint64_t v13 = *(void *)(v0 + 128);
  uint64_t v14 = (uint64_t *)(v1 + *(int *)(v2 + 32));
  uint64_t v15 = v14[1];
  uint64_t v61 = *v14;
  swift_bridgeObjectRetain();
  sub_100B95DC0(v1, (uint64_t (*)(void))type metadata accessor for BeaconNamingRecord);
  uint64_t v16 = swift_bridgeObjectRetain();
  uint64_t v17 = sub_10070FB1C(v16);
  swift_bridgeObjectRelease();
  uint64_t v18 = swift_task_alloc();
  *(void *)(v18 + 16) = v12;
  uint64_t v19 = sub_1000D137C((uint64_t)_swiftEmptyDictionarySingleton, (void (*)(uint64_t *, char *))sub_100B95520, v18, v17);
  swift_release();
  swift_task_dealloc();
  sub_10115B3C4(v19, v13);
  swift_bridgeObjectRelease();
  uint64_t v20 = sub_10000588C(&qword_101661010);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v20 - 8) + 48))(v13, 1, v20) == 1)
  {
    uint64_t v21 = *(void *)(v0 + 144);
    uint64_t v22 = *(void *)(v0 + 152);
    uint64_t v23 = *(void *)(v0 + 136);
    sub_10001DAB4(*(void *)(v0 + 128), &qword_10163B8A0);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v22 + 56))(v23, 1, 1, v21);
LABEL_11:
    uint64_t v28 = *(void *)(v0 + 136);
    swift_bridgeObjectRelease();
    sub_10001DAB4(v28, &qword_101638CF0);
    if (qword_101636FA0 != -1) {
      swift_once();
    }
    uint64_t v29 = *(void *)(v0 + 96);
    uint64_t v30 = *(void *)(v0 + 64);
    uint64_t v31 = type metadata accessor for Logger();
    sub_100010324(v31, (uint64_t)qword_10170EA60);
    sub_100B95ED4(v30, v29, (uint64_t (*)(void))type metadata accessor for OwnerSharingCircle);
    uint64_t v32 = Logger.logObject.getter();
    os_log_type_t v33 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v32, v33))
    {
      uint64_t v34 = *(void *)(v0 + 96);
      uint64_t v35 = swift_slowAlloc();
      v62[0] = swift_slowAlloc();
      *(_DWORD *)uint64_t v35 = 141558275;
      *(void *)(v0 + 32) = 1752392040;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v35 + 12) = 2081;
      sub_100B95984((unint64_t *)&qword_101638B10, 255, (void (*)(uint64_t))&type metadata accessor for UUID);
      uint64_t v36 = dispatch thunk of CustomStringConvertible.description.getter();
      *(void *)(v0 + 40) = sub_1008FA0F0(v36, v37, v62);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      sub_100B95DC0(v34, (uint64_t (*)(void))type metadata accessor for OwnerSharingCircle);
      _os_log_impl((void *)&_mh_execute_header, v32, v33, "Error while creating transparency notification for expired delegation - invalid client share identifier %{private,mask.hash}s.", (uint8_t *)v35, 0x16u);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      sub_100B95DC0(*(void *)(v0 + 96), (uint64_t (*)(void))type metadata accessor for OwnerSharingCircle);
    }

    goto LABEL_17;
  }
  uint64_t v24 = *(void *)(v0 + 144);
  uint64_t v25 = *(void *)(v0 + 152);
  uint64_t v26 = *(void *)(v0 + 136);
  uint64_t v27 = *(void *)(v0 + 128) + *(int *)(v20 + 48);
  (*(void (**)(uint64_t))(v0 + 240))(v26);
  (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v25 + 56))(v26, 0, 1, v24);
  uint64_t v60 = *(void (**)(uint64_t, uint64_t))(v25 + 8);
  v60(v27, v24);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v25 + 48))(v26, 1, v24) == 1) {
    goto LABEL_11;
  }
  uint64_t v41 = *(void (**)(uint64_t, uint64_t, uint64_t))(v0 + 216);
  uint64_t v42 = *(void *)(v0 + 168);
  uint64_t v43 = *(void *)(v0 + 144);
  uint64_t v44 = *(void *)(v0 + 64) + *(int *)(v0 + 272);
  uint64_t v46 = *(void *)(v0 + 112);
  uint64_t v45 = *(void *)(v0 + 120);
  (*(void (**)(uint64_t, void, uint64_t))(v0 + 240))(v42, *(void *)(v0 + 136), v43);
  v41(v45, v42, v43);
  v41(v45 + *(int *)(v46 + 20), v44, v43);
  uint64_t v47 = (void *)(v45 + *(int *)(v46 + 24));
  *uint64_t v47 = v61;
  v47[1] = v15;
  if (qword_101636FA0 != -1) {
    swift_once();
  }
  uint64_t v48 = *(void *)(v0 + 104);
  uint64_t v49 = *(void *)(v0 + 64);
  uint64_t v50 = type metadata accessor for Logger();
  sub_100010324(v50, (uint64_t)qword_10170EA60);
  sub_100B95ED4(v49, v48, (uint64_t (*)(void))type metadata accessor for OwnerSharingCircle);
  uint64_t v51 = Logger.logObject.getter();
  os_log_type_t v52 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v51, v52))
  {
    uint64_t v53 = *(void *)(v0 + 104);
    uint64_t v54 = swift_slowAlloc();
    v62[0] = swift_slowAlloc();
    *(_DWORD *)uint64_t v54 = 141558275;
    *(void *)(v0 + 48) = 1752392040;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v54 + 12) = 2081;
    sub_100B95984((unint64_t *)&qword_101638B10, 255, (void (*)(uint64_t))&type metadata accessor for UUID);
    uint64_t v55 = dispatch thunk of CustomStringConvertible.description.getter();
    *(void *)(v0 + 56) = sub_1008FA0F0(v55, v56, v62);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    sub_100B95DC0(v53, (uint64_t (*)(void))type metadata accessor for OwnerSharingCircle);
    _os_log_impl((void *)&_mh_execute_header, v51, v52, "Post transparency notification for expired Delegation %{private,mask.hash}s.", (uint8_t *)v54, 0x16u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    sub_100B95DC0(*(void *)(v0 + 104), (uint64_t (*)(void))type metadata accessor for OwnerSharingCircle);
  }

  uint64_t v57 = *(void *)(v0 + 168);
  uint64_t v58 = *(void *)(v0 + 144);
  uint64_t v59 = *(void *)(v0 + 120);
  swift_unownedRetainStrong();
  sub_1010975E8(v59, 0, 0);
  swift_release();
  sub_100B95DC0(v59, type metadata accessor for DelegatedSharMaxViewsUserNotification);
  v60(v57, v58);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v39 = *(uint64_t (**)(void))(v0 + 8);
LABEL_18:
  return v39();
}

uint64_t sub_100B945DC(uint64_t a1)
{
  v2[21] = a1;
  v2[22] = v1;
  uint64_t v3 = type metadata accessor for UUID();
  v2[23] = v3;
  uint64_t v4 = *(void *)(v3 - 8);
  v2[24] = v4;
  v2[25] = *(void *)(v4 + 64);
  v2[26] = swift_task_alloc();
  v2[27] = swift_task_alloc();
  v2[28] = sub_10000588C(&qword_10163B9E0);
  v2[29] = swift_task_alloc();
  uint64_t v5 = type metadata accessor for BeaconNamingRecord();
  v2[30] = v5;
  v2[31] = *(void *)(v5 - 8);
  v2[32] = swift_task_alloc();
  return _swift_task_switch(sub_100B94744, v1, 0);
}

uint64_t sub_100B94744()
{
  uint64_t v1 = *(void *)(*(void *)(v0 + 176) + 136);
  *(void *)(v0 + 264) = v1;
  return _swift_task_switch(sub_100B94768, v1, 0);
}

uint64_t sub_100B94768()
{
  uint64_t v1 = v0[33];
  uint64_t v2 = v0[27];
  uint64_t v3 = v0[24];
  uint64_t v4 = v0[23];
  uint64_t v5 = v0[21];
  v0[34] = *(void *)(v1 + 136);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v3 + 16))(v2, v5, v4);
  unint64_t v6 = (*(unsigned __int8 *)(v3 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  uint64_t v7 = swift_allocObject();
  v0[35] = v7;
  *(void *)(v7 + 16) = v1;
  (*(void (**)(unint64_t, uint64_t, uint64_t))(v3 + 32))(v7 + v6, v2, v4);
  swift_retain();
  return _swift_task_switch(sub_100B94860, 0, 0);
}

uint64_t sub_100B94860()
{
  uint64_t v2 = v0[34];
  uint64_t v1 = v0[35];
  uint64_t v3 = (void *)swift_task_alloc();
  v0[36] = v3;
  v3[2] = v2;
  v3[3] = sub_100B954B0;
  v3[4] = v1;
  uint64_t v4 = (void *)swift_task_alloc();
  v0[37] = v4;
  *uint64_t v4 = v0;
  v4[1] = sub_100B94964;
  uint64_t v6 = v0[28];
  uint64_t v5 = v0[29];
  return withCheckedContinuation<A>(isolation:function:_:)(v5, 0, 0, 0xD000000000000012, 0x80000001013F1870, sub_100090CE8, v3, v6);
}

uint64_t sub_100B94964()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 176);
  swift_task_dealloc();
  swift_release();
  swift_task_dealloc();
  return _swift_task_switch(sub_100B94AB4, v1, 0);
}

uint64_t sub_100B94AB4()
{
  uint64_t v1 = v0[30];
  uint64_t v2 = v0[29];
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v0[31] + 48))(v2, 1, v1) == 1)
  {
    uint64_t v3 = v0[33];
    sub_10001DAB4(v2, &qword_10163B9E0);
    return _swift_task_switch(sub_100B94C20, v3, 0);
  }
  else
  {
    uint64_t v4 = v0[32];
    sub_100B95FE8(v2, v4, (uint64_t (*)(void))type metadata accessor for BeaconNamingRecord);
    uint64_t v5 = (uint64_t *)(v4 + *(int *)(v1 + 32));
    uint64_t v7 = *v5;
    uint64_t v6 = v5[1];
    swift_bridgeObjectRetain();
    sub_100B95DC0(v4, (uint64_t (*)(void))type metadata accessor for BeaconNamingRecord);
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v8 = (uint64_t (*)(uint64_t, uint64_t))v0[1];
    return v8(v7, v6);
  }
}

uint64_t sub_100B94C20()
{
  *(void *)(v0 + 304) = *(void *)(*(void *)(v0 + 264) + 136);
  swift_retain();
  return _swift_task_switch(sub_100B94C94, 0, 0);
}

uint64_t sub_100B94C94()
{
  uint64_t v1 = v0[38];
  uint64_t v2 = v0[33];
  uint64_t v3 = (void *)swift_task_alloc();
  v0[39] = v3;
  v3[2] = v1;
  v3[3] = sub_10001DAA0;
  v3[4] = v2;
  uint64_t v4 = (void *)swift_task_alloc();
  v0[40] = v4;
  uint64_t v5 = type metadata accessor for BeaconKeyManager(0);
  *uint64_t v4 = v0;
  v4[1] = sub_100B94DAC;
  return withCheckedContinuation<A>(isolation:function:_:)(v0 + 20, 0, 0, 0xD000000000000012, 0x80000001013F1870, sub_10001DAA8, v3, v5);
}

uint64_t sub_100B94DAC()
{
  uint64_t v1 = *v0;
  uint64_t v2 = *(void *)(*v0 + 176);
  swift_task_dealloc();
  swift_release();
  swift_task_dealloc();
  *(void *)(v1 + 328) = *(void *)(v1 + 160);
  return _swift_task_switch(sub_100B94F1C, v2, 0);
}

uint64_t sub_100B94F1C()
{
  uid_t v0 = getuid();
  sub_100DC5FC0(v0);
  return _swift_task_switch(sub_100B94F8C, 0, 0);
}

uint64_t sub_100B94F8C()
{
  uint64_t v1 = (void *)swift_task_alloc();
  v0[42] = v1;
  *uint64_t v1 = v0;
  v1[1] = sub_100B95040;
  uint64_t v2 = v0[26];
  uint64_t v3 = v0[21];
  return sub_10064B6F4((uint64_t)(v0 + 11), v3, v2);
}

uint64_t sub_100B95040()
{
  uint64_t v2 = *(void **)v1;
  *(void *)(*(void *)v1 + 344) = v0;
  swift_task_dealloc();
  if (v0)
  {
    uint64_t v3 = sub_100B9525C;
    uint64_t v4 = 0;
  }
  else
  {
    uint64_t v5 = v2[26];
    uint64_t v6 = v2[23];
    uint64_t v7 = v2[24];
    uint64_t v8 = v2[22];
    (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v5, v6);
    swift_release();
    uint64_t v3 = sub_100B95184;
    uint64_t v4 = v8;
  }
  return _swift_task_switch(v3, v4, 0);
}

uint64_t sub_100B95184()
{
  sub_10001D608((uint64_t)(v0 + 11), (uint64_t)(v0 + 2), &qword_10163A110);
  uint64_t v1 = v0[3];
  if (v1)
  {
    uint64_t v2 = v0[2];
    swift_bridgeObjectRetain();
    sub_100090C20(v0 + 11);
  }
  else
  {
    uint64_t v2 = 0;
  }
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v3 = (uint64_t (*)(uint64_t, uint64_t))v0[1];
  return v3(v2, v1);
}

uint64_t sub_100B9525C()
{
  uint64_t v1 = v0[26];
  uint64_t v2 = v0[23];
  uint64_t v3 = v0[24];
  uint64_t v4 = v0[22];
  swift_release();
  swift_errorRelease();
  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v1, v2);
  return _swift_task_switch(sub_100B95304, v4, 0);
}

uint64_t sub_100B95304()
{
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void, void))(v0 + 8);
  return v1(0, 0);
}

uint64_t sub_100B95394()
{
  swift_bridgeObjectRelease();
  swift_unownedRelease();
  swift_release();
  sub_10001DAB4(v0 + 144, &qword_10165A1E8);
  swift_unknownObjectRelease();
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_defaultActor_destroy();
  return v0;
}

uint64_t sub_100B95404()
{
  sub_100B95394();

  return _swift_defaultActor_deallocate(v0);
}

uint64_t type metadata accessor for ItemSharingNotificationsService()
{
  return self;
}

uint64_t sub_100B95454(uint64_t a1, uint64_t a2)
{
  uint64_t result = sub_100B95984(&qword_10165A120, a2, (void (*)(uint64_t))type metadata accessor for ItemSharingNotificationsService);
  *(void *)(a1 + 8) = result;
  return result;
}

uint64_t sub_100B954B0()
{
  return sub_100B95F40(sub_100E5F4E8);
}

unint64_t sub_100B954CC()
{
  unint64_t result = qword_10165A130;
  if (!qword_10165A130)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10165A130);
  }
  return result;
}

uint64_t sub_100B95520(uint64_t a1, char *a2)
{
  return sub_1001299F8(a1, a2, *(void *)(v2 + 16));
}

uint64_t sub_100B9553C(uint64_t (*a1)(unint64_t), uint64_t a2, uint64_t *a3, uint64_t (*a4)(uint64_t))
{
  uint64_t v7 = v4;
  uint64_t v43 = a1;
  uint64_t v41 = a3;
  uint64_t v8 = sub_10000588C(a3) - 8;
  uint64_t v9 = __chkstk_darwin(v8);
  uint64_t v39 = (uint64_t)&v35 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = __chkstk_darwin(v9);
  uint64_t v38 = (uint64_t)&v35 - v12;
  __chkstk_darwin(v11);
  uint64_t v40 = (uint64_t)&v35 - v14;
  uint64_t v15 = *v4;
  uint64_t v16 = *(void *)(*v4 + 16);
  if (!v16) {
    return 0;
  }
  uint64_t v36 = a4;
  unint64_t v17 = (*(unsigned __int8 *)(v13 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v13 + 80);
  uint64_t v18 = *(void *)(v13 + 72);
  swift_bridgeObjectRetain();
  unint64_t v19 = 0;
  unint64_t v37 = v17;
  while (1)
  {
    char v20 = v43(v15 + v17);
    if (v5)
    {
      swift_bridgeObjectRelease();
      return v19;
    }
    if (v20) {
      break;
    }
    ++v19;
    v17 += v18;
    if (v16 == v19)
    {
      swift_bridgeObjectRelease();
      return *(void *)(v15 + 16);
    }
  }
  uint64_t result = swift_bridgeObjectRelease();
  if (!__OFADD__(v19, 1))
  {
    unint64_t v22 = *(void *)(v15 + 16);
    if (v19 + 1 == v22) {
      return v19;
    }
    uint64_t v23 = v18 + v17;
    unint64_t v24 = v19 + 1;
    uint64_t v35 = v4;
    while (v24 < v22)
    {
      uint64_t v25 = v18;
      uint64_t v26 = v7;
      uint64_t v42 = v23;
      uint64_t v27 = v40;
      uint64_t v28 = v41;
      sub_10001D074(v15 + v23, v40, v41);
      char v29 = v43(v27);
      uint64_t result = sub_10001DAB4(v27, v28);
      if (v29)
      {
        uint64_t v7 = v26;
        uint64_t v18 = v25;
      }
      else
      {
        uint64_t v7 = v26;
        uint64_t v18 = v25;
        if (v24 != v19)
        {
          if ((v19 & 0x8000000000000000) != 0) {
            goto LABEL_32;
          }
          uint64_t v30 = *v26;
          unint64_t v31 = *(void *)(*v26 + 16);
          if (v19 >= v31) {
            goto LABEL_33;
          }
          uint64_t v32 = v41;
          uint64_t result = sub_10001D074(v30 + v37 + v19 * v25, v38, v41);
          if (v24 >= v31) {
            goto LABEL_34;
          }
          sub_10001D074(v30 + v42, v39, v32);
          uint64_t result = swift_isUniquelyReferenced_nonNull_native();
          uint64_t v7 = v35;
          *uint64_t v35 = v30;
          if ((result & 1) == 0)
          {
            uint64_t result = v36(v30);
            uint64_t v30 = result;
            *uint64_t v7 = result;
          }
          if (v19 >= *(void *)(v30 + 16)) {
            goto LABEL_35;
          }
          uint64_t result = sub_100062604(v39, v30 + v37 + v19 * v25, v32);
          if (v24 >= *(void *)(*v7 + 16)) {
            goto LABEL_36;
          }
          uint64_t result = sub_100062604(v38, *v7 + v42, v32);
        }
        if (__OFADD__(v19++, 1)) {
          goto LABEL_31;
        }
      }
      unint64_t v34 = v24 + 1;
      if (__OFADD__(v24, 1)) {
        goto LABEL_30;
      }
      uint64_t v15 = *v7;
      unint64_t v22 = *(void *)(*v7 + 16);
      ++v24;
      uint64_t v23 = v42 + v18;
      if (v34 == v22) {
        return v19;
      }
    }
    __break(1u);
LABEL_30:
    __break(1u);
LABEL_31:
    __break(1u);
LABEL_32:
    __break(1u);
LABEL_33:
    __break(1u);
LABEL_34:
    __break(1u);
LABEL_35:
    __break(1u);
LABEL_36:
    __break(1u);
  }
  __break(1u);
  return result;
}

uint64_t sub_100B958A4()
{
  return sub_100B95F40((uint64_t (*)(uint64_t, uint64_t))sub_100E5ABA8);
}

unint64_t sub_100B958BC()
{
  unint64_t result = qword_10165A138;
  if (!qword_10165A138)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10165A138);
  }
  return result;
}

unint64_t sub_100B95910()
{
  unint64_t result = qword_10165A140;
  if (!qword_10165A140)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10165A140);
  }
  return result;
}

uint64_t sub_100B95964(uint64_t a1)
{
  return sub_100B8F8D4(a1, *(void *)(v1 + 16)) & 1;
}

uint64_t sub_100B95984(unint64_t *a1, uint64_t a2, void (*a3)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a3(a2);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_100B959D0()
{
  return sub_100B95F40((uint64_t (*)(uint64_t, uint64_t))sub_100E5F4A8);
}

uint64_t sub_100B959EC()
{
  return sub_100B95F40((uint64_t (*)(uint64_t, uint64_t))sub_100E591C4);
}

uint64_t sub_100B95A04(uint64_t a1)
{
  uint64_t v4 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v4;
  *uint64_t v4 = v2;
  v4[1] = sub_100033F68;
  return sub_100B8A320(a1, v1);
}

uint64_t sub_100B95A9C(uint64_t a1)
{
  uint64_t v4 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v4;
  *uint64_t v4 = v2;
  v4[1] = sub_100033F68;
  return sub_100B8A814(a1, v1);
}

uint64_t sub_100B95B34(uint64_t a1)
{
  uint64_t v4 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v4;
  *uint64_t v4 = v2;
  v4[1] = sub_100033F68;
  return sub_100B8AD08(a1, v1);
}

uint64_t sub_100B95BDC()
{
  return sub_100B95F40((uint64_t (*)(uint64_t, uint64_t))sub_100E58EC8);
}

uint64_t sub_100B95BF4()
{
  type metadata accessor for OwnerPeerTrust();

  return static UUID.== infix(_:_:)();
}

void *sub_100B95C3C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v11 = type metadata accessor for UUID();
  __chkstk_darwin(v11 - 8);
  swift_defaultActor_initialize();
  v5[14] = 0xD00000000000001FLL;
  v5[15] = 0x8000000101377A80;
  type metadata accessor for WorkItemQueue();
  UUID.init()();
  v5[25] = WorkItemQueue.__allocating_init(name:identifier:)();
  v5[26] = _swiftEmptyArrayStorage;
  v5[27] = _swiftEmptyArrayStorage;
  v5[28] = _swiftEmptyArrayStorage;
  v5[16] = a1;
  v5[17] = a2;
  sub_10001D608(a3, (uint64_t)(v5 + 18), &qword_10165A1E8);
  v5[23] = a4;
  v5[24] = a5;
  swift_unownedRetain();
  return v5;
}

uint64_t sub_100B95D60()
{
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v0 + 16);
  if (*(void *)(v0 + 56)) {
    swift_release();
  }

  return _swift_deallocObject(v0, 72, 7);
}

uint64_t sub_100B95DA8(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_100B95DB8()
{
  return swift_release();
}

uint64_t sub_100B95DC0(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t sub_100B95E28(uint64_t a1, uint64_t a2)
{
  uint64_t v6 = (void *)swift_task_alloc();
  *(void *)(v3 + 16) = v6;
  *uint64_t v6 = v3;
  v6[1] = sub_10001D2E4;
  return sub_100B822C4(a1, a2, v2);
}

uint64_t sub_100B95ED4(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

uint64_t sub_100B95F40(uint64_t (*a1)(uint64_t, uint64_t))
{
  uint64_t v2 = *(void *)(type metadata accessor for UUID() - 8);
  uint64_t v3 = *(void *)(v1 + 16);
  uint64_t v4 = v1 + ((*(unsigned __int8 *)(v2 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80));

  return a1(v3, v4);
}

uint64_t sub_100B95FC8(uint64_t a1)
{
  return sub_100B806D8(a1, *(void *)(v1 + 16)) & 1;
}

uint64_t sub_100B95FE8(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 32))(a2, a1, v5);
  return a2;
}

uint64_t sub_100B96050(uint64_t a1)
{
  return sub_100B80388(a1, *(void *)(v1 + 16)) & 1;
}

uint64_t sub_100B96070(uint64_t a1)
{
  return sub_100B7F4E0(a1, *(void *)(v1 + 16)) & 1;
}

unsigned char *storeEnumTagSinglePayload for ItemSharingNotificationError(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFE)
  {
    unsigned int v6 = ((a2 - 255) >> 8) + 1;
    *uint64_t result = a2 + 1;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x100B9615CLL);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 1;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for ItemSharingNotificationError()
{
  return &type metadata for ItemSharingNotificationError;
}

unint64_t sub_100B96198()
{
  unint64_t result = qword_10165A1F0;
  if (!qword_10165A1F0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10165A1F0);
  }
  return result;
}

uint64_t sub_100B961F0(uint64_t a1, char *a2)
{
  return sub_100B95520(a1, a2);
}

uint64_t sub_100B96208@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = sub_10000588C(&qword_101641B60);
  __chkstk_darwin(v4 - 8);
  unsigned int v6 = (char *)&v23 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for URLComponents();
  uint64_t v8 = *(void *)(v7 - 8);
  __chkstk_darwin(v7);
  uint64_t v10 = (char *)&v23 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = type metadata accessor for OfflineLostModeInfoLookupEndpoint();
  uint64_t v12 = *(void *)(v11 - 8);
  __chkstk_darwin(v11);
  uint64_t v14 = (char *)&v23 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = URL.absoluteString.getter();
  uint64_t v17 = HIBYTE(v16) & 0xF;
  if ((v16 & 0x2000000000000000) == 0) {
    uint64_t v17 = v15 & 0xFFFFFFFFFFFFLL;
  }
  if (v17)
  {
    URLComponents.init(string:)();
    swift_bridgeObjectRelease();
    uint64_t v18 = type metadata accessor for URL();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v18 - 8) + 8))(a1, v18);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v8 + 48))(v6, 1, v7) != 1)
    {
      uint64_t v21 = *(void (**)(char *, char *, uint64_t))(v8 + 32);
      v21(v10, v6, v7);
      v21(v14, v10, v7);
      sub_100B96578((uint64_t)v14, a2);
      uint64_t v20 = 0;
      return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v12 + 56))(a2, v20, 1, v11);
    }
    sub_100B96518((uint64_t)v6);
  }
  else
  {
    uint64_t v19 = type metadata accessor for URL();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v19 - 8) + 8))(a1, v19);
    swift_bridgeObjectRelease();
  }
  uint64_t v20 = 1;
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v12 + 56))(a2, v20, 1, v11);
}

uint64_t type metadata accessor for OfflineLostModeInfoLookupEndpoint()
{
  uint64_t result = qword_10165A250;
  if (!qword_10165A250) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t sub_100B96518(uint64_t a1)
{
  uint64_t v2 = sub_10000588C(&qword_101641B60);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_100B96578(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for OfflineLostModeInfoLookupEndpoint();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_100B965DC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_100B965F0);
}

uint64_t sub_100B965F0(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for URLComponents();
  uint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 48);

  return v5(a1, a2, v4);
}

uint64_t sub_100B9665C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_100B96670);
}

uint64_t sub_100B96670(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for URLComponents();
  uint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 56);

  return v5(a1, a2, a2, v4);
}

uint64_t MessagingDestination.destination.getter(uint64_t a1, uint64_t a2)
{
  return a2;
}

searchpartyd::MessagingDestination __swiftcall MessagingDestination.init(email:)(Swift::String email)
{
  NSString v1 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  uint64_t v2 = (void *)IDSCopyIDForEmailAddress();

  if (v2)
  {
    uint64_t v6 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v8 = v7;

    searchpartyd::MessagingDestination::DestinationType v3 = searchpartyd_MessagingDestination_DestinationType_email;
    uint64_t v4 = v6;
    uint64_t v5 = v8;
  }
  else
  {
    __break(1u);
  }
  result.destination._object = v5;
  result.destination._countAndFlagsBits = v4;
  result.os_log_type_t type = v3;
  return result;
}

uint64_t static MessagingDestination.== infix(_:_:)(char a1, uint64_t a2, uint64_t a3, char a4, uint64_t a5, uint64_t a6)
{
  if (a1 != a4) {
    return 0;
  }
  if (a2 == a5 && a3 == a6) {
    return 1;
  }
  return _stringCompareWithSmolCheck(_:_:expecting:)();
}

uint64_t sub_100B967D0(uint64_t a1, uint64_t a2, void *a3)
{
  if (a1 != 2)
  {
    uint64_t v9 = a1;
    swift_bridgeObjectRetain();
    return v9;
  }
  NSString v5 = String._bridgeToObjectiveC()();
  id v6 = [v5 _stripPotentialTokenURIWithToken:0];

  if (v6)
  {
    static String._unconditionallyBridgeFromObjectiveC(_:)();

    _s12searchpartyd20MessagingDestinationV6stringACSgSS_tcfC_0();
    if (v8) {
      return v7;
    }
  }
  else
  {
    __break(1u);
  }
  _StringGuts.grow(_:)(39);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  v11._countAndFlagsBits = a2;
  v11._object = a3;
  String.append(_:)(v11);
  swift_bridgeObjectRelease();
  v12._countAndFlagsBits = 0xD000000000000013;
  v12._object = (void *)0x80000001014152F0;
  String.append(_:)(v12);
  uint64_t result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_100B96948(unsigned __int8 a1, uint64_t a2, void *a3)
{
  if (a1 - 2 < 4) {
    return 2;
  }
  if (!a1)
  {
    uint64_t v4 = (void *)sub_100ECF4F0(0, a2, a3);
    NSString v5 = [v4 destination];

    if (!v5)
    {
      static String._unconditionallyBridgeFromObjectiveC(_:)();
      NSString v5 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease();
    }
    uint64_t v6 = CMFItemCreateWithEmailAddress();

    if (v6) {
      goto LABEL_12;
    }
    __break(1u);
  }
  uint64_t v7 = (void *)sub_100ECF4F0(1, a2, a3);
  NSString v8 = [v7 destination];

  if (!v8)
  {
    static String._unconditionallyBridgeFromObjectiveC(_:)();
    NSString v8 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
  }
  uint64_t v9 = (void *)CFPhoneNumberCreate();

  uint64_t result = CMFItemCreateWithPhoneNumber();
  if (result)
  {

LABEL_12:
    int IsItemBlocked = CMFBlockListIsItemBlocked();
    swift_unknownObjectRelease();
    return IsItemBlocked != 0;
  }
  __break(1u);
  return result;
}

uint64_t MessagingDestination.DestinationType.rawValue.getter(uint64_t result)
{
  return result;
}

uint64_t sub_100B96A94()
{
  return RawRepresentable<>.init(from:)();
}

uint64_t sub_100B96AF4()
{
  return RawRepresentable<>.encode(to:)();
}

searchpartyd::MessagingDestination __swiftcall MessagingDestination.init(phoneNumber:)(Swift::String phoneNumber)
{
  NSString v1 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  uint64_t v2 = (void *)IDSCopyIDForPhoneNumber();

  if (v2)
  {
    uint64_t v6 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    NSString v8 = v7;

    searchpartyd::MessagingDestination::DestinationType v3 = searchpartyd_MessagingDestination_DestinationType_phoneNumber;
    uint64_t v4 = v6;
    NSString v5 = v8;
  }
  else
  {
    __break(1u);
  }
  result.destination._object = v5;
  result.destination._countAndFlagsBits = v4;
  result.os_log_type_t type = v3;
  return result;
}

uint64_t sub_100B96BB4()
{
  if (*v0) {
    return 0x74616E6974736564;
  }
  else {
    return 1701869940;
  }
}

uint64_t sub_100B96BF0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_100B973EC(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_100B96C18(uint64_t a1)
{
  unint64_t v2 = sub_100B97344();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_100B96C54(uint64_t a1)
{
  unint64_t v2 = sub_100B97344();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t MessagingDestination.encode(to:)(void *a1, char a2, uint64_t a3, uint64_t a4)
{
  v12[1] = a4;
  uint64_t v7 = sub_10000588C(&qword_10165A288);
  uint64_t v8 = *(void *)(v7 - 8);
  __chkstk_darwin(v7);
  uint64_t v10 = (char *)v12 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10001CD44(a1, a1[3]);
  sub_100B97344();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  char v15 = a2;
  char v14 = 0;
  sub_100B97398();
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  if (!v4)
  {
    char v13 = 1;
    KeyedEncodingContainer.encode(_:forKey:)();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v8 + 8))(v10, v7);
}

uint64_t MessagingDestination.init(from:)(void *a1)
{
  return sub_100B974E8(a1);
}

uint64_t sub_100B96E3C@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result = sub_100B974E8(a1);
  if (!v2)
  {
    *(unsigned char *)a2 = result;
    *(void *)(a2 + 8) = v5;
    *(void *)(a2 + 16) = v6;
  }
  return result;
}

uint64_t sub_100B96E6C(void *a1)
{
  return MessagingDestination.encode(to:)(a1, *(unsigned char *)v1, *(void *)(v1 + 8), *(void *)(v1 + 16));
}

uint64_t sub_100B96E8C()
{
  uint64_t v1 = *(void *)(v0 + 8);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t MessagingDestination.hash(into:)(uint64_t a1, unsigned __int8 a2)
{
  Hasher._combine(_:)(a2);
  swift_bridgeObjectRetain();
  String.hash(into:)();

  return swift_bridgeObjectRelease();
}

Swift::Int MessagingDestination.hashValue.getter(unsigned __int8 a1)
{
  return Hasher._finalize()();
}

Swift::Int sub_100B96F98()
{
  Swift::UInt v1 = *v0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  return Hasher._finalize()();
}

uint64_t sub_100B9700C()
{
  Hasher._combine(_:)(*v0);
  swift_bridgeObjectRetain();
  String.hash(into:)();

  return swift_bridgeObjectRelease();
}

Swift::Int sub_100B97070()
{
  Swift::UInt v1 = *v0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  return Hasher._finalize()();
}

uint64_t sub_100B970E0(unsigned __int8 *a1, unsigned __int8 *a2)
{
  if (*a1 != *a2) {
    return 0;
  }
  if (*((void *)a1 + 1) == *((void *)a2 + 1) && *((void *)a1 + 2) == *((void *)a2 + 2)) {
    return 1;
  }
  else {
    return _stringCompareWithSmolCheck(_:_:expecting:)();
  }
}

void _s12searchpartyd20MessagingDestinationV6stringACSgSS_tcfC_0()
{
  sub_1000336D4();
  char v0 = StringProtocol.contains<A>(_:)();
  NSString v1 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  if (v0)
  {
    uint64_t v2 = (void *)IDSCopyIDForEmailAddress();

    if (v2) {
      goto LABEL_5;
    }
    __break(1u);
  }
  else
  {
    uint64_t v2 = (void *)IDSCopyIDForPhoneNumber();

    if (v2)
    {
LABEL_5:
      static String._unconditionallyBridgeFromObjectiveC(_:)();

      return;
    }
  }
  __break(1u);
}

uint64_t _s12searchpartyd20MessagingDestinationV20stringRepresentationACSgSS_tcfC_0()
{
  v0._countAndFlagsBits = 0x3A6F746C69616DLL;
  v0._object = (void *)0xE700000000000000;
  if (String.hasPrefix(_:)(v0)) {
    return 0;
  }
  v2._countAndFlagsBits = 980182388;
  v2._object = (void *)0xE400000000000000;
  if (String.hasPrefix(_:)(v2)) {
    return 1;
  }
  v3._countAndFlagsBits = 0x3A6E656B6F74;
  v3._object = (void *)0xE600000000000000;
  if (String.hasPrefix(_:)(v3)) {
    return 2;
  }
  v4._countAndFlagsBits = 0x6B6F742D666C6573;
  v4._object = (void *)0xEB000000003A6E65;
  if (String.hasPrefix(_:)(v4)) {
    return 2;
  }
  v5._countAndFlagsBits = 0x3A656369766564;
  v5._object = (void *)0xE700000000000000;
  if (String.hasPrefix(_:)(v5)) {
    return 3;
  }
  v6._countAndFlagsBits = 0x3A6E6F6973736573;
  v6._object = (void *)0xE800000000000000;
  if (String.hasPrefix(_:)(v6)) {
    return 4;
  }
  swift_bridgeObjectRelease();
  return 0;
}

unint64_t sub_100B97344()
{
  unint64_t result = qword_10165A290;
  if (!qword_10165A290)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10165A290);
  }
  return result;
}

unint64_t sub_100B97398()
{
  unint64_t result = qword_10165A298;
  if (!qword_10165A298)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10165A298);
  }
  return result;
}

uint64_t sub_100B973EC(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 1701869940 && a2 == 0xE400000000000000;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x74616E6974736564 && a2 == 0xEB000000006E6F69)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else
  {
    char v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v6) {
      return 1;
    }
    else {
      return 2;
    }
  }
}

uint64_t sub_100B974E8(void *a1)
{
  uint64_t v3 = sub_10000588C(&qword_10165A2C8);
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  char v6 = &v9[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v7 = a1[3];
  sub_10001CD44(a1, v7);
  sub_100B97344();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (!v1)
  {
    v9[14] = 0;
    sub_100B97B44();
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    uint64_t v7 = v9[15];
    v9[13] = 1;
    KeyedDecodingContainer.decode(_:forKey:)();
    (*(void (**)(unsigned char *, uint64_t))(v4 + 8))(v6, v3);
  }
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)a1);
  return v7;
}

unint64_t sub_100B976AC()
{
  unint64_t result = qword_10165A2A0;
  if (!qword_10165A2A0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10165A2A0);
  }
  return result;
}

uint64_t destroy for MessagingDestination()
{
  return swift_bridgeObjectRelease();
}

uint64_t _s12searchpartyd20MessagingDestinationVwCP_0(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  uint64_t v3 = *(void *)(a2 + 16);
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(void *)(a1 + 16) = v3;
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for MessagingDestination(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t assignWithTake for MessagingDestination(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  uint64_t v3 = *(void *)(a2 + 16);
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(void *)(a1 + 16) = v3;
  swift_bridgeObjectRelease();
  return a1;
}

ValueMetadata *type metadata accessor for MessagingDestination()
{
  return &type metadata for MessagingDestination;
}

unsigned char *storeEnumTagSinglePayload for MessagingDestination.DestinationType(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 5 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 5) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFB) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFA)
  {
    unsigned int v6 = ((a2 - 251) >> 8) + 1;
    *unint64_t result = a2 + 5;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x100B978ACLL);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 5;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for MessagingDestination.DestinationType()
{
  return &type metadata for MessagingDestination.DestinationType;
}

unsigned char *storeEnumTagSinglePayload for MessagingDestination.CodingKeys(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFE)
  {
    unsigned int v6 = ((a2 - 255) >> 8) + 1;
    *unint64_t result = a2 + 1;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x100B979B0);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 1;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for MessagingDestination.CodingKeys()
{
  return &type metadata for MessagingDestination.CodingKeys;
}

unint64_t sub_100B979EC()
{
  unint64_t result = qword_10165A2A8;
  if (!qword_10165A2A8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10165A2A8);
  }
  return result;
}

unint64_t sub_100B97A44()
{
  unint64_t result = qword_10165A2B0;
  if (!qword_10165A2B0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10165A2B0);
  }
  return result;
}

unint64_t sub_100B97A9C()
{
  unint64_t result = qword_10165A2B8;
  if (!qword_10165A2B8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10165A2B8);
  }
  return result;
}

unint64_t sub_100B97AF0()
{
  unint64_t result = qword_10165A2C0;
  if (!qword_10165A2C0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10165A2C0);
  }
  return result;
}

unint64_t sub_100B97B44()
{
  unint64_t result = qword_10165A2D0;
  if (!qword_10165A2D0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10165A2D0);
  }
  return result;
}

ValueMetadata *type metadata accessor for AirPodsSendPairingDataCommandPayloadv1()
{
  return &type metadata for AirPodsSendPairingDataCommandPayloadv1;
}

double sub_100B97BA8@<D0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  sub_100B97E00(a1, (uint64_t)v10);
  if (!v2)
  {
    long long v5 = v18;
    *(_OWORD *)(a2 + 128) = v17;
    *(_OWORD *)(a2 + 144) = v5;
    *(_OWORD *)(a2 + 160) = v19;
    *(void *)(a2 + 176) = v20;
    long long v6 = v14;
    *(_OWORD *)(a2 + 64) = v13;
    *(_OWORD *)(a2 + 80) = v6;
    long long v7 = v16;
    *(_OWORD *)(a2 + 96) = v15;
    *(_OWORD *)(a2 + 112) = v7;
    long long v8 = v10[1];
    *(_OWORD *)a2 = v10[0];
    *(_OWORD *)(a2 + 16) = v8;
    double result = *(double *)&v11;
    long long v9 = v12;
    *(_OWORD *)(a2 + 32) = v11;
    *(_OWORD *)(a2 + 48) = v9;
  }
  return result;
}

unint64_t sub_100B97C28(uint64_t a1)
{
  *(void *)(a1 + 8) = sub_100B97C58();
  unint64_t result = sub_100A39160();
  *(void *)(a1 + 16) = result;
  return result;
}

unint64_t sub_100B97C58()
{
  unint64_t result = qword_10165A2D8;
  if (!qword_10165A2D8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10165A2D8);
  }
  return result;
}

uint64_t sub_100B97CAC@<X0>(uint64_t result@<X0>, unint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>, uint64_t a10, unint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,char a22,uint64_t a23,uint64_t a24)
{
  switch(a2 >> 62)
  {
    case 1uLL:
      LODWORD(v24) = HIDWORD(result) - result;
      if (__OFSUB__(HIDWORD(result), result))
      {
        __break(1u);
LABEL_15:
        __break(1u);
LABEL_16:
        __break(1u);
LABEL_17:
        __break(1u);
LABEL_18:
        __break(1u);
LABEL_19:
        __break(1u);
        JUMPOUT(0x100B97DE0);
      }
      uint64_t v24 = (int)v24;
LABEL_6:
      if (v24 != 32) {
        goto LABEL_18;
      }
      switch(a11 >> 62)
      {
        case 1uLL:
          LODWORD(v28) = HIDWORD(a10) - a10;
          if (__OFSUB__(HIDWORD(a10), a10)) {
            goto LABEL_16;
          }
          uint64_t v28 = (int)v28;
LABEL_12:
          if (v28 != 1) {
            goto LABEL_19;
          }
          *(void *)a9 = result;
          *(void *)(a9 + 8) = a2;
          *(void *)(a9 + 16) = a10;
          *(void *)(a9 + 24) = a11;
          *(void *)(a9 + 32) = a3;
          *(void *)(a9 + 40) = a4;
          *(void *)(a9 + 48) = a12;
          *(void *)(a9 + 56) = a13;
          *(void *)(a9 + 64) = a5;
          *(void *)(a9 + 72) = a6;
          *(void *)(a9 + 80) = a7;
          *(void *)(a9 + 88) = a8;
          *(void *)(a9 + 96) = a14;
          *(void *)(a9 + 104) = a15;
          *(void *)(a9 + 112) = a16;
          *(void *)(a9 + 120) = a17;
          *(void *)(a9 + 128) = a18;
          *(void *)(a9 + 136) = a19;
          *(void *)(a9 + 144) = a20;
          *(void *)(a9 + 152) = a21;
          *(unsigned char *)(a9 + 160) = a22;
          *(void *)(a9 + 168) = a23;
          *(void *)(a9 + 176) = a24;
          return result;
        case 2uLL:
          uint64_t v30 = *(void *)(a10 + 16);
          uint64_t v29 = *(void *)(a10 + 24);
          BOOL v27 = __OFSUB__(v29, v30);
          uint64_t v28 = v29 - v30;
          if (!v27) {
            goto LABEL_12;
          }
          goto LABEL_17;
        case 3uLL:
          goto LABEL_19;
        default:
          uint64_t v28 = BYTE6(a11);
          goto LABEL_12;
      }
    case 2uLL:
      uint64_t v26 = *(void *)(result + 16);
      uint64_t v25 = *(void *)(result + 24);
      BOOL v27 = __OFSUB__(v25, v26);
      uint64_t v24 = v25 - v26;
      if (!v27) {
        goto LABEL_6;
      }
      goto LABEL_15;
    case 3uLL:
      goto LABEL_18;
    default:
      uint64_t v24 = BYTE6(a2);
      goto LABEL_6;
  }
}

uint64_t sub_100B97E00@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  sub_10001CD44(a1, a1[3]);
  dispatch thunk of BinaryDecoding.container()();
  sub_1000BD078((uint64_t)v63, v64);
  uint64_t v5 = dispatch thunk of BinaryDecodingContaining.decode(length:)();
  if (v2)
  {
LABEL_12:
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)v63);
    return _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)a1);
  }
  uint64_t v7 = v5;
  unint64_t v8 = v6;
  sub_1000BD078((uint64_t)v63, v64);
  uint64_t v9 = dispatch thunk of BinaryDecodingContaining.decode(length:)();
  unint64_t v67 = v10;
  sub_1000BD078((uint64_t)v63, v64);
  uint64_t v61 = dispatch thunk of BinaryDecodingContaining.decode(length:)();
  unint64_t v62 = v11;
  sub_1000BD078((uint64_t)v63, v64);
  uint64_t v59 = dispatch thunk of BinaryDecodingContaining.decode(length:)();
  unint64_t v60 = v12;
  sub_1000BD078((uint64_t)v63, v64);
  uint64_t v57 = dispatch thunk of BinaryDecodingContaining.decode(length:)();
  unint64_t v58 = v13;
  sub_1000BD078((uint64_t)v63, v64);
  uint64_t v14 = dispatch thunk of BinaryDecodingContaining.decode(length:)();
  unint64_t v16 = v15;
  sub_1000362FC();
  uint64_t v17 = DataProtocol.intValue.getter();
  uint64_t v18 = v17 - 1;
  if (__OFSUB__(v17, 1))
  {
    __break(1u);
    goto LABEL_14;
  }
  if ((unsigned __int128)(v18 * (__int128)20) >> 64 != (20 * v18) >> 63)
  {
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }
  if (20 * v18 < 0)
  {
LABEL_15:
    __break(1u);
    goto LABEL_16;
  }
  uint64_t v53 = Data.subdata(in:)();
  unint64_t v54 = v19;
  uint64_t v55 = v14;
  unint64_t v56 = v16;
  sub_1000BD078((uint64_t)v63, v64);
  uint64_t v50 = dispatch thunk of BinaryDecodingContaining.decode(length:)();
  unint64_t v51 = v20;
  sub_1000BD078((uint64_t)v63, v64);
  uint64_t v48 = dispatch thunk of BinaryDecodingContaining.decode(length:)();
  unint64_t v49 = v21;
  sub_1000BD078((uint64_t)v63, v64);
  uint64_t v46 = dispatch thunk of BinaryDecodingContaining.decode(length:)();
  unint64_t v47 = v22;
  sub_1000BD078((uint64_t)v63, v64);
  uint64_t v44 = dispatch thunk of BinaryDecodingContaining.decode(length:)();
  unint64_t v45 = v23;
  sub_1000BD078((uint64_t)v63, v64);
  uint64_t v42 = dispatch thunk of BinaryDecodingContaining.decode(length:)();
  unint64_t v43 = v24;
  uint64_t v52 = DataProtocol.intValue.getter();
  sub_1000BD078((uint64_t)v63, v64);
  uint64_t v25 = dispatch thunk of BinaryDecodingContaining.decode(length:)();
  unint64_t v41 = v26;
  uint64_t v14 = v25;
  if (v52 > 3)
  {
    if (qword_101637310 == -1)
    {
LABEL_9:
      uint64_t v35 = type metadata accessor for Logger();
      sub_100010324(v35, (uint64_t)qword_10170F068);
      uint64_t v36 = Logger.logObject.getter();
      os_log_type_t v37 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v36, v37))
      {
        uint64_t v38 = (uint8_t *)swift_slowAlloc();
        *(_DWORD *)uint64_t v38 = 134217984;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        _os_log_impl((void *)&_mh_execute_header, v36, v37, "Invalid beaconPartId %ld!", v38, 0xCu);
        swift_slowDealloc();
      }

      uint64_t v39 = type metadata accessor for BinaryDecodingError();
      sub_100499A70();
      swift_allocError();
      (*(void (**)(uint64_t, void, uint64_t))(*(void *)(v39 - 8) + 104))(v40, enum case for BinaryDecodingError.decodingError(_:), v39);
      swift_willThrow();
      sub_10001CFB8(v14, v41);
      sub_10001CFB8(v42, v43);
      sub_10001CFB8(v44, v45);
      sub_10001CFB8(v46, v47);
      sub_10001CFB8(v48, v49);
      sub_10001CFB8(v50, v51);
      sub_10001CFB8(v53, v54);
      sub_10001CFB8(v55, v56);
      sub_10001CFB8(v57, v58);
      sub_10001CFB8(v59, v60);
      sub_10001CFB8(v61, v62);
      sub_10001CFB8(v9, v67);
      sub_10001CFB8(v7, v8);
      goto LABEL_12;
    }
LABEL_16:
    swift_once();
    goto LABEL_9;
  }
  sub_10001CFB8(v42, v43);
  sub_10001CFB8(v55, v16);
  if (v52 < 0)
  {
    uint64_t result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  else
  {
    sub_100B97CAC(v7, v8, v9, v67, v61, v62, v59, v60, (uint64_t)v65, v57, v58, v53, v54, v50, v51, v48, v49, v46, v47,
      v44,
      v45,
      v52,
      v14,
      v41);
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)v63);
    uint64_t result = _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)a1);
    long long v28 = v65[9];
    long long v29 = v65[10];
    long long v30 = v65[7];
    *(_OWORD *)(a2 + 128) = v65[8];
    *(_OWORD *)(a2 + 144) = v28;
    *(_OWORD *)(a2 + 160) = v29;
    long long v31 = v65[5];
    long long v32 = v65[6];
    *(_OWORD *)(a2 + 64) = v65[4];
    *(_OWORD *)(a2 + 80) = v31;
    *(void *)(a2 + 176) = v66;
    *(_OWORD *)(a2 + 96) = v32;
    *(_OWORD *)(a2 + 112) = v30;
    long long v33 = v65[1];
    *(_OWORD *)a2 = v65[0];
    *(_OWORD *)(a2 + 16) = v33;
    long long v34 = v65[3];
    *(_OWORD *)(a2 + 32) = v65[2];
    *(_OWORD *)(a2 + 48) = v34;
  }
  return result;
}

void *sub_100B98488(void *a1, uint64_t a2)
{
  uint64_t v3 = v2;
  uint64_t v6 = type metadata accessor for MultipartAccessoryPairingInfo(0);
  uint64_t v75 = *(void *)(v6 - 8);
  __chkstk_darwin(v6 - 8);
  uint64_t v72 = (uint64_t)&v66 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v84 = sub_10000588C(&qword_101639618);
  uint64_t v8 = __chkstk_darwin(v84);
  char v71 = (char *)&v66 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = __chkstk_darwin(v8);
  uint64_t v74 = (uint64_t *)((char *)&v66 - v11);
  uint64_t v12 = __chkstk_darwin(v10);
  uint64_t v14 = (uint64_t *)((char *)&v66 - v13);
  __chkstk_darwin(v12);
  uint64_t v73 = (uint64_t *)((char *)&v66 - v15);
  uint64_t v16 = *(void *)(a2 + 64);
  uint64_t v68 = a2 + 64;
  uint64_t v17 = 1 << *(unsigned char *)(a2 + 32);
  uint64_t v18 = -1;
  if (v17 < 64) {
    uint64_t v18 = ~(-1 << v17);
  }
  unint64_t v19 = v18 & v16;
  int64_t v69 = (unint64_t)(v17 + 63) >> 6;
  swift_bridgeObjectRetain();
  uint64_t v76 = a2;
  swift_bridgeObjectRetain();
  int64_t v20 = 0;
  uint64_t v70 = v14;
  while (1)
  {
    if (v19)
    {
      uint64_t v77 = (v19 - 1) & v19;
      int64_t v78 = v20;
      unint64_t v21 = __clz(__rbit64(v19)) | (v20 << 6);
      goto LABEL_21;
    }
    BOOL v22 = __OFADD__(v20, 1);
    int64_t v23 = v20 + 1;
    if (v22) {
      goto LABEL_54;
    }
    if (v23 >= v69) {
      break;
    }
    unint64_t v24 = *(void *)(v68 + 8 * v23);
    if (!v24)
    {
      int64_t v25 = v23 + 1;
      if (v23 + 1 >= v69) {
        break;
      }
      unint64_t v24 = *(void *)(v68 + 8 * v25);
      if (!v24)
      {
        int64_t v25 = v23 + 2;
        if (v23 + 2 >= v69) {
          break;
        }
        unint64_t v24 = *(void *)(v68 + 8 * v25);
        if (!v24)
        {
          int64_t v25 = v23 + 3;
          if (v23 + 3 >= v69) {
            break;
          }
          unint64_t v24 = *(void *)(v68 + 8 * v25);
          if (!v24)
          {
            int64_t v25 = v23 + 4;
            if (v23 + 4 >= v69) {
              break;
            }
            unint64_t v24 = *(void *)(v68 + 8 * v25);
            if (!v24)
            {
              while (1)
              {
                int64_t v23 = v25 + 1;
                if (__OFADD__(v25, 1)) {
                  goto LABEL_58;
                }
                if (v23 >= v69) {
                  goto LABEL_50;
                }
                unint64_t v24 = *(void *)(v68 + 8 * v23);
                ++v25;
                if (v24) {
                  goto LABEL_20;
                }
              }
            }
          }
        }
      }
      int64_t v23 = v25;
    }
LABEL_20:
    uint64_t v77 = (v24 - 1) & v24;
    int64_t v78 = v23;
    unint64_t v21 = __clz(__rbit64(v24)) + (v23 << 6);
LABEL_21:
    uint64_t v26 = *(void *)(v76 + 56);
    BOOL v27 = (uint64_t *)(*(void *)(v76 + 48) + 16 * v21);
    uint64_t v28 = *v27;
    unint64_t v29 = v27[1];
    uint64_t v79 = *(void *)(v75 + 72);
    uint64_t v30 = v84;
    long long v31 = v73;
    sub_100036114(v26 + v79 * v21, (uint64_t)v73 + *(int *)(v84 + 48));
    *long long v31 = v28;
    v31[1] = v29;
    sub_10001D608((uint64_t)v31, (uint64_t)v14, &qword_101639618);
    uint64_t v32 = *(int *)(v30 + 48);
    long long v33 = v74;
    uint64_t v34 = (uint64_t)v74 + v32;
    uint64_t v35 = (uint64_t)v14 + v32;
    uint64_t v36 = *v14;
    unint64_t v37 = v14[1];
    *uint64_t v74 = *v14;
    v33[1] = v37;
    sub_100036114((uint64_t)v14 + v32, (uint64_t)v33 + v32);
    uint64_t v82 = (void *)v36;
    unint64_t v83 = v37;
    uint64_t v38 = 0;
    switch(v37 >> 62)
    {
      case 1uLL:
        if (__OFSUB__(HIDWORD(v36), v36)) {
          goto LABEL_56;
        }
        uint64_t v38 = HIDWORD(v36) - (int)v36;
LABEL_26:
        sub_1000361E0(v36, v37);
        sub_1000361E0(v36, v37);
LABEL_27:
        BOOL v22 = __OFSUB__(20, v38);
        uint64_t v41 = 20 - v38;
        if (v22)
        {
          __break(1u);
LABEL_52:
          __break(1u);
LABEL_53:
          __break(1u);
LABEL_54:
          __break(1u);
LABEL_55:
          __break(1u);
LABEL_56:
          __break(1u);
LABEL_57:
          __break(1u);
LABEL_58:
          __break(1u);
LABEL_59:
          KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
          __break(1u);
          JUMPOUT(0x100B98B0CLL);
        }
        if (v41)
        {
          if (v41 <= 14)
          {
            if (v41 < 0) {
              goto LABEL_55;
            }
            unint64_t v44 = (unint64_t)v41 << 48;
            sub_1000361E0(v28, v29);
            swift_bridgeObjectRetain();
            uint64_t v43 = 0;
          }
          else
          {
            uint64_t v67 = v3;
            type metadata accessor for __DataStorage();
            swift_allocObject();
            sub_1000361E0(v28, v29);
            swift_bridgeObjectRetain();
            uint64_t v42 = __DataStorage.init(length:)();
            if ((unint64_t)v41 >= 0x7FFFFFFF)
            {
              type metadata accessor for Data.RangeReference();
              uint64_t v43 = swift_allocObject();
              *(void *)(v43 + 16) = 0;
              *(void *)(v43 + 24) = v41;
              unint64_t v44 = v42 | 0x8000000000000000;
            }
            else
            {
              uint64_t v43 = v41 << 32;
              unint64_t v44 = v42 | 0x4000000000000000;
            }
            uint64_t v3 = v67;
          }
        }
        else
        {
          sub_1000361E0(v28, v29);
          swift_bridgeObjectRetain();
          uint64_t v43 = 0;
          unint64_t v44 = 0xC000000000000000;
        }
        uint64_t v80 = v43;
        unint64_t v81 = v44;
        sub_10072AD40(&v80, 0);
        uint64_t v45 = v80;
        unint64_t v46 = v81;
        Data.append(_:)();
        sub_10001CFB8(v45, v46);
        sub_10001CFB8(v36, v37);
        uint64_t v47 = (uint64_t)v82;
        unint64_t v48 = v83;
        Swift::String v49 = Data.base64EncodedString(options:)(0);
        sub_10001CFB8(v47, v48);
        sub_100036238(v34);
        uint64_t v50 = (uint64_t)&v71[*(int *)(v84 + 48)];
        sub_100036114(v35, v50);
        uint64_t v51 = v72;
        sub_10084EE10(v50, v72);
        int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
        uint64_t v82 = a1;
        unint64_t v54 = sub_100723FF4(v49._countAndFlagsBits, (uint64_t)v49._object);
        uint64_t v55 = a1[2];
        BOOL v56 = (v53 & 1) == 0;
        uint64_t v57 = v55 + v56;
        if (__OFADD__(v55, v56)) {
          goto LABEL_52;
        }
        char v58 = v53;
        if (a1[3] >= v57)
        {
          if ((isUniquelyReferenced_nonNull_native & 1) == 0) {
            sub_100E8540C();
          }
        }
        else
        {
          sub_100E73F4C(v57, isUniquelyReferenced_nonNull_native);
          uint64_t v59 = sub_100723FF4(v49._countAndFlagsBits, (uint64_t)v49._object);
          if ((v58 & 1) != (v60 & 1)) {
            goto LABEL_59;
          }
          unint64_t v54 = v59;
        }
        uint64_t v61 = v79;
        unint64_t v62 = v82;
        if (v58)
        {
          sub_10084EED4(v51, v82[7] + v54 * v79);
        }
        else
        {
          v82[(v54 >> 6) + 8] |= 1 << v54;
          *(Swift::String *)(v62[6] + 16 * v54) = v49;
          sub_10084EE10(v51, v62[7] + v54 * v61);
          uint64_t v63 = v62[2];
          BOOL v22 = __OFADD__(v63, 1);
          uint64_t v64 = v63 + 1;
          if (v22) {
            goto LABEL_53;
          }
          uint64_t v62[2] = v64;
          swift_bridgeObjectRetain();
        }
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        uint64_t v14 = v70;
        sub_10084EE74((uint64_t)v70);
        swift_bridgeObjectRelease();
        a1 = v62;
        unint64_t v19 = v77;
        int64_t v20 = v78;
        break;
      case 2uLL:
        uint64_t v40 = *(void *)(v36 + 16);
        uint64_t v39 = *(void *)(v36 + 24);
        uint64_t v38 = v39 - v40;
        if (!__OFSUB__(v39, v40)) {
          goto LABEL_26;
        }
        goto LABEL_57;
      case 3uLL:
        goto LABEL_27;
      default:
        uint64_t v38 = BYTE6(v37);
        goto LABEL_27;
    }
  }
LABEL_50:
  swift_release();
  return a1;
}

unint64_t sub_100B98B1C(char a1)
{
  unint64_t result = 0x4E6E6F6973736573;
  switch(a1)
  {
    case 1:
      unint64_t result = 12645;
      break;
    case 2:
      unint64_t result = 0xD000000000000013;
      break;
    case 3:
      unint64_t result = 0x74617453636E7973;
      break;
    case 4:
      unint64_t result = 1684628325;
      break;
    case 5:
      unint64_t result = 0x644970696863;
      break;
    case 6:
      unint64_t result = 0x754E6C6169726573;
      break;
    case 7:
      unint64_t result = 0x644974726170;
      break;
    case 8:
      unint64_t result = 0x6F636165426D756ELL;
      break;
    case 9:
      unint64_t result = 0xD000000000000012;
      break;
    case 10:
      unint64_t result = 0xD00000000000001BLL;
      break;
    case 11:
      unint64_t result = 0x6E55646572616873;
      break;
    case 12:
      unint64_t result = 0x314B64656573;
      break;
    case 13:
    case 14:
      unint64_t result = 0x726F737365636361;
      break;
    case 15:
      unint64_t result = 0xD000000000000014;
      break;
    case 16:
      unint64_t result = 0xD000000000000011;
      break;
    case 17:
      unint64_t result = 0x69634572656E776FLL;
      break;
    case 18:
      unint64_t result = 0x69684372656E776FLL;
      break;
    case 19:
      unint64_t result = 0x7372655663657073;
      break;
    case 20:
      unint64_t result = 0x657261776D726966;
      break;
    case 21:
      unint64_t result = 0x49746375646F7270;
      break;
    case 22:
      unint64_t result = 0x6449726F646E6576;
      break;
    case 23:
      unint64_t result = 0xD000000000000015;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t sub_100B98E18(void *a1)
{
  uint64_t v3 = v1;
  uint64_t v5 = sub_10000588C(&qword_10165A2F0);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v8 = (char *)&v10 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10001CD44(a1, a1[3]);
  sub_100B9B888();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  long long v12 = *v3;
  char v11 = 0;
  sub_100037BB4();
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  if (!v2)
  {
    long long v12 = v3[1];
    char v11 = 1;
    KeyedEncodingContainer.encode<A>(_:forKey:)();
    sub_10001D608((uint64_t)(v3 + 2), (uint64_t)v13, &qword_101669360);
    sub_10001D608((uint64_t)v13, (uint64_t)&v12, &qword_101669360);
    char v11 = 2;
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)();
    LOBYTE(v12) = 3;
    KeyedEncodingContainer.encode(_:forKey:)();
    long long v12 = *(long long *)((char *)v3 + 56);
    char v11 = 4;
    KeyedEncodingContainer.encode<A>(_:forKey:)();
    long long v12 = *(long long *)((char *)v3 + 72);
    char v11 = 5;
    KeyedEncodingContainer.encode<A>(_:forKey:)();
    long long v12 = *(long long *)((char *)v3 + 88);
    char v11 = 6;
    KeyedEncodingContainer.encode<A>(_:forKey:)();
    LOBYTE(v12) = 7;
    KeyedEncodingContainer.encode(_:forKey:)();
    LOBYTE(v12) = 8;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
    *(void *)&long long v12 = *((void *)v3 + 16);
    char v11 = 9;
    sub_10000588C((uint64_t *)&unk_10164DBD0);
    sub_10025F9B4();
    KeyedEncodingContainer.encode<A>(_:forKey:)();
    *(void *)&long long v12 = *((void *)v3 + 17);
    char v11 = 10;
    sub_10000588C(&qword_10164F080);
    sub_10084F844();
    KeyedEncodingContainer.encode<A>(_:forKey:)();
    LOBYTE(v12) = 11;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
    long long v12 = v3[10];
    char v11 = 12;
    KeyedEncodingContainer.encode<A>(_:forKey:)();
    long long v12 = v3[11];
    char v11 = 13;
    KeyedEncodingContainer.encode<A>(_:forKey:)();
    long long v12 = v3[12];
    char v11 = 14;
    KeyedEncodingContainer.encode<A>(_:forKey:)();
    long long v12 = v3[13];
    char v11 = 15;
    KeyedEncodingContainer.encode<A>(_:forKey:)();
    LOBYTE(v12) = 16;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
    LOBYTE(v12) = 17;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
    LOBYTE(v12) = 18;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
    LOBYTE(v12) = 19;
    KeyedEncodingContainer.encode(_:forKey:)();
    LOBYTE(v12) = 20;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
    LOBYTE(v12) = 21;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
    LOBYTE(v12) = 22;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
    LOBYTE(v12) = 23;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
}

unint64_t sub_100B99428()
{
  return sub_100B98B1C(*v0);
}

uint64_t sub_100B99430@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_100B9BAE8(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_100B99458(uint64_t a1)
{
  unint64_t v2 = sub_100B9B888();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_100B99494(uint64_t a1)
{
  unint64_t v2 = sub_100B9B888();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_100B994D0(void *a1)
{
  memcpy(v4, v1, sizeof(v4));
  return sub_100B98E18(a1);
}

uint64_t sub_100B99524@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  uint64_t v8 = *(void *)(a1 + 256);
  unint64_t v9 = *(void *)(a1 + 264);
  uint64_t v10 = *(void *)(a1 + 32);
  unint64_t v11 = *(void *)(a1 + 40);
  uint64_t v12 = *(void *)(a1 + 104);
  unint64_t v13 = *(void *)(a1 + 112);
  uint64_t v14 = *(void *)(a1 + 120);
  unint64_t v15 = *(void *)(a1 + 128);
  unint64_t v86 = *(void *)(a1 + 144);
  uint64_t v87 = *(void *)(a1 + 136);
  unint64_t v77 = *(void *)(a1 + 248);
  uint64_t v78 = *(void *)(a1 + 240);
  sub_1000361E0(v78, v77);
  unint64_t v75 = v9;
  uint64_t v76 = v8;
  sub_1000361E0(v8, v9);
  unint64_t v73 = v11;
  uint64_t v74 = v10;
  sub_100037A38(v10, v11);
  uint64_t v80 = v12;
  unint64_t v72 = v13;
  sub_1000361E0(v12, v13);
  uint64_t v71 = v14;
  unint64_t v79 = v15;
  sub_1000361E0(v14, v15);
  sub_1000361E0(v87, v86);
  sub_1000362FC();
  uint64_t v70 = DataProtocol.intValue.getter();
  uint64_t v16 = *(void *)(a1 + 176);
  uint64_t v65 = *(void *)(a1 + 168);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  uint64_t v17 = (void *)sub_10092F63C((uint64_t)_swiftEmptyArrayStorage);
  uint64_t v68 = sub_100B98488(v17, v16);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v19 = *(void *)(a1 + 16);
  unint64_t v18 = *(void *)(a1 + 24);
  uint64_t v21 = *(void *)a1;
  unint64_t v20 = *(void *)(a1 + 8);
  uint64_t v22 = *(void *)(a1 + 96);
  uint64_t v23 = *(void *)(a1 + 64);
  uint64_t v61 = *(void *)(a1 + 56);
  uint64_t v62 = *(void *)(a1 + 88);
  uint64_t v24 = *(void *)(a1 + 80);
  uint64_t v60 = *(void *)(a1 + 72);
  uint64_t v25 = *(void *)(a1 + 296);
  uint64_t v69 = *(void *)(a1 + 288);
  uint64_t v57 = *(void *)(a1 + 304);
  unint64_t v83 = *(void *)(a1 + 312);
  unint64_t v58 = *(void *)(a1 + 200);
  uint64_t v59 = *(void *)(a1 + 192);
  sub_1000361E0(v59, v58);
  unint64_t v66 = v18;
  uint64_t v67 = v19;
  unint64_t v26 = v18;
  uint64_t v27 = v21;
  sub_1000361E0(v19, v26);
  sub_1000361E0(v21, v20);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  uint64_t v64 = v23;
  swift_bridgeObjectRetain();
  uint64_t v63 = v24;
  swift_bridgeObjectRetain();
  if (v83 >> 60 == 15)
  {
    uint64_t result = (uint64_t)sub_10098EFB0((uint64_t *)a1);
    uint64_t v29 = 0;
    uint64_t v30 = 0;
    uint64_t v31 = 0;
    uint64_t v32 = 0;
    uint64_t v34 = a4;
    uint64_t v33 = a5;
    unint64_t v35 = a3;
    uint64_t v36 = v87;
    uint64_t v37 = v70;
  }
  else
  {
    uint64_t v56 = v25;
    sub_1000361E0(a2, a3);
    uint64_t v38 = sub_1002AA5D4(v57, v83);
    unint64_t v40 = v39;
    uint64_t v41 = Data.hexString.getter();
    uint64_t v54 = v42;
    uint64_t v55 = v41;
    sub_10001CFB8(v38, v40);
    switch(v83 >> 62)
    {
      case 1uLL:
        LODWORD(v43) = HIDWORD(v57) - v57;
        if (__OFSUB__(HIDWORD(v57), v57)) {
          goto LABEL_11;
        }
        uint64_t v43 = (int)v43;
LABEL_7:
        if (v43 < -1)
        {
          __break(1u);
LABEL_11:
          __break(1u);
LABEL_12:
          __break(1u);
          JUMPOUT(0x100B9990CLL);
        }
LABEL_8:
        uint64_t v47 = Data.subdata(in:)();
        unint64_t v49 = v48;
        uint64_t v29 = Data.hexString.getter();
        uint64_t v30 = v50;
        unint64_t v35 = a3;
        sub_10001CFB8(a2, a3);
        sub_10098EFB0((uint64_t *)a1);
        uint64_t result = sub_10001CFB8(v47, v49);
        uint64_t v34 = a4;
        uint64_t v33 = a5;
        uint64_t v36 = v87;
        uint64_t v37 = v70;
        uint64_t v31 = v55;
        uint64_t v25 = v56;
        uint64_t v32 = v54;
        break;
      case 2uLL:
        uint64_t v45 = *(void *)(v57 + 16);
        uint64_t v44 = *(void *)(v57 + 24);
        BOOL v46 = __OFSUB__(v44, v45);
        uint64_t v43 = v44 - v45;
        if (!v46) {
          goto LABEL_7;
        }
        goto LABEL_12;
      default:
        goto LABEL_8;
    }
  }
  *(void *)a6 = v78;
  *(void *)(a6 + 8) = v77;
  *(void *)(a6 + 16) = v76;
  *(void *)(a6 + 24) = v75;
  *(void *)(a6 + 32) = v74;
  *(void *)(a6 + 40) = v73;
  *(void *)(a6 + 64) = v72;
  *(void *)(a6 + 72) = v71;
  *(void *)(a6 + 48) = 0;
  *(void *)(a6 + 56) = v80;
  uint64_t v51 = *(void *)(a1 + 152);
  *(void *)(a6 + 80) = v79;
  *(void *)(a6 + 88) = v36;
  uint64_t v53 = *(void *)(a1 + 184);
  char v52 = *(unsigned char *)(a1 + 160);
  *(void *)(a6 + 96) = v86;
  *(void *)(a6 + 104) = v37;
  *(void *)(a6 + 112) = v51;
  *(unsigned char *)(a6 + 120) = v52;
  *(void *)(a6 + 128) = v65;
  *(void *)(a6 + 136) = v68;
  *(void *)(a6 + 144) = v53;
  *(unsigned char *)(a6 + 152) = 0;
  *(void *)(a6 + 160) = v59;
  *(void *)(a6 + 168) = v58;
  *(void *)(a6 + 176) = a2;
  *(void *)(a6 + 184) = v35;
  *(void *)(a6 + 192) = v67;
  *(void *)(a6 + 200) = v66;
  *(void *)(a6 + 208) = v27;
  *(void *)(a6 + 216) = v20;
  *(void *)(a6 + 224) = v62;
  *(void *)(a6 + 232) = v22;
  *(void *)(a6 + 240) = v61;
  *(void *)(a6 + 248) = v64;
  *(void *)(a6 + 256) = v60;
  *(void *)(a6 + 264) = v63;
  *(void *)(a6 + 272) = 0x302E302E31;
  *(void *)(a6 + 280) = 0xE500000000000000;
  *(void *)(a6 + 288) = v69;
  *(void *)(a6 + 296) = v25;
  *(void *)(a6 + 304) = v31;
  *(void *)(a6 + 312) = v32;
  *(void *)(a6 + 320) = v29;
  *(void *)(a6 + 328) = v30;
  *(void *)(a6 + 336) = v34;
  *(void *)(a6 + 344) = v33;
  return result;
}

uint64_t sub_100B9991C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  v6[190] = a6;
  v6[189] = a5;
  v6[188] = a4;
  v6[187] = a3;
  v6[186] = a2;
  v6[185] = a1;
  uint64_t v7 = type metadata accessor for HashAlgorithm();
  v6[191] = v7;
  v6[192] = *(void *)(v7 - 8);
  v6[193] = swift_task_alloc();
  uint64_t v8 = type metadata accessor for Locale();
  v6[194] = v8;
  v6[195] = *(void *)(v8 - 8);
  v6[196] = swift_task_alloc();
  uint64_t v9 = type metadata accessor for Date();
  v6[197] = v9;
  v6[198] = *(void *)(v9 - 8);
  v6[199] = swift_task_alloc();
  return _swift_task_switch(sub_100B99AA8, 0, 0);
}

void sub_100B99AA8()
{
  unint64_t v1 = sub_10092D8F8((uint64_t)_swiftEmptyArrayStorage);
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  sub_10016C0FC(1702195828, 0xE400000000000000, 0xD00000000000001BLL, 0x80000001013F64C0, isUniquelyReferenced_nonNull_native);
  swift_bridgeObjectRelease();
  id v3 = [self currentDevice];
  if (!v3)
  {
    __break(1u);
    goto LABEL_13;
  }
  unsigned int v4 = v3;
  id v5 = [v3 serverFriendlyDescription];

  if (!v5)
  {
LABEL_13:
    __break(1u);
    return;
  }
  uint64_t v6 = v0[199];
  uint64_t v7 = v0[198];
  uint64_t v8 = v0[197];
  uint64_t v52 = v0[196];
  uint64_t v53 = v0[195];
  uint64_t v54 = v0[194];
  uint64_t v9 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v11 = v10;

  char v12 = swift_isUniquelyReferenced_nonNull_native();
  sub_10016C0FC(v9, v11, 0xD000000000000011, 0x80000001013F64E0, v12);
  unint64_t v13 = v1;
  swift_bridgeObjectRelease();
  Date.init()();
  uint64_t v14 = Date.epoch.getter();
  (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v6, v8);
  v0[182] = v14;
  uint64_t v15 = dispatch thunk of CustomStringConvertible.description.getter();
  uint64_t v17 = v16;
  char v18 = swift_isUniquelyReferenced_nonNull_native();
  sub_10016C0FC(v15, v17, 0xD000000000000015, 0x80000001013F6500, v18);
  swift_bridgeObjectRelease();
  v0[181] = 1;
  uint64_t v19 = dispatch thunk of CustomStringConvertible.description.getter();
  uint64_t v21 = v20;
  char v22 = swift_isUniquelyReferenced_nonNull_native();
  sub_10016C0FC(v19, v21, 0xD000000000000013, 0x80000001013F6520, v22);
  unint64_t v23 = v13;
  uint64_t v24 = swift_bridgeObjectRelease();
  uint64_t v25 = sub_100BCABFC(v24);
  uint64_t v27 = v26;
  char v28 = swift_isUniquelyReferenced_nonNull_native();
  sub_10016C0FC(v25, v27, 0x6567412D72657355, 0xEA0000000000746ELL, v28);
  swift_bridgeObjectRelease();
  static Locale.current.getter();
  uint64_t v29 = Locale.acceptLanguageCode.getter();
  uint64_t v31 = v30;
  (*(void (**)(uint64_t, uint64_t))(v53 + 8))(v52, v54);
  char v32 = swift_isUniquelyReferenced_nonNull_native();
  sub_10016C0FC(v29, v31, 0x4C2D747065636341, 0xEF65676175676E61, v32);
  unint64_t v33 = v23;
  swift_bridgeObjectRelease();
  if (qword_101637188 != -1) {
    swift_once();
  }
  uint64_t v34 = (void *)qword_10170EE68;
  id v35 = [self sharedInstance];
  unsigned int v36 = [v35 isInternalBuild];

  if (v36)
  {
    NSString v37 = String._bridgeToObjectiveC()();
    unsigned int v38 = [v34 BOOLForKey:v37];

    unint64_t v40 = v0 + 90;
    unint64_t v39 = v0 + 2;
    if (v38)
    {
      char v41 = swift_isUniquelyReferenced_nonNull_native();
      sub_10016C0FC(0x7465722C6C616572, 0xEF302D726F727245, 0xD000000000000012, 0x80000001013F6560, v41);
      swift_bridgeObjectRelease();
    }
  }
  else
  {
    unint64_t v40 = v0 + 90;
    unint64_t v39 = v0 + 2;
  }
  v0[200] = v33;
  unint64_t v42 = v0[189];
  uint64_t v43 = v0[188];
  uint64_t v44 = v0[187];
  uint64_t v45 = v0[186];
  BOOL v46 = (uint64_t *)v0[185];
  sub_10098EE00(v46);
  sub_1000361E0(v43, v42);
  sub_100B99524((uint64_t)v46, v43, v42, v45, v44, (uint64_t)v39);
  type metadata accessor for JSONEncoder();
  swift_allocObject();
  JSONEncoder.init()();
  memcpy(v40, v39, 0x160uLL);
  sub_100B9B500();
  uint64_t v47 = dispatch thunk of JSONEncoder.encode<A>(_:)();
  v0[201] = v47;
  v0[202] = v48;
  uint64_t v49 = v47;
  unint64_t v50 = v48;
  swift_release();
  sub_1000361E0(v49, v50);
  uint64_t v55 = (void (__cdecl *)())((char *)&dword_10165AC50 + dword_10165AC50);
  uint64_t v51 = (void *)swift_task_alloc();
  v0[203] = v51;
  *uint64_t v51 = v0;
  v51[1] = sub_100B9A2CC;
  v55();
}

uint64_t sub_100B9A2CC(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *v2;
  *(void *)(v3 + 1632) = a1;
  *(void *)(v3 + 1640) = a2;
  swift_task_dealloc();
  return _swift_task_switch(sub_100B9A3D0, 0, 0);
}

uint64_t sub_100B9A3D0()
{
  unint64_t v1 = v0[205];
  uint64_t v2 = v0[204];
  unint64_t v3 = v0[202];
  uint64_t v4 = v0[201];
  uint64_t v5 = v0[193];
  uint64_t v6 = v0[192];
  uint64_t v7 = v0[191];
  v0[178] = v2;
  v0[179] = v1;
  sub_1000361E0(v4, v3);
  sub_1000361E0(v2, v1);
  sub_100A42CBC(v4, v3);
  sub_10001CFB8(v4, v3);
  sub_10001CFB8(v2, v1);
  v0[206] = v0[178];
  v0[207] = v0[179];
  (*(void (**)(uint64_t, void, uint64_t))(v6 + 104))(v5, enum case for HashAlgorithm.sha256(_:), v7);
  uint64_t v8 = Data.hash(algorithm:)();
  uint64_t v10 = v9;
  v0[208] = v8;
  v0[209] = v9;
  (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v5, v7);
  uint64_t v14 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))((char *)&dword_10165AC48 + dword_10165AC48);
  uint64_t v11 = (void *)swift_task_alloc();
  v0[210] = v11;
  *uint64_t v11 = v0;
  v11[1] = sub_100B9A56C;
  uint64_t v12 = v0[190];
  return v14(v8, v10, v12);
}

uint64_t sub_100B9A56C(uint64_t a1)
{
  uint64_t v4 = *(void **)v2;
  *(void *)(*(void *)v2 + 1688) = v1;
  swift_task_dealloc();
  if (v1)
  {
    uint64_t v5 = sub_100B9AD2C;
  }
  else
  {
    unint64_t v6 = v4[209];
    uint64_t v7 = v4[208];
    v4[212] = a1;
    sub_10001CFB8(v7, v6);
    uint64_t v5 = sub_100B9A69C;
  }
  return _swift_task_switch(v5, 0, 0);
}

uint64_t sub_100B9A69C()
{
  uint64_t v55 = v0;
  uint64_t isa = (uint64_t)v0[212].isa;
  Class v2 = v0[211].isa;
  uint64_t v3 = (uint64_t)v0[200].isa;
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  v54[0] = v3;
  sub_1001EE9C8(isa, (uint64_t)sub_100BD6E00, 0, isUniquelyReferenced_nonNull_native, v54);
  if (v2)
  {
    return swift_bridgeObjectRelease();
  }
  unint64_t v6 = (unint64_t)v0[207].isa;
  uint64_t v7 = (uint64_t)v0[206].isa;
  uint64_t v49 = v54[0];
  swift_bridgeObjectRelease();
  sub_10001CFB8(v7, v6);
  if (qword_101637320 != -1) {
LABEL_39:
  }
    swift_once();
  uint64_t v47 = (uint64_t *)&v0[2];
  unint64_t v48 = v0;
  __dst = v0 + 46;
  uint64_t v8 = type metadata accessor for Logger();
  sub_100010324(v8, (uint64_t)qword_10170F098);
  Swift::String v0 = Logger.logObject.getter();
  os_log_type_t v9 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v0, v9))
  {
    uint64_t v10 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v10 = 0;
    _os_log_impl((void *)&_mh_execute_header, v0, v9, "Pairing lock header:", v10, 2u);
    swift_slowDealloc();
  }

  uint64_t v11 = v49;
  uint64_t v50 = v49 + 64;
  uint64_t v12 = -1;
  uint64_t v13 = -1 << *(unsigned char *)(v49 + 32);
  if (-v13 < 64) {
    uint64_t v12 = ~(-1 << -(char)v13);
  }
  unint64_t v14 = v12 & *(void *)(v49 + 64);
  int64_t v51 = (unint64_t)(63 - v13) >> 6;
  swift_bridgeObjectRetain();
  for (int64_t i = 0; ; int64_t i = v52)
  {
    if (v14)
    {
      unint64_t v16 = __clz(__rbit64(v14));
      v14 &= v14 - 1;
      int64_t v52 = i;
      unint64_t v17 = v16 | (i << 6);
      goto LABEL_29;
    }
    int64_t v18 = i + 1;
    if (__OFADD__(i, 1))
    {
      __break(1u);
LABEL_38:
      __break(1u);
      goto LABEL_39;
    }
    Swift::String v0 = v48;
    if (v18 >= v51) {
      goto LABEL_31;
    }
    unint64_t v19 = *(void *)(v50 + 8 * v18);
    int64_t v20 = i + 1;
    if (!v19)
    {
      int64_t v20 = i + 2;
      if (i + 2 >= v51) {
        goto LABEL_31;
      }
      unint64_t v19 = *(void *)(v50 + 8 * v20);
      if (!v19)
      {
        int64_t v20 = i + 3;
        if (i + 3 >= v51) {
          goto LABEL_31;
        }
        unint64_t v19 = *(void *)(v50 + 8 * v20);
        if (!v19) {
          break;
        }
      }
    }
LABEL_28:
    unint64_t v14 = (v19 - 1) & v19;
    int64_t v52 = v20;
    unint64_t v17 = __clz(__rbit64(v19)) + (v20 << 6);
LABEL_29:
    uint64_t v22 = 16 * v17;
    unint64_t v23 = (uint64_t *)(*(void *)(v11 + 48) + v22);
    uint64_t v25 = *v23;
    unint64_t v24 = v23[1];
    uint64_t v26 = (uint64_t *)(*(void *)(v11 + 56) + v22);
    uint64_t v28 = *v26;
    unint64_t v27 = v26[1];
    swift_bridgeObjectRetain_n();
    swift_bridgeObjectRetain_n();
    uint64_t v29 = Logger.logObject.getter();
    os_log_type_t v30 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v29, v30))
    {
      uint64_t v31 = swift_slowAlloc();
      Swift::String v0 = swift_slowAlloc();
      v54[0] = (uint64_t)v0;
      *(_DWORD *)uint64_t v31 = 136315394;
      swift_bridgeObjectRetain();
      *(void *)(v31 + 4) = sub_1008FA0F0(v25, v24, v54);
      swift_bridgeObjectRelease_n();
      *(_WORD *)(v31 + 12) = 2080;
      swift_bridgeObjectRetain();
      *(void *)(v31 + 14) = sub_1008FA0F0(v28, v27, v54);
      swift_bridgeObjectRelease_n();
      _os_log_impl((void *)&_mh_execute_header, v29, v30, "%s: %s", (uint8_t *)v31, 0x16u);
      swift_arrayDestroy();
      swift_slowDealloc();
      uint64_t v11 = v49;
      swift_slowDealloc();
    }
    else
    {
      swift_bridgeObjectRelease_n();
      swift_bridgeObjectRelease_n();
    }
  }
  uint64_t v21 = i + 4;
  if (i + 4 < v51)
  {
    unint64_t v19 = *(void *)(v50 + 8 * v21);
    if (!v19)
    {
      while (1)
      {
        int64_t v20 = v21 + 1;
        if (__OFADD__(v21, 1)) {
          goto LABEL_38;
        }
        if (v20 >= v51) {
          goto LABEL_31;
        }
        unint64_t v19 = *(void *)(v50 + 8 * v20);
        ++v21;
        if (v19) {
          goto LABEL_28;
        }
      }
    }
    int64_t v20 = i + 4;
    goto LABEL_28;
  }
LABEL_31:
  swift_release();
  sub_100B9B554(v47);
  sub_100B9B554(v47);
  char v32 = Logger.logObject.getter();
  os_log_type_t v33 = static os_log_type_t.debug.getter();
  BOOL v34 = os_log_type_enabled(v32, v33);
  unint64_t v35 = (unint64_t)v48[202].isa;
  uint64_t v36 = (uint64_t)v48[201].isa;
  unint64_t v37 = (unint64_t)v48[189].isa;
  uint64_t v38 = (uint64_t)v48[188].isa;
  unint64_t v39 = (uint64_t *)v48[185].isa;
  if (v34)
  {
    uint64_t v53 = (uint64_t *)v48[185].isa;
    unint64_t v40 = (uint8_t *)swift_slowAlloc();
    v54[0] = swift_slowAlloc();
    *(_DWORD *)unint64_t v40 = 136315138;
    Swift::String v0 = v48;
    memcpy(__dst, v47, 0x160uLL);
    sub_100B9B554(v47);
    uint64_t v41 = String.init<A>(describing:)();
    v48[183].uint64_t isa = (Class)sub_1008FA0F0(v41, v42, v54);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    sub_100B9B6E0(v47);
    sub_100B9B6E0(v47);
    _os_log_impl((void *)&_mh_execute_header, v32, v33, "Pairing lock body %s", v40, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
    swift_release();
    sub_10001CFB8(v38, v37);
    sub_10098EFB0(v53);

    sub_10001CFB8(v36, v35);
    sub_100B9B6E0(v47);
  }
  else
  {
    sub_100B9B6E0(v47);
    sub_10001CFB8(v36, v35);
    sub_100B9B6E0(v47);
    sub_100B9B6E0(v47);
    swift_release();
    sub_10001CFB8(v38, v37);
    sub_10098EFB0(v39);
  }
  Class v43 = v0[202].isa;
  Class v44 = v0[201].isa;
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v45 = (uint64_t (*)(uint64_t, Class, Class))v0[1].isa;
  return v45(v49, v44, v43);
}

uint64_t sub_100B9AD2C()
{
  uint64_t v59 = v0;
  int64_t v1 = (int64_t)v0;
  unint64_t v2 = v0[209];
  uint64_t v3 = v0[208];
  unint64_t v4 = v0[207];
  uint64_t v5 = v0[206];
  sub_10001CFB8(v3, v2);
  sub_10001CFB8(v5, v4);
  unint64_t v6 = (unint64_t)&qword_101637000;
  if (qword_101637320 == -1) {
    goto LABEL_2;
  }
  while (1)
  {
    swift_once();
LABEL_2:
    uint64_t v7 = type metadata accessor for Logger();
    sub_100010324(v7, (uint64_t)qword_10170F098);
    swift_errorRetain();
    swift_errorRetain();
    uint64_t v8 = Logger.logObject.getter();
    os_log_type_t v9 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v8, v9))
    {
      uint64_t v10 = (uint8_t *)swift_slowAlloc();
      uint64_t v11 = (void *)swift_slowAlloc();
      *(_DWORD *)uint64_t v10 = 138543362;
      swift_errorRetain();
      uint64_t v12 = _swift_stdlib_bridgeErrorToNSError();
      *(void *)(v1 + 1472) = v12;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *uint64_t v11 = v12;
      swift_errorRelease();
      swift_errorRelease();
      _os_log_impl((void *)&_mh_execute_header, v8, v9, "Failed to generate attestation header: %{public}@.", v10, 0xCu);
      sub_10000588C((uint64_t *)&unk_101638EA0);
      swift_arrayDestroy();
      swift_slowDealloc();
      unint64_t v6 = 0x101637000;
      swift_slowDealloc();

      swift_errorRelease();
    }
    else
    {
      swift_errorRelease();
      swift_errorRelease();
      swift_errorRelease();
    }
    uint64_t v13 = *(void *)(v1 + 1600);
    if (*(void *)(v6 + 800) != -1) {
      swift_once();
    }
    int64_t v52 = (void *)v1;
    __dst = (void *)(v1 + 368);
    int64_t v51 = (uint64_t *)(v1 + 16);
    sub_100010324(v7, (uint64_t)qword_10170F098);
    unint64_t v14 = Logger.logObject.getter();
    os_log_type_t v15 = static os_log_type_t.debug.getter();
    uint64_t v53 = v13;
    if (os_log_type_enabled(v14, v15))
    {
      unint64_t v16 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)unint64_t v16 = 0;
      _os_log_impl((void *)&_mh_execute_header, v14, v15, "Pairing lock header:", v16, 2u);
      swift_slowDealloc();
    }
    uint64_t v49 = (uint64_t *)(v1 + 1464);

    uint64_t v54 = v13 + 64;
    uint64_t v17 = -1;
    uint64_t v18 = -1 << *(unsigned char *)(v13 + 32);
    if (-v18 < 64) {
      uint64_t v17 = ~(-1 << -(char)v18);
    }
    unint64_t v6 = v17 & *(void *)(v13 + 64);
    int64_t v55 = (unint64_t)(63 - v18) >> 6;
    swift_bridgeObjectRetain();
    int64_t v1 = 0;
    while (v6)
    {
      while (1)
      {
        unint64_t v19 = __clz(__rbit64(v6));
        v6 &= v6 - 1;
        unint64_t v20 = v19 | (v1 << 6);
LABEL_29:
        uint64_t v24 = 16 * v20;
        uint64_t v25 = (uint64_t *)(*(void *)(v13 + 48) + v24);
        uint64_t v27 = *v25;
        unint64_t v26 = v25[1];
        uint64_t v28 = (uint64_t *)(*(void *)(v13 + 56) + v24);
        uint64_t v30 = *v28;
        unint64_t v29 = v28[1];
        swift_bridgeObjectRetain_n();
        swift_bridgeObjectRetain_n();
        uint64_t v31 = Logger.logObject.getter();
        os_log_type_t v32 = static os_log_type_t.debug.getter();
        if (os_log_type_enabled(v31, v32)) {
          break;
        }
        swift_bridgeObjectRelease_n();
        swift_bridgeObjectRelease_n();

        if (!v6) {
          goto LABEL_15;
        }
      }
      uint64_t v33 = swift_slowAlloc();
      uint64_t v58 = swift_slowAlloc();
      *(_DWORD *)uint64_t v33 = 136315394;
      swift_bridgeObjectRetain();
      *(void *)(v33 + 4) = sub_1008FA0F0(v27, v26, &v58);
      swift_bridgeObjectRelease_n();
      *(_WORD *)(v33 + 12) = 2080;
      swift_bridgeObjectRetain();
      *(void *)(v33 + 14) = sub_1008FA0F0(v30, v29, &v58);
      swift_bridgeObjectRelease_n();
      _os_log_impl((void *)&_mh_execute_header, v31, v32, "%s: %s", (uint8_t *)v33, 0x16u);
      swift_arrayDestroy();
      swift_slowDealloc();
      uint64_t v13 = v53;
      swift_slowDealloc();
    }
LABEL_15:
    int64_t v21 = v1 + 1;
    if (__OFADD__(v1, 1))
    {
      __break(1u);
      goto LABEL_39;
    }
    if (v21 >= v55) {
      break;
    }
    unint64_t v22 = *(void *)(v54 + 8 * v21);
    ++v1;
    if (v22) {
      goto LABEL_28;
    }
    int64_t v1 = v21 + 1;
    if (v21 + 1 >= v55) {
      break;
    }
    unint64_t v22 = *(void *)(v54 + 8 * v1);
    if (v22) {
      goto LABEL_28;
    }
    int64_t v1 = v21 + 2;
    if (v21 + 2 >= v55) {
      break;
    }
    unint64_t v22 = *(void *)(v54 + 8 * v1);
    if (v22) {
      goto LABEL_28;
    }
    int64_t v23 = v21 + 3;
    if (v23 >= v55) {
      break;
    }
    unint64_t v22 = *(void *)(v54 + 8 * v23);
    if (v22)
    {
      int64_t v1 = v23;
LABEL_28:
      unint64_t v6 = (v22 - 1) & v22;
      unint64_t v20 = __clz(__rbit64(v22)) + (v1 << 6);
      goto LABEL_29;
    }
    while (1)
    {
      int64_t v1 = v23 + 1;
      if (__OFADD__(v23, 1)) {
        break;
      }
      if (v1 >= v55) {
        goto LABEL_32;
      }
      unint64_t v22 = *(void *)(v54 + 8 * v1);
      ++v23;
      if (v22) {
        goto LABEL_28;
      }
    }
LABEL_39:
    __break(1u);
  }
LABEL_32:
  swift_release();
  sub_100B9B554(v51);
  sub_100B9B554(v51);
  BOOL v34 = Logger.logObject.getter();
  os_log_type_t v35 = static os_log_type_t.debug.getter();
  BOOL v36 = os_log_type_enabled(v34, v35);
  unint64_t v37 = v52[202];
  uint64_t v38 = v52[201];
  unint64_t v39 = v52[189];
  uint64_t v40 = v52[188];
  uint64_t v41 = (uint64_t *)v52[185];
  if (v36)
  {
    unint64_t v57 = v52[202];
    uint64_t v56 = v52[201];
    unint64_t v42 = (uint8_t *)swift_slowAlloc();
    uint64_t v58 = swift_slowAlloc();
    *(_DWORD *)unint64_t v42 = 136315138;
    memcpy(__dst, v51, 0x160uLL);
    sub_100B9B554(v51);
    uint64_t v43 = String.init<A>(describing:)();
    uint64_t *v49 = sub_1008FA0F0(v43, v44, &v58);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    sub_100B9B6E0(v51);
    sub_100B9B6E0(v51);
    _os_log_impl((void *)&_mh_execute_header, v34, v35, "Pairing lock body %s", v42, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
    swift_release();
    sub_10001CFB8(v40, v39);
    sub_10098EFB0(v41);

    sub_10001CFB8(v56, v57);
    sub_100B9B6E0(v51);
  }
  else
  {
    sub_100B9B6E0(v51);
    sub_10001CFB8(v38, v37);
    sub_100B9B6E0(v51);
    sub_100B9B6E0(v51);
    swift_release();
    sub_10001CFB8(v40, v39);
    sub_10098EFB0(v41);
  }
  uint64_t v45 = v52[202];
  uint64_t v46 = v52[201];
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v47 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))v52[1];
  return v47(v53, v46, v45);
}

unint64_t sub_100B9B500()
{
  unint64_t result = qword_10165A2E8;
  if (!qword_10165A2E8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10165A2E8);
  }
  return result;
}

uint64_t *sub_100B9B554(uint64_t *a1)
{
  uint64_t v2 = a1[2];
  unint64_t v3 = a1[3];
  uint64_t v4 = a1[4];
  unint64_t v5 = a1[5];
  uint64_t v6 = a1[7];
  unint64_t v7 = a1[8];
  uint64_t v8 = a1[9];
  unint64_t v9 = a1[10];
  uint64_t v10 = a1[11];
  unint64_t v12 = a1[12];
  unint64_t v13 = a1[21];
  uint64_t v16 = a1[22];
  uint64_t v14 = a1[20];
  unint64_t v15 = a1[23];
  unint64_t v17 = a1[25];
  uint64_t v18 = a1[24];
  unint64_t v19 = a1[27];
  uint64_t v20 = a1[26];
  sub_1000361E0(*a1, a1[1]);
  sub_1000361E0(v2, v3);
  sub_100037A38(v4, v5);
  sub_1000361E0(v6, v7);
  sub_1000361E0(v8, v9);
  sub_1000361E0(v10, v12);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  sub_1000361E0(v14, v13);
  sub_1000361E0(v16, v15);
  sub_1000361E0(v18, v17);
  sub_1000361E0(v20, v19);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t *sub_100B9B6E0(uint64_t *a1)
{
  uint64_t v2 = a1[2];
  unint64_t v3 = a1[3];
  uint64_t v4 = a1[4];
  unint64_t v5 = a1[5];
  uint64_t v6 = a1[7];
  unint64_t v7 = a1[8];
  uint64_t v9 = a1[9];
  unint64_t v8 = a1[10];
  uint64_t v10 = a1[11];
  unint64_t v12 = a1[12];
  unint64_t v13 = a1[21];
  uint64_t v14 = a1[20];
  unint64_t v15 = a1[23];
  uint64_t v16 = a1[22];
  unint64_t v17 = a1[25];
  unint64_t v19 = a1[27];
  uint64_t v20 = a1[26];
  uint64_t v18 = a1[24];
  sub_10001CFB8(*a1, a1[1]);
  sub_10001CFB8(v2, v3);
  sub_100037A24(v4, v5);
  sub_10001CFB8(v6, v7);
  sub_10001CFB8(v9, v8);
  sub_10001CFB8(v10, v12);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_10001CFB8(v14, v13);
  sub_10001CFB8(v16, v15);
  sub_10001CFB8(v18, v17);
  sub_10001CFB8(v20, v19);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return a1;
}

ValueMetadata *type metadata accessor for AirPodsLEPairingLockCheckRequestContent()
{
  return &type metadata for AirPodsLEPairingLockCheckRequestContent;
}

ValueMetadata *type metadata accessor for AirPodsLEPairingLockCheckRequest()
{
  return &type metadata for AirPodsLEPairingLockCheckRequest;
}

unint64_t sub_100B9B888()
{
  unint64_t result = qword_10165A2F8;
  if (!qword_10165A2F8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10165A2F8);
  }
  return result;
}

unsigned char *storeEnumTagSinglePayload for AirPodsLEPairingLockCheckRequestContent.CodingKeys(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 23 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 23) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xE9) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xE8)
  {
    unsigned int v6 = ((a2 - 233) >> 8) + 1;
    *unint64_t result = a2 + 23;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x100B9B9A8);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 23;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for AirPodsLEPairingLockCheckRequestContent.CodingKeys()
{
  return &type metadata for AirPodsLEPairingLockCheckRequestContent.CodingKeys;
}

unint64_t sub_100B9B9E4()
{
  unint64_t result = qword_10165A300;
  if (!qword_10165A300)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10165A300);
  }
  return result;
}

unint64_t sub_100B9BA3C()
{
  unint64_t result = qword_10165A308;
  if (!qword_10165A308)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10165A308);
  }
  return result;
}

unint64_t sub_100B9BA94()
{
  unint64_t result = qword_10165A310;
  if (!qword_10165A310)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10165A310);
  }
  return result;
}

uint64_t sub_100B9BAE8(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 0x4E6E6F6973736573 && a2 == 0xEC00000065636E6FLL;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 12645 && a2 == 0xE200000000000000 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0xD000000000000013 && a2 == 0x80000001013EEBB0 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else if (a1 == 0x74617453636E7973 && a2 == 0xEA00000000007375 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 3;
  }
  else if (a1 == 1684628325 && a2 == 0xE400000000000000 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 4;
  }
  else if (a1 == 0x644970696863 && a2 == 0xE600000000000000 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 5;
  }
  else if (a1 == 0x754E6C6169726573 && a2 == 0xEC0000007265626DLL {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 6;
  }
  else if (a1 == 0x644974726170 && a2 == 0xE600000000000000 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 7;
  }
  else if (a1 == 0x6F636165426D756ELL && a2 == 0xEA0000000000736ELL {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 8;
  }
  else if (a1 == 0xD000000000000012 && a2 == 0x80000001013F4C90 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 9;
  }
  else if (a1 == 0xD00000000000001BLL && a2 == 0x8000000101408C00 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 10;
  }
  else if (a1 == 0x6E55646572616873 && a2 == 0xEA00000000007469 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 11;
  }
  else if (a1 == 0x314B64656573 && a2 == 0xE600000000000000 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 12;
  }
  else if (a1 == 0x726F737365636361 && a2 == 0xEF74736574744179 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 13;
  }
  else if (a1 == 0x726F737365636361 && a2 == 0xED00006E67695379 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 14;
  }
  else if (a1 == 0xD000000000000014 && a2 == 0x8000000101408C20 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 15;
  }
  else if (a1 == 0xD000000000000011 && a2 == 0x80000001013F6580 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 16;
  }
  else if (a1 == 0x69634572656E776FLL && a2 == 0xE900000000000064 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 17;
  }
  else if (a1 == 0x69684372656E776FLL && a2 == 0xEB00000000644970 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 18;
  }
  else if (a1 == 0x7372655663657073 && a2 == 0xEB000000006E6F69 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 19;
  }
  else if (a1 == 0x657261776D726966 && a2 == 0xEF6E6F6973726556 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 20;
  }
  else if (a1 == 0x49746375646F7270 && a2 == 0xE900000000000064 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 21;
  }
  else if (a1 == 0x6449726F646E6576 && a2 == 0xE800000000000000 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 22;
  }
  else if (a1 == 0xD000000000000015 && a2 == 0x8000000101408C40)
  {
    swift_bridgeObjectRelease();
    return 23;
  }
  else
  {
    char v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v6) {
      return 23;
    }
    else {
      return 24;
    }
  }
}

uint64_t sub_100B9C4C4()
{
  type metadata accessor for PropertyListDecoder();
  swift_allocObject();
  uint64_t v1 = PropertyListDecoder.init()();
  sub_10000588C(&qword_101654A30);
  sub_10000588C(&qword_101645808);
  sub_100771D58();
  dispatch thunk of PropertyListDecoder.decode<A>(_:from:)();
  swift_release();
  if (!v0)
  {
    if (*(void *)(v4 + 16))
    {
      uint64_t v1 = *(void *)(v4 + 32);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
    }
    else
    {
      swift_bridgeObjectRelease();
      uint64_t v1 = sub_10000588C(&qword_10165A788);
      sub_100062734(&qword_10165A790, &qword_10165A788);
      swift_allocError();
      *int v3 = 0;
      swift_willThrow();
    }
  }
  return v1;
}

uint64_t sub_100B9C60C@<X0>(uint64_t a1@<X8>)
{
  type metadata accessor for PropertyListDecoder();
  swift_allocObject();
  PropertyListDecoder.init()();
  sub_10000588C(&qword_101641CA0);
  sub_10000588C(&qword_101645808);
  sub_100BB8640();
  dispatch thunk of PropertyListDecoder.decode<A>(_:from:)();
  uint64_t result = swift_release();
  if (!v1)
  {
    if (*(void *)(v12 + 16))
    {
      uint64_t v4 = *(void *)(v12 + 32);
      unint64_t v5 = *(void *)(v12 + 40);
      uint64_t v6 = *(void *)(v12 + 48);
      char v7 = *(unsigned char *)(v12 + 56);
      uint64_t v8 = *(void *)(v12 + 72);
      uint64_t v11 = *(void *)(v12 + 64);
      uint64_t v9 = *(void *)(v12 + 80);
      sub_1000361E0(v4, v5);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      uint64_t result = swift_bridgeObjectRelease();
      *(void *)a1 = v4;
      *(void *)(a1 + 8) = v5;
      *(void *)(a1 + 16) = v6;
      *(unsigned char *)(a1 + 24) = v7;
      *(void *)(a1 + 32) = v11;
      *(void *)(a1 + 40) = v8;
      *(void *)(a1 + 48) = v9;
    }
    else
    {
      swift_bridgeObjectRelease();
      sub_10000588C(&qword_10165A788);
      sub_100062734(&qword_10165A790, &qword_10165A788);
      swift_allocError();
      *uint64_t v10 = 0;
      return swift_willThrow();
    }
  }
  return result;
}

uint64_t sub_100B9C7A8(uint64_t a1, unint64_t a2)
{
  uint64_t v3 = v2;
  uint64_t v6 = type metadata accessor for URL();
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  uint64_t v9 = (char *)&v26 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v27 = type metadata accessor for UUID();
  uint64_t v10 = *(void *)(v27 - 8);
  __chkstk_darwin(v27);
  uint64_t v12 = (char *)&v26 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v26 = a1;
  uint64_t v13 = String.utf8Data.getter();
  unint64_t v15 = v14;
  v29[0] = v13;
  v29[1] = v14;
  sub_1000362FC();
  DataProtocol.stableUUID.getter();
  sub_10001CFB8(v13, v15);
  uint64_t v16 = *(void *)(*(void *)(v3 + 32) + 160);
  uint64_t v17 = qword_101636FA8;
  swift_retain();
  if (v17 != -1) {
    swift_once();
  }
  uint64_t v18 = sub_100010324(v6, (uint64_t)qword_10170EA78);
  uint64_t v19 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v7 + 16))(v9, v18, v6);
  __chkstk_darwin(v19);
  *(&v26 - 4) = v16;
  *(&v26 - 3) = (uint64_t)v12;
  *(&v26 - 2) = (uint64_t)v9;
  OS_dispatch_queue.sync<A>(execute:)();
  int v20 = LOBYTE(v29[0]);
  (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
  swift_release();
  if (qword_101637070 != -1) {
    swift_once();
  }
  uint64_t v21 = type metadata accessor for Logger();
  sub_100010324(v21, (uint64_t)qword_10170EC30);
  swift_bridgeObjectRetain_n();
  unint64_t v22 = Logger.logObject.getter();
  os_log_type_t v23 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v22, v23))
  {
    uint64_t v24 = swift_slowAlloc();
    v29[0] = swift_slowAlloc();
    *(_DWORD *)uint64_t v24 = 136315394;
    swift_bridgeObjectRetain();
    uint64_t v28 = sub_1008FA0F0(v26, a2, v29);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    *(_WORD *)(v24 + 12) = 1024;
    LODWORD(v28) = v20;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl((void *)&_mh_execute_header, v22, v23, "Removed sharedkeys for %s with result %{BOOL}d", (uint8_t *)v24, 0x12u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    swift_bridgeObjectRelease_n();
  }

  return (*(uint64_t (**)(char *, uint64_t))(v10 + 8))(v12, v27);
}

uint64_t sub_100B9CBAC(uint64_t a1, void *a2, void *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v6 = v5;
  uint64_t v104 = type metadata accessor for BeaconSharingSessionContext();
  __chkstk_darwin(v104);
  uint64_t v105 = (char *)&v93 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v98 = sub_10000588C(&qword_101645778);
  uint64_t v97 = *(void *)(v98 - 8);
  __chkstk_darwin(v98);
  uint64_t v96 = (char *)&v93 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = sub_10000588C(&qword_101645780);
  uint64_t v100 = *(void *)(v14 - 8);
  uint64_t v101 = v14;
  __chkstk_darwin(v14);
  uint64_t v99 = (char *)&v93 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = type metadata accessor for String.Encoding();
  __chkstk_darwin(v16 - 8);
  uint64_t v113 = 0;
  unint64_t v114 = 0;
  uint64_t v107 = a2;
  swift_bridgeObjectRetain();
  id v17 = [a3 pushIdentifiers];
  sub_10000588C(&qword_101654A30);
  uint64_t v18 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)();

  uint64_t v19 = *(void *)(v18 + 16);
  uint64_t v106 = v6;
  uint64_t v102 = a4;
  uint64_t v103 = a5;
  if (!v19 || (uint64_t v20 = sub_100723FF4(a1, (uint64_t)v107), (v21 & 1) == 0))
  {
    swift_bridgeObjectRelease();
LABEL_11:
    uint64_t v26 = swift_bridgeObjectRelease();
    goto LABEL_12;
  }
  uint64_t v22 = *(void *)(*(void *)(v18 + 56) + 8 * v20);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (!*(void *)(v22 + 16)) {
    goto LABEL_11;
  }
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v23 = Data.init(base64Encoded:options:)();
  unint64_t v25 = v24;
  uint64_t v26 = swift_bridgeObjectRelease();
  if (v25 >> 60 != 15)
  {
    static String.Encoding.utf8.getter();
    uint64_t v95 = v23;
    uint64_t v113 = String.init(data:encoding:)();
    unint64_t v114 = v27;
    if (qword_101636B00 != -1) {
      swift_once();
    }
    uint64_t v28 = type metadata accessor for Logger();
    sub_100010324(v28, (uint64_t)qword_10170DE98);
    unint64_t v29 = Logger.logObject.getter();
    os_log_type_t v30 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v29, v30))
    {
      uint64_t v31 = (uint8_t *)swift_slowAlloc();
      uint64_t v109 = (void *)swift_slowAlloc();
      *(_DWORD *)uint64_t v31 = 136315138;
      uint64_t v94 = v31 + 4;
      swift_beginAccess();
      uint64_t v111 = v113;
      unint64_t v112 = v114;
      swift_bridgeObjectRetain();
      sub_10000588C(&qword_101644320);
      uint64_t v32 = String.init<A>(describing:)();
      uint64_t v111 = sub_1008FA0F0(v32, v33, (uint64_t *)&v109);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v29, v30, "liveLocations: handle provided from server %s", v31, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    sub_100037A24(v95, v25);
    goto LABEL_18;
  }
LABEL_12:
  if (qword_101637080 != -1) {
    uint64_t v26 = swift_once();
  }
  uint64_t v34 = qword_10170EC60;
  __chkstk_darwin(v26);
  *(&v93 - 4) = v34;
  *(&v93 - 3) = a1;
  *(&v93 - 2) = (uint64_t)v107;
  swift_retain();
  sub_10000588C(&qword_101644320);
  OS_dispatch_queue.sync<A>(execute:)();
  swift_release();
  uint64_t v35 = v111;
  unint64_t v36 = v112;
  swift_bridgeObjectRelease();
  uint64_t v113 = v35;
  unint64_t v114 = v36;
  if (qword_101636B00 != -1) {
    swift_once();
  }
  uint64_t v37 = type metadata accessor for Logger();
  sub_100010324(v37, (uint64_t)qword_10170DE98);
  unint64_t v29 = Logger.logObject.getter();
  os_log_type_t v38 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v29, v38))
  {
    unint64_t v39 = (uint8_t *)swift_slowAlloc();
    uint64_t v109 = (void *)swift_slowAlloc();
    *(_DWORD *)unint64_t v39 = 136315138;
    swift_beginAccess();
    uint64_t v111 = v113;
    unint64_t v112 = v114;
    swift_bridgeObjectRetain();
    uint64_t v40 = String.init<A>(describing:)();
    uint64_t v111 = sub_1008FA0F0(v40, v41, (uint64_t *)&v109);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v29, v38, "liveLocations: no handle provided by server. Looking at fmf data %s", v39, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
LABEL_18:

  swift_beginAccess();
  if (!v114)
  {
    if (qword_101636B00 != -1) {
      swift_once();
    }
    uint64_t v42 = type metadata accessor for Logger();
    sub_100010324(v42, (uint64_t)qword_10170DE98);
    uint64_t v43 = Logger.logObject.getter();
    os_log_type_t v44 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v43, v44))
    {
      uint64_t v45 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v45 = 0;
      _os_log_impl((void *)&_mh_execute_header, v43, v44, "liveLocations: no handle found in cache. Checking fmf directly", v45, 2u);
      swift_slowDealloc();
    }

    if (qword_101637080 != -1) {
      swift_once();
    }
    swift_retain();
    sub_10000588C(&qword_10164D1C0);
    OS_dispatch_queue.sync<A>(execute:)();
    swift_release();
    uint64_t v46 = v109;
    uint64_t v47 = v109[2];
    if (v47)
    {
      uint64_t v49 = v109[4];
      unint64_t v48 = v109[5];
      if (v109[7] == a1 && (void *)v109[8] == v107 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
      {
LABEL_37:
        swift_bridgeObjectRetain();
        swift_bridgeObjectRelease();
        uint64_t v113 = v49;
        unint64_t v114 = v48;
      }
      else
      {
        uint64_t v50 = 0;
        int64_t v51 = v46 + 13;
        uint64_t v52 = v47 - 1;
        while (v52 != v50)
        {
          if ((unint64_t)++v50 >= v46[2])
          {
            __break(1u);
            goto LABEL_62;
          }
          uint64_t v49 = *(v51 - 4);
          unint64_t v48 = *(v51 - 3);
          if (*(v51 - 1) != a1 || *v51 != (void)v107)
          {
            v51 += 5;
            if ((_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0) {
              continue;
            }
          }
          goto LABEL_37;
        }
      }
    }
    swift_bridgeObjectRelease();
  }
  if (qword_101636B00 != -1) {
    swift_once();
  }
  uint64_t v54 = type metadata accessor for Logger();
  uint64_t v55 = sub_100010324(v54, (uint64_t)qword_10170DE98);
  uint64_t v56 = v113;
  unint64_t v57 = v114;
  swift_bridgeObjectRetain_n();
  swift_bridgeObjectRetain_n();
  uint64_t v58 = Logger.logObject.getter();
  os_log_type_t v59 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v58, v59))
  {
    uint64_t v60 = swift_slowAlloc();
    uint64_t v95 = v55;
    uint64_t v61 = v60;
    uint64_t v62 = (void *)swift_slowAlloc();
    *(_DWORD *)uint64_t v61 = 141558787;
    uint64_t v108 = 1752392040;
    uint64_t v109 = v62;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v61 + 12) = 2081;
    if (v57) {
      uint64_t v63 = v56;
    }
    else {
      uint64_t v63 = 7104878;
    }
    uint64_t v64 = a1;
    if (v57) {
      unint64_t v65 = v57;
    }
    else {
      unint64_t v65 = 0xE300000000000000;
    }
    swift_bridgeObjectRetain();
    uint64_t v108 = sub_1008FA0F0(v63, v65, (uint64_t *)&v109);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    a1 = v64;
    swift_bridgeObjectRelease();
    *(_WORD *)(v61 + 22) = 2160;
    uint64_t v108 = 1752392040;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v61 + 32) = 2081;
    unint64_t v66 = (unint64_t)v107;
    swift_bridgeObjectRetain();
    uint64_t v108 = sub_1008FA0F0(v64, v66, (uint64_t *)&v109);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    _os_log_impl((void *)&_mh_execute_header, v58, v59, "liveLocations: Handle identifier %{private,mask.hash}s for findMyId %{private,mask.hash}s", (uint8_t *)v61, 0x2Au);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    unint64_t v67 = v114;
    if (!v114) {
      goto LABEL_55;
    }
  }
  else
  {

    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease_n();
    unint64_t v67 = v114;
    if (!v114)
    {
LABEL_55:
      if (qword_101637440 != -1) {
LABEL_62:
      }
        swift_once();
      uint64_t v109 = 0;
      uint64_t v110 = 0xE000000000000000;
      swift_retain();
      _StringGuts.grow(_:)(46);
      swift_bridgeObjectRelease();
      uint64_t v109 = (void *)0xD00000000000002CLL;
      uint64_t v110 = 0x8000000101415980;
      v87._countAndFlagsBits = a1;
      v87._object = v107;
      String.append(_:)(v87);
      sub_1010DDDB8((uint64_t)v109, v110);
      swift_release();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRetain_n();
      uint64_t v88 = Logger.logObject.getter();
      os_log_type_t v89 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v88, v89))
      {
        uint64_t v90 = swift_slowAlloc();
        uint64_t v91 = (void *)swift_slowAlloc();
        *(_DWORD *)uint64_t v90 = 141558275;
        uint64_t v108 = 1752392040;
        uint64_t v109 = v91;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        *(_WORD *)(v90 + 12) = 2081;
        unint64_t v92 = (unint64_t)v107;
        swift_bridgeObjectRetain();
        uint64_t v108 = sub_1008FA0F0(a1, v92, (uint64_t *)&v109);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease_n();
        _os_log_impl((void *)&_mh_execute_header, v88, v89, "liveLocations: Unable to create a MessagingDestination for findMyId %{private,mask.hash}s", (uint8_t *)v90, 0x16u);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
      }
      else
      {

        swift_bridgeObjectRelease_n();
      }
      return swift_bridgeObjectRelease();
    }
  }
  uint64_t v68 = v113;
  swift_bridgeObjectRetain_n();
  _s12searchpartyd20MessagingDestinationV6stringACSgSS_tcfC_0();
  if (!v71)
  {
    swift_bridgeObjectRelease();
    goto LABEL_55;
  }
  uint64_t v94 = (uint8_t *)v68;
  uint64_t v95 = a1;
  uint64_t v72 = (uint64_t)v105;
  uint64_t v73 = v106;
  uint64_t v74 = *(void *)(v106 + 40);
  *uint64_t v105 = v69;
  *(void *)(v72 + 8) = v70;
  *(void *)(v72 + 16) = v71;
  uint64_t result = swift_storeEnumTagMultiPayload();
  if (*(void *)(v74 + 440))
  {
    swift_retain();
    swift_bridgeObjectRetain();
    swift_retain();
    uint64_t v76 = (void *)dispatch thunk of AsynchronousCache.value(for:)();
    swift_release();
    uint64_t v109 = v76;
    sub_10000588C(&qword_101645788);
    sub_100062734(&qword_101645790, &qword_101645788);
    unint64_t v77 = (void *)Publisher.eraseToAnyPublisher()();
    swift_release();
    sub_100BB66F4(v72, (uint64_t (*)(void))type metadata accessor for BeaconSharingSessionContext);
    swift_release();
    swift_bridgeObjectRelease();
    uint64_t v109 = v77;
    sub_10000588C(&qword_101645798);
    uint64_t v78 = v96;
    Publisher.map<A>(_:)();
    swift_release();
    sub_10000588C(&qword_1016457A0);
    sub_100062734(&qword_1016457A8, &qword_101645778);
    sub_100062734(&qword_1016457B0, &qword_1016457A0);
    unint64_t v79 = v99;
    uint64_t v80 = v98;
    Publisher.catch<A>(_:)();
    (*(void (**)(char *, uint64_t))(v97 + 8))(v78, v80);
    unint64_t v81 = (void *)swift_allocObject();
    v81[2] = v94;
    v81[3] = v67;
    uint64_t v82 = v107;
    v81[4] = v95;
    v81[5] = v82;
    uint64_t v83 = v102;
    uint64_t v84 = v103;
    v81[6] = v73;
    v81[7] = v83;
    v81[8] = v84;
    sub_100062734(&qword_1016457B8, &qword_101645780);
    swift_bridgeObjectRetain();
    swift_retain();
    swift_retain();
    uint64_t v85 = v101;
    uint64_t v86 = Publisher<>.sink(receiveValue:)();
    swift_release();
    (*(void (**)(char *, uint64_t))(v100 + 8))(v79, v85);
    *(void *)(v73 + 104) = v86;
    swift_release();
    return swift_bridgeObjectRelease();
  }
  __break(1u);
  return result;
}

uint64_t sub_100B9DBE4(uint64_t a1)
{
  return sub_100B9ECD0(a1, qword_10170EA78);
}

void sub_100B9DC08()
{
  uint64_t v1 = type metadata accessor for Date();
  uint64_t v2 = *(void *)(v1 - 8);
  __chkstk_darwin(v1);
  uint64_t v4 = (char *)v22 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = sub_10000588C((uint64_t *)&unk_10163AC90);
  __chkstk_darwin(v5 - 8);
  uint64_t v7 = (char *)v22 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for UUID();
  sub_100BB245C(&qword_10163BC60, (void (*)(uint64_t))&type metadata accessor for UUID);
  dispatch thunk of Hashable.hash(into:)();
  uint64_t v8 = (int *)type metadata accessor for SecureLocationsCachedSharedKey(0);
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  uint64_t v9 = (uint64_t *)(v0 + v8[6]);
  unint64_t v10 = v9[1];
  if (v10 >> 60 == 15)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    uint64_t v11 = *v9;
    Hasher._combine(_:)(1u);
    sub_1000361E0(v11, v10);
    Data.hash(into:)();
    sub_100037A24(v11, v10);
  }
  uint64_t v12 = (uint64_t *)(v0 + v8[7]);
  unint64_t v13 = v12[1];
  if (v13 >> 60 == 15)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    uint64_t v14 = *v12;
    Hasher._combine(_:)(1u);
    sub_1000361E0(v14, v13);
    Data.hash(into:)();
    sub_100037A24(v14, v13);
  }
  uint64_t v15 = (unsigned __int8 *)(v0 + v8[8]);
  if (*((void *)v15 + 2))
  {
    v22[1] = *((void *)v15 + 1);
    uint64_t v16 = v7;
    uint64_t v17 = v1;
    uint64_t v18 = v2;
    uint64_t v19 = v4;
    Swift::UInt v20 = *v15;
    Hasher._combine(_:)(1u);
    Swift::UInt v21 = v20;
    uint64_t v4 = v19;
    uint64_t v2 = v18;
    uint64_t v1 = v17;
    uint64_t v7 = v16;
    Hasher._combine(_:)(v21);
    swift_bridgeObjectRetain();
    String.hash(into:)();
    swift_bridgeObjectRelease();
  }
  else
  {
    Hasher._combine(_:)(0);
  }
  if (*(void *)(v0 + v8[9] + 8))
  {
    Hasher._combine(_:)(1u);
    swift_bridgeObjectRetain();
    String.hash(into:)();
    swift_bridgeObjectRelease();
  }
  else
  {
    Hasher._combine(_:)(0);
  }
  Hasher._combine(_:)(*(void *)(v0 + v8[10]));
  sub_10001D074(v0 + v8[11], (uint64_t)v7, (uint64_t *)&unk_10163AC90);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v2 + 48))(v7, 1, v1) == 1)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v2 + 32))(v4, v7, v1);
    Hasher._combine(_:)(1u);
    sub_100BB245C((unint64_t *)&unk_10163ADF0, (void (*)(uint64_t))&type metadata accessor for Date);
    dispatch thunk of Hashable.hash(into:)();
    (*(void (**)(char *, uint64_t))(v2 + 8))(v4, v1);
  }
}

unint64_t sub_100B9E018(char a1)
{
  unint64_t result = 0x696669746E656469;
  switch(a1)
  {
    case 1:
      unint64_t result = 0x6449794D646E6966;
      break;
    case 2:
    case 5:
      unint64_t result = 0xD000000000000015;
      break;
    case 3:
      unint64_t result = 0xD000000000000014;
      break;
    case 4:
      unint64_t result = 0x6E614872656E776FLL;
      break;
    case 6:
      unint64_t result = 0xD000000000000013;
      break;
    case 7:
      unint64_t result = 0xD00000000000001ALL;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t sub_100B9E128(void *a1)
{
  uint64_t v3 = v1;
  uint64_t v5 = sub_10000588C(&qword_10165A898);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v8 = (char *)&v13 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10001CD44(a1, a1[3]);
  sub_100BB9BF8();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  LOBYTE(v13) = 0;
  type metadata accessor for UUID();
  sub_100BB245C(&qword_10163B040, (void (*)(uint64_t))&type metadata accessor for UUID);
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  if (!v2)
  {
    uint64_t v9 = (int *)type metadata accessor for SecureLocationsCachedSharedKey(0);
    LOBYTE(v13) = 1;
    KeyedEncodingContainer.encode(_:forKey:)();
    long long v13 = *(_OWORD *)(v3 + v9[6]);
    char v15 = 2;
    sub_10043C164();
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)();
    long long v13 = *(_OWORD *)(v3 + v9[7]);
    char v15 = 3;
    sub_10043CBC4();
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)();
    unint64_t v10 = (long long *)(v3 + v9[8]);
    uint64_t v11 = *((void *)v10 + 2);
    long long v13 = *v10;
    uint64_t v14 = v11;
    char v15 = 4;
    sub_1000C7FF0();
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)();
    LOBYTE(v13) = 5;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
    *(void *)&long long v13 = *(void *)(v3 + v9[10]);
    char v15 = 6;
    sub_100BB254C();
    KeyedEncodingContainer.encode<A>(_:forKey:)();
    LOBYTE(v13) = 7;
    type metadata accessor for Date();
    sub_100BB245C((unint64_t *)&unk_10163ACE0, (void (*)(uint64_t))&type metadata accessor for Date);
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
}

uint64_t sub_100B9E4A8@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v35 = a2;
  uint64_t v3 = sub_10000588C((uint64_t *)&unk_10163AC90);
  __chkstk_darwin(v3 - 8);
  uint64_t v5 = (char *)&v34 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = type metadata accessor for UUID();
  uint64_t v38 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  uint64_t v37 = (char *)&v34 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v40 = sub_10000588C(&qword_10165A888);
  uint64_t v36 = *(void *)(v40 - 8);
  __chkstk_darwin(v40);
  uint64_t v9 = (char *)&v34 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = type metadata accessor for SecureLocationsCachedSharedKey(0);
  uint64_t v11 = (int *)__chkstk_darwin(v10);
  long long v13 = (char *)&v34 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v47 = &v13[v11[6]];
  *(_OWORD *)uint64_t v47 = xmmword_101347BB0;
  unint64_t v41 = &v13[v11[7]];
  *(_OWORD *)unint64_t v41 = xmmword_101347BB0;
  uint64_t v14 = &v13[v11[8]];
  *(void *)uint64_t v14 = 0;
  *((void *)v14 + 1) = 0;
  uint64_t v42 = v14;
  *((void *)v14 + 2) = 0;
  char v15 = &v13[v11[9]];
  *(void *)char v15 = 0;
  *((void *)v15 + 1) = 0;
  uint64_t v45 = v15;
  uint64_t v16 = (uint64_t)&v13[v11[11]];
  uint64_t v17 = type metadata accessor for Date();
  uint64_t v18 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v17 - 8) + 56);
  uint64_t v43 = v16;
  v18(v16, 1, 1, v17);
  uint64_t v19 = a1[3];
  os_log_type_t v44 = a1;
  sub_10001CD44(a1, v19);
  sub_100BB9BF8();
  unint64_t v39 = v9;
  uint64_t v20 = (uint64_t)v46;
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v20)
  {
    uint64_t v23 = v41;
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)v44);
    uint64_t v24 = v43;
    sub_100037A24(*(void *)v47, *((void *)v47 + 1));
    sub_100037A24(*(void *)v23, *((void *)v23 + 1));
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    return sub_10001DAB4(v24, (uint64_t *)&unk_10163AC90);
  }
  else
  {
    uint64_t v34 = v17;
    uint64_t v46 = v5;
    uint64_t v21 = v36;
    LOBYTE(v48) = 0;
    sub_100BB245C((unint64_t *)&qword_10163B010, (void (*)(uint64_t))&type metadata accessor for UUID);
    uint64_t v22 = v37;
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    (*(void (**)(char *, char *, uint64_t))(v38 + 32))(v13, v22, v6);
    LOBYTE(v48) = 1;
    uint64_t v25 = KeyedDecodingContainer.decode(_:forKey:)();
    uint64_t v26 = (uint64_t *)v45;
    unint64_t v27 = (uint64_t *)&v13[*(int *)(v10 + 20)];
    uint64_t *v27 = v25;
    v27[1] = v28;
    char v50 = 2;
    sub_10043C110();
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
    os_log_type_t v30 = v41;
    unint64_t v29 = v42;
    *(_OWORD *)uint64_t v47 = v48;
    char v50 = 3;
    sub_10043CB70();
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
    *(_OWORD *)os_log_type_t v30 = v48;
    char v50 = 4;
    sub_1000C8098();
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
    uint64_t v31 = v49;
    *(_OWORD *)unint64_t v29 = v48;
    *((void *)v29 + 2) = v31;
    LOBYTE(v48) = 5;
    *uint64_t v26 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
    v26[1] = v32;
    char v50 = 6;
    sub_100BB24F8();
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    *(void *)&v13[*(int *)(v10 + 40)] = v48;
    LOBYTE(v48) = 7;
    sub_100BB245C(&qword_10163ACC0, (void (*)(uint64_t))&type metadata accessor for Date);
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
    (*(void (**)(char *, uint64_t))(v21 + 8))(v39, v40);
    sub_100062604((uint64_t)v46, v43, (uint64_t *)&unk_10163AC90);
    sub_100BB7A10((uint64_t)v13, v35, type metadata accessor for SecureLocationsCachedSharedKey);
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)v44);
    return sub_100BB66F4((uint64_t)v13, type metadata accessor for SecureLocationsCachedSharedKey);
  }
}

unint64_t sub_100B9EB50()
{
  return sub_100B9E018(*v0);
}

uint64_t sub_100B9EB58@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_100BB6754(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_100B9EB80(uint64_t a1)
{
  unint64_t v2 = sub_100BB9BF8();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_100B9EBBC(uint64_t a1)
{
  unint64_t v2 = sub_100BB9BF8();

  return CodingKey.debugDescription.getter(a1, v2);
}

Swift::Int sub_100B9EBF8()
{
  return Hasher._finalize()();
}

Swift::Int sub_100B9EC3C()
{
  return Hasher._finalize()();
}

uint64_t sub_100B9EC78@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_100B9E4A8(a1, a2);
}

uint64_t sub_100B9EC90(void *a1)
{
  return sub_100B9E128(a1);
}

uint64_t sub_100B9ECAC(uint64_t a1)
{
  return sub_100B9ECD0(a1, qword_10170EA90);
}

uint64_t sub_100B9ECD0(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = type metadata accessor for URL();
  uint64_t v4 = *(void *)(v3 - 8);
  uint64_t v5 = __chkstk_darwin(v3);
  uint64_t v7 = (char *)&v9 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10001E384(v5, a2);
  sub_100010324(v3, (uint64_t)a2);
  type metadata accessor for BeaconStore(0);
  sub_100A9DB34((uint64_t)v7);
  URL.appendingPathComponent(_:isDirectory:)();
  return (*(uint64_t (**)(char *, uint64_t))(v4 + 8))(v7, v3);
}

uint64_t sub_100B9EDE8(void *a1)
{
  uint64_t v3 = v1;
  uint64_t v5 = sub_10000588C(&qword_10165A740);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v8 = (char *)&v13 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10001CD44(a1, a1[3]);
  sub_100BB24A4();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  LOBYTE(v15) = 0;
  type metadata accessor for URL();
  sub_100BB245C(&qword_10164BCE0, (void (*)(uint64_t))&type metadata accessor for URL);
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  if (!v2)
  {
    uint64_t v9 = type metadata accessor for SecureLocationsCachedSharingKey(0);
    LOBYTE(v15) = 1;
    type metadata accessor for UUID();
    sub_100BB245C(&qword_10163B040, (void (*)(uint64_t))&type metadata accessor for UUID);
    KeyedEncodingContainer.encode<A>(_:forKey:)();
    uint64_t v10 = (long long *)(v3 + *(int *)(v9 + 24));
    long long v11 = v10[1];
    long long v15 = *v10;
    long long v16 = v11;
    long long v17 = v10[2];
    char v14 = 2;
    sub_100A99DB4();
    KeyedEncodingContainer.encode<A>(_:forKey:)();
    *(void *)&long long v15 = *(void *)(v3 + *(int *)(v9 + 28));
    char v14 = 3;
    sub_100BB254C();
    KeyedEncodingContainer.encode<A>(_:forKey:)();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
}

uint64_t sub_100B9F080@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v25 = a2;
  uint64_t v4 = type metadata accessor for UUID();
  uint64_t v29 = *(void *)(v4 - 8);
  uint64_t v30 = v4;
  __chkstk_darwin(v4);
  uint64_t v26 = (char *)&v25 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = type metadata accessor for URL();
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  uint64_t v9 = (char *)&v25 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = sub_10000588C(&qword_10165A728);
  uint64_t v27 = *(void *)(v10 - 8);
  uint64_t v28 = v10;
  __chkstk_darwin(v10);
  uint64_t v12 = (char *)&v25 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v31 = type metadata accessor for SecureLocationsCachedSharingKey(0);
  __chkstk_darwin(v31);
  char v14 = (char *)&v25 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_101636FB0 != -1) {
    swift_once();
  }
  uint64_t v15 = sub_100010324(v6, (uint64_t)qword_10170EA90);
  (*(void (**)(char *, uint64_t, uint64_t))(v7 + 16))(v14, v15, v6);
  uint64_t v16 = a1[3];
  uint64_t v32 = a1;
  sub_10001CD44(a1, v16);
  sub_100BB24A4();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v2)
  {
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)v32);
    return (*(uint64_t (**)(char *, uint64_t))(v7 + 8))(v14, v6);
  }
  else
  {
    LOBYTE(v33) = 0;
    sub_100BB245C(&qword_10164BCD0, (void (*)(uint64_t))&type metadata accessor for URL);
    uint64_t v17 = v28;
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    (*(void (**)(char *, char *, uint64_t))(v7 + 40))(v14, v9, v6);
    LOBYTE(v33) = 1;
    sub_100BB245C((unint64_t *)&qword_10163B010, (void (*)(uint64_t))&type metadata accessor for UUID);
    uint64_t v18 = v26;
    uint64_t v19 = v30;
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    uint64_t v20 = v18;
    uint64_t v21 = v31;
    (*(void (**)(char *, char *, uint64_t))(v29 + 32))(&v14[*(int *)(v31 + 20)], v20, v19);
    char v36 = 2;
    sub_100A99D0C();
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    uint64_t v22 = &v14[*(int *)(v21 + 24)];
    long long v23 = v34;
    *(_OWORD *)uint64_t v22 = v33;
    *((_OWORD *)v22 + 1) = v23;
    *((_OWORD *)v22 + 2) = v35;
    char v36 = 3;
    sub_100BB24F8();
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    (*(void (**)(char *, uint64_t))(v27 + 8))(v12, v17);
    *(void *)&v14[*(int *)(v21 + 28)] = v33;
    sub_100BB7A10((uint64_t)v14, v25, type metadata accessor for SecureLocationsCachedSharingKey);
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)v32);
    return sub_100BB66F4((uint64_t)v14, type metadata accessor for SecureLocationsCachedSharingKey);
  }
}

uint64_t sub_100B9F63C()
{
  uint64_t result = 0x614264726F636572;
  switch(*v0)
  {
    case 1:
      uint64_t result = 0x696669746E656469;
      break;
    case 2:
      uint64_t result = 0x4B676E6972616873;
      break;
    case 3:
      uint64_t result = 0x6E49646572616873;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t sub_100B9F6EC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_100BB6A90(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_100B9F714(uint64_t a1)
{
  unint64_t v2 = sub_100BB24A4();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_100B9F750(uint64_t a1)
{
  unint64_t v2 = sub_100BB24A4();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_100B9F78C@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_100B9F080(a1, a2);
}

uint64_t sub_100B9F7A4(void *a1)
{
  return sub_100B9EDE8(a1);
}

void *sub_100B9F7BC(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2;
  uint64_t v30 = a1;
  uint64_t v31 = a2;
  uint64_t v4 = type metadata accessor for OS_dispatch_queue.Attributes();
  __chkstk_darwin(v4);
  uint64_t v5 = type metadata accessor for DispatchQoS();
  __chkstk_darwin(v5 - 8);
  uint64_t v27 = (char *)&v25 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v36 = type metadata accessor for OS_dispatch_queue.AutoreleaseFrequency();
  uint64_t v7 = *(void *)(v36 - 8);
  __chkstk_darwin(v36);
  uint64_t v9 = (char *)&v25 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  unint64_t v28 = sub_10000584C();
  v2[2] = 0;
  v2[3] = 0;
  unsigned int v39 = enum case for OS_dispatch_queue.AutoreleaseFrequency.workItem(_:);
  uint64_t v10 = *(void (**)(void))(v7 + 104);
  uint64_t v38 = v7 + 104;
  long long v35 = (void (*)(char *, void, uint64_t))v10;
  v10(v9);
  static DispatchQoS.unspecified.getter();
  *(void *)&v53[0] = _swiftEmptyArrayStorage;
  uint64_t v11 = sub_100BB245C((unint64_t *)&qword_101638CC0, (void (*)(uint64_t))&type metadata accessor for OS_dispatch_queue.Attributes);
  uint64_t v37 = sub_10000588C((uint64_t *)&unk_1016376F0);
  uint64_t v12 = sub_100062734((unint64_t *)&qword_101638CD0, (uint64_t *)&unk_1016376F0);
  uint64_t v33 = v11;
  uint64_t v34 = v12;
  uint64_t v32 = v4;
  dispatch thunk of SetAlgebra.init<A>(_:)();
  v2[6] = OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)();
  v35(v9, v39, v36);
  static DispatchQoS.unspecified.getter();
  *(void *)&v53[0] = _swiftEmptyArrayStorage;
  dispatch thunk of SetAlgebra.init<A>(_:)();
  v2[7] = OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)();
  v2[8] = 0;
  v2[9] = 0;
  v2[10] = 0;
  LOBYTE(v53[0]) = 0;
  sub_10000588C(&qword_101657190);
  swift_allocObject();
  v2[11] = CurrentValueSubject.init(_:)();
  v2[13] = 0;
  v2[14] = 0;
  uint64_t v29 = sub_10000588C(&qword_10165A798);
  swift_allocObject();
  v2[15] = PassthroughSubject.init()();
  uint64_t v13 = (char *)v2 + OBJC_IVAR____TtC12searchpartyd25SecureLocationsKeyManager_cachedSharingKey;
  uint64_t v14 = type metadata accessor for SecureLocationsCachedSharingKey(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v14 - 8) + 56))(v13, 1, 1, v14);
  *(void *)((char *)v3
            + OBJC_IVAR____TtC12searchpartyd25SecureLocationsKeyManager_cacheInvalidationMeDeviceSubscription) = 0;
  *(void *)((char *)v3
            + OBJC_IVAR____TtC12searchpartyd25SecureLocationsKeyManager_cacheInvalidationAutoMeChangedSubscription) = 0;
  uint64_t v26 = OBJC_IVAR____TtC12searchpartyd25SecureLocationsKeyManager_decryptionKeyAccessQueue;
  uint64_t v15 = v35;
  uint64_t v16 = v36;
  v35(v9, v39, v36);
  static DispatchQoS.unspecified.getter();
  *(void *)&v53[0] = _swiftEmptyArrayStorage;
  dispatch thunk of SetAlgebra.init<A>(_:)();
  *(void *)((char *)v3 + v26) = OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)();
  *(void *)((char *)v3 + OBJC_IVAR____TtC12searchpartyd25SecureLocationsKeyManager_cachedDecryptionKeys) = _swiftEmptyDictionarySingleton;
  uint64_t v26 = OBJC_IVAR____TtC12searchpartyd25SecureLocationsKeyManager_keySharingQueue;
  v15(v9, v39, v16);
  static DispatchQoS.unspecified.getter();
  *(void *)&v53[0] = _swiftEmptyArrayStorage;
  dispatch thunk of SetAlgebra.init<A>(_:)();
  *(void *)((char *)v3 + v26) = OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)();
  uint64_t v17 = OBJC_IVAR____TtC12searchpartyd25SecureLocationsKeyManager_keySharingThrottle;
  if (qword_101637080 != -1) {
    swift_once();
  }
  swift_retain();
  OS_dispatch_queue.sync<A>(execute:)();
  swift_release();
  v53[10] = v50;
  v53[11] = v51;
  v53[12] = v52;
  uint64_t v53[6] = v46;
  v53[7] = v47;
  v53[8] = v48;
  v53[9] = v49;
  v53[2] = v42;
  v53[3] = v43;
  v53[4] = v44;
  v53[5] = v45;
  v53[0] = v40;
  v53[1] = v41;
  sub_100551984((uint64_t)v53);
  sub_10000588C(&qword_10165A7A0);
  swift_allocObject();
  *(void *)((char *)v3 + v17) = KeyedThrottle.init(throttleInterval:)();
  *(void *)&long long v40 = v3[15];
  sub_100062734(&qword_10165A7A8, &qword_10165A798);
  v3[16] = Publisher.eraseToAnyPublisher()();
  uint64_t v18 = v31;
  v3[4] = v30;
  v3[5] = v18;
  swift_retain();
  swift_retain();
  swift_retain();
  uint64_t v19 = CurrentValueSubject.eraseToAnyCurrentValuePublisher()();
  swift_release();
  v3[12] = v19;
  *(void *)&long long v40 = *(void *)(qword_10170EC60 + 56);
  swift_retain();
  swift_retain();
  sub_10000588C(&qword_10163FE78);
  sub_100062734(&qword_10163FE80, &qword_10163FE78);
  uint64_t v20 = Publisher<>.sink(receiveValue:)();
  swift_release();
  swift_release();
  v3[10] = v20;
  swift_release();
  if (qword_101637680 != -1) {
    swift_once();
  }
  swift_retain();
  uint64_t v21 = AnyCurrentValuePublisher.publisher.getter();
  swift_release();
  *(void *)&long long v40 = v21;
  swift_retain();
  sub_10000588C((uint64_t *)&unk_1016569C0);
  sub_100062734((unint64_t *)&qword_10163A518, (uint64_t *)&unk_1016569C0);
  uint64_t v22 = Publisher<>.sink(receiveValue:)();
  swift_release();
  swift_release();
  *(void *)((char *)v3
            + OBJC_IVAR____TtC12searchpartyd25SecureLocationsKeyManager_cacheInvalidationMeDeviceSubscription) = v22;
  swift_release();
  *(void *)&long long v40 = *(void *)(qword_10170EC60 + 88);
  swift_retain();
  swift_retain();
  uint64_t v23 = Publisher<>.sink(receiveValue:)();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  *(void *)((char *)v3
            + OBJC_IVAR____TtC12searchpartyd25SecureLocationsKeyManager_cacheInvalidationAutoMeChangedSubscription) = v23;
  swift_release();
  return v3;
}

uint64_t sub_100BA0058()
{
  return static Transaction.named<A>(_:with:)();
}

void sub_100BA00D0(unsigned char *a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v5 = *(NSObject **)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v7 = (char *)v22 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for DispatchQoS();
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  uint64_t v11 = (char *)v22 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  int v12 = *a1;
  if (!*a1) {
    goto LABEL_4;
  }
  if (v12 == 1) {
    return;
  }
  if (v12 != 4)
  {
    v22[0] = v5;
    if (qword_101637070 != -1) {
      swift_once();
    }
    uint64_t v17 = type metadata accessor for Logger();
    sub_100010324(v17, (uint64_t)qword_10170EC30);
    uint64_t v18 = Logger.logObject.getter();
    os_log_type_t v19 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v18, v19))
    {
      uint64_t v20 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v20 = 0;
      _os_log_impl((void *)&_mh_execute_header, v18, v19, "MeDevice: state is not thisDevice. Invalidating key cache", v20, 2u);
      swift_slowDealloc();
    }

    aBlock[4] = sub_100BB86EC;
    aBlock[5] = a2;
    aBlock[0] = _NSConcreteStackBlock;
    aBlock[1] = 1107296256;
    aBlock[2] = sub_1004B5480;
    aBlock[3] = &unk_1015EBD08;
    uint64_t v21 = _Block_copy(aBlock);
    swift_retain();
    static DispatchQoS.unspecified.getter();
    v22[1] = (os_log_t)_swiftEmptyArrayStorage;
    sub_100BB245C((unint64_t *)&qword_10163B7E0, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
    sub_10000588C((uint64_t *)&unk_10163F350);
    sub_100062734((unint64_t *)&qword_10163B7F0, (uint64_t *)&unk_10163F350);
    dispatch thunk of SetAlgebra.init<A>(_:)();
    OS_dispatch_queue.async(group:qos:flags:execute:)();
    _Block_release(v21);
    ((void (*)(char *, uint64_t))v22[0][1].isa)(v7, v4);
    (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v8);
    swift_release();
  }
  else
  {
LABEL_4:
    if (qword_101637070 != -1) {
      swift_once();
    }
    uint64_t v13 = type metadata accessor for Logger();
    sub_100010324(v13, (uint64_t)qword_10170EC30);
    v22[0] = (os_log_t)Logger.logObject.getter();
    os_log_type_t v14 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v22[0], v14))
    {
      uint64_t v15 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v15 = 0;
      _os_log_impl((void *)&_mh_execute_header, v22[0], v14, "MeDevice: state unknown or none. Not invalidating cache", v15, 2u);
      swift_slowDealloc();
    }
    os_log_t v16 = v22[0];
  }
}

uint64_t sub_100BA0530(unsigned char *a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v7 = (char *)v15 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for DispatchQoS();
  uint64_t v9 = *(void *)(v8 - 8);
  uint64_t result = __chkstk_darwin(v8);
  int v12 = (char *)v15 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  if ((*a1 & 1) == 0)
  {
    v15[0] = *(void *)(a2 + 48);
    aBlock[4] = sub_100BB9F64;
    aBlock[5] = a2;
    aBlock[0] = _NSConcreteStackBlock;
    aBlock[1] = 1107296256;
    aBlock[2] = sub_1004B5480;
    aBlock[3] = &unk_1015EBCE0;
    uint64_t v13 = v5;
    os_log_type_t v14 = _Block_copy(aBlock);
    swift_retain();
    static DispatchQoS.unspecified.getter();
    v15[1] = _swiftEmptyArrayStorage;
    sub_100BB245C((unint64_t *)&qword_10163B7E0, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
    sub_10000588C((uint64_t *)&unk_10163F350);
    sub_100062734((unint64_t *)&qword_10163B7F0, (uint64_t *)&unk_10163F350);
    dispatch thunk of SetAlgebra.init<A>(_:)();
    OS_dispatch_queue.async(group:qos:flags:execute:)();
    _Block_release(v14);
    (*(void (**)(char *, uint64_t))(v13 + 8))(v7, v4);
    (*(void (**)(char *, uint64_t))(v9 + 8))(v12, v8);
    return swift_release();
  }
  return result;
}

uint64_t sub_100BA07E8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_100BB59F4(a2, a3, a4);
}

uint64_t sub_100BA07F8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v20 = a2;
  uint64_t v4 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v23 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v6 = (char *)&v19 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for DispatchQoS();
  uint64_t v21 = *(void *)(v7 - 8);
  uint64_t v22 = v7;
  __chkstk_darwin(v7);
  uint64_t v9 = (char *)&v19 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = type metadata accessor for DispatchQoS.QoSClass();
  uint64_t v11 = *(void *)(v10 - 8);
  __chkstk_darwin(v10);
  uint64_t v13 = (char *)&v19 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100BA1330();
  char v14 = sub_100BA0BA4();
  sub_10000584C();
  (*(void (**)(char *, void, uint64_t))(v11 + 104))(v13, enum case for DispatchQoS.QoSClass.default(_:), v10);
  uint64_t v15 = (void *)static OS_dispatch_queue.global(qos:)();
  (*(void (**)(char *, uint64_t))(v11 + 8))(v13, v10);
  uint64_t v16 = swift_allocObject();
  *(void *)(v16 + 16) = v20;
  *(void *)(v16 + 24) = a3;
  *(unsigned char *)(v16 + 32) = v14 & 1;
  aBlock[4] = sub_10028789C;
  aBlock[5] = v16;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_1004B5480;
  aBlock[3] = &unk_1015EB1C8;
  uint64_t v17 = _Block_copy(aBlock);
  swift_retain();
  static DispatchQoS.unspecified.getter();
  uint64_t v24 = _swiftEmptyArrayStorage;
  sub_100BB245C((unint64_t *)&qword_10163B7E0, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
  sub_10000588C((uint64_t *)&unk_10163F350);
  sub_100062734((unint64_t *)&qword_10163B7F0, (uint64_t *)&unk_10163F350);
  dispatch thunk of SetAlgebra.init<A>(_:)();
  OS_dispatch_queue.async(group:qos:flags:execute:)();
  _Block_release(v17);

  (*(void (**)(char *, uint64_t))(v23 + 8))(v6, v4);
  (*(void (**)(char *, uint64_t))(v21 + 8))(v9, v22);
  return swift_release();
}

uint64_t sub_100BA0BA4()
{
  uint64_t v0 = sub_10000588C(&qword_10163BB80);
  __chkstk_darwin(v0 - 8);
  unint64_t v2 = (char *)&aBlock[-1] - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v3 = sub_10000588C(&qword_101638CF0);
  __chkstk_darwin(v3 - 8);
  uint64_t v5 = (char *)&aBlock[-1] - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = type metadata accessor for UUID();
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  uint64_t v9 = (char *)&aBlock[-1] - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_retain();
  sub_100AB24F0();
  QueueSynchronizer.conditionalSync<A>(_:)();
  swift_release();
  swift_release();
  if (LOBYTE(aBlock[0]) == 1)
  {
    sub_100BA10B4((uint64_t)v5);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v7 + 48))(v5, 1, v6) != 1)
    {
      (*(void (**)(char *, char *, uint64_t))(v7 + 32))(v9, v5, v6);
      swift_retain();
      sub_100B6C53C((uint64_t)v2);
      swift_release();
      (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
      uint64_t v21 = type metadata accessor for KeyAlignmentRecord();
      BOOL v20 = (*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v21 - 8) + 48))(v2, 1, v21) != 1;
      sub_10001DAB4((uint64_t)v2, &qword_10163BB80);
      return v20;
    }
    sub_10001DAB4((uint64_t)v5, &qword_101638CF0);
    return 0;
  }
  if (qword_101637070 != -1) {
    swift_once();
  }
  uint64_t v10 = type metadata accessor for Logger();
  sub_100010324(v10, (uint64_t)qword_10170EC30);
  uint64_t v11 = Logger.logObject.getter();
  os_log_type_t v12 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v11, v12))
  {
    uint64_t v13 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v13 = 0;
    _os_log_impl((void *)&_mh_execute_header, v11, v12, "SecureLocationSetup: BeaconStore is not available", v13, 2u);
    swift_slowDealloc();
  }

  if (qword_101637440 != -1) {
    swift_once();
  }
  uint64_t v14 = qword_10170F218;
  uint64_t v15 = *(NSObject **)(qword_10170F218 + 16);
  uint64_t v16 = (void *)swift_allocObject();
  v16[2] = v14;
  void v16[3] = 0xD000000000000017;
  v16[4] = 0x80000001014158C0;
  uint64_t v17 = swift_allocObject();
  *(void *)(v17 + 16) = sub_100769408;
  *(void *)(v17 + 24) = v16;
  aBlock[4] = sub_1003B7AE0;
  aBlock[5] = v17;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_1000A70B0;
  aBlock[3] = &unk_1015EBA38;
  uint64_t v18 = _Block_copy(aBlock);
  swift_retain_n();
  swift_retain();
  swift_release();
  dispatch_sync(v15, v18);
  _Block_release(v18);
  LOBYTE(v15) = swift_isEscapingClosureAtFileLocation();
  swift_release();
  swift_release();
  uint64_t result = swift_release();
  if ((v15 & 1) == 0)
  {
    swift_retain();
    sub_1010E156C(11, 0xD000000000000017, 0x80000001014158C0);
    swift_release();
    return 0;
  }
  __break(1u);
  return result;
}

uint64_t sub_100BA10B4@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = type metadata accessor for OwnedBeaconRecord();
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  uint64_t v5 = (char *)&v13 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_retain();
  uint64_t v6 = sub_100ACF35C();
  swift_release();
  uint64_t v7 = v6[2];
  if (v7)
  {
    if (v7 == 1 || (type metadata accessor for Transaction(), uint64_t result = static Transaction.named<A>(_:with:)(), v6[2]))
    {
      sub_100BB7A10((uint64_t)v6 + ((*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80)), (uint64_t)v5, (uint64_t (*)(void))type metadata accessor for OwnedBeaconRecord);
      swift_bridgeObjectRelease();
      uint64_t v9 = &v5[*(int *)(v2 + 20)];
      uint64_t v10 = type metadata accessor for UUID();
      uint64_t v11 = *(void *)(v10 - 8);
      (*(void (**)(uint64_t, char *, uint64_t))(v11 + 16))(a1, v9, v10);
      sub_100BB66F4((uint64_t)v5, (uint64_t (*)(void))type metadata accessor for OwnedBeaconRecord);
      return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(v11 + 56))(a1, 0, 1, v10);
    }
    else
    {
      __break(1u);
    }
  }
  else
  {
    uint64_t v12 = type metadata accessor for UUID();
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v12 - 8) + 56))(a1, 1, 1, v12);
    return swift_bridgeObjectRelease();
  }
  return result;
}

void sub_100BA1330()
{
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for UUID();
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t v4 = __chkstk_darwin(v2);
  uint64_t v6 = (char *)&v42 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v4);
  uint64_t v8 = (char *)&v42 - v7;
  uint64_t v9 = type metadata accessor for DispatchPredicate();
  uint64_t v10 = *(void *)(v9 - 8);
  __chkstk_darwin(v9);
  uint64_t v12 = (uint64_t *)((char *)&v42 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v13 = *(void **)(v1 + 48);
  *uint64_t v12 = v13;
  (*(void (**)(void *, void, uint64_t))(v10 + 104))(v12, enum case for DispatchPredicate.onQueue(_:), v9);
  id v14 = v13;
  char v15 = _dispatchPreconditionTest(_:)();
  (*(void (**)(void *, uint64_t))(v10 + 8))(v12, v9);
  if (v15)
  {
    if (qword_101637080 == -1) {
      goto LABEL_3;
    }
  }
  else
  {
    __break(1u);
  }
  swift_once();
LABEL_3:
  swift_retain();
  char v16 = sub_100D0C0B0();
  swift_release();
  if (v16)
  {
    swift_retain();
    uint64_t v17 = (char *)sub_100ACF35C();
    swift_release();
    if (!*((void *)v17 + 2))
    {
      swift_bridgeObjectRelease();
      sub_100BA1AE8();
      return;
    }
    if (qword_101637070 != -1) {
      swift_once();
    }
    uint64_t v18 = type metadata accessor for Logger();
    uint64_t v19 = sub_100010324(v18, (uint64_t)qword_10170EC30);
    swift_bridgeObjectRetain();
    BOOL v20 = Logger.logObject.getter();
    os_log_type_t v21 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v20, v21))
    {
      uint64_t v22 = v19;
      uint64_t v23 = v2;
      uint64_t v24 = (uint8_t *)swift_slowAlloc();
      *(_DWORD *)uint64_t v24 = 134217984;
      unint64_t v48 = *((void *)v17 + 2);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v20, v21, "SetupVirtualMeDevice: Found OBRs %ld", v24, 0xCu);
      uint64_t v2 = v23;
      uint64_t v19 = v22;
      swift_slowDealloc();
    }
    else
    {

      swift_bridgeObjectRelease();
    }
    if (*((void *)v17 + 2))
    {
      uint64_t v46 = v1;
      uint64_t v29 = type metadata accessor for OwnedBeaconRecord();
      uint64_t v30 = *(void (**)(char *, char *, uint64_t))(v3 + 16);
      v30(v8, &v17[*(int *)(v29 + 20)+ ((*(unsigned __int8 *)(*(void *)(v29 - 8) + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(v29 - 8) + 80))], v2);
      v30(v6, v8, v2);
      uint64_t v31 = Logger.logObject.getter();
      os_log_type_t v32 = static os_log_type_t.default.getter();
      BOOL v33 = os_log_type_enabled(v31, v32);
      uint64_t v45 = v3;
      if (v33)
      {
        uint64_t v34 = (uint8_t *)swift_slowAlloc();
        uint64_t v35 = swift_slowAlloc();
        uint64_t v44 = v2;
        unint64_t v48 = v35;
        uint64_t v42 = v19;
        long long v43 = v8;
        *(_DWORD *)uint64_t v34 = 136315138;
        uint64_t v36 = UUID.uuidString.getter();
        uint64_t v47 = sub_1008FA0F0(v36, v37, (uint64_t *)&v48);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        uint64_t v8 = v43;
        uint64_t v3 = *(void *)(v3 + 8);
        ((void (*)(char *, uint64_t))v3)(v6, v44);
        _os_log_impl((void *)&_mh_execute_header, v31, v32, "SetupVirtualMeDevice: Found existing OBR %s", v34, 0xCu);
        swift_arrayDestroy();
        uint64_t v2 = v44;
        swift_slowDealloc();
        swift_slowDealloc();
      }
      else
      {
        uint64_t v3 = *(void *)(v3 + 8);
        ((void (*)(char *, uint64_t))v3)(v6, v2);
      }

      sub_100BA28F8((uint64_t)v8);
      unint64_t v38 = *((void *)v17 + 2);
      if (v38 < 2)
      {
        ((void (*)(char *, uint64_t))v3)(v8, v2);
        swift_bridgeObjectRelease();
        return;
      }
      swift_bridgeObjectRetain();
      unsigned int v39 = Logger.logObject.getter();
      os_log_type_t v40 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v39, v40))
      {
        long long v41 = (uint8_t *)swift_slowAlloc();
        *(_DWORD *)long long v41 = 134217984;
        swift_bridgeObjectRelease();
        unint64_t v48 = v38;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        _os_log_impl((void *)&_mh_execute_header, v39, v40, "SetupVirtualMeDevice: Anomalous condition - Duplicate VirtualMeDevice records found. Count %ld ", v41, 0xCu);
        swift_slowDealloc();
      }
      else
      {

        swift_bridgeObjectRelease_n();
      }
      type metadata accessor for Transaction();
      static Transaction.named<A>(_:with:)();
      if (qword_101637440 == -1) {
        goto LABEL_26;
      }
    }
    else
    {
      __break(1u);
    }
    swift_once();
LABEL_26:
    swift_retain();
    sub_1010E156C(2, 0, 0);
    swift_release();
    ((void (*)(char *, uint64_t))v3)(v8, v2);
    return;
  }
  if (qword_101637070 != -1) {
    swift_once();
  }
  uint64_t v25 = type metadata accessor for Logger();
  sub_100010324(v25, (uint64_t)qword_10170EC30);
  uint64_t v26 = Logger.logObject.getter();
  os_log_type_t v27 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v26, v27))
  {
    unint64_t v28 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)unint64_t v28 = 0;
    _os_log_impl((void *)&_mh_execute_header, v26, v27, "SetupVirtualMeDevice: Not a LocationPublishing device. Not setting up OBR", v28, 2u);
    swift_slowDealloc();
  }
}

void sub_100BA1AE8()
{
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for DispatchPredicate();
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  uint64_t v5 = (uint64_t *)((char *)&v13 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v6 = *(void **)(v1 + 48);
  *uint64_t v5 = v6;
  (*(void (**)(void *, void, uint64_t))(v3 + 104))(v5, enum case for DispatchPredicate.onQueue(_:), v2);
  id v7 = v6;
  LOBYTE(v6) = _dispatchPreconditionTest(_:)();
  (*(void (**)(void *, uint64_t))(v3 + 8))(v5, v2);
  if (v6)
  {
    if (qword_101637080 == -1) {
      goto LABEL_3;
    }
  }
  else
  {
    __break(1u);
  }
  swift_once();
LABEL_3:
  swift_retain();
  char v8 = sub_100D0C0B0();
  swift_release();
  if (v8)
  {
    type metadata accessor for Transaction();
    static Transaction.named<A>(_:with:)();
  }
  else
  {
    if (qword_101637070 != -1) {
      swift_once();
    }
    uint64_t v9 = type metadata accessor for Logger();
    sub_100010324(v9, (uint64_t)qword_10170EC30);
    uint64_t v10 = Logger.logObject.getter();
    os_log_type_t v11 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v10, v11))
    {
      uint64_t v12 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v12 = 0;
      _os_log_impl((void *)&_mh_execute_header, v10, v11, "SetupVirtualMeDevice: Not a LocationPublishing device. Not Creating VirtualMeDevice OBR", v12, 2u);
      swift_slowDealloc();
    }
  }
}

void sub_100BA1D4C(uint64_t a1, uint64_t a2)
{
  uint64_t v39 = a1;
  uint64_t v3 = sub_10000588C(&qword_101638CF0);
  __chkstk_darwin(v3);
  uint64_t v41 = (uint64_t)&v36 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = type metadata accessor for UUID();
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  unint64_t v37 = (char *)&v36 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for DispatchTime();
  uint64_t v9 = *(void *)(v8 - 8);
  uint64_t v10 = __chkstk_darwin(v8);
  uint64_t v12 = (char *)&v36 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v10);
  id v14 = (char *)&v36 - v13;
  uint64_t v15 = swift_allocBox();
  uint64_t v42 = v6;
  uint64_t v43 = v5;
  char v16 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v6 + 56);
  uint64_t v40 = v17;
  v16(v17, 1, 1, v5);
  uint64_t v18 = dispatch_group_create();
  dispatch_group_enter(v18);
  uint64_t v38 = a2;
  uint64_t v19 = (void *)swift_allocObject();
  v19[2] = v18;
  v19[3] = v15;
  v19[4] = v39;
  swift_retain();
  BOOL v20 = v18;
  uint64_t v44 = v15;
  swift_retain();
  swift_retain();
  sub_100B0032C((uint64_t)sub_100BB7ADC, (uint64_t)v19);
  swift_release();
  os_log_type_t v21 = v20;
  swift_release();
  static DispatchTime.now()();
  + infix(_:_:)();
  uint64_t v22 = *(void (**)(char *, uint64_t))(v9 + 8);
  v22(v12, v8);
  OS_dispatch_group.wait(timeout:)();
  v22(v14, v8);
  if (static DispatchTimeoutResult.== infix(_:_:)())
  {
    if (qword_101637070 != -1) {
      swift_once();
    }
    uint64_t v23 = type metadata accessor for Logger();
    sub_100010324(v23, (uint64_t)qword_10170EC30);
    uint64_t v24 = Logger.logObject.getter();
    os_log_type_t v25 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v24, v25))
    {
      uint64_t v26 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v26 = 0;
      _os_log_impl((void *)&_mh_execute_header, v24, v25, "SetupVirtualMeDevice: Timed out waiting to create OBR", v26, 2u);
      swift_slowDealloc();
    }
  }
  uint64_t v27 = v40;
  swift_beginAccess();
  uint64_t v28 = v41;
  sub_10001D074(v27, v41, &qword_101638CF0);
  uint64_t v30 = v42;
  uint64_t v29 = v43;
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v42 + 48))(v28, 1, v43) == 1)
  {
    sub_10001DAB4(v28, &qword_101638CF0);
    if (qword_101637070 != -1) {
      swift_once();
    }
    uint64_t v31 = type metadata accessor for Logger();
    sub_100010324(v31, (uint64_t)qword_10170EC30);
    os_log_type_t v32 = Logger.logObject.getter();
    os_log_type_t v33 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v32, v33))
    {
      uint64_t v34 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v34 = 0;
      _os_log_impl((void *)&_mh_execute_header, v32, v33, "SetupVirtualMeDevice: No OBR UUID. Not creating/checking for KeyAlignmentRecord", v34, 2u);
      swift_slowDealloc();
      swift_release();
    }
    else
    {
      swift_release();
    }
  }
  else
  {
    uint64_t v35 = (uint64_t)v37;
    (*(void (**)(char *, uint64_t, uint64_t))(v30 + 32))(v37, v28, v29);
    sub_100BA28F8(v35);

    (*(void (**)(uint64_t, uint64_t))(v30 + 8))(v35, v29);
    swift_release();
  }
}

void sub_100BA2278(uint64_t a1, NSObject *a2, uint64_t a3, uint64_t a4)
{
  dispatch_group_t v43 = a2;
  uint64_t v6 = sub_10000588C(&qword_101638CF0);
  __chkstk_darwin(v6 - 8);
  uint64_t v8 = (char *)v39 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v41 = type metadata accessor for OwnedBeaconRecord();
  uint64_t v9 = __chkstk_darwin(v41);
  uint64_t v11 = (char *)v39 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9);
  uint64_t v13 = (char *)v39 - v12;
  uint64_t v14 = sub_10000588C((uint64_t *)&unk_101656900);
  __chkstk_darwin(v14);
  char v16 = (void *)((char *)v39 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v17 = swift_projectBox();
  sub_10001D074(a1, (uint64_t)v16, (uint64_t *)&unk_101656900);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v42 = a4;
    uint64_t v18 = *v16;
    if (qword_101637070 != -1) {
      swift_once();
    }
    uint64_t v19 = type metadata accessor for Logger();
    sub_100010324(v19, (uint64_t)qword_10170EC30);
    swift_errorRetain();
    swift_errorRetain();
    BOOL v20 = Logger.logObject.getter();
    os_log_type_t v21 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v20, v21))
    {
      uint64_t v22 = (uint8_t *)swift_slowAlloc();
      v44[0] = swift_slowAlloc();
      *(_DWORD *)uint64_t v22 = 136315138;
      uint64_t v45 = v18;
      swift_errorRetain();
      sub_10000588C(&qword_101638D40);
      uint64_t v23 = String.init<A>(describing:)();
      uint64_t v45 = sub_1008FA0F0(v23, v24, v44);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      swift_errorRelease();
      swift_errorRelease();
      _os_log_impl((void *)&_mh_execute_header, v20, v21, "SetupVirtualMeDevice: Failed to create VirtualMeDevice record %s", v22, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      swift_errorRelease();
      swift_errorRelease();
    }

    if (qword_101637440 != -1) {
      swift_once();
    }
    v44[0] = v18;
    swift_errorRetain();
    swift_retain();
    sub_10000588C(&qword_101638D40);
    uint64_t v33 = String.init<A>(describing:)();
    sub_1010E156C(1, v33, v34);
    swift_release();
    swift_bridgeObjectRelease();
    swift_errorRelease();
  }
  else
  {
    uint64_t v40 = v17;
    sub_100BB668C((uint64_t)v16, (uint64_t)v13, (uint64_t (*)(void))type metadata accessor for OwnedBeaconRecord);
    if (qword_101637070 != -1) {
      swift_once();
    }
    uint64_t v25 = type metadata accessor for Logger();
    sub_100010324(v25, (uint64_t)qword_10170EC30);
    sub_100BB7A10((uint64_t)v13, (uint64_t)v11, (uint64_t (*)(void))type metadata accessor for OwnedBeaconRecord);
    uint64_t v26 = Logger.logObject.getter();
    os_log_type_t v27 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v26, v27))
    {
      uint64_t v28 = swift_slowAlloc();
      uint64_t v42 = a4;
      uint64_t v29 = (uint8_t *)v28;
      v44[0] = swift_slowAlloc();
      *(_DWORD *)uint64_t v29 = 136315138;
      v39[1] = v29 + 4;
      uint64_t v30 = v41;
      uint64_t v31 = UUID.uuidString.getter();
      uint64_t v45 = sub_1008FA0F0(v31, v32, v44);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      sub_100BB66F4((uint64_t)v11, (uint64_t (*)(void))type metadata accessor for OwnedBeaconRecord);
      _os_log_impl((void *)&_mh_execute_header, v26, v27, "SetupVirtualMeDevice: VirtualMeDevice OBR created %s", v29, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      sub_100BB66F4((uint64_t)v11, (uint64_t (*)(void))type metadata accessor for OwnedBeaconRecord);

      uint64_t v30 = v41;
    }
    uint64_t v35 = &v13[*(int *)(v30 + 20)];
    uint64_t v36 = type metadata accessor for UUID();
    uint64_t v37 = *(void *)(v36 - 8);
    (*(void (**)(char *, char *, uint64_t))(v37 + 16))(v8, v35, v36);
    sub_100BB66F4((uint64_t)v13, (uint64_t (*)(void))type metadata accessor for OwnedBeaconRecord);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v37 + 56))(v8, 0, 1, v36);
    uint64_t v38 = v40;
    swift_beginAccess();
    sub_100062604((uint64_t)v8, v38, &qword_101638CF0);
  }
  Transaction.capture()();
  dispatch_group_leave(v43);
}

void sub_100BA28F8(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = type metadata accessor for UUID();
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v7 = (char *)v26 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = sub_10000588C(&qword_10163BB80);
  __chkstk_darwin(v8 - 8);
  uint64_t v10 = (char *)v26 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = type metadata accessor for DispatchPredicate();
  uint64_t v12 = *(void *)(v11 - 8);
  __chkstk_darwin(v11);
  uint64_t v14 = (void *)((char *)v26 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v15 = *(void **)(v2 + 48);
  void *v14 = v15;
  (*(void (**)(void *, void, uint64_t))(v12 + 104))(v14, enum case for DispatchPredicate.onQueue(_:), v11);
  id v16 = v15;
  LOBYTE(v15) = _dispatchPreconditionTest(_:)();
  (*(void (**)(void *, uint64_t))(v12 + 8))(v14, v11);
  if ((v15 & 1) == 0)
  {
    __break(1u);
LABEL_10:
    swift_once();
    goto LABEL_5;
  }
  swift_retain();
  sub_100B6C53C((uint64_t)v10);
  swift_release();
  uint64_t v17 = type metadata accessor for KeyAlignmentRecord();
  int v18 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(void *)(v17 - 8) + 48))(v10, 1, v17);
  sub_10001DAB4((uint64_t)v10, &qword_10163BB80);
  if (v18 == 1)
  {
    uint64_t v19 = type metadata accessor for Transaction();
    __chkstk_darwin(v19);
    v26[-2] = a1;
    v26[-1] = v2;
    static Transaction.named<A>(_:with:)();
    return;
  }
  if (qword_101637070 != -1) {
    goto LABEL_10;
  }
LABEL_5:
  uint64_t v20 = type metadata accessor for Logger();
  sub_100010324(v20, (uint64_t)qword_10170EC30);
  (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))(v7, a1, v4);
  os_log_type_t v21 = Logger.logObject.getter();
  os_log_type_t v22 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v21, v22))
  {
    uint64_t v23 = (uint8_t *)swift_slowAlloc();
    uint64_t v27 = swift_slowAlloc();
    *(_DWORD *)uint64_t v23 = 136315138;
    uint64_t v24 = UUID.uuidString.getter();
    v26[1] = sub_1008FA0F0(v24, v25, &v27);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
    _os_log_impl((void *)&_mh_execute_header, v21, v22, "SetupVirtualMeDevice: KeyAlignmentRecord already exists for VirtualMeDevice %s", v23, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  }
}

uint64_t sub_100BA2D5C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v32 = a3;
  uint64_t v33 = a1;
  uint64_t v37 = a2;
  uint64_t v34 = type metadata accessor for DispatchTime();
  uint64_t v3 = *(void *)(v34 - 8);
  uint64_t v4 = __chkstk_darwin(v34);
  uint64_t v6 = (char *)&v32 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v4);
  uint64_t v8 = (char *)&v32 - v7;
  uint64_t v9 = type metadata accessor for KeyAlignmentRecord();
  uint64_t v10 = (int *)(v9 - 8);
  __chkstk_darwin(v9);
  uint64_t v12 = (_OWORD *)((char *)&v32 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v13 = type metadata accessor for UUID();
  uint64_t v14 = *(void *)(v13 - 8);
  __chkstk_darwin(v13);
  id v16 = (char *)&v32 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  UUID.init()();
  uint64_t v17 = (char *)v12 + v10[7];
  uint64_t v35 = v16;
  uint64_t v36 = v14;
  int v18 = *(void (**)(char *, char *, uint64_t))(v14 + 16);
  v18(v17, v16, v13);
  uint64_t v19 = (char *)v12 + v10[8];
  uint64_t v20 = v37;
  uint64_t v37 = v13;
  v18(v19, (char *)v20, v13);
  static Date.trustedNow.getter((uint64_t)v12 + v10[10]);
  *uint64_t v12 = xmmword_101348180;
  *(void *)((char *)v12 + v10[9]) = 1;
  os_log_type_t v21 = dispatch_group_create();
  dispatch_group_enter(v21);
  uint64_t v22 = *(void *)(v32 + 32);
  uint64_t v23 = v21;
  uint64_t v24 = v33;
  swift_retain();
  swift_retain();
  sub_100B4C5C4((uint64_t)v12, 0, v22, v23, v24);
  swift_release();

  swift_release();
  static DispatchTime.now()();
  + infix(_:_:)();
  unint64_t v25 = *(void (**)(char *, uint64_t))(v3 + 8);
  uint64_t v26 = v34;
  v25(v6, v34);
  OS_dispatch_group.wait(timeout:)();
  v25(v8, v26);
  if (static DispatchTimeoutResult.== infix(_:_:)())
  {
    if (qword_101637070 != -1) {
      swift_once();
    }
    uint64_t v27 = type metadata accessor for Logger();
    sub_100010324(v27, (uint64_t)qword_10170EC30);
    uint64_t v28 = Logger.logObject.getter();
    os_log_type_t v29 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v28, v29))
    {
      uint64_t v30 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v30 = 0;
      _os_log_impl((void *)&_mh_execute_header, v28, v29, "SetupVirtualMeDevice: Timed out waiting to create KeyAlignmentRecord", v30, 2u);
      swift_slowDealloc();
    }
  }
  else
  {
    uint64_t v28 = v23;
  }

  sub_100BB66F4((uint64_t)v12, (uint64_t (*)(void))type metadata accessor for KeyAlignmentRecord);
  return (*(uint64_t (**)(char *, uint64_t))(v36 + 8))(v35, v37);
}

void sub_100BA3134(uint64_t a1, NSObject *a2, uint64_t a3)
{
  dispatch_group_t v29 = a2;
  uint64_t v5 = type metadata accessor for KeyAlignmentRecord();
  uint64_t v6 = __chkstk_darwin(v5);
  uint64_t v8 = (char *)&v28 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  uint64_t v10 = (char *)&v28 - v9;
  uint64_t v11 = sub_10000588C(&qword_10164B328);
  __chkstk_darwin(v11);
  uint64_t v13 = (uint64_t *)((char *)&v28 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0));
  sub_10001D074(a1, (uint64_t)v13, &qword_10164B328);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v14 = *v13;
    if (qword_101637070 != -1) {
      swift_once();
    }
    uint64_t v15 = type metadata accessor for Logger();
    sub_100010324(v15, (uint64_t)qword_10170EC30);
    swift_errorRetain();
    swift_errorRetain();
    id v16 = Logger.logObject.getter();
    os_log_type_t v17 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v16, v17))
    {
      int v18 = (uint8_t *)swift_slowAlloc();
      uint64_t v19 = swift_slowAlloc();
      uint64_t v30 = v14;
      uint64_t v31 = v19;
      *(_DWORD *)int v18 = 136315138;
      swift_errorRetain();
      sub_10000588C(&qword_101638D40);
      uint64_t v20 = String.init<A>(describing:)();
      uint64_t v30 = sub_1008FA0F0(v20, v21, &v31);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      swift_errorRelease();
      swift_errorRelease();
      _os_log_impl((void *)&_mh_execute_header, v16, v17, "SetupVirtualMeDevice: Failed to create KeyAlignmentRecord for VirtualMeDevice OBR %s", v18, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      swift_errorRelease();
      swift_errorRelease();
    }

    if (qword_101637440 != -1) {
      swift_once();
    }
    swift_retain();
    sub_1010E156C(9, 0xD000000000000014, 0x8000000101415810);
    swift_release();
    swift_errorRelease();
  }
  else
  {
    sub_100BB668C((uint64_t)v13, (uint64_t)v10, (uint64_t (*)(void))type metadata accessor for KeyAlignmentRecord);
    if (qword_101637070 != -1) {
      swift_once();
    }
    uint64_t v22 = type metadata accessor for Logger();
    sub_100010324(v22, (uint64_t)qword_10170EC30);
    sub_100BB7A10((uint64_t)v10, (uint64_t)v8, (uint64_t (*)(void))type metadata accessor for KeyAlignmentRecord);
    uint64_t v23 = Logger.logObject.getter();
    os_log_type_t v24 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v23, v24))
    {
      unint64_t v25 = (uint8_t *)swift_slowAlloc();
      uint64_t v31 = swift_slowAlloc();
      *(_DWORD *)unint64_t v25 = 136315138;
      uint64_t v28 = a3;
      uint64_t v26 = UUID.uuidString.getter();
      uint64_t v30 = sub_1008FA0F0(v26, v27, &v31);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      sub_100BB66F4((uint64_t)v8, (uint64_t (*)(void))type metadata accessor for KeyAlignmentRecord);
      _os_log_impl((void *)&_mh_execute_header, v23, v24, "SetupVirtualMeDevice: Created KeyAlignmentRecord for VirtualMeDevice OBR %s", v25, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {

      sub_100BB66F4((uint64_t)v8, (uint64_t (*)(void))type metadata accessor for KeyAlignmentRecord);
    }
    sub_100BB66F4((uint64_t)v10, (uint64_t (*)(void))type metadata accessor for KeyAlignmentRecord);
  }
  Transaction.capture()();
  dispatch_group_leave(v29);
}

uint64_t sub_100BA3664(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v7 = (char *)v14 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = type metadata accessor for DispatchQoS();
  uint64_t v8 = *(void *)(v15 - 8);
  __chkstk_darwin(v15);
  uint64_t v10 = (char *)v14 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14[1] = *(void *)(a2 + 48);
  uint64_t v11 = swift_allocObject();
  *(void *)(v11 + 16) = a2;
  *(void *)(v11 + 24) = a1;
  aBlock[4] = sub_100BB7B44;
  aBlock[5] = v11;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_1004B5480;
  aBlock[3] = &unk_1015EB920;
  uint64_t v12 = _Block_copy(aBlock);
  swift_retain();
  swift_retain();
  static DispatchQoS.unspecified.getter();
  void aBlock[7] = _swiftEmptyArrayStorage;
  sub_100BB245C((unint64_t *)&qword_10163B7E0, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
  sub_10000588C((uint64_t *)&unk_10163F350);
  sub_100062734((unint64_t *)&qword_10163B7F0, (uint64_t *)&unk_10163F350);
  dispatch thunk of SetAlgebra.init<A>(_:)();
  OS_dispatch_queue.async(group:qos:flags:execute:)();
  _Block_release(v12);
  (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v15);
  return swift_release();
}

void sub_100BA3938(uint64_t a1, uint64_t a2)
{
  v26[1] = a2;
  uint64_t v3 = type metadata accessor for OwnedBeaconRecord();
  uint64_t v4 = *(void *)(v3 - 8);
  uint64_t v5 = __chkstk_darwin(v3 - 8);
  uint64_t v7 = (char *)v26 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5);
  uint64_t v9 = (char *)v26 - v8;
  swift_retain();
  uint64_t v10 = sub_100ACF35C();
  swift_release();
  if (qword_101637070 != -1) {
    swift_once();
  }
  uint64_t v11 = type metadata accessor for Logger();
  sub_100010324(v11, (uint64_t)qword_10170EC30);
  swift_bridgeObjectRetain();
  uint64_t v12 = Logger.logObject.getter();
  os_log_type_t v13 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v12, v13))
  {
    uint64_t v14 = (uint8_t *)swift_slowAlloc();
    *(_DWORD *)uint64_t v14 = 134217984;
    unint64_t v27 = v10[2];
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v12, v13, "SetupVirtualMeDevice: Found OBRs %ld", v14, 0xCu);
    swift_slowDealloc();
  }
  else
  {

    swift_bridgeObjectRelease();
  }
  unint64_t v15 = v10[2];
  if (v15 < 2) {
    goto LABEL_14;
  }
  swift_bridgeObjectRetain();
  id v16 = Logger.logObject.getter();
  os_log_type_t v17 = static os_log_type_t.error.getter();
  if (!os_log_type_enabled(v16, v17))
  {

    swift_bridgeObjectRelease();
    if (v10[2]) {
      goto LABEL_9;
    }
LABEL_14:
    swift_bridgeObjectRelease();
    goto LABEL_15;
  }
  int v18 = (uint8_t *)swift_slowAlloc();
  *(_DWORD *)int v18 = 134217984;
  unint64_t v27 = v15;
  UnsafeMutableRawBufferPointer.copyMemory(from:)();
  swift_bridgeObjectRelease();
  _os_log_impl((void *)&_mh_execute_header, v16, v17, "SetupVirtualMeDevice: Anomalous condition - Duplicate VirtualMeDevice records found. Count %ld ", v18, 0xCu);
  swift_slowDealloc();

  if (!v10[2]) {
    goto LABEL_14;
  }
LABEL_9:
  unint64_t v19 = (*(unsigned __int8 *)(v4 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
  uint64_t v20 = sub_100BB7A10((uint64_t)v10 + v19, (uint64_t)v9, (uint64_t (*)(void))type metadata accessor for OwnedBeaconRecord);
  __chkstk_darwin(v20);
  v26[-2] = v9;
  uint64_t v21 = sub_1000A42E4((uint64_t (*)(char *))sub_1003B69F0, &v26[-4], (uint64_t)v10);
  uint64_t v22 = *(void *)(v21 + 16);
  if (v22)
  {
    uint64_t v23 = v21 + v19;
    uint64_t v24 = *(void *)(v4 + 72);
    do
    {
      sub_100BB7A10(v23, (uint64_t)v7, (uint64_t (*)(void))type metadata accessor for OwnedBeaconRecord);
      sub_100BA3D30(a1, (uint64_t)v7);
      sub_100BB66F4((uint64_t)v7, (uint64_t (*)(void))type metadata accessor for OwnedBeaconRecord);
      v23 += v24;
      --v22;
    }
    while (v22);
  }
  swift_bridgeObjectRelease();
  sub_100BB66F4((uint64_t)v9, (uint64_t (*)(void))type metadata accessor for OwnedBeaconRecord);
LABEL_15:
  Transaction.capture()();
}

void sub_100BA3D30(uint64_t a1, uint64_t a2)
{
  uint64_t v23 = type metadata accessor for OwnedBeaconRecord();
  __chkstk_darwin(v23);
  uint64_t v5 = (char *)&v22 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = type metadata accessor for DispatchTime();
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = __chkstk_darwin(v6);
  uint64_t v10 = (char *)&v22 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8);
  uint64_t v12 = (char *)&v22 - v11;
  os_log_type_t v13 = dispatch_group_create();
  dispatch_group_enter(v13);
  uint64_t v14 = v13;
  sub_100BB713C(a2, a1, v14);

  static DispatchTime.now()();
  + infix(_:_:)();
  unint64_t v15 = *(void (**)(char *, uint64_t))(v7 + 8);
  v15(v10, v6);
  OS_dispatch_group.wait(timeout:)();
  v15(v12, v6);
  if (static DispatchTimeoutResult.== infix(_:_:)())
  {
    if (qword_101637070 != -1) {
      swift_once();
    }
    uint64_t v16 = type metadata accessor for Logger();
    sub_100010324(v16, (uint64_t)qword_10170EC30);
    sub_100BB7A10(a2, (uint64_t)v5, (uint64_t (*)(void))type metadata accessor for OwnedBeaconRecord);
    os_log_type_t v17 = Logger.logObject.getter();
    os_log_type_t v18 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v17, v18))
    {
      unint64_t v19 = (uint8_t *)swift_slowAlloc();
      uint64_t v25 = swift_slowAlloc();
      *(_DWORD *)unint64_t v19 = 136315138;
      uint64_t v20 = UUID.uuidString.getter();
      uint64_t v24 = sub_1008FA0F0(v20, v21, &v25);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      sub_100BB66F4((uint64_t)v5, (uint64_t (*)(void))type metadata accessor for OwnedBeaconRecord);
      _os_log_impl((void *)&_mh_execute_header, v17, v18, "SetupVirtualMeDevice: Timed out waiting to remove duplicate OBR %s", v19, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {

      sub_100BB66F4((uint64_t)v5, (uint64_t (*)(void))type metadata accessor for OwnedBeaconRecord);
    }
  }
  else
  {
  }
}

uint64_t sub_100BA40A8(uint64_t a1, uint64_t a2, uint64_t (*a3)(void), uint64_t a4)
{
  uint64_t v8 = type metadata accessor for OwnedBeaconRecord();
  uint64_t v9 = __chkstk_darwin(v8);
  uint64_t v11 = (char *)&v28 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9);
  os_log_type_t v13 = (char *)&v28 - v12;
  if (a1)
  {
    if (qword_101637070 != -1) {
      swift_once();
    }
    uint64_t v14 = type metadata accessor for Logger();
    sub_100010324(v14, (uint64_t)qword_10170EC30);
    sub_100BB7A10(a2, (uint64_t)v11, (uint64_t (*)(void))type metadata accessor for OwnedBeaconRecord);
    unint64_t v15 = Logger.logObject.getter();
    os_log_type_t v16 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v15, v16))
    {
      os_log_type_t v17 = (uint8_t *)swift_slowAlloc();
      uint64_t v18 = swift_slowAlloc();
      uint64_t v29 = a4;
      uint64_t v31 = v18;
      *(_DWORD *)os_log_type_t v17 = 136315138;
      uint64_t v28 = a3;
      type metadata accessor for UUID();
      sub_100BB245C((unint64_t *)&qword_101638B10, (void (*)(uint64_t))&type metadata accessor for UUID);
      uint64_t v19 = dispatch thunk of CustomStringConvertible.description.getter();
      uint64_t v30 = sub_1008FA0F0(v19, v20, &v31);
      a3 = v28;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      sub_100BB66F4((uint64_t)v11, (uint64_t (*)(void))type metadata accessor for OwnedBeaconRecord);
      _os_log_impl((void *)&_mh_execute_header, v15, v16, "SetupVirtualMeDevice: Failed to remove duplicate OBR %s", v17, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      sub_100BB66F4((uint64_t)v11, (uint64_t (*)(void))type metadata accessor for OwnedBeaconRecord);
    }
  }
  else
  {
    if (qword_101637070 != -1) {
      swift_once();
    }
    uint64_t v21 = type metadata accessor for Logger();
    sub_100010324(v21, (uint64_t)qword_10170EC30);
    sub_100BB7A10(a2, (uint64_t)v13, (uint64_t (*)(void))type metadata accessor for OwnedBeaconRecord);
    uint64_t v22 = Logger.logObject.getter();
    os_log_type_t v23 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v22, v23))
    {
      uint64_t v24 = (uint8_t *)swift_slowAlloc();
      uint64_t v31 = swift_slowAlloc();
      uint64_t v29 = a4;
      *(_DWORD *)uint64_t v24 = 136315138;
      type metadata accessor for UUID();
      sub_100BB245C((unint64_t *)&qword_101638B10, (void (*)(uint64_t))&type metadata accessor for UUID);
      uint64_t v25 = dispatch thunk of CustomStringConvertible.description.getter();
      uint64_t v30 = sub_1008FA0F0(v25, v26, &v31);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      sub_100BB66F4((uint64_t)v13, (uint64_t (*)(void))type metadata accessor for OwnedBeaconRecord);
      _os_log_impl((void *)&_mh_execute_header, v22, v23, "SetupVirtualMeDevice: Successfully removed duplicate OBR %s", v24, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      sub_100BB66F4((uint64_t)v13, (uint64_t (*)(void))type metadata accessor for OwnedBeaconRecord);
    }

    a1 = 0;
  }
  return a3(a1);
}

uint64_t sub_100BA4560()
{
  if (qword_101637070 != -1) {
    swift_once();
  }
  uint64_t v0 = type metadata accessor for Logger();
  sub_100010324(v0, (uint64_t)qword_10170EC30);
  uint64_t v1 = Logger.logObject.getter();
  os_log_type_t v2 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v1, v2))
  {
    uint64_t v3 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v3 = 0;
    _os_log_impl((void *)&_mh_execute_header, v1, v2, "shareKey: keyForSharingLocationToFriends", v3, 2u);
    swift_slowDealloc();
  }

  uint64_t v4 = type metadata accessor for Transaction();
  __chkstk_darwin(v4);
  return static Transaction.named<A>(_:with:)();
}

uint64_t sub_100BA46C0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  uint64_t v11 = (char *)v18 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v19 = type metadata accessor for DispatchQoS();
  uint64_t v12 = *(void *)(v19 - 8);
  __chkstk_darwin(v19);
  uint64_t v14 = (char *)v18 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18[1] = *(void *)(a2 + 48);
  unint64_t v15 = (void *)swift_allocObject();
  void v15[2] = a2;
  v15[3] = a1;
  void v15[4] = a3;
  v15[5] = a4;
  aBlock[4] = sub_100BB64EC;
  aBlock[5] = v15;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_1004B5480;
  aBlock[3] = &unk_1015EB5D8;
  os_log_type_t v16 = _Block_copy(aBlock);
  swift_retain();
  swift_retain();
  swift_retain();
  static DispatchQoS.unspecified.getter();
  void aBlock[7] = _swiftEmptyArrayStorage;
  sub_100BB245C((unint64_t *)&qword_10163B7E0, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
  sub_10000588C((uint64_t *)&unk_10163F350);
  sub_100062734((unint64_t *)&qword_10163B7F0, (uint64_t *)&unk_10163F350);
  dispatch thunk of SetAlgebra.init<A>(_:)();
  OS_dispatch_queue.async(group:qos:flags:execute:)();
  _Block_release(v16);
  (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v8);
  (*(void (**)(char *, uint64_t))(v12 + 8))(v14, v19);
  return swift_release();
}

uint64_t sub_100BA49A8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v85 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v84 = *(void *)(v85 - 8);
  __chkstk_darwin(v85);
  uint64_t v82 = (char *)v68 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v83 = type metadata accessor for DispatchQoS();
  uint64_t v81 = *(void *)(v83 - 8);
  __chkstk_darwin(v83);
  uint64_t v80 = (char *)v68 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v79 = type metadata accessor for DispatchQoS.QoSClass();
  uint64_t v78 = *(void *)(v79 - 8);
  __chkstk_darwin(v79);
  unint64_t v77 = (char *)v68 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v76 = type metadata accessor for HashAlgorithm();
  uint64_t v75 = *(void *)(v76 - 8);
  __chkstk_darwin(v76);
  uint64_t v74 = (char *)v68 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = type metadata accessor for Logger();
  uint64_t v87 = *(void *)(v12 - 8);
  __chkstk_darwin(v12);
  uint64_t v86 = (char *)v68 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = sub_10000588C(&qword_101660B90);
  __chkstk_darwin(v14 - 8);
  os_log_type_t v16 = (char *)v68 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v17 = type metadata accessor for SecureLocationsCachedSharingKey(0);
  uint64_t v18 = *(void *)(v17 - 8);
  __chkstk_darwin(v17);
  unint64_t v20 = (char *)v68 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100BA7AB0((uint64_t)v16);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v18 + 48))(v16, 1, v17) == 1)
  {
    sub_10001DAB4((uint64_t)v16, &qword_101660B90);
    uint64_t v21 = (void *)swift_allocObject();
    v21[2] = a3;
    v21[3] = a4;
    v21[4] = a2;
    v21[5] = a1;
    swift_retain_n();
    swift_retain_n();
    swift_retain_n();
    if (sub_100BA0BA4())
    {
      uint64_t v22 = type metadata accessor for Transaction();
      __chkstk_darwin(v22);
      v68[-4] = a1;
      v68[-3] = a3;
      uint64_t v67 = a4;
      static Transaction.named<A>(_:with:)();
      Transaction.capture()();
    }
    else
    {
      if (qword_101637070 != -1) {
        swift_once();
      }
      sub_100010324(v12, (uint64_t)qword_10170EC30);
      long long v51 = Logger.logObject.getter();
      os_log_type_t v52 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v51, v52))
      {
        uint64_t v53 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)uint64_t v53 = 0;
        _os_log_impl((void *)&_mh_execute_header, v51, v52, "SetupVirtualMeDevice: Waiting on beaconStore to become available", v53, 2u);
        swift_slowDealloc();
      }

      swift_retain();
      swift_retain();
      uint64_t v54 = swift_retain();
      sub_100B500A4(v54, a1, (uint64_t)sub_100BB64FC, (uint64_t)v21);
      swift_release();
      swift_release();
      swift_release();
    }
    swift_release();
    swift_release();
    swift_release();
    return swift_release();
  }
  else
  {
    uint64_t v71 = a3;
    uint64_t v73 = a4;
    uint64_t v72 = a2;
    sub_100BB668C((uint64_t)v16, (uint64_t)v20, type metadata accessor for SecureLocationsCachedSharingKey);
    os_log_type_t v23 = &v20[*(int *)(v17 + 24)];
    long long v24 = *((_OWORD *)v23 + 2);
    long long v25 = *(_OWORD *)v23;
    long long v95 = *((_OWORD *)v23 + 1);
    long long v96 = v24;
    long long v94 = v25;
    sub_1006CA500(&v94, (void (*)(void, void))sub_1006CD4D8, (void (*)(uint64_t, uint64_t))sub_1000361E0, (void (*)(uint64_t, uint64_t))sub_100037A38);
    uint64_t v26 = (uint64_t)v20;
    if (qword_101637070 != -1) {
      swift_once();
    }
    uint64_t v27 = v12;
    uint64_t v28 = sub_100010324(v12, (uint64_t)qword_10170EC30);
    uint64_t v30 = v86;
    uint64_t v29 = v87;
    (*(void (**)(char *, uint64_t, uint64_t))(v87 + 16))(v86, v28, v27);
    sub_1006CA500(&v94, (void (*)(void, void))sub_1006CD4D8, (void (*)(uint64_t, uint64_t))sub_1000361E0, (void (*)(uint64_t, uint64_t))sub_100037A38);
    sub_1006CA500(&v94, (void (*)(void, void))sub_1006CD4D8, (void (*)(uint64_t, uint64_t))sub_1000361E0, (void (*)(uint64_t, uint64_t))sub_100037A38);
    sub_1006CA500(&v94, (void (*)(void, void))sub_1006CD4D8, (void (*)(uint64_t, uint64_t))sub_1000361E0, (void (*)(uint64_t, uint64_t))sub_100037A38);
    sub_1006CA500(&v94, (void (*)(void, void))sub_1006CD4D8, (void (*)(uint64_t, uint64_t))sub_1000361E0, (void (*)(uint64_t, uint64_t))sub_100037A38);
    uint64_t v31 = Logger.logObject.getter();
    int v32 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v31, (os_log_type_t)v32))
    {
      int v69 = v32;
      uint64_t v33 = swift_slowAlloc();
      uint64_t v34 = (void *)swift_slowAlloc();
      uint64_t v88 = v34;
      *(_DWORD *)uint64_t v33 = 136315394;
      long long v97 = v95;
      long long aBlock = v95;
      sub_10043C6FC();
      uint64_t v35 = RawRepresentable<>.base64EncodedString(options:)();
      *(void *)&long long aBlock = sub_1008FA0F0(v35, v36, (uint64_t *)&v88);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      sub_1006CA500(&v94, (void (*)(void, void))sub_10015AF5C, (void (*)(uint64_t, uint64_t))sub_10001CFB8, (void (*)(uint64_t, uint64_t))sub_100037A24);
      sub_1006CA500(&v94, (void (*)(void, void))sub_10015AF5C, (void (*)(uint64_t, uint64_t))sub_10001CFB8, (void (*)(uint64_t, uint64_t))sub_100037A24);
      *(_WORD *)(v33 + 12) = 2080;
      long long v37 = v97;
      sub_100061E54((uint64_t)&v97);
      uint64_t v38 = sub_100A94760(v37, *((unint64_t *)&v37 + 1));
      unint64_t v40 = v39;
      v68[2] = v34;
      uint64_t v70 = v26;
      sub_1000CE9DC((uint64_t)&v97);
      sub_100434E0C(v38, v40, (uint64_t *)&aBlock);
      v68[1] = v33 + 14;
      long long v41 = aBlock;
      uint64_t v42 = v75;
      dispatch_group_t v43 = v74;
      uint64_t v44 = v76;
      (*(void (**)(char *, void, uint64_t))(v75 + 104))(v74, enum case for HashAlgorithm.sha256(_:), v76);
      uint64_t v45 = Data.hash(algorithm:)();
      unint64_t v47 = v46;
      (*(void (**)(char *, uint64_t))(v42 + 8))(v43, v44);
      sub_10001CFB8(v41, *((unint64_t *)&v41 + 1));
      *(void *)&long long aBlock = v45;
      *((void *)&aBlock + 1) = v47;
      sub_1001D780C();
      uint64_t v48 = RawRepresentable<>.base64EncodedString(options:)();
      unint64_t v50 = v49;
      sub_10001CFB8(v45, v47);
      *(void *)&long long aBlock = sub_1008FA0F0(v48, v50, (uint64_t *)&v88);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      sub_1006CA500(&v94, (void (*)(void, void))sub_10015AF5C, (void (*)(uint64_t, uint64_t))sub_10001CFB8, (void (*)(uint64_t, uint64_t))sub_100037A24);
      sub_1006CA500(&v94, (void (*)(void, void))sub_10015AF5C, (void (*)(uint64_t, uint64_t))sub_10001CFB8, (void (*)(uint64_t, uint64_t))sub_100037A24);
      _os_log_impl((void *)&_mh_execute_header, v31, (os_log_type_t)v69, "keysForFriends: Memory cached %s locationId: %s", (uint8_t *)v33, 0x16u);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      (*(void (**)(char *, uint64_t))(v87 + 8))(v86, v27);
      uint64_t v26 = v70;
    }
    else
    {
      sub_1006CA500(&v94, (void (*)(void, void))sub_10015AF5C, (void (*)(uint64_t, uint64_t))sub_10001CFB8, (void (*)(uint64_t, uint64_t))sub_100037A24);
      sub_1006CA500(&v94, (void (*)(void, void))sub_10015AF5C, (void (*)(uint64_t, uint64_t))sub_10001CFB8, (void (*)(uint64_t, uint64_t))sub_100037A24);
      sub_1006CA500(&v94, (void (*)(void, void))sub_10015AF5C, (void (*)(uint64_t, uint64_t))sub_10001CFB8, (void (*)(uint64_t, uint64_t))sub_100037A24);
      sub_1006CA500(&v94, (void (*)(void, void))sub_10015AF5C, (void (*)(uint64_t, uint64_t))sub_10001CFB8, (void (*)(uint64_t, uint64_t))sub_100037A24);

      (*(void (**)(char *, uint64_t))(v29 + 8))(v30, v27);
    }
    sub_10000584C();
    uint64_t v56 = v78;
    unint64_t v57 = v77;
    uint64_t v58 = v79;
    (*(void (**)(char *, void, uint64_t))(v78 + 104))(v77, enum case for DispatchQoS.QoSClass.default(_:), v79);
    os_log_type_t v59 = (void *)static OS_dispatch_queue.global(qos:)();
    (*(void (**)(char *, uint64_t))(v56 + 8))(v57, v58);
    uint64_t v60 = swift_allocObject();
    uint64_t v61 = v73;
    *(void *)(v60 + 16) = v71;
    *(void *)(v60 + 24) = v61;
    long long v62 = v95;
    *(_OWORD *)(v60 + 32) = v94;
    *(_OWORD *)(v60 + 48) = v62;
    *(_OWORD *)(v60 + 64) = v96;
    *(void *)(v60 + 80) = v72;
    unint64_t v92 = sub_100BB65A0;
    uint64_t v93 = v60;
    *(void *)&long long aBlock = _NSConcreteStackBlock;
    *((void *)&aBlock + 1) = 1107296256;
    uint64_t v90 = sub_1004B5480;
    uint64_t v91 = &unk_1015EB650;
    uint64_t v63 = _Block_copy(&aBlock);
    swift_retain();
    swift_retain();
    sub_1006CA500(&v94, (void (*)(void, void))sub_1006CD4D8, (void (*)(uint64_t, uint64_t))sub_1000361E0, (void (*)(uint64_t, uint64_t))sub_100037A38);
    uint64_t v64 = v80;
    static DispatchQoS.unspecified.getter();
    uint64_t v88 = _swiftEmptyArrayStorage;
    sub_100BB245C((unint64_t *)&qword_10163B7E0, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
    sub_10000588C((uint64_t *)&unk_10163F350);
    sub_100062734((unint64_t *)&qword_10163B7F0, (uint64_t *)&unk_10163F350);
    unint64_t v65 = v82;
    uint64_t v66 = v85;
    dispatch thunk of SetAlgebra.init<A>(_:)();
    OS_dispatch_queue.async(group:qos:flags:execute:)();
    _Block_release(v63);

    sub_1006CA500(&v94, (void (*)(void, void))sub_10015AF5C, (void (*)(uint64_t, uint64_t))sub_10001CFB8, (void (*)(uint64_t, uint64_t))sub_100037A24);
    (*(void (**)(char *, uint64_t))(v84 + 8))(v65, v66);
    (*(void (**)(char *, uint64_t))(v81 + 8))(v64, v83);
    swift_release();
    Transaction.capture()();
    return sub_100BB66F4(v26, type metadata accessor for SecureLocationsCachedSharingKey);
  }
}

void sub_100BA5970(char a1, void (*a2)(void ***))
{
  if (a1)
  {
    uint64_t v3 = type metadata accessor for Transaction();
    __chkstk_darwin(v3);
    static Transaction.named<A>(_:with:)();
LABEL_11:
    Transaction.capture()();
    return;
  }
  if (qword_101637070 != -1) {
    swift_once();
  }
  uint64_t v4 = type metadata accessor for Logger();
  sub_100010324(v4, (uint64_t)qword_10170EC30);
  uint64_t v5 = Logger.logObject.getter();
  os_log_type_t v6 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v5, v6))
  {
    uint64_t v7 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v7 = 0;
    _os_log_impl((void *)&_mh_execute_header, v5, v6, "keysForFriends: SecureLocations not setup. Cannot share keys", v7, 2u);
    swift_slowDealloc();
  }

  if (qword_101637440 != -1) {
    swift_once();
  }
  uint64_t v8 = qword_10170F218;
  uint64_t v9 = *(NSObject **)(qword_10170F218 + 16);
  uint64_t v10 = (void *)swift_allocObject();
  _OWORD v10[2] = v8;
  v10[3] = 0xD000000000000019;
  v10[4] = 0x80000001014157A0;
  uint64_t v11 = swift_allocObject();
  *(void *)(v11 + 16) = sub_100769408;
  *(void *)(v11 + 24) = v10;
  uint64_t v18 = sub_1003B7AE0;
  uint64_t v19 = v11;
  long long aBlock = _NSConcreteStackBlock;
  uint64_t v15 = 1107296256;
  os_log_type_t v16 = sub_1000A70B0;
  uint64_t v17 = &unk_1015EB8A8;
  uint64_t v12 = _Block_copy(&aBlock);
  swift_retain_n();
  swift_retain();
  swift_release();
  dispatch_sync(v9, v12);
  _Block_release(v12);
  LOBYTE(v9) = swift_isEscapingClosureAtFileLocation();
  swift_release();
  swift_release();
  swift_release();
  if ((v9 & 1) == 0)
  {
    long long aBlock = 0;
    uint64_t v15 = 0;
    os_log_type_t v16 = 0;
    uint64_t v17 = (void *)0xF000000000000000;
    uint64_t v18 = 0;
    uint64_t v19 = 0;
    type metadata accessor for SecureLocationsError(0);
    sub_1004A0BC8((uint64_t)_swiftEmptyArrayStorage);
    sub_100BB245C(&qword_10163F370, type metadata accessor for SecureLocationsError);
    _BridgedStoredNSError.init(_:userInfo:)();
    a2(&aBlock);

    goto LABEL_11;
  }
  __break(1u);
}

uint64_t sub_100BA5D18(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  uint64_t v11 = (char *)v18 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v19 = type metadata accessor for DispatchQoS();
  uint64_t v12 = *(void *)(v19 - 8);
  __chkstk_darwin(v19);
  uint64_t v14 = (char *)v18 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18[1] = *(void *)(a2 + 48);
  uint64_t v15 = (void *)swift_allocObject();
  void v15[2] = a1;
  v15[3] = a2;
  void v15[4] = a3;
  v15[5] = a4;
  aBlock[4] = sub_100BB6644;
  aBlock[5] = v15;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_1004B5480;
  aBlock[3] = &unk_1015EB6A0;
  os_log_type_t v16 = _Block_copy(aBlock);
  swift_retain();
  swift_retain();
  swift_retain();
  static DispatchQoS.unspecified.getter();
  void aBlock[7] = _swiftEmptyArrayStorage;
  sub_100BB245C((unint64_t *)&qword_10163B7E0, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
  sub_10000588C((uint64_t *)&unk_10163F350);
  sub_100062734((unint64_t *)&qword_10163B7F0, (uint64_t *)&unk_10163F350);
  dispatch thunk of SetAlgebra.init<A>(_:)();
  OS_dispatch_queue.async(group:qos:flags:execute:)();
  _Block_release(v16);
  (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v8);
  (*(void (**)(char *, uint64_t))(v12 + 8))(v14, v19);
  return swift_release();
}

void sub_100BA6000(uint64_t a1, uint64_t a2, void (*a3)(unsigned long long *, uint64_t), uint64_t a4)
{
  uint64_t v156 = a4;
  Class v155 = a3;
  uint64_t v157 = a1;
  uint64_t v150 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v149 = *(void *)(v150 - 8);
  __chkstk_darwin(v150);
  v146 = (char *)&v124 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v148 = type metadata accessor for DispatchQoS();
  uint64_t v147 = *(void *)(v148 - 8);
  __chkstk_darwin(v148);
  id v145 = (char *)&v124 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v144 = type metadata accessor for DispatchQoS.QoSClass();
  uint64_t v143 = *(void *)(v144 - 8);
  __chkstk_darwin(v144);
  uint64_t v142 = (char *)&v124 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v139 = type metadata accessor for HashAlgorithm();
  uint64_t v138 = *(void *)(v139 - 8);
  __chkstk_darwin(v139);
  v137 = (char *)&v124 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v158 = type metadata accessor for Logger();
  uint64_t v141 = *(void *)(v158 - 8);
  __chkstk_darwin(v158);
  v140 = (char *)&v124 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = sub_10000588C(&qword_10163BB80);
  __chkstk_darwin(v10 - 8);
  uint64_t v12 = (char *)&v124 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  unint64_t v153 = type metadata accessor for KeyAlignmentRecord();
  unint64_t v152 = *(void *)(v153 - 8);
  __chkstk_darwin(v153);
  uint64_t v151 = (uint64_t)&v124 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = sub_10000588C(&qword_10163B9F0);
  __chkstk_darwin(v14 - 8);
  os_log_type_t v16 = (char *)&v124 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v17 = type metadata accessor for OwnedBeaconRecord();
  uint64_t v18 = *(void *)(v17 - 8);
  __chkstk_darwin(v17);
  uint64_t v154 = (uint64_t)&v124 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v20 = sub_10000588C(&qword_101638CF0);
  __chkstk_darwin(v20 - 8);
  uint64_t v22 = (char *)&v124 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v23 = type metadata accessor for UUID();
  uint64_t v24 = *(void *)(v23 - 8);
  __chkstk_darwin(v23);
  uint64_t v26 = (char *)&v124 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100BA10B4((uint64_t)v22);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v24 + 48))(v22, 1, v23) == 1)
  {
    uint64_t v27 = &qword_101638CF0;
    uint64_t v28 = (uint64_t)v22;
LABEL_5:
    sub_10001DAB4(v28, v27);
    uint64_t v31 = (unsigned long long *)v158;
LABEL_6:
    if (qword_101637070 != -1) {
      swift_once();
    }
    sub_100010324((uint64_t)v31, (uint64_t)qword_10170EC30);
    int v32 = Logger.logObject.getter();
    os_log_type_t v33 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v32, v33))
    {
      uint64_t v34 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v34 = 0;
      _os_log_impl((void *)&_mh_execute_header, v32, v33, "keysForFriends: Can't get keys. Either VirtualMeDevice or KeyAlignmentRecord doesn't exist. ", v34, 2u);
      swift_slowDealloc();
    }

    if (qword_101637440 != -1) {
      swift_once();
    }
    swift_retain();
    sub_1010E156C(8, 0xD000000000000017, 0x8000000101415740);
    swift_release();
    uint64_t v35 = qword_10170F218;
    unint64_t v36 = *(NSObject **)(qword_10170F218 + 16);
    long long v37 = (void *)swift_allocObject();
    v37[2] = v35;
    v37[3] = 0xD000000000000019;
    v37[4] = 0x8000000101415760;
    unint64_t v38 = swift_allocObject();
    *(void *)(v38 + 16) = sub_100769408;
    *(void *)(v38 + 24) = v37;
    *(void *)&unsigned long long v168 = sub_1003B7AE0;
    *((void *)&v168 + 1) = v38;
    *(void *)&unsigned long long aBlock = _NSConcreteStackBlock;
    *((void *)&aBlock + 1) = 1107296256;
    *(void *)&unsigned long long v167 = sub_1000A70B0;
    *((void *)&v167 + 1) = &unk_1015EB718;
    unint64_t v39 = _Block_copy(&aBlock);
    swift_retain_n();
    swift_retain();
    swift_release();
    dispatch_sync(v36, v39);
    _Block_release(v39);
    LOBYTE(v36) = swift_isEscapingClosureAtFileLocation();
    swift_release();
    swift_release();
    swift_release();
    if ((v36 & 1) == 0)
    {
      unsigned long long aBlock = 0uLL;
      *(void *)&unsigned long long v167 = 0;
      *((void *)&v167 + 1) = 0xF000000000000000;
      unsigned long long v168 = 0uLL;
      type metadata accessor for SecureLocationsError(0);
      uint64_t v171 = 3;
      sub_1004A0BC8((uint64_t)_swiftEmptyArrayStorage);
      sub_100BB245C(&qword_10163F370, type metadata accessor for SecureLocationsError);
      _BridgedStoredNSError.init(_:userInfo:)();
      unint64_t v40 = (void *)v160;
      v155(&aBlock, v160);

LABEL_14:
      Transaction.capture()();
      return;
    }
    __break(1u);
    swift_once();
    sub_100010324((uint64_t)v31, (uint64_t)qword_10170EC30);
    unint64_t v46 = Logger.logObject.getter();
    os_log_type_t v47 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v46, v47))
    {
      uint64_t v48 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v48 = 0;
      _os_log_impl((void *)&_mh_execute_header, v46, v47, "keysForFriends: Error getting keys for meDeviceRecord", v48, 2u);
      swift_slowDealloc();
    }
    uint64_t v66 = (uint64_t)v39;

    if (qword_101637440 != -1) {
      swift_once();
    }
    *(void *)&unsigned long long aBlock = v38;
    swift_retain();
    swift_errorRetain();
    sub_10000588C(&qword_101638D40);
    p_unsigned long long aBlock = &aBlock;
    uint64_t v49 = String.init<A>(describing:)();
    sub_1010E156C(3, v49, v50);
    swift_release();
    swift_bridgeObjectRelease();
    uint64_t v51 = qword_10170F218;
    os_log_type_t v52 = *(NSObject **)(qword_10170F218 + 16);
    uint64_t v67 = (void *)swift_allocObject();
    _OWORD v67[2] = v51;
    v67[3] = 0xD000000000000012;
    v67[4] = 0x8000000101415780;
    uint64_t v30 = swift_allocObject();
    *(void *)(v30 + 16) = sub_100769408;
    *(void *)(v30 + 24) = v67;
    *(void *)&unsigned long long v168 = sub_1003B7AE0;
    *((void *)&v168 + 1) = v30;
    *(void *)&unsigned long long aBlock = _NSConcreteStackBlock;
    *((void *)&aBlock + 1) = 1107296256;
    uint64_t v31 = &v167;
    *(void *)&unsigned long long v167 = sub_1000A70B0;
    *((void *)&v167 + 1) = &unk_1015EB790;
    uint64_t v53 = _Block_copy(&aBlock);
    unint64_t v70 = *((void *)&v168 + 1);
    swift_retain_n();
    swift_retain();
    swift_release();
    dispatch_sync(v52, v53);
    _Block_release(v53);
    uint64_t isEscapingClosureAtFileLocation = swift_isEscapingClosureAtFileLocation();
    swift_release();
    swift_release();
    swift_release();
    if ((isEscapingClosureAtFileLocation & 1) == 0)
    {
      sub_10000584C();
      uint64_t v54 = v143;
      uint64_t v55 = v142;
      uint64_t v56 = v144;
      (*(void (**)(char *, void, uint64_t))(v143 + 104))(v142, enum case for DispatchQoS.QoSClass.default(_:), v144);
      unint64_t v57 = (void *)static OS_dispatch_queue.global(qos:)();
      (*(void (**)(char *, uint64_t))(v54 + 8))(v55, v56);
      uint64_t v58 = (void *)swift_allocObject();
      uint64_t v59 = v156;
      id v58[2] = v155;
      v58[3] = v59;
      v58[4] = v38;
      *(void *)&unsigned long long v168 = sub_100BB78B0;
      *((void *)&v168 + 1) = v58;
      *(void *)&unsigned long long aBlock = _NSConcreteStackBlock;
      *((void *)&aBlock + 1) = 1107296256;
      *(void *)&unsigned long long v167 = sub_1004B5480;
      *((void *)&v167 + 1) = &unk_1015EB7E0;
      uint64_t v60 = _Block_copy(&aBlock);
      swift_retain();
      swift_errorRetain();
      uint64_t v61 = v145;
      static DispatchQoS.unspecified.getter();
      uint64_t v160 = (uint64_t)_swiftEmptyArrayStorage;
      sub_100BB245C((unint64_t *)&qword_10163B7E0, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
      sub_10000588C((uint64_t *)&unk_10163F350);
      sub_100062734((unint64_t *)&qword_10163B7F0, (uint64_t *)&unk_10163F350);
      long long v62 = v146;
      uint64_t v63 = v150;
      dispatch thunk of SetAlgebra.init<A>(_:)();
      OS_dispatch_queue.async(group:qos:flags:execute:)();
      _Block_release(v60);

      swift_errorRelease();
      (*(void (**)(char *, uint64_t))(v149 + 8))(v62, v63);
      (*(void (**)(char *, uint64_t))(v147 + 8))(v61, v148);
      sub_100BB66F4(v151, (uint64_t (*)(void))type metadata accessor for KeyAlignmentRecord);
      sub_100BB66F4(v154, (uint64_t (*)(void))type metadata accessor for OwnedBeaconRecord);
      (*(void (**)(uint64_t, uint64_t))(v135 + 8))(v66, v136);
LABEL_30:
      swift_release();
      goto LABEL_14;
    }
    __break(1u);
    goto LABEL_33;
  }
  (*(void (**)(char *, char *, uint64_t))(v24 + 32))(v26, v22, v23);
  uint64_t v29 = v24;
  swift_retain();
  sub_100ACD178((uint64_t)v16);
  swift_release();
  uint64_t v30 = (uint64_t)v26;
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v18 + 48))(v16, 1, v17) == 1)
  {
    (*(void (**)(char *, uint64_t))(v29 + 8))(v26, v23);
    uint64_t v27 = &qword_10163B9F0;
    uint64_t v28 = (uint64_t)v16;
    goto LABEL_5;
  }
  uint64_t v135 = v29;
  uint64_t v136 = v23;
  uint64_t v41 = v154;
  sub_100BB668C((uint64_t)v16, v154, (uint64_t (*)(void))type metadata accessor for OwnedBeaconRecord);
  swift_retain();
  sub_100B6C53C((uint64_t)v12);
  swift_release();
  unint64_t v42 = v153;
  int v43 = (*(uint64_t (**)(char *, uint64_t, unint64_t))(v152 + 48))(v12, 1, v153);
  uint64_t v31 = (unsigned long long *)v158;
  if (v43 == 1)
  {
    sub_100BB66F4(v41, (uint64_t (*)(void))type metadata accessor for OwnedBeaconRecord);
    (*(void (**)(char *, uint64_t))(v135 + 8))(v26, v136);
    sub_10001DAB4((uint64_t)v12, &qword_10163BB80);
    goto LABEL_6;
  }
  uint64_t v44 = v151;
  sub_100BB668C((uint64_t)v12, v151, (uint64_t (*)(void))type metadata accessor for KeyAlignmentRecord);
  unint64_t v45 = *(void *)(v44 + *(int *)(v42 + 28));
  type metadata accessor for BeaconKeyManager(0);
  swift_retain();
  OSAllocatedUnfairLock.callAsFunction<A>(_:)();
  sub_101313134(v41, v45, 0, 0, 0xF000000000000000, &aBlock);
  uint64_t v133 = a2;
  unint64_t v132 = v45;
  uint64_t v128 = 0;
  unint64_t v38 = *((void *)&aBlock + 1);
  uint64_t v64 = (unsigned long long *)aBlock;
  unint64_t v65 = *((void *)&v167 + 1);
  uint64_t v66 = v167;
  uint64_t v67 = (void *)*((void *)&v168 + 1);
  uint64_t v68 = v168;
  uint64_t v130 = v169;
  unint64_t v129 = v170;
  swift_release();
  uint64_t isEscapingClosureAtFileLocation = v68;
  unint64_t v70 = v65;
  p_unsigned long long aBlock = v64;
  swift_release();
  unsigned long long aBlock = __PAIR128__(v38, (unint64_t)v64);
  unsigned long long v167 = __PAIR128__(v70, v66);
  unsigned long long v168 = __PAIR128__((unint64_t)v67, isEscapingClosureAtFileLocation);
  sub_10001CFB8(v130, v129);
  if (qword_101637070 != -1) {
LABEL_33:
  }
    swift_once();
  uint64_t v72 = sub_100010324((uint64_t)v31, (uint64_t)qword_10170EC30);
  uint64_t v73 = v140;
  (*(void (**)(char *, uint64_t, unsigned long long *))(v141 + 16))(v140, v72, v31);
  sub_100037A38((uint64_t)p_aBlock, v38);
  sub_1000361E0(v66, v70);
  sub_100037A38(isEscapingClosureAtFileLocation, (unint64_t)v67);
  sub_100037A38((uint64_t)p_aBlock, v38);
  sub_1000361E0(v66, v70);
  sub_100037A38(isEscapingClosureAtFileLocation, (unint64_t)v67);
  sub_100037A38((uint64_t)p_aBlock, v38);
  sub_1000361E0(v66, v70);
  sub_100037A38(isEscapingClosureAtFileLocation, (unint64_t)v67);
  sub_100037A38((uint64_t)p_aBlock, v38);
  sub_1000361E0(v66, v70);
  sub_100037A38(isEscapingClosureAtFileLocation, (unint64_t)v67);
  uint64_t v74 = isEscapingClosureAtFileLocation;
  uint64_t v75 = Logger.logObject.getter();
  LODWORD(v130) = static os_log_type_t.default.getter();
  BOOL v76 = os_log_type_enabled(v75, (os_log_type_t)v130);
  uint64_t v77 = v66;
  unint64_t v78 = (unint64_t)v67;
  unint64_t v79 = v38;
  uint64_t v80 = v77;
  uint64_t v134 = v30;
  unint64_t v153 = v78;
  unint64_t v152 = v70;
  if (!v76)
  {
    sub_100037A24((uint64_t)p_aBlock, v79);
    sub_10001CFB8(v80, v70);
    sub_100037A24(v74, v78);
    sub_100037A24((uint64_t)p_aBlock, v79);
    sub_10001CFB8(v80, v70);
    sub_100037A24(v74, v78);
    sub_100037A24((uint64_t)p_aBlock, v79);
    sub_10001CFB8(v80, v70);
    sub_100037A24(v74, v78);
    sub_100037A24((uint64_t)p_aBlock, v79);
    sub_10001CFB8(v80, v70);
    sub_100037A24(v74, v78);

    (*(void (**)(char *, unsigned long long *))(v141 + 8))(v73, v31);
    uint64_t v108 = p_aBlock;
    unint64_t v105 = v70;
    uint64_t v84 = v80;
    unint64_t v104 = v79;
    uint64_t v103 = (uint64_t)v108;
    goto LABEL_29;
  }
  os_log_t v125 = v75;
  uint64_t v81 = swift_slowAlloc();
  uint64_t v124 = swift_slowAlloc();
  uint64_t v171 = v124;
  *(_DWORD *)uint64_t v81 = 141558787;
  uint64_t v160 = 1752392040;
  UnsafeMutableRawBufferPointer.copyMemory(from:)();
  *(_WORD *)(v81 + 12) = 2081;
  unint64_t v129 = v81 + 14;
  uint64_t v160 = v80;
  unint64_t v161 = v70;
  sub_10043C6FC();
  uint64_t v82 = RawRepresentable<>.base64EncodedString(options:)();
  uint64_t v160 = sub_1008FA0F0(v82, v83, &v171);
  UnsafeMutableRawBufferPointer.copyMemory(from:)();
  swift_bridgeObjectRelease();
  sub_100037A24((uint64_t)p_aBlock, v79);
  sub_10001CFB8(v80, v70);
  sub_100037A24(v74, v78);
  uint64_t v126 = p_aBlock;
  unint64_t v127 = v79;
  sub_100037A24((uint64_t)p_aBlock, v79);
  sub_10001CFB8(v80, v70);
  unint64_t v129 = v74;
  sub_100037A24(v74, v78);
  *(_WORD *)(v81 + 22) = 2160;
  uint64_t v160 = 1752392040;
  uint64_t v84 = v80;
  UnsafeMutableRawBufferPointer.copyMemory(from:)();
  uint64_t v85 = (uint8_t *)v81;
  *(_WORD *)(v81 + 32) = 2081;
  sub_1000361E0(v80, v70);
  uint64_t v86 = v80;
  uint64_t v87 = v128;
  uint64_t v88 = sub_100A94760(v86, v70);
  if (!v87)
  {
    uint64_t v90 = v88;
    unint64_t v91 = v89;
    sub_10001CFB8(v84, v70);
    sub_100434E0C(v90, v91, &v160);
    uint64_t v92 = v160;
    unint64_t v93 = v161;
    uint64_t v94 = v138;
    long long v95 = v137;
    uint64_t v96 = v139;
    (*(void (**)(char *, void, uint64_t))(v138 + 104))(v137, enum case for HashAlgorithm.sha256(_:), v139);
    uint64_t v97 = Data.hash(algorithm:)();
    unint64_t v99 = v98;
    (*(void (**)(char *, uint64_t))(v94 + 8))(v95, v96);
    sub_10001CFB8(v92, v93);
    uint64_t v160 = v97;
    unint64_t v161 = v99;
    sub_1001D780C();
    uint64_t v100 = RawRepresentable<>.base64EncodedString(options:)();
    unint64_t v102 = v101;
    sub_10001CFB8(v97, v99);
    uint64_t v160 = sub_1008FA0F0(v100, v102, &v171);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    uint64_t v103 = (uint64_t)v126;
    unint64_t v104 = v127;
    sub_100037A24((uint64_t)v126, v127);
    unint64_t v105 = v152;
    sub_10001CFB8(v84, v152);
    uint64_t v74 = v129;
    unint64_t v106 = v153;
    sub_100037A24(v129, v153);
    sub_100037A24(v103, v104);
    sub_10001CFB8(v84, v105);
    sub_100037A24(v74, v106);
    os_log_t v107 = v125;
    _os_log_impl((void *)&_mh_execute_header, v125, (os_log_type_t)v130, "keysForFriends: from BeaconStore %{private,mask.hash}s locationId: %{private,mask.hash}s", v85, 0x2Au);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    (*(void (**)(char *, uint64_t))(v141 + 8))(v140, v158);
LABEL_29:
    uint64_t v131 = v84;
    sub_100BA83C8((uint64_t)&aBlock, v132);
    sub_10000584C();
    uint64_t v109 = v143;
    uint64_t v110 = v142;
    uint64_t v111 = v144;
    (*(void (**)(char *, void, uint64_t))(v143 + 104))(v142, enum case for DispatchQoS.QoSClass.default(_:), v144);
    uint64_t v158 = static OS_dispatch_queue.global(qos:)();
    (*(void (**)(char *, uint64_t))(v109 + 8))(v110, v111);
    uint64_t v112 = swift_allocObject();
    uint64_t v113 = v156;
    *(void *)(v112 + 16) = v155;
    *(void *)(v112 + 24) = v113;
    unsigned long long v114 = v167;
    *(_OWORD *)(v112 + 32) = aBlock;
    *(_OWORD *)(v112 + 48) = v114;
    *(_OWORD *)(v112 + 64) = v168;
    v164 = sub_100BB796C;
    uint64_t v165 = v112;
    uint64_t v160 = (uint64_t)_NSConcreteStackBlock;
    unint64_t v161 = 1107296256;
    v162 = sub_1004B5480;
    uint64_t v163 = &unk_1015EB830;
    uint64_t v115 = _Block_copy(&v160);
    sub_100037A38(v103, v104);
    sub_1000361E0(v84, v105);
    unint64_t v116 = v153;
    sub_100037A38(v74, v153);
    swift_retain();
    uint64_t v117 = v103;
    Class v118 = v145;
    static DispatchQoS.unspecified.getter();
    uint64_t v171 = (uint64_t)_swiftEmptyArrayStorage;
    sub_100BB245C((unint64_t *)&qword_10163B7E0, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
    sub_10000588C((uint64_t *)&unk_10163F350);
    sub_100062734((unint64_t *)&qword_10163B7F0, (uint64_t *)&unk_10163F350);
    uint64_t v119 = v74;
    Class v120 = v146;
    uint64_t v121 = v150;
    dispatch thunk of SetAlgebra.init<A>(_:)();
    v122 = (void *)v158;
    OS_dispatch_queue.async(group:qos:flags:execute:)();
    _Block_release(v115);

    sub_100037A24(v117, v104);
    sub_10001CFB8(v131, v152);
    sub_100037A24(v119, v116);
    (*(void (**)(char *, uint64_t))(v149 + 8))(v120, v121);
    (*(void (**)(char *, uint64_t))(v147 + 8))(v118, v148);
    sub_100BB66F4(v151, (uint64_t (*)(void))type metadata accessor for KeyAlignmentRecord);
    sub_100BB66F4(v154, (uint64_t (*)(void))type metadata accessor for OwnedBeaconRecord);
    (*(void (**)(uint64_t, uint64_t))(v135 + 8))(v134, v136);
    goto LABEL_30;
  }
  sub_100037A24((uint64_t)v126, v127);
  sub_10001CFB8(v84, v70);
  sub_100037A24(v129, v153);
  sub_10001CFB8(v84, v70);
  uint64_t v160 = 0;
  unint64_t v161 = 0xE000000000000000;
  _StringGuts.grow(_:)(35);
  v123._countAndFlagsBits = 0xD000000000000021;
  v123._object = (void *)0x80000001013F3B70;
  String.append(_:)(v123);
  uint64_t v159 = v87;
  sub_10000588C(&qword_101638D40);
  _print_unlocked<A, B>(_:_:)();
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

uint64_t sub_100BA7AB0@<X0>(uint64_t a1@<X8>)
{
  uint64_t v65 = a1;
  uint64_t v1 = type metadata accessor for URL();
  uint64_t v59 = *(void *)(v1 - 8);
  uint64_t v60 = v1;
  __chkstk_darwin(v1);
  uint64_t v56 = (char *)v54 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v3 = type metadata accessor for UUID();
  uint64_t v57 = *(void *)(v3 - 8);
  uint64_t v58 = v3;
  __chkstk_darwin(v3);
  uint64_t v63 = (char *)v54 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v62 = sub_10000588C(&qword_101660B90);
  uint64_t v5 = __chkstk_darwin(v62);
  uint64_t v61 = (char *)v54 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5);
  uint64_t v8 = (char *)v54 - v7;
  uint64_t v9 = type metadata accessor for SecureLocationsCachedSharingKey(0);
  uint64_t v10 = *(void *)(v9 - 8);
  __chkstk_darwin(v9);
  uint64_t v12 = (char *)v54 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = type metadata accessor for DispatchPredicate();
  uint64_t v14 = *(void *)(v13 - 8);
  __chkstk_darwin(v13);
  os_log_type_t v16 = (void **)((char *)v54 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0));
  if (qword_101637070 != -1) {
    swift_once();
  }
  uint64_t v17 = type metadata accessor for Logger();
  uint64_t v64 = sub_100010324(v17, (uint64_t)qword_10170EC30);
  uint64_t v18 = Logger.logObject.getter();
  os_log_type_t v19 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v18, v19))
  {
    uint64_t v20 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v20 = 0;
    _os_log_impl((void *)&_mh_execute_header, v18, v19, "shareKey: getCachedSharingKeys", v20, 2u);
    swift_slowDealloc();
  }

  uint64_t v21 = v66;
  uint64_t v22 = *(void **)(v66 + 48);
  *os_log_type_t v16 = v22;
  (*(void (**)(void *, void, uint64_t))(v14 + 104))(v16, enum case for DispatchPredicate.onQueue(_:), v13);
  id v23 = v22;
  LOBYTE(v22) = _dispatchPreconditionTest(_:)();
  (*(void (**)(void *, uint64_t))(v14 + 8))(v16, v13);
  if ((v22 & 1) == 0)
  {
    __break(1u);
    goto LABEL_20;
  }
  uint64_t v24 = v21 + OBJC_IVAR____TtC12searchpartyd25SecureLocationsKeyManager_cachedSharingKey;
  swift_beginAccess();
  sub_10001D074(v24, (uint64_t)v8, &qword_101660B90);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48))(v8, 1, v9) == 1)
  {
    sub_10001DAB4((uint64_t)v8, &qword_101660B90);
    sub_10000588C(&qword_101644320);
    OS_dispatch_queue.sync<A>(execute:)();
    if (v69)
    {
      v54[1] = 0;
      uint64_t v55 = v24;
      uint64_t v25 = *(void **)(v21 + 32);
      swift_retain();
      uint64_t v26 = String.utf8Data.getter();
      unint64_t v28 = v27;
      swift_bridgeObjectRelease();
      uint64_t v68 = v26;
      unint64_t v69 = v28;
      sub_1000362FC();
      DataProtocol.stableUUID.getter();
      sub_10001CFB8(v26, v28);
      uint64_t v54[2] = v25;
      uint64_t v12 = (char *)v25[20];
      if (qword_101636FB0 == -1)
      {
LABEL_9:
        uint64_t v29 = v60;
        uint64_t v30 = sub_100010324(v60, (uint64_t)qword_10170EA90);
        uint64_t v31 = v59;
        int v32 = v56;
        (*(void (**)(char *, uint64_t, uint64_t))(v59 + 16))(v56, v30, v29);
        v33._object = (void *)0x8000000101402BA0;
        v33._countAndFlagsBits = 0xD000000000000014;
        prohibitAsyncContext(functionName:)(v33);
        uint64_t v68 = v9;
        sub_10000588C(&qword_10165A780);
        uint64_t v34 = (void *)String.init<A>(describing:)();
        unint64_t v36 = v35;
        __chkstk_darwin(v54[0]);
        long long v37 = v63;
        v54[-6] = v12;
        v54[-5] = v37;
        v54[-4] = v32;
        v54[-3] = v34;
        v54[-2] = v36;
        uint64_t v38 = (uint64_t)v61;
        OS_dispatch_queue.sync<A>(execute:)();
        swift_bridgeObjectRelease();
        (*(void (**)(char *, uint64_t))(v31 + 8))(v32, v29);
        uint64_t v39 = v38;
        swift_release();
        (*(void (**)(void *, uint64_t))(v57 + 8))(v37, v58);
        uint64_t v40 = v55;
        swift_beginAccess();
        sub_100062604(v38, v40, &qword_101660B90);
        swift_endAccess();
        swift_retain_n();
        uint64_t v41 = Logger.logObject.getter();
        os_log_type_t v42 = static os_log_type_t.default.getter();
        if (os_log_type_enabled(v41, v42))
        {
          int v43 = (uint8_t *)swift_slowAlloc();
          uint64_t v68 = swift_slowAlloc();
          *(_DWORD *)int v43 = 136315138;
          sub_10001D074(v40, v39, &qword_101660B90);
          uint64_t v44 = String.init<A>(describing:)();
          uint64_t v67 = sub_1008FA0F0(v44, v45, &v68);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_release_n();
          swift_bridgeObjectRelease();
          _os_log_impl((void *)&_mh_execute_header, v41, v42, "shareKey: Returning localstorage cached sharing keys %s", v43, 0xCu);
          swift_arrayDestroy();
          swift_slowDealloc();
          swift_slowDealloc();
        }
        else
        {

          swift_release_n();
        }
        return sub_10001D074(v40, v65, &qword_101660B90);
      }
LABEL_20:
      swift_once();
      goto LABEL_9;
    }
    uint64_t v51 = Logger.logObject.getter();
    os_log_type_t v52 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v51, v52))
    {
      uint64_t v53 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v53 = 0;
      _os_log_impl((void *)&_mh_execute_header, v51, v52, "shareKey: no myPersonID", v53, 2u);
      swift_slowDealloc();
    }

    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v10 + 56))(v65, 1, 1, v9);
  }
  else
  {
    sub_100BB668C((uint64_t)v8, (uint64_t)v12, type metadata accessor for SecureLocationsCachedSharingKey);
    unint64_t v46 = Logger.logObject.getter();
    os_log_type_t v47 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v46, v47))
    {
      uint64_t v48 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v48 = 0;
      _os_log_impl((void *)&_mh_execute_header, v46, v47, "shareKey: returning memory cached sharing keys", v48, 2u);
      swift_slowDealloc();
    }

    uint64_t v49 = v65;
    sub_100BB668C((uint64_t)v12, v65, type metadata accessor for SecureLocationsCachedSharingKey);
    return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(v10 + 56))(v49, 0, 1, v9);
  }
}

void sub_100BA83C8(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2;
  uint64_t v40 = a2;
  uint64_t v5 = sub_10000588C(&qword_101660B90);
  uint64_t v6 = __chkstk_darwin(v5 - 8);
  uint64_t v41 = (uint64_t)&v36 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  uint64_t v9 = (char *)&v36 - v8;
  uint64_t v10 = type metadata accessor for UUID();
  uint64_t v37 = *(void *)(v10 - 8);
  uint64_t v38 = v10;
  __chkstk_darwin(v10);
  uint64_t v12 = (char *)&v36 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = (int *)type metadata accessor for SecureLocationsCachedSharingKey(0);
  uint64_t v39 = *((void *)v13 - 1);
  __chkstk_darwin(v13);
  uint64_t v15 = (char *)&v36 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = type metadata accessor for DispatchPredicate();
  uint64_t v17 = *(void *)(v16 - 8);
  __chkstk_darwin(v16);
  os_log_type_t v19 = (uint64_t *)((char *)&v36 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v20 = *(void **)(v3 + 48);
  *os_log_type_t v19 = v20;
  (*(void (**)(void *, void, uint64_t))(v17 + 104))(v19, enum case for DispatchPredicate.onQueue(_:), v16);
  id v21 = v20;
  LOBYTE(v20) = _dispatchPreconditionTest(_:)();
  (*(void (**)(void *, uint64_t))(v17 + 8))(v19, v16);
  if ((v20 & 1) == 0)
  {
    __break(1u);
    goto LABEL_11;
  }
  sub_10000588C(&qword_101644320);
  OS_dispatch_queue.sync<A>(execute:)();
  if (v43)
  {
    uint64_t v22 = String.utf8Data.getter();
    unint64_t v24 = v23;
    swift_bridgeObjectRelease();
    uint64_t v42 = v22;
    unint64_t v43 = v24;
    sub_1000362FC();
    DataProtocol.stableUUID.getter();
    sub_10001CFB8(v22, v24);
    sub_1006CA500((void *)a1, (void (*)(void, void))sub_1006CD4D8, (void (*)(uint64_t, uint64_t))sub_1000361E0, (void (*)(uint64_t, uint64_t))sub_100037A38);
    if (qword_101636FB0 == -1)
    {
LABEL_4:
      uint64_t v25 = type metadata accessor for URL();
      uint64_t v26 = sub_100010324(v25, (uint64_t)qword_10170EA90);
      (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v25 - 8) + 16))(v15, v26, v25);
      (*(void (**)(char *, char *, uint64_t))(v37 + 32))(&v15[v13[5]], v12, v38);
      unint64_t v27 = &v15[v13[6]];
      long long v28 = *(_OWORD *)(a1 + 16);
      *(_OWORD *)unint64_t v27 = *(_OWORD *)a1;
      *((_OWORD *)v27 + 1) = v28;
      *((_OWORD *)v27 + 2) = *(_OWORD *)(a1 + 32);
      *(void *)&v15[v13[7]] = v40;
      sub_100BB7A10((uint64_t)v15, (uint64_t)v9, type metadata accessor for SecureLocationsCachedSharingKey);
      (*(void (**)(char *, void, uint64_t, int *))(v39 + 56))(v9, 0, 1, v13);
      uint64_t v29 = v41;
      sub_10001D608((uint64_t)v9, v41, &qword_101660B90);
      uint64_t v30 = v3 + OBJC_IVAR____TtC12searchpartyd25SecureLocationsKeyManager_cachedSharingKey;
      swift_beginAccess();
      sub_100062604(v29, v30, &qword_101660B90);
      swift_endAccess();
      uint64_t v31 = type metadata accessor for Transaction();
      __chkstk_darwin(v31);
      *(&v36 - 2) = v3;
      *(&v36 - 1) = (uint64_t)v15;
      static Transaction.named<A>(_:with:)();
      sub_100BB66F4((uint64_t)v15, type metadata accessor for SecureLocationsCachedSharingKey);
      return;
    }
LABEL_11:
    swift_once();
    goto LABEL_4;
  }
  if (qword_101637070 != -1) {
    swift_once();
  }
  uint64_t v32 = type metadata accessor for Logger();
  sub_100010324(v32, (uint64_t)qword_10170EC30);
  Swift::String v33 = Logger.logObject.getter();
  os_log_type_t v34 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v33, v34))
  {
    uint64_t v35 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v35 = 0;
    _os_log_impl((void *)&_mh_execute_header, v33, v34, "shareKey: Unable to get myPersonID to update cachedSharingKeys", v35, 2u);
    swift_slowDealloc();
  }
}

uint64_t sub_100BA89AC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_release();
}

void sub_100BA8A24(uint64_t a1)
{
  uint64_t v2 = sub_10000588C(&qword_10165A778);
  __chkstk_darwin(v2);
  uint64_t v4 = (uint64_t *)((char *)&v17 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0));
  sub_10001D074(a1, (uint64_t)v4, &qword_10165A778);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v5 = *v4;
    if (qword_101637070 != -1) {
      swift_once();
    }
    uint64_t v6 = type metadata accessor for Logger();
    sub_100010324(v6, (uint64_t)qword_10170EC30);
    swift_errorRetain();
    swift_errorRetain();
    uint64_t v7 = Logger.logObject.getter();
    os_log_type_t v8 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v7, v8))
    {
      uint64_t v9 = (uint8_t *)swift_slowAlloc();
      uint64_t v10 = swift_slowAlloc();
      uint64_t v17 = v5;
      uint64_t v18 = v10;
      *(_DWORD *)uint64_t v9 = 136315138;
      swift_errorRetain();
      sub_10000588C(&qword_101638D40);
      uint64_t v11 = String.init<A>(describing:)();
      uint64_t v17 = sub_1008FA0F0(v11, v12, &v18);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      swift_errorRelease();
      swift_errorRelease();
      _os_log_impl((void *)&_mh_execute_header, v7, v8, "shareKey: Error saving sharing keys locally %s", v9, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      swift_errorRelease();
    }
    else
    {
      swift_errorRelease();
      swift_errorRelease();
      swift_errorRelease();
    }
  }
  else
  {
    if (qword_101637070 != -1) {
      swift_once();
    }
    uint64_t v13 = type metadata accessor for Logger();
    sub_100010324(v13, (uint64_t)qword_10170EC30);
    uint64_t v14 = Logger.logObject.getter();
    os_log_type_t v15 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v14, v15))
    {
      uint64_t v16 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v16 = 0;
      _os_log_impl((void *)&_mh_execute_header, v14, v15, "shareKey: Successfully saved sharing keys locally", v16, 2u);
      swift_slowDealloc();
    }

    sub_10001DAB4((uint64_t)v4, &qword_10165A778);
  }
  Transaction.capture()();
}

void sub_100BA8D58()
{
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for URL();
  uint64_t v50 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  uint64_t v4 = (char *)&v47 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = type metadata accessor for UUID();
  uint64_t v48 = *(void *)(v5 - 8);
  uint64_t v49 = v5;
  __chkstk_darwin(v5);
  uint64_t v7 = (char *)&v47 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = sub_10000588C(&qword_10164DBB0);
  __chkstk_darwin(v8 - 8);
  uint64_t v10 = (char *)&v47 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = sub_10000588C(&qword_101660B90);
  __chkstk_darwin(v11 - 8);
  uint64_t v13 = (char *)&v47 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = type metadata accessor for DispatchPredicate();
  uint64_t v15 = *(void *)(v14 - 8);
  __chkstk_darwin(v14);
  uint64_t v17 = (uint64_t *)((char *)&v47 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v18 = *(void **)(v1 + 48);
  *uint64_t v17 = v18;
  (*(void (**)(void *, void, uint64_t))(v15 + 104))(v17, enum case for DispatchPredicate.onQueue(_:), v14);
  id v19 = v18;
  LOBYTE(v18) = _dispatchPreconditionTest(_:)();
  (*(void (**)(void *, uint64_t))(v15 + 8))(v17, v14);
  if (v18)
  {
    uint64_t v20 = type metadata accessor for SecureLocationsCachedSharingKey(0);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v20 - 8) + 56))(v13, 1, 1, v20);
    uint64_t v21 = v1 + OBJC_IVAR____TtC12searchpartyd25SecureLocationsKeyManager_cachedSharingKey;
    swift_beginAccess();
    sub_100062604((uint64_t)v13, v21, &qword_101660B90);
    swift_endAccess();
    if (qword_101637070 == -1) {
      goto LABEL_3;
    }
  }
  else
  {
    __break(1u);
  }
  swift_once();
LABEL_3:
  uint64_t v22 = type metadata accessor for Logger();
  sub_100010324(v22, (uint64_t)qword_10170EC30);
  unint64_t v23 = Logger.logObject.getter();
  os_log_type_t v24 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v23, v24))
  {
    uint64_t v25 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v25 = 0;
    _os_log_impl((void *)&_mh_execute_header, v23, v24, "shareKey: Invalidated memory cached key", v25, 2u);
    swift_slowDealloc();
  }

  sub_10000588C(&qword_101644320);
  OS_dispatch_queue.sync<A>(execute:)();
  if (v52)
  {
    uint64_t v26 = type metadata accessor for TaskPriority();
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v26 - 8) + 56))(v10, 1, 1, v26);
    unint64_t v27 = (void *)swift_allocObject();
    void v27[2] = 0;
    v27[3] = 0;
    v27[4] = v1;
    swift_retain();
    sub_1008F5E44((uint64_t)v10, (uint64_t)&unk_10165A768, (uint64_t)v27);
    swift_release();
    uint64_t v28 = *(void *)(v1 + 32);
    swift_retain();
    uint64_t v29 = String.utf8Data.getter();
    unint64_t v31 = v30;
    swift_bridgeObjectRelease();
    uint64_t v51 = v29;
    unint64_t v52 = v31;
    sub_1000362FC();
    DataProtocol.stableUUID.getter();
    sub_10001CFB8(v29, v31);
    uint64_t v32 = *(void *)(v28 + 160);
    if (qword_101636FB0 != -1) {
      swift_once();
    }
    uint64_t v33 = sub_100010324(v2, (uint64_t)qword_10170EA90);
    uint64_t v34 = v50;
    uint64_t v35 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v50 + 16))(v4, v33, v2);
    __chkstk_darwin(v35);
    *(&v47 - 4) = v32;
    *(&v47 - 3) = (uint64_t)v7;
    *(&v47 - 2) = (uint64_t)v4;
    OS_dispatch_queue.sync<A>(execute:)();
    int v36 = v51;
    (*(void (**)(char *, uint64_t))(v34 + 8))(v4, v2);
    swift_release();
    (*(void (**)(char *, uint64_t))(v48 + 8))(v7, v49);
    uint64_t v37 = Logger.logObject.getter();
    os_log_type_t v38 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v37, v38))
    {
      uint64_t v39 = (uint8_t *)swift_slowAlloc();
      *(_DWORD *)uint64_t v39 = 67109120;
      LODWORD(v51) = v36;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      uint64_t v40 = "shareKey: Removed localstorage cached sharing key %{BOOL}d";
      uint64_t v41 = v37;
      os_log_type_t v42 = v38;
      unint64_t v43 = v39;
      uint32_t v44 = 8;
LABEL_12:
      _os_log_impl((void *)&_mh_execute_header, v41, v42, v40, v43, v44);
      swift_slowDealloc();
    }
  }
  else
  {
    uint64_t v37 = Logger.logObject.getter();
    os_log_type_t v45 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v37, v45))
    {
      unint64_t v46 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)unint64_t v46 = 0;
      uint64_t v40 = "shareKey: unable to get myPersonID to invalidate localstorage cached keys";
      uint64_t v41 = v37;
      os_log_type_t v42 = v45;
      unint64_t v43 = v46;
      uint32_t v44 = 2;
      goto LABEL_12;
    }
  }
}

uint64_t sub_100BA943C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v4[8] = a4;
  uint64_t v5 = type metadata accessor for UUID();
  v4[9] = v5;
  v4[10] = *(void *)(v5 - 8);
  v4[11] = swift_task_alloc();
  uint64_t v6 = (void *)swift_task_alloc();
  v4[12] = v6;
  uint64_t v7 = sub_10000588C(&qword_10165A770);
  *uint64_t v6 = v4;
  v6[1] = sub_100BA9560;
  return unsafeBlocking<A>(_:)(v4 + 4, sub_100BA9AD8, 0, v7);
}

uint64_t sub_100BA9560()
{
  swift_task_dealloc();
  return _swift_task_switch(sub_100BA965C, 0, 0);
}

uint64_t sub_100BA965C()
{
  uint64_t v32 = v0;
  uint64_t v1 = v0[4];
  if (v0[5])
  {
    swift_errorRetain();
    if (qword_101637070 == -1)
    {
LABEL_3:
      uint64_t v2 = type metadata accessor for Logger();
      sub_100010324(v2, (uint64_t)qword_10170EC30);
      swift_errorRetain();
      swift_errorRetain();
      uint64_t v3 = Logger.logObject.getter();
      os_log_type_t v4 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v3, v4))
      {
        uint64_t v5 = (uint8_t *)swift_slowAlloc();
        unint64_t v31 = (void *)swift_slowAlloc();
        *(_DWORD *)uint64_t v5 = 136315138;
        v0[6] = v1;
        swift_errorRetain();
        sub_10000588C(&qword_101638D40);
        uint64_t v6 = String.init<A>(describing:)();
        v0[7] = sub_1008FA0F0(v6, v7, (uint64_t *)&v31);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        sub_10015B4A8(v1, 1);
        sub_10015B4A8(v1, 1);
        _os_log_impl((void *)&_mh_execute_header, v3, v4, "Unable to get follower handles %s", v5, 0xCu);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();

        sub_10015B4A8(v1, 1);
      }
      else
      {
        sub_10015B4A8(v1, 1);
        sub_10015B4A8(v1, 1);
        swift_errorRelease();
      }
      sub_10015B4A8(v1, 1);
      goto LABEL_18;
    }
LABEL_24:
    swift_once();
    goto LABEL_3;
  }
  int64_t v8 = *(void *)(v1 + 16);
  uint64_t v9 = _swiftEmptyArrayStorage;
  if (v8)
  {
    uint64_t v10 = v0[10];
    unint64_t v31 = _swiftEmptyArrayStorage;
    sub_1000B7034(0, v8, 0);
    uint64_t v9 = _swiftEmptyArrayStorage;
    uint64_t v12 = sub_10115FE18(v1);
    char v14 = v13 & 1;
    uint64_t v28 = v1 + 56;
    uint64_t v27 = v1;
    while ((v12 & 0x8000000000000000) == 0 && v12 < 1 << *(unsigned char *)(v1 + 32))
    {
      if (((*(void *)(v28 + (((unint64_t)v12 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v12) & 1) == 0) {
        goto LABEL_22;
      }
      if (*(_DWORD *)(v1 + 36) != v11) {
        goto LABEL_23;
      }
      char v29 = v14;
      uint64_t v30 = v11;
      uint64_t v15 = v0;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      uint64_t v16 = String.utf8Data.getter();
      unint64_t v18 = v17;
      void v15[2] = v16;
      v15[3] = v17;
      sub_1000362FC();
      DataProtocol.stableUUID.getter();
      sub_10001CFB8(v16, v18);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      unint64_t v31 = v9;
      unint64_t v20 = v9[2];
      unint64_t v19 = v9[3];
      if (v20 >= v19 >> 1)
      {
        sub_1000B7034(v19 > 1, v20 + 1, 1);
        uint64_t v9 = v31;
      }
      uint64_t v21 = v15[11];
      uint64_t v22 = v15[9];
      v9[2] = v20 + 1;
      (*(void (**)(unint64_t, uint64_t, uint64_t))(v10 + 32))((unint64_t)v9+ ((*(unsigned __int8 *)(v10 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v10 + 80))+ *(void *)(v10 + 72) * v20, v21, v22);
      uint64_t v1 = v27;
      uint64_t v23 = sub_10052CB9C(v12, v30, v29 & 1, v27);
      uint64_t v12 = v23;
      char v14 = v24 & 1;
      --v8;
      uint64_t v0 = v15;
      if (!v8)
      {
        sub_1001A1CB8(v23, v11, v14);
        goto LABEL_15;
      }
    }
    __break(1u);
LABEL_22:
    __break(1u);
LABEL_23:
    __break(1u);
    goto LABEL_24;
  }
LABEL_15:
  swift_retain();
  KeyedThrottle.clearThrottleForKeysExcept(keys:)((Swift::OpaquePointer)v9);
  sub_10015B4A8(v1, 0);
  swift_release();
  swift_bridgeObjectRelease();
LABEL_18:
  swift_task_dealloc();
  uint64_t v25 = (uint64_t (*)(void))v0[1];
  return v25();
}

uint64_t sub_100BA9AD8@<X0>(uint64_t a1@<X8>)
{
  sub_10000588C(&qword_101648048);
  unsafeFromAsyncTask<A>(_:)();
  uint64_t v2 = qword_101636FC8;
  uint64_t v3 = swift_bridgeObjectRetain();
  if (v2 != -1) {
    uint64_t v3 = swift_once();
  }
  __chkstk_darwin(v3);
  OSAllocatedUnfairLock.callAsFunction<A>(_:)();
  uint64_t result = sub_10015B4A8(v5, 0);
  *(void *)a1 = v5;
  *(unsigned char *)(a1 + 8) = 0;
  return result;
}

uint64_t sub_100BA9C0C@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v2 = type metadata accessor for DispatchTime();
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t v4 = __chkstk_darwin(v2);
  uint64_t v6 = (char *)&v26 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v4);
  int64_t v8 = (char *)&v26 - v7;
  uint64_t v9 = dispatch_group_create();
  dispatch_group_enter(v9);
  uint64_t v10 = (void *)swift_allocObject();
  _OWORD v10[2] = 0;
  v10[3] = 0;
  v10[4] = 0;
  v10[6] = 0;
  v10[7] = 0;
  v10[5] = 0xF000000000000000;
  uint64_t v11 = swift_allocObject();
  *(void *)(v11 + 16) = v10;
  *(void *)(v11 + 24) = v9;
  swift_retain();
  uint64_t v12 = v9;
  sub_100BA4560();
  swift_release();
  static DispatchTime.now()();
  + infix(_:_:)();
  char v13 = *(void (**)(char *, uint64_t))(v3 + 8);
  v13(v6, v2);
  OS_dispatch_group.wait(timeout:)();
  v13(v8, v2);
  if (static DispatchTimeoutResult.== infix(_:_:)())
  {
    if (qword_101637070 != -1) {
      swift_once();
    }
    uint64_t v14 = type metadata accessor for Logger();
    sub_100010324(v14, (uint64_t)qword_10170EC30);
    uint64_t v15 = Logger.logObject.getter();
    os_log_type_t v16 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v15, v16))
    {
      unint64_t v17 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)unint64_t v17 = 0;
      _os_log_impl((void *)&_mh_execute_header, v15, v16, "keysForFriends: sync - timed out waiting for keys", v17, 2u);
      swift_slowDealloc();
      unint64_t v18 = v12;
      uint64_t v12 = v15;
    }
    else
    {
      unint64_t v18 = v15;
    }
  }
  swift_beginAccess();
  uint64_t v19 = v10[2];
  uint64_t v20 = v10[3];
  uint64_t v21 = v10[4];
  unint64_t v22 = v10[5];
  uint64_t v23 = v10[6];
  uint64_t v24 = v10[7];
  sub_100BB60DC(v19, v20, v21, v22, v23, v24, (void (*)(void))sub_1006CD4D8, (void (*)(uint64_t, unint64_t))sub_1000361E0, (void (*)(uint64_t, uint64_t))sub_100037A38);
  uint64_t result = swift_release();
  *a1 = v19;
  a1[1] = v20;
  a1[2] = v21;
  a1[3] = v22;
  a1[4] = v23;
  a1[5] = v24;
  return result;
}

void sub_100BA9F38(uint64_t a1, uint64_t a2, void *a3, NSObject *a4)
{
  uint64_t v7 = (uint64_t)(a3 + 2);
  swift_beginAccess();
  uint64_t v8 = a3[2];
  uint64_t v9 = a3[3];
  uint64_t v10 = a3[4];
  unint64_t v11 = a3[5];
  uint64_t v13 = a3[6];
  uint64_t v12 = a3[7];
  sub_10001D608(a1, v7, &qword_101649698);
  sub_100BB608C(a1, (void (*)(void))sub_1006CD4D8, (void (*)(uint64_t, unint64_t))sub_1000361E0, (void (*)(uint64_t, uint64_t))sub_100037A38);
  sub_100BB60DC(v8, v9, v10, v11, v13, v12, (void (*)(void))sub_10015AF5C, (void (*)(uint64_t, unint64_t))sub_10001CFB8, (void (*)(uint64_t, uint64_t))sub_100037A24);
  dispatch_group_leave(a4);
}

uint64_t sub_100BAA064(uint64_t a1, uint64_t a2, uint64_t a3, void *a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t (*a8)(uint64_t), uint64_t a9)
{
  uint64_t v56 = a5;
  unint64_t v57 = a6;
  uint64_t v15 = type metadata accessor for HashAlgorithm();
  uint64_t v16 = *(void *)(v15 - 8);
  __chkstk_darwin(v15);
  unint64_t v18 = (char *)v53 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10001D608(a1, (uint64_t)&v60, &qword_101649698);
  if (*((void *)&v61 + 1) >> 60 == 15)
  {
    if (qword_101637070 != -1) {
      swift_once();
    }
    uint64_t v19 = type metadata accessor for Logger();
    sub_100010324(v19, (uint64_t)qword_10170EC30);
    swift_errorRetain();
    swift_errorRetain();
    uint64_t v20 = Logger.logObject.getter();
    os_log_type_t v21 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v20, v21))
    {
      uint64_t v22 = swift_slowAlloc();
      *(void *)&v63[0] = swift_slowAlloc();
      *(_DWORD *)uint64_t v22 = 136315394;
      *(void *)&v64[0] = sub_1008FA0F0(0xD000000000000042, 0x8000000101415930, (uint64_t *)v63);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v22 + 12) = 2080;
      *(void *)&v64[0] = a2;
      swift_errorRetain();
      sub_10000588C((uint64_t *)&unk_101638EB0);
      uint64_t v23 = String.init<A>(describing:)();
      *(void *)&v64[0] = sub_1008FA0F0(v23, v24, (uint64_t *)v63);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      swift_errorRelease();
      swift_errorRelease();
      _os_log_impl((void *)&_mh_execute_header, v20, v21, "shareKey: Error getting key for %s, %s", (uint8_t *)v22, 0x16u);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      swift_errorRelease();
      swift_errorRelease();
    }

    return a8(a2);
  }
  else
  {
    v53[1] = a7;
    uint64_t v55 = a9;
    v63[0] = v60;
    v63[1] = v61;
    v63[2] = v62;
    v64[0] = v61;
    long long v25 = v61;
    uint64_t v54 = a1;
    sub_100BB608C(a1, (void (*)(void))sub_1006CD4D8, (void (*)(uint64_t, unint64_t))sub_1000361E0, (void (*)(uint64_t, uint64_t))sub_100037A38);
    sub_100061E54((uint64_t)v64);
    uint64_t v26 = sub_100A94760(v25, *((unint64_t *)&v25 + 1));
    unint64_t v28 = v27;
    char v29 = a8;
    sub_1000CE9DC((uint64_t)v64);
    sub_100434E0C(v26, v28, v59);
    uint64_t v30 = v59[0];
    unint64_t v31 = v59[1];
    (*(void (**)(char *, void, uint64_t))(v16 + 104))(v18, enum case for HashAlgorithm.sha256(_:), v15);
    uint64_t v32 = Data.hash(algorithm:)();
    unint64_t v34 = v33;
    (*(void (**)(char *, uint64_t))(v16 + 8))(v18, v15);
    sub_10001CFB8(v30, v31);
    Swift::String v35 = Data.base64EncodedString(options:)(0);
    sub_10001CFB8(v32, v34);
    BOOL v36 = v35._countAndFlagsBits == a3 && v35._object == a4;
    if (v36 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
    {
      uint64_t v37 = v29;
      swift_bridgeObjectRelease();
      uint64_t v38 = v54;
      if (qword_101637070 != -1) {
        swift_once();
      }
      uint64_t v39 = type metadata accessor for Logger();
      sub_100010324(v39, (uint64_t)qword_10170EC30);
      uint64_t v40 = Logger.logObject.getter();
      os_log_type_t v41 = static os_log_type_t.debug.getter();
      if (os_log_type_enabled(v40, v41))
      {
        os_log_type_t v42 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)os_log_type_t v42 = 0;
        _os_log_impl((void *)&_mh_execute_header, v40, v41, "shareKey: all good - subscribedId is same as currentLocationId.", v42, 2u);
        swift_slowDealloc();
      }

      v37(0);
      return sub_100BB608C(v38, (void (*)(void))sub_10015AF5C, (void (*)(uint64_t, unint64_t))sub_10001CFB8, (void (*)(uint64_t, uint64_t))sub_100037A24);
    }
    else
    {
      uint64_t v44 = (uint64_t)v29;
      if (qword_101637070 != -1) {
        swift_once();
      }
      uint64_t v45 = type metadata accessor for Logger();
      sub_100010324(v45, (uint64_t)qword_10170EC30);
      swift_bridgeObjectRetain_n();
      unint64_t v46 = v57;
      swift_bridgeObjectRetain_n();
      swift_bridgeObjectRetain();
      uint64_t v47 = Logger.logObject.getter();
      os_log_type_t v48 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v47, v48))
      {
        uint64_t v49 = swift_slowAlloc();
        v53[0] = swift_slowAlloc();
        v59[0] = v53[0];
        *(_DWORD *)uint64_t v49 = 136315650;
        swift_bridgeObjectRetain();
        uint64_t v58 = sub_1008FA0F0(a3, (unint64_t)a4, v59);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease_n();
        *(_WORD *)(v49 + 12) = 2080;
        swift_bridgeObjectRetain();
        uint64_t v58 = sub_1008FA0F0(v35._countAndFlagsBits, (unint64_t)v35._object, v59);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease_n();
        *(_WORD *)(v49 + 22) = 2080;
        swift_bridgeObjectRetain();
        uint64_t v50 = v56;
        uint64_t v58 = sub_1008FA0F0(v56, v46, v59);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease_n();
        _os_log_impl((void *)&_mh_execute_header, v47, v48, "shareKey: locationId mismatch. subscribedId %s current %s Sending current keys to %s", (uint8_t *)v49, 0x20u);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();

        uint64_t v51 = v55;
      }
      else
      {

        swift_bridgeObjectRelease_n();
        swift_bridgeObjectRelease_n();
        swift_bridgeObjectRelease_n();
        uint64_t v51 = v55;
        uint64_t v50 = v56;
      }
      sub_10000588C(&qword_1016552B0);
      uint64_t v52 = swift_allocObject();
      *(_OWORD *)(v52 + 16) = xmmword_101342130;
      *(void *)(v52 + 32) = v50;
      *(void *)(v52 + 40) = v46;
      swift_bridgeObjectRetain();
      sub_100BAA9DC(v52, (uint64_t)_swiftEmptyDictionarySingleton, 0, v44, v51);
      swift_bridgeObjectRelease();
      if (qword_101637440 != -1) {
        swift_once();
      }
      swift_retain();
      sub_1010E1D10();
      sub_100BB608C(v54, (void (*)(void))sub_10015AF5C, (void (*)(uint64_t, unint64_t))sub_10001CFB8, (void (*)(uint64_t, uint64_t))sub_100037A24);
      return swift_release();
    }
  }
}

void sub_100BAA9DC(uint64_t a1, uint64_t a2, char a3, uint64_t a4, uint64_t a5)
{
  uint64_t v6 = v5;
  if (qword_101637070 != -1) {
    swift_once();
  }
  uint64_t v12 = type metadata accessor for Logger();
  sub_100010324(v12, (uint64_t)qword_10170EC30);
  uint64_t v13 = Logger.logObject.getter();
  os_log_type_t v14 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v13, v14))
  {
    char v20 = a3;
    uint64_t v15 = (uint8_t *)swift_slowAlloc();
    uint64_t v21 = swift_slowAlloc();
    *(_DWORD *)uint64_t v15 = 136315138;
    sub_1008FA0F0(0xD000000000000051, 0x80000001014155C0, &v21);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl((void *)&_mh_execute_header, v13, v14, "%s", v15, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    a3 = v20;
    swift_slowDealloc();
  }

  if (qword_101637680 != -1) {
    swift_once();
  }
  swift_retain();
  AnyCurrentValuePublisher.value.getter();
  swift_release();
  if (v21 == 1)
  {
    uint64_t v16 = swift_allocObject();
    *(void *)(v16 + 16) = v6;
    *(void *)(v16 + 24) = a4;
    *(void *)(v16 + 32) = a5;
    *(void *)(v16 + 40) = a1;
    *(void *)(v16 + 48) = a2;
    *(unsigned char *)(v16 + 56) = a3 & 1;
    swift_retain();
    swift_retain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    sub_100BA4560();
    swift_release();
  }
  else
  {
    uint64_t v17 = Logger.logObject.getter();
    os_log_type_t v18 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v17, v18))
    {
      uint64_t v19 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v19 = 0;
      _os_log_impl((void *)&_mh_execute_header, v17, v18, "shareKey: Not sending keys since its not meDevice.", v19, 2u);
      swift_slowDealloc();
    }
  }
}

uint64_t sub_100BAACF4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, int a8)
{
  int v23 = a8;
  uint64_t v22 = a2;
  uint64_t v24 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v28 = *(void *)(v24 - 8);
  __chkstk_darwin(v24);
  uint64_t v15 = (char *)&v22 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v27 = type metadata accessor for DispatchQoS();
  uint64_t v25 = *(void *)(v27 - 8);
  __chkstk_darwin(v27);
  uint64_t v17 = (char *)&v22 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v26 = *(void *)(a3 + OBJC_IVAR____TtC12searchpartyd25SecureLocationsKeyManager_keySharingQueue);
  uint64_t v18 = swift_allocObject();
  *(void *)(v18 + 16) = a3;
  *(void *)(v18 + 24) = a4;
  *(void *)(v18 + 32) = a5;
  sub_10001D608(a1, v18 + 40, &qword_101649698);
  *(void *)(v18 + 88) = a6;
  *(void *)(v18 + 96) = a7;
  *(unsigned char *)(v18 + 104) = v23;
  *(void *)(v18 + 112) = v22;
  aBlock[4] = sub_100BB5F4C;
  aBlock[5] = v18;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_1004B5480;
  aBlock[3] = &unk_1015EB240;
  uint64_t v19 = _Block_copy(aBlock);
  swift_retain();
  swift_retain();
  sub_100BB608C(a1, (void (*)(void))sub_1006CD4D8, (void (*)(uint64_t, unint64_t))sub_1000361E0, (void (*)(uint64_t, uint64_t))sub_100037A38);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_errorRetain();
  static DispatchQoS.unspecified.getter();
  char v29 = _swiftEmptyArrayStorage;
  sub_100BB245C((unint64_t *)&qword_10163B7E0, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
  sub_10000588C((uint64_t *)&unk_10163F350);
  sub_100062734((unint64_t *)&qword_10163B7F0, (uint64_t *)&unk_10163F350);
  uint64_t v20 = v24;
  dispatch thunk of SetAlgebra.init<A>(_:)();
  OS_dispatch_queue.async(group:qos:flags:execute:)();
  _Block_release(v19);
  (*(void (**)(char *, uint64_t))(v28 + 8))(v15, v20);
  (*(void (**)(char *, uint64_t))(v25 + 8))(v17, v27);
  return swift_release();
}

void sub_100BAB078(uint64_t a1, void (*a2)(void), uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, int a7, uint64_t a8)
{
  uint64_t v104 = a8;
  LODWORD(v88) = a7;
  uint64_t v103 = a6;
  uint64_t v83 = a5;
  unint64_t v101 = a2;
  uint64_t v102 = type metadata accessor for UUID();
  uint64_t v85 = *(void (***)(char *, uint64_t))(v102 - 8);
  __chkstk_darwin(v102);
  uint64_t v12 = (char *)&v80 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v100 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v13 = *(void *)(v100 - 8);
  __chkstk_darwin(v100);
  unint64_t v99 = (char *)&v80 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = type metadata accessor for DispatchQoS();
  uint64_t v16 = *(void *)(v15 - 8);
  __chkstk_darwin(v15);
  unint64_t v98 = (char *)&v80 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v97 = type metadata accessor for DispatchQoS.QoSClass();
  uint64_t v96 = *(void *)(v97 - 8);
  __chkstk_darwin(v97);
  long long v95 = (char *)&v80 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v19 = sub_10000588C(&qword_101660B90);
  __chkstk_darwin(v19 - 8);
  uint64_t v21 = (char *)&v80 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10000588C(&qword_101644320);
  OS_dispatch_queue.sync<A>(execute:)();
  uint64_t v22 = *((void *)&v115 + 1);
  if (*((void *)&v115 + 1))
  {
    uint64_t v23 = v115;
    sub_10001D608(a4, (uint64_t)&v112, &qword_101649698);
    uint64_t v91 = v13;
    uint64_t v90 = v15;
    uint64_t v89 = v16;
    if (*((void *)&v113 + 1) >> 60 == 15
      || (uint64_t v94 = v23,
          long long v115 = v112,
          long long v116 = v113,
          long long v117 = v114,
          sub_10001D608((uint64_t)&v117, (uint64_t)v118, &qword_10164A358),
          sub_10001D608((uint64_t)v118, (uint64_t)&v119, &qword_10164A358),
          v120 >> 60 == 15))
    {
      swift_bridgeObjectRelease();
    }
    else
    {
      uint64_t v93 = v120;
      uint64_t v92 = v119;
      uint64_t v53 = a1 + OBJC_IVAR____TtC12searchpartyd25SecureLocationsKeyManager_cachedSharingKey;
      swift_beginAccess();
      sub_10001D074(v53, (uint64_t)v21, &qword_101660B90);
      uint64_t v54 = type metadata accessor for SecureLocationsCachedSharingKey(0);
      if (!(*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v54 - 8) + 48))(v21, 1, v54))
      {
        uint64_t v55 = *(void *)&v21[*(int *)(v54 + 28)];
        uint64_t v82 = a4;
        sub_100BB608C(a4, (void (*)(void))sub_1006CD4D8, (void (*)(uint64_t, unint64_t))sub_1000361E0, (void (*)(uint64_t, uint64_t))sub_100037A38);
        sub_100091B38((uint64_t)v118);
        sub_10001DAB4((uint64_t)v21, &qword_101660B90);
        uint64_t v56 = swift_allocObject();
        uint64_t v81 = v56;
        *(void *)(v56 + 16) = 0;
        uint64_t v57 = v56 + 16;
        uint64_t v58 = *(void *)(v83 + 16);
        if (v58)
        {
          uint64_t v80 = a3;
          uint64_t v87 = OBJC_IVAR____TtC12searchpartyd25SecureLocationsKeyManager_keySharingThrottle;
          int v86 = v88 & 1;
          ++v85;
          uint64_t v59 = swift_bridgeObjectRetain();
          uint64_t v88 = v22;
          long long v60 = (uint64_t *)(v59 + 40);
          uint64_t v84 = v55;
          do
          {
            uint64_t v61 = v57;
            uint64_t v63 = *(v60 - 1);
            uint64_t v62 = *v60;
            swift_bridgeObjectRetain();
            uint64_t v64 = String.utf8Data.getter();
            unint64_t v66 = v65;
            unsigned long long aBlock = (void **)v64;
            uint64_t v107 = v65;
            sub_1000362FC();
            DataProtocol.stableUUID.getter();
            uint64_t v67 = sub_10001CFB8(v64, v66);
            __chkstk_darwin(v67);
            *(&v80 - 14) = v103;
            *(&v80 - 13) = v63;
            uint64_t v57 = v61;
            *(&v80 - 12) = v62;
            *(&v80 - 11) = a1;
            *(&v80 - 10) = v61;
            *(&v80 - 9) = (uint64_t)v12;
            uint64_t v68 = v88;
            *(&v80 - 8) = v94;
            *(&v80 - 7) = v68;
            uint64_t v69 = v92;
            *(&v80 - 6) = v84;
            *(&v80 - 5) = v69;
            *(&v80 - 4) = v93;
            *(&v80 - 3) = (uint64_t)&v115;
            *((unsigned char *)&v80 - 16) = v86;
            *(&v80 - 1) = v104;
            swift_retain();
            KeyedThrottle.throttle(key:block:)();
            swift_release();
            swift_bridgeObjectRelease();
            (*v85)(v12, v102);
            v60 += 2;
            --v58;
          }
          while (v58);
          swift_bridgeObjectRelease();
          a3 = v80;
          unint64_t v70 = v101;
          uint64_t v71 = v100;
        }
        else
        {
          unint64_t v70 = v101;
          uint64_t v71 = v100;
        }
        swift_bridgeObjectRelease();
        sub_10000584C();
        uint64_t v72 = v96;
        uint64_t v73 = v95;
        uint64_t v74 = v97;
        (*(void (**)(char *, void, uint64_t))(v96 + 104))(v95, enum case for DispatchQoS.QoSClass.default(_:), v97);
        uint64_t v75 = (void *)static OS_dispatch_queue.global(qos:)();
        (*(void (**)(char *, uint64_t))(v72 + 8))(v73, v74);
        BOOL v76 = (void *)swift_allocObject();
        v76[2] = v70;
        v76[3] = a3;
        v76[4] = v81;
        uint64_t v110 = sub_1005537E4;
        uint64_t v111 = v76;
        unsigned long long aBlock = _NSConcreteStackBlock;
        uint64_t v107 = 1107296256;
        uint64_t v108 = sub_1004B5480;
        uint64_t v109 = &unk_1015EB3F8;
        uint64_t v77 = _Block_copy(&aBlock);
        swift_retain();
        swift_retain();
        unint64_t v78 = v98;
        static DispatchQoS.unspecified.getter();
        unint64_t v105 = _swiftEmptyArrayStorage;
        sub_100BB245C((unint64_t *)&qword_10163B7E0, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
        sub_10000588C((uint64_t *)&unk_10163F350);
        sub_100062734((unint64_t *)&qword_10163B7F0, (uint64_t *)&unk_10163F350);
        unint64_t v79 = v99;
        dispatch thunk of SetAlgebra.init<A>(_:)();
        OS_dispatch_queue.async(group:qos:flags:execute:)();
        sub_1003DD160((uint64_t)v118);
        _Block_release(v77);

        sub_100BB608C(v82, (void (*)(void))sub_10015AF5C, (void (*)(uint64_t, unint64_t))sub_10001CFB8, (void (*)(uint64_t, uint64_t))sub_100037A24);
        (*(void (**)(char *, uint64_t))(v91 + 8))(v79, v71);
        (*(void (**)(char *, uint64_t))(v89 + 8))(v78, v90);
        swift_release();
        goto LABEL_13;
      }
      swift_bridgeObjectRelease();
      sub_10001DAB4((uint64_t)v21, &qword_101660B90);
    }
    uint64_t v24 = a3;
    if (qword_101637070 != -1) {
      swift_once();
    }
    uint64_t v25 = type metadata accessor for Logger();
    sub_100010324(v25, (uint64_t)qword_10170EC30);
    uint64_t v26 = Logger.logObject.getter();
    os_log_type_t v27 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v26, v27))
    {
      uint64_t v28 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v28 = 0;
      _os_log_impl((void *)&_mh_execute_header, v26, v27, "shareKey: Unable to get keys to send to followers", v28, 2u);
      swift_slowDealloc();
    }
    uint64_t v29 = v100;

    if (qword_101637440 != -1) {
      swift_once();
    }
    uint64_t v30 = qword_10170F218;
    unint64_t v31 = *(NSObject **)(qword_10170F218 + 16);
    uint64_t v32 = (void *)swift_allocObject();
    v32[2] = v30;
    v32[3] = 0xD000000000000010;
    long long v32[4] = 0x8000000101415620;
    uint64_t v33 = swift_allocObject();
    *(void *)(v33 + 16) = sub_100769408;
    *(void *)(v33 + 24) = v32;
    uint64_t v110 = sub_1003B7AE0;
    uint64_t v111 = (void *)v33;
    unsigned long long aBlock = _NSConcreteStackBlock;
    uint64_t v107 = 1107296256;
    uint64_t v108 = sub_1000A70B0;
    uint64_t v109 = &unk_1015EB330;
    unint64_t v34 = _Block_copy(&aBlock);
    swift_retain_n();
    swift_retain();
    swift_release();
    dispatch_sync(v31, v34);
    _Block_release(v34);
    LOBYTE(v31) = swift_isEscapingClosureAtFileLocation();
    swift_release();
    swift_release();
    swift_release();
    if ((v31 & 1) == 0)
    {
      sub_10000584C();
      uint64_t v35 = v96;
      BOOL v36 = v95;
      uint64_t v37 = v97;
      (*(void (**)(char *, void, uint64_t))(v96 + 104))(v95, enum case for DispatchQoS.QoSClass.default(_:), v97);
      uint64_t v38 = (void *)static OS_dispatch_queue.global(qos:)();
      (*(void (**)(char *, uint64_t))(v35 + 8))(v36, v37);
      uint64_t v39 = swift_allocObject();
      *(void *)(v39 + 16) = v101;
      *(void *)(v39 + 24) = v24;
      uint64_t v110 = (uint64_t (*)())sub_100BB5FE0;
      uint64_t v111 = (void *)v39;
      unsigned long long aBlock = _NSConcreteStackBlock;
      uint64_t v107 = 1107296256;
      uint64_t v108 = sub_1004B5480;
      uint64_t v109 = &unk_1015EB380;
      uint64_t v40 = _Block_copy(&aBlock);
      swift_retain();
      os_log_type_t v41 = v98;
      static DispatchQoS.unspecified.getter();
      unint64_t v105 = _swiftEmptyArrayStorage;
      sub_100BB245C((unint64_t *)&qword_10163B7E0, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
      sub_10000588C((uint64_t *)&unk_10163F350);
      sub_100062734((unint64_t *)&qword_10163B7F0, (uint64_t *)&unk_10163F350);
      os_log_type_t v42 = v99;
      dispatch thunk of SetAlgebra.init<A>(_:)();
      OS_dispatch_queue.async(group:qos:flags:execute:)();
      _Block_release(v40);

      (*(void (**)(char *, uint64_t))(v91 + 8))(v42, v29);
      (*(void (**)(char *, uint64_t))(v89 + 8))(v41, v90);
LABEL_13:
      swift_release();
      return;
    }
    __break(1u);
    goto LABEL_30;
  }
  if (qword_101637070 != -1) {
LABEL_30:
  }
    swift_once();
  uint64_t v43 = type metadata accessor for Logger();
  sub_100010324(v43, (uint64_t)qword_10170EC30);
  uint64_t v44 = Logger.logObject.getter();
  os_log_type_t v45 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v44, v45))
  {
    unint64_t v46 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)unint64_t v46 = 0;
    _os_log_impl((void *)&_mh_execute_header, v44, v45, "shareKey: Unable to get my own person ID. Not sending keys", v46, 2u);
    swift_slowDealloc();
  }

  if (qword_101637440 != -1) {
    swift_once();
  }
  uint64_t v47 = qword_10170F218;
  os_log_type_t v48 = *(NSObject **)(qword_10170F218 + 16);
  uint64_t v49 = swift_allocObject();
  *(void *)(v49 + 16) = v47;
  strcpy((char *)(v49 + 24), "No MyPersonID");
  *(_WORD *)(v49 + 38) = -4864;
  uint64_t v50 = swift_allocObject();
  *(void *)(v50 + 16) = sub_1007670B8;
  *(void *)(v50 + 24) = v49;
  *(void *)&long long v117 = sub_100132424;
  *((void *)&v117 + 1) = v50;
  *(void *)&long long v115 = _NSConcreteStackBlock;
  *((void *)&v115 + 1) = 1107296256;
  *(void *)&long long v116 = sub_1000A70B0;
  *((void *)&v116 + 1) = &unk_1015EB2B8;
  uint64_t v51 = _Block_copy(&v115);
  swift_retain_n();
  swift_retain();
  swift_release();
  dispatch_sync(v48, v51);
  _Block_release(v51);
  LOBYTE(v48) = swift_isEscapingClosureAtFileLocation();
  swift_release();
  swift_release();
  swift_release();
  if (v48)
  {
    __break(1u);
  }
  else
  {
    type metadata accessor for SecureLocationsError(0);
    *(void *)&long long v112 = 3;
    sub_1004A0BC8((uint64_t)_swiftEmptyArrayStorage);
    sub_100BB245C(&qword_10163F370, type metadata accessor for SecureLocationsError);
    _BridgedStoredNSError.init(_:userInfo:)();
    uint64_t v52 = (void *)v115;
    v101(v115);
  }
}

void sub_100BAC16C(void (*a1)())
{
  type metadata accessor for SecureLocationsError(0);
  sub_1004A0BC8((uint64_t)_swiftEmptyArrayStorage);
  sub_100BB245C(&qword_10163F370, type metadata accessor for SecureLocationsError);
  _BridgedStoredNSError.init(_:userInfo:)();
  a1();
}

uint64_t sub_100BAC228(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t *a5, uint64_t a6, uint64_t a7, uint64_t a8, void (*a9)(void, void, void), uint64_t a10, unint64_t a11, uint64_t a12, char a13, uint64_t a14)
{
  uint64_t v164 = a8;
  uint64_t v163 = a7;
  uint64_t v162 = a6;
  unsigned long long v167 = a5;
  uint64_t v161 = type metadata accessor for HashAlgorithm();
  uint64_t v160 = *(void *)(v161 - 8);
  __chkstk_darwin(v161);
  uint64_t v159 = (char *)v158 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v19 = sub_10000588C(&qword_10164DBB0);
  uint64_t v20 = __chkstk_darwin(v19 - 8);
  uint64_t v22 = (char *)v158 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v20);
  uint64_t v24 = (char *)v158 - v23;
  uint64_t v25 = type metadata accessor for String.Encoding();
  __chkstk_darwin(v25 - 8);
  v166 = (char *)v158 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v27 = *(void *)(a1 + 16);
  uint64_t v169 = a3;
  uint64_t v174 = a4;
  uint64_t v168 = a2;
  if (v27)
  {
    swift_bridgeObjectRetain();
    uint64_t v28 = sub_100723FF4(a2, a3);
    if (v29)
    {
      uint64_t v30 = *(void *)(*(void *)(a1 + 56) + 8 * v28);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      v175 = *(unint64_t **)(v30 + 16);
      if (v175)
      {
        if (qword_101637070 != -1) {
          swift_once();
        }
        uint64_t v31 = type metadata accessor for Logger();
        uint64_t v32 = sub_100010324(v31, (uint64_t)qword_10170EC30);
        swift_bridgeObjectRetain_n();
        uint64_t v165 = v32;
        uint64_t v33 = Logger.logObject.getter();
        os_log_type_t v34 = static os_log_type_t.default.getter();
        BOOL v35 = os_log_type_enabled(v33, v34);
        uint64_t v171 = v24;
        if (v35)
        {
          BOOL v36 = (uint8_t *)swift_slowAlloc();
          v191[0] = swift_slowAlloc();
          *(_DWORD *)BOOL v36 = 136380675;
          swift_bridgeObjectRetain();
          uint64_t v37 = Array.description.getter();
          unint64_t v39 = v38;
          swift_bridgeObjectRelease();
          *(void *)&long long v194 = sub_1008FA0F0(v37, v39, v191);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease_n();
          swift_bridgeObjectRelease();
          _os_log_impl((void *)&_mh_execute_header, v33, v34, "shareKey: Valid handles: %{private}s", v36, 0xCu);
          swift_arrayDestroy();
          swift_slowDealloc();
          swift_slowDealloc();
        }
        else
        {

          swift_bridgeObjectRelease_n();
        }
        uint64_t v81 = 0;
        unint64_t v64 = 0;
        v158[1] = v30;
        uint64_t v82 = (unint64_t *)(v30 + 40);
        unint64_t v170 = (char *)&type metadata for () + 8;
        uint64_t v75 = (uint64_t)v171;
        while (1)
        {
          uint64_t v83 = *(v82 - 1);
          unint64_t v84 = *v82;
          swift_bridgeObjectRetain();
          swift_bridgeObjectRelease();
          if (__OFADD__(v81, 1))
          {
            __break(1u);
            goto LABEL_99;
          }
          id v176 = (unint64_t *)(v81 + 1);
          if (qword_101637080 != -1) {
            swift_once();
          }
          swift_retain();
          uint64_t v85 = v83;
          uint64_t v86 = Data.init(base64Encoded:options:)();
          uint64_t v178 = v81;
          Class v177 = v82;
          if (v87 >> 60 == 15)
          {
            uint64_t v88 = Logger.logObject.getter();
            os_log_type_t v89 = static os_log_type_t.default.getter();
            unint64_t v44 = v89;
            if (os_log_type_enabled(v88, v89))
            {
              uint64_t v90 = (uint8_t *)swift_slowAlloc();
              *(_WORD *)uint64_t v90 = 0;
              _os_log_impl((void *)&_mh_execute_header, v88, (os_log_type_t)v44, "failed to decode server provided push identifier", v90, 2u);
              swift_slowDealloc();
            }
            swift_release();
          }
          else
          {
            uint64_t v91 = v86;
            unint64_t v44 = v87;
            static String.Encoding.utf8.getter();
            uint64_t v92 = String.init(data:encoding:)();
            unint64_t v94 = v93;
            sub_100037A24(v91, v44);
            swift_release();
            if (v94)
            {
              swift_bridgeObjectRelease();
              goto LABEL_53;
            }
          }
          unint64_t v94 = v84;
          uint64_t v92 = v85;
LABEL_53:
          *(void *)&long long v194 = v92;
          *((void *)&v194 + 1) = v94;
          uint64_t v192 = 64;
          unint64_t v193 = 0xE100000000000000;
          sub_1000336D4();
          swift_bridgeObjectRetain_n();
          char v95 = StringProtocol.contains<A>(_:)();
          NSString v96 = String._bridgeToObjectiveC()();
          swift_bridgeObjectRelease();
          unint64_t v183 = v94;
          uint64_t v172 = v92;
          if (v95)
          {
            uint64_t v97 = (void *)IDSCopyIDForEmailAddress();

            if (!v97) {
              goto LABEL_102;
            }
            int v184 = 0;
          }
          else
          {
            uint64_t v97 = (void *)IDSCopyIDForPhoneNumber();

            if (!v97) {
              goto LABEL_103;
            }
            int v184 = 1;
          }
          unint64_t v98 = (void (*)(void, void))static String._unconditionallyBridgeFromObjectiveC(_:)();
          unint64_t v185 = v99;

          uint64_t v100 = *(void *)(a4 + 40);
          swift_retain();
          unint64_t v101 = dispatch_group_create();
          uint64_t v102 = swift_allocObject();
          *(unsigned char *)(v102 + 16) = 0;
          uint64_t v180 = v102 + 16;
          dispatch_group_enter(v101);
          uint64_t v182 = v100;
          Class v179 = *(NSObject **)(v100 + 24);
          uint64_t v103 = v179;
          uint64_t v104 = swift_allocObject();
          *(void *)(v104 + 16) = v102;
          *(void *)(v104 + 24) = v101;
          uint64_t v105 = type metadata accessor for TaskPriority();
          uint64_t v106 = *(void *)(v105 - 8);
          (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v106 + 56))(v75, 1, 1, v105);
          uint64_t v107 = swift_allocObject();
          *(void *)(v107 + 16) = 0;
          uint64_t v108 = (void *)(v107 + 16);
          *(void *)(v107 + 24) = 0;
          *(void *)(v107 + 32) = sub_100BB9F60;
          *(void *)(v107 + 40) = v104;
          *(void *)(v107 + 48) = v103;
          *(unsigned char *)(v107 + 56) = v184;
          char v173 = v98;
          unint64_t v109 = v185;
          *(void *)(v107 + 64) = v98;
          *(void *)(v107 + 72) = v109;
          LODWORD(v98) = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v106 + 48))(v75, 1, v105);
          uint64_t v181 = v102;
          swift_retain();
          uint64_t v110 = v101;
          swift_retain();
          swift_retain();
          swift_bridgeObjectRetain();
          if (v98 == 1)
          {
            sub_10001DAB4(v75, &qword_10164DBB0);
            if (!*v108) {
              goto LABEL_62;
            }
          }
          else
          {
            TaskPriority.rawValue.getter();
            (*(void (**)(uint64_t, uint64_t))(v106 + 8))(v75, v105);
            if (!*v108)
            {
LABEL_62:
              uint64_t v111 = 0;
              uint64_t v113 = 0;
              goto LABEL_63;
            }
          }
          swift_getObjectType();
          swift_unknownObjectRetain();
          uint64_t v111 = dispatch thunk of Actor.unownedExecutor.getter();
          uint64_t v113 = v112;
          swift_unknownObjectRelease();
LABEL_63:
          uint64_t v114 = swift_allocObject();
          *(void *)(v114 + 16) = &unk_10165A750;
          *(void *)(v114 + 24) = v107;
          if (v113 | v111)
          {
            uint64_t v186 = 0;
            uint64_t v187 = 0;
            uint64_t v188 = v111;
            uint64_t v189 = v113;
          }
          swift_task_create();
          swift_release();
          swift_release();
          OS_dispatch_group.wait()();

          swift_beginAccess();
          LODWORD(v33) = *(unsigned __int8 *)(v181 + 16);
          swift_release();
          swift_release();
          if (v33 == 1)
          {
            swift_bridgeObjectRelease();
            unint64_t v115 = v169;
            swift_bridgeObjectRetain_n();
            unint64_t v64 = v183;
            swift_bridgeObjectRetain();
            long long v116 = Logger.logObject.getter();
            os_log_type_t v117 = static os_log_type_t.default.getter();
            if (os_log_type_enabled(v116, v117))
            {
              uint64_t v118 = swift_slowAlloc();
              *(void *)&long long v194 = swift_slowAlloc();
              *(_DWORD *)uint64_t v118 = 141558787;
              uint64_t v192 = 1752392040;
              UnsafeMutableRawBufferPointer.copyMemory(from:)();
              *(_WORD *)(v118 + 12) = 2081;
              swift_bridgeObjectRetain();
              uint64_t v192 = sub_1008FA0F0(v168, v115, (uint64_t *)&v194);
              UnsafeMutableRawBufferPointer.copyMemory(from:)();
              swift_bridgeObjectRelease_n();
              *(_WORD *)(v118 + 22) = 2160;
              uint64_t v192 = 1752392040;
              UnsafeMutableRawBufferPointer.copyMemory(from:)();
              *(_WORD *)(v118 + 32) = 2081;
              swift_bridgeObjectRetain();
              uint64_t v75 = v172;
              uint64_t v192 = sub_1008FA0F0(v172, v64, (uint64_t *)&v194);
              UnsafeMutableRawBufferPointer.copyMemory(from:)();
              swift_bridgeObjectRelease_n();
              _os_log_impl((void *)&_mh_execute_header, v116, v117, "shareKey: Received handle from server with valid messaging destination %{private,mask.hash}s %{private,mask.hash}s", (uint8_t *)v118, 0x2Au);
              swift_arrayDestroy();
              swift_slowDealloc();
              swift_slowDealloc();

              a4 = v174;
            }
            else
            {

              swift_bridgeObjectRelease_n();
              swift_bridgeObjectRelease_n();
              a4 = v174;
              uint64_t v75 = v172;
            }
            LODWORD(v33) = v184;
            goto LABEL_76;
          }
          uint64_t v82 = v177 + 2;
          swift_bridgeObjectRelease();
          unint64_t v64 = v183;
          swift_bridgeObjectRelease();
          uint64_t v81 = v178 + 1;
          a4 = v174;
          if (v176 == v175)
          {
            swift_bridgeObjectRelease();
            uint64_t v33 = Logger.logObject.getter();
            os_log_type_t v69 = static os_log_type_t.default.getter();
            if (os_log_type_enabled(v33, v69))
            {
              unint64_t v70 = (uint8_t *)swift_slowAlloc();
              *(_WORD *)unint64_t v70 = 0;
              uint64_t v71 = "shareKey: No valid handles found from server. Cannot send keys";
              goto LABEL_73;
            }
            goto LABEL_74;
          }
        }
      }
    }
    swift_bridgeObjectRelease();
  }
  uint64_t v40 = sub_100BC7638();
  os_log_type_t v41 = *(unint64_t **)(v40 + 16);
  if (!v41)
  {
    swift_bridgeObjectRelease();
    if (qword_101637070 != -1) {
      swift_once();
    }
    uint64_t v72 = type metadata accessor for Logger();
    sub_100010324(v72, (uint64_t)qword_10170EC30);
    uint64_t v33 = Logger.logObject.getter();
    os_log_type_t v73 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v33, v73))
    {
      uint64_t v74 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v74 = 0;
      _os_log_impl((void *)&_mh_execute_header, v33, v73, "shareKey: No handle found in fmf. Cannot send keys", v74, 2u);
      swift_slowDealloc();
    }

    LODWORD(v33) = 0;
    char v173 = 0;
    unint64_t v185 = 0;
    uint64_t v75 = 0;
    unint64_t v64 = 0;
LABEL_76:
    if (qword_101637070 != -1) {
LABEL_99:
    }
      swift_once();
    uint64_t v120 = type metadata accessor for Logger();
    uint64_t v121 = sub_100010324(v120, (uint64_t)qword_10170EC30);
    swift_bridgeObjectRetain();
    unint64_t v122 = v169;
    swift_bridgeObjectRetain_n();
    unint64_t v183 = v121;
    Swift::String v123 = Logger.logObject.getter();
    os_log_type_t v124 = static os_log_type_t.default.getter();
    BOOL v125 = os_log_type_enabled(v123, v124);
    int v184 = (int)v33;
    if (v125)
    {
      uint64_t v126 = swift_slowAlloc();
      uint64_t v192 = swift_slowAlloc();
      *(_DWORD *)uint64_t v126 = 141558787;
      *(void *)&long long v194 = 1752392040;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v126 + 12) = 2081;
      swift_bridgeObjectRetain();
      *(void *)&long long v194 = sub_1008FA0F0(v168, v122, &v192);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      *(_WORD *)(v126 + 22) = 2160;
      *(void *)&long long v194 = 1752392040;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v126 + 32) = 2081;
      a4 = v174;
      *(void *)&long long v194 = v75;
      *((void *)&v194 + 1) = v64;
      swift_bridgeObjectRetain();
      sub_10000588C(&qword_101644320);
      uint64_t v127 = String.init<A>(describing:)();
      *(void *)&long long v194 = sub_1008FA0F0(v127, v128, &v192);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v123, v124, "shareKey: Sending to %{private,mask.hash}s handle %{private,mask.hash}s", (uint8_t *)v126, 0x2Au);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      if (v185)
      {
LABEL_79:
        long long v194 = *(_OWORD *)(a12 + 16);
        long long v129 = v194;
        sub_100061E54((uint64_t)&v194);
        uint64_t v130 = sub_100A94760(v129, *((unint64_t *)&v129 + 1));
        unint64_t v132 = v131;
        sub_1000CE9DC((uint64_t)&v194);
        sub_100434E0C(v130, v132, &v192);
        uint64_t v182 = a10;
        uint64_t v133 = v192;
        unint64_t v134 = v193;
        uint64_t v135 = v160;
        uint64_t v136 = v159;
        uint64_t v137 = v161;
        (*(void (**)(char *, void, uint64_t))(v160 + 104))(v159, enum case for HashAlgorithm.sha256(_:), v161);
        uint64_t v138 = Data.hash(algorithm:)();
        unint64_t v140 = v139;
        (*(void (**)(char *, uint64_t))(v135 + 8))(v136, v137);
        sub_10001CFB8(v133, v134);
        uint64_t v141 = sub_100BAE6D4(v162, v163, v164, v184, v173, v185, a9, v182, a11, v138, v140);
        swift_bridgeObjectRelease();
        sub_10001CFB8(v138, v140);
        uint64_t v142 = v167;
        *unsigned long long v167 = v141;
        swift_errorRelease();
        if (*v142)
        {
          swift_errorRetain();
          swift_errorRetain();
          uint64_t v143 = Logger.logObject.getter();
          os_log_type_t v144 = static os_log_type_t.default.getter();
          if (os_log_type_enabled(v143, v144))
          {
            id v145 = (uint8_t *)swift_slowAlloc();
            uint64_t v192 = swift_slowAlloc();
            *(_DWORD *)id v145 = 136446210;
            uint64_t v190 = a14;
            swift_errorRetain();
            sub_10000588C((uint64_t *)&unk_101638EB0);
            uint64_t v146 = String.init<A>(describing:)();
            uint64_t v190 = sub_1008FA0F0(v146, v147, &v192);
            UnsafeMutableRawBufferPointer.copyMemory(from:)();
            swift_bridgeObjectRelease();
            swift_errorRelease();
            swift_errorRelease();
            _os_log_impl((void *)&_mh_execute_header, v143, v144, "shareKey: sent failed, error: %{public}s", v145, 0xCu);
            swift_arrayDestroy();
            swift_slowDealloc();
            swift_slowDealloc();
          }
          else
          {
            swift_errorRelease();
            swift_errorRelease();
          }
        }
        else
        {
          unint64_t v152 = Logger.logObject.getter();
          os_log_type_t v153 = static os_log_type_t.default.getter();
          if (os_log_type_enabled(v152, v153))
          {
            uint64_t v154 = (uint8_t *)swift_slowAlloc();
            *(_DWORD *)uint64_t v154 = 67109120;
            LODWORD(v192) = a13 & 1;
            UnsafeMutableRawBufferPointer.copyMemory(from:)();
            _os_log_impl((void *)&_mh_execute_header, v152, v153, "shareKey: sent successfully, should force publish proactive location with new key: %{BOOL}d", v154, 8u);
            swift_slowDealloc();
          }

          if (a13)
          {
            Class v155 = *(void (**)(uint64_t, uint64_t))(a4 + 16);
            if (v155)
            {
              swift_retain();
              v155(v168, v169);
              sub_1000A1534((uint64_t)v155);
            }
          }
        }
        return *v167 == 0;
      }
    }
    else
    {

      swift_bridgeObjectRelease_n();
      swift_bridgeObjectRelease_n();
      if (v185) {
        goto LABEL_79;
      }
    }
    unint64_t v148 = v169;
    swift_bridgeObjectRetain_n();
    uint64_t v149 = Logger.logObject.getter();
    os_log_type_t v150 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v149, v150))
    {
      uint64_t v151 = swift_slowAlloc();
      *(void *)&long long v194 = swift_slowAlloc();
      *(_DWORD *)uint64_t v151 = 141558275;
      uint64_t v192 = 1752392040;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v151 + 12) = 2081;
      swift_bridgeObjectRetain();
      uint64_t v192 = sub_1008FA0F0(v168, v148, (uint64_t *)&v194);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      _os_log_impl((void *)&_mh_execute_header, v149, v150, "shareKey: Cannot send keys to %{private,mask.hash}s. No handleIdentifier or destination to send key", (uint8_t *)v151, 0x16u);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {

      swift_bridgeObjectRelease_n();
    }
    type metadata accessor for SecureLocationsError(0);
    uint64_t v192 = 9;
    sub_1004A0BC8((uint64_t)_swiftEmptyArrayStorage);
    sub_100BB245C(&qword_10163F370, type metadata accessor for SecureLocationsError);
    _BridgedStoredNSError.init(_:userInfo:)();
    *unsigned long long v167 = v194;
    swift_errorRelease();
    if (qword_101637440 != -1) {
      swift_once();
    }
    swift_retain();
    sub_1010DF9F0(v168, v169, 0xD000000000000019, 0x8000000101415640);
    swift_release();
    return 0;
  }
  v166 = (char *)v40;
  os_log_type_t v42 = (unint64_t *)(v40 + 40);
  unint64_t v170 = (char *)&type metadata for () + 8;
  uint64_t v171 = v22;
  uint64_t v43 = (uint64_t)v22;
  while (1)
  {
    id v176 = v41;
    uint64_t v45 = *(v42 - 1);
    unint64_t v44 = *v42;
    v175 = v42;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    *(void *)&long long v194 = v45;
    *((void *)&v194 + 1) = v44;
    uint64_t v192 = 64;
    unint64_t v193 = 0xE100000000000000;
    sub_1000336D4();
    swift_bridgeObjectRetain();
    char v46 = StringProtocol.contains<A>(_:)();
    uint64_t v172 = v45;
    NSString v47 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    unint64_t v183 = v44;
    if (v46) {
      break;
    }
    os_log_type_t v48 = (void *)IDSCopyIDForPhoneNumber();

    if (!v48) {
      goto LABEL_101;
    }
    int v184 = 1;
LABEL_16:
    uint64_t v49 = (void (*)(void, void))static String._unconditionallyBridgeFromObjectiveC(_:)();
    unint64_t v51 = v50;

    uint64_t v52 = *(void *)(a4 + 40);
    swift_retain();
    uint64_t v53 = dispatch_group_create();
    uint64_t v54 = swift_allocObject();
    *(unsigned char *)(v54 + 16) = 0;
    uint64_t v181 = v54 + 16;
    dispatch_group_enter(v53);
    uint64_t v182 = v52;
    uint64_t v55 = *(void *)(v52 + 24);
    uint64_t v56 = swift_allocObject();
    *(void *)(v56 + 16) = v54;
    *(void *)(v56 + 24) = v53;
    uint64_t v57 = type metadata accessor for TaskPriority();
    uint64_t v58 = *(void *)(v57 - 8);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v58 + 56))(v43, 1, 1, v57);
    uint64_t v59 = swift_allocObject();
    *(void *)(v59 + 16) = 0;
    Class v177 = (unint64_t *)(v59 + 16);
    *(void *)(v59 + 24) = 0;
    *(void *)(v59 + 32) = sub_100BB6188;
    *(void *)(v59 + 40) = v56;
    *(void *)(v59 + 48) = v55;
    *(unsigned char *)(v59 + 56) = v184;
    char v173 = v49;
    *(void *)(v59 + 64) = v49;
    *(void *)(v59 + 72) = v51;
    LODWORD(v49) = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v58 + 48))(v43, 1, v57);
    uint64_t v178 = v54;
    swift_retain();
    long long v60 = v53;
    uint64_t v180 = v56;
    swift_retain();
    swift_retain();
    unint64_t v185 = v51;
    swift_bridgeObjectRetain();
    Class v179 = v60;
    if (v49 == 1)
    {
      sub_10001DAB4(v43, &qword_10164DBB0);
    }
    else
    {
      TaskPriority.rawValue.getter();
      (*(void (**)(uint64_t, uint64_t))(v58 + 8))(v43, v57);
    }
    if (*v177)
    {
      swift_getObjectType();
      swift_unknownObjectRetain();
      uint64_t v61 = dispatch thunk of Actor.unownedExecutor.getter();
      uint64_t v63 = v62;
      swift_unknownObjectRelease();
    }
    else
    {
      uint64_t v61 = 0;
      uint64_t v63 = 0;
    }
    unint64_t v64 = v183;
    uint64_t v65 = swift_allocObject();
    *(void *)(v65 + 16) = &unk_101647EE0;
    *(void *)(v65 + 24) = v59;
    if (v63 | v61)
    {
      v191[3] = 0;
      v191[4] = 0;
      v191[5] = v61;
      v191[6] = v63;
    }
    swift_task_create();
    swift_release();
    swift_release();
    unint64_t v66 = v179;
    OS_dispatch_group.wait()();

    swift_beginAccess();
    int v67 = *(unsigned __int8 *)(v178 + 16);
    swift_release();
    swift_release();
    if (v67 == 1)
    {
      swift_bridgeObjectRelease();
      if (qword_101637070 != -1) {
        swift_once();
      }
      uint64_t v76 = type metadata accessor for Logger();
      sub_100010324(v76, (uint64_t)qword_10170EC30);
      unint64_t v77 = v169;
      swift_bridgeObjectRetain_n();
      swift_bridgeObjectRetain_n();
      unint64_t v78 = Logger.logObject.getter();
      os_log_type_t v79 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v78, v79))
      {
        uint64_t v80 = swift_slowAlloc();
        *(void *)&long long v194 = swift_slowAlloc();
        *(_DWORD *)uint64_t v80 = 141558787;
        uint64_t v192 = 1752392040;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        *(_WORD *)(v80 + 12) = 2081;
        swift_bridgeObjectRetain();
        uint64_t v192 = sub_1008FA0F0(v168, v77, (uint64_t *)&v194);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease_n();
        *(_WORD *)(v80 + 22) = 2160;
        uint64_t v192 = 1752392040;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        *(_WORD *)(v80 + 32) = 2081;
        swift_bridgeObjectRetain();
        uint64_t v192 = sub_1008FA0F0(v172, v64, (uint64_t *)&v194);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease_n();
        _os_log_impl((void *)&_mh_execute_header, v78, v79, "shareKey: Got valid messaging destination from fmf with %{private,mask.hash}s %{private,mask.hash}s", (uint8_t *)v80, 0x2Au);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
      }
      else
      {

        swift_bridgeObjectRelease_n();
        swift_bridgeObjectRelease_n();
      }
      LODWORD(v33) = v184;
      a4 = v174;
LABEL_75:
      uint64_t v75 = v172;
      goto LABEL_76;
    }
    os_log_type_t v42 = v175 + 2;
    swift_bridgeObjectRelease();
    os_log_type_t v41 = (unint64_t *)((char *)v176 - 1);
    a4 = v174;
    if (v176 == (unint64_t *)1)
    {
      swift_bridgeObjectRelease();
      if (qword_101637070 != -1) {
        swift_once();
      }
      uint64_t v68 = type metadata accessor for Logger();
      sub_100010324(v68, (uint64_t)qword_10170EC30);
      uint64_t v33 = Logger.logObject.getter();
      os_log_type_t v69 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v33, v69))
      {
        unint64_t v70 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)unint64_t v70 = 0;
        uint64_t v71 = "shareKey: No valid handles found in fmf. Cannot send keys";
LABEL_73:
        _os_log_impl((void *)&_mh_execute_header, v33, v69, v71, v70, 2u);
        swift_slowDealloc();
      }
LABEL_74:

      LODWORD(v33) = 0;
      char v173 = 0;
      unint64_t v185 = 0;
      goto LABEL_75;
    }
  }
  os_log_type_t v48 = (void *)IDSCopyIDForEmailAddress();

  if (v48)
  {
    int v184 = 0;
    goto LABEL_16;
  }
  __break(1u);
LABEL_101:
  __break(1u);
LABEL_102:
  __break(1u);
LABEL_103:
  __break(1u);
  sub_1000CE9DC((uint64_t)&v194);
  uint64_t v192 = 0;
  unint64_t v193 = 0xE000000000000000;
  _StringGuts.grow(_:)(35);
  v157._countAndFlagsBits = 0xD000000000000021;
  v157._object = (void *)0x80000001013F3B70;
  String.append(_:)(v157);
  uint64_t v190 = v44;
  sub_10000588C(&qword_101638D40);
  _print_unlocked<A, B>(_:_:)();
  uint64_t result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_100BADF2C()
{
  if (qword_101637070 != -1) {
LABEL_47:
  }
    swift_once();
  uint64_t v0 = type metadata accessor for Logger();
  sub_100010324(v0, (uint64_t)qword_10170EC30);
  uint64_t v1 = Logger.logObject.getter();
  os_log_type_t v2 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v1, v2))
  {
    uint64_t v3 = (uint8_t *)swift_slowAlloc();
    os_log_type_t v48 = (void *)swift_slowAlloc();
    *(_DWORD *)uint64_t v3 = 136315138;
    sub_1008FA0F0(0xD000000000000025, 0x8000000101415900, (uint64_t *)&v48);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl((void *)&_mh_execute_header, v1, v2, "%s", v3, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }

  sub_10000588C(&qword_101648048);
  unsafeFromAsyncTask<A>(_:)();
  uint64_t v4 = (uint64_t)v48;
  uint64_t v5 = qword_101636FC8;
  uint64_t v6 = swift_bridgeObjectRetain();
  if (v5 != -1) {
    uint64_t v6 = swift_once();
  }
  __chkstk_darwin(v6);
  OSAllocatedUnfairLock.callAsFunction<A>(_:)();
  sub_10015B4A8(v4, 0);
  uint64_t v43 = v4 + 56;
  uint64_t v7 = 1 << *(unsigned char *)(v4 + 32);
  uint64_t v8 = -1;
  if (v7 < 64) {
    uint64_t v8 = ~(-1 << v7);
  }
  unint64_t v9 = v8 & *(void *)(v4 + 56);
  int64_t v44 = (unint64_t)(v7 + 63) >> 6;
  swift_bridgeObjectRetain();
  int64_t v10 = 0;
  uint64_t v11 = _swiftEmptyArrayStorage;
  uint64_t v12 = _swiftEmptyDictionarySingleton;
  uint64_t v45 = v4;
  while (1)
  {
    if (v9)
    {
      uint64_t v46 = (v9 - 1) & v9;
      int64_t v47 = v10;
      unint64_t v14 = __clz(__rbit64(v9)) | (v10 << 6);
    }
    else
    {
      int64_t v15 = v10 + 1;
      if (__OFADD__(v10, 1)) {
        goto LABEL_45;
      }
      if (v15 >= v44)
      {
LABEL_42:
        swift_release();
        sub_100BAA9DC((uint64_t)v11, (uint64_t)v12, 0, (uint64_t)SharingCircleWildAdvertisementKey.init(key:), 0);
        sub_10015B4A8(v4, 0);
        swift_bridgeObjectRelease();
        return swift_bridgeObjectRelease();
      }
      unint64_t v16 = *(void *)(v43 + 8 * v15);
      int64_t v17 = v10 + 1;
      if (!v16)
      {
        int64_t v17 = v10 + 2;
        if (v10 + 2 >= v44) {
          goto LABEL_42;
        }
        unint64_t v16 = *(void *)(v43 + 8 * v17);
        if (!v16)
        {
          int64_t v17 = v10 + 3;
          if (v10 + 3 >= v44) {
            goto LABEL_42;
          }
          unint64_t v16 = *(void *)(v43 + 8 * v17);
          if (!v16)
          {
            uint64_t v18 = v10 + 4;
            if (v10 + 4 >= v44) {
              goto LABEL_42;
            }
            unint64_t v16 = *(void *)(v43 + 8 * v18);
            if (!v16)
            {
              while (1)
              {
                int64_t v17 = v18 + 1;
                if (__OFADD__(v18, 1)) {
                  goto LABEL_46;
                }
                if (v17 >= v44) {
                  goto LABEL_42;
                }
                unint64_t v16 = *(void *)(v43 + 8 * v17);
                ++v18;
                if (v16) {
                  goto LABEL_26;
                }
              }
            }
            int64_t v17 = v10 + 4;
          }
        }
      }
LABEL_26:
      uint64_t v46 = (v16 - 1) & v16;
      int64_t v47 = v17;
      unint64_t v14 = __clz(__rbit64(v16)) + (v17 << 6);
    }
    uint64_t v19 = (uint64_t *)(*(void *)(v4 + 48) + 40 * v14);
    uint64_t v20 = *v19;
    uint64_t v21 = v19[1];
    uint64_t v22 = v19[3];
    uint64_t v23 = v19[4];
    swift_bridgeObjectRetain_n();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
      uint64_t v11 = sub_100A6E25C(0, v11[2] + 1, 1, v11);
    }
    unint64_t v25 = v11[2];
    unint64_t v24 = v11[3];
    if (v25 >= v24 >> 1) {
      uint64_t v11 = sub_100A6E25C((void *)(v24 > 1), v25 + 1, 1, v11);
    }
    v11[2] = v25 + 1;
    uint64_t v26 = v11;
    uint64_t v27 = &v11[2 * v25];
    v27[4] = v22;
    uint64_t v27[5] = v23;
    sub_10000588C(&qword_1016552B0);
    uint64_t v28 = swift_allocObject();
    *(_OWORD *)(v28 + 16) = xmmword_101342130;
    *(void *)(v28 + 32) = v20;
    *(void *)(v28 + 40) = v21;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    os_log_type_t v48 = v12;
    unint64_t v31 = sub_100723FF4(v22, v23);
    uint64_t v32 = v12[2];
    BOOL v33 = (v30 & 1) == 0;
    uint64_t v34 = v32 + v33;
    if (__OFADD__(v32, v33))
    {
      __break(1u);
LABEL_44:
      __break(1u);
LABEL_45:
      __break(1u);
LABEL_46:
      __break(1u);
      goto LABEL_47;
    }
    char v35 = v30;
    if (v12[3] < v34) {
      break;
    }
    if (isUniquelyReferenced_nonNull_native)
    {
      uint64_t v12 = v48;
      if (v30) {
        goto LABEL_9;
      }
    }
    else
    {
      sub_100E87020();
      uint64_t v12 = v48;
      if (v35)
      {
LABEL_9:
        uint64_t v13 = v12[7];
        swift_bridgeObjectRelease();
        *(void *)(v13 + 8 * v31) = v28;
        goto LABEL_10;
      }
    }
LABEL_38:
    v12[(v31 >> 6) + 8] |= 1 << v31;
    unint64_t v38 = (uint64_t *)(v12[6] + 16 * v31);
    *unint64_t v38 = v22;
    v38[1] = v23;
    *(void *)(v12[7] + 8 * v31) = v28;
    uint64_t v39 = v12[2];
    BOOL v40 = __OFADD__(v39, 1);
    uint64_t v41 = v39 + 1;
    if (v40) {
      goto LABEL_44;
    }
    void v12[2] = v41;
    swift_bridgeObjectRetain();
LABEL_10:
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease();
    uint64_t v4 = v45;
    uint64_t v11 = v26;
    unint64_t v9 = v46;
    int64_t v10 = v47;
  }
  sub_100E775C0(v34, isUniquelyReferenced_nonNull_native);
  uint64_t v36 = sub_100723FF4(v22, v23);
  if ((v35 & 1) == (v37 & 1))
  {
    unint64_t v31 = v36;
    uint64_t v12 = v48;
    if (v35) {
      goto LABEL_9;
    }
    goto LABEL_38;
  }
  uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

uint64_t sub_100BAE6D4(uint64_t a1, uint64_t a2, uint64_t a3, int a4, void (*a5)(void, void), unint64_t a6, void (*a7)(void, void, void), uint64_t a8, unint64_t a9, uint64_t a10, unint64_t a11)
{
  int64_t v44 = a7;
  uint64_t v45 = a8;
  int v43 = a4;
  uint64_t v17 = type metadata accessor for DispatchPredicate();
  uint64_t v18 = *(void *)(v17 - 8);
  __chkstk_darwin(v17);
  uint64_t v20 = (void (**)(void, void))((char *)&v42 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v21 = *(void **)(v11 + OBJC_IVAR____TtC12searchpartyd25SecureLocationsKeyManager_keySharingQueue);
  *uint64_t v20 = v21;
  (*(void (**)(void *, void, uint64_t))(v18 + 104))(v20, enum case for DispatchPredicate.onQueue(_:), v17);
  id v22 = v21;
  LOBYTE(v21) = _dispatchPreconditionTest(_:)();
  unint64_t v24 = *(void (**)(void *, uint64_t))(v18 + 8);
  uint64_t v23 = v18 + 8;
  v24(v20, v17);
  if (v21)
  {
    swift_retain();
    sub_100523138(a1, a2, a3, v43, a5, a6, v44, v45, a9, a10, a11);
    uint64_t v31 = v45;
    swift_release();
    if (qword_101637070 != -1) {
      swift_once();
    }
    uint64_t v32 = type metadata accessor for Logger();
    sub_100010324(v32, (uint64_t)qword_10170EC30);
    sub_1000361E0(v31, a9);
    sub_1000361E0(a10, a11);
    swift_bridgeObjectRetain();
    sub_1000361E0(v31, a9);
    sub_1000361E0(a10, a11);
    swift_bridgeObjectRetain();
    BOOL v33 = Logger.logObject.getter();
    os_log_type_t v34 = static os_log_type_t.default.getter();
    int v35 = v34;
    if (os_log_type_enabled(v33, v34))
    {
      uint64_t v36 = swift_slowAlloc();
      int64_t v44 = (void (*)(void, void, void))swift_slowAlloc();
      v48[0] = (uint64_t)v44;
      *(_DWORD *)uint64_t v36 = 141559299;
      uint64_t v46 = 1752392040;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v36 + 12) = 2081;
      os_log_type_t v42 = a5;
      uint64_t v46 = v31;
      unint64_t v47 = a9;
      sub_10043C20C();
      int v43 = v35;
      uint64_t v37 = RawRepresentable<>.base64EncodedString(options:)();
      uint64_t v46 = sub_1008FA0F0(v37, v38, v48);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      sub_10001CFB8(v31, a9);
      sub_10001CFB8(v31, a9);
      *(_WORD *)(v36 + 22) = 2160;
      uint64_t v46 = 1752392040;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v36 + 32) = 2081;
      uint64_t v46 = a10;
      unint64_t v47 = a11;
      sub_1001D780C();
      uint64_t v39 = RawRepresentable<>.base64EncodedString(options:)();
      uint64_t v46 = sub_1008FA0F0(v39, v40, v48);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      sub_10001CFB8(a10, a11);
      sub_10001CFB8(a10, a11);
      *(_WORD *)(v36 + 42) = 2160;
      uint64_t v46 = 1752392040;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v36 + 52) = 2081;
      swift_bridgeObjectRetain();
      uint64_t v46 = sub_1008FA0F0((uint64_t)v42, a6, v48);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      _os_log_impl((void *)&_mh_execute_header, v33, (os_log_type_t)v43, "shareKey: Sent key %{private,mask.hash}s with locationId %{private,mask.hash}s to follower %{private,mask.hash}s", (uint8_t *)v36, 0x3Eu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      sub_10001CFB8(v31, a9);
      sub_10001CFB8(v31, a9);
      sub_10001CFB8(a10, a11);
      sub_10001CFB8(a10, a11);

      swift_bridgeObjectRelease_n();
    }
    return 0;
  }
  else
  {
    __break(1u);
    swift_once();
    uint64_t v25 = type metadata accessor for Logger();
    sub_100010324(v25, (uint64_t)qword_10170EC30);
    swift_errorRetain();
    swift_errorRetain();
    uint64_t v26 = Logger.logObject.getter();
    os_log_type_t v27 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v26, v27))
    {
      uint64_t v28 = (uint8_t *)swift_slowAlloc();
      uint64_t v46 = swift_slowAlloc();
      *(_DWORD *)uint64_t v28 = 136315138;
      v48[0] = a1;
      swift_errorRetain();
      sub_10000588C(&qword_101638D40);
      uint64_t v29 = String.init<A>(describing:)();
      v48[0] = sub_1008FA0F0(v29, v30, &v46);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      swift_errorRelease();
      swift_errorRelease();
      _os_log_impl((void *)&_mh_execute_header, v26, v27, "shareKey: Error sending IDS message: %s", v28, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      swift_errorRelease();
      swift_errorRelease();
    }

    if (qword_101637440 != -1) {
      swift_once();
    }
    swift_retain();
    sub_1010DF9F0(a2, v23, 0xD000000000000015, 0x80000001014155A0);
    swift_release();
  }
  return a1;
}

uint64_t sub_100BAEDB0()
{
  return swift_release();
}

uint64_t sub_100BAEE64(uint64_t a1, uint64_t a2, uint64_t (*a3)(void), uint64_t a4)
{
  uint64_t v8 = (void *)swift_allocObject();
  v8[2] = a3;
  v8[3] = a4;
  v8[4] = a2;
  v8[5] = a1;
  swift_retain_n();
  swift_retain_n();
  swift_retain_n();
  if (sub_100BA0BA4())
  {
    sub_100BAF048(1, a3, a4, a2, a1);
  }
  else
  {
    if (qword_101637070 != -1) {
      swift_once();
    }
    uint64_t v9 = type metadata accessor for Logger();
    sub_100010324(v9, (uint64_t)qword_10170EC30);
    int64_t v10 = Logger.logObject.getter();
    os_log_type_t v11 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v10, v11))
    {
      uint64_t v12 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v12 = 0;
      _os_log_impl((void *)&_mh_execute_header, v10, v11, "SetupVirtualMeDevice: Waiting on beaconStore to become available", v12, 2u);
      swift_slowDealloc();
    }

    swift_retain();
    swift_retain();
    uint64_t v13 = swift_retain();
    sub_100B500A4(v13, a2, (uint64_t)sub_100BB83E4, (uint64_t)v8);
    swift_release();
    swift_release();
    swift_release();
  }
  swift_release();
  swift_release();
  swift_release();
  return swift_release();
}

uint64_t sub_100BAF048(char a1, uint64_t (*a2)(void), uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v10 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v32 = *(void *)(v10 - 8);
  __chkstk_darwin(v10);
  uint64_t v12 = (char *)&v30 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = type metadata accessor for DispatchQoS();
  uint64_t v14 = *(void *)(v13 - 8);
  __chkstk_darwin(v13);
  unint64_t v16 = (char *)&v30 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (a1)
  {
    uint64_t v31 = a3;
    uint64_t v17 = a2;
    if (qword_101637080 != -1) {
      swift_once();
    }
    swift_retain();
    char v18 = sub_100D0C0B0();
    swift_release();
    if (v18)
    {
      uint64_t v30 = *(void *)(a4 + 48);
      uint64_t v19 = (void *)swift_allocObject();
      v19[2] = a4;
      v19[3] = v17;
      v19[4] = v31;
      v19[5] = a5;
      aBlock[4] = sub_100BB8438;
      aBlock[5] = v19;
      aBlock[0] = _NSConcreteStackBlock;
      aBlock[1] = 1107296256;
      aBlock[2] = sub_1004B5480;
      aBlock[3] = &unk_1015EBAB0;
      uint64_t v20 = _Block_copy(aBlock);
      swift_retain();
      swift_retain();
      swift_retain();
      static DispatchQoS.unspecified.getter();
      BOOL v33 = _swiftEmptyArrayStorage;
      sub_100BB245C((unint64_t *)&qword_10163B7E0, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
      sub_10000588C((uint64_t *)&unk_10163F350);
      sub_100062734((unint64_t *)&qword_10163B7F0, (uint64_t *)&unk_10163F350);
      dispatch thunk of SetAlgebra.init<A>(_:)();
      OS_dispatch_queue.async(group:qos:flags:execute:)();
      _Block_release(v20);
      (*(void (**)(char *, uint64_t))(v32 + 8))(v12, v10);
      (*(void (**)(char *, uint64_t))(v14 + 8))(v16, v13);
      return swift_release();
    }
    else
    {
      if (qword_101637070 != -1) {
        swift_once();
      }
      uint64_t v26 = type metadata accessor for Logger();
      sub_100010324(v26, (uint64_t)qword_10170EC30);
      os_log_type_t v27 = Logger.logObject.getter();
      os_log_type_t v28 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v27, v28))
      {
        uint64_t v29 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)uint64_t v29 = 0;
        _os_log_impl((void *)&_mh_execute_header, v27, v28, "performKeyRoll: Not a me device. Not initiating keyRoll", v29, 2u);
        swift_slowDealloc();
      }

      return v17(0);
    }
  }
  else
  {
    if (qword_101637070 != -1) {
      swift_once();
    }
    uint64_t v22 = type metadata accessor for Logger();
    sub_100010324(v22, (uint64_t)qword_10170EC30);
    uint64_t v23 = Logger.logObject.getter();
    os_log_type_t v24 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v23, v24))
    {
      uint64_t v25 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v25 = 0;
      _os_log_impl((void *)&_mh_execute_header, v23, v24, "performKeyRoll: secureLocations not setup. Not proceeding with KeyRoll", v25, 2u);
      swift_slowDealloc();
    }

    return a2(0);
  }
}

uint64_t sub_100BAF524(uint64_t a1, NSObject *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v76 = a4;
  unint64_t v93 = a2;
  uint64_t v94 = a3;
  uint64_t v5 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v91 = *(void *)(v5 - 8);
  uint64_t v92 = v5;
  __chkstk_darwin(v5);
  uint64_t v88 = (char *)&v75 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for DispatchQoS();
  uint64_t v89 = *(void *)(v7 - 8);
  uint64_t v90 = v7;
  __chkstk_darwin(v7);
  unint64_t v87 = (char *)&v75 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = type metadata accessor for DispatchQoS.QoSClass();
  uint64_t v86 = *(void *)(v9 - 8);
  __chkstk_darwin(v9);
  uint64_t v85 = (char *)&v75 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v80 = type metadata accessor for DispatchTime();
  uint64_t v79 = *(void *)(v80 - 8);
  uint64_t v11 = __chkstk_darwin(v80);
  unint64_t v77 = (char *)&v75 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v11);
  unint64_t v78 = (char *)&v75 - v13;
  uint64_t v14 = sub_10000588C(&qword_10163BB80);
  __chkstk_darwin(v14 - 8);
  unint64_t v16 = (char *)&v75 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v17 = type metadata accessor for KeyAlignmentRecord();
  uint64_t v82 = *(void *)(v17 - 8);
  uint64_t v83 = v17;
  __chkstk_darwin(v17);
  uint64_t v84 = (uint64_t)&v75 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v19 = sub_10000588C(&qword_101638CF0);
  __chkstk_darwin(v19 - 8);
  uint64_t v21 = (char *)&v75 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v22 = type metadata accessor for UUID();
  uint64_t v23 = *(void *)(v22 - 8);
  __chkstk_darwin(v22);
  uint64_t v25 = (char *)&v75 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_101637070 != -1) {
    swift_once();
  }
  uint64_t v26 = type metadata accessor for Logger();
  uint64_t v27 = sub_100010324(v26, (uint64_t)qword_10170EC30);
  os_log_type_t v28 = Logger.logObject.getter();
  os_log_type_t v29 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v28, v29))
  {
    uint64_t v30 = (uint8_t *)swift_slowAlloc();
    uint64_t v81 = v27;
    *(_WORD *)uint64_t v30 = 0;
    _os_log_impl((void *)&_mh_execute_header, v28, v29, "performKeyRoll: Starting ", v30, 2u);
    uint64_t v27 = v81;
    swift_slowDealloc();
  }

  sub_100BA10B4((uint64_t)v21);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v23 + 48))(v21, 1, v22) == 1)
  {
    sub_10001DAB4((uint64_t)v21, &qword_101638CF0);
    uint64_t v31 = Logger.logObject.getter();
    os_log_type_t v32 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v31, v32))
    {
      BOOL v33 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)BOOL v33 = 0;
      _os_log_impl((void *)&_mh_execute_header, v31, v32, "performKeyRoll: No VirtualMeDevice OBR Identifier", v33, 2u);
      swift_slowDealloc();
    }

    sub_10000584C();
    int v35 = v85;
    uint64_t v34 = v86;
    (*(void (**)(char *, void, uint64_t))(v86 + 104))(v85, enum case for DispatchQoS.QoSClass.default(_:), v9);
    uint64_t v36 = (void *)static OS_dispatch_queue.global(qos:)();
    (*(void (**)(char *, uint64_t))(v34 + 8))(v35, v9);
    uint64_t v37 = swift_allocObject();
    uint64_t v38 = v94;
    *(void *)(v37 + 16) = v93;
    *(void *)(v37 + 24) = v38;
    uint64_t v100 = sub_10041ED88;
    uint64_t v101 = v37;
    unsigned long long aBlock = _NSConcreteStackBlock;
    uint64_t v97 = 1107296256;
    unint64_t v98 = sub_1004B5480;
    unint64_t v99 = &unk_1015EBB00;
    uint64_t v39 = _Block_copy(&aBlock);
    swift_retain();
    unint64_t v40 = v87;
    static DispatchQoS.unspecified.getter();
    char v95 = _swiftEmptyArrayStorage;
    sub_100BB245C((unint64_t *)&qword_10163B7E0, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
    sub_10000588C((uint64_t *)&unk_10163F350);
    sub_100062734((unint64_t *)&qword_10163B7F0, (uint64_t *)&unk_10163F350);
    uint64_t v41 = v88;
    uint64_t v42 = v92;
    dispatch thunk of SetAlgebra.init<A>(_:)();
    OS_dispatch_queue.async(group:qos:flags:execute:)();
    _Block_release(v39);

    (*(void (**)(char *, uint64_t))(v91 + 8))(v41, v42);
    (*(void (**)(char *, uint64_t))(v89 + 8))(v40, v90);
    return swift_release();
  }
  int v43 = *(void (**)(char *, char *, uint64_t))(v23 + 32);
  uint64_t v75 = v22;
  v43(v25, v21, v22);
  swift_retain();
  sub_100B6C53C((uint64_t)v16);
  swift_release();
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v82 + 48))(v16, 1, v83) == 1)
  {
    sub_10001DAB4((uint64_t)v16, &qword_10163BB80);
    int64_t v44 = Logger.logObject.getter();
    os_log_type_t v45 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v44, v45))
    {
      uint64_t v46 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v46 = 0;
      _os_log_impl((void *)&_mh_execute_header, v44, v45, "performKeyRoll: No KeyAlignmentRecord setup for VirtualMeDevice", v46, 2u);
      swift_slowDealloc();
    }

    sub_10000584C();
    os_log_type_t v48 = v85;
    uint64_t v47 = v86;
    (*(void (**)(char *, void, uint64_t))(v86 + 104))(v85, enum case for DispatchQoS.QoSClass.default(_:), v9);
    uint64_t v49 = (void *)static OS_dispatch_queue.global(qos:)();
    (*(void (**)(char *, uint64_t))(v47 + 8))(v48, v9);
    uint64_t v50 = swift_allocObject();
    uint64_t v51 = v94;
    *(void *)(v50 + 16) = v93;
    *(void *)(v50 + 24) = v51;
    uint64_t v100 = sub_10041ED88;
    uint64_t v101 = v50;
    unsigned long long aBlock = _NSConcreteStackBlock;
    uint64_t v97 = 1107296256;
    unint64_t v98 = sub_1004B5480;
    unint64_t v99 = &unk_1015EBB50;
    uint64_t v52 = _Block_copy(&aBlock);
    swift_retain();
    uint64_t v53 = v87;
    static DispatchQoS.unspecified.getter();
    char v95 = _swiftEmptyArrayStorage;
    sub_100BB245C((unint64_t *)&qword_10163B7E0, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
    sub_10000588C((uint64_t *)&unk_10163F350);
    sub_100062734((unint64_t *)&qword_10163B7F0, (uint64_t *)&unk_10163F350);
    uint64_t v54 = v88;
    uint64_t v55 = v92;
    dispatch thunk of SetAlgebra.init<A>(_:)();
    OS_dispatch_queue.async(group:qos:flags:execute:)();
    _Block_release(v52);

    (*(void (**)(char *, uint64_t))(v91 + 8))(v54, v55);
    (*(void (**)(char *, uint64_t))(v89 + 8))(v53, v90);
    (*(void (**)(char *, uint64_t))(v23 + 8))(v25, v75);
    return swift_release();
  }
  uint64_t v57 = (uint64_t)v16;
  uint64_t v58 = v84;
  sub_100BB668C(v57, v84, (uint64_t (*)(void))type metadata accessor for KeyAlignmentRecord);
  uint64_t v59 = dispatch_group_create();
  dispatch_group_enter(v59);
  uint64_t v60 = swift_allocObject();
  *(void *)(v60 + 16) = v59;
  *(void *)(v60 + 24) = a1;
  uint64_t v61 = v94;
  *(void *)(v60 + 32) = v93;
  *(void *)(v60 + 40) = v61;
  *(void *)(v60 + 48) = v76;
  swift_retain();
  unint64_t v93 = v59;
  swift_retain();
  swift_retain();
  swift_retain();
  sub_1010757E0(v58, 0, (void (*)(uint64_t))sub_100BB024C, 0, (void (*)(uint64_t (*)()))sub_100BB8494, (void (*)(uint64_t (*)()))v60);
  swift_release();
  swift_release();
  uint64_t v81 = v27;
  uint64_t v62 = Logger.logObject.getter();
  os_log_type_t v63 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v62, v63))
  {
    unint64_t v64 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)unint64_t v64 = 0;
    _os_log_impl((void *)&_mh_execute_header, v62, v63, "performKeyRoll: Waiting to complete KeyRoll", v64, 2u);
    swift_slowDealloc();
  }

  uint64_t v65 = v77;
  static DispatchTime.now()();
  unint64_t v66 = v78;
  + infix(_:_:)();
  int v67 = *(void (**)(char *, uint64_t))(v79 + 8);
  uint64_t v68 = v80;
  v67(v65, v80);
  os_log_type_t v69 = v93;
  OS_dispatch_group.wait(timeout:)();
  v67(v66, v68);
  char v70 = static DispatchTimeoutResult.== infix(_:_:)();
  uint64_t v71 = v75;
  if (v70)
  {
    uint64_t v72 = Logger.logObject.getter();
    os_log_type_t v73 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v72, v73))
    {
      uint64_t v74 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v74 = 0;
      _os_log_impl((void *)&_mh_execute_header, v72, v73, "performKeyRoll: Timed out waiting to modify KeyAlignmentRecord", v74, 2u);
      swift_slowDealloc();
    }
  }
  else
  {
    uint64_t v72 = v69;
  }

  sub_100BB66F4(v84, (uint64_t (*)(void))type metadata accessor for KeyAlignmentRecord);
  return (*(uint64_t (**)(char *, uint64_t))(v23 + 8))(v25, v71);
}

uint64_t sub_100BB024C(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for Date();
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  uint64_t v5 = (char *)&v12 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t result = type metadata accessor for KeyAlignmentRecord();
  uint64_t v7 = *(int *)(result + 28);
  uint64_t v8 = *(void *)(a1 + v7);
  BOOL v9 = __CFADD__(v8, 1);
  uint64_t v10 = v8 + 1;
  if (v9)
  {
    __break(1u);
  }
  else
  {
    uint64_t v11 = result;
    *(void *)(a1 + v7) = v10;
    static Date.trustedNow.getter((uint64_t)v5);
    return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v3 + 40))(a1 + *(int *)(v11 + 32), v5, v2);
  }
  return result;
}

void sub_100BB0344(uint64_t a1, NSObject *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v58 = a6;
  uint64_t v59 = a2;
  uint64_t v55 = a4;
  uint64_t v56 = a5;
  uint64_t v8 = type metadata accessor for DispatchQoS.QoSClass();
  uint64_t v52 = *(void *)(v8 - 8);
  uint64_t v53 = v8;
  __chkstk_darwin(v8);
  uint64_t v51 = (char *)v47 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v54 = *(void *)(v10 - 8);
  __chkstk_darwin(v10);
  uint64_t v12 = (char *)v47 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v57 = type metadata accessor for DispatchQoS();
  uint64_t v13 = *(void *)(v57 - 8);
  __chkstk_darwin(v57);
  uint64_t v15 = (char *)v47 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = type metadata accessor for KeyAlignmentRecord();
  __chkstk_darwin(v16 - 8);
  uint64_t v18 = (char *)v47 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v19 = sub_10000588C(&qword_10164B328);
  __chkstk_darwin(v19);
  uint64_t v21 = (void *)((char *)v47 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0));
  sub_10001D074(a1, (uint64_t)v21, &qword_10164B328);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v49 = v15;
    uint64_t v50 = v12;
    uint64_t v22 = v54;
    uint64_t v23 = (void *)*v21;
    if (qword_101637070 != -1) {
      swift_once();
    }
    uint64_t v24 = type metadata accessor for Logger();
    sub_100010324(v24, (uint64_t)qword_10170EC30);
    swift_errorRetain();
    swift_errorRetain();
    uint64_t v25 = Logger.logObject.getter();
    os_log_type_t v26 = static os_log_type_t.error.getter();
    BOOL v27 = os_log_type_enabled(v25, v26);
    uint64_t v48 = v13;
    if (v27)
    {
      os_log_type_t v28 = (uint8_t *)swift_slowAlloc();
      os_log_type_t v29 = (void **)swift_slowAlloc();
      uint64_t v60 = v23;
      unsigned long long aBlock = v29;
      *(_DWORD *)os_log_type_t v28 = 136315138;
      v47[1] = v28 + 4;
      swift_errorRetain();
      sub_10000588C(&qword_101638D40);
      uint64_t v30 = String.init<A>(describing:)();
      uint64_t v60 = (void *)sub_1008FA0F0(v30, v31, (uint64_t *)&aBlock);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      swift_errorRelease();
      swift_errorRelease();
      _os_log_impl((void *)&_mh_execute_header, v25, v26, "performKeyRoll: Error rolling keyIndex %s", v28, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      swift_errorRelease();
      swift_errorRelease();
    }

    uint64_t v36 = v49;
    uint64_t v37 = v55;
    uint64_t v38 = v56;
    sub_10000584C();
    unint64_t v40 = v51;
    uint64_t v39 = v52;
    uint64_t v41 = v53;
    (*(void (**)(char *, void, uint64_t))(v52 + 104))(v51, enum case for DispatchQoS.QoSClass.default(_:), v53);
    uint64_t v56 = static OS_dispatch_queue.global(qos:)();
    (*(void (**)(char *, uint64_t))(v39 + 8))(v40, v41);
    uint64_t v42 = (void *)swift_allocObject();
    v42[2] = v37;
    v42[3] = v38;
    unsigned char v42[4] = v23;
    uint64_t v65 = sub_10027B0F4;
    unint64_t v66 = v42;
    unsigned long long aBlock = _NSConcreteStackBlock;
    uint64_t v62 = 1107296256;
    os_log_type_t v63 = sub_1004B5480;
    unint64_t v64 = &unk_1015EBBC8;
    int v43 = _Block_copy(&aBlock);
    swift_retain();
    swift_errorRetain();
    static DispatchQoS.unspecified.getter();
    uint64_t v60 = _swiftEmptyArrayStorage;
    sub_100BB245C((unint64_t *)&qword_10163B7E0, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
    sub_10000588C((uint64_t *)&unk_10163F350);
    sub_100062734((unint64_t *)&qword_10163B7F0, (uint64_t *)&unk_10163F350);
    int64_t v44 = v50;
    dispatch thunk of SetAlgebra.init<A>(_:)();
    os_log_type_t v45 = (void *)v56;
    OS_dispatch_queue.async(group:qos:flags:execute:)();
    _Block_release(v43);

    swift_errorRelease();
    (*(void (**)(char *, uint64_t))(v22 + 8))(v44, v10);
    (*(void (**)(char *, uint64_t))(v48 + 8))(v36, v57);
  }
  else
  {
    sub_100BB668C((uint64_t)v21, (uint64_t)v18, (uint64_t (*)(void))type metadata accessor for KeyAlignmentRecord);
    os_log_type_t v32 = (void *)swift_allocObject();
    uint64_t v33 = v55;
    uint64_t v34 = v56;
    v32[2] = a3;
    v32[3] = v33;
    long long v32[4] = v34;
    uint64_t v65 = sub_100BB8590;
    unint64_t v66 = v32;
    unsigned long long aBlock = _NSConcreteStackBlock;
    uint64_t v62 = 1107296256;
    os_log_type_t v63 = sub_1004B5480;
    unint64_t v64 = &unk_1015EBC18;
    int v35 = _Block_copy(&aBlock);
    swift_retain();
    swift_retain();
    static DispatchQoS.unspecified.getter();
    uint64_t v60 = _swiftEmptyArrayStorage;
    sub_100BB245C((unint64_t *)&qword_10163B7E0, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
    sub_10000588C((uint64_t *)&unk_10163F350);
    sub_100062734((unint64_t *)&qword_10163B7F0, (uint64_t *)&unk_10163F350);
    dispatch thunk of SetAlgebra.init<A>(_:)();
    OS_dispatch_queue.async(group:qos:flags:execute:)();
    _Block_release(v35);
    (*(void (**)(char *, uint64_t))(v54 + 8))(v12, v10);
    (*(void (**)(char *, uint64_t))(v13 + 8))(v15, v57);
    sub_100BB66F4((uint64_t)v18, (uint64_t (*)(void))type metadata accessor for KeyAlignmentRecord);
  }
  swift_release();
  uint64_t v46 = v59;
  Transaction.capture()();
  dispatch_group_leave(v46);
}

void sub_100BB0B44(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v21 = a2;
  uint64_t v22 = a3;
  uint64_t v3 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v25 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  uint64_t v5 = (char *)&v21 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = type metadata accessor for DispatchQoS();
  uint64_t v23 = *(void *)(v6 - 8);
  uint64_t v24 = v6;
  __chkstk_darwin(v6);
  uint64_t v8 = (char *)&v21 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = type metadata accessor for DispatchQoS.QoSClass();
  uint64_t v10 = *(void *)(v9 - 8);
  __chkstk_darwin(v9);
  uint64_t v12 = (char *)&v21 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_101637070 != -1) {
    swift_once();
  }
  uint64_t v13 = type metadata accessor for Logger();
  sub_100010324(v13, (uint64_t)qword_10170EC30);
  uint64_t v14 = Logger.logObject.getter();
  os_log_type_t v15 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v14, v15))
  {
    uint64_t v16 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v16 = 0;
    _os_log_impl((void *)&_mh_execute_header, v14, v15, "performKeyRoll: Modified keyIndex.", v16, 2u);
    swift_slowDealloc();
  }

  sub_100BA8D58();
  sub_100BADF2C();
  LOBYTE(aBlock[0]) = 1;
  CurrentValueSubject.send(_:)();
  sub_10000584C();
  (*(void (**)(char *, void, uint64_t))(v10 + 104))(v12, enum case for DispatchQoS.QoSClass.default(_:), v9);
  uint64_t v17 = (void *)static OS_dispatch_queue.global(qos:)();
  (*(void (**)(char *, uint64_t))(v10 + 8))(v12, v9);
  uint64_t v18 = swift_allocObject();
  uint64_t v19 = v22;
  *(void *)(v18 + 16) = v21;
  *(void *)(v18 + 24) = v19;
  aBlock[4] = sub_1003C6214;
  aBlock[5] = v18;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_1004B5480;
  aBlock[3] = &unk_1015EBC68;
  uint64_t v20 = _Block_copy(aBlock);
  swift_retain();
  static DispatchQoS.unspecified.getter();
  os_log_type_t v26 = _swiftEmptyArrayStorage;
  sub_100BB245C((unint64_t *)&qword_10163B7E0, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
  sub_10000588C((uint64_t *)&unk_10163F350);
  sub_100062734((unint64_t *)&qword_10163B7F0, (uint64_t *)&unk_10163F350);
  dispatch thunk of SetAlgebra.init<A>(_:)();
  OS_dispatch_queue.async(group:qos:flags:execute:)();
  _Block_release(v20);

  (*(void (**)(char *, uint64_t))(v25 + 8))(v5, v3);
  (*(void (**)(char *, uint64_t))(v23 + 8))(v8, v24);
  swift_release();
  if (qword_101637440 != -1) {
    swift_once();
  }
  sub_1010E1D10();
}

uint64_t sub_100BB0FE8@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  uint64_t v5 = type metadata accessor for String.Encoding();
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v8 = (char *)v37 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = *(void *)(a1 + 72);
  if (v9)
  {
    *a2 = *(void *)(a1 + 64);
    a2[1] = v9;
    return swift_bridgeObjectRetain();
  }
  id v10 = [objc_allocWithZone((Class)ACAccountStore) init];
  id v11 = [v10 aa_primaryAppleAccount];

  if (!v11)
  {
    if (qword_101637070 != -1) {
      swift_once();
    }
    uint64_t v19 = type metadata accessor for Logger();
    sub_100010324(v19, (uint64_t)qword_10170EC30);
    uint64_t v20 = Logger.logObject.getter();
    os_log_type_t v21 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v20, v21))
    {
      uint64_t v22 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v22 = 0;
      _os_log_impl((void *)&_mh_execute_header, v20, v21, "Could not obtain aa_primaryAppleAccount while getting myPersonID !", v22, 2u);
      swift_slowDealloc();
    }

    goto LABEL_17;
  }
  id v12 = [v11 aa_personID];
  if (!v12)
  {
    if (qword_101637070 != -1) {
      swift_once();
    }
    uint64_t v23 = type metadata accessor for Logger();
    sub_100010324(v23, (uint64_t)qword_10170EC30);
    uint64_t v24 = Logger.logObject.getter();
    os_log_type_t v25 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v24, v25))
    {
      os_log_type_t v26 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)os_log_type_t v26 = 0;
      _os_log_impl((void *)&_mh_execute_header, v24, v25, "Primary AppleAccount has nil aa_personID!", v26, 2u);
      swift_slowDealloc();
    }

LABEL_17:
    *a2 = 0;
    a2[1] = 0;
    return swift_bridgeObjectRetain();
  }
  uint64_t v13 = v12;
  id v41 = v11;
  uint64_t v47 = v2;
  static String._unconditionallyBridgeFromObjectiveC(_:)();

  static String.Encoding.utf8.getter();
  uint64_t v14 = String.data(using:allowLossyConversion:)();
  unint64_t v16 = v15;
  swift_bridgeObjectRelease();
  (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  uint64_t v40 = v14;
  if (v16 >> 60 == 15)
  {
    uint64_t v17 = 0;
    unint64_t v18 = 0;
  }
  else
  {
    sub_1000361E0(v14, v16);
    Swift::String v27 = Data.base64EncodedString(options:)(0);
    sub_100037A24(v14, v16);
    Swift::String v46 = v27;
    uint64_t v44 = 61;
    unint64_t v45 = 0xE100000000000000;
    uint64_t v42 = 126;
    unint64_t v43 = 0xE100000000000000;
    sub_1000336D4();
    uint64_t v17 = StringProtocol.replacingOccurrences<A, B>(of:with:options:range:)();
    unint64_t v18 = v28;
    swift_bridgeObjectRelease();
  }
  *(void *)(a1 + 64) = v17;
  *(void *)(a1 + 72) = v18;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  if (qword_101637070 != -1) {
    swift_once();
  }
  uint64_t v29 = type metadata accessor for Logger();
  sub_100010324(v29, (uint64_t)qword_10170EC30);
  swift_bridgeObjectRetain();
  uint64_t v30 = Logger.logObject.getter();
  os_log_type_t v31 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v30, v31))
  {
    os_log_type_t v32 = (uint8_t *)swift_slowAlloc();
    uint64_t v38 = swift_slowAlloc();
    v46._countAndFlagsBits = v38;
    unint64_t v39 = v16;
    *(_DWORD *)os_log_type_t v32 = 136315138;
    if (v18) {
      uint64_t v33 = v17;
    }
    else {
      uint64_t v33 = 7104878;
    }
    if (v18) {
      unint64_t v34 = v18;
    }
    else {
      unint64_t v34 = 0xE300000000000000;
    }
    v37[1] = v32 + 4;
    swift_bridgeObjectRetain();
    uint64_t v44 = sub_1008FA0F0(v33, v34, &v46._countAndFlagsBits);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v30, v31, "MyPersonID %s", v32, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    sub_100037A24(v40, v39);
  }
  else
  {
    sub_100037A24(v40, v16);

    swift_bridgeObjectRelease_n();
  }
  uint64_t v35 = *(void *)(a1 + 72);
  *a2 = *(void *)(a1 + 64);
  a2[1] = v35;
  swift_bridgeObjectRetain();
  return swift_bridgeObjectRetain();
}

uint64_t sub_100BB158C()
{
  sub_1000A1534(*(void *)(v0 + 16));
  swift_release();
  swift_release();

  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  sub_10001DAB4(v0 + OBJC_IVAR____TtC12searchpartyd25SecureLocationsKeyManager_cachedSharingKey, &qword_101660B90);
  swift_release();
  swift_release();

  swift_bridgeObjectRelease();
  swift_release();
  return v0;
}

uint64_t sub_100BB1684()
{
  sub_100BB158C();

  return swift_deallocClassInstance();
}

uint64_t sub_100BB16DC()
{
  return type metadata accessor for SecureLocationsKeyManager(0);
}

uint64_t type metadata accessor for SecureLocationsKeyManager(uint64_t a1)
{
  return sub_1000F4EA4(a1, (uint64_t *)&unk_10165A378);
}

void sub_100BB1704()
{
  sub_100BB98CC(319, (unint64_t *)&unk_10165A388, (void (*)(uint64_t))type metadata accessor for SecureLocationsCachedSharingKey);
  if (v0 <= 0x3F) {
    swift_updateClassMetadata2();
  }
}

uint64_t type metadata accessor for SecureLocationsCachedSharingKey(uint64_t a1)
{
  return sub_1000F4EA4(a1, qword_10165A6E0);
}

uint64_t *sub_100BB1830(uint64_t *a1, uint64_t *a2, int *a3)
{
  int v5 = *(_DWORD *)(*((void *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v16 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v16 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v7 = type metadata accessor for URL();
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v7 - 8) + 16))(a1, a2, v7);
    uint64_t v8 = a3[5];
    uint64_t v9 = (char *)a1 + v8;
    id v10 = (char *)a2 + v8;
    uint64_t v11 = type metadata accessor for UUID();
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v11 - 8) + 16))(v9, v10, v11);
    uint64_t v12 = a3[6];
    uint64_t v13 = (char *)a1 + v12;
    uint64_t v14 = (uint64_t *)((char *)a2 + v12);
    unint64_t v15 = *(uint64_t *)((char *)a2 + v12 + 8);
    if (v15 >> 60 == 15)
    {
      *(_OWORD *)uint64_t v13 = *(_OWORD *)v14;
    }
    else
    {
      uint64_t v17 = *v14;
      sub_1000361E0(*v14, v15);
      *(void *)uint64_t v13 = v17;
      *((void *)v13 + 1) = v15;
    }
    uint64_t v18 = v14[2];
    unint64_t v19 = v14[3];
    sub_1000361E0(v18, v19);
    *((void *)v13 + 2) = v18;
    *((void *)v13 + 3) = v19;
    uint64_t v20 = v14 + 4;
    unint64_t v21 = v14[5];
    if (v21 >> 60 == 15)
    {
      *((_OWORD *)v13 + 2) = *(_OWORD *)v20;
    }
    else
    {
      uint64_t v22 = *v20;
      sub_1000361E0(*v20, v14[5]);
      *((void *)v13 + 4) = v22;
      *((void *)v13 + 5) = v21;
    }
    *(uint64_t *)((char *)a1 + a3[7]) = *(uint64_t *)((char *)a2 + a3[7]);
  }
  return a1;
}

uint64_t sub_100BB19DC(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for URL();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8))(a1, v4);
  uint64_t v5 = a1 + *(int *)(a2 + 20);
  uint64_t v6 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v6 - 8) + 8))(v5, v6);
  uint64_t v7 = (uint64_t *)(a1 + *(int *)(a2 + 24));
  unint64_t v8 = v7[1];
  if (v8 >> 60 != 15) {
    sub_10001CFB8(*v7, v8);
  }
  uint64_t result = sub_10001CFB8(v7[2], v7[3]);
  unint64_t v10 = v7[5];
  if (v10 >> 60 != 15)
  {
    uint64_t v11 = v7[4];
    return sub_10001CFB8(v11, v10);
  }
  return result;
}

uint64_t sub_100BB1ADC(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for URL();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 16))(a1, a2, v6);
  uint64_t v7 = a3[5];
  uint64_t v8 = a1 + v7;
  uint64_t v9 = a2 + v7;
  uint64_t v10 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 16))(v8, v9, v10);
  uint64_t v11 = a3[6];
  uint64_t v12 = a1 + v11;
  uint64_t v13 = (uint64_t *)(a2 + v11);
  unint64_t v14 = *(void *)(a2 + v11 + 8);
  if (v14 >> 60 == 15)
  {
    *(_OWORD *)uint64_t v12 = *(_OWORD *)v13;
  }
  else
  {
    uint64_t v15 = *v13;
    sub_1000361E0(*v13, v14);
    *(void *)uint64_t v12 = v15;
    *(void *)(v12 + 8) = v14;
  }
  uint64_t v16 = v13[2];
  unint64_t v17 = v13[3];
  sub_1000361E0(v16, v17);
  *(void *)(v12 + 16) = v16;
  *(void *)(v12 + 24) = v17;
  uint64_t v18 = v13 + 4;
  unint64_t v19 = v13[5];
  if (v19 >> 60 == 15)
  {
    *(_OWORD *)(v12 + 32) = *(_OWORD *)v18;
  }
  else
  {
    uint64_t v20 = *v18;
    sub_1000361E0(*v18, v13[5]);
    *(void *)(v12 + 32) = v20;
    *(void *)(v12 + 40) = v19;
  }
  *(void *)(a1 + a3[7]) = *(void *)(a2 + a3[7]);
  return a1;
}

uint64_t sub_100BB1C38(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for URL();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 24))(a1, a2, v6);
  uint64_t v7 = a3[5];
  uint64_t v8 = a1 + v7;
  uint64_t v9 = a2 + v7;
  uint64_t v10 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 24))(v8, v9, v10);
  uint64_t v11 = a3[6];
  uint64_t v12 = (uint64_t *)(a1 + v11);
  uint64_t v13 = (uint64_t *)(a2 + v11);
  unint64_t v14 = *(void *)(a2 + v11 + 8);
  if (*(void *)(a1 + v11 + 8) >> 60 == 15)
  {
    if (v14 >> 60 != 15)
    {
      uint64_t v15 = *v13;
      sub_1000361E0(*v13, v14);
      *uint64_t v12 = v15;
      v12[1] = v14;
      goto LABEL_8;
    }
    goto LABEL_6;
  }
  if (v14 >> 60 == 15)
  {
    sub_100A989D4((uint64_t)v12);
LABEL_6:
    *(_OWORD *)uint64_t v12 = *(_OWORD *)v13;
    goto LABEL_8;
  }
  uint64_t v16 = *v13;
  sub_1000361E0(*v13, v14);
  uint64_t v17 = *v12;
  unint64_t v18 = v12[1];
  *uint64_t v12 = v16;
  v12[1] = v14;
  sub_10001CFB8(v17, v18);
LABEL_8:
  uint64_t v19 = v13[2];
  unint64_t v20 = v13[3];
  sub_1000361E0(v19, v20);
  uint64_t v21 = v12[2];
  unint64_t v22 = v12[3];
  void v12[2] = v19;
  v12[3] = v20;
  sub_10001CFB8(v21, v22);
  uint64_t v23 = v13 + 4;
  unint64_t v24 = v13[5];
  if ((unint64_t)v12[5] >> 60 != 15)
  {
    if (v24 >> 60 != 15)
    {
      uint64_t v26 = *v23;
      sub_1000361E0(*v23, v13[5]);
      uint64_t v27 = v12[4];
      unint64_t v28 = v12[5];
      v12[4] = v26;
      v12[5] = v24;
      sub_10001CFB8(v27, v28);
      goto LABEL_15;
    }
    sub_10042BA84((uint64_t)(v12 + 4));
    goto LABEL_13;
  }
  if (v24 >> 60 == 15)
  {
LABEL_13:
    *((_OWORD *)v12 + 2) = *(_OWORD *)v23;
    goto LABEL_15;
  }
  uint64_t v25 = *v23;
  sub_1000361E0(*v23, v13[5]);
  v12[4] = v25;
  v12[5] = v24;
LABEL_15:
  *(void *)(a1 + a3[7]) = *(void *)(a2 + a3[7]);
  return a1;
}

uint64_t sub_100BB1E24(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for URL();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 32))(a1, a2, v6);
  uint64_t v7 = a3[5];
  uint64_t v8 = a1 + v7;
  uint64_t v9 = a2 + v7;
  uint64_t v10 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 32))(v8, v9, v10);
  uint64_t v11 = a3[6];
  uint64_t v12 = a3[7];
  uint64_t v13 = (_OWORD *)(a1 + v11);
  unint64_t v14 = (_OWORD *)(a2 + v11);
  long long v15 = v14[1];
  *uint64_t v13 = *v14;
  v13[1] = v15;
  v13[2] = v14[2];
  *(void *)(a1 + v12) = *(void *)(a2 + v12);
  return a1;
}

uint64_t sub_100BB1F08(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for URL();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 40))(a1, a2, v6);
  uint64_t v7 = a3[5];
  uint64_t v8 = a1 + v7;
  uint64_t v9 = a2 + v7;
  uint64_t v10 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 40))(v8, v9, v10);
  uint64_t v11 = a3[6];
  uint64_t v12 = a1 + v11;
  uint64_t v13 = a2 + v11;
  unint64_t v14 = *(void *)(a1 + v11 + 8);
  if (v14 >> 60 == 15) {
    goto LABEL_4;
  }
  unint64_t v15 = *(void *)(v13 + 8);
  if (v15 >> 60 == 15)
  {
    sub_100A989D4(v12);
LABEL_4:
    *(_OWORD *)uint64_t v12 = *(_OWORD *)v13;
    goto LABEL_6;
  }
  uint64_t v16 = *(void *)v12;
  *(void *)uint64_t v12 = *(void *)v13;
  *(void *)(v12 + 8) = v15;
  sub_10001CFB8(v16, v14);
LABEL_6:
  uint64_t v17 = *(void *)(v12 + 16);
  unint64_t v18 = *(void *)(v12 + 24);
  *(_OWORD *)(v12 + 16) = *(_OWORD *)(v13 + 16);
  sub_10001CFB8(v17, v18);
  uint64_t v19 = (void *)(v13 + 32);
  unint64_t v20 = *(void *)(v12 + 40);
  if (v20 >> 60 != 15)
  {
    unint64_t v21 = *(void *)(v13 + 40);
    if (v21 >> 60 != 15)
    {
      uint64_t v22 = *(void *)(v12 + 32);
      *(void *)(v12 + 32) = *v19;
      *(void *)(v12 + 40) = v21;
      sub_10001CFB8(v22, v20);
      goto LABEL_11;
    }
    sub_10042BA84(v12 + 32);
  }
  *(_OWORD *)(v12 + 32) = *(_OWORD *)v19;
LABEL_11:
  *(void *)(a1 + a3[7]) = *(void *)(a2 + a3[7]);
  return a1;
}

uint64_t sub_100BB2088(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_100BB209C);
}

uint64_t sub_100BB209C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for URL();
  uint64_t v7 = *(void *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == a2)
  {
    uint64_t v8 = v6;
    uint64_t v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    uint64_t v10 = a1;
  }
  else
  {
    uint64_t v11 = type metadata accessor for UUID();
    uint64_t v12 = *(void *)(v11 - 8);
    if (*(_DWORD *)(v12 + 84) != a2)
    {
      uint64_t v14 = *(void *)(a1 + *(int *)(a3 + 24) + 24) >> 60;
      if (((4 * v14) & 0xC) != 0) {
        return 16 - ((4 * v14) & 0xC | (v14 >> 2));
      }
      else {
        return 0;
      }
    }
    uint64_t v8 = v11;
    uint64_t v10 = a1 + *(int *)(a3 + 20);
    uint64_t v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v12 + 48);
  }

  return v9(v10, a2, v8);
}

uint64_t sub_100BB21C4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_100BB21D8);
}

uint64_t sub_100BB21D8(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v8 = type metadata accessor for URL();
  uint64_t v9 = *(void *)(v8 - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    uint64_t v10 = v8;
    uint64_t v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    uint64_t v12 = a1;
  }
  else
  {
    uint64_t result = type metadata accessor for UUID();
    uint64_t v14 = *(void *)(result - 8);
    if (*(_DWORD *)(v14 + 84) != a3)
    {
      uint64_t v15 = a1 + *(int *)(a4 + 24);
      *(void *)(v15 + 16) = 0;
      *(void *)(v15 + 24) = (unint64_t)(((-(int)a2 >> 2) & 3) - 4 * a2) << 60;
      return result;
    }
    uint64_t v10 = result;
    uint64_t v12 = a1 + *(int *)(a4 + 20);
    uint64_t v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v14 + 56);
  }

  return v11(v12, a2, a2, v10);
}

uint64_t sub_100BB22F8()
{
  uint64_t result = type metadata accessor for URL();
  if (v1 <= 0x3F)
  {
    uint64_t result = type metadata accessor for UUID();
    if (v2 <= 0x3F)
    {
      swift_initStructMetadata();
      return 0;
    }
  }
  return result;
}

uint64_t sub_100BB23D8(uint64_t a1)
{
  *(void *)(a1 + 8) = sub_100BB245C(&qword_101660BA0, (void (*)(uint64_t))type metadata accessor for SecureLocationsCachedSharingKey);
  uint64_t result = sub_100BB245C(&qword_10165A720, (void (*)(uint64_t))type metadata accessor for SecureLocationsCachedSharingKey);
  *(void *)(a1 + 16) = result;
  return result;
}

uint64_t sub_100BB245C(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

unint64_t sub_100BB24A4()
{
  unint64_t result = qword_10165A730;
  if (!qword_10165A730)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10165A730);
  }
  return result;
}

unint64_t sub_100BB24F8()
{
  unint64_t result = qword_10165A738;
  if (!qword_10165A738)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10165A738);
  }
  return result;
}

unint64_t sub_100BB254C()
{
  unint64_t result = qword_10165A748;
  if (!qword_10165A748)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10165A748);
  }
  return result;
}

uint64_t sub_100BB25A0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unint64_t a3@<X2>, uint64_t *a4@<X8>)
{
  uint64_t v9 = type metadata accessor for SecureLocationsCachedSharedKey(0);
  uint64_t v10 = *(void *)(v9 - 8);
  __chkstk_darwin(v9);
  uint64_t v12 = (char *)&v86 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = (void *)(a1 + OBJC_IVAR____TtC12searchpartyd25SecureLocationsKeyManager_cachedDecryptionKeys);
  swift_beginAccess();
  char v95 = v13;
  uint64_t v14 = *v13;
  if (*(void *)(v14 + 16))
  {
    sub_1000361E0(a2, a3);
    swift_bridgeObjectRetain();
    uint64_t v15 = sub_100724CDC(a2, a3);
    if (v16)
    {
      uint64_t v17 = (uint64_t *)(*(void *)(v14 + 56) + 16 * v15);
      uint64_t v18 = *v17;
      unint64_t v19 = v17[1];
      sub_1000361E0(*v17, v19);
      swift_bridgeObjectRelease();
      uint64_t result = sub_10001CFB8(a2, a3);
      goto LABEL_128;
    }
    swift_bridgeObjectRelease();
    sub_10001CFB8(a2, a3);
  }
  NSString v96 = a4;
  swift_retain();
  unint64_t v21 = sub_100B6DC70();
  swift_release();
  uint64_t v22 = v21[2];
  if (!v22)
  {
LABEL_124:
    uint64_t result = swift_bridgeObjectRelease();
    uint64_t v18 = 0;
    unint64_t v19 = 0xF000000000000000;
    goto LABEL_127;
  }
  uint64_t v91 = v4;
  unint64_t v23 = (*(unsigned __int8 *)(v10 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v10 + 80);
  uint64_t v90 = v21;
  uint64_t v24 = (uint64_t)v21 + v23;
  unint64_t v94 = HIDWORD(a2);
  BOOL v25 = __OFSUB__(HIDWORD(a2), a2);
  BOOL v99 = v25;
  size_t v103 = BYTE6(a3);
  unint64_t v104 = a3 >> 62;
  uint64_t v100 = a3 & 0x3FFFFFFFFFFFFFFFLL;
  uint64_t v97 = (int)a2;
  size_t v98 = HIDWORD(a2) - (int)a2;
  uint64_t v93 = a2 >> 32;
  uint64_t v92 = (a2 >> 32) - (int)a2;
  uint64_t v105 = *(void *)(v10 + 72);
  unint64_t v101 = a3;
  uint64_t v102 = v9;
  while (2)
  {
    sub_100BB7A10(v24, (uint64_t)v12, type metadata accessor for SecureLocationsCachedSharedKey);
    uint64_t v26 = (uint64_t *)&v12[*(int *)(v9 + 28)];
    unint64_t v27 = v26[1];
    if (v27 >> 60 == 15)
    {
      sub_1000361E0(a2, a3);
      sub_100037A24(0, 0xF000000000000000);
      sub_100037A24(a2, a3);
      goto LABEL_11;
    }
    uint64_t v28 = *v26;
    uint64_t v29 = 0;
    switch(v27 >> 62)
    {
      case 1uLL:
        if (__OFSUB__(HIDWORD(v28), v28))
        {
          __break(1u);
LABEL_130:
          __break(1u);
LABEL_131:
          __break(1u);
LABEL_132:
          __break(1u);
LABEL_133:
          __break(1u);
LABEL_134:
          __break(1u);
LABEL_135:
          __break(1u);
LABEL_136:
          __break(1u);
LABEL_137:
          __break(1u);
LABEL_138:
          __break(1u);
LABEL_139:
          __break(1u);
LABEL_140:
          __break(1u);
LABEL_141:
          __break(1u);
LABEL_142:
          __break(1u);
LABEL_143:
          __break(1u);
LABEL_144:
          __break(1u);
LABEL_145:
          __break(1u);
LABEL_146:
          __break(1u);
LABEL_147:
          __break(1u);
LABEL_148:
          __break(1u);
LABEL_149:
          __break(1u);
LABEL_150:
          __break(1u);
LABEL_151:
          __break(1u);
        }
        uint64_t v29 = HIDWORD(v28) - (int)v28;
LABEL_18:
        sub_100037A38(v28, v27);
        sub_1000361E0(v28, v27);
        break;
      case 2uLL:
        uint64_t v31 = *(void *)(v28 + 16);
        uint64_t v30 = *(void *)(v28 + 24);
        uint64_t v29 = v30 - v31;
        if (!__OFSUB__(v30, v31)) {
          goto LABEL_18;
        }
        goto LABEL_130;
      case 3uLL:
        break;
      default:
        uint64_t v29 = BYTE6(v27);
        break;
    }
    size_t v32 = v103;
    switch((int)v104)
    {
      case 1:
        size_t v32 = v98;
        if (v99) {
          goto LABEL_131;
        }
        goto LABEL_23;
      case 2:
        uint64_t v34 = *(void *)(a2 + 16);
        uint64_t v33 = *(void *)(a2 + 24);
        BOOL v35 = __OFSUB__(v33, v34);
        size_t v32 = v33 - v34;
        if (!v35) {
          goto LABEL_23;
        }
        goto LABEL_132;
      case 3:
        if (v29) {
          goto LABEL_34;
        }
        goto LABEL_125;
      default:
LABEL_23:
        if (v29 != v32)
        {
LABEL_34:
          sub_100037A24(v28, v27);
          sub_100037A24(v28, v27);
          uint64_t v9 = v102;
          goto LABEL_11;
        }
        if (v29 >= 1)
        {
          switch(v27 >> 62)
          {
            case 1uLL:
              if ((int)v28 > v28 >> 32) {
                goto LABEL_133;
              }
              sub_1000361E0(a2, v101);
              uint64_t v40 = __DataStorage._bytes.getter();
              if (v40)
              {
                uint64_t v41 = v40;
                uint64_t v42 = __DataStorage._offset.getter();
                if (__OFSUB__((int)v28, v42)) {
                  goto LABEL_135;
                }
                uint64_t v89 = (char *)(v41 + (int)v28 - v42);
              }
              else
              {
                uint64_t v89 = 0;
              }
              __DataStorage._length.getter();
              a3 = v101;
              if (v104)
              {
                if (v104 == 1)
                {
                  if (v93 < v97) {
                    goto LABEL_143;
                  }
                  swift_retain();
                  uint64_t v57 = (char *)__DataStorage._bytes.getter();
                  if (v57)
                  {
                    uint64_t v58 = __DataStorage._offset.getter();
                    if (__OFSUB__(v97, v58)) {
                      goto LABEL_151;
                    }
                    v57 += v97 - v58;
                  }
                  uint64_t v59 = __DataStorage._length.getter();
                  size_t v60 = v92;
                  if (v59 < v92) {
                    size_t v60 = v59;
                  }
                  if (!v89) {
                    goto LABEL_156;
                  }
                  if (!v57) {
                    goto LABEL_157;
                  }
                  int v52 = memcmp(v89, v57, v60);
                  sub_10001CFB8(a2, a3);
                }
                else
                {
                  uint64_t v75 = *(void *)(a2 + 16);
                  uint64_t v88 = *(void *)(a2 + 24);
                  swift_retain();
                  swift_retain();
                  uint64_t v76 = (char *)__DataStorage._bytes.getter();
                  if (v76)
                  {
                    uint64_t v77 = __DataStorage._offset.getter();
                    if (__OFSUB__(v75, v77)) {
                      goto LABEL_150;
                    }
                    v76 += v75 - v77;
                  }
                  BOOL v35 = __OFSUB__(v88, v75);
                  int64_t v78 = v88 - v75;
                  if (v35) {
                    goto LABEL_145;
                  }
                  uint64_t v79 = __DataStorage._length.getter();
                  if (v79 >= v78) {
                    size_t v80 = v78;
                  }
                  else {
                    size_t v80 = v79;
                  }
                  if (!v89) {
                    goto LABEL_162;
                  }
                  a3 = v101;
                  if (!v76) {
                    goto LABEL_163;
                  }
                  int v52 = memcmp(v89, v76, v80);
                  swift_release();
LABEL_110:
                  swift_release();
                }
              }
              else
              {
                LOWORD(__s1[0]) = a2;
                BYTE2(__s1[0]) = BYTE2(a2);
                BYTE3(__s1[0]) = BYTE3(a2);
                BYTE4(__s1[0]) = v94;
                BYTE5(__s1[0]) = BYTE5(a2);
                BYTE6(__s1[0]) = BYTE6(a2);
                HIBYTE(__s1[0]) = HIBYTE(a2);
                LOWORD(__s1[1]) = v101;
                *(_DWORD *)((char *)&__s1[1] + 2) = *(_DWORD *)((char *)&v101 + 2);
                if (!v89) {
                  goto LABEL_161;
                }
                int v52 = memcmp(v89, __s1, v103);
              }
              uint64_t v81 = a2;
              goto LABEL_121;
            case 2uLL:
              unint64_t v43 = *(char **)(v28 + 16);
              sub_1000361E0(a2, a3);
              swift_retain();
              swift_retain();
              uint64_t v44 = __DataStorage._bytes.getter();
              if (v44)
              {
                uint64_t v45 = v44;
                uint64_t v89 = v43;
                uint64_t v46 = v27 & 0x3FFFFFFFFFFFFFFFLL;
                uint64_t v47 = __DataStorage._offset.getter();
                if (__OFSUB__(v89, v47)) {
                  goto LABEL_134;
                }
                uint64_t v89 = &v89[v45 - v47];
              }
              else
              {
                uint64_t v46 = v27 & 0x3FFFFFFFFFFFFFFFLL;
                uint64_t v89 = 0;
              }
              __DataStorage._length.getter();
              a3 = v101;
              if (!v104)
              {
                LOWORD(__s1[0]) = a2;
                BYTE2(__s1[0]) = BYTE2(a2);
                BYTE3(__s1[0]) = BYTE3(a2);
                BYTE4(__s1[0]) = v94;
                BYTE5(__s1[0]) = BYTE5(a2);
                BYTE6(__s1[0]) = BYTE6(a2);
                HIBYTE(__s1[0]) = HIBYTE(a2);
                LODWORD(__s1[1]) = v101;
                WORD2(__s1[1]) = WORD2(v101);
                if (!v89) {
                  goto LABEL_160;
                }
                int v52 = memcmp(v89, __s1, v103);
LABEL_94:
                swift_release();
                goto LABEL_110;
              }
              if (v104 == 1)
              {
                if (v93 < v97) {
                  goto LABEL_138;
                }
                swift_retain();
                uint64_t v53 = (char *)__DataStorage._bytes.getter();
                if (v53)
                {
                  uint64_t v54 = __DataStorage._offset.getter();
                  if (__OFSUB__(v97, v54)) {
                    goto LABEL_149;
                  }
                  v53 += v97 - v54;
                }
                uint64_t v55 = __DataStorage._length.getter();
                size_t v56 = v92;
                if (v55 < v92) {
                  size_t v56 = v55;
                }
                if (!v89) {
                  goto LABEL_154;
                }
                if (!v53) {
                  goto LABEL_155;
                }
                int v52 = memcmp(v89, v53, v56);
                a3 = v101;
                sub_10001CFB8(a2, v101);
                goto LABEL_94;
              }
              uint64_t v88 = *(void *)(a2 + 16);
              uint64_t v87 = *(void *)(a2 + 24);
              swift_retain();
              swift_retain();
              uint64_t v72 = (char *)__DataStorage._bytes.getter();
              uint64_t v86 = v46;
              if (v72)
              {
                uint64_t v73 = __DataStorage._offset.getter();
                uint64_t v74 = v88;
                if (__OFSUB__(v88, v73)) {
                  goto LABEL_148;
                }
                v72 += v88 - v73;
              }
              else
              {
                uint64_t v74 = v88;
              }
              int64_t v82 = v87 - v74;
              if (__OFSUB__(v87, v74)) {
                goto LABEL_144;
              }
              uint64_t v83 = __DataStorage._length.getter();
              if (v83 >= v82) {
                size_t v84 = v82;
              }
              else {
                size_t v84 = v83;
              }
              if (!v89) {
                goto LABEL_164;
              }
              if (!v72) {
                goto LABEL_165;
              }
              int v52 = memcmp(v89, v72, v84);
              swift_release();
              swift_release();
              swift_release();
              swift_release();
LABEL_120:
              uint64_t v81 = a2;
              a3 = v101;
LABEL_121:
              sub_10001CFB8(v81, a3);
LABEL_122:
              sub_100037A24(v28, v27);
              sub_100037A24(v28, v27);
              uint64_t v9 = v102;
              if (!v52) {
                goto LABEL_126;
              }
              break;
            case 3uLL:
              memset(__s1, 0, 14);
              if (!v104) {
                goto LABEL_51;
              }
              if (v104 == 1)
              {
                if (v93 < v97) {
                  goto LABEL_137;
                }
                sub_1000361E0(a2, a3);
                uint64_t v48 = __DataStorage._bytes.getter();
                if (!v48) {
                  goto LABEL_153;
                }
                uint64_t v37 = v48;
                uint64_t v49 = __DataStorage._offset.getter();
                uint64_t v39 = v97 - v49;
                if (__OFSUB__(v97, v49)) {
                  goto LABEL_142;
                }
LABEL_47:
                uint64_t v50 = __DataStorage._length.getter();
                if (v50 >= v92) {
                  size_t v51 = v92;
                }
                else {
                  size_t v51 = v50;
                }
                int v52 = memcmp(__s1, (const void *)(v37 + v39), v51);
                goto LABEL_120;
              }
              unint64_t v67 = a3;
              uint64_t v68 = *(void *)(a2 + 16);
              uint64_t v89 = *(char **)(a2 + 24);
              sub_1000361E0(a2, v67);
              swift_retain();
              swift_retain();
              os_log_type_t v63 = (char *)__DataStorage._bytes.getter();
              if (v63)
              {
                uint64_t v69 = __DataStorage._offset.getter();
                if (__OFSUB__(v68, v69)) {
                  goto LABEL_147;
                }
                v63 += v68 - v69;
              }
              BOOL v35 = __OFSUB__(v89, v68);
              uint64_t v65 = &v89[-v68];
              if (v35) {
                goto LABEL_140;
              }
              uint64_t v66 = __DataStorage._length.getter();
              if (!v63) {
                goto LABEL_159;
              }
LABEL_87:
              if (v66 >= (uint64_t)v65) {
                size_t v70 = (size_t)v65;
              }
              else {
                size_t v70 = v66;
              }
              int v71 = memcmp(__s1, v63, v70);
              swift_release();
              swift_release();
              a3 = v101;
              sub_10001CFB8(a2, v101);
              sub_100037A24(v28, v27);
              sub_100037A24(v28, v27);
              uint64_t v9 = v102;
              if (!v71) {
                goto LABEL_126;
              }
              break;
            default:
              __s1[0] = v28;
              LOWORD(__s1[1]) = v27;
              BYTE2(__s1[1]) = BYTE2(v27);
              BYTE3(__s1[1]) = BYTE3(v27);
              BYTE4(__s1[1]) = BYTE4(v27);
              BYTE5(__s1[1]) = BYTE5(v27);
              if (!v104)
              {
LABEL_51:
                __int16 __s2 = a2;
                char v107 = BYTE2(a2);
                char v108 = BYTE3(a2);
                char v109 = v94;
                char v110 = BYTE5(a2);
                char v111 = BYTE6(a2);
                char v112 = HIBYTE(a2);
                __int16 v113 = a3;
                char v114 = BYTE2(a3);
                char v115 = BYTE3(a3);
                char v116 = BYTE4(a3);
                char v117 = BYTE5(a3);
                int v52 = memcmp(__s1, &__s2, v103);
                goto LABEL_122;
              }
              if (v104 == 1)
              {
                if (v93 < v97) {
                  goto LABEL_136;
                }
                sub_1000361E0(a2, a3);
                uint64_t v36 = __DataStorage._bytes.getter();
                if (!v36)
                {
                  __DataStorage._length.getter();
                  __break(1u);
LABEL_153:
                  __DataStorage._length.getter();
                  __break(1u);
LABEL_154:
                  __break(1u);
LABEL_155:
                  __break(1u);
LABEL_156:
                  __break(1u);
LABEL_157:
                  __break(1u);
LABEL_158:
                  __break(1u);
LABEL_159:
                  __break(1u);
LABEL_160:
                  __break(1u);
LABEL_161:
                  __break(1u);
LABEL_162:
                  __break(1u);
LABEL_163:
                  __break(1u);
LABEL_164:
                  __break(1u);
LABEL_165:
                  __break(1u);
                  JUMPOUT(0x100BB32A0);
                }
                uint64_t v37 = v36;
                uint64_t v38 = __DataStorage._offset.getter();
                uint64_t v39 = v97 - v38;
                if (__OFSUB__(v97, v38)) {
                  goto LABEL_141;
                }
                goto LABEL_47;
              }
              unint64_t v61 = a3;
              uint64_t v62 = *(void *)(a2 + 16);
              uint64_t v89 = *(char **)(a2 + 24);
              sub_1000361E0(a2, v61);
              swift_retain();
              swift_retain();
              os_log_type_t v63 = (char *)__DataStorage._bytes.getter();
              if (v63)
              {
                uint64_t v64 = __DataStorage._offset.getter();
                if (__OFSUB__(v62, v64)) {
                  goto LABEL_146;
                }
                v63 += v62 - v64;
              }
              BOOL v35 = __OFSUB__(v89, v62);
              uint64_t v65 = &v89[-v62];
              if (v35) {
                goto LABEL_139;
              }
              uint64_t v66 = __DataStorage._length.getter();
              if (!v63) {
                goto LABEL_158;
              }
              goto LABEL_87;
          }
LABEL_11:
          sub_100BB66F4((uint64_t)v12, type metadata accessor for SecureLocationsCachedSharedKey);
          v24 += v105;
          if (!--v22) {
            goto LABEL_124;
          }
          continue;
        }
LABEL_125:
        sub_100037A24(v28, v27);
        sub_100037A24(v28, v27);
        uint64_t v9 = v102;
LABEL_126:
        swift_bridgeObjectRelease();
        uint64_t v85 = (uint64_t *)&v12[*(int *)(v9 + 24)];
        uint64_t v18 = *v85;
        unint64_t v19 = v85[1];
        swift_beginAccess();
        sub_100037A38(v18, v19);
        sub_1000361E0(a2, a3);
        sub_100037A38(v18, v19);
        sub_10015FD4C(v18, v19, a2, a3);
        swift_endAccess();
        uint64_t result = sub_100BB66F4((uint64_t)v12, type metadata accessor for SecureLocationsCachedSharedKey);
LABEL_127:
        a4 = v96;
LABEL_128:
        *a4 = v18;
        a4[1] = v19;
        return result;
    }
  }
}

uint64_t sub_100BB32D0@<X0>(uint64_t a1@<X1>, unint64_t a2@<X2>, void *a3@<X8>)
{
  size_t v103 = type metadata accessor for SecureLocationsCachedSharedKey(0);
  Class isa = v103[-1].isa;
  __chkstk_darwin(v103);
  uint64_t v9 = (char *)v85 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_retain();
  uint64_t v10 = sub_100B6DC70();
  swift_release();
  uint64_t v11 = v10[2];
  if (!v11)
  {
    uint64_t result = swift_bridgeObjectRelease();
    goto LABEL_122;
  }
  uint64_t v89 = a3;
  uint64_t v90 = v3;
  uint64_t v12 = (uint64_t)v10 + ((*((unsigned __int8 *)isa + 80) + 32) & ~(unint64_t)*((unsigned __int8 *)isa + 80));
  unint64_t v93 = HIDWORD(a1);
  BOOL v13 = __OFSUB__(HIDWORD(a1), a1);
  BOOL v97 = v13;
  size_t v101 = BYTE6(a2);
  uint64_t v102 = a2 >> 62;
  uint64_t v98 = a2 & 0x3FFFFFFFFFFFFFFFLL;
  unint64_t v99 = a2;
  uint64_t v95 = (int)a1;
  size_t v96 = HIDWORD(a1) - (int)a1;
  uint64_t v94 = a1 >> 32;
  uint64_t v91 = v10;
  uint64_t v92 = (a1 >> 32) - (int)a1;
  uint64_t v14 = *((void *)isa + 9);
  uint64_t v100 = v14;
  while (1)
  {
    sub_100BB7A10(v12, (uint64_t)v9, type metadata accessor for SecureLocationsCachedSharedKey);
    uint64_t v15 = (uint64_t *)&v9[SHIDWORD(v103[3].isa)];
    unint64_t v16 = v15[1];
    if (v16 >> 60 != 15) {
      break;
    }
    sub_1000361E0(a1, a2);
    sub_100037A24(0, 0xF000000000000000);
    sub_100037A24(a1, a2);
LABEL_7:
    sub_100BB66F4((uint64_t)v9, type metadata accessor for SecureLocationsCachedSharedKey);
    v12 += v14;
    if (!--v11)
    {
      uint64_t result = swift_bridgeObjectRelease();
      a3 = v89;
LABEL_122:
      *a3 = 0;
      a3[1] = 0;
      return result;
    }
  }
  uint64_t v17 = *v15;
  uint64_t v18 = 0;
  switch(v16 >> 62)
  {
    case 1uLL:
      if (__OFSUB__(HIDWORD(v17), v17))
      {
        __break(1u);
LABEL_130:
        __break(1u);
LABEL_131:
        __break(1u);
LABEL_132:
        __break(1u);
LABEL_133:
        __break(1u);
LABEL_134:
        __break(1u);
LABEL_135:
        __break(1u);
        goto LABEL_136;
      }
      uint64_t v18 = HIDWORD(v17) - (int)v17;
LABEL_14:
      sub_100037A38(v17, v16);
      sub_1000361E0(v17, v16);
      break;
    case 2uLL:
      uint64_t v20 = *(void *)(v17 + 16);
      uint64_t v19 = *(void *)(v17 + 24);
      uint64_t v18 = v19 - v20;
      if (!__OFSUB__(v19, v20)) {
        goto LABEL_14;
      }
      goto LABEL_130;
    case 3uLL:
      break;
    default:
      uint64_t v18 = BYTE6(v16);
      break;
  }
  size_t v21 = v101;
  switch((int)v102)
  {
    case 1:
      size_t v21 = v96;
      if (v97) {
        goto LABEL_131;
      }
      goto LABEL_19;
    case 2:
      uint64_t v23 = *(void *)(a1 + 16);
      uint64_t v22 = *(void *)(a1 + 24);
      BOOL v24 = __OFSUB__(v22, v23);
      size_t v21 = v22 - v23;
      if (!v24) {
        goto LABEL_19;
      }
      goto LABEL_132;
    case 3:
      if (v18) {
        goto LABEL_30;
      }
      goto LABEL_123;
    default:
LABEL_19:
      if (v18 != v21)
      {
LABEL_30:
        sub_100037A24(v17, v16);
        sub_100037A24(v17, v16);
        uint64_t v14 = v100;
        goto LABEL_7;
      }
      if (v18 >= 1)
      {
        switch(v16 >> 62)
        {
          case 1uLL:
            a2 = (int)v17;
            if ((int)v17 > v17 >> 32) {
              goto LABEL_133;
            }
            sub_1000361E0(a1, v99);
            uint64_t v29 = __DataStorage._bytes.getter();
            if (v29)
            {
              uint64_t v30 = v29;
              uint64_t v31 = __DataStorage._offset.getter();
              if (__OFSUB__((int)v17, v31)) {
                goto LABEL_135;
              }
              uint64_t v88 = (char *)(v30 + (int)v17 - v31);
            }
            else
            {
              uint64_t v88 = 0;
            }
            __DataStorage._length.getter();
            a2 = v99;
            if (v102)
            {
              if (v102 == 1)
              {
                if (v94 < v95) {
                  goto LABEL_144;
                }
                swift_retain();
                uint64_t v45 = (char *)__DataStorage._bytes.getter();
                if (v45)
                {
                  uint64_t v46 = __DataStorage._offset.getter();
                  if (__OFSUB__(v95, v46)) {
                    goto LABEL_152;
                  }
                  v45 += v95 - v46;
                }
                uint64_t v47 = __DataStorage._length.getter();
                size_t v48 = v92;
                if (v47 < v92) {
                  size_t v48 = v47;
                }
                if (!v88) {
                  goto LABEL_157;
                }
                if (!v45) {
                  goto LABEL_158;
                }
                int v40 = memcmp(v88, v45, v48);
                sub_10001CFB8(a1, a2);
              }
              else
              {
                uint64_t v63 = *(void *)(a1 + 16);
                uint64_t v87 = *(void *)(a1 + 24);
                swift_retain();
                swift_retain();
                uint64_t v64 = (char *)__DataStorage._bytes.getter();
                if (v64)
                {
                  uint64_t v65 = __DataStorage._offset.getter();
                  if (__OFSUB__(v63, v65)) {
                    goto LABEL_151;
                  }
                  v64 += v63 - v65;
                }
                BOOL v24 = __OFSUB__(v87, v63);
                int64_t v66 = v87 - v63;
                if (v24) {
                  goto LABEL_146;
                }
                uint64_t v67 = __DataStorage._length.getter();
                if (v67 >= v66) {
                  size_t v68 = v66;
                }
                else {
                  size_t v68 = v67;
                }
                if (!v88) {
                  goto LABEL_163;
                }
                a2 = v99;
                if (!v64) {
                  goto LABEL_164;
                }
                int v40 = memcmp(v88, v64, v68);
                swift_release();
LABEL_106:
                swift_release();
              }
            }
            else
            {
              LOWORD(__s1[0]) = a1;
              BYTE2(__s1[0]) = BYTE2(a1);
              BYTE3(__s1[0]) = BYTE3(a1);
              BYTE4(__s1[0]) = v93;
              BYTE5(__s1[0]) = BYTE5(a1);
              BYTE6(__s1[0]) = BYTE6(a1);
              HIBYTE(__s1[0]) = HIBYTE(a1);
              LOWORD(__s1[1]) = v99;
              *(_DWORD *)((char *)&__s1[1] + 2) = *(_DWORD *)((char *)&v99 + 2);
              if (!v88) {
                goto LABEL_162;
              }
              int v40 = memcmp(v88, __s1, v101);
            }
            uint64_t v69 = a1;
            goto LABEL_117;
          case 2uLL:
            size_t v32 = *(char **)(v17 + 16);
            sub_1000361E0(a1, a2);
            swift_retain();
            swift_retain();
            uint64_t v33 = __DataStorage._bytes.getter();
            if (v33)
            {
              a2 = v33;
              uint64_t v88 = v32;
              uint64_t v34 = v16 & 0x3FFFFFFFFFFFFFFFLL;
              uint64_t v35 = __DataStorage._offset.getter();
              if (__OFSUB__(v88, v35)) {
                goto LABEL_134;
              }
              uint64_t v88 = &v88[a2 - v35];
            }
            else
            {
              uint64_t v34 = v16 & 0x3FFFFFFFFFFFFFFFLL;
              uint64_t v88 = 0;
            }
            __DataStorage._length.getter();
            a2 = v99;
            if (!v102)
            {
              LOWORD(__s1[0]) = a1;
              BYTE2(__s1[0]) = BYTE2(a1);
              BYTE3(__s1[0]) = BYTE3(a1);
              BYTE4(__s1[0]) = v93;
              BYTE5(__s1[0]) = BYTE5(a1);
              BYTE6(__s1[0]) = BYTE6(a1);
              HIBYTE(__s1[0]) = HIBYTE(a1);
              LODWORD(__s1[1]) = v99;
              WORD2(__s1[1]) = WORD2(v99);
              if (!v88) {
                goto LABEL_161;
              }
              int v40 = memcmp(v88, __s1, v101);
LABEL_90:
              swift_release();
              goto LABEL_106;
            }
            if (v102 == 1)
            {
              if (v94 < v95) {
                goto LABEL_139;
              }
              swift_retain();
              uint64_t v41 = (char *)__DataStorage._bytes.getter();
              if (v41)
              {
                uint64_t v42 = __DataStorage._offset.getter();
                if (__OFSUB__(v95, v42)) {
                  goto LABEL_150;
                }
                v41 += v95 - v42;
              }
              uint64_t v43 = __DataStorage._length.getter();
              size_t v44 = v92;
              if (v43 < v92) {
                size_t v44 = v43;
              }
              if (!v88) {
                goto LABEL_155;
              }
              if (!v41) {
                goto LABEL_156;
              }
              int v40 = memcmp(v88, v41, v44);
              a2 = v99;
              sub_10001CFB8(a1, v99);
              goto LABEL_90;
            }
            uint64_t v87 = *(void *)(a1 + 16);
            uint64_t v86 = *(void *)(a1 + 24);
            swift_retain();
            swift_retain();
            size_t v60 = (char *)__DataStorage._bytes.getter();
            v85[1] = v34;
            if (v60)
            {
              uint64_t v61 = __DataStorage._offset.getter();
              uint64_t v62 = v87;
              if (__OFSUB__(v87, v61)) {
                goto LABEL_149;
              }
              v60 += v87 - v61;
            }
            else
            {
              uint64_t v62 = v87;
            }
            int64_t v70 = v86 - v62;
            if (__OFSUB__(v86, v62)) {
              goto LABEL_145;
            }
            uint64_t v71 = __DataStorage._length.getter();
            if (v71 >= v70) {
              size_t v72 = v70;
            }
            else {
              size_t v72 = v71;
            }
            if (!v88) {
              goto LABEL_165;
            }
            if (!v60) {
              goto LABEL_166;
            }
            int v40 = memcmp(v88, v60, v72);
            swift_release();
            swift_release();
            swift_release();
            swift_release();
LABEL_116:
            uint64_t v69 = a1;
            a2 = v99;
LABEL_117:
            sub_10001CFB8(v69, a2);
LABEL_118:
            sub_100037A24(v17, v16);
            sub_100037A24(v17, v16);
            uint64_t v14 = v100;
            if (!v40) {
              goto LABEL_124;
            }
            break;
          case 3uLL:
            memset(__s1, 0, 14);
            if (!v102) {
              goto LABEL_47;
            }
            if (v102 == 1)
            {
              if (v94 < v95) {
                goto LABEL_138;
              }
              sub_1000361E0(a1, a2);
              uint64_t v36 = __DataStorage._bytes.getter();
              if (!v36) {
                goto LABEL_154;
              }
              uint64_t v26 = v36;
              uint64_t v37 = __DataStorage._offset.getter();
              uint64_t v28 = v95 - v37;
              if (__OFSUB__(v95, v37)) {
                goto LABEL_143;
              }
              goto LABEL_43;
            }
            unint64_t v55 = a2;
            uint64_t v56 = *(void *)(a1 + 16);
            uint64_t v88 = *(char **)(a1 + 24);
            sub_1000361E0(a1, v55);
            swift_retain();
            swift_retain();
            size_t v51 = (char *)__DataStorage._bytes.getter();
            if (v51)
            {
              uint64_t v57 = __DataStorage._offset.getter();
              if (__OFSUB__(v56, v57)) {
                goto LABEL_148;
              }
              v51 += v56 - v57;
            }
            BOOL v24 = __OFSUB__(v88, v56);
            uint64_t v53 = &v88[-v56];
            if (v24) {
              goto LABEL_141;
            }
            uint64_t v54 = __DataStorage._length.getter();
            if (!v51) {
              goto LABEL_160;
            }
            goto LABEL_83;
          default:
            __s1[0] = v17;
            LOWORD(__s1[1]) = v16;
            BYTE2(__s1[1]) = BYTE2(v16);
            BYTE3(__s1[1]) = BYTE3(v16);
            BYTE4(__s1[1]) = BYTE4(v16);
            BYTE5(__s1[1]) = BYTE5(v16);
            if (!v102)
            {
LABEL_47:
              LOWORD(__s2) = a1;
              BYTE2(__s2) = BYTE2(a1);
              BYTE3(__s2) = BYTE3(a1);
              BYTE4(__s2) = v93;
              BYTE5(__s2) = BYTE5(a1);
              BYTE6(__s2) = BYTE6(a1);
              HIBYTE(__s2) = HIBYTE(a1);
              __int16 v105 = a2;
              char v106 = BYTE2(a2);
              char v107 = BYTE3(a2);
              char v108 = BYTE4(a2);
              char v109 = BYTE5(a2);
              int v40 = memcmp(__s1, &__s2, v101);
              goto LABEL_118;
            }
            if (v102 != 1)
            {
              unint64_t v49 = a2;
              uint64_t v50 = *(void *)(a1 + 16);
              uint64_t v88 = *(char **)(a1 + 24);
              sub_1000361E0(a1, v49);
              swift_retain();
              swift_retain();
              size_t v51 = (char *)__DataStorage._bytes.getter();
              if (v51)
              {
                uint64_t v52 = __DataStorage._offset.getter();
                if (__OFSUB__(v50, v52)) {
                  goto LABEL_147;
                }
                v51 += v50 - v52;
              }
              BOOL v24 = __OFSUB__(v88, v50);
              uint64_t v53 = &v88[-v50];
              if (v24) {
                goto LABEL_140;
              }
              uint64_t v54 = __DataStorage._length.getter();
              if (!v51) {
                goto LABEL_159;
              }
LABEL_83:
              if (v54 >= (uint64_t)v53) {
                size_t v58 = (size_t)v53;
              }
              else {
                size_t v58 = v54;
              }
              int v59 = memcmp(__s1, v51, v58);
              swift_release();
              swift_release();
              a2 = v99;
              sub_10001CFB8(a1, v99);
              sub_100037A24(v17, v16);
              sub_100037A24(v17, v16);
              uint64_t v14 = v100;
              if (!v59) {
                goto LABEL_124;
              }
              goto LABEL_7;
            }
            if (v94 < v95)
            {
              __break(1u);
LABEL_138:
              __break(1u);
LABEL_139:
              __break(1u);
LABEL_140:
              __break(1u);
LABEL_141:
              __break(1u);
LABEL_142:
              __break(1u);
LABEL_143:
              __break(1u);
LABEL_144:
              __break(1u);
LABEL_145:
              __break(1u);
LABEL_146:
              __break(1u);
LABEL_147:
              __break(1u);
LABEL_148:
              __break(1u);
LABEL_149:
              __break(1u);
LABEL_150:
              __break(1u);
LABEL_151:
              __break(1u);
LABEL_152:
              __break(1u);
            }
            sub_1000361E0(a1, a2);
            uint64_t v25 = __DataStorage._bytes.getter();
            if (!v25)
            {
              __DataStorage._length.getter();
              __break(1u);
LABEL_154:
              __DataStorage._length.getter();
              __break(1u);
LABEL_155:
              __break(1u);
LABEL_156:
              __break(1u);
LABEL_157:
              __break(1u);
LABEL_158:
              __break(1u);
LABEL_159:
              __break(1u);
LABEL_160:
              __break(1u);
LABEL_161:
              __break(1u);
LABEL_162:
              __break(1u);
LABEL_163:
              __break(1u);
LABEL_164:
              __break(1u);
LABEL_165:
              __break(1u);
LABEL_166:
              __break(1u);
              JUMPOUT(0x100BB4054);
            }
            uint64_t v26 = v25;
            uint64_t v27 = __DataStorage._offset.getter();
            uint64_t v28 = v95 - v27;
            if (__OFSUB__(v95, v27)) {
              goto LABEL_142;
            }
LABEL_43:
            uint64_t v38 = __DataStorage._length.getter();
            if (v38 >= v92) {
              size_t v39 = v92;
            }
            else {
              size_t v39 = v38;
            }
            int v40 = memcmp(__s1, (const void *)(v26 + v28), v39);
            goto LABEL_116;
        }
        goto LABEL_7;
      }
LABEL_123:
      sub_100037A24(v17, v16);
      sub_100037A24(v17, v16);
LABEL_124:
      swift_bridgeObjectRelease();
      uint64_t v74 = (uint64_t *)&v9[SHIDWORD(v103[2].isa)];
      uint64_t v11 = *v74;
      uint64_t v17 = v74[1];
      uint64_t v75 = qword_101637070;
      swift_bridgeObjectRetain();
      if (v75 != -1) {
LABEL_136:
      }
        swift_once();
      uint64_t v76 = type metadata accessor for Logger();
      sub_100010324(v76, (uint64_t)qword_10170EC30);
      sub_1000361E0(a1, a2);
      swift_bridgeObjectRetain();
      sub_1000361E0(a1, a2);
      swift_bridgeObjectRetain();
      uint64_t v77 = Logger.logObject.getter();
      os_log_type_t v78 = static os_log_type_t.default.getter();
      int v79 = v78;
      size_t v103 = v77;
      if (os_log_type_enabled(v77, v78))
      {
        unint64_t v80 = a2;
        uint64_t v81 = swift_slowAlloc();
        uint64_t v102 = swift_slowAlloc();
        __s1[0] = v102;
        *(_DWORD *)uint64_t v81 = 136315394;
        LODWORD(v101) = v79;
        swift_bridgeObjectRetain();
        uint64_t __s2 = sub_1008FA0F0(v11, v17, __s1);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease_n();
        *(_WORD *)(v81 + 12) = 2080;
        Swift::String v82 = Data.base64EncodedString(options:)(0);
        uint64_t __s2 = sub_1008FA0F0(v82._countAndFlagsBits, (unint64_t)v82._object, __s1);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        sub_10001CFB8(a1, v80);
        sub_10001CFB8(a1, v80);
        uint64_t v83 = v103;
        _os_log_impl((void *)&_mh_execute_header, v103, (os_log_type_t)v101, "findMyId %s for locationId %s", (uint8_t *)v81, 0x16u);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
      }
      else
      {
        swift_bridgeObjectRelease_n();
        sub_10001CFB8(a1, a2);
        sub_10001CFB8(a1, a2);
      }
      size_t v84 = v89;
      uint64_t result = sub_100BB66F4((uint64_t)v9, type metadata accessor for SecureLocationsCachedSharedKey);
      *size_t v84 = v11;
      v84[1] = v17;
      return result;
  }
}

unint64_t sub_100BB4084(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, unint64_t a5, uint64_t a6, void (*a7)(uint64_t), uint64_t a8)
{
  uint64_t v56 = a2;
  uint64_t v57 = a4;
  uint64_t v14 = sub_10000588C(&qword_1016457C0);
  uint64_t v58 = *(void *)(v14 - 8);
  uint64_t v59 = v14;
  __chkstk_darwin(v14);
  unint64_t v16 = &v48[-((v15 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v17 = sub_10000588C(&qword_1016457C8);
  uint64_t v18 = __chkstk_darwin(v17);
  size_t v21 = &v48[-((v20 + 15) & 0xFFFFFFFFFFFFFFF0)];
  unint64_t v22 = *(void *)a1;
  LODWORD(v23) = *(unsigned __int8 *)(a1 + 8);
  if (v23)
  {
    sub_1001EE1D4(*(void *)a1);
    if (qword_101636B00 != -1) {
      swift_once();
    }
    uint64_t v24 = type metadata accessor for Logger();
    sub_100010324(v24, (uint64_t)qword_10170DE98);
    sub_1001EE1D4(v22);
    sub_1001EE1D4(v22);
    uint64_t v25 = Logger.logObject.getter();
    os_log_type_t v26 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v25, v26))
    {
      uint64_t v27 = swift_slowAlloc();
      int v60 = v23;
      uint64_t v23 = v27;
      uint64_t v28 = swift_slowAlloc();
      uint64_t v61 = v22;
      uint64_t v62 = v28;
      *(_DWORD *)uint64_t v23 = 136446210;
      sub_10015CEB8();
      uint64_t v29 = Error.localizedDescription.getter();
      uint64_t v61 = sub_1008FA0F0(v29, v30, &v62);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      sub_100483968(v22, 1);
      sub_100483968(v22, 1);
      _os_log_impl((void *)&_mh_execute_header, v25, v26, "liveLocations: ERROR retrieving messagingSession during startLive: %{public}s", (uint8_t *)v23, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      LOBYTE(v23) = v60;
      swift_slowDealloc();
    }
    else
    {
      sub_100483968(v22, 1);
      sub_100483968(v22, 1);
    }

    if (qword_101637440 != -1) {
      swift_once();
    }
    swift_retain();
    unint64_t v40 = sub_1001EE00C(v22);
    sub_1010DD508(0, v40, v41);
    swift_release();
    swift_bridgeObjectRelease();
    sub_10015CEB8();
    uint64_t v42 = swift_allocError();
    *uint64_t v43 = v22;
    sub_1001EE1D4(v22);
    a7(v42);
    swift_errorRelease();
  }
  else
  {
    uint64_t v53 = v19;
    uint64_t v54 = v18;
    uint64_t v55 = a6;
    uint64_t v31 = qword_101636B00;
    swift_retain();
    if (v31 != -1) {
      swift_once();
    }
    int v60 = v23;
    uint64_t v32 = type metadata accessor for Logger();
    sub_100010324(v32, (uint64_t)qword_10170DE98);
    sub_100483974(v22, 0);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    sub_100483974(v22, 0);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    uint64_t v33 = Logger.logObject.getter();
    os_log_type_t v34 = static os_log_type_t.default.getter();
    int v35 = v34;
    if (os_log_type_enabled(v33, v34))
    {
      uint64_t v36 = swift_slowAlloc();
      uint64_t v50 = swift_slowAlloc();
      uint64_t v62 = v50;
      *(_DWORD *)uint64_t v36 = 136316163;
      uint64_t v51 = a8;
      swift_retain();
      int v49 = v35;
      uint64_t v37 = sub_1004EB530();
      uint64_t v52 = a7;
      unint64_t v39 = v38;
      sub_100483968(v22, 0);
      uint64_t v61 = sub_1008FA0F0(v37, v39, &v62);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      sub_100483968(v22, 0);
      sub_100483968(v22, 0);
      *(_WORD *)(v36 + 12) = 2160;
      uint64_t v61 = 1752392040;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v36 + 22) = 2081;
      swift_bridgeObjectRetain();
      uint64_t v61 = sub_1008FA0F0(v56, a3, &v62);
      a7 = v52;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      *(_WORD *)(v36 + 32) = 2160;
      uint64_t v61 = 1752392040;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v36 + 42) = 2081;
      swift_bridgeObjectRetain();
      uint64_t v61 = sub_1008FA0F0(v57, a5, &v62);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      _os_log_impl((void *)&_mh_execute_header, v33, (os_log_type_t)v49, "liveLocations: Received session %s for identifier %{private,mask.hash}s for findMyId %{private,mask.hash}s ", (uint8_t *)v36, 0x34u);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      sub_100483968(v22, 0);
      sub_100483968(v22, 0);

      swift_bridgeObjectRelease_n();
      swift_bridgeObjectRelease_n();
    }
    uint64_t v62 = *(void *)(v22 + qword_10170DE90);
    swift_retain();
    sub_10000588C(&qword_1016457D0);
    sub_10000588C(&qword_1016457D8);
    sub_100062734(&qword_1016457E0, &qword_1016457D0);
    Publisher.map<A>(_:)();
    swift_release();
    sub_10000588C(&qword_1016457E8);
    sub_100062734(&qword_1016457F0, &qword_1016457C0);
    sub_100062734(&qword_1016457F8, &qword_1016457E8);
    uint64_t v44 = v59;
    Publisher.catch<A>(_:)();
    (*(void (**)(unsigned char *, uint64_t))(v58 + 8))(v16, v44);
    swift_allocObject();
    uint64_t v23 = v55;
    swift_weakInit();
    sub_100062734(&qword_101645800, &qword_1016457C8);
    uint64_t v45 = v54;
    uint64_t v46 = Publisher<>.sink(receiveValue:)();
    swift_release();
    (*(void (**)(unsigned char *, uint64_t))(v53 + 8))(v21, v45);
    *(void *)(v23 + 112) = v46;
    swift_release();
    a7(0);
    LOBYTE(v23) = v60;
  }
  return sub_100483968(v22, v23);
}

uint64_t sub_100BB494C(unint64_t *a1)
{
  uint64_t v2 = sub_10000588C(&qword_1016457D8);
  __chkstk_darwin(v2);
  unint64_t v4 = *a1;
  *(uint64_t *)((char *)&v6 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0)) = v4;
  swift_storeEnumTagMultiPayload();
  sub_1001EE1D4(v4);
  return Just.init(_:)();
}

unint64_t sub_100BB49FC(uint64_t a1)
{
  uint64_t v2 = sub_10000588C(&qword_101645808);
  __chkstk_darwin(v2 - 8);
  unint64_t v4 = &v22[-((v3 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v5 = sub_10000588C(&qword_1016457D8);
  __chkstk_darwin(v5);
  uint64_t v7 = (unint64_t *)&v22[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0)];
  swift_beginAccess();
  unint64_t result = swift_weakLoadStrong();
  if (result)
  {
    sub_10001D074(a1, (uint64_t)v7, &qword_1016457D8);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      unint64_t v9 = *v7;
      if (qword_101636B00 != -1) {
        swift_once();
      }
      uint64_t v10 = type metadata accessor for Logger();
      sub_100010324(v10, (uint64_t)qword_10170DE98);
      sub_1001EE1D4(v9);
      sub_1001EE1D4(v9);
      uint64_t v11 = Logger.logObject.getter();
      os_log_type_t v12 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v11, v12))
      {
        BOOL v13 = (uint8_t *)swift_slowAlloc();
        uint64_t v14 = swift_slowAlloc();
        uint64_t v23 = v9;
        uint64_t v24 = v14;
        *(_DWORD *)BOOL v13 = 136446210;
        sub_10015CEB8();
        uint64_t v15 = Error.localizedDescription.getter();
        uint64_t v23 = sub_1008FA0F0(v15, v16, &v24);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        sub_1001EE1E4(v9);
        sub_1001EE1E4(v9);
        _os_log_impl((void *)&_mh_execute_header, v11, v12, "liveLocations: readMessagePublisher error: %{public}s", v13, 0xCu);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
      }
      else
      {
        sub_1001EE1E4(v9);
        sub_1001EE1E4(v9);
      }

      if (qword_101637440 != -1) {
        swift_once();
      }
      uint64_t v24 = 0;
      uint64_t v25 = 0xE000000000000000;
      swift_retain();
      _StringGuts.grow(_:)(29);
      swift_bridgeObjectRelease();
      uint64_t v24 = 0xD00000000000001BLL;
      uint64_t v25 = 0x80000001014159B0;
      sub_1001EE1D4(v9);
      unint64_t v18 = sub_1001EE00C(v9);
      uint64_t v20 = v19;
      sub_1001EE1E4(v9);
      v21._countAndFlagsBits = v18;
      v21._object = v20;
      String.append(_:)(v21);
      swift_bridgeObjectRelease();
      sub_1010DD508(0, v24, v25);
      swift_release();
      swift_bridgeObjectRelease();
      swift_release();
      return sub_1001EE1E4(v9);
    }
    else
    {
      sub_10001D608((uint64_t)v7, (uint64_t)v4, &qword_101645808);
      sub_100BB4DE4();
      sub_10001DAB4((uint64_t)v4, &qword_101645808);
      return swift_release();
    }
  }
  return result;
}

uint64_t sub_100BB4DE4()
{
  sub_100B9C60C((uint64_t)&v24);
  if (v0)
  {
    if (qword_101636B00 != -1) {
      swift_once();
    }
    uint64_t v1 = type metadata accessor for Logger();
    sub_100010324(v1, (uint64_t)qword_10170DE98);
    swift_errorRetain();
    swift_errorRetain();
    uint64_t v2 = Logger.logObject.getter();
    os_log_type_t v3 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v2, v3))
    {
      unint64_t v4 = (uint8_t *)swift_slowAlloc();
      uint64_t v24 = swift_slowAlloc();
      *(_DWORD *)unint64_t v4 = 136446210;
      uint64_t v31 = v0;
      swift_errorRetain();
      sub_10000588C(&qword_101638D40);
      uint64_t v5 = String.init<A>(describing:)();
      uint64_t v31 = sub_1008FA0F0(v5, v6, &v24);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      swift_errorRelease();
      swift_errorRelease();
      _os_log_impl((void *)&_mh_execute_header, v2, v3, "liveLocations: Message extract error: %{public}s", v4, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      swift_errorRelease();
      swift_errorRelease();
    }

    if (qword_101637440 != -1) {
      swift_once();
    }
    uint64_t v24 = 0;
    uint64_t v25 = 0xE000000000000000;
    swift_retain();
    _StringGuts.grow(_:)(24);
    swift_bridgeObjectRelease();
    uint64_t v24 = 0xD000000000000016;
    uint64_t v25 = 0x80000001014159D0;
    uint64_t v31 = v0;
    swift_errorRetain();
    sub_10000588C(&qword_101638D40);
    v19._countAndFlagsBits = String.init<A>(describing:)();
    String.append(_:)(v19);
    swift_bridgeObjectRelease();
    sub_1010DD508(0, v24, v25);
    swift_release();
    swift_bridgeObjectRelease();
    return swift_errorRelease();
  }
  else
  {
    uint64_t v7 = v24;
    unint64_t v8 = v25;
    char v23 = v27;
    uint64_t v9 = v29;
    uint64_t v21 = v26;
    uint64_t v22 = v28;
    uint64_t v10 = v30;
    if (qword_101636B00 != -1) {
      swift_once();
    }
    uint64_t v11 = type metadata accessor for Logger();
    sub_100010324(v11, (uint64_t)qword_10170DE98);
    sub_1000361E0(v7, v8);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    sub_1000361E0(v7, v8);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    os_log_type_t v12 = Logger.logObject.getter();
    os_log_type_t v13 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v12, v13))
    {
      uint64_t v14 = (uint8_t *)swift_slowAlloc();
      uint64_t v31 = swift_slowAlloc();
      *(_DWORD *)uint64_t v14 = 136315138;
      uint64_t v24 = v7;
      uint64_t v25 = v8;
      uint64_t v26 = v21;
      char v27 = v23;
      uint64_t v28 = v22;
      uint64_t v29 = v9;
      uint64_t v30 = v10;
      sub_1000361E0(v7, v8);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      uint64_t v15 = String.init<A>(describing:)();
      uint64_t v24 = sub_1008FA0F0(v15, v16, &v31);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      sub_10001CFB8(v7, v8);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      sub_10001CFB8(v7, v8);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v12, v13, "liveLocations: Received Payload %s", v14, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      uint64_t v17 = v22;
      char v18 = v23;
    }
    else
    {
      sub_10001CFB8(v7, v8);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      sub_10001CFB8(v7, v8);

      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      char v18 = v23;
      uint64_t v17 = v22;
    }
    uint64_t v24 = v7;
    uint64_t v25 = v8;
    uint64_t v26 = v21;
    char v27 = v18;
    uint64_t v28 = v17;
    uint64_t v29 = v9;
    uint64_t v30 = v10;
    swift_retain();
    PassthroughSubject.send(_:)();
    swift_release();
    sub_10001CFB8(v7, v8);
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
}

uint64_t sub_100BB5374(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for Date();
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v7 = (char *)&v69 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = sub_10000588C((uint64_t *)&unk_10165C700);
  __chkstk_darwin(v8);
  uint64_t v10 = (char *)&v69 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = sub_10000588C((uint64_t *)&unk_10163AC90);
  uint64_t v12 = __chkstk_darwin(v11 - 8);
  uint64_t v14 = (char *)&v69 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = __chkstk_darwin(v12);
  uint64_t v17 = (char *)&v69 - v16;
  __chkstk_darwin(v15);
  Swift::String v19 = (char *)&v69 - v18;
  if ((static UUID.== infix(_:_:)() & 1) == 0) {
    return 0;
  }
  uint64_t v73 = v14;
  uint64_t v74 = v19;
  size_t v72 = v7;
  uint64_t v20 = (int *)type metadata accessor for SecureLocationsCachedSharedKey(0);
  uint64_t v21 = v20[5];
  uint64_t result = *(void *)(a1 + v21);
  uint64_t v23 = *(void *)(a1 + v21 + 8);
  uint64_t v24 = (void *)(a2 + v21);
  BOOL v25 = result == *v24 && v23 == v24[1];
  if (v25 || (v26 = _stringCompareWithSmolCheck(_:_:expecting:)(), uint64_t result = 0, (v26 & 1) != 0))
  {
    uint64_t v70 = v4;
    uint64_t v71 = v5;
    uint64_t v69 = v10;
    uint64_t v27 = v20[6];
    uint64_t v29 = *(void *)(a1 + v27);
    unint64_t v28 = *(void *)(a1 + v27 + 8);
    uint64_t v30 = (uint64_t *)(a2 + v27);
    uint64_t v31 = *v30;
    unint64_t v32 = v30[1];
    if (v28 >> 60 == 15)
    {
      if (v32 >> 60 == 15)
      {
LABEL_13:
        uint64_t v36 = v20[7];
        uint64_t v37 = *(void *)(a1 + v36);
        unint64_t v38 = *(void *)(a1 + v36 + 8);
        unint64_t v39 = (uint64_t *)(a2 + v36);
        uint64_t v31 = *v39;
        unint64_t v32 = v39[1];
        if (v38 >> 60 == 15)
        {
          if (v32 >> 60 == 15) {
            goto LABEL_22;
          }
        }
        else if (v32 >> 60 != 15)
        {
          sub_100037A38(v37, v38);
          sub_100037A38(v31, v32);
          char v40 = _s12searchpartyd24KeyRepresentableInternalV23__derived_struct_equalsySbAC_ACtFZ_0(v37, v38, v31, v32);
          sub_100037A24(v31, v32);
          uint64_t result = sub_100037A24(v37, v38);
          if ((v40 & 1) == 0) {
            return 0;
          }
LABEL_22:
          uint64_t v41 = v20[8];
          uint64_t v42 = (void *)(a1 + v41);
          uint64_t v43 = *(void *)(a1 + v41 + 16);
          uint64_t v44 = (void *)(a2 + v41);
          uint64_t v45 = v44[2];
          if (v43)
          {
            uint64_t v47 = (uint64_t)v69;
            uint64_t v46 = v70;
            uint64_t v48 = v71;
            if (!v45 || *v44 != *v42) {
              return 0;
            }
            uint64_t result = v42[1];
            if (result != v44[1] || v43 != v45)
            {
              char v49 = _stringCompareWithSmolCheck(_:_:expecting:)();
              uint64_t result = 0;
              if ((v49 & 1) == 0) {
                return result;
              }
            }
          }
          else
          {
            uint64_t v47 = (uint64_t)v69;
            uint64_t v46 = v70;
            uint64_t v48 = v71;
            if (v45) {
              return 0;
            }
          }
          uint64_t v50 = v20[9];
          uint64_t v51 = (uint64_t *)(a1 + v50);
          uint64_t v52 = *(void *)(a1 + v50 + 8);
          uint64_t v53 = (void *)(a2 + v50);
          uint64_t v54 = v53[1];
          if (v52)
          {
            if (!v54) {
              return 0;
            }
            uint64_t result = *v51;
            if (*v51 != *v53 || v52 != v54)
            {
              char v55 = _stringCompareWithSmolCheck(_:_:expecting:)();
              uint64_t result = 0;
              if ((v55 & 1) == 0) {
                return result;
              }
            }
          }
          else if (v54)
          {
            return 0;
          }
          uint64_t v56 = v20[10];
          unint64_t v57 = *(void *)(a1 + v56);
          unint64_t v58 = *(void *)(a2 + v56);
          unint64_t v59 = v58 - v57;
          if (v58 >= v57)
          {
            if ((uint64_t)(v58 - v57) >= 0)
            {
LABEL_41:
              if (!v59)
              {
                uint64_t v60 = a1 + v20[11];
                uint64_t v61 = (uint64_t)v74;
                sub_10001D074(v60, (uint64_t)v74, (uint64_t *)&unk_10163AC90);
                sub_10001D074(a2 + v20[11], (uint64_t)v17, (uint64_t *)&unk_10163AC90);
                uint64_t v62 = v47 + *(int *)(v8 + 48);
                sub_10001D074(v61, v47, (uint64_t *)&unk_10163AC90);
                sub_10001D074((uint64_t)v17, v62, (uint64_t *)&unk_10163AC90);
                uint64_t v63 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v48 + 48);
                if (v63(v47, 1, v46) == 1)
                {
                  sub_10001DAB4((uint64_t)v17, (uint64_t *)&unk_10163AC90);
                  sub_10001DAB4(v61, (uint64_t *)&unk_10163AC90);
                  if (v63(v62, 1, v46) == 1)
                  {
                    sub_10001DAB4(v47, (uint64_t *)&unk_10163AC90);
                    return 1;
                  }
                  goto LABEL_47;
                }
                uint64_t v64 = (uint64_t)v73;
                sub_10001D074(v47, (uint64_t)v73, (uint64_t *)&unk_10163AC90);
                if (v63(v62, 1, v46) == 1)
                {
                  sub_10001DAB4((uint64_t)v17, (uint64_t *)&unk_10163AC90);
                  sub_10001DAB4((uint64_t)v74, (uint64_t *)&unk_10163AC90);
                  (*(void (**)(uint64_t, uint64_t))(v71 + 8))(v64, v46);
LABEL_47:
                  sub_10001DAB4(v47, (uint64_t *)&unk_10165C700);
                  return 0;
                }
                uint64_t v65 = v71;
                int64_t v66 = v72;
                (*(void (**)(char *, uint64_t, uint64_t))(v71 + 32))(v72, v62, v46);
                sub_100BB245C(&qword_10163AFA0, (void (*)(uint64_t))&type metadata accessor for Date);
                char v67 = dispatch thunk of static Equatable.== infix(_:_:)();
                size_t v68 = *(void (**)(char *, uint64_t))(v65 + 8);
                v68(v66, v46);
                sub_10001DAB4((uint64_t)v17, (uint64_t *)&unk_10163AC90);
                sub_10001DAB4((uint64_t)v74, (uint64_t *)&unk_10163AC90);
                v68((char *)v64, v46);
                sub_10001DAB4(v47, (uint64_t *)&unk_10163AC90);
                if (v67) {
                  return 1;
                }
              }
              return 0;
            }
          }
          else
          {
            if ((uint64_t)(v57 - v58) >= 0)
            {
              unint64_t v59 = v58 - v57;
              goto LABEL_41;
            }
            __break(1u);
          }
          __break(1u);
          return result;
        }
        sub_100037A38(v37, v38);
        sub_100037A38(v31, v32);
        uint64_t v33 = v37;
        unint64_t v34 = v38;
LABEL_18:
        sub_100037A24(v33, v34);
        sub_100037A24(v31, v32);
        return 0;
      }
    }
    else if (v32 >> 60 != 15)
    {
      sub_100037A38(v29, v28);
      sub_100037A38(v31, v32);
      char v35 = _s12searchpartyd24KeyRepresentableInternalV23__derived_struct_equalsySbAC_ACtFZ_0(v29, v28, v31, v32);
      sub_100037A24(v31, v32);
      uint64_t result = sub_100037A24(v29, v28);
      if ((v35 & 1) == 0) {
        return 0;
      }
      goto LABEL_13;
    }
    sub_100037A38(v29, v28);
    sub_100037A38(v31, v32);
    uint64_t v33 = v29;
    unint64_t v34 = v28;
    goto LABEL_18;
  }
  return result;
}

uint64_t sub_100BB59F4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  uint64_t v9 = (char *)&v20 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v22 = type metadata accessor for DispatchQoS();
  uint64_t v10 = *(void *)(v22 - 8);
  __chkstk_darwin(v22);
  uint64_t v12 = (char *)&v20 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_101637070 != -1) {
    swift_once();
  }
  uint64_t v13 = type metadata accessor for Logger();
  sub_100010324(v13, (uint64_t)qword_10170EC30);
  uint64_t v14 = Logger.logObject.getter();
  os_log_type_t v15 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v14, v15))
  {
    uint64_t v16 = (uint8_t *)swift_slowAlloc();
    uint64_t v21 = v12;
    *(_WORD *)uint64_t v16 = 0;
    _os_log_impl((void *)&_mh_execute_header, v14, v15, "SetupVirtualMeDevice: beaconStore is available. Now setting up VirtualMeDevice OBR", v16, 2u);
    uint64_t v12 = v21;
    swift_slowDealloc();
  }

  uint64_t v17 = (void *)swift_allocObject();
  void v17[2] = a1;
  v17[3] = a2;
  v17[4] = a3;
  aBlock[4] = sub_100BB5DE4;
  aBlock[5] = v17;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_1004B5480;
  aBlock[3] = &unk_1015EB178;
  uint64_t v18 = _Block_copy(aBlock);
  swift_retain();
  swift_retain();
  static DispatchQoS.unspecified.getter();
  uint64_t v23 = _swiftEmptyArrayStorage;
  sub_100BB245C((unint64_t *)&qword_10163B7E0, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
  sub_10000588C((uint64_t *)&unk_10163F350);
  sub_100062734((unint64_t *)&qword_10163B7F0, (uint64_t *)&unk_10163F350);
  dispatch thunk of SetAlgebra.init<A>(_:)();
  OS_dispatch_queue.async(group:qos:flags:execute:)();
  _Block_release(v18);
  (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
  (*(void (**)(char *, uint64_t))(v10 + 8))(v12, v22);
  return swift_release();
}

uint64_t sub_100BB5DB8()
{
  return sub_100BB8538((void (*)(void))&_swift_release, (void (*)(void))&_swift_release);
}

uint64_t sub_100BB5DE4()
{
  return sub_100BA07F8(v0[2], v0[3], v0[4]);
}

uint64_t sub_100BB5DF0(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_100BB5E00()
{
  return swift_release();
}

uint64_t sub_100BB5E08()
{
  swift_release();

  return _swift_deallocObject(v0, 33, 7);
}

uint64_t sub_100BB5E40()
{
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return _swift_deallocObject(v0, 57, 7);
}

uint64_t sub_100BB5E90(uint64_t a1, uint64_t a2)
{
  return sub_100BAACF4(a1, a2, *(void *)(v2 + 16), *(void *)(v2 + 24), *(void *)(v2 + 32), *(void *)(v2 + 40), *(void *)(v2 + 48), *(unsigned __int8 *)(v2 + 56));
}

uint64_t sub_100BB5EA4()
{
  swift_release();
  swift_release();
  unint64_t v1 = v0[8];
  if (v1 >> 60 != 15)
  {
    if (v0[6] >> 60 != 15)
    {
      sub_10001CFB8(v0[5], v0[6]);
      unint64_t v1 = v0[8];
    }
    sub_10001CFB8(v0[7], v1);
    unint64_t v2 = v0[10];
    if (v2 >> 60 != 15) {
      sub_10001CFB8(v0[9], v2);
    }
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_errorRelease();

  return _swift_deallocObject(v0, 120, 7);
}

void sub_100BB5F4C()
{
  sub_100BAB078(*(void *)(v0 + 16), *(void (**)(void))(v0 + 24), *(void *)(v0 + 32), v0 + 40, *(void *)(v0 + 88), *(void *)(v0 + 96), *(unsigned __int8 *)(v0 + 104), *(void *)(v0 + 112));
}

uint64_t sub_100BB5F68()
{
  return sub_100BB8538((void (*)(void))&_swift_release, (void (*)(void))&_swift_bridgeObjectRelease);
}

uint64_t sub_100BB5F94()
{
  return _swift_deallocObject(v0, 32, 7);
}

uint64_t sub_100BB5FA4()
{
  return sub_100BB8538((void (*)(void))&_swift_release, (void (*)(void))&_swift_bridgeObjectRelease);
}

uint64_t sub_100BB5FD0()
{
  return _swift_deallocObject(v0, 32, 7);
}

void sub_100BB5FE0()
{
  sub_100BAC16C(*(void (**)())(v0 + 16));
}

uint64_t sub_100BB5FE8()
{
  swift_errorRelease();

  return _swift_deallocObject(v0, 24, 7);
}

uint64_t sub_100BB6020()
{
  return sub_100BAC228(*(void *)(v0 + 16), *(void *)(v0 + 24), *(void *)(v0 + 32), *(void *)(v0 + 40), *(uint64_t **)(v0 + 48), *(void *)(v0 + 56), *(void *)(v0 + 64), *(void *)(v0 + 72), *(void (**)(void, void, void))(v0 + 80), *(void *)(v0 + 88), *(void *)(v0 + 96), *(void *)(v0 + 104), *(unsigned char *)(v0 + 112), *(void *)(v0 + 120)) & 1;
}

uint64_t sub_100BB6074()
{
  return sub_100BB84BC((void (*)(void))&_swift_release);
}

uint64_t sub_100BB608C(uint64_t a1, void (*a2)(void), void (*a3)(uint64_t, unint64_t), void (*a4)(uint64_t, uint64_t))
{
  return a1;
}

void sub_100BB60DC(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5, uint64_t a6, void (*a7)(void), void (*a8)(uint64_t, unint64_t), void (*a9)(uint64_t, uint64_t))
{
  if (a4 >> 60 != 15)
  {
    a7();
    a8(a3, a4);
    a9(a5, a6);
  }
}

uint64_t sub_100BB6174()
{
  return _swift_deallocObject(v0, 17, 7);
}

void sub_100BB6188(char a1)
{
  sub_1004FE610(a1, *(void *)(v1 + 16), *(NSObject **)(v1 + 24));
}

uint64_t sub_100BB6194()
{
  swift_release();

  return _swift_deallocObject(v0, 32, 7);
}

uint64_t sub_100BB61D4()
{
  swift_unknownObjectRelease();
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();

  return _swift_deallocObject(v0, 80, 7);
}

uint64_t sub_100BB6224(uint64_t a1)
{
  uint64_t v4 = *(void *)(v1 + 16);
  uint64_t v5 = *(void *)(v1 + 24);
  uint64_t v6 = *(void *)(v1 + 32);
  uint64_t v7 = *(void *)(v1 + 40);
  uint64_t v8 = *(void *)(v1 + 48);
  uint64_t v9 = *(void *)(v1 + 64);
  char v10 = *(unsigned char *)(v1 + 56);
  uint64_t v11 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v11;
  *uint64_t v11 = v2;
  v11[1] = sub_10001D2E4;
  return sub_1005299B0(a1, v4, v5, v6, v7, v8, v10, v9);
}

uint64_t sub_100BB6314()
{
  unint64_t v1 = v0[5];
  if (v1 >> 60 != 15)
  {
    if (v0[3] >> 60 != 15)
    {
      sub_10001CFB8(v0[2], v0[3]);
      unint64_t v1 = v0[5];
    }
    sub_10001CFB8(v0[4], v1);
    unint64_t v2 = v0[7];
    if (v2 >> 60 != 15) {
      sub_10001CFB8(v0[6], v2);
    }
  }

  return _swift_deallocObject(v0, 64, 7);
}

void sub_100BB6398(uint64_t a1, uint64_t a2)
{
  sub_100BA9F38(a1, a2, *(void **)(v2 + 16), *(NSObject **)(v2 + 24));
}

uint64_t sub_100BB63A0()
{
  return sub_100BB8538((void (*)(void))&_swift_unknownObjectRelease, (void (*)(void))&_swift_release);
}

uint64_t sub_100BB63CC(uint64_t a1)
{
  uint64_t v4 = v1[2];
  uint64_t v5 = v1[3];
  uint64_t v6 = v1[4];
  uint64_t v7 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v7;
  *uint64_t v7 = v2;
  v7[1] = sub_100033F68;
  return sub_100BA943C(a1, v4, v5, v6);
}

uint64_t sub_100BB6480(uint64_t a1)
{
  return sub_100BA89AC(a1, *(void *)(v1 + 16), *(void *)(v1 + 24));
}

void sub_100BB649C(uint64_t a1)
{
}

uint64_t sub_100BB64A4@<X0>(uint64_t a1@<X8>)
{
  return sub_100E5401C(*(void *)(v1 + 16), *(void *)(v1 + 32), *(void *)(v1 + 40), *(void *)(v1 + 48), a1);
}

uint64_t sub_100BB64C8(uint64_t a1)
{
  return sub_100BA46C0(a1, v1[2], v1[3], v1[4]);
}

uint64_t sub_100BB64EC()
{
  return sub_100BA49A8(v0[2], v0[3], v0[4], v0[5]);
}

void sub_100BB64FC(char a1)
{
  sub_100BA5970(a1, *(void (**)(void ***))(v1 + 16));
}

uint64_t sub_100BB6508(uint64_t a1)
{
  return sub_100BA5D18(a1, v1[2], v1[3], v1[4]);
}

uint64_t sub_100BB6528()
{
  swift_release();
  unint64_t v1 = v0[5];
  if (v1 >> 60 != 15) {
    sub_10001CFB8(v0[4], v1);
  }
  sub_10001CFB8(v0[6], v0[7]);
  unint64_t v2 = v0[9];
  if (v2 >> 60 != 15) {
    sub_10001CFB8(v0[8], v2);
  }
  swift_release();

  return _swift_deallocObject(v0, 88, 7);
}

void sub_100BB65A0()
{
  unint64_t v1 = *(void (**)(_OWORD *, void))(v0 + 16);
  long long v2 = *(_OWORD *)(v0 + 48);
  v3[0] = *(_OWORD *)(v0 + 32);
  v3[1] = v2;
  v3[2] = *(_OWORD *)(v0 + 64);
  v1(v3, 0);
  Transaction.capture()();
}

uint64_t sub_100BB65FC()
{
  swift_release();
  swift_release();
  swift_release();

  return _swift_deallocObject(v0, 48, 7);
}

void sub_100BB6644()
{
  sub_100BA6000(*(void *)(v0 + 16), *(void *)(v0 + 24), *(void (**)(unsigned long long *, uint64_t))(v0 + 32), *(void *)(v0 + 40));
}

uint64_t sub_100BB6650()
{
  return sub_100BB8538((void (*)(void))&_swift_release, (void (*)(void))&_swift_bridgeObjectRelease);
}

uint64_t sub_100BB667C()
{
  return _swift_deallocObject(v0, 32, 7);
}

uint64_t sub_100BB668C(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 32))(a2, a1, v5);
  return a2;
}

uint64_t sub_100BB66F4(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t sub_100BB6754(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 0x696669746E656469 && a2 == 0xEA00000000007265;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x6449794D646E6966 && a2 == 0xE800000000000000 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0xD000000000000015 && a2 == 0x8000000101415B30 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else if (a1 == 0xD000000000000014 && a2 == 0x8000000101415B50 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 3;
  }
  else if (a1 == 0x6E614872656E776FLL && a2 == 0xEB00000000656C64 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 4;
  }
  else if (a1 == 0xD000000000000015 && a2 == 0x80000001013EE400 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 5;
  }
  else if (a1 == 0xD000000000000013 && a2 == 0x8000000101415B70 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 6;
  }
  else if (a1 == 0xD00000000000001ALL && a2 == 0x8000000101415B90)
  {
    swift_bridgeObjectRelease();
    return 7;
  }
  else
  {
    char v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v6) {
      return 7;
    }
    else {
      return 8;
    }
  }
}

uint64_t sub_100BB6A90(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 0x614264726F636572 && a2 == 0xED00004C52556573;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x696669746E656469 && a2 == 0xEA00000000007265 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0x4B676E6972616873 && a2 == 0xEB00000000737965 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else if (a1 == 0x6E49646572616873 && a2 == 0xEB00000000786564)
  {
    swift_bridgeObjectRelease();
    return 3;
  }
  else
  {
    char v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v6) {
      return 3;
    }
    else {
      return 4;
    }
  }
}

void sub_100BB6CAC(uint64_t a1, uint64_t a2, NSObject *a3)
{
  uint64_t v6 = type metadata accessor for OwnedBeaconRecord();
  uint64_t v7 = __chkstk_darwin(v6);
  uint64_t v9 = (char *)&v24 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v7);
  uint64_t v11 = (char *)&v24 - v10;
  if (a1)
  {
    if (qword_101637070 != -1) {
      swift_once();
    }
    uint64_t v12 = type metadata accessor for Logger();
    sub_100010324(v12, (uint64_t)qword_10170EC30);
    sub_100BB7A10(a2, (uint64_t)v11, (uint64_t (*)(void))type metadata accessor for OwnedBeaconRecord);
    uint64_t v13 = Logger.logObject.getter();
    os_log_type_t v14 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v13, v14))
    {
      os_log_type_t v15 = (uint8_t *)swift_slowAlloc();
      uint64_t v25 = swift_slowAlloc();
      *(_DWORD *)os_log_type_t v15 = 136315138;
      type metadata accessor for UUID();
      sub_100BB245C((unint64_t *)&qword_101638B10, (void (*)(uint64_t))&type metadata accessor for UUID);
      uint64_t v16 = dispatch thunk of CustomStringConvertible.description.getter();
      uint64_t v24 = sub_1008FA0F0(v16, v17, &v25);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      sub_100BB66F4((uint64_t)v11, (uint64_t (*)(void))type metadata accessor for OwnedBeaconRecord);
      _os_log_impl((void *)&_mh_execute_header, v13, v14, "SetupVirtualMeDevice: Failed to remove duplicate OBR %s", v15, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      sub_100BB66F4((uint64_t)v11, (uint64_t (*)(void))type metadata accessor for OwnedBeaconRecord);
    }
  }
  else
  {
    if (qword_101637070 != -1) {
      swift_once();
    }
    uint64_t v18 = type metadata accessor for Logger();
    sub_100010324(v18, (uint64_t)qword_10170EC30);
    sub_100BB7A10(a2, (uint64_t)v9, (uint64_t (*)(void))type metadata accessor for OwnedBeaconRecord);
    Swift::String v19 = Logger.logObject.getter();
    os_log_type_t v20 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v19, v20))
    {
      uint64_t v21 = (uint8_t *)swift_slowAlloc();
      uint64_t v25 = swift_slowAlloc();
      *(_DWORD *)uint64_t v21 = 136315138;
      type metadata accessor for UUID();
      sub_100BB245C((unint64_t *)&qword_101638B10, (void (*)(uint64_t))&type metadata accessor for UUID);
      uint64_t v22 = dispatch thunk of CustomStringConvertible.description.getter();
      uint64_t v24 = sub_1008FA0F0(v22, v23, &v25);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      sub_100BB66F4((uint64_t)v9, (uint64_t (*)(void))type metadata accessor for OwnedBeaconRecord);
      _os_log_impl((void *)&_mh_execute_header, v19, v20, "SetupVirtualMeDevice: Successfully removed duplicate OBR %s", v21, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      sub_100BB66F4((uint64_t)v9, (uint64_t (*)(void))type metadata accessor for OwnedBeaconRecord);
    }
  }
  dispatch_group_leave(a3);
}

uint64_t sub_100BB713C(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v6 = type metadata accessor for SystemInfo.DeviceLockState();
  uint64_t v57 = *(void *)(v6 - 8);
  uint64_t v7 = __chkstk_darwin(v6);
  uint64_t v60 = (char *)&v56 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v7);
  unint64_t v59 = (char *)&v56 - v9;
  uint64_t v67 = type metadata accessor for OwnedBeaconRecord();
  uint64_t v10 = *(void *)(v67 - 8);
  uint64_t v11 = *(void *)(v10 + 64);
  uint64_t v12 = __chkstk_darwin(v67);
  uint64_t v65 = (uint64_t)&v56 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = __chkstk_darwin(v12);
  os_log_type_t v15 = (char *)&v56 - v14;
  __chkstk_darwin(v13);
  unint64_t v17 = (char *)&v56 - v16;
  uint64_t v18 = swift_allocObject();
  *(void *)(v18 + 16) = a3;
  uint64_t v19 = *(void *)(a2 + 32);
  uint64_t v69 = a1;
  sub_100BB7A10(a1, (uint64_t)v17, (uint64_t (*)(void))type metadata accessor for OwnedBeaconRecord);
  size_t v68 = v15;
  sub_100BB7A10((uint64_t)v17, (uint64_t)v15, (uint64_t (*)(void))type metadata accessor for OwnedBeaconRecord);
  uint64_t v20 = *(unsigned __int8 *)(v10 + 80);
  uint64_t v21 = (v20 + 16) & ~v20;
  uint64_t v61 = v20 | 7;
  uint64_t v22 = swift_allocObject();
  uint64_t v62 = v21;
  sub_100BB668C((uint64_t)v17, v22 + v21, (uint64_t (*)(void))type metadata accessor for OwnedBeaconRecord);
  unint64_t v63 = (v11 + v21 + 7) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v64 = v22;
  unint64_t v23 = (void (**)())(v22 + v63);
  *unint64_t v23 = sub_1003B44B8;
  v23[1] = (void (*)())v18;
  uint64_t v66 = v18;
  uint64_t v24 = v19;
  swift_retain_n();
  id v56 = a3;
  swift_retain();
  static os_log_type_t.default.getter();
  if (qword_101637260 != -1) {
    swift_once();
  }
  sub_10000588C((uint64_t *)&unk_10163AD00);
  uint64_t v25 = swift_allocObject();
  long long v58 = xmmword_101342130;
  *(_OWORD *)(v25 + 16) = xmmword_101342130;
  uint64_t v26 = v69 + *(int *)(v67 + 20);
  uint64_t v27 = type metadata accessor for UUID();
  sub_100BB245C((unint64_t *)&qword_101638B10, (void (*)(uint64_t))&type metadata accessor for UUID);
  uint64_t v28 = dispatch thunk of CustomStringConvertible.description.getter();
  uint64_t v30 = v29;
  *(void *)(v25 + 56) = &type metadata for String;
  *(void *)(v25 + 64) = sub_10000B4CC();
  *(void *)(v25 + 32) = v28;
  *(void *)(v25 + 40) = v30;
  os_log(_:dso:log:_:_:)();
  swift_bridgeObjectRelease();
  uint64_t v31 = v59;
  static SystemInfo.lockState.getter();
  uint64_t v32 = v57;
  uint64_t v33 = v60;
  (*(void (**)(char *, void, uint64_t))(v57 + 104))(v60, enum case for SystemInfo.DeviceLockState.beforeFirstUnlock(_:), v6);
  sub_100BB245C((unint64_t *)&unk_101655610, (void (*)(uint64_t))&type metadata accessor for SystemInfo.DeviceLockState);
  dispatch thunk of RawRepresentable.rawValue.getter();
  dispatch thunk of RawRepresentable.rawValue.getter();
  uint64_t v35 = v70;
  uint64_t v34 = v71;
  uint64_t v36 = *(void (**)(char *, uint64_t))(v32 + 8);
  v36(v33, v6);
  v36(v31, v6);
  uint64_t v37 = (uint64_t)v68;
  if (v34 == v35)
  {
    static os_log_type_t.default.getter();
    os_log(_:dso:log:_:_:)();
    sub_10009FD9C();
    uint64_t v38 = swift_allocError();
    *unint64_t v39 = 0;
    char v40 = v56;
    sub_100BB6CAC(v38, v37, v40);

    swift_errorRelease();
  }
  uint64_t v41 = dispatch_group_create();
  dispatch_group_enter(v41);
  sub_10000588C(&qword_10163BC50);
  uint64_t v42 = *(void *)(v27 - 8);
  unint64_t v43 = (*(unsigned __int8 *)(v42 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v42 + 80);
  uint64_t v44 = swift_allocObject();
  *(_OWORD *)(v44 + 16) = v58;
  (*(void (**)(unint64_t, uint64_t, uint64_t))(v42 + 16))(v44 + v43, v26, v27);
  uint64_t v45 = swift_allocObject();
  *(void *)(v45 + 16) = v41;
  uint64_t v46 = v41;
  sub_100A07010(v44, (uint64_t)sub_1003A951C, v45);
  swift_bridgeObjectRelease();
  swift_release();
  OS_dispatch_group.wait()();
  uint64_t v47 = v69;
  uint64_t v48 = v65;
  sub_100BB7A10(v69, v65, (uint64_t (*)(void))type metadata accessor for OwnedBeaconRecord);
  unint64_t v49 = v63;
  unint64_t v50 = (v63 + 23) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v51 = swift_allocObject();
  sub_100BB668C(v48, v51 + v62, (uint64_t (*)(void))type metadata accessor for OwnedBeaconRecord);
  uint64_t v52 = (uint64_t (**)(uint64_t))(v51 + v49);
  uint64_t v53 = (uint64_t (*)(uint64_t))v64;
  *uint64_t v52 = sub_100BB7F18;
  v52[1] = v53;
  unint64_t v54 = v51 + v50;
  *(void *)unint64_t v54 = v24;
  *(_WORD *)(v54 + 8) = 257;
  swift_retain();
  swift_retain();
  sub_10038F420(v47, (void (*)(void))sub_1003B769C, v51);
  swift_release();
  swift_release();
  swift_release();

  sub_100BB66F4(v37, (uint64_t (*)(void))type metadata accessor for OwnedBeaconRecord);
  return swift_release_n();
}

uint64_t sub_100BB785C()
{
  return sub_100BB8538((void (*)(void))&_swift_release, (void (*)(void))&_swift_bridgeObjectRelease);
}

uint64_t sub_100BB7888()
{
  return _swift_deallocObject(v0, 32, 7);
}

uint64_t sub_100BB7898()
{
  return sub_100BB84BC((void (*)(void))&_swift_errorRelease);
}

uint64_t sub_100BB78B0()
{
  unint64_t v1 = *(uint64_t (**)(void *, uint64_t))(v0 + 16);
  uint64_t v2 = *(void *)(v0 + 32);
  memset(v4, 0, 24);
  v4[3] = 0xF000000000000000;
  v4[4] = 0;
  uint64_t v4[5] = 0;
  return v1(v4, v2);
}

uint64_t sub_100BB78FC()
{
  swift_release();
  unint64_t v1 = v0[5];
  if (v1 >> 60 != 15) {
    sub_10001CFB8(v0[4], v1);
  }
  sub_10001CFB8(v0[6], v0[7]);
  unint64_t v2 = v0[9];
  if (v2 >> 60 != 15) {
    sub_10001CFB8(v0[8], v2);
  }

  return _swift_deallocObject(v0, 80, 7);
}

uint64_t sub_100BB796C()
{
  unint64_t v1 = *(uint64_t (**)(_OWORD *, void))(v0 + 16);
  long long v2 = *(_OWORD *)(v0 + 48);
  v4[0] = *(_OWORD *)(v0 + 32);
  v4[1] = v2;
  v4[2] = *(_OWORD *)(v0 + 64);
  return v1(v4, 0);
}

uint64_t sub_100BB79B8()
{
  return sub_100BB8538((void (*)(void))&_swift_release, (void (*)(void))&_swift_bridgeObjectRelease);
}

uint64_t sub_100BB79E4()
{
  return _swift_deallocObject(v0, 32, 7);
}

uint64_t sub_100BB79F4(uint64_t a1)
{
  return sub_100BA2D5C(a1, *(void *)(v1 + 16), *(void *)(v1 + 24));
}

uint64_t sub_100BB7A10(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

void sub_100BB7A78(uint64_t a1)
{
  sub_100BA1D4C(a1, v1);
}

uint64_t sub_100BB7A94()
{
  swift_release();
  swift_release();

  return _swift_deallocObject(v0, 40, 7);
}

void sub_100BB7ADC(uint64_t a1)
{
  sub_100BA2278(a1, *(NSObject **)(v1 + 16), *(void *)(v1 + 24), *(void *)(v1 + 32));
}

uint64_t sub_100BB7AE8(uint64_t a1)
{
  return sub_100BA3664(a1, v1);
}

uint64_t sub_100BB7B04()
{
  swift_release();
  swift_release();

  return _swift_deallocObject(v0, 32, 7);
}

void sub_100BB7B44()
{
  sub_100BA3938(*(void *)(v0 + 16), *(void *)(v0 + 24));
}

uint64_t sub_100BB7B4C()
{
  return _swift_deallocObject(v0, 24, 7);
}

uint64_t sub_100BB7B84()
{
  uint64_t v1 = (int *)type metadata accessor for OwnedBeaconRecord();
  uint64_t v2 = *(unsigned __int8 *)(*((void *)v1 - 1) + 80);
  uint64_t v3 = (v2 + 16) & ~v2;
  uint64_t v19 = *(void *)(*((void *)v1 - 1) + 64);
  uint64_t v4 = v0 + v3;
  sub_10001CFB8(*(void *)(v0 + v3), *(void *)(v0 + v3 + 8));
  uint64_t v5 = v0 + v3 + v1[5];
  uint64_t v6 = type metadata accessor for UUID();
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = *(void (**)(uint64_t, uint64_t))(v7 + 8);
  v8(v5, v6);
  uint64_t v9 = v0 + v3 + v1[6];
  type metadata accessor for StableIdentifier();
  switch(swift_getEnumCaseMultiPayload())
  {
    case 0u:
    case 4u:
      goto LABEL_6;
    case 1u:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      goto LABEL_6;
    case 2u:
      v8(v9, v6);
      uint64_t v18 = (v2 + 16) & ~v2;
      sub_10000588C(&qword_1016555E0);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      goto LABEL_5;
    case 3u:
      v8(v9, v6);
      uint64_t v18 = (v2 + 16) & ~v2;
      sub_10000588C((uint64_t *)&unk_1016565E0);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
LABEL_5:
      uint64_t v3 = v18;
LABEL_6:
      swift_bridgeObjectRelease();
      break;
    default:
      break;
  }
  uint64_t v10 = v4 + v1[7];
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(v10, 1, v6)) {
    v8(v10, v6);
  }
  uint64_t v11 = v4 + v1[8];
  uint64_t v12 = type metadata accessor for Date();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v12 - 8) + 8))(v11, v12);
  sub_10001CFB8(*(void *)(v4 + v1[9]), *(void *)(v4 + v1[9] + 8));
  uint64_t v13 = (uint64_t *)(v4 + v1[10]);
  unint64_t v14 = v13[1];
  if (v14 >> 60 != 15) {
    sub_10001CFB8(*v13, v14);
  }
  os_log_type_t v15 = (uint64_t *)(v4 + v1[11]);
  unint64_t v16 = v15[1];
  if (v16 >> 60 != 15) {
    sub_10001CFB8(*v15, v16);
  }
  sub_10001CFB8(*(void *)(v4 + v1[12]), *(void *)(v4 + v1[12] + 8));
  sub_10001CFB8(*(void *)(v4 + v1[13]), *(void *)(v4 + v1[13] + 8));
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();

  return _swift_deallocObject(v0, ((v19 + v3 + 7) & 0xFFFFFFFFFFFFFFF8) + 16, v2 | 7);
}

uint64_t sub_100BB7F18(uint64_t a1)
{
  uint64_t v3 = *(void *)(type metadata accessor for OwnedBeaconRecord() - 8);
  unint64_t v4 = (*(unsigned __int8 *)(v3 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  uint64_t v5 = v1 + v4;
  uint64_t v6 = v1 + ((*(void *)(v3 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v7 = *(uint64_t (**)(void))v6;
  uint64_t v8 = *(void *)(v6 + 8);

  return sub_100BA40A8(a1, v5, v7, v8);
}

uint64_t sub_100BB7FB8()
{
  uint64_t v1 = (int *)type metadata accessor for OwnedBeaconRecord();
  uint64_t v2 = *(unsigned __int8 *)(*((void *)v1 - 1) + 80);
  uint64_t v3 = (v2 + 16) & ~v2;
  uint64_t v19 = *(void *)(*((void *)v1 - 1) + 64);
  uint64_t v4 = v0 + v3;
  sub_10001CFB8(*(void *)(v0 + v3), *(void *)(v0 + v3 + 8));
  uint64_t v5 = v0 + v3 + v1[5];
  uint64_t v6 = type metadata accessor for UUID();
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = *(void (**)(uint64_t, uint64_t))(v7 + 8);
  v8(v5, v6);
  uint64_t v9 = v0 + v3 + v1[6];
  type metadata accessor for StableIdentifier();
  switch(swift_getEnumCaseMultiPayload())
  {
    case 0u:
    case 4u:
      goto LABEL_6;
    case 1u:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      goto LABEL_6;
    case 2u:
      v8(v9, v6);
      uint64_t v18 = (v2 + 16) & ~v2;
      sub_10000588C(&qword_1016555E0);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      goto LABEL_5;
    case 3u:
      v8(v9, v6);
      uint64_t v18 = (v2 + 16) & ~v2;
      sub_10000588C((uint64_t *)&unk_1016565E0);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
LABEL_5:
      uint64_t v3 = v18;
LABEL_6:
      swift_bridgeObjectRelease();
      break;
    default:
      break;
  }
  uint64_t v10 = v4 + v1[7];
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(v10, 1, v6)) {
    v8(v10, v6);
  }
  uint64_t v11 = v4 + v1[8];
  uint64_t v12 = type metadata accessor for Date();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v12 - 8) + 8))(v11, v12);
  sub_10001CFB8(*(void *)(v4 + v1[9]), *(void *)(v4 + v1[9] + 8));
  uint64_t v13 = (uint64_t *)(v4 + v1[10]);
  unint64_t v14 = v13[1];
  if (v14 >> 60 != 15) {
    sub_10001CFB8(*v13, v14);
  }
  os_log_type_t v15 = (uint64_t *)(v4 + v1[11]);
  unint64_t v16 = v15[1];
  if (v16 >> 60 != 15) {
    sub_10001CFB8(*v15, v16);
  }
  sub_10001CFB8(*(void *)(v4 + v1[12]), *(void *)(v4 + v1[12] + 8));
  sub_10001CFB8(*(void *)(v4 + v1[13]), *(void *)(v4 + v1[13] + 8));
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();

  return _swift_deallocObject(v0, ((((v19 + v3 + 7) & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8) + 10, v2 | 7);
}

uint64_t sub_100BB835C()
{
  return sub_100BB8538((void (*)(void))&_swift_release, (void (*)(void))&_swift_bridgeObjectRelease);
}

uint64_t sub_100BB8388()
{
  return _swift_deallocObject(v0, 32, 7);
}

uint64_t sub_100BB839C()
{
  swift_release();
  swift_release();
  swift_release();

  return _swift_deallocObject(v0, 48, 7);
}

uint64_t sub_100BB83E4(char a1)
{
  return sub_100BAF048(a1, *(uint64_t (**)(void))(v1 + 16), *(void *)(v1 + 24), *(void *)(v1 + 32), *(void *)(v1 + 40));
}

uint64_t sub_100BB83F0()
{
  swift_release();
  swift_release();
  swift_release();

  return _swift_deallocObject(v0, 48, 7);
}

uint64_t sub_100BB8438()
{
  return sub_100BAF524(*(void *)(v0 + 16), *(NSObject **)(v0 + 24), *(void *)(v0 + 32), *(void *)(v0 + 40));
}

uint64_t sub_100BB8444()
{
  swift_release();
  swift_release();
  swift_release();

  return _swift_deallocObject(v0, 56, 7);
}

void sub_100BB8494(uint64_t a1)
{
  sub_100BB0344(a1, *(NSObject **)(v1 + 16), *(void *)(v1 + 24), *(void *)(v1 + 32), *(void *)(v1 + 40), *(void *)(v1 + 48));
}

uint64_t sub_100BB84A4()
{
  return sub_100BB84BC((void (*)(void))&_swift_errorRelease);
}

uint64_t sub_100BB84BC(void (*a1)(void))
{
  swift_release();
  a1(*(void *)(v1 + 32));

  return _swift_deallocObject(v1, 40, 7);
}

uint64_t sub_100BB850C()
{
  return sub_100BB8538((void (*)(void))&_swift_release, (void (*)(void))&_swift_release);
}

uint64_t sub_100BB8538(void (*a1)(void), void (*a2)(void))
{
  a1(*(void *)(v2 + 16));
  a2(*(void *)(v2 + 32));

  return _swift_deallocObject(v2, 40, 7);
}

void sub_100BB8590()
{
  sub_100BB0B44(v0[2], v0[3], v0[4]);
}

uint64_t sub_100BB859C()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();

  return _swift_deallocObject(v0, 72, 7);
}

unint64_t sub_100BB85EC(uint64_t a1)
{
  return sub_100BB4084(a1, *(void *)(v1 + 16), *(void *)(v1 + 24), *(void *)(v1 + 32), *(void *)(v1 + 40), *(void *)(v1 + 48), *(void (**)(uint64_t))(v1 + 56), *(void *)(v1 + 64));
}

uint64_t sub_100BB8600()
{
  swift_weakDestroy();

  return _swift_deallocObject(v0, 24, 7);
}

unint64_t sub_100BB8638(uint64_t a1)
{
  return sub_100BB49FC(a1);
}

unint64_t sub_100BB8640()
{
  unint64_t result = qword_1016475A0;
  if (!qword_1016475A0)
  {
    sub_10000592C(&qword_101641CA0);
    sub_1004CB378();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1016475A0);
  }
  return result;
}

uint64_t type metadata accessor for SecureLocationsCachedSharedKey(uint64_t a1)
{
  return sub_1000F4EA4(a1, qword_10165A808);
}

uint64_t sub_100BB86D4()
{
  return sub_100BA0058();
}

void sub_100BB86DC(unsigned char *a1)
{
  sub_100BA00D0(a1, v1);
}

uint64_t sub_100BB86E4(unsigned char *a1)
{
  return sub_100BA0530(a1, v1);
}

uint64_t sub_100BB86F0()
{
  return sub_100BAEDB0();
}

uint64_t *sub_100BB870C(uint64_t *a1, uint64_t *a2, int *a3)
{
  int v5 = *(_DWORD *)(*((void *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v16 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v16 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v7 = type metadata accessor for UUID();
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v7 - 8) + 16))(a1, a2, v7);
    uint64_t v8 = a3[5];
    uint64_t v9 = a3[6];
    uint64_t v10 = (uint64_t *)((char *)a1 + v8);
    uint64_t v11 = (uint64_t *)((char *)a2 + v8);
    uint64_t v12 = v11[1];
    *uint64_t v10 = *v11;
    v10[1] = v12;
    uint64_t v13 = (char *)a1 + v9;
    unint64_t v14 = (_OWORD *)((char *)a2 + v9);
    unint64_t v15 = *(uint64_t *)((char *)a2 + v9 + 8);
    swift_bridgeObjectRetain();
    if (v15 >> 60 == 15)
    {
      *(_OWORD *)uint64_t v13 = *v14;
    }
    else
    {
      uint64_t v17 = *(void *)v14;
      sub_1000361E0(v17, v15);
      *(void *)uint64_t v13 = v17;
      *((void *)v13 + 1) = v15;
    }
    uint64_t v18 = a3[7];
    uint64_t v19 = (char *)a1 + v18;
    uint64_t v20 = (char *)a2 + v18;
    unint64_t v21 = *((void *)v20 + 1);
    if (v21 >> 60 == 15)
    {
      *(_OWORD *)uint64_t v19 = *(_OWORD *)v20;
    }
    else
    {
      uint64_t v22 = *(void *)v20;
      sub_1000361E0(*(void *)v20, *((void *)v20 + 1));
      *(void *)uint64_t v19 = v22;
      *((void *)v19 + 1) = v21;
    }
    uint64_t v23 = a3[8];
    uint64_t v24 = a3[9];
    uint64_t v25 = (char *)a1 + v23;
    uint64_t v26 = (char *)a2 + v23;
    *uint64_t v25 = *v26;
    uint64_t v27 = *((void *)v26 + 2);
    *((void *)v25 + 1) = *((void *)v26 + 1);
    *((void *)v25 + 2) = v27;
    uint64_t v28 = (uint64_t *)((char *)a1 + v24);
    uint64_t v29 = (uint64_t *)((char *)a2 + v24);
    uint64_t v30 = v29[1];
    *uint64_t v28 = *v29;
    v28[1] = v30;
    uint64_t v31 = a3[11];
    *(uint64_t *)((char *)a1 + a3[10]) = *(uint64_t *)((char *)a2 + a3[10]);
    uint64_t v32 = (char *)a1 + v31;
    uint64_t v33 = (char *)a2 + v31;
    uint64_t v34 = type metadata accessor for Date();
    uint64_t v35 = *(void *)(v34 - 8);
    uint64_t v36 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v35 + 48);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    if (v36(v33, 1, v34))
    {
      uint64_t v37 = sub_10000588C((uint64_t *)&unk_10163AC90);
      memcpy(v32, v33, *(void *)(*(void *)(v37 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v35 + 16))(v32, v33, v34);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v35 + 56))(v32, 0, 1, v34);
    }
  }
  return a1;
}

uint64_t sub_100BB898C(uint64_t a1, int *a2)
{
  uint64_t v4 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8))(a1, v4);
  swift_bridgeObjectRelease();
  int v5 = (uint64_t *)(a1 + a2[6]);
  unint64_t v6 = v5[1];
  if (v6 >> 60 != 15) {
    sub_10001CFB8(*v5, v6);
  }
  uint64_t v7 = (uint64_t *)(a1 + a2[7]);
  unint64_t v8 = v7[1];
  if (v8 >> 60 != 15) {
    sub_10001CFB8(*v7, v8);
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v9 = a1 + a2[11];
  uint64_t v10 = type metadata accessor for Date();
  uint64_t v13 = *(void *)(v10 - 8);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v13 + 48))(v9, 1, v10);
  if (!result)
  {
    uint64_t v12 = *(uint64_t (**)(uint64_t, uint64_t))(v13 + 8);
    return v12(v9, v10);
  }
  return result;
}

uint64_t sub_100BB8AFC(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 16))(a1, a2, v6);
  uint64_t v7 = a3[5];
  uint64_t v8 = a3[6];
  uint64_t v9 = (void *)(a1 + v7);
  uint64_t v10 = (void *)(a2 + v7);
  uint64_t v11 = v10[1];
  void *v9 = *v10;
  v9[1] = v11;
  uint64_t v12 = a1 + v8;
  uint64_t v13 = (_OWORD *)(a2 + v8);
  unint64_t v14 = *(void *)(a2 + v8 + 8);
  swift_bridgeObjectRetain();
  if (v14 >> 60 == 15)
  {
    *(_OWORD *)uint64_t v12 = *v13;
  }
  else
  {
    uint64_t v15 = *(void *)v13;
    sub_1000361E0(v15, v14);
    *(void *)uint64_t v12 = v15;
    *(void *)(v12 + 8) = v14;
  }
  uint64_t v16 = a3[7];
  uint64_t v17 = a1 + v16;
  uint64_t v18 = (uint64_t *)(a2 + v16);
  unint64_t v19 = v18[1];
  if (v19 >> 60 == 15)
  {
    *(_OWORD *)uint64_t v17 = *(_OWORD *)v18;
  }
  else
  {
    uint64_t v20 = *v18;
    sub_1000361E0(*v18, v18[1]);
    *(void *)uint64_t v17 = v20;
    *(void *)(v17 + 8) = v19;
  }
  uint64_t v21 = a3[8];
  uint64_t v22 = a3[9];
  uint64_t v23 = a1 + v21;
  uint64_t v24 = a2 + v21;
  *(unsigned char *)uint64_t v23 = *(unsigned char *)v24;
  uint64_t v25 = *(void *)(v24 + 16);
  *(void *)(v23 + 8) = *(void *)(v24 + 8);
  *(void *)(v23 + 16) = v25;
  uint64_t v26 = (void *)(a1 + v22);
  uint64_t v27 = (void *)(a2 + v22);
  uint64_t v28 = v27[1];
  *uint64_t v26 = *v27;
  v26[1] = v28;
  uint64_t v29 = a3[11];
  *(void *)(a1 + a3[10]) = *(void *)(a2 + a3[10]);
  uint64_t v30 = (void *)(a1 + v29);
  uint64_t v31 = (const void *)(a2 + v29);
  uint64_t v32 = type metadata accessor for Date();
  uint64_t v33 = *(void *)(v32 - 8);
  uint64_t v34 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v33 + 48);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if (v34(v31, 1, v32))
  {
    uint64_t v35 = sub_10000588C((uint64_t *)&unk_10163AC90);
    memcpy(v30, v31, *(void *)(*(void *)(v35 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v33 + 16))(v30, v31, v32);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v33 + 56))(v30, 0, 1, v32);
  }
  return a1;
}

uint64_t sub_100BB8D2C(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 24))(a1, a2, v6);
  uint64_t v7 = a3[5];
  uint64_t v8 = (void *)(a1 + v7);
  uint64_t v9 = (void *)(a2 + v7);
  *uint64_t v8 = *v9;
  v8[1] = v9[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v10 = a3[6];
  uint64_t v11 = (uint64_t *)(a1 + v10);
  uint64_t v12 = (uint64_t *)(a2 + v10);
  unint64_t v13 = *(void *)(a2 + v10 + 8);
  if (*(void *)(a1 + v10 + 8) >> 60 == 15)
  {
    if (v13 >> 60 != 15)
    {
      uint64_t v14 = *v12;
      sub_1000361E0(v14, v13);
      *uint64_t v11 = v14;
      v11[1] = v13;
      goto LABEL_8;
    }
    goto LABEL_6;
  }
  if (v13 >> 60 == 15)
  {
    sub_10042BA84((uint64_t)v11);
LABEL_6:
    *(_OWORD *)uint64_t v11 = *(_OWORD *)v12;
    goto LABEL_8;
  }
  uint64_t v15 = *v12;
  sub_1000361E0(v15, v13);
  uint64_t v16 = *v11;
  unint64_t v17 = v11[1];
  *uint64_t v11 = v15;
  v11[1] = v13;
  sub_10001CFB8(v16, v17);
LABEL_8:
  uint64_t v18 = a3[7];
  unint64_t v19 = (uint64_t *)(a1 + v18);
  uint64_t v20 = (uint64_t *)(a2 + v18);
  unint64_t v21 = *(void *)(a2 + v18 + 8);
  if (*(void *)(a1 + v18 + 8) >> 60 == 15)
  {
    if (v21 >> 60 != 15)
    {
      uint64_t v22 = *v20;
      sub_1000361E0(v22, v21);
      *unint64_t v19 = v22;
      v19[1] = v21;
      goto LABEL_15;
    }
    goto LABEL_13;
  }
  if (v21 >> 60 == 15)
  {
    sub_100BB9078((uint64_t)v19);
LABEL_13:
    *(_OWORD *)unint64_t v19 = *(_OWORD *)v20;
    goto LABEL_15;
  }
  uint64_t v23 = *v20;
  sub_1000361E0(v23, v21);
  uint64_t v24 = *v19;
  unint64_t v25 = v19[1];
  *unint64_t v19 = v23;
  v19[1] = v21;
  sub_10001CFB8(v24, v25);
LABEL_15:
  uint64_t v26 = a3[8];
  uint64_t v27 = a1 + v26;
  uint64_t v28 = a2 + v26;
  *(unsigned char *)uint64_t v27 = *(unsigned char *)v28;
  *(void *)(v27 + 8) = *(void *)(v28 + 8);
  *(void *)(v27 + 16) = *(void *)(v28 + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v29 = a3[9];
  uint64_t v30 = (void *)(a1 + v29);
  uint64_t v31 = (void *)(a2 + v29);
  void *v30 = *v31;
  v30[1] = v31[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + a3[10]) = *(void *)(a2 + a3[10]);
  uint64_t v32 = a3[11];
  uint64_t v33 = (void *)(a1 + v32);
  uint64_t v34 = (void *)(a2 + v32);
  uint64_t v35 = type metadata accessor for Date();
  uint64_t v36 = *(void *)(v35 - 8);
  uint64_t v37 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v36 + 48);
  int v38 = v37(v33, 1, v35);
  int v39 = v37(v34, 1, v35);
  if (!v38)
  {
    if (!v39)
    {
      (*(void (**)(void *, void *, uint64_t))(v36 + 24))(v33, v34, v35);
      return a1;
    }
    (*(void (**)(void *, uint64_t))(v36 + 8))(v33, v35);
    goto LABEL_20;
  }
  if (v39)
  {
LABEL_20:
    uint64_t v40 = sub_10000588C((uint64_t *)&unk_10163AC90);
    memcpy(v33, v34, *(void *)(*(void *)(v40 - 8) + 64));
    return a1;
  }
  (*(void (**)(void *, void *, uint64_t))(v36 + 16))(v33, v34, v35);
  (*(void (**)(void *, void, uint64_t, uint64_t))(v36 + 56))(v33, 0, 1, v35);
  return a1;
}

uint64_t sub_100BB9078(uint64_t a1)
{
  return a1;
}

uint64_t sub_100BB90CC(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 32))(a1, a2, v6);
  uint64_t v7 = a3[6];
  *(_OWORD *)(a1 + a3[5]) = *(_OWORD *)(a2 + a3[5]);
  *(_OWORD *)(a1 + v7) = *(_OWORD *)(a2 + v7);
  uint64_t v8 = a3[8];
  *(_OWORD *)(a1 + a3[7]) = *(_OWORD *)(a2 + a3[7]);
  uint64_t v9 = a1 + v8;
  uint64_t v10 = a2 + v8;
  *(_OWORD *)uint64_t v9 = *(_OWORD *)v10;
  *(void *)(v9 + 16) = *(void *)(v10 + 16);
  uint64_t v11 = a3[10];
  *(_OWORD *)(a1 + a3[9]) = *(_OWORD *)(a2 + a3[9]);
  uint64_t v12 = *(void *)(a2 + v11);
  uint64_t v13 = a3[11];
  uint64_t v14 = (const void *)(a2 + v13);
  uint64_t v15 = (void *)(a1 + v13);
  *(void *)(a1 + v11) = v12;
  uint64_t v16 = type metadata accessor for Date();
  uint64_t v17 = *(void *)(v16 - 8);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v17 + 48))(v14, 1, v16))
  {
    uint64_t v18 = sub_10000588C((uint64_t *)&unk_10163AC90);
    memcpy(v15, v14, *(void *)(*(void *)(v18 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v17 + 32))(v15, v14, v16);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v17 + 56))(v15, 0, 1, v16);
  }
  return a1;
}

uint64_t sub_100BB9268(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 40))(a1, a2, v6);
  uint64_t v7 = a3[5];
  uint64_t v8 = (void *)(a1 + v7);
  uint64_t v9 = (uint64_t *)(a2 + v7);
  uint64_t v11 = *v9;
  uint64_t v10 = v9[1];
  *uint64_t v8 = v11;
  v8[1] = v10;
  swift_bridgeObjectRelease();
  uint64_t v12 = a3[6];
  uint64_t v13 = a1 + v12;
  uint64_t v14 = a2 + v12;
  unint64_t v15 = *(void *)(a1 + v12 + 8);
  if (v15 >> 60 == 15) {
    goto LABEL_4;
  }
  unint64_t v16 = *(void *)(v14 + 8);
  if (v16 >> 60 == 15)
  {
    sub_10042BA84(v13);
LABEL_4:
    *(_OWORD *)uint64_t v13 = *(_OWORD *)v14;
    goto LABEL_6;
  }
  uint64_t v17 = *(void *)v13;
  *(void *)uint64_t v13 = *(void *)v14;
  *(void *)(v13 + 8) = v16;
  sub_10001CFB8(v17, v15);
LABEL_6:
  uint64_t v18 = a3[7];
  uint64_t v19 = a1 + v18;
  uint64_t v20 = a2 + v18;
  unint64_t v21 = *(void *)(a1 + v18 + 8);
  if (v21 >> 60 == 15)
  {
LABEL_9:
    *(_OWORD *)uint64_t v19 = *(_OWORD *)v20;
    goto LABEL_11;
  }
  unint64_t v22 = *(void *)(v20 + 8);
  if (v22 >> 60 == 15)
  {
    sub_100BB9078(v19);
    goto LABEL_9;
  }
  uint64_t v23 = *(void *)v19;
  *(void *)uint64_t v19 = *(void *)v20;
  *(void *)(v19 + 8) = v22;
  sub_10001CFB8(v23, v21);
LABEL_11:
  uint64_t v24 = a3[8];
  uint64_t v25 = a1 + v24;
  uint64_t v26 = a2 + v24;
  *(unsigned char *)uint64_t v25 = *(unsigned char *)v26;
  uint64_t v28 = *(void *)(v26 + 8);
  uint64_t v27 = *(void *)(v26 + 16);
  *(void *)(v25 + 8) = v28;
  *(void *)(v25 + 16) = v27;
  swift_bridgeObjectRelease();
  uint64_t v29 = a3[9];
  uint64_t v30 = (void *)(a1 + v29);
  uint64_t v31 = (uint64_t *)(a2 + v29);
  uint64_t v33 = *v31;
  uint64_t v32 = v31[1];
  void *v30 = v33;
  v30[1] = v32;
  swift_bridgeObjectRelease();
  uint64_t v34 = a3[11];
  *(void *)(a1 + a3[10]) = *(void *)(a2 + a3[10]);
  uint64_t v35 = (void *)(a1 + v34);
  uint64_t v36 = (void *)(a2 + v34);
  uint64_t v37 = type metadata accessor for Date();
  uint64_t v38 = *(void *)(v37 - 8);
  int v39 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v38 + 48);
  int v40 = v39(v35, 1, v37);
  int v41 = v39(v36, 1, v37);
  if (!v40)
  {
    if (!v41)
    {
      (*(void (**)(void *, void *, uint64_t))(v38 + 40))(v35, v36, v37);
      return a1;
    }
    (*(void (**)(void *, uint64_t))(v38 + 8))(v35, v37);
    goto LABEL_16;
  }
  if (v41)
  {
LABEL_16:
    uint64_t v42 = sub_10000588C((uint64_t *)&unk_10163AC90);
    memcpy(v35, v36, *(void *)(*(void *)(v42 - 8) + 64));
    return a1;
  }
  (*(void (**)(void *, void *, uint64_t))(v38 + 32))(v35, v36, v37);
  (*(void (**)(void *, void, uint64_t, uint64_t))(v38 + 56))(v35, 0, 1, v37);
  return a1;
}

uint64_t sub_100BB9520(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_100BB9534);
}

uint64_t sub_100BB9534(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for UUID();
  uint64_t v7 = *(void *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == a2)
  {
    uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    return v8(a1, a2, v6);
  }
  else if (a2 == 0x7FFFFFFF)
  {
    unint64_t v10 = *(void *)(a1 + *(int *)(a3 + 20) + 8);
    if (v10 >= 0xFFFFFFFF) {
      LODWORD(v10) = -1;
    }
    return (v10 + 1);
  }
  else
  {
    uint64_t v11 = sub_10000588C((uint64_t *)&unk_10163AC90);
    uint64_t v12 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v11 - 8) + 48);
    uint64_t v13 = v11;
    uint64_t v14 = a1 + *(int *)(a3 + 44);
    return v12(v14, a2, v13);
  }
}

uint64_t sub_100BB9668(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_100BB967C);
}

uint64_t sub_100BB967C(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result = type metadata accessor for UUID();
  uint64_t v9 = *(void *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    unint64_t v10 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    return v10(a1, a2, a2, result);
  }
  else if (a3 == 0x7FFFFFFF)
  {
    *(void *)(a1 + *(int *)(a4 + 20) + 8) = (a2 - 1);
  }
  else
  {
    uint64_t v11 = sub_10000588C((uint64_t *)&unk_10163AC90);
    uint64_t v12 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v11 - 8) + 56);
    uint64_t v13 = v11;
    uint64_t v14 = a1 + *(int *)(a4 + 44);
    return v12(v14, a2, a2, v13);
  }
  return result;
}

void sub_100BB97B0()
{
  type metadata accessor for UUID();
  if (v0 <= 0x3F)
  {
    sub_100BB98CC(319, (unint64_t *)&qword_10165C690, (void (*)(uint64_t))&type metadata accessor for Date);
    if (v1 <= 0x3F) {
      swift_initStructMetadata();
    }
  }
}

void sub_100BB98CC(uint64_t a1, unint64_t *a2, void (*a3)(uint64_t))
{
  if (!*a2)
  {
    a3(255);
    unint64_t v4 = type metadata accessor for Optional();
    if (!v5) {
      atomic_store(v4, a2);
    }
  }
}

unsigned char *storeEnumTagSinglePayload for SecureLocationsCachedSharingKey.CodingKeys(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 3 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 3) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFD) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFC)
  {
    unsigned int v6 = ((a2 - 253) >> 8) + 1;
    *uint64_t result = a2 + 3;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x100BB99ECLL);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 3;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for SecureLocationsCachedSharingKey.CodingKeys()
{
  return &type metadata for SecureLocationsCachedSharingKey.CodingKeys;
}

unint64_t sub_100BB9A28()
{
  unint64_t result = qword_10165A858;
  if (!qword_10165A858)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10165A858);
  }
  return result;
}

uint64_t sub_100BB9A7C()
{
  return sub_100BB245C(&qword_10165A860, (void (*)(uint64_t))type metadata accessor for SecureLocationsCachedSharedKey);
}

uint64_t sub_100BB9AC4(uint64_t a1)
{
  *(void *)(a1 + 8) = sub_100BB245C(&qword_10165A868, (void (*)(uint64_t))type metadata accessor for SecureLocationsCachedSharedKey);
  uint64_t result = sub_100BB245C(&qword_10165A870, (void (*)(uint64_t))type metadata accessor for SecureLocationsCachedSharedKey);
  *(void *)(a1 + 16) = result;
  return result;
}

unint64_t sub_100BB9B4C()
{
  unint64_t result = qword_10165A878;
  if (!qword_10165A878)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10165A878);
  }
  return result;
}

unint64_t sub_100BB9BA4()
{
  unint64_t result = qword_10165A880;
  if (!qword_10165A880)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10165A880);
  }
  return result;
}

unint64_t sub_100BB9BF8()
{
  unint64_t result = qword_10165A890;
  if (!qword_10165A890)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10165A890);
  }
  return result;
}

unsigned char *storeEnumTagSinglePayload for SecureLocationsCachedSharedKey.CodingKeys(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 7 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 7) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xF9) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xF8)
  {
    unsigned int v6 = ((a2 - 249) >> 8) + 1;
    *unint64_t result = a2 + 7;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x100BB9D18);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 7;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for SecureLocationsCachedSharedKey.CodingKeys()
{
  return &type metadata for SecureLocationsCachedSharedKey.CodingKeys;
}

unint64_t sub_100BB9D54()
{
  unint64_t result = qword_10165A8A0;
  if (!qword_10165A8A0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10165A8A0);
  }
  return result;
}

unint64_t sub_100BB9DAC()
{
  unint64_t result = qword_10165A8A8;
  if (!qword_10165A8A8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10165A8A8);
  }
  return result;
}

unint64_t sub_100BB9E04()
{
  unint64_t result = qword_10165A8B0;
  if (!qword_10165A8B0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10165A8B0);
  }
  return result;
}

uint64_t sub_100BB9E58()
{
  return sub_10054D440();
}

uint64_t sub_100BB9F48(uint64_t a1)
{
  return sub_100BB6508(a1);
}

unint64_t sub_100BB9F68(char a1)
{
  unint64_t result = 0xD000000000000010;
  if (a1)
  {
    if (a1 == 1) {
      return 0xD000000000000014;
    }
    else {
      return 0xD000000000000017;
    }
  }
  return result;
}

unint64_t sub_100BB9FC8()
{
  return sub_100BB9F68(*v0);
}

ValueMetadata *type metadata accessor for LineUpVerifyFindMyNetworkIdResponsePayload()
{
  return &type metadata for LineUpVerifyFindMyNetworkIdResponsePayload;
}

uint64_t sub_100BB9FE4(char a1)
{
  unint64_t v2 = 0xD000000000000010;
  if (a1)
  {
    if (a1 == 1) {
      unint64_t v2 = 0xD000000000000014;
    }
    else {
      unint64_t v2 = 0xD000000000000017;
    }
    if (a1 == 1) {
      unint64_t v3 = 0x8000000101415BD0;
    }
    else {
      unint64_t v3 = 0x8000000101415BB0;
    }
  }
  else
  {
    unint64_t v3 = 0x8000000101415BF0;
  }
  unint64_t v4 = v3;
  String.append(_:)(*(Swift::String *)&v2);
  swift_bridgeObjectRelease();
  return 0x203A737574617473;
}

uint64_t sub_100BBA094()
{
  return sub_100BB9FE4(*v0);
}

uint64_t sub_100BBA09C@<X0>(void *a1@<X0>, unsigned char *a2@<X8>)
{
  uint64_t result = sub_100BBA1A0(a1);
  if (!v2) {
    *a2 = result;
  }
  return result;
}

unint64_t sub_100BBA0C8(uint64_t a1)
{
  *(void *)(a1 + 8) = sub_100BBA0F8();
  unint64_t result = sub_100BBA14C();
  *(void *)(a1 + 16) = result;
  return result;
}

unint64_t sub_100BBA0F8()
{
  unint64_t result = qword_10165A8B8;
  if (!qword_10165A8B8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10165A8B8);
  }
  return result;
}

unint64_t sub_100BBA14C()
{
  unint64_t result = qword_10165A8C0;
  if (!qword_10165A8C0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10165A8C0);
  }
  return result;
}

uint64_t sub_100BBA1A0(void *a1)
{
  uint64_t v3 = type metadata accessor for Endianness();
  __chkstk_darwin(v3 - 8);
  sub_10001CD44(a1, a1[3]);
  dispatch thunk of BinaryDecoding.container()();
  uint64_t v4 = sub_1000BD078((uint64_t)v17, v18);
  uint64_t v5 = dispatch thunk of BinaryDecodingContaining.decode(length:)();
  if (v1)
  {
LABEL_11:
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)v17);
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)a1);
    return v4;
  }
  uint64_t v7 = v5;
  unint64_t v8 = v6;
  sub_1000361E0(v5, v6);
  static Endianness.current.getter();
  sub_10006145C();
  FixedWidthInteger.init(data:ofEndianness:)();
  if (BYTE1(v19) == 1 || (uint64_t v4 = v19, v19 >= 3u))
  {
    if (qword_101637310 != -1) {
      swift_once();
    }
    uint64_t v9 = type metadata accessor for Logger();
    sub_100010324(v9, (uint64_t)qword_10170F068);
    sub_1000361E0(v7, v8);
    sub_1000361E0(v7, v8);
    unint64_t v10 = Logger.logObject.getter();
    os_log_type_t v11 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v10, v11))
    {
      uint64_t v12 = (uint8_t *)swift_slowAlloc();
      uint64_t v19 = swift_slowAlloc();
      *(_DWORD *)uint64_t v12 = 136315138;
      uint64_t v13 = Data.hexString.getter();
      sub_1008FA0F0(v13, v14, &v19);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      sub_10001CFB8(v7, v8);
      sub_10001CFB8(v7, v8);
      _os_log_impl((void *)&_mh_execute_header, v10, v11, "Invalid FMNId status: %s", v12, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      sub_10001CFB8(v7, v8);
      sub_10001CFB8(v7, v8);
    }

    uint64_t v4 = type metadata accessor for BinaryEncodingError();
    sub_10017986C();
    swift_allocError();
    (*(void (**)(uint64_t, void, uint64_t))(*(void *)(v4 - 8) + 104))(v15, enum case for BinaryEncodingError.encodingError(_:), v4);
    swift_willThrow();
    sub_10001CFB8(v7, v8);
    goto LABEL_11;
  }
  sub_10001CFB8(v7, v8);
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)v17);
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)a1);
  return v4;
}

unsigned char *_s12searchpartyd42LineUpVerifyFindMyNetworkIdResponsePayloadV21FindMyNetworkIdStatusOwst_0(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 2 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 2) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFE) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFD)
  {
    unsigned int v6 = ((a2 - 254) >> 8) + 1;
    *unint64_t result = a2 + 2;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x100BBA5E4);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 2;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for LineUpVerifyFindMyNetworkIdResponsePayload.FindMyNetworkIdStatus()
{
  return &type metadata for LineUpVerifyFindMyNetworkIdResponsePayload.FindMyNetworkIdStatus;
}

unint64_t sub_100BBA620()
{
  unint64_t result = qword_10165A8C8;
  if (!qword_10165A8C8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10165A8C8);
  }
  return result;
}

uint64_t sub_100BBA674()
{
  uint64_t v0 = type metadata accessor for String.Encoding();
  __chkstk_darwin(v0 - 8);
  sub_100060568();
  uint64_t v1 = FixedWidthInteger.data.getter();
  unint64_t v3 = v2;
  static String.Encoding.ascii.getter();
  sub_100135A44();
  uint64_t v59 = String.init<A>(bytes:encoding:)();
  uint64_t v5 = v4;
  sub_10001CFB8(v1, v3);
  if (!v5) {
    goto LABEL_11;
  }
  uint64_t v6 = FixedWidthInteger.data.getter();
  unint64_t v8 = v7;
  static String.Encoding.ascii.getter();
  uint64_t v58 = String.init<A>(bytes:encoding:)();
  unint64_t v10 = v9;
  sub_10001CFB8(v6, v8);
  if (!v10)
  {
LABEL_10:
    swift_bridgeObjectRelease();
LABEL_11:
    uint64_t v28 = FixedWidthInteger.data.getter();
    unint64_t v30 = v29;
    uint64_t v31 = Data.hexString.getter();
    sub_10001CFB8(v28, v30);
    uint64_t v60 = v31;
    v32._countAndFlagsBits = 46;
    v32._object = (void *)0xE100000000000000;
    String.append(_:)(v32);
    uint64_t v33 = FixedWidthInteger.data.getter();
    unint64_t v35 = v34;
    uint64_t v36 = Data.hexString.getter();
    uint64_t v38 = v37;
    sub_10001CFB8(v33, v35);
    v39._countAndFlagsBits = v36;
    v39._object = v38;
    String.append(_:)(v39);
    swift_bridgeObjectRelease();
    v40._countAndFlagsBits = 46;
    v40._object = (void *)0xE100000000000000;
    String.append(_:)(v40);
    uint64_t v41 = FixedWidthInteger.data.getter();
    unint64_t v43 = v42;
    uint64_t v44 = Data.hexString.getter();
    uint64_t v46 = v45;
    sub_10001CFB8(v41, v43);
    v47._countAndFlagsBits = v44;
    v47._object = v46;
    String.append(_:)(v47);
    swift_bridgeObjectRelease();
    v48._countAndFlagsBits = 46;
    v48._object = (void *)0xE100000000000000;
    String.append(_:)(v48);
    uint64_t v49 = FixedWidthInteger.data.getter();
    unint64_t v51 = v50;
    uint64_t v52 = Data.hexString.getter();
    unint64_t v54 = v53;
    sub_10001CFB8(v49, v51);
    v55._countAndFlagsBits = v52;
    v55._object = v54;
    String.append(_:)(v55);
    goto LABEL_12;
  }
  uint64_t v11 = FixedWidthInteger.data.getter();
  unint64_t v13 = v12;
  static String.Encoding.ascii.getter();
  uint64_t v57 = String.init<A>(bytes:encoding:)();
  uint64_t v15 = v14;
  sub_10001CFB8(v11, v13);
  if (!v15)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    goto LABEL_10;
  }
  uint64_t v16 = FixedWidthInteger.data.getter();
  unint64_t v18 = v17;
  static String.Encoding.ascii.getter();
  uint64_t v19 = String.init<A>(bytes:encoding:)();
  unint64_t v21 = v20;
  sub_10001CFB8(v16, v18);
  if (!v21)
  {
    swift_bridgeObjectRelease();
    goto LABEL_9;
  }
  uint64_t v60 = v59;
  v22._countAndFlagsBits = 46;
  v22._object = (void *)0xE100000000000000;
  String.append(_:)(v22);
  v23._countAndFlagsBits = v58;
  v23._object = v10;
  String.append(_:)(v23);
  swift_bridgeObjectRelease();
  v24._countAndFlagsBits = 46;
  v24._object = (void *)0xE100000000000000;
  String.append(_:)(v24);
  v25._countAndFlagsBits = v57;
  v25._object = v15;
  String.append(_:)(v25);
  swift_bridgeObjectRelease();
  v26._countAndFlagsBits = 46;
  v26._object = (void *)0xE100000000000000;
  String.append(_:)(v26);
  v27._countAndFlagsBits = v19;
  v27._object = v21;
  String.append(_:)(v27);
LABEL_12:
  swift_bridgeObjectRelease();
  return v60;
}

uint64_t sub_100BBAA90(void *a1)
{
  uint64_t v3 = sub_10000588C(&qword_10165A8E8);
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  uint64_t v6 = (char *)&v8 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10001CD44(a1, a1[3]);
  sub_100BBC2C8();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  char v12 = 0;
  KeyedEncodingContainer.encode(_:forKey:)();
  if (!v1)
  {
    char v11 = 1;
    KeyedEncodingContainer.encode(_:forKey:)();
    char v10 = 2;
    KeyedEncodingContainer.encode(_:forKey:)();
    char v9 = 3;
    KeyedEncodingContainer.encode(_:forKey:)();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v4 + 8))(v6, v3);
}

uint64_t sub_100BBAC48()
{
  return qword_101378A98[*v0];
}

uint64_t sub_100BBAC60@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_100BBBF70(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_100BBAC88(uint64_t a1)
{
  unint64_t v2 = sub_100BBC2C8();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_100BBACC4(uint64_t a1)
{
  unint64_t v2 = sub_100BBC2C8();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_100BBAD00@<X0>(void *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = sub_100BBC0CC(a1);
  if (!v2)
  {
    *a2 = result;
    a2[1] = v5;
  }
  return result;
}

uint64_t sub_100BBAD38(void *a1)
{
  return sub_100BBAA90(a1);
}

uint64_t sub_100BBAD54()
{
  uint64_t v3 = CustomStringConvertible.typeDescription.getter();
  v0._countAndFlagsBits = 32;
  v0._object = (void *)0xE100000000000000;
  String.append(_:)(v0);
  v1._countAndFlagsBits = sub_100BBA674();
  String.append(_:)(v1);
  swift_bridgeObjectRelease();
  return v3;
}

Swift::Int sub_100BBADD8()
{
  Swift::UInt32 v1 = *v0;
  Swift::UInt32 v2 = v0[1];
  Swift::UInt32 v3 = v0[2];
  Swift::UInt32 v4 = v0[3];
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  Hasher._combine(_:)(v2);
  Hasher._combine(_:)(v3);
  Hasher._combine(_:)(v4);
  return Hasher._finalize()();
}

void sub_100BBAE58()
{
  Swift::UInt32 v1 = v0[1];
  Swift::UInt32 v2 = v0[2];
  Swift::UInt32 v3 = v0[3];
  Hasher._combine(_:)(*v0);
  Hasher._combine(_:)(v1);
  Hasher._combine(_:)(v2);
  Hasher._combine(_:)(v3);
}

Swift::Int sub_100BBAEB0()
{
  Swift::UInt32 v1 = *v0;
  Swift::UInt32 v2 = v0[1];
  Swift::UInt32 v3 = v0[2];
  Swift::UInt32 v4 = v0[3];
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  Hasher._combine(_:)(v2);
  Hasher._combine(_:)(v3);
  Hasher._combine(_:)(v4);
  return Hasher._finalize()();
}

BOOL sub_100BBAF2C(_DWORD *a1, _DWORD *a2)
{
  return *a1 == *a2 && a1[1] == a2[1] && a1[2] == a2[2] && a1[3] == a2[3];
}

uint64_t sub_100BBAF68(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for Endianness();
  __chkstk_darwin(v4 - 8);
  uint64_t v5 = type metadata accessor for String.Encoding();
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v8 = (char *)&v26 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v36 = a1;
  uint64_t v37 = a2;
  uint64_t v34 = 46;
  unint64_t v35 = 0xE100000000000000;
  sub_1000336D4();
  uint64_t v9 = StringProtocol.components<A>(separatedBy:)();
  swift_bridgeObjectRelease();
  if (*(void *)(v9 + 16) != 4) {
    goto LABEL_8;
  }
  swift_bridgeObjectRetain();
  static String.Encoding.ascii.getter();
  uint64_t v10 = String.data(using:allowLossyConversion:)();
  unint64_t v12 = v11;
  swift_bridgeObjectRelease();
  unint64_t v13 = *(void (**)(char *, uint64_t))(v6 + 8);
  v13(v8, v5);
  if (v12 >> 60 == 15) {
    goto LABEL_8;
  }
  sub_1000361E0(v10, v12);
  static Endianness.current.getter();
  unint64_t v14 = sub_100060568();
  uint64_t result = FixedWidthInteger.init(data:ofEndianness:)();
  if (BYTE4(v36) == 1) {
    goto LABEL_6;
  }
  unint64_t v32 = v14;
  if (*(void *)(v9 + 16) < 2uLL)
  {
    __break(1u);
LABEL_24:
    __break(1u);
LABEL_25:
    __break(1u);
    return result;
  }
  uint64_t v31 = v36;
  swift_bridgeObjectRetain();
  static String.Encoding.ascii.getter();
  uint64_t v33 = String.data(using:allowLossyConversion:)();
  unint64_t v17 = v16;
  swift_bridgeObjectRelease();
  v13(v8, v5);
  if (v17 >> 60 == 15)
  {
LABEL_6:
    uint64_t v18 = v10;
    unint64_t v19 = v12;
LABEL_7:
    sub_100037A24(v18, v19);
LABEL_8:
    swift_bridgeObjectRelease();
    return 0;
  }
  sub_1000361E0(v33, v17);
  static Endianness.current.getter();
  unint64_t v20 = v17;
  uint64_t result = FixedWidthInteger.init(data:ofEndianness:)();
  if (BYTE4(v36) == 1)
  {
    sub_100037A24(v10, v12);
    uint64_t v18 = v33;
LABEL_12:
    unint64_t v19 = v20;
    goto LABEL_7;
  }
  unint64_t v30 = v17;
  if (*(void *)(v9 + 16) < 3uLL) {
    goto LABEL_24;
  }
  uint64_t v28 = v36;
  swift_bridgeObjectRetain();
  static String.Encoding.ascii.getter();
  uint64_t v29 = String.data(using:allowLossyConversion:)();
  unint64_t v22 = v21;
  swift_bridgeObjectRelease();
  v13(v8, v5);
  if (v22 >> 60 == 15)
  {
    sub_100037A24(v10, v12);
    uint64_t v18 = v33;
    unint64_t v19 = v30;
    goto LABEL_7;
  }
  sub_1000361E0(v29, v22);
  static Endianness.current.getter();
  unint64_t v20 = v22;
  uint64_t result = FixedWidthInteger.init(data:ofEndianness:)();
  uint64_t v23 = v33;
  if (BYTE4(v36) == 1)
  {
    sub_100037A24(v10, v12);
    sub_100037A24(v23, v30);
    uint64_t v18 = v29;
    goto LABEL_12;
  }
  unint64_t v27 = v20;
  if (*(void *)(v9 + 16) < 4uLL) {
    goto LABEL_25;
  }
  uint64_t v26 = v36;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  static String.Encoding.ascii.getter();
  String.data(using:allowLossyConversion:)();
  unint64_t v25 = v24;
  swift_bridgeObjectRelease();
  v13(v8, v5);
  if (v25 >> 60 == 15)
  {
    sub_100037A24(v10, v12);
    sub_100037A24(v33, v30);
    sub_100037A24(v29, v27);
    return 0;
  }
  static Endianness.current.getter();
  FixedWidthInteger.init(data:ofEndianness:)();
  sub_100037A24(v10, v12);
  sub_100037A24(v33, v30);
  sub_100037A24(v29, v27);
  if (BYTE4(v36) == 1) {
    return 0;
  }
  return v31 | (v28 << 32);
}

uint64_t sub_100BBB478(uint64_t a1, unint64_t a2)
{
  uint64_t v4 = type metadata accessor for Endianness();
  __chkstk_darwin(v4 - 8);
  switch(a2 >> 62)
  {
    case 1uLL:
      LODWORD(v5) = HIDWORD(a1) - a1;
      if (__OFSUB__(HIDWORD(a1), a1))
      {
        __break(1u);
LABEL_73:
        __break(1u);
LABEL_74:
        __break(1u);
LABEL_75:
        __break(1u);
LABEL_76:
        __break(1u);
LABEL_77:
        __break(1u);
LABEL_78:
        __break(1u);
LABEL_79:
        __break(1u);
LABEL_80:
        __break(1u);
LABEL_81:
        __break(1u);
LABEL_82:
        __break(1u);
LABEL_83:
        __break(1u);
LABEL_84:
        __break(1u);
LABEL_85:
        __break(1u);
LABEL_86:
        __break(1u);
LABEL_87:
        __break(1u);
LABEL_88:
        __break(1u);
LABEL_89:
        __break(1u);
        JUMPOUT(0x100BBBE78);
      }
      uint64_t v5 = (int)v5;
LABEL_6:
      if (v5 != 19)
      {
LABEL_12:
        sub_1001AB354();
        swift_allocError();
        unint64_t v21 = 0xD000000000000013;
        unint64_t v22 = "firmwareVersionData";
        goto LABEL_14;
      }
      if (Data.subscript.getter() != 46
        || Data.subscript.getter() != 46
        || Data.subscript.getter() != 46)
      {
        sub_1001AB354();
        swift_allocError();
        unint64_t v21 = 0xD000000000000012;
        unint64_t v22 = "Invalid delimiter!";
LABEL_14:
        *(void *)uint64_t v20 = v21;
        *(void *)(v20 + 8) = (unint64_t)(v22 - 32) | 0x8000000000000000;
        *(unsigned char *)(v20 + 16) = 1;
        swift_willThrow();
        uint64_t v23 = a1;
        unint64_t v24 = a2;
        return sub_10001CFB8(v23, v24);
      }
      uint64_t v67 = Data.subdata(in:)();
      unint64_t v10 = v9;
      uint64_t v64 = Data.subdata(in:)();
      unint64_t v12 = v11;
      uint64_t v66 = Data.subdata(in:)();
      unint64_t v14 = v13;
      uint64_t v61 = Data.subdata(in:)();
      unint64_t v62 = v14;
      unint64_t v65 = v15;
      unint64_t v63 = v12;
      unint64_t v16 = v12 >> 62;
      unint64_t v17 = v14 >> 62;
      unint64_t v18 = v15 >> 62;
      switch(v10 >> 62)
      {
        case 1uLL:
          LODWORD(v19) = HIDWORD(v67) - v67;
          if (__OFSUB__(HIDWORD(v67), v67)) {
            goto LABEL_74;
          }
          uint64_t v19 = (int)v19;
LABEL_19:
          if (v19 != 4)
          {
LABEL_49:
            _StringGuts.grow(_:)(40);
            swift_bridgeObjectRelease();
            switch(v10 >> 62)
            {
              case 0uLL:
              case 3uLL:
                goto LABEL_53;
              case 1uLL:
                if (!__OFSUB__(HIDWORD(v67), v67)) {
                  goto LABEL_53;
                }
                goto LABEL_76;
              case 2uLL:
                if (__OFSUB__(*(void *)(v67 + 24), *(void *)(v67 + 16))) {
                  goto LABEL_77;
                }
LABEL_53:
                v51._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
                String.append(_:)(v51);
                swift_bridgeObjectRelease();
                v52._countAndFlagsBits = 978600480;
                v52._object = (void *)0xE400000000000000;
                String.append(_:)(v52);
                switch(v16)
                {
                  case 1uLL:
                    if (!__OFSUB__(HIDWORD(v64), v64)) {
                      goto LABEL_57;
                    }
                    goto LABEL_78;
                  case 2uLL:
                    if (!__OFSUB__(*(void *)(v64 + 24), *(void *)(v64 + 16))) {
                      goto LABEL_57;
                    }
                    goto LABEL_79;
                  default:
LABEL_57:
                    v53._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
                    String.append(_:)(v53);
                    swift_bridgeObjectRelease();
                    v54._countAndFlagsBits = 978603296;
                    v54._object = (void *)0xE400000000000000;
                    String.append(_:)(v54);
                    switch(v17)
                    {
                      case 1uLL:
                        if (!__OFSUB__(HIDWORD(v66), v66)) {
                          goto LABEL_61;
                        }
                        goto LABEL_80;
                      case 2uLL:
                        if (!__OFSUB__(*(void *)(v66 + 24), *(void *)(v66 + 16))) {
                          goto LABEL_61;
                        }
                        goto LABEL_81;
                      default:
LABEL_61:
                        v55._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
                        String.append(_:)(v55);
                        swift_bridgeObjectRelease();
                        v56._countAndFlagsBits = 976243744;
                        v56._object = (void *)0xE400000000000000;
                        String.append(_:)(v56);
                        switch(v18)
                        {
                          case 1uLL:
                            if (!__OFSUB__(HIDWORD(v61), v61)) {
                              goto LABEL_65;
                            }
                            goto LABEL_82;
                          case 2uLL:
                            if (!__OFSUB__(*(void *)(v61 + 24), *(void *)(v61 + 16))) {
                              goto LABEL_65;
                            }
                            goto LABEL_83;
                          default:
LABEL_65:
                            v57._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
                            String.append(_:)(v57);
                            swift_bridgeObjectRelease();
                            sub_1001AB354();
                            swift_allocError();
                            *(void *)uint64_t v58 = 0xD000000000000014;
                            *(void *)(v58 + 8) = 0x8000000101415C50;
                            *(unsigned char *)(v58 + 16) = 1;
                            swift_willThrow();
                            sub_10001CFB8(a1, a2);
                            sub_10001CFB8(v61, v65);
                            sub_10001CFB8(v66, v62);
                            uint64_t v49 = v64;
                            unint64_t v50 = v63;
                            break;
                        }
                        break;
                    }
                    break;
                }
                break;
              default:
                JUMPOUT(0);
            }
LABEL_66:
            sub_10001CFB8(v49, v50);
            uint64_t v23 = v67;
            unint64_t v24 = v10;
            return sub_10001CFB8(v23, v24);
          }
          switch(v16)
          {
            case 1uLL:
              LODWORD(v28) = HIDWORD(v64) - v64;
              if (__OFSUB__(HIDWORD(v64), v64)) {
                goto LABEL_84;
              }
              uint64_t v28 = (int)v28;
LABEL_25:
              if (v28 != 4) {
                goto LABEL_49;
              }
              switch(v17)
              {
                case 1uLL:
                  LODWORD(v31) = HIDWORD(v66) - v66;
                  if (__OFSUB__(HIDWORD(v66), v66)) {
                    goto LABEL_86;
                  }
                  uint64_t v31 = (int)v31;
LABEL_31:
                  if (v31 != 4) {
                    goto LABEL_49;
                  }
                  switch(v18)
                  {
                    case 1uLL:
                      LODWORD(v34) = HIDWORD(v61) - v61;
                      if (__OFSUB__(HIDWORD(v61), v61)) {
                        goto LABEL_88;
                      }
                      uint64_t v34 = (int)v34;
LABEL_37:
                      if (v34 != 4) {
                        goto LABEL_49;
                      }
                      sub_1000361E0(v67, v10);
                      static Endianness.current.getter();
                      sub_100060568();
                      FixedWidthInteger.init(data:ofEndianness:)();
                      if (v69) {
                        uint64_t v37 = 0;
                      }
                      else {
                        uint64_t v37 = v68;
                      }
                      uint64_t v60 = v37;
                      sub_1000361E0(v64, v63);
                      static Endianness.current.getter();
                      FixedWidthInteger.init(data:ofEndianness:)();
                      if (v69) {
                        uint64_t v38 = 0;
                      }
                      else {
                        uint64_t v38 = v68;
                      }
                      uint64_t v59 = v38;
                      sub_1000361E0(v66, v62);
                      static Endianness.current.getter();
                      FixedWidthInteger.init(data:ofEndianness:)();
                      if (v69) {
                        unsigned int v39 = 0;
                      }
                      else {
                        unsigned int v39 = v68;
                      }
                      sub_1000361E0(v61, v65);
                      static Endianness.current.getter();
                      FixedWidthInteger.init(data:ofEndianness:)();
                      if ((v69 & 1) != 0 || !v60 || !v59 || !v39 || !v68)
                      {
                        _StringGuts.grow(_:)(57);
                        v40._countAndFlagsBits = 0xD000000000000025;
                        v40._object = (void *)0x8000000101415C70;
                        String.append(_:)(v40);
                        v41._countAndFlagsBits = Data.description.getter();
                        String.append(_:)(v41);
                        swift_bridgeObjectRelease();
                        v42._countAndFlagsBits = 978600480;
                        v42._object = (void *)0xE400000000000000;
                        String.append(_:)(v42);
                        v43._countAndFlagsBits = Data.description.getter();
                        String.append(_:)(v43);
                        swift_bridgeObjectRelease();
                        v44._countAndFlagsBits = 978603296;
                        v44._object = (void *)0xE400000000000000;
                        String.append(_:)(v44);
                        v45._countAndFlagsBits = Data.description.getter();
                        String.append(_:)(v45);
                        swift_bridgeObjectRelease();
                        v46._countAndFlagsBits = 976243744;
                        v46._object = (void *)0xE400000000000000;
                        String.append(_:)(v46);
                        v47._countAndFlagsBits = Data.description.getter();
                        String.append(_:)(v47);
                        swift_bridgeObjectRelease();
                        sub_1001AB354();
                        swift_allocError();
                        *(void *)uint64_t v48 = 0;
                        *(void *)(v48 + 8) = 0xE000000000000000;
                        *(unsigned char *)(v48 + 16) = 1;
                        swift_willThrow();
                        sub_10001CFB8(a1, a2);
                        sub_10001CFB8(v61, v65);
                        sub_10001CFB8(v66, v62);
                        unint64_t v50 = v63;
                        uint64_t v49 = v64;
                        goto LABEL_66;
                      }
                      sub_10001CFB8(a1, a2);
                      sub_10001CFB8(v61, v65);
                      sub_10001CFB8(v66, v62);
                      sub_10001CFB8(v64, v63);
                      sub_10001CFB8(v67, v10);
                      uint64_t result = v60 | (v59 << 32);
                      break;
                    case 2uLL:
                      uint64_t v36 = *(void *)(v61 + 16);
                      uint64_t v35 = *(void *)(v61 + 24);
                      BOOL v8 = __OFSUB__(v35, v36);
                      uint64_t v34 = v35 - v36;
                      if (!v8) {
                        goto LABEL_37;
                      }
                      goto LABEL_89;
                    case 3uLL:
                      goto LABEL_49;
                    default:
                      uint64_t v34 = BYTE6(v15);
                      goto LABEL_37;
                  }
                  break;
                case 2uLL:
                  uint64_t v33 = *(void *)(v66 + 16);
                  uint64_t v32 = *(void *)(v66 + 24);
                  BOOL v8 = __OFSUB__(v32, v33);
                  uint64_t v31 = v32 - v33;
                  if (!v8) {
                    goto LABEL_31;
                  }
                  goto LABEL_87;
                case 3uLL:
                  goto LABEL_49;
                default:
                  uint64_t v31 = BYTE6(v62);
                  goto LABEL_31;
              }
              break;
            case 2uLL:
              uint64_t v30 = *(void *)(v64 + 16);
              uint64_t v29 = *(void *)(v64 + 24);
              BOOL v8 = __OFSUB__(v29, v30);
              uint64_t v28 = v29 - v30;
              if (!v8) {
                goto LABEL_25;
              }
              goto LABEL_85;
            case 3uLL:
              goto LABEL_49;
            default:
              uint64_t v28 = BYTE6(v63);
              goto LABEL_25;
          }
          break;
        case 2uLL:
          uint64_t v27 = *(void *)(v67 + 16);
          uint64_t v26 = *(void *)(v67 + 24);
          BOOL v8 = __OFSUB__(v26, v27);
          uint64_t v19 = v26 - v27;
          if (!v8) {
            goto LABEL_19;
          }
          goto LABEL_75;
        case 3uLL:
          goto LABEL_49;
        default:
          uint64_t v19 = BYTE6(v10);
          goto LABEL_19;
      }
      return result;
    case 2uLL:
      uint64_t v7 = *(void *)(a1 + 16);
      uint64_t v6 = *(void *)(a1 + 24);
      BOOL v8 = __OFSUB__(v6, v7);
      uint64_t v5 = v6 - v7;
      if (!v8) {
        goto LABEL_6;
      }
      goto LABEL_73;
    case 3uLL:
      goto LABEL_12;
    default:
      uint64_t v5 = BYTE6(a2);
      goto LABEL_6;
  }
}

ValueMetadata *type metadata accessor for LocalFindableAccessoryFirmwareVersionNumber()
{
  return &type metadata for LocalFindableAccessoryFirmwareVersionNumber;
}

unint64_t sub_100BBBF1C()
{
  unint64_t result = qword_10165A8D0;
  if (!qword_10165A8D0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10165A8D0);
  }
  return result;
}

uint64_t sub_100BBBF70(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 13388 && a2 == 0xE200000000000000;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 21570 && a2 == 0xE200000000000000 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 21581 && a2 == 0xE200000000000000 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else if (a1 == 12364 && a2 == 0xE200000000000000)
  {
    swift_bridgeObjectRelease();
    return 3;
  }
  else
  {
    char v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v6) {
      return 3;
    }
    else {
      return 4;
    }
  }
}

uint64_t sub_100BBC0CC(void *a1)
{
  uint64_t v3 = sub_10000588C(&qword_10165A8D8);
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  char v6 = (char *)&v10 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10001CD44(a1, a1[3]);
  sub_100BBC2C8();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v1) {
    return _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)a1);
  }
  char v14 = 0;
  unsigned int v7 = KeyedDecodingContainer.decode(_:forKey:)();
  char v13 = 1;
  uint64_t v8 = KeyedDecodingContainer.decode(_:forKey:)();
  char v12 = 2;
  KeyedDecodingContainer.decode(_:forKey:)();
  char v11 = 3;
  KeyedDecodingContainer.decode(_:forKey:)();
  (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)a1);
  return v7 | (unint64_t)(v8 << 32);
}

unint64_t sub_100BBC2C8()
{
  unint64_t result = qword_10165A8E0;
  if (!qword_10165A8E0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10165A8E0);
  }
  return result;
}

unsigned char *storeEnumTagSinglePayload for LocalFindableAccessoryFirmwareVersionNumber.CodingKeys(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 3 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 3) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFD) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFC)
  {
    unsigned int v6 = ((a2 - 253) >> 8) + 1;
    *unint64_t result = a2 + 3;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x100BBC3E8);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 3;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for LocalFindableAccessoryFirmwareVersionNumber.CodingKeys()
{
  return &type metadata for LocalFindableAccessoryFirmwareVersionNumber.CodingKeys;
}

unint64_t sub_100BBC424()
{
  unint64_t result = qword_10165A8F0;
  if (!qword_10165A8F0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10165A8F0);
  }
  return result;
}

unint64_t sub_100BBC47C()
{
  unint64_t result = qword_10165A8F8;
  if (!qword_10165A8F8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10165A8F8);
  }
  return result;
}

unint64_t sub_100BBC4D4()
{
  unint64_t result = qword_10165A900;
  if (!qword_10165A900)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10165A900);
  }
  return result;
}

uint64_t sub_100BBC528@<X0>(unint64_t a1@<X8>)
{
  BOOL v2 = v1;
  uint64_t v4 = sub_10000588C(&qword_101638CF0);
  uint64_t v5 = __chkstk_darwin(v4 - 8);
  unsigned int v7 = (char *)&v50 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = __chkstk_darwin(v5);
  Swift::String v53 = (void (*)(char *, unint64_t, unint64_t))((char *)&v50 - v9);
  uint64_t v10 = __chkstk_darwin(v8);
  uint64_t v12 = (uint64_t)&v50 - v11;
  __chkstk_darwin(v10);
  Swift::String v52 = (void (*)(unint64_t, uint64_t, unint64_t))((char *)&v50 - v13);
  unint64_t v14 = type metadata accessor for UUID();
  unint64_t v15 = *(void *)(v14 - 8);
  uint64_t v16 = __chkstk_darwin(v14);
  unint64_t v18 = (char *)&v50 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v16);
  uint64_t v20 = (char *)&v50 - v19;
  id v54 = v2;
  id v21 = [v2 data];
  unint64_t v22 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
  unint64_t v24 = v23;

  switch(v24 >> 62)
  {
    case 1uLL:
      uint64_t v27 = HIDWORD(v22);
      sub_10001CFB8(v22, v24);
      LODWORD(v25) = HIDWORD(v22) - v22;
      if (__OFSUB__(HIDWORD(v22), v22)) {
        goto LABEL_53;
      }
      unint64_t v25 = (int)v25;
      if ((int)v25 == 16) {
        goto LABEL_12;
      }
      goto LABEL_6;
    case 2uLL:
      Swift::String v51 = v20;
      uint64_t v20 = v18;
      unint64_t v18 = (char *)v12;
      uint64_t v12 = (uint64_t)v7;
      unint64_t v26 = v14;
      unint64_t v14 = v15;
      unint64_t v15 = a1;
      a1 = *(void *)(v22 + 16);
      uint64_t v27 = *(void *)(v22 + 24);
      sub_10001CFB8(v22, v24);
      unint64_t v25 = v27 - a1;
      if (__OFSUB__(v27, a1))
      {
        __break(1u);
LABEL_53:
        __break(1u);
LABEL_54:
        __break(1u);
LABEL_55:
        unint64_t v18 = (char *)sub_100BBD434(v18);
LABEL_18:
        unint64_t v37 = *((void *)v18 + 2);
        if (v37 < 3)
        {
          __break(1u);
LABEL_57:
          __break(1u);
LABEL_58:
          __break(1u);
LABEL_59:
          unint64_t v18 = (char *)sub_100BBD434(v18);
LABEL_45:
          unint64_t v49 = *((void *)v18 + 2);
          if (v49 >= 3)
          {
            v18[34] = 0;
            if (v49 != 3)
            {
              v18[35] = 0;
              goto LABEL_48;
            }
LABEL_63:
            __break(1u);
LABEL_64:
            __break(1u);
LABEL_65:
            __break(1u);
          }
          __break(1u);
LABEL_61:
          __break(1u);
        }
        else
        {
          v18[34] = v27;
          if (v37 != 3)
          {
            v18[35] = BYTE1(v27);
LABEL_48:
            sub_10001CFB8(v27, v15);
            v56[0] = v18;
            goto LABEL_49;
          }
        }
        __break(1u);
        goto LABEL_63;
      }
      a1 = v15;
      unint64_t v15 = v14;
      unint64_t v14 = v26;
      unsigned int v7 = (char *)v12;
      uint64_t v12 = (uint64_t)v18;
      unint64_t v18 = v20;
      uint64_t v20 = v51;
      if (v25 != 16)
      {
LABEL_6:
        if (v25 == 4)
        {
          Swift::String v51 = v7;
          Swift::String v52 = (void (*)(unint64_t, uint64_t, unint64_t))a1;
          unint64_t v22 = (unint64_t)v53;
          UUID.init(uuidString:)();
          unint64_t v24 = v15 + 48;
          uint64_t v28 = *(void **)(v15 + 48);
          if (((unsigned int (*)(unint64_t, uint64_t, unint64_t))v28)(v22, 1, v14) != 1)
          {
            uint64_t v27 = v15;
            uint64_t v20 = (char *)(v15 + 32);
            Swift::String v53 = *(void (**)(char *, unint64_t, unint64_t))(v15 + 32);
            v53(v18, v22, v14);
            Swift::String v55 = (void *)UUID.bytes.getter();
            id v29 = [v54 data];
            uint64_t v30 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
            a1 = v31;

            id v54 = v28;
            switch(a1 >> 62)
            {
              case 1uLL:
                unint64_t v22 = (int)v30;
                uint64_t v12 = v30 >> 32;
                if (v30 >> 32 < (int)v30) {
                  goto LABEL_57;
                }
                swift_retain();
                sub_100BBD470((int)v30, v30 >> 32, a1 & 0x3FFFFFFFFFFFFFFFLL, (uint64_t)&v55, (uint64_t (*)(uint64_t, uint64_t, uint64_t))sub_100BBD118);
                sub_10001CFB8(v30, a1);
                break;
              case 2uLL:
                uint64_t v41 = *(void *)(v30 + 16);
                uint64_t v42 = *(void *)(v30 + 24);
                swift_retain();
                swift_retain();
                sub_100BBD470(v41, v42, a1 & 0x3FFFFFFFFFFFFFFFLL, (uint64_t)&v55, (uint64_t (*)(uint64_t, uint64_t, uint64_t))sub_100BBD118);
                swift_release();
                swift_release();
                break;
              case 3uLL:
                memset(v56, 0, 14);
                uint64_t v32 = (char *)v56;
                goto LABEL_38;
              default:
                v56[0] = v30;
                LOWORD(v56[1]) = a1;
                BYTE2(v56[1]) = BYTE2(a1);
                BYTE3(v56[1]) = BYTE3(a1);
                BYTE4(v56[1]) = BYTE4(a1);
                BYTE5(v56[1]) = BYTE5(a1);
                uint64_t v32 = (char *)v56 + BYTE6(a1);
LABEL_38:
                sub_100BBD118(v56, (uint64_t)v32, &v55);
                break;
            }
            sub_10001CFB8(v30, a1);
            swift_bridgeObjectRetain();
            Swift::String v43 = v51;
            UUID.init(bytes:)();
            int v44 = ((uint64_t (*)(char *, uint64_t, unint64_t))v54)(v43, 1, v14);
            unint64_t v22 = (unint64_t)v52;
            if (v44 != 1)
            {
              (*(void (**)(char *, unint64_t))(v15 + 8))(v18, v14);
              v53((char *)v22, (unint64_t)v43, v14);
              return swift_bridgeObjectRelease();
            }
            goto LABEL_68;
          }
          __break(1u);
LABEL_67:
          __break(1u);
LABEL_68:
          __break(1u);
LABEL_69:
          __break(1u);
LABEL_70:
          sub_10001CFB8(v22, v24);
LABEL_71:
          _assertionFailure(_:_:file:line:flags:)();
          __break(1u);
          JUMPOUT(0x100BBD020);
        }
        if (v25 != 2) {
          goto LABEL_71;
        }
        unint64_t v22 = (unint64_t)v52;
        UUID.init(uuidString:)();
        unint64_t v24 = v15 + 48;
        Swift::String v53 = *(void (**)(char *, unint64_t, unint64_t))(v15 + 48);
        if (((unsigned int (*)(unint64_t, uint64_t, unint64_t))v53)(v22, 1, v14) == 1) {
          goto LABEL_67;
        }
        uint64_t v35 = (void *)(v15 + 32);
        uint64_t v34 = *(void (**)(unint64_t, uint64_t, unint64_t))(v15 + 32);
        Swift::String v51 = (char *)v15;
        Swift::String v52 = v34;
        v34((unint64_t)v20, v22, v14);
        unint64_t v18 = (char *)UUID.bytes.getter();
        v56[0] = v18;
        unint64_t v22 = (unint64_t)[v54 data];
        uint64_t v27 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
        unint64_t v15 = v36;

        switch(v15 >> 62)
        {
          case 1uLL:
            id v54 = v35;
            uint64_t v48 = v12;
            unint64_t v22 = (int)v27;
            uint64_t v12 = v27 >> 32;
            if (v27 >> 32 < (int)v27) {
              goto LABEL_58;
            }
            swift_retain();
            sub_100BBD470((int)v27, v27 >> 32, v15 & 0x3FFFFFFFFFFFFFFFLL, (uint64_t)v56, (uint64_t (*)(uint64_t, uint64_t, uint64_t))sub_100BBD060);
            sub_10001CFB8(v27, v15);
            sub_10001CFB8(v27, v15);
            uint64_t v12 = v48;
            break;
          case 2uLL:
            unint64_t v22 = v15 & 0x3FFFFFFFFFFFFFFFLL;
            id v54 = v35;
            uint64_t v45 = v12;
            uint64_t v46 = *(void *)(v27 + 16);
            uint64_t v47 = *(void *)(v27 + 24);
            swift_retain();
            swift_retain();
            sub_100BBD470(v46, v47, v15 & 0x3FFFFFFFFFFFFFFFLL, (uint64_t)v56, (uint64_t (*)(uint64_t, uint64_t, uint64_t))sub_100BBD060);
            uint64_t v12 = v45;
            swift_release();
            swift_release();
            sub_10001CFB8(v27, v15);
            break;
          case 3uLL:
            if (swift_isUniquelyReferenced_nonNull_native()) {
              goto LABEL_45;
            }
            goto LABEL_59;
          default:
            if (swift_isUniquelyReferenced_nonNull_native()) {
              goto LABEL_18;
            }
            goto LABEL_55;
        }
LABEL_49:
        swift_bridgeObjectRetain();
        UUID.init(bytes:)();
        if (((unsigned int (*)(uint64_t, uint64_t, unint64_t))v53)(v12, 1, v14) != 1)
        {
          (*((void (**)(char *, unint64_t))v51 + 1))(v20, v14);
          v52(a1, v12, v14);
          return swift_bridgeObjectRelease();
        }
        goto LABEL_69;
      }
LABEL_12:
      unint64_t v22 = (unint64_t)[v54 data];
      uint64_t v27 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
      unint64_t v14 = v33;

      switch(v14 >> 62)
      {
        case 1uLL:
          a1 = (int)v27;
          uint64_t v12 = (v27 >> 32) - (int)v27;
          if (v27 >> 32 < (int)v27) {
            goto LABEL_54;
          }
          sub_1000361E0(v27, v14);
          if (__DataStorage._bytes.getter() && __OFSUB__((int)v27, __DataStorage._offset.getter())) {
            goto LABEL_65;
          }
          __DataStorage._length.getter();
          sub_100BBD248();
          sub_10001CFB8(v27, v14);
          break;
        case 2uLL:
          uint64_t v38 = *(void *)(v27 + 16);
          uint64_t v39 = *(void *)(v27 + 24);
          swift_retain();
          swift_retain();
          if (__DataStorage._bytes.getter() && __OFSUB__(v38, __DataStorage._offset.getter())) {
            goto LABEL_64;
          }
          if (__OFSUB__(v39, v38)) {
            goto LABEL_61;
          }
          __DataStorage._length.getter();
          sub_100BBD248();
          swift_release();
          swift_release();
          break;
        case 3uLL:
          memset(v56, 0, 14);
          goto LABEL_33;
        default:
          v56[0] = v27;
          LOWORD(v56[1]) = v14;
          BYTE2(v56[1]) = BYTE2(v14);
          BYTE3(v56[1]) = BYTE3(v14);
          BYTE4(v56[1]) = BYTE4(v14);
          BYTE5(v56[1]) = BYTE5(v14);
LABEL_33:
          sub_100BBD248();
          return sub_10001CFB8(v27, v14);
      }
      return sub_10001CFB8(v27, v14);
    case 3uLL:
      goto LABEL_70;
    default:
      sub_10001CFB8(v22, v24);
      unint64_t v25 = BYTE6(v24);
      if (BYTE6(v24) == 16) {
        goto LABEL_12;
      }
      goto LABEL_6;
  }
}

uint64_t sub_100BBD060(unsigned char *a1, uint64_t a2, void **a3)
{
  uint64_t v4 = a1;
  char v5 = *a1;
  uint64_t v6 = *a3;
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  *a3 = v6;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0) {
    uint64_t v6 = sub_100BBD434(v6);
  }
  if (v6[2] < 3uLL)
  {
    __break(1u);
  }
  else
  {
    *((unsigned char *)v6 + 34) = v5;
    *a3 = v6;
    LOBYTE(v4) = v4[1];
    uint64_t result = swift_isUniquelyReferenced_nonNull_native();
    *a3 = v6;
    if (result) {
      goto LABEL_5;
    }
  }
  uint64_t result = (uint64_t)sub_100BBD434(v6);
  uint64_t v6 = (void *)result;
LABEL_5:
  if (v6[2] < 4uLL)
  {
    __break(1u);
  }
  else
  {
    *((unsigned char *)v6 + 35) = (_BYTE)v4;
    *a3 = v6;
  }
  return result;
}

uint64_t sub_100BBD118(unsigned char *a1, uint64_t a2, void **a3)
{
  uint64_t v4 = a1;
  char v5 = *a1;
  uint64_t v6 = *a3;
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  *a3 = v6;
  if (isUniquelyReferenced_nonNull_native)
  {
    if (v6[2]) {
      goto LABEL_3;
    }
  }
  else
  {
    uint64_t v6 = sub_100BBD434(v6);
    if (v6[2])
    {
LABEL_3:
      *((unsigned char *)v6 + 32) = v5;
      *a3 = v6;
      char v5 = v4[1];
      char v8 = swift_isUniquelyReferenced_nonNull_native();
      *a3 = v6;
      if (v8) {
        goto LABEL_4;
      }
      goto LABEL_12;
    }
  }
  __break(1u);
LABEL_12:
  uint64_t v6 = sub_100BBD434(v6);
LABEL_4:
  if (v6[2] < 2uLL)
  {
    __break(1u);
  }
  else
  {
    *((unsigned char *)v6 + 33) = v5;
    *a3 = v6;
    char v5 = v4[2];
    char v9 = swift_isUniquelyReferenced_nonNull_native();
    *a3 = v6;
    if (v9) {
      goto LABEL_6;
    }
  }
  uint64_t v6 = sub_100BBD434(v6);
LABEL_6:
  if (v6[2] < 3uLL)
  {
    __break(1u);
  }
  else
  {
    *((unsigned char *)v6 + 34) = v5;
    *a3 = v6;
    LOBYTE(v4) = v4[3];
    uint64_t result = swift_isUniquelyReferenced_nonNull_native();
    *a3 = v6;
    if (result) {
      goto LABEL_8;
    }
  }
  uint64_t result = (uint64_t)sub_100BBD434(v6);
  uint64_t v6 = (void *)result;
LABEL_8:
  if (v6[2] < 4uLL)
  {
    __break(1u);
  }
  else
  {
    *((unsigned char *)v6 + 35) = (_BYTE)v4;
    *a3 = v6;
  }
  return result;
}

uint64_t sub_100BBD248()
{
  return UUID.init(uuid:)();
}

void *sub_100BBD2A0(void *a1)
{
  return sub_100A6EA38(0, a1[2], 0, a1);
}

uint64_t sub_100BBD2B4(unint64_t a1)
{
  return sub_100A700AC(0, *(void *)(a1 + 16), 0, a1);
}

uint64_t sub_100BBD2C8(unint64_t a1)
{
  return sub_100A702C8(0, *(void *)(a1 + 16), 0, a1);
}

uint64_t sub_100BBD2DC(unint64_t a1)
{
  if (a1 >> 62)
  {
    swift_bridgeObjectRetain();
    _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }

  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
}

void *sub_100BBD358(void *a1)
{
  return sub_100A70F2C(0, a1[2], 0, a1);
}

uint64_t sub_100BBD36C(unint64_t a1)
{
  return sub_100A716D4(0, *(void *)(a1 + 16), 0, a1);
}

void *sub_100BBD380(void *a1)
{
  return sub_100A714F4(0, a1[2], 0, a1);
}

void *sub_100BBD394(void *a1)
{
  return sub_100A71A78(0, a1[2], 0, a1);
}

uint64_t sub_100BBD3A8(unint64_t a1)
{
  return sub_100A71AD4(0, *(void *)(a1 + 16), 0, a1);
}

uint64_t sub_100BBD3BC(unint64_t a1)
{
  return sub_100A6F668(0, *(void *)(a1 + 16), 0, a1);
}

uint64_t sub_100BBD3D0(unint64_t a1)
{
  return sub_100A6F9A8(0, *(void *)(a1 + 16), 0, a1);
}

uint64_t sub_100BBD3E4(unint64_t a1)
{
  return sub_100A6F84C(0, *(void *)(a1 + 16), 0, a1);
}

uint64_t sub_100BBD3F8(unint64_t a1)
{
  return sub_100A6F780(0, *(void *)(a1 + 16), 0, a1);
}

uint64_t sub_100BBD40C(unint64_t a1)
{
  return sub_100A6F7A8(0, *(void *)(a1 + 16), 0, a1);
}

uint64_t sub_100BBD420(unint64_t a1)
{
  return sub_100A6F794(0, *(void *)(a1 + 16), 0, a1);
}

void *sub_100BBD434(void *a1)
{
  return sub_100A70C58(0, a1[2], 0, a1);
}

uint64_t sub_100BBD448(unint64_t a1)
{
  return sub_100A7278C(0, *(void *)(a1 + 16), 0, a1);
}

void *sub_100BBD45C(void *a1)
{
  return sub_100A72808(0, a1[2], 0, a1);
}

uint64_t sub_100BBD470(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(uint64_t, uint64_t, uint64_t))
{
  uint64_t result = __DataStorage._bytes.getter();
  uint64_t v10 = result;
  if (result)
  {
    uint64_t result = __DataStorage._offset.getter();
    if (__OFSUB__(a1, result))
    {
LABEL_13:
      __break(1u);
      return result;
    }
    v10 += a1 - result;
  }
  BOOL v11 = __OFSUB__(a2, a1);
  uint64_t v12 = a2 - a1;
  if (v11)
  {
    __break(1u);
    goto LABEL_13;
  }
  uint64_t v13 = __DataStorage._length.getter();
  if (v13 >= v12) {
    uint64_t v14 = v12;
  }
  else {
    uint64_t v14 = v13;
  }
  uint64_t v15 = v10 + v14;
  if (v10) {
    uint64_t v16 = v15;
  }
  else {
    uint64_t v16 = 0;
  }
  return a5(v10, v16, a4);
}

uint64_t sub_100BBD51C()
{
  uint64_t v0 = type metadata accessor for Logger();
  sub_10001E384(v0, qword_10170EAA8);
  sub_100010324(v0, (uint64_t)qword_10170EAA8);
  return Logger.init(subsystem:category:)();
}

uint64_t sub_100BBD5A0()
{
  uint64_t v0 = type metadata accessor for Logger();
  sub_10001E384(v0, qword_10165A908);
  uint64_t v1 = sub_100010324(v0, (uint64_t)qword_10165A908);
  if (qword_101636FB8 != -1) {
    swift_once();
  }
  uint64_t v2 = sub_100010324(v0, (uint64_t)qword_10170EAA8);
  int v3 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v0 - 8) + 16);

  return v3(v1, v2, v0);
}

uint64_t sub_100BBD668(uint64_t a1)
{
  v2[39] = a1;
  v2[40] = v1;
  sub_10000588C(&qword_10164DBB0);
  v2[41] = swift_task_alloc();
  uint64_t v3 = type metadata accessor for Connection.TransactionMode();
  v2[42] = v3;
  v2[43] = *(void *)(v3 - 8);
  v2[44] = swift_task_alloc();
  v2[45] = sub_10000588C((uint64_t *)&unk_10166EAF0);
  v2[46] = swift_task_alloc();
  sub_10000588C(&qword_10163CF20);
  v2[47] = swift_task_alloc();
  uint64_t v4 = type metadata accessor for DeviceEvent(0);
  v2[48] = v4;
  uint64_t v5 = *(void *)(v4 - 8);
  v2[49] = v5;
  v2[50] = *(void *)(v5 + 64);
  v2[51] = swift_task_alloc();
  v2[52] = swift_task_alloc();
  v2[53] = swift_task_alloc();
  v2[54] = swift_task_alloc();
  v2[55] = swift_task_alloc();
  v2[56] = swift_task_alloc();
  sub_10000588C(&qword_10165AA20);
  v2[57] = swift_task_alloc();
  v2[58] = swift_task_alloc();
  sub_10000588C(&qword_101638CF0);
  v2[59] = swift_task_alloc();
  v2[60] = swift_task_alloc();
  v2[61] = swift_task_alloc();
  uint64_t v6 = type metadata accessor for JSONDecoder.DateDecodingStrategy();
  v2[62] = v6;
  v2[63] = *(void *)(v6 - 8);
  v2[64] = swift_task_alloc();
  uint64_t v7 = type metadata accessor for Response();
  v2[65] = v7;
  v2[66] = *(void *)(v7 - 8);
  v2[67] = swift_task_alloc();
  v2[68] = swift_task_alloc();
  v2[69] = *(void *)(type metadata accessor for LocalFindableAccessoryRecord() - 8);
  v2[70] = swift_task_alloc();
  uint64_t v8 = type metadata accessor for UUID();
  v2[71] = v8;
  v2[72] = *(void *)(v8 - 8);
  v2[73] = swift_task_alloc();
  v2[74] = swift_task_alloc();
  return _swift_task_switch(sub_100BBDA78, v1, 0);
}

uint64_t sub_100BBDA78()
{
  if (qword_101636FC0 != -1) {
    swift_once();
  }
  uint64_t v1 = type metadata accessor for Logger();
  v0[75] = v1;
  v0[76] = sub_100010324(v1, (uint64_t)qword_10165A908);
  uint64_t v2 = Logger.logObject.getter();
  os_log_type_t v3 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v2, v3))
  {
    uint64_t v4 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v4 = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, v3, "Preparing LocalFindable location fetching.", v4, 2u);
    swift_slowDealloc();
  }
  uint64_t v5 = v0[39];

  int64_t v6 = *(void *)(v5 + 16);
  if (v6)
  {
    id v7 = [self currentDevice];
    if (v7)
    {
      uint64_t v8 = v7;
      id v9 = [v7 uniqueDeviceIdentifier];

      if (v9)
      {
        uint64_t v10 = v0[72];
        uint64_t v11 = v0[69];
        uint64_t v12 = v0[39];
        uint64_t v13 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        uint64_t v41 = v14;
        uint64_t v42 = v13;

        uint64_t v45 = _swiftEmptyArrayStorage;
        sub_1000B7034(0, v6, 0);
        uint64_t v15 = v12 + ((*(unsigned __int8 *)(v11 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v11 + 80));
        uint64_t v16 = *(void *)(v11 + 72);
        uint64_t v17 = (void (**)(uint64_t, uint64_t, uint64_t))(v10 + 16);
        unint64_t v18 = _swiftEmptyArrayStorage;
        uint64_t v43 = v16;
        do
        {
          uint64_t v19 = v0[74];
          uint64_t v20 = v0[71];
          uint64_t v21 = v0[70];
          sub_100BC6D18(v15, v21, (uint64_t (*)(void))type metadata accessor for LocalFindableAccessoryRecord);
          unint64_t v22 = *v17;
          v0[84] = *v17;
          v0[85] = (v10 + 16) & 0xFFFFFFFFFFFFLL | 0xE3BA000000000000;
          v22(v19, v21, v20);
          sub_100BC72A8(v21, (uint64_t (*)(void))type metadata accessor for LocalFindableAccessoryRecord);
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
          {
            sub_1000B7034(0, v18[2] + 1, 1);
            unint64_t v18 = v45;
          }
          unint64_t v24 = v18[2];
          unint64_t v23 = v18[3];
          if (v24 >= v23 >> 1)
          {
            sub_1000B7034(v23 > 1, v24 + 1, 1);
            unint64_t v18 = v45;
          }
          uint64_t v25 = v0[74];
          uint64_t v26 = v0[71];
          void v18[2] = v24 + 1;
          uint64_t v27 = (char *)v18
              + ((*(unsigned __int8 *)(v10 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v10 + 80));
          uint64_t v28 = *(void *)(v10 + 72);
          v0[86] = v28;
          id v29 = &v27[v28 * v24];
          uint64_t v30 = *(void (**)(char *, uint64_t, uint64_t))(v10 + 32);
          v0[87] = v30;
          v0[88] = (v10 + 32) & 0xFFFFFFFFFFFFLL | 0x48D8000000000000;
          v30(v29, v25, v26);
          uint64_t v45 = v18;
          v15 += v43;
          --v6;
        }
        while (v6);
        uint64_t v38 = v0[40];
        sub_10109BB90(v42, v41, (uint64_t)v18, (uint64_t)(v0 + 2));
        uint64_t v39 = *(void *)(v38 + 112);
        int v44 = (uint64_t (*)(uint64_t, uint64_t))((char *)&dword_101669388 + dword_101669388);
        swift_retain();
        Swift::String v40 = (void *)swift_task_alloc();
        v0[77] = v40;
        void *v40 = v0;
        v40[1] = sub_100BBE004;
        return v44((uint64_t)(v0 + 2), v39);
      }
    }
    unint64_t v31 = Logger.logObject.getter();
    os_log_type_t v32 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v31, v32))
    {
      unint64_t v33 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)unint64_t v33 = 0;
      _os_log_impl((void *)&_mh_execute_header, v31, v32, "Unable to get device identifier", v33, 2u);
      swift_slowDealloc();
    }

    char v34 = 0;
  }
  else
  {
    char v34 = 1;
  }
  sub_100BC6D80();
  swift_allocError();
  *uint64_t v35 = v34;
  swift_willThrow();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  unint64_t v36 = (uint64_t (*)(void))v0[1];
  return v36();
}

uint64_t sub_100BBE004(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = (void *)*v4;
  v5[78] = a1;
  v5[79] = a2;
  v5[80] = a3;
  swift_task_dealloc();
  if (v3)
  {
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    int64_t v6 = (uint64_t (*)(void))v5[1];
    return v6();
  }
  else
  {
    id v9 = (uint64_t (*)(void))((char *)&dword_101644070 + dword_101644070);
    uint64_t v8 = (void *)swift_task_alloc();
    v5[81] = v8;
    *uint64_t v8 = v5;
    v8[1] = sub_100BBE2C4;
    return v9(0);
  }
}

uint64_t sub_100BBE2C4(uint64_t a1)
{
  uint64_t v3 = (void *)*v2;
  uint64_t v4 = (void *)*v2;
  v3[82] = a1;
  v3[83] = v1;
  swift_task_dealloc();
  if (v1)
  {
    uint64_t v5 = v3[40];
    return _swift_task_switch(sub_100BBE584, v5, 0);
  }
  else
  {
    int64_t v6 = (void *)swift_task_alloc();
    v3[89] = v6;
    *int64_t v6 = v4;
    v6[1] = sub_100BBE458;
    uint64_t v7 = v3[80];
    uint64_t v8 = v3[79];
    uint64_t v9 = v3[78];
    uint64_t v10 = v3[68];
    return sub_100419D48(v10, v9, v8, v7);
  }
}

uint64_t sub_100BBE458()
{
  uint64_t v2 = *v1;
  *(void *)(*v1 + 720) = v0;
  swift_task_dealloc();
  uint64_t v3 = *(void *)(v2 + 320);
  if (v0) {
    uint64_t v4 = sub_100BC304C;
  }
  else {
    uint64_t v4 = sub_100BBE728;
  }
  return _swift_task_switch(v4, v3, 0);
}

uint64_t sub_100BBE584()
{
  sub_100037A24(v0[78], v0[79]);
  swift_bridgeObjectRelease();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = (uint64_t (*)(void))v0[1];
  return v1();
}

uint64_t sub_100BBE728()
{
  uint64_t v1 = (void *)Response.response.getter();
  id v2 = [v1 statusCode];

  if (v2 != (id)200)
  {
    (*(void (**)(void, void, void))(v0[66] + 16))(v0[67], v0[68], v0[65]);
    uint64_t v15 = Logger.logObject.getter();
    os_log_type_t v16 = static os_log_type_t.error.getter();
    BOOL v17 = os_log_type_enabled(v15, v16);
    uint64_t v18 = v0[68];
    uint64_t v19 = v0[67];
    uint64_t v20 = v0[66];
    uint64_t v21 = v0[65];
    if (v17)
    {
      uint64_t v36 = v0[78];
      unint64_t v37 = v0[79];
      unint64_t v22 = (uint8_t *)swift_slowAlloc();
      *(_DWORD *)unint64_t v22 = 134217984;
      uint64_t v23 = v21;
      unint64_t v24 = (void *)Response.response.getter();
      id v25 = [v24 statusCode];

      uint64_t v26 = *(void (**)(uint64_t, uint64_t))(v20 + 8);
      v26(v19, v23);
      v0[34] = v25;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      _os_log_impl((void *)&_mh_execute_header, v15, v16, "Failed to fetch: %ld", v22, 0xCu);
      swift_slowDealloc();

      sub_100BC6D80();
      swift_allocError();
      unsigned char *v27 = 2;
      swift_willThrow();
      swift_release();
      sub_100037A24(v36, v37);
      swift_bridgeObjectRelease();
      v26(v18, v23);
    }
    else
    {
      uint64_t v28 = *(void (**)(uint64_t, uint64_t))(v20 + 8);
      unint64_t v29 = v0[79];
      uint64_t v30 = v0[78];
      v28(v0[67], v0[65]);

      sub_100BC6D80();
      swift_allocError();
      *unint64_t v31 = 2;
      swift_willThrow();
      swift_release();
      sub_100037A24(v30, v29);
      swift_bridgeObjectRelease();
      v28(v18, v21);
    }
LABEL_9:
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    os_log_type_t v32 = (uint64_t (*)(void))v0[1];
    return v32();
  }
  uint64_t v3 = Logger.logObject.getter();
  os_log_type_t v4 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v3, v4))
  {
    uint64_t v5 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v5 = 0;
    _os_log_impl((void *)&_mh_execute_header, v3, v4, "Successful LocalFindable location fetching.", v5, 2u);
    swift_slowDealloc();
  }
  uint64_t v6 = v0[90];
  uint64_t v8 = v0[63];
  uint64_t v7 = (void *)v0[64];
  uint64_t v9 = v0[62];

  type metadata accessor for JSONDecoder();
  swift_allocObject();
  v0[91] = JSONDecoder.init()();
  *uint64_t v7 = sub_100BC3200;
  v7[1] = 0;
  (*(void (**)(void *, void, uint64_t))(v8 + 104))(v7, enum case for JSONDecoder.DateDecodingStrategy.custom(_:), v9);
  dispatch thunk of JSONDecoder.dateDecodingStrategy.setter();
  uint64_t v10 = Response.body.getter();
  unint64_t v12 = v11;
  sub_100BC6DD4();
  dispatch thunk of JSONDecoder.decode<A>(_:from:)();
  v0[92] = v6;
  if (v6)
  {
    unint64_t v13 = v0[79];
    uint64_t v14 = v0[78];
    (*(void (**)(void, void))(v0[66] + 8))(v0[68], v0[65]);
    sub_10001CFB8(v10, v12);
    swift_release();
    swift_release();
    sub_100037A24(v14, v13);
    swift_bridgeObjectRelease();
    goto LABEL_9;
  }
  sub_10001CFB8(v10, v12);
  v0[93] = v0[23];
  char v34 = (void *)swift_task_alloc();
  v0[94] = v34;
  *char v34 = v0;
  v34[1] = sub_100BBED04;
  uint64_t v35 = v0[61];
  return sub_100BC3218(v35);
}

uint64_t sub_100BBED04()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 320);
  swift_task_dealloc();
  return _swift_task_switch(sub_100BBEE14, v1, 0);
}

uint64_t sub_100BBEE14()
{
  uint64_t v83 = (void *)(v0 + 64);
  uint64_t v85 = (long long *)(v0 + 104);
  size_t v84 = (uint64_t *)(v0 + 280);
  uint64_t v1 = sub_100BC3B2C(*(void *)(v0 + 744), *(void *)(v0 + 312));
  *(void *)(v0 + 760) = v1;
  swift_bridgeObjectRelease();
  char v2 = *(unsigned char *)(v1 + 32);
  *(unsigned char *)(v0 + 203) = v2;
  uint64_t v3 = 1 << v2;
  if (v3 < 64) {
    uint64_t v4 = ~(-1 << v3);
  }
  else {
    uint64_t v4 = -1;
  }
  unint64_t v5 = v4 & *(void *)(v1 + 64);
  *(_DWORD *)(v0 + 204) = enum case for Connection.TransactionMode.deferred(_:);
  *(void *)(v0 + 768) = *(void *)(v0 + 736);
  swift_bridgeObjectRetain();
  int64_t v6 = 0;
  while (1)
  {
    if (v5)
    {
      unint64_t v10 = __clz(__rbit64(v5));
      v5 &= v5 - 1;
      unint64_t v11 = v10 | (v6 << 6);
      uint64_t v12 = *(void *)(v0 + 760);
LABEL_8:
      uint64_t v13 = *(void *)(v0 + 456);
      uint64_t v14 = *(void *)(v0 + 392);
      (*(void (**)(uint64_t, unint64_t, void))(v0 + 672))(v13, *(void *)(v12 + 48) + *(void *)(v0 + 688) * v11, *(void *)(v0 + 568));
      uint64_t v15 = *(void *)(v12 + 56) + *(void *)(v14 + 72) * v11;
      uint64_t v16 = sub_10000588C(&qword_101649728);
      sub_100BC6D18(v15, v13 + *(int *)(v16 + 48), type metadata accessor for DeviceEvent);
      (*(void (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v16 - 8) + 56))(v13, 0, 1, v16);
      goto LABEL_15;
    }
    int64_t v17 = v6 + 1;
    if (__OFADD__(v6, 1))
    {
      __break(1u);
      goto LABEL_60;
    }
    int64_t v18 = (unint64_t)((1 << *(unsigned char *)(v0 + 203)) + 63) >> 6;
    if (v17 >= v18)
    {
      int64_t v21 = v6;
    }
    else
    {
      uint64_t v12 = *(void *)(v0 + 760);
      uint64_t v19 = v12 + 64;
      unint64_t v20 = *(void *)(v12 + 64 + 8 * v17);
      if (v20) {
        goto LABEL_12;
      }
      int64_t v21 = v6 + 1;
      if (v6 + 2 < v18)
      {
        unint64_t v20 = *(void *)(v19 + 8 * (v6 + 2));
        if (v20)
        {
          int64_t v17 = v6 + 2;
LABEL_12:
          unint64_t v5 = (v20 - 1) & v20;
          unint64_t v11 = __clz(__rbit64(v20)) + (v17 << 6);
          int64_t v6 = v17;
          goto LABEL_8;
        }
        int64_t v21 = v6 + 2;
        if (v6 + 3 < v18)
        {
          unint64_t v20 = *(void *)(v19 + 8 * (v6 + 3));
          if (v20)
          {
            int64_t v17 = v6 + 3;
            goto LABEL_12;
          }
          int64_t v17 = v6 + 4;
          int64_t v21 = v6 + 3;
          if (v6 + 4 < v18)
          {
            unint64_t v20 = *(void *)(v19 + 8 * v17);
            if (v20) {
              goto LABEL_12;
            }
            int64_t v21 = v18 - 1;
            int64_t v50 = v18 - 5;
            while (v50 != v6)
            {
              unint64_t v20 = *(void *)(v12 + 104 + 8 * v6++);
              if (v20)
              {
                int64_t v17 = v6 + 4;
                goto LABEL_12;
              }
            }
          }
        }
      }
    }
    uint64_t v22 = *(void *)(v0 + 456);
    uint64_t v23 = sub_10000588C(&qword_101649728);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v23 - 8) + 56))(v22, 1, 1, v23);
    unint64_t v5 = 0;
    int64_t v6 = v21;
LABEL_15:
    *(void *)(v0 + 784) = v5;
    *(void *)(v0 + 776) = v6;
    uint64_t v24 = *(void *)(v0 + 464);
    sub_10001D608(*(void *)(v0 + 456), v24, &qword_10165AA20);
    uint64_t v25 = sub_10000588C(&qword_101649728);
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v25 - 8) + 48))(v24, 1, v25) == 1) {
      break;
    }
    uint64_t v26 = *(void *)(v0 + 448);
    uint64_t v28 = *(void *)(v0 + 376);
    uint64_t v27 = *(void *)(v0 + 384);
    sub_100BC6CB0(*(void *)(v0 + 464) + *(int *)(v25 + 48), v26, type metadata accessor for DeviceEvent);
    sub_10001D074(v26 + *(int *)(v27 + 32), v28, &qword_10163CF20);
    uint64_t v29 = type metadata accessor for DeviceEvent.AttachmentInfo(0);
    int64_t v87 = v6;
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v29 - 8) + 48))(v28, 1, v29) == 1)
    {
      sub_10001DAB4(*(void *)(v0 + 376), &qword_10163CF20);
      uint64_t v30 = 1;
    }
    else
    {
      uint64_t v31 = *(void *)(v0 + 376);
      (*(void (**)(void, uint64_t, void))(v0 + 672))(*(void *)(v0 + 480), v31, *(void *)(v0 + 568));
      sub_100BC72A8(v31, type metadata accessor for DeviceEvent.AttachmentInfo);
      uint64_t v30 = 0;
    }
    uint64_t v32 = *(void *)(v0 + 576);
    uint64_t v33 = *(void *)(v0 + 568);
    uint64_t v34 = *(void *)(v0 + 480);
    uint64_t v35 = *(void *)(v0 + 488);
    uint64_t v36 = *(void *)(v0 + 360);
    uint64_t v37 = *(void *)(v0 + 368);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v32 + 56))(v34, v30, 1, v33);
    uint64_t v38 = v37 + *(int *)(v36 + 48);
    sub_10001D074(v34, v37, &qword_101638CF0);
    sub_10001D074(v35, v38, &qword_101638CF0);
    uint64_t v39 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v32 + 48);
    int v40 = v39(v37, 1, v33);
    uint64_t v41 = *(void *)(v0 + 568);
    if (v40 == 1)
    {
      sub_10001DAB4(*(void *)(v0 + 480), &qword_101638CF0);
      int64_t v6 = v87;
      if (v39(v38, 1, v41) != 1) {
        goto LABEL_41;
      }
      sub_10001DAB4(*(void *)(v0 + 368), &qword_101638CF0);
    }
    else
    {
      sub_10001D074(*(void *)(v0 + 368), *(void *)(v0 + 472), &qword_101638CF0);
      if (v39(v38, 1, v41) == 1)
      {
        uint64_t v60 = *(void *)(v0 + 576);
        uint64_t v61 = *(void *)(v0 + 568);
        uint64_t v62 = *(void *)(v0 + 472);
        sub_10001DAB4(*(void *)(v0 + 480), &qword_101638CF0);
        (*(void (**)(uint64_t, uint64_t))(v60 + 8))(v62, v61);
LABEL_41:
        sub_10001DAB4(*(void *)(v0 + 368), (uint64_t *)&unk_10166EAF0);
LABEL_42:
        uint64_t v63 = *(void *)(v0 + 448);
        uint64_t v65 = *(void *)(v0 + 424);
        uint64_t v64 = *(void *)(v0 + 432);
        sub_100BC6D18(v63, *(void *)(v0 + 440), type metadata accessor for DeviceEvent);
        sub_100BC6D18(v63, v64, type metadata accessor for DeviceEvent);
        sub_100BC6D18(v63, v65, type metadata accessor for DeviceEvent);
        uint64_t v66 = Logger.logObject.getter();
        os_log_type_t v67 = static os_log_type_t.error.getter();
        BOOL v68 = os_log_type_enabled(v66, v67);
        uint64_t v70 = *(void *)(v0 + 432);
        uint64_t v69 = *(void *)(v0 + 440);
        if (v68)
        {
          os_log_type_t v86 = v67;
          uint64_t v88 = v66;
          uint64_t v71 = swift_slowAlloc();
          *(void *)(v0 + 280) = swift_slowAlloc();
          *(_DWORD *)uint64_t v71 = 136446979;
          type metadata accessor for Date();
          sub_100BC7260((unint64_t *)&qword_101638DA0, (void (*)(uint64_t))&type metadata accessor for Date);
          uint64_t v72 = dispatch thunk of CustomStringConvertible.description.getter();
          *(void *)(v0 + 264) = sub_1008FA0F0(v72, v73, v84);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease();
          sub_100BC72A8(v69, type metadata accessor for DeviceEvent);
          *(_WORD *)(v71 + 12) = 2082;
          unint64_t v74 = 0xE800000000000000;
          uint64_t v75 = 0x6E776F6E6B6E752ELL;
          switch(*(unsigned char *)(v70 + 9))
          {
            case 1:
              uint64_t v75 = 0x7463656E6E6F632ELL;
              break;
            case 2:
              unint64_t v74 = 0xEB00000000746365;
              uint64_t v75 = 0x6E6E6F637369642ELL;
              break;
            case 3:
              unint64_t v74 = 0xE700000000000000;
              unsigned int v77 = 1953784110;
              goto LABEL_49;
            case 4:
              unint64_t v74 = 0xE700000000000000;
              unsigned int v77 = 1952801838;
LABEL_49:
              uint64_t v75 = v77 | 0x68636100000000;
              break;
            case 5:
              unint64_t v74 = 0xEF79627261654E64;
              uint64_t v75 = 0x657463657465642ELL;
              break;
            case 6:
              unint64_t v74 = 0xEC00000064657261;
              uint64_t v75 = 0x657070617369642ELL;
              break;
            case 7:
              unint64_t v74 = 0xE500000000000000;
              uint64_t v75 = 0x726961702ELL;
              break;
            default:
              break;
          }
          uint64_t v79 = *(void *)(v0 + 424);
          uint64_t v78 = *(void *)(v0 + 432);
          *(void *)(v0 + 296) = sub_1008FA0F0(v75, v74, v84);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease();
          sub_100BC72A8(v78, type metadata accessor for DeviceEvent);
          *(_WORD *)(v71 + 22) = 2160;
          *(void *)(v0 + 304) = 1752392040;
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          *(_WORD *)(v71 + 32) = 2081;
          type metadata accessor for BeaconIdentifier();
          sub_100BC7260((unint64_t *)&qword_101638B10, (void (*)(uint64_t))&type metadata accessor for UUID);
          uint64_t v80 = dispatch thunk of CustomStringConvertible.description.getter();
          *(void *)(v0 + 288) = sub_1008FA0F0(v80, v81, v84);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease();
          sub_100BC72A8(v79, type metadata accessor for DeviceEvent);
          _os_log_impl((void *)&_mh_execute_header, v88, v86, "Saving device event %{public}s, source: %{public}s, for beacon %{private,mask.hash}s.", (uint8_t *)v71, 0x2Au);
          swift_arrayDestroy();
          swift_slowDealloc();
          swift_slowDealloc();
        }
        else
        {
          uint64_t v76 = *(void *)(v0 + 424);
          sub_100BC72A8(*(void *)(v0 + 440), type metadata accessor for DeviceEvent);
          sub_100BC72A8(v70, type metadata accessor for DeviceEvent);
          sub_100BC72A8(v76, type metadata accessor for DeviceEvent);
        }
        if (qword_1016375E8 == -1)
        {
LABEL_55:
          swift_beginAccess();
          sub_10001D074((uint64_t)&xmmword_10166E8F0, (uint64_t)v85, (uint64_t *)&unk_101638D30);
          if (!*(void *)(v0 + 128))
          {
            __break(1u);
            JUMPOUT(0x100BBFB98);
          }
          sub_10001CEB0(v85, (uint64_t)v83);
          sub_10001CD44(v83, *(void *)(v0 + 88));
          uint64_t v89 = (uint64_t (*)(void))((char *)&dword_101639138 + dword_101639138);
          Swift::String v82 = (void *)swift_task_alloc();
          *(void *)(v0 + 792) = v82;
          *Swift::String v82 = v0;
          v82[1] = sub_100BBFBB8;
          return v89();
        }
LABEL_60:
        swift_once();
        goto LABEL_55;
      }
      uint64_t v42 = *(void *)(v0 + 584);
      uint64_t v43 = *(void *)(v0 + 576);
      uint64_t v44 = *(void *)(v0 + 568);
      uint64_t v46 = *(void *)(v0 + 472);
      uint64_t v45 = *(void *)(v0 + 480);
      uint64_t v47 = *(void *)(v0 + 368);
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v0 + 696))(v42, v38, v44);
      sub_100BC7260((unint64_t *)&qword_10163B8F0, (void (*)(uint64_t))&type metadata accessor for UUID);
      char v48 = dispatch thunk of static Equatable.== infix(_:_:)();
      unint64_t v49 = *(void (**)(uint64_t, uint64_t))(v43 + 8);
      v49(v42, v44);
      sub_10001DAB4(v45, &qword_101638CF0);
      v49(v46, v44);
      sub_10001DAB4(v47, &qword_101638CF0);
      int64_t v6 = v87;
      if ((v48 & 1) == 0) {
        goto LABEL_42;
      }
    }
    uint64_t v7 = *(void *)(v0 + 576);
    uint64_t v8 = *(void *)(v0 + 568);
    uint64_t v9 = *(void *)(v0 + 464);
    sub_100BC72A8(*(void *)(v0 + 448), type metadata accessor for DeviceEvent);
    (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v9, v8);
  }
  unint64_t v51 = *(void *)(v0 + 632);
  uint64_t v52 = *(void *)(v0 + 624);
  uint64_t v53 = *(void *)(v0 + 544);
  uint64_t v54 = *(void *)(v0 + 528);
  uint64_t v55 = *(void *)(v0 + 520);
  uint64_t v56 = *(void *)(v0 + 488);
  swift_release();
  swift_release();
  sub_100037A24(v52, v51);
  swift_release();
  swift_bridgeObjectRelease();
  sub_10001DAB4(v56, &qword_101638CF0);
  (*(void (**)(uint64_t, uint64_t))(v54 + 8))(v53, v55);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  Swift::String v57 = *(uint64_t (**)(uint64_t))(v0 + 8);
  uint64_t v58 = *(void *)(v0 + 760);
  return v57(v58);
}

uint64_t sub_100BBFBB8(uint64_t a1)
{
  uint64_t v2 = *(void *)(*(void *)v1 + 320);
  *(void *)(*(void *)v1 + 800) = a1;
  swift_task_dealloc();
  return _swift_task_switch(sub_100BBFCD0, v2, 0);
}

uint64_t sub_100BBFCD0()
{
  uint64_t v100 = v0;
  uint64_t v1 = *(void *)(v0 + 800);
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v0 + 64);
  if (v1)
  {
    uint64_t v2 = *(void *)(v0 + 800);
    return _swift_task_switch(sub_100BC0D2C, v2, 0);
  }
  uint64_t v92 = (long long *)(v0 + 104);
  uint64_t v91 = (uint64_t *)(v0 + 280);
  sub_100BC6D80();
  swift_allocError();
  *uint64_t v3 = 3;
  swift_willThrow();
  sub_100BC6D18(*(void *)(v0 + 448), *(void *)(v0 + 408), type metadata accessor for DeviceEvent);
  swift_errorRetain();
  swift_errorRetain();
  uint64_t v4 = Logger.logObject.getter();
  os_log_type_t v5 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v4, v5))
  {
    uint64_t v96 = *(void *)(v0 + 448);
    int64_t v6 = *(void **)(v0 + 408);
    uint64_t v7 = swift_slowAlloc();
    uint64_t v8 = (void *)swift_slowAlloc();
    uint64_t v99 = swift_slowAlloc();
    *(_DWORD *)uint64_t v7 = 138543875;
    swift_errorRetain();
    uint64_t v9 = _swift_stdlib_bridgeErrorToNSError();
    *(void *)(v7 + 4) = v9;
    *uint64_t v8 = v9;
    swift_errorRelease();
    swift_errorRelease();
    *(_WORD *)(v7 + 12) = 2160;
    *(void *)(v7 + 14) = 1752392040;
    *(_WORD *)(v7 + 22) = 2081;
    type metadata accessor for BeaconIdentifier();
    sub_100BC7260((unint64_t *)&qword_101638B10, (void (*)(uint64_t))&type metadata accessor for UUID);
    uint64_t v10 = dispatch thunk of CustomStringConvertible.description.getter();
    *(void *)(v7 + 24) = sub_1008FA0F0(v10, v11, &v99);
    swift_bridgeObjectRelease();
    sub_100BC72A8((uint64_t)v6, type metadata accessor for DeviceEvent);
    _os_log_impl((void *)&_mh_execute_header, v4, v5, "Failed to save location %{public}@, for beacon %{private,mask.hash}s.", (uint8_t *)v7, 0x20u);
    sub_10000588C((uint64_t *)&unk_101638EA0);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    swift_errorRelease();
    uint64_t v12 = v96;
  }
  else
  {
    uint64_t v13 = *(void *)(v0 + 448);
    int64_t v6 = *(void **)(v0 + 408);

    sub_100BC72A8((uint64_t)v6, type metadata accessor for DeviceEvent);
    swift_errorRelease();
    swift_errorRelease();
    swift_errorRelease();
    uint64_t v12 = v13;
  }
  sub_100BC72A8(v12, type metadata accessor for DeviceEvent);
  (*(void (**)(void, void))(*(void *)(v0 + 576) + 8))(*(void *)(v0 + 464), *(void *)(v0 + 568));
  unint64_t v14 = *(void *)(v0 + 784);
  int64_t v15 = *(void *)(v0 + 776);
  *(void *)(v0 + 768) = 0;
  while (1)
  {
    if (v14)
    {
      unint64_t v18 = __clz(__rbit64(v14));
      uint64_t v19 = (v14 - 1) & v14;
      unint64_t v20 = v18 | (v15 << 6);
      uint64_t v21 = *(void *)(v0 + 760);
LABEL_12:
      uint64_t v22 = *(void *)(v0 + 456);
      uint64_t v23 = *(void *)(v0 + 392);
      (*(void (**)(uint64_t, unint64_t, void))(v0 + 672))(v22, *(void *)(v21 + 48) + *(void *)(v0 + 688) * v20, *(void *)(v0 + 568));
      uint64_t v24 = *(void *)(v21 + 56) + *(void *)(v23 + 72) * v20;
      uint64_t v25 = sub_10000588C(&qword_101649728);
      sub_100BC6D18(v24, v22 + *(int *)(v25 + 48), type metadata accessor for DeviceEvent);
      (*(void (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v25 - 8) + 56))(v22, 0, 1, v25);
      goto LABEL_19;
    }
    int64_t v26 = v15 + 1;
    if (__OFADD__(v15, 1))
    {
      __break(1u);
      goto LABEL_64;
    }
    int64_t v27 = (unint64_t)((1 << *(unsigned char *)(v0 + 203)) + 63) >> 6;
    if (v26 >= v27)
    {
      int64_t v30 = v15;
    }
    else
    {
      uint64_t v21 = *(void *)(v0 + 760);
      uint64_t v28 = v21 + 64;
      unint64_t v29 = *(void *)(v21 + 64 + 8 * v26);
      if (v29) {
        goto LABEL_16;
      }
      int64_t v30 = v15 + 1;
      if (v15 + 2 < v27)
      {
        unint64_t v29 = *(void *)(v28 + 8 * (v15 + 2));
        if (v29)
        {
          int64_t v26 = v15 + 2;
LABEL_16:
          uint64_t v19 = (v29 - 1) & v29;
          unint64_t v20 = __clz(__rbit64(v29)) + (v26 << 6);
          int64_t v15 = v26;
          goto LABEL_12;
        }
        int64_t v30 = v15 + 2;
        if (v15 + 3 < v27)
        {
          unint64_t v29 = *(void *)(v28 + 8 * (v15 + 3));
          if (v29)
          {
            int64_t v26 = v15 + 3;
            goto LABEL_16;
          }
          int64_t v26 = v15 + 4;
          int64_t v30 = v15 + 3;
          if (v15 + 4 < v27)
          {
            unint64_t v29 = *(void *)(v28 + 8 * v26);
            if (v29) {
              goto LABEL_16;
            }
            int64_t v30 = v27 - 1;
            int64_t v58 = v27 - 5;
            while (v58 != v15)
            {
              unint64_t v29 = *(void *)(v21 + 104 + 8 * v15++);
              if (v29)
              {
                int64_t v26 = v15 + 4;
                goto LABEL_16;
              }
            }
          }
        }
      }
    }
    uint64_t v31 = *(void *)(v0 + 456);
    uint64_t v32 = sub_10000588C(&qword_101649728);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v32 - 8) + 56))(v31, 1, 1, v32);
    uint64_t v19 = 0;
    int64_t v15 = v30;
LABEL_19:
    *(void *)(v0 + 784) = v19;
    *(void *)(v0 + 776) = v15;
    uint64_t v33 = *(void *)(v0 + 464);
    sub_10001D608(*(void *)(v0 + 456), v33, &qword_10165AA20);
    uint64_t v34 = sub_10000588C(&qword_101649728);
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v34 - 8) + 48))(v33, 1, v34) == 1) {
      break;
    }
    uint64_t v35 = *(void *)(v0 + 448);
    uint64_t v36 = *(void *)(v0 + 376);
    uint64_t v37 = *(void *)(v0 + 384);
    sub_100BC6CB0(*(void *)(v0 + 464) + *(int *)(v34 + 48), v35, type metadata accessor for DeviceEvent);
    sub_10001D074(v35 + *(int *)(v37 + 32), v36, &qword_10163CF20);
    uint64_t v38 = type metadata accessor for DeviceEvent.AttachmentInfo(0);
    int64_t v94 = v15;
    unint64_t v97 = v19;
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v38 - 8) + 48))(v36, 1, v38) == 1)
    {
      sub_10001DAB4(*(void *)(v0 + 376), &qword_10163CF20);
      uint64_t v39 = 1;
    }
    else
    {
      uint64_t v40 = *(void *)(v0 + 376);
      (*(void (**)(void, uint64_t, void))(v0 + 672))(*(void *)(v0 + 480), v40, *(void *)(v0 + 568));
      sub_100BC72A8(v40, type metadata accessor for DeviceEvent.AttachmentInfo);
      uint64_t v39 = 0;
    }
    uint64_t v41 = *(void *)(v0 + 576);
    uint64_t v42 = *(void *)(v0 + 568);
    uint64_t v44 = *(void *)(v0 + 480);
    uint64_t v43 = *(void *)(v0 + 488);
    uint64_t v45 = *(void *)(v0 + 360);
    uint64_t v46 = *(void *)(v0 + 368);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v41 + 56))(v44, v39, 1, v42);
    uint64_t v47 = v46 + *(int *)(v45 + 48);
    sub_10001D074(v44, v46, &qword_101638CF0);
    sub_10001D074(v43, v47, &qword_101638CF0);
    char v48 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v41 + 48);
    int v49 = v48(v46, 1, v42);
    uint64_t v50 = *(void *)(v0 + 568);
    if (v49 == 1)
    {
      sub_10001DAB4(*(void *)(v0 + 480), &qword_101638CF0);
      unint64_t v14 = v97;
      if (v48(v47, 1, v50) != 1) {
        goto LABEL_45;
      }
      sub_10001DAB4(*(void *)(v0 + 368), &qword_101638CF0);
    }
    else
    {
      sub_10001D074(*(void *)(v0 + 368), *(void *)(v0 + 472), &qword_101638CF0);
      if (v48(v47, 1, v50) == 1)
      {
        uint64_t v67 = *(void *)(v0 + 576);
        uint64_t v68 = *(void *)(v0 + 568);
        uint64_t v69 = *(void *)(v0 + 472);
        sub_10001DAB4(*(void *)(v0 + 480), &qword_101638CF0);
        (*(void (**)(uint64_t, uint64_t))(v67 + 8))(v69, v68);
LABEL_45:
        sub_10001DAB4(*(void *)(v0 + 368), (uint64_t *)&unk_10166EAF0);
LABEL_46:
        uint64_t v70 = *(void *)(v0 + 448);
        uint64_t v72 = *(void *)(v0 + 424);
        uint64_t v71 = *(void *)(v0 + 432);
        sub_100BC6D18(v70, *(void *)(v0 + 440), type metadata accessor for DeviceEvent);
        sub_100BC6D18(v70, v71, type metadata accessor for DeviceEvent);
        sub_100BC6D18(v70, v72, type metadata accessor for DeviceEvent);
        unint64_t v73 = Logger.logObject.getter();
        os_log_type_t v74 = static os_log_type_t.error.getter();
        BOOL v75 = os_log_type_enabled(v73, v74);
        uint64_t v76 = *(void *)(v0 + 432);
        uint64_t v77 = *(void *)(v0 + 440);
        if (v75)
        {
          os_log_type_t v95 = v74;
          uint64_t v78 = swift_slowAlloc();
          *(void *)(v0 + 280) = swift_slowAlloc();
          *(_DWORD *)uint64_t v78 = 136446979;
          type metadata accessor for Date();
          sub_100BC7260((unint64_t *)&qword_101638DA0, (void (*)(uint64_t))&type metadata accessor for Date);
          uint64_t v79 = dispatch thunk of CustomStringConvertible.description.getter();
          *(void *)(v0 + 264) = sub_1008FA0F0(v79, v80, v91);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease();
          sub_100BC72A8(v77, type metadata accessor for DeviceEvent);
          *(_WORD *)(v78 + 12) = 2082;
          unint64_t v81 = 0xE800000000000000;
          uint64_t v82 = 0x6E776F6E6B6E752ELL;
          switch(*(unsigned char *)(v76 + 9))
          {
            case 1:
              uint64_t v82 = 0x7463656E6E6F632ELL;
              break;
            case 2:
              unint64_t v81 = 0xEB00000000746365;
              uint64_t v82 = 0x6E6E6F637369642ELL;
              break;
            case 3:
              unint64_t v81 = 0xE700000000000000;
              unsigned int v84 = 1953784110;
              goto LABEL_53;
            case 4:
              unint64_t v81 = 0xE700000000000000;
              unsigned int v84 = 1952801838;
LABEL_53:
              uint64_t v82 = v84 | 0x68636100000000;
              break;
            case 5:
              unint64_t v81 = 0xEF79627261654E64;
              uint64_t v82 = 0x657463657465642ELL;
              break;
            case 6:
              unint64_t v81 = 0xEC00000064657261;
              uint64_t v82 = 0x657070617369642ELL;
              break;
            case 7:
              unint64_t v81 = 0xE500000000000000;
              uint64_t v82 = 0x726961702ELL;
              break;
            default:
              break;
          }
          uint64_t v85 = *(void *)(v0 + 432);
          uint64_t v90 = *(void *)(v0 + 424);
          *(void *)(v0 + 296) = sub_1008FA0F0(v82, v81, v91);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease();
          sub_100BC72A8(v85, type metadata accessor for DeviceEvent);
          *(_WORD *)(v78 + 22) = 2160;
          *(void *)(v0 + 304) = 1752392040;
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          *(_WORD *)(v78 + 32) = 2081;
          type metadata accessor for BeaconIdentifier();
          sub_100BC7260((unint64_t *)&qword_101638B10, (void (*)(uint64_t))&type metadata accessor for UUID);
          uint64_t v86 = dispatch thunk of CustomStringConvertible.description.getter();
          *(void *)(v0 + 288) = sub_1008FA0F0(v86, v87, v91);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease();
          sub_100BC72A8(v90, type metadata accessor for DeviceEvent);
          _os_log_impl((void *)&_mh_execute_header, v73, v95, "Saving device event %{public}s, source: %{public}s, for beacon %{private,mask.hash}s.", (uint8_t *)v78, 0x2Au);
          swift_arrayDestroy();
          swift_slowDealloc();
          swift_slowDealloc();
        }
        else
        {
          uint64_t v83 = *(void *)(v0 + 424);
          sub_100BC72A8(*(void *)(v0 + 440), type metadata accessor for DeviceEvent);
          sub_100BC72A8(v76, type metadata accessor for DeviceEvent);
          sub_100BC72A8(v83, type metadata accessor for DeviceEvent);
        }
        int64_t v6 = (void *)(v0 + 64);
        if (qword_1016375E8 == -1)
        {
LABEL_59:
          swift_beginAccess();
          sub_10001D074((uint64_t)&xmmword_10166E8F0, (uint64_t)v92, (uint64_t *)&unk_101638D30);
          if (!*(void *)(v0 + 128))
          {
            __break(1u);
            JUMPOUT(0x100BC0D0CLL);
          }
          sub_10001CEB0(v92, (uint64_t)v6);
          sub_10001CD44(v6, *(void *)(v0 + 88));
          uint64_t v98 = (uint64_t (*)(void))((char *)&dword_101639138 + dword_101639138);
          uint64_t v88 = (void *)swift_task_alloc();
          *(void *)(v0 + 792) = v88;
          void *v88 = v0;
          v88[1] = sub_100BBFBB8;
          return v98();
        }
LABEL_64:
        swift_once();
        goto LABEL_59;
      }
      uint64_t v51 = *(void *)(v0 + 584);
      uint64_t v52 = *(void *)(v0 + 576);
      uint64_t v53 = *(void *)(v0 + 568);
      uint64_t v55 = *(void *)(v0 + 472);
      uint64_t v54 = *(void *)(v0 + 480);
      uint64_t v93 = *(void *)(v0 + 368);
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v0 + 696))(v51, v47, v53);
      sub_100BC7260((unint64_t *)&qword_10163B8F0, (void (*)(uint64_t))&type metadata accessor for UUID);
      char v56 = dispatch thunk of static Equatable.== infix(_:_:)();
      Swift::String v57 = *(void (**)(uint64_t, uint64_t))(v52 + 8);
      v57(v51, v53);
      sub_10001DAB4(v54, &qword_101638CF0);
      v57(v55, v53);
      sub_10001DAB4(v93, &qword_101638CF0);
      unint64_t v14 = v97;
      if ((v56 & 1) == 0) {
        goto LABEL_46;
      }
    }
    uint64_t v16 = *(void *)(v0 + 576);
    uint64_t v17 = *(void *)(v0 + 568);
    int64_t v6 = *(void **)(v0 + 464);
    sub_100BC72A8(*(void *)(v0 + 448), type metadata accessor for DeviceEvent);
    (*(void (**)(void *, uint64_t))(v16 + 8))(v6, v17);
    int64_t v15 = v94;
  }
  unint64_t v59 = *(void *)(v0 + 632);
  uint64_t v60 = *(void *)(v0 + 624);
  uint64_t v61 = *(void *)(v0 + 544);
  uint64_t v62 = *(void *)(v0 + 528);
  uint64_t v63 = *(void *)(v0 + 520);
  uint64_t v64 = *(void *)(v0 + 488);
  swift_release();
  swift_release();
  sub_100037A24(v60, v59);
  swift_release();
  swift_bridgeObjectRelease();
  sub_10001DAB4(v64, &qword_101638CF0);
  (*(void (**)(uint64_t, uint64_t))(v62 + 8))(v61, v63);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v65 = *(uint64_t (**)(uint64_t))(v0 + 8);
  uint64_t v66 = *(void *)(v0 + 760);
  return v65(v66);
}

void sub_100BC0D2C()
{
  uint64_t v1 = *(void *)(*(void *)(v0 + 800) + 128);
  if (v1)
  {
    uint64_t v2 = *(void *)(v0 + 768);
    uint64_t v3 = *(void *)(v1 + 24);
    uint64_t v4 = (unsigned char *)(v3 + 16);
    os_log_type_t v5 = (os_unfair_lock_s *)(v3 + 20);
    swift_retain();
    os_unfair_lock_lock(v5);
    sub_1002B3D78(v4, (unsigned char *)(v0 + 202));
    os_unfair_lock_unlock(v5);
    if (v2) {
      return;
    }
    if (*(unsigned char *)(v0 + 202))
    {
      sub_10000588C(&qword_10163CEF8);
      OSAllocatedUnfairLock.callAsFunction<A>(_:)();
      if (*(void *)(v0 + 256))
      {
        uint64_t v10 = *(unsigned int *)(v0 + 204);
        uint64_t v11 = *(void *)(v0 + 448);
        uint64_t v12 = *(void *)(v0 + 344);
        uint64_t v13 = *(void *)(v0 + 352);
        uint64_t v14 = *(void *)(v0 + 336);
        swift_retain();
        swift_release();
        uint64_t v15 = swift_task_alloc();
        *(void *)(v15 + 16) = v1;
        *(void *)(v15 + 24) = v11;
        (*(void (**)(uint64_t, uint64_t, uint64_t))(v12 + 104))(v13, v10, v14);
        Connection.transaction(_:block:)();
        *(void *)(v0 + 808) = 0;
        uint64_t v19 = *(void *)(v0 + 800);
        uint64_t v20 = *(void *)(v0 + 448);
        uint64_t v21 = *(void *)(v0 + 416);
        uint64_t v22 = *(void *)(v0 + 392);
        uint64_t v23 = *(void *)(v0 + 328);
        (*(void (**)(void, void))(*(void *)(v0 + 344) + 8))(*(void *)(v0 + 352), *(void *)(v0 + 336));
        swift_release();
        swift_release();
        swift_task_dealloc();
        swift_beginAccess();
        uint64_t v24 = *(void *)(v19 + 144);
        uint64_t v25 = type metadata accessor for TaskPriority();
        uint64_t v26 = *(void *)(v25 - 8);
        (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v26 + 56))(v23, 1, 1, v25);
        sub_100BC6D18(v20, v21, type metadata accessor for DeviceEvent);
        unint64_t v27 = (*(unsigned __int8 *)(v22 + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(v22 + 80);
        uint64_t v28 = (void *)swift_allocObject();
        v28[2] = 0;
        v28[3] = 0;
        v28[4] = v24;
        sub_100BC6CB0(v21, (uint64_t)v28 + v27, type metadata accessor for DeviceEvent);
        LODWORD(v21) = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v26 + 48))(v23, 1, v25);
        swift_bridgeObjectRetain();
        uint64_t v29 = *(void *)(v0 + 328);
        if (v21 == 1)
        {
          sub_10001DAB4(*(void *)(v0 + 328), &qword_10164DBB0);
        }
        else
        {
          TaskPriority.rawValue.getter();
          (*(void (**)(uint64_t, uint64_t))(v26 + 8))(v29, v25);
        }
        if (v28[2])
        {
          swift_getObjectType();
          swift_unknownObjectRetain();
          uint64_t v30 = dispatch thunk of Actor.unownedExecutor.getter();
          uint64_t v32 = v31;
          swift_unknownObjectRelease();
        }
        else
        {
          uint64_t v30 = 0;
          uint64_t v32 = 0;
        }
        uint64_t v33 = swift_allocObject();
        *(void *)(v33 + 16) = &unk_10165AA38;
        *(void *)(v33 + 24) = v28;
        if (v32 | v30)
        {
          *(void *)(v0 + 144) = 0;
          *(void *)(v0 + 152) = 0;
          *(void *)(v0 + 160) = v30;
          *(void *)(v0 + 168) = v32;
        }
        uint64_t v34 = *(void *)(v0 + 320);
        swift_task_create();
        swift_release();
        swift_release();
        unint64_t v18 = sub_100BC12E4;
        uint64_t v17 = v34;
        goto LABEL_14;
      }
    }
    sub_1001A149C();
    uint64_t v9 = swift_allocError();
    *(_DWORD *)uint64_t v16 = 2;
    *(unsigned char *)(v16 + 4) = 1;
    swift_willThrow();
    swift_release();
  }
  else
  {
    if (qword_101637480 != -1) {
      swift_once();
    }
    sub_100010324(*(void *)(v0 + 600), (uint64_t)qword_10166B720);
    int64_t v6 = Logger.logObject.getter();
    os_log_type_t v7 = static os_log_type_t.fault.getter();
    if (os_log_type_enabled(v6, v7))
    {
      uint64_t v8 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v8 = 0;
      _os_log_impl((void *)&_mh_execute_header, v6, v7, "No observation store on this platform!", v8, 2u);
      swift_slowDealloc();
    }

    sub_1005D4B14();
    uint64_t v9 = swift_allocError();
    swift_willThrow();
  }
  *(void *)(v0 + 816) = v9;
  uint64_t v17 = *(void *)(v0 + 320);
  unint64_t v18 = sub_100BC2068;
LABEL_14:
  _swift_task_switch(v18, v17, 0);
}

uint64_t sub_100BC12E4()
{
  unint64_t v80 = (void *)(v0 + 64);
  uint64_t v82 = (long long *)(v0 + 104);
  unint64_t v81 = (uint64_t *)(v0 + 280);
  sub_100BC72A8(*(void *)(v0 + 448), type metadata accessor for DeviceEvent);
  uint64_t v1 = *(void *)(v0 + 808);
  (*(void (**)(void, void))(*(void *)(v0 + 576) + 8))(*(void *)(v0 + 464), *(void *)(v0 + 568));
  unint64_t v2 = *(void *)(v0 + 784);
  int64_t v3 = *(void *)(v0 + 776);
  *(void *)(v0 + 768) = v1;
  while (1)
  {
    if (v2)
    {
      unint64_t v7 = __clz(__rbit64(v2));
      v2 &= v2 - 1;
      unint64_t v8 = v7 | (v3 << 6);
      uint64_t v9 = *(void *)(v0 + 760);
LABEL_5:
      uint64_t v10 = *(void *)(v0 + 456);
      uint64_t v11 = *(void *)(v0 + 392);
      (*(void (**)(uint64_t, unint64_t, void))(v0 + 672))(v10, *(void *)(v9 + 48) + *(void *)(v0 + 688) * v8, *(void *)(v0 + 568));
      uint64_t v12 = *(void *)(v9 + 56) + *(void *)(v11 + 72) * v8;
      uint64_t v13 = sub_10000588C(&qword_101649728);
      sub_100BC6D18(v12, v10 + *(int *)(v13 + 48), type metadata accessor for DeviceEvent);
      (*(void (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v13 - 8) + 56))(v10, 0, 1, v13);
      goto LABEL_12;
    }
    int64_t v14 = v3 + 1;
    if (__OFADD__(v3, 1))
    {
      __break(1u);
      goto LABEL_57;
    }
    int64_t v15 = (unint64_t)((1 << *(unsigned char *)(v0 + 203)) + 63) >> 6;
    if (v14 >= v15)
    {
      int64_t v18 = v3;
    }
    else
    {
      uint64_t v9 = *(void *)(v0 + 760);
      uint64_t v16 = v9 + 64;
      unint64_t v17 = *(void *)(v9 + 64 + 8 * v14);
      if (v17) {
        goto LABEL_9;
      }
      int64_t v18 = v3 + 1;
      if (v3 + 2 < v15)
      {
        unint64_t v17 = *(void *)(v16 + 8 * (v3 + 2));
        if (v17)
        {
          int64_t v14 = v3 + 2;
LABEL_9:
          unint64_t v2 = (v17 - 1) & v17;
          unint64_t v8 = __clz(__rbit64(v17)) + (v14 << 6);
          int64_t v3 = v14;
          goto LABEL_5;
        }
        int64_t v18 = v3 + 2;
        if (v3 + 3 < v15)
        {
          unint64_t v17 = *(void *)(v16 + 8 * (v3 + 3));
          if (v17)
          {
            int64_t v14 = v3 + 3;
            goto LABEL_9;
          }
          int64_t v14 = v3 + 4;
          int64_t v18 = v3 + 3;
          if (v3 + 4 < v15)
          {
            unint64_t v17 = *(void *)(v16 + 8 * v14);
            if (v17) {
              goto LABEL_9;
            }
            int64_t v18 = v15 - 1;
            int64_t v47 = v15 - 5;
            while (v47 != v3)
            {
              unint64_t v17 = *(void *)(v9 + 104 + 8 * v3++);
              if (v17)
              {
                int64_t v14 = v3 + 4;
                goto LABEL_9;
              }
            }
          }
        }
      }
    }
    uint64_t v19 = *(void *)(v0 + 456);
    uint64_t v20 = sub_10000588C(&qword_101649728);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v20 - 8) + 56))(v19, 1, 1, v20);
    unint64_t v2 = 0;
    int64_t v3 = v18;
LABEL_12:
    *(void *)(v0 + 784) = v2;
    *(void *)(v0 + 776) = v3;
    uint64_t v21 = *(void *)(v0 + 464);
    sub_10001D608(*(void *)(v0 + 456), v21, &qword_10165AA20);
    uint64_t v22 = sub_10000588C(&qword_101649728);
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v22 - 8) + 48))(v21, 1, v22) == 1) {
      break;
    }
    uint64_t v23 = *(void *)(v0 + 448);
    uint64_t v25 = *(void *)(v0 + 376);
    uint64_t v24 = *(void *)(v0 + 384);
    sub_100BC6CB0(*(void *)(v0 + 464) + *(int *)(v22 + 48), v23, type metadata accessor for DeviceEvent);
    sub_10001D074(v23 + *(int *)(v24 + 32), v25, &qword_10163CF20);
    uint64_t v26 = type metadata accessor for DeviceEvent.AttachmentInfo(0);
    int64_t v84 = v3;
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v26 - 8) + 48))(v25, 1, v26) == 1)
    {
      sub_10001DAB4(*(void *)(v0 + 376), &qword_10163CF20);
      uint64_t v27 = 1;
    }
    else
    {
      uint64_t v28 = *(void *)(v0 + 376);
      (*(void (**)(void, uint64_t, void))(v0 + 672))(*(void *)(v0 + 480), v28, *(void *)(v0 + 568));
      sub_100BC72A8(v28, type metadata accessor for DeviceEvent.AttachmentInfo);
      uint64_t v27 = 0;
    }
    uint64_t v29 = *(void *)(v0 + 576);
    uint64_t v30 = *(void *)(v0 + 568);
    uint64_t v31 = *(void *)(v0 + 480);
    uint64_t v32 = *(void *)(v0 + 488);
    uint64_t v33 = *(void *)(v0 + 360);
    uint64_t v34 = *(void *)(v0 + 368);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v29 + 56))(v31, v27, 1, v30);
    uint64_t v35 = v34 + *(int *)(v33 + 48);
    sub_10001D074(v31, v34, &qword_101638CF0);
    sub_10001D074(v32, v35, &qword_101638CF0);
    uint64_t v36 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v29 + 48);
    int v37 = v36(v34, 1, v30);
    uint64_t v38 = *(void *)(v0 + 568);
    if (v37 == 1)
    {
      sub_10001DAB4(*(void *)(v0 + 480), &qword_101638CF0);
      int64_t v3 = v84;
      if (v36(v35, 1, v38) != 1) {
        goto LABEL_38;
      }
      sub_10001DAB4(*(void *)(v0 + 368), &qword_101638CF0);
    }
    else
    {
      sub_10001D074(*(void *)(v0 + 368), *(void *)(v0 + 472), &qword_101638CF0);
      if (v36(v35, 1, v38) == 1)
      {
        uint64_t v57 = *(void *)(v0 + 576);
        uint64_t v58 = *(void *)(v0 + 568);
        uint64_t v59 = *(void *)(v0 + 472);
        sub_10001DAB4(*(void *)(v0 + 480), &qword_101638CF0);
        (*(void (**)(uint64_t, uint64_t))(v57 + 8))(v59, v58);
LABEL_38:
        sub_10001DAB4(*(void *)(v0 + 368), (uint64_t *)&unk_10166EAF0);
LABEL_39:
        uint64_t v60 = *(void *)(v0 + 448);
        uint64_t v62 = *(void *)(v0 + 424);
        uint64_t v61 = *(void *)(v0 + 432);
        sub_100BC6D18(v60, *(void *)(v0 + 440), type metadata accessor for DeviceEvent);
        sub_100BC6D18(v60, v61, type metadata accessor for DeviceEvent);
        sub_100BC6D18(v60, v62, type metadata accessor for DeviceEvent);
        uint64_t v63 = Logger.logObject.getter();
        os_log_type_t v64 = static os_log_type_t.error.getter();
        BOOL v65 = os_log_type_enabled(v63, v64);
        uint64_t v67 = *(void *)(v0 + 432);
        uint64_t v66 = *(void *)(v0 + 440);
        if (v65)
        {
          os_log_type_t v83 = v64;
          uint64_t v68 = swift_slowAlloc();
          *(void *)(v0 + 280) = swift_slowAlloc();
          *(_DWORD *)uint64_t v68 = 136446979;
          type metadata accessor for Date();
          sub_100BC7260((unint64_t *)&qword_101638DA0, (void (*)(uint64_t))&type metadata accessor for Date);
          uint64_t v69 = dispatch thunk of CustomStringConvertible.description.getter();
          *(void *)(v0 + 264) = sub_1008FA0F0(v69, v70, v81);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease();
          sub_100BC72A8(v66, type metadata accessor for DeviceEvent);
          *(_WORD *)(v68 + 12) = 2082;
          unint64_t v71 = 0xE800000000000000;
          uint64_t v72 = 0x6E776F6E6B6E752ELL;
          switch(*(unsigned char *)(v67 + 9))
          {
            case 1:
              uint64_t v72 = 0x7463656E6E6F632ELL;
              break;
            case 2:
              unint64_t v71 = 0xEB00000000746365;
              uint64_t v72 = 0x6E6E6F637369642ELL;
              break;
            case 3:
              unint64_t v71 = 0xE700000000000000;
              unsigned int v74 = 1953784110;
              goto LABEL_46;
            case 4:
              unint64_t v71 = 0xE700000000000000;
              unsigned int v74 = 1952801838;
LABEL_46:
              uint64_t v72 = v74 | 0x68636100000000;
              break;
            case 5:
              unint64_t v71 = 0xEF79627261654E64;
              uint64_t v72 = 0x657463657465642ELL;
              break;
            case 6:
              unint64_t v71 = 0xEC00000064657261;
              uint64_t v72 = 0x657070617369642ELL;
              break;
            case 7:
              unint64_t v71 = 0xE500000000000000;
              uint64_t v72 = 0x726961702ELL;
              break;
            default:
              break;
          }
          uint64_t v75 = *(void *)(v0 + 432);
          uint64_t v79 = *(void *)(v0 + 424);
          *(void *)(v0 + 296) = sub_1008FA0F0(v72, v71, v81);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease();
          sub_100BC72A8(v75, type metadata accessor for DeviceEvent);
          *(_WORD *)(v68 + 22) = 2160;
          *(void *)(v0 + 304) = 1752392040;
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          *(_WORD *)(v68 + 32) = 2081;
          type metadata accessor for BeaconIdentifier();
          sub_100BC7260((unint64_t *)&qword_101638B10, (void (*)(uint64_t))&type metadata accessor for UUID);
          uint64_t v76 = dispatch thunk of CustomStringConvertible.description.getter();
          *(void *)(v0 + 288) = sub_1008FA0F0(v76, v77, v81);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease();
          sub_100BC72A8(v79, type metadata accessor for DeviceEvent);
          _os_log_impl((void *)&_mh_execute_header, v63, v83, "Saving device event %{public}s, source: %{public}s, for beacon %{private,mask.hash}s.", (uint8_t *)v68, 0x2Au);
          swift_arrayDestroy();
          swift_slowDealloc();
          swift_slowDealloc();
        }
        else
        {
          uint64_t v73 = *(void *)(v0 + 424);
          sub_100BC72A8(*(void *)(v0 + 440), type metadata accessor for DeviceEvent);
          sub_100BC72A8(v67, type metadata accessor for DeviceEvent);
          sub_100BC72A8(v73, type metadata accessor for DeviceEvent);
        }
        if (qword_1016375E8 == -1)
        {
LABEL_52:
          swift_beginAccess();
          sub_10001D074((uint64_t)&xmmword_10166E8F0, (uint64_t)v82, (uint64_t *)&unk_101638D30);
          if (!*(void *)(v0 + 128))
          {
            __break(1u);
            JUMPOUT(0x100BC2048);
          }
          sub_10001CEB0(v82, (uint64_t)v80);
          sub_10001CD44(v80, *(void *)(v0 + 88));
          uint64_t v85 = (uint64_t (*)(void))((char *)&dword_101639138 + dword_101639138);
          uint64_t v78 = (void *)swift_task_alloc();
          *(void *)(v0 + 792) = v78;
          *uint64_t v78 = v0;
          v78[1] = sub_100BBFBB8;
          return v85();
        }
LABEL_57:
        swift_once();
        goto LABEL_52;
      }
      uint64_t v39 = *(void *)(v0 + 584);
      uint64_t v40 = *(void *)(v0 + 576);
      uint64_t v41 = *(void *)(v0 + 568);
      uint64_t v43 = *(void *)(v0 + 472);
      uint64_t v42 = *(void *)(v0 + 480);
      uint64_t v44 = *(void *)(v0 + 368);
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v0 + 696))(v39, v35, v41);
      sub_100BC7260((unint64_t *)&qword_10163B8F0, (void (*)(uint64_t))&type metadata accessor for UUID);
      char v45 = dispatch thunk of static Equatable.== infix(_:_:)();
      uint64_t v46 = *(void (**)(uint64_t, uint64_t))(v40 + 8);
      v46(v39, v41);
      sub_10001DAB4(v42, &qword_101638CF0);
      v46(v43, v41);
      sub_10001DAB4(v44, &qword_101638CF0);
      int64_t v3 = v84;
      if ((v45 & 1) == 0) {
        goto LABEL_39;
      }
    }
    uint64_t v4 = *(void *)(v0 + 576);
    uint64_t v5 = *(void *)(v0 + 568);
    uint64_t v6 = *(void *)(v0 + 464);
    sub_100BC72A8(*(void *)(v0 + 448), type metadata accessor for DeviceEvent);
    (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v6, v5);
  }
  unint64_t v48 = *(void *)(v0 + 632);
  uint64_t v49 = *(void *)(v0 + 624);
  uint64_t v50 = *(void *)(v0 + 544);
  uint64_t v51 = *(void *)(v0 + 528);
  uint64_t v52 = *(void *)(v0 + 520);
  uint64_t v53 = *(void *)(v0 + 488);
  swift_release();
  swift_release();
  sub_100037A24(v49, v48);
  swift_release();
  swift_bridgeObjectRelease();
  sub_10001DAB4(v53, &qword_101638CF0);
  (*(void (**)(uint64_t, uint64_t))(v51 + 8))(v50, v52);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v54 = *(uint64_t (**)(uint64_t))(v0 + 8);
  uint64_t v55 = *(void *)(v0 + 760);
  return v54(v55);
}

uint64_t sub_100BC2068()
{
  uint64_t v100 = v0;
  uint64_t v91 = (void *)(v0 + 64);
  uint64_t v93 = (long long *)(v0 + 104);
  uint64_t v92 = (uint64_t *)(v0 + 280);
  swift_release();
  sub_100BC6D18(*(void *)(v0 + 448), *(void *)(v0 + 408), type metadata accessor for DeviceEvent);
  swift_errorRetain();
  swift_errorRetain();
  uint64_t v1 = Logger.logObject.getter();
  os_log_type_t v2 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v1, v2))
  {
    uint64_t v96 = *(void *)(v0 + 448);
    uint64_t v3 = *(void *)(v0 + 408);
    uint64_t v4 = swift_slowAlloc();
    uint64_t v5 = (void *)swift_slowAlloc();
    uint64_t v99 = swift_slowAlloc();
    *(_DWORD *)uint64_t v4 = 138543875;
    swift_errorRetain();
    uint64_t v6 = _swift_stdlib_bridgeErrorToNSError();
    *(void *)(v4 + 4) = v6;
    *uint64_t v5 = v6;
    swift_errorRelease();
    swift_errorRelease();
    *(_WORD *)(v4 + 12) = 2160;
    *(void *)(v4 + 14) = 1752392040;
    *(_WORD *)(v4 + 22) = 2081;
    type metadata accessor for BeaconIdentifier();
    sub_100BC7260((unint64_t *)&qword_101638B10, (void (*)(uint64_t))&type metadata accessor for UUID);
    uint64_t v7 = dispatch thunk of CustomStringConvertible.description.getter();
    *(void *)(v4 + 24) = sub_1008FA0F0(v7, v8, &v99);
    swift_bridgeObjectRelease();
    sub_100BC72A8(v3, type metadata accessor for DeviceEvent);
    _os_log_impl((void *)&_mh_execute_header, v1, v2, "Failed to save location %{public}@, for beacon %{private,mask.hash}s.", (uint8_t *)v4, 0x20u);
    sub_10000588C((uint64_t *)&unk_101638EA0);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    swift_errorRelease();
    uint64_t v9 = v96;
  }
  else
  {
    uint64_t v10 = *(void *)(v0 + 448);
    uint64_t v11 = *(void *)(v0 + 408);

    sub_100BC72A8(v11, type metadata accessor for DeviceEvent);
    swift_errorRelease();
    swift_errorRelease();
    swift_errorRelease();
    uint64_t v9 = v10;
  }
  sub_100BC72A8(v9, type metadata accessor for DeviceEvent);
  (*(void (**)(void, void))(*(void *)(v0 + 576) + 8))(*(void *)(v0 + 464), *(void *)(v0 + 568));
  unint64_t v12 = *(void *)(v0 + 784);
  int64_t v13 = *(void *)(v0 + 776);
  *(void *)(v0 + 768) = 0;
  while (1)
  {
    if (v12)
    {
      unint64_t v17 = __clz(__rbit64(v12));
      uint64_t v18 = (v12 - 1) & v12;
      unint64_t v19 = v17 | (v13 << 6);
      uint64_t v20 = *(void *)(v0 + 760);
LABEL_8:
      uint64_t v21 = *(void *)(v0 + 456);
      uint64_t v22 = *(void *)(v0 + 392);
      (*(void (**)(uint64_t, unint64_t, void))(v0 + 672))(v21, *(void *)(v20 + 48) + *(void *)(v0 + 688) * v19, *(void *)(v0 + 568));
      uint64_t v23 = *(void *)(v20 + 56) + *(void *)(v22 + 72) * v19;
      uint64_t v24 = sub_10000588C(&qword_101649728);
      sub_100BC6D18(v23, v21 + *(int *)(v24 + 48), type metadata accessor for DeviceEvent);
      (*(void (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v24 - 8) + 56))(v21, 0, 1, v24);
      goto LABEL_15;
    }
    int64_t v25 = v13 + 1;
    if (__OFADD__(v13, 1))
    {
      __break(1u);
      goto LABEL_60;
    }
    int64_t v26 = (unint64_t)((1 << *(unsigned char *)(v0 + 203)) + 63) >> 6;
    if (v25 >= v26)
    {
      int64_t v29 = v13;
    }
    else
    {
      uint64_t v20 = *(void *)(v0 + 760);
      uint64_t v27 = v20 + 64;
      unint64_t v28 = *(void *)(v20 + 64 + 8 * v25);
      if (v28) {
        goto LABEL_12;
      }
      int64_t v29 = v13 + 1;
      if (v13 + 2 < v26)
      {
        unint64_t v28 = *(void *)(v27 + 8 * (v13 + 2));
        if (v28)
        {
          int64_t v25 = v13 + 2;
LABEL_12:
          uint64_t v18 = (v28 - 1) & v28;
          unint64_t v19 = __clz(__rbit64(v28)) + (v25 << 6);
          int64_t v13 = v25;
          goto LABEL_8;
        }
        int64_t v29 = v13 + 2;
        if (v13 + 3 < v26)
        {
          unint64_t v28 = *(void *)(v27 + 8 * (v13 + 3));
          if (v28)
          {
            int64_t v25 = v13 + 3;
            goto LABEL_12;
          }
          int64_t v25 = v13 + 4;
          int64_t v29 = v13 + 3;
          if (v13 + 4 < v26)
          {
            unint64_t v28 = *(void *)(v27 + 8 * v25);
            if (v28) {
              goto LABEL_12;
            }
            int64_t v29 = v26 - 1;
            int64_t v58 = v26 - 5;
            while (v58 != v13)
            {
              unint64_t v28 = *(void *)(v20 + 104 + 8 * v13++);
              if (v28)
              {
                int64_t v25 = v13 + 4;
                goto LABEL_12;
              }
            }
          }
        }
      }
    }
    uint64_t v30 = *(void *)(v0 + 456);
    uint64_t v31 = sub_10000588C(&qword_101649728);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v31 - 8) + 56))(v30, 1, 1, v31);
    uint64_t v18 = 0;
    int64_t v13 = v29;
LABEL_15:
    *(void *)(v0 + 784) = v18;
    *(void *)(v0 + 776) = v13;
    uint64_t v32 = *(void *)(v0 + 464);
    sub_10001D608(*(void *)(v0 + 456), v32, &qword_10165AA20);
    uint64_t v33 = sub_10000588C(&qword_101649728);
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v33 - 8) + 48))(v32, 1, v33) == 1) {
      break;
    }
    uint64_t v34 = *(void *)(v0 + 448);
    uint64_t v35 = *(void *)(v0 + 376);
    uint64_t v36 = *(void *)(v0 + 384);
    sub_100BC6CB0(*(void *)(v0 + 464) + *(int *)(v33 + 48), v34, type metadata accessor for DeviceEvent);
    sub_10001D074(v34 + *(int *)(v36 + 32), v35, &qword_10163CF20);
    uint64_t v37 = type metadata accessor for DeviceEvent.AttachmentInfo(0);
    int64_t v94 = v13;
    unint64_t v97 = v18;
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v37 - 8) + 48))(v35, 1, v37) == 1)
    {
      sub_10001DAB4(*(void *)(v0 + 376), &qword_10163CF20);
      uint64_t v38 = 1;
    }
    else
    {
      uint64_t v39 = *(void *)(v0 + 376);
      (*(void (**)(void, uint64_t, void))(v0 + 672))(*(void *)(v0 + 480), v39, *(void *)(v0 + 568));
      sub_100BC72A8(v39, type metadata accessor for DeviceEvent.AttachmentInfo);
      uint64_t v38 = 0;
    }
    uint64_t v40 = *(void *)(v0 + 576);
    uint64_t v41 = *(void *)(v0 + 568);
    uint64_t v43 = *(void *)(v0 + 480);
    uint64_t v42 = *(void *)(v0 + 488);
    uint64_t v44 = *(void *)(v0 + 360);
    uint64_t v45 = *(void *)(v0 + 368);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v40 + 56))(v43, v38, 1, v41);
    uint64_t v46 = v45 + *(int *)(v44 + 48);
    sub_10001D074(v43, v45, &qword_101638CF0);
    sub_10001D074(v42, v46, &qword_101638CF0);
    int64_t v47 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v40 + 48);
    int v48 = v47(v45, 1, v41);
    uint64_t v49 = *(void *)(v0 + 568);
    if (v48 == 1)
    {
      sub_10001DAB4(*(void *)(v0 + 480), &qword_101638CF0);
      unint64_t v12 = v97;
      if (v47(v46, 1, v49) != 1) {
        goto LABEL_41;
      }
      sub_10001DAB4(*(void *)(v0 + 368), &qword_101638CF0);
    }
    else
    {
      sub_10001D074(*(void *)(v0 + 368), *(void *)(v0 + 472), &qword_101638CF0);
      if (v47(v46, 1, v49) == 1)
      {
        uint64_t v68 = *(void *)(v0 + 576);
        uint64_t v69 = *(void *)(v0 + 568);
        uint64_t v70 = *(void *)(v0 + 472);
        sub_10001DAB4(*(void *)(v0 + 480), &qword_101638CF0);
        (*(void (**)(uint64_t, uint64_t))(v68 + 8))(v70, v69);
LABEL_41:
        sub_10001DAB4(*(void *)(v0 + 368), (uint64_t *)&unk_10166EAF0);
LABEL_42:
        uint64_t v71 = *(void *)(v0 + 448);
        uint64_t v73 = *(void *)(v0 + 424);
        uint64_t v72 = *(void *)(v0 + 432);
        sub_100BC6D18(v71, *(void *)(v0 + 440), type metadata accessor for DeviceEvent);
        sub_100BC6D18(v71, v72, type metadata accessor for DeviceEvent);
        sub_100BC6D18(v71, v73, type metadata accessor for DeviceEvent);
        unsigned int v74 = Logger.logObject.getter();
        os_log_type_t v75 = static os_log_type_t.error.getter();
        BOOL v76 = os_log_type_enabled(v74, v75);
        uint64_t v77 = *(void *)(v0 + 432);
        uint64_t v78 = *(void *)(v0 + 440);
        if (v76)
        {
          os_log_type_t v95 = v75;
          uint64_t v79 = swift_slowAlloc();
          *(void *)(v0 + 280) = swift_slowAlloc();
          *(_DWORD *)uint64_t v79 = 136446979;
          type metadata accessor for Date();
          sub_100BC7260((unint64_t *)&qword_101638DA0, (void (*)(uint64_t))&type metadata accessor for Date);
          uint64_t v80 = dispatch thunk of CustomStringConvertible.description.getter();
          *(void *)(v0 + 264) = sub_1008FA0F0(v80, v81, v92);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease();
          sub_100BC72A8(v78, type metadata accessor for DeviceEvent);
          *(_WORD *)(v79 + 12) = 2082;
          unint64_t v82 = 0xE800000000000000;
          uint64_t v83 = 0x6E776F6E6B6E752ELL;
          switch(*(unsigned char *)(v77 + 9))
          {
            case 1:
              uint64_t v83 = 0x7463656E6E6F632ELL;
              break;
            case 2:
              unint64_t v82 = 0xEB00000000746365;
              uint64_t v83 = 0x6E6E6F637369642ELL;
              break;
            case 3:
              unint64_t v82 = 0xE700000000000000;
              unsigned int v85 = 1953784110;
              goto LABEL_49;
            case 4:
              unint64_t v82 = 0xE700000000000000;
              unsigned int v85 = 1952801838;
LABEL_49:
              uint64_t v83 = v85 | 0x68636100000000;
              break;
            case 5:
              unint64_t v82 = 0xEF79627261654E64;
              uint64_t v83 = 0x657463657465642ELL;
              break;
            case 6:
              unint64_t v82 = 0xEC00000064657261;
              uint64_t v83 = 0x657070617369642ELL;
              break;
            case 7:
              unint64_t v82 = 0xE500000000000000;
              uint64_t v83 = 0x726961702ELL;
              break;
            default:
              break;
          }
          uint64_t v86 = *(void *)(v0 + 432);
          uint64_t v90 = *(void *)(v0 + 424);
          *(void *)(v0 + 296) = sub_1008FA0F0(v83, v82, v92);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease();
          sub_100BC72A8(v86, type metadata accessor for DeviceEvent);
          *(_WORD *)(v79 + 22) = 2160;
          *(void *)(v0 + 304) = 1752392040;
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          *(_WORD *)(v79 + 32) = 2081;
          type metadata accessor for BeaconIdentifier();
          sub_100BC7260((unint64_t *)&qword_101638B10, (void (*)(uint64_t))&type metadata accessor for UUID);
          uint64_t v87 = dispatch thunk of CustomStringConvertible.description.getter();
          *(void *)(v0 + 288) = sub_1008FA0F0(v87, v88, v92);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease();
          sub_100BC72A8(v90, type metadata accessor for DeviceEvent);
          _os_log_impl((void *)&_mh_execute_header, v74, v95, "Saving device event %{public}s, source: %{public}s, for beacon %{private,mask.hash}s.", (uint8_t *)v79, 0x2Au);
          swift_arrayDestroy();
          swift_slowDealloc();
          swift_slowDealloc();
        }
        else
        {
          uint64_t v84 = *(void *)(v0 + 424);
          sub_100BC72A8(*(void *)(v0 + 440), type metadata accessor for DeviceEvent);
          sub_100BC72A8(v77, type metadata accessor for DeviceEvent);
          sub_100BC72A8(v84, type metadata accessor for DeviceEvent);
        }
        if (qword_1016375E8 == -1)
        {
LABEL_55:
          swift_beginAccess();
          sub_10001D074((uint64_t)&xmmword_10166E8F0, (uint64_t)v93, (uint64_t *)&unk_101638D30);
          if (!*(void *)(v0 + 128))
          {
            __break(1u);
            JUMPOUT(0x100BC302CLL);
          }
          sub_10001CEB0(v93, (uint64_t)v91);
          sub_10001CD44(v91, *(void *)(v0 + 88));
          uint64_t v98 = (uint64_t (*)(void))((char *)&dword_101639138 + dword_101639138);
          uint64_t v89 = (void *)swift_task_alloc();
          *(void *)(v0 + 792) = v89;
          void *v89 = v0;
          v89[1] = sub_100BBFBB8;
          return v98();
        }
LABEL_60:
        swift_once();
        goto LABEL_55;
      }
      uint64_t v50 = *(void *)(v0 + 584);
      uint64_t v51 = *(void *)(v0 + 576);
      uint64_t v52 = *(void *)(v0 + 568);
      uint64_t v54 = *(void *)(v0 + 472);
      uint64_t v53 = *(void *)(v0 + 480);
      uint64_t v55 = *(void *)(v0 + 368);
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v0 + 696))(v50, v46, v52);
      sub_100BC7260((unint64_t *)&qword_10163B8F0, (void (*)(uint64_t))&type metadata accessor for UUID);
      char v56 = dispatch thunk of static Equatable.== infix(_:_:)();
      uint64_t v57 = *(void (**)(uint64_t, uint64_t))(v51 + 8);
      v57(v50, v52);
      sub_10001DAB4(v53, &qword_101638CF0);
      v57(v54, v52);
      sub_10001DAB4(v55, &qword_101638CF0);
      unint64_t v12 = v97;
      if ((v56 & 1) == 0) {
        goto LABEL_42;
      }
    }
    uint64_t v14 = *(void *)(v0 + 576);
    uint64_t v15 = *(void *)(v0 + 568);
    uint64_t v16 = *(void *)(v0 + 464);
    sub_100BC72A8(*(void *)(v0 + 448), type metadata accessor for DeviceEvent);
    (*(void (**)(uint64_t, uint64_t))(v14 + 8))(v16, v15);
    int64_t v13 = v94;
  }
  unint64_t v59 = *(void *)(v0 + 632);
  uint64_t v60 = *(void *)(v0 + 624);
  uint64_t v61 = *(void *)(v0 + 544);
  uint64_t v62 = *(void *)(v0 + 528);
  uint64_t v63 = *(void *)(v0 + 520);
  uint64_t v64 = *(void *)(v0 + 488);
  swift_release();
  swift_release();
  sub_100037A24(v60, v59);
  swift_release();
  swift_bridgeObjectRelease();
  sub_10001DAB4(v64, &qword_101638CF0);
  (*(void (**)(uint64_t, uint64_t))(v62 + 8))(v61, v63);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  BOOL v65 = *(uint64_t (**)(uint64_t))(v0 + 8);
  uint64_t v66 = *(void *)(v0 + 760);
  return v65(v66);
}

uint64_t sub_100BC304C()
{
  unint64_t v1 = v0[79];
  uint64_t v2 = v0[78];
  swift_release();
  sub_100037A24(v2, v1);
  swift_bridgeObjectRelease();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v3 = (uint64_t (*)(void))v0[1];
  return v3();
}

uint64_t sub_100BC3200(void *a1)
{
  return sub_100BC62FC(a1);
}

uint64_t sub_100BC3218(uint64_t a1)
{
  v2[16] = a1;
  v2[17] = v1;
  sub_10000588C(&qword_10163B9F0);
  v2[18] = swift_task_alloc();
  return _swift_task_switch(sub_100BC32AC, v1, 0);
}

uint64_t sub_100BC32AC()
{
  if (qword_1016375E8 != -1) {
    swift_once();
  }
  swift_beginAccess();
  uint64_t result = sub_10001D074((uint64_t)&xmmword_10166E8F0, v0 + 56, (uint64_t *)&unk_101638D30);
  if (*(void *)(v0 + 80))
  {
    sub_10001CEB0((long long *)(v0 + 56), v0 + 16);
    sub_10001CD44((void *)(v0 + 16), *(void *)(v0 + 40));
    uint64_t v3 = (uint64_t (__cdecl *)())((char *)&dword_1016390D8 + dword_1016390D8);
    uint64_t v2 = (void *)swift_task_alloc();
    *(void *)(v0 + 152) = v2;
    *uint64_t v2 = v0;
    v2[1] = sub_100BC33E8;
    return v3();
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_100BC33E8(uint64_t a1)
{
  uint64_t v2 = *(void *)(*(void *)v1 + 136);
  *(void *)(*(void *)v1 + 160) = a1;
  swift_task_dealloc();
  return _swift_task_switch(sub_100BC3500, v2, 0);
}

uint64_t sub_100BC3500()
{
  uint64_t v1 = v0[20];
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)(v0 + 2));
  if (v1)
  {
    uint64_t v2 = v0[20];
    return _swift_task_switch(sub_100BC35EC, v2, 0);
  }
  else
  {
    uint64_t v3 = type metadata accessor for UUID();
    (*(void (**)(void, uint64_t, uint64_t, uint64_t))(*(void *)(v3 - 8) + 56))(v0[16], 1, 1, v3);
    swift_task_dealloc();
    uint64_t v4 = (uint64_t (*)(void))v0[1];
    return v4();
  }
}

uint64_t sub_100BC35EC()
{
  *(void *)(v0 + 168) = *(void *)(*(void *)(v0 + 160) + 136);
  swift_retain();
  return _swift_task_switch(sub_100BC3660, 0, 0);
}

uint64_t sub_100BC3660()
{
  uint64_t v2 = v0[20];
  uint64_t v1 = v0[21];
  uint64_t v3 = (void *)swift_task_alloc();
  v0[22] = v3;
  v3[2] = v1;
  _OWORD v3[3] = sub_1003CD95C;
  v3[4] = v2;
  uint64_t v4 = (void *)swift_task_alloc();
  v0[23] = v4;
  uint64_t v5 = sub_10000588C((uint64_t *)&unk_101660AA0);
  *uint64_t v4 = v0;
  v4[1] = sub_100BC3778;
  return withCheckedContinuation<A>(isolation:function:_:)(v0 + 15, 0, 0, 0xD000000000000012, 0x80000001013F1870, sub_1000909AC, v3, v5);
}

uint64_t sub_100BC3778()
{
  uint64_t v1 = *v0;
  uint64_t v2 = *(void *)(*v0 + 136);
  swift_task_dealloc();
  swift_release();
  swift_task_dealloc();
  *(void *)(v1 + 192) = *(void *)(v1 + 120);
  return _swift_task_switch(sub_100BC38E8, v2, 0);
}

uint64_t sub_100BC38E8()
{
  uint64_t v1 = v0[24];
  uint64_t v2 = *(void *)(v1 + 16);
  uint64_t v3 = type metadata accessor for OwnedBeaconRecord();
  uint64_t v4 = *(void *)(v3 - 8);
  if (v2)
  {
    sub_100BC6D18(v1+ ((*(unsigned __int8 *)(*(void *)(v3 - 8) + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(v3 - 8) + 80)), v0[18], (uint64_t (*)(void))type metadata accessor for OwnedBeaconRecord);
    uint64_t v5 = 0;
  }
  else
  {
    uint64_t v5 = 1;
  }
  uint64_t v6 = v0[18];
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v4 + 56))(v6, v5, 1, v3);
  swift_release();
  swift_bridgeObjectRelease();
  int v7 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v4 + 48))(v6, 1, v3);
  uint64_t v8 = v0[18];
  if (v7 == 1)
  {
    sub_10001DAB4(v0[18], &qword_10163B9F0);
    uint64_t v9 = type metadata accessor for UUID();
    uint64_t v10 = *(void *)(v9 - 8);
    uint64_t v11 = 1;
  }
  else
  {
    uint64_t v12 = v0[16];
    uint64_t v13 = v8 + *(int *)(v3 + 20);
    uint64_t v9 = type metadata accessor for UUID();
    uint64_t v10 = *(void *)(v9 - 8);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v10 + 16))(v12, v13, v9);
    sub_100BC72A8(v8, (uint64_t (*)(void))type metadata accessor for OwnedBeaconRecord);
    uint64_t v11 = 0;
  }
  (*(void (**)(void, uint64_t, uint64_t, uint64_t))(v10 + 56))(v0[16], v11, 1, v9);
  swift_task_dealloc();
  uint64_t v14 = (uint64_t (*)(void))v0[1];
  return v14();
}

uint64_t sub_100BC3B2C(uint64_t a1, uint64_t a2)
{
  uint64_t v177 = a2;
  uint64_t v158 = a1;
  uint64_t v182 = type metadata accessor for UUID();
  uint64_t v159 = *(void *)(v182 - 8);
  uint64_t v2 = __chkstk_darwin(v182);
  unint64_t v167 = (unint64_t)&v153 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v2);
  unint64_t v156 = (unint64_t)&v153 - v4;
  uint64_t v5 = sub_10000588C(&qword_10163D030);
  uint64_t v6 = __chkstk_darwin(v5 - 8);
  uint64_t v8 = (char *)&v153 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  uint64_t v10 = (uint64_t *)((char *)&v153 - v9);
  unint64_t v11 = type metadata accessor for DeviceEvent(0);
  uint64_t v12 = *(void *)(v11 - 8);
  uint64_t v13 = __chkstk_darwin(v11);
  uint64_t v162 = (uint64_t)&v153 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = __chkstk_darwin(v13);
  uint64_t v154 = (uint64_t)&v153 - v16;
  uint64_t v17 = __chkstk_darwin(v15);
  uint64_t v155 = (uint64_t)&v153 - v18;
  uint64_t v19 = __chkstk_darwin(v17);
  uint64_t v157 = (uint64_t)&v153 - v20;
  uint64_t v21 = __chkstk_darwin(v19);
  uint64_t v23 = (uint64_t)&v153 - v22;
  uint64_t v24 = __chkstk_darwin(v21);
  uint64_t v193 = (uint64_t)&v153 - v25;
  uint64_t v26 = __chkstk_darwin(v24);
  uint64_t v183 = (uint64_t)&v153 - v27;
  uint64_t v28 = __chkstk_darwin(v26);
  uint64_t v30 = (void (*)(uint64_t, unint64_t, uint64_t))((char *)&v153 - v29);
  __chkstk_darwin(v28);
  uint64_t v32 = (char *)&v153 - v31;
  uint64_t v33 = sub_10000588C((uint64_t *)&unk_10163B1D0);
  __chkstk_darwin(v33 - 8);
  uint64_t v171 = (char *)&v153 - ((v34 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v195 = type metadata accessor for HashAlgorithm();
  unint64_t isUniquelyReferenced_nonNull_native = *(void *)(v195 - 8);
  __chkstk_darwin(v195);
  uint64_t v188 = (char *)&v153 - ((v36 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v176 = type metadata accessor for LocalFindableAccessoryRecord();
  uint64_t v166 = *(void *)(v176 - 8);
  uint64_t v37 = __chkstk_darwin(v176);
  uint64_t v192 = (char *)&v153 - ((v38 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v39 = __chkstk_darwin(v37);
  unint64_t v41 = (unint64_t)&v153 - v40;
  uint64_t v42 = __chkstk_darwin(v39);
  uint64_t v181 = (uint64_t)&v153 - v43;
  __chkstk_darwin(v42);
  v196 = (void (**)(char *, uint64_t, uint64_t, unint64_t))((char *)&v153 - v44);
  if (qword_101636FC0 != -1) {
    goto LABEL_96;
  }
  while (1)
  {
    uint64_t v168 = v32;
    uint64_t v187 = v30;
    unint64_t v185 = (char *)v12;
    uint64_t v169 = v10;
    uint64_t v45 = type metadata accessor for Logger();
    uint64_t v191 = sub_100010324(v45, (uint64_t)qword_10165A908);
    uint64_t v46 = Logger.logObject.getter();
    os_log_type_t v47 = static os_log_type_t.default.getter();
    BOOL v48 = os_log_type_enabled(v46, v47);
    uint64_t v190 = (void (*)(uint64_t, unint64_t, uint64_t))v23;
    if (v48)
    {
      uint64_t v49 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v49 = 0;
      _os_log_impl((void *)&_mh_execute_header, v46, v47, "Process LocalFindable locations response.", v49, 2u);
      swift_slowDealloc();
    }

    uint64_t v50 = *(void **)(v177 + 16);
    int v184 = v8;
    unint64_t v194 = v41;
    unint64_t v189 = v11;
    if (v50) {
      break;
    }
    uint64_t v186 = _swiftEmptyDictionarySingleton;
LABEL_19:
    uint64_t v201 = _swiftEmptyDictionarySingleton;
    uint64_t v67 = (uint64_t)v171;
    unint64_t isUniquelyReferenced_nonNull_native = (unint64_t)v192;
    uint64_t v175 = *(void *)(v158 + 16);
    if (!v175)
    {
LABEL_88:
      swift_bridgeObjectRelease();
      uint64_t v149 = Logger.logObject.getter();
      os_log_type_t v150 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v149, v150))
      {
        uint64_t v151 = (uint8_t *)swift_slowAlloc();
        *(_DWORD *)uint64_t v151 = 134217984;
        swift_beginAccess();
        v200 = (void *)v201[2];
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        _os_log_impl((void *)&_mh_execute_header, v149, v150, "Found locations for %ld accessories.", v151, 0xCu);
        swift_slowDealloc();
      }

      swift_beginAccess();
      return (uint64_t)v201;
    }
    uint64_t v174 = v158 + 32;
    char v173 = (void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v166 + 56);
    unint64_t v170 = (unsigned int (**)(uint64_t, uint64_t, uint64_t))(v166 + 48);
    uint64_t v180 = &v199;
    v196 = (void (**)(char *, uint64_t, uint64_t, unint64_t))(v185 + 56);
    uint64_t v163 = (unsigned int (**)(uint64_t, uint64_t, unint64_t))(v185 + 48);
    uint64_t v161 = (void (**)(uint64_t, unint64_t, uint64_t))(v159 + 16);
    uint64_t v160 = (void (**)(uint64_t, uint64_t))(v159 + 8);
    swift_bridgeObjectRetain();
    uint64_t v68 = 0;
    uint64_t v188 = 0;
    *(void *)&long long v69 = 136315138;
    long long v165 = v69;
    uint64_t v164 = (char *)&type metadata for Any + 8;
    *(void *)&long long v69 = 138543875;
    long long v179 = v69;
    while (1)
    {
      uint64_t v181 = v68;
      uint64_t v70 = (uint64_t *)(v174 + 24 * v68);
      uint64_t v71 = *v70;
      unint64_t v72 = v70[1];
      uint64_t v73 = v70[2];
      unsigned int v74 = v186;
      if (!v186[2])
      {
        (*v173)(v67, 1, 1, v176);
        sub_1000361E0(v71, v72);
        swift_bridgeObjectRetain();
LABEL_30:
        sub_10001DAB4(v67, (uint64_t *)&unk_10163B1D0);
        sub_1000361E0(v71, v72);
        swift_bridgeObjectRetain();
        sub_1000361E0(v71, v72);
        swift_bridgeObjectRetain();
        unint64_t v82 = Logger.logObject.getter();
        os_log_type_t v83 = static os_log_type_t.error.getter();
        if (os_log_type_enabled(v82, v83))
        {
          uint64_t v84 = swift_slowAlloc();
          v200 = (void *)swift_slowAlloc();
          *(_DWORD *)uint64_t v84 = v165;
          sub_1000361E0(v71, v72);
          uint64_t v85 = Data.description.getter();
          unint64_t v87 = v86;
          sub_10001CFB8(v71, v72);
          uint64_t v88 = v85;
          unint64_t isUniquelyReferenced_nonNull_native = (unint64_t)v192;
          *(void *)(v84 + 4) = sub_1008FA0F0(v88, v87, (uint64_t *)&v200);
          uint64_t v8 = v184;
          swift_bridgeObjectRelease();
          sub_10001CFB8(v71, v72);
          swift_bridgeObjectRelease();
          sub_10001CFB8(v71, v72);
          swift_bridgeObjectRelease();
          _os_log_impl((void *)&_mh_execute_header, v82, v83, "Location for unknown identifier: %s", (uint8_t *)v84, 0xCu);
          swift_arrayDestroy();
          swift_slowDealloc();
          uint64_t v67 = (uint64_t)v171;
          swift_slowDealloc();

          sub_10001CFB8(v71, v72);
        }
        else
        {
          sub_10001CFB8(v71, v72);
          swift_bridgeObjectRelease();
          sub_10001CFB8(v71, v72);
          swift_bridgeObjectRelease();
          sub_10001CFB8(v71, v72);
        }
        swift_bridgeObjectRelease();
        unint64_t v41 = v194;
        uint64_t v12 = v181;
        goto LABEL_23;
      }
      sub_1000361E0(v71, v72);
      swift_bridgeObjectRetain();
      sub_1000361E0(v71, v72);
      uint64_t v177 = v71;
      uint64_t v178 = (void (**)(char *, uint64_t))v72;
      uint64_t v75 = sub_100724CDC(v71, v72);
      if (v76)
      {
        sub_100BC6D18(v74[7] + *(void *)(v166 + 72) * v75, v67, (uint64_t (*)(void))type metadata accessor for LocalFindableAccessoryRecord);
        uint64_t v77 = 0;
      }
      else
      {
        uint64_t v77 = 1;
      }
      uint64_t v30 = v190;
      uint64_t v78 = v67;
      uint64_t v79 = v67;
      uint64_t v80 = v176;
      (*v173)(v78, v77, 1, v176);
      uint64_t v71 = v177;
      unint64_t v72 = (unint64_t)v178;
      sub_10001CFB8(v177, (unint64_t)v178);
      uint64_t v81 = v80;
      uint64_t v67 = v79;
      if ((*v170)(v79, 1, v81) == 1) {
        goto LABEL_30;
      }
      sub_100BC6CB0(v79, v41, (uint64_t (*)(void))type metadata accessor for LocalFindableAccessoryRecord);
      uint64_t v89 = *(void *)(v73 + 16);
      uint64_t v172 = v73;
      if (v89)
      {
        uint64_t v90 = *(void *)(type metadata accessor for DeviceEventEncodedInfo(0) - 8);
        unint64_t v91 = (*(unsigned __int8 *)(v90 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v90 + 80);
        uint64_t v195 = *(void *)(v90 + 72);
        swift_bridgeObjectRetain();
        uint64_t v92 = (uint64_t *)(v73 + v91 + 8);
        uint64_t v197 = _swiftEmptyArrayStorage;
        uint64_t v93 = v188;
        do
        {
          sub_100BC55A8((_OWORD *)*(v92 - 1), *v92, v41, (uint64_t)v8);
          if (v93)
          {
            sub_100BC6D18(v41, isUniquelyReferenced_nonNull_native, (uint64_t (*)(void))type metadata accessor for LocalFindableAccessoryRecord);
            swift_errorRetain();
            swift_errorRetain();
            int64_t v94 = Logger.logObject.getter();
            os_log_type_t v95 = static os_log_type_t.error.getter();
            if (os_log_type_enabled(v94, v95))
            {
              uint64_t v96 = swift_slowAlloc();
              unint64_t v97 = (void *)swift_slowAlloc();
              uint64_t v188 = (char *)swift_slowAlloc();
              v200 = v188;
              *(_DWORD *)uint64_t v96 = v179;
              swift_errorRetain();
              uint64_t v98 = _swift_stdlib_bridgeErrorToNSError();
              uint64_t v198 = v98;
              UnsafeMutableRawBufferPointer.copyMemory(from:)();
              void *v97 = v98;
              swift_errorRelease();
              swift_errorRelease();
              *(_WORD *)(v96 + 12) = 2160;
              uint64_t v198 = 1752392040;
              UnsafeMutableRawBufferPointer.copyMemory(from:)();
              *(_WORD *)(v96 + 22) = 2081;
              sub_100BC7260((unint64_t *)&qword_101638B10, (void (*)(uint64_t))&type metadata accessor for UUID);
              uint64_t v99 = dispatch thunk of CustomStringConvertible.description.getter();
              uint64_t v198 = sub_1008FA0F0(v99, v100, (uint64_t *)&v200);
              unint64_t isUniquelyReferenced_nonNull_native = (unint64_t)v192;
              UnsafeMutableRawBufferPointer.copyMemory(from:)();
              swift_bridgeObjectRelease();
              sub_100BC72A8(isUniquelyReferenced_nonNull_native, (uint64_t (*)(void))type metadata accessor for LocalFindableAccessoryRecord);
              _os_log_impl((void *)&_mh_execute_header, v94, v95, "Failed to decrypt location %{public}@,\nfor accessory %{private,mask.hash}s.", (uint8_t *)v96, 0x20u);
              sub_10000588C((uint64_t *)&unk_101638EA0);
              swift_arrayDestroy();
              swift_slowDealloc();
              swift_arrayDestroy();
              unint64_t v101 = v194;
              swift_slowDealloc();
              uint64_t v8 = v184;
              swift_slowDealloc();

              unint64_t v41 = v101;
              swift_errorRelease();
            }
            else
            {
              swift_errorRelease();
              swift_errorRelease();
              swift_errorRelease();
              sub_100BC72A8(isUniquelyReferenced_nonNull_native, (uint64_t (*)(void))type metadata accessor for LocalFindableAccessoryRecord);
            }
            unint64_t v11 = v189;
            (*v196)(v8, 1, 1, v189);
            sub_10001DAB4((uint64_t)v8, &qword_10163D030);
            uint64_t v93 = 0;
            uint64_t v30 = v190;
          }
          else
          {
            (*v196)(v8, 0, 1, v11);
            uint64_t v102 = v183;
            sub_100BC6CB0((uint64_t)v8, v183, type metadata accessor for DeviceEvent);
            sub_100BC6CB0(v102, v193, type metadata accessor for DeviceEvent);
            if (swift_isUniquelyReferenced_nonNull_native()) {
              unint64_t v103 = (unint64_t)v197;
            }
            else {
              unint64_t v103 = sub_100A70C64(0, v197[2] + 1, 1, (unint64_t)v197);
            }
            unint64_t v105 = *(void *)(v103 + 16);
            unint64_t v104 = *(void *)(v103 + 24);
            if (v105 >= v104 >> 1) {
              unint64_t v103 = sub_100A70C64(v104 > 1, v105 + 1, 1, v103);
            }
            *(void *)(v103 + 16) = v105 + 1;
            unint64_t v106 = (v185[80] + 32) & ~(unint64_t)v185[80];
            uint64_t v197 = (void *)v103;
            sub_100BC6CB0(v193, v103 + v106 + *((void *)v185 + 9) * v105, type metadata accessor for DeviceEvent);
          }
          uint64_t v92 = (uint64_t *)((char *)v92 + v195);
          --v89;
        }
        while (v89);
        uint64_t v188 = 0;
        swift_bridgeObjectRelease();
        uint64_t v12 = v181;
        char v107 = v197;
      }
      else
      {
        char v107 = _swiftEmptyArrayStorage;
        uint64_t v12 = v181;
      }
      uint64_t v10 = (void *)v107[2];
      uint64_t v23 = (uint64_t)v169;
      uint64_t v32 = v185;
      if (v10) {
        break;
      }
      uint64_t v110 = 1;
LABEL_52:
      (*v196)((char *)v23, v110, 1, v11);
      swift_bridgeObjectRelease();
      if ((*v163)(v23, 1, v11) == 1)
      {
        sub_10001CFB8(v177, (unint64_t)v178);
        swift_bridgeObjectRelease();
        sub_100BC72A8(v41, (uint64_t (*)(void))type metadata accessor for LocalFindableAccessoryRecord);
        sub_10001DAB4(v23, &qword_10163D030);
        goto LABEL_79;
      }
      sub_100BC6CB0(v23, (uint64_t)v168, type metadata accessor for DeviceEvent);
      char v111 = v201;
      if (!v201[2]) {
        goto LABEL_68;
      }
      unint64_t v112 = sub_1007240CC(v41);
      if ((v113 & 1) == 0) {
        goto LABEL_68;
      }
      uint64_t v114 = *((void *)v32 + 9);
      uint64_t v115 = v155;
      sub_100BC6D18(v111[7] + v114 * v112, v155, type metadata accessor for DeviceEvent);
      uint64_t v116 = v115;
      uint64_t v117 = v157;
      sub_100BC6CB0(v116, v157, type metadata accessor for DeviceEvent);
      uint64_t v118 = (uint64_t)v168;
      if ((static Date.< infix(_:_:)() & 1) == 0)
      {
        sub_100BC72A8(v117, type metadata accessor for DeviceEvent);
        unint64_t v41 = v194;
LABEL_68:
        uint64_t v30 = *v161;
        uint64_t v133 = v167;
        (*v161)(v167, v41, v182);
        sub_100BC6D18((uint64_t)v168, v162, type metadata accessor for DeviceEvent);
        uint64_t v10 = v201;
        unint64_t isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
        v200 = v10;
        uint64_t v201 = (void *)0x8000000000000000;
        unint64_t v135 = sub_1007240CC(v133);
        uint64_t v136 = v10[2];
        BOOL v137 = (v134 & 1) == 0;
        uint64_t v138 = v136 + v137;
        if (__OFADD__(v136, v137)) {
          goto LABEL_94;
        }
        uint64_t v23 = v134;
        if (v10[3] >= v138)
        {
          if ((isUniquelyReferenced_nonNull_native & 1) == 0) {
            sub_100E83ED0();
          }
        }
        else
        {
          sub_100E714AC(v138, isUniquelyReferenced_nonNull_native);
          unint64_t v139 = sub_1007240CC(v167);
          if ((v23 & 1) != (v140 & 1)) {
            goto LABEL_100;
          }
          unint64_t v135 = v139;
        }
        unint64_t isUniquelyReferenced_nonNull_native = (unint64_t)v192;
        uint64_t v10 = v200;
        if (v23)
        {
          sub_100BC63B4(v162, v200[7] + *((void *)v32 + 9) * v135, type metadata accessor for DeviceEvent);
        }
        else
        {
          v200[(v135 >> 6) + 8] |= 1 << v135;
          v30(v10[6] + *(void *)(v159 + 72) * v135, v167, v182);
          sub_100BC6CB0(v162, v10[7] + *((void *)v32 + 9) * v135, type metadata accessor for DeviceEvent);
          uint64_t v141 = v10[2];
          BOOL v65 = __OFADD__(v141, 1);
          uint64_t v142 = v141 + 1;
          if (v65) {
            goto LABEL_95;
          }
          _OWORD v10[2] = v142;
          uint64_t v10 = v200;
        }
        uint64_t v201 = v10;
        swift_bridgeObjectRelease();
        (*v160)(v167, v182);
        sub_10001CFB8(v177, (unint64_t)v178);
        swift_bridgeObjectRelease();
        sub_100BC72A8((uint64_t)v168, type metadata accessor for DeviceEvent);
        sub_100BC72A8(v41, (uint64_t (*)(void))type metadata accessor for LocalFindableAccessoryRecord);
LABEL_79:
        uint64_t v67 = (uint64_t)v171;
        goto LABEL_23;
      }
      uint64_t v119 = *v161;
      uint64_t v120 = v156;
      (*v161)(v156, v194, v182);
      sub_100BC6D18(v118, v154, type metadata accessor for DeviceEvent);
      uint64_t v121 = (uint64_t)v201;
      int v122 = swift_isUniquelyReferenced_nonNull_native();
      v200 = (void *)v121;
      uint64_t v201 = (void *)0x8000000000000000;
      unint64_t v124 = sub_1007240CC(v120);
      uint64_t v125 = *(void *)(v121 + 16);
      BOOL v126 = (v123 & 1) == 0;
      uint64_t v127 = v125 + v126;
      if (__OFADD__(v125, v126))
      {
        __break(1u);
LABEL_98:
        __break(1u);
        goto LABEL_99;
      }
      char v128 = v123;
      if (*(void *)(v121 + 24) >= v127)
      {
        unint64_t v41 = v194;
        if ((v122 & 1) == 0) {
          sub_100E83ED0();
        }
      }
      else
      {
        sub_100E714AC(v127, v122);
        unint64_t v129 = sub_1007240CC(v156);
        unint64_t v41 = v194;
        if ((v128 & 1) != (v130 & 1)) {
          goto LABEL_100;
        }
        unint64_t v124 = v129;
      }
      unint64_t isUniquelyReferenced_nonNull_native = (unint64_t)v192;
      uint64_t v143 = v200;
      uint64_t v144 = v12;
      if (v128)
      {
        sub_100BC63B4(v154, v200[7] + v124 * v114, type metadata accessor for DeviceEvent);
      }
      else
      {
        v200[(v124 >> 6) + 8] |= 1 << v124;
        v119(v143[6] + *(void *)(v159 + 72) * v124, v156, v182);
        sub_100BC6CB0(v154, v143[7] + v124 * v114, type metadata accessor for DeviceEvent);
        uint64_t v145 = v143[2];
        BOOL v65 = __OFADD__(v145, 1);
        uint64_t v146 = v145 + 1;
        if (v65) {
          goto LABEL_98;
        }
        v143[2] = v146;
        uint64_t v143 = v200;
      }
      uint64_t v8 = v184;
      unint64_t v147 = (unint64_t)v178;
      uint64_t v148 = v177;
      uint64_t v201 = v143;
      swift_bridgeObjectRelease();
      (*v160)(v156, v182);
      sub_10001CFB8(v148, v147);
      swift_bridgeObjectRelease();
      sub_100BC72A8(v157, type metadata accessor for DeviceEvent);
      sub_100BC72A8((uint64_t)v168, type metadata accessor for DeviceEvent);
      sub_100BC72A8(v41, (uint64_t (*)(void))type metadata accessor for LocalFindableAccessoryRecord);
      uint64_t v67 = (uint64_t)v171;
      uint64_t v12 = v144;
LABEL_23:
      uint64_t v68 = v12 + 1;
      if (v68 == v175)
      {
        swift_bridgeObjectRelease();
        goto LABEL_88;
      }
    }
    uint64_t v108 = (uint64_t)v107 + ((v185[80] + 32) & ~(unint64_t)v185[80]);
    char v109 = v107;
    sub_100BC6D18(v108, (uint64_t)v187, type metadata accessor for DeviceEvent);
    uint64_t v23 = (uint64_t)v109;
    swift_bridgeObjectRetain();
    if (v10 == (void *)1)
    {
LABEL_50:
      swift_bridgeObjectRelease();
      uint64_t v23 = (uint64_t)v169;
      sub_100BC6CB0((uint64_t)v187, (uint64_t)v169, type metadata accessor for DeviceEvent);
      uint64_t v110 = 0;
      unint64_t isUniquelyReferenced_nonNull_native = (unint64_t)v192;
      goto LABEL_52;
    }
    unint64_t isUniquelyReferenced_nonNull_native = 1;
    uint64_t v131 = v23;
    while (isUniquelyReferenced_nonNull_native < *(void *)(v131 + 16))
    {
      sub_100BC6D18(v108 + *((void *)v32 + 9) * isUniquelyReferenced_nonNull_native, (uint64_t)v30, type metadata accessor for DeviceEvent);
      uint64_t v132 = (uint64_t)v187;
      if (static Date.< infix(_:_:)())
      {
        sub_100BC72A8(v132, type metadata accessor for DeviceEvent);
        sub_100BC6CB0((uint64_t)v30, v132, type metadata accessor for DeviceEvent);
      }
      else
      {
        sub_100BC72A8((uint64_t)v30, type metadata accessor for DeviceEvent);
      }
      unint64_t v41 = v194;
      ++isUniquelyReferenced_nonNull_native;
      uint64_t v131 = v23;
      if (v10 == (void *)isUniquelyReferenced_nonNull_native) {
        goto LABEL_50;
      }
    }
    __break(1u);
LABEL_92:
    __break(1u);
LABEL_93:
    __break(1u);
LABEL_94:
    __break(1u);
LABEL_95:
    __break(1u);
LABEL_96:
    swift_once();
  }
  uint64_t v30 = (void (*)(uint64_t, unint64_t, uint64_t))(v177
                                                                + ((*(unsigned __int8 *)(v166 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v166 + 80)));
  uint64_t v51 = *(void *)(v166 + 72);
  LODWORD(v180) = enum case for HashAlgorithm.sha256(_:);
  *(void *)&long long v179 = isUniquelyReferenced_nonNull_native + 104;
  uint64_t v178 = (void (**)(char *, uint64_t))(isUniquelyReferenced_nonNull_native + 8);
  swift_bridgeObjectRetain();
  uint64_t v186 = _swiftEmptyDictionarySingleton;
  uint64_t v32 = (char *)v196;
  while (1)
  {
    uint64_t v197 = v50;
    sub_100BC6D18((uint64_t)v30, (uint64_t)v32, (uint64_t (*)(void))type metadata accessor for LocalFindableAccessoryRecord);
    uint64_t v52 = UUID.data.getter();
    unint64_t v11 = v53;
    uint64_t v54 = v188;
    uint64_t v55 = v195;
    (*(void (**)(char *, void, uint64_t))v179)(v188, v180, v195);
    uint64_t v8 = (char *)Data.hash(algorithm:)();
    uint64_t v12 = v56;
    sub_10001CFB8(v52, v11);
    (*v178)(v54, v55);
    uint64_t v23 = v181;
    sub_100BC6D18((uint64_t)v32, v181, (uint64_t (*)(void))type metadata accessor for LocalFindableAccessoryRecord);
    uint64_t v10 = v186;
    unint64_t isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v200 = v10;
    unint64_t v41 = sub_100724CDC((uint64_t)v8, v12);
    uint64_t v58 = v10[2];
    BOOL v59 = (v57 & 1) == 0;
    uint64_t v60 = v58 + v59;
    if (__OFADD__(v58, v59)) {
      goto LABEL_92;
    }
    unint64_t v11 = v57;
    if (v10[3] >= v60)
    {
      if ((isUniquelyReferenced_nonNull_native & 1) == 0) {
        sub_100E83F18();
      }
      goto LABEL_14;
    }
    sub_100E714F4(v60, isUniquelyReferenced_nonNull_native);
    uint64_t v61 = sub_100724CDC((uint64_t)v8, v12);
    if ((v11 & 1) != (v62 & 1)) {
      break;
    }
    unint64_t v41 = v61;
LABEL_14:
    uint64_t v10 = v200;
    uint64_t v186 = v200;
    if (v11)
    {
      sub_100BC63B4(v23, v200[7] + v41 * v51, (uint64_t (*)(void))type metadata accessor for LocalFindableAccessoryRecord);
    }
    else
    {
      v200[(v41 >> 6) + 8] |= 1 << v41;
      uint64_t v63 = (char **)(v10[6] + 16 * v41);
      *uint64_t v63 = v8;
      v63[1] = (char *)v12;
      sub_100BC6CB0(v23, v10[7] + v41 * v51, (uint64_t (*)(void))type metadata accessor for LocalFindableAccessoryRecord);
      uint64_t v64 = v10[2];
      BOOL v65 = __OFADD__(v64, 1);
      uint64_t v66 = v64 + 1;
      if (v65) {
        goto LABEL_93;
      }
      _OWORD v10[2] = v66;
      sub_1000361E0((uint64_t)v8, v12);
    }
    swift_bridgeObjectRelease();
    sub_10001CFB8((uint64_t)v8, v12);
    uint64_t v32 = (char *)v196;
    sub_100BC72A8((uint64_t)v196, (uint64_t (*)(void))type metadata accessor for LocalFindableAccessoryRecord);
    uint64_t v30 = (void (*)(uint64_t, unint64_t, uint64_t))((char *)v30 + v51);
    uint64_t v50 = (void *)((char *)v197 - 1);
    if (v197 == (void *)1)
    {
      swift_bridgeObjectRelease();
      uint64_t v8 = v184;
      unint64_t v11 = v189;
      unint64_t v41 = v194;
      goto LABEL_19;
    }
  }
LABEL_99:
  KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
LABEL_100:
  uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

uint64_t sub_100BC55A8@<X0>(_OWORD *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v111 = a3;
  unint64_t v112 = a1;
  uint64_t v113 = a2;
  uint64_t v99 = a4;
  uint64_t v105 = type metadata accessor for Date();
  uint64_t v110 = *(void *)(v105 - 8);
  uint64_t v4 = __chkstk_darwin(v105);
  uint64_t v108 = &v86[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __chkstk_darwin(v4);
  unint64_t v106 = &v86[-v6];
  uint64_t v97 = type metadata accessor for BeaconIdentifier();
  uint64_t v7 = __chkstk_darwin(v97);
  char v107 = &v86[-((v8 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __chkstk_darwin(v7);
  uint64_t v98 = &v86[-v9];
  uint64_t v10 = sub_10000588C(&qword_1016470A0);
  __chkstk_darwin(v10 - 8);
  uint64_t v96 = &v86[-((v11 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v94 = type metadata accessor for DeviceEventFormat.AttachmentInfoFormat(0);
  uint64_t v93 = *(void *)(v94 - 8);
  __chkstk_darwin(v94);
  os_log_type_t v95 = &v86[-((v12 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v13 = sub_10000588C(&qword_10163CF20);
  uint64_t v14 = __chkstk_darwin(v13 - 8);
  unint64_t v104 = &v86[-((v15 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __chkstk_darwin(v14);
  uint64_t v92 = &v86[-v16];
  uint64_t v17 = sub_10000588C(&qword_101647098);
  __chkstk_darwin(v17 - 8);
  unint64_t v100 = &v86[-((v18 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v102 = type metadata accessor for DeviceEventFormat.LocationFormat(0);
  uint64_t v101 = *(void *)(v102 - 8);
  uint64_t v19 = __chkstk_darwin(v102);
  unint64_t v91 = &v86[-((v20 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __chkstk_darwin(v19);
  uint64_t v90 = &v86[-v21];
  uint64_t v22 = sub_10000588C(&qword_10164E880);
  uint64_t v23 = __chkstk_darwin(v22 - 8);
  unint64_t v103 = &v86[-((v24 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __chkstk_darwin(v23);
  uint64_t v26 = &v86[-v25];
  uint64_t v27 = type metadata accessor for DeviceEventFormat(0);
  __chkstk_darwin(v27);
  uint64_t v29 = &v86[-((v28 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v30 = type metadata accessor for P256PublicKey();
  char v109 = *(unsigned char **)(v30 - 8);
  __chkstk_darwin(v30);
  uint64_t v32 = &v86[-((v31 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v33 = type metadata accessor for JSONDecoder.DateDecodingStrategy();
  uint64_t v34 = *(void *)(v33 - 8);
  __chkstk_darwin(v33);
  uint64_t v36 = &v86[-((v35 + 15) & 0xFFFFFFFFFFFFFFF0)];
  type metadata accessor for JSONDecoder();
  swift_allocObject();
  uint64_t v37 = JSONDecoder.init()();
  *uint64_t v36 = sub_100BC3200;
  v36[1] = 0;
  (*(void (**)(void *, void, uint64_t))(v34 + 104))(v36, enum case for JSONDecoder.DateDecodingStrategy.custom(_:), v33);
  dispatch thunk of JSONDecoder.dateDecodingStrategy.setter();
  sub_10001D0D8();
  uint64_t v38 = v119;
  dispatch thunk of JSONDecoder.decode<A>(_:from:)();
  if (v38) {
    return swift_release();
  }
  uint64_t v39 = (uint64_t)v109;
  unint64_t v112 = v26;
  uint64_t v113 = v27;
  uint64_t v119 = v37;
  uint64_t v40 = v110;
  v118[0] = v114;
  v118[1] = v115;
  v118[2] = v116;
  v118[3] = v117;
  uint64_t v41 = v111 + *(int *)(type metadata accessor for LocalFindableAccessoryRecord() + 60);
  P256PrivateKey.publicKey.getter();
  uint64_t v43 = sub_100BC641C(v118, v41);
  unint64_t v45 = v44;
  (*(void (**)(unsigned char *, uint64_t))(v39 + 8))(v32, v30);
  sub_100BC7260(&qword_10165AA08, (void (*)(uint64_t))type metadata accessor for DeviceEventFormat);
  uint64_t v46 = v113;
  dispatch thunk of JSONDecoder.decode<A>(_:from:)();
  uint64_t v88 = v43;
  int v47 = byte_101378C0A[(char)v29[*(int *)(v46 + 24)]];
  char v109 = v29;
  uint64_t v48 = (uint64_t)v29;
  uint64_t v49 = v100;
  sub_10001D074(v48, (uint64_t)v100, &qword_101647098);
  uint64_t v50 = v102;
  int v51 = (*(uint64_t (**)(unsigned char *, uint64_t, uint64_t))(v101 + 48))(v49, 1, v102);
  unint64_t v89 = v45;
  int v87 = v47;
  if (v51 == 1)
  {
    sub_10001DAB4((uint64_t)v49, &qword_101647098);
    uint64_t v52 = type metadata accessor for DeviceEvent.Location(0);
    (*(void (**)(_OWORD *, uint64_t, uint64_t, uint64_t))(*(void *)(v52 - 8) + 56))(v112, 1, 1, v52);
    uint64_t v53 = v40;
  }
  else
  {
    uint64_t v54 = (uint64_t)v49;
    uint64_t v55 = v90;
    sub_100BC6CB0(v54, (uint64_t)v90, type metadata accessor for DeviceEventFormat.LocationFormat);
    uint64_t v56 = (uint64_t)v55;
    unint64_t v57 = v91;
    sub_100BC6CB0(v56, (uint64_t)v91, type metadata accessor for DeviceEventFormat.LocationFormat);
    uint64_t v58 = v50;
    BOOL v59 = v112;
    _OWORD *v112 = *(_OWORD *)v57;
    *((void *)v59 + 2) = *((void *)v57 + 2);
    uint64_t v60 = &v57[*(int *)(v58 + 28)];
    uint64_t v61 = type metadata accessor for DeviceEvent.Location(0);
    uint64_t v53 = v40;
    (*(void (**)(char *, unsigned char *, uint64_t))(v40 + 32))((char *)v59 + *(int *)(v61 + 28), v60, v105);
    (*(void (**)(_OWORD *, void, uint64_t, uint64_t))(*(void *)(v61 - 8) + 56))(v59, 0, 1, v61);
  }
  uint64_t v62 = (uint64_t)v92;
  uint64_t v63 = v96;
  uint64_t v64 = (uint64_t)v95;
  uint64_t v65 = v94;
  uint64_t v66 = v93;
  sub_10001D074((uint64_t)&v109[*(int *)(v46 + 20)], (uint64_t)v96, &qword_1016470A0);
  if ((*(unsigned int (**)(unsigned char *, uint64_t, uint64_t))(v66 + 48))(v63, 1, v65) == 1)
  {
    sub_10001DAB4((uint64_t)v63, &qword_1016470A0);
    uint64_t v67 = type metadata accessor for DeviceEvent.AttachmentInfo(0);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v67 - 8) + 56))(v62, 1, 1, v67);
  }
  else
  {
    sub_100BC6CB0((uint64_t)v63, v64, type metadata accessor for DeviceEventFormat.AttachmentInfoFormat);
    uint64_t v68 = type metadata accessor for UUID();
    uint64_t v69 = *(void *)(v68 - 8);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v69 + 32))(v62, v64, v68);
    uint64_t v70 = type metadata accessor for DeviceEvent.AttachmentInfo(0);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v69 + 56))(v62 + *(int *)(v70 + 20), 1, 1, v68);
    (*(void (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v70 - 8) + 56))(v62, 0, 1, v70);
  }
  uint64_t v71 = v99;
  unint64_t v72 = v106;
  uint64_t v73 = (uint64_t)v98;
  uint64_t v74 = v97;
  uint64_t v75 = v111;
  uid_t v76 = getuid();
  sub_100DC5FC0(v76);
  uint64_t v77 = v73 + *(int *)(v74 + 20);
  uint64_t v78 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v78 - 8) + 16))(v77, v75, v78);
  uint64_t v79 = v105;
  (*(void (**)(unsigned char *, unsigned char *, uint64_t))(v53 + 16))(v72, &v109[*(int *)(v113 + 28)], v105);
  uint64_t v80 = v53;
  uint64_t v81 = v112;
  unint64_t v82 = v103;
  sub_10001D074((uint64_t)v112, (uint64_t)v103, &qword_10164E880);
  os_log_type_t v83 = v104;
  sub_10001D074(v62, (uint64_t)v104, &qword_10163CF20);
  sub_100BC6D18(v73, (uint64_t)v107, (uint64_t (*)(void))type metadata accessor for BeaconIdentifier);
  static Date.trustedNow.getter((uint64_t)v108);
  sub_10001CFB8(v88, v89);
  sub_10001D12C((uint64_t *)v118);
  swift_release();
  sub_100BC72A8(v73, (uint64_t (*)(void))type metadata accessor for BeaconIdentifier);
  sub_10001DAB4(v62, &qword_10163CF20);
  sub_10001DAB4((uint64_t)v81, &qword_10164E880);
  sub_100BC72A8((uint64_t)v109, type metadata accessor for DeviceEventFormat);
  *(void *)uint64_t v71 = 0;
  *(unsigned char *)(v71 + 8) = 1;
  *(unsigned char *)(v71 + 9) = v87;
  uint64_t v84 = (int *)type metadata accessor for DeviceEvent(0);
  uint64_t v85 = *(void (**)(uint64_t, unsigned char *, uint64_t))(v80 + 32);
  v85(v71 + v84[6], v106, v79);
  sub_10001D608((uint64_t)v82, v71 + v84[7], &qword_10164E880);
  sub_10001D608((uint64_t)v83, v71 + v84[8], &qword_10163CF20);
  sub_100BC6CB0((uint64_t)v107, v71 + v84[9], (uint64_t (*)(void))type metadata accessor for BeaconIdentifier);
  return ((uint64_t (*)(uint64_t, unsigned char *, uint64_t))v85)(v71 + v84[10], v108, v79);
}

uint64_t type metadata accessor for PencilLocationsFetcher()
{
  return self;
}

uint64_t sub_100BC62B4()
{
  return sub_100BC7260(&qword_10165AA00, (void (*)(uint64_t))type metadata accessor for DeviceEvent);
}

uint64_t sub_100BC62FC(void *a1)
{
  sub_10001CD44(a1, a1[3]);
  uint64_t result = dispatch thunk of Decoder.singleValueContainer()();
  if (!v1)
  {
    sub_10001CD44(v3, v3[3]);
    dispatch thunk of SingleValueDecodingContainer.decode(_:)();
    Date.init(timeIntervalSince1970:)();
    return _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)v3);
  }
  return result;
}

uint64_t sub_100BC63B4(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 40))(a2, a1, v5);
  return a2;
}

uint64_t sub_100BC641C(_OWORD *a1, uint64_t a2)
{
  uint64_t v51 = a2;
  uint64_t v55 = a1;
  uint64_t v2 = type metadata accessor for AES.GCM.Nonce();
  __chkstk_darwin(v2 - 8);
  uint64_t v52 = (char *)&v41 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = type metadata accessor for AES.GCM.SealedBox();
  uint64_t v49 = *(void *)(v4 - 8);
  uint64_t v50 = v4;
  __chkstk_darwin(v4);
  uint64_t v6 = (char *)&v41 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for SymmetricKey();
  uint64_t v53 = *(void *)(v7 - 8);
  __chkstk_darwin(v7);
  uint64_t v9 = (char *)&v41 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = type metadata accessor for P256.Signing.ECDSASignature();
  uint64_t v54 = *(void *)(v10 - 8);
  __chkstk_darwin(v10);
  uint64_t v12 = (char *)&v41 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = type metadata accessor for P256.Signing.PublicKey();
  uint64_t v56 = *(void *)(v13 - 8);
  __chkstk_darwin(v13);
  uint64_t v15 = (char *)&v41 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for P256PublicKey();
  sub_100BC7260(&qword_10165AA10, (void (*)(uint64_t))&type metadata accessor for P256PublicKey);
  *(void *)&long long v58 = KeyRepresenting.rawValue.getter();
  *((void *)&v58 + 1) = v16;
  uint64_t v17 = v61;
  P256.Signing.PublicKey.init<A>(rawRepresentation:)();
  if (!v17)
  {
    unint64_t v44 = v6;
    uint64_t v45 = v7;
    uint64_t v46 = v9;
    uint64_t v61 = v15;
    uint64_t v47 = v10;
    uint64_t v48 = v13;
    uint64_t v18 = v55;
    long long v60 = *v55;
    long long v58 = *v55;
    sub_100061E54((uint64_t)&v60);
    sub_1000362FC();
    P256.Signing.ECDSASignature.init<A>(rawRepresentation:)();
    uint64_t v43 = 0;
    long long v59 = v18[3];
    uint64_t v19 = *((void *)v18 + 2);
    unint64_t v20 = *((void *)v18 + 3);
    long long v57 = v59;
    sub_100061E54((uint64_t)&v59);
    sub_100061E54((uint64_t)&v59);
    sub_1000361E0(v19, v20);
    sub_100A42CBC(v19, v20);
    uint64_t v42 = v19;
    unint64_t v41 = v20;
    sub_10001CFB8(v19, v20);
    sub_1000CE9DC((uint64_t)&v59);
    long long v21 = v57;
    uint64_t v22 = *((void *)v18 + 4);
    unint64_t v23 = *((void *)v18 + 5);
    long long v58 = v57;
    sub_1000361E0(v22, v23);
    sub_1000361E0(v21, *((unint64_t *)&v21 + 1));
    sub_100A42CBC(v22, v23);
    sub_10001CFB8(v22, v23);
    sub_10001CFB8(v21, *((unint64_t *)&v21 + 1));
    long long v24 = v58;
    if (P256.Signing.PublicKey.isValidSignature<A>(_:for:)())
    {
      uint64_t v55 = (_OWORD *)*((void *)&v24 + 1);
      type metadata accessor for SymmetricKey256();
      sub_100BC7260(&qword_10163AFF8, (void (*)(uint64_t))&type metadata accessor for SymmetricKey256);
      *(void *)&long long v58 = KeyRepresenting.rawValue.getter();
      *((void *)&v58 + 1) = v25;
      SymmetricKey.init<A>(data:)();
      long long v58 = v59;
      sub_100061E54((uint64_t)&v59);
      uint64_t v26 = v43;
      AES.GCM.Nonce.init<A>(data:)();
      uint64_t v10 = v47;
      if (v26)
      {
        sub_10001CFB8(v24, (unint64_t)v55);
        (*(void (**)(void, uint64_t))(v53 + 8))(*((void *)&v24 + 1), v45);
        (*(void (**)(char *, uint64_t))(v54 + 8))(v12, v10);
        (*(void (**)(char *, uint64_t))(v56 + 8))(v61, v48);
      }
      else
      {
        *(void *)&long long v58 = v42;
        *((void *)&v58 + 1) = v41;
        *(void *)&long long v57 = v22;
        *((void *)&v57 + 1) = v23;
        sub_1000361E0(v42, v41);
        sub_1000361E0(v22, v23);
        AES.GCM.SealedBox.init<A, B>(nonce:ciphertext:tag:)();
        uint64_t v36 = v56;
        uint64_t v37 = v45;
        uint64_t v38 = v53;
        uint64_t v39 = v46;
        uint64_t v10 = static AES.GCM.open(_:using:)();
        sub_10001CFB8(v24, (unint64_t)v55);
        (*(void (**)(char *, uint64_t))(v49 + 8))(v44, v50);
        (*(void (**)(char *, uint64_t))(v38 + 8))(v39, v37);
        (*(void (**)(char *, uint64_t))(v54 + 8))(v12, v47);
        (*(void (**)(char *, uint64_t))(v36 + 8))(v61, v48);
      }
    }
    else
    {
      if (qword_101636FC0 != -1) {
        swift_once();
      }
      uint64_t v27 = type metadata accessor for Logger();
      sub_100010324(v27, (uint64_t)qword_10165A908);
      uint64_t v28 = Logger.logObject.getter();
      os_log_type_t v29 = static os_log_type_t.error.getter();
      BOOL v30 = os_log_type_enabled(v28, v29);
      uint64_t v31 = v56;
      uint64_t v32 = v48;
      uint64_t v33 = v54;
      if (v30)
      {
        uint64_t v34 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)uint64_t v34 = 0;
        _os_log_impl((void *)&_mh_execute_header, v28, v29, "Invalid ECDSASignature", v34, 2u);
        swift_slowDealloc();
      }

      uint64_t v10 = type metadata accessor for CryptoError();
      sub_100BC7260(&qword_10165AA18, (void (*)(uint64_t))&type metadata accessor for CryptoError);
      swift_allocError();
      (*(void (**)(uint64_t, void, uint64_t))(*(void *)(v10 - 8) + 104))(v35, enum case for CryptoError.invalidSignature(_:), v10);
      swift_willThrow();
      sub_10001CFB8(v24, *((unint64_t *)&v24 + 1));
      (*(void (**)(char *, uint64_t))(v33 + 8))(v12, v47);
      (*(void (**)(char *, uint64_t))(v31 + 8))(v61, v32);
    }
  }
  return v10;
}

uint64_t sub_100BC6CB0(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 32))(a2, a1, v5);
  return a2;
}

uint64_t sub_100BC6D18(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

unint64_t sub_100BC6D80()
{
  unint64_t result = qword_10165AA28;
  if (!qword_10165AA28)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10165AA28);
  }
  return result;
}

unint64_t sub_100BC6DD4()
{
  unint64_t result = qword_10165AA30;
  if (!qword_10165AA30)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10165AA30);
  }
  return result;
}

uint64_t sub_100BC6E28()
{
  uint64_t v1 = (int *)type metadata accessor for DeviceEvent(0);
  uint64_t v2 = *(unsigned __int8 *)(*((void *)v1 - 1) + 80);
  uint64_t v3 = (v2 + 40) & ~v2;
  uint64_t v22 = *(void *)(*((void *)v1 - 1) + 64);
  swift_unknownObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v4 = v0 + v3;
  uint64_t v5 = v0 + v3 + v1[6];
  uint64_t v6 = type metadata accessor for Date();
  uint64_t v7 = *(void (**)(uint64_t, uint64_t))(*(void *)(v6 - 8) + 8);
  v7(v5, v6);
  uint64_t v8 = v0 + v3 + v1[7];
  uint64_t v9 = type metadata accessor for DeviceEvent.Location(0);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 48))(v8, 1, v9)) {
    v7(v8 + *(int *)(v9 + 28), v6);
  }
  unint64_t v23 = v7;
  uint64_t v10 = v4 + v1[8];
  uint64_t v11 = type metadata accessor for DeviceEvent.AttachmentInfo(0);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v11 - 8) + 48))(v10, 1, v11))
  {
    uint64_t v12 = type metadata accessor for UUID();
    uint64_t v13 = *(void *)(v12 - 8);
    long long v21 = *(void (**)(uint64_t, uint64_t))(v13 + 8);
    v21(v10, v12);
    uint64_t v14 = v10 + *(int *)(v11 + 20);
    if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v13 + 48))(v14, 1, v12)) {
      v21(v14, v12);
    }
  }
  uint64_t v15 = v2 | 7;
  uint64_t v16 = v4 + v1[9];
  uint64_t v17 = type metadata accessor for UUID();
  uint64_t v18 = *(void (**)(uint64_t, uint64_t))(*(void *)(v17 - 8) + 8);
  v18(v16, v17);
  uint64_t v19 = type metadata accessor for BeaconIdentifier();
  v18(v16 + *(int *)(v19 + 20), v17);
  v23(v4 + v1[10], v6);

  return _swift_deallocObject(v0, v3 + v22, v15);
}

uint64_t sub_100BC712C(uint64_t a1)
{
  uint64_t v4 = *(void *)(type metadata accessor for DeviceEvent(0) - 8);
  uint64_t v5 = v1[2];
  uint64_t v6 = v1[3];
  uint64_t v7 = v1[4];
  uint64_t v8 = (uint64_t)v1 + ((*(unsigned __int8 *)(v4 + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80));
  uint64_t v9 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v9;
  void *v9 = v2;
  v9[1] = sub_10001D2E4;
  return sub_1011090F0(a1, v5, v6, v7, v8);
}

uint64_t sub_100BC7228()
{
  swift_release();

  return _swift_deallocObject(v0, 32, 7);
}

uint64_t sub_100BC7260(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_100BC72A8(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

unsigned char *storeEnumTagSinglePayload for PencilLocationsFetcher.Error(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 3 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 3) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFD) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFC)
  {
    unsigned int v6 = ((a2 - 253) >> 8) + 1;
    *uint64_t result = a2 + 3;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x100BC73D4);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 3;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for PencilLocationsFetcher.Error()
{
  return &type metadata for PencilLocationsFetcher.Error;
}

unint64_t sub_100BC7410()
{
  unint64_t result = qword_10165AA40;
  if (!qword_10165AA40)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10165AA40);
  }
  return result;
}

uint64_t sub_100BC7464()
{
  sub_10000588C(&qword_101648048);
  unsafeFromAsyncTask<A>(_:)();
  uint64_t v0 = qword_101636FC8;
  uint64_t v1 = swift_bridgeObjectRetain();
  if (v0 != -1) {
    uint64_t v1 = swift_once();
  }
  __chkstk_darwin(v1);
  OSAllocatedUnfairLock.callAsFunction<A>(_:)();
  sub_10015B4A8(v4, 0);
  uint64_t v2 = sub_10015B4A8(v4, 0);
  if (qword_101636FC8 != -1) {
    uint64_t v2 = swift_once();
  }
  __chkstk_darwin(v2);
  sub_10000588C(&qword_101644320);
  OSAllocatedUnfairLock.callAsFunction<A>(_:)();
  return v4;
}

uint64_t sub_100BC7638()
{
  sub_10000588C(&qword_101648048);
  unsafeFromAsyncTask<A>(_:)();
  uint64_t v0 = qword_101636FC8;
  uint64_t v1 = swift_bridgeObjectRetain();
  if (v0 != -1) {
    uint64_t v1 = swift_once();
  }
  __chkstk_darwin(v1);
  OSAllocatedUnfairLock.callAsFunction<A>(_:)();
  sub_10015B4A8(v4, 0);
  uint64_t v2 = sub_10015B4A8(v4, 0);
  if (qword_101636FC8 != -1) {
    uint64_t v2 = swift_once();
  }
  __chkstk_darwin(v2);
  sub_10000588C(&qword_101654A30);
  OSAllocatedUnfairLock.callAsFunction<A>(_:)();
  return v4;
}

uint64_t sub_100BC780C()
{
  sub_10000588C((uint64_t *)&unk_101638CE0);
  uint64_t result = swift_allocObject();
  *(_DWORD *)(result + 16) = 0;
  qword_10165AA48 = result;
  return result;
}

void sub_100BC7844()
{
  off_10165AA50 = &_swiftEmptyDictionarySingleton;
}

void sub_100BC7858()
{
  off_10165AA58 = &_swiftEmptyDictionarySingleton;
}

uint64_t sub_100BC786C(uint64_t a1)
{
  uint64_t v1 = 1 << *(unsigned char *)(a1 + 32);
  uint64_t v2 = -1;
  if (v1 < 64) {
    uint64_t v2 = ~(-1 << v1);
  }
  unint64_t v3 = v2 & *(void *)(a1 + 56);
  int64_t v23 = (unint64_t)(v1 + 63) >> 6;
  uint64_t result = swift_bridgeObjectRetain();
  int64_t v5 = 0;
  if (!v3) {
    goto LABEL_5;
  }
LABEL_4:
  unint64_t v6 = __clz(__rbit64(v3));
  v3 &= v3 - 1;
  int64_t v25 = v5;
  for (unint64_t i = v6 | (v5 << 6); ; unint64_t i = __clz(__rbit64(v9)) + (v10 << 6))
  {
    uint64_t v12 = (uint64_t *)(*(void *)(a1 + 48) + 40 * i);
    uint64_t v13 = *v12;
    uint64_t v14 = v12[1];
    uint64_t v16 = v12[2];
    uint64_t v15 = v12[3];
    uint64_t v17 = v12[4];
    uint64_t v18 = qword_101636FD0;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    if (v18 != -1) {
      swift_once();
    }
    swift_beginAccess();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v27 = off_10165AA50;
    off_10165AA50 = (_UNKNOWN *)0x8000000000000000;
    sub_10016C0FC(v13, v14, v15, v17, isUniquelyReferenced_nonNull_native);
    off_10165AA50 = v27;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_endAccess();
    if (qword_101636FD8 != -1) {
      swift_once();
    }
    sub_10000588C(&qword_1016552B0);
    uint64_t v20 = swift_allocObject();
    *(_OWORD *)(v20 + 16) = xmmword_101342130;
    *(void *)(v20 + 32) = v13;
    *(void *)(v20 + 40) = v14;
    uint64_t v26 = v20;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    sub_1004429C0(v16);
    swift_beginAccess();
    char v21 = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v28 = off_10165AA58;
    off_10165AA58 = (_UNKNOWN *)0x8000000000000000;
    sub_100171694(v26, v15, v17, v21);
    off_10165AA58 = v28;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_endAccess();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t result = swift_bridgeObjectRelease();
    int64_t v5 = v25;
    if (v3) {
      goto LABEL_4;
    }
LABEL_5:
    int64_t v8 = v5 + 1;
    if (__OFADD__(v5, 1))
    {
      __break(1u);
      goto LABEL_27;
    }
    if (v8 >= v23) {
      return swift_release();
    }
    unint64_t v9 = *(void *)(v22 + 8 * v8);
    int64_t v10 = v5 + 1;
    if (!v9)
    {
      int64_t v10 = v5 + 2;
      if (v5 + 2 >= v23) {
        return swift_release();
      }
      unint64_t v9 = *(void *)(v22 + 8 * v10);
      if (!v9)
      {
        int64_t v10 = v5 + 3;
        if (v5 + 3 >= v23) {
          return swift_release();
        }
        unint64_t v9 = *(void *)(v22 + 8 * v10);
        if (!v9) {
          break;
        }
      }
    }
LABEL_18:
    unint64_t v3 = (v9 - 1) & v9;
    int64_t v25 = v10;
  }
  uint64_t v11 = v5 + 4;
  if (v5 + 4 >= v23) {
    return swift_release();
  }
  unint64_t v9 = *(void *)(v22 + 8 * v11);
  if (v9)
  {
    int64_t v10 = v5 + 4;
    goto LABEL_18;
  }
  while (1)
  {
    int64_t v10 = v11 + 1;
    if (__OFADD__(v11, 1)) {
      break;
    }
    if (v10 >= v23) {
      return swift_release();
    }
    unint64_t v9 = *(void *)(v22 + 8 * v10);
    ++v11;
    if (v9) {
      goto LABEL_18;
    }
  }
LABEL_27:
  __break(1u);
  return result;
}

uint64_t sub_100BC7BE8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  if (qword_101636FD0 != -1) {
    swift_once();
  }
  swift_beginAccess();
  unint64_t v6 = off_10165AA50;
  if (*((void *)off_10165AA50 + 2))
  {
    swift_bridgeObjectRetain();
    uint64_t v7 = sub_100723FF4(a1, a2);
    if (v8)
    {
      unint64_t v9 = (uint64_t *)(v6[7] + 16 * v7);
      uint64_t v11 = *v9;
      uint64_t v10 = v9[1];
      swift_bridgeObjectRetain();
    }
    else
    {
      uint64_t v11 = 0;
      uint64_t v10 = 0;
    }
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v11 = 0;
    uint64_t v10 = 0;
  }
  *a3 = v11;
  a3[1] = v10;
  return swift_endAccess();
}

uint64_t sub_100BC7CE0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  if (qword_101636FD8 != -1) {
    swift_once();
  }
  swift_beginAccess();
  unint64_t v6 = off_10165AA58;
  if (!*((void *)off_10165AA58 + 2)) {
    goto LABEL_7;
  }
  swift_bridgeObjectRetain();
  uint64_t v7 = sub_100723FF4(a1, a2);
  if ((v8 & 1) == 0)
  {
    swift_bridgeObjectRelease();
LABEL_7:
    uint64_t result = swift_endAccess();
    unint64_t v9 = _swiftEmptyArrayStorage;
    goto LABEL_8;
  }
  unint64_t v9 = *(void **)(v6[7] + 8 * v7);
  swift_endAccess();
  swift_bridgeObjectRetain();
  uint64_t result = swift_bridgeObjectRelease();
LABEL_8:
  *a3 = v9;
  return result;
}

uint64_t sub_100BC7DD8()
{
  sub_10000588C((uint64_t *)&unk_101638CE0);
  uint64_t result = swift_allocObject();
  *(_DWORD *)(result + 16) = 0;
  qword_10165AA60 = result;
  return result;
}

void sub_100BC7E10()
{
  qword_10165AA68 = (uint64_t)&_swiftEmptyDictionarySingleton;
}

void sub_100BC7E24()
{
  qword_10165AA70 = (uint64_t)&_swiftEmptyDictionarySingleton;
}

uint64_t sub_100BC7E38(uint64_t a1)
{
  uint64_t v1 = 1 << *(unsigned char *)(a1 + 32);
  uint64_t v2 = -1;
  if (v1 < 64) {
    uint64_t v2 = ~(-1 << v1);
  }
  unint64_t v3 = v2 & *(void *)(a1 + 56);
  int64_t v23 = (unint64_t)(v1 + 63) >> 6;
  uint64_t result = swift_bridgeObjectRetain();
  int64_t v5 = 0;
  if (!v3) {
    goto LABEL_5;
  }
LABEL_4:
  unint64_t v6 = __clz(__rbit64(v3));
  v3 &= v3 - 1;
  int64_t v25 = v5;
  for (unint64_t i = v6 | (v5 << 6); ; unint64_t i = __clz(__rbit64(v9)) + (v10 << 6))
  {
    uint64_t v12 = (uint64_t *)(*(void *)(a1 + 48) + 40 * i);
    uint64_t v13 = *v12;
    uint64_t v14 = v12[1];
    uint64_t v16 = v12[2];
    uint64_t v15 = v12[3];
    uint64_t v17 = v12[4];
    uint64_t v18 = qword_101636FE8;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    if (v18 != -1) {
      swift_once();
    }
    swift_beginAccess();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v27 = qword_10165AA68;
    qword_10165AA68 = 0x8000000000000000;
    sub_10016C0FC(v13, v14, v15, v17, isUniquelyReferenced_nonNull_native);
    qword_10165AA68 = v27;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_endAccess();
    if (qword_101636FF0 != -1) {
      swift_once();
    }
    sub_10000588C(&qword_1016552B0);
    uint64_t v20 = swift_allocObject();
    *(_OWORD *)(v20 + 16) = xmmword_101342130;
    *(void *)(v20 + 32) = v13;
    *(void *)(v20 + 40) = v14;
    uint64_t v26 = v20;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    sub_1004429C0(v16);
    swift_beginAccess();
    char v21 = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v28 = qword_10165AA70;
    qword_10165AA70 = 0x8000000000000000;
    sub_100171694(v26, v15, v17, v21);
    qword_10165AA70 = v28;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_endAccess();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t result = swift_bridgeObjectRelease();
    int64_t v5 = v25;
    if (v3) {
      goto LABEL_4;
    }
LABEL_5:
    int64_t v8 = v5 + 1;
    if (__OFADD__(v5, 1))
    {
      __break(1u);
      goto LABEL_27;
    }
    if (v8 >= v23) {
      return swift_release();
    }
    unint64_t v9 = *(void *)(v22 + 8 * v8);
    int64_t v10 = v5 + 1;
    if (!v9)
    {
      int64_t v10 = v5 + 2;
      if (v5 + 2 >= v23) {
        return swift_release();
      }
      unint64_t v9 = *(void *)(v22 + 8 * v10);
      if (!v9)
      {
        int64_t v10 = v5 + 3;
        if (v5 + 3 >= v23) {
          return swift_release();
        }
        unint64_t v9 = *(void *)(v22 + 8 * v10);
        if (!v9) {
          break;
        }
      }
    }
LABEL_18:
    unint64_t v3 = (v9 - 1) & v9;
    int64_t v25 = v10;
  }
  uint64_t v11 = v5 + 4;
  if (v5 + 4 >= v23) {
    return swift_release();
  }
  unint64_t v9 = *(void *)(v22 + 8 * v11);
  if (v9)
  {
    int64_t v10 = v5 + 4;
    goto LABEL_18;
  }
  while (1)
  {
    int64_t v10 = v11 + 1;
    if (__OFADD__(v11, 1)) {
      break;
    }
    if (v10 >= v23) {
      return swift_release();
    }
    unint64_t v9 = *(void *)(v22 + 8 * v10);
    ++v11;
    if (v9) {
      goto LABEL_18;
    }
  }
LABEL_27:
  __break(1u);
  return result;
}

Swift::Int sub_100BC81B4()
{
  uint64_t v1 = *(void *)(v0 + 16);
  Hasher.init(_seed:)();
  String.hash(into:)();
  Swift::UInt v2 = *(void *)(v1 + 16);
  Hasher._combine(_:)(v2);
  if (v2)
  {
    uint64_t v3 = v1 + 40;
    do
    {
      swift_bridgeObjectRetain();
      String.hash(into:)();
      swift_bridgeObjectRelease();
      v3 += 16;
      --v2;
    }
    while (v2);
  }
  String.hash(into:)();
  return Hasher._finalize()();
}

uint64_t sub_100BC8270()
{
  uint64_t v1 = *(void *)(v0 + 16);
  String.hash(into:)();
  Swift::UInt v2 = *(void *)(v1 + 16);
  Hasher._combine(_:)(v2);
  if (v2)
  {
    uint64_t v3 = v1 + 40;
    do
    {
      swift_bridgeObjectRetain();
      String.hash(into:)();
      swift_bridgeObjectRelease();
      v3 += 16;
      --v2;
    }
    while (v2);
  }

  return String.hash(into:)();
}

Swift::Int sub_100BC831C()
{
  uint64_t v1 = *(void *)(v0 + 16);
  Hasher.init(_seed:)();
  String.hash(into:)();
  Swift::UInt v2 = *(void *)(v1 + 16);
  Hasher._combine(_:)(v2);
  if (v2)
  {
    uint64_t v3 = v1 + 40;
    do
    {
      swift_bridgeObjectRetain();
      String.hash(into:)();
      swift_bridgeObjectRelease();
      v3 += 16;
      --v2;
    }
    while (v2);
  }
  String.hash(into:)();
  return Hasher._finalize()();
}

uint64_t sub_100BC83D4(uint64_t a1, uint64_t a2)
{
  long long v2 = *(_OWORD *)(a1 + 16);
  v5[0] = *(_OWORD *)a1;
  v5[1] = v2;
  uint64_t v6 = *(void *)(a1 + 32);
  long long v3 = *(_OWORD *)(a2 + 16);
  v7[0] = *(_OWORD *)a2;
  v7[1] = v3;
  uint64_t v8 = *(void *)(a2 + 32);
  return sub_100BC8FB0((uint64_t)v5, (uint64_t)v7) & 1;
}

uint64_t sub_100BC8420(uint64_t a1)
{
  v1[2] = a1;
  uint64_t v2 = type metadata accessor for Handle();
  v1[3] = v2;
  v1[4] = *(void *)(v2 - 8);
  v1[5] = swift_task_alloc();
  v1[6] = swift_task_alloc();
  uint64_t v3 = type metadata accessor for Friend();
  v1[7] = v3;
  v1[8] = *(void *)(v3 - 8);
  v1[9] = swift_task_alloc();
  v1[10] = swift_task_alloc();
  uint64_t v4 = type metadata accessor for ClientOrigin();
  v1[11] = v4;
  v1[12] = *(void *)(v4 - 8);
  v1[13] = swift_task_alloc();
  type metadata accessor for RequestOrigin();
  v1[14] = swift_task_alloc();
  return _swift_task_switch(sub_100BC85E4, 0, 0);
}

uint64_t sub_100BC85E4()
{
  (*(void (**)(void, void, void))(v0[12] + 104))(v0[13], enum case for ClientOrigin.other(_:), v0[11]);
  RequestOrigin.init(_:)();
  type metadata accessor for Session();
  swift_allocObject();
  v0[15] = Session.init(_:)();
  uint64_t v1 = (void *)swift_task_alloc();
  v0[16] = v1;
  *uint64_t v1 = v0;
  v1[1] = sub_100BC86D4;
  return Session.friendsFollowingMyLocation()();
}

uint64_t sub_100BC86D4(uint64_t a1)
{
  uint64_t v3 = *v2;
  *(void *)(v3 + 136) = a1;
  *(void *)(v3 + 144) = v1;
  swift_task_dealloc();
  if (v1)
  {
    uint64_t v4 = sub_100BC8B30;
  }
  else
  {
    swift_release();
    uint64_t v4 = sub_100BC87F0;
  }
  return _swift_task_switch(v4, 0, 0);
}

uint64_t sub_100BC87F0()
{
  uint64_t v1 = v0[17];
  uint64_t v2 = *(void *)(v1 + 16);
  if (v2)
  {
    uint64_t v3 = v0[8];
    uint64_t v34 = *(void (**)(uint64_t, uint64_t, uint64_t))(v3 + 16);
    uint64_t v4 = v1 + ((*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80));
    uint64_t v32 = (void (**)(uint64_t, uint64_t))(v0[4] + 8);
    uint64_t v33 = *(void *)(v3 + 72);
    uint64_t v35 = (void (**)(uint64_t, uint64_t))(v3 + 8);
    swift_bridgeObjectRetain();
    int64_t v5 = _swiftEmptyArrayStorage;
    do
    {
      uint64_t v41 = v2;
      uint64_t v42 = v5;
      uint64_t v9 = v0[9];
      uint64_t v8 = v0[10];
      uint64_t v11 = v0[6];
      uint64_t v10 = v0[7];
      uint64_t v12 = v0[3];
      v34(v8, v4, v10);
      v34(v9, v8, v10);
      Friend.handle.getter();
      uint64_t v13 = Handle.serverID.getter();
      uint64_t v15 = v14;
      uint64_t v16 = *v32;
      (*v32)(v11, v12);
      uint64_t v18 = v0[9];
      uint64_t v17 = v0[10];
      uint64_t v19 = v0[7];
      if (v15)
      {
        uint64_t v40 = v13;
        uint64_t v20 = v0[5];
        uint64_t v36 = v0[10];
        uint64_t v21 = v0[3];
        Friend.handle.getter();
        uint64_t v22 = Handle.identifier.getter();
        uint64_t v38 = v23;
        uint64_t v39 = v22;
        v16(v20, v21);
        Friend.handle.getter();
        uint64_t v37 = Handle.siblingIdentifiers.getter();
        long long v24 = *v35;
        (*v35)(v18, v19);
        v16(v20, v21);
        v24(v36, v19);
        int64_t v5 = v42;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          int64_t v5 = sub_100A720B4(0, v42[2] + 1, 1, v42);
        }
        uint64_t v7 = v41;
        unint64_t v26 = v5[2];
        unint64_t v25 = v5[3];
        if (v26 >= v25 >> 1) {
          int64_t v5 = sub_100A720B4((void *)(v25 > 1), v26 + 1, 1, v5);
        }
        _OWORD v5[2] = v26 + 1;
        uint64_t v27 = &v5[5 * v26];
        v27[4] = v39;
        uint64_t v27[5] = v38;
        v27[6] = v37;
        v27[7] = v40;
        v27[8] = v15;
      }
      else
      {
        uint64_t v6 = *v35;
        (*v35)(v0[9], v0[7]);
        v6(v17, v19);
        int64_t v5 = v42;
        uint64_t v7 = v41;
      }
      v4 += v33;
      uint64_t v2 = v7 - 1;
    }
    while (v2);
    swift_bridgeObjectRelease_n();
  }
  else
  {
    swift_bridgeObjectRelease();
    int64_t v5 = _swiftEmptyArrayStorage;
  }
  uint64_t v28 = (uint64_t *)v0[2];
  uint64_t v29 = sub_10115A2EC((uint64_t)v5);
  swift_bridgeObjectRelease();
  *uint64_t v28 = v29;
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  BOOL v30 = (uint64_t (*)(void))v0[1];
  return v30();
}

uint64_t sub_100BC8B30()
{
  swift_release();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_100BC8BE0(uint64_t a1)
{
  v1[2] = a1;
  uint64_t v2 = type metadata accessor for Handle();
  v1[3] = v2;
  v1[4] = *(void *)(v2 - 8);
  v1[5] = swift_task_alloc();
  v1[6] = swift_task_alloc();
  uint64_t v3 = type metadata accessor for Friend();
  v1[7] = v3;
  v1[8] = *(void *)(v3 - 8);
  v1[9] = swift_task_alloc();
  v1[10] = swift_task_alloc();
  uint64_t v4 = type metadata accessor for ClientOrigin();
  v1[11] = v4;
  v1[12] = *(void *)(v4 - 8);
  v1[13] = swift_task_alloc();
  type metadata accessor for RequestOrigin();
  v1[14] = swift_task_alloc();
  return _swift_task_switch(sub_100BC8DA4, 0, 0);
}

uint64_t sub_100BC8DA4()
{
  (*(void (**)(void, void, void))(v0[12] + 104))(v0[13], enum case for ClientOrigin.other(_:), v0[11]);
  RequestOrigin.init(_:)();
  type metadata accessor for Session();
  swift_allocObject();
  v0[15] = Session.init(_:)();
  uint64_t v1 = (void *)swift_task_alloc();
  v0[16] = v1;
  *uint64_t v1 = v0;
  v1[1] = sub_100BC8E94;
  return Session.friendsSharingLocationsWithMe()();
}

uint64_t sub_100BC8E94(uint64_t a1)
{
  uint64_t v3 = *v2;
  *(void *)(v3 + 136) = a1;
  *(void *)(v3 + 144) = v1;
  swift_task_dealloc();
  if (v1)
  {
    uint64_t v4 = sub_100BC926C;
  }
  else
  {
    swift_release();
    uint64_t v4 = sub_100BC9270;
  }
  return _swift_task_switch(v4, 0, 0);
}

uint64_t sub_100BC8FB0(uint64_t a1, uint64_t a2)
{
  BOOL v4 = *(void *)a1 == *(void *)a2 && *(void *)(a1 + 8) == *(void *)(a2 + 8);
  if (v4 || (v5 = _stringCompareWithSmolCheck(_:_:expecting:)(), uint64_t result = 0, (v5 & 1) != 0))
  {
    if (sub_100335B90(*(void **)(a1 + 16), *(void **)(a2 + 16)))
    {
      if (*(void *)(a1 + 24) == *(void *)(a2 + 24) && *(void *)(a1 + 32) == *(void *)(a2 + 32))
      {
        return 1;
      }
      else
      {
        return _stringCompareWithSmolCheck(_:_:expecting:)();
      }
    }
    else
    {
      return 0;
    }
  }
  return result;
}

uint64_t sub_100BC9050@<X0>(void *a1@<X8>)
{
  return sub_100BC7CE0(*(void *)(v1 + 16), *(void *)(v1 + 24), a1);
}

uint64_t sub_100BC906C@<X0>(void *a1@<X8>)
{
  return sub_100BC7BE8(*(void *)(v1 + 16), *(void *)(v1 + 24), a1);
}

uint64_t destroy for FMFHandle()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return swift_bridgeObjectRelease();
}

void *initializeWithCopy for FMFHandle(void *a1, void *a2)
{
  uint64_t v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  uint64_t v4 = a2[3];
  a1[2] = a2[2];
  a1[3] = v4;
  a1[4] = a2[4];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

void *assignWithCopy for FMFHandle(void *a1, void *a2)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[3] = a2[3];
  a1[4] = a2[4];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t assignWithTake for FMFHandle(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  swift_bridgeObjectRelease();
  uint64_t v4 = *(void *)(a2 + 32);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(void *)(a1 + 32) = v4;
  swift_bridgeObjectRelease();
  return a1;
}

ValueMetadata *type metadata accessor for FMFHandle()
{
  return &type metadata for FMFHandle;
}

unint64_t sub_100BC9218()
{
  unint64_t result = qword_10165AA88;
  if (!qword_10165AA88)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10165AA88);
  }
  return result;
}

unint64_t sub_100BC9274(char a1)
{
  unint64_t result = 1684628325;
  switch(a1)
  {
    case 1:
      unint64_t result = 0x644970696863;
      break;
    case 2:
      unint64_t result = 0x754E6C6169726573;
      break;
    case 3:
      unint64_t result = 0x49746375646F7270;
      break;
    case 4:
      unint64_t result = 0x6449726F646E6576;
      break;
    case 5:
      unint64_t result = 0x6F69737265567766;
      break;
    case 6:
      unint64_t result = 0x727574616E676973;
      break;
    case 7:
      unint64_t result = 0x4E6E6F6973736573;
      break;
    case 8:
      unint64_t result = 0x4364656573;
      break;
    case 9:
      unint64_t result = 0x7361486572616873;
      break;
    case 10:
      unint64_t result = 0xD000000000000015;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t sub_100BC93F0(void *a1)
{
  uint64_t v3 = v1;
  uint64_t v5 = sub_10000588C(&qword_10165AA98);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v8 = (char *)&v10 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10001CD44(a1, a1[3]);
  sub_100BCA510();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  LOBYTE(v12) = 0;
  KeyedEncodingContainer.encode(_:forKey:)();
  if (!v2)
  {
    LOBYTE(v12) = 1;
    KeyedEncodingContainer.encode(_:forKey:)();
    LOBYTE(v12) = 2;
    KeyedEncodingContainer.encode(_:forKey:)();
    LOBYTE(v12) = 3;
    KeyedEncodingContainer.encode(_:forKey:)();
    LOBYTE(v12) = 4;
    KeyedEncodingContainer.encode(_:forKey:)();
    LOBYTE(v12) = 5;
    KeyedEncodingContainer.encode(_:forKey:)();
    long long v12 = v3[5];
    char v11 = 6;
    sub_100037BB4();
    KeyedEncodingContainer.encode<A>(_:forKey:)();
    long long v12 = v3[6];
    char v11 = 7;
    KeyedEncodingContainer.encode<A>(_:forKey:)();
    long long v12 = v3[7];
    char v11 = 8;
    KeyedEncodingContainer.encode<A>(_:forKey:)();
    long long v12 = v3[8];
    char v11 = 9;
    KeyedEncodingContainer.encode<A>(_:forKey:)();
    LOBYTE(v12) = 10;
    KeyedEncodingContainer.encode(_:forKey:)();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
}

unint64_t sub_100BC9710()
{
  return sub_100BC9274(*v0);
}

uint64_t sub_100BC9718@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_100BCA770(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_100BC9740(uint64_t a1)
{
  unint64_t v2 = sub_100BCA510();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_100BC977C(uint64_t a1)
{
  unint64_t v2 = sub_100BCA510();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_100BC97B8(void *a1)
{
  return sub_100BC93F0(a1);
}

void sub_100BC980C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, long long a9, long long a10, long long a11, long long a12, long long a13, uint64_t a14, unint64_t a15, long long a16)
{
  *((void *)&v66 + 1) = a2;
  uint64_t v67 = a3;
  *(void *)&long long v66 = a1;
  uint64_t v68 = type metadata accessor for Date();
  uint64_t v21 = *(void *)(v68 - 8);
  __chkstk_darwin(v68);
  uint64_t v23 = (char *)&v57 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  unint64_t v24 = sub_10092D8F8((uint64_t)_swiftEmptyArrayStorage);
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  *(void *)&long long v81 = v24;
  sub_10016C0FC(1702195828, 0xE400000000000000, 0xD00000000000001BLL, 0x80000001013F64C0, isUniquelyReferenced_nonNull_native);
  uint64_t v26 = v81;
  swift_bridgeObjectRelease();
  id v27 = [self currentDevice];
  if (!v27)
  {
    __break(1u);
    goto LABEL_8;
  }
  uint64_t v28 = v27;
  *((void *)&v64 + 1) = a8;
  uint64_t v65 = a4;
  *(void *)&long long v63 = a5;
  *((void *)&v63 + 1) = a6;
  *(void *)&long long v64 = a7;
  id v29 = [v27 serverFriendlyDescription];

  if (!v29)
  {
LABEL_8:
    __break(1u);
    return;
  }
  long long v60 = a16;
  long long v61 = a13;
  long long v62 = a12;
  long long v69 = a11;
  long long v70 = a10;
  long long v59 = a9;
  uint64_t v30 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v32 = v31;

  char v33 = swift_isUniquelyReferenced_nonNull_native();
  *(void *)&long long v81 = v26;
  sub_10016C0FC(v30, v32, 0xD000000000000011, 0x80000001013F64E0, v33);
  uint64_t v34 = v81;
  swift_bridgeObjectRelease();
  Date.init()();
  uint64_t v35 = Date.epoch.getter();
  (*(void (**)(char *, uint64_t))(v21 + 8))(v23, v68);
  *(void *)&long long v81 = v35;
  uint64_t v36 = dispatch thunk of CustomStringConvertible.description.getter();
  uint64_t v38 = v37;
  char v39 = swift_isUniquelyReferenced_nonNull_native();
  *(void *)&long long v81 = v34;
  sub_10016C0FC(v36, v38, 0xD000000000000015, 0x80000001013F6500, v39);
  uint64_t v40 = v81;
  swift_bridgeObjectRelease();
  *(void *)&long long v81 = 1;
  uint64_t v41 = dispatch thunk of CustomStringConvertible.description.getter();
  uint64_t v43 = v42;
  char v44 = swift_isUniquelyReferenced_nonNull_native();
  *(void *)&long long v81 = v40;
  sub_10016C0FC(v41, v43, 0xD000000000000013, 0x80000001013F6520, v44);
  uint64_t v45 = v81;
  swift_bridgeObjectRelease();
  id v46 = sub_100903ACC();
  uint64_t v48 = v47;
  char v49 = swift_isUniquelyReferenced_nonNull_native();
  *(void *)&long long v81 = v45;
  sub_10016C0FC((uint64_t)v46, v48, 0x6567412D72657355, 0xEA0000000000746ELL, v49);
  uint64_t v50 = v81;
  swift_bridgeObjectRelease();
  uint64_t v57 = a14;
  unint64_t v58 = a15;
  if (a15 >> 60 == 15)
  {
    uint64_t v68 = v50;
  }
  else
  {
    sub_1000361E0(a14, a15);
    Swift::String v51 = Data.base64EncodedString(options:)(0);
    char v52 = swift_isUniquelyReferenced_nonNull_native();
    *(void *)&long long v81 = v50;
    sub_10016C0FC(v51._countAndFlagsBits, (uint64_t)v51._object, 0x49532D454D4D2D58, 0xEB00000000374E47, v52);
    uint64_t v68 = v81;
    swift_bridgeObjectRelease();
    sub_100037A24(a14, a15);
  }
  long long v81 = v66;
  *(void *)&long long v82 = v67;
  *((void *)&v82 + 1) = v65;
  long long v83 = v63;
  long long v84 = v64;
  long long v85 = v59;
  long long v53 = v70;
  long long v86 = v70;
  long long v54 = v69;
  long long v87 = v69;
  long long v55 = v62;
  long long v88 = v62;
  long long v56 = v61;
  long long v89 = v61;
  long long v90 = v60;
  type metadata accessor for JSONEncoder();
  swift_allocObject();
  sub_1000361E0(v53, *((unint64_t *)&v53 + 1));
  sub_1000361E0(v54, *((unint64_t *)&v54 + 1));
  sub_1000361E0(v55, *((unint64_t *)&v55 + 1));
  sub_1000361E0(v56, *((unint64_t *)&v56 + 1));
  JSONEncoder.init()();
  long long v77 = v87;
  long long v78 = v88;
  long long v79 = v89;
  long long v80 = v90;
  long long v73 = v83;
  long long v74 = v84;
  long long v75 = v85;
  long long v76 = v86;
  long long v71 = v81;
  long long v72 = v82;
  sub_100BC9EC8();
  dispatch thunk of JSONEncoder.encode<A>(_:)();
  swift_release();
  sub_100037A24(v57, v58);
  sub_10001CFB8(v56, *((unint64_t *)&v56 + 1));
  sub_10001CFB8(v55, *((unint64_t *)&v55 + 1));
  sub_10001CFB8(v69, *((unint64_t *)&v69 + 1));
  sub_10001CFB8(v70, *((unint64_t *)&v70 + 1));
  sub_100BC9FE4(&v81);
}

unint64_t sub_100BC9EC8()
{
  unint64_t result = qword_10165AA90;
  if (!qword_10165AA90)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10165AA90);
  }
  return result;
}

void *sub_100BC9F1C(void *a1)
{
  uint64_t v2 = a1[10];
  unint64_t v3 = a1[11];
  uint64_t v4 = a1[12];
  unint64_t v5 = a1[13];
  uint64_t v6 = a1[14];
  unint64_t v7 = a1[15];
  unint64_t v9 = a1[17];
  uint64_t v10 = a1[16];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  sub_1000361E0(v2, v3);
  sub_1000361E0(v4, v5);
  sub_1000361E0(v6, v7);
  sub_1000361E0(v10, v9);
  swift_bridgeObjectRetain();
  return a1;
}

void *sub_100BC9FE4(void *a1)
{
  uint64_t v2 = a1[10];
  unint64_t v3 = a1[11];
  uint64_t v4 = a1[12];
  unint64_t v5 = a1[13];
  uint64_t v6 = a1[14];
  unint64_t v7 = a1[15];
  unint64_t v9 = a1[17];
  uint64_t v10 = a1[16];
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_10001CFB8(v2, v3);
  sub_10001CFB8(v4, v5);
  sub_10001CFB8(v6, v7);
  sub_10001CFB8(v10, v9);
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t destroy for PairingLockCheckRequestContent(uint64_t a1)
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_10001CFB8(*(void *)(a1 + 80), *(void *)(a1 + 88));
  sub_10001CFB8(*(void *)(a1 + 96), *(void *)(a1 + 104));
  sub_10001CFB8(*(void *)(a1 + 112), *(void *)(a1 + 120));
  sub_10001CFB8(*(void *)(a1 + 128), *(void *)(a1 + 136));

  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for PairingLockCheckRequestContent(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v4;
  uint64_t v5 = *(void *)(a2 + 24);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = v5;
  uint64_t v6 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v6;
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  uint64_t v7 = *(void *)(a2 + 72);
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  *(void *)(a1 + 72) = v7;
  uint64_t v8 = *(void *)(a2 + 80);
  unint64_t v9 = *(void *)(a2 + 88);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  sub_1000361E0(v8, v9);
  *(void *)(a1 + 80) = v8;
  *(void *)(a1 + 88) = v9;
  uint64_t v10 = *(void *)(a2 + 96);
  unint64_t v11 = *(void *)(a2 + 104);
  sub_1000361E0(v10, v11);
  *(void *)(a1 + 96) = v10;
  *(void *)(a1 + 104) = v11;
  uint64_t v12 = *(void *)(a2 + 112);
  unint64_t v13 = *(void *)(a2 + 120);
  sub_1000361E0(v12, v13);
  *(void *)(a1 + 112) = v12;
  *(void *)(a1 + 120) = v13;
  uint64_t v14 = *(void *)(a2 + 128);
  unint64_t v15 = *(void *)(a2 + 136);
  sub_1000361E0(v14, v15);
  *(void *)(a1 + 128) = v14;
  *(void *)(a1 + 136) = v15;
  uint64_t v16 = *(void *)(a2 + 152);
  *(void *)(a1 + 144) = *(void *)(a2 + 144);
  *(void *)(a1 + 152) = v16;
  swift_bridgeObjectRetain();
  return a1;
}

void *assignWithCopy for PairingLockCheckRequestContent(void *a1, void *a2)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  a1[3] = a2[3];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[4] = a2[4];
  a1[5] = a2[5];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[6] = a2[6];
  a1[7] = a2[7];
  a1[8] = a2[8];
  a1[9] = a2[9];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v4 = a2[10];
  unint64_t v5 = a2[11];
  sub_1000361E0(v4, v5);
  uint64_t v6 = a1[10];
  unint64_t v7 = a1[11];
  a1[10] = v4;
  a1[11] = v5;
  sub_10001CFB8(v6, v7);
  uint64_t v8 = a2[12];
  unint64_t v9 = a2[13];
  sub_1000361E0(v8, v9);
  uint64_t v10 = a1[12];
  unint64_t v11 = a1[13];
  a1[12] = v8;
  a1[13] = v9;
  sub_10001CFB8(v10, v11);
  uint64_t v12 = a2[14];
  unint64_t v13 = a2[15];
  sub_1000361E0(v12, v13);
  uint64_t v14 = a1[14];
  unint64_t v15 = a1[15];
  a1[14] = v12;
  a1[15] = v13;
  sub_10001CFB8(v14, v15);
  uint64_t v16 = a2[16];
  unint64_t v17 = a2[17];
  sub_1000361E0(v16, v17);
  uint64_t v18 = a1[16];
  unint64_t v19 = a1[17];
  a1[16] = v16;
  a1[17] = v17;
  sub_10001CFB8(v18, v19);
  a1[18] = a2[18];
  a1[19] = a2[19];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

__n128 initializeWithTake for MessagingDevice(uint64_t a1, uint64_t a2)
{
  long long v2 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v2;
  long long v3 = *(_OWORD *)(a2 + 32);
  long long v4 = *(_OWORD *)(a2 + 48);
  long long v5 = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 80) = v5;
  *(_OWORD *)(a1 + 32) = v3;
  *(_OWORD *)(a1 + 48) = v4;
  __n128 result = *(__n128 *)(a2 + 96);
  long long v7 = *(_OWORD *)(a2 + 112);
  long long v8 = *(_OWORD *)(a2 + 144);
  *(_OWORD *)(a1 + 128) = *(_OWORD *)(a2 + 128);
  *(_OWORD *)(a1 + 144) = v8;
  *(__n128 *)(a1 + 96) = result;
  *(_OWORD *)(a1 + 112) = v7;
  return result;
}

uint64_t assignWithTake for PairingLockCheckRequestContent(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v4;
  swift_bridgeObjectRelease();
  uint64_t v5 = *(void *)(a2 + 24);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = v5;
  swift_bridgeObjectRelease();
  uint64_t v6 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v6;
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  uint64_t v7 = *(void *)(a2 + 72);
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  *(void *)(a1 + 72) = v7;
  swift_bridgeObjectRelease();
  uint64_t v8 = *(void *)(a1 + 80);
  unint64_t v9 = *(void *)(a1 + 88);
  *(_OWORD *)(a1 + 80) = *(_OWORD *)(a2 + 80);
  sub_10001CFB8(v8, v9);
  uint64_t v10 = *(void *)(a1 + 96);
  unint64_t v11 = *(void *)(a1 + 104);
  *(_OWORD *)(a1 + 96) = *(_OWORD *)(a2 + 96);
  sub_10001CFB8(v10, v11);
  uint64_t v12 = *(void *)(a1 + 112);
  unint64_t v13 = *(void *)(a1 + 120);
  *(_OWORD *)(a1 + 112) = *(_OWORD *)(a2 + 112);
  sub_10001CFB8(v12, v13);
  uint64_t v14 = *(void *)(a1 + 128);
  unint64_t v15 = *(void *)(a1 + 136);
  *(_OWORD *)(a1 + 128) = *(_OWORD *)(a2 + 128);
  sub_10001CFB8(v14, v15);
  uint64_t v16 = *(void *)(a2 + 152);
  *(void *)(a1 + 144) = *(void *)(a2 + 144);
  *(void *)(a1 + 152) = v16;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for MessagingDevice(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 160)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for MessagingDevice(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 152) = 0;
    *(_OWORD *)(result + 136) = 0u;
    *(_OWORD *)(result + 120) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)__n128 result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 160) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 8) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 160) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for PairingLockCheckRequestContent()
{
  return &type metadata for PairingLockCheckRequestContent;
}

ValueMetadata *type metadata accessor for PairingLockCheckRequest()
{
  return &type metadata for PairingLockCheckRequest;
}

unint64_t sub_100BCA510()
{
  unint64_t result = qword_10165AAA0;
  if (!qword_10165AAA0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10165AAA0);
  }
  return result;
}

unsigned char *storeEnumTagSinglePayload for PairingLockCheckRequestContent.CodingKeys(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 10 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 10) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xF6) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xF5)
  {
    unsigned int v6 = ((a2 - 246) >> 8) + 1;
    *unint64_t result = a2 + 10;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x100BCA630);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 10;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for PairingLockCheckRequestContent.CodingKeys()
{
  return &type metadata for PairingLockCheckRequestContent.CodingKeys;
}

unint64_t sub_100BCA66C()
{
  unint64_t result = qword_10165AAA8;
  if (!qword_10165AAA8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10165AAA8);
  }
  return result;
}

unint64_t sub_100BCA6C4()
{
  unint64_t result = qword_10165AAB0;
  if (!qword_10165AAB0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10165AAB0);
  }
  return result;
}

unint64_t sub_100BCA71C()
{
  unint64_t result = qword_10165AAB8;
  if (!qword_10165AAB8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10165AAB8);
  }
  return result;
}

uint64_t sub_100BCA770(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 1684628325 && a2 == 0xE400000000000000;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x644970696863 && a2 == 0xE600000000000000 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0x754E6C6169726573 && a2 == 0xEC0000007265626DLL {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else if (a1 == 0x49746375646F7270 && a2 == 0xE900000000000064 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 3;
  }
  else if (a1 == 0x6449726F646E6576 && a2 == 0xE800000000000000 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 4;
  }
  else if (a1 == 0x6F69737265567766 && a2 == 0xE90000000000006ELL {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 5;
  }
  else if (a1 == 0x727574616E676973 && a2 == 0xE900000000000065 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 6;
  }
  else if (a1 == 0x4E6E6F6973736573 && a2 == 0xEC00000065636E6FLL {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 7;
  }
  else if (a1 == 0x4364656573 && a2 == 0xE500000000000000 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 8;
  }
  else if (a1 == 0x7361486572616873 && a2 == 0xE900000000000068 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 9;
  }
  else if (a1 == 0xD000000000000015 && a2 == 0x8000000101408C40)
  {
    swift_bridgeObjectRelease();
    return 10;
  }
  else
  {
    char v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v6) {
      return 10;
    }
    else {
      return 11;
    }
  }
}

uint64_t sub_100BCAC00()
{
  uint64_t v1 = type metadata accessor for String.Encoding();
  v0[5] = v1;
  v0[6] = *(void *)(v1 - 8);
  v0[7] = swift_task_alloc();
  sub_10000588C(&qword_10165AAE8);
  uint64_t v2 = swift_task_alloc();
  v0[8] = v2;
  uint64_t v3 = type metadata accessor for SearchpartyAccount();
  v0[9] = v3;
  v0[10] = *(void *)(v3 - 8);
  v0[11] = swift_task_alloc();
  unsigned int v4 = (void *)swift_task_alloc();
  v0[12] = v4;
  *unsigned int v4 = v0;
  v4[1] = sub_100BCAD84;
  return static AppleAccount.searchpartyAccount.getter(v2);
}

uint64_t sub_100BCAD84()
{
  *(void *)(*(void *)v1 + 104) = v0;
  swift_task_dealloc();
  if (v0) {
    uint64_t v2 = sub_100BCB1E8;
  }
  else {
    uint64_t v2 = sub_100BCAE98;
  }
  return _swift_task_switch(v2, 0, 0);
}

uint64_t sub_100BCAE98()
{
  unint64_t v24 = v0;
  uint64_t v1 = v0[9];
  uint64_t v2 = v0[10];
  uint64_t v3 = v0[8];
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v2 + 48))(v3, 1, v1) == 1)
  {
    sub_10001DAB4(v3, &qword_10165AAE8);
  }
  else
  {
    (*(void (**)(void, uint64_t, uint64_t))(v2 + 32))(v0[11], v3, v1);
    if (*(void *)(RequestCredential.authHeaders.getter() + 16)
      && (sub_100723FF4(0x7A69726F68747541, 0xED00006E6F697461), (v4 & 1) != 0))
    {
      uint64_t v6 = v0[10];
      uint64_t v5 = v0[11];
      uint64_t v7 = v0[9];
      uint64_t v9 = v0[6];
      uint64_t v8 = v0[7];
      uint64_t v10 = v0[5];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      static String.Encoding.utf8.getter();
      uint64_t v11 = String.data(using:allowLossyConversion:)();
      unint64_t v13 = v12;
      swift_bridgeObjectRelease();
      (*(void (**)(uint64_t, uint64_t))(v9 + 8))(v8, v10);
      (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v5, v7);
      if (v13 >> 60 != 15) {
        goto LABEL_13;
      }
    }
    else
    {
      uint64_t v15 = v0[10];
      uint64_t v14 = v0[11];
      uint64_t v16 = v0[9];
      swift_bridgeObjectRelease();
      (*(void (**)(uint64_t, uint64_t))(v15 + 8))(v14, v16);
    }
  }
  if (qword_101637408 != -1) {
    swift_once();
  }
  uint64_t v17 = type metadata accessor for Logger();
  sub_100010324(v17, (uint64_t)qword_10170F1B0);
  uint64_t v18 = Logger.logObject.getter();
  os_log_type_t v19 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v18, v19))
  {
    uint64_t v20 = (uint8_t *)swift_slowAlloc();
    uint64_t v23 = swift_slowAlloc();
    *(_DWORD *)uint64_t v20 = 136446210;
    v0[4] = sub_1008FA0F0(0xD000000000000010, 0x8000000101415F00, &v23);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl((void *)&_mh_execute_header, v18, v19, "%{public}s Could not read credential data.", v20, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }

  uint64_t v11 = 0;
  unint64_t v13 = 0xC000000000000000;
LABEL_13:
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v21 = (uint64_t (*)(uint64_t, unint64_t))v0[1];
  return v21(v11, v13);
}

uint64_t sub_100BCB1E8()
{
  uint64_t v10 = v0;
  if (qword_101637408 != -1) {
    swift_once();
  }
  uint64_t v1 = type metadata accessor for Logger();
  sub_100010324(v1, (uint64_t)qword_10170F1B0);
  swift_errorRetain();
  swift_errorRetain();
  uint64_t v2 = Logger.logObject.getter();
  os_log_type_t v3 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v2, v3))
  {
    uint64_t v4 = swift_slowAlloc();
    uint64_t v5 = (void *)swift_slowAlloc();
    uint64_t v9 = swift_slowAlloc();
    *(_DWORD *)uint64_t v4 = 136446466;
    v0[2] = sub_1008FA0F0(0xD000000000000010, 0x8000000101415F00, &v9);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v4 + 12) = 2114;
    swift_errorRetain();
    uint64_t v6 = _swift_stdlib_bridgeErrorToNSError();
    v0[3] = v6;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *uint64_t v5 = v6;
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl((void *)&_mh_execute_header, v2, v3, "%{public}s Cannot get authorization header %{public}@.", (uint8_t *)v4, 0x16u);
    sub_10000588C((uint64_t *)&unk_101638EA0);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    swift_errorRelease();
    swift_errorRelease();
  }

  swift_errorRelease();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v7 = (uint64_t (*)(void, unint64_t))v0[1];
  return v7(0, 0xC000000000000000);
}

uint64_t sub_100BCB480()
{
  uint64_t v1 = type metadata accessor for String.Encoding();
  v0[5] = v1;
  v0[6] = *(void *)(v1 - 8);
  v0[7] = swift_task_alloc();
  sub_10000588C(&qword_10165AAE8);
  uint64_t v2 = swift_task_alloc();
  v0[8] = v2;
  uint64_t v3 = type metadata accessor for SearchpartyAccount();
  v0[9] = v3;
  v0[10] = *(void *)(v3 - 8);
  v0[11] = swift_task_alloc();
  uint64_t v4 = (void *)swift_task_alloc();
  v0[12] = v4;
  *uint64_t v4 = v0;
  v4[1] = sub_100BCB604;
  return static AppleAccount.searchpartyAccount.getter(v2);
}

uint64_t sub_100BCB604()
{
  *(void *)(*(void *)v1 + 104) = v0;
  swift_task_dealloc();
  if (v0) {
    uint64_t v2 = sub_100BCBA68;
  }
  else {
    uint64_t v2 = sub_100BCB718;
  }
  return _swift_task_switch(v2, 0, 0);
}

uint64_t sub_100BCB718()
{
  unint64_t v24 = v0;
  uint64_t v1 = v0[9];
  uint64_t v2 = v0[10];
  uint64_t v3 = v0[8];
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v2 + 48))(v3, 1, v1) == 1)
  {
    sub_10001DAB4(v3, &qword_10165AAE8);
  }
  else
  {
    (*(void (**)(void, uint64_t, uint64_t))(v2 + 32))(v0[11], v3, v1);
    if (*(void *)(RequestCredential.authHeaders.getter() + 16)
      && (sub_100723FF4(0x7A69726F68747541, 0xED00006E6F697461), (v4 & 1) != 0))
    {
      uint64_t v6 = v0[10];
      uint64_t v5 = v0[11];
      uint64_t v7 = v0[9];
      uint64_t v9 = v0[6];
      uint64_t v8 = v0[7];
      uint64_t v10 = v0[5];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      static String.Encoding.utf8.getter();
      uint64_t v11 = String.data(using:allowLossyConversion:)();
      unint64_t v13 = v12;
      swift_bridgeObjectRelease();
      (*(void (**)(uint64_t, uint64_t))(v9 + 8))(v8, v10);
      (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v5, v7);
      if (v13 >> 60 != 15) {
        goto LABEL_13;
      }
    }
    else
    {
      uint64_t v15 = v0[10];
      uint64_t v14 = v0[11];
      uint64_t v16 = v0[9];
      swift_bridgeObjectRelease();
      (*(void (**)(uint64_t, uint64_t))(v15 + 8))(v14, v16);
    }
  }
  if (qword_101637408 != -1) {
    swift_once();
  }
  uint64_t v17 = type metadata accessor for Logger();
  sub_100010324(v17, (uint64_t)qword_10170F1B0);
  uint64_t v18 = Logger.logObject.getter();
  os_log_type_t v19 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v18, v19))
  {
    uint64_t v20 = (uint8_t *)swift_slowAlloc();
    uint64_t v23 = swift_slowAlloc();
    *(_DWORD *)uint64_t v20 = 136446210;
    v0[4] = sub_1008FA0F0(0xD00000000000001ELL, 0x8000000101415F90, &v23);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl((void *)&_mh_execute_header, v18, v19, "%{public}s Could not read credential data.", v20, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }

  uint64_t v11 = 0;
  unint64_t v13 = 0xC000000000000000;
LABEL_13:
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v21 = (uint64_t (*)(uint64_t, unint64_t))v0[1];
  return v21(v11, v13);
}

uint64_t sub_100BCBA68()
{
  uint64_t v10 = v0;
  if (qword_101637408 != -1) {
    swift_once();
  }
  uint64_t v1 = type metadata accessor for Logger();
  sub_100010324(v1, (uint64_t)qword_10170F1B0);
  swift_errorRetain();
  swift_errorRetain();
  uint64_t v2 = Logger.logObject.getter();
  os_log_type_t v3 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v2, v3))
  {
    uint64_t v4 = swift_slowAlloc();
    uint64_t v5 = (void *)swift_slowAlloc();
    uint64_t v9 = swift_slowAlloc();
    *(_DWORD *)uint64_t v4 = 136446466;
    v0[2] = sub_1008FA0F0(0xD00000000000001ELL, 0x8000000101415F90, &v9);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v4 + 12) = 2114;
    swift_errorRetain();
    uint64_t v6 = _swift_stdlib_bridgeErrorToNSError();
    v0[3] = v6;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *uint64_t v5 = v6;
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl((void *)&_mh_execute_header, v2, v3, "%{public}s Cannot get authorization header %{public}@.", (uint8_t *)v4, 0x16u);
    sub_10000588C((uint64_t *)&unk_101638EA0);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    swift_errorRelease();
    swift_errorRelease();
  }

  swift_errorRelease();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v7 = (uint64_t (*)(void, unint64_t))v0[1];
  return v7(0, 0xC000000000000000);
}

uint64_t sub_100BCBD00()
{
  uint64_t v1 = type metadata accessor for String.Encoding();
  v0[5] = v1;
  v0[6] = *(void *)(v1 - 8);
  v0[7] = swift_task_alloc();
  sub_10000588C(&qword_10165AAE8);
  uint64_t v2 = swift_task_alloc();
  v0[8] = v2;
  uint64_t v3 = type metadata accessor for SearchpartyAccount();
  v0[9] = v3;
  v0[10] = *(void *)(v3 - 8);
  v0[11] = swift_task_alloc();
  uint64_t v4 = (void *)swift_task_alloc();
  v0[12] = v4;
  *uint64_t v4 = v0;
  v4[1] = sub_100BCBE84;
  return static AppleAccount.searchpartyAccount.getter(v2);
}

uint64_t sub_100BCBE84()
{
  *(void *)(*(void *)v1 + 104) = v0;
  swift_task_dealloc();
  if (v0) {
    uint64_t v2 = sub_100BCC2E8;
  }
  else {
    uint64_t v2 = sub_100BCBF98;
  }
  return _swift_task_switch(v2, 0, 0);
}

uint64_t sub_100BCBF98()
{
  unint64_t v24 = v0;
  uint64_t v1 = v0[9];
  uint64_t v2 = v0[10];
  uint64_t v3 = v0[8];
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v2 + 48))(v3, 1, v1) == 1)
  {
    sub_10001DAB4(v3, &qword_10165AAE8);
  }
  else
  {
    (*(void (**)(void, uint64_t, uint64_t))(v2 + 32))(v0[11], v3, v1);
    if (*(void *)(RequestCredential.authHeaders.getter() + 16)
      && (sub_100723FF4(0x7A69726F68747541, 0xED00006E6F697461), (v4 & 1) != 0))
    {
      uint64_t v6 = v0[10];
      uint64_t v5 = v0[11];
      uint64_t v7 = v0[9];
      uint64_t v9 = v0[6];
      uint64_t v8 = v0[7];
      uint64_t v10 = v0[5];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      static String.Encoding.utf8.getter();
      uint64_t v11 = String.data(using:allowLossyConversion:)();
      unint64_t v13 = v12;
      swift_bridgeObjectRelease();
      (*(void (**)(uint64_t, uint64_t))(v9 + 8))(v8, v10);
      (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v5, v7);
      if (v13 >> 60 != 15) {
        goto LABEL_13;
      }
    }
    else
    {
      uint64_t v15 = v0[10];
      uint64_t v14 = v0[11];
      uint64_t v16 = v0[9];
      swift_bridgeObjectRelease();
      (*(void (**)(uint64_t, uint64_t))(v15 + 8))(v14, v16);
    }
  }
  if (qword_101637408 != -1) {
    swift_once();
  }
  uint64_t v17 = type metadata accessor for Logger();
  sub_100010324(v17, (uint64_t)qword_10170F1B0);
  uint64_t v18 = Logger.logObject.getter();
  os_log_type_t v19 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v18, v19))
  {
    uint64_t v20 = (uint8_t *)swift_slowAlloc();
    uint64_t v23 = swift_slowAlloc();
    *(_DWORD *)uint64_t v20 = 136446210;
    v0[4] = sub_1008FA0F0(0xD000000000000013, 0x8000000101415EA0, &v23);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl((void *)&_mh_execute_header, v18, v19, "%{public}s Could not read credential data.", v20, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }

  uint64_t v11 = 0;
  unint64_t v13 = 0xC000000000000000;
LABEL_13:
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v21 = (uint64_t (*)(uint64_t, unint64_t))v0[1];
  return v21(v11, v13);
}

uint64_t sub_100BCC2E8()
{
  uint64_t v10 = v0;
  if (qword_101637408 != -1) {
    swift_once();
  }
  uint64_t v1 = type metadata accessor for Logger();
  sub_100010324(v1, (uint64_t)qword_10170F1B0);
  swift_errorRetain();
  swift_errorRetain();
  uint64_t v2 = Logger.logObject.getter();
  os_log_type_t v3 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v2, v3))
  {
    uint64_t v4 = swift_slowAlloc();
    uint64_t v5 = (void *)swift_slowAlloc();
    uint64_t v9 = swift_slowAlloc();
    *(_DWORD *)uint64_t v4 = 136446466;
    v0[2] = sub_1008FA0F0(0xD000000000000013, 0x8000000101415EA0, &v9);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v4 + 12) = 2114;
    swift_errorRetain();
    uint64_t v6 = _swift_stdlib_bridgeErrorToNSError();
    v0[3] = v6;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *uint64_t v5 = v6;
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl((void *)&_mh_execute_header, v2, v3, "%{public}s Cannot get authorization header %{public}@.", (uint8_t *)v4, 0x16u);
    sub_10000588C((uint64_t *)&unk_101638EA0);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    swift_errorRelease();
    swift_errorRelease();
  }

  swift_errorRelease();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v7 = (uint64_t (*)(void, unint64_t))v0[1];
  return v7(0, 0xC000000000000000);
}

uint64_t sub_100BCC580()
{
  uint64_t v1 = type metadata accessor for String.Encoding();
  v0[5] = v1;
  v0[6] = *(void *)(v1 - 8);
  v0[7] = swift_task_alloc();
  sub_10000588C(&qword_10165AAE8);
  uint64_t v2 = swift_task_alloc();
  v0[8] = v2;
  uint64_t v3 = type metadata accessor for SearchpartyAccount();
  v0[9] = v3;
  v0[10] = *(void *)(v3 - 8);
  v0[11] = swift_task_alloc();
  uint64_t v4 = (void *)swift_task_alloc();
  v0[12] = v4;
  *uint64_t v4 = v0;
  v4[1] = sub_100BCC704;
  return static AppleAccount.searchpartyAccount.getter(v2);
}

uint64_t sub_100BCC704()
{
  *(void *)(*(void *)v1 + 104) = v0;
  swift_task_dealloc();
  if (v0) {
    uint64_t v2 = sub_100BCCB68;
  }
  else {
    uint64_t v2 = sub_100BCC818;
  }
  return _swift_task_switch(v2, 0, 0);
}

uint64_t sub_100BCC818()
{
  unint64_t v24 = v0;
  uint64_t v1 = v0[9];
  uint64_t v2 = v0[10];
  uint64_t v3 = v0[8];
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v2 + 48))(v3, 1, v1) == 1)
  {
    sub_10001DAB4(v3, &qword_10165AAE8);
  }
  else
  {
    (*(void (**)(void, uint64_t, uint64_t))(v2 + 32))(v0[11], v3, v1);
    if (*(void *)(RequestCredential.authHeaders.getter() + 16)
      && (sub_100723FF4(0x7A69726F68747541, 0xED00006E6F697461), (v4 & 1) != 0))
    {
      uint64_t v6 = v0[10];
      uint64_t v5 = v0[11];
      uint64_t v7 = v0[9];
      uint64_t v9 = v0[6];
      uint64_t v8 = v0[7];
      uint64_t v10 = v0[5];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      static String.Encoding.utf8.getter();
      uint64_t v11 = String.data(using:allowLossyConversion:)();
      unint64_t v13 = v12;
      swift_bridgeObjectRelease();
      (*(void (**)(uint64_t, uint64_t))(v9 + 8))(v8, v10);
      (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v5, v7);
      if (v13 >> 60 != 15) {
        goto LABEL_13;
      }
    }
    else
    {
      uint64_t v15 = v0[10];
      uint64_t v14 = v0[11];
      uint64_t v16 = v0[9];
      swift_bridgeObjectRelease();
      (*(void (**)(uint64_t, uint64_t))(v15 + 8))(v14, v16);
    }
  }
  if (qword_101637408 != -1) {
    swift_once();
  }
  uint64_t v17 = type metadata accessor for Logger();
  sub_100010324(v17, (uint64_t)qword_10170F1B0);
  uint64_t v18 = Logger.logObject.getter();
  os_log_type_t v19 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v18, v19))
  {
    uint64_t v20 = (uint8_t *)swift_slowAlloc();
    uint64_t v23 = swift_slowAlloc();
    *(_DWORD *)uint64_t v20 = 136446210;
    v0[4] = sub_1008FA0F0(0xD00000000000001DLL, 0x8000000101415DD0, &v23);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl((void *)&_mh_execute_header, v18, v19, "%{public}s Could not read credential data.", v20, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }

  uint64_t v11 = 0;
  unint64_t v13 = 0xC000000000000000;
LABEL_13:
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v21 = (uint64_t (*)(uint64_t, unint64_t))v0[1];
  return v21(v11, v13);
}

uint64_t sub_100BCCB68()
{
  uint64_t v10 = v0;
  if (qword_101637408 != -1) {
    swift_once();
  }
  uint64_t v1 = type metadata accessor for Logger();
  sub_100010324(v1, (uint64_t)qword_10170F1B0);
  swift_errorRetain();
  swift_errorRetain();
  uint64_t v2 = Logger.logObject.getter();
  os_log_type_t v3 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v2, v3))
  {
    uint64_t v4 = swift_slowAlloc();
    uint64_t v5 = (void *)swift_slowAlloc();
    uint64_t v9 = swift_slowAlloc();
    *(_DWORD *)uint64_t v4 = 136446466;
    v0[2] = sub_1008FA0F0(0xD00000000000001DLL, 0x8000000101415DD0, &v9);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v4 + 12) = 2114;
    swift_errorRetain();
    uint64_t v6 = _swift_stdlib_bridgeErrorToNSError();
    v0[3] = v6;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *uint64_t v5 = v6;
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl((void *)&_mh_execute_header, v2, v3, "%{public}s Cannot get authorization header %{public}@.", (uint8_t *)v4, 0x16u);
    sub_10000588C((uint64_t *)&unk_101638EA0);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    swift_errorRelease();
    swift_errorRelease();
  }

  swift_errorRelease();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v7 = (uint64_t (*)(void, unint64_t))v0[1];
  return v7(0, 0xC000000000000000);
}

uint64_t sub_100BCCE00()
{
  uint64_t v1 = type metadata accessor for String.Encoding();
  v0[5] = v1;
  v0[6] = *(void *)(v1 - 8);
  v0[7] = swift_task_alloc();
  sub_10000588C(&qword_10165AAE8);
  uint64_t v2 = swift_task_alloc();
  v0[8] = v2;
  uint64_t v3 = type metadata accessor for SearchpartyAccount();
  v0[9] = v3;
  v0[10] = *(void *)(v3 - 8);
  v0[11] = swift_task_alloc();
  uint64_t v4 = (void *)swift_task_alloc();
  v0[12] = v4;
  *uint64_t v4 = v0;
  v4[1] = sub_100BCCF84;
  return static AppleAccount.searchpartyAccount.getter(v2);
}

uint64_t sub_100BCCF84()
{
  *(void *)(*(void *)v1 + 104) = v0;
  swift_task_dealloc();
  if (v0) {
    uint64_t v2 = sub_100BCD3F0;
  }
  else {
    uint64_t v2 = sub_100BCD098;
  }
  return _swift_task_switch(v2, 0, 0);
}

uint64_t sub_100BCD098()
{
  unint64_t v24 = v0;
  uint64_t v1 = v0[9];
  uint64_t v2 = v0[10];
  uint64_t v3 = v0[8];
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v2 + 48))(v3, 1, v1) == 1)
  {
    sub_10001DAB4(v3, &qword_10165AAE8);
  }
  else
  {
    (*(void (**)(void, uint64_t, uint64_t))(v2 + 32))(v0[11], v3, v1);
    if (*(void *)(RequestCredential.authHeaders.getter() + 16)
      && (sub_100723FF4(0x7A69726F68747541, 0xED00006E6F697461), (v4 & 1) != 0))
    {
      uint64_t v6 = v0[10];
      uint64_t v5 = v0[11];
      uint64_t v7 = v0[9];
      uint64_t v9 = v0[6];
      uint64_t v8 = v0[7];
      uint64_t v10 = v0[5];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      static String.Encoding.utf8.getter();
      uint64_t v11 = String.data(using:allowLossyConversion:)();
      unint64_t v13 = v12;
      swift_bridgeObjectRelease();
      (*(void (**)(uint64_t, uint64_t))(v9 + 8))(v8, v10);
      (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v5, v7);
      if (v13 >> 60 != 15) {
        goto LABEL_13;
      }
    }
    else
    {
      uint64_t v15 = v0[10];
      uint64_t v14 = v0[11];
      uint64_t v16 = v0[9];
      swift_bridgeObjectRelease();
      (*(void (**)(uint64_t, uint64_t))(v15 + 8))(v14, v16);
    }
  }
  if (qword_101637408 != -1) {
    swift_once();
  }
  uint64_t v17 = type metadata accessor for Logger();
  sub_100010324(v17, (uint64_t)qword_10170F1B0);
  uint64_t v18 = Logger.logObject.getter();
  os_log_type_t v19 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v18, v19))
  {
    uint64_t v20 = (uint8_t *)swift_slowAlloc();
    uint64_t v23 = swift_slowAlloc();
    *(_DWORD *)uint64_t v20 = 136446210;
    v0[4] = sub_1008FA0F0(0x654D796669746F4ELL, 0xEF74736575716552, &v23);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl((void *)&_mh_execute_header, v18, v19, "%{public}s Could not read credential data.", v20, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }

  uint64_t v11 = 0;
  unint64_t v13 = 0xC000000000000000;
LABEL_13:
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v21 = (uint64_t (*)(uint64_t, unint64_t))v0[1];
  return v21(v11, v13);
}

uint64_t sub_100BCD3F0()
{
  uint64_t v10 = v0;
  if (qword_101637408 != -1) {
    swift_once();
  }
  uint64_t v1 = type metadata accessor for Logger();
  sub_100010324(v1, (uint64_t)qword_10170F1B0);
  swift_errorRetain();
  swift_errorRetain();
  uint64_t v2 = Logger.logObject.getter();
  os_log_type_t v3 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v2, v3))
  {
    uint64_t v4 = swift_slowAlloc();
    uint64_t v5 = (void *)swift_slowAlloc();
    uint64_t v9 = swift_slowAlloc();
    *(_DWORD *)uint64_t v4 = 136446466;
    v0[2] = sub_1008FA0F0(0x654D796669746F4ELL, 0xEF74736575716552, &v9);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v4 + 12) = 2114;
    swift_errorRetain();
    uint64_t v6 = _swift_stdlib_bridgeErrorToNSError();
    v0[3] = v6;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *uint64_t v5 = v6;
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl((void *)&_mh_execute_header, v2, v3, "%{public}s Cannot get authorization header %{public}@.", (uint8_t *)v4, 0x16u);
    sub_10000588C((uint64_t *)&unk_101638EA0);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    swift_errorRelease();
    swift_errorRelease();
  }

  swift_errorRelease();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v7 = (uint64_t (*)(void, unint64_t))v0[1];
  return v7(0, 0xC000000000000000);
}

uint64_t sub_100BCD690()
{
  uint64_t v1 = type metadata accessor for String.Encoding();
  v0[5] = v1;
  v0[6] = *(void *)(v1 - 8);
  v0[7] = swift_task_alloc();
  sub_10000588C(&qword_10165AAE8);
  uint64_t v2 = swift_task_alloc();
  v0[8] = v2;
  uint64_t v3 = type metadata accessor for SearchpartyAccount();
  v0[9] = v3;
  v0[10] = *(void *)(v3 - 8);
  v0[11] = swift_task_alloc();
  uint64_t v4 = (void *)swift_task_alloc();
  v0[12] = v4;
  *uint64_t v4 = v0;
  v4[1] = sub_100BCD814;
  return static AppleAccount.searchpartyAccount.getter(v2);
}

uint64_t sub_100BCD814()
{
  *(void *)(*(void *)v1 + 104) = v0;
  swift_task_dealloc();
  if (v0) {
    uint64_t v2 = sub_100BCDC78;
  }
  else {
    uint64_t v2 = sub_100BCD928;
  }
  return _swift_task_switch(v2, 0, 0);
}

uint64_t sub_100BCD928()
{
  unint64_t v24 = v0;
  uint64_t v1 = v0[9];
  uint64_t v2 = v0[10];
  uint64_t v3 = v0[8];
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v2 + 48))(v3, 1, v1) == 1)
  {
    sub_10001DAB4(v3, &qword_10165AAE8);
  }
  else
  {
    (*(void (**)(void, uint64_t, uint64_t))(v2 + 32))(v0[11], v3, v1);
    if (*(void *)(RequestCredential.authHeaders.getter() + 16)
      && (sub_100723FF4(0x7A69726F68747541, 0xED00006E6F697461), (v4 & 1) != 0))
    {
      uint64_t v6 = v0[10];
      uint64_t v5 = v0[11];
      uint64_t v7 = v0[9];
      uint64_t v9 = v0[6];
      uint64_t v8 = v0[7];
      uint64_t v10 = v0[5];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      static String.Encoding.utf8.getter();
      uint64_t v11 = String.data(using:allowLossyConversion:)();
      unint64_t v13 = v12;
      swift_bridgeObjectRelease();
      (*(void (**)(uint64_t, uint64_t))(v9 + 8))(v8, v10);
      (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v5, v7);
      if (v13 >> 60 != 15) {
        goto LABEL_13;
      }
    }
    else
    {
      uint64_t v15 = v0[10];
      uint64_t v14 = v0[11];
      uint64_t v16 = v0[9];
      swift_bridgeObjectRelease();
      (*(void (**)(uint64_t, uint64_t))(v15 + 8))(v14, v16);
    }
  }
  if (qword_101637408 != -1) {
    swift_once();
  }
  uint64_t v17 = type metadata accessor for Logger();
  sub_100010324(v17, (uint64_t)qword_10170F1B0);
  uint64_t v18 = Logger.logObject.getter();
  os_log_type_t v19 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v18, v19))
  {
    uint64_t v20 = (uint8_t *)swift_slowAlloc();
    uint64_t v23 = swift_slowAlloc();
    *(_DWORD *)uint64_t v20 = 136446210;
    v0[4] = sub_1008FA0F0(0xD00000000000001CLL, 0x8000000101415EE0, &v23);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl((void *)&_mh_execute_header, v18, v19, "%{public}s Could not read credential data.", v20, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }

  uint64_t v11 = 0;
  unint64_t v13 = 0xC000000000000000;
LABEL_13:
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v21 = (uint64_t (*)(uint64_t, unint64_t))v0[1];
  return v21(v11, v13);
}

uint64_t sub_100BCDC78()
{
  uint64_t v10 = v0;
  if (qword_101637408 != -1) {
    swift_once();
  }
  uint64_t v1 = type metadata accessor for Logger();
  sub_100010324(v1, (uint64_t)qword_10170F1B0);
  swift_errorRetain();
  swift_errorRetain();
  uint64_t v2 = Logger.logObject.getter();
  os_log_type_t v3 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v2, v3))
  {
    uint64_t v4 = swift_slowAlloc();
    uint64_t v5 = (void *)swift_slowAlloc();
    uint64_t v9 = swift_slowAlloc();
    *(_DWORD *)uint64_t v4 = 136446466;
    v0[2] = sub_1008FA0F0(0xD00000000000001CLL, 0x8000000101415EE0, &v9);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v4 + 12) = 2114;
    swift_errorRetain();
    uint64_t v6 = _swift_stdlib_bridgeErrorToNSError();
    v0[3] = v6;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *uint64_t v5 = v6;
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl((void *)&_mh_execute_header, v2, v3, "%{public}s Cannot get authorization header %{public}@.", (uint8_t *)v4, 0x16u);
    sub_10000588C((uint64_t *)&unk_101638EA0);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    swift_errorRelease();
    swift_errorRelease();
  }

  swift_errorRelease();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v7 = (uint64_t (*)(void, unint64_t))v0[1];
  return v7(0, 0xC000000000000000);
}

uint64_t sub_100BCDF10()
{
  uint64_t v1 = type metadata accessor for String.Encoding();
  v0[5] = v1;
  v0[6] = *(void *)(v1 - 8);
  v0[7] = swift_task_alloc();
  sub_10000588C(&qword_10165AAE8);
  uint64_t v2 = swift_task_alloc();
  v0[8] = v2;
  uint64_t v3 = type metadata accessor for SearchpartyAccount();
  v0[9] = v3;
  v0[10] = *(void *)(v3 - 8);
  v0[11] = swift_task_alloc();
  uint64_t v4 = (void *)swift_task_alloc();
  v0[12] = v4;
  *uint64_t v4 = v0;
  v4[1] = sub_100BCE094;
  return static AppleAccount.searchpartyAccount.getter(v2);
}

uint64_t sub_100BCE094()
{
  *(void *)(*(void *)v1 + 104) = v0;
  swift_task_dealloc();
  if (v0) {
    uint64_t v2 = sub_100BCE4F8;
  }
  else {
    uint64_t v2 = sub_100BCE1A8;
  }
  return _swift_task_switch(v2, 0, 0);
}

uint64_t sub_100BCE1A8()
{
  unint64_t v24 = v0;
  uint64_t v1 = v0[9];
  uint64_t v2 = v0[10];
  uint64_t v3 = v0[8];
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v2 + 48))(v3, 1, v1) == 1)
  {
    sub_10001DAB4(v3, &qword_10165AAE8);
  }
  else
  {
    (*(void (**)(void, uint64_t, uint64_t))(v2 + 32))(v0[11], v3, v1);
    if (*(void *)(RequestCredential.authHeaders.getter() + 16)
      && (sub_100723FF4(0x7A69726F68747541, 0xED00006E6F697461), (v4 & 1) != 0))
    {
      uint64_t v6 = v0[10];
      uint64_t v5 = v0[11];
      uint64_t v7 = v0[9];
      uint64_t v9 = v0[6];
      uint64_t v8 = v0[7];
      uint64_t v10 = v0[5];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      static String.Encoding.utf8.getter();
      uint64_t v11 = String.data(using:allowLossyConversion:)();
      unint64_t v13 = v12;
      swift_bridgeObjectRelease();
      (*(void (**)(uint64_t, uint64_t))(v9 + 8))(v8, v10);
      (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v5, v7);
      if (v13 >> 60 != 15) {
        goto LABEL_13;
      }
    }
    else
    {
      uint64_t v15 = v0[10];
      uint64_t v14 = v0[11];
      uint64_t v16 = v0[9];
      swift_bridgeObjectRelease();
      (*(void (**)(uint64_t, uint64_t))(v15 + 8))(v14, v16);
    }
  }
  if (qword_101637408 != -1) {
    swift_once();
  }
  uint64_t v17 = type metadata accessor for Logger();
  sub_100010324(v17, (uint64_t)qword_10170F1B0);
  uint64_t v18 = Logger.logObject.getter();
  os_log_type_t v19 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v18, v19))
  {
    uint64_t v20 = (uint8_t *)swift_slowAlloc();
    uint64_t v23 = swift_slowAlloc();
    *(_DWORD *)uint64_t v20 = 136446210;
    v0[4] = sub_1008FA0F0(0xD000000000000016, 0x8000000101415F40, &v23);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl((void *)&_mh_execute_header, v18, v19, "%{public}s Could not read credential data.", v20, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }

  uint64_t v11 = 0;
  unint64_t v13 = 0xC000000000000000;
LABEL_13:
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v21 = (uint64_t (*)(uint64_t, unint64_t))v0[1];
  return v21(v11, v13);
}

uint64_t sub_100BCE4F8()
{
  uint64_t v10 = v0;
  if (qword_101637408 != -1) {
    swift_once();
  }
  uint64_t v1 = type metadata accessor for Logger();
  sub_100010324(v1, (uint64_t)qword_10170F1B0);
  swift_errorRetain();
  swift_errorRetain();
  uint64_t v2 = Logger.logObject.getter();
  os_log_type_t v3 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v2, v3))
  {
    uint64_t v4 = swift_slowAlloc();
    uint64_t v5 = (void *)swift_slowAlloc();
    uint64_t v9 = swift_slowAlloc();
    *(_DWORD *)uint64_t v4 = 136446466;
    v0[2] = sub_1008FA0F0(0xD000000000000016, 0x8000000101415F40, &v9);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v4 + 12) = 2114;
    swift_errorRetain();
    uint64_t v6 = _swift_stdlib_bridgeErrorToNSError();
    v0[3] = v6;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *uint64_t v5 = v6;
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl((void *)&_mh_execute_header, v2, v3, "%{public}s Cannot get authorization header %{public}@.", (uint8_t *)v4, 0x16u);
    sub_10000588C((uint64_t *)&unk_101638EA0);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    swift_errorRelease();
    swift_errorRelease();
  }

  swift_errorRelease();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v7 = (uint64_t (*)(void, unint64_t))v0[1];
  return v7(0, 0xC000000000000000);
}

uint64_t sub_100BCE790()
{
  uint64_t v1 = type metadata accessor for String.Encoding();
  v0[5] = v1;
  v0[6] = *(void *)(v1 - 8);
  v0[7] = swift_task_alloc();
  sub_10000588C(&qword_10165AAE8);
  uint64_t v2 = swift_task_alloc();
  v0[8] = v2;
  uint64_t v3 = type metadata accessor for SearchpartyAccount();
  v0[9] = v3;
  v0[10] = *(void *)(v3 - 8);
  v0[11] = swift_task_alloc();
  uint64_t v4 = (void *)swift_task_alloc();
  v0[12] = v4;
  *uint64_t v4 = v0;
  v4[1] = sub_100BCE914;
  return static AppleAccount.searchpartyAccount.getter(v2);
}

uint64_t sub_100BCE914()
{
  *(void *)(*(void *)v1 + 104) = v0;
  swift_task_dealloc();
  if (v0) {
    uint64_t v2 = sub_100BCED78;
  }
  else {
    uint64_t v2 = sub_100BCEA28;
  }
  return _swift_task_switch(v2, 0, 0);
}

uint64_t sub_100BCEA28()
{
  unint64_t v24 = v0;
  uint64_t v1 = v0[9];
  uint64_t v2 = v0[10];
  uint64_t v3 = v0[8];
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v2 + 48))(v3, 1, v1) == 1)
  {
    sub_10001DAB4(v3, &qword_10165AAE8);
  }
  else
  {
    (*(void (**)(void, uint64_t, uint64_t))(v2 + 32))(v0[11], v3, v1);
    if (*(void *)(RequestCredential.authHeaders.getter() + 16)
      && (sub_100723FF4(0x7A69726F68747541, 0xED00006E6F697461), (v4 & 1) != 0))
    {
      uint64_t v6 = v0[10];
      uint64_t v5 = v0[11];
      uint64_t v7 = v0[9];
      uint64_t v9 = v0[6];
      uint64_t v8 = v0[7];
      uint64_t v10 = v0[5];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      static String.Encoding.utf8.getter();
      uint64_t v11 = String.data(using:allowLossyConversion:)();
      unint64_t v13 = v12;
      swift_bridgeObjectRelease();
      (*(void (**)(uint64_t, uint64_t))(v9 + 8))(v8, v10);
      (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v5, v7);
      if (v13 >> 60 != 15) {
        goto LABEL_13;
      }
    }
    else
    {
      uint64_t v15 = v0[10];
      uint64_t v14 = v0[11];
      uint64_t v16 = v0[9];
      swift_bridgeObjectRelease();
      (*(void (**)(uint64_t, uint64_t))(v15 + 8))(v14, v16);
    }
  }
  if (qword_101637408 != -1) {
    swift_once();
  }
  uint64_t v17 = type metadata accessor for Logger();
  sub_100010324(v17, (uint64_t)qword_10170F1B0);
  uint64_t v18 = Logger.logObject.getter();
  os_log_type_t v19 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v18, v19))
  {
    uint64_t v20 = (uint8_t *)swift_slowAlloc();
    uint64_t v23 = swift_slowAlloc();
    *(_DWORD *)uint64_t v20 = 136446210;
    v0[4] = sub_1008FA0F0(0xD000000000000020, 0x8000000101415F60, &v23);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl((void *)&_mh_execute_header, v18, v19, "%{public}s Could not read credential data.", v20, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }

  uint64_t v11 = 0;
  unint64_t v13 = 0xC000000000000000;
LABEL_13:
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v21 = (uint64_t (*)(uint64_t, unint64_t))v0[1];
  return v21(v11, v13);
}

uint64_t sub_100BCED78()
{
  uint64_t v10 = v0;
  if (qword_101637408 != -1) {
    swift_once();
  }
  uint64_t v1 = type metadata accessor for Logger();
  sub_100010324(v1, (uint64_t)qword_10170F1B0);
  swift_errorRetain();
  swift_errorRetain();
  uint64_t v2 = Logger.logObject.getter();
  os_log_type_t v3 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v2, v3))
  {
    uint64_t v4 = swift_slowAlloc();
    uint64_t v5 = (void *)swift_slowAlloc();
    uint64_t v9 = swift_slowAlloc();
    *(_DWORD *)uint64_t v4 = 136446466;
    v0[2] = sub_1008FA0F0(0xD000000000000020, 0x8000000101415F60, &v9);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v4 + 12) = 2114;
    swift_errorRetain();
    uint64_t v6 = _swift_stdlib_bridgeErrorToNSError();
    v0[3] = v6;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *uint64_t v5 = v6;
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl((void *)&_mh_execute_header, v2, v3, "%{public}s Cannot get authorization header %{public}@.", (uint8_t *)v4, 0x16u);
    sub_10000588C((uint64_t *)&unk_101638EA0);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    swift_errorRelease();
    swift_errorRelease();
  }

  swift_errorRelease();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v7 = (uint64_t (*)(void, unint64_t))v0[1];
  return v7(0, 0xC000000000000000);
}

uint64_t sub_100BCF010()
{
  uint64_t v1 = type metadata accessor for String.Encoding();
  v0[5] = v1;
  v0[6] = *(void *)(v1 - 8);
  v0[7] = swift_task_alloc();
  sub_10000588C(&qword_10165AAE8);
  uint64_t v2 = swift_task_alloc();
  v0[8] = v2;
  uint64_t v3 = type metadata accessor for SearchpartyAccount();
  v0[9] = v3;
  v0[10] = *(void *)(v3 - 8);
  v0[11] = swift_task_alloc();
  uint64_t v4 = (void *)swift_task_alloc();
  v0[12] = v4;
  *uint64_t v4 = v0;
  v4[1] = sub_100BCF194;
  return static AppleAccount.searchpartyAccount.getter(v2);
}

uint64_t sub_100BCF194()
{
  *(void *)(*(void *)v1 + 104) = v0;
  swift_task_dealloc();
  if (v0) {
    uint64_t v2 = sub_100BCF5F8;
  }
  else {
    uint64_t v2 = sub_100BCF2A8;
  }
  return _swift_task_switch(v2, 0, 0);
}

uint64_t sub_100BCF2A8()
{
  unint64_t v24 = v0;
  uint64_t v1 = v0[9];
  uint64_t v2 = v0[10];
  uint64_t v3 = v0[8];
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v2 + 48))(v3, 1, v1) == 1)
  {
    sub_10001DAB4(v3, &qword_10165AAE8);
  }
  else
  {
    (*(void (**)(void, uint64_t, uint64_t))(v2 + 32))(v0[11], v3, v1);
    if (*(void *)(RequestCredential.authHeaders.getter() + 16)
      && (sub_100723FF4(0x7A69726F68747541, 0xED00006E6F697461), (v4 & 1) != 0))
    {
      uint64_t v6 = v0[10];
      uint64_t v5 = v0[11];
      uint64_t v7 = v0[9];
      uint64_t v9 = v0[6];
      uint64_t v8 = v0[7];
      uint64_t v10 = v0[5];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      static String.Encoding.utf8.getter();
      uint64_t v11 = String.data(using:allowLossyConversion:)();
      unint64_t v13 = v12;
      swift_bridgeObjectRelease();
      (*(void (**)(uint64_t, uint64_t))(v9 + 8))(v8, v10);
      (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v5, v7);
      if (v13 >> 60 != 15) {
        goto LABEL_13;
      }
    }
    else
    {
      uint64_t v15 = v0[10];
      uint64_t v14 = v0[11];
      uint64_t v16 = v0[9];
      swift_bridgeObjectRelease();
      (*(void (**)(uint64_t, uint64_t))(v15 + 8))(v14, v16);
    }
  }
  if (qword_101637408 != -1) {
    swift_once();
  }
  uint64_t v17 = type metadata accessor for Logger();
  sub_100010324(v17, (uint64_t)qword_10170F1B0);
  uint64_t v18 = Logger.logObject.getter();
  os_log_type_t v19 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v18, v19))
  {
    uint64_t v20 = (uint8_t *)swift_slowAlloc();
    uint64_t v23 = swift_slowAlloc();
    *(_DWORD *)uint64_t v20 = 136446210;
    v0[4] = sub_1008FA0F0(0xD00000000000001ELL, 0x8000000101415F20, &v23);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl((void *)&_mh_execute_header, v18, v19, "%{public}s Could not read credential data.", v20, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }

  uint64_t v11 = 0;
  unint64_t v13 = 0xC000000000000000;
LABEL_13:
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v21 = (uint64_t (*)(uint64_t, unint64_t))v0[1];
  return v21(v11, v13);
}

uint64_t sub_100BCF5F8()
{
  uint64_t v10 = v0;
  if (qword_101637408 != -1) {
    swift_once();
  }
  uint64_t v1 = type metadata accessor for Logger();
  sub_100010324(v1, (uint64_t)qword_10170F1B0);
  swift_errorRetain();
  swift_errorRetain();
  uint64_t v2 = Logger.logObject.getter();
  os_log_type_t v3 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v2, v3))
  {
    uint64_t v4 = swift_slowAlloc();
    uint64_t v5 = (void *)swift_slowAlloc();
    uint64_t v9 = swift_slowAlloc();
    *(_DWORD *)uint64_t v4 = 136446466;
    v0[2] = sub_1008FA0F0(0xD00000000000001ELL, 0x8000000101415F20, &v9);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v4 + 12) = 2114;
    swift_errorRetain();
    uint64_t v6 = _swift_stdlib_bridgeErrorToNSError();
    v0[3] = v6;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *uint64_t v5 = v6;
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl((void *)&_mh_execute_header, v2, v3, "%{public}s Cannot get authorization header %{public}@.", (uint8_t *)v4, 0x16u);
    sub_10000588C((uint64_t *)&unk_101638EA0);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    swift_errorRelease();
    swift_errorRelease();
  }

  swift_errorRelease();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v7 = (uint64_t (*)(void, unint64_t))v0[1];
  return v7(0, 0xC000000000000000);
}

uint64_t sub_100BCF890()
{
  uint64_t v1 = type metadata accessor for String.Encoding();
  v0[5] = v1;
  v0[6] = *(void *)(v1 - 8);
  v0[7] = swift_task_alloc();
  sub_10000588C(&qword_10165AAE8);
  uint64_t v2 = swift_task_alloc();
  v0[8] = v2;
  uint64_t v3 = type metadata accessor for SearchpartyAccount();
  v0[9] = v3;
  v0[10] = *(void *)(v3 - 8);
  v0[11] = swift_task_alloc();
  uint64_t v4 = (void *)swift_task_alloc();
  v0[12] = v4;
  *uint64_t v4 = v0;
  v4[1] = sub_100BCFA14;
  return static AppleAccount.searchpartyAccount.getter(v2);
}

uint64_t sub_100BCFA14()
{
  *(void *)(*(void *)v1 + 104) = v0;
  swift_task_dealloc();
  if (v0) {
    uint64_t v2 = sub_100BCFE78;
  }
  else {
    uint64_t v2 = sub_100BCFB28;
  }
  return _swift_task_switch(v2, 0, 0);
}

uint64_t sub_100BCFB28()
{
  unint64_t v24 = v0;
  uint64_t v1 = v0[9];
  uint64_t v2 = v0[10];
  uint64_t v3 = v0[8];
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v2 + 48))(v3, 1, v1) == 1)
  {
    sub_10001DAB4(v3, &qword_10165AAE8);
  }
  else
  {
    (*(void (**)(void, uint64_t, uint64_t))(v2 + 32))(v0[11], v3, v1);
    if (*(void *)(RequestCredential.authHeaders.getter() + 16)
      && (sub_100723FF4(0x7A69726F68747541, 0xED00006E6F697461), (v4 & 1) != 0))
    {
      uint64_t v6 = v0[10];
      uint64_t v5 = v0[11];
      uint64_t v7 = v0[9];
      uint64_t v9 = v0[6];
      uint64_t v8 = v0[7];
      uint64_t v10 = v0[5];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      static String.Encoding.utf8.getter();
      uint64_t v11 = String.data(using:allowLossyConversion:)();
      unint64_t v13 = v12;
      swift_bridgeObjectRelease();
      (*(void (**)(uint64_t, uint64_t))(v9 + 8))(v8, v10);
      (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v5, v7);
      if (v13 >> 60 != 15) {
        goto LABEL_13;
      }
    }
    else
    {
      uint64_t v15 = v0[10];
      uint64_t v14 = v0[11];
      uint64_t v16 = v0[9];
      swift_bridgeObjectRelease();
      (*(void (**)(uint64_t, uint64_t))(v15 + 8))(v14, v16);
    }
  }
  if (qword_101637408 != -1) {
    swift_once();
  }
  uint64_t v17 = type metadata accessor for Logger();
  sub_100010324(v17, (uint64_t)qword_10170F1B0);
  uint64_t v18 = Logger.logObject.getter();
  os_log_type_t v19 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v18, v19))
  {
    uint64_t v20 = (uint8_t *)swift_slowAlloc();
    uint64_t v23 = swift_slowAlloc();
    *(_DWORD *)uint64_t v20 = 136446210;
    v0[4] = sub_1008FA0F0(0xD00000000000001BLL, 0x8000000101415DB0, &v23);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl((void *)&_mh_execute_header, v18, v19, "%{public}s Could not read credential data.", v20, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }

  uint64_t v11 = 0;
  unint64_t v13 = 0xC000000000000000;
LABEL_13:
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v21 = (uint64_t (*)(uint64_t, unint64_t))v0[1];
  return v21(v11, v13);
}

uint64_t sub_100BCFE78()
{
  uint64_t v10 = v0;
  if (qword_101637408 != -1) {
    swift_once();
  }
  uint64_t v1 = type metadata accessor for Logger();
  sub_100010324(v1, (uint64_t)qword_10170F1B0);
  swift_errorRetain();
  swift_errorRetain();
  uint64_t v2 = Logger.logObject.getter();
  os_log_type_t v3 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v2, v3))
  {
    uint64_t v4 = swift_slowAlloc();
    uint64_t v5 = (void *)swift_slowAlloc();
    uint64_t v9 = swift_slowAlloc();
    *(_DWORD *)uint64_t v4 = 136446466;
    v0[2] = sub_1008FA0F0(0xD00000000000001BLL, 0x8000000101415DB0, &v9);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v4 + 12) = 2114;
    swift_errorRetain();
    uint64_t v6 = _swift_stdlib_bridgeErrorToNSError();
    v0[3] = v6;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *uint64_t v5 = v6;
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl((void *)&_mh_execute_header, v2, v3, "%{public}s Cannot get authorization header %{public}@.", (uint8_t *)v4, 0x16u);
    sub_10000588C((uint64_t *)&unk_101638EA0);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    swift_errorRelease();
    swift_errorRelease();
  }

  swift_errorRelease();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v7 = (uint64_t (*)(void, unint64_t))v0[1];
  return v7(0, 0xC000000000000000);
}

uint64_t sub_100BD0110()
{
  uint64_t v1 = type metadata accessor for String.Encoding();
  v0[5] = v1;
  v0[6] = *(void *)(v1 - 8);
  v0[7] = swift_task_alloc();
  sub_10000588C(&qword_10165AAE8);
  uint64_t v2 = swift_task_alloc();
  v0[8] = v2;
  uint64_t v3 = type metadata accessor for SearchpartyAccount();
  v0[9] = v3;
  v0[10] = *(void *)(v3 - 8);
  v0[11] = swift_task_alloc();
  uint64_t v4 = (void *)swift_task_alloc();
  v0[12] = v4;
  *uint64_t v4 = v0;
  v4[1] = sub_100BD0294;
  return static AppleAccount.searchpartyAccount.getter(v2);
}

uint64_t sub_100BD0294()
{
  *(void *)(*(void *)v1 + 104) = v0;
  swift_task_dealloc();
  if (v0) {
    uint64_t v2 = sub_100BD06F8;
  }
  else {
    uint64_t v2 = sub_100BD03A8;
  }
  return _swift_task_switch(v2, 0, 0);
}

uint64_t sub_100BD03A8()
{
  unint64_t v24 = v0;
  uint64_t v1 = v0[9];
  uint64_t v2 = v0[10];
  uint64_t v3 = v0[8];
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v2 + 48))(v3, 1, v1) == 1)
  {
    sub_10001DAB4(v3, &qword_10165AAE8);
  }
  else
  {
    (*(void (**)(void, uint64_t, uint64_t))(v2 + 32))(v0[11], v3, v1);
    if (*(void *)(RequestCredential.authHeaders.getter() + 16)
      && (sub_100723FF4(0x7A69726F68747541, 0xED00006E6F697461), (v4 & 1) != 0))
    {
      uint64_t v6 = v0[10];
      uint64_t v5 = v0[11];
      uint64_t v7 = v0[9];
      uint64_t v9 = v0[6];
      uint64_t v8 = v0[7];
      uint64_t v10 = v0[5];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      static String.Encoding.utf8.getter();
      uint64_t v11 = String.data(using:allowLossyConversion:)();
      unint64_t v13 = v12;
      swift_bridgeObjectRelease();
      (*(void (**)(uint64_t, uint64_t))(v9 + 8))(v8, v10);
      (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v5, v7);
      if (v13 >> 60 != 15) {
        goto LABEL_13;
      }
    }
    else
    {
      uint64_t v15 = v0[10];
      uint64_t v14 = v0[11];
      uint64_t v16 = v0[9];
      swift_bridgeObjectRelease();
      (*(void (**)(uint64_t, uint64_t))(v15 + 8))(v14, v16);
    }
  }
  if (qword_101637408 != -1) {
    swift_once();
  }
  uint64_t v17 = type metadata accessor for Logger();
  sub_100010324(v17, (uint64_t)qword_10170F1B0);
  uint64_t v18 = Logger.logObject.getter();
  os_log_type_t v19 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v18, v19))
  {
    uint64_t v20 = (uint8_t *)swift_slowAlloc();
    uint64_t v23 = swift_slowAlloc();
    *(_DWORD *)uint64_t v20 = 136446210;
    v0[4] = sub_1008FA0F0(0xD000000000000013, 0x8000000101378E40, &v23);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl((void *)&_mh_execute_header, v18, v19, "%{public}s Could not read credential data.", v20, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }

  uint64_t v11 = 0;
  unint64_t v13 = 0xC000000000000000;
LABEL_13:
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v21 = (uint64_t (*)(uint64_t, unint64_t))v0[1];
  return v21(v11, v13);
}

uint64_t sub_100BD06F8()
{
  uint64_t v10 = v0;
  if (qword_101637408 != -1) {
    swift_once();
  }
  uint64_t v1 = type metadata accessor for Logger();
  sub_100010324(v1, (uint64_t)qword_10170F1B0);
  swift_errorRetain();
  swift_errorRetain();
  uint64_t v2 = Logger.logObject.getter();
  os_log_type_t v3 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v2, v3))
  {
    uint64_t v4 = swift_slowAlloc();
    uint64_t v5 = (void *)swift_slowAlloc();
    uint64_t v9 = swift_slowAlloc();
    *(_DWORD *)uint64_t v4 = 136446466;
    v0[2] = sub_1008FA0F0(0xD000000000000013, 0x8000000101378E40, &v9);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v4 + 12) = 2114;
    swift_errorRetain();
    uint64_t v6 = _swift_stdlib_bridgeErrorToNSError();
    v0[3] = v6;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *uint64_t v5 = v6;
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl((void *)&_mh_execute_header, v2, v3, "%{public}s Cannot get authorization header %{public}@.", (uint8_t *)v4, 0x16u);
    sub_10000588C((uint64_t *)&unk_101638EA0);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    swift_errorRelease();
    swift_errorRelease();
  }

  swift_errorRelease();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v7 = (uint64_t (*)(void, unint64_t))v0[1];
  return v7(0, 0xC000000000000000);
}

uint64_t sub_100BD0990()
{
  uint64_t v1 = type metadata accessor for String.Encoding();
  v0[5] = v1;
  v0[6] = *(void *)(v1 - 8);
  v0[7] = swift_task_alloc();
  sub_10000588C(&qword_10165AAE8);
  uint64_t v2 = swift_task_alloc();
  v0[8] = v2;
  uint64_t v3 = type metadata accessor for SearchpartyAccount();
  v0[9] = v3;
  v0[10] = *(void *)(v3 - 8);
  v0[11] = swift_task_alloc();
  uint64_t v4 = (void *)swift_task_alloc();
  v0[12] = v4;
  *uint64_t v4 = v0;
  v4[1] = sub_100BD0B14;
  return static AppleAccount.searchpartyAccount.getter(v2);
}

uint64_t sub_100BD0B14()
{
  *(void *)(*(void *)v1 + 104) = v0;
  swift_task_dealloc();
  if (v0) {
    uint64_t v2 = sub_100BD0F78;
  }
  else {
    uint64_t v2 = sub_100BD0C28;
  }
  return _swift_task_switch(v2, 0, 0);
}

uint64_t sub_100BD0C28()
{
  unint64_t v24 = v0;
  uint64_t v1 = v0[9];
  uint64_t v2 = v0[10];
  uint64_t v3 = v0[8];
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v2 + 48))(v3, 1, v1) == 1)
  {
    sub_10001DAB4(v3, &qword_10165AAE8);
  }
  else
  {
    (*(void (**)(void, uint64_t, uint64_t))(v2 + 32))(v0[11], v3, v1);
    if (*(void *)(RequestCredential.authHeaders.getter() + 16)
      && (sub_100723FF4(0x7A69726F68747541, 0xED00006E6F697461), (v4 & 1) != 0))
    {
      uint64_t v6 = v0[10];
      uint64_t v5 = v0[11];
      uint64_t v7 = v0[9];
      uint64_t v9 = v0[6];
      uint64_t v8 = v0[7];
      uint64_t v10 = v0[5];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      static String.Encoding.utf8.getter();
      uint64_t v11 = String.data(using:allowLossyConversion:)();
      unint64_t v13 = v12;
      swift_bridgeObjectRelease();
      (*(void (**)(uint64_t, uint64_t))(v9 + 8))(v8, v10);
      (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v5, v7);
      if (v13 >> 60 != 15) {
        goto LABEL_13;
      }
    }
    else
    {
      uint64_t v15 = v0[10];
      uint64_t v14 = v0[11];
      uint64_t v16 = v0[9];
      swift_bridgeObjectRelease();
      (*(void (**)(uint64_t, uint64_t))(v15 + 8))(v14, v16);
    }
  }
  if (qword_101637408 != -1) {
    swift_once();
  }
  uint64_t v17 = type metadata accessor for Logger();
  sub_100010324(v17, (uint64_t)qword_10170F1B0);
  uint64_t v18 = Logger.logObject.getter();
  os_log_type_t v19 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v18, v19))
  {
    uint64_t v20 = (uint8_t *)swift_slowAlloc();
    uint64_t v23 = swift_slowAlloc();
    *(_DWORD *)uint64_t v20 = 136446210;
    v0[4] = sub_1008FA0F0(0xD00000000000001BLL, 0x8000000101415EC0, &v23);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl((void *)&_mh_execute_header, v18, v19, "%{public}s Could not read credential data.", v20, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }

  uint64_t v11 = 0;
  unint64_t v13 = 0xC000000000000000;
LABEL_13:
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v21 = (uint64_t (*)(uint64_t, unint64_t))v0[1];
  return v21(v11, v13);
}

uint64_t sub_100BD0F78()
{
  uint64_t v10 = v0;
  if (qword_101637408 != -1) {
    swift_once();
  }
  uint64_t v1 = type metadata accessor for Logger();
  sub_100010324(v1, (uint64_t)qword_10170F1B0);
  swift_errorRetain();
  swift_errorRetain();
  uint64_t v2 = Logger.logObject.getter();
  os_log_type_t v3 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v2, v3))
  {
    uint64_t v4 = swift_slowAlloc();
    uint64_t v5 = (void *)swift_slowAlloc();
    uint64_t v9 = swift_slowAlloc();
    *(_DWORD *)uint64_t v4 = 136446466;
    v0[2] = sub_1008FA0F0(0xD00000000000001BLL, 0x8000000101415EC0, &v9);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v4 + 12) = 2114;
    swift_errorRetain();
    uint64_t v6 = _swift_stdlib_bridgeErrorToNSError();
    v0[3] = v6;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *uint64_t v5 = v6;
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl((void *)&_mh_execute_header, v2, v3, "%{public}s Cannot get authorization header %{public}@.", (uint8_t *)v4, 0x16u);
    sub_10000588C((uint64_t *)&unk_101638EA0);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    swift_errorRelease();
    swift_errorRelease();
  }

  swift_errorRelease();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v7 = (uint64_t (*)(void, unint64_t))v0[1];
  return v7(0, 0xC000000000000000);
}

uint64_t sub_100BD1210()
{
  uint64_t v1 = type metadata accessor for String.Encoding();
  v0[5] = v1;
  v0[6] = *(void *)(v1 - 8);
  v0[7] = swift_task_alloc();
  sub_10000588C(&qword_10165AAE8);
  uint64_t v2 = swift_task_alloc();
  v0[8] = v2;
  uint64_t v3 = type metadata accessor for SearchpartyAccount();
  v0[9] = v3;
  v0[10] = *(void *)(v3 - 8);
  v0[11] = swift_task_alloc();
  uint64_t v4 = (void *)swift_task_alloc();
  v0[12] = v4;
  *uint64_t v4 = v0;
  v4[1] = sub_100BD1394;
  return static AppleAccount.searchpartyAccount.getter(v2);
}

uint64_t sub_100BD1394()
{
  *(void *)(*(void *)v1 + 104) = v0;
  swift_task_dealloc();
  if (v0) {
    uint64_t v2 = sub_100BD17F8;
  }
  else {
    uint64_t v2 = sub_100BD14A8;
  }
  return _swift_task_switch(v2, 0, 0);
}

uint64_t sub_100BD14A8()
{
  unint64_t v24 = v0;
  uint64_t v1 = v0[9];
  uint64_t v2 = v0[10];
  uint64_t v3 = v0[8];
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v2 + 48))(v3, 1, v1) == 1)
  {
    sub_10001DAB4(v3, &qword_10165AAE8);
  }
  else
  {
    (*(void (**)(void, uint64_t, uint64_t))(v2 + 32))(v0[11], v3, v1);
    if (*(void *)(RequestCredential.authHeaders.getter() + 16)
      && (sub_100723FF4(0x7A69726F68747541, 0xED00006E6F697461), (v4 & 1) != 0))
    {
      uint64_t v6 = v0[10];
      uint64_t v5 = v0[11];
      uint64_t v7 = v0[9];
      uint64_t v9 = v0[6];
      uint64_t v8 = v0[7];
      uint64_t v10 = v0[5];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      static String.Encoding.utf8.getter();
      uint64_t v11 = String.data(using:allowLossyConversion:)();
      unint64_t v13 = v12;
      swift_bridgeObjectRelease();
      (*(void (**)(uint64_t, uint64_t))(v9 + 8))(v8, v10);
      (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v5, v7);
      if (v13 >> 60 != 15) {
        goto LABEL_13;
      }
    }
    else
    {
      uint64_t v15 = v0[10];
      uint64_t v14 = v0[11];
      uint64_t v16 = v0[9];
      swift_bridgeObjectRelease();
      (*(void (**)(uint64_t, uint64_t))(v15 + 8))(v14, v16);
    }
  }
  if (qword_101637408 != -1) {
    swift_once();
  }
  uint64_t v17 = type metadata accessor for Logger();
  sub_100010324(v17, (uint64_t)qword_10170F1B0);
  uint64_t v18 = Logger.logObject.getter();
  os_log_type_t v19 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v18, v19))
  {
    uint64_t v20 = (uint8_t *)swift_slowAlloc();
    uint64_t v23 = swift_slowAlloc();
    *(_DWORD *)uint64_t v20 = 136446210;
    v0[4] = sub_1008FA0F0(0xD000000000000021, 0x8000000101415E70, &v23);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl((void *)&_mh_execute_header, v18, v19, "%{public}s Could not read credential data.", v20, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }

  uint64_t v11 = 0;
  unint64_t v13 = 0xC000000000000000;
LABEL_13:
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v21 = (uint64_t (*)(uint64_t, unint64_t))v0[1];
  return v21(v11, v13);
}

uint64_t sub_100BD17F8()
{
  uint64_t v10 = v0;
  if (qword_101637408 != -1) {
    swift_once();
  }
  uint64_t v1 = type metadata accessor for Logger();
  sub_100010324(v1, (uint64_t)qword_10170F1B0);
  swift_errorRetain();
  swift_errorRetain();
  uint64_t v2 = Logger.logObject.getter();
  os_log_type_t v3 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v2, v3))
  {
    uint64_t v4 = swift_slowAlloc();
    uint64_t v5 = (void *)swift_slowAlloc();
    uint64_t v9 = swift_slowAlloc();
    *(_DWORD *)uint64_t v4 = 136446466;
    v0[2] = sub_1008FA0F0(0xD000000000000021, 0x8000000101415E70, &v9);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v4 + 12) = 2114;
    swift_errorRetain();
    uint64_t v6 = _swift_stdlib_bridgeErrorToNSError();
    v0[3] = v6;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *uint64_t v5 = v6;
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl((void *)&_mh_execute_header, v2, v3, "%{public}s Cannot get authorization header %{public}@.", (uint8_t *)v4, 0x16u);
    sub_10000588C((uint64_t *)&unk_101638EA0);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    swift_errorRelease();
    swift_errorRelease();
  }

  swift_errorRelease();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v7 = (uint64_t (*)(void, unint64_t))v0[1];
  return v7(0, 0xC000000000000000);
}

uint64_t sub_100BD1A90()
{
  uint64_t v1 = type metadata accessor for String.Encoding();
  v0[5] = v1;
  v0[6] = *(void *)(v1 - 8);
  v0[7] = swift_task_alloc();
  sub_10000588C(&qword_10165AAE8);
  uint64_t v2 = swift_task_alloc();
  v0[8] = v2;
  uint64_t v3 = type metadata accessor for SearchpartyAccount();
  v0[9] = v3;
  v0[10] = *(void *)(v3 - 8);
  v0[11] = swift_task_alloc();
  uint64_t v4 = (void *)swift_task_alloc();
  v0[12] = v4;
  *uint64_t v4 = v0;
  v4[1] = sub_100BD1C14;
  return static AppleAccount.searchpartyAccount.getter(v2);
}

uint64_t sub_100BD1C14()
{
  *(void *)(*(void *)v1 + 104) = v0;
  swift_task_dealloc();
  if (v0) {
    uint64_t v2 = sub_100BD207C;
  }
  else {
    uint64_t v2 = sub_100BD1D28;
  }
  return _swift_task_switch(v2, 0, 0);
}

uint64_t sub_100BD1D28()
{
  unint64_t v24 = v0;
  uint64_t v1 = v0[9];
  uint64_t v2 = v0[10];
  uint64_t v3 = v0[8];
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v2 + 48))(v3, 1, v1) == 1)
  {
    sub_10001DAB4(v3, &qword_10165AAE8);
  }
  else
  {
    (*(void (**)(void, uint64_t, uint64_t))(v2 + 32))(v0[11], v3, v1);
    if (*(void *)(RequestCredential.authHeaders.getter() + 16)
      && (sub_100723FF4(0x7A69726F68747541, 0xED00006E6F697461), (v4 & 1) != 0))
    {
      uint64_t v6 = v0[10];
      uint64_t v5 = v0[11];
      uint64_t v7 = v0[9];
      uint64_t v9 = v0[6];
      uint64_t v8 = v0[7];
      uint64_t v10 = v0[5];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      static String.Encoding.utf8.getter();
      uint64_t v11 = String.data(using:allowLossyConversion:)();
      unint64_t v13 = v12;
      swift_bridgeObjectRelease();
      (*(void (**)(uint64_t, uint64_t))(v9 + 8))(v8, v10);
      (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v5, v7);
      if (v13 >> 60 != 15) {
        goto LABEL_13;
      }
    }
    else
    {
      uint64_t v15 = v0[10];
      uint64_t v14 = v0[11];
      uint64_t v16 = v0[9];
      swift_bridgeObjectRelease();
      (*(void (**)(uint64_t, uint64_t))(v15 + 8))(v14, v16);
    }
  }
  if (qword_101637408 != -1) {
    swift_once();
  }
  uint64_t v17 = type metadata accessor for Logger();
  sub_100010324(v17, (uint64_t)qword_10170F1B0);
  uint64_t v18 = Logger.logObject.getter();
  os_log_type_t v19 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v18, v19))
  {
    uint64_t v20 = (uint8_t *)swift_slowAlloc();
    uint64_t v23 = swift_slowAlloc();
    *(_DWORD *)uint64_t v20 = 136446210;
    v0[4] = sub_1008FA0F0(0x7165526863746546, 0xEC00000074736575, &v23);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl((void *)&_mh_execute_header, v18, v19, "%{public}s Could not read credential data.", v20, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }

  uint64_t v11 = 0;
  unint64_t v13 = 0xC000000000000000;
LABEL_13:
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v21 = (uint64_t (*)(uint64_t, unint64_t))v0[1];
  return v21(v11, v13);
}

uint64_t sub_100BD207C()
{
  uint64_t v10 = v0;
  if (qword_101637408 != -1) {
    swift_once();
  }
  uint64_t v1 = type metadata accessor for Logger();
  sub_100010324(v1, (uint64_t)qword_10170F1B0);
  swift_errorRetain();
  swift_errorRetain();
  uint64_t v2 = Logger.logObject.getter();
  os_log_type_t v3 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v2, v3))
  {
    uint64_t v4 = swift_slowAlloc();
    uint64_t v5 = (void *)swift_slowAlloc();
    uint64_t v9 = swift_slowAlloc();
    *(_DWORD *)uint64_t v4 = 136446466;
    v0[2] = sub_1008FA0F0(0x7165526863746546, 0xEC00000074736575, &v9);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v4 + 12) = 2114;
    swift_errorRetain();
    uint64_t v6 = _swift_stdlib_bridgeErrorToNSError();
    v0[3] = v6;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *uint64_t v5 = v6;
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl((void *)&_mh_execute_header, v2, v3, "%{public}s Cannot get authorization header %{public}@.", (uint8_t *)v4, 0x16u);
    sub_10000588C((uint64_t *)&unk_101638EA0);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    swift_errorRelease();
    swift_errorRelease();
  }

  swift_errorRelease();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v7 = (uint64_t (*)(void, unint64_t))v0[1];
  return v7(0, 0xC000000000000000);
}

uint64_t sub_100BD2318()
{
  uint64_t v1 = type metadata accessor for String.Encoding();
  v0[5] = v1;
  v0[6] = *(void *)(v1 - 8);
  v0[7] = swift_task_alloc();
  sub_10000588C(&qword_10165AAE8);
  uint64_t v2 = swift_task_alloc();
  v0[8] = v2;
  uint64_t v3 = type metadata accessor for SearchpartyAccount();
  v0[9] = v3;
  v0[10] = *(void *)(v3 - 8);
  v0[11] = swift_task_alloc();
  uint64_t v4 = (void *)swift_task_alloc();
  v0[12] = v4;
  *uint64_t v4 = v0;
  v4[1] = sub_100BD249C;
  return static AppleAccount.searchpartyAccount.getter(v2);
}

uint64_t sub_100BD249C()
{
  *(void *)(*(void *)v1 + 104) = v0;
  swift_task_dealloc();
  if (v0) {
    uint64_t v2 = sub_100BD2900;
  }
  else {
    uint64_t v2 = sub_100BD25B0;
  }
  return _swift_task_switch(v2, 0, 0);
}

uint64_t sub_100BD25B0()
{
  unint64_t v24 = v0;
  uint64_t v1 = v0[9];
  uint64_t v2 = v0[10];
  uint64_t v3 = v0[8];
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v2 + 48))(v3, 1, v1) == 1)
  {
    sub_10001DAB4(v3, &qword_10165AAE8);
  }
  else
  {
    (*(void (**)(void, uint64_t, uint64_t))(v2 + 32))(v0[11], v3, v1);
    if (*(void *)(RequestCredential.authHeaders.getter() + 16)
      && (sub_100723FF4(0x7A69726F68747541, 0xED00006E6F697461), (v4 & 1) != 0))
    {
      uint64_t v6 = v0[10];
      uint64_t v5 = v0[11];
      uint64_t v7 = v0[9];
      uint64_t v9 = v0[6];
      uint64_t v8 = v0[7];
      uint64_t v10 = v0[5];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      static String.Encoding.utf8.getter();
      uint64_t v11 = String.data(using:allowLossyConversion:)();
      unint64_t v13 = v12;
      swift_bridgeObjectRelease();
      (*(void (**)(uint64_t, uint64_t))(v9 + 8))(v8, v10);
      (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v5, v7);
      if (v13 >> 60 != 15) {
        goto LABEL_13;
      }
    }
    else
    {
      uint64_t v15 = v0[10];
      uint64_t v14 = v0[11];
      uint64_t v16 = v0[9];
      swift_bridgeObjectRelease();
      (*(void (**)(uint64_t, uint64_t))(v15 + 8))(v14, v16);
    }
  }
  if (qword_101637408 != -1) {
    swift_once();
  }
  uint64_t v17 = type metadata accessor for Logger();
  sub_100010324(v17, (uint64_t)qword_10170F1B0);
  uint64_t v18 = Logger.logObject.getter();
  os_log_type_t v19 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v18, v19))
  {
    uint64_t v20 = (uint8_t *)swift_slowAlloc();
    uint64_t v23 = swift_slowAlloc();
    *(_DWORD *)uint64_t v20 = 136446210;
    v0[4] = sub_1008FA0F0(0xD00000000000001ELL, 0x8000000101415E50, &v23);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl((void *)&_mh_execute_header, v18, v19, "%{public}s Could not read credential data.", v20, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }

  uint64_t v11 = 0;
  unint64_t v13 = 0xC000000000000000;
LABEL_13:
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v21 = (uint64_t (*)(uint64_t, unint64_t))v0[1];
  return v21(v11, v13);
}

uint64_t sub_100BD2900()
{
  uint64_t v10 = v0;
  if (qword_101637408 != -1) {
    swift_once();
  }
  uint64_t v1 = type metadata accessor for Logger();
  sub_100010324(v1, (uint64_t)qword_10170F1B0);
  swift_errorRetain();
  swift_errorRetain();
  uint64_t v2 = Logger.logObject.getter();
  os_log_type_t v3 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v2, v3))
  {
    uint64_t v4 = swift_slowAlloc();
    uint64_t v5 = (void *)swift_slowAlloc();
    uint64_t v9 = swift_slowAlloc();
    *(_DWORD *)uint64_t v4 = 136446466;
    v0[2] = sub_1008FA0F0(0xD00000000000001ELL, 0x8000000101415E50, &v9);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v4 + 12) = 2114;
    swift_errorRetain();
    uint64_t v6 = _swift_stdlib_bridgeErrorToNSError();
    v0[3] = v6;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *uint64_t v5 = v6;
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl((void *)&_mh_execute_header, v2, v3, "%{public}s Cannot get authorization header %{public}@.", (uint8_t *)v4, 0x16u);
    sub_10000588C((uint64_t *)&unk_101638EA0);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    swift_errorRelease();
    swift_errorRelease();
  }

  swift_errorRelease();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v7 = (uint64_t (*)(void, unint64_t))v0[1];
  return v7(0, 0xC000000000000000);
}

uint64_t sub_100BD2B98()
{
  uint64_t v1 = type metadata accessor for String.Encoding();
  v0[5] = v1;
  v0[6] = *(void *)(v1 - 8);
  v0[7] = swift_task_alloc();
  sub_10000588C(&qword_10165AAE8);
  uint64_t v2 = swift_task_alloc();
  v0[8] = v2;
  uint64_t v3 = type metadata accessor for SearchpartyAccount();
  v0[9] = v3;
  v0[10] = *(void *)(v3 - 8);
  v0[11] = swift_task_alloc();
  uint64_t v4 = (void *)swift_task_alloc();
  v0[12] = v4;
  *uint64_t v4 = v0;
  v4[1] = sub_100BD2D1C;
  return static AppleAccount.searchpartyAccount.getter(v2);
}

uint64_t sub_100BD2D1C()
{
  *(void *)(*(void *)v1 + 104) = v0;
  swift_task_dealloc();
  if (v0) {
    uint64_t v2 = sub_100BD3180;
  }
  else {
    uint64_t v2 = sub_100BD2E30;
  }
  return _swift_task_switch(v2, 0, 0);
}

uint64_t sub_100BD2E30()
{
  unint64_t v24 = v0;
  uint64_t v1 = v0[9];
  uint64_t v2 = v0[10];
  uint64_t v3 = v0[8];
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v2 + 48))(v3, 1, v1) == 1)
  {
    sub_10001DAB4(v3, &qword_10165AAE8);
  }
  else
  {
    (*(void (**)(void, uint64_t, uint64_t))(v2 + 32))(v0[11], v3, v1);
    if (*(void *)(RequestCredential.authHeaders.getter() + 16)
      && (sub_100723FF4(0x7A69726F68747541, 0xED00006E6F697461), (v4 & 1) != 0))
    {
      uint64_t v6 = v0[10];
      uint64_t v5 = v0[11];
      uint64_t v7 = v0[9];
      uint64_t v9 = v0[6];
      uint64_t v8 = v0[7];
      uint64_t v10 = v0[5];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      static String.Encoding.utf8.getter();
      uint64_t v11 = String.data(using:allowLossyConversion:)();
      unint64_t v13 = v12;
      swift_bridgeObjectRelease();
      (*(void (**)(uint64_t, uint64_t))(v9 + 8))(v8, v10);
      (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v5, v7);
      if (v13 >> 60 != 15) {
        goto LABEL_13;
      }
    }
    else
    {
      uint64_t v15 = v0[10];
      uint64_t v14 = v0[11];
      uint64_t v16 = v0[9];
      swift_bridgeObjectRelease();
      (*(void (**)(uint64_t, uint64_t))(v15 + 8))(v14, v16);
    }
  }
  if (qword_101637408 != -1) {
    swift_once();
  }
  uint64_t v17 = type metadata accessor for Logger();
  sub_100010324(v17, (uint64_t)qword_10170F1B0);
  uint64_t v18 = Logger.logObject.getter();
  os_log_type_t v19 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v18, v19))
  {
    uint64_t v20 = (uint8_t *)swift_slowAlloc();
    uint64_t v23 = swift_slowAlloc();
    *(_DWORD *)uint64_t v20 = 136446210;
    v0[4] = sub_1008FA0F0(0xD000000000000014, 0x8000000101415E10, &v23);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl((void *)&_mh_execute_header, v18, v19, "%{public}s Could not read credential data.", v20, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }

  uint64_t v11 = 0;
  unint64_t v13 = 0xC000000000000000;
LABEL_13:
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v21 = (uint64_t (*)(uint64_t, unint64_t))v0[1];
  return v21(v11, v13);
}

uint64_t sub_100BD3180()
{
  uint64_t v10 = v0;
  if (qword_101637408 != -1) {
    swift_once();
  }
  uint64_t v1 = type metadata accessor for Logger();
  sub_100010324(v1, (uint64_t)qword_10170F1B0);
  swift_errorRetain();
  swift_errorRetain();
  uint64_t v2 = Logger.logObject.getter();
  os_log_type_t v3 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v2, v3))
  {
    uint64_t v4 = swift_slowAlloc();
    uint64_t v5 = (void *)swift_slowAlloc();
    uint64_t v9 = swift_slowAlloc();
    *(_DWORD *)uint64_t v4 = 136446466;
    v0[2] = sub_1008FA0F0(0xD000000000000014, 0x8000000101415E10, &v9);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v4 + 12) = 2114;
    swift_errorRetain();
    uint64_t v6 = _swift_stdlib_bridgeErrorToNSError();
    v0[3] = v6;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *uint64_t v5 = v6;
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl((void *)&_mh_execute_header, v2, v3, "%{public}s Cannot get authorization header %{public}@.", (uint8_t *)v4, 0x16u);
    sub_10000588C((uint64_t *)&unk_101638EA0);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    swift_errorRelease();
    swift_errorRelease();
  }

  swift_errorRelease();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v7 = (uint64_t (*)(void, unint64_t))v0[1];
  return v7(0, 0xC000000000000000);
}

uint64_t sub_100BD3418()
{
  uint64_t v1 = type metadata accessor for String.Encoding();
  v0[5] = v1;
  v0[6] = *(void *)(v1 - 8);
  v0[7] = swift_task_alloc();
  sub_10000588C(&qword_10165AAE8);
  uint64_t v2 = swift_task_alloc();
  v0[8] = v2;
  uint64_t v3 = type metadata accessor for SearchpartyAccount();
  v0[9] = v3;
  v0[10] = *(void *)(v3 - 8);
  v0[11] = swift_task_alloc();
  uint64_t v4 = (void *)swift_task_alloc();
  v0[12] = v4;
  *uint64_t v4 = v0;
  v4[1] = sub_100BD359C;
  return static AppleAccount.searchpartyAccount.getter(v2);
}

uint64_t sub_100BD359C()
{
  *(void *)(*(void *)v1 + 104) = v0;
  swift_task_dealloc();
  if (v0) {
    uint64_t v2 = sub_100BD3A00;
  }
  else {
    uint64_t v2 = sub_100BD36B0;
  }
  return _swift_task_switch(v2, 0, 0);
}

uint64_t sub_100BD36B0()
{
  unint64_t v24 = v0;
  uint64_t v1 = v0[9];
  uint64_t v2 = v0[10];
  uint64_t v3 = v0[8];
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v2 + 48))(v3, 1, v1) == 1)
  {
    sub_10001DAB4(v3, &qword_10165AAE8);
  }
  else
  {
    (*(void (**)(void, uint64_t, uint64_t))(v2 + 32))(v0[11], v3, v1);
    if (*(void *)(RequestCredential.authHeaders.getter() + 16)
      && (sub_100723FF4(0x7A69726F68747541, 0xED00006E6F697461), (v4 & 1) != 0))
    {
      uint64_t v6 = v0[10];
      uint64_t v5 = v0[11];
      uint64_t v7 = v0[9];
      uint64_t v9 = v0[6];
      uint64_t v8 = v0[7];
      uint64_t v10 = v0[5];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      static String.Encoding.utf8.getter();
      uint64_t v11 = String.data(using:allowLossyConversion:)();
      unint64_t v13 = v12;
      swift_bridgeObjectRelease();
      (*(void (**)(uint64_t, uint64_t))(v9 + 8))(v8, v10);
      (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v5, v7);
      if (v13 >> 60 != 15) {
        goto LABEL_13;
      }
    }
    else
    {
      uint64_t v15 = v0[10];
      uint64_t v14 = v0[11];
      uint64_t v16 = v0[9];
      swift_bridgeObjectRelease();
      (*(void (**)(uint64_t, uint64_t))(v15 + 8))(v14, v16);
    }
  }
  if (qword_101637408 != -1) {
    swift_once();
  }
  uint64_t v17 = type metadata accessor for Logger();
  sub_100010324(v17, (uint64_t)qword_10170F1B0);
  uint64_t v18 = Logger.logObject.getter();
  os_log_type_t v19 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v18, v19))
  {
    uint64_t v20 = (uint8_t *)swift_slowAlloc();
    uint64_t v23 = swift_slowAlloc();
    *(_DWORD *)uint64_t v20 = 136446210;
    v0[4] = sub_1008FA0F0(0xD000000000000020, 0x8000000101415FB0, &v23);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl((void *)&_mh_execute_header, v18, v19, "%{public}s Could not read credential data.", v20, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }

  uint64_t v11 = 0;
  unint64_t v13 = 0xC000000000000000;
LABEL_13:
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v21 = (uint64_t (*)(uint64_t, unint64_t))v0[1];
  return v21(v11, v13);
}

uint64_t sub_100BD3A00()
{
  uint64_t v10 = v0;
  if (qword_101637408 != -1) {
    swift_once();
  }
  uint64_t v1 = type metadata accessor for Logger();
  sub_100010324(v1, (uint64_t)qword_10170F1B0);
  swift_errorRetain();
  swift_errorRetain();
  uint64_t v2 = Logger.logObject.getter();
  os_log_type_t v3 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v2, v3))
  {
    uint64_t v4 = swift_slowAlloc();
    uint64_t v5 = (void *)swift_slowAlloc();
    uint64_t v9 = swift_slowAlloc();
    *(_DWORD *)uint64_t v4 = 136446466;
    v0[2] = sub_1008FA0F0(0xD000000000000020, 0x8000000101415FB0, &v9);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v4 + 12) = 2114;
    swift_errorRetain();
    uint64_t v6 = _swift_stdlib_bridgeErrorToNSError();
    v0[3] = v6;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *uint64_t v5 = v6;
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl((void *)&_mh_execute_header, v2, v3, "%{public}s Cannot get authorization header %{public}@.", (uint8_t *)v4, 0x16u);
    sub_10000588C((uint64_t *)&unk_101638EA0);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    swift_errorRelease();
    swift_errorRelease();
  }

  swift_errorRelease();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v7 = (uint64_t (*)(void, unint64_t))v0[1];
  return v7(0, 0xC000000000000000);
}

uint64_t sub_100BD3C98()
{
  uint64_t v1 = type metadata accessor for String.Encoding();
  v0[5] = v1;
  v0[6] = *(void *)(v1 - 8);
  v0[7] = swift_task_alloc();
  sub_10000588C(&qword_10165AAE8);
  uint64_t v2 = swift_task_alloc();
  v0[8] = v2;
  uint64_t v3 = type metadata accessor for SearchpartyAccount();
  v0[9] = v3;
  v0[10] = *(void *)(v3 - 8);
  v0[11] = swift_task_alloc();
  uint64_t v4 = (void *)swift_task_alloc();
  v0[12] = v4;
  *uint64_t v4 = v0;
  v4[1] = sub_100BD3E1C;
  return static AppleAccount.searchpartyAccount.getter(v2);
}

uint64_t sub_100BD3E1C()
{
  *(void *)(*(void *)v1 + 104) = v0;
  swift_task_dealloc();
  if (v0) {
    uint64_t v2 = sub_100BD4280;
  }
  else {
    uint64_t v2 = sub_100BD3F30;
  }
  return _swift_task_switch(v2, 0, 0);
}

uint64_t sub_100BD3F30()
{
  unint64_t v24 = v0;
  uint64_t v1 = v0[9];
  uint64_t v2 = v0[10];
  uint64_t v3 = v0[8];
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v2 + 48))(v3, 1, v1) == 1)
  {
    sub_10001DAB4(v3, &qword_10165AAE8);
  }
  else
  {
    (*(void (**)(void, uint64_t, uint64_t))(v2 + 32))(v0[11], v3, v1);
    if (*(void *)(RequestCredential.authHeaders.getter() + 16)
      && (sub_100723FF4(0x7A69726F68747541, 0xED00006E6F697461), (v4 & 1) != 0))
    {
      uint64_t v6 = v0[10];
      uint64_t v5 = v0[11];
      uint64_t v7 = v0[9];
      uint64_t v9 = v0[6];
      uint64_t v8 = v0[7];
      uint64_t v10 = v0[5];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      static String.Encoding.utf8.getter();
      uint64_t v11 = String.data(using:allowLossyConversion:)();
      unint64_t v13 = v12;
      swift_bridgeObjectRelease();
      (*(void (**)(uint64_t, uint64_t))(v9 + 8))(v8, v10);
      (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v5, v7);
      if (v13 >> 60 != 15) {
        goto LABEL_13;
      }
    }
    else
    {
      uint64_t v15 = v0[10];
      uint64_t v14 = v0[11];
      uint64_t v16 = v0[9];
      swift_bridgeObjectRelease();
      (*(void (**)(uint64_t, uint64_t))(v15 + 8))(v14, v16);
    }
  }
  if (qword_101637408 != -1) {
    swift_once();
  }
  uint64_t v17 = type metadata accessor for Logger();
  sub_100010324(v17, (uint64_t)qword_10170F1B0);
  uint64_t v18 = Logger.logObject.getter();
  os_log_type_t v19 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v18, v19))
  {
    uint64_t v20 = (uint8_t *)swift_slowAlloc();
    uint64_t v23 = swift_slowAlloc();
    *(_DWORD *)uint64_t v20 = 136446210;
    v0[4] = sub_1008FA0F0(0xD000000000000020, 0x8000000101416000, &v23);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl((void *)&_mh_execute_header, v18, v19, "%{public}s Could not read credential data.", v20, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }

  uint64_t v11 = 0;
  unint64_t v13 = 0xC000000000000000;
LABEL_13:
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v21 = (uint64_t (*)(uint64_t, unint64_t))v0[1];
  return v21(v11, v13);
}

uint64_t sub_100BD4280()
{
  uint64_t v10 = v0;
  if (qword_101637408 != -1) {
    swift_once();
  }
  uint64_t v1 = type metadata accessor for Logger();
  sub_100010324(v1, (uint64_t)qword_10170F1B0);
  swift_errorRetain();
  swift_errorRetain();
  uint64_t v2 = Logger.logObject.getter();
  os_log_type_t v3 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v2, v3))
  {
    uint64_t v4 = swift_slowAlloc();
    uint64_t v5 = (void *)swift_slowAlloc();
    uint64_t v9 = swift_slowAlloc();
    *(_DWORD *)uint64_t v4 = 136446466;
    v0[2] = sub_1008FA0F0(0xD000000000000020, 0x8000000101416000, &v9);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v4 + 12) = 2114;
    swift_errorRetain();
    uint64_t v6 = _swift_stdlib_bridgeErrorToNSError();
    v0[3] = v6;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *uint64_t v5 = v6;
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl((void *)&_mh_execute_header, v2, v3, "%{public}s Cannot get authorization header %{public}@.", (uint8_t *)v4, 0x16u);
    sub_10000588C((uint64_t *)&unk_101638EA0);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    swift_errorRelease();
    swift_errorRelease();
  }

  swift_errorRelease();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v7 = (uint64_t (*)(void, unint64_t))v0[1];
  return v7(0, 0xC000000000000000);
}

uint64_t sub_100BD4518()
{
  uint64_t v1 = type metadata accessor for String.Encoding();
  v0[5] = v1;
  v0[6] = *(void *)(v1 - 8);
  v0[7] = swift_task_alloc();
  sub_10000588C(&qword_10165AAE8);
  uint64_t v2 = swift_task_alloc();
  v0[8] = v2;
  uint64_t v3 = type metadata accessor for SearchpartyAccount();
  v0[9] = v3;
  v0[10] = *(void *)(v3 - 8);
  v0[11] = swift_task_alloc();
  uint64_t v4 = (void *)swift_task_alloc();
  v0[12] = v4;
  *uint64_t v4 = v0;
  v4[1] = sub_100BD469C;
  return static AppleAccount.searchpartyAccount.getter(v2);
}

uint64_t sub_100BD469C()
{
  *(void *)(*(void *)v1 + 104) = v0;
  swift_task_dealloc();
  if (v0) {
    uint64_t v2 = sub_100BD4B00;
  }
  else {
    uint64_t v2 = sub_100BD47B0;
  }
  return _swift_task_switch(v2, 0, 0);
}

uint64_t sub_100BD47B0()
{
  unint64_t v24 = v0;
  uint64_t v1 = v0[9];
  uint64_t v2 = v0[10];
  uint64_t v3 = v0[8];
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v2 + 48))(v3, 1, v1) == 1)
  {
    sub_10001DAB4(v3, &qword_10165AAE8);
  }
  else
  {
    (*(void (**)(void, uint64_t, uint64_t))(v2 + 32))(v0[11], v3, v1);
    if (*(void *)(RequestCredential.authHeaders.getter() + 16)
      && (sub_100723FF4(0x7A69726F68747541, 0xED00006E6F697461), (v4 & 1) != 0))
    {
      uint64_t v6 = v0[10];
      uint64_t v5 = v0[11];
      uint64_t v7 = v0[9];
      uint64_t v9 = v0[6];
      uint64_t v8 = v0[7];
      uint64_t v10 = v0[5];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      static String.Encoding.utf8.getter();
      uint64_t v11 = String.data(using:allowLossyConversion:)();
      unint64_t v13 = v12;
      swift_bridgeObjectRelease();
      (*(void (**)(uint64_t, uint64_t))(v9 + 8))(v8, v10);
      (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v5, v7);
      if (v13 >> 60 != 15) {
        goto LABEL_13;
      }
    }
    else
    {
      uint64_t v15 = v0[10];
      uint64_t v14 = v0[11];
      uint64_t v16 = v0[9];
      swift_bridgeObjectRelease();
      (*(void (**)(uint64_t, uint64_t))(v15 + 8))(v14, v16);
    }
  }
  if (qword_101637408 != -1) {
    swift_once();
  }
  uint64_t v17 = type metadata accessor for Logger();
  sub_100010324(v17, (uint64_t)qword_10170F1B0);
  uint64_t v18 = Logger.logObject.getter();
  os_log_type_t v19 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v18, v19))
  {
    uint64_t v20 = (uint8_t *)swift_slowAlloc();
    uint64_t v23 = swift_slowAlloc();
    *(_DWORD *)uint64_t v20 = 136446210;
    v0[4] = sub_1008FA0F0(0xD00000000000001CLL, 0x8000000101415E30, &v23);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl((void *)&_mh_execute_header, v18, v19, "%{public}s Could not read credential data.", v20, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }

  uint64_t v11 = 0;
  unint64_t v13 = 0xC000000000000000;
LABEL_13:
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v21 = (uint64_t (*)(uint64_t, unint64_t))v0[1];
  return v21(v11, v13);
}

uint64_t sub_100BD4B00()
{
  uint64_t v10 = v0;
  if (qword_101637408 != -1) {
    swift_once();
  }
  uint64_t v1 = type metadata accessor for Logger();
  sub_100010324(v1, (uint64_t)qword_10170F1B0);
  swift_errorRetain();
  swift_errorRetain();
  uint64_t v2 = Logger.logObject.getter();
  os_log_type_t v3 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v2, v3))
  {
    uint64_t v4 = swift_slowAlloc();
    uint64_t v5 = (void *)swift_slowAlloc();
    uint64_t v9 = swift_slowAlloc();
    *(_DWORD *)uint64_t v4 = 136446466;
    v0[2] = sub_1008FA0F0(0xD00000000000001CLL, 0x8000000101415E30, &v9);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v4 + 12) = 2114;
    swift_errorRetain();
    uint64_t v6 = _swift_stdlib_bridgeErrorToNSError();
    v0[3] = v6;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *uint64_t v5 = v6;
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl((void *)&_mh_execute_header, v2, v3, "%{public}s Cannot get authorization header %{public}@.", (uint8_t *)v4, 0x16u);
    sub_10000588C((uint64_t *)&unk_101638EA0);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    swift_errorRelease();
    swift_errorRelease();
  }

  swift_errorRelease();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v7 = (uint64_t (*)(void, unint64_t))v0[1];
  return v7(0, 0xC000000000000000);
}

uint64_t sub_100BD4D98()
{
  uint64_t v1 = type metadata accessor for String.Encoding();
  v0[5] = v1;
  v0[6] = *(void *)(v1 - 8);
  v0[7] = swift_task_alloc();
  sub_10000588C(&qword_10165AAE8);
  uint64_t v2 = swift_task_alloc();
  v0[8] = v2;
  uint64_t v3 = type metadata accessor for SearchpartyAccount();
  v0[9] = v3;
  v0[10] = *(void *)(v3 - 8);
  v0[11] = swift_task_alloc();
  uint64_t v4 = (void *)swift_task_alloc();
  v0[12] = v4;
  *uint64_t v4 = v0;
  v4[1] = sub_100BD4F1C;
  return static AppleAccount.searchpartyAccount.getter(v2);
}

uint64_t sub_100BD4F1C()
{
  *(void *)(*(void *)v1 + 104) = v0;
  swift_task_dealloc();
  if (v0) {
    uint64_t v2 = sub_100BD5380;
  }
  else {
    uint64_t v2 = sub_100BD5030;
  }
  return _swift_task_switch(v2, 0, 0);
}

uint64_t sub_100BD5030()
{
  unint64_t v24 = v0;
  uint64_t v1 = v0[9];
  uint64_t v2 = v0[10];
  uint64_t v3 = v0[8];
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v2 + 48))(v3, 1, v1) == 1)
  {
    sub_10001DAB4(v3, &qword_10165AAE8);
  }
  else
  {
    (*(void (**)(void, uint64_t, uint64_t))(v2 + 32))(v0[11], v3, v1);
    if (*(void *)(RequestCredential.authHeaders.getter() + 16)
      && (sub_100723FF4(0x7A69726F68747541, 0xED00006E6F697461), (v4 & 1) != 0))
    {
      uint64_t v6 = v0[10];
      uint64_t v5 = v0[11];
      uint64_t v7 = v0[9];
      uint64_t v9 = v0[6];
      uint64_t v8 = v0[7];
      uint64_t v10 = v0[5];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      static String.Encoding.utf8.getter();
      uint64_t v11 = String.data(using:allowLossyConversion:)();
      unint64_t v13 = v12;
      swift_bridgeObjectRelease();
      (*(void (**)(uint64_t, uint64_t))(v9 + 8))(v8, v10);
      (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v5, v7);
      if (v13 >> 60 != 15) {
        goto LABEL_13;
      }
    }
    else
    {
      uint64_t v15 = v0[10];
      uint64_t v14 = v0[11];
      uint64_t v16 = v0[9];
      swift_bridgeObjectRelease();
      (*(void (**)(uint64_t, uint64_t))(v15 + 8))(v14, v16);
    }
  }
  if (qword_101637408 != -1) {
    swift_once();
  }
  uint64_t v17 = type metadata accessor for Logger();
  sub_100010324(v17, (uint64_t)qword_10170F1B0);
  uint64_t v18 = Logger.logObject.getter();
  os_log_type_t v19 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v18, v19))
  {
    uint64_t v20 = (uint8_t *)swift_slowAlloc();
    uint64_t v23 = swift_slowAlloc();
    *(_DWORD *)uint64_t v20 = 136446210;
    v0[4] = sub_1008FA0F0(0xD00000000000001ELL, 0x8000000101415FE0, &v23);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl((void *)&_mh_execute_header, v18, v19, "%{public}s Could not read credential data.", v20, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }

  uint64_t v11 = 0;
  unint64_t v13 = 0xC000000000000000;
LABEL_13:
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v21 = (uint64_t (*)(uint64_t, unint64_t))v0[1];
  return v21(v11, v13);
}

uint64_t sub_100BD5380()
{
  uint64_t v10 = v0;
  if (qword_101637408 != -1) {
    swift_once();
  }
  uint64_t v1 = type metadata accessor for Logger();
  sub_100010324(v1, (uint64_t)qword_10170F1B0);
  swift_errorRetain();
  swift_errorRetain();
  uint64_t v2 = Logger.logObject.getter();
  os_log_type_t v3 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v2, v3))
  {
    uint64_t v4 = swift_slowAlloc();
    uint64_t v5 = (void *)swift_slowAlloc();
    uint64_t v9 = swift_slowAlloc();
    *(_DWORD *)uint64_t v4 = 136446466;
    v0[2] = sub_1008FA0F0(0xD00000000000001ELL, 0x8000000101415FE0, &v9);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v4 + 12) = 2114;
    swift_errorRetain();
    uint64_t v6 = _swift_stdlib_bridgeErrorToNSError();
    v0[3] = v6;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *uint64_t v5 = v6;
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl((void *)&_mh_execute_header, v2, v3, "%{public}s Cannot get authorization header %{public}@.", (uint8_t *)v4, 0x16u);
    sub_10000588C((uint64_t *)&unk_101638EA0);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    swift_errorRelease();
    swift_errorRelease();
  }

  swift_errorRelease();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v7 = (uint64_t (*)(void, unint64_t))v0[1];
  return v7(0, 0xC000000000000000);
}

uint64_t sub_100BD5618()
{
  uint64_t v1 = type metadata accessor for String.Encoding();
  v0[5] = v1;
  v0[6] = *(void *)(v1 - 8);
  v0[7] = swift_task_alloc();
  sub_10000588C(&qword_10165AAE8);
  uint64_t v2 = swift_task_alloc();
  v0[8] = v2;
  uint64_t v3 = type metadata accessor for SearchpartyAccount();
  v0[9] = v3;
  v0[10] = *(void *)(v3 - 8);
  v0[11] = swift_task_alloc();
  uint64_t v4 = (void *)swift_task_alloc();
  v0[12] = v4;
  *uint64_t v4 = v0;
  v4[1] = sub_100BD579C;
  return static AppleAccount.searchpartyAccount.getter(v2);
}

uint64_t sub_100BD579C()
{
  *(void *)(*(void *)v1 + 104) = v0;
  swift_task_dealloc();
  if (v0) {
    uint64_t v2 = sub_100BD5C00;
  }
  else {
    uint64_t v2 = sub_100BD58B0;
  }
  return _swift_task_switch(v2, 0, 0);
}

uint64_t sub_100BD58B0()
{
  unint64_t v24 = v0;
  uint64_t v1 = v0[9];
  uint64_t v2 = v0[10];
  uint64_t v3 = v0[8];
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v2 + 48))(v3, 1, v1) == 1)
  {
    sub_10001DAB4(v3, &qword_10165AAE8);
  }
  else
  {
    (*(void (**)(void, uint64_t, uint64_t))(v2 + 32))(v0[11], v3, v1);
    if (*(void *)(RequestCredential.authHeaders.getter() + 16)
      && (sub_100723FF4(0x7A69726F68747541, 0xED00006E6F697461), (v4 & 1) != 0))
    {
      uint64_t v6 = v0[10];
      uint64_t v5 = v0[11];
      uint64_t v7 = v0[9];
      uint64_t v9 = v0[6];
      uint64_t v8 = v0[7];
      uint64_t v10 = v0[5];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      static String.Encoding.utf8.getter();
      uint64_t v11 = String.data(using:allowLossyConversion:)();
      unint64_t v13 = v12;
      swift_bridgeObjectRelease();
      (*(void (**)(uint64_t, uint64_t))(v9 + 8))(v8, v10);
      (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v5, v7);
      if (v13 >> 60 != 15) {
        goto LABEL_13;
      }
    }
    else
    {
      uint64_t v15 = v0[10];
      uint64_t v14 = v0[11];
      uint64_t v16 = v0[9];
      swift_bridgeObjectRelease();
      (*(void (**)(uint64_t, uint64_t))(v15 + 8))(v14, v16);
    }
  }
  if (qword_101637408 != -1) {
    swift_once();
  }
  uint64_t v17 = type metadata accessor for Logger();
  sub_100010324(v17, (uint64_t)qword_10170F1B0);
  uint64_t v18 = Logger.logObject.getter();
  os_log_type_t v19 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v18, v19))
  {
    uint64_t v20 = (uint8_t *)swift_slowAlloc();
    uint64_t v23 = swift_slowAlloc();
    *(_DWORD *)uint64_t v20 = 136446210;
    v0[4] = sub_1008FA0F0(0xD000000000000013, 0x8000000101415DF0, &v23);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl((void *)&_mh_execute_header, v18, v19, "%{public}s Could not read credential data.", v20, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }

  uint64_t v11 = 0;
  unint64_t v13 = 0xC000000000000000;
LABEL_13:
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v21 = (uint64_t (*)(uint64_t, unint64_t))v0[1];
  return v21(v11, v13);
}

uint64_t sub_100BD5C00()
{
  uint64_t v10 = v0;
  if (qword_101637408 != -1) {
    swift_once();
  }
  uint64_t v1 = type metadata accessor for Logger();
  sub_100010324(v1, (uint64_t)qword_10170F1B0);
  swift_errorRetain();
  swift_errorRetain();
  uint64_t v2 = Logger.logObject.getter();
  os_log_type_t v3 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v2, v3))
  {
    uint64_t v4 = swift_slowAlloc();
    uint64_t v5 = (void *)swift_slowAlloc();
    uint64_t v9 = swift_slowAlloc();
    *(_DWORD *)uint64_t v4 = 136446466;
    v0[2] = sub_1008FA0F0(0xD000000000000013, 0x8000000101415DF0, &v9);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v4 + 12) = 2114;
    swift_errorRetain();
    uint64_t v6 = _swift_stdlib_bridgeErrorToNSError();
    v0[3] = v6;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *uint64_t v5 = v6;
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl((void *)&_mh_execute_header, v2, v3, "%{public}s Cannot get authorization header %{public}@.", (uint8_t *)v4, 0x16u);
    sub_10000588C((uint64_t *)&unk_101638EA0);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    swift_errorRelease();
    swift_errorRelease();
  }

  swift_errorRelease();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v7 = (uint64_t (*)(void, unint64_t))v0[1];
  return v7(0, 0xC000000000000000);
}

uint64_t sub_100BD5E98(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v3[54] = a2;
  v3[55] = a3;
  v3[53] = a1;
  uint64_t v4 = type metadata accessor for HashAlgorithm();
  v3[56] = v4;
  v3[57] = *(void *)(v4 - 8);
  v3[58] = swift_task_alloc();
  return _swift_task_switch(sub_100BD5F5C, 0, 0);
}

uint64_t sub_100BD5F5C()
{
  if (qword_101637188 != -1) {
    swift_once();
  }
  uint64_t v1 = (void *)qword_10170EE68;
  id v2 = [self sharedInstance];
  unsigned int v3 = [v2 isInternalBuild];

  if (v3
    && (NSString v4 = String._bridgeToObjectiveC()(), v5 = [v1 BOOLForKey:v4],
                                             v4,
                                             v5))
  {
    if (qword_101637408 != -1) {
      swift_once();
    }
    uint64_t v6 = type metadata accessor for Logger();
    sub_100010324(v6, (uint64_t)qword_10170F1B0);
    uint64_t v7 = Logger.logObject.getter();
    os_log_type_t v8 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v7, v8))
    {
      uint64_t v9 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v9 = 0;
      _os_log_impl((void *)&_mh_execute_header, v7, v8, "ExcludeBAACerts defaults is enabled. Skipping BAA", v9, 2u);
      swift_slowDealloc();
    }

    swift_task_dealloc();
    uint64_t v10 = (uint64_t (*)(void *))v0[1];
    return v10(&_swiftEmptyDictionarySingleton);
  }
  else
  {
    unint64_t v12 = (void *)swift_task_alloc();
    v0[59] = v12;
    *unint64_t v12 = v0;
    v12[1] = sub_100BD61C0;
    uint64_t v13 = v0[54];
    uint64_t v14 = v0[53];
    return DeviceIdentityUtility.signDataWithDeviceIdentity(dataToSign:)((uint64_t)(v0 + 30), v14, v13);
  }
}

uint64_t sub_100BD61C0()
{
  uint64_t v2 = *v1;
  swift_task_dealloc();
  if (v0)
  {
    swift_task_dealloc();
    unsigned int v3 = *(uint64_t (**)(void))(v2 + 8);
    return v3();
  }
  else
  {
    return _swift_task_switch(sub_100BD98A0, 0, 0);
  }
}

uint64_t sub_100BD630C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v3[54] = a2;
  v3[55] = a3;
  v3[53] = a1;
  uint64_t v4 = type metadata accessor for HashAlgorithm();
  v3[56] = v4;
  v3[57] = *(void *)(v4 - 8);
  v3[58] = swift_task_alloc();
  return _swift_task_switch(sub_100BD63D0, 0, 0);
}

uint64_t sub_100BD63D0()
{
  if (qword_101637188 != -1) {
    swift_once();
  }
  uint64_t v1 = (void *)qword_10170EE68;
  id v2 = [self sharedInstance];
  unsigned int v3 = [v2 isInternalBuild];

  if (v3
    && (NSString v4 = String._bridgeToObjectiveC()(), v5 = [v1 BOOLForKey:v4],
                                             v4,
                                             v5))
  {
    if (qword_101637408 != -1) {
      swift_once();
    }
    uint64_t v6 = type metadata accessor for Logger();
    sub_100010324(v6, (uint64_t)qword_10170F1B0);
    uint64_t v7 = Logger.logObject.getter();
    os_log_type_t v8 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v7, v8))
    {
      uint64_t v9 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v9 = 0;
      _os_log_impl((void *)&_mh_execute_header, v7, v8, "ExcludeBAACerts defaults is enabled. Skipping BAA", v9, 2u);
      swift_slowDealloc();
    }

    swift_task_dealloc();
    uint64_t v10 = (uint64_t (*)(void *))v0[1];
    return v10(_swiftEmptyDictionarySingleton);
  }
  else
  {
    unint64_t v12 = (void *)swift_task_alloc();
    v0[59] = v12;
    *unint64_t v12 = v0;
    v12[1] = sub_100BD6634;
    uint64_t v13 = v0[54];
    uint64_t v14 = v0[53];
    return DeviceIdentityUtility.signDataWithDeviceIdentity(dataToSign:)((uint64_t)(v0 + 30), v14, v13);
  }
}

uint64_t sub_100BD6634()
{
  uint64_t v2 = *v1;
  swift_task_dealloc();
  if (v0)
  {
    swift_task_dealloc();
    unsigned int v3 = *(uint64_t (**)(void))(v2 + 8);
    return v3();
  }
  else
  {
    return _swift_task_switch(sub_100BD6780, 0, 0);
  }
}

uint64_t sub_100BD6780()
{
  uint64_t v45 = v0;
  uint64_t v1 = v0 + 320;
  uint64_t v2 = v0 + 336;
  if (qword_101637408 != -1) {
    swift_once();
  }
  uint64_t v3 = v0 + 352;
  uint64_t v4 = v0 + 400;
  uint64_t v6 = *(void *)(v0 + 424);
  unint64_t v5 = *(void *)(v0 + 432);
  uint64_t v7 = type metadata accessor for Logger();
  sub_100010324(v7, (uint64_t)qword_10170F1B0);
  sub_1000361E0(v6, v5);
  sub_1000361E0(v6, v5);
  os_log_type_t v8 = Logger.logObject.getter();
  os_log_type_t v9 = static os_log_type_t.info.getter();
  BOOL v10 = os_log_type_enabled(v8, v9);
  uint64_t v11 = *(void *)(v0 + 424);
  unint64_t v12 = *(void *)(v0 + 432);
  if (v10)
  {
    uint64_t v13 = (uint8_t *)swift_slowAlloc();
    uint64_t v44 = swift_slowAlloc();
    *(_DWORD *)uint64_t v13 = 136315138;
    uint64_t v14 = Data.hexString.getter();
    *(void *)(v0 + 416) = sub_1008FA0F0(v14, v15, &v44);
    uint64_t v4 = v0 + 400;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    uint64_t v3 = v0 + 352;
    swift_bridgeObjectRelease();
    sub_10001CFB8(v11, v12);
    sub_10001CFB8(v11, v12);
    _os_log_impl((void *)&_mh_execute_header, v8, v9, "Successfully signed request: %s.", v13, 0xCu);
    swift_arrayDestroy();
    uint64_t v1 = v0 + 320;
    swift_slowDealloc();
    uint64_t v2 = v0 + 336;
    swift_slowDealloc();
  }
  else
  {
    sub_10001CFB8(*(void *)(v0 + 424), *(void *)(v0 + 432));
    sub_10001CFB8(v11, v12);
  }

  Swift::String v16 = Data.base64EncodedString(options:)(0);
  uint64_t countAndFlagsBits = v16._countAndFlagsBits;
  object = v16._object;
  sub_10001D608(v0 + 288, v1, &qword_101644320);
  sub_10001D608(v0 + 256, v2, &qword_101669360);
  sub_10001D608(v2, v0 + 384, &qword_101669360);
  if (*(void *)(v0 + 392) >> 60 == 15)
  {
    sub_1009C5960(v1);
    uint64_t v43 = 0;
    os_log_type_t v19 = 0;
  }
  else
  {
    sub_1009C5960(v1);
    Swift::String v20 = Data.base64EncodedString(options:)(0);
    uint64_t v43 = v20._countAndFlagsBits;
    os_log_type_t v19 = v20._object;
  }
  uint64_t v21 = (uint64_t *)(v0 + 240);
  sub_10001D608(v0 + 272, v3, &qword_101669360);
  sub_10001D608(v3, v4, &qword_101669360);
  if (*(void *)(v0 + 408) >> 60 == 15)
  {
    uint64_t v22 = 0;
    uint64_t v23 = 0;
  }
  else
  {
    uint64_t v24 = v1;
    uint64_t v26 = *(void *)(v0 + 456);
    uint64_t v25 = *(void *)(v0 + 464);
    uint64_t v27 = *(void *)(v0 + 448);
    (*(void (**)(uint64_t, void, uint64_t))(v26 + 104))(v25, enum case for HashAlgorithm.sha256(_:), v27);
    uint64_t v28 = Data.hash(algorithm:)();
    unint64_t v30 = v29;
    (*(void (**)(uint64_t, uint64_t))(v26 + 8))(v25, v27);
    uint64_t v1 = v24;
    Swift::String v31 = Data.base64EncodedString(options:)(0);
    uint64_t v22 = v31._countAndFlagsBits;
    uint64_t v23 = v31._object;
    uint64_t v32 = v28;
    uint64_t countAndFlagsBits = v16._countAndFlagsBits;
    unint64_t v33 = v30;
    object = v16._object;
    uint64_t v21 = (uint64_t *)(v0 + 240);
    sub_10001CFB8(v32, v33);
  }
  if (v19 && v23)
  {
    sub_10000588C(&qword_101642890);
    uint64_t inited = swift_initStackObject();
    *(_OWORD *)(inited + 16) = xmmword_101347500;
    strcpy((char *)(inited + 32), "X-Apple-Sign1");
    *(_WORD *)(inited + 46) = -4864;
    *(void *)(inited + 48) = v43;
    *(void *)(inited + 56) = v19;
    strcpy((char *)(inited + 64), "X-Apple-Sign2");
    *(_WORD *)(inited + 78) = -4864;
    *(void *)(inited + 80) = v22;
    *(void *)(inited + 88) = v23;
    strcpy((char *)(inited + 96), "X-Apple-Sign3");
    *(_WORD *)(inited + 110) = -4864;
    *(void *)(inited + 112) = countAndFlagsBits;
    *(void *)(inited + 120) = object;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
LABEL_17:
    swift_bridgeObjectRetain();
    unint64_t v35 = sub_10092D8F8(inited);
    sub_100BD9794(v21);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    sub_100BD9800(v1);
    swift_task_dealloc();
    uint64_t v36 = *(uint64_t (**)(unint64_t))(v0 + 8);
    return v36(v35);
  }
  sub_10001D608(v1, v0 + 304, &qword_101644320);
  if (*(void *)(v0 + 312))
  {
    *(_OWORD *)(v0 + 368) = *(_OWORD *)(v0 + 304);
    sub_10000588C(&qword_101642890);
    uint64_t inited = swift_initStackObject();
    *(_OWORD *)(inited + 16) = xmmword_101347BA0;
    strcpy((char *)(inited + 32), "X-Apple-Sign");
    *(unsigned char *)(inited + 45) = 0;
    *(_WORD *)(inited + 46) = -5120;
    *(void *)(inited + 48) = countAndFlagsBits;
    *(void *)(inited + 56) = object;
    strcpy((char *)(inited + 64), "X-Apple-Cert");
    *(unsigned char *)(inited + 77) = 0;
    *(_WORD *)(inited + 78) = -5120;
    *(_OWORD *)(inited + 80) = *(_OWORD *)(v0 + 368);
    sub_1009C5960(v1);
    goto LABEL_17;
  }
  uint64_t v38 = Logger.logObject.getter();
  os_log_type_t v39 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v38, v39))
  {
    uint64_t v40 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v40 = 0;
    _os_log_impl((void *)&_mh_execute_header, v38, v39, "Could not get certs for attestation.", v40, 2u);
    swift_slowDealloc();
  }

  sub_100BD9740();
  swift_allocError();
  swift_willThrow();
  sub_100BD9794(v21);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_task_dealloc();
  uint64_t v41 = *(uint64_t (**)(void))(v0 + 8);
  return v41();
}

uint64_t sub_100BD6E00@<X0>(void *a1@<X0>, void *a2@<X8>)
{
  uint64_t v2 = a1[1];
  uint64_t v3 = a1[2];
  uint64_t v4 = a1[3];
  *a2 = *a1;
  a2[1] = v2;
  a2[2] = v3;
  a2[3] = v4;
  swift_bridgeObjectRetain();

  return swift_bridgeObjectRetain();
}

uint64_t sub_100BD6E48()
{
  void (*v14)(uint64_t *__return_ptr, void *);
  uint64_t result;
  int64_t v16;
  int64_t v17;
  uint64_t v18;
  unint64_t v19;
  int64_t v20;
  int64_t v21;
  uint64_t v22;
  void v23[4];

  uint64_t v1 = *v0;
  int64_t v3 = v0[3];
  unint64_t v2 = v0[4];
  int64_t v4 = v3;
  if (v2)
  {
    uint64_t v5 = (v2 - 1) & v2;
    unint64_t v6 = __clz(__rbit64(v2)) | (v3 << 6);
LABEL_3:
    uint64_t v7 = 16 * v6;
    os_log_type_t v8 = (uint64_t *)(*(void *)(v1 + 48) + 16 * v6);
    uint64_t v9 = *v8;
    uint64_t v10 = v8[1];
    uint64_t v11 = (uint64_t *)(*(void *)(v1 + 56) + v7);
    uint64_t v12 = *v11;
    uint64_t v13 = v11[1];
    v0[3] = v4;
    v0[4] = v5;
    uint64_t v14 = (void (*)(uint64_t *__return_ptr, void *))v0[5];
    v23[0] = v9;
    v23[1] = v10;
    v23[2] = v12;
    void v23[3] = v13;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v14(&v22, v23);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    return v22;
  }
  Swift::String v16 = v3 + 1;
  if (__OFADD__(v3, 1))
  {
    __break(1u);
  }
  else
  {
    uint64_t v17 = (unint64_t)(v0[2] + 64) >> 6;
    if (v16 < v17)
    {
      uint64_t v18 = v0[1];
      os_log_type_t v19 = *(void *)(v18 + 8 * v16);
      if (v19)
      {
LABEL_7:
        uint64_t v5 = (v19 - 1) & v19;
        unint64_t v6 = __clz(__rbit64(v19)) + (v16 << 6);
        int64_t v4 = v16;
        goto LABEL_3;
      }
      Swift::String v20 = v3 + 2;
      int64_t v4 = v3 + 1;
      if (v3 + 2 < v17)
      {
        os_log_type_t v19 = *(void *)(v18 + 8 * v20);
        if (v19)
        {
LABEL_10:
          Swift::String v16 = v20;
          goto LABEL_7;
        }
        int64_t v4 = v3 + 2;
        if (v3 + 3 < v17)
        {
          os_log_type_t v19 = *(void *)(v18 + 8 * (v3 + 3));
          if (v19)
          {
            Swift::String v16 = v3 + 3;
            goto LABEL_7;
          }
          Swift::String v20 = v3 + 4;
          int64_t v4 = v3 + 3;
          if (v3 + 4 < v17)
          {
            os_log_type_t v19 = *(void *)(v18 + 8 * v20);
            if (v19) {
              goto LABEL_10;
            }
            Swift::String v16 = v3 + 5;
            int64_t v4 = v3 + 4;
            if (v3 + 5 < v17)
            {
              os_log_type_t v19 = *(void *)(v18 + 8 * v16);
              if (v19) {
                goto LABEL_7;
              }
              int64_t v4 = v17 - 1;
              uint64_t v21 = v3 + 6;
              while (v17 != v21)
              {
                os_log_type_t v19 = *(void *)(v18 + 8 * v21++);
                if (v19)
                {
                  Swift::String v16 = v21 - 1;
                  goto LABEL_7;
                }
              }
            }
          }
        }
      }
    }
    unint64_t result = 0;
    v0[3] = v4;
    v0[4] = 0;
  }
  return result;
}

uint64_t sub_100BD6FEC@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = sub_10000588C(&qword_10165AB68);
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  unint64_t v6 = (char *)&v38 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = sub_10000588C(&qword_10165AB70);
  uint64_t v8 = __chkstk_darwin(v7 - 8);
  uint64_t v10 = (char *)&v38 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8);
  uint64_t v12 = (char *)&v38 - v11;
  uint64_t v13 = *v1;
  uint64_t v14 = v1[1];
  uint64_t v16 = v1[2];
  int64_t v15 = v1[3];
  int64_t v17 = v15;
  unint64_t v18 = v1[4];
  os_log_type_t v39 = v6;
  uint64_t v43 = v16;
  if (v18)
  {
    uint64_t v41 = v10;
    int64_t v42 = v15;
    uint64_t v40 = v14;
    uint64_t v19 = v3;
    uint64_t v20 = a1;
    uint64_t v21 = (v18 - 1) & v18;
    unint64_t v22 = __clz(__rbit64(v18)) | (v15 << 6);
LABEL_3:
    uint64_t v23 = *(void *)(v13 + 56);
    char v24 = *(unsigned char *)(*(void *)(v13 + 48) + v22);
    uint64_t v25 = v23 + *(void *)(*(void *)(type metadata accessor for BookmarkMetaData() - 8) + 72) * v22;
    uint64_t v3 = v19;
    sub_100BD982C(v25, (uint64_t)&v12[*(int *)(v19 + 48)]);
    *uint64_t v12 = v24;
    (*(void (**)(unsigned char *, void, uint64_t, uint64_t))(v4 + 56))(v12, 0, 1, v19);
    a1 = v20;
    uint64_t v14 = v40;
    uint64_t v10 = v41;
    goto LABEL_25;
  }
  int64_t v26 = v15 + 1;
  if (__OFADD__(v15, 1))
  {
    __break(1u);
LABEL_23:
    int64_t v17 = v11;
    goto LABEL_24;
  }
  int64_t v27 = (unint64_t)(v16 + 64) >> 6;
  if (v26 < v27)
  {
    unint64_t v28 = *(void *)(v14 + 8 * v26);
    if (v28)
    {
LABEL_7:
      uint64_t v40 = v14;
      uint64_t v41 = v10;
      uint64_t v19 = v3;
      uint64_t v20 = a1;
      uint64_t v21 = (v28 - 1) & v28;
      unint64_t v22 = __clz(__rbit64(v28)) + (v26 << 6);
      int64_t v42 = v26;
      goto LABEL_3;
    }
    int64_t v29 = v15 + 2;
    int64_t v17 = v15 + 1;
    if (v15 + 2 < v27)
    {
      unint64_t v28 = *(void *)(v14 + 8 * v29);
      if (v28)
      {
LABEL_10:
        int64_t v26 = v29;
        goto LABEL_7;
      }
      int64_t v17 = v15 + 2;
      if (v15 + 3 < v27)
      {
        unint64_t v28 = *(void *)(v14 + 8 * (v15 + 3));
        if (v28)
        {
          int64_t v26 = v15 + 3;
          goto LABEL_7;
        }
        int64_t v29 = v15 + 4;
        int64_t v17 = v15 + 3;
        if (v15 + 4 < v27)
        {
          unint64_t v28 = *(void *)(v14 + 8 * v29);
          if (v28) {
            goto LABEL_10;
          }
          int64_t v26 = v15 + 5;
          int64_t v17 = v15 + 4;
          if (v15 + 5 < v27)
          {
            unint64_t v28 = *(void *)(v14 + 8 * v26);
            if (v28) {
              goto LABEL_7;
            }
            int64_t v11 = v27 - 1;
            uint64_t v30 = v15 + 6;
            while (v27 != v30)
            {
              unint64_t v28 = *(void *)(v14 + 8 * v30++);
              if (v28)
              {
                int64_t v26 = v30 - 1;
                goto LABEL_7;
              }
            }
            goto LABEL_23;
          }
        }
      }
    }
  }
LABEL_24:
  int64_t v42 = v17;
  (*(void (**)(unsigned char *, uint64_t, uint64_t, uint64_t))(v4 + 56))(v12, 1, 1, v3);
  uint64_t v21 = 0;
LABEL_25:
  *uint64_t v1 = v13;
  v1[1] = v14;
  int64_t v31 = v42;
  v1[2] = v43;
  v1[3] = v31;
  v1[4] = v21;
  uint64_t v32 = (void (*)(uint64_t))v1[5];
  sub_10001D608((uint64_t)v12, (uint64_t)v10, &qword_10165AB70);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v4 + 48))(v10, 1, v3) == 1)
  {
    uint64_t v33 = sub_10000588C(&qword_101652468);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v33 - 8) + 56))(a1, 1, 1, v33);
  }
  else
  {
    uint64_t v35 = (uint64_t)v10;
    uint64_t v36 = (uint64_t)v39;
    sub_10001D608(v35, (uint64_t)v39, &qword_10165AB68);
    v32(v36);
    sub_10001DAB4(v36, &qword_10165AB68);
    uint64_t v37 = sub_10000588C(&qword_101652468);
    return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v37 - 8) + 56))(a1, 0, 1, v37);
  }
}

uint64_t sub_100BD73D8@<X0>(uint64_t a1@<X8>)
{
  uint64_t v40 = a1;
  uint64_t v2 = sub_10000588C(&qword_10165F390);
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  uint64_t v5 = (char *)&v37 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = sub_10000588C(&qword_10164B630);
  uint64_t v7 = __chkstk_darwin(v6 - 8);
  uint64_t v9 = (char *)&v37 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t result = __chkstk_darwin(v7);
  uint64_t v12 = (char *)&v37 - v11;
  uint64_t v13 = *v1;
  uint64_t v14 = v1[1];
  uint64_t v16 = v1[2];
  int64_t v15 = v1[3];
  int64_t v17 = v15;
  unint64_t v18 = v1[4];
  uint64_t v37 = v5;
  uint64_t v39 = v16;
  if (v18)
  {
    uint64_t v38 = v9;
    uint64_t v19 = v14;
    uint64_t v20 = (v18 - 1) & v18;
    unint64_t v21 = __clz(__rbit64(v18)) | (v15 << 6);
LABEL_3:
    uint64_t v22 = *(void *)(v13 + 48);
    uint64_t v23 = v13;
    uint64_t v24 = type metadata accessor for UUID();
    (*(void (**)(char *, unint64_t, uint64_t))(*(void *)(v24 - 8) + 16))(v12, v22 + *(void *)(*(void *)(v24 - 8) + 72) * v21, v24);
    v12[*(int *)(v2 + 48)] = *(unsigned char *)(*(void *)(v23 + 56) + v21);
    uint64_t v25 = v3;
    (*(void (**)(char *, void, uint64_t, uint64_t))(v3 + 56))(v12, 0, 1, v2);
    uint64_t v14 = v19;
    uint64_t v9 = v38;
    goto LABEL_23;
  }
  int64_t v26 = v15 + 1;
  if (__OFADD__(v15, 1))
  {
    __break(1u);
    return result;
  }
  int64_t v27 = (unint64_t)(v16 + 64) >> 6;
  if (v26 < v27)
  {
    unint64_t v28 = *(void *)(v14 + 8 * v26);
    if (v28)
    {
LABEL_7:
      uint64_t v38 = v9;
      uint64_t v19 = v14;
      uint64_t v20 = (v28 - 1) & v28;
      unint64_t v21 = __clz(__rbit64(v28)) + (v26 << 6);
      int64_t v17 = v26;
      goto LABEL_3;
    }
    int64_t v29 = v15 + 2;
    int64_t v17 = v15 + 1;
    if (v15 + 2 < v27)
    {
      unint64_t v28 = *(void *)(v14 + 8 * v29);
      if (v28)
      {
LABEL_10:
        int64_t v26 = v29;
        goto LABEL_7;
      }
      int64_t v17 = v15 + 2;
      if (v15 + 3 < v27)
      {
        unint64_t v28 = *(void *)(v14 + 8 * (v15 + 3));
        if (v28)
        {
          int64_t v26 = v15 + 3;
          goto LABEL_7;
        }
        int64_t v29 = v15 + 4;
        int64_t v17 = v15 + 3;
        if (v15 + 4 < v27)
        {
          unint64_t v28 = *(void *)(v14 + 8 * v29);
          if (v28) {
            goto LABEL_10;
          }
          int64_t v26 = v15 + 5;
          int64_t v17 = v15 + 4;
          if (v15 + 5 < v27)
          {
            unint64_t v28 = *(void *)(v14 + 8 * v26);
            if (v28) {
              goto LABEL_7;
            }
            int64_t v17 = v27 - 1;
            int64_t v30 = v15 + 6;
            while (v27 != v30)
            {
              unint64_t v28 = *(void *)(v14 + 8 * v30++);
              if (v28)
              {
                int64_t v26 = v30 - 1;
                goto LABEL_7;
              }
            }
          }
        }
      }
    }
  }
  uint64_t v25 = v3;
  uint64_t v23 = v13;
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v3 + 56))(v12, 1, 1, v2);
  uint64_t v20 = 0;
LABEL_23:
  *uint64_t v1 = v23;
  v1[1] = v14;
  v1[2] = v39;
  v1[3] = v17;
  v1[4] = v20;
  int64_t v31 = (void (*)(uint64_t))v1[5];
  sub_10001D608((uint64_t)v12, (uint64_t)v9, &qword_10164B630);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v25 + 48))(v9, 1, v2) == 1)
  {
    uint64_t v32 = sub_10000588C(&qword_101640960);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v32 - 8) + 56))(v40, 1, 1, v32);
  }
  else
  {
    uint64_t v33 = (uint64_t)v9;
    uint64_t v34 = (uint64_t)v37;
    sub_10001D608(v33, (uint64_t)v37, &qword_10165F390);
    uint64_t v35 = v40;
    v31(v34);
    sub_10001DAB4(v34, &qword_10165F390);
    uint64_t v36 = sub_10000588C(&qword_101640960);
    return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v36 - 8) + 56))(v35, 0, 1, v36);
  }
}

uint64_t sub_100BD77D8@<X0>(uint64_t a1@<X8>)
{
  return sub_100BD79FC((uint64_t *)&unk_10165F450, &qword_10165AB38, &qword_10165AB40, a1);
}

uint64_t sub_100BD77F4@<X0>(_OWORD *a1@<X8>)
{
  uint64_t v3 = *v1;
  uint64_t v4 = v1[1];
  uint64_t v6 = v1[2];
  int64_t v5 = v1[3];
  int64_t v7 = v5;
  unint64_t v8 = v1[4];
  if (v8)
  {
    uint64_t v9 = (v8 - 1) & v8;
    unint64_t v10 = __clz(__rbit64(v8)) | (v5 << 6);
LABEL_3:
    uint64_t v11 = (uint64_t *)(*(void *)(v3 + 48) + 16 * v10);
    uint64_t v13 = *v11;
    uint64_t v12 = v11[1];
    sub_10012F428(*(void *)(v3 + 56) + 32 * v10, (uint64_t)v24);
    *(void *)&long long v23 = v13;
    *((void *)&v23 + 1) = v12;
    swift_bridgeObjectRetain();
    goto LABEL_23;
  }
  int64_t v14 = v5 + 1;
  if (__OFADD__(v5, 1))
  {
    __break(1u);
    return result;
  }
  int64_t v15 = (unint64_t)(v6 + 64) >> 6;
  if (v14 < v15)
  {
    unint64_t v16 = *(void *)(v4 + 8 * v14);
    if (v16)
    {
LABEL_7:
      uint64_t v9 = (v16 - 1) & v16;
      unint64_t v10 = __clz(__rbit64(v16)) + (v14 << 6);
      int64_t v7 = v14;
      goto LABEL_3;
    }
    int64_t v17 = v5 + 2;
    int64_t v7 = v5 + 1;
    if (v5 + 2 < v15)
    {
      unint64_t v16 = *(void *)(v4 + 8 * v17);
      if (v16)
      {
LABEL_10:
        int64_t v14 = v17;
        goto LABEL_7;
      }
      int64_t v7 = v5 + 2;
      if (v5 + 3 < v15)
      {
        unint64_t v16 = *(void *)(v4 + 8 * (v5 + 3));
        if (v16)
        {
          int64_t v14 = v5 + 3;
          goto LABEL_7;
        }
        int64_t v17 = v5 + 4;
        int64_t v7 = v5 + 3;
        if (v5 + 4 < v15)
        {
          unint64_t v16 = *(void *)(v4 + 8 * v17);
          if (v16) {
            goto LABEL_10;
          }
          int64_t v14 = v5 + 5;
          int64_t v7 = v5 + 4;
          if (v5 + 5 < v15)
          {
            unint64_t v16 = *(void *)(v4 + 8 * v14);
            if (v16) {
              goto LABEL_7;
            }
            int64_t v7 = v15 - 1;
            int64_t v18 = v5 + 6;
            while (v15 != v18)
            {
              unint64_t v16 = *(void *)(v4 + 8 * v18++);
              if (v16)
              {
                int64_t v14 = v18 - 1;
                goto LABEL_7;
              }
            }
          }
        }
      }
    }
  }
  uint64_t v9 = 0;
  memset(v24, 0, sizeof(v24));
  long long v23 = 0u;
LABEL_23:
  *uint64_t v1 = v3;
  v1[1] = v4;
  v1[2] = v6;
  v1[3] = v7;
  v1[4] = v9;
  uint64_t v19 = (void (*)(_OWORD *))v1[5];
  uint64_t result = sub_10001D608((uint64_t)&v23, (uint64_t)v22, &qword_101655B18);
  if (*((void *)&v22[0] + 1))
  {
    v21[0] = v22[0];
    v21[1] = v22[1];
    v21[2] = v22[2];
    v19(v21);
    return sub_10001DAB4((uint64_t)v21, &qword_10165ABF0);
  }
  else
  {
    a1[1] = 0u;
    a1[2] = 0u;
    *a1 = 0u;
  }
  return result;
}

uint64_t sub_100BD79E0@<X0>(uint64_t a1@<X8>)
{
  return sub_100BD79FC(&qword_101645760, &qword_1016496E8, &qword_1016497D0, a1);
}

uint64_t sub_100BD79FC@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X1>, uint64_t *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v47 = a3;
  uint64_t v8 = sub_10000588C(a1);
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  uint64_t v11 = (char *)&v40 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = sub_10000588C(a2);
  __chkstk_darwin(v12 - 8);
  uint64_t result = __chkstk_darwin((char *)&v40 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0));
  unint64_t v16 = (char *)&v40 - v15;
  uint64_t v17 = *v4;
  uint64_t v18 = v4[1];
  uint64_t v20 = v4[2];
  int64_t v19 = v4[3];
  int64_t v21 = v19;
  unint64_t v22 = v4[4];
  uint64_t v41 = v11;
  int64_t v42 = a1;
  uint64_t v45 = v20;
  uint64_t v46 = result;
  if (v22)
  {
    uint64_t v43 = a4;
    uint64_t v44 = a2;
    uint64_t v23 = (v22 - 1) & v22;
    unint64_t v24 = __clz(__rbit64(v22)) | (v19 << 6);
LABEL_3:
    uint64_t v25 = *(void *)(v17 + 48);
    uint64_t v26 = v17;
    uint64_t v27 = type metadata accessor for UUID();
    (*(void (**)(char *, unint64_t, uint64_t))(*(void *)(v27 - 8) + 16))(v16, v25 + *(void *)(*(void *)(v27 - 8) + 72) * v24, v27);
    *(void *)&v16[*(int *)(v8 + 48)] = *(void *)(*(void *)(v26 + 56) + 8 * v24);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v9 + 56))(v16, 0, 1, v8);
    swift_bridgeObjectRetain();
    a4 = v43;
    a2 = v44;
    goto LABEL_23;
  }
  int64_t v28 = v19 + 1;
  if (__OFADD__(v19, 1))
  {
    __break(1u);
    return result;
  }
  int64_t v29 = (unint64_t)(v20 + 64) >> 6;
  if (v28 < v29)
  {
    unint64_t v30 = *(void *)(v18 + 8 * v28);
    if (v30)
    {
LABEL_7:
      uint64_t v43 = a4;
      uint64_t v44 = a2;
      uint64_t v23 = (v30 - 1) & v30;
      unint64_t v24 = __clz(__rbit64(v30)) + (v28 << 6);
      int64_t v21 = v28;
      goto LABEL_3;
    }
    int64_t v31 = v19 + 2;
    int64_t v21 = v19 + 1;
    if (v19 + 2 < v29)
    {
      unint64_t v30 = *(void *)(v18 + 8 * v31);
      if (v30)
      {
LABEL_10:
        int64_t v28 = v31;
        goto LABEL_7;
      }
      int64_t v21 = v19 + 2;
      if (v19 + 3 < v29)
      {
        unint64_t v30 = *(void *)(v18 + 8 * (v19 + 3));
        if (v30)
        {
          int64_t v28 = v19 + 3;
          goto LABEL_7;
        }
        int64_t v31 = v19 + 4;
        int64_t v21 = v19 + 3;
        if (v19 + 4 < v29)
        {
          unint64_t v30 = *(void *)(v18 + 8 * v31);
          if (v30) {
            goto LABEL_10;
          }
          int64_t v28 = v19 + 5;
          int64_t v21 = v19 + 4;
          if (v19 + 5 < v29)
          {
            unint64_t v30 = *(void *)(v18 + 8 * v28);
            if (v30) {
              goto LABEL_7;
            }
            int64_t v21 = v29 - 1;
            int64_t v32 = v19 + 6;
            while (v29 != v32)
            {
              unint64_t v30 = *(void *)(v18 + 8 * v32++);
              if (v30)
              {
                int64_t v28 = v32 - 1;
                goto LABEL_7;
              }
            }
          }
        }
      }
    }
  }
  uint64_t v26 = v17;
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v9 + 56))(v16, 1, 1, v8);
  uint64_t v23 = 0;
LABEL_23:
  *uint64_t v4 = v26;
  v4[1] = v18;
  v4[2] = v45;
  _OWORD v4[3] = v21;
  v4[4] = v23;
  uint64_t v33 = (void (*)(uint64_t))v4[5];
  uint64_t v34 = v46;
  sub_10001D608((uint64_t)v16, v46, a2);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v9 + 48))(v34, 1, v8) == 1)
  {
    uint64_t v35 = sub_10000588C(v47);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v35 - 8) + 56))(a4, 1, 1, v35);
  }
  else
  {
    uint64_t v36 = v34;
    uint64_t v38 = (uint64_t)v41;
    uint64_t v37 = v42;
    sub_10001D608(v36, (uint64_t)v41, v42);
    v33(v38);
    sub_10001DAB4(v38, v37);
    uint64_t v39 = sub_10000588C(v47);
    return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v39 - 8) + 56))(a4, 0, 1, v39);
  }
}

uint64_t sub_100BD7DDC@<X0>(uint64_t a1@<X8>)
{
  return sub_100BD79FC(&qword_101649680, &qword_10165ABA0, &qword_101649670, a1);
}

void sub_100BD7DF8(_OWORD *a1@<X8>)
{
  uint64_t v3 = *v1;
  int64_t v5 = v1[3];
  unint64_t v4 = v1[4];
  int64_t v6 = v5;
  if (!v4)
  {
    int64_t v18 = v5 + 1;
    if (__OFADD__(v5, 1))
    {
      __break(1u);
      return;
    }
    int64_t v19 = (unint64_t)(v1[2] + 64) >> 6;
    if (v18 < v19)
    {
      uint64_t v20 = v1[1];
      unint64_t v21 = *(void *)(v20 + 8 * v18);
      if (v21)
      {
LABEL_9:
        uint64_t v7 = (v21 - 1) & v21;
        unint64_t v8 = __clz(__rbit64(v21)) + (v18 << 6);
        int64_t v6 = v18;
        goto LABEL_3;
      }
      int64_t v22 = v5 + 2;
      int64_t v6 = v5 + 1;
      if (v5 + 2 < v19)
      {
        unint64_t v21 = *(void *)(v20 + 8 * v22);
        if (v21)
        {
LABEL_12:
          int64_t v18 = v22;
          goto LABEL_9;
        }
        int64_t v6 = v5 + 2;
        if (v5 + 3 < v19)
        {
          unint64_t v21 = *(void *)(v20 + 8 * (v5 + 3));
          if (v21)
          {
            int64_t v18 = v5 + 3;
            goto LABEL_9;
          }
          int64_t v22 = v5 + 4;
          int64_t v6 = v5 + 3;
          if (v5 + 4 < v19)
          {
            unint64_t v21 = *(void *)(v20 + 8 * v22);
            if (v21) {
              goto LABEL_12;
            }
            int64_t v18 = v5 + 5;
            int64_t v6 = v5 + 4;
            if (v5 + 5 < v19)
            {
              unint64_t v21 = *(void *)(v20 + 8 * v18);
              if (v21) {
                goto LABEL_9;
              }
              int64_t v6 = v19 - 1;
              int64_t v23 = v5 + 6;
              while (v19 != v23)
              {
                unint64_t v21 = *(void *)(v20 + 8 * v23++);
                if (v21)
                {
                  int64_t v18 = v23 - 1;
                  goto LABEL_9;
                }
              }
            }
          }
        }
      }
    }
    v1[3] = v6;
    v1[4] = 0;
    *a1 = xmmword_101347BB0;
    a1[1] = 0u;
    a1[2] = 0u;
    return;
  }
  uint64_t v7 = (v4 - 1) & v4;
  unint64_t v8 = __clz(__rbit64(v4)) | (v5 << 6);
LABEL_3:
  uint64_t v9 = (uint64_t *)(*(void *)(v3 + 48) + 16 * v8);
  uint64_t v10 = *v9;
  unint64_t v11 = v9[1];
  uint64_t v12 = (uint64_t *)(*(void *)(v3 + 56) + 32 * v8);
  uint64_t v13 = *v12;
  unint64_t v14 = v12[1];
  uint64_t v15 = v12[2];
  unint64_t v16 = v12[3];
  v1[3] = v6;
  v1[4] = v7;
  uint64_t v17 = (void (*)(void *))v1[5];
  v24[0] = v10;
  v24[1] = v11;
  _OWORD v24[2] = v13;
  v24[3] = v14;
  v24[4] = v15;
  v24[5] = v16;
  sub_1000361E0(v10, v11);
  sub_1000361E0(v13, v14);
  sub_1000361E0(v15, v16);
  v17(v24);
  sub_10001CFB8(v10, v11);
  sub_10001CFB8(v13, v14);

  sub_10001CFB8(v15, v16);
}

uint64_t sub_100BD8008@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = *v1;
  int64_t v5 = v1[3];
  unint64_t v4 = v1[4];
  int64_t v6 = v5;
  if (v4)
  {
    uint64_t v7 = (v4 - 1) & v4;
    unint64_t v8 = __clz(__rbit64(v4)) | (v5 << 6);
LABEL_3:
    uint64_t v9 = 16 * v8;
    uint64_t v10 = (uint64_t *)(*(void *)(v3 + 48) + 16 * v8);
    uint64_t v11 = *v10;
    unint64_t v12 = v10[1];
    uint64_t v13 = *(void *)(v3 + 56) + v9;
    uint64_t v14 = *(void *)v13;
    LOBYTE(v13) = *(unsigned char *)(v13 + 8);
    v1[3] = v6;
    v1[4] = v7;
    uint64_t v15 = (void (*)(void *))v1[5];
    v23[0] = v11;
    v23[1] = v12;
    v23[2] = v14;
    char v24 = v13;
    sub_1000361E0(v11, v12);
    v15(v23);
    return sub_10001CFB8(v11, v12);
  }
  int64_t v17 = v5 + 1;
  if (__OFADD__(v5, 1))
  {
    __break(1u);
  }
  else
  {
    int64_t v18 = (unint64_t)(v1[2] + 64) >> 6;
    if (v17 < v18)
    {
      uint64_t v19 = v1[1];
      unint64_t v20 = *(void *)(v19 + 8 * v17);
      if (v20)
      {
LABEL_7:
        uint64_t v7 = (v20 - 1) & v20;
        unint64_t v8 = __clz(__rbit64(v20)) + (v17 << 6);
        int64_t v6 = v17;
        goto LABEL_3;
      }
      int64_t v21 = v5 + 2;
      int64_t v6 = v5 + 1;
      if (v5 + 2 < v18)
      {
        unint64_t v20 = *(void *)(v19 + 8 * v21);
        if (v20)
        {
LABEL_10:
          int64_t v17 = v21;
          goto LABEL_7;
        }
        int64_t v6 = v5 + 2;
        if (v5 + 3 < v18)
        {
          unint64_t v20 = *(void *)(v19 + 8 * (v5 + 3));
          if (v20)
          {
            int64_t v17 = v5 + 3;
            goto LABEL_7;
          }
          int64_t v21 = v5 + 4;
          int64_t v6 = v5 + 3;
          if (v5 + 4 < v18)
          {
            unint64_t v20 = *(void *)(v19 + 8 * v21);
            if (v20) {
              goto LABEL_10;
            }
            int64_t v17 = v5 + 5;
            int64_t v6 = v5 + 4;
            if (v5 + 5 < v18)
            {
              unint64_t v20 = *(void *)(v19 + 8 * v17);
              if (v20) {
                goto LABEL_7;
              }
              int64_t v6 = v18 - 1;
              int64_t v22 = v5 + 6;
              while (v18 != v22)
              {
                unint64_t v20 = *(void *)(v19 + 8 * v22++);
                if (v20)
                {
                  int64_t v17 = v22 - 1;
                  goto LABEL_7;
                }
              }
            }
          }
        }
      }
    }
    v1[3] = v6;
    v1[4] = 0;
    *(void *)(a1 + 8) = 0;
    *(void *)(a1 + 16) = 0;
    *(void *)a1 = 0;
    *(unsigned char *)(a1 + 24) = 3;
  }
  return result;
}

uint64_t sub_100BD81B0@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = type metadata accessor for Row();
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  int64_t v6 = (char *)&v17 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = sub_10000588C(&qword_10163CEA8);
  uint64_t v8 = __chkstk_darwin(v7 - 8);
  uint64_t v10 = (char *)&v17 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8);
  unint64_t v12 = (char *)&v17 - v11;
  dispatch thunk of _AnyIteratorBoxBase.next()();
  uint64_t v13 = *(void (**)(char *))(v1 + 8);
  sub_10001D608((uint64_t)v12, (uint64_t)v10, &qword_10163CEA8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v4 + 48))(v10, 1, v3) == 1)
  {
    uint64_t v14 = type metadata accessor for StandaloneBeacon();
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v14 - 8) + 56))(a1, 1, 1, v14);
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v4 + 32))(v6, v10, v3);
    v13(v6);
    (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
    uint64_t v16 = type metadata accessor for StandaloneBeacon();
    return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v16 - 8) + 56))(a1, 0, 1, v16);
  }
}

uint64_t sub_100BD83E0(uint64_t a1, uint64_t a2)
{
  v2[37] = a1;
  v2[38] = a2;
  uint64_t v3 = type metadata accessor for HashAlgorithm();
  v2[39] = v3;
  v2[40] = *(void *)(v3 - 8);
  v2[41] = swift_task_alloc();
  uint64_t v4 = type metadata accessor for Date();
  v2[42] = v4;
  v2[43] = *(void *)(v4 - 8);
  v2[44] = swift_task_alloc();
  return _swift_task_switch(sub_100BD84FC, 0, 0);
}

void sub_100BD84FC()
{
  unint64_t v1 = sub_10092D8F8((uint64_t)_swiftEmptyArrayStorage);
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  sub_10016C0FC(1702195828, 0xE400000000000000, 0xD00000000000001BLL, 0x80000001013F64C0, isUniquelyReferenced_nonNull_native);
  swift_bridgeObjectRelease();
  id v3 = [self currentDevice];
  if (!v3)
  {
    __break(1u);
    goto LABEL_7;
  }
  uint64_t v4 = v3;
  id v5 = [v3 serverFriendlyDescription];

  if (!v5)
  {
LABEL_7:
    __break(1u);
    return;
  }
  uint64_t v6 = *(void *)(v0 + 344);
  uint64_t v7 = *(void *)(v0 + 352);
  uint64_t v8 = *(void *)(v0 + 336);
  uint64_t v9 = *(_OWORD **)(v0 + 296);
  uint64_t v10 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v12 = v11;

  char v13 = swift_isUniquelyReferenced_nonNull_native();
  sub_10016C0FC(v10, v12, 0xD000000000000011, 0x80000001013F64E0, v13);
  unint64_t v14 = v1;
  swift_bridgeObjectRelease();
  Date.init()();
  uint64_t v15 = Date.epoch.getter();
  (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v7, v8);
  *(void *)(v0 + 288) = v15;
  uint64_t v16 = dispatch thunk of CustomStringConvertible.description.getter();
  uint64_t v18 = v17;
  char v19 = swift_isUniquelyReferenced_nonNull_native();
  sub_10016C0FC(v16, v18, 0xD000000000000015, 0x80000001013F6500, v19);
  unint64_t v20 = v14;
  swift_bridgeObjectRelease();
  *(void *)(v0 + 272) = 1;
  uint64_t v21 = dispatch thunk of CustomStringConvertible.description.getter();
  uint64_t v23 = v22;
  char v24 = swift_isUniquelyReferenced_nonNull_native();
  sub_10016C0FC(v21, v23, 0xD000000000000013, 0x80000001013F6520, v24);
  unint64_t v25 = v20;
  swift_bridgeObjectRelease();
  id v26 = sub_100903ACC();
  uint64_t v28 = v27;
  char v29 = swift_isUniquelyReferenced_nonNull_native();
  sub_10016C0FC((uint64_t)v26, v28, 0x6567412D72657355, 0xEA0000000000746ELL, v29);
  *(void *)(v0 + 360) = v25;
  swift_bridgeObjectRelease();
  type metadata accessor for JSONEncoder();
  swift_allocObject();
  *(void *)(v0 + 368) = JSONEncoder.init()();
  *(_OWORD *)(v0 + 176) = *v9;
  long long v30 = v9[4];
  long long v32 = v9[1];
  long long v31 = v9[2];
  *(_OWORD *)(v0 + 224) = v9[3];
  *(_OWORD *)(v0 + 240) = v30;
  *(_OWORD *)(v0 + 192) = v32;
  *(_OWORD *)(v0 + 208) = v31;
  sub_100BD96EC();
  uint64_t v33 = dispatch thunk of JSONEncoder.encode<A>(_:)();
  *(void *)(v0 + 376) = v33;
  *(void *)(v0 + 384) = v34;
  sub_1000361E0(v33, v34);
  uint64_t v36 = (void (__cdecl *)())((char *)&dword_10165AAD0 + dword_10165AAD0);
  uint64_t v35 = (void *)swift_task_alloc();
  *(void *)(v0 + 392) = v35;
  *uint64_t v35 = v0;
  v35[1] = sub_100BD89FC;
  v36();
}

uint64_t sub_100BD89FC(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *v2;
  *(void *)(v3 + 400) = a1;
  *(void *)(v3 + 408) = a2;
  swift_task_dealloc();
  return _swift_task_switch(sub_100BD8AFC, 0, 0);
}

uint64_t sub_100BD8AFC()
{
  uint64_t v2 = v0[50];
  unint64_t v1 = v0[51];
  uint64_t v4 = v0[47];
  unint64_t v3 = v0[48];
  uint64_t v6 = v0[40];
  uint64_t v5 = v0[41];
  uint64_t v7 = v0[39];
  v0[32] = v2;
  v0[33] = v1;
  sub_1000361E0(v4, v3);
  sub_1000361E0(v2, v1);
  sub_100A42CBC(v4, v3);
  sub_10001CFB8(v4, v3);
  sub_10001CFB8(v2, v1);
  uint64_t v8 = v0[33];
  v0[52] = v0[32];
  v0[53] = v8;
  (*(void (**)(uint64_t, void, uint64_t))(v6 + 104))(v5, enum case for HashAlgorithm.sha256(_:), v7);
  uint64_t v9 = Data.hash(algorithm:)();
  uint64_t v11 = v10;
  v0[54] = v9;
  v0[55] = v10;
  (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v5, v7);
  uint64_t v15 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))((char *)&dword_10165AAD8 + dword_10165AAD8);
  uint64_t v12 = (void *)swift_task_alloc();
  v0[56] = v12;
  *uint64_t v12 = v0;
  v12[1] = sub_100BD8C7C;
  uint64_t v13 = v0[38];
  return v15(v9, v11, v13);
}

uint64_t sub_100BD8C7C(uint64_t a1)
{
  uint64_t v4 = *(void **)v2;
  *(void *)(*(void *)v2 + 456) = v1;
  swift_task_dealloc();
  if (v1)
  {
    uint64_t v5 = sub_100BD9218;
  }
  else
  {
    uint64_t v6 = v4[54];
    unint64_t v7 = v4[55];
    v4[58] = a1;
    sub_10001CFB8(v6, v7);
    uint64_t v5 = sub_100BD8DA8;
  }
  return _swift_task_switch(v5, 0, 0);
}

uint64_t sub_100BD8DA8()
{
  uint64_t v45 = v0;
  uint64_t v2 = v0[57];
  uint64_t v1 = v0[58];
  unint64_t v3 = (unsigned char *)v0[45];
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v44 = v3;
  sub_1001EE9C8(v1, (uint64_t)sub_100BD6E00, 0, isUniquelyReferenced_nonNull_native, &v44);
  if (v2)
  {
    return swift_bridgeObjectRelease();
  }
  uint64_t v7 = v0[52];
  unint64_t v6 = v0[53];
  uint64_t v40 = v0;
  uint64_t v8 = v44;
  swift_bridgeObjectRelease();
  sub_10001CFB8(v7, v6);
  static os_log_type_t.debug.getter();
  if (qword_101637308 != -1) {
LABEL_31:
  }
    swift_once();
  os_log(_:dso:log:_:_:)();
  uint64_t v41 = v8 + 64;
  uint64_t v9 = -1;
  uint64_t v10 = -1 << v8[32];
  if (-v10 < 64) {
    uint64_t v9 = ~(-1 << -(char)v10);
  }
  unint64_t v11 = v9 & *((void *)v8 + 8);
  int64_t v42 = (unint64_t)(63 - v10) >> 6;
  uint64_t v43 = v8;
  swift_bridgeObjectRetain();
  int64_t v12 = 0;
  uint64_t v8 = &type metadata for String;
  while (1)
  {
    if (v11)
    {
      unint64_t v13 = __clz(__rbit64(v11));
      v11 &= v11 - 1;
      unint64_t v14 = v13 | (v12 << 6);
      goto LABEL_10;
    }
    int64_t v24 = v12 + 1;
    if (__OFADD__(v12, 1))
    {
      __break(1u);
LABEL_30:
      __break(1u);
      goto LABEL_31;
    }
    if (v24 >= v42) {
      goto LABEL_26;
    }
    unint64_t v25 = *(void *)&v41[8 * v24];
    ++v12;
    if (!v25)
    {
      int64_t v12 = v24 + 1;
      if (v24 + 1 >= v42) {
        goto LABEL_26;
      }
      unint64_t v25 = *(void *)&v41[8 * v12];
      if (!v25)
      {
        int64_t v12 = v24 + 2;
        if (v24 + 2 >= v42) {
          goto LABEL_26;
        }
        unint64_t v25 = *(void *)&v41[8 * v12];
        if (!v25) {
          break;
        }
      }
    }
LABEL_25:
    unint64_t v11 = (v25 - 1) & v25;
    unint64_t v14 = __clz(__rbit64(v25)) + (v12 << 6);
LABEL_10:
    uint64_t v15 = 16 * v14;
    uint64_t v16 = (uint64_t *)(*((void *)v43 + 6) + v15);
    uint64_t v17 = *v16;
    uint64_t v18 = v16[1];
    char v19 = (uint64_t *)(*((void *)v43 + 7) + v15);
    uint64_t v20 = *v19;
    uint64_t v21 = v19[1];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    static os_log_type_t.debug.getter();
    sub_10000588C((uint64_t *)&unk_10163AD00);
    uint64_t v22 = swift_allocObject();
    *(_OWORD *)(v22 + 16) = xmmword_101347BA0;
    *(void *)(v22 + 56) = &type metadata for String;
    unint64_t v23 = sub_10000B4CC();
    *(void *)(v22 + 32) = v17;
    *(void *)(v22 + 40) = v18;
    *(void *)(v22 + 96) = &type metadata for String;
    *(void *)(v22 + 104) = v23;
    *(void *)(v22 + 64) = v23;
    *(void *)(v22 + 72) = v20;
    *(void *)(v22 + 80) = v21;
    os_log(_:dso:log:_:_:)();
    swift_bridgeObjectRelease();
  }
  int64_t v26 = v24 + 3;
  if (v26 < v42)
  {
    unint64_t v25 = *(void *)&v41[8 * v26];
    if (!v25)
    {
      while (1)
      {
        int64_t v12 = v26 + 1;
        if (__OFADD__(v26, 1)) {
          goto LABEL_30;
        }
        if (v12 >= v42) {
          goto LABEL_26;
        }
        unint64_t v25 = *(void *)&v41[8 * v12];
        ++v26;
        if (v25) {
          goto LABEL_25;
        }
      }
    }
    int64_t v12 = v26;
    goto LABEL_25;
  }
LABEL_26:
  uint64_t v28 = v40[47];
  unint64_t v27 = v40[48];
  char v29 = (_OWORD *)v40[37];
  swift_release();
  static os_log_type_t.debug.getter();
  sub_10000588C((uint64_t *)&unk_10163AD00);
  uint64_t v30 = swift_allocObject();
  *(_OWORD *)(v30 + 16) = xmmword_101342130;
  *((_OWORD *)v40 + 6) = *v29;
  long long v31 = v29[4];
  long long v33 = v29[1];
  long long v32 = v29[2];
  *((_OWORD *)v40 + 9) = v29[3];
  *((_OWORD *)v40 + 10) = v31;
  *((_OWORD *)v40 + 7) = v33;
  *((_OWORD *)v40 + 8) = v32;
  uint64_t v34 = String.init<A>(describing:)();
  uint64_t v36 = v35;
  *(void *)(v30 + 56) = &type metadata for String;
  *(void *)(v30 + 64) = sub_10000B4CC();
  *(void *)(v30 + 32) = v34;
  *(void *)(v30 + 40) = v36;
  os_log(_:dso:log:_:_:)();
  swift_release();
  swift_bridgeObjectRelease();
  sub_10001CFB8(v28, v27);
  swift_release();
  uint64_t v38 = v40[47];
  uint64_t v37 = v40[48];
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v39 = (uint64_t (*)(unsigned char *, uint64_t, uint64_t))v40[1];
  return v39(v43, v38, v37);
}

uint64_t sub_100BD9218()
{
  uint64_t v2 = *(void *)(v0 + 416);
  unint64_t v1 = *(void *)(v0 + 424);
  sub_10001CFB8(*(void *)(v0 + 432), *(void *)(v0 + 440));
  sub_10001CFB8(v2, v1);
  static os_log_type_t.error.getter();
  unint64_t v3 = &qword_101637000;
  if (qword_101637308 != -1) {
LABEL_29:
  }
    swift_once();
  uint64_t v4 = *(void *)(v0 + 456);
  sub_10000588C((uint64_t *)&unk_10163AD00);
  uint64_t v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_101342130;
  *(void *)(v0 + 280) = v4;
  swift_errorRetain();
  sub_10000588C(&qword_101638D40);
  uint64_t v6 = String.init<A>(describing:)();
  uint64_t v8 = v7;
  *(void *)(v5 + 56) = &type metadata for String;
  unint64_t v9 = sub_10000B4CC();
  *(void *)(v5 + 64) = v9;
  *(void *)(v5 + 32) = v6;
  *(void *)(v5 + 40) = v8;
  os_log(_:dso:log:_:_:)();
  swift_bridgeObjectRelease();
  swift_errorRelease();
  uint64_t v40 = v0;
  uint64_t v10 = *(void *)(v0 + 360);
  static os_log_type_t.debug.getter();
  if (v3[97] != -1) {
    swift_once();
  }
  os_log(_:dso:log:_:_:)();
  uint64_t v41 = v10 + 64;
  uint64_t v11 = -1;
  uint64_t v12 = -1 << *(unsigned char *)(v10 + 32);
  if (-v12 < 64) {
    uint64_t v11 = ~(-1 << -(char)v12);
  }
  unint64_t v13 = v11 & *(void *)(v10 + 64);
  int64_t v42 = (unint64_t)(63 - v12) >> 6;
  uint64_t v44 = v10;
  swift_bridgeObjectRetain();
  uint64_t v0 = 0;
  while (1)
  {
    if (v13)
    {
      unint64_t v14 = __clz(__rbit64(v13));
      v13 &= v13 - 1;
      unint64_t v15 = v14 | (v0 << 6);
      uint64_t v16 = v44;
      goto LABEL_8;
    }
    int64_t v25 = v0 + 1;
    if (__OFADD__(v0, 1))
    {
      __break(1u);
LABEL_28:
      __break(1u);
      goto LABEL_29;
    }
    if (v25 >= v42) {
      goto LABEL_24;
    }
    unint64_t v26 = *(void *)(v41 + 8 * v25);
    ++v0;
    if (!v26)
    {
      uint64_t v0 = v25 + 1;
      if (v25 + 1 >= v42) {
        goto LABEL_24;
      }
      unint64_t v26 = *(void *)(v41 + 8 * v0);
      if (!v26)
      {
        uint64_t v0 = v25 + 2;
        if (v25 + 2 >= v42) {
          goto LABEL_24;
        }
        unint64_t v26 = *(void *)(v41 + 8 * v0);
        if (!v26) {
          break;
        }
      }
    }
LABEL_23:
    unint64_t v13 = (v26 - 1) & v26;
    unint64_t v15 = __clz(__rbit64(v26)) + (v0 << 6);
    uint64_t v16 = v44;
LABEL_8:
    uint64_t v17 = 16 * v15;
    uint64_t v18 = (uint64_t *)(*(void *)(v16 + 48) + v17);
    uint64_t v19 = *v18;
    uint64_t v20 = v18[1];
    uint64_t v21 = (uint64_t *)(*(void *)(v16 + 56) + v17);
    uint64_t v22 = *v21;
    uint64_t v23 = v21[1];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    unint64_t v3 = (uint64_t *)static os_log_type_t.debug.getter();
    sub_10000588C((uint64_t *)&unk_10163AD00);
    uint64_t v24 = swift_allocObject();
    *(_OWORD *)(v24 + 16) = xmmword_101347BA0;
    *(void *)(v24 + 56) = &type metadata for String;
    *(void *)(v24 + 64) = v9;
    *(void *)(v24 + 32) = v19;
    *(void *)(v24 + 40) = v20;
    *(void *)(v24 + 96) = &type metadata for String;
    *(void *)(v24 + 104) = v9;
    *(void *)(v24 + 72) = v22;
    *(void *)(v24 + 80) = v23;
    os_log(_:dso:log:_:_:)();
    swift_bridgeObjectRelease();
  }
  int64_t v27 = v25 + 3;
  if (v27 < v42)
  {
    unint64_t v26 = *(void *)(v41 + 8 * v27);
    if (!v26)
    {
      while (1)
      {
        uint64_t v0 = v27 + 1;
        if (__OFADD__(v27, 1)) {
          goto LABEL_28;
        }
        if (v0 >= v42) {
          goto LABEL_24;
        }
        unint64_t v26 = *(void *)(v41 + 8 * v0);
        ++v27;
        if (v26) {
          goto LABEL_23;
        }
      }
    }
    uint64_t v0 = v27;
    goto LABEL_23;
  }
LABEL_24:
  uint64_t v28 = *(void *)(v40 + 376);
  unint64_t v43 = *(void *)(v40 + 384);
  char v29 = *(_OWORD **)(v40 + 296);
  swift_release();
  static os_log_type_t.debug.getter();
  sub_10000588C((uint64_t *)&unk_10163AD00);
  uint64_t v30 = swift_allocObject();
  *(_OWORD *)(v30 + 16) = xmmword_101342130;
  *(_OWORD *)(v40 + 96) = *v29;
  long long v31 = v29[4];
  long long v33 = v29[1];
  long long v32 = v29[2];
  *(_OWORD *)(v40 + 144) = v29[3];
  *(_OWORD *)(v40 + 160) = v31;
  *(_OWORD *)(v40 + 112) = v33;
  *(_OWORD *)(v40 + 128) = v32;
  uint64_t v34 = String.init<A>(describing:)();
  *(void *)(v30 + 56) = &type metadata for String;
  *(void *)(v30 + 64) = v9;
  *(void *)(v30 + 32) = v34;
  *(void *)(v30 + 40) = v35;
  os_log(_:dso:log:_:_:)();
  swift_release();
  swift_bridgeObjectRelease();
  sub_10001CFB8(v28, v43);
  swift_release();
  uint64_t v37 = *(void *)(v40 + 376);
  uint64_t v36 = *(void *)(v40 + 384);
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v38 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v40 + 8);
  return v38(v44, v37, v36);
}

unint64_t sub_100BD96EC()
{
  unint64_t result = qword_10165AAC8;
  if (!qword_10165AAC8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10165AAC8);
  }
  return result;
}

unint64_t sub_100BD9740()
{
  unint64_t result = qword_10165AAE0;
  if (!qword_10165AAE0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10165AAE0);
  }
  return result;
}

uint64_t *sub_100BD9794(uint64_t *a1)
{
  uint64_t v2 = a1[2];
  unint64_t v3 = a1[3];
  uint64_t v4 = a1[4];
  unint64_t v5 = a1[5];
  sub_10001CFB8(*a1, a1[1]);
  sub_100037A24(v2, v3);
  sub_100037A24(v4, v5);
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t sub_100BD9800(uint64_t a1)
{
  return a1;
}

uint64_t sub_100BD982C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for BookmarkMetaData();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

ValueMetadata *type metadata accessor for PencilUnpairRequest()
{
  return &type metadata for PencilUnpairRequest;
}

ValueMetadata *type metadata accessor for OwnedDeviceFetchResponse()
{
  return &type metadata for OwnedDeviceFetchResponse;
}

uint64_t initializeBufferWithCopyOfBuffer for FetchResponse(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(unsigned char *)(a1 + 8) = *(unsigned char *)(a2 + 8);
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for FetchResponse(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 8) = *(unsigned char *)(a2 + 8);
  return a1;
}

uint64_t assignWithTake for FetchResponse(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 8) = *(unsigned char *)(a2 + 8);
  return a1;
}

uint64_t getEnumTagSinglePayload for FetchResponse(uint64_t *a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *((unsigned char *)a1 + 9)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  uint64_t v2 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for FetchResponse(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(unsigned char *)(result + 8) = 0;
    *(void *)unint64_t result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 9) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)unint64_t result = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 9) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for FetchResponse()
{
  return &type metadata for FetchResponse;
}

uint64_t *sub_100BD9A14(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v16 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v16 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v7 = *a2;
    unint64_t v8 = a2[1];
    sub_1000361E0(*a2, v8);
    *a1 = v7;
    a1[1] = v8;
    a1[2] = a2[2];
    uint64_t v9 = *(int *)(a3 + 24);
    uint64_t v10 = (char *)a1 + v9;
    uint64_t v11 = (char *)a2 + v9;
    uint64_t v12 = type metadata accessor for Date();
    uint64_t v13 = *(void *)(v12 - 8);
    unint64_t v14 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v13 + 48);
    swift_bridgeObjectRetain();
    if (v14(v11, 1, v12))
    {
      uint64_t v15 = sub_10000588C((uint64_t *)&unk_10163AC90);
      memcpy(v10, v11, *(void *)(*(void *)(v15 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v13 + 16))(v10, v11, v12);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v13 + 56))(v10, 0, 1, v12);
    }
    *((unsigned char *)a1 + *(int *)(a3 + 28)) = *((unsigned char *)a2 + *(int *)(a3 + 28));
  }
  return a1;
}

uint64_t sub_100BD9BB8(uint64_t a1, uint64_t a2)
{
  sub_10001CFB8(*(void *)a1, *(void *)(a1 + 8));
  swift_bridgeObjectRelease();
  uint64_t v4 = a1 + *(int *)(a2 + 24);
  uint64_t v5 = type metadata accessor for Date();
  uint64_t v8 = *(void *)(v5 - 8);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v8 + 48))(v4, 1, v5);
  if (!result)
  {
    uint64_t v7 = *(uint64_t (**)(uint64_t, uint64_t))(v8 + 8);
    return v7(v4, v5);
  }
  return result;
}

uint64_t *sub_100BD9C94(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6 = *a2;
  unint64_t v7 = a2[1];
  sub_1000361E0(*a2, v7);
  *a1 = v6;
  a1[1] = v7;
  a1[2] = a2[2];
  uint64_t v8 = *(int *)(a3 + 24);
  uint64_t v9 = (char *)a1 + v8;
  uint64_t v10 = (char *)a2 + v8;
  uint64_t v11 = type metadata accessor for Date();
  uint64_t v12 = *(void *)(v11 - 8);
  uint64_t v13 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v12 + 48);
  swift_bridgeObjectRetain();
  if (v13(v10, 1, v11))
  {
    uint64_t v14 = sub_10000588C((uint64_t *)&unk_10163AC90);
    memcpy(v9, v10, *(void *)(*(void *)(v14 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v12 + 16))(v9, v10, v11);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v12 + 56))(v9, 0, 1, v11);
  }
  *((unsigned char *)a1 + *(int *)(a3 + 28)) = *((unsigned char *)a2 + *(int *)(a3 + 28));
  return a1;
}

uint64_t *sub_100BD9DE8(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6 = *a2;
  unint64_t v7 = a2[1];
  sub_1000361E0(*a2, v7);
  uint64_t v8 = *a1;
  unint64_t v9 = a1[1];
  *a1 = v6;
  a1[1] = v7;
  sub_10001CFB8(v8, v9);
  a1[2] = a2[2];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v10 = *(int *)(a3 + 24);
  uint64_t v11 = (char *)a1 + v10;
  uint64_t v12 = (char *)a2 + v10;
  uint64_t v13 = type metadata accessor for Date();
  uint64_t v14 = *(void *)(v13 - 8);
  uint64_t v15 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v14 + 48);
  int v16 = v15(v11, 1, v13);
  int v17 = v15(v12, 1, v13);
  if (!v16)
  {
    if (!v17)
    {
      (*(void (**)(char *, char *, uint64_t))(v14 + 24))(v11, v12, v13);
      goto LABEL_7;
    }
    (*(void (**)(char *, uint64_t))(v14 + 8))(v11, v13);
    goto LABEL_6;
  }
  if (v17)
  {
LABEL_6:
    uint64_t v18 = sub_10000588C((uint64_t *)&unk_10163AC90);
    memcpy(v11, v12, *(void *)(*(void *)(v18 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(v14 + 16))(v11, v12, v13);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v14 + 56))(v11, 0, 1, v13);
LABEL_7:
  *((unsigned char *)a1 + *(int *)(a3 + 28)) = *((unsigned char *)a2 + *(int *)(a3 + 28));
  return a1;
}

uint64_t sub_100BD9FA8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  uint64_t v6 = *(int *)(a3 + 24);
  unint64_t v7 = (void *)(a1 + v6);
  uint64_t v8 = (const void *)(a2 + v6);
  uint64_t v9 = type metadata accessor for Date();
  uint64_t v10 = *(void *)(v9 - 8);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v10 + 48))(v8, 1, v9))
  {
    uint64_t v11 = sub_10000588C((uint64_t *)&unk_10163AC90);
    memcpy(v7, v8, *(void *)(*(void *)(v11 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v10 + 32))(v7, v8, v9);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v10 + 56))(v7, 0, 1, v9);
  }
  *(unsigned char *)(a1 + *(int *)(a3 + 28)) = *(unsigned char *)(a2 + *(int *)(a3 + 28));
  return a1;
}

uint64_t *sub_100BDA0E0(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *a1;
  unint64_t v7 = a1[1];
  *(_OWORD *)a1 = *(_OWORD *)a2;
  sub_10001CFB8(v6, v7);
  a1[2] = *(void *)(a2 + 16);
  swift_bridgeObjectRelease();
  uint64_t v8 = *(int *)(a3 + 24);
  uint64_t v9 = (char *)a1 + v8;
  uint64_t v10 = (char *)(a2 + v8);
  uint64_t v11 = type metadata accessor for Date();
  uint64_t v12 = *(void *)(v11 - 8);
  uint64_t v13 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v12 + 48);
  int v14 = v13(v9, 1, v11);
  int v15 = v13(v10, 1, v11);
  if (!v14)
  {
    if (!v15)
    {
      (*(void (**)(char *, char *, uint64_t))(v12 + 40))(v9, v10, v11);
      goto LABEL_7;
    }
    (*(void (**)(char *, uint64_t))(v12 + 8))(v9, v11);
    goto LABEL_6;
  }
  if (v15)
  {
LABEL_6:
    uint64_t v16 = sub_10000588C((uint64_t *)&unk_10163AC90);
    memcpy(v9, v10, *(void *)(*(void *)(v16 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(v12 + 32))(v9, v10, v11);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v12 + 56))(v9, 0, 1, v11);
LABEL_7:
  *((unsigned char *)a1 + *(int *)(a3 + 28)) = *(unsigned char *)(a2 + *(int *)(a3 + 28));
  return a1;
}

uint64_t sub_100BDA290(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_100BDA2A4);
}

uint64_t sub_100BDA2A4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a2 == 0x7FFFFFFF)
  {
    unint64_t v4 = *(void *)(a1 + 16);
    if (v4 >= 0xFFFFFFFF) {
      LODWORD(v4) = -1;
    }
    return (v4 + 1);
  }
  else
  {
    uint64_t v8 = sub_10000588C((uint64_t *)&unk_10163AC90);
    uint64_t v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 48);
    uint64_t v10 = v8;
    uint64_t v11 = a1 + *(int *)(a3 + 24);
    return v9(v11, a2, v10);
  }
}

uint64_t sub_100BDA358(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_100BDA36C);
}

uint64_t sub_100BDA36C(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(void *)(result + 16) = (a2 - 1);
  }
  else
  {
    uint64_t v7 = sub_10000588C((uint64_t *)&unk_10163AC90);
    uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56);
    uint64_t v9 = v7;
    uint64_t v10 = v5 + *(int *)(a4 + 24);
    return v8(v10, a2, a2, v9);
  }
  return result;
}

uint64_t type metadata accessor for FetchResponse.SearchResult()
{
  uint64_t result = qword_10165ACD0;
  if (!qword_10165ACD0) {
    return swift_getSingletonMetadata();
  }
  return result;
}

void sub_100BDA464()
{
  sub_1000C7D80();
  if (v0 <= 0x3F) {
    swift_initStructMetadata();
  }
}

uint64_t sub_100BDA510@<X0>(Swift::String *a1@<X0>, char *a2@<X8>)
{
  v2._rawValue = &off_1015A2BD8;
  return sub_1007CA060(v2, a1, a2);
}

uint64_t sub_100BDA51C()
{
  return RawRepresentable<>.init(from:)();
}

uint64_t sub_100BDA57C()
{
  return RawRepresentable<>.encode(to:)();
}

uint64_t sub_100BDA5CC()
{
  if (*v0) {
    return 0x6F43737574617473;
  }
  else {
    return 0x73746C75736572;
  }
}

uint64_t sub_100BDA60C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_100BDB078(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_100BDA634(uint64_t a1)
{
  unint64_t v2 = sub_100BDB3A8();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_100BDA670(uint64_t a1)
{
  unint64_t v2 = sub_100BDB3A8();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_100BDA6AC@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result = sub_100BDB178(a1);
  if (!v2)
  {
    *(void *)a2 = result;
    *(unsigned char *)(a2 + 8) = v5 & 1;
  }
  return result;
}

uint64_t sub_100BDA6E0()
{
  uint64_t result = 25705;
  switch(*v0)
  {
    case 1:
      uint64_t result = 0x7364616F6C796170;
      break;
    case 2:
      uint64_t result = 0x656372756F73;
      break;
    case 3:
      uint64_t result = 0x656B636150766C74;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t sub_100BDA764@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_100BDB4A8(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_100BDA78C(uint64_t a1)
{
  unint64_t v2 = sub_100BDC4D0();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_100BDA7C8(uint64_t a1)
{
  unint64_t v2 = sub_100BDC4D0();

  return CodingKey.debugDescription.getter(a1, v2);
}

double sub_100BDA804@<D0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  sub_100BDB650(a1, (uint64_t)v6);
  if (!v2)
  {
    double result = *(double *)v6;
    long long v5 = v6[1];
    *(_OWORD *)a2 = v6[0];
    *(_OWORD *)(a2 + 16) = v5;
    *(void *)(a2 + 32) = v7;
  }
  return result;
}

uint64_t sub_100BDA84C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v5 = type metadata accessor for FetchResponse.SearchResult();
  __chkstk_darwin(v5);
  uint64_t v7 = (char *)v15 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10001D010(a1, (uint64_t)v15);
  sub_100BDB650(v15, (uint64_t)&v16);
  if (!v2)
  {
    long long v20 = v16;
    *(_OWORD *)uint64_t v7 = v16;
    uint64_t v8 = &v7[*(int *)(v5 + 24)];
    uint64_t v9 = type metadata accessor for Date();
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 56))(v8, 1, 1, v9);
    char v10 = v18;
    if (v18 == 19) {
      char v10 = 7;
    }
    v7[*(int *)(v5 + 28)] = v10;
    uint64_t v11 = v17;
    uint64_t v12 = v19;
    sub_100061E54((uint64_t)&v20);
    uint64_t v13 = sub_100C05274(v11, v12);
    sub_100BDC484((uint64_t)&v16);
    *((void *)v7 + 2) = v13;
    sub_100BDC3C4((uint64_t)v7, a2);
  }
  return _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(a1);
}

uint64_t sub_100BDA9AC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_100BDA84C(a1, a2);
}

uint64_t sub_100BDA9C4(char *a1, char *a2)
{
  return sub_10071C1A0(*a1, *a2);
}

Swift::Int sub_100BDA9D0()
{
  return Hasher._finalize()();
}

uint64_t sub_100BDAA64()
{
  String.hash(into:)();

  return swift_bridgeObjectRelease();
}

Swift::Int sub_100BDAAE4()
{
  return Hasher._finalize()();
}

uint64_t sub_100BDAB74@<X0>(Swift::String *a1@<X0>, char *a2@<X8>)
{
  v2._rawValue = &off_1015A4E88;
  return sub_1007CA060(v2, a1, a2);
}

void sub_100BDAB80(unint64_t *a1@<X8>)
{
  unint64_t v2 = 0xD000000000000014;
  if (*v1) {
    unint64_t v2 = 0x61636F4C6E736361;
  }
  unint64_t v3 = 0x80000001013F0F70;
  if (*v1) {
    unint64_t v3 = 0xED0000736E6F6974;
  }
  *a1 = v2;
  a1[1] = v3;
}

uint64_t sub_100BDABD0()
{
  if (*v0) {
    return 0x61636F4C6E736361;
  }
  else {
    return 0xD000000000000014;
  }
}

uint64_t sub_100BDAC1C@<X0>(Swift::String string@<0:X0, 8:X1>, char *a2@<X8>)
{
  object = string._object;
  v3._uint64_t countAndFlagsBits = string._countAndFlagsBits;
  v3._object = object;
  Swift::Int v5 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_1015A4E88, v3);
  uint64_t result = swift_bridgeObjectRelease();
  if (v5 == 1) {
    char v7 = 1;
  }
  else {
    char v7 = 2;
  }
  if (!v5) {
    char v7 = 0;
  }
  *a2 = v7;
  return result;
}

uint64_t sub_100BDAC80(uint64_t a1)
{
  unint64_t v2 = sub_100BDC264();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_100BDACBC(uint64_t a1)
{
  unint64_t v2 = sub_100BDC264();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_100BDACF8()
{
  uint64_t v1 = 0x65566769666E6F63;
  if (*v0 != 1) {
    uint64_t v1 = 0x6F43737574617473;
  }
  if (*v0) {
    return v1;
  }
  else {
    return 0x6E6F697461636F6CLL;
  }
}

uint64_t sub_100BDAD70@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_100BDD660(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_100BDAD98(uint64_t a1)
{
  unint64_t v2 = sub_100BDD180();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_100BDADD4(uint64_t a1)
{
  unint64_t v2 = sub_100BDD180();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_100BDAE10@<X0>(uint64_t a1@<X8>)
{
  return sub_100BDB00C((uint64_t (*)(void))sub_100BDCEF4, a1);
}

uint64_t sub_100BDAE3C()
{
  uint64_t v1 = 25705;
  if (*v0 != 1) {
    uint64_t v1 = 0x656B636150766C74;
  }
  if (*v0) {
    return v1;
  }
  else {
    return 0x6E6F697461636F6CLL;
  }
}

uint64_t sub_100BDAE98@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_100BDD1D4(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_100BDAEC0(uint64_t a1)
{
  unint64_t v2 = sub_100BDDF80();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_100BDAEFC(uint64_t a1)
{
  unint64_t v2 = sub_100BDDF80();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_100BDAF38@<X0>(void *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = sub_100BDD338(a1);
  if (!v2)
  {
    *a2 = result;
    a2[1] = v5;
    a2[2] = v6;
    a2[3] = v7;
  }
  return result;
}

uint64_t sub_100BDAF68(uint64_t a1)
{
  unint64_t v2 = sub_100BDDA98();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_100BDAFA4(uint64_t a1)
{
  unint64_t v2 = sub_100BDDA98();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_100BDAFE0@<X0>(uint64_t a1@<X8>)
{
  return sub_100BDB00C((uint64_t (*)(void))sub_100BDD80C, a1);
}

uint64_t sub_100BDB00C@<X0>(uint64_t (*a1)(void)@<X3>, uint64_t a2@<X8>)
{
  uint64_t result = a1();
  if (!v2)
  {
    *(void *)a2 = result;
    *(void *)(a2 + 8) = v5;
    *(unsigned char *)(a2 + 16) = v6 & 1;
    *(unsigned char *)(a2 + 17) = HIBYTE(v6) & 1;
  }
  return result;
}

uint64_t sub_100BDB04C@<X0>(void *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = sub_100BDB9F8(a1);
  if (!v2) {
    *a2 = result;
  }
  return result;
}

uint64_t sub_100BDB078(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 0x73746C75736572 && a2 == 0xE700000000000000;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x6F43737574617473 && a2 == 0xEA00000000006564)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else
  {
    char v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v6) {
      return 1;
    }
    else {
      return 2;
    }
  }
}

uint64_t sub_100BDB178(void *a1)
{
  uint64_t v3 = sub_10000588C(&qword_10165AD10);
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  char v6 = &v9[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v7 = a1[3];
  sub_10001CD44(a1, v7);
  sub_100BDB3A8();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v1)
  {
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)a1);
  }
  else
  {
    sub_10000588C(&qword_10165AD20);
    v9[7] = 0;
    sub_100BDC524(&qword_10165AD28, &qword_10165AD20, (void (*)(void))sub_100BDB3FC);
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    uint64_t v7 = v10;
    v9[5] = 1;
    sub_100BDB454();
    swift_bridgeObjectRetain();
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    (*(void (**)(unsigned char *, uint64_t))(v4 + 8))(v6, v3);
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)a1);
    swift_bridgeObjectRelease();
  }
  return v7;
}

unint64_t sub_100BDB3A8()
{
  unint64_t result = qword_10165AD18;
  if (!qword_10165AD18)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10165AD18);
  }
  return result;
}

unint64_t sub_100BDB3FC()
{
  unint64_t result = qword_10165AD30;
  if (!qword_10165AD30)
  {
    type metadata accessor for FetchResponse.SearchResult();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10165AD30);
  }
  return result;
}

unint64_t sub_100BDB454()
{
  unint64_t result = qword_10165AD38;
  if (!qword_10165AD38)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10165AD38);
  }
  return result;
}

uint64_t sub_100BDB4A8(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 25705 && a2 == 0xE200000000000000;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x7364616F6C796170 && a2 == 0xE800000000000000 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0x656372756F73 && a2 == 0xE600000000000000 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else if (a1 == 0x656B636150766C74 && a2 == 0xEA00000000007374)
  {
    swift_bridgeObjectRelease();
    return 3;
  }
  else
  {
    char v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v6) {
      return 3;
    }
    else {
      return 4;
    }
  }
}

uint64_t sub_100BDB650@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v5 = sub_10000588C(&qword_10165AD60);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v8 = (char *)&v18 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10001CD44(a1, a1[3]);
  sub_100BDC4D0();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v2) {
    return _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)a1);
  }
  char v25 = 0;
  sub_100037AA0();
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  uint64_t v10 = v22;
  unint64_t v9 = v23;
  sub_10000588C((uint64_t *)&unk_10164DBD0);
  char v25 = 1;
  sub_1000361E0(v10, v9);
  sub_1005FB904();
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  unint64_t v21 = v9;
  uint64_t v11 = v22;
  char v25 = 2;
  sub_100429778();
  swift_bridgeObjectRetain();
  uint64_t v20 = 0;
  KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
  uint64_t v19 = v11;
  int v24 = v22;
  sub_10000588C(&qword_10165AD70);
  char v25 = 3;
  sub_100BDC524(&qword_10165AD78, &qword_10165AD70, (void (*)(void))sub_1005FB904);
  KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
  (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  uint64_t v12 = v10;
  uint64_t v13 = v10;
  unint64_t v15 = v21;
  uint64_t v14 = v22;
  sub_1000361E0(v13, v21);
  swift_bridgeObjectRetain();
  sub_10001CFB8(v12, v15);
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)a1);
  sub_10001CFB8(v12, v15);
  swift_bridgeObjectRelease();
  uint64_t v16 = v19;
  uint64_t result = swift_bridgeObjectRelease();
  *(void *)a2 = v12;
  *(void *)(a2 + 8) = v15;
  *(void *)(a2 + 16) = v16;
  *(unsigned char *)(a2 + 24) = v24;
  *(void *)(a2 + 32) = v14;
  return result;
}

uint64_t sub_100BDB9F8(void *a1)
{
  uint64_t v2 = type metadata accessor for FetchResponse.SearchResult();
  uint64_t v86 = *(void *)(v2 - 8);
  uint64_t v87 = v2;
  uint64_t v3 = __chkstk_darwin(v2);
  uint64_t v5 = (char *)&v67 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = __chkstk_darwin(v3);
  uint64_t v8 = (char *)&v67 - v7;
  uint64_t v9 = __chkstk_darwin(v6);
  uint64_t v11 = (char *)&v67 - v10;
  __chkstk_darwin(v9);
  uint64_t v13 = (char *)&v67 - v12;
  uint64_t v14 = sub_10000588C(&qword_10165AD40);
  uint64_t v84 = *(void *)(v14 - 8);
  uint64_t v85 = v14;
  __chkstk_darwin(v14);
  uint64_t v16 = (char *)&v67 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10001CD44(a1, a1[3]);
  sub_100BDC264();
  uint64_t v17 = v88;
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v17) {
    goto LABEL_3;
  }
  long long v81 = (uint64_t *)v13;
  long long v75 = v11;
  long long v76 = (uint64_t *)v8;
  long long v77 = v5;
  char v92 = 0;
  sub_100BDC2B8();
  uint64_t v18 = v85;
  KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
  uint64_t v19 = v16;
  uint64_t v20 = v89;
  unsigned __int16 v21 = v90;
  char v92 = 1;
  sub_100BDC30C();
  KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
  uint64_t v71 = 0;
  uint64_t v22 = v18;
  uint64_t v24 = v89;
  unsigned __int16 v25 = v90;
  long long v69 = v19;
  long long v70 = a1;
  uint64_t v68 = v89;
  if (!v20)
  {
    uint64_t v8 = (char *)_swiftEmptyArrayStorage;
    goto LABEL_30;
  }
  int v91 = v90;
  if ((v21 & 0x100) != 0)
  {
    uint64_t result = swift_bridgeObjectRelease();
    int64_t v27 = v81;
  }
  else
  {
    char v26 = _stringCompareWithSmolCheck(_:_:expecting:)();
    uint64_t result = swift_bridgeObjectRelease();
    int64_t v27 = v81;
    if ((v26 & 1) == 0)
    {
LABEL_28:
      uint64_t v8 = (char *)_swiftEmptyArrayStorage;
LABEL_29:
      swift_bridgeObjectRelease();
      a1 = v70;
      uint64_t v22 = v85;
      uint64_t v24 = v68;
      unsigned __int16 v25 = v91;
      uint64_t v19 = v69;
LABEL_30:
      uint64_t v51 = v84;
      if (v24)
      {
        if ((v25 & 0x100) != 0)
        {
          swift_bridgeObjectRelease();
        }
        else
        {
          char v52 = _stringCompareWithSmolCheck(_:_:expecting:)();
          swift_bridgeObjectRelease();
          uint64_t v51 = v84;
          if ((v52 & 1) == 0) {
            goto LABEL_33;
          }
        }
        uint64_t v53 = *(void *)(v24 + 16);
        if (v53)
        {
          long long v54 = (uint64_t *)(v24 + 56);
          long long v56 = v76;
          uint64_t v55 = (uint64_t)v77;
          do
          {
            uint64_t v88 = v53;
            uint64_t v58 = *(v54 - 3);
            uint64_t v57 = *(v54 - 2);
            unint64_t v60 = *(v54 - 1);
            uint64_t v59 = *v54;
            swift_bridgeObjectRetain();
            sub_1000361E0(v57, v60);
            swift_bridgeObjectRetain();
            sub_1000361E0(v57, v60);
            unint64_t v82 = v58;
            uint64_t v83 = v59;
            long long v61 = sub_100C05274(v58, v59);
            uint64_t v62 = v87;
            long long v63 = (char *)v56 + *(int *)(v87 + 24);
            uint64_t v64 = type metadata accessor for Date();
            (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v64 - 8) + 56))(v63, 1, 1, v64);
            uint64_t *v56 = v57;
            v56[1] = v60;
            v56[2] = (uint64_t)v61;
            *((unsigned char *)v56 + *(int *)(v62 + 28)) = 7;
            sub_100BDC360((uint64_t)v56, v55);
            if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
              uint64_t v8 = (char *)sub_100A722FC(0, *((void *)v8 + 2) + 1, 1, (unint64_t)v8);
            }
            unint64_t v66 = *((void *)v8 + 2);
            unint64_t v65 = *((void *)v8 + 3);
            uint64_t v22 = v85;
            if (v66 >= v65 >> 1) {
              uint64_t v8 = (char *)sub_100A722FC(v65 > 1, v66 + 1, 1, (unint64_t)v8);
            }
            v54 += 4;
            *((void *)v8 + 2) = v66 + 1;
            uint64_t v55 = (uint64_t)v77;
            sub_100BDC3C4((uint64_t)v77, (uint64_t)&v8[((*(unsigned __int8 *)(v86 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v86 + 80))+ *(void *)(v86 + 72) * v66]);
            swift_bridgeObjectRelease();
            sub_10001CFB8(v57, v60);
            swift_bridgeObjectRelease();
            long long v56 = v76;
            sub_100BDC428((uint64_t)v76);
            uint64_t v53 = v88 - 1;
          }
          while (v88 != 1);
        }
        swift_bridgeObjectRelease();
        (*(void (**)(char *, uint64_t))(v84 + 8))(v69, v22);
        a1 = v70;
        goto LABEL_3;
      }
LABEL_33:
      (*(void (**)(char *, uint64_t))(v51 + 8))(v19, v22);
      swift_bridgeObjectRelease();
LABEL_3:
      _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)a1);
      return (uint64_t)v8;
    }
  }
  uint64_t v74 = *(void *)(v20 + 16);
  if (!v74) {
    goto LABEL_28;
  }
  unint64_t v28 = 0;
  uint64_t v8 = (char *)_swiftEmptyArrayStorage;
  uint64_t v72 = v20 + 32;
  uint64_t v73 = v20;
  while (v28 < *(void *)(v20 + 16))
  {
    unint64_t v79 = v28;
    long long v80 = v8;
    char v29 = (uint64_t *)(v72 + 56 * v28);
    uint64_t v31 = *v29;
    unint64_t v30 = v29[1];
    uint64_t v32 = v29[5];
    uint64_t v33 = v29[6];
    uint64_t v34 = *(void *)(v33 + 16);
    unint64_t v82 = v30;
    uint64_t v83 = v31;
    uint64_t v78 = v32;
    uint64_t v88 = v33;
    if (v34)
    {
      swift_bridgeObjectRetain();
      sub_1000361E0(v31, v30);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain_n();
      uint64_t v35 = (unint64_t *)(v33 + 40);
      uint64_t v36 = _swiftEmptyArrayStorage;
      do
      {
        uint64_t v37 = *(v35 - 1);
        unint64_t v38 = *v35;
        sub_1000361E0(v37, *v35);
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          uint64_t v36 = sub_100A721D8(0, v36[2] + 1, 1, v36);
        }
        unint64_t v40 = v36[2];
        unint64_t v39 = v36[3];
        if (v40 >= v39 >> 1) {
          uint64_t v36 = sub_100A721D8((void *)(v39 > 1), v40 + 1, 1, v36);
        }
        v35 += 4;
        v36[2] = v40 + 1;
        uint64_t v41 = &v36[3 * v40];
        v41[4] = v37;
        v41[5] = v38;
        *((unsigned char *)v41 + 52) = 0;
        *((_DWORD *)v41 + 12) = 3;
        --v34;
      }
      while (v34);
      swift_bridgeObjectRelease_n();
      int64_t v27 = v81;
      unint64_t v30 = v82;
      uint64_t v31 = v83;
    }
    else
    {
      sub_1000361E0(v31, v30);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      uint64_t v36 = _swiftEmptyArrayStorage;
    }
    uint64_t v42 = v87;
    unint64_t v43 = (char *)v27 + *(int *)(v87 + 24);
    uint64_t v44 = type metadata accessor for Date();
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v44 - 8) + 56))(v43, 1, 1, v44);
    uint64_t *v27 = v31;
    v27[1] = v30;
    void v27[2] = (uint64_t)v36;
    *((unsigned char *)v27 + *(int *)(v42 + 28)) = 15;
    uint64_t v45 = (uint64_t)v75;
    sub_100BDC360((uint64_t)v27, (uint64_t)v75);
    sub_1000361E0(v31, v30);
    uint64_t v8 = v80;
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v47 = v86;
    if ((isUniquelyReferenced_nonNull_native & 1) == 0) {
      uint64_t v8 = (char *)sub_100A722FC(0, *((void *)v8 + 2) + 1, 1, (unint64_t)v8);
    }
    unint64_t v49 = *((void *)v8 + 2);
    unint64_t v48 = *((void *)v8 + 3);
    if (v49 >= v48 >> 1) {
      uint64_t v8 = (char *)sub_100A722FC(v48 > 1, v49 + 1, 1, (unint64_t)v8);
    }
    unint64_t v50 = v79 + 1;
    *((void *)v8 + 2) = v49 + 1;
    unint64_t v28 = v50;
    sub_100BDC3C4(v45, (uint64_t)&v8[((*(unsigned __int8 *)(v47 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v47 + 80))+ *(void *)(v47 + 72) * v49]);
    sub_10001CFB8(v83, v82);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    int64_t v27 = v81;
    uint64_t result = sub_100BDC428((uint64_t)v81);
    uint64_t v20 = v73;
    if (v28 == v74) {
      goto LABEL_29;
    }
  }
  __break(1u);
  return result;
}