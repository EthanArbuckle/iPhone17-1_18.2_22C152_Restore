uint64_t sub_100E9C200(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  result = sub_100E9C8E4(&qword_1016613F0, a2, (void (*)(uint64_t))type metadata accessor for APSNotificationService);
  *(void *)(a1 + 8) = result;
  return result;
}

unint64_t sub_100E9C258()
{
  unint64_t result = qword_1016613F8;
  if (!qword_1016613F8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1016613F8);
  }
  return result;
}

uint64_t sub_100E9C2AC(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_10000588C(&qword_10163ABA0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_100E9C314()
{
  uint64_t v1 = type metadata accessor for UUID();
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 16) & ~v3;
  uint64_t v5 = v4 + *(void *)(v2 + 64);
  uint64_t v6 = v3 | 7;
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);

  return _swift_deallocObject(v0, v5, v6);
}

uint64_t sub_100E9C3A4()
{
  swift_weakDestroy();

  return _swift_deallocObject(v0, 24, 7);
}

unint64_t sub_100E9C3DC()
{
  unint64_t result = qword_101661400;
  if (!qword_101661400)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, &qword_101661400);
  }
  return result;
}

uint64_t sub_100E9C430()
{
  swift_release();
  swift_unknownObjectRelease();
  swift_bridgeObjectRelease();

  return _swift_deallocObject(v0, 56, 7);
}

uint64_t sub_100E9C478(uint64_t a1)
{
  long long v8 = *(_OWORD *)(v1 + 32);
  uint64_t v4 = *(void *)(v1 + 48);
  uint64_t v5 = swift_task_alloc();
  long long v6 = *(_OWORD *)(v1 + 16);
  *(void *)(v2 + 16) = v5;
  *(void *)uint64_t v5 = v2;
  *(void *)(v5 + 8) = sub_100033F68;
  *(void *)(v5 + 56) = v4;
  *(_OWORD *)(v5 + 40) = v8;
  *(_OWORD *)(v5 + 24) = v6;
  *(void *)(v5 + 16) = a1;
  return _swift_task_switch(sub_100E987E8, 0, 0);
}

uint64_t sub_100E9C54C(uint64_t a1)
{
  return sub_100E98A94(a1, v1[2], v1[3], v1[4], v1[5], v1[6]);
}

uint64_t sub_100E9C55C()
{
  swift_unknownObjectRelease();
  swift_release();
  swift_release();
  swift_unknownObjectRelease();
  swift_bridgeObjectRelease();

  return _swift_deallocObject(v0, 80, 7);
}

uint64_t sub_100E9C5B4()
{
  uint64_t v2 = *(void *)(v0 + 64);
  uint64_t v3 = *(void *)(v0 + 72);
  uint64_t v4 = swift_task_alloc();
  long long v5 = *(_OWORD *)(v0 + 32);
  long long v6 = *(_OWORD *)(v0 + 48);
  *(void *)(v1 + 16) = v4;
  *(void *)uint64_t v4 = v1;
  *(void *)(v4 + 8) = sub_100033F68;
  *(void *)(v4 + 48) = v2;
  *(void *)(v4 + 56) = v3;
  *(_OWORD *)(v4 + 16) = v5;
  *(_OWORD *)(v4 + 32) = v6;
  return _swift_task_switch(sub_100E98C08, v5, 0);
}

uint64_t sub_100E9C670()
{
  swift_release();

  return _swift_deallocObject(v0, 32, 7);
}

uint64_t sub_100E9C6A8(uint64_t a1)
{
  uint64_t v4 = *(void *)(v1 + 16);
  long long v5 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v5;
  *long long v5 = v2;
  v5[1] = sub_100033F68;
  return sub_100E974BC(a1, v4);
}

uint64_t sub_100E9C750(uint64_t a1, uint64_t a2)
{
  uint64_t v6 = *(void *)(v2 + 16);
  uint64_t v7 = (void *)swift_task_alloc();
  *(void *)(v3 + 16) = v7;
  *uint64_t v7 = v3;
  v7[1] = sub_100033F68;
  v7[4] = a2;
  v7[5] = v6;
  v7[3] = a1;
  return _swift_task_switch(sub_100E97950, 0, 0);
}

uint64_t sub_100E9C810(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v10 = *(void *)(v4 + 16);
  v11 = (void *)swift_task_alloc();
  *(void *)(v5 + 16) = v11;
  void *v11 = v5;
  v11[1] = sub_100033F68;
  v11[7] = a4;
  v11[8] = v10;
  v11[5] = a2;
  v11[6] = a3;
  v11[4] = a1;
  return _swift_task_switch(sub_100E97C2C, 0, 0);
}

uint64_t sub_100E9C8E4(unint64_t *a1, uint64_t a2, void (*a3)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a3(a2);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_100E9C92C(uint64_t a1)
{
  uint64_t v4 = *(void *)(v1 + 16);
  uint64_t v5 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v5;
  *uint64_t v5 = v2;
  v5[1] = sub_100033F68;
  v5[3] = a1;
  v5[4] = v4;
  return _swift_task_switch(sub_100E95EB0, v4, 0);
}

unsigned char *storeEnumTagSinglePayload for APSNotificationService.Error(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFE)
  {
    unsigned int v6 = ((a2 - 255) >> 8) + 1;
    *uint64_t result = a2 + 1;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x100E9CAA8);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 1;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for APSNotificationService.Error()
{
  return &type metadata for APSNotificationService.Error;
}

unint64_t sub_100E9CAE4()
{
  unint64_t result = qword_101661470;
  if (!qword_101661470)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_101661470);
  }
  return result;
}

uint64_t sub_100E9CB44(uint64_t a1, uint64_t a2)
{
  v2[4] = a1;
  v2[5] = a2;
  uint64_t v3 = type metadata accessor for CorrelationIdentifierMap();
  v2[6] = v3;
  v2[7] = *(void *)(v3 - 8);
  v2[8] = swift_task_alloc();
  return _swift_task_switch(sub_100E9CC04, 0, 0);
}

uint64_t sub_100E9CC04()
{
  uint64_t v13 = v0;
  if (qword_101637148 != -1) {
    swift_once();
  }
  uint64_t v1 = type metadata accessor for Logger();
  v0[9] = sub_100010324(v1, (uint64_t)qword_10170EDD8);
  swift_bridgeObjectRetain_n();
  uint64_t v2 = Logger.logObject.getter();
  os_log_type_t v3 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v2, v3))
  {
    unsigned int v4 = (uint8_t *)swift_slowAlloc();
    uint64_t v12 = swift_slowAlloc();
    *(_DWORD *)unsigned int v4 = 136315138;
    swift_bridgeObjectRetain();
    uint64_t v5 = Array.description.getter();
    unint64_t v7 = v6;
    swift_bridgeObjectRelease();
    v0[3] = sub_1008FA0F0(v5, v7, &v12);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease_n();
    _os_log_impl((void *)&_mh_execute_header, v2, v3, "Creating map for %s.", v4, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    swift_bridgeObjectRelease_n();
  }

  swift_bridgeObjectRetain();
  uint64_t v8 = (void *)swift_task_alloc();
  v0[10] = v8;
  *uint64_t v8 = v0;
  v8[1] = sub_100E9CE90;
  uint64_t v9 = v0[8];
  uint64_t v10 = v0[5];
  return sub_100493474(v9, 0xD00000000000001BLL, 0x80000001013F3BA0, v10, (uint64_t)sub_100EA8CC0, 0);
}

uint64_t sub_100E9CE90()
{
  *(void *)(*(void *)v1 + 88) = v0;
  swift_task_dealloc();
  if (v0) {
    uint64_t v2 = sub_100E9D044;
  }
  else {
    uint64_t v2 = sub_100E9CFA4;
  }
  return _swift_task_switch(v2, 0, 0);
}

uint64_t sub_100E9CFA4()
{
  (*(void (**)(void, void, void))(v0[7] + 32))(v0[4], v0[8], v0[6]);
  (*(void (**)(void, void, uint64_t, void))(v0[7] + 56))(v0[4], 0, 1, v0[6]);
  swift_task_dealloc();
  uint64_t v1 = (uint64_t (*)(void))v0[1];
  return v1();
}

uint64_t sub_100E9D044()
{
  swift_errorRetain();
  swift_errorRetain();
  uint64_t v1 = Logger.logObject.getter();
  os_log_type_t v2 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v1, v2))
  {
    uint64_t v3 = (uint8_t *)swift_slowAlloc();
    uint64_t v4 = (void *)swift_slowAlloc();
    *(_DWORD *)uint64_t v3 = 138543362;
    swift_errorRetain();
    uint64_t v5 = _swift_stdlib_bridgeErrorToNSError();
    v0[2] = v5;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *uint64_t v4 = v5;
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl((void *)&_mh_execute_header, v1, v2, "Map creation error: %{public}@.", v3, 0xCu);
    sub_10000588C((uint64_t *)&unk_101638EA0);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    swift_errorRelease();
  }
  else
  {
    swift_errorRelease();
    swift_errorRelease();
    swift_errorRelease();
  }
  (*(void (**)(void, uint64_t, uint64_t, void))(v0[7] + 56))(v0[4], 1, 1, v0[6]);
  swift_task_dealloc();
  unint64_t v6 = (uint64_t (*)(void))v0[1];
  return v6();
}

uint64_t sub_100E9D224()
{
  uint64_t v0 = type metadata accessor for Logger();
  sub_10001E384(v0, qword_10170EDD8);
  uint64_t v1 = sub_100010324(v0, (uint64_t)qword_10170EDD8);
  if (qword_101637158 != -1) {
    swift_once();
  }
  uint64_t v2 = sub_100010324(v0, (uint64_t)qword_10170EE08);
  uint64_t v3 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v0 - 8) + 16);

  return v3(v1, v2, v0);
}

uint64_t sub_100E9D2EC()
{
  uint64_t v0 = type metadata accessor for Date();
  sub_10001E384(v0, qword_10170EDF0);
  sub_100010324(v0, (uint64_t)qword_10170EDF0);
  return static Date.distantPast.getter();
}

uint64_t sub_100E9D338(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  *(void *)(v4 + 24) = a4;
  uint64_t v5 = (void *)swift_task_alloc();
  *(void *)(v4 + 32) = v5;
  *uint64_t v5 = v4;
  v5[1] = sub_100E9D3CC;
  return sub_100E9D6E4();
}

uint64_t sub_100E9D3CC()
{
  uint64_t v2 = (void *)*v1;
  v2[5] = v0;
  swift_task_dealloc();
  if (v0)
  {
    uint64_t v3 = v2[3];
    return _swift_task_switch(sub_100E9D500, v3, 0);
  }
  else
  {
    uint64_t v4 = (uint64_t (*)(void))v2[1];
    return v4();
  }
}

uint64_t sub_100E9D500()
{
  if (qword_101637148 != -1) {
    swift_once();
  }
  uint64_t v1 = type metadata accessor for Logger();
  sub_100010324(v1, (uint64_t)qword_10170EDD8);
  swift_errorRetain();
  uint64_t v2 = Logger.logObject.getter();
  os_log_type_t v3 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v2, v3))
  {
    uint64_t v4 = (uint8_t *)swift_slowAlloc();
    uint64_t v5 = (void *)swift_slowAlloc();
    *(_DWORD *)uint64_t v4 = 138543362;
    uint64_t v6 = _convertErrorToNSError(_:)();
    *(void *)(v0 + 16) = v6;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *uint64_t v5 = v6;
    swift_errorRelease();
    _os_log_impl((void *)&_mh_execute_header, v2, v3, "Error during PeerTrustService startup: %{public}@", v4, 0xCu);
    sub_10000588C((uint64_t *)&unk_101638EA0);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    swift_errorRelease();
  }
  else
  {
    swift_errorRelease();
    swift_errorRelease();
  }
  uint64_t v7 = *(uint64_t (**)(void))(v0 + 8);
  return v7();
}

uint64_t sub_100E9D6E4()
{
  v1[20] = v0;
  uint64_t v2 = type metadata accessor for UUID();
  v1[21] = v2;
  v1[22] = *(void *)(v2 - 8);
  v1[23] = swift_task_alloc();
  return _swift_task_switch(sub_100E9D7A4, v0, 0);
}

uint64_t sub_100E9D7A4()
{
  uint64_t v1 = qword_1016375E8;
  swift_retain();
  if (v1 != -1) {
    swift_once();
  }
  swift_beginAccess();
  uint64_t result = sub_10001D074((uint64_t)&xmmword_10166E8F0, v0 + 56, (uint64_t *)&unk_101638D30);
  if (*(void *)(v0 + 80))
  {
    sub_10001CEB0((long long *)(v0 + 56), v0 + 16);
    swift_release();
    sub_10001CD44((void *)(v0 + 16), *(void *)(v0 + 40));
    uint64_t v4 = (uint64_t (__cdecl *)())((char *)&dword_1016390C0 + dword_1016390C0);
    os_log_type_t v3 = (void *)swift_task_alloc();
    *(void *)(v0 + 192) = v3;
    *os_log_type_t v3 = v0;
    v3[1] = sub_100E9D8F4;
    return v4();
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_100E9D8F4(uint64_t a1)
{
  uint64_t v2 = *(void *)(*(void *)v1 + 160);
  *(void *)(*(void *)v1 + 200) = a1;
  swift_task_dealloc();
  return _swift_task_switch(sub_100E9DA0C, v2, 0);
}

uint64_t sub_100E9DA0C()
{
  uint64_t v1 = (uint64_t)(v0 + 2);
  if (v0[25])
  {
    uint64_t v2 = v0[20];
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v1);
    v0[15] = type metadata accessor for PeerTrustService();
    v0[16] = sub_100EB0380(&qword_1016616B8, v3, (void (*)(uint64_t))type metadata accessor for PeerTrustService);
    v0[12] = v2;
    swift_retain();
    uint64_t v4 = (void *)swift_task_alloc();
    v0[26] = v4;
    *uint64_t v4 = v0;
    v4[1] = sub_100E9DBA4;
    uint64_t v5 = v0[23];
    return sub_100CCEB30(v5, (uint64_t)(v0 + 12));
  }
  else
  {
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v1);
    sub_10001CEC8();
    swift_allocError();
    *uint64_t v7 = 0xD00000000000002BLL;
    v7[1] = 0x80000001013F8980;
    swift_willThrow();
    swift_task_dealloc();
    uint64_t v8 = (uint64_t (*)(void))v0[1];
    return v8();
  }
}

uint64_t sub_100E9DBA4()
{
  uint64_t v2 = *(void **)v1;
  *(void *)(*(void *)v1 + 216) = v0;
  swift_task_dealloc();
  if (v0)
  {
    uint64_t v3 = v2[20];
    uint64_t v4 = sub_100E9DD54;
  }
  else
  {
    uint64_t v5 = (uint64_t)(v2 + 12);
    uint64_t v7 = v2[22];
    uint64_t v6 = v2[23];
    uint64_t v9 = v2 + 20;
    uint64_t v8 = v2[20];
    (*(void (**)(uint64_t, void))(v7 + 8))(v6, v9[1]);
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v5);
    uint64_t v4 = sub_100E9DCE4;
    uint64_t v3 = v8;
  }
  return _swift_task_switch(v4, v3, 0);
}

uint64_t sub_100E9DCE4()
{
  swift_release();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_100E9DD54()
{
  swift_release();
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v0 + 96);
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_100E9DDCC(uint64_t a1)
{
  *(void *)(v2 + 64) = a1;
  *(void *)(v2 + 72) = v1;
  return _swift_task_switch(sub_100E9DDEC, a1, 0);
}

uint64_t sub_100E9DDEC()
{
  *(void *)(v0 + 80) = *(void *)(*(void *)(v0 + 64) + 136);
  swift_retain();
  return _swift_task_switch(sub_100E9DE60, 0, 0);
}

uint64_t sub_100E9DE60()
{
  uint64_t v1 = v0[10];
  uint64_t v2 = v0[8];
  uint64_t v3 = (void *)swift_task_alloc();
  v0[11] = v3;
  v3[2] = v1;
  v3[3] = sub_10008DDF8;
  v3[4] = v2;
  uint64_t v4 = (void *)swift_task_alloc();
  v0[12] = v4;
  uint64_t v5 = sub_10000588C(&qword_101639F18);
  *uint64_t v4 = v0;
  v4[1] = sub_100E9DF7C;
  return withCheckedContinuation<A>(isolation:function:_:)(v0 + 2, 0, 0, 0xD000000000000012, 0x80000001013F1870, sub_10059EE64, v3, v5);
}

uint64_t sub_100E9DF7C()
{
  uint64_t v1 = *v0;
  uint64_t v2 = *(void *)(*v0 + 72);
  swift_task_dealloc();
  swift_release();
  swift_task_dealloc();
  *(void *)(v1 + 104) = *(void *)(v1 + 16);
  return _swift_task_switch(sub_100E9E0EC, v2, 0);
}

uint64_t sub_100E9E0EC()
{
  v0[14] = *(void *)(v0[13] + 16);
  swift_bridgeObjectRelease();
  if (qword_101636CD8 != -1) {
    swift_once();
  }
  v0[15] = qword_10170E390;
  return _swift_task_switch(sub_100E9E198, 0, 0);
}

uint64_t sub_100E9E198()
{
  swift_retain();
  uint64_t v1 = (void *)swift_task_alloc();
  *(void *)(v0 + 128) = v1;
  *uint64_t v1 = v0;
  v1[1] = sub_100E9E260;
  uint64_t v2 = *(void *)(v0 + 120);
  return unsafeBlocking<A>(_:)(v0 + 24, sub_10001D704, v2, &type metadata for Configuration);
}

uint64_t sub_100E9E260()
{
  swift_task_dealloc();
  swift_release();
  return _swift_task_switch(sub_100E9E378, 0, 0);
}

uint64_t sub_100E9E378()
{
  uint64_t v1 = v0[9];
  v0[17] = v0[3];
  return _swift_task_switch(sub_100E9E39C, v1, 0);
}

uint64_t sub_100E9E39C()
{
  unint64_t v1 = v0[14];
  unint64_t v2 = sub_1010AC1C0(v0[17]);
  swift_bridgeObjectRelease();
  if (v1 >= v2)
  {
    if (qword_101636888 != -1) {
      swift_once();
    }
    uint64_t v4 = type metadata accessor for Logger();
    sub_100010324(v4, (uint64_t)qword_10170D788);
    uint64_t v5 = Logger.logObject.getter();
    os_log_type_t v6 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v5, v6))
    {
      uint64_t v7 = v0[14];
      uint64_t v8 = swift_slowAlloc();
      *(_DWORD *)uint64_t v8 = 134218240;
      v0[6] = v7;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v8 + 12) = 2048;
      v0[7] = v2;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      _os_log_impl((void *)&_mh_execute_header, v5, v6, "BeaconSharingService: cannot create new peer trust. existingTrusts: %ld >= maxShareMembers: %lu.", (uint8_t *)v8, 0x16u);
      swift_slowDealloc();
    }

    type metadata accessor for SPBeaconSharingError(0);
    v0[5] = 9;
    sub_1004A0BC8((uint64_t)_swiftEmptyArrayStorage);
    sub_100EB0380((unint64_t *)&qword_1016385F8, 255, type metadata accessor for SPBeaconSharingError);
    _BridgedStoredNSError.init(_:userInfo:)();
    swift_willThrow();
    uint64_t v3 = (uint64_t (*)(void))v0[1];
  }
  else
  {
    uint64_t v3 = (uint64_t (*)(void))v0[1];
  }
  return v3();
}

uint64_t sub_100E9E5CC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v4[4] = a3;
  v4[5] = v3;
  v4[2] = a1;
  v4[3] = a2;
  uint64_t v5 = type metadata accessor for UUID();
  v4[6] = v5;
  v4[7] = *(void *)(v5 - 8);
  v4[8] = swift_task_alloc();
  v4[9] = type metadata accessor for PeerCommunicationIdentifier();
  v4[10] = swift_task_alloc();
  v4[11] = swift_task_alloc();
  sub_10000588C((uint64_t *)&unk_1016607D0);
  v4[12] = swift_task_alloc();
  return _swift_task_switch(sub_100E9E700, v3, 0);
}

uint64_t sub_100E9E700()
{
  sub_100ECF654();
  uint64_t v4 = (void *)sub_100ECF4F0(v1, v2, v3);
  swift_bridgeObjectRelease();
  NSString v5 = [v4 destination];

  if (!v5)
  {
    static String._unconditionallyBridgeFromObjectiveC(_:)();
    NSString v5 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
  }
  id v6 = [v5 _stripPotentialTokenURIWithToken:0];

  if (v6)
  {
    uint64_t v7 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v9 = v8;

    v0[13] = v7;
    v0[14] = v9;
    swift_bridgeObjectRetain();
    _s12searchpartyd20MessagingDestinationV6stringACSgSS_tcfC_0();
    v0[15] = v11;
    v0[16] = v12;
    if (v12)
    {
      uint64_t v13 = v11;
      uint64_t v14 = v12;
      v0[17] = v10;
      v15 = (void *)swift_task_alloc();
      v0[18] = v15;
      void *v15 = v0;
      v15[1] = sub_100E9E904;
      return sub_100EA2DF0((uint64_t)v15, v13, v14);
    }
    swift_bridgeObjectRelease();
  }
  sub_100EAF964();
  swift_allocError();
  unsigned char *v17 = 3;
  swift_willThrow();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  v18 = (uint64_t (*)(void))v0[1];
  return v18();
}

uint64_t sub_100E9E904(uint64_t a1)
{
  uint64_t v3 = (void *)*v2;
  v3[19] = a1;
  swift_task_dealloc();
  if (v1)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v4 = (uint64_t (*)(void))v3[1];
    return v4();
  }
  else
  {
    uint64_t v6 = v3[5];
    return _swift_task_switch(sub_100E9EA80, v6, 0);
  }
}

uint64_t sub_100E9EA80()
{
  uint64_t v1 = *(void *)(v0 + 152);
  uint64_t v2 = *(void *)(v1 + 16);
  uint64_t v3 = type metadata accessor for OwnerPeerTrust();
  uint64_t v4 = *(void *)(v3 - 8);
  if (v2)
  {
    sub_100EB0138(v1+ ((*(unsigned __int8 *)(*(void *)(v3 - 8) + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(v3 - 8) + 80)), *(void *)(v0 + 96), (uint64_t (*)(void))type metadata accessor for OwnerPeerTrust);
    uint64_t v5 = 0;
  }
  else
  {
    uint64_t v5 = 1;
  }
  uint64_t v6 = *(void *)(v0 + 96);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v4 + 56))(v6, v5, 1, v3);
  swift_bridgeObjectRelease();
  *(void *)(v0 + 160) = v3;
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v4 + 48))(v6, 1, v3) == 1)
  {
    sub_10001DAB4(*(void *)(v0 + 96), (uint64_t *)&unk_1016607D0);
    uint64_t v7 = swift_task_alloc();
    *(void *)(v0 + 168) = v7;
    *(void *)uint64_t v7 = v0;
    *(void *)(v7 + 8) = sub_100E9ECB4;
    long long v8 = *(_OWORD *)(v0 + 32);
    *(_OWORD *)(v7 + 64) = v8;
    return _swift_task_switch(sub_100E9DDEC, v8, 0);
  }
  else
  {
    uint64_t v9 = *(void *)(v0 + 96);
    uint64_t v10 = *(void *)(v0 + 16);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    sub_100EB0318(v9, v10, (uint64_t (*)(void))type metadata accessor for OwnerPeerTrust);
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v11 = *(uint64_t (**)(void))(v0 + 8);
    return v11();
  }
}

uint64_t sub_100E9ECB4()
{
  uint64_t v2 = *v1;
  *(void *)(v2 + 176) = v0;
  swift_task_dealloc();
  if (v0)
  {
    uint64_t v3 = *(void *)(v2 + 40);
    return _swift_task_switch(sub_100E9F650, v3, 0);
  }
  else
  {
    uint64_t v4 = *(void *)(v2 + 128);
    uint64_t v9 = (uint64_t (*)(char, uint64_t, uint64_t))((char *)&dword_10165CF98 + dword_10165CF98);
    char v5 = *(unsigned char *)(v2 + 136);
    uint64_t v6 = (void *)swift_task_alloc();
    *(void *)(v2 + 184) = v6;
    *uint64_t v6 = v2;
    v6[1] = sub_100E9EE50;
    uint64_t v7 = *(void *)(v2 + 120);
    return v9(v5, v7, v4);
  }
}

uint64_t sub_100E9EE50(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = (void *)*v3;
  char v5 = (void *)*v3;
  v5[24] = a1;
  v5[25] = a2;
  v5[26] = v2;
  swift_task_dealloc();
  uint64_t v6 = v4[5];
  if (v2) {
    uint64_t v7 = sub_100E9F184;
  }
  else {
    uint64_t v7 = sub_100E9EF88;
  }
  return _swift_task_switch(v7, v6, 0);
}

uint64_t sub_100E9EF88()
{
  if (*(void *)(v0 + 200))
  {
    return _swift_task_switch(sub_100E9F0A4, 0, 0);
  }
  else
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    sub_100EAF964();
    swift_allocError();
    *uint64_t v1 = 1;
    swift_willThrow();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v2 = *(uint64_t (**)(void))(v0 + 8);
    return v2();
  }
}

uint64_t sub_100E9F0A4()
{
  if (qword_1016368C0 != -1) {
    swift_once();
  }
  uint64_t v1 = *(void *)(v0 + 128);
  char v2 = *(unsigned char *)(v0 + 136);
  uint64_t v3 = (void *)swift_task_alloc();
  *(void *)(v0 + 216) = v3;
  *uint64_t v3 = v0;
  v3[1] = sub_100E9F224;
  uint64_t v4 = *(void *)(v0 + 120);
  return sub_10127B8C8(v2, v4, v1);
}

uint64_t sub_100E9F184()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_100E9F224(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = (void *)*v3;
  char v5 = (void *)*v3;
  v5[28] = a1;
  v5[29] = a2;
  v5[30] = v2;
  swift_task_dealloc();
  uint64_t v6 = v4[5];
  if (v2) {
    uint64_t v7 = sub_100E9F5A4;
  }
  else {
    uint64_t v7 = sub_100E9F35C;
  }
  return _swift_task_switch(v7, v6, 0);
}

uint64_t sub_100E9F35C()
{
  uint64_t v23 = v0;
  uint64_t v1 = *(void *)(v0 + 232);
  if (v1)
  {
    uint64_t v2 = *(void *)(v0 + 224);
    uint64_t v3 = *(void *)(v0 + 200);
    uint64_t v4 = *(int **)(v0 + 160);
    uint64_t v5 = *(void *)(v0 + 136);
    long long v6 = *(_OWORD *)(v0 + 120);
    uint64_t v7 = *(void *)(v0 + 104);
    uint64_t v21 = *(void *)(v0 + 112);
    uint64_t v9 = *(void *)(v0 + 80);
    uint64_t v8 = *(void *)(v0 + 88);
    uint64_t v10 = *(void *)(v0 + 64);
    uint64_t v11 = *(void *)(v0 + 48);
    uint64_t v12 = *(void *)(v0 + 56);
    uint64_t v13 = *(char **)(v0 + 16);
    *(void *)uint64_t v8 = *(void *)(v0 + 192);
    *(void *)(v8 + 8) = v3;
    *(unsigned char *)(v8 + 16) = v5;
    *(_OWORD *)(v8 + 24) = v6;
    *(void *)(v8 + 40) = v2;
    *(void *)(v8 + 48) = v1;
    swift_storeEnumTagMultiPayload();
    UUID.init()();
    sub_100EB0138(v8, v9, (uint64_t (*)(void))type metadata accessor for PeerCommunicationIdentifier);
    sub_100D272C4(v22);
    sub_100EB01A0(v8, (uint64_t (*)(void))type metadata accessor for PeerCommunicationIdentifier);
    uint64_t v14 = v22[0];
    uint64_t v15 = v22[1];
    *(_OWORD *)uint64_t v13 = xmmword_101348180;
    (*(void (**)(char *, uint64_t, uint64_t))(v12 + 32))(&v13[v4[5]], v10, v11);
    v13[v4[6]] = 1;
    sub_100EB0318(v9, (uint64_t)&v13[v4[7]], (uint64_t (*)(void))type metadata accessor for PeerCommunicationIdentifier);
    v16 = &v13[v4[8]];
    *(void *)v16 = v7;
    *((void *)v16 + 1) = v21;
    v17 = (uint64_t *)&v13[v4[9]];
    uint64_t *v17 = v14;
    v17[1] = v15;
    v13[v4[10]] = 0;
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
  }
  else
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    sub_100EAF964();
    swift_allocError();
    *uint64_t v19 = 4;
    swift_willThrow();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
  }
  v18 = *(uint64_t (**)(void))(v0 + 8);
  return v18();
}

uint64_t sub_100E9F5A4()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_100E9F650()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_100E9F6F0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v4[12] = a3;
  v4[13] = v3;
  v4[10] = a1;
  v4[11] = a2;
  uint64_t v5 = type metadata accessor for UUID();
  v4[14] = v5;
  v4[15] = *(void *)(v5 - 8);
  v4[16] = swift_task_alloc();
  v4[17] = type metadata accessor for PeerCommunicationIdentifier();
  v4[18] = swift_task_alloc();
  v4[19] = swift_task_alloc();
  sub_10000588C((uint64_t *)&unk_1016607D0);
  v4[20] = swift_task_alloc();
  return _swift_task_switch(sub_100E9F824, v3, 0);
}

uint64_t sub_100E9F824()
{
  sub_100ECF654();
  uint64_t v4 = (void *)sub_100ECF4F0(v1, v2, v3);
  swift_bridgeObjectRelease();
  NSString v5 = [v4 destination];

  if (!v5)
  {
    static String._unconditionallyBridgeFromObjectiveC(_:)();
    NSString v5 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
  }
  id v6 = [v5 _stripPotentialTokenURIWithToken:0];

  if (v6)
  {
    uint64_t v7 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v9 = v8;

    v0[21] = v7;
    v0[22] = v9;
    swift_bridgeObjectRetain();
    _s12searchpartyd20MessagingDestinationV6stringACSgSS_tcfC_0();
    v0[23] = v11;
    v0[24] = v12;
    if (v12)
    {
      uint64_t v13 = v11;
      uint64_t v14 = v12;
      v0[25] = v10;
      uint64_t v15 = (void *)swift_task_alloc();
      v0[26] = v15;
      void *v15 = v0;
      v15[1] = sub_100E9FA28;
      return sub_100EA2DF0((uint64_t)v15, v13, v14);
    }
    swift_bridgeObjectRelease();
  }
  sub_100EAF964();
  swift_allocError();
  unsigned char *v17 = 3;
  swift_willThrow();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  v18 = (uint64_t (*)(void))v0[1];
  return v18();
}

uint64_t sub_100E9FA28(uint64_t a1)
{
  uint64_t v3 = (void *)*v2;
  v3[27] = a1;
  swift_task_dealloc();
  if (v1)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v4 = (uint64_t (*)(void))v3[1];
    return v4();
  }
  else
  {
    uint64_t v6 = v3[13];
    return _swift_task_switch(sub_100E9FBA4, v6, 0);
  }
}

uint64_t sub_100E9FBA4()
{
  uint64_t v1 = *(void *)(v0 + 216);
  uint64_t v2 = *(void *)(v1 + 16);
  uint64_t v3 = type metadata accessor for OwnerPeerTrust();
  uint64_t v4 = *(void *)(v3 - 8);
  if (v2)
  {
    sub_100EB0138(v1+ ((*(unsigned __int8 *)(*(void *)(v3 - 8) + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(v3 - 8) + 80)), *(void *)(v0 + 160), (uint64_t (*)(void))type metadata accessor for OwnerPeerTrust);
    uint64_t v5 = 0;
  }
  else
  {
    uint64_t v5 = 1;
  }
  uint64_t v6 = *(void *)(v0 + 160);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v4 + 56))(v6, v5, 1, v3);
  swift_bridgeObjectRelease();
  *(void *)(v0 + 224) = v3;
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v4 + 48))(v6, 1, v3) == 1)
  {
    sub_10001DAB4(*(void *)(v0 + 160), (uint64_t *)&unk_1016607D0);
    uint64_t v7 = swift_task_alloc();
    *(void *)(v0 + 232) = v7;
    *(void *)uint64_t v7 = v0;
    *(void *)(v7 + 8) = sub_100E9FDD8;
    long long v8 = *(_OWORD *)(v0 + 96);
    *(_OWORD *)(v7 + 64) = v8;
    return _swift_task_switch(sub_100E9DDEC, v8, 0);
  }
  else
  {
    uint64_t v9 = *(void *)(v0 + 160);
    uint64_t v10 = *(void *)(v0 + 80);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    sub_100EB0318(v9, v10, (uint64_t (*)(void))type metadata accessor for OwnerPeerTrust);
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v11 = *(uint64_t (**)(void))(v0 + 8);
    return v11();
  }
}

uint64_t sub_100E9FDD8()
{
  uint64_t v2 = *v1;
  *(void *)(*v1 + 240) = v0;
  swift_task_dealloc();
  if (v0)
  {
    uint64_t v3 = *(void *)(v2 + 104);
    uint64_t v4 = sub_100EA093C;
  }
  else
  {
    uint64_t v4 = sub_100E9FEF4;
    uint64_t v3 = 0;
  }
  return _swift_task_switch(v4, v3, 0);
}

uint64_t sub_100E9FEF4()
{
  if (qword_1016368C0 != -1) {
    swift_once();
  }
  uint64_t v1 = *(void *)(v0 + 192);
  char v2 = *(unsigned char *)(v0 + 200);
  uint64_t v3 = (void *)swift_task_alloc();
  *(void *)(v0 + 248) = v3;
  *uint64_t v3 = v0;
  v3[1] = sub_100E9FFD4;
  uint64_t v4 = *(void *)(v0 + 184);
  return sub_10127B8C8(v2, v4, v1);
}

uint64_t sub_100E9FFD4(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = (void *)*v3;
  v5[2] = v3;
  v5[3] = a1;
  v5[4] = a2;
  v5[5] = v2;
  v5[32] = v2;
  swift_task_dealloc();
  if (v2)
  {
    uint64_t v6 = sub_100EA0314;
    uint64_t v7 = 0;
  }
  else
  {
    uint64_t v7 = v5[13];
    v5[33] = a2;
    uint64_t v6 = sub_100EA0110;
  }
  return _swift_task_switch(v6, v7, 0);
}

uint64_t sub_100EA0110()
{
  uint64_t v20 = v0;
  uint64_t v1 = *(void *)(v0 + 264);
  if (v1)
  {
    uint64_t v2 = *(void *)(v0 + 24);
    uint64_t v3 = *(int **)(v0 + 224);
    long long v4 = *(_OWORD *)(v0 + 184);
    uint64_t v5 = *(void *)(v0 + 168);
    uint64_t v18 = *(void *)(v0 + 176);
    uint64_t v7 = *(void *)(v0 + 144);
    uint64_t v6 = *(void *)(v0 + 152);
    uint64_t v8 = *(void *)(v0 + 128);
    uint64_t v9 = *(void *)(v0 + 112);
    uint64_t v10 = *(void *)(v0 + 120);
    uint64_t v11 = *(char **)(v0 + 80);
    *(unsigned char *)uint64_t v6 = *(void *)(v0 + 200);
    *(_OWORD *)(v6 + 8) = v4;
    *(void *)(v6 + 24) = v2;
    *(void *)(v6 + 32) = v1;
    swift_storeEnumTagMultiPayload();
    UUID.init()();
    sub_100EB0138(v6, v7, (uint64_t (*)(void))type metadata accessor for PeerCommunicationIdentifier);
    sub_100D272C4(v19);
    sub_100EB01A0(v6, (uint64_t (*)(void))type metadata accessor for PeerCommunicationIdentifier);
    uint64_t v12 = v19[0];
    uint64_t v13 = v19[1];
    *(_OWORD *)uint64_t v11 = xmmword_101348180;
    (*(void (**)(char *, uint64_t, uint64_t))(v10 + 32))(&v11[v3[5]], v8, v9);
    v11[v3[6]] = 1;
    sub_100EB0318(v7, (uint64_t)&v11[v3[7]], (uint64_t (*)(void))type metadata accessor for PeerCommunicationIdentifier);
    uint64_t v14 = &v11[v3[8]];
    *(void *)uint64_t v14 = v5;
    *((void *)v14 + 1) = v18;
    uint64_t v15 = (uint64_t *)&v11[v3[9]];
    uint64_t *v15 = v12;
    v15[1] = v13;
    v11[v3[10]] = 0;
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    v16 = *(uint64_t (**)(void))(v0 + 8);
    return v16();
  }
  else
  {
    return _swift_task_switch(sub_100EA0418, 0, 0);
  }
}

uint64_t sub_100EA0314()
{
  uint64_t v1 = *(void *)(v0 + 104);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return _swift_task_switch(sub_100EA038C, v1, 0);
}

uint64_t sub_100EA038C()
{
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_100EA0418()
{
  uint64_t v1 = *(void *)(v0 + 192);
  char v2 = *(unsigned char *)(v0 + 200);
  uint64_t v3 = (void *)swift_task_alloc();
  *(void *)(v0 + 272) = v3;
  *uint64_t v3 = v0;
  v3[1] = sub_100EA04C8;
  uint64_t v4 = *(void *)(v0 + 184);
  return sub_10127BD0C(v2, v4, v1);
}

uint64_t sub_100EA04C8(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = (void *)*v3;
  v5[6] = v3;
  v5[7] = a1;
  v5[8] = a2;
  v5[9] = v2;
  v5[35] = v2;
  swift_task_dealloc();
  if (v2)
  {
    uint64_t v6 = sub_100EA0838;
    uint64_t v7 = 0;
  }
  else
  {
    uint64_t v7 = v5[13];
    v5[36] = a2;
    uint64_t v6 = sub_100EA0604;
  }
  return _swift_task_switch(v6, v7, 0);
}

uint64_t sub_100EA0604()
{
  uint64_t v21 = v0;
  uint64_t v1 = *(void *)(v0 + 288);
  if (v1)
  {
    uint64_t v2 = *(void *)(v0 + 56);
    uint64_t v3 = *(int **)(v0 + 224);
    long long v4 = *(_OWORD *)(v0 + 184);
    uint64_t v5 = *(void *)(v0 + 168);
    uint64_t v19 = *(void *)(v0 + 176);
    uint64_t v7 = *(void *)(v0 + 144);
    uint64_t v6 = *(void *)(v0 + 152);
    uint64_t v8 = *(void *)(v0 + 128);
    uint64_t v9 = *(void *)(v0 + 112);
    uint64_t v10 = *(void *)(v0 + 120);
    uint64_t v11 = *(char **)(v0 + 80);
    *(unsigned char *)uint64_t v6 = *(void *)(v0 + 200);
    *(_OWORD *)(v6 + 8) = v4;
    *(void *)(v6 + 24) = v2;
    *(void *)(v6 + 32) = v1;
    swift_storeEnumTagMultiPayload();
    UUID.init()();
    sub_100EB0138(v6, v7, (uint64_t (*)(void))type metadata accessor for PeerCommunicationIdentifier);
    sub_100D272C4(v20);
    sub_100EB01A0(v6, (uint64_t (*)(void))type metadata accessor for PeerCommunicationIdentifier);
    uint64_t v12 = v20[0];
    uint64_t v13 = v20[1];
    *(_OWORD *)uint64_t v11 = xmmword_101348180;
    (*(void (**)(char *, uint64_t, uint64_t))(v10 + 32))(&v11[v3[5]], v8, v9);
    v11[v3[6]] = 1;
    sub_100EB0318(v7, (uint64_t)&v11[v3[7]], (uint64_t (*)(void))type metadata accessor for PeerCommunicationIdentifier);
    uint64_t v14 = &v11[v3[8]];
    *(void *)uint64_t v14 = v5;
    *((void *)v14 + 1) = v19;
    uint64_t v15 = (uint64_t *)&v11[v3[9]];
    uint64_t *v15 = v12;
    v15[1] = v13;
    v11[v3[10]] = 0;
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
  }
  else
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    sub_100EAF964();
    swift_allocError();
    unsigned char *v17 = 4;
    swift_willThrow();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
  }
  v16 = *(uint64_t (**)(void))(v0 + 8);
  return v16();
}

uint64_t sub_100EA0838()
{
  uint64_t v1 = *(void *)(v0 + 104);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return _swift_task_switch(sub_100EA08B0, v1, 0);
}

uint64_t sub_100EA08B0()
{
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_100EA093C()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_100EA09DC(uint64_t a1, char a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  *(void *)(v8 + 96) = v12;
  *(void *)(v8 + 104) = v7;
  *(void *)(v8 + 80) = a7;
  *(void *)(v8 + 88) = v11;
  *(void *)(v8 + 64) = a5;
  *(void *)(v8 + 72) = a6;
  *(void *)(v8 + 48) = a3;
  *(void *)(v8 + 56) = a4;
  *(unsigned char *)(v8 + 240) = a2;
  *(void *)(v8 + 40) = a1;
  *(void *)(v8 + 112) = type metadata accessor for PeerCommunicationIdentifier();
  *(void *)(v8 + 120) = swift_task_alloc();
  return _swift_task_switch(sub_100EA0A8C, v7, 0);
}

uint64_t sub_100EA0A8C()
{
  NSString v1 = String._bridgeToObjectiveC()();
  id v2 = [v1 _stripPotentialTokenURIWithToken:0];

  if (v2
    && (static String._unconditionallyBridgeFromObjectiveC(_:)(),
        v2,
        _s12searchpartyd20MessagingDestinationV6stringACSgSS_tcfC_0(),
        v0[16] = v4,
        (v0[17] = v5) != 0))
  {
    v0[18] = v3;
    return _swift_task_switch(sub_100EA0BBC, 0, 0);
  }
  else
  {
    sub_100EAF964();
    swift_allocError();
    *uint64_t v6 = 3;
    swift_willThrow();
    swift_task_dealloc();
    uint64_t v7 = (uint64_t (*)(void))v0[1];
    return v7();
  }
}

uint64_t sub_100EA0BBC()
{
  if (qword_1016368C0 != -1) {
    swift_once();
  }
  uint64_t v1 = *(void *)(v0 + 136);
  char v2 = *(unsigned char *)(v0 + 144);
  uint64_t v3 = (void *)swift_task_alloc();
  *(void *)(v0 + 152) = v3;
  *uint64_t v3 = v0;
  v3[1] = sub_100EA0C9C;
  uint64_t v4 = *(void *)(v0 + 128);
  return sub_10127B8C8(v2, v4, v1);
}

uint64_t sub_100EA0C9C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = (void *)*v3;
  uint64_t v5 = (void *)*v3;
  v5[20] = a1;
  v5[21] = a2;
  v5[22] = v2;
  swift_task_dealloc();
  uint64_t v6 = v4[13];
  if (v2) {
    uint64_t v7 = sub_100EA1168;
  }
  else {
    uint64_t v7 = sub_100EA0DD4;
  }
  return _swift_task_switch(v7, v6, 0);
}

uint64_t sub_100EA0DD4()
{
  uint64_t v1 = *(void *)(v0 + 168);
  if (v1)
  {
    switch(*(unsigned char *)(v0 + 240))
    {
      case 2:
        uint64_t v6 = *(void *)(v0 + 160);
        long long v7 = *(_OWORD *)(v0 + 128);
        uint64_t v8 = *(void *)(v0 + 120);
        *(unsigned char *)uint64_t v8 = *(void *)(v0 + 144);
        *(_OWORD *)(v8 + 8) = v7;
        *(void *)(v8 + 24) = v6;
        *(void *)(v8 + 32) = v1;
        swift_storeEnumTagMultiPayload();
        uint64_t v9 = qword_101636948;
        swift_bridgeObjectRetain();
        if (v9 != -1) {
          swift_once();
        }
        if (qword_10170DA90 == *(void *)(v0 + 56) && qword_10170DA98 == *(void *)(v0 + 64))
        {
          uint64_t v10 = *(void **)(v0 + 136);
LABEL_18:
          uint64_t v14 = (void *)sub_100ECF4F0(*(unsigned char *)(v0 + 144), *(void *)(v0 + 128), v10);
          swift_bridgeObjectRelease();
          id v15 = [v14 destination];

          uint64_t v16 = static String._unconditionallyBridgeFromObjectiveC(_:)();
          uint64_t v18 = v17;

          goto LABEL_20;
        }
        char v13 = _stringCompareWithSmolCheck(_:_:expecting:)();
        uint64_t v10 = *(void **)(v0 + 136);
        if (v13) {
          goto LABEL_18;
        }
        swift_bridgeObjectRelease();
        swift_bridgeObjectRetain();
        uint64_t v16 = *(void *)(v0 + 56);
        uint64_t v18 = *(void *)(v0 + 64);
LABEL_20:
        uint64_t v19 = *(void *)(v0 + 120);
        uint64_t v21 = *(void *)(v0 + 72);
        unint64_t v20 = *(void *)(v0 + 80);
        uint64_t v23 = *(_OWORD **)(v0 + 40);
        uint64_t v22 = *(void *)(v0 + 48);
        uint64_t v24 = (int *)type metadata accessor for MemberPeerTrust();
        v25 = (char *)v23 + v24[5];
        uint64_t v26 = type metadata accessor for UUID();
        (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v26 - 8) + 16))(v25, v22, v26);
        sub_100EB0318(v19, (uint64_t)v23 + v24[7], (uint64_t (*)(void))type metadata accessor for PeerCommunicationIdentifier);
        *uint64_t v23 = xmmword_101348180;
        *((unsigned char *)v23 + v24[6]) = 1;
        v27 = (uint64_t *)((char *)v23 + v24[8]);
        uint64_t *v27 = v16;
        v27[1] = v18;
        v28 = (uint64_t *)((char *)v23 + v24[9]);
        uint64_t *v28 = v21;
        v28[1] = v20;
        sub_1000361E0(v21, v20);
        swift_task_dealloc();
        uint64_t v4 = *(uint64_t (**)(void))(v0 + 8);
        break;
      case 4:
        uint64_t v11 = (void *)swift_task_alloc();
        *(void *)(v0 + 184) = v11;
        uint64_t v12 = sub_10000588C(&qword_10165CFA0);
        *(void *)(v0 + 192) = v12;
        void *v11 = v0;
        v11[1] = sub_100EA11D4;
        return unsafeBlocking<A>(_:)(v0 + 16, sub_100EA1914, 0, v12);
      default:
        swift_bridgeObjectRelease();
        char v2 = 5;
        goto LABEL_5;
    }
  }
  else
  {
    char v2 = 3;
LABEL_5:
    swift_bridgeObjectRelease();
    sub_100EAF964();
    swift_allocError();
    *uint64_t v3 = v2;
    swift_willThrow();
    swift_task_dealloc();
    uint64_t v4 = *(uint64_t (**)(void))(v0 + 8);
  }
  return v4();
}

uint64_t sub_100EA1168()
{
  swift_bridgeObjectRelease();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_100EA11D4()
{
  uint64_t v2 = *v1;
  *(void *)(*v1 + 200) = v0;
  swift_task_dealloc();
  if (v0)
  {
    uint64_t v3 = *(void *)(v2 + 104);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v4 = sub_100EA1844;
    uint64_t v5 = v3;
  }
  else
  {
    uint64_t v5 = *(void *)(v2 + 104);
    uint64_t v4 = sub_100EA1308;
  }
  return _swift_task_switch(v4, v5, 0);
}

uint64_t sub_100EA1308()
{
  uint64_t v2 = v0[20];
  uint64_t v1 = v0[21];
  uint64_t v3 = v0[2];
  v0[26] = v3;
  v0[4] = v3;
  uint64_t v4 = swift_task_alloc();
  v0[27] = v4;
  *(void *)(v4 + 16) = v2;
  *(void *)(v4 + 24) = v1;
  uint64_t v5 = (void *)swift_task_alloc();
  v0[28] = v5;
  unint64_t v6 = sub_100EB02BC();
  *uint64_t v5 = v0;
  v5[1] = sub_100EA1400;
  uint64_t v7 = v0[24];
  return Sequence.asyncFirst(where:)(v0 + 3, &unk_1016616A8, v4, v7, v6);
}

uint64_t sub_100EA1400()
{
  uint64_t v2 = *v1;
  *(void *)(*v1 + 232) = v0;
  swift_task_dealloc();
  uint64_t v3 = *(void *)(v2 + 104);
  swift_bridgeObjectRelease();
  if (v0)
  {
    swift_bridgeObjectRelease();
    swift_task_dealloc();
    uint64_t v4 = sub_100EA18A8;
  }
  else
  {
    swift_task_dealloc();
    uint64_t v4 = sub_100EA1554;
  }
  return _swift_task_switch(v4, v3, 0);
}

uint64_t sub_100EA1554()
{
  uint64_t v1 = *(void **)(v0 + 24);
  if (!v1
    || (id v2 = [*(id *)(v0 + 24) altDSID], v1, !v2))
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    sub_100EAF964();
    swift_allocError();
    *uint64_t v12 = 3;
    swift_willThrow();
    swift_task_dealloc();
    char v13 = *(uint64_t (**)(void))(v0 + 8);
    goto LABEL_13;
  }
  uint64_t v4 = *(void *)(v0 + 160);
  uint64_t v3 = *(void *)(v0 + 168);
  uint64_t v5 = *(void *)(v0 + 144);
  long long v31 = *(_OWORD *)(v0 + 128);
  uint64_t v6 = *(void *)(v0 + 120);
  uint64_t v7 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v9 = v8;

  *(void *)uint64_t v6 = v7;
  *(void *)(v6 + 8) = v9;
  *(unsigned char *)(v6 + 16) = v5;
  *(_OWORD *)(v6 + 24) = v31;
  *(void *)(v6 + 40) = v4;
  *(void *)(v6 + 48) = v3;
  swift_storeEnumTagMultiPayload();
  uint64_t v10 = qword_101636948;
  swift_bridgeObjectRetain();
  if (v10 != -1) {
    swift_once();
  }
  if (qword_10170DA90 == *(void *)(v0 + 56) && qword_10170DA98 == *(void *)(v0 + 64))
  {
    uint64_t v11 = *(void **)(v0 + 136);
  }
  else
  {
    char v14 = _stringCompareWithSmolCheck(_:_:expecting:)();
    uint64_t v11 = *(void **)(v0 + 136);
    if ((v14 & 1) == 0)
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRetain();
      uint64_t v17 = *(void *)(v0 + 56);
      uint64_t v19 = *(void *)(v0 + 64);
      goto LABEL_12;
    }
  }
  id v15 = (void *)sub_100ECF4F0(*(unsigned char *)(v0 + 144), *(void *)(v0 + 128), v11);
  swift_bridgeObjectRelease();
  id v16 = [v15 destination];

  uint64_t v17 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v19 = v18;

LABEL_12:
  uint64_t v20 = *(void *)(v0 + 120);
  uint64_t v22 = *(void *)(v0 + 72);
  unint64_t v21 = *(void *)(v0 + 80);
  uint64_t v24 = *(_OWORD **)(v0 + 40);
  uint64_t v23 = *(void *)(v0 + 48);
  v25 = (int *)type metadata accessor for MemberPeerTrust();
  uint64_t v26 = (char *)v24 + v25[5];
  uint64_t v27 = type metadata accessor for UUID();
  (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v27 - 8) + 16))(v26, v23, v27);
  sub_100EB0318(v20, (uint64_t)v24 + v25[7], (uint64_t (*)(void))type metadata accessor for PeerCommunicationIdentifier);
  *uint64_t v24 = xmmword_101348180;
  *((unsigned char *)v24 + v25[6]) = 1;
  v28 = (uint64_t *)((char *)v24 + v25[8]);
  uint64_t *v28 = v17;
  v28[1] = v19;
  uint64_t v29 = (uint64_t *)((char *)v24 + v25[9]);
  *uint64_t v29 = v22;
  v29[1] = v21;
  sub_1000361E0(v22, v21);
  swift_task_dealloc();
  char v13 = *(uint64_t (**)(void))(v0 + 8);
LABEL_13:
  return v13();
}

uint64_t sub_100EA1844()
{
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_100EA18A8()
{
  swift_bridgeObjectRelease();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_100EA1914@<X0>(void *a1@<X8>)
{
  return sub_100EAA070(a1);
}

uint64_t sub_100EA1940(void *a1, uint64_t a2, uint64_t a3)
{
  v3[2] = a2;
  v3[3] = a3;
  v3[4] = *a1;
  return _swift_task_switch(sub_100EA1968, 0, 0);
}

uint64_t sub_100EA1968()
{
  id v1 = [*(id *)(v0 + 32) appleID];
  if (v1
    && (id v2 = v1,
        static String._unconditionallyBridgeFromObjectiveC(_:)(),
        v2,
        _s12searchpartyd20MessagingDestinationV6stringACSgSS_tcfC_0(),
        (*(void *)(v0 + 40) = v5) != 0))
  {
    char v6 = v3;
    uint64_t v7 = v4;
    uint64_t v8 = v5;
    if (qword_1016368C0 != -1) {
      swift_once();
    }
    uint64_t v9 = (void *)swift_task_alloc();
    *(void *)(v0 + 48) = v9;
    *uint64_t v9 = v0;
    v9[1] = sub_100EA1ACC;
    return sub_10127B8C8(v6, v7, v8);
  }
  else
  {
    uint64_t v11 = *(uint64_t (**)(void))(v0 + 8);
    return v11(0);
  }
}

uint64_t sub_100EA1ACC(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = (void *)*v3;
  v4[7] = a1;
  v4[8] = a2;
  v4[9] = v2;
  swift_task_dealloc();
  if (v2)
  {
    uint64_t v5 = sub_100EA1C90;
  }
  else
  {
    swift_bridgeObjectRelease();
    uint64_t v5 = sub_100EA1BEC;
  }
  return _swift_task_switch(v5, 0, 0);
}

uint64_t sub_100EA1BEC()
{
  uint64_t v1 = v0[8];
  if (v1)
  {
    if (v0[7] == v0[2] && v1 == v0[3]) {
      char v3 = 1;
    }
    else {
      char v3 = _stringCompareWithSmolCheck(_:_:expecting:)();
    }
    swift_bridgeObjectRelease();
  }
  else
  {
    char v3 = 0;
  }
  uint64_t v4 = (uint64_t (*)(void))v0[1];
  return v4(v3 & 1);
}

uint64_t sub_100EA1C90()
{
  swift_bridgeObjectRelease();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1(0);
}

uint64_t sub_100EA1CF8(uint64_t a1, char a2, uint64_t a3, uint64_t a4)
{
  *(void *)(v5 + 160) = a4;
  *(void *)(v5 + 168) = v4;
  *(unsigned char *)(v5 + 368) = a2;
  *(void *)(v5 + 144) = a1;
  *(void *)(v5 + 152) = a3;
  sub_10000588C(&qword_101638CF0);
  *(void *)(v5 + 176) = swift_task_alloc();
  uint64_t v6 = type metadata accessor for UUID();
  *(void *)(v5 + 184) = v6;
  *(void *)(v5 + 192) = *(void *)(v6 - 8);
  *(void *)(v5 + 200) = swift_task_alloc();
  *(void *)(v5 + 208) = swift_task_alloc();
  *(void *)(v5 + 216) = swift_task_alloc();
  *(void *)(v5 + 224) = swift_task_alloc();
  type metadata accessor for PeerTrustAckEnvelopeV1(0);
  *(void *)(v5 + 232) = swift_task_alloc();
  *(void *)(v5 + 240) = swift_task_alloc();
  return _swift_task_switch(sub_100EA1E54, v4, 0);
}

uint64_t sub_100EA1E54()
{
  uint64_t v14 = v0;
  uint64_t v1 = *(void *)(v0 + 232);
  uint64_t v2 = *(void *)(v0 + 240);
  uint64_t v3 = *(void *)(v0 + 184);
  uint64_t v4 = *(void *)(v0 + 192);
  uint64_t v5 = *(void *)(v0 + 144);
  uint64_t v6 = *(void (**)(uint64_t, uint64_t, uint64_t))(v4 + 16);
  *(void *)(v0 + 248) = v6;
  *(void *)(v0 + 256) = (v4 + 16) & 0xFFFFFFFFFFFFLL | 0xE3BA000000000000;
  v6(v2, v5, v3);
  sub_100EB0138(v2, v1, type metadata accessor for PeerTrustAckEnvelopeV1);
  sub_1004F7EE8(0, 1, v1, (uint64_t)v11);
  *(unsigned char *)(v0 + 369) = v11[0];
  *(_OWORD *)(v0 + 264) = v12;
  *(void *)(v0 + 280) = v13;
  uint64_t v7 = qword_1016375E8;
  swift_retain();
  if (v7 != -1) {
    swift_once();
  }
  swift_beginAccess();
  uint64_t result = sub_10001D074((uint64_t)&xmmword_10166E8F0, v0 + 56, (uint64_t *)&unk_101638D30);
  if (*(void *)(v0 + 80))
  {
    sub_10001CEB0((long long *)(v0 + 56), v0 + 16);
    swift_release();
    sub_10001CD44((void *)(v0 + 16), *(void *)(v0 + 40));
    uint64_t v10 = (uint64_t (__cdecl *)())((char *)&dword_1016390C0 + dword_1016390C0);
    uint64_t v9 = (void *)swift_task_alloc();
    *(void *)(v0 + 288) = v9;
    *uint64_t v9 = v0;
    v9[1] = sub_100EA20D8;
    return v10();
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_100EA20D8(uint64_t a1)
{
  uint64_t v2 = *(void *)(*(void *)v1 + 168);
  *(void *)(*(void *)v1 + 296) = a1;
  swift_task_dealloc();
  return _swift_task_switch(sub_100EA21F0, v2, 0);
}

uint64_t sub_100EA21F0()
{
  uint64_t v1 = v0 + 16;
  if (*(void *)(v0 + 296))
  {
    uint64_t v2 = *(void *)(v0 + 152);
    uint64_t v3 = *(void *)(v0 + 160);
    char v4 = *(unsigned char *)(v0 + 368);
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v1);
    sub_10000588C(&qword_10163BAB0);
    uint64_t v5 = swift_allocObject();
    *(void *)(v0 + 304) = v5;
    *(_OWORD *)(v5 + 16) = xmmword_101342130;
    *(unsigned char *)(v5 + 32) = v4;
    *(void *)(v5 + 40) = v2;
    *(void *)(v5 + 48) = v3;
    uint64_t v6 = *(void *)(v0 + 296);
    swift_bridgeObjectRetain();
    return _swift_task_switch(sub_100EA246C, v6, 0);
  }
  else
  {
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v1);
    if (qword_101637148 != -1) {
      swift_once();
    }
    uint64_t v7 = type metadata accessor for Logger();
    sub_100010324(v7, (uint64_t)qword_10170EDD8);
    uint64_t v8 = Logger.logObject.getter();
    os_log_type_t v9 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v8, v9))
    {
      uint64_t v10 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v10 = 0;
      _os_log_impl((void *)&_mh_execute_header, v8, v9, "No IDSTransportService_ItemSharingCrossAccount available!", v10, 2u);
      swift_slowDealloc();
    }
    uint64_t v12 = *(void *)(v0 + 272);
    unint64_t v11 = *(void *)(v0 + 280);
    uint64_t v13 = *(void *)(v0 + 240);

    sub_10001CEC8();
    swift_allocError();
    *uint64_t v14 = 0xD00000000000002BLL;
    v14[1] = 0x80000001013F8980;
    swift_willThrow();
    sub_10001CFB8(v12, v11);
    sub_100EB01A0(v13, type metadata accessor for PeerTrustAckEnvelopeV1);
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v15 = *(uint64_t (**)(void))(v0 + 8);
    return v15();
  }
}

uint64_t sub_100EA246C()
{
  uint64_t v1 = *(void *)(v0 + 296);
  uint64_t v16 = *(void *)(v0 + 304);
  uint64_t v2 = *(void *)(v0 + 280);
  long long v15 = *(_OWORD *)(v0 + 264);
  char v3 = *(unsigned char *)(v0 + 369);
  uint64_t v4 = *(void *)(v0 + 216);
  uint64_t v5 = *(void *)(v0 + 176);
  (*(void (**)(uint64_t, uint64_t, uint64_t, void))(*(void *)(v0 + 192) + 56))(v5, 1, 1, *(void *)(v0 + 184));
  uint64_t v6 = sub_101158790((uint64_t)_swiftEmptyArrayStorage);
  *(void *)(v0 + 312) = v6;
  uint64_t v7 = sub_101158790((uint64_t)_swiftEmptyArrayStorage);
  *(void *)(v0 + 320) = v7;
  UUID.init()();
  uint64_t v8 = sub_100EB0380(&qword_10165C980, 255, (void (*)(uint64_t))type metadata accessor for IDSTransportService_ItemSharingCrossAccount);
  uint64_t v9 = swift_task_alloc();
  *(void *)(v0 + 328) = v9;
  *(void *)(v9 + 16) = v1;
  *(void *)(v9 + 24) = v4;
  *(unsigned char *)(v9 + 32) = v3;
  *(_OWORD *)(v9 + 40) = v15;
  *(void *)(v9 + 56) = v2;
  *(void *)(v9 + 64) = v16;
  *(void *)(v9 + 72) = v5;
  *(void *)(v9 + 80) = 0;
  *(_WORD *)(v9 + 88) = 1;
  *(void *)(v9 + 96) = v6;
  *(void *)(v9 + 104) = v7;
  *(void *)(v9 + 112) = 0;
  *(void *)(v9 + 120) = 0;
  uint64_t v10 = (void *)swift_task_alloc();
  *(void *)(v0 + 336) = v10;
  *uint64_t v10 = v0;
  v10[1] = sub_100EA264C;
  uint64_t v11 = *(void *)(v0 + 296);
  uint64_t v12 = *(void *)(v0 + 224);
  uint64_t v13 = *(void *)(v0 + 184);
  return withCheckedThrowingContinuation<A>(isolation:function:_:)(v12, v11, v8, 0xD000000000000083, 0x8000000101416CB0, sub_100CD56E0, v9, v13);
}

uint64_t sub_100EA264C()
{
  uint64_t v2 = *v1;
  *(void *)(*v1 + 344) = v0;
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v3 = *(void *)(v2 + 296);
  if (v0) {
    uint64_t v4 = sub_100EA2C44;
  }
  else {
    uint64_t v4 = sub_100EA2790;
  }
  return _swift_task_switch(v4, v3, 0);
}

uint64_t sub_100EA2790()
{
  uint64_t v1 = v0[27];
  uint64_t v2 = v0[23];
  uint64_t v3 = v0[24];
  uint64_t v5 = v0[21];
  uint64_t v4 = v0[22];
  uint64_t v6 = *(void (**)(uint64_t, uint64_t))(v3 + 8);
  v0[44] = v6;
  v0[45] = (v3 + 8) & 0xFFFFFFFFFFFFLL | 0x4F8000000000000;
  v6(v1, v2);
  sub_10001DAB4(v4, &qword_101638CF0);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return _swift_task_switch(sub_100EA2858, v5, 0);
}

uint64_t sub_100EA2858()
{
  v28 = v0;
  if (qword_101637148 != -1) {
    swift_once();
  }
  uint64_t v1 = v0[18];
  uint64_t v2 = (void (*)(uint64_t, uint64_t, uint64_t))v0[31];
  uint64_t v3 = v0[28];
  uint64_t v5 = v0[25];
  uint64_t v4 = v0[26];
  uint64_t v6 = v0[23];
  uint64_t v7 = type metadata accessor for Logger();
  sub_100010324(v7, (uint64_t)qword_10170EDD8);
  v2(v4, v1, v6);
  v2(v5, v3, v6);
  uint64_t v8 = Logger.logObject.getter();
  os_log_type_t type = static os_log_type_t.default.getter();
  BOOL v9 = os_log_type_enabled(v8, type);
  uint64_t v10 = (void (*)(uint64_t, uint64_t))v0[44];
  unint64_t v11 = v0[35];
  uint64_t v12 = v0[30];
  uint64_t v13 = v0[28];
  uint64_t v14 = v0[26];
  uint64_t v25 = v0[25];
  uint64_t v26 = v0[34];
  uint64_t v15 = v0[23];
  if (v9)
  {
    uint64_t v23 = v0[28];
    uint64_t v16 = swift_slowAlloc();
    uint64_t v27 = swift_slowAlloc();
    *(_DWORD *)uint64_t v16 = 141558531;
    v0[15] = 1752392040;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v16 + 12) = 2081;
    sub_100EB0380((unint64_t *)&qword_101638B10, 255, (void (*)(uint64_t))&type metadata accessor for UUID);
    uint64_t v17 = dispatch thunk of CustomStringConvertible.description.getter();
    v0[16] = sub_1008FA0F0(v17, v18, &v27);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    v10(v14, v15);
    *(_WORD *)(v16 + 22) = 2082;
    uint64_t v19 = dispatch thunk of CustomStringConvertible.description.getter();
    v0[17] = sub_1008FA0F0(v19, v20, &v27);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    v10(v25, v15);
    _os_log_impl((void *)&_mh_execute_header, v8, type, "Successfully sent PeerTrustAck message for %{private,mask.hash}s [%{public}s]", (uint8_t *)v16, 0x20u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
    swift_release();
    sub_10001CFB8(v26, v11);

    v10(v23, v15);
  }
  else
  {
    swift_release();
    sub_10001CFB8(v26, v11);

    v10(v25, v15);
    v10(v14, v15);
    v10(v13, v15);
  }
  sub_100EB01A0(v12, type metadata accessor for PeerTrustAckEnvelopeV1);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  unint64_t v21 = (uint64_t (*)(void))v0[1];
  return v21();
}

uint64_t sub_100EA2C44()
{
  uint64_t v2 = v0[21];
  uint64_t v1 = v0[22];
  (*(void (**)(void, void))(v0[24] + 8))(v0[27], v0[23]);
  sub_10001DAB4(v1, &qword_101638CF0);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return _swift_task_switch(sub_100EA2D00, v2, 0);
}

uint64_t sub_100EA2D00()
{
  uint64_t v1 = v0[34];
  unint64_t v2 = v0[35];
  uint64_t v3 = v0[30];
  swift_release();
  sub_10001CFB8(v1, v2);
  sub_100EB01A0(v3, type metadata accessor for PeerTrustAckEnvelopeV1);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v4 = (uint64_t (*)(void))v0[1];
  return v4();
}

uint64_t sub_100EA2DF0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v4[28] = a3;
  v4[29] = v3;
  v4[27] = a2;
  v4[30] = *v3;
  sub_10000588C(&qword_101647FF8);
  v4[31] = swift_task_alloc();
  v4[32] = type metadata accessor for PeerCommunicationIdentifier();
  v4[33] = swift_task_alloc();
  uint64_t v5 = type metadata accessor for OwnerPeerTrust();
  v4[34] = v5;
  v4[35] = *(void *)(v5 - 8);
  v4[36] = swift_task_alloc();
  v4[37] = swift_task_alloc();
  v4[38] = swift_task_alloc();
  return _swift_task_switch(sub_100EA2F58, v3, 0);
}

uint64_t sub_100EA2F58()
{
  uint64_t v1 = qword_1016375E8;
  swift_retain();
  if (v1 != -1) {
    swift_once();
  }
  swift_beginAccess();
  uint64_t result = sub_10001D074((uint64_t)&xmmword_10166E8F0, v0 + 56, (uint64_t *)&unk_101638D30);
  if (*(void *)(v0 + 80))
  {
    sub_10001CEB0((long long *)(v0 + 56), v0 + 16);
    swift_release();
    sub_10001CD44((void *)(v0 + 16), *(void *)(v0 + 40));
    uint64_t v4 = (uint64_t (__cdecl *)())((char *)&dword_1016390D8 + dword_1016390D8);
    uint64_t v3 = (void *)swift_task_alloc();
    *(void *)(v0 + 312) = v3;
    *uint64_t v3 = v0;
    v3[1] = sub_100EA30A8;
    return v4();
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_100EA30A8(uint64_t a1)
{
  uint64_t v2 = *(void *)(*(void *)v1 + 232);
  *(void *)(*(void *)v1 + 320) = a1;
  swift_task_dealloc();
  return _swift_task_switch(sub_100EA31C0, v2, 0);
}

uint64_t sub_100EA31C0()
{
  uint64_t v24 = v0;
  uint64_t v1 = (uint64_t)(v0 + 2);
  if (v0[40])
  {
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v1);
    NSString v2 = String._bridgeToObjectiveC()();
    id v3 = [v2 _stripPotentialTokenURIWithToken:0];

    if (v3
      && (static String._unconditionallyBridgeFromObjectiveC(_:)(),
          v3,
          _s12searchpartyd20MessagingDestinationV6stringACSgSS_tcfC_0(),
          v0[41] = v5,
          (v0[42] = v6) != 0))
    {
      v0[43] = v4;
      uint64_t v7 = v0[40];
      return _swift_task_switch(sub_100EA3628, v7, 0);
    }
    else
    {
      if (qword_101637148 != -1) {
        swift_once();
      }
      uint64_t v8 = type metadata accessor for Logger();
      sub_100010324(v8, (uint64_t)qword_10170EDD8);
      swift_bridgeObjectRetain_n();
      BOOL v9 = Logger.logObject.getter();
      os_log_type_t v10 = static os_log_type_t.error.getter();
      BOOL v11 = os_log_type_enabled(v9, v10);
      unint64_t v12 = v0[28];
      if (v11)
      {
        uint64_t v13 = v0[27];
        uint64_t v14 = (uint8_t *)swift_slowAlloc();
        uint64_t v23 = swift_slowAlloc();
        *(_DWORD *)uint64_t v14 = 136315138;
        swift_bridgeObjectRetain();
        v0[24] = sub_1008FA0F0(v13, v12, &v23);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease_n();
        _os_log_impl((void *)&_mh_execute_header, v9, v10, "Owner peer trusts could not correct destination : %s.", v14, 0xCu);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
      }
      else
      {

        swift_bridgeObjectRelease_n();
      }
      swift_release();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      unint64_t v21 = (uint64_t (*)(void *))v0[1];
      return v21(_swiftEmptyArrayStorage);
    }
  }
  else
  {
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v1);
    if (qword_101637148 != -1) {
      swift_once();
    }
    uint64_t v15 = type metadata accessor for Logger();
    sub_100010324(v15, (uint64_t)qword_10170EDD8);
    uint64_t v16 = Logger.logObject.getter();
    os_log_type_t v17 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v16, v17))
    {
      unint64_t v18 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)unint64_t v18 = 0;
      _os_log_impl((void *)&_mh_execute_header, v16, v17, "No BeaconStoreActor available!", v18, 2u);
      swift_slowDealloc();
    }

    sub_10001CEC8();
    swift_allocError();
    *uint64_t v19 = 0xD000000000000010;
    v19[1] = 0x80000001013F23D0;
    swift_willThrow();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    unint64_t v20 = (uint64_t (*)(void))v0[1];
    return v20();
  }
}

uint64_t sub_100EA3628()
{
  *(void *)(v0 + 352) = *(void *)(*(void *)(v0 + 320) + 136);
  swift_retain();
  return _swift_task_switch(sub_100EA369C, 0, 0);
}

uint64_t sub_100EA369C()
{
  uint64_t v1 = v0[44];
  uint64_t v2 = v0[40];
  id v3 = (void *)swift_task_alloc();
  v0[45] = v3;
  v3[2] = v1;
  v3[3] = sub_10008DDF8;
  v3[4] = v2;
  uint64_t v4 = (void *)swift_task_alloc();
  v0[46] = v4;
  uint64_t v5 = sub_10000588C(&qword_101639F18);
  *uint64_t v4 = v0;
  v4[1] = sub_100EA37B8;
  return withCheckedContinuation<A>(isolation:function:_:)(v0 + 22, 0, 0, 0xD000000000000012, 0x80000001013F1870, sub_100075640, v3, v5);
}

uint64_t sub_100EA37B8()
{
  uint64_t v1 = *v0;
  uint64_t v2 = *(void *)(*v0 + 232);
  swift_task_dealloc();
  swift_release();
  swift_task_dealloc();
  *(void *)(v1 + 376) = *(void *)(v1 + 176);
  return _swift_task_switch(sub_100EA3928, v2, 0);
}

uint64_t sub_100EA3928()
{
  if (qword_101637148 != -1) {
    swift_once();
  }
  uint64_t v1 = type metadata accessor for Logger();
  v0[48] = sub_100010324(v1, (uint64_t)qword_10170EDD8);
  swift_bridgeObjectRetain();
  uint64_t v2 = Logger.logObject.getter();
  os_log_type_t v3 = static os_log_type_t.default.getter();
  BOOL v4 = os_log_type_enabled(v2, v3);
  uint64_t v5 = v0[47];
  if (v4)
  {
    uint64_t v6 = (uint8_t *)swift_slowAlloc();
    *(_DWORD *)uint64_t v6 = 134217984;
    v0[26] = *(void *)(v5 + 16);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v2, v3, "Owner peer trusts found %ld records.", v6, 0xCu);
    swift_slowDealloc();
  }
  else
  {
    swift_bridgeObjectRelease();
  }

  uint64_t v7 = v0[47];
  uint64_t v8 = *(void *)(v7 + 16);
  v0[49] = v8;
  if (v8)
  {
    uint64_t v10 = v0[34];
    uint64_t v9 = v0[35];
    BOOL v11 = (void *)v0[33];
    uint64_t v12 = v7 + ((*(unsigned __int8 *)(v9 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80));
    uint64_t v13 = *(void *)(v9 + 72);
    swift_bridgeObjectRetain();
    uint64_t v14 = _swiftEmptyArrayStorage;
    uint64_t v32 = v13;
    uint64_t v33 = v10;
    while (2)
    {
      uint64_t v15 = v0[38];
      uint64_t v16 = v0[33];
      sub_100EB0138(v12, v15, (uint64_t (*)(void))type metadata accessor for OwnerPeerTrust);
      sub_100EB0138(v15 + *(int *)(v10 + 28), v16, (uint64_t (*)(void))type metadata accessor for PeerCommunicationIdentifier);
      switch(swift_getEnumCaseMultiPayload())
      {
        case 1u:
          sub_100EB01A0(v0[33], (uint64_t (*)(void))type metadata accessor for PeerCommunicationIdentifier);
          goto LABEL_9;
        case 3u:
          char v17 = *(unsigned char *)v0[33];
          uint64_t v18 = v11[1];
          uint64_t v19 = v11[2];
          goto LABEL_17;
        case 4u:
          char v17 = *(unsigned char *)v0[33];
          uint64_t v18 = v11[1];
          uint64_t v19 = v11[2];
          goto LABEL_16;
        case 5u:
          char v17 = *((unsigned char *)v11 + 16);
          uint64_t v18 = v11[3];
          uint64_t v19 = v11[4];
          swift_bridgeObjectRelease();
LABEL_16:
          swift_bridgeObjectRelease();
LABEL_17:
          sub_100EB01A0(v0[38], (uint64_t (*)(void))type metadata accessor for OwnerPeerTrust);
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
            uint64_t v14 = sub_100A6F880(0, v14[2] + 1, 1, v14);
          }
          unint64_t v21 = v14[2];
          unint64_t v20 = v14[3];
          if (v21 >= v20 >> 1) {
            uint64_t v14 = sub_100A6F880((void *)(v20 > 1), v21 + 1, 1, v14);
          }
          v14[2] = v21 + 1;
          uint64_t v22 = &v14[3 * v21];
          *((unsigned char *)v22 + 32) = v17;
          v22[5] = v18;
          v22[6] = v19;
          uint64_t v13 = v32;
          uint64_t v10 = v33;
          goto LABEL_10;
        case 6u:
        case 7u:
          goto LABEL_9;
        default:
          swift_bridgeObjectRelease();
LABEL_9:
          sub_100EB01A0(v0[38], (uint64_t (*)(void))type metadata accessor for OwnerPeerTrust);
LABEL_10:
          v12 += v13;
          if (--v8) {
            continue;
          }
          swift_bridgeObjectRelease();
          break;
      }
      break;
    }
  }
  else
  {
    uint64_t v14 = _swiftEmptyArrayStorage;
  }
  swift_bridgeObjectRetain();
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    uint64_t v14 = sub_100A6F880(0, v14[2] + 1, 1, v14);
  }
  unint64_t v24 = v14[2];
  unint64_t v23 = v14[3];
  if (v24 >= v23 >> 1) {
    uint64_t v14 = sub_100A6F880((void *)(v23 > 1), v24 + 1, 1, v14);
  }
  v0[50] = v14;
  uint64_t v26 = v0[42];
  uint64_t v25 = v0[43];
  uint64_t v27 = v0[41];
  v14[2] = v24 + 1;
  v28 = &v14[3 * v24];
  *((unsigned char *)v28 + 32) = v25;
  v28[5] = v27;
  v28[6] = v26;
  uint64_t v29 = (void *)swift_task_alloc();
  v0[51] = v29;
  *uint64_t v29 = v0;
  v29[1] = sub_100EA3D8C;
  uint64_t v30 = v0[31];
  return sub_100E9CB44(v30, (uint64_t)v14);
}

uint64_t sub_100EA3D8C()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 232);
  swift_task_dealloc();
  swift_bridgeObjectRelease();
  return _swift_task_switch(sub_100EA3EB8, v1, 0);
}

uint64_t sub_100EA3EB8()
{
  uint64_t v28 = v0;
  *(void *)(v0 + 168) = _swiftEmptyArrayStorage;
  if (*(void *)(v0 + 392))
  {
    uint64_t v1 = *(void *)(v0 + 376);
    uint64_t v3 = *(void *)(v0 + 272);
    uint64_t v2 = *(void *)(v0 + 280);
    int v4 = *(_DWORD *)(v2 + 80);
    *(_DWORD *)(v0 + 448) = v4;
    uint64_t v5 = *(void *)(v2 + 72);
    *(void *)(v0 + 424) = _swiftEmptyArrayStorage;
    *(void *)(v0 + 432) = 0;
    *(void *)(v0 + 416) = v5;
    uint64_t v6 = *(void *)(v0 + 336);
    uint64_t v7 = *(void *)(v0 + 296);
    char v8 = *(unsigned char *)(v0 + 344);
    sub_100EB0138(v1 + ((v4 + 32) & ~(unint64_t)v4), v7, (uint64_t (*)(void))type metadata accessor for OwnerPeerTrust);
    uint64_t v9 = v7 + *(int *)(v3 + 28);
    uint64_t v10 = (void *)swift_task_alloc();
    *(void *)(v0 + 440) = v10;
    *uint64_t v10 = v0;
    v10[1] = sub_100EA427C;
    uint64_t v11 = *(void *)(v0 + 328);
    uint64_t v12 = *(void *)(v0 + 248);
    return sub_100EA4844(v8, v11, v6, v9, v12);
  }
  else
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRetain_n();
    uint64_t v14 = Logger.logObject.getter();
    os_log_type_t v15 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v14, v15))
    {
      uint64_t v26 = *(void *)(v0 + 248);
      uint64_t v17 = *(void *)(v0 + 216);
      unint64_t v16 = *(void *)(v0 + 224);
      uint64_t v18 = swift_slowAlloc();
      uint64_t v27 = swift_slowAlloc();
      *(_DWORD *)uint64_t v18 = 136315394;
      swift_bridgeObjectRetain();
      *(void *)(v0 + 184) = sub_1008FA0F0(v17, v16, &v27);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      *(_WORD *)(v18 + 12) = 2080;
      swift_beginAccess();
      swift_bridgeObjectRetain();
      uint64_t v19 = Array.description.getter();
      unint64_t v21 = v20;
      swift_bridgeObjectRelease();
      *(void *)(v0 + 200) = sub_1008FA0F0(v19, v21, &v27);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v14, v15, "Owner peer trusts found %s matched %s.", (uint8_t *)v18, 0x16u);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      swift_release();
      uint64_t v22 = v26;
    }
    else
    {
      uint64_t v23 = *(void *)(v0 + 248);
      swift_bridgeObjectRelease_n();

      swift_release();
      uint64_t v22 = v23;
    }
    sub_10001DAB4(v22, &qword_101647FF8);
    swift_beginAccess();
    uint64_t v24 = *(void *)(v0 + 168);
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v25 = *(uint64_t (**)(uint64_t))(v0 + 8);
    return v25(v24);
  }
}

uint64_t sub_100EA427C(char a1)
{
  uint64_t v2 = *(void *)(*(void *)v1 + 232);
  *(unsigned char *)(*(void *)v1 + 452) = a1;
  swift_task_dealloc();
  return _swift_task_switch(sub_100EA4394, v2, 0);
}

uint64_t sub_100EA4394()
{
  uint64_t v34 = v0;
  unint64_t v1 = *(void *)(v0 + 424);
  if (*(unsigned char *)(v0 + 452) == 1)
  {
    sub_100EB0138(*(void *)(v0 + 296), *(void *)(v0 + 288), (uint64_t (*)(void))type metadata accessor for OwnerPeerTrust);
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    unint64_t v1 = *(void *)(v0 + 424);
    if ((isUniquelyReferenced_nonNull_native & 1) == 0) {
      unint64_t v1 = sub_100A6F84C(0, *(void *)(v1 + 16) + 1, 1, *(void *)(v0 + 424));
    }
    unint64_t v4 = *(void *)(v1 + 16);
    unint64_t v3 = *(void *)(v1 + 24);
    if (v4 >= v3 >> 1) {
      unint64_t v1 = sub_100A6F84C(v3 > 1, v4 + 1, 1, v1);
    }
    uint64_t v5 = *(void *)(v0 + 416);
    uint64_t v6 = *(unsigned __int8 *)(v0 + 448);
    uint64_t v7 = *(void *)(v0 + 288);
    *(void *)(v1 + 16) = v4 + 1;
    sub_100EB0318(v7, v1 + ((v6 + 32) & ~v6) + v5 * v4, (uint64_t (*)(void))type metadata accessor for OwnerPeerTrust);
    *(void *)(v0 + 168) = v1;
  }
  uint64_t v8 = *(void *)(v0 + 392);
  uint64_t v9 = *(void *)(v0 + 432) + 1;
  sub_100EB01A0(*(void *)(v0 + 296), (uint64_t (*)(void))type metadata accessor for OwnerPeerTrust);
  if (v9 == v8)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRetain_n();
    uint64_t v10 = Logger.logObject.getter();
    os_log_type_t v11 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v10, v11))
    {
      uint64_t v32 = *(void *)(v0 + 248);
      uint64_t v13 = *(void *)(v0 + 216);
      unint64_t v12 = *(void *)(v0 + 224);
      uint64_t v14 = swift_slowAlloc();
      uint64_t v33 = swift_slowAlloc();
      *(_DWORD *)uint64_t v14 = 136315394;
      swift_bridgeObjectRetain();
      *(void *)(v0 + 184) = sub_1008FA0F0(v13, v12, &v33);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      *(_WORD *)(v14 + 12) = 2080;
      swift_beginAccess();
      swift_bridgeObjectRetain();
      uint64_t v15 = Array.description.getter();
      unint64_t v17 = v16;
      swift_bridgeObjectRelease();
      *(void *)(v0 + 200) = sub_1008FA0F0(v15, v17, &v33);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v10, v11, "Owner peer trusts found %s matched %s.", (uint8_t *)v14, 0x16u);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      swift_release();
      uint64_t v18 = v32;
    }
    else
    {
      uint64_t v29 = *(void *)(v0 + 248);
      swift_bridgeObjectRelease_n();

      swift_release();
      uint64_t v18 = v29;
    }
    sub_10001DAB4(v18, &qword_101647FF8);
    swift_beginAccess();
    uint64_t v30 = *(void *)(v0 + 168);
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    long long v31 = *(uint64_t (**)(uint64_t))(v0 + 8);
    return v31(v30);
  }
  else
  {
    uint64_t v19 = *(void *)(v0 + 432) + 1;
    *(void *)(v0 + 424) = v1;
    *(void *)(v0 + 432) = v19;
    uint64_t v20 = *(void *)(v0 + 336);
    uint64_t v21 = *(void *)(v0 + 296);
    uint64_t v22 = *(void *)(v0 + 272);
    char v23 = *(unsigned char *)(v0 + 344);
    sub_100EB0138(*(void *)(v0 + 376)+ ((*(unsigned __int8 *)(v0 + 448) + 32) & ~(unint64_t)*(unsigned __int8 *)(v0 + 448))+ *(void *)(v0 + 416) * v19, v21, (uint64_t (*)(void))type metadata accessor for OwnerPeerTrust);
    uint64_t v24 = v21 + *(int *)(v22 + 28);
    uint64_t v25 = (void *)swift_task_alloc();
    *(void *)(v0 + 440) = v25;
    void *v25 = v0;
    v25[1] = sub_100EA427C;
    uint64_t v26 = *(void *)(v0 + 328);
    uint64_t v27 = *(void *)(v0 + 248);
    return sub_100EA4844(v23, v26, v20, v24, v27);
  }
}

uint64_t sub_100EA4844(char a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  *(void *)(v6 + 184) = a5;
  *(void *)(v6 + 192) = v5;
  *(void *)(v6 + 168) = a3;
  *(void *)(v6 + 176) = a4;
  *(void *)(v6 + 160) = a2;
  *(unsigned char *)(v6 + 368) = a1;
  sub_10000588C(&qword_101647FF8);
  *(void *)(v6 + 200) = swift_task_alloc();
  *(void *)(v6 + 208) = swift_task_alloc();
  uint64_t v8 = type metadata accessor for CorrelationIdentifierMap();
  *(void *)(v6 + 216) = v8;
  *(void *)(v6 + 224) = *(void *)(v8 - 8);
  *(void *)(v6 + 232) = swift_task_alloc();
  type metadata accessor for PeerCommunicationIdentifier();
  *(void *)(v6 + 240) = swift_task_alloc();
  *(void *)(v6 + 248) = swift_task_alloc();
  os_log_type_t v11 = (uint64_t (*)(uint64_t))((char *)&dword_101661678 + dword_101661678);
  uint64_t v9 = (void *)swift_task_alloc();
  *(void *)(v6 + 256) = v9;
  *uint64_t v9 = v6;
  v9[1] = sub_100EA49D8;
  return v11(a4);
}

uint64_t sub_100EA49D8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = (void *)*v4;
  v5[33] = a1;
  v5[34] = a2;
  v5[35] = a3;
  v5[36] = v3;
  swift_task_dealloc();
  if (v3) {
    uint64_t v6 = sub_100EA597C;
  }
  else {
    uint64_t v6 = sub_100EA4AF0;
  }
  return _swift_task_switch(v6, 0, 0);
}

uint64_t sub_100EA4AF0()
{
  uint64_t v87 = v0;
  unint64_t v1 = *(void **)(v0 + 280);
  if (!v1)
  {
    if (qword_101637148 != -1) {
      swift_once();
    }
    uint64_t v14 = *(void *)(v0 + 240);
    uint64_t v15 = *(void *)(v0 + 176);
    uint64_t v16 = type metadata accessor for Logger();
    sub_100010324(v16, (uint64_t)qword_10170EDD8);
    sub_100EB0138(v15, v14, (uint64_t (*)(void))type metadata accessor for PeerCommunicationIdentifier);
    unint64_t v17 = Logger.logObject.getter();
    os_log_type_t v18 = static os_log_type_t.default.getter();
    BOOL v19 = os_log_type_enabled(v17, v18);
    uint64_t v20 = *(void *)(v0 + 240);
    if (v19)
    {
      uint64_t v21 = (uint8_t *)swift_slowAlloc();
      v86[0] = swift_slowAlloc();
      *(_DWORD *)uint64_t v21 = 136315138;
      uint64_t v22 = sub_1009C77D8();
      *(void *)(v0 + 32) = sub_1008FA0F0(v22, v23, v86);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      sub_100EB01A0(v20, (uint64_t (*)(void))type metadata accessor for PeerCommunicationIdentifier);
      _os_log_impl((void *)&_mh_execute_header, v17, v18, "Did not find messagingDestination for %s.", v21, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      sub_100EB01A0(*(void *)(v0 + 240), (uint64_t (*)(void))type metadata accessor for PeerCommunicationIdentifier);
    }

    goto LABEL_19;
  }
  uint64_t v3 = *(void *)(v0 + 216);
  uint64_t v2 = *(void *)(v0 + 224);
  uint64_t v4 = *(void *)(v0 + 208);
  uint64_t v5 = *(unsigned __int8 *)(v0 + 264);
  sub_10001D074(*(void *)(v0 + 184), v4, &qword_101647FF8);
  uint64_t v6 = &qword_101637000;
  v84 = v1;
  unsigned int v82 = v5;
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v2 + 48))(v4, 1, v3) == 1)
  {
    sub_10001DAB4(*(void *)(v0 + 208), &qword_101647FF8);
    if (qword_101637148 != -1) {
      swift_once();
    }
    uint64_t v7 = type metadata accessor for Logger();
    sub_100010324(v7, (uint64_t)qword_10170EDD8);
    swift_bridgeObjectRetain_n();
    swift_bridgeObjectRetain_n();
    uint64_t v8 = Logger.logObject.getter();
    os_log_type_t v9 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v8, v9))
    {
      uint64_t v79 = *(void *)(v0 + 272);
      uint64_t v11 = *(void *)(v0 + 160);
      unint64_t v10 = *(void *)(v0 + 168);
      uint64_t v12 = swift_slowAlloc();
      v86[0] = swift_slowAlloc();
      *(_DWORD *)uint64_t v12 = 136315394;
      swift_bridgeObjectRetain();
      uint64_t v13 = v11;
      uint64_t v6 = &qword_101637000;
      *(void *)(v0 + 104) = sub_1008FA0F0(v13, v10, v86);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      uint64_t v5 = v82;
      swift_bridgeObjectRelease_n();
      *(_WORD *)(v12 + 12) = 2080;
      swift_bridgeObjectRetain();
      *(void *)(v0 + 112) = sub_1008FA0F0(v79, (unint64_t)v1, v86);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      _os_log_impl((void *)&_mh_execute_header, v8, v9, "No map provided while looking up messaging destination %s and peer trust %s.", (uint8_t *)v12, 0x16u);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {

      swift_bridgeObjectRelease_n();
      swift_bridgeObjectRelease_n();
    }
    if (*(unsigned __int8 *)(v0 + 368) != v5) {
      goto LABEL_41;
    }
    uint64_t v42 = *(void *)(v0 + 272);
    v43 = *(void **)(v0 + 168);
    if (v42 == *(void *)(v0 + 160) && *(void **)(v0 + 280) == v43)
    {
      uint64_t v44 = v5;
      uint64_t v45 = *(void *)(v0 + 272);
    }
    else
    {
      if ((_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
      {
LABEL_41:
        if (v6[41] != -1) {
          swift_once();
        }
        uint64_t v56 = type metadata accessor for Logger();
        *(void *)(v0 + 296) = sub_100010324(v56, (uint64_t)qword_10170EDD8);
        swift_bridgeObjectRetain_n();
        v57 = Logger.logObject.getter();
        os_log_type_t v58 = static os_log_type_t.default.getter();
        BOOL v59 = os_log_type_enabled(v57, v58);
        unint64_t v60 = *(void *)(v0 + 168);
        if (v59)
        {
          uint64_t v61 = *(void *)(v0 + 160);
          v62 = (uint8_t *)swift_slowAlloc();
          v86[0] = swift_slowAlloc();
          *(_DWORD *)v62 = 136315138;
          swift_bridgeObjectRetain();
          *(void *)(v0 + 96) = sub_1008FA0F0(v61, v60, v86);
          unint64_t v1 = v84;
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease_n();
          _os_log_impl((void *)&_mh_execute_header, v57, v58, "Using fallback logic to determine match for %s.", v62, 0xCu);
          swift_arrayDestroy();
          LOBYTE(v5) = v82;
          swift_slowDealloc();
          swift_slowDealloc();
        }
        else
        {

          swift_bridgeObjectRelease_n();
        }
        if (qword_1016368C0 != -1) {
          swift_once();
        }
        v63 = (void *)swift_task_alloc();
        *(void *)(v0 + 304) = v63;
        void *v63 = v0;
        v63[1] = sub_100EA5C90;
        uint64_t v64 = *(void *)(v0 + 272);
        return sub_10127B8C8(v5, v64, (uint64_t)v1);
      }
      uint64_t v45 = *(void *)(v0 + 272);
      uint64_t v42 = *(void *)(v0 + 160);
      v43 = *(void **)(v0 + 168);
      uint64_t v44 = *(unsigned __int8 *)(v0 + 368);
    }
    uint64_t v49 = *(void *)(v0 + 200);
    (*(void (**)(uint64_t, uint64_t, uint64_t, void))(*(void *)(v0 + 224) + 56))(v49, 1, 1, *(void *)(v0 + 216));
    sub_100EA8D04(v44, v42, v43, v44, v45, v84, v49, 0);
    uint64_t v50 = v49;
    unint64_t v1 = v84;
    sub_10001DAB4(v50, &qword_101647FF8);
    goto LABEL_41;
  }
  uint64_t v24 = *(void *)(v0 + 288);
  uint64_t v25 = *(void *)(v0 + 272);
  (*(void (**)(void, void, void))(*(void *)(v0 + 224) + 32))(*(void *)(v0 + 232), *(void *)(v0 + 208), *(void *)(v0 + 216));
  uint64_t v26 = sub_100494258(v5, v25, v1);
  if (v24)
  {
    if (qword_101637148 != -1) {
      swift_once();
    }
    uint64_t v32 = type metadata accessor for Logger();
    sub_100010324(v32, (uint64_t)qword_10170EDD8);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_errorRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_errorRetain();
    uint64_t v33 = Logger.logObject.getter();
    os_log_type_t v34 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v33, v34))
    {
      uint64_t v76 = *(void *)(v0 + 272);
      unint64_t v35 = *(void *)(v0 + 168);
      uint64_t v75 = *(void *)(v0 + 160);
      uint64_t v36 = swift_slowAlloc();
      v37 = (void *)swift_slowAlloc();
      v86[0] = swift_slowAlloc();
      *(_DWORD *)uint64_t v36 = 138543874;
      swift_errorRetain();
      uint64_t v38 = _swift_stdlib_bridgeErrorToNSError();
      *(void *)(v0 + 120) = v38;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      void *v37 = v38;
      swift_errorRelease();
      swift_errorRelease();
      *(_WORD *)(v36 + 12) = 2080;
      swift_bridgeObjectRetain();
      *(void *)(v0 + 128) = sub_1008FA0F0(v75, v35, v86);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      *(_WORD *)(v36 + 22) = 2080;
      unint64_t v1 = v84;
      swift_bridgeObjectRetain();
      *(void *)(v0 + 136) = sub_1008FA0F0(v76, (unint64_t)v84, v86);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      _os_log_impl((void *)&_mh_execute_header, v33, v34, "Map lookup error: %{public}@ for messaging destination %s peer trust %s.", (uint8_t *)v36, 0x20u);
      sub_10000588C((uint64_t *)&unk_101638EA0);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_arrayDestroy();
      swift_slowDealloc();
      uint64_t v5 = v82;
      swift_slowDealloc();
    }
    else
    {
      swift_errorRelease();
      swift_errorRelease();

      swift_bridgeObjectRelease_n();
      swift_bridgeObjectRelease_n();
    }
    if (*(unsigned __int8 *)(v0 + 368) == v5)
    {
      uint64_t v46 = *(void *)(v0 + 272);
      v47 = *(void **)(v0 + 168);
      if (v46 == *(void *)(v0 + 160) && *(void **)(v0 + 280) == v47)
      {
        uint64_t v48 = v5;
        uint64_t v80 = *(void *)(v0 + 272);
LABEL_38:
        uint64_t v52 = *(void *)(v0 + 224);
        uint64_t v51 = *(void *)(v0 + 232);
        uint64_t v53 = *(void *)(v0 + 216);
        uint64_t v5 = *(void *)(v0 + 200);
        (*(void (**)(uint64_t, uint64_t, uint64_t))(v52 + 16))(v5, v51, v53);
        (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v52 + 56))(v5, 0, 1, v53);
        swift_errorRetain();
        uint64_t v54 = v48;
        uint64_t v55 = v48;
        unint64_t v1 = v84;
        sub_100EA8D04(v54, v46, v47, v55, v80, v84, v5, v24);
        swift_errorRelease();
        swift_errorRelease();
        sub_10001DAB4(v5, &qword_101647FF8);
        (*(void (**)(uint64_t, uint64_t))(v52 + 8))(v51, v53);
        LOBYTE(v5) = v82;
LABEL_40:
        uint64_t v6 = &qword_101637000;
        goto LABEL_41;
      }
      if (_stringCompareWithSmolCheck(_:_:expecting:)())
      {
        uint64_t v80 = *(void *)(v0 + 272);
        uint64_t v46 = *(void *)(v0 + 160);
        v47 = *(void **)(v0 + 168);
        uint64_t v48 = *(unsigned __int8 *)(v0 + 368);
        goto LABEL_38;
      }
    }
    (*(void (**)(void, void))(*(void *)(v0 + 224) + 8))(*(void *)(v0 + 232), *(void *)(v0 + 216));
    swift_errorRelease();
    goto LABEL_40;
  }
  uint64_t v28 = v26;
  uint64_t v29 = v27;
  uint64_t v30 = sub_100494258(*(unsigned __int8 *)(v0 + 368), *(void *)(v0 + 160), *(void **)(v0 + 168));
  if (v28 == v30 && v29 == v31)
  {
    swift_bridgeObjectRelease_n();
LABEL_55:
    (*(void (**)(void, void))(*(void *)(v0 + 224) + 8))(*(void *)(v0 + 232), *(void *)(v0 + 216));
    swift_bridgeObjectRelease();
    uint64_t v39 = 1;
    goto LABEL_20;
  }
  char v65 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (v65) {
    goto LABEL_55;
  }
  if (qword_101637148 != -1) {
    swift_once();
  }
  uint64_t v66 = type metadata accessor for Logger();
  sub_100010324(v66, (uint64_t)qword_10170EDD8);
  swift_bridgeObjectRetain_n();
  swift_bridgeObjectRetain();
  v67 = Logger.logObject.getter();
  os_log_type_t v68 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v67, v68))
  {
    uint64_t v78 = *(void *)(v0 + 272);
    uint64_t v81 = *(void *)(v0 + 224);
    uint64_t v83 = *(void *)(v0 + 216);
    uint64_t v85 = *(void *)(v0 + 232);
    unint64_t v69 = *(void *)(v0 + 168);
    uint64_t v77 = *(void *)(v0 + 160);
    unint64_t v70 = (unint64_t)v1;
    uint64_t v71 = swift_slowAlloc();
    v86[0] = swift_slowAlloc();
    *(_DWORD *)uint64_t v71 = 136315394;
    swift_bridgeObjectRetain();
    *(void *)(v0 + 144) = sub_1008FA0F0(v77, v69, v86);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    *(_WORD *)(v71 + 12) = 2080;
    swift_bridgeObjectRetain();
    *(void *)(v0 + 152) = sub_1008FA0F0(v78, v70, v86);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    _os_log_impl((void *)&_mh_execute_header, v67, v68, "Did not find matching correlation identifier for messaging destination %s and peer trust %s in map.", (uint8_t *)v71, 0x16u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    (*(void (**)(uint64_t, uint64_t))(v81 + 8))(v85, v83);
  }
  else
  {
    uint64_t v72 = *(void *)(v0 + 224);
    uint64_t v73 = *(void *)(v0 + 232);
    uint64_t v74 = *(void *)(v0 + 216);
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease_n();

    (*(void (**)(uint64_t, uint64_t))(v72 + 8))(v73, v74);
  }
LABEL_19:
  uint64_t v39 = 0;
LABEL_20:
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  v40 = *(uint64_t (**)(uint64_t))(v0 + 8);
  return v40(v39);
}

uint64_t sub_100EA597C()
{
  uint64_t v16 = v0;
  if (qword_101637148 != -1) {
    swift_once();
  }
  uint64_t v1 = v0[31];
  uint64_t v2 = v0[22];
  uint64_t v3 = type metadata accessor for Logger();
  sub_100010324(v3, (uint64_t)qword_10170EDD8);
  sub_100EB0138(v2, v1, (uint64_t (*)(void))type metadata accessor for PeerCommunicationIdentifier);
  swift_errorRetain();
  swift_errorRetain();
  uint64_t v4 = Logger.logObject.getter();
  os_log_type_t v5 = static os_log_type_t.error.getter();
  BOOL v6 = os_log_type_enabled(v4, v5);
  uint64_t v7 = v0[31];
  if (v6)
  {
    uint64_t v8 = swift_slowAlloc();
    os_log_type_t v9 = (void *)swift_slowAlloc();
    uint64_t v15 = swift_slowAlloc();
    *(_DWORD *)uint64_t v8 = 136315394;
    uint64_t v10 = sub_1009C77D8();
    v0[2] = sub_1008FA0F0(v10, v11, &v15);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    sub_100EB01A0(v7, (uint64_t (*)(void))type metadata accessor for PeerCommunicationIdentifier);
    *(_WORD *)(v8 + 12) = 2114;
    swift_errorRetain();
    uint64_t v12 = _swift_stdlib_bridgeErrorToNSError();
    v0[3] = v12;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *os_log_type_t v9 = v12;
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl((void *)&_mh_execute_header, v4, v5, "Error finding messaging destination for %s, %{public}@.", (uint8_t *)v8, 0x16u);
    sub_10000588C((uint64_t *)&unk_101638EA0);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    swift_errorRelease();
  }
  else
  {
    swift_errorRelease();
    sub_100EB01A0(v7, (uint64_t (*)(void))type metadata accessor for PeerCommunicationIdentifier);
    swift_errorRelease();
    swift_errorRelease();
  }
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v13 = (uint64_t (*)(void))v0[1];
  return v13(0);
}

uint64_t sub_100EA5C90(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = (void *)*v3;
  v4[39] = a1;
  v4[40] = a2;
  v4[41] = v2;
  swift_task_dealloc();
  if (v2) {
    os_log_type_t v5 = sub_100EA6120;
  }
  else {
    os_log_type_t v5 = sub_100EA5DA8;
  }
  return _swift_task_switch(v5, 0, 0);
}

uint64_t sub_100EA5DA8()
{
  uint64_t v14 = v0;
  if (*(void *)(v0 + 320))
  {
    uint64_t v1 = (void *)swift_task_alloc();
    *(void *)(v0 + 336) = v1;
    *uint64_t v1 = v0;
    v1[1] = sub_100EA6008;
    uint64_t v2 = *(void *)(v0 + 160);
    uint64_t v3 = *(void *)(v0 + 168);
    char v4 = *(unsigned char *)(v0 + 368);
    return sub_10127B8C8(v4, v2, v3);
  }
  else
  {
    swift_bridgeObjectRetain();
    BOOL v6 = Logger.logObject.getter();
    os_log_type_t v7 = static os_log_type_t.default.getter();
    BOOL v8 = os_log_type_enabled(v6, v7);
    unint64_t v9 = *(void *)(v0 + 280);
    if (v8)
    {
      uint64_t v10 = *(void *)(v0 + 272);
      unint64_t v11 = (uint8_t *)swift_slowAlloc();
      uint64_t v13 = swift_slowAlloc();
      *(_DWORD *)unint64_t v11 = 136315138;
      swift_bridgeObjectRetain();
      *(void *)(v0 + 64) = sub_1008FA0F0(v10, v9, &v13);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      _os_log_impl((void *)&_mh_execute_header, v6, v7, "Did not find correlation identifier for peer trust %s.", v11, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {

      swift_bridgeObjectRelease_n();
    }
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v12 = *(uint64_t (**)(void))(v0 + 8);
    return v12(0);
  }
}

uint64_t sub_100EA6008(uint64_t a1, uint64_t a2)
{
  char v4 = (void *)*v3;
  v4[43] = a1;
  v4[44] = a2;
  v4[45] = v2;
  swift_task_dealloc();
  if (v2) {
    os_log_type_t v5 = sub_100EA6808;
  }
  else {
    os_log_type_t v5 = sub_100EA6428;
  }
  return _swift_task_switch(v5, 0, 0);
}

uint64_t sub_100EA6120()
{
  uint64_t v13 = v0;
  swift_bridgeObjectRetain();
  swift_errorRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_errorRetain();
  uint64_t v1 = Logger.logObject.getter();
  os_log_type_t v2 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v1, v2))
  {
    unint64_t v3 = v0[35];
    uint64_t v10 = v0[34];
    uint64_t v5 = v0[20];
    unint64_t v4 = v0[21];
    uint64_t v6 = swift_slowAlloc();
    unint64_t v11 = (void *)swift_slowAlloc();
    uint64_t v12 = swift_slowAlloc();
    *(_DWORD *)uint64_t v6 = 136315650;
    swift_bridgeObjectRetain();
    v0[5] = sub_1008FA0F0(v5, v4, &v12);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    *(_WORD *)(v6 + 12) = 2080;
    swift_bridgeObjectRetain();
    v0[6] = sub_1008FA0F0(v10, v3, &v12);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    *(_WORD *)(v6 + 22) = 2114;
    swift_errorRetain();
    uint64_t v7 = _swift_stdlib_bridgeErrorToNSError();
    v0[7] = v7;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    void *v11 = v7;
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl((void *)&_mh_execute_header, v1, v2, "Correlation identifier messaging destination %s peer trust %s lookup error: %{public}@.", (uint8_t *)v6, 0x20u);
    sub_10000588C((uint64_t *)&unk_101638EA0);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    swift_errorRelease();
  }
  else
  {
    swift_errorRelease();
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease_n();
    swift_errorRelease();
    swift_errorRelease();
  }
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  BOOL v8 = (uint64_t (*)(void))v0[1];
  return v8(0);
}

uint64_t sub_100EA6428()
{
  uint64_t v21 = v0;
  uint64_t v1 = v0[44];
  if (v1)
  {
    if (v0[39] == v0[43] && v0[40] == v1)
    {
      swift_bridgeObjectRelease_n();
LABEL_11:
      swift_bridgeObjectRelease();
      uint64_t v10 = 1;
      goto LABEL_18;
    }
    char v3 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if (v3) {
      goto LABEL_11;
    }
    swift_bridgeObjectRetain_n();
    swift_bridgeObjectRetain();
    unint64_t v4 = Logger.logObject.getter();
    os_log_type_t v11 = static os_log_type_t.debug.getter();
    BOOL v12 = os_log_type_enabled(v4, v11);
    unint64_t v13 = v0[35];
    if (!v12)
    {
      swift_bridgeObjectRelease_n();

      swift_bridgeObjectRelease_n();
      goto LABEL_17;
    }
    unint64_t v14 = v0[21];
    uint64_t v18 = v0[20];
    uint64_t v19 = v0[34];
    uint64_t v15 = swift_slowAlloc();
    uint64_t v20 = swift_slowAlloc();
    *(_DWORD *)uint64_t v15 = 136315394;
    swift_bridgeObjectRetain();
    v0[10] = sub_1008FA0F0(v18, v14, &v20);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    *(_WORD *)(v15 + 12) = 2080;
    swift_bridgeObjectRetain();
    v0[11] = sub_1008FA0F0(v19, v13, &v20);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    _os_log_impl((void *)&_mh_execute_header, v4, v11, "The messaging destination %s does not match correlation identifier for peer trust %s.", (uint8_t *)v15, 0x16u);
    swift_arrayDestroy();
    swift_slowDealloc();
    goto LABEL_15;
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain_n();
  unint64_t v4 = Logger.logObject.getter();
  os_log_type_t v5 = static os_log_type_t.default.getter();
  BOOL v6 = os_log_type_enabled(v4, v5);
  unint64_t v7 = v0[21];
  if (v6)
  {
    uint64_t v8 = v0[20];
    unint64_t v9 = (uint8_t *)swift_slowAlloc();
    uint64_t v20 = swift_slowAlloc();
    *(_DWORD *)unint64_t v9 = 136315138;
    swift_bridgeObjectRetain();
    v0[9] = sub_1008FA0F0(v8, v7, &v20);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    _os_log_impl((void *)&_mh_execute_header, v4, v5, "Did not find correlation identifier for messaging destination %s.", v9, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
LABEL_15:
    swift_slowDealloc();
    goto LABEL_16;
  }
  swift_bridgeObjectRelease_n();
LABEL_16:

LABEL_17:
  uint64_t v10 = 0;
LABEL_18:
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v16 = (uint64_t (*)(uint64_t))v0[1];
  return v16(v10);
}

uint64_t sub_100EA6808()
{
  unint64_t v13 = v0;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  swift_errorRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_errorRetain();
  uint64_t v1 = Logger.logObject.getter();
  os_log_type_t v2 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v1, v2))
  {
    unint64_t v3 = v0[35];
    uint64_t v10 = v0[34];
    uint64_t v5 = v0[20];
    unint64_t v4 = v0[21];
    uint64_t v6 = swift_slowAlloc();
    os_log_type_t v11 = (void *)swift_slowAlloc();
    uint64_t v12 = swift_slowAlloc();
    *(_DWORD *)uint64_t v6 = 136315650;
    swift_bridgeObjectRetain();
    v0[5] = sub_1008FA0F0(v5, v4, &v12);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    *(_WORD *)(v6 + 12) = 2080;
    swift_bridgeObjectRetain();
    v0[6] = sub_1008FA0F0(v10, v3, &v12);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    *(_WORD *)(v6 + 22) = 2114;
    swift_errorRetain();
    uint64_t v7 = _swift_stdlib_bridgeErrorToNSError();
    v0[7] = v7;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    void *v11 = v7;
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl((void *)&_mh_execute_header, v1, v2, "Correlation identifier messaging destination %s peer trust %s lookup error: %{public}@.", (uint8_t *)v6, 0x20u);
    sub_10000588C((uint64_t *)&unk_101638EA0);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    swift_errorRelease();
  }
  else
  {
    swift_errorRelease();
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease_n();
    swift_errorRelease();
    swift_errorRelease();
  }
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v8 = (uint64_t (*)(void))v0[1];
  return v8(0);
}

uint64_t sub_100EA6B18(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v4[32] = a3;
  v4[33] = v3;
  v4[31] = a2;
  v4[34] = *v3;
  sub_10000588C(&qword_101647FF8);
  v4[35] = swift_task_alloc();
  v4[36] = type metadata accessor for PeerCommunicationIdentifier();
  v4[37] = swift_task_alloc();
  v4[38] = swift_task_alloc();
  uint64_t v5 = type metadata accessor for MemberPeerTrust();
  v4[39] = v5;
  v4[40] = *(void *)(v5 - 8);
  v4[41] = swift_task_alloc();
  v4[42] = swift_task_alloc();
  v4[43] = swift_task_alloc();
  v4[44] = swift_task_alloc();
  return _swift_task_switch(sub_100EA6C9C, v3, 0);
}

uint64_t sub_100EA6C9C()
{
  uint64_t v1 = qword_1016375E8;
  swift_retain();
  if (v1 != -1) {
    swift_once();
  }
  swift_beginAccess();
  uint64_t result = sub_10001D074((uint64_t)&xmmword_10166E8F0, v0 + 56, (uint64_t *)&unk_101638D30);
  if (*(void *)(v0 + 80))
  {
    sub_10001CEB0((long long *)(v0 + 56), v0 + 16);
    swift_release();
    sub_10001CD44((void *)(v0 + 16), *(void *)(v0 + 40));
    unint64_t v4 = (uint64_t (__cdecl *)())((char *)&dword_1016390D8 + dword_1016390D8);
    unint64_t v3 = (void *)swift_task_alloc();
    *(void *)(v0 + 360) = v3;
    *unint64_t v3 = v0;
    v3[1] = sub_100EA6DEC;
    return v4();
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_100EA6DEC(uint64_t a1)
{
  uint64_t v2 = *(void *)(*(void *)v1 + 264);
  *(void *)(*(void *)v1 + 368) = a1;
  swift_task_dealloc();
  return _swift_task_switch(sub_100EA6F04, v2, 0);
}

uint64_t sub_100EA6F04()
{
  uint64_t v1 = *(void *)(v0 + 368);
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v0 + 16);
  if (v1)
  {
    uint64_t v2 = *(void *)(v0 + 368);
    return _swift_task_switch(sub_100EA7114, v2, 0);
  }
  else
  {
    if (qword_101637148 != -1) {
      swift_once();
    }
    uint64_t v3 = type metadata accessor for Logger();
    sub_100010324(v3, (uint64_t)qword_10170EDD8);
    uint64_t v4 = Logger.logObject.getter();
    os_log_type_t v5 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v4, v5))
    {
      uint64_t v6 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v6 = 0;
      _os_log_impl((void *)&_mh_execute_header, v4, v5, "No BeaconStoreActor available!", v6, 2u);
      swift_slowDealloc();
    }

    sub_10001CEC8();
    swift_allocError();
    *uint64_t v7 = 0xD000000000000010;
    v7[1] = 0x80000001013F23D0;
    swift_willThrow();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v8 = *(uint64_t (**)(void))(v0 + 8);
    return v8();
  }
}

uint64_t sub_100EA7114()
{
  *(void *)(v0 + 376) = *(void *)(*(void *)(v0 + 368) + 136);
  swift_retain();
  return _swift_task_switch(sub_100EA7188, 0, 0);
}

uint64_t sub_100EA7188()
{
  uint64_t v2 = v0[46];
  uint64_t v1 = v0[47];
  uint64_t v3 = (void *)swift_task_alloc();
  v0[48] = v3;
  v3[2] = v1;
  v3[3] = sub_10008F4E0;
  v3[4] = v2;
  uint64_t v4 = (void *)swift_task_alloc();
  v0[49] = v4;
  uint64_t v5 = sub_10000588C(&qword_101639F10);
  *uint64_t v4 = v0;
  v4[1] = sub_100EA72A0;
  return withCheckedContinuation<A>(isolation:function:_:)(v0 + 28, 0, 0, 0xD000000000000012, 0x80000001013F1870, sub_10007562C, v3, v5);
}

uint64_t sub_100EA72A0()
{
  uint64_t v1 = *v0;
  uint64_t v2 = *(void *)(*v0 + 264);
  swift_task_dealloc();
  swift_release();
  swift_task_dealloc();
  *(void *)(v1 + 400) = *(void *)(v1 + 224);
  return _swift_task_switch(sub_100EA7410, v2, 0);
}

uint64_t sub_100EA7410()
{
  uint64_t v50 = v0;
  if (qword_101637148 != -1) {
    swift_once();
  }
  uint64_t v1 = type metadata accessor for Logger();
  v0[51] = sub_100010324(v1, (uint64_t)qword_10170EDD8);
  swift_bridgeObjectRetain();
  uint64_t v2 = Logger.logObject.getter();
  os_log_type_t v3 = static os_log_type_t.default.getter();
  BOOL v4 = os_log_type_enabled(v2, v3);
  uint64_t v5 = v0[50];
  if (v4)
  {
    uint64_t v6 = (uint8_t *)swift_slowAlloc();
    *(_DWORD *)uint64_t v6 = 134217984;
    v0[30] = *(void *)(v5 + 16);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v2, v3, "Member peer trusts found %ld records.", v6, 0xCu);
    swift_slowDealloc();
  }
  else
  {
    swift_bridgeObjectRelease();
  }

  NSString v7 = String._bridgeToObjectiveC()();
  id v8 = [v7 _stripPotentialTokenURIWithToken:0];

  if (v8
    && (static String._unconditionallyBridgeFromObjectiveC(_:)(),
        v8,
        _s12searchpartyd20MessagingDestinationV6stringACSgSS_tcfC_0(),
        v0[52] = v10,
        (v0[53] = v11) != 0))
  {
    uint64_t v12 = v9;
    uint64_t v13 = v10;
    uint64_t v14 = v11;
    uint64_t v15 = v0[50];
    v0[54] = v12;
    uint64_t v16 = *(void *)(v15 + 16);
    v0[55] = v16;
    if (v16)
    {
      char v44 = v12;
      uint64_t v45 = v11;
      uint64_t v46 = v10;
      uint64_t v18 = v0[39];
      uint64_t v17 = v0[40];
      uint64_t v19 = (void *)v0[38];
      uint64_t v20 = v15 + ((*(unsigned __int8 *)(v17 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v17 + 80));
      uint64_t v21 = *(void *)(v17 + 72);
      swift_bridgeObjectRetain();
      uint64_t v22 = _swiftEmptyArrayStorage;
      uint64_t v47 = v21;
      uint64_t v48 = v18;
      while (2)
      {
        uint64_t v23 = v0[44];
        uint64_t v24 = v0[38];
        sub_100EB0138(v20, v23, (uint64_t (*)(void))type metadata accessor for MemberPeerTrust);
        sub_100EB0138(v23 + *(int *)(v18 + 28), v24, (uint64_t (*)(void))type metadata accessor for PeerCommunicationIdentifier);
        switch(swift_getEnumCaseMultiPayload())
        {
          case 1u:
            sub_100EB01A0(v0[38], (uint64_t (*)(void))type metadata accessor for PeerCommunicationIdentifier);
            goto LABEL_11;
          case 3u:
            char v25 = *(unsigned char *)v0[38];
            uint64_t v27 = v19[1];
            uint64_t v26 = v19[2];
            goto LABEL_19;
          case 4u:
            char v25 = *(unsigned char *)v0[38];
            uint64_t v27 = v19[1];
            uint64_t v26 = v19[2];
            goto LABEL_18;
          case 5u:
            char v25 = *((unsigned char *)v19 + 16);
            uint64_t v27 = v19[3];
            uint64_t v26 = v19[4];
            swift_bridgeObjectRelease();
LABEL_18:
            swift_bridgeObjectRelease();
LABEL_19:
            sub_100EB01A0(v0[44], (uint64_t (*)(void))type metadata accessor for MemberPeerTrust);
            if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
              uint64_t v22 = sub_100A6F880(0, v22[2] + 1, 1, v22);
            }
            unint64_t v29 = v22[2];
            unint64_t v28 = v22[3];
            if (v29 >= v28 >> 1) {
              uint64_t v22 = sub_100A6F880((void *)(v28 > 1), v29 + 1, 1, v22);
            }
            v22[2] = v29 + 1;
            uint64_t v30 = &v22[3 * v29];
            *((unsigned char *)v30 + 32) = v25;
            v30[5] = v27;
            v30[6] = v26;
            uint64_t v21 = v47;
            uint64_t v18 = v48;
            goto LABEL_12;
          case 6u:
          case 7u:
            goto LABEL_11;
          default:
            swift_bridgeObjectRelease();
LABEL_11:
            sub_100EB01A0(v0[44], (uint64_t (*)(void))type metadata accessor for MemberPeerTrust);
LABEL_12:
            v20 += v21;
            if (--v16) {
              continue;
            }
            swift_bridgeObjectRelease();
            uint64_t v14 = v45;
            uint64_t v13 = v46;
            LOBYTE(v12) = v44;
            break;
        }
        break;
      }
    }
    else
    {
      uint64_t v22 = _swiftEmptyArrayStorage;
    }
    swift_bridgeObjectRetain();
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
      uint64_t v22 = sub_100A6F880(0, v22[2] + 1, 1, v22);
    }
    unint64_t v40 = v22[2];
    unint64_t v39 = v22[3];
    if (v40 >= v39 >> 1) {
      uint64_t v22 = sub_100A6F880((void *)(v39 > 1), v40 + 1, 1, v22);
    }
    v0[56] = v22;
    v22[2] = v40 + 1;
    v41 = &v22[3 * v40];
    *((unsigned char *)v41 + 32) = v12;
    v41[5] = v13;
    v41[6] = v14;
    uint64_t v42 = (void *)swift_task_alloc();
    v0[57] = v42;
    *uint64_t v42 = v0;
    v42[1] = sub_100EA7AAC;
    uint64_t v43 = v0[35];
    return sub_100E9CB44(v43, (uint64_t)v22);
  }
  else
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRetain_n();
    uint64_t v31 = Logger.logObject.getter();
    os_log_type_t v32 = static os_log_type_t.error.getter();
    BOOL v33 = os_log_type_enabled(v31, v32);
    unint64_t v34 = v0[32];
    if (v33)
    {
      uint64_t v35 = v0[31];
      uint64_t v36 = (uint8_t *)swift_slowAlloc();
      uint64_t v49 = swift_slowAlloc();
      *(_DWORD *)uint64_t v36 = 136315138;
      swift_bridgeObjectRetain();
      v0[26] = sub_1008FA0F0(v35, v34, &v49);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      _os_log_impl((void *)&_mh_execute_header, v31, v32, "Member peer trusts could not correct destination : %s.", v36, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {

      swift_bridgeObjectRelease_n();
    }
    swift_release();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    v37 = (uint64_t (*)(void *))v0[1];
    return v37(_swiftEmptyArrayStorage);
  }
}

uint64_t sub_100EA7AAC()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 264);
  swift_task_dealloc();
  swift_bridgeObjectRelease();
  return _swift_task_switch(sub_100EA7BD8, v1, 0);
}

uint64_t sub_100EA7BD8()
{
  uint64_t v27 = v0;
  *(void *)(v0 + 200) = _swiftEmptyArrayStorage;
  if (*(void *)(v0 + 440))
  {
    uint64_t v1 = *(void *)(v0 + 400);
    uint64_t v3 = *(void *)(v0 + 312);
    uint64_t v2 = *(void *)(v0 + 320);
    int v4 = *(_DWORD *)(v2 + 80);
    *(_DWORD *)(v0 + 496) = v4;
    *(void *)(v0 + 464) = *(void *)(v2 + 72);
    *(void *)(v0 + 472) = 0;
    uint64_t v5 = *(void *)(v0 + 424);
    uint64_t v6 = *(void *)(v0 + 344);
    char v7 = *(unsigned char *)(v0 + 432);
    sub_100EB0138(v1 + ((v4 + 32) & ~(unint64_t)v4), v6, (uint64_t (*)(void))type metadata accessor for MemberPeerTrust);
    uint64_t v8 = v6 + *(int *)(v3 + 28);
    uint64_t v9 = (void *)swift_task_alloc();
    *(void *)(v0 + 480) = v9;
    *uint64_t v9 = v0;
    v9[1] = sub_100EA7FA8;
    uint64_t v10 = *(void *)(v0 + 416);
    uint64_t v11 = *(void *)(v0 + 280);
    return sub_100EA4844(v7, v10, v5, v8, v11);
  }
  else
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRetain_n();
    uint64_t v13 = Logger.logObject.getter();
    os_log_type_t v14 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v13, v14))
    {
      uint64_t v25 = *(void *)(v0 + 280);
      uint64_t v16 = *(void *)(v0 + 248);
      unint64_t v15 = *(void *)(v0 + 256);
      uint64_t v17 = swift_slowAlloc();
      uint64_t v26 = swift_slowAlloc();
      *(_DWORD *)uint64_t v17 = 136315394;
      swift_bridgeObjectRetain();
      *(void *)(v0 + 216) = sub_1008FA0F0(v16, v15, &v26);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      *(_WORD *)(v17 + 12) = 2080;
      swift_beginAccess();
      swift_bridgeObjectRetain();
      uint64_t v18 = Array.description.getter();
      unint64_t v20 = v19;
      swift_bridgeObjectRelease();
      *(void *)(v0 + 232) = sub_1008FA0F0(v18, v20, &v26);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v13, v14, "Owner peer trusts found %s matched %s.", (uint8_t *)v17, 0x16u);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      swift_release();
      uint64_t v21 = v25;
    }
    else
    {
      uint64_t v22 = *(void *)(v0 + 280);
      swift_bridgeObjectRelease_n();

      swift_release();
      uint64_t v21 = v22;
    }
    sub_10001DAB4(v21, &qword_101647FF8);
    swift_beginAccess();
    uint64_t v23 = *(void *)(v0 + 200);
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v24 = *(uint64_t (**)(uint64_t))(v0 + 8);
    return v24(v23);
  }
}

uint64_t sub_100EA7FA8(char a1)
{
  uint64_t v2 = *(void *)(*(void *)v1 + 264);
  *(unsigned char *)(*(void *)v1 + 500) = a1;
  swift_task_dealloc();
  return _swift_task_switch(sub_100EA80C0, v2, 0);
}

void sub_100EA80C0()
{
  uint64_t v47 = v0;
  if ((*(unsigned char *)(v0 + 500) & 1) == 0)
  {
    uint64_t v18 = (void *)(*(void *)(v0 + 344) + *(int *)(*(void *)(v0 + 312) + 32));
    uint64_t v19 = v18[1];
    *(void *)(v0 + 168) = *v18;
    *(void *)(v0 + 176) = v19;
    *(void *)(v0 + 184) = 64;
    *(void *)(v0 + 192) = 0xE100000000000000;
    sub_1000336D4();
    swift_bridgeObjectRetain();
    char v20 = StringProtocol.contains<A>(_:)();
    NSString v21 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    if (v20)
    {
      uint64_t v22 = (void *)IDSCopyIDForEmailAddress();

      if (v22)
      {
        char v23 = 0;
LABEL_15:
        uint64_t v35 = *(void *)(v0 + 424);
        uint64_t v36 = *(void *)(v0 + 296);
        char v37 = *(unsigned char *)(v0 + 432);
        uint64_t v38 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        uint64_t v40 = v39;

        *(unsigned char *)uint64_t v36 = v23;
        *(void *)(v36 + 8) = v38;
        *(void *)(v36 + 16) = v40;
        swift_storeEnumTagMultiPayload();
        v41 = (void *)swift_task_alloc();
        *(void *)(v0 + 488) = v41;
        void *v41 = v0;
        v41[1] = sub_100EA86BC;
        uint64_t v30 = *(void *)(v0 + 416);
        uint64_t v34 = *(void *)(v0 + 296);
        uint64_t v31 = *(void *)(v0 + 280);
        char v32 = v37;
        uint64_t v33 = v35;
        goto LABEL_16;
      }
      __break(1u);
    }
    else
    {
      uint64_t v22 = (void *)IDSCopyIDForPhoneNumber();

      if (v22)
      {
        char v23 = 1;
        goto LABEL_15;
      }
    }
    __break(1u);
    return;
  }
  sub_100EB0138(*(void *)(v0 + 344), *(void *)(v0 + 336), (uint64_t (*)(void))type metadata accessor for MemberPeerTrust);
  unint64_t v1 = *(void *)(v0 + 200);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    unint64_t v1 = sub_100A6F9A8(0, *(void *)(v1 + 16) + 1, 1, v1);
  }
  unint64_t v3 = *(void *)(v1 + 16);
  unint64_t v2 = *(void *)(v1 + 24);
  if (v3 >= v2 >> 1) {
    unint64_t v1 = sub_100A6F9A8(v2 > 1, v3 + 1, 1, v1);
  }
  uint64_t v4 = *(void *)(v0 + 464);
  uint64_t v5 = *(unsigned __int8 *)(v0 + 496);
  uint64_t v6 = *(void *)(v0 + 336);
  uint64_t v7 = *(void *)(v0 + 344);
  *(void *)(v1 + 16) = v3 + 1;
  sub_100EB0318(v6, v1 + ((v5 + 32) & ~v5) + v4 * v3, (uint64_t (*)(void))type metadata accessor for MemberPeerTrust);
  *(void *)(v0 + 200) = v1;
  sub_100EB01A0(v7, (uint64_t (*)(void))type metadata accessor for MemberPeerTrust);
  uint64_t v8 = *(void *)(v0 + 472) + 1;
  if (v8 == *(void *)(v0 + 440))
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRetain_n();
    uint64_t v9 = Logger.logObject.getter();
    os_log_type_t v10 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v9, v10))
    {
      uint64_t v45 = *(void *)(v0 + 280);
      uint64_t v12 = *(void *)(v0 + 248);
      unint64_t v11 = *(void *)(v0 + 256);
      uint64_t v13 = swift_slowAlloc();
      uint64_t v46 = swift_slowAlloc();
      *(_DWORD *)uint64_t v13 = 136315394;
      swift_bridgeObjectRetain();
      *(void *)(v0 + 216) = sub_1008FA0F0(v12, v11, &v46);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      *(_WORD *)(v13 + 12) = 2080;
      swift_beginAccess();
      swift_bridgeObjectRetain();
      uint64_t v14 = Array.description.getter();
      unint64_t v16 = v15;
      swift_bridgeObjectRelease();
      *(void *)(v0 + 232) = sub_1008FA0F0(v14, v16, &v46);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v9, v10, "Owner peer trusts found %s matched %s.", (uint8_t *)v13, 0x16u);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      swift_release();
      uint64_t v17 = v45;
    }
    else
    {
      uint64_t v42 = *(void *)(v0 + 280);
      swift_bridgeObjectRelease_n();

      swift_release();
      uint64_t v17 = v42;
    }
    sub_10001DAB4(v17, &qword_101647FF8);
    swift_beginAccess();
    uint64_t v43 = *(void *)(v0 + 200);
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    char v44 = *(void (**)(uint64_t))(v0 + 8);
    v44(v43);
    return;
  }
  *(void *)(v0 + 472) = v8;
  uint64_t v24 = *(void *)(v0 + 424);
  uint64_t v25 = *(void *)(v0 + 344);
  uint64_t v26 = *(void *)(v0 + 312);
  char v27 = *(unsigned char *)(v0 + 432);
  sub_100EB0138(*(void *)(v0 + 400)+ ((*(unsigned __int8 *)(v0 + 496) + 32) & ~(unint64_t)*(unsigned __int8 *)(v0 + 496))+ *(void *)(v0 + 464) * v8, v25, (uint64_t (*)(void))type metadata accessor for MemberPeerTrust);
  uint64_t v28 = v25 + *(int *)(v26 + 28);
  unint64_t v29 = (void *)swift_task_alloc();
  *(void *)(v0 + 480) = v29;
  *unint64_t v29 = v0;
  v29[1] = sub_100EA7FA8;
  uint64_t v30 = *(void *)(v0 + 416);
  uint64_t v31 = *(void *)(v0 + 280);
  char v32 = v27;
  uint64_t v33 = v24;
  uint64_t v34 = v28;
LABEL_16:
  sub_100EA4844(v32, v30, v33, v34, v31);
}

uint64_t sub_100EA86BC(char a1)
{
  uint64_t v2 = *(void *)(*(void *)v1 + 296);
  uint64_t v3 = *(void *)(*(void *)v1 + 264);
  *(unsigned char *)(*(void *)v1 + 501) = a1;
  swift_task_dealloc();
  sub_100EB01A0(v2, (uint64_t (*)(void))type metadata accessor for PeerCommunicationIdentifier);
  return _swift_task_switch(sub_100EA8804, v3, 0);
}

uint64_t sub_100EA8804()
{
  uint64_t v32 = v0;
  uint64_t v1 = *(void *)(v0 + 344);
  if (*(unsigned char *)(v0 + 501))
  {
    sub_100EB0138(*(void *)(v0 + 344), *(void *)(v0 + 328), (uint64_t (*)(void))type metadata accessor for MemberPeerTrust);
    unint64_t v2 = *(void *)(v0 + 200);
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
      unint64_t v2 = sub_100A6F9A8(0, *(void *)(v2 + 16) + 1, 1, v2);
    }
    unint64_t v4 = *(void *)(v2 + 16);
    unint64_t v3 = *(void *)(v2 + 24);
    if (v4 >= v3 >> 1) {
      unint64_t v2 = sub_100A6F9A8(v3 > 1, v4 + 1, 1, v2);
    }
    uint64_t v5 = *(void *)(v0 + 464);
    uint64_t v6 = *(unsigned __int8 *)(v0 + 496);
    uint64_t v1 = *(void *)(v0 + 344);
    uint64_t v7 = *(void *)(v0 + 328);
    *(void *)(v2 + 16) = v4 + 1;
    sub_100EB0318(v7, v2 + ((v6 + 32) & ~v6) + v5 * v4, (uint64_t (*)(void))type metadata accessor for MemberPeerTrust);
    *(void *)(v0 + 200) = v2;
  }
  sub_100EB01A0(v1, (uint64_t (*)(void))type metadata accessor for MemberPeerTrust);
  uint64_t v8 = *(void *)(v0 + 472) + 1;
  if (v8 == *(void *)(v0 + 440))
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRetain_n();
    uint64_t v9 = Logger.logObject.getter();
    os_log_type_t v10 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v9, v10))
    {
      uint64_t v30 = *(void *)(v0 + 280);
      uint64_t v12 = *(void *)(v0 + 248);
      unint64_t v11 = *(void *)(v0 + 256);
      uint64_t v13 = swift_slowAlloc();
      uint64_t v31 = swift_slowAlloc();
      *(_DWORD *)uint64_t v13 = 136315394;
      swift_bridgeObjectRetain();
      *(void *)(v0 + 216) = sub_1008FA0F0(v12, v11, &v31);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      *(_WORD *)(v13 + 12) = 2080;
      swift_beginAccess();
      swift_bridgeObjectRetain();
      uint64_t v14 = Array.description.getter();
      unint64_t v16 = v15;
      swift_bridgeObjectRelease();
      *(void *)(v0 + 232) = sub_1008FA0F0(v14, v16, &v31);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v9, v10, "Owner peer trusts found %s matched %s.", (uint8_t *)v13, 0x16u);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      swift_release();
      uint64_t v17 = v30;
    }
    else
    {
      uint64_t v27 = *(void *)(v0 + 280);
      swift_bridgeObjectRelease_n();

      swift_release();
      uint64_t v17 = v27;
    }
    sub_10001DAB4(v17, &qword_101647FF8);
    swift_beginAccess();
    uint64_t v28 = *(void *)(v0 + 200);
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    unint64_t v29 = *(uint64_t (**)(uint64_t))(v0 + 8);
    return v29(v28);
  }
  else
  {
    *(void *)(v0 + 472) = v8;
    uint64_t v18 = *(void *)(v0 + 424);
    uint64_t v19 = *(void *)(v0 + 344);
    uint64_t v20 = *(void *)(v0 + 312);
    char v21 = *(unsigned char *)(v0 + 432);
    sub_100EB0138(*(void *)(v0 + 400)+ ((*(unsigned __int8 *)(v0 + 496) + 32) & ~(unint64_t)*(unsigned __int8 *)(v0 + 496))+ *(void *)(v0 + 464) * v8, v19, (uint64_t (*)(void))type metadata accessor for MemberPeerTrust);
    uint64_t v22 = v19 + *(int *)(v20 + 28);
    char v23 = (void *)swift_task_alloc();
    *(void *)(v0 + 480) = v23;
    *char v23 = v0;
    v23[1] = sub_100EA7FA8;
    uint64_t v24 = *(void *)(v0 + 416);
    uint64_t v25 = *(void *)(v0 + 280);
    return sub_100EA4844(v21, v24, v18, v22, v25);
  }
}

uint64_t sub_100EA8CC0(uint64_t a1)
{
  return a1;
}

void sub_100EA8D04(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, uint64_t a5, void *a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9 = v8;
  uint64_t v97 = a7;
  v94 = a6;
  uint64_t v93 = a5;
  v96 = a3;
  uint64_t v95 = a2;
  uint64_t v11 = sub_10000588C(&qword_101647FF8);
  __chkstk_darwin(v11 - 8);
  uint64_t v98 = (uint64_t)&v84 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v100 = type metadata accessor for CorrelationIdentifierMap();
  uint64_t v99 = *(void *)(v100 - 8);
  __chkstk_darwin(v100);
  v90 = (char *)&v84 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v91 = sub_10000588C(&qword_10163EE60);
  __chkstk_darwin(v91);
  v92 = (char *)&v84 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = type metadata accessor for TapToRadarDraft();
  uint64_t v101 = *(void *)(v15 - 8);
  uint64_t v16 = __chkstk_darwin(v15 - 8);
  uint64_t v103 = (uint64_t)&v84 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v102 = v17;
  __chkstk_darwin(v16);
  uint64_t v19 = (char *)&v84 - v18;
  uint64_t v20 = type metadata accessor for Date();
  uint64_t v21 = *(void *)(v20 - 8);
  uint64_t v22 = __chkstk_darwin(v20);
  uint64_t v24 = (char *)&v84 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v25 = __chkstk_darwin(v22);
  uint64_t v27 = (char *)&v84 - v26;
  __chkstk_darwin(v25);
  unint64_t v29 = (char *)&v84 - v28;
  id v30 = [self sharedInstance];
  unsigned int v31 = [v30 isInternalBuild];

  if (v31)
  {
    uint64_t v86 = a8;
    uint64_t v88 = v19;
    if (qword_101637148 != -1) {
      swift_once();
    }
    uint64_t v32 = type metadata accessor for Logger();
    uint64_t v33 = sub_100010324(v32, (uint64_t)qword_10170EDD8);
    uint64_t v34 = Logger.logObject.getter();
    os_log_type_t v35 = static os_log_type_t.info.getter();
    BOOL v36 = os_log_type_enabled(v34, v35);
    char v37 = &qword_101637000;
    uint64_t v104 = v20;
    v89 = v24;
    uint64_t v87 = v9;
    if (v36)
    {
      uint64_t v85 = (void (*)(char *, uint64_t))v33;
      uint64_t v38 = (uint8_t *)swift_slowAlloc();
      *(_DWORD *)uint64_t v38 = 134217984;
      if (qword_101637150 != -1) {
        swift_once();
      }
      uint64_t v39 = v104;
      uint64_t v40 = sub_100010324(v104, (uint64_t)qword_10170EDF0);
      swift_beginAccess();
      (*(void (**)(char *, uint64_t, uint64_t))(v21 + 16))(v29, v40, v39);
      static Date.trustedNow.getter((uint64_t)v27);
      Date.timeIntervalSince(_:)();
      uint64_t v42 = v41;
      uint64_t v43 = *(void (**)(char *, uint64_t))(v21 + 8);
      v43(v27, v39);
      v43(v29, v39);
      v107._countAndFlagsBits = v42;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      _os_log_impl((void *)&_mh_execute_header, v34, v35, "Last TTR was %f seconds ago.", v38, 0xCu);
      swift_slowDealloc();

      uint64_t v24 = v89;
      char v37 = &qword_101637000;
    }
    else
    {
    }
    static Date.trustedNow.getter((uint64_t)v24);
    if (v37[42] != -1) {
      swift_once();
    }
    uint64_t v44 = v104;
    uint64_t v45 = sub_100010324(v104, (uint64_t)qword_10170EDF0);
    swift_beginAccess();
    (*(void (**)(char *, uint64_t, uint64_t))(v21 + 16))(v29, v45, v44);
    Date.timeIntervalSince(_:)();
    double v47 = v46;
    uint64_t v48 = *(void (**)(char *, uint64_t))(v21 + 8);
    v48(v29, v44);
    if (v47 >= 86400.0)
    {
      uint64_t v85 = v48;
      swift_beginAccess();
      (*(void (**)(uint64_t, char *, uint64_t))(v21 + 24))(v45, v24, v44);
      swift_endAccess();
      v118[0] = xmmword_101380050;
      v118[1] = xmmword_101380060;
      unint64_t v119 = 0xEF676E69646E6946;
      uint64_t v52 = v92;
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v21 + 56))(&v92[*(int *)(v91 + 36)], 1, 1, v44);
      *uint64_t v52 = 0x7349664F656D6954;
      v52[1] = 0xEB00000000657573;
      v83.n128_u64[0] = 0xD000000000000012;
      v83.n128_u64[1] = 0x8000000101419370;
      *((void *)&v82 + 1) = 0x8000000101419350;
      *(void *)&long long v82 = 0xD000000000000018;
      *(void *)&long long v81 = 0x7470697263736544;
      *((void *)&v81 + 1) = 0xEB000000006E6F69;
      *(void *)&long long v80 = 0x656C746954;
      *((void *)&v80 + 1) = 0xE500000000000000;
      uint64_t v53 = (uint64_t)v88;
      sub_1001F540C(0x4449656C646E7542, 0xE800000000000000, 0, 0, (uint64_t)v118, 0x6966697373616C43, 0xEE006E6F69746163, 10, (uint64_t)v88, 0x6375646F72706552, 0xEF7974696C696269, 6, v80, 0, v81, 0, 0, (uint64_t)_swiftEmptyArrayStorage, (uint64_t)v52,
        (uint64_t)_swiftEmptyArrayStorage,
        (uint64_t)_swiftEmptyArrayStorage,
        (uint64_t)_swiftEmptyArrayStorage,
        0,
        (uint64_t)_swiftEmptyArrayStorage,
        (uint64_t)_swiftEmptyArrayStorage,
        (uint64_t)_swiftEmptyArrayStorage,
        0,
        0,
        0,
        (uint64_t)_swiftEmptyArrayStorage,
        v82,
        0,
        0,
        v83,
        0,
        0);
      *(unsigned char *)(v53 + 88) = 6;
      *(unsigned char *)(v53 + 112) = 4;
      swift_bridgeObjectRelease();
      *(void *)(v53 + 136) = 0xD00000000000002ALL;
      *(void *)(v53 + 144) = 0x8000000101419390;
      v107._countAndFlagsBits = 0;
      v107._object = (void *)0xE000000000000000;
      _StringGuts.grow(_:)(72);
      v54._countAndFlagsBits = 0xD000000000000020;
      v54._object = (void *)0x80000001014193C0;
      String.append(_:)(v54);
      uint64_t v55 = v94;
      swift_bridgeObjectRetain();
      v56._countAndFlagsBits = v93;
      v56._object = v55;
      String.append(_:)(v56);
      swift_bridgeObjectRelease();
      v57._countAndFlagsBits = 0xD000000000000019;
      v57._object = (void *)0x80000001014193F0;
      String.append(_:)(v57);
      os_log_type_t v58 = v96;
      swift_bridgeObjectRetain();
      v59._countAndFlagsBits = v95;
      v59._object = v58;
      String.append(_:)(v59);
      swift_bridgeObjectRelease();
      v60._countAndFlagsBits = 0x207461200A20;
      v60._object = (void *)0xE600000000000000;
      String.append(_:)(v60);
      sub_100EB0380((unint64_t *)&qword_101638DA0, 255, (void (*)(uint64_t))&type metadata accessor for Date);
      v61._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
      String.append(_:)(v61);
      swift_bridgeObjectRelease();
      v62._countAndFlagsBits = 657952;
      v62._object = (void *)0xE300000000000000;
      String.append(_:)(v62);
      Swift::String v106 = v107;
      uint64_t v63 = v98;
      sub_10001D074(v97, v98, &qword_101647FF8);
      uint64_t v64 = v99;
      uint64_t v65 = v100;
      if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v99 + 48))(v63, 1, v100) == 1)
      {
        sub_10001DAB4(v63, &qword_101647FF8);
        v66._countAndFlagsBits = 0xD00000000000001BLL;
        v66._object = (void *)0x8000000101419410;
        String.append(_:)(v66);
      }
      else
      {
        v67 = v90;
        (*(void (**)(char *, uint64_t, uint64_t))(v64 + 32))(v90, v63, v65);
        v107._countAndFlagsBits = 0x203A70616DLL;
        v107._object = (void *)0xE500000000000000;
        sub_100EB0380(&qword_101648028, 255, (void (*)(uint64_t))&type metadata accessor for CorrelationIdentifierMap);
        v68._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
        String.append(_:)(v68);
        swift_bridgeObjectRelease();
        v69._countAndFlagsBits = 657952;
        v69._object = (void *)0xE300000000000000;
        String.append(_:)(v69);
        String.append(_:)(v107);
        swift_bridgeObjectRelease();
        (*(void (**)(char *, uint64_t))(v64 + 8))(v67, v65);
      }
      uint64_t v70 = v87;
      uint64_t v71 = v86;
      if (v86)
      {
        v107._countAndFlagsBits = 0;
        v107._object = (void *)0xE000000000000000;
        swift_errorRetain();
        v72._countAndFlagsBits = 0x203A726F727245;
        v72._object = (void *)0xE700000000000000;
        String.append(_:)(v72);
        uint64_t v105 = v71;
        sub_10000588C(&qword_101638D40);
        _print_unlocked<A, B>(_:_:)();
        v73._countAndFlagsBits = 10;
        v73._object = (void *)0xE100000000000000;
        String.append(_:)(v73);
        String.append(_:)(v107);
        swift_bridgeObjectRelease();
        swift_errorRelease();
      }
      Swift::String v74 = v106;
      uint64_t v75 = (uint64_t)v88;
      swift_bridgeObjectRelease();
      *(Swift::String *)(v75 + 168) = v74;
      uint64_t v76 = v103;
      sub_100EB0138(v75, v103, (uint64_t (*)(void))type metadata accessor for TapToRadarDraft);
      unint64_t v77 = (*(unsigned __int8 *)(v101 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v101 + 80);
      unint64_t v78 = (v102 + v77 + 7) & 0xFFFFFFFFFFFFFFF8;
      uint64_t v79 = swift_allocObject();
      sub_100EB0318(v76, v79 + v77, (uint64_t (*)(void))type metadata accessor for TapToRadarDraft);
      *(void *)(v79 + v78) = v70;
      v107._countAndFlagsBits = 0xD000000000000030;
      v107._object = (void *)0x8000000101419430;
      unint64_t v108 = 0xD000000000000060;
      unint64_t v109 = 0x8000000101419470;
      unint64_t v110 = 0xD000000000000010;
      unint64_t v111 = 0x80000001014194E0;
      unint64_t v112 = 0xD000000000000012;
      unint64_t v113 = 0x8000000101419500;
      v114 = sub_100EAFCB8;
      uint64_t v115 = v79;
      type metadata accessor for SBAlertHelper();
      uint64_t v116 = 0;
      uint64_t v117 = 0;
      swift_allocObject();
      sub_1010DA238(&v107);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      sub_1000BD0E8((uint64_t)sub_100EAFCB8);
      sub_1000BD0E8(0);
      sub_1010DAEEC();
      swift_release();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      sub_1000A1534((uint64_t)sub_100EAFCB8);
      sub_1000A1534(0);
      sub_100EB01A0(v75, (uint64_t (*)(void))type metadata accessor for TapToRadarDraft);
      v85(v89, v104);
    }
    else
    {
      uint64_t v49 = Logger.logObject.getter();
      os_log_type_t v50 = static os_log_type_t.info.getter();
      if (os_log_type_enabled(v49, v50))
      {
        uint64_t v51 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)uint64_t v51 = 0;
        _os_log_impl((void *)&_mh_execute_header, v49, v50, "Ignoring proposal of TTR.", v51, 2u);
        swift_slowDealloc();
      }

      v48(v24, v44);
    }
  }
}

uint64_t sub_100EA9ADC(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for TapToRadarDraft();
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = *(void *)(v5 + 64);
  __chkstk_darwin(v4 - 8);
  uint64_t v7 = sub_10000588C(&qword_10164DBB0);
  __chkstk_darwin(v7 - 8);
  uint64_t v9 = (char *)&v14 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = type metadata accessor for TaskPriority();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 56))(v9, 1, 1, v10);
  sub_100EB0138(a1, (uint64_t)&v14 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0), (uint64_t (*)(void))type metadata accessor for TapToRadarDraft);
  unint64_t v11 = (*(unsigned __int8 *)(v5 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
  uint64_t v12 = swift_allocObject();
  *(void *)(v12 + 16) = 0;
  *(void *)(v12 + 24) = 0;
  sub_100EB0318((uint64_t)&v14 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0), v12 + v11, (uint64_t (*)(void))type metadata accessor for TapToRadarDraft);
  *(void *)(v12 + ((v6 + v11 + 7) & 0xFFFFFFFFFFFFFFF8)) = a2;
  sub_1008F5E44((uint64_t)v9, (uint64_t)&unk_101661698, v12);
  return swift_release();
}

uint64_t sub_100EA9CA8()
{
  uint64_t v1 = (void *)swift_task_alloc();
  *(void *)(v0 + 24) = v1;
  *uint64_t v1 = v0;
  v1[1] = sub_100EA9D38;
  return sub_1001F51FC();
}

uint64_t sub_100EA9D38()
{
  uint64_t v2 = *v1;
  *(void *)(v2 + 32) = v0;
  swift_task_dealloc();
  if (v0)
  {
    return _swift_task_switch(sub_100EA9E6C, 0, 0);
  }
  else
  {
    uint64_t v3 = *(uint64_t (**)(void))(v2 + 8);
    return v3();
  }
}

uint64_t sub_100EA9E6C()
{
  if (qword_101637148 != -1) {
    swift_once();
  }
  uint64_t v1 = type metadata accessor for Logger();
  sub_100010324(v1, (uint64_t)qword_10170EDD8);
  swift_errorRetain();
  swift_errorRetain();
  uint64_t v2 = Logger.logObject.getter();
  os_log_type_t v3 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v2, v3))
  {
    uint64_t v4 = (uint8_t *)swift_slowAlloc();
    uint64_t v5 = (void *)swift_slowAlloc();
    *(_DWORD *)uint64_t v4 = 138543362;
    swift_errorRetain();
    uint64_t v6 = _swift_stdlib_bridgeErrorToNSError();
    *(void *)(v0 + 16) = v6;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *uint64_t v5 = v6;
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl((void *)&_mh_execute_header, v2, v3, "Failed to TTR: %{public}@.", v4, 0xCu);
    sub_10000588C((uint64_t *)&unk_101638EA0);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    swift_errorRelease();
  }
  else
  {
    swift_errorRelease();
    swift_errorRelease();
    swift_errorRelease();
  }
  uint64_t v7 = *(uint64_t (**)(void))(v0 + 8);
  return v7();
}

uint64_t sub_100EAA070@<X0>(void *a1@<X8>)
{
  if (qword_1016368B8 != -1) {
    swift_once();
  }
  sub_10000588C(&qword_101648040);
  uint64_t result = OSAllocatedUnfairLock.callAsFunction<A>(_:)();
  if (v4)
  {
    sub_10000588C(&qword_101638D40);
    return swift_willThrowTypedImpl();
  }
  else
  {
    *a1 = v3;
  }
  return result;
}

uint64_t type metadata accessor for PeerTrustService()
{
  return self;
}

uint64_t sub_100EAA174()
{
  v1[2] = v0;
  v1[3] = *v0;
  sub_10000588C(&qword_10164DBB0);
  v1[4] = swift_task_alloc();
  return _swift_task_switch(sub_100EAA230, v0, 0);
}

uint64_t sub_100EAA230()
{
  uint64_t v2 = v0[3];
  uint64_t v1 = v0[4];
  uint64_t v3 = v0[2];
  uint64_t v4 = type metadata accessor for TaskPriority();
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 56))(v1, 1, 1, v4);
  uint64_t v6 = sub_100EB0380(&qword_101661620, v5, (void (*)(uint64_t))type metadata accessor for PeerTrustService);
  uint64_t v7 = (void *)swift_allocObject();
  v7[2] = v3;
  v7[3] = v6;
  v7[4] = v3;
  v7[5] = v2;
  swift_retain_n();
  sub_1008F5E44(v1, (uint64_t)&unk_101661638, (uint64_t)v7);
  swift_release();
  swift_task_dealloc();
  uint64_t v8 = (uint64_t (*)(void))v0[1];
  return v8();
}

uint64_t sub_100EAA370(uint64_t a1)
{
  uint64_t v18 = *v1;
  uint64_t v3 = type metadata accessor for UUID();
  uint64_t v4 = *(void *)(v3 - 8);
  uint64_t v5 = *(void *)(v4 + 64);
  __chkstk_darwin(v3);
  uint64_t v6 = (char *)&v17 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = sub_10000588C(&qword_10164DBB0);
  __chkstk_darwin(v7 - 8);
  uint64_t v9 = (char *)&v17 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = type metadata accessor for TaskPriority();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 56))(v9, 1, 1, v10);
  (*(void (**)(char *, uint64_t, uint64_t))(v4 + 16))(v6, a1, v3);
  uint64_t v12 = sub_100EB0380(&qword_101661620, v11, (void (*)(uint64_t))type metadata accessor for PeerTrustService);
  unint64_t v13 = (*(unsigned __int8 *)(v4 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
  unint64_t v14 = (v5 + v13 + 7) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v15 = swift_allocObject();
  *(void *)(v15 + 16) = v1;
  *(void *)(v15 + 24) = v12;
  (*(void (**)(unint64_t, char *, uint64_t))(v4 + 32))(v15 + v13, v6, v3);
  *(void *)(v15 + v14) = v1;
  *(void *)(v15 + ((v14 + 15) & 0xFFFFFFFFFFFFFFF8)) = v18;
  swift_retain_n();
  sub_1008F5E44((uint64_t)v9, (uint64_t)&unk_101661660, v15);
  return swift_release();
}

uint64_t sub_100EAA5CC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  v5[22] = a4;
  v5[23] = a5;
  sub_10000588C(&qword_101639E88);
  v5[24] = swift_task_alloc();
  v5[25] = sub_10000588C((uint64_t *)&unk_1016607D0);
  v5[26] = swift_task_alloc();
  uint64_t v7 = type metadata accessor for OwnerPeerTrust();
  v5[27] = v7;
  v5[28] = *(void *)(v7 - 8);
  v5[29] = swift_task_alloc();
  uint64_t v8 = type metadata accessor for UUID();
  v5[30] = v8;
  uint64_t v9 = *(void *)(v8 - 8);
  v5[31] = v9;
  v5[32] = *(void *)(v9 + 64);
  v5[33] = swift_task_alloc();
  v5[34] = swift_task_alloc();
  v5[35] = swift_task_alloc();
  v5[36] = swift_task_alloc();
  return _swift_task_switch(sub_100EAA780, a5, 0);
}

uint64_t sub_100EAA780()
{
  uint64_t v22 = v0;
  if (qword_101637148 != -1) {
    swift_once();
  }
  uint64_t v1 = (long long *)(v0 + 7);
  uint64_t v2 = v0[22];
  uint64_t v3 = v0[36];
  uint64_t v5 = v0[30];
  uint64_t v4 = v0[31];
  uint64_t v6 = type metadata accessor for Logger();
  v0[37] = sub_100010324(v6, (uint64_t)qword_10170EDD8);
  uint64_t v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(v4 + 16);
  v0[38] = v7;
  v0[39] = (v4 + 16) & 0xFFFFFFFFFFFFLL | 0xE3BA000000000000;
  v7(v3, v2, v5);
  uint64_t v8 = Logger.logObject.getter();
  os_log_type_t v9 = static os_log_type_t.default.getter();
  BOOL v10 = os_log_type_enabled(v8, v9);
  uint64_t v11 = v0[36];
  uint64_t v12 = v0[30];
  uint64_t v13 = v0[31];
  if (v10)
  {
    uint64_t v14 = swift_slowAlloc();
    uint64_t v21 = swift_slowAlloc();
    *(_DWORD *)uint64_t v14 = 141558275;
    v0[20] = 1752392040;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v14 + 12) = 2081;
    sub_100EB0380((unint64_t *)&qword_101638B10, 255, (void (*)(uint64_t))&type metadata accessor for UUID);
    uint64_t v15 = dispatch thunk of CustomStringConvertible.description.getter();
    v0[21] = sub_1008FA0F0(v15, v16, &v21);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    (*(void (**)(uint64_t, uint64_t))(v13 + 8))(v11, v12);
    _os_log_impl((void *)&_mh_execute_header, v8, v9, "Received handlePeerTrustAck -- identifier: %{private,mask.hash}s", (uint8_t *)v14, 0x16u);
    swift_arrayDestroy();
    swift_slowDealloc();
    uint64_t v1 = (long long *)(v0 + 7);
    swift_slowDealloc();
  }
  else
  {
    (*(void (**)(void, void))(v13 + 8))(v0[36], v0[30]);
  }

  uint64_t v17 = qword_1016375E8;
  swift_retain();
  if (v17 != -1) {
    swift_once();
  }
  swift_beginAccess();
  uint64_t result = sub_10001D074((uint64_t)&xmmword_10166E8F0, (uint64_t)v1, (uint64_t *)&unk_101638D30);
  if (v0[10])
  {
    sub_10001CEB0(v1, (uint64_t)(v0 + 2));
    swift_release();
    sub_10001CD44(v0 + 2, v0[5]);
    uint64_t v20 = (uint64_t (__cdecl *)())((char *)&dword_1016390D8 + dword_1016390D8);
    uint64_t v19 = (void *)swift_task_alloc();
    v0[40] = v19;
    *uint64_t v19 = v0;
    v19[1] = sub_100EAAB14;
    return v20();
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_100EAAB14(uint64_t a1)
{
  uint64_t v2 = *(void *)(*(void *)v1 + 184);
  *(void *)(*(void *)v1 + 328) = a1;
  swift_task_dealloc();
  return _swift_task_switch(sub_100EAAC2C, v2, 0);
}

uint64_t sub_100EAAC2C()
{
  uint64_t v1 = (uint64_t)(v0 + 2);
  if (v0[41])
  {
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v1);
    uint64_t v2 = v0[41];
    return _swift_task_switch(sub_100EAAF18, v2, 0);
  }
  else
  {
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v1);
    uint64_t v3 = Logger.logObject.getter();
    os_log_type_t v4 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v3, v4))
    {
      uint64_t v5 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v5 = 0;
      _os_log_impl((void *)&_mh_execute_header, v3, v4, "No BeaconStoreActor available!", v5, 2u);
      swift_slowDealloc();
    }

    sub_10001CEC8();
    swift_allocError();
    *uint64_t v6 = 0xD000000000000010;
    v6[1] = 0x80000001013F23D0;
    swift_willThrow();
    swift_errorRetain();
    uint64_t v7 = Logger.logObject.getter();
    os_log_type_t v8 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v7, v8))
    {
      os_log_type_t v9 = (uint8_t *)swift_slowAlloc();
      BOOL v10 = (void *)swift_slowAlloc();
      *(_DWORD *)os_log_type_t v9 = 138412290;
      uint64_t v11 = _convertErrorToNSError(_:)();
      v0[15] = v11;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *BOOL v10 = v11;
      swift_errorRelease();
      _os_log_impl((void *)&_mh_execute_header, v7, v8, "Error in handlePeerTrustAck: %@", v9, 0xCu);
      sub_10000588C((uint64_t *)&unk_101638EA0);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      swift_errorRelease();
    }
    else
    {
      swift_errorRelease();
      swift_errorRelease();
    }
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v12 = (uint64_t (*)(void))v0[1];
    return v12();
  }
}

uint64_t sub_100EAAF18()
{
  *(void *)(v0 + 336) = *(void *)(*(void *)(v0 + 328) + 128);
  return _swift_task_switch(sub_100EAAF40, 0, 0);
}

uint64_t sub_100EAAF40()
{
  uint64_t v1 = (void *)swift_task_alloc();
  *(void *)(v0 + 344) = v1;
  *uint64_t v1 = v0;
  v1[1] = sub_100EAB01C;
  uint64_t v2 = *(void *)(v0 + 336);
  return withCheckedContinuation<A>(isolation:function:_:)(v1, 0, 0, 0x696176416E656877, 0xEF2928656C62616CLL, sub_10007561C, v2, (char *)&type metadata for () + 8);
}

uint64_t sub_100EAB01C()
{
  swift_task_dealloc();
  return _swift_task_switch(sub_100EAB118, 0, 0);
}

uint64_t sub_100EAB118()
{
  return _swift_task_switch(sub_100EAB134, *(void *)(v0 + 328), 0);
}

uint64_t sub_100EAB134()
{
  uint64_t v1 = v0[41];
  uint64_t v2 = (void (*)(uint64_t, uint64_t, uint64_t))v0[38];
  uint64_t v3 = v0[35];
  uint64_t v4 = v0[31];
  uint64_t v5 = v0[30];
  uint64_t v6 = v0[22];
  v0[44] = *(void *)(v1 + 136);
  v2(v3, v6, v5);
  unint64_t v7 = (*(unsigned __int8 *)(v4 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
  uint64_t v8 = swift_allocObject();
  v0[45] = v8;
  *(void *)(v8 + 16) = v1;
  (*(void (**)(unint64_t, uint64_t, uint64_t))(v4 + 32))(v8 + v7, v3, v5);
  swift_retain();
  return _swift_task_switch(sub_100EAB220, 0, 0);
}

uint64_t sub_100EAB220()
{
  uint64_t v2 = v0[44];
  uint64_t v1 = v0[45];
  uint64_t v3 = (void *)swift_task_alloc();
  v0[46] = v3;
  v3[2] = v2;
  v3[3] = sub_100272C28;
  v3[4] = v1;
  uint64_t v4 = (void *)swift_task_alloc();
  v0[47] = v4;
  *uint64_t v4 = v0;
  v4[1] = sub_100EAB324;
  uint64_t v6 = v0[25];
  uint64_t v5 = v0[26];
  return withCheckedContinuation<A>(isolation:function:_:)(v5, 0, 0, 0xD000000000000012, 0x80000001013F1870, sub_100090E94, v3, v6);
}

uint64_t sub_100EAB324()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 184);
  swift_task_dealloc();
  swift_release();
  swift_task_dealloc();
  return _swift_task_switch(sub_100EAB474, v1, 0);
}

uint64_t sub_100EAB474()
{
  uint64_t v27 = v0;
  uint64_t v1 = v0[26];
  if ((*(unsigned int (**)(uint64_t, uint64_t, void))(v0[28] + 48))(v1, 1, v0[27]) == 1)
  {
    uint64_t v2 = (void (*)(uint64_t, uint64_t, uint64_t))v0[38];
    uint64_t v3 = v0[34];
    uint64_t v4 = v0[30];
    uint64_t v5 = v0[22];
    sub_10001DAB4(v1, (uint64_t *)&unk_1016607D0);
    v2(v3, v5, v4);
    uint64_t v6 = Logger.logObject.getter();
    os_log_type_t v7 = static os_log_type_t.error.getter();
    BOOL v8 = os_log_type_enabled(v6, v7);
    uint64_t v9 = v0[34];
    uint64_t v10 = v0[30];
    uint64_t v11 = v0[31];
    if (v8)
    {
      uint64_t v12 = swift_slowAlloc();
      uint64_t v26 = swift_slowAlloc();
      *(_DWORD *)uint64_t v12 = 141558275;
      v0[16] = 1752392040;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v12 + 12) = 2081;
      sub_100EB0380((unint64_t *)&qword_101638B10, 255, (void (*)(uint64_t))&type metadata accessor for UUID);
      uint64_t v13 = dispatch thunk of CustomStringConvertible.description.getter();
      v0[17] = sub_1008FA0F0(v13, v14, &v26);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      (*(void (**)(uint64_t, uint64_t))(v11 + 8))(v9, v10);
      _os_log_impl((void *)&_mh_execute_header, v6, v7, "Received PeerTrustAck for unknown record: %{private,mask.hash}s", (uint8_t *)v12, 0x16u);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      (*(void (**)(void, void))(v11 + 8))(v0[34], v0[30]);
    }

    sub_100EAF964();
    swift_allocError();
    unsigned char *v17 = 0;
    swift_willThrow();
    swift_release();
    swift_errorRetain();
    uint64_t v18 = Logger.logObject.getter();
    os_log_type_t v19 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v18, v19))
    {
      uint64_t v20 = (uint8_t *)swift_slowAlloc();
      uint64_t v21 = (void *)swift_slowAlloc();
      *(_DWORD *)uint64_t v20 = 138412290;
      uint64_t v22 = _convertErrorToNSError(_:)();
      v0[15] = v22;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *uint64_t v21 = v22;
      swift_errorRelease();
      _os_log_impl((void *)&_mh_execute_header, v18, v19, "Error in handlePeerTrustAck: %@", v20, 0xCu);
      sub_10000588C((uint64_t *)&unk_101638EA0);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      swift_errorRelease();
    }
    else
    {
      swift_errorRelease();
      swift_errorRelease();
    }
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v23 = (uint64_t (*)(void))v0[1];
    return v23();
  }
  else
  {
    uint64_t v15 = v0[29];
    uint64_t v16 = v0[24];
    sub_100EB0318(v1, v15, (uint64_t (*)(void))type metadata accessor for OwnerPeerTrust);
    *(void *)(swift_task_alloc() + 16) = v15;
    sub_100EE07C0((void (*)(uint64_t, _UNKNOWN **))sub_100EAF9B8, v16);
    swift_task_dealloc();
    uint64_t v25 = v0[41];
    return _swift_task_switch(sub_100EAB964, v25, 0);
  }
}

uint64_t sub_100EAB964()
{
  *(void *)(v0 + 384) = *(void *)(*(void *)(v0 + 328) + 128);
  return _swift_task_switch(sub_100EAB98C, 0, 0);
}

uint64_t sub_100EAB98C()
{
  uint64_t v1 = v0[48];
  uint64_t v2 = v0[24];
  uint64_t v3 = swift_task_alloc();
  v0[49] = v3;
  *(void *)(v3 + 16) = v1;
  *(void *)(v3 + 24) = v2;
  uint64_t v4 = (void *)swift_task_alloc();
  v0[50] = v4;
  *uint64_t v4 = v0;
  v4[1] = sub_100EABA84;
  return withCheckedThrowingContinuation<A>(isolation:function:_:)(v4, 0, 0, 0xD000000000000011, 0x80000001013F27F0, sub_100074FFC, v3, (char *)&type metadata for () + 8);
}

uint64_t sub_100EABA84()
{
  *(void *)(*(void *)v1 + 408) = v0;
  swift_task_dealloc();
  if (v0)
  {
    uint64_t v2 = sub_100EABBA0;
  }
  else
  {
    swift_task_dealloc();
    uint64_t v2 = sub_100EABE1C;
  }
  return _swift_task_switch(v2, 0, 0);
}

uint64_t sub_100EABBA0()
{
  uint64_t v1 = *(void *)(v0 + 184);
  swift_task_dealloc();
  return _swift_task_switch(sub_100EABC0C, v1, 0);
}

uint64_t sub_100EABC0C()
{
  uint64_t v1 = v0[29];
  uint64_t v2 = v0[24];
  swift_release();
  sub_10001DAB4(v2, &qword_101639E88);
  sub_100EB01A0(v1, (uint64_t (*)(void))type metadata accessor for OwnerPeerTrust);
  swift_errorRetain();
  uint64_t v3 = Logger.logObject.getter();
  os_log_type_t v4 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v3, v4))
  {
    uint64_t v5 = (uint8_t *)swift_slowAlloc();
    uint64_t v6 = (void *)swift_slowAlloc();
    *(_DWORD *)uint64_t v5 = 138412290;
    uint64_t v7 = _convertErrorToNSError(_:)();
    v0[15] = v7;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *uint64_t v6 = v7;
    swift_errorRelease();
    _os_log_impl((void *)&_mh_execute_header, v3, v4, "Error in handlePeerTrustAck: %@", v5, 0xCu);
    sub_10000588C((uint64_t *)&unk_101638EA0);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    swift_errorRelease();
  }
  else
  {
    swift_errorRelease();
    swift_errorRelease();
  }
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  BOOL v8 = (uint64_t (*)(void))v0[1];
  return v8();
}

uint64_t sub_100EABE1C()
{
  return _swift_task_switch(sub_100EABE38, *(void *)(v0 + 184), 0);
}

uint64_t sub_100EABE38()
{
  uint64_t v19 = v0;
  (*(void (**)(void, void, void))(v0 + 304))(*(void *)(v0 + 264), *(void *)(v0 + 176), *(void *)(v0 + 240));
  uint64_t v1 = Logger.logObject.getter();
  os_log_type_t v2 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v1, v2))
  {
    uint64_t v3 = *(void *)(v0 + 264);
    uint64_t v4 = *(void *)(v0 + 240);
    uint64_t v5 = *(void *)(v0 + 248);
    uint64_t v17 = *(void *)(v0 + 192);
    uint64_t v6 = swift_slowAlloc();
    uint64_t v16 = swift_slowAlloc();
    *(void *)(v0 + 144) = 1752392040;
    uint64_t v18 = v16;
    *(_DWORD *)uint64_t v6 = 141558275;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v6 + 12) = 2081;
    sub_100EB0380((unint64_t *)&qword_101638B10, 255, (void (*)(uint64_t))&type metadata accessor for UUID);
    uint64_t v7 = dispatch thunk of CustomStringConvertible.description.getter();
    *(void *)(v0 + 152) = sub_1008FA0F0(v7, v8, &v18);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v3, v4);
    _os_log_impl((void *)&_mh_execute_header, v1, v2, "OwnerPeerTrust %{private,mask.hash}s state changed to .acknowledged", (uint8_t *)v6, 0x16u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
    swift_release();

    uint64_t v9 = v17;
  }
  else
  {
    uint64_t v10 = *(void *)(v0 + 264);
    uint64_t v11 = *(void *)(v0 + 240);
    uint64_t v12 = *(void *)(v0 + 248);
    uint64_t v13 = *(void *)(v0 + 192);

    swift_release();
    (*(void (**)(uint64_t, uint64_t))(v12 + 8))(v10, v11);
    uint64_t v9 = v13;
  }
  sub_10001DAB4(v9, &qword_101639E88);
  sub_100EB01A0(*(void *)(v0 + 232), (uint64_t (*)(void))type metadata accessor for OwnerPeerTrust);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  unint64_t v14 = *(uint64_t (**)(void))(v0 + 8);
  return v14();
}

uint64_t sub_100EAC114(uint64_t a1)
{
  *(void *)(v2 + 24) = a1;
  return _swift_task_switch(sub_100EAC134, v1, 0);
}

uint64_t sub_100EAC134()
{
  uint64_t v11 = v0;
  if (qword_101637148 != -1) {
    swift_once();
  }
  uint64_t v1 = type metadata accessor for Logger();
  sub_100010324(v1, (uint64_t)qword_10170EDD8);
  swift_bridgeObjectRetain_n();
  uint64_t v2 = Logger.logObject.getter();
  os_log_type_t v3 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v2, v3))
  {
    uint64_t v4 = (uint8_t *)swift_slowAlloc();
    uint64_t v10 = swift_slowAlloc();
    *(_DWORD *)uint64_t v4 = 136315138;
    sub_100551D08();
    swift_bridgeObjectRetain();
    uint64_t v5 = Set.description.getter();
    unint64_t v7 = v6;
    swift_bridgeObjectRelease();
    *(void *)(v0 + 16) = sub_1008FA0F0(v5, v7, &v10);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease_n();
    _os_log_impl((void *)&_mh_execute_header, v2, v3, "Messaging accounts changed. Accounts: %s", v4, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    swift_bridgeObjectRelease_n();
  }

  unint64_t v8 = *(uint64_t (**)(void))(v0 + 8);
  return v8();
}

uint64_t sub_100EAC354(uint64_t a1)
{
  *(void *)(v2 + 24) = a1;
  return _swift_task_switch(sub_100EAC374, v1, 0);
}

uint64_t sub_100EAC374()
{
  uint64_t v11 = v0;
  if (qword_101637148 != -1) {
    swift_once();
  }
  uint64_t v1 = type metadata accessor for Logger();
  sub_100010324(v1, (uint64_t)qword_10170EDD8);
  swift_bridgeObjectRetain_n();
  uint64_t v2 = Logger.logObject.getter();
  os_log_type_t v3 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v2, v3))
  {
    uint64_t v4 = (uint8_t *)swift_slowAlloc();
    uint64_t v10 = swift_slowAlloc();
    *(_DWORD *)uint64_t v4 = 136315138;
    sub_100CF61D4();
    swift_bridgeObjectRetain();
    uint64_t v5 = Set.description.getter();
    unint64_t v7 = v6;
    swift_bridgeObjectRelease();
    *(void *)(v0 + 16) = sub_1008FA0F0(v5, v7, &v10);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease_n();
    _os_log_impl((void *)&_mh_execute_header, v2, v3, "Messaging devices changed. Devices: %s", v4, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    swift_bridgeObjectRelease_n();
  }

  unint64_t v8 = *(uint64_t (**)(void))(v0 + 8);
  return v8();
}

uint64_t sub_100EAC594(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v13 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))((char *)&dword_101661670 + dword_101661670);
  uint64_t v11 = (void *)swift_task_alloc();
  *(void *)(v6 + 16) = v11;
  void *v11 = v6;
  v11[1] = sub_100033F68;
  return v13(a3, a4, a5, a6);
}

uint64_t sub_100EAC668(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, void *a6, uint64_t a7, uint64_t a8)
{
  uint64_t v13 = a6[1];
  uint64_t v14 = a6[2];
  uint64_t v19 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))((char *)&dword_101661650 + dword_101661650);
  uint64_t v15 = a6[3];
  uint64_t v16 = *(unsigned __int8 *)a6;
  uint64_t v17 = (void *)swift_task_alloc();
  *(void *)(v8 + 16) = v17;
  void *v17 = v8;
  v17[1] = sub_100033F68;
  return v19(a3, a4, a5, v16, v13, v14, v15, a7, a8);
}

uint64_t sub_100EAC768(uint64_t a1)
{
  uint64_t v4 = *v1;
  uint64_t v5 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v5;
  *uint64_t v5 = v2;
  v5[1] = sub_100033F68;
  v5[3] = a1;
  return _swift_task_switch(sub_100EAC134, v4, 0);
}

uint64_t sub_100EAC818(uint64_t a1)
{
  uint64_t v4 = *v1;
  uint64_t v5 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v5;
  *uint64_t v5 = v2;
  v5[1] = sub_100033F68;
  v5[3] = a1;
  return _swift_task_switch(sub_100EAC374, v4, 0);
}

uint64_t sub_100EAC8C8(uint64_t a1, uint64_t a2)
{
  uint64_t result = sub_100EB0380(&qword_101661620, a2, (void (*)(uint64_t))type metadata accessor for PeerTrustService);
  *(void *)(a1 + 8) = result;
  return result;
}

uint64_t sub_100EAC920()
{
  uint64_t v0 = type metadata accessor for Logger();
  sub_10001E384(v0, qword_10170EE08);
  sub_100010324(v0, (uint64_t)qword_10170EE08);
  return Logger.init(subsystem:category:)();
}

void sub_100EAC9A8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = a1;
  if ((a1 & 0xC000000000000001) != 0)
  {
    swift_bridgeObjectRetain();
    __CocoaSet.makeIterator()();
    sub_100CFD870();
    sub_100EB0380(&qword_101648030, 255, (void (*)(uint64_t))sub_100CFD870);
    Set.Iterator.init(_cocoa:)();
    uint64_t v3 = v29;
    uint64_t v26 = v30;
    uint64_t v4 = v31;
    int64_t v5 = v32;
    unint64_t v6 = v33;
  }
  else
  {
    uint64_t v7 = -1 << *(unsigned char *)(a1 + 32);
    uint64_t v26 = a1 + 56;
    uint64_t v8 = ~v7;
    uint64_t v9 = -v7;
    if (v9 < 64) {
      uint64_t v10 = ~(-1 << v9);
    }
    else {
      uint64_t v10 = -1;
    }
    unint64_t v6 = v10 & *(void *)(a1 + 56);
    swift_bridgeObjectRetain();
    uint64_t v4 = v8;
    int64_t v5 = 0;
  }
  uint64_t v24 = v4;
  int64_t v25 = (unint64_t)(v4 + 64) >> 6;
  while (v3 < 0)
  {
    if (!__CocoaSet.Iterator.next()()) {
      goto LABEL_37;
    }
    sub_100CFD870();
    swift_unknownObjectRetain();
    swift_dynamicCast();
    id v14 = v34;
    swift_unknownObjectRelease();
    uint64_t v12 = v6;
    if (!v34) {
      goto LABEL_37;
    }
LABEL_33:
    id v19 = [v14 altDSID:v24];
    if (v19)
    {
      uint64_t v20 = v19;
      uint64_t v21 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      uint64_t v23 = v22;

      if (v21 == a2 && v23 == a3)
      {
        swift_bridgeObjectRelease();
LABEL_37:
        sub_100132C20();
        return;
      }
      char v11 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      if (v11) {
        goto LABEL_37;
      }
    }

    unint64_t v6 = v12;
  }
  if (v6)
  {
    uint64_t v12 = (v6 - 1) & v6;
    unint64_t v13 = __clz(__rbit64(v6)) | (v5 << 6);
LABEL_32:
    id v14 = *(id *)(*(void *)(v3 + 48) + 8 * v13);
    if (!v14) {
      goto LABEL_37;
    }
    goto LABEL_33;
  }
  int64_t v15 = v5 + 1;
  if (!__OFADD__(v5, 1))
  {
    if (v15 >= v25) {
      goto LABEL_37;
    }
    int64_t v16 = v5;
    unint64_t v17 = *(void *)(v26 + 8 * v15);
    ++v5;
    if (!v17)
    {
      int64_t v5 = v15 + 1;
      if (v15 + 1 >= v25) {
        goto LABEL_37;
      }
      unint64_t v17 = *(void *)(v26 + 8 * v5);
      if (!v17)
      {
        int64_t v5 = v15 + 2;
        if (v15 + 2 >= v25) {
          goto LABEL_37;
        }
        unint64_t v17 = *(void *)(v26 + 8 * v5);
        if (!v17)
        {
          int64_t v5 = v15 + 3;
          if (v15 + 3 >= v25) {
            goto LABEL_37;
          }
          unint64_t v17 = *(void *)(v26 + 8 * v5);
          if (!v17)
          {
            int64_t v5 = v15 + 4;
            if (v15 + 4 >= v25) {
              goto LABEL_37;
            }
            unint64_t v17 = *(void *)(v26 + 8 * v5);
            if (!v17)
            {
              uint64_t v18 = v16 + 6;
              while (v25 != v18)
              {
                unint64_t v17 = *(void *)(v26 + 8 * v18++);
                if (v17)
                {
                  int64_t v5 = v18 - 1;
                  goto LABEL_31;
                }
              }
              goto LABEL_37;
            }
          }
        }
      }
    }
LABEL_31:
    uint64_t v12 = (v17 - 1) & v17;
    unint64_t v13 = __clz(__rbit64(v17)) + (v5 << 6);
    goto LABEL_32;
  }
  __break(1u);
}

uint64_t sub_100EACD20(uint64_t a1)
{
  v1[15] = a1;
  v1[16] = type metadata accessor for PeerCommunicationIdentifier();
  v1[17] = swift_task_alloc();
  v1[18] = swift_task_alloc();
  v1[19] = swift_task_alloc();
  v1[20] = swift_task_alloc();
  v1[21] = swift_task_alloc();
  v1[22] = swift_task_alloc();
  v1[23] = swift_task_alloc();
  v1[24] = swift_task_alloc();
  v1[25] = swift_task_alloc();
  return _swift_task_switch(sub_100EACE18, 0, 0);
}

uint64_t sub_100EACE18()
{
  uint64_t v43 = v0;
  if (qword_101637148 != -1) {
    swift_once();
  }
  uint64_t v1 = *(void *)(v0 + 120);
  uint64_t v2 = *(void *)(v0 + 200);
  uint64_t v3 = type metadata accessor for Logger();
  *(void *)(v0 + 208) = sub_100010324(v3, (uint64_t)qword_10170EDD8);
  sub_100EB0138(v1, v2, (uint64_t (*)(void))type metadata accessor for PeerCommunicationIdentifier);
  uint64_t v4 = Logger.logObject.getter();
  os_log_type_t v5 = static os_log_type_t.default.getter();
  BOOL v6 = os_log_type_enabled(v4, v5);
  uint64_t v7 = *(void *)(v0 + 200);
  if (v6)
  {
    uint64_t v8 = (uint8_t *)swift_slowAlloc();
    v42[0] = swift_slowAlloc();
    *(_DWORD *)uint64_t v8 = 136315138;
    uint64_t v9 = sub_1009C77D8();
    *(void *)(v0 + 112) = sub_1008FA0F0(v9, v10, v42);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    sub_100EB01A0(v7, (uint64_t (*)(void))type metadata accessor for PeerCommunicationIdentifier);
    _os_log_impl((void *)&_mh_execute_header, v4, v5, "Using MessagingQueryController to query %s.", v8, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    sub_100EB01A0(v7, (uint64_t (*)(void))type metadata accessor for PeerCommunicationIdentifier);
  }

  sub_100EB0138(*(void *)(v0 + 120), *(void *)(v0 + 192), (uint64_t (*)(void))type metadata accessor for PeerCommunicationIdentifier);
  uint64_t v11 = 0;
  uint64_t v12 = 0;
  unint64_t v13 = 0;
  switch(swift_getEnumCaseMultiPayload())
  {
    case 1u:
      sub_100EB01A0(*(void *)(v0 + 192), (uint64_t (*)(void))type metadata accessor for PeerCommunicationIdentifier);
      goto LABEL_9;
    case 3u:
      uint64_t v24 = *(unsigned __int8 **)(v0 + 192);
      uint64_t v11 = *v24;
      uint64_t v12 = *((void *)v24 + 1);
      unint64_t v13 = *((void *)v24 + 2);
      sub_100EB0138(*(void *)(v0 + 120), *(void *)(v0 + 176), (uint64_t (*)(void))type metadata accessor for PeerCommunicationIdentifier);
      swift_bridgeObjectRetain_n();
      int64_t v25 = Logger.logObject.getter();
      os_log_type_t v26 = static os_log_type_t.default.getter();
      BOOL v27 = os_log_type_enabled(v25, v26);
      uint64_t v28 = *(void *)(v0 + 176);
      if (v27)
      {
        os_log_type_t type = v26;
        uint64_t v29 = swift_slowAlloc();
        v42[0] = swift_slowAlloc();
        *(_DWORD *)uint64_t v29 = 136315394;
        uint64_t v30 = sub_1009C77D8();
        *(void *)(v0 + 88) = sub_1008FA0F0(v30, v31, v42);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        sub_100EB01A0(v28, (uint64_t (*)(void))type metadata accessor for PeerCommunicationIdentifier);
        *(_WORD *)(v29 + 12) = 2080;
        swift_bridgeObjectRetain();
        *(void *)(v0 + 96) = sub_1008FA0F0(v12, v13, v42);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease_n();
        _os_log_impl((void *)&_mh_execute_header, v25, type, "MessagingQueryController found %s destination %s.", (uint8_t *)v29, 0x16u);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
      }
      else
      {
        sub_100EB01A0(*(void *)(v0 + 176), (uint64_t (*)(void))type metadata accessor for PeerCommunicationIdentifier);
        swift_bridgeObjectRelease_n();
      }

      goto LABEL_27;
    case 4u:
      uint64_t v32 = *(void *)(v0 + 192);
      char v33 = *(unsigned char *)v32;
      *(unsigned char *)(v0 + 376) = *(unsigned char *)v32;
      uint64_t v34 = *(void *)(v32 + 8);
      *(void *)(v0 + 216) = v34;
      uint64_t v35 = *(void *)(v32 + 16);
      *(void *)(v0 + 224) = v35;
      *(void *)(v0 + 232) = *(void *)(v32 + 24);
      *(void *)(v0 + 240) = *(void *)(v32 + 32);
      if (qword_1016368C0 != -1) {
        swift_once();
      }
      BOOL v36 = (void *)swift_task_alloc();
      *(void *)(v0 + 248) = v36;
      *BOOL v36 = v0;
      v36[1] = sub_100EAD720;
      return sub_10127B8C8(v33, v34, v35);
    case 5u:
      uint64_t v37 = *(void *)(v0 + 192);
      *(void *)(v0 + 280) = *(void *)v37;
      *(void *)(v0 + 288) = *(void *)(v37 + 8);
      *(unsigned char *)(v0 + 377) = *(unsigned char *)(v37 + 16);
      *(void *)(v0 + 296) = *(void *)(v37 + 24);
      *(void *)(v0 + 304) = *(void *)(v37 + 32);
      *(void *)(v0 + 312) = *(void *)(v37 + 40);
      *(void *)(v0 + 320) = *(void *)(v37 + 48);
      uint64_t v38 = (void *)swift_task_alloc();
      *(void *)(v0 + 328) = v38;
      uint64_t v39 = sub_10000588C(&qword_10165CFA0);
      *uint64_t v38 = v0;
      v38[1] = sub_100EADDA8;
      return unsafeBlocking<A>(_:)(v0 + 16, sub_100EA1914, 0, v39);
    case 6u:
      goto LABEL_9;
    case 7u:
LABEL_27:
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      uint64_t v40 = *(uint64_t (**)(uint64_t, uint64_t, unint64_t))(v0 + 8);
      uint64_t result = v40(v11, v12, v13);
      break;
    default:
      swift_bridgeObjectRelease();
LABEL_9:
      sub_100EB0138(*(void *)(v0 + 120), *(void *)(v0 + 184), (uint64_t (*)(void))type metadata accessor for PeerCommunicationIdentifier);
      id v14 = Logger.logObject.getter();
      os_log_type_t v15 = static os_log_type_t.default.getter();
      BOOL v16 = os_log_type_enabled(v14, v15);
      uint64_t v17 = *(void *)(v0 + 184);
      if (v16)
      {
        uint64_t v18 = (uint8_t *)swift_slowAlloc();
        v42[0] = swift_slowAlloc();
        *(_DWORD *)uint64_t v18 = 136315138;
        uint64_t v19 = sub_1009C77D8();
        *(void *)(v0 + 104) = sub_1008FA0F0(v19, v20, v42);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        sub_100EB01A0(v17, (uint64_t (*)(void))type metadata accessor for PeerCommunicationIdentifier);
        _os_log_impl((void *)&_mh_execute_header, v14, v15, "MessagingQueryController does not support %s type.", v18, 0xCu);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
      }
      else
      {
        sub_100EB01A0(*(void *)(v0 + 184), (uint64_t (*)(void))type metadata accessor for PeerCommunicationIdentifier);
      }

      sub_100EAF964();
      swift_allocError();
      *uint64_t v21 = 2;
      swift_willThrow();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      uint64_t v22 = *(uint64_t (**)(void))(v0 + 8);
      uint64_t result = v22();
      break;
  }
  return result;
}

uint64_t sub_100EAD720(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = (void *)*v3;
  v4[32] = a1;
  v4[33] = a2;
  v4[34] = v2;
  swift_task_dealloc();
  if (v2) {
    os_log_type_t v5 = sub_100EADCC0;
  }
  else {
    os_log_type_t v5 = sub_100EAD838;
  }
  return _swift_task_switch(v5, 0, 0);
}

uint64_t sub_100EAD838()
{
  uint64_t v28 = v0;
  uint64_t v1 = *(void *)(v0 + 264);
  if (v1)
  {
    if (*(void *)(v0 + 232) == *(void *)(v0 + 256) && v1 == *(void *)(v0 + 240))
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
    }
    else
    {
      char v3 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if ((v3 & 1) == 0) {
        goto LABEL_9;
      }
    }
    sub_100EB0138(*(void *)(v0 + 120), *(void *)(v0 + 168), (uint64_t (*)(void))type metadata accessor for PeerCommunicationIdentifier);
    swift_bridgeObjectRetain_n();
    unint64_t v13 = Logger.logObject.getter();
    os_log_type_t v14 = static os_log_type_t.default.getter();
    BOOL v15 = os_log_type_enabled(v13, v14);
    unint64_t v16 = *(void *)(v0 + 224);
    if (v15)
    {
      uint64_t v24 = *(void *)(v0 + 216);
      uint64_t v17 = *(void *)(v0 + 168);
      uint64_t v18 = swift_slowAlloc();
      uint64_t v27 = swift_slowAlloc();
      *(_DWORD *)uint64_t v18 = 136315394;
      uint64_t v19 = sub_1009C77D8();
      *(void *)(v0 + 72) = sub_1008FA0F0(v19, v20, &v27);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      sub_100EB01A0(v17, (uint64_t (*)(void))type metadata accessor for PeerCommunicationIdentifier);
      *(_WORD *)(v18 + 12) = 2080;
      swift_bridgeObjectRetain();
      *(void *)(v0 + 80) = sub_1008FA0F0(v24, v16, &v27);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      _os_log_impl((void *)&_mh_execute_header, v13, v14, "MessagingQueryController found %s ids destination %s.", (uint8_t *)v18, 0x16u);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      sub_100EB01A0(*(void *)(v0 + 168), (uint64_t (*)(void))type metadata accessor for PeerCommunicationIdentifier);
      swift_bridgeObjectRelease_n();
    }

    uint64_t v25 = *(void *)(v0 + 224);
    uint64_t v26 = *(void *)(v0 + 216);
    uint64_t v21 = *(unsigned __int8 *)(v0 + 376);
    goto LABEL_18;
  }
  swift_bridgeObjectRelease();
LABEL_9:
  uint64_t v4 = *(void *)(v0 + 160);
  uint64_t v5 = *(void *)(v0 + 120);
  swift_bridgeObjectRelease();
  sub_100EB0138(v5, v4, (uint64_t (*)(void))type metadata accessor for PeerCommunicationIdentifier);
  BOOL v6 = Logger.logObject.getter();
  os_log_type_t v7 = static os_log_type_t.default.getter();
  BOOL v8 = os_log_type_enabled(v6, v7);
  uint64_t v9 = *(void *)(v0 + 160);
  if (v8)
  {
    unint64_t v10 = (uint8_t *)swift_slowAlloc();
    uint64_t v27 = swift_slowAlloc();
    *(_DWORD *)unint64_t v10 = 136315138;
    uint64_t v11 = sub_1009C77D8();
    *(void *)(v0 + 64) = sub_1008FA0F0(v11, v12, &v27);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    sub_100EB01A0(v9, (uint64_t (*)(void))type metadata accessor for PeerCommunicationIdentifier);
    _os_log_impl((void *)&_mh_execute_header, v6, v7, "MessagingQueryController cannot reach %s because the correlation id changed.", v10, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    sub_100EB01A0(*(void *)(v0 + 160), (uint64_t (*)(void))type metadata accessor for PeerCommunicationIdentifier);
  }

  uint64_t v21 = 0;
  uint64_t v25 = 0;
  uint64_t v26 = 0;
LABEL_18:
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v22 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v0 + 8);
  return v22(v21, v26, v25);
}

uint64_t sub_100EADCC0()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_100EADDA8()
{
  *(void *)(*(void *)v1 + 336) = v0;
  swift_task_dealloc();
  if (v0)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v2 = sub_100EAE978;
  }
  else
  {
    uint64_t v2 = sub_100EADEE4;
  }
  return _swift_task_switch(v2, 0, 0);
}

uint64_t sub_100EADEE4()
{
  uint64_t v31 = v0;
  uint64_t v1 = *(void *)(v0 + 280);
  uint64_t v2 = *(void *)(v0 + 288);
  uint64_t v3 = *(void *)(v0 + 16);
  swift_bridgeObjectRetain();
  sub_100EAC9A8(v3, v1, v2);
  uint64_t v5 = v4;
  swift_bridgeObjectRelease_n();
  swift_bridgeObjectRelease();
  if (v5)
  {
    id v6 = [v5 appleID];
    if (v6)
    {
      os_log_type_t v7 = v6;
      static String._unconditionallyBridgeFromObjectiveC(_:)();

      _s12searchpartyd20MessagingDestinationV6stringACSgSS_tcfC_0();
      if (v10)
      {
        unsigned __int8 v11 = v8;
        uint64_t v12 = v9;
        unint64_t v13 = v10;
        uint64_t v14 = *(void *)(v0 + 152);
        uint64_t v15 = *(void *)(v0 + 120);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        sub_100EB0138(v15, v14, (uint64_t (*)(void))type metadata accessor for PeerCommunicationIdentifier);
        swift_bridgeObjectRetain_n();
        unint64_t v16 = Logger.logObject.getter();
        os_log_type_t v17 = static os_log_type_t.default.getter();
        BOOL v18 = os_log_type_enabled(v16, v17);
        uint64_t v19 = *(void *)(v0 + 152);
        uint64_t v29 = v12;
        if (v18)
        {
          uint64_t v20 = swift_slowAlloc();
          v30[0] = swift_slowAlloc();
          *(_DWORD *)uint64_t v20 = 136315394;
          uint64_t v21 = sub_1009C77D8();
          *(void *)(v0 + 48) = sub_1008FA0F0(v21, v22, v30);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease();
          sub_100EB01A0(v19, (uint64_t (*)(void))type metadata accessor for PeerCommunicationIdentifier);
          *(_WORD *)(v20 + 12) = 2080;
          swift_bridgeObjectRetain();
          *(void *)(v0 + 56) = sub_1008FA0F0(v29, v13, v30);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease_n();
          _os_log_impl((void *)&_mh_execute_header, v16, v17, "MessagingQueryController found %s is a family member %s.", (uint8_t *)v20, 0x16u);
          swift_arrayDestroy();
          swift_slowDealloc();
          swift_slowDealloc();
        }
        else
        {

          sub_100EB01A0(v19, (uint64_t (*)(void))type metadata accessor for PeerCommunicationIdentifier);
          swift_bridgeObjectRelease_n();
        }
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        uint64_t v28 = *(uint64_t (**)(void, uint64_t, unint64_t))(v0 + 8);
        return v28(v11, v29, v13);
      }
    }
  }
  if (qword_1016368C0 != -1) {
    swift_once();
  }
  uint64_t v23 = (void *)swift_task_alloc();
  *(void *)(v0 + 344) = v23;
  *uint64_t v23 = v0;
  v23[1] = sub_100EAE2F8;
  uint64_t v24 = *(void *)(v0 + 296);
  uint64_t v25 = *(void *)(v0 + 304);
  char v26 = *(unsigned char *)(v0 + 377);
  return sub_10127B8C8(v26, v24, v25);
}

uint64_t sub_100EAE2F8(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = (void *)*v3;
  v4[44] = a1;
  v4[45] = a2;
  v4[46] = v2;
  swift_task_dealloc();
  if (v2) {
    uint64_t v5 = sub_100EAE890;
  }
  else {
    uint64_t v5 = sub_100EAE410;
  }
  return _swift_task_switch(v5, 0, 0);
}

uint64_t sub_100EAE410()
{
  uint64_t v28 = v0;
  uint64_t v1 = *(void *)(v0 + 360);
  if (!v1)
  {
    swift_bridgeObjectRelease();
    goto LABEL_9;
  }
  if (*(void *)(v0 + 312) != *(void *)(v0 + 352) || v1 != *(void *)(v0 + 320))
  {
    char v3 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if (v3) {
      goto LABEL_12;
    }
LABEL_9:
    uint64_t v4 = *(void *)(v0 + 144);
    uint64_t v5 = *(void *)(v0 + 120);
    swift_bridgeObjectRelease();
    sub_100EB0138(v5, v4, (uint64_t (*)(void))type metadata accessor for PeerCommunicationIdentifier);
    id v6 = Logger.logObject.getter();
    os_log_type_t v7 = static os_log_type_t.default.getter();
    BOOL v8 = os_log_type_enabled(v6, v7);
    uint64_t v9 = *(void *)(v0 + 144);
    if (v8)
    {
      unint64_t v10 = (uint8_t *)swift_slowAlloc();
      uint64_t v27 = swift_slowAlloc();
      *(_DWORD *)unint64_t v10 = 136315138;
      uint64_t v11 = sub_1009C77D8();
      *(void *)(v0 + 24) = sub_1008FA0F0(v11, v12, &v27);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      sub_100EB01A0(v9, (uint64_t (*)(void))type metadata accessor for PeerCommunicationIdentifier);
      _os_log_impl((void *)&_mh_execute_header, v6, v7, "MessagingQueryController cannot reach family member %s.", v10, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      sub_100EB01A0(*(void *)(v0 + 144), (uint64_t (*)(void))type metadata accessor for PeerCommunicationIdentifier);
    }

    uint64_t v21 = 0;
    uint64_t v25 = 0;
    uint64_t v26 = 0;
    goto LABEL_18;
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
LABEL_12:
  sub_100EB0138(*(void *)(v0 + 120), *(void *)(v0 + 136), (uint64_t (*)(void))type metadata accessor for PeerCommunicationIdentifier);
  swift_bridgeObjectRetain_n();
  unint64_t v13 = Logger.logObject.getter();
  os_log_type_t v14 = static os_log_type_t.default.getter();
  BOOL v15 = os_log_type_enabled(v13, v14);
  unint64_t v16 = *(void *)(v0 + 304);
  if (v15)
  {
    uint64_t v24 = *(void *)(v0 + 296);
    uint64_t v17 = *(void *)(v0 + 136);
    uint64_t v18 = swift_slowAlloc();
    uint64_t v27 = swift_slowAlloc();
    *(_DWORD *)uint64_t v18 = 136315394;
    uint64_t v19 = sub_1009C77D8();
    *(void *)(v0 + 32) = sub_1008FA0F0(v19, v20, &v27);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    sub_100EB01A0(v17, (uint64_t (*)(void))type metadata accessor for PeerCommunicationIdentifier);
    *(_WORD *)(v18 + 12) = 2080;
    swift_bridgeObjectRetain();
    *(void *)(v0 + 40) = sub_1008FA0F0(v24, v16, &v27);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    _os_log_impl((void *)&_mh_execute_header, v13, v14, "MessagingQueryController found %s is no longer a family member %s.", (uint8_t *)v18, 0x16u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    sub_100EB01A0(*(void *)(v0 + 136), (uint64_t (*)(void))type metadata accessor for PeerCommunicationIdentifier);
    swift_bridgeObjectRelease_n();
  }

  uint64_t v25 = *(void *)(v0 + 304);
  uint64_t v26 = *(void *)(v0 + 296);
  uint64_t v21 = *(unsigned __int8 *)(v0 + 377);
LABEL_18:
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  unint64_t v22 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v0 + 8);
  return v22(v21, v26, v25);
}

uint64_t sub_100EAE890()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_100EAE978()
{
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_100EAEA4C()
{
  if (qword_1016371D8 != -1) {
    swift_once();
  }
  SynchronousCache.cachedValue<A>(key:computeBlock:)();
  swift_bridgeObjectRelease();
  if (v6) {
    return 0;
  }
  uint64_t v1 = self;
  id v2 = [v1 sharedInstance];
  id v3 = [v2 primaryAuthKitAccount];

  if (!v3) {
    return 1;
  }
  id v4 = [v1 sharedInstance];
  id v0 = [v4 userUnderAgeForAccount:v3];

  return (uint64_t)v0;
}

uint64_t sub_100EAEB98()
{
  swift_unknownObjectRelease();
  swift_release();

  return _swift_deallocObject(v0, 48, 7);
}

uint64_t sub_100EAEBD8()
{
  uint64_t v2 = *(void *)(v0 + 32);
  id v3 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v3;
  *id v3 = v1;
  v3[1] = sub_100033F68;
  v3[3] = v2;
  id v4 = (void *)swift_task_alloc();
  v3[4] = v4;
  *id v4 = v3;
  v4[1] = sub_100E9D3CC;
  return sub_100E9D6E4();
}

uint64_t sub_100EAECB0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v5[6] = a3;
  v5[7] = a4;
  v5[5] = a1;
  uint64_t v6 = type metadata accessor for UUID();
  v5[8] = v6;
  v5[9] = *(void *)(v6 - 8);
  v5[10] = swift_task_alloc();
  return _swift_task_switch(sub_100EAED74, v4, 0);
}

uint64_t sub_100EAED74()
{
  uint64_t v21 = v0;
  if (qword_101637148 != -1) {
    swift_once();
  }
  uint64_t v1 = v0[5];
  uint64_t v3 = v0[9];
  uint64_t v2 = v0[10];
  uint64_t v4 = v0[8];
  uint64_t v5 = type metadata accessor for Logger();
  sub_100010324(v5, (uint64_t)qword_10170EDD8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v3 + 16))(v2, v1, v4);
  swift_bridgeObjectRetain_n();
  uint64_t v6 = Logger.logObject.getter();
  os_log_type_t v7 = static os_log_type_t.default.getter();
  BOOL v8 = os_log_type_enabled(v6, v7);
  uint64_t v10 = v0[9];
  uint64_t v9 = v0[10];
  unint64_t v11 = v0[7];
  uint64_t v12 = v0[8];
  if (v8)
  {
    uint64_t v18 = v0[6];
    os_log_type_t type = v7;
    uint64_t v13 = swift_slowAlloc();
    uint64_t v20 = swift_slowAlloc();
    *(_DWORD *)uint64_t v13 = 136446723;
    sub_100EB0380((unint64_t *)&qword_101638B10, 255, (void (*)(uint64_t))&type metadata accessor for UUID);
    uint64_t v14 = dispatch thunk of CustomStringConvertible.description.getter();
    v0[2] = sub_1008FA0F0(v14, v15, &v20);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    (*(void (**)(uint64_t, uint64_t))(v10 + 8))(v9, v12);
    *(_WORD *)(v13 + 12) = 2160;
    v0[3] = 1752392040;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v13 + 22) = 2081;
    swift_bridgeObjectRetain();
    v0[4] = sub_1008FA0F0(v18, v11, &v20);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    _os_log_impl((void *)&_mh_execute_header, v6, type, "Message %{public}s delivered successfully from %{private,mask.hash}s.", (uint8_t *)v13, 0x20u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    (*(void (**)(void, void))(v10 + 8))(v0[10], v0[8]);
    swift_bridgeObjectRelease_n();
  }

  swift_task_dealloc();
  unint64_t v16 = (uint64_t (*)(void))v0[1];
  return v16();
}

uint64_t sub_100EAF07C(uint64_t a1, uint64_t a2, uint64_t a3, char a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  *(void *)(v9 + 104) = v13;
  *(void *)(v9 + 112) = v8;
  *(void *)(v9 + 88) = a7;
  *(void *)(v9 + 96) = a8;
  *(void *)(v9 + 72) = a5;
  *(void *)(v9 + 80) = a6;
  *(unsigned char *)(v9 + 144) = a4;
  *(void *)(v9 + 56) = a2;
  *(void *)(v9 + 64) = a3;
  uint64_t v10 = type metadata accessor for Logger();
  *(void *)(v9 + 120) = v10;
  *(void *)(v9 + 128) = *(void *)(v10 - 8);
  *(void *)(v9 + 136) = swift_task_alloc();
  return _swift_task_switch(sub_100EAF154, v8, 0);
}

uint64_t sub_100EAF154()
{
  uint64_t v39 = v0;
  if (qword_101637148 != -1) {
    swift_once();
  }
  uint64_t v1 = *(void *)(v0 + 80);
  unint64_t v2 = *(void *)(v0 + 88);
  uint64_t v3 = sub_100010324(*(void *)(v0 + 120), (uint64_t)qword_10170EDD8);
  sub_1000361E0(v1, v2);
  swift_bridgeObjectRetain();
  sub_1000361E0(v1, v2);
  swift_bridgeObjectRetain();
  uint64_t v4 = Logger.logObject.getter();
  os_log_type_t v5 = static os_log_type_t.default.getter();
  BOOL v6 = os_log_type_enabled(v4, v5);
  uint64_t v8 = *(void *)(v0 + 80);
  unint64_t v7 = *(void *)(v0 + 88);
  if (v6)
  {
    uint64_t v9 = *(void *)(v0 + 72);
    unint64_t v33 = *(void *)(v0 + 64);
    uint64_t v34 = *(void *)(v0 + 56);
    uint64_t v10 = *(unsigned __int8 *)(v0 + 144);
    uint64_t v36 = v3;
    uint64_t v11 = swift_slowAlloc();
    uint64_t v38 = swift_slowAlloc();
    *(_DWORD *)uint64_t v11 = 136446723;
    sub_1000361E0(v8, v7);
    uint64_t v12 = sub_10052A684(v10, v9, v8, v7);
    unint64_t v14 = v13;
    sub_10001CFB8(v8, v7);
    *(void *)(v0 + 32) = sub_1008FA0F0(v12, v14, &v38);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    sub_10001CFB8(v8, v7);
    sub_10001CFB8(v8, v7);
    *(_WORD *)(v11 + 12) = 2160;
    *(void *)(v0 + 40) = 1752392040;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v11 + 22) = 2081;
    swift_bridgeObjectRetain();
    *(void *)(v0 + 48) = sub_1008FA0F0(v34, v33, &v38);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    _os_log_impl((void *)&_mh_execute_header, v4, v5, "Message %{public}s received from %{private,mask.hash}s.", (uint8_t *)v11, 0x20u);
    swift_arrayDestroy();
    swift_slowDealloc();
    uint64_t v3 = v36;
    swift_slowDealloc();
  }
  else
  {
    sub_10001CFB8(*(void *)(v0 + 80), *(void *)(v0 + 88));
    sub_10001CFB8(v8, v7);
    swift_bridgeObjectRelease_n();
  }

  (*(void (**)(void, uint64_t, void))(*(void *)(v0 + 128) + 16))(*(void *)(v0 + 136), v3, *(void *)(v0 + 120));
  unint64_t v15 = Logger.logObject.getter();
  os_log_type_t v16 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v15, v16))
  {
    uint64_t v17 = (uint8_t *)swift_slowAlloc();
    uint64_t v38 = swift_slowAlloc();
    *(_DWORD *)uint64_t v17 = 136315138;
    type metadata accessor for Transaction();
    uint64_t result = static Transaction.current.getter();
    if (!result)
    {
      __break(1u);
      return result;
    }
    uint64_t v19 = *(void *)(v0 + 128);
    uint64_t v37 = *(void *)(v0 + 136);
    uint64_t v35 = *(void *)(v0 + 120);
    *(void *)(v0 + 16) = result;
    sub_100EB0380(&qword_10165CC88, 255, (void (*)(uint64_t))&type metadata accessor for Transaction);
    uint64_t v20 = dispatch thunk of CustomStringConvertible.description.getter();
    unint64_t v22 = v21;
    swift_release();
    *(void *)(v0 + 24) = sub_1008FA0F0(v20, v22, &v38);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v15, v16, "txn: %s", v17, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    (*(void (**)(uint64_t, uint64_t))(v19 + 8))(v37, v35);
  }
  else
  {
    uint64_t v24 = *(void *)(v0 + 128);
    uint64_t v23 = *(void *)(v0 + 136);
    uint64_t v25 = *(void *)(v0 + 120);

    (*(void (**)(uint64_t, uint64_t))(v24 + 8))(v23, v25);
  }
  if (*(void *)(*(void *)(v0 + 112) + 128))
  {
    uint64_t v27 = *(void *)(v0 + 96);
    uint64_t v26 = *(void *)(v0 + 104);
    uint64_t v29 = *(void *)(v0 + 80);
    unint64_t v28 = *(void *)(v0 + 88);
    uint64_t v30 = *(void *)(v0 + 72);
    char v31 = *(unsigned char *)(v0 + 144);
    swift_retain();
    sub_101100928(v31, v30, v29, v28, v27, v26);
    swift_release();
  }
  swift_task_dealloc();
  uint64_t v32 = *(uint64_t (**)(void))(v0 + 8);
  return v32();
}

uint64_t sub_100EAF674()
{
  uint64_t v1 = type metadata accessor for UUID();
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 32) & ~v3;
  uint64_t v5 = v3 | 7;
  unint64_t v6 = ((((*(void *)(v2 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8) + 8;
  swift_unknownObjectRelease();
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  swift_release();

  return _swift_deallocObject(v0, v6, v5);
}

uint64_t sub_100EAF764(uint64_t a1)
{
  uint64_t v4 = *(void *)(type metadata accessor for UUID() - 8);
  unint64_t v5 = (*(unsigned __int8 *)(v4 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
  uint64_t v6 = *(void *)(v1 + 16);
  uint64_t v7 = *(void *)(v1 + 24);
  uint64_t v8 = v1 + v5;
  uint64_t v9 = *(void *)(v1 + ((*(void *)(v4 + 64) + v5 + 7) & 0xFFFFFFFFFFFFFFF8));
  uint64_t v10 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v10;
  *uint64_t v10 = v2;
  v10[1] = sub_10001D2E4;
  return sub_100EAA5CC(a1, v6, v7, v8, v9);
}

uint64_t sub_100EAF898()
{
  uint64_t v1 = type metadata accessor for UUID();
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 24) & ~v3;
  uint64_t v5 = v4 + *(void *)(v2 + 64);
  uint64_t v6 = v3 | 7;
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);

  return _swift_deallocObject(v0, v5, v6);
}

unint64_t sub_100EAF964()
{
  unint64_t result = qword_101661668;
  if (!qword_101661668)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_101661668);
  }
  return result;
}

void sub_100EAF9B8(uint64_t a1)
{
  sub_100EE4A30(*(uint64_t **)(v1 + 16), a1);
}

uint64_t sub_100EAF9D8()
{
  uint64_t v1 = type metadata accessor for TapToRadarDraft();
  uint64_t v2 = *(unsigned __int8 *)(*(void *)(v1 - 8) + 80);
  uint64_t v3 = (v2 + 16) & ~v2;
  uint64_t v4 = *(void *)(*(void *)(v1 - 8) + 64);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (*(void *)(v0 + v3 + 48))
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v5 = v0 + v3 + *(int *)(v1 + 44);
  swift_bridgeObjectRelease();
  uint64_t v6 = v5 + *(int *)(sub_10000588C(&qword_10163EE60) + 36);
  uint64_t v7 = type metadata accessor for Date();
  uint64_t v8 = *(void *)(v7 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v8 + 48))(v6, 1, v7)) {
    (*(void (**)(uint64_t, uint64_t))(v8 + 8))(v6, v7);
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return _swift_deallocObject(v0, ((v4 + v3 + 7) & 0xFFFFFFFFFFFFFFF8) + 8, v2 | 7);
}

uint64_t sub_100EAFCB8()
{
  uint64_t v1 = *(void *)(type metadata accessor for TapToRadarDraft() - 8);
  unint64_t v2 = (*(unsigned __int8 *)(v1 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80);
  uint64_t v3 = *(void *)(v0 + ((*(void *)(v1 + 64) + v2 + 7) & 0xFFFFFFFFFFFFFFF8));

  return sub_100EA9ADC(v0 + v2, v3);
}

uint64_t sub_100EAFD44()
{
  uint64_t v1 = type metadata accessor for TapToRadarDraft();
  uint64_t v2 = *(unsigned __int8 *)(*(void *)(v1 - 8) + 80);
  uint64_t v3 = (v2 + 32) & ~v2;
  uint64_t v4 = *(void *)(*(void *)(v1 - 8) + 64);
  swift_unknownObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (*(void *)(v0 + v3 + 48))
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v5 = v0 + v3 + *(int *)(v1 + 44);
  swift_bridgeObjectRelease();
  uint64_t v6 = v5 + *(int *)(sub_10000588C(&qword_10163EE60) + 36);
  uint64_t v7 = type metadata accessor for Date();
  uint64_t v8 = *(void *)(v7 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v8 + 48))(v6, 1, v7)) {
    (*(void (**)(uint64_t, uint64_t))(v8 + 8))(v6, v7);
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return _swift_deallocObject(v0, ((v4 + v3 + 7) & 0xFFFFFFFFFFFFFFF8) + 8, v2 | 7);
}

uint64_t sub_100EB002C()
{
  type metadata accessor for TapToRadarDraft();
  uint64_t v1 = (void *)swift_task_alloc();
  *(void *)(v0 + 16) = v1;
  *uint64_t v1 = v0;
  v1[1] = sub_100033F68;
  uint64_t v2 = (void *)swift_task_alloc();
  v1[3] = v2;
  *uint64_t v2 = v1;
  v2[1] = sub_100EA9D38;
  return sub_1001F51FC();
}

uint64_t sub_100EB0138(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

uint64_t sub_100EB01A0(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t sub_100EB0200(uint64_t *a1)
{
  uint64_t v5 = *(void *)(v1 + 16);
  uint64_t v4 = *(void *)(v1 + 24);
  uint64_t v6 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v6;
  *uint64_t v6 = v2;
  v6[1] = sub_10012E0C8;
  v6[2] = v5;
  uint64_t v7 = *a1;
  v6[3] = v4;
  v6[4] = v7;
  return _swift_task_switch(sub_100EA1968, 0, 0);
}

unint64_t sub_100EB02BC()
{
  unint64_t result = qword_1016616B0;
  if (!qword_1016616B0)
  {
    sub_10000592C(&qword_10165CFA0);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1016616B0);
  }
  return result;
}

uint64_t sub_100EB0318(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 32))(a2, a1, v5);
  return a2;
}

uint64_t sub_100EB0380(unint64_t *a1, uint64_t a2, void (*a3)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a3(a2);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

unsigned char *storeEnumTagSinglePayload for PeerTrustServiceError(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 5 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 5) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFB) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFA)
  {
    unsigned int v6 = ((a2 - 251) >> 8) + 1;
    *uint64_t result = a2 + 5;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x100EB0494);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 5;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for PeerTrustServiceError()
{
  return &type metadata for PeerTrustServiceError;
}

unint64_t sub_100EB04D0()
{
  unint64_t result = qword_1016616C0;
  if (!qword_1016616C0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1016616C0);
  }
  return result;
}

uint64_t sub_100EB0528(void *a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = sub_10000588C(&qword_10163C6C8);
  __chkstk_darwin(v4 - 8);
  unsigned int v6 = (char *)&v22 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = sub_10000588C(&qword_1016618F8);
  uint64_t v8 = *(void *)(v7 - 8);
  __chkstk_darwin(v7);
  uint64_t v10 = (char *)&v22 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = sub_10000588C(&qword_101661900);
  uint64_t v12 = *(void *)(v11 - 8);
  uint64_t v23 = v11;
  uint64_t v24 = v12;
  __chkstk_darwin(v11);
  unint64_t v14 = (char *)&v22 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  id v25 = a1;
  swift_retain();
  sub_10000588C(&qword_101661908);
  sub_10000588C(&qword_101661910);
  sub_100062734(&qword_101661918, &qword_101661908);
  Publisher.compactMap<A>(_:)();
  swift_release();
  id v25 = *(id *)(v2 + 24);
  id v15 = v25;
  uint64_t v16 = type metadata accessor for OS_dispatch_queue.SchedulerOptions();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v16 - 8) + 56))(v6, 1, 1, v16);
  sub_10000584C();
  sub_100062734(&qword_101661920, &qword_1016618F8);
  sub_100EB3318((unint64_t *)&qword_10166C020, (void (*)(uint64_t))sub_10000584C);
  id v17 = v15;
  Publisher.receive<A>(on:options:)();
  sub_10001DAB4((uint64_t)v6, &qword_10163C6C8);

  (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v7);
  uint64_t v18 = swift_allocObject();
  *(void *)(v18 + 16) = sub_100EB242C;
  *(void *)(v18 + 24) = v2;
  sub_100062734(&qword_101661928, &qword_101661900);
  swift_retain();
  uint64_t v19 = v23;
  uint64_t v20 = Publisher<>.sink(receiveValue:)();
  swift_release();
  (*(void (**)(char *, uint64_t))(v24 + 8))(v14, v19);
  *(void *)(v2 + 40) = v20;
  return swift_release();
}

uint64_t sub_100EB090C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = type metadata accessor for BeaconKeyManager.KeyCriteria(0);
  __chkstk_darwin(v4 - 8);
  unsigned int v6 = (char *)&v20 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = sub_10000588C(&qword_10163B9F0);
  __chkstk_darwin(v7 - 8);
  uint64_t v9 = (char *)&v20 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = type metadata accessor for OwnedBeaconRecord();
  uint64_t v11 = *(void *)(v10 - 8);
  __chkstk_darwin(v10);
  uint64_t v13 = (char *)&v20 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_unownedRetainStrong();
  uint64_t v14 = type metadata accessor for BeaconKeyManager.PersistenceInstruction(0);
  sub_100EB3250(a1 + *(int *)(v14 + 24), (uint64_t)v6, type metadata accessor for BeaconKeyManager.KeyCriteria);
  sub_100ACD178((uint64_t)v9);
  swift_release();
  uint64_t v15 = type metadata accessor for UUID();
  (*(void (**)(char *, uint64_t))(*(void *)(v15 - 8) + 8))(v6, v15);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v11 + 48))(v9, 1, v10) == 1)
  {
    sub_10001DAB4((uint64_t)v9, &qword_10163B9F0);
    uint64_t v16 = sub_10000588C(&qword_101661910);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v16 - 8) + 56))(a2, 1, 1, v16);
  }
  else
  {
    sub_100EB3140((uint64_t)v9, (uint64_t)v13, (uint64_t (*)(void))type metadata accessor for OwnedBeaconRecord);
    uint64_t v18 = sub_10000588C(&qword_101661910);
    uint64_t v19 = a2 + *(int *)(v18 + 48);
    sub_100EB3140((uint64_t)v13, a2, (uint64_t (*)(void))type metadata accessor for OwnedBeaconRecord);
    sub_100EB3250(a1, v19, type metadata accessor for BeaconKeyManager.PersistenceInstruction);
    return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v18 - 8) + 56))(a2, 0, 1, v18);
  }
}

uint64_t sub_100EB0BEC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for DispatchPredicate();
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  uint64_t v9 = &v14[-((v8 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v10 = *(void **)(a3 + 24);
  *uint64_t v9 = v10;
  (*(void (**)(void *, void, uint64_t))(v7 + 104))(v9, enum case for DispatchPredicate.onQueue(_:), v6);
  id v11 = v10;
  LOBYTE(v10) = _dispatchPreconditionTest(_:)();
  uint64_t result = (*(uint64_t (**)(void *, uint64_t))(v7 + 8))(v9, v6);
  if (v10)
  {
    uint64_t v13 = type metadata accessor for Transaction();
    __chkstk_darwin(v13);
    *(void *)&v14[-32] = a3;
    *(void *)&v14[-24] = a1;
    *(void *)&v14[-16] = a2;
    return static Transaction.named<A>(_:with:)();
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_100EB0D84()
{
  uint64_t v1 = v0;
  uint64_t v71 = type metadata accessor for UUID();
  unint64_t v82 = *(void *)(v71 - 8);
  __chkstk_darwin(v71);
  int v3 = (char *)&v64 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = sub_10000588C(&qword_1016618E8);
  uint64_t v5 = __chkstk_darwin(v4 - 8);
  uint64_t v7 = (char *)&v64 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5);
  unint64_t v78 = (char *)&v64 - v8;
  uint64_t v9 = type metadata accessor for Date();
  long long v81 = *(char **)(v9 - 8);
  uint64_t v10 = __chkstk_darwin(v9);
  uint64_t v76 = (char *)&v64 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v10);
  uint64_t v13 = (char *)&v64 - v12;
  uint64_t v14 = type metadata accessor for DispatchPredicate();
  uint64_t v15 = *(void *)(v14 - 8);
  __chkstk_darwin(v14);
  id v17 = (uint64_t *)((char *)&v64 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v18 = *(void **)(v1 + 24);
  void *v17 = v18;
  (*(void (**)(void *, void, uint64_t))(v15 + 104))(v17, enum case for DispatchPredicate.onQueue(_:), v14);
  id v19 = v18;
  char v20 = _dispatchPreconditionTest(_:)();
  uint64_t result = (*(uint64_t (**)(void *, uint64_t))(v15 + 8))(v17, v14);
  if ((v20 & 1) == 0)
  {
LABEL_39:
    __break(1u);
    goto LABEL_40;
  }
  __n128 v83 = v3;
  Date.init()();
  uint64_t v22 = (uint64_t *)(v1 + 56);
  swift_beginAccess();
  uint64_t v23 = *(void *)(v1 + 56);
  uint64_t v24 = *(void *)(v23 + 64);
  uint64_t v66 = v23 + 64;
  uint64_t v25 = 1 << *(unsigned char *)(v23 + 32);
  uint64_t v26 = -1;
  if (v25 < 64) {
    uint64_t v26 = ~(-1 << v25);
  }
  unint64_t v27 = v26 & v24;
  unint64_t v28 = v82;
  unint64_t v72 = v82 + 16;
  uint64_t v75 = (void (**)(char *))(v82 + 32);
  Swift::String v74 = (void (**)(char *, uint64_t, uint64_t))(v81 + 16);
  unint64_t v77 = (uint64_t (**)(char *, uint64_t))(v81 + 8);
  uint64_t v79 = (void (**)(char *, uint64_t))(v82 + 8);
  int64_t v67 = (unint64_t)(v25 + 63) >> 6;
  int64_t v65 = v67 - 1;
  uint64_t v73 = v23;
  uint64_t result = swift_bridgeObjectRetain();
  int64_t v80 = 0;
  long long v68 = xmmword_101342130;
  uint64_t v29 = v71;
  uint64_t v30 = (uint64_t)v78;
  long long v81 = v13;
  uint64_t v70 = v9;
  Swift::String v69 = v7;
  if (!v27) {
    goto LABEL_9;
  }
LABEL_7:
  unint64_t v31 = __clz(__rbit64(v27));
  uint64_t v32 = (v27 - 1) & v27;
  unint64_t v33 = v31 | (v80 << 6);
  while (2)
  {
    uint64_t v34 = v73;
    (*(void (**)(char *, unint64_t, uint64_t))(v28 + 16))(v7, *(void *)(v73 + 48) + *(void *)(v28 + 72) * v33, v29);
    uint64_t v35 = *(void *)(v34 + 56);
    uint64_t v36 = sub_10000588C(&qword_1016618F0);
    *(void *)&v7[*(int *)(v36 + 48)] = *(void *)(v35 + 8 * v33);
    (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v36 - 8) + 56))(v7, 0, 1, v36);
    swift_retain();
    uint64_t v13 = v81;
    while (1)
    {
      sub_100EB23BC((uint64_t)v7, v30);
      uint64_t v41 = sub_10000588C(&qword_1016618F0);
      if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v41 - 8) + 48))(v30, 1, v41) == 1)
      {
        swift_release();
        return (*v77)(v13, v9);
      }
      uint64_t v42 = v30;
      unint64_t v43 = v28;
      unint64_t v82 = v32;
      uint64_t v44 = v22;
      uint64_t v45 = *(void *)(v42 + *(int *)(v41 + 48));
      double v46 = v83;
      (*v75)(v83);
      uint64_t v47 = v45
          + OBJC_IVAR____TtCC12searchpartyd25InstructionEventCoalescerP33_3B6F52EF81004A05C130335557FA073612BufferRecord_timestamp;
      swift_beginAccess();
      uint64_t v48 = v9;
      uint64_t v49 = v76;
      (*v74)(v76, v47, v48);
      Date.timeIntervalSince(_:)();
      double v51 = v50;
      uint64_t v52 = v49;
      uint64_t v9 = v48;
      (*v77)(v52, v48);
      if (v51 <= 60.0)
      {
        (*v79)(v46, v29);
        uint64_t result = swift_release();
        uint64_t v22 = v44;
        unint64_t v27 = v82;
        unint64_t v28 = v43;
        uint64_t v30 = (uint64_t)v78;
        if (v82) {
          goto LABEL_7;
        }
      }
      else
      {
        unint64_t v53 = v43;
        static os_log_type_t.error.getter();
        if (qword_101637260 != -1) {
          swift_once();
        }
        sub_10000588C((uint64_t *)&unk_10163AD00);
        uint64_t v54 = swift_allocObject();
        *(_OWORD *)(v54 + 16) = v68;
        uint64_t v55 = (uint64_t)v83;
        uint64_t v56 = UUID.uuidString.getter();
        uint64_t v58 = v57;
        *(void *)(v54 + 56) = &type metadata for String;
        *(void *)(v54 + 64) = sub_10000B4CC();
        *(void *)(v54 + 32) = v56;
        *(void *)(v54 + 40) = v58;
        os_log(_:dso:log:_:_:)();
        swift_bridgeObjectRelease();
        swift_beginAccess();
        swift_bridgeObjectRetain();
        unint64_t v59 = sub_1007240CC(v55);
        LOBYTE(v58) = v60;
        swift_bridgeObjectRelease();
        uint64_t v29 = v71;
        unint64_t v28 = v53;
        uint64_t v22 = v44;
        uint64_t v7 = v69;
        uint64_t v9 = v70;
        if (v58)
        {
          int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
          uint64_t v62 = *v44;
          uint64_t v84 = *v44;
          *uint64_t v44 = 0x8000000000000000;
          if (!isUniquelyReferenced_nonNull_native)
          {
            sub_100E876D4();
            uint64_t v62 = v84;
          }
          (*(void (**)(unint64_t, uint64_t))(v28 + 8))(*(void *)(v62 + 48) + *(void *)(v28 + 72) * v59, v29);
          uint64_t v63 = v84;
          sub_100168738(v59, v84);
          *uint64_t v44 = v63;
          swift_release();
          swift_bridgeObjectRelease();
        }
        swift_endAccess();
        swift_release();
        uint64_t result = ((uint64_t (*)(char *, uint64_t))*v79)(v83, v29);
        uint64_t v30 = (uint64_t)v78;
        uint64_t v13 = v81;
        unint64_t v27 = v82;
        if (v82) {
          goto LABEL_7;
        }
      }
LABEL_9:
      int64_t v37 = v80 + 1;
      if (__OFADD__(v80, 1))
      {
        __break(1u);
        goto LABEL_39;
      }
      if (v37 < v67)
      {
        unint64_t v38 = *(void *)(v66 + 8 * v37);
        if (v38) {
          goto LABEL_12;
        }
        int64_t v39 = v80 + 2;
        ++v80;
        if (v37 + 1 < v67)
        {
          unint64_t v38 = *(void *)(v66 + 8 * v39);
          if (v38) {
            goto LABEL_15;
          }
          int64_t v80 = v37 + 1;
          if (v37 + 2 < v67)
          {
            unint64_t v38 = *(void *)(v66 + 8 * (v37 + 2));
            if (v38)
            {
              v37 += 2;
              goto LABEL_12;
            }
            int64_t v39 = v37 + 3;
            int64_t v80 = v37 + 2;
            if (v37 + 3 < v67) {
              break;
            }
          }
        }
      }
LABEL_26:
      uint64_t v40 = sub_10000588C(&qword_1016618F0);
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v40 - 8) + 56))(v7, 1, 1, v40);
      uint64_t v32 = 0;
    }
    unint64_t v38 = *(void *)(v66 + 8 * v39);
    if (v38)
    {
LABEL_15:
      int64_t v37 = v39;
LABEL_12:
      uint64_t v32 = (v38 - 1) & v38;
      unint64_t v33 = __clz(__rbit64(v38)) + (v37 << 6);
      int64_t v80 = v37;
      continue;
    }
    break;
  }
  while (1)
  {
    int64_t v37 = v39 + 1;
    if (__OFADD__(v39, 1)) {
      break;
    }
    if (v37 >= v67)
    {
      int64_t v80 = v65;
      goto LABEL_26;
    }
    unint64_t v38 = *(void *)(v66 + 8 * v37);
    ++v39;
    if (v38) {
      goto LABEL_12;
    }
  }
LABEL_40:
  __break(1u);
  return result;
}

uint64_t sub_100EB1694(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v59 = a4;
  uint64_t v48 = a1;
  uint64_t v54 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v53 = *(void *)(v54 - 8);
  __chkstk_darwin(v54);
  double v51 = (char *)&v45 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v52 = type metadata accessor for DispatchQoS();
  uint64_t v50 = *(void *)(v52 - 8);
  __chkstk_darwin(v52);
  uint64_t v49 = (char *)&v45 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for OwnedBeaconRecord();
  uint64_t v9 = v8 - 8;
  uint64_t v45 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  uint64_t v46 = v10;
  uint64_t v47 = (uint64_t)&v45 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = type metadata accessor for Date();
  uint64_t v55 = *(void *)(v11 - 8);
  uint64_t v56 = v11;
  __chkstk_darwin(v11);
  uint64_t v13 = (char *)&v45 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = type metadata accessor for UUID();
  uint64_t v15 = *(void *)(v14 - 8);
  uint64_t v16 = __chkstk_darwin(v14);
  uint64_t v18 = (char *)&v45 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v16);
  char v20 = (char *)&v45 - v19;
  uint64_t v21 = *(int *)(v9 + 28);
  uint64_t v60 = a3;
  uint64_t v22 = a3 + v21;
  uint64_t v23 = *(void (**)(char *, uint64_t, uint64_t))(v15 + 16);
  uint64_t v62 = v22;
  uint64_t v57 = v23;
  ((void (*)(char *))v23)((char *)&v45 - v19);
  uint64_t v58 = (uint64_t *)(a2 + 56);
  swift_beginAccess();
  uint64_t v61 = a2;
  uint64_t v24 = *(void *)(a2 + 56);
  uint64_t v25 = *(void *)(v24 + 16);
  swift_bridgeObjectRetain();
  if (v25 && (unint64_t v26 = sub_1007240CC((uint64_t)v20), (v27 & 1) != 0))
  {
    uint64_t v28 = *(void *)(*(void *)(v24 + 56) + 8 * v26);
    swift_retain();
  }
  else
  {
    type metadata accessor for InstructionEventCoalescer.BufferRecord();
    uint64_t v28 = swift_allocObject();
    Date.init()();
    (*(void (**)(uint64_t, char *, uint64_t))(v55 + 32))(v28+ OBJC_IVAR____TtCC12searchpartyd25InstructionEventCoalescerP33_3B6F52EF81004A05C130335557FA073612BufferRecord_timestamp, v13, v56);
    *(void *)(v28
              + OBJC_IVAR____TtCC12searchpartyd25InstructionEventCoalescerP33_3B6F52EF81004A05C130335557FA073612BufferRecord_list) = _swiftEmptyArrayStorage;
  }
  swift_bridgeObjectRelease();
  uint64_t v29 = *(void (**)(char *, uint64_t))(v15 + 8);
  v29(v20, v14);
  sub_100EB1F14(v59);
  v57(v18, v62, v14);
  uint64_t v30 = v58;
  swift_beginAccess();
  swift_retain();
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v64 = *v30;
  *uint64_t v30 = 0x8000000000000000;
  sub_100171B1C(v28, (uint64_t)v18, isUniquelyReferenced_nonNull_native);
  *uint64_t v30 = v64;
  swift_bridgeObjectRelease();
  v29(v18, v14);
  swift_endAccess();
  swift_beginAccess();
  uint64_t v32 = swift_bridgeObjectRetain();
  uint64_t v33 = v60;
  char v34 = sub_100EB285C(v32);
  swift_bridgeObjectRelease();
  uint64_t v35 = v61;
  if (v34)
  {
    uint64_t v59 = *(void *)(v61 + 32);
    uint64_t v36 = v47;
    sub_100EB3250(v33, v47, (uint64_t (*)(void))type metadata accessor for OwnedBeaconRecord);
    unint64_t v37 = (*(unsigned __int8 *)(v45 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v45 + 80);
    unint64_t v38 = (v46 + v37 + 7) & 0xFFFFFFFFFFFFFFF8;
    uint64_t v39 = swift_allocObject();
    *(void *)(v39 + 16) = v48;
    sub_100EB3140(v36, v39 + v37, (uint64_t (*)(void))type metadata accessor for OwnedBeaconRecord);
    *(void *)(v39 + v38) = v35;
    aBlock[4] = sub_100EB31A8;
    aBlock[5] = v39;
    aBlock[0] = _NSConcreteStackBlock;
    aBlock[1] = 1107296256;
    aBlock[2] = sub_1004B5480;
    aBlock[3] = &unk_1015FA2D0;
    uint64_t v40 = _Block_copy(aBlock);
    swift_retain();
    swift_retain();
    uint64_t v41 = v49;
    static DispatchQoS.unspecified.getter();
    int64_t v65 = _swiftEmptyArrayStorage;
    sub_100EB3318((unint64_t *)&qword_10163B7E0, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
    sub_10000588C((uint64_t *)&unk_10163F350);
    sub_100062734((unint64_t *)&qword_10163B7F0, (uint64_t *)&unk_10163F350);
    uint64_t v42 = v51;
    uint64_t v43 = v54;
    dispatch thunk of SetAlgebra.init<A>(_:)();
    OS_dispatch_queue.async(group:qos:flags:execute:)();
    _Block_release(v40);
    (*(void (**)(char *, uint64_t))(v53 + 8))(v42, v43);
    (*(void (**)(char *, uint64_t))(v50 + 8))(v41, v52);
    swift_release();
    swift_beginAccess();
    sub_1001655B0(v62);
    swift_endAccess();
    swift_release();
  }
  sub_100EB0D84();
  return swift_release();
}

uint64_t sub_100EB1DF8()
{
  Transaction.capture()();
  static os_log_type_t.default.getter();
  if (qword_101637260 != -1) {
    swift_once();
  }
  sub_10000588C((uint64_t *)&unk_10163AD00);
  uint64_t v0 = swift_allocObject();
  *(_OWORD *)(v0 + 16) = xmmword_101342130;
  type metadata accessor for OwnedBeaconRecord();
  uint64_t v1 = UUID.uuidString.getter();
  uint64_t v3 = v2;
  *(void *)(v0 + 56) = &type metadata for String;
  *(void *)(v0 + 64) = sub_10000B4CC();
  *(void *)(v0 + 32) = v1;
  *(void *)(v0 + 40) = v3;
  os_log(_:dso:log:_:_:)();
  swift_bridgeObjectRelease();
  return PassthroughSubject.send(_:)();
}

uint64_t sub_100EB1F14(uint64_t a1)
{
  uint64_t v3 = type metadata accessor for BeaconKeyManager.PersistenceInstruction(0);
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3 - 8);
  uint64_t v6 = (char *)&v18 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for Date();
  uint64_t v8 = *(void *)(v7 - 8);
  __chkstk_darwin(v7);
  uint64_t v10 = (char *)&v18 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  Date.init()();
  uint64_t v11 = v1
      + OBJC_IVAR____TtCC12searchpartyd25InstructionEventCoalescerP33_3B6F52EF81004A05C130335557FA073612BufferRecord_timestamp;
  swift_beginAccess();
  (*(void (**)(uint64_t, char *, uint64_t))(v8 + 40))(v11, v10, v7);
  swift_endAccess();
  sub_100EB3250(a1, (uint64_t)v6, type metadata accessor for BeaconKeyManager.PersistenceInstruction);
  uint64_t v12 = (unint64_t *)(v1
                           + OBJC_IVAR____TtCC12searchpartyd25InstructionEventCoalescerP33_3B6F52EF81004A05C130335557FA073612BufferRecord_list);
  swift_beginAccess();
  unint64_t v13 = *v12;
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  *uint64_t v12 = v13;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
    unint64_t v13 = sub_100A723F4(0, *(void *)(v13 + 16) + 1, 1, v13);
    *uint64_t v12 = v13;
  }
  unint64_t v16 = *(void *)(v13 + 16);
  unint64_t v15 = *(void *)(v13 + 24);
  if (v16 >= v15 >> 1)
  {
    unint64_t v13 = sub_100A723F4(v15 > 1, v16 + 1, 1, v13);
    *uint64_t v12 = v13;
  }
  *(void *)(v13 + 16) = v16 + 1;
  sub_100EB3140((uint64_t)v6, v13+ ((*(unsigned __int8 *)(v4 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80))+ *(void *)(v4 + 72) * v16, type metadata accessor for BeaconKeyManager.PersistenceInstruction);
  return swift_endAccess();
}

uint64_t sub_100EB2174()
{
  uint64_t v1 = v0
     + OBJC_IVAR____TtCC12searchpartyd25InstructionEventCoalescerP33_3B6F52EF81004A05C130335557FA073612BufferRecord_timestamp;
  uint64_t v2 = type metadata accessor for Date();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(v1, v2);
  swift_bridgeObjectRelease();

  return swift_deallocClassInstance();
}

uint64_t sub_100EB2224()
{
  swift_release();

  swift_release();
  swift_unownedRelease();
  swift_bridgeObjectRelease();
  swift_release();
  return v0;
}

uint64_t sub_100EB2274()
{
  sub_100EB2224();

  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for InstructionEventCoalescer()
{
  return self;
}

uint64_t sub_100EB22CC()
{
  return type metadata accessor for InstructionEventCoalescer.BufferRecord();
}

uint64_t type metadata accessor for InstructionEventCoalescer.BufferRecord()
{
  uint64_t result = qword_101661820;
  if (!qword_101661820) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t sub_100EB2320()
{
  uint64_t result = type metadata accessor for Date();
  if (v1 <= 0x3F)
  {
    uint64_t result = swift_updateClassMetadata2();
    if (!result) {
      return 0;
    }
  }
  return result;
}

uint64_t sub_100EB23BC(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_10000588C(&qword_1016618E8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_100EB2424@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_100EB090C(a1, a2);
}

uint64_t sub_100EB242C(uint64_t a1, uint64_t a2)
{
  return sub_100EB0BEC(a1, a2, v2);
}

uint64_t sub_100EB2434()
{
  swift_release();

  return _swift_deallocObject(v0, 32, 7);
}

uint64_t sub_100EB246C(uint64_t a1)
{
  uint64_t v3 = *(uint64_t (**)(uint64_t, uint64_t))(v1 + 16);
  uint64_t v4 = sub_10000588C(&qword_101661910);
  return v3(a1, a1 + *(int *)(v4 + 48));
}

uint64_t sub_100EB24B8(uint64_t a1)
{
  return sub_100EB1694(a1, v1[2], v1[3], v1[4]);
}

void *sub_100EB24D8(uint64_t a1)
{
  uint64_t v17 = a1;
  uint64_t v2 = type metadata accessor for OS_dispatch_queue.Attributes();
  __chkstk_darwin(v2);
  uint64_t v13 = type metadata accessor for OS_dispatch_queue.AutoreleaseFrequency();
  uint64_t v3 = *(void *)(v13 - 8);
  __chkstk_darwin(v13);
  uint64_t v5 = (char *)&v9 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = type metadata accessor for DispatchQoS();
  __chkstk_darwin(v6 - 8);
  uint64_t v16 = sub_10000588C(&qword_101661930);
  swift_allocObject();
  uint64_t v15 = PassthroughSubject.init()();
  v1[2] = v15;
  unint64_t v11 = sub_10000584C();
  static DispatchQoS.default.getter();
  unsigned int v10 = enum case for OS_dispatch_queue.AutoreleaseFrequency.workItem(_:);
  uint64_t v7 = *(void (**)(void))(v3 + 104);
  uint64_t v12 = v3 + 104;
  uint64_t v14 = (void (*)(char *, void, uint64_t))v7;
  v7(v5);
  uint64_t v18 = _swiftEmptyArrayStorage;
  sub_100EB3318((unint64_t *)&qword_101638CC0, (void (*)(uint64_t))&type metadata accessor for OS_dispatch_queue.Attributes);
  sub_10000588C((uint64_t *)&unk_1016376F0);
  sub_100062734((unint64_t *)&qword_101638CD0, (uint64_t *)&unk_1016376F0);
  dispatch thunk of SetAlgebra.init<A>(_:)();
  v1[3] = OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)();
  static DispatchQoS.default.getter();
  v14(v5, v10, v13);
  uint64_t v18 = _swiftEmptyArrayStorage;
  dispatch thunk of SetAlgebra.init<A>(_:)();
  v1[4] = OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)();
  v1[5] = 0;
  v1[6] = v17;
  v1[7] = _swiftEmptyDictionarySingleton;
  uint64_t v18 = (void *)v15;
  swift_unownedRetain();
  sub_100062734(&qword_101661938, &qword_101661930);
  v1[8] = Publisher.eraseToAnyPublisher()();
  return v1;
}

uint64_t sub_100EB285C(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for BeaconKeyManager.KeyCriteria(0);
  __chkstk_darwin(v2);
  uint64_t v4 = (char *)&v29 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = type metadata accessor for BeaconKeyManager.PersistenceInstruction(0);
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v7 = __chkstk_darwin(v5);
  uint64_t v9 = (char *)&v29 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v7);
  unint64_t v11 = (char *)&v29 - v10;
  type metadata accessor for OwnedBeaconRecord();
  if ((sub_10111198C() & 1) == 0)
  {
    char v19 = sub_100DBADC8();
    uint64_t v20 = *(void *)(a1 + 16);
    if (v19)
    {
      if (v20 != 2) {
        return 0;
      }
      uint64_t v21 = a1 + ((*(unsigned __int8 *)(v6 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80));
      uint64_t v22 = *(void *)(v6 + 72);
      swift_bridgeObjectRetain();
      sub_100EB3250(v21, (uint64_t)v9, type metadata accessor for BeaconKeyManager.PersistenceInstruction);
      int v23 = v9[48];
      sub_100EB32B8((uint64_t)v9, type metadata accessor for BeaconKeyManager.PersistenceInstruction);
      if (v23 != 1)
      {
        sub_100EB3250(v21 + v22, (uint64_t)v9, type metadata accessor for BeaconKeyManager.PersistenceInstruction);
        int v27 = v9[48];
        sub_100EB32B8((uint64_t)v9, type metadata accessor for BeaconKeyManager.PersistenceInstruction);
        swift_bridgeObjectRelease();
        return ((v27 | v23) & 1) != 0;
      }
      sub_100EB3250(v21 + v22, (uint64_t)v9, type metadata accessor for BeaconKeyManager.PersistenceInstruction);
      char v24 = v9[48];
      sub_100EB32B8((uint64_t)v9, type metadata accessor for BeaconKeyManager.PersistenceInstruction);
      if (v24) {
        goto LABEL_13;
      }
    }
    else
    {
      if (v20 != 1) {
        return 0;
      }
      if (*(unsigned char *)(a1
                    + *(int *)(v5 + 24)
                    + ((*(unsigned __int8 *)(v6 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80))
                    + *(int *)(v2 + 20)))
      {
        char v26 = _stringCompareWithSmolCheck(_:_:expecting:)();
        swift_bridgeObjectRelease();
        return (v26 & 1) != 0;
      }
    }
    swift_bridgeObjectRelease();
    return 1;
  }
  if (*(void *)(a1 + 16) != 2) {
    return 0;
  }
  uint64_t v12 = (uint64_t)&v11[*(int *)(v5 + 24)];
  uint64_t v13 = a1 + ((*(unsigned __int8 *)(v6 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80));
  uint64_t v14 = *(void *)(v6 + 72);
  swift_bridgeObjectRetain();
  sub_100EB3250(v13, (uint64_t)v11, type metadata accessor for BeaconKeyManager.PersistenceInstruction);
  sub_100EB3250(v12, (uint64_t)v4, type metadata accessor for BeaconKeyManager.KeyCriteria);
  sub_100EB32B8((uint64_t)v11, type metadata accessor for BeaconKeyManager.PersistenceInstruction);
  int v15 = v4[*(int *)(v2 + 20)];
  sub_100EB32B8((uint64_t)v4, type metadata accessor for BeaconKeyManager.KeyCriteria);
  char v16 = 0;
  if (v15)
  {
    if (v15 != 1) {
      goto LABEL_7;
    }
    sub_100EB3250(v13 + v14, (uint64_t)v11, type metadata accessor for BeaconKeyManager.PersistenceInstruction);
    sub_100EB3250(v12, (uint64_t)v4, type metadata accessor for BeaconKeyManager.KeyCriteria);
    sub_100EB32B8((uint64_t)v11, type metadata accessor for BeaconKeyManager.PersistenceInstruction);
    int v17 = v4[*(int *)(v2 + 20)];
    sub_100EB32B8((uint64_t)v4, type metadata accessor for BeaconKeyManager.KeyCriteria);
    char v16 = 1;
    if (v17)
    {
      if (v17 != 1)
      {
LABEL_7:
        int v18 = 0;
        if (v16) {
          goto LABEL_21;
        }
        goto LABEL_19;
      }
LABEL_13:
      swift_bridgeObjectRelease();
      return 0;
    }
  }
  if (v16) {
    goto LABEL_24;
  }
  int v18 = 1;
LABEL_19:
  sub_100EB3250(v13 + v14, (uint64_t)v11, type metadata accessor for BeaconKeyManager.PersistenceInstruction);
  sub_100EB3250(v12, (uint64_t)v4, type metadata accessor for BeaconKeyManager.KeyCriteria);
  sub_100EB32B8((uint64_t)v11, type metadata accessor for BeaconKeyManager.PersistenceInstruction);
  int v25 = v4[*(int *)(v2 + 20)];
  sub_100EB32B8((uint64_t)v4, type metadata accessor for BeaconKeyManager.KeyCriteria);
  if (!v25)
  {
LABEL_24:
    swift_bridgeObjectRelease();
    return (v16 & 1) != 0;
  }
  if (v25 == 2)
  {
LABEL_21:
    swift_bridgeObjectRelease();
    return v18 && (v16 & 1) != 0;
  }
  swift_bridgeObjectRelease();
  return (v18 & 1) != 0;
}

uint64_t sub_100EB2DA8()
{
  uint64_t v1 = (int *)type metadata accessor for OwnedBeaconRecord();
  uint64_t v2 = *(unsigned __int8 *)(*((void *)v1 - 1) + 80);
  uint64_t v3 = (v2 + 24) & ~v2;
  uint64_t v19 = *(void *)(*((void *)v1 - 1) + 64);
  swift_release();
  uint64_t v4 = v0 + v3;
  sub_10001CFB8(*(void *)(v0 + v3), *(void *)(v0 + v3 + 8));
  uint64_t v5 = v0 + v3 + v1[5];
  uint64_t v6 = type metadata accessor for UUID();
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = *(void (**)(uint64_t, uint64_t))(v7 + 8);
  v8(v5, v6);
  uint64_t v9 = v0 + v3 + v1[6];
  type metadata accessor for StableIdentifier();
  switch(swift_getEnumCaseMultiPayload())
  {
    case 0u:
    case 4u:
      goto LABEL_6;
    case 1u:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      goto LABEL_6;
    case 2u:
      v8(v9, v6);
      uint64_t v18 = (v2 + 24) & ~v2;
      sub_10000588C(&qword_1016555E0);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      goto LABEL_5;
    case 3u:
      v8(v9, v6);
      uint64_t v18 = (v2 + 24) & ~v2;
      sub_10000588C((uint64_t *)&unk_1016565E0);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
LABEL_5:
      uint64_t v3 = v18;
LABEL_6:
      swift_bridgeObjectRelease();
      break;
    default:
      break;
  }
  uint64_t v10 = v4 + v1[7];
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(v10, 1, v6)) {
    v8(v10, v6);
  }
  uint64_t v11 = v4 + v1[8];
  uint64_t v12 = type metadata accessor for Date();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v12 - 8) + 8))(v11, v12);
  sub_10001CFB8(*(void *)(v4 + v1[9]), *(void *)(v4 + v1[9] + 8));
  uint64_t v13 = (uint64_t *)(v4 + v1[10]);
  unint64_t v14 = v13[1];
  if (v14 >> 60 != 15) {
    sub_10001CFB8(*v13, v14);
  }
  int v15 = (uint64_t *)(v4 + v1[11]);
  unint64_t v16 = v15[1];
  if (v16 >> 60 != 15) {
    sub_10001CFB8(*v15, v16);
  }
  sub_10001CFB8(*(void *)(v4 + v1[12]), *(void *)(v4 + v1[12] + 8));
  sub_10001CFB8(*(void *)(v4 + v1[13]), *(void *)(v4 + v1[13] + 8));
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();

  return _swift_deallocObject(v0, ((v19 + v3 + 7) & 0xFFFFFFFFFFFFFFF8) + 8, v2 | 7);
}

uint64_t sub_100EB3140(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 32))(a2, a1, v5);
  return a2;
}

uint64_t sub_100EB31A8()
{
  type metadata accessor for OwnedBeaconRecord();

  return sub_100EB1DF8();
}

uint64_t sub_100EB3238(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_100EB3248()
{
  return swift_release();
}

uint64_t sub_100EB3250(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

uint64_t sub_100EB32B8(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t sub_100EB3318(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_100EB3360(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_100EB3374);
}

uint64_t sub_100EB3374(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for UUID();
  uint64_t v7 = *(void *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == a2)
  {
    uint64_t v8 = v6;
    uint64_t v9 = a1 + *(int *)(a3 + 32);
    uint64_t v10 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    return v10(v9, a2, v8);
  }
  else
  {
    unint64_t v12 = *(void *)(a1 + *(int *)(a3 + 36) + 8);
    if (v12 >= 0xFFFFFFFF) {
      LODWORD(v12) = -1;
    }
    int v13 = v12 - 1;
    if (v13 < 0) {
      int v13 = -1;
    }
    return (v13 + 1);
  }
}

uint64_t sub_100EB3448(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_100EB345C);
}

uint64_t sub_100EB345C(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result = type metadata accessor for UUID();
  uint64_t v9 = *(void *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    uint64_t v10 = result;
    uint64_t v11 = a1 + *(int *)(a4 + 32);
    unint64_t v12 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    return v12(v11, a2, a2, v10);
  }
  else
  {
    *(void *)(a1 + *(int *)(a4 + 36) + 8) = a2;
  }
  return result;
}

uint64_t type metadata accessor for AirPodsSWPairingLockCheckResponse()
{
  uint64_t result = qword_101661998;
  if (!qword_101661998) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t sub_100EB356C()
{
  uint64_t result = type metadata accessor for UUID();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

unint64_t sub_100EB3628(char a1)
{
  unint64_t result = 0x754E6C6169726573;
  switch(a1)
  {
    case 1:
      unint64_t result = 0x6169726553746C61;
      break;
    case 2:
      unint64_t result = 0x5364656573;
      break;
    case 3:
      unint64_t result = 0x6953726576726573;
      break;
    case 4:
      unint64_t result = 0x6449616E6D66;
      break;
    case 5:
      unint64_t result = 0x704164656B73616DLL;
      break;
    case 6:
      unint64_t result = 0xD000000000000013;
      break;
    default:
      return result;
  }
  return result;
}

unint64_t sub_100EB3730(char a1)
{
  unint64_t result = 0x754E6C6169726573;
  switch(a1)
  {
    case 1:
      unint64_t result = 0x6169726553746C61;
      break;
    case 2:
      unint64_t result = 0x5364656573;
      break;
    case 3:
      unint64_t result = 0x6953726576726573;
      break;
    case 4:
      unint64_t result = 0x6449616E6D66;
      break;
    case 5:
      unint64_t result = 0x704164656B73616DLL;
      break;
    case 6:
      unint64_t result = 0xD000000000000013;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t sub_100EB3838@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v26 = a2;
  uint64_t v3 = type metadata accessor for UUID();
  uint64_t v27 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  uint64_t v5 = (char *)&v24 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = sub_10000588C(&qword_1016619E8);
  uint64_t v28 = *(void *)(v6 - 8);
  uint64_t v29 = v6;
  __chkstk_darwin(v6);
  uint64_t v8 = (char *)&v24 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = type metadata accessor for AirPodsSWPairingLockCheckResponse();
  uint64_t v10 = __chkstk_darwin(v9);
  unint64_t v12 = (char *)&v24 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(void *)&v12[*(int *)(v10 + 44)] = 0;
  uint64_t v13 = a1[3];
  uint64_t v30 = a1;
  sub_10001CD44(a1, v13);
  sub_100EB3ED8();
  uint64_t v14 = v31;
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v14) {
    return _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)v30);
  }
  int v25 = v5;
  uint64_t v15 = v28;
  uint64_t v31 = v9;
  char v33 = 0;
  unint64_t v16 = sub_100037AA0();
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  uint64_t v17 = *((void *)&v32 + 1);
  *(void *)unint64_t v12 = v32;
  *((void *)v12 + 1) = v17;
  char v33 = 1;
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  *((_OWORD *)v12 + 1) = v32;
  char v33 = 2;
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  *((_OWORD *)v12 + 2) = v32;
  char v33 = 3;
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  unint64_t v24 = v16;
  *((_OWORD *)v12 + 3) = v32;
  LOBYTE(v32) = 4;
  sub_100342C5C();
  uint64_t v18 = v25;
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  uint64_t v19 = v31;
  (*(void (**)(char *, char *, uint64_t))(v27 + 32))(&v12[*(int *)(v31 + 32)], v18, v3);
  LOBYTE(v32) = 5;
  uint64_t v20 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
  uint64_t v21 = (uint64_t *)&v12[*(int *)(v19 + 36)];
  *uint64_t v21 = v20;
  v21[1] = v22;
  char v33 = 6;
  KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
  (*(void (**)(char *, uint64_t))(v15 + 8))(v8, v29);
  *(_OWORD *)&v12[*(int *)(v19 + 40)] = v32;
  sub_100EB3F2C((uint64_t)v12, v26);
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)v30);
  return sub_100EB3F90((uint64_t)v12);
}

unint64_t sub_100EB3DBC@<X0>(Swift::String *a1@<X0>, unsigned char *a2@<X8>)
{
  unint64_t result = sub_100EB41F8(*a1);
  *a2 = result;
  return result;
}

unint64_t sub_100EB3DEC@<X0>(unint64_t *a1@<X8>)
{
  unint64_t result = sub_100EB3628(*v1);
  *a1 = result;
  a1[1] = v4;
  return result;
}

unint64_t sub_100EB3E18()
{
  return sub_100EB3730(*v0);
}

unint64_t sub_100EB3E20@<X0>(Swift::String a1@<X1:X0>, unsigned char *a2@<X8>)
{
  unint64_t result = sub_100EB41F8(a1);
  *a2 = result;
  return result;
}

uint64_t sub_100EB3E48(uint64_t a1)
{
  unint64_t v2 = sub_100EB3ED8();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_100EB3E84(uint64_t a1)
{
  unint64_t v2 = sub_100EB3ED8();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_100EB3EC0@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_100EB3838(a1, a2);
}

unint64_t sub_100EB3ED8()
{
  unint64_t result = qword_1016619F0;
  if (!qword_1016619F0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1016619F0);
  }
  return result;
}

uint64_t sub_100EB3F2C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for AirPodsSWPairingLockCheckResponse();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_100EB3F90(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for AirPodsSWPairingLockCheckResponse();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

unsigned char *storeEnumTagSinglePayload for AirPodsSWPairingLockCheckResponse.CodingKeys(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 6 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 6) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFA) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xF9)
  {
    unsigned int v6 = ((a2 - 250) >> 8) + 1;
    *unint64_t result = a2 + 6;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x100EB40B8);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 6;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for AirPodsSWPairingLockCheckResponse.CodingKeys()
{
  return &type metadata for AirPodsSWPairingLockCheckResponse.CodingKeys;
}

unint64_t sub_100EB40F4()
{
  unint64_t result = qword_1016619F8;
  if (!qword_1016619F8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1016619F8);
  }
  return result;
}

unint64_t sub_100EB414C()
{
  unint64_t result = qword_101661A00;
  if (!qword_101661A00)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_101661A00);
  }
  return result;
}

unint64_t sub_100EB41A4()
{
  unint64_t result = qword_101661A08;
  if (!qword_101661A08)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_101661A08);
  }
  return result;
}

unint64_t sub_100EB41F8(Swift::String string)
{
  object = string._object;
  v2._countAndFlagsBits = string._countAndFlagsBits;
  v2._object = object;
  unint64_t v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_1015A53B8, v2);
  swift_bridgeObjectRelease();
  if (v3 >= 7) {
    return 7;
  }
  else {
    return v3;
  }
}

void sub_100EB4244(void *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v66 = a2;
  uint64_t v3 = type metadata accessor for PeerCommunicationIdentifier();
  __chkstk_darwin(v3);
  uint64_t v68 = (uint64_t)&v57 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = sub_10000588C(&qword_101638CF0);
  __chkstk_darwin(v5 - 8);
  uint64_t v7 = (char *)&v57 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for UUID();
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  uint64_t v11 = (char *)&v57 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (CKRecord.recordType.getter() == 0x65507265626D654DLL && v12 == 0xEF74737572547265)
  {
    swift_bridgeObjectRelease();
  }
  else
  {
    char v13 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if ((v13 & 1) == 0)
    {
      sub_100EB5F4C();
      swift_allocError();
      *uint64_t v21 = 0;
      goto LABEL_17;
    }
  }
  id v14 = [a1 recordID];
  id v15 = [v14 recordName];

  static String._unconditionallyBridgeFromObjectiveC(_:)();
  UUID.init(uuidString:)();
  swift_bridgeObjectRelease();
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v7, 1, v8) != 1)
  {
    int64_t v65 = *(void (**)(char *, char *, uint64_t))(v9 + 32);
    v65(v11, v7, v8);
    id v17 = [a1 encryptedValues];
    NSString v18 = String._bridgeToObjectiveC()();
    uint64_t v19 = [v17 objectForKeyedSubscript:v18];

    if (v19)
    {
      Swift::String v69 = v19;
      sub_10000588C((uint64_t *)&unk_10163AE50);
      if (swift_dynamicCast())
      {
        if (!v71)
        {
          id v64 = v17;
          int v63 = 0;
LABEL_20:
          NSString v22 = String._bridgeToObjectiveC()();
          id v23 = [v64 objectForKeyedSubscript:v22];

          if (v23)
          {
            id v71 = v23;
            if (swift_dynamicCast())
            {
              unint64_t v24 = v69;
              unint64_t v62 = v70;
              type metadata accessor for PropertyListDecoder();
              swift_allocObject();
              PropertyListDecoder.init()();
              sub_100EB77C0((unint64_t *)&unk_101661A40, (void (*)(uint64_t))type metadata accessor for PeerCommunicationIdentifier);
              unint64_t v25 = v67;
              uint64_t v61 = v24;
              unint64_t v26 = v62;
              dispatch thunk of PropertyListDecoder.decode<A>(_:from:)();
              if (!v25)
              {
                swift_release();
                NSString v28 = String._bridgeToObjectiveC()();
                id v29 = [v64 objectForKeyedSubscript:v28];

                if (v29 && (id v71 = v29, (swift_dynamicCast() & 1) != 0))
                {
                  uint64_t v60 = v69;
                  unint64_t v67 = v70;
                  NSString v30 = String._bridgeToObjectiveC()();
                  id v31 = [v64 objectForKeyedSubscript:v30];

                  if (v31)
                  {
                    id v71 = v31;
                    char v32 = swift_dynamicCast();
                    uint64_t v33 = v68;
                    if (v32)
                    {
                      uint64_t v35 = v69;
                      unint64_t v34 = v70;
                      switch(v70 >> 62)
                      {
                        case 1uLL:
                          if (__OFSUB__(HIDWORD(v69), v69))
                          {
                            __break(1u);
LABEL_44:
                            __break(1u);
                            JUMPOUT(0x100EB4B50);
                          }
                          uint64_t v36 = HIDWORD(v69) - (int)v69;
LABEL_36:
                          uint64_t v59 = v69;
                          unint64_t v41 = v70;
                          sub_1000361E0((uint64_t)v69, v70);
                          unint64_t v34 = v41;
                          uint64_t v35 = v59;
LABEL_37:
                          if (v36 == 32)
                          {
                            uint64_t v42 = (uint64_t)v35;
                            unint64_t v43 = v34;
                            id v44 = [objc_allocWithZone((Class)NSKeyedArchiver) initRequiringSecureCoding:1];
                            [a1 encodeSystemFieldsWithCoder:v44];
                            [v44 finishEncoding];
                            id v45 = [v44 encodedData];
                            uint64_t v46 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
                            uint64_t v57 = v47;
                            uint64_t v58 = v46;

                            sub_10001CFB8((uint64_t)v61, v62);
                            sub_10001CFB8(v42, v43);
                            swift_unknownObjectRelease();
                            uint64_t v48 = v66;
                            uint64_t v49 = v57;
                            *uint64_t v66 = v58;
                            v48[1] = v49;
                            uint64_t v50 = (int *)type metadata accessor for MemberPeerTrust();
                            v65((char *)v48 + v50[5], v11, v8);
                            *((unsigned char *)v48 + v50[6]) = v63;
                            sub_1002A8790(v68, (uint64_t)v48 + v50[7]);
                            double v51 = (uint64_t *)((char *)v48 + v50[8]);
                            unint64_t v52 = v67;
                            *double v51 = v60;
                            v51[1] = v52;
                            uint64_t v53 = (uint64_t *)((char *)v48 + v50[9]);
                            *uint64_t v53 = v42;
                            v53[1] = v43;
                            return;
                          }
LABEL_39:
                          unint64_t v54 = v34;
                          sub_10001CFB8((uint64_t)v35, v34);
                          sub_10001CFB8((uint64_t)v35, v54);
                          break;
                        case 2uLL:
                          uint64_t v40 = v69[2];
                          uint64_t v39 = v69[3];
                          uint64_t v36 = v39 - v40;
                          if (!__OFSUB__(v39, v40)) {
                            goto LABEL_36;
                          }
                          goto LABEL_44;
                        case 3uLL:
                          goto LABEL_39;
                        default:
                          uint64_t v36 = BYTE6(v70);
                          goto LABEL_37;
                      }
                    }
                    swift_bridgeObjectRelease();
                  }
                  else
                  {
                    swift_bridgeObjectRelease();
                    uint64_t v33 = v68;
                  }
                  uint64_t v55 = (uint64_t)v61;
                  sub_100EB5F4C();
                  swift_allocError();
                  *uint64_t v56 = 5;
                  swift_willThrow();
                  sub_10001CFB8(v55, v62);
                  swift_unknownObjectRelease();

                  uint64_t v38 = v33;
                }
                else
                {
                  sub_100EB5F4C();
                  swift_allocError();
                  unsigned char *v37 = 4;
                  swift_willThrow();
                  sub_10001CFB8((uint64_t)v61, v62);
                  swift_unknownObjectRelease();

                  uint64_t v38 = v68;
                }
                sub_100EB6058(v38, (uint64_t (*)(void))type metadata accessor for PeerCommunicationIdentifier);
                goto LABEL_15;
              }
              swift_release();
              swift_unknownObjectRelease();
              sub_10001CFB8((uint64_t)v61, v26);
LABEL_14:

LABEL_15:
              (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v8);
              return;
            }
          }
          sub_100EB5F4C();
          swift_allocError();
          unsigned char *v27 = 3;
          swift_willThrow();
LABEL_13:
          swift_unknownObjectRelease();
          goto LABEL_14;
        }
        if (v71 == (id)1)
        {
          id v64 = v17;
          int v63 = 1;
          goto LABEL_20;
        }
      }
    }
    sub_100EB5F4C();
    swift_allocError();
    *uint64_t v20 = 2;
    swift_willThrow();
    goto LABEL_13;
  }
  sub_100270E18((uint64_t)v7);
  sub_100EB5F4C();
  swift_allocError();
  unsigned char *v16 = 1;
LABEL_17:
  swift_willThrow();
}

unint64_t sub_100EB4B60(char a1)
{
  unint64_t result = 0xD000000000000010;
  switch(a1)
  {
    case 1:
      unint64_t result = 0x696669746E656469;
      break;
    case 2:
      unint64_t result = 1701869940;
      break;
    case 3:
      unint64_t result = 0xD000000000000018;
      break;
    case 4:
      unint64_t result = 0xD000000000000011;
      break;
    case 5:
      unint64_t result = 0xD000000000000015;
      break;
    default:
      return result;
  }
  return result;
}

Swift::Int sub_100EB4C1C()
{
  unint64_t v1 = v0;
  Hasher.init(_seed:)();
  uint64_t v2 = *v0;
  unint64_t v3 = v1[1];
  sub_1000361E0(v2, v3);
  Data.hash(into:)();
  sub_10001CFB8(v2, v3);
  uint64_t v4 = type metadata accessor for MemberPeerTrust();
  type metadata accessor for UUID();
  sub_100EB77C0(&qword_10163BC60, (void (*)(uint64_t))&type metadata accessor for UUID);
  dispatch thunk of Hashable.hash(into:)();
  Hasher._combine(_:)(*((unsigned __int8 *)v1 + *(int *)(v4 + 24)));
  sub_1009C7C44();
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  uint64_t v5 = (uint64_t *)((char *)v1 + *(int *)(v4 + 36));
  uint64_t v6 = *v5;
  unint64_t v7 = v5[1];
  sub_1000361E0(*v5, v7);
  Data.hash(into:)();
  sub_10001CFB8(v6, v7);
  return Hasher._finalize()();
}

unint64_t sub_100EB4D74()
{
  return sub_100EB4B60(*v0);
}

uint64_t sub_100EB4D7C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_100EB7560(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_100EB4DA4(uint64_t a1)
{
  unint64_t v2 = sub_100EB5FA0();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_100EB4DE0(uint64_t a1)
{
  unint64_t v2 = sub_100EB5FA0();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_100EB4E20(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = v2;
  uint64_t v5 = *v2;
  unint64_t v6 = v4[1];
  sub_1000361E0(v5, v6);
  Data.hash(into:)();
  sub_10001CFB8(v5, v6);
  type metadata accessor for UUID();
  sub_100EB77C0(&qword_10163BC60, (void (*)(uint64_t))&type metadata accessor for UUID);
  dispatch thunk of Hashable.hash(into:)();
  Hasher._combine(_:)(*((unsigned __int8 *)v4 + *(int *)(a2 + 24)));
  sub_1009C7C44();
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  unint64_t v7 = (uint64_t *)((char *)v4 + *(int *)(a2 + 36));
  uint64_t v8 = *v7;
  unint64_t v9 = v7[1];
  sub_1000361E0(*v7, v9);
  Data.hash(into:)();

  return sub_10001CFB8(v8, v9);
}

Swift::Int sub_100EB4F6C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = v2;
  Hasher.init(_seed:)();
  uint64_t v5 = *v2;
  unint64_t v6 = v4[1];
  sub_1000361E0(v5, v6);
  Data.hash(into:)();
  sub_10001CFB8(v5, v6);
  type metadata accessor for UUID();
  sub_100EB77C0(&qword_10163BC60, (void (*)(uint64_t))&type metadata accessor for UUID);
  dispatch thunk of Hashable.hash(into:)();
  Hasher._combine(_:)(*((unsigned __int8 *)v4 + *(int *)(a2 + 24)));
  sub_1009C7C44();
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  unint64_t v7 = (uint64_t *)((char *)v4 + *(int *)(a2 + 36));
  uint64_t v8 = *v7;
  unint64_t v9 = v7[1];
  sub_1000361E0(*v7, v9);
  Data.hash(into:)();
  sub_10001CFB8(v8, v9);
  return Hasher._finalize()();
}

uint64_t sub_100EB50BC()
{
  uint64_t v0 = type metadata accessor for URL();
  uint64_t v1 = *(void *)(v0 - 8);
  uint64_t v2 = __chkstk_darwin(v0);
  uint64_t v4 = (char *)&v6 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10001E384(v2, qword_10170EE20);
  sub_100010324(v0, (uint64_t)qword_10170EE20);
  type metadata accessor for BeaconStore(0);
  sub_100A9DB34((uint64_t)v4);
  URL.appendingPathComponent(_:isDirectory:)();
  return (*(uint64_t (**)(char *, uint64_t))(v1 + 8))(v4, v0);
}

uint64_t sub_100EB51E0(id *a1)
{
  id v2 = *a1;
  [*a1 encryptedValues];
  swift_getObjectType();
  static os_log_type_t.debug.getter();
  if (qword_101637268 != -1) {
    swift_once();
  }
  sub_10000588C((uint64_t *)&unk_10163AD00);
  uint64_t v3 = swift_allocObject();
  *(_OWORD *)(v3 + 16) = xmmword_101342130;
  id v4 = v2;
  id v5 = [v4 description];
  uint64_t v6 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v8 = v7;

  *(void *)(v3 + 56) = &type metadata for String;
  *(void *)(v3 + 64) = sub_10000B4CC();
  *(void *)(v3 + 32) = v6;
  *(void *)(v3 + 40) = v8;
  os_log(_:dso:log:_:_:)();
  swift_bridgeObjectRelease();
  uint64_t v9 = type metadata accessor for MemberPeerTrust();
  CKRecordKeyValueSetting.subscript.setter();
  type metadata accessor for PropertyListEncoder();
  swift_allocObject();
  PropertyListEncoder.init()();
  type metadata accessor for PeerCommunicationIdentifier();
  sub_100EB77C0(&qword_1016407A8, (void (*)(uint64_t))type metadata accessor for PeerCommunicationIdentifier);
  dispatch thunk of PropertyListEncoder.encode<A>(_:)();
  swift_release();
  CKRecordKeyValueSetting.subscript.setter();
  swift_bridgeObjectRetain();
  CKRecordKeyValueSetting.subscript.setter();
  sub_1000361E0(*(void *)(v1 + *(int *)(v9 + 36)), *(void *)(v1 + *(int *)(v9 + 36) + 8));
  CKRecordKeyValueSetting.subscript.setter();

  return swift_unknownObjectRelease();
}

uint64_t sub_100EB5520(void *a1)
{
  uint64_t v3 = v1;
  uint64_t v5 = sub_10000588C(&qword_101661A60);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v8 = (char *)&v11 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10001CD44(a1, a1[3]);
  sub_100EB5FA0();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  long long v13 = *v3;
  char v12 = 0;
  sub_100037BB4();
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  if (!v2)
  {
    uint64_t v9 = type metadata accessor for MemberPeerTrust();
    LOBYTE(v13) = 1;
    type metadata accessor for UUID();
    sub_100EB77C0(&qword_10163B040, (void (*)(uint64_t))&type metadata accessor for UUID);
    KeyedEncodingContainer.encode<A>(_:forKey:)();
    LOBYTE(v13) = *((unsigned char *)v3 + *(int *)(v9 + 24));
    char v12 = 2;
    sub_1002A8960();
    KeyedEncodingContainer.encode<A>(_:forKey:)();
    LOBYTE(v13) = 3;
    type metadata accessor for PeerCommunicationIdentifier();
    sub_100EB77C0(&qword_1016407A8, (void (*)(uint64_t))type metadata accessor for PeerCommunicationIdentifier);
    KeyedEncodingContainer.encode<A>(_:forKey:)();
    LOBYTE(v13) = 4;
    KeyedEncodingContainer.encode(_:forKey:)();
    long long v13 = *(_OWORD *)((char *)v3 + *(int *)(v9 + 36));
    char v12 = 5;
    sub_1002A89B4();
    KeyedEncodingContainer.encode<A>(_:forKey:)();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
}

uint64_t sub_100EB5824@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v22 = a2;
  uint64_t v23 = type metadata accessor for PeerCommunicationIdentifier();
  __chkstk_darwin(v23);
  id v4 = (char *)&v22 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = type metadata accessor for UUID();
  uint64_t v25 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v7 = (char *)&v22 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v26 = sub_10000588C(&qword_101661A50);
  uint64_t v24 = *(void *)(v26 - 8);
  __chkstk_darwin(v26);
  uint64_t v9 = (char *)&v22 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = (int *)type metadata accessor for MemberPeerTrust();
  __chkstk_darwin(v10);
  char v12 = (char *)&v22 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = a1[3];
  NSString v28 = a1;
  sub_10001CD44(a1, v13);
  sub_100EB5FA0();
  uint64_t v27 = v9;
  id v14 = v29;
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v14) {
    return _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)v28);
  }
  id v29 = v4;
  uint64_t v15 = v25;
  char v31 = 0;
  sub_100037AA0();
  uint64_t v16 = v26;
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  *(_OWORD *)char v12 = v30;
  LOBYTE(v30) = 1;
  sub_100EB77C0((unint64_t *)&qword_10163B010, (void (*)(uint64_t))&type metadata accessor for UUID);
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  (*(void (**)(char *, char *, uint64_t))(v15 + 32))(&v12[v10[5]], v7, v5);
  char v31 = 2;
  sub_1002A873C();
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  v12[v10[6]] = v30;
  LOBYTE(v30) = 3;
  sub_100EB77C0((unint64_t *)&unk_101661A40, (void (*)(uint64_t))type metadata accessor for PeerCommunicationIdentifier);
  uint64_t v17 = (uint64_t)v29;
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  sub_1002A8790(v17, (uint64_t)&v12[v10[7]]);
  LOBYTE(v30) = 4;
  uint64_t v18 = KeyedDecodingContainer.decode(_:forKey:)();
  uint64_t v19 = (uint64_t *)&v12[v10[8]];
  *uint64_t v19 = v18;
  v19[1] = v20;
  char v31 = 5;
  sub_1002A87F4();
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  (*(void (**)(char *, uint64_t))(v24 + 8))(v27, v16);
  *(_OWORD *)&v12[v10[9]] = v30;
  sub_100EB5FF4((uint64_t)v12, v22);
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)v28);
  return sub_100EB6058((uint64_t)v12, (uint64_t (*)(void))type metadata accessor for MemberPeerTrust);
}

uint64_t sub_100EB5DF4@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_100EB5824(a1, a2);
}

uint64_t sub_100EB5E0C(void *a1)
{
  return sub_100EB5520(a1);
}

uint64_t sub_100EB5E24(uint64_t a1)
{
  *(void *)(a1 + 8) = sub_100EB77C0((unint64_t *)&unk_101661A10, (void (*)(uint64_t))type metadata accessor for MemberPeerTrust);
  uint64_t result = sub_100EB77C0(&qword_10165E818, (void (*)(uint64_t))type metadata accessor for MemberPeerTrust);
  *(void *)(a1 + 16) = result;
  return result;
}

uint64_t type metadata accessor for MemberPeerTrust()
{
  uint64_t result = qword_101661AC0;
  if (!qword_101661AC0) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t sub_100EB5EF4(uint64_t a1)
{
  uint64_t result = sub_100EB77C0((unint64_t *)&unk_101661A20, (void (*)(uint64_t))type metadata accessor for MemberPeerTrust);
  *(void *)(a1 + 8) = result;
  return result;
}

unint64_t sub_100EB5F4C()
{
  unint64_t result = qword_101661A30;
  if (!qword_101661A30)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_101661A30);
  }
  return result;
}

unint64_t sub_100EB5FA0()
{
  unint64_t result = qword_101661A58;
  if (!qword_101661A58)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_101661A58);
  }
  return result;
}

uint64_t sub_100EB5FF4(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for MemberPeerTrust();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_100EB6058(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t sub_100EB60B8(uint64_t a1, uint64_t a2)
{
  if ((_s12searchpartyd24KeyRepresentableInternalV23__derived_struct_equalsySbAC_ACtFZ_0(*(void *)a1, *(void *)(a1 + 8), *(void *)a2, *(void *)(a2 + 8)) & 1) == 0)return 0; {
  uint64_t v4 = (int *)type metadata accessor for MemberPeerTrust();
  }
  if ((static UUID.== infix(_:_:)() & 1) == 0
    || *(unsigned __int8 *)(a1 + v4[6]) != *(unsigned __int8 *)(a2 + v4[6])
    || (sub_1009CA754(a1 + v4[7], a2 + v4[7]) & 1) == 0)
  {
    return 0;
  }
  uint64_t v5 = v4[8];
  uint64_t v6 = *(void *)(a1 + v5);
  uint64_t v7 = *(void *)(a1 + v5 + 8);
  uint64_t v8 = (void *)(a2 + v5);
  BOOL v9 = v6 == *v8 && v7 == v8[1];
  if (!v9 && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0) {
    return 0;
  }
  uint64_t v10 = v4[9];
  uint64_t v11 = a1 + v10;
  uint64_t v12 = *(void *)(a1 + v10);
  unint64_t v13 = *(void *)(v11 + 8);
  id v14 = (uint64_t *)(a2 + v10);
  uint64_t v15 = *v14;
  unint64_t v16 = v14[1];
  sub_1000361E0(v12, v13);
  sub_1000361E0(v15, v16);
  char v17 = _s12searchpartyd24KeyRepresentableInternalV23__derived_struct_equalsySbAC_ACtFZ_0(v12, v13, v15, v16);
  sub_10001CFB8(v15, v16);
  sub_10001CFB8(v12, v13);
  return v17 & 1;
}

unsigned char *storeEnumTagSinglePayload for MemberPeerTrust.CodingKeys(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 5 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 5) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFB) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFA)
  {
    unsigned int v6 = ((a2 - 251) >> 8) + 1;
    *unint64_t result = a2 + 5;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x100EB62A8);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 5;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for MemberPeerTrust.CodingKeys()
{
  return &type metadata for MemberPeerTrust.CodingKeys;
}

unsigned char *storeEnumTagSinglePayload for MemberPeerTrust.ConversionError(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 6 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 6) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFA) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xF9)
  {
    unsigned int v6 = ((a2 - 250) >> 8) + 1;
    *unint64_t result = a2 + 6;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x100EB63ACLL);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 6;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for MemberPeerTrust.ConversionError()
{
  return &type metadata for MemberPeerTrust.ConversionError;
}

uint64_t *sub_100EB63E4(uint64_t *a1, uint64_t *a2, int *a3)
{
  int v5 = *(_DWORD *)(*((void *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v19 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v19 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v7 = *a2;
    unint64_t v8 = a2[1];
    sub_1000361E0(*a2, v8);
    *a1 = v7;
    a1[1] = v8;
    uint64_t v9 = a3[5];
    uint64_t v10 = (char *)a1 + v9;
    uint64_t v11 = (char *)a2 + v9;
    uint64_t v12 = type metadata accessor for UUID();
    unint64_t v13 = *(void (**)(char *, char *, uint64_t))(*(void *)(v12 - 8) + 16);
    v13(v10, v11, v12);
    uint64_t v14 = a3[7];
    *((unsigned char *)a1 + a3[6]) = *((unsigned char *)a2 + a3[6]);
    uint64_t v15 = (char *)a1 + v14;
    unint64_t v16 = (char *)a2 + v14;
    uint64_t v17 = type metadata accessor for PeerCommunicationIdentifier();
    switch(swift_getEnumCaseMultiPayload())
    {
      case 0u:
        uint64_t v18 = *((void *)v16 + 1);
        *(void *)uint64_t v15 = *(void *)v16;
        *((void *)v15 + 1) = v18;
        swift_bridgeObjectRetain();
        goto LABEL_11;
      case 1u:
        v13(v15, v16, v12);
        goto LABEL_11;
      case 2u:
        *(_OWORD *)uint64_t v15 = *(_OWORD *)v16;
        *((void *)v15 + 2) = *((void *)v16 + 2);
        swift_bridgeObjectRetain();
        goto LABEL_11;
      case 3u:
        char *v15 = *v16;
        uint64_t v20 = *((void *)v16 + 2);
        *((void *)v15 + 1) = *((void *)v16 + 1);
        *((void *)v15 + 2) = v20;
        swift_bridgeObjectRetain();
        goto LABEL_11;
      case 4u:
        char *v15 = *v16;
        uint64_t v21 = *((void *)v16 + 2);
        *((void *)v15 + 1) = *((void *)v16 + 1);
        *((void *)v15 + 2) = v21;
        uint64_t v22 = *((void *)v16 + 3);
        uint64_t v23 = *((void *)v16 + 4);
        *((void *)v15 + 3) = v22;
        *((void *)v15 + 4) = v23;
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        goto LABEL_11;
      case 5u:
        uint64_t v24 = *((void *)v16 + 1);
        *(void *)uint64_t v15 = *(void *)v16;
        *((void *)v15 + 1) = v24;
        v15[16] = v16[16];
        uint64_t v25 = *((void *)v16 + 4);
        *((void *)v15 + 3) = *((void *)v16 + 3);
        *((void *)v15 + 4) = v25;
        uint64_t v26 = *((void *)v16 + 5);
        uint64_t v27 = *((void *)v16 + 6);
        *((void *)v15 + 5) = v26;
        *((void *)v15 + 6) = v27;
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
LABEL_11:
        swift_storeEnumTagMultiPayload();
        break;
      default:
        memcpy(v15, v16, *(void *)(*(void *)(v17 - 8) + 64));
        break;
    }
    uint64_t v28 = a3[8];
    uint64_t v29 = a3[9];
    long long v30 = (uint64_t *)((char *)a1 + v28);
    char v31 = (uint64_t *)((char *)a2 + v28);
    uint64_t v32 = v31[1];
    *long long v30 = *v31;
    v30[1] = v32;
    uint64_t v33 = (uint64_t *)((char *)a1 + v29);
    unint64_t v34 = (char *)a2 + v29;
    uint64_t v35 = *(uint64_t *)((char *)a2 + v29);
    unint64_t v36 = *((void *)v34 + 1);
    swift_bridgeObjectRetain();
    sub_1000361E0(v35, v36);
    *uint64_t v33 = v35;
    v33[1] = v36;
  }
  return a1;
}

uint64_t sub_100EB66AC(uint64_t a1, int *a2)
{
  sub_10001CFB8(*(void *)a1, *(void *)(a1 + 8));
  uint64_t v4 = a1 + a2[5];
  uint64_t v5 = type metadata accessor for UUID();
  unsigned int v6 = *(void (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8);
  v6(v4, v5);
  uint64_t v7 = a1 + a2[7];
  type metadata accessor for PeerCommunicationIdentifier();
  switch(swift_getEnumCaseMultiPayload())
  {
    case 0u:
    case 2u:
    case 3u:
      goto LABEL_5;
    case 1u:
      v6(v7, v5);
      break;
    case 4u:
      swift_bridgeObjectRelease();
      goto LABEL_5;
    case 5u:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
LABEL_5:
      swift_bridgeObjectRelease();
      break;
    default:
      break;
  }
  swift_bridgeObjectRelease();
  unint64_t v8 = (uint64_t *)(a1 + a2[9]);
  uint64_t v9 = *v8;
  unint64_t v10 = v8[1];

  return sub_10001CFB8(v9, v10);
}

uint64_t *sub_100EB680C(uint64_t *a1, uint64_t *a2, int *a3)
{
  uint64_t v6 = *a2;
  unint64_t v7 = a2[1];
  sub_1000361E0(*a2, v7);
  *a1 = v6;
  a1[1] = v7;
  uint64_t v8 = a3[5];
  uint64_t v9 = (char *)a1 + v8;
  unint64_t v10 = (char *)a2 + v8;
  uint64_t v11 = type metadata accessor for UUID();
  uint64_t v12 = *(void (**)(char *, char *, uint64_t))(*(void *)(v11 - 8) + 16);
  v12(v9, v10, v11);
  uint64_t v13 = a3[7];
  *((unsigned char *)a1 + a3[6]) = *((unsigned char *)a2 + a3[6]);
  uint64_t v14 = (char *)a1 + v13;
  uint64_t v15 = (char *)a2 + v13;
  uint64_t v16 = type metadata accessor for PeerCommunicationIdentifier();
  switch(swift_getEnumCaseMultiPayload())
  {
    case 0u:
      uint64_t v17 = *((void *)v15 + 1);
      *(void *)uint64_t v14 = *(void *)v15;
      *((void *)v14 + 1) = v17;
      swift_bridgeObjectRetain();
      goto LABEL_9;
    case 1u:
      v12(v14, v15, v11);
      goto LABEL_9;
    case 2u:
      *(_OWORD *)uint64_t v14 = *(_OWORD *)v15;
      *((void *)v14 + 2) = *((void *)v15 + 2);
      swift_bridgeObjectRetain();
      goto LABEL_9;
    case 3u:
      *uint64_t v14 = *v15;
      uint64_t v18 = *((void *)v15 + 2);
      *((void *)v14 + 1) = *((void *)v15 + 1);
      *((void *)v14 + 2) = v18;
      swift_bridgeObjectRetain();
      goto LABEL_9;
    case 4u:
      *uint64_t v14 = *v15;
      uint64_t v19 = *((void *)v15 + 2);
      *((void *)v14 + 1) = *((void *)v15 + 1);
      *((void *)v14 + 2) = v19;
      uint64_t v20 = *((void *)v15 + 3);
      uint64_t v21 = *((void *)v15 + 4);
      *((void *)v14 + 3) = v20;
      *((void *)v14 + 4) = v21;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      goto LABEL_9;
    case 5u:
      uint64_t v22 = *((void *)v15 + 1);
      *(void *)uint64_t v14 = *(void *)v15;
      *((void *)v14 + 1) = v22;
      unsigned char v14[16] = v15[16];
      uint64_t v23 = *((void *)v15 + 4);
      *((void *)v14 + 3) = *((void *)v15 + 3);
      *((void *)v14 + 4) = v23;
      uint64_t v24 = *((void *)v15 + 5);
      uint64_t v25 = *((void *)v15 + 6);
      *((void *)v14 + 5) = v24;
      *((void *)v14 + 6) = v25;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
LABEL_9:
      swift_storeEnumTagMultiPayload();
      break;
    default:
      memcpy(v14, v15, *(void *)(*(void *)(v16 - 8) + 64));
      break;
  }
  uint64_t v26 = a3[8];
  uint64_t v27 = a3[9];
  uint64_t v28 = (uint64_t *)((char *)a1 + v26);
  uint64_t v29 = (uint64_t *)((char *)a2 + v26);
  uint64_t v30 = v29[1];
  void *v28 = *v29;
  v28[1] = v30;
  char v31 = (uint64_t *)((char *)a1 + v27);
  uint64_t v32 = (char *)a2 + v27;
  uint64_t v33 = *(uint64_t *)((char *)a2 + v27);
  unint64_t v34 = *((void *)v32 + 1);
  swift_bridgeObjectRetain();
  sub_1000361E0(v33, v34);
  *char v31 = v33;
  v31[1] = v34;
  return a1;
}

uint64_t *sub_100EB6A84(uint64_t *a1, uint64_t *a2, int *a3)
{
  uint64_t v6 = *a2;
  unint64_t v7 = a2[1];
  sub_1000361E0(*a2, v7);
  uint64_t v8 = *a1;
  unint64_t v9 = a1[1];
  *a1 = v6;
  a1[1] = v7;
  sub_10001CFB8(v8, v9);
  uint64_t v10 = a3[5];
  uint64_t v11 = (char *)a1 + v10;
  uint64_t v12 = (char *)a2 + v10;
  uint64_t v13 = type metadata accessor for UUID();
  uint64_t v14 = *(void *)(v13 - 8);
  (*(void (**)(char *, char *, uint64_t))(v14 + 24))(v11, v12, v13);
  *((unsigned char *)a1 + a3[6]) = *((unsigned char *)a2 + a3[6]);
  if (a1 != a2)
  {
    uint64_t v15 = a3[7];
    uint64_t v16 = (uint64_t *)((char *)a1 + v15);
    uint64_t v17 = (uint64_t *)((char *)a2 + v15);
    sub_100EB6058((uint64_t)a1 + v15, (uint64_t (*)(void))type metadata accessor for PeerCommunicationIdentifier);
    uint64_t v18 = type metadata accessor for PeerCommunicationIdentifier();
    switch(swift_getEnumCaseMultiPayload())
    {
      case 0u:
        void *v16 = *v17;
        v16[1] = v17[1];
        swift_bridgeObjectRetain();
        swift_storeEnumTagMultiPayload();
        break;
      case 1u:
        (*(void (**)(void *, void *, uint64_t))(v14 + 16))(v16, v17, v13);
        swift_storeEnumTagMultiPayload();
        break;
      case 2u:
        void *v16 = *v17;
        v16[1] = v17[1];
        v16[2] = v17[2];
        swift_bridgeObjectRetain();
        swift_storeEnumTagMultiPayload();
        break;
      case 3u:
        *(unsigned char *)uint64_t v16 = *(unsigned char *)v17;
        v16[1] = v17[1];
        v16[2] = v17[2];
        swift_bridgeObjectRetain();
        swift_storeEnumTagMultiPayload();
        break;
      case 4u:
        *(unsigned char *)uint64_t v16 = *(unsigned char *)v17;
        v16[1] = v17[1];
        v16[2] = v17[2];
        v16[3] = v17[3];
        v16[4] = v17[4];
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_storeEnumTagMultiPayload();
        break;
      case 5u:
        void *v16 = *v17;
        v16[1] = v17[1];
        *((unsigned char *)v16 + 16) = *((unsigned char *)v17 + 16);
        v16[3] = v17[3];
        v16[4] = v17[4];
        v16[5] = v17[5];
        v16[6] = v17[6];
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_storeEnumTagMultiPayload();
        break;
      default:
        memcpy(v16, v17, *(void *)(*(void *)(v18 - 8) + 64));
        break;
    }
  }
  uint64_t v19 = a3[8];
  uint64_t v20 = (uint64_t *)((char *)a1 + v19);
  uint64_t v21 = (uint64_t *)((char *)a2 + v19);
  *uint64_t v20 = *v21;
  v20[1] = v21[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v22 = a3[9];
  uint64_t v23 = (uint64_t *)((char *)a1 + v22);
  uint64_t v24 = (uint64_t *)((char *)a2 + v22);
  uint64_t v25 = *v24;
  unint64_t v26 = v24[1];
  sub_1000361E0(*v24, v26);
  uint64_t v27 = *v23;
  unint64_t v28 = v23[1];
  *uint64_t v23 = v25;
  v23[1] = v26;
  sub_10001CFB8(v27, v28);
  return a1;
}

_OWORD *sub_100EB6DB4(_OWORD *a1, _OWORD *a2, int *a3)
{
  *a1 = *a2;
  uint64_t v6 = a3[5];
  unint64_t v7 = (char *)a1 + v6;
  uint64_t v8 = (char *)a2 + v6;
  uint64_t v9 = type metadata accessor for UUID();
  uint64_t v10 = *(void (**)(char *, char *, uint64_t))(*(void *)(v9 - 8) + 32);
  v10(v7, v8, v9);
  uint64_t v11 = a3[7];
  *((unsigned char *)a1 + a3[6]) = *((unsigned char *)a2 + a3[6]);
  uint64_t v12 = (char *)a1 + v11;
  uint64_t v13 = (char *)a2 + v11;
  uint64_t v14 = type metadata accessor for PeerCommunicationIdentifier();
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    v10(v12, v13, v9);
    swift_storeEnumTagMultiPayload();
  }
  else
  {
    memcpy(v12, v13, *(void *)(*(void *)(v14 - 8) + 64));
  }
  uint64_t v15 = a3[9];
  *(_OWORD *)((char *)a1 + a3[8]) = *(_OWORD *)((char *)a2 + a3[8]);
  *(_OWORD *)((char *)a1 + v15) = *(_OWORD *)((char *)a2 + v15);
  return a1;
}

uint64_t *sub_100EB6EE8(uint64_t *a1, uint64_t *a2, int *a3)
{
  uint64_t v6 = *a1;
  unint64_t v7 = a1[1];
  *(_OWORD *)a1 = *(_OWORD *)a2;
  sub_10001CFB8(v6, v7);
  uint64_t v8 = a3[5];
  uint64_t v9 = (char *)a1 + v8;
  uint64_t v10 = (char *)a2 + v8;
  uint64_t v11 = type metadata accessor for UUID();
  uint64_t v12 = *(void *)(v11 - 8);
  (*(void (**)(char *, char *, uint64_t))(v12 + 40))(v9, v10, v11);
  *((unsigned char *)a1 + a3[6]) = *((unsigned char *)a2 + a3[6]);
  if (a1 != a2)
  {
    uint64_t v13 = a3[7];
    uint64_t v14 = (char *)a1 + v13;
    uint64_t v15 = (char *)a2 + v13;
    sub_100EB6058((uint64_t)a1 + v13, (uint64_t (*)(void))type metadata accessor for PeerCommunicationIdentifier);
    uint64_t v16 = type metadata accessor for PeerCommunicationIdentifier();
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      (*(void (**)(char *, char *, uint64_t))(v12 + 32))(v14, v15, v11);
      swift_storeEnumTagMultiPayload();
    }
    else
    {
      memcpy(v14, v15, *(void *)(*(void *)(v16 - 8) + 64));
    }
  }
  uint64_t v17 = a3[8];
  uint64_t v18 = (uint64_t *)((char *)a1 + v17);
  uint64_t v19 = (uint64_t *)((char *)a2 + v17);
  uint64_t v21 = *v19;
  uint64_t v20 = v19[1];
  *uint64_t v18 = v21;
  v18[1] = v20;
  swift_bridgeObjectRelease();
  uint64_t v22 = a3[9];
  uint64_t v23 = *(uint64_t *)((char *)a1 + v22);
  unint64_t v24 = *(uint64_t *)((char *)a1 + v22 + 8);
  *(_OWORD *)((char *)a1 + v22) = *(_OWORD *)((char *)a2 + v22);
  sub_10001CFB8(v23, v24);
  return a1;
}

uint64_t sub_100EB7084(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_100EB7098);
}

uint64_t sub_100EB7098(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for UUID();
  if (*(_DWORD *)(*(void *)(v6 - 8) + 84) == a2)
  {
    uint64_t v7 = v6;
    uint64_t v8 = *(void *)(v6 - 8);
    uint64_t v9 = a3[5];
LABEL_5:
    uint64_t v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v8 + 48);
    return v11(a1 + v9, a2, v7);
  }
  uint64_t v10 = type metadata accessor for PeerCommunicationIdentifier();
  if (*(_DWORD *)(*(void *)(v10 - 8) + 84) == a2)
  {
    uint64_t v7 = v10;
    uint64_t v8 = *(void *)(v10 - 8);
    uint64_t v9 = a3[7];
    goto LABEL_5;
  }
  unint64_t v13 = *(void *)(a1 + a3[8] + 8);
  if (v13 >= 0xFFFFFFFF) {
    LODWORD(v13) = -1;
  }
  return (v13 + 1);
}

uint64_t sub_100EB71AC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_100EB71C0);
}

uint64_t sub_100EB71C0(uint64_t a1, uint64_t a2, int a3, int *a4)
{
  uint64_t v8 = type metadata accessor for UUID();
  if (*(_DWORD *)(*(void *)(v8 - 8) + 84) == a3)
  {
    uint64_t v9 = v8;
    uint64_t v10 = *(void *)(v8 - 8);
    uint64_t v11 = a4[5];
  }
  else
  {
    uint64_t result = type metadata accessor for PeerCommunicationIdentifier();
    if (*(_DWORD *)(*(void *)(result - 8) + 84) != a3)
    {
      *(void *)(a1 + a4[8] + 8) = (a2 - 1);
      return result;
    }
    uint64_t v9 = result;
    uint64_t v10 = *(void *)(result - 8);
    uint64_t v11 = a4[7];
  }
  unint64_t v13 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v10 + 56);

  return v13(a1 + v11, a2, a2, v9);
}

uint64_t sub_100EB72D0()
{
  uint64_t result = type metadata accessor for UUID();
  if (v1 <= 0x3F)
  {
    uint64_t result = type metadata accessor for PeerCommunicationIdentifier();
    if (v2 <= 0x3F)
    {
      swift_initStructMetadata();
      return 0;
    }
  }
  return result;
}

uint64_t sub_100EB73B8()
{
  return sub_100EB77C0(&qword_101661B08, (void (*)(uint64_t))type metadata accessor for MemberPeerTrust);
}

unint64_t sub_100EB7404()
{
  unint64_t result = qword_101661B10;
  if (!qword_101661B10)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_101661B10);
  }
  return result;
}

unint64_t sub_100EB745C()
{
  unint64_t result = qword_101661B18;
  if (!qword_101661B18)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_101661B18);
  }
  return result;
}

unint64_t sub_100EB74B4()
{
  unint64_t result = qword_101661B20;
  if (!qword_101661B20)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_101661B20);
  }
  return result;
}

unint64_t sub_100EB750C()
{
  unint64_t result = qword_101661B28;
  if (!qword_101661B28)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_101661B28);
  }
  return result;
}

uint64_t sub_100EB7560(uint64_t a1, uint64_t a2)
{
  if (a1 == 0xD000000000000010 && a2 == 0x80000001013EEA50
    || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x696669746E656469 && a2 == 0xEA00000000007265 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 1701869940 && a2 == 0xE400000000000000 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else if (a1 == 0xD000000000000018 && a2 == 0x80000001013F7C30 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 3;
  }
  else if (a1 == 0xD000000000000011 && a2 == 0x80000001013F7C50 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 4;
  }
  else if (a1 == 0xD000000000000015 && a2 == 0x80000001013F7C70)
  {
    swift_bridgeObjectRelease();
    return 5;
  }
  else
  {
    char v5 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v5) {
      return 5;
    }
    else {
      return 6;
    }
  }
}

uint64_t sub_100EB77C0(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

ValueMetadata *type metadata accessor for AccessoryCategoryResponsePayload()
{
  return &type metadata for AccessoryCategoryResponsePayload;
}

uint64_t sub_100EB7818(void *a1)
{
  sub_10001CD44(a1, a1[3]);
  dispatch thunk of BinaryEncoding.container()();
  sub_1001ACBF0();
  uint64_t v1 = FixedWidthInteger.data.getter();
  unint64_t v3 = v2;
  sub_1000BD078((uint64_t)v5, v6);
  sub_100135A44();
  dispatch thunk of BinaryEncodingContaining.encode<A>(sequence:)();
  sub_10001CFB8(v1, v3);
  return _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)v5);
}

uint64_t sub_100EB78F0@<X0>(void *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = sub_100EB79BC(a1);
  if (!v2) {
    *a2 = result;
  }
  return result;
}

uint64_t sub_100EB791C(void *a1)
{
  return sub_100EB7818(a1);
}

unint64_t sub_100EB7938(uint64_t a1)
{
  *(void *)(a1 + 8) = sub_100EB7968();
  unint64_t result = sub_100573ED0();
  *(void *)(a1 + 16) = result;
  return result;
}

unint64_t sub_100EB7968()
{
  unint64_t result = qword_101661B30;
  if (!qword_101661B30)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, &qword_101661B30);
  }
  return result;
}

uint64_t sub_100EB79BC(void *a1)
{
  uint64_t v3 = type metadata accessor for Endianness();
  __chkstk_darwin(v3 - 8);
  sub_10001CD44(a1, a1[3]);
  dispatch thunk of BinaryDecoding.container()();
  uint64_t v4 = sub_1000BD078((uint64_t)v13, v14);
  uint64_t v5 = dispatch thunk of BinaryDecodingContaining.decode(length:)();
  if (!v1)
  {
    uint64_t v7 = v5;
    unint64_t v8 = v6;
    sub_1000361E0(v5, v6);
    static Endianness.current.getter();
    sub_1001ACBF0();
    FixedWidthInteger.init(data:ofEndianness:)();
    if (v12 != 1)
    {
      uint64_t v4 = v11;
      sub_10001CFB8(v7, v8);
      _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)v13);
      _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)a1);
      return v4;
    }
    uint64_t v4 = type metadata accessor for BinaryEncodingError();
    sub_10017986C();
    swift_allocError();
    (*(void (**)(uint64_t, void, uint64_t))(*(void *)(v4 - 8) + 104))(v9, enum case for BinaryEncodingError.encodingError(_:), v4);
    swift_willThrow();
    sub_10001CFB8(v7, v8);
  }
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)v13);
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)a1);
  return v4;
}

uint64_t sub_100EB7B8C(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 72))();
}

uint64_t sub_100EB7BC0(uint64_t a1)
{
  v1[2] = a1;
  uint64_t v2 = type metadata accessor for FMNAccountType();
  v1[3] = v2;
  v1[4] = *(void *)(v2 - 8);
  v1[5] = swift_task_alloc();
  sub_10000588C(&qword_101649E40);
  v1[6] = swift_task_alloc();
  uint64_t v3 = type metadata accessor for URL();
  v1[7] = v3;
  v1[8] = *(void *)(v3 - 8);
  v1[9] = swift_task_alloc();
  return _swift_task_switch(sub_100EB7D0C, 0, 0);
}

uint64_t sub_100EB7D0C()
{
  uint64_t v1 = v0[7];
  uint64_t v2 = v0[8];
  uint64_t v4 = v0[5];
  uint64_t v3 = v0[6];
  uint64_t v5 = v0[3];
  uint64_t v6 = v0[4];
  type metadata accessor for FMNAuthenticationProvider();
  (*(void (**)(uint64_t, void, uint64_t))(v6 + 104))(v4, enum case for FMNAccountType.itemSharing(_:), v5);
  static FMNAuthenticationProvider.configurationURL(accountType:)();
  (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v4, v5);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v2 + 48))(v3, 1, v1) == 1)
  {
    sub_100020198(v0[6]);
  }
  else
  {
    (*(void (**)(void, void, void))(v0[8] + 32))(v0[9], v0[6], v0[7]);
    Swift::String_optional v7 = URL.host(percentEncoded:)(1);
    uint64_t v9 = v0[8];
    uint64_t v8 = v0[9];
    uint64_t v10 = v0[7];
    if (v7.value._object)
    {
      URL.path(percentEncoded:)(1);
      URLComponents.init()();
      URLComponents.scheme.setter();
      URLComponents.host.setter();
      URLComponents.path.setter();
      (*(void (**)(uint64_t, uint64_t))(v9 + 8))(v8, v10);
      goto LABEL_7;
    }
    (*(void (**)(void, void))(v9 + 8))(v0[9], v0[7]);
  }
  sub_100EB7EF8();
LABEL_7:
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v11 = (uint64_t (*)(void))v0[1];
  return v11();
}

uint64_t sub_100EB7EF8()
{
  if (qword_101637628 != -1) {
    swift_once();
  }
  uint64_t v0 = type metadata accessor for Logger();
  sub_100010324(v0, (uint64_t)qword_10170F7C8);
  uint64_t v1 = Logger.logObject.getter();
  os_log_type_t v2 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v1, v2))
  {
    uint64_t v3 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v3 = 0;
    _os_log_impl((void *)&_mh_execute_header, v1, v2, "No url found in account bag.", v3, 2u);
    swift_slowDealloc();
  }

  URLComponents.init()();
  URLComponents.scheme.setter();
  URLComponents.path.setter();
  return URLComponents.host.setter();
}

ValueMetadata *type metadata accessor for MaskedIdentifier()
{
  return &type metadata for MaskedIdentifier;
}

uint64_t sub_100EB8044(char *a1, char *a2)
{
  return sub_10071BA0C(*a1, *a2);
}

Swift::Int sub_100EB8050()
{
  return Hasher._finalize()();
}

uint64_t sub_100EB80D8()
{
  String.hash(into:)();

  return swift_bridgeObjectRelease();
}

Swift::Int sub_100EB814C()
{
  return Hasher._finalize()();
}

uint64_t sub_100EB81D0@<X0>(Swift::String *a1@<X0>, char *a2@<X8>)
{
  Swift::Int v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_1015A4ED8, *a1);
  uint64_t result = swift_bridgeObjectRelease();
  if (v3 == 1) {
    char v5 = 1;
  }
  else {
    char v5 = 2;
  }
  if (!v3) {
    char v5 = 0;
  }
  *a2 = v5;
  return result;
}

void sub_100EB8230(unint64_t *a1@<X8>)
{
  unint64_t v2 = 0x6E776F6E6B6E75;
  if (*v1) {
    unint64_t v2 = 0xD000000000000014;
  }
  unint64_t v3 = 0x80000001013F0FA0;
  if (!*v1) {
    unint64_t v3 = 0xE700000000000000;
  }
  *a1 = v2;
  a1[1] = v3;
}

void sub_100EB8274(unsigned char *a1@<X8>)
{
  *a1 = 0;
}

uint64_t sub_100EB827C()
{
  return UnknownRawRepresentable<>.init(from:)();
}

uint64_t sub_100EB82D4()
{
  return RawRepresentable<>.encode(to:)();
}

uint64_t sub_100EB8324()
{
  if (*v0) {
    return 0xD000000000000014;
  }
  else {
    return 0x6E776F6E6B6E75;
  }
}

uint64_t sub_100EB8364@<X0>(Swift::String string@<0:X0, 8:X1>, char *a2@<X8>)
{
  object = string._object;
  v3._countAndFlagsBits = string._countAndFlagsBits;
  v3._object = object;
  Swift::Int v5 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_1015A4ED8, v3);
  uint64_t result = swift_bridgeObjectRelease();
  if (v5 == 1) {
    char v7 = 1;
  }
  else {
    char v7 = 2;
  }
  if (!v5) {
    char v7 = 0;
  }
  *a2 = v7;
  return result;
}

uint64_t sub_100EB83C8(uint64_t a1)
{
  unint64_t v2 = sub_1009EC1C8();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_100EB8404(uint64_t a1)
{
  unint64_t v2 = sub_1009EC1C8();

  return CodingKey.debugDescription.getter(a1, v2);
}

BOOL sub_100EB8440(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v6 = v5;
  uint64_t v67 = a3;
  uint64_t v11 = sub_10000588C((uint64_t *)&unk_101648A20);
  uint64_t v12 = __chkstk_darwin(v11 - 8);
  uint64_t v14 = (char *)&v60 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v12);
  uint64_t v16 = (char *)&v60 - v15;
  uint64_t v17 = type metadata accessor for SystemVersionNumber();
  uint64_t v18 = __chkstk_darwin(v17);
  uint64_t v20 = (char *)&v60 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v18);
  uint64_t v23 = (char *)&v60 - v22;
  if (*(unsigned char *)v6 != 1) {
    return 0;
  }
  uint64_t v65 = a5;
  uint64_t v66 = v21;
  type metadata accessor for FeatureSupportMatrix();
  sub_10000588C(&qword_101661B40);
  uint64_t v24 = CustomCodableKeyDictionary.wrappedValue.getter();
  if (!v24)
  {
LABEL_8:
    uint64_t v29 = *(void *)(v6 + 8);
    if (*(void *)(v29 + 16))
    {
      swift_bridgeObjectRetain();
      uint64_t v30 = sub_100723FF4(a1, a2);
      if (v31)
      {
        uint64_t v32 = *(void *)(*(void *)(v29 + 56) + 8 * v30);
        swift_bridgeObjectRelease();
        if (v32 <= v67)
        {
          uint64_t v33 = *(void *)(v6 + 24);
          if (!*(void *)(v33 + 16))
          {
            (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v66 + 56))(v16, 1, 1, v17);
LABEL_18:
            sub_1000A3B54((uint64_t)v16);
            return 0;
          }
          swift_bridgeObjectRetain();
          uint64_t v34 = sub_100723FF4(a1, a2);
          uint64_t v36 = v66;
          if (v35)
          {
            (*(void (**)(char *, uint64_t, uint64_t))(v66 + 16))(v16, *(void *)(v33 + 56) + *(void *)(v66 + 72) * v34, v17);
            unint64_t v37 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v36 + 56);
            uint64_t v38 = v16;
            uint64_t v39 = 0;
          }
          else
          {
            unint64_t v37 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v66 + 56);
            uint64_t v38 = v16;
            uint64_t v39 = 1;
          }
          id v64 = v37;
          v37(v38, v39, 1, v17);
          swift_bridgeObjectRelease();
          uint64_t v42 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v36 + 48);
          uint64_t v41 = v36 + 48;
          uint64_t v40 = v42;
          if (v42(v16, 1, v17) == 1) {
            goto LABEL_18;
          }
          unint64_t v62 = v40;
          uint64_t v63 = v41;
          uint64_t v61 = *(void (**)(char *, char *, uint64_t))(v66 + 32);
          v61(v23, v16, v17);
          uint64_t v43 = sub_100EBA218((unint64_t *)&qword_10163A550);
          if (dispatch thunk of static Comparable.< infix(_:_:)())
          {
LABEL_20:
            (*(void (**)(char *, uint64_t))(v66 + 8))(v23, v17);
            return 0;
          }
          uint64_t v60 = v43;
          uint64_t v45 = *(void *)(v6 + 16);
          if (v45 && *(void *)(v45 + 16))
          {
            swift_bridgeObjectRetain();
            uint64_t v46 = sub_100723FF4(a1, a2);
            if (v47)
            {
              uint64_t v48 = *(void *)(*(void *)(v45 + 56) + 8 * v46);
              swift_bridgeObjectRelease();
              if (v48 < v67) {
                goto LABEL_20;
              }
            }
            else
            {
              swift_bridgeObjectRelease();
            }
          }
          uint64_t v49 = *(void *)(v6 + 32);
          if (v49 && *(void *)(v49 + 16))
          {
            swift_bridgeObjectRetain();
            uint64_t v50 = sub_100723FF4(a1, a2);
            if (v51)
            {
              uint64_t v52 = *(void *)(v49 + 56);
              uint64_t v53 = v66;
              (*(void (**)(char *, uint64_t, uint64_t))(v66 + 16))(v14, v52 + *(void *)(v66 + 72) * v50, v17);
              uint64_t v54 = 0;
            }
            else
            {
              uint64_t v54 = 1;
              uint64_t v53 = v66;
            }
            uint64_t v56 = v61;
            uint64_t v55 = v62;
            v64(v14, v54, 1, v17);
            swift_bridgeObjectRelease();
            if (v55(v14, 1, v17) != 1)
            {
              v56(v20, v14, v17);
              uint64_t v57 = v53;
              char v58 = dispatch thunk of static Comparable.< infix(_:_:)();
              uint64_t v59 = *(void (**)(char *, uint64_t))(v57 + 8);
              v59(v20, v17);
              v59(v23, v17);
              return (v58 & 1) == 0;
            }
          }
          else
          {
            uint64_t v53 = v66;
            v64(v14, 1, 1, v17);
          }
          (*(void (**)(char *, uint64_t))(v53 + 8))(v23, v17);
          sub_1000A3B54((uint64_t)v14);
          return 1;
        }
      }
      else
      {
        swift_bridgeObjectRelease();
      }
    }
    return 0;
  }
  uint64_t v25 = v24;
  if (!*(void *)(v24 + 16))
  {
LABEL_7:
    swift_bridgeObjectRelease();
    goto LABEL_8;
  }
  swift_bridgeObjectRetain();
  unint64_t v26 = sub_1007246E4(a1, a2, v67, a4);
  if ((v27 & 1) == 0)
  {
    swift_bridgeObjectRelease();
    goto LABEL_7;
  }
  uint64_t v28 = *(unsigned __int8 *)(*(void *)(v25 + 56) + v26);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v28;
}

unint64_t sub_100EB89BC(char a1)
{
  unint64_t result = 0x64656C62616E65;
  switch(a1)
  {
    case 1:
    case 2:
      unint64_t result = 0xD000000000000015;
      break;
    case 3:
      unint64_t result = 0xD000000000000016;
      break;
    case 4:
      unint64_t result = 0xD000000000000016;
      break;
    case 5:
      unint64_t result = 0xD000000000000013;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t sub_100EB8A88(void *a1)
{
  Swift::String v3 = v1;
  uint64_t v5 = sub_10000588C(&qword_101661C50);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v8 = (char *)&v10 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10001CD44(a1, a1[3]);
  sub_100EB9F18();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  LOBYTE(v11) = 0;
  KeyedEncodingContainer.encode(_:forKey:)();
  if (!v2)
  {
    uint64_t v11 = v3[1];
    HIBYTE(v10) = 1;
    sub_10000588C(&qword_101661C20);
    sub_100EBA118(&qword_101661C58);
    KeyedEncodingContainer.encode<A>(_:forKey:)();
    uint64_t v11 = v3[2];
    HIBYTE(v10) = 2;
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)();
    uint64_t v11 = v3[3];
    HIBYTE(v10) = 3;
    sub_10000588C(&qword_101661C30);
    sub_100EBA180();
    KeyedEncodingContainer.encode<A>(_:forKey:)();
    uint64_t v11 = v3[4];
    HIBYTE(v10) = 4;
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)();
    type metadata accessor for FeatureSupportMatrix();
    LOBYTE(v11) = 5;
    sub_10000588C(&qword_101661B40);
    sub_100EBA25C();
    KeyedEncodingContainer.encode<A>(_:forKey:)();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
}

uint64_t sub_100EB8D50@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v29 = a2;
  uint64_t v3 = sub_10000588C(&qword_101661B40);
  uint64_t v34 = *(void *)(v3 - 8);
  uint64_t v35 = v3;
  __chkstk_darwin(v3);
  uint64_t v5 = (char *)v28 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = sub_10000588C(&qword_101661C10);
  uint64_t v30 = *(void *)(v6 - 8);
  uint64_t v31 = v6;
  __chkstk_darwin(v6);
  uint64_t v8 = (char *)v28 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = type metadata accessor for FeatureSupportMatrix();
  uint64_t v10 = __chkstk_darwin(v9 - 8);
  uint64_t v12 = (char *)v28 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = *(int *)(v10 + 44);
  uint64_t v36 = v12;
  uint64_t v14 = &v12[v13];
  unint64_t v15 = sub_1008BB900();
  unint64_t v16 = sub_100940314();
  uint64_t v33 = v14;
  CustomCodableKeyDictionary.init(wrappedValue:)();
  uint64_t v17 = a1[3];
  uint64_t v32 = a1;
  sub_10001CD44(a1, v17);
  sub_100EB9F18();
  uint64_t v18 = v37;
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v18)
  {
    uint64_t v23 = v34;
    uint64_t v22 = v35;
    uint64_t v24 = v33;
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)v32);
    return (*(uint64_t (**)(char *, uint64_t))(v23 + 8))(v24, v22);
  }
  else
  {
    v28[0] = v16;
    v28[1] = v15;
    unint64_t v37 = v5;
    uint64_t v19 = v30;
    uint64_t v20 = v31;
    LOBYTE(v39) = 0;
    char v21 = KeyedDecodingContainer.decode(_:forKey:)();
    uint64_t v25 = v36;
    *uint64_t v36 = v21 & 1;
    sub_10000588C(&qword_101661C20);
    char v38 = 1;
    sub_100EBA118(&qword_101661C28);
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    v25[1] = v39;
    char v38 = 2;
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
    v25[2] = v39;
    sub_10000588C(&qword_101661C30);
    char v38 = 3;
    sub_100EB9F6C();
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    v25[3] = v39;
    char v38 = 4;
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
    v25[4] = v39;
    LOBYTE(v39) = 5;
    sub_100EBA004();
    unint64_t v26 = v37;
    KeyedDecodingContainer.decode<A, B>(_:forKey:)();
    (*(void (**)(char *, uint64_t))(v19 + 8))(v8, v20);
    (*(void (**)(char *, char *, uint64_t))(v34 + 40))(v33, v26, v35);
    sub_100EBA058((uint64_t)v25, v29);
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)v32);
    return sub_100EBA0BC((uint64_t)v25);
  }
}

unint64_t sub_100EB92C8()
{
  return sub_100EB89BC(*v0);
}

uint64_t sub_100EB92D0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_100EBA518(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_100EB92F8(uint64_t a1)
{
  unint64_t v2 = sub_100EB9F18();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_100EB9334(uint64_t a1)
{
  unint64_t v2 = sub_100EB9F18();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_100EB9370@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_100EB8D50(a1, a2);
}

uint64_t sub_100EB9388(void *a1)
{
  return sub_100EB8A88(a1);
}

uint64_t sub_100EB93A4(uint64_t *a1, uint64_t *a2)
{
  if (*(unsigned __int8 *)a1 != *(unsigned __int8 *)a2 || (sub_100DF5BC8(a1[1], a2[1]) & 1) == 0) {
    return 0;
  }
  uint64_t v4 = a2[2];
  if (a1[2])
  {
    if (!v4) {
      return 0;
    }
    swift_bridgeObjectRetain();
    uint64_t v5 = swift_bridgeObjectRetain();
    char v6 = sub_100DF5BC8(v5, v4);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if ((v6 & 1) == 0) {
      return 0;
    }
  }
  else if (v4)
  {
    return 0;
  }
  if (sub_100DF5D60(a1[3], a2[3]))
  {
    uint64_t v7 = a2[4];
    if (a1[4])
    {
      if (v7)
      {
        swift_bridgeObjectRetain();
        uint64_t v8 = swift_bridgeObjectRetain();
        char v9 = sub_100DF5D60(v8, v7);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        if (v9) {
          goto LABEL_12;
        }
      }
    }
    else if (!v7)
    {
LABEL_12:
      type metadata accessor for FeatureSupportMatrix();
      sub_1008BB900();
      sub_100940314();
      return static CustomCodableKeyDictionary<>.== infix(_:_:)() & 1;
    }
  }
  return 0;
}

uint64_t type metadata accessor for FeatureSupportMatrix()
{
  uint64_t result = qword_101661BA0;
  if (!qword_101661BA0) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t *sub_100EB9554(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v3 = a1;
  int v4 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v4 & 0x20000) != 0)
  {
    uint64_t v11 = *a2;
    *uint64_t v3 = *a2;
    uint64_t v3 = (uint64_t *)(v11 + ((v4 + 16) & ~(unint64_t)v4));
    swift_retain();
  }
  else
  {
    *(unsigned char *)a1 = *(unsigned char *)a2;
    uint64_t v5 = a2[2];
    a1[1] = a2[1];
    a1[2] = v5;
    uint64_t v6 = a2[4];
    uint64_t v7 = *(int *)(a3 + 36);
    uint64_t v8 = (char *)a1 + v7;
    char v9 = (char *)a2 + v7;
    a1[3] = a2[3];
    a1[4] = v6;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    uint64_t v10 = sub_10000588C(&qword_101661B40);
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v10 - 8) + 16))(v8, v9, v10);
  }
  return v3;
}

uint64_t sub_100EB9658(uint64_t a1, uint64_t a2)
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v4 = a1 + *(int *)(a2 + 36);
  uint64_t v5 = sub_10000588C(&qword_101661B40);
  uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8);

  return v6(v4, v5);
}

uint64_t sub_100EB96EC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  uint64_t v4 = *(void *)(a2 + 16);
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(void *)(a1 + 16) = v4;
  uint64_t v5 = *(void *)(a2 + 32);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(void *)(a1 + 32) = v5;
  uint64_t v6 = *(int *)(a3 + 36);
  uint64_t v7 = a1 + v6;
  uint64_t v8 = a2 + v6;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  uint64_t v9 = sub_10000588C(&qword_101661B40);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 16))(v7, v8, v9);
  return a1;
}

uint64_t sub_100EB97A0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v6 = *(int *)(a3 + 36);
  uint64_t v7 = a1 + v6;
  uint64_t v8 = a2 + v6;
  uint64_t v9 = sub_10000588C(&qword_101661B40);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 24))(v7, v8, v9);
  return a1;
}

uint64_t sub_100EB9888(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  uint64_t v4 = *(int *)(a3 + 36);
  uint64_t v5 = a1 + v4;
  uint64_t v6 = a2 + v4;
  uint64_t v7 = sub_10000588C(&qword_101661B40);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 32))(v5, v6, v7);
  return a1;
}

uint64_t sub_100EB9920(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_bridgeObjectRelease();
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  swift_bridgeObjectRelease();
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  swift_bridgeObjectRelease();
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  swift_bridgeObjectRelease();
  uint64_t v6 = *(int *)(a3 + 36);
  uint64_t v7 = a1 + v6;
  uint64_t v8 = a2 + v6;
  uint64_t v9 = sub_10000588C(&qword_101661B40);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 40))(v7, v8, v9);
  return a1;
}

uint64_t sub_100EB99E8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_100EB99FC);
}

uint64_t sub_100EB99FC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a2 == 0x7FFFFFFF)
  {
    unint64_t v4 = *(void *)(a1 + 8);
    if (v4 >= 0xFFFFFFFF) {
      LODWORD(v4) = -1;
    }
    return (v4 + 1);
  }
  else
  {
    uint64_t v8 = sub_10000588C(&qword_101661B40);
    uint64_t v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 48);
    uint64_t v10 = v8;
    uint64_t v11 = a1 + *(int *)(a3 + 36);
    return v9(v11, a2, v10);
  }
}

uint64_t sub_100EB9AB0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_100EB9AC4);
}

uint64_t sub_100EB9AC4(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(void *)(result + 8) = (a2 - 1);
  }
  else
  {
    uint64_t v7 = sub_10000588C(&qword_101661B40);
    uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56);
    uint64_t v9 = v7;
    uint64_t v10 = v5 + *(int *)(a4 + 36);
    return v8(v10, a2, a2, v9);
  }
  return result;
}

void sub_100EB9B70()
{
  sub_100EB9C24();
  if (v0 <= 0x3F) {
    swift_initStructMetadata();
  }
}

void sub_100EB9C24()
{
  if (!qword_101661BB0)
  {
    sub_1008BB900();
    sub_100940314();
    unint64_t v0 = type metadata accessor for CustomCodableKeyDictionary();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_101661BB0);
    }
  }
}

unsigned char *storeEnumTagSinglePayload for ServerConfigurableFeature(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFE)
  {
    unsigned int v6 = ((a2 - 255) >> 8) + 1;
    *uint64_t result = a2 + 1;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x100EB9D80);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 1;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for ServerConfigurableFeature()
{
  return &type metadata for ServerConfigurableFeature;
}

unint64_t sub_100EB9DBC()
{
  unint64_t result = qword_101661BF0;
  if (!qword_101661BF0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_101661BF0);
  }
  return result;
}

unint64_t sub_100EB9E14()
{
  unint64_t result = qword_101661BF8;
  if (!qword_101661BF8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_101661BF8);
  }
  return result;
}

unint64_t sub_100EB9E6C()
{
  unint64_t result = qword_101661C00;
  if (!qword_101661C00)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_101661C00);
  }
  return result;
}

unint64_t sub_100EB9EC4()
{
  unint64_t result = qword_101661C08;
  if (!qword_101661C08)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_101661C08);
  }
  return result;
}

unint64_t sub_100EB9F18()
{
  unint64_t result = qword_101661C18;
  if (!qword_101661C18)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_101661C18);
  }
  return result;
}

unint64_t sub_100EB9F6C()
{
  unint64_t result = qword_101661C38;
  if (!qword_101661C38)
  {
    sub_10000592C(&qword_101661C30);
    sub_100EBA218(&qword_101661C40);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_101661C38);
  }
  return result;
}

unint64_t sub_100EBA004()
{
  unint64_t result = qword_101661C48;
  if (!qword_101661C48)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_101661C48);
  }
  return result;
}

uint64_t sub_100EBA058(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for FeatureSupportMatrix();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_100EBA0BC(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for FeatureSupportMatrix();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_100EBA118(unint64_t *a1)
{
  uint64_t result = *a1;
  if (!result)
  {
    sub_10000592C(&qword_101661C20);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

unint64_t sub_100EBA180()
{
  unint64_t result = qword_101661C60;
  if (!qword_101661C60)
  {
    sub_10000592C(&qword_101661C30);
    sub_100EBA218(&qword_101661C68);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_101661C60);
  }
  return result;
}

uint64_t sub_100EBA218(unint64_t *a1)
{
  uint64_t result = *a1;
  if (!result)
  {
    type metadata accessor for SystemVersionNumber();
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

unint64_t sub_100EBA25C()
{
  unint64_t result = qword_101661C70;
  if (!qword_101661C70)
  {
    sub_10000592C(&qword_101661B40);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_101661C70);
  }
  return result;
}

unint64_t sub_100EBA2B8()
{
  unint64_t result = qword_101661C78;
  if (!qword_101661C78)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_101661C78);
  }
  return result;
}

unsigned char *storeEnumTagSinglePayload for FeatureSupportMatrix.CodingKeys(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 5 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 5) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFB) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFA)
  {
    unsigned int v6 = ((a2 - 251) >> 8) + 1;
    *unint64_t result = a2 + 5;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x100EBA3D8);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 5;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for FeatureSupportMatrix.CodingKeys()
{
  return &type metadata for FeatureSupportMatrix.CodingKeys;
}

unint64_t sub_100EBA414()
{
  unint64_t result = qword_101661C80;
  if (!qword_101661C80)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_101661C80);
  }
  return result;
}

unint64_t sub_100EBA46C()
{
  unint64_t result = qword_101661C88;
  if (!qword_101661C88)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_101661C88);
  }
  return result;
}

unint64_t sub_100EBA4C4()
{
  unint64_t result = qword_101661C90;
  if (!qword_101661C90)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_101661C90);
  }
  return result;
}

uint64_t sub_100EBA518(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 0x64656C62616E65 && a2 == 0xE700000000000000;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0xD000000000000015 && a2 == 0x80000001014197A0 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0xD000000000000015 && a2 == 0x80000001014197C0 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else if (a1 == 0xD000000000000016 && a2 == 0x80000001014197E0 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 3;
  }
  else if (a1 == 0xD000000000000016 && a2 == 0x8000000101419800 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 4;
  }
  else if (a1 == 0xD000000000000013 && a2 == 0x8000000101419820)
  {
    swift_bridgeObjectRelease();
    return 5;
  }
  else
  {
    char v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v6) {
      return 5;
    }
    else {
      return 6;
    }
  }
}

unint64_t sub_100EBA75C(char a1)
{
  unint64_t result = 0x4E6E6F6973736573;
  switch(a1)
  {
    case 1:
      unint64_t result = 0x737574617473;
      break;
    case 2:
      unint64_t result = 1684628325;
      break;
    case 3:
      unint64_t result = 0x644970696863;
      break;
    case 4:
      unint64_t result = 0x754E6C6169726573;
      break;
    case 5:
      unint64_t result = 0x7374726563;
      break;
    case 6:
      unint64_t result = 0x726F737365636361;
      break;
    case 7:
      unint64_t result = 0xD000000000000013;
      break;
    case 8:
      unint64_t result = 0xD000000000000011;
      break;
    case 9:
      unint64_t result = 0x69634572656E776FLL;
      break;
    case 10:
      unint64_t result = 0x69684372656E776FLL;
      break;
    case 11:
      unint64_t result = 0x7372655663657073;
      break;
    case 12:
      unint64_t result = 0x657261776D726966;
      break;
    case 13:
      unint64_t result = 0x49746375646F7270;
      break;
    case 14:
      unint64_t result = 0x6449726F646E6576;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t sub_100EBA954(void *a1)
{
  int v3 = v1;
  uint64_t v5 = sub_10000588C(&qword_101661CA8);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v8 = (char *)&v10 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10001CD44(a1, a1[3]);
  sub_100EBD2B8();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  long long v12 = *v3;
  char v11 = 0;
  sub_100037BB4();
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  if (!v2)
  {
    LOBYTE(v12) = 1;
    KeyedEncodingContainer.encode(_:forKey:)();
    long long v12 = *(long long *)((char *)v3 + 24);
    char v11 = 2;
    KeyedEncodingContainer.encode<A>(_:forKey:)();
    long long v12 = *(long long *)((char *)v3 + 40);
    char v11 = 3;
    KeyedEncodingContainer.encode<A>(_:forKey:)();
    long long v12 = *(long long *)((char *)v3 + 56);
    char v11 = 4;
    KeyedEncodingContainer.encode<A>(_:forKey:)();
    long long v12 = *(long long *)((char *)v3 + 72);
    char v11 = 5;
    KeyedEncodingContainer.encode<A>(_:forKey:)();
    long long v12 = *(long long *)((char *)v3 + 88);
    char v11 = 6;
    KeyedEncodingContainer.encode<A>(_:forKey:)();
    sub_1001F1980((uint64_t)v3 + 104, (uint64_t)v13);
    sub_1001F1980((uint64_t)v13, (uint64_t)&v12);
    char v11 = 7;
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)();
    LOBYTE(v12) = 8;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
    LOBYTE(v12) = 9;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
    LOBYTE(v12) = 10;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
    LOBYTE(v12) = 11;
    KeyedEncodingContainer.encode(_:forKey:)();
    LOBYTE(v12) = 12;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
    LOBYTE(v12) = 13;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
    LOBYTE(v12) = 14;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
}

unint64_t sub_100EBAD60()
{
  return sub_100EBA75C(*v0);
}

uint64_t sub_100EBAD68@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_100EBD518(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_100EBAD90(uint64_t a1)
{
  unint64_t v2 = sub_100EBD2B8();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_100EBADCC(uint64_t a1)
{
  unint64_t v2 = sub_100EBD2B8();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_100EBAE08(void *a1)
{
  return sub_100EBA954(a1);
}

uint64_t sub_100EBAE74@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  unint64_t v46 = a1[15];
  uint64_t v47 = a1[14];
  sub_1000361E0(v47, v46);
  sub_1000362FC();
  uint64_t v44 = DataProtocol.intValue.getter();
  uint64_t v4 = a1[8];
  unint64_t v48 = a1[9];
  uint64_t v5 = a1[10];
  uint64_t v6 = a1[12];
  unint64_t v7 = a1[13];
  uint64_t v8 = a1[16];
  unint64_t v50 = a1[11];
  unint64_t v51 = a1[17];
  uint64_t v10 = a1[20];
  unint64_t v9 = a1[21];
  uint64_t v37 = a1[4];
  uint64_t v54 = a1[5];
  uint64_t v36 = *a1;
  uint64_t v53 = a1[1];
  uint64_t v35 = a1[2];
  uint64_t v52 = a1[3];
  uint64_t v11 = a1[23];
  uint64_t v45 = a1[22];
  uint64_t v34 = a1[24];
  unint64_t v49 = a1[25];
  unint64_t v42 = a1[7];
  uint64_t v43 = a1[6];
  sub_1000361E0(v43, v42);
  sub_1000361E0(v4, v48);
  sub_1000361E0(v5, v50);
  unint64_t v40 = v7;
  uint64_t v41 = v6;
  sub_1000361E0(v6, v7);
  sub_1000361E0(v8, v51);
  unint64_t v38 = v9;
  uint64_t v39 = v10;
  sub_100037A38(v10, v9);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if (v49 >> 60 == 15)
  {
    uint64_t result = (uint64_t)sub_100EBC99C(a1);
    uint64_t v13 = 0;
    uint64_t v14 = 0;
    uint64_t v15 = 0;
    uint64_t v16 = 0;
    unint64_t v18 = v46;
    uint64_t v17 = v47;
  }
  else
  {
    uint64_t v19 = sub_1002AA5D4(v34, v49);
    unint64_t v21 = v20;
    uint64_t v22 = Data.hexString.getter();
    uint64_t v32 = v23;
    uint64_t v33 = v22;
    sub_10001CFB8(v19, v21);
    switch(v49 >> 62)
    {
      case 1uLL:
        LODWORD(v24) = HIDWORD(v34) - v34;
        if (__OFSUB__(HIDWORD(v34), v34)) {
          goto LABEL_11;
        }
        uint64_t v24 = (int)v24;
LABEL_7:
        if (v24 < -1)
        {
          __break(1u);
LABEL_11:
          __break(1u);
LABEL_12:
          __break(1u);
          JUMPOUT(0x100EBB1A0);
        }
LABEL_8:
        uint64_t v28 = Data.subdata(in:)();
        unint64_t v30 = v29;
        uint64_t v13 = Data.hexString.getter();
        uint64_t v14 = v31;
        sub_100EBC99C(a1);
        uint64_t result = sub_10001CFB8(v28, v30);
        unint64_t v18 = v46;
        uint64_t v17 = v47;
        uint64_t v16 = v32;
        uint64_t v15 = v33;
        break;
      case 2uLL:
        uint64_t v26 = *(void *)(v34 + 16);
        uint64_t v25 = *(void *)(v34 + 24);
        BOOL v27 = __OFSUB__(v25, v26);
        uint64_t v24 = v25 - v26;
        if (!v27) {
          goto LABEL_7;
        }
        goto LABEL_12;
      default:
        goto LABEL_8;
    }
  }
  *a2 = v17;
  a2[1] = v18;
  a2[2] = v44;
  a2[3] = v43;
  a2[4] = v42;
  a2[5] = v4;
  a2[6] = v48;
  a2[7] = v5;
  a2[8] = v50;
  a2[9] = v41;
  a2[10] = v40;
  a2[11] = v8;
  a2[12] = v51;
  a2[13] = v39;
  a2[14] = v38;
  a2[15] = v37;
  a2[16] = v54;
  a2[17] = v36;
  a2[18] = v53;
  a2[19] = v35;
  a2[20] = v52;
  a2[21] = 0x302E302E31;
  a2[22] = 0xE500000000000000;
  a2[23] = v45;
  a2[24] = v11;
  a2[25] = v15;
  a2[26] = v16;
  a2[27] = v13;
  a2[28] = v14;
  return result;
}

uint64_t sub_100EBB1B0(uint64_t a1, uint64_t a2)
{
  v2[124] = a2;
  v2[123] = a1;
  uint64_t v3 = type metadata accessor for HashAlgorithm();
  v2[125] = v3;
  v2[126] = *(void *)(v3 - 8);
  v2[127] = swift_task_alloc();
  uint64_t v4 = type metadata accessor for Locale();
  v2[128] = v4;
  v2[129] = *(void *)(v4 - 8);
  v2[130] = swift_task_alloc();
  uint64_t v5 = type metadata accessor for Date();
  v2[131] = v5;
  v2[132] = *(void *)(v5 - 8);
  v2[133] = swift_task_alloc();
  return _swift_task_switch(sub_100EBB32C, 0, 0);
}

void sub_100EBB32C()
{
  unint64_t v1 = sub_10092D8F8((uint64_t)_swiftEmptyArrayStorage);
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  sub_10016C0FC(1702195828, 0xE400000000000000, 0xD00000000000001BLL, 0x80000001013F64C0, isUniquelyReferenced_nonNull_native);
  swift_bridgeObjectRelease();
  id v3 = [self currentDevice];
  if (!v3)
  {
    __break(1u);
    goto LABEL_12;
  }
  uint64_t v4 = v3;
  id v5 = [v3 serverFriendlyDescription];

  if (!v5)
  {
LABEL_12:
    __break(1u);
    return;
  }
  uint64_t v6 = *(void *)(v0 + 1064);
  uint64_t v7 = *(void *)(v0 + 1056);
  uint64_t v8 = *(void *)(v0 + 1048);
  uint64_t v9 = *(void *)(v0 + 1040);
  uint64_t v52 = *(void *)(v0 + 1032);
  uint64_t v53 = *(void *)(v0 + 1024);
  uint64_t v10 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v12 = v11;

  char v13 = swift_isUniquelyReferenced_nonNull_native();
  sub_10016C0FC(v10, v12, 0xD000000000000011, 0x80000001013F64E0, v13);
  unint64_t v14 = v1;
  swift_bridgeObjectRelease();
  Date.init()();
  uint64_t v15 = Date.epoch.getter();
  (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v6, v8);
  *(void *)(v0 + 976) = v15;
  uint64_t v16 = dispatch thunk of CustomStringConvertible.description.getter();
  uint64_t v18 = v17;
  char v19 = swift_isUniquelyReferenced_nonNull_native();
  sub_10016C0FC(v16, v18, 0xD000000000000015, 0x80000001013F6500, v19);
  swift_bridgeObjectRelease();
  *(void *)(v0 + 960) = 1;
  uint64_t v20 = dispatch thunk of CustomStringConvertible.description.getter();
  uint64_t v22 = v21;
  char v23 = swift_isUniquelyReferenced_nonNull_native();
  sub_10016C0FC(v20, v22, 0xD000000000000013, 0x80000001013F6520, v23);
  unint64_t v24 = v14;
  uint64_t v25 = swift_bridgeObjectRelease();
  uint64_t v26 = sub_100BCABFC(v25);
  uint64_t v28 = v27;
  char v29 = swift_isUniquelyReferenced_nonNull_native();
  sub_10016C0FC(v26, v28, 0x6567412D72657355, 0xEA0000000000746ELL, v29);
  swift_bridgeObjectRelease();
  static Locale.current.getter();
  uint64_t v30 = Locale.acceptLanguageCode.getter();
  uint64_t v32 = v31;
  (*(void (**)(uint64_t, uint64_t))(v52 + 8))(v9, v53);
  char v33 = swift_isUniquelyReferenced_nonNull_native();
  sub_10016C0FC(v30, v32, 0x4C2D747065636341, 0xEF65676175676E61, v33);
  unint64_t v34 = v24;
  swift_bridgeObjectRelease();
  if (qword_101637188 != -1) {
    swift_once();
  }
  uint64_t v35 = (void *)qword_10170EE68;
  id v36 = [self sharedInstance];
  unsigned int v37 = [v36 isInternalBuild];

  if (v37)
  {
    NSString v38 = String._bridgeToObjectiveC()();
    unsigned int v39 = [v35 BOOLForKey:v38];

    if (v39)
    {
      char v40 = swift_isUniquelyReferenced_nonNull_native();
      sub_10016C0FC(0x7465722C6C616572, 0xEF302D726F727245, 0xD000000000000012, 0x80000001013F6560, v40);
      swift_bridgeObjectRelease();
    }
  }
  *(void *)(v0 + 1072) = v34;
  uint64_t v41 = *(uint64_t **)(v0 + 984);
  sub_10098BEB8(v41);
  sub_100EBAE74(v41, (uint64_t *)(v0 + 16));
  type metadata accessor for JSONEncoder();
  swift_allocObject();
  *(void *)(v0 + 1080) = JSONEncoder.init()();
  long long v42 = *(_OWORD *)(v0 + 224);
  *(_OWORD *)(v0 + 904) = *(_OWORD *)(v0 + 208);
  *(_OWORD *)(v0 + 920) = v42;
  *(void *)(v0 + 936) = *(void *)(v0 + 240);
  long long v43 = *(_OWORD *)(v0 + 160);
  *(_OWORD *)(v0 + 840) = *(_OWORD *)(v0 + 144);
  *(_OWORD *)(v0 + 856) = v43;
  long long v44 = *(_OWORD *)(v0 + 192);
  *(_OWORD *)(v0 + 872) = *(_OWORD *)(v0 + 176);
  *(_OWORD *)(v0 + 888) = v44;
  long long v45 = *(_OWORD *)(v0 + 96);
  *(_OWORD *)(v0 + 776) = *(_OWORD *)(v0 + 80);
  *(_OWORD *)(v0 + 792) = v45;
  long long v46 = *(_OWORD *)(v0 + 128);
  *(_OWORD *)(v0 + 808) = *(_OWORD *)(v0 + 112);
  *(_OWORD *)(v0 + 824) = v46;
  long long v47 = *(_OWORD *)(v0 + 32);
  *(_OWORD *)(v0 + 712) = *(_OWORD *)(v0 + 16);
  *(_OWORD *)(v0 + 728) = v47;
  long long v48 = *(_OWORD *)(v0 + 64);
  *(_OWORD *)(v0 + 744) = *(_OWORD *)(v0 + 48);
  *(_OWORD *)(v0 + 760) = v48;
  sub_100EBC824();
  uint64_t v49 = dispatch thunk of JSONEncoder.encode<A>(_:)();
  *(void *)(v0 + 1088) = v49;
  *(void *)(v0 + 1096) = v50;
  sub_1000361E0(v49, v50);
  uint64_t v54 = (void (__cdecl *)())((char *)&dword_10165AB50 + dword_10165AB50);
  unint64_t v51 = (void *)swift_task_alloc();
  *(void *)(v0 + 1104) = v51;
  *unint64_t v51 = v0;
  v51[1] = sub_100EBBA3C;
  v54();
}

uint64_t sub_100EBBA3C(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *v2;
  *(void *)(v3 + 1112) = a1;
  *(void *)(v3 + 1120) = a2;
  swift_task_dealloc();
  return _swift_task_switch(sub_100EBBB40, 0, 0);
}

uint64_t sub_100EBBB40()
{
  unint64_t v1 = v0[140];
  uint64_t v2 = v0[139];
  unint64_t v3 = v0[137];
  uint64_t v4 = v0[136];
  uint64_t v5 = v0[127];
  uint64_t v6 = v0[126];
  uint64_t v7 = v0[125];
  v0[118] = v2;
  v0[119] = v1;
  sub_1000361E0(v4, v3);
  sub_1000361E0(v2, v1);
  sub_100A42CBC(v4, v3);
  sub_10001CFB8(v4, v3);
  sub_10001CFB8(v2, v1);
  v0[141] = v0[118];
  v0[142] = v0[119];
  (*(void (**)(uint64_t, void, uint64_t))(v6 + 104))(v5, enum case for HashAlgorithm.sha256(_:), v7);
  uint64_t v8 = Data.hash(algorithm:)();
  uint64_t v10 = v9;
  v0[143] = v8;
  v0[144] = v9;
  (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v5, v7);
  unint64_t v14 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))((char *)&dword_10165AB48 + dword_10165AB48);
  uint64_t v11 = (void *)swift_task_alloc();
  v0[145] = v11;
  void *v11 = v0;
  v11[1] = sub_100EBBCDC;
  uint64_t v12 = v0[124];
  return v14(v8, v10, v12);
}

uint64_t sub_100EBBCDC(uint64_t a1)
{
  uint64_t v4 = *(void **)v2;
  *(void *)(*(void *)v2 + 1168) = v1;
  swift_task_dealloc();
  if (v1)
  {
    uint64_t v5 = sub_100EBC2E4;
  }
  else
  {
    unint64_t v6 = v4[144];
    uint64_t v7 = v4[143];
    v4[147] = a1;
    sub_10001CFB8(v7, v6);
    uint64_t v5 = sub_100EBBE0C;
  }
  return _swift_task_switch(v5, 0, 0);
}

uint64_t sub_100EBBE0C()
{
  uint64_t v52 = v0;
  uint64_t v1 = v0[147];
  uint64_t v2 = v0[146];
  unint64_t v3 = (unsigned char *)v0[134];
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  unint64_t v51 = v3;
  sub_1001EE9C8(v1, (uint64_t)sub_100BD6E00, 0, isUniquelyReferenced_nonNull_native, &v51);
  if (v2)
  {
    return swift_bridgeObjectRelease();
  }
  unint64_t v6 = v0[142];
  long long v45 = v0;
  uint64_t v7 = v0[141];
  uint64_t v8 = v51;
  swift_bridgeObjectRelease();
  sub_10001CFB8(v7, v6);
  static os_log_type_t.debug.getter();
  if (qword_101637308 != -1) {
LABEL_31:
  }
    swift_once();
  os_log(_:dso:log:_:_:)();
  long long v46 = v8 + 64;
  uint64_t v9 = -1;
  uint64_t v10 = -1 << v8[32];
  if (-v10 < 64) {
    uint64_t v9 = ~(-1 << -(char)v10);
  }
  unint64_t v11 = v9 & *((void *)v8 + 8);
  int64_t v48 = (unint64_t)(63 - v10) >> 6;
  unint64_t v50 = v8;
  swift_bridgeObjectRetain();
  int64_t v12 = 0;
  uint64_t v8 = &type metadata for String;
  while (1)
  {
    if (v11)
    {
      unint64_t v13 = __clz(__rbit64(v11));
      v11 &= v11 - 1;
      unint64_t v14 = v13 | (v12 << 6);
      goto LABEL_10;
    }
    int64_t v24 = v12 + 1;
    if (__OFADD__(v12, 1))
    {
      __break(1u);
LABEL_30:
      __break(1u);
      goto LABEL_31;
    }
    if (v24 >= v48) {
      goto LABEL_26;
    }
    unint64_t v25 = *(void *)&v46[8 * v24];
    ++v12;
    if (!v25)
    {
      int64_t v12 = v24 + 1;
      if (v24 + 1 >= v48) {
        goto LABEL_26;
      }
      unint64_t v25 = *(void *)&v46[8 * v12];
      if (!v25)
      {
        int64_t v12 = v24 + 2;
        if (v24 + 2 >= v48) {
          goto LABEL_26;
        }
        unint64_t v25 = *(void *)&v46[8 * v12];
        if (!v25) {
          break;
        }
      }
    }
LABEL_25:
    unint64_t v11 = (v25 - 1) & v25;
    unint64_t v14 = __clz(__rbit64(v25)) + (v12 << 6);
LABEL_10:
    uint64_t v15 = 16 * v14;
    uint64_t v16 = (uint64_t *)(*((void *)v50 + 6) + v15);
    uint64_t v17 = *v16;
    uint64_t v18 = v16[1];
    char v19 = (uint64_t *)(*((void *)v50 + 7) + v15);
    uint64_t v20 = *v19;
    uint64_t v21 = v19[1];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    static os_log_type_t.debug.getter();
    sub_10000588C((uint64_t *)&unk_10163AD00);
    uint64_t v22 = swift_allocObject();
    *(_OWORD *)(v22 + 16) = xmmword_101347BA0;
    *(void *)(v22 + 56) = &type metadata for String;
    unint64_t v23 = sub_10000B4CC();
    *(void *)(v22 + 32) = v17;
    *(void *)(v22 + 40) = v18;
    *(void *)(v22 + 96) = &type metadata for String;
    *(void *)(v22 + 104) = v23;
    *(void *)(v22 + 64) = v23;
    *(void *)(v22 + 72) = v20;
    *(void *)(v22 + 80) = v21;
    os_log(_:dso:log:_:_:)();
    swift_bridgeObjectRelease();
  }
  int64_t v26 = v24 + 3;
  if (v26 < v48)
  {
    unint64_t v25 = *(void *)&v46[8 * v26];
    if (!v25)
    {
      while (1)
      {
        int64_t v12 = v26 + 1;
        if (__OFADD__(v26, 1)) {
          goto LABEL_30;
        }
        if (v12 >= v48) {
          goto LABEL_26;
        }
        unint64_t v25 = *(void *)&v46[8 * v12];
        ++v26;
        if (v25) {
          goto LABEL_25;
        }
      }
    }
    int64_t v12 = v26;
    goto LABEL_25;
  }
LABEL_26:
  uint64_t v47 = v45[136];
  unint64_t v49 = v45[137];
  uint64_t v27 = (void *)v45[123];
  swift_release();
  static os_log_type_t.debug.getter();
  sub_10000588C((uint64_t *)&unk_10163AD00);
  uint64_t v28 = swift_allocObject();
  *(_OWORD *)(v28 + 16) = xmmword_101342130;
  long long v29 = *((_OWORD *)v45 + 13);
  long long v30 = *((_OWORD *)v45 + 14);
  long long v31 = *((_OWORD *)v45 + 11);
  *(_OWORD *)(v45 + 53) = *((_OWORD *)v45 + 12);
  *(_OWORD *)(v45 + 55) = v29;
  *(_OWORD *)(v45 + 57) = v30;
  long long v32 = *((_OWORD *)v45 + 9);
  long long v33 = *((_OWORD *)v45 + 10);
  long long v34 = *((_OWORD *)v45 + 7);
  *(_OWORD *)(v45 + 45) = *((_OWORD *)v45 + 8);
  *(_OWORD *)(v45 + 47) = v32;
  *(_OWORD *)(v45 + 49) = v33;
  *(_OWORD *)(v45 + 51) = v31;
  long long v35 = *((_OWORD *)v45 + 5);
  long long v36 = *((_OWORD *)v45 + 6);
  long long v37 = *((_OWORD *)v45 + 3);
  *(_OWORD *)(v45 + 37) = *((_OWORD *)v45 + 4);
  *(_OWORD *)(v45 + 39) = v35;
  *(_OWORD *)(v45 + 41) = v36;
  *(_OWORD *)(v45 + 43) = v34;
  long long v38 = *((_OWORD *)v45 + 2);
  *(_OWORD *)(v45 + 31) = *((_OWORD *)v45 + 1);
  v45[59] = v45[30];
  *(_OWORD *)(v45 + 33) = v38;
  *(_OWORD *)(v45 + 35) = v37;
  sub_100EBC878(v45 + 2);
  uint64_t v39 = String.init<A>(describing:)();
  uint64_t v41 = v40;
  *(void *)(v28 + 56) = &type metadata for String;
  *(void *)(v28 + 64) = sub_10000B4CC();
  *(void *)(v28 + 32) = v39;
  *(void *)(v28 + 40) = v41;
  os_log(_:dso:log:_:_:)();
  swift_release();
  sub_100EBC99C(v27);
  swift_bridgeObjectRelease();
  sub_10001CFB8(v47, v49);
  swift_release();
  sub_100EBCABC(v45 + 2);
  uint64_t v42 = v45[137];
  uint64_t v43 = v45[136];
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  long long v44 = (uint64_t (*)(unsigned char *, uint64_t, uint64_t))v45[1];
  return v44(v50, v43, v42);
}

uint64_t sub_100EBC2E4()
{
  unint64_t v1 = *(void *)(v0 + 1136);
  uint64_t v2 = *(void *)(v0 + 1128);
  sub_10001CFB8(*(void *)(v0 + 1144), *(void *)(v0 + 1152));
  sub_10001CFB8(v2, v1);
  static os_log_type_t.error.getter();
  unint64_t v3 = &qword_101637000;
  if (qword_101637308 != -1) {
LABEL_29:
  }
    swift_once();
  uint64_t v4 = *(void *)(v0 + 1168);
  sub_10000588C((uint64_t *)&unk_10163AD00);
  uint64_t v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_101342130;
  *(void *)(v0 + 968) = v4;
  swift_errorRetain();
  sub_10000588C(&qword_101638D40);
  uint64_t v6 = String.init<A>(describing:)();
  uint64_t v8 = v7;
  *(void *)(v5 + 56) = &type metadata for String;
  unint64_t v9 = sub_10000B4CC();
  *(void *)(v5 + 64) = v9;
  *(void *)(v5 + 32) = v6;
  *(void *)(v5 + 40) = v8;
  os_log(_:dso:log:_:_:)();
  swift_bridgeObjectRelease();
  swift_errorRelease();
  uint64_t v46 = v0;
  uint64_t v10 = *(void *)(v0 + 1072);
  static os_log_type_t.debug.getter();
  if (v3[97] != -1) {
    swift_once();
  }
  os_log(_:dso:log:_:_:)();
  uint64_t v47 = v10 + 64;
  uint64_t v11 = -1;
  uint64_t v12 = -1 << *(unsigned char *)(v10 + 32);
  if (-v12 < 64) {
    uint64_t v11 = ~(-1 << -(char)v12);
  }
  unint64_t v13 = v11 & *(void *)(v10 + 64);
  int64_t v49 = (unint64_t)(63 - v12) >> 6;
  uint64_t v51 = v10;
  swift_bridgeObjectRetain();
  uint64_t v0 = 0;
  while (1)
  {
    if (v13)
    {
      unint64_t v14 = __clz(__rbit64(v13));
      v13 &= v13 - 1;
      unint64_t v15 = v14 | (v0 << 6);
      uint64_t v16 = v51;
      goto LABEL_8;
    }
    int64_t v25 = v0 + 1;
    if (__OFADD__(v0, 1))
    {
      __break(1u);
LABEL_28:
      __break(1u);
      goto LABEL_29;
    }
    if (v25 >= v49) {
      goto LABEL_24;
    }
    unint64_t v26 = *(void *)(v47 + 8 * v25);
    ++v0;
    if (!v26)
    {
      uint64_t v0 = v25 + 1;
      if (v25 + 1 >= v49) {
        goto LABEL_24;
      }
      unint64_t v26 = *(void *)(v47 + 8 * v0);
      if (!v26)
      {
        uint64_t v0 = v25 + 2;
        if (v25 + 2 >= v49) {
          goto LABEL_24;
        }
        unint64_t v26 = *(void *)(v47 + 8 * v0);
        if (!v26) {
          break;
        }
      }
    }
LABEL_23:
    unint64_t v13 = (v26 - 1) & v26;
    unint64_t v15 = __clz(__rbit64(v26)) + (v0 << 6);
    uint64_t v16 = v51;
LABEL_8:
    uint64_t v17 = 16 * v15;
    uint64_t v18 = (uint64_t *)(*(void *)(v16 + 48) + v17);
    uint64_t v19 = *v18;
    uint64_t v20 = v18[1];
    uint64_t v21 = (uint64_t *)(*(void *)(v16 + 56) + v17);
    uint64_t v22 = *v21;
    uint64_t v23 = v21[1];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    unint64_t v3 = (uint64_t *)static os_log_type_t.debug.getter();
    sub_10000588C((uint64_t *)&unk_10163AD00);
    uint64_t v24 = swift_allocObject();
    *(_OWORD *)(v24 + 16) = xmmword_101347BA0;
    *(void *)(v24 + 56) = &type metadata for String;
    *(void *)(v24 + 64) = v9;
    *(void *)(v24 + 32) = v19;
    *(void *)(v24 + 40) = v20;
    *(void *)(v24 + 96) = &type metadata for String;
    *(void *)(v24 + 104) = v9;
    *(void *)(v24 + 72) = v22;
    *(void *)(v24 + 80) = v23;
    os_log(_:dso:log:_:_:)();
    swift_bridgeObjectRelease();
  }
  int64_t v27 = v25 + 3;
  if (v27 < v49)
  {
    unint64_t v26 = *(void *)(v47 + 8 * v27);
    if (!v26)
    {
      while (1)
      {
        uint64_t v0 = v27 + 1;
        if (__OFADD__(v27, 1)) {
          goto LABEL_28;
        }
        if (v0 >= v49) {
          goto LABEL_24;
        }
        unint64_t v26 = *(void *)(v47 + 8 * v0);
        ++v27;
        if (v26) {
          goto LABEL_23;
        }
      }
    }
    uint64_t v0 = v27;
    goto LABEL_23;
  }
LABEL_24:
  uint64_t v48 = *(void *)(v46 + 1088);
  unint64_t v50 = *(void *)(v46 + 1096);
  long long v45 = *(void **)(v46 + 984);
  swift_release();
  static os_log_type_t.debug.getter();
  sub_10000588C((uint64_t *)&unk_10163AD00);
  uint64_t v28 = swift_allocObject();
  *(_OWORD *)(v28 + 16) = xmmword_101342130;
  long long v29 = *(_OWORD *)(v46 + 208);
  long long v30 = *(_OWORD *)(v46 + 224);
  long long v31 = *(_OWORD *)(v46 + 176);
  *(_OWORD *)(v46 + 424) = *(_OWORD *)(v46 + 192);
  *(_OWORD *)(v46 + 440) = v29;
  *(_OWORD *)(v46 + 456) = v30;
  long long v32 = *(_OWORD *)(v46 + 144);
  long long v33 = *(_OWORD *)(v46 + 160);
  long long v34 = *(_OWORD *)(v46 + 112);
  *(_OWORD *)(v46 + 360) = *(_OWORD *)(v46 + 128);
  *(_OWORD *)(v46 + 376) = v32;
  *(_OWORD *)(v46 + 392) = v33;
  *(_OWORD *)(v46 + 408) = v31;
  long long v35 = *(_OWORD *)(v46 + 80);
  long long v36 = *(_OWORD *)(v46 + 96);
  long long v37 = *(_OWORD *)(v46 + 48);
  *(_OWORD *)(v46 + 296) = *(_OWORD *)(v46 + 64);
  *(_OWORD *)(v46 + 312) = v35;
  *(_OWORD *)(v46 + 328) = v36;
  *(_OWORD *)(v46 + 344) = v34;
  long long v38 = *(_OWORD *)(v46 + 32);
  *(_OWORD *)(v46 + 248) = *(_OWORD *)(v46 + 16);
  *(void *)(v46 + 472) = *(void *)(v46 + 240);
  *(_OWORD *)(v46 + 264) = v38;
  *(_OWORD *)(v46 + 280) = v37;
  sub_100EBC878((uint64_t *)(v46 + 16));
  uint64_t v39 = String.init<A>(describing:)();
  *(void *)(v28 + 56) = &type metadata for String;
  *(void *)(v28 + 64) = v9;
  *(void *)(v28 + 32) = v39;
  *(void *)(v28 + 40) = v40;
  os_log(_:dso:log:_:_:)();
  swift_release();
  sub_100EBC99C(v45);
  swift_bridgeObjectRelease();
  sub_10001CFB8(v48, v50);
  swift_release();
  sub_100EBCABC((uint64_t *)(v46 + 16));
  uint64_t v41 = *(void *)(v46 + 1096);
  uint64_t v42 = *(void *)(v46 + 1088);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v43 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v46 + 8);
  return v43(v51, v42, v41);
}

unint64_t sub_100EBC824()
{
  unint64_t result = qword_101661CA0;
  if (!qword_101661CA0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_101661CA0);
  }
  return result;
}

uint64_t *sub_100EBC878(uint64_t *a1)
{
  uint64_t v2 = a1[3];
  unint64_t v3 = a1[4];
  uint64_t v4 = a1[5];
  unint64_t v5 = a1[6];
  uint64_t v6 = a1[7];
  unint64_t v7 = a1[8];
  uint64_t v9 = a1[9];
  unint64_t v8 = a1[10];
  uint64_t v10 = a1[11];
  unint64_t v12 = a1[12];
  unint64_t v13 = a1[14];
  uint64_t v14 = a1[13];
  sub_1000361E0(*a1, a1[1]);
  sub_1000361E0(v2, v3);
  sub_1000361E0(v4, v5);
  sub_1000361E0(v6, v7);
  sub_1000361E0(v9, v8);
  sub_1000361E0(v10, v12);
  sub_100037A38(v14, v13);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

void *sub_100EBC99C(void *a1)
{
  uint64_t v2 = a1[6];
  unint64_t v3 = a1[7];
  uint64_t v4 = a1[8];
  unint64_t v5 = a1[9];
  uint64_t v6 = a1[10];
  unint64_t v7 = a1[11];
  uint64_t v8 = a1[12];
  unint64_t v10 = a1[13];
  unint64_t v11 = a1[15];
  uint64_t v12 = a1[14];
  unint64_t v13 = a1[17];
  uint64_t v14 = a1[16];
  unint64_t v15 = a1[19];
  uint64_t v16 = a1[18];
  unint64_t v17 = a1[21];
  uint64_t v18 = a1[20];
  unint64_t v19 = a1[25];
  uint64_t v20 = a1[24];
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_10001CFB8(v2, v3);
  sub_10001CFB8(v4, v5);
  sub_10001CFB8(v6, v7);
  sub_10001CFB8(v8, v10);
  sub_10001CFB8(v12, v11);
  sub_10001CFB8(v14, v13);
  sub_10001CFB8(v16, v15);
  sub_100037A24(v18, v17);
  swift_bridgeObjectRelease();
  sub_100037A24(v20, v19);
  return a1;
}

uint64_t *sub_100EBCABC(uint64_t *a1)
{
  uint64_t v2 = a1[3];
  unint64_t v3 = a1[4];
  uint64_t v4 = a1[5];
  unint64_t v5 = a1[6];
  uint64_t v6 = a1[7];
  unint64_t v7 = a1[8];
  uint64_t v8 = a1[9];
  unint64_t v9 = a1[10];
  uint64_t v10 = a1[11];
  unint64_t v13 = a1[14];
  uint64_t v14 = a1[13];
  unint64_t v12 = a1[12];
  sub_10001CFB8(*a1, a1[1]);
  sub_10001CFB8(v2, v3);
  sub_10001CFB8(v4, v5);
  sub_10001CFB8(v6, v7);
  sub_10001CFB8(v8, v9);
  sub_10001CFB8(v10, v12);
  sub_100037A24(v14, v13);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t destroy for AirPodsPairingLockAckRequestContent(uint64_t *a1)
{
  sub_10001CFB8(*a1, a1[1]);
  sub_10001CFB8(a1[3], a1[4]);
  sub_10001CFB8(a1[5], a1[6]);
  sub_10001CFB8(a1[7], a1[8]);
  sub_10001CFB8(a1[9], a1[10]);
  sub_10001CFB8(a1[11], a1[12]);
  unint64_t v2 = a1[14];
  if (v2 >> 60 != 15) {
    sub_10001CFB8(a1[13], v2);
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for AirPodsPairingLockAckRequestContent(uint64_t a1, uint64_t *a2)
{
  uint64_t v4 = *a2;
  unint64_t v5 = a2[1];
  sub_1000361E0(*a2, v5);
  *(void *)a1 = v4;
  *(void *)(a1 + 8) = v5;
  uint64_t v6 = a2[3];
  *(void *)(a1 + 16) = a2[2];
  unint64_t v7 = a2[4];
  sub_1000361E0(v6, v7);
  *(void *)(a1 + 24) = v6;
  *(void *)(a1 + 32) = v7;
  uint64_t v8 = a2[5];
  unint64_t v9 = a2[6];
  sub_1000361E0(v8, v9);
  *(void *)(a1 + 40) = v8;
  *(void *)(a1 + 48) = v9;
  uint64_t v10 = a2[7];
  unint64_t v11 = a2[8];
  sub_1000361E0(v10, v11);
  *(void *)(a1 + 56) = v10;
  *(void *)(a1 + 64) = v11;
  uint64_t v12 = a2[9];
  unint64_t v13 = a2[10];
  sub_1000361E0(v12, v13);
  *(void *)(a1 + 72) = v12;
  *(void *)(a1 + 80) = v13;
  uint64_t v14 = a2[11];
  unint64_t v15 = a2[12];
  sub_1000361E0(v14, v15);
  *(void *)(a1 + 88) = v14;
  *(void *)(a1 + 96) = v15;
  uint64_t v16 = a2 + 13;
  unint64_t v17 = a2[14];
  if (v17 >> 60 == 15)
  {
    *(_OWORD *)(a1 + 104) = *(_OWORD *)v16;
  }
  else
  {
    uint64_t v18 = *v16;
    sub_1000361E0(*v16, a2[14]);
    *(void *)(a1 + 104) = v18;
    *(void *)(a1 + 112) = v17;
  }
  uint64_t v19 = a2[16];
  *(void *)(a1 + 120) = a2[15];
  *(void *)(a1 + 128) = v19;
  uint64_t v20 = a2[18];
  *(void *)(a1 + 136) = a2[17];
  *(void *)(a1 + 144) = v20;
  uint64_t v21 = a2[20];
  *(void *)(a1 + 152) = a2[19];
  *(void *)(a1 + 160) = v21;
  uint64_t v22 = a2[22];
  *(void *)(a1 + 168) = a2[21];
  *(void *)(a1 + 176) = v22;
  uint64_t v23 = a2[24];
  *(void *)(a1 + 184) = a2[23];
  *(void *)(a1 + 192) = v23;
  uint64_t v24 = a2[26];
  *(void *)(a1 + 200) = a2[25];
  *(void *)(a1 + 208) = v24;
  uint64_t v25 = a2[27];
  uint64_t v26 = a2[28];
  *(void *)(a1 + 216) = v25;
  *(void *)(a1 + 224) = v26;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t *assignWithCopy for AirPodsPairingLockAckRequestContent(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4 = *a2;
  unint64_t v5 = a2[1];
  sub_1000361E0(*a2, v5);
  uint64_t v6 = *a1;
  unint64_t v7 = a1[1];
  *a1 = v4;
  a1[1] = v5;
  sub_10001CFB8(v6, v7);
  a1[2] = a2[2];
  uint64_t v8 = a2[3];
  unint64_t v9 = a2[4];
  sub_1000361E0(v8, v9);
  uint64_t v10 = a1[3];
  unint64_t v11 = a1[4];
  a1[3] = v8;
  a1[4] = v9;
  sub_10001CFB8(v10, v11);
  uint64_t v12 = a2[5];
  unint64_t v13 = a2[6];
  sub_1000361E0(v12, v13);
  uint64_t v14 = a1[5];
  unint64_t v15 = a1[6];
  a1[5] = v12;
  a1[6] = v13;
  sub_10001CFB8(v14, v15);
  uint64_t v16 = a2[7];
  unint64_t v17 = a2[8];
  sub_1000361E0(v16, v17);
  uint64_t v18 = a1[7];
  unint64_t v19 = a1[8];
  a1[7] = v16;
  a1[8] = v17;
  sub_10001CFB8(v18, v19);
  uint64_t v20 = a2[9];
  unint64_t v21 = a2[10];
  sub_1000361E0(v20, v21);
  uint64_t v22 = a1[9];
  unint64_t v23 = a1[10];
  a1[9] = v20;
  a1[10] = v21;
  sub_10001CFB8(v22, v23);
  uint64_t v24 = a2[11];
  unint64_t v25 = a2[12];
  sub_1000361E0(v24, v25);
  uint64_t v26 = a1[11];
  unint64_t v27 = a1[12];
  a1[11] = v24;
  a1[12] = v25;
  sub_10001CFB8(v26, v27);
  uint64_t v28 = a2 + 13;
  unint64_t v29 = a2[14];
  if ((unint64_t)a1[14] >> 60 != 15)
  {
    if (v29 >> 60 != 15)
    {
      uint64_t v31 = *v28;
      sub_1000361E0(*v28, a2[14]);
      uint64_t v32 = a1[13];
      unint64_t v33 = a1[14];
      a1[13] = v31;
      a1[14] = v29;
      sub_10001CFB8(v32, v33);
      goto LABEL_8;
    }
    sub_1001356D0((uint64_t)(a1 + 13));
    goto LABEL_6;
  }
  if (v29 >> 60 == 15)
  {
LABEL_6:
    *(_OWORD *)(a1 + 13) = *(_OWORD *)v28;
    goto LABEL_8;
  }
  uint64_t v30 = *v28;
  sub_1000361E0(*v28, a2[14]);
  a1[13] = v30;
  a1[14] = v29;
LABEL_8:
  a1[15] = a2[15];
  a1[16] = a2[16];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[17] = a2[17];
  a1[18] = a2[18];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[19] = a2[19];
  a1[20] = a2[20];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[21] = a2[21];
  a1[22] = a2[22];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[23] = a2[23];
  a1[24] = a2[24];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[25] = a2[25];
  a1[26] = a2[26];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[27] = a2[27];
  a1[28] = a2[28];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

__n128 initializeWithTake for AirPodsPairingLockAckRequestContent(uint64_t a1, long long *a2)
{
  long long v2 = *a2;
  long long v3 = a2[2];
  *(_OWORD *)(a1 + 16) = a2[1];
  *(_OWORD *)(a1 + 32) = v3;
  *(_OWORD *)a1 = v2;
  long long v4 = a2[3];
  long long v5 = a2[4];
  long long v6 = a2[6];
  *(_OWORD *)(a1 + 80) = a2[5];
  *(_OWORD *)(a1 + 96) = v6;
  *(_OWORD *)(a1 + 48) = v4;
  *(_OWORD *)(a1 + 64) = v5;
  long long v7 = a2[7];
  long long v8 = a2[8];
  long long v9 = a2[10];
  *(_OWORD *)(a1 + 144) = a2[9];
  *(_OWORD *)(a1 + 160) = v9;
  *(_OWORD *)(a1 + 112) = v7;
  *(_OWORD *)(a1 + 128) = v8;
  __n128 result = (__n128)a2[11];
  long long v11 = a2[12];
  long long v12 = a2[13];
  *(void *)(a1 + 224) = *((void *)a2 + 28);
  *(_OWORD *)(a1 + 192) = v11;
  *(_OWORD *)(a1 + 208) = v12;
  *(__n128 *)(a1 + 176) = result;
  return result;
}

uint64_t assignWithTake for AirPodsPairingLockAckRequestContent(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)a1;
  unint64_t v5 = *(void *)(a1 + 8);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  sub_10001CFB8(v4, v5);
  uint64_t v6 = *(void *)(a2 + 32);
  uint64_t v7 = *(void *)(a1 + 24);
  unint64_t v8 = *(void *)(a1 + 32);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(void *)(a1 + 32) = v6;
  sub_10001CFB8(v7, v8);
  uint64_t v9 = *(void *)(a1 + 40);
  unint64_t v10 = *(void *)(a1 + 48);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  sub_10001CFB8(v9, v10);
  uint64_t v11 = *(void *)(a1 + 56);
  unint64_t v12 = *(void *)(a1 + 64);
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  sub_10001CFB8(v11, v12);
  uint64_t v13 = *(void *)(a1 + 72);
  unint64_t v14 = *(void *)(a1 + 80);
  *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 72);
  sub_10001CFB8(v13, v14);
  uint64_t v15 = *(void *)(a1 + 88);
  unint64_t v16 = *(void *)(a1 + 96);
  *(_OWORD *)(a1 + 88) = *(_OWORD *)(a2 + 88);
  sub_10001CFB8(v15, v16);
  unint64_t v17 = (void *)(a2 + 104);
  unint64_t v18 = *(void *)(a1 + 112);
  if (v18 >> 60 != 15)
  {
    unint64_t v19 = *(void *)(a2 + 112);
    if (v19 >> 60 != 15)
    {
      uint64_t v20 = *(void *)(a1 + 104);
      *(void *)(a1 + 104) = *v17;
      *(void *)(a1 + 112) = v19;
      sub_10001CFB8(v20, v18);
      goto LABEL_6;
    }
    sub_1001356D0(a1 + 104);
  }
  *(_OWORD *)(a1 + 104) = *(_OWORD *)v17;
LABEL_6:
  uint64_t v21 = *(void *)(a2 + 128);
  *(void *)(a1 + 120) = *(void *)(a2 + 120);
  *(void *)(a1 + 128) = v21;
  swift_bridgeObjectRelease();
  uint64_t v22 = *(void *)(a2 + 144);
  *(void *)(a1 + 136) = *(void *)(a2 + 136);
  *(void *)(a1 + 144) = v22;
  swift_bridgeObjectRelease();
  uint64_t v23 = *(void *)(a2 + 160);
  *(void *)(a1 + 152) = *(void *)(a2 + 152);
  *(void *)(a1 + 160) = v23;
  swift_bridgeObjectRelease();
  uint64_t v24 = *(void *)(a2 + 176);
  *(void *)(a1 + 168) = *(void *)(a2 + 168);
  *(void *)(a1 + 176) = v24;
  swift_bridgeObjectRelease();
  uint64_t v25 = *(void *)(a2 + 192);
  *(void *)(a1 + 184) = *(void *)(a2 + 184);
  *(void *)(a1 + 192) = v25;
  swift_bridgeObjectRelease();
  uint64_t v26 = *(void *)(a2 + 208);
  *(void *)(a1 + 200) = *(void *)(a2 + 200);
  *(void *)(a1 + 208) = v26;
  swift_bridgeObjectRelease();
  uint64_t v27 = *(void *)(a2 + 224);
  *(void *)(a1 + 216) = *(void *)(a2 + 216);
  *(void *)(a1 + 224) = v27;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for AirPodsPairingLockAckRequestContent(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 232)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 176);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for AirPodsPairingLockAckRequestContent(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 200) = 0u;
    *(_OWORD *)(result + 216) = 0u;
    *(_OWORD *)(result + 184) = 0u;
    *(_OWORD *)(result + 168) = 0u;
    *(_OWORD *)(result + 152) = 0u;
    *(_OWORD *)(result + 136) = 0u;
    *(_OWORD *)(result + 120) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)__n128 result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 232) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 176) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 232) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for AirPodsPairingLockAckRequestContent()
{
  return &type metadata for AirPodsPairingLockAckRequestContent;
}

ValueMetadata *type metadata accessor for AirPodsPairingLockAckRequest()
{
  return &type metadata for AirPodsPairingLockAckRequest;
}

unint64_t sub_100EBD2B8()
{
  unint64_t result = qword_101661CB0;
  if (!qword_101661CB0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_101661CB0);
  }
  return result;
}

unsigned char *storeEnumTagSinglePayload for AirPodsPairingLockAckRequestContent.CodingKeys(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 14 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 14) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xF2) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xF1)
  {
    unsigned int v6 = ((a2 - 242) >> 8) + 1;
    *unint64_t result = a2 + 14;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x100EBD3D8);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 14;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for AirPodsPairingLockAckRequestContent.CodingKeys()
{
  return &type metadata for AirPodsPairingLockAckRequestContent.CodingKeys;
}

unint64_t sub_100EBD414()
{
  unint64_t result = qword_101661CB8;
  if (!qword_101661CB8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_101661CB8);
  }
  return result;
}

unint64_t sub_100EBD46C()
{
  unint64_t result = qword_101661CC0;
  if (!qword_101661CC0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_101661CC0);
  }
  return result;
}

unint64_t sub_100EBD4C4()
{
  unint64_t result = qword_101661CC8;
  if (!qword_101661CC8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_101661CC8);
  }
  return result;
}

uint64_t sub_100EBD518(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 0x4E6E6F6973736573 && a2 == 0xEC00000065636E6FLL;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x737574617473 && a2 == 0xE600000000000000 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 1684628325 && a2 == 0xE400000000000000 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else if (a1 == 0x644970696863 && a2 == 0xE600000000000000 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 3;
  }
  else if (a1 == 0x754E6C6169726573 && a2 == 0xEC0000007265626DLL {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 4;
  }
  else if (a1 == 0x7374726563 && a2 == 0xE500000000000000 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 5;
  }
  else if (a1 == 0x726F737365636361 && a2 == 0xED00006E67695379 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 6;
  }
  else if (a1 == 0xD000000000000013 && a2 == 0x80000001013EEBB0 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 7;
  }
  else if (a1 == 0xD000000000000011 && a2 == 0x80000001013F6580 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 8;
  }
  else if (a1 == 0x69634572656E776FLL && a2 == 0xE900000000000064 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 9;
  }
  else if (a1 == 0x69684372656E776FLL && a2 == 0xEB00000000644970 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 10;
  }
  else if (a1 == 0x7372655663657073 && a2 == 0xEB000000006E6F69 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 11;
  }
  else if (a1 == 0x657261776D726966 && a2 == 0xEF6E6F6973726556 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 12;
  }
  else if (a1 == 0x49746375646F7270 && a2 == 0xE900000000000064 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 13;
  }
  else if (a1 == 0x6449726F646E6576 && a2 == 0xE800000000000000)
  {
    swift_bridgeObjectRelease();
    return 14;
  }
  else
  {
    char v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v6) {
      return 14;
    }
    else {
      return 15;
    }
  }
}

uint64_t sub_100EBDBA0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_100EBDBB4);
}

uint64_t sub_100EBDBB4(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for UUID();
  uint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 48);

  return v5(a1, a2, v4);
}

uint64_t sub_100EBDC20(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_100EBDC34);
}

uint64_t sub_100EBDC34(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for UUID();
  uint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 56);

  return v5(a1, a2, a2, v4);
}

uint64_t type metadata accessor for SecureLocationsKeyUpdateAckEnvelope(uint64_t a1)
{
  return sub_1000F4EA4(a1, qword_101661D28);
}

uint64_t *sub_100EBDCC4(uint64_t *a1, uint64_t *a2, int *a3)
{
  int v5 = *(_DWORD *)(*((void *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v23 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v23 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v7 = type metadata accessor for UUID();
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v7 - 8) + 16))(a1, a2, v7);
    uint64_t v8 = a3[5];
    uint64_t v9 = a3[6];
    unint64_t v10 = (uint64_t *)((char *)a1 + v8);
    uint64_t v11 = (uint64_t *)((char *)a2 + v8);
    uint64_t v12 = v11[1];
    *unint64_t v10 = *v11;
    v10[1] = v12;
    *(uint64_t *)((char *)a1 + v9) = *(uint64_t *)((char *)a2 + v9);
    uint64_t v13 = a3[7];
    unint64_t v14 = (uint64_t *)((char *)a1 + v13);
    uint64_t v15 = (uint64_t *)((char *)a2 + v13);
    uint64_t v16 = *v15;
    unint64_t v17 = v15[1];
    swift_bridgeObjectRetain();
    sub_1000361E0(v16, v17);
    *unint64_t v14 = v16;
    v14[1] = v17;
    uint64_t v18 = a3[8];
    unint64_t v19 = (uint64_t *)((char *)a1 + v18);
    uint64_t v20 = (uint64_t *)((char *)a2 + v18);
    uint64_t v21 = *v20;
    unint64_t v22 = v20[1];
    sub_1000361E0(*v20, v22);
    *unint64_t v19 = v21;
    v19[1] = v22;
  }
  return a1;
}

uint64_t sub_100EBDDEC(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8))(a1, v4);
  swift_bridgeObjectRelease();
  sub_10001CFB8(*(void *)(a1 + *(int *)(a2 + 28)), *(void *)(a1 + *(int *)(a2 + 28) + 8));
  int v5 = (uint64_t *)(a1 + *(int *)(a2 + 32));
  uint64_t v6 = *v5;
  unint64_t v7 = v5[1];

  return sub_10001CFB8(v6, v7);
}

uint64_t sub_100EBDE84(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 16))(a1, a2, v6);
  uint64_t v7 = a3[5];
  uint64_t v8 = a3[6];
  uint64_t v9 = (void *)(a1 + v7);
  unint64_t v10 = (void *)(a2 + v7);
  uint64_t v11 = v10[1];
  *uint64_t v9 = *v10;
  v9[1] = v11;
  *(void *)(a1 + v8) = *(void *)(a2 + v8);
  uint64_t v12 = a3[7];
  uint64_t v13 = (uint64_t *)(a1 + v12);
  unint64_t v14 = (uint64_t *)(a2 + v12);
  uint64_t v15 = *v14;
  unint64_t v16 = v14[1];
  swift_bridgeObjectRetain();
  sub_1000361E0(v15, v16);
  *uint64_t v13 = v15;
  v13[1] = v16;
  uint64_t v17 = a3[8];
  uint64_t v18 = (uint64_t *)(a1 + v17);
  unint64_t v19 = (uint64_t *)(a2 + v17);
  uint64_t v20 = *v19;
  unint64_t v21 = v19[1];
  sub_1000361E0(*v19, v21);
  *uint64_t v18 = v20;
  v18[1] = v21;
  return a1;
}

uint64_t sub_100EBDF5C(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 24))(a1, a2, v6);
  uint64_t v7 = a3[5];
  uint64_t v8 = (void *)(a1 + v7);
  uint64_t v9 = (void *)(a2 + v7);
  *uint64_t v8 = *v9;
  v8[1] = v9[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + a3[6]) = *(void *)(a2 + a3[6]);
  uint64_t v10 = a3[7];
  uint64_t v11 = (uint64_t *)(a1 + v10);
  uint64_t v12 = (uint64_t *)(a2 + v10);
  uint64_t v13 = *v12;
  unint64_t v14 = v12[1];
  sub_1000361E0(*v12, v14);
  uint64_t v15 = *v11;
  unint64_t v16 = v11[1];
  uint64_t *v11 = v13;
  v11[1] = v14;
  sub_10001CFB8(v15, v16);
  uint64_t v17 = a3[8];
  uint64_t v18 = (uint64_t *)(a1 + v17);
  unint64_t v19 = (uint64_t *)(a2 + v17);
  uint64_t v20 = *v19;
  unint64_t v21 = v19[1];
  sub_1000361E0(*v19, v21);
  uint64_t v22 = *v18;
  unint64_t v23 = v18[1];
  *uint64_t v18 = v20;
  v18[1] = v21;
  sub_10001CFB8(v22, v23);
  return a1;
}

uint64_t sub_100EBE05C(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 32))(a1, a2, v6);
  uint64_t v7 = a3[6];
  *(_OWORD *)(a1 + a3[5]) = *(_OWORD *)(a2 + a3[5]);
  *(void *)(a1 + v7) = *(void *)(a2 + v7);
  uint64_t v8 = a3[8];
  *(_OWORD *)(a1 + a3[7]) = *(_OWORD *)(a2 + a3[7]);
  *(_OWORD *)(a1 + v8) = *(_OWORD *)(a2 + v8);
  return a1;
}

uint64_t sub_100EBE0F4(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 40))(a1, a2, v6);
  uint64_t v7 = a3[5];
  uint64_t v8 = (void *)(a1 + v7);
  uint64_t v9 = (uint64_t *)(a2 + v7);
  uint64_t v11 = *v9;
  uint64_t v10 = v9[1];
  *uint64_t v8 = v11;
  v8[1] = v10;
  swift_bridgeObjectRelease();
  uint64_t v12 = a3[7];
  *(void *)(a1 + a3[6]) = *(void *)(a2 + a3[6]);
  uint64_t v13 = *(void *)(a1 + v12);
  unint64_t v14 = *(void *)(a1 + v12 + 8);
  *(_OWORD *)(a1 + v12) = *(_OWORD *)(a2 + v12);
  sub_10001CFB8(v13, v14);
  uint64_t v15 = a3[8];
  uint64_t v16 = *(void *)(a1 + v15);
  unint64_t v17 = *(void *)(a1 + v15 + 8);
  *(_OWORD *)(a1 + v15) = *(_OWORD *)(a2 + v15);
  sub_10001CFB8(v16, v17);
  return a1;
}

uint64_t sub_100EBE1B8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_100EBE1CC);
}

uint64_t sub_100EBE1CC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for UUID();
  uint64_t v7 = *(void *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == a2)
  {
    uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    return v8(a1, a2, v6);
  }
  else
  {
    unint64_t v10 = *(void *)(a1 + *(int *)(a3 + 20) + 8);
    if (v10 >= 0xFFFFFFFF) {
      LODWORD(v10) = -1;
    }
    return (v10 + 1);
  }
}

uint64_t sub_100EBE290(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_100EBE2A4);
}

uint64_t sub_100EBE2A4(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result = type metadata accessor for UUID();
  uint64_t v9 = *(void *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    unint64_t v10 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    return v10(a1, a2, a2, result);
  }
  else
  {
    *(void *)(a1 + *(int *)(a4 + 20) + 8) = (a2 - 1);
  }
  return result;
}

uint64_t type metadata accessor for SecureLocationsKeyUpdateEnvelope(uint64_t a1)
{
  return sub_1000F4EA4(a1, qword_101661DB8);
}

uint64_t sub_100EBE384()
{
  uint64_t result = type metadata accessor for UUID();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

unint64_t sub_100EBE434(char a1)
{
  unint64_t result = 0x696669746E656469;
  switch(a1)
  {
    case 1:
      unint64_t result = 0xD000000000000010;
      break;
    case 2:
      unint64_t result = 0x7865646E69;
      break;
    case 3:
      unint64_t result = 0x4B65746176697270;
      break;
    case 4:
      unint64_t result = 0xD000000000000013;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t sub_100EBE4F0(void *a1)
{
  uint64_t v3 = v1;
  uint64_t v5 = sub_10000588C(&qword_101661E00);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v8 = (char *)&v11 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10001CD44(a1, a1[3]);
  sub_100EBF2EC();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  LOBYTE(v11) = 0;
  type metadata accessor for UUID();
  sub_10001035C(&qword_10163B040);
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  if (!v2)
  {
    updated = (int *)type metadata accessor for SecureLocationsKeyUpdateEnvelope(0);
    LOBYTE(v11) = 1;
    KeyedEncodingContainer.encode(_:forKey:)();
    *(void *)&long long v11 = *(void *)(v3 + updated[6]);
    char v12 = 2;
    sub_100BB254C();
    KeyedEncodingContainer.encode<A>(_:forKey:)();
    long long v11 = *(_OWORD *)(v3 + updated[7]);
    char v12 = 3;
    sub_10043C164();
    KeyedEncodingContainer.encode<A>(_:forKey:)();
    long long v11 = *(_OWORD *)(v3 + updated[8]);
    char v12 = 4;
    sub_10043CBC4();
    KeyedEncodingContainer.encode<A>(_:forKey:)();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
}

uint64_t sub_100EBE764@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v21 = a2;
  uint64_t v4 = type metadata accessor for UUID();
  uint64_t v23 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v24 = (char *)&v19 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v25 = sub_10000588C(&qword_101661E10);
  uint64_t v22 = *(void *)(v25 - 8);
  __chkstk_darwin(v25);
  uint64_t v7 = (char *)&v19 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  updated = (int *)type metadata accessor for SecureLocationsKeyUpdateEnvelope(0);
  __chkstk_darwin(updated);
  unint64_t v10 = (char *)&v19 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10001CD44(a1, a1[3]);
  sub_100EBF2EC();
  uint64_t v26 = v7;
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v2) {
    return _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)a1);
  }
  uint64_t v20 = a1;
  uint64_t v11 = (uint64_t)v10;
  uint64_t v12 = v23;
  LOBYTE(v27) = 0;
  sub_10001035C((unint64_t *)&qword_10163B010);
  uint64_t v13 = v24;
  uint64_t v14 = v25;
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  (*(void (**)(uint64_t, char *, uint64_t))(v12 + 32))(v11, v13, v4);
  LOBYTE(v27) = 1;
  uint64_t v15 = KeyedDecodingContainer.decode(_:forKey:)();
  uint64_t v16 = (uint64_t *)(v11 + updated[5]);
  uint64_t *v16 = v15;
  v16[1] = v17;
  char v28 = 2;
  sub_100BB24F8();
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  *(void *)(v11 + updated[6]) = v27;
  char v28 = 3;
  sub_10043C110();
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  *(_OWORD *)(v11 + updated[7]) = v27;
  char v28 = 4;
  sub_10043CB70();
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  (*(void (**)(char *, uint64_t))(v22 + 8))(v26, v14);
  *(_OWORD *)(v11 + updated[8]) = v27;
  sub_100EBF394(v11, v21, type metadata accessor for SecureLocationsKeyUpdateEnvelope);
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)v20);
  return sub_100EBF3FC(v11, type metadata accessor for SecureLocationsKeyUpdateEnvelope);
}

uint64_t sub_100EBEBF8(void *a1)
{
  uint64_t v3 = v1;
  uint64_t v5 = sub_10000588C(&qword_101661E28);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v8 = &v10[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0)];
  sub_10001CD44(a1, a1[3]);
  sub_100EBF340();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  char v12 = 0;
  type metadata accessor for UUID();
  sub_10001035C(&qword_10163B040);
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  if (!v2)
  {
    uint64_t v11 = *(void *)(v3 + *(int *)(type metadata accessor for SecureLocationsKeyUpdateAckEnvelope(0) + 20));
    v10[15] = 1;
    sub_100BB254C();
    KeyedEncodingContainer.encode<A>(_:forKey:)();
  }
  return (*(uint64_t (**)(unsigned char *, uint64_t))(v6 + 8))(v8, v5);
}

uint64_t sub_100EBEDB0@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v20 = a2;
  uint64_t v23 = type metadata accessor for UUID();
  uint64_t v21 = *(void *)(v23 - 8);
  __chkstk_darwin(v23);
  uint64_t v5 = (char *)&v18 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v24 = sub_10000588C(&qword_101661E18);
  uint64_t v22 = *(void *)(v24 - 8);
  __chkstk_darwin(v24);
  uint64_t v7 = (char *)&v18 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t updated = type metadata accessor for SecureLocationsKeyUpdateAckEnvelope(0);
  __chkstk_darwin(updated);
  unint64_t v10 = (char *)&v18 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10001CD44(a1, a1[3]);
  sub_100EBF340();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v2) {
    return _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)a1);
  }
  uint64_t v11 = v10;
  uint64_t v12 = v21;
  char v27 = 0;
  sub_10001035C((unint64_t *)&qword_10163B010);
  uint64_t v13 = v23;
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  uint64_t v14 = *(void (**)(char *, char *, uint64_t))(v12 + 32);
  uint64_t v19 = (uint64_t)v11;
  v14(v11, v5, v13);
  char v26 = 1;
  sub_100BB24F8();
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  (*(void (**)(char *, uint64_t))(v22 + 8))(v7, v24);
  uint64_t v16 = v19;
  uint64_t v15 = v20;
  *(void *)(v19 + *(int *)(updated + 20)) = v25;
  sub_100EBF394(v16, v15, type metadata accessor for SecureLocationsKeyUpdateAckEnvelope);
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)a1);
  return sub_100EBF3FC(v16, type metadata accessor for SecureLocationsKeyUpdateAckEnvelope);
}

unint64_t sub_100EBF108()
{
  return sub_100EBE434(*v0);
}

uint64_t sub_100EBF110@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_100EBF874(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_100EBF138(uint64_t a1)
{
  unint64_t v2 = sub_100EBF2EC();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_100EBF174(uint64_t a1)
{
  unint64_t v2 = sub_100EBF2EC();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_100EBF1B0@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_100EBE764(a1, a2);
}

uint64_t sub_100EBF1C8(void *a1)
{
  return sub_100EBE4F0(a1);
}

uint64_t sub_100EBF1E0()
{
  if (*v0) {
    return 0x7865646E69;
  }
  else {
    return 0x696669746E656469;
  }
}

uint64_t sub_100EBF21C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_100EBFA88(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_100EBF244(uint64_t a1)
{
  unint64_t v2 = sub_100EBF340();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_100EBF280(uint64_t a1)
{
  unint64_t v2 = sub_100EBF340();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_100EBF2BC@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_100EBEDB0(a1, a2);
}

uint64_t sub_100EBF2D4(void *a1)
{
  return sub_100EBEBF8(a1);
}

unint64_t sub_100EBF2EC()
{
  unint64_t result = qword_101661E08;
  if (!qword_101661E08)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_101661E08);
  }
  return result;
}

unint64_t sub_100EBF340()
{
  unint64_t result = qword_101661E20;
  if (!qword_101661E20)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_101661E20);
  }
  return result;
}

uint64_t sub_100EBF394(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

uint64_t sub_100EBF3FC(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

unsigned char *storeEnumTagSinglePayload for SecureLocationsKeyUpdateAckEnvelope.CodingKeys(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFE)
  {
    unsigned int v6 = ((a2 - 255) >> 8) + 1;
    *unint64_t result = a2 + 1;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x100EBF528);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 1;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for SecureLocationsKeyUpdateAckEnvelope.CodingKeys()
{
  return &type metadata for SecureLocationsKeyUpdateAckEnvelope.CodingKeys;
}

unsigned char *storeEnumTagSinglePayload for SecureLocationsKeyUpdateEnvelope.CodingKeys(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 4 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 4) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFC) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFB)
  {
    unsigned int v6 = ((a2 - 252) >> 8) + 1;
    *unint64_t result = a2 + 4;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x100EBF62CLL);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 4;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for SecureLocationsKeyUpdateEnvelope.CodingKeys()
{
  return &type metadata for SecureLocationsKeyUpdateEnvelope.CodingKeys;
}

unint64_t sub_100EBF668()
{
  unint64_t result = qword_101661E30;
  if (!qword_101661E30)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_101661E30);
  }
  return result;
}

unint64_t sub_100EBF6C0()
{
  unint64_t result = qword_101661E38;
  if (!qword_101661E38)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_101661E38);
  }
  return result;
}

unint64_t sub_100EBF718()
{
  unint64_t result = qword_101661E40;
  if (!qword_101661E40)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_101661E40);
  }
  return result;
}

unint64_t sub_100EBF770()
{
  unint64_t result = qword_101661E48;
  if (!qword_101661E48)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_101661E48);
  }
  return result;
}

unint64_t sub_100EBF7C8()
{
  unint64_t result = qword_101661E50;
  if (!qword_101661E50)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_101661E50);
  }
  return result;
}

unint64_t sub_100EBF820()
{
  unint64_t result = qword_101661E58;
  if (!qword_101661E58)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_101661E58);
  }
  return result;
}

uint64_t sub_100EBF874(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 0x696669746E656469 && a2 == 0xEA00000000007265;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0xD000000000000010 && a2 == 0x8000000101419860 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0x7865646E69 && a2 == 0xE500000000000000 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else if (a1 == 0x4B65746176697270 && a2 == 0xEA00000000007965 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 3;
  }
  else if (a1 == 0xD000000000000013 && a2 == 0x80000001013FC680)
  {
    swift_bridgeObjectRelease();
    return 4;
  }
  else
  {
    char v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v6) {
      return 4;
    }
    else {
      return 5;
    }
  }
}

uint64_t sub_100EBFA88(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 0x696669746E656469 && a2 == 0xEA00000000007265;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x7865646E69 && a2 == 0xE500000000000000)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else
  {
    char v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v6) {
      return 1;
    }
    else {
      return 2;
    }
  }
}

uint64_t sub_100EBFB80()
{
  type metadata accessor for Service();

  return Identifier.init(stringLiteral:)();
}

uint64_t sub_100EBFBD4()
{
  type metadata accessor for Characteristic();

  return Identifier.init(stringLiteral:)();
}

uint64_t sub_100EBFC28()
{
  uint64_t v1 = v0;
  type metadata accessor for BeaconKeyManager(0);
  OSAllocatedUnfairLock.callAsFunction<A>(_:)();
  swift_retain();
  swift_release();
  uint64_t v2 = swift_allocObject();
  swift_weakInit();
  uint64_t v3 = swift_allocObject();
  *(void *)(v3 + 16) = sub_100EBFEE0;
  *(void *)(v3 + 24) = v2;
  swift_retain_n();
  sub_10000588C(&qword_101661E60);
  sub_100EBFF28();
  uint64_t v4 = Publisher<>.sink(receiveValue:)();
  swift_release();
  swift_release();
  swift_release_n();
  uint64_t v5 = *(void *)(v1 + OBJC_IVAR____TtC12searchpartyd20BeaconManagerService_beaconKeyManagerURLChangedSubscription);
  *(void *)(v1 + OBJC_IVAR____TtC12searchpartyd20BeaconManagerService_beaconKeyManagerURLChangedSubscription) = v4;
  return sub_100A61CBC(v5);
}

uint64_t sub_100EBFDA8()
{
  swift_weakDestroy();

  return _swift_deallocObject(v0, 24, 7);
}

uint64_t sub_100EBFDE0(uint64_t a1, char a2)
{
  uint64_t v4 = sub_10000588C(&qword_10163CBE8);
  uint64_t v5 = v4 - 8;
  __chkstk_darwin(v4);
  uint64_t v7 = (char *)&v10 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for URL();
  (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v8 - 8) + 16))(v7, a1, v8);
  v7[*(int *)(v5 + 56)] = a2;
  swift_beginAccess();
  if (swift_weakLoadStrong()) {
    swift_release();
  }
  return sub_100EBFF84((uint64_t)v7);
}

uint64_t sub_100EBFEE0(uint64_t a1, char a2)
{
  return sub_100EBFDE0(a1, a2);
}

uint64_t sub_100EBFEE8()
{
  swift_release();

  return _swift_deallocObject(v0, 32, 7);
}

uint64_t sub_100EBFF20(uint64_t a1)
{
  return sub_1001742EC(a1, *(void (**)(char *))(v1 + 16));
}

unint64_t sub_100EBFF28()
{
  unint64_t result = qword_101661E68;
  if (!qword_101661E68)
  {
    sub_10000592C(&qword_101661E60);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_101661E68);
  }
  return result;
}

uint64_t sub_100EBFF84(uint64_t a1)
{
  uint64_t v2 = sub_10000588C(&qword_10163CBE8);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_100EBFFE4()
{
  uint64_t v0 = type metadata accessor for Logger();
  sub_10001E384(v0, qword_10170EE38);
  sub_100010324(v0, (uint64_t)qword_10170EE38);
  return Logger.init(subsystem:category:)();
}

uint64_t sub_100EC0068()
{
  uint64_t v0 = type metadata accessor for Logger();
  sub_10001E384(v0, qword_10170EE50);
  uint64_t v1 = sub_100010324(v0, (uint64_t)qword_10170EE50);
  if (qword_101637168 != -1) {
    swift_once();
  }
  uint64_t v2 = sub_100010324(v0, (uint64_t)qword_10170EE38);
  uint64_t v3 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v0 - 8) + 16);

  return v3(v1, v2, v0);
}

uint64_t sub_100EC0130()
{
  uint64_t result = kFMIPLocatableStateReportedNotification;
  if (kFMIPLocatableStateReportedNotification)
  {
    uint64_t result = static String._unconditionallyBridgeFromObjectiveC(_:)();
    qword_101661E70 = result;
    *(void *)algn_101661E78 = v1;
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_100EC0168()
{
  uint64_t v1 = v0;
  uint64_t v2 = sub_10000588C(&qword_10164DBB0);
  __chkstk_darwin(v2 - 8);
  uint64_t v4 = (char *)v14 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = type metadata accessor for TaskPriority();
  uint64_t v6 = *(void *)(v5 - 8);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v6 + 56))(v4, 1, 1, v5);
  uint64_t v7 = (void *)swift_allocObject();
  v7[2] = 0;
  v7[3] = 0;
  v7[4] = v1;
  int v8 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v6 + 48))(v4, 1, v5);
  swift_retain();
  if (v8 == 1)
  {
    sub_1001A5838((uint64_t)v4);
    uint64_t v9 = 0;
    uint64_t v10 = 0;
  }
  else
  {
    TaskPriority.rawValue.getter();
    (*(void (**)(char *, uint64_t))(v6 + 8))(v4, v5);
    if (v7[2])
    {
      swift_getObjectType();
      swift_unknownObjectRetain();
      uint64_t v9 = dispatch thunk of Actor.unownedExecutor.getter();
      uint64_t v10 = v11;
      swift_unknownObjectRelease();
    }
    else
    {
      uint64_t v9 = 0;
      uint64_t v10 = 0;
    }
  }
  uint64_t v12 = swift_allocObject();
  *(void *)(v12 + 16) = &unk_101661FC0;
  *(void *)(v12 + 24) = v7;
  if (v10 | v9)
  {
    v14[0] = 0;
    v14[1] = 0;
    v14[2] = v9;
    v14[3] = v10;
  }
  swift_task_create();
  return swift_release();
}

uint64_t sub_100EC03A4(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  uint64_t v6 = (void *)swift_task_alloc();
  *(void *)(v4 + 16) = v6;
  *uint64_t v6 = v4;
  v6[1] = sub_100033F68;
  v6[3] = a4;
  v6[4] = *a4;
  return _swift_task_switch(sub_100EC04C0, a4, 0);
}

uint64_t sub_100EC0478()
{
  *(void *)(v1 + 24) = v0;
  *(void *)(v1 + 32) = *v0;
  return _swift_task_switch(sub_100EC04C0, v0, 0);
}

uint64_t sub_100EC04C0()
{
  if (qword_101637178 != -1) {
    swift_once();
  }
  uint64_t v1 = dispatch thunk of DarwinNotificationHelper.publisher(name:)();
  uint64_t v3 = v0[3];
  uint64_t v2 = v0[4];
  v0[2] = v1;
  uint64_t v4 = swift_allocObject();
  *(void *)(v4 + 16) = v3;
  *(void *)(v4 + 24) = v2;
  swift_retain();
  sub_10000588C(&qword_101661F80);
  sub_100062734(&qword_101661F88, &qword_101661F80);
  uint64_t v5 = Publisher<>.sink(receiveValue:)();
  swift_release();
  swift_release();
  *(void *)(v3 + 128) = v5;
  swift_release();
  uint64_t v6 = (uint64_t (*)(void))v0[1];
  return v6();
}

uint64_t sub_100EC07C4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = sub_10000588C(&qword_10164DBB0);
  __chkstk_darwin(v5 - 8);
  uint64_t v7 = (char *)&v12 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for TaskPriority();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 56))(v7, 1, 1, v8);
  unint64_t v9 = sub_100EC18B8();
  uint64_t v10 = (void *)swift_allocObject();
  v10[2] = a2;
  v10[3] = v9;
  v10[4] = a2;
  v10[5] = a3;
  swift_retain_n();
  sub_1008F5E44((uint64_t)v7, (uint64_t)&unk_101661FA0, (uint64_t)v10);
  return swift_release();
}

uint64_t sub_100EC08DC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  *(void *)(v5 + 32) = a4;
  *(void *)(v5 + 40) = a5;
  return _swift_task_switch(sub_100EC08FC, a4, 0);
}

uint64_t sub_100EC08FC()
{
  long long v5 = *(_OWORD *)(v0 + 32);
  *(void *)(v0 + 48) = *(void *)(v5 + 120);
  *(void *)(v0 + 16) = 0xD000000000000016;
  *(void *)(v0 + 24) = 0x8000000101419960;
  uint64_t v1 = swift_allocObject();
  *(void *)(v0 + 56) = v1;
  *(_OWORD *)(v1 + 16) = v5;
  swift_retain();
  sub_10000588C(&qword_101654000);
  sub_100062734((unint64_t *)&unk_10163BCA0, &qword_101654000);
  uint64_t v3 = dispatch thunk of Actor.unownedExecutor.getter();
  return _swift_task_switch(sub_100EC0A08, v3, v2);
}

uint64_t sub_100EC0A08()
{
  dispatch thunk of AsyncKeyedThrottle.throttle(key:block:)();
  swift_release();
  swift_bridgeObjectRelease();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_100EC0A94(uint64_t a1)
{
  *(void *)(v1 + 16) = a1;
  return _swift_task_switch(sub_100EC0AB4, 0, 0);
}

uint64_t sub_100EC0AB4()
{
  if (qword_101637170 != -1) {
    swift_once();
  }
  uint64_t v1 = type metadata accessor for Logger();
  sub_100010324(v1, (uint64_t)qword_10170EE50);
  uint64_t v2 = Logger.logObject.getter();
  os_log_type_t v3 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v2, v3))
  {
    uint64_t v4 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v4 = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, v3, "Located state reported.", v4, 2u);
    swift_slowDealloc();
  }

  long long v5 = (void *)swift_task_alloc();
  *(void *)(v0 + 24) = v5;
  *long long v5 = v0;
  v5[1] = sub_100EC0C18;
  uint64_t v6 = *(void *)(v0 + 16);
  v5[18] = v6;
  return _swift_task_switch(sub_100EC0D30, v6, 0);
}

uint64_t sub_100EC0C18()
{
  uint64_t v3 = *v0;
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(uint64_t))(v3 + 8);
  return v1(1);
}

uint64_t sub_100EC0D10()
{
  *(void *)(v1 + 144) = v0;
  return _swift_task_switch(sub_100EC0D30, v0, 0);
}

uint64_t sub_100EC0D30()
{
  if (qword_1016375E8 != -1) {
    swift_once();
  }
  swift_beginAccess();
  uint64_t result = sub_1000977C4((uint64_t)&xmmword_10166E8F0, v0 + 56);
  if (*(void *)(v0 + 80))
  {
    sub_10001CEB0((long long *)(v0 + 56), v0 + 16);
    sub_10001CD44((void *)(v0 + 16), *(void *)(v0 + 40));
    uint64_t v3 = (uint64_t (__cdecl *)())((char *)&dword_1016392E8 + dword_1016392E8);
    uint64_t v2 = (void *)swift_task_alloc();
    *(void *)(v0 + 152) = v2;
    *uint64_t v2 = v0;
    v2[1] = sub_100EC0E64;
    return v3();
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_100EC0E64(uint64_t a1)
{
  uint64_t v2 = *(void *)(*(void *)v1 + 144);
  *(void *)(*(void *)v1 + 160) = a1;
  swift_task_dealloc();
  return _swift_task_switch(sub_100EC0F7C, v2, 0);
}

uint64_t sub_100EC0F7C()
{
  uint64_t v1 = v0[20];
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)(v0 + 2));
  if (v1)
  {
    uint64_t v2 = v0[20];
    return _swift_task_switch(sub_100EC1210, v2, 0);
  }
  else
  {
    sub_10001CEC8();
    swift_allocError();
    *uint64_t v3 = 0xD00000000000001CLL;
    v3[1] = 0x80000001013F8080;
    swift_willThrow();
    if (qword_101637170 != -1) {
      swift_once();
    }
    uint64_t v4 = type metadata accessor for Logger();
    sub_100010324(v4, (uint64_t)qword_10170EE50);
    swift_errorRetain();
    swift_errorRetain();
    long long v5 = Logger.logObject.getter();
    os_log_type_t v6 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v5, v6))
    {
      uint64_t v7 = (uint8_t *)swift_slowAlloc();
      uint64_t v8 = (void *)swift_slowAlloc();
      *(_DWORD *)uint64_t v7 = 138543362;
      swift_errorRetain();
      uint64_t v9 = _swift_stdlib_bridgeErrorToNSError();
      v0[17] = v9;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *uint64_t v8 = v9;
      swift_errorRelease();
      swift_errorRelease();
      _os_log_impl((void *)&_mh_execute_header, v5, v6, "Own device publish activity failed: %{public}@.", v7, 0xCu);
      sub_10000588C((uint64_t *)&unk_101638EA0);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      swift_errorRelease();
    }
    else
    {
      swift_errorRelease();
      swift_errorRelease();
      swift_errorRelease();
    }
    uint64_t v10 = (uint64_t (*)(void))v0[1];
    return v10();
  }
}

uint64_t sub_100EC1210()
{
  uint64_t v1 = v0[20];
  v0[15] = 0xD000000000000013;
  v0[16] = 0x80000001013F80A0;
  uint64_t v4 = (char *)&async function pointer to dispatch thunk of AsyncKeyedThrottle.throttle(key:block:skipBlock:)
     + async function pointer to dispatch thunk of AsyncKeyedThrottle.throttle(key:block:skipBlock:);
  swift_retain();
  uint64_t v2 = (void *)swift_task_alloc();
  v0[21] = v2;
  *uint64_t v2 = v0;
  v2[1] = sub_100EC1328;
  return ((uint64_t (*)(void *, void *, uint64_t, void (*)(), void))v4)(v0 + 15, &unk_1016411F8, v1, sub_100871C18, 0);
}

uint64_t sub_100EC1328()
{
  uint64_t v2 = *v1;
  *(void *)(*v1 + 176) = v0;
  swift_task_dealloc();
  if (v0)
  {
    swift_bridgeObjectRelease();
    swift_release();
    uint64_t v3 = *(void *)(v2 + 160);
    uint64_t v4 = sub_100EC1478;
  }
  else
  {
    uint64_t v5 = *(void *)(v2 + 144);
    swift_bridgeObjectRelease();
    swift_release();
    uint64_t v4 = sub_10045A44C;
    uint64_t v3 = v5;
  }
  return _swift_task_switch(v4, v3, 0);
}

uint64_t sub_100EC1478()
{
  return _swift_task_switch(sub_100EC1494, *(void *)(v0 + 144), 0);
}

uint64_t sub_100EC1494()
{
  swift_release();
  if (qword_101637170 != -1) {
    swift_once();
  }
  uint64_t v1 = type metadata accessor for Logger();
  sub_100010324(v1, (uint64_t)qword_10170EE50);
  swift_errorRetain();
  swift_errorRetain();
  uint64_t v2 = Logger.logObject.getter();
  os_log_type_t v3 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v2, v3))
  {
    uint64_t v4 = (uint8_t *)swift_slowAlloc();
    uint64_t v5 = (void *)swift_slowAlloc();
    *(_DWORD *)uint64_t v4 = 138543362;
    swift_errorRetain();
    uint64_t v6 = _swift_stdlib_bridgeErrorToNSError();
    *(void *)(v0 + 136) = v6;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *uint64_t v5 = v6;
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl((void *)&_mh_execute_header, v2, v3, "Own device publish activity failed: %{public}@.", v4, 0xCu);
    sub_10000588C((uint64_t *)&unk_101638EA0);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    swift_errorRelease();
  }
  else
  {
    swift_errorRelease();
    swift_errorRelease();
    swift_errorRelease();
  }
  uint64_t v7 = *(uint64_t (**)(void))(v0 + 8);
  return v7();
}

uint64_t sub_100EC1698()
{
  swift_release();
  swift_release();
  swift_release();
  swift_defaultActor_destroy();

  return _swift_defaultActor_deallocate(v0);
}

uint64_t type metadata accessor for LocatableStateMonitor()
{
  return self;
}

void *sub_100EC1704()
{
  uint64_t v1 = v0;
  swift_defaultActor_initialize();
  sub_10000588C(&qword_1016552B0);
  uint64_t v2 = swift_allocObject();
  *(_OWORD *)(v2 + 16) = xmmword_101342130;
  if (qword_101637178 != -1) {
    swift_once();
  }
  uint64_t v3 = *(void *)algn_101661E78;
  *(void *)(v2 + 32) = qword_101661E70;
  *(void *)(v2 + 40) = v3;
  type metadata accessor for DarwinNotificationHelper();
  swift_allocObject();
  swift_bridgeObjectRetain();
  v1[14] = DarwinNotificationHelper.init(subscribedToNames:)();
  if (qword_101636CD8 != -1) {
    swift_once();
  }
  OS_dispatch_queue.sync<A>(execute:)();
  sub_1010AC698(v5);
  swift_bridgeObjectRelease();
  sub_10000588C(&qword_101654000);
  v1[15] = AsyncKeyedThrottle.__allocating_init(throttleInterval:)();
  v1[16] = 0;
  return v1;
}

uint64_t sub_100EC1878()
{
  swift_release();

  return _swift_deallocObject(v0, 32, 7);
}

uint64_t sub_100EC18B0(uint64_t a1)
{
  return sub_100EC07C4(a1, *(void *)(v1 + 16), *(void *)(v1 + 24));
}

unint64_t sub_100EC18B8()
{
  unint64_t result = qword_101661F98;
  if (!qword_101661F98)
  {
    type metadata accessor for LocatableStateMonitor();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_101661F98);
  }
  return result;
}

uint64_t sub_100EC190C()
{
  return sub_1006F0EE8(48);
}

uint64_t sub_100EC1914()
{
  uint64_t v2 = swift_task_alloc();
  long long v3 = *(_OWORD *)(v0 + 32);
  *(void *)(v1 + 16) = v2;
  *(void *)uint64_t v2 = v1;
  *(void *)(v2 + 8) = sub_10001D2E4;
  *(_OWORD *)(v2 + 32) = v3;
  return _swift_task_switch(sub_100EC08FC, v3, 0);
}

uint64_t sub_100EC19C0()
{
  uint64_t v2 = *(void *)(v0 + 16);
  long long v3 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v3;
  *long long v3 = v1;
  v3[1] = sub_10013067C;
  v3[2] = v2;
  return _swift_task_switch(sub_100EC0AB4, 0, 0);
}

uint64_t sub_100EC1A68()
{
  return sub_1006F0EE8(40);
}

uint64_t sub_100EC1A70(uint64_t a1)
{
  uint64_t v4 = v1[2];
  uint64_t v5 = v1[3];
  uint64_t v6 = (void *)v1[4];
  uint64_t v7 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v7;
  *uint64_t v7 = v2;
  v7[1] = sub_100033F68;
  return sub_100EC03A4(a1, v4, v5, v6);
}

uint64_t sub_100EC1B24()
{
  swift_release();

  return _swift_deallocObject(v0, 32, 7);
}

uint64_t sub_100EC1B60(uint64_t a1)
{
  uint64_t v1 = 1 << *(unsigned char *)(a1 + 32);
  uint64_t v2 = -1;
  if (v1 < 64) {
    uint64_t v2 = ~(-1 << v1);
  }
  unint64_t v3 = v2 & *(void *)(a1 + 64);
  int64_t v24 = (unint64_t)(v1 + 63) >> 6;
  uint64_t result = swift_bridgeObjectRetain();
  int64_t v5 = 0;
  uint64_t v6 = _swiftEmptyArrayStorage;
  if (!v3) {
    goto LABEL_5;
  }
LABEL_4:
  unint64_t v7 = __clz(__rbit64(v3));
  v3 &= v3 - 1;
  for (unint64_t i = v7 | (v5 << 6); ; unint64_t i = __clz(__rbit64(v10)) + (v5 << 6))
  {
    uint64_t v12 = (uint64_t *)(*(void *)(a1 + 48) + 16 * i);
    uint64_t v14 = *v12;
    unint64_t v13 = v12[1];
    uint64_t v15 = (uint64_t *)(*(void *)(a1 + 56) + 32 * i);
    uint64_t v16 = *v15;
    unint64_t v17 = v15[1];
    uint64_t v18 = v15[2];
    unint64_t v19 = v15[3];
    sub_1000361E0(*v12, v13);
    sub_1000361E0(v14, v13);
    sub_1000361E0(v16, v17);
    sub_1000361E0(v18, v19);
    sub_10001CFB8(v14, v13);
    sub_10001CFB8(v16, v17);
    sub_10001CFB8(v18, v19);
    uint64_t result = swift_isUniquelyReferenced_nonNull_native();
    if ((result & 1) == 0)
    {
      uint64_t result = (uint64_t)sub_100A6EA38(0, v6[2] + 1, 1, v6);
      uint64_t v6 = (void *)result;
    }
    unint64_t v21 = v6[2];
    unint64_t v20 = v6[3];
    if (v21 >= v20 >> 1)
    {
      uint64_t result = (uint64_t)sub_100A6EA38((void *)(v20 > 1), v21 + 1, 1, v6);
      uint64_t v6 = (void *)result;
    }
    v6[2] = v21 + 1;
    uint64_t v22 = &v6[2 * v21];
    v22[4] = v14;
    v22[5] = v13;
    if (v3) {
      goto LABEL_4;
    }
LABEL_5:
    int64_t v9 = v5 + 1;
    if (__OFADD__(v5, 1))
    {
      __break(1u);
      goto LABEL_29;
    }
    if (v9 >= v24) {
      goto LABEL_27;
    }
    unint64_t v10 = *(void *)(v23 + 8 * v9);
    ++v5;
    if (!v10)
    {
      int64_t v5 = v9 + 1;
      if (v9 + 1 >= v24) {
        goto LABEL_27;
      }
      unint64_t v10 = *(void *)(v23 + 8 * v5);
      if (!v10)
      {
        int64_t v5 = v9 + 2;
        if (v9 + 2 >= v24) {
          goto LABEL_27;
        }
        unint64_t v10 = *(void *)(v23 + 8 * v5);
        if (!v10)
        {
          int64_t v5 = v9 + 3;
          if (v9 + 3 >= v24) {
            goto LABEL_27;
          }
          unint64_t v10 = *(void *)(v23 + 8 * v5);
          if (!v10) {
            break;
          }
        }
      }
    }
LABEL_20:
    unint64_t v3 = (v10 - 1) & v10;
  }
  int64_t v11 = v9 + 4;
  if (v11 >= v24)
  {
LABEL_27:
    swift_release();
    return (uint64_t)v6;
  }
  unint64_t v10 = *(void *)(v23 + 8 * v11);
  if (v10)
  {
    int64_t v5 = v11;
    goto LABEL_20;
  }
  while (1)
  {
    int64_t v5 = v11 + 1;
    if (__OFADD__(v11, 1)) {
      break;
    }
    if (v5 >= v24) {
      goto LABEL_27;
    }
    unint64_t v10 = *(void *)(v23 + 8 * v5);
    ++v11;
    if (v10) {
      goto LABEL_20;
    }
  }
LABEL_29:
  __break(1u);
  return result;
}

void *sub_100EC1DD8()
{
  unint64_t v21 = _swiftEmptyArrayStorage;
  uint64_t v22 = _swiftEmptyArrayStorage;
  type metadata accessor for FetchRequestBeacon(0);
  uint64_t v0 = swift_bridgeObjectRetain();
  sub_100EC9664(v0, (void (*)(uint64_t, unint64_t, uint64_t, uint64_t))sub_100ECAB90);
  swift_bridgeObjectRelease();
  v20[0] = v22;
  swift_bridgeObjectRetain_n();
  sub_100EC34DC(v20);
  swift_bridgeObjectRelease();
  uint64_t v1 = v20[0];
  int64_t v2 = v20[0][2];
  if (v2)
  {
    v20[0] = _swiftEmptyArrayStorage;
    sub_1000B6ED0(0, v2, 0);
    unint64_t v3 = v20[0];
    uint64_t v4 = v1 + 5;
    do
    {
      uint64_t v6 = *(v4 - 1);
      uint64_t v5 = *v4;
      v20[0] = v3;
      unint64_t v7 = v3[2];
      unint64_t v8 = v3[3];
      swift_bridgeObjectRetain();
      if (v7 >= v8 >> 1)
      {
        sub_1000B6ED0(v8 > 1, v7 + 1, 1);
        unint64_t v3 = v20[0];
      }
      v4 += 3;
      v3[2] = v7 + 1;
      int64_t v9 = &v3[2 * v7];
      v9[4] = v6;
      v9[5] = v5;
      --v2;
    }
    while (v2);
    swift_release();
  }
  else
  {
    swift_release();
    unint64_t v3 = _swiftEmptyArrayStorage;
  }
  v20[0] = v21;
  swift_bridgeObjectRetain_n();
  sub_100EC34DC(v20);
  swift_bridgeObjectRelease();
  unint64_t v10 = v20[0];
  int64_t v11 = v20[0][2];
  if (v11)
  {
    v20[0] = _swiftEmptyArrayStorage;
    sub_1000B6ED0(0, v11, 0);
    uint64_t v12 = v20[0];
    unint64_t v13 = v10 + 5;
    do
    {
      uint64_t v15 = *(v13 - 1);
      uint64_t v14 = *v13;
      v20[0] = v12;
      unint64_t v16 = v12[2];
      unint64_t v17 = v12[3];
      swift_bridgeObjectRetain();
      if (v16 >= v17 >> 1)
      {
        sub_1000B6ED0(v17 > 1, v16 + 1, 1);
        uint64_t v12 = v20[0];
      }
      v13 += 3;
      v12[2] = v16 + 1;
      uint64_t v18 = &v12[2 * v16];
      v18[4] = v15;
      v18[5] = v14;
      --v11;
    }
    while (v11);
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  return v3;
}

uint64_t sub_100EC2050@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v6 = sub_10000588C(&qword_101650938);
  uint64_t v7 = __chkstk_darwin(v6 - 8);
  int64_t v9 = (char *)&v28 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v7);
  int64_t v11 = (char *)&v28 - v10;
  if (static UUID.== infix(_:_:)())
  {
    RequestBeacon = (int *)type metadata accessor for FetchRequestBeacon(0);
    sub_100EC5C98(v2 + RequestBeacon[5], a1 + RequestBeacon[5], (uint64_t)v11);
    sub_100EC5C98(v2 + RequestBeacon[6], a1 + RequestBeacon[6], (uint64_t)v9);
    uint64_t v13 = RequestBeacon[7];
    uint64_t v14 = *(void *)(v2 + v13);
    uint64_t v15 = *(void *)(a1 + v13);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v30 = v14;
    sub_100EC9020(v15, (uint64_t)sub_100EC9510, 0, isUniquelyReferenced_nonNull_native, &v30);
    if (v3)
    {
      uint64_t result = swift_bridgeObjectRelease();
      __break(1u);
    }
    else
    {
      uint64_t v29 = v30;
      swift_bridgeObjectRelease();
      uint64_t v17 = RequestBeacon[9];
      uint64_t v18 = *(void *)(v2 + v17);
      uint64_t v19 = *(void *)(a1 + v17);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      char v20 = swift_isUniquelyReferenced_nonNull_native();
      uint64_t v30 = v18;
      sub_100EC8DD8(v19, (uint64_t)sub_100EC94A8, 0, v20, &v30);
      uint64_t v21 = v30;
      swift_bridgeObjectRelease();
      uint64_t v22 = type metadata accessor for UUID();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v22 - 8) + 16))(a2, v2, v22);
      uint64_t v23 = (char *)(v2 + RequestBeacon[8]);
      char v24 = *v23;
      LOBYTE(v18) = v23[1];
      uint64_t v25 = *((void *)v23 + 1);
      sub_100EC9534((uint64_t)v11, a2 + RequestBeacon[5]);
      uint64_t result = sub_100EC9534((uint64_t)v9, a2 + RequestBeacon[6]);
      *(void *)(a2 + RequestBeacon[7]) = v29;
      uint64_t v27 = a2 + RequestBeacon[8];
      *(unsigned char *)uint64_t v27 = v24;
      *(unsigned char *)(v27 + 1) = v18;
      *(void *)(v27 + 8) = v25;
      *(void *)(a2 + RequestBeacon[9]) = v21;
    }
  }
  else
  {
    sub_100EC22F4();
    swift_allocError();
    return swift_willThrow();
  }
  return result;
}

unint64_t sub_100EC22F4()
{
  unint64_t result = qword_101661FE0;
  if (!qword_101661FE0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_101661FE0);
  }
  return result;
}

uint64_t type metadata accessor for FetchRequestBeacon(uint64_t a1)
{
  return sub_1000F4EA4(a1, (uint64_t *)&unk_1016620F8);
}

uint64_t sub_100EC2368@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, unint64_t a5@<X4>, unint64_t a6@<X5>, int a7@<W6>, int a8@<W7>, uint64_t a9@<X8>, uint64_t a10, uint64_t a11)
{
  int v119 = a8;
  int v124 = a7;
  uint64_t v117 = a1;
  uint64_t v118 = a9;
  uint64_t v17 = 0;
  uint64_t v18 = sub_10000588C(&qword_101650938);
  uint64_t v19 = __chkstk_darwin(v18 - 8);
  uint64_t v21 = (char *)&v116 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v19);
  unint64_t v23 = (unint64_t)&v116 - v22;
  uint64_t v130 = type metadata accessor for HashAlgorithm();
  v125 = *(void (***)(char *, uint64_t))(v130 - 8);
  __chkstk_darwin(v130);
  v129 = (char *)&v116 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v133 = type metadata accessor for TimeBasedKey();
  __chkstk_darwin(v133);
  unint64_t v134 = (unint64_t)&v116 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  unint64_t v27 = (a6 >> 1) - a5;
  unint64_t v122 = v23;
  v123 = v21;
  uint64_t v120 = a3;
  unint64_t v121 = a2;
  if (a6 >> 1 == a5)
  {
    uint64_t v28 = &_swiftEmptyDictionarySingleton;
  }
  else
  {
    if ((uint64_t)(a6 >> 1) <= (uint64_t)a5) {
      goto LABEL_71;
    }
    uint64_t v29 = *(void (***)(char *, void, uint64_t))(v25 + 72);
    LODWORD(v132) = enum case for HashAlgorithm.sha256(_:);
    v131 = (unint64_t *)(v125 + 13);
    v127 = v125 + 1;
    swift_unknownObjectRetain();
    v126 = v29;
    uint64_t v30 = a4 + (void)v29 * a5;
    v128 = &_swiftEmptyDictionarySingleton;
    unint64_t v23 = v134;
    while (2)
    {
      sub_100ECAA64(v30, v23, (uint64_t (*)(void))type metadata accessor for TimeBasedKey);
      unint64_t v32 = v23 + *(int *)(v133 + 24);
      uint64_t v33 = *(void *)(v32 + 16);
      a6 = *(void *)(v32 + 24);
      sub_1000361E0(v33, a6);
      uint64_t v34 = sub_100A948F8(v33, a6);
      uint64_t isUniquelyReferenced_nonNull_native = sub_100A90C58(v34, 0);
      a5 = v35;
      CCECCryptorRelease();
      sub_10001CFB8(v33, a6);
      unint64_t v25 = a5 >> 62;
      switch(a5 >> 62)
      {
        case 1uLL:
          LODWORD(v36) = HIDWORD(isUniquelyReferenced_nonNull_native) - isUniquelyReferenced_nonNull_native;
          if (__OFSUB__(HIDWORD(isUniquelyReferenced_nonNull_native), isUniquelyReferenced_nonNull_native)) {
            goto LABEL_69;
          }
          uint64_t v36 = (int)v36;
LABEL_14:
          if (v36 != 28) {
            goto LABEL_76;
          }
          a2 = 0;
          uint64_t v40 = v130;
          uint64_t v41 = v129;
          ((void (*)(char *, void, uint64_t))*v131)(v129, v132, v130);
          uint64_t v17 = Data.hash(algorithm:)();
          a6 = v42;
          (*v127)(v41, v40);
          sub_10001CFB8(isUniquelyReferenced_nonNull_native, a5);
          unint64_t v23 = *(void *)v23;
          uint64_t v43 = v128;
          uint64_t isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
          v136 = v43;
          unint64_t v45 = sub_100724D9C(v17, a6);
          unint64_t v25 = v43[2];
          BOOL v46 = (v44 & 1) == 0;
          uint64_t v47 = v25 + v46;
          if (__OFADD__(v25, v46)) {
            goto LABEL_64;
          }
          a5 = v44;
          if (v43[3] >= v47)
          {
            if ((isUniquelyReferenced_nonNull_native & 1) == 0) {
              sub_100E843E8();
            }
          }
          else
          {
            sub_100E71C80(v47, isUniquelyReferenced_nonNull_native);
            uint64_t v48 = sub_100724D9C(v17, a6);
            if ((a5 & 1) != (v49 & 1))
            {
LABEL_96:
              KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
              __break(1u);
LABEL_97:
              uint64_t v115 = 0;
              goto LABEL_98;
            }
            unint64_t v45 = v48;
          }
          unint64_t v50 = v136;
          v128 = v136;
          if (a5)
          {
            uint64_t v31 = v136[7] + 16 * v45;
            *(void *)uint64_t v31 = v23;
            *(unsigned char *)(v31 + 8) = v124;
          }
          else
          {
            v136[(v45 >> 6) + 8] |= 1 << v45;
            uint64_t v51 = (uint64_t *)(v50[6] + 16 * v45);
            *uint64_t v51 = v17;
            v51[1] = a6;
            uint64_t v52 = v50[7] + 16 * v45;
            *(void *)uint64_t v52 = v23;
            *(unsigned char *)(v52 + 8) = v124;
            uint64_t v53 = v50[2];
            BOOL v39 = __OFADD__(v53, 1);
            unint64_t v25 = v53 + 1;
            if (v39) {
              goto LABEL_66;
            }
            v50[2] = v25;
            sub_1000361E0(v17, a6);
          }
          swift_bridgeObjectRelease();
          sub_10001CFB8(v17, a6);
          unint64_t v23 = v134;
          sub_100ECAACC(v134, (uint64_t (*)(void))type metadata accessor for TimeBasedKey);
          v30 += (uint64_t)v126;
          --v27;
          uint64_t v17 = 0;
          if (v27) {
            continue;
          }
          swift_unknownObjectRelease();
          unint64_t v23 = v122;
          uint64_t v21 = v123;
          a2 = v121;
          uint64_t v28 = v128;
          break;
        case 2uLL:
          uint64_t v38 = *(void *)(isUniquelyReferenced_nonNull_native + 16);
          uint64_t v37 = *(void *)(isUniquelyReferenced_nonNull_native + 24);
          BOOL v39 = __OFSUB__(v37, v38);
          uint64_t v36 = v37 - v38;
          if (!v39) {
            goto LABEL_14;
          }
          goto LABEL_70;
        case 3uLL:
          goto LABEL_97;
        default:
          uint64_t v36 = BYTE6(a5);
          goto LABEL_14;
      }
      break;
    }
  }
  v128 = v28;
  a6 = *(void *)(a11 + 16);
  if (a6)
  {
    LODWORD(v127) = enum case for HashAlgorithm.sha256(_:);
    uint64_t v54 = (void (**)(char *, void, uint64_t))(v125 + 13);
    ++v125;
    v126 = v54;
    swift_bridgeObjectRetain();
    uint64_t v116 = a11;
    uint64_t v55 = (unint64_t *)(a11 + 56);
    uint64_t v56 = &_swiftEmptyDictionarySingleton;
    while (2)
    {
      uint64_t isUniquelyReferenced_nonNull_native = *(v55 - 3);
      a5 = *(v55 - 2);
      uint64_t v61 = *(v55 - 1);
      unint64_t v60 = *v55;
      sub_1000361E0(isUniquelyReferenced_nonNull_native, a5);
      unint64_t v134 = v60;
      sub_1000361E0(v61, v60);
      sub_1000361E0(isUniquelyReferenced_nonNull_native, a5);
      uint64_t v62 = sub_100A948F8(isUniquelyReferenced_nonNull_native, a5);
      if (v17)
      {
        uint64_t v132 = v17;
        static os_log_type_t.error.getter();
        if (qword_101636F48 != -1) {
          swift_once();
        }
        sub_10000588C((uint64_t *)&unk_10163AD00);
        uint64_t v105 = swift_allocObject();
        *(_OWORD *)(v105 + 16) = xmmword_101342130;
        v136 = (void *)v132;
        swift_errorRetain();
        sub_10000588C(&qword_101638D40);
        uint64_t v106 = String.init<A>(describing:)();
        uint64_t v108 = v107;
        *(void *)(v105 + 56) = &type metadata for String;
        *(void *)(v105 + 64) = sub_10000B4CC();
        *(void *)(v105 + 32) = v106;
        *(void *)(v105 + 40) = v108;
        os_log(_:dso:log:_:_:)();
        swift_bridgeObjectRelease();
        sub_100130148();
        uint64_t v109 = swift_allocError();
        *unint64_t v110 = 0;
        swift_willThrow();
        swift_errorRelease();
        a2 = a5;
        unint64_t v23 = isUniquelyReferenced_nonNull_native;
        goto LABEL_95;
      }
      uint64_t v63 = sub_100A90C58(v62, 0);
      uint64_t v132 = 0;
      unint64_t v23 = v63;
      a2 = v64;
      uint64_t v65 = v55 + 4;
      CCECCryptorRelease();
      sub_10001CFB8(isUniquelyReferenced_nonNull_native, a5);
      unint64_t v25 = a2 >> 62;
      uint64_t v133 = a6;
      switch(a2 >> 62)
      {
        case 1uLL:
          LODWORD(v66) = HIDWORD(v23) - v23;
          if (__OFSUB__(HIDWORD(v23), v23)) {
            goto LABEL_67;
          }
          uint64_t v66 = (int)v66;
LABEL_37:
          v131 = v65;
          if (v66 != 28) {
            goto LABEL_72;
          }
          a6 = (unint64_t)v56;
          Swift::String v69 = v129;
          uint64_t v70 = v130;
          (*v126)(v129, v127, v130);
          uint64_t v17 = Data.hash(algorithm:)();
          unint64_t v72 = v71;
          (*v125)(v69, v70);
          sub_10001CFB8(v23, a2);
          sub_1000361E0(isUniquelyReferenced_nonNull_native, a5);
          sub_1000361E0(v61, v134);
          char v73 = swift_isUniquelyReferenced_nonNull_native();
          v136 = (void *)a6;
          unint64_t v23 = sub_100724D9C(v17, v72);
          unint64_t v25 = *(void *)(a6 + 16);
          BOOL v75 = (v74 & 1) == 0;
          uint64_t v76 = v25 + v75;
          if (__OFADD__(v25, v75))
          {
            __break(1u);
LABEL_64:
            __break(1u);
LABEL_65:
            __break(1u);
LABEL_66:
            __break(1u);
LABEL_67:
            __break(1u);
LABEL_68:
            __break(1u);
LABEL_69:
            __break(1u);
LABEL_70:
            __break(1u);
LABEL_71:
            __break(1u);
LABEL_72:
            if (v25 != 1) {
              goto LABEL_80;
            }
            LODWORD(v25) = HIDWORD(v23) - v23;
            if (!__OFSUB__(HIDWORD(v23), v23))
            {
              while (1)
              {
                a5 = (int)v25;
LABEL_94:
                sub_10013019C();
                uint64_t v109 = swift_allocError();
                *(void *)uint64_t v111 = 28;
                *(void *)(v111 + 8) = a5;
                *(unsigned char *)(v111 + 16) = 0;
                swift_willThrow();
LABEL_95:
                sub_10001CFB8(v23, a2);
                v136 = 0;
                unint64_t v137 = 0xE000000000000000;
                _StringGuts.grow(_:)(35);
                v112._object = (void *)0x80000001013F3B70;
                v112._countAndFlagsBits = 0xD000000000000021;
                String.append(_:)(v112);
                uint64_t v135 = v109;
LABEL_100:
                sub_10000588C(&qword_101638D40);
                _print_unlocked<A, B>(_:_:)();
                _assertionFailure(_:_:file:line:flags:)();
                __break(1u);
              }
            }
            __break(1u);
LABEL_76:
            if (v25 == 1)
            {
              LODWORD(v25) = HIDWORD(isUniquelyReferenced_nonNull_native) - isUniquelyReferenced_nonNull_native;
              if (!__OFSUB__(HIDWORD(isUniquelyReferenced_nonNull_native), isUniquelyReferenced_nonNull_native))
              {
                uint64_t v115 = (int)v25;
                goto LABEL_98;
              }
              __break(1u);
LABEL_80:
              if (v25 != 2)
              {
                a5 = BYTE6(a2);
                goto LABEL_94;
              }
              uint64_t v97 = *(void *)(v23 + 16);
              unint64_t v25 = *(void *)(v23 + 24);
              a5 = v25 - v97;
              if (!__OFSUB__(v25, v97)) {
                goto LABEL_94;
              }
              __break(1u);
            }
            if (v25 != 2)
            {
              uint64_t v115 = BYTE6(a5);
              goto LABEL_98;
            }
            uint64_t v99 = *(void *)(isUniquelyReferenced_nonNull_native + 16);
            uint64_t v98 = *(void *)(isUniquelyReferenced_nonNull_native + 24);
            uint64_t v115 = v98 - v99;
            if (__OFSUB__(v98, v99))
            {
              __break(1u);
              a2 = v17;
              static os_log_type_t.error.getter();
              if (qword_101636F48 != -1) {
                swift_once();
              }
              sub_10000588C((uint64_t *)&unk_10163AD00);
              uint64_t v100 = swift_allocObject();
              *(_OWORD *)(v100 + 16) = xmmword_101342130;
              v136 = (void *)v17;
              swift_errorRetain();
              sub_10000588C(&qword_101638D40);
              unint64_t v23 = String.init<A>(describing:)();
              uint64_t v102 = v101;
              *(void *)(v100 + 56) = &type metadata for String;
              *(void *)(v100 + 64) = sub_10000B4CC();
              *(void *)(v100 + 32) = v23;
              *(void *)(v100 + 40) = v102;
              os_log(_:dso:log:_:_:)();
              swift_bridgeObjectRelease();
              sub_100130148();
              uint64_t v103 = swift_allocError();
              *uint64_t v104 = 0;
              swift_willThrow();
              swift_errorRelease();
              a5 = a6;
              uint64_t isUniquelyReferenced_nonNull_native = v115;
            }
            else
            {
LABEL_98:
              sub_10013019C();
              uint64_t v103 = swift_allocError();
              *(void *)uint64_t v113 = 28;
              *(void *)(v113 + 8) = v115;
              *(unsigned char *)(v113 + 16) = 0;
              swift_willThrow();
            }
            sub_10001CFB8(isUniquelyReferenced_nonNull_native, a5);
            v136 = 0;
            unint64_t v137 = 0xE000000000000000;
            _StringGuts.grow(_:)(35);
            v114._object = (void *)0x80000001013F3B70;
            v114._countAndFlagsBits = 0xD000000000000021;
            String.append(_:)(v114);
            uint64_t v135 = v103;
            goto LABEL_100;
          }
          a2 = v74;
          if (*(void *)(a6 + 24) >= v76)
          {
            a6 = v133;
            if (v73)
            {
              uint64_t v56 = v136;
              if (v74) {
                goto LABEL_27;
              }
            }
            else
            {
              sub_100E841F8();
              uint64_t v56 = v136;
              if (a2) {
                goto LABEL_27;
              }
            }
          }
          else
          {
            sub_100E71910(v76, v73);
            uint64_t v77 = sub_100724D9C(v17, v72);
            a6 = v133;
            if ((a2 & 1) != (v78 & 1)) {
              goto LABEL_96;
            }
            unint64_t v23 = v77;
            uint64_t v56 = v136;
            if (a2)
            {
LABEL_27:
              uint64_t v57 = (uint64_t *)(v56[7] + 32 * v23);
              uint64_t v58 = v57[2];
              unint64_t v59 = v57[3];
              sub_10001CFB8(*v57, v57[1]);
              sub_10001CFB8(v58, v59);
              uint64_t *v57 = isUniquelyReferenced_nonNull_native;
              v57[1] = a5;
              unint64_t v23 = v134;
              v57[2] = v61;
              v57[3] = v23;
              goto LABEL_28;
            }
          }
          v56[(v23 >> 6) + 8] |= 1 << v23;
          uint64_t v79 = (uint64_t *)(v56[6] + 16 * v23);
          *uint64_t v79 = v17;
          v79[1] = v72;
          int64_t v80 = (uint64_t *)(v56[7] + 32 * v23);
          *int64_t v80 = isUniquelyReferenced_nonNull_native;
          v80[1] = a5;
          unint64_t v23 = v134;
          v80[2] = v61;
          v80[3] = v23;
          uint64_t v81 = v56[2];
          BOOL v39 = __OFADD__(v81, 1);
          unint64_t v25 = v81 + 1;
          if (v39) {
            goto LABEL_65;
          }
          v56[2] = v25;
          sub_1000361E0(v17, v72);
LABEL_28:
          swift_bridgeObjectRelease();
          sub_10001CFB8(v17, v72);
          sub_10001CFB8(isUniquelyReferenced_nonNull_native, a5);
          sub_10001CFB8(v61, v23);
          --a6;
          uint64_t v55 = v131;
          uint64_t v17 = v132;
          if (a6) {
            continue;
          }
          swift_bridgeObjectRelease();
          unint64_t v23 = v122;
          uint64_t v21 = v123;
          a2 = v121;
          break;
        case 2uLL:
          uint64_t v68 = *(void *)(v23 + 16);
          uint64_t v67 = *(void *)(v23 + 24);
          BOOL v39 = __OFSUB__(v67, v68);
          uint64_t v66 = v67 - v68;
          if (!v39) {
            goto LABEL_37;
          }
          goto LABEL_68;
        case 3uLL:
          a5 = 0;
          goto LABEL_94;
        default:
          uint64_t v66 = BYTE6(a2);
          goto LABEL_37;
      }
      break;
    }
  }
  else
  {
    uint64_t v56 = &_swiftEmptyDictionarySingleton;
  }
  swift_bridgeObjectRelease();
  if (!(_BYTE)v124)
  {
    swift_bridgeObjectRelease();
    goto LABEL_55;
  }
  char v82 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  if (v82)
  {
LABEL_55:
    uint64_t v84 = type metadata accessor for DateInterval();
    uint64_t v85 = *(void *)(v84 - 8);
    (*(void (**)(unint64_t, unint64_t, uint64_t))(v85 + 16))(v23, a2, v84);
    (*(void (**)(unint64_t, void, uint64_t, uint64_t))(v85 + 56))(v23, 0, 1, v84);
    goto LABEL_56;
  }
  uint64_t v83 = type metadata accessor for DateInterval();
  (*(void (**)(unint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v83 - 8) + 56))(v23, 1, 1, v83);
LABEL_56:
  if ((_BYTE)v124 && v124 == 1)
  {
    swift_unknownObjectRelease();
    swift_bridgeObjectRelease();
  }
  else
  {
    char v86 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_unknownObjectRelease();
    swift_bridgeObjectRelease();
    if ((v86 & 1) == 0)
    {
      uint64_t v89 = type metadata accessor for DateInterval();
      uint64_t v90 = *(void *)(v89 - 8);
      (*(void (**)(unint64_t, uint64_t))(v90 + 8))(a2, v89);
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v90 + 56))(v21, 1, 1, v89);
      goto LABEL_62;
    }
  }
  uint64_t v87 = type metadata accessor for DateInterval();
  uint64_t v88 = *(void *)(v87 - 8);
  (*(void (**)(char *, unint64_t, uint64_t))(v88 + 32))(v21, a2, v87);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v88 + 56))(v21, 0, 1, v87);
LABEL_62:
  RequestBeacon = (int *)type metadata accessor for FetchRequestBeacon(0);
  uint64_t v92 = v118;
  sub_100EC9534(v23, v118 + RequestBeacon[5]);
  sub_100EC9534((uint64_t)v21, v92 + RequestBeacon[6]);
  uint64_t v93 = type metadata accessor for UUID();
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v93 - 8) + 32))(v92, v117, v93);
  *(void *)(v92 + RequestBeacon[7]) = v128;
  uint64_t v95 = v92 + RequestBeacon[8];
  char v96 = BYTE1(v119);
  *(unsigned char *)uint64_t v95 = v119;
  *(unsigned char *)(v95 + 1) = v96 & 1;
  *(void *)(v95 + 8) = a10;
  *(void *)(v92 + RequestBeacon[9]) = v56;
  return result;
}

uint64_t sub_100EC33C8(uint64_t a1, uint64_t a2, void *a3)
{
  _StringGuts.grow(_:)(57);
  v5._countAndFlagsBits = 0xD000000000000022;
  v5._object = (void *)0x8000000101419A60;
  String.append(_:)(v5);
  _print_unlocked<A, B>(_:_:)();
  v6._object = (void *)0x8000000101419A90;
  v6._countAndFlagsBits = 0xD000000000000012;
  String.append(_:)(v6);
  if (a3)
  {
    uint64_t v7 = a3;
  }
  else
  {
    a2 = 0x74657320746F6ELL;
    uint64_t v7 = (void *)0xE700000000000000;
  }
  swift_bridgeObjectRetain();
  v8._countAndFlagsBits = a2;
  v8._object = v7;
  String.append(_:)(v8);
  swift_bridgeObjectRelease();
  v9._countAndFlagsBits = 93;
  v9._object = (void *)0xE100000000000000;
  String.append(_:)(v9);
  return 0;
}

Swift::Int sub_100EC34DC(void **a1)
{
  uint64_t v2 = *a1;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    uint64_t v2 = (void *)sub_100B73750(v2);
  }
  uint64_t v3 = v2[2];
  v5[0] = (uint64_t)(v2 + 4);
  v5[1] = v3;
  Swift::Int result = sub_100EC8404(v5);
  *a1 = v2;
  return result;
}

uint64_t sub_100EC3548()
{
  uint64_t v0 = type metadata accessor for JSONEncoder.DateEncodingStrategy();
  sub_10001E384(v0, qword_101661FC8);
  uint64_t v1 = (void *)sub_100010324(v0, (uint64_t)qword_101661FC8);
  *uint64_t v1 = sub_1003B9190;
  v1[1] = 0;
  uint64_t v2 = *(uint64_t (**)(void))(*(void *)(v0 - 8) + 104);

  return v2();
}

uint64_t sub_100EC35E4(char *a1, char *a2)
{
  return sub_10071D584(*a1, *a2);
}

Swift::Int sub_100EC35F0()
{
  return Hasher._finalize()();
}

uint64_t sub_100EC3684()
{
  String.hash(into:)();

  return swift_bridgeObjectRelease();
}

Swift::Int sub_100EC3704()
{
  return Hasher._finalize()();
}

uint64_t sub_100EC3794@<X0>(Swift::String *a1@<X0>, char *a2@<X8>)
{
  Swift::Int v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_1015A3780, *a1);
  uint64_t result = swift_bridgeObjectRelease();
  if (v3 == 1) {
    char v5 = 1;
  }
  else {
    char v5 = 2;
  }
  if (!v3) {
    char v5 = 0;
  }
  *a2 = v5;
  return result;
}

void sub_100EC37F4(uint64_t *a1@<X8>)
{
  uint64_t v2 = 0x6F4C74736574616CLL;
  if (*v1) {
    uint64_t v2 = 0x6974737561687865;
  }
  unint64_t v3 = 0xEE006E6F69746163;
  if (*v1) {
    unint64_t v3 = 0xEA00000000006576;
  }
  *a1 = v2;
  a1[1] = v3;
}

uint64_t sub_100EC3844()
{
  return RawRepresentable<>.encode(to:)();
}

uint64_t sub_100EC3894()
{
  _StringGuts.grow(_:)(52);
  v0._object = (void *)0x8000000101419A40;
  v0._countAndFlagsBits = 0xD00000000000001CLL;
  String.append(_:)(v0);
  v1._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  String.append(_:)(v1);
  swift_bridgeObjectRelease();
  v2._countAndFlagsBits = 0x203A65646F6D202CLL;
  v2._object = (void *)0xE800000000000000;
  String.append(_:)(v2);
  _print_unlocked<A, B>(_:_:)();
  v3._countAndFlagsBits = 0x203A65676170202CLL;
  v3._object = (void *)0xE800000000000000;
  String.append(_:)(v3);
  v4._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  String.append(_:)(v4);
  swift_bridgeObjectRelease();
  v5._countAndFlagsBits = 23854;
  v5._object = (void *)0xE200000000000000;
  String.append(_:)(v5);
  return 0;
}

uint64_t sub_100EC39DC(void *a1, __int16 a2)
{
  char v3 = HIBYTE(a2);
  uint64_t v5 = sub_10000588C(&qword_101662260);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  Swift::String v8 = (char *)&v10 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10001CD44(a1, a1[3]);
  sub_100ECE0B8();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  char v14 = 0;
  KeyedEncodingContainer.encode(_:forKey:)();
  if (!v2)
  {
    char v13 = v3 & 1;
    char v12 = 1;
    sub_100ECE10C();
    KeyedEncodingContainer.encode<A>(_:forKey:)();
    char v11 = 2;
    KeyedEncodingContainer.encode(_:forKey:)();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
}

uint64_t sub_100EC3B84()
{
  uint64_t v1 = 1701080941;
  if (*v0 != 1) {
    uint64_t v1 = 1701273968;
  }
  if (*v0) {
    return v1;
  }
  else {
    return 0x72617069746C756DLL;
  }
}

uint64_t sub_100EC3BDC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_100ECDD88(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_100EC3C04(uint64_t a1)
{
  unint64_t v2 = sub_100ECE0B8();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_100EC3C40(uint64_t a1)
{
  unint64_t v2 = sub_100ECE0B8();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_100EC3C7C(void *a1)
{
  if (v1[1]) {
    __int16 v2 = 256;
  }
  else {
    __int16 v2 = 0;
  }
  return sub_100EC39DC(a1, v2 | *v1);
}

uint64_t sub_100EC3CB0()
{
  return sub_100EC3894();
}

uint64_t sub_100EC3CD0(unsigned __int8 *a1, char *a2)
{
  return sub_10071D63C(*a1, *a2);
}

Swift::Int sub_100EC3CDC()
{
  return Hasher._finalize()();
}

uint64_t sub_100EC3DE4()
{
  String.hash(into:)();

  return swift_bridgeObjectRelease();
}

Swift::Int sub_100EC3ED4()
{
  return Hasher._finalize()();
}

unint64_t sub_100EC3FD8@<X0>(Swift::String *a1@<X0>, unsigned char *a2@<X8>)
{
  unint64_t result = sub_100ECD364(*a1);
  *a2 = result;
  return result;
}

void sub_100EC4008(uint64_t a1@<X8>)
{
  unint64_t v2 = 0xE900000000000065;
  uint64_t v3 = 0x7461447472617473;
  switch(*v1)
  {
    case 1:
      unint64_t v2 = 0xE700000000000000;
      uint64_t v3 = 0x65746144646E65;
      goto LABEL_3;
    case 2:
      *(void *)a1 = 7562345;
      *(void *)(a1 + 8) = 0xE300000000000000;
      break;
    case 3:
      strcpy((char *)a1, "secondaryIds");
      *(unsigned char *)(a1 + 13) = 0;
      *(_WORD *)(a1 + 14) = -5120;
      break;
    case 4:
      strcpy((char *)a1, "searchContext");
      *(_WORD *)(a1 + 14) = -4864;
      break;
    default:
LABEL_3:
      *(void *)a1 = v3;
      *(void *)(a1 + 8) = v2;
      break;
  }
}

uint64_t sub_100EC40D4()
{
  uint64_t result = 0x7461447472617473;
  switch(*v0)
  {
    case 1:
      uint64_t result = 0x65746144646E65;
      break;
    case 2:
      uint64_t result = 7562345;
      break;
    case 3:
      uint64_t result = 0x7261646E6F636573;
      break;
    case 4:
      uint64_t result = 0x6F43686372616573;
      break;
    default:
      return result;
  }
  return result;
}

unint64_t sub_100EC4190@<X0>(Swift::String a1@<X1:X0>, unsigned char *a2@<X8>)
{
  unint64_t result = sub_100ECD364(a1);
  *a2 = result;
  return result;
}

uint64_t sub_100EC41B8(uint64_t a1)
{
  unint64_t v2 = sub_100ECD4A4();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_100EC41F4(uint64_t a1)
{
  unint64_t v2 = sub_100ECD4A4();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_100EC4230@<X0>(uint64_t a1@<X0>, unint64_t *a2@<X8>)
{
  v165 = a2;
  uint64_t v3 = type metadata accessor for Date();
  uint64_t v163 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  v162 = (char *)&v156 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = sub_10000588C(&qword_101650938);
  uint64_t v6 = __chkstk_darwin(v5 - 8);
  uint64_t v160 = (uint64_t)&v156 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  uint64_t v164 = (uint64_t)&v156 - v8;
  uint64_t v9 = type metadata accessor for DateInterval();
  uint64_t v166 = *(void *)(v9 - 8);
  uint64_t v167 = v9;
  uint64_t v10 = __chkstk_darwin(v9);
  v158 = (char *)&v156 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v10);
  v157 = (char *)&v156 - v12;
  unint64_t v175 = 0xD000000000000014;
  unint64_t v176 = 0x8000000101419980;
  RequestBeacon = (int *)type metadata accessor for FetchRequestBeacon(0);
  uint64_t v169 = a1;
  uint64_t v161 = RequestBeacon[7];
  uint64_t v13 = *(void *)(a1 + v161);
  uint64_t v14 = *(void *)(v13 + 64);
  uint64_t v171 = v13 + 64;
  uint64_t v15 = 1 << *(unsigned char *)(v13 + 32);
  uint64_t v16 = -1;
  if (v15 < 64) {
    uint64_t v16 = ~(-1 << v15);
  }
  unint64_t v17 = v16 & v14;
  int64_t v18 = (unint64_t)(v15 + 63) >> 6;
  uint64_t v177 = v13;
  uint64_t result = swift_bridgeObjectRetain();
  int64_t v20 = 0;
  countAndFlagsBits = _swiftEmptyArrayStorage;
  if (v17) {
    goto LABEL_7;
  }
LABEL_8:
  int64_t v25 = v20 + 1;
  uint64_t v26 = v171;
  if (__OFADD__(v20, 1))
  {
    __break(1u);
LABEL_177:
    __break(1u);
LABEL_178:
    __break(1u);
    goto LABEL_179;
  }
  if (v25 < v18)
  {
    unint64_t v27 = *(void *)(v171 + 8 * v25);
    ++v20;
    if (v27) {
      goto LABEL_25;
    }
    int64_t v20 = v25 + 1;
    if (v25 + 1 >= v18) {
      goto LABEL_35;
    }
    unint64_t v27 = *(void *)(v171 + 8 * v20);
    if (v27) {
      goto LABEL_25;
    }
    int64_t v20 = v25 + 2;
    if (v25 + 2 >= v18) {
      goto LABEL_35;
    }
    unint64_t v27 = *(void *)(v171 + 8 * v20);
    if (v27) {
      goto LABEL_25;
    }
    int64_t v20 = v25 + 3;
    if (v25 + 3 >= v18) {
      goto LABEL_35;
    }
    unint64_t v27 = *(void *)(v171 + 8 * v20);
    if (v27) {
      goto LABEL_25;
    }
    int64_t v20 = v25 + 4;
    if (v25 + 4 >= v18) {
      goto LABEL_35;
    }
    unint64_t v27 = *(void *)(v171 + 8 * v20);
    if (v27)
    {
LABEL_25:
      unint64_t v17 = (v27 - 1) & v27;
      for (unint64_t i = __clz(__rbit64(v27)) + (v20 << 6); ; unint64_t i = v23 | (v20 << 6))
      {
        uint64_t v29 = *(void *)(v177 + 56) + 16 * i;
        uint64_t v30 = *(void *)v29;
        int v31 = *(unsigned __int8 *)(v29 + 8);
        if (v31 == 1 || v31 == 2)
        {
          char v22 = _stringCompareWithSmolCheck(_:_:expecting:)();
          uint64_t result = swift_bridgeObjectRelease();
          if ((v22 & 1) == 0)
          {
            if (!v17) {
              goto LABEL_8;
            }
            goto LABEL_7;
          }
        }
        else
        {
          swift_bridgeObjectRelease();
        }
        uint64_t result = swift_isUniquelyReferenced_nonNull_native();
        v174._countAndFlagsBits = (uint64_t)countAndFlagsBits;
        if ((result & 1) == 0)
        {
          uint64_t result = sub_1000B8604(0, countAndFlagsBits[2] + 1, 1);
          countAndFlagsBits = (void *)v174._countAndFlagsBits;
        }
        unint64_t v33 = countAndFlagsBits[2];
        unint64_t v32 = countAndFlagsBits[3];
        if (v33 >= v32 >> 1)
        {
          uint64_t result = sub_1000B8604(v32 > 1, v33 + 1, 1);
          countAndFlagsBits = (void *)v174._countAndFlagsBits;
        }
        countAndFlagsBits[2] = v33 + 1;
        uint64_t v34 = &countAndFlagsBits[2 * v33];
        v34[4] = v30;
        *((unsigned char *)v34 + 40) = v31;
        if (!v17) {
          goto LABEL_8;
        }
LABEL_7:
        unint64_t v23 = __clz(__rbit64(v17));
        v17 &= v17 - 1;
      }
    }
    int64_t v28 = v25 + 5;
    if (v28 < v18)
    {
      unint64_t v27 = *(void *)(v171 + 8 * v28);
      if (v27)
      {
        int64_t v20 = v28;
        goto LABEL_25;
      }
      while (1)
      {
        int64_t v20 = v28 + 1;
        if (__OFADD__(v28, 1)) {
          goto LABEL_180;
        }
        if (v20 >= v18) {
          break;
        }
        unint64_t v27 = *(void *)(v171 + 8 * v20);
        ++v28;
        if (v27) {
          goto LABEL_25;
        }
      }
    }
  }
LABEL_35:
  uint64_t v159 = v3;
  swift_release();
  uint64_t v35 = countAndFlagsBits[2];
  if (!v35)
  {
LABEL_84:
    swift_release();
    goto LABEL_85;
  }
  unint64_t v36 = countAndFlagsBits[4];
  char v37 = *((unsigned char *)countAndFlagsBits + 40);
  uint64_t v38 = v35 - 1;
  if (v38)
  {
    BOOL v39 = countAndFlagsBits + 7;
    do
    {
      unint64_t v40 = *((void *)v39 - 1);
      char v42 = *v39;
      v39 += 16;
      char v41 = v42;
      if (v40 < v36)
      {
        unint64_t v36 = v40;
        char v37 = v41;
      }
      --v38;
    }
    while (v38);
  }
  swift_release();
  uint64_t v43 = 1 << *(unsigned char *)(v177 + 32);
  uint64_t v44 = -1;
  if (v43 < 64) {
    uint64_t v44 = ~(-1 << v43);
  }
  unint64_t v45 = v44 & *(void *)(v177 + 64);
  int64_t v170 = (unint64_t)(v43 + 63) >> 6;
  uint64_t result = swift_bridgeObjectRetain();
  int64_t v46 = 0;
  uint64_t v47 = _swiftEmptyArrayStorage;
  if (v45) {
    goto LABEL_47;
  }
LABEL_48:
  int64_t v51 = v46 + 1;
  if (__OFADD__(v46, 1)) {
    goto LABEL_178;
  }
  uint64_t v26 = v171;
  if (v51 < v170)
  {
    unint64_t v52 = *(void *)(v171 + 8 * v51);
    ++v46;
    if (v52) {
      goto LABEL_65;
    }
    int64_t v46 = v51 + 1;
    if (v51 + 1 >= v170) {
      goto LABEL_75;
    }
    unint64_t v52 = *(void *)(v171 + 8 * v46);
    if (v52) {
      goto LABEL_65;
    }
    int64_t v46 = v51 + 2;
    if (v51 + 2 >= v170) {
      goto LABEL_75;
    }
    unint64_t v52 = *(void *)(v171 + 8 * v46);
    if (v52) {
      goto LABEL_65;
    }
    int64_t v46 = v51 + 3;
    if (v51 + 3 >= v170) {
      goto LABEL_75;
    }
    unint64_t v52 = *(void *)(v171 + 8 * v46);
    if (v52) {
      goto LABEL_65;
    }
    int64_t v46 = v51 + 4;
    if (v51 + 4 >= v170) {
      goto LABEL_75;
    }
    unint64_t v52 = *(void *)(v171 + 8 * v46);
    if (v52)
    {
LABEL_65:
      unint64_t v45 = (v52 - 1) & v52;
      for (unint64_t j = __clz(__rbit64(v52)) + (v46 << 6); ; unint64_t j = v49 | (v46 << 6))
      {
        uint64_t v54 = *(void *)(v177 + 56) + 16 * j;
        uint64_t v55 = *(void *)v54;
        int v56 = *(unsigned __int8 *)(v54 + 8);
        if (v56 == 1 || v56 == 2)
        {
          char v48 = _stringCompareWithSmolCheck(_:_:expecting:)();
          uint64_t result = swift_bridgeObjectRelease();
          if ((v48 & 1) == 0)
          {
            if (!v45) {
              goto LABEL_48;
            }
            goto LABEL_47;
          }
        }
        else
        {
          swift_bridgeObjectRelease();
        }
        uint64_t result = swift_isUniquelyReferenced_nonNull_native();
        v174._countAndFlagsBits = (uint64_t)v47;
        if ((result & 1) == 0)
        {
          uint64_t result = sub_1000B8604(0, v47[2] + 1, 1);
          uint64_t v47 = (void *)v174._countAndFlagsBits;
        }
        unint64_t v58 = v47[2];
        unint64_t v57 = v47[3];
        if (v58 >= v57 >> 1)
        {
          uint64_t result = sub_1000B8604(v57 > 1, v58 + 1, 1);
          uint64_t v47 = (void *)v174._countAndFlagsBits;
        }
        v47[2] = v58 + 1;
        unint64_t v59 = &v47[2 * v58];
        v59[4] = v55;
        *((unsigned char *)v59 + 40) = v56;
        if (!v45) {
          goto LABEL_48;
        }
LABEL_47:
        unint64_t v49 = __clz(__rbit64(v45));
        v45 &= v45 - 1;
      }
    }
    int64_t v53 = v51 + 5;
    if (v53 < v170)
    {
      unint64_t v52 = *(void *)(v171 + 8 * v53);
      if (!v52)
      {
        while (1)
        {
          int64_t v46 = v53 + 1;
          if (__OFADD__(v53, 1)) {
            goto LABEL_182;
          }
          if (v46 >= v170) {
            goto LABEL_75;
          }
          unint64_t v52 = *(void *)(v171 + 8 * v46);
          ++v53;
          if (v52) {
            goto LABEL_65;
          }
        }
      }
      int64_t v46 = v53;
      goto LABEL_65;
    }
  }
LABEL_75:
  swift_release();
  uint64_t v60 = v47[2];
  if (!v60) {
    goto LABEL_84;
  }
  unint64_t v61 = v47[4];
  char v62 = *((unsigned char *)v47 + 40);
  uint64_t v63 = v60 - 1;
  if (v63)
  {
    unint64_t v64 = v47 + 7;
    do
    {
      unint64_t v65 = *((void *)v64 - 1);
      BOOL v66 = v61 >= v65;
      char v68 = *v64;
      v64 += 16;
      char v67 = v68;
      if (v61 <= v65) {
        unint64_t v61 = v65;
      }
      if (!v66) {
        char v62 = v67;
      }
      --v63;
    }
    while (v63);
  }
  swift_release();
  v174._countAndFlagsBits = 0;
  v174._object = (void *)0xE000000000000000;
  _StringGuts.grow(_:)(26);
  v69._countAndFlagsBits = 0xD000000000000013;
  v69._object = (void *)0x80000001014199A0;
  String.append(_:)(v69);
  unint64_t v172 = v36;
  char v173 = v37;
  sub_10000588C(&qword_101661FE8);
  _print_unlocked<A, B>(_:_:)();
  v70._countAndFlagsBits = 45;
  v70._object = (void *)0xE100000000000000;
  String.append(_:)(v70);
  unint64_t v172 = v61;
  char v173 = v62;
  _print_unlocked<A, B>(_:_:)();
  v71._countAndFlagsBits = 8236;
  v71._object = (void *)0xE200000000000000;
  String.append(_:)(v71);
  String.append(_:)(v174);
  swift_bridgeObjectRelease();
LABEL_85:
  uint64_t v72 = 1 << *(unsigned char *)(v177 + 32);
  uint64_t v73 = -1;
  if (v72 < 64) {
    uint64_t v73 = ~(-1 << v72);
  }
  unint64_t v74 = v73 & *(void *)(v177 + 64);
  int64_t v75 = (unint64_t)(v72 + 63) >> 6;
  uint64_t result = swift_bridgeObjectRetain();
  int64_t v76 = 0;
  uint64_t v77 = _swiftEmptyArrayStorage;
  if (v74) {
    goto LABEL_91;
  }
LABEL_92:
  int64_t v81 = v76 + 1;
  if (__OFADD__(v76, 1)) {
    goto LABEL_177;
  }
  if (v81 >= v75) {
    goto LABEL_119;
  }
  unint64_t v82 = *(void *)(v26 + 8 * v81);
  ++v76;
  if (v82) {
    goto LABEL_109;
  }
  int64_t v76 = v81 + 1;
  if (v81 + 1 >= v75) {
    goto LABEL_119;
  }
  unint64_t v82 = *(void *)(v26 + 8 * v76);
  if (v82) {
    goto LABEL_109;
  }
  int64_t v76 = v81 + 2;
  if (v81 + 2 >= v75) {
    goto LABEL_119;
  }
  unint64_t v82 = *(void *)(v26 + 8 * v76);
  if (v82) {
    goto LABEL_109;
  }
  int64_t v76 = v81 + 3;
  if (v81 + 3 >= v75) {
    goto LABEL_119;
  }
  unint64_t v82 = *(void *)(v26 + 8 * v76);
  if (v82) {
    goto LABEL_109;
  }
  int64_t v76 = v81 + 4;
  if (v81 + 4 >= v75) {
    goto LABEL_119;
  }
  unint64_t v82 = *(void *)(v26 + 8 * v76);
  if (v82)
  {
LABEL_109:
    unint64_t v74 = (v82 - 1) & v82;
    for (unint64_t k = __clz(__rbit64(v82)) + (v76 << 6); ; unint64_t k = v79 | (v76 << 6))
    {
      uint64_t v84 = *(void *)(v177 + 56) + 16 * k;
      uint64_t v85 = *(void *)v84;
      int v86 = *(unsigned __int8 *)(v84 + 8);
      if (!*(unsigned char *)(v84 + 8) || v86 == 2)
      {
        char v78 = _stringCompareWithSmolCheck(_:_:expecting:)();
        uint64_t result = swift_bridgeObjectRelease();
        if ((v78 & 1) == 0)
        {
          if (!v74) {
            goto LABEL_92;
          }
          goto LABEL_91;
        }
      }
      else
      {
        swift_bridgeObjectRelease();
      }
      uint64_t result = swift_isUniquelyReferenced_nonNull_native();
      v174._countAndFlagsBits = (uint64_t)v77;
      if ((result & 1) == 0)
      {
        uint64_t result = sub_1000B8604(0, v77[2] + 1, 1);
        uint64_t v77 = (void *)v174._countAndFlagsBits;
      }
      unint64_t v88 = v77[2];
      unint64_t v87 = v77[3];
      if (v88 >= v87 >> 1)
      {
        uint64_t result = sub_1000B8604(v87 > 1, v88 + 1, 1);
        uint64_t v77 = (void *)v174._countAndFlagsBits;
      }
      v77[2] = v88 + 1;
      uint64_t v89 = &v77[2 * v88];
      v89[4] = v85;
      *((unsigned char *)v89 + 40) = v86;
      if (!v74) {
        goto LABEL_92;
      }
LABEL_91:
      unint64_t v79 = __clz(__rbit64(v74));
      v74 &= v74 - 1;
    }
  }
  int64_t v83 = v81 + 5;
  if (v83 < v75)
  {
    unint64_t v82 = *(void *)(v26 + 8 * v83);
    if (!v82)
    {
      while (1)
      {
        int64_t v76 = v83 + 1;
        if (__OFADD__(v83, 1)) {
          goto LABEL_181;
        }
        if (v76 >= v75) {
          goto LABEL_119;
        }
        unint64_t v82 = *(void *)(v26 + 8 * v76);
        ++v83;
        if (v82) {
          goto LABEL_109;
        }
      }
    }
    int64_t v76 = v83;
    goto LABEL_109;
  }
LABEL_119:
  swift_release();
  uint64_t v90 = v77[2];
  if (!v90) {
    goto LABEL_168;
  }
  unint64_t v91 = v77[4];
  char v92 = *((unsigned char *)v77 + 40);
  uint64_t v93 = v90 - 1;
  if (v93)
  {
    v94 = v77 + 7;
    do
    {
      unint64_t v95 = *((void *)v94 - 1);
      char v97 = *v94;
      v94 += 16;
      char v96 = v97;
      if (v95 < v91)
      {
        unint64_t v91 = v95;
        char v92 = v96;
      }
      --v93;
    }
    while (v93);
  }
  swift_release();
  uint64_t v98 = 1 << *(unsigned char *)(v177 + 32);
  uint64_t v99 = -1;
  if (v98 < 64) {
    uint64_t v99 = ~(-1 << v98);
  }
  unint64_t v100 = v99 & *(void *)(v177 + 64);
  int64_t v170 = (unint64_t)(v98 + 63) >> 6;
  uint64_t result = swift_bridgeObjectRetain();
  int64_t v101 = 0;
  uint64_t v102 = _swiftEmptyArrayStorage;
  if (v100) {
    goto LABEL_131;
  }
LABEL_132:
  int64_t v106 = v101 + 1;
  if (__OFADD__(v101, 1))
  {
LABEL_179:
    __break(1u);
LABEL_180:
    __break(1u);
LABEL_181:
    __break(1u);
LABEL_182:
    __break(1u);
LABEL_183:
    __break(1u);
    return result;
  }
  if (v106 >= v170) {
    goto LABEL_159;
  }
  unint64_t v107 = *(void *)(v171 + 8 * v106);
  ++v101;
  if (v107) {
    goto LABEL_149;
  }
  int64_t v101 = v106 + 1;
  if (v106 + 1 >= v170) {
    goto LABEL_159;
  }
  unint64_t v107 = *(void *)(v171 + 8 * v101);
  if (v107) {
    goto LABEL_149;
  }
  int64_t v101 = v106 + 2;
  if (v106 + 2 >= v170) {
    goto LABEL_159;
  }
  unint64_t v107 = *(void *)(v171 + 8 * v101);
  if (v107) {
    goto LABEL_149;
  }
  int64_t v101 = v106 + 3;
  if (v106 + 3 >= v170) {
    goto LABEL_159;
  }
  unint64_t v107 = *(void *)(v171 + 8 * v101);
  if (v107) {
    goto LABEL_149;
  }
  int64_t v101 = v106 + 4;
  if (v106 + 4 >= v170) {
    goto LABEL_159;
  }
  unint64_t v107 = *(void *)(v171 + 8 * v101);
  if (v107)
  {
LABEL_149:
    unint64_t v100 = (v107 - 1) & v107;
    for (unint64_t m = __clz(__rbit64(v107)) + (v101 << 6); ; unint64_t m = v104 | (v101 << 6))
    {
      uint64_t v109 = *(void *)(v177 + 56) + 16 * m;
      uint64_t v110 = *(void *)v109;
      int v111 = *(unsigned __int8 *)(v109 + 8);
      if (!*(unsigned char *)(v109 + 8) || v111 == 2)
      {
        char v103 = _stringCompareWithSmolCheck(_:_:expecting:)();
        uint64_t result = swift_bridgeObjectRelease();
        if ((v103 & 1) == 0)
        {
          if (!v100) {
            goto LABEL_132;
          }
          goto LABEL_131;
        }
      }
      else
      {
        swift_bridgeObjectRelease();
      }
      uint64_t result = swift_isUniquelyReferenced_nonNull_native();
      v174._countAndFlagsBits = (uint64_t)v102;
      if ((result & 1) == 0)
      {
        uint64_t result = sub_1000B8604(0, v102[2] + 1, 1);
        uint64_t v102 = (void *)v174._countAndFlagsBits;
      }
      unint64_t v113 = v102[2];
      unint64_t v112 = v102[3];
      if (v113 >= v112 >> 1)
      {
        uint64_t result = sub_1000B8604(v112 > 1, v113 + 1, 1);
        uint64_t v102 = (void *)v174._countAndFlagsBits;
      }
      v102[2] = v113 + 1;
      Swift::String v114 = &v102[2 * v113];
      v114[4] = v110;
      *((unsigned char *)v114 + 40) = v111;
      if (!v100) {
        goto LABEL_132;
      }
LABEL_131:
      unint64_t v104 = __clz(__rbit64(v100));
      v100 &= v100 - 1;
    }
  }
  int64_t v108 = v106 + 5;
  if (v108 < v170)
  {
    unint64_t v107 = *(void *)(v171 + 8 * v108);
    if (!v107)
    {
      while (1)
      {
        int64_t v101 = v108 + 1;
        if (__OFADD__(v108, 1)) {
          goto LABEL_183;
        }
        if (v101 >= v170) {
          goto LABEL_159;
        }
        unint64_t v107 = *(void *)(v171 + 8 * v101);
        ++v108;
        if (v107) {
          goto LABEL_149;
        }
      }
    }
    int64_t v101 = v108;
    goto LABEL_149;
  }
LABEL_159:
  swift_release();
  uint64_t v115 = v102[2];
  if (v115)
  {
    unint64_t v116 = v102[4];
    char v117 = *((unsigned char *)v102 + 40);
    uint64_t v118 = v115 - 1;
    if (v118)
    {
      int v119 = v102 + 7;
      do
      {
        unint64_t v120 = *((void *)v119 - 1);
        BOOL v121 = v116 >= v120;
        char v123 = *v119;
        v119 += 16;
        char v122 = v123;
        if (v116 <= v120) {
          unint64_t v116 = v120;
        }
        if (!v121) {
          char v117 = v122;
        }
        --v118;
      }
      while (v118);
    }
    swift_release();
    v174._countAndFlagsBits = 0;
    v174._object = (void *)0xE000000000000000;
    _StringGuts.grow(_:)(28);
    v124._object = (void *)0x80000001014199C0;
    v124._countAndFlagsBits = 0xD000000000000015;
    String.append(_:)(v124);
    unint64_t v172 = v91;
    char v173 = v92;
    sub_10000588C(&qword_101661FE8);
    _print_unlocked<A, B>(_:_:)();
    v125._countAndFlagsBits = 45;
    v125._object = (void *)0xE100000000000000;
    String.append(_:)(v125);
    unint64_t v172 = v116;
    char v173 = v117;
    _print_unlocked<A, B>(_:_:)();
    v126._countAndFlagsBits = 8236;
    v126._object = (void *)0xE200000000000000;
    String.append(_:)(v126);
    String.append(_:)(v174);
    swift_bridgeObjectRelease();
    goto LABEL_169;
  }
LABEL_168:
  swift_release();
LABEL_169:
  uint64_t v127 = v164;
  sub_100EC959C(v169 + RequestBeacon[5], v164);
  uint64_t v128 = v166;
  uint64_t v129 = v167;
  uint64_t v130 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v166 + 48);
  int v131 = v130(v127, 1, v167);
  uint64_t v132 = v159;
  if (v131 == 1)
  {
    sub_10001DAB4(v127, &qword_101650938);
  }
  else
  {
    uint64_t v133 = v157;
    (*(void (**)(char *, uint64_t, uint64_t))(v128 + 32))(v157, v127, v129);
    v174._countAndFlagsBits = 0;
    v174._object = (void *)0xE000000000000000;
    _StringGuts.grow(_:)(30);
    swift_bridgeObjectRelease();
    v174._countAndFlagsBits = 0xD000000000000015;
    v174._object = (void *)0x8000000101419A20;
    unint64_t v134 = v162;
    DateInterval.start.getter();
    sub_100EC9604((unint64_t *)&qword_101638DA0, (void (*)(uint64_t))&type metadata accessor for Date);
    v135._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v135);
    swift_bridgeObjectRelease();
    v136 = *(void (**)(char *, uint64_t))(v163 + 8);
    v136(v134, v132);
    v137._countAndFlagsBits = 2108704;
    v137._object = (void *)0xE300000000000000;
    String.append(_:)(v137);
    DateInterval.end.getter();
    v138._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v138);
    swift_bridgeObjectRelease();
    v136(v134, v132);
    v139._countAndFlagsBits = 8236;
    v139._object = (void *)0xE200000000000000;
    String.append(_:)(v139);
    String.append(_:)(v174);
    uint64_t v128 = v166;
    uint64_t v129 = v167;
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v128 + 8))(v133, v129);
  }
  uint64_t v140 = v160;
  sub_100EC959C(v169 + RequestBeacon[6], v160);
  if (v130(v140, 1, v129) == 1)
  {
    sub_10001DAB4(v140, &qword_101650938);
  }
  else
  {
    v141 = v158;
    (*(void (**)(char *, uint64_t, uint64_t))(v128 + 32))(v158, v140, v129);
    v174._countAndFlagsBits = 0;
    v174._object = (void *)0xE000000000000000;
    _StringGuts.grow(_:)(32);
    swift_bridgeObjectRelease();
    v174._countAndFlagsBits = 0xD000000000000017;
    v174._object = (void *)0x8000000101419A00;
    v142 = v162;
    DateInterval.start.getter();
    sub_100EC9604((unint64_t *)&qword_101638DA0, (void (*)(uint64_t))&type metadata accessor for Date);
    v143._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v143);
    swift_bridgeObjectRelease();
    v144 = *(void (**)(char *, uint64_t))(v163 + 8);
    v144(v142, v132);
    v145._countAndFlagsBits = 2108704;
    v145._object = (void *)0xE300000000000000;
    String.append(_:)(v145);
    DateInterval.end.getter();
    v146._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v146);
    swift_bridgeObjectRelease();
    v144(v142, v132);
    v147._countAndFlagsBits = 8236;
    v147._object = (void *)0xE200000000000000;
    String.append(_:)(v147);
    String.append(_:)(v174);
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v128 + 8))(v141, v129);
  }
  v174._countAndFlagsBits = 0x203A736469;
  v174._object = (void *)0xE500000000000000;
  uint64_t v148 = v169;
  unint64_t v172 = *(void *)(*(void *)(v169 + v161) + 16);
  v149._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  String.append(_:)(v149);
  swift_bridgeObjectRelease();
  v150._countAndFlagsBits = 8236;
  v150._object = (void *)0xE200000000000000;
  String.append(_:)(v150);
  String.append(_:)(v174);
  swift_bridgeObjectRelease();
  v174._countAndFlagsBits = 0;
  v174._object = (void *)0xE000000000000000;
  _StringGuts.grow(_:)(17);
  swift_bridgeObjectRelease();
  v174._countAndFlagsBits = 0x6F43686372616573;
  v174._object = (void *)0xEF203A747865746ELL;
  v151 = RequestBeacon;
  v152._countAndFlagsBits = sub_100EC3894();
  String.append(_:)(v152);
  swift_bridgeObjectRelease();
  String.append(_:)(v174);
  swift_bridgeObjectRelease();
  v174._countAndFlagsBits = 0;
  v174._object = (void *)0xE000000000000000;
  _StringGuts.grow(_:)(18);
  swift_bridgeObjectRelease();
  v174._countAndFlagsBits = 0xD000000000000010;
  v174._object = (void *)0x80000001014199E0;
  unint64_t v172 = *(void *)(*(void *)(v148 + v151[9]) + 16);
  v153._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  String.append(_:)(v153);
  swift_bridgeObjectRelease();
  String.append(_:)(v174);
  uint64_t result = swift_bridgeObjectRelease();
  unint64_t v154 = v176;
  v155 = v165;
  unint64_t *v165 = v175;
  v155[1] = v154;
  return result;
}

uint64_t sub_100EC5574(uint64_t a1, uint64_t a2, uint64_t a3, char a4, uint64_t *a5, uint64_t *a6)
{
  if (a4)
  {
    if (a4 != 1) {
      return result;
    }
    sub_1001D780C();
    uint64_t v8 = RawRepresentable<>.base64EncodedString(options:)();
    uint64_t v10 = v9;
    uint64_t v11 = (void *)*a6;
    uint64_t result = swift_isUniquelyReferenced_nonNull_native();
    *a6 = (uint64_t)v11;
    if ((result & 1) == 0)
    {
      uint64_t result = (uint64_t)sub_100A72428(0, v11[2] + 1, 1, v11);
      uint64_t v11 = (void *)result;
      *a6 = result;
    }
    unint64_t v14 = v11[2];
    unint64_t v13 = v11[3];
    if (v14 >= v13 >> 1)
    {
      uint64_t result = (uint64_t)sub_100A72428((void *)(v13 > 1), v14 + 1, 1, v11);
      uint64_t v11 = (void *)result;
      *a6 = result;
    }
    v11[2] = v14 + 1;
    uint64_t v15 = &v11[3 * v14];
    v15[4] = v8;
    v15[5] = v10;
  }
  else
  {
    sub_1001D780C();
    uint64_t v17 = RawRepresentable<>.base64EncodedString(options:)();
    uint64_t v19 = v18;
    int64_t v20 = (void *)*a5;
    uint64_t result = swift_isUniquelyReferenced_nonNull_native();
    *a5 = (uint64_t)v20;
    if ((result & 1) == 0)
    {
      uint64_t result = (uint64_t)sub_100A72428(0, v20[2] + 1, 1, v20);
      int64_t v20 = (void *)result;
      *a5 = result;
    }
    unint64_t v22 = v20[2];
    unint64_t v21 = v20[3];
    if (v22 >= v21 >> 1)
    {
      uint64_t result = (uint64_t)sub_100A72428((void *)(v21 > 1), v22 + 1, 1, v20);
      int64_t v20 = (void *)result;
      *a5 = result;
    }
    v20[2] = v22 + 1;
    uint64_t v15 = &v20[3 * v22];
    v15[4] = v17;
    v15[5] = v19;
  }
  v15[6] = a3;
  return result;
}

uint64_t sub_100EC571C(void *a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = sub_10000588C((uint64_t *)&unk_10163AC90);
  uint64_t v5 = __chkstk_darwin(v4 - 8);
  int v31 = (char *)&v30 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5);
  uint64_t v8 = (char *)&v30 - v7;
  uint64_t v9 = sub_10000588C(&qword_101650938);
  __chkstk_darwin(v9 - 8);
  uint64_t v11 = (char *)&v30 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = type metadata accessor for DateInterval();
  uint64_t v13 = *(void *)(v12 - 8);
  __chkstk_darwin(v12);
  uint64_t v35 = (char *)&v30 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v36 = sub_10000588C(&qword_1016621D8);
  uint64_t v33 = *(void *)(v36 - 8);
  __chkstk_darwin(v36);
  uint64_t v16 = (char *)&v30 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10001CD44(a1, a1[3]);
  sub_100ECD4A4();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  uint64_t RequestBeacon = type metadata accessor for FetchRequestBeacon(0);
  uint64_t v18 = *(int *)(RequestBeacon + 24);
  uint64_t v19 = v2 + *(int *)(RequestBeacon + 20);
  uint64_t v32 = v2;
  sub_100EC5C98(v19, v2 + v18, (uint64_t)v11);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v13 + 48))(v11, 1, v12) == 1)
  {
    uint64_t v20 = v36;
    uint64_t v21 = v34;
    sub_10001DAB4((uint64_t)v11, &qword_101650938);
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v13 + 32))(v35, v11, v12);
    DateInterval.start.getter();
    uint64_t v25 = type metadata accessor for Date();
    uint64_t v30 = *(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v25 - 8) + 56);
    v30(v8, 0, 1, v25);
    LOBYTE(v38) = 0;
    sub_100EC9604((unint64_t *)&unk_10163ACE0, (void (*)(uint64_t))&type metadata accessor for Date);
    uint64_t v26 = v34;
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)();
    uint64_t v21 = v26;
    if (v26)
    {
      sub_10001DAB4((uint64_t)v8, (uint64_t *)&unk_10163AC90);
      (*(void (**)(char *, uint64_t))(v13 + 8))(v35, v12);
      return (*(uint64_t (**)(char *, uint64_t))(v33 + 8))(v16, v36);
    }
    uint64_t v34 = v12;
    sub_10001DAB4((uint64_t)v8, (uint64_t *)&unk_10163AC90);
    unint64_t v27 = v31;
    DateInterval.end.getter();
    v30(v27, 0, 1, v25);
    LOBYTE(v38) = 1;
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)();
    uint64_t v29 = (uint64_t)v27;
    uint64_t v20 = v36;
    sub_10001DAB4(v29, (uint64_t *)&unk_10163AC90);
    (*(void (**)(char *, uint64_t))(v13 + 8))(v35, v34);
  }
  unint64_t v22 = sub_100EC1DD8();
  uint64_t v24 = v23;
  if (v22[2]
    && (uint64_t v38 = v22,
        char v37 = 2,
        sub_10000588C(&qword_101654A30),
        sub_100176E3C(),
        KeyedEncodingContainer.encode<A>(_:forKey:)(),
        v21))
  {
    (*(void (**)(char *, uint64_t))(v33 + 8))(v16, v20);
    swift_bridgeObjectRelease();
  }
  else
  {
    swift_bridgeObjectRelease();
    if (v24[2])
    {
      uint64_t v38 = v24;
      char v37 = 3;
      sub_10000588C(&qword_101654A30);
      sub_100176E3C();
      KeyedEncodingContainer.encode<A>(_:forKey:)();
    }
    (*(void (**)(char *, uint64_t))(v33 + 8))(v16, v20);
  }
  return swift_bridgeObjectRelease();
}

uint64_t sub_100EC5C98@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v75 = a3;
  uint64_t v5 = type metadata accessor for Date();
  char v68 = *(void **)(v5 - 8);
  uint64_t v69 = v5;
  uint64_t v6 = __chkstk_darwin(v5);
  char v67 = (char *)v59 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = __chkstk_darwin(v6);
  Swift::String v71 = (char *)v59 - v9;
  uint64_t v10 = __chkstk_darwin(v8);
  BOOL v66 = (char *)v59 - v11;
  uint64_t v12 = __chkstk_darwin(v10);
  unint64_t v65 = (char *)v59 - v13;
  uint64_t v14 = __chkstk_darwin(v12);
  Swift::String v70 = (char *)v59 - v15;
  uint64_t v16 = __chkstk_darwin(v14);
  char v62 = (char *)v59 - v17;
  uint64_t v18 = __chkstk_darwin(v16);
  unint64_t v61 = (char *)v59 - v19;
  __chkstk_darwin(v18);
  uint64_t v73 = (char *)v59 - v20;
  uint64_t v21 = type metadata accessor for DateInterval();
  uint64_t v22 = *(void *)(v21 - 8);
  uint64_t v23 = __chkstk_darwin(v21);
  uint64_t v72 = (char *)v59 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v23);
  unint64_t v74 = (char *)v59 - v25;
  uint64_t v26 = sub_10000588C(&qword_101650938);
  uint64_t v27 = __chkstk_darwin(v26 - 8);
  unint64_t v64 = (char *)v59 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v29 = __chkstk_darwin(v27);
  int v31 = (char *)v59 - v30;
  uint64_t v32 = __chkstk_darwin(v29);
  uint64_t v34 = (char *)v59 - v33;
  __chkstk_darwin(v32);
  uint64_t v36 = (char *)v59 - v35;
  uint64_t v63 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v22 + 56);
  v63((char *)v59 - v35, 1, 1, v21);
  char v37 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v22 + 48);
  if (v37(a1, 1, v21) == 1)
  {
    sub_10001DAB4((uint64_t)v36, &qword_101650938);
    uint64_t v38 = a2;
    return sub_100EC959C(v38, v75);
  }
  if (v37(a2, 1, v21) == 1)
  {
    sub_10001DAB4((uint64_t)v36, &qword_101650938);
    uint64_t v38 = a1;
    return sub_100EC959C(v38, v75);
  }
  sub_100EC959C(a1, (uint64_t)v34);
  if (v37((uint64_t)v34, 1, v21) == 1)
  {
    sub_10001DAB4((uint64_t)v34, &qword_101650938);
  }
  else
  {
    unint64_t v40 = v34;
    char v41 = *(void (**)(char *, char *, uint64_t))(v22 + 32);
    v41(v74, v40, v21);
    sub_100EC959C(a2, (uint64_t)v31);
    if (v37((uint64_t)v31, 1, v21) == 1)
    {
      (*(void (**)(char *, uint64_t))(v22 + 8))(v74, v21);
      sub_10001DAB4((uint64_t)v31, &qword_101650938);
    }
    else
    {
      v41(v72, v31, v21);
      char v42 = v61;
      DateInterval.start.getter();
      uint64_t v43 = v62;
      DateInterval.start.getter();
      v59[1] = sub_100EC9604((unint64_t *)&qword_1016605E0, (void (*)(uint64_t))&type metadata accessor for Date);
      uint64_t v44 = v69;
      char v45 = dispatch thunk of static Comparable.< infix(_:_:)();
      int64_t v46 = v68;
      uint64_t v47 = (void (*)(char *, char *, uint64_t))v68[2];
      uint64_t v60 = v47;
      if (v45) {
        char v48 = v43;
      }
      else {
        char v48 = v42;
      }
      v47(v73, v48, v44);
      unint64_t v49 = (void *)v46[1];
      char v68 = v49;
      ((void (*)(char *, uint64_t))v49)(v43, v44);
      ((void (*)(char *, uint64_t))v49)(v42, v44);
      unint64_t v50 = v65;
      DateInterval.end.getter();
      int64_t v51 = v66;
      DateInterval.end.getter();
      if (dispatch thunk of static Comparable.>= infix(_:_:)()) {
        unint64_t v52 = v51;
      }
      else {
        unint64_t v52 = v50;
      }
      v60(v70, v52, v44);
      int64_t v53 = (void (*)(char *, uint64_t))v68;
      ((void (*)(char *, uint64_t))v68)(v51, v44);
      v53(v50, v44);
      uint64_t v54 = v60;
      v60(v71, v73, v44);
      uint64_t v55 = v70;
      v54(v67, v70, v44);
      uint64_t v56 = (uint64_t)v64;
      DateInterval.init(start:end:)();
      unint64_t v57 = (void (*)(char *, uint64_t))v68;
      ((void (*)(char *, uint64_t))v68)(v55, v44);
      v57(v73, v44);
      unint64_t v58 = *(void (**)(char *, uint64_t))(v22 + 8);
      v58(v72, v21);
      v58(v74, v21);
      sub_10001DAB4((uint64_t)v36, &qword_101650938);
      v63((char *)v56, 0, 1, v21);
      sub_100EC9534(v56, (uint64_t)v36);
    }
  }
  return sub_100EC9534((uint64_t)v36, v75);
}

uint64_t sub_100EC6370(void *a1)
{
  return sub_100EC571C(a1);
}

unint64_t sub_100EC6388()
{
  sub_100EC4230(v0, &v3);
  return v3;
}

unint64_t sub_100EC63D8(unsigned __int8 a1)
{
  uint64_t v3 = *(void *)(v1 + *(int *)(type metadata accessor for FetchRequestBeacon(0) + 28));
  *(unsigned char *)(swift_allocObject() + 16) = a1;
  uint64_t v4 = -1 << *(unsigned char *)(v3 + 32);
  uint64_t v5 = ~v4;
  uint64_t v6 = -v4;
  if (v6 < 64) {
    uint64_t v7 = ~(-1 << v6);
  }
  else {
    uint64_t v7 = -1;
  }
  uint64_t v59 = v3;
  uint64_t v60 = v3 + 64;
  uint64_t v62 = v5;
  unint64_t v64 = v7 & *(void *)(v3 + 64);
  swift_bridgeObjectRetain_n();
  swift_retain();
  sub_100EC9334();
  if (v9 == 3) {
    goto LABEL_56;
  }
  uint64_t v56 = v3 + 64;
  unint64_t v58 = v8;
  uint64_t v55 = v3;
  int64_t i = 0;
  int64_t v11 = (unint64_t)(v62 + 64) >> 6;
  unint64_t v12 = v64;
  if (v64) {
    goto LABEL_9;
  }
LABEL_10:
  int64_t v16 = i + 1;
  if (__OFADD__(i, 1))
  {
    __break(1u);
  }
  else if (v16 < v11)
  {
    unint64_t v17 = *(void *)(v60 + 8 * v16);
    if (v17)
    {
LABEL_19:
      unint64_t v12 = (v17 - 1) & v17;
      unint64_t v15 = __clz(__rbit64(v17)) + (v16 << 6);
      for (i = v16; ; unint64_t v15 = v14 | (i << 6))
      {
        uint64_t v20 = *(void *)(v59 + 56) + 16 * v15;
        if (*(unsigned char *)(v20 + 8))
        {
          if (*(unsigned char *)(v20 + 8) == 1)
          {
            uint64_t v21 = 0x7261646E6F636553;
            unint64_t v22 = 0xE900000000000079;
            int v23 = a1;
            if (!a1) {
              goto LABEL_32;
            }
          }
          else
          {
            uint64_t v21 = 0x6F4C657275636553;
            unint64_t v22 = 0xEF736E6F69746163;
            int v23 = a1;
            if (!a1)
            {
LABEL_32:
              unint64_t v25 = 0xE700000000000000;
              uint64_t v24 = 0x7972616D697250;
              goto LABEL_33;
            }
          }
        }
        else
        {
          unint64_t v22 = 0xE700000000000000;
          uint64_t v21 = 0x7972616D697250;
          int v23 = a1;
          if (!a1) {
            goto LABEL_32;
          }
        }
        if (v23 == 1) {
          uint64_t v24 = 0x7261646E6F636553;
        }
        else {
          uint64_t v24 = 0x6F4C657275636553;
        }
        if (v23 == 1) {
          unint64_t v25 = 0xE900000000000079;
        }
        else {
          unint64_t v25 = 0xEF736E6F69746163;
        }
LABEL_33:
        unint64_t v26 = *(void *)v20;
        if (v21 == v24 && v22 == v25)
        {
          swift_bridgeObjectRelease_n();
        }
        else
        {
          char v13 = _stringCompareWithSmolCheck(_:_:expecting:)();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          if ((v13 & 1) == 0)
          {
            if (!v12) {
              goto LABEL_10;
            }
            goto LABEL_9;
          }
        }
        unint64_t v27 = v58;
        if (v26 < v58) {
          unint64_t v27 = v26;
        }
        unint64_t v58 = v27;
        if (!v12) {
          goto LABEL_10;
        }
LABEL_9:
        unint64_t v14 = __clz(__rbit64(v12));
        v12 &= v12 - 1;
      }
    }
    int64_t v18 = i + 2;
    if (i + 2 < v11)
    {
      unint64_t v17 = *(void *)(v60 + 8 * v18);
      if (v17)
      {
LABEL_15:
        int64_t v16 = v18;
        goto LABEL_19;
      }
      int64_t v19 = i + 3;
      if (i + 3 < v11)
      {
        unint64_t v17 = *(void *)(v60 + 8 * v19);
        if (v17)
        {
LABEL_18:
          int64_t v16 = v19;
          goto LABEL_19;
        }
        int64_t v18 = i + 4;
        if (i + 4 < v11)
        {
          unint64_t v17 = *(void *)(v60 + 8 * v18);
          if (v17) {
            goto LABEL_15;
          }
          int64_t v19 = i + 5;
          if (i + 5 < v11)
          {
            unint64_t v17 = *(void *)(v60 + 8 * v19);
            if (v17) {
              goto LABEL_18;
            }
            int64_t v18 = i + 6;
            if (i + 6 < v11)
            {
              unint64_t v17 = *(void *)(v60 + 8 * v18);
              if (v17) {
                goto LABEL_15;
              }
              int64_t v16 = i + 7;
              if (i + 7 < v11)
              {
                unint64_t v17 = *(void *)(v60 + 8 * v16);
                if (!v17)
                {
                  int64_t v28 = i + 8;
                  do
                  {
                    if (v11 == v28) {
                      goto LABEL_52;
                    }
                    unint64_t v17 = *(void *)(v60 + 8 * v28++);
                  }
                  while (!v17);
                  int64_t v16 = v28 - 1;
                }
                goto LABEL_19;
              }
            }
          }
        }
      }
    }
  }
LABEL_52:
  sub_100132C20();
  swift_release();
  uint64_t v29 = -1 << *(unsigned char *)(v55 + 32);
  uint64_t v30 = ~v29;
  uint64_t v31 = -v29;
  uint64_t v32 = v31 < 64 ? ~(-1 << v31) : -1;
  uint64_t v61 = v56;
  uint64_t v63 = v30;
  unint64_t v65 = v32 & *(void *)(v55 + 64);
  swift_bridgeObjectRetain();
  swift_retain();
  sub_100EC9334();
  if (v34 == 3)
  {
LABEL_56:
    sub_100132C20();
    swift_release();
    swift_bridgeObjectRelease();
    swift_release();
    return 0;
  }
  unint64_t v57 = v33;
  int64_t j = 0;
  int64_t v37 = (unint64_t)(v63 + 64) >> 6;
  unint64_t v38 = v65;
  if (v65) {
    goto LABEL_61;
  }
LABEL_62:
  int64_t v42 = j + 1;
  if (__OFADD__(j, 1))
  {
    __break(1u);
  }
  else if (v42 < v37)
  {
    unint64_t v43 = *(void *)(v61 + 8 * v42);
    if (v43)
    {
LABEL_71:
      unint64_t v38 = (v43 - 1) & v43;
      unint64_t v41 = __clz(__rbit64(v43)) + (v42 << 6);
      for (j = v42; ; unint64_t v41 = v40 | (j << 6))
      {
        uint64_t v46 = *(void *)(v55 + 56) + 16 * v41;
        if (*(unsigned char *)(v46 + 8))
        {
          if (*(unsigned char *)(v46 + 8) == 1)
          {
            uint64_t v47 = 0x7261646E6F636553;
            unint64_t v48 = 0xE900000000000079;
            int v49 = a1;
            if (!a1) {
              goto LABEL_84;
            }
          }
          else
          {
            uint64_t v47 = 0x6F4C657275636553;
            unint64_t v48 = 0xEF736E6F69746163;
            int v49 = a1;
            if (!a1)
            {
LABEL_84:
              unint64_t v51 = 0xE700000000000000;
              uint64_t v50 = 0x7972616D697250;
              goto LABEL_85;
            }
          }
        }
        else
        {
          unint64_t v48 = 0xE700000000000000;
          uint64_t v47 = 0x7972616D697250;
          int v49 = a1;
          if (!a1) {
            goto LABEL_84;
          }
        }
        if (v49 == 1) {
          uint64_t v50 = 0x7261646E6F636553;
        }
        else {
          uint64_t v50 = 0x6F4C657275636553;
        }
        if (v49 == 1) {
          unint64_t v51 = 0xE900000000000079;
        }
        else {
          unint64_t v51 = 0xEF736E6F69746163;
        }
LABEL_85:
        unint64_t v52 = *(void *)v46;
        if (v47 == v50 && v48 == v51)
        {
          swift_bridgeObjectRelease_n();
        }
        else
        {
          char v39 = _stringCompareWithSmolCheck(_:_:expecting:)();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          if ((v39 & 1) == 0)
          {
            if (!v38) {
              goto LABEL_62;
            }
            goto LABEL_61;
          }
        }
        unint64_t v53 = v57;
        if (v57 <= v52) {
          unint64_t v53 = v52;
        }
        unint64_t v57 = v53;
        if (!v38) {
          goto LABEL_62;
        }
LABEL_61:
        unint64_t v40 = __clz(__rbit64(v38));
        v38 &= v38 - 1;
      }
    }
    int64_t v44 = j + 2;
    if (j + 2 < v37)
    {
      unint64_t v43 = *(void *)(v61 + 8 * v44);
      if (v43)
      {
LABEL_67:
        int64_t v42 = v44;
        goto LABEL_71;
      }
      int64_t v45 = j + 3;
      if (j + 3 < v37)
      {
        unint64_t v43 = *(void *)(v61 + 8 * v45);
        if (v43)
        {
LABEL_70:
          int64_t v42 = v45;
          goto LABEL_71;
        }
        int64_t v44 = j + 4;
        if (j + 4 < v37)
        {
          unint64_t v43 = *(void *)(v61 + 8 * v44);
          if (v43) {
            goto LABEL_67;
          }
          int64_t v45 = j + 5;
          if (j + 5 < v37)
          {
            unint64_t v43 = *(void *)(v61 + 8 * v45);
            if (v43) {
              goto LABEL_70;
            }
            int64_t v44 = j + 6;
            if (j + 6 < v37)
            {
              unint64_t v43 = *(void *)(v61 + 8 * v44);
              if (v43) {
                goto LABEL_67;
              }
              int64_t v42 = j + 7;
              if (j + 7 < v37)
              {
                unint64_t v43 = *(void *)(v61 + 8 * v42);
                if (!v43)
                {
                  int64_t v54 = j + 8;
                  do
                  {
                    if (v37 == v54) {
                      goto LABEL_104;
                    }
                    unint64_t v43 = *(void *)(v61 + 8 * v54++);
                  }
                  while (!v43);
                  int64_t v42 = v54 - 1;
                }
                goto LABEL_71;
              }
            }
          }
        }
      }
    }
  }
LABEL_104:
  sub_100132C20();
  swift_bridgeObjectRelease();
  swift_release_n();
  unint64_t result = v58;
  if (v57 < v58) {
    __break(1u);
  }
  return result;
}

uint64_t sub_100EC6AD0(uint64_t a1, char a2)
{
  int v2 = *(unsigned __int8 *)(a1 + 8);
  uint64_t v3 = 0x7261646E6F636553;
  unint64_t v4 = 0xE900000000000079;
  if (v2 != 1)
  {
    uint64_t v3 = 0x6F4C657275636553;
    unint64_t v4 = 0xEF736E6F69746163;
  }
  if (*(unsigned char *)(a1 + 8)) {
    uint64_t v5 = v3;
  }
  else {
    uint64_t v5 = 0x7972616D697250;
  }
  if (v2) {
    unint64_t v6 = v4;
  }
  else {
    unint64_t v6 = 0xE700000000000000;
  }
  if (a2)
  {
    if (a2 == 1) {
      uint64_t v7 = 0x7261646E6F636553;
    }
    else {
      uint64_t v7 = 0x6F4C657275636553;
    }
    if (a2 == 1) {
      unint64_t v8 = 0xE900000000000079;
    }
    else {
      unint64_t v8 = 0xEF736E6F69746163;
    }
    if (v5 != v7) {
      goto LABEL_21;
    }
  }
  else
  {
    unint64_t v8 = 0xE700000000000000;
    if (v5 != 0x7972616D697250)
    {
LABEL_21:
      char v9 = _stringCompareWithSmolCheck(_:_:expecting:)();
      goto LABEL_22;
    }
  }
  if (v6 != v8) {
    goto LABEL_21;
  }
  char v9 = 1;
LABEL_22:
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v9 & 1;
}

unint64_t sub_100EC6BFC()
{
  return 0xD000000000000010;
}

uint64_t sub_100EC6C54(char *a1, unsigned __int8 *a2)
{
  return sub_10071D4A4(*a1, *a2);
}

Swift::Int sub_100EC6C60()
{
  return sub_10072C5E0();
}

uint64_t sub_100EC6C68()
{
  return sub_100720114();
}

Swift::Int sub_100EC6C70()
{
  return sub_10072156C();
}

unint64_t sub_100EC6C78@<X0>(Swift::String *a1@<X0>, unsigned char *a2@<X8>)
{
  unint64_t result = sub_100ECD3B0(*a1);
  *a2 = result;
  return result;
}

unint64_t sub_100EC6CA8@<X0>(void *a1@<X8>)
{
  unint64_t result = sub_100EC6BFC();
  *a1 = 0xD000000000000010;
  a1[1] = v3;
  return result;
}

uint64_t sub_100EC6CDC()
{
  return RawRepresentable<>.encode(to:)();
}

uint64_t sub_100EC6D2C(void *a1, char a2, uint64_t a3, uint64_t a4)
{
  v12[1] = a4;
  uint64_t v7 = sub_10000588C(&qword_101662248);
  uint64_t v8 = *(void *)(v7 - 8);
  __chkstk_darwin(v7);
  uint64_t v10 = (char *)v12 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10001CD44(a1, a1[3]);
  sub_100ECDC94();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  char v15 = a2;
  char v14 = 0;
  sub_100ECDCE8();
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  if (!v4)
  {
    char v13 = 1;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v8 + 8))(v10, v7);
}

uint64_t sub_100EC6EB4(void *a1, uint64_t a2, char a3, uint64_t a4, uint64_t a5)
{
  uint64_t v15 = a4;
  uint64_t v16 = a5;
  uint64_t v9 = sub_10000588C(&qword_101662160);
  uint64_t v10 = *(void *)(v9 - 8);
  __chkstk_darwin(v9);
  unint64_t v12 = (char *)&v14 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10001CD44(a1, a1[3]);
  sub_100ECD0CC();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  uint64_t v17 = a2;
  char v20 = 0;
  sub_10000588C(&qword_101662170);
  sub_100ECD120();
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  if (!v5)
  {
    LOBYTE(v17) = a3;
    uint64_t v18 = v15;
    uint64_t v19 = v16;
    char v20 = 1;
    sub_100ECD1C4();
    KeyedEncodingContainer.encode<A>(_:forKey:)();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v10 + 8))(v12, v9);
}

unint64_t sub_100EC7064(char a1)
{
  unint64_t result = 0xD000000000000010;
  switch(a1)
  {
    case 1:
      unint64_t result = 0xD000000000000012;
      break;
    case 2:
      unint64_t result = 0x7461447472617473;
      break;
    case 3:
      unint64_t result = 0x65746144646E65;
      break;
    case 4:
      unint64_t result = 0x7261646E6F636573;
      break;
    case 5:
      unint64_t result = 0x6F43686372616573;
      break;
    case 6:
      unint64_t result = 5294388599723750000;
      break;
    case 7:
      unint64_t result = 0x76654464656E776FLL;
      break;
    case 8:
      unint64_t result = 0x6570795479656BLL;
      break;
    default:
      return result;
  }
  return result;
}

unint64_t sub_100EC71B0(char a1)
{
  unint64_t result = 0xD000000000000010;
  switch(a1)
  {
    case 1:
      unint64_t result = 0xD000000000000012;
      break;
    case 2:
      unint64_t result = 0x7461447472617473;
      break;
    case 3:
      unint64_t result = 0x65746144646E65;
      break;
    case 4:
      unint64_t result = 0x7261646E6F636573;
      break;
    case 5:
      unint64_t result = 0x6F43686372616573;
      break;
    case 6:
      unint64_t result = 5294388599723750000;
      break;
    case 7:
      unint64_t result = 0x76654464656E776FLL;
      break;
    case 8:
      unint64_t result = 0x6570795479656BLL;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t sub_100EC72FC()
{
  if (*v0) {
    return 0xD000000000000016;
  }
  else {
    return 0x7963696C6F70;
  }
}

uint64_t sub_100EC7338@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_100ECDEE4(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_100EC7360(uint64_t a1)
{
  unint64_t v2 = sub_100ECDC94();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_100EC739C(uint64_t a1)
{
  unint64_t v2 = sub_100ECDC94();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_100EC73D8(void *a1)
{
  return sub_100EC6D2C(a1, *(unsigned char *)v1, *(void *)(v1 + 8), *(void *)(v1 + 16));
}

uint64_t sub_100EC73F8()
{
  return sub_100EC33C8(*v0, *((void *)v0 + 1), *((void **)v0 + 2));
}

uint64_t sub_100EC7404()
{
  if (*v0) {
    return 0x747865746E6F63;
  }
  else {
    return 0x686372616573;
  }
}

uint64_t sub_100EC743C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_100ECDFCC(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_100EC7464(uint64_t a1)
{
  unint64_t v2 = sub_100ECD0CC();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_100EC74A0(uint64_t a1)
{
  unint64_t v2 = sub_100ECD0CC();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_100EC74DC(void *a1)
{
  return sub_100EC6EB4(a1, *(void *)v1, *(unsigned char *)(v1 + 8), *(void *)(v1 + 16), *(void *)(v1 + 24));
}

uint64_t sub_100EC7500(unsigned __int8 *a1, char *a2)
{
  return sub_10071AE48(*a1, *a2);
}

Swift::Int sub_100EC750C()
{
  return Hasher._finalize()();
}

uint64_t sub_100EC7554()
{
  return sub_10071F7B8();
}

Swift::Int sub_100EC755C()
{
  return Hasher._finalize()();
}

unint64_t sub_100EC75A0@<X0>(Swift::String *a1@<X0>, unsigned char *a2@<X8>)
{
  unint64_t result = sub_100ECDD3C(*a1);
  *a2 = result;
  return result;
}

unint64_t sub_100EC75D0@<X0>(unint64_t *a1@<X8>)
{
  unint64_t result = sub_100EC7064(*v1);
  *a1 = result;
  a1[1] = v4;
  return result;
}

unint64_t sub_100EC75FC()
{
  return sub_100EC71B0(*v0);
}

unint64_t sub_100EC7604@<X0>(Swift::String a1@<X1:X0>, unsigned char *a2@<X8>)
{
  unint64_t result = sub_100ECDD3C(a1);
  *a2 = result;
  return result;
}

uint64_t sub_100EC762C(uint64_t a1)
{
  unint64_t v2 = sub_100ECD310();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_100EC7668(uint64_t a1)
{
  unint64_t v2 = sub_100ECD310();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_100EC76A4(void *a1, uint64_t a2)
{
  uint64_t v81 = a2;
  uint64_t v3 = sub_10000588C((uint64_t *)&unk_10163AC90);
  uint64_t v4 = __chkstk_darwin(v3 - 8);
  char v68 = (char *)&v68 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = __chkstk_darwin(v4);
  uint64_t v72 = (char *)&v68 - v7;
  uint64_t v8 = __chkstk_darwin(v6);
  Swift::String v71 = (char *)&v68 - v9;
  __chkstk_darwin(v8);
  uint64_t v79 = (uint64_t)&v68 - v10;
  uint64_t v11 = sub_10000588C(&qword_101650938);
  uint64_t v12 = __chkstk_darwin(v11 - 8);
  uint64_t v73 = (uint64_t)&v68 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = __chkstk_darwin(v12);
  uint64_t v74 = (uint64_t)&v68 - v15;
  __chkstk_darwin(v14);
  uint64_t v17 = (char *)&v68 - v16;
  uint64_t v18 = type metadata accessor for DateInterval();
  uint64_t v19 = *(void *)(v18 - 8);
  uint64_t v20 = __chkstk_darwin(v18);
  int64_t v76 = (char *)&v68 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v22 = __chkstk_darwin(v20);
  Swift::String v70 = (char *)&v68 - v23;
  __chkstk_darwin(v22);
  unint64_t v25 = (char *)&v68 - v24;
  uint64_t v26 = sub_10000588C(&qword_1016621B8);
  uint64_t v78 = *(void *)(v26 - 8);
  __chkstk_darwin(v26);
  int64_t v28 = (char *)&v68 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10001CD44(a1, a1[3]);
  sub_100ECD310();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  uint64_t v29 = v18;
  uint64_t RequestBeacon = (int *)type metadata accessor for FetchRequestBeacon(0);
  uint64_t v30 = v81 + RequestBeacon[5];
  sub_100EC959C(v30, (uint64_t)v17);
  uint64_t v31 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v19 + 48);
  int v32 = v31(v17, 1, v29);
  uint64_t v77 = v26;
  uint64_t v80 = v29;
  if (v32 == 1)
  {
    uint64_t v69 = v30;
    uint64_t v33 = v19;
    sub_10001DAB4((uint64_t)v17, &qword_101650938);
    uint64_t v34 = (uint64_t)v28;
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v19 + 32))(v25, v17, v29);
    uint64_t v35 = v79;
    DateInterval.start.getter();
    uint64_t v36 = type metadata accessor for Date();
    (*(void (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v36 - 8) + 56))(v35, 0, 1, v36);
    LOBYTE(v84) = 0;
    sub_100EC9604((unint64_t *)&unk_10163ACE0, (void (*)(uint64_t))&type metadata accessor for Date);
    uint64_t v37 = v82;
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)();
    uint64_t v82 = v37;
    uint64_t v34 = (uint64_t)v28;
    if (v37)
    {
      sub_10001DAB4(v79, (uint64_t *)&unk_10163AC90);
      (*(void (**)(char *, uint64_t))(v19 + 8))(v25, v80);
      return (*(uint64_t (**)(char *, uint64_t))(v78 + 8))(v28, v26);
    }
    uint64_t v69 = v30;
    sub_10001DAB4(v79, (uint64_t *)&unk_10163AC90);
    uint64_t v33 = v19;
    uint64_t v29 = v80;
    (*(void (**)(char *, uint64_t))(v19 + 8))(v25, v80);
  }
  uint64_t v39 = v74;
  uint64_t v40 = v81 + RequestBeacon[6];
  sub_100EC959C(v40, v74);
  if (v31((char *)v39, 1, v29) == 1)
  {
    uint64_t v79 = v34;
    sub_10001DAB4(v39, &qword_101650938);
    uint64_t v41 = v82;
    int64_t v42 = v76;
    uint64_t v43 = v77;
    int64_t v44 = v72;
  }
  else
  {
    uint64_t v45 = v33;
    uint64_t v46 = v39;
    uint64_t v47 = v70;
    (*(void (**)(char *, uint64_t, uint64_t))(v33 + 32))(v70, v46, v29);
    uint64_t v48 = (uint64_t)v71;
    DateInterval.start.getter();
    uint64_t v49 = type metadata accessor for Date();
    (*(void (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v49 - 8) + 56))(v48, 0, 1, v49);
    LOBYTE(v84) = 1;
    sub_100EC9604((unint64_t *)&unk_10163ACE0, (void (*)(uint64_t))&type metadata accessor for Date);
    uint64_t v50 = v77;
    uint64_t v51 = v82;
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)();
    uint64_t v82 = v51;
    if (v51)
    {
      sub_10001DAB4(v48, (uint64_t *)&unk_10163AC90);
      (*(void (**)(char *, uint64_t))(v45 + 8))(v47, v80);
      return (*(uint64_t (**)(uint64_t, uint64_t))(v78 + 8))(v34, v50);
    }
    uint64_t v79 = v34;
    sub_10001DAB4(v48, (uint64_t *)&unk_10163AC90);
    uint64_t v29 = v80;
    (*(void (**)(char *, uint64_t))(v45 + 8))(v47, v80);
    uint64_t v33 = v45;
    uint64_t v43 = v50;
    int64_t v44 = v72;
    int64_t v42 = v76;
    uint64_t v41 = v82;
  }
  uint64_t v52 = v40;
  uint64_t v53 = v73;
  sub_100EC5C98(v69, v52, v73);
  if (v31((char *)v53, 1, v29) == 1)
  {
    sub_10001DAB4(v53, &qword_101650938);
    uint64_t v54 = v79;
  }
  else
  {
    (*(void (**)(char *, uint64_t, uint64_t))(v33 + 32))(v42, v53, v29);
    DateInterval.start.getter();
    uint64_t v58 = type metadata accessor for Date();
    uint64_t v59 = (uint64_t)v44;
    uint64_t v60 = *(void (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v58 - 8) + 56);
    uint64_t v61 = v33;
    v60(v59, 0, 1, v58);
    LOBYTE(v84) = 2;
    sub_100EC9604((unint64_t *)&unk_10163ACE0, (void (*)(uint64_t))&type metadata accessor for Date);
    uint64_t v62 = v79;
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)();
    if (v41)
    {
      sub_10001DAB4(v59, (uint64_t *)&unk_10163AC90);
      (*(void (**)(char *, uint64_t))(v33 + 8))(v76, v80);
      return (*(uint64_t (**)(uint64_t, uint64_t))(v78 + 8))(v62, v77);
    }
    sub_10001DAB4(v59, (uint64_t *)&unk_10163AC90);
    uint64_t v65 = (uint64_t)v68;
    DateInterval.end.getter();
    v60(v65, 0, 1, v58);
    LOBYTE(v84) = 3;
    uint64_t v66 = v77;
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)();
    uint64_t v54 = v62;
    sub_10001DAB4(v65, (uint64_t *)&unk_10163AC90);
    (*(void (**)(char *, uint64_t))(v61 + 8))(v76, v80);
    uint64_t v43 = v66;
  }
  uint64_t v55 = sub_100EC1DD8();
  unint64_t v57 = v56;
  if (v55[2])
  {
    uint64_t v84 = v55;
    char v83 = 6;
    sub_10000588C(&qword_101654A30);
    sub_100176E3C();
    KeyedEncodingContainer.encode<A>(_:forKey:)();
    if (v41)
    {
      (*(void (**)(uint64_t, uint64_t))(v78 + 8))(v54, v43);
      swift_bridgeObjectRelease();
      return swift_bridgeObjectRelease();
    }
  }
  swift_bridgeObjectRelease();
  if (v57[2])
  {
    uint64_t v84 = v57;
    char v83 = 4;
    sub_10000588C(&qword_101654A30);
    sub_100176E3C();
    KeyedEncodingContainer.encode<A>(_:forKey:)();
    if (v41)
    {
LABEL_22:
      (*(void (**)(uint64_t, uint64_t))(v78 + 8))(v54, v43);
      return swift_bridgeObjectRelease();
    }
  }
  swift_bridgeObjectRelease();
  if (*(void *)(*(void *)(v81 + RequestBeacon[9]) + 16))
  {
    uint64_t v63 = swift_bridgeObjectRetain();
    uint64_t v64 = sub_100EC1B60(v63);
    swift_bridgeObjectRelease();
    uint64_t v84 = (void *)v64;
    char v83 = 7;
    sub_10000588C((uint64_t *)&unk_10164DBD0);
    sub_10025F9B4();
    KeyedEncodingContainer.encode<A>(_:forKey:)();
    if (v41) {
      goto LABEL_22;
    }
    swift_bridgeObjectRelease();
  }
  uint64_t v67 = v78;
  LOBYTE(v84) = 8;
  KeyedEncodingContainer.encode(_:forKey:)();
  return (*(uint64_t (**)(uint64_t, uint64_t))(v67 + 8))(v54, v43);
}

void sub_100EC8164(void *a1)
{
  sub_100EC76A4(a1, v1);
}

uint64_t sub_100EC81B8(void *a1, uint64_t a2, char a3, uint64_t a4, uint64_t a5)
{
  uint64_t v15 = a4;
  uint64_t v16 = a5;
  uint64_t v9 = sub_10000588C(&qword_101662190);
  uint64_t v10 = *(void *)(v9 - 8);
  __chkstk_darwin(v9);
  uint64_t v12 = (char *)&v14 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10001CD44(a1, a1[3]);
  sub_100ECD218();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  uint64_t v17 = a2;
  char v20 = 0;
  sub_10000588C(&qword_1016621A0);
  sub_100ECD26C();
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  if (!v5)
  {
    LOBYTE(v17) = a3;
    uint64_t v18 = v15;
    uint64_t v19 = v16;
    char v20 = 1;
    sub_100ECD1C4();
    KeyedEncodingContainer.encode<A>(_:forKey:)();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v10 + 8))(v12, v9);
}

uint64_t sub_100EC8368(uint64_t a1)
{
  unint64_t v2 = sub_100ECD218();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_100EC83A4(uint64_t a1)
{
  unint64_t v2 = sub_100ECD218();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_100EC83E0(void *a1)
{
  return sub_100EC81B8(a1, *(void *)v1, *(unsigned char *)(v1 + 8), *(void *)(v1 + 16), *(void *)(v1 + 24));
}

Swift::Int sub_100EC8404(uint64_t *a1)
{
  Swift::Int v3 = a1[1];
  Swift::Int result = _minimumMergeRunLength(_:)(v3);
  if (result >= v3)
  {
    if (v3 < 0) {
      goto LABEL_136;
    }
    if ((unint64_t)v3 >= 2)
    {
      uint64_t v88 = 0;
      uint64_t v89 = *a1;
      for (uint64_t i = 1; i != v3; ++i)
      {
        unint64_t v91 = *(void *)(v89 + 24 * i + 16);
        uint64_t v92 = v88;
        do
        {
          uint64_t v93 = v89 + v92;
          if (v91 >= *(void *)(v89 + v92 + 16)) {
            break;
          }
          if (!v89) {
            goto LABEL_140;
          }
          uint64_t v94 = *(void *)(v93 + 24);
          unint64_t v95 = (void *)(v89 + v92);
          uint64_t v96 = *(void *)(v89 + v92 + 32);
          *(_OWORD *)(v93 + 24) = *(_OWORD *)v93;
          Swift::Int result = *(void *)(v93 + 16);
          *(void *)(v93 + 40) = result;
          *unint64_t v95 = v94;
          v95[1] = v96;
          *(void *)(v93 + 16) = v91;
          v92 -= 24;
        }
        while (v92 != -24);
        v88 += 24;
      }
    }
    return result;
  }
  if (v3 >= 0) {
    uint64_t v5 = v3;
  }
  else {
    uint64_t v5 = v3 + 1;
  }
  if (v3 < -1) {
    goto LABEL_145;
  }
  Swift::Int v6 = result;
  uint64_t v105 = a1;
  if (v3 < 2)
  {
    uint64_t v9 = _swiftEmptyArrayStorage;
    __dst = (char *)&_swiftEmptyArrayStorage[4];
    if (v3 != 1)
    {
      unint64_t v13 = _swiftEmptyArrayStorage[2];
      uint64_t v12 = (char *)_swiftEmptyArrayStorage;
LABEL_102:
      char v97 = v12;
      unint64_t v107 = v9;
      if (v13 >= 2)
      {
        uint64_t v98 = *v105;
        do
        {
          unint64_t v99 = v13 - 2;
          if (v13 < 2) {
            goto LABEL_131;
          }
          if (!v98) {
            goto LABEL_144;
          }
          unint64_t v100 = v97;
          uint64_t v101 = *(void *)&v97[16 * v99 + 32];
          uint64_t v102 = *(void *)&v97[16 * v13 + 24];
          sub_100EC8B18((char *)(v98 + 24 * v101), (char *)(v98 + 24 * *(void *)&v97[16 * v13 + 16]), v98 + 24 * v102, __dst);
          if (v1) {
            break;
          }
          if (v102 < v101) {
            goto LABEL_132;
          }
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
            unint64_t v100 = sub_100B73584((uint64_t)v100);
          }
          if (v99 >= *((void *)v100 + 2)) {
            goto LABEL_133;
          }
          char v103 = &v100[16 * v99 + 32];
          *(void *)char v103 = v101;
          *((void *)v103 + 1) = v102;
          unint64_t v104 = *((void *)v100 + 2);
          if (v13 > v104) {
            goto LABEL_134;
          }
          memmove(&v100[16 * v13 + 16], &v100[16 * v13 + 32], 16 * (v104 - v13));
          char v97 = v100;
          *((void *)v100 + 2) = v104 - 1;
          unint64_t v13 = v104 - 1;
        }
        while (v104 > 2);
      }
LABEL_93:
      swift_bridgeObjectRelease();
      v107[2] = 0;
      return swift_bridgeObjectRelease();
    }
    unint64_t v107 = _swiftEmptyArrayStorage;
  }
  else
  {
    uint64_t v7 = v5 >> 1;
    sub_10000588C(&qword_10163AA40);
    uint64_t v8 = static Array._allocateBufferUninitialized(minimumCapacity:)();
    *(void *)(v8 + 16) = v7;
    unint64_t v107 = (void *)v8;
    __dst = (char *)(v8 + 32);
  }
  Swift::Int v10 = 0;
  uint64_t v11 = *a1;
  uint64_t v106 = *a1 + 64;
  uint64_t v12 = (char *)_swiftEmptyArrayStorage;
  Swift::Int v108 = v6;
  Swift::Int v109 = v3;
  uint64_t v110 = v11;
  while (1)
  {
    Swift::Int v14 = v10++;
    if (v10 < v3)
    {
      unint64_t v15 = *(void *)(v11 + 24 * v10 + 16);
      unint64_t v16 = *(void *)(v11 + 24 * v14 + 16);
      Swift::Int v10 = v14 + 2;
      if (v14 + 2 < v3)
      {
        uint64_t v17 = (unint64_t *)(v106 + 24 * v14);
        unint64_t v18 = v15;
        while (1)
        {
          unint64_t v20 = *v17;
          v17 += 3;
          unint64_t v19 = v20;
          if (v15 < v16 == v20 >= v18) {
            break;
          }
          ++v10;
          unint64_t v18 = v19;
          if (v3 == v10)
          {
            Swift::Int v10 = v3;
            break;
          }
        }
      }
      if (v15 < v16)
      {
        if (v10 < v14) {
          goto LABEL_137;
        }
        if (v14 < v10)
        {
          uint64_t v21 = 24 * v10;
          uint64_t v22 = 24 * v14;
          Swift::Int v23 = v10;
          Swift::Int v24 = v14;
          do
          {
            if (v24 != --v23)
            {
              if (!v11) {
                goto LABEL_143;
              }
              uint64_t v25 = v11 + v22;
              uint64_t v26 = v11 + v21;
              long long v27 = *(_OWORD *)(v11 + v22);
              uint64_t v28 = *(void *)(v11 + v22 + 16);
              uint64_t v29 = *(void *)(v11 + v21 - 8);
              *(_OWORD *)uint64_t v25 = *(_OWORD *)(v11 + v21 - 24);
              *(void *)(v25 + 16) = v29;
              *(_OWORD *)(v26 - 24) = v27;
              *(void *)(v26 - 8) = v28;
            }
            ++v24;
            v21 -= 24;
            v22 += 24;
          }
          while (v24 < v23);
        }
      }
    }
    if (v10 >= v3) {
      goto LABEL_46;
    }
    if (__OFSUB__(v10, v14)) {
      goto LABEL_135;
    }
    if (v10 - v14 >= v6) {
      goto LABEL_46;
    }
    Swift::Int v30 = v14 + v6;
    if (__OFADD__(v14, v6)) {
      goto LABEL_138;
    }
    if (v30 >= v3) {
      Swift::Int v30 = v3;
    }
    if (v30 < v14) {
      break;
    }
    if (v10 != v30)
    {
      uint64_t v31 = (uint64_t *)(v11 + 24 * v10);
      do
      {
        unint64_t v32 = *(void *)(v11 + 24 * v10 + 16);
        Swift::Int v33 = v14;
        uint64_t v34 = v31;
        do
        {
          if (v32 >= *(v34 - 1)) {
            break;
          }
          if (!v11) {
            goto LABEL_141;
          }
          uint64_t v35 = *v34;
          uint64_t v36 = v34[1];
          *(_OWORD *)uint64_t v34 = *(_OWORD *)(v34 - 3);
          v34[2] = *(v34 - 1);
          *(v34 - 2) = v36;
          *(v34 - 1) = v32;
          *(v34 - 3) = v35;
          v34 -= 3;
          ++v33;
        }
        while (v10 != v33);
        ++v10;
        v31 += 3;
      }
      while (v10 != v30);
      Swift::Int v10 = v30;
    }
LABEL_46:
    if (v10 < v14) {
      goto LABEL_130;
    }
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
      uint64_t v12 = sub_100B729CC(0, *((void *)v12 + 2) + 1, 1, v12);
    }
    unint64_t v38 = *((void *)v12 + 2);
    unint64_t v37 = *((void *)v12 + 3);
    unint64_t v13 = v38 + 1;
    uint64_t v11 = v110;
    if (v38 >= v37 >> 1)
    {
      unint64_t v87 = sub_100B729CC((char *)(v37 > 1), v38 + 1, 1, v12);
      uint64_t v11 = v110;
      uint64_t v12 = v87;
    }
    *((void *)v12 + 2) = v13;
    uint64_t v39 = v12 + 32;
    uint64_t v40 = &v12[16 * v38 + 32];
    *(void *)uint64_t v40 = v14;
    *((void *)v40 + 1) = v10;
    if (v38)
    {
      while (1)
      {
        unint64_t v41 = v13 - 1;
        if (v13 >= 4)
        {
          uint64_t v46 = &v39[16 * v13];
          uint64_t v47 = *((void *)v46 - 8);
          uint64_t v48 = *((void *)v46 - 7);
          BOOL v52 = __OFSUB__(v48, v47);
          uint64_t v49 = v48 - v47;
          if (v52) {
            goto LABEL_119;
          }
          uint64_t v51 = *((void *)v46 - 6);
          uint64_t v50 = *((void *)v46 - 5);
          BOOL v52 = __OFSUB__(v50, v51);
          uint64_t v44 = v50 - v51;
          char v45 = v52;
          if (v52) {
            goto LABEL_120;
          }
          unint64_t v53 = v13 - 2;
          uint64_t v54 = &v39[16 * v13 - 32];
          uint64_t v56 = *(void *)v54;
          uint64_t v55 = *((void *)v54 + 1);
          BOOL v52 = __OFSUB__(v55, v56);
          uint64_t v57 = v55 - v56;
          if (v52) {
            goto LABEL_122;
          }
          BOOL v52 = __OFADD__(v44, v57);
          uint64_t v58 = v44 + v57;
          if (v52) {
            goto LABEL_125;
          }
          if (v58 >= v49)
          {
            int64_t v76 = &v39[16 * v41];
            uint64_t v78 = *(void *)v76;
            uint64_t v77 = *((void *)v76 + 1);
            BOOL v52 = __OFSUB__(v77, v78);
            uint64_t v79 = v77 - v78;
            if (v52) {
              goto LABEL_129;
            }
            BOOL v69 = v44 < v79;
            goto LABEL_83;
          }
        }
        else
        {
          if (v13 != 3)
          {
            uint64_t v70 = *((void *)v12 + 4);
            uint64_t v71 = *((void *)v12 + 5);
            BOOL v52 = __OFSUB__(v71, v70);
            uint64_t v63 = v71 - v70;
            char v64 = v52;
            goto LABEL_77;
          }
          uint64_t v43 = *((void *)v12 + 4);
          uint64_t v42 = *((void *)v12 + 5);
          BOOL v52 = __OFSUB__(v42, v43);
          uint64_t v44 = v42 - v43;
          char v45 = v52;
        }
        if (v45) {
          goto LABEL_121;
        }
        unint64_t v53 = v13 - 2;
        uint64_t v59 = &v39[16 * v13 - 32];
        uint64_t v61 = *(void *)v59;
        uint64_t v60 = *((void *)v59 + 1);
        BOOL v62 = __OFSUB__(v60, v61);
        uint64_t v63 = v60 - v61;
        char v64 = v62;
        if (v62) {
          goto LABEL_124;
        }
        uint64_t v65 = &v39[16 * v41];
        uint64_t v67 = *(void *)v65;
        uint64_t v66 = *((void *)v65 + 1);
        BOOL v52 = __OFSUB__(v66, v67);
        uint64_t v68 = v66 - v67;
        if (v52) {
          goto LABEL_127;
        }
        if (__OFADD__(v63, v68)) {
          goto LABEL_128;
        }
        if (v63 + v68 >= v44)
        {
          BOOL v69 = v44 < v68;
LABEL_83:
          if (v69) {
            unint64_t v41 = v53;
          }
          goto LABEL_85;
        }
LABEL_77:
        if (v64) {
          goto LABEL_123;
        }
        uint64_t v72 = &v39[16 * v41];
        uint64_t v74 = *(void *)v72;
        uint64_t v73 = *((void *)v72 + 1);
        BOOL v52 = __OFSUB__(v73, v74);
        uint64_t v75 = v73 - v74;
        if (v52) {
          goto LABEL_126;
        }
        if (v75 < v63) {
          goto LABEL_15;
        }
LABEL_85:
        unint64_t v80 = v41 - 1;
        if (v41 - 1 >= v13)
        {
          __break(1u);
LABEL_116:
          __break(1u);
LABEL_117:
          __break(1u);
LABEL_118:
          __break(1u);
LABEL_119:
          __break(1u);
LABEL_120:
          __break(1u);
LABEL_121:
          __break(1u);
LABEL_122:
          __break(1u);
LABEL_123:
          __break(1u);
LABEL_124:
          __break(1u);
LABEL_125:
          __break(1u);
LABEL_126:
          __break(1u);
LABEL_127:
          __break(1u);
LABEL_128:
          __break(1u);
LABEL_129:
          __break(1u);
LABEL_130:
          __break(1u);
LABEL_131:
          __break(1u);
LABEL_132:
          __break(1u);
LABEL_133:
          __break(1u);
LABEL_134:
          __break(1u);
LABEL_135:
          __break(1u);
LABEL_136:
          __break(1u);
LABEL_137:
          __break(1u);
LABEL_138:
          __break(1u);
          goto LABEL_139;
        }
        if (!v11) {
          goto LABEL_142;
        }
        uint64_t v81 = v12;
        uint64_t v82 = &v39[16 * v80];
        uint64_t v83 = *(void *)v82;
        uint64_t v84 = &v39[16 * v41];
        uint64_t v85 = *((void *)v84 + 1);
        sub_100EC8B18((char *)(v11 + 24 * *(void *)v82), (char *)(v11 + 24 * *(void *)v84), v11 + 24 * v85, __dst);
        if (v1) {
          goto LABEL_93;
        }
        if (v85 < v83) {
          goto LABEL_116;
        }
        if (v41 > *((void *)v81 + 2)) {
          goto LABEL_117;
        }
        *(void *)uint64_t v82 = v83;
        *(void *)&v39[16 * v80 + 8] = v85;
        unint64_t v86 = *((void *)v81 + 2);
        if (v41 >= v86) {
          goto LABEL_118;
        }
        uint64_t v12 = v81;
        unint64_t v13 = v86 - 1;
        memmove(&v39[16 * v41], v84 + 16, 16 * (v86 - 1 - v41));
        *((void *)v81 + 2) = v86 - 1;
        uint64_t v11 = v110;
        if (v86 <= 2) {
          goto LABEL_15;
        }
      }
    }
    unint64_t v13 = 1;
LABEL_15:
    Swift::Int v6 = v108;
    Swift::Int v3 = v109;
    if (v10 >= v109)
    {
      uint64_t v9 = v107;
      goto LABEL_102;
    }
  }
LABEL_139:
  __break(1u);
LABEL_140:
  __break(1u);
LABEL_141:
  __break(1u);
LABEL_142:
  __break(1u);
LABEL_143:
  __break(1u);
LABEL_144:
  __break(1u);
LABEL_145:
  Swift::Int result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_100EC8B18(char *__src, char *a2, unint64_t a3, char *__dst)
{
  uint64_t v4 = __dst;
  Swift::Int v6 = a2;
  uint64_t v7 = __src;
  int64_t v8 = a2 - __src;
  int64_t v9 = (a2 - __src) / 24;
  uint64_t v10 = a3 - (void)a2;
  uint64_t v11 = (uint64_t)(a3 - (void)a2) / 24;
  uint64_t v26 = __src;
  uint64_t v25 = __dst;
  if (v9 >= v11)
  {
    if (v10 >= -23)
    {
      if (__dst != a2 || &a2[24 * v11] <= __dst) {
        memmove(__dst, a2, 24 * v11);
      }
      uint64_t v17 = &v4[24 * v11];
      Swift::Int v24 = v17;
      uint64_t v26 = v6;
      if (v7 < v6 && v10 >= 24)
      {
        unint64_t v18 = a3 - 24;
        do
        {
          unint64_t v19 = (char *)(v18 + 24);
          if (*((void *)v17 - 1) >= *((void *)v6 - 1))
          {
            Swift::Int v24 = v17 - 24;
            if (v19 < v17 || v18 >= (unint64_t)v17 || v19 != v17)
            {
              long long v22 = *(_OWORD *)(v17 - 24);
              *(void *)(v18 + 16) = *((void *)v17 - 1);
              *(_OWORD *)unint64_t v18 = v22;
            }
            unint64_t v20 = v6;
            v17 -= 24;
            if (v6 <= v7) {
              break;
            }
          }
          else
          {
            unint64_t v20 = v6 - 24;
            if (v19 != v6 || v18 >= (unint64_t)v6)
            {
              long long v21 = *(_OWORD *)v20;
              *(void *)(v18 + 16) = *((void *)v6 - 1);
              *(_OWORD *)unint64_t v18 = v21;
            }
            uint64_t v26 = v6 - 24;
            if (v20 <= v7) {
              break;
            }
          }
          v18 -= 24;
          Swift::Int v6 = v20;
        }
        while (v17 > v4);
      }
LABEL_40:
      sub_100B72BB8((void **)&v26, &v25, &v24);
      return 1;
    }
  }
  else if (v8 >= -23)
  {
    if (__dst != __src || &__src[24 * v9] <= __dst) {
      memmove(__dst, __src, 24 * v9);
    }
    uint64_t v12 = &v4[24 * v9];
    Swift::Int v24 = v12;
    if ((unint64_t)v6 < a3 && v8 >= 24)
    {
      unint64_t v13 = v4;
      while (1)
      {
        if (*((void *)v6 + 2) >= *((void *)v13 + 2))
        {
          uint64_t v4 = v13 + 24;
          unint64_t v15 = v13;
          Swift::Int v14 = v6;
          if (v7 == v13)
          {
            v13 += 24;
            if (v7 < v4) {
              goto LABEL_18;
            }
          }
          else
          {
            v13 += 24;
          }
        }
        else
        {
          Swift::Int v14 = v6 + 24;
          unint64_t v15 = v6;
          if (v7 == v6 && v7 < v14) {
            goto LABEL_18;
          }
        }
        long long v16 = *(_OWORD *)v15;
        *((void *)v7 + 2) = *((void *)v15 + 2);
        *(_OWORD *)uint64_t v7 = v16;
LABEL_18:
        v7 += 24;
        if (v13 < v12)
        {
          Swift::Int v6 = v14;
          if ((unint64_t)v14 < a3) {
            continue;
          }
        }
        uint64_t v25 = v4;
        uint64_t v26 = v7;
        goto LABEL_40;
      }
    }
    goto LABEL_40;
  }
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_100EC8DD8(uint64_t a1, uint64_t a2, uint64_t a3, char a4, void *a5)
{
  uint64_t v48 = a5;
  uint64_t v6 = -1 << *(unsigned char *)(a1 + 32);
  uint64_t v7 = ~v6;
  uint64_t v8 = *(void *)(a1 + 64);
  uint64_t v9 = -v6;
  uint64_t v41 = a1;
  uint64_t v42 = a1 + 64;
  if (v9 < 64) {
    uint64_t v10 = ~(-1 << v9);
  }
  else {
    uint64_t v10 = -1;
  }
  uint64_t v43 = v7;
  uint64_t v44 = 0;
  uint64_t v45 = v10 & v8;
  uint64_t v46 = a2;
  uint64_t v47 = a3;
  swift_bridgeObjectRetain();
  swift_retain();
  sub_100BD7DF8(&v36);
  unint64_t v11 = *((void *)&v36 + 1);
  while (1)
  {
    if (v11 >> 60 == 15)
    {
      swift_release();
      swift_bridgeObjectRelease();
      sub_100132C20();
      return swift_release();
    }
    uint64_t v15 = v36;
    uint64_t v16 = v38;
    uint64_t v35 = v37;
    uint64_t v18 = v39;
    uint64_t v17 = v40;
    unint64_t v19 = (void *)*v48;
    unint64_t v21 = sub_100724D9C(v36, v11);
    uint64_t v22 = v19[2];
    BOOL v23 = (v20 & 1) == 0;
    uint64_t v24 = v22 + v23;
    if (__OFADD__(v22, v23)) {
      break;
    }
    char v25 = v20;
    if (v19[3] >= v24)
    {
      if ((a4 & 1) == 0) {
        sub_100E841F8();
      }
    }
    else
    {
      sub_100E71910(v24, a4 & 1);
      uint64_t v26 = sub_100724D9C(v15, v11);
      if ((v25 & 1) != (v27 & 1)) {
        goto LABEL_20;
      }
      unint64_t v21 = v26;
    }
    uint64_t v28 = (void *)*v48;
    if (v25)
    {
      sub_10001CFB8(v15, v11);
      uint64_t v12 = (uint64_t *)(v28[7] + 32 * v21);
      uint64_t v13 = v12[2];
      unint64_t v14 = v12[3];
      sub_10001CFB8(*v12, v12[1]);
      sub_10001CFB8(v13, v14);
      *uint64_t v12 = v35;
      v12[1] = v16;
      void v12[2] = v18;
      v12[3] = v17;
    }
    else
    {
      v28[(v21 >> 6) + 8] |= 1 << v21;
      uint64_t v29 = (uint64_t *)(v28[6] + 16 * v21);
      *uint64_t v29 = v15;
      v29[1] = v11;
      Swift::Int v30 = (uint64_t *)(v28[7] + 32 * v21);
      *Swift::Int v30 = v35;
      v30[1] = v16;
      uint64_t v30[2] = v18;
      v30[3] = v17;
      uint64_t v31 = v28[2];
      BOOL v32 = __OFADD__(v31, 1);
      uint64_t v33 = v31 + 1;
      if (v32) {
        goto LABEL_19;
      }
      void v28[2] = v33;
    }
    sub_100BD7DF8(&v36);
    unint64_t v11 = *((void *)&v36 + 1);
    a4 = 1;
  }
  __break(1u);
LABEL_19:
  __break(1u);
LABEL_20:
  uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

uint64_t sub_100EC9020(uint64_t a1, uint64_t a2, uint64_t a3, char a4, void *a5)
{
  uint64_t v7 = -1 << *(unsigned char *)(a1 + 32);
  uint64_t v8 = ~v7;
  uint64_t v9 = *(void *)(a1 + 64);
  uint64_t v10 = -v7;
  uint64_t v56 = a1;
  uint64_t v57 = a1 + 64;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  else {
    uint64_t v11 = -1;
  }
  uint64_t v58 = v8;
  uint64_t v59 = 0;
  uint64_t v60 = v11 & v9;
  uint64_t v61 = a2;
  uint64_t v62 = a3;
  swift_bridgeObjectRetain();
  swift_retain();
  sub_100BD8008((uint64_t)&v52);
  char v12 = v55;
  if (v55 == 3)
  {
LABEL_5:
    swift_release();
    swift_bridgeObjectRelease();
    sub_100132C20();
    return swift_release();
  }
  uint64_t v15 = v52;
  unint64_t v14 = v53;
  uint64_t v51 = v54;
  uint64_t v16 = (void *)*a5;
  unint64_t v18 = sub_100724D9C(v52, v53);
  uint64_t v19 = v16[2];
  BOOL v20 = (v17 & 1) == 0;
  uint64_t v21 = v19 + v20;
  if (__OFADD__(v19, v20))
  {
LABEL_26:
    __break(1u);
LABEL_27:
    __break(1u);
    goto LABEL_28;
  }
  char v22 = v17;
  if (v16[3] >= v21)
  {
    if (a4)
    {
      char v25 = (void *)*a5;
      if ((v17 & 1) == 0) {
        goto LABEL_15;
      }
    }
    else
    {
      sub_100E843E8();
      char v25 = (void *)*a5;
      if ((v22 & 1) == 0) {
        goto LABEL_15;
      }
    }
    goto LABEL_13;
  }
  sub_100E71C80(v21, a4 & 1);
  uint64_t v23 = sub_100724D9C(v15, v14);
  if ((v22 & 1) == (v24 & 1))
  {
    unint64_t v18 = v23;
    char v25 = (void *)*a5;
    if ((v22 & 1) == 0)
    {
LABEL_15:
      v25[(v18 >> 6) + 8] |= 1 << v18;
      char v27 = (uint64_t *)(v25[6] + 16 * v18);
      uint64_t *v27 = v15;
      v27[1] = v14;
      uint64_t v28 = v25[7] + 16 * v18;
      *(void *)uint64_t v28 = v51;
      *(unsigned char *)(v28 + 8) = v12;
      uint64_t v29 = v25[2];
      BOOL v30 = __OFADD__(v29, 1);
      uint64_t v31 = v29 + 1;
      if (!v30)
      {
        v25[2] = v31;
LABEL_18:
        while (1)
        {
          sub_100BD8008((uint64_t)&v52);
          char v33 = v55;
          if (v55 == 3) {
            goto LABEL_5;
          }
          uint64_t v35 = v52;
          unint64_t v34 = v53;
          uint64_t v36 = v54;
          uint64_t v37 = (void *)*a5;
          unint64_t v39 = sub_100724D9C(v52, v53);
          uint64_t v40 = v37[2];
          BOOL v41 = (v38 & 1) == 0;
          uint64_t v42 = v40 + v41;
          if (__OFADD__(v40, v41)) {
            goto LABEL_26;
          }
          char v43 = v38;
          if (v37[3] < v42)
          {
            sub_100E71C80(v42, 1);
            uint64_t v44 = sub_100724D9C(v35, v34);
            if ((v43 & 1) != (v45 & 1)) {
              goto LABEL_28;
            }
            unint64_t v39 = v44;
          }
          uint64_t v46 = (void *)*a5;
          if (v43)
          {
            sub_10001CFB8(v35, v34);
            uint64_t v32 = v46[7] + 16 * v39;
            *(void *)uint64_t v32 = v36;
            *(unsigned char *)(v32 + 8) = v33;
          }
          else
          {
            v46[(v39 >> 6) + 8] |= 1 << v39;
            uint64_t v47 = (uint64_t *)(v46[6] + 16 * v39);
            uint64_t *v47 = v35;
            v47[1] = v34;
            uint64_t v48 = v46[7] + 16 * v39;
            *(void *)uint64_t v48 = v36;
            *(unsigned char *)(v48 + 8) = v33;
            uint64_t v49 = v46[2];
            BOOL v30 = __OFADD__(v49, 1);
            uint64_t v50 = v49 + 1;
            if (v30) {
              goto LABEL_27;
            }
            v46[2] = v50;
          }
        }
      }
      goto LABEL_27;
    }
LABEL_13:
    sub_10001CFB8(v15, v14);
    uint64_t v26 = v25[7] + 16 * v18;
    *(void *)uint64_t v26 = v51;
    *(unsigned char *)(v26 + 8) = v12;
    goto LABEL_18;
  }
LABEL_28:
  uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

void sub_100EC9334()
{
  while (1)
  {
    int64_t v6 = *(void *)(v0 + 24);
    unint64_t v7 = *(void *)(v0 + 32);
    if (!v7) {
      break;
    }
    uint64_t v1 = (v7 - 1) & v7;
    unint64_t v2 = __clz(__rbit64(v7)) | (v6 << 6);
LABEL_3:
    uint64_t v3 = *(void *)(*(void *)v0 + 56) + 16 * v2;
    uint64_t v4 = *(void *)v3;
    char v5 = *(unsigned char *)(v3 + 8);
    *(void *)(v0 + 24) = v6;
    *(void *)(v0 + 32) = v1;
    uint64_t v15 = v4;
    char v16 = v5;
    if ((*(uint64_t (**)(uint64_t *))(v0 + 40))(&v15)) {
      return;
    }
  }
  int64_t v8 = v6 + 1;
  if (!__OFADD__(v6, 1))
  {
    int64_t v9 = (unint64_t)(*(void *)(v0 + 16) + 64) >> 6;
    int64_t v10 = *(void *)(v0 + 24);
    if (v8 >= v9) {
      goto LABEL_23;
    }
    uint64_t v11 = *(void *)(v0 + 8);
    unint64_t v12 = *(void *)(v11 + 8 * v8);
    if (v12) {
      goto LABEL_14;
    }
    int64_t v13 = v6 + 2;
    int64_t v10 = v6 + 1;
    if (v6 + 2 >= v9) {
      goto LABEL_23;
    }
    unint64_t v12 = *(void *)(v11 + 8 * v13);
    if (!v12)
    {
      int64_t v10 = v6 + 2;
      if (v6 + 3 >= v9) {
        goto LABEL_23;
      }
      unint64_t v12 = *(void *)(v11 + 8 * (v6 + 3));
      if (v12)
      {
        int64_t v8 = v6 + 3;
        goto LABEL_14;
      }
      int64_t v13 = v6 + 4;
      int64_t v10 = v6 + 3;
      if (v6 + 4 >= v9) {
        goto LABEL_23;
      }
      unint64_t v12 = *(void *)(v11 + 8 * v13);
      if (!v12)
      {
        int64_t v8 = v6 + 5;
        int64_t v10 = v6 + 4;
        if (v6 + 5 >= v9) {
          goto LABEL_23;
        }
        unint64_t v12 = *(void *)(v11 + 8 * v8);
        if (!v12)
        {
          int64_t v10 = v9 - 1;
          int64_t v14 = v6 + 6;
          while (v9 != v14)
          {
            unint64_t v12 = *(void *)(v11 + 8 * v14++);
            if (v12)
            {
              int64_t v8 = v14 - 1;
              goto LABEL_14;
            }
          }
LABEL_23:
          *(void *)(v0 + 24) = v10;
          *(void *)(v0 + 32) = 0;
          return;
        }
        goto LABEL_14;
      }
    }
    int64_t v8 = v13;
LABEL_14:
    uint64_t v1 = (v12 - 1) & v12;
    unint64_t v2 = __clz(__rbit64(v12)) + (v8 << 6);
    int64_t v6 = v8;
    goto LABEL_3;
  }
  __break(1u);
}

uint64_t sub_100EC94A8@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v3 = *a1;
  unint64_t v2 = a1[1];
  uint64_t v4 = a1[2];
  unint64_t v5 = a1[3];
  uint64_t v6 = a1[4];
  unint64_t v7 = a1[5];
  *a2 = *a1;
  a2[1] = v2;
  a2[2] = v4;
  a2[3] = v5;
  a2[4] = v6;
  a2[5] = v7;
  sub_1000361E0(v3, v2);
  sub_1000361E0(v4, v5);

  return sub_1000361E0(v6, v7);
}

uint64_t sub_100EC9510@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2 = *(void *)a1;
  char v3 = *(unsigned char *)(a1 + 24);
  *(void *)a2 = *(void *)a1;
  long long v4 = *(_OWORD *)(a1 + 8);
  *(_OWORD *)(a2 + 8) = v4;
  *(unsigned char *)(a2 + 24) = v3;
  return sub_1000361E0(v2, v4);
}

uint64_t sub_100EC9534(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_10000588C(&qword_101650938);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_100EC959C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_10000588C(&qword_101650938);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_100EC9604(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_100EC964C()
{
  return _swift_deallocObject(v0, 17, 7);
}

uint64_t sub_100EC965C(uint64_t a1)
{
  return sub_100EC6AD0(a1, *(unsigned char *)(v1 + 16));
}

uint64_t sub_100EC9664(uint64_t a1, void (*a2)(uint64_t, unint64_t, uint64_t, uint64_t))
{
  uint64_t v4 = 1 << *(unsigned char *)(a1 + 32);
  uint64_t v5 = -1;
  if (v4 < 64) {
    uint64_t v5 = ~(-1 << v4);
  }
  unint64_t v6 = v5 & *(void *)(a1 + 64);
  int64_t v22 = (unint64_t)(v4 + 63) >> 6;
  uint64_t result = swift_bridgeObjectRetain();
  int64_t v8 = 0;
  while (1)
  {
    if (v6)
    {
      unint64_t v9 = __clz(__rbit64(v6));
      v6 &= v6 - 1;
      unint64_t v10 = v9 | (v8 << 6);
      goto LABEL_5;
    }
    int64_t v18 = v8 + 1;
    if (__OFADD__(v8, 1))
    {
      __break(1u);
      goto LABEL_25;
    }
    if (v18 >= v22) {
      return swift_release();
    }
    unint64_t v19 = *(void *)(v21 + 8 * v18);
    ++v8;
    if (!v19)
    {
      int64_t v8 = v18 + 1;
      if (v18 + 1 >= v22) {
        return swift_release();
      }
      unint64_t v19 = *(void *)(v21 + 8 * v8);
      if (!v19)
      {
        int64_t v8 = v18 + 2;
        if (v18 + 2 >= v22) {
          return swift_release();
        }
        unint64_t v19 = *(void *)(v21 + 8 * v8);
        if (!v19)
        {
          int64_t v8 = v18 + 3;
          if (v18 + 3 >= v22) {
            return swift_release();
          }
          unint64_t v19 = *(void *)(v21 + 8 * v8);
          if (!v19) {
            break;
          }
        }
      }
    }
LABEL_22:
    unint64_t v6 = (v19 - 1) & v19;
    unint64_t v10 = __clz(__rbit64(v19)) + (v8 << 6);
LABEL_5:
    uint64_t v11 = 16 * v10;
    unint64_t v12 = (uint64_t *)(*(void *)(a1 + 48) + v11);
    uint64_t v13 = *v12;
    unint64_t v14 = v12[1];
    uint64_t v15 = *(void *)(a1 + 56) + v11;
    uint64_t v16 = *(void *)v15;
    uint64_t v17 = *(unsigned __int8 *)(v15 + 8);
    sub_1000361E0(*v12, v14);
    a2(v13, v14, v16, v17);
    uint64_t result = sub_10001CFB8(v13, v14);
  }
  int64_t v20 = v18 + 4;
  if (v20 >= v22) {
    return swift_release();
  }
  unint64_t v19 = *(void *)(v21 + 8 * v20);
  if (v19)
  {
    int64_t v8 = v20;
    goto LABEL_22;
  }
  while (1)
  {
    int64_t v8 = v20 + 1;
    if (__OFADD__(v20, 1)) {
      break;
    }
    if (v8 >= v22) {
      return swift_release();
    }
    unint64_t v19 = *(void *)(v21 + 8 * v8);
    ++v20;
    if (v19) {
      goto LABEL_22;
    }
  }
LABEL_25:
  __break(1u);
  return result;
}

void *sub_100EC9848(uint64_t a1, int a2, uint64_t a3, uint64_t a4)
{
  uint64_t v29 = a3;
  uint64_t v30 = a4;
  v28[3] = a2;
  uint64_t v5 = sub_10000588C(&qword_101662008);
  __chkstk_darwin(v5 - 8);
  unint64_t v7 = (char *)v28 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t RequestBeacon_OwnedDevice = type metadata accessor for FetchRequestBeacon_OwnedDevice(0);
  uint64_t v9 = *(void *)(RequestBeacon_OwnedDevice - 8);
  uint64_t v10 = __chkstk_darwin(RequestBeacon_OwnedDevice);
  unint64_t v12 = (char *)v28 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v10);
  uint64_t v33 = (uint64_t)v28 - v13;
  uint64_t v14 = type metadata accessor for FetchRequestBeacon(0) - 8;
  __chkstk_darwin(v14);
  uint64_t v17 = (char *)v28 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v18 = *(void *)(a1 + 16);
  if (!v18) {
    return _swiftEmptyArrayStorage;
  }
  uint64_t v19 = a1 + ((*(unsigned __int8 *)(v15 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v15 + 80));
  uint64_t v34 = *(void *)(v15 + 72);
  int64_t v20 = (void (**)(char *, void, uint64_t, uint64_t))(v9 + 56);
  uint64_t v32 = v9;
  uint64_t v21 = (unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48);
  int64_t v22 = _swiftEmptyArrayStorage;
  uint64_t v31 = v12;
  do
  {
    sub_100ECAA64(v19, (uint64_t)v17, type metadata accessor for FetchRequestBeacon);
    sub_100ECAA64((uint64_t)v17, (uint64_t)v7, type metadata accessor for FetchRequestBeacon);
    (*v20)(v7, 0, 1, RequestBeacon_OwnedDevice);
    sub_100ECAACC((uint64_t)v17, type metadata accessor for FetchRequestBeacon);
    if ((*v21)(v7, 1, RequestBeacon_OwnedDevice) == 1)
    {
      sub_10001DAB4((uint64_t)v7, &qword_101662008);
    }
    else
    {
      uint64_t v23 = v33;
      sub_100ECAB2C((uint64_t)v7, v33);
      sub_100ECAB2C(v23, (uint64_t)v12);
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
        int64_t v22 = (void *)sub_100A7105C(0, v22[2] + 1, 1, (unint64_t)v22);
      }
      unint64_t v25 = v22[2];
      unint64_t v24 = v22[3];
      if (v25 >= v24 >> 1) {
        int64_t v22 = (void *)sub_100A7105C(v24 > 1, v25 + 1, 1, (unint64_t)v22);
      }
      v22[2] = v25 + 1;
      uint64_t v26 = (uint64_t)v22
          + ((*(unsigned __int8 *)(v32 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v32 + 80))
          + *(void *)(v32 + 72) * v25;
      unint64_t v12 = v31;
      sub_100ECAB2C((uint64_t)v31, v26);
    }
    v19 += v34;
    --v18;
  }
  while (v18);
  return v22;
}

uint64_t sub_100EC9B88(uint64_t a1, char a2, uint64_t a3, uint64_t a4, char a5, uint64_t a6)
{
  *(unsigned char *)(v6 + 337) = a5;
  *(void *)(v6 + 136) = a4;
  *(void *)(v6 + 144) = a6;
  *(unsigned char *)(v6 + 336) = a2;
  *(void *)(v6 + 120) = a1;
  *(void *)(v6 + 128) = a3;
  uint64_t v7 = type metadata accessor for HashAlgorithm();
  *(void *)(v6 + 152) = v7;
  *(void *)(v6 + 160) = *(void *)(v7 - 8);
  *(void *)(v6 + 168) = swift_task_alloc();
  uint64_t v8 = type metadata accessor for Date();
  *(void *)(v6 + 176) = v8;
  *(void *)(v6 + 184) = *(void *)(v8 - 8);
  *(void *)(v6 + 192) = swift_task_alloc();
  uint64_t v9 = type metadata accessor for JSONEncoder.DateEncodingStrategy();
  *(void *)(v6 + 200) = v9;
  *(void *)(v6 + 208) = *(void *)(v9 - 8);
  *(void *)(v6 + 216) = swift_task_alloc();
  return _swift_task_switch(sub_100EC9D0C, 0, 0);
}

void sub_100EC9D0C()
{
  type metadata accessor for JSONEncoder();
  swift_allocObject();
  *(void *)(v0 + 224) = JSONEncoder.init()();
  if (qword_101637180 != -1) {
    swift_once();
  }
  uint64_t v2 = *(void *)(v0 + 208);
  uint64_t v1 = *(void *)(v0 + 216);
  uint64_t v3 = *(void *)(v0 + 200);
  int v4 = *(unsigned __int8 *)(v0 + 337);
  uint64_t v5 = sub_100010324(v3, (uint64_t)qword_101661FC8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v2 + 16))(v1, v5, v3);
  dispatch thunk of JSONEncoder.dateEncodingStrategy.setter();
  uint64_t v6 = *(void *)(v0 + 128);
  uint64_t v7 = *(void *)(v0 + 136);
  int v8 = *(unsigned __int8 *)(v0 + 336);
  if (v4 == 1)
  {
    uint64_t v9 = sub_100EC9848(*(void *)(v0 + 120), v8, v6, v7);
    char v11 = v10;
    uint64_t v13 = v12;
    uint64_t v15 = v14;
    swift_bridgeObjectRelease();
    *(void *)(v0 + 48) = v9;
    *(unsigned char *)(v0 + 56) = v11;
    *(void *)(v0 + 64) = v13;
    *(void *)(v0 + 72) = v15;
    sub_100ECA9F0();
  }
  else
  {
    *(void *)(v0 + 16) = *(void *)(v0 + 120);
    *(unsigned char *)(v0 + 24) = v8;
    *(void *)(v0 + 32) = v6;
    *(void *)(v0 + 40) = v7;
    sub_100ECA99C();
  }
  uint64_t v16 = dispatch thunk of JSONEncoder.encode<A>(_:)();
  uint64_t v18 = v17;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  *(void *)(v0 + 232) = v18;
  *(void *)(v0 + 240) = v16;
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  sub_10016C0FC(1702195828, 0xE400000000000000, 0xD00000000000001BLL, 0x80000001013F64C0, isUniquelyReferenced_nonNull_native);
  swift_bridgeObjectRelease();
  id v20 = [self currentDevice];
  if (!v20)
  {
    __break(1u);
    goto LABEL_12;
  }
  uint64_t v21 = v20;
  id v22 = [v20 serverFriendlyDescription];

  if (!v22)
  {
LABEL_12:
    __break(1u);
    return;
  }
  uint64_t v24 = *(void *)(v0 + 184);
  uint64_t v23 = *(void *)(v0 + 192);
  uint64_t v25 = *(void *)(v0 + 176);
  uint64_t v26 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v28 = v27;

  char v29 = swift_isUniquelyReferenced_nonNull_native();
  sub_10016C0FC(v26, v28, 0xD000000000000011, 0x80000001013F64E0, v29);
  swift_bridgeObjectRelease();
  Date.init()();
  uint64_t v30 = Date.epoch.getter();
  (*(void (**)(uint64_t, uint64_t))(v24 + 8))(v23, v25);
  *(void *)(v0 + 96) = v30;
  uint64_t v31 = dispatch thunk of CustomStringConvertible.description.getter();
  uint64_t v33 = v32;
  char v34 = swift_isUniquelyReferenced_nonNull_native();
  sub_10016C0FC(v31, v33, 0xD000000000000015, 0x80000001013F6500, v34);
  swift_bridgeObjectRelease();
  *(void *)(v0 + 104) = 1;
  uint64_t v35 = dispatch thunk of CustomStringConvertible.description.getter();
  uint64_t v37 = v36;
  char v38 = swift_isUniquelyReferenced_nonNull_native();
  sub_10016C0FC(v35, v37, 0xD000000000000013, 0x80000001013F6520, v38);
  uint64_t v39 = swift_bridgeObjectRelease();
  uint64_t v40 = sub_100BCABFC(v39);
  uint64_t v42 = v41;
  char v43 = swift_isUniquelyReferenced_nonNull_native();
  sub_10016C0FC(v40, v42, 0x6567412D72657355, 0xEA0000000000746ELL, v43);
  swift_bridgeObjectRelease();
  char v44 = swift_isUniquelyReferenced_nonNull_native();
  sub_10016C0FC(52, 0xE100000000000000, 0x762D747065636341, 0xEE006E6F69737265, v44);
  *(void *)(v0 + 248) = _swiftEmptyDictionarySingleton;
  swift_bridgeObjectRelease();
  uint64_t v46 = (void (__cdecl *)())((char *)&dword_10165ABB0 + dword_10165ABB0);
  char v45 = (void *)swift_task_alloc();
  *(void *)(v0 + 256) = v45;
  *char v45 = v0;
  v45[1] = sub_100ECA23C;
  v46();
}

uint64_t sub_100ECA23C(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *v2;
  *(void *)(v3 + 264) = a1;
  *(void *)(v3 + 272) = a2;
  swift_task_dealloc();
  return _swift_task_switch(sub_100ECA33C, 0, 0);
}

uint64_t sub_100ECA33C()
{
  uint64_t v2 = v0[33];
  unint64_t v1 = v0[34];
  unint64_t v4 = v0[29];
  uint64_t v3 = v0[30];
  uint64_t v6 = v0[20];
  uint64_t v5 = v0[21];
  uint64_t v7 = v0[19];
  v0[10] = v2;
  v0[11] = v1;
  sub_1000361E0(v3, v4);
  sub_1000361E0(v2, v1);
  sub_100A42CBC(v3, v4);
  sub_10001CFB8(v3, v4);
  sub_10001CFB8(v2, v1);
  uint64_t v8 = v0[11];
  v0[35] = v0[10];
  v0[36] = v8;
  (*(void (**)(uint64_t, void, uint64_t))(v6 + 104))(v5, enum case for HashAlgorithm.sha256(_:), v7);
  uint64_t v9 = Data.hash(algorithm:)();
  uint64_t v11 = v10;
  v0[37] = v9;
  v0[38] = v10;
  (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v5, v7);
  uint64_t v15 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))((char *)&dword_10165ABA8 + dword_10165ABA8);
  uint64_t v12 = (void *)swift_task_alloc();
  v0[39] = v12;
  *uint64_t v12 = v0;
  v12[1] = sub_100ECA4C4;
  uint64_t v13 = v0[18];
  return v15(v9, v11, v13);
}

uint64_t sub_100ECA4C4(uint64_t a1)
{
  unint64_t v4 = *(void **)v2;
  *(void *)(*(void *)v2 + 320) = v1;
  swift_task_dealloc();
  if (v1)
  {
    uint64_t v5 = sub_100ECA724;
  }
  else
  {
    uint64_t v6 = v4[37];
    unint64_t v7 = v4[38];
    v4[41] = a1;
    sub_10001CFB8(v6, v7);
    uint64_t v5 = sub_100ECA5F0;
  }
  return _swift_task_switch(v5, 0, 0);
}

uint64_t sub_100ECA5F0()
{
  uint64_t v13 = v0;
  uint64_t v2 = v0[40];
  uint64_t v1 = v0[41];
  uint64_t v3 = v0[31];
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v12 = v3;
  sub_1001EE9C8(v1, (uint64_t)sub_100BD6E00, 0, isUniquelyReferenced_nonNull_native, &v12);
  if (v2)
  {
    return swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v6 = v0[35];
    unint64_t v7 = v0[36];
    uint64_t v8 = v12;
    swift_bridgeObjectRelease();
    swift_release();
    swift_release();
    sub_10001CFB8(v6, v7);
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v9 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))v0[1];
    uint64_t v11 = v0[29];
    uint64_t v10 = v0[30];
    return v9(v8, v10, v11);
  }
}

uint64_t sub_100ECA724()
{
  uint64_t v1 = v0[35];
  unint64_t v2 = v0[36];
  sub_10001CFB8(v0[37], v0[38]);
  sub_10001CFB8(v1, v2);
  if (qword_101637238 != -1) {
    swift_once();
  }
  uint64_t v3 = type metadata accessor for Logger();
  sub_100010324(v3, (uint64_t)qword_10170EF80);
  swift_errorRetain();
  swift_errorRetain();
  unint64_t v4 = Logger.logObject.getter();
  os_log_type_t v5 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v4, v5))
  {
    uint64_t v6 = (uint8_t *)swift_slowAlloc();
    unint64_t v7 = (void *)swift_slowAlloc();
    *(_DWORD *)uint64_t v6 = 138543362;
    swift_errorRetain();
    uint64_t v8 = _swift_stdlib_bridgeErrorToNSError();
    v0[14] = v8;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *unint64_t v7 = v8;
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl((void *)&_mh_execute_header, v4, v5, "Failed to generate fetch request attestation header: %{public}@.", v6, 0xCu);
    sub_10000588C((uint64_t *)&unk_101638EA0);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
    swift_release();
    swift_release();

    swift_errorRelease();
  }
  else
  {
    swift_release();
    swift_errorRelease();
    swift_errorRelease();
    swift_errorRelease();
    swift_release();
  }
  uint64_t v9 = v0[31];
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v10 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))v0[1];
  uint64_t v12 = v0[29];
  uint64_t v11 = v0[30];
  return v10(v9, v11, v12);
}

unint64_t sub_100ECA99C()
{
  unint64_t result = qword_101661FF8;
  if (!qword_101661FF8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_101661FF8);
  }
  return result;
}

unint64_t sub_100ECA9F0()
{
  unint64_t result = qword_101662000;
  if (!qword_101662000)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_101662000);
  }
  return result;
}

uint64_t type metadata accessor for FetchRequestBeacon_OwnedDevice(uint64_t a1)
{
  return sub_1000F4EA4(a1, qword_101662068);
}

uint64_t sub_100ECAA64(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

uint64_t sub_100ECAACC(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t sub_100ECAB2C(uint64_t a1, uint64_t a2)
{
  uint64_t RequestBeacon_OwnedDevice = type metadata accessor for FetchRequestBeacon_OwnedDevice(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(RequestBeacon_OwnedDevice - 8) + 32))(a2, a1, RequestBeacon_OwnedDevice);
  return a2;
}

uint64_t sub_100ECAB90(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  return sub_100EC5574(a1, a2, a3, a4, *(uint64_t **)(v4 + 16), *(uint64_t **)(v4 + 24));
}

uint64_t *sub_100ECAB98(uint64_t *a1, uint64_t *a2)
{
  uint64_t RequestBeacon = type metadata accessor for FetchRequestBeacon(0);
  int v5 = *(_DWORD *)(*(void *)(RequestBeacon - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v15 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v15 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v6 = (int *)RequestBeacon;
    uint64_t v7 = type metadata accessor for UUID();
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v7 - 8) + 16))(a1, a2, v7);
    uint64_t v8 = v6[5];
    uint64_t v9 = (char *)a1 + v8;
    uint64_t v10 = (char *)a2 + v8;
    uint64_t v11 = type metadata accessor for DateInterval();
    uint64_t v12 = *(void *)(v11 - 8);
    uint64_t v13 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v12 + 48);
    if (v13(v10, 1, v11))
    {
      uint64_t v14 = sub_10000588C(&qword_101650938);
      memcpy(v9, v10, *(void *)(*(void *)(v14 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v12 + 16))(v9, v10, v11);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v12 + 56))(v9, 0, 1, v11);
    }
    uint64_t v16 = v6[6];
    uint64_t v17 = (char *)a1 + v16;
    uint64_t v18 = (char *)a2 + v16;
    if (v13((char *)a2 + v16, 1, v11))
    {
      uint64_t v19 = sub_10000588C(&qword_101650938);
      memcpy(v17, v18, *(void *)(*(void *)(v19 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v12 + 16))(v17, v18, v11);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v12 + 56))(v17, 0, 1, v11);
    }
    *(uint64_t *)((char *)a1 + v6[7]) = *(uint64_t *)((char *)a2 + v6[7]);
    *(_OWORD *)((char *)a1 + v6[8]) = *(_OWORD *)((char *)a2 + v6[8]);
    *(uint64_t *)((char *)a1 + v6[9]) = *(uint64_t *)((char *)a2 + v6[9]);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  return a1;
}

uint64_t sub_100ECAE1C(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  uint64_t RequestBeacon = type metadata accessor for FetchRequestBeacon(0);
  uint64_t v4 = a1 + *(int *)(RequestBeacon + 20);
  uint64_t v5 = type metadata accessor for DateInterval();
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v7 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v6 + 48);
  if (!v7(v4, 1, v5)) {
    (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v4, v5);
  }
  uint64_t v8 = a1 + *(int *)(RequestBeacon + 24);
  if (!v7(v8, 1, v5)) {
    (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v8, v5);
  }
  swift_bridgeObjectRelease();

  return swift_bridgeObjectRelease();
}

uint64_t sub_100ECAF78(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a1, a2, v4);
  uint64_t RequestBeacon = (int *)type metadata accessor for FetchRequestBeacon(0);
  uint64_t v6 = RequestBeacon[5];
  uint64_t v7 = (void *)(a1 + v6);
  uint64_t v8 = (const void *)(a2 + v6);
  uint64_t v9 = type metadata accessor for DateInterval();
  uint64_t v10 = *(void *)(v9 - 8);
  uint64_t v11 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v10 + 48);
  if (v11(v8, 1, v9))
  {
    uint64_t v12 = sub_10000588C(&qword_101650938);
    memcpy(v7, v8, *(void *)(*(void *)(v12 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v10 + 16))(v7, v8, v9);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v10 + 56))(v7, 0, 1, v9);
  }
  uint64_t v13 = RequestBeacon[6];
  uint64_t v14 = (void *)(a1 + v13);
  uint64_t v15 = (const void *)(a2 + v13);
  if (v11((const void *)(a2 + v13), 1, v9))
  {
    uint64_t v16 = sub_10000588C(&qword_101650938);
    memcpy(v14, v15, *(void *)(*(void *)(v16 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v10 + 16))(v14, v15, v9);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v10 + 56))(v14, 0, 1, v9);
  }
  *(void *)(a1 + RequestBeacon[7]) = *(void *)(a2 + RequestBeacon[7]);
  *(_OWORD *)(a1 + RequestBeacon[8]) = *(_OWORD *)(a2 + RequestBeacon[8]);
  *(void *)(a1 + RequestBeacon[9]) = *(void *)(a2 + RequestBeacon[9]);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t sub_100ECB1AC(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 24))(a1, a2, v4);
  uint64_t RequestBeacon = (int *)type metadata accessor for FetchRequestBeacon(0);
  uint64_t v6 = RequestBeacon[5];
  uint64_t v7 = (void *)(a1 + v6);
  uint64_t v8 = (void *)(a2 + v6);
  uint64_t v9 = type metadata accessor for DateInterval();
  uint64_t v10 = *(void *)(v9 - 8);
  uint64_t v11 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v10 + 48);
  int v12 = v11(v7, 1, v9);
  int v13 = v11(v8, 1, v9);
  if (v12)
  {
    if (!v13)
    {
      (*(void (**)(void *, void *, uint64_t))(v10 + 16))(v7, v8, v9);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v10 + 56))(v7, 0, 1, v9);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v13)
  {
    (*(void (**)(void *, uint64_t))(v10 + 8))(v7, v9);
LABEL_6:
    uint64_t v14 = sub_10000588C(&qword_101650938);
    memcpy(v7, v8, *(void *)(*(void *)(v14 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(void *, void *, uint64_t))(v10 + 24))(v7, v8, v9);
LABEL_7:
  uint64_t v15 = RequestBeacon[6];
  uint64_t v16 = (void *)(a1 + v15);
  uint64_t v17 = (void *)(a2 + v15);
  int v18 = v11((void *)(a1 + v15), 1, v9);
  int v19 = v11(v17, 1, v9);
  if (!v18)
  {
    if (!v19)
    {
      (*(void (**)(void *, void *, uint64_t))(v10 + 24))(v16, v17, v9);
      goto LABEL_13;
    }
    (*(void (**)(void *, uint64_t))(v10 + 8))(v16, v9);
    goto LABEL_12;
  }
  if (v19)
  {
LABEL_12:
    uint64_t v20 = sub_10000588C(&qword_101650938);
    memcpy(v16, v17, *(void *)(*(void *)(v20 - 8) + 64));
    goto LABEL_13;
  }
  (*(void (**)(void *, void *, uint64_t))(v10 + 16))(v16, v17, v9);
  (*(void (**)(void *, void, uint64_t, uint64_t))(v10 + 56))(v16, 0, 1, v9);
LABEL_13:
  *(void *)(a1 + RequestBeacon[7]) = *(void *)(a2 + RequestBeacon[7]);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v21 = RequestBeacon[8];
  uint64_t v22 = a1 + v21;
  uint64_t v23 = a2 + v21;
  *(unsigned char *)uint64_t v22 = *(unsigned char *)v23;
  *(unsigned char *)(v22 + 1) = *(unsigned char *)(v23 + 1);
  *(void *)(v22 + 8) = *(void *)(v23 + 8);
  *(void *)(a1 + RequestBeacon[9]) = *(void *)(a2 + RequestBeacon[9]);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t sub_100ECB4C8(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a1, a2, v4);
  uint64_t RequestBeacon = (int *)type metadata accessor for FetchRequestBeacon(0);
  uint64_t v6 = RequestBeacon[5];
  uint64_t v7 = (void *)(a1 + v6);
  uint64_t v8 = (const void *)(a2 + v6);
  uint64_t v9 = type metadata accessor for DateInterval();
  uint64_t v10 = *(void *)(v9 - 8);
  uint64_t v11 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v10 + 48);
  if (v11(v8, 1, v9))
  {
    uint64_t v12 = sub_10000588C(&qword_101650938);
    memcpy(v7, v8, *(void *)(*(void *)(v12 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v10 + 32))(v7, v8, v9);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v10 + 56))(v7, 0, 1, v9);
  }
  uint64_t v13 = RequestBeacon[6];
  uint64_t v14 = (void *)(a1 + v13);
  uint64_t v15 = (const void *)(a2 + v13);
  if (v11((const void *)(a2 + v13), 1, v9))
  {
    uint64_t v16 = sub_10000588C(&qword_101650938);
    memcpy(v14, v15, *(void *)(*(void *)(v16 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v10 + 32))(v14, v15, v9);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v10 + 56))(v14, 0, 1, v9);
  }
  *(void *)(a1 + RequestBeacon[7]) = *(void *)(a2 + RequestBeacon[7]);
  *(_OWORD *)(a1 + RequestBeacon[8]) = *(_OWORD *)(a2 + RequestBeacon[8]);
  *(void *)(a1 + RequestBeacon[9]) = *(void *)(a2 + RequestBeacon[9]);
  return a1;
}

uint64_t sub_100ECB6F0(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 40))(a1, a2, v4);
  uint64_t RequestBeacon = (int *)type metadata accessor for FetchRequestBeacon(0);
  uint64_t v6 = RequestBeacon[5];
  uint64_t v7 = (void *)(a1 + v6);
  uint64_t v8 = (void *)(a2 + v6);
  uint64_t v9 = type metadata accessor for DateInterval();
  uint64_t v10 = *(void *)(v9 - 8);
  uint64_t v11 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v10 + 48);
  int v12 = v11(v7, 1, v9);
  int v13 = v11(v8, 1, v9);
  if (v12)
  {
    if (!v13)
    {
      (*(void (**)(void *, void *, uint64_t))(v10 + 32))(v7, v8, v9);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v10 + 56))(v7, 0, 1, v9);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v13)
  {
    (*(void (**)(void *, uint64_t))(v10 + 8))(v7, v9);
LABEL_6:
    uint64_t v14 = sub_10000588C(&qword_101650938);
    memcpy(v7, v8, *(void *)(*(void *)(v14 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(void *, void *, uint64_t))(v10 + 40))(v7, v8, v9);
LABEL_7:
  uint64_t v15 = RequestBeacon[6];
  uint64_t v16 = (void *)(a1 + v15);
  uint64_t v17 = (void *)(a2 + v15);
  int v18 = v11((void *)(a1 + v15), 1, v9);
  int v19 = v11(v17, 1, v9);
  if (!v18)
  {
    if (!v19)
    {
      (*(void (**)(void *, void *, uint64_t))(v10 + 40))(v16, v17, v9);
      goto LABEL_13;
    }
    (*(void (**)(void *, uint64_t))(v10 + 8))(v16, v9);
    goto LABEL_12;
  }
  if (v19)
  {
LABEL_12:
    uint64_t v20 = sub_10000588C(&qword_101650938);
    memcpy(v16, v17, *(void *)(*(void *)(v20 - 8) + 64));
    goto LABEL_13;
  }
  (*(void (**)(void *, void *, uint64_t))(v10 + 32))(v16, v17, v9);
  (*(void (**)(void *, void, uint64_t, uint64_t))(v10 + 56))(v16, 0, 1, v9);
LABEL_13:
  *(void *)(a1 + RequestBeacon[7]) = *(void *)(a2 + RequestBeacon[7]);
  swift_bridgeObjectRelease();
  uint64_t v21 = RequestBeacon[8];
  uint64_t v22 = a1 + v21;
  uint64_t v23 = a2 + v21;
  *(unsigned char *)uint64_t v22 = *(unsigned char *)v23;
  *(unsigned char *)(v22 + 1) = *(unsigned char *)(v23 + 1);
  *(void *)(v22 + 8) = *(void *)(v23 + 8);
  *(void *)(a1 + RequestBeacon[9]) = *(void *)(a2 + RequestBeacon[9]);
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t sub_100ECB9FC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_100ECBA10);
}

uint64_t sub_100ECBA10(uint64_t a1, uint64_t a2)
{
  uint64_t RequestBeacon = type metadata accessor for FetchRequestBeacon(0);
  uint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(RequestBeacon - 8) + 48);

  return v5(a1, a2, RequestBeacon);
}

uint64_t sub_100ECBA7C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_100ECBA90);
}

uint64_t sub_100ECBA90(uint64_t a1, uint64_t a2)
{
  uint64_t RequestBeacon = type metadata accessor for FetchRequestBeacon(0);
  uint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(RequestBeacon - 8) + 56);

  return v5(a1, a2, a2, RequestBeacon);
}

uint64_t sub_100ECBB00()
{
  uint64_t result = type metadata accessor for FetchRequestBeacon(319);
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

ValueMetadata *type metadata accessor for OwnedDeviceFetchRequestContent()
{
  return &type metadata for OwnedDeviceFetchRequestContent;
}

uint64_t destroy for FetchRequestContent()
{
  swift_bridgeObjectRelease();

  return swift_bridgeObjectRelease();
}

uint64_t _s12searchpartyd30OwnedDeviceFetchRequestContentVwcp_0(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(unsigned char *)(a1 + 8) = *(unsigned char *)(a2 + 8);
  uint64_t v3 = *(void *)(a2 + 24);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = v3;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t _s12searchpartyd30OwnedDeviceFetchRequestContentVwca_0(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 8) = *(unsigned char *)(a2 + 8);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t _s12searchpartyd30OwnedDeviceFetchRequestContentVwta_0(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 8) = *(unsigned char *)(a2 + 8);
  uint64_t v4 = *(void *)(a2 + 24);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = v4;
  swift_bridgeObjectRelease();
  return a1;
}

ValueMetadata *type metadata accessor for FetchRequestContent()
{
  return &type metadata for FetchRequestContent;
}

ValueMetadata *type metadata accessor for FetchRequest()
{
  return &type metadata for FetchRequest;
}

ValueMetadata *type metadata accessor for FetchRequestContext.FetchRequestContextPolicy()
{
  return &type metadata for FetchRequestContext.FetchRequestContextPolicy;
}

ValueMetadata *type metadata accessor for FetchRequestBeacon.SearchContext.Mode()
{
  return &type metadata for FetchRequestBeacon.SearchContext.Mode;
}

unsigned char *storeEnumTagSinglePayload for FetchRequestBeacon.FetchRequestBeaconError(unsigned char *result, int a2, int a3)
{
  if ((a3 + 1) >= 0x10000) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) < 0x100) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2)
  {
    switch(v5)
    {
      case 1:
        *uint64_t result = a2;
        return result;
      case 2:
        *(_WORD *)uint64_t result = a2;
        return result;
      case 3:
        goto LABEL_19;
      case 4:
        *(_DWORD *)uint64_t result = a2;
        return result;
      default:
        return result;
    }
  }
  switch(v5)
  {
    case 1:
      *uint64_t result = 0;
      break;
    case 2:
      *(_WORD *)uint64_t result = 0;
      break;
    case 3:
LABEL_19:
      __break(1u);
      JUMPOUT(0x100ECBDD8);
    case 4:
      *(_DWORD *)uint64_t result = 0;
      break;
    default:
      return result;
  }
  return result;
}

ValueMetadata *type metadata accessor for FetchRequestBeacon.FetchRequestBeaconError()
{
  return &type metadata for FetchRequestBeacon.FetchRequestBeaconError;
}

uint64_t *sub_100ECBE10(uint64_t *a1, uint64_t *a2, int *a3)
{
  int v5 = *(_DWORD *)(*((void *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v15 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v15 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v7 = type metadata accessor for UUID();
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v7 - 8) + 16))(a1, a2, v7);
    uint64_t v8 = a3[5];
    uint64_t v9 = (char *)a1 + v8;
    uint64_t v10 = (char *)a2 + v8;
    uint64_t v11 = type metadata accessor for DateInterval();
    uint64_t v12 = *(void *)(v11 - 8);
    int v13 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v12 + 48);
    if (v13(v10, 1, v11))
    {
      uint64_t v14 = sub_10000588C(&qword_101650938);
      memcpy(v9, v10, *(void *)(*(void *)(v14 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v12 + 16))(v9, v10, v11);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v12 + 56))(v9, 0, 1, v11);
    }
    uint64_t v16 = a3[6];
    uint64_t v17 = (char *)a1 + v16;
    int v18 = (char *)a2 + v16;
    if (v13((char *)a2 + v16, 1, v11))
    {
      uint64_t v19 = sub_10000588C(&qword_101650938);
      memcpy(v17, v18, *(void *)(*(void *)(v19 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v12 + 16))(v17, v18, v11);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v12 + 56))(v17, 0, 1, v11);
    }
    uint64_t v20 = a3[8];
    *(uint64_t *)((char *)a1 + a3[7]) = *(uint64_t *)((char *)a2 + a3[7]);
    *(_OWORD *)((char *)a1 + v20) = *(_OWORD *)((char *)a2 + v20);
    *(uint64_t *)((char *)a1 + a3[9]) = *(uint64_t *)((char *)a2 + a3[9]);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  return a1;
}

uint64_t sub_100ECC088(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8))(a1, v4);
  uint64_t v5 = a1 + *(int *)(a2 + 20);
  uint64_t v6 = type metadata accessor for DateInterval();
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
  if (!v8(v5, 1, v6)) {
    (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v5, v6);
  }
  uint64_t v9 = a1 + *(int *)(a2 + 24);
  if (!v8(v9, 1, v6)) {
    (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v9, v6);
  }
  swift_bridgeObjectRelease();

  return swift_bridgeObjectRelease();
}

uint64_t sub_100ECC1DC(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 16))(a1, a2, v6);
  uint64_t v7 = a3[5];
  uint64_t v8 = (void *)(a1 + v7);
  uint64_t v9 = (const void *)(a2 + v7);
  uint64_t v10 = type metadata accessor for DateInterval();
  uint64_t v11 = *(void *)(v10 - 8);
  uint64_t v12 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v11 + 48);
  if (v12(v9, 1, v10))
  {
    uint64_t v13 = sub_10000588C(&qword_101650938);
    memcpy(v8, v9, *(void *)(*(void *)(v13 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v11 + 16))(v8, v9, v10);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v11 + 56))(v8, 0, 1, v10);
  }
  uint64_t v14 = a3[6];
  uint64_t v15 = (void *)(a1 + v14);
  uint64_t v16 = (const void *)(a2 + v14);
  if (v12((const void *)(a2 + v14), 1, v10))
  {
    uint64_t v17 = sub_10000588C(&qword_101650938);
    memcpy(v15, v16, *(void *)(*(void *)(v17 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v11 + 16))(v15, v16, v10);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v11 + 56))(v15, 0, 1, v10);
  }
  uint64_t v18 = a3[8];
  *(void *)(a1 + a3[7]) = *(void *)(a2 + a3[7]);
  *(_OWORD *)(a1 + v18) = *(_OWORD *)(a2 + v18);
  *(void *)(a1 + a3[9]) = *(void *)(a2 + a3[9]);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t sub_100ECC404(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 24))(a1, a2, v6);
  uint64_t v7 = a3[5];
  uint64_t v8 = (void *)(a1 + v7);
  uint64_t v9 = (void *)(a2 + v7);
  uint64_t v10 = type metadata accessor for DateInterval();
  uint64_t v11 = *(void *)(v10 - 8);
  uint64_t v12 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v11 + 48);
  int v13 = v12(v8, 1, v10);
  int v14 = v12(v9, 1, v10);
  if (v13)
  {
    if (!v14)
    {
      (*(void (**)(void *, void *, uint64_t))(v11 + 16))(v8, v9, v10);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v11 + 56))(v8, 0, 1, v10);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v14)
  {
    (*(void (**)(void *, uint64_t))(v11 + 8))(v8, v10);
LABEL_6:
    uint64_t v15 = sub_10000588C(&qword_101650938);
    memcpy(v8, v9, *(void *)(*(void *)(v15 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(void *, void *, uint64_t))(v11 + 24))(v8, v9, v10);
LABEL_7:
  uint64_t v16 = a3[6];
  uint64_t v17 = (void *)(a1 + v16);
  uint64_t v18 = (void *)(a2 + v16);
  int v19 = v12((void *)(a1 + v16), 1, v10);
  int v20 = v12(v18, 1, v10);
  if (!v19)
  {
    if (!v20)
    {
      (*(void (**)(void *, void *, uint64_t))(v11 + 24))(v17, v18, v10);
      goto LABEL_13;
    }
    (*(void (**)(void *, uint64_t))(v11 + 8))(v17, v10);
    goto LABEL_12;
  }
  if (v20)
  {
LABEL_12:
    uint64_t v21 = sub_10000588C(&qword_101650938);
    memcpy(v17, v18, *(void *)(*(void *)(v21 - 8) + 64));
    goto LABEL_13;
  }
  (*(void (**)(void *, void *, uint64_t))(v11 + 16))(v17, v18, v10);
  (*(void (**)(void *, void, uint64_t, uint64_t))(v11 + 56))(v17, 0, 1, v10);
LABEL_13:
  *(void *)(a1 + a3[7]) = *(void *)(a2 + a3[7]);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v22 = a3[8];
  uint64_t v23 = a1 + v22;
  uint64_t v24 = a2 + v22;
  *(unsigned char *)uint64_t v23 = *(unsigned char *)v24;
  *(unsigned char *)(v23 + 1) = *(unsigned char *)(v24 + 1);
  *(void *)(v23 + 8) = *(void *)(v24 + 8);
  *(void *)(a1 + a3[9]) = *(void *)(a2 + a3[9]);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t sub_100ECC718(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 32))(a1, a2, v6);
  uint64_t v7 = a3[5];
  uint64_t v8 = (void *)(a1 + v7);
  uint64_t v9 = (const void *)(a2 + v7);
  uint64_t v10 = type metadata accessor for DateInterval();
  uint64_t v11 = *(void *)(v10 - 8);
  uint64_t v12 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v11 + 48);
  if (v12(v9, 1, v10))
  {
    uint64_t v13 = sub_10000588C(&qword_101650938);
    memcpy(v8, v9, *(void *)(*(void *)(v13 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v11 + 32))(v8, v9, v10);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v11 + 56))(v8, 0, 1, v10);
  }
  uint64_t v14 = a3[6];
  uint64_t v15 = (void *)(a1 + v14);
  uint64_t v16 = (const void *)(a2 + v14);
  if (v12((const void *)(a2 + v14), 1, v10))
  {
    uint64_t v17 = sub_10000588C(&qword_101650938);
    memcpy(v15, v16, *(void *)(*(void *)(v17 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v11 + 32))(v15, v16, v10);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v11 + 56))(v15, 0, 1, v10);
  }
  uint64_t v18 = a3[8];
  *(void *)(a1 + a3[7]) = *(void *)(a2 + a3[7]);
  *(_OWORD *)(a1 + v18) = *(_OWORD *)(a2 + v18);
  *(void *)(a1 + a3[9]) = *(void *)(a2 + a3[9]);
  return a1;
}

uint64_t sub_100ECC934(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 40))(a1, a2, v6);
  uint64_t v7 = a3[5];
  uint64_t v8 = (void *)(a1 + v7);
  uint64_t v9 = (void *)(a2 + v7);
  uint64_t v10 = type metadata accessor for DateInterval();
  uint64_t v11 = *(void *)(v10 - 8);
  uint64_t v12 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v11 + 48);
  int v13 = v12(v8, 1, v10);
  int v14 = v12(v9, 1, v10);
  if (v13)
  {
    if (!v14)
    {
      (*(void (**)(void *, void *, uint64_t))(v11 + 32))(v8, v9, v10);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v11 + 56))(v8, 0, 1, v10);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v14)
  {
    (*(void (**)(void *, uint64_t))(v11 + 8))(v8, v10);
LABEL_6:
    uint64_t v15 = sub_10000588C(&qword_101650938);
    memcpy(v8, v9, *(void *)(*(void *)(v15 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(void *, void *, uint64_t))(v11 + 40))(v8, v9, v10);
LABEL_7:
  uint64_t v16 = a3[6];
  uint64_t v17 = (void *)(a1 + v16);
  uint64_t v18 = (void *)(a2 + v16);
  int v19 = v12((void *)(a1 + v16), 1, v10);
  int v20 = v12(v18, 1, v10);
  if (!v19)
  {
    if (!v20)
    {
      (*(void (**)(void *, void *, uint64_t))(v11 + 40))(v17, v18, v10);
      goto LABEL_13;
    }
    (*(void (**)(void *, uint64_t))(v11 + 8))(v17, v10);
    goto LABEL_12;
  }
  if (v20)
  {
LABEL_12:
    uint64_t v21 = sub_10000588C(&qword_101650938);
    memcpy(v17, v18, *(void *)(*(void *)(v21 - 8) + 64));
    goto LABEL_13;
  }
  (*(void (**)(void *, void *, uint64_t))(v11 + 32))(v17, v18, v10);
  (*(void (**)(void *, void, uint64_t, uint64_t))(v11 + 56))(v17, 0, 1, v10);
LABEL_13:
  *(void *)(a1 + a3[7]) = *(void *)(a2 + a3[7]);
  swift_bridgeObjectRelease();
  uint64_t v22 = a3[8];
  uint64_t v23 = a3[9];
  uint64_t v24 = a1 + v22;
  uint64_t v25 = a2 + v22;
  *(unsigned char *)uint64_t v24 = *(unsigned char *)v25;
  *(unsigned char *)(v24 + 1) = *(unsigned char *)(v25 + 1);
  *(void *)(v24 + 8) = *(void *)(v25 + 8);
  *(void *)(a1 + v23) = *(void *)(a2 + v23);
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t sub_100ECCC34(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_100ECCC48);
}

uint64_t sub_100ECCC48(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for UUID();
  uint64_t v7 = *(void *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == a2)
  {
    uint64_t v8 = v6;
    uint64_t v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    uint64_t v10 = a1;
LABEL_5:
    return v9(v10, a2, v8);
  }
  uint64_t v11 = sub_10000588C(&qword_101650938);
  uint64_t v12 = *(void *)(v11 - 8);
  if (*(_DWORD *)(v12 + 84) == a2)
  {
    uint64_t v8 = v11;
    uint64_t v10 = a1 + *(int *)(a3 + 20);
    uint64_t v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v12 + 48);
    goto LABEL_5;
  }
  unint64_t v14 = *(void *)(a1 + *(int *)(a3 + 28));
  if (v14 >= 0xFFFFFFFF) {
    LODWORD(v14) = -1;
  }
  return (v14 + 1);
}

uint64_t sub_100ECCD60(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_100ECCD74);
}

uint64_t sub_100ECCD74(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v8 = type metadata accessor for UUID();
  uint64_t v9 = *(void *)(v8 - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    uint64_t v10 = v8;
    uint64_t v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    uint64_t v12 = a1;
  }
  else
  {
    uint64_t result = sub_10000588C(&qword_101650938);
    uint64_t v14 = *(void *)(result - 8);
    if (*(_DWORD *)(v14 + 84) != a3)
    {
      *(void *)(a1 + *(int *)(a4 + 28)) = (a2 - 1);
      return result;
    }
    uint64_t v10 = result;
    uint64_t v12 = a1 + *(int *)(a4 + 20);
    uint64_t v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v14 + 56);
  }

  return v11(v12, a2, a2, v10);
}

void sub_100ECCE88()
{
  type metadata accessor for UUID();
  if (v0 <= 0x3F)
  {
    sub_100ECCF6C();
    if (v1 <= 0x3F) {
      swift_initStructMetadata();
    }
  }
}

void sub_100ECCF6C()
{
  if (!qword_101662108)
  {
    type metadata accessor for DateInterval();
    unint64_t v0 = type metadata accessor for Optional();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_101662108);
    }
  }
}

unint64_t sub_100ECCFC8()
{
  unint64_t result = qword_101662148;
  if (!qword_101662148)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_101662148);
  }
  return result;
}

unint64_t sub_100ECD020()
{
  unint64_t result = qword_101662150;
  if (!qword_101662150)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_101662150);
  }
  return result;
}

unint64_t sub_100ECD078()
{
  unint64_t result = qword_101662158;
  if (!qword_101662158)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_101662158);
  }
  return result;
}

unint64_t sub_100ECD0CC()
{
  unint64_t result = qword_101662168;
  if (!qword_101662168)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_101662168);
  }
  return result;
}

unint64_t sub_100ECD120()
{
  unint64_t result = qword_101662178;
  if (!qword_101662178)
  {
    sub_10000592C(&qword_101662170);
    sub_100EC9604(&qword_101662180, (void (*)(uint64_t))type metadata accessor for FetchRequestBeacon);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_101662178);
  }
  return result;
}

unint64_t sub_100ECD1C4()
{
  unint64_t result = qword_101662188;
  if (!qword_101662188)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_101662188);
  }
  return result;
}

unint64_t sub_100ECD218()
{
  unint64_t result = qword_101662198;
  if (!qword_101662198)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_101662198);
  }
  return result;
}

unint64_t sub_100ECD26C()
{
  unint64_t result = qword_1016621A8;
  if (!qword_1016621A8)
  {
    sub_10000592C(&qword_1016621A0);
    sub_100EC9604(&qword_1016621B0, (void (*)(uint64_t))type metadata accessor for FetchRequestBeacon_OwnedDevice);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1016621A8);
  }
  return result;
}

unint64_t sub_100ECD310()
{
  unint64_t result = qword_1016621C0;
  if (!qword_1016621C0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1016621C0);
  }
  return result;
}

unint64_t sub_100ECD364(Swift::String string)
{
  object = string._object;
  v2._countAndFlagsBits = string._countAndFlagsBits;
  v2._object = object;
  unint64_t v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_1015A36E8, v2);
  swift_bridgeObjectRelease();
  if (v3 >= 5) {
    return 5;
  }
  else {
    return v3;
  }
}

unint64_t sub_100ECD3B0(Swift::String string)
{
  object = string._object;
  v2._countAndFlagsBits = string._countAndFlagsBits;
  v2._object = object;
  unint64_t v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_1015A3970, v2);
  swift_bridgeObjectRelease();
  if (v3 >= 3) {
    return 3;
  }
  else {
    return v3;
  }
}

unint64_t sub_100ECD3FC()
{
  unint64_t result = qword_1016621C8;
  if (!qword_1016621C8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1016621C8);
  }
  return result;
}

unint64_t sub_100ECD450()
{
  unint64_t result = qword_1016621D0;
  if (!qword_1016621D0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1016621D0);
  }
  return result;
}

unint64_t sub_100ECD4A4()
{
  unint64_t result = qword_1016621E0;
  if (!qword_1016621E0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1016621E0);
  }
  return result;
}

unsigned char *storeEnumTagSinglePayload for FetchRequestBeacon.CodingKeys(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 4 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 4) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFC) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFB)
  {
    unsigned int v6 = ((a2 - 252) >> 8) + 1;
    *unint64_t result = a2 + 4;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x100ECD5C4);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 4;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for FetchRequestBeacon.CodingKeys()
{
  return &type metadata for FetchRequestBeacon.CodingKeys;
}

unsigned char *storeEnumTagSinglePayload for FetchRequestBeacon_OwnedDevice.CodingKeys(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 8 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 8) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xF8) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xF7)
  {
    unsigned int v6 = ((a2 - 248) >> 8) + 1;
    *unint64_t result = a2 + 8;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x100ECD6C8);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 8;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for FetchRequestBeacon_OwnedDevice.CodingKeys()
{
  return &type metadata for FetchRequestBeacon_OwnedDevice.CodingKeys;
}

ValueMetadata *type metadata accessor for OwnedDeviceFetchRequestContent.CodingKeys()
{
  return &type metadata for OwnedDeviceFetchRequestContent.CodingKeys;
}

ValueMetadata *type metadata accessor for FetchRequestContent.CodingKeys()
{
  return &type metadata for FetchRequestContent.CodingKeys;
}

uint64_t getEnumTagSinglePayload for FetchRequestContext(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0x7FFFFFFF && *(unsigned char *)(a1 + 24)) {
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  }
  unint64_t v3 = *(void *)(a1 + 16);
  if (v3 >= 0xFFFFFFFF) {
    LODWORD(v3) = -1;
  }
  int v4 = v3 - 1;
  if (v4 < 0) {
    int v4 = -1;
  }
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for FetchRequestContext(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(void *)(result + 8) = 0;
    *(void *)(result + 16) = 0;
    *(void *)unint64_t result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 24) = 1;
    }
  }
  else
  {
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 24) = 0;
    }
    if (a2) {
      *(void *)(result + 16) = a2;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for FetchRequestContext()
{
  return &type metadata for FetchRequestContext;
}

uint64_t getEnumTagSinglePayload for FetchRequestBeacon.SearchContext(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0xFF && *(unsigned char *)(a1 + 16)) {
    return (*(_DWORD *)a1 + 255);
  }
  unsigned int v3 = *(unsigned __int8 *)(a1 + 1);
  BOOL v4 = v3 >= 2;
  int v5 = v3 - 2;
  if (!v4) {
    int v5 = -1;
  }
  return (v5 + 1);
}

uint64_t storeEnumTagSinglePayload for FetchRequestBeacon.SearchContext(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFE)
  {
    *(void *)unint64_t result = a2 - 255;
    *(void *)(result + 8) = 0;
    if (a3 >= 0xFF) {
      *(unsigned char *)(result + 16) = 1;
    }
  }
  else
  {
    if (a3 >= 0xFF) {
      *(unsigned char *)(result + 16) = 0;
    }
    if (a2) {
      *(unsigned char *)(result + 1) = a2 + 1;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for FetchRequestBeacon.SearchContext()
{
  return &type metadata for FetchRequestBeacon.SearchContext;
}

unint64_t sub_100ECD878()
{
  unint64_t result = qword_1016621E8;
  if (!qword_1016621E8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1016621E8);
  }
  return result;
}

unint64_t sub_100ECD8D0()
{
  unint64_t result = qword_1016621F0;
  if (!qword_1016621F0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1016621F0);
  }
  return result;
}

unint64_t sub_100ECD928()
{
  unint64_t result = qword_1016621F8;
  if (!qword_1016621F8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1016621F8);
  }
  return result;
}

unint64_t sub_100ECD980()
{
  unint64_t result = qword_101662200;
  if (!qword_101662200)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_101662200);
  }
  return result;
}

unint64_t sub_100ECD9D8()
{
  unint64_t result = qword_101662208;
  if (!qword_101662208)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_101662208);
  }
  return result;
}

unint64_t sub_100ECDA30()
{
  unint64_t result = qword_101662210;
  if (!qword_101662210)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_101662210);
  }
  return result;
}

unint64_t sub_100ECDA88()
{
  unint64_t result = qword_101662218;
  if (!qword_101662218)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_101662218);
  }
  return result;
}

unint64_t sub_100ECDAE0()
{
  unint64_t result = qword_101662220;
  if (!qword_101662220)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_101662220);
  }
  return result;
}

unint64_t sub_100ECDB38()
{
  unint64_t result = qword_101662228;
  if (!qword_101662228)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_101662228);
  }
  return result;
}

unint64_t sub_100ECDB90()
{
  unint64_t result = qword_101662230;
  if (!qword_101662230)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_101662230);
  }
  return result;
}

unint64_t sub_100ECDBE8()
{
  unint64_t result = qword_101662238;
  if (!qword_101662238)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_101662238);
  }
  return result;
}

unint64_t sub_100ECDC40()
{
  unint64_t result = qword_101662240;
  if (!qword_101662240)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_101662240);
  }
  return result;
}

unint64_t sub_100ECDC94()
{
  unint64_t result = qword_101662250;
  if (!qword_101662250)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_101662250);
  }
  return result;
}

unint64_t sub_100ECDCE8()
{
  unint64_t result = qword_101662258;
  if (!qword_101662258)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_101662258);
  }
  return result;
}

unint64_t sub_100ECDD3C(Swift::String string)
{
  object = string._object;
  v2._countAndFlagsBits = string._countAndFlagsBits;
  v2._object = object;
  unint64_t v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_1015A4FE8, v2);
  swift_bridgeObjectRelease();
  if (v3 >= 9) {
    return 9;
  }
  else {
    return v3;
  }
}

uint64_t sub_100ECDD88(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 0x72617069746C756DLL && a2 == 0xEE00746E756F4374;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 1701080941 && a2 == 0xE400000000000000 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 1701273968 && a2 == 0xE400000000000000)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else
  {
    char v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v6) {
      return 2;
    }
    else {
      return 3;
    }
  }
}

uint64_t sub_100ECDEE4(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 0x7963696C6F70 && a2 == 0xE600000000000000;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0xD000000000000016 && a2 == 0x8000000101419AB0)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else
  {
    char v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v6) {
      return 1;
    }
    else {
      return 2;
    }
  }
}

uint64_t sub_100ECDFCC(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 0x686372616573 && a2 == 0xE600000000000000;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x747865746E6F63 && a2 == 0xE700000000000000)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else
  {
    char v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v6) {
      return 1;
    }
    else {
      return 2;
    }
  }
}

unint64_t sub_100ECE0B8()
{
  unint64_t result = qword_101662268;
  if (!qword_101662268)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_101662268);
  }
  return result;
}

unint64_t sub_100ECE10C()
{
  unint64_t result = qword_101662270;
  if (!qword_101662270)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_101662270);
  }
  return result;
}

unsigned char *_s12searchpartyd19FetchRequestContextV25FetchRequestContextPolicyOwst_0(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 2 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 2) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFE) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFD)
  {
    unsigned int v6 = ((a2 - 254) >> 8) + 1;
    *unint64_t result = a2 + 2;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x100ECE22CLL);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 2;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for FetchRequestBeacon.SearchContext.CodingKeys()
{
  return &type metadata for FetchRequestBeacon.SearchContext.CodingKeys;
}

unsigned char *_s12searchpartyd18FetchRequestBeaconV13SearchContextV4ModeOwst_0(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFE)
  {
    unsigned int v6 = ((a2 - 255) >> 8) + 1;
    *unint64_t result = a2 + 1;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x100ECE330);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 1;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for FetchRequestContext.CodingKeys()
{
  return &type metadata for FetchRequestContext.CodingKeys;
}

unint64_t sub_100ECE36C()
{
  unint64_t result = qword_101662278;
  if (!qword_101662278)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_101662278);
  }
  return result;
}

unint64_t sub_100ECE3C4()
{
  unint64_t result = qword_101662280;
  if (!qword_101662280)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_101662280);
  }
  return result;
}

unint64_t sub_100ECE41C()
{
  unint64_t result = qword_101662288;
  if (!qword_101662288)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_101662288);
  }
  return result;
}

unint64_t sub_100ECE474()
{
  unint64_t result = qword_101662290;
  if (!qword_101662290)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_101662290);
  }
  return result;
}

unint64_t sub_100ECE4CC()
{
  unint64_t result = qword_101662298;
  if (!qword_101662298)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_101662298);
  }
  return result;
}

unint64_t sub_100ECE524()
{
  unint64_t result = qword_1016622A0;
  if (!qword_1016622A0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1016622A0);
  }
  return result;
}

uint64_t sub_100ECE57C()
{
  strcpy((char *)v3, ".secondary/(");
  v0._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  String.append(_:)(v0);
  swift_bridgeObjectRelease();
  v1._countAndFlagsBits = 41;
  v1._object = (void *)0xE100000000000000;
  String.append(_:)(v1);
  return v3[0];
}

ValueMetadata *type metadata accessor for SecondaryIndex()
{
  return &type metadata for SecondaryIndex;
}

unint64_t sub_100ECE61C()
{
  unint64_t result = qword_1016622A8;
  if (!qword_1016622A8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1016622A8);
  }
  return result;
}

unint64_t sub_100ECE674()
{
  unint64_t result = qword_1016622B0;
  if (!qword_1016622B0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1016622B0);
  }
  return result;
}

unint64_t sub_100ECE6C8(void *a1)
{
  a1[1] = sub_100ECE728();
  a1[2] = sub_100ECE77C();
  a1[3] = sub_100ECE7D0();
  a1[4] = sub_100ECE824();
  a1[5] = sub_100ECE878();
  a1[6] = sub_100ECE8CC();
  a1[7] = sub_100ECE920();
  unint64_t result = sub_100ECE974();
  a1[8] = result;
  return result;
}

unint64_t sub_100ECE728()
{
  unint64_t result = qword_1016622B8;
  if (!qword_1016622B8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1016622B8);
  }
  return result;
}

unint64_t sub_100ECE77C()
{
  unint64_t result = qword_1016622C0;
  if (!qword_1016622C0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1016622C0);
  }
  return result;
}

unint64_t sub_100ECE7D0()
{
  unint64_t result = qword_1016622C8;
  if (!qword_1016622C8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1016622C8);
  }
  return result;
}

unint64_t sub_100ECE824()
{
  unint64_t result = qword_1016622D0;
  if (!qword_1016622D0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1016622D0);
  }
  return result;
}

unint64_t sub_100ECE878()
{
  unint64_t result = qword_1016622D8;
  if (!qword_1016622D8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1016622D8);
  }
  return result;
}

unint64_t sub_100ECE8CC()
{
  unint64_t result = qword_1016622E0;
  if (!qword_1016622E0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1016622E0);
  }
  return result;
}

unint64_t sub_100ECE920()
{
  unint64_t result = qword_1016622E8;
  if (!qword_1016622E8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1016622E8);
  }
  return result;
}

unint64_t sub_100ECE974()
{
  unint64_t result = qword_1016622F0;
  if (!qword_1016622F0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1016622F0);
  }
  return result;
}

uint64_t sub_100ECE9C8()
{
  uint64_t v1 = 0x657470656363612ELL;
  if (*v0 != 1) {
    uint64_t v1 = 0x656E696C6365642ELL;
  }
  if (*v0) {
    return v1;
  }
  else {
    return 0x6E776F6E6B6E752ELL;
  }
}

unsigned char *storeEnumTagSinglePayload for LocalFindablePreferences.FMPairedState(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 2 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 2) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFE) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFD)
  {
    unsigned int v6 = ((a2 - 254) >> 8) + 1;
    *unint64_t result = a2 + 2;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x100ECEAF8);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 2;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for LocalFindablePreferences.FMPairedState()
{
  return &type metadata for LocalFindablePreferences.FMPairedState;
}

void *sub_100ECEB30(void *a1, void *a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v12 = *a2;
    *a1 = *a2;
    a1 = (void *)(v12 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v7 = type metadata accessor for UUID();
    (*(void (**)(void *, void *, uint64_t))(*(void *)(v7 - 8) + 16))(a1, a2, v7);
    uint64_t v8 = *(int *)(a3 + 24);
    *((unsigned char *)a1 + *(int *)(a3 + 20)) = *((unsigned char *)a2 + *(int *)(a3 + 20));
    uint64_t v9 = (char *)a1 + v8;
    uint64_t v10 = (void *)((char *)a2 + v8);
    unint64_t v11 = *(void *)((char *)a2 + v8 + 8);
    if (v11 >> 60 == 15)
    {
      *(_OWORD *)uint64_t v9 = *(_OWORD *)v10;
    }
    else
    {
      uint64_t v13 = *v10;
      sub_1000361E0(*v10, v11);
      *(void *)uint64_t v9 = v13;
      *((void *)v9 + 1) = v11;
    }
  }
  return a1;
}

uint64_t sub_100ECEC34(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for UUID();
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8))(a1, v4);
  unsigned int v6 = (uint64_t *)(a1 + *(int *)(a2 + 24));
  unint64_t v7 = v6[1];
  if (v7 >> 60 != 15)
  {
    uint64_t v8 = *v6;
    return sub_10001CFB8(v8, v7);
  }
  return result;
}

uint64_t sub_100ECECC8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 16))(a1, a2, v6);
  uint64_t v7 = *(int *)(a3 + 24);
  *(unsigned char *)(a1 + *(int *)(a3 + 20)) = *(unsigned char *)(a2 + *(int *)(a3 + 20));
  uint64_t v8 = a1 + v7;
  uint64_t v9 = (uint64_t *)(a2 + v7);
  unint64_t v10 = *(void *)(a2 + v7 + 8);
  if (v10 >> 60 == 15)
  {
    *(_OWORD *)uint64_t v8 = *(_OWORD *)v9;
  }
  else
  {
    uint64_t v11 = *v9;
    sub_1000361E0(*v9, v10);
    *(void *)uint64_t v8 = v11;
    *(void *)(v8 + 8) = v10;
  }
  return a1;
}

uint64_t sub_100ECED7C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 24))(a1, a2, v6);
  *(unsigned char *)(a1 + *(int *)(a3 + 20)) = *(unsigned char *)(a2 + *(int *)(a3 + 20));
  uint64_t v7 = *(int *)(a3 + 24);
  uint64_t v8 = (uint64_t *)(a1 + v7);
  uint64_t v9 = (uint64_t *)(a2 + v7);
  unint64_t v10 = *(void *)(a2 + v7 + 8);
  if (*(void *)(a1 + v7 + 8) >> 60 != 15)
  {
    if (v10 >> 60 != 15)
    {
      uint64_t v12 = *v9;
      sub_1000361E0(v12, v10);
      uint64_t v13 = *v8;
      unint64_t v14 = v8[1];
      *uint64_t v8 = v12;
      v8[1] = v10;
      sub_10001CFB8(v13, v14);
      return a1;
    }
    sub_1000CE9DC((uint64_t)v8);
    goto LABEL_6;
  }
  if (v10 >> 60 == 15)
  {
LABEL_6:
    *(_OWORD *)uint64_t v8 = *(_OWORD *)v9;
    return a1;
  }
  uint64_t v11 = *v9;
  sub_1000361E0(v11, v10);
  *uint64_t v8 = v11;
  v8[1] = v10;
  return a1;
}

uint64_t sub_100ECEE78(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 40))(a1, a2, v6);
  uint64_t v7 = *(int *)(a3 + 24);
  *(unsigned char *)(a1 + *(int *)(a3 + 20)) = *(unsigned char *)(a2 + *(int *)(a3 + 20));
  uint64_t v8 = (uint64_t *)(a1 + v7);
  uint64_t v9 = (uint64_t *)(a2 + v7);
  unint64_t v10 = *(void *)(a1 + v7 + 8);
  if (v10 >> 60 != 15)
  {
    unint64_t v11 = v9[1];
    if (v11 >> 60 != 15)
    {
      uint64_t v12 = *v8;
      *uint64_t v8 = *v9;
      v8[1] = v11;
      sub_10001CFB8(v12, v10);
      return a1;
    }
    sub_1000CE9DC((uint64_t)v8);
  }
  *(_OWORD *)uint64_t v8 = *(_OWORD *)v9;
  return a1;
}

uint64_t sub_100ECEF40(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_100ECEF54);
}

uint64_t sub_100ECEF54(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for UUID();
  uint64_t v7 = *(void *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == a2)
  {
    uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    return v8(a1, a2, v6);
  }
  else
  {
    unsigned int v10 = *(unsigned __int8 *)(a1 + *(int *)(a3 + 20));
    if (v10 >= 3) {
      return v10 - 2;
    }
    else {
      return 0;
    }
  }
}

uint64_t sub_100ECF010(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_100ECF024);
}

uint64_t sub_100ECF024(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result = type metadata accessor for UUID();
  uint64_t v9 = *(void *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    unsigned int v10 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    return v10(a1, a2, a2, result);
  }
  else
  {
    *(unsigned char *)(a1 + *(int *)(a4 + 20)) = a2 + 2;
  }
  return result;
}

uint64_t type metadata accessor for LocalFindablePreferences()
{
  uint64_t result = qword_101662350;
  if (!qword_101662350) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t sub_100ECF12C()
{
  uint64_t result = type metadata accessor for UUID();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t sub_100ECF1CC()
{
  _StringGuts.grow(_:)(42);
  swift_bridgeObjectRelease();
  type metadata accessor for UUID();
  sub_10028B80C();
  v1._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  String.append(_:)(v1);
  swift_bridgeObjectRelease();
  v2._object = (void *)0x8000000101419AD0;
  v2._countAndFlagsBits = 0xD000000000000010;
  String.append(_:)(v2);
  uint64_t v3 = type metadata accessor for LocalFindablePreferences();
  if (*(unsigned char *)(v0 + *(int *)(v3 + 20)))
  {
    if (*(unsigned char *)(v0 + *(int *)(v3 + 20)) == 1) {
      uint64_t v4 = 0x657470656363612ELL;
    }
    else {
      uint64_t v4 = 0x656E696C6365642ELL;
    }
    unint64_t v5 = 0xE900000000000064;
  }
  else
  {
    unint64_t v5 = 0xE800000000000000;
    uint64_t v4 = 0x6E776F6E6B6E752ELL;
  }
  unint64_t v6 = v5;
  String.append(_:)(*(Swift::String *)&v4);
  swift_bridgeObjectRelease();
  v7._countAndFlagsBits = 0xD000000000000011;
  v7._object = (void *)0x8000000101419AF0;
  String.append(_:)(v7);
  sub_100037A38(*(void *)(v0 + *(int *)(v3 + 24)), *(void *)(v0 + *(int *)(v3 + 24) + 8));
  sub_10000588C(&qword_10163B068);
  v8._countAndFlagsBits = String.init<A>(describing:)();
  String.append(_:)(v8);
  swift_bridgeObjectRelease();
  v9._countAndFlagsBits = 15913;
  v9._object = (void *)0xE200000000000000;
  String.append(_:)(v9);
  return 60;
}

unint64_t sub_100ECF37C()
{
  unint64_t result = qword_101662390;
  if (!qword_101662390)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_101662390);
  }
  return result;
}

BOOL sub_100ECF3D0(uint64_t a1, uint64_t a2)
{
  if ((static UUID.== infix(_:_:)() & 1) == 0) {
    return 0;
  }
  uint64_t v4 = type metadata accessor for LocalFindablePreferences();
  if (*(unsigned __int8 *)(a1 + *(int *)(v4 + 20)) != *(unsigned __int8 *)(a2 + *(int *)(v4 + 20))) {
    return 0;
  }
  uint64_t v5 = *(int *)(v4 + 24);
  uint64_t v6 = a1 + v5;
  uint64_t v7 = *(void *)(a1 + v5);
  unint64_t v8 = *(void *)(v6 + 8);
  Swift::String v9 = (uint64_t *)(a2 + v5);
  uint64_t v10 = *v9;
  unint64_t v11 = v9[1];
  if (v8 >> 60 == 15)
  {
    if (v11 >> 60 == 15) {
      return 1;
    }
    goto LABEL_7;
  }
  if (v11 >> 60 == 15)
  {
LABEL_7:
    sub_100037A38(v7, *(void *)(v6 + 8));
    sub_100037A38(v10, v11);
    sub_100037A24(v7, v8);
    sub_100037A24(v10, v11);
    return 0;
  }
  sub_100037A38(v7, *(void *)(v6 + 8));
  sub_100037A38(v10, v11);
  char v12 = _s12searchpartyd24KeyRepresentableInternalV23__derived_struct_equalsySbAC_ACtFZ_0(v7, v8, v10, v11);
  sub_100037A24(v10, v11);
  sub_100037A24(v7, v8);
  return (v12 & 1) != 0;
}

uint64_t sub_100ECF4F0(char a1, uint64_t a2, void *a3)
{
  if (a1 == 1)
  {
    v3._countAndFlagsBits = 980182388;
    v3._object = (void *)0xE400000000000000;
    String.deletingPrefix(_:)(v3);
    NSString v4 = String._bridgeToObjectiveC()();
    uint64_t v5 = &selRef_handleWithPhoneNumber_;
LABEL_5:
    swift_bridgeObjectRelease();
    id v7 = [self *v5:v4];

    return (uint64_t)v7;
  }
  if (!a1)
  {
    v6._countAndFlagsBits = 0x3A6F746C69616DLL;
    v6._object = (void *)0xE700000000000000;
    String.deletingPrefix(_:)(v6);
    NSString v4 = String._bridgeToObjectiveC()();
    uint64_t v5 = &selRef_handleWithEmailAddress_;
    goto LABEL_5;
  }
  _StringGuts.grow(_:)(21);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  v11._countAndFlagsBits = a2;
  v11._object = a3;
  String.append(_:)(v11);
  swift_bridgeObjectRelease();
  uint64_t result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

void sub_100ECF654()
{
  Swift::String v1 = v0;
  id v2 = [v0 type];
  if (v2 == (id)1) {
    goto LABEL_5;
  }
  if (v2)
  {
    static os_log_type_t.error.getter();
    sub_1003444E0();
    id v7 = (void *)static OS_os_log.default.getter();
    os_log(_:dso:log:_:_:)();

    id v8 = [v1 destination];
    static String._unconditionallyBridgeFromObjectiveC(_:)();

    NSString v9 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    Swift::String v1 = (void *)IDSCopyIDForEmailAddress();

    if (!v1) {
      goto LABEL_10;
    }
LABEL_8:
    static String._unconditionallyBridgeFromObjectiveC(_:)();

    return;
  }
  id v3 = [v0 destination];
  static String._unconditionallyBridgeFromObjectiveC(_:)();

  NSString v4 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  Swift::String v1 = (void *)IDSCopyIDForEmailAddress();

  if (v1) {
    goto LABEL_8;
  }
  __break(1u);
LABEL_5:
  id v5 = [v1 destination];
  static String._unconditionallyBridgeFromObjectiveC(_:)();

  NSString v6 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  Swift::String v1 = (void *)IDSCopyIDForPhoneNumber();

  if (v1) {
    goto LABEL_8;
  }
  __break(1u);
LABEL_10:
  __break(1u);
}

void sub_100ECF824(uint64_t a1, uint64_t a2, void *a3)
{
  id v4 = [self sharedInstance];
  unsigned int v5 = [v4 isInternalBuild];

  if (v5)
  {
    NSString v6 = String._bridgeToObjectiveC()();
    id v7 = [a3 stringForKey:v6];

    if (v7)
    {
      uint64_t v8 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      unint64_t v10 = v9;

      uint64_t v11 = HIBYTE(v10) & 0xF;
      uint64_t v12 = v8 & 0xFFFFFFFFFFFFLL;
      if ((v10 & 0x2000000000000000) != 0) {
        uint64_t v13 = HIBYTE(v10) & 0xF;
      }
      else {
        uint64_t v13 = v8 & 0xFFFFFFFFFFFFLL;
      }
      if (v13)
      {
        if ((v10 & 0x1000000000000000) != 0)
        {
          sub_10048CBF0(v8, v10, 10);
LABEL_45:
          swift_bridgeObjectRelease();
          return;
        }
        if ((v10 & 0x2000000000000000) == 0)
        {
          if ((v8 & 0x1000000000000000) != 0) {
            unint64_t v14 = (unsigned __int8 *)((v10 & 0xFFFFFFFFFFFFFFFLL) + 32);
          }
          else {
            unint64_t v14 = (unsigned __int8 *)_StringObject.sharedUTF8.getter();
          }
          sub_10048C9FC(v14, v12, 10);
          goto LABEL_45;
        }
        v30[0] = v8;
        v30[1] = v10 & 0xFFFFFFFFFFFFFFLL;
        if (v8 == 43)
        {
          if (v11)
          {
            if (v11 != 1
              && (BYTE1(v8) - 48) <= 9u
              && v11 != 2
              && (BYTE2(v8) - 48) <= 9u)
            {
              uint64_t v15 = 10 * (BYTE1(v8) - 48) + (BYTE2(v8) - 48);
              uint64_t v16 = v11 - 3;
              if (v16)
              {
                uint64_t v17 = (unsigned __int8 *)v30 + 3;
                do
                {
                  unsigned int v18 = *v17 - 48;
                  if (v18 > 9) {
                    break;
                  }
                  uint64_t v19 = 10 * v15;
                  if ((unsigned __int128)(v15 * (__int128)10) >> 64 != (10 * v15) >> 63) {
                    break;
                  }
                  uint64_t v15 = v19 + v18;
                  if (__OFADD__(v19, v18)) {
                    break;
                  }
                  ++v17;
                  --v16;
                }
                while (v16);
              }
            }
            goto LABEL_45;
          }
        }
        else
        {
          if (v8 != 45)
          {
            if (v11)
            {
              if ((v8 - 48) <= 9u && v11 != 1 && (BYTE1(v8) - 48) <= 9u)
              {
                uint64_t v20 = 10 * (v8 - 48) + (BYTE1(v8) - 48);
                uint64_t v21 = v11 - 2;
                if (v21)
                {
                  uint64_t v22 = (unsigned __int8 *)v30 + 2;
                  do
                  {
                    unsigned int v23 = *v22 - 48;
                    if (v23 > 9) {
                      break;
                    }
                    uint64_t v24 = 10 * v20;
                    if ((unsigned __int128)(v20 * (__int128)10) >> 64 != (10 * v20) >> 63) {
                      break;
                    }
                    uint64_t v20 = v24 + v23;
                    if (__OFADD__(v24, v23)) {
                      break;
                    }
                    ++v22;
                    --v21;
                  }
                  while (v21);
                }
              }
            }
            goto LABEL_45;
          }
          if (v11)
          {
            if (v11 != 1
              && (BYTE1(v8) - 48) <= 9u
              && v11 != 2
              && (BYTE2(v8) - 48) <= 9u)
            {
              uint64_t v25 = -10 * (BYTE1(v8) - 48) - (BYTE2(v8) - 48);
              uint64_t v26 = v11 - 3;
              if (v26)
              {
                uint64_t v27 = (unsigned __int8 *)v30 + 3;
                do
                {
                  unsigned int v28 = *v27 - 48;
                  if (v28 > 9) {
                    break;
                  }
                  uint64_t v29 = 10 * v25;
                  if ((unsigned __int128)(v25 * (__int128)10) >> 64 != (10 * v25) >> 63) {
                    break;
                  }
                  uint64_t v25 = v29 - v28;
                  if (__OFSUB__(v29, v28)) {
                    break;
                  }
                  ++v27;
                  --v26;
                }
                while (v26);
              }
            }
            goto LABEL_45;
          }
          __break(1u);
        }
        __break(1u);
      }
      else
      {
        swift_bridgeObjectRelease();
      }
    }
  }
}

id sub_100ECFB94()
{
  id result = [self standardUserDefaults];
  qword_10170EE68 = (uint64_t)result;
  return result;
}

void sub_100ECFBD0(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  id v6 = [self sharedInstance];
  unsigned int v7 = [v6 isInternalBuild];

  if (v7)
  {
    sub_100ECFD78(a1, (uint64_t)v15);
    uint64_t v8 = v16;
    if (v16)
    {
      unint64_t v9 = sub_10001CD44(v15, v16);
      uint64_t v10 = *(void *)(v8 - 8);
      __chkstk_darwin(v9);
      uint64_t v12 = (char *)v15 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
      (*(void (**)(char *))(v10 + 16))(v12);
      uint64_t v13 = _bridgeAnythingToObjectiveC<A>(_:)();
      (*(void (**)(char *, uint64_t))(v10 + 8))(v12, v8);
      _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)v15);
    }
    else
    {
      uint64_t v13 = 0;
    }
    NSString v14 = String._bridgeToObjectiveC()();
    [a4 setValue:v13 forKey:v14];
    swift_unknownObjectRelease();
  }
}

uint64_t sub_100ECFD78(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_10000588C((uint64_t *)&unk_101644360);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_100ECFDE0()
{
  return 0x6F666E49766461;
}

uint64_t sub_100ECFDF8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  if (a1 == 0x6F666E49766461 && a2 == 0xE700000000000000)
  {
    uint64_t result = swift_bridgeObjectRelease();
    char v7 = 0;
  }
  else
  {
    char v5 = _stringCompareWithSmolCheck(_:_:expecting:)();
    uint64_t result = swift_bridgeObjectRelease();
    char v7 = v5 ^ 1;
  }
  *a3 = v7 & 1;
  return result;
}

uint64_t sub_100ECFE90(uint64_t a1)
{
  unint64_t v2 = sub_100ED148C();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_100ECFECC(uint64_t a1)
{
  unint64_t v2 = sub_100ED148C();

  return CodingKey.debugDescription.getter(a1, v2);
}

unint64_t sub_100ECFF08@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  unint64_t result = sub_100ED1318(a1);
  if (!v2)
  {
    *(_DWORD *)a2 = result;
    *(unsigned char *)(a2 + 4) = BYTE4(result);
  }
  return result;
}

uint64_t sub_100ECFF3C(void *a1, uint64_t a2)
{
  sub_10001CD44(a1, a1[3]);
  dispatch thunk of BinaryEncoding.container()();
  if (a2 != 3)
  {
    LOBYTE(v7) = 1;
    sub_1000BD078((uint64_t)v5, v6);
    sub_10006145C();
    dispatch thunk of BinaryEncodingContaining.encode<A>(_:)();
    if (!v2)
    {
      __int16 v7 = a2;
      char v8 = BYTE2(a2) & 1;
      char v9 = BYTE3(a2);
      char v10 = BYTE4(a2);
      sub_1000BD078((uint64_t)v5, v6);
      sub_100ED119C();
      dispatch thunk of BinaryEncodingContaining.encode<A>(_:)();
    }
  }
  return _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)v5);
}

uint64_t sub_100ED005C@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result = sub_100ED0D08(a1);
  if (!v2)
  {
    *(_DWORD *)a2 = result;
    *(unsigned char *)(a2 + 4) = BYTE4(result);
  }
  return result;
}

uint64_t sub_100ED0090(void *a1)
{
  return sub_100ECFF3C(a1, *v1 | ((unint64_t)*((unsigned __int8 *)v1 + 4) << 32));
}

void *sub_100ED00B4(uint64_t a1, unint64_t a2)
{
  uint64_t v4 = type metadata accessor for Data.Iterator();
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  __int16 v7 = (char *)&v15 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  char v8 = _swiftEmptyArrayStorage;
  switch(a2 >> 62)
  {
    case 1uLL:
      if (__OFSUB__(HIDWORD(a1), a1)) {
        goto LABEL_12;
      }
      uint64_t v9 = HIDWORD(a1) - (int)a1;
LABEL_6:
      if (v9)
      {
        if (v9 >= 1)
        {
          sub_10000588C(&qword_10163A788);
          char v8 = (void *)swift_allocObject();
          size_t v12 = j__malloc_size(v8);
          v8[2] = v9;
          v8[3] = 2 * v12 - 64;
        }
        sub_1000361E0(a1, a2);
        uint64_t v13 = Data._copyContents(initializing:)();
        sub_10001CFB8(a1, a2);
        (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
        if (v13 != v9)
        {
          __break(1u);
LABEL_12:
          __break(1u);
LABEL_13:
          __break(1u);
          JUMPOUT(0x100ED0260);
        }
      }
      return v8;
    case 2uLL:
      uint64_t v11 = *(void *)(a1 + 16);
      uint64_t v10 = *(void *)(a1 + 24);
      uint64_t v9 = v10 - v11;
      if (!__OFSUB__(v10, v11)) {
        goto LABEL_6;
      }
      goto LABEL_13;
    case 3uLL:
      return v8;
    default:
      uint64_t v9 = BYTE6(a2);
      goto LABEL_6;
  }
}

uint64_t sub_100ED0270(uint64_t a1)
{
  uint64_t v78 = type metadata accessor for Data.Iterator();
  __chkstk_darwin(v78);
  uint64_t v77 = (char *)&v71 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v81 = *(void *)(a1 + 16);
  if (!v81)
  {
    swift_bridgeObjectRelease();
    char v64 = _swiftEmptyArrayStorage;
    if (_swiftEmptyArrayStorage[2]) {
      goto LABEL_92;
    }
    goto LABEL_96;
  }
  unint64_t v4 = 0;
  uint64_t v80 = a1 + 32;
  int64_t v76 = (void (**)(char *, uint64_t))(v2 + 8);
  uint64_t v75 = _swiftEmptyArrayStorage;
  uint64_t v79 = a1;
  while (2)
  {
    if (v4 >= *(void *)(a1 + 16))
    {
      __break(1u);
LABEL_100:
      __break(1u);
LABEL_101:
      __break(1u);
LABEL_102:
      __break(1u);
LABEL_103:
      __break(1u);
LABEL_104:
      __break(1u);
LABEL_105:
      __break(1u);
LABEL_106:
      __break(1u);
LABEL_107:
      __break(1u);
LABEL_108:
      __break(1u);
LABEL_109:
      __break(1u);
LABEL_110:
      __break(1u);
LABEL_111:
      __break(1u);
LABEL_112:
      __break(1u);
LABEL_113:
      __break(1u);
LABEL_114:
      __break(1u);
LABEL_115:
      __break(1u);
LABEL_116:
      __break(1u);
LABEL_117:
      __break(1u);
LABEL_118:
      __break(1u);
LABEL_119:
      __break(1u);
LABEL_120:
      __break(1u);
LABEL_121:
      __break(1u);
LABEL_122:
      __break(1u);
LABEL_123:
      __break(1u);
LABEL_124:
      __break(1u);
LABEL_125:
      __break(1u);
LABEL_126:
      __break(1u);
LABEL_127:
      __break(1u);
    }
    uint64_t v5 = (uint64_t *)(v80 + 16 * v4);
    uint64_t v7 = *v5;
    unint64_t v6 = v5[1];
    unint64_t v82 = v4 + 1;
    char v8 = _swiftEmptyArrayStorage;
    switch(v6 >> 62)
    {
      case 1uLL:
        if (__OFSUB__(HIDWORD(v7), v7)) {
          goto LABEL_104;
        }
        uint64_t v9 = HIDWORD(v7) - (int)v7;
LABEL_11:
        sub_1000361E0(v7, v6);
        sub_1000361E0(v7, v6);
        if (!v9) {
          goto LABEL_15;
        }
LABEL_12:
        if (v9 >= 1)
        {
          sub_10000588C(&qword_10163A788);
          char v8 = (void *)swift_allocObject();
          size_t v12 = j__malloc_size(v8);
          v8[2] = v9;
          v8[3] = 2 * v12 - 64;
        }
        uint64_t v13 = v77;
        uint64_t v14 = Data._copyContents(initializing:)();
        (*v76)(v13, v78);
        if (v14 != v9) {
          goto LABEL_101;
        }
LABEL_15:
        sub_10001CFB8(v7, v6);
        unint64_t v86 = v8;
        uint64_t v87 = 0;
        break;
      case 2uLL:
        uint64_t v11 = *(void *)(v7 + 16);
        uint64_t v10 = *(void *)(v7 + 24);
        uint64_t v9 = v10 - v11;
        if (!__OFSUB__(v10, v11)) {
          goto LABEL_11;
        }
        goto LABEL_105;
      case 3uLL:
        goto LABEL_15;
      default:
        uint64_t v9 = BYTE6(v6);
        if (!BYTE6(v6)) {
          goto LABEL_15;
        }
        goto LABEL_12;
    }
    while (1)
    {
      sub_10115AD00(&v96);
      sub_100ED104C((uint64_t)&v96, (uint64_t)v97);
      uint64_t v17 = v98;
      if (!v98) {
        break;
      }
      if (v97[0] == 1)
      {
        uint64_t v18 = v100;
        long long v83 = v99;
        uint64_t v19 = sub_10000588C(&qword_10163F8F0);
        uint64_t v94 = v19;
        unint64_t v95 = sub_100ED10B4();
        uint64_t v20 = swift_allocObject();
        uint64_t v88 = v20;
        *(void *)(v20 + 16) = v17;
        *(_OWORD *)(v20 + 24) = v83;
        *(void *)(v20 + 40) = v18;
        uint64_t v21 = sub_10001CD44(&v88, v19);
        uint64_t v22 = v21[2];
        uint64_t v23 = v21[3] >> 1;
        uint64_t v24 = v23 - v22;
        if (__OFSUB__(v23, v22))
        {
          __break(1u);
LABEL_98:
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          sub_100ED1148();
          swift_allocError();
          swift_willThrow();
          sub_10001CFB8(v7, v6);
          return sub_1002692D8((uint64_t)&v96);
        }
        if (!v24)
        {
          swift_unknownObjectRetain();
          _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)&v88);
          uint64_t v15 = 0;
          unint64_t v16 = 0xC000000000000000;
LABEL_17:
          sub_10029FCC8();
          swift_allocError();
          swift_willThrow();
          sub_10001CFB8(v15, v16);
          swift_errorRelease();
          goto LABEL_18;
        }
        uint64_t v25 = (const void *)(v21[1] + v22);
        if (v24 <= 14)
        {
          memset(__dst, 0, sizeof(__dst));
          unsigned __int8 v85 = v23 - v22;
          memcpy(__dst, v25, v23 - v22);
          uint64_t v28 = v85;
          uint64_t v15 = *(void *)__dst;
          unint64_t v16 = *(unsigned int *)&__dst[8] | ((unint64_t)__dst[12] << 32) | ((unint64_t)__dst[13] << 40) | ((unint64_t)v85 << 48);
          swift_unknownObjectRetain();
          _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)&v88);
          if (!v28) {
            goto LABEL_17;
          }
        }
        else
        {
          type metadata accessor for __DataStorage();
          swift_allocObject();
          swift_unknownObjectRetain_n();
          uint64_t v26 = __DataStorage.init(bytes:length:)();
          uint64_t v27 = v26;
          if ((unint64_t)v24 < 0x7FFFFFFF)
          {
            uint64_t v15 = v24 << 32;
            unint64_t v16 = v26 | 0x4000000000000000;
            sub_1002692D8((uint64_t)&v96);
            _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)&v88);
            goto LABEL_17;
          }
          type metadata accessor for Data.RangeReference();
          uint64_t v15 = swift_allocObject();
          *(void *)(v15 + 16) = 0;
          *(void *)(v15 + 24) = v24;
          unint64_t v16 = v27 | 0x8000000000000000;
          sub_1002692D8((uint64_t)&v96);
          _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)&v88);
          uint64_t v29 = *(void *)(v15 + 16);
          uint64_t v30 = *(void *)(v15 + 24);
          if (v29 == v30) {
            goto LABEL_17;
          }
          uint64_t v28 = v30 - v29;
          if (__OFSUB__(v30, v29)) {
            goto LABEL_100;
          }
        }
        if (v28 > 4) {
          goto LABEL_17;
        }
        unint64_t v31 = v16 >> 62;
        switch(v16 >> 62)
        {
          case 1uLL:
            LODWORD(v32) = HIDWORD(v15) - v15;
            if (__OFSUB__(HIDWORD(v15), v15)) {
              goto LABEL_102;
            }
            uint64_t v32 = (int)v32;
LABEL_36:
            if (v32 == 2)
            {
              unsigned int v39 = 0;
              uint64_t v40 = 0;
              int v41 = 2;
              int v42 = 1;
            }
            else
            {
              if (v32 != 3) {
                goto LABEL_17;
              }
              if (v31)
              {
                if (v31 == 1)
                {
                  if (v15 < (uint64_t)&_mh_execute_header || (int)v15 > 0) {
                    goto LABEL_118;
                  }
                  *(void *)&long long v83 = __DataStorage._bytes.getter();
                  if (!(void)v83) {
                    goto LABEL_132;
                  }
                  uint64_t v36 = __DataStorage._offset.getter();
                  if (__OFSUB__(0, v36)) {
                    goto LABEL_121;
                  }
                  LODWORD(v83) = *(unsigned __int8 *)(v83 - v36);
                  uint64_t v74 = __DataStorage._bytes.getter();
                  if (!v74) {
                    goto LABEL_133;
                  }
                  uint64_t v37 = __DataStorage._offset.getter();
                  uint64_t v38 = -v37;
                  if (__OFSUB__(0, v37)) {
                    goto LABEL_123;
                  }
                }
                else
                {
                  if (*(uint64_t *)(v15 + 16) > 0) {
                    goto LABEL_120;
                  }
                  if (*(uint64_t *)(v15 + 24) < 1) {
                    goto LABEL_122;
                  }
                  *(void *)&long long v83 = __DataStorage._bytes.getter();
                  if (!(void)v83) {
                    goto LABEL_134;
                  }
                  uint64_t v45 = __DataStorage._offset.getter();
                  if (__OFSUB__(0, v45)) {
                    goto LABEL_124;
                  }
                  if (*(uint64_t *)(v15 + 16) > 0) {
                    goto LABEL_125;
                  }
                  if (*(uint64_t *)(v15 + 24) < 1) {
                    goto LABEL_126;
                  }
                  LODWORD(v83) = *(unsigned __int8 *)(v83 - v45);
                  uint64_t v74 = __DataStorage._bytes.getter();
                  if (!v74) {
                    goto LABEL_135;
                  }
                  uint64_t v46 = __DataStorage._offset.getter();
                  uint64_t v38 = -v46;
                  if (__OFSUB__(0, v46)) {
                    goto LABEL_127;
                  }
                }
                int v44 = *(unsigned __int8 *)(v74 + v38);
                char v43 = v83;
              }
              else
              {
                if ((v16 & 0xFF000000000000) == 0) {
                  goto LABEL_119;
                }
                char v43 = v15;
                int v44 = v15;
              }
              int v42 = 0;
              int v41 = v43 & 1;
              unsigned int v39 = v44 & 0xFFFFFFFE;
              uint64_t v40 = 1;
            }
            LODWORD(v83) = v42;
            LODWORD(v74) = v39;
            int v73 = v41;
            if (v31)
            {
              uint64_t v72 = v40;
              if (v31 == 1)
              {
                if (v40 < (int)v15) {
                  goto LABEL_106;
                }
                uint64_t v71 = v15 >> 32;
                if (v40 >= v15 >> 32) {
                  goto LABEL_106;
                }
                uint64_t v47 = __DataStorage._bytes.getter();
                if (!v47)
                {
                  __break(1u);
LABEL_129:
                  __break(1u);
LABEL_130:
                  __break(1u);
LABEL_131:
                  __break(1u);
LABEL_132:
                  __break(1u);
LABEL_133:
                  __break(1u);
LABEL_134:
                  __break(1u);
LABEL_135:
                  __break(1u);
                  JUMPOUT(0x100ED0CE8);
                }
                uint64_t v48 = v47;
                uint64_t v49 = __DataStorage._offset.getter();
                if (__OFSUB__(v72, v49)) {
                  goto LABEL_109;
                }
                if (v72 + 1 >= v71) {
                  goto LABEL_112;
                }
                uint64_t v71 = v72 + 1;
                LODWORD(v72) = *(unsigned __int8 *)(v48 + v72 - v49);
                uint64_t v50 = __DataStorage._bytes.getter();
                if (!v50) {
                  goto LABEL_129;
                }
                uint64_t v51 = v50;
                uint64_t v52 = __DataStorage._offset.getter();
                uint64_t v53 = v71 - v52;
                if (__OFSUB__(v71, v52)) {
                  goto LABEL_114;
                }
              }
              else
              {
                if (v40 < *(void *)(v15 + 16)) {
                  goto LABEL_108;
                }
                if (v40 >= *(void *)(v15 + 24)) {
                  goto LABEL_111;
                }
                uint64_t v55 = __DataStorage._bytes.getter();
                if (!v55) {
                  goto LABEL_130;
                }
                uint64_t v56 = v55;
                uint64_t v57 = __DataStorage._offset.getter();
                if (__OFSUB__(v72, v57)) {
                  goto LABEL_113;
                }
                if (v72 + 1 < *(void *)(v15 + 16)) {
                  goto LABEL_115;
                }
                if (v72 + 1 >= *(void *)(v15 + 24)) {
                  goto LABEL_116;
                }
                uint64_t v71 = v72 + 1;
                LODWORD(v72) = *(unsigned __int8 *)(v56 + v72 - v57);
                uint64_t v58 = __DataStorage._bytes.getter();
                if (!v58) {
                  goto LABEL_131;
                }
                uint64_t v51 = v58;
                uint64_t v59 = __DataStorage._offset.getter();
                uint64_t v53 = v71 - v59;
                if (__OFSUB__(v71, v59)) {
                  goto LABEL_117;
                }
              }
              char v54 = *(unsigned char *)(v51 + v53);
            }
            else
            {
              if (v40 >= (unint64_t)BYTE6(v16)) {
                goto LABEL_107;
              }
              LOWORD(v88) = v15;
              if (v40 + 1 >= (unint64_t)BYTE6(v16)) {
                goto LABEL_110;
              }
              LODWORD(v72) = *((unsigned __int8 *)&v88 + v40);
              uint64_t v88 = v15;
              __int16 v89 = v16;
              char v90 = BYTE2(v16);
              char v91 = BYTE3(v16);
              char v92 = BYTE4(v16);
              char v93 = BYTE5(v16);
              char v54 = *((unsigned char *)&v88 + v40 + 1);
            }
            sub_10001CFB8(v15, v16);
            if (v75[2]) {
              goto LABEL_98;
            }
            if (swift_isUniquelyReferenced_nonNull_native()) {
              uint64_t v60 = v75;
            }
            else {
              uint64_t v60 = sub_100A6FC90(0, 1, 1, v75);
            }
            unint64_t v62 = v60[2];
            unint64_t v61 = v60[3];
            if (v62 >= v61 >> 1) {
              uint64_t v60 = sub_100A6FC90((void *)(v61 > 1), v62 + 1, 1, v60);
            }
            v60[2] = v62 + 1;
            uint64_t v75 = v60;
            uint64_t v63 = (char *)v60 + 5 * v62;
            v63[32] = v73;
            v63[33] = v74;
            v63[34] = v83;
            v63[35] = v72;
            v63[36] = v54;
            break;
          case 2uLL:
            uint64_t v34 = *(void *)(v15 + 16);
            uint64_t v33 = *(void *)(v15 + 24);
            BOOL v35 = __OFSUB__(v33, v34);
            uint64_t v32 = v33 - v34;
            if (!v35) {
              goto LABEL_36;
            }
            goto LABEL_103;
          case 3uLL:
            goto LABEL_17;
          default:
            uint64_t v32 = BYTE6(v16);
            goto LABEL_36;
        }
      }
LABEL_18:
      sub_1002692D8((uint64_t)&v96);
    }
    swift_bridgeObjectRelease();
    sub_10001CFB8(v7, v6);
    unint64_t v4 = v82;
    a1 = v79;
    if (v82 != v81) {
      continue;
    }
    break;
  }
  swift_bridgeObjectRelease();
  char v64 = v75;
  if (!v75[2])
  {
LABEL_96:
    swift_bridgeObjectRelease();
    return 3;
  }
LABEL_92:
  int v65 = *((unsigned __int8 *)v64 + 34);
  uint64_t v66 = *((unsigned __int8 *)v64 + 35);
  uint64_t v67 = *((unsigned __int8 *)v64 + 36);
  uint64_t v68 = *((unsigned __int16 *)v64 + 16);
  swift_bridgeObjectRelease();
  uint64_t v69 = 0x10000;
  if (!v65) {
    uint64_t v69 = 0;
  }
  return v68 | v69 | (v66 << 24) | (v67 << 32);
}

uint64_t sub_100ED0D08(void *a1)
{
  sub_10001CD44(a1, a1[3]);
  dispatch thunk of BinaryDecoding.container()();
  sub_10001CD44(v24, v25);
  if (dispatch thunk of BinaryDecodingContaining.isAtEnd.getter())
  {
    uint64_t v26 = _swiftEmptyArrayStorage;
LABEL_3:
    uint64_t v2 = sub_100ED0270((uint64_t)v26);
    if (!v1)
    {
      uint64_t v3 = v2;
      _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)v24);
      _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)a1);
      return v3 & 0xFFFFFFFFFFLL;
    }
  }
  else
  {
    uint64_t v26 = _swiftEmptyArrayStorage;
    while (1)
    {
      sub_1000BD078((uint64_t)v24, v25);
      uint64_t v5 = dispatch thunk of BinaryDecodingContaining.decode(length:)();
      if (v1) {
        break;
      }
      uint64_t v7 = v5;
      unint64_t v8 = v6;
      sub_1000BD078((uint64_t)v24, v25);
      uint64_t v9 = dispatch thunk of BinaryDecodingContaining.decode(length:)();
      unint64_t v11 = v10;
      sub_1000362FC();
      DataProtocol.intValue.getter();
      sub_1000BD078((uint64_t)v24, v25);
      uint64_t v12 = dispatch thunk of BinaryDecodingContaining.decode(length:)();
      unint64_t v14 = v13;
      sub_1000361E0(v7, v8);
      sub_1000361E0(v9, v11);
      sub_100A42CBC(v9, v11);
      sub_10001CFB8(v9, v11);
      sub_1000361E0(v7, v8);
      sub_1000361E0(v12, v14);
      sub_100A42CBC(v12, v14);
      sub_10001CFB8(v12, v14);
      sub_10001CFB8(v7, v8);
      uint64_t v15 = sub_10088540C(v7, v8);
      unint64_t v17 = v16;
      sub_1000361E0(v15, v16);
      uint64_t v23 = v7;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
        uint64_t v26 = sub_100A6EA38(0, v26[2] + 1, 1, v26);
      }
      unint64_t v19 = v26[2];
      unint64_t v18 = v26[3];
      if (v19 >= v18 >> 1) {
        uint64_t v26 = sub_100A6EA38((void *)(v18 > 1), v19 + 1, 1, v26);
      }
      uint64_t v20 = v26;
      v26[2] = v19 + 1;
      uint64_t v21 = &v20[2 * v19];
      v21[4] = v15;
      v21[5] = v17;
      sub_10001CFB8(v9, v11);
      sub_10001CFB8(v15, v17);
      sub_10001CFB8(v12, v14);
      sub_10001CFB8(v23, v8);
      sub_10001CD44(v24, v25);
      if (dispatch thunk of BinaryDecodingContaining.isAtEnd.getter()) {
        goto LABEL_3;
      }
    }
    swift_bridgeObjectRelease();
  }
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)v24);
  return _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)a1);
}

uint64_t sub_100ED104C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_10000588C(&qword_10163F8E8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

unint64_t sub_100ED10B4()
{
  unint64_t result = qword_10163F8F8;
  if (!qword_10163F8F8)
  {
    sub_10000592C(&qword_10163F8F0);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10163F8F8);
  }
  return result;
}

uint64_t sub_100ED1110()
{
  swift_unknownObjectRelease();

  return _swift_deallocObject(v0, 48, 7);
}

unint64_t sub_100ED1148()
{
  unint64_t result = qword_101662398;
  if (!qword_101662398)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_101662398);
  }
  return result;
}

unint64_t sub_100ED119C()
{
  unint64_t result = qword_1016623A0;
  if (!qword_1016623A0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1016623A0);
  }
  return result;
}

ValueMetadata *type metadata accessor for TLVPacketsError()
{
  return &type metadata for TLVPacketsError;
}

uint64_t getEnumTagSinglePayload for TLVPackets(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0xFD && a1[5]) {
    return (*(_DWORD *)a1 + 253);
  }
  unsigned int v3 = *a1;
  if (v3 >= 2) {
    int v4 = ((v3 + 2147483646) & 0x7FFFFFFF) - 1;
  }
  else {
    int v4 = -2;
  }
  if (v4 < 0) {
    int v4 = -1;
  }
  BOOL v5 = __OFSUB__(v4, 1);
  int v6 = v4 - 1;
  if (v6 < 0 != v5) {
    int v6 = -1;
  }
  return (v6 + 1);
}

uint64_t storeEnumTagSinglePayload for TLVPackets(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFC)
  {
    *(unsigned char *)(result + 4) = 0;
    *(_DWORD *)unint64_t result = a2 - 253;
    if (a3 >= 0xFD) {
      *(unsigned char *)(result + 5) = 1;
    }
  }
  else
  {
    if (a3 >= 0xFD) {
      *(unsigned char *)(result + 5) = 0;
    }
    if (a2) {
      *(unsigned char *)unint64_t result = a2 + 3;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for TLVPackets()
{
  return &type metadata for TLVPackets;
}

unint64_t sub_100ED12C4()
{
  unint64_t result = qword_1016623A8;
  if (!qword_1016623A8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1016623A8);
  }
  return result;
}

unint64_t sub_100ED1318(void *a1)
{
  uint64_t v3 = sub_10000588C(&qword_1016623B0);
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  int v6 = (char *)v9 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  unint64_t v7 = (unint64_t)sub_10001CD44(a1, a1[3]);
  sub_100ED148C();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v1)
  {
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)a1);
  }
  else
  {
    sub_100C05CA0();
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
    (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
    unint64_t v7 = v9[2] | ((unint64_t)v10 << 32);
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)a1);
  }
  return v7;
}

unint64_t sub_100ED148C()
{
  unint64_t result = qword_1016623B8;
  if (!qword_1016623B8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1016623B8);
  }
  return result;
}

unsigned char *_s12searchpartyd15TLVPacketsErrorOwst_0(unsigned char *result, int a2, int a3)
{
  if ((a3 + 1) >= 0x10000) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) < 0x100) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2)
  {
    switch(v5)
    {
      case 1:
        *unint64_t result = a2;
        return result;
      case 2:
        *(_WORD *)unint64_t result = a2;
        return result;
      case 3:
        goto LABEL_19;
      case 4:
        *(_DWORD *)unint64_t result = a2;
        return result;
      default:
        return result;
    }
  }
  switch(v5)
  {
    case 1:
      *unint64_t result = 0;
      break;
    case 2:
      *(_WORD *)unint64_t result = 0;
      break;
    case 3:
LABEL_19:
      __break(1u);
      JUMPOUT(0x100ED157CLL);
    case 4:
      *(_DWORD *)unint64_t result = 0;
      break;
    default:
      return result;
  }
  return result;
}

ValueMetadata *type metadata accessor for TLVPackets.CodingKeys()
{
  return &type metadata for TLVPackets.CodingKeys;
}

unint64_t sub_100ED15B8()
{
  unint64_t result = qword_1016623C0;
  if (!qword_1016623C0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1016623C0);
  }
  return result;
}

unint64_t sub_100ED1610()
{
  unint64_t result = qword_1016623C8;
  if (!qword_1016623C8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1016623C8);
  }
  return result;
}

unint64_t sub_100ED1668()
{
  unint64_t result = qword_1016623D0;
  if (!qword_1016623D0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1016623D0);
  }
  return result;
}

void *sub_100ED16BC(uint64_t a1, uint64_t *a2)
{
  uint64_t v78 = a2;
  uint64_t v3 = type metadata accessor for SafeLocation();
  uint64_t v72 = *(void *)(v3 - 8);
  uint64_t v4 = __chkstk_darwin(v3 - 8);
  uint64_t v71 = (uint64_t)&v62 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v4);
  uint64_t v70 = (uint64_t)&v62 - v6;
  unint64_t v7 = &qword_1016624F0;
  uint64_t v8 = sub_10000588C(&qword_1016624F0);
  __chkstk_darwin(v8 - 8);
  unsigned __int8 v10 = (char *)&v62 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = type metadata accessor for LocationOfInterestProvider.RemappingOperation();
  uint64_t v12 = *(void *)(v11 - 8);
  uint64_t v13 = __chkstk_darwin(v11);
  uint64_t v67 = (uint64_t)&v62 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v13);
  uint64_t v65 = (uint64_t)&v62 - v15;
  uint64_t v16 = type metadata accessor for UUID();
  uint64_t v17 = *(void *)(v16 - 8);
  __chkstk_darwin(v16);
  unint64_t v19 = (char *)&v62 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v20 = sub_10000588C(&qword_101638CF0);
  __chkstk_darwin(v20 - 8);
  uint64_t v22 = (char *)&v62 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v23 = a1;
  uint64_t v26 = *(void *)(a1 + 56);
  uint64_t v25 = a1 + 56;
  uint64_t v24 = v26;
  uint64_t v27 = v23;
  uint64_t v28 = 1 << *(unsigned char *)(v23 + 32);
  uint64_t v29 = -1;
  if (v28 < 64) {
    uint64_t v29 = ~(-1 << v28);
  }
  unint64_t v30 = v29 & v24;
  uint64_t v80 = v17 + 16;
  uint64_t v81 = (void (**)(char *, uint64_t, uint64_t, uint64_t))(v17 + 56);
  uint64_t v79 = v17 + 48;
  int64_t v76 = (void (**)(char *, uint64_t, uint64_t, uint64_t))(v12 + 56);
  uint64_t v77 = (void (**)(uint64_t, char *, uint64_t))(v17 + 32);
  uint64_t v75 = (void (**)(uint64_t, uint64_t))(v17 + 8);
  uint64_t v66 = v12;
  int64_t v73 = (unint64_t)(v28 + 63) >> 6;
  uint64_t v74 = (unsigned int (**)(char *, uint64_t, uint64_t))(v12 + 48);
  uint64_t v31 = (uint64_t)v19;
  uint64_t v32 = v17;
  uint64_t v82 = v27;
  unint64_t result = (void *)swift_bridgeObjectRetain();
  int64_t v34 = 0;
  uint64_t v68 = _swiftEmptyArrayStorage;
  uint64_t v69 = v25;
  if (!v30) {
    goto LABEL_5;
  }
LABEL_4:
  uint64_t v83 = (v30 - 1) & v30;
  int64_t v84 = v34;
  for (unint64_t i = __clz(__rbit64(v30)) | (v34 << 6); ; unint64_t i = __clz(__rbit64(v37)) + (v38 << 6))
  {
    (*(void (**)(char *, unint64_t, uint64_t))(v32 + 16))(v22, *(void *)(v82 + 48) + *(void *)(v32 + 72) * i, v16);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v32 + 56))(v22, 0, 1, v16);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v32 + 48))(v22, 1, v16) == 1) {
      goto LABEL_36;
    }
    (*v77)(v31, v22, v16);
    uint64_t v40 = *v78;
    if (*(void *)(*v78 + 16) && (unint64_t v41 = sub_1007240CC(v31), (v42 & 1) != 0))
    {
      uint64_t v43 = v16;
      int v44 = v22;
      uint64_t v45 = v32;
      uint64_t v46 = v31;
      uint64_t v47 = v10;
      uint64_t v48 = v11;
      uint64_t v49 = v7;
      uint64_t v50 = v71;
      sub_100EDD138(*(void *)(v40 + 56) + *(void *)(v72 + 72) * v41, v71, (uint64_t (*)(void))type metadata accessor for SafeLocation);
      uint64_t v51 = v50;
      uint64_t v52 = v70;
      sub_100EDC4C0(v51, v70, (uint64_t (*)(void))type metadata accessor for SafeLocation);
      uint64_t v53 = v52;
      unint64_t v7 = v49;
      uint64_t v11 = v48;
      unsigned __int8 v10 = v47;
      uint64_t v31 = v46;
      uint64_t v32 = v45;
      uint64_t v22 = v44;
      uint64_t v16 = v43;
      uint64_t v25 = v69;
      sub_100EDC4C0(v53, (uint64_t)v10, (uint64_t (*)(void))type metadata accessor for SafeLocation);
      swift_storeEnumTagMultiPayload();
      uint64_t v54 = 0;
    }
    else
    {
      uint64_t v54 = 1;
    }
    (*v76)(v10, v54, 1, v11);
    (*v75)(v31, v16);
    if ((*v74)(v10, 1, v11) == 1)
    {
      unint64_t result = (void *)sub_10001DAB4((uint64_t)v10, v7);
    }
    else
    {
      uint64_t v64 = v31;
      uint64_t v55 = v65;
      sub_100EDC4C0((uint64_t)v10, v65, (uint64_t (*)(void))type metadata accessor for LocationOfInterestProvider.RemappingOperation);
      sub_100EDC4C0(v55, v67, (uint64_t (*)(void))type metadata accessor for LocationOfInterestProvider.RemappingOperation);
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
        uint64_t v68 = (void *)sub_100A72550(0, v68[2] + 1, 1, (unint64_t)v68);
      }
      unint64_t v57 = v68[2];
      unint64_t v56 = v68[3];
      unint64_t v58 = v57 + 1;
      uint64_t v31 = v64;
      if (v57 >= v56 >> 1)
      {
        unint64_t v63 = v57 + 1;
        unint64_t v61 = (void *)sub_100A72550(v56 > 1, v57 + 1, 1, (unint64_t)v68);
        unint64_t v58 = v63;
        uint64_t v68 = v61;
      }
      uint64_t v59 = v67;
      uint64_t v60 = v68;
      v68[2] = v58;
      unint64_t result = (void *)sub_100EDC4C0(v59, (uint64_t)v60+ ((*(unsigned __int8 *)(v66 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v66 + 80))+ *(void *)(v66 + 72) * v57, (uint64_t (*)(void))type metadata accessor for LocationOfInterestProvider.RemappingOperation);
    }
    int64_t v34 = v84;
    unint64_t v30 = v83;
    if (v83) {
      goto LABEL_4;
    }
LABEL_5:
    int64_t v36 = v34 + 1;
    if (__OFADD__(v34, 1))
    {
      __break(1u);
      goto LABEL_38;
    }
    if (v36 >= v73) {
      goto LABEL_35;
    }
    unint64_t v37 = *(void *)(v25 + 8 * v36);
    int64_t v38 = v34 + 1;
    if (!v37)
    {
      int64_t v38 = v34 + 2;
      if (v34 + 2 >= v73) {
        goto LABEL_35;
      }
      unint64_t v37 = *(void *)(v25 + 8 * v38);
      if (!v37)
      {
        int64_t v38 = v34 + 3;
        if (v34 + 3 >= v73) {
          goto LABEL_35;
        }
        unint64_t v37 = *(void *)(v25 + 8 * v38);
        if (!v37)
        {
          int64_t v38 = v34 + 4;
          if (v34 + 4 >= v73) {
            goto LABEL_35;
          }
          unint64_t v37 = *(void *)(v25 + 8 * v38);
          if (!v37) {
            break;
          }
        }
      }
    }
LABEL_20:
    uint64_t v83 = (v37 - 1) & v37;
    int64_t v84 = v38;
  }
  uint64_t v39 = v34 + 5;
  if (v34 + 5 >= v73)
  {
LABEL_35:
    (*v81)(v22, 1, 1, v16);
LABEL_36:
    swift_release();
    return v68;
  }
  unint64_t v37 = *(void *)(v25 + 8 * v39);
  if (v37)
  {
    int64_t v38 = v34 + 5;
    goto LABEL_20;
  }
  while (1)
  {
    int64_t v38 = v39 + 1;
    if (__OFADD__(v39, 1)) {
      break;
    }
    if (v38 >= v73) {
      goto LABEL_35;
    }
    unint64_t v37 = *(void *)(v25 + 8 * v38);
    ++v39;
    if (v37) {
      goto LABEL_20;
    }
  }
LABEL_38:
  __break(1u);
  return result;
}

void *sub_100ED1DE0(uint64_t a1)
{
  uint64_t v16 = type metadata accessor for UUID();
  uint64_t v3 = *(void *)(v16 - 8);
  __chkstk_darwin(v16);
  uint64_t v5 = (char *)&v15 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  int64_t v6 = *(void *)(a1 + 16);
  unint64_t v7 = _swiftEmptyArrayStorage;
  if (v6)
  {
    uint64_t v15 = v1;
    uint64_t v17 = _swiftEmptyArrayStorage;
    sub_1000B7034(0, v6, 0);
    unint64_t v7 = v17;
    uint64_t v8 = (void *)(a1 + 32);
    do
    {
      uint64_t v10 = v8[3];
      uint64_t v9 = v8[4];
      sub_10001CD44(v8, v10);
      (*(void (**)(uint64_t))(*(void *)(*(void *)(v9 + 8) + 8) + 32))(v10);
      char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      uint64_t v17 = v7;
      if ((isUniquelyReferenced_nonNull_native & 1) == 0)
      {
        sub_1000B7034(0, v7[2] + 1, 1);
        unint64_t v7 = v17;
      }
      unint64_t v13 = v7[2];
      unint64_t v12 = v7[3];
      if (v13 >= v12 >> 1)
      {
        sub_1000B7034(v12 > 1, v13 + 1, 1);
        unint64_t v7 = v17;
      }
      v7[2] = v13 + 1;
      (*(void (**)(unint64_t, char *, uint64_t))(v3 + 32))((unint64_t)v7+ ((*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80))+ *(void *)(v3 + 72) * v13, v5, v16);
      uint64_t v17 = v7;
      v8 += 5;
      --v6;
    }
    while (v6);
  }
  return v7;
}

uint64_t sub_100ED1FC4(uint64_t a1)
{
  uint64_t v73 = sub_10000588C(&qword_101662500);
  uint64_t v3 = __chkstk_darwin(v73);
  uint64_t v62 = (char *)v52 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = __chkstk_darwin(v3);
  unint64_t v61 = (char *)v52 - v6;
  uint64_t v7 = __chkstk_darwin(v5);
  uint64_t v60 = (uint64_t)v52 - v8;
  uint64_t v9 = __chkstk_darwin(v7);
  uint64_t v59 = (char *)v52 - v10;
  __chkstk_darwin(v9);
  unint64_t v58 = (char *)v52 - v11;
  uint64_t v72 = type metadata accessor for UUID();
  uint64_t v12 = *(void *)(v72 - 8);
  __chkstk_darwin(v72);
  uint64_t v14 = (char *)v52 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  int64_t v15 = *(void *)(a1 + 16);
  uint64_t v16 = _swiftEmptyArrayStorage;
  if (!v15) {
    return (uint64_t)v16;
  }
  v52[1] = v1;
  uint64_t v74 = _swiftEmptyArrayStorage;
  sub_1000B7034(0, v15, 0);
  uint64_t result = sub_100803228(a1);
  unint64_t v19 = result;
  uint64_t v20 = 0;
  uint64_t v21 = a1 + 64;
  uint64_t v69 = v12 + 32;
  uint64_t v70 = v12 + 16;
  uint64_t v63 = a1 + 80;
  unint64_t v56 = v14;
  uint64_t v57 = a1;
  uint64_t v71 = v12;
  int64_t v53 = v15;
  uint64_t v54 = v18;
  uint64_t v55 = a1 + 64;
  while ((v19 & 0x8000000000000000) == 0 && (uint64_t)v19 < 1 << *(unsigned char *)(a1 + 32))
  {
    unint64_t v23 = v19 >> 6;
    if ((*(void *)(v21 + 8 * (v19 >> 6)) & (1 << v19)) == 0) {
      goto LABEL_25;
    }
    if (*(_DWORD *)(a1 + 36) != v18) {
      goto LABEL_26;
    }
    uint64_t v64 = v20;
    uint64_t v65 = 1 << v19;
    uint64_t v24 = v73;
    uint64_t v25 = (uint64_t)v58;
    uint64_t v27 = *(void *)(a1 + 48);
    uint64_t v28 = *(void *)(v12 + 72);
    uint64_t v66 = &v58[*(int *)(v73 + 48)];
    uint64_t v26 = (uint64_t)v66;
    uint64_t v67 = v28;
    uint64_t v29 = *(void (**)(char *, unint64_t, uint64_t))(v12 + 16);
    uint64_t v30 = v72;
    v29(v58, v27 + v28 * v19, v72);
    uint64_t v31 = *(void *)(a1 + 56);
    uint64_t v32 = *(void *)(*(void *)(type metadata accessor for SafeLocation() - 8) + 72);
    int64_t v68 = v19;
    sub_100EDD138(v31 + v32 * v19, v26, (uint64_t (*)(void))type metadata accessor for SafeLocation);
    uint64_t v33 = (uint64_t)v59;
    v29(v59, v25, v30);
    int64_t v34 = (void (*)(char *, uint64_t, uint64_t))v29;
    sub_100EDD138((uint64_t)v66, v33 + *(int *)(v24 + 48), (uint64_t (*)(void))type metadata accessor for SafeLocation);
    uint64_t v35 = v60;
    sub_10001D608(v33, v60, &qword_101662500);
    sub_10001DAB4(v25, &qword_101662500);
    uint64_t v36 = *(int *)(v24 + 48);
    unint64_t v37 = v61;
    uint64_t v38 = (uint64_t)&v61[v36];
    uint64_t v39 = v35 + v36;
    v34(v61, v35, v30);
    sub_100EDD138(v39, v38, (uint64_t (*)(void))type metadata accessor for SafeLocation);
    uint64_t v40 = (uint64_t)v62;
    uint64_t v41 = (uint64_t)&v62[*(int *)(v73 + 48)];
    char v42 = *(void (**)(char *, char *, uint64_t))(v71 + 32);
    uint64_t v43 = v37;
    int v44 = v56;
    v42(v62, v43, v30);
    sub_100EDC4C0(v38, v41, (uint64_t (*)(void))type metadata accessor for SafeLocation);
    v34(v44, v40, v30);
    sub_10001DAB4(v40, &qword_101662500);
    sub_10001DAB4(v35, &qword_101662500);
    uint64_t v16 = v74;
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    {
      sub_1000B7034(0, v16[2] + 1, 1);
      uint64_t v16 = v74;
    }
    unint64_t v46 = v16[2];
    unint64_t v45 = v16[3];
    uint64_t v12 = v71;
    if (v46 >= v45 >> 1)
    {
      sub_1000B7034(v45 > 1, v46 + 1, 1);
      uint64_t v16 = v74;
    }
    v16[2] = v46 + 1;
    uint64_t result = ((uint64_t (*)(char *, char *, uint64_t))v42)((char *)v16+ ((*(unsigned __int8 *)(v12 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v12 + 80))+ v46 * v67, v44, v72);
    uint64_t v74 = v16;
    a1 = v57;
    unint64_t v19 = 1 << *(unsigned char *)(v57 + 32);
    if (v68 >= (uint64_t)v19) {
      goto LABEL_27;
    }
    uint64_t v21 = v55;
    uint64_t v47 = *(void *)(v55 + 8 * v23);
    if ((v47 & v65) == 0) {
      goto LABEL_28;
    }
    LODWORD(v18) = v54;
    if (*(_DWORD *)(v57 + 36) != v54) {
      goto LABEL_29;
    }
    unint64_t v48 = v47 & (-2 << (v68 & 0x3F));
    if (v48)
    {
      unint64_t v19 = __clz(__rbit64(v48)) | v68 & 0xFFFFFFFFFFFFFFC0;
      int64_t v22 = v53;
    }
    else
    {
      unint64_t v49 = v23 + 1;
      unint64_t v50 = (v19 + 63) >> 6;
      int64_t v22 = v53;
      if (v23 + 1 < v50)
      {
        unint64_t v51 = *(void *)(v55 + 8 * v49);
        if (v51)
        {
LABEL_22:
          unint64_t v19 = __clz(__rbit64(v51)) + (v49 << 6);
        }
        else
        {
          while (v50 - 2 != v23)
          {
            unint64_t v51 = *(void *)(v63 + 8 * v23++);
            if (v51)
            {
              unint64_t v49 = v23 + 1;
              goto LABEL_22;
            }
          }
        }
      }
    }
    uint64_t v20 = v64 + 1;
    if (v64 + 1 == v22) {
      return (uint64_t)v16;
    }
  }
  __break(1u);
LABEL_25:
  __break(1u);
LABEL_26:
  __break(1u);
LABEL_27:
  __break(1u);
LABEL_28:
  __break(1u);
LABEL_29:
  __break(1u);
  return result;
}

void *sub_100ED2550(uint64_t a1)
{
  uint64_t v3 = type metadata accessor for UUID();
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  uint64_t v6 = (char *)v14 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  int64_t v7 = *(void *)(a1 + 16);
  uint64_t v8 = _swiftEmptyArrayStorage;
  if (v7)
  {
    v14[1] = v1;
    uint64_t v18 = _swiftEmptyArrayStorage;
    sub_1000B7034(0, v7, 0);
    uint64_t v8 = v18;
    uint64_t v17 = type metadata accessor for SafeLocation();
    uint64_t v9 = a1
       + ((*(unsigned __int8 *)(*(void *)(v17 - 8) + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(v17 - 8) + 80));
    uint64_t v16 = *(void *)(*(void *)(v17 - 8) + 72);
    uint64_t v10 = *(void (**)(char *, uint64_t, uint64_t))(v4 + 16);
    v14[2] = v4 + 32;
    int64_t v15 = v10;
    do
    {
      v15(v6, v9 + *(int *)(v17 + 20), v3);
      uint64_t v18 = v8;
      unint64_t v12 = v8[2];
      unint64_t v11 = v8[3];
      if (v12 >= v11 >> 1)
      {
        sub_1000B7034(v11 > 1, v12 + 1, 1);
        uint64_t v8 = v18;
      }
      v8[2] = v12 + 1;
      (*(void (**)(unint64_t, char *, uint64_t))(v4 + 32))((unint64_t)v8+ ((*(unsigned __int8 *)(v4 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80))+ *(void *)(v4 + 72) * v12, v6, v3);
      v9 += v16;
      --v7;
    }
    while (v7);
  }
  return v8;
}

uint64_t sub_100ED2768@<X0>(uint64_t a1@<X8>)
{
  id v2 = [self standardUserDefaults];
  NSString v3 = String._bridgeToObjectiveC()();
  id v4 = [v2 objectForKey:v3];

  if (v4)
  {
    _bridgeAnyObjectToAny(_:)();
    swift_unknownObjectRelease();
  }
  else
  {
    memset(v9, 0, sizeof(v9));
  }
  sub_10001D608((uint64_t)v9, (uint64_t)v10, (uint64_t *)&unk_101644360);
  if (v11)
  {
    uint64_t v5 = type metadata accessor for Date();
    int v6 = swift_dynamicCast();
    return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v5 - 8) + 56))(a1, v6 ^ 1u, 1, v5);
  }
  else
  {
    sub_10001DAB4((uint64_t)v10, (uint64_t *)&unk_101644360);
    uint64_t v8 = type metadata accessor for Date();
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 56))(a1, 1, 1, v8);
  }
}

uint64_t sub_100ED28F8()
{
  uint64_t v0 = sub_10000588C(&qword_1016626C8);
  uint64_t v1 = *(void *)(v0 - 8);
  __chkstk_darwin(v0);
  NSString v3 = (char *)v19 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v20 = sub_10000588C(&qword_1016626D0);
  uint64_t v4 = *(void *)(v20 - 8);
  __chkstk_darwin(v20);
  int v6 = (char *)v19 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = sub_10000588C(&qword_1016626D8);
  uint64_t v8 = *(void *)(v7 - 8);
  uint64_t v21 = v7;
  uint64_t v22 = v8;
  __chkstk_darwin(v7);
  uint64_t v10 = (char *)v19 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = sub_10000588C(&qword_1016626E0);
  uint64_t v12 = *(void *)(v11 - 8);
  uint64_t v23 = v11;
  uint64_t v24 = v12;
  __chkstk_darwin(v11);
  uint64_t v14 = (char *)v19 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v25 = AnyCurrentValuePublisher.publisher.getter();
  sub_10000588C((uint64_t *)&unk_1016569C0);
  v19[1] = &protocol conformance descriptor for AnyPublisher<A, B>;
  sub_100062734((unint64_t *)&qword_10163A518, (uint64_t *)&unk_1016569C0);
  Publisher.filter(_:)();
  swift_release();
  sub_100062734(&qword_1016626E8, &qword_1016626C8);
  sub_100EDD71C();
  Publisher<>.removeDuplicates()();
  (*(void (**)(char *, uint64_t))(v1 + 8))(v3, v0);
  sub_100062734(&qword_1016626F8, &qword_1016626D0);
  sub_100EDC528();
  uint64_t v15 = v20;
  Publisher<>.setFailureType<A>(to:)();
  (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v15);
  swift_retain();
  static Subscribers.Demand.unlimited.getter();
  sub_10000588C(&qword_101662538);
  sub_10000588C(&qword_101662700);
  sub_100062734(&qword_101662708, &qword_1016626D8);
  sub_100062734(&qword_101662710, &qword_101662700);
  uint64_t v16 = v21;
  Publisher.flatMap<A, B>(maxPublishers:_:)();
  swift_release();
  (*(void (**)(char *, uint64_t))(v22 + 8))(v10, v16);
  sub_100062734(&qword_101662718, &qword_1016626E0);
  uint64_t v17 = v23;
  Publisher.sink(receiveCompletion:receiveValue:)();
  (*(void (**)(char *, uint64_t))(v24 + 8))(v14, v17);
  swift_beginAccess();
  sub_10000588C(&qword_10163A540);
  sub_100062734(&qword_10163A548, &qword_10163A540);
  AnyCancellable.store<A>(in:)();
  swift_endAccess();
  return swift_release();
}

BOOL sub_100ED2E50(unsigned __int8 *a1)
{
  return *a1 == 1;
}

uint64_t sub_100ED2E60()
{
  return static Transaction.named<A>(_:with:)();
}

uint64_t sub_100ED2EE8@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v2 = sub_10000588C(&qword_101662720);
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  uint64_t v5 = (char *)v8 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8[1] = sub_100ED43C4(1);
  swift_retain();
  sub_10000588C(&qword_101662700);
  sub_100062734(&qword_101662710, &qword_101662700);
  Publisher.handleEvents(receiveSubscription:receiveOutput:receiveCompletion:receiveCancel:receiveRequest:)();
  swift_release();
  swift_release();
  sub_100062734(&qword_101662728, &qword_101662720);
  uint64_t v6 = Publisher.eraseToAnyPublisher()();
  uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v3 + 8))(v5, v2);
  *a1 = v6;
  return result;
}

void sub_100ED30B4()
{
  if (qword_101636EE0 != -1) {
    swift_once();
  }
  uint64_t v0 = type metadata accessor for Logger();
  sub_100010324(v0, (uint64_t)qword_10170E7C8);
  oslog = Logger.logObject.getter();
  os_log_type_t v1 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(oslog, v1))
  {
    uint64_t v2 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v2 = 0;
    _os_log_impl((void *)&_mh_execute_header, oslog, v1, "Updated safe locations due to me device change.", v2, 2u);
    swift_slowDealloc();
  }
}

uint64_t sub_100ED319C(uint64_t a1, uint64_t a2, char a3, uint64_t a4, uint64_t a5)
{
  uint64_t v10 = swift_allocObject();
  *(void *)(v10 + 16) = a2;
  *(unsigned char *)(v10 + 24) = a3;
  *(void *)(v10 + 32) = a4;
  *(void *)(v10 + 40) = a5;
  *(void *)(v10 + 48) = a1;
  swift_retain();
  sub_1000BD0E8(a4);
  swift_retain();
  swift_retain();
  sub_1000BD0E8(a4);
  swift_retain();
  sub_100AB24F0();
  if (qword_1016371D8 != -1) {
    swift_once();
  }
  SynchronousCache.cachedValue<A>(key:computeBlock:)();
  swift_bridgeObjectRelease();
  if (v13 == 1)
  {
    sub_100ED33F8(a2, a3 & 1, a4, a5, a1);
  }
  else
  {
    uint64_t v12 = type metadata accessor for Transaction();
    __chkstk_darwin(v12);
    static Transaction.named<A>(_:with:)();
  }
  swift_release();
  swift_release();
  swift_release();
  sub_1000A1534(a4);
  return swift_release();
}

uint64_t sub_100ED33F8(uint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v23 = a5;
  uint64_t v9 = sub_10000588C(&qword_10163C6C8);
  __chkstk_darwin(v9 - 8);
  uint64_t v11 = (char *)&v22 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = sub_10000588C(&qword_101662730);
  uint64_t v13 = *(void *)(v12 - 8);
  __chkstk_darwin(v12);
  uint64_t v15 = (char *)&v22 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = sub_100ED43C4(a2);
  id v24 = *(id *)(a1 + 16);
  id v17 = v24;
  uint64_t v25 = v16;
  uint64_t v18 = type metadata accessor for OS_dispatch_queue.SchedulerOptions();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v18 - 8) + 56))(v11, 1, 1, v18);
  id v19 = v17;
  sub_10000588C(&qword_101662700);
  sub_10001D4B0(0, (unint64_t *)&qword_1016376E0);
  sub_100062734(&qword_101662710, &qword_101662700);
  sub_10027B124();
  Publisher.subscribe<A>(on:options:)();
  sub_10001DAB4((uint64_t)v11, &qword_10163C6C8);

  swift_release();
  uint64_t v20 = (void *)swift_allocObject();
  v20[2] = a3;
  uint64_t v20[3] = a4;
  v20[4] = v23;
  sub_1000BD0E8(a3);
  sub_100062734(&qword_101662738, &qword_101662730);
  swift_retain();
  Publisher.oneshot(_:)();
  swift_release();
  return (*(uint64_t (**)(char *, uint64_t))(v13 + 8))(v15, v12);
}

void sub_100ED36B8(uint64_t a1, void (*a2)(unsigned __int8 *, void))
{
  uint64_t v3 = *(unsigned __int8 **)a1;
  if (*(unsigned char *)(a1 + 9))
  {
    if (a2)
    {
      int v4 = *(unsigned __int8 *)(a1 + 8);
      sub_100EDD11C(*(id *)a1, v4);
      a2(v3, v4 | 0x100u);
      sub_100EDD84C(v3, v4, 1);
    }
    goto LABEL_21;
  }
  int64_t v5 = *((void *)v3 + 2);
  if (v5)
  {
    uint64_t v30 = _swiftEmptyArrayStorage;
    sub_1000B6ED0(0, v5, 0);
    uint64_t v6 = _swiftEmptyArrayStorage;
    uint64_t v7 = v3 + 48;
    do
    {
      uint64_t v8 = *((void *)v7 - 2);
      uint64_t v9 = (void *)*((void *)v7 - 1);
      unsigned __int8 v10 = *v7;
      sub_100EDD278(v8, v9, *v7);
      _StringGuts.grow(_:)(51);
      uint64_t v28 = 0;
      unint64_t v29 = 0xE000000000000000;
      v11._countAndFlagsBits = 0xD000000000000031;
      v11._object = (void *)0x8000000101419C60;
      String.append(_:)(v11);
      v26[0] = v8;
      v26[1] = (uint64_t)v9;
      unsigned __int8 v27 = v10;
      sub_100EDD278(v8, v9, v10);
      v12._countAndFlagsBits = String.init<A>(describing:)();
      String.append(_:)(v12);
      swift_bridgeObjectRelease();
      sub_100EDD21C(v8, v9, v10);
      uint64_t v30 = v6;
      unint64_t v14 = v6[2];
      unint64_t v13 = v6[3];
      unint64_t v15 = v14 + 1;
      if (v14 >= v13 >> 1)
      {
        sub_1000B6ED0(v13 > 1, v14 + 1, 1);
        uint64_t v6 = v30;
      }
      v7 += 24;
      v6[2] = v15;
      uint64_t v16 = &v6[2 * v14];
      v16[4] = 0;
      v16[5] = 0xE000000000000000;
      --v5;
    }
    while (v5);
    goto LABEL_11;
  }
  uint64_t v6 = _swiftEmptyArrayStorage;
  unint64_t v15 = _swiftEmptyArrayStorage[2];
  if (v15)
  {
LABEL_11:
    uint64_t v17 = qword_101636EE0;
    swift_bridgeObjectRetain();
    if (v17 != -1) {
      swift_once();
    }
    uint64_t v18 = type metadata accessor for Logger();
    id v19 = v6 + 5;
    do
    {
      uint64_t v21 = *(v19 - 1);
      unint64_t v20 = *v19;
      sub_100010324(v18, (uint64_t)qword_10170E7C8);
      swift_bridgeObjectRetain_n();
      uint64_t v22 = Logger.logObject.getter();
      os_log_type_t v23 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v22, v23))
      {
        uint64_t v24 = swift_slowAlloc();
        v26[0] = swift_slowAlloc();
        *(_DWORD *)uint64_t v24 = 136315138;
        swift_bridgeObjectRetain();
        *(void *)(v24 + 4) = sub_1008FA0F0(v21, v20, v26);
        swift_bridgeObjectRelease_n();
        _os_log_impl((void *)&_mh_execute_header, v22, v23, "%s", (uint8_t *)v24, 0xCu);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
      }
      else
      {

        swift_bridgeObjectRelease_n();
      }
      v19 += 2;
      --v15;
    }
    while (v15);
    swift_bridgeObjectRelease();
  }
  swift_bridgeObjectRelease();
  if (a2) {
    a2(0, 0);
  }
LABEL_21:
  Transaction.capture()();
}

uint64_t sub_100ED3A58(uint64_t (*a1)(void **), uint64_t a2, unsigned __int8 a3, void *a4, uint64_t a5)
{
  int v9 = a3;
  uint64_t v10 = swift_allocObject();
  *(void *)(v10 + 16) = a1;
  *(void *)(v10 + 24) = a2;
  if ((v9 - 1) > 1)
  {
    swift_retain();
    swift_release();
    id v19 = _swiftEmptyArrayStorage;
    __int16 v20 = 0;
    return a1(&v19);
  }
  else
  {
    Swift::String v11 = a4 + 3;
    uint64_t v12 = a4[6];
    uint64_t v13 = a4[7];
    sub_10001CD44(v11, v12);
    if (v9 == 2) {
      uint64_t v14 = 0;
    }
    else {
      uint64_t v14 = -1;
    }
    type metadata accessor for RTLocationOfInterestType(0);
    uint64_t v21 = v15;
    uint64_t v22 = &off_1015FB628;
    id v19 = (void *)v14;
    uint64_t v16 = (void *)swift_allocObject();
    v16[2] = sub_100EDD6CC;
    v16[3] = v10;
    v16[4] = a5;
    uint64_t v17 = *(void (**)(void **, uint64_t (*)(uint64_t, uint64_t), void *, uint64_t, uint64_t))(v13 + 8);
    swift_retain();
    v17(&v19, sub_100EDD710, v16, v12, v13);
    swift_release();
    return _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)&v19);
  }
}

uint64_t sub_100ED3BB8(uint64_t a1, uint64_t a2, void (*a3)(void, void), uint64_t a4)
{
  uint64_t v33 = a4;
  uint64_t v7 = type metadata accessor for SafeLocation();
  uint64_t v8 = *(void *)(v7 - 8);
  __chkstk_darwin(v7 - 8);
  uint64_t v10 = (char *)&v30 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_101636EE0 != -1) {
    swift_once();
  }
  uint64_t v11 = type metadata accessor for Logger();
  sub_100010324(v11, (uint64_t)qword_10170E7C8);
  swift_bridgeObjectRetain();
  swift_errorRetain();
  swift_bridgeObjectRetain();
  swift_errorRetain();
  uint64_t v12 = Logger.logObject.getter();
  os_log_type_t v13 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v12, v13))
  {
    uint64_t v14 = swift_slowAlloc();
    uint64_t v31 = swift_slowAlloc();
    v35[0] = v31;
    *(_DWORD *)uint64_t v14 = 136315394;
    uint64_t v32 = a3;
    v34[0] = a1;
    swift_bridgeObjectRetain();
    sub_10000588C(&qword_1016626C0);
    uint64_t v15 = String.init<A>(describing:)();
    v34[0] = sub_1008FA0F0(v15, v16, v35);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease();
    *(_WORD *)(v14 + 12) = 2080;
    v34[0] = a2;
    swift_errorRetain();
    sub_10000588C((uint64_t *)&unk_101638EB0);
    uint64_t v17 = String.init<A>(describing:)();
    v34[0] = sub_1008FA0F0(v17, v18, v35);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    a3 = v32;
    swift_bridgeObjectRelease();
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl((void *)&_mh_execute_header, v12, v13, "Received locations of interest: %s error: %s", (uint8_t *)v14, 0x16u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    if (a2)
    {
LABEL_5:
      swift_errorRetain();
      swift_errorRetain();
      swift_errorRetain();
      id v19 = Logger.logObject.getter();
      os_log_type_t v20 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v19, v20))
      {
        uint64_t v21 = (uint8_t *)swift_slowAlloc();
        v35[0] = swift_slowAlloc();
        *(_DWORD *)uint64_t v21 = 136315138;
        swift_getErrorValue();
        uint64_t v22 = Error.localizedDescription.getter();
        v34[0] = sub_1008FA0F0(v22, v23, v35);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        swift_errorRelease();
        swift_errorRelease();
        _os_log_impl((void *)&_mh_execute_header, v19, v20, "Failed to fetch locations of interest due to error: %s", v21, 0xCu);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
      }
      else
      {
        swift_errorRelease();
        swift_errorRelease();
      }

      swift_errorRetain();
      a3(a2, 256);
      swift_errorRelease();
      return swift_errorRelease();
    }
  }
  else
  {
    swift_bridgeObjectRelease_n();
    swift_errorRelease();
    swift_errorRelease();

    if (a2) {
      goto LABEL_5;
    }
  }
  if (a1 && (int64_t v24 = *(void *)(a1 + 16)) != 0)
  {
    uint64_t v32 = a3;
    uint64_t v36 = _swiftEmptyArrayStorage;
    swift_bridgeObjectRetain();
    sub_1000B79B0(0, v24, 0);
    uint64_t v25 = a1 + 32;
    uint64_t v26 = v36;
    do
    {
      sub_10001D010(v25, (uint64_t)v35);
      sub_10001D010((uint64_t)v35, (uint64_t)v34);
      sub_100ED4160(v34, v10, 80.0);
      _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)v35);
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        sub_1000B79B0(0, v26[2] + 1, 1);
        uint64_t v26 = v36;
      }
      unint64_t v28 = v26[2];
      unint64_t v27 = v26[3];
      if (v28 >= v27 >> 1)
      {
        sub_1000B79B0(v27 > 1, v28 + 1, 1);
        uint64_t v26 = v36;
      }
      uint64_t v26[2] = v28 + 1;
      sub_100EDC4C0((uint64_t)v10, (uint64_t)v26+ ((*(unsigned __int8 *)(v8 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80))+ *(void *)(v8 + 72) * v28, (uint64_t (*)(void))type metadata accessor for SafeLocation);
      v25 += 40;
      --v24;
    }
    while (v24);
    swift_bridgeObjectRelease();
    v32(v26, 0);
  }
  else
  {
    a3(_swiftEmptyArrayStorage, 0);
  }
  return swift_bridgeObjectRelease();
}

uint64_t sub_100ED4160@<X0>(void *a1@<X0>, char *a2@<X8>, double a3@<D0>)
{
  uint64_t v6 = type metadata accessor for UUID();
  __chkstk_darwin(v6 - 8);
  uint64_t v8 = (char *)v28 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = a1[3];
  uint64_t v10 = a1[4];
  sub_10001CD44(a1, v9);
  (*(void (**)(uint64_t, uint64_t))(v10 + 8))(v9, v10);
  sub_10001D4B0(0, (unint64_t *)&qword_101646830);
  uint64_t v11 = a1[3];
  uint64_t v12 = a1[4];
  sub_10001CD44(a1, v11);
  (*(void (**)(void *__return_ptr, uint64_t, uint64_t))(v12 + 32))(v29, v11, v12);
  id v13 = sub_100ED9E94(v29, a3);
  uint64_t v14 = a1[3];
  uint64_t v15 = a1[4];
  sub_10001CD44(a1, v14);
  uint64_t v16 = (*(uint64_t (**)(uint64_t, uint64_t))(v15 + 16))(v14, v15);
  uint64_t v18 = v17;
  uint64_t v19 = a1[3];
  uint64_t v20 = a1[4];
  sub_10001CD44(a1, v19);
  (*(void (**)(void *__return_ptr, uint64_t, uint64_t))(v20 + 24))(v29, v19, v20);
  unint64_t v21 = *sub_10001CD44(v29, v29[3]) + 1;
  if (v21 >= 5) {
    char v22 = 0;
  }
  else {
    char v22 = 0x504030200uLL >> (8 * v21);
  }
  if (!v18)
  {
    uint64_t v18 = 0xE000000000000000;
    uint64_t v16 = 0;
  }
  uint64_t v23 = a1[3];
  uint64_t v24 = a1[4];
  sub_10001CD44(a1, v23);
  (*(void (**)(void *__return_ptr, uint64_t, uint64_t))(v24 + 24))(v28, v23, v24);
  uint64_t v25 = *sub_10001CD44(v28, v28[3]);
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)v28);
  if (v25) {
    int v26 = 2;
  }
  else {
    int v26 = 1;
  }
  sub_100F114E0((uint64_t)v8, v13, v16, v18, v22, v26, a2);
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)v29);
  return _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)a1);
}

uint64_t sub_100ED43C4(int a1)
{
  uint64_t v2 = v1;
  LODWORD(v92) = a1;
  uint64_t v93 = (uint64_t)*v1;
  uint64_t v3 = type metadata accessor for DispatchWorkItemFlags();
  __chkstk_darwin(v3 - 8);
  uint64_t v80 = (char *)&v75 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = type metadata accessor for DispatchQoS();
  __chkstk_darwin(v5 - 8);
  uint64_t v78 = (char *)&v75 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = sub_10000588C(&qword_10163C6C8);
  __chkstk_darwin(v7 - 8);
  uint64_t v9 = (char *)&v75 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v77 = sub_10000588C(&qword_101662508);
  uint64_t v76 = *(void *)(v77 - 8);
  __chkstk_darwin(v77);
  uint64_t v11 = (char *)&v75 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v83 = sub_10000588C(&qword_101662510);
  uint64_t v82 = *(void *)(v83 - 8);
  __chkstk_darwin(v83);
  uint64_t v79 = (char *)&v75 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = sub_10000588C(&qword_101662518);
  uint64_t v84 = *(void *)(v13 - 8);
  uint64_t v85 = v13;
  __chkstk_darwin(v13);
  uint64_t v81 = (char *)&v75 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = sub_10000588C(&qword_101662520);
  uint64_t v88 = *(void *)(v15 - 8);
  uint64_t v89 = v15;
  __chkstk_darwin(v15);
  unint64_t v86 = (char *)&v75 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v17 = sub_10000588C(&qword_101662528);
  uint64_t v90 = *(void *)(v17 - 8);
  uint64_t v91 = v17;
  __chkstk_darwin(v17);
  uint64_t v87 = (char *)&v75 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v19 = sub_10000588C(&qword_101662530);
  uint64_t v94 = *(void *)(v19 - 8);
  uint64_t v95 = v19;
  __chkstk_darwin(v19);
  unint64_t v21 = (char *)&v75 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v22 = sub_10000588C((uint64_t *)&unk_10163AC90);
  __chkstk_darwin(v22 - 8);
  uint64_t v24 = (char *)&v75 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v25 = type metadata accessor for Date();
  uint64_t v26 = *(void *)(v25 - 8);
  uint64_t v27 = __chkstk_darwin(v25);
  unint64_t v29 = (char *)&v75 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v27);
  uint64_t v31 = (char *)&v75 - v30;
  uint64_t My = type metadata accessor for Feature.FindMy();
  uint64_t v99 = My;
  uint64_t v100 = sub_100EDC42C((unint64_t *)&qword_101653E00, (void (*)(uint64_t))&type metadata accessor for Feature.FindMy);
  uint64_t v33 = sub_10001D958(&v97);
  (*(void (**)(uint64_t *, void, uint64_t))(*(void *)(My - 8) + 104))(v33, enum case for Feature.FindMy.separationAlerts(_:), My);
  LOBYTE(My) = isFeatureEnabled(_:)();
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)&v97);
  if ((My & 1) == 0)
  {
    if (qword_1016371D8 != -1) {
      swift_once();
    }
    uint64_t v97 = 0x7365547265646E75;
    unint64_t v98 = 0xE900000000000074;
    SynchronousCache.cachedValue<A>(key:computeBlock:)();
    swift_bridgeObjectRelease();
    if (v96 != 1)
    {
      if (qword_101636EE0 != -1) {
        swift_once();
      }
      uint64_t v38 = type metadata accessor for Logger();
      sub_100010324(v38, (uint64_t)qword_10170E7C8);
      uint64_t v39 = Logger.logObject.getter();
      os_log_type_t v40 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v39, v40))
      {
        uint64_t v41 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)uint64_t v41 = 0;
        _os_log_impl((void *)&_mh_execute_header, v39, v40, "Ignoring LOI update as FF is disabled.", v41, 2u);
        swift_slowDealloc();
      }

      type metadata accessor for SPSeparationMonitoringError(0);
      uint64_t v97 = 1;
      sub_1004A0BC8((uint64_t)_swiftEmptyArrayStorage);
      sub_100EDC42C(&qword_1016386A0, type metadata accessor for SPSeparationMonitoringError);
      _BridgedStoredNSError.init(_:userInfo:)();
      uint64_t v97 = v96;
      LOBYTE(v98) = 1;
      goto LABEL_19;
    }
  }
  AnyCurrentValuePublisher.value.getter();
  if (v97 != 1)
  {
    if (qword_101636EE0 != -1) {
      swift_once();
    }
    uint64_t v34 = type metadata accessor for Logger();
    sub_100010324(v34, (uint64_t)qword_10170E7C8);
    uint64_t v35 = Logger.logObject.getter();
    os_log_type_t v36 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v35, v36))
    {
      unint64_t v37 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)unint64_t v37 = 0;
      _os_log_impl((void *)&_mh_execute_header, v35, v36, "This is not a me device, Safe Locations can't be refreshed.", v37, 2u);
      swift_slowDealloc();
    }

    uint64_t v97 = 0;
    LOBYTE(v98) = 2;
LABEL_19:
    sub_10000588C(&qword_101662538);
    sub_100EDC528();
    Fail.init(error:)();
    sub_100062734(&qword_101662548, &qword_101662530);
    uint64_t v42 = v95;
    uint64_t v43 = Publisher.eraseToAnyPublisher()();
    (*(void (**)(char *, uint64_t))(v94 + 8))(v21, v42);
    return v43;
  }
  if (v92)
  {
LABEL_26:
    int64_t v53 = sub_100F144D4();
    swift_retain();
    uint64_t v54 = sub_100EDC57C((uint64_t)v53, v2);
    swift_bridgeObjectRelease();
    swift_release();
    if (qword_101636EE0 != -1) {
      swift_once();
    }
    uint64_t v55 = type metadata accessor for Logger();
    sub_100010324(v55, (uint64_t)qword_10170E7C8);
    unint64_t v56 = Logger.logObject.getter();
    os_log_type_t v57 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v56, v57))
    {
      unint64_t v58 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)unint64_t v58 = 0;
      _os_log_impl((void *)&_mh_execute_header, v56, v57, "Will update all LOI backed safe locations.", v58, 2u);
      swift_slowDealloc();
    }

    dispatch_group_t v59 = dispatch_group_create();
    uint64_t v97 = (uint64_t)v54;
    sub_10000588C(&qword_101662550);
    sub_10000588C(&qword_101662558);
    sub_100062734(&qword_101662560, &qword_101662550);
    sub_100062734(&qword_101662568, &qword_101662558);
    Publishers.MergeMany.init<A>(_:)();
    sub_100062734(&qword_101662570, &qword_101662508);
    uint64_t v60 = v79;
    uint64_t v61 = v77;
    Publisher.collect()();
    (*(void (**)(char *, uint64_t))(v76 + 8))(v11, v61);
    uint64_t v97 = (uint64_t)v2[2];
    id v62 = (id)v97;
    static DispatchQoS.background.getter();
    static DispatchWorkItemFlags.barrier.getter();
    uint64_t v63 = v59;
    OS_dispatch_queue.SchedulerOptions.init(qos:flags:group:)();
    uint64_t v64 = type metadata accessor for OS_dispatch_queue.SchedulerOptions();
    (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v64 - 8) + 56))(v9, 0, 1, v64);
    sub_10001D4B0(0, (unint64_t *)&qword_1016376E0);
    sub_100062734(&qword_101662578, &qword_101662510);
    sub_10027B124();
    uint64_t v65 = v81;
    uint64_t v66 = v83;
    Publisher.subscribe<A>(on:options:)();
    sub_10001DAB4((uint64_t)v9, &qword_10163C6C8);

    (*(void (**)(char *, uint64_t))(v82 + 8))(v60, v66);
    sub_100062734(&qword_101662580, &qword_101662518);
    sub_100EDC528();
    uint64_t v67 = v85;
    int64_t v68 = v86;
    Publisher<>.setFailureType<A>(to:)();
    (*(void (**)(char *, uint64_t))(v84 + 8))(v65, v67);
    *(void *)(swift_allocObject() + 16) = v93;
    sub_100062734(&qword_101662588, &qword_101662520);
    uint64_t v69 = v89;
    uint64_t v70 = v87;
    Publisher.handleEvents(receiveSubscription:receiveOutput:receiveCompletion:receiveCancel:receiveRequest:)();
    swift_release();
    (*(void (**)(char *, uint64_t))(v88 + 8))(v68, v69);
    sub_100062734(&qword_101662590, &qword_101662528);
    uint64_t v71 = v91;
    uint64_t v43 = Publisher.eraseToAnyPublisher()();

    (*(void (**)(char *, uint64_t))(v90 + 8))(v70, v71);
    return v43;
  }
  sub_100ED2768((uint64_t)v24);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v26 + 48))(v24, 1, v25) == 1)
  {
    sub_10001DAB4((uint64_t)v24, (uint64_t *)&unk_10163AC90);
    goto LABEL_26;
  }
  (*(void (**)(char *, char *, uint64_t))(v26 + 32))(v31, v24, v25);
  Date.timeIntervalSinceNow.getter();
  if (v44 >= 86400.0)
  {
    (*(void (**)(char *, uint64_t))(v26 + 8))(v31, v25);
    goto LABEL_26;
  }
  if (qword_101636EE0 != -1) {
    swift_once();
  }
  uint64_t v45 = type metadata accessor for Logger();
  sub_100010324(v45, (uint64_t)qword_10170E7C8);
  (*(void (**)(char *, char *, uint64_t))(v26 + 16))(v29, v31, v25);
  unint64_t v46 = Logger.logObject.getter();
  os_log_type_t v47 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v46, v47))
  {
    unint64_t v48 = (uint8_t *)swift_slowAlloc();
    uint64_t v93 = swift_slowAlloc();
    uint64_t v97 = v93;
    *(_DWORD *)unint64_t v48 = 136315138;
    char v92 = v48 + 4;
    sub_100EDC42C((unint64_t *)&qword_101638DA0, (void (*)(uint64_t))&type metadata accessor for Date);
    uint64_t v49 = dispatch thunk of CustomStringConvertible.description.getter();
    uint64_t v96 = sub_1008FA0F0(v49, v50, &v97);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    unint64_t v51 = *(void (**)(char *, uint64_t))(v26 + 8);
    v51(v29, v25);
    uint64_t v52 = v51;
    _os_log_impl((void *)&_mh_execute_header, v46, v47, "Ignoring LOI update as last refresh date is too fresh lastUpdateDate: %s", v48, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    uint64_t v73 = *(void (**)(char *, uint64_t))(v26 + 8);
    v73(v29, v25);
    uint64_t v52 = v73;
  }

  uint64_t v97 = 1;
  LOBYTE(v98) = 2;
  sub_10000588C(&qword_101662538);
  sub_100EDC528();
  Fail.init(error:)();
  sub_100062734(&qword_101662548, &qword_101662530);
  uint64_t v74 = v95;
  uint64_t v43 = Publisher.eraseToAnyPublisher()();
  (*(void (**)(char *, uint64_t))(v94 + 8))(v21, v74);
  v52(v31, v25);
  return v43;
}

uint64_t sub_100ED54BC()
{
  uint64_t v0 = sub_10000588C((uint64_t *)&unk_10163AC90);
  __chkstk_darwin(v0 - 8);
  uint64_t v2 = (char *)&v5 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  Date.init()();
  uint64_t v3 = type metadata accessor for Date();
  (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v3 - 8) + 56))(v2, 0, 1, v3);
  return sub_100EDCED8((uint64_t)v2);
}

uint64_t sub_100ED5574@<X0>(uint64_t *a1@<X0>, int a2@<W1>, uint64_t a3@<X2>, uint64_t *a4@<X8>)
{
  uint64_t v74 = a3;
  int v78 = a2;
  uint64_t v72 = a4;
  uint64_t v61 = sub_10000588C(&qword_101662640);
  uint64_t v60 = *(void *)(v61 - 8);
  __chkstk_darwin(v61);
  dispatch_group_t v59 = (char *)&v59 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v67 = sub_10000588C(&qword_101662648);
  uint64_t v65 = *(void *)(v67 - 8);
  __chkstk_darwin(v67);
  id v62 = (char *)&v59 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v68 = sub_10000588C(&qword_101662650);
  uint64_t v66 = *(void *)(v68 - 8);
  __chkstk_darwin(v68);
  uint64_t v63 = (char *)&v59 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = sub_10000588C(&qword_101662658);
  uint64_t v69 = *(void *)(v8 - 8);
  uint64_t v70 = v8;
  __chkstk_darwin(v8);
  uint64_t v64 = (char *)&v59 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  unint64_t v10 = type metadata accessor for SafeLocation();
  uint64_t v76 = *(void *)(v10 - 8);
  uint64_t v11 = __chkstk_darwin(v10);
  uint64_t v79 = (uint64_t)&v59 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = __chkstk_darwin(v11);
  uint64_t v15 = (char *)&v59 - v14;
  __chkstk_darwin(v13);
  uint64_t v17 = (char *)&v59 - v16;
  uint64_t v71 = *a1;
  if (qword_101636EE0 != -1) {
LABEL_28:
  }
    swift_once();
  uint64_t v18 = type metadata accessor for Logger();
  uint64_t v73 = sub_100010324(v18, (uint64_t)qword_10170E7C8);
  uint64_t v19 = Logger.logObject.getter();
  os_log_type_t v20 = static os_log_type_t.default.getter();
  BOOL v21 = os_log_type_enabled(v19, v20);
  unint64_t v77 = v10;
  if (v21)
  {
    uint64_t v22 = (uint8_t *)swift_slowAlloc();
    unint64_t v10 = swift_slowAlloc();
    v81[0] = v10;
    *(_DWORD *)uint64_t v22 = 136315138;
    uint64_t v75 = v22 + 4;
    LOBYTE(v80) = v78;
    uint64_t v23 = String.init<A>(describing:)();
    uint64_t v80 = sub_1008FA0F0(v23, v24, v81);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v19, v20, "Updating smart safe locations of type: %s", v22, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }

  uint64_t v25 = sub_100B6C090();
  uint64_t v26 = _swiftEmptyArrayStorage;
  v81[0] = (uint64_t)_swiftEmptyArrayStorage;
  uint64_t v75 = (uint8_t *)v25[2];
  if (v75)
  {
    unint64_t v27 = 0;
    uint64_t v28 = _swiftEmptyArrayStorage;
    unint64_t v29 = v77;
    while (1)
    {
      if (v27 >= v25[2])
      {
        __break(1u);
        goto LABEL_28;
      }
      unint64_t v30 = (*(unsigned __int8 *)(v76 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v76 + 80);
      uint64_t v31 = *(void *)(v76 + 72);
      sub_100EDD138((uint64_t)v25 + v30 + v31 * v27, (uint64_t)v17, (uint64_t (*)(void))type metadata accessor for SafeLocation);
      int v32 = v17[*(int *)(v29 + 24)];
      sub_100EDD138((uint64_t)v17, (uint64_t)v15, (uint64_t (*)(void))type metadata accessor for SafeLocation);
      if (v32 == v78) {
        break;
      }
      unint64_t v10 = v15[*(int *)(v29 + 24)];
      sub_100E8DD7C((uint64_t)v15, (uint64_t (*)(void))type metadata accessor for SafeLocation);
      if (v10 == 1) {
        goto LABEL_12;
      }
      sub_100E8DD7C((uint64_t)v17, (uint64_t (*)(void))type metadata accessor for SafeLocation);
LABEL_7:
      if (v75 == (uint8_t *)++v27)
      {
        uint64_t v26 = (void *)v81[0];
        goto LABEL_18;
      }
    }
    sub_100E8DD7C((uint64_t)v15, (uint64_t (*)(void))type metadata accessor for SafeLocation);
LABEL_12:
    sub_100EDC4C0((uint64_t)v17, v79, (uint64_t (*)(void))type metadata accessor for SafeLocation);
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
      sub_1000B79B0(0, v28[2] + 1, 1);
    }
    uint64_t v28 = (void *)v81[0];
    unint64_t v10 = *(void *)(v81[0] + 16);
    unint64_t v33 = *(void *)(v81[0] + 24);
    if (v10 >= v33 >> 1)
    {
      sub_1000B79B0(v33 > 1, v10 + 1, 1);
      uint64_t v28 = (void *)v81[0];
    }
    void v28[2] = v10 + 1;
    sub_100EDC4C0(v79, (uint64_t)v28 + v30 + v10 * v31, (uint64_t (*)(void))type metadata accessor for SafeLocation);
    goto LABEL_7;
  }
LABEL_18:
  swift_bridgeObjectRelease();
  swift_retain_n();
  uint64_t v34 = Logger.logObject.getter();
  os_log_type_t v35 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v34, v35))
  {
    os_log_type_t v36 = (uint8_t *)swift_slowAlloc();
    v81[0] = swift_slowAlloc();
    *(_DWORD *)os_log_type_t v36 = 136315138;
    swift_retain();
    uint64_t v37 = Array.description.getter();
    unint64_t v39 = v38;
    swift_release();
    uint64_t v80 = sub_1008FA0F0(v37, v39, v81);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release_n();
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v34, v35, "Existing safe locations: %s", v36, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {

    swift_release_n();
  }
  uint64_t v40 = sub_100ED70F4(v78, (uint64_t)v26, v71);
  swift_release();
  swift_bridgeObjectRetain_n();
  uint64_t v41 = Logger.logObject.getter();
  os_log_type_t v42 = static os_log_type_t.default.getter();
  if (!os_log_type_enabled(v41, v42))
  {

    swift_bridgeObjectRelease_n();
    if (*(void *)(v40 + 16)) {
      goto LABEL_23;
    }
LABEL_25:
    swift_bridgeObjectRelease();
    v81[0] = (uint64_t)_swiftEmptyArrayStorage;
    sub_10000588C(&qword_101662698);
    os_log_type_t v57 = v59;
    Just.init(_:)();
    sub_100062734(&qword_1016626A0, &qword_101662640);
    uint64_t v58 = v61;
    uint64_t v55 = Publisher.eraseToAnyPublisher()();
    uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v60 + 8))(v57, v58);
    goto LABEL_26;
  }
  uint64_t v43 = (uint8_t *)swift_slowAlloc();
  v81[0] = swift_slowAlloc();
  *(_DWORD *)uint64_t v43 = 136315138;
  type metadata accessor for LocationOfInterestProvider.RemappingOperation();
  swift_bridgeObjectRetain();
  uint64_t v44 = Array.description.getter();
  unint64_t v46 = v45;
  swift_bridgeObjectRelease();
  uint64_t v80 = sub_1008FA0F0(v44, v46, v81);
  UnsafeMutableRawBufferPointer.copyMemory(from:)();
  swift_bridgeObjectRelease_n();
  swift_bridgeObjectRelease();
  _os_log_impl((void *)&_mh_execute_header, v41, v42, "Received mapping response: %s", v43, 0xCu);
  swift_arrayDestroy();
  swift_slowDealloc();
  swift_slowDealloc();

  if (!*(void *)(v40 + 16)) {
    goto LABEL_25;
  }
LABEL_23:
  uint64_t v47 = v74;
  swift_retain();
  unint64_t v48 = sub_100EDCB94(v40, v47);
  swift_bridgeObjectRelease();
  swift_release();
  v81[0] = (uint64_t)v48;
  sub_10000588C(&qword_101662660);
  sub_10000588C(&qword_101662668);
  sub_100062734(&qword_101662670, &qword_101662660);
  sub_100062734(&qword_101662678, &qword_101662668);
  uint64_t v49 = v62;
  Publishers.MergeMany.init<A>(_:)();
  type metadata accessor for LocationOfInterestProvider.RemappingOperation();
  sub_100062734(&qword_101662680, &qword_101662648);
  unint64_t v50 = v63;
  uint64_t v51 = v67;
  Publisher.compactMap<A>(_:)();
  (*(void (**)(char *, uint64_t))(v65 + 8))(v49, v51);
  sub_100062734(&qword_101662688, &qword_101662650);
  uint64_t v52 = v64;
  uint64_t v53 = v68;
  Publisher.collect()();
  (*(void (**)(char *, uint64_t))(v66 + 8))(v50, v53);
  sub_100062734(&qword_101662690, &qword_101662658);
  uint64_t v54 = v70;
  uint64_t v55 = Publisher.eraseToAnyPublisher()();
  uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v69 + 8))(v52, v54);
LABEL_26:
  *uint64_t v72 = v55;
  return result;
}

uint64_t sub_100ED6128@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = sub_10000588C(&qword_1016626A8);
  __chkstk_darwin(v4);
  uint64_t v6 = (char *)&v10 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10001D074(a1, (uint64_t)v6, &qword_1016626A8);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    sub_10001DAB4((uint64_t)v6, &qword_1016626A8);
    uint64_t v7 = type metadata accessor for LocationOfInterestProvider.RemappingOperation();
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56))(a2, 1, 1, v7);
  }
  else
  {
    sub_100EDC4C0((uint64_t)v6, a2, (uint64_t (*)(void))type metadata accessor for LocationOfInterestProvider.RemappingOperation);
    uint64_t v9 = type metadata accessor for LocationOfInterestProvider.RemappingOperation();
    return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v9 - 8) + 56))(a2, 0, 1, v9);
  }
}

uint64_t sub_100ED627C@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X8>)
{
  uint64_t v58 = a3;
  uint64_t v72 = a4;
  uint64_t v6 = sub_10000588C(&qword_1016625F8);
  uint64_t v66 = *(void *)(v6 - 8);
  uint64_t v67 = v6;
  __chkstk_darwin(v6);
  uint64_t v8 = (char *)&v55 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = sub_10000588C(&qword_101662610);
  uint64_t v68 = *(void *)(v9 - 8);
  uint64_t v69 = v9;
  __chkstk_darwin(v9);
  uint64_t v11 = (char *)&v55 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = sub_10000588C(&qword_1016555A0);
  uint64_t v60 = *(void *)(v12 - 8);
  uint64_t v61 = v12;
  __chkstk_darwin(v12);
  dispatch_group_t v59 = (char *)&v55 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = sub_10000588C(&qword_101662618);
  uint64_t v64 = *(void *)(v14 - 8);
  __chkstk_darwin(v14);
  id v62 = (char *)&v55 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = sub_10000588C(&qword_101662620);
  uint64_t v17 = *(void *)(v16 - 8);
  __chkstk_darwin(v16);
  uint64_t v63 = (char *)&v55 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v19 = type metadata accessor for LocationOfInterestProvider.RemappingOperation();
  uint64_t v20 = __chkstk_darwin(v19);
  uint64_t v22 = (char *)&v55 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v20);
  uint64_t v25 = (char *)&v55 - v24;
  uint64_t v26 = *a1;
  uint64_t v65 = a2;
  uint64_t v70 = a2;
  uint64_t v71 = v26;
  uint64_t v27 = *(void *)(v26 + 16);
  if (!v27)
  {
    swift_bridgeObjectRetain();
    goto LABEL_14;
  }
  uint64_t v55 = v14;
  uint64_t v56 = v17;
  uint64_t v57 = v16;
  uint64_t v28 = v26 + ((*(unsigned __int8 *)(v23 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v23 + 80));
  uint64_t v29 = *(void *)(v23 + 72);
  swift_bridgeObjectRetain();
  while (1)
  {
    sub_100EDD138(v28, (uint64_t)v25, (uint64_t (*)(void))type metadata accessor for LocationOfInterestProvider.RemappingOperation);
    sub_100EDD138((uint64_t)v25, (uint64_t)v22, (uint64_t (*)(void))type metadata accessor for LocationOfInterestProvider.RemappingOperation);
    if (!swift_getEnumCaseMultiPayload()) {
      break;
    }
    sub_100E8DD7C((uint64_t)v22, (uint64_t (*)(void))type metadata accessor for LocationOfInterestProvider.RemappingOperation);
    sub_100E8DD7C((uint64_t)v25, (uint64_t (*)(void))type metadata accessor for LocationOfInterestProvider.RemappingOperation);
LABEL_4:
    v28 += v29;
    if (!--v27) {
      goto LABEL_14;
    }
  }
  char v30 = v22[*(int *)(sub_10000588C(&qword_1016624F8) + 48)];
  sub_100E8DD7C((uint64_t)v22, (uint64_t (*)(void))type metadata accessor for SafeLocation);
  sub_100E8DD7C((uint64_t)v25, (uint64_t (*)(void))type metadata accessor for LocationOfInterestProvider.RemappingOperation);
  if (v30) {
    goto LABEL_4;
  }
  if (v65 != 2)
  {
LABEL_14:
    uint64_t v73 = v70;
    uint64_t v74 = v71;
    char v75 = 0;
    swift_bridgeObjectRetain();
    Just.init(_:)();
    sub_100EDC528();
    uint64_t v53 = v67;
    Just.setFailureType<A>(to:)();
    (*(void (**)(char *, uint64_t))(v66 + 8))(v8, v53);
    sub_100062734(&qword_101662628, &qword_101662610);
    uint64_t v54 = v69;
    uint64_t v51 = Publisher.eraseToAnyPublisher()();
    swift_bridgeObjectRelease();
    uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v68 + 8))(v11, v54);
    goto LABEL_15;
  }
  uint64_t v31 = *(char **)(v58 + 64);
  int v32 = sub_100ACF5FC();
  swift_retain();
  unint64_t v33 = sub_100EDA748((uint64_t)v32, v31);
  swift_bridgeObjectRelease();
  swift_release();
  uint64_t v34 = sub_100A9A618((uint64_t)v33);
  swift_bridgeObjectRelease();
  os_log_type_t v35 = sub_100ED1DE0((uint64_t)v34);
  swift_bridgeObjectRelease();
  if (qword_101636EE0 != -1) {
    swift_once();
  }
  uint64_t v36 = type metadata accessor for Logger();
  sub_100010324(v36, (uint64_t)qword_10170E7C8);
  uint64_t v37 = Logger.logObject.getter();
  os_log_type_t v38 = static os_log_type_t.default.getter();
  BOOL v39 = os_log_type_enabled(v37, v38);
  uint64_t v40 = v55;
  if (v39)
  {
    uint64_t v41 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v41 = 0;
    _os_log_impl((void *)&_mh_execute_header, v37, v38, "New Safe Location triggered auto-enrollment.", v41, 2u);
    swift_slowDealloc();
  }

  uint64_t v42 = swift_allocObject();
  *(void *)(v42 + 16) = v31;
  *(void *)(v42 + 24) = v35;
  swift_retain();
  swift_bridgeObjectRetain();
  sub_10000588C((uint64_t *)&unk_101655548);
  sub_100062734(&qword_1016555A8, (uint64_t *)&unk_101655548);
  uint64_t v43 = v59;
  Deferred.init(createPublisher:)();
  sub_100062734(&qword_1016555B0, &qword_1016555A0);
  uint64_t v44 = v61;
  uint64_t v45 = Publisher.eraseToAnyPublisher()();
  (*(void (**)(char *, uint64_t))(v60 + 8))(v43, v44);
  swift_bridgeObjectRelease();
  uint64_t v73 = v45;
  uint64_t v46 = swift_allocObject();
  uint64_t v47 = v71;
  *(void *)(v46 + 16) = v70;
  *(void *)(v46 + 24) = v47;
  *(unsigned char *)(v46 + 32) = 0;
  swift_bridgeObjectRetain();
  sub_10000588C(&qword_101655570);
  sub_100062734(&qword_101655580, &qword_101655570);
  unint64_t v48 = v62;
  Publisher.map<A>(_:)();
  swift_release();
  swift_release();
  sub_100062734(&qword_101662630, &qword_101662618);
  sub_100EDC528();
  uint64_t v49 = v63;
  Publisher.mapError<A>(_:)();
  (*(void (**)(char *, uint64_t))(v64 + 8))(v48, v40);
  sub_100062734(&qword_101662638, &qword_101662620);
  uint64_t v50 = v57;
  uint64_t v51 = Publisher.eraseToAnyPublisher()();
  swift_bridgeObjectRelease();
  uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v56 + 8))(v49, v50);
LABEL_15:
  *uint64_t v72 = v51;
  return result;
}

id sub_100ED6B88@<X0>(void **a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2 = *a1;
  *(void *)a2 = v2;
  *(unsigned char *)(a2 + 8) = 1;
  return v2;
}

uint64_t sub_100ED6B9C@<X0>(uint64_t a1@<X0>, unsigned __int8 a2@<W1>, uint64_t *a3@<X8>)
{
  uint64_t v6 = sub_10000588C(&qword_1016625F8);
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  uint64_t v9 = (char *)v18 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = sub_10000588C(&qword_101662600);
  uint64_t v11 = *(void *)(v10 - 8);
  __chkstk_darwin(v10);
  uint64_t v13 = (char *)v18 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = *(void **)a1;
  char v15 = *(unsigned char *)(a1 + 8);
  v18[1] = a2;
  v18[2] = v14;
  char v19 = v15 | 0x40;
  sub_100EDD11C(v14, v15);
  Just.init(_:)();
  Just.setFailureType<A>(to:)();
  (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
  sub_100062734(&qword_101662608, &qword_101662600);
  uint64_t v16 = Publisher.eraseToAnyPublisher()();
  uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v11 + 8))(v13, v10);
  *a3 = v16;
  return result;
}

uint64_t sub_100ED6DA4()
{
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for SafeLocation();
  uint64_t v3 = __chkstk_darwin(v2);
  uint64_t v5 = (char *)&v22 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v3);
  uint64_t v7 = (char *)&v22 - v6;
  uint64_t v8 = type metadata accessor for LocationOfInterestProvider.RemappingOperation();
  __chkstk_darwin(v8);
  uint64_t v10 = (char *)&v22 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100EDD138(v1, (uint64_t)v10, (uint64_t (*)(void))type metadata accessor for LocationOfInterestProvider.RemappingOperation);
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload)
  {
    if (EnumCaseMultiPayload == 1)
    {
      sub_100EDC4C0((uint64_t)v10, (uint64_t)v5, (uint64_t (*)(void))type metadata accessor for SafeLocation);
      uint64_t v12 = 0x65766F6D6572;
    }
    else
    {
      sub_100EDC4C0((uint64_t)v10, (uint64_t)v5, (uint64_t (*)(void))type metadata accessor for SafeLocation);
      uint64_t v12 = 0x657461647075;
    }
    uint64_t v22 = v12 & 0xFFFFFFFFFFFFLL | 0x20000000000000;
    unint64_t v23 = 0xE700000000000000;
    type metadata accessor for UUID();
    sub_100EDC42C((unint64_t *)&qword_101638B10, (void (*)(uint64_t))&type metadata accessor for UUID);
    v20._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v20);
    swift_bridgeObjectRelease();
    uint64_t v19 = v22;
  }
  else
  {
    int v13 = v10[*(int *)(sub_10000588C(&qword_1016624F8) + 48)];
    sub_100EDC4C0((uint64_t)v10, (uint64_t)v7, (uint64_t (*)(void))type metadata accessor for SafeLocation);
    uint64_t v22 = 0;
    unint64_t v23 = 0xE000000000000000;
    _StringGuts.grow(_:)(19);
    swift_bridgeObjectRelease();
    uint64_t v22 = 0x20657461657263;
    unint64_t v23 = 0xE700000000000000;
    type metadata accessor for UUID();
    sub_100EDC42C((unint64_t *)&qword_101638B10, (void (*)(uint64_t))&type metadata accessor for UUID);
    v14._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v14);
    swift_bridgeObjectRelease();
    v15._countAndFlagsBits = 0x206465766F6D202CLL;
    v15._object = (void *)0xE800000000000000;
    String.append(_:)(v15);
    if (v13) {
      uint64_t v16 = 1702195828;
    }
    else {
      uint64_t v16 = 0x65736C6166;
    }
    if (v13) {
      unint64_t v17 = 0xE400000000000000;
    }
    else {
      unint64_t v17 = 0xE500000000000000;
    }
    unint64_t v18 = v17;
    String.append(_:)(*(Swift::String *)&v16);
    swift_bridgeObjectRelease();
    uint64_t v19 = v22;
    uint64_t v5 = v7;
  }
  sub_100E8DD7C((uint64_t)v5, (uint64_t (*)(void))type metadata accessor for SafeLocation);
  return v19;
}

uint64_t sub_100ED70F4(int a1, uint64_t a2, uint64_t a3)
{
  int v263 = a1;
  uint64_t v313 = type metadata accessor for UUID();
  uint64_t v5 = *(void *)(v313 - 8);
  uint64_t v6 = __chkstk_darwin(v313);
  uint64_t v277 = (uint64_t)v262 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = __chkstk_darwin(v6);
  uint64_t v275 = (uint64_t)v262 - v9;
  uint64_t v10 = __chkstk_darwin(v8);
  uint64_t v276 = (uint64_t)v262 - v11;
  uint64_t v12 = __chkstk_darwin(v10);
  v311 = (char *)v262 - v13;
  __chkstk_darwin(v12);
  v314 = (char *)v262 - v14;
  uint64_t v15 = sub_10000588C(&qword_101638CF0);
  __chkstk_darwin(v15 - 8);
  v299 = (char *)v262 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v309 = type metadata accessor for Date();
  v316 = *(int **)(v309 - 8);
  __chkstk_darwin(v309);
  unint64_t v18 = (char *)v262 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v284 = sub_10000588C(&qword_1016624E8);
  __chkstk_darwin(v284);
  uint64_t v287 = (uint64_t)v262 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v20 = sub_10000588C(&qword_101653F20);
  uint64_t v21 = __chkstk_darwin(v20 - 8);
  uint64_t v300 = (uint64_t)v262 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v21);
  uint64_t v301 = (uint64_t)v262 - v23;
  uint64_t v24 = (int *)type metadata accessor for SafeLocation();
  uint64_t v25 = *((void *)v24 - 1);
  uint64_t v26 = __chkstk_darwin(v24);
  uint64_t v273 = (uint64_t)v262 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v28 = __chkstk_darwin(v26);
  uint64_t v269 = (uint64_t)v262 - v29;
  uint64_t v30 = __chkstk_darwin(v28);
  uint64_t v271 = (uint64_t)v262 - v31;
  uint64_t v32 = __chkstk_darwin(v30);
  uint64_t v268 = (uint64_t)v262 - v33;
  uint64_t v34 = __chkstk_darwin(v32);
  uint64_t v272 = (uint64_t)v262 - v35;
  uint64_t v36 = __chkstk_darwin(v34);
  uint64_t v274 = (uint64_t)v262 - v37;
  uint64_t v38 = __chkstk_darwin(v36);
  uint64_t v279 = (uint64_t)v262 - v39;
  uint64_t v40 = __chkstk_darwin(v38);
  uint64_t v278 = (uint64_t)v262 - v41;
  uint64_t v42 = __chkstk_darwin(v40);
  uint64_t v304 = (uint64_t)v262 - v43;
  uint64_t v44 = __chkstk_darwin(v42);
  uint64_t v46 = (char *)v262 - v45;
  uint64_t v47 = __chkstk_darwin(v44);
  uint64_t v49 = (char *)v262 - v48;
  __chkstk_darwin(v47);
  uint64_t v306 = (uint64_t)v262 - v50;
  unint64_t v288 = sub_100930D8C((uint64_t)_swiftEmptyArrayStorage);
  unint64_t v321 = sub_100930D8C((uint64_t)_swiftEmptyArrayStorage);
  unint64_t v320 = sub_100930D8C((uint64_t)_swiftEmptyArrayStorage);
  uint64_t v51 = *(void *)(a3 + 16);
  uint64_t v290 = a2;
  uint64_t v283 = v51;
  if (!v51)
  {
LABEL_90:
    uint64_t v240 = swift_bridgeObjectRetain();
    uint64_t v241 = sub_100ED1FC4(v240);
    swift_bridgeObjectRelease();
    uint64_t v242 = sub_101158244(v241);
    swift_bridgeObjectRelease();
    uint64_t v243 = swift_bridgeObjectRetain();
    uint64_t v244 = sub_100ED1FC4(v243);
    swift_bridgeObjectRelease();
    uint64_t v245 = sub_101158244(v244);
    swift_bridgeObjectRelease();
    v246 = sub_100ED2550(v290);
    uint64_t v247 = sub_101158244((uint64_t)v246);
    swift_bridgeObjectRelease();
    if (*(void *)(v247 + 16) <= *(void *)(v242 + 16) >> 3)
    {
      v319 = (void *)v242;
      swift_bridgeObjectRetain();
      sub_10089EA08(v247);
      v248 = v319;
    }
    else
    {
      swift_bridgeObjectRetain();
      v248 = sub_1008A160C(v247, v242);
    }
    unsigned __int8 v249 = v263;
    uint64_t v250 = v262[2];
    if (v248[2] <= *(void *)(v242 + 16) >> 3)
    {
      v319 = (void *)v242;
      sub_10089EA08((uint64_t)v248);
      v251 = v319;
    }
    else
    {
      v251 = sub_1008A160C((uint64_t)v248, v242);
    }
    if (*(void *)(v245 + 16) <= *(void *)(v247 + 16) >> 3)
    {
      v319 = (void *)v247;
      swift_bridgeObjectRetain();
      sub_10089EA08(v245);
      swift_bridgeObjectRelease();
      v252 = v319;
    }
    else
    {
      swift_bridgeObjectRetain();
      v252 = sub_1008A160C(v245, v247);
      swift_bridgeObjectRelease();
    }
    uint64_t v253 = v290;
    if (v251[2] > *(void *)(v247 + 16) >> 3)
    {
      v254 = sub_1008A160C((uint64_t)v251, v247);
    }
    else
    {
      v319 = (void *)v247;
      sub_10089EA08((uint64_t)v251);
      v254 = v319;
    }
    if (v252[2] <= v254[2] >> 3)
    {
      v319 = v254;
      sub_10089EA08((uint64_t)v252);
      v255 = v319;
    }
    else
    {
      v255 = sub_1008A160C((uint64_t)v252, (uint64_t)v254);
    }
    swift_retain();
    v256 = sub_100EDAD60((uint64_t)v248, (uint64_t *)&v321, (uint64_t *)&v320, v250);
    swift_bridgeObjectRelease();
    swift_release();
    v257 = sub_100ED16BC((uint64_t)v251, (uint64_t *)&v321);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRetain();
    v258 = sub_100EDB320((uint64_t)v255, v253);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRetain();
    v259 = sub_100EDBAC4((uint64_t)v252, v253, v249);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v319 = v256;
    sub_100446E18((uint64_t)v257);
    sub_100446E18((uint64_t)v258);
    sub_100446E18((uint64_t)v259);
    uint64_t v260 = (uint64_t)v319;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    return v260;
  }
  uint64_t v52 = *(void *)(a2 + 16);
  unint64_t v53 = (*(unsigned __int8 *)(v25 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v25 + 80);
  uint64_t v282 = a3 + v53;
  uint64_t v286 = a2 + v53;
  v267 = &v318;
  uint64_t v54 = *(void *)(v25 + 72);
  v292 = (uint64_t (**)())(v25 + 56);
  v302 = (uint64_t (**)())(v316 + 2);
  v281 = (uint64_t (**)(uint64_t, uint64_t, int *))(v25 + 48);
  uint64_t v55 = v54;
  v315 = (uint64_t (**)())(v5 + 16);
  v298 = (void (**)(char *, uint64_t, uint64_t, uint64_t))(v5 + 56);
  v294 = (unsigned int (**)(char *, uint64_t, uint64_t))(v5 + 48);
  v293 = (void (**)(char *, char *, uint64_t))(v5 + 32);
  uint64_t v280 = v5;
  v312 = (void (**)(uint64_t, uint64_t))(v5 + 8);
  v262[1] = a3;
  swift_bridgeObjectRetain();
  uint64_t v56 = 0;
  *(void *)&long long v57 = 136315138;
  long long v266 = v57;
  v264 = (char *)&type metadata for Any + 8;
  v303 = v18;
  v316 = v24;
  v310 = v46;
  v285 = v49;
  uint64_t v58 = v306;
  uint64_t v289 = v52;
  uint64_t v305 = v55;
  while (1)
  {
    uint64_t v291 = v56;
    sub_100EDD138(v282 + v55 * v56, v58, (uint64_t (*)(void))type metadata accessor for SafeLocation);
    uint64_t v75 = v300;
    if (v52)
    {
      swift_bridgeObjectRetain();
      swift_beginAccess();
      uint64_t v76 = v52;
      uint64_t v77 = v286;
      while (1)
      {
        sub_100EDD138(v77, (uint64_t)v49, (uint64_t (*)(void))type metadata accessor for SafeLocation);
        if (static UUID.== infix(_:_:)()) {
          break;
        }
        sub_100E8DD7C((uint64_t)v49, (uint64_t (*)(void))type metadata accessor for SafeLocation);
        v77 += v55;
        if (!--v76)
        {
          swift_bridgeObjectRelease();
          uint64_t v52 = v289;
          goto LABEL_11;
        }
      }
      if (qword_101636EE0 != -1) {
        swift_once();
      }
      uint64_t v79 = type metadata accessor for Logger();
      sub_100010324(v79, (uint64_t)qword_10170E7C8);
      uint64_t v80 = Logger.logObject.getter();
      os_log_type_t v81 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v80, v81))
      {
        uint64_t v82 = swift_slowAlloc();
        v319 = (void *)swift_slowAlloc();
        *(_DWORD *)uint64_t v82 = v266;
        v308 = (uint64_t (*)())(v82 + 4);
        sub_100EDC42C((unint64_t *)&qword_101638B10, (void (*)(uint64_t))&type metadata accessor for UUID);
        uint64_t v83 = dispatch thunk of CustomStringConvertible.description.getter();
        uint64_t v317 = sub_1008FA0F0(v83, v84, (uint64_t *)&v319);
        uint64_t v55 = v305;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        _os_log_impl((void *)&_mh_execute_header, v80, v81, "Inferred safe location identifier %s matches existing safe location.", (uint8_t *)v82, 0xCu);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
      }
      swift_bridgeObjectRelease();

      uint64_t v75 = v300;
      uint64_t v85 = v301;
      sub_100EDC4C0((uint64_t)v49, v301, (uint64_t (*)(void))type metadata accessor for SafeLocation);
      int v78 = *v292;
      ((void (*)(uint64_t, void, uint64_t, int *))*v292)(v85, 0, 1, v24);
      uint64_t v52 = v289;
      if (!v289)
      {
LABEL_33:
        ((void (*)(uint64_t, uint64_t, uint64_t, int *))v78)(v75, 1, 1, v24);
        goto LABEL_34;
      }
    }
    else
    {
LABEL_11:
      int v78 = *v292;
      ((void (*)(uint64_t, uint64_t, uint64_t, int *))*v292)(v301, 1, 1, v24);
      if (!v52) {
        goto LABEL_33;
      }
    }
    v297 = v78;
    swift_bridgeObjectRetain();
    swift_beginAccess();
    uint64_t v86 = v286;
    uint64_t v87 = v52;
    while (1)
    {
      sub_100EDD138(v86, (uint64_t)v46, (uint64_t (*)(void))type metadata accessor for SafeLocation);
      if ((static UUID.== infix(_:_:)() & 1) == 0)
      {
        v308 = type metadata accessor for SafeLocation;
        uint64_t v88 = v304;
        sub_100EDD138(v58, v304, (uint64_t (*)(void))type metadata accessor for SafeLocation);
        double v89 = *(double *)&v46[v24[8]];
        double v90 = *(double *)&v46[v24[9]];
        uint64_t v91 = v316[10];
        double v92 = *(double *)&v46[v91];
        uint64_t v93 = v303;
        Date.init()();
        id v94 = objc_allocWithZone((Class)CLLocation);
        Class isa = Date._bridgeToObjectiveC()().super.isa;
        id v96 = [v94 initWithCoordinate:isa verticalAccuracy:v89 horizontalAccuracy:v90 altitude:0.0 course:v92 courseAccuracy:v92 speed:v92 speedAccuracy:-1.0 timestamp:0xBFF0000000000000];

        v307 = *v302;
        ((void (*)(char *, uint64_t))v307)(v93, v309);
        [v96 setReferenceFrame:v310[v316[11]]];
        [v96 coordinate];
        double v98 = v97;
        double v100 = v99;

        double v101 = *(double *)&v310[v91];
        UUID.uuidString.getter();
        id v102 = objc_allocWithZone((Class)CLCircularRegion);
        NSString v103 = String._bridgeToObjectiveC()();
        swift_bridgeObjectRelease();
        id v104 = [v102 initWithCenter:v103 radius:v98 identifier:v100];

        double v105 = *(double *)(v88 + v316[8]);
        double v106 = *(double *)(v88 + v316[9]);
        uint64_t v107 = v316[10];
        double v108 = *(double *)(v88 + v107);
        Date.init()();
        id v109 = objc_allocWithZone((Class)CLLocation);
        Class v110 = Date._bridgeToObjectiveC()().super.isa;
        id v111 = [v109 initWithCoordinate:v110 altitude:v105 horizontalAccuracy:v106 verticalAccuracy:0.0 course:v108 courseAccuracy:v108 speed:v108 speedAccuracy:-1.0 timestamp:0xBFF0000000000000];

        ((void (*)(char *, uint64_t))v307)(v93, v309);
        [v111 setReferenceFrame:*(unsigned __int8 *)(v88 + v316[11])];
        [v111 coordinate];
        double v113 = v112;
        double v115 = v114;

        double v116 = *(double *)(v88 + v107);
        uint64_t v24 = v316;
        UUID.uuidString.getter();
        id v117 = objc_allocWithZone((Class)CLCircularRegion);
        NSString v118 = String._bridgeToObjectiveC()();
        uint64_t v46 = v310;
        swift_bridgeObjectRelease();
        id v119 = [v117 initWithCenter:v118 radius:v113 identifier:v115];

        sub_100F13EE0(v119);
        double v121 = v120;
        [v104 radius];
        double v123 = v122;
        [v104 radius];
        double v125 = v123 * v124 * 3.14159265;
        [v119 radius];
        double v127 = v126;
        [v119 radius];
        double v129 = v128;

        uint64_t v58 = v306;
        double v130 = v127 * v129 * 3.14159265;
        if (v130 >= v125) {
          double v130 = v125;
        }
        double v131 = v130 <= 0.0 ? 0.0 : v121 / v130;
        uint64_t v55 = v305;
        sub_100E8DD7C(v88, (uint64_t (*)(void))v308);
        if (v131 > 0.5) {
          break;
        }
      }
      sub_100E8DD7C((uint64_t)v46, (uint64_t (*)(void))type metadata accessor for SafeLocation);
      v86 += v55;
      if (!--v87)
      {
        swift_bridgeObjectRelease();
        uint64_t v75 = v300;
        uint64_t v49 = v285;
        int v78 = v297;
        goto LABEL_33;
      }
    }
    if (qword_101636EE0 != -1) {
      swift_once();
    }
    uint64_t v132 = type metadata accessor for Logger();
    sub_100010324(v132, (uint64_t)qword_10170E7C8);
    uint64_t v133 = Logger.logObject.getter();
    os_log_type_t v134 = static os_log_type_t.default.getter();
    BOOL v135 = os_log_type_enabled(v133, v134);
    uint64_t v49 = v285;
    if (v135)
    {
      v136 = (uint8_t *)swift_slowAlloc();
      v319 = (void *)swift_slowAlloc();
      *(_DWORD *)v136 = v266;
      sub_100EDC42C((unint64_t *)&qword_101638B10, (void (*)(uint64_t))&type metadata accessor for UUID);
      uint64_t v137 = dispatch thunk of CustomStringConvertible.description.getter();
      uint64_t v317 = sub_1008FA0F0(v137, v138, (uint64_t *)&v319);
      uint64_t v46 = v310;
      uint64_t v58 = v306;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v133, v134, "Inferred safe location identifier %s is within the region of existing safe location.", v136, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    swift_bridgeObjectRelease();

    uint64_t v75 = v300;
    sub_100EDC4C0((uint64_t)v46, v300, (uint64_t (*)(void))type metadata accessor for SafeLocation);
    ((void (*)(uint64_t, void, uint64_t, int *))v297)(v75, 0, 1, v24);
LABEL_34:
    uint64_t v139 = v287;
    uint64_t v140 = v287 + *(int *)(v284 + 48);
    sub_10001D074(v301, v287, &qword_101653F20);
    sub_10001D074(v75, v140, &qword_101653F20);
    v141 = *v281;
    LODWORD(v139) = (*v281)(v139, 1, v24);
    int v142 = v141(v140, 1, v24);
    if (v139 == 1) {
      break;
    }
    if (v142 == 1)
    {
      uint64_t v158 = v272;
      sub_100EDC4C0(v287, v272, (uint64_t (*)(void))type metadata accessor for SafeLocation);
      uint64_t v159 = *(void *)(v158 + v24[13]);
      swift_beginAccess();
      *(void *)(v58 + v24[13]) = v159;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      uint64_t v160 = *v315;
      uint64_t v161 = v276;
      ((void (*)(uint64_t, uint64_t, uint64_t))*v315)(v276, v158 + v24[5], v313);
      uint64_t v162 = v268;
      sub_100EDD138(v158, v268, (uint64_t (*)(void))type metadata accessor for SafeLocation);
      uint64_t v163 = v288;
      int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      v319 = (void *)v163;
      unint64_t v166 = sub_1007240CC(v161);
      uint64_t v167 = *(void *)(v163 + 16);
      BOOL v168 = (v165 & 1) == 0;
      uint64_t v169 = v167 + v168;
      if (__OFADD__(v167, v168)) {
        goto LABEL_107;
      }
      char v170 = v165;
      if (*(void *)(v163 + 24) >= v169)
      {
        uint64_t v173 = v280;
        if ((isUniquelyReferenced_nonNull_native & 1) == 0)
        {
          sub_100E876F4();
          goto LABEL_46;
        }
      }
      else
      {
        sub_100E780A0(v169, isUniquelyReferenced_nonNull_native);
        unint64_t v171 = sub_1007240CC(v276);
        if ((v170 & 1) != (v172 & 1)) {
          goto LABEL_112;
        }
        unint64_t v166 = v171;
LABEL_46:
        uint64_t v173 = v280;
      }
      v201 = v319;
      if (v170)
      {
        unint64_t v288 = (unint64_t)v319;
        sub_100EDC3C8(v162, v319[7] + v166 * v305);
      }
      else
      {
        v319[(v166 >> 6) + 8] |= 1 << v166;
        ((void (*)(unint64_t, uint64_t, uint64_t))v160)(v201[6] + *(void *)(v173 + 72) * v166, v276, v313);
        sub_100EDC4C0(v162, v201[7] + v166 * v305, (uint64_t (*)(void))type metadata accessor for SafeLocation);
        uint64_t v205 = v201[2];
        BOOL v203 = __OFADD__(v205, 1);
        uint64_t v206 = v205 + 1;
        if (v203) {
          goto LABEL_110;
        }
        v201[2] = v206;
        unint64_t v288 = (unint64_t)v319;
      }
      swift_bridgeObjectRelease();
      v207 = *v312;
      uint64_t v208 = v313;
      (*v312)(v276, v313);
      uint64_t v209 = v306;
      uint64_t v210 = v275;
      ((void (*)(uint64_t, uint64_t, uint64_t))v160)(v275, v306 + v316[5], v208);
      sub_100EDD138(v209, v271, (uint64_t (*)(void))type metadata accessor for SafeLocation);
      uint64_t v211 = v321;
      int v212 = swift_isUniquelyReferenced_nonNull_native();
      v319 = (void *)v211;
      unint64_t v321 = 0x8000000000000000;
      unint64_t v214 = sub_1007240CC(v210);
      uint64_t v215 = *(void *)(v211 + 16);
      BOOL v216 = (v213 & 1) == 0;
      uint64_t v217 = v215 + v216;
      if (__OFADD__(v215, v216)) {
        goto LABEL_108;
      }
      char v218 = v213;
      if (*(void *)(v211 + 24) >= v217)
      {
        uint64_t v221 = v280;
        if ((v212 & 1) == 0)
        {
          sub_100E876F4();
          goto LABEL_74;
        }
      }
      else
      {
        sub_100E780A0(v217, v212);
        unint64_t v219 = sub_1007240CC(v275);
        if ((v218 & 1) != (v220 & 1)) {
          goto LABEL_112;
        }
        unint64_t v214 = v219;
LABEL_74:
        uint64_t v221 = v280;
      }
      uint64_t v74 = v291;
      v222 = v319;
      if (v218)
      {
        uint64_t v55 = v305;
        sub_100EDC3C8(v271, v319[7] + v214 * v305);
      }
      else
      {
        v319[(v214 >> 6) + 8] |= 1 << v214;
        ((void (*)(unint64_t, uint64_t, uint64_t))v160)(v222[6] + *(void *)(v221 + 72) * v214, v275, v313);
        uint64_t v55 = v305;
        sub_100EDC4C0(v271, v222[7] + v214 * v305, (uint64_t (*)(void))type metadata accessor for SafeLocation);
        uint64_t v223 = v222[2];
        BOOL v203 = __OFADD__(v223, 1);
        uint64_t v224 = v223 + 1;
        if (v203) {
          goto LABEL_111;
        }
        v222[2] = v224;
        v222 = v319;
      }
      unint64_t v321 = (unint64_t)v222;
      swift_bridgeObjectRelease();
      v207(v275, v313);
      sub_100E8DD7C(v272, (uint64_t (*)(void))type metadata accessor for SafeLocation);
      uint64_t v24 = v316;
LABEL_81:
      uint64_t v58 = v306;
      uint64_t v52 = v289;
      goto LABEL_5;
    }
    uint64_t v174 = v278;
    sub_100EDC4C0(v287, v278, (uint64_t (*)(void))type metadata accessor for SafeLocation);
    uint64_t v175 = v279;
    sub_100EDC4C0(v140, v279, (uint64_t (*)(void))type metadata accessor for SafeLocation);
    uint64_t v176 = v24[13];
    uint64_t v177 = *(void *)(v175 + v176);
    v319 = *(void **)(v174 + v176);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    sub_100442D9C(v177);
    uint64_t v178 = (uint64_t)v319;
    v179 = (uint64_t (*)())sub_100EDC42C(&qword_10163BC60, (void (*)(uint64_t))&type metadata accessor for UUID);
    uint64_t v180 = v313;
    v307 = v179;
    uint64_t v181 = Set.init(minimumCapacity:)();
    uint64_t v182 = v178;
    v183 = *(uint64_t (**)())(v178 + 16);
    v184 = v298;
    v297 = v183;
    uint64_t v270 = v182;
    if (v183)
    {
      unint64_t v265 = (unint64_t)v298 & 0xFFFFFFFFFFFFLL | 0xA0D1000000000000;
      v185 = 0;
      unint64_t v296 = v182 + ((*(unsigned __int8 *)(v280 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v280 + 80));
      uint64_t v186 = *(void *)(v280 + 72);
      v187 = *(void (**)(char *, unint64_t, uint64_t))(v280 + 16);
      v188 = v299;
      v187(v299, v296, v180);
      while (1)
      {
        v295 = *v184;
        v295(v188, 0, 1, v180);
        if ((*v294)(v188, 1, v180) == 1)
        {
          uint64_t v24 = v316;
          uint64_t v46 = v310;
          uint64_t v225 = v306;
          goto LABEL_85;
        }
        v308 = v185;
        (*v293)(v314, v188, v180);
        swift_bridgeObjectRetain();
        uint64_t v192 = dispatch thunk of Hashable._rawHashValue(seed:)();
        uint64_t v193 = -1 << *(unsigned char *)(v181 + 32);
        unint64_t v194 = v192 & ~v193;
        if ((*(void *)(v181 + 56 + ((v194 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v194))
        {
          uint64_t v195 = ~v193;
          while (1)
          {
            v196 = v311;
            uint64_t v197 = v313;
            v187(v311, *(void *)(v181 + 48) + v194 * v186, v313);
            sub_100EDC42C((unint64_t *)&qword_10163B8F0, (void (*)(uint64_t))&type metadata accessor for UUID);
            char v198 = dispatch thunk of static Equatable.== infix(_:_:)();
            v199 = *v312;
            (*v312)((uint64_t)v196, v197);
            if (v198) {
              break;
            }
            unint64_t v194 = (v194 + 1) & v195;
            if (((*(void *)(v181 + 56 + ((v194 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v194) & 1) == 0) {
              goto LABEL_49;
            }
          }
          swift_bridgeObjectRelease();
          uint64_t v180 = v313;
          v199((uint64_t)v314, v313);
        }
        else
        {
LABEL_49:
          swift_bridgeObjectRelease();
          char v189 = swift_isUniquelyReferenced_nonNull_native();
          uint64_t v190 = (uint64_t)v311;
          v191 = v314;
          uint64_t v180 = v313;
          v187(v311, (unint64_t)v314, v313);
          v319 = (void *)v181;
          sub_100DDDE60(v190, v194, v189);
          uint64_t v181 = (uint64_t)v319;
          swift_bridgeObjectRelease();
          (*v312)((uint64_t)v191, v180);
        }
        v185 = (uint64_t (*)())((char *)v308 + 1);
        v188 = v299;
        v184 = v298;
        if ((uint64_t (*)())((char *)v308 + 1) == v297) {
          break;
        }
        v187(v299, v296 + v186 * (void)v185, v180);
      }
      uint64_t v24 = v316;
      uint64_t v46 = v310;
      uint64_t v225 = v306;
      v295(v299, 1, 1, v180);
    }
    else
    {
      uint64_t v225 = v306;
      (*v298)(v299, 1, 1, v180);
    }
LABEL_85:
    swift_bridgeObjectRelease();
    v226 = sub_1007100E0(v181);
    swift_bridgeObjectRelease();
    swift_beginAccess();
    *(void *)(v225 + v24[13]) = v226;
    swift_bridgeObjectRelease();
    uint64_t v227 = v278;
    v228 = *v315;
    uint64_t v229 = (uint64_t)v311;
    ((void (*)(char *, uint64_t, uint64_t))*v315)(v311, v278 + v24[5], v180);
    v308 = v228;
    v307 = type metadata accessor for SafeLocation;
    uint64_t v230 = v274;
    sub_100EDD138(v227, v274, (uint64_t (*)(void))type metadata accessor for SafeLocation);
    uint64_t v231 = v288;
    char v232 = swift_isUniquelyReferenced_nonNull_native();
    v319 = (void *)v231;
    sub_100171B5C(v230, v229, v232);
    uint64_t v233 = (uint64_t)v319;
    swift_bridgeObjectRelease();
    v234 = *v312;
    (*v312)(v229, v180);
    uint64_t v235 = v279;
    ((void (*)(uint64_t, uint64_t, uint64_t))v228)(v229, v279 + v316[5], v180);
    v236 = v307;
    sub_100EDD138(v235, v230, (uint64_t (*)(void))v307);
    char v237 = swift_isUniquelyReferenced_nonNull_native();
    v319 = (void *)v233;
    sub_100171B5C(v230, v229, v237);
    unint64_t v288 = (unint64_t)v319;
    swift_bridgeObjectRelease();
    v234(v229, v180);
    ((void (*)(uint64_t, uint64_t, uint64_t))v308)(v229, v306 + v316[5], v180);
    uint64_t v58 = v306;
    sub_100EDD138(v306, v230, (uint64_t (*)(void))v236);
    unint64_t v238 = v321;
    char v239 = swift_isUniquelyReferenced_nonNull_native();
    v319 = (void *)v238;
    sub_100171B5C(v230, v229, v239);
    unint64_t v321 = (unint64_t)v319;
    swift_bridgeObjectRelease();
    v234(v229, v180);
    uint64_t v24 = v316;
    sub_100E8DD7C(v279, (uint64_t (*)(void))v236);
    sub_100E8DD7C(v278, (uint64_t (*)(void))v236);
    uint64_t v49 = v285;
LABEL_4:
    uint64_t v52 = v289;
    uint64_t v55 = v305;
    uint64_t v74 = v291;
LABEL_5:
    uint64_t v56 = v74 + 1;
    sub_10001DAB4(v300, &qword_101653F20);
    sub_10001DAB4(v301, &qword_101653F20);
    sub_100E8DD7C(v58, (uint64_t (*)(void))type metadata accessor for SafeLocation);
    if (v56 == v283)
    {
      swift_bridgeObjectRelease();
      goto LABEL_90;
    }
  }
  if (v142 != 1)
  {
    uint64_t v59 = v274;
    sub_100EDC4C0(v140, v274, (uint64_t (*)(void))type metadata accessor for SafeLocation);
    uint64_t v60 = *(void *)(v59 + v24[13]);
    swift_beginAccess();
    *(void *)(v58 + v24[13]) = v60;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    uint64_t v61 = *v315;
    uint64_t v62 = (uint64_t)v311;
    uint64_t v63 = v313;
    ((void (*)(char *, uint64_t, uint64_t))*v315)(v311, v59 + v24[5], v313);
    uint64_t v64 = v269;
    sub_100EDD138(v59, v269, (uint64_t (*)(void))type metadata accessor for SafeLocation);
    uint64_t v65 = v288;
    char v66 = swift_isUniquelyReferenced_nonNull_native();
    v319 = (void *)v65;
    sub_100171B5C(v64, v62, v66);
    unint64_t v288 = (unint64_t)v319;
    swift_bridgeObjectRelease();
    uint64_t v67 = *v312;
    (*v312)(v62, v63);
    ((void (*)(uint64_t, uint64_t, uint64_t))v61)(v62, v306 + v316[5], v63);
    sub_100EDD138(v306, v64, (uint64_t (*)(void))type metadata accessor for SafeLocation);
    unint64_t v68 = v321;
    char v69 = swift_isUniquelyReferenced_nonNull_native();
    v319 = (void *)v68;
    sub_100171B5C(v64, v62, v69);
    unint64_t v321 = (unint64_t)v319;
    swift_bridgeObjectRelease();
    v67(v62, v63);
    ((void (*)(uint64_t, uint64_t, uint64_t))v61)(v62, v306 + v316[5], v63);
    uint64_t v58 = v306;
    sub_100EDD138(v59, v64, (uint64_t (*)(void))type metadata accessor for SafeLocation);
    unint64_t v70 = v320;
    char v71 = swift_isUniquelyReferenced_nonNull_native();
    v319 = (void *)v70;
    uint64_t v72 = v64;
    uint64_t v46 = v310;
    sub_100171B5C(v72, v62, v71);
    unint64_t v320 = (unint64_t)v319;
    swift_bridgeObjectRelease();
    v67(v62, v63);
    uint64_t v24 = v316;
    uint64_t v73 = v59;
    uint64_t v49 = v285;
    sub_100E8DD7C(v73, (uint64_t (*)(void))type metadata accessor for SafeLocation);
    goto LABEL_4;
  }
  swift_beginAccess();
  uint64_t v143 = v58 + v24[5];
  uint64_t v144 = v58;
  Swift::String v145 = *v315;
  uint64_t v146 = v277;
  ((void (*)(uint64_t, uint64_t, uint64_t))*v315)(v277, v143, v313);
  sub_100EDD138(v144, v273, (uint64_t (*)(void))type metadata accessor for SafeLocation);
  uint64_t v147 = v321;
  int v148 = swift_isUniquelyReferenced_nonNull_native();
  v319 = (void *)v147;
  unint64_t v321 = 0x8000000000000000;
  unint64_t v150 = sub_1007240CC(v146);
  uint64_t v151 = *(void *)(v147 + 16);
  BOOL v152 = (v149 & 1) == 0;
  uint64_t v153 = v151 + v152;
  if (!__OFADD__(v151, v152))
  {
    char v154 = v149;
    if (*(void *)(v147 + 24) >= v153)
    {
      uint64_t v157 = v280;
      if ((v148 & 1) == 0)
      {
        sub_100E876F4();
        goto LABEL_40;
      }
    }
    else
    {
      sub_100E780A0(v153, v148);
      unint64_t v155 = sub_1007240CC(v277);
      if ((v154 & 1) != (v156 & 1)) {
        goto LABEL_112;
      }
      unint64_t v150 = v155;
LABEL_40:
      uint64_t v157 = v280;
    }
    uint64_t v74 = v291;
    v200 = v319;
    if (v154)
    {
      uint64_t v55 = v305;
      sub_100EDC3C8(v273, v319[7] + v150 * v305);
    }
    else
    {
      v319[(v150 >> 6) + 8] |= 1 << v150;
      ((void (*)(unint64_t, uint64_t, uint64_t))v145)(v200[6] + *(void *)(v157 + 72) * v150, v277, v313);
      uint64_t v55 = v305;
      sub_100EDC4C0(v273, v200[7] + v150 * v305, (uint64_t (*)(void))type metadata accessor for SafeLocation);
      uint64_t v202 = v200[2];
      BOOL v203 = __OFADD__(v202, 1);
      uint64_t v204 = v202 + 1;
      if (v203) {
        goto LABEL_109;
      }
      v200[2] = v204;
      v200 = v319;
    }
    unint64_t v321 = (unint64_t)v200;
    swift_bridgeObjectRelease();
    (*v312)(v277, v313);
    goto LABEL_81;
  }
  __break(1u);
LABEL_107:
  __break(1u);
LABEL_108:
  __break(1u);
LABEL_109:
  __break(1u);
LABEL_110:
  __break(1u);
LABEL_111:
  __break(1u);
LABEL_112:
  uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

uint64_t sub_100ED955C@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t *a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v41 = a4;
  uint64_t v9 = sub_10000588C(&qword_101653F20);
  __chkstk_darwin(v9 - 8);
  uint64_t v11 = (char *)&v39 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = (int *)type metadata accessor for SafeLocation();
  uint64_t v13 = *((void *)v12 - 1);
  uint64_t v14 = __chkstk_darwin(v12);
  uint64_t v16 = (char *)&v39 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v14);
  unint64_t v18 = (char *)&v39 - v17;
  uint64_t v19 = *a2;
  if (!*(void *)(v19 + 16) || (unint64_t v20 = sub_1007240CC(a1), (v21 & 1) == 0))
  {
    uint64_t v27 = type metadata accessor for LocationOfInterestProvider.RemappingOperation();
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v27 - 8) + 56))(a5, 1, 1, v27);
  }
  uint64_t v40 = a5;
  uint64_t v22 = *(void *)(v13 + 72);
  sub_100EDD138(*(void *)(v19 + 56) + v22 * v20, (uint64_t)v16, (uint64_t (*)(void))type metadata accessor for SafeLocation);
  sub_100EDC4C0((uint64_t)v16, (uint64_t)v18, (uint64_t (*)(void))type metadata accessor for SafeLocation);
  uint64_t v23 = *a3;
  if (*(void *)(*a3 + 16) && (unint64_t v24 = sub_1007240CC(a1), (v25 & 1) != 0))
  {
    sub_100EDD138(*(void *)(v23 + 56) + v24 * v22, (uint64_t)v11, (uint64_t (*)(void))type metadata accessor for SafeLocation);
    uint64_t v26 = 0;
  }
  else
  {
    uint64_t v26 = 1;
  }
  (*(void (**)(char *, uint64_t, uint64_t, int *))(v13 + 56))(v11, v26, 1, v12);
  if ((*(unsigned int (**)(char *, uint64_t, int *))(v13 + 48))(v11, 1, v12))
  {
    sub_10001DAB4((uint64_t)v11, &qword_101653F20);
    goto LABEL_11;
  }
  int v29 = v11[v12[12]];
  sub_10001DAB4((uint64_t)v11, &qword_101653F20);
  if (v29 != 1)
  {
LABEL_11:
    if (v18[v12[6]] == 2)
    {
      uint64_t v30 = *(char **)(v41 + 64);
      uint64_t v31 = sub_100ACF5FC();
      swift_retain();
      uint64_t v32 = sub_100EDA748((uint64_t)v31, v30);
      swift_bridgeObjectRelease();
      swift_release();
      uint64_t v33 = sub_100A9A618((uint64_t)v32);
      swift_bridgeObjectRelease();
      uint64_t v34 = sub_100ED1DE0((uint64_t)v33);
      swift_bridgeObjectRelease();
      uint64_t v35 = v12[13];
      swift_bridgeObjectRelease();
      LOBYTE(v29) = 0;
      *(void *)&v18[v35] = v34;
    }
    else
    {
      LOBYTE(v29) = 0;
    }
  }
  uint64_t v36 = *(int *)(sub_10000588C(&qword_1016624F8) + 48);
  uint64_t v37 = v40;
  sub_100EDD138((uint64_t)v18, v40, (uint64_t (*)(void))type metadata accessor for SafeLocation);
  *(unsigned char *)(v37 + v36) = v29;
  uint64_t v38 = type metadata accessor for LocationOfInterestProvider.RemappingOperation();
  swift_storeEnumTagMultiPayload();
  (*(void (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v38 - 8) + 56))(v37, 0, 1, v38);
  return sub_100E8DD7C((uint64_t)v18, (uint64_t (*)(void))type metadata accessor for SafeLocation);
}

uint64_t sub_100ED9948(uint64_t a1, uint64_t a2)
{
  uint64_t v28 = sub_10000588C(&qword_1016555A0);
  uint64_t v4 = *(void *)(v28 - 8);
  __chkstk_darwin(v28);
  uint64_t v6 = (char *)&v27 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for SafeLocation();
  uint64_t v8 = *(void *)(v7 - 8);
  uint64_t v9 = *(void *)(v8 + 64);
  uint64_t v10 = __chkstk_darwin(v7 - 8);
  uint64_t v11 = (char *)&v27 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v10);
  uint64_t v13 = (char *)&v27 - v12;
  uint64_t v14 = type metadata accessor for LocationOfInterestProvider.RemappingOperation();
  __chkstk_darwin(v14);
  uint64_t v16 = (char *)&v27 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100EDD138(a1, (uint64_t)v16, (uint64_t (*)(void))type metadata accessor for LocationOfInterestProvider.RemappingOperation);
  if (swift_getEnumCaseMultiPayload())
  {
    sub_100EDC4C0((uint64_t)v16, (uint64_t)v13, (uint64_t (*)(void))type metadata accessor for SafeLocation);
    uint64_t v17 = *(void *)(a2 + 64);
    sub_100EDD138((uint64_t)v13, (uint64_t)v11, (uint64_t (*)(void))type metadata accessor for SafeLocation);
    unint64_t v18 = (*(unsigned __int8 *)(v8 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80);
    uint64_t v19 = swift_allocObject();
    *(void *)(v19 + 16) = v17;
    sub_100EDC4C0((uint64_t)v11, v19 + v18, (uint64_t (*)(void))type metadata accessor for SafeLocation);
  }
  else
  {
    sub_100EDC4C0((uint64_t)v16, (uint64_t)v13, (uint64_t (*)(void))type metadata accessor for SafeLocation);
    uint64_t v20 = *(void *)(a2 + 64);
    sub_100EDD138((uint64_t)v13, (uint64_t)v11, (uint64_t (*)(void))type metadata accessor for SafeLocation);
    unint64_t v21 = (*(unsigned __int8 *)(v8 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80);
    uint64_t v22 = v21 + v9;
    uint64_t v23 = swift_allocObject();
    *(void *)(v23 + 16) = v20;
    sub_100EDC4C0((uint64_t)v11, v23 + v21, (uint64_t (*)(void))type metadata accessor for SafeLocation);
    *(unsigned char *)(v23 + v22) = 1;
  }
  swift_retain();
  sub_10000588C((uint64_t *)&unk_101655548);
  sub_100062734(&qword_1016555A8, (uint64_t *)&unk_101655548);
  Deferred.init(createPublisher:)();
  sub_100062734(&qword_1016555B0, &qword_1016555A0);
  uint64_t v24 = v28;
  uint64_t v25 = Publisher.eraseToAnyPublisher()();
  (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v24);
  sub_100E8DD7C((uint64_t)v13, (uint64_t (*)(void))type metadata accessor for SafeLocation);
  return v25;
}

uint64_t sub_100ED9E3C()
{
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v0 + 24);
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();

  return swift_deallocClassInstance();
}

id sub_100ED9E94(void *a1, double a2)
{
  uint64_t v4 = sub_10000588C((uint64_t *)&unk_10163AC90);
  __chkstk_darwin(v4 - 8);
  uint64_t v6 = (char *)&v36 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for Date();
  uint64_t v8 = *(void *)(v7 - 8);
  __chkstk_darwin(v7);
  uint64_t v10 = (char *)&v36 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = a1[3];
  uint64_t v12 = a1[4];
  sub_10001CD44(a1, v11);
  double v13 = (*(double (**)(uint64_t, uint64_t))(v12 + 8))(v11, v12);
  uint64_t v14 = a1[3];
  uint64_t v15 = a1[4];
  sub_10001CD44(a1, v14);
  double v16 = (*(double (**)(uint64_t, uint64_t))(v15 + 16))(v14, v15);
  uint64_t v17 = a1[3];
  uint64_t v18 = a1[4];
  sub_10001CD44(a1, v17);
  double v19 = (*(double (**)(uint64_t, uint64_t))(v18 + 24))(v17, v18);
  uint64_t v20 = a1[3];
  uint64_t v21 = a1[4];
  sub_10001CD44(a1, v20);
  double v22 = (*(double (**)(uint64_t, uint64_t))(v21 + 32))(v20, v21);
  uint64_t v23 = a1[3];
  uint64_t v24 = a1[4];
  sub_10001CD44(a1, v23);
  double v25 = (*(double (**)(uint64_t, uint64_t))(v24 + 40))(v23, v24);
  uint64_t v26 = a1[3];
  uint64_t v27 = a1[4];
  sub_10001CD44(a1, v26);
  (*(void (**)(uint64_t, uint64_t))(v27 + 56))(v26, v27);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v8 + 48))(v6, 1, v7) == 1)
  {
    Date.init()();
    sub_10001DAB4((uint64_t)v6, (uint64_t *)&unk_10163AC90);
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v8 + 32))(v10, v6, v7);
  }
  if (v22 > a2) {
    a2 = v22;
  }
  id v28 = objc_allocWithZone((Class)swift_getObjCClassFromMetadata());
  Class isa = Date._bridgeToObjectiveC()().super.isa;
  (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v7);
  id v30 = [v28 initWithCoordinate:isa, v13, v16, v19, a2, v25];

  uint64_t v31 = a1[3];
  uint64_t v32 = a1[4];
  sub_10001CD44(a1, v31);
  uint64_t v33 = *(uint64_t (**)(uint64_t, uint64_t))(v32 + 48);
  id v34 = v30;
  [v34 setReferenceFrame:v33(v31, v32)];

  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)a1);
  return v34;
}

void sub_100EDA21C()
{
  id v1 = [*v0 identifier];
  static UUID._unconditionallyBridgeFromObjectiveC(_:)();
}

uint64_t sub_100EDA27C()
{
  id v1 = [*v0 preferredName];
  if (!v1) {
    return 0;
  }
  uint64_t v2 = v1;
  uint64_t v3 = static String._unconditionallyBridgeFromObjectiveC(_:)();

  return v3;
}

void sub_100EDA2E4(void *a1@<X8>)
{
  id v3 = [*v1 type];
  type metadata accessor for RTLocationOfInterestType(0);
  a1[3] = v4;
  a1[4] = &off_1015FB628;
  *a1 = v3;
}

uint64_t sub_100EDA330@<X0>(void *a1@<X8>)
{
  id v3 = [*v1 location];
  uint64_t result = sub_10001D4B0(0, &qword_101662740);
  a1[3] = result;
  a1[4] = &off_1015FB650;
  *a1 = v3;
  return result;
}

uint64_t sub_100EDA394(unint64_t a1, uint64_t a2, void (*a3)(uint64_t, uint64_t))
{
  if (a1) {
    uint64_t v5 = sub_100A9D084(a1);
  }
  else {
    uint64_t v5 = 0;
  }
  a3(v5, a2);

  return swift_bridgeObjectRelease();
}

uint64_t sub_100EDA3FC(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v4 = a2;
  uint64_t v5 = *(void (**)(uint64_t, void *))(a1 + 32);
  if (a2)
  {
    sub_10001D4B0(0, &qword_1016595D8);
    uint64_t v4 = static Array._unconditionallyBridgeFromObjectiveC(_:)();
  }
  swift_retain();
  id v6 = a3;
  v5(v4, a3);
  swift_release();

  return swift_bridgeObjectRelease();
}

uint64_t sub_100EDA4A0(void *a1, uint64_t a2, uint64_t a3)
{
  id v6 = *v3;
  uint64_t v7 = *sub_10001CD44(a1, a1[3]);

  return sub_100EDA624(v7, a2, a3, v6);
}

id sub_100EDA4F8()
{
  return [*v0 altitude];
}

id sub_100EDA508()
{
  return [*v0 horizontalUncertainty];
}

id sub_100EDA518()
{
  return [*v0 verticalUncertainty];
}

id sub_100EDA528()
{
  return [*v0 referenceFrame];
}

uint64_t sub_100EDA538@<X0>(uint64_t a1@<X8>)
{
  id v3 = [*v1 date];
  if (v3)
  {
    uint64_t v4 = v3;
    static Date._unconditionallyBridgeFromObjectiveC(_:)();

    uint64_t v5 = type metadata accessor for Date();
    id v6 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 56);
    uint64_t v7 = v5;
    uint64_t v8 = a1;
    uint64_t v9 = 0;
  }
  else
  {
    uint64_t v10 = type metadata accessor for Date();
    id v6 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 56);
    uint64_t v7 = v10;
    uint64_t v8 = a1;
    uint64_t v9 = 1;
  }

  return v6(v8, v9, 1, v7);
}

uint64_t type metadata accessor for LocationOfInterestProvider()
{
  return self;
}

uint64_t sub_100EDA624(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  type metadata accessor for RTLocationOfInterestType(0);
  void v14[3] = v8;
  void v14[4] = &off_1015FB628;
  v14[0] = a1;
  uint64_t v9 = *sub_10001CD44(v14, v8);
  uint64_t v10 = swift_allocObject();
  *(void *)(v10 + 16) = a2;
  *(void *)(v10 + 24) = a3;
  aBlock[4] = sub_100EDD858;
  aBlock[5] = v10;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_100EDA3FC;
  aBlock[3] = &unk_1015FB910;
  uint64_t v11 = _Block_copy(aBlock);
  swift_retain();
  swift_release();
  [a4 fetchLocationsOfInterestOfType:v9 withHandler:v11];
  _Block_release(v11);
  return _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)v14);
}

void *sub_100EDA748(uint64_t a1, char *a2)
{
  id v30 = a2;
  uint64_t v4 = type metadata accessor for OwnedBeaconRecord() - 8;
  uint64_t v5 = __chkstk_darwin(v4);
  uint64_t v27 = (uint64_t)v22 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5);
  uint64_t v9 = (char *)v22 - v8;
  uint64_t result = _swiftEmptyArrayStorage;
  uint64_t v32 = _swiftEmptyArrayStorage;
  uint64_t v29 = *(void *)(a1 + 16);
  if (v29)
  {
    v22[1] = v2;
    uint64_t v11 = 0;
    uint64_t v12 = *(unsigned __int8 *)(v7 + 80);
    uint64_t v31 = *(void *)(v7 + 72);
    uint64_t v23 = (v12 + 32) & ~v12;
    uint64_t v28 = a1 + v23;
    double v13 = _swiftEmptyArrayStorage;
    double v25 = "enableNotifyWhenFound";
    uint64_t v26 = "";
    uint64_t v24 = "onnect";
    while (1)
    {
      sub_100EDD138(v28 + v31 * v11, (uint64_t)v9, (uint64_t (*)(void))type metadata accessor for OwnedBeaconRecord);
      uint64_t v14 = sub_100698648((uint64_t)v9, v30);
      if (!v14[2]
        || (Hasher.init(_seed:)(),
            String.hash(into:)(),
            Swift::Int v15 = Hasher._finalize()(),
            uint64_t v16 = -1 << *((unsigned char *)v14 + 32),
            unint64_t v17 = v15 & ~v16,
            ((*(void *)((char *)v14 + ((v17 >> 3) & 0xFFFFFFFFFFFFFF8) + 56) >> v17) & 1) == 0))
      {
LABEL_3:
        swift_bridgeObjectRelease();
        sub_100E8DD7C((uint64_t)v9, (uint64_t (*)(void))type metadata accessor for OwnedBeaconRecord);
        goto LABEL_4;
      }
      uint64_t v18 = ~v16;
      while (2)
      {
        switch(*(unsigned char *)(v14[6] + v17))
        {
          case 8:
            swift_bridgeObjectRelease();
            goto LABEL_13;
          default:
            char v19 = _stringCompareWithSmolCheck(_:_:expecting:)();
            swift_bridgeObjectRelease();
            if ((v19 & 1) == 0)
            {
              unint64_t v17 = (v17 + 1) & v18;
              if (((*(void *)((char *)v14 + ((v17 >> 3) & 0xFFFFFFFFFFFFFF8) + 56) >> v17) & 1) == 0) {
                goto LABEL_3;
              }
              continue;
            }
LABEL_13:
            swift_bridgeObjectRelease();
            sub_100EDC4C0((uint64_t)v9, v27, (uint64_t (*)(void))type metadata accessor for OwnedBeaconRecord);
            if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
              sub_1000B74D8(0, v13[2] + 1, 1);
            }
            double v13 = v32;
            unint64_t v21 = v32[2];
            unint64_t v20 = v32[3];
            if (v21 >= v20 >> 1)
            {
              sub_1000B74D8(v20 > 1, v21 + 1, 1);
              double v13 = v32;
            }
            v13[2] = v21 + 1;
            sub_100EDC4C0(v27, (uint64_t)v13 + v23 + v21 * v31, (uint64_t (*)(void))type metadata accessor for OwnedBeaconRecord);
LABEL_4:
            if (++v11 == v29) {
              return v32;
            }
            break;
        }
        break;
      }
    }
  }
  return result;
}

void *sub_100EDAD60(uint64_t a1, uint64_t *a2, uint64_t *a3, uint64_t a4)
{
  uint64_t v50 = a3;
  uint64_t v51 = a4;
  uint64_t v49 = a2;
  uint64_t v6 = sub_10000588C(&qword_1016624F0);
  __chkstk_darwin(v6 - 8);
  uint64_t v8 = (char *)&v37 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v47 = type metadata accessor for LocationOfInterestProvider.RemappingOperation();
  uint64_t v42 = *(void *)(v47 - 8);
  uint64_t v9 = __chkstk_darwin(v47);
  uint64_t v41 = (uint64_t)&v37 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9);
  uint64_t v40 = (uint64_t)&v37 - v11;
  uint64_t v12 = type metadata accessor for UUID();
  uint64_t v13 = *(void *)(v12 - 8);
  __chkstk_darwin(v12);
  Swift::Int v15 = (char *)&v37 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = sub_10000588C(&qword_101638CF0);
  __chkstk_darwin(v16 - 8);
  uint64_t v18 = (char *)&v37 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v19 = *(void *)(a1 + 56);
  uint64_t v44 = a1 + 56;
  uint64_t v20 = 1 << *(unsigned char *)(a1 + 32);
  uint64_t v21 = -1;
  if (v20 < 64) {
    uint64_t v21 = ~(-1 << v20);
  }
  unint64_t v22 = v21 & v19;
  uint64_t v53 = v13 + 16;
  uint64_t v54 = (void (**)(char *, uint64_t, uint64_t, uint64_t))(v13 + 56);
  uint64_t v52 = v13 + 48;
  uint64_t v48 = (void (**)(char *, uint64_t))(v13 + 8);
  int64_t v45 = (unint64_t)(v20 + 63) >> 6;
  uint64_t v46 = (unsigned int (**)(char *, uint64_t, uint64_t))(v42 + 48);
  uint64_t v55 = a1;
  uint64_t result = (void *)swift_bridgeObjectRetain();
  int64_t v24 = 0;
  uint64_t v43 = _swiftEmptyArrayStorage;
  while (1)
  {
    if (v22)
    {
      unint64_t v25 = __clz(__rbit64(v22));
      v22 &= v22 - 1;
      unint64_t v26 = v25 | (v24 << 6);
      goto LABEL_19;
    }
    if (__OFADD__(v24++, 1))
    {
      __break(1u);
      goto LABEL_38;
    }
    if (v24 >= v45) {
      goto LABEL_34;
    }
    unint64_t v28 = *(void *)(v44 + 8 * v24);
    if (!v28) {
      break;
    }
LABEL_18:
    unint64_t v22 = (v28 - 1) & v28;
    unint64_t v26 = __clz(__rbit64(v28)) + (v24 << 6);
LABEL_19:
    (*(void (**)(char *, unint64_t, uint64_t))(v13 + 16))(v18, *(void *)(v55 + 48) + *(void *)(v13 + 72) * v26, v12);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v13 + 56))(v18, 0, 1, v12);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v13 + 48))(v18, 1, v12) == 1)
    {
      swift_release();
      return v43;
    }
    (*(void (**)(char *, char *, uint64_t))(v13 + 32))(v15, v18, v12);
    sub_100ED955C((uint64_t)v15, v49, v50, v51, (uint64_t)v8);
    if (v4)
    {
      (*v48)(v15, v12);
      uint64_t v36 = v43;
      swift_bridgeObjectRelease();
      goto LABEL_35;
    }
    (*v48)(v15, v12);
    if ((*v46)(v8, 1, v47) == 1)
    {
      uint64_t result = (void *)sub_10001DAB4((uint64_t)v8, &qword_1016624F0);
    }
    else
    {
      uint64_t v39 = type metadata accessor for LocationOfInterestProvider.RemappingOperation;
      sub_100EDC4C0((uint64_t)v8, v40, (uint64_t (*)(void))type metadata accessor for LocationOfInterestProvider.RemappingOperation);
      sub_100EDC4C0(v40, v41, (uint64_t (*)(void))v39);
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
        uint64_t v43 = (void *)sub_100A72550(0, v43[2] + 1, 1, (unint64_t)v43);
      }
      unint64_t v31 = v43[2];
      unint64_t v30 = v43[3];
      uint64_t v32 = (uint64_t (*)())(v31 + 1);
      if (v31 >= v30 >> 1)
      {
        unint64_t v38 = v43[2];
        uint64_t v39 = (uint64_t (*)())(v31 + 1);
        uint64_t v35 = (void *)sub_100A72550(v30 > 1, v31 + 1, 1, (unint64_t)v43);
        unint64_t v31 = v38;
        uint64_t v32 = v39;
        uint64_t v43 = v35;
      }
      uint64_t v33 = v42;
      id v34 = v43;
      v43[2] = v32;
      uint64_t result = (void *)sub_100EDC4C0(v41, (uint64_t)v34+ ((*(unsigned __int8 *)(v33 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v33 + 80))+ *(void *)(v33 + 72) * v31, (uint64_t (*)(void))type metadata accessor for LocationOfInterestProvider.RemappingOperation);
    }
  }
  int64_t v29 = v24 + 1;
  if (v24 + 1 >= v45) {
    goto LABEL_34;
  }
  unint64_t v28 = *(void *)(v44 + 8 * v29);
  if (v28) {
    goto LABEL_17;
  }
  int64_t v29 = v24 + 2;
  if (v24 + 2 >= v45) {
    goto LABEL_34;
  }
  unint64_t v28 = *(void *)(v44 + 8 * v29);
  if (v28) {
    goto LABEL_17;
  }
  int64_t v29 = v24 + 3;
  if (v24 + 3 >= v45) {
    goto LABEL_34;
  }
  unint64_t v28 = *(void *)(v44 + 8 * v29);
  if (v28) {
    goto LABEL_17;
  }
  int64_t v29 = v24 + 4;
  if (v24 + 4 >= v45)
  {
LABEL_34:
    uint64_t v36 = v43;
    (*v54)(v18, 1, 1, v12);
LABEL_35:
    swift_release();
    return v36;
  }
  unint64_t v28 = *(void *)(v44 + 8 * v29);
  if (v28)
  {
LABEL_17:
    int64_t v24 = v29;
    goto LABEL_18;
  }
  while (1)
  {
    int64_t v24 = v29 + 1;
    if (__OFADD__(v29, 1)) {
      break;
    }
    if (v24 >= v45) {
      goto LABEL_34;
    }
    unint64_t v28 = *(void *)(v44 + 8 * v24);
    ++v29;
    if (v28) {
      goto LABEL_18;
    }
  }
LABEL_38:
  __break(1u);
  return result;
}

void *sub_100EDB320(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for SafeLocation();
  uint64_t v57 = *(void *)(v4 - 8);
  uint64_t v5 = __chkstk_darwin(v4);
  uint64_t v7 = (char *)&v50 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5);
  uint64_t v55 = (uint64_t)&v50 - v8;
  uint64_t v9 = sub_10000588C(&qword_1016624F0);
  __chkstk_darwin(v9 - 8);
  uint64_t v11 = (char *)&v50 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = type metadata accessor for LocationOfInterestProvider.RemappingOperation();
  uint64_t v13 = *(void *)(v12 - 8);
  uint64_t v14 = __chkstk_darwin(v12);
  uint64_t v53 = (uint64_t)&v50 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v14);
  uint64_t v51 = (uint64_t)&v50 - v16;
  uint64_t v60 = type metadata accessor for UUID();
  uint64_t v17 = *(void *)(v60 - 8);
  __chkstk_darwin(v60);
  uint64_t v19 = (char *)&v50 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v20 = sub_10000588C(&qword_101638CF0);
  __chkstk_darwin(v20 - 8);
  unint64_t v70 = (char *)&v50 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v22 = *(void *)(a1 + 56);
  uint64_t v58 = a1 + 56;
  uint64_t v23 = 1 << *(unsigned char *)(a1 + 32);
  uint64_t v24 = -1;
  if (v23 < 64) {
    uint64_t v24 = ~(-1 << v23);
  }
  unint64_t v25 = v24 & v22;
  int64_t v59 = (unint64_t)(v23 + 63) >> 6;
  uint64_t v67 = v17;
  unint64_t v68 = (void (**)(char *, uint64_t, uint64_t, uint64_t))(v17 + 56);
  uint64_t v65 = v17 + 48;
  uint64_t v66 = v17 + 16;
  uint64_t v63 = (void (**)(char *, uint64_t, uint64_t, uint64_t))(v13 + 56);
  uint64_t v64 = (void (**)(char *, char *, uint64_t))(v17 + 32);
  uint64_t v52 = v13;
  uint64_t v61 = (unsigned int (**)(char *, uint64_t, uint64_t))(v13 + 48);
  uint64_t v62 = (void (**)(char *, uint64_t))(v17 + 8);
  uint64_t v69 = a1;
  uint64_t result = (void *)swift_bridgeObjectRetain();
  int64_t v27 = 0;
  uint64_t v54 = _swiftEmptyArrayStorage;
  uint64_t v56 = v12;
  uint64_t v28 = v60;
  if (!v25) {
    goto LABEL_5;
  }
LABEL_4:
  uint64_t v29 = (uint64_t)v11;
  uint64_t v30 = v12;
  uint64_t v31 = a2;
  uint64_t v71 = (v25 - 1) & v25;
  int64_t v72 = v27;
  for (unint64_t i = __clz(__rbit64(v25)) | (v27 << 6); ; unint64_t i = __clz(__rbit64(v34)) + (v35 << 6))
  {
    uint64_t v37 = v70;
    uint64_t v38 = v67;
    (*(void (**)(char *, unint64_t, uint64_t))(v67 + 16))(v70, *(void *)(v69 + 48) + *(void *)(v67 + 72) * i, v28);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v38 + 56))(v37, 0, 1, v28);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v38 + 48))(v37, 1, v28) == 1) {
      goto LABEL_40;
    }
    (*v64)(v19, v37, v28);
    a2 = v31;
    uint64_t v39 = *(void *)(v31 + 16);
    if (v39)
    {
      uint64_t v40 = v57;
      uint64_t v41 = v31 + ((*(unsigned __int8 *)(v57 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v57 + 80));
      swift_bridgeObjectRetain();
      uint64_t v42 = *(void *)(v40 + 72);
      while (1)
      {
        sub_100EDD138(v41, (uint64_t)v7, (uint64_t (*)(void))type metadata accessor for SafeLocation);
        if (static UUID.== infix(_:_:)()) {
          break;
        }
        sub_100E8DD7C((uint64_t)v7, (uint64_t (*)(void))type metadata accessor for SafeLocation);
        v41 += v42;
        if (!--v39)
        {
          a2 = v31;
          swift_bridgeObjectRelease();
          uint64_t v43 = 1;
          uint64_t v11 = (char *)v29;
          uint64_t v12 = v56;
          goto LABEL_29;
        }
      }
      a2 = v31;
      swift_bridgeObjectRelease();
      uint64_t v44 = v55;
      sub_100EDC4C0((uint64_t)v7, v55, (uint64_t (*)(void))type metadata accessor for SafeLocation);
      uint64_t v11 = (char *)v29;
      sub_100EDC4C0(v44, v29, (uint64_t (*)(void))type metadata accessor for SafeLocation);
      uint64_t v12 = v56;
      swift_storeEnumTagMultiPayload();
      uint64_t v43 = 0;
LABEL_29:
      uint64_t v28 = v60;
    }
    else
    {
      uint64_t v43 = 1;
      uint64_t v12 = v30;
      uint64_t v11 = (char *)v29;
    }
    (*v63)(v11, v43, 1, v12);
    (*v62)(v19, v28);
    if ((*v61)(v11, 1, v12) == 1)
    {
      uint64_t result = (void *)sub_10001DAB4((uint64_t)v11, &qword_1016624F0);
      int64_t v27 = v72;
      unint64_t v25 = v71;
      if (v71) {
        goto LABEL_4;
      }
    }
    else
    {
      uint64_t v45 = v51;
      sub_100EDC4C0((uint64_t)v11, v51, (uint64_t (*)(void))type metadata accessor for LocationOfInterestProvider.RemappingOperation);
      sub_100EDC4C0(v45, v53, (uint64_t (*)(void))type metadata accessor for LocationOfInterestProvider.RemappingOperation);
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
        uint64_t v54 = (void *)sub_100A72550(0, v54[2] + 1, 1, (unint64_t)v54);
      }
      unint64_t v47 = v54[2];
      unint64_t v46 = v54[3];
      if (v47 >= v46 >> 1) {
        uint64_t v54 = (void *)sub_100A72550(v46 > 1, v47 + 1, 1, (unint64_t)v54);
      }
      uint64_t v48 = v53;
      uint64_t v49 = v54;
      v54[2] = v47 + 1;
      uint64_t result = (void *)sub_100EDC4C0(v48, (uint64_t)v49+ ((*(unsigned __int8 *)(v52 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v52 + 80))+ *(void *)(v52 + 72) * v47, (uint64_t (*)(void))type metadata accessor for LocationOfInterestProvider.RemappingOperation);
      int64_t v27 = v72;
      unint64_t v25 = v71;
      uint64_t v28 = v60;
      if (v71) {
        goto LABEL_4;
      }
    }
LABEL_5:
    int64_t v33 = v27 + 1;
    if (__OFADD__(v27, 1))
    {
      __break(1u);
      goto LABEL_42;
    }
    uint64_t result = v70;
    if (v33 >= v59) {
      goto LABEL_39;
    }
    unint64_t v34 = *(void *)(v58 + 8 * v33);
    int64_t v35 = v27 + 1;
    if (!v34)
    {
      int64_t v35 = v27 + 2;
      if (v27 + 2 >= v59) {
        goto LABEL_39;
      }
      unint64_t v34 = *(void *)(v58 + 8 * v35);
      if (!v34)
      {
        int64_t v35 = v27 + 3;
        if (v27 + 3 >= v59) {
          goto LABEL_39;
        }
        unint64_t v34 = *(void *)(v58 + 8 * v35);
        if (!v34)
        {
          int64_t v35 = v27 + 4;
          if (v27 + 4 >= v59) {
            goto LABEL_39;
          }
          unint64_t v34 = *(void *)(v58 + 8 * v35);
          if (!v34) {
            break;
          }
        }
      }
    }
LABEL_20:
    uint64_t v29 = (uint64_t)v11;
    uint64_t v30 = v12;
    uint64_t v31 = a2;
    uint64_t v71 = (v34 - 1) & v34;
    int64_t v72 = v35;
  }
  uint64_t v36 = v27 + 5;
  if (v27 + 5 >= v59)
  {
LABEL_39:
    (*v68)(v70, 1, 1, v28);
LABEL_40:
    swift_release();
    return v54;
  }
  unint64_t v34 = *(void *)(v58 + 8 * v36);
  if (v34)
  {
    int64_t v35 = v27 + 5;
    goto LABEL_20;
  }
  while (1)
  {
    int64_t v35 = v36 + 1;
    if (__OFADD__(v36, 1)) {
      break;
    }
    if (v35 >= v59) {
      goto LABEL_39;
    }
    unint64_t v34 = *(void *)(v58 + 8 * v35);
    ++v36;
    if (v34) {
      goto LABEL_20;
    }
  }
LABEL_42:
  __break(1u);
  return result;
}

void *sub_100EDBAC4(uint64_t a1, uint64_t a2, unsigned __int8 a3)
{
  int v67 = a3;
  uint64_t v5 = type metadata accessor for SafeLocation();
  uint64_t v70 = *(void *)(v5 - 8);
  uint64_t v6 = __chkstk_darwin(v5);
  uint64_t v63 = (uint64_t)&v59 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = __chkstk_darwin(v6);
  uint64_t v10 = (char *)&v59 - v9;
  uint64_t v11 = __chkstk_darwin(v8);
  uint64_t v66 = (uint64_t)&v59 - v12;
  __chkstk_darwin(v11);
  uint64_t v65 = (uint64_t)&v59 - v13;
  uint64_t v14 = sub_10000588C(&qword_1016624F0);
  __chkstk_darwin(v14 - 8);
  uint64_t v16 = (char *)&v59 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v17 = type metadata accessor for LocationOfInterestProvider.RemappingOperation();
  uint64_t v18 = *(void *)(v17 - 8);
  uint64_t v19 = __chkstk_darwin(v17);
  uint64_t v61 = (uint64_t)&v59 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v19);
  uint64_t v59 = (uint64_t)&v59 - v21;
  uint64_t v85 = type metadata accessor for UUID();
  uint64_t v22 = *(void *)(v85 - 8);
  __chkstk_darwin(v85);
  uint64_t v24 = (char *)&v59 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v25 = sub_10000588C(&qword_101638CF0);
  __chkstk_darwin(v25 - 8);
  uint64_t v82 = (char *)&v59 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v27 = *(void *)(a1 + 56);
  uint64_t v71 = a1 + 56;
  uint64_t v28 = 1 << *(unsigned char *)(a1 + 32);
  uint64_t v29 = -1;
  if (v28 < 64) {
    uint64_t v29 = ~(-1 << v28);
  }
  unint64_t v30 = v29 & v27;
  uint64_t v79 = v22;
  uint64_t v80 = (void (**)(char *, uint64_t, uint64_t, uint64_t))(v22 + 56);
  uint64_t v77 = v22 + 48;
  uint64_t v78 = v22 + 16;
  int64_t v72 = (unint64_t)(v28 + 63) >> 6;
  uint64_t v73 = (void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v18 + 56);
  uint64_t v75 = (void (**)(char *, uint64_t))(v22 + 8);
  uint64_t v76 = (void (**)(char *, char *, uint64_t))(v22 + 32);
  uint64_t v60 = v18;
  uint64_t v74 = (unsigned int (**)(char *, uint64_t, uint64_t))(v18 + 48);
  uint64_t v81 = a1;
  uint64_t result = (void *)swift_bridgeObjectRetain();
  int64_t v32 = 0;
  uint64_t v62 = _swiftEmptyArrayStorage;
  uint64_t v68 = v17;
  uint64_t v69 = v16;
  uint64_t v64 = a2;
LABEL_4:
  uint64_t v33 = v85;
  if (v30)
  {
LABEL_5:
    uint64_t v34 = a2;
    int64_t v35 = v16;
    uint64_t v36 = v17;
    uint64_t v83 = (v30 - 1) & v30;
    int64_t v84 = v32;
    unint64_t v37 = __clz(__rbit64(v30)) | (v32 << 6);
    goto LABEL_22;
  }
  while (1)
  {
    int64_t v38 = v32 + 1;
    if (__OFADD__(v32, 1))
    {
      __break(1u);
      goto LABEL_44;
    }
    uint64_t result = v82;
    if (v38 >= v72) {
      goto LABEL_41;
    }
    unint64_t v39 = *(void *)(v71 + 8 * v38);
    int64_t v40 = v32 + 1;
    if (!v39)
    {
      int64_t v40 = v32 + 2;
      if (v32 + 2 >= v72) {
        goto LABEL_41;
      }
      unint64_t v39 = *(void *)(v71 + 8 * v40);
      if (!v39)
      {
        int64_t v40 = v32 + 3;
        if (v32 + 3 >= v72) {
          goto LABEL_41;
        }
        unint64_t v39 = *(void *)(v71 + 8 * v40);
        if (!v39)
        {
          int64_t v40 = v32 + 4;
          if (v32 + 4 >= v72) {
            goto LABEL_41;
          }
          unint64_t v39 = *(void *)(v71 + 8 * v40);
          if (!v39) {
            break;
          }
        }
      }
    }
LABEL_21:
    uint64_t v34 = a2;
    int64_t v35 = v16;
    uint64_t v36 = v17;
    uint64_t v83 = (v39 - 1) & v39;
    int64_t v84 = v40;
    unint64_t v37 = __clz(__rbit64(v39)) + (v40 << 6);
LABEL_22:
    uint64_t v42 = v82;
    uint64_t v43 = v79;
    uint64_t v44 = v85;
    (*(void (**)(char *, unint64_t, uint64_t))(v79 + 16))(v82, *(void *)(v81 + 48) + *(void *)(v79 + 72) * v37, v85);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v43 + 56))(v42, 0, 1, v44);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v43 + 48))(v42, 1, v44) == 1) {
      goto LABEL_42;
    }
    (*v76)(v24, v42, v44);
    a2 = v34;
    uint64_t v45 = *(void *)(v34 + 16);
    uint64_t v17 = v36;
    uint64_t v16 = v35;
    if (v45)
    {
      uint64_t v46 = v70;
      uint64_t v47 = v34 + ((*(unsigned __int8 *)(v70 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v70 + 80));
      swift_bridgeObjectRetain();
      uint64_t v48 = *(void *)(v46 + 72);
      while (1)
      {
        sub_100EDD138(v47, (uint64_t)v10, (uint64_t (*)(void))type metadata accessor for SafeLocation);
        if (static UUID.== infix(_:_:)()) {
          break;
        }
        sub_100E8DD7C((uint64_t)v10, (uint64_t (*)(void))type metadata accessor for SafeLocation);
        v47 += v48;
        if (!--v45)
        {
          a2 = v34;
          swift_bridgeObjectRelease();
          goto LABEL_31;
        }
      }
      a2 = v34;
      swift_bridgeObjectRelease();
      uint64_t v49 = v66;
      sub_100EDC4C0((uint64_t)v10, v66, (uint64_t (*)(void))type metadata accessor for SafeLocation);
      uint64_t v50 = v65;
      sub_100EDC4C0(v49, v65, (uint64_t (*)(void))type metadata accessor for SafeLocation);
      if (*(unsigned __int8 *)(v50 + *(int *)(v5 + 24)) == v67)
      {
        uint64_t v51 = v63;
        sub_100EDD138(v50, v63, (uint64_t (*)(void))type metadata accessor for SafeLocation);
        *(unsigned char *)(v51 + *(int *)(v5 + 24)) = 1;
        sub_100E8DD7C(v50, (uint64_t (*)(void))type metadata accessor for SafeLocation);
        uint64_t v52 = (void *)(v51 + *(int *)(v5 + 28));
        swift_bridgeObjectRelease();
        *uint64_t v52 = 0;
        v52[1] = 0xE000000000000000;
        uint64_t v53 = (uint64_t)v69;
        sub_100EDD138(v51, (uint64_t)v69, (uint64_t (*)(void))type metadata accessor for SafeLocation);
        uint64_t v17 = v68;
        swift_storeEnumTagMultiPayload();
        (*v73)(v53, 0, 1, v17);
        uint64_t v54 = v51;
        uint64_t v16 = (char *)v53;
        a2 = v64;
        sub_100E8DD7C(v54, (uint64_t (*)(void))type metadata accessor for SafeLocation);
        goto LABEL_33;
      }
      sub_100E8DD7C(v50, (uint64_t (*)(void))type metadata accessor for SafeLocation);
LABEL_31:
      uint64_t v17 = v68;
      uint64_t v16 = v69;
    }
    (*v73)((uint64_t)v16, 1, 1, v17);
LABEL_33:
    uint64_t v33 = v85;
    (*v75)(v24, v85);
    if ((*v74)(v16, 1, v17) != 1)
    {
      uint64_t v55 = v59;
      sub_100EDC4C0((uint64_t)v16, v59, (uint64_t (*)(void))type metadata accessor for LocationOfInterestProvider.RemappingOperation);
      sub_100EDC4C0(v55, v61, (uint64_t (*)(void))type metadata accessor for LocationOfInterestProvider.RemappingOperation);
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
        uint64_t v62 = (void *)sub_100A72550(0, v62[2] + 1, 1, (unint64_t)v62);
      }
      unint64_t v57 = v62[2];
      unint64_t v56 = v62[3];
      if (v57 >= v56 >> 1) {
        uint64_t v62 = (void *)sub_100A72550(v56 > 1, v57 + 1, 1, (unint64_t)v62);
      }
      uint64_t v58 = v62;
      v62[2] = v57 + 1;
      uint64_t result = (void *)sub_100EDC4C0(v61, (uint64_t)v58+ ((*(unsigned __int8 *)(v60 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v60 + 80))+ *(void *)(v60 + 72) * v57, (uint64_t (*)(void))type metadata accessor for LocationOfInterestProvider.RemappingOperation);
      a2 = v64;
      unint64_t v30 = v83;
      int64_t v32 = v84;
      goto LABEL_4;
    }
    uint64_t result = (void *)sub_10001DAB4((uint64_t)v16, &qword_1016624F0);
    unint64_t v30 = v83;
    int64_t v32 = v84;
    if (v83) {
      goto LABEL_5;
    }
  }
  uint64_t v41 = v32 + 5;
  if (v32 + 5 >= v72)
  {
LABEL_41:
    (*v80)(v82, 1, 1, v33);
LABEL_42:
    swift_release();
    return v62;
  }
  unint64_t v39 = *(void *)(v71 + 8 * v41);
  if (v39)
  {
    int64_t v40 = v32 + 5;
    goto LABEL_21;
  }
  while (1)
  {
    int64_t v40 = v41 + 1;
    if (__OFADD__(v41, 1)) {
      break;
    }
    if (v40 >= v72) {
      goto LABEL_41;
    }
    unint64_t v39 = *(void *)(v71 + 8 * v40);
    ++v41;
    if (v39) {
      goto LABEL_21;
    }
  }
LABEL_44:
  __break(1u);
  return result;
}

uint64_t sub_100EDC3C8(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for SafeLocation();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

uint64_t sub_100EDC42C(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t type metadata accessor for LocationOfInterestProvider.RemappingOperation()
{
  uint64_t result = qword_1016627B8;
  if (!qword_1016627B8) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t sub_100EDC4C0(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 32))(a2, a1, v5);
  return a2;
}

unint64_t sub_100EDC528()
{
  unint64_t result = qword_101662540;
  if (!qword_101662540)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_101662540);
  }
  return result;
}

void *sub_100EDC57C(uint64_t a1, void *a2)
{
  uint64_t v4 = *a2;
  uint64_t v43 = a2;
  uint64_t v44 = v4;
  uint64_t v45 = sub_10000588C(&qword_101662598);
  uint64_t v5 = *(void *)(v45 - 8);
  __chkstk_darwin(v45);
  uint64_t v7 = (char *)&v35 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = sub_10000588C(&qword_1016625A0);
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  uint64_t v11 = (char *)&v35 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = sub_10000588C(&qword_1016625A8);
  uint64_t v13 = *(void *)(v12 - 8);
  __chkstk_darwin(v12);
  uint64_t v16 = (char *)&v35 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v17 = *(void *)(a1 + 16);
  unint64_t result = _swiftEmptyArrayStorage;
  if (v17)
  {
    uint64_t v35 = v2;
    uint64_t v51 = _swiftEmptyArrayStorage;
    uint64_t v40 = v14;
    uint64_t v41 = v7;
    uint64_t v48 = v17;
    unint64_t v39 = v16;
    specialized ContiguousArray.reserveCapacity(_:)();
    uint64_t v19 = (char *)(a1 + 32);
    unint64_t v37 = (void (**)(char *, uint64_t))(v9 + 8);
    int64_t v38 = (void (**)(char *, uint64_t))(v5 + 8);
    uint64_t v36 = (void (**)(char *, uint64_t))(v13 + 8);
    uint64_t v42 = v8;
    uint64_t v49 = v11;
    do
    {
      char v20 = *v19;
      uint64_t v47 = v19 + 1;
      uint64_t v21 = swift_allocObject();
      *(unsigned char *)(v21 + 16) = v20;
      uint64_t v23 = v43;
      uint64_t v22 = v44;
      *(void *)(v21 + 24) = v43;
      *(void *)(v21 + 32) = v22;
      sub_10000588C(&qword_1016625B0);
      swift_allocObject();
      swift_retain();
      uint64_t v50 = Future.init(_:)();
      uint64_t v24 = swift_allocObject();
      *(unsigned char *)(v24 + 16) = v20;
      *(void *)(v24 + 24) = v23;
      swift_retain();
      static Subscribers.Demand.unlimited.getter();
      sub_10000588C(&qword_1016625B8);
      sub_100062734(&qword_1016625C0, &qword_1016625B0);
      uint64_t v46 = &protocol conformance descriptor for AnyPublisher<A, B>;
      sub_100062734(&qword_1016625C8, &qword_1016625B8);
      uint64_t v25 = v41;
      Publisher.flatMap<A>(maxPublishers:_:)();
      uint64_t v26 = v23;
      uint64_t v27 = v45;
      swift_release();
      swift_release();
      uint64_t v28 = swift_allocObject();
      *(unsigned char *)(v28 + 16) = v20;
      *(void *)(v28 + 24) = v26;
      swift_retain();
      static Subscribers.Demand.unlimited.getter();
      sub_10000588C(&qword_1016625D0);
      sub_100062734(&qword_1016625D8, &qword_101662598);
      sub_100062734(&qword_1016625E0, &qword_1016625D0);
      uint64_t v29 = v42;
      Publisher.flatMap<A, B>(maxPublishers:_:)();
      swift_release();
      (*v38)(v25, v27);
      *(unsigned char *)(swift_allocObject() + 16) = v20;
      sub_10000588C(&qword_101662550);
      unint64_t v30 = v49;
      sub_100062734(&qword_1016625E8, &qword_1016625A0);
      sub_100062734(&qword_101662560, &qword_101662550);
      uint64_t v31 = v39;
      Publisher.catch<A>(_:)();
      swift_release();
      (*v37)(v30, v29);
      sub_100062734(&qword_1016625F0, &qword_1016625A8);
      uint64_t v32 = v40;
      uint64_t v33 = Publisher.eraseToAnyPublisher()();
      (*v36)(v31, v32);
      uint64_t v50 = v33;
      Publisher.eraseToAnyPublisher()();
      swift_release();
      specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
      specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
      specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      specialized ContiguousArray._endMutation()();
      BOOL v34 = v48-- == 1;
      uint64_t v19 = v47;
    }
    while (!v34);
    return v51;
  }
  return result;
}

void *sub_100EDCB94(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = type metadata accessor for LocationOfInterestProvider.RemappingOperation();
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v7 = *(void *)(v6 + 64);
  __chkstk_darwin(v5);
  uint64_t v23 = (char *)&v22 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = sub_10000588C(&qword_1016626B0);
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  uint64_t v12 = (char *)&v22 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = *(void *)(a1 + 16);
  unint64_t result = _swiftEmptyArrayStorage;
  if (v13)
  {
    uint64_t v22 = v2;
    uint64_t v32 = _swiftEmptyArrayStorage;
    uint64_t v30 = v10;
    specialized ContiguousArray.reserveCapacity(_:)();
    uint64_t v15 = *(unsigned __int8 *)(v6 + 80);
    uint64_t v29 = v5;
    uint64_t v16 = a1 + ((v15 + 32) & ~v15);
    uint64_t v17 = *(void *)(v6 + 72);
    uint64_t v27 = (v15 + 16) & ~v15;
    uint64_t v28 = v17;
    uint64_t v25 = v15 | 7;
    uint64_t v26 = v27 + v7;
    uint64_t v24 = a2;
    uint64_t v18 = (void (**)(char *, uint64_t))(v9 + 8);
    uint64_t v19 = (uint64_t)v23;
    do
    {
      uint64_t v31 = sub_100ED9948(v16, v24);
      sub_100EDD138(v16, v19, (uint64_t (*)(void))type metadata accessor for LocationOfInterestProvider.RemappingOperation);
      uint64_t v20 = swift_allocObject();
      sub_100EDC4C0(v19, v20 + v27, (uint64_t (*)(void))type metadata accessor for LocationOfInterestProvider.RemappingOperation);
      sub_10000588C(&qword_101655570);
      sub_100062734(&qword_101655580, &qword_101655570);
      Publisher.map<A>(_:)();
      swift_release();
      sub_100062734(&qword_1016626B8, &qword_1016626B0);
      uint64_t v21 = v30;
      Publisher.eraseToAnyPublisher()();
      swift_release();
      (*v18)(v12, v21);
      specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
      specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
      specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      specialized ContiguousArray._endMutation()();
      v16 += v28;
      --v13;
    }
    while (v13);
    return v32;
  }
  return result;
}

uint64_t sub_100EDCEC0()
{
  return _swift_deallocObject(v0, 24, 7);
}

uint64_t sub_100EDCED0()
{
  return sub_100ED54BC();
}

uint64_t sub_100EDCED8(uint64_t a1)
{
  uint64_t v2 = sub_10000588C((uint64_t *)&unk_10163AC90);
  __chkstk_darwin(v2 - 8);
  uint64_t v4 = (char *)&v11 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  id v5 = [self standardUserDefaults];
  sub_10001D074(a1, (uint64_t)v4, (uint64_t *)&unk_10163AC90);
  uint64_t v6 = type metadata accessor for Date();
  uint64_t v7 = *(void *)(v6 - 8);
  Class isa = 0;
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v7 + 48))(v4, 1, v6) != 1)
  {
    Class isa = Date._bridgeToObjectiveC()().super.isa;
    (*(void (**)(char *, uint64_t))(v7 + 8))(v4, v6);
  }
  NSString v9 = String._bridgeToObjectiveC()();
  [v5 setObject:isa forKey:v9];

  swift_unknownObjectRelease();
  return sub_10001DAB4(a1, (uint64_t *)&unk_10163AC90);
}

uint64_t sub_100EDD070()
{
  swift_release();

  return _swift_deallocObject(v0, 40, 7);
}

uint64_t sub_100EDD0A8(uint64_t (*a1)(void **), uint64_t a2)
{
  return sub_100ED3A58(a1, a2, *(unsigned char *)(v2 + 16), *(void **)(v2 + 24), *(void *)(v2 + 32));
}

uint64_t sub_100EDD0B4()
{
  swift_release();

  return _swift_deallocObject(v0, 32, 7);
}

uint64_t sub_100EDD0EC@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  return sub_100ED5574(a1, *(unsigned __int8 *)(v2 + 16), *(void *)(v2 + 24), a2);
}

uint64_t sub_100EDD0F8@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  return sub_100ED627C(a1, *(unsigned __int8 *)(v2 + 16), *(void *)(v2 + 24), a2);
}

uint64_t sub_100EDD104()
{
  return _swift_deallocObject(v0, 17, 7);
}

uint64_t sub_100EDD114@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  return sub_100ED6B9C(a1, *(unsigned char *)(v2 + 16), a2);
}

id sub_100EDD11C(id result, char a2)
{
  if (a2 == 1) {
    return result;
  }
  if (!a2) {
    return (id)swift_errorRetain();
  }
  return result;
}

uint64_t sub_100EDD138(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

uint64_t sub_100EDD1A0()
{
  swift_release();
  swift_bridgeObjectRelease();

  return _swift_deallocObject(v0, 32, 7);
}

uint64_t sub_100EDD1E0()
{
  sub_100EDD21C(*(void *)(v0 + 16), *(void **)(v0 + 24), *(unsigned char *)(v0 + 32));

  return _swift_deallocObject(v0, 33, 7);
}

void sub_100EDD21C(uint64_t a1, void *a2, unsigned __int8 a3)
{
  if (a3 >> 6 == 1)
  {
    sub_100EDD248(a2, a3 & 0x3F);
  }
  else if (!(a3 >> 6))
  {
    swift_bridgeObjectRelease();
  }
}

void sub_100EDD248(void *a1, char a2)
{
  if (a2 == 1)
  {
  }
  else if (!a2)
  {
    swift_errorRelease();
  }
}

id sub_100EDD264@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = *(void *)(v1 + 16);
  uint64_t v3 = *(void **)(v1 + 24);
  *(void *)a1 = v2;
  *(void *)(a1 + 8) = v3;
  unsigned __int8 v4 = *(unsigned char *)(v1 + 32);
  *(unsigned char *)(a1 + 16) = v4;
  return sub_100EDD278(v2, v3, v4);
}

id sub_100EDD278(uint64_t a1, void *a2, unsigned __int8 a3)
{
  if (a3 >> 6 == 1) {
    return sub_100EDD11C(a2, a3 & 0x3F);
  }
  if (!(a3 >> 6)) {
    return (id)swift_bridgeObjectRetain();
  }
  return result;
}

uint64_t sub_100EDD2A4()
{
  uint64_t v1 = *(void *)(type metadata accessor for LocationOfInterestProvider.RemappingOperation() - 8);
  uint64_t v2 = *(unsigned __int8 *)(v1 + 80);
  uint64_t v3 = (v2 + 16) & ~v2;
  uint64_t v4 = *(void *)(v1 + 64);
  uint64_t v5 = v0 + v3;
  if (swift_getEnumCaseMultiPayload() <= 2)
  {
    sub_10001CFB8(*(void *)v5, *(void *)(v5 + 8));
    uint64_t v6 = v5 + *(int *)(type metadata accessor for SafeLocation() + 20);
    uint64_t v7 = type metadata accessor for UUID();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v7 - 8) + 8))(v6, v7);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }

  return _swift_deallocObject(v0, v3 + v4, v2 | 7);
}

uint64_t sub_100EDD3E0@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = *(void *)(type metadata accessor for LocationOfInterestProvider.RemappingOperation() - 8);
  return sub_100EDD138(v1 + ((*(unsigned __int8 *)(v3 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80)), a1, (uint64_t (*)(void))type metadata accessor for LocationOfInterestProvider.RemappingOperation);
}

uint64_t sub_100EDD45C()
{
  return sub_100EDD490((uint64_t (*)(uint64_t, uint64_t))sub_100A230F0);
}

uint64_t sub_100EDD478()
{
  return sub_100EDD490((uint64_t (*)(uint64_t, uint64_t))sub_100A22F54);
}

uint64_t sub_100EDD490(uint64_t (*a1)(uint64_t, uint64_t))
{
  uint64_t v2 = *(void *)(type metadata accessor for SafeLocation() - 8);
  uint64_t v3 = *(void *)(v1 + 16);
  uint64_t v4 = v1 + ((*(unsigned __int8 *)(v2 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80));

  return a1(v3, v4);
}

uint64_t sub_100EDD518()
{
  uint64_t v1 = (int *)(type metadata accessor for SafeLocation() - 8);
  uint64_t v2 = *(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v3 = (v2 + 24) & ~v2;
  uint64_t v4 = v2 | 7;
  uint64_t v5 = *(void *)(*(void *)v1 + 64) + v3 + 1;
  swift_release();
  sub_10001CFB8(*(void *)(v0 + v3), *(void *)(v0 + v3 + 8));
  uint64_t v6 = v0 + v3 + v1[7];
  uint64_t v7 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v7 - 8) + 8))(v6, v7);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return _swift_deallocObject(v0, v5, v4);
}

uint64_t sub_100EDD634@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v3 = *(void *)(type metadata accessor for SafeLocation() - 8);
  unint64_t v4 = (*(unsigned __int8 *)(v3 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  uint64_t v5 = *(void *)(v1 + 16);
  char v6 = *(unsigned char *)(v1 + v4 + *(void *)(v3 + 64));

  return sub_100A22D18(v5, v1 + v4, v6, a1);
}

uint64_t sub_100EDD6CC(uint64_t a1, __int16 a2)
{
  uint64_t v3 = *(uint64_t (**)(uint64_t *))(v2 + 16);
  uint64_t v5 = a1;
  __int16 v6 = a2 & 0x1FF;
  return v3(&v5);
}

uint64_t sub_100EDD710(uint64_t a1, uint64_t a2)
{
  return sub_100ED3BB8(a1, a2, *(void (**)(void, void))(v2 + 16), *(void *)(v2 + 24));
}

unint64_t sub_100EDD71C()
{
  unint64_t result = qword_1016626F0;
  if (!qword_1016626F0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1016626F0);
  }
  return result;
}

uint64_t sub_100EDD770()
{
  return sub_100ED2E60();
}

uint64_t sub_100EDD778@<X0>(uint64_t *a1@<X8>)
{
  return sub_100ED2EE8(a1);
}

uint64_t sub_100EDD794()
{
  swift_release();
  if (*(void *)(v0 + 32)) {
    swift_release();
  }
  swift_release();

  return _swift_deallocObject(v0, 56, 7);
}

uint64_t sub_100EDD7E4()
{
  return sub_100ED33F8(*(void *)(v0 + 16), *(unsigned __int8 *)(v0 + 24), *(void *)(v0 + 32), *(void *)(v0 + 40), *(void *)(v0 + 48));
}

uint64_t sub_100EDD7F8()
{
  if (*(void *)(v0 + 16)) {
    swift_release();
  }
  swift_release();

  return _swift_deallocObject(v0, 40, 7);
}

void sub_100EDD840(uint64_t a1)
{
  sub_100ED36B8(a1, *(void (**)(unsigned __int8 *, void))(v1 + 16));
}

void sub_100EDD84C(void *a1, char a2, char a3)
{
  if (a3) {
    sub_100EDD248(a1, a2);
  }
  else {
    swift_bridgeObjectRelease();
  }
}

uint64_t sub_100EDD858(unint64_t a1, uint64_t a2)
{
  return sub_100EDA394(a1, a2, *(void (**)(uint64_t, uint64_t))(v2 + 16));
}

uint64_t sub_100EDD860(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_100EDD870()
{
  return swift_release();
}

uint64_t initializeBufferWithCopyOfBuffer for LocationOfInterestProvider.Error(uint64_t a1, uint64_t a2)
{
  id v3 = *(id *)a2;
  char v4 = *(unsigned char *)(a2 + 8);
  sub_100EDD11C(*(id *)a2, v4);
  *(void *)a1 = v3;
  *(unsigned char *)(a1 + 8) = v4;
  return a1;
}

void destroy for LocationOfInterestProvider.Error(uint64_t a1)
{
}

uint64_t assignWithCopy for LocationOfInterestProvider.Error(uint64_t a1, uint64_t a2)
{
  id v3 = *(id *)a2;
  char v4 = *(unsigned char *)(a2 + 8);
  sub_100EDD11C(*(id *)a2, v4);
  uint64_t v5 = *(void **)a1;
  *(void *)a1 = v3;
  char v6 = *(unsigned char *)(a1 + 8);
  *(unsigned char *)(a1 + 8) = v4;
  sub_100EDD248(v5, v6);
  return a1;
}

uint64_t assignWithTake for LocationOfInterestProvider.Error(uint64_t a1, uint64_t a2)
{
  char v3 = *(unsigned char *)(a2 + 8);
  char v4 = *(void **)a1;
  *(void *)a1 = *(void *)a2;
  char v5 = *(unsigned char *)(a1 + 8);
  *(unsigned char *)(a1 + 8) = v3;
  sub_100EDD248(v4, v5);
  return a1;
}

ValueMetadata *type metadata accessor for LocationOfInterestProvider.Error()
{
  return &type metadata for LocationOfInterestProvider.Error;
}

void destroy for LocationOfInterestProvider.LOIRequestResponse(uint64_t a1)
{
}

uint64_t _s12searchpartyd26LocationOfInterestProviderC18LOIRequestResponseOwCP_0(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)a2;
  char v4 = *(void **)(a2 + 8);
  unsigned __int8 v5 = *(unsigned char *)(a2 + 16);
  sub_100EDD278(*(void *)a2, v4, v5);
  *(void *)a1 = v3;
  *(void *)(a1 + 8) = v4;
  *(unsigned char *)(a1 + 16) = v5;
  return a1;
}

uint64_t assignWithCopy for LocationOfInterestProvider.LOIRequestResponse(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)a2;
  char v4 = *(void **)(a2 + 8);
  unsigned __int8 v5 = *(unsigned char *)(a2 + 16);
  sub_100EDD278(*(void *)a2, v4, v5);
  uint64_t v6 = *(void *)a1;
  uint64_t v7 = *(void **)(a1 + 8);
  *(void *)a1 = v3;
  *(void *)(a1 + 8) = v4;
  unsigned __int8 v8 = *(unsigned char *)(a1 + 16);
  *(unsigned char *)(a1 + 16) = v5;
  sub_100EDD21C(v6, v7, v8);
  return a1;
}

uint64_t assignWithTake for LocationOfInterestProvider.LOIRequestResponse(uint64_t a1, uint64_t a2)
{
  char v3 = *(unsigned char *)(a2 + 16);
  uint64_t v4 = *(void *)a1;
  unsigned __int8 v5 = *(void **)(a1 + 8);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  unsigned __int8 v6 = *(unsigned char *)(a1 + 16);
  *(unsigned char *)(a1 + 16) = v3;
  sub_100EDD21C(v4, v5, v6);
  return a1;
}

uint64_t getEnumTagSinglePayload for LocationOfInterestProvider.LOIRequestResponse(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 17)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  uint64_t v2 = *(void *)a1 >> 3;
  if (v2 > 0x80000000) {
    int v3 = ~v2;
  }
  else {
    int v3 = -1;
  }
  return (v3 + 1);
}

uint64_t storeEnumTagSinglePayload for LocationOfInterestProvider.LOIRequestResponse(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(unsigned char *)(result + 16) = 0;
    *(void *)unint64_t result = a2 ^ 0x80000000;
    *(void *)(result + 8) = 0;
    if (a3 < 0) {
      *(unsigned char *)(result + 17) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)unint64_t result = 8 * -a2;
      *(void *)(result + 8) = 0;
      *(unsigned char *)(result + 16) = 0;
      return result;
    }
    *(unsigned char *)(result + 17) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

uint64_t sub_100EDDB0C(uint64_t a1)
{
  unsigned int v1 = *(unsigned __int8 *)(a1 + 16);
  int v2 = (char)v1;
  unsigned int v3 = v1 >> 6;
  if (v2 >= 0) {
    return v3;
  }
  else {
    return (*(_DWORD *)a1 & 7 | (8 * *(_DWORD *)(a1 + 8))) + 2;
  }
}

uint64_t sub_100EDDB34(uint64_t result)
{
  *(unsigned char *)(result + 16) &= 0x3Fu;
  return result;
}

uint64_t sub_100EDDB44(uint64_t result, unsigned int a2)
{
  if (a2 < 2)
  {
    char v2 = *(unsigned char *)(result + 16) & 3 | ((_BYTE)a2 << 6);
    *(void *)result &= 7uLL;
    *(unsigned char *)(result + 16) = v2;
  }
  else
  {
    *(void *)unint64_t result = ((_BYTE)a2 - 2) & 7;
    *(void *)(result + 8) = (unint64_t)(a2 - 2) >> 3;
    *(unsigned char *)(result + 16) = 0x80;
  }
  return result;
}

ValueMetadata *type metadata accessor for LocationOfInterestProvider.LOIRequestResponse()
{
  return &type metadata for LocationOfInterestProvider.LOIRequestResponse;
}

uint64_t *sub_100EDDB94(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v18 = *(void *)a2;
    *a1 = *(void *)a2;
    a1 = (uint64_t *)(v18 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    if (EnumCaseMultiPayload == 2)
    {
      uint64_t v19 = *(void *)a2;
      unint64_t v20 = *(void *)(a2 + 8);
      sub_1000361E0(*(void *)a2, v20);
      *a1 = v19;
      a1[1] = v20;
      uint64_t v21 = (int *)type metadata accessor for SafeLocation();
      uint64_t v22 = v21[5];
      uint64_t v23 = (char *)a1 + v22;
      uint64_t v24 = a2 + v22;
      uint64_t v25 = type metadata accessor for UUID();
      (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v25 - 8) + 16))(v23, v24, v25);
      *((unsigned char *)a1 + v21[6]) = *(unsigned char *)(a2 + v21[6]);
      uint64_t v26 = v21[7];
      uint64_t v27 = (uint64_t *)((char *)a1 + v26);
      uint64_t v28 = (void *)(a2 + v26);
      uint64_t v29 = v28[1];
      void *v27 = *v28;
      v27[1] = v29;
      *(uint64_t *)((char *)a1 + v21[8]) = *(void *)(a2 + v21[8]);
      *(uint64_t *)((char *)a1 + v21[9]) = *(void *)(a2 + v21[9]);
      *(uint64_t *)((char *)a1 + v21[10]) = *(void *)(a2 + v21[10]);
      *((unsigned char *)a1 + v21[11]) = *(unsigned char *)(a2 + v21[11]);
      *((unsigned char *)a1 + v21[12]) = *(unsigned char *)(a2 + v21[12]);
      *(uint64_t *)((char *)a1 + v21[13]) = *(void *)(a2 + v21[13]);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
    }
    else
    {
      uint64_t v7 = *(void *)a2;
      uint64_t v8 = *(void *)(a2 + 8);
      if (EnumCaseMultiPayload == 1)
      {
        sub_1000361E0(*(void *)a2, *(void *)(a2 + 8));
        *a1 = v7;
        a1[1] = v8;
        NSString v9 = (int *)type metadata accessor for SafeLocation();
        uint64_t v10 = v9[5];
        uint64_t v11 = (char *)a1 + v10;
        uint64_t v12 = a2 + v10;
        uint64_t v13 = type metadata accessor for UUID();
        (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v13 - 8) + 16))(v11, v12, v13);
        *((unsigned char *)a1 + v9[6]) = *(unsigned char *)(a2 + v9[6]);
        uint64_t v14 = v9[7];
        uint64_t v15 = (uint64_t *)((char *)a1 + v14);
        uint64_t v16 = (void *)(a2 + v14);
        uint64_t v17 = v16[1];
        void *v15 = *v16;
        v15[1] = v17;
        *(uint64_t *)((char *)a1 + v9[8]) = *(void *)(a2 + v9[8]);
        *(uint64_t *)((char *)a1 + v9[9]) = *(void *)(a2 + v9[9]);
        *(uint64_t *)((char *)a1 + v9[10]) = *(void *)(a2 + v9[10]);
        *((unsigned char *)a1 + v9[11]) = *(unsigned char *)(a2 + v9[11]);
        *((unsigned char *)a1 + v9[12]) = *(unsigned char *)(a2 + v9[12]);
        *(uint64_t *)((char *)a1 + v9[13]) = *(void *)(a2 + v9[13]);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
      }
      else
      {
        sub_1000361E0(*(void *)a2, *(void *)(a2 + 8));
        *a1 = v7;
        a1[1] = v8;
        uint64_t v30 = (int *)type metadata accessor for SafeLocation();
        uint64_t v31 = v30[5];
        uint64_t v32 = (char *)a1 + v31;
        uint64_t v33 = a2 + v31;
        uint64_t v34 = type metadata accessor for UUID();
        (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v34 - 8) + 16))(v32, v33, v34);
        *((unsigned char *)a1 + v30[6]) = *(unsigned char *)(a2 + v30[6]);
        uint64_t v35 = v30[7];
        uint64_t v36 = (uint64_t *)((char *)a1 + v35);
        unint64_t v37 = (void *)(a2 + v35);
        uint64_t v38 = v37[1];
        *uint64_t v36 = *v37;
        v36[1] = v38;
        *(uint64_t *)((char *)a1 + v30[8]) = *(void *)(a2 + v30[8]);
        *(uint64_t *)((char *)a1 + v30[9]) = *(void *)(a2 + v30[9]);
        *(uint64_t *)((char *)a1 + v30[10]) = *(void *)(a2 + v30[10]);
        *((unsigned char *)a1 + v30[11]) = *(unsigned char *)(a2 + v30[11]);
        *((unsigned char *)a1 + v30[12]) = *(unsigned char *)(a2 + v30[12]);
        *(uint64_t *)((char *)a1 + v30[13]) = *(void *)(a2 + v30[13]);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        uint64_t v39 = sub_10000588C(&qword_1016624F8);
        *((unsigned char *)a1 + *(int *)(v39 + 48)) = *(unsigned char *)(a2 + *(int *)(v39 + 48));
      }
    }
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

uint64_t sub_100EDDF18(uint64_t a1)
{
  uint64_t result = swift_getEnumCaseMultiPayload();
  if (result <= 2)
  {
    sub_10001CFB8(*(void *)a1, *(void *)(a1 + 8));
    uint64_t v3 = a1 + *(int *)(type metadata accessor for SafeLocation() + 20);
    uint64_t v4 = type metadata accessor for UUID();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8))(v3, v4);
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t *sub_100EDDFE4(uint64_t *a1, uint64_t *a2)
{
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload == 2 || EnumCaseMultiPayload == 1)
  {
    uint64_t v5 = *a2;
    unint64_t v6 = a2[1];
    sub_1000361E0(*a2, v6);
    *a1 = v5;
    a1[1] = v6;
    uint64_t v7 = (int *)type metadata accessor for SafeLocation();
    uint64_t v8 = v7[5];
    NSString v9 = (char *)a1 + v8;
    uint64_t v10 = (char *)a2 + v8;
    uint64_t v11 = type metadata accessor for UUID();
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v11 - 8) + 16))(v9, v10, v11);
    *((unsigned char *)a1 + v7[6]) = *((unsigned char *)a2 + v7[6]);
    uint64_t v12 = v7[7];
    uint64_t v13 = (uint64_t *)((char *)a1 + v12);
    uint64_t v14 = (uint64_t *)((char *)a2 + v12);
    uint64_t v15 = v14[1];
    *uint64_t v13 = *v14;
    v13[1] = v15;
    *(uint64_t *)((char *)a1 + v7[8]) = *(uint64_t *)((char *)a2 + v7[8]);
    *(uint64_t *)((char *)a1 + v7[9]) = *(uint64_t *)((char *)a2 + v7[9]);
    *(uint64_t *)((char *)a1 + v7[10]) = *(uint64_t *)((char *)a2 + v7[10]);
    *((unsigned char *)a1 + v7[11]) = *((unsigned char *)a2 + v7[11]);
    *((unsigned char *)a1 + v7[12]) = *((unsigned char *)a2 + v7[12]);
    *(uint64_t *)((char *)a1 + v7[13]) = *(uint64_t *)((char *)a2 + v7[13]);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  else
  {
    uint64_t v16 = *a2;
    unint64_t v17 = a2[1];
    sub_1000361E0(*a2, v17);
    *a1 = v16;
    a1[1] = v17;
    uint64_t v18 = (int *)type metadata accessor for SafeLocation();
    uint64_t v19 = v18[5];
    unint64_t v20 = (char *)a1 + v19;
    uint64_t v21 = (char *)a2 + v19;
    uint64_t v22 = type metadata accessor for UUID();
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v22 - 8) + 16))(v20, v21, v22);
    *((unsigned char *)a1 + v18[6]) = *((unsigned char *)a2 + v18[6]);
    uint64_t v23 = v18[7];
    uint64_t v24 = (uint64_t *)((char *)a1 + v23);
    uint64_t v25 = (uint64_t *)((char *)a2 + v23);
    uint64_t v26 = v25[1];
    *uint64_t v24 = *v25;
    v24[1] = v26;
    *(uint64_t *)((char *)a1 + v18[8]) = *(uint64_t *)((char *)a2 + v18[8]);
    *(uint64_t *)((char *)a1 + v18[9]) = *(uint64_t *)((char *)a2 + v18[9]);
    *(uint64_t *)((char *)a1 + v18[10]) = *(uint64_t *)((char *)a2 + v18[10]);
    *((unsigned char *)a1 + v18[11]) = *((unsigned char *)a2 + v18[11]);
    *((unsigned char *)a1 + v18[12]) = *((unsigned char *)a2 + v18[12]);
    *(uint64_t *)((char *)a1 + v18[13]) = *(uint64_t *)((char *)a2 + v18[13]);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    uint64_t v27 = sub_10000588C(&qword_1016624F8);
    *((unsigned char *)a1 + *(int *)(v27 + 48)) = *((unsigned char *)a2 + *(int *)(v27 + 48));
  }
  swift_storeEnumTagMultiPayload();
  return a1;
}

uint64_t *sub_100EDE22C(uint64_t *a1, uint64_t a2)
{
  if (a1 != (uint64_t *)a2)
  {
    sub_100E8DD7C((uint64_t)a1, (uint64_t (*)(void))type metadata accessor for LocationOfInterestProvider.RemappingOperation);
    int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    if (EnumCaseMultiPayload == 2)
    {
      uint64_t v15 = *(void *)a2;
      unint64_t v16 = *(void *)(a2 + 8);
      sub_1000361E0(*(void *)a2, v16);
      *a1 = v15;
      a1[1] = v16;
      unint64_t v17 = (int *)type metadata accessor for SafeLocation();
      uint64_t v18 = v17[5];
      uint64_t v19 = (char *)a1 + v18;
      uint64_t v20 = a2 + v18;
      uint64_t v21 = type metadata accessor for UUID();
      (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v21 - 8) + 16))(v19, v20, v21);
      *((unsigned char *)a1 + v17[6]) = *(unsigned char *)(a2 + v17[6]);
      uint64_t v22 = v17[7];
      uint64_t v23 = (uint64_t *)((char *)a1 + v22);
      uint64_t v24 = (void *)(a2 + v22);
      *uint64_t v23 = *v24;
      v23[1] = v24[1];
      *(uint64_t *)((char *)a1 + v17[8]) = *(void *)(a2 + v17[8]);
      *(uint64_t *)((char *)a1 + v17[9]) = *(void *)(a2 + v17[9]);
      *(uint64_t *)((char *)a1 + v17[10]) = *(void *)(a2 + v17[10]);
      *((unsigned char *)a1 + v17[11]) = *(unsigned char *)(a2 + v17[11]);
      *((unsigned char *)a1 + v17[12]) = *(unsigned char *)(a2 + v17[12]);
      *(uint64_t *)((char *)a1 + v17[13]) = *(void *)(a2 + v17[13]);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
    }
    else
    {
      uint64_t v5 = *(void *)a2;
      uint64_t v6 = *(void *)(a2 + 8);
      if (EnumCaseMultiPayload == 1)
      {
        sub_1000361E0(*(void *)a2, *(void *)(a2 + 8));
        *a1 = v5;
        a1[1] = v6;
        uint64_t v7 = (int *)type metadata accessor for SafeLocation();
        uint64_t v8 = v7[5];
        NSString v9 = (char *)a1 + v8;
        uint64_t v10 = a2 + v8;
        uint64_t v11 = type metadata accessor for UUID();
        (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v11 - 8) + 16))(v9, v10, v11);
        *((unsigned char *)a1 + v7[6]) = *(unsigned char *)(a2 + v7[6]);
        uint64_t v12 = v7[7];
        uint64_t v13 = (uint64_t *)((char *)a1 + v12);
        uint64_t v14 = (void *)(a2 + v12);
        *uint64_t v13 = *v14;
        v13[1] = v14[1];
        *(uint64_t *)((char *)a1 + v7[8]) = *(void *)(a2 + v7[8]);
        *(uint64_t *)((char *)a1 + v7[9]) = *(void *)(a2 + v7[9]);
        *(uint64_t *)((char *)a1 + v7[10]) = *(void *)(a2 + v7[10]);
        *((unsigned char *)a1 + v7[11]) = *(unsigned char *)(a2 + v7[11]);
        *((unsigned char *)a1 + v7[12]) = *(unsigned char *)(a2 + v7[12]);
        *(uint64_t *)((char *)a1 + v7[13]) = *(void *)(a2 + v7[13]);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
      }
      else
      {
        sub_1000361E0(*(void *)a2, *(void *)(a2 + 8));
        *a1 = v5;
        a1[1] = v6;
        uint64_t v25 = (int *)type metadata accessor for SafeLocation();
        uint64_t v26 = v25[5];
        uint64_t v27 = (char *)a1 + v26;
        uint64_t v28 = a2 + v26;
        uint64_t v29 = type metadata accessor for UUID();
        (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v29 - 8) + 16))(v27, v28, v29);
        *((unsigned char *)a1 + v25[6]) = *(unsigned char *)(a2 + v25[6]);
        uint64_t v30 = v25[7];
        uint64_t v31 = (uint64_t *)((char *)a1 + v30);
        uint64_t v32 = (void *)(a2 + v30);
        *uint64_t v31 = *v32;
        v31[1] = v32[1];
        *(uint64_t *)((char *)a1 + v25[8]) = *(void *)(a2 + v25[8]);
        *(uint64_t *)((char *)a1 + v25[9]) = *(void *)(a2 + v25[9]);
        *(uint64_t *)((char *)a1 + v25[10]) = *(void *)(a2 + v25[10]);
        *((unsigned char *)a1 + v25[11]) = *(unsigned char *)(a2 + v25[11]);
        *((unsigned char *)a1 + v25[12]) = *(unsigned char *)(a2 + v25[12]);
        *(uint64_t *)((char *)a1 + v25[13]) = *(void *)(a2 + v25[13]);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        uint64_t v33 = sub_10000588C(&qword_1016624F8);
        *((unsigned char *)a1 + *(int *)(v33 + 48)) = *(unsigned char *)(a2 + *(int *)(v33 + 48));
      }
    }
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

_OWORD *sub_100EDE59C(_OWORD *a1, _OWORD *a2)
{
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload == 2 || EnumCaseMultiPayload == 1)
  {
    *a1 = *a2;
    uint64_t v5 = (int *)type metadata accessor for SafeLocation();
    uint64_t v6 = v5[5];
    uint64_t v7 = (char *)a1 + v6;
    uint64_t v8 = (char *)a2 + v6;
    uint64_t v9 = type metadata accessor for UUID();
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v9 - 8) + 32))(v7, v8, v9);
    *((unsigned char *)a1 + v5[6]) = *((unsigned char *)a2 + v5[6]);
    *(_OWORD *)((char *)a1 + v5[7]) = *(_OWORD *)((char *)a2 + v5[7]);
    *(void *)((char *)a1 + v5[8]) = *(void *)((char *)a2 + v5[8]);
    *(void *)((char *)a1 + v5[9]) = *(void *)((char *)a2 + v5[9]);
    *(void *)((char *)a1 + v5[10]) = *(void *)((char *)a2 + v5[10]);
    *((unsigned char *)a1 + v5[11]) = *((unsigned char *)a2 + v5[11]);
    *((unsigned char *)a1 + v5[12]) = *((unsigned char *)a2 + v5[12]);
    *(void *)((char *)a1 + v5[13]) = *(void *)((char *)a2 + v5[13]);
  }
  else
  {
    *a1 = *a2;
    uint64_t v10 = (int *)type metadata accessor for SafeLocation();
    uint64_t v11 = v10[5];
    uint64_t v12 = (char *)a1 + v11;
    uint64_t v13 = (char *)a2 + v11;
    uint64_t v14 = type metadata accessor for UUID();
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v14 - 8) + 32))(v12, v13, v14);
    *((unsigned char *)a1 + v10[6]) = *((unsigned char *)a2 + v10[6]);
    *(_OWORD *)((char *)a1 + v10[7]) = *(_OWORD *)((char *)a2 + v10[7]);
    *(void *)((char *)a1 + v10[8]) = *(void *)((char *)a2 + v10[8]);
    *(void *)((char *)a1 + v10[9]) = *(void *)((char *)a2 + v10[9]);
    *(void *)((char *)a1 + v10[10]) = *(void *)((char *)a2 + v10[10]);
    *((unsigned char *)a1 + v10[11]) = *((unsigned char *)a2 + v10[11]);
    *((unsigned char *)a1 + v10[12]) = *((unsigned char *)a2 + v10[12]);
    *(void *)((char *)a1 + v10[13]) = *(void *)((char *)a2 + v10[13]);
    uint64_t v15 = sub_10000588C(&qword_1016624F8);
    *((unsigned char *)a1 + *(int *)(v15 + 48)) = *((unsigned char *)a2 + *(int *)(v15 + 48));
  }
  swift_storeEnumTagMultiPayload();
  return a1;
}

_OWORD *sub_100EDE7A4(_OWORD *a1, _OWORD *a2)
{
  if (a1 != a2)
  {
    sub_100E8DD7C((uint64_t)a1, (uint64_t (*)(void))type metadata accessor for LocationOfInterestProvider.RemappingOperation);
    int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    if (EnumCaseMultiPayload == 2 || EnumCaseMultiPayload == 1)
    {
      *a1 = *a2;
      uint64_t v5 = (int *)type metadata accessor for SafeLocation();
      uint64_t v6 = v5[5];
      uint64_t v7 = (char *)a1 + v6;
      uint64_t v8 = (char *)a2 + v6;
      uint64_t v9 = type metadata accessor for UUID();
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v9 - 8) + 32))(v7, v8, v9);
      *((unsigned char *)a1 + v5[6]) = *((unsigned char *)a2 + v5[6]);
      *(_OWORD *)((char *)a1 + v5[7]) = *(_OWORD *)((char *)a2 + v5[7]);
      *(void *)((char *)a1 + v5[8]) = *(void *)((char *)a2 + v5[8]);
      *(void *)((char *)a1 + v5[9]) = *(void *)((char *)a2 + v5[9]);
      *(void *)((char *)a1 + v5[10]) = *(void *)((char *)a2 + v5[10]);
      *((unsigned char *)a1 + v5[11]) = *((unsigned char *)a2 + v5[11]);
      *((unsigned char *)a1 + v5[12]) = *((unsigned char *)a2 + v5[12]);
      *(void *)((char *)a1 + v5[13]) = *(void *)((char *)a2 + v5[13]);
    }
    else
    {
      *a1 = *a2;
      uint64_t v10 = (int *)type metadata accessor for SafeLocation();
      uint64_t v11 = v10[5];
      uint64_t v12 = (char *)a1 + v11;
      uint64_t v13 = (char *)a2 + v11;
      uint64_t v14 = type metadata accessor for UUID();
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v14 - 8) + 32))(v12, v13, v14);
      *((unsigned char *)a1 + v10[6]) = *((unsigned char *)a2 + v10[6]);
      *(_OWORD *)((char *)a1 + v10[7]) = *(_OWORD *)((char *)a2 + v10[7]);
      *(void *)((char *)a1 + v10[8]) = *(void *)((char *)a2 + v10[8]);
      *(void *)((char *)a1 + v10[9]) = *(void *)((char *)a2 + v10[9]);
      *(void *)((char *)a1 + v10[10]) = *(void *)((char *)a2 + v10[10]);
      *((unsigned char *)a1 + v10[11]) = *((unsigned char *)a2 + v10[11]);
      *((unsigned char *)a1 + v10[12]) = *((unsigned char *)a2 + v10[12]);
      *(void *)((char *)a1 + v10[13]) = *(void *)((char *)a2 + v10[13]);
      uint64_t v15 = sub_10000588C(&qword_1016624F8);
      *((unsigned char *)a1 + *(int *)(v15 + 48)) = *((unsigned char *)a2 + *(int *)(v15 + 48));
    }
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

uint64_t sub_100EDE9D0()
{
  uint64_t result = type metadata accessor for SafeLocation();
  if (v1 <= 0x3F)
  {
    uint64_t v2 = *(void *)(result - 8) + 64;
    swift_getTupleTypeLayout2();
    uint64_t v4 = &v3;
    uint64_t v5 = v2;
    uint64_t v6 = v2;
    swift_initEnumMetadataMultiPayload();
    return 0;
  }
  return result;
}

uint64_t sub_100EDEA90@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  type metadata accessor for ChangeSetAdaptor();
  uint64_t v7 = swift_allocObject();
  *(void *)(v7 + 16) = _swiftEmptyDictionarySingleton;
  *(void *)(v7 + 24) = _swiftEmptyDictionarySingleton;
  uint64_t v8 = v7 + 24;
  uint64_t v9 = swift_retain();
  sub_100C4E4EC(v9, (uint64_t)&off_1015FBA58, a1, a2);
  swift_release();
  if (v3) {
    return swift_release();
  }
  swift_beginAccess();
  if (*(void *)(*(void *)(v7 + 16) + 16)) {
    goto LABEL_6;
  }
  swift_beginAccess();
  if ((*(void *)v8 & 0xC000000000000001) != 0)
  {
    swift_bridgeObjectRetain();
    uint64_t v11 = __CocoaDictionary.count.getter();
    swift_bridgeObjectRelease();
    if (v11)
    {
LABEL_6:
      UUID.init()();
      swift_beginAccess();
      unint64_t v12 = swift_bridgeObjectRetain();
      uint64_t v13 = sub_10070FC74(v12);
      swift_bridgeObjectRelease();
      uint64_t v14 = *(void *)(v7 + 16);
      swift_bridgeObjectRetain();
      swift_release();
      uint64_t v15 = type metadata accessor for CloudKitChangeSet(0);
      *(void *)(a3 + *(int *)(v15 + 20)) = v13;
      *(void *)(a3 + *(int *)(v15 + 24)) = v14;
      return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v15 - 8) + 56))(a3, 0, 1, v15);
    }
  }
  else if (*(void *)(*(void *)v8 + 16))
  {
    goto LABEL_6;
  }
  swift_release();
  uint64_t v16 = type metadata accessor for CloudKitChangeSet(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v16 - 8) + 56))(a3, 1, 1, v16);
}

uint64_t sub_100EDEC94@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X8>)
{
  type metadata accessor for ChangeSetAdaptor();
  uint64_t v13 = swift_allocObject();
  *(void *)(v13 + 16) = _swiftEmptyDictionarySingleton;
  *(void *)(v13 + 24) = _swiftEmptyDictionarySingleton;
  uint64_t v14 = v13 + 24;
  uint64_t v15 = swift_retain();
  sub_1000727FC(v15, (uint64_t)&off_1015FBA58, a1, a2, a3, a4, a5, a6);
  if (v24)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    return swift_release_n();
  }
  swift_release();
  swift_beginAccess();
  if (*(void *)(*(void *)(v13 + 16) + 16)) {
    goto LABEL_6;
  }
  swift_beginAccess();
  if ((*(void *)v14 & 0xC000000000000001) == 0)
  {
    if (*(void *)(*(void *)v14 + 16)) {
      goto LABEL_6;
    }
LABEL_10:
    swift_release();
    uint64_t v21 = type metadata accessor for CloudKitChangeSet(0);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v21 - 8) + 56))(a7, 1, 1, v21);
    goto LABEL_7;
  }
  swift_bridgeObjectRetain();
  uint64_t v22 = __CocoaDictionary.count.getter();
  swift_bridgeObjectRelease();
  if (!v22) {
    goto LABEL_10;
  }
LABEL_6:
  UUID.init()();
  swift_beginAccess();
  unint64_t v17 = swift_bridgeObjectRetain();
  uint64_t v18 = sub_10070FC74(v17);
  swift_bridgeObjectRelease();
  uint64_t v19 = *(void *)(v13 + 16);
  swift_bridgeObjectRetain();
  swift_release();
  uint64_t v20 = type metadata accessor for CloudKitChangeSet(0);
  *(void *)(a7 + *(int *)(v20 + 20)) = v18;
  *(void *)(a7 + *(int *)(v20 + 24)) = v19;
  (*(void (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v20 - 8) + 56))(a7, 0, 1, v20);
LABEL_7:
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t sub_100EDEF60@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  type metadata accessor for ChangeSetAdaptor();
  uint64_t v11 = swift_allocObject();
  *(void *)(v11 + 16) = _swiftEmptyDictionarySingleton;
  *(void *)(v11 + 24) = _swiftEmptyDictionarySingleton;
  uint64_t v12 = v11 + 24;
  uint64_t v13 = swift_retain();
  sub_100072E20(v13, (uint64_t)&off_1015FBA58, a1, a2, a3, a4);
  if (v5)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    return swift_release_n();
  }
  swift_release();
  swift_beginAccess();
  if (*(void *)(*(void *)(v11 + 16) + 16)) {
    goto LABEL_6;
  }
  swift_beginAccess();
  if ((*(void *)v12 & 0xC000000000000001) == 0)
  {
    if (*(void *)(*(void *)v12 + 16)) {
      goto LABEL_6;
    }
LABEL_9:
    swift_release();
    uint64_t v19 = type metadata accessor for CloudKitChangeSet(0);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v19 - 8) + 56))(a5, 1, 1, v19);
    goto LABEL_7;
  }
  swift_bridgeObjectRetain();
  uint64_t v20 = __CocoaDictionary.count.getter();
  swift_bridgeObjectRelease();
  if (!v20) {
    goto LABEL_9;
  }
LABEL_6:
  UUID.init()();
  swift_beginAccess();
  unint64_t v15 = swift_bridgeObjectRetain();
  uint64_t v16 = sub_10070FC74(v15);
  swift_bridgeObjectRelease();
  uint64_t v17 = *(void *)(v11 + 16);
  swift_bridgeObjectRetain();
  swift_release();
  uint64_t v18 = type metadata accessor for CloudKitChangeSet(0);
  *(void *)(a5 + *(int *)(v18 + 20)) = v16;
  *(void *)(a5 + *(int *)(v18 + 24)) = v17;
  (*(void (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v18 - 8) + 56))(a5, 0, 1, v18);
LABEL_7:
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t sub_100EDF1C4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = v2;
  uint64_t v6 = (int *)type metadata accessor for SharingCircleSecret();
  uint64_t v7 = *((void *)v6 - 1);
  __chkstk_darwin(v6);
  uint64_t v9 = (uint64_t *)((char *)&v37 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0));
  type metadata accessor for ChangeSetAdaptor();
  uint64_t inited = swift_initStackObject();
  *(void *)(inited + 16) = _swiftEmptyDictionarySingleton;
  uint64_t v11 = inited + 16;
  *(void *)(inited + 24) = _swiftEmptyDictionarySingleton;
  uint64_t v39 = inited + 24;
  uint64_t v12 = *(void *)(a1 + 16);
  if (!v12)
  {
LABEL_6:
    swift_beginAccess();
    uint64_t v29 = *(void *)v11;
    uint64_t v30 = v39;
    if (!*(void *)(*(void *)v11 + 16))
    {
      swift_beginAccess();
      if ((*(void *)v30 & 0xC000000000000001) != 0)
      {
        swift_bridgeObjectRetain();
        uint64_t v31 = __CocoaDictionary.count.getter();
        swift_bridgeObjectRelease();
        if (v31) {
          goto LABEL_9;
        }
      }
      else if (*(void *)(*(void *)v30 + 16))
      {
        goto LABEL_9;
      }
      swift_release();
      uint64_t v36 = type metadata accessor for CloudKitChangeSet(0);
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v36 - 8) + 56))(a2, 1, 1, v36);
      return swift_bridgeObjectRelease();
    }
LABEL_9:
    UUID.init()();
    swift_beginAccess();
    unint64_t v32 = swift_bridgeObjectRetain();
    uint64_t v33 = sub_10070FC74(v32);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRetain();
    swift_release();
    uint64_t v34 = type metadata accessor for CloudKitChangeSet(0);
    *(void *)(a2 + *(int *)(v34 + 20)) = v33;
    *(void *)(a2 + *(int *)(v34 + 24)) = v29;
    (*(void (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v34 - 8) + 56))(a2, 0, 1, v34);
    return swift_bridgeObjectRelease();
  }
  uint64_t v37 = inited + 16;
  uint64_t v38 = a2;
  unint64_t v13 = (*(unsigned __int8 *)(v7 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80);
  uint64_t v40 = *(void *)(v7 + 72);
  swift_retain();
  swift_bridgeObjectRetain();
  long long v41 = xmmword_101348180;
  while (1)
  {
    uint64_t v42 = v3;
    UUID.init()();
    uint64_t v14 = v6[6];
    uint64_t v15 = a1;
    uint64_t v16 = a1 + v13;
    uint64_t v17 = v16 + v14;
    uint64_t v18 = (char *)v9 + v14;
    uint64_t v19 = type metadata accessor for UUID();
    (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v19 - 8) + 16))(v18, v17, v19);
    uint64_t v20 = v6[8];
    uint64_t v21 = *(void *)(v16 + v20);
    unint64_t v22 = *(void *)(v16 + v20 + 8);
    uint64_t v23 = (uint64_t *)(v16 + v6[7]);
    uint64_t v24 = *v23;
    uint64_t v25 = v23[1];
    *(_OWORD *)uint64_t v9 = v41;
    uint64_t v26 = (uint64_t *)((char *)v9 + v20);
    *uint64_t v26 = v21;
    v26[1] = v22;
    uint64_t v27 = (uint64_t *)((char *)v9 + v6[7]);
    void *v27 = v24;
    v27[1] = v25;
    sub_1000361E0(v21, v22);
    swift_bridgeObjectRetain();
    uint64_t v28 = v42;
    sub_100EE1FDC(v9, (uint64_t (*)(uint64_t *))sub_101155E34);
    uint64_t v3 = v28;
    sub_100EE87AC((uint64_t)v9, (uint64_t (*)(void))type metadata accessor for SharingCircleSecret);
    if (v28) {
      break;
    }
    v13 += v40;
    --v12;
    a1 = v15;
    if (!v12)
    {
      swift_release();
      swift_bridgeObjectRelease();
      uint64_t v11 = v37;
      a2 = v38;
      goto LABEL_6;
    }
  }
  swift_release_n();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t sub_100EDF588@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  return sub_100EDF5B4(a1, a2, a3, a4, a5, (void (*)(uint64_t, _UNKNOWN **, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))sub_100FB2938, a6);
}

uint64_t sub_100EDF5B4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, void (*a6)(uint64_t, _UNKNOWN **, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t)@<X5>, uint64_t a7@<X8>)
{
  type metadata accessor for ChangeSetAdaptor();
  uint64_t v13 = swift_allocObject();
  *(void *)(v13 + 16) = _swiftEmptyDictionarySingleton;
  *(void *)(v13 + 24) = _swiftEmptyDictionarySingleton;
  uint64_t v14 = v13 + 24;
  uint64_t v15 = swift_retain();
  a6(v15, &off_1015FBA58, a1, a2, a3, a4, a5);
  if (v7)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    return swift_release_n();
  }
  swift_release();
  swift_beginAccess();
  if (*(void *)(*(void *)(v13 + 16) + 16)) {
    goto LABEL_6;
  }
  swift_beginAccess();
  if ((*(void *)v14 & 0xC000000000000001) == 0)
  {
    if (*(void *)(*(void *)v14 + 16)) {
      goto LABEL_6;
    }
LABEL_9:
    swift_release();
    uint64_t v22 = type metadata accessor for CloudKitChangeSet(0);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v22 - 8) + 56))(a7, 1, 1, v22);
    goto LABEL_7;
  }
  swift_bridgeObjectRetain();
  uint64_t v17 = __CocoaDictionary.count.getter();
  swift_bridgeObjectRelease();
  if (!v17) {
    goto LABEL_9;
  }
LABEL_6:
  UUID.init()();
  swift_beginAccess();
  unint64_t v18 = swift_bridgeObjectRetain();
  uint64_t v19 = sub_10070FC74(v18);
  swift_bridgeObjectRelease();
  uint64_t v20 = *(void *)(v13 + 16);
  swift_bridgeObjectRetain();
  swift_release();
  uint64_t v21 = type metadata accessor for CloudKitChangeSet(0);
  *(void *)(a7 + *(int *)(v21 + 20)) = v19;
  *(void *)(a7 + *(int *)(v21 + 24)) = v20;
  (*(void (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v21 - 8) + 56))(a7, 0, 1, v21);
LABEL_7:
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t sub_100EDF858@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t *a3@<X2>, uint64_t a4@<X8>)
{
  type metadata accessor for ChangeSetAdaptor();
  uint64_t v9 = swift_allocObject();
  *(void *)(v9 + 16) = _swiftEmptyDictionarySingleton;
  *(void *)(v9 + 24) = _swiftEmptyDictionarySingleton;
  uint64_t v10 = v9 + 24;
  uint64_t v11 = swift_retain();
  sub_10059AFAC(v11, (uint64_t)&off_1015FBA58, a1, a2, a3);
  if (v4)
  {
    swift_bridgeObjectRelease();
    return swift_release_n();
  }
  swift_release();
  swift_beginAccess();
  if (*(void *)(*(void *)(v9 + 16) + 16)) {
    goto LABEL_6;
  }
  swift_beginAccess();
  if ((*(void *)v10 & 0xC000000000000001) == 0)
  {
    if (*(void *)(*(void *)v10 + 16)) {
      goto LABEL_6;
    }
LABEL_9:
    swift_release();
    uint64_t v18 = type metadata accessor for CloudKitChangeSet(0);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v18 - 8) + 56))(a4, 1, 1, v18);
    return swift_bridgeObjectRelease();
  }
  swift_bridgeObjectRetain();
  uint64_t v13 = __CocoaDictionary.count.getter();
  swift_bridgeObjectRelease();
  if (!v13) {
    goto LABEL_9;
  }
LABEL_6:
  UUID.init()();
  swift_beginAccess();
  unint64_t v14 = swift_bridgeObjectRetain();
  uint64_t v15 = sub_10070FC74(v14);
  swift_bridgeObjectRelease();
  uint64_t v16 = *(void *)(v9 + 16);
  swift_bridgeObjectRetain();
  swift_release();
  uint64_t v17 = type metadata accessor for CloudKitChangeSet(0);
  *(void *)(a4 + *(int *)(v17 + 20)) = v15;
  *(void *)(a4 + *(int *)(v17 + 24)) = v16;
  (*(void (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v17 - 8) + 56))(a4, 0, 1, v17);
  return swift_bridgeObjectRelease();
}

uint64_t sub_100EDFA78@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  type metadata accessor for ChangeSetAdaptor();
  uint64_t v5 = swift_allocObject();
  *(void *)(v5 + 16) = _swiftEmptyDictionarySingleton;
  *(void *)(v5 + 24) = _swiftEmptyDictionarySingleton;
  uint64_t v6 = v5 + 24;
  uint64_t v7 = swift_retain();
  sub_10059B1B0(v7, (uint64_t)&off_1015FBA58, a1);
  if (v2)
  {
    swift_bridgeObjectRelease();
    return swift_release_n();
  }
  swift_release();
  swift_beginAccess();
  if (*(void *)(*(void *)(v5 + 16) + 16)) {
    goto LABEL_6;
  }
  swift_beginAccess();
  if ((*(void *)v6 & 0xC000000000000001) == 0)
  {
    if (*(void *)(*(void *)v6 + 16)) {
      goto LABEL_6;
    }
LABEL_9:
    swift_release();
    uint64_t v14 = type metadata accessor for CloudKitChangeSet(0);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v14 - 8) + 56))(a2, 1, 1, v14);
    return swift_bridgeObjectRelease();
  }
  swift_bridgeObjectRetain();
  uint64_t v9 = __CocoaDictionary.count.getter();
  swift_bridgeObjectRelease();
  if (!v9) {
    goto LABEL_9;
  }
LABEL_6:
  UUID.init()();
  swift_beginAccess();
  unint64_t v10 = swift_bridgeObjectRetain();
  uint64_t v11 = sub_10070FC74(v10);
  swift_bridgeObjectRelease();
  uint64_t v12 = *(void *)(v5 + 16);
  swift_bridgeObjectRetain();
  swift_release();
  uint64_t v13 = type metadata accessor for CloudKitChangeSet(0);
  *(void *)(a2 + *(int *)(v13 + 20)) = v11;
  *(void *)(a2 + *(int *)(v13 + 24)) = v12;
  (*(void (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v13 - 8) + 56))(a2, 0, 1, v13);
  return swift_bridgeObjectRelease();
}

uint64_t sub_100EDFC88@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  type metadata accessor for ChangeSetAdaptor();
  uint64_t v7 = swift_allocObject();
  *(void *)(v7 + 16) = _swiftEmptyDictionarySingleton;
  *(void *)(v7 + 24) = _swiftEmptyDictionarySingleton;
  uint64_t v8 = v7 + 24;
  uint64_t v9 = swift_retain();
  sub_1012A4D04(v9, (uint64_t)&off_1015FBA58, a1, a2);
  if (v3)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    return swift_release_n();
  }
  swift_release();
  swift_beginAccess();
  if (*(void *)(*(void *)(v7 + 16) + 16)) {
    goto LABEL_6;
  }
  swift_beginAccess();
  if ((*(void *)v8 & 0xC000000000000001) == 0)
  {
    if (*(void *)(*(void *)v8 + 16)) {
      goto LABEL_6;
    }
LABEL_9:
    swift_release();
    uint64_t v16 = type metadata accessor for CloudKitChangeSet(0);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v16 - 8) + 56))(a3, 1, 1, v16);
    goto LABEL_7;
  }
  swift_bridgeObjectRetain();
  uint64_t v11 = __CocoaDictionary.count.getter();
  swift_bridgeObjectRelease();
  if (!v11) {
    goto LABEL_9;
  }
LABEL_6:
  UUID.init()();
  swift_beginAccess();
  unint64_t v12 = swift_bridgeObjectRetain();
  uint64_t v13 = sub_10070FC74(v12);
  swift_bridgeObjectRelease();
  uint64_t v14 = *(void *)(v7 + 16);
  swift_bridgeObjectRetain();
  swift_release();
  uint64_t v15 = type metadata accessor for CloudKitChangeSet(0);
  *(void *)(a3 + *(int *)(v15 + 20)) = v13;
  *(void *)(a3 + *(int *)(v15 + 24)) = v14;
  (*(void (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v15 - 8) + 56))(a3, 0, 1, v15);
LABEL_7:
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t sub_100EDFEB0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  return sub_100EDF5B4(a1, a2, a3, a4, a5, (void (*)(uint64_t, _UNKNOWN **, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))sub_1012A51EC, a6);
}

uint64_t sub_100EDFEDC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  type metadata accessor for ChangeSetAdaptor();
  uint64_t v7 = swift_allocObject();
  *(void *)(v7 + 16) = _swiftEmptyDictionarySingleton;
  *(void *)(v7 + 24) = _swiftEmptyDictionarySingleton;
  uint64_t v8 = v7 + 24;
  uint64_t v9 = swift_retain();
  sub_10129B6B8(v9, (uint64_t)&off_1015FBA58, a1, a2);
  if (v3)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    return swift_release_n();
  }
  swift_release();
  swift_beginAccess();
  if (*(void *)(*(void *)(v7 + 16) + 16)) {
    goto LABEL_6;
  }
  swift_beginAccess();
  if ((*(void *)v8 & 0xC000000000000001) == 0)
  {
    if (*(void *)(*(void *)v8 + 16)) {
      goto LABEL_6;
    }
LABEL_9:
    swift_release();
    uint64_t v16 = type metadata accessor for CloudKitChangeSet(0);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v16 - 8) + 56))(a3, 1, 1, v16);
    goto LABEL_7;
  }
  swift_bridgeObjectRetain();
  uint64_t v11 = __CocoaDictionary.count.getter();
  swift_bridgeObjectRelease();
  if (!v11) {
    goto LABEL_9;
  }
LABEL_6:
  UUID.init()();
  swift_beginAccess();
  unint64_t v12 = swift_bridgeObjectRetain();
  uint64_t v13 = sub_10070FC74(v12);
  swift_bridgeObjectRelease();
  uint64_t v14 = *(void *)(v7 + 16);
  swift_bridgeObjectRetain();
  swift_release();
  uint64_t v15 = type metadata accessor for CloudKitChangeSet(0);
  *(void *)(a3 + *(int *)(v15 + 20)) = v13;
  *(void *)(a3 + *(int *)(v15 + 24)) = v14;
  (*(void (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v15 - 8) + 56))(a3, 0, 1, v15);
LABEL_7:
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t sub_100EE0104@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  type metadata accessor for ChangeSetAdaptor();
  uint64_t inited = swift_initStackObject();
  *(void *)(inited + 16) = _swiftEmptyDictionarySingleton;
  *(void *)(inited + 24) = _swiftEmptyDictionarySingleton;
  uint64_t v8 = inited + 24;
  uint64_t v9 = *(void *)(a1 + 16);
  uint64_t v24 = a3;
  if (v9)
  {
    uint64_t v10 = *(void *)(type metadata accessor for OwnerSharingCircle() - 8);
    uint64_t v11 = (uint64_t *)(a1 + ((*(unsigned __int8 *)(v10 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v10 + 80)));
    uint64_t v12 = *(void *)(v10 + 72);
    swift_retain();
    do
    {
      sub_100EE5C08(v11);
      if (v3)
      {
        swift_release_n();
        goto LABEL_18;
      }
      uint64_t v11 = (uint64_t *)((char *)v11 + v12);
      --v9;
    }
    while (v9);
    uint64_t v13 = *(void *)(a2 + 16);
    if (!v13) {
      goto LABEL_11;
    }
    goto LABEL_6;
  }
  swift_retain();
  uint64_t v13 = *(void *)(a2 + 16);
  if (!v13)
  {
LABEL_11:
    swift_release();
LABEL_12:
    swift_beginAccess();
    uint64_t v17 = *(void *)(inited + 16);
    if (*(void *)(v17 + 16)) {
      goto LABEL_15;
    }
    swift_beginAccess();
    if ((*(void *)v8 & 0xC000000000000001) != 0)
    {
      swift_bridgeObjectRetain();
      uint64_t v18 = __CocoaDictionary.count.getter();
      swift_bridgeObjectRelease();
      if (v18)
      {
LABEL_15:
        UUID.init()();
        swift_beginAccess();
        unint64_t v19 = swift_bridgeObjectRetain();
        uint64_t v20 = sub_10070FC74(v19);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRetain();
        swift_release();
        uint64_t v21 = type metadata accessor for CloudKitChangeSet(0);
        *(void *)(v24 + *(int *)(v21 + 20)) = v20;
        *(void *)(v24 + *(int *)(v21 + 24)) = v17;
        (*(void (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v21 - 8) + 56))(v24, 0, 1, v21);
        goto LABEL_18;
      }
    }
    else if (*(void *)(*(void *)v8 + 16))
    {
      goto LABEL_15;
    }
    swift_release();
    uint64_t v23 = type metadata accessor for CloudKitChangeSet(0);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v23 - 8) + 56))(v24, 1, 1, v23);
    goto LABEL_18;
  }
LABEL_6:
  uint64_t v14 = *(void *)(type metadata accessor for SharingCircleSecret() - 8);
  uint64_t v15 = (uint64_t *)(a2 + ((*(unsigned __int8 *)(v14 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v14 + 80)));
  uint64_t v16 = *(void *)(v14 + 72);
  swift_bridgeObjectRetain();
  while (1)
  {
    sub_100EE5828(v15);
    if (v3) {
      break;
    }
    uint64_t v15 = (uint64_t *)((char *)v15 + v16);
    if (!--v13)
    {
      swift_release();
      swift_bridgeObjectRelease();
      goto LABEL_12;
    }
  }
  swift_release_n();
  swift_bridgeObjectRelease();
LABEL_18:
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t sub_100EE0458@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  type metadata accessor for ChangeSetAdaptor();
  uint64_t inited = swift_initStackObject();
  *(void *)(inited + 16) = _swiftEmptyDictionarySingleton;
  *(void *)(inited + 24) = _swiftEmptyDictionarySingleton;
  uint64_t v8 = inited + 24;
  uint64_t v9 = *(void *)(a1 + 16);
  uint64_t v24 = a3;
  if (v9)
  {
    uint64_t v10 = *(void *)(type metadata accessor for OwnerSharingCircle() - 8);
    uint64_t v11 = (uint64_t *)(a1 + ((*(unsigned __int8 *)(v10 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v10 + 80)));
    uint64_t v12 = *(void *)(v10 + 72);
    swift_retain();
    do
    {
      sub_100EE5C08(v11);
      if (v3)
      {
        swift_release_n();
        goto LABEL_18;
      }
      uint64_t v11 = (uint64_t *)((char *)v11 + v12);
      --v9;
    }
    while (v9);
    uint64_t v13 = *(void *)(a2 + 16);
    if (!v13) {
      goto LABEL_11;
    }
    goto LABEL_6;
  }
  swift_retain();
  uint64_t v13 = *(void *)(a2 + 16);
  if (!v13)
  {
LABEL_11:
    swift_release();
LABEL_12:
    swift_beginAccess();
    uint64_t v17 = *(void *)(inited + 16);
    if (*(void *)(v17 + 16)) {
      goto LABEL_15;
    }
    swift_beginAccess();
    if ((*(void *)v8 & 0xC000000000000001) != 0)
    {
      swift_bridgeObjectRetain();
      uint64_t v18 = __CocoaDictionary.count.getter();
      swift_bridgeObjectRelease();
      if (v18)
      {
LABEL_15:
        UUID.init()();
        swift_beginAccess();
        unint64_t v19 = swift_bridgeObjectRetain();
        uint64_t v20 = sub_10070FC74(v19);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRetain();
        swift_release();
        uint64_t v21 = type metadata accessor for CloudKitChangeSet(0);
        *(void *)(v24 + *(int *)(v21 + 20)) = v20;
        *(void *)(v24 + *(int *)(v21 + 24)) = v17;
        (*(void (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v21 - 8) + 56))(v24, 0, 1, v21);
        goto LABEL_18;
      }
    }
    else if (*(void *)(*(void *)v8 + 16))
    {
      goto LABEL_15;
    }
    swift_release();
    uint64_t v23 = type metadata accessor for CloudKitChangeSet(0);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v23 - 8) + 56))(v24, 1, 1, v23);
    goto LABEL_18;
  }
LABEL_6:
  uint64_t v14 = *(void *)(type metadata accessor for OwnerSharingCircle() - 8);
  uint64_t v15 = (uint64_t *)(a2 + ((*(unsigned __int8 *)(v14 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v14 + 80)));
  uint64_t v16 = *(void *)(v14 + 72);
  swift_bridgeObjectRetain();
  while (1)
  {
    sub_100EE1FDC(v15, (uint64_t (*)(uint64_t *))sub_1011553E4);
    if (v3) {
      break;
    }
    uint64_t v15 = (uint64_t *)((char *)v15 + v16);
    if (!--v13)
    {
      swift_release();
      swift_bridgeObjectRelease();
      goto LABEL_12;
    }
  }
  swift_release_n();
  swift_bridgeObjectRelease();
LABEL_18:
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t sub_100EE07C0@<X0>(void (*a1)(uint64_t, _UNKNOWN **)@<X0>, uint64_t a2@<X8>)
{
  type metadata accessor for ChangeSetAdaptor();
  uint64_t v5 = swift_allocObject();
  *(void *)(v5 + 16) = _swiftEmptyDictionarySingleton;
  *(void *)(v5 + 24) = _swiftEmptyDictionarySingleton;
  uint64_t v6 = v5 + 24;
  uint64_t v7 = swift_retain();
  a1(v7, &off_1015FBA58);
  swift_release();
  if (v2) {
    return swift_release();
  }
  swift_beginAccess();
  if (*(void *)(*(void *)(v5 + 16) + 16)) {
    goto LABEL_6;
  }
  swift_beginAccess();
  if ((*(void *)v6 & 0xC000000000000001) != 0)
  {
    swift_bridgeObjectRetain();
    uint64_t v9 = __CocoaDictionary.count.getter();
    swift_bridgeObjectRelease();
    if (v9)
    {
LABEL_6:
      UUID.init()();
      swift_beginAccess();
      unint64_t v10 = swift_bridgeObjectRetain();
      uint64_t v11 = sub_10070FC74(v10);
      swift_bridgeObjectRelease();
      uint64_t v12 = *(void *)(v5 + 16);
      swift_bridgeObjectRetain();
      swift_release();
      uint64_t v13 = type metadata accessor for CloudKitChangeSet(0);
      *(void *)(a2 + *(int *)(v13 + 20)) = v11;
      *(void *)(a2 + *(int *)(v13 + 24)) = v12;
      return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v13 - 8) + 56))(a2, 0, 1, v13);
    }
  }
  else if (*(void *)(*(void *)v6 + 16))
  {
    goto LABEL_6;
  }
  swift_release();
  uint64_t v14 = type metadata accessor for CloudKitChangeSet(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v14 - 8) + 56))(a2, 1, 1, v14);
}

uint64_t sub_100EE09C0(id *a1, uint64_t a2)
{
  uint64_t v3 = v2;
  uint64_t v6 = type metadata accessor for PeerCommunicationIdentifier();
  __chkstk_darwin(v6);
  uint64_t v8 = (char *)&v37 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = (int *)type metadata accessor for OwnerPeerTrust();
  __chkstk_darwin(v9);
  uint64_t v11 = (char *)&v37 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100EE86DC(a2, (uint64_t)v11, (uint64_t (*)(void))type metadata accessor for OwnerPeerTrust);
  [*a1 encryptedValues];
  swift_getObjectType();
  uint64_t v12 = v9[6];
  int v13 = *(unsigned __int8 *)(v3 + v12);
  uint64_t v14 = v11[v12];
  if (v13 != v14)
  {
    uint64_t v40 = &type metadata for Int;
    long long v41 = &protocol witness table for Int;
    uint64_t v38 = v14;
    CKRecordKeyValueSetting.subscript.setter();
  }
  sub_100EE86DC(v3 + v9[7], (uint64_t)v8, (uint64_t (*)(void))type metadata accessor for PeerCommunicationIdentifier);
  char v15 = sub_1009CA754((uint64_t)v8, (uint64_t)&v11[v9[7]]);
  sub_100EE87AC((uint64_t)v8, (uint64_t (*)(void))type metadata accessor for PeerCommunicationIdentifier);
  if ((v15 & 1) == 0)
  {
    type metadata accessor for PropertyListEncoder();
    swift_allocObject();
    PropertyListEncoder.init()();
    sub_100EE85E4(&qword_1016407A8, (void (*)(uint64_t))type metadata accessor for PeerCommunicationIdentifier);
    uint64_t v16 = dispatch thunk of PropertyListEncoder.encode<A>(_:)();
    unint64_t v18 = v17;
    swift_release();
    uint64_t v40 = &type metadata for Data;
    long long v41 = &protocol witness table for Data;
    uint64_t v38 = v16;
    unint64_t v39 = v18;
    CKRecordKeyValueSetting.subscript.setter();
  }
  uint64_t v19 = v9[8];
  uint64_t v20 = *(void *)(v3 + v19);
  uint64_t v21 = *(void *)(v3 + v19 + 8);
  uint64_t v22 = &v11[v19];
  uint64_t v24 = *(void *)v22;
  unint64_t v23 = *((void *)v22 + 1);
  BOOL v25 = v20 == *(void *)v22 && v21 == v23;
  if (!v25 && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
  {
    uint64_t v40 = &type metadata for String;
    long long v41 = &protocol witness table for String;
    uint64_t v38 = v24;
    unint64_t v39 = v23;
    swift_bridgeObjectRetain();
    CKRecordKeyValueSetting.subscript.setter();
  }
  uint64_t v26 = v9[9];
  uint64_t v27 = *(void *)(v3 + v26);
  unint64_t v28 = *(void *)(v3 + v26 + 8);
  uint64_t v29 = (uint64_t *)&v11[v26];
  uint64_t v30 = *v29;
  unint64_t v31 = v29[1];
  sub_1000361E0(v27, v28);
  sub_1000361E0(v30, v31);
  char v32 = _s12searchpartyd24KeyRepresentableInternalV23__derived_struct_equalsySbAC_ACtFZ_0(v27, v28, v30, v31);
  sub_10001CFB8(v30, v31);
  sub_10001CFB8(v27, v28);
  if ((v32 & 1) == 0)
  {
    uint64_t v40 = &type metadata for Data;
    long long v41 = &protocol witness table for Data;
    uint64_t v38 = v30;
    unint64_t v39 = v31;
    sub_1000361E0(v30, v31);
    CKRecordKeyValueSetting.subscript.setter();
  }
  uint64_t v33 = v9[10];
  int v34 = *(unsigned __int8 *)(v3 + v33);
  uint64_t v35 = v11[v33];
  if (v34 == v35)
  {
    sub_100EE87AC((uint64_t)v11, (uint64_t (*)(void))type metadata accessor for OwnerPeerTrust);
    return swift_unknownObjectRelease();
  }
  else
  {
    uint64_t v40 = &type metadata for Int;
    long long v41 = &protocol witness table for Int;
    uint64_t v38 = v35;
    CKRecordKeyValueSetting.subscript.setter();
    swift_unknownObjectRelease();
    return sub_100EE87AC((uint64_t)v11, (uint64_t (*)(void))type metadata accessor for OwnerPeerTrust);
  }
}

uint64_t sub_100EE0E4C(id *a1, uint64_t a2)
{
  uint64_t v5 = type metadata accessor for UUID();
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v8 = (char *)&ObjectType - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = (int *)type metadata accessor for MemberSharingCircle();
  __chkstk_darwin(v9);
  uint64_t v11 = (char *)&ObjectType - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100EE86DC(a2, (uint64_t)v11, (uint64_t (*)(void))type metadata accessor for MemberSharingCircle);
  id v39 = [*a1 encryptedValues];
  uint64_t ObjectType = swift_getObjectType();
  uint64_t v12 = v9[6];
  uint64_t v40 = v2;
  int v13 = *(void (**)(char *, uint64_t, uint64_t))(v6 + 16);
  v13(v8, v2 + v12, v5);
  uint64_t v38 = v11;
  sub_100EE85E4((unint64_t *)&qword_10163B8F0, (void (*)(uint64_t))&type metadata accessor for UUID);
  char v14 = dispatch thunk of static Equatable.== infix(_:_:)();
  char v15 = *(void (**)(char *, uint64_t))(v6 + 8);
  v15(v8, v5);
  if ((v14 & 1) == 0)
  {
    uint64_t v16 = UUID.uuidString.getter();
    uint64_t v43 = &type metadata for String;
    uint64_t v44 = &protocol witness table for String;
    uint64_t v41 = v16;
    uint64_t v42 = v17;
    CKRecordKeyValueSetting.subscript.setter();
  }
  v13(v8, v40 + v9[7], v5);
  char v18 = dispatch thunk of static Equatable.== infix(_:_:)();
  v15(v8, v5);
  if ((v18 & 1) == 0)
  {
    uint64_t v19 = UUID.uuidString.getter();
    uint64_t v43 = &type metadata for String;
    uint64_t v44 = &protocol witness table for String;
    uint64_t v41 = v19;
    uint64_t v42 = v20;
    CKRecordKeyValueSetting.subscript.setter();
  }
  v13(v8, v40 + v9[8], v5);
  uint64_t v21 = (uint64_t)v38;
  char v22 = dispatch thunk of static Equatable.== infix(_:_:)();
  v15(v8, v5);
  if ((v22 & 1) == 0)
  {
    uint64_t v23 = UUID.uuidString.getter();
    uint64_t v43 = &type metadata for String;
    uint64_t v44 = &protocol witness table for String;
    uint64_t v41 = v23;
    uint64_t v42 = v24;
    CKRecordKeyValueSetting.subscript.setter();
  }
  uint64_t v25 = v9[9];
  uint64_t v26 = *(void *)(v40 + v25);
  uint64_t v27 = *(void *)(v21 + v25);
  swift_bridgeObjectRetain();
  LOBYTE(v26) = sub_100DF62C0(v26, v27);
  swift_bridgeObjectRelease();
  if ((v26 & 1) == 0)
  {
    type metadata accessor for PropertyListEncoder();
    swift_allocObject();
    PropertyListEncoder.init()();
    uint64_t v41 = v27;
    swift_bridgeObjectRetain();
    sub_10000588C(&qword_101640E20);
    sub_100EE862C((unint64_t *)&qword_101640E28, &qword_101640E20, (void (*)(void))sub_1002C4DE8);
    uint64_t v28 = dispatch thunk of PropertyListEncoder.encode<A>(_:)();
    unint64_t v30 = v29;
    swift_release();
    swift_bridgeObjectRelease();
    Class isa = Data._bridgeToObjectiveC()().super.isa;
    NSString v32 = String._bridgeToObjectiveC()();
    [v39 setObject:isa forKeyedSubscript:v32];

    sub_10001CFB8(v28, v30);
  }
  uint64_t v33 = v9[10];
  int v34 = *(unsigned __int8 *)(v40 + v33);
  uint64_t v35 = *(unsigned __int8 *)(v21 + v33);
  if (v34 == v35)
  {
    sub_100EE87AC(v21, (uint64_t (*)(void))type metadata accessor for MemberSharingCircle);
    return swift_unknownObjectRelease();
  }
  else
  {
    uint64_t v43 = &type metadata for Int;
    uint64_t v44 = &protocol witness table for Int;
    uint64_t v41 = v35;
    CKRecordKeyValueSetting.subscript.setter();
    swift_unknownObjectRelease();
    return sub_100EE87AC(v21, (uint64_t (*)(void))type metadata accessor for MemberSharingCircle);
  }
}

unint64_t sub_100EE1480()
{
  _StringGuts.grow(_:)(43);
  swift_bridgeObjectRelease();
  v1._countAndFlagsBits = UUID.uuidString.getter();
  String.append(_:)(v1);
  swift_bridgeObjectRelease();
  v2._countAndFlagsBits = 0x203A65766173203ALL;
  v2._object = (void *)0xE800000000000000;
  String.append(_:)(v2);
  if (*(void *)(v0 + *(int *)(type metadata accessor for CloudKitChangeSet(0) + 20)) >> 62)
  {
    swift_bridgeObjectRetain();
    _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  v3._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  String.append(_:)(v3);
  swift_bridgeObjectRelease();
  v4._countAndFlagsBits = 0x3A6574656C656420;
  v4._object = (void *)0xE900000000000020;
  String.append(_:)(v4);
  v5._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  String.append(_:)(v5);
  swift_bridgeObjectRelease();
  v6._countAndFlagsBits = 62;
  v6._object = (void *)0xE100000000000000;
  String.append(_:)(v6);
  return 0xD000000000000013;
}

uint64_t sub_100EE1618(id *a1, uint64_t a2)
{
  uint64_t v3 = v2;
  uint64_t v6 = type metadata accessor for UUID();
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  uint64_t v9 = (char *)&v32 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = (int *)type metadata accessor for OwnerSharingCircle();
  __chkstk_darwin(v10);
  uint64_t v12 = (char *)&v32 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100EE86DC(a2, (uint64_t)v12, (uint64_t (*)(void))type metadata accessor for OwnerSharingCircle);
  id v13 = [*a1 encryptedValues];
  swift_getObjectType();
  (*(void (**)(char *, uint64_t, uint64_t))(v7 + 16))(v9, v3 + v10[6], v6);
  sub_100EE85E4((unint64_t *)&qword_10163B8F0, (void (*)(uint64_t))&type metadata accessor for UUID);
  char v14 = dispatch thunk of static Equatable.== infix(_:_:)();
  (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
  if ((v14 & 1) == 0)
  {
    uint64_t v15 = UUID.uuidString.getter();
    uint64_t v35 = &type metadata for String;
    uint64_t v36 = &protocol witness table for String;
    uint64_t v33 = v15;
    uint64_t v34 = v16;
    CKRecordKeyValueSetting.subscript.setter();
  }
  uint64_t v17 = v10[8];
  uint64_t v18 = *(void *)(v3 + v17);
  uint64_t v19 = *(void *)&v12[v17];
  swift_bridgeObjectRetain();
  LOBYTE(v18) = sub_100DF62D4(v18, v19);
  swift_bridgeObjectRelease();
  if ((v18 & 1) == 0)
  {
    type metadata accessor for PropertyListEncoder();
    swift_allocObject();
    PropertyListEncoder.init()();
    uint64_t v33 = v19;
    swift_bridgeObjectRetain();
    sub_10000588C(&qword_10165F368);
    sub_100EE862C((unint64_t *)&qword_10165F398, &qword_10165F368, (void (*)(void))sub_100DF9B24);
    uint64_t v20 = dispatch thunk of PropertyListEncoder.encode<A>(_:)();
    unint64_t v22 = v21;
    swift_release();
    swift_bridgeObjectRelease();
    Class isa = Data._bridgeToObjectiveC()().super.isa;
    NSString v24 = String._bridgeToObjectiveC()();
    [v13 setObject:isa forKeyedSubscript:v24];

    sub_10001CFB8(v20, v22);
  }
  uint64_t v25 = v10[9];
  int v26 = *(unsigned __int8 *)(v3 + v25);
  uint64_t v27 = v12[v25];
  if (v26 != v27)
  {
    uint64_t v35 = &type metadata for Int;
    uint64_t v36 = &protocol witness table for Int;
    uint64_t v33 = v27;
    CKRecordKeyValueSetting.subscript.setter();
  }
  uint64_t v28 = v10[7];
  int v29 = *(unsigned __int8 *)(v3 + v28);
  uint64_t v30 = v12[v28];
  if (v29 == v30)
  {
    sub_100EE87AC((uint64_t)v12, (uint64_t (*)(void))type metadata accessor for OwnerSharingCircle);
    return swift_unknownObjectRelease();
  }
  else
  {
    uint64_t v35 = &type metadata for Int;
    uint64_t v36 = &protocol witness table for Int;
    uint64_t v33 = v30;
    CKRecordKeyValueSetting.subscript.setter();
    swift_unknownObjectRelease();
    return sub_100EE87AC((uint64_t)v12, (uint64_t (*)(void))type metadata accessor for OwnerSharingCircle);
  }
}

uint64_t sub_100EE1B44(id *a1, uint64_t a2)
{
  uint64_t v3 = v2;
  uint64_t v6 = type metadata accessor for PeerCommunicationIdentifier();
  __chkstk_darwin(v6);
  uint64_t v8 = (char *)&v35 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = (int *)type metadata accessor for MemberPeerTrust();
  __chkstk_darwin(v9);
  uint64_t v11 = (char *)&v35 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100EE86DC(a2, (uint64_t)v11, (uint64_t (*)(void))type metadata accessor for MemberPeerTrust);
  [*a1 encryptedValues];
  swift_getObjectType();
  uint64_t v12 = v9[6];
  int v13 = *(unsigned __int8 *)(v3 + v12);
  uint64_t v14 = v11[v12];
  if (v13 != v14)
  {
    uint64_t v38 = &type metadata for Int;
    id v39 = &protocol witness table for Int;
    uint64_t v36 = v14;
    CKRecordKeyValueSetting.subscript.setter();
  }
  sub_100EE86DC(v3 + v9[7], (uint64_t)v8, (uint64_t (*)(void))type metadata accessor for PeerCommunicationIdentifier);
  char v15 = sub_1009CA754((uint64_t)v8, (uint64_t)&v11[v9[7]]);
  sub_100EE87AC((uint64_t)v8, (uint64_t (*)(void))type metadata accessor for PeerCommunicationIdentifier);
  if ((v15 & 1) == 0)
  {
    type metadata accessor for PropertyListEncoder();
    swift_allocObject();
    PropertyListEncoder.init()();
    sub_100EE85E4(&qword_1016407A8, (void (*)(uint64_t))type metadata accessor for PeerCommunicationIdentifier);
    uint64_t v16 = dispatch thunk of PropertyListEncoder.encode<A>(_:)();
    unint64_t v18 = v17;
    swift_release();
    uint64_t v38 = &type metadata for Data;
    id v39 = &protocol witness table for Data;
    uint64_t v36 = v16;
    unint64_t v37 = v18;
    CKRecordKeyValueSetting.subscript.setter();
  }
  uint64_t v19 = v9[8];
  uint64_t v20 = *(void *)(v3 + v19);
  uint64_t v21 = *(void *)(v3 + v19 + 8);
  unint64_t v22 = &v11[v19];
  uint64_t v24 = *(void *)v22;
  unint64_t v23 = *((void *)v22 + 1);
  BOOL v25 = v20 == *(void *)v22 && v21 == v23;
  if (!v25 && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
  {
    uint64_t v38 = &type metadata for String;
    id v39 = &protocol witness table for String;
    uint64_t v36 = v24;
    unint64_t v37 = v23;
    swift_bridgeObjectRetain();
    CKRecordKeyValueSetting.subscript.setter();
  }
  uint64_t v26 = v9[9];
  uint64_t v27 = v3 + v26;
  uint64_t v28 = *(void *)(v3 + v26);
  unint64_t v29 = *(void *)(v27 + 8);
  uint64_t v30 = (uint64_t *)&v11[v26];
  uint64_t v31 = *v30;
  unint64_t v32 = v30[1];
  sub_1000361E0(v28, v29);
  sub_1000361E0(v31, v32);
  char v33 = _s12searchpartyd24KeyRepresentableInternalV23__derived_struct_equalsySbAC_ACtFZ_0(v28, v29, v31, v32);
  sub_10001CFB8(v31, v32);
  sub_10001CFB8(v28, v29);
  if (v33)
  {
    sub_100EE87AC((uint64_t)v11, (uint64_t (*)(void))type metadata accessor for MemberPeerTrust);
    return swift_unknownObjectRelease();
  }
  else
  {
    uint64_t v38 = &type metadata for Data;
    id v39 = &protocol witness table for Data;
    uint64_t v36 = v31;
    unint64_t v37 = v32;
    sub_1000361E0(v31, v32);
    CKRecordKeyValueSetting.subscript.setter();
    swift_unknownObjectRelease();
    return sub_100EE87AC((uint64_t)v11, (uint64_t (*)(void))type metadata accessor for MemberPeerTrust);
  }
}

void sub_100EE1F84(uint64_t *a1)
{
}

void sub_100EE1FB0(uint64_t *a1)
{
}

void sub_100EE1FDC(uint64_t *a1, uint64_t (*a2)(uint64_t *))
{
  uint64_t v5 = *a1;
  unint64_t v4 = a1[1];
  uint64_t v7 = v2;
  switch(v4 >> 62)
  {
    case 1uLL:
      uint64_t v10 = (int)v5;
      uint64_t v11 = v5 >> 32;
      goto LABEL_6;
    case 2uLL:
      uint64_t v10 = *(void *)(v5 + 16);
      uint64_t v11 = *(void *)(v5 + 24);
LABEL_6:
      if (v10 == v11) {
        goto LABEL_7;
      }
      goto LABEL_3;
    case 3uLL:
      goto LABEL_7;
    default:
      if ((v4 & 0xFF000000000000) != 0)
      {
LABEL_3:
        sub_100CF7ADC();
        swift_allocError();
        *uint64_t v9 = 1;
        swift_willThrow();
        return;
      }
LABEL_7:
      uint64_t v13 = a2(a1);
      if (v3)
      {
        __break(1u);
        JUMPOUT(0x100EE22A4);
      }
      uint64_t v14 = (void *)v13;
      swift_beginAccess();
      uint64_t v15 = *(void *)(v7 + 24);
      swift_bridgeObjectRetain();
      id v16 = [v14 recordID];
      id v17 = v16;
      if ((v15 & 0xC000000000000001) != 0)
      {
        id v17 = v16;
        char v18 = __CocoaDictionary.contains(_:)();
        swift_bridgeObjectRelease();
      }
      else
      {
        if (!*(void *)(v15 + 16))
        {
          swift_bridgeObjectRelease();

          goto LABEL_15;
        }
        sub_100724354((uint64_t)v16);
        char v18 = v19;
        swift_bridgeObjectRelease();
      }

      if (v18) {
        goto LABEL_17;
      }
LABEL_15:
      swift_beginAccess();
      uint64_t v20 = *(void *)(v7 + 16);
      swift_bridgeObjectRetain();
      id v21 = [v14 recordID];
      unint64_t v22 = v21;
      if (*(void *)(v20 + 16))
      {
        sub_100724354((uint64_t)v21);
        char v24 = v23;
        swift_bridgeObjectRelease();

        if (v24)
        {
LABEL_17:
          sub_100CF7ADC();
          swift_allocError();
          unsigned char *v25 = 4;
          swift_willThrow();

          return;
        }
      }
      else
      {
        swift_bridgeObjectRelease();
      }
      id v26 = [v14 recordID];
      swift_beginAccess();
      id v27 = v14;
      sub_100EE7E1C((uint64_t)v27, (uint64_t)v26, (void (*)(uint64_t, uint64_t, uint64_t))sub_10016CAAC, sub_100EE7EE8);
      swift_endAccess();

      return;
  }
}

void sub_100EE22B4(uint64_t *a1)
{
}

void sub_100EE22E0(uint64_t *a1)
{
}

void sub_100EE230C(uint64_t *a1)
{
}

void sub_100EE2338(uint64_t *a1)
{
}

void sub_100EE2364(uint64_t *a1)
{
}

void sub_100EE2390(uint64_t *a1, uint64_t a2)
{
  uint64_t v5 = sub_10000588C((uint64_t *)&unk_10163B7C0);
  __chkstk_darwin(v5 - 8);
  uint64_t v7 = (uint64_t *)((char *)&v41 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v8 = type metadata accessor for MemberSharingCircle();
  __chkstk_darwin(v8);
  uint64_t v11 = (char *)&v41 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = *a1;
  unint64_t v12 = a1[1];
  switch(v12 >> 62)
  {
    case 1uLL:
      if ((int)v13 != v13 >> 32) {
        goto LABEL_3;
      }
      goto LABEL_10;
    case 2uLL:
      if (*(void *)(v13 + 16) == *(void *)(v13 + 24)) {
        goto LABEL_10;
      }
      goto LABEL_3;
    case 3uLL:
      goto LABEL_10;
    default:
      if ((v12 & 0xFF000000000000) == 0)
      {
LABEL_10:
        sub_100CF7ADC();
        swift_allocError();
        *char v23 = 2;
        swift_willThrow();
        return;
      }
LABEL_3:
      uint64_t v42 = v9;
      Class v15 = sub_101155AC4((uint64_t)a1);
      if (v2)
      {
        __break(1u);
        JUMPOUT(0x100EE29B8);
      }
      Class v16 = v15;
      Class v48 = v16;
      uint64_t v43 = (uint64_t *)(a2 + 24);
      swift_beginAccess();
      uint64_t v17 = *(void *)(a2 + 24);
      char v18 = v16;
      swift_bridgeObjectRetain();
      id v19 = [(objc_class *)v18 recordID];
      uint64_t v20 = v19;
      uint64_t v44 = v8;
      if ((v17 & 0xC000000000000001) != 0)
      {
        id v21 = v19;
        char v22 = __CocoaDictionary.contains(_:)();
        swift_bridgeObjectRelease();

        if (v22) {
          goto LABEL_17;
        }
      }
      else if (*(void *)(v17 + 16))
      {
        sub_100724354((uint64_t)v19);
        char v25 = v24;
        swift_bridgeObjectRelease();

        if (v25) {
          goto LABEL_17;
        }
      }
      else
      {
        swift_bridgeObjectRelease();
      }
      swift_beginAccess();
      uint64_t v26 = *(void *)(a2 + 16);
      swift_bridgeObjectRetain();
      id v27 = [(objc_class *)v18 recordID];
      uint64_t v28 = v27;
      if (*(void *)(v26 + 16))
      {
        sub_100724354((uint64_t)v27);
        char v30 = v29;
        swift_bridgeObjectRelease();

        if (v30)
        {
LABEL_17:

          sub_100CF7ADC();
          swift_allocError();
          *uint64_t v31 = 4;
          swift_willThrow();

          return;
        }
      }
      else
      {
        swift_bridgeObjectRelease();
      }
      if (qword_1016371D8 != -1) {
        swift_once();
      }
      uint64_t v45 = 0x7365547265646E75;
      unint64_t v46 = 0xE900000000000074;
      SynchronousCache.cachedValue<A>(key:computeBlock:)();
      swift_bridgeObjectRelease();
      if (v47 == 1)
      {
        id v32 = [(objc_class *)v18 valueStore];
        [v32 resetChangedKeys];

        id v33 = [(objc_class *)v18 encryptedValueStore];
        [v33 resetChangedKeys];
      }
      id v34 = [(objc_class *)v18 recordID];

      uint64_t v35 = *v43;
      swift_bridgeObjectRetain();
      uint64_t v36 = sub_1000F78E4(v34, v35);

      swift_bridgeObjectRelease();
      if (v36)
      {
        sub_1002C302C(v36, v7);
        uint64_t v37 = v44;
        (*(void (**)(uint64_t *, void, uint64_t, uint64_t))(v42 + 56))(v7, 0, 1, v44);
        sub_100EE8744((uint64_t)v7, (uint64_t)v11, (uint64_t (*)(void))type metadata accessor for MemberSharingCircle);
      }
      else
      {
        uint64_t v37 = v44;
        sub_100EE86DC((uint64_t)a1, (uint64_t)v11, (uint64_t (*)(void))type metadata accessor for MemberSharingCircle);
      }
      v11[*(int *)(v37 + 40)] = 1;
      sub_100EE0E4C((id *)&v48, (uint64_t)v11);
      if (sub_1002C51D4((uint64_t)a1, (uint64_t)v11))
      {
        sub_100EE87AC((uint64_t)v11, (uint64_t (*)(void))type metadata accessor for MemberSharingCircle);
        Class v38 = v48;
      }
      else
      {
        Class v39 = v48;
        id v40 = [(objc_class *)v48 recordID];
        swift_beginAccess();
        Class v38 = v39;
        sub_100EE7E1C((uint64_t)v38, (uint64_t)v40, (void (*)(uint64_t, uint64_t, uint64_t))sub_10016CAAC, sub_100EE7EE8);
        swift_endAccess();

        sub_100EE87AC((uint64_t)v11, (uint64_t (*)(void))type metadata accessor for MemberSharingCircle);
      }

      return;
  }
}

void sub_100EE29C8(uint64_t *a1, uint64_t a2, uint64_t a3)
{
}

void sub_100EE2A08(uint64_t *a1, uint64_t a2, uint64_t a3)
{
}

void sub_100EE2A48(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, void (*a5)(char *, uint64_t))
{
  uint64_t v11 = sub_10000588C((uint64_t *)&unk_10163B7C0);
  __chkstk_darwin(v11 - 8);
  uint64_t v13 = (uint64_t *)((char *)&v50 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v14 = type metadata accessor for MemberSharingCircle();
  uint64_t v15 = __chkstk_darwin(v14);
  char v18 = (char *)&v50 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v20 = *a1;
  unint64_t v19 = a1[1];
  switch(v19 >> 62)
  {
    case 1uLL:
      uint64_t v30 = (int)v20;
      uint64_t v31 = v20 >> 32;
      goto LABEL_9;
    case 2uLL:
      uint64_t v30 = *(void *)(v20 + 16);
      uint64_t v31 = *(void *)(v20 + 24);
LABEL_9:
      if (v30 == v31) {
        goto LABEL_10;
      }
      goto LABEL_3;
    case 3uLL:
      goto LABEL_10;
    default:
      if ((v19 & 0xFF000000000000) == 0)
      {
LABEL_10:
        sub_100CF7ADC();
        swift_allocError();
        *id v32 = 2;
        swift_willThrow();
        swift_bridgeObjectRelease();
        return;
      }
LABEL_3:
      uint64_t v51 = v15;
      uint64_t v52 = a4;
      uint64_t v50 = v16;
      uint64_t v54 = a5;
      Class v22 = sub_101155AC4((uint64_t)a1);
      if (v5)
      {
        __break(1u);
        JUMPOUT(0x100EE30B4);
      }
      Class v23 = v22;
      Class v59 = v23;
      uint64_t v53 = (uint64_t *)(a2 + 24);
      swift_beginAccess();
      uint64_t v24 = *(void *)(a2 + 24);
      char v25 = v23;
      swift_bridgeObjectRetain();
      id v26 = [(objc_class *)v25 recordID];
      id v27 = v26;
      uint64_t v55 = a3;
      if ((v24 & 0xC000000000000001) != 0)
      {
        id v28 = v26;
        char v29 = __CocoaDictionary.contains(_:)();
        swift_bridgeObjectRelease();

        if (v29) {
          goto LABEL_17;
        }
      }
      else if (*(void *)(v24 + 16))
      {
        sub_100724354((uint64_t)v26);
        char v34 = v33;
        swift_bridgeObjectRelease();

        if (v34) {
          goto LABEL_17;
        }
      }
      else
      {
        swift_bridgeObjectRelease();
      }
      swift_beginAccess();
      uint64_t v35 = *(void *)(a2 + 16);
      swift_bridgeObjectRetain();
      id v36 = [(objc_class *)v25 recordID];
      uint64_t v37 = v36;
      if (*(void *)(v35 + 16))
      {
        sub_100724354((uint64_t)v36);
        char v39 = v38;
        swift_bridgeObjectRelease();

        uint64_t v40 = v55;
        if (v39)
        {
LABEL_17:

          sub_100CF7ADC();
          swift_allocError();
          unsigned char *v41 = 4;
          swift_willThrow();
          Class v42 = v59;
          goto LABEL_29;
        }
      }
      else
      {
        swift_bridgeObjectRelease();

        uint64_t v40 = v55;
      }
      if (qword_1016371D8 != -1) {
        swift_once();
      }
      uint64_t v56 = 0x7365547265646E75;
      unint64_t v57 = 0xE900000000000074;
      SynchronousCache.cachedValue<A>(key:computeBlock:)();
      swift_bridgeObjectRelease();
      if (v58 == 1)
      {
        id v43 = [(objc_class *)v25 valueStore];
        [v43 resetChangedKeys];

        id v44 = [(objc_class *)v25 encryptedValueStore];
        [v44 resetChangedKeys];
      }
      id v45 = [(objc_class *)v25 recordID];

      uint64_t v46 = *v53;
      swift_bridgeObjectRetain();
      char v47 = sub_1000F78E4(v45, v46);

      swift_bridgeObjectRelease();
      if (v47)
      {
        sub_1002C302C(v47, v13);
        (*(void (**)(uint64_t *, void, uint64_t, uint64_t))(v50 + 56))(v13, 0, 1, v51);
        sub_100EE8744((uint64_t)v13, (uint64_t)v18, (uint64_t (*)(void))type metadata accessor for MemberSharingCircle);
      }
      else
      {
        sub_100EE86DC((uint64_t)a1, (uint64_t)v18, (uint64_t (*)(void))type metadata accessor for MemberSharingCircle);
      }
      v54(v18, v40);
      sub_100EE0E4C((id *)&v59, (uint64_t)v18);
      if (sub_1002C51D4((uint64_t)a1, (uint64_t)v18))
      {
        sub_100EE87AC((uint64_t)v18, (uint64_t (*)(void))type metadata accessor for MemberSharingCircle);
        Class v42 = v59;
      }
      else
      {
        Class v48 = v59;
        id v49 = [(objc_class *)v59 recordID];
        swift_beginAccess();
        Class v42 = v48;
        sub_100EE7E1C((uint64_t)v42, (uint64_t)v49, (void (*)(uint64_t, uint64_t, uint64_t))sub_10016CAAC, sub_100EE7EE8);
        swift_endAccess();

        sub_100EE87AC((uint64_t)v18, (uint64_t (*)(void))type metadata accessor for MemberSharingCircle);
      }
LABEL_29:
      swift_bridgeObjectRelease();

      return;
  }
}

void sub_100EE30C4(uint64_t *a1, uint64_t a2, int a3)
{
  uint64_t v7 = sub_10000588C((uint64_t *)&unk_10163B7C0);
  __chkstk_darwin(v7 - 8);
  uint64_t v9 = (uint64_t *)((char *)&v45 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v10 = type metadata accessor for MemberSharingCircle();
  uint64_t v11 = __chkstk_darwin(v10);
  uint64_t v14 = (char *)&v45 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = *a1;
  unint64_t v15 = a1[1];
  switch(v15 >> 62)
  {
    case 1uLL:
      if ((int)v16 != v16 >> 32) {
        goto LABEL_3;
      }
      goto LABEL_10;
    case 2uLL:
      if (*(void *)(v16 + 16) == *(void *)(v16 + 24)) {
        goto LABEL_10;
      }
      goto LABEL_3;
    case 3uLL:
      goto LABEL_10;
    default:
      if ((v15 & 0xFF000000000000) == 0)
      {
LABEL_10:
        sub_100CF7ADC();
        swift_allocError();
        *id v26 = 2;
        swift_willThrow();
        return;
      }
LABEL_3:
      uint64_t v45 = v12;
      uint64_t v47 = v11;
      Class v18 = sub_101155AC4((uint64_t)a1);
      if (v3)
      {
        __break(1u);
        JUMPOUT(0x100EE36FCLL);
      }
      Class v19 = v18;
      Class v52 = v19;
      uint64_t v46 = (uint64_t *)(a2 + 24);
      swift_beginAccess();
      uint64_t v20 = *(void *)(a2 + 24);
      id v21 = v19;
      swift_bridgeObjectRetain();
      id v22 = [(objc_class *)v21 recordID];
      Class v23 = v22;
      int v48 = a3;
      if ((v20 & 0xC000000000000001) != 0)
      {
        id v24 = v22;
        char v25 = __CocoaDictionary.contains(_:)();
        swift_bridgeObjectRelease();

        if (v25) {
          goto LABEL_17;
        }
      }
      else if (*(void *)(v20 + 16))
      {
        sub_100724354((uint64_t)v22);
        char v28 = v27;
        swift_bridgeObjectRelease();

        if (v28) {
          goto LABEL_17;
        }
      }
      else
      {
        swift_bridgeObjectRelease();
      }
      swift_beginAccess();
      uint64_t v29 = *(void *)(a2 + 16);
      swift_bridgeObjectRetain();
      id v30 = [(objc_class *)v21 recordID];
      uint64_t v31 = v30;
      if (*(void *)(v29 + 16))
      {
        sub_100724354((uint64_t)v30);
        char v33 = v32;
        swift_bridgeObjectRelease();

        if (v33)
        {
LABEL_17:

          sub_100CF7ADC();
          swift_allocError();
          *char v34 = 4;
          swift_willThrow();

          return;
        }
      }
      else
      {
        swift_bridgeObjectRelease();
      }
      if (qword_1016371D8 != -1) {
        swift_once();
      }
      uint64_t v49 = 0x7365547265646E75;
      unint64_t v50 = 0xE900000000000074;
      SynchronousCache.cachedValue<A>(key:computeBlock:)();
      swift_bridgeObjectRelease();
      if (v51 == 1)
      {
        id v35 = [(objc_class *)v21 valueStore];
        [v35 resetChangedKeys];

        id v36 = [(objc_class *)v21 encryptedValueStore];
        [v36 resetChangedKeys];
      }
      id v37 = [(objc_class *)v21 recordID];

      uint64_t v38 = *v46;
      swift_bridgeObjectRetain();
      char v39 = sub_1000F78E4(v37, v38);

      swift_bridgeObjectRelease();
      if (v39)
      {
        sub_1002C302C(v39, v9);
        char v40 = v48;
        uint64_t v41 = v47;
        (*(void (**)(uint64_t *, void, uint64_t, uint64_t))(v45 + 56))(v9, 0, 1, v47);
        sub_100EE8744((uint64_t)v9, (uint64_t)v14, (uint64_t (*)(void))type metadata accessor for MemberSharingCircle);
      }
      else
      {
        char v40 = v48;
        uint64_t v41 = v47;
        sub_100EE86DC((uint64_t)a1, (uint64_t)v14, (uint64_t (*)(void))type metadata accessor for MemberSharingCircle);
      }
      v14[*(int *)(v41 + 40)] = v40;
      sub_100EE0E4C((id *)&v52, (uint64_t)v14);
      if (sub_1002C51D4((uint64_t)a1, (uint64_t)v14))
      {
        sub_100EE87AC((uint64_t)v14, (uint64_t (*)(void))type metadata accessor for MemberSharingCircle);
        Class v42 = v52;
      }
      else
      {
        Class v43 = v52;
        id v44 = [(objc_class *)v52 recordID];
        swift_beginAccess();
        Class v42 = v43;
        sub_100EE7E1C((uint64_t)v42, (uint64_t)v44, (void (*)(uint64_t, uint64_t, uint64_t))sub_10016CAAC, sub_100EE7EE8);
        swift_endAccess();

        sub_100EE87AC((uint64_t)v14, (uint64_t (*)(void))type metadata accessor for MemberSharingCircle);
      }

      return;
  }
}

void sub_100EE370C(uint64_t *a1, uint64_t a2)
{
  uint64_t v5 = sub_10000588C((uint64_t *)&unk_101638D10);
  __chkstk_darwin(v5 - 8);
  uint64_t v7 = (uint64_t *)((char *)&v41 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v8 = type metadata accessor for OwnerSharingCircle();
  __chkstk_darwin(v8);
  uint64_t v11 = (char *)&v41 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = *a1;
  unint64_t v12 = a1[1];
  switch(v12 >> 62)
  {
    case 1uLL:
      if ((int)v13 != v13 >> 32) {
        goto LABEL_3;
      }
      goto LABEL_10;
    case 2uLL:
      if (*(void *)(v13 + 16) == *(void *)(v13 + 24)) {
        goto LABEL_10;
      }
      goto LABEL_3;
    case 3uLL:
      goto LABEL_10;
    default:
      if ((v12 & 0xFF000000000000) == 0)
      {
LABEL_10:
        sub_100CF7ADC();
        swift_allocError();
        *Class v23 = 2;
        swift_willThrow();
        return;
      }
LABEL_3:
      uint64_t v42 = v9;
      Class v15 = sub_1011553E4((uint64_t)a1);
      if (v2)
      {
        __break(1u);
        JUMPOUT(0x100EE3D34);
      }
      Class v16 = v15;
      Class v48 = v16;
      Class v43 = (uint64_t *)(a2 + 24);
      swift_beginAccess();
      uint64_t v17 = *(void *)(a2 + 24);
      Class v18 = v16;
      swift_bridgeObjectRetain();
      id v19 = [(objc_class *)v18 recordID];
      uint64_t v20 = v19;
      uint64_t v44 = v8;
      if ((v17 & 0xC000000000000001) != 0)
      {
        id v21 = v19;
        char v22 = __CocoaDictionary.contains(_:)();
        swift_bridgeObjectRelease();

        if (v22) {
          goto LABEL_17;
        }
      }
      else if (*(void *)(v17 + 16))
      {
        sub_100724354((uint64_t)v19);
        char v25 = v24;
        swift_bridgeObjectRelease();

        if (v25) {
          goto LABEL_17;
        }
      }
      else
      {
        swift_bridgeObjectRelease();
      }
      swift_beginAccess();
      uint64_t v26 = *(void *)(a2 + 16);
      swift_bridgeObjectRetain();
      id v27 = [(objc_class *)v18 recordID];
      char v28 = v27;
      if (*(void *)(v26 + 16))
      {
        sub_100724354((uint64_t)v27);
        char v30 = v29;
        swift_bridgeObjectRelease();

        if (v30)
        {
LABEL_17:

          sub_100CF7ADC();
          swift_allocError();
          *uint64_t v31 = 4;
          swift_willThrow();

          return;
        }
      }
      else
      {
        swift_bridgeObjectRelease();
      }
      if (qword_1016371D8 != -1) {
        swift_once();
      }
      uint64_t v45 = 0x7365547265646E75;
      unint64_t v46 = 0xE900000000000074;
      SynchronousCache.cachedValue<A>(key:computeBlock:)();
      swift_bridgeObjectRelease();
      if (v47 == 1)
      {
        id v32 = [(objc_class *)v18 valueStore];
        [v32 resetChangedKeys];

        id v33 = [(objc_class *)v18 encryptedValueStore];
        [v33 resetChangedKeys];
      }
      id v34 = [(objc_class *)v18 recordID];

      uint64_t v35 = *v43;
      swift_bridgeObjectRetain();
      id v36 = sub_1000F78E4(v34, v35);

      swift_bridgeObjectRelease();
      if (v36)
      {
        sub_100DF469C(v36, v7);
        uint64_t v37 = v44;
        (*(void (**)(uint64_t *, void, uint64_t, uint64_t))(v42 + 56))(v7, 0, 1, v44);
        sub_100EE8744((uint64_t)v7, (uint64_t)v11, (uint64_t (*)(void))type metadata accessor for OwnerSharingCircle);
      }
      else
      {
        uint64_t v37 = v44;
        sub_100EE86DC((uint64_t)a1, (uint64_t)v11, (uint64_t (*)(void))type metadata accessor for OwnerSharingCircle);
      }
      v11[*(int *)(v37 + 36)] = 4;
      sub_100EE1618((id *)&v48, (uint64_t)v11);
      if (sub_100DF98B0((uint64_t)a1, (uint64_t)v11))
      {
        sub_100EE87AC((uint64_t)v11, (uint64_t (*)(void))type metadata accessor for OwnerSharingCircle);
        Class v38 = v48;
      }
      else
      {
        Class v39 = v48;
        id v40 = [(objc_class *)v48 recordID];
        swift_beginAccess();
        Class v38 = v39;
        sub_100EE7E1C((uint64_t)v38, (uint64_t)v40, (void (*)(uint64_t, uint64_t, uint64_t))sub_10016CAAC, sub_100EE7EE8);
        swift_endAccess();

        sub_100EE87AC((uint64_t)v11, (uint64_t (*)(void))type metadata accessor for OwnerSharingCircle);
      }

      return;
  }
}

void sub_100EE3D44(uint64_t *a1, uint64_t a2, uint64_t *a3)
{
}

void sub_100EE3D70(uint64_t *a1, uint64_t a2, uint64_t *a3, uint64_t a4)
{
  uint64_t v9 = sub_10000588C((uint64_t *)&unk_101638D10);
  __chkstk_darwin(v9 - 8);
  uint64_t v11 = (uint64_t *)((char *)&v50 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v12 = type metadata accessor for OwnerSharingCircle();
  uint64_t v13 = __chkstk_darwin(v12);
  Class v16 = (char *)&v50 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v18 = *a1;
  unint64_t v17 = a1[1];
  switch(v17 >> 62)
  {
    case 1uLL:
      if ((int)v18 != v18 >> 32) {
        goto LABEL_3;
      }
      goto LABEL_10;
    case 2uLL:
      if (*(void *)(v18 + 16) == *(void *)(v18 + 24)) {
        goto LABEL_10;
      }
      goto LABEL_3;
    case 3uLL:
      goto LABEL_10;
    default:
      if ((v17 & 0xFF000000000000) == 0)
      {
LABEL_10:
        sub_100CF7ADC();
        swift_allocError();
        unsigned char *v28 = 2;
        swift_willThrow();
        return;
      }
LABEL_3:
      uint64_t v51 = v14;
      uint64_t v52 = a4;
      uint64_t v54 = v13;
      Class v20 = sub_1011553E4((uint64_t)a1);
      if (v4)
      {
        __break(1u);
        JUMPOUT(0x100EE43A4);
      }
      Class v21 = v20;
      Class v59 = v21;
      uint64_t v53 = (uint64_t *)(a2 + 24);
      swift_beginAccess();
      uint64_t v22 = *(void *)(a2 + 24);
      Class v23 = v21;
      swift_bridgeObjectRetain();
      id v24 = [(objc_class *)v23 recordID];
      char v25 = v24;
      uint64_t v55 = a3;
      if ((v22 & 0xC000000000000001) != 0)
      {
        id v26 = v24;
        char v27 = __CocoaDictionary.contains(_:)();
        swift_bridgeObjectRelease();

        if (v27) {
          goto LABEL_17;
        }
      }
      else if (*(void *)(v22 + 16))
      {
        sub_100724354((uint64_t)v24);
        char v30 = v29;
        swift_bridgeObjectRelease();

        if (v30) {
          goto LABEL_17;
        }
      }
      else
      {
        swift_bridgeObjectRelease();
      }
      swift_beginAccess();
      uint64_t v31 = *(void *)(a2 + 16);
      swift_bridgeObjectRetain();
      id v32 = [(objc_class *)v23 recordID];
      id v33 = v32;
      if (*(void *)(v31 + 16))
      {
        sub_100724354((uint64_t)v32);
        char v35 = v34;
        swift_bridgeObjectRelease();

        if (v35)
        {
LABEL_17:

          sub_100CF7ADC();
          swift_allocError();
          *id v36 = 4;
          swift_willThrow();

          return;
        }
      }
      else
      {
        swift_bridgeObjectRelease();
      }
      if (qword_1016371D8 != -1) {
        swift_once();
      }
      uint64_t v56 = 0x7365547265646E75;
      unint64_t v57 = 0xE900000000000074;
      SynchronousCache.cachedValue<A>(key:computeBlock:)();
      swift_bridgeObjectRelease();
      uint64_t v37 = v53;
      if (v58 == 1)
      {
        id v38 = [(objc_class *)v23 valueStore];
        [v38 resetChangedKeys];

        id v39 = [(objc_class *)v23 encryptedValueStore];
        [v39 resetChangedKeys];
      }
      id v40 = [(objc_class *)v23 recordID];

      uint64_t v41 = *v37;
      swift_bridgeObjectRetain();
      uint64_t v42 = sub_1000F78E4(v40, v41);

      swift_bridgeObjectRelease();
      if (v42)
      {
        sub_100DF469C(v42, v11);
        uint64_t v44 = v54;
        Class v43 = v55;
        (*(void (**)(uint64_t *, void, uint64_t, uint64_t))(v51 + 56))(v11, 0, 1, v54);
        sub_100EE8744((uint64_t)v11, (uint64_t)v16, (uint64_t (*)(void))type metadata accessor for OwnerSharingCircle);
      }
      else
      {
        uint64_t v44 = v54;
        Class v43 = v55;
        sub_100EE86DC((uint64_t)a1, (uint64_t)v16, (uint64_t (*)(void))type metadata accessor for OwnerSharingCircle);
      }
      uint64_t v45 = *v43;
      uint64_t v46 = *(int *)(v44 + 32);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      *(void *)&v16[v46] = v45;
      sub_100EE1618((id *)&v59, (uint64_t)v16);
      if (sub_100DF98B0((uint64_t)a1, (uint64_t)v16))
      {
        sub_100EE87AC((uint64_t)v16, (uint64_t (*)(void))type metadata accessor for OwnerSharingCircle);
        Class v47 = v59;
      }
      else
      {
        Class v48 = v59;
        id v49 = [(objc_class *)v59 recordID];
        swift_beginAccess();
        Class v47 = v48;
        sub_100EE7E1C((uint64_t)v47, (uint64_t)v49, (void (*)(uint64_t, uint64_t, uint64_t))sub_10016CAAC, sub_100EE7EE8);
        swift_endAccess();

        sub_100EE87AC((uint64_t)v16, (uint64_t (*)(void))type metadata accessor for OwnerSharingCircle);
      }

      return;
  }
}

void sub_100EE43B4(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v9 = sub_10000588C((uint64_t *)&unk_10163B890);
  __chkstk_darwin(v9 - 8);
  uint64_t v11 = (uint64_t *)((char *)&v52 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v12 = type metadata accessor for MemberPeerTrust();
  uint64_t v13 = __chkstk_darwin(v12);
  Class v16 = (char *)&v52 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v18 = *a1;
  unint64_t v17 = a1[1];
  switch(v17 >> 62)
  {
    case 1uLL:
      uint64_t v28 = (int)v18;
      uint64_t v29 = v18 >> 32;
      goto LABEL_9;
    case 2uLL:
      uint64_t v28 = *(void *)(v18 + 16);
      uint64_t v29 = *(void *)(v18 + 24);
LABEL_9:
      if (v28 == v29) {
        goto LABEL_10;
      }
      goto LABEL_3;
    case 3uLL:
      goto LABEL_10;
    default:
      if ((v17 & 0xFF000000000000) == 0)
      {
LABEL_10:
        sub_100CF7ADC();
        swift_allocError();
        *char v30 = 2;
        swift_willThrow();
        swift_bridgeObjectRelease();
        return;
      }
LABEL_3:
      uint64_t v53 = v14;
      uint64_t v54 = v13;
      uint64_t v55 = a3;
      Class v20 = sub_101154278((uint64_t)a1);
      if (v4)
      {
        __break(1u);
        JUMPOUT(0x100EE4A20);
      }
      Class v21 = v20;
      Class v61 = v21;
      uint64_t v56 = (uint64_t *)(a2 + 24);
      swift_beginAccess();
      uint64_t v22 = *(void *)(a2 + 24);
      Class v23 = v21;
      swift_bridgeObjectRetain();
      id v24 = [(objc_class *)v23 recordID];
      char v25 = v24;
      uint64_t v57 = a4;
      if ((v22 & 0xC000000000000001) != 0)
      {
        id v26 = v24;
        char v27 = __CocoaDictionary.contains(_:)();
        swift_bridgeObjectRelease();

        if (v27) {
          goto LABEL_17;
        }
      }
      else if (*(void *)(v22 + 16))
      {
        sub_100724354((uint64_t)v24);
        char v32 = v31;
        swift_bridgeObjectRelease();

        if (v32) {
          goto LABEL_17;
        }
      }
      else
      {
        swift_bridgeObjectRelease();
      }
      swift_beginAccess();
      uint64_t v33 = *(void *)(a2 + 16);
      swift_bridgeObjectRetain();
      id v34 = [(objc_class *)v23 recordID];
      char v35 = v34;
      if (*(void *)(v33 + 16))
      {
        sub_100724354((uint64_t)v34);
        char v37 = v36;
        swift_bridgeObjectRelease();

        id v38 = v56;
        if (v37)
        {
LABEL_17:

          sub_100CF7ADC();
          swift_allocError();
          *id v39 = 4;
          swift_willThrow();
          Class v40 = v61;
          swift_bridgeObjectRelease();

          return;
        }
      }
      else
      {
        swift_bridgeObjectRelease();

        id v38 = v56;
      }
      if (qword_1016371D8 != -1) {
        swift_once();
      }
      uint64_t v58 = 0x7365547265646E75;
      unint64_t v59 = 0xE900000000000074;
      SynchronousCache.cachedValue<A>(key:computeBlock:)();
      swift_bridgeObjectRelease();
      if (v60 == 1)
      {
        id v41 = [(objc_class *)v23 valueStore];
        [v41 resetChangedKeys];

        id v42 = [(objc_class *)v23 encryptedValueStore];
        [v42 resetChangedKeys];
      }
      id v43 = [(objc_class *)v23 recordID];

      uint64_t v44 = *v38;
      swift_bridgeObjectRetain();
      uint64_t v45 = sub_1000F78E4(v43, v44);

      swift_bridgeObjectRelease();
      if (v45)
      {
        sub_100EB4244(v45, v11);
        uint64_t v46 = v57;
        uint64_t v47 = v54;
        (*(void (**)(uint64_t *, void, uint64_t, uint64_t))(v53 + 56))(v11, 0, 1, v54);
        sub_100EE8744((uint64_t)v11, (uint64_t)v16, (uint64_t (*)(void))type metadata accessor for MemberPeerTrust);
      }
      else
      {
        uint64_t v46 = v57;
        uint64_t v47 = v54;
        sub_100EE86DC((uint64_t)a1, (uint64_t)v16, (uint64_t (*)(void))type metadata accessor for MemberPeerTrust);
      }
      Class v48 = &v16[*(int *)(v47 + 32)];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      *(void *)Class v48 = v55;
      *((void *)v48 + 1) = v46;
      sub_100EE1B44((id *)&v61, (uint64_t)v16);
      if (sub_100EB60B8((uint64_t)a1, (uint64_t)v16))
      {
        sub_100EE87AC((uint64_t)v16, (uint64_t (*)(void))type metadata accessor for MemberPeerTrust);
        Class v49 = v61;
      }
      else
      {
        Class v50 = v61;
        id v51 = [(objc_class *)v61 recordID];
        swift_beginAccess();
        Class v49 = v50;
        sub_100EE7E1C((uint64_t)v49, (uint64_t)v51, (void (*)(uint64_t, uint64_t, uint64_t))sub_10016CAAC, sub_100EE7EE8);
        swift_endAccess();

        sub_100EE87AC((uint64_t)v16, (uint64_t (*)(void))type metadata accessor for MemberPeerTrust);
      }
      swift_bridgeObjectRelease();

      return;
  }
}

void sub_100EE4A30(uint64_t *a1, uint64_t a2)
{
  uint64_t v5 = sub_10000588C((uint64_t *)&unk_1016607D0);
  __chkstk_darwin(v5 - 8);
  uint64_t v7 = (uint64_t *)((char *)&v41 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v8 = type metadata accessor for OwnerPeerTrust();
  __chkstk_darwin(v8);
  uint64_t v11 = (char *)&v41 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = *a1;
  unint64_t v12 = a1[1];
  switch(v12 >> 62)
  {
    case 1uLL:
      if ((int)v13 != v13 >> 32) {
        goto LABEL_3;
      }
      goto LABEL_10;
    case 2uLL:
      if (*(void *)(v13 + 16) == *(void *)(v13 + 24)) {
        goto LABEL_10;
      }
      goto LABEL_3;
    case 3uLL:
      goto LABEL_10;
    default:
      if ((v12 & 0xFF000000000000) == 0)
      {
LABEL_10:
        sub_100CF7ADC();
        swift_allocError();
        *Class v23 = 2;
        swift_willThrow();
        return;
      }
LABEL_3:
      uint64_t v42 = v9;
      Class v15 = sub_101153F00((uint64_t)a1);
      if (v2)
      {
        __break(1u);
        JUMPOUT(0x100EE5058);
      }
      Class v16 = v15;
      Class v48 = v16;
      id v43 = (uint64_t *)(a2 + 24);
      swift_beginAccess();
      uint64_t v17 = *(void *)(a2 + 24);
      uint64_t v18 = v16;
      swift_bridgeObjectRetain();
      id v19 = [(objc_class *)v18 recordID];
      Class v20 = v19;
      uint64_t v44 = v8;
      if ((v17 & 0xC000000000000001) != 0)
      {
        id v21 = v19;
        char v22 = __CocoaDictionary.contains(_:)();
        swift_bridgeObjectRelease();

        if (v22) {
          goto LABEL_17;
        }
      }
      else if (*(void *)(v17 + 16))
      {
        sub_100724354((uint64_t)v19);
        char v25 = v24;
        swift_bridgeObjectRelease();

        if (v25) {
          goto LABEL_17;
        }
      }
      else
      {
        swift_bridgeObjectRelease();
      }
      swift_beginAccess();
      uint64_t v26 = *(void *)(a2 + 16);
      swift_bridgeObjectRetain();
      id v27 = [(objc_class *)v18 recordID];
      uint64_t v28 = v27;
      if (*(void *)(v26 + 16))
      {
        sub_100724354((uint64_t)v27);
        char v30 = v29;
        swift_bridgeObjectRelease();

        if (v30)
        {
LABEL_17:

          sub_100CF7ADC();
          swift_allocError();
          *char v31 = 4;
          swift_willThrow();

          return;
        }
      }
      else
      {
        swift_bridgeObjectRelease();
      }
      if (qword_1016371D8 != -1) {
        swift_once();
      }
      uint64_t v45 = 0x7365547265646E75;
      unint64_t v46 = 0xE900000000000074;
      SynchronousCache.cachedValue<A>(key:computeBlock:)();
      swift_bridgeObjectRelease();
      if (v47 == 1)
      {
        id v32 = [(objc_class *)v18 valueStore];
        [v32 resetChangedKeys];

        id v33 = [(objc_class *)v18 encryptedValueStore];
        [v33 resetChangedKeys];
      }
      id v34 = [(objc_class *)v18 recordID];

      uint64_t v35 = *v43;
      swift_bridgeObjectRetain();
      char v36 = sub_1000F78E4(v34, v35);

      swift_bridgeObjectRelease();
      if (v36)
      {
        sub_1002A67C0(v36, v7);
        uint64_t v37 = v44;
        (*(void (**)(uint64_t *, void, uint64_t, uint64_t))(v42 + 56))(v7, 0, 1, v44);
        sub_100EE8744((uint64_t)v7, (uint64_t)v11, (uint64_t (*)(void))type metadata accessor for OwnerPeerTrust);
      }
      else
      {
        uint64_t v37 = v44;
        sub_100EE86DC((uint64_t)a1, (uint64_t)v11, (uint64_t (*)(void))type metadata accessor for OwnerPeerTrust);
      }
      v11[*(int *)(v37 + 40)] = 1;
      sub_100EE09C0((id *)&v48, (uint64_t)v11);
      if (sub_1002A8AB0((uint64_t)a1, (uint64_t)v11))
      {
        sub_100EE87AC((uint64_t)v11, (uint64_t (*)(void))type metadata accessor for OwnerPeerTrust);
        Class v38 = v48;
      }
      else
      {
        Class v39 = v48;
        id v40 = [(objc_class *)v48 recordID];
        swift_beginAccess();
        Class v38 = v39;
        sub_100EE7E1C((uint64_t)v38, (uint64_t)v40, (void (*)(uint64_t, uint64_t, uint64_t))sub_10016CAAC, sub_100EE7EE8);
        swift_endAccess();

        sub_100EE87AC((uint64_t)v11, (uint64_t (*)(void))type metadata accessor for OwnerPeerTrust);
      }

      return;
  }
}

void sub_100EE5068(uint64_t *a1)
{
  uint64_t v3 = v1;
  uint64_t v5 = sub_10000588C(&qword_10163CB68);
  __chkstk_darwin(v5 - 8);
  uint64_t v7 = (objc_class **)((char *)&v35 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v9 = *a1;
  unint64_t v8 = a1[1];
  switch(v8 >> 62)
  {
    case 1uLL:
      uint64_t v17 = (int)v9;
      uint64_t v18 = v9 >> 32;
      goto LABEL_9;
    case 2uLL:
      uint64_t v17 = *(void *)(v9 + 16);
      uint64_t v18 = *(void *)(v9 + 24);
LABEL_9:
      if (v17 == v18) {
        goto LABEL_10;
      }
      goto LABEL_3;
    case 3uLL:
      goto LABEL_10;
    default:
      if ((v8 & 0xFF000000000000) == 0)
      {
LABEL_10:
        sub_100CF7ADC();
        swift_allocError();
        *id v19 = 3;
        swift_willThrow();
        return;
      }
LABEL_3:
      Class v11 = sub_101153F00((uint64_t)a1);
      if (v2)
      {
        __break(1u);
        JUMPOUT(0x100EE5438);
      }
      Class v12 = v11;
      id v13 = [(objc_class *)v12 recordID];
      swift_beginAccess();
      uint64_t v14 = *(void *)(v3 + 24);
      if ((v14 & 0xC000000000000001) != 0)
      {
        swift_bridgeObjectRetain();
        id v15 = v13;
        char v16 = __CocoaDictionary.contains(_:)();
        swift_bridgeObjectRelease();

        if (v16)
        {
LABEL_15:
          sub_100CF7ADC();
          swift_allocError();
          *char v24 = 4;
          swift_willThrow();

          return;
        }
      }
      else if (*(void *)(v14 + 16))
      {
        swift_bridgeObjectRetain();
        sub_100724354((uint64_t)v13);
        char v21 = v20;
        swift_bridgeObjectRelease();
        if (v21) {
          goto LABEL_15;
        }
      }
      swift_beginAccess();
      if (*(void *)(*(void *)(v3 + 16) + 16))
      {
        swift_bridgeObjectRetain();
        sub_100724354((uint64_t)v13);
        char v23 = v22;
        swift_bridgeObjectRelease();
        if (v23) {
          goto LABEL_15;
        }
      }
      uint64_t v25 = type metadata accessor for CloudKitChangeSet.TombstoneInfo(0);
      uint64_t v26 = (char *)v7 + *(int *)(v25 + 20);
      id v27 = (char *)a1 + *(int *)(type metadata accessor for OwnerPeerTrust() + 20);
      uint64_t v28 = type metadata accessor for UUID();
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v28 - 8) + 16))(v26, v27, v28);
      char v29 = (char *)v7 + *(int *)(v25 + 24);
      uint64_t v30 = qword_101636958;
      id v31 = v13;
      id v32 = v12;
      if (v30 != -1) {
        swift_once();
      }
      uint64_t v33 = type metadata accessor for URL();
      uint64_t v34 = sub_100010324(v33, (uint64_t)qword_10170DAB8);
      (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v33 - 8) + 16))(v29, v34, v33);
      *uint64_t v7 = v32;
      (*(void (**)(objc_class **, void, uint64_t, uint64_t))(*(void *)(v25 - 8) + 56))(v7, 0, 1, v25);
      swift_beginAccess();
      sub_10015DBC0((uint64_t)v7, v31);
      swift_endAccess();

      return;
  }
}

void sub_100EE5448(uint64_t *a1)
{
  uint64_t v3 = v1;
  uint64_t v5 = sub_10000588C(&qword_10163CB68);
  __chkstk_darwin(v5 - 8);
  uint64_t v7 = (objc_class **)((char *)&v35 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v9 = *a1;
  unint64_t v8 = a1[1];
  switch(v8 >> 62)
  {
    case 1uLL:
      uint64_t v17 = (int)v9;
      uint64_t v18 = v9 >> 32;
      goto LABEL_9;
    case 2uLL:
      uint64_t v17 = *(void *)(v9 + 16);
      uint64_t v18 = *(void *)(v9 + 24);
LABEL_9:
      if (v17 == v18) {
        goto LABEL_10;
      }
      goto LABEL_3;
    case 3uLL:
      goto LABEL_10;
    default:
      if ((v8 & 0xFF000000000000) == 0)
      {
LABEL_10:
        sub_100CF7ADC();
        swift_allocError();
        *id v19 = 3;
        swift_willThrow();
        return;
      }
LABEL_3:
      Class v11 = sub_101154278((uint64_t)a1);
      if (v2)
      {
        __break(1u);
        JUMPOUT(0x100EE5818);
      }
      Class v12 = v11;
      id v13 = [(objc_class *)v12 recordID];
      swift_beginAccess();
      uint64_t v14 = *(void *)(v3 + 24);
      if ((v14 & 0xC000000000000001) != 0)
      {
        swift_bridgeObjectRetain();
        id v15 = v13;
        char v16 = __CocoaDictionary.contains(_:)();
        swift_bridgeObjectRelease();

        if (v16)
        {
LABEL_15:
          sub_100CF7ADC();
          swift_allocError();
          *char v24 = 4;
          swift_willThrow();

          return;
        }
      }
      else if (*(void *)(v14 + 16))
      {
        swift_bridgeObjectRetain();
        sub_100724354((uint64_t)v13);
        char v21 = v20;
        swift_bridgeObjectRelease();
        if (v21) {
          goto LABEL_15;
        }
      }
      swift_beginAccess();
      if (*(void *)(*(void *)(v3 + 16) + 16))
      {
        swift_bridgeObjectRetain();
        sub_100724354((uint64_t)v13);
        char v23 = v22;
        swift_bridgeObjectRelease();
        if (v23) {
          goto LABEL_15;
        }
      }
      uint64_t v25 = type metadata accessor for CloudKitChangeSet.TombstoneInfo(0);
      uint64_t v26 = (char *)v7 + *(int *)(v25 + 20);
      id v27 = (char *)a1 + *(int *)(type metadata accessor for MemberPeerTrust() + 20);
      uint64_t v28 = type metadata accessor for UUID();
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v28 - 8) + 16))(v26, v27, v28);
      char v29 = (char *)v7 + *(int *)(v25 + 24);
      uint64_t v30 = qword_101637160;
      id v31 = v13;
      id v32 = v12;
      if (v30 != -1) {
        swift_once();
      }
      uint64_t v33 = type metadata accessor for URL();
      uint64_t v34 = sub_100010324(v33, (uint64_t)qword_10170EE20);
      (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v33 - 8) + 16))(v29, v34, v33);
      *uint64_t v7 = v32;
      (*(void (**)(objc_class **, void, uint64_t, uint64_t))(*(void *)(v25 - 8) + 56))(v7, 0, 1, v25);
      swift_beginAccess();
      sub_10015DBC0((uint64_t)v7, v31);
      swift_endAccess();

      return;
  }
}

void sub_100EE5828(uint64_t *a1)
{
  uint64_t v3 = v1;
  uint64_t v5 = sub_10000588C(&qword_10163CB68);
  __chkstk_darwin(v5 - 8);
  uint64_t v7 = (objc_class **)((char *)v34 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v9 = *a1;
  unint64_t v8 = a1[1];
  switch(v8 >> 62)
  {
    case 1uLL:
      uint64_t v17 = (int)v9;
      uint64_t v18 = v9 >> 32;
      goto LABEL_9;
    case 2uLL:
      uint64_t v17 = *(void *)(v9 + 16);
      uint64_t v18 = *(void *)(v9 + 24);
LABEL_9:
      if (v17 == v18) {
        goto LABEL_10;
      }
      goto LABEL_3;
    case 3uLL:
      goto LABEL_10;
    default:
      if ((v8 & 0xFF000000000000) == 0)
      {
LABEL_10:
        sub_100CF7ADC();
        swift_allocError();
        *id v19 = 3;
        swift_willThrow();
        return;
      }
LABEL_3:
      Class v11 = sub_101155E34((uint64_t)a1);
      if (v2)
      {
        __break(1u);
        JUMPOUT(0x100EE5BF8);
      }
      Class v12 = v11;
      id v13 = [(objc_class *)v12 recordID];
      swift_beginAccess();
      uint64_t v14 = *(void *)(v3 + 24);
      if ((v14 & 0xC000000000000001) != 0)
      {
        swift_bridgeObjectRetain();
        id v15 = v13;
        char v16 = __CocoaDictionary.contains(_:)();
        swift_bridgeObjectRelease();

        if (v16)
        {
LABEL_15:
          sub_100CF7ADC();
          swift_allocError();
          unsigned char *v25 = 4;
          swift_willThrow();

          return;
        }
      }
      else if (*(void *)(v14 + 16))
      {
        swift_bridgeObjectRetain();
        sub_100724354((uint64_t)v13);
        char v21 = v20;
        swift_bridgeObjectRelease();
        if (v21) {
          goto LABEL_15;
        }
      }
      uint64_t v22 = v3 + 16;
      swift_beginAccess();
      if (*(void *)(*(void *)(v3 + 16) + 16))
      {
        swift_bridgeObjectRetain();
        sub_100724354((uint64_t)v13);
        char v24 = v23;
        swift_bridgeObjectRelease();
        if (v24) {
          goto LABEL_15;
        }
      }
      v34[11] = v22;
      uint64_t v26 = type metadata accessor for CloudKitChangeSet.TombstoneInfo(0);
      id v27 = (char *)v7 + *(int *)(v26 + 20);
      uint64_t v28 = (char *)a1 + *(int *)(type metadata accessor for SharingCircleSecret() + 20);
      uint64_t v29 = type metadata accessor for UUID();
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v29 - 8) + 16))(v27, v28, v29);
      v34[0] = (char *)v7 + *(int *)(v26 + 24);
      uint64_t v30 = qword_1016370C8;
      id v31 = v13;
      id v32 = v12;
      if (v30 != -1) {
        swift_once();
      }
      uint64_t v33 = type metadata accessor for URL();
      sub_100010324(v33, (uint64_t)qword_10170ECE0);
      UUID.uuidString.getter();
      URL.appendingPathComponent(_:isDirectory:)();
      swift_bridgeObjectRelease();
      *uint64_t v7 = v32;
      (*(void (**)(objc_class **, void, uint64_t, uint64_t))(*(void *)(v26 - 8) + 56))(v7, 0, 1, v26);
      swift_beginAccess();
      sub_10015DBC0((uint64_t)v7, v31);
      swift_endAccess();

      return;
  }
}

void sub_100EE5C08(uint64_t *a1)
{
  uint64_t v3 = v1;
  uint64_t v5 = sub_10000588C(&qword_10163CB68);
  __chkstk_darwin(v5 - 8);
  uint64_t v7 = (objc_class **)((char *)&v35 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v9 = *a1;
  unint64_t v8 = a1[1];
  switch(v8 >> 62)
  {
    case 1uLL:
      uint64_t v17 = (int)v9;
      uint64_t v18 = v9 >> 32;
      goto LABEL_9;
    case 2uLL:
      uint64_t v17 = *(void *)(v9 + 16);
      uint64_t v18 = *(void *)(v9 + 24);
LABEL_9:
      if (v17 == v18) {
        goto LABEL_10;
      }
      goto LABEL_3;
    case 3uLL:
      goto LABEL_10;
    default:
      if ((v8 & 0xFF000000000000) == 0)
      {
LABEL_10:
        sub_100CF7ADC();
        swift_allocError();
        *id v19 = 3;
        swift_willThrow();
        return;
      }
LABEL_3:
      Class v11 = sub_1011553E4((uint64_t)a1);
      if (v2)
      {
        __break(1u);
        JUMPOUT(0x100EE5FD8);
      }
      Class v12 = v11;
      id v13 = [(objc_class *)v12 recordID];
      swift_beginAccess();
      uint64_t v14 = *(void *)(v3 + 24);
      if ((v14 & 0xC000000000000001) != 0)
      {
        swift_bridgeObjectRetain();
        id v15 = v13;
        char v16 = __CocoaDictionary.contains(_:)();
        swift_bridgeObjectRelease();

        if (v16)
        {
LABEL_15:
          sub_100CF7ADC();
          swift_allocError();
          *char v24 = 4;
          swift_willThrow();

          return;
        }
      }
      else if (*(void *)(v14 + 16))
      {
        swift_bridgeObjectRetain();
        sub_100724354((uint64_t)v13);
        char v21 = v20;
        swift_bridgeObjectRelease();
        if (v21) {
          goto LABEL_15;
        }
      }
      swift_beginAccess();
      if (*(void *)(*(void *)(v3 + 16) + 16))
      {
        swift_bridgeObjectRetain();
        sub_100724354((uint64_t)v13);
        char v23 = v22;
        swift_bridgeObjectRelease();
        if (v23) {
          goto LABEL_15;
        }
      }
      uint64_t v25 = type metadata accessor for CloudKitChangeSet.TombstoneInfo(0);
      uint64_t v26 = (char *)v7 + *(int *)(v25 + 20);
      id v27 = (char *)a1 + *(int *)(type metadata accessor for OwnerSharingCircle() + 20);
      uint64_t v28 = type metadata accessor for UUID();
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v28 - 8) + 16))(v26, v27, v28);
      uint64_t v29 = (char *)v7 + *(int *)(v25 + 24);
      uint64_t v30 = qword_1016370F0;
      id v31 = v13;
      id v32 = v12;
      if (v30 != -1) {
        swift_once();
      }
      uint64_t v33 = type metadata accessor for URL();
      uint64_t v34 = sub_100010324(v33, (uint64_t)qword_10170ED28);
      (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v33 - 8) + 16))(v29, v34, v33);
      *uint64_t v7 = v32;
      (*(void (**)(objc_class **, void, uint64_t, uint64_t))(*(void *)(v25 - 8) + 56))(v7, 0, 1, v25);
      swift_beginAccess();
      sub_10015DBC0((uint64_t)v7, v31);
      swift_endAccess();

      return;
  }
}

void sub_100EE5FE8(uint64_t *a1)
{
  uint64_t v3 = v1;
  uint64_t v5 = sub_10000588C(&qword_10163CB68);
  __chkstk_darwin(v5 - 8);
  uint64_t v7 = (Class *)((char *)&v30 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v9 = *a1;
  unint64_t v8 = a1[1];
  switch(v8 >> 62)
  {
    case 1uLL:
      uint64_t v17 = (int)v9;
      uint64_t v18 = v9 >> 32;
      goto LABEL_9;
    case 2uLL:
      uint64_t v17 = *(void *)(v9 + 16);
      uint64_t v18 = *(void *)(v9 + 24);
LABEL_9:
      if (v17 == v18) {
        goto LABEL_10;
      }
      goto LABEL_3;
    case 3uLL:
      goto LABEL_10;
    default:
      if ((v8 & 0xFF000000000000) == 0)
      {
LABEL_10:
        sub_100CF7ADC();
        swift_allocError();
        *id v19 = 3;
        swift_willThrow();
        return;
      }
LABEL_3:
      Class v11 = sub_101154D08((uint64_t)a1);
      if (v2)
      {
        __break(1u);
        goto LABEL_20;
      }
      Class v12 = v11;
      uint64_t v31 = 0;
      id v13 = [(objc_class *)v12 recordID];
      swift_beginAccess();
      uint64_t v14 = v3[3];
      if ((v14 & 0xC000000000000001) == 0)
      {
        if (*(void *)(v14 + 16))
        {
          swift_bridgeObjectRetain();
          sub_100724354((uint64_t)v13);
          char v21 = v20;
          swift_bridgeObjectRelease();
          if (v21) {
            goto LABEL_15;
          }
        }
        goto LABEL_13;
      }
      swift_bridgeObjectRetain();
      id v15 = v13;
      char v16 = __CocoaDictionary.contains(_:)();
      swift_bridgeObjectRelease();

      if ((v16 & 1) == 0)
      {
LABEL_13:
        swift_beginAccess();
        if (*(void *)(v3[2] + 16))
        {
          swift_bridgeObjectRetain();
          sub_100724354((uint64_t)v13);
          char v23 = v22;
          swift_bridgeObjectRelease();
          if (v23) {
            goto LABEL_15;
          }
        }
        uint64_t v25 = type metadata accessor for CloudKitChangeSet.TombstoneInfo(0);
        uint64_t v26 = (char *)v7 + *(int *)(v25 + 20);
        id v27 = (char *)a1 + *(int *)(type metadata accessor for BeaconNamingRecord() + 20);
        uint64_t v28 = type metadata accessor for UUID();
        (*(void (**)(char *, char *, uint64_t))(*(void *)(v28 - 8) + 16))(v26, v27, v28);
        id v13 = v13;
        Class v12 = v12;
        uint64_t v29 = v31;
        sub_100DBF2A0();
        if (!v29)
        {
          *uint64_t v7 = v12;
          (*(void (**)(Class *, void, uint64_t, uint64_t))(*(void *)(v25 - 8) + 56))(v7, 0, 1, v25);
          swift_beginAccess();
          sub_10015DBC0((uint64_t)v7, v13);
          swift_endAccess();
          goto LABEL_18;
        }
LABEL_20:
        __break(1u);
        JUMPOUT(0x100EE6374);
      }
LABEL_15:
      sub_100CF7ADC();
      swift_allocError();
      *char v24 = 4;
      swift_willThrow();
LABEL_18:

      return;
  }
}

void sub_100EE6384(uint64_t *a1)
{
  uint64_t v3 = v1;
  uint64_t v5 = sub_10000588C(&qword_10163CB68);
  __chkstk_darwin(v5 - 8);
  uint64_t v7 = (objc_class **)((char *)&v35 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v9 = *a1;
  unint64_t v8 = a1[1];
  switch(v8 >> 62)
  {
    case 1uLL:
      uint64_t v17 = (int)v9;
      uint64_t v18 = v9 >> 32;
      goto LABEL_9;
    case 2uLL:
      uint64_t v17 = *(void *)(v9 + 16);
      uint64_t v18 = *(void *)(v9 + 24);
LABEL_9:
      if (v17 == v18) {
        goto LABEL_10;
      }
      goto LABEL_3;
    case 3uLL:
      goto LABEL_10;
    default:
      if ((v8 & 0xFF000000000000) == 0)
      {
LABEL_10:
        sub_100CF7ADC();
        swift_allocError();
        *id v19 = 3;
        swift_willThrow();
        return;
      }
LABEL_3:
      Class v11 = sub_101155754((uint64_t)a1);
      if (v2)
      {
        __break(1u);
        JUMPOUT(0x100EE6754);
      }
      Class v12 = v11;
      id v13 = [(objc_class *)v12 recordID];
      swift_beginAccess();
      uint64_t v14 = *(void *)(v3 + 24);
      if ((v14 & 0xC000000000000001) != 0)
      {
        swift_bridgeObjectRetain();
        id v15 = v13;
        char v16 = __CocoaDictionary.contains(_:)();
        swift_bridgeObjectRelease();

        if (v16)
        {
LABEL_15:
          sub_100CF7ADC();
          swift_allocError();
          *char v24 = 4;
          swift_willThrow();

          return;
        }
      }
      else if (*(void *)(v14 + 16))
      {
        swift_bridgeObjectRetain();
        sub_100724354((uint64_t)v13);
        char v21 = v20;
        swift_bridgeObjectRelease();
        if (v21) {
          goto LABEL_15;
        }
      }
      swift_beginAccess();
      if (*(void *)(*(void *)(v3 + 16) + 16))
      {
        swift_bridgeObjectRetain();
        sub_100724354((uint64_t)v13);
        char v23 = v22;
        swift_bridgeObjectRelease();
        if (v23) {
          goto LABEL_15;
        }
      }
      uint64_t v25 = type metadata accessor for CloudKitChangeSet.TombstoneInfo(0);
      uint64_t v26 = (char *)v7 + *(int *)(v25 + 20);
      id v27 = (char *)a1 + *(int *)(type metadata accessor for SharedBeaconRecord(0) + 20);
      uint64_t v28 = type metadata accessor for UUID();
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v28 - 8) + 16))(v26, v27, v28);
      uint64_t v29 = (char *)v7 + *(int *)(v25 + 24);
      uint64_t v30 = qword_1016375F0;
      id v31 = v13;
      id v32 = v12;
      if (v30 != -1) {
        swift_once();
      }
      uint64_t v33 = type metadata accessor for URL();
      uint64_t v34 = sub_100010324(v33, (uint64_t)qword_10170F760);
      (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v33 - 8) + 16))(v29, v34, v33);
      *uint64_t v7 = v32;
      (*(void (**)(objc_class **, void, uint64_t, uint64_t))(*(void *)(v25 - 8) + 56))(v7, 0, 1, v25);
      swift_beginAccess();
      sub_10015DBC0((uint64_t)v7, v31);
      swift_endAccess();

      return;
  }
}

void sub_100EE6764(uint64_t *a1)
{
  uint64_t v3 = v1;
  uint64_t v5 = sub_10000588C(&qword_10163CB68);
  __chkstk_darwin(v5 - 8);
  uint64_t v7 = (objc_class **)((char *)&v35 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v9 = *a1;
  unint64_t v8 = a1[1];
  switch(v8 >> 62)
  {
    case 1uLL:
      uint64_t v17 = (int)v9;
      uint64_t v18 = v9 >> 32;
      goto LABEL_9;
    case 2uLL:
      uint64_t v17 = *(void *)(v9 + 16);
      uint64_t v18 = *(void *)(v9 + 24);
LABEL_9:
      if (v17 == v18) {
        goto LABEL_10;
      }
      goto LABEL_3;
    case 3uLL:
      goto LABEL_10;
    default:
      if ((v8 & 0xFF000000000000) == 0)
      {
LABEL_10:
        sub_100CF7ADC();
        swift_allocError();
        *id v19 = 3;
        swift_willThrow();
        return;
      }
LABEL_3:
      Class v11 = sub_101155AC4((uint64_t)a1);
      if (v2)
      {
        __break(1u);
        JUMPOUT(0x100EE6B34);
      }
      Class v12 = v11;
      id v13 = [(objc_class *)v12 recordID];
      swift_beginAccess();
      uint64_t v14 = *(void *)(v3 + 24);
      if ((v14 & 0xC000000000000001) != 0)
      {
        swift_bridgeObjectRetain();
        id v15 = v13;
        char v16 = __CocoaDictionary.contains(_:)();
        swift_bridgeObjectRelease();

        if (v16)
        {
LABEL_15:
          sub_100CF7ADC();
          swift_allocError();
          *char v24 = 4;
          swift_willThrow();

          return;
        }
      }
      else if (*(void *)(v14 + 16))
      {
        swift_bridgeObjectRetain();
        sub_100724354((uint64_t)v13);
        char v21 = v20;
        swift_bridgeObjectRelease();
        if (v21) {
          goto LABEL_15;
        }
      }
      swift_beginAccess();
      if (*(void *)(*(void *)(v3 + 16) + 16))
      {
        swift_bridgeObjectRetain();
        sub_100724354((uint64_t)v13);
        char v23 = v22;
        swift_bridgeObjectRelease();
        if (v23) {
          goto LABEL_15;
        }
      }
      uint64_t v25 = type metadata accessor for CloudKitChangeSet.TombstoneInfo(0);
      uint64_t v26 = (char *)v7 + *(int *)(v25 + 20);
      id v27 = (char *)a1 + *(int *)(type metadata accessor for MemberSharingCircle() + 20);
      uint64_t v28 = type metadata accessor for UUID();
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v28 - 8) + 16))(v26, v27, v28);
      uint64_t v29 = (char *)v7 + *(int *)(v25 + 24);
      uint64_t v30 = qword_101636A48;
      id v31 = v13;
      id v32 = v12;
      if (v30 != -1) {
        swift_once();
      }
      uint64_t v33 = type metadata accessor for URL();
      uint64_t v34 = sub_100010324(v33, (uint64_t)qword_10170DD78);
      (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v33 - 8) + 16))(v29, v34, v33);
      *uint64_t v7 = v32;
      (*(void (**)(objc_class **, void, uint64_t, uint64_t))(*(void *)(v25 - 8) + 56))(v7, 0, 1, v25);
      swift_beginAccess();
      sub_10015DBC0((uint64_t)v7, v31);
      swift_endAccess();

      return;
  }
}

void sub_100EE6B44(uint64_t *a1)
{
  uint64_t v3 = v1;
  uint64_t v5 = sub_10000588C(&qword_10163CB68);
  __chkstk_darwin(v5 - 8);
  uint64_t v7 = (Class *)((char *)v32 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v9 = *a1;
  unint64_t v8 = a1[1];
  switch(v8 >> 62)
  {
    case 1uLL:
      uint64_t v17 = (int)v9;
      uint64_t v18 = v9 >> 32;
      goto LABEL_9;
    case 2uLL:
      uint64_t v17 = *(void *)(v9 + 16);
      uint64_t v18 = *(void *)(v9 + 24);
LABEL_9:
      if (v17 == v18) {
        goto LABEL_10;
      }
      goto LABEL_3;
    case 3uLL:
      goto LABEL_10;
    default:
      if ((v8 & 0xFF000000000000) == 0)
      {
LABEL_10:
        sub_100CF7ADC();
        swift_allocError();
        *id v19 = 3;
        swift_willThrow();
        return;
      }
LABEL_3:
      Class v11 = sub_101156514((uint64_t)a1);
      if (v2)
      {
        __break(1u);
        JUMPOUT(0x100EE6F08);
      }
      Class v12 = v11;
      id v13 = [(objc_class *)v12 recordID];
      swift_beginAccess();
      uint64_t v14 = *(void *)(v3 + 24);
      if ((v14 & 0xC000000000000001) != 0)
      {
        swift_bridgeObjectRetain();
        id v15 = v13;
        char v16 = __CocoaDictionary.contains(_:)();
        swift_bridgeObjectRelease();

        if (v16)
        {
LABEL_15:
          sub_100CF7ADC();
          swift_allocError();
          unsigned char *v25 = 4;
          swift_willThrow();
          goto LABEL_19;
        }
      }
      else if (*(void *)(v14 + 16))
      {
        swift_bridgeObjectRetain();
        sub_100724354((uint64_t)v13);
        char v21 = v20;
        swift_bridgeObjectRelease();
        if (v21) {
          goto LABEL_15;
        }
      }
      uint64_t v22 = v3 + 16;
      swift_beginAccess();
      if (*(void *)(*(void *)(v3 + 16) + 16))
      {
        swift_bridgeObjectRetain();
        sub_100724354((uint64_t)v13);
        char v24 = v23;
        swift_bridgeObjectRelease();
        if (v24) {
          goto LABEL_15;
        }
      }
      v32[11] = v22;
      uint64_t v26 = type metadata accessor for CloudKitChangeSet.TombstoneInfo(0);
      id v27 = (char *)v7 + *(int *)(v26 + 20);
      uint64_t v28 = (char *)a1 + *(int *)(type metadata accessor for NotifyWhenFoundRecord() + 20);
      uint64_t v29 = type metadata accessor for UUID();
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v29 - 8) + 16))(v27, v28, v29);
      uint64_t v30 = qword_101636B38;
      id v13 = v13;
      Class v12 = v12;
      if (v30 != -1) {
        swift_once();
      }
      uint64_t v31 = type metadata accessor for URL();
      sub_100010324(v31, (uint64_t)qword_10170DF58);
      UUID.uuidString.getter();
      URL.appendingPathComponent(_:isDirectory:)();
      swift_bridgeObjectRelease();
      *uint64_t v7 = v12;
      (*(void (**)(Class *, void, uint64_t, uint64_t))(*(void *)(v26 - 8) + 56))(v7, 0, 1, v26);
      swift_beginAccess();
      sub_10015DBC0((uint64_t)v7, v13);
      swift_endAccess();
LABEL_19:

      return;
  }
}

void sub_100EE6F18(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = v3;
  uint64_t v8 = sub_10000588C(&qword_10163CB68);
  __chkstk_darwin(v8 - 8);
  uint64_t v10 = (void **)((char *)v33 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v11 = (*(uint64_t (**)(uint64_t, uint64_t))(a3 + 24))(a2, a3);
  uint64_t v13 = v11;
  unint64_t v14 = v12;
  switch(v12 >> 62)
  {
    case 1uLL:
      uint64_t v35 = v4;
      sub_10001CFB8(v11, v12);
      if ((int)v13 != v13 >> 32) {
        goto LABEL_7;
      }
      goto LABEL_11;
    case 2uLL:
      uint64_t v35 = v4;
      uint64_t v16 = *(void *)(v11 + 16);
      uint64_t v15 = *(void *)(v11 + 24);
      sub_10001CFB8(v11, v12);
      if (v16 != v15) {
        goto LABEL_7;
      }
      goto LABEL_11;
    case 3uLL:
      sub_10001CFB8(v11, v12);
      goto LABEL_11;
    default:
      uint64_t v35 = v4;
      sub_10001CFB8(v11, v12);
      if ((v14 & 0xFF000000000000) == 0)
      {
LABEL_11:
        sub_100CF7ADC();
        swift_allocError();
        *char v21 = 3;
        swift_willThrow();
        return;
      }
LABEL_7:
      id v34 = (id)(*(uint64_t (**)(uint64_t, uint64_t))(a3 + 40))(a2, a3);
      id v17 = [v34 recordID];
      swift_beginAccess();
      uint64_t v18 = *(void *)(v5 + 24);
      if ((v18 & 0xC000000000000001) != 0)
      {
        swift_bridgeObjectRetain();
        id v19 = v17;
        char v20 = __CocoaDictionary.contains(_:)();
        swift_bridgeObjectRelease();

        if (v20)
        {
LABEL_16:
          sub_100CF7ADC();
          swift_allocError();
          unsigned char *v27 = 4;
          swift_willThrow();

          return;
        }
      }
      else if (*(void *)(v18 + 16))
      {
        swift_bridgeObjectRetain();
        sub_100724354((uint64_t)v17);
        char v23 = v22;
        swift_bridgeObjectRelease();
        if (v23) {
          goto LABEL_16;
        }
      }
      char v24 = (void *)(v5 + 16);
      swift_beginAccess();
      if (*(void *)(*(void *)(v5 + 16) + 16))
      {
        swift_bridgeObjectRetain();
        sub_100724354((uint64_t)v17);
        char v26 = v25;
        swift_bridgeObjectRelease();
        if (v26) {
          goto LABEL_16;
        }
      }
      uint64_t v28 = *(void *)(a3 + 8);
      v33[1] = v24;
      uint64_t v29 = *(void (**)(uint64_t, uint64_t))(v28 + 32);
      uint64_t v30 = type metadata accessor for CloudKitChangeSet.TombstoneInfo(0);
      v33[0] = v17;
      id v31 = v34;
      v29(a2, v28);
      (*(void (**)(uint64_t, uint64_t))(v28 + 40))(a2, v28);
      *uint64_t v10 = v31;
      (*(void (**)(void *, void, uint64_t, uint64_t))(*(void *)(v30 - 8) + 56))(v10, 0, 1, v30);
      swift_beginAccess();
      id v32 = v33[0];
      sub_10015DBC0((uint64_t)v10, v33[0]);
      swift_endAccess();

      return;
  }
}

uint64_t type metadata accessor for ChangeSetAdaptor()
{
  return self;
}

uint64_t sub_100EE7314(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_100EE7328);
}

uint64_t sub_100EE7328(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for UUID();
  uint64_t v7 = *(void *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == a2)
  {
    uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    return v8(a1, a2, v6);
  }
  else
  {
    unint64_t v10 = *(void *)(a1 + *(int *)(a3 + 20));
    if (v10 >= 0xFFFFFFFF) {
      LODWORD(v10) = -1;
    }
    return (v10 + 1);
  }
}

uint64_t sub_100EE73E8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_100EE73FC);
}

uint64_t sub_100EE73FC(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result = type metadata accessor for UUID();
  uint64_t v9 = *(void *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    unint64_t v10 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    return v10(a1, a2, a2, result);
  }
  else
  {
    *(void *)(a1 + *(int *)(a4 + 20)) = (a2 - 1);
  }
  return result;
}

uint64_t type metadata accessor for CloudKitChangeSet(uint64_t a1)
{
  return sub_1000F4EA4(a1, qword_101662938);
}

void **sub_100EE74D8(void **a1, void **a2, uint64_t a3)
{
  int v3 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  uint64_t v4 = (char *)*a2;
  *a1 = *a2;
  if ((v3 & 0x20000) != 0)
  {
    uint64_t v7 = (void **)&v4[(v3 + 16) & ~(unint64_t)v3];
    swift_retain();
  }
  else
  {
    uint64_t v7 = a1;
    uint64_t v8 = *(int *)(a3 + 20);
    uint64_t v9 = (char *)a1 + v8;
    unint64_t v10 = (char *)a2 + v8;
    uint64_t v11 = type metadata accessor for UUID();
    unint64_t v12 = *(void (**)(char *, char *, uint64_t))(*(void *)(v11 - 8) + 16);
    uint64_t v13 = v4;
    v12(v9, v10, v11);
    uint64_t v14 = *(int *)(a3 + 24);
    uint64_t v15 = (char *)v7 + v14;
    uint64_t v16 = (char *)a2 + v14;
    uint64_t v17 = type metadata accessor for URL();
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v17 - 8) + 16))(v15, v16, v17);
  }
  return v7;
}

uint64_t sub_100EE7610(id *a1, uint64_t a2)
{
  uint64_t v4 = (char *)a1 + *(int *)(a2 + 20);
  uint64_t v5 = type metadata accessor for UUID();
  (*(void (**)(char *, uint64_t))(*(void *)(v5 - 8) + 8))(v4, v5);
  uint64_t v6 = (char *)a1 + *(int *)(a2 + 24);
  uint64_t v7 = type metadata accessor for URL();
  uint64_t v8 = *(uint64_t (**)(char *, uint64_t))(*(void *)(v7 - 8) + 8);

  return v8(v6, v7);
}

void **sub_100EE76D0(void **a1, void **a2, uint64_t a3)
{
  uint64_t v6 = *a2;
  *a1 = *a2;
  uint64_t v7 = *(int *)(a3 + 20);
  uint64_t v8 = (char *)a1 + v7;
  uint64_t v9 = (char *)a2 + v7;
  uint64_t v10 = type metadata accessor for UUID();
  uint64_t v11 = *(void (**)(char *, char *, uint64_t))(*(void *)(v10 - 8) + 16);
  id v12 = v6;
  v11(v8, v9, v10);
  uint64_t v13 = *(int *)(a3 + 24);
  uint64_t v14 = (char *)a1 + v13;
  uint64_t v15 = (char *)a2 + v13;
  uint64_t v16 = type metadata accessor for URL();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v16 - 8) + 16))(v14, v15, v16);
  return a1;
}

void **sub_100EE77BC(void **a1, void **a2, uint64_t a3)
{
  uint64_t v6 = *a2;
  uint64_t v7 = *a1;
  *a1 = *a2;
  id v8 = v6;

  uint64_t v9 = *(int *)(a3 + 20);
  uint64_t v10 = (char *)a1 + v9;
  uint64_t v11 = (char *)a2 + v9;
  uint64_t v12 = type metadata accessor for UUID();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v12 - 8) + 24))(v10, v11, v12);
  uint64_t v13 = *(int *)(a3 + 24);
  uint64_t v14 = (char *)a1 + v13;
  uint64_t v15 = (char *)a2 + v13;
  uint64_t v16 = type metadata accessor for URL();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v16 - 8) + 24))(v14, v15, v16);
  return a1;
}

void *sub_100EE789C(void *a1, void *a2, uint64_t a3)
{
  *a1 = *a2;
  uint64_t v6 = *(int *)(a3 + 20);
  uint64_t v7 = (char *)a1 + v6;
  id v8 = (char *)a2 + v6;
  uint64_t v9 = type metadata accessor for UUID();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v9 - 8) + 32))(v7, v8, v9);
  uint64_t v10 = *(int *)(a3 + 24);
  uint64_t v11 = (char *)a1 + v10;
  uint64_t v12 = (char *)a2 + v10;
  uint64_t v13 = type metadata accessor for URL();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v13 - 8) + 32))(v11, v12, v13);
  return a1;
}

void **sub_100EE7970(void **a1, void **a2, uint64_t a3)
{
  uint64_t v6 = *a1;
  *a1 = *a2;

  uint64_t v7 = *(int *)(a3 + 20);
  id v8 = (char *)a1 + v7;
  uint64_t v9 = (char *)a2 + v7;
  uint64_t v10 = type metadata accessor for UUID();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v10 - 8) + 40))(v8, v9, v10);
  uint64_t v11 = *(int *)(a3 + 24);
  uint64_t v12 = (char *)a1 + v11;
  uint64_t v13 = (char *)a2 + v11;
  uint64_t v14 = type metadata accessor for URL();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v14 - 8) + 40))(v12, v13, v14);
  return a1;
}

uint64_t sub_100EE7A4C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_100EE7A60);
}

uint64_t sub_100EE7A60(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  if (a2 == 0x7FFFFFFF)
  {
    uint64_t v4 = *a1;
    if ((unint64_t)*a1 >= 0xFFFFFFFF) {
      LODWORD(v4) = -1;
    }
    return (v4 + 1);
  }
  else
  {
    uint64_t v8 = type metadata accessor for UUID();
    uint64_t v9 = *(void *)(v8 - 8);
    if (*(_DWORD *)(v9 + 84) == a2)
    {
      uint64_t v10 = v8;
      uint64_t v11 = (char *)a1 + *(int *)(a3 + 20);
      uint64_t v12 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v9 + 48);
      return v12(v11, a2, v10);
    }
    else
    {
      uint64_t v13 = type metadata accessor for URL();
      uint64_t v14 = *(uint64_t (**)(char *, uint64_t, uint64_t))(*(void *)(v13 - 8) + 48);
      uint64_t v15 = v13;
      uint64_t v16 = (char *)a1 + *(int *)(a3 + 24);
      return v14(v16, a2, v15);
    }
  }
}

uint64_t sub_100EE7B8C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_100EE7BA0);
}

void *sub_100EE7BA0(void *result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *uint64_t result = (a2 - 1);
  }
  else
  {
    uint64_t v8 = type metadata accessor for UUID();
    uint64_t v9 = *(void *)(v8 - 8);
    if (*(_DWORD *)(v9 + 84) == a3)
    {
      uint64_t v10 = v8;
      uint64_t v11 = (char *)v5 + *(int *)(a4 + 20);
      uint64_t v12 = *(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(v9 + 56);
      return (void *)v12(v11, a2, a2, v10);
    }
    else
    {
      uint64_t v13 = type metadata accessor for URL();
      uint64_t v14 = *(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v13 - 8) + 56);
      uint64_t v15 = v13;
      uint64_t v16 = (char *)v5 + *(int *)(a4 + 24);
      return (void *)v14(v16, a2, a2, v15);
    }
  }
  return result;
}

uint64_t type metadata accessor for CloudKitChangeSet.TombstoneInfo(uint64_t a1)
{
  return sub_1000F4EA4(a1, qword_1016629D0);
}

uint64_t sub_100EE7CEC()
{
  uint64_t result = type metadata accessor for UUID();
  if (v1 <= 0x3F)
  {
    uint64_t result = type metadata accessor for URL();
    if (v2 <= 0x3F)
    {
      swift_initStructMetadata();
      return 0;
    }
  }
  return result;
}

uint64_t sub_100EE7DC4(uint64_t a1, uint64_t a2)
{
  return sub_100EE7E1C(a1, a2, (void (*)(uint64_t, uint64_t, uint64_t))sub_10016CAAC, sub_100EE7EE8);
}

uint64_t sub_100EE7DF0(uint64_t a1, uint64_t a2)
{
  return sub_100EE7E1C(a1, a2, (void (*)(uint64_t, uint64_t, uint64_t))sub_100172968, sub_100EE8390);
}

uint64_t sub_100EE7E1C(uint64_t a1, uint64_t a2, void (*a3)(uint64_t, uint64_t, uint64_t), uint64_t (*a4)(uint64_t, uint64_t))
{
  uint64_t v6 = v4;
  uint64_t v9 = *v4;
  if ((*v4 & 0xC000000000000001) != 0)
  {
    if (v9 < 0) {
      uint64_t v11 = *v4;
    }
    else {
      uint64_t v11 = v9 & 0xFFFFFFFFFFFFFF8;
    }
    uint64_t result = __CocoaDictionary.count.getter();
    if (__OFADD__(result, 1))
    {
      __break(1u);
      return result;
    }
    *uint64_t v6 = a4(v11, result + 1);
  }
  uint64_t isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v14 = *v6;
  *uint64_t v6 = 0x8000000000000000;
  a3(a1, a2, isUniquelyReferenced_nonNull_native);
  *uint64_t v6 = v14;

  return swift_bridgeObjectRelease();
}

Swift::Int sub_100EE7EE8(uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    sub_10000588C(&qword_101660748);
    uint64_t v2 = static _DictionaryStorage.convert(_:capacity:)();
    uint64_t v18 = v2;
    __CocoaDictionary.makeIterator()();
    uint64_t v3 = __CocoaDictionary.Iterator.next()();
    if (v3)
    {
      uint64_t v4 = v3;
      sub_10001D4B0(0, &qword_10163CB60);
      do
      {
        swift_dynamicCast();
        sub_10001D4B0(0, (unint64_t *)&qword_10163AE60);
        swift_dynamicCast();
        uint64_t v2 = v18;
        unint64_t v12 = *(void *)(v18 + 16);
        if (*(void *)(v18 + 24) <= v12)
        {
          sub_100E67CD0(v12 + 1, 1);
          uint64_t v2 = v18;
        }
        Swift::Int result = NSObject._rawHashValue(seed:)(*(void *)(v2 + 40));
        uint64_t v6 = v2 + 64;
        uint64_t v7 = -1 << *(unsigned char *)(v2 + 32);
        unint64_t v8 = result & ~v7;
        unint64_t v9 = v8 >> 6;
        if (((-1 << v8) & ~*(void *)(v2 + 64 + 8 * (v8 >> 6))) != 0)
        {
          unint64_t v10 = __clz(__rbit64((-1 << v8) & ~*(void *)(v2 + 64 + 8 * (v8 >> 6)))) | v8 & 0x7FFFFFFFFFFFFFC0;
        }
        else
        {
          char v13 = 0;
          unint64_t v14 = (unint64_t)(63 - v7) >> 6;
          do
          {
            if (++v9 == v14 && (v13 & 1) != 0)
            {
              __break(1u);
              return result;
            }
            BOOL v15 = v9 == v14;
            if (v9 == v14) {
              unint64_t v9 = 0;
            }
            v13 |= v15;
            uint64_t v16 = *(void *)(v6 + 8 * v9);
          }
          while (v16 == -1);
          unint64_t v10 = __clz(__rbit64(~v16)) + (v9 << 6);
        }
        *(void *)(v6 + ((v10 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v10;
        uint64_t v11 = 8 * v10;
        *(void *)(*(void *)(v2 + 48) + v11) = v17;
        *(void *)(*(void *)(v2 + 56) + v11) = v4;
        ++*(void *)(v2 + 16);
        uint64_t v4 = __CocoaDictionary.Iterator.next()();
      }
      while (v4);
    }
    swift_release();
  }
  else
  {
    swift_unknownObjectRelease();
    return (Swift::Int)_swiftEmptyDictionarySingleton;
  }
  return v2;
}

Swift::Int sub_100EE813C(uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    sub_10000588C(&qword_1016608E0);
    uint64_t v2 = static _DictionaryStorage.convert(_:capacity:)();
    uint64_t v18 = v2;
    __CocoaDictionary.makeIterator()();
    uint64_t v3 = __CocoaDictionary.Iterator.next()();
    if (v3)
    {
      uint64_t v4 = v3;
      sub_10001D4B0(0, (unint64_t *)&unk_10165F040);
      do
      {
        swift_dynamicCast();
        sub_10001D4B0(0, &qword_101662A10);
        swift_dynamicCast();
        uint64_t v2 = v18;
        unint64_t v12 = *(void *)(v18 + 16);
        if (*(void *)(v18 + 24) <= v12)
        {
          sub_100E790B8(v12 + 1, 1);
          uint64_t v2 = v18;
        }
        Swift::Int result = NSObject._rawHashValue(seed:)(*(void *)(v2 + 40));
        uint64_t v6 = v2 + 64;
        uint64_t v7 = -1 << *(unsigned char *)(v2 + 32);
        unint64_t v8 = result & ~v7;
        unint64_t v9 = v8 >> 6;
        if (((-1 << v8) & ~*(void *)(v2 + 64 + 8 * (v8 >> 6))) != 0)
        {
          unint64_t v10 = __clz(__rbit64((-1 << v8) & ~*(void *)(v2 + 64 + 8 * (v8 >> 6)))) | v8 & 0x7FFFFFFFFFFFFFC0;
        }
        else
        {
          char v13 = 0;
          unint64_t v14 = (unint64_t)(63 - v7) >> 6;
          do
          {
            if (++v9 == v14 && (v13 & 1) != 0)
            {
              __break(1u);
              return result;
            }
            BOOL v15 = v9 == v14;
            if (v9 == v14) {
              unint64_t v9 = 0;
            }
            v13 |= v15;
            uint64_t v16 = *(void *)(v6 + 8 * v9);
          }
          while (v16 == -1);
          unint64_t v10 = __clz(__rbit64(~v16)) + (v9 << 6);
        }
        *(void *)(v6 + ((v10 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v10;
        uint64_t v11 = 8 * v10;
        *(void *)(*(void *)(v2 + 48) + v11) = v17;
        *(void *)(*(void *)(v2 + 56) + v11) = v4;
        ++*(void *)(v2 + 16);
        uint64_t v4 = __CocoaDictionary.Iterator.next()();
      }
      while (v4);
    }
    swift_release();
  }
  else
  {
    swift_unknownObjectRelease();
    return (Swift::Int)&_swiftEmptyDictionarySingleton;
  }
  return v2;
}

Swift::Int sub_100EE8390(uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    sub_10000588C(&qword_1016608C8);
    uint64_t v2 = static _DictionaryStorage.convert(_:capacity:)();
    uint64_t v18 = v2;
    __CocoaDictionary.makeIterator()();
    uint64_t v3 = __CocoaDictionary.Iterator.next()();
    if (v3)
    {
      uint64_t v4 = v3;
      sub_10001D4B0(0, (unint64_t *)&qword_1016608B0);
      do
      {
        swift_dynamicCast();
        sub_10001D4B0(0, &qword_10163BA40);
        swift_dynamicCast();
        uint64_t v2 = v18;
        unint64_t v12 = *(void *)(v18 + 16);
        if (*(void *)(v18 + 24) <= v12)
        {
          sub_100E7970C(v12 + 1, 1);
          uint64_t v2 = v18;
        }
        Swift::Int result = NSObject._rawHashValue(seed:)(*(void *)(v2 + 40));
        uint64_t v6 = v2 + 64;
        uint64_t v7 = -1 << *(unsigned char *)(v2 + 32);
        unint64_t v8 = result & ~v7;
        unint64_t v9 = v8 >> 6;
        if (((-1 << v8) & ~*(void *)(v2 + 64 + 8 * (v8 >> 6))) != 0)
        {
          unint64_t v10 = __clz(__rbit64((-1 << v8) & ~*(void *)(v2 + 64 + 8 * (v8 >> 6)))) | v8 & 0x7FFFFFFFFFFFFFC0;
        }
        else
        {
          char v13 = 0;
          unint64_t v14 = (unint64_t)(63 - v7) >> 6;
          do
          {
            if (++v9 == v14 && (v13 & 1) != 0)
            {
              __break(1u);
              return result;
            }
            BOOL v15 = v9 == v14;
            if (v9 == v14) {
              unint64_t v9 = 0;
            }
            v13 |= v15;
            uint64_t v16 = *(void *)(v6 + 8 * v9);
          }
          while (v16 == -1);
          unint64_t v10 = __clz(__rbit64(~v16)) + (v9 << 6);
        }
        *(void *)(v6 + ((v10 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v10;
        uint64_t v11 = 8 * v10;
        *(void *)(*(void *)(v2 + 48) + v11) = v17;
        *(void *)(*(void *)(v2 + 56) + v11) = v4;
        ++*(void *)(v2 + 16);
        uint64_t v4 = __CocoaDictionary.Iterator.next()();
      }
      while (v4);
    }
    swift_release();
  }
  else
  {
    swift_unknownObjectRelease();
    return (Swift::Int)_swiftEmptyDictionarySingleton;
  }
  return v2;
}

uint64_t sub_100EE85E4(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_100EE862C(unint64_t *a1, uint64_t *a2, void (*a3)(void))
{
  uint64_t result = *a1;
  if (!result)
  {
    sub_10000592C(a2);
    sub_100EE85E4(&qword_10163B040, (void (*)(uint64_t))&type metadata accessor for UUID);
    a3();
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_100EE86DC(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

uint64_t sub_100EE8744(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 32))(a2, a1, v5);
  return a2;
}

uint64_t sub_100EE87AC(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

unsigned char *storeEnumTagSinglePayload for CloudKitChangeSet.Error(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 4 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 4) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFC) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFB)
  {
    unsigned int v6 = ((a2 - 252) >> 8) + 1;
    *uint64_t result = a2 + 4;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x100EE88D8);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 4;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for CloudKitChangeSet.Error()
{
  return &type metadata for CloudKitChangeSet.Error;
}

unint64_t sub_100EE8914()
{
  unint64_t result = qword_101662A18;
  if (!qword_101662A18)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_101662A18);
  }
  return result;
}

uint64_t sub_100EE8968(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v3[65] = a3;
  v3[63] = a1;
  v3[64] = a2;
  uint64_t v4 = type metadata accessor for UUID();
  v3[66] = v4;
  uint64_t v5 = *(void *)(v4 - 8);
  v3[67] = v5;
  v3[68] = *(void *)(v5 + 64);
  v3[69] = swift_task_alloc();
  v3[70] = swift_task_alloc();
  return _swift_task_switch(sub_100EE8A44, 0, 0);
}

uint64_t sub_100EE8A44()
{
  uint64_t v1 = v0[65];
  uint64_t v2 = v0[63];
  uint64_t v3 = v0[64];
  uint64_t v4 = type metadata accessor for OwnerSharingCircle();
  v0[71] = v4;
  uint64_t v5 = *(void *)(v2 + *(int *)(v4 + 32));
  v0[72] = *(void *)(v5 + 16);
  uint64_t v6 = swift_bridgeObjectRetain();
  uint64_t v7 = sub_100EEA9EC(v6);
  swift_bridgeObjectRelease();
  v0[73] = *(void *)(v7 + 16);
  swift_release();
  v0[62] = v5;
  uint64_t v8 = swift_task_alloc();
  v0[74] = v8;
  *(void *)(v8 + 16) = v3;
  *(void *)(v8 + 24) = v1;
  swift_bridgeObjectRetain();
  unint64_t v9 = (void *)swift_task_alloc();
  v0[75] = v9;
  uint64_t v10 = sub_10000588C(&qword_10165F368);
  uint64_t v11 = sub_100062734(&qword_101662A80, &qword_10165F368);
  *unint64_t v9 = v0;
  v9[1] = sub_100EE8BB8;
  return Sequence.asyncFilter(_:)(&unk_101662A78, v8, v10, v11);
}

uint64_t sub_100EE8BB8(uint64_t a1)
{
  *(void *)(*(void *)v1 + 608) = a1;
  swift_task_dealloc();
  swift_task_dealloc();
  swift_bridgeObjectRelease();
  return _swift_task_switch(sub_100EE8CFC, 0, 0);
}

uint64_t sub_100EE8CFC()
{
  uint64_t v1 = *(void *)(v0 + 568);
  uint64_t v2 = *(void *)(v0 + 512);
  *(void *)(v0 + 616) = *(void *)(*(void *)(v0 + 608) + 16);
  swift_bridgeObjectRelease();
  *(_DWORD *)(v0 + 656) = *(_DWORD *)(v1 + 24);
  return _swift_task_switch(sub_100EE8D7C, v2, 0);
}

uint64_t sub_100EE8D7C()
{
  uint64_t v1 = *(void *)(v0 + 552);
  uint64_t v2 = *(void *)(v0 + 536);
  uint64_t v3 = *(void *)(v0 + 528);
  uint64_t v4 = *(void *)(v0 + 512);
  uint64_t v5 = *(void *)(v0 + 504) + *(int *)(v0 + 656);
  *(void *)(v0 + 624) = *(void *)(v4 + 136);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v2 + 16))(v1, v5, v3);
  unint64_t v6 = (*(unsigned __int8 *)(v2 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  uint64_t v7 = swift_allocObject();
  *(void *)(v0 + 632) = v7;
  *(void *)(v7 + 16) = v4;
  (*(void (**)(unint64_t, uint64_t, uint64_t))(v2 + 32))(v7 + v6, v1, v3);
  swift_retain();
  return _swift_task_switch(sub_100EE8E7C, 0, 0);
}

uint64_t sub_100EE8E7C()
{
  uint64_t v1 = v0[79];
  uint64_t v2 = v0[78];
  uint64_t v3 = (void *)swift_task_alloc();
  v0[80] = v3;
  void v3[2] = v2;
  v3[3] = sub_100EF0C70;
  v3[4] = v1;
  uint64_t v4 = (void *)swift_task_alloc();
  v0[81] = v4;
  *uint64_t v4 = v0;
  v4[1] = sub_100EE8F88;
  uint64_t v5 = v0[70];
  uint64_t v6 = v0[66];
  return withCheckedContinuation<A>(isolation:function:_:)(v5, 0, 0, 0xD000000000000012, 0x80000001013F1870, sub_1009C5E9C, v3, v6);
}

uint64_t sub_100EE8F88()
{
  swift_task_dealloc();
  swift_release();
  swift_task_dealloc();
  return _swift_task_switch(sub_100EE90BC, 0, 0);
}

uint64_t sub_100EE90BC()
{
  uint64_t v1 = v0[77];
  uint64_t v2 = v0[73];
  uint64_t v3 = v0[72];
  uint64_t v4 = v0[70];
  uint64_t v5 = v0[67];
  uint64_t v6 = v0[66];
  uint64_t v7 = UUID.uuidString.getter();
  uint64_t v9 = v8;
  (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v4, v6);
  sub_10000588C(&qword_101639418);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_101347580;
  *(void *)(inited + 32) = 0xD000000000000011;
  *(void *)(inited + 40) = 0x8000000101419EC0;
  *(unsigned char *)(inited + 48) = 0;
  *(_WORD *)(inited + 88) = 0;
  strcpy((char *)(inited + 96), "isFromRequest");
  *(_WORD *)(inited + 110) = -4864;
  *(unsigned char *)(inited + 112) = 0;
  *(_WORD *)(inited + 152) = 0;
  *(void *)(inited + 160) = 0x6563637553736177;
  *(void *)(inited + 168) = 0xEA00000000007373;
  *(unsigned char *)(inited + 176) = 1;
  *(_WORD *)(inited + 216) = 0;
  *(void *)(inited + 224) = 0xD000000000000011;
  *(void *)(inited + 232) = 0x8000000101419EE0;
  *(void *)(inited + 264) = &type metadata for String;
  *(void *)(inited + 272) = sub_1000336D4();
  *(void *)(inited + 240) = v7;
  *(void *)(inited + 248) = v9;
  *(_WORD *)(inited + 280) = 1;
  *(void *)(inited + 288) = 0xD000000000000013;
  *(void *)(inited + 296) = 0x8000000101419F00;
  *(void *)(inited + 328) = &type metadata for Int;
  unint64_t v11 = sub_100033838();
  *(void *)(inited + 336) = v11;
  *(void *)(inited + 304) = v2;
  *(_WORD *)(inited + 344) = 2;
  *(void *)(inited + 352) = 0xD000000000000010;
  *(void *)(inited + 360) = 0x8000000101419F20;
  *(void *)(inited + 392) = &type metadata for Int;
  *(void *)(inited + 400) = v11;
  *(void *)(inited + 368) = v3;
  *(_WORD *)(inited + 408) = 2;
  *(void *)(inited + 416) = 0xD000000000000011;
  *(void *)(inited + 424) = 0x8000000101419F40;
  *(void *)(inited + 456) = &type metadata for Int;
  *(void *)(inited + 464) = v11;
  *(void *)(inited + 432) = v1;
  *(_WORD *)(inited + 472) = 2;
  unint64_t v12 = sub_10092D7A8(inited);
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v13 = (uint64_t (*)(unint64_t))v0[1];
  return v13(v12);
}

uint64_t sub_100EE92E4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v3[3] = a2;
  v3[4] = a3;
  void v3[2] = a1;
  v3[5] = type metadata accessor for PeerCommunicationIdentifier();
  v3[6] = swift_task_alloc();
  uint64_t v5 = type metadata accessor for UUID();
  v3[7] = v5;
  uint64_t v6 = *(void *)(v5 - 8);
  v3[8] = v6;
  v3[9] = *(void *)(v6 + 64);
  v3[10] = swift_task_alloc();
  v3[11] = sub_10000588C((uint64_t *)&unk_1016607D0);
  v3[12] = swift_task_alloc();
  uint64_t v7 = type metadata accessor for OwnerPeerTrust();
  v3[13] = v7;
  v3[14] = *(void *)(v7 - 8);
  v3[15] = swift_task_alloc();
  return _swift_task_switch(sub_100EE9474, a2, 0);
}

uint64_t sub_100EE9474()
{
  uint64_t v1 = v0[10];
  uint64_t v2 = v0[7];
  uint64_t v3 = v0[8];
  uint64_t v4 = v0[2];
  uint64_t v5 = v0[3];
  v0[16] = *(void *)(v5 + 136);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v3 + 16))(v1, v4, v2);
  unint64_t v6 = (*(unsigned __int8 *)(v3 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  uint64_t v7 = swift_allocObject();
  v0[17] = v7;
  *(void *)(v7 + 16) = v5;
  (*(void (**)(unint64_t, uint64_t, uint64_t))(v3 + 32))(v7 + v6, v1, v2);
  swift_retain();
  return _swift_task_switch(sub_100EE9564, 0, 0);
}

uint64_t sub_100EE9564()
{
  uint64_t v2 = v0[16];
  uint64_t v1 = v0[17];
  uint64_t v3 = (void *)swift_task_alloc();
  v0[18] = v3;
  void v3[2] = v2;
  v3[3] = sub_100EF0C8C;
  v3[4] = v1;
  uint64_t v4 = (void *)swift_task_alloc();
  v0[19] = v4;
  *uint64_t v4 = v0;
  v4[1] = sub_100EE9668;
  uint64_t v6 = v0[11];
  uint64_t v5 = v0[12];
  return withCheckedContinuation<A>(isolation:function:_:)(v5, 0, 0, 0xD000000000000012, 0x80000001013F1870, sub_100090E94, v3, v6);
}

uint64_t sub_100EE9668()
{
  swift_task_dealloc();
  swift_release();
  swift_task_dealloc();
  return _swift_task_switch(sub_100EE979C, 0, 0);
}

uint64_t sub_100EE979C()
{
  uint64_t v1 = v0[13];
  uint64_t v2 = v0[12];
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v0[14] + 48))(v2, 1, v1) != 1)
  {
    uint64_t v3 = v0[15];
    uint64_t v4 = v0[6];
    sub_100EF0D2C(v2, v3, (uint64_t (*)(void))type metadata accessor for OwnerPeerTrust);
    sub_100EF0D94(v3 + *(int *)(v1 + 28), v4, (uint64_t (*)(void))type metadata accessor for PeerCommunicationIdentifier);
    switch(swift_getEnumCaseMultiPayload())
    {
      case 1u:
        uint64_t v7 = v0[6];
        sub_100EF0DFC(v0[15], (uint64_t (*)(void))type metadata accessor for OwnerPeerTrust);
        uint64_t v6 = type metadata accessor for PeerCommunicationIdentifier;
        uint64_t v5 = v7;
        goto LABEL_6;
      case 3u:
        uint64_t v8 = v0[6];
        char v9 = *(unsigned char *)v8;
        uint64_t v11 = *(void *)(v8 + 8);
        uint64_t v10 = *(void *)(v8 + 16);
        goto LABEL_11;
      case 4u:
        uint64_t v12 = v0[6];
        char v9 = *(unsigned char *)v12;
        uint64_t v11 = *(void *)(v12 + 8);
        uint64_t v10 = *(void *)(v12 + 16);
        goto LABEL_10;
      case 5u:
        uint64_t v13 = v0[6];
        char v9 = *(unsigned char *)(v13 + 16);
        uint64_t v11 = *(void *)(v13 + 24);
        uint64_t v10 = *(void *)(v13 + 32);
        swift_bridgeObjectRelease();
LABEL_10:
        swift_bridgeObjectRelease();
LABEL_11:
        v0[20] = v10;
        if (!v0[4]) {
          goto LABEL_15;
        }
        uint64_t v17 = (uint64_t (*)(char, uint64_t, uint64_t))((char *)&dword_10165CF98 + dword_10165CF98);
        unint64_t v14 = (void *)swift_task_alloc();
        v0[21] = v14;
        *unint64_t v14 = v0;
        v14[1] = sub_100EE9AC0;
        return v17(v9, v11, v10);
      case 6u:
      case 7u:
        uint64_t v5 = v0[15];
        uint64_t v6 = type metadata accessor for OwnerPeerTrust;
LABEL_6:
        sub_100EF0DFC(v5, (uint64_t (*)(void))v6);
        goto LABEL_16;
      default:
LABEL_15:
        sub_100EF0DFC(v0[15], (uint64_t (*)(void))type metadata accessor for OwnerPeerTrust);
        swift_bridgeObjectRelease();
        goto LABEL_16;
    }
  }
  sub_10001DAB4(v2, (uint64_t *)&unk_1016607D0);
LABEL_16:
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v16 = (uint64_t (*)(void))v0[1];
  return v16(0);
}

uint64_t sub_100EE9AC0(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *v3;
  *(void *)(*v3 + 176) = a2;
  swift_task_dealloc();
  if (v2)
  {
    swift_errorRelease();
    swift_bridgeObjectRelease();
    uint64_t v5 = sub_100EE9C68;
    uint64_t v6 = 0;
  }
  else
  {
    uint64_t v6 = *(void *)(v4 + 32);
    uint64_t v5 = sub_100EE9BF0;
  }
  return _swift_task_switch(v5, v6, 0);
}

uint64_t sub_100EE9BF0()
{
  uint64_t v1 = *(void *)(v0 + 176);
  swift_bridgeObjectRelease();
  if (v1) {
    swift_bridgeObjectRelease();
  }
  return _swift_task_switch(sub_100EE9D18, 0, 0);
}

uint64_t sub_100EE9C68()
{
  sub_100EF0DFC(*(void *)(v0 + 120), (uint64_t (*)(void))type metadata accessor for OwnerPeerTrust);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1(0);
}

uint64_t sub_100EE9D18()
{
  sub_100EF0DFC(v0[15], (uint64_t (*)(void))type metadata accessor for OwnerPeerTrust);
  BOOL v1 = v0[22] != 0;
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v2 = (uint64_t (*)(BOOL))v0[1];
  return v2(v1);
}

uint64_t sub_100EE9DD4(uint64_t a1)
{
  *(void *)(v1 + 312) = a1;
  return _swift_task_switch(sub_100EE9DF4, 0, 0);
}

uint64_t sub_100EE9DF4()
{
  sub_10000588C(&qword_101639418);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_101347500;
  *(void *)(inited + 32) = 0x646F43726F727265;
  *(void *)(inited + 40) = 0xE900000000000065;
  swift_getErrorValue();
  *(void *)(v0 + 296) = Error.code.getter();
  uint64_t v2 = dispatch thunk of CustomStringConvertible.description.getter();
  uint64_t v4 = v3;
  *(void *)(inited + 72) = &type metadata for String;
  unint64_t v5 = sub_1000336D4();
  *(void *)(inited + 80) = v5;
  *(void *)(inited + 48) = v2;
  *(void *)(inited + 56) = v4;
  *(_WORD *)(inited + 88) = 1;
  *(void *)(inited + 96) = 0x6D6F44726F727265;
  *(void *)(inited + 104) = 0xEB000000006E6961;
  swift_getErrorValue();
  uint64_t v6 = Error.domain.getter();
  *(void *)(inited + 136) = &type metadata for String;
  *(void *)(inited + 144) = v5;
  *(void *)(inited + 112) = v6;
  *(void *)(inited + 120) = v7;
  *(_WORD *)(inited + 152) = 1;
  *(void *)(inited + 160) = 0x6563637553736177;
  *(void *)(inited + 168) = 0xEA00000000007373;
  *(unsigned char *)(inited + 176) = 0;
  *(_WORD *)(inited + 216) = 0;
  unint64_t v8 = sub_10092D7A8(inited);
  char v9 = *(uint64_t (**)(unint64_t))(v0 + 8);
  return v9(v8);
}

uint64_t sub_100EE9F98(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)(v3 + 24) = a2;
  *(void *)(v3 + 32) = a3;
  *(void *)(v3 + 16) = a1;
  uint64_t v5 = type metadata accessor for UUID();
  *(void *)(v3 + 40) = v5;
  uint64_t v6 = *(void *)(v5 - 8);
  *(void *)(v3 + 48) = v6;
  *(void *)(v3 + 56) = *(void *)(v6 + 64);
  *(void *)(v3 + 64) = swift_task_alloc();
  *(void *)(v3 + 72) = sub_10000588C((uint64_t *)&unk_10163B890);
  *(void *)(v3 + 80) = swift_task_alloc();
  *(_DWORD *)(v3 + 120) = *(_DWORD *)(type metadata accessor for MemberSharingCircle() + 32);
  return _swift_task_switch(sub_100EEA0AC, a3, 0);
}

uint64_t sub_100EEA0AC()
{
  uint64_t v1 = *(void *)(v0 + 64);
  uint64_t v2 = *(void *)(v0 + 40);
  uint64_t v3 = *(void *)(v0 + 48);
  uint64_t v4 = *(void *)(v0 + 32);
  uint64_t v5 = *(void *)(v0 + 24) + *(int *)(v0 + 120);
  *(void *)(v0 + 88) = *(void *)(v4 + 136);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v3 + 16))(v1, v5, v2);
  unint64_t v6 = (*(unsigned __int8 *)(v3 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  uint64_t v7 = swift_allocObject();
  *(void *)(v0 + 96) = v7;
  *(void *)(v7 + 16) = v4;
  (*(void (**)(unint64_t, uint64_t, uint64_t))(v3 + 32))(v7 + v6, v1, v2);
  swift_retain();
  return _swift_task_switch(sub_100EEA1A4, 0, 0);
}

uint64_t sub_100EEA1A4()
{
  uint64_t v2 = v0[11];
  uint64_t v1 = v0[12];
  uint64_t v3 = (void *)swift_task_alloc();
  v0[13] = v3;
  void v3[2] = v2;
  v3[3] = sub_100EF0B04;
  v3[4] = v1;
  uint64_t v4 = (void *)swift_task_alloc();
  v0[14] = v4;
  *uint64_t v4 = v0;
  v4[1] = sub_100EEA2A8;
  uint64_t v6 = v0[9];
  uint64_t v5 = v0[10];
  return withCheckedContinuation<A>(isolation:function:_:)(v5, 0, 0, 0xD000000000000012, 0x80000001013F1870, sub_1000750F8, v3, v6);
}

uint64_t sub_100EEA2A8()
{
  swift_task_dealloc();
  swift_release();
  swift_task_dealloc();
  return _swift_task_switch(sub_100EEA3DC, 0, 0);
}

uint64_t sub_100EEA3DC()
{
  uint64_t v1 = v0[10];
  uint64_t v2 = type metadata accessor for MemberPeerTrust();
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v2 - 8) + 48))(v1, 1, v2) == 1)
  {
    sub_10001DAB4(v1, (uint64_t *)&unk_10163B890);
    uint64_t v3 = 0;
    uint64_t v4 = 0;
  }
  else
  {
    uint64_t v5 = (uint64_t *)(v1 + *(int *)(v2 + 32));
    uint64_t v3 = *v5;
    uint64_t v4 = v5[1];
    swift_bridgeObjectRetain();
    sub_100EF0DFC(v1, (uint64_t (*)(void))type metadata accessor for MemberPeerTrust);
  }
  uint64_t v6 = (void *)v0[2];
  *uint64_t v6 = v3;
  v6[1] = v4;
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v7 = (uint64_t (*)(void))v0[1];
  return v7();
}

uint64_t sub_100EEA4F4(char a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, char a6)
{
  *(unsigned char *)(v6 + 465) = a6;
  *(void *)(v6 + 448) = a4;
  *(void *)(v6 + 456) = a5;
  *(void *)(v6 + 432) = a2;
  *(void *)(v6 + 440) = a3;
  *(unsigned char *)(v6 + 464) = a1;
  return _swift_task_switch(sub_100EEA520, 0, 0);
}

uint64_t sub_100EEA520()
{
  char v1 = *(unsigned char *)(v0 + 465);
  uint64_t v3 = *(void *)(v0 + 448);
  uint64_t v2 = *(void *)(v0 + 456);
  uint64_t v5 = *(void *)(v0 + 432);
  uint64_t v4 = *(void *)(v0 + 440);
  char v6 = *(unsigned char *)(v0 + 464);
  sub_10000588C(&qword_101639418);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_10134BFA0;
  *(void *)(inited + 32) = 0xD000000000000014;
  *(void *)(inited + 40) = 0x8000000101419E00;
  *(unsigned char *)(inited + 48) = v6;
  *(_WORD *)(inited + 88) = 0;
  *(void *)(inited + 96) = 0x6E774F6C61746F74;
  *(void *)(inited + 104) = 0xEF736D6574496465;
  *(void *)(inited + 112) = v5;
  *(unsigned char *)(inited + 153) = 1;
  *(void *)(inited + 160) = 0xD000000000000013;
  *(void *)(inited + 168) = 0x8000000101419E20;
  *(void *)(inited + 176) = v4;
  *(unsigned char *)(inited + 217) = 1;
  *(void *)(inited + 224) = 0xD000000000000012;
  *(void *)(inited + 232) = 0x8000000101419E40;
  *(void *)(inited + 240) = v3;
  *(unsigned char *)(inited + 281) = 1;
  *(void *)(inited + 288) = 0xD000000000000016;
  *(void *)(inited + 296) = 0x8000000101419E60;
  *(void *)(inited + 304) = v2;
  *(unsigned char *)(inited + 345) = 1;
  *(void *)(inited + 352) = 0x664F534654557369;
  *(void *)(inited + 360) = 0xEB00000000726566;
  *(unsigned char *)(inited + 368) = v1;
  *(_WORD *)(inited + 408) = 0;
  unint64_t v8 = sub_10092D7A8(inited);
  uint64_t v9 = *(uint64_t (**)(unint64_t))(v0 + 8);
  return v9(v8);
}

uint64_t sub_100EEA6A8(char a1, char a2)
{
  *(unsigned char *)(v2 + 177) = a2;
  *(unsigned char *)(v2 + 176) = a1;
  return _swift_task_switch(sub_100EEA6CC, 0, 0);
}

uint64_t sub_100EEA6CC()
{
  char v1 = *(unsigned char *)(v0 + 177);
  char v2 = *(unsigned char *)(v0 + 176);
  sub_10000588C(&qword_101639418);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_101347BA0;
  *(void *)(inited + 32) = 0x4165726168537369;
  *(void *)(inited + 40) = 0xEF64657470656363;
  *(unsigned char *)(inited + 48) = v2;
  *(_WORD *)(inited + 88) = 0;
  strcpy((char *)(inited + 96), "isUTFSResponse");
  *(unsigned char *)(inited + 111) = -18;
  *(unsigned char *)(inited + 112) = v1;
  *(_WORD *)(inited + 152) = 0;
  unint64_t v4 = sub_10092D7A8(inited);
  uint64_t v5 = *(uint64_t (**)(unint64_t))(v0 + 8);
  return v5(v4);
}

uint64_t sub_100EEA7B4(uint64_t a1, uint64_t a2)
{
  *(void *)(v2 + 176) = a1;
  *(void *)(v2 + 184) = a2;
  return _swift_task_switch(sub_100EEA7D4, 0, 0);
}

uint64_t sub_100EEA7D4()
{
  uint64_t v2 = v0[22];
  uint64_t v1 = v0[23];
  sub_10000588C(&qword_101639418);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_101347BA0;
  *(void *)(inited + 32) = 0xD000000000000019;
  *(void *)(inited + 40) = 0x8000000101419D80;
  *(void *)(inited + 72) = &type metadata for Int;
  unint64_t v4 = sub_100033838();
  *(void *)(inited + 80) = v4;
  *(void *)(inited + 48) = v2;
  *(_WORD *)(inited + 88) = 2;
  *(void *)(inited + 96) = 0xD00000000000001ALL;
  *(void *)(inited + 104) = 0x8000000101419DA0;
  *(void *)(inited + 136) = &type metadata for Int;
  *(void *)(inited + 144) = v4;
  *(void *)(inited + 112) = v1;
  *(_WORD *)(inited + 152) = 2;
  unint64_t v5 = sub_10092D7A8(inited);
  char v6 = (uint64_t (*)(unint64_t))v0[1];
  return v6(v5);
}

uint64_t sub_100EEA8D0(uint64_t a1, uint64_t a2)
{
  *(void *)(v2 + 176) = a1;
  *(void *)(v2 + 184) = a2;
  return _swift_task_switch(sub_100EEA8F0, 0, 0);
}

uint64_t sub_100EEA8F0()
{
  uint64_t v2 = v0[22];
  uint64_t v1 = v0[23];
  sub_10000588C(&qword_101639418);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_101347BA0;
  *(void *)(inited + 32) = 0xD000000000000010;
  *(void *)(inited + 40) = 0x800000010141A070;
  *(void *)(inited + 72) = &type metadata for Int;
  unint64_t v4 = sub_100033838();
  *(void *)(inited + 80) = v4;
  *(void *)(inited + 48) = v2;
  *(_WORD *)(inited + 88) = 2;
  *(void *)(inited + 96) = 0xD000000000000011;
  *(void *)(inited + 104) = 0x800000010141A090;
  *(void *)(inited + 136) = &type metadata for Int;
  *(void *)(inited + 144) = v4;
  *(void *)(inited + 112) = v1;
  *(_WORD *)(inited + 152) = 2;
  unint64_t v5 = sub_10092D7A8(inited);
  char v6 = (uint64_t (*)(unint64_t))v0[1];
  return v6(v5);
}

uint64_t sub_100EEA9EC(uint64_t isStackAllocationSafe)
{
  uint64_t v2 = isStackAllocationSafe;
  char v3 = *(unsigned char *)(isStackAllocationSafe + 32);
  unint64_t v4 = (unint64_t)((1 << v3) + 63) >> 6;
  size_t v5 = 8 * v4;
  if ((v3 & 0x3Fu) <= 0xD
    || (isStackAllocationSafe = swift_stdlib_isStackAllocationSafe(), (isStackAllocationSafe & 1) != 0))
  {
    __chkstk_darwin(isStackAllocationSafe);
    bzero((char *)&v9 - ((v5 + 15) & 0x3FFFFFFFFFFFFFF0), v5);
    uint64_t v6 = sub_100EEAB44((unint64_t *)((char *)&v9 - ((v5 + 15) & 0x3FFFFFFFFFFFFFF0)), v4, v2);
    if (v1) {
      swift_willThrow();
    }
    else {
      return v6;
    }
  }
  else
  {
    uint64_t v7 = (void *)swift_slowAlloc();
    bzero(v7, v5);
    uint64_t v2 = sub_100EEAB44((unint64_t *)v7, v4, v2);
    swift_slowDealloc();
  }
  return v2;
}

uint64_t sub_100EEAB44(unint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v32 = a2;
  uint64_t v33 = a1;
  uint64_t v44 = sub_10000588C(&qword_10165F390);
  uint64_t v4 = __chkstk_darwin(v44);
  id v43 = (char *)&v31 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v4);
  uint64_t v41 = (char *)&v31 - v6;
  uint64_t v39 = type metadata accessor for UUID();
  uint64_t result = __chkstk_darwin(v39);
  id v40 = (char *)&v31 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  int64_t v10 = 0;
  unint64_t v46 = (void *)a3;
  uint64_t v11 = *(void *)(a3 + 64);
  uint64_t v34 = 0;
  uint64_t v35 = a3 + 64;
  uint64_t v12 = 1 << *(unsigned char *)(a3 + 32);
  uint64_t v13 = -1;
  if (v12 < 64) {
    uint64_t v13 = ~(-1 << v12);
  }
  unint64_t v14 = v13 & v11;
  Class v38 = v8 + 2;
  uint64_t v42 = v8;
  int64_t v36 = (unint64_t)(v12 + 63) >> 6;
  uint64_t v37 = v8 + 1;
  uint64_t v15 = v8;
  uint64_t v16 = v39;
  uint64_t v17 = v40;
  uint64_t v18 = (uint64_t)v41;
  id v19 = v43;
  while (1)
  {
    if (v14)
    {
      uint64_t v47 = (v14 - 1) & v14;
      int64_t v48 = v10;
      unint64_t v20 = __clz(__rbit64(v14)) | (v10 << 6);
      goto LABEL_5;
    }
    int64_t v26 = v10 + 1;
    if (__OFADD__(v10, 1))
    {
      __break(1u);
      goto LABEL_26;
    }
    if (v26 >= v36) {
      return sub_1002ACB50(v33, v32, v34, v46);
    }
    unint64_t v27 = *(void *)(v35 + 8 * v26);
    int64_t v28 = v10 + 1;
    if (!v27)
    {
      int64_t v28 = v10 + 2;
      if (v10 + 2 >= v36) {
        return sub_1002ACB50(v33, v32, v34, v46);
      }
      unint64_t v27 = *(void *)(v35 + 8 * v28);
      if (!v27)
      {
        int64_t v28 = v10 + 3;
        if (v10 + 3 >= v36) {
          return sub_1002ACB50(v33, v32, v34, v46);
        }
        unint64_t v27 = *(void *)(v35 + 8 * v28);
        if (!v27) {
          break;
        }
      }
    }
LABEL_20:
    uint64_t v47 = (v27 - 1) & v27;
    int64_t v48 = v28;
    unint64_t v20 = __clz(__rbit64(v27)) + (v28 << 6);
LABEL_5:
    char v21 = v46;
    char v22 = (void (*)(char *, unint64_t, uint64_t))v15[2];
    v22(v17, v46[6] + v15[9] * v20, v16);
    uint64_t v23 = v21[7];
    unint64_t v45 = v20;
    LODWORD(v21) = *(unsigned __int8 *)(v23 + v20);
    v22((char *)v18, (unint64_t)v17, v16);
    uint64_t v24 = *(int *)(v44 + 48);
    *(unsigned char *)(v18 + v24) = (_BYTE)v21;
    v22(v19, v18, v16);
    v19[v24] = (char)v21;
    sub_10001DAB4(v18, &qword_10165F390);
    char v25 = (void (*)(char *, uint64_t))v15[1];
    v25(v19, v16);
    uint64_t result = ((uint64_t (*)(char *, uint64_t))v25)(v17, v16);
    int64_t v10 = v48;
    unint64_t v14 = v47;
    if (v21 == 1)
    {
      *(unint64_t *)((char *)v33 + ((v45 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v45;
      if (__OFADD__(v34++, 1))
      {
        __break(1u);
        return sub_1002ACB50(v33, v32, v34, v46);
      }
    }
  }
  uint64_t v29 = v10 + 4;
  if (v10 + 4 >= v36) {
    return sub_1002ACB50(v33, v32, v34, v46);
  }
  unint64_t v27 = *(void *)(v35 + 8 * v29);
  if (v27)
  {
    int64_t v28 = v10 + 4;
    goto LABEL_20;
  }
  while (1)
  {
    int64_t v28 = v29 + 1;
    if (__OFADD__(v29, 1)) {
      break;
    }
    if (v28 >= v36) {
      return sub_1002ACB50(v33, v32, v34, v46);
    }
    unint64_t v27 = *(void *)(v35 + 8 * v28);
    ++v29;
    if (v27) {
      goto LABEL_20;
    }
  }
LABEL_26:
  __break(1u);
  return result;
}

uint64_t sub_100EEAEE8(char a1)
{
  *(unsigned char *)(v1 + 120) = a1;
  sub_10000588C(&qword_101639428);
  *(void *)(v1 + 40) = swift_task_alloc();
  *(void *)(v1 + 48) = swift_task_alloc();
  return _swift_task_switch(sub_100EEAF8C, 0, 0);
}

uint64_t sub_100EEAF8C()
{
  type metadata accessor for AnalyticsEvent(0);
  uint64_t v1 = (char *)swift_allocObject();
  v0[7] = v1;
  swift_defaultActor_initialize();
  *((void *)v1 + 14) = sub_10092D664((uint64_t)_swiftEmptyArrayStorage);
  UUID.init()();
  uint64_t v2 = &v1[OBJC_IVAR____TtC12searchpartyd14AnalyticsEvent_startTime];
  uint64_t v3 = type metadata accessor for DispatchTime();
  v0[8] = v3;
  uint64_t v4 = *(void *)(v3 - 8);
  uint64_t v5 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v4 + 56);
  v0[9] = v5;
  v0[10] = (v4 + 56) & 0xFFFFFFFFFFFFLL | 0xA0D1000000000000;
  v5(v2, 1, 1, v3);
  v5(&v1[OBJC_IVAR____TtC12searchpartyd14AnalyticsEvent_endTime], 1, 1, v3);
  *((void *)v1 + 15) = 0xD000000000000036;
  *((void *)v1 + 16) = 0x8000000101419F60;
  return _swift_task_switch(sub_100EEB0E8, v1, 0);
}

uint64_t sub_100EEB0E8()
{
  uint64_t v1 = *(void (**)(uint64_t, void, uint64_t, uint64_t))(v0 + 72);
  uint64_t v3 = *(void *)(v0 + 56);
  uint64_t v2 = *(void *)(v0 + 64);
  uint64_t v5 = *(void *)(v0 + 40);
  uint64_t v4 = *(void *)(v0 + 48);
  static DispatchTime.now()();
  v1(v4, 0, 1, v2);
  sub_100288DF0(v4, v5);
  uint64_t v6 = v3 + OBJC_IVAR____TtC12searchpartyd14AnalyticsEvent_startTime;
  swift_beginAccess();
  sub_10003377C(v5, v6);
  swift_endAccess();
  uint64_t v11 = (uint64_t (*)(uint64_t, char))((char *)&dword_10166D7D0 + dword_10166D7D0);
  uint64_t v7 = (void *)swift_task_alloc();
  *(void *)(v0 + 88) = v7;
  *uint64_t v7 = v0;
  v7[1] = sub_100EEB21C;
  uint64_t v8 = *(void *)(v0 + 56);
  char v9 = *(unsigned char *)(v0 + 120);
  return v11(v8, v9);
}

uint64_t sub_100EEB21C()
{
  *(void *)(*(void *)v1 + 96) = v0;
  swift_task_dealloc();
  if (v0) {
    uint64_t v2 = sub_100EEB4FC;
  }
  else {
    uint64_t v2 = sub_100EEB330;
  }
  return _swift_task_switch(v2, 0, 0);
}

uint64_t sub_100EEB330()
{
  type metadata accessor for AnalyticsPublisher();
  v0[13] = swift_allocObject();
  swift_defaultActor_initialize();
  uint64_t v1 = (void *)swift_task_alloc();
  v0[14] = v1;
  *uint64_t v1 = v0;
  v1[1] = sub_100EEB3E4;
  uint64_t v2 = v0[7];
  return sub_101196838(v2);
}

uint64_t sub_100EEB3E4()
{
  swift_task_dealloc();
  swift_release();
  return _swift_task_switch(sub_100EF0E5C, 0, 0);
}

uint64_t sub_100EEB4FC()
{
  if (qword_101636888 != -1) {
    swift_once();
  }
  uint64_t v1 = type metadata accessor for Logger();
  sub_100010324(v1, (uint64_t)qword_10170D788);
  uint64_t v2 = Logger.logObject.getter();
  os_log_type_t v3 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v2, v3))
  {
    uint64_t v4 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v4 = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, v3, "Could not prepare analytics event for Keys Download.", v4, 2u);
    swift_slowDealloc();
  }
  swift_errorRelease();

  type metadata accessor for AnalyticsPublisher();
  v0[13] = swift_allocObject();
  swift_defaultActor_initialize();
  uint64_t v5 = (void *)swift_task_alloc();
  v0[14] = v5;
  *uint64_t v5 = v0;
  v5[1] = sub_100EEB3E4;
  uint64_t v6 = v0[7];
  return sub_101196838(v6);
}

uint64_t sub_100EEB678(char a1, char a2)
{
  *(unsigned char *)(v2 + 121) = a2;
  *(unsigned char *)(v2 + 120) = a1;
  sub_10000588C(&qword_101639428);
  *(void *)(v2 + 40) = swift_task_alloc();
  *(void *)(v2 + 48) = swift_task_alloc();
  return _swift_task_switch(sub_100EEB720, 0, 0);
}

uint64_t sub_100EEB720()
{
  type metadata accessor for AnalyticsEvent(0);
  uint64_t v1 = (char *)swift_allocObject();
  v0[7] = v1;
  swift_defaultActor_initialize();
  *((void *)v1 + 14) = sub_10092D664((uint64_t)_swiftEmptyArrayStorage);
  UUID.init()();
  uint64_t v2 = &v1[OBJC_IVAR____TtC12searchpartyd14AnalyticsEvent_startTime];
  uint64_t v3 = type metadata accessor for DispatchTime();
  v0[8] = v3;
  uint64_t v4 = *(void *)(v3 - 8);
  uint64_t v5 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v4 + 56);
  v0[9] = v5;
  v0[10] = (v4 + 56) & 0xFFFFFFFFFFFFLL | 0xA0D1000000000000;
  v5(v2, 1, 1, v3);
  v5(&v1[OBJC_IVAR____TtC12searchpartyd14AnalyticsEvent_endTime], 1, 1, v3);
  *((void *)v1 + 15) = 0xD00000000000003CLL;
  *((void *)v1 + 16) = 0x8000000101419FE0;
  return _swift_task_switch(sub_100EEB87C, v1, 0);
}

uint64_t sub_100EEB87C()
{
  uint64_t v1 = *(void (**)(uint64_t, void, uint64_t, uint64_t))(v0 + 72);
  uint64_t v3 = *(void *)(v0 + 56);
  uint64_t v2 = *(void *)(v0 + 64);
  uint64_t v5 = *(void *)(v0 + 40);
  uint64_t v4 = *(void *)(v0 + 48);
  static DispatchTime.now()();
  v1(v4, 0, 1, v2);
  sub_100288DF0(v4, v5);
  uint64_t v6 = v3 + OBJC_IVAR____TtC12searchpartyd14AnalyticsEvent_startTime;
  swift_beginAccess();
  sub_10003377C(v5, v6);
  swift_endAccess();
  uint64_t v12 = (uint64_t (*)(uint64_t, char, char))((char *)&dword_10166D7E8 + dword_10166D7E8);
  uint64_t v7 = (void *)swift_task_alloc();
  *(void *)(v0 + 88) = v7;
  *uint64_t v7 = v0;
  v7[1] = sub_100EEB9B4;
  uint64_t v8 = *(void *)(v0 + 56);
  char v9 = *(unsigned char *)(v0 + 121);
  char v10 = *(unsigned char *)(v0 + 120);
  return v12(v8, v10, v9);
}

uint64_t sub_100EEB9B4()
{
  *(void *)(*(void *)v1 + 96) = v0;
  swift_task_dealloc();
  if (v0) {
    uint64_t v2 = sub_100EEBC94;
  }
  else {
    uint64_t v2 = sub_100EEBAC8;
  }
  return _swift_task_switch(v2, 0, 0);
}

uint64_t sub_100EEBAC8()
{
  type metadata accessor for AnalyticsPublisher();
  v0[13] = swift_allocObject();
  swift_defaultActor_initialize();
  uint64_t v1 = (void *)swift_task_alloc();
  v0[14] = v1;
  *uint64_t v1 = v0;
  v1[1] = sub_100EEBB7C;
  uint64_t v2 = v0[7];
  return sub_101196838(v2);
}

uint64_t sub_100EEBB7C()
{
  swift_task_dealloc();
  swift_release();
  return _swift_task_switch(sub_10088FBC8, 0, 0);
}

uint64_t sub_100EEBC94()
{
  if (qword_101636888 != -1) {
    swift_once();
  }
  uint64_t v1 = type metadata accessor for Logger();
  sub_100010324(v1, (uint64_t)qword_10170D788);
  uint64_t v2 = Logger.logObject.getter();
  os_log_type_t v3 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v2, v3))
  {
    uint64_t v4 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v4 = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, v3, "Could not prepare analytics event for share response.", v4, 2u);
    swift_slowDealloc();
  }
  swift_errorRelease();

  type metadata accessor for AnalyticsPublisher();
  v0[13] = swift_allocObject();
  swift_defaultActor_initialize();
  uint64_t v5 = (void *)swift_task_alloc();
  v0[14] = v5;
  *uint64_t v5 = v0;
  v5[1] = sub_100EEBB7C;
  uint64_t v6 = v0[7];
  return sub_101196838(v6);
}

uint64_t sub_100EEBE10(uint64_t a1)
{
  v1[31] = a1;
  uint64_t v2 = type metadata accessor for UUID();
  v1[32] = v2;
  v1[33] = *(void *)(v2 - 8);
  v1[34] = swift_task_alloc();
  sub_10000588C(&qword_101639428);
  v1[35] = swift_task_alloc();
  v1[36] = swift_task_alloc();
  uint64_t v3 = type metadata accessor for OwnerSharingCircle();
  v1[37] = v3;
  v1[38] = *(void *)(v3 - 8);
  v1[39] = swift_task_alloc();
  v1[40] = swift_task_alloc();
  return _swift_task_switch(sub_100EEBF7C, 0, 0);
}

uint64_t sub_100EEBF7C()
{
  if (qword_1016375E8 != -1) {
    swift_once();
  }
  swift_beginAccess();
  uint64_t result = sub_1000977C4((uint64_t)&xmmword_10166E8F0, v0 + 96);
  if (*(void *)(v0 + 120))
  {
    sub_10001CEB0((long long *)(v0 + 96), v0 + 16);
    sub_10001CD44((void *)(v0 + 16), *(void *)(v0 + 40));
    uint64_t v3 = (uint64_t (__cdecl *)())((char *)&dword_1016390D8 + dword_1016390D8);
    uint64_t v2 = (void *)swift_task_alloc();
    *(void *)(v0 + 328) = v2;
    *uint64_t v2 = v0;
    v2[1] = sub_100EEC0B0;
    return v3();
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_100EEC0B0(uint64_t a1)
{
  *(void *)(*(void *)v1 + 336) = a1;
  swift_task_dealloc();
  return _swift_task_switch(sub_100EEC1B0, 0, 0);
}

uint64_t sub_100EEC1B0()
{
  uint64_t v1 = *(void *)(v0 + 336);
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v0 + 16);
  if (v1)
  {
    uint64_t result = sub_1000977C4((uint64_t)&xmmword_10166E8F0, v0 + 56);
    if (*(void *)(v0 + 80))
    {
      sub_10001CEB0((long long *)(v0 + 56), v0 + 136);
      sub_10001CD44((void *)(v0 + 136), *(void *)(v0 + 160));
      char v10 = (uint64_t (__cdecl *)())((char *)&dword_1016390A8 + dword_1016390A8);
      uint64_t v3 = (void *)swift_task_alloc();
      *(void *)(v0 + 344) = v3;
      *uint64_t v3 = v0;
      v3[1] = sub_100EEC3E0;
      return v10();
    }
    else
    {
      __break(1u);
    }
  }
  else
  {
    if (qword_101636888 != -1) {
      swift_once();
    }
    uint64_t v4 = type metadata accessor for Logger();
    sub_100010324(v4, (uint64_t)qword_10170D788);
    uint64_t v5 = Logger.logObject.getter();
    os_log_type_t v6 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v5, v6))
    {
      uint64_t v7 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v7 = 0;
      _os_log_impl((void *)&_mh_execute_header, v5, v6, "Failed to get BeaconStoreActor!", v7, 2u);
      swift_slowDealloc();
    }

    unint64_t v8 = sub_10092DE10((uint64_t)_swiftEmptyArrayStorage);
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    char v9 = *(uint64_t (**)(unint64_t))(v0 + 8);
    return v9(v8);
  }
  return result;
}

uint64_t sub_100EEC3E0(uint64_t a1)
{
  *(void *)(*(void *)v1 + 352) = a1;
  swift_task_dealloc();
  return _swift_task_switch(sub_100EEC4E0, 0, 0);
}

uint64_t sub_100EEC4E0()
{
  uint64_t v1 = *(void *)(v0 + 248);
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v0 + 136);
  uint64_t v2 = *(void *)(v1 + 16);
  *(void *)(v0 + 360) = v2;
  if (v2)
  {
    uint64_t v3 = *(void *)(v0 + 304);
    int v4 = *(_DWORD *)(v3 + 80);
    *(_DWORD *)(v0 + 448) = v4;
    *(void *)(v0 + 368) = *(void *)(v3 + 72);
    uint64_t v5 = swift_bridgeObjectRetain();
    *(void *)(v0 + 376) = _swiftEmptyDictionarySingleton;
    *(void *)(v0 + 384) = 0;
    uint64_t v6 = *(void *)(v0 + 320);
    uint64_t v7 = *(void *)(v0 + 296);
    sub_100EF0D94(v5 + ((v4 + 32) & ~(unint64_t)v4), v6, (uint64_t (*)(void))type metadata accessor for OwnerSharingCircle);
    for (uint64_t i = *(int *)(v7 + 28); *(unsigned char *)(v6 + i) != 2; uint64_t i = *(int *)(v15 + 28))
    {
      uint64_t v9 = *(void *)(v0 + 360);
      uint64_t v10 = *(void *)(v0 + 384) + 1;
      sub_100EF0DFC(*(void *)(v0 + 320), (uint64_t (*)(void))type metadata accessor for OwnerSharingCircle);
      if (v10 == v9)
      {
        swift_bridgeObjectRelease();
        goto LABEL_11;
      }
      uint64_t v11 = *(void *)(v0 + 384) + 1;
      uint64_t v12 = *(void *)(v0 + 368);
      uint64_t v13 = *(unsigned __int8 *)(v0 + 448);
      uint64_t v14 = *(void *)(v0 + 248);
      *(void *)(v0 + 376) = _swiftEmptyDictionarySingleton;
      *(void *)(v0 + 384) = v11;
      uint64_t v6 = *(void *)(v0 + 320);
      uint64_t v15 = *(void *)(v0 + 296);
      sub_100EF0D94(v14 + ((v13 + 32) & ~v13) + v12 * v11, v6, (uint64_t (*)(void))type metadata accessor for OwnerSharingCircle);
    }
    type metadata accessor for AnalyticsEvent(0);
    uint64_t v16 = (char *)swift_allocObject();
    *(void *)(v0 + 392) = v16;
    swift_defaultActor_initialize();
    *((void *)v16 + 14) = sub_10092D664((uint64_t)_swiftEmptyArrayStorage);
    UUID.init()();
    uint64_t v17 = &v16[OBJC_IVAR____TtC12searchpartyd14AnalyticsEvent_startTime];
    uint64_t v18 = type metadata accessor for DispatchTime();
    *(void *)(v0 + 400) = v18;
    uint64_t v19 = *(void *)(v18 - 8);
    unint64_t v20 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v19 + 56);
    *(void *)(v0 + 408) = v20;
    *(void *)(v0 + 416) = (v19 + 56) & 0xFFFFFFFFFFFFLL | 0xA0D1000000000000;
    v20(v17, 1, 1, v18);
    v20(&v16[OBJC_IVAR____TtC12searchpartyd14AnalyticsEvent_endTime], 1, 1, v18);
    *((void *)v16 + 15) = 0xD000000000000037;
    *((void *)v16 + 16) = 0x8000000101419E80;
    return _swift_task_switch(sub_100EEC7E0, v16, 0);
  }
  else
  {
LABEL_11:
    swift_release();
    swift_release();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    char v21 = *(uint64_t (**)(void *))(v0 + 8);
    return v21(_swiftEmptyDictionarySingleton);
  }
}

uint64_t sub_100EEC7E0()
{
  uint64_t v1 = (void (*)(uint64_t, void, uint64_t, uint64_t))v0[51];
  uint64_t v3 = v0[49];
  uint64_t v2 = v0[50];
  uint64_t v5 = v0[35];
  uint64_t v4 = v0[36];
  static DispatchTime.now()();
  v1(v4, 0, 1, v2);
  sub_100288DF0(v4, v5);
  uint64_t v6 = v3 + OBJC_IVAR____TtC12searchpartyd14AnalyticsEvent_startTime;
  swift_beginAccess();
  sub_10003377C(v5, v6);
  swift_endAccess();
  return _swift_task_switch(sub_100EEC8C8, 0, 0);
}

uint64_t sub_100EEC8C8()
{
  uint64_t v1 = v0[44];
  uint64_t v2 = v0[42];
  uint64_t v3 = v0[40];
  uint64_t v4 = (void *)swift_task_alloc();
  v0[53] = v4;
  v4[2] = v3;
  v4[3] = v2;
  v4[4] = v1;
  uint64_t v5 = (void *)swift_task_alloc();
  v0[54] = v5;
  *uint64_t v5 = v0;
  v5[1] = sub_100EEC99C;
  return sub_101194870((uint64_t)&unk_101662A68, (uint64_t)v4);
}

uint64_t sub_100EEC99C()
{
  *(void *)(*(void *)v1 + 440) = v0;
  swift_task_dealloc();
  swift_task_dealloc();
  if (v0) {
    uint64_t v2 = sub_100EECDD0;
  }
  else {
    uint64_t v2 = sub_100EECACC;
  }
  return _swift_task_switch(v2, 0, 0);
}

uint64_t sub_100EECACC()
{
  uint64_t v1 = *(void *)(v0 + 392);
  uint64_t v2 = *(void *)(v0 + 376);
  uint64_t v4 = *(void *)(v0 + 264);
  uint64_t v3 = *(void *)(v0 + 272);
  uint64_t v5 = *(void *)(v0 + 256);
  (*(void (**)(uint64_t, void, uint64_t))(v4 + 16))(v3, *(void *)(v0 + 320) + *(int *)(*(void *)(v0 + 296) + 20), v5);
  swift_retain();
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  sub_10016CA6C(v1, v3, isUniquelyReferenced_nonNull_native);
  swift_bridgeObjectRelease();
  (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v3, v5);
  swift_release();
  while (1)
  {
    uint64_t v7 = *(void *)(v0 + 360);
    uint64_t v8 = *(void *)(v0 + 384) + 1;
    sub_100EF0DFC(*(void *)(v0 + 320), (uint64_t (*)(void))type metadata accessor for OwnerSharingCircle);
    if (v8 == v7) {
      break;
    }
    uint64_t v9 = *(void *)(v0 + 384) + 1;
    *(void *)(v0 + 376) = v2;
    *(void *)(v0 + 384) = v9;
    uint64_t v10 = *(void *)(v0 + 320);
    uint64_t v11 = *(void *)(v0 + 296);
    sub_100EF0D94(*(void *)(v0 + 248)+ ((*(unsigned __int8 *)(v0 + 448) + 32) & ~(unint64_t)*(unsigned __int8 *)(v0 + 448))+ *(void *)(v0 + 368) * v9, v10, (uint64_t (*)(void))type metadata accessor for OwnerSharingCircle);
    if (*(unsigned char *)(v10 + *(int *)(v11 + 28)) == 2)
    {
      type metadata accessor for AnalyticsEvent(0);
      uint64_t v12 = (char *)swift_allocObject();
      *(void *)(v0 + 392) = v12;
      swift_defaultActor_initialize();
      *((void *)v12 + 14) = sub_10092D664((uint64_t)_swiftEmptyArrayStorage);
      UUID.init()();
      uint64_t v13 = &v12[OBJC_IVAR____TtC12searchpartyd14AnalyticsEvent_startTime];
      uint64_t v14 = type metadata accessor for DispatchTime();
      *(void *)(v0 + 400) = v14;
      uint64_t v15 = *(void *)(v14 - 8);
      uint64_t v16 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v15 + 56);
      *(void *)(v0 + 408) = v16;
      *(void *)(v0 + 416) = (v15 + 56) & 0xFFFFFFFFFFFFLL | 0xA0D1000000000000;
      v16(v13, 1, 1, v14);
      v16(&v12[OBJC_IVAR____TtC12searchpartyd14AnalyticsEvent_endTime], 1, 1, v14);
      *((void *)v12 + 15) = 0xD000000000000037;
      *((void *)v12 + 16) = 0x8000000101419E80;
      return _swift_task_switch(sub_100EEC7E0, v12, 0);
    }
  }
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v17 = *(uint64_t (**)(uint64_t))(v0 + 8);
  return v17(v2);
}

uint64_t sub_100EECDD0()
{
  uint64_t v33 = v0;
  if (qword_101636888 != -1) {
    swift_once();
  }
  uint64_t v2 = *(void *)(v0 + 312);
  uint64_t v1 = *(void *)(v0 + 320);
  uint64_t v3 = type metadata accessor for Logger();
  sub_100010324(v3, (uint64_t)qword_10170D788);
  sub_100EF0D94(v1, v2, (uint64_t (*)(void))type metadata accessor for OwnerSharingCircle);
  swift_errorRetain();
  swift_errorRetain();
  uint64_t v4 = Logger.logObject.getter();
  os_log_type_t v5 = static os_log_type_t.error.getter();
  BOOL v6 = os_log_type_enabled(v4, v5);
  uint64_t v7 = *(void *)(v0 + 312);
  if (v6)
  {
    uint64_t v8 = swift_slowAlloc();
    uint64_t v31 = (void *)swift_slowAlloc();
    uint64_t v32 = swift_slowAlloc();
    *(_DWORD *)uint64_t v8 = 141558531;
    *(void *)(v0 + 224) = 1752392040;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v8 + 12) = 2081;
    sub_10028B80C();
    uint64_t v9 = dispatch thunk of CustomStringConvertible.description.getter();
    *(void *)(v0 + 232) = sub_1008FA0F0(v9, v10, &v32);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    sub_100EF0DFC(v7, (uint64_t (*)(void))type metadata accessor for OwnerSharingCircle);
    *(_WORD *)(v8 + 22) = 2114;
    swift_errorRetain();
    uint64_t v11 = _swift_stdlib_bridgeErrorToNSError();
    *(void *)(v0 + 240) = v11;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *uint64_t v31 = v11;
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl((void *)&_mh_execute_header, v4, v5, "Could not prepare analytics event for offer share for beacon %{private,mask.hash}s.\n%{public}@.", (uint8_t *)v8, 0x20u);
    sub_10000588C((uint64_t *)&unk_101638EA0);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    swift_errorRelease();
  }
  else
  {
    swift_errorRelease();
    sub_100EF0DFC(v7, (uint64_t (*)(void))type metadata accessor for OwnerSharingCircle);
    swift_errorRelease();
    swift_errorRelease();
  }
  uint64_t v12 = *(void *)(v0 + 392);
  uint64_t v13 = *(void *)(v0 + 376);
  uint64_t v15 = *(void *)(v0 + 264);
  uint64_t v14 = *(void *)(v0 + 272);
  uint64_t v16 = *(void *)(v0 + 256);
  (*(void (**)(uint64_t, void, uint64_t))(v15 + 16))(v14, *(void *)(v0 + 320) + *(int *)(*(void *)(v0 + 296) + 20), v16);
  swift_retain();
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v32 = v13;
  sub_10016CA6C(v12, v14, isUniquelyReferenced_nonNull_native);
  uint64_t v18 = v32;
  swift_bridgeObjectRelease();
  (*(void (**)(uint64_t, uint64_t))(v15 + 8))(v14, v16);
  swift_release();
  while (1)
  {
    uint64_t v19 = *(void *)(v0 + 360);
    uint64_t v20 = *(void *)(v0 + 384) + 1;
    sub_100EF0DFC(*(void *)(v0 + 320), (uint64_t (*)(void))type metadata accessor for OwnerSharingCircle);
    if (v20 == v19) {
      break;
    }
    uint64_t v21 = *(void *)(v0 + 384) + 1;
    *(void *)(v0 + 376) = v18;
    *(void *)(v0 + 384) = v21;
    uint64_t v22 = *(void *)(v0 + 320);
    uint64_t v23 = *(void *)(v0 + 296);
    sub_100EF0D94(*(void *)(v0 + 248)+ ((*(unsigned __int8 *)(v0 + 448) + 32) & ~(unint64_t)*(unsigned __int8 *)(v0 + 448))+ *(void *)(v0 + 368) * v21, v22, (uint64_t (*)(void))type metadata accessor for OwnerSharingCircle);
    if (*(unsigned char *)(v22 + *(int *)(v23 + 28)) == 2)
    {
      type metadata accessor for AnalyticsEvent(0);
      uint64_t v24 = (char *)swift_allocObject();
      *(void *)(v0 + 392) = v24;
      swift_defaultActor_initialize();
      *((void *)v24 + 14) = sub_10092D664((uint64_t)_swiftEmptyArrayStorage);
      UUID.init()();
      char v25 = &v24[OBJC_IVAR____TtC12searchpartyd14AnalyticsEvent_startTime];
      uint64_t v26 = type metadata accessor for DispatchTime();
      *(void *)(v0 + 400) = v26;
      uint64_t v27 = *(void *)(v26 - 8);
      int64_t v28 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v27 + 56);
      *(void *)(v0 + 408) = v28;
      *(void *)(v0 + 416) = (v27 + 56) & 0xFFFFFFFFFFFFLL | 0xA0D1000000000000;
      v28(v25, 1, 1, v26);
      v28(&v24[OBJC_IVAR____TtC12searchpartyd14AnalyticsEvent_endTime], 1, 1, v26);
      *((void *)v24 + 15) = 0xD000000000000037;
      *((void *)v24 + 16) = 0x8000000101419E80;
      return _swift_task_switch(sub_100EEC7E0, v24, 0);
    }
  }
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v29 = *(uint64_t (**)(uint64_t))(v0 + 8);
  return v29(v18);
}

uint64_t sub_100EED3A8(uint64_t a1)
{
  *(void *)(v1 + 16) = a1;
  return _swift_task_switch(sub_100EED3C8, 0, 0);
}

uint64_t sub_100EED3C8()
{
  unint64_t v1 = v0[2];
  if (v1 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t result = _CocoaArrayWrapper.endIndex.getter();
    uint64_t v2 = result;
    v0[3] = result;
    if (result)
    {
LABEL_3:
      if (v2 < 1)
      {
        __break(1u);
      }
      else
      {
        uint64_t v4 = v0[2];
        v0[4] = 0;
        if ((v4 & 0xC000000000000001) != 0)
        {
          uint64_t v5 = specialized _ArrayBuffer._getElementSlowPath(_:)();
        }
        else
        {
          uint64_t v5 = *(void *)(v4 + 32);
          swift_retain();
        }
        v0[5] = v5;
        uint64_t v8 = (uint64_t (*)(uint64_t))((char *)&dword_10166D7F8 + dword_10166D7F8);
        BOOL v6 = (void *)swift_task_alloc();
        v0[6] = v6;
        *BOOL v6 = v0;
        v6[1] = sub_100EED524;
        return v8(v5);
      }
      return result;
    }
  }
  else
  {
    uint64_t v2 = *(void *)((v1 & 0xFFFFFFFFFFFFFF8) + 0x10);
    uint64_t result = swift_bridgeObjectRetain();
    v0[3] = v2;
    if (v2) {
      goto LABEL_3;
    }
  }
  swift_bridgeObjectRelease();
  uint64_t v7 = (uint64_t (*)(void))v0[1];
  return v7();
}

uint64_t sub_100EED524()
{
  swift_task_dealloc();
  if (v0)
  {
    swift_errorRelease();
    unint64_t v1 = sub_100EF0E60;
  }
  else
  {
    unint64_t v1 = sub_100EED63C;
  }
  return _swift_task_switch(v1, 0, 0);
}

uint64_t sub_100EED63C()
{
  uint64_t v1 = v0[4];
  uint64_t v2 = v0[3];
  swift_release();
  if (v1 + 1 == v2)
  {
    swift_bridgeObjectRelease();
    uint64_t v3 = (uint64_t (*)(void))v0[1];
    return v3();
  }
  else
  {
    uint64_t v5 = v0[4] + 1;
    v0[4] = v5;
    uint64_t v6 = v0[2];
    if ((v6 & 0xC000000000000001) != 0)
    {
      uint64_t v7 = specialized _ArrayBuffer._getElementSlowPath(_:)();
    }
    else
    {
      uint64_t v7 = *(void *)(v6 + 8 * v5 + 32);
      swift_retain();
    }
    v0[5] = v7;
    uint64_t v9 = (uint64_t (*)(uint64_t))((char *)&dword_10166D7F8 + dword_10166D7F8);
    uint64_t v8 = (void *)swift_task_alloc();
    v0[6] = v8;
    *uint64_t v8 = v0;
    v8[1] = sub_100EED524;
    return v9(v7);
  }
}

uint64_t sub_100EED770(char a1)
{
  *(unsigned char *)(v1 + 120) = a1;
  sub_10000588C(&qword_101639428);
  *(void *)(v1 + 40) = swift_task_alloc();
  *(void *)(v1 + 48) = swift_task_alloc();
  return _swift_task_switch(sub_100EED814, 0, 0);
}

uint64_t sub_100EED814()
{
  type metadata accessor for AnalyticsEvent(0);
  uint64_t v1 = (char *)swift_allocObject();
  v0[7] = v1;
  swift_defaultActor_initialize();
  *((void *)v1 + 14) = sub_10092D664((uint64_t)_swiftEmptyArrayStorage);
  UUID.init()();
  uint64_t v2 = &v1[OBJC_IVAR____TtC12searchpartyd14AnalyticsEvent_startTime];
  uint64_t v3 = type metadata accessor for DispatchTime();
  v0[8] = v3;
  uint64_t v4 = *(void *)(v3 - 8);
  uint64_t v5 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v4 + 56);
  v0[9] = v5;
  v0[10] = (v4 + 56) & 0xFFFFFFFFFFFFLL | 0xA0D1000000000000;
  v5(v2, 1, 1, v3);
  v5(&v1[OBJC_IVAR____TtC12searchpartyd14AnalyticsEvent_endTime], 1, 1, v3);
  *((void *)v1 + 15) = 0xD000000000000034;
  *((void *)v1 + 16) = 0x8000000101419FA0;
  return _swift_task_switch(sub_100EED970, v1, 0);
}

uint64_t sub_100EED970()
{
  uint64_t v1 = *(void (**)(uint64_t, void, uint64_t, uint64_t))(v0 + 72);
  uint64_t v3 = *(void *)(v0 + 56);
  uint64_t v2 = *(void *)(v0 + 64);
  uint64_t v5 = *(void *)(v0 + 40);
  uint64_t v4 = *(void *)(v0 + 48);
  static DispatchTime.now()();
  v1(v4, 0, 1, v2);
  sub_100288DF0(v4, v5);
  uint64_t v6 = v3 + OBJC_IVAR____TtC12searchpartyd14AnalyticsEvent_startTime;
  swift_beginAccess();
  sub_10003377C(v5, v6);
  swift_endAccess();
  uint64_t v11 = (uint64_t (*)(uint64_t, char))((char *)&dword_10166D7D8 + dword_10166D7D8);
  uint64_t v7 = (void *)swift_task_alloc();
  *(void *)(v0 + 88) = v7;
  *uint64_t v7 = v0;
  v7[1] = sub_100EEDAA4;
  uint64_t v8 = *(void *)(v0 + 56);
  char v9 = *(unsigned char *)(v0 + 120);
  return v11(v8, v9);
}

uint64_t sub_100EEDAA4()
{
  *(void *)(*(void *)v1 + 96) = v0;
  swift_task_dealloc();
  if (v0) {
    uint64_t v2 = sub_100EEDBB8;
  }
  else {
    uint64_t v2 = sub_100EEBAC8;
  }
  return _swift_task_switch(v2, 0, 0);
}

uint64_t sub_100EEDBB8()
{
  if (qword_101636888 != -1) {
    swift_once();
  }
  uint64_t v1 = type metadata accessor for Logger();
  sub_100010324(v1, (uint64_t)qword_10170D788);
  uint64_t v2 = Logger.logObject.getter();
  os_log_type_t v3 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v2, v3))
  {
    uint64_t v4 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v4 = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, v3, "Could not prepare analytics event for Keys  Upload.", v4, 2u);
    swift_slowDealloc();
  }
  swift_errorRelease();

  type metadata accessor for AnalyticsPublisher();
  v0[13] = swift_allocObject();
  swift_defaultActor_initialize();
  uint64_t v5 = (void *)swift_task_alloc();
  v0[14] = v5;
  *uint64_t v5 = v0;
  v5[1] = sub_100EEBB7C;
  uint64_t v6 = v0[7];
  return sub_101196838(v6);
}

uint64_t sub_100EEDD34(uint64_t a1, uint64_t a2)
{
  v2[5] = a1;
  v2[6] = a2;
  sub_10000588C(&qword_101639428);
  v2[7] = swift_task_alloc();
  v2[8] = swift_task_alloc();
  return _swift_task_switch(sub_100EEDDD8, 0, 0);
}

uint64_t sub_100EEDDD8()
{
  type metadata accessor for AnalyticsEvent(0);
  uint64_t v1 = (char *)swift_allocObject();
  v0[9] = v1;
  swift_defaultActor_initialize();
  *((void *)v1 + 14) = sub_10092D664((uint64_t)_swiftEmptyArrayStorage);
  UUID.init()();
  uint64_t v2 = &v1[OBJC_IVAR____TtC12searchpartyd14AnalyticsEvent_startTime];
  uint64_t v3 = type metadata accessor for DispatchTime();
  v0[10] = v3;
  uint64_t v4 = *(void *)(v3 - 8);
  uint64_t v5 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v4 + 56);
  v0[11] = v5;
  v0[12] = (v4 + 56) & 0xFFFFFFFFFFFFLL | 0xA0D1000000000000;
  v5(v2, 1, 1, v3);
  v5(&v1[OBJC_IVAR____TtC12searchpartyd14AnalyticsEvent_endTime], 1, 1, v3);
  *((void *)v1 + 15) = 0xD000000000000040;
  *((void *)v1 + 16) = 0x800000010141A020;
  return _swift_task_switch(sub_100EEDF34, v1, 0);
}

uint64_t sub_100EEDF34()
{
  uint64_t v1 = (void (*)(uint64_t, void, uint64_t, uint64_t))v0[11];
  uint64_t v3 = v0[9];
  uint64_t v2 = v0[10];
  uint64_t v5 = v0[7];
  uint64_t v4 = v0[8];
  static DispatchTime.now()();
  v1(v4, 0, 1, v2);
  sub_100288DF0(v4, v5);
  uint64_t v6 = v3 + OBJC_IVAR____TtC12searchpartyd14AnalyticsEvent_startTime;
  swift_beginAccess();
  sub_10003377C(v5, v6);
  swift_endAccess();
  uint64_t v12 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))((char *)&dword_10166D7F0 + dword_10166D7F0);
  uint64_t v7 = (void *)swift_task_alloc();
  v0[13] = v7;
  *uint64_t v7 = v0;
  v7[1] = sub_100EEE068;
  uint64_t v8 = v0[9];
  uint64_t v9 = v0[5];
  uint64_t v10 = v0[6];
  return v12(v8, v9, v10);
}

uint64_t sub_100EEE068()
{
  *(void *)(*(void *)v1 + 112) = v0;
  swift_task_dealloc();
  if (v0) {
    uint64_t v2 = sub_100EEE3BC;
  }
  else {
    uint64_t v2 = sub_100EEE17C;
  }
  return _swift_task_switch(v2, 0, 0);
}

uint64_t sub_100EEE17C()
{
  type metadata accessor for AnalyticsPublisher();
  v0[15] = swift_allocObject();
  swift_defaultActor_initialize();
  uint64_t v1 = (void *)swift_task_alloc();
  v0[16] = v1;
  *uint64_t v1 = v0;
  v1[1] = sub_100EEE230;
  uint64_t v2 = v0[9];
  return sub_101196838(v2);
}

uint64_t sub_100EEE230()
{
  swift_task_dealloc();
  swift_release();
  return _swift_task_switch(sub_100EEE348, 0, 0);
}

uint64_t sub_100EEE348()
{
  swift_release();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_100EEE3BC()
{
  if (qword_101636888 != -1) {
    swift_once();
  }
  uint64_t v1 = type metadata accessor for Logger();
  sub_100010324(v1, (uint64_t)qword_10170D788);
  uint64_t v2 = Logger.logObject.getter();
  os_log_type_t v3 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v2, v3))
  {
    uint64_t v4 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v4 = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, v3, "Could not prepare analytics event for Owned Daily Shares Count.", v4, 2u);
    swift_slowDealloc();
  }
  swift_errorRelease();

  type metadata accessor for AnalyticsPublisher();
  v0[15] = swift_allocObject();
  swift_defaultActor_initialize();
  uint64_t v5 = (void *)swift_task_alloc();
  v0[16] = v5;
  *uint64_t v5 = v0;
  v5[1] = sub_100EEE230;
  uint64_t v6 = v0[9];
  return sub_101196838(v6);
}

uint64_t sub_100EEE538(char a1, char a2)
{
  *(unsigned char *)(v2 + 497) = a2;
  *(unsigned char *)(v2 + 496) = a1;
  uint64_t v3 = type metadata accessor for MemberSharingCircle();
  *(void *)(v2 + 168) = v3;
  *(void *)(v2 + 176) = *(void *)(v3 - 8);
  *(void *)(v2 + 184) = swift_task_alloc();
  *(void *)(v2 + 192) = swift_task_alloc();
  *(void *)(v2 + 200) = swift_task_alloc();
  *(void *)(v2 + 208) = swift_task_alloc();
  *(void *)(v2 + 216) = swift_task_alloc();
  *(void *)(v2 + 224) = type metadata accessor for StableIdentifier();
  *(void *)(v2 + 232) = swift_task_alloc();
  *(void *)(v2 + 240) = swift_task_alloc();
  *(void *)(v2 + 248) = swift_task_alloc();
  uint64_t v4 = type metadata accessor for OwnedBeaconRecord();
  *(void *)(v2 + 256) = v4;
  *(void *)(v2 + 264) = *(void *)(v4 - 8);
  *(void *)(v2 + 272) = swift_task_alloc();
  *(void *)(v2 + 280) = swift_task_alloc();
  sub_10000588C(&qword_101639428);
  *(void *)(v2 + 288) = swift_task_alloc();
  *(void *)(v2 + 296) = swift_task_alloc();
  return _swift_task_switch(sub_100EEE728, 0, 0);
}

uint64_t sub_100EEE728()
{
  if (qword_1016375E8 != -1) {
    swift_once();
  }
  swift_beginAccess();
  uint64_t result = sub_1000977C4((uint64_t)&xmmword_10166E8F0, v0 + 56);
  if (*(void *)(v0 + 80))
  {
    sub_10001CEB0((long long *)(v0 + 56), v0 + 16);
    sub_10001CD44((void *)(v0 + 16), *(void *)(v0 + 40));
    uint64_t v3 = (uint64_t (__cdecl *)())((char *)&dword_1016390D8 + dword_1016390D8);
    uint64_t v2 = (void *)swift_task_alloc();
    *(void *)(v0 + 304) = v2;
    *uint64_t v2 = v0;
    v2[1] = sub_100EEE85C;
    return v3();
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_100EEE85C(uint64_t a1)
{
  *(void *)(*(void *)v1 + 312) = a1;
  swift_task_dealloc();
  return _swift_task_switch(sub_100EEE95C, 0, 0);
}

uint64_t sub_100EEE95C()
{
  uint64_t v1 = v0[39];
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)(v0 + 2));
  if (v1)
  {
    type metadata accessor for AnalyticsEvent(0);
    uint64_t v2 = (char *)swift_allocObject();
    v0[40] = v2;
    swift_defaultActor_initialize();
    *((void *)v2 + 14) = sub_10092D664((uint64_t)_swiftEmptyArrayStorage);
    UUID.init()();
    uint64_t v3 = &v2[OBJC_IVAR____TtC12searchpartyd14AnalyticsEvent_startTime];
    uint64_t v4 = type metadata accessor for DispatchTime();
    v0[41] = v4;
    uint64_t v5 = *(void *)(v4 - 8);
    uint64_t v6 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v5 + 56);
    v0[42] = v6;
    v0[43] = (v5 + 56) & 0xFFFFFFFFFFFFLL | 0xA0D1000000000000;
    v6(v3, 1, 1, v4);
    v6(&v2[OBJC_IVAR____TtC12searchpartyd14AnalyticsEvent_endTime], 1, 1, v4);
    *((void *)v2 + 15) = 0xD000000000000037;
    *((void *)v2 + 16) = 0x8000000101419DC0;
    return _swift_task_switch(sub_100EEEC48, v2, 0);
  }
  else
  {
    if (qword_101636888 != -1) {
      swift_once();
    }
    uint64_t v7 = type metadata accessor for Logger();
    sub_100010324(v7, (uint64_t)qword_10170D788);
    uint64_t v8 = Logger.logObject.getter();
    os_log_type_t v9 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v8, v9))
    {
      uint64_t v10 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v10 = 0;
      _os_log_impl((void *)&_mh_execute_header, v8, v9, "Could not get beaconStore reference for analytics.", v10, 2u);
      swift_slowDealloc();
    }

    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v11 = (uint64_t (*)(void))v0[1];
    return v11();
  }
}

uint64_t sub_100EEEC48()
{
  uint64_t v1 = (void (*)(uint64_t, void, uint64_t, uint64_t))v0[42];
  uint64_t v3 = v0[40];
  uint64_t v2 = v0[41];
  uint64_t v5 = v0[36];
  uint64_t v4 = v0[37];
  static DispatchTime.now()();
  v1(v4, 0, 1, v2);
  sub_100288DF0(v4, v5);
  uint64_t v6 = v3 + OBJC_IVAR____TtC12searchpartyd14AnalyticsEvent_startTime;
  swift_beginAccess();
  sub_10003377C(v5, v6);
  swift_endAccess();
  uint64_t v7 = v0[39];
  return _swift_task_switch(sub_100EEED30, v7, 0);
}

uint64_t sub_100EEED30()
{
  *(void *)(v0 + 352) = *(void *)(*(void *)(v0 + 312) + 136);
  swift_retain();
  return _swift_task_switch(sub_100EEEDA4, 0, 0);
}

uint64_t sub_100EEEDA4()
{
  uint64_t v1 = v0[44];
  uint64_t v2 = v0[39];
  uint64_t v3 = (void *)swift_task_alloc();
  v0[45] = v3;
  void v3[2] = v1;
  v3[3] = sub_1000909A4;
  v3[4] = v2;
  uint64_t v4 = (void *)swift_task_alloc();
  v0[46] = v4;
  uint64_t v5 = sub_10000588C((uint64_t *)&unk_101660AA0);
  *uint64_t v4 = v0;
  v4[1] = sub_100EEEEC0;
  return withCheckedContinuation<A>(isolation:function:_:)(v0 + 18, 0, 0, 0xD000000000000012, 0x80000001013F1870, sub_1000909AC, v3, v5);
}

uint64_t sub_100EEEEC0()
{
  uint64_t v1 = *v0;
  swift_task_dealloc();
  swift_release();
  swift_task_dealloc();
  *(void *)(v1 + 376) = *(void *)(v1 + 144);
  return _swift_task_switch(sub_100EEF01C, 0, 0);
}

uint64_t sub_100EEF01C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = v3[47];
  uint64_t v26 = *(void *)(v4 + 16);
  if (v26)
  {
    unint64_t v5 = 0;
    uint64_t v23 = v3[47];
    uint64_t v24 = v3[32];
    uint64_t v25 = v3[33];
    while (1)
    {
      if (v5 >= *(void *)(v4 + 16))
      {
        __break(1u);
        return _swift_task_switch(a1, a2, a3);
      }
      uint64_t v8 = v3[35];
      uint64_t v10 = v3[30];
      uint64_t v9 = v3[31];
      unint64_t v11 = (*(unsigned __int8 *)(v25 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v25 + 80);
      uint64_t v12 = *(void *)(v25 + 72);
      sub_100EF0D94(v3[47] + v11 + v12 * v5, v8, (uint64_t (*)(void))type metadata accessor for OwnedBeaconRecord);
      uint64_t v13 = v8 + *(int *)(v24 + 24);
      sub_100EF0D94(v13, v9, (uint64_t (*)(void))type metadata accessor for StableIdentifier);
      int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
      sub_100EF0DFC(v9, (uint64_t (*)(void))type metadata accessor for StableIdentifier);
      sub_100EF0D94(v13, v10, (uint64_t (*)(void))type metadata accessor for StableIdentifier);
      uint64_t v15 = v3[30];
      if (EnumCaseMultiPayload == 1) {
        break;
      }
      sub_100EF0D94(v3[30], v3[29], (uint64_t (*)(void))type metadata accessor for StableIdentifier);
      int v16 = swift_getEnumCaseMultiPayload();
      if (v16 == 2)
      {
        sub_10000588C(&qword_1016555E0);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
LABEL_12:
        uint64_t v4 = v23;
        uint64_t v17 = v3[29];
        uint64_t v15 = v3[30];
        swift_bridgeObjectRelease();
        uint64_t v18 = type metadata accessor for UUID();
        (*(void (**)(uint64_t, uint64_t))(*(void *)(v18 - 8) + 8))(v17, v18);
LABEL_13:
        sub_100EF0DFC(v15, (uint64_t (*)(void))type metadata accessor for StableIdentifier);
        sub_100EF0D2C(v3[35], v3[34], (uint64_t (*)(void))type metadata accessor for OwnedBeaconRecord);
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          sub_1000B74D8(0, _swiftEmptyArrayStorage[2] + 1, 1);
        }
        unint64_t v20 = _swiftEmptyArrayStorage[2];
        unint64_t v19 = _swiftEmptyArrayStorage[3];
        if (v20 >= v19 >> 1) {
          sub_1000B74D8(v19 > 1, v20 + 1, 1);
        }
        uint64_t v21 = v3[34];
        _swiftEmptyArrayStorage[2] = v20 + 1;
        a1 = sub_100EF0D2C(v21, (uint64_t)_swiftEmptyArrayStorage + v11 + v20 * v12, (uint64_t (*)(void))type metadata accessor for OwnedBeaconRecord);
        goto LABEL_4;
      }
      if (v16 == 3)
      {
        sub_10000588C((uint64_t *)&unk_1016565E0);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        goto LABEL_12;
      }
      uint64_t v6 = v3[35];
      uint64_t v7 = v3[30];
      sub_100EF0DFC(v3[29], (uint64_t (*)(void))type metadata accessor for StableIdentifier);
      sub_100EF0DFC(v7, (uint64_t (*)(void))type metadata accessor for StableIdentifier);
      a1 = sub_100EF0DFC(v6, (uint64_t (*)(void))type metadata accessor for OwnedBeaconRecord);
      uint64_t v4 = v23;
LABEL_4:
      if (v26 == ++v5) {
        goto LABEL_18;
      }
    }
    uint64_t v4 = v23;
    goto LABEL_13;
  }
LABEL_18:
  swift_bridgeObjectRelease();
  v3[48] = _swiftEmptyArrayStorage[2];
  swift_release();
  a2 = v3[39];
  a1 = (uint64_t)sub_100EEF3DC;
  a3 = 0;
  return _swift_task_switch(a1, a2, a3);
}

uint64_t sub_100EEF3DC()
{
  *(void *)(v0 + 392) = *(void *)(*(void *)(v0 + 312) + 136);
  swift_retain();
  return _swift_task_switch(sub_100EEF450, 0, 0);
}

uint64_t sub_100EEF450()
{
  uint64_t v1 = v0[49];
  uint64_t v2 = v0[39];
  uint64_t v3 = (void *)swift_task_alloc();
  v0[50] = v3;
  void v3[2] = v1;
  v3[3] = sub_1000730D8;
  v3[4] = v2;
  uint64_t v4 = (void *)swift_task_alloc();
  v0[51] = v4;
  uint64_t v5 = sub_10000588C((uint64_t *)&unk_101653DF0);
  v0[52] = v5;
  *uint64_t v4 = v0;
  v4[1] = sub_100EEF570;
  return withCheckedContinuation<A>(isolation:function:_:)(v0 + 19, 0, 0, 0xD000000000000012, 0x80000001013F1870, sub_1000730E0, v3, v5);
}

uint64_t sub_100EEF570()
{
  uint64_t v1 = *v0;
  swift_task_dealloc();
  swift_release();
  swift_task_dealloc();
  *(void *)(v1 + 424) = *(void *)(v1 + 152);
  return _swift_task_switch(sub_100EEF6CC, 0, 0);
}

uint64_t sub_100EEF6CC()
{
  uint64_t v1 = v0[53];
  uint64_t v2 = _swiftEmptyArrayStorage;
  uint64_t v3 = *(void *)(v1 + 16);
  uint64_t v4 = (void *)swift_bridgeObjectRetain();
  uint64_t v38 = v3;
  if (!v3)
  {
    swift_bridgeObjectRelease();
    v0[54] = _swiftEmptyArrayStorage[2];
    swift_release();
    swift_bridgeObjectRetain();
LABEL_25:
    uint64_t v32 = v0[53];
    uint64_t v33 = v0[39];
    swift_bridgeObjectRelease();
    v0[55] = v2[2];
    swift_release();
    v0[20] = v32;
    uint64_t v34 = (void *)swift_task_alloc();
    v0[56] = v34;
    uint64_t v8 = sub_100062734((unint64_t *)&qword_10163D768, (uint64_t *)&unk_101653DF0);
    *uint64_t v34 = v0;
    v34[1] = sub_100EEFB58;
    uint64_t v6 = v0[52];
    uint64_t v7 = &type metadata for String;
    uint64_t v4 = &unk_101662A40;
    uint64_t v5 = v33;
    return Sequence.asyncCompactMap<A>(_:)(v4, v5, v6, v7, v8);
  }
  unint64_t v9 = 0;
  uint64_t v10 = v0[21];
  uint64_t v36 = v0[22];
  uint64_t v37 = v1;
  do
  {
    if (v9 >= *(void *)(v1 + 16))
    {
      __break(1u);
      goto LABEL_29;
    }
    uint64_t v12 = v0[26];
    uint64_t v11 = v0[27];
    unint64_t v13 = (*(unsigned __int8 *)(v36 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v36 + 80);
    uint64_t v14 = *(void *)(v36 + 72);
    sub_100EF0D94(v0[53] + v13 + v14 * v9, v11, (uint64_t (*)(void))type metadata accessor for MemberSharingCircle);
    int v15 = *(unsigned __int8 *)(v11 + *(int *)(v10 + 40));
    sub_100EF0D94(v11, v12, (uint64_t (*)(void))type metadata accessor for MemberSharingCircle);
    uint64_t v16 = v0[26];
    if (v15 == 1)
    {
      sub_100EF0DFC(v16, (uint64_t (*)(void))type metadata accessor for MemberSharingCircle);
    }
    else
    {
      int v17 = *(unsigned __int8 *)(v16 + *(int *)(v10 + 40));
      sub_100EF0DFC(v16, (uint64_t (*)(void))type metadata accessor for MemberSharingCircle);
      if (v17 != 4)
      {
        uint64_t v4 = (void *)sub_100EF0DFC(v0[27], (uint64_t (*)(void))type metadata accessor for MemberSharingCircle);
        goto LABEL_4;
      }
    }
    sub_100EF0D2C(v0[27], v0[25], (uint64_t (*)(void))type metadata accessor for MemberSharingCircle);
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
      sub_1000B71E0(0, _swiftEmptyArrayStorage[2] + 1, 1);
    }
    unint64_t v19 = _swiftEmptyArrayStorage[2];
    unint64_t v18 = _swiftEmptyArrayStorage[3];
    if (v19 >= v18 >> 1) {
      sub_1000B71E0(v18 > 1, v19 + 1, 1);
    }
    uint64_t v20 = v0[25];
    _swiftEmptyArrayStorage[2] = v19 + 1;
    uint64_t v4 = (void *)sub_100EF0D2C(v20, (uint64_t)_swiftEmptyArrayStorage + v13 + v19 * v14, (uint64_t (*)(void))type metadata accessor for MemberSharingCircle);
LABEL_4:
    ++v9;
  }
  while (v38 != v9);
  swift_bridgeObjectRelease();
  v0[54] = _swiftEmptyArrayStorage[2];
  swift_release();
  uint64_t v2 = _swiftEmptyArrayStorage;
  uint64_t v4 = (void *)swift_bridgeObjectRetain();
  unint64_t v21 = 0;
  uint64_t v23 = v0[21];
  uint64_t v22 = v0[22];
  while (v21 < *(void *)(v37 + 16))
  {
    uint64_t v24 = v0[24];
    unint64_t v25 = (*(unsigned __int8 *)(v22 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v22 + 80);
    uint64_t v26 = *(void *)(v22 + 72);
    sub_100EF0D94(v0[53] + v25 + v26 * v21, v24, (uint64_t (*)(void))type metadata accessor for MemberSharingCircle);
    uint64_t v27 = v0[24];
    if (*(unsigned char *)(v24 + *(int *)(v23 + 40)))
    {
      uint64_t v4 = (void *)sub_100EF0DFC(v27, (uint64_t (*)(void))type metadata accessor for MemberSharingCircle);
    }
    else
    {
      sub_100EF0D2C(v27, v0[23], (uint64_t (*)(void))type metadata accessor for MemberSharingCircle);
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        sub_1000B71E0(0, v2[2] + 1, 1);
        uint64_t v2 = _swiftEmptyArrayStorage;
      }
      int64_t v28 = v2;
      unint64_t v29 = v2[2];
      unint64_t v30 = v28[3];
      if (v29 >= v30 >> 1)
      {
        sub_1000B71E0(v30 > 1, v29 + 1, 1);
        int64_t v28 = _swiftEmptyArrayStorage;
      }
      uint64_t v31 = v0[23];
      void v28[2] = v29 + 1;
      uint64_t v4 = (void *)sub_100EF0D2C(v31, (uint64_t)v28 + v25 + v29 * v26, (uint64_t (*)(void))type metadata accessor for MemberSharingCircle);
      uint64_t v2 = v28;
    }
    if (v38 == ++v21) {
      goto LABEL_25;
    }
  }
LABEL_29:
  __break(1u);
  return Sequence.asyncCompactMap<A>(_:)(v4, v5, v6, v7, v8);
}

uint64_t sub_100EEFB58(uint64_t a1)
{
  *(void *)(*(void *)v1 + 456) = a1;
  swift_task_dealloc();
  swift_bridgeObjectRelease();
  return _swift_task_switch(sub_100EEFC78, 0, 0);
}

uint64_t sub_100EEFC78()
{
  uint64_t v1 = sub_101158614(*(void *)(v0 + 456));
  swift_bridgeObjectRelease();
  uint64_t v2 = *(void *)(v1 + 16);
  swift_bridgeObjectRelease();
  uint64_t v11 = (uint64_t (*)(uint64_t, char, uint64_t, uint64_t, uint64_t, uint64_t, char))((char *)&dword_10166D768
                                                                                        + dword_10166D768);
  uint64_t v3 = (void *)swift_task_alloc();
  *(void *)(v0 + 464) = v3;
  *uint64_t v3 = v0;
  v3[1] = sub_100EEFD64;
  uint64_t v4 = *(void *)(v0 + 432);
  uint64_t v5 = *(void *)(v0 + 440);
  uint64_t v6 = *(void *)(v0 + 384);
  uint64_t v7 = *(void *)(v0 + 320);
  char v8 = *(unsigned char *)(v0 + 497);
  char v9 = *(unsigned char *)(v0 + 496);
  return v11(v7, v9, v6, v4, v5, v2, v8);
}

uint64_t sub_100EEFD64()
{
  *(void *)(*(void *)v1 + 472) = v0;
  swift_task_dealloc();
  if (v0) {
    uint64_t v2 = sub_100EF0148;
  }
  else {
    uint64_t v2 = sub_100EEFE78;
  }
  return _swift_task_switch(v2, 0, 0);
}

uint64_t sub_100EEFE78()
{
  type metadata accessor for AnalyticsPublisher();
  v0[60] = swift_allocObject();
  swift_defaultActor_initialize();
  uint64_t v1 = (void *)swift_task_alloc();
  v0[61] = v1;
  *uint64_t v1 = v0;
  v1[1] = sub_100EEFF2C;
  uint64_t v2 = v0[40];
  return sub_101196838(v2);
}

uint64_t sub_100EEFF2C()
{
  swift_task_dealloc();
  swift_release();
  return _swift_task_switch(sub_100EF0044, 0, 0);
}

uint64_t sub_100EF0044()
{
  swift_release();
  swift_release();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_100EF0148()
{
  if (qword_101636888 != -1) {
    swift_once();
  }
  uint64_t v1 = type metadata accessor for Logger();
  sub_100010324(v1, (uint64_t)qword_10170D788);
  uint64_t v2 = Logger.logObject.getter();
  os_log_type_t v3 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v2, v3))
  {
    uint64_t v4 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v4 = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, v3, "Could not prepare analytics event for incoming share.", v4, 2u);
    swift_slowDealloc();
  }
  swift_errorRelease();

  type metadata accessor for AnalyticsPublisher();
  v0[60] = swift_allocObject();
  swift_defaultActor_initialize();
  uint64_t v5 = (void *)swift_task_alloc();
  v0[61] = v5;
  *uint64_t v5 = v0;
  v5[1] = sub_100EEFF2C;
  uint64_t v6 = v0[40];
  return sub_101196838(v6);
}

uint64_t sub_100EF02C4(uint64_t a1, uint64_t a2)
{
  v2[5] = a1;
  v2[6] = a2;
  sub_10000588C(&qword_101639428);
  v2[7] = swift_task_alloc();
  v2[8] = swift_task_alloc();
  return _swift_task_switch(sub_100EF0368, 0, 0);
}

uint64_t sub_100EF0368()
{
  type metadata accessor for AnalyticsEvent(0);
  uint64_t v1 = (char *)swift_allocObject();
  v0[9] = v1;
  swift_defaultActor_initialize();
  *((void *)v1 + 14) = sub_10092D664((uint64_t)_swiftEmptyArrayStorage);
  UUID.init()();
  uint64_t v2 = &v1[OBJC_IVAR____TtC12searchpartyd14AnalyticsEvent_startTime];
  uint64_t v3 = type metadata accessor for DispatchTime();
  v0[10] = v3;
  uint64_t v4 = *(void *)(v3 - 8);
  uint64_t v5 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v4 + 56);
  v0[11] = v5;
  v0[12] = (v4 + 56) & 0xFFFFFFFFFFFFLL | 0xA0D1000000000000;
  v5(v2, 1, 1, v3);
  v5(&v1[OBJC_IVAR____TtC12searchpartyd14AnalyticsEvent_endTime], 1, 1, v3);
  *((void *)v1 + 15) = 0xD000000000000044;
  *((void *)v1 + 16) = 0x8000000101419D30;
  return _swift_task_switch(sub_100EF04C4, v1, 0);
}

uint64_t sub_100EF04C4()
{
  uint64_t v1 = (void (*)(uint64_t, void, uint64_t, uint64_t))v0[11];
  uint64_t v3 = v0[9];
  uint64_t v2 = v0[10];
  uint64_t v5 = v0[7];
  uint64_t v4 = v0[8];
  static DispatchTime.now()();
  v1(v4, 0, 1, v2);
  sub_100288DF0(v4, v5);
  uint64_t v6 = v3 + OBJC_IVAR____TtC12searchpartyd14AnalyticsEvent_startTime;
  swift_beginAccess();
  sub_10003377C(v5, v6);
  swift_endAccess();
  uint64_t v12 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))((char *)&dword_10166D6C8 + dword_10166D6C8);
  uint64_t v7 = (void *)swift_task_alloc();
  v0[13] = v7;
  *uint64_t v7 = v0;
  v7[1] = sub_100EF05F8;
  uint64_t v8 = v0[9];
  uint64_t v9 = v0[5];
  uint64_t v10 = v0[6];
  return v12(v8, v9, v10);
}

uint64_t sub_100EF05F8()
{
  *(void *)(*(void *)v1 + 112) = v0;
  swift_task_dealloc();
  if (v0) {
    uint64_t v2 = sub_100EF08D8;
  }
  else {
    uint64_t v2 = sub_100EF070C;
  }
  return _swift_task_switch(v2, 0, 0);
}

uint64_t sub_100EF070C()
{
  type metadata accessor for AnalyticsPublisher();
  v0[15] = swift_allocObject();
  swift_defaultActor_initialize();
  uint64_t v1 = (void *)swift_task_alloc();
  v0[16] = v1;
  *uint64_t v1 = v0;
  v1[1] = sub_100EF07C0;
  uint64_t v2 = v0[9];
  return sub_101196838(v2);
}

uint64_t sub_100EF07C0()
{
  swift_task_dealloc();
  swift_release();
  return _swift_task_switch(sub_100EF0E64, 0, 0);
}

uint64_t sub_100EF08D8()
{
  if (qword_101636888 != -1) {
    swift_once();
  }
  uint64_t v1 = type metadata accessor for Logger();
  sub_100010324(v1, (uint64_t)qword_10170D788);
  uint64_t v2 = Logger.logObject.getter();
  os_log_type_t v3 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v2, v3))
  {
    uint64_t v4 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v4 = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, v3, "Could not prepare analytics event for sytem error display id prefix.", v4, 2u);
    swift_slowDealloc();
  }
  swift_errorRelease();

  type metadata accessor for AnalyticsPublisher();
  v0[15] = swift_allocObject();
  swift_defaultActor_initialize();
  uint64_t v5 = (void *)swift_task_alloc();
  v0[16] = v5;
  *uint64_t v5 = v0;
  v5[1] = sub_100EF07C0;
  uint64_t v6 = v0[9];
  return sub_101196838(v6);
}

uint64_t sub_100EF0A54(uint64_t a1, uint64_t a2)
{
  uint64_t v6 = (void *)swift_task_alloc();
  *(void *)(v3 + 16) = v6;
  *uint64_t v6 = v3;
  v6[1] = sub_10001D2E4;
  return sub_100EE9F98(a1, a2, v2);
}

uint64_t sub_100EF0B04()
{
  return sub_100EF0CA4((uint64_t (*)(uint64_t, uint64_t))sub_100E591C4);
}

uint64_t sub_100EF0B1C()
{
  uint64_t v2 = v0[2];
  uint64_t v3 = v0[3];
  uint64_t v4 = v0[4];
  uint64_t v5 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v5;
  *uint64_t v5 = v1;
  v5[1] = sub_10013067C;
  return sub_100EE8968(v2, v3, v4);
}

uint64_t sub_100EF0BC4(uint64_t a1)
{
  uint64_t v5 = *(void *)(v1 + 16);
  uint64_t v4 = *(void *)(v1 + 24);
  uint64_t v6 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v6;
  *uint64_t v6 = v2;
  v6[1] = sub_10012E0C8;
  return sub_100EE92E4(a1, v5, v4);
}

uint64_t sub_100EF0C70()
{
  return sub_100EF0CA4((uint64_t (*)(uint64_t, uint64_t))sub_100E63424);
}

uint64_t sub_100EF0C8C()
{
  return sub_100EF0CA4((uint64_t (*)(uint64_t, uint64_t))sub_100E58EC8);
}

uint64_t sub_100EF0CA4(uint64_t (*a1)(uint64_t, uint64_t))
{
  uint64_t v2 = *(void *)(type metadata accessor for UUID() - 8);
  uint64_t v3 = *(void *)(v1 + 16);
  uint64_t v4 = v1 + ((*(unsigned __int8 *)(v2 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80));

  return a1(v3, v4);
}

uint64_t sub_100EF0D2C(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 32))(a2, a1, v5);
  return a2;
}

uint64_t sub_100EF0D94(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

uint64_t sub_100EF0DFC(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t sub_100EF0E68(uint64_t a1)
{
  v1[4] = a1;
  uint64_t v2 = type metadata accessor for XPCActivity.Criteria.Options();
  v1[5] = v2;
  v1[6] = *(void *)(v2 - 8);
  v1[7] = swift_task_alloc();
  uint64_t v3 = type metadata accessor for XPCActivity.Priority();
  v1[8] = v3;
  v1[9] = *(void *)(v3 - 8);
  v1[10] = swift_task_alloc();
  return _swift_task_switch(sub_100EF0F84, 0, 0);
}

uint64_t sub_100EF0F84()
{
  if (qword_101636CD8 != -1) {
    swift_once();
  }
  uint64_t v1 = qword_10170E390;
  *(void *)(v0 + 88) = qword_10170E390;
  swift_retain();
  uint64_t v2 = (void *)swift_task_alloc();
  *(void *)(v0 + 96) = v2;
  *uint64_t v2 = v0;
  v2[1] = sub_100EF1090;
  return unsafeBlocking<A>(_:)(v0 + 16, sub_10001D704, v1, &type metadata for Configuration);
}

uint64_t sub_100EF1090()
{
  swift_task_dealloc();
  swift_release();
  return _swift_task_switch(sub_100EF11A8, 0, 0);
}

unint64_t sub_100EF11A8()
{
  uint64_t v1 = v0[2];
  (*(void (**)(void, void, void))(v0[9] + 104))(v0[10], enum case for XPCActivity.Priority.utility(_:), v0[8]);
  unint64_t result = sub_1010AC2B0(v1);
  if (!is_mul_ok(result, 0x3CuLL))
  {
    __break(1u);
    goto LABEL_9;
  }
  if (((60 * result) & 0x8000000000000000) != 0)
  {
LABEL_9:
    __break(1u);
    goto LABEL_10;
  }
  unint64_t v3 = sub_1010AC29C(v1);
  unint64_t result = swift_bridgeObjectRelease();
  if (!is_mul_ok(v3, 0x3CuLL))
  {
LABEL_10:
    __break(1u);
    goto LABEL_11;
  }
  if (((60 * v3) & 0x8000000000000000) != 0)
  {
LABEL_11:
    __break(1u);
    return result;
  }
  sub_10000588C(&qword_101641288);
  uint64_t v4 = swift_allocObject();
  *(_OWORD *)(v4 + 16) = xmmword_101364D30;
  static XPCActivity.Criteria.Options.wakeDevice.getter();
  static XPCActivity.Criteria.Options.powerNap.getter();
  static XPCActivity.Criteria.Options.allowBattery.getter();
  static XPCActivity.Criteria.Options.requiresNetwork.getter();
  static XPCActivity.Criteria.Options.diskIntensive.getter();
  static XPCActivity.Criteria.Options.cpuIntensive.getter();
  static XPCActivity.Criteria.Options.requiresClassC.getter();
  static XPCActivity.Criteria.Options.preventDeviceSleep.getter();
  v0[3] = v4;
  sub_100EF5B44(&qword_1016394C0, (void (*)(uint64_t))&type metadata accessor for XPCActivity.Criteria.Options);
  sub_10000588C(&qword_101641290);
  sub_1002F6D2C();
  dispatch thunk of SetAlgebra.init<A>(_:)();
  XPCActivity.Criteria.init(priority:repeating:delay:gracePeriod:interval:options:)();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v5 = (uint64_t (*)(void))v0[1];
  return v5();
}

uint64_t sub_100EF13F4(uint64_t a1)
{
  v1[15] = a1;
  uint64_t v3 = type metadata accessor for XPCActivity.State();
  v1[16] = v3;
  v1[17] = *(void *)(v3 - 8);
  v1[18] = swift_task_alloc();
  return _swift_task_switch(sub_100EF14B8, a1, 0);
}

uint64_t sub_100EF14B8()
{
  *(unsigned char *)(v0 + 216) = *(unsigned char *)(*(void *)(v0 + 120) + 128);
  uint64_t v1 = (void *)swift_task_alloc();
  *(void *)(v0 + 152) = v1;
  *uint64_t v1 = v0;
  v1[1] = sub_100EF1554;
  return sub_100EF3B14();
}

uint64_t sub_100EF1554(char a1)
{
  uint64_t v2 = *(void *)(*(void *)v1 + 120);
  *(unsigned char *)(*(void *)v1 + 217) = a1;
  swift_task_dealloc();
  return _swift_task_switch(sub_100EF166C, v2, 0);
}

uint64_t sub_100EF166C()
{
  int v1 = *(unsigned __int8 *)(v0 + 217);
  uint64_t v2 = *(void *)(v0 + 120);
  int v3 = *(unsigned __int8 *)(v2 + 129);
  *(unsigned char *)(v0 + 218) = v3;
  if (v1 != v3)
  {
    *(unsigned char *)(v2 + 129) = v1;
    uint64_t v2 = *(void *)(v0 + 120);
  }
  *(void *)(v0 + 160) = *(void *)(v2 + 120);
  swift_retain();
  return _swift_task_switch(sub_100EF16FC, 0, 0);
}

uint64_t sub_100EF16FC()
{
  if (*(unsigned char *)(v0 + 216))
  {
    if (*(unsigned __int8 *)(v0 + 218) == *(unsigned __int8 *)(v0 + 217))
    {
      swift_release();
    }
    else if (*(void *)(v0 + 160))
    {
      uint64_t v1 = qword_101636888;
      swift_retain();
      if (v1 != -1) {
        swift_once();
      }
      uint64_t v2 = type metadata accessor for Logger();
      sub_100010324(v2, (uint64_t)qword_10170D788);
      int v3 = Logger.logObject.getter();
      os_log_type_t v4 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v3, v4))
      {
        uint64_t v5 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)uint64_t v5 = 0;
        _os_log_impl((void *)&_mh_execute_header, v3, v4, "BeaconSharing beacons shared state changed.", v5, 2u);
        swift_slowDealloc();
      }

      uint64_t v11 = (uint64_t (*)(uint64_t))((char *)&async function pointer to dispatch thunk of XPCActivity.updateCriteria()
                                            + async function pointer to dispatch thunk of XPCActivity.updateCriteria());
      uint64_t v6 = (void *)swift_task_alloc();
      *(void *)(v0 + 208) = v6;
      *uint64_t v6 = v0;
      v6[1] = sub_100EF2060;
      uint64_t v7 = *(void *)(v0 + 144);
      return v11(v7);
    }
    swift_task_dealloc();
    uint64_t v10 = *(uint64_t (**)(void))(v0 + 8);
    return v10();
  }
  else
  {
    if (qword_1016375E8 != -1) {
      swift_once();
    }
    swift_beginAccess();
    uint64_t result = sub_10001D074((uint64_t)&xmmword_10166E8F0, v0 + 56, (uint64_t *)&unk_101638D30);
    if (*(void *)(v0 + 80))
    {
      sub_10001CEB0((long long *)(v0 + 56), v0 + 16);
      sub_10001CD44((void *)(v0 + 16), *(void *)(v0 + 40));
      uint64_t v12 = (uint64_t (*)(void))((char *)&dword_1016390D8 + dword_1016390D8);
      uint64_t v9 = (void *)swift_task_alloc();
      *(void *)(v0 + 168) = v9;
      *uint64_t v9 = v0;
      v9[1] = sub_100EF19E4;
      return v12();
    }
    else
    {
      __break(1u);
    }
  }
  return result;
}

uint64_t sub_100EF19E4(uint64_t a1)
{
  *(void *)(*(void *)v1 + 176) = a1;
  swift_task_dealloc();
  return _swift_task_switch(sub_100EF1AE4, 0, 0);
}

uint64_t sub_100EF1AE4()
{
  uint64_t v1 = *(void *)(v0 + 176);
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v0 + 16);
  if (v1)
  {
    uint64_t v2 = *(void *)(v0 + 176);
    return _swift_task_switch(sub_100EF1C5C, v2, 0);
  }
  else
  {
    if (qword_101636888 != -1) {
      swift_once();
    }
    uint64_t v3 = type metadata accessor for Logger();
    sub_100010324(v3, (uint64_t)qword_10170D788);
    os_log_type_t v4 = Logger.logObject.getter();
    os_log_type_t v5 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v4, v5))
    {
      uint64_t v6 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v6 = 0;
      _os_log_impl((void *)&_mh_execute_header, v4, v5, "Missing BeaconStoreActor!", v6, 2u);
      swift_slowDealloc();
    }

    swift_release();
    swift_task_dealloc();
    uint64_t v7 = *(uint64_t (**)(void))(v0 + 8);
    return v7();
  }
}

uint64_t sub_100EF1C5C()
{
  *(void *)(v0 + 184) = *(void *)(*(void *)(v0 + 176) + 128);
  return _swift_task_switch(sub_100EF1C84, 0, 0);
}

uint64_t sub_100EF1C84()
{
  uint64_t v1 = (void *)swift_task_alloc();
  *(void *)(v0 + 192) = v1;
  *uint64_t v1 = v0;
  v1[1] = sub_100EF1D60;
  uint64_t v2 = *(void *)(v0 + 184);
  return withCheckedContinuation<A>(isolation:function:_:)(v1, 0, 0, 0x696176416E656877, 0xEF2928656C62616CLL, sub_10007561C, v2, (char *)&type metadata for () + 8);
}

uint64_t sub_100EF1D60()
{
  swift_task_dealloc();
  return _swift_task_switch(sub_100EF1E5C, 0, 0);
}

uint64_t sub_100EF1E5C()
{
  uint64_t v1 = (void *)swift_task_alloc();
  *(void *)(v0 + 200) = v1;
  *uint64_t v1 = v0;
  v1[1] = sub_100EF1EEC;
  return sub_100EF2228();
}

uint64_t sub_100EF1EEC()
{
  swift_task_dealloc();
  return _swift_task_switch(sub_100EF1FE8, 0, 0);
}

uint64_t sub_100EF1FE8()
{
  swift_release();
  swift_release();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_100EF2060()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 144);
  uint64_t v2 = *(void *)(*(void *)v0 + 136);
  uint64_t v3 = *(void *)(*(void *)v0 + 128);
  swift_task_dealloc();
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  return _swift_task_switch(sub_100EF21B8, 0, 0);
}

uint64_t sub_100EF21B8()
{
  swift_release_n();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_100EF2228()
{
  v1[2] = v0;
  v1[3] = *v0;
  type metadata accessor for DispatchQoS();
  v1[4] = swift_task_alloc();
  return _swift_task_switch(sub_100EF22E0, v0, 0);
}

uint64_t sub_100EF22E0()
{
  uint64_t v1 = v0[2];
  if (*(unsigned char *)(v1 + 129) == 1)
  {
    uint64_t v2 = v0[3];
    type metadata accessor for XPCActivity();
    static DispatchQoS.default.getter();
    uint64_t v3 = swift_allocObject();
    *(void *)(v3 + 16) = v1;
    *(void *)(v3 + 24) = v2;
    swift_retain_n();
    uint64_t v4 = (void *)swift_task_alloc();
    v0[5] = v4;
    *uint64_t v4 = v0;
    v4[1] = sub_100EF2508;
    uint64_t v5 = v0[4];
    uint64_t v6 = v0[2];
    return XPCActivity.__allocating_init(name:qos:criteriaBlock:handler:)(0xD000000000000024, 0x800000010141A110, v5, &unk_101662C60, v3, &unk_101662C70, v6);
  }
  else
  {
    if (qword_101636888 != -1) {
      swift_once();
    }
    uint64_t v7 = type metadata accessor for Logger();
    sub_100010324(v7, (uint64_t)qword_10170D788);
    uint64_t v8 = Logger.logObject.getter();
    os_log_type_t v9 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v8, v9))
    {
      uint64_t v10 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v10 = 0;
      _os_log_impl((void *)&_mh_execute_header, v8, v9, "No shared beacons, no activity required.", v10, 2u);
      swift_slowDealloc();
    }

    swift_task_dealloc();
    uint64_t v11 = (uint64_t (*)(void))v0[1];
    return v11();
  }
}

uint64_t sub_100EF2508(uint64_t a1)
{
  uint64_t v2 = *(void *)(*(void *)v1 + 16);
  *(void *)(*(void *)v1 + 48) = a1;
  swift_task_dealloc();
  return _swift_task_switch(sub_100EF2620, v2, 0);
}

uint64_t sub_100EF2620()
{
  uint64_t v1 = v0[2];
  *(void *)(v1 + 120) = v0[6];
  swift_release();
  *(unsigned char *)(v1 + 128) = 1;
  swift_task_dealloc();
  uint64_t v2 = (uint64_t (*)(void))v0[1];
  return v2();
}

uint64_t sub_100EF269C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v4[5] = a3;
  v4[6] = a4;
  v4[3] = a1;
  v4[4] = a2;
  sub_10000588C(&qword_101641270);
  v4[7] = swift_task_alloc();
  uint64_t v5 = type metadata accessor for XPCActivity.Criteria();
  v4[8] = v5;
  v4[9] = *(void *)(v5 - 8);
  v4[10] = swift_task_alloc();
  v4[11] = swift_task_alloc();
  uint64_t v6 = (void *)swift_task_alloc();
  v4[12] = v6;
  *uint64_t v6 = v4;
  v6[1] = sub_100EF27D0;
  return sub_100EF3B14();
}

uint64_t sub_100EF27D0(char a1)
{
  uint64_t v2 = *(void *)(*(void *)v1 + 40);
  *(unsigned char *)(*(void *)v1 + 112) = a1;
  swift_task_dealloc();
  return _swift_task_switch(sub_100EF28E8, v2, 0);
}

uint64_t sub_100EF28E8()
{
  uint64_t v34 = v0;
  if (*(unsigned char *)(v0 + 112) == 1)
  {
    uint64_t v1 = *(void *)(v0 + 64);
    uint64_t v2 = *(void *)(v0 + 72);
    uint64_t v3 = *(void *)(v0 + 56);
    sub_10001D074(*(void *)(v0 + 32), v3, &qword_101641270);
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v2 + 48))(v3, 1, v1) == 1)
    {
      sub_10001DAB4(*(void *)(v0 + 56), &qword_101641270);
      uint64_t v4 = (void *)swift_task_alloc();
      *(void *)(v0 + 104) = v4;
      *uint64_t v4 = v0;
      v4[1] = sub_100EF2D7C;
      uint64_t v5 = *(void *)(v0 + 24);
      return sub_100EF0E68(v5);
    }
    uint64_t v14 = *(void (**)(uint64_t, void, uint64_t))(*(void *)(v0 + 72) + 32);
    v14(*(void *)(v0 + 88), *(void *)(v0 + 56), *(void *)(v0 + 64));
    if (qword_101636888 != -1) {
      swift_once();
    }
    uint64_t v15 = *(void *)(v0 + 80);
    uint64_t v16 = *(void *)(v0 + 88);
    uint64_t v17 = *(void *)(v0 + 64);
    uint64_t v18 = *(void *)(v0 + 72);
    uint64_t v19 = type metadata accessor for Logger();
    sub_100010324(v19, (uint64_t)qword_10170D788);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v18 + 16))(v15, v16, v17);
    uint64_t v20 = Logger.logObject.getter();
    os_log_type_t v21 = static os_log_type_t.info.getter();
    BOOL v22 = os_log_type_enabled(v20, v21);
    uint64_t v24 = *(void *)(v0 + 72);
    uint64_t v23 = *(void *)(v0 + 80);
    uint64_t v25 = *(void *)(v0 + 64);
    if (v22)
    {
      uint64_t v26 = (uint8_t *)swift_slowAlloc();
      uint64_t v33 = swift_slowAlloc();
      *(_DWORD *)uint64_t v26 = 136446210;
      sub_100EF5B44(&qword_101662C88, (void (*)(uint64_t))&type metadata accessor for XPCActivity.Criteria);
      uint64_t v27 = dispatch thunk of CustomStringConvertible.description.getter();
      *(void *)(v0 + 16) = sub_1008FA0F0(v27, v28, &v33);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      (*(void (**)(uint64_t, uint64_t))(v24 + 8))(v23, v25);
      _os_log_impl((void *)&_mh_execute_header, v20, v21, "BeaconSharing activity keeping criteria %{public}s.", v26, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      (*(void (**)(void, void))(v24 + 8))(*(void *)(v0 + 80), *(void *)(v0 + 64));
    }

    uint64_t v29 = *(void *)(v0 + 64);
    uint64_t v30 = *(void *)(v0 + 72);
    uint64_t v31 = *(void *)(v0 + 24);
    v14(v31, *(void *)(v0 + 88), v29);
    (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v30 + 56))(v31, 0, 1, v29);
  }
  else
  {
    if (qword_101636888 != -1) {
      swift_once();
    }
    uint64_t v7 = type metadata accessor for Logger();
    sub_100010324(v7, (uint64_t)qword_10170D788);
    uint64_t v8 = Logger.logObject.getter();
    os_log_type_t v9 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v8, v9))
    {
      uint64_t v10 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v10 = 0;
      _os_log_impl((void *)&_mh_execute_header, v8, v9, "BeaconSharing removing activity.", v10, 2u);
      swift_slowDealloc();
    }
    uint64_t v11 = *(void *)(v0 + 64);
    uint64_t v12 = *(void *)(v0 + 72);
    uint64_t v13 = *(void *)(v0 + 24);

    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v12 + 56))(v13, 1, 1, v11);
  }
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v32 = *(uint64_t (**)(void))(v0 + 8);
  return v32();
}

uint64_t sub_100EF2D7C()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 40);
  swift_task_dealloc();
  return _swift_task_switch(sub_100EF2E8C, v1, 0);
}

uint64_t sub_100EF2E8C()
{
  (*(void (**)(void, void, uint64_t, void))(v0[9] + 56))(v0[3], 0, 1, v0[8]);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = (uint64_t (*)(void))v0[1];
  return v1();
}

uint64_t sub_100EF2F20(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v3[4] = a2;
  v3[5] = a3;
  v3[3] = a1;
  sub_10000588C(&qword_101641228);
  v3[6] = swift_task_alloc();
  uint64_t v5 = type metadata accessor for XPCActivity.State();
  v3[7] = v5;
  v3[8] = *(void *)(v5 - 8);
  v3[9] = swift_task_alloc();
  v3[10] = swift_task_alloc();
  return _swift_task_switch(sub_100EF3028, a3, 0);
}

uint64_t sub_100EF3028()
{
  uint64_t v36 = v0;
  if (qword_101636888 != -1) {
    swift_once();
  }
  uint64_t v1 = v0[10];
  uint64_t v2 = v0[7];
  uint64_t v3 = v0[8];
  uint64_t v4 = v0[4];
  uint64_t v5 = type metadata accessor for Logger();
  sub_100010324(v5, (uint64_t)qword_10170D788);
  uint64_t v6 = *(void (**)(uint64_t, uint64_t, uint64_t))(v3 + 16);
  v6(v1, v4, v2);
  uint64_t v7 = Logger.logObject.getter();
  os_log_type_t v8 = static os_log_type_t.default.getter();
  BOOL v9 = os_log_type_enabled(v7, v8);
  uint64_t v10 = v0[10];
  uint64_t v11 = v0[7];
  uint64_t v12 = v0[8];
  if (v9)
  {
    uint64_t v13 = (uint8_t *)swift_slowAlloc();
    uint64_t v35 = swift_slowAlloc();
    *(_DWORD *)uint64_t v13 = 136315138;
    sub_100EF5B44(&qword_1016394A0, (void (*)(uint64_t))&type metadata accessor for XPCActivity.State);
    uint64_t v14 = dispatch thunk of CustomStringConvertible.description.getter();
    v0[2] = sub_1008FA0F0(v14, v15, &v35);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    uint64_t v16 = *(void (**)(uint64_t, uint64_t))(v12 + 8);
    v16(v10, v11);
    _os_log_impl((void *)&_mh_execute_header, v7, v8, "BeaconSharing activity state %s.", v13, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    uint64_t v16 = *(void (**)(uint64_t, uint64_t))(v12 + 8);
    v16(v0[10], v0[7]);
  }

  uint64_t v18 = v0[8];
  uint64_t v17 = v0[9];
  uint64_t v19 = v0[7];
  v6(v17, v0[4], v19);
  int v20 = (*(uint64_t (**)(uint64_t, uint64_t))(v18 + 88))(v17, v19);
  if (v20 != enum case for XPCActivity.State.checkIn(_:) && v20 != enum case for XPCActivity.State.wait(_:))
  {
    if (v20 == enum case for XPCActivity.State.run(_:))
    {
      uint64_t v24 = v0[5];
      type metadata accessor for Transaction();
      static Transaction.named<A>(_:with:)();
      uint64_t v25 = *(void *)(v24 + 120);
      v0[11] = v25;
      if (v25)
      {
        uint64_t v34 = (uint64_t (*)(uint64_t))((char *)&async function pointer to dispatch thunk of XPCActivity.updateCriteria()
                                              + async function pointer to dispatch thunk of XPCActivity.updateCriteria());
        swift_retain();
        uint64_t v26 = (void *)swift_task_alloc();
        v0[12] = v26;
        *uint64_t v26 = v0;
        v26[1] = sub_100EF36E0;
        uint64_t v27 = v0[6];
        return v34(v27);
      }
      uint64_t v32 = v0[6];
      (*(void (**)(uint64_t, uint64_t, uint64_t, void))(v0[8] + 56))(v32, 1, 1, v0[7]);
      sub_10001DAB4(v32, &qword_101641228);
      type metadata accessor for XPCActivity();
      sub_100EF5B44(&qword_101639498, (void (*)(uint64_t))&type metadata accessor for XPCActivity);
      uint64_t v28 = dispatch thunk of Actor.unownedExecutor.getter();
      uint64_t v30 = v33;
      uint64_t v31 = sub_100EF38F8;
      goto LABEL_26;
    }
    if (v20 == enum case for XPCActivity.State.defer(_:))
    {
      type metadata accessor for XPCActivity();
      sub_100EF5B44(&qword_101639498, (void (*)(uint64_t))&type metadata accessor for XPCActivity);
      uint64_t v28 = dispatch thunk of Actor.unownedExecutor.getter();
      uint64_t v30 = v29;
      uint64_t v31 = sub_100EF3600;
LABEL_26:
      return _swift_task_switch(v31, v28, v30);
    }
    if (v20 != enum case for XPCActivity.State.continue(_:) && v20 != enum case for XPCActivity.State.done(_:))
    {
      if (v20 == enum case for XPCActivity.State.invalidated(_:))
      {
        *(unsigned char *)(v0[5] + 128) = 0;
        swift_retain();
        swift_retain();
        dispatch thunk of WorkItemQueue.enqueue(_:)();
        swift_release();
        swift_release();
        swift_release();
      }
      else
      {
        v16(v0[9], v0[7]);
      }
    }
  }
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  BOOL v22 = (uint64_t (*)(void))v0[1];
  return v22();
}

uint64_t sub_100EF3600()
{
  uint64_t v1 = *(void *)(v0 + 40);
  dispatch thunk of XPCActivity.defer()();
  return _swift_task_switch(sub_100EF366C, v1, 0);
}

uint64_t sub_100EF366C()
{
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_100EF36E0()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 40);
  swift_task_dealloc();
  swift_release();
  return _swift_task_switch(sub_100EF380C, v1, 0);
}

uint64_t sub_100EF380C()
{
  uint64_t v1 = v0[6];
  (*(void (**)(uint64_t, void, uint64_t, void))(v0[8] + 56))(v1, 0, 1, v0[7]);
  sub_10001DAB4(v1, &qword_101641228);
  type metadata accessor for XPCActivity();
  sub_100EF5B44(&qword_101639498, (void (*)(uint64_t))&type metadata accessor for XPCActivity);
  uint64_t v3 = dispatch thunk of Actor.unownedExecutor.getter();
  return _swift_task_switch(sub_100EF38F8, v3, v2);
}

uint64_t sub_100EF38F8()
{
  uint64_t v1 = *(void *)(v0 + 40);
  dispatch thunk of XPCActivity.done()();
  return _swift_task_switch(sub_100EF5B8C, v1, 0);
}

uint64_t sub_100EF3964(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = sub_10000588C(&qword_101662C78);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  os_log_type_t v8 = (char *)v16 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t result = swift_beginAccess();
  uint64_t v10 = *(void *)(a2 + 112);
  uint64_t v11 = *(void *)(v10 + 16);
  if (v11)
  {
    v16[0] = v2;
    uint64_t v12 = *(void *)(sub_10000588C(&qword_101657720) - 8);
    uint64_t v13 = v10 + ((*(unsigned __int8 *)(v12 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v12 + 80));
    uint64_t v14 = *(void *)(v12 + 72);
    unint64_t v15 = (void (**)(char *, uint64_t))(v6 + 8);
    swift_bridgeObjectRetain();
    do
    {
      v16[5] = a1;
      swift_retain();
      AsyncStream.Continuation.yield(_:)();
      (*v15)(v8, v5);
      v13 += v14;
      --v11;
    }
    while (v11);
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t sub_100EF3B14()
{
  v1[19] = v0;
  uint64_t v2 = type metadata accessor for UUID();
  v1[20] = v2;
  uint64_t v3 = *(void *)(v2 - 8);
  v1[21] = v3;
  v1[22] = *(void *)(v3 + 64);
  v1[23] = swift_task_alloc();
  v1[24] = swift_task_alloc();
  uint64_t v4 = type metadata accessor for OwnedBeaconRecord();
  v1[25] = v4;
  v1[26] = *(void *)(v4 - 8);
  v1[27] = swift_task_alloc();
  return _swift_task_switch(sub_100EF3C48, v0, 0);
}

uint64_t sub_100EF3C48()
{
  if (qword_1016375E8 != -1) {
    swift_once();
  }
  swift_beginAccess();
  uint64_t result = sub_10001D074((uint64_t)&xmmword_10166E8F0, v0 + 56, (uint64_t *)&unk_101638D30);
  if (*(void *)(v0 + 80))
  {
    sub_10001CEB0((long long *)(v0 + 56), v0 + 16);
    sub_10001CD44((void *)(v0 + 16), *(void *)(v0 + 40));
    uint64_t v3 = (uint64_t (__cdecl *)())((char *)&dword_1016390D8 + dword_1016390D8);
    uint64_t v2 = (void *)swift_task_alloc();
    *(void *)(v0 + 224) = v2;
    *uint64_t v2 = v0;
    v2[1] = sub_100EF3D84;
    return v3();
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_100EF3D84(uint64_t a1)
{
  uint64_t v2 = *(void *)(*(void *)v1 + 152);
  *(void *)(*(void *)v1 + 232) = a1;
  swift_task_dealloc();
  return _swift_task_switch(sub_100EF3E9C, v2, 0);
}

uint64_t sub_100EF3E9C()
{
  uint64_t v1 = *(void *)(v0 + 232);
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v0 + 16);
  if (v1)
  {
    uint64_t v2 = *(void *)(v0 + 232);
    return _swift_task_switch(sub_100EF401C, v2, 0);
  }
  else
  {
    if (qword_101636888 != -1) {
      swift_once();
    }
    uint64_t v3 = type metadata accessor for Logger();
    sub_100010324(v3, (uint64_t)qword_10170D788);
    uint64_t v4 = Logger.logObject.getter();
    os_log_type_t v5 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v4, v5))
    {
      uint64_t v6 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v6 = 0;
      _os_log_impl((void *)&_mh_execute_header, v4, v5, "Missing BeaconStoreActor!", v6, 2u);
      swift_slowDealloc();
    }

    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v7 = *(uint64_t (**)(void))(v0 + 8);
    return v7(0);
  }
}

uint64_t sub_100EF401C()
{
  *(void *)(v0 + 240) = *(void *)(*(void *)(v0 + 232) + 136);
  swift_retain();
  return _swift_task_switch(sub_100EF4090, 0, 0);
}

uint64_t sub_100EF4090()
{
  uint64_t v2 = v0[29];
  uint64_t v1 = v0[30];
  uint64_t v3 = (void *)swift_task_alloc();
  v0[31] = v3;
  void v3[2] = v1;
  v3[3] = sub_10008FD44;
  v3[4] = v2;
  uint64_t v4 = (void *)swift_task_alloc();
  v0[32] = v4;
  uint64_t v5 = sub_10000588C(&qword_10163A040);
  *uint64_t v4 = v0;
  v4[1] = sub_100EF41A8;
  return withCheckedContinuation<A>(isolation:function:_:)(v0 + 15, 0, 0, 0xD000000000000012, 0x80000001013F1870, sub_10008FD4C, v3, v5);
}

uint64_t sub_100EF41A8()
{
  uint64_t v1 = *v0;
  uint64_t v2 = *(void *)(*v0 + 152);
  swift_task_dealloc();
  swift_release();
  swift_task_dealloc();
  *(void *)(v1 + 264) = *(void *)(v1 + 120);
  return _swift_task_switch(sub_100EF4318, v2, 0);
}

uint64_t sub_100EF4318()
{
  uint64_t v1 = *(void *)(v0[33] + 16);
  swift_bridgeObjectRelease();
  if (v1)
  {
    if (qword_101636888 != -1) {
      swift_once();
    }
    uint64_t v2 = type metadata accessor for Logger();
    sub_100010324(v2, (uint64_t)qword_10170D788);
    uint64_t v3 = Logger.logObject.getter();
    os_log_type_t v4 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v3, v4))
    {
      uint64_t v5 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v5 = 0;
      _os_log_impl((void *)&_mh_execute_header, v3, v4, "BeaconSharing beacons shared: true.", v5, 2u);
      swift_slowDealloc();
      swift_release();
    }
    else
    {

      swift_release();
    }
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v7 = (uint64_t (*)(uint64_t))v0[1];
    return v7(1);
  }
  else
  {
    uint64_t v6 = v0[29];
    return _swift_task_switch(sub_100EF44B4, v6, 0);
  }
}

uint64_t sub_100EF44B4()
{
  *(void *)(v0 + 272) = *(void *)(*(void *)(v0 + 232) + 136);
  swift_retain();
  return _swift_task_switch(sub_100EF4528, 0, 0);
}

uint64_t sub_100EF4528()
{
  uint64_t v1 = v0[34];
  uint64_t v2 = v0[29];
  uint64_t v3 = (void *)swift_task_alloc();
  v0[35] = v3;
  void v3[2] = v1;
  v3[3] = sub_1000909A4;
  v3[4] = v2;
  os_log_type_t v4 = (void *)swift_task_alloc();
  v0[36] = v4;
  uint64_t v5 = sub_10000588C((uint64_t *)&unk_101660AA0);
  *os_log_type_t v4 = v0;
  v4[1] = sub_100EF4644;
  return withCheckedContinuation<A>(isolation:function:_:)(v0 + 16, 0, 0, 0xD000000000000012, 0x80000001013F1870, sub_1000909AC, v3, v5);
}

uint64_t sub_100EF4644()
{
  uint64_t v1 = *v0;
  uint64_t v2 = *(void *)(*v0 + 152);
  swift_task_dealloc();
  swift_release();
  swift_task_dealloc();
  *(void *)(v1 + 296) = *(void *)(v1 + 128);
  return _swift_task_switch(sub_100EF47B4, v2, 0);
}

uint64_t sub_100EF47B4()
{
  uint64_t v1 = *(void *)(v0 + 296);
  uint64_t v2 = *(void *)(v1 + 16);
  *(void *)(v0 + 304) = v2;
  if (v2)
  {
    uint64_t v3 = *(void *)(v0 + 208);
    uint64_t v4 = *(void *)(v0 + 216);
    uint64_t v5 = *(void *)(v0 + 192);
    uint64_t v6 = *(int *)(*(void *)(v0 + 200) + 20);
    *(_DWORD *)(v0 + 416) = v6;
    int v7 = *(_DWORD *)(v3 + 80);
    *(_DWORD *)(v0 + 420) = v7;
    *(void *)(v0 + 312) = *(void *)(v3 + 72);
    *(void *)(v0 + 320) = 0;
    uint64_t v8 = *(void *)(v0 + 160);
    uint64_t v9 = *(void *)(v0 + 168);
    uint64_t v10 = v4 + v6;
    sub_100A66210(v1 + ((v7 + 32) & ~(unint64_t)v7), v4);
    uint64_t v11 = *(void (**)(uint64_t, uint64_t, uint64_t))(v9 + 16);
    *(void *)(v0 + 328) = v11;
    *(void *)(v0 + 336) = (v9 + 16) & 0xFFFFFFFFFFFFLL | 0xE3BA000000000000;
    v11(v5, v10, v8);
    sub_100EF57EC(v4);
    uint64_t v12 = *(void *)(v0 + 232);
    uint64_t v13 = sub_100EF48BC;
  }
  else
  {
    swift_bridgeObjectRelease();
    uint64_t v12 = *(void *)(v0 + 232);
    uint64_t v13 = sub_100EF4EF0;
  }
  return _swift_task_switch(v13, v12, 0);
}

uint64_t sub_100EF48BC()
{
  uint64_t v1 = (void (*)(uint64_t, uint64_t, uint64_t))v0[41];
  uint64_t v2 = v0[29];
  uint64_t v4 = v0[23];
  uint64_t v3 = v0[24];
  uint64_t v5 = v0[21];
  uint64_t v6 = v0[20];
  v0[43] = *(void *)(v2 + 136);
  v1(v4, v3, v6);
  unint64_t v7 = (*(unsigned __int8 *)(v5 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
  uint64_t v8 = swift_allocObject();
  v0[44] = v8;
  *(void *)(v8 + 16) = v2;
  (*(void (**)(unint64_t, uint64_t, uint64_t))(v5 + 32))(v8 + v7, v4, v6);
  swift_retain();
  return _swift_task_switch(sub_100EF49A4, 0, 0);
}

uint64_t sub_100EF49A4()
{
  uint64_t v2 = v0[43];
  uint64_t v1 = v0[44];
  uint64_t v3 = (void *)swift_task_alloc();
  v0[45] = v3;
  void v3[2] = v2;
  v3[3] = sub_100EF5914;
  v3[4] = v1;
  uint64_t v4 = (void *)swift_task_alloc();
  v0[46] = v4;
  uint64_t v5 = sub_10000588C(&qword_101662C50);
  *uint64_t v4 = v0;
  v4[1] = sub_100EF4ABC;
  return withCheckedContinuation<A>(isolation:function:_:)(v0 + 17, 0, 0, 0xD000000000000012, 0x80000001013F1870, sub_100EF5988, v3, v5);
}

uint64_t sub_100EF4ABC()
{
  uint64_t v1 = (void *)*v0;
  swift_task_dealloc();
  swift_release();
  swift_task_dealloc();
  v1[47] = v1[17];
  uint64_t v2 = v1[29];
  return _swift_task_switch(sub_100EF4C28, v2, 0);
}

uint64_t sub_100EF4C28()
{
  uint64_t v1 = v0[19];
  (*(void (**)(void, void))(v0[21] + 8))(v0[24], v0[20]);
  return _swift_task_switch(sub_100EF4CA4, v1, 0);
}

uint64_t sub_100EF4CA4()
{
  uint64_t v1 = *(void *)(*(void *)(v0 + 376) + 16);
  swift_bridgeObjectRelease();
  if (v1)
  {
    swift_bridgeObjectRelease();
    if (qword_101636888 != -1) {
      swift_once();
    }
    uint64_t v2 = type metadata accessor for Logger();
    sub_100010324(v2, (uint64_t)qword_10170D788);
    uint64_t v3 = Logger.logObject.getter();
    os_log_type_t v4 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v3, v4))
    {
      uint64_t v5 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v5 = 0;
      _os_log_impl((void *)&_mh_execute_header, v3, v4, "BeaconSharing beacons shared: true.", v5, 2u);
      swift_slowDealloc();
      swift_release();
    }
    else
    {

      swift_release();
    }
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v9 = *(uint64_t (**)(uint64_t))(v0 + 8);
    return v9(1);
  }
  else
  {
    uint64_t v6 = *(void *)(v0 + 320) + 1;
    if (v6 == *(void *)(v0 + 304))
    {
      swift_bridgeObjectRelease();
      uint64_t v7 = *(void *)(v0 + 232);
      uint64_t v8 = sub_100EF4EF0;
    }
    else
    {
      *(void *)(v0 + 320) = v6;
      uint64_t v11 = *(void *)(v0 + 216);
      uint64_t v12 = *(void *)(v0 + 192);
      uint64_t v13 = *(void *)(v0 + 160);
      uint64_t v14 = *(void *)(v0 + 168);
      uint64_t v15 = v11 + *(int *)(v0 + 416);
      sub_100A66210(*(void *)(v0 + 296)+ ((*(unsigned __int8 *)(v0 + 420) + 32) & ~(unint64_t)*(unsigned __int8 *)(v0 + 420))+ *(void *)(v0 + 312) * v6, v11);
      uint64_t v16 = *(void (**)(uint64_t, uint64_t, uint64_t))(v14 + 16);
      *(void *)(v0 + 328) = v16;
      *(void *)(v0 + 336) = (v14 + 16) & 0xFFFFFFFFFFFFLL | 0xE3BA000000000000;
      v16(v12, v15, v13);
      sub_100EF57EC(v11);
      uint64_t v7 = *(void *)(v0 + 232);
      uint64_t v8 = sub_100EF48BC;
    }
    return _swift_task_switch(v8, v7, 0);
  }
}

uint64_t sub_100EF4EF0()
{
  *(void *)(v0 + 384) = *(void *)(*(void *)(v0 + 232) + 136);
  swift_retain();
  return _swift_task_switch(sub_100EF4F64, 0, 0);
}

uint64_t sub_100EF4F64()
{
  uint64_t v1 = v0[48];
  uint64_t v2 = v0[29];
  uint64_t v3 = (void *)swift_task_alloc();
  v0[49] = v3;
  void v3[2] = v1;
  v3[3] = sub_100075250;
  v3[4] = v2;
  os_log_type_t v4 = (void *)swift_task_alloc();
  v0[50] = v4;
  uint64_t v5 = sub_10000588C(&qword_10163B8C0);
  *os_log_type_t v4 = v0;
  v4[1] = sub_100EF5080;
  return withCheckedContinuation<A>(isolation:function:_:)(v0 + 18, 0, 0, 0xD000000000000012, 0x80000001013F1870, sub_100075258, v3, v5);
}

uint64_t sub_100EF5080()
{
  uint64_t v1 = *v0;
  uint64_t v2 = *(void *)(*v0 + 152);
  swift_task_dealloc();
  swift_release();
  swift_task_dealloc();
  *(void *)(v1 + 408) = *(void *)(v1 + 144);
  return _swift_task_switch(sub_100EF51F0, v2, 0);
}

uint64_t sub_100EF51F0()
{
  uint64_t v1 = *(void *)(*(void *)(v0 + 408) + 16);
  swift_bridgeObjectRelease();
  if (v1)
  {
    if (qword_101636888 != -1) {
      swift_once();
    }
    uint64_t v2 = type metadata accessor for Logger();
    sub_100010324(v2, (uint64_t)qword_10170D788);
    uint64_t v3 = Logger.logObject.getter();
    os_log_type_t v4 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v3, v4))
    {
      uint64_t v5 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v5 = 0;
      uint64_t v6 = "BeaconSharing beacons shared: true.";
LABEL_10:
      _os_log_impl((void *)&_mh_execute_header, v3, v4, v6, v5, 2u);
      swift_slowDealloc();
      swift_release();

      goto LABEL_12;
    }
  }
  else
  {
    if (qword_101636888 != -1) {
      swift_once();
    }
    uint64_t v7 = type metadata accessor for Logger();
    sub_100010324(v7, (uint64_t)qword_10170D788);
    uint64_t v3 = Logger.logObject.getter();
    os_log_type_t v4 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v3, v4))
    {
      uint64_t v5 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v5 = 0;
      uint64_t v6 = "BeaconSharing beacons shared: false.";
      goto LABEL_10;
    }
  }

  swift_release();
LABEL_12:
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v8 = *(uint64_t (**)(BOOL))(v0 + 8);
  return v8(v1 != 0);
}

uint64_t sub_100EF53E8(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_10000588C(&qword_101657720);
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v7 = (char *)&v14 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))(v7, a1, v4);
  uint64_t v8 = (unint64_t *)(a2 + 112);
  swift_beginAccess();
  unint64_t v9 = *(void *)(a2 + 112);
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  *(void *)(a2 + 112) = v9;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
    unint64_t v9 = sub_100A72584(0, *(void *)(v9 + 16) + 1, 1, v9);
    *uint64_t v8 = v9;
  }
  unint64_t v12 = *(void *)(v9 + 16);
  unint64_t v11 = *(void *)(v9 + 24);
  if (v12 >= v11 >> 1)
  {
    unint64_t v9 = sub_100A72584(v11 > 1, v12 + 1, 1, v9);
    *uint64_t v8 = v9;
  }
  *(void *)(v9 + 16) = v12 + 1;
  (*(void (**)(unint64_t, char *, uint64_t))(v5 + 32))(v9+ ((*(unsigned __int8 *)(v5 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80))+ *(void *)(v5 + 72) * v12, v7, v4);
  return swift_endAccess();
}

uint64_t sub_100EF5588()
{
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  swift_defaultActor_destroy();

  return _swift_defaultActor_deallocate(v0);
}

uint64_t type metadata accessor for SharingScheduler()
{
  return self;
}

uint64_t sub_100EF55F4(uint64_t a1)
{
  v2[2] = a1;
  uint64_t v3 = sub_10000588C(&qword_10163BDA0);
  v2[3] = v3;
  v2[4] = *(void *)(v3 - 8);
  v2[5] = swift_task_alloc();
  uint64_t v4 = swift_task_alloc();
  uint64_t v5 = *v1;
  v2[6] = v4;
  v2[7] = v5;
  return _swift_task_switch(sub_100EF56C8, v5, 0);
}

uint64_t sub_100EF56C8()
{
  uint64_t v1 = v0[6];
  uint64_t v3 = v0[4];
  uint64_t v2 = v0[5];
  uint64_t v4 = v0[3];
  type metadata accessor for Transaction();
  (*(void (**)(uint64_t, void, uint64_t))(v3 + 104))(v1, enum case for AsyncStream.Continuation.BufferingPolicy.unbounded<A>(_:), v4);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v3 + 16))(v2, v1, v4);
  AsyncStream.init(_:bufferingPolicy:_:)();
  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v1, v4);
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v5 = (uint64_t (*)(void))v0[1];
  return v5();
}

uint64_t sub_100EF57EC(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for OwnedBeaconRecord();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_100EF5848()
{
  uint64_t v1 = type metadata accessor for UUID();
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 24) & ~v3;
  uint64_t v5 = v4 + *(void *)(v2 + 64);
  uint64_t v6 = v3 | 7;
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);

  return _swift_deallocObject(v0, v5, v6);
}

uint64_t sub_100EF5914@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v3 = *(void *)(type metadata accessor for UUID() - 8);
  uint64_t v4 = v1 + ((*(unsigned __int8 *)(v3 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80));

  return sub_100E5F4D0(v4, a1);
}

uint64_t sub_100EF5988(uint64_t a1)
{
  return sub_10012A52C(a1, v1[2], v1[3], v1[4]);
}

uint64_t sub_100EF5994()
{
  swift_release();

  return _swift_deallocObject(v0, 32, 7);
}

uint64_t sub_100EF59CC(uint64_t a1, uint64_t a2)
{
  uint64_t v7 = *(void *)(v2 + 16);
  uint64_t v6 = *(void *)(v2 + 24);
  uint64_t v8 = (void *)swift_task_alloc();
  *(void *)(v3 + 16) = v8;
  *uint64_t v8 = v3;
  v8[1] = sub_10001D2E4;
  return sub_100EF269C(a1, a2, v7, v6);
}

uint64_t sub_100EF5A80(uint64_t a1, uint64_t a2)
{
  uint64_t v6 = (void *)swift_task_alloc();
  *(void *)(v3 + 16) = v6;
  *uint64_t v6 = v3;
  v6[1] = sub_100033F68;
  return sub_100EF2F20(a1, a2, v2);
}

uint64_t sub_100EF5B28(uint64_t a1)
{
  return sub_100EF3964(a1, v1);
}

uint64_t sub_100EF5B44(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_100EF5B90()
{
  uint64_t v1 = v0;
  id v2 = *(id *)(v0 + 104);
  CurrentLocationMonitor.forceStopMonitor()();

  sub_1004270C8(v1 + 16);
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v1 + 32);

  swift_release();
  swift_release();
  swift_bridgeObjectRelease();

  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for IntentHandler()
{
  return self;
}

uint64_t sub_100EF5C3C(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v20 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v6 = (char *)&v18 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v19 = type metadata accessor for DispatchQoS();
  uint64_t v7 = *(void *)(v19 - 8);
  __chkstk_darwin(v19);
  unint64_t v9 = (char *)&v18 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = type metadata accessor for Intent();
  uint64_t v11 = *(void *)(v10 - 8);
  uint64_t v12 = *(void *)(v11 + 64);
  __chkstk_darwin(v10 - 8);
  uint64_t v18 = *(void *)(v2 + 72);
  uint64_t v13 = swift_allocObject();
  swift_weakInit();
  sub_100EFA18C(a1, (uint64_t)&v18 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0), (uint64_t (*)(void))type metadata accessor for Intent);
  unint64_t v14 = (*(unsigned __int8 *)(v11 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v11 + 80);
  uint64_t v15 = swift_allocObject();
  *(void *)(v15 + 16) = v13;
  sub_100EFA740((uint64_t)&v18 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0), v15 + v14, (uint64_t (*)(void))type metadata accessor for Intent);
  aBlock[4] = sub_100EFAB10;
  aBlock[5] = v15;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_1004B5480;
  aBlock[3] = &unk_1015FBD70;
  uint64_t v16 = _Block_copy(aBlock);
  swift_retain();
  static DispatchQoS.unspecified.getter();
  os_log_type_t v21 = _swiftEmptyArrayStorage;
  sub_100EFAB8C((unint64_t *)&qword_10163B7E0, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
  sub_10000588C((uint64_t *)&unk_10163F350);
  sub_1001BF100((unint64_t *)&qword_10163B7F0, (uint64_t *)&unk_10163F350);
  dispatch thunk of SetAlgebra.init<A>(_:)();
  OS_dispatch_queue.async(group:qos:flags:execute:)();
  _Block_release(v16);
  (*(void (**)(char *, uint64_t))(v20 + 8))(v6, v4);
  (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v19);
  swift_release();
  return swift_release();
}

uint64_t sub_100EF5FE0(uint64_t a1, unsigned __int8 *a2)
{
  swift_beginAccess();
  uint64_t result = swift_weakLoadStrong();
  if (result)
  {
    static os_log_type_t.default.getter();
    if (qword_101637298 != -1) {
      swift_once();
    }
    sub_10000588C((uint64_t *)&unk_10163AD00);
    uint64_t v4 = swift_allocObject();
    uint64_t v5 = v4;
    *(_OWORD *)(v4 + 16) = xmmword_101342130;
    int v6 = a2[40];
    if (a2[40])
    {
      if (v6 == 1)
      {
        unint64_t v7 = 0xEA00000000007265;
        uint64_t v8 = 0x7473696765726E75;
      }
      else
      {
        unint64_t v7 = 0xEE00657461647055;
        uint64_t v8 = 0x6E6F697461636F6CLL;
      }
    }
    else
    {
      unint64_t v7 = 0xE800000000000000;
      uint64_t v8 = 0x7265747369676572;
    }
    *(void *)(v4 + 56) = &type metadata for String;
    *(void *)(v4 + 64) = sub_10000B4CC();
    *(void *)(v5 + 32) = v8;
    *(void *)(v5 + 40) = v7;
    os_log(_:dso:log:_:_:)();
    swift_bridgeObjectRelease();
    if (v6)
    {
      if (v6 == 1) {
        sub_100EF873C((uint64_t)a2);
      }
      else {
        sub_100EF6B84(a2);
      }
    }
    else
    {
      sub_100EF6188((uint64_t)a2);
    }
    return swift_release();
  }
  return result;
}

uint64_t sub_100EF6188(uint64_t a1)
{
  uint64_t v2 = (void *)v1;
  uint64_t v4 = type metadata accessor for Intent();
  uint64_t v5 = *(void *)(v4 - 8);
  int v6 = *(void **)(v5 + 64);
  uint64_t v7 = __chkstk_darwin(v4 - 8);
  uint64_t v8 = (char *)&v55 - (((unint64_t)v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v7);
  uint64_t v10 = (char *)&v55 - v9;
  uint64_t v11 = type metadata accessor for DispatchPredicate();
  uint64_t v12 = *(void *)(v11 - 8);
  __chkstk_darwin(v11);
  unint64_t v14 = (uint64_t *)((char *)&v55 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0));
  id v15 = *(id *)(v1 + 104);
  CurrentLocationMonitor.startMonitorIfNeeded()();

  uint64_t v16 = (void *)v2[9];
  *unint64_t v14 = v16;
  (*(void (**)(void *, void, uint64_t))(v12 + 104))(v14, enum case for DispatchPredicate.onQueue(_:), v11);
  id v17 = v16;
  LOBYTE(v16) = _dispatchPreconditionTest(_:)();
  (*(void (**)(void *, uint64_t))(v12 + 8))(v14, v11);
  if ((v16 & 1) == 0)
  {
    __break(1u);
    goto LABEL_12;
  }
  unsigned __int8 v18 = *(unsigned char *)a1;
  uint64_t v20 = *(void *)(a1 + 8);
  uint64_t v19 = *(void *)(a1 + 16);
  uint64_t v56 = v2 + 12;
  swift_beginAccess();
  uint64_t v21 = v2[12];
  if (*(void *)(v21 + 16))
  {
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    unint64_t v22 = sub_100724500(v18, v20, v19);
    if (v23)
    {
      uint64_t v24 = *(void *)(*(void *)(v21 + 56) + 8 * v22);
      swift_retain();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      sub_100EFA18C(a1, (uint64_t)v10, (uint64_t (*)(void))type metadata accessor for Intent);
      uint64_t v25 = *(unsigned __int8 *)(v5 + 80);
      uint64_t v26 = swift_allocObject();
      sub_100EFA740((uint64_t)v10, v26 + ((v25 + 16) & ~v25), (uint64_t (*)(void))type metadata accessor for Intent);
      uint64_t v27 = swift_allocObject();
      swift_weakInit();
      sub_100EFA18C(a1, (uint64_t)v8, (uint64_t (*)(void))type metadata accessor for Intent);
      uint64_t v28 = (void *)swift_allocObject();
      void v28[2] = v27;
      v28[3] = sub_100EFA7A8;
      _DWORD v28[4] = v26;
      sub_100EFA740((uint64_t)v8, (uint64_t)v28 + ((v25 + 40) & ~v25), (uint64_t (*)(void))type metadata accessor for Intent);
      uint64_t v29 = type metadata accessor for Transaction();
      __chkstk_darwin(v29);
      *(&v55 - 4) = v24;
      *(&v55 - 3) = (uint64_t)sub_100EFA95C;
      *(&v55 - 2) = (uint64_t)v28;
      swift_retain();
      swift_retain();
      static Transaction.named<A>(_:with:)();
      swift_release();
      swift_release();
      swift_release();
      swift_release();
      int v6 = v56;
      goto LABEL_9;
    }
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  static os_log_type_t.default.getter();
  if (qword_101637298 != -1) {
    swift_once();
  }
  sub_10000588C((uint64_t *)&unk_10163AD00);
  uint64_t v30 = swift_allocObject();
  *(_OWORD *)(v30 + 16) = xmmword_101342130;
  *(void *)(v30 + 56) = &type metadata for String;
  *(void *)(v30 + 64) = sub_10000B4CC();
  *(void *)(v30 + 32) = v20;
  *(void *)(v30 + 40) = v19;
  swift_bridgeObjectRetain();
  os_log(_:dso:log:_:_:)();
  swift_bridgeObjectRelease();
  sub_10001D010((uint64_t)(v2 + 4), (uint64_t)v58);
  uint64_t v31 = v2[10];
  sub_100EFA18C(a1, (uint64_t)v10, (uint64_t (*)(void))type metadata accessor for Intent);
  uint64_t v32 = sub_1000BD078((uint64_t)v58, v59);
  __chkstk_darwin(v32);
  uint64_t v34 = (uint64_t *)((char *)&v55 - ((v33 + 15) & 0xFFFFFFFFFFFFFFF0));
  (*(void (**)(uint64_t *))(v35 + 16))(v34);
  uint64_t v36 = *v34;
  uint64_t v37 = type metadata accessor for BeaconManagerService();
  v57[3] = v37;
  v57[4] = &off_1015E5250;
  v57[0] = v36;
  type metadata accessor for IntentSession();
  uint64_t v38 = swift_allocObject();
  uint64_t v39 = sub_1000BD078((uint64_t)v57, v37);
  __chkstk_darwin(v39);
  uint64_t v41 = (uint64_t *)((char *)&v55 - ((v40 + 15) & 0xFFFFFFFFFFFFFFF0));
  (*(void (**)(uint64_t *))(v42 + 16))(v41);
  uint64_t v43 = *v41;
  swift_retain();
  uint64_t v44 = sub_100EFA254(v43, v31, (uint64_t)v10, v38);
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)v57);
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)v58);
  *(void *)(v44 + 24) = &off_1015FBBE8;
  swift_unknownObjectWeakAssign();
  uint64_t v45 = *(void *)(a1 + 8);
  uint64_t v46 = *(void *)(a1 + 16);
  char v47 = *(unsigned char *)a1;
  int v6 = v56;
  swift_beginAccess();
  swift_bridgeObjectRetain();
  swift_retain();
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  v57[0] = v2[12];
  v2[12] = 0x8000000000000000;
  sub_100171D30(v44, v47, v45, v46, isUniquelyReferenced_nonNull_native);
  v2[12] = v57[0];
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_endAccess();
  uint64_t v49 = v2[11];
  uint64_t v50 = swift_allocObject();
  swift_weakInit();
  uint64_t v51 = swift_allocObject();
  *(void *)(v51 + 16) = v50;
  *(void *)(v51 + 24) = v44;
  swift_retain();
  swift_retain();
  sub_1008E2724(v49, (uint64_t)sub_100EFA5F4, v51);
  swift_release();
  swift_release();
  swift_release();
LABEL_9:
  static os_log_type_t.default.getter();
  if (qword_101637298 != -1) {
LABEL_12:
  }
    swift_once();
  sub_10000588C((uint64_t *)&unk_10163AD00);
  uint64_t v52 = swift_allocObject();
  *(_OWORD *)(v52 + 16) = xmmword_101342130;
  uint64_t v53 = *(void *)(*v6 + 16);
  *(void *)(v52 + 56) = &type metadata for Int;
  *(void *)(v52 + 64) = &protocol witness table for Int;
  *(void *)(v52 + 32) = v53;
  os_log(_:dso:log:_:_:)();
  return swift_bridgeObjectRelease();
}

uint64_t sub_100EF69F4(uint64_t a1)
{
  static os_log_type_t.default.getter();
  if (qword_101637298 != -1) {
    swift_once();
  }
  sub_10000588C((uint64_t *)&unk_10163AD00);
  uint64_t v2 = swift_allocObject();
  *(_OWORD *)(v2 + 16) = xmmword_101347BA0;
  uint64_t v4 = *(void *)(a1 + 8);
  uint64_t v3 = *(void *)(a1 + 16);
  *(void *)(v2 + 56) = &type metadata for String;
  unint64_t v5 = sub_10000B4CC();
  *(void *)(v2 + 32) = v4;
  *(void *)(v2 + 40) = v3;
  *(void *)(v2 + 96) = &type metadata for String;
  *(void *)(v2 + 104) = v5;
  *(void *)(v2 + 64) = v5;
  *(void *)(v2 + 72) = v4;
  *(void *)(v2 + 80) = v3;
  swift_bridgeObjectRetain_n();
  os_log(_:dso:log:_:_:)();

  return swift_bridgeObjectRelease();
}

uint64_t sub_100EF6AF8(uint64_t a1, uint64_t a2)
{
  swift_beginAccess();
  uint64_t result = swift_weakLoadStrong();
  if (result)
  {
    swift_retain();
    swift_release();
    sub_10036B8E8(a2 + OBJC_IVAR____TtC12searchpartyd13IntentSession_sessionID);
    return swift_release();
  }
  return result;
}

uint64_t sub_100EF6B84(unsigned __int8 *a1)
{
  uint64_t v3 = type metadata accessor for Intent();
  uint64_t v4 = v3 - 8;
  __chkstk_darwin(v3);
  int v6 = (char *)v29 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = sub_10000588C(&qword_101646EB8);
  __chkstk_darwin(v7 - 8);
  uint64_t v9 = (char *)v29 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = type metadata accessor for BeaconLocationUpdate();
  uint64_t v11 = *(void *)(v10 - 8);
  __chkstk_darwin(v10);
  uint64_t v13 = (char *)v29 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10001D074((uint64_t)&a1[*(int *)(v4 + 44)], (uint64_t)v9, &qword_101646EB8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v11 + 48))(v9, 1, v10) == 1) {
    return sub_10001DAB4((uint64_t)v9, &qword_101646EB8);
  }
  sub_100EFA740((uint64_t)v9, (uint64_t)v13, (uint64_t (*)(void))type metadata accessor for BeaconLocationUpdate);
  uint64_t v30 = v1;
  sub_100AAD3F8();
  v29[1] = static os_log_type_t.default.getter();
  if (qword_101637298 != -1) {
    swift_once();
  }
  sub_10000588C((uint64_t *)&unk_10163AD00);
  uint64_t v15 = swift_allocObject();
  *(_OWORD *)(v15 + 16) = xmmword_101347BA0;
  sub_100B967D0(*a1, *((void *)a1 + 1), *((void **)a1 + 2));
  uint64_t v17 = v16;
  uint64_t v19 = v18;
  *(void *)(v15 + 56) = &type metadata for String;
  unint64_t v20 = sub_10000B4CC();
  *(void *)(v15 + 64) = v20;
  *(void *)(v15 + 32) = v17;
  *(void *)(v15 + 40) = v19;
  uint64_t v21 = *(int *)(v10 + 36);
  int v22 = v13[v21];
  unint64_t v23 = sub_1011411C4(v13[v21]);
  *(void *)(v15 + 96) = &type metadata for String;
  *(void *)(v15 + 104) = v20;
  *(void *)(v15 + 72) = v23;
  *(void *)(v15 + 80) = v24;
  os_log(_:dso:log:_:_:)();
  swift_bridgeObjectRelease();
  sub_100EFA18C((uint64_t)a1, (uint64_t)v6, (uint64_t (*)(void))type metadata accessor for Intent);
  if (v22 != 10)
  {
    sub_100EFA1F4((uint64_t)v6, (uint64_t (*)(void))type metadata accessor for Intent);
    goto LABEL_9;
  }
  char v25 = v6[41];
  sub_100EFA1F4((uint64_t)v6, (uint64_t (*)(void))type metadata accessor for Intent);
  if (v25)
  {
LABEL_9:
    uint64_t v26 = 0;
    uint64_t v28 = 0;
    uint64_t v27 = 0;
    goto LABEL_10;
  }
  uint64_t v26 = *a1;
  uint64_t v28 = *((void *)a1 + 1);
  uint64_t v27 = *((void *)a1 + 2);
  swift_bridgeObjectRetain();
LABEL_10:
  sub_100EF6EF4((uint64_t)v13, v26, v28, v27);
  swift_bridgeObjectRelease();
  return sub_100EFA1F4((uint64_t)v13, (uint64_t (*)(void))type metadata accessor for BeaconLocationUpdate);
}

uint64_t sub_100EF6EF4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v91 = a4;
  uint64_t v90 = a3;
  uint64_t v89 = a2;
  uint64_t v6 = type metadata accessor for BeaconLocationUpdate();
  uint64_t v88 = *(void *)(v6 - 8);
  uint64_t v7 = *(void *)(v88 + 64);
  __chkstk_darwin(v6);
  uint64_t v94 = (uint64_t)&v69 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v87 = type metadata accessor for BeaconEstimatedLocation();
  uint64_t v86 = *(void *)(v87 - 8);
  uint64_t v8 = __chkstk_darwin(v87);
  uint64_t v85 = (uint64_t)&v69 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v99 = v9;
  __chkstk_darwin(v8);
  uint64_t v83 = (long long *)((char *)&v69 - v10);
  uint64_t v11 = type metadata accessor for UUID();
  uint64_t v70 = *(void *)(v11 - 8);
  uint64_t v12 = __chkstk_darwin(v11);
  int64_t v84 = (char *)&v69 - ((unint64_t)(v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  double v98 = v13;
  __chkstk_darwin(v12);
  uint64_t v15 = (char *)&v69 - v14;
  uint64_t v16 = sub_10000588C(&qword_101638CF0);
  __chkstk_darwin(v16 - 8);
  uint64_t v18 = (char *)&v69 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v19 = type metadata accessor for DispatchPredicate();
  uint64_t v20 = *(void *)(v19 - 8);
  __chkstk_darwin(v19);
  int v22 = (uint64_t *)((char *)&v69 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v103 = v4;
  unint64_t v23 = *(void **)(v4 + 72);
  *int v22 = v23;
  (*(void (**)(void *, void, uint64_t))(v20 + 104))(v22, enum case for DispatchPredicate.onQueue(_:), v19);
  id v24 = v23;
  LOBYTE(v23) = _dispatchPreconditionTest(_:)();
  (*(void (**)(void *, uint64_t))(v20 + 8))(v22, v19);
  if (v23)
  {
    uint64_t v25 = *(void *)(a1 + *(int *)(v6 + 32));
    uint64_t v26 = *(void *)(v25 + 16);
    uint64_t v69 = v25;
    if (v26)
    {
      uint64_t v81 = a1;
      uint64_t v82 = (int *)v6;
      uint64_t v27 = v70 + 16;
      uint64_t v28 = *(void (**)(char *, char *, uint64_t))(v70 + 16);
      uint64_t v29 = *(unsigned __int8 *)(v70 + 80);
      uint64_t v76 = ~v29;
      uint64_t v30 = (char *)(v25 + ((v29 + 32) & ~v29));
      uint64_t v75 = *(void *)(v70 + 72);
      uint64_t v93 = (void (**)(char *, void, uint64_t, uint64_t))(v70 + 56);
      double v92 = (unsigned int (**)(char *, uint64_t, uint64_t))(v70 + 48);
      id v102 = (char **)(v70 + 32);
      uint64_t v77 = v29;
      uint64_t v74 = v99 + v29;
      uint64_t v73 = v98 + 7;
      uint64_t v72 = v7 + 7;
      uint64_t v80 = (void (**)(char *, uint64_t))(v70 + 8);
      swift_bridgeObjectRetain();
      long long v71 = xmmword_101348180;
      uint64_t v104 = v11;
      uint64_t v79 = v15;
      uint64_t v78 = v18;
      double v100 = v28;
      uint64_t v101 = v27;
      while (1)
      {
        v28(v18, v30, v11);
        (*v93)(v18, 0, 1, v11);
        if ((*v92)(v18, 1, v11) == 1) {
          break;
        }
        double v98 = *v102;
        ((void (*)(char *, char *, uint64_t))v98)(v15, v18, v11);
        uint64_t v99 = *(void *)(v103 + 80);
        sub_100ACCD98((uint64_t)v15, (uint64_t)v105);
        uint64_t v31 = v106;
        sub_10001DAB4((uint64_t)v105, (uint64_t *)&unk_10163BBE0);
        if (!v31)
        {
          swift_bridgeObjectRelease();
          static os_log_type_t.error.getter();
          if (qword_101637298 != -1) {
            goto LABEL_14;
          }
          goto LABEL_12;
        }
        id v96 = v30;
        uint64_t v32 = (int *)v87;
        uint64_t v33 = v83;
        UUID.init()();
        v28((char *)v33 + v32[6], v15, v11);
        uint64_t v34 = v82;
        uint64_t v35 = v81;
        uint64_t v36 = *(void *)(v81 + v82[5]);
        uint64_t v37 = *(void *)(v81 + v82[6]);
        uint64_t v38 = *(void *)(v81 + v82[7]);
        uint64_t v39 = v32[10];
        uint64_t v97 = v26;
        uint64_t v40 = (char *)v33 + v39;
        uint64_t v41 = type metadata accessor for Date();
        uint64_t v42 = *(void *)(v41 - 8);
        (*(void (**)(char *, uint64_t, uint64_t))(v42 + 16))(v40, v35, v41);
        LOBYTE(v40) = *(unsigned char *)(v35 + v34[9]);
        (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v42 + 56))((char *)v33 + v32[12], 1, 1, v41);
        *uint64_t v33 = v71;
        *(void *)((char *)v33 + v32[7]) = v36;
        *(void *)((char *)v33 + v32[8]) = v37;
        *(void *)((char *)v33 + v32[9]) = v38;
        *((unsigned char *)v33 + v32[11]) = (_BYTE)v40;
        *(void *)((char *)v33 + v32[13]) = 0;
        uint64_t v95 = type metadata accessor for BeaconEstimatedLocation;
        uint64_t v43 = v85;
        sub_100EFA18C((uint64_t)v33, v85, (uint64_t (*)(void))type metadata accessor for BeaconEstimatedLocation);
        uint64_t v44 = v84;
        v100(v84, v15, v104);
        uint64_t v45 = v94;
        sub_100EFA18C(v35, v94, (uint64_t (*)(void))type metadata accessor for BeaconLocationUpdate);
        unint64_t v46 = (*(unsigned __int8 *)(v86 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v86 + 80);
        unint64_t v47 = (v74 + v46) & v76;
        unint64_t v48 = (unint64_t)&v73[v47] & 0xFFFFFFFFFFFFFFF8;
        unint64_t v49 = (*(unsigned __int8 *)(v88 + 80) + v48 + 24) & ~(unint64_t)*(unsigned __int8 *)(v88 + 80);
        unint64_t v50 = (v72 + v49) & 0xFFFFFFFFFFFFFFF8;
        uint64_t v51 = swift_allocObject();
        sub_100EFA740(v43, v51 + v46, (uint64_t (*)(void))type metadata accessor for BeaconEstimatedLocation);
        unint64_t v52 = v51 + v47;
        uint64_t v28 = v100;
        uint64_t v53 = v44;
        uint64_t v18 = v78;
        ((void (*)(unint64_t, char *, uint64_t))v98)(v52, v53, v104);
        uint64_t v54 = (void *)(v51 + v48);
        uint64_t v55 = v103;
        uint64_t v11 = v104;
        uint64_t v56 = v90;
        *uint64_t v54 = v89;
        v54[1] = v56;
        v54[2] = v91;
        uint64_t v57 = v51 + v49;
        uint64_t v15 = v79;
        uint64_t v58 = v45;
        uint64_t v59 = v96;
        sub_100EFA740(v58, v57, (uint64_t (*)(void))type metadata accessor for BeaconLocationUpdate);
        *(void *)(v51 + v50) = v55;
        uint64_t v60 = v97;
        swift_bridgeObjectRetain();
        swift_retain();
        sub_100AB6E00((uint64_t)v33, (uint64_t)sub_100EFA010, v51);
        swift_release();
        sub_100EFA1F4((uint64_t)v33, (uint64_t (*)(void))v95);
        (*v80)(v15, v11);
        uint64_t v30 = &v59[v75];
        uint64_t v26 = v60 - 1;
        if (!v26) {
          goto LABEL_9;
        }
      }
    }
    else
    {
      swift_bridgeObjectRetain();
LABEL_9:
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v70 + 56))(v18, 1, 1, v11);
    }
    return swift_bridgeObjectRelease();
  }
  else
  {
    __break(1u);
LABEL_14:
    swift_once();
LABEL_12:
    sub_10000588C((uint64_t *)&unk_10163AD00);
    uint64_t v62 = swift_allocObject();
    *(_OWORD *)(v62 + 16) = xmmword_101347BA0;
    uint64_t v63 = UUID.uuidString.getter();
    uint64_t v65 = v64;
    *(void *)(v62 + 56) = &type metadata for String;
    unint64_t v66 = sub_10000B4CC();
    *(void *)(v62 + 64) = v66;
    *(void *)(v62 + 32) = v63;
    *(void *)(v62 + 40) = v65;
    sub_100EFA18C(v81, v94, (uint64_t (*)(void))type metadata accessor for BeaconLocationUpdate);
    uint64_t v67 = String.init<A>(describing:)();
    *(void *)(v62 + 96) = &type metadata for String;
    *(void *)(v62 + 104) = v66;
    *(void *)(v62 + 72) = v67;
    *(void *)(v62 + 80) = v68;
    os_log(_:dso:log:_:_:)();
    swift_bridgeObjectRelease();
    return ((uint64_t (*)(char *, uint64_t))*v80)(v15, v11);
  }
}

uint64_t sub_100EF78C4(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v85 = a8;
  uint64_t v79 = a7;
  uint64_t v82 = a4;
  uint64_t v83 = a5;
  uint64_t v87 = a2;
  unint64_t v88 = a3;
  uint64_t v10 = type metadata accessor for Date();
  uint64_t v84 = *(void *)(v10 - 8);
  __chkstk_darwin(v10);
  uint64_t v78 = (char *)&v70 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = type metadata accessor for UUID();
  uint64_t v77 = *(void *)(v12 - 8);
  uint64_t v13 = __chkstk_darwin(v12);
  uint64_t v80 = (char *)&v70 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v13);
  uint64_t v86 = (char *)&v70 - v15;
  uint64_t v16 = (int *)type metadata accessor for LocationProvider();
  uint64_t v17 = __chkstk_darwin(v16);
  uint64_t v81 = (char *)&v70 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v17);
  uint64_t v20 = (char *)&v70 - v19;
  uint64_t v21 = sub_10000588C(&qword_1016428D8);
  __chkstk_darwin(v21);
  unint64_t v23 = (unint64_t *)((char *)&v70 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0));
  sub_10001D074(a1, (uint64_t)v23, &qword_1016428D8);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    unint64_t v24 = *v23;
    static os_log_type_t.error.getter();
    if (qword_101637298 != -1) {
      swift_once();
    }
    sub_10000588C((uint64_t *)&unk_10163AD00);
    uint64_t v25 = swift_allocObject();
    *(_OWORD *)(v25 + 16) = xmmword_101347500;
    type metadata accessor for BeaconEstimatedLocation();
    sub_100EFAB8C((unint64_t *)&qword_101638DA0, (void (*)(uint64_t))&type metadata accessor for Date);
    uint64_t v26 = dispatch thunk of CustomStringConvertible.description.getter();
    uint64_t v28 = v27;
    *(void *)(v25 + 56) = &type metadata for String;
    unint64_t v29 = sub_10000B4CC();
    *(void *)(v25 + 64) = v29;
    *(void *)(v25 + 32) = v26;
    *(void *)(v25 + 40) = v28;
    sub_100EFAB8C((unint64_t *)&qword_101638B10, (void (*)(uint64_t))&type metadata accessor for UUID);
    uint64_t v30 = dispatch thunk of CustomStringConvertible.description.getter();
    *(void *)(v25 + 96) = &type metadata for String;
    *(void *)(v25 + 104) = v29;
    *(void *)(v25 + 72) = v30;
    *(void *)(v25 + 80) = v31;
    unint64_t v89 = v24;
    swift_errorRetain();
    sub_10000588C(&qword_101638D40);
    uint64_t v32 = String.init<A>(describing:)();
    *(void *)(v25 + 136) = &type metadata for String;
    *(void *)(v25 + 144) = v29;
    *(void *)(v25 + 112) = v32;
    *(void *)(v25 + 120) = v33;
    os_log(_:dso:log:_:_:)();
    swift_bridgeObjectRelease();
    return swift_errorRelease();
  }
  else
  {
    uint64_t v76 = v23;
    uint64_t v74 = v20;
    static os_log_type_t.default.getter();
    if (qword_101637298 != -1) {
      swift_once();
    }
    uint64_t v75 = qword_10170EFF0;
    uint64_t v73 = sub_10000588C((uint64_t *)&unk_10163AD00);
    uint64_t v35 = swift_allocObject();
    *(_OWORD *)(v35 + 16) = xmmword_101347BA0;
    type metadata accessor for BeaconEstimatedLocation();
    uint64_t v36 = sub_100EFAB8C((unint64_t *)&qword_101638DA0, (void (*)(uint64_t))&type metadata accessor for Date);
    uint64_t v87 = v10;
    uint64_t v72 = v36;
    uint64_t v37 = dispatch thunk of CustomStringConvertible.description.getter();
    uint64_t v39 = v38;
    *(void *)(v35 + 56) = &type metadata for String;
    unint64_t v40 = sub_10000B4CC();
    *(void *)(v35 + 64) = v40;
    *(void *)(v35 + 32) = v37;
    *(void *)(v35 + 40) = v39;
    sub_100EFAB8C((unint64_t *)&qword_101638B10, (void (*)(uint64_t))&type metadata accessor for UUID);
    unint64_t v41 = v88;
    uint64_t v42 = dispatch thunk of CustomStringConvertible.description.getter();
    *(void *)(v35 + 96) = &type metadata for String;
    *(void *)(v35 + 104) = v40;
    *(void *)(v35 + 72) = v42;
    *(void *)(v35 + 80) = v43;
    os_log(_:dso:log:_:_:)();
    swift_bridgeObjectRelease();
    if (a6)
    {
      uint64_t v75 = a6;
      uint64_t v44 = v77;
      uint64_t v45 = *(void (**)(char *, unint64_t, uint64_t))(v77 + 16);
      unint64_t v46 = v86;
      uint64_t v71 = v12;
      v45(v86, v41, v12);
      uint64_t v47 = v84;
      unint64_t v88 = v40;
      uint64_t v70 = *(void (**)(char *, uint64_t, uint64_t))(v84 + 16);
      unint64_t v48 = v78;
      v70(v78, v79, v87);
      uint64_t v49 = (uint64_t)v81;
      v45(&v81[v16[5]], (unint64_t)v46, v12);
      uint64_t v50 = v49 + v16[6];
      *(unsigned char *)uint64_t v50 = v82;
      uint64_t v51 = v75;
      *(void *)(v50 + 8) = v83;
      *(void *)(v50 + 16) = v51;
      uint64_t v52 = v49;
      uint64_t v53 = v87;
      v70((char *)(v49 + v16[7]), (uint64_t)v48, v87);
      swift_bridgeObjectRetain();
      uint64_t v54 = v80;
      UUID.init()();
      (*(void (**)(char *, uint64_t))(v47 + 8))(v48, v53);
      uint64_t v55 = v71;
      (*(void (**)(char *, uint64_t))(v44 + 8))(v86, v71);
      (*(void (**)(uint64_t, char *, uint64_t))(v44 + 32))(v49, v54, v55);
      uint64_t v56 = (uint64_t)v74;
      sub_100EFA740(v49, (uint64_t)v74, (uint64_t (*)(void))type metadata accessor for LocationProvider);
      LODWORD(v86) = static os_log_type_t.default.getter();
      uint64_t v57 = swift_allocObject();
      *(_OWORD *)(v57 + 16) = xmmword_101342130;
      sub_100EFA18C(v56, v52, (uint64_t (*)(void))type metadata accessor for LocationProvider);
      uint64_t v58 = dispatch thunk of CustomStringConvertible.description.getter();
      uint64_t v60 = v59;
      uint64_t v61 = v52 + v16[6];
      uint64_t v63 = *(void *)(v61 + 8);
      uint64_t v62 = *(void **)(v61 + 16);
      unint64_t v89 = 0;
      unint64_t v90 = 0xE000000000000000;
      swift_bridgeObjectRetain();
      _StringGuts.grow(_:)(36);
      swift_bridgeObjectRelease();
      unint64_t v89 = 0xD000000000000013;
      unint64_t v90 = 0x800000010141A330;
      v64._countAndFlagsBits = v63;
      v64._object = v62;
      String.append(_:)(v64);
      swift_bridgeObjectRelease();
      v65._countAndFlagsBits = 0x7473656D6974202CLL;
      v65._object = (void *)0xED0000203A706D61;
      String.append(_:)(v65);
      v66._countAndFlagsBits = v58;
      v66._object = v60;
      String.append(_:)(v66);
      swift_bridgeObjectRelease();
      unint64_t v67 = v89;
      unint64_t v68 = v90;
      sub_100EFA1F4(v52, (uint64_t (*)(void))type metadata accessor for LocationProvider);
      unint64_t v69 = v88;
      *(void *)(v57 + 56) = &type metadata for String;
      *(void *)(v57 + 64) = v69;
      *(void *)(v57 + 32) = v67;
      *(void *)(v57 + 40) = v68;
      os_log(_:dso:log:_:_:)();
      swift_bridgeObjectRelease();
      sub_100D351E8(v56, (uint64_t)sub_100EF8124, 0);
      sub_100EFA1F4(v56, (uint64_t (*)(void))type metadata accessor for LocationProvider);
    }
    return sub_10001DAB4((uint64_t)v76, &qword_1016428D8);
  }
}

uint64_t sub_100EF8124(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for LocationProvider();
  __chkstk_darwin(v2);
  uint64_t v4 = (char *)&v25 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = sub_10000588C(&qword_10165E848);
  __chkstk_darwin(v5);
  uint64_t v7 = (char *)&v25 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10001D074(a1, (uint64_t)v7, &qword_10165E848);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    static os_log_type_t.error.getter();
    if (qword_101637298 != -1) {
      swift_once();
    }
    sub_10000588C((uint64_t *)&unk_10163AD00);
    uint64_t v8 = swift_allocObject();
    *(_OWORD *)(v8 + 16) = xmmword_101342130;
    swift_getErrorValue();
    uint64_t v9 = Error.localizedDescription.getter();
    uint64_t v11 = v10;
    *(void *)(v8 + 56) = &type metadata for String;
    *(void *)(v8 + 64) = sub_10000B4CC();
    *(void *)(v8 + 32) = v9;
    *(void *)(v8 + 40) = v11;
    os_log(_:dso:log:_:_:)();
    swift_bridgeObjectRelease();
    return swift_errorRelease();
  }
  else
  {
    sub_100EFA740((uint64_t)v7, (uint64_t)v4, (uint64_t (*)(void))type metadata accessor for LocationProvider);
    static os_log_type_t.default.getter();
    if (qword_101637298 != -1) {
      swift_once();
    }
    sub_10000588C((uint64_t *)&unk_10163AD00);
    uint64_t v13 = swift_allocObject();
    *(_OWORD *)(v13 + 16) = xmmword_101342130;
    type metadata accessor for Date();
    sub_100EFAB8C((unint64_t *)&qword_101638DA0, (void (*)(uint64_t))&type metadata accessor for Date);
    uint64_t v14 = dispatch thunk of CustomStringConvertible.description.getter();
    uint64_t v16 = v15;
    uint64_t v17 = &v4[*(int *)(v2 + 24)];
    uint64_t v18 = *((void *)v17 + 1);
    uint64_t v19 = (void *)*((void *)v17 + 2);
    unint64_t v25 = 0;
    unint64_t v26 = 0xE000000000000000;
    swift_bridgeObjectRetain();
    _StringGuts.grow(_:)(36);
    swift_bridgeObjectRelease();
    unint64_t v25 = 0xD000000000000013;
    unint64_t v26 = 0x800000010141A330;
    v20._countAndFlagsBits = v18;
    v20._object = v19;
    String.append(_:)(v20);
    swift_bridgeObjectRelease();
    v21._countAndFlagsBits = 0x7473656D6974202CLL;
    v21._object = (void *)0xED0000203A706D61;
    String.append(_:)(v21);
    v22._countAndFlagsBits = v14;
    v22._object = v16;
    String.append(_:)(v22);
    swift_bridgeObjectRelease();
    unint64_t v23 = v25;
    unint64_t v24 = v26;
    *(void *)(v13 + 56) = &type metadata for String;
    *(void *)(v13 + 64) = sub_10000B4CC();
    *(void *)(v13 + 32) = v23;
    *(void *)(v13 + 40) = v24;
    os_log(_:dso:log:_:_:)();
    swift_bridgeObjectRelease();
    return sub_100EFA1F4((uint64_t)v4, (uint64_t (*)(void))type metadata accessor for LocationProvider);
  }
}

uint64_t sub_100EF84F8(void *a1, uint64_t a2)
{
  uint64_t v4 = (int *)type metadata accessor for BeaconLocationUpdate();
  __chkstk_darwin(v4);
  uint64_t v6 = (char *)&v19 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  static os_log_type_t.default.getter();
  if (qword_101637298 != -1) {
    swift_once();
  }
  sub_10000588C((uint64_t *)&unk_10163AD00);
  uint64_t v7 = swift_allocObject();
  *(_OWORD *)(v7 + 16) = xmmword_101342130;
  id v8 = [a1 description];
  uint64_t v9 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v11 = v10;

  *(void *)(v7 + 56) = &type metadata for String;
  *(void *)(v7 + 64) = sub_10000B4CC();
  *(void *)(v7 + 32) = v9;
  *(void *)(v7 + 40) = v11;
  os_log(_:dso:log:_:_:)();
  swift_bridgeObjectRelease();
  id v12 = [a1 timestamp];
  static Date._unconditionallyBridgeFromObjectiveC(_:)();

  [a1 coordinate];
  uint64_t v14 = v13;
  [a1 coordinate];
  uint64_t v16 = v15;
  [a1 horizontalAccuracy];
  *(void *)&v6[v4[5]] = v14;
  *(void *)&v6[v4[6]] = v16;
  *(void *)&v6[v4[7]] = v17;
  *(void *)&v6[v4[8]] = a2;
  v6[v4[9]] = 11;
  swift_bridgeObjectRetain();
  sub_100EF6EF4((uint64_t)v6, 0, 0, 0);
  return sub_100EFA1F4((uint64_t)v6, (uint64_t (*)(void))type metadata accessor for BeaconLocationUpdate);
}

void sub_100EF873C(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = type metadata accessor for DispatchPredicate();
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v7 = (void *)((char *)v25 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0));
  id v8 = *(void **)(v2 + 72);
  *uint64_t v7 = v8;
  (*(void (**)(void *, void, uint64_t))(v5 + 104))(v7, enum case for DispatchPredicate.onQueue(_:), v4);
  id v9 = v8;
  LOBYTE(v8) = _dispatchPreconditionTest(_:)();
  (*(void (**)(void *, uint64_t))(v5 + 8))(v7, v4);
  if ((v8 & 1) == 0)
  {
    __break(1u);
    goto LABEL_13;
  }
  unsigned __int8 v10 = *(unsigned char *)a1;
  uint64_t v12 = *(void *)(a1 + 8);
  uint64_t v11 = *(void *)(a1 + 16);
  swift_beginAccess();
  uint64_t v13 = *(void *)(v2 + 96);
  if (*(void *)(v13 + 16))
  {
    swift_bridgeObjectRetain_n();
    swift_bridgeObjectRetain();
    unint64_t v14 = sub_100724500(v10, v12, v11);
    if (v15)
    {
      uint64_t v16 = *(void *)(*(void *)(v13 + 56) + 8 * v14);
      swift_retain();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      static os_log_type_t.default.getter();
      if (qword_101637298 != -1) {
        swift_once();
      }
      sub_10000588C((uint64_t *)&unk_10163AD00);
      uint64_t v17 = swift_allocObject();
      v25[0] = xmmword_101342130;
      *(_OWORD *)(v17 + 16) = xmmword_101342130;
      *(void *)(v17 + 56) = &type metadata for String;
      *(void *)(v17 + 64) = sub_10000B4CC();
      *(void *)(v17 + 32) = v12;
      *(void *)(v17 + 40) = v11;
      swift_bridgeObjectRetain();
      os_log(_:dso:log:_:_:)();
      swift_bridgeObjectRelease();
      swift_beginAccess();
      sub_1001655C8(v10, v12, v11);
      swift_endAccess();
      swift_release();
      sub_10036BA70(v16 + OBJC_IVAR____TtC12searchpartyd13IntentSession_sessionID);
      static os_log_type_t.default.getter();
      uint64_t v18 = swift_allocObject();
      *(_OWORD *)(v18 + 16) = v25[0];
      uint64_t v19 = *(void *)(*(void *)(v2 + 96) + 16);
      *(void *)(v18 + 56) = &type metadata for Int;
      *(void *)(v18 + 64) = &protocol witness table for Int;
      *(void *)(v18 + 32) = v19;
      os_log(_:dso:log:_:_:)();
      swift_bridgeObjectRelease();
      uint64_t v20 = swift_allocObject();
      *(unsigned char *)(v20 + 16) = v10;
      *(void *)(v20 + 24) = v12;
      *(void *)(v20 + 32) = v11;
      uint64_t v21 = swift_allocObject();
      swift_weakInit();
      Swift::String v22 = (void *)swift_allocObject();
      void v22[2] = v21;
      uint64_t v22[3] = sub_100EF9C68;
      v22[4] = v20;
      uint64_t v23 = type metadata accessor for Transaction();
      __chkstk_darwin(v23);
      *(void *)&v25[-2] = v16;
      *((void *)&v25[-2] + 1) = sub_100EF9CEC;
      *(void *)&v25[-1] = v22;
      swift_retain();
      swift_retain();
      static Transaction.named<A>(_:with:)();
      swift_release();
      swift_release();
      swift_release();
      swift_release();
    }
    else
    {
      swift_bridgeObjectRelease_n();
      swift_bridgeObjectRelease();
    }
  }
  if (!*(void *)(*(void *)(v2 + 96) + 16))
  {
    static os_log_type_t.default.getter();
    if (qword_101637298 == -1)
    {
LABEL_10:
      os_log(_:dso:log:_:_:)();
      id v24 = *(id *)(v2 + 104);
      CurrentLocationMonitor.forceStopMonitor()();

      return;
    }
LABEL_13:
    swift_once();
    goto LABEL_10;
  }
}

uint64_t sub_100EF8C30(uint64_t a1, uint64_t a2, uint64_t a3)
{
  static os_log_type_t.default.getter();
  if (qword_101637298 != -1) {
    swift_once();
  }
  sub_10000588C((uint64_t *)&unk_10163AD00);
  uint64_t v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_101342130;
  *(void *)(v5 + 56) = &type metadata for String;
  *(void *)(v5 + 64) = sub_10000B4CC();
  *(void *)(v5 + 32) = a2;
  *(void *)(v5 + 40) = a3;
  swift_bridgeObjectRetain();
  os_log(_:dso:log:_:_:)();

  return swift_bridgeObjectRelease();
}

uint64_t sub_100EF8D28(uint64_t a1)
{
  static os_log_type_t.default.getter();
  if (qword_101637298 != -1) {
    swift_once();
  }
  sub_10000588C((uint64_t *)&unk_10163AD00);
  uint64_t v2 = swift_allocObject();
  *(_OWORD *)(v2 + 16) = xmmword_101342130;
  uint64_t v4 = *(void *)(a1 + 8);
  uint64_t v3 = *(void *)(a1 + 16);
  *(void *)(v2 + 56) = &type metadata for String;
  *(void *)(v2 + 64) = sub_10000B4CC();
  *(void *)(v2 + 32) = v4;
  *(void *)(v2 + 40) = v3;
  swift_bridgeObjectRetain();
  os_log(_:dso:log:_:_:)();
  swift_bridgeObjectRelease();
  swift_beginAccess();
  uint64_t result = swift_weakLoadStrong();
  if (result)
  {
    sub_100EF873C(a1);
    return swift_release();
  }
  return result;
}

uint64_t sub_100EF8E5C(uint64_t a1, char *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v89 = a4;
  uint64_t v88 = type metadata accessor for Date();
  uint64_t v87 = *(void *)(v88 - 8);
  __chkstk_darwin(v88);
  uint64_t v86 = (char *)v83 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v92 = type metadata accessor for BeaconLocationUpdate();
  __chkstk_darwin(v92);
  id v9 = (char *)v83 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = type metadata accessor for UUID();
  uint64_t v97 = *(void *)(v10 - 8);
  uint64_t v98 = v10;
  uint64_t v11 = __chkstk_darwin(v10);
  uint64_t v91 = (char *)v83 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v11);
  unint64_t v14 = (char *)v83 - v13;
  int v15 = static os_log_type_t.default.getter();
  if (qword_101637298 != -1) {
    swift_once();
  }
  uint64_t v95 = v9;
  uint64_t v96 = a3;
  uint64_t v16 = qword_10170EFF0;
  uint64_t v85 = sub_10000588C((uint64_t *)&unk_10163AD00);
  uint64_t v93 = swift_allocObject();
  *(_OWORD *)(v93 + 16) = xmmword_101347BA0;
  int64_t v17 = *(void *)(a1 + 16);
  uint64_t v94 = a2;
  uint64_t v90 = a1;
  if (v17)
  {
    v83[1] = v16;
    LODWORD(v84) = v15;
    id v102 = _swiftEmptyArrayStorage;
    sub_1000B6ED0(0, v17, 0);
    uint64_t v18 = a1 + 32;
    uint64_t v19 = (void (**)(char *, uint64_t))(v97 + 8);
    int64_t v20 = v17;
    do
    {
      sub_10001D010(v18, (uint64_t)v99);
      uint64_t v22 = v100;
      uint64_t v21 = v101;
      sub_10001CD44(v99, v100);
      (*(void (**)(uint64_t))(*(void *)(*(void *)(v21 + 8) + 8) + 32))(v22);
      uint64_t v23 = UUID.uuidString.getter();
      uint64_t v25 = v24;
      (*v19)(v14, v98);
      _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)v99);
      unint64_t v26 = v102;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        sub_1000B6ED0(0, v26[2] + 1, 1);
        unint64_t v26 = v102;
      }
      unint64_t v28 = v26[2];
      unint64_t v27 = v26[3];
      if (v28 >= v27 >> 1)
      {
        sub_1000B6ED0(v27 > 1, v28 + 1, 1);
        unint64_t v26 = v102;
      }
      uint64_t v26[2] = v28 + 1;
      unint64_t v29 = &v26[2 * v28];
      v29[4] = v23;
      void v29[5] = v25;
      v18 += 40;
      --v20;
    }
    while (v20);
    a2 = v94;
  }
  uint64_t v30 = Array.description.getter();
  uint64_t v32 = v31;
  swift_bridgeObjectRelease();
  uint64_t v33 = (void *)v93;
  *(void *)(v93 + 56) = &type metadata for String;
  unint64_t v34 = sub_10000B4CC();
  v33[8] = v34;
  v33[4] = v30;
  v33[5] = v32;
  id v35 = [a2 debugDescription];
  uint64_t v36 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v38 = v37;

  v33[12] = &type metadata for String;
  v33[13] = v34;
  unint64_t v84 = v34;
  v33[9] = v36;
  v33[10] = v38;
  os_log(_:dso:log:_:_:)();
  swift_bridgeObjectRelease();
  uint64_t v39 = _swiftEmptyArrayStorage;
  if (v17)
  {
    id v102 = _swiftEmptyArrayStorage;
    sub_1000B7034(0, v17, 0);
    unint64_t v40 = v91;
    uint64_t v41 = v90 + 32;
    uint64_t v39 = v102;
    do
    {
      sub_10001D010(v41, (uint64_t)v99);
      uint64_t v43 = v100;
      uint64_t v42 = v101;
      sub_10001CD44(v99, v100);
      (*(void (**)(uint64_t))(*(void *)(*(void *)(v42 + 8) + 8) + 32))(v43);
      _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)v99);
      uint64_t v44 = v40;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        sub_1000B7034(0, v39[2] + 1, 1);
        uint64_t v39 = v102;
      }
      unint64_t v46 = v39[2];
      unint64_t v45 = v39[3];
      if (v46 >= v45 >> 1)
      {
        sub_1000B7034(v45 > 1, v46 + 1, 1);
        uint64_t v39 = v102;
      }
      v39[2] = v46 + 1;
      (*(void (**)(unint64_t, char *, uint64_t))(v97 + 32))((unint64_t)v39+ ((*(unsigned __int8 *)(v97 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v97 + 80))+ *(void *)(v97 + 72) * v46, v44, v98);
      id v102 = v39;
      v41 += 40;
      --v17;
      unint64_t v40 = v44;
    }
    while (v17);
  }
  uint64_t v48 = (uint64_t)v95;
  uint64_t v47 = v96;
  if (!v39[2]) {
    return swift_bridgeObjectRelease();
  }
  id v49 = v94;
  id v50 = [v94 timestamp];
  static Date._unconditionallyBridgeFromObjectiveC(_:)();

  [v49 latitude];
  uint64_t v52 = v51;
  [v49 longitude];
  uint64_t v54 = v53;
  [v49 horizontalAccuracy];
  uint64_t v55 = (int *)v92;
  uint64_t v56 = *(int *)(v92 + 20);
  *(void *)(v48 + v56) = v52;
  uint64_t v57 = v55[6];
  *(void *)(v48 + v57) = v54;
  uint64_t v58 = v55[7];
  *(void *)(v48 + v58) = v59;
  uint64_t v60 = (char *)v55[8];
  *(void *)&v60[v48] = v39;
  uint64_t v61 = v55[9];
  *(unsigned char *)(v48 + v61) = 10;
  uint64_t v62 = (void **)(*(void *)(v47 + 104) + OBJC_IVAR____TtC12searchpartyd22CurrentLocationMonitor_currentLocation);
  swift_beginAccess();
  uint64_t v63 = *v62;
  if (v63)
  {
    swift_bridgeObjectRetain();
    id v64 = v63;
    static os_log_type_t.default.getter();
    uint64_t v65 = swift_allocObject();
    uint64_t v98 = v57;
    Swift::String v66 = (void *)v65;
    *(_OWORD *)(v65 + 16) = xmmword_101342130;
    id v67 = [v64 description];
    uint64_t v97 = v58;
    id v68 = v67;
    uint64_t v69 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v94 = v60;
    uint64_t v70 = v69;
    uint64_t v72 = v71;

    unint64_t v73 = v84;
    v66[7] = &type metadata for String;
    v66[8] = v73;
    v66[4] = v70;
    v66[5] = v72;
    os_log(_:dso:log:_:_:)();
    swift_bridgeObjectRelease();
    id v74 = [v64 timestamp];
    uint64_t v75 = v86;
    static Date._unconditionallyBridgeFromObjectiveC(_:)();

    [v64 coordinate];
    uint64_t v77 = v76;
    uint64_t v48 = (uint64_t)v95;
    [v64 coordinate];
    uint64_t v79 = v78;
    [v64 horizontalAccuracy];
    uint64_t v81 = v80;
    sub_100EFA1F4(v48, (uint64_t (*)(void))type metadata accessor for BeaconLocationUpdate);
    (*(void (**)(uint64_t, char *, uint64_t))(v87 + 32))(v48, v75, v88);
    *(void *)(v48 + v56) = v77;
    *(void *)(v48 + v98) = v79;
    *(void *)(v48 + v97) = v81;
    *(void *)&v94[v48] = v39;
    *(unsigned char *)(v48 + v61) = 10;
    swift_bridgeObjectRetain();
    sub_100EF84F8(v64, (uint64_t)v39);

    swift_bridgeObjectRelease();
  }
  if (swift_unknownObjectWeakLoadStrong())
  {
    sub_100510F1C(*(unsigned char *)v89, *(void *)(v89 + 8), *(void *)(v89 + 16), v48);
    swift_unknownObjectRelease();
  }
  return sub_100EFA1F4(v48, (uint64_t (*)(void))type metadata accessor for BeaconLocationUpdate);
}

uint64_t sub_100EF969C(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v8 = (char *)v16 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = type metadata accessor for DispatchQoS();
  uint64_t v10 = *(void *)(v9 - 8);
  __chkstk_darwin(v9);
  uint64_t v12 = (char *)v16 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16[0] = *(void *)(v2 + 72);
  uint64_t v13 = swift_allocObject();
  *(void *)(v13 + 16) = a2;
  *(void *)(v13 + 24) = a1;
  aBlock[4] = sub_100EFB1D0;
  aBlock[5] = v13;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_1004B5480;
  aBlock[3] = &unk_1015FBE10;
  unint64_t v14 = _Block_copy(aBlock);
  swift_bridgeObjectRetain();
  swift_retain();
  static DispatchQoS.unspecified.getter();
  v16[1] = _swiftEmptyArrayStorage;
  sub_100EFAB8C((unint64_t *)&qword_10163B7E0, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
  sub_10000588C((uint64_t *)&unk_10163F350);
  sub_1001BF100((unint64_t *)&qword_10163B7F0, (uint64_t *)&unk_10163F350);
  dispatch thunk of SetAlgebra.init<A>(_:)();
  OS_dispatch_queue.async(group:qos:flags:execute:)();
  _Block_release(v14);
  (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  (*(void (**)(char *, uint64_t))(v10 + 8))(v12, v9);
  return swift_release();
}

uint64_t sub_100EF9954(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for UUID();
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v7 = (char *)&v28 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  int v31 = static os_log_type_t.default.getter();
  if (qword_101637298 != -1) {
    swift_once();
  }
  uint64_t v30 = qword_10170EFF0;
  sub_10000588C((uint64_t *)&unk_10163AD00);
  uint64_t v29 = swift_allocObject();
  *(_OWORD *)(v29 + 16) = xmmword_101347BA0;
  int64_t v8 = *(void *)(a1 + 16);
  if (v8)
  {
    uint64_t v28 = a2;
    id v35 = _swiftEmptyArrayStorage;
    sub_1000B6ED0(0, v8, 0);
    uint64_t v9 = a1 + 32;
    uint64_t v10 = (void (**)(char *, uint64_t))(v5 + 8);
    do
    {
      sub_10001D010(v9, (uint64_t)v32);
      uint64_t v11 = v33;
      uint64_t v12 = v34;
      sub_10001CD44(v32, v33);
      (*(void (**)(uint64_t))(*(void *)(*(void *)(v12 + 8) + 8) + 32))(v11);
      uint64_t v13 = UUID.uuidString.getter();
      uint64_t v15 = v14;
      (*v10)(v7, v4);
      _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)v32);
      uint64_t v16 = v35;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        sub_1000B6ED0(0, v16[2] + 1, 1);
        uint64_t v16 = v35;
      }
      unint64_t v18 = v16[2];
      unint64_t v17 = v16[3];
      if (v18 >= v17 >> 1)
      {
        sub_1000B6ED0(v17 > 1, v18 + 1, 1);
        uint64_t v16 = v35;
      }
      void v16[2] = v18 + 1;
      uint64_t v19 = &v16[2 * v18];
      v19[4] = v13;
      v19[5] = v15;
      v9 += 40;
      --v8;
    }
    while (v8);
  }
  uint64_t v20 = Array.description.getter();
  uint64_t v22 = v21;
  swift_bridgeObjectRelease();
  uint64_t v23 = (void *)v29;
  *(void *)(v29 + 56) = &type metadata for String;
  unint64_t v24 = sub_10000B4CC();
  v23[8] = v24;
  v23[4] = v20;
  v23[5] = v22;
  uint64_t v25 = UUID.uuidString.getter();
  v23[12] = &type metadata for String;
  v23[13] = v24;
  v23[9] = v25;
  v23[10] = v26;
  os_log(_:dso:log:_:_:)();
  return swift_bridgeObjectRelease();
}

uint64_t sub_100EF9C30()
{
  swift_bridgeObjectRelease();

  return _swift_deallocObject(v0, 40, 7);
}

uint64_t sub_100EF9C68()
{
  return sub_100EF8C30(*(unsigned __int8 *)(v0 + 16), *(void *)(v0 + 24), *(void *)(v0 + 32));
}

uint64_t sub_100EF9C74()
{
  swift_weakDestroy();

  return _swift_deallocObject(v0, 24, 7);
}

uint64_t sub_100EF9CAC()
{
  swift_release();
  swift_release();

  return _swift_deallocObject(v0, 40, 7);
}

uint64_t sub_100EF9CEC()
{
  return sub_1008E3974(*(void *)(v0 + 16), *(uint64_t (**)(void))(v0 + 24));
}

uint64_t sub_100EF9CF8()
{
  uint64_t v1 = (int *)type metadata accessor for BeaconEstimatedLocation();
  uint64_t v21 = *(unsigned __int8 *)(*((void *)v1 - 1) + 80);
  uint64_t v19 = *(void *)(*((void *)v1 - 1) + 64);
  uint64_t v2 = type metadata accessor for UUID();
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t v20 = *(unsigned __int8 *)(v3 + 80);
  uint64_t v18 = *(void *)(v3 + 64);
  uint64_t v4 = *(void *)(type metadata accessor for BeaconLocationUpdate() - 8);
  uint64_t v17 = *(unsigned __int8 *)(v4 + 80);
  uint64_t v16 = *(void *)(v4 + 64);
  uint64_t v22 = v0;
  uint64_t v5 = v0 + ((v21 + 16) & ~v21);
  sub_10001CFB8(*(void *)v5, *(void *)(v5 + 8));
  uint64_t v6 = *(void (**)(uint64_t, uint64_t))(v3 + 8);
  v6(v5 + v1[5], v2);
  uint64_t v15 = v6;
  v6(v5 + v1[6], v2);
  uint64_t v7 = v5 + v1[10];
  uint64_t v8 = type metadata accessor for Date();
  uint64_t v9 = *(void *)(v8 - 8);
  uint64_t v10 = *(void (**)(uint64_t, uint64_t))(v9 + 8);
  v10(v7, v8);
  uint64_t v11 = v5 + v1[12];
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v9 + 48))(v11, 1, v8)) {
    v10(v11, v8);
  }
  uint64_t v12 = (((v21 + 16) & ~v21) + v19 + v20) & ~v20;
  unint64_t v13 = (((v18 + v12 + 7) & 0xFFFFFFFFFFFFFFF8) + v17 + 24) & ~v17;
  swift_bridgeObjectRelease();
  v15(v22 + v12, v2);
  swift_bridgeObjectRelease();
  v10(v22 + v13, v8);
  swift_bridgeObjectRelease();
  swift_release();

  return _swift_deallocObject(v22, ((v16 + v13 + 7) & 0xFFFFFFFFFFFFFFF8) + 8, v21 | v20 | v17 | 7);
}

uint64_t sub_100EFA010(uint64_t a1)
{
  uint64_t v3 = *(void *)(type metadata accessor for BeaconEstimatedLocation() - 8);
  unint64_t v4 = (*(unsigned __int8 *)(v3 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  uint64_t v5 = *(void *)(v3 + 64);
  uint64_t v6 = *(void *)(type metadata accessor for UUID() - 8);
  unint64_t v7 = (v4 + v5 + *(unsigned __int8 *)(v6 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80);
  unint64_t v8 = (*(void *)(v6 + 64) + v7 + 7) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v9 = *(void *)(type metadata accessor for BeaconLocationUpdate() - 8);
  unint64_t v10 = (v8 + *(unsigned __int8 *)(v9 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80);
  uint64_t v11 = *(void *)(v1 + v8);
  uint64_t v12 = *(void *)(v1 + v8 + 8);
  uint64_t v13 = *(void *)(v1 + v8 + 16);
  uint64_t v14 = *(void *)(v1 + ((*(void *)(v9 + 64) + v10 + 7) & 0xFFFFFFFFFFFFFFF8));

  return sub_100EF78C4(a1, v1 + v4, v1 + v7, v11, v12, v13, v1 + v10, v14);
}

uint64_t sub_100EFA18C(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

uint64_t sub_100EFA1F4(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t sub_100EFA254(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v19 = a2;
  uint64_t v20 = a3;
  uint64_t v6 = type metadata accessor for UUID();
  uint64_t v17 = *(void *)(v6 - 8);
  uint64_t v18 = v6;
  __chkstk_darwin(v6);
  unint64_t v8 = (char *)&v17 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = type metadata accessor for OS_dispatch_queue.Attributes();
  __chkstk_darwin(v9);
  uint64_t v10 = type metadata accessor for DispatchQoS();
  __chkstk_darwin(v10 - 8);
  uint64_t v11 = type metadata accessor for OS_dispatch_queue.AutoreleaseFrequency();
  uint64_t v12 = *(void *)(v11 - 8);
  __chkstk_darwin(v11);
  uint64_t v14 = (char *)&v17 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v23 = type metadata accessor for BeaconManagerService();
  unint64_t v24 = &off_1015E5250;
  *(void *)&long long v22 = a1;
  *(void *)(a4 + 24) = 0;
  swift_unknownObjectWeakInit();
  sub_10000584C();
  (*(void (**)(char *, void, uint64_t))(v12 + 104))(v14, enum case for OS_dispatch_queue.AutoreleaseFrequency.workItem(_:), v11);
  static DispatchQoS.unspecified.getter();
  uint64_t v21 = _swiftEmptyArrayStorage;
  sub_100EFAB8C((unint64_t *)&qword_101638CC0, (void (*)(uint64_t))&type metadata accessor for OS_dispatch_queue.Attributes);
  sub_10000588C((uint64_t *)&unk_1016376F0);
  sub_1001BF100((unint64_t *)&qword_101638CD0, (uint64_t *)&unk_1016376F0);
  dispatch thunk of SetAlgebra.init<A>(_:)();
  *(void *)(a4 + 72) = OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)();
  *(void *)(a4 + OBJC_IVAR____TtC12searchpartyd13IntentSession_nearOwnerServiceSubscription) = 0;
  *(void *)(a4 + OBJC_IVAR____TtC12searchpartyd13IntentSession_monitorTimer) = 0;
  *(void *)(a4 + OBJC_IVAR____TtC12searchpartyd13IntentSession_nearOwnerMonitoringTimer) = 0;
  UUID.init()();
  (*(void (**)(uint64_t, char *, uint64_t))(v17 + 32))(a4 + OBJC_IVAR____TtC12searchpartyd13IntentSession_sessionID, v8, v18);
  sub_10001CEB0(&v22, a4 + 32);
  uint64_t v15 = v20;
  *(void *)(a4 + OBJC_IVAR____TtC12searchpartyd13IntentSession_beaconStore) = v19;
  sub_100EFA740(v15, a4 + OBJC_IVAR____TtC12searchpartyd13IntentSession_intent, (uint64_t (*)(void))type metadata accessor for Intent);
  *(unsigned char *)(a4 + OBJC_IVAR____TtC12searchpartyd13IntentSession_monitorStopped) = 0;
  return a4;
}

uint64_t sub_100EFA5DC()
{
  return sub_100EFB188((void (*)(void))&_swift_release);
}

uint64_t sub_100EFA5F4()
{
  return sub_100EF6AF8(*(void *)(v0 + 16), *(void *)(v0 + 24));
}

uint64_t sub_100EFA5FC()
{
  uint64_t v1 = (int *)(type metadata accessor for Intent() - 8);
  uint64_t v2 = *(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v3 = (v2 + 16) & ~v2;
  uint64_t v4 = *(void *)(*(void *)v1 + 64);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v5 = v0 + v3 + v1[11];
  uint64_t v6 = type metadata accessor for BeaconLocationUpdate();
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 48))(v5, 1, v6))
  {
    uint64_t v7 = type metadata accessor for Date();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v7 - 8) + 8))(v5, v7);
    swift_bridgeObjectRelease();
  }

  return _swift_deallocObject(v0, v3 + v4, v2 | 7);
}

uint64_t sub_100EFA740(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 32))(a2, a1, v5);
  return a2;
}

uint64_t sub_100EFA7A8()
{
  uint64_t v1 = *(void *)(type metadata accessor for Intent() - 8);
  uint64_t v2 = v0 + ((*(unsigned __int8 *)(v1 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80));

  return sub_100EF69F4(v2);
}

uint64_t sub_100EFA808()
{
  uint64_t v1 = (int *)(type metadata accessor for Intent() - 8);
  uint64_t v2 = *(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v3 = (v2 + 40) & ~v2;
  uint64_t v4 = *(void *)(*(void *)v1 + 64);
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v5 = v0 + v3 + v1[11];
  uint64_t v6 = type metadata accessor for BeaconLocationUpdate();
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 48))(v5, 1, v6))
  {
    uint64_t v7 = type metadata accessor for Date();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v7 - 8) + 8))(v5, v7);
    swift_bridgeObjectRelease();
  }

  return _swift_deallocObject(v0, v3 + v4, v2 | 7);
}

uint64_t sub_100EFA95C()
{
  uint64_t v1 = *(void *)(type metadata accessor for Intent() - 8);
  uint64_t v2 = v0[2];
  uint64_t v3 = (uint64_t (*)(void))v0[3];
  uint64_t v4 = v0[4];
  uint64_t v5 = (uint64_t)v0 + ((*(unsigned __int8 *)(v1 + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80));

  return sub_1008E3690(v2, v3, v4, v5);
}

uint64_t sub_100EFA9C4()
{
  uint64_t v1 = (int *)(type metadata accessor for Intent() - 8);
  uint64_t v2 = *(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v3 = (v2 + 24) & ~v2;
  uint64_t v4 = *(void *)(*(void *)v1 + 64);
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v5 = v0 + v3 + v1[11];
  uint64_t v6 = type metadata accessor for BeaconLocationUpdate();
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 48))(v5, 1, v6))
  {
    uint64_t v7 = type metadata accessor for Date();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v7 - 8) + 8))(v5, v7);
    swift_bridgeObjectRelease();
  }

  return _swift_deallocObject(v0, v3 + v4, v2 | 7);
}

uint64_t sub_100EFAB10()
{
  uint64_t v1 = *(void *)(type metadata accessor for Intent() - 8);
  uint64_t v2 = *(void *)(v0 + 16);
  uint64_t v3 = (unsigned __int8 *)(v0
                         + ((*(unsigned __int8 *)(v1 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80)));

  return sub_100EF5FE0(v2, v3);
}

uint64_t sub_100EFAB74(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_100EFAB84()
{
  return swift_release();
}

uint64_t sub_100EFAB8C(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_100EFABD4(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v20 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v6 = (char *)&v18 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v19 = type metadata accessor for DispatchQoS();
  uint64_t v7 = *(void *)(v19 - 8);
  __chkstk_darwin(v19);
  uint64_t v9 = (char *)&v18 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = type metadata accessor for Intent();
  uint64_t v11 = *(void *)(v10 - 8);
  uint64_t v12 = *(void *)(v11 + 64);
  __chkstk_darwin(v10 - 8);
  uint64_t v18 = *(void *)(v2 + 72);
  uint64_t v13 = swift_allocObject();
  swift_weakInit();
  sub_100EFA18C(a1, (uint64_t)&v18 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0), (uint64_t (*)(void))type metadata accessor for Intent);
  unint64_t v14 = (*(unsigned __int8 *)(v11 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v11 + 80);
  uint64_t v15 = swift_allocObject();
  sub_100EFA740((uint64_t)&v18 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0), v15 + v14, (uint64_t (*)(void))type metadata accessor for Intent);
  *(void *)(v15 + ((v12 + v14 + 7) & 0xFFFFFFFFFFFFFFF8)) = v13;
  aBlock[4] = sub_100EFB0E4;
  aBlock[5] = v15;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_1004B5480;
  aBlock[3] = &unk_1015FBDC0;
  uint64_t v16 = _Block_copy(aBlock);
  swift_retain();
  static DispatchQoS.unspecified.getter();
  uint64_t v21 = _swiftEmptyArrayStorage;
  sub_100EFAB8C((unint64_t *)&qword_10163B7E0, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
  sub_10000588C((uint64_t *)&unk_10163F350);
  sub_1001BF100((unint64_t *)&qword_10163B7F0, (uint64_t *)&unk_10163F350);
  dispatch thunk of SetAlgebra.init<A>(_:)();
  OS_dispatch_queue.async(group:qos:flags:execute:)();
  _Block_release(v16);
  (*(void (**)(char *, uint64_t))(v20 + 8))(v6, v4);
  (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v19);
  swift_release();
  return swift_release();
}

uint64_t sub_100EFAF84()
{
  uint64_t v1 = (int *)(type metadata accessor for Intent() - 8);
  uint64_t v2 = *(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v3 = (v2 + 16) & ~v2;
  uint64_t v4 = *(void *)(*(void *)v1 + 64);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v5 = v0 + v3 + v1[11];
  uint64_t v6 = type metadata accessor for BeaconLocationUpdate();
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 48))(v5, 1, v6))
  {
    uint64_t v7 = type metadata accessor for Date();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v7 - 8) + 8))(v5, v7);
    swift_bridgeObjectRelease();
  }
  swift_release();

  return _swift_deallocObject(v0, ((v4 + v3 + 7) & 0xFFFFFFFFFFFFFFF8) + 8, v2 | 7);
}

uint64_t sub_100EFB0E4()
{
  uint64_t v1 = *(void *)(type metadata accessor for Intent() - 8);
  uint64_t v2 = v0 + ((*(unsigned __int8 *)(v1 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80));

  return sub_100EF8D28(v2);
}

uint64_t sub_100EFB170()
{
  return sub_100EFB188((void (*)(void))&_swift_bridgeObjectRelease);
}

uint64_t sub_100EFB188(void (*a1)(void))
{
  a1(*(void *)(v1 + 16));
  swift_release();

  return _swift_deallocObject(v1, 32, 7);
}

uint64_t sub_100EFB1D0()
{
  return sub_100EF9954(*(void *)(v0 + 16), *(void *)(v0 + 24));
}

uint64_t sub_100EFB1EC(uint64_t a1, char a2, char a3, uint64_t a4)
{
  *(unsigned char *)(v4 + 377) = a3;
  *(unsigned char *)(v4 + 376) = a2;
  *(void *)(v4 + 192) = a1;
  *(void *)(v4 + 200) = a4;
  uint64_t v5 = type metadata accessor for HashAlgorithm();
  *(void *)(v4 + 208) = v5;
  *(void *)(v4 + 216) = *(void *)(v5 - 8);
  *(void *)(v4 + 224) = swift_task_alloc();
  *(void *)(v4 + 232) = *(void *)(type metadata accessor for AccessoryMetadata(0) - 8);
  *(void *)(v4 + 240) = swift_task_alloc();
  *(void *)(v4 + 248) = swift_task_alloc();
  uint64_t v6 = type metadata accessor for Locale();
  *(void *)(v4 + 256) = v6;
  *(void *)(v4 + 264) = *(void *)(v6 - 8);
  *(void *)(v4 + 272) = swift_task_alloc();
  uint64_t v7 = type metadata accessor for Date();
  *(void *)(v4 + 280) = v7;
  *(void *)(v4 + 288) = *(void *)(v7 - 8);
  *(void *)(v4 + 296) = swift_task_alloc();
  return _swift_task_switch(sub_100EFB3D4, 0, 0);
}

void sub_100EFB3D4()
{
  uint64_t v82 = v0;
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v81 = &_swiftEmptyDictionarySingleton;
  sub_10016C0FC(1702195828, 0xE400000000000000, 0xD00000000000001BLL, 0x80000001013F64C0, isUniquelyReferenced_nonNull_native);
  swift_bridgeObjectRelease();
  id v2 = [self currentDevice];
  if (!v2)
  {
    __break(1u);
    goto LABEL_27;
  }
  uint64_t v3 = v2;
  id v4 = [v2 serverFriendlyDescription];

  if (!v4)
  {
LABEL_27:
    __break(1u);
    return;
  }
  uint64_t v5 = *(void *)(v0 + 288);
  uint64_t v6 = *(void *)(v0 + 296);
  uint64_t v7 = *(void *)(v0 + 272);
  uint64_t v8 = *(void *)(v0 + 280);
  uint64_t v78 = *(void *)(v0 + 264);
  uint64_t v79 = *(void *)(v0 + 256);
  uint64_t v9 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v11 = v10;

  char v12 = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v81 = &_swiftEmptyDictionarySingleton;
  sub_10016C0FC(v9, v11, 0xD000000000000011, 0x80000001013F64E0, v12);
  swift_bridgeObjectRelease();
  Date.init()();
  uint64_t v13 = Date.epoch.getter();
  (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v6, v8);
  *(void *)(v0 + 144) = v13;
  uint64_t v14 = dispatch thunk of CustomStringConvertible.description.getter();
  uint64_t v16 = v15;
  char v17 = swift_isUniquelyReferenced_nonNull_native();
  sub_10016C0FC(v14, v16, 0xD000000000000015, 0x80000001013F6500, v17);
  swift_bridgeObjectRelease();
  *(void *)(v0 + 152) = 1;
  uint64_t v18 = dispatch thunk of CustomStringConvertible.description.getter();
  uint64_t v20 = v19;
  char v21 = swift_isUniquelyReferenced_nonNull_native();
  sub_10016C0FC(v18, v20, 0xD000000000000013, 0x80000001013F6520, v21);
  uint64_t v22 = swift_bridgeObjectRelease();
  uint64_t v23 = sub_100BCABFC(v22);
  uint64_t v25 = v24;
  char v26 = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v81 = &_swiftEmptyDictionarySingleton;
  sub_10016C0FC(v23, v25, 0x6567412D72657355, 0xEA0000000000746ELL, v26);
  swift_bridgeObjectRelease();
  static Locale.current.getter();
  uint64_t v27 = Locale.acceptLanguageCode.getter();
  uint64_t v29 = v28;
  (*(void (**)(uint64_t, uint64_t))(v78 + 8))(v7, v79);
  char v30 = swift_isUniquelyReferenced_nonNull_native();
  sub_10016C0FC(v27, v29, 0x4C2D747065636341, 0xEF65676175676E61, v30);
  swift_bridgeObjectRelease();
  if (qword_101637188 != -1) {
    swift_once();
  }
  int v31 = (void *)qword_10170EE68;
  id v77 = self;
  id v32 = [v77 sharedInstance];
  unsigned int v33 = [v32 isInternalBuild];

  if (v33)
  {
    NSString v34 = String._bridgeToObjectiveC()();
    unsigned int v35 = [v31 BOOLForKey:v34];

    if (v35)
    {
      char v36 = swift_isUniquelyReferenced_nonNull_native();
      uint64_t v81 = &_swiftEmptyDictionarySingleton;
      sub_10016C0FC(0x7465722C6C616572, 0xEF302D726F727245, 0xD000000000000012, 0x80000001013F6560, v36);
      swift_bridgeObjectRelease();
    }
  }
  uint64_t v37 = *(void *)(v0 + 192);
  *(void *)(v0 + 304) = &_swiftEmptyDictionarySingleton;
  int64_t v38 = *(void *)(v37 + 16);
  if (v38)
  {
    uint64_t v39 = *(void *)(v0 + 232);
    uint64_t v81 = _swiftEmptyArrayStorage;
    sub_1000B6F90(0, v38, 0);
    uint64_t v40 = v37 + ((*(unsigned __int8 *)(v39 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v39 + 80));
    uint64_t v41 = *(void *)(v39 + 72);
    uint64_t v42 = _swiftEmptyArrayStorage;
    do
    {
      uint64_t v44 = *(void *)(v0 + 240);
      uint64_t v43 = *(void *)(v0 + 248);
      uint64_t v45 = *(unsigned __int8 *)(v0 + 376);
      char v46 = *(unsigned char *)(v0 + 377);
      sub_100EFC350(v40, v43);
      sub_100EFC350(v43, v44);
      sub_100F40CE8(v44, v45, v46, v0 + 16);
      sub_100EFC3B4(v43);
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        sub_1000B6F90(0, v42[2] + 1, 1);
        uint64_t v42 = v81;
      }
      unint64_t v48 = v42[2];
      unint64_t v47 = v42[3];
      if (v48 >= v47 >> 1)
      {
        sub_1000B6F90(v47 > 1, v48 + 1, 1);
        uint64_t v42 = v81;
      }
      uint64_t v42[2] = v48 + 1;
      id v49 = &v42[16 * v48];
      long long v50 = *(_OWORD *)(v0 + 16);
      long long v51 = *(_OWORD *)(v0 + 32);
      long long v52 = *(_OWORD *)(v0 + 64);
      v49[4] = *(_OWORD *)(v0 + 48);
      v49[5] = v52;
      v49[2] = v50;
      v49[3] = v51;
      long long v53 = *(_OWORD *)(v0 + 80);
      long long v54 = *(_OWORD *)(v0 + 96);
      long long v55 = *(_OWORD *)(v0 + 128);
      v49[8] = *(_OWORD *)(v0 + 112);
      v49[9] = v55;
      v49[6] = v53;
      v49[7] = v54;
      v40 += v41;
      --v38;
    }
    while (v38);
    swift_bridgeObjectRelease();
  }
  else
  {
    swift_bridgeObjectRelease();
    uint64_t v42 = _swiftEmptyArrayStorage;
  }
  os_log_type_t v56 = static os_log_type_t.debug.getter();
  sub_1003444E0();
  uint64_t v57 = static OS_os_log.default.getter();
  if (os_log_type_enabled(v57, v56))
  {
    swift_bridgeObjectRetain_n();
    uint64_t v58 = (uint8_t *)swift_slowAlloc();
    uint64_t v81 = (void *)swift_slowAlloc();
    *(_DWORD *)uint64_t v58 = 136315138;
    *(void *)(v0 + 176) = v42;
    swift_bridgeObjectRetain();
    uint64_t v59 = String.init<A>(describing:)();
    *(void *)(v0 + 184) = sub_1008FA0F0(v59, v60, (uint64_t *)&v81);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease_n();
    _os_log_impl((void *)&_mh_execute_header, v57, v56, "AccessoryInfoRequestContent %s", v58, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }

  type metadata accessor for JSONEncoder();
  swift_allocObject();
  *(void *)(v0 + 312) = JSONEncoder.init()();
  *(void *)(v0 + 160) = v42;
  sub_100EFC410();
  uint64_t v61 = dispatch thunk of JSONEncoder.encode<A>(_:)();
  *(void *)(v0 + 320) = v61;
  *(void *)(v0 + 328) = v62;
  unint64_t v63 = v62;
  swift_bridgeObjectRelease();
  sub_1000361E0(v61, v63);
  id v64 = [v77 sharedInstance];
  unsigned int v65 = [v64 isInternalBuild];

  if (v65)
  {
    uint64_t v67 = *(void *)(v0 + 216);
    uint64_t v66 = *(void *)(v0 + 224);
    uint64_t v68 = *(void *)(v0 + 208);
    (*(void (**)(uint64_t, void, uint64_t))(v67 + 104))(v66, enum case for HashAlgorithm.sha256(_:), v68);
    sub_1000361E0(v61, v63);
    uint64_t v69 = Data.hash(algorithm:)();
    uint64_t v71 = v70;
    *(void *)(v0 + 336) = v69;
    *(void *)(v0 + 344) = v70;
    (*(void (**)(uint64_t, uint64_t))(v67 + 8))(v66, v68);
    uint64_t v80 = (void (*)(uint64_t, uint64_t, uint64_t))((char *)&dword_10165AB10 + dword_10165AB10);
    uint64_t v72 = (void *)swift_task_alloc();
    *(void *)(v0 + 352) = v72;
    *uint64_t v72 = v0;
    v72[1] = sub_100EFBDC0;
    uint64_t v73 = *(void *)(v0 + 200);
    v80(v69, v71, v73);
  }
  else
  {
    swift_release();
    sub_10001CFB8(v61, v63);
    swift_release();
    uint64_t v75 = *(void *)(v0 + 320);
    uint64_t v74 = *(void *)(v0 + 328);
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v76 = *(void (**)(void *, uint64_t, uint64_t))(v0 + 8);
    v76(&_swiftEmptyDictionarySingleton, v75, v74);
  }
}

uint64_t sub_100EFBDC0(uint64_t a1)
{
  uint64_t v3 = *v2;
  uint64_t v4 = *v2;
  *(void *)(v4 + 360) = a1;
  *(void *)(v4 + 368) = v1;
  swift_task_dealloc();
  sub_10001CFB8(*(void *)(v3 + 336), *(void *)(v3 + 344));
  if (v1)
  {
    swift_errorRelease();
    uint64_t v5 = sub_100EFC180;
  }
  else
  {
    uint64_t v5 = sub_100EFBF18;
  }
  return _swift_task_switch(v5, 0, 0);
}

uint64_t sub_100EFBF18()
{
  uint64_t v18 = v0;
  uint64_t v1 = v0[45];
  uint64_t v2 = v0[46];
  uint64_t v3 = v0[38];
  swift_bridgeObjectRetain();
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v17 = v3;
  sub_1001EE9C8(v1, (uint64_t)sub_100BD6E00, 0, isUniquelyReferenced_nonNull_native, &v17);
  if (v2)
  {
    return swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v6 = v17;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if (qword_101636A58 != -1) {
      swift_once();
    }
    uint64_t v7 = type metadata accessor for Logger();
    sub_100010324(v7, (uint64_t)qword_10170DDA8);
    uint64_t v8 = Logger.logObject.getter();
    os_log_type_t v9 = static os_log_type_t.default.getter();
    BOOL v10 = os_log_type_enabled(v8, v9);
    uint64_t v12 = v0[40];
    unint64_t v11 = v0[41];
    if (v10)
    {
      uint64_t v13 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v13 = 0;
      _os_log_impl((void *)&_mh_execute_header, v8, v9, "Adding BAA Attestation headers for internal build", v13, 2u);
      swift_slowDealloc();
      sub_10001CFB8(v12, v11);
      swift_release();
      swift_release();

      sub_10001CFB8(v12, v11);
    }
    else
    {
      sub_10001CFB8(v0[40], v0[41]);
      sub_10001CFB8(v12, v11);
      swift_release();
      swift_release();
    }
    uint64_t v15 = v0[40];
    uint64_t v14 = v0[41];
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v16 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))v0[1];
    return v16(v6, v15, v14);
  }
}

uint64_t sub_100EFC180()
{
  uint64_t v1 = v0[38];
  if (qword_101636A58 != -1) {
    swift_once();
  }
  uint64_t v2 = type metadata accessor for Logger();
  sub_100010324(v2, (uint64_t)qword_10170DDA8);
  uint64_t v3 = Logger.logObject.getter();
  os_log_type_t v4 = static os_log_type_t.default.getter();
  BOOL v5 = os_log_type_enabled(v3, v4);
  uint64_t v7 = v0[40];
  unint64_t v6 = v0[41];
  if (v5)
  {
    uint64_t v8 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v8 = 0;
    _os_log_impl((void *)&_mh_execute_header, v3, v4, "Adding BAA Attestation headers for internal build", v8, 2u);
    swift_slowDealloc();
    sub_10001CFB8(v7, v6);
    swift_release();
    swift_release();

    sub_10001CFB8(v7, v6);
  }
  else
  {
    sub_10001CFB8(v0[40], v0[41]);
    sub_10001CFB8(v7, v6);
    swift_release();
    swift_release();
  }
  uint64_t v10 = v0[40];
  uint64_t v9 = v0[41];
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  unint64_t v11 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))v0[1];
  return v11(v1, v10, v9);
}

uint64_t sub_100EFC350(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for AccessoryMetadata(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_100EFC3B4(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for AccessoryMetadata(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

unint64_t sub_100EFC410()
{
  unint64_t result = qword_101662DF0;
  if (!qword_101662DF0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_101662DF0);
  }
  return result;
}

ValueMetadata *type metadata accessor for AccessoryInfoRequest()
{
  return &type metadata for AccessoryInfoRequest;
}

uint64_t sub_100EFC474(uint64_t a1, unsigned int a2)
{
  __int16 v2 = a2;
  char v3 = a2 & 1;
  uint64_t v4 = HIWORD(a2) & 1;
  sub_10000588C((uint64_t *)&unk_10163AD00);
  uint64_t v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_10134BFA0;
  *(void *)(v5 + 56) = &type metadata for Bool;
  *(void *)(v5 + 64) = &protocol witness table for Bool;
  *(unsigned char *)(v5 + 32) = v3;
  unsigned __int8 v6 = sub_100496614();
  *(void *)(v5 + 96) = &type metadata for Bool;
  *(void *)(v5 + 104) = &protocol witness table for Bool;
  *(unsigned char *)(v5 + 72) = v6 & 1;
  *(void *)(v5 + 136) = &type metadata for Bool;
  *(void *)(v5 + 144) = &protocol witness table for Bool;
  *(unsigned char *)(v5 + 112) = HIBYTE(v2) & 1;
  unsigned __int8 v7 = sub_100F2C998();
  *(void *)(v5 + 176) = &type metadata for Bool;
  *(void *)(v5 + 184) = &protocol witness table for Bool;
  *(unsigned char *)(v5 + 152) = v7 & 1;
  unint64_t v11 = sub_1004963A0();
  type metadata accessor for CLAuthorizationStatus(0);
  OS_dispatch_queue.sync<A>(execute:)();

  *(void *)(v5 + 216) = &type metadata for Bool;
  *(void *)(v5 + 224) = &protocol witness table for Bool;
  *(unsigned char *)(v5 + 192) = (v12 - 3) < 2;
  *(void *)(v5 + 256) = &type metadata for Bool;
  *(void *)(v5 + 264) = &protocol witness table for Bool;
  *(unsigned char *)(v5 + 232) = v4;
  sub_1003444E0();
  uint64_t v8 = (void *)static OS_os_log.default.getter();
  static os_log_type_t.default.getter();
  os_log(_:dso:log:type:_:)();
  swift_bridgeObjectRelease();

  if ((v2 & 1) == 0) {
    return 0;
  }
  if ((sub_100496614() & 1) == 0) {
    return 0;
  }
  if ((v2 & 0x100) == 0) {
    return 0;
  }
  if ((sub_100F2C998() & 1) == 0) {
    return 0;
  }
  uint64_t v9 = sub_1004963A0();
  __chkstk_darwin(v9);
  OS_dispatch_queue.sync<A>(execute:)();

  if ((v12 - 3) >= 2) {
    return 0;
  }
  return v4;
}

unint64_t sub_100EFC690(char a1)
{
  unint64_t result = 0xD000000000000017;
  switch(a1)
  {
    case 1:
      unint64_t result = 0xD00000000000001BLL;
      break;
    case 2:
      unint64_t result = 0x45676E69646E6966;
      break;
    case 3:
      unint64_t result = 0x4565636976726573;
      break;
    case 4:
      unint64_t result = 0x7461745370696D66;
      break;
    case 5:
      unint64_t result = 0xD000000000000012;
      break;
    case 6:
      unint64_t result = 0x53746E756F636361;
      break;
    case 7:
      unint64_t result = 0xD000000000000015;
      break;
    default:
      return result;
  }
  return result;
}

unint64_t sub_100EFC7B4(char a1)
{
  unint64_t result = 0xD000000000000017;
  switch(a1)
  {
    case 1:
      unint64_t result = 0xD00000000000001BLL;
      break;
    case 2:
      unint64_t result = 0x45676E69646E6966;
      break;
    case 3:
      unint64_t result = 0x4565636976726573;
      break;
    case 4:
      unint64_t result = 0x7461745370696D66;
      break;
    case 5:
      unint64_t result = 0xD000000000000012;
      break;
    case 6:
      unint64_t result = 0x53746E756F636361;
      break;
    case 7:
      unint64_t result = 0xD000000000000015;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t sub_100EFC8D8(char *a1, char *a2)
{
  return sub_10071C90C(*a1, *a2);
}

Swift::Int sub_100EFC8E4()
{
  return sub_1007212E4();
}

uint64_t sub_100EFC8F0()
{
  return sub_10071FFBC();
}

Swift::Int sub_100EFC8F8()
{
  return sub_1007212E4();
}

unint64_t sub_100EFC900@<X0>(Swift::String *a1@<X0>, unsigned char *a2@<X8>)
{
  unint64_t result = sub_100EFD264(*a1);
  *a2 = result;
  return result;
}

unint64_t sub_100EFC930@<X0>(unint64_t *a1@<X8>)
{
  unint64_t result = sub_100EFC690(*v1);
  *a1 = result;
  a1[1] = v4;
  return result;
}

unint64_t sub_100EFC95C()
{
  return sub_100EFC7B4(*v0);
}

unint64_t sub_100EFC964@<X0>(Swift::String a1@<X1:X0>, unsigned char *a2@<X8>)
{
  unint64_t result = sub_100EFD264(a1);
  *a2 = result;
  return result;
}

uint64_t sub_100EFC98C(uint64_t a1)
{
  unint64_t v2 = sub_100EFD004();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_100EFC9C8(uint64_t a1)
{
  unint64_t v2 = sub_100EFD004();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_100EFCA04(void *a1, uint64_t a2, int a3)
{
  uint64_t v7 = sub_10000588C(&qword_101662DF8);
  uint64_t v8 = *(void *)(v7 - 8);
  __chkstk_darwin(v7);
  uint64_t v10 = (char *)&v14 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10001CD44(a1, a1[3]);
  sub_100EFD004();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  sub_100F2C998();
  char v22 = 0;
  KeyedEncodingContainer.encode(_:forKey:)();
  if (!v3)
  {
    int v15 = a3;
    unint64_t v11 = sub_1004963A0();
    *(&v14 - 2) = __chkstk_darwin(v11);
    type metadata accessor for CLAuthorizationStatus(0);
    OS_dispatch_queue.sync<A>(execute:)();

    char v21 = 1;
    KeyedEncodingContainer.encode(_:forKey:)();
    int v12 = v15;
    char v20 = 2;
    KeyedEncodingContainer.encode(_:forKey:)();
    char v19 = 3;
    KeyedEncodingContainer.encode(_:forKey:)();
    sub_100496614();
    char v18 = 4;
    KeyedEncodingContainer.encode(_:forKey:)();
    sub_100EFC474(a2, v12 & 0x10101);
    char v17 = 5;
    KeyedEncodingContainer.encode(_:forKey:)();
    char v16 = 7;
    KeyedEncodingContainer.encode(_:forKey:)();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v8 + 8))(v10, v7);
}

uint64_t sub_100EFCCE8(void *a1)
{
  if (*(unsigned char *)(v1 + 9)) {
    int v2 = 256;
  }
  else {
    int v2 = 0;
  }
  int v3 = v2 | *(unsigned __int8 *)(v1 + 8);
  if (*(unsigned char *)(v1 + 10)) {
    int v4 = 0x10000;
  }
  else {
    int v4 = 0;
  }
  return sub_100EFCA04(a1, *(void *)v1, v3 | v4);
}

uint64_t sub_100EFCD30(uint64_t a1)
{
  if (qword_101636CD8 != -1) {
    swift_once();
  }
  OS_dispatch_queue.sync<A>(execute:)();
  sub_1010AB630(v3);
  swift_bridgeObjectRelease();
  OS_dispatch_queue.sync<A>(execute:)();
  sub_100A5BEB0();
  swift_bridgeObjectRelease();
  [self canPublishAnonymously];
  return a1;
}

uint64_t sub_100EFCE64(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(unsigned char *)(a1 + 8) = *(unsigned char *)(a2 + 8);
  *(_WORD *)(a1 + 9) = *(_WORD *)(a2 + 9);
  swift_retain();
  return a1;
}

uint64_t assignWithCopy for FinderStatePermissions(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  swift_retain();
  swift_release();
  *(unsigned char *)(a1 + 8) = *(unsigned char *)(a2 + 8);
  *(unsigned char *)(a1 + 9) = *(unsigned char *)(a2 + 9);
  *(unsigned char *)(a1 + 10) = *(unsigned char *)(a2 + 10);
  return a1;
}

uint64_t initializeWithTake for FinderStatePermissions(uint64_t result, uint64_t *a2)
{
  uint64_t v2 = *a2;
  *(_DWORD *)(result + 7) = *(_DWORD *)((char *)a2 + 7);
  *(void *)unint64_t result = v2;
  return result;
}

uint64_t assignWithTake for FinderStatePermissions(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  swift_release();
  *(unsigned char *)(a1 + 8) = *(unsigned char *)(a2 + 8);
  *(unsigned char *)(a1 + 9) = *(unsigned char *)(a2 + 9);
  *(unsigned char *)(a1 + 10) = *(unsigned char *)(a2 + 10);
  return a1;
}

uint64_t getEnumTagSinglePayload for FinderStatePermissions(uint64_t *a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *((unsigned char *)a1 + 11)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  uint64_t v2 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for FinderStatePermissions(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(unsigned char *)(result + 10) = 0;
    *(_WORD *)(result + 8) = 0;
    *(void *)unint64_t result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 11) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)unint64_t result = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 11) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for FinderStatePermissions()
{
  return &type metadata for FinderStatePermissions;
}

unint64_t sub_100EFD004()
{
  unint64_t result = qword_101662E00;
  if (!qword_101662E00)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_101662E00);
  }
  return result;
}

unsigned char *storeEnumTagSinglePayload for FinderStatePermissions.CodingKeys(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 7 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 7) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xF9) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xF8)
  {
    unsigned int v6 = ((a2 - 249) >> 8) + 1;
    *unint64_t result = a2 + 7;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x100EFD124);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 7;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for FinderStatePermissions.CodingKeys()
{
  return &type metadata for FinderStatePermissions.CodingKeys;
}

unint64_t sub_100EFD160()
{
  unint64_t result = qword_101662E08;
  if (!qword_101662E08)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_101662E08);
  }
  return result;
}

unint64_t sub_100EFD1B8()
{
  unint64_t result = qword_101662E10;
  if (!qword_101662E10)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_101662E10);
  }
  return result;
}

unint64_t sub_100EFD210()
{
  unint64_t result = qword_101662E18;
  if (!qword_101662E18)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_101662E18);
  }
  return result;
}

unint64_t sub_100EFD264(Swift::String string)
{
  object = string._object;
  v2._countAndFlagsBits = string._countAndFlagsBits;
  v2._object = object;
  unint64_t v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_1015A4B60, v2);
  swift_bridgeObjectRelease();
  if (v3 >= 8) {
    return 8;
  }
  else {
    return v3;
  }
}

uint64_t sub_100EFD2B0@<X0>(_DWORD *a1@<X8>)
{
  return sub_10027A79C(a1);
}

void *sub_100EFD2C8(uint64_t a1)
{
  int64_t v1 = *(void *)(a1 + 16);
  if (v1)
  {
    sub_1000B6ED0(0, v1, 0);
    unint64_t v3 = (char *)(a1 + 56);
    do
    {
      uint64_t v4 = *((void *)v3 - 2);
      unint64_t v5 = *((void *)v3 - 1);
      char v6 = *v3;
      uint64_t v7 = *(v3 - 24);
      sub_1000361E0(v4, v5);
      uint64_t v8 = sub_10027B7DC(v7, v4, v5, v6);
      uint64_t v10 = v9;
      sub_10001CFB8(v4, v5);
      unint64_t v12 = _swiftEmptyArrayStorage[2];
      unint64_t v11 = _swiftEmptyArrayStorage[3];
      if (v12 >= v11 >> 1) {
        sub_1000B6ED0(v11 > 1, v12 + 1, 1);
      }
      v3 += 32;
      _swiftEmptyArrayStorage[2] = v12 + 1;
      uint64_t v13 = &_swiftEmptyArrayStorage[2 * v12];
      v13[4] = v8;
      v13[5] = v10;
      --v1;
    }
    while (v1);
  }
  return _swiftEmptyArrayStorage;
}

uint64_t sub_100EFD3D4(uint64_t a1)
{
  uint64_t v34 = type metadata accessor for MACAddress();
  uint64_t v3 = *(void *)(v34 - 8);
  uint64_t v4 = __chkstk_darwin(v34);
  unsigned int v33 = (char *)v29 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v4);
  id v32 = (char *)v29 - v6;
  int64_t v7 = *(void *)(a1 + 16);
  uint64_t v8 = _swiftEmptyArrayStorage;
  if (!v7) {
    return (uint64_t)v8;
  }
  v29[0] = v1;
  uint64_t v37 = _swiftEmptyArrayStorage;
  sub_1000B6ED0(0, v7, 0);
  uint64_t result = sub_10115FE18(a1);
  uint64_t v10 = result;
  uint64_t v12 = v11;
  char v14 = v13 & 1;
  uint64_t v30 = a1;
  uint64_t v31 = a1 + 56;
  _DWORD v29[2] = v3 + 32;
  v29[3] = v3 + 16;
  v29[4] = v3;
  v29[1] = v3 + 8;
  int v15 = v33;
  while ((v10 & 0x8000000000000000) == 0 && v10 < 1 << *(unsigned char *)(a1 + 32))
  {
    if (((*(void *)(v31 + (((unint64_t)v10 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v10) & 1) == 0) {
      goto LABEL_15;
    }
    if (*(_DWORD *)(a1 + 36) != v12) {
      goto LABEL_16;
    }
    char v16 = v32;
    uint64_t v17 = v34;
    (*(void (**)(char *, uint64_t, uint64_t))(v3 + 16))(v32, *(void *)(a1 + 48) + *(void *)(v3 + 72) * v10, v34);
    (*(void (**)(char *, char *, uint64_t))(v3 + 32))(v15, v16, v17);
    uint64_t v18 = MACAddress.dataRepresentation.getter();
    unint64_t v20 = v19;
    uint64_t v21 = Data.hexString.getter();
    uint64_t v35 = v22;
    uint64_t v36 = v21;
    sub_10001CFB8(v18, v20);
    (*(void (**)(char *, uint64_t))(v3 + 8))(v15, v17);
    uint64_t v8 = v37;
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    {
      sub_1000B6ED0(0, v8[2] + 1, 1);
      uint64_t v8 = v37;
    }
    unint64_t v24 = v8[2];
    unint64_t v23 = v8[3];
    if (v24 >= v23 >> 1)
    {
      sub_1000B6ED0(v23 > 1, v24 + 1, 1);
      uint64_t v8 = v37;
    }
    void v8[2] = v24 + 1;
    uint64_t v25 = &v8[2 * v24];
    uint64_t v26 = v35;
    v25[4] = v36;
    v25[5] = v26;
    a1 = v30;
    uint64_t result = sub_10052CB9C(v10, v12, v14 & 1, v30);
    uint64_t v10 = result;
    uint64_t v12 = v27;
    char v14 = v28 & 1;
    if (!--v7)
    {
      sub_1001A1CB8(result, v27, v28 & 1);
      return (uint64_t)v8;
    }
  }
  __break(1u);
LABEL_15:
  __break(1u);
LABEL_16:
  __break(1u);
  return result;
}

uint64_t sub_100EFD6B8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unint64_t a3@<X2>, uint64_t *a4@<X8>)
{
  if (a1 < 0)
  {
    __break(1u);
    goto LABEL_16;
  }
  unint64_t v5 = a3 >> 62;
  uint64_t v9 = 0;
  uint64_t v10 = 0;
  switch(a3 >> 62)
  {
    case 1uLL:
      uint64_t v10 = (int)a2;
      uint64_t v9 = a2 >> 32;
      break;
    case 2uLL:
      uint64_t v10 = *(void *)(a2 + 16);
      uint64_t v9 = *(void *)(a2 + 24);
      break;
    case 3uLL:
      break;
    default:
      uint64_t v10 = 0;
      uint64_t v9 = BYTE6(a3);
      break;
  }
  uint64_t v11 = sub_1008AA59C(v10, v9, a2, a3);
  if (!a1 || v11 < 0 || v11 >= a1)
  {
    uint64_t v12 = sub_1008AA520(v10, a1, a2, a3);
    uint64_t v13 = 0;
    switch((int)v5)
    {
      case 1:
        uint64_t v13 = a2 >> 32;
        break;
      case 2:
        uint64_t v13 = *(void *)(a2 + 24);
        break;
      case 3:
        break;
      default:
        uint64_t v13 = BYTE6(a3);
        break;
    }
    if (v13 < v12)
    {
LABEL_16:
      __break(1u);
      JUMPOUT(0x100EFD838);
    }
  }
  uint64_t v14 = Data._Representation.subscript.getter();
  uint64_t v16 = v15;
  uint64_t result = sub_10001CFB8(a2, a3);
  *a4 = v14;
  a4[1] = v16;
  return result;
}

uint64_t sub_100EFD868()
{
  uint64_t v0 = type metadata accessor for Logger();
  sub_10001E384(v0, qword_10170EE70);
  sub_100010324(v0, (uint64_t)qword_10170EE70);
  return Logger.init(subsystem:category:)();
}

unint64_t sub_100EFD8E8(char a1)
{
  unint64_t result = 0x6E776F6E6B6E752ELL;
  switch(a1)
  {
    case 1:
      unint64_t result = 0x6D6972507465672ELL;
      break;
    case 2:
      unint64_t result = 0xD000000000000016;
      break;
    case 3:
      unint64_t result = 0xD000000000000018;
      break;
    case 4:
      unint64_t result = 0xD000000000000014;
      break;
    case 5:
      unint64_t result = 0xD000000000000027;
      break;
    case 6:
      unint64_t result = 0xD000000000000029;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t sub_100EFD9E8@<X0>(uint64_t *a1@<X0>, unsigned char *a2@<X8>)
{
  uint64_t result = sub_100F08344(*a1);
  *a2 = result;
  return result;
}

uint64_t sub_100EFDA14()
{
  return RawRepresentable<>.init(from:)();
}

uint64_t sub_100EFDA74()
{
  return RawRepresentable<>.encode(to:)();
}

unint64_t sub_100EFDAC4()
{
  return sub_100EFD8E8(*v0);
}

uint64_t sub_100EFDACC()
{
  uint64_t v0 = type metadata accessor for OS_dispatch_queue.SchedulerTimeType.Stride();
  sub_10001E384(v0, qword_101662E20);
  sub_100010324(v0, (uint64_t)qword_101662E20);
  return static OS_dispatch_queue.SchedulerTimeType.Stride.seconds(_:)();
}

void *sub_100EFDB1C()
{
  uint64_t v1 = sub_10000588C((uint64_t *)&unk_1016477E0);
  __chkstk_darwin(v1 - 8);
  uint64_t v3 = (char *)v37 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = type metadata accessor for MACAddress();
  uint64_t v40 = *(void *)(v4 - 8);
  uint64_t v5 = __chkstk_darwin(v4);
  int64_t v7 = (char *)v37 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5);
  uint64_t v39 = (char *)v37 - v8;
  uint64_t v9 = type metadata accessor for DispatchPredicate();
  uint64_t v10 = *(void *)(v9 - 8);
  __chkstk_darwin(v9);
  uint64_t v12 = (void *)((char *)v37 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v13 = *(void **)(v0 + 24);
  *uint64_t v12 = v13;
  (*(void (**)(void *, void, uint64_t))(v10 + 104))(v12, enum case for DispatchPredicate.onQueue(_:), v9);
  id v14 = v13;
  LOBYTE(v13) = _dispatchPreconditionTest(_:)();
  uint64_t result = (void *)(*(uint64_t (**)(void *, uint64_t))(v10 + 8))(v12, v9);
  if (v13)
  {
    id v16 = [self standardUserDefaults];
    NSString v17 = String._bridgeToObjectiveC()();
    id v18 = [v16 objectForKey:v17];

    if (v18)
    {
      _bridgeAnyObjectToAny(_:)();
      swift_unknownObjectRelease();
    }
    else
    {
      memset(v47, 0, sizeof(v47));
    }
    sub_10028DF08((uint64_t)v47, (uint64_t)v48);
    if (v48[3])
    {
      sub_10000588C(&qword_101654A30);
      if (swift_dynamicCast())
      {
        uint64_t v19 = v46;
        uint64_t v20 = *(void *)(v46 + 16);
        if (v20)
        {
          uint64_t v42 = (unsigned int (**)(char *, uint64_t, uint64_t))(v40 + 48);
          uint64_t v43 = (void (**)(char *, uint64_t, uint64_t, uint64_t))(v40 + 56);
          uint64_t v44 = (void (**)(char *, char *, uint64_t))(v40 + 32);
          swift_bridgeObjectRetain();
          unint64_t v41 = sub_1000336D4();
          uint64_t v21 = 0;
          v37[1] = v19;
          uint64_t v22 = (uint64_t *)(v19 + 40);
          uint64_t v45 = _swiftEmptyArrayStorage;
          int64_t v38 = v7;
          do
          {
            uint64_t v23 = *v22;
            v48[0] = *(v22 - 1);
            v48[1] = v23;
            swift_bridgeObjectRetain_n();
            Data.init<A>(hexString:)();
            if (v24 >> 60 == 15)
            {
              uint64_t v34 = 1;
            }
            else
            {
              MACAddress.init(dataRepresentation:)();
              uint64_t v34 = 0;
            }
            (*v43)(v3, v34, 1, v4);
            swift_bridgeObjectRelease();
            if ((*v42)(v3, 1, v4) == 1)
            {
              sub_10001DAB4((uint64_t)v3, (uint64_t *)&unk_1016477E0);
            }
            else
            {
              uint64_t v25 = v21;
              uint64_t v26 = *v44;
              uint64_t v27 = v39;
              (*v44)(v39, v3, v4);
              uint64_t v28 = v4;
              v26(v7, v27, v4);
              unint64_t v29 = (unint64_t)v45;
              if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
                unint64_t v29 = sub_100A723C0(0, *(void *)(v29 + 16) + 1, 1, v29);
              }
              unint64_t v31 = *(void *)(v29 + 16);
              unint64_t v30 = *(void *)(v29 + 24);
              if (v31 >= v30 >> 1) {
                uint64_t v45 = (void *)sub_100A723C0(v30 > 1, v31 + 1, 1, v29);
              }
              else {
                uint64_t v45 = (void *)v29;
              }
              uint64_t v4 = v28;
              uint64_t v21 = v25;
              id v32 = v45;
              v45[2] = v31 + 1;
              unint64_t v33 = (unint64_t)v32
                  + ((*(unsigned __int8 *)(v40 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v40 + 80))
                  + *(void *)(v40 + 72) * v31;
              int64_t v7 = v38;
              v26((char *)v33, v38, v4);
            }
            v22 += 2;
            --v20;
          }
          while (v20);
          swift_bridgeObjectRelease();
          uint64_t v36 = v45;
        }
        else
        {
          uint64_t v36 = _swiftEmptyArrayStorage;
        }
        swift_bridgeObjectRelease();
        uint64_t v35 = sub_10115A3A4((uint64_t)v36);
        swift_bridgeObjectRelease();
        return (void *)v35;
      }
    }
    else
    {
      sub_10001DAB4((uint64_t)v48, (uint64_t *)&unk_101644360);
    }
    return &_swiftEmptySetSingleton;
  }
  __break(1u);
  return result;
}

void sub_100EFE064(uint64_t a1)
{
  uint64_t v3 = type metadata accessor for DispatchPredicate();
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  uint64_t v6 = &v12[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)];
  int64_t v7 = *(void **)(v1 + 24);
  *uint64_t v6 = v7;
  (*(void (**)(void *, void, uint64_t))(v4 + 104))(v6, enum case for DispatchPredicate.onQueue(_:), v3);
  id v8 = v7;
  LOBYTE(v7) = _dispatchPreconditionTest(_:)();
  (*(void (**)(void *, uint64_t))(v4 + 8))(v6, v3);
  if (v7)
  {
    id v9 = [self standardUserDefaults];
    sub_100EFD3D4(a1);
    swift_bridgeObjectRelease();
    Class isa = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    NSString v11 = String._bridgeToObjectiveC()();
    [v9 setObject:isa forKey:v11];
  }
  else
  {
    __break(1u);
  }
}

uint64_t sub_100EFE214(uint64_t a1)
{
  v9[0] = a1;
  uint64_t v2 = type metadata accessor for OS_dispatch_queue.Attributes();
  __chkstk_darwin(v2);
  uint64_t v3 = type metadata accessor for DispatchQoS();
  __chkstk_darwin(v3 - 8);
  uint64_t v4 = type metadata accessor for OS_dispatch_queue.AutoreleaseFrequency();
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  int64_t v7 = (char *)v9 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10000584C();
  (*(void (**)(char *, void, uint64_t))(v5 + 104))(v7, enum case for OS_dispatch_queue.AutoreleaseFrequency.workItem(_:), v4);
  static DispatchQoS.unspecified.getter();
  v9[1] = _swiftEmptyArrayStorage;
  sub_100F09184((unint64_t *)&qword_101638CC0, (void (*)(uint64_t))&type metadata accessor for OS_dispatch_queue.Attributes);
  sub_10000588C((uint64_t *)&unk_1016376F0);
  sub_100062734((unint64_t *)&qword_101638CD0, (uint64_t *)&unk_1016376F0);
  dispatch thunk of SetAlgebra.init<A>(_:)();
  *(void *)(v1 + 24) = OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)();
  *(void *)(v1 + 32) = &_swiftEmptySetSingleton;
  *(_OWORD *)(v1 + 40) = 0u;
  *(_OWORD *)(v1 + 56) = 0u;
  *(void *)(v1 + 72) = _swiftEmptyArrayStorage;
  *(_OWORD *)(v1 + 80) = xmmword_101347BB0;
  *(unsigned char *)(v1 + 96) = 0;
  *(void *)(v1 + 104) = 0;
  sub_10000588C(&qword_101663148);
  swift_allocObject();
  *(void *)(v1 + 112) = PassthroughSubject.init()();
  *(unsigned char *)(v1 + 120) = 0;
  *(void *)(v1 + 16) = v9[0];
  return v1;
}

uint64_t sub_100EFE4CC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, NSObject *a4@<X3>, int a5@<W4>, uint64_t *a6@<X8>)
{
  unint64_t v41 = a6;
  LODWORD(v36) = a5;
  os_log_t v37 = a4;
  uint64_t v38 = a3;
  uint64_t v35 = (uint8_t *)a2;
  uint64_t v7 = type metadata accessor for DispatchPredicate();
  uint64_t v8 = *(void *)(v7 - 8);
  __chkstk_darwin(v7);
  uint64_t v10 = (id *)((char *)&v34 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v40 = sub_10000588C(&qword_101663148);
  swift_allocObject();
  uint64_t v11 = PassthroughSubject.init()();
  *(void *)(a1 + 112) = v11;
  uint64_t v39 = v11;
  swift_retain();
  swift_release();
  uint64_t v12 = *(void **)(a1 + 24);
  *uint64_t v10 = v12;
  uint64_t v13 = enum case for DispatchPredicate.onQueue(_:);
  id v14 = *(void (**)(void *, uint64_t, uint64_t))(v8 + 104);
  v14(v10, enum case for DispatchPredicate.onQueue(_:), v7);
  id v34 = v12;
  LOBYTE(v12) = _dispatchPreconditionTest(_:)();
  uint64_t v15 = *(void (**)(void *, uint64_t))(v8 + 8);
  v15(v10, v7);
  if ((v12 & 1) == 0)
  {
    __break(1u);
LABEL_23:
    swift_once();
LABEL_4:
    uint64_t v16 = type metadata accessor for Logger();
    sub_100010324(v16, (uint64_t)qword_10170EE70);
    swift_retain_n();
    NSString v17 = Logger.logObject.getter();
    LODWORD(v38) = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v17, (os_log_type_t)v38))
    {
      os_log_t v37 = v17;
      id v18 = (uint8_t *)swift_slowAlloc();
      uint64_t v36 = swift_slowAlloc();
      uint64_t v43 = v36;
      uint64_t v35 = v18;
      *(_DWORD *)id v18 = 136446210;
      uint64_t v19 = v34;
      *uint64_t v10 = v34;
      v14(v10, v13, v7);
      id v20 = v19;
      char v21 = _dispatchPreconditionTest(_:)();
      v15(v10, v7);
      if ((v21 & 1) == 0)
      {
        __break(1u);
        JUMPOUT(0x100EFEA04);
      }
      unint64_t v22 = 0xE800000000000000;
      uint64_t v23 = 0x6E776F6E6B6E752ELL;
      switch(*(unsigned char *)(a1 + 120))
      {
        case 1:
          unint64_t v22 = 0xEE0079654B797261;
          uint64_t v23 = 0x6D6972507465672ELL;
          break;
        case 2:
          uint64_t v23 = 0xD000000000000016;
          unint64_t v29 = ".verifyFindMyNetworkId";
          goto LABEL_19;
        case 3:
          uint64_t v23 = 0xD000000000000018;
          unint64_t v29 = ".verifyFindMyNetworkIdV2";
          goto LABEL_19;
        case 4:
          unint64_t v22 = 0x800000010141A6D0;
          uint64_t v23 = 0xD000000000000014;
          break;
        case 5:
          uint64_t v23 = 0xD000000000000027;
          unint64_t v29 = ".verifyFindMyNetworkIdWithoutPrimaryKey";
          goto LABEL_19;
        case 6:
          uint64_t v23 = 0xD000000000000029;
          unint64_t v29 = ".verifyFindMyNetworkIdV2WithoutPrimaryKey";
LABEL_19:
          unint64_t v22 = (unint64_t)(v29 - 32) | 0x8000000000000000;
          break;
        default:
          break;
      }
      unint64_t v30 = v35;
      uint64_t v42 = sub_1008FA0F0(v23, v22, &v43);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_release_n();
      swift_bridgeObjectRelease();
      os_log_t v31 = v37;
      _os_log_impl((void *)&_mh_execute_header, v37, (os_log_type_t)v38, "Existing privacy alert session in progress! %{public}s", v30, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {

      swift_release_n();
    }
    goto LABEL_21;
  }
  if (*(unsigned char *)(a1 + 120))
  {
    if (qword_101637190 == -1) {
      goto LABEL_4;
    }
    goto LABEL_23;
  }
  if (qword_101637190 != -1) {
    swift_once();
  }
  uint64_t v24 = type metadata accessor for Logger();
  sub_100010324(v24, (uint64_t)qword_10170EE70);
  uint64_t v25 = Logger.logObject.getter();
  os_log_type_t v26 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v25, v26))
  {
    uint64_t v27 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v27 = 0;
    _os_log_impl((void *)&_mh_execute_header, v25, v26, "Handling Privacy Alert", v27, 2u);
    swift_slowDealloc();
  }

  uint64_t v28 = v38;
  sub_100EFF8F0((uint64_t)v35, v38, (uint64_t)v37, v36 & 1);
  sub_100F0856C(v28);
LABEL_21:
  uint64_t v43 = v39;
  sub_100062734(&qword_101663150, &qword_101663148);
  uint64_t v32 = Publisher.eraseToAnyPublisher()();
  uint64_t result = swift_release();
  uint64_t *v41 = v32;
  return result;
}

uint64_t sub_100EFEA20@<X0>(uint64_t a1@<X0>, BOOL *a2@<X8>)
{
  uint64_t v4 = type metadata accessor for DispatchPredicate();
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v7 = (uint64_t *)((char *)&v11 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v8 = *(void **)(a1 + 24);
  *uint64_t v7 = v8;
  (*(void (**)(void *, void, uint64_t))(v5 + 104))(v7, enum case for DispatchPredicate.onQueue(_:), v4);
  id v9 = v8;
  LOBYTE(v8) = _dispatchPreconditionTest(_:)();
  uint64_t result = (*(uint64_t (**)(void *, uint64_t))(v5 + 8))(v7, v4);
  if (v8) {
    *a2 = *(unsigned char *)(a1 + 120) != 0;
  }
  else {
    __break(1u);
  }
  return result;
}

void sub_100EFEB50(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  uint64_t v4 = sub_100EFDB1C();
  sub_101127C6C(a1, a2);
  sub_100EFE064((uint64_t)v4);
}

uint64_t sub_100EFEBB8(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v21 = a1;
  uint64_t v3 = type metadata accessor for DispatchPredicate();
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  uint64_t v6 = (uint64_t *)((char *)&v19 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v7 = *(void **)(v1 + 24);
  *uint64_t v6 = v7;
  uint64_t v8 = enum case for DispatchPredicate.onQueue(_:);
  id v9 = *(void (**)(void *, uint64_t, uint64_t))(v4 + 104);
  v9(v6, enum case for DispatchPredicate.onQueue(_:), v3);
  id v10 = v7;
  LOBYTE(v7) = _dispatchPreconditionTest(_:)();
  uint64_t v11 = *(void (**)(void *, uint64_t))(v4 + 8);
  v11(v6, v3);
  if (v7)
  {
    id v20 = v10;
    if (qword_101637190 == -1) {
      goto LABEL_3;
    }
  }
  else
  {
    __break(1u);
  }
  swift_once();
LABEL_3:
  uint64_t v12 = type metadata accessor for Logger();
  sub_100010324(v12, (uint64_t)qword_10170EE70);
  uint64_t v13 = Logger.logObject.getter();
  os_log_type_t v14 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v13, v14))
  {
    uint64_t v15 = (uint8_t *)swift_slowAlloc();
    uint64_t v19 = v4 + 104;
    *(_WORD *)uint64_t v15 = 0;
    _os_log_impl((void *)&_mh_execute_header, v13, v14, "Cleaning up...", v15, 2u);
    swift_slowDealloc();
  }

  OSAllocatedUnfairLock.callAsFunction<A>(_:)();
  uint64_t v22 = 12;
  long long v23 = 0u;
  long long v24 = 0u;
  char v25 = 11;
  sub_100A6D128((uint64_t)&v22);
  sub_100061288((uint64_t)&v22);
  *(void *)(v2 + 48) = 0;
  swift_release();
  *(void *)(v2 + 40) = 0;
  swift_release();
  LOBYTE(v22) = 1;
  swift_retain();
  PassthroughSubject.send(completion:)();
  swift_release();
  uint64_t v16 = v20;
  *uint64_t v6 = v20;
  v9(v6, v8, v3);
  id v17 = v16;
  LOBYTE(v16) = _dispatchPreconditionTest(_:)();
  uint64_t result = ((uint64_t (*)(void *, uint64_t))v11)(v6, v3);
  if (v16) {
    *(unsigned char *)(v2 + 120) = 0;
  }
  else {
    __break(1u);
  }
  return result;
}

uint64_t sub_100EFEEA8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v61 = a3;
  uint64_t v59 = a1;
  uint64_t v60 = a2;
  uint64_t v3 = sub_10000588C(&qword_10163C6C8);
  __chkstk_darwin(v3 - 8);
  long long v55 = (char *)&v43 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = sub_10000588C(&qword_101658128);
  uint64_t v56 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  long long v54 = (char *)&v43 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = sub_10000588C(&qword_101663158);
  uint64_t v57 = *(void *)(v7 - 8);
  __chkstk_darwin(v7);
  id v9 = (char *)&v43 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = sub_10000588C(&qword_101663160);
  uint64_t v58 = *(void *)(v10 - 8);
  __chkstk_darwin(v10);
  uint64_t v12 = (char *)&v43 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = sub_10000588C(&qword_101663168);
  uint64_t v14 = *(void *)(v13 - 8);
  __chkstk_darwin(v13);
  uint64_t v16 = (char *)&v43 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100F09120();
  uint64_t v17 = v62;
  BinaryDecodable.init(data:)();
  if (v17) {
    return swift_errorRelease();
  }
  unint64_t v47 = v9;
  uint64_t v48 = v5;
  uint64_t v46 = v7;
  id v49 = v12;
  uint64_t v50 = v10;
  uint64_t v51 = 0;
  long long v52 = v16;
  uint64_t v53 = v14;
  uint64_t v62 = v13;
  memset(v63, 0, sizeof(v63));
  char v64 = 2;
  char v65 = 0;
  uint64_t v19 = v60;
  uint64_t v20 = sub_100F00AE8((uint64_t)v63, v61);
  sub_10001DAB4((uint64_t)v63, &qword_1016630F0);
  *(void *)&v63[0] = v20;
  id v66 = *(id *)(v19 + 24);
  id v21 = v66;
  uint64_t v22 = type metadata accessor for OS_dispatch_queue.SchedulerOptions();
  uint64_t v23 = *(void *)(v22 - 8);
  uint64_t v24 = (uint64_t)v55;
  uint64_t v44 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v23 + 56);
  uint64_t v43 = v23 + 56;
  v44(v55, 1, 1, v22);
  id v25 = v21;
  sub_10000588C(&qword_101657AE8);
  unint64_t v26 = sub_10000584C();
  sub_100062734((unint64_t *)&unk_101657AF0, &qword_101657AE8);
  sub_100F09184((unint64_t *)&qword_10166C020, (void (*)(uint64_t))sub_10000584C);
  uint64_t v27 = v54;
  unint64_t v45 = v26;
  Publisher.receive<A>(on:options:)();
  sub_10001DAB4(v24, &qword_10163C6C8);

  swift_release();
  uint64_t v28 = v24;
  if (qword_101637198 != -1) {
    swift_once();
  }
  uint64_t v29 = type metadata accessor for OS_dispatch_queue.SchedulerTimeType.Stride();
  sub_100010324(v29, (uint64_t)qword_101662E20);
  *(void *)&v63[0] = v25;
  v44((char *)v24, 1, 1, v22);
  sub_100062734(&qword_101658158, &qword_101658128);
  id v30 = v25;
  os_log_t v31 = v47;
  uint64_t v32 = v48;
  Publisher.timeout<A>(_:scheduler:options:customError:)();
  sub_10001DAB4(v28, &qword_10163C6C8);

  (*(void (**)(char *, uint64_t))(v56 + 8))(v27, v32);
  sub_10000588C(&qword_10163C5F8);
  sub_100062734(&qword_101663178, &qword_101663158);
  unint64_t v33 = v49;
  uint64_t v34 = v46;
  Publisher.map<A>(_:)();
  (*(void (**)(char *, uint64_t))(v57 + 8))(v31, v34);
  sub_10000588C(&qword_10164AC38);
  sub_100062734(&qword_101663180, &qword_101663160);
  sub_100062734(&qword_10164AC48, &qword_10164AC38);
  uint64_t v35 = v52;
  uint64_t v36 = v50;
  Publisher.catch<A>(_:)();
  (*(void (**)(char *, uint64_t))(v58 + 8))(v33, v36);
  uint64_t v37 = swift_allocObject();
  uint64_t v38 = v60;
  swift_weakInit();
  uint64_t v39 = (void *)swift_allocObject();
  v39[2] = v37;
  uint64_t v40 = v61;
  v39[3] = v59;
  v39[4] = v40;
  sub_100062734(&qword_101663188, &qword_101663168);
  swift_retain();
  swift_retain();
  uint64_t v41 = v62;
  uint64_t v42 = Publisher<>.sink(receiveValue:)();
  swift_release();
  (*(void (**)(char *, uint64_t))(v53 + 8))(v35, v41);
  *(void *)(v38 + 48) = v42;
  return swift_release();
}

uint64_t sub_100EFF67C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  swift_beginAccess();
  uint64_t result = swift_weakLoadStrong();
  if (result)
  {
    Transaction.capture()();
    if (qword_101637190 != -1) {
      swift_once();
    }
    uint64_t v7 = type metadata accessor for Logger();
    sub_100010324(v7, (uint64_t)qword_10170EE70);
    sub_10001D074(a1, (uint64_t)v15, &qword_10163C5F8);
    uint64_t v8 = Logger.logObject.getter();
    os_log_type_t v9 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v8, v9))
    {
      uint64_t v10 = (uint8_t *)swift_slowAlloc();
      uint64_t v14 = swift_slowAlloc();
      *(_DWORD *)uint64_t v10 = 136315138;
      sub_10001D074((uint64_t)v15, (uint64_t)v13, &qword_10163C5F8);
      sub_10000588C(&qword_10163C5F8);
      uint64_t v11 = String.init<A>(describing:)();
      v13[0] = sub_1008FA0F0(v11, v12, &v14);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      sub_10001DAB4((uint64_t)v15, &qword_10163C5F8);
      _os_log_impl((void *)&_mh_execute_header, v8, v9, "primaryKey result: %s", v10, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      sub_10001DAB4((uint64_t)v15, &qword_10163C5F8);
    }

    sub_10001D074(a1, (uint64_t)v15, &qword_10163C5F8);
    if (v15[41])
    {
      sub_10001DAB4((uint64_t)v15, &qword_10163C5F8);
      sub_100EFEBB8(a4);
      return swift_release();
    }
    else
    {
      swift_release();
      return sub_10001DAB4((uint64_t)v15, &qword_10163C5F8);
    }
  }
  return result;
}

uint64_t sub_100EFF8F0(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  uint64_t v9 = *v4;
  uint64_t v10 = type metadata accessor for DispatchPredicate();
  uint64_t v11 = *(void *)(v10 - 8);
  __chkstk_darwin(v10);
  uint64_t v13 = &v18[-((v12 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v14 = (void *)v4[3];
  *uint64_t v13 = v14;
  (*(void (**)(void *, void, uint64_t))(v11 + 104))(v13, enum case for DispatchPredicate.onQueue(_:), v10);
  id v15 = v14;
  LOBYTE(v14) = _dispatchPreconditionTest(_:)();
  uint64_t result = (*(uint64_t (**)(void *, uint64_t))(v11 + 8))(v13, v10);
  if (v14)
  {
    uint64_t v17 = type metadata accessor for Transaction();
    __chkstk_darwin(v17);
    *(void *)&v18[-48] = v4;
    *(void *)&v18[-40] = a2;
    *(void *)&v18[-32] = a3;
    *(void *)&v18[-24] = a1;
    v18[-16] = a4 & 1;
    *(void *)&v18[-8] = v9;
    return static Transaction.named<A>(_:with:)();
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_100EFFAC8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5, int a6)
{
  uint64_t v109 = a2;
  int v96 = a6;
  uint64_t v97 = a5;
  uint64_t v91 = a4;
  uint64_t v105 = a1;
  uint64_t v7 = type metadata accessor for BluetoothManagerDevice();
  uint64_t v88 = *(void *)(v7 - 8);
  __chkstk_darwin(v7 - 8);
  uint64_t v89 = v8;
  uint64_t v92 = (uint64_t)&v70 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = sub_10000588C(&qword_10163C6C8);
  __chkstk_darwin(v9 - 8);
  uint64_t v107 = (char *)&v70 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v87 = sub_10000588C(&qword_10163C738);
  uint64_t v86 = *(void *)(v87 - 8);
  __chkstk_darwin(v87);
  unint64_t v84 = (char *)&v70 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = sub_10000588C(&qword_10163C740);
  uint64_t v93 = *(void *)(v12 - 8);
  uint64_t v94 = v12;
  __chkstk_darwin(v12);
  uint64_t v90 = (char *)&v70 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = sub_10000588C(&qword_1016630F8);
  uint64_t v99 = *(void *)(v14 - 8);
  uint64_t v100 = v14;
  __chkstk_darwin(v14);
  uint64_t v98 = (char *)&v70 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = sub_10000588C(&qword_101663100);
  uint64_t v101 = *(void *)(v16 - 8);
  uint64_t v102 = v16;
  __chkstk_darwin(v16);
  uint64_t v95 = (char *)&v70 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v18 = sub_10000588C(&qword_101663108);
  uint64_t v103 = *(void *)(v18 - 8);
  __chkstk_darwin(v18);
  uint64_t v20 = (char *)&v70 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v21 = sub_10000588C(&qword_101663110);
  uint64_t v104 = *(void *)(v21 - 8);
  __chkstk_darwin(v21);
  uint64_t v23 = (char *)&v70 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v24 = sub_10000588C(&qword_101663118);
  uint64_t v25 = *(void *)(v24 - 8);
  __chkstk_darwin(v24);
  uint64_t v27 = (char *)&v70 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v28 = sub_10000588C((uint64_t *)&unk_101649D00);
  uint64_t v106 = a3;
  uint64_t v85 = (char *)&type metadata for () + 8;
  unint64_t v83 = v28;
  uint64_t v29 = v108;
  OSAllocatedUnfairLock.callAsFunction<A>(_:)();
  if (v29)
  {
    swift_errorRelease();
    uint64_t v30 = 0;
    uint64_t v31 = v109;
  }
  else
  {
    uint64_t v76 = v20;
    uint64_t v77 = v18;
    uint64_t v78 = v23;
    uint64_t v79 = v21;
    uint64_t v80 = 0;
    uint64_t v81 = v27;
    uint64_t v82 = v25;
    uint64_t v108 = v24;
    uint64_t v31 = v109;
    id v110 = *(id *)(v109 + 24);
    id v32 = v110;
    uint64_t v33 = type metadata accessor for OS_dispatch_queue.SchedulerOptions();
    uint64_t v34 = *(void *)(v33 - 8);
    uint64_t v35 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v34 + 56);
    uint64_t v36 = (uint64_t)v107;
    uint64_t v75 = v33;
    uint64_t v74 = v35;
    uint64_t v73 = v34 + 56;
    ((void (*)(char *, uint64_t, uint64_t))v35)(v107, 1, 1);
    unint64_t v37 = sub_10000584C();
    sub_100062734(&qword_101649D10, (uint64_t *)&unk_101649D00);
    uint64_t v38 = sub_100F09184((unint64_t *)&qword_10166C020, (void (*)(uint64_t))sub_10000584C);
    id v71 = v32;
    uint64_t v39 = v84;
    unint64_t v83 = v37;
    uint64_t v72 = v38;
    Publisher.receive<A>(on:options:)();
    sub_10001DAB4(v36, &qword_10163C6C8);

    swift_release();
    swift_retain();
    static Subscribers.Demand.unlimited.getter();
    sub_10000588C(&qword_101639B58);
    sub_10000588C(&qword_10163C628);
    sub_100062734(&qword_10163C778, &qword_10163C738);
    uint64_t v70 = &protocol conformance descriptor for Future<A, B>;
    sub_100062734(&qword_10163C780, &qword_10163C628);
    uint64_t v40 = v90;
    uint64_t v41 = v87;
    uint64_t v42 = v106;
    Publisher.flatMap<A, B>(maxPublishers:_:)();
    swift_release();
    (*(void (**)(char *, uint64_t))(v86 + 8))(v39, v41);
    uint64_t v43 = v92;
    sub_100F08BD4(v91, v92, (uint64_t (*)(void))type metadata accessor for BluetoothManagerDevice);
    unint64_t v44 = (*(unsigned __int8 *)(v88 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v88 + 80);
    unint64_t v45 = (v89 + v44 + 7) & 0xFFFFFFFFFFFFFFF8;
    uint64_t v46 = swift_allocObject();
    *(void *)(v46 + 16) = v31;
    sub_100F08F68(v43, v46 + v44, (uint64_t (*)(void))type metadata accessor for BluetoothManagerDevice);
    unint64_t v47 = v46 + v45;
    uint64_t v48 = v97;
    *(void *)unint64_t v47 = v97;
    *(unsigned char *)(v47 + 8) = v96 & 1;
    swift_retain();
    id v49 = v48;
    sub_10000588C(&qword_1016630F0);
    sub_100062734(&qword_10163C788, &qword_10163C740);
    uint64_t v50 = v98;
    uint64_t v51 = v94;
    Publisher.map<A>(_:)();
    swift_release();
    (*(void (**)(char *, uint64_t))(v93 + 8))(v40, v51);
    uint64_t v52 = swift_allocObject();
    *(void *)(v52 + 16) = v31;
    *(void *)(v52 + 24) = v42;
    swift_retain();
    swift_retain();
    static Subscribers.Demand.unlimited.getter();
    sub_10000588C(&qword_101657AE8);
    sub_100062734(&qword_101663120, &qword_1016630F8);
    sub_100062734((unint64_t *)&unk_101657AF0, &qword_101657AE8);
    uint64_t v53 = v95;
    uint64_t v54 = v100;
    Publisher.flatMap<A, B>(maxPublishers:_:)();
    swift_release();
    (*(void (**)(char *, uint64_t))(v99 + 8))(v50, v54);
    uint64_t v55 = (uint64_t)v107;
    if (qword_101637198 != -1) {
      swift_once();
    }
    uint64_t v56 = type metadata accessor for OS_dispatch_queue.SchedulerTimeType.Stride();
    sub_100010324(v56, (uint64_t)qword_101662E20);
    uint64_t v57 = v71;
    id v111 = v71;
    v74(v55, 1, 1, v75);
    sub_100062734(&qword_101663128, &qword_101663100);
    id v58 = v57;
    uint64_t v59 = v76;
    uint64_t v60 = v102;
    Publisher.timeout<A>(_:scheduler:options:customError:)();
    sub_10001DAB4(v55, &qword_10163C6C8);

    (*(void (**)(char *, uint64_t))(v101 + 8))(v53, v60);
    sub_10000588C(&qword_10163C5F8);
    sub_100062734(&qword_101663130, &qword_101663108);
    uint64_t v61 = v78;
    uint64_t v62 = v77;
    Publisher.map<A>(_:)();
    (*(void (**)(char *, uint64_t))(v103 + 8))(v59, v62);
    sub_10000588C(&qword_10164AC38);
    sub_100062734(&qword_101663138, &qword_101663110);
    sub_100062734(&qword_10164AC48, &qword_10164AC38);
    unint64_t v63 = v81;
    uint64_t v64 = v79;
    Publisher.catch<A>(_:)();
    (*(void (**)(char *, uint64_t))(v104 + 8))(v61, v64);
    uint64_t v65 = swift_allocObject();
    swift_weakInit();
    id v66 = (void *)swift_allocObject();
    v66[2] = v65;
    uint64_t v67 = v106;
    v66[3] = v105;
    v66[4] = v67;
    sub_100062734(&qword_101663140, &qword_101663118);
    swift_retain();
    swift_retain();
    uint64_t v68 = v108;
    uint64_t v30 = Publisher<>.sink(receiveValue:)();
    swift_release();
    (*(void (**)(char *, uint64_t))(v82 + 8))(v63, v68);
  }
  *(void *)(v31 + 40) = v30;
  return swift_release();
}

uint64_t sub_100F00820(uint64_t a1)
{
  sub_1000610B8(a1, (uint64_t)v2);
  v2[41] = 1;
  sub_10000588C(&qword_10163C5F8);
  return Just.init(_:)();
}

uint64_t sub_100F00874(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  swift_beginAccess();
  uint64_t result = swift_weakLoadStrong();
  if (result)
  {
    Transaction.capture()();
    sub_10001D074(a1, (uint64_t)v21, &qword_10163C5F8);
    if (v21[41])
    {
      sub_10006105C((uint64_t)v21, (uint64_t)v20);
      sub_1000610B8((uint64_t)v20, (uint64_t)&v16);
      if (v19 == 11
        && v16 == 10
        && (int8x16_t v7 = vorrq_s8(v17, v18),
            !*(void *)&vorr_s8(*(int8x8_t *)v7.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v7, v7, 8uLL))))
      {
        sub_100061288((uint64_t)&v16);
        if (qword_101637190 != -1) {
          swift_once();
        }
        uint64_t v8 = type metadata accessor for Logger();
        sub_100010324(v8, (uint64_t)qword_10170EE70);
        uint64_t v9 = Logger.logObject.getter();
        os_log_type_t v10 = static os_log_type_t.error.getter();
        if (os_log_type_enabled(v9, v10))
        {
          uint64_t v11 = (uint8_t *)swift_slowAlloc();
          *(_WORD *)uint64_t v11 = 0;
          _os_log_impl((void *)&_mh_execute_header, v9, v10, "handleNotify timed out!", v11, 2u);
          swift_slowDealloc();
        }
      }
      else
      {
        sub_100061288((uint64_t)&v16);
      }
      sub_100EFEBB8(a4);
      swift_release();
      return sub_100061288((uint64_t)v20);
    }
    else
    {
      if (qword_101637190 != -1) {
        swift_once();
      }
      uint64_t v12 = type metadata accessor for Logger();
      sub_100010324(v12, (uint64_t)qword_10170EE70);
      uint64_t v13 = Logger.logObject.getter();
      os_log_type_t v14 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v13, v14))
      {
        uint64_t v15 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)uint64_t v15 = 0;
        _os_log_impl((void *)&_mh_execute_header, v13, v14, "handleNotify success!", v15, 2u);
        swift_slowDealloc();
      }

      return swift_release();
    }
  }
  return result;
}

uint64_t sub_100F00AE8(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2;
  uint64_t v6 = type metadata accessor for DispatchPredicate();
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  uint64_t v9 = (void *)((char *)&v22[-1] - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0));
  os_log_type_t v10 = *(void **)(v3 + 24);
  *uint64_t v9 = v10;
  (*(void (**)(void *, void, uint64_t))(v7 + 104))(v9, enum case for DispatchPredicate.onQueue(_:), v6);
  id v11 = v10;
  LOBYTE(v10) = _dispatchPreconditionTest(_:)();
  (*(void (**)(void *, uint64_t))(v7 + 8))(v9, v6);
  if ((v10 & 1) == 0)
  {
    __break(1u);
LABEL_11:
    swift_once();
    goto LABEL_5;
  }
  sub_10001D074(a1, (uint64_t)v24, &qword_1016630F0);
  if (v25)
  {
    sub_10006105C((uint64_t)v24, (uint64_t)v23);
    sub_1000610B8((uint64_t)v23, (uint64_t)v22);
    uint64_t v12 = swift_allocObject();
    sub_10006105C((uint64_t)v22, v12 + 16);
    sub_10000588C(&qword_101657AE8);
    swift_allocObject();
    uint64_t v13 = Future.init(_:)();
    sub_100061288((uint64_t)v23);
    return v13;
  }
  sub_1005FCF90(v24, (uint64_t)v23);
  if (qword_101637190 != -1) {
    goto LABEL_11;
  }
LABEL_5:
  uint64_t v14 = type metadata accessor for Logger();
  sub_100010324(v14, (uint64_t)qword_10170EE70);
  sub_100F08D80((uint64_t)v23, (void (*)(void, void, void, void, void))sub_1005FCBAC);
  sub_100F08D80((uint64_t)v23, (void (*)(void, void, void, void, void))sub_1005FCBAC);
  uint64_t v15 = Logger.logObject.getter();
  os_log_type_t v16 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v15, v16))
  {
    int8x16_t v17 = (uint8_t *)swift_slowAlloc();
    uint64_t v21 = swift_slowAlloc();
    *(_DWORD *)int8x16_t v17 = 136446210;
    sub_1005FCF90(v23, (uint64_t)v22);
    sub_100F08D80((uint64_t)v23, (void (*)(void, void, void, void, void))sub_1005FCBAC);
    uint64_t v18 = String.init<A>(describing:)();
    v22[0] = sub_1008FA0F0(v18, v19, &v21);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    sub_100F08D80((uint64_t)v23, (void (*)(void, void, void, void, void))sub_1005FCC80);
    sub_100F08D80((uint64_t)v23, (void (*)(void, void, void, void, void))sub_1005FCC80);
    _os_log_impl((void *)&_mh_execute_header, v15, v16, "Sending: %{public}s", v17, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    sub_100F08D80((uint64_t)v23, (void (*)(void, void, void, void, void))sub_1005FCC80);
    sub_100F08D80((uint64_t)v23, (void (*)(void, void, void, void, void))sub_1005FCC80);
  }

  uint64_t v13 = sub_100F06F30(v23, a2);
  sub_100F08D80((uint64_t)v23, (void (*)(void, void, void, void, void))sub_1005FCC80);
  return v13;
}

uint64_t sub_100F00EE4(void (*a1)(void *), uint64_t a2, uint64_t a3)
{
  sub_100061234();
  uint64_t v5 = swift_allocError();
  sub_1000610B8(a3, v6);
  v8[0] = v5;
  __int16 v9 = 256;
  a1(v8);
  return sub_10001DAB4((uint64_t)v8, &qword_10163C5F8);
}

void sub_100F00F6C(unint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, int a4@<W3>, uint64_t *a5@<X8>)
{
  unint64_t v6 = v5;
  int v413 = a4;
  uint64_t v410 = a3;
  uint64_t v411 = a2;
  v426 = a5;
  uint64_t v8 = type metadata accessor for String.Encoding();
  __chkstk_darwin(v8 - 8);
  uint64_t v412 = type metadata accessor for PrivacyAlertSupport.AlertInfo();
  __chkstk_darwin(v412);
  v414 = (uint64_t *)((char *)&v393 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v10 = sub_10000588C((uint64_t *)&unk_101653D50);
  __chkstk_darwin(v10 - 8);
  uint64_t v404 = (uint64_t)&v393 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v406 = type metadata accessor for SharedBeaconRecord(0);
  uint64_t v405 = *(void *)(v406 - 8);
  uint64_t v12 = __chkstk_darwin(v406);
  uint64_t v400 = (uint64_t)&v393 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = __chkstk_darwin(v12);
  uint64_t v401 = (uint64_t)&v393 - v15;
  uint64_t v16 = __chkstk_darwin(v14);
  uint64_t v402 = (uint64_t)&v393 - v17;
  __chkstk_darwin(v16);
  uint64_t v407 = (uint64_t)&v393 - v18;
  uint64_t v19 = sub_10000588C(&qword_101657910);
  __chkstk_darwin(v19 - 8);
  uint64_t v21 = (char *)&v393 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v22 = type metadata accessor for BeaconKeyManager.IndexInformation(0);
  uint64_t v408 = *(void *)(v22 - 8);
  uint64_t v23 = __chkstk_darwin(v22);
  uint64_t v403 = (uint64_t)&v393 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v25 = __chkstk_darwin(v23);
  uint64_t v27 = (char *)&v393 - v26;
  __chkstk_darwin(v25);
  uint64_t v409 = (uint64_t)&v393 - v28;
  uint64_t v29 = type metadata accessor for DispatchPredicate();
  uint64_t v30 = *(void *)(v29 - 8);
  __chkstk_darwin(v29);
  unint64_t v32 = (unint64_t)&v393 - ((v31 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v33 = *(void **)(v5 + 24);
  *(void *)unint64_t v32 = v33;
  uint64_t v34 = *(void (**)(void))(v30 + 104);
  unsigned int v420 = enum case for DispatchPredicate.onQueue(_:);
  v421 = (void (*)(void *, void, unint64_t))v34;
  uint64_t v422 = v30 + 104;
  v34(v32);
  id v416 = v33;
  uint64_t v35 = _dispatchPreconditionTest(_:)();
  unint64_t v37 = *(void (**)(void *, unint64_t))(v30 + 8);
  uint64_t v36 = v30 + 8;
  v424 = (void *)v32;
  v425 = (uint8_t *)v29;
  uint64_t v419 = v36;
  v423 = v37;
  v37((void *)v32, v29);
  if (v35)
  {
    sub_10005F6AC(a1, (uint64_t)&v431);
    sub_10000588C(&qword_101639B58);
    if (!swift_dynamicCast())
    {
      if (qword_101637190 != -1) {
        swift_once();
      }
      uint64_t v54 = type metadata accessor for Logger();
      sub_100010324(v54, (uint64_t)qword_10170EE70);
      sub_10005F6AC(a1, (uint64_t)&v431);
      uint64_t v55 = Logger.logObject.getter();
      os_log_type_t v56 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v55, v56))
      {
        uint64_t v57 = (uint8_t *)swift_slowAlloc();
        uint64_t v430 = swift_slowAlloc();
        *(_DWORD *)uint64_t v57 = 136315138;
        sub_10005F6AC((uint64_t)&v431, (uint64_t)v427);
        uint64_t v58 = String.init<A>(describing:)();
        v427[0] = sub_1008FA0F0(v58, v59, &v430);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)&v431);
        _os_log_impl((void *)&_mh_execute_header, v55, v56, "Invalid command from payload %s", v57, 0xCu);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
      }
      else
      {
        _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)&v431);
      }

      uint64_t v29 = (uint64_t)v426;
      uint64_t v60 = 13;
      goto LABEL_14;
    }
    uint64_t v38 = v427[0];
    unint64_t v418 = v427[1];
    uint64_t v417 = v427[2];
    LODWORD(v39) = v429;
    unint64_t v415 = v428;
    switch((v428 >> 60) & 3 | (4 * v429))
    {
      case 0uLL:
        unint64_t v399 = v5;
        unint64_t v40 = v418;
        sub_1000361E0(v427[0], v418);
        sub_1000361E0(v38, v40);
        if (qword_101637190 != -1) {
          swift_once();
        }
        uint64_t v41 = type metadata accessor for Logger();
        uint64_t v42 = sub_100010324(v41, (uint64_t)qword_10170EE70);
        sub_1000361E0(v38, v40);
        sub_1000361E0(v38, v40);
        uint64_t v43 = Logger.logObject.getter();
        os_log_type_t v44 = static os_log_type_t.default.getter();
        uint64_t v45 = v38;
        int v46 = v44;
        BOOL v47 = os_log_type_enabled(v43, v44);
        int v398 = (int)v39;
        if (v47)
        {
          LODWORD(v395) = v46;
          uint64_t v48 = (uint8_t *)swift_slowAlloc();
          uint64_t v394 = swift_slowAlloc();
          uint64_t v431 = v394;
          *(_DWORD *)uint64_t v48 = 136315138;
          v393 = v48 + 4;
          uint64_t v397 = v42;
          id v49 = v48;
          uint64_t v50 = Data.hexString.getter();
          v427[0] = sub_1008FA0F0(v50, v51, &v431);
          LOBYTE(v39) = v398;
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease();
          uint64_t v52 = v417;
          unint64_t v53 = v415;
          sub_1005FCC80(v45, v40, v417, v415, (char)v39);
          sub_1005FCC80(v45, v40, v52, v53, (char)v39);
          _os_log_impl((void *)&_mh_execute_header, v43, (os_log_type_t)v395, "primaryKey %s", v49, 0xCu);
          swift_arrayDestroy();
          swift_slowDealloc();
          uint64_t v42 = v397;
          swift_slowDealloc();
        }
        else
        {
          uint64_t v135 = v38;
          uint64_t v136 = v417;
          unint64_t v137 = v415;
          sub_1005FCC80(v135, v40, v417, v415, (char)v39);
          sub_1005FCC80(v45, v40, v136, v137, (char)v39);
        }

        uint64_t v138 = v45;
        uint64_t v431 = v45;
        unint64_t v432 = v40;
        sub_1000362FC();
        if (DataProtocol.isNull.getter())
        {
          uint64_t v139 = Logger.logObject.getter();
          os_log_type_t v140 = static os_log_type_t.default.getter();
          if (os_log_type_enabled(v139, v140))
          {
            v141 = (uint8_t *)swift_slowAlloc();
            *(_WORD *)v141 = 0;
            _os_log_impl((void *)&_mh_execute_header, v139, v140, "primaryKey is empty! Verifying FindMyNetworkIdV2.", v141, 2u);
            swift_slowDealloc();
          }

          uint64_t v142 = sub_100F87378();
          unint64_t v144 = v415;
          unint64_t v145 = v418;
          unint64_t v146 = v399;
          if (v143 >> 60 == 15)
          {
            uint64_t v147 = Logger.logObject.getter();
            os_log_type_t v148 = static os_log_type_t.error.getter();
            if (os_log_type_enabled(v147, v148))
            {
              char v149 = (uint8_t *)swift_slowAlloc();
              *(_WORD *)char v149 = 0;
              _os_log_impl((void *)&_mh_execute_header, v147, v148, "Unable to generate FindMyNetworkId!", v149, 2u);
              swift_slowDealloc();

              uint64_t v150 = v417;
              sub_1005FCC80(v138, v145, v417, v144, (char)v39);
              sub_1005FCC80(v138, v145, v150, v144, (char)v39);
              uint64_t v151 = v138;
              unint64_t v152 = v145;
LABEL_69:
              sub_10001CFB8(v151, v152);
              goto LABEL_48;
            }
            uint64_t v235 = v417;
            sub_1005FCC80(v138, v145, v417, v144, (char)v39);
            sub_1005FCC80(v138, v145, v235, v144, (char)v39);

            uint64_t v72 = v138;
            unint64_t v73 = v145;
            uint64_t v74 = v235;
            unint64_t v75 = v144;
            char v117 = (char)v39;
            goto LABEL_47;
          }
          unint64_t v191 = v143;
          uint64_t v192 = v142;
          char v193 = (char)v39;
          switch(v143 >> 62)
          {
            case 1uLL:
              LODWORD(v194) = HIDWORD(v142) - v142;
              if (__OFSUB__(HIDWORD(v142), v142)) {
                goto LABEL_225;
              }
              uint64_t v194 = (int)v194;
LABEL_140:
              if (v194 != 32) {
                goto LABEL_241;
              }
              unint64_t v265 = v424;
              unint64_t v264 = (unint64_t)v425;
              long long v266 = v416;
              void *v424 = v416;
              v421(v265, v420, v264);
              id v267 = v266;
              sub_100037A38(v192, v191);
              LOBYTE(v266) = _dispatchPreconditionTest(_:)();
              v423(v265, v264);
              if (v266)
              {
                *(unsigned char *)(v146 + 120) = 6;
                uint64_t v268 = v417;
                sub_1005FCC80(v138, v145, v417, v144, v193);
                sub_1005FCC80(v138, v145, v268, v144, v193);
                sub_100037A24(v192, v191);
                uint64_t v269 = v138;
                unint64_t v270 = v145;
                uint64_t v271 = v268;
                unint64_t v272 = v144;
                char v273 = v193;
LABEL_143:
                sub_1005FCC80(v269, v270, v271, v272, v273);
LABEL_144:
                char v61 = 0;
                uint64_t v29 = (uint64_t)v426;
                uint64_t *v426 = v192;
                *(void *)(v29 + 8) = v191;
                *(_OWORD *)(v29 + 16) = xmmword_10137D8D0;
LABEL_145:
                *(unsigned char *)(v29 + 32) = 1;
                goto LABEL_16;
              }
              __break(1u);
              break;
            case 2uLL:
              uint64_t v262 = *(void *)(v142 + 16);
              uint64_t v261 = *(void *)(v142 + 24);
              BOOL v263 = __OFSUB__(v261, v262);
              uint64_t v194 = v261 - v262;
              if (!v263) {
                goto LABEL_140;
              }
              goto LABEL_226;
            case 3uLL:
              goto LABEL_241;
            default:
              uint64_t v194 = BYTE6(v143);
              goto LABEL_140;
          }
          goto LABEL_221;
        }
        sub_1000361E0(v45, v40);
        sub_100434E0C(v45, v40, &v431);
        uint64_t v397 = v42;
        uint64_t v215 = v431;
        unint64_t v214 = v432;
        unint64_t v216 = v399;
        uint64_t v217 = *(void *)(v399 + 16);
        type metadata accessor for BeaconKeyManager(0);
        uint64_t v394 = v217;
        OSAllocatedUnfairLock.callAsFunction<A>(_:)();
        uint64_t v395 = v215;
        sub_1012E41F8((uint64_t)v21);
        swift_release();
        int v218 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v408 + 48))(v21, 1, v22);
        if (v218 == 1)
        {
          unint64_t v219 = v214;
          sub_10001DAB4((uint64_t)v21, &qword_101657910);
          char v220 = Logger.logObject.getter();
          os_log_type_t v221 = static os_log_type_t.default.getter();
          if (os_log_type_enabled(v220, v221))
          {
            v222 = (uint8_t *)swift_slowAlloc();
            *(_WORD *)v222 = 0;
            _os_log_impl((void *)&_mh_execute_header, v220, v221, "Unknown beacon. Verifying FMNIDV2...", v222, 2u);
            swift_slowDealloc();
          }

          uint64_t v223 = sub_100F87378();
          unint64_t v225 = v415;
          unint64_t v226 = v418;
          if (v224 >> 60 == 15)
          {
            uint64_t v227 = Logger.logObject.getter();
            os_log_type_t v228 = static os_log_type_t.error.getter();
            if (os_log_type_enabled(v227, v228))
            {
              uint64_t v229 = (uint8_t *)swift_slowAlloc();
              *(_WORD *)uint64_t v229 = 0;
              _os_log_impl((void *)&_mh_execute_header, v227, v228, "Unable to generate FindMyNetworkId!", v229, 2u);
              swift_slowDealloc();
              sub_10001CFB8(v395, v219);

              uint64_t v230 = v417;
              char v231 = v398;
              sub_1005FCC80(v138, v226, v417, v225, v398);
              sub_1005FCC80(v138, v226, v230, v225, v231);
              uint64_t v151 = v138;
              unint64_t v152 = v226;
              goto LABEL_69;
            }
            uint64_t v320 = v417;
            char v321 = v398;
            sub_1005FCC80(v138, v226, v417, v225, v398);
            sub_1005FCC80(v138, v226, v320, v225, v321);
            sub_10001CFB8(v395, v219);

            uint64_t v72 = v138;
            unint64_t v73 = v226;
            uint64_t v74 = v320;
            unint64_t v75 = v225;
            char v117 = v321;
LABEL_47:
            sub_1005FCC80(v72, v73, v74, v75, v117);
LABEL_48:
            uint64_t v29 = (uint64_t)v426;
            uint64_t v60 = 9;
            goto LABEL_14;
          }
          unint64_t v191 = v224;
          uint64_t v192 = v223;
          switch(v224 >> 62)
          {
            case 1uLL:
              LODWORD(v284) = HIDWORD(v223) - v223;
              if (__OFSUB__(HIDWORD(v223), v223)) {
                goto LABEL_234;
              }
              uint64_t v284 = (int)v284;
LABEL_191:
              if (v284 != 32) {
                goto LABEL_243;
              }
              v365 = v424;
              unint64_t v364 = (unint64_t)v425;
              v366 = v416;
              void *v424 = v416;
              v421(v365, v420, v364);
              id v367 = v366;
              sub_100037A38(v192, v191);
              LOBYTE(v366) = _dispatchPreconditionTest(_:)();
              v423(v365, v364);
              if ((v366 & 1) == 0) {
                goto LABEL_229;
              }
              *(unsigned char *)(v216 + 120) = 3;
              uint64_t v368 = v417;
              char v369 = v398;
              sub_1005FCC80(v138, v226, v417, v225, v398);
              sub_1005FCC80(v138, v226, v368, v225, v369);
              sub_100037A24(v192, v191);
              sub_10001CFB8(v395, v219);
              uint64_t v269 = v138;
              unint64_t v270 = v226;
              uint64_t v271 = v368;
              unint64_t v272 = v225;
              char v273 = v369;
              break;
            case 2uLL:
              uint64_t v363 = *(void *)(v223 + 16);
              uint64_t v362 = *(void *)(v223 + 24);
              BOOL v263 = __OFSUB__(v362, v363);
              uint64_t v284 = v362 - v363;
              if (!v263) {
                goto LABEL_191;
              }
              goto LABEL_235;
            case 3uLL:
              goto LABEL_243;
            default:
              uint64_t v284 = BYTE6(v224);
              goto LABEL_191;
          }
          goto LABEL_143;
        }
        uint64_t v250 = v409;
        sub_100F08F68((uint64_t)v21, v409, type metadata accessor for BeaconKeyManager.IndexInformation);
        sub_100F08BD4(v250, (uint64_t)v27, type metadata accessor for BeaconKeyManager.IndexInformation);
        uint64_t v251 = v403;
        sub_100F08BD4(v250, v403, type metadata accessor for BeaconKeyManager.IndexInformation);
        v252 = Logger.logObject.getter();
        os_log_type_t v253 = static os_log_type_t.default.getter();
        int v254 = v253;
        if (os_log_type_enabled(v252, v253))
        {
          uint64_t v255 = swift_slowAlloc();
          uint64_t v431 = swift_slowAlloc();
          *(_DWORD *)uint64_t v255 = 136315394;
          type metadata accessor for UUID();
          uint64_t v396 = v138;
          sub_100F09184((unint64_t *)&qword_101638B10, (void (*)(uint64_t))&type metadata accessor for UUID);
          LODWORD(v408) = v254;
          uint64_t v256 = dispatch thunk of CustomStringConvertible.description.getter();
          v427[0] = sub_1008FA0F0(v256, v257, &v431);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease();
          sub_100F08C3C((uint64_t)v27, type metadata accessor for BeaconKeyManager.IndexInformation);
          *(_WORD *)(v255 + 12) = 2082;
          sub_10001CD44((void *)(v251 + *(int *)(v22 + 20)), *(void *)(v251 + *(int *)(v22 + 20) + 24));
          uint64_t v258 = dispatch thunk of CustomStringConvertible.description.getter();
          v427[0] = sub_1008FA0F0(v258, v259, &v431);
          uint64_t v138 = v396;
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease();
          sub_100F08C3C(v251, type metadata accessor for BeaconKeyManager.IndexInformation);
          _os_log_impl((void *)&_mh_execute_header, v252, (os_log_type_t)v408, "Found beacon %s and index %{public}s", (uint8_t *)v255, 0x16u);
          swift_arrayDestroy();
          swift_slowDealloc();
          swift_slowDealloc();
        }
        else
        {
          sub_100F08C3C((uint64_t)v27, type metadata accessor for BeaconKeyManager.IndexInformation);
          sub_100F08C3C(v251, type metadata accessor for BeaconKeyManager.IndexInformation);
        }

        char v285 = v398;
        uint64_t v286 = v406;
        uint64_t v287 = v405;
        uint64_t v288 = v404;
        sub_100ACEADC(v409, v404);
        int v289 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v287 + 48))(v288, 1, v286);
        unint64_t v290 = v415;
        if (v289 == 1)
        {
          unint64_t v291 = v214;
          sub_10001DAB4(v288, (uint64_t *)&unk_101653D50);
LABEL_161:
          v292 = Logger.logObject.getter();
          os_log_type_t v293 = static os_log_type_t.default.getter();
          BOOL v294 = os_log_type_enabled(v292, v293);
          unint64_t v295 = v418;
          if (v294)
          {
            unint64_t v296 = (uint8_t *)swift_slowAlloc();
            *(_WORD *)unint64_t v296 = 0;
            _os_log_impl((void *)&_mh_execute_header, v292, v293, "Owner accessory. Verifying FMNIDV2...", v296, 2u);
            char v285 = v398;
            swift_slowDealloc();
          }

          uint64_t v297 = sub_100F87378();
          if (v298 >> 60 != 15)
          {
            unint64_t v191 = v298;
            uint64_t v192 = v297;
            uint64_t v318 = v395;
            switch(v298 >> 62)
            {
              case 1uLL:
                LODWORD(v319) = HIDWORD(v297) - v297;
                if (__OFSUB__(HIDWORD(v297), v297)) {
                  goto LABEL_237;
                }
                uint64_t v319 = (int)v319;
LABEL_199:
                if (v319 != 32) {
                  goto LABEL_244;
                }
                v379 = v424;
                unint64_t v378 = (unint64_t)v425;
                v380 = v416;
                void *v424 = v416;
                v421(v379, v420, v378);
                id v381 = v380;
                sub_100037A38(v192, v191);
                LOBYTE(v380) = _dispatchPreconditionTest(_:)();
                v423(v379, v378);
                if ((v380 & 1) == 0) {
                  goto LABEL_231;
                }
                *(unsigned char *)(v399 + 120) = 3;
                sub_10001CFB8(v318, v291);
                sub_100037A24(v192, v191);
                uint64_t v382 = v417;
                char v383 = v398;
                sub_1005FCC80(v138, v295, v417, v290, v398);
                sub_1005FCC80(v138, v295, v382, v290, v383);
                sub_10001CFB8(v138, v295);
                sub_100F08C3C(v409, type metadata accessor for BeaconKeyManager.IndexInformation);
                break;
              case 2uLL:
                uint64_t v377 = *(void *)(v297 + 16);
                uint64_t v376 = *(void *)(v297 + 24);
                BOOL v263 = __OFSUB__(v376, v377);
                uint64_t v319 = v376 - v377;
                if (!v263) {
                  goto LABEL_199;
                }
                goto LABEL_238;
              case 3uLL:
                goto LABEL_244;
              default:
                uint64_t v319 = BYTE6(v298);
                goto LABEL_199;
            }
            goto LABEL_144;
          }
          v299 = Logger.logObject.getter();
          os_log_type_t v300 = static os_log_type_t.error.getter();
          if (os_log_type_enabled(v299, v300))
          {
            uint64_t v301 = (uint8_t *)swift_slowAlloc();
            *(_WORD *)uint64_t v301 = 0;
            _os_log_impl((void *)&_mh_execute_header, v299, v300, "Unable to generate FindMyNetworkId!", v301, 2u);
            char v285 = v398;
            swift_slowDealloc();
          }
          sub_10001CFB8(v395, v291);

          uint64_t v302 = v417;
          sub_1005FCC80(v138, v295, v417, v290, v285);
          sub_1005FCC80(v138, v295, v302, v290, v285);
          sub_10001CFB8(v138, v295);
          sub_100F08C3C(v409, type metadata accessor for BeaconKeyManager.IndexInformation);
LABEL_99:
          uint64_t v60 = 9;
          uint64_t v29 = (uint64_t)v426;
          goto LABEL_14;
        }
        uint64_t v303 = v407;
        sub_100F08F68(v288, v407, type metadata accessor for SharedBeaconRecord);
        int v304 = *(unsigned __int8 *)(v303 + *(int *)(v286 + 64));
        uint64_t v305 = v303;
        uint64_t v306 = v402;
        sub_100F08BD4(v305, v402, type metadata accessor for SharedBeaconRecord);
        if (v304 == 1)
        {
          sub_100F08C3C(v306, type metadata accessor for SharedBeaconRecord);
        }
        else
        {
          int v322 = *(unsigned __int8 *)(v306 + *(int *)(v286 + 64));
          sub_100F08C3C(v306, type metadata accessor for SharedBeaconRecord);
          if (v322 != 4)
          {
            unint64_t v291 = v214;
            sub_100F08C3C(v407, type metadata accessor for SharedBeaconRecord);
            goto LABEL_161;
          }
        }
        v425 = (uint8_t *)v214;
        uint64_t v396 = v138;
        uint64_t v323 = v401;
        sub_100F08BD4(v407, v401, type metadata accessor for SharedBeaconRecord);
        v324 = Logger.logObject.getter();
        os_log_type_t v325 = static os_log_type_t.default.getter();
        if (os_log_type_enabled(v324, v325))
        {
          v326 = (uint8_t *)swift_slowAlloc();
          uint64_t v431 = swift_slowAlloc();
          *(_DWORD *)v326 = 136315138;
          sub_100F08BD4(v323, v400, type metadata accessor for SharedBeaconRecord);
          uint64_t v327 = String.init<A>(describing:)();
          v427[0] = sub_1008FA0F0(v327, v328, &v431);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease();
          sub_100F08C3C(v323, type metadata accessor for SharedBeaconRecord);
          _os_log_impl((void *)&_mh_execute_header, v324, v325, "Found sharedBeacon %s", v326, 0xCu);
          swift_arrayDestroy();
          swift_slowDealloc();
          swift_slowDealloc();
        }
        else
        {
          sub_100F08C3C(v323, type metadata accessor for SharedBeaconRecord);
        }

        uint64_t v338 = *(int *)(v286 + 28);
        uint64_t v339 = v407;
        uint64_t v340 = v407 + v338;
        uint64_t v342 = *(void *)(v340 + 8);
        v341 = *(void **)(v340 + 16);
        char v343 = *(unsigned char *)v340;
        swift_bridgeObjectRetain();
        v344 = (void *)sub_100ECF4F0(v343, v342, v341);
        swift_bridgeObjectRelease();
        id v345 = [v344 description];

        uint64_t v346 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        uint64_t v348 = v347;

        v349 = (int *)v412;
        v350 = v414;
        sub_100A3AC74((char *)v414 + *(int *)(v412 + 20));
        sub_100F08BD4(v411, (uint64_t)v350 + v349[6], (uint64_t (*)(void))type metadata accessor for BluetoothManagerDevice);
        swift_bridgeObjectRetain();
        v351 = (void *)sub_100ECF4F0(v343, v342, v341);
        id v352 = [v351 description];

        uint64_t v353 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        uint64_t v354 = sub_101115048(v353);
        uint64_t v356 = v355;
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        uint64_t *v350 = v346;
        v350[1] = v348;
        *((unsigned char *)v350 + v349[7]) = v413 & 1;
        v357 = (uint64_t *)((char *)v350 + v349[8]);
        uint64_t *v357 = v354;
        v357[1] = v356;
        sub_100F04D34((uint64_t)v350);
        sub_10001CFB8(v395, (unint64_t)v425);
        uint64_t v358 = v396;
        unint64_t v359 = v418;
        uint64_t v360 = v417;
        unint64_t v361 = v415;
        LOBYTE(v354) = v398;
        sub_1005FCC80(v396, v418, v417, v415, v398);
        sub_1005FCC80(v358, v359, v360, v361, v354);
        sub_10001CFB8(v358, v359);
        sub_100F08C3C((uint64_t)v350, (uint64_t (*)(void))type metadata accessor for PrivacyAlertSupport.AlertInfo);
        sub_100F08C3C(v339, type metadata accessor for SharedBeaconRecord);
        sub_100F08C3C(v409, type metadata accessor for BeaconKeyManager.IndexInformation);
        goto LABEL_101;
      case 1uLL:
        int v398 = v429;
        unint64_t v32 = v418;
        sub_1000361E0(v427[0], v418);
        sub_1000361E0(v38, v32);
        static String.Encoding.utf8.getter();
        uint64_t v87 = String.init(data:encoding:)();
        if (v88)
        {
          uint64_t v89 = v87;
          unint64_t v90 = v88;
          if (qword_101637190 != -1) {
            swift_once();
          }
          uint64_t v91 = type metadata accessor for Logger();
          sub_100010324(v91, (uint64_t)qword_10170EE70);
          swift_bridgeObjectRetain_n();
          uint64_t v92 = Logger.logObject.getter();
          os_log_type_t v93 = static os_log_type_t.default.getter();
          if (os_log_type_enabled(v92, v93))
          {
            uint64_t v94 = v38;
            uint64_t v95 = swift_slowAlloc();
            uint64_t v431 = swift_slowAlloc();
            *(_DWORD *)uint64_t v95 = 141558275;
            v427[0] = 1752392040;
            UnsafeMutableRawBufferPointer.copyMemory(from:)();
            *(_WORD *)(v95 + 12) = 2081;
            swift_bridgeObjectRetain();
            v427[0] = sub_1008FA0F0(v89, v90, &v431);
            UnsafeMutableRawBufferPointer.copyMemory(from:)();
            swift_bridgeObjectRelease_n();
            _os_log_impl((void *)&_mh_execute_header, v92, v93, "iCloudIdentifier: %{private,mask.hash}s", (uint8_t *)v95, 0x16u);
            swift_arrayDestroy();
            swift_slowDealloc();
            uint64_t v38 = v94;
            unint64_t v32 = v418;
            swift_slowDealloc();
          }
          else
          {

            swift_bridgeObjectRelease_n();
          }
          uint64_t v29 = (uint64_t)v426;
          uint64_t v184 = v417;
          unint64_t v185 = v90;
          uint64_t v186 = v89;
          v187 = (int *)v412;
          v188 = v414;
          sub_100A3AC74((char *)v414 + *(int *)(v412 + 20));
          sub_100F08BD4(v411, (uint64_t)v188 + v187[6], (uint64_t (*)(void))type metadata accessor for BluetoothManagerDevice);
          uint64_t *v188 = v186;
          v188[1] = v185;
          *((unsigned char *)v188 + v187[7]) = v413 & 1;
          char v189 = (uint64_t *)((char *)v188 + v187[8]);
          *char v189 = 0;
          v189[1] = 0;
          sub_100F04D34((uint64_t)v188);
          unint64_t v190 = v415;
          LOBYTE(v186) = v398;
          sub_1005FCC80(v38, v32, v184, v415, v398);
          sub_1005FCC80(v38, v32, v184, v190, v186);
          sub_10001CFB8(v38, v32);
          sub_100F08C3C((uint64_t)v188, (uint64_t (*)(void))type metadata accessor for PrivacyAlertSupport.AlertInfo);
          uint64_t v60 = 2;
          goto LABEL_14;
        }
        uint64_t v29 = (uint64_t)v426;
        if (qword_101637190 != -1) {
          goto LABEL_219;
        }
        goto LABEL_88;
      case 3uLL:
        unint64_t v399 = v5;
        unint64_t v32 = v415;
        unint64_t v6 = v418;
        uint64_t v36 = v417;
        sub_1005FCBAC(v427[0], v418, v417, v415, v429);
        sub_1000361E0(v38, v6);
        sub_1000361E0(v36, v32 & 0xCFFFFFFFFFFFFFFFLL);
        int v76 = sub_1003C90E8(v38, v6, v36, v32 & 0xCFFFFFFFFFFFFFFFLL);
        if ((v76 & 0xFF0000) == 0x60000)
        {
          if (qword_101637190 != -1) {
            swift_once();
          }
          uint64_t v77 = type metadata accessor for Logger();
          sub_100010324(v77, (uint64_t)qword_10170EE70);
          uint64_t v78 = Logger.logObject.getter();
          os_log_type_t v79 = static os_log_type_t.error.getter();
          BOOL v80 = os_log_type_enabled(v78, v79);
          uint64_t v29 = (uint64_t)v426;
          if (v80)
          {
            uint64_t v81 = (uint8_t *)swift_slowAlloc();
            *(_WORD *)uint64_t v81 = 0;
            _os_log_impl((void *)&_mh_execute_header, v78, v79, "Invalid commandResponse", v81, 2u);
            swift_slowDealloc();
          }

          sub_1005FCC80(v38, v6, v36, v32, (char)v39);
          uint64_t v82 = v38;
          unint64_t v83 = v6;
          uint64_t v84 = v36;
          unint64_t v85 = v32;
          char v86 = (char)v39;
          goto LABEL_123;
        }
        int v118 = v76;
        int v398 = (int)v39;
        if (qword_101637190 != -1) {
          swift_once();
        }
        uint64_t v119 = type metadata accessor for Logger();
        sub_100010324(v119, (uint64_t)qword_10170EE70);
        double v120 = Logger.logObject.getter();
        os_log_type_t v121 = static os_log_type_t.default.getter();
        BOOL v122 = os_log_type_enabled(v120, v121);
        uint64_t v396 = v38;
        if (v122)
        {
          uint64_t v123 = swift_slowAlloc();
          uint64_t v431 = swift_slowAlloc();
          *(_DWORD *)uint64_t v123 = 33686018;
          LOWORD(v427[0]) = v118;
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          *(_WORD *)(v123 + 6) = 2082;
          if (BYTE2(v118)) {
            unsigned __int8 v124 = BYTE2(v118);
          }
          else {
            unsigned __int8 v124 = 6;
          }
          uint64_t v125 = sub_1003C8AB4(v124);
          v427[0] = sub_1008FA0F0(v125, v126, &v431);
          unint64_t v32 = v415;
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          unint64_t v6 = v418;
          swift_bridgeObjectRelease();
          _os_log_impl((void *)&_mh_execute_header, v120, v121, "commandResponse: Opcode %{public}hu. Status %{public}s", (uint8_t *)v123, 0x10u);
          swift_arrayDestroy();
          uint64_t v36 = v417;
          swift_slowDealloc();
          swift_slowDealloc();
        }

        uint64_t v29 = (uint64_t)v424;
        unint64_t v127 = (unint64_t)v425;
        double v128 = v416;
        void *v424 = v416;
        v421((void *)v29, v420, v127);
        id v129 = v128;
        uint64_t v38 = _dispatchPreconditionTest(_:)();
        v423((void *)v29, v127);
        if ((v38 & 1) == 0)
        {
          __break(1u);
LABEL_218:
          __break(1u);
LABEL_219:
          swift_once();
LABEL_88:
          uint64_t v167 = type metadata accessor for Logger();
          sub_100010324(v167, (uint64_t)qword_10170EE70);
          sub_1000361E0(v38, v32);
          sub_1000361E0(v38, v32);
          BOOL v168 = Logger.logObject.getter();
          os_log_type_t v169 = static os_log_type_t.error.getter();
          if (os_log_type_enabled(v168, v169))
          {
            char v170 = (uint8_t *)swift_slowAlloc();
            unint64_t v171 = v32;
            uint64_t v431 = swift_slowAlloc();
            *(_DWORD *)char v170 = 136315138;
            uint64_t v172 = Data.hexString.getter();
            v427[0] = sub_1008FA0F0(v172, v173, &v431);
            UnsafeMutableRawBufferPointer.copyMemory(from:)();
            swift_bridgeObjectRelease();
            uint64_t v174 = v417;
            unint64_t v175 = v415;
            char v176 = v398;
            sub_1005FCC80(v38, v171, v417, v415, v398);
            sub_1005FCC80(v38, v171, v174, v175, v176);
            _os_log_impl((void *)&_mh_execute_header, v168, v169, "Invalid format for icloudIdentifier %s", v170, 0xCu);
            swift_arrayDestroy();
            swift_slowDealloc();
            swift_slowDealloc();

            sub_1005FCC80(v38, v171, v174, v175, v176);
            sub_1005FCC80(v38, v171, v174, v175, v176);
            sub_10001CFB8(v38, v171);
            uint64_t v60 = 9;
            goto LABEL_14;
          }
          uint64_t v232 = v417;
          unint64_t v233 = v415;
          char v234 = v398;
          sub_1005FCC80(v38, v32, v417, v415, v398);
          sub_1005FCC80(v38, v32, v232, v233, v234);
          sub_10001CFB8(v38, v32);
          sub_10001CFB8(v38, v32);

          uint64_t v82 = v38;
          unint64_t v83 = v32;
          uint64_t v84 = v232;
          unint64_t v85 = v233;
          char v86 = v234;
LABEL_123:
          sub_1005FCC80(v82, v83, v84, v85, v86);
          uint64_t v60 = 9;
          goto LABEL_14;
        }
        int v130 = BYTE2(v118);
        if (BYTE2(v118) && *(unsigned char *)(v399 + 120) == 2)
        {
          double v131 = Logger.logObject.getter();
          os_log_type_t v132 = static os_log_type_t.default.getter();
          if (os_log_type_enabled(v131, v132))
          {
            uint64_t v133 = (uint8_t *)swift_slowAlloc();
            *(_WORD *)uint64_t v133 = 0;
            _os_log_impl((void *)&_mh_execute_header, v131, v132, "Accessory does not support verifyFindMyNetworkId. Getting iCloud identifier...", v133, 2u);
            swift_slowDealloc();
          }

          sub_1006E6724();
          BinaryDecodable.init(data:)();
          uint64_t v29 = (uint64_t)v426;
          uint64_t v134 = v396;
          char v260 = v398;
          sub_1005FCC80(v396, v6, v36, v32, v398);
          sub_1005FCC80(v134, v6, v36, v32, v260);
          char v61 = 0;
          goto LABEL_136;
        }
        v200 = v424;
        unint64_t v199 = (unint64_t)v425;
        void *v424 = v129;
        v421(v200, v420, v199);
        id v201 = v129;
        char v202 = _dispatchPreconditionTest(_:)();
        v423(v200, v199);
        if ((v202 & 1) == 0)
        {
LABEL_221:
          __break(1u);
LABEL_222:
          __break(1u);
          goto LABEL_223;
        }
        if (!v130 || *(unsigned char *)(v399 + 120) != 6)
        {
          char v237 = v424;
          unint64_t v236 = (unint64_t)v425;
          void *v424 = v201;
          v421(v237, v420, v236);
          id v238 = v201;
          char v239 = _dispatchPreconditionTest(_:)();
          v423(v237, v236);
          if ((v239 & 1) == 0)
          {
LABEL_223:
            __break(1u);
LABEL_224:
            __break(1u);
LABEL_225:
            __break(1u);
LABEL_226:
            __break(1u);
LABEL_227:
            __break(1u);
LABEL_228:
            __break(1u);
LABEL_229:
            __break(1u);
LABEL_230:
            __break(1u);
LABEL_231:
            __break(1u);
LABEL_232:
            __break(1u);
LABEL_233:
            __break(1u);
LABEL_234:
            __break(1u);
LABEL_235:
            __break(1u);
            goto LABEL_236;
          }
          if (v130 && *(unsigned char *)(v399 + 120) == 5)
          {
            uint64_t v240 = Logger.logObject.getter();
            os_log_type_t v241 = static os_log_type_t.default.getter();
            if (os_log_type_enabled(v240, v241))
            {
              uint64_t v242 = (uint8_t *)swift_slowAlloc();
              *(_WORD *)uint64_t v242 = 0;
              _os_log_impl((void *)&_mh_execute_header, v240, v241, "Accessory does not have a PrimaryKey and does not support verifyFindMyNetworkId, proceed to pairing", v242, 2u);
              swift_slowDealloc();
            }

            uint64_t v431 = 0;
            swift_retain();
            PassthroughSubject.send(_:)();
            swift_release();
            uint64_t v243 = v396;
            char v244 = v398;
            sub_1005FCC80(v396, v6, v36, v32, v398);
            sub_1005FCC80(v243, v6, v36, v32, v244);
            uint64_t v60 = 7;
            uint64_t v29 = (uint64_t)v426;
            goto LABEL_14;
          }
          uint64_t v276 = v424;
          unint64_t v275 = (unint64_t)v425;
          void *v424 = v238;
          v421(v276, v420, v275);
          uint64_t v27 = (char *)v238;
          char v277 = _dispatchPreconditionTest(_:)();
          v423(v276, v275);
          if ((v277 & 1) == 0) {
            goto LABEL_228;
          }
          if (!v130 || *(unsigned char *)(v399 + 120) != 3)
          {
            v308 = v424;
            unint64_t v307 = (unint64_t)v425;
            void *v424 = v27;
            v421(v308, v420, v307);
            uint64_t v309 = v27;
            char v310 = _dispatchPreconditionTest(_:)();
            v423(v308, v307);
            if (v310)
            {
              uint64_t v311 = *(unsigned __int8 *)(v399 + 120);
              v312 = Logger.logObject.getter();
              os_log_type_t v313 = static os_log_type_t.error.getter();
              BOOL v314 = os_log_type_enabled(v312, v313);
              uint64_t v29 = (uint64_t)v426;
              if (v314)
              {
                v315 = (uint8_t *)swift_slowAlloc();
                uint64_t v431 = swift_slowAlloc();
                *(_DWORD *)v315 = 136446210;
                unint64_t v316 = 0xE800000000000000;
                uint64_t v317 = 0x6E776F6E6B6E752ELL;
                switch(v311)
                {
                  case 1:
                    unint64_t v316 = 0xEE0079654B797261;
                    uint64_t v317 = 0x6D6972507465672ELL;
                    break;
                  case 2:
                    uint64_t v317 = 0xD000000000000016;
                    v390 = ".verifyFindMyNetworkId";
                    goto LABEL_214;
                  case 3:
                    uint64_t v317 = 0xD000000000000018;
                    v390 = ".verifyFindMyNetworkIdV2";
                    goto LABEL_214;
                  case 4:
                    unint64_t v316 = 0x800000010141A6D0;
                    uint64_t v317 = 0xD000000000000014;
                    break;
                  case 5:
                    uint64_t v317 = 0xD000000000000027;
                    v390 = ".verifyFindMyNetworkIdWithoutPrimaryKey";
                    goto LABEL_214;
                  case 6:
                    uint64_t v317 = 0xD000000000000029;
                    v390 = ".verifyFindMyNetworkIdV2WithoutPrimaryKey";
LABEL_214:
                    unint64_t v316 = (unint64_t)(v390 - 32) | 0x8000000000000000;
                    break;
                  default:
                    break;
                }
                v427[0] = sub_1008FA0F0(v317, v316, &v431);
                UnsafeMutableRawBufferPointer.copyMemory(from:)();
                swift_bridgeObjectRelease();
                _os_log_impl((void *)&_mh_execute_header, v312, v313, "Invalid state %{public}s", v315, 0xCu);
                swift_arrayDestroy();
                swift_slowDealloc();
                swift_slowDealloc();

                uint64_t v391 = v396;
                uint64_t v392 = v417;
                unint64_t v371 = v415;
                char v372 = v398;
                sub_1005FCC80(v396, v6, v417, v415, v398);
                uint64_t v373 = v391;
                unint64_t v374 = v6;
                uint64_t v375 = v392;
              }
              else
              {

                uint64_t v370 = v396;
                unint64_t v371 = v415;
                char v372 = v398;
                sub_1005FCC80(v396, v6, v36, v415, v398);
                uint64_t v373 = v370;
                unint64_t v374 = v6;
                uint64_t v375 = v36;
              }
              sub_1005FCC80(v373, v374, v375, v371, v372);
              uint64_t v60 = 7;
              goto LABEL_14;
            }
            goto LABEL_230;
          }
          uint64_t v278 = Logger.logObject.getter();
          os_log_type_t v279 = static os_log_type_t.default.getter();
          if (os_log_type_enabled(v278, v279))
          {
            uint64_t v280 = (uint8_t *)swift_slowAlloc();
            *(_WORD *)uint64_t v280 = 0;
            _os_log_impl((void *)&_mh_execute_header, v278, v279, "Accessory does not support verifyFindMyNetworkIdV2. Falling back to verifyFindMyNetworkId...", v280, 2u);
            swift_slowDealloc();
          }

          uint64_t v281 = sub_100F87378();
          if (v282 >> 60 != 15)
          {
            a1 = v282;
            uint64_t v35 = v281;
            switch(v282 >> 62)
            {
              case 1uLL:
                goto LABEL_203;
              case 2uLL:
                uint64_t v385 = *(void *)(v281 + 16);
                uint64_t v384 = *(void *)(v281 + 24);
                BOOL v263 = __OFSUB__(v384, v385);
                uint64_t v283 = v384 - v385;
                if (!v263) {
                  goto LABEL_206;
                }
                goto LABEL_240;
              case 3uLL:
                goto LABEL_245;
              default:
                uint64_t v283 = BYTE6(v282);
                goto LABEL_206;
            }
          }
          goto LABEL_108;
        }
        BOOL v203 = Logger.logObject.getter();
        os_log_type_t v204 = static os_log_type_t.default.getter();
        if (os_log_type_enabled(v203, v204))
        {
          uint64_t v205 = (uint8_t *)swift_slowAlloc();
          *(_WORD *)uint64_t v205 = 0;
          _os_log_impl((void *)&_mh_execute_header, v203, v204, "Accessory does not have a PrimaryKey and does not support verifyFindMyNetworkIdV2", v205, 2u);
          swift_slowDealloc();
        }

        uint64_t v206 = sub_100F87378();
        if (v207 >> 60 == 15)
        {
LABEL_108:
          uint64_t v208 = Logger.logObject.getter();
          os_log_type_t v209 = static os_log_type_t.error.getter();
          if (os_log_type_enabled(v208, v209))
          {
            uint64_t v210 = (uint8_t *)swift_slowAlloc();
            *(_WORD *)uint64_t v210 = 0;
            _os_log_impl((void *)&_mh_execute_header, v208, v209, "Unable to generate FindMyNetworkId!", v210, 2u);
            swift_slowDealloc();
          }

          uint64_t v211 = v396;
          char v212 = v398;
          sub_1005FCC80(v396, v6, v36, v32, v398);
          sub_1005FCC80(v211, v6, v36, v32, v212);
          goto LABEL_99;
        }
        a1 = v207;
        uint64_t v35 = v206;
        switch(v207 >> 62)
        {
          case 1uLL:
            LODWORD(v274) = HIDWORD(v206) - v206;
            if (__OFSUB__(HIDWORD(v206), v206)) {
              goto LABEL_232;
            }
            uint64_t v274 = (int)v274;
LABEL_182:
            if (v274 != 32) {
              goto LABEL_242;
            }
            v332 = v424;
            unint64_t v331 = (unint64_t)v425;
            void *v424 = v201;
            v421(v332, v420, v331);
            id v333 = v201;
            sub_100037A38(v35, a1);
            char v334 = _dispatchPreconditionTest(_:)();
            v423(v332, v331);
            if ((v334 & 1) == 0) {
              goto LABEL_227;
            }
            char v335 = 5;
            break;
          case 2uLL:
            uint64_t v330 = *(void *)(v206 + 16);
            uint64_t v329 = *(void *)(v206 + 24);
            BOOL v263 = __OFSUB__(v329, v330);
            uint64_t v274 = v329 - v330;
            if (!v263) {
              goto LABEL_182;
            }
            goto LABEL_233;
          case 3uLL:
            goto LABEL_242;
          default:
            uint64_t v274 = BYTE6(v207);
            goto LABEL_182;
        }
        break;
      case 5uLL:
        if (qword_101637190 != -1) {
          swift_once();
        }
        uint64_t v96 = type metadata accessor for Logger();
        sub_100010324(v96, (uint64_t)qword_10170EE70);
        uint64_t v97 = Logger.logObject.getter();
        os_log_type_t v98 = static os_log_type_t.default.getter();
        if (os_log_type_enabled(v97, v98))
        {
          uint64_t v99 = (uint8_t *)swift_slowAlloc();
          *(_WORD *)uint64_t v99 = 0;
          _os_log_impl((void *)&_mh_execute_header, v97, v98, "Received .verifyFindMyNetworkIdResponse", v99, 2u);
          swift_slowDealloc();
        }

        if ((v38 & 1) == 0)
        {
          uint64_t v100 = Logger.logObject.getter();
          os_log_type_t v101 = static os_log_type_t.default.getter();
          if (os_log_type_enabled(v100, v101))
          {
            uint64_t v102 = (uint8_t *)swift_slowAlloc();
            *(_WORD *)uint64_t v102 = 0;
            _os_log_impl((void *)&_mh_execute_header, v100, v101, "FindMyNetworkId verification failed! Getting iCloud identifier to show privacy alert.", v102, 2u);
            swift_slowDealloc();
          }

          sub_1006E6724();
          BinaryDecodable.init(data:)();
          uint64_t v104 = v424;
          unint64_t v103 = (unint64_t)v425;
          uint64_t v105 = v416;
          void *v424 = v416;
          v421(v104, v420, v103);
          id v106 = v105;
          LOBYTE(v105) = _dispatchPreconditionTest(_:)();
          v423(v104, v103);
          if ((v105 & 1) == 0) {
            goto LABEL_222;
          }
          char v61 = 0;
          *(unsigned char *)(v6 + 120) = 4;
LABEL_133:
          uint64_t v29 = (uint64_t)v426;
LABEL_136:
          *(void *)uint64_t v29 = 1;
          *(void *)(v29 + 8) = 0;
          *(void *)(v29 + 16) = 0;
          *(void *)(v29 + 24) = 0;
          *(unsigned char *)(v29 + 32) = 2;
          goto LABEL_16;
        }
        uint64_t v38 = (uint64_t)v424;
        unint64_t v153 = (unint64_t)v425;
        char v154 = v416;
        void *v424 = v416;
        v421((void *)v38, v420, v153);
        id v155 = v154;
        LOBYTE(v154) = _dispatchPreconditionTest(_:)();
        v423((void *)v38, v153);
        if ((v154 & 1) == 0) {
          goto LABEL_218;
        }
        int v156 = *(unsigned __int8 *)(v5 + 120);
        uint64_t v157 = Logger.logObject.getter();
        os_log_type_t v158 = static os_log_type_t.default.getter();
        BOOL v159 = os_log_type_enabled(v157, v158);
        uint64_t v29 = (uint64_t)v426;
        if (v156 != 5)
        {
          if (v159)
          {
            char v213 = (uint8_t *)swift_slowAlloc();
            *(_WORD *)char v213 = 0;
            _os_log_impl((void *)&_mh_execute_header, v157, v158, "FindMyNetworkId verified!", v213, 2u);
            swift_slowDealloc();
          }

          uint64_t v431 = 0;
          swift_retain();
          PassthroughSubject.send(_:)();
          swift_release();
          uint64_t v60 = 2;
          goto LABEL_14;
        }
        if (v159)
        {
          uint64_t v160 = (uint8_t *)swift_slowAlloc();
          *(_WORD *)uint64_t v160 = 0;
          _os_log_impl((void *)&_mh_execute_header, v157, v158, "FindMyNetworkId verified, but no PrimaryKey. Re-pairing both buds.", v160, 2u);
          swift_slowDealloc();
        }

        char v61 = 1;
        uint64_t v431 = 1;
        swift_retain();
        PassthroughSubject.send(_:)();
        swift_release();
        *(void *)uint64_t v29 = 2;
        *(_OWORD *)(v29 + 8) = 0u;
        *(_OWORD *)(v29 + 24) = 0u;
        *(unsigned char *)(v29 + 40) = 11;
LABEL_16:
        *(unsigned char *)(v29 + 41) = v61;
        return;
      case 7uLL:
        unint64_t v399 = v5;
        if (qword_101637190 != -1) {
          swift_once();
        }
        uint64_t v107 = type metadata accessor for Logger();
        sub_100010324(v107, (uint64_t)qword_10170EE70);
        unint64_t v108 = v418;
        uint64_t v109 = v417;
        unint64_t v110 = v415;
        sub_1005FCBAC(v38, v418, v417, v415, (char)v39);
        swift_bridgeObjectRetain();
        id v111 = Logger.logObject.getter();
        os_log_type_t v112 = static os_log_type_t.default.getter();
        if (os_log_type_enabled(v111, v112))
        {
          char v113 = (char)v39;
          uint64_t v39 = (uint8_t *)swift_slowAlloc();
          uint64_t v114 = swift_slowAlloc();
          *(_DWORD *)uint64_t v39 = 136315138;
          v427[0] = v114;
          LOWORD(v431) = v38;
          unint64_t v432 = v418;
          swift_bridgeObjectRetain();
          uint64_t v115 = String.init<A>(describing:)();
          uint64_t v431 = sub_1008FA0F0(v115, v116, v427);
          unint64_t v110 = v415;
          uint64_t v109 = v417;
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          unint64_t v108 = v418;
          swift_bridgeObjectRelease();
          sub_1005FCC80(v38, v108, v109, v110, v113);
          sub_1005FCC80(v38, v108, v109, v110, v113);
          _os_log_impl((void *)&_mh_execute_header, v111, v112, "Received .verifyFindMyNetworkIdResponseV2: %s", v39, 0xCu);
          swift_arrayDestroy();
          swift_slowDealloc();
          LOBYTE(v39) = v113;
          swift_slowDealloc();
        }
        else
        {
          sub_1005FCC80(v38, v108, v109, v110, (char)v39);
          sub_1005FCC80(v38, v108, v109, v110, (char)v39);
        }

        if (!(_BYTE)v38) {
          goto LABEL_90;
        }
        if (v38 != 2)
        {
          if (v38 == 1)
          {
            uint64_t v161 = *(void *)(v108 + 16);
            if (!v161)
            {
LABEL_84:
              uint64_t v164 = Logger.logObject.getter();
              os_log_type_t v165 = static os_log_type_t.default.getter();
              if (os_log_type_enabled(v164, v165))
              {
                unint64_t v166 = (uint8_t *)swift_slowAlloc();
                *(_WORD *)unint64_t v166 = 0;
                _os_log_impl((void *)&_mh_execute_header, v164, v165, "FindMyNetworkId verified, all parts are paired on the accessory.", v166, 2u);
                swift_slowDealloc();
              }

              uint64_t v431 = 2;
              swift_retain();
              PassthroughSubject.send(_:)();
              swift_release();
              sub_1005FCC80(v38, v108, v109, v110, (char)v39);
              uint64_t v29 = (uint64_t)v426;
              uint64_t *v426 = 2;
              goto LABEL_15;
            }
            uint64_t v162 = (unsigned __int8 *)(v108 + 56);
            while (1)
            {
              int v163 = *v162;
              v162 += 32;
              if (v163 != 1) {
                break;
              }
              if (!--v161) {
                goto LABEL_84;
              }
            }
LABEL_90:
            sub_1005FCBAC(v38, v108, v109, v110, (char)v39);
            sub_1005FCBAC(v38, v108, v109, v110, (char)v39);
            sub_1005FCBAC(v38, v108, v109, v110, (char)v39);
            uint64_t v177 = Logger.logObject.getter();
            os_log_type_t v178 = static os_log_type_t.default.getter();
            if (os_log_type_enabled(v177, v178))
            {
              v179 = (uint8_t *)swift_slowAlloc();
              v427[0] = swift_slowAlloc();
              *(_DWORD *)v179 = 136446210;
              v425 = v179 + 4;
              uint64_t v431 = v108;
              sub_1005FCBAC(v38, v108, v417, v415, (char)v39);
              sub_100F08B80();
              uint64_t v431 = CustomStringConvertible.typeDescription.getter();
              unint64_t v432 = v180;
              v181._countAndFlagsBits = 8250;
              v181._object = (void *)0xE200000000000000;
              String.append(_:)(v181);
              uint64_t v182 = swift_bridgeObjectRetain();
              sub_100EFD2C8(v182);
              sub_1005FCC80(v38, v108, v417, v415, (char)v39);
              v183._countAndFlagsBits = Array.description.getter();
              String.append(_:)(v183);
              swift_bridgeObjectRelease();
              unint64_t v108 = v418;
              swift_bridgeObjectRelease();
              sub_1005FCC80(v38, v108, v417, v415, (char)v39);
              uint64_t v431 = sub_1008FA0F0(v431, v432, v427);
              unint64_t v110 = v415;
              UnsafeMutableRawBufferPointer.copyMemory(from:)();
              swift_bridgeObjectRelease();
              sub_1005FCC80(v38, v108, v417, v110, (char)v39);
              sub_1005FCC80(v38, v108, v417, v110, (char)v39);
              _os_log_impl((void *)&_mh_execute_header, v177, v178, "FindMyNetworkId verified, but need partial re-pair: %{public}s", v179, 0xCu);
              swift_arrayDestroy();
              uint64_t v109 = v417;
              swift_slowDealloc();
              swift_slowDealloc();
            }
            else
            {
              sub_1005FCC80(v38, v108, v109, v110, (char)v39);
              sub_1005FCC80(v38, v108, v109, v110, (char)v39);
            }

            uint64_t v29 = (uint64_t)v426;
            uint64_t v431 = v108;
            swift_retain();
            PassthroughSubject.send(_:)();
            swift_release();
            sub_1005FCC80(v38, v108, v109, v110, (char)v39);
            sub_1005FCC80(v38, v108, v109, v110, (char)v39);
            uint64_t v60 = 2;
LABEL_14:
            *(void *)uint64_t v29 = v60;
LABEL_15:
            *(_OWORD *)(v29 + 8) = 0u;
            *(_OWORD *)(v29 + 24) = 0u;
            *(unsigned char *)(v29 + 40) = 11;
            char v61 = 1;
            goto LABEL_16;
          }
          sub_1005FCC80(v38, v108, v109, v110, (char)v39);
LABEL_101:
          uint64_t v60 = 2;
          uint64_t v29 = (uint64_t)v426;
          goto LABEL_14;
        }
        char v195 = (char)v39;
        v196 = Logger.logObject.getter();
        os_log_type_t v197 = static os_log_type_t.default.getter();
        if (os_log_type_enabled(v196, v197))
        {
          char v198 = (uint8_t *)swift_slowAlloc();
          *(_WORD *)char v198 = 0;
          _os_log_impl((void *)&_mh_execute_header, v196, v197, "FindMyNetworkId verification failed! Getting iCloud identifier to show privacy alert.", v198, 2u);
          swift_slowDealloc();
        }

        sub_1006E6724();
        BinaryDecodable.init(data:)();
        v246 = v424;
        unint64_t v245 = (unint64_t)v425;
        uint64_t v247 = v416;
        void *v424 = v416;
        v421(v246, v420, v245);
        id v248 = v247;
        char v249 = _dispatchPreconditionTest(_:)();
        v423(v246, v245);
        if ((v249 & 1) == 0) {
          goto LABEL_224;
        }
        *(unsigned char *)(v399 + 120) = 4;
        sub_1005FCC80(v38, v108, v109, v110, v195);
        char v61 = 0;
        goto LABEL_133;
      default:
        if (qword_101637190 != -1) {
          swift_once();
        }
        uint64_t v62 = type metadata accessor for Logger();
        sub_100010324(v62, (uint64_t)qword_10170EE70);
        unint64_t v63 = v418;
        uint64_t v64 = v417;
        unint64_t v65 = v415;
        sub_1005FCBAC(v38, v418, v417, v415, (char)v39);
        sub_1005FCBAC(v38, v63, v64, v65, (char)v39);
        id v66 = Logger.logObject.getter();
        char v67 = (char)v39;
        os_log_type_t v68 = static os_log_type_t.error.getter();
        if (os_log_type_enabled(v66, v68))
        {
          uint64_t v69 = (uint8_t *)swift_slowAlloc();
          v425 = (uint8_t *)swift_slowAlloc();
          v427[0] = (uint64_t)v425;
          *(_DWORD *)uint64_t v69 = 136315138;
          v424 = v69 + 4;
          uint64_t v431 = v38;
          unint64_t v432 = v63;
          uint64_t v433 = v64;
          unint64_t v434 = v65;
          char v435 = v67;
          sub_1005FCBAC(v38, v63, v64, v65, v67);
          uint64_t v70 = String.init<A>(describing:)();
          uint64_t v431 = sub_1008FA0F0(v70, v71, v427);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease();
          sub_1005FCC80(v38, v63, v64, v65, v67);
          sub_1005FCC80(v38, v63, v64, v65, v67);
          _os_log_impl((void *)&_mh_execute_header, v66, v68, "Received unexpected owner command %s", v69, 0xCu);
          swift_arrayDestroy();
          swift_slowDealloc();
          swift_slowDealloc();
        }
        else
        {
          sub_1005FCC80(v38, v63, v64, v65, v67);
          sub_1005FCC80(v38, v63, v64, v65, v67);
        }

        uint64_t v72 = v38;
        unint64_t v73 = v63;
        uint64_t v74 = v64;
        unint64_t v75 = v65;
        char v117 = v67;
        goto LABEL_47;
    }
  }
  else
  {
    __break(1u);
LABEL_203:
    LODWORD(v283) = HIDWORD(v35) - v35;
    if (__OFSUB__(HIDWORD(v35), v35))
    {
LABEL_239:
      __break(1u);
LABEL_240:
      __break(1u);
LABEL_241:
      __break(1u);
LABEL_242:
      __break(1u);
LABEL_243:
      __break(1u);
LABEL_244:
      __break(1u);
      goto LABEL_245;
    }
    uint64_t v283 = (int)v283;
LABEL_206:
    if (v283 != 32)
    {
LABEL_245:
      __break(1u);
      JUMPOUT(0x100F04CA8);
    }
    v387 = v424;
    unint64_t v386 = (unint64_t)v425;
    void *v424 = v27;
    v421(v387, v420, v386);
    v388 = v27;
    sub_100037A38(v35, a1);
    char v389 = _dispatchPreconditionTest(_:)();
    v423(v387, v386);
    if ((v389 & 1) == 0)
    {
LABEL_236:
      __break(1u);
LABEL_237:
      __break(1u);
LABEL_238:
      __break(1u);
      goto LABEL_239;
    }
    char v335 = 2;
  }
  *(unsigned char *)(v399 + 120) = v335;
  sub_100037A24(v35, a1);
  uint64_t v336 = v396;
  char v337 = v398;
  sub_1005FCC80(v396, v6, v36, v32, v398);
  sub_1005FCC80(v336, v6, v36, v32, v337);
  char v61 = 0;
  uint64_t v29 = (uint64_t)v426;
  uint64_t *v426 = v35;
  *(void *)(v29 + 8) = a1;
  *(void *)(v29 + 16) = 0;
  *(void *)(v29 + 24) = 0;
  goto LABEL_145;
}

void sub_100F04D34(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v70 = (uint64_t *)a1;
  uint64_t v3 = type metadata accessor for PrivacyAlertSupport.AlertInfo();
  uint64_t v67 = *(void *)(v3 - 8);
  uint64_t v4 = __chkstk_darwin(v3);
  uint64_t v66 = (uint64_t)&v61 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v68 = v5;
  __chkstk_darwin(v4);
  uint64_t v69 = (uint64_t)&v61 - v6;
  uint64_t v7 = type metadata accessor for LocalizationUtility.Table();
  uint64_t v64 = *(void *)(v7 - 8);
  uint64_t v65 = v7;
  __chkstk_darwin(v7);
  unint64_t v63 = (char *)&v61 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = type metadata accessor for MACAddress();
  uint64_t v10 = *(void *)(v9 - 8);
  uint64_t v11 = __chkstk_darwin(v9);
  uint64_t v13 = (char *)&v61 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v11);
  uint64_t v15 = (char *)&v61 - v14;
  uint64_t v16 = type metadata accessor for DispatchPredicate();
  uint64_t v17 = *(void *)(v16 - 8);
  __chkstk_darwin(v16);
  uint64_t v19 = (uint64_t *)((char *)&v61 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v20 = *(void **)(v2 + 24);
  *uint64_t v19 = (uint64_t)v20;
  (*(void (**)(uint64_t *, void, uint64_t))(v17 + 104))(v19, enum case for DispatchPredicate.onQueue(_:), v16);
  id v21 = v20;
  LOBYTE(v20) = _dispatchPreconditionTest(_:)();
  (*(void (**)(uint64_t *, uint64_t))(v17 + 8))(v19, v16);
  if ((v20 & 1) == 0)
  {
    __break(1u);
LABEL_13:
    swift_once();
    goto LABEL_6;
  }
  uint64_t v19 = v70;
  (*(void (**)(char *, uint64_t, uint64_t))(v10 + 16))(v13, (uint64_t)v70 + *(int *)(v3 + 20), v9);
  *(void *)&long long v72 = sub_100EFDB1C();
  char v22 = sub_100DCF650((uint64_t)v15, v13);
  (*(void (**)(char *, uint64_t))(v10 + 8))(v15, v9);
  sub_100EFE064(v72);
  if (v22)
  {
    uint64_t v23 = (uint64_t *)((char *)v19 + *(int *)(v3 + 32));
    uint64_t v24 = v23[1];
    if (v24)
    {
      uint64_t v66 = *v23;
      uint64_t v26 = v63;
      uint64_t v25 = v64;
      uint64_t v27 = *(void (**)(char *))(v64 + 104);
      unsigned int v62 = enum case for LocalizationUtility.Table.default(_:);
      uint64_t v28 = v65;
      v27(v63);
      swift_bridgeObjectRetain();
      uint64_t v61 = static LocalizationUtility.localizedString(key:table:)();
      uint64_t v64 = *(void *)(v25 + 8);
      ((void (*)(char *, uint64_t))v64)(v26, v28);
      sub_10000588C((uint64_t *)&unk_10163AD00);
      uint64_t v29 = v19;
      uint64_t v30 = swift_allocObject();
      *(_OWORD *)(v30 + 16) = xmmword_101347BA0;
      *(void *)(v30 + 56) = &type metadata for String;
      unint64_t v31 = sub_10000B4CC();
      *(void *)(v30 + 32) = v66;
      *(void *)(v30 + 40) = v24;
      uint64_t v33 = *v29;
      uint64_t v32 = v29[1];
      *(void *)(v30 + 96) = &type metadata for String;
      *(void *)(v30 + 104) = v31;
      *(void *)(v30 + 64) = v31;
      *(void *)(v30 + 72) = v33;
      *(void *)(v30 + 80) = v32;
    }
    else
    {
      uint64_t v26 = v63;
      uint64_t v41 = v64;
      uint64_t v27 = *(void (**)(char *))(v64 + 104);
      unsigned int v62 = enum case for LocalizationUtility.Table.default(_:);
      uint64_t v28 = v65;
      v27(v63);
      static LocalizationUtility.localizedString(key:table:)();
      uint64_t v64 = *(void *)(v41 + 8);
      ((void (*)(char *, uint64_t))v64)(v26, v28);
      sub_10000588C((uint64_t *)&unk_10163AD00);
      uint64_t v42 = swift_allocObject();
      *(_OWORD *)(v42 + 16) = xmmword_101342130;
      uint64_t v44 = *v19;
      uint64_t v43 = v19[1];
      *(void *)(v42 + 56) = &type metadata for String;
      *(void *)(v42 + 64) = sub_10000B4CC();
      *(void *)(v42 + 32) = v44;
      *(void *)(v42 + 40) = v43;
    }
    swift_bridgeObjectRetain();
    uint64_t v61 = String.init(format:_:)();
    uint64_t v66 = v45;
    swift_bridgeObjectRelease();
    uint64_t v46 = v62;
    ((void (*)(char *, void, uint64_t))v27)(v26, v62, v28);
    uint64_t v65 = static LocalizationUtility.localizedString(key:table:)();
    uint64_t v47 = v28;
    uint64_t v49 = v48;
    uint64_t v50 = v28;
    unint64_t v51 = (void (*)(char *, uint64_t))v64;
    ((void (*)(char *, uint64_t))v64)(v26, v50);
    ((void (*)(char *, uint64_t, uint64_t))v27)(v26, v46, v47);
    uint64_t v52 = static LocalizationUtility.localizedString(key:table:)();
    uint64_t v54 = v53;
    v51(v26, v47);
    ((void (*)(char *, uint64_t, uint64_t))v27)(v26, v46, v47);
    uint64_t v55 = static LocalizationUtility.localizedString(key:table:)();
    uint64_t v57 = v56;
    v51(v26, v47);
    *(void *)&long long v72 = v65;
    *((void *)&v72 + 1) = v49;
    uint64_t v73 = v61;
    uint64_t v74 = v66;
    uint64_t v75 = v52;
    uint64_t v76 = v54;
    uint64_t v77 = v55;
    uint64_t v78 = v57;
    uint64_t v79 = 0;
    uint64_t v80 = 0;
    uint64_t v81 = sub_100F056F0;
    uint64_t v82 = 0;
    type metadata accessor for SBAlertHelper();
    swift_allocObject();
    sub_1010DA238(&v72);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    sub_1000BD0E8(0);
    sub_1000BD0E8((uint64_t)sub_100F056F0);
    sub_1010DAEEC();
    type metadata accessor for Transaction();
    uint64_t v58 = v69;
    sub_100F08BD4((uint64_t)v70, v69, (uint64_t (*)(void))type metadata accessor for PrivacyAlertSupport.AlertInfo);
    unint64_t v59 = (*(unsigned __int8 *)(v67 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v67 + 80);
    uint64_t v60 = swift_allocObject();
    sub_100F08F68(v58, v60 + v59, (uint64_t (*)(void))type metadata accessor for PrivacyAlertSupport.AlertInfo);
    static Transaction.asyncTask(name:block:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    sub_1000A1534(0);
    sub_1000A1534((uint64_t)sub_100F056F0);
    swift_release();
    swift_release();
    return;
  }
  if (qword_101637190 != -1) {
    goto LABEL_13;
  }
LABEL_6:
  uint64_t v34 = type metadata accessor for Logger();
  sub_100010324(v34, (uint64_t)qword_10170EE70);
  uint64_t v35 = v66;
  sub_100F08BD4((uint64_t)v19, v66, (uint64_t (*)(void))type metadata accessor for PrivacyAlertSupport.AlertInfo);
  uint64_t v36 = Logger.logObject.getter();
  os_log_type_t v37 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v36, v37))
  {
    uint64_t v38 = (uint8_t *)swift_slowAlloc();
    *(void *)&long long v72 = swift_slowAlloc();
    *(_DWORD *)uint64_t v38 = 136446210;
    sub_100F09184((unint64_t *)&qword_101649EE0, (void (*)(uint64_t))&type metadata accessor for MACAddress);
    uint64_t v39 = dispatch thunk of CustomStringConvertible.description.getter();
    uint64_t v71 = sub_1008FA0F0(v39, v40, (uint64_t *)&v72);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    sub_100F08C3C(v35, (uint64_t (*)(void))type metadata accessor for PrivacyAlertSupport.AlertInfo);
    _os_log_impl((void *)&_mh_execute_header, v36, v37, "Privacy alert has already been shown for %{public}s.", v38, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    sub_100F08C3C(v35, (uint64_t (*)(void))type metadata accessor for PrivacyAlertSupport.AlertInfo);
  }
}

uint64_t sub_100F056F0()
{
  uint64_t v0 = sub_10000588C(&qword_101649E40);
  __chkstk_darwin(v0 - 8);
  uint64_t v2 = (char *)&v14 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v3 = type metadata accessor for URL();
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  uint64_t v6 = (char *)&v14 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  URL.init(string:)();
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v4 + 48))(v2, 1, v3) == 1) {
    return sub_10001DAB4((uint64_t)v2, &qword_101649E40);
  }
  (*(void (**)(char *, char *, uint64_t))(v4 + 32))(v6, v2, v3);
  id v8 = [self defaultWorkspace];
  if (v8)
  {
    uint64_t v10 = v8;
    URL._bridgeToObjectiveC()(v9);
    uint64_t v12 = v11;
    sub_10092CEEC((uint64_t)_swiftEmptyArrayStorage);
    Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    [v10 openSensitiveURL:v12 withOptions:isa];
  }
  return (*(uint64_t (**)(char *, uint64_t))(v4 + 8))(v6, v3);
}

uint64_t sub_100F0590C(uint64_t a1)
{
  *(void *)(v1 + 16) = a1;
  return _swift_task_switch(sub_100F0592C, 0, 0);
}

uint64_t sub_100F0592C()
{
  uint64_t v1 = v0[2];
  type metadata accessor for AnalyticsEvent(0);
  uint64_t v2 = (char *)swift_allocObject();
  v0[3] = v2;
  swift_defaultActor_initialize();
  *((void *)v2 + 14) = sub_10092D664((uint64_t)_swiftEmptyArrayStorage);
  UUID.init()();
  uint64_t v3 = &v2[OBJC_IVAR____TtC12searchpartyd14AnalyticsEvent_startTime];
  uint64_t v4 = type metadata accessor for DispatchTime();
  uint64_t v5 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 56);
  v5(v3, 1, 1, v4);
  v5(&v2[OBJC_IVAR____TtC12searchpartyd14AnalyticsEvent_endTime], 1, 1, v4);
  *((void *)v2 + 15) = 0xD000000000000034;
  *((void *)v2 + 16) = 0x800000010141A840;
  uint64_t v6 = swift_task_alloc();
  v0[4] = v6;
  *(void *)(v6 + 16) = v1;
  return _swift_task_switch(sub_100F05A8C, v2, 0);
}

uint64_t sub_100F05A8C()
{
  sub_10118B228((uint64_t)sub_100F08B78);
  swift_task_dealloc();
  return _swift_task_switch(sub_100788FFC, 0, 0);
}

unint64_t sub_100F05B44(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for Endianness();
  __chkstk_darwin(v2 - 8);
  uint64_t v3 = (int *)type metadata accessor for BluetoothManagerDevice();
  __chkstk_darwin(v3);
  uint64_t v5 = (char *)v21 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = (int *)type metadata accessor for PrivacyAlertSupport.AlertInfo();
  sub_100F08BD4(a1 + v6[6], (uint64_t)v5, (uint64_t (*)(void))type metadata accessor for BluetoothManagerDevice);
  uint64_t v7 = &v5[v3[9]];
  unint64_t v8 = *((void *)v7 + 1);
  if (v8 >> 60 == 15)
  {
    int v22 = *(_DWORD *)&v5[v3[6]];
    uint64_t v23 = dispatch thunk of CustomStringConvertible.description.getter();
    uint64_t v24 = v9;
    v10._countAndFlagsBits = 45;
    v10._object = (void *)0xE100000000000000;
    String.append(_:)(v10);
    int v22 = *(_DWORD *)&v5[v3[8]];
    v11._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v11);
    swift_bridgeObjectRelease();
    BOOL v12 = 0;
  }
  else
  {
    uint64_t v13 = *(void *)v7;
    sub_1000361E0(*(void *)v7, *((void *)v7 + 1));
    v21[1] = sub_1002AA678(v13, v8);
    uint64_t v14 = sub_1002AA484(v13, v8);
    sub_1002AA5D4(v13, v8);
    static Endianness.current.getter();
    sub_100091A80();
    FixedWidthInteger.init(data:ofEndianness:)();
    if (BYTE4(v23)) {
      uint64_t v15 = 0;
    }
    else {
      uint64_t v15 = (int)v23;
    }
    BOOL v16 = sub_100DF1520(v14, v15);
    sub_100037A24(v13, v8);
    BOOL v12 = v16;
  }
  sub_10000588C(&qword_10163C5D0);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_10134BF90;
  *(void *)(inited + 32) = 0xD000000000000017;
  *(void *)(inited + 40) = 0x800000010141A880;
  *(void *)(inited + 48) = (*(unsigned char *)(a1 + v6[7]) & 1) == 0;
  *(unsigned char *)(inited + 56) = 1;
  strcpy((char *)(inited + 64), "isFamilyBeacon");
  *(unsigned char *)(inited + 79) = -18;
  *(void *)(inited + 80) = *(void *)(a1 + v6[8] + 8) != 0;
  *(unsigned char *)(inited + 88) = 1;
  *(void *)(inited + 96) = 0x7954656369766564;
  *(void *)(inited + 104) = 0xEA00000000006570;
  NSString v18 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  *(void *)(inited + 112) = v18;
  *(unsigned char *)(inited + 120) = 0;
  *(void *)(inited + 128) = 0xD000000000000015;
  *(void *)(inited + 136) = 0x80000001014055D0;
  *(void *)(inited + 144) = v12;
  *(unsigned char *)(inited + 152) = 1;
  unint64_t v19 = sub_10092E03C(inited);
  sub_100F08C3C((uint64_t)v5, (uint64_t (*)(void))type metadata accessor for BluetoothManagerDevice);
  return v19;
}

uint64_t sub_100F05EB8(uint64_t a1, unint64_t a2)
{
  uint64_t v3 = v2;
  uint64_t v6 = type metadata accessor for DispatchPredicate();
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  uint64_t v9 = (void *)((char *)v24 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0));
  Swift::String v10 = *(void **)(v3 + 24);
  *uint64_t v9 = v10;
  (*(void (**)(void *, void, uint64_t))(v7 + 104))(v9, enum case for DispatchPredicate.onQueue(_:), v6);
  id v11 = v10;
  LOBYTE(v10) = _dispatchPreconditionTest(_:)();
  (*(void (**)(void *, uint64_t))(v7 + 8))(v9, v6);
  if (v10)
  {
    if (qword_101637190 == -1) {
      goto LABEL_3;
    }
  }
  else
  {
    __break(1u);
  }
  swift_once();
LABEL_3:
  uint64_t v12 = type metadata accessor for Logger();
  sub_100010324(v12, (uint64_t)qword_10170EE70);
  sub_1000361E0(a1, a2);
  uint64_t v13 = Logger.logObject.getter();
  os_log_type_t v14 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v13, v14))
  {
    uint64_t v15 = (uint8_t *)swift_slowAlloc();
    *(_DWORD *)uint64_t v15 = 134217984;
    BOOL v16 = v15;
    uint64_t v17 = 0;
    switch(a2 >> 62)
    {
      case 1uLL:
        LODWORD(v17) = HIDWORD(a1) - a1;
        if (__OFSUB__(HIDWORD(a1), a1))
        {
          __break(1u);
LABEL_15:
          __break(1u);
          JUMPOUT(0x100F061BCLL);
        }
        uint64_t v17 = (int)v17;
LABEL_10:
        v24[1] = v17;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        sub_10001CFB8(a1, a2);
        _os_log_impl((void *)&_mh_execute_header, v13, v14, "didNotify data length %ld", v16, 0xCu);
        swift_slowDealloc();
        break;
      case 2uLL:
        uint64_t v19 = *(void *)(a1 + 16);
        uint64_t v18 = *(void *)(a1 + 24);
        BOOL v20 = __OFSUB__(v18, v19);
        uint64_t v17 = v18 - v19;
        if (!v20) {
          goto LABEL_10;
        }
        goto LABEL_15;
      case 3uLL:
        goto LABEL_10;
      default:
        uint64_t v17 = BYTE6(a2);
        goto LABEL_10;
    }
  }
  else
  {
    sub_10001CFB8(a1, a2);
  }

  uint64_t v21 = swift_allocObject();
  swift_weakInit();
  int v22 = (void *)swift_allocObject();
  void v22[2] = v21;
  uint64_t v22[3] = a1;
  v22[4] = a2;
  sub_10000588C(&qword_10163C628);
  swift_allocObject();
  sub_1000361E0(a1, a2);
  return Future.init(_:)();
}

uint64_t sub_100F061CC(void (*a1)(long long *), uint64_t a2, uint64_t a3, uint64_t a4, unint64_t a5)
{
  unint64_t v103 = a1;
  uint64_t v8 = type metadata accessor for BinaryDecodingError();
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  id v11 = (char *)&v87 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = type metadata accessor for BinaryDecoder();
  uint64_t v92 = *(void *)(v12 - 8);
  __chkstk_darwin(v12);
  os_log_type_t v93 = (char *)&v87 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = sub_10000588C(&qword_10163C630);
  __chkstk_darwin(v14 - 8);
  uint64_t v97 = (char *)&v87 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = type metadata accessor for Bit();
  uint64_t v102 = *(void *)(v16 - 8);
  uint64_t v17 = __chkstk_darwin(v16);
  uint64_t v95 = (char *)&v87 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v17);
  os_log_type_t v101 = (char *)&v87 - v19;
  swift_beginAccess();
  uint64_t Strong = swift_weakLoadStrong();
  if (!Strong)
  {
    unint64_t v109 = 0;
    long long v107 = 0u;
    long long v108 = 0u;
    LOBYTE(v110) = 11;
    char v111 = 1;
    v103(&v107);
    return sub_10001DAB4((uint64_t)&v107, &qword_10163C638);
  }
  uint64_t v21 = Strong;
  uint64_t v90 = v12;
  uint64_t v98 = v16;
  uint64_t v99 = v11;
  uint64_t v100 = v9;
  uint64_t v22 = *(void *)(Strong + 80);
  unint64_t v23 = *(void *)(v21 + 88);
  if (v23 >> 60 == 15) {
    uint64_t v24 = 0;
  }
  else {
    uint64_t v24 = v22;
  }
  unint64_t v25 = 0xC000000000000000;
  if (v23 >> 60 != 15) {
    unint64_t v25 = *(void *)(v21 + 88);
  }
  uint64_t v105 = v24;
  unint64_t v106 = v25;
  sub_100037A38(v22, v23);
  sub_1000361E0(a4, a5);
  sub_100EFD6B8(1, a4, a5, (uint64_t *)&v107);
  long long v26 = v107;
  Data.append(_:)();
  sub_10001CFB8(v26, *((unint64_t *)&v26 + 1));
  uint64_t v27 = v105;
  unint64_t v28 = v106;
  uint64_t v29 = *(void *)(v21 + 80);
  unint64_t v30 = *(void *)(v21 + 88);
  *(void *)(v21 + 80) = v105;
  *(void *)(v21 + 88) = v28;
  sub_1000361E0(v27, v28);
  sub_100037A24(v29, v30);
  if (qword_101637190 != -1) {
    swift_once();
  }
  uint64_t v31 = type metadata accessor for Logger();
  uint64_t v96 = sub_100010324(v31, (uint64_t)qword_10170EE70);
  uint64_t v32 = Logger.logObject.getter();
  os_log_type_t v33 = static os_log_type_t.info.getter();
  BOOL v34 = os_log_type_enabled(v32, v33);
  uint64_t v94 = a2;
  if (v34)
  {
    uint64_t v35 = (uint8_t *)swift_slowAlloc();
    uint64_t v89 = swift_slowAlloc();
    *(void *)&long long v107 = v89;
    unint64_t v88 = v35;
    *(_DWORD *)uint64_t v35 = 136315138;
    uint64_t v87 = v35 + 4;
    swift_beginAccess();
    uint64_t v36 = a4;
    uint64_t v37 = v21;
    unint64_t v38 = a5;
    uint64_t v39 = v105;
    unint64_t v40 = v106;
    sub_1000361E0(v105, v106);
    uint64_t v41 = Data.description.getter();
    uint64_t v91 = v8;
    unint64_t v43 = v42;
    uint64_t v44 = v39;
    uint64_t v21 = v37;
    a4 = v36;
    unint64_t v45 = v40;
    a5 = v38;
    sub_10001CFB8(v44, v45);
    uint64_t v104 = sub_1008FA0F0(v41, v43, (uint64_t *)&v107);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    uint64_t v8 = v91;
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v32, v33, "localReadBuffer %s", v88, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }

  uint64_t v46 = v100;
  uint64_t v47 = v99;
  uint64_t v48 = v102;
  sub_1000361E0(a4, a5);
  __int16 v49 = sub_10115B26C(a4, a5);
  sub_10001CFB8(a4, a5);
  uint64_t v50 = v98;
  unint64_t v51 = v101;
  if ((v49 & 0x100) != 0) {
    goto LABEL_18;
  }
  LOBYTE(v107) = v49;
  sub_10006145C();
  uint64_t v52 = FixedWidthInteger.bits()();
  if (*(void *)(v52 + 16))
  {
    uint64_t v53 = (uint64_t)v97;
    (*(void (**)(char *, unint64_t, uint64_t))(v48 + 16))(v97, v52 + ((*(unsigned __int8 *)(v48 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v48 + 80)), v50);
    uint64_t v54 = 0;
  }
  else
  {
    uint64_t v54 = 1;
    uint64_t v53 = (uint64_t)v97;
  }
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v48 + 56))(v53, v54, 1, v50);
  swift_bridgeObjectRelease();
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v48 + 48))(v53, 1, v50) == 1)
  {
    sub_10001DAB4(v53, &qword_10163C630);
    uint64_t v46 = v100;
LABEL_18:
    sub_100F087D4();
    uint64_t v55 = swift_allocError();
    *uint64_t v56 = 1;
    swift_willThrow();
    sub_10001CFB8(v105, v106);
    goto LABEL_22;
  }
  uint64_t v91 = v8;
  (*(void (**)(char *, uint64_t, uint64_t))(v48 + 32))(v51, v53, v50);
  uint64_t v57 = v95;
  (*(void (**)(char *, void, uint64_t))(v48 + 104))(v95, enum case for Bit.one(_:), v50);
  sub_100F09184((unint64_t *)&qword_10163B220, (void (*)(uint64_t))&type metadata accessor for Bit);
  dispatch thunk of RawRepresentable.rawValue.getter();
  dispatch thunk of RawRepresentable.rawValue.getter();
  int v58 = v107;
  int v59 = v104;
  unsigned int v62 = *(char **)(v48 + 8);
  uint64_t v60 = v48 + 8;
  uint64_t v61 = v62;
  ((void (*)(char *, uint64_t))v62)(v57, v50);
  if (v58 == v59)
  {
    uint64_t v97 = v61;
    uint64_t v102 = v60;
    unint64_t v63 = v93;
    BinaryDecoder.init()();
    swift_beginAccess();
    uint64_t v64 = v105;
    unint64_t v65 = v106;
    sub_1000361E0(v105, v106);
    unint64_t v66 = sub_100F08828();
    BinaryDecoder.decode<A>(_:from:)();
    sub_10001CFB8(v64, v65);
    long long v80 = v107;
    long long v81 = v108;
    char v82 = v109;
    uint64_t v83 = *(void *)(v21 + 80);
    unint64_t v84 = *(void *)(v21 + 88);
    *(_OWORD *)(v21 + 80) = xmmword_101347BB0;
    sub_100037A24(v83, v84);
    *((void *)&v108 + 1) = &type metadata for AccessoryOwnerCommand;
    unint64_t v109 = v66;
    unint64_t v110 = sub_100DB4C58();
    uint64_t v85 = swift_allocObject();
    *(void *)&long long v107 = v85;
    *(_OWORD *)(v85 + 16) = v80;
    *(_OWORD *)(v85 + 32) = v81;
    *(unsigned char *)(v85 + 48) = v82;
    char v111 = 0;
    sub_1005FCBAC(v80, *((unint64_t *)&v80 + 1), v81, *((unint64_t *)&v81 + 1), v82);
    v103(&v107);
    swift_release();
    sub_1005FCC80(v80, *((unint64_t *)&v80 + 1), v81, *((unint64_t *)&v81 + 1), v82);
    (*(void (**)(char *, uint64_t))(v92 + 8))(v63, v90);
    ((void (*)(char *, uint64_t))v97)(v101, v98);
    sub_10001DAB4((uint64_t)&v107, &qword_10163C638);
    return sub_10001CFB8(v105, v106);
  }
  sub_100F09184((unint64_t *)&qword_101639630, (void (*)(uint64_t))&type metadata accessor for BinaryDecodingError);
  uint64_t v67 = v91;
  uint64_t v55 = swift_allocError();
  uint64_t v46 = v100;
  (*(void (**)(uint64_t, void, uint64_t))(v100 + 104))(v68, enum case for BinaryDecodingError.insufficientData(_:), v67);
  swift_willThrow();
  ((void (*)(char *, uint64_t))v61)(v101, v50);
  uint64_t v8 = v67;
  sub_10001CFB8(v105, v106);
  uint64_t v47 = v99;
LABEL_22:
  *(void *)&long long v107 = v55;
  swift_errorRetain();
  sub_10000588C(&qword_101638D40);
  if (!swift_dynamicCast())
  {
LABEL_27:
    swift_errorRelease();
    sub_1000361E0(a4, a5);
    sub_1000361E0(a4, a5);
    long long v72 = Logger.logObject.getter();
    os_log_type_t v73 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v72, v73))
    {
      uint64_t v102 = v21;
      uint64_t v74 = (uint8_t *)swift_slowAlloc();
      *(void *)&long long v107 = swift_slowAlloc();
      *(_DWORD *)uint64_t v74 = 136315138;
      os_log_type_t v101 = (char *)(v74 + 4);
      sub_1000361E0(a4, a5);
      uint64_t v75 = Data.description.getter();
      unint64_t v77 = v76;
      sub_10001CFB8(a4, a5);
      uint64_t v105 = sub_1008FA0F0(v75, v77, (uint64_t *)&v107);
      uint64_t v21 = v102;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      sub_10001CFB8(a4, a5);
      sub_10001CFB8(a4, a5);
      _os_log_impl((void *)&_mh_execute_header, v72, v73, "Failed to decode data %s", v74, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      sub_10001CFB8(a4, a5);
      sub_10001CFB8(a4, a5);
    }

    uint64_t v78 = *(void *)(v21 + 80);
    unint64_t v79 = *(void *)(v21 + 88);
    *(_OWORD *)(v21 + 80) = xmmword_101347BB0;
    sub_100037A24(v78, v79);
    *(void *)&long long v107 = v55;
    LOBYTE(v110) = 10;
    char v111 = 1;
    swift_errorRetain();
    v103(&v107);
    swift_release();
    swift_errorRelease();
    return sub_10001DAB4((uint64_t)&v107, &qword_10163C638);
  }
  if ((*(unsigned int (**)(char *, uint64_t))(v46 + 88))(v47, v8) != enum case for BinaryDecodingError.insufficientData(_:))
  {
    (*(void (**)(char *, uint64_t))(v46 + 8))(v47, v8);
    goto LABEL_27;
  }
  swift_errorRelease();
  uint64_t v69 = Logger.logObject.getter();
  os_log_type_t v70 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v69, v70))
  {
    uint64_t v71 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v71 = 0;
    _os_log_impl((void *)&_mh_execute_header, v69, v70, "insufficientData. Keep reading...", v71, 2u);
    swift_slowDealloc();
    swift_release();
  }
  else
  {

    swift_release();
  }
  return swift_errorRelease();
}

uint64_t sub_100F06F30(long long *a1, uint64_t a2)
{
  uint64_t v5 = type metadata accessor for DispatchPredicate();
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v8 = (uint64_t *)((char *)&v14 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v9 = *(void **)(v2 + 24);
  *uint64_t v8 = v9;
  (*(void (**)(void *, void, uint64_t))(v6 + 104))(v8, enum case for DispatchPredicate.onQueue(_:), v5);
  id v10 = v9;
  LOBYTE(v9) = _dispatchPreconditionTest(_:)();
  uint64_t result = (*(uint64_t (**)(void *, uint64_t))(v6 + 8))(v8, v5);
  if (v9)
  {
    uint64_t v12 = swift_allocObject();
    swift_weakInit();
    uint64_t v13 = swift_allocObject();
    *(void *)(v13 + 16) = v12;
    sub_1005FCF90(a1, v13 + 24);
    *(void *)(v13 + 64) = a2;
    sub_10000588C(&qword_101657AE8);
    swift_allocObject();
    sub_100F08D80((uint64_t)a1, (void (*)(void, void, void, void, void))sub_1005FCBAC);
    swift_retain();
    return Future.init(_:)();
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_100F070F8(void (*a1)(_OWORD *), uint64_t a2, uint64_t a3, long long *a4, char *a5)
{
  uint64_t v9 = type metadata accessor for BinaryEncoder();
  uint64_t v10 = *(void *)(v9 - 8);
  __chkstk_darwin(v9);
  uint64_t v12 = (char *)v21 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_beginAccess();
  uint64_t Strong = swift_weakLoadStrong();
  if (Strong)
  {
    uint64_t v14 = *(void *)(Strong + 56);
    v21[3] = a1;
    *(void *)(Strong + 56) = a1;
    *(void *)(Strong + 64) = a2;
    swift_retain();
    sub_1000A1534(v14);
    BinaryEncoder.init()();
    sub_1005FCF90(a4, (uint64_t)v22);
    sub_100DB4C58();
    uint64_t v15 = BinaryEncoder.encode<A>(_:)();
    unint64_t v17 = v16;
    uint64_t v18 = Data.chunked(into:)();
    uint64_t v19 = sub_1001554FC(v18);
    swift_bridgeObjectRelease();
    swift_beginAccess();
    sub_100442E40((uint64_t)v19);
    swift_endAccess();
    sub_100F07500(a5);
    sub_10001CFB8(v15, v17);
    swift_release();
    return (*(uint64_t (**)(char *, uint64_t))(v10 + 8))(v12, v9);
  }
  else
  {
    uint64_t v23 = 0;
    memset(v22, 0, sizeof(v22));
    __int16 v24 = 267;
    a1(v22);
    return sub_10001DAB4((uint64_t)v22, &qword_10163C5F8);
  }
}

uint64_t sub_100F07500(char *a1)
{
  uint64_t v2 = v1;
  uint64_t v69 = a1;
  uint64_t v3 = type metadata accessor for DispatchTime();
  uint64_t v4 = *(NSObject **)(v3 - 8);
  uint64_t v5 = __chkstk_darwin(v3);
  uint64_t v7 = (char *)v63 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5);
  uint64_t v67 = (char *)v63 - v8;
  uint64_t v9 = type metadata accessor for DispatchPredicate();
  uint64_t v10 = *(void *)(v9 - 8);
  __chkstk_darwin(v9);
  uint64_t v12 = (void *)((char *)v63 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v13 = (void *)v2[3];
  *uint64_t v12 = v13;
  (*(void (**)(void *, void, uint64_t))(v10 + 104))(v12, enum case for DispatchPredicate.onQueue(_:), v9);
  id v14 = v13;
  LOBYTE(v13) = _dispatchPreconditionTest(_:)();
  (*(void (**)(void *, uint64_t))(v10 + 8))(v12, v9);
  if ((v13 & 1) == 0)
  {
    __break(1u);
    goto LABEL_29;
  }
  uint64_t v15 = v2 + 9;
  uint64_t result = swift_beginAccess();
  if (*(void *)(v2[9] + 16))
  {
    swift_beginAccess();
    uint64_t v17 = *v15;
    if (*(void *)(*v15 + 16))
    {
      uint64_t v64 = v7;
      uint64_t v66 = v3;
      uint64_t v7 = *(char **)(v17 + 32);
      unint64_t v68 = *(void *)(v17 + 40);
      sub_1000361E0((uint64_t)v7, v68);
      sub_100A29D94(0, 1);
      swift_endAccess();
      if (qword_101637190 == -1) {
        goto LABEL_5;
      }
      goto LABEL_30;
    }
LABEL_29:
    __break(1u);
LABEL_30:
    swift_once();
LABEL_5:
    unint64_t v65 = v4;
    uint64_t v18 = type metadata accessor for Logger();
    uint64_t v19 = sub_100010324(v18, (uint64_t)qword_10170EE70);
    unint64_t v20 = v68;
    sub_1000361E0((uint64_t)v7, v68);
    swift_retain();
    sub_1000361E0((uint64_t)v7, v20);
    swift_retain();
    v63[1] = v19;
    uint64_t v21 = Logger.logObject.getter();
    os_log_type_t v22 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v21, v22))
    {
      uint64_t v23 = swift_slowAlloc();
      v74[0] = swift_slowAlloc();
      *(_DWORD *)uint64_t v23 = 136315394;
      unint64_t v24 = v68;
      uint64_t v25 = Data.hexString.getter();
      v63[0] = v2;
      v71[0] = sub_1008FA0F0(v25, v26, v74);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      sub_10001CFB8((uint64_t)v7, v24);
      sub_10001CFB8((uint64_t)v7, v24);
      *(_WORD *)(v23 + 12) = 2082;
      swift_retain();
      uint64_t v27 = sub_100A6DA6C();
      unint64_t v29 = v28;
      swift_release();
      v71[0] = sub_1008FA0F0(v27, v29, v74);
      uint64_t v2 = (void *)v63[0];
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_release_n();
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v21, v22, "processQueuedUpdates: writing %s. Characteristic %{public}s.", (uint8_t *)v23, 0x16u);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      unint64_t v31 = v68;
      sub_10001CFB8((uint64_t)v7, v68);
      sub_10001CFB8((uint64_t)v7, v31);

      swift_release_n();
    }
    uint64_t v32 = swift_allocObject();
    *(_OWORD *)(v32 + 16) = 0u;
    uint64_t v33 = v32 + 16;
    *(_OWORD *)(v32 + 32) = 0u;
    *(void *)(v32 + 48) = 0;
    *(_WORD *)(v32 + 56) = 267;
    BOOL v34 = dispatch_group_create();
    dispatch_group_enter(v34);
    v74[0] = sub_100A6C94C((uint64_t)v7, v68);
    uint64_t v35 = swift_allocObject();
    *(void *)(v35 + 16) = v32;
    *(void *)(v35 + 24) = v34;
    v63[0] = v32;
    swift_retain();
    uint64_t v36 = v34;
    sub_10000588C(&qword_10163C5E8);
    sub_100062734(&qword_10163C5F0, &qword_10163C5E8);
    Publisher.oneshot(_:)();
    swift_release();
    swift_release();
    uint64_t v37 = v64;
    static DispatchTime.now()();
    unint64_t v38 = v67;
    + infix(_:_:)();
    Class isa = (void (*)(char *, uint64_t))v65[1].isa;
    uint64_t v40 = v66;
    isa(v37, v66);
    unint64_t v65 = v36;
    OS_dispatch_group.wait(timeout:)();
    isa(v38, v40);
    if (static DispatchTimeoutResult.== infix(_:_:)())
    {
      uint64_t v41 = Logger.logObject.getter();
      os_log_type_t v42 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v41, v42))
      {
        unint64_t v43 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)unint64_t v43 = 0;
        _os_log_impl((void *)&_mh_execute_header, v41, v42, "Timed out waiting for writeFuture", v43, 2u);
        swift_slowDealloc();
      }
    }
    swift_beginAccess();
    sub_10001D074(v33, (uint64_t)v74, &qword_10163C5F8);
    if (v75)
    {
      sub_10006105C((uint64_t)v74, (uint64_t)v73);
      sub_1000610B8((uint64_t)v73, (uint64_t)v71);
      uint64_t v44 = Logger.logObject.getter();
      os_log_type_t v45 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v44, v45))
      {
        uint64_t v46 = (uint8_t *)swift_slowAlloc();
        uint64_t v47 = swift_slowAlloc();
        uint64_t v69 = v7;
        uint64_t v48 = v2;
        __int16 v49 = (void *)v47;
        *(_DWORD *)uint64_t v46 = 138543362;
        sub_100061234();
        swift_allocError();
        sub_1000610B8((uint64_t)v71, v50);
        uint64_t v51 = _swift_stdlib_bridgeErrorToNSError();
        uint64_t v70 = v51;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        *__int16 v49 = v51;
        sub_100061288((uint64_t)v71);
        _os_log_impl((void *)&_mh_execute_header, v44, v45, "writeFuture error: %{public}@", v46, 0xCu);
        sub_10000588C((uint64_t *)&unk_101638EA0);
        swift_arrayDestroy();
        uint64_t v2 = v48;
        uint64_t v7 = v69;
        swift_slowDealloc();
        swift_slowDealloc();
      }
      else
      {
        sub_100061288((uint64_t)v71);
      }

      uint64_t v60 = (void (*)(uint64_t *))v2[7];
      if (v60)
      {
        sub_100061234();
        uint64_t v61 = swift_allocError();
        sub_1000610B8((uint64_t)v73, v62);
        v71[0] = v61;
        __int16 v72 = 256;
        swift_retain();
        v60(v71);
        sub_1000A1534((uint64_t)v60);

        sub_10001CFB8((uint64_t)v7, v68);
        sub_10001DAB4((uint64_t)v71, &qword_10163C5F8);
        sub_100061288((uint64_t)v73);
        return swift_release();
      }
      sub_100061288((uint64_t)v73);
    }
    else
    {
      swift_retain_n();
      uint64_t v52 = Logger.logObject.getter();
      os_log_type_t v53 = static os_log_type_t.info.getter();
      if (os_log_type_enabled(v52, v53))
      {
        uint64_t v54 = swift_slowAlloc();
        v71[0] = swift_slowAlloc();
        *(_DWORD *)uint64_t v54 = 134218242;
        v73[0] = *(void *)(v2[9] + 16);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        *(_WORD *)(v54 + 12) = 2080;
        uint64_t v67 = (char *)(v54 + 14);
        swift_bridgeObjectRetain();
        uint64_t v55 = v7;
        uint64_t v56 = Array.description.getter();
        unint64_t v58 = v57;
        swift_bridgeObjectRelease();
        uint64_t v59 = v56;
        uint64_t v7 = v55;
        v73[0] = sub_1008FA0F0(v59, v58, v71);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_release_n();
        swift_bridgeObjectRelease();
        _os_log_impl((void *)&_mh_execute_header, v52, v53, "writeFuture success. writeQueue [%ld] %s", (uint8_t *)v54, 0x16u);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
      }
      else
      {

        swift_release_n();
      }
      sub_100F07500(v69);
    }

    sub_10001CFB8((uint64_t)v7, v68);
    return swift_release();
  }
  unint64_t v30 = (void (*)(uint64_t *))v2[7];
  if (v30)
  {
    char v75 = 0;
    swift_retain();
    v30(v74);
    sub_1000A1534((uint64_t)v30);
    return sub_10001DAB4((uint64_t)v74, &qword_10163C5F8);
  }
  return result;
}

uint64_t sub_100F07FD8()
{
  swift_release();

  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  sub_1000A1534(*(void *)(v0 + 56));
  swift_bridgeObjectRelease();
  sub_100037A24(*(void *)(v0 + 80), *(void *)(v0 + 88));
  swift_release();
  swift_release();
  return v0;
}

uint64_t sub_100F08040()
{
  sub_100F07FD8();

  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for PrivacyAlertSupport()
{
  return self;
}

unsigned char *storeEnumTagSinglePayload for PrivacyAlertSupport.PrivacyAlertState(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 6 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 6) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFA) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xF9)
  {
    unsigned int v6 = ((a2 - 250) >> 8) + 1;
    *uint64_t result = a2 + 6;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x100F08164);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 6;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for PrivacyAlertSupport.PrivacyAlertState()
{
  return &type metadata for PrivacyAlertSupport.PrivacyAlertState;
}

uint64_t *initializeBufferWithCopyOfBuffer for PrivacyAlertSupport.PairingAction(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  if ((unint64_t)*a2 >= 0xFFFFFFFF) {
    uint64_t v3 = swift_bridgeObjectRetain();
  }
  *a1 = v3;
  return a1;
}

unint64_t destroy for PrivacyAlertSupport.PairingAction(unint64_t *a1)
{
  unint64_t result = *a1;
  if (result >= 0xFFFFFFFF) {
    return swift_bridgeObjectRelease();
  }
  return result;
}

unint64_t *assignWithCopy for PrivacyAlertSupport.PairingAction(unint64_t *a1, unint64_t *a2)
{
  unint64_t v3 = *a1;
  unint64_t v4 = *a2;
  if (v3 < 0xFFFFFFFF)
  {
    *a1 = v4;
    if (v4 >= 0xFFFFFFFF) {
      swift_bridgeObjectRetain();
    }
  }
  else if (v4 < 0xFFFFFFFF)
  {
    swift_bridgeObjectRelease();
    *a1 = *a2;
  }
  else
  {
    *a1 = v4;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
  }
  return a1;
}

unint64_t *assignWithTake for PrivacyAlertSupport.PairingAction(unint64_t *a1, unint64_t *a2)
{
  unint64_t v3 = *a2;
  if (*a1 < 0xFFFFFFFF) {
    goto LABEL_5;
  }
  if (v3 < 0xFFFFFFFF)
  {
    swift_bridgeObjectRelease();
LABEL_5:
    *a1 = v3;
    return a1;
  }
  *a1 = v3;
  swift_bridgeObjectRelease();
  return a1;
}

ValueMetadata *type metadata accessor for PrivacyAlertSupport.PairingAction()
{
  return &type metadata for PrivacyAlertSupport.PairingAction;
}

unint64_t sub_100F082F0()
{
  unint64_t result = qword_1016630B8;
  if (!qword_1016630B8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1016630B8);
  }
  return result;
}

uint64_t sub_100F08344(uint64_t a1)
{
  if ((unint64_t)(a1 + 1) < 7) {
    return a1 + 1;
  }
  else {
    return 7;
  }
}

unint64_t sub_100F08358()
{
  unint64_t result = qword_1016630C0;
  if (!qword_1016630C0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1016630C0);
  }
  return result;
}

uint64_t sub_100F083AC()
{
  if (*(unsigned char *)(v0 + 57) == 1)
  {
    uint64_t v1 = (id *)(v0 + 16);
    switch(*(unsigned char *)(v0 + 56))
    {
      case 0:
      case 7:
      case 0xA:
        goto LABEL_8;
      case 1:
        _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)v1);
        break;
      case 2:

        goto LABEL_8;
      case 3:

        break;
      case 4:
      case 5:
      case 6:
        swift_release();
        break;
      case 8:
        swift_release();
LABEL_8:
        swift_errorRelease();
        break;
      case 9:
        swift_bridgeObjectRelease();
        break;
      default:
        break;
    }
  }

  return _swift_deallocObject(v0, 58, 7);
}

uint64_t sub_100F08494()
{
  swift_release();

  return _swift_deallocObject(v0, 32, 7);
}

uint64_t sub_100F084D4()
{
  swift_weakDestroy();

  return _swift_deallocObject(v0, 24, 7);
}

uint64_t sub_100F0850C()
{
  swift_release();
  sub_1005FCC80(*(void *)(v0 + 24), *(void *)(v0 + 32), *(void *)(v0 + 40), *(void *)(v0 + 48), *(unsigned char *)(v0 + 56));
  swift_release();

  return _swift_deallocObject(v0, 72, 7);
}

uint64_t sub_100F0855C(void (*a1)(_OWORD *), uint64_t a2)
{
  return sub_100F070F8(a1, a2, *(void *)(v2 + 16), (long long *)(v2 + 24), *(char **)(v2 + 64));
}

uint64_t sub_100F0856C(uint64_t a1)
{
  uint64_t v18 = *v1;
  uint64_t v19 = a1;
  uint64_t v2 = type metadata accessor for DispatchPredicate();
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  uint64_t v5 = (uint64_t *)((char *)&v17 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0));
  unsigned int v6 = (void *)v1[3];
  *uint64_t v5 = v6;
  uint64_t v7 = enum case for DispatchPredicate.onQueue(_:);
  uint64_t v8 = *(void (**)(void *, uint64_t, uint64_t))(v3 + 104);
  v8(v5, enum case for DispatchPredicate.onQueue(_:), v2);
  id v9 = v6;
  char v10 = _dispatchPreconditionTest(_:)();
  uint64_t v11 = *(uint64_t (**)(void *, uint64_t))(v3 + 8);
  uint64_t result = v11(v5, v2);
  if (v10)
  {
    *uint64_t v5 = v9;
    v8(v5, v7, v2);
    id v13 = v9;
    char v14 = _dispatchPreconditionTest(_:)();
    uint64_t result = v11(v5, v2);
    if (v14)
    {
      *((unsigned char *)v1 + 120) = 1;
      uint64_t v15 = type metadata accessor for Transaction();
      __chkstk_darwin(v15);
      uint64_t v16 = v19;
      *(&v17 - 4) = (uint64_t)v1;
      *(&v17 - 3) = v16;
      *(&v17 - 2) = v18;
      return static Transaction.named<A>(_:with:)();
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
  return result;
}

uint64_t sub_100F08788()
{
  swift_release();
  sub_10001CFB8(*(void *)(v0 + 24), *(void *)(v0 + 32));

  return _swift_deallocObject(v0, 40, 7);
}

uint64_t sub_100F087C8(void (*a1)(long long *), uint64_t a2)
{
  return sub_100F061CC(a1, a2, *(void *)(v2 + 16), *(void *)(v2 + 24), *(void *)(v2 + 32));
}

unint64_t sub_100F087D4()
{
  unint64_t result = qword_1016630C8;
  if (!qword_1016630C8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1016630C8);
  }
  return result;
}

unint64_t sub_100F08828()
{
  unint64_t result = qword_1016630D0;
  if (!qword_1016630D0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, &qword_1016630D0);
  }
  return result;
}

uint64_t sub_100F0887C()
{
  sub_1005FCC80(*(void *)(v0 + 16), *(void *)(v0 + 24), *(void *)(v0 + 32), *(void *)(v0 + 40), *(unsigned char *)(v0 + 48));

  return _swift_deallocObject(v0, 49, 7);
}

uint64_t type metadata accessor for PrivacyAlertSupport.AlertInfo()
{
  uint64_t result = qword_1016631E8;
  if (!qword_1016631E8) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t sub_100F08908()
{
  uint64_t v1 = type metadata accessor for PrivacyAlertSupport.AlertInfo();
  uint64_t v2 = *(unsigned __int8 *)(*(void *)(v1 - 8) + 80);
  uint64_t v3 = (v2 + 16) & ~v2;
  uint64_t v4 = *(void *)(*(void *)(v1 - 8) + 64);
  swift_bridgeObjectRelease();
  uint64_t v5 = v0 + v3 + *(int *)(v1 + 20);
  uint64_t v6 = type metadata accessor for MACAddress();
  uint64_t v7 = *(void (**)(uint64_t, uint64_t))(*(void *)(v6 - 8) + 8);
  v7(v5, v6);
  uint64_t v8 = v0 + v3 + *(int *)(v1 + 24);
  v7(v8, v6);
  uint64_t v9 = type metadata accessor for BluetoothManagerDevice();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  char v10 = (uint64_t *)(v8 + *(int *)(v9 + 36));
  unint64_t v11 = v10[1];
  if (v11 >> 60 != 15) {
    sub_10001CFB8(*v10, v11);
  }

  swift_bridgeObjectRelease();

  return _swift_deallocObject(v0, v3 + v4, v2 | 7);
}

uint64_t sub_100F08A98()
{
  uint64_t v2 = *(void *)(type metadata accessor for PrivacyAlertSupport.AlertInfo() - 8);
  uint64_t v3 = v0 + ((*(unsigned __int8 *)(v2 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80));
  uint64_t v4 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v4;
  *uint64_t v4 = v1;
  v4[1] = sub_10001D2E4;
  v4[2] = v3;
  return _swift_task_switch(sub_100F0592C, 0, 0);
}

unint64_t sub_100F08B78()
{
  return sub_100F05B44(*(void *)(v0 + 16));
}

unint64_t sub_100F08B80()
{
  unint64_t result = qword_1016630E8;
  if (!qword_1016630E8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1016630E8);
  }
  return result;
}

uint64_t sub_100F08BD4(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

uint64_t sub_100F08C3C(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t sub_100F08C9C()
{
  uint64_t v1 = (id *)(v0 + 16);
  switch(*(unsigned char *)(v0 + 56))
  {
    case 0:
    case 7:
    case 0xA:
      goto LABEL_7;
    case 1:
      _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)v1);
      break;
    case 2:

      goto LABEL_7;
    case 3:

      break;
    case 4:
    case 5:
    case 6:
      swift_release();
      break;
    case 8:
      swift_release();
LABEL_7:
      swift_errorRelease();
      break;
    case 9:
      swift_bridgeObjectRelease();
      break;
    default:
      break;
  }

  return _swift_deallocObject(v0, 57, 7);
}

uint64_t sub_100F08D78(void (*a1)(void *), uint64_t a2)
{
  return sub_100F00EE4(a1, a2, v2 + 16);
}

uint64_t sub_100F08D80(uint64_t a1, void (*a2)(void, void, void, void, void))
{
  return a1;
}

uint64_t sub_100F08DC0(uint64_t a1)
{
  return sub_100EFFAC8(a1, *(void *)(v1 + 16), *(void *)(v1 + 24), *(void *)(v1 + 32), *(void **)(v1 + 40), *(unsigned __int8 *)(v1 + 48));
}

uint64_t sub_100F08DE8@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = sub_100F05EB8(*(void *)a1, *(void *)(a1 + 8));
  *a2 = result;
  return result;
}

uint64_t sub_100F08E18()
{
  uint64_t v1 = type metadata accessor for BluetoothManagerDevice();
  uint64_t v2 = *(unsigned __int8 *)(*(void *)(v1 - 8) + 80);
  uint64_t v3 = (v2 + 24) & ~v2;
  uint64_t v4 = *(void *)(*(void *)(v1 - 8) + 64);
  swift_release();
  uint64_t v5 = type metadata accessor for MACAddress();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8))(v0 + v3, v5);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v6 = (uint64_t *)(v0 + v3 + *(int *)(v1 + 36));
  unint64_t v7 = v6[1];
  if (v7 >> 60 != 15) {
    sub_10001CFB8(*v6, v7);
  }
  unint64_t v8 = (v4 + v3 + 7) & 0xFFFFFFFFFFFFFFF8;

  return _swift_deallocObject(v0, v8 + 9, v2 | 7);
}

uint64_t sub_100F08F68(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 32))(a2, a1, v5);
  return a2;
}

void sub_100F08FD0(unint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v5 = *(void *)(type metadata accessor for BluetoothManagerDevice() - 8);
  unint64_t v6 = (*(unsigned __int8 *)(v5 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
  unint64_t v7 = (*(void *)(v5 + 64) + v6 + 7) & 0xFFFFFFFFFFFFFFF8;
  sub_100F00F6C(a1, v2 + v6, *(void *)(v2 + v7), *(unsigned __int8 *)(v2 + v7 + 8), a2);
}

uint64_t sub_100F09080()
{
  swift_release();
  swift_release();

  return _swift_deallocObject(v0, 32, 7);
}

uint64_t sub_100F090C0@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = sub_100F00AE8(a1, *(void *)(v2 + 24));
  *a2 = result;
  return result;
}

uint64_t sub_100F090F4(uint64_t a1)
{
  return sub_100F00874(a1, v1[2], v1[3], v1[4]);
}

uint64_t sub_100F09100(uint64_t a1)
{
  return sub_100EFEEA8(a1, *(void *)(v1 + 16), *(void *)(v1 + 24));
}

unint64_t sub_100F09120()
{
  unint64_t result = qword_101663170;
  if (!qword_101663170)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_101663170);
  }
  return result;
}

uint64_t sub_100F09178(uint64_t a1)
{
  return sub_100EFF67C(a1, v1[2], v1[3], v1[4]);
}

uint64_t sub_100F09184(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

char *sub_100F091CC(char *a1, char *a2, int *a3)
{
  uint64_t v4 = a1;
  int v5 = *(_DWORD *)(*((void *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v29 = *(void *)a2;
    *(void *)uint64_t v4 = *(void *)a2;
    uint64_t v4 = (char *)(v29 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v7 = *((void *)a2 + 1);
    *(void *)a1 = *(void *)a2;
    *((void *)a1 + 1) = v7;
    uint64_t v8 = a3[5];
    uint64_t v9 = &a1[v8];
    char v10 = &a2[v8];
    uint64_t v11 = type metadata accessor for MACAddress();
    uint64_t v12 = *(void (**)(char *, char *, uint64_t))(*(void *)(v11 - 8) + 16);
    swift_bridgeObjectRetain();
    v12(v9, v10, v11);
    uint64_t v13 = a3[6];
    char v14 = &v4[v13];
    uint64_t v15 = &a2[v13];
    v12(&v4[v13], &a2[v13], v11);
    uint64_t v16 = (int *)type metadata accessor for BluetoothManagerDevice();
    uint64_t v17 = v16[5];
    uint64_t v18 = &v14[v17];
    uint64_t v19 = &v15[v17];
    uint64_t v20 = *((void *)v19 + 1);
    *(void *)uint64_t v18 = *(void *)v19;
    *((void *)v18 + 1) = v20;
    *(_DWORD *)&v14[v16[6]] = *(_DWORD *)&v15[v16[6]];
    uint64_t v21 = v16[7];
    os_log_type_t v22 = &v14[v21];
    uint64_t v23 = &v15[v21];
    uint64_t v24 = *((void *)v23 + 1);
    *(void *)os_log_type_t v22 = *(void *)v23;
    *((void *)v22 + 1) = v24;
    *(_DWORD *)&v14[v16[8]] = *(_DWORD *)&v15[v16[8]];
    uint64_t v25 = v16[9];
    unint64_t v26 = &v14[v25];
    uint64_t v27 = (uint64_t *)&v15[v25];
    unint64_t v28 = *(void *)&v15[v25 + 8];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    if (v28 >> 60 == 15)
    {
      *(_OWORD *)unint64_t v26 = *(_OWORD *)v27;
    }
    else
    {
      uint64_t v30 = *v27;
      sub_1000361E0(*v27, v28);
      *(void *)unint64_t v26 = v30;
      *((void *)v26 + 1) = v28;
    }
    uint64_t v31 = v16[10];
    uint64_t v32 = *(void **)&v15[v31];
    *(void *)&v14[v31] = v32;
    uint64_t v33 = a3[8];
    v4[a3[7]] = a2[a3[7]];
    BOOL v34 = &v4[v33];
    uint64_t v35 = &a2[v33];
    uint64_t v36 = *((void *)v35 + 1);
    *(void *)BOOL v34 = *(void *)v35;
    *((void *)v34 + 1) = v36;
    id v37 = v32;
    swift_bridgeObjectRetain();
  }
  return v4;
}

uint64_t sub_100F093B0(uint64_t a1, uint64_t a2)
{
  swift_bridgeObjectRelease();
  uint64_t v4 = a1 + *(int *)(a2 + 20);
  uint64_t v5 = type metadata accessor for MACAddress();
  unint64_t v6 = *(void (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8);
  v6(v4, v5);
  uint64_t v7 = a1 + *(int *)(a2 + 24);
  v6(v7, v5);
  uint64_t v8 = type metadata accessor for BluetoothManagerDevice();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v9 = (uint64_t *)(v7 + *(int *)(v8 + 36));
  unint64_t v10 = v9[1];
  if (v10 >> 60 != 15) {
    sub_10001CFB8(*v9, v10);
  }

  return swift_bridgeObjectRelease();
}

char *sub_100F094C0(char *a1, char *a2, int *a3)
{
  uint64_t v6 = *((void *)a2 + 1);
  *(void *)a1 = *(void *)a2;
  *((void *)a1 + 1) = v6;
  uint64_t v7 = a3[5];
  uint64_t v8 = &a1[v7];
  uint64_t v9 = &a2[v7];
  uint64_t v10 = type metadata accessor for MACAddress();
  uint64_t v11 = *(void (**)(char *, char *, uint64_t))(*(void *)(v10 - 8) + 16);
  swift_bridgeObjectRetain();
  v11(v8, v9, v10);
  uint64_t v12 = a3[6];
  uint64_t v13 = &a1[v12];
  char v14 = &a2[v12];
  v11(&a1[v12], &a2[v12], v10);
  uint64_t v15 = (int *)type metadata accessor for BluetoothManagerDevice();
  uint64_t v16 = v15[5];
  uint64_t v17 = &v13[v16];
  uint64_t v18 = &v14[v16];
  uint64_t v19 = *((void *)v18 + 1);
  *(void *)uint64_t v17 = *(void *)v18;
  *((void *)v17 + 1) = v19;
  *(_DWORD *)&v13[v15[6]] = *(_DWORD *)&v14[v15[6]];
  uint64_t v20 = v15[7];
  uint64_t v21 = &v13[v20];
  os_log_type_t v22 = &v14[v20];
  uint64_t v23 = *((void *)v22 + 1);
  *(void *)uint64_t v21 = *(void *)v22;
  *((void *)v21 + 1) = v23;
  *(_DWORD *)&v13[v15[8]] = *(_DWORD *)&v14[v15[8]];
  uint64_t v24 = v15[9];
  uint64_t v25 = &v13[v24];
  unint64_t v26 = (uint64_t *)&v14[v24];
  unint64_t v27 = *(void *)&v14[v24 + 8];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if (v27 >> 60 == 15)
  {
    *(_OWORD *)uint64_t v25 = *(_OWORD *)v26;
  }
  else
  {
    uint64_t v28 = *v26;
    sub_1000361E0(*v26, v27);
    *(void *)uint64_t v25 = v28;
    *((void *)v25 + 1) = v27;
  }
  uint64_t v29 = v15[10];
  uint64_t v30 = *(void **)&v14[v29];
  *(void *)&v13[v29] = v30;
  uint64_t v31 = a3[8];
  a1[a3[7]] = a2[a3[7]];
  uint64_t v32 = &a1[v31];
  uint64_t v33 = &a2[v31];
  uint64_t v34 = *((void *)v33 + 1);
  *(void *)uint64_t v32 = *(void *)v33;
  *((void *)v32 + 1) = v34;
  id v35 = v30;
  swift_bridgeObjectRetain();
  return a1;
}

char *sub_100F09654(char *a1, char *a2, int *a3)
{
  *(void *)a1 = *(void *)a2;
  *((void *)a1 + 1) = *((void *)a2 + 1);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v6 = a3[5];
  uint64_t v7 = &a1[v6];
  uint64_t v8 = &a2[v6];
  uint64_t v9 = type metadata accessor for MACAddress();
  uint64_t v10 = *(void (**)(char *, char *, uint64_t))(*(void *)(v9 - 8) + 24);
  v10(v7, v8, v9);
  uint64_t v11 = a3[6];
  uint64_t v12 = &a1[v11];
  uint64_t v13 = &a2[v11];
  v10(&a1[v11], &a2[v11], v9);
  char v14 = (int *)type metadata accessor for BluetoothManagerDevice();
  uint64_t v15 = v14[5];
  uint64_t v16 = &v12[v15];
  uint64_t v17 = &v13[v15];
  *(void *)uint64_t v16 = *(void *)v17;
  *((void *)v16 + 1) = *((void *)v17 + 1);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_DWORD *)&v12[v14[6]] = *(_DWORD *)&v13[v14[6]];
  uint64_t v18 = v14[7];
  uint64_t v19 = &v12[v18];
  uint64_t v20 = &v13[v18];
  *(void *)uint64_t v19 = *(void *)v20;
  *((void *)v19 + 1) = *((void *)v20 + 1);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_DWORD *)&v12[v14[8]] = *(_DWORD *)&v13[v14[8]];
  uint64_t v21 = v14[9];
  os_log_type_t v22 = (uint64_t *)&v12[v21];
  uint64_t v23 = (uint64_t *)&v13[v21];
  unint64_t v24 = *(void *)&v13[v21 + 8];
  if (*(void *)&v12[v21 + 8] >> 60 != 15)
  {
    if (v24 >> 60 != 15)
    {
      uint64_t v26 = *v23;
      sub_1000361E0(v26, v24);
      uint64_t v27 = *v22;
      unint64_t v28 = v22[1];
      *os_log_type_t v22 = v26;
      v22[1] = v24;
      sub_10001CFB8(v27, v28);
      goto LABEL_8;
    }
    sub_1001E132C((uint64_t)v22);
    goto LABEL_6;
  }
  if (v24 >> 60 == 15)
  {
LABEL_6:
    *(_OWORD *)os_log_type_t v22 = *(_OWORD *)v23;
    goto LABEL_8;
  }
  uint64_t v25 = *v23;
  sub_1000361E0(v25, v24);
  *os_log_type_t v22 = v25;
  v22[1] = v24;
LABEL_8:
  uint64_t v29 = v14[10];
  uint64_t v30 = *(void **)&v12[v29];
  uint64_t v31 = *(void **)&v13[v29];
  *(void *)&v12[v29] = v31;
  id v32 = v31;

  a1[a3[7]] = a2[a3[7]];
  uint64_t v33 = a3[8];
  uint64_t v34 = &a1[v33];
  id v35 = &a2[v33];
  *(void *)uint64_t v34 = *(void *)v35;
  *((void *)v34 + 1) = *((void *)v35 + 1);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

char *sub_100F0987C(char *a1, char *a2, int *a3)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  uint64_t v6 = a3[5];
  uint64_t v7 = &a1[v6];
  uint64_t v8 = &a2[v6];
  uint64_t v9 = type metadata accessor for MACAddress();
  uint64_t v10 = *(void (**)(char *, char *, uint64_t))(*(void *)(v9 - 8) + 32);
  v10(v7, v8, v9);
  uint64_t v11 = a3[6];
  uint64_t v12 = &a1[v11];
  uint64_t v13 = &a2[v11];
  v10(&a1[v11], &a2[v11], v9);
  char v14 = (int *)type metadata accessor for BluetoothManagerDevice();
  *(_OWORD *)&v12[v14[5]] = *(_OWORD *)&v13[v14[5]];
  *(_DWORD *)&v12[v14[6]] = *(_DWORD *)&v13[v14[6]];
  *(_OWORD *)&v12[v14[7]] = *(_OWORD *)&v13[v14[7]];
  *(_DWORD *)&v12[v14[8]] = *(_DWORD *)&v13[v14[8]];
  *(_OWORD *)&v12[v14[9]] = *(_OWORD *)&v13[v14[9]];
  *(void *)&v12[v14[10]] = *(void *)&v13[v14[10]];
  uint64_t v15 = a3[8];
  a1[a3[7]] = a2[a3[7]];
  *(_OWORD *)&a1[v15] = *(_OWORD *)&a2[v15];
  return a1;
}

char *sub_100F0999C(char *a1, char *a2, int *a3)
{
  uint64_t v6 = *((void *)a2 + 1);
  *(void *)a1 = *(void *)a2;
  *((void *)a1 + 1) = v6;
  swift_bridgeObjectRelease();
  uint64_t v7 = a3[5];
  uint64_t v8 = &a1[v7];
  uint64_t v9 = &a2[v7];
  uint64_t v10 = type metadata accessor for MACAddress();
  uint64_t v11 = *(void (**)(char *, char *, uint64_t))(*(void *)(v10 - 8) + 40);
  v11(v8, v9, v10);
  uint64_t v12 = a3[6];
  uint64_t v13 = &a1[v12];
  char v14 = &a2[v12];
  v11(&a1[v12], &a2[v12], v10);
  uint64_t v15 = (int *)type metadata accessor for BluetoothManagerDevice();
  uint64_t v16 = v15[5];
  uint64_t v17 = &v13[v16];
  uint64_t v18 = &v14[v16];
  uint64_t v20 = *(void *)v18;
  uint64_t v19 = *((void *)v18 + 1);
  *(void *)uint64_t v17 = v20;
  *((void *)v17 + 1) = v19;
  swift_bridgeObjectRelease();
  *(_DWORD *)&v13[v15[6]] = *(_DWORD *)&v14[v15[6]];
  uint64_t v21 = v15[7];
  os_log_type_t v22 = &v13[v21];
  uint64_t v23 = &v14[v21];
  uint64_t v25 = *(void *)v23;
  uint64_t v24 = *((void *)v23 + 1);
  *(void *)os_log_type_t v22 = v25;
  *((void *)v22 + 1) = v24;
  swift_bridgeObjectRelease();
  *(_DWORD *)&v13[v15[8]] = *(_DWORD *)&v14[v15[8]];
  uint64_t v26 = v15[9];
  uint64_t v27 = (uint64_t *)&v13[v26];
  unint64_t v28 = (uint64_t *)&v14[v26];
  unint64_t v29 = *(void *)&v13[v26 + 8];
  if (v29 >> 60 != 15)
  {
    unint64_t v30 = v28[1];
    if (v30 >> 60 != 15)
    {
      uint64_t v31 = *v27;
      uint64_t *v27 = *v28;
      v27[1] = v30;
      sub_10001CFB8(v31, v29);
      goto LABEL_6;
    }
    sub_1001E132C((uint64_t)v27);
  }
  *(_OWORD *)uint64_t v27 = *(_OWORD *)v28;
LABEL_6:
  uint64_t v32 = v15[10];
  uint64_t v33 = *(void **)&v13[v32];
  *(void *)&v13[v32] = *(void *)&v14[v32];

  uint64_t v34 = a3[8];
  a1[a3[7]] = a2[a3[7]];
  id v35 = &a1[v34];
  uint64_t v36 = (uint64_t *)&a2[v34];
  uint64_t v38 = *v36;
  uint64_t v37 = v36[1];
  *(void *)id v35 = v38;
  *((void *)v35 + 1) = v37;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t sub_100F09B44(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_100F09B58);
}

uint64_t sub_100F09B58(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a2 == 0x7FFFFFFF)
  {
    unint64_t v4 = *(void *)(a1 + 8);
    if (v4 >= 0xFFFFFFFF) {
      LODWORD(v4) = -1;
    }
    return (v4 + 1);
  }
  else
  {
    uint64_t v8 = type metadata accessor for MACAddress();
    uint64_t v9 = *(void *)(v8 - 8);
    if (*(_DWORD *)(v9 + 84) == a2)
    {
      uint64_t v10 = v8;
      uint64_t v11 = a1 + *(int *)(a3 + 20);
      uint64_t v12 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v9 + 48);
      return v12(v11, a2, v10);
    }
    else
    {
      uint64_t v13 = type metadata accessor for BluetoothManagerDevice();
      char v14 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v13 - 8) + 48);
      uint64_t v15 = v13;
      uint64_t v16 = a1 + *(int *)(a3 + 24);
      return v14(v16, a2, v15);
    }
  }
}

uint64_t sub_100F09C84(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_100F09C98);
}

uint64_t sub_100F09C98(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(void *)(result + 8) = (a2 - 1);
  }
  else
  {
    uint64_t v8 = type metadata accessor for MACAddress();
    uint64_t v9 = *(void *)(v8 - 8);
    if (*(_DWORD *)(v9 + 84) == a3)
    {
      uint64_t v10 = v8;
      uint64_t v11 = v5 + *(int *)(a4 + 20);
      uint64_t v12 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
      return v12(v11, a2, a2, v10);
    }
    else
    {
      uint64_t v13 = type metadata accessor for BluetoothManagerDevice();
      char v14 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v13 - 8) + 56);
      uint64_t v15 = v13;
      uint64_t v16 = v5 + *(int *)(a4 + 24);
      return v14(v16, a2, a2, v15);
    }
  }
  return result;
}

uint64_t sub_100F09DC4()
{
  uint64_t result = type metadata accessor for MACAddress();
  if (v1 <= 0x3F)
  {
    uint64_t result = type metadata accessor for BluetoothManagerDevice();
    if (v2 <= 0x3F)
    {
      swift_initStructMetadata();
      return 0;
    }
  }
  return result;
}

unsigned char *storeEnumTagSinglePayload for PrivacyAlertSupport.PrivacyAlertSupportError(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFE)
  {
    unsigned int v6 = ((a2 - 255) >> 8) + 1;
    *uint64_t result = a2 + 1;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x100F09F78);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 1;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for PrivacyAlertSupport.PrivacyAlertSupportError()
{
  return &type metadata for PrivacyAlertSupport.PrivacyAlertSupportError;
}

unint64_t sub_100F09FB4()
{
  unint64_t result = qword_101663230;
  if (!qword_101663230)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_101663230);
  }
  return result;
}

uint64_t sub_100F0A00C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_100F0A020);
}

uint64_t sub_100F0A020(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for UUID();
  uint64_t v7 = *(void *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == a2)
  {
    uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    return v8(a1, a2, v6);
  }
  else
  {
    unint64_t v10 = *(void *)(a1 + *(int *)(a3 + 20));
    if (v10 >= 0xFFFFFFFF) {
      LODWORD(v10) = -1;
    }
    return (v10 + 1);
  }
}

uint64_t sub_100F0A0E0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_100F0A0F4);
}

uint64_t sub_100F0A0F4(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result = type metadata accessor for UUID();
  uint64_t v9 = *(void *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    unint64_t v10 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    return v10(a1, a2, a2, result);
  }
  else
  {
    *(void *)(a1 + *(int *)(a4 + 20)) = (a2 - 1);
  }
  return result;
}

uint64_t type metadata accessor for FindMyAccessoryFamilyKeyEnvelope()
{
  uint64_t result = qword_101663290;
  if (!qword_101663290) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t sub_100F0A1FC(void *a1)
{
  uint64_t v3 = v1;
  uint64_t v5 = sub_10000588C(&qword_1016632D0);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v8 = (char *)&v11 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10001CD44(a1, a1[3]);
  sub_100F0A91C();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  LOBYTE(v13) = 0;
  type metadata accessor for UUID();
  sub_100F0AA04(&qword_10163B040, (void (*)(uint64_t))&type metadata accessor for UUID);
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  if (!v2)
  {
    uint64_t MyAccessoryFamilyKeyEnvelope = type metadata accessor for FindMyAccessoryFamilyKeyEnvelope();
    uint64_t v13 = *(void *)(v3 + *(int *)(MyAccessoryFamilyKeyEnvelope + 20));
    char v12 = 1;
    sub_10000588C(&qword_101649508);
    sub_100F0A970(&qword_101649510, &qword_101649518);
    KeyedEncodingContainer.encode<A>(_:forKey:)();
    uint64_t v13 = *(void *)(v3 + *(int *)(MyAccessoryFamilyKeyEnvelope + 24));
    char v12 = 2;
    KeyedEncodingContainer.encode<A>(_:forKey:)();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
}

uint64_t sub_100F0A458@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v22 = a2;
  uint64_t v4 = type metadata accessor for UUID();
  uint64_t v24 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v25 = (char *)&v18 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v26 = sub_10000588C(&qword_1016632E0);
  uint64_t v23 = *(void *)(v26 - 8);
  __chkstk_darwin(v26);
  uint64_t v7 = (char *)&v18 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t MyAccessoryFamilyKeyEnvelope = type metadata accessor for FindMyAccessoryFamilyKeyEnvelope();
  __chkstk_darwin(MyAccessoryFamilyKeyEnvelope);
  unint64_t v10 = (char *)&v18 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10001CD44(a1, a1[3]);
  sub_100F0A91C();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v2) {
    return _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)a1);
  }
  uint64_t v12 = v23;
  uint64_t v11 = v24;
  uint64_t v21 = a1;
  LOBYTE(v28) = 0;
  sub_100F0AA04((unint64_t *)&qword_10163B010, (void (*)(uint64_t))&type metadata accessor for UUID);
  uint64_t v13 = v25;
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  char v14 = *(void (**)(char *, char *, uint64_t))(v11 + 32);
  uint64_t v20 = v10;
  v14(v10, v13, v4);
  sub_10000588C(&qword_101649508);
  char v27 = 1;
  uint64_t v25 = (char *)sub_100F0A970(&qword_101649560, &qword_101649568);
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  uint64_t v19 = MyAccessoryFamilyKeyEnvelope;
  uint64_t v15 = *(int *)(MyAccessoryFamilyKeyEnvelope + 20);
  uint64_t v16 = (uint64_t)v20;
  *(void *)&v20[v15] = v28;
  char v27 = 2;
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  (*(void (**)(char *, uint64_t))(v12 + 8))(v7, v26);
  *(void *)(v16 + *(int *)(v19 + 24)) = v28;
  sub_100F0AA4C(v16, v22);
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)v21);
  return sub_100F0AAB0(v16);
}

uint64_t sub_100F0A874(uint64_t a1)
{
  unint64_t v2 = sub_100F0A91C();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_100F0A8B0(uint64_t a1)
{
  unint64_t v2 = sub_100F0A91C();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_100F0A8EC@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_100F0A458(a1, a2);
}

uint64_t sub_100F0A904(void *a1)
{
  return sub_100F0A1FC(a1);
}

unint64_t sub_100F0A91C()
{
  unint64_t result = qword_1016632D8;
  if (!qword_1016632D8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1016632D8);
  }
  return result;
}

uint64_t sub_100F0A970(unint64_t *a1, unint64_t *a2)
{
  uint64_t result = *a1;
  if (!result)
  {
    sub_10000592C(&qword_101649508);
    sub_100F0AA04(a2, (void (*)(uint64_t))type metadata accessor for FamilyCryptoKeysV2);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_100F0AA04(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_100F0AA4C(uint64_t a1, uint64_t a2)
{
  uint64_t MyAccessoryFamilyKeyEnvelope = type metadata accessor for FindMyAccessoryFamilyKeyEnvelope();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(MyAccessoryFamilyKeyEnvelope - 8) + 16))(a2, a1, MyAccessoryFamilyKeyEnvelope);
  return a2;
}

uint64_t sub_100F0AAB0(uint64_t a1)
{
  uint64_t MyAccessoryFamilyKeyEnvelope = type metadata accessor for FindMyAccessoryFamilyKeyEnvelope();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(MyAccessoryFamilyKeyEnvelope - 8) + 8))(a1, MyAccessoryFamilyKeyEnvelope);
  return a1;
}

unsigned char *storeEnumTagSinglePayload for FindMyAccessoryFamilyKeyEnvelope.CodingKeys(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 2 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 2) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFE) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFD)
  {
    unsigned int v6 = ((a2 - 254) >> 8) + 1;
    *uint64_t result = a2 + 2;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x100F0ABD8);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 2;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for FindMyAccessoryFamilyKeyEnvelope.CodingKeys()
{
  return &type metadata for FindMyAccessoryFamilyKeyEnvelope.CodingKeys;
}

unint64_t sub_100F0AC14()
{
  unint64_t result = qword_1016632E8;
  if (!qword_1016632E8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1016632E8);
  }
  return result;
}

unint64_t sub_100F0AC6C()
{
  unint64_t result = qword_1016632F0;
  if (!qword_1016632F0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1016632F0);
  }
  return result;
}

unint64_t sub_100F0ACC4()
{
  unint64_t result = qword_1016632F8;
  if (!qword_1016632F8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1016632F8);
  }
  return result;
}

uint64_t sub_100F0AD18()
{
  uint64_t v0 = type metadata accessor for Logger();
  sub_10001E384(v0, qword_10170EE88);
  uint64_t v1 = sub_100010324(v0, (uint64_t)qword_10170EE88);
  if (qword_101637660 != -1) {
    swift_once();
  }
  uint64_t v2 = sub_100010324(v0, (uint64_t)qword_10170F838);
  int v3 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v0 - 8) + 16);

  return v3(v1, v2, v0);
}

uint64_t sub_100F0ADE0()
{
  v1[5] = v0;
  sub_10000588C(&qword_10164DBB0);
  v1[6] = swift_task_alloc();
  sub_10000588C(&qword_1016567A0);
  v1[7] = swift_task_alloc();
  v1[8] = swift_task_alloc();
  return _swift_task_switch(sub_100F0AEB4, v0, 0);
}

uint64_t sub_100F0AEB4()
{
  swift_retain();
  uint64_t v1 = (void *)swift_task_alloc();
  v0[9] = v1;
  uint64_t v2 = sub_10000588C((uint64_t *)&unk_1016488F0);
  v0[10] = v2;
  *uint64_t v1 = v0;
  v1[1] = sub_100F0AF84;
  uint64_t v3 = v0[8];
  uint64_t v4 = v0[5];
  return unsafeBlocking<A>(_:)(v3, sub_100F0DC74, v4, v2);
}

uint64_t sub_100F0AF84()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 40);
  swift_task_dealloc();
  swift_release();
  return _swift_task_switch(sub_100F0B09C, v1, 0);
}

uint64_t sub_100F0B09C()
{
  uint64_t v1 = v0[7];
  uint64_t v2 = v0[8];
  uint64_t v4 = v0[5];
  uint64_t v3 = v0[6];
  (*(void (**)(uint64_t, void, uint64_t))(*(void *)(v0[10] - 8) + 56))(v2, 0, 1);
  sub_100F0DC7C(v2, v1);
  uint64_t v5 = v4 + OBJC_IVAR____TtC12searchpartyd31OwnDevicePublishActivityService_configurationSubscription;
  swift_beginAccess();
  sub_1001B001C(v1, v5);
  swift_endAccess();
  uint64_t v6 = type metadata accessor for TaskPriority();
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 56))(v3, 1, 1, v6);
  uint64_t v7 = sub_100F0DF44(&qword_101663438, (void (*)(uint64_t))type metadata accessor for OwnDevicePublishActivityService);
  uint64_t v8 = (void *)swift_allocObject();
  void v8[2] = v4;
  v8[3] = v7;
  v8[4] = v4;
  swift_retain_n();
  sub_1008F5E44(v3, (uint64_t)&unk_101663458, (uint64_t)v8);
  swift_release();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v9 = (uint64_t (*)(void))v0[1];
  return v9();
}

uint64_t sub_100F0B268@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  if (qword_101636CD8 != -1) {
    swift_once();
  }
  v5[3] = type metadata accessor for OwnDevicePublishActivityService();
  v5[4] = &off_1015FC410;
  v5[0] = a1;
  swift_retain();
  sub_1000B5EA4((uint64_t)v5, a2);
  return _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)v5);
}

uint64_t sub_100F0B308(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  v4[2] = a4;
  v4[3] = *a4;
  type metadata accessor for DispatchQoS();
  v4[4] = swift_task_alloc();
  return _swift_task_switch(sub_100F0B3C4, a4, 0);
}

uint64_t sub_100F0B3C4()
{
  uint64_t v1 = v0[3];
  uint64_t v2 = v0[2];
  type metadata accessor for XPCActivity();
  static DispatchQoS.background.getter();
  uint64_t v3 = swift_allocObject();
  *(void *)(v3 + 16) = v1;
  uint64_t v4 = swift_allocObject();
  *(void *)(v4 + 16) = v2;
  *(void *)(v4 + 24) = v1;
  swift_retain();
  uint64_t v5 = (void *)swift_task_alloc();
  v0[5] = v5;
  *uint64_t v5 = v0;
  v5[1] = sub_100F0B510;
  uint64_t v6 = v0[4];
  return XPCActivity.__allocating_init(name:qos:criteriaBlock:handler:)(0xD000000000000027, 0x800000010141A9F0, v6, &unk_101663468, v3, &unk_101663478, v4);
}

uint64_t sub_100F0B510(uint64_t a1)
{
  uint64_t v2 = *(void *)(*(void *)v1 + 16);
  *(void *)(*(void *)v1 + 48) = a1;
  swift_task_dealloc();
  return _swift_task_switch(sub_100F0B628, v2, 0);
}

uint64_t sub_100F0B628()
{
  *(void *)(v0[2] + OBJC_IVAR____TtC12searchpartyd31OwnDevicePublishActivityService_activity) = v0[6];
  swift_release();
  swift_task_dealloc();
  uint64_t v1 = (uint64_t (*)(void))v0[1];
  return v1();
}

uint64_t sub_100F0B6A8(uint64_t a1, uint64_t a2)
{
  v2[4] = a1;
  v2[5] = a2;
  uint64_t v3 = type metadata accessor for XPCActivity.Criteria.Options();
  v2[6] = v3;
  v2[7] = *(void *)(v3 - 8);
  v2[8] = swift_task_alloc();
  uint64_t v4 = type metadata accessor for XPCActivity.Priority();
  v2[9] = v4;
  v2[10] = *(void *)(v4 - 8);
  v2[11] = swift_task_alloc();
  sub_10000588C(&qword_101641270);
  v2[12] = swift_task_alloc();
  uint64_t v5 = type metadata accessor for XPCActivity.Criteria();
  v2[13] = v5;
  v2[14] = *(void *)(v5 - 8);
  v2[15] = swift_task_alloc();
  return _swift_task_switch(sub_100F0B850, 0, 0);
}

uint64_t sub_100F0B850()
{
  if (qword_101636CD8 != -1) {
    swift_once();
  }
  uint64_t v1 = qword_10170E390;
  *(void *)(v0 + 128) = qword_10170E390;
  swift_retain();
  uint64_t v2 = (void *)swift_task_alloc();
  *(void *)(v0 + 136) = v2;
  *uint64_t v2 = v0;
  v2[1] = sub_100F0B95C;
  return unsafeBlocking<A>(_:)(v0 + 16, sub_10001D704, v1, &type metadata for Configuration);
}

uint64_t sub_100F0B95C()
{
  swift_task_dealloc();
  swift_release();
  return _swift_task_switch(sub_100F0BA74, 0, 0);
}

uint64_t sub_100F0BA74()
{
  uint64_t v1 = v0[2];
  uint64_t v2 = (void *)sub_1010AB900(v1);
  uint64_t v3 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v5 = v4;
  if (v3 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v5 == v6)
  {
    swift_bridgeObjectRelease_n();

LABEL_11:
    uint64_t v14 = v0[13];
    uint64_t v15 = v0[14];
    uint64_t v16 = v0[12];
    sub_10001D074(v0[5], v16, &qword_101641270);
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v15 + 48))(v16, 1, v14) != 1)
    {
      uint64_t v26 = v0[14];
      uint64_t v25 = v0[15];
      uint64_t v28 = v0[12];
      uint64_t v27 = v0[13];
      uint64_t v29 = v0[4];
      swift_bridgeObjectRelease();
      unint64_t v30 = *(void (**)(uint64_t, uint64_t, uint64_t))(v26 + 32);
      v30(v25, v28, v27);
      v30(v29, v25, v27);
      goto LABEL_20;
    }
    uint64_t v17 = v0[11];
    uint64_t v18 = v0[9];
    uint64_t v19 = v0[10];
    sub_10001DAB4(v0[12], &qword_101641270);
    sub_1010AC68C(v1);
    double v21 = v20;
    sub_1010AC680(v1);
    double v23 = v22;
    swift_bridgeObjectRelease();
    (*(void (**)(uint64_t, void, uint64_t))(v19 + 104))(v17, enum case for XPCActivity.Priority.utility(_:), v18);
    if (v21 <= -9.22337204e18)
    {
      __break(1u);
    }
    else if (v21 < 9.22337204e18)
    {
      if ((*(void *)&v21 & 0x7FF0000000000000) != 0x7FF0000000000000
        && (*(void *)&v23 & 0x7FF0000000000000) != 0x7FF0000000000000)
      {
        if (v23 > -9.22337204e18)
        {
          if (v23 < 9.22337204e18)
          {
            sub_10000588C(&qword_101641288);
            uint64_t v24 = swift_allocObject();
            *(_OWORD *)(v24 + 16) = xmmword_10134BF90;
            static XPCActivity.Criteria.Options.allowBattery.getter();
            static XPCActivity.Criteria.Options.requiresClassC.getter();
            static XPCActivity.Criteria.Options.requiresNetwork.getter();
            static XPCActivity.Criteria.Options.preventDeviceSleep.getter();
            v0[3] = v24;
            sub_100F0DF44(&qword_1016394C0, (void (*)(uint64_t))&type metadata accessor for XPCActivity.Criteria.Options);
            sub_10000588C(&qword_101641290);
            sub_1002F6D2C();
            dispatch thunk of SetAlgebra.init<A>(_:)();
            XPCActivity.Criteria.init(priority:repeating:delay:gracePeriod:interval:options:)();
LABEL_20:
            uint64_t v13 = 0;
            goto LABEL_21;
          }
LABEL_28:
          __break(1u);
          goto LABEL_29;
        }
LABEL_27:
        __break(1u);
        goto LABEL_28;
      }
LABEL_26:
      __break(1u);
      goto LABEL_27;
    }
    __break(1u);
    goto LABEL_26;
  }
  char v8 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  if (v8) {
    goto LABEL_11;
  }
  swift_bridgeObjectRelease();
  if (qword_1016371A0 != -1) {
LABEL_29:
  }
    swift_once();
  uint64_t v9 = type metadata accessor for Logger();
  sub_100010324(v9, (uint64_t)qword_10170EE88);
  unint64_t v10 = Logger.logObject.getter();
  os_log_type_t v11 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v10, v11))
  {
    uint64_t v12 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v12 = 0;
    _os_log_impl((void *)&_mh_execute_header, v10, v11, "Service disabled, not registering own device publish activity.", v12, 2u);
    swift_slowDealloc();
  }

  uint64_t v13 = 1;
LABEL_21:
  (*(void (**)(void, uint64_t, uint64_t, void))(v0[14] + 56))(v0[4], v13, 1, v0[13]);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v31 = (uint64_t (*)(void))v0[1];
  return v31();
}

uint64_t sub_100F0BEFC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v3[20] = a2;
  v3[21] = a3;
  v3[19] = a1;
  sub_10000588C(&qword_101641228);
  v3[22] = swift_task_alloc();
  uint64_t v5 = type metadata accessor for XPCActivity.State();
  v3[23] = v5;
  v3[24] = *(void *)(v5 - 8);
  v3[25] = swift_task_alloc();
  v3[26] = swift_task_alloc();
  return _swift_task_switch(sub_100F0C004, a3, 0);
}

uint64_t sub_100F0C004()
{
  uint64_t v32 = v0;
  if (qword_1016371A0 != -1) {
    swift_once();
  }
  uint64_t v1 = *(void *)(v0 + 208);
  uint64_t v2 = *(void *)(v0 + 184);
  uint64_t v3 = *(void *)(v0 + 192);
  uint64_t v4 = *(void *)(v0 + 160);
  uint64_t v5 = type metadata accessor for Logger();
  sub_100010324(v5, (uint64_t)qword_10170EE88);
  uint64_t v6 = *(void (**)(uint64_t, uint64_t, uint64_t))(v3 + 16);
  v6(v1, v4, v2);
  uint64_t v7 = Logger.logObject.getter();
  os_log_type_t v8 = static os_log_type_t.default.getter();
  BOOL v9 = os_log_type_enabled(v7, v8);
  uint64_t v10 = *(void *)(v0 + 208);
  uint64_t v11 = *(void *)(v0 + 184);
  uint64_t v12 = *(void *)(v0 + 192);
  if (v9)
  {
    uint64_t v13 = (uint8_t *)swift_slowAlloc();
    uint64_t v31 = swift_slowAlloc();
    *(_DWORD *)uint64_t v13 = 136315138;
    sub_100F0DF44(&qword_1016394A0, (void (*)(uint64_t))&type metadata accessor for XPCActivity.State);
    uint64_t v14 = dispatch thunk of CustomStringConvertible.description.getter();
    *(void *)(v0 + 144) = sub_1008FA0F0(v14, v15, &v31);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    uint64_t v16 = *(void (**)(uint64_t, uint64_t))(v12 + 8);
    v16(v10, v11);
    _os_log_impl((void *)&_mh_execute_header, v7, v8, "Own device publish activity state: %s.", v13, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    uint64_t v16 = *(void (**)(uint64_t, uint64_t))(v12 + 8);
    v16(*(void *)(v0 + 208), *(void *)(v0 + 184));
  }

  uint64_t v18 = *(void *)(v0 + 192);
  uint64_t v17 = *(void *)(v0 + 200);
  uint64_t v19 = *(void *)(v0 + 184);
  v6(v17, *(void *)(v0 + 160), v19);
  int v20 = (*(uint64_t (**)(uint64_t, uint64_t))(v18 + 88))(v17, v19);
  if (v20 != enum case for XPCActivity.State.checkIn(_:) && v20 != enum case for XPCActivity.State.wait(_:))
  {
    if (v20 == enum case for XPCActivity.State.run(_:))
    {
      if (qword_1016375E8 != -1) {
        swift_once();
      }
      swift_beginAccess();
      uint64_t v21 = sub_10001D074((uint64_t)&xmmword_10166E8F0, v0 + 56, (uint64_t *)&unk_101638D30);
      if (*(void *)(v0 + 80))
      {
        sub_10001CEB0((long long *)(v0 + 56), v0 + 16);
        sub_10001CD44((void *)(v0 + 16), *(void *)(v0 + 40));
        unint64_t v30 = (uint64_t (__cdecl *)())((char *)&dword_1016392E8 + dword_1016392E8);
        uint64_t v24 = (void *)swift_task_alloc();
        *(void *)(v0 + 216) = v24;
        *uint64_t v24 = v0;
        v24[1] = sub_100F0C584;
        return v30();
      }
      __break(1u);
      return _swift_task_switch(v21, v22, v23);
    }
    if (v20 == enum case for XPCActivity.State.defer(_:))
    {
      type metadata accessor for XPCActivity();
      sub_100F0DF44(&qword_101639498, (void (*)(uint64_t))&type metadata accessor for XPCActivity);
      uint64_t v26 = dispatch thunk of Actor.unownedExecutor.getter();
      uint64_t v28 = v27;
      uint64_t v21 = (uint64_t)sub_100F0C518;
      uint64_t v22 = v26;
      uint64_t v23 = v28;
      return _swift_task_switch(v21, v22, v23);
    }
    if (v20 != enum case for XPCActivity.State.continue(_:)
      && v20 != enum case for XPCActivity.State.done(_:)
      && v20 != enum case for XPCActivity.State.invalidated(_:))
    {
      v16(*(void *)(v0 + 200), *(void *)(v0 + 184));
    }
  }
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v29 = *(uint64_t (**)(void))(v0 + 8);
  return v29();
}

uint64_t sub_100F0C518()
{
  uint64_t v1 = *(void *)(v0 + 168);
  dispatch thunk of XPCActivity.defer()();
  return _swift_task_switch(sub_100F0DF8C, v1, 0);
}

uint64_t sub_100F0C584(uint64_t a1)
{
  uint64_t v2 = *(void *)(*(void *)v1 + 168);
  *(void *)(*(void *)v1 + 224) = a1;
  swift_task_dealloc();
  return _swift_task_switch(sub_100F0C69C, v2, 0);
}

uint64_t sub_100F0C69C()
{
  uint64_t v1 = *(void *)(v0 + 224);
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v0 + 16);
  if (v1)
  {
    uint64_t v2 = *(void *)(v0 + 224);
    uint64_t v3 = sub_100F0C7B8;
  }
  else
  {
    if (qword_101636A80 != -1) {
      swift_once();
    }
    dispatch thunk of WorkItemQueue.enqueue(_:)();
    swift_release();
    if (qword_101636CD8 != -1) {
      swift_once();
    }
    *(void *)(v0 + 248) = qword_10170E390;
    uint64_t v3 = sub_100F0CBBC;
    uint64_t v2 = 0;
  }
  return _swift_task_switch(v3, v2, 0);
}

uint64_t sub_100F0C7B8()
{
  uint64_t v1 = v0[28];
  v0[15] = 0xD000000000000013;
  v0[16] = 0x80000001013F80A0;
  uint64_t v4 = (char *)&async function pointer to dispatch thunk of AsyncKeyedThrottle.throttle(key:block:skipBlock:)
     + async function pointer to dispatch thunk of AsyncKeyedThrottle.throttle(key:block:skipBlock:);
  swift_retain();
  uint64_t v2 = (void *)swift_task_alloc();
  v0[29] = v2;
  *uint64_t v2 = v0;
  v2[1] = sub_100F0C8D0;
  return ((uint64_t (*)(void *, void *, uint64_t, void (*)(), void))v4)(v0 + 15, &unk_1016411F8, v1, sub_100871C18, 0);
}

uint64_t sub_100F0C8D0()
{
  uint64_t v2 = *v1;
  *(void *)(*v1 + 240) = v0;
  swift_task_dealloc();
  swift_release();
  if (v0)
  {
    swift_bridgeObjectRelease();
    uint64_t v3 = *(void *)(v2 + 224);
    uint64_t v4 = sub_100F0CB44;
  }
  else
  {
    uint64_t v5 = *(void *)(v2 + 168);
    swift_bridgeObjectRelease();
    swift_release();
    uint64_t v4 = sub_100F0CA50;
    uint64_t v3 = v5;
  }
  return _swift_task_switch(v4, v3, 0);
}

uint64_t sub_100F0CA50()
{
  if (qword_101636A80 != -1) {
    swift_once();
  }
  dispatch thunk of WorkItemQueue.enqueue(_:)();
  swift_release();
  if (qword_101636CD8 != -1) {
    swift_once();
  }
  *(void *)(v0 + 248) = qword_10170E390;
  return _swift_task_switch(sub_100F0CBBC, 0, 0);
}

uint64_t sub_100F0CB44()
{
  uint64_t v1 = *(void *)(v0 + 168);
  swift_release();
  swift_errorRelease();
  return _swift_task_switch(sub_100F0DF90, v1, 0);
}

uint64_t sub_100F0CBBC()
{
  swift_retain();
  uint64_t v1 = (void *)swift_task_alloc();
  *(void *)(v0 + 256) = v1;
  *uint64_t v1 = v0;
  v1[1] = sub_100F0CC84;
  uint64_t v2 = *(void *)(v0 + 248);
  return unsafeBlocking<A>(_:)(v0 + 136, sub_10001D704, v2, &type metadata for Configuration);
}

uint64_t sub_100F0CC84()
{
  swift_task_dealloc();
  swift_release();
  return _swift_task_switch(sub_100F0CD9C, 0, 0);
}

uint64_t sub_100F0CD9C()
{
  uint64_t v1 = v0[21];
  v0[33] = v0[17];
  return _swift_task_switch(sub_100F0CDC0, v1, 0);
}

uint64_t sub_100F0CDC0()
{
  uint64_t v1 = (void *)sub_1010AB900(v0[33]);
  swift_bridgeObjectRelease();
  uint64_t v2 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v4 = v3;
  if (v2 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v4 == v5)
  {
    swift_bridgeObjectRelease_n();
  }
  else
  {
    char v7 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();

    if ((v7 & 1) == 0) {
      goto LABEL_13;
    }
  }
  uint64_t v8 = *(void *)(v0[21] + OBJC_IVAR____TtC12searchpartyd31OwnDevicePublishActivityService_activity);
  v0[34] = v8;
  if (!v8)
  {
    uint64_t v12 = v0[22];
    (*(void (**)(uint64_t, uint64_t, uint64_t, void))(v0[24] + 56))(v12, 1, 1, v0[23]);
    sub_10001DAB4(v12, &qword_101641228);
LABEL_13:
    type metadata accessor for XPCActivity();
    sub_100F0DF44(&qword_101639498, (void (*)(uint64_t))&type metadata accessor for XPCActivity);
    uint64_t v14 = dispatch thunk of Actor.unownedExecutor.getter();
    return _swift_task_switch(sub_100F0D210, v14, v13);
  }
  unint64_t v15 = (uint64_t (*)(uint64_t))((char *)&async function pointer to dispatch thunk of XPCActivity.updateCriteria()
                                        + async function pointer to dispatch thunk of XPCActivity.updateCriteria());
  swift_retain();
  BOOL v9 = (void *)swift_task_alloc();
  v0[35] = v9;
  *BOOL v9 = v0;
  v9[1] = sub_100F0CFF8;
  uint64_t v10 = v0[22];
  return v15(v10);
}

uint64_t sub_100F0CFF8()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 168);
  swift_task_dealloc();
  swift_release();
  return _swift_task_switch(sub_100F0D124, v1, 0);
}

uint64_t sub_100F0D124()
{
  uint64_t v1 = v0[22];
  (*(void (**)(uint64_t, void, uint64_t, void))(v0[24] + 56))(v1, 0, 1, v0[23]);
  sub_10001DAB4(v1, &qword_101641228);
  type metadata accessor for XPCActivity();
  sub_100F0DF44(&qword_101639498, (void (*)(uint64_t))&type metadata accessor for XPCActivity);
  uint64_t v3 = dispatch thunk of Actor.unownedExecutor.getter();
  return _swift_task_switch(sub_100F0D210, v3, v2);
}

uint64_t sub_100F0D210()
{
  uint64_t v1 = *(void *)(v0 + 168);
  dispatch thunk of XPCActivity.done()();
  return _swift_task_switch(sub_100F0D27C, v1, 0);
}

uint64_t sub_100F0D27C()
{
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_100F0D2F0()
{
  swift_bridgeObjectRelease();
  sub_10001DAB4(v0 + OBJC_IVAR____TtC12searchpartyd31OwnDevicePublishActivityService_configurationSubscription, &qword_1016567A0);
  swift_release();
  swift_defaultActor_destroy();

  return _swift_defaultActor_deallocate(v0);
}

uint64_t sub_100F0D350()
{
  return type metadata accessor for OwnDevicePublishActivityService();
}

uint64_t type metadata accessor for OwnDevicePublishActivityService()
{
  uint64_t result = qword_101663338;
  if (!qword_101663338) {
    return swift_getSingletonMetadata();
  }
  return result;
}

void sub_100F0D3A4()
{
  sub_1001AFC64();
  if (v0 <= 0x3F) {
    swift_updateClassMetadata2();
  }
}

uint64_t sub_100F0D450()
{
  uint64_t v1 = (void *)swift_task_alloc();
  *(void *)(v0 + 16) = v1;
  *uint64_t v1 = v0;
  v1[1] = sub_100033F68;
  return sub_100F0ADE0();
}

void sub_100F0D4DC(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = sub_10000588C(&qword_10164DBB0);
  __chkstk_darwin(v4 - 8);
  uint64_t v6 = (char *)&v20 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for AnyKeyPath();
  swift_getKeyPath();
  char v7 = static AnyKeyPath.== infix(_:_:)();
  swift_release();
  if (v7)
  {
    if (qword_1016371A0 != -1) {
      swift_once();
    }
    uint64_t v8 = type metadata accessor for Logger();
    sub_100010324(v8, (uint64_t)qword_10170EE88);
    BOOL v9 = Logger.logObject.getter();
    os_log_type_t v10 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v9, v10))
    {
      uint64_t v11 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v11 = 0;
      _os_log_impl((void *)&_mh_execute_header, v9, v10, "service state changed. Reevaluating xpc activity.", v11, 2u);
      swift_slowDealloc();
    }

    uint64_t v12 = (void *)sub_1010AB900(a1);
    uint64_t v13 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v15 = v14;
    if (v13 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v15 == v16)
    {
      swift_bridgeObjectRelease_n();
    }
    else
    {
      char v17 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();

      if ((v17 & 1) == 0) {
        return;
      }
    }
    uint64_t v18 = type metadata accessor for TaskPriority();
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v18 - 8) + 56))(v6, 1, 1, v18);
    uint64_t v19 = (void *)swift_allocObject();
    void v19[2] = 0;
    v19[3] = 0;
    v19[4] = v2;
    swift_retain();
    sub_1008F5E44((uint64_t)v6, (uint64_t)&unk_101663448, (uint64_t)v19);
    swift_release();
  }
}

uint64_t sub_100F0D764(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  *(void *)(v4 + 16) = a4;
  sub_10000588C(&qword_101641228);
  *(void *)(v4 + 24) = swift_task_alloc();
  return _swift_task_switch(sub_100F0D7FC, a4, 0);
}

uint64_t sub_100F0D7FC()
{
  uint64_t v1 = *(void *)(v0[2] + OBJC_IVAR____TtC12searchpartyd31OwnDevicePublishActivityService_activity);
  v0[4] = v1;
  if (v1)
  {
    uint64_t v8 = (uint64_t (*)(uint64_t))((char *)&async function pointer to dispatch thunk of XPCActivity.updateCriteria()
                                         + async function pointer to dispatch thunk of XPCActivity.updateCriteria());
    swift_retain();
    uint64_t v2 = (void *)swift_task_alloc();
    v0[5] = v2;
    *uint64_t v2 = v0;
    v2[1] = sub_100F0D95C;
    uint64_t v3 = v0[3];
    return v8(v3);
  }
  else
  {
    uint64_t v5 = v0[3];
    uint64_t v6 = type metadata accessor for XPCActivity.State();
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 56))(v5, 1, 1, v6);
    sub_10001DAB4(v5, &qword_101641228);
    swift_task_dealloc();
    uint64_t v7 = (uint64_t (*)(void))v0[1];
    return v7();
  }
}

uint64_t sub_100F0D95C()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 16);
  swift_task_dealloc();
  swift_release();
  return _swift_task_switch(sub_100F0DA88, v1, 0);
}

uint64_t sub_100F0DA88()
{
  uint64_t v1 = *(void *)(v0 + 24);
  uint64_t v2 = type metadata accessor for XPCActivity.State();
  (*(void (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v2 - 8) + 56))(v1, 0, 1, v2);
  sub_10001DAB4(v1, &qword_101641228);
  swift_task_dealloc();
  uint64_t v3 = *(uint64_t (**)(void))(v0 + 8);
  return v3();
}

void sub_100F0DB3C(uint64_t a1)
{
}

uint64_t sub_100F0DB60(uint64_t a1)
{
  uint64_t result = sub_100F0DF44(&qword_101663438, (void (*)(uint64_t))type metadata accessor for OwnDevicePublishActivityService);
  *(void *)(a1 + 8) = result;
  return result;
}

uint64_t sub_100F0DBC0(uint64_t a1)
{
  uint64_t v4 = v1[2];
  uint64_t v5 = v1[3];
  uint64_t v6 = v1[4];
  uint64_t v7 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v7;
  *uint64_t v7 = v2;
  v7[1] = sub_100033F68;
  return sub_100F0D764(a1, v4, v5, v6);
}

uint64_t sub_100F0DC74@<X0>(uint64_t a1@<X8>)
{
  return sub_100F0B268(v1, a1);
}

uint64_t sub_100F0DC7C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_10000588C(&qword_1016567A0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_100F0DCE8(uint64_t a1)
{
  uint64_t v4 = v1[2];
  uint64_t v5 = v1[3];
  uint64_t v6 = (void *)v1[4];
  uint64_t v7 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v7;
  *uint64_t v7 = v2;
  v7[1] = sub_100033F68;
  return sub_100F0B308(a1, v4, v5, v6);
}

uint64_t sub_100F0DD9C()
{
  return _swift_deallocObject(v0, 24, 7);
}

uint64_t sub_100F0DDAC(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v5;
  *uint64_t v5 = v2;
  v5[1] = sub_10001D2E4;
  return sub_100F0B6A8(a1, a2);
}

uint64_t sub_100F0DE5C()
{
  swift_release();

  return _swift_deallocObject(v0, 32, 7);
}

uint64_t sub_100F0DE94(uint64_t a1, uint64_t a2)
{
  uint64_t v6 = *(void *)(v2 + 16);
  uint64_t v7 = (void *)swift_task_alloc();
  *(void *)(v3 + 16) = v7;
  *uint64_t v7 = v3;
  v7[1] = sub_100033F68;
  return sub_100F0BEFC(a1, a2, v6);
}

uint64_t sub_100F0DF44(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_100F0DF94()
{
  uint64_t v0 = type metadata accessor for Logger();
  sub_10001E384(v0, qword_10170EEA0);
  sub_100010324(v0, (uint64_t)qword_10170EEA0);
  return Logger.init(subsystem:category:)();
}

uint64_t sub_100F0E018()
{
  uint64_t v0 = type metadata accessor for Logger();
  sub_10001E384(v0, qword_101663480);
  uint64_t v1 = sub_100010324(v0, (uint64_t)qword_101663480);
  if (qword_1016371A8 != -1) {
    swift_once();
  }
  uint64_t v2 = sub_100010324(v0, (uint64_t)qword_10170EEA0);
  uint64_t v3 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v0 - 8) + 16);

  return v3(v1, v2, v0);
}

uint64_t sub_100F0E0E0()
{
  uint64_t v1 = type metadata accessor for URL();
  v0[17] = v1;
  v0[18] = *(void *)(v1 - 8);
  v0[19] = swift_task_alloc();
  v0[20] = swift_task_alloc();
  return _swift_task_switch(sub_100F0E1AC, 0, 0);
}

uint64_t sub_100F0E1AC()
{
  uint64_t v38 = v0;
  *(void *)(v0 + 120) = _swiftEmptyArrayStorage;
  uint64_t v1 = (uint64_t *)(v0 + 120);
  uint64_t v2 = *(void *)(v0 + 160);
  type metadata accessor for BeaconStore(0);
  sub_100A9DB34(v2);
  id v3 = objc_allocWithZone((Class)SAPathInfo);
  URL._bridgeToObjectiveC()(v4);
  uint64_t v6 = v5;
  id v7 = [v3 initWithURL:v5];
  v1[6] = (uint64_t)v7;

  id v8 = v7;
  specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
  if (*(void *)((*v1 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((*v1 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
    specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
  }
  specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
  specialized Array._endMutation()();
  uint64_t v9 = *v1;
  if ((unint64_t)*v1 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v11 = _CocoaArrayWrapper.endIndex.getter();
    uint64_t v10 = v11;
    if (v11) {
      goto LABEL_5;
    }
LABEL_18:
    swift_bridgeObjectRelease();
    goto LABEL_19;
  }
  uint64_t v10 = *(void *)((v9 & 0xFFFFFFFFFFFFFF8) + 0x10);
  uint64_t v11 = swift_bridgeObjectRetain();
  if (!v10) {
    goto LABEL_18;
  }
LABEL_5:
  if (v10 < 1)
  {
    __break(1u);
    return _swift_continuation_await(v11);
  }
  uint64_t v12 = 0;
  unint64_t v36 = v9 & 0xC000000000000001;
  uint64_t v32 = (void (**)(uint64_t, uint64_t))(v35[18] + 8);
  uint64_t v33 = v10;
  uint64_t v34 = v9;
  do
  {
    if (v36) {
      id v13 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
    }
    else {
      id v13 = *(id *)(v9 + 8 * v12 + 32);
    }
    uint64_t v14 = v13;
    if (qword_1016371B0 != -1) {
      swift_once();
    }
    uint64_t v15 = type metadata accessor for Logger();
    sub_100010324(v15, (uint64_t)qword_101663480);
    id v16 = v14;
    char v17 = Logger.logObject.getter();
    os_log_type_t v18 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v17, v18))
    {
      uint64_t v19 = v35[19];
      uint64_t v20 = v35[17];
      uint64_t v21 = swift_slowAlloc();
      uint64_t v37 = swift_slowAlloc();
      *(_DWORD *)uint64_t v21 = 136446210;
      id v22 = [v16 url];
      static URL._unconditionallyBridgeFromObjectiveC(_:)();

      sub_100F0EDFC((unint64_t *)&qword_1016605A0, 255, (void (*)(uint64_t))&type metadata accessor for URL);
      uint64_t v23 = dispatch thunk of CustomStringConvertible.description.getter();
      unint64_t v25 = v24;
      (*v32)(v19, v20);
      uint64_t v26 = v23;
      uint64_t v10 = v33;
      *(void *)(v21 + 4) = sub_1008FA0F0(v26, v25, &v37);
      swift_bridgeObjectRelease();

      _os_log_impl((void *)&_mh_execute_header, v17, v18, "Registering path: %{public}s.", (uint8_t *)v21, 0xCu);
      swift_arrayDestroy();
      uint64_t v9 = v34;
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
    }
    ++v12;
  }
  while (v10 != v12);
  swift_bridgeObjectRelease();
LABEL_19:
  id v27 = [self defaultManager];
  v35[22] = v27;
  sub_100F0EDBC();
  Class isa = Array._bridgeToObjectiveC()().super.isa;
  v35[23] = isa;
  swift_bridgeObjectRelease();
  NSString v29 = String._bridgeToObjectiveC()();
  v35[24] = v29;
  v35[2] = v35;
  v35[3] = sub_100F0E6B0;
  uint64_t v30 = swift_continuation_init();
  v35[10] = _NSConcreteStackBlock;
  v35[11] = 0x40000000;
  v35[12] = sub_100DB174C;
  v35[13] = &unk_1015FC5C8;
  v35[14] = v30;
  [v27 registerPaths:isa forBundleID:v29 completionHandler:v35 + 10];
  uint64_t v11 = (uint64_t)(v35 + 2);
  return _swift_continuation_await(v11);
}

uint64_t sub_100F0E6B0()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 48);
  *(void *)(*(void *)v0 + 200) = v1;
  if (v1) {
    uint64_t v2 = sub_100F0E870;
  }
  else {
    uint64_t v2 = sub_100F0E7C0;
  }
  return _swift_task_switch(v2, 0, 0);
}

uint64_t sub_100F0E7C0()
{
  uint64_t v2 = *(void **)(v0 + 184);
  uint64_t v1 = *(void **)(v0 + 192);
  id v3 = *(void **)(v0 + 176);
  uint64_t v4 = *(void *)(v0 + 160);
  uint64_t v5 = *(void *)(v0 + 136);
  uint64_t v6 = *(void *)(v0 + 144);

  (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v4, v5);
  swift_task_dealloc();
  swift_task_dealloc();
  id v7 = *(uint64_t (**)(void))(v0 + 8);
  return v7();
}

uint64_t sub_100F0E870()
{
  uint64_t v1 = (void *)v0[24];
  id v3 = (void *)v0[22];
  uint64_t v2 = (void *)v0[23];
  swift_willThrow();

  if (qword_1016371B0 != -1) {
    swift_once();
  }
  uint64_t v4 = type metadata accessor for Logger();
  sub_100010324(v4, (uint64_t)qword_101663480);
  swift_errorRetain();
  swift_errorRetain();
  uint64_t v5 = Logger.logObject.getter();
  os_log_type_t v6 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v5, v6))
  {
    id v7 = (uint8_t *)swift_slowAlloc();
    id v8 = (void *)swift_slowAlloc();
    *(_DWORD *)id v7 = 138543362;
    swift_errorRetain();
    uint64_t v9 = _swift_stdlib_bridgeErrorToNSError();
    v0[16] = v9;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *id v8 = v9;
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl((void *)&_mh_execute_header, v5, v6, "Failed to attribute files: %{public}@.", v7, 0xCu);
    sub_10000588C((uint64_t *)&unk_101638EA0);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {

    swift_errorRelease();
    swift_errorRelease();
  }
  uint64_t v10 = v0[20];
  uint64_t v11 = (void *)v0[21];
  uint64_t v12 = v0[17];
  uint64_t v13 = v0[18];
  swift_errorRelease();

  (*(void (**)(uint64_t, uint64_t))(v13 + 8))(v10, v12);
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v14 = (uint64_t (*)(void))v0[1];
  return v14();
}

uint64_t type metadata accessor for FileAttributionService()
{
  return self;
}

uint64_t sub_100F0EADC()
{
  *(void *)(v1 + 16) = *v0;
  sub_10000588C(&qword_10164DBB0);
  *(void *)(v1 + 24) = swift_task_alloc();
  return _swift_task_switch(sub_100F0EB94, v0, 0);
}

uint64_t sub_100F0EB94()
{
  uint64_t v1 = v0[2];
  uint64_t v2 = v0[3];
  uint64_t v3 = type metadata accessor for TaskPriority();
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v3 - 8) + 56))(v2, 1, 1, v3);
  uint64_t v4 = (void *)swift_allocObject();
  v4[2] = 0;
  v4[3] = 0;
  v4[4] = v1;
  sub_1008F5E44(v2, (uint64_t)&unk_101663560, (uint64_t)v4);
  swift_release();
  swift_task_dealloc();
  uint64_t v5 = (uint64_t (*)(void))v0[1];
  return v5();
}

uint64_t sub_100F0EC78(uint64_t a1, uint64_t a2)
{
  uint64_t result = sub_100F0EDFC(&qword_101663550, a2, (void (*)(uint64_t))type metadata accessor for FileAttributionService);
  *(void *)(a1 + 8) = result;
  return result;
}

uint64_t sub_100F0ECD0()
{
  swift_unknownObjectRelease();

  return _swift_deallocObject(v0, 40, 7);
}

uint64_t sub_100F0ED08()
{
  uint64_t v1 = (void *)swift_task_alloc();
  *(void *)(v0 + 16) = v1;
  *uint64_t v1 = v0;
  v1[1] = sub_10001D2E4;
  return sub_100F0E0E0();
}

unint64_t sub_100F0EDBC()
{
  unint64_t result = qword_101663568;
  if (!qword_101663568)
  {
    self;
    unint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&qword_101663568);
  }
  return result;
}

uint64_t sub_100F0EDFC(unint64_t *a1, uint64_t a2, void (*a3)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a3(a2);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

ValueMetadata *type metadata accessor for NotifyMeResponse()
{
  return &type metadata for NotifyMeResponse;
}

uint64_t sub_100F0EE54(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_100F0EE68);
}

uint64_t sub_100F0EE68(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for UUID();
  uint64_t v7 = *(void *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == a2)
  {
    id v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    return v8(a1, a2, v6);
  }
  else
  {
    unsigned int v10 = *(unsigned __int8 *)(a1 + *(int *)(a3 + 20));
    if (v10 >= 3) {
      return v10 - 2;
    }
    else {
      return 0;
    }
  }
}

uint64_t sub_100F0EF24(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_100F0EF38);
}

uint64_t sub_100F0EF38(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result = type metadata accessor for UUID();
  uint64_t v9 = *(void *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    unsigned int v10 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    return v10(a1, a2, a2, result);
  }
  else
  {
    *(unsigned char *)(a1 + *(int *)(a4 + 20)) = a2 + 2;
  }
  return result;
}

uint64_t type metadata accessor for NotifyMeResponseResult()
{
  uint64_t result = qword_1016635C8;
  if (!qword_1016635C8) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t sub_100F0F040()
{
  uint64_t result = type metadata accessor for UUID();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t sub_100F0F0D4@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v23 = a2;
  uint64_t v27 = type metadata accessor for UUID();
  uint64_t v24 = *(void *)(v27 - 8);
  __chkstk_darwin(v27);
  uint64_t v5 = (char *)&v20 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = sub_10000588C(&qword_101663628);
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v25 = v6;
  uint64_t v26 = v7;
  __chkstk_darwin(v6);
  uint64_t v9 = (char *)&v20 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = type metadata accessor for NotifyMeResponseResult();
  __chkstk_darwin(v10);
  uint64_t v12 = (char *)&v20 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10001CD44(a1, a1[3]);
  sub_100F0FD34();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v2) {
    return _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)a1);
  }
  uint64_t v22 = v10;
  uint64_t v13 = v12;
  uint64_t v14 = v24;
  char v30 = 0;
  sub_100F0FD88((unint64_t *)&qword_10163B010, (void (*)(uint64_t))&type metadata accessor for UUID);
  uint64_t v15 = v27;
  uint64_t v16 = v25;
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  char v17 = *(void (**)(char *, char *, uint64_t))(v14 + 32);
  uint64_t v21 = (uint64_t)v13;
  v17(v13, v5, v15);
  char v28 = 1;
  sub_100F0FDD0();
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  (*(void (**)(char *, uint64_t))(v26 + 8))(v9, v16);
  uint64_t v18 = v21;
  *(unsigned char *)(v21 + *(int *)(v22 + 20)) = v29;
  sub_100F0FE24(v18, v23);
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)a1);
  return sub_100F0FE88(v18);
}

uint64_t sub_100F0F430()
{
  return 0x73746C75736572;
}

uint64_t sub_100F0F448@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  if (a1 == 0x73746C75736572 && a2 == 0xE700000000000000)
  {
    uint64_t result = swift_bridgeObjectRelease();
    char v7 = 0;
  }
  else
  {
    char v5 = _stringCompareWithSmolCheck(_:_:expecting:)();
    uint64_t result = swift_bridgeObjectRelease();
    char v7 = v5 ^ 1;
  }
  *a3 = v7 & 1;
  return result;
}

uint64_t sub_100F0F4E0(uint64_t a1)
{
  unint64_t v2 = sub_100F0FC3C();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_100F0F51C(uint64_t a1)
{
  unint64_t v2 = sub_100F0FC3C();

  return CodingKey.debugDescription.getter(a1, v2);
}

void *sub_100F0F558@<X0>(void *a1@<X0>, void *a2@<X8>)
{
  uint64_t result = sub_100F0FAC4(a1);
  if (!v2) {
    *a2 = result;
  }
  return result;
}

uint64_t sub_100F0F584(char *a1, char *a2)
{
  return sub_10071C854(*a1, *a2);
}

Swift::Int sub_100F0F590()
{
  return Hasher._finalize()();
}

uint64_t sub_100F0F624()
{
  String.hash(into:)();

  return swift_bridgeObjectRelease();
}

Swift::Int sub_100F0F6A4()
{
  return Hasher._finalize()();
}

uint64_t sub_100F0F734@<X0>(Swift::String *a1@<X0>, char *a2@<X8>)
{
  Swift::Int v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_1015A4C40, *a1);
  uint64_t result = swift_bridgeObjectRelease();
  if (v3 == 1) {
    char v5 = 1;
  }
  else {
    char v5 = 2;
  }
  if (!v3) {
    char v5 = 0;
  }
  *a2 = v5;
  return result;
}

void sub_100F0F794(uint64_t *a1@<X8>)
{
  uint64_t v2 = 0x7069726373627573;
  if (*v1) {
    uint64_t v2 = 0x6F43737574617473;
  }
  unint64_t v3 = 0xEE0064496E6F6974;
  if (*v1) {
    unint64_t v3 = 0xEA00000000006564;
  }
  *a1 = v2;
  a1[1] = v3;
}

uint64_t sub_100F0F7E4()
{
  if (*v0) {
    return 0x6F43737574617473;
  }
  else {
    return 0x7069726373627573;
  }
}

uint64_t sub_100F0F830@<X0>(Swift::String string@<0:X0, 8:X1>, char *a2@<X8>)
{
  object = string._object;
  v3._countAndFlagsBits = string._countAndFlagsBits;
  v3._object = object;
  Swift::Int v5 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_1015A4C40, v3);
  uint64_t result = swift_bridgeObjectRelease();
  if (v5 == 1) {
    char v7 = 1;
  }
  else {
    char v7 = 2;
  }
  if (!v5) {
    char v7 = 0;
  }
  *a2 = v7;
  return result;
}

uint64_t sub_100F0F894(uint64_t a1)
{
  unint64_t v2 = sub_100F0FD34();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_100F0F8D0(uint64_t a1)
{
  unint64_t v2 = sub_100F0FD34();

  return CodingKey.debugDescription.getter(a1, v2);
}

BOOL sub_100F0F90C(char *a1, char *a2)
{
  return qword_1013834E0[*a1] == qword_1013834E0[*a2];
}

Swift::Int sub_100F0F930()
{
  uint64_t v1 = *v0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(qword_1013834E0[v1]);
  return Hasher._finalize()();
}

void sub_100F0F980()
{
  Hasher._combine(_:)(qword_1013834E0[*v0]);
}

Swift::Int sub_100F0F9B8()
{
  uint64_t v1 = *v0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(qword_1013834E0[v1]);
  return Hasher._finalize()();
}

uint64_t *sub_100F0FA04@<X0>(uint64_t *result@<X0>, char *a2@<X8>)
{
  uint64_t v2 = *result;
  if (*result == 200) {
    char v3 = 0;
  }
  else {
    char v3 = 3;
  }
  if (v2 == 204) {
    char v4 = 1;
  }
  else {
    char v4 = v3;
  }
  if (v2 == 500) {
    char v5 = 2;
  }
  else {
    char v5 = v4;
  }
  *a2 = v5;
  return result;
}

void sub_100F0FA34(void *a1@<X8>)
{
  *a1 = qword_1013834E0[*v1];
}

uint64_t sub_100F0FA4C()
{
  return RawRepresentable<>.init(from:)();
}

uint64_t sub_100F0FAAC@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_100F0F0D4(a1, a2);
}

void *sub_100F0FAC4(void *a1)
{
  uint64_t v3 = sub_10000588C(&qword_101663600);
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  uint64_t v6 = (char *)v9 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  char v7 = sub_10001CD44(a1, a1[3]);
  sub_100F0FC3C();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v1)
  {
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)a1);
  }
  else
  {
    sub_10000588C(&qword_101663610);
    sub_100F0FC90();
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
    char v7 = (void *)v9[1];
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)a1);
  }
  return v7;
}

unint64_t sub_100F0FC3C()
{
  unint64_t result = qword_101663608;
  if (!qword_101663608)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_101663608);
  }
  return result;
}

unint64_t sub_100F0FC90()
{
  unint64_t result = qword_101663618;
  if (!qword_101663618)
  {
    sub_10000592C(&qword_101663610);
    sub_100F0FD88(&qword_101663620, (void (*)(uint64_t))type metadata accessor for NotifyMeResponseResult);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_101663618);
  }
  return result;
}

unint64_t sub_100F0FD34()
{
  unint64_t result = qword_101663630;
  if (!qword_101663630)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_101663630);
  }
  return result;
}

uint64_t sub_100F0FD88(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

unint64_t sub_100F0FDD0()
{
  unint64_t result = qword_101663638;
  if (!qword_101663638)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_101663638);
  }
  return result;
}

uint64_t sub_100F0FE24(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for NotifyMeResponseResult();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_100F0FE88(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for NotifyMeResponseResult();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

unsigned char *storeEnumTagSinglePayload for NotifyMeResponseResult.CodingKeys(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFE)
  {
    unsigned int v6 = ((a2 - 255) >> 8) + 1;
    *unint64_t result = a2 + 1;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x100F0FFB0);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 1;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for NotifyMeResponseResult.CodingKeys()
{
  return &type metadata for NotifyMeResponseResult.CodingKeys;
}

unsigned char *storeEnumTagSinglePayload for NotifyMeResponse.CodingKeys(unsigned char *result, int a2, int a3)
{
  if ((a3 + 1) >= 0x10000) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) < 0x100) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2)
  {
    switch(v5)
    {
      case 1:
        *unint64_t result = a2;
        return result;
      case 2:
        *(_WORD *)unint64_t result = a2;
        return result;
      case 3:
        goto LABEL_19;
      case 4:
        *(_DWORD *)unint64_t result = a2;
        return result;
      default:
        return result;
    }
  }
  switch(v5)
  {
    case 1:
      *unint64_t result = 0;
      break;
    case 2:
      *(_WORD *)unint64_t result = 0;
      break;
    case 3:
LABEL_19:
      __break(1u);
      JUMPOUT(0x100F10084);
    case 4:
      *(_DWORD *)unint64_t result = 0;
      break;
    default:
      return result;
  }
  return result;
}

ValueMetadata *type metadata accessor for NotifyMeResponse.CodingKeys()
{
  return &type metadata for NotifyMeResponse.CodingKeys;
}

unsigned char *storeEnumTagSinglePayload for NotifyMeResponseResult.StatusCode(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 2 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 2) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFE) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFD)
  {
    unsigned int v6 = ((a2 - 254) >> 8) + 1;
    *unint64_t result = a2 + 2;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x100F10188);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 2;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for NotifyMeResponseResult.StatusCode()
{
  return &type metadata for NotifyMeResponseResult.StatusCode;
}

unint64_t sub_100F101C4()
{
  unint64_t result = qword_101663640;
  if (!qword_101663640)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_101663640);
  }
  return result;
}

unint64_t sub_100F1021C()
{
  unint64_t result = qword_101663648;
  if (!qword_101663648)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_101663648);
  }
  return result;
}

unint64_t sub_100F10274()
{
  unint64_t result = qword_101663650;
  if (!qword_101663650)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_101663650);
  }
  return result;
}

unint64_t sub_100F102CC()
{
  unint64_t result = qword_101663658;
  if (!qword_101663658)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_101663658);
  }
  return result;
}

unint64_t sub_100F10324()
{
  unint64_t result = qword_101663660;
  if (!qword_101663660)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_101663660);
  }
  return result;
}

unint64_t sub_100F1037C()
{
  unint64_t result = qword_101663668;
  if (!qword_101663668)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_101663668);
  }
  return result;
}

unint64_t sub_100F103D4()
{
  unint64_t result = qword_101663670;
  if (!qword_101663670)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_101663670);
  }
  return result;
}

unint64_t sub_100F10428()
{
  unint64_t result = qword_101663678;
  if (!qword_101663678)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_101663678);
  }
  return result;
}

void sub_100F1047C(void *a1@<X0>, void *a2@<X8>)
{
  char v86 = a2;
  uint64_t v3 = sub_10000588C(&qword_101638CF0);
  uint64_t v4 = __chkstk_darwin(v3 - 8);
  unsigned int v6 = (char *)&v77 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v4);
  uint64_t v8 = (char *)&v77 - v7;
  uint64_t v9 = type metadata accessor for UUID();
  uint64_t v90 = *(void *)(v9 - 8);
  uint64_t v10 = __chkstk_darwin(v9);
  uint64_t v12 = (char *)&v77 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = __chkstk_darwin(v10);
  uint64_t v15 = (char *)&v77 - v14;
  __chkstk_darwin(v13);
  unint64_t v88 = (char *)&v77 - v16;
  id v91 = [a1 encryptedValues];
  if (CKRecord.recordType.getter() == 0x61636F4C65666153 && v17 == 0xEC0000006E6F6974)
  {
    swift_bridgeObjectRelease();
  }
  else
  {
    char v18 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if ((v18 & 1) == 0)
    {
      sub_100F13D60();
      swift_allocError();
      *os_log_type_t v45 = 0;
      goto LABEL_21;
    }
  }
  id v19 = [a1 recordID];
  id v20 = [v19 recordName];

  static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v89 = v9;

  UUID.init(uuidString:)();
  uint64_t v21 = v89;
  swift_bridgeObjectRelease();
  uint64_t v22 = v90;
  uint64_t v85 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v90 + 48);
  if (v85(v8, 1, v21) == 1)
  {
    sub_100270E18((uint64_t)v8);
    sub_100F13D60();
    swift_allocError();
    *uint64_t v23 = 1;
LABEL_21:
    swift_willThrow();
    swift_unknownObjectRelease();

    return;
  }
  uint64_t v83 = *(void (**)(char *, char *, uint64_t))(v22 + 32);
  uint64_t v84 = v22 + 32;
  v83(v88, v8, v21);
  NSString v24 = String._bridgeToObjectiveC()();
  id v25 = [v91 objectForKeyedSubscript:v24];

  if (!v25
    || (id v92 = v25,
        sub_10000588C((uint64_t *)&unk_10163AE50),
        sub_10000588C(&qword_101654A30),
        (swift_dynamicCast() & 1) == 0))
  {
    static os_log_type_t.error.getter();
    sub_10000588C((uint64_t *)&unk_10163AD00);
    uint64_t v41 = swift_allocObject();
    *(_OWORD *)(v41 + 16) = xmmword_101347BA0;
    *(void *)(v41 + 56) = &type metadata for String;
    *(void *)(v41 + 64) = sub_10000B4CC();
    *(void *)(v41 + 32) = 0xD000000000000011;
    *(void *)(v41 + 40) = 0x800000010140CE60;
    *(void *)(v41 + 96) = sub_10001D4B0(0, (unint64_t *)&qword_10163AE60);
    *(void *)(v41 + 104) = sub_1000A038C();
    *(void *)(v41 + 72) = a1;
    sub_10001D4B0(0, (unint64_t *)&qword_10163AE70);
    id v42 = a1;
    unint64_t v43 = (void *)static OS_os_log.default.getter();
    os_log(_:dso:log:_:_:)();
    swift_bridgeObjectRelease();

    sub_100F13D60();
    swift_allocError();
    *uint64_t v44 = 2;
    swift_willThrow();
    swift_unknownObjectRelease();

    goto LABEL_27;
  }
  uint64_t v26 = v94;
  NSString v27 = String._bridgeToObjectiveC()();
  char v28 = [v91 objectForKeyedSubscript:v27];

  if (!v28 || (char v82 = v26, v94 = v28, (swift_dynamicCast() & 1) == 0))
  {
    swift_bridgeObjectRelease();
    static os_log_type_t.error.getter();
    sub_10000588C((uint64_t *)&unk_10163AD00);
    uint64_t v46 = swift_allocObject();
    *(_OWORD *)(v46 + 16) = xmmword_101347BA0;
    *(void *)(v46 + 56) = &type metadata for String;
    *(void *)(v46 + 64) = sub_10000B4CC();
    unint64_t v47 = 0xE400000000000000;
    *(void *)(v46 + 32) = 1701667182;
LABEL_26:
    *(void *)(v46 + 40) = v47;
    *(void *)(v46 + 96) = sub_10001D4B0(0, (unint64_t *)&qword_10163AE60);
    *(void *)(v46 + 104) = sub_1000A038C();
    *(void *)(v46 + 72) = a1;
    sub_10001D4B0(0, (unint64_t *)&qword_10163AE70);
    id v48 = a1;
    __int16 v49 = (void *)static OS_os_log.default.getter();
    os_log(_:dso:log:_:_:)();
    swift_bridgeObjectRelease();

    sub_100F13D60();
    swift_allocError();
    *uint64_t v50 = 2;
    swift_willThrow();
    swift_unknownObjectRelease();

    goto LABEL_27;
  }
  uint64_t v29 = v93;
  id v80 = v92;
  NSString v30 = String._bridgeToObjectiveC()();
  id v31 = [v91 objectForKeyedSubscript:v30];

  if (!v31 || (uint64_t v81 = v29, v92 = v31, (swift_dynamicCast() & 1) == 0))
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    static os_log_type_t.error.getter();
    sub_10000588C((uint64_t *)&unk_10163AD00);
    uint64_t v46 = swift_allocObject();
    *(_OWORD *)(v46 + 16) = xmmword_101347BA0;
    *(void *)(v46 + 56) = &type metadata for String;
    *(void *)(v46 + 64) = sub_10000B4CC();
    unint64_t v47 = 0xE800000000000000;
    *(void *)(v46 + 32) = 0x656475746974616CLL;
    goto LABEL_26;
  }
  id v32 = v94;
  NSString v33 = String._bridgeToObjectiveC()();
  id v34 = [v91 objectForKeyedSubscript:v33];

  if (!v34 || (id v92 = v34, (swift_dynamicCast() & 1) == 0))
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    static os_log_type_t.error.getter();
    sub_10000588C((uint64_t *)&unk_10163AD00);
    uint64_t v46 = swift_allocObject();
    *(_OWORD *)(v46 + 16) = xmmword_101347BA0;
    *(void *)(v46 + 56) = &type metadata for String;
    *(void *)(v46 + 64) = sub_10000B4CC();
    *(void *)(v46 + 32) = 0x64757469676E6F6CLL;
    unint64_t v47 = 0xE900000000000065;
    goto LABEL_26;
  }
  id v35 = v94;
  NSString v36 = String._bridgeToObjectiveC()();
  id v37 = [v91 objectForKeyedSubscript:v36];

  if (!v37 || (id v92 = v37, (swift_dynamicCast() & 1) == 0))
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    static os_log_type_t.error.getter();
    sub_10000588C((uint64_t *)&unk_10163AD00);
    uint64_t v46 = swift_allocObject();
    *(_OWORD *)(v46 + 16) = xmmword_101347BA0;
    *(void *)(v46 + 56) = &type metadata for String;
    *(void *)(v46 + 64) = sub_10000B4CC();
    unint64_t v47 = 0xE600000000000000;
    *(void *)(v46 + 32) = 0x737569646172;
    goto LABEL_26;
  }
  id v38 = v94;
  uint64_t v39 = v87;
  char v40 = sub_100F11E38(6, a1);
  if (v39)
  {

    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_unknownObjectRelease();
LABEL_27:
    (*(void (**)(char *, uint64_t))(v90 + 8))(v88, v89);
    return;
  }
  char v51 = v40;
  uint64_t v52 = (int *)type metadata accessor for SafeLocation();
  *((unsigned char *)v86 + v52[12]) = v51;
  char v53 = sub_100F12224(5, a1);
  *((unsigned char *)v86 + v52[11]) = v53;
  char v54 = sub_100F12610(0, a1);
  uint64_t v55 = v52;
  uint64_t v56 = v52[6];
  unint64_t v57 = v86;
  *((unsigned char *)v86 + v56) = v54;
  id v58 = [objc_allocWithZone((Class)NSKeyedArchiver) initRequiringSecureCoding:1];
  [a1 encodeSystemFieldsWithCoder:v58];
  [v58 finishEncoding];
  id v59 = [v58 encodedData];
  unint64_t v77 = v55;
  id v60 = v59;
  uint64_t v61 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v78 = v62;
  uint64_t v79 = v61;

  uint64_t v63 = v78;
  uint64_t *v57 = v79;
  v57[1] = v63;
  (*(void (**)(char *, char *, uint64_t))(v90 + 16))((char *)v57 + v77[5], v88, v89);
  if (v82[2])
  {
    uint64_t v64 = v82[2];
    uint64_t v65 = swift_bridgeObjectRetain() + 40;
    uint64_t v87 = _swiftEmptyArrayStorage;
    do
    {
      swift_bridgeObjectRetain();
      UUID.init(uuidString:)();
      swift_bridgeObjectRelease();
      uint64_t v66 = v89;
      if (v85(v6, 1, v89) == 1)
      {
        sub_100270E18((uint64_t)v6);
      }
      else
      {
        uint64_t v78 = v65;
        uint64_t v79 = v64;
        uint64_t v67 = v83;
        v83(v15, v6, v66);
        v67(v12, v15, v66);
        unint64_t v68 = v87;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          unint64_t v68 = (void *)sub_100A6F668(0, v68[2] + 1, 1, (unint64_t)v68);
        }
        unint64_t v70 = v68[2];
        unint64_t v69 = v68[3];
        uint64_t v71 = (void *)(v70 + 1);
        uint64_t v65 = v78;
        if (v70 >= v69 >> 1)
        {
          uint64_t v87 = (void *)(v70 + 1);
          uint64_t v73 = sub_100A6F668(v69 > 1, v70 + 1, 1, (unint64_t)v68);
          uint64_t v71 = v87;
          unint64_t v68 = (void *)v73;
        }
        v68[2] = v71;
        unint64_t v72 = (*(unsigned __int8 *)(v90 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v90 + 80);
        uint64_t v87 = v68;
        v83((char *)v68 + v72 + *(void *)(v90 + 72) * v70, v12, v89);
        uint64_t v64 = v79;
      }
      v65 += 16;
      --v64;
    }
    while (v64);
    swift_unknownObjectRelease();

    swift_bridgeObjectRelease();
  }
  else
  {
    swift_unknownObjectRelease();

    uint64_t v87 = _swiftEmptyArrayStorage;
  }
  (*(void (**)(char *, uint64_t))(v90 + 8))(v88, v89);
  swift_bridgeObjectRelease();
  uint64_t v74 = v77;
  char v75 = v86;
  *(void *)((char *)v86 + v77[13]) = v87;
  unint64_t v76 = (void *)((char *)v75 + v74[7]);
  *unint64_t v76 = v80;
  v76[1] = v81;
  *(void *)((char *)v75 + v74[8]) = v32;
  *(void *)((char *)v75 + v74[9]) = v35;
  *(void *)((char *)v75 + v74[10]) = v38;
}

uint64_t sub_100F1114C@<X0>(void *a1@<X0>, char *a2@<X8>)
{
  uint64_t v4 = type metadata accessor for UUID();
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v7 = (char *)&v35 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  id v8 = [a1 identifier];
  static UUID._unconditionallyBridgeFromObjectiveC(_:)();

  char v9 = 1;
  switch((unint64_t)[a1 type])
  {
    case 0uLL:
      break;
    case 1uLL:
      char v9 = 2;
      break;
    case 2uLL:
      char v9 = 3;
      break;
    case 3uLL:
      char v9 = 4;
      break;
    case 4uLL:
      char v9 = 5;
      break;
    default:
      char v9 = 0;
      break;
  }
  id v10 = [a1 name];
  if (v10)
  {
    uint64_t v11 = v10;
    uint64_t v12 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    unint64_t v35 = v13;
    uint64_t v36 = v12;
  }
  else
  {
    unint64_t v35 = 0xE000000000000000;
    uint64_t v36 = 0;
  }
  id v14 = [a1 location:v35, v36];
  [v14 coordinate];
  uint64_t v16 = v15;

  id v17 = [a1 location];
  [v17 coordinate];
  uint64_t v19 = v18;

  id v20 = [a1 location];
  [v20 horizontalAccuracy];
  uint64_t v22 = v21;

  id v23 = [a1 location];
  unsigned int v24 = [v23 referenceFrame];

  id v25 = [a1 approvalState];
  if ((unint64_t)v25 >= 4) {
    char v26 = 0;
  }
  else {
    char v26 = (char)v25;
  }
  if (v24 == 1) {
    char v27 = 1;
  }
  else {
    char v27 = 2 * (v24 == 2);
  }
  id v28 = [a1 associatedBeacons];
  sub_100F13CC0(&qword_10163BC60, (void (*)(uint64_t))&type metadata accessor for UUID);
  uint64_t v29 = static Set._unconditionallyBridgeFromObjectiveC(_:)();

  NSString v30 = sub_1007100E0(v29);
  swift_bridgeObjectRelease();
  *(_OWORD *)a2 = xmmword_101348180;
  id v31 = (int *)type metadata accessor for SafeLocation();
  uint64_t result = (*(uint64_t (**)(char *, char *, uint64_t))(v5 + 32))(&a2[v31[5]], v7, v4);
  a2[v31[6]] = v9;
  NSString v33 = (uint64_t *)&a2[v31[7]];
  unint64_t v34 = v35;
  *NSString v33 = v36;
  v33[1] = v34;
  *(void *)&a2[v31[8]] = v16;
  *(void *)&a2[v31[9]] = v19;
  *(void *)&a2[v31[10]] = v22;
  a2[v31[11]] = v27;
  a2[v31[12]] = v26;
  *(void *)&a2[v31[13]] = v30;
  return result;
}

uint64_t sub_100F114E0@<X0>(uint64_t a1@<X0>, void *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, char a5@<W4>, int a6@<W5>, char *a7@<X8>)
{
  int v29 = a6;
  uint64_t v13 = type metadata accessor for UUID();
  uint64_t v14 = *(void *)(v13 - 8);
  __chkstk_darwin(v13);
  uint64_t v16 = (char *)&v28 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t))(v14 + 16))(v16, a1, v13);
  [a2 coordinate];
  uint64_t v18 = v17;
  [a2 coordinate];
  uint64_t v20 = v19;
  [a2 horizontalAccuracy];
  uint64_t v22 = v21;
  unsigned int v23 = [a2 referenceFrame];

  if (v23 == 1) {
    char v24 = 1;
  }
  else {
    char v24 = 2 * (v23 == 2);
  }
  (*(void (**)(uint64_t, uint64_t))(v14 + 8))(a1, v13);
  *(_OWORD *)a7 = xmmword_101348180;
  id v25 = (int *)type metadata accessor for SafeLocation();
  uint64_t result = (*(uint64_t (**)(char *, char *, uint64_t))(v14 + 32))(&a7[v25[5]], v16, v13);
  a7[v25[6]] = a5;
  char v27 = &a7[v25[7]];
  *(void *)char v27 = a3;
  *((void *)v27 + 1) = a4;
  *(void *)&a7[v25[8]] = v18;
  *(void *)&a7[v25[9]] = v20;
  *(void *)&a7[v25[10]] = v22;
  a7[v25[11]] = v24;
  a7[v25[12]] = v29;
  *(void *)&a7[v25[13]] = _swiftEmptyArrayStorage;
  return result;
}

uint64_t sub_100F116F0()
{
  return RawRepresentable<>.init(from:)();
}

uint64_t sub_100F11750()
{
  return RawRepresentable<>.encode(to:)();
}

uint64_t sub_100F117A0()
{
  return RawRepresentable<>.init(from:)();
}

uint64_t sub_100F11800()
{
  return RawRepresentable<>.encode(to:)();
}

void sub_100F11850(void *a1@<X8>)
{
  *a1 = &off_1015A5B38;
}

uint64_t sub_100F11860(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = *v1;
  unint64_t v5 = v2[1];
  sub_1000361E0(v4, v5);
  Data.hash(into:)();
  sub_10001CFB8(v4, v5);
  uint64_t v6 = (int *)type metadata accessor for SafeLocation();
  type metadata accessor for UUID();
  sub_100F13CC0(&qword_10163BC60, (void (*)(uint64_t))&type metadata accessor for UUID);
  dispatch thunk of Hashable.hash(into:)();
  Hasher._combine(_:)(*((unsigned __int8 *)v2 + v6[6]));
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  if ((*(uint64_t *)((char *)v2 + v6[8]) & 0x7FFFFFFFFFFFFFFFLL) != 0) {
    Swift::UInt64 v7 = *(uint64_t *)((char *)v2 + v6[8]);
  }
  else {
    Swift::UInt64 v7 = 0;
  }
  Hasher._combine(_:)(v7);
  if ((*(uint64_t *)((char *)v2 + v6[9]) & 0x7FFFFFFFFFFFFFFFLL) != 0) {
    Swift::UInt64 v8 = *(uint64_t *)((char *)v2 + v6[9]);
  }
  else {
    Swift::UInt64 v8 = 0;
  }
  Hasher._combine(_:)(v8);
  if ((*(uint64_t *)((char *)v2 + v6[10]) & 0x7FFFFFFFFFFFFFFFLL) != 0) {
    Swift::UInt64 v9 = *(uint64_t *)((char *)v2 + v6[10]);
  }
  else {
    Swift::UInt64 v9 = 0;
  }
  Hasher._combine(_:)(v9);
  Hasher._combine(_:)(*((unsigned __int8 *)v2 + v6[11]));
  Hasher._combine(_:)(*((unsigned __int8 *)v2 + v6[12]));
  uint64_t v10 = *(uint64_t *)((char *)v2 + v6[13]);
  swift_bridgeObjectRetain();
  sub_100CCAE18(a1, v10);

  return swift_bridgeObjectRelease();
}

unint64_t sub_100F119EC(char a1)
{
  unint64_t result = 0xD000000000000010;
  switch(a1)
  {
    case 1:
      unint64_t result = 0x696669746E656469;
      break;
    case 2:
      unint64_t result = 1701869940;
      break;
    case 3:
      unint64_t result = 1701667182;
      break;
    case 4:
      unint64_t result = 0x656475746974616CLL;
      break;
    case 5:
      unint64_t result = 0x64757469676E6F6CLL;
      break;
    case 6:
      unint64_t result = 0x737569646172;
      break;
    case 7:
      unint64_t result = 0x636E657265666572;
      break;
    case 8:
      unint64_t result = 0x6C61766F72707061;
      break;
    case 9:
      unint64_t result = 0xD000000000000011;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t sub_100F11B38()
{
  return RawRepresentable<>.init(from:)();
}

uint64_t sub_100F11B98()
{
  return RawRepresentable<>.encode(to:)();
}

uint64_t sub_100F11BE8()
{
  uint64_t v0 = type metadata accessor for URL();
  uint64_t v1 = *(void *)(v0 - 8);
  uint64_t v2 = __chkstk_darwin(v0);
  uint64_t v4 = (char *)&v6 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10001E384(v2, qword_10170EEB8);
  sub_100010324(v0, (uint64_t)qword_10170EEB8);
  type metadata accessor for BeaconStore(0);
  sub_100A9DB34((uint64_t)v4);
  URL.appendingPathComponent(_:isDirectory:)();
  return (*(uint64_t (**)(char *, uint64_t))(v1 + 8))(v4, v0);
}

unint64_t sub_100F11D0C()
{
  return sub_100F119EC(*v0);
}

uint64_t sub_100F11D14@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_100F157A8(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_100F11D3C(uint64_t a1)
{
  unint64_t v2 = sub_100F14134();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_100F11D78(uint64_t a1)
{
  unint64_t v2 = sub_100F14134();

  return CodingKey.debugDescription.getter(a1, v2);
}

Swift::Int sub_100F11DB4()
{
  Hasher.init(_seed:)();
  sub_100F11860((uint64_t)v1);
  return Hasher._finalize()();
}

Swift::Int sub_100F11DF8()
{
  Hasher.init(_seed:)();
  sub_100F11860((uint64_t)v1);
  return Hasher._finalize()();
}

unint64_t sub_100F11E38(char a1, id a2)
{
  unint64_t v4 = 1701869940;
  id v5 = [a2 encryptedValues];
  NSString v6 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  [v5 objectForKeyedSubscript:v6];
  swift_unknownObjectRelease();

  sub_10000588C(&qword_1016636B0);
  if (!swift_dynamicCast() || (unint64_t result = v14, v14 >= 4))
  {
    static os_log_type_t.error.getter();
    sub_10000588C((uint64_t *)&unk_10163AD00);
    uint64_t v8 = swift_allocObject();
    *(_OWORD *)(v8 + 16) = xmmword_101347BA0;
    unint64_t v9 = 0xE400000000000000;
    uint64_t v10 = (void *)v8;
    switch(a1)
    {
      case 1:
        unint64_t v4 = 1701667182;
        break;
      case 2:
        unint64_t v9 = 0xE800000000000000;
        unint64_t v4 = 0x656475746974616CLL;
        break;
      case 3:
        unint64_t v4 = 0x64757469676E6F6CLL;
        unint64_t v9 = 0xE900000000000065;
        break;
      case 4:
        unint64_t v9 = 0xE600000000000000;
        unint64_t v4 = 0x737569646172;
        break;
      case 5:
        unint64_t v4 = 0x636E657265666572;
        unint64_t v9 = 0xEE00656D61724665;
        break;
      case 6:
        unint64_t v4 = 0x6C61766F72707061;
        unint64_t v9 = 0xED00006574617453;
        break;
      case 7:
        unint64_t v9 = 0x800000010140CE60;
        unint64_t v4 = 0xD000000000000011;
        break;
      default:
        break;
    }
    *(void *)(v8 + 56) = &type metadata for String;
    *(void *)(v8 + 64) = sub_10000B4CC();
    v10[4] = v4;
    v10[5] = v9;
    v10[12] = sub_10001D4B0(0, (unint64_t *)&qword_10163AE60);
    v10[13] = sub_1000A038C();
    v10[9] = a2;
    sub_10001D4B0(0, (unint64_t *)&qword_10163AE70);
    id v11 = a2;
    uint64_t v12 = (void *)static OS_os_log.default.getter();
    os_log(_:dso:log:_:_:)();
    swift_bridgeObjectRelease();

    sub_100F13D60();
    swift_allocError();
    *uint64_t v13 = 2;
    return swift_willThrow();
  }
  return result;
}

unint64_t sub_100F12224(char a1, id a2)
{
  unint64_t v4 = 1701869940;
  id v5 = [a2 encryptedValues];
  NSString v6 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  [v5 objectForKeyedSubscript:v6];
  swift_unknownObjectRelease();

  sub_10000588C(&qword_1016636B0);
  if (!swift_dynamicCast() || (unint64_t result = v14, v14 >= 3))
  {
    static os_log_type_t.error.getter();
    sub_10000588C((uint64_t *)&unk_10163AD00);
    uint64_t v8 = swift_allocObject();
    *(_OWORD *)(v8 + 16) = xmmword_101347BA0;
    unint64_t v9 = 0xE400000000000000;
    uint64_t v10 = (void *)v8;
    switch(a1)
    {
      case 1:
        unint64_t v4 = 1701667182;
        break;
      case 2:
        unint64_t v9 = 0xE800000000000000;
        unint64_t v4 = 0x656475746974616CLL;
        break;
      case 3:
        unint64_t v4 = 0x64757469676E6F6CLL;
        unint64_t v9 = 0xE900000000000065;
        break;
      case 4:
        unint64_t v9 = 0xE600000000000000;
        unint64_t v4 = 0x737569646172;
        break;
      case 5:
        unint64_t v4 = 0x636E657265666572;
        unint64_t v9 = 0xEE00656D61724665;
        break;
      case 6:
        unint64_t v4 = 0x6C61766F72707061;
        unint64_t v9 = 0xED00006574617453;
        break;
      case 7:
        unint64_t v9 = 0x800000010140CE60;
        unint64_t v4 = 0xD000000000000011;
        break;
      default:
        break;
    }
    *(void *)(v8 + 56) = &type metadata for String;
    *(void *)(v8 + 64) = sub_10000B4CC();
    v10[4] = v4;
    v10[5] = v9;
    v10[12] = sub_10001D4B0(0, (unint64_t *)&qword_10163AE60);
    v10[13] = sub_1000A038C();
    v10[9] = a2;
    sub_10001D4B0(0, (unint64_t *)&qword_10163AE70);
    id v11 = a2;
    uint64_t v12 = (void *)static OS_os_log.default.getter();
    os_log(_:dso:log:_:_:)();
    swift_bridgeObjectRelease();

    sub_100F13D60();
    swift_allocError();
    *uint64_t v13 = 2;
    return swift_willThrow();
  }
  return result;
}

unint64_t sub_100F12610(char a1, id a2)
{
  unint64_t v4 = 1701869940;
  id v5 = [a2 encryptedValues];
  NSString v6 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  [v5 objectForKeyedSubscript:v6];
  swift_unknownObjectRelease();

  sub_10000588C(&qword_1016636B0);
  if (!swift_dynamicCast() || (unint64_t result = v14, v14 >= 6))
  {
    static os_log_type_t.error.getter();
    sub_10000588C((uint64_t *)&unk_10163AD00);
    uint64_t v8 = swift_allocObject();
    *(_OWORD *)(v8 + 16) = xmmword_101347BA0;
    unint64_t v9 = 0xE400000000000000;
    uint64_t v10 = (void *)v8;
    switch(a1)
    {
      case 1:
        unint64_t v4 = 1701667182;
        break;
      case 2:
        unint64_t v9 = 0xE800000000000000;
        unint64_t v4 = 0x656475746974616CLL;
        break;
      case 3:
        unint64_t v4 = 0x64757469676E6F6CLL;
        unint64_t v9 = 0xE900000000000065;
        break;
      case 4:
        unint64_t v9 = 0xE600000000000000;
        unint64_t v4 = 0x737569646172;
        break;
      case 5:
        unint64_t v4 = 0x636E657265666572;
        unint64_t v9 = 0xEE00656D61724665;
        break;
      case 6:
        unint64_t v4 = 0x6C61766F72707061;
        unint64_t v9 = 0xED00006574617453;
        break;
      case 7:
        unint64_t v9 = 0x800000010140CE60;
        unint64_t v4 = 0xD000000000000011;
        break;
      default:
        break;
    }
    *(void *)(v8 + 56) = &type metadata for String;
    *(void *)(v8 + 64) = sub_10000B4CC();
    v10[4] = v4;
    v10[5] = v9;
    v10[12] = sub_10001D4B0(0, (unint64_t *)&qword_10163AE60);
    v10[13] = sub_1000A038C();
    v10[9] = a2;
    sub_10001D4B0(0, (unint64_t *)&qword_10163AE70);
    id v11 = a2;
    uint64_t v12 = (void *)static OS_os_log.default.getter();
    os_log(_:dso:log:_:_:)();
    swift_bridgeObjectRelease();

    sub_100F13D60();
    swift_allocError();
    *uint64_t v13 = 2;
    return swift_willThrow();
  }
  return result;
}

void sub_100F129FC(id *a1)
{
  uint64_t v2 = v1;
  uint64_t v46 = type metadata accessor for UUID();
  uint64_t v44 = *(void *)(v46 - 8);
  __chkstk_darwin(v46);
  os_log_type_t v45 = (char *)v40 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  id v42 = a1;
  id v5 = [*a1 encryptedValues];
  swift_getObjectType();
  CKRecordKeyValueSetting.subscript.getter();
  double v7 = v48;
  uint64_t v6 = v49;
  uint64_t v8 = (int *)type metadata accessor for SafeLocation();
  unint64_t v9 = (double *)(v2 + v8[7]);
  double v10 = *v9;
  uint64_t v11 = *((void *)v9 + 1);
  if (!v6) {
    goto LABEL_7;
  }
  if (*(void *)&v7 == *(void *)&v10 && v6 == v11)
  {
    swift_bridgeObjectRelease();
    goto LABEL_9;
  }
  char v13 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  if ((v13 & 1) == 0)
  {
LABEL_7:
    uint64_t v50 = &type metadata for String;
    char v51 = &protocol witness table for String;
    double v48 = v10;
    uint64_t v49 = v11;
    swift_bridgeObjectRetain();
    CKRecordKeyValueSetting.subscript.setter();
  }
LABEL_9:
  CKRecordKeyValueSetting.subscript.getter();
  double v14 = *(double *)(v2 + v8[8]);
  if ((v49 & 1) != 0 || v48 != v14)
  {
    uint64_t v50 = &type metadata for Double;
    char v51 = &protocol witness table for Double;
    double v48 = v14;
    CKRecordKeyValueSetting.subscript.setter();
  }
  CKRecordKeyValueSetting.subscript.getter();
  double v15 = *(double *)(v2 + v8[9]);
  if ((v49 & 1) != 0 || v48 != v15)
  {
    uint64_t v50 = &type metadata for Double;
    char v51 = &protocol witness table for Double;
    double v48 = v15;
    CKRecordKeyValueSetting.subscript.setter();
  }
  CKRecordKeyValueSetting.subscript.getter();
  double v16 = *(double *)(v2 + v8[10]);
  if ((v49 & 1) != 0 || v48 != v16)
  {
    uint64_t v50 = &type metadata for Double;
    char v51 = &protocol witness table for Double;
    double v48 = v16;
    CKRecordKeyValueSetting.subscript.setter();
  }
  CKRecordKeyValueSetting.subscript.getter();
  *(void *)&double v17 = *(unsigned __int8 *)(v2 + v8[11]);
  if ((v49 & 1) != 0 || *(void *)&v48 != *(void *)&v17)
  {
    uint64_t v50 = &type metadata for Int;
    char v51 = &protocol witness table for Int;
    double v48 = v17;
    CKRecordKeyValueSetting.subscript.setter();
  }
  CKRecordKeyValueSetting.subscript.getter();
  *(void *)&double v18 = *(unsigned __int8 *)(v2 + v8[12]);
  if ((v49 & 1) != 0 || *(void *)&v48 != *(void *)&v18)
  {
    uint64_t v50 = &type metadata for Int;
    char v51 = &protocol witness table for Int;
    double v48 = v18;
    CKRecordKeyValueSetting.subscript.setter();
  }
  CKRecordKeyValueSetting.subscript.getter();
  *(void *)&double v19 = *(unsigned __int8 *)(v2 + v8[6]);
  if ((v49 & 1) != 0 || *(void *)&v48 != *(void *)&v19)
  {
    uint64_t v50 = &type metadata for Int;
    char v51 = &protocol witness table for Int;
    double v48 = v19;
    CKRecordKeyValueSetting.subscript.setter();
  }
  CKRecordKeyValueSetting.subscript.getter();
  if ((v49 & 1) != 0 || *(void *)&v48 != *(void *)&v18)
  {
    uint64_t v50 = &type metadata for Int;
    char v51 = &protocol witness table for Int;
    double v48 = v18;
    CKRecordKeyValueSetting.subscript.setter();
  }
  uint64_t v20 = *(void *)(v2 + v8[13]);
  int64_t v21 = *(void *)(v20 + 16);
  double v22 = COERCE_DOUBLE(_swiftEmptyArrayStorage);
  if (v21)
  {
    id v41 = v5;
    double v48 = COERCE_DOUBLE(_swiftEmptyArrayStorage);
    swift_bridgeObjectRetain();
    sub_1000B6ED0(0, v21, 0);
    uint64_t v23 = v44 + 16;
    uint64_t v24 = *(void *)(v44 + 16);
    uint64_t v25 = *(unsigned __int8 *)(v44 + 80);
    v40[1] = v20;
    uint64_t v26 = v20 + ((v25 + 32) & ~v25);
    uint64_t v43 = *(void *)(v44 + 72);
    uint64_t v44 = v24;
    char v27 = (void (**)(char *, uint64_t))(v23 - 8);
    do
    {
      int v29 = v45;
      uint64_t v28 = v46;
      ((void (*)(char *, uint64_t, uint64_t))v44)(v45, v26, v46);
      uint64_t v30 = UUID.uuidString.getter();
      uint64_t v32 = v31;
      (*v27)(v29, v28);
      double v22 = v48;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        sub_1000B6ED0(0, *(void *)(*(void *)&v22 + 16) + 1, 1);
        double v22 = v48;
      }
      unint64_t v34 = *(void *)(*(void *)&v22 + 16);
      unint64_t v33 = *(void *)(*(void *)&v22 + 24);
      if (v34 >= v33 >> 1)
      {
        sub_1000B6ED0(v33 > 1, v34 + 1, 1);
        double v22 = v48;
      }
      *(void *)(*(void *)&v22 + 16) = v34 + 1;
      unint64_t v35 = (void *)(*(void *)&v22 + 16 * v34);
      v35[4] = v30;
      uint64_t v35[5] = v32;
      v26 += v43;
      --v21;
    }
    while (v21);
    swift_bridgeObjectRelease();
    id v5 = v41;
  }
  *(double *)&uint64_t v36 = COERCE_DOUBLE(CKRecord.subscript.getter());
  if (*(double *)&v36 != 0.0
    && (double v48 = *(double *)&v36,
        sub_10000588C((uint64_t *)&unk_10163AE50),
        sub_10000588C(&qword_101654A30),
        (swift_dynamicCast() & 1) != 0)
    && (char v37 = sub_100335B90(v47, *(void **)&v22), swift_bridgeObjectRelease(), (v37 & 1) != 0))
  {
    swift_unknownObjectRelease();
    swift_bridgeObjectRelease();
  }
  else
  {
    Class isa = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    NSString v39 = String._bridgeToObjectiveC()();
    [v5 setObject:isa forKeyedSubscript:v39];
    swift_unknownObjectRelease();
  }
}

uint64_t sub_100F1317C(void *a1)
{
  uint64_t v3 = v1;
  uint64_t v5 = sub_10000588C(&qword_1016636F0);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v8 = (char *)&v11 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10001CD44(a1, a1[3]);
  sub_100F14134();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  long long v13 = *v3;
  char v12 = 0;
  sub_100037BB4();
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  if (!v2)
  {
    unint64_t v9 = (int *)type metadata accessor for SafeLocation();
    LOBYTE(v13) = 1;
    type metadata accessor for UUID();
    sub_100F13CC0(&qword_10163B040, (void (*)(uint64_t))&type metadata accessor for UUID);
    KeyedEncodingContainer.encode<A>(_:forKey:)();
    LOBYTE(v13) = *((unsigned char *)v3 + v9[6]);
    char v12 = 2;
    sub_100F14344();
    KeyedEncodingContainer.encode<A>(_:forKey:)();
    LOBYTE(v13) = 3;
    KeyedEncodingContainer.encode(_:forKey:)();
    LOBYTE(v13) = 4;
    KeyedEncodingContainer.encode(_:forKey:)();
    LOBYTE(v13) = 5;
    KeyedEncodingContainer.encode(_:forKey:)();
    LOBYTE(v13) = 6;
    KeyedEncodingContainer.encode(_:forKey:)();
    LOBYTE(v13) = *((unsigned char *)v3 + v9[11]);
    char v12 = 7;
    sub_100F14398();
    KeyedEncodingContainer.encode<A>(_:forKey:)();
    LOBYTE(v13) = *((unsigned char *)v3 + v9[12]);
    char v12 = 8;
    sub_100F143EC();
    KeyedEncodingContainer.encode<A>(_:forKey:)();
    *(void *)&long long v13 = *(void *)((char *)v3 + v9[13]);
    char v12 = 9;
    sub_10000588C((uint64_t *)&unk_1016636E0);
    sub_100F14440((unint64_t *)&qword_101663710, &qword_10163B040);
    KeyedEncodingContainer.encode<A>(_:forKey:)();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
}

uint64_t sub_100F13558@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v5 = type metadata accessor for UUID();
  uint64_t v27 = *(void *)(v5 - 8);
  uint64_t v28 = v5;
  __chkstk_darwin(v5);
  uint64_t v7 = (char *)&v23 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v26 = sub_10000588C(&qword_1016636B8);
  uint64_t v8 = *(void *)(v26 - 8);
  __chkstk_darwin(v26);
  double v10 = (char *)&v23 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v30 = type metadata accessor for SafeLocation();
  __chkstk_darwin(v30);
  int v29 = (char *)&v23 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10001CD44(a1, a1[3]);
  sub_100F14134();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v2) {
    return _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)a1);
  }
  uint64_t v24 = a2;
  uint64_t v25 = v8;
  char v32 = 0;
  sub_100037AA0();
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  char v12 = v29;
  *(_OWORD *)int v29 = v31;
  LOBYTE(v31) = 1;
  sub_100F13CC0((unint64_t *)&qword_10163B010, (void (*)(uint64_t))&type metadata accessor for UUID);
  uint64_t v13 = v28;
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  double v14 = (int *)v30;
  (*(void (**)(char *, char *, uint64_t))(v27 + 32))(&v12[*(int *)(v30 + 20)], v7, v13);
  char v32 = 2;
  sub_100F14188();
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  v12[v14[6]] = v31;
  LOBYTE(v31) = 3;
  uint64_t v15 = KeyedDecodingContainer.decode(_:forKey:)();
  double v16 = (uint64_t *)&v12[v14[7]];
  uint64_t *v16 = v15;
  v16[1] = v17;
  LOBYTE(v31) = 4;
  KeyedDecodingContainer.decode(_:forKey:)();
  *(void *)&v12[v14[8]] = v18;
  LOBYTE(v31) = 5;
  KeyedDecodingContainer.decode(_:forKey:)();
  *(void *)&v12[v14[9]] = v19;
  LOBYTE(v31) = 6;
  KeyedDecodingContainer.decode(_:forKey:)();
  *(void *)&v12[v14[10]] = v20;
  char v32 = 7;
  sub_100F141DC();
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  v12[v14[11]] = v31;
  char v32 = 8;
  sub_100F14230();
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  v12[v14[12]] = v31;
  sub_10000588C((uint64_t *)&unk_1016636E0);
  char v32 = 9;
  sub_100F14440((unint64_t *)&qword_10166F9B0, (unint64_t *)&qword_10163B010);
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  (*(void (**)(char *, uint64_t))(v25 + 8))(v10, v26);
  uint64_t v21 = (uint64_t)v29;
  *(void *)&v29[*(int *)(v30 + 52)] = v31;
  sub_100F14284(v21, v24);
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)a1);
  return sub_100F142E8(v21);
}

uint64_t sub_100F13BC0@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_100F13558(a1, a2);
}

uint64_t sub_100F13BD8(void *a1)
{
  return sub_100F1317C(a1);
}

uint64_t sub_100F13BF0(uint64_t a1)
{
  *(void *)(a1 + 8) = sub_100F13CC0((unint64_t *)&unk_101663680, (void (*)(uint64_t))type metadata accessor for SafeLocation);
  uint64_t result = sub_100F13CC0(&qword_10165E7D8, (void (*)(uint64_t))type metadata accessor for SafeLocation);
  *(void *)(a1 + 16) = result;
  return result;
}

uint64_t type metadata accessor for SafeLocation()
{
  uint64_t result = qword_101663778;
  if (!qword_101663778) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t sub_100F13CC0(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_100F13D08(uint64_t a1)
{
  uint64_t result = sub_100F13CC0((unint64_t *)&unk_101663690, (void (*)(uint64_t))type metadata accessor for SafeLocation);
  *(void *)(a1 + 8) = result;
  return result;
}

unint64_t sub_100F13D60()
{
  unint64_t result = qword_1016636A0;
  if (!qword_1016636A0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1016636A0);
  }
  return result;
}

double sub_100F13DB4(void *a1)
{
  uint64_t v2 = v1;
  [v1 center];
  double v5 = v4;
  [v1 center];
  id v7 = [objc_allocWithZone((Class)CLLocation) initWithLatitude:v5 longitude:v6];
  [v7 setReferenceFrame:[v2 geoReferenceFrame]];
  [a1 center];
  double v9 = v8;
  [a1 center];
  id v11 = [objc_allocWithZone((Class)CLLocation) initWithLatitude:v9 longitude:v10];
  [v11 setReferenceFrame:[a1 geoReferenceFrame]];
  [v7 distanceFromLocation:v11];
  double v13 = v12;

  return v13;
}

void sub_100F13EE0(void *a1)
{
  double v3 = sub_100F13DB4(a1);
  [v1 radius];
  double v5 = v4;
  [a1 radius];
  double v7 = v6;
  if (v5 + v6 >= v3)
  {
    double v8 = v5 * v5;
    double v9 = v6 * v6;
    if (v3 > vabdd_f64(v6, v5))
    {
      long double v10 = acos((v3 * v3 + v8 - v9) / (v3 * (v5 + v5)));
      long double v11 = v10 + v10;
      long double v12 = acos((v3 * v3 + v9 - v8) / (v3 * (v7 + v7)));
      sin(v12 + v12);
      sin(v11);
    }
  }
}

uint64_t sub_100F14000(uint64_t a1, uint64_t a2)
{
  if ((_s12searchpartyd24KeyRepresentableInternalV23__derived_struct_equalsySbAC_ACtFZ_0(*(void *)a1, *(void *)(a1 + 8), *(void *)a2, *(void *)(a2 + 8)) & 1) == 0)return 0; {
  double v4 = (int *)type metadata accessor for SafeLocation();
  }
  if ((static UUID.== infix(_:_:)() & 1) == 0 || *(unsigned __int8 *)(a1 + v4[6]) != *(unsigned __int8 *)(a2 + v4[6])) {
    return 0;
  }
  uint64_t v5 = v4[7];
  uint64_t v6 = *(void *)(a1 + v5);
  uint64_t v7 = *(void *)(a1 + v5 + 8);
  double v8 = (void *)(a2 + v5);
  BOOL v9 = v6 == *v8 && v7 == v8[1];
  if (!v9 && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0
    || *(double *)(a1 + v4[8]) != *(double *)(a2 + v4[8])
    || *(double *)(a1 + v4[9]) != *(double *)(a2 + v4[9])
    || *(double *)(a1 + v4[10]) != *(double *)(a2 + v4[10])
    || *(unsigned __int8 *)(a1 + v4[11]) != *(unsigned __int8 *)(a2 + v4[11])
    || *(unsigned __int8 *)(a1 + v4[12]) != *(unsigned __int8 *)(a2 + v4[12]))
  {
    return 0;
  }
  uint64_t v10 = v4[13];
  uint64_t v11 = *(void *)(a1 + v10);
  uint64_t v12 = *(void *)(a2 + v10);

  return sub_100338858(v11, v12);
}

unint64_t sub_100F14134()
{
  unint64_t result = qword_1016636C0;
  if (!qword_1016636C0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1016636C0);
  }
  return result;
}

unint64_t sub_100F14188()
{
  unint64_t result = qword_1016636C8;
  if (!qword_1016636C8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1016636C8);
  }
  return result;
}

unint64_t sub_100F141DC()
{
  unint64_t result = qword_1016636D0;
  if (!qword_1016636D0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1016636D0);
  }
  return result;
}

unint64_t sub_100F14230()
{
  unint64_t result = qword_1016636D8;
  if (!qword_1016636D8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1016636D8);
  }
  return result;
}

uint64_t sub_100F14284(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for SafeLocation();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_100F142E8(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for SafeLocation();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

unint64_t sub_100F14344()
{
  unint64_t result = qword_1016636F8;
  if (!qword_1016636F8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1016636F8);
  }
  return result;
}

unint64_t sub_100F14398()
{
  unint64_t result = qword_101663700;
  if (!qword_101663700)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_101663700);
  }
  return result;
}

unint64_t sub_100F143EC()
{
  unint64_t result = qword_101663708;
  if (!qword_101663708)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_101663708);
  }
  return result;
}

uint64_t sub_100F14440(unint64_t *a1, unint64_t *a2)
{
  uint64_t result = *a1;
  if (!result)
  {
    sub_10000592C((uint64_t *)&unk_1016636E0);
    sub_100F13CC0(a2, (void (*)(uint64_t))&type metadata accessor for UUID);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

void *sub_100F144D4()
{
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    sub_1000B8444(0, _swiftEmptyArrayStorage[2] + 1, 1);
  }
  unint64_t v1 = _swiftEmptyArrayStorage[2];
  unint64_t v0 = _swiftEmptyArrayStorage[3];
  if (v1 >= v0 >> 1) {
    sub_1000B8444(v0 > 1, v1 + 1, 1);
  }
  _swiftEmptyArrayStorage[2] = v1 + 1;
  *((unsigned char *)&_swiftEmptyArrayStorage[4] + v1) = 2;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    sub_1000B8444(0, _swiftEmptyArrayStorage[2] + 1, 1);
  }
  unint64_t v3 = _swiftEmptyArrayStorage[2];
  unint64_t v2 = _swiftEmptyArrayStorage[3];
  if (v3 >= v2 >> 1) {
    sub_1000B8444(v2 > 1, v3 + 1, 1);
  }
  _swiftEmptyArrayStorage[2] = v3 + 1;
  *((unsigned char *)&_swiftEmptyArrayStorage[4] + v3) = 3;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    sub_1000B8444(0, _swiftEmptyArrayStorage[2] + 1, 1);
  }
  unint64_t v5 = _swiftEmptyArrayStorage[2];
  unint64_t v4 = _swiftEmptyArrayStorage[3];
  if (v5 >= v4 >> 1) {
    sub_1000B8444(v4 > 1, v5 + 1, 1);
  }
  _swiftEmptyArrayStorage[2] = v5 + 1;
  *((unsigned char *)&_swiftEmptyArrayStorage[4] + v5) = 4;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    sub_1000B8444(0, _swiftEmptyArrayStorage[2] + 1, 1);
  }
  unint64_t v7 = _swiftEmptyArrayStorage[2];
  unint64_t v6 = _swiftEmptyArrayStorage[3];
  if (v7 >= v6 >> 1) {
    sub_1000B8444(v6 > 1, v7 + 1, 1);
  }
  _swiftEmptyArrayStorage[2] = v7 + 1;
  *((unsigned char *)&_swiftEmptyArrayStorage[4] + v7) = 5;
  return _swiftEmptyArrayStorage;
}

unsigned char *storeEnumTagSinglePayload for SafeLocationApprovalState(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 3 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 3) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFD) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFC)
  {
    unsigned int v6 = ((a2 - 253) >> 8) + 1;
    *uint64_t result = a2 + 3;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x100F148B8);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 3;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for SafeLocationApprovalState()
{
  return &type metadata for SafeLocationApprovalState;
}

ValueMetadata *type metadata accessor for SafeLocationReferenceFrame()
{
  return &type metadata for SafeLocationReferenceFrame;
}

unsigned char *storeEnumTagSinglePayload for SafeLocationType(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 5 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 5) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFB) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFA)
  {
    unsigned int v6 = ((a2 - 251) >> 8) + 1;
    *uint64_t result = a2 + 5;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x100F149D0);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 5;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for SafeLocationType()
{
  return &type metadata for SafeLocationType;
}

unsigned char *storeEnumTagSinglePayload for SafeLocation.CodingKeys(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 9 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 9) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xF7) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xF6)
  {
    unsigned int v6 = ((a2 - 247) >> 8) + 1;
    *uint64_t result = a2 + 9;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x100F14AD4);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 9;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for SafeLocation.CodingKeys()
{
  return &type metadata for SafeLocation.CodingKeys;
}

unsigned char *_s12searchpartyd26SafeLocationReferenceFrameOwst_0(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 2 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 2) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFE) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFD)
  {
    unsigned int v6 = ((a2 - 254) >> 8) + 1;
    *uint64_t result = a2 + 2;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x100F14BD8);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 2;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for SafeLocation.SafeLocationConversionError()
{
  return &type metadata for SafeLocation.SafeLocationConversionError;
}

uint64_t *sub_100F14C10(uint64_t *a1, uint64_t *a2, int *a3)
{
  int v5 = *(_DWORD *)(*((void *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v20 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v20 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v7 = *a2;
    unint64_t v8 = a2[1];
    sub_1000361E0(*a2, v8);
    *a1 = v7;
    a1[1] = v8;
    uint64_t v9 = a3[5];
    uint64_t v10 = (char *)a1 + v9;
    uint64_t v11 = (char *)a2 + v9;
    uint64_t v12 = type metadata accessor for UUID();
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v12 - 8) + 16))(v10, v11, v12);
    uint64_t v13 = a3[7];
    *((unsigned char *)a1 + a3[6]) = *((unsigned char *)a2 + a3[6]);
    double v14 = (uint64_t *)((char *)a1 + v13);
    uint64_t v15 = (uint64_t *)((char *)a2 + v13);
    uint64_t v16 = v15[1];
    *double v14 = *v15;
    v14[1] = v16;
    uint64_t v17 = a3[9];
    *(uint64_t *)((char *)a1 + a3[8]) = *(uint64_t *)((char *)a2 + a3[8]);
    *(uint64_t *)((char *)a1 + v17) = *(uint64_t *)((char *)a2 + v17);
    uint64_t v18 = a3[11];
    *(uint64_t *)((char *)a1 + a3[10]) = *(uint64_t *)((char *)a2 + a3[10]);
    *((unsigned char *)a1 + v18) = *((unsigned char *)a2 + v18);
    uint64_t v19 = a3[13];
    *((unsigned char *)a1 + a3[12]) = *((unsigned char *)a2 + a3[12]);
    *(uint64_t *)((char *)a1 + v19) = *(uint64_t *)((char *)a2 + v19);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  return a1;
}

uint64_t sub_100F14D5C(uint64_t a1, uint64_t a2)
{
  sub_10001CFB8(*(void *)a1, *(void *)(a1 + 8));
  uint64_t v4 = a1 + *(int *)(a2 + 20);
  uint64_t v5 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8))(v4, v5);
  swift_bridgeObjectRelease();

  return swift_bridgeObjectRelease();
}

uint64_t *sub_100F14DFC(uint64_t *a1, uint64_t *a2, int *a3)
{
  uint64_t v6 = *a2;
  unint64_t v7 = a2[1];
  sub_1000361E0(*a2, v7);
  *a1 = v6;
  a1[1] = v7;
  uint64_t v8 = a3[5];
  uint64_t v9 = (char *)a1 + v8;
  uint64_t v10 = (char *)a2 + v8;
  uint64_t v11 = type metadata accessor for UUID();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v11 - 8) + 16))(v9, v10, v11);
  uint64_t v12 = a3[7];
  *((unsigned char *)a1 + a3[6]) = *((unsigned char *)a2 + a3[6]);
  uint64_t v13 = (uint64_t *)((char *)a1 + v12);
  double v14 = (uint64_t *)((char *)a2 + v12);
  uint64_t v15 = v14[1];
  *uint64_t v13 = *v14;
  v13[1] = v15;
  uint64_t v16 = a3[9];
  *(uint64_t *)((char *)a1 + a3[8]) = *(uint64_t *)((char *)a2 + a3[8]);
  *(uint64_t *)((char *)a1 + v16) = *(uint64_t *)((char *)a2 + v16);
  uint64_t v17 = a3[11];
  *(uint64_t *)((char *)a1 + a3[10]) = *(uint64_t *)((char *)a2 + a3[10]);
  *((unsigned char *)a1 + v17) = *((unsigned char *)a2 + v17);
  uint64_t v18 = a3[13];
  *((unsigned char *)a1 + a3[12]) = *((unsigned char *)a2 + a3[12]);
  *(uint64_t *)((char *)a1 + v18) = *(uint64_t *)((char *)a2 + v18);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t *sub_100F14EF8(uint64_t *a1, uint64_t *a2, int *a3)
{
  uint64_t v6 = *a2;
  unint64_t v7 = a2[1];
  sub_1000361E0(*a2, v7);
  uint64_t v8 = *a1;
  unint64_t v9 = a1[1];
  *a1 = v6;
  a1[1] = v7;
  sub_10001CFB8(v8, v9);
  uint64_t v10 = a3[5];
  uint64_t v11 = (char *)a1 + v10;
  uint64_t v12 = (char *)a2 + v10;
  uint64_t v13 = type metadata accessor for UUID();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v13 - 8) + 24))(v11, v12, v13);
  *((unsigned char *)a1 + a3[6]) = *((unsigned char *)a2 + a3[6]);
  uint64_t v14 = a3[7];
  uint64_t v15 = (uint64_t *)((char *)a1 + v14);
  uint64_t v16 = (uint64_t *)((char *)a2 + v14);
  void *v15 = *v16;
  v15[1] = v16[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(uint64_t *)((char *)a1 + a3[8]) = *(uint64_t *)((char *)a2 + a3[8]);
  *(uint64_t *)((char *)a1 + a3[9]) = *(uint64_t *)((char *)a2 + a3[9]);
  *(uint64_t *)((char *)a1 + a3[10]) = *(uint64_t *)((char *)a2 + a3[10]);
  *((unsigned char *)a1 + a3[11]) = *((unsigned char *)a2 + a3[11]);
  *((unsigned char *)a1 + a3[12]) = *((unsigned char *)a2 + a3[12]);
  *(uint64_t *)((char *)a1 + a3[13]) = *(uint64_t *)((char *)a2 + a3[13]);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

_OWORD *sub_100F15028(_OWORD *a1, _OWORD *a2, int *a3)
{
  *a1 = *a2;
  uint64_t v6 = a3[5];
  unint64_t v7 = (char *)a1 + v6;
  uint64_t v8 = (char *)a2 + v6;
  uint64_t v9 = type metadata accessor for UUID();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v9 - 8) + 32))(v7, v8, v9);
  uint64_t v10 = a3[7];
  *((unsigned char *)a1 + a3[6]) = *((unsigned char *)a2 + a3[6]);
  *(_OWORD *)((char *)a1 + v10) = *(_OWORD *)((char *)a2 + v10);
  uint64_t v11 = a3[9];
  *(void *)((char *)a1 + a3[8]) = *(void *)((char *)a2 + a3[8]);
  *(void *)((char *)a1 + v11) = *(void *)((char *)a2 + v11);
  uint64_t v12 = a3[11];
  *(void *)((char *)a1 + a3[10]) = *(void *)((char *)a2 + a3[10]);
  *((unsigned char *)a1 + v12) = *((unsigned char *)a2 + v12);
  uint64_t v13 = a3[13];
  *((unsigned char *)a1 + a3[12]) = *((unsigned char *)a2 + a3[12]);
  *(void *)((char *)a1 + v13) = *(void *)((char *)a2 + v13);
  return a1;
}

uint64_t *sub_100F15104(uint64_t *a1, _OWORD *a2, int *a3)
{
  uint64_t v6 = *a1;
  unint64_t v7 = a1[1];
  *(_OWORD *)a1 = *a2;
  sub_10001CFB8(v6, v7);
  uint64_t v8 = a3[5];
  uint64_t v9 = (char *)a1 + v8;
  uint64_t v10 = (char *)a2 + v8;
  uint64_t v11 = type metadata accessor for UUID();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v11 - 8) + 40))(v9, v10, v11);
  uint64_t v12 = a3[7];
  *((unsigned char *)a1 + a3[6]) = *((unsigned char *)a2 + a3[6]);
  uint64_t v13 = (uint64_t *)((char *)a1 + v12);
  uint64_t v14 = (uint64_t *)((char *)a2 + v12);
  uint64_t v16 = *v14;
  uint64_t v15 = v14[1];
  *uint64_t v13 = v16;
  v13[1] = v15;
  swift_bridgeObjectRelease();
  uint64_t v17 = a3[9];
  *(uint64_t *)((char *)a1 + a3[8]) = *(void *)((char *)a2 + a3[8]);
  *(uint64_t *)((char *)a1 + v17) = *(void *)((char *)a2 + v17);
  uint64_t v18 = a3[11];
  *(uint64_t *)((char *)a1 + a3[10]) = *(void *)((char *)a2 + a3[10]);
  *((unsigned char *)a1 + v18) = *((unsigned char *)a2 + v18);
  uint64_t v19 = a3[13];
  *((unsigned char *)a1 + a3[12]) = *((unsigned char *)a2 + a3[12]);
  *(uint64_t *)((char *)a1 + v19) = *(void *)((char *)a2 + v19);
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t sub_100F15204(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_100F15218);
}

uint64_t sub_100F15218(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for UUID();
  uint64_t v7 = *(void *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == a2)
  {
    uint64_t v8 = v6;
    uint64_t v9 = a1 + *(int *)(a3 + 20);
    uint64_t v10 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    return v10(v9, a2, v8);
  }
  else
  {
    unint64_t v12 = *(void *)(a1 + *(int *)(a3 + 28) + 8);
    if (v12 >= 0xFFFFFFFF) {
      LODWORD(v12) = -1;
    }
    return (v12 + 1);
  }
}

uint64_t sub_100F152E0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_100F152F4);
}

uint64_t sub_100F152F4(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result = type metadata accessor for UUID();
  uint64_t v9 = *(void *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    uint64_t v10 = result;
    uint64_t v11 = a1 + *(int *)(a4 + 20);
    unint64_t v12 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    return v12(v11, a2, a2, v10);
  }
  else
  {
    *(void *)(a1 + *(int *)(a4 + 28) + 8) = (a2 - 1);
  }
  return result;
}

uint64_t sub_100F153B8()
{
  uint64_t result = type metadata accessor for UUID();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t sub_100F15498()
{
  return sub_100F13CC0(&qword_1016637D0, (void (*)(uint64_t))type metadata accessor for SafeLocation);
}

unint64_t sub_100F154E4()
{
  unint64_t result = qword_1016637D8;
  if (!qword_1016637D8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1016637D8);
  }
  return result;
}

unint64_t sub_100F1553C()
{
  unint64_t result = qword_1016637E0;
  if (!qword_1016637E0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1016637E0);
  }
  return result;
}

unint64_t sub_100F15594()
{
  unint64_t result = qword_1016637E8;
  if (!qword_1016637E8)
  {
    sub_10000592C(&qword_1016637F0);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1016637E8);
  }
  return result;
}

unint64_t sub_100F155F4()
{
  unint64_t result = qword_1016637F8;
  if (!qword_1016637F8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1016637F8);
  }
  return result;
}

unint64_t sub_100F1564C()
{
  unint64_t result = qword_101663800;
  if (!qword_101663800)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_101663800);
  }
  return result;
}

unint64_t sub_100F156A4()
{
  unint64_t result = qword_101663808;
  if (!qword_101663808)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_101663808);
  }
  return result;
}

unint64_t sub_100F156FC()
{
  unint64_t result = qword_101663810;
  if (!qword_101663810)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_101663810);
  }
  return result;
}

unint64_t sub_100F15754()
{
  unint64_t result = qword_101663818;
  if (!qword_101663818)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_101663818);
  }
  return result;
}

uint64_t sub_100F157A8(uint64_t a1, uint64_t a2)
{
  if (a1 == 0xD000000000000010 && a2 == 0x80000001013EEA50
    || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x696669746E656469 && a2 == 0xEA00000000007265 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 1701869940 && a2 == 0xE400000000000000 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else if (a1 == 1701667182 && a2 == 0xE400000000000000 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 3;
  }
  else if (a1 == 0x656475746974616CLL && a2 == 0xE800000000000000 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 4;
  }
  else if (a1 == 0x64757469676E6F6CLL && a2 == 0xE900000000000065 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 5;
  }
  else if (a1 == 0x737569646172 && a2 == 0xE600000000000000 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 6;
  }
  else if (a1 == 0x636E657265666572 && a2 == 0xEE00656D61724665 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 7;
  }
  else if (a1 == 0x6C61766F72707061 && a2 == 0xED00006574617453 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 8;
  }
  else if (a1 == 0xD000000000000011 && a2 == 0x800000010140CE60)
  {
    swift_bridgeObjectRelease();
    return 9;
  }
  else
  {
    char v5 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v5) {
      return 9;
    }
    else {
      return 10;
    }
  }
}

unint64_t sub_100F15BEC()
{
  unint64_t result = qword_101663820;
  if (!qword_101663820)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_101663820);
  }
  return result;
}

unint64_t sub_100F15C40()
{
  unint64_t result = qword_101663828;
  if (!qword_101663828)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_101663828);
  }
  return result;
}

unint64_t sub_100F15C94()
{
  unint64_t result = qword_101663830;
  if (!qword_101663830)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_101663830);
  }
  return result;
}

unint64_t sub_100F15CEC()
{
  v0._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  String.append(_:)(v0);
  swift_bridgeObjectRelease();
  v1._countAndFlagsBits = 41;
  v1._object = (void *)0xE100000000000000;
  String.append(_:)(v1);
  return 0xD000000000000012;
}

ValueMetadata *type metadata accessor for SecureLocationsIndex()
{
  return &type metadata for SecureLocationsIndex;
}

unint64_t sub_100F15D88()
{
  unint64_t result = qword_101663840;
  if (!qword_101663840)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_101663840);
  }
  return result;
}

unint64_t sub_100F15DE0()
{
  unint64_t result = qword_101663848;
  if (!qword_101663848)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_101663848);
  }
  return result;
}

unint64_t sub_100F15E34(void *a1)
{
  a1[1] = sub_100F15E94();
  a1[2] = sub_100F15EE8();
  a1[3] = sub_100BB24F8();
  a1[4] = sub_100BB254C();
  a1[5] = sub_100F15F3C();
  a1[6] = sub_100F15F90();
  a1[7] = sub_100F15FE4();
  unint64_t result = sub_100F16038();
  a1[8] = result;
  return result;
}

unint64_t sub_100F15E94()
{
  unint64_t result = qword_101663850;
  if (!qword_101663850)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_101663850);
  }
  return result;
}

unint64_t sub_100F15EE8()
{
  unint64_t result = qword_101663858;
  if (!qword_101663858)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_101663858);
  }
  return result;
}

unint64_t sub_100F15F3C()
{
  unint64_t result = qword_101663860;
  if (!qword_101663860)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_101663860);
  }
  return result;
}

unint64_t sub_100F15F90()
{
  unint64_t result = qword_101663868;
  if (!qword_101663868)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_101663868);
  }
  return result;
}

unint64_t sub_100F15FE4()
{
  unint64_t result = qword_101663870;
  if (!qword_101663870)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_101663870);
  }
  return result;
}

unint64_t sub_100F16038()
{
  unint64_t result = qword_101663878;
  if (!qword_101663878)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_101663878);
  }
  return result;
}

id sub_100F1608C()
{
  id v1 = *v0;
  id v2 = *v0;
  return v1;
}

uint64_t sub_100F160B4()
{
  return swift_bridgeObjectRetain();
}

uint64_t sub_100F160BC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_10001D074(v2 + *(int *)(a1 + 24), a2, &qword_101638CF0);
}

uint64_t sub_100F160E8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_10001D074(v2 + *(int *)(a1 + 28), a2, (uint64_t *)&unk_10163AC90);
}

uint64_t sub_100F16114(uint64_t a1)
{
  return *(void *)(v1 + *(int *)(a1 + 32));
}

uint64_t sub_100F16128@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_10001D074(v2 + *(int *)(a1 + 36), a2, (uint64_t *)&unk_10163AC90);
}

id sub_100F16154()
{
  uint64_t v1 = *(void **)(v0 + 32);
  if (v1)
  {
    id v2 = *(id *)(v0 + 32);
  }
  else
  {
    if (qword_1016371C0 == -1)
    {
      int v3 = 0;
    }
    else
    {
      swift_once();
      int v3 = *(void **)(v0 + 32);
    }
    uint64_t v4 = (void *)qword_10170EED0;
    *(void *)(v0 + 32) = qword_10170EED0;
    id v2 = v4;

    uint64_t v1 = 0;
  }
  id v5 = v1;
  return v2;
}

void sub_100F161E8(void *a1)
{
  id v26 = a1;
  id v2 = (int *)type metadata accessor for ServiceStateConfigurationLayer();
  __chkstk_darwin(v2);
  uint64_t v4 = (uint64_t *)((char *)&v25 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v5 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v7 = v6;
  if (v5 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v7 == v8) {
    char v10 = 1;
  }
  else {
    char v10 = _stringCompareWithSmolCheck(_:_:expecting:)();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (sub_100F186C4(2u, 2u, v10 & 1))
  {
    id v11 = sub_100F16154();
    static String._unconditionallyBridgeFromObjectiveC(_:)();
    NSString v12 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    uint64_t v13 = SPSettingsServiceStateKey;
    [v11 setObject:v12 forKey:SPSettingsServiceStateKey];

    id v14 = sub_100F16154();
    id v15 = [v14 stringForKey:v13];

    if (!v15)
    {
      if (qword_101636E28 != -1) {
        swift_once();
      }
      id v15 = (id)qword_10170E680;
    }
    uint64_t v16 = sub_100F16E78();
    sub_100F17324((uint64_t)v4 + v2[6]);
    sub_100F17C4C((uint64_t)v4 + v2[7]);
    uint64_t v17 = sub_100F17C78();
    char v19 = v18;
    sub_100F17F8C((uint64_t)v4 + v2[9]);
    id v20 = sub_100F16154();
    NSString v21 = String._bridgeToObjectiveC()();
    unsigned __int8 v22 = [v20 BOOLForKey:v21];

    *uint64_t v4 = v15;
    v4[1] = v16;
    uint64_t v23 = (char *)v4 + v2[8];
    *(void *)uint64_t v23 = v17;
    v23[8] = v19 & 1;
    *((unsigned char *)v4 + v2[10]) = v22;
    sub_100F19B08((uint64_t)v4, v1);

    sub_100F19E98((uint64_t)v4);
  }
  else
  {
    id v24 = v26;
  }
}

void *sub_100F16490()
{
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for OS_dispatch_queue.Attributes();
  __chkstk_darwin(v2);
  uint64_t v3 = type metadata accessor for DispatchQoS();
  __chkstk_darwin(v3 - 8);
  uint64_t v4 = type metadata accessor for OS_dispatch_queue.AutoreleaseFrequency();
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v7 = (char *)&v29 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v0[2] = _swiftEmptyArrayStorage;
  sub_10000584C();
  (*(void (**)(char *, void, uint64_t))(v5 + 104))(v7, enum case for OS_dispatch_queue.AutoreleaseFrequency.workItem(_:), v4);
  static DispatchQoS.unspecified.getter();
  int v29 = _swiftEmptyArrayStorage;
  sub_100F1A0DC((unint64_t *)&qword_101638CC0, 255, (void (*)(uint64_t))&type metadata accessor for OS_dispatch_queue.Attributes);
  sub_10000588C((uint64_t *)&unk_1016376F0);
  sub_100062734((unint64_t *)&qword_101638CD0, (uint64_t *)&unk_1016376F0);
  dispatch thunk of SetAlgebra.init<A>(_:)();
  v0[3] = OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)();
  v0[4] = 0;
  v0[5] = 0;
  v0[6] = 0xD000000000000014;
  v0[7] = 0x800000010140CAF0;
  int v29 = (void *)static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v30 = v8;
  v9._countAndFlagsBits = 45;
  v9._object = (void *)0xE100000000000000;
  String.append(_:)(v9);
  unint64_t result = (id)MobileGestalt_get_current_device();
  if (result)
  {
    id v11 = result;
    id v12 = (id)MobileGestalt_copy_uniqueDeviceID_obj();

    if (v12)
    {
      uint64_t v13 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      id v15 = v14;
    }
    else
    {
      uint64_t v13 = 0;
      id v15 = (void *)0xE000000000000000;
    }
    v16._countAndFlagsBits = v13;
    v16._object = v15;
    String.append(_:)(v16);
    swift_bridgeObjectRelease();
    uint64_t v17 = v29;
    uint64_t v18 = v30;
    sub_10000588C(&qword_1016552B0);
    uint64_t v19 = swift_allocObject();
    *(_OWORD *)(v19 + 16) = xmmword_10134BFA0;
    *(void *)(v19 + 32) = static String._unconditionallyBridgeFromObjectiveC(_:)();
    *(void *)(v19 + 40) = v20;
    *(void *)(v19 + 48) = static String._unconditionallyBridgeFromObjectiveC(_:)();
    *(void *)(v19 + 56) = v21;
    *(void *)(v19 + 64) = v17;
    *(void *)(v19 + 72) = v18;
    *(void *)(v19 + 80) = static String._unconditionallyBridgeFromObjectiveC(_:)();
    *(void *)(v19 + 88) = v22;
    *(void *)(v19 + 96) = static String._unconditionallyBridgeFromObjectiveC(_:)();
    *(void *)(v19 + 104) = v23;
    *(void *)(v19 + 112) = static String._unconditionallyBridgeFromObjectiveC(_:)();
    *(void *)(v19 + 120) = v24;
    sub_100F16154();
    objc_allocWithZone((Class)type metadata accessor for UserDefaultsObserver());
    swift_retain();
    uint64_t v25 = UserDefaultsObserver.init(keys:defaults:notificationBlock:)();
    id v26 = (void *)v1[5];
    v1[5] = v25;

    uint64_t v27 = (void *)v1[5];
    if (v27)
    {
      id v28 = v27;
      dispatch thunk of UserDefaultsObserver.start()();
    }
    return v1;
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_100F168A0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = (int *)type metadata accessor for ServiceStateConfigurationLayer();
  __chkstk_darwin(v4);
  uint64_t v6 = (uint64_t *)((char *)&v18 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0));
  id v7 = sub_100F16154();
  id v8 = [v7 stringForKey:SPSettingsServiceStateKey];

  if (!v8)
  {
    if (qword_101636E28 != -1) {
      swift_once();
    }
    id v8 = (id)qword_10170E680;
  }
  Swift::String v9 = sub_100F16E78();
  sub_100F17324((uint64_t)v6 + v4[6]);
  sub_100F17C4C((uint64_t)v6 + v4[7]);
  uint64_t v10 = sub_100F17C78();
  char v12 = v11;
  sub_100F17F8C((uint64_t)v6 + v4[9]);
  id v13 = sub_100F16154();
  NSString v14 = String._bridgeToObjectiveC()();
  unsigned __int8 v15 = [v13 BOOLForKey:v14];

  *uint64_t v6 = v8;
  v6[1] = v9;
  Swift::String v16 = (char *)v6 + v4[8];
  *(void *)Swift::String v16 = v10;
  v16[8] = v12 & 1;
  *((unsigned char *)v6 + v4[10]) = v15;
  sub_100F19B08((uint64_t)v6, a3);
  return sub_100F19E98((uint64_t)v6);
}

uint64_t sub_100F16A44()
{
  uint64_t v1 = (int *)type metadata accessor for ServiceStateConfigurationLayer();
  __chkstk_darwin(v1);
  uint64_t v3 = (uint64_t *)((char *)&v18 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0));
  if (qword_101636E28 != -1) {
    swift_once();
  }
  sub_100F161E8((id)qword_10170E680);
  id v4 = sub_100F16154();
  [v4 removeObjectForKey:SPBeaconZoneCreationDateKey];

  id v5 = sub_100F16154();
  [v5 removeObjectForKey:SPBeaconZoneCreationErrorCodeKey];

  id v6 = sub_100F16154();
  [v6 removeObjectForKey:SPLastKeyRollDateKey];

  static os_log_type_t.default.getter();
  if (qword_1016372C8 != -1) {
    swift_once();
  }
  os_log(_:dso:log:_:_:)();
  id v7 = sub_100F16154();
  id v8 = [v7 stringForKey:SPSettingsServiceStateKey];

  if (!v8) {
    id v8 = (id)qword_10170E680;
  }
  Swift::String v9 = sub_100F16E78();
  sub_100F17324((uint64_t)v3 + v1[6]);
  sub_100F17C4C((uint64_t)v3 + v1[7]);
  uint64_t v10 = sub_100F17C78();
  char v12 = v11;
  sub_100F17F8C((uint64_t)v3 + v1[9]);
  id v13 = sub_100F16154();
  NSString v14 = String._bridgeToObjectiveC()();
  unsigned __int8 v15 = [v13 BOOLForKey:v14];

  *uint64_t v3 = v8;
  v3[1] = v9;
  Swift::String v16 = (char *)v3 + v1[8];
  *(void *)Swift::String v16 = v10;
  v16[8] = v12 & 1;
  *((unsigned char *)v3 + v1[10]) = v15;
  sub_100F19B08((uint64_t)v3, v0);
  return sub_100F19E98((uint64_t)v3);
}

uint64_t sub_100F16CBC(char a1, char a2)
{
  id v5 = (int *)type metadata accessor for ServiceStateConfigurationLayer();
  __chkstk_darwin(v5);
  id v7 = (uint64_t *)((char *)&v19 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t result = sub_100F186C4(a1 & 1, a2 & 1, 2u);
  if (result)
  {
    id v9 = sub_100F16154();
    id v10 = [v9 stringForKey:SPSettingsServiceStateKey];

    if (!v10)
    {
      if (qword_101636E28 != -1) {
        swift_once();
      }
      id v10 = (id)qword_10170E680;
    }
    char v11 = sub_100F16E78();
    sub_100F17324((uint64_t)v7 + v5[6]);
    sub_100F17C4C((uint64_t)v7 + v5[7]);
    uint64_t v12 = sub_100F17C78();
    char v14 = v13;
    sub_100F17F8C((uint64_t)v7 + v5[9]);
    id v15 = sub_100F16154();
    NSString v16 = String._bridgeToObjectiveC()();
    unsigned __int8 v17 = [v15 BOOLForKey:v16];

    *id v7 = v10;
    v7[1] = v11;
    uint64_t v18 = (char *)v7 + v5[8];
    *(void *)uint64_t v18 = v12;
    v18[8] = v14 & 1;
    *((unsigned char *)v7 + v5[10]) = v17;
    sub_100F19B08((uint64_t)v7, v2);
    return sub_100F19E98((uint64_t)v7);
  }
  return result;
}

void *sub_100F16E78()
{
  id v0 = sub_100F16154();
  id v1 = [v0 arrayForKey:SPSettingsServiceDisabledReasonsKey];

  if (!v1) {
    return 0;
  }
  uint64_t v2 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  uint64_t v3 = sub_1004C736C(v2);
  swift_bridgeObjectRelease();
  if (!v3) {
    return 0;
  }
  uint64_t v4 = v3[2];
  if (v4)
  {
    swift_bridgeObjectRetain();
    id v5 = v3 + 5;
    uint64_t v6 = _swiftEmptyArrayStorage;
    do
    {
      swift_bridgeObjectRetain();
      NSString v7 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease();
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
        uint64_t v6 = sub_100A6F6F8(0, v6[2] + 1, 1, v6);
      }
      unint64_t v9 = v6[2];
      unint64_t v8 = v6[3];
      if (v9 >= v8 >> 1) {
        uint64_t v6 = sub_100A6F6F8((void *)(v8 > 1), v9 + 1, 1, v6);
      }
      v5 += 2;
      v6[2] = v9 + 1;
      v6[v9 + 4] = v7;
      --v4;
    }
    while (v4);
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v6 = _swiftEmptyArrayStorage;
  }
  swift_bridgeObjectRelease();
  return v6;
}

void sub_100F16FF4(uint64_t a1)
{
  if (a1)
  {
    int64_t v1 = *(void *)(a1 + 16);
    if (v1)
    {
      sub_1000B6ED0(0, v1, 0);
      uint64_t v2 = 0;
      do
      {
        uint64_t v3 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        uint64_t v5 = v4;
        unint64_t v7 = _swiftEmptyArrayStorage[2];
        unint64_t v6 = _swiftEmptyArrayStorage[3];
        if (v7 >= v6 >> 1) {
          sub_1000B6ED0(v6 > 1, v7 + 1, 1);
        }
        ++v2;
        _swiftEmptyArrayStorage[2] = v7 + 1;
        unint64_t v8 = &_swiftEmptyArrayStorage[2 * v7];
        v8[4] = v3;
        void v8[5] = v5;
      }
      while (v1 != v2);
    }
    swift_bridgeObjectRelease();
  }
  id v9 = sub_100F16154();
  Class isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  [v9 setObject:isa forKey:SPSettingsServiceDisabledReasonsKey];
}

uint64_t sub_100F17140(char a1)
{
  uint64_t v3 = (int *)type metadata accessor for ServiceStateConfigurationLayer();
  __chkstk_darwin(v3);
  uint64_t v5 = (uint64_t *)((char *)&v19 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0));
  id v6 = sub_100F16154();
  NSString v7 = String._bridgeToObjectiveC()();
  [v6 setBool:a1 & 1 forKey:v7];

  id v8 = sub_100F16154();
  id v9 = [v8 stringForKey:SPSettingsServiceStateKey];

  if (!v9)
  {
    if (qword_101636E28 != -1) {
      swift_once();
    }
    id v9 = (id)qword_10170E680;
  }
  id v10 = sub_100F16E78();
  sub_100F17324((uint64_t)v5 + v3[6]);
  sub_100F17C4C((uint64_t)v5 + v3[7]);
  uint64_t v11 = sub_100F17C78();
  char v13 = v12;
  sub_100F17F8C((uint64_t)v5 + v3[9]);
  id v14 = sub_100F16154();
  NSString v15 = String._bridgeToObjectiveC()();
  unsigned __int8 v16 = [v14 BOOLForKey:v15];

  *uint64_t v5 = v9;
  v5[1] = v10;
  unsigned __int8 v17 = (char *)v5 + v3[8];
  *(void *)unsigned __int8 v17 = v11;
  v17[8] = v13 & 1;
  *((unsigned char *)v5 + v3[10]) = v16;
  sub_100F19B08((uint64_t)v5, v1);
  return sub_100F19E98((uint64_t)v5);
}

id sub_100F17324@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = sub_10000588C(&qword_101638CF0);
  __chkstk_darwin(v2 - 8);
  uint64_t v4 = (char *)v20 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v20[0] = static String._unconditionallyBridgeFromObjectiveC(_:)();
  v20[1] = v5;
  v6._countAndFlagsBits = 45;
  v6._object = (void *)0xE100000000000000;
  String.append(_:)(v6);
  id result = (id)MobileGestalt_get_current_device();
  if (result)
  {
    id v8 = result;
    id v9 = (id)MobileGestalt_copy_uniqueDeviceID_obj();

    if (v9)
    {
      uint64_t v10 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      char v12 = v11;
    }
    else
    {
      uint64_t v10 = 0;
      char v12 = (void *)0xE000000000000000;
    }
    v13._countAndFlagsBits = v10;
    v13._object = v12;
    String.append(_:)(v13);
    swift_bridgeObjectRelease();
    id v14 = sub_100F16154();
    NSString v15 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    id v16 = [v14 stringForKey:v15];

    if (!v16) {
      goto LABEL_8;
    }
    static String._unconditionallyBridgeFromObjectiveC(_:)();

    UUID.init(uuidString:)();
    swift_bridgeObjectRelease();
    uint64_t v17 = type metadata accessor for UUID();
    uint64_t v18 = *(void *)(v17 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v18 + 48))(v4, 1, v17) == 1)
    {
      sub_10001DAB4((uint64_t)v4, &qword_101638CF0);
LABEL_8:
      uint64_t v19 = type metadata accessor for UUID();
      return (id)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v19 - 8) + 56))(a1, 1, 1, v19);
    }
    (*(void (**)(uint64_t, char *, uint64_t))(v18 + 32))(a1, v4, v17);
    return (id)(*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(v18 + 56))(a1, 0, 1, v17);
  }
  else
  {
    __break(1u);
  }
  return result;
}

id sub_100F175B0(uint64_t a1)
{
  uint64_t v55 = type metadata accessor for ServiceStateConfigurationLayer();
  __chkstk_darwin(v55);
  char v53 = &v51[-((v3 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v4 = type metadata accessor for UUID();
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  NSString v7 = &v51[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v8 = sub_10000588C((uint64_t *)&unk_10166EAF0);
  uint64_t v9 = v8 - 8;
  __chkstk_darwin(v8);
  uint64_t v11 = &v51[-((v10 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v12 = sub_10000588C(&qword_101638CF0);
  uint64_t v13 = __chkstk_darwin(v12 - 8);
  char v54 = &v51[-((v14 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v15 = __chkstk_darwin(v13);
  uint64_t v17 = &v51[-v16];
  __chkstk_darwin(v15);
  uint64_t v19 = &v51[-v18];
  uint64_t v56 = v1;
  sub_100F17324((uint64_t)&v51[-v18]);
  uint64_t v20 = (uint64_t)&v11[*(int *)(v9 + 56)];
  uint64_t v58 = a1;
  sub_10001D074(a1, (uint64_t)v11, &qword_101638CF0);
  sub_10001D074((uint64_t)v19, v20, &qword_101638CF0);
  uint64_t v57 = v5;
  uint64_t v21 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v5 + 48);
  if (v21((uint64_t)v11, 1, v4) == 1)
  {
    sub_10001DAB4((uint64_t)v19, &qword_101638CF0);
    if (v21(v20, 1, v4) == 1)
    {
      sub_10001DAB4((uint64_t)v11, &qword_101638CF0);
      uint64_t v22 = v58;
      return (id)sub_10001DAB4(v22, &qword_101638CF0);
    }
    goto LABEL_6;
  }
  sub_10001D074((uint64_t)v11, (uint64_t)v17, &qword_101638CF0);
  if (v21(v20, 1, v4) == 1)
  {
    sub_10001DAB4((uint64_t)v19, &qword_101638CF0);
    (*(void (**)(unsigned char *, uint64_t))(v57 + 8))(v17, v4);
LABEL_6:
    sub_10001DAB4((uint64_t)v11, (uint64_t *)&unk_10166EAF0);
    uint64_t v22 = v58;
    uint64_t v23 = v56;
    goto LABEL_7;
  }
  uint64_t v32 = v57;
  (*(void (**)(unsigned char *, uint64_t, uint64_t))(v57 + 32))(v7, v20, v4);
  sub_100F1A0DC((unint64_t *)&qword_10163B8F0, 255, (void (*)(uint64_t))&type metadata accessor for UUID);
  int v52 = dispatch thunk of static Equatable.== infix(_:_:)();
  unint64_t v33 = *(void (**)(unsigned char *, uint64_t))(v32 + 8);
  v33(v7, v4);
  sub_10001DAB4((uint64_t)v19, &qword_101638CF0);
  v33(v17, v4);
  sub_10001DAB4((uint64_t)v11, &qword_101638CF0);
  uint64_t v22 = v58;
  uint64_t v23 = v56;
  if (v52) {
    return (id)sub_10001DAB4(v22, &qword_101638CF0);
  }
LABEL_7:
  uint64_t v59 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v60 = v24;
  v25._countAndFlagsBits = 45;
  v25._object = (void *)0xE100000000000000;
  String.append(_:)(v25);
  id result = (id)MobileGestalt_get_current_device();
  if (result)
  {
    uint64_t v27 = result;
    id v28 = (id)MobileGestalt_copy_uniqueDeviceID_obj();

    if (v28)
    {
      uint64_t v29 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      long long v31 = v30;
    }
    else
    {
      uint64_t v29 = 0;
      long long v31 = (void *)0xE000000000000000;
    }
    v34._countAndFlagsBits = v29;
    v34._object = v31;
    String.append(_:)(v34);
    swift_bridgeObjectRelease();
    id v35 = sub_100F16154();
    uint64_t v36 = v54;
    sub_10001D074(v22, (uint64_t)v54, &qword_101638CF0);
    if (v21((uint64_t)v36, 1, v4) == 1)
    {
      sub_10001DAB4((uint64_t)v36, &qword_101638CF0);
    }
    else
    {
      UUID.uuidString.getter();
      (*(void (**)(unsigned char *, uint64_t))(v57 + 8))(v36, v4);
    }
    char v37 = v53;
    NSString v38 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    NSString v39 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    [v35 setObject:v38 forKey:v39];

    id v40 = sub_100F16154();
    id v41 = [v40 stringForKey:SPSettingsServiceStateKey];

    if (!v41)
    {
      if (qword_101636E28 != -1) {
        swift_once();
      }
      id v41 = (id)qword_10170E680;
    }
    id v42 = sub_100F16E78();
    uint64_t v43 = (int *)v55;
    sub_100F17324((uint64_t)v37 + *(int *)(v55 + 24));
    sub_100F17C4C((uint64_t)v37 + v43[7]);
    uint64_t v44 = sub_100F17C78();
    char v46 = v45;
    sub_100F17F8C((uint64_t)v37 + v43[9]);
    id v47 = sub_100F16154();
    NSString v48 = String._bridgeToObjectiveC()();
    unsigned __int8 v49 = [v47 BOOLForKey:v48];

    void *v37 = v41;
    v37[1] = v42;
    uint64_t v50 = (char *)v37 + v43[8];
    *(void *)uint64_t v50 = v44;
    v50[8] = v46 & 1;
    *((unsigned char *)v37 + v43[10]) = v49;
    sub_100F19B08((uint64_t)v37, v23);
    sub_10001DAB4(v58, &qword_101638CF0);
    return (id)sub_100F19E98((uint64_t)v37);
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_100F17C4C@<X0>(uint64_t a1@<X8>)
{
  return sub_100F17F98(&SPBeaconZoneCreationDateKey, a1);
}

uint64_t sub_100F17C58(void (*a1)(uint64_t))
{
  return sub_100F180F8(a1, (void (*)(uint64_t))sub_100F17C4C, &SPBeaconZoneCreationDateKey);
}

uint64_t sub_100F17C78()
{
  id v0 = sub_100F16154();
  id v1 = [v0 objectForKey:SPBeaconZoneCreationErrorCodeKey];

  if (v1)
  {
    _bridgeAnyObjectToAny(_:)();
    swift_unknownObjectRelease();
  }
  else
  {
    memset(v4, 0, sizeof(v4));
  }
  sub_10028DF08((uint64_t)v4, (uint64_t)v5);
  if (v6)
  {
    if (swift_dynamicCast()) {
      return v3;
    }
    else {
      return 0;
    }
  }
  else
  {
    sub_10001DAB4((uint64_t)v5, (uint64_t *)&unk_101644360);
    return 0;
  }
}

uint64_t sub_100F17D58(uint64_t a1, char a2)
{
  uint64_t v5 = (int *)type metadata accessor for ServiceStateConfigurationLayer();
  __chkstk_darwin(v5);
  NSString v7 = (uint64_t *)((char *)&v22 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t result = sub_100F17C78();
  if (a2)
  {
    if (v9) {
      return result;
    }
    id v11 = sub_100F16154();
    [v11 removeObjectForKey:SPBeaconZoneCreationErrorCodeKey];
  }
  else
  {
    if ((v9 & 1) == 0 && result == a1) {
      return result;
    }
    id v10 = sub_100F16154();
    id v11 = [objc_allocWithZone((Class)NSNumber) initWithInteger:a1];
    [v10 setObject:v11 forKey:SPBeaconZoneCreationErrorCodeKey];
  }
  id v12 = sub_100F16154();
  id v13 = [v12 stringForKey:SPSettingsServiceStateKey];

  if (!v13)
  {
    if (qword_101636E28 != -1) {
      swift_once();
    }
    id v13 = (id)qword_10170E680;
  }
  uint64_t v14 = sub_100F16E78();
  sub_100F17324((uint64_t)v7 + v5[6]);
  sub_100F17C4C((uint64_t)v7 + v5[7]);
  uint64_t v15 = sub_100F17C78();
  char v17 = v16;
  sub_100F17F8C((uint64_t)v7 + v5[9]);
  id v18 = sub_100F16154();
  NSString v19 = String._bridgeToObjectiveC()();
  unsigned __int8 v20 = [v18 BOOLForKey:v19];

  *NSString v7 = v13;
  v7[1] = v14;
  uint64_t v21 = (char *)v7 + v5[8];
  *(void *)uint64_t v21 = v15;
  v21[8] = v17 & 1;
  *((unsigned char *)v7 + v5[10]) = v20;
  sub_100F19B08((uint64_t)v7, v2);
  return sub_100F19E98((uint64_t)v7);
}

uint64_t sub_100F17F8C@<X0>(uint64_t a1@<X8>)
{
  return sub_100F17F98(&SPLastKeyRollDateKey, a1);
}

uint64_t sub_100F17F98@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  id v4 = sub_100F16154();
  id v5 = [v4 objectForKey:*a1];

  if (v5)
  {
    _bridgeAnyObjectToAny(_:)();
    swift_unknownObjectRelease();
  }
  else
  {
    memset(v10, 0, sizeof(v10));
  }
  sub_10028DF08((uint64_t)v10, (uint64_t)v11);
  if (v12)
  {
    uint64_t v6 = type metadata accessor for Date();
    int v7 = swift_dynamicCast();
    return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v6 - 8) + 56))(a2, v7 ^ 1u, 1, v6);
  }
  else
  {
    sub_10001DAB4((uint64_t)v11, (uint64_t *)&unk_101644360);
    uint64_t v9 = type metadata accessor for Date();
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 56))(a2, 1, 1, v9);
  }
}

uint64_t sub_100F180D8(void (*a1)(uint64_t))
{
  return sub_100F180F8(a1, (void (*)(uint64_t))sub_100F17F8C, &SPLastKeyRollDateKey);
}

uint64_t sub_100F180F8(void (*a1)(uint64_t), void (*a2)(uint64_t), void *a3)
{
  NSString v48 = a3;
  int v52 = a2;
  uint64_t v4 = v3;
  uint64_t v49 = type metadata accessor for ServiceStateConfigurationLayer();
  __chkstk_darwin(v49);
  uint64_t v50 = &v44[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v7 = type metadata accessor for Date();
  uint64_t v8 = *(void *)(v7 - 8);
  __chkstk_darwin(v7);
  char v46 = &v44[-((v9 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v10 = sub_10000588C((uint64_t *)&unk_10165C700);
  uint64_t v11 = v10 - 8;
  __chkstk_darwin(v10);
  id v13 = &v44[-((v12 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v14 = sub_10000588C((uint64_t *)&unk_10163AC90);
  uint64_t v15 = __chkstk_darwin(v14 - 8);
  id v47 = &v44[-((v16 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v17 = __chkstk_darwin(v15);
  NSString v19 = &v44[-v18];
  uint64_t v20 = __chkstk_darwin(v17);
  uint64_t v22 = &v44[-v21];
  v52(v20);
  uint64_t v23 = (uint64_t)&v13[*(int *)(v11 + 56)];
  int v52 = a1;
  sub_10001D074((uint64_t)a1, (uint64_t)v13, (uint64_t *)&unk_10163AC90);
  sub_10001D074((uint64_t)v22, v23, (uint64_t *)&unk_10163AC90);
  uint64_t v51 = v8;
  uint64_t v24 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v8 + 48);
  if (v24((uint64_t)v13, 1, v7) == 1)
  {
    sub_10001DAB4((uint64_t)v22, (uint64_t *)&unk_10163AC90);
    if (v24(v23, 1, v7) == 1)
    {
      sub_10001DAB4((uint64_t)v13, (uint64_t *)&unk_10163AC90);
      return sub_10001DAB4((uint64_t)v52, (uint64_t *)&unk_10163AC90);
    }
    goto LABEL_6;
  }
  sub_10001D074((uint64_t)v13, (uint64_t)v19, (uint64_t *)&unk_10163AC90);
  if (v24(v23, 1, v7) == 1)
  {
    sub_10001DAB4((uint64_t)v22, (uint64_t *)&unk_10163AC90);
    (*(void (**)(unsigned char *, uint64_t))(v51 + 8))(v19, v7);
LABEL_6:
    sub_10001DAB4((uint64_t)v13, (uint64_t *)&unk_10165C700);
    goto LABEL_7;
  }
  uint64_t v41 = v51;
  id v42 = v46;
  (*(void (**)(unsigned char *, uint64_t, uint64_t))(v51 + 32))(v46, v23, v7);
  sub_100F1A0DC(&qword_10163AFA0, 255, (void (*)(uint64_t))&type metadata accessor for Date);
  int v45 = dispatch thunk of static Equatable.== infix(_:_:)();
  uint64_t v43 = *(void (**)(unsigned char *, uint64_t))(v41 + 8);
  v43(v42, v7);
  sub_10001DAB4((uint64_t)v22, (uint64_t *)&unk_10163AC90);
  v43(v19, v7);
  sub_10001DAB4((uint64_t)v13, (uint64_t *)&unk_10163AC90);
  if (v45) {
    return sub_10001DAB4((uint64_t)v52, (uint64_t *)&unk_10163AC90);
  }
LABEL_7:
  id v25 = sub_100F16154();
  id v26 = v47;
  sub_10001D074((uint64_t)v52, (uint64_t)v47, (uint64_t *)&unk_10163AC90);
  if (v24((uint64_t)v26, 1, v7) == 1)
  {
    Class isa = 0;
  }
  else
  {
    Class isa = Date._bridgeToObjectiveC()().super.isa;
    (*(void (**)(unsigned char *, uint64_t))(v51 + 8))(v26, v7);
  }
  [v25 setObject:isa forKey:*v48];

  swift_unknownObjectRelease();
  id v28 = sub_100F16154();
  id v29 = [v28 stringForKey:SPSettingsServiceStateKey];

  if (!v29)
  {
    if (qword_101636E28 != -1) {
      swift_once();
    }
    id v29 = (id)qword_10170E680;
  }
  uint64_t v30 = sub_100F16E78();
  long long v31 = (int *)v49;
  uint64_t v32 = v50;
  sub_100F17324((uint64_t)&v50[*(int *)(v49 + 24)]);
  sub_100F17C4C((uint64_t)v32 + v31[7]);
  uint64_t v33 = sub_100F17C78();
  char v35 = v34;
  sub_100F17F8C((uint64_t)v32 + v31[9]);
  id v36 = sub_100F16154();
  NSString v37 = String._bridgeToObjectiveC()();
  unsigned __int8 v38 = [v36 BOOLForKey:v37];

  *uint64_t v32 = v29;
  v32[1] = v30;
  NSString v39 = (char *)v32 + v31[8];
  *(void *)NSString v39 = v33;
  v39[8] = v35 & 1;
  *((unsigned char *)v32 + v31[10]) = v38;
  sub_100F19B08((uint64_t)v32, v4);
  sub_10001DAB4((uint64_t)v52, (uint64_t *)&unk_10163AC90);
  return sub_100F19E98((uint64_t)v32);
}

uint64_t sub_100F186C4(unsigned __int8 a1, unsigned __int8 a2, unsigned __int8 a3)
{
  int v5 = a2;
  uint64_t v6 = sub_100F16E78();
  if (v6)
  {
    uint64_t v7 = (void *)sub_101158984((uint64_t)v6);
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v7 = &_swiftEmptySetSingleton;
  }
  int v8 = a1;
  uint64_t v25 = (uint64_t)v7;
  if (v5 == 2)
  {
    char v9 = 0;
  }
  else if (v5)
  {
    id v10 = SPDisabledReasonLowAccountSecurity;
    uint64_t v11 = (void *)sub_10112611C((uint64_t)v10);

    id v12 = SPDisabledReasoniCloudSignedOut;
    id v13 = (void *)sub_10112611C((uint64_t)v12);

    if (v11)
    {

      char v9 = 1;
    }
    else
    {
      char v9 = v13 != 0;
    }
  }
  else
  {
    char v9 = sub_100DCA6C0(&v24, SPDisabledReasonLowAccountSecurity);
  }
  int v14 = a3;
  if (v8 != 2)
  {
    uint64_t v15 = (id *)&SPDisabledReasoniCloudSignedOut;
    if ((v8 & 1) == 0)
    {
      char v16 = sub_100DCA6C0(&v24, SPDisabledReasoniCloudSignedOut);

      v9 |= v16;
      uint64_t v15 = (id *)&SPDisabledReasonLowAccountSecurity;
    }
    id v17 = *v15;
    uint64_t v18 = (void *)sub_10112611C((uint64_t)v17);

    v9 |= v18 != 0;
  }
  if (v14 != 2)
  {
    if (v14)
    {
      char v21 = sub_100DCA6C0(&v24, SPDisabledReasonUserOptOut);

      v9 |= v21;
    }
    else
    {
      id v19 = SPDisabledReasonUserOptOut;
      uint64_t v20 = (void *)sub_10112611C((uint64_t)v19);

      if (v9)
      {

        char v9 = 1;
      }
      else
      {
        char v9 = v20 != 0;
      }
    }
  }
  uint64_t v22 = sub_10070FD94(v25);
  swift_bridgeObjectRelease();
  sub_100F16FF4((uint64_t)v22);
  return v9 & 1;
}

uint64_t sub_100F188F0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v5 = sub_10000588C((uint64_t *)&unk_101657850);
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v7 = *(void *)(v6 + 64);
  __chkstk_darwin(v5);
  sub_10001D010(a1, (uint64_t)aBlock);
  swift_allocObject();
  swift_weakInit();
  sub_10000588C(&qword_101653968);
  Subscription.init(subscriber:unsubscribeBlock:)();
  int v8 = *(NSObject **)(v2 + 24);
  (*(void (**)(char *, uint64_t, uint64_t))(v6 + 16))((char *)aBlock - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0), a2, v5);
  unint64_t v9 = (*(unsigned __int8 *)(v6 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80);
  uint64_t v10 = swift_allocObject();
  *(void *)(v10 + 16) = v2;
  (*(void (**)(unint64_t, char *, uint64_t))(v6 + 32))(v10 + v9, (char *)aBlock - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0), v5);
  uint64_t v11 = swift_allocObject();
  *(void *)(v11 + 16) = sub_100F19A64;
  *(void *)(v11 + 24) = v10;
  aBlock[4] = sub_1003B7AE0;
  aBlock[5] = v11;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_1000A70B0;
  aBlock[3] = &unk_1015FCD08;
  id v12 = _Block_copy(aBlock);
  swift_retain();
  swift_retain();
  swift_release();
  dispatch_sync(v8, v12);
  _Block_release(v12);
  char isEscapingClosureAtFileLocation = swift_isEscapingClosureAtFileLocation();
  swift_release();
  uint64_t result = swift_release();
  if (isEscapingClosureAtFileLocation) {
    __break(1u);
  }
  return result;
}

uint64_t sub_100F18B80(uint64_t a1)
{
  swift_beginAccess();
  uint64_t result = swift_weakLoadStrong();
  if (result)
  {
    sub_100F18DA4(a1);
    return swift_release();
  }
  return result;
}

uint64_t sub_100F18C04(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_10000588C((uint64_t *)&unk_101657850);
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v7 = (char *)&v14 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))(v7, a2, v4);
  int v8 = (unint64_t *)(a1 + 16);
  swift_beginAccess();
  unint64_t v9 = *(void *)(a1 + 16);
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  *(void *)(a1 + 16) = v9;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
    unint64_t v9 = sub_100A71D74(0, *(void *)(v9 + 16) + 1, 1, v9);
    *int v8 = v9;
  }
  unint64_t v12 = *(void *)(v9 + 16);
  unint64_t v11 = *(void *)(v9 + 24);
  if (v12 >= v11 >> 1)
  {
    unint64_t v9 = sub_100A71D74(v11 > 1, v12 + 1, 1, v9);
    *int v8 = v9;
  }
  *(void *)(v9 + 16) = v12 + 1;
  (*(void (**)(unint64_t, char *, uint64_t))(v5 + 32))(v9+ ((*(unsigned __int8 *)(v5 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80))+ *(void *)(v5 + 72) * v12, v7, v4);
  return swift_endAccess();
}

uint64_t sub_100F18DA4(uint64_t a1)
{
  uint64_t v3 = sub_10000588C((uint64_t *)&unk_101657850);
  uint64_t v4 = *(void *)(v3 - 8);
  uint64_t v5 = *(void *)(v4 + 64);
  __chkstk_darwin(v3);
  uint64_t v6 = *(NSObject **)(v1 + 24);
  (*(void (**)(char *, uint64_t, uint64_t))(v4 + 16))((char *)aBlock - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0), a1, v3);
  unint64_t v7 = (*(unsigned __int8 *)(v4 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
  uint64_t v8 = swift_allocObject();
  *(void *)(v8 + 16) = v1;
  (*(void (**)(unint64_t, char *, uint64_t))(v4 + 32))(v8 + v7, (char *)aBlock - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0), v3);
  uint64_t v9 = swift_allocObject();
  *(void *)(v9 + 16) = sub_100F199CC;
  *(void *)(v9 + 24) = v8;
  aBlock[4] = sub_100132424;
  aBlock[5] = v9;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_1000A70B0;
  aBlock[3] = &unk_1015FCC68;
  uint64_t v10 = _Block_copy(aBlock);
  swift_retain();
  swift_retain();
  swift_release();
  dispatch_sync(v6, v10);
  _Block_release(v10);
  char isEscapingClosureAtFileLocation = swift_isEscapingClosureAtFileLocation();
  swift_release();
  uint64_t result = swift_release();
  if (isEscapingClosureAtFileLocation) {
    __break(1u);
  }
  return result;
}

uint64_t sub_100F18FD4(uint64_t a1, uint64_t a2)
{
  uint64_t v58 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v64 = *(char **)(v58 - 8);
  __chkstk_darwin(v58);
  uint64_t v4 = (char *)&v40 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = type metadata accessor for DispatchQoS();
  uint64_t v62 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  unint64_t v7 = (char *)&v40 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for DispatchQoS.QoSClass();
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  unint64_t v11 = (char *)&v40 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v60 = sub_10000588C((uint64_t *)&unk_101657850);
  uint64_t v12 = *(void *)(v60 - 8);
  uint64_t v13 = *(void *)(v12 + 64);
  uint64_t v14 = __chkstk_darwin(v60);
  uint64_t v59 = (char *)&v40 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v14);
  uint64_t v63 = (char *)&v40 - v15;
  swift_beginAccess();
  uint64_t result = swift_weakLoadStrong();
  if (result)
  {
    uint64_t v17 = result;
    uint64_t v57 = v11;
    swift_beginAccess();
    uint64_t v18 = *(void *)(v17 + 16);
    swift_bridgeObjectRetain();
    uint64_t v19 = v18;
    swift_release();
    uint64_t v20 = *(void *)(v18 + 16);
    if (v20)
    {
      unint64_t v56 = sub_10000584C();
      uint64_t v22 = *(void (**)(char *, char *, uint64_t))(v12 + 16);
      uint64_t v21 = v12 + 16;
      uint64_t v55 = v22;
      uint64_t v23 = *(unsigned __int8 *)(v21 + 64);
      uint64_t v40 = v19;
      id v24 = (char *)(v19 + ((v23 + 32) & ~v23));
      char v54 = (void (**)(char *, void, uint64_t))(v9 + 104);
      char v53 = (void (**)(char *, uint64_t))(v9 + 8);
      uint64_t v52 = *(void *)(v21 + 56);
      unsigned int v50 = enum case for DispatchQoS.QoSClass.default(_:);
      uint64_t v49 = v23 | 7;
      uint64_t v51 = (v23 + 16) & ~v23;
      unint64_t v48 = (v13 + v51 + 7) & 0xFFFFFFFFFFFFFFF8;
      unint64_t v47 = v48 + 40;
      char v46 = (void (**)(uint64_t, char *, uint64_t))(v21 + 16);
      int v45 = v67;
      uint64_t v44 = (void (**)(char *, uint64_t))(v64 + 8);
      uint64_t v43 = (void (**)(char *, uint64_t))(v62 + 8);
      id v42 = (void (**)(char *, uint64_t))(v21 - 8);
      uint64_t v41 = v4;
      uint64_t v25 = v60;
      id v26 = v63;
      do
      {
        uint64_t v62 = v20;
        uint64_t v64 = v24;
        uint64_t v27 = v26;
        id v28 = v55;
        v55(v27, v24, v25);
        id v29 = v57;
        (*v54)(v57, v50, v8);
        uint64_t v61 = static OS_dispatch_queue.global(qos:)();
        (*v53)(v29, v8);
        uint64_t v30 = v59;
        v28(v59, v63, v25);
        sub_10001D010(a2, (uint64_t)&v68);
        uint64_t v31 = swift_allocObject();
        (*v46)(v31 + v51, v30, v25);
        sub_10001CEB0(&v68, v31 + v48);
        v67[2] = sub_100F1A04C;
        v67[3] = v31;
        aBlock[0] = _NSConcreteStackBlock;
        aBlock[1] = 1107296256;
        v67[0] = sub_1004B5480;
        v67[1] = &unk_1015FCDA8;
        uint64_t v32 = v8;
        uint64_t v33 = _Block_copy(aBlock);
        static DispatchQoS.unspecified.getter();
        uint64_t v65 = _swiftEmptyArrayStorage;
        sub_100F1A0DC((unint64_t *)&qword_10163B7E0, 255, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
        sub_10000588C((uint64_t *)&unk_10163F350);
        sub_100062734((unint64_t *)&qword_10163B7F0, (uint64_t *)&unk_10163F350);
        char v34 = v41;
        uint64_t v35 = v58;
        dispatch thunk of SetAlgebra.init<A>(_:)();
        id v36 = (void *)v61;
        OS_dispatch_queue.async(group:qos:flags:execute:)();
        id v26 = v63;
        NSString v37 = v33;
        uint64_t v8 = v32;
        uint64_t v25 = v60;
        _Block_release(v37);

        uint64_t v38 = v35;
        uint64_t v39 = v62;
        (*v44)(v34, v38);
        (*v43)(v7, v5);
        (*v42)(v26, v25);
        swift_release();
        id v24 = &v64[v52];
        uint64_t v20 = v39 - 1;
      }
      while (v20);
    }
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t sub_100F196F8(uint64_t a1, void *a2)
{
  sub_10000588C((uint64_t *)&unk_101657850);
  Subscription.subscriber.getter();
  uint64_t v3 = *sub_10001CD44(v8, v8[3]);
  uint64_t v4 = a2[3];
  uint64_t v5 = a2[4];
  uint64_t v6 = sub_10001CD44(a2, v4);
  sub_1000BCF90((uint64_t)v6, 4, 1, 0, 0, v3, v4, v5);
  return _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)v8);
}

uint64_t sub_100F19788()
{
  swift_bridgeObjectRelease();

  swift_bridgeObjectRelease();

  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for ServiceStateProvider()
{
  return self;
}

uint64_t sub_100F19804@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_100F188F0(a1, a2);
}

uint64_t sub_100F19828(uint64_t a1, uint64_t a2)
{
  uint64_t result = sub_100F1A0DC(&qword_101663A88, a2, (void (*)(uint64_t))type metadata accessor for ServiceStateProvider);
  *(void *)(a1 + 8) = result;
  return result;
}

uint64_t sub_100F19880()
{
  uint64_t result = sub_100F198A0();
  qword_10170EED0 = result;
  return result;
}

uint64_t sub_100F198A0()
{
  static String._unconditionallyBridgeFromObjectiveC(_:)();
  id v0 = objc_allocWithZone((Class)NSUserDefaults);
  NSString v1 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  id v2 = [v0 initWithSuiteName:v1];

  if (v2) {
    return (uint64_t)v2;
  }
  _StringGuts.grow(_:)(49);
  swift_bridgeObjectRelease();
  v4._countAndFlagsBits = static String._unconditionallyBridgeFromObjectiveC(_:)();
  String.append(_:)(v4);
  swift_bridgeObjectRelease();
  uint64_t result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_100F199CC()
{
  return sub_100F19A7C(sub_1009994E4);
}

uint64_t sub_100F199E4()
{
  return _swift_deallocObject(v0, 32, 7);
}

uint64_t sub_100F199F4(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_100F19A04()
{
  return swift_release();
}

uint64_t sub_100F19A0C()
{
  swift_weakDestroy();

  return _swift_deallocObject(v0, 24, 7);
}

uint64_t sub_100F19A44(uint64_t a1)
{
  return sub_100F18B80(a1);
}

uint64_t sub_100F19A64()
{
  return sub_100F19A7C(sub_100F18C04);
}

uint64_t sub_100F19A7C(uint64_t (*a1)(uint64_t, uint64_t))
{
  uint64_t v2 = *(void *)(sub_10000588C((uint64_t *)&unk_101657850) - 8);
  uint64_t v3 = *(void *)(v1 + 16);
  uint64_t v4 = v1 + ((*(unsigned __int8 *)(v2 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80));

  return a1(v3, v4);
}

uint64_t sub_100F19AF8()
{
  return _swift_deallocObject(v0, 32, 7);
}

uint64_t sub_100F19B08(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  unint64_t v7 = (char *)&v16 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v17 = type metadata accessor for DispatchQoS();
  uint64_t v8 = *(void *)(v17 - 8);
  __chkstk_darwin(v17);
  uint64_t v10 = (char *)&v16 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v21[3] = type metadata accessor for ServiceStateConfigurationLayer();
  void v21[4] = (uint64_t)&off_1015FCDD0;
  unint64_t v11 = sub_10001D958(v21);
  sub_100F19EF4(a1, (uint64_t)v11);
  uint64_t v16 = *(void *)(a2 + 24);
  uint64_t v12 = swift_allocObject();
  swift_weakInit();
  sub_10001D010((uint64_t)v21, (uint64_t)v20);
  uint64_t v13 = swift_allocObject();
  *(void *)(v13 + 16) = v12;
  sub_10001CEB0(v20, v13 + 24);
  aBlock[4] = sub_100F19F98;
  aBlock[5] = v13;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  void aBlock[2] = sub_1004B5480;
  aBlock[3] = &unk_1015FCD58;
  uint64_t v14 = _Block_copy(aBlock);
  swift_retain();
  static DispatchQoS.unspecified.getter();
  uint64_t v18 = _swiftEmptyArrayStorage;
  sub_100F1A0DC((unint64_t *)&qword_10163B7E0, 255, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
  sub_10000588C((uint64_t *)&unk_10163F350);
  sub_100062734((unint64_t *)&qword_10163B7F0, (uint64_t *)&unk_10163F350);
  dispatch thunk of SetAlgebra.init<A>(_:)();
  OS_dispatch_queue.async(group:qos:flags:execute:)();
  _Block_release(v14);
  (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v17);
  swift_release();
  swift_release();
  return _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)v21);
}

uint64_t type metadata accessor for ServiceStateConfigurationLayer()
{
  uint64_t result = qword_101663AE8;
  if (!qword_101663AE8) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t sub_100F19E98(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for ServiceStateConfigurationLayer();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_100F19EF4(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for ServiceStateConfigurationLayer();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_100F19F58()
{
  swift_release();
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v0 + 24);

  return _swift_deallocObject(v0, 64, 7);
}

uint64_t sub_100F19F98()
{
  return sub_100F18FD4(*(void *)(v0 + 16), v0 + 24);
}

uint64_t sub_100F19FA4()
{
  uint64_t v1 = sub_10000588C((uint64_t *)&unk_101657850);
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 16) & ~v3;
  uint64_t v5 = v3 | 7;
  unint64_t v6 = (*(void *)(v2 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8;
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v0 + v6);

  return _swift_deallocObject(v0, v6 + 40, v5);
}

uint64_t sub_100F1A04C()
{
  uint64_t v1 = *(void *)(sub_10000588C((uint64_t *)&unk_101657850) - 8);
  unint64_t v2 = (*(unsigned __int8 *)(v1 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80);
  uint64_t v3 = (void *)(v0 + ((*(void *)(v1 + 64) + v2 + 7) & 0xFFFFFFFFFFFFFFF8));

  return sub_100F196F8(v0 + v2, v3);
}

uint64_t sub_100F1A0DC(unint64_t *a1, uint64_t a2, void (*a3)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a3(a2);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_100F1A124(uint64_t a1, uint64_t a2)
{
  return sub_100F168A0(a1, a2, v2);
}

char *sub_100F1A12C(char *a1, char **a2, int *a3)
{
  int v3 = *(_DWORD *)(*((void *)a3 - 1) + 80);
  uint64_t v4 = *a2;
  *(void *)a1 = *a2;
  if ((v3 & 0x20000) != 0)
  {
    unint64_t v7 = &v4[(v3 + 16) & ~(unint64_t)v3];
    swift_retain();
  }
  else
  {
    unint64_t v7 = a1;
    *((void *)a1 + 1) = a2[1];
    uint64_t v8 = a3[6];
    __dst = &a1[v8];
    uint64_t v9 = (char *)a2 + v8;
    uint64_t v10 = type metadata accessor for UUID();
    uint64_t v11 = *(void *)(v10 - 8);
    uint64_t v12 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v11 + 48);
    uint64_t v13 = v4;
    swift_bridgeObjectRetain();
    if (v12(v9, 1, v10))
    {
      uint64_t v14 = sub_10000588C(&qword_101638CF0);
      memcpy(__dst, v9, *(void *)(*(void *)(v14 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v11 + 16))(__dst, v9, v10);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v11 + 56))(__dst, 0, 1, v10);
    }
    uint64_t v15 = a3[7];
    uint64_t v16 = &v7[v15];
    uint64_t v17 = (char *)a2 + v15;
    uint64_t v18 = type metadata accessor for Date();
    uint64_t v19 = *(void *)(v18 - 8);
    uint64_t v20 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v19 + 48);
    if (v20(v17, 1, v18))
    {
      uint64_t v21 = sub_10000588C((uint64_t *)&unk_10163AC90);
      memcpy(v16, v17, *(void *)(*(void *)(v21 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v19 + 16))(v16, v17, v18);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v19 + 56))(v16, 0, 1, v18);
    }
    uint64_t v22 = a3[8];
    uint64_t v23 = a3[9];
    id v24 = &v7[v22];
    uint64_t v25 = (uint64_t)a2 + v22;
    *(void *)id v24 = *(void *)v25;
    v24[8] = *(unsigned char *)(v25 + 8);
    id v26 = &v7[v23];
    uint64_t v27 = (char *)a2 + v23;
    if (v20((char *)a2 + v23, 1, v18))
    {
      uint64_t v28 = sub_10000588C((uint64_t *)&unk_10163AC90);
      memcpy(v26, v27, *(void *)(*(void *)(v28 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v19 + 16))(v26, v27, v18);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v19 + 56))(v26, 0, 1, v18);
    }
    v7[a3[10]] = *((unsigned char *)a2 + a3[10]);
  }
  return v7;
}

uint64_t sub_100F1A474(id *a1, int *a2)
{
  swift_bridgeObjectRelease();
  uint64_t v4 = (char *)a1 + a2[6];
  uint64_t v5 = type metadata accessor for UUID();
  uint64_t v6 = *(void *)(v5 - 8);
  if (!(*(unsigned int (**)(char *, uint64_t, uint64_t))(v6 + 48))(v4, 1, v5)) {
    (*(void (**)(char *, uint64_t))(v6 + 8))(v4, v5);
  }
  unint64_t v7 = (char *)a1 + a2[7];
  uint64_t v8 = type metadata accessor for Date();
  uint64_t v13 = *(void *)(v8 - 8);
  uint64_t v9 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v13 + 48);
  if (!v9(v7, 1, v8)) {
    (*(void (**)(char *, uint64_t))(v13 + 8))(v7, v8);
  }
  uint64_t v10 = (char *)a1 + a2[9];
  uint64_t result = ((uint64_t (*)(char *, uint64_t, uint64_t))v9)(v10, 1, v8);
  if (!result)
  {
    uint64_t v12 = *(uint64_t (**)(char *, uint64_t))(v13 + 8);
    return v12(v10, v8);
  }
  return result;
}

void *sub_100F1A634(void *a1, uint64_t a2, int *a3)
{
  uint64_t v6 = *(void **)a2;
  uint64_t v5 = *(void *)(a2 + 8);
  *a1 = *(void *)a2;
  a1[1] = v5;
  uint64_t v7 = a3[6];
  uint64_t v8 = (char *)a1 + v7;
  uint64_t v9 = (const void *)(a2 + v7);
  uint64_t v10 = type metadata accessor for UUID();
  uint64_t v11 = *(void *)(v10 - 8);
  uint64_t v12 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v11 + 48);
  id v13 = v6;
  swift_bridgeObjectRetain();
  if (v12(v9, 1, v10))
  {
    uint64_t v14 = sub_10000588C(&qword_101638CF0);
    memcpy(v8, v9, *(void *)(*(void *)(v14 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, const void *, uint64_t))(v11 + 16))(v8, v9, v10);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v11 + 56))(v8, 0, 1, v10);
  }
  uint64_t v15 = a3[7];
  uint64_t v16 = (char *)a1 + v15;
  uint64_t v17 = (const void *)(a2 + v15);
  uint64_t v18 = type metadata accessor for Date();
  uint64_t v19 = *(void *)(v18 - 8);
  uint64_t v20 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v19 + 48);
  if (v20(v17, 1, v18))
  {
    uint64_t v21 = sub_10000588C((uint64_t *)&unk_10163AC90);
    memcpy(v16, v17, *(void *)(*(void *)(v21 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, const void *, uint64_t))(v19 + 16))(v16, v17, v18);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v19 + 56))(v16, 0, 1, v18);
  }
  uint64_t v22 = a3[8];
  uint64_t v23 = a3[9];
  id v24 = (char *)a1 + v22;
  uint64_t v25 = a2 + v22;
  *(void *)id v24 = *(void *)v25;
  v24[8] = *(unsigned char *)(v25 + 8);
  id v26 = (char *)a1 + v23;
  uint64_t v27 = (const void *)(a2 + v23);
  if (v20((const void *)(a2 + v23), 1, v18))
  {
    uint64_t v28 = sub_10000588C((uint64_t *)&unk_10163AC90);
    memcpy(v26, v27, *(void *)(*(void *)(v28 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, const void *, uint64_t))(v19 + 16))(v26, v27, v18);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v19 + 56))(v26, 0, 1, v18);
  }
  *((unsigned char *)a1 + a3[10]) = *(unsigned char *)(a2 + a3[10]);
  return a1;
}

uint64_t sub_100F1A924(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = *(void **)a1;
  uint64_t v7 = *(void **)a2;
  *(void *)a1 = *(void *)a2;
  id v8 = v7;

  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v9 = a3[6];
  uint64_t v10 = (void *)(a1 + v9);
  uint64_t v11 = (void *)(a2 + v9);
  uint64_t v12 = type metadata accessor for UUID();
  uint64_t v13 = *(void *)(v12 - 8);
  uint64_t v14 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v13 + 48);
  int v15 = v14(v10, 1, v12);
  int v16 = v14(v11, 1, v12);
  if (v15)
  {
    if (!v16)
    {
      (*(void (**)(void *, void *, uint64_t))(v13 + 16))(v10, v11, v12);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v13 + 56))(v10, 0, 1, v12);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v16)
  {
    (*(void (**)(void *, uint64_t))(v13 + 8))(v10, v12);
LABEL_6:
    uint64_t v17 = sub_10000588C(&qword_101638CF0);
    memcpy(v10, v11, *(void *)(*(void *)(v17 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(void *, void *, uint64_t))(v13 + 24))(v10, v11, v12);
LABEL_7:
  uint64_t v18 = a3[7];
  uint64_t v19 = (void *)(a1 + v18);
  uint64_t v20 = (void *)(a2 + v18);
  uint64_t v21 = type metadata accessor for Date();
  uint64_t v22 = *(void *)(v21 - 8);
  uint64_t v23 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v22 + 48);
  int v24 = v23(v19, 1, v21);
  int v25 = v23(v20, 1, v21);
  if (v24)
  {
    if (!v25)
    {
      (*(void (**)(void *, void *, uint64_t))(v22 + 16))(v19, v20, v21);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v22 + 56))(v19, 0, 1, v21);
      goto LABEL_13;
    }
    goto LABEL_12;
  }
  if (v25)
  {
    (*(void (**)(void *, uint64_t))(v22 + 8))(v19, v21);
LABEL_12:
    uint64_t v26 = sub_10000588C((uint64_t *)&unk_10163AC90);
    memcpy(v19, v20, *(void *)(*(void *)(v26 - 8) + 64));
    goto LABEL_13;
  }
  (*(void (**)(void *, void *, uint64_t))(v22 + 24))(v19, v20, v21);
LABEL_13:
  uint64_t v27 = a3[8];
  uint64_t v28 = a1 + v27;
  id v29 = (uint64_t *)(a2 + v27);
  uint64_t v30 = *v29;
  *(unsigned char *)(v28 + 8) = *((unsigned char *)v29 + 8);
  *(void *)uint64_t v28 = v30;
  uint64_t v31 = a3[9];
  uint64_t v32 = (void *)(a1 + v31);
  uint64_t v33 = (void *)(a2 + v31);
  int v34 = v23((void *)(a1 + v31), 1, v21);
  int v35 = v23(v33, 1, v21);
  if (!v34)
  {
    if (!v35)
    {
      (*(void (**)(void *, void *, uint64_t))(v22 + 24))(v32, v33, v21);
      goto LABEL_19;
    }
    (*(void (**)(void *, uint64_t))(v22 + 8))(v32, v21);
    goto LABEL_18;
  }
  if (v35)
  {
LABEL_18:
    uint64_t v36 = sub_10000588C((uint64_t *)&unk_10163AC90);
    memcpy(v32, v33, *(void *)(*(void *)(v36 - 8) + 64));
    goto LABEL_19;
  }
  (*(void (**)(void *, void *, uint64_t))(v22 + 16))(v32, v33, v21);
  (*(void (**)(void *, void, uint64_t, uint64_t))(v22 + 56))(v32, 0, 1, v21);
LABEL_19:
  *(unsigned char *)(a1 + a3[10]) = *(unsigned char *)(a2 + a3[10]);
  return a1;
}

_OWORD *sub_100F1AD3C(_OWORD *a1, char *a2, int *a3)
{
  *a1 = *(_OWORD *)a2;
  uint64_t v6 = a3[6];
  uint64_t v7 = (char *)a1 + v6;
  id v8 = &a2[v6];
  uint64_t v9 = type metadata accessor for UUID();
  uint64_t v10 = *(void *)(v9 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48))(v8, 1, v9))
  {
    uint64_t v11 = sub_10000588C(&qword_101638CF0);
    memcpy(v7, v8, *(void *)(*(void *)(v11 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v10 + 32))(v7, v8, v9);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v10 + 56))(v7, 0, 1, v9);
  }
  uint64_t v12 = a3[7];
  uint64_t v13 = (char *)a1 + v12;
  uint64_t v14 = &a2[v12];
  uint64_t v15 = type metadata accessor for Date();
  uint64_t v16 = *(void *)(v15 - 8);
  uint64_t v17 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v16 + 48);
  if (v17(v14, 1, v15))
  {
    uint64_t v18 = sub_10000588C((uint64_t *)&unk_10163AC90);
    memcpy(v13, v14, *(void *)(*(void *)(v18 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v16 + 32))(v13, v14, v15);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v16 + 56))(v13, 0, 1, v15);
  }
  uint64_t v19 = a3[8];
  uint64_t v20 = a3[9];
  uint64_t v21 = (char *)a1 + v19;
  uint64_t v22 = &a2[v19];
  *(void *)uint64_t v21 = *(void *)v22;
  v21[8] = v22[8];
  uint64_t v23 = (char *)a1 + v20;
  int v24 = &a2[v20];
  if (v17(&a2[v20], 1, v15))
  {
    uint64_t v25 = sub_10000588C((uint64_t *)&unk_10163AC90);
    memcpy(v23, v24, *(void *)(*(void *)(v25 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v16 + 32))(v23, v24, v15);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v16 + 56))(v23, 0, 1, v15);
  }
  *((unsigned char *)a1 + a3[10]) = a2[a3[10]];
  return a1;
}

uint64_t sub_100F1B014(uint64_t a1, void *a2, int *a3)
{
  uint64_t v6 = *(void **)a1;
  *(void *)a1 = *a2;

  *(void *)(a1 + 8) = a2[1];
  swift_bridgeObjectRelease();
  uint64_t v7 = a3[6];
  id v8 = (void *)(a1 + v7);
  uint64_t v9 = (char *)a2 + v7;
  uint64_t v10 = type metadata accessor for UUID();
  uint64_t v11 = *(void *)(v10 - 8);
  uint64_t v12 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v11 + 48);
  int v13 = v12(v8, 1, v10);
  int v14 = v12(v9, 1, v10);
  if (v13)
  {
    if (!v14)
    {
      (*(void (**)(void *, char *, uint64_t))(v11 + 32))(v8, v9, v10);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v11 + 56))(v8, 0, 1, v10);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v14)
  {
    (*(void (**)(void *, uint64_t))(v11 + 8))(v8, v10);
LABEL_6:
    uint64_t v15 = sub_10000588C(&qword_101638CF0);
    memcpy(v8, v9, *(void *)(*(void *)(v15 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(void *, char *, uint64_t))(v11 + 40))(v8, v9, v10);
LABEL_7:
  uint64_t v16 = a3[7];
  uint64_t v17 = (void *)(a1 + v16);
  uint64_t v18 = (char *)a2 + v16;
  uint64_t v19 = type metadata accessor for Date();
  uint64_t v20 = *(void *)(v19 - 8);
  uint64_t v21 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v20 + 48);
  int v22 = v21(v17, 1, v19);
  int v23 = v21(v18, 1, v19);
  if (v22)
  {
    if (!v23)
    {
      (*(void (**)(void *, char *, uint64_t))(v20 + 32))(v17, v18, v19);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v20 + 56))(v17, 0, 1, v19);
      goto LABEL_13;
    }
    goto LABEL_12;
  }
  if (v23)
  {
    (*(void (**)(void *, uint64_t))(v20 + 8))(v17, v19);
LABEL_12:
    uint64_t v24 = sub_10000588C((uint64_t *)&unk_10163AC90);
    memcpy(v17, v18, *(void *)(*(void *)(v24 - 8) + 64));
    goto LABEL_13;
  }
  (*(void (**)(void *, char *, uint64_t))(v20 + 40))(v17, v18, v19);
LABEL_13:
  uint64_t v25 = a3[8];
  uint64_t v26 = a3[9];
  uint64_t v27 = a1 + v25;
  uint64_t v28 = (char *)a2 + v25;
  *(void *)uint64_t v27 = *(void *)v28;
  *(unsigned char *)(v27 + 8) = v28[8];
  id v29 = (void *)(a1 + v26);
  uint64_t v30 = (char *)a2 + v26;
  int v31 = v21((void *)(a1 + v26), 1, v19);
  int v32 = v21(v30, 1, v19);
  if (!v31)
  {
    if (!v32)
    {
      (*(void (**)(void *, char *, uint64_t))(v20 + 40))(v29, v30, v19);
      goto LABEL_19;
    }
    (*(void (**)(void *, uint64_t))(v20 + 8))(v29, v19);
    goto LABEL_18;
  }
  if (v32)
  {
LABEL_18:
    uint64_t v33 = sub_10000588C((uint64_t *)&unk_10163AC90);
    memcpy(v29, v30, *(void *)(*(void *)(v33 - 8) + 64));
    goto LABEL_19;
  }
  (*(void (**)(void *, char *, uint64_t))(v20 + 32))(v29, v30, v19);
  (*(void (**)(void *, void, uint64_t, uint64_t))(v20 + 56))(v29, 0, 1, v19);
LABEL_19:
  *(unsigned char *)(a1 + a3[10]) = *((unsigned char *)a2 + a3[10]);
  return a1;
}

uint64_t sub_100F1B41C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_100F1B430);
}

uint64_t sub_100F1B430(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  if (a2 == 2147483646)
  {
    uint64_t v4 = *a1;
    if ((unint64_t)*a1 >= 0xFFFFFFFF) {
      LODWORD(v4) = -1;
    }
    int v5 = v4 - 1;
    if (v5 < 0) {
      int v5 = -1;
    }
    return (v5 + 1);
  }
  else
  {
    uint64_t v9 = sub_10000588C(&qword_101638CF0);
    uint64_t v10 = *(void *)(v9 - 8);
    if (*(_DWORD *)(v10 + 84) == a2)
    {
      uint64_t v11 = v9;
      uint64_t v12 = (char *)a1 + *(int *)(a3 + 24);
      int v13 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v10 + 48);
      return v13(v12, a2, v11);
    }
    else
    {
      uint64_t v14 = sub_10000588C((uint64_t *)&unk_10163AC90);
      uint64_t v15 = *(uint64_t (**)(char *, uint64_t, uint64_t))(*(void *)(v14 - 8) + 48);
      uint64_t v16 = v14;
      uint64_t v17 = (char *)a1 + *(int *)(a3 + 28);
      return v15(v17, a2, v16);
    }
  }
}

uint64_t sub_100F1B570(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_100F1B584);
}

void *sub_100F1B584(void *result, uint64_t a2, int a3, uint64_t a4)
{
  int v5 = result;
  if (a3 == 2147483646)
  {
    *uint64_t result = a2;
  }
  else
  {
    uint64_t v8 = sub_10000588C(&qword_101638CF0);
    uint64_t v9 = *(void *)(v8 - 8);
    if (*(_DWORD *)(v9 + 84) == a3)
    {
      uint64_t v10 = v8;
      uint64_t v11 = (char *)v5 + *(int *)(a4 + 24);
      uint64_t v12 = *(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(v9 + 56);
      return (void *)v12(v11, a2, a2, v10);
    }
    else
    {
      uint64_t v13 = sub_10000588C((uint64_t *)&unk_10163AC90);
      uint64_t v14 = *(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v13 - 8) + 56);
      uint64_t v15 = v13;
      uint64_t v16 = (char *)v5 + *(int *)(a4 + 28);
      return (void *)v14(v16, a2, a2, v15);
    }
  }
  return result;
}

void sub_100F1B6B8()
{
  sub_100946B90(319, (unint64_t *)&qword_101655AB0, (void (*)(uint64_t))&type metadata accessor for UUID);
  if (v0 <= 0x3F)
  {
    sub_100946B90(319, (unint64_t *)&qword_10165C690, (void (*)(uint64_t))&type metadata accessor for Date);
    if (v1 <= 0x3F) {
      swift_initStructMetadata();
    }
  }
}

uint64_t sub_100F1B7F0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_100F1B804);
}

uint64_t sub_100F1B804(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for URLComponents();
  int v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 48);

  return v5(a1, a2, v4);
}

uint64_t sub_100F1B870(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_100F1B884);
}

uint64_t sub_100F1B884(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for URLComponents();
  int v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 56);

  return v5(a1, a2, a2, v4);
}

uint64_t type metadata accessor for MetricsEndpoint()
{
  uint64_t result = qword_101663B90;
  if (!qword_101663B90) {
    return swift_getSingletonMetadata();
  }
  return result;
}

char *sub_100F1B940(uint64_t a1, uint64_t *a2, int *a3)
{
  uint64_t v4 = (char *)a1;
  int v5 = *(_DWORD *)(*((void *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v18 = *a2;
    *(void *)uint64_t v4 = *a2;
    uint64_t v4 = (char *)(v18 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    *(void *)a1 = *a2;
    *(_WORD *)(a1 + 8) = *((_WORD *)a2 + 4);
    uint64_t v7 = a3[6];
    uint64_t v8 = a1 + v7;
    uint64_t v9 = (uint64_t)a2 + v7;
    uint64_t v10 = type metadata accessor for Date();
    uint64_t v11 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 16);
    v11(v8, v9, v10);
    uint64_t v12 = a3[7];
    uint64_t v13 = &v4[v12];
    uint64_t v14 = (uint64_t *)((char *)a2 + v12);
    uint64_t v15 = type metadata accessor for DeviceEvent.Location(0);
    uint64_t v16 = *(void *)(v15 - 8);
    if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v16 + 48))(v14, 1, v15))
    {
      uint64_t v17 = sub_10000588C(&qword_10164E880);
      memcpy(v13, v14, *(void *)(*(void *)(v17 - 8) + 64));
    }
    else
    {
      *(_OWORD *)uint64_t v13 = *(_OWORD *)v14;
      *((void *)v13 + 2) = v14[2];
      v11((uint64_t)&v13[*(int *)(v15 + 28)], (uint64_t)v14 + *(int *)(v15 + 28), v10);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v16 + 56))(v13, 0, 1, v15);
    }
    uint64_t v40 = (void (*)(char *, char *, uint64_t))v11;
    uint64_t v19 = a3[8];
    uint64_t v20 = &v4[v19];
    uint64_t v21 = (char *)a2 + v19;
    uint64_t v22 = type metadata accessor for DeviceEvent.AttachmentInfo(0);
    uint64_t v23 = *(void *)(v22 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v23 + 48))(v21, 1, v22))
    {
      uint64_t v24 = sub_10000588C(&qword_10163CF20);
      memcpy(v20, v21, *(void *)(*(void *)(v24 - 8) + 64));
    }
    else
    {
      uint64_t v38 = v10;
      uint64_t v25 = type metadata accessor for UUID();
      uint64_t v26 = *(void *)(v25 - 8);
      NSString v37 = *(void (**)(char *, char *, uint64_t))(v26 + 16);
      v37(v20, v21, v25);
      uint64_t v27 = *(int *)(v22 + 20);
      __dst = &v20[v27];
      uint64_t v28 = &v21[v27];
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v26 + 48))(v28, 1, v25))
      {
        uint64_t v29 = sub_10000588C(&qword_101638CF0);
        memcpy(__dst, v28, *(void *)(*(void *)(v29 - 8) + 64));
      }
      else
      {
        v37(__dst, v28, v25);
        (*(void (**)(char *, void, uint64_t, uint64_t))(v26 + 56))(__dst, 0, 1, v25);
      }
      uint64_t v10 = v38;
      (*(void (**)(char *, void, uint64_t, uint64_t))(v23 + 56))(v20, 0, 1, v22);
    }
    uint64_t v30 = a3[9];
    int v31 = &v4[v30];
    uint64_t v32 = (uint64_t)a2 + v30;
    uint64_t v33 = type metadata accessor for UUID();
    int v34 = *(void (**)(char *, uint64_t, uint64_t))(*(void *)(v33 - 8) + 16);
    v34(v31, v32, v33);
    uint64_t v35 = type metadata accessor for BeaconIdentifier();
    v34(&v31[*(int *)(v35 + 20)], v32 + *(int *)(v35 + 20), v33);
    v40(&v4[a3[10]], (char *)a2 + a3[10], v10);
  }
  return v4;
}

uint64_t type metadata accessor for DeviceEvent.Location(uint64_t a1)
{
  return sub_1000F4EA4(a1, qword_101663D68);
}

uint64_t type metadata accessor for DeviceEvent.AttachmentInfo(uint64_t a1)
{
  return sub_1000F4EA4(a1, qword_101663CD8);
}

uint64_t sub_100F1BDE0(uint64_t a1, int *a2)
{
  uint64_t v4 = a1 + a2[6];
  uint64_t v5 = type metadata accessor for Date();
  uint64_t v20 = *(void (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8);
  v20(v4, v5);
  uint64_t v6 = a1 + a2[7];
  uint64_t v7 = type metadata accessor for DeviceEvent.Location(0);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 48))(v6, 1, v7)) {
    v20(v6 + *(int *)(v7 + 28), v5);
  }
  uint64_t v8 = a1 + a2[8];
  uint64_t v9 = type metadata accessor for DeviceEvent.AttachmentInfo(0);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 48))(v8, 1, v9))
  {
    uint64_t v10 = type metadata accessor for UUID();
    uint64_t v11 = *(void *)(v10 - 8);
    uint64_t v12 = *(void (**)(uint64_t, uint64_t))(v11 + 8);
    v12(v8, v10);
    uint64_t v13 = v8 + *(int *)(v9 + 20);
    if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v11 + 48))(v13, 1, v10)) {
      v12(v13, v10);
    }
  }
  uint64_t v14 = a1 + a2[9];
  uint64_t v15 = type metadata accessor for UUID();
  uint64_t v16 = *(void (**)(uint64_t, uint64_t))(*(void *)(v15 - 8) + 8);
  v16(v14, v15);
  uint64_t v17 = type metadata accessor for BeaconIdentifier();
  v16(v14 + *(int *)(v17 + 20), v15);
  uint64_t v18 = a1 + a2[10];

  return ((uint64_t (*)(uint64_t, uint64_t))v20)(v18, v5);
}

uint64_t sub_100F1C058(uint64_t a1, uint64_t a2, int *a3)
{
  *(void *)a1 = *(void *)a2;
  *(_WORD *)(a1 + 8) = *(_WORD *)(a2 + 8);
  uint64_t v6 = a3[6];
  uint64_t v7 = a1 + v6;
  uint64_t v8 = a2 + v6;
  uint64_t v9 = type metadata accessor for Date();
  uint64_t v10 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 16);
  v10(v7, v8, v9);
  uint64_t v11 = a3[7];
  uint64_t v12 = (void *)(a1 + v11);
  uint64_t v13 = (void *)(a2 + v11);
  uint64_t v14 = type metadata accessor for DeviceEvent.Location(0);
  uint64_t v15 = *(void *)(v14 - 8);
  if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v15 + 48))(v13, 1, v14))
  {
    uint64_t v16 = sub_10000588C(&qword_10164E880);
    memcpy(v12, v13, *(void *)(*(void *)(v16 - 8) + 64));
  }
  else
  {
    *(_OWORD *)uint64_t v12 = *(_OWORD *)v13;
    void v12[2] = v13[2];
    v10((uint64_t)v12 + *(int *)(v14 + 28), (uint64_t)v13 + *(int *)(v14 + 28), v9);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v15 + 56))(v12, 0, 1, v14);
  }
  uint64_t v38 = v10;
  uint64_t v17 = a3[8];
  uint64_t v18 = (char *)(a1 + v17);
  uint64_t v19 = (char *)(a2 + v17);
  uint64_t v20 = type metadata accessor for DeviceEvent.AttachmentInfo(0);
  uint64_t v21 = *(void *)(v20 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v21 + 48))(v19, 1, v20))
  {
    uint64_t v22 = sub_10000588C(&qword_10163CF20);
    memcpy(v18, v19, *(void *)(*(void *)(v22 - 8) + 64));
  }
  else
  {
    uint64_t v36 = v9;
    uint64_t v23 = type metadata accessor for UUID();
    uint64_t v24 = *(void *)(v23 - 8);
    uint64_t v35 = *(void (**)(char *, char *, uint64_t))(v24 + 16);
    v35(v18, v19, v23);
    uint64_t v25 = *(int *)(v20 + 20);
    __dst = &v18[v25];
    uint64_t v26 = &v19[v25];
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v24 + 48))(v26, 1, v23))
    {
      uint64_t v27 = sub_10000588C(&qword_101638CF0);
      memcpy(__dst, v26, *(void *)(*(void *)(v27 - 8) + 64));
    }
    else
    {
      v35(__dst, v26, v23);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v24 + 56))(__dst, 0, 1, v23);
    }
    uint64_t v9 = v36;
    (*(void (**)(char *, void, uint64_t, uint64_t))(v21 + 56))(v18, 0, 1, v20);
  }
  uint64_t v28 = a3[9];
  uint64_t v29 = a1 + v28;
  uint64_t v30 = a2 + v28;
  uint64_t v31 = type metadata accessor for UUID();
  uint64_t v32 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v31 - 8) + 16);
  v32(v29, v30, v31);
  uint64_t v33 = type metadata accessor for BeaconIdentifier();
  v32(v29 + *(int *)(v33 + 20), v30 + *(int *)(v33 + 20), v31);
  v38(a1 + a3[10], a2 + a3[10], v9);
  return a1;
}

uint64_t sub_100F1C468(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6 = *a2;
  *(unsigned char *)(a1 + 8) = *((unsigned char *)a2 + 8);
  *(void *)a1 = v6;
  *(unsigned char *)(a1 + 9) = *((unsigned char *)a2 + 9);
  uint64_t v7 = *(int *)(a3 + 24);
  uint64_t v8 = a1 + v7;
  uint64_t v9 = (uint64_t)a2 + v7;
  uint64_t v10 = type metadata accessor for Date();
  uint64_t v11 = *(void *)(v10 - 8);
  uint64_t v58 = v10;
  uint64_t v57 = *(void (**)(uint64_t, uint64_t))(v11 + 24);
  v57(v8, v9);
  uint64_t v55 = a3;
  uint64_t v12 = *(int *)(a3 + 28);
  uint64_t v13 = (char *)(a1 + v12);
  uint64_t v14 = (char *)a2 + v12;
  uint64_t v15 = type metadata accessor for DeviceEvent.Location(0);
  uint64_t v16 = *(void *)(v15 - 8);
  uint64_t v17 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v16 + 48);
  int v18 = v17(v13, 1, v15);
  int v19 = v17(v14, 1, v15);
  if (v18)
  {
    if (!v19)
    {
      *(void *)uint64_t v13 = *(void *)v14;
      *((void *)v13 + 1) = *((void *)v14 + 1);
      *((void *)v13 + 2) = *((void *)v14 + 2);
      (*(void (**)(char *, char *, uint64_t))(v11 + 16))(&v13[*(int *)(v15 + 28)], &v14[*(int *)(v15 + 28)], v58);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v16 + 56))(v13, 0, 1, v15);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v19)
  {
    sub_100F1CACC((uint64_t)v13, type metadata accessor for DeviceEvent.Location);
LABEL_6:
    uint64_t v20 = sub_10000588C(&qword_10164E880);
    memcpy(v13, v14, *(void *)(*(void *)(v20 - 8) + 64));
    goto LABEL_7;
  }
  *(void *)uint64_t v13 = *(void *)v14;
  *((void *)v13 + 1) = *((void *)v14 + 1);
  *((void *)v13 + 2) = *((void *)v14 + 2);
  ((void (*)(char *, char *, uint64_t))v57)(&v13[*(int *)(v15 + 28)], &v14[*(int *)(v15 + 28)], v58);
LABEL_7:
  uint64_t v21 = v55;
  uint64_t v22 = *(int *)(v55 + 32);
  uint64_t v23 = a1 + v22;
  uint64_t v24 = (char *)a2 + v22;
  uint64_t v25 = type metadata accessor for DeviceEvent.AttachmentInfo(0);
  uint64_t v26 = *(void *)(v25 - 8);
  uint64_t v27 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v26 + 48);
  int v28 = v27(v23, 1, v25);
  int v29 = v27((uint64_t)v24, 1, v25);
  if (!v28)
  {
    if (!v29)
    {
      uint64_t v39 = type metadata accessor for UUID();
      uint64_t v40 = *(void *)(v39 - 8);
      uint64_t v41 = *(void (**)(uint64_t, char *, uint64_t))(v40 + 24);
      v41(v23, v24, v39);
      uint64_t v42 = *(int *)(v25 + 20);
      uint64_t v43 = (void *)(v23 + v42);
      uint64_t v44 = &v24[v42];
      int v45 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v40 + 48);
      int v46 = v45(v43, 1, v39);
      int v47 = v45(v44, 1, v39);
      if (v46)
      {
        uint64_t v21 = v55;
        if (!v47)
        {
          (*(void (**)(void *, char *, uint64_t))(v40 + 16))(v43, v44, v39);
          (*(void (**)(void *, void, uint64_t, uint64_t))(v40 + 56))(v43, 0, 1, v39);
          goto LABEL_21;
        }
      }
      else
      {
        uint64_t v21 = v55;
        if (!v47)
        {
          v41((uint64_t)v43, v44, v39);
          goto LABEL_21;
        }
        (*(void (**)(void *, uint64_t))(v40 + 8))(v43, v39);
      }
      size_t v36 = *(void *)(*(void *)(sub_10000588C(&qword_101638CF0) - 8) + 64);
      NSString v37 = v43;
      uint64_t v38 = v44;
      goto LABEL_14;
    }
    sub_100F1CACC(v23, type metadata accessor for DeviceEvent.AttachmentInfo);
LABEL_13:
    size_t v36 = *(void *)(*(void *)(sub_10000588C(&qword_10163CF20) - 8) + 64);
    NSString v37 = (void *)v23;
    uint64_t v38 = v24;
LABEL_14:
    memcpy(v37, v38, v36);
    goto LABEL_21;
  }
  if (v29) {
    goto LABEL_13;
  }
  uint64_t v30 = type metadata accessor for UUID();
  uint64_t v31 = *(void *)(v30 - 8);
  unint64_t v56 = *(void (**)(uint64_t, char *, uint64_t))(v31 + 16);
  v56(v23, v24, v30);
  uint64_t v32 = *(int *)(v25 + 20);
  uint64_t v33 = (void *)(v23 + v32);
  int v34 = &v24[v32];
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v31 + 48))(v34, 1, v30))
  {
    uint64_t v35 = sub_10000588C(&qword_101638CF0);
    memcpy(v33, v34, *(void *)(*(void *)(v35 - 8) + 64));
  }
  else
  {
    v56((uint64_t)v33, v34, v30);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v31 + 56))(v33, 0, 1, v30);
  }
  (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v26 + 56))(v23, 0, 1, v25);
LABEL_21:
  uint64_t v48 = *(int *)(v21 + 36);
  uint64_t v49 = a1 + v48;
  uint64_t v50 = (uint64_t)a2 + v48;
  uint64_t v51 = type metadata accessor for UUID();
  uint64_t v52 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v51 - 8) + 24);
  v52(v49, v50, v51);
  uint64_t v53 = type metadata accessor for BeaconIdentifier();
  v52(v49 + *(int *)(v53 + 20), v50 + *(int *)(v53 + 20), v51);
  ((void (*)(uint64_t, char *, uint64_t))v57)(a1 + *(int *)(v21 + 40), (char *)a2 + *(int *)(v21 + 40), v58);
  return a1;
}

uint64_t sub_100F1CACC(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t sub_100F1CB2C(uint64_t a1, uint64_t a2, int *a3)
{
  *(void *)a1 = *(void *)a2;
  *(_WORD *)(a1 + 8) = *(_WORD *)(a2 + 8);
  uint64_t v6 = a3[6];
  uint64_t v7 = a1 + v6;
  uint64_t v8 = a2 + v6;
  uint64_t v9 = type metadata accessor for Date();
  uint64_t v10 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 32);
  v10(v7, v8, v9);
  uint64_t v11 = a3[7];
  uint64_t v12 = (void *)(a1 + v11);
  uint64_t v13 = (void *)(a2 + v11);
  uint64_t v14 = type metadata accessor for DeviceEvent.Location(0);
  uint64_t v15 = *(void *)(v14 - 8);
  if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v15 + 48))(v13, 1, v14))
  {
    uint64_t v16 = sub_10000588C(&qword_10164E880);
    memcpy(v12, v13, *(void *)(*(void *)(v16 - 8) + 64));
  }
  else
  {
    *(_OWORD *)uint64_t v12 = *(_OWORD *)v13;
    void v12[2] = v13[2];
    v10((uint64_t)v12 + *(int *)(v14 + 28), (uint64_t)v13 + *(int *)(v14 + 28), v9);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v15 + 56))(v12, 0, 1, v14);
  }
  uint64_t v38 = v10;
  uint64_t v17 = a3[8];
  int v18 = (char *)(a1 + v17);
  int v19 = (char *)(a2 + v17);
  uint64_t v20 = type metadata accessor for DeviceEvent.AttachmentInfo(0);
  uint64_t v21 = *(void *)(v20 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v21 + 48))(v19, 1, v20))
  {
    uint64_t v22 = sub_10000588C(&qword_10163CF20);
    memcpy(v18, v19, *(void *)(*(void *)(v22 - 8) + 64));
  }
  else
  {
    uint64_t v36 = v9;
    uint64_t v23 = type metadata accessor for UUID();
    uint64_t v24 = *(void *)(v23 - 8);
    uint64_t v35 = *(void (**)(char *, char *, uint64_t))(v24 + 32);
    v35(v18, v19, v23);
    uint64_t v25 = *(int *)(v20 + 20);
    __dst = &v18[v25];
    uint64_t v26 = &v19[v25];
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v24 + 48))(v26, 1, v23))
    {
      uint64_t v27 = sub_10000588C(&qword_101638CF0);
      memcpy(__dst, v26, *(void *)(*(void *)(v27 - 8) + 64));
    }
    else
    {
      v35(__dst, v26, v23);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v24 + 56))(__dst, 0, 1, v23);
    }
    uint64_t v9 = v36;
    (*(void (**)(char *, void, uint64_t, uint64_t))(v21 + 56))(v18, 0, 1, v20);
  }
  uint64_t v28 = a3[9];
  uint64_t v29 = a1 + v28;
  uint64_t v30 = a2 + v28;
  uint64_t v31 = type metadata accessor for UUID();
  uint64_t v32 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v31 - 8) + 32);
  v32(v29, v30, v31);
  uint64_t v33 = type metadata accessor for BeaconIdentifier();
  v32(v29 + *(int *)(v33 + 20), v30 + *(int *)(v33 + 20), v31);
  v38(a1 + a3[10], a2 + a3[10], v9);
  return a1;
}

uint64_t sub_100F1CF3C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)a1 = *(void *)a2;
  *(_WORD *)(a1 + 8) = *(_WORD *)(a2 + 8);
  uint64_t v6 = *(int *)(a3 + 24);
  uint64_t v7 = a1 + v6;
  uint64_t v8 = a2 + v6;
  uint64_t v9 = type metadata accessor for Date();
  uint64_t v10 = *(void *)(v9 - 8);
  uint64_t v57 = v9;
  unint64_t v56 = *(void (**)(uint64_t, uint64_t))(v10 + 40);
  v56(v7, v8);
  uint64_t v54 = a3;
  uint64_t v11 = *(int *)(a3 + 28);
  uint64_t v12 = (char *)(a1 + v11);
  uint64_t v13 = (char *)(a2 + v11);
  uint64_t v14 = type metadata accessor for DeviceEvent.Location(0);
  uint64_t v15 = *(void *)(v14 - 8);
  uint64_t v16 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v15 + 48);
  int v17 = v16(v12, 1, v14);
  int v18 = v16(v13, 1, v14);
  if (v17)
  {
    if (!v18)
    {
      *(_OWORD *)uint64_t v12 = *(_OWORD *)v13;
      *((void *)v12 + 2) = *((void *)v13 + 2);
      (*(void (**)(char *, char *, uint64_t))(v10 + 32))(&v12[*(int *)(v14 + 28)], &v13[*(int *)(v14 + 28)], v57);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v15 + 56))(v12, 0, 1, v14);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v18)
  {
    sub_100F1CACC((uint64_t)v12, type metadata accessor for DeviceEvent.Location);
LABEL_6:
    uint64_t v19 = sub_10000588C(&qword_10164E880);
    memcpy(v12, v13, *(void *)(*(void *)(v19 - 8) + 64));
    goto LABEL_7;
  }
  *(_OWORD *)uint64_t v12 = *(_OWORD *)v13;
  *((void *)v12 + 2) = *((void *)v13 + 2);
  ((void (*)(char *, char *, uint64_t))v56)(&v12[*(int *)(v14 + 28)], &v13[*(int *)(v14 + 28)], v57);
LABEL_7:
  uint64_t v20 = v54;
  uint64_t v21 = *(int *)(v54 + 32);
  uint64_t v22 = a1 + v21;
  uint64_t v23 = (char *)(a2 + v21);
  uint64_t v24 = type metadata accessor for DeviceEvent.AttachmentInfo(0);
  uint64_t v25 = *(void *)(v24 - 8);
  uint64_t v26 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v25 + 48);
  int v27 = v26(v22, 1, v24);
  int v28 = v26((uint64_t)v23, 1, v24);
  if (!v27)
  {
    if (!v28)
    {
      uint64_t v38 = type metadata accessor for UUID();
      uint64_t v39 = *(void *)(v38 - 8);
      uint64_t v40 = *(void (**)(uint64_t, char *, uint64_t))(v39 + 40);
      v40(v22, v23, v38);
      uint64_t v41 = *(int *)(v24 + 20);
      uint64_t v42 = (void *)(v22 + v41);
      uint64_t v43 = &v23[v41];
      uint64_t v44 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v39 + 48);
      int v45 = v44(v42, 1, v38);
      int v46 = v44(v43, 1, v38);
      if (v45)
      {
        uint64_t v20 = v54;
        if (!v46)
        {
          (*(void (**)(void *, char *, uint64_t))(v39 + 32))(v42, v43, v38);
          (*(void (**)(void *, void, uint64_t, uint64_t))(v39 + 56))(v42, 0, 1, v38);
          goto LABEL_21;
        }
      }
      else
      {
        uint64_t v20 = v54;
        if (!v46)
        {
          v40((uint64_t)v42, v43, v38);
          goto LABEL_21;
        }
        (*(void (**)(void *, uint64_t))(v39 + 8))(v42, v38);
      }
      size_t v35 = *(void *)(*(void *)(sub_10000588C(&qword_101638CF0) - 8) + 64);
      uint64_t v36 = v42;
      NSString v37 = v43;
      goto LABEL_14;
    }
    sub_100F1CACC(v22, type metadata accessor for DeviceEvent.AttachmentInfo);
LABEL_13:
    size_t v35 = *(void *)(*(void *)(sub_10000588C(&qword_10163CF20) - 8) + 64);
    uint64_t v36 = (void *)v22;
    NSString v37 = v23;
LABEL_14:
    memcpy(v36, v37, v35);
    goto LABEL_21;
  }
  if (v28) {
    goto LABEL_13;
  }
  uint64_t v29 = type metadata accessor for UUID();
  uint64_t v30 = *(void *)(v29 - 8);
  uint64_t v55 = *(void (**)(uint64_t, char *, uint64_t))(v30 + 32);
  v55(v22, v23, v29);
  uint64_t v31 = *(int *)(v24 + 20);
  uint64_t v32 = (void *)(v22 + v31);
  uint64_t v33 = &v23[v31];
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v30 + 48))(v33, 1, v29))
  {
    uint64_t v34 = sub_10000588C(&qword_101638CF0);
    memcpy(v32, v33, *(void *)(*(void *)(v34 - 8) + 64));
  }
  else
  {
    v55((uint64_t)v32, v33, v29);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v30 + 56))(v32, 0, 1, v29);
  }
  (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v25 + 56))(v22, 0, 1, v24);
LABEL_21:
  uint64_t v47 = *(int *)(v20 + 36);
  uint64_t v48 = a1 + v47;
  uint64_t v49 = a2 + v47;
  uint64_t v50 = type metadata accessor for UUID();
  uint64_t v51 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v50 - 8) + 40);
  v51(v48, v49, v50);
  uint64_t v52 = type metadata accessor for BeaconIdentifier();
  v51(v48 + *(int *)(v52 + 20), v49 + *(int *)(v52 + 20), v50);
  ((void (*)(uint64_t, uint64_t, uint64_t))v56)(a1 + *(int *)(v20 + 40), a2 + *(int *)(v20 + 40), v57);
  return a1;
}

uint64_t sub_100F1D588(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_100F1D59C);
}

uint64_t sub_100F1D59C(uint64_t a1, uint64_t a2, int *a3)
{
  if (a2 == 248)
  {
    unsigned int v4 = *(unsigned __int8 *)(a1 + 9);
    if (v4 >= 8) {
      return v4 - 7;
    }
    else {
      return 0;
    }
  }
  uint64_t v8 = type metadata accessor for Date();
  if (*(_DWORD *)(*(void *)(v8 - 8) + 84) == a2)
  {
    uint64_t v9 = v8;
    uint64_t v10 = *(void *)(v8 - 8);
    uint64_t v11 = a3[6];
LABEL_11:
    uint64_t v14 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v10 + 48);
    return v14(a1 + v11, a2, v9);
  }
  uint64_t v12 = sub_10000588C(&qword_10164E880);
  if (*(_DWORD *)(*(void *)(v12 - 8) + 84) == a2)
  {
    uint64_t v9 = v12;
    uint64_t v10 = *(void *)(v12 - 8);
    uint64_t v11 = a3[7];
    goto LABEL_11;
  }
  uint64_t v13 = sub_10000588C(&qword_10163CF20);
  if (*(_DWORD *)(*(void *)(v13 - 8) + 84) == a2)
  {
    uint64_t v9 = v13;
    uint64_t v10 = *(void *)(v13 - 8);
    uint64_t v11 = a3[8];
    goto LABEL_11;
  }
  uint64_t v15 = type metadata accessor for BeaconIdentifier();
  uint64_t v16 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v15 - 8) + 48);
  uint64_t v17 = v15;
  uint64_t v18 = a1 + a3[9];

  return v16(v18, a2, v17);
}

uint64_t sub_100F1D760(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_100F1D774);
}

uint64_t sub_100F1D774(uint64_t result, uint64_t a2, int a3, int *a4)
{
  uint64_t v5 = result;
  if (a3 == 248)
  {
    *(unsigned char *)(result + 9) = a2 + 7;
    return result;
  }
  uint64_t v8 = type metadata accessor for Date();
  if (*(_DWORD *)(*(void *)(v8 - 8) + 84) == a3)
  {
    uint64_t v9 = v8;
    uint64_t v10 = *(void *)(v8 - 8);
    uint64_t v11 = a4[6];
LABEL_9:
    uint64_t v14 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v10 + 56);
    return v14(v5 + v11, a2, a2, v9);
  }
  uint64_t v12 = sub_10000588C(&qword_10164E880);
  if (*(_DWORD *)(*(void *)(v12 - 8) + 84) == a3)
  {
    uint64_t v9 = v12;
    uint64_t v10 = *(void *)(v12 - 8);
    uint64_t v11 = a4[7];
    goto LABEL_9;
  }
  uint64_t v13 = sub_10000588C(&qword_10163CF20);
  if (*(_DWORD *)(*(void *)(v13 - 8) + 84) == a3)
  {
    uint64_t v9 = v13;
    uint64_t v10 = *(void *)(v13 - 8);
    uint64_t v11 = a4[8];
    goto LABEL_9;
  }
  uint64_t v15 = type metadata accessor for BeaconIdentifier();
  uint64_t v16 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v15 - 8) + 56);
  uint64_t v17 = v15;
  uint64_t v18 = v5 + a4[9];

  return v16(v18, a2, a2, v17);
}

uint64_t type metadata accessor for DeviceEvent(uint64_t a1)
{
  return sub_1000F4EA4(a1, (uint64_t *)&unk_101663C20);
}

void sub_100F1D95C()
{
  type metadata accessor for Date();
  if (v0 <= 0x3F)
  {
    sub_100F1DAE8(319, &qword_101663C30, (void (*)(uint64_t))type metadata accessor for DeviceEvent.Location);
    if (v1 <= 0x3F)
    {
      sub_100F1DAE8(319, (unint64_t *)&unk_101663C38, (void (*)(uint64_t))type metadata accessor for DeviceEvent.AttachmentInfo);
      if (v2 <= 0x3F)
      {
        type metadata accessor for BeaconIdentifier();
        if (v3 <= 0x3F) {
          swift_initStructMetadata();
        }
      }
    }
  }
}

void sub_100F1DAE8(uint64_t a1, unint64_t *a2, void (*a3)(uint64_t))
{
  if (!*a2)
  {
    a3(255);
    unint64_t v4 = type metadata accessor for Optional();
    if (!v5) {
      atomic_store(v4, a2);
    }
  }
}

uint64_t *sub_100F1DB3C(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v14 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v14 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v7 = type metadata accessor for UUID();
    uint64_t v8 = *(void *)(v7 - 8);
    uint64_t v9 = *(void (**)(uint64_t *, uint64_t *, uint64_t))(v8 + 16);
    v9(a1, a2, v7);
    uint64_t v10 = *(int *)(a3 + 20);
    uint64_t v11 = (char *)a1 + v10;
    uint64_t v12 = (char *)a2 + v10;
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v8 + 48))(v12, 1, v7))
    {
      uint64_t v13 = sub_10000588C(&qword_101638CF0);
      memcpy(v11, v12, *(void *)(*(void *)(v13 - 8) + 64));
    }
    else
    {
      v9((uint64_t *)v11, (uint64_t *)v12, v7);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v8 + 56))(v11, 0, 1, v7);
    }
  }
  return a1;
}

uint64_t sub_100F1DCD4(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for UUID();
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v8 = *(void (**)(uint64_t, uint64_t))(v5 + 8);
  v8(a1, v4);
  uint64_t v6 = a1 + *(int *)(a2 + 20);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v5 + 48))(v6, 1, v4);
  if (!result)
  {
    return ((uint64_t (*)(uint64_t, uint64_t))v8)(v6, v4);
  }
  return result;
}

char *sub_100F1DDD4(char *a1, char *a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for UUID();
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = *(void (**)(void *, const void *, uint64_t))(v7 + 16);
  v8(a1, a2, v6);
  uint64_t v9 = *(int *)(a3 + 20);
  uint64_t v10 = &a1[v9];
  uint64_t v11 = &a2[v9];
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v7 + 48))(v11, 1, v6))
  {
    uint64_t v12 = sub_10000588C(&qword_101638CF0);
    memcpy(v10, v11, *(void *)(*(void *)(v12 - 8) + 64));
  }
  else
  {
    v8(v10, v11, v6);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v7 + 56))(v10, 0, 1, v6);
  }
  return a1;
}

char *sub_100F1DF1C(char *a1, char *a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for UUID();
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = *(void (**)(void *, const void *, uint64_t))(v7 + 24);
  v8(a1, a2, v6);
  uint64_t v9 = *(int *)(a3 + 20);
  uint64_t v10 = &a1[v9];
  uint64_t v11 = &a2[v9];
  uint64_t v12 = *(uint64_t (**)(const void *, uint64_t, uint64_t))(v7 + 48);
  int v13 = v12(&a1[v9], 1, v6);
  int v14 = v12(v11, 1, v6);
  if (!v13)
  {
    if (!v14)
    {
      v8(v10, v11, v6);
      return a1;
    }
    (*(void (**)(char *, uint64_t))(v7 + 8))(v10, v6);
    goto LABEL_6;
  }
  if (v14)
  {
LABEL_6:
    uint64_t v15 = sub_10000588C(&qword_101638CF0);
    memcpy(v10, v11, *(void *)(*(void *)(v15 - 8) + 64));
    return a1;
  }
  (*(void (**)(char *, char *, uint64_t))(v7 + 16))(v10, v11, v6);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v7 + 56))(v10, 0, 1, v6);
  return a1;
}

char *sub_100F1E0CC(char *a1, char *a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for UUID();
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = *(void (**)(void *, const void *, uint64_t))(v7 + 32);
  v8(a1, a2, v6);
  uint64_t v9 = *(int *)(a3 + 20);
  uint64_t v10 = &a1[v9];
  uint64_t v11 = &a2[v9];
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v7 + 48))(v11, 1, v6))
  {
    uint64_t v12 = sub_10000588C(&qword_101638CF0);
    memcpy(v10, v11, *(void *)(*(void *)(v12 - 8) + 64));
  }
  else
  {
    v8(v10, v11, v6);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v7 + 56))(v10, 0, 1, v6);
  }
  return a1;
}

char *sub_100F1E214(char *a1, char *a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for UUID();
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = *(void (**)(void *, const void *, uint64_t))(v7 + 40);
  v8(a1, a2, v6);
  uint64_t v9 = *(int *)(a3 + 20);
  uint64_t v10 = &a1[v9];
  uint64_t v11 = &a2[v9];
  uint64_t v12 = *(uint64_t (**)(const void *, uint64_t, uint64_t))(v7 + 48);
  int v13 = v12(&a1[v9], 1, v6);
  int v14 = v12(v11, 1, v6);
  if (!v13)
  {
    if (!v14)
    {
      v8(v10, v11, v6);
      return a1;
    }
    (*(void (**)(char *, uint64_t))(v7 + 8))(v10, v6);
    goto LABEL_6;
  }
  if (v14)
  {
LABEL_6:
    uint64_t v15 = sub_10000588C(&qword_101638CF0);
    memcpy(v10, v11, *(void *)(*(void *)(v15 - 8) + 64));
    return a1;
  }
  (*(void (**)(char *, char *, uint64_t))(v7 + 32))(v10, v11, v6);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v7 + 56))(v10, 0, 1, v6);
  return a1;
}

uint64_t sub_100F1E3C4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_100F1E3D8);
}

uint64_t sub_100F1E3D8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for UUID();
  uint64_t v7 = *(void *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == a2)
  {
    uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    return v8(a1, a2, v6);
  }
  else
  {
    uint64_t v10 = sub_10000588C(&qword_101638CF0);
    uint64_t v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 48);
    uint64_t v12 = v10;
    uint64_t v13 = a1 + *(int *)(a3 + 20);
    return v11(v13, a2, v12);
  }
}

uint64_t sub_100F1E4D4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_100F1E4E8);
}

uint64_t sub_100F1E4E8(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v8 = type metadata accessor for UUID();
  uint64_t v9 = *(void *)(v8 - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    uint64_t v10 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    return v10(a1, a2, a2, v8);
  }
  else
  {
    uint64_t v12 = sub_10000588C(&qword_101638CF0);
    uint64_t v13 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v12 - 8) + 56);
    uint64_t v14 = v12;
    uint64_t v15 = a1 + *(int *)(a4 + 20);
    return v13(v15, a2, a2, v14);
  }
}

void sub_100F1E5F0()
{
  type metadata accessor for UUID();
  if (v0 <= 0x3F)
  {
    sub_100F1DAE8(319, (unint64_t *)&qword_101655AB0, (void (*)(uint64_t))&type metadata accessor for UUID);
    if (v1 <= 0x3F) {
      swift_initStructMetadata();
    }
  }
}

uint64_t sub_100F1E6D4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_100F1E6E8);
}

uint64_t sub_100F1E6E8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = a1 + *(int *)(a3 + 28);
  uint64_t v5 = type metadata accessor for Date();
  uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 48);

  return v6(v4, a2, v5);
}

uint64_t sub_100F1E758(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_100F1E76C);
}

uint64_t sub_100F1E76C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = a1 + *(int *)(a4 + 28);
  uint64_t v6 = type metadata accessor for Date();
  uint64_t v7 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 56);

  return v7(v5, a2, a2, v6);
}

uint64_t sub_100F1E7E0(void *a1)
{
  uint64_t v3 = sub_10000588C(&qword_101663E38);
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  uint64_t v6 = &v8[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)];
  sub_10001CD44(a1, a1[3]);
  sub_100F23848();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  v8[15] = 0;
  KeyedEncodingContainer.encode(_:forKey:)();
  if (!v1)
  {
    v8[14] = 1;
    KeyedEncodingContainer.encode(_:forKey:)();
    v8[13] = 2;
    KeyedEncodingContainer.encode(_:forKey:)();
    type metadata accessor for DeviceEvent.Location(0);
    v8[12] = 3;
    type metadata accessor for Date();
    sub_100F1FFEC((unint64_t *)&unk_10163ACE0, (void (*)(uint64_t))&type metadata accessor for Date);
    KeyedEncodingContainer.encode<A>(_:forKey:)();
  }
  return (*(uint64_t (**)(unsigned char *, uint64_t))(v4 + 8))(v6, v3);
}

Swift::Int sub_100F1E9E8()
{
  Hasher.init(_seed:)();
  if ((*v0 & 0x7FFFFFFFFFFFFFFFLL) != 0) {
    Swift::UInt64 v1 = *v0;
  }
  else {
    Swift::UInt64 v1 = 0;
  }
  Hasher._combine(_:)(v1);
  if ((v0[1] & 0x7FFFFFFFFFFFFFFFLL) != 0) {
    Swift::UInt64 v2 = v0[1];
  }
  else {
    Swift::UInt64 v2 = 0;
  }
  Hasher._combine(_:)(v2);
  if ((v0[2] & 0x7FFFFFFFFFFFFFFFLL) != 0) {
    Swift::UInt64 v3 = v0[2];
  }
  else {
    Swift::UInt64 v3 = 0;
  }
  Hasher._combine(_:)(v3);
  type metadata accessor for DeviceEvent.Location(0);
  type metadata accessor for Date();
  sub_100F1FFEC((unint64_t *)&unk_10163ADF0, (void (*)(uint64_t))&type metadata accessor for Date);
  dispatch thunk of Hashable.hash(into:)();
  return Hasher._finalize()();
}

uint64_t sub_100F1EAC0@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v22 = a2;
  uint64_t v3 = type metadata accessor for Date();
  uint64_t v23 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  uint64_t v5 = (char *)&v22 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = sub_10000588C(&qword_101663E28);
  uint64_t v24 = *(void *)(v6 - 8);
  uint64_t v25 = v6;
  __chkstk_darwin(v6);
  uint64_t v8 = (char *)&v22 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = type metadata accessor for DeviceEvent.Location(0);
  __chkstk_darwin(v9);
  uint64_t v11 = (char *)&v22 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10001CD44(a1, a1[3]);
  sub_100F23848();
  uint64_t v26 = v8;
  uint64_t v12 = v27;
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (!v12)
  {
    uint64_t v13 = v5;
    char v31 = 0;
    uint64_t v14 = v24;
    uint64_t v15 = v25;
    KeyedDecodingContainer.decode(_:forKey:)();
    *(void *)uint64_t v11 = v16;
    char v30 = 1;
    KeyedDecodingContainer.decode(_:forKey:)();
    *((void *)v11 + 1) = v17;
    char v29 = 2;
    KeyedDecodingContainer.decode(_:forKey:)();
    *((void *)v11 + 2) = v19;
    char v28 = 3;
    sub_100F1FFEC(&qword_10163ACC0, (void (*)(uint64_t))&type metadata accessor for Date);
    int v27 = v13;
    uint64_t v20 = v26;
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    (*(void (**)(char *, uint64_t))(v14 + 8))(v20, v15);
    uint64_t v21 = v22;
    (*(void (**)(char *, char *, uint64_t))(v23 + 32))(&v11[*(int *)(v9 + 28)], v27, v3);
    sub_100F22744((uint64_t)v11, v21, type metadata accessor for DeviceEvent.Location);
  }
  return _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)a1);
}

uint64_t sub_100F1EE00(void *a1)
{
  uint64_t v3 = sub_10000588C(&qword_101663E20);
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  uint64_t v6 = &v8[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)];
  sub_10001CD44(a1, a1[3]);
  sub_100F2378C();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  v8[15] = 0;
  type metadata accessor for UUID();
  sub_100F1FFEC(&qword_10163B040, (void (*)(uint64_t))&type metadata accessor for UUID);
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  if (!v1)
  {
    type metadata accessor for DeviceEvent.AttachmentInfo(0);
    v8[14] = 1;
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)();
  }
  return (*(uint64_t (**)(unsigned char *, uint64_t))(v4 + 8))(v6, v3);
}

Swift::Int sub_100F1EFC0()
{
  uint64_t v1 = type metadata accessor for UUID();
  uint64_t v2 = *(void *)(v1 - 8);
  __chkstk_darwin(v1);
  uint64_t v4 = (char *)&v10 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = sub_10000588C(&qword_101638CF0);
  __chkstk_darwin(v5 - 8);
  uint64_t v7 = (char *)&v10 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  Hasher.init(_seed:)();
  sub_100F1FFEC(&qword_10163BC60, (void (*)(uint64_t))&type metadata accessor for UUID);
  dispatch thunk of Hashable.hash(into:)();
  uint64_t v8 = type metadata accessor for DeviceEvent.AttachmentInfo(0);
  sub_10001D074(v0 + *(int *)(v8 + 20), (uint64_t)v7, &qword_101638CF0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v2 + 48))(v7, 1, v1) == 1)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v2 + 32))(v4, v7, v1);
    Hasher._combine(_:)(1u);
    dispatch thunk of Hashable.hash(into:)();
    (*(void (**)(char *, uint64_t))(v2 + 8))(v4, v1);
  }
  return Hasher._finalize()();
}

uint64_t sub_100F1F1C8@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v20 = a2;
  uint64_t v4 = sub_10000588C(&qword_101638CF0);
  __chkstk_darwin(v4 - 8);
  uint64_t v6 = (char *)&v18 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v24 = type metadata accessor for UUID();
  uint64_t v21 = *(void *)(v24 - 8);
  __chkstk_darwin(v24);
  uint64_t v22 = (char *)&v18 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v25 = sub_10000588C(&qword_101663E10);
  uint64_t v23 = *(void *)(v25 - 8);
  __chkstk_darwin(v25);
  uint64_t v9 = (char *)&v18 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = type metadata accessor for DeviceEvent.AttachmentInfo(0);
  __chkstk_darwin(v10);
  uint64_t v12 = (char *)&v18 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10001CD44(a1, a1[3]);
  sub_100F2378C();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v2) {
    return _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)a1);
  }
  uint64_t v18 = v10;
  uint64_t v19 = v12;
  uint64_t v13 = v21;
  char v27 = 0;
  sub_100F1FFEC((unint64_t *)&qword_10163B010, (void (*)(uint64_t))&type metadata accessor for UUID);
  uint64_t v14 = v22;
  uint64_t v15 = v24;
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  (*(void (**)(char *, char *, uint64_t))(v13 + 32))(v19, v14, v15);
  char v26 = 1;
  KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
  (*(void (**)(char *, uint64_t))(v23 + 8))(v9, v25);
  uint64_t v16 = (uint64_t)v19;
  sub_10001D608((uint64_t)v6, (uint64_t)&v19[*(int *)(v18 + 20)], &qword_101638CF0);
  sub_100F237E0(v16, v20, type metadata accessor for DeviceEvent.AttachmentInfo);
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)a1);
  return sub_100F1CACC(v16, type metadata accessor for DeviceEvent.AttachmentInfo);
}

uint64_t sub_100F1F598()
{
  return RawRepresentable<>.init(from:)();
}

uint64_t sub_100F1F5F8()
{
  return RawRepresentable<>.encode(to:)();
}

uint64_t sub_100F1F648()
{
  uint64_t result = 0x6E776F6E6B6E752ELL;
  switch(*v0)
  {
    case 1:
      uint64_t result = 0x7463656E6E6F632ELL;
      break;
    case 2:
      uint64_t result = 0x6E6E6F637369642ELL;
      break;
    case 3:
      unsigned int v2 = 1953784110;
      goto LABEL_6;
    case 4:
      unsigned int v2 = 1952801838;
LABEL_6:
      uint64_t result = v2 | 0x68636100000000;
      break;
    case 5:
      uint64_t result = 0x657463657465642ELL;
      break;
    case 6:
      uint64_t result = 0x657070617369642ELL;
      break;
    case 7:
      uint64_t result = 0x726961702ELL;
      break;
    default:
      return result;
  }
  return result;
}

unint64_t sub_100F1F754()
{
  unint64_t result = 0x656475746974616CLL;
  switch(*v0)
  {
    case 1:
      unint64_t result = 0x64757469676E6F6CLL;
      break;
    case 2:
      unint64_t result = 0xD000000000000012;
      break;
    case 3:
      unint64_t result = 0x6D617473656D6974;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t sub_100F1F7F4(uint64_t a1)
{
  unint64_t v2 = sub_100F23848();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_100F1F830(uint64_t a1)
{
  unint64_t v2 = sub_100F23848();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_100F1F86C@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_100F1EAC0(a1, a2);
}

uint64_t sub_100F1F884(void *a1)
{
  return sub_100F1E7E0(a1);
}

uint64_t sub_100F1F8A0()
{
  if ((*v0 & 0x7FFFFFFFFFFFFFFFLL) != 0) {
    Swift::UInt64 v1 = *v0;
  }
  else {
    Swift::UInt64 v1 = 0;
  }
  Hasher._combine(_:)(v1);
  if ((v0[1] & 0x7FFFFFFFFFFFFFFFLL) != 0) {
    Swift::UInt64 v2 = v0[1];
  }
  else {
    Swift::UInt64 v2 = 0;
  }
  Hasher._combine(_:)(v2);
  if ((v0[2] & 0x7FFFFFFFFFFFFFFFLL) != 0) {
    Swift::UInt64 v3 = v0[2];
  }
  else {
    Swift::UInt64 v3 = 0;
  }
  Hasher._combine(_:)(v3);
  type metadata accessor for Date();
  sub_100F1FFEC((unint64_t *)&unk_10163ADF0, (void (*)(uint64_t))&type metadata accessor for Date);
  return dispatch thunk of Hashable.hash(into:)();
}

Swift::Int sub_100F1F95C()
{
  Hasher.init(_seed:)();
  if ((*v0 & 0x7FFFFFFFFFFFFFFFLL) != 0) {
    Swift::UInt64 v1 = *v0;
  }
  else {
    Swift::UInt64 v1 = 0;
  }
  Hasher._combine(_:)(v1);
  if ((v0[1] & 0x7FFFFFFFFFFFFFFFLL) != 0) {
    Swift::UInt64 v2 = v0[1];
  }
  else {
    Swift::UInt64 v2 = 0;
  }
  Hasher._combine(_:)(v2);
  if ((v0[2] & 0x7FFFFFFFFFFFFFFFLL) != 0) {
    Swift::UInt64 v3 = v0[2];
  }
  else {
    Swift::UInt64 v3 = 0;
  }
  Hasher._combine(_:)(v3);
  type metadata accessor for Date();
  sub_100F1FFEC((unint64_t *)&unk_10163ADF0, (void (*)(uint64_t))&type metadata accessor for Date);
  dispatch thunk of Hashable.hash(into:)();
  return Hasher._finalize()();
}

uint64_t sub_100F1FA38()
{
  return sub_100F1FFEC(&qword_101663DA8, (void (*)(uint64_t))type metadata accessor for DeviceEvent.Location);
}

uint64_t sub_100F1FA80()
{
  if (*v0) {
    return 0x73736553746F6F62;
  }
  else {
    return 0xD000000000000010;
  }
}

uint64_t sub_100F1FACC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_100F2401C(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_100F1FAF4(uint64_t a1)
{
  unint64_t v2 = sub_100F2378C();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_100F1FB30(uint64_t a1)
{
  unint64_t v2 = sub_100F2378C();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_100F1FB6C@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_100F1F1C8(a1, a2);
}

uint64_t sub_100F1FB84(void *a1)
{
  return sub_100F1EE00(a1);
}

void sub_100F1FBA0(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for UUID();
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v7 = (char *)&v11 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = sub_10000588C(&qword_101638CF0);
  __chkstk_darwin(v8 - 8);
  uint64_t v10 = (char *)&v11 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100F1FFEC(&qword_10163BC60, (void (*)(uint64_t))&type metadata accessor for UUID);
  dispatch thunk of Hashable.hash(into:)();
  sub_10001D074(v2 + *(int *)(a2 + 20), (uint64_t)v10, &qword_101638CF0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v5 + 48))(v10, 1, v4) == 1)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v5 + 32))(v7, v10, v4);
    Hasher._combine(_:)(1u);
    dispatch thunk of Hashable.hash(into:)();
    (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  }
}

Swift::Int sub_100F1FD98(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for UUID();
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v7 = (char *)&v12 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = sub_10000588C(&qword_101638CF0);
  __chkstk_darwin(v8 - 8);
  uint64_t v10 = (char *)&v12 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  Hasher.init(_seed:)();
  sub_100F1FFEC(&qword_10163BC60, (void (*)(uint64_t))&type metadata accessor for UUID);
  dispatch thunk of Hashable.hash(into:)();
  sub_10001D074(v2 + *(int *)(a2 + 20), (uint64_t)v10, &qword_101638CF0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v5 + 48))(v10, 1, v4) == 1)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v5 + 32))(v7, v10, v4);
    Hasher._combine(_:)(1u);
    dispatch thunk of Hashable.hash(into:)();
    (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  }
  return Hasher._finalize()();
}

uint64_t sub_100F1FFA4()
{
  return sub_100F1FFEC(&qword_101663DB0, (void (*)(uint64_t))type metadata accessor for DeviceEvent.AttachmentInfo);
}

uint64_t sub_100F1FFEC(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_100F20034()
{
  uint64_t v1 = sub_10000588C(&qword_10163CF20);
  __chkstk_darwin(v1);
  Swift::UInt64 v3 = (char *)v21 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = sub_10000588C(&qword_10164E880);
  __chkstk_darwin(v4);
  uint64_t v6 = (char *)v21 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v21[0] = 0;
  v21[1] = 0xE000000000000000;
  _StringGuts.grow(_:)(64);
  v7._countAndFlagsBits = 0x456563697665443CLL;
  v7._object = (void *)0xEF40203A746E6576;
  String.append(_:)(v7);
  uint64_t v8 = type metadata accessor for DeviceEvent(0);
  type metadata accessor for Date();
  sub_100F1FFEC((unint64_t *)&qword_101638DA0, (void (*)(uint64_t))&type metadata accessor for Date);
  v9._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  String.append(_:)(v9);
  swift_bridgeObjectRelease();
  v10._countAndFlagsBits = 0x656372756F73202CLL;
  v10._object = (void *)0xEA0000000000203ALL;
  String.append(_:)(v10);
  unint64_t v11 = 0xE800000000000000;
  uint64_t v12 = 0x6E776F6E6B6E752ELL;
  switch(*(unsigned char *)(v0 + 9))
  {
    case 1:
      uint64_t v12 = 0x7463656E6E6F632ELL;
      break;
    case 2:
      unint64_t v11 = 0xEB00000000746365;
      uint64_t v12 = 0x6E6E6F637369642ELL;
      break;
    case 3:
      unint64_t v11 = 0xE700000000000000;
      unsigned int v13 = 1953784110;
      goto LABEL_6;
    case 4:
      unint64_t v11 = 0xE700000000000000;
      unsigned int v13 = 1952801838;
LABEL_6:
      uint64_t v12 = v13 | 0x68636100000000;
      break;
    case 5:
      unint64_t v11 = 0xEF79627261654E64;
      uint64_t v12 = 0x657463657465642ELL;
      break;
    case 6:
      unint64_t v11 = 0xEC00000064657261;
      uint64_t v12 = 0x657070617369642ELL;
      break;
    case 7:
      unint64_t v11 = 0xE500000000000000;
      uint64_t v12 = 0x726961702ELL;
      break;
    default:
      break;
  }
  unint64_t v14 = v11;
  String.append(_:)(*(Swift::String *)&v12);
  swift_bridgeObjectRelease();
  v15._countAndFlagsBits = 0x697461636F6C202CLL;
  v15._object = (void *)0xEC000000203A6E6FLL;
  String.append(_:)(v15);
  sub_10001D074(v0 + *(int *)(v8 + 28), (uint64_t)v6, &qword_10164E880);
  v16._countAndFlagsBits = String.init<A>(describing:)();
  String.append(_:)(v16);
  swift_bridgeObjectRelease();
  v17._object = (void *)0x800000010141ABA0;
  v17._countAndFlagsBits = 0xD000000000000012;
  String.append(_:)(v17);
  sub_10001D074(v0 + *(int *)(v8 + 32), (uint64_t)v3, &qword_10163CF20);
  v18._countAndFlagsBits = String.init<A>(describing:)();
  String.append(_:)(v18);
  swift_bridgeObjectRelease();
  v19._countAndFlagsBits = 62;
  v19._object = (void *)0xE100000000000000;
  String.append(_:)(v19);
  return v21[0];
}

unint64_t sub_100F203B0()
{
  uint64_t v1 = sub_10000588C(&qword_101638CF0);
  __chkstk_darwin(v1 - 8);
  uint64_t v42 = (uint64_t)&v42 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v3 = sub_10000588C(&qword_10163CF20);
  __chkstk_darwin(v3 - 8);
  uint64_t v5 = (char *)&v42 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v44 = type metadata accessor for DeviceEvent.AttachmentInfo(0);
  uint64_t v6 = *(void *)(v44 - 8);
  __chkstk_darwin(v44);
  uint64_t v43 = (uint64_t)&v42 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = sub_10000588C(&qword_10164E880);
  __chkstk_darwin(v8 - 8);
  Swift::String v10 = (char *)&v42 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = type metadata accessor for DeviceEvent.Location(0);
  uint64_t v12 = *(void *)(v11 - 8);
  __chkstk_darwin(v11);
  unint64_t v14 = (char *)&v42 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10000588C(&qword_101642890);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_101347BA0;
  *(void *)(inited + 32) = 29556;
  *(void *)(inited + 40) = 0xE200000000000000;
  uint64_t v16 = type metadata accessor for DeviceEvent(0);
  *(void *)(inited + 48) = Date.description.getter();
  *(void *)(inited + 56) = v17;
  *(void *)(inited + 64) = 0x656372756F73;
  *(void *)(inited + 72) = 0xE600000000000000;
  unint64_t v18 = 0xE800000000000000;
  uint64_t v19 = 0x6E776F6E6B6E752ELL;
  switch(*(unsigned char *)(v0 + 9))
  {
    case 1:
      uint64_t v19 = 0x7463656E6E6F632ELL;
      break;
    case 2:
      unint64_t v18 = 0xEB00000000746365;
      uint64_t v19 = 0x6E6E6F637369642ELL;
      break;
    case 3:
      unint64_t v18 = 0xE700000000000000;
      unsigned int v20 = 1953784110;
      goto LABEL_6;
    case 4:
      unint64_t v18 = 0xE700000000000000;
      unsigned int v20 = 1952801838;
LABEL_6:
      uint64_t v19 = v20 | 0x68636100000000;
      break;
    case 5:
      unint64_t v18 = 0xEF79627261654E64;
      uint64_t v19 = 0x657463657465642ELL;
      break;
    case 6:
      unint64_t v18 = 0xEC00000064657261;
      uint64_t v19 = 0x657070617369642ELL;
      break;
    case 7:
      unint64_t v18 = 0xE500000000000000;
      uint64_t v19 = 0x726961702ELL;
      break;
    default:
      break;
  }
  *(void *)(inited + 80) = v19;
  *(void *)(inited + 88) = v18;
  unint64_t v21 = sub_10092D8F8(inited);
  unint64_t v47 = v21;
  sub_10001D074(v0 + *(int *)(v16 + 28), (uint64_t)v10, &qword_10164E880);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v12 + 48))(v10, 1, v11) == 1)
  {
    sub_10001DAB4((uint64_t)v10, &qword_10164E880);
  }
  else
  {
    sub_100F22744((uint64_t)v10, (uint64_t)v14, type metadata accessor for DeviceEvent.Location);
    unint64_t v45 = 0;
    unint64_t v46 = 0xE000000000000000;
    Double.write<A>(to:)();
    v22._countAndFlagsBits = 44;
    v22._object = (void *)0xE100000000000000;
    String.append(_:)(v22);
    Double.write<A>(to:)();
    v23._countAndFlagsBits = 44;
    v23._object = (void *)0xE100000000000000;
    String.append(_:)(v23);
    Double.write<A>(to:)();
    uint64_t v24 = v45;
    uint64_t v25 = v46;
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    unint64_t v45 = v21;
    sub_10016C0FC(v24, v25, 6516588, 0xE300000000000000, isUniquelyReferenced_nonNull_native);
    unint64_t v21 = v45;
    unint64_t v47 = v45;
    swift_bridgeObjectRelease();
    sub_100F1CACC((uint64_t)v14, type metadata accessor for DeviceEvent.Location);
  }
  uint64_t v27 = v44;
  sub_10001D074(v0 + *(int *)(v16 + 32), (uint64_t)v5, &qword_10163CF20);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v6 + 48))(v5, 1, v27) == 1)
  {
    sub_10001DAB4((uint64_t)v5, &qword_10163CF20);
  }
  else
  {
    uint64_t v28 = v43;
    sub_100F22744((uint64_t)v5, v43, type metadata accessor for DeviceEvent.AttachmentInfo);
    uint64_t v29 = UUID.uuidString.getter();
    uint64_t v31 = v30;
    char v32 = swift_isUniquelyReferenced_nonNull_native();
    unint64_t v45 = v21;
    unint64_t v47 = 0x8000000000000000;
    sub_10016C0FC(v29, v31, 0xD000000000000010, 0x80000001013FECF0, v32);
    unint64_t v47 = v45;
    swift_bridgeObjectRelease();
    uint64_t v33 = v42;
    sub_10001D074(v28 + *(int *)(v27 + 20), v42, &qword_101638CF0);
    uint64_t v34 = type metadata accessor for UUID();
    uint64_t v35 = *(void *)(v34 - 8);
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v35 + 48))(v33, 1, v34) == 1)
    {
      sub_10001DAB4(v33, &qword_101638CF0);
      sub_100163690(0x73736553746F6F62, 0xEF444955556E6F69);
      swift_bridgeObjectRelease();
      unint64_t v21 = v47;
    }
    else
    {
      uint64_t v36 = UUID.uuidString.getter();
      uint64_t v38 = v37;
      (*(void (**)(uint64_t, uint64_t))(v35 + 8))(v33, v34);
      unint64_t v39 = v47;
      char v40 = swift_isUniquelyReferenced_nonNull_native();
      unint64_t v45 = v39;
      unint64_t v47 = 0x8000000000000000;
      sub_10016C0FC(v36, v38, 0x73736553746F6F62, 0xEF444955556E6F69, v40);
      unint64_t v21 = v45;
      swift_bridgeObjectRelease();
    }
    sub_100F1CACC(v28, type metadata accessor for DeviceEvent.AttachmentInfo);
  }
  return v21;
}

unint64_t sub_100F20AB0(char a1)
{
  unint64_t result = 0x6449746E657665;
  switch(a1)
  {
    case 1:
      unint64_t result = 0x656372756F73;
      break;
    case 2:
      unint64_t result = 0x6D617473656D6974;
      break;
    case 3:
      unint64_t result = 0x6E6F697461636F6CLL;
      break;
    case 4:
      unint64_t result = 0x656D686361747461;
      break;
    case 5:
      unint64_t result = 0xD000000000000010;
      break;
    case 6:
      unint64_t result = 0x6144657461647075;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t sub_100F20BAC(void *a1)
{
  uint64_t v3 = v1;
  uint64_t v5 = sub_10000588C(&qword_101663DE0);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v8 = (char *)v11 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10001CD44(a1, a1[3]);
  sub_100F23690();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  char v19 = 0;
  KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
  if (!v2)
  {
    char v18 = *(unsigned char *)(v3 + 9);
    char v17 = 1;
    sub_100F23738();
    KeyedEncodingContainer.encode<A>(_:forKey:)();
    type metadata accessor for DeviceEvent(0);
    char v16 = 2;
    uint64_t v9 = type metadata accessor for Date();
    sub_100F1FFEC((unint64_t *)&unk_10163ACE0, (void (*)(uint64_t))&type metadata accessor for Date);
    KeyedEncodingContainer.encode<A>(_:forKey:)();
    v11[1] = v9;
    char v15 = 3;
    type metadata accessor for DeviceEvent.Location(0);
    sub_100F1FFEC(&qword_101663DF0, (void (*)(uint64_t))type metadata accessor for DeviceEvent.Location);
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)();
    char v14 = 4;
    type metadata accessor for DeviceEvent.AttachmentInfo(0);
    sub_100F1FFEC(&qword_101663DF8, (void (*)(uint64_t))type metadata accessor for DeviceEvent.AttachmentInfo);
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)();
    char v13 = 5;
    type metadata accessor for BeaconIdentifier();
    sub_100F1FFEC(&qword_10164D2A0, (void (*)(uint64_t))type metadata accessor for BeaconIdentifier);
    KeyedEncodingContainer.encode<A>(_:forKey:)();
    char v12 = 6;
    KeyedEncodingContainer.encode<A>(_:forKey:)();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
}

Swift::Int sub_100F20F58()
{
  uint64_t v1 = type metadata accessor for UUID();
  uint64_t v20 = *(void *)(v1 - 8);
  __chkstk_darwin(v1);
  char v19 = (char *)&v19 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v3 = sub_10000588C(&qword_101638CF0);
  __chkstk_darwin(v3 - 8);
  uint64_t v5 = (char *)&v19 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = type metadata accessor for DeviceEvent.AttachmentInfo(0);
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  uint64_t v9 = (char *)&v19 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = sub_10000588C(&qword_10163CF20);
  __chkstk_darwin(v10 - 8);
  char v12 = (char *)&v19 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  Hasher.init(_seed:)();
  if (*(unsigned char *)(v0 + 8) == 1)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    Swift::UInt64 v13 = *(void *)v0;
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v13);
  }
  Hasher._combine(_:)(*(unsigned __int8 *)(v0 + 9));
  uint64_t v14 = type metadata accessor for DeviceEvent(0);
  uint64_t v15 = type metadata accessor for Date();
  sub_100F1FFEC((unint64_t *)&unk_10163ADF0, (void (*)(uint64_t))&type metadata accessor for Date);
  uint64_t v21 = v15;
  dispatch thunk of Hashable.hash(into:)();
  sub_100F227F4((uint64_t)v22, type metadata accessor for DeviceEvent.Location, &qword_10164E880, type metadata accessor for DeviceEvent.Location, type metadata accessor for DeviceEvent.Location);
  sub_10001D074(v0 + *(int *)(v14 + 32), (uint64_t)v12, &qword_10163CF20);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v7 + 48))(v12, 1, v6) == 1)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    sub_100F22744((uint64_t)v12, (uint64_t)v9, type metadata accessor for DeviceEvent.AttachmentInfo);
    Hasher._combine(_:)(1u);
    sub_100F1FFEC(&qword_10163BC60, (void (*)(uint64_t))&type metadata accessor for UUID);
    dispatch thunk of Hashable.hash(into:)();
    sub_10001D074((uint64_t)&v9[*(int *)(v6 + 20)], (uint64_t)v5, &qword_101638CF0);
    uint64_t v16 = v20;
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v20 + 48))(v5, 1, v1) == 1)
    {
      Hasher._combine(_:)(0);
    }
    else
    {
      char v17 = v19;
      (*(void (**)(char *, char *, uint64_t))(v16 + 32))(v19, v5, v1);
      Hasher._combine(_:)(1u);
      dispatch thunk of Hashable.hash(into:)();
      (*(void (**)(char *, uint64_t))(v16 + 8))(v17, v1);
    }
    sub_100F1CACC((uint64_t)v9, type metadata accessor for DeviceEvent.AttachmentInfo);
  }
  sub_100F1FFEC(&qword_10163BC60, (void (*)(uint64_t))&type metadata accessor for UUID);
  dispatch thunk of Hashable.hash(into:)();
  type metadata accessor for BeaconIdentifier();
  dispatch thunk of Hashable.hash(into:)();
  dispatch thunk of Hashable.hash(into:)();
  return Hasher._finalize()();
}

uint64_t sub_100F2144C@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v41 = a2;
  uint64_t v42 = type metadata accessor for BeaconIdentifier();
  __chkstk_darwin(v42);
  uint64_t v43 = (char *)&v36 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = sub_10000588C(&qword_10163CF20);
  __chkstk_darwin(v4 - 8);
  uint64_t v6 = (char *)&v36 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = sub_10000588C(&qword_10164E880);
  __chkstk_darwin(v7 - 8);
  uint64_t v9 = (char *)&v36 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v51 = type metadata accessor for Date();
  uint64_t v47 = *(void *)(v51 - 8);
  uint64_t v10 = __chkstk_darwin(v51);
  char v12 = (char *)&v36 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v10);
  uint64_t v14 = (char *)&v36 - v13;
  uint64_t v15 = sub_10000588C(&qword_101663DB8);
  uint64_t v44 = *(void *)(v15 - 8);
  uint64_t v45 = v15;
  __chkstk_darwin(v15);
  char v17 = (char *)&v36 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v49 = type metadata accessor for DeviceEvent(0);
  __chkstk_darwin(v49);
  char v19 = (char *)&v36 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v20 = a1[3];
  uint64_t v48 = a1;
  sub_10001CD44(a1, v20);
  sub_100F23690();
  unint64_t v46 = v17;
  uint64_t v21 = v50;
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v21) {
    return _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)v48);
  }
  uint64_t v50 = v9;
  unint64_t v39 = v12;
  char v40 = v6;
  uint64_t v22 = v44;
  char v59 = 0;
  *(void *)char v19 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
  v19[8] = v24 & 1;
  char v57 = 1;
  sub_100F236E4();
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  uint64_t v25 = v51;
  v19[9] = v58;
  char v56 = 2;
  uint64_t v26 = sub_100F1FFEC(&qword_10163ACC0, (void (*)(uint64_t))&type metadata accessor for Date);
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  uint64_t v27 = (int *)v49;
  uint64_t v28 = &v19[*(int *)(v49 + 24)];
  uint64_t v29 = v47 + 32;
  uint64_t v37 = *(void (**)(char *, char *, uint64_t))(v47 + 32);
  uint64_t v38 = v26;
  v37(v28, v14, v25);
  type metadata accessor for DeviceEvent.Location(0);
  char v55 = 3;
  sub_100F1FFEC(&qword_101663DD0, (void (*)(uint64_t))type metadata accessor for DeviceEvent.Location);
  uint64_t v30 = (uint64_t)v50;
  KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
  uint64_t v36 = v29;
  sub_10001D608(v30, (uint64_t)&v19[v27[7]], &qword_10164E880);
  type metadata accessor for DeviceEvent.AttachmentInfo(0);
  char v54 = 4;
  sub_100F1FFEC(&qword_101663DD8, (void (*)(uint64_t))type metadata accessor for DeviceEvent.AttachmentInfo);
  uint64_t v31 = (uint64_t)v40;
  KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
  sub_10001D608(v31, (uint64_t)&v19[v27[8]], &qword_10163CF20);
  char v53 = 5;
  sub_100F1FFEC(&qword_101655378, (void (*)(uint64_t))type metadata accessor for BeaconIdentifier);
  uint64_t v32 = (uint64_t)v43;
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  sub_100F22744(v32, (uint64_t)&v19[v27[9]], (uint64_t (*)(void))type metadata accessor for BeaconIdentifier);
  char v52 = 6;
  uint64_t v33 = v39;
  uint64_t v34 = v51;
  uint64_t v35 = v45;
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  (*(void (**)(char *, uint64_t))(v22 + 8))(v46, v35);
  v37(&v19[v27[10]], v33, v34);
  sub_100F237E0((uint64_t)v19, v41, type metadata accessor for DeviceEvent);
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)v48);
  return sub_100F1CACC((uint64_t)v19, type metadata accessor for DeviceEvent);
}

unint64_t sub_100F21C40()
{
  return sub_100F20AB0(*v0);
}

uint64_t sub_100F21C48@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_100F24130(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_100F21C70(uint64_t a1)
{
  unint64_t v2 = sub_100F23690();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_100F21CAC(uint64_t a1)
{
  unint64_t v2 = sub_100F23690();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_100F21CE8@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_100F2144C(a1, a2);
}

uint64_t sub_100F21D00(void *a1)
{
  return sub_100F20BAC(a1);
}

uint64_t sub_100F21D20(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = type metadata accessor for UUID();
  uint64_t v24 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v22 = (char *)&v22 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = sub_10000588C(&qword_101638CF0);
  __chkstk_darwin(v7 - 8);
  uint64_t v23 = (uint64_t)&v22 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = type metadata accessor for DeviceEvent.AttachmentInfo(0);
  uint64_t v10 = *(void *)(v9 - 8);
  __chkstk_darwin(v9);
  char v12 = (char *)&v22 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = sub_10000588C(&qword_10163CF20);
  __chkstk_darwin(v13 - 8);
  uint64_t v15 = (char *)&v22 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (*(unsigned char *)(v2 + 8) == 1)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    Swift::UInt64 v16 = *(void *)v2;
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v16);
  }
  Hasher._combine(_:)(*(unsigned __int8 *)(v2 + 9));
  uint64_t v17 = type metadata accessor for Date();
  sub_100F1FFEC((unint64_t *)&unk_10163ADF0, (void (*)(uint64_t))&type metadata accessor for Date);
  uint64_t v25 = v17;
  dispatch thunk of Hashable.hash(into:)();
  sub_100F227F4(a1, type metadata accessor for DeviceEvent.Location, &qword_10164E880, type metadata accessor for DeviceEvent.Location, type metadata accessor for DeviceEvent.Location);
  sub_10001D074(v2 + *(int *)(a2 + 32), (uint64_t)v15, &qword_10163CF20);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48))(v15, 1, v9) == 1)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    sub_100F22744((uint64_t)v15, (uint64_t)v12, type metadata accessor for DeviceEvent.AttachmentInfo);
    Hasher._combine(_:)(1u);
    sub_100F1FFEC(&qword_10163BC60, (void (*)(uint64_t))&type metadata accessor for UUID);
    dispatch thunk of Hashable.hash(into:)();
    uint64_t v18 = v23;
    sub_10001D074((uint64_t)&v12[*(int *)(v9 + 20)], v23, &qword_101638CF0);
    uint64_t v19 = v24;
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v24 + 48))(v18, 1, v5) == 1)
    {
      Hasher._combine(_:)(0);
    }
    else
    {
      uint64_t v20 = v22;
      (*(void (**)(char *, uint64_t, uint64_t))(v19 + 32))(v22, v18, v5);
      Hasher._combine(_:)(1u);
      dispatch thunk of Hashable.hash(into:)();
      (*(void (**)(char *, uint64_t))(v19 + 8))(v20, v5);
    }
    sub_100F1CACC((uint64_t)v12, type metadata accessor for DeviceEvent.AttachmentInfo);
  }
  sub_100F1FFEC(&qword_10163BC60, (void (*)(uint64_t))&type metadata accessor for UUID);
  dispatch thunk of Hashable.hash(into:)();
  type metadata accessor for BeaconIdentifier();
  dispatch thunk of Hashable.hash(into:)();
  return dispatch thunk of Hashable.hash(into:)();
}

Swift::Int sub_100F22208(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for UUID();
  uint64_t v22 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v21 = (char *)&v21 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = sub_10000588C(&qword_101638CF0);
  __chkstk_darwin(v6 - 8);
  uint64_t v8 = (char *)&v21 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = type metadata accessor for DeviceEvent.AttachmentInfo(0);
  uint64_t v10 = *(void *)(v9 - 8);
  __chkstk_darwin(v9);
  char v12 = (char *)&v21 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = sub_10000588C(&qword_10163CF20);
  __chkstk_darwin(v13 - 8);
  uint64_t v15 = (char *)&v21 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  Hasher.init(_seed:)();
  if (*(unsigned char *)(v2 + 8) == 1)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    Swift::UInt64 v16 = *(void *)v2;
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v16);
  }
  Hasher._combine(_:)(*(unsigned __int8 *)(v2 + 9));
  uint64_t v17 = type metadata accessor for Date();
  sub_100F1FFEC((unint64_t *)&unk_10163ADF0, (void (*)(uint64_t))&type metadata accessor for Date);
  uint64_t v23 = v17;
  dispatch thunk of Hashable.hash(into:)();
  sub_100F227F4((uint64_t)v24, type metadata accessor for DeviceEvent.Location, &qword_10164E880, type metadata accessor for DeviceEvent.Location, type metadata accessor for DeviceEvent.Location);
  sub_10001D074(v2 + *(int *)(a2 + 32), (uint64_t)v15, &qword_10163CF20);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48))(v15, 1, v9) == 1)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    sub_100F22744((uint64_t)v15, (uint64_t)v12, type metadata accessor for DeviceEvent.AttachmentInfo);
    Hasher._combine(_:)(1u);
    sub_100F1FFEC(&qword_10163BC60, (void (*)(uint64_t))&type metadata accessor for UUID);
    dispatch thunk of Hashable.hash(into:)();
    sub_10001D074((uint64_t)&v12[*(int *)(v9 + 20)], (uint64_t)v8, &qword_101638CF0);
    uint64_t v18 = v22;
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v22 + 48))(v8, 1, v4) == 1)
    {
      Hasher._combine(_:)(0);
    }
    else
    {
      uint64_t v19 = v21;
      (*(void (**)(char *, char *, uint64_t))(v18 + 32))(v21, v8, v4);
      Hasher._combine(_:)(1u);
      dispatch thunk of Hashable.hash(into:)();
      (*(void (**)(char *, uint64_t))(v18 + 8))(v19, v4);
    }
    sub_100F1CACC((uint64_t)v12, type metadata accessor for DeviceEvent.AttachmentInfo);
  }
  sub_100F1FFEC(&qword_10163BC60, (void (*)(uint64_t))&type metadata accessor for UUID);
  dispatch thunk of Hashable.hash(into:)();
  type metadata accessor for BeaconIdentifier();
  dispatch thunk of Hashable.hash(into:)();
  dispatch thunk of Hashable.hash(into:)();
  return Hasher._finalize()();
}

uint64_t sub_100F226FC()
{
  return sub_100F1FFEC(&qword_10165AA00, (void (*)(uint64_t))type metadata accessor for DeviceEvent);
}

uint64_t sub_100F22744(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 32))(a2, a1, v5);
  return a2;
}

void sub_100F227AC(uint64_t a1)
{
}

void sub_100F227F4(uint64_t a1, uint64_t (*a2)(void), uint64_t *a3, uint64_t (*a4)(void), uint64_t (*a5)(void))
{
  uint64_t v9 = a2(0);
  uint64_t v10 = *(void *)(v9 - 8);
  __chkstk_darwin(v9);
  char v12 = (Swift::UInt64 *)((char *)&v19 - v11);
  uint64_t v13 = sub_10000588C(a3);
  __chkstk_darwin(v13 - 8);
  uint64_t v15 = (char *)&v19 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10001D074(v5, (uint64_t)v15, a3);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48))(v15, 1, v9) == 1)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    sub_100F22744((uint64_t)v15, (uint64_t)v12, a4);
    Hasher._combine(_:)(1u);
    if ((*v12 & 0x7FFFFFFFFFFFFFFFLL) != 0) {
      Swift::UInt64 v16 = *v12;
    }
    else {
      Swift::UInt64 v16 = 0;
    }
    Hasher._combine(_:)(v16);
    if ((v12[1] & 0x7FFFFFFFFFFFFFFFLL) != 0) {
      Swift::UInt64 v17 = v12[1];
    }
    else {
      Swift::UInt64 v17 = 0;
    }
    Hasher._combine(_:)(v17);
    if ((v12[2] & 0x7FFFFFFFFFFFFFFFLL) != 0) {
      Swift::UInt64 v18 = v12[2];
    }
    else {
      Swift::UInt64 v18 = 0;
    }
    Hasher._combine(_:)(v18);
    type metadata accessor for Date();
    sub_100F1FFEC((unint64_t *)&unk_10163ADF0, (void (*)(uint64_t))&type metadata accessor for Date);
    dispatch thunk of Hashable.hash(into:)();
    sub_100F1CACC((uint64_t)v12, a5);
  }
}

uint64_t sub_100F229F4(double *a1, double *a2)
{
  if (*a1 != *a2 || a1[1] != a2[1] || a1[2] != a2[2]) {
    return 0;
  }
  type metadata accessor for DeviceEvent.Location(0);

  return static Date.== infix(_:_:)();
}

uint64_t sub_100F22A7C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for DeviceEvent.AttachmentInfo(0);
  uint64_t v57 = *(void *)(v4 - 8);
  uint64_t v58 = v4;
  __chkstk_darwin(v4);
  uint64_t v54 = (uint64_t)&v50 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = sub_10000588C(&qword_101663E00);
  __chkstk_darwin(v6);
  uint64_t v59 = (uint64_t)&v50 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = sub_10000588C(&qword_10163CF20);
  uint64_t v9 = __chkstk_darwin(v8 - 8);
  uint64_t v55 = (uint64_t)&v50 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = __chkstk_darwin(v9);
  uint64_t v60 = (uint64_t)&v50 - v12;
  __chkstk_darwin(v11);
  uint64_t v56 = (uint64_t)&v50 - v13;
  uint64_t v14 = type metadata accessor for DeviceEvent.Location(0);
  uint64_t v61 = *(void *)(v14 - 8);
  __chkstk_darwin(v14);
  Swift::UInt64 v16 = (double *)((char *)&v50 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v17 = sub_10000588C(&qword_101663E08);
  __chkstk_darwin(v17);
  uint64_t v19 = (char *)&v50 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v20 = sub_10000588C(&qword_10164E880);
  uint64_t v21 = __chkstk_darwin(v20 - 8);
  uint64_t v23 = (double *)((char *)&v50 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v24 = __chkstk_darwin(v21);
  uint64_t v26 = (char *)&v50 - v25;
  __chkstk_darwin(v24);
  uint64_t v28 = (char *)&v50 - v27;
  char v29 = *(unsigned char *)(a2 + 8);
  if (*(unsigned char *)(a1 + 8))
  {
    if (!*(unsigned char *)(a2 + 8)) {
      goto LABEL_28;
    }
  }
  else
  {
    if (*(void *)a1 != *(void *)a2) {
      char v29 = 1;
    }
    if (v29) {
      goto LABEL_28;
    }
  }
  if (*(unsigned __int8 *)(a1 + 9) != *(unsigned __int8 *)(a2 + 9)) {
    goto LABEL_28;
  }
  uint64_t v53 = v6;
  uint64_t v30 = a1;
  uint64_t v31 = type metadata accessor for DeviceEvent(0);
  if ((static Date.== infix(_:_:)() & 1) == 0) {
    goto LABEL_28;
  }
  uint64_t v32 = *(int *)(v31 + 28);
  uint64_t v50 = v30;
  sub_10001D074(v30 + v32, (uint64_t)v28, &qword_10164E880);
  uint64_t v51 = a2;
  uint64_t v52 = v31;
  sub_10001D074(a2 + *(int *)(v31 + 28), (uint64_t)v26, &qword_10164E880);
  uint64_t v33 = (uint64_t)&v19[*(int *)(v17 + 48)];
  sub_10001D074((uint64_t)v28, (uint64_t)v19, &qword_10164E880);
  sub_10001D074((uint64_t)v26, v33, &qword_10164E880);
  uint64_t v34 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v61 + 48);
  if (v34((uint64_t)v19, 1, v14) == 1)
  {
    sub_10001DAB4((uint64_t)v26, &qword_10164E880);
    sub_10001DAB4((uint64_t)v28, &qword_10164E880);
    if (v34(v33, 1, v14) == 1)
    {
      sub_10001DAB4((uint64_t)v19, &qword_10164E880);
      goto LABEL_12;
    }
    goto LABEL_17;
  }
  sub_10001D074((uint64_t)v19, (uint64_t)v23, &qword_10164E880);
  if (v34(v33, 1, v14) == 1)
  {
    sub_10001DAB4((uint64_t)v26, &qword_10164E880);
    sub_10001DAB4((uint64_t)v28, &qword_10164E880);
    sub_100F1CACC((uint64_t)v23, type metadata accessor for DeviceEvent.Location);
LABEL_17:
    uint64_t v42 = &qword_101663E08;
    uint64_t v43 = (uint64_t)v19;
LABEL_27:
    sub_10001DAB4(v43, v42);
    goto LABEL_28;
  }
  sub_100F22744(v33, (uint64_t)v16, type metadata accessor for DeviceEvent.Location);
  if (*v23 != *v16 || v23[1] != v16[1] || v23[2] != v16[2])
  {
    sub_100F1CACC((uint64_t)v16, type metadata accessor for DeviceEvent.Location);
    sub_10001DAB4((uint64_t)v26, &qword_10164E880);
    sub_10001DAB4((uint64_t)v28, &qword_10164E880);
    sub_100F1CACC((uint64_t)v23, type metadata accessor for DeviceEvent.Location);
    uint64_t v43 = (uint64_t)v19;
    uint64_t v42 = &qword_10164E880;
    goto LABEL_27;
  }
  char v44 = static Date.== infix(_:_:)();
  sub_100F1CACC((uint64_t)v16, type metadata accessor for DeviceEvent.Location);
  sub_10001DAB4((uint64_t)v26, &qword_10164E880);
  sub_10001DAB4((uint64_t)v28, &qword_10164E880);
  sub_100F1CACC((uint64_t)v23, type metadata accessor for DeviceEvent.Location);
  sub_10001DAB4((uint64_t)v19, &qword_10164E880);
  if ((v44 & 1) == 0) {
    goto LABEL_28;
  }
LABEL_12:
  uint64_t v35 = v52;
  uint64_t v36 = v56;
  sub_10001D074(v50 + *(int *)(v52 + 32), v56, &qword_10163CF20);
  uint64_t v37 = v60;
  sub_10001D074(v51 + *(int *)(v35 + 32), v60, &qword_10163CF20);
  uint64_t v38 = v59;
  uint64_t v39 = v59 + *(int *)(v53 + 48);
  sub_10001D074(v36, v59, &qword_10163CF20);
  sub_10001D074(v37, v39, &qword_10163CF20);
  uint64_t v40 = v58;
  uint64_t v41 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v57 + 48);
  if (v41(v38, 1, v58) != 1)
  {
    uint64_t v45 = v55;
    sub_10001D074(v38, v55, &qword_10163CF20);
    if (v41(v39, 1, v40) != 1)
    {
      uint64_t v48 = v54;
      sub_100F22744(v39, v54, type metadata accessor for DeviceEvent.AttachmentInfo);
      BOOL v49 = sub_100F232A0(v45, v48);
      sub_100F1CACC(v48, type metadata accessor for DeviceEvent.AttachmentInfo);
      sub_10001DAB4(v60, &qword_10163CF20);
      sub_10001DAB4(v36, &qword_10163CF20);
      sub_100F1CACC(v45, type metadata accessor for DeviceEvent.AttachmentInfo);
      sub_10001DAB4(v38, &qword_10163CF20);
      if (!v49) {
        goto LABEL_28;
      }
      goto LABEL_31;
    }
    sub_10001DAB4(v60, &qword_10163CF20);
    sub_10001DAB4(v36, &qword_10163CF20);
    sub_100F1CACC(v45, type metadata accessor for DeviceEvent.AttachmentInfo);
    goto LABEL_26;
  }
  sub_10001DAB4(v37, &qword_10163CF20);
  sub_10001DAB4(v36, &qword_10163CF20);
  if (v41(v39, 1, v40) != 1)
  {
LABEL_26:
    uint64_t v42 = &qword_101663E00;
    uint64_t v43 = v38;
    goto LABEL_27;
  }
  sub_10001DAB4(v38, &qword_10163CF20);
LABEL_31:
  if (static UUID.== infix(_:_:)())
  {
    type metadata accessor for BeaconIdentifier();
    if (static UUID.== infix(_:_:)())
    {
      char v46 = static Date.== infix(_:_:)();
      return v46 & 1;
    }
  }
LABEL_28:
  char v46 = 0;
  return v46 & 1;
}

BOOL sub_100F232A0(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for UUID();
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v7 = (char *)&v31 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = sub_10000588C((uint64_t *)&unk_10166EAF0);
  __chkstk_darwin(v8);
  uint64_t v10 = (char *)&v31 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = sub_10000588C(&qword_101638CF0);
  uint64_t v12 = __chkstk_darwin(v11 - 8);
  uint64_t v14 = (char *)&v31 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = __chkstk_darwin(v12);
  uint64_t v17 = (char *)&v31 - v16;
  __chkstk_darwin(v15);
  uint64_t v19 = (char *)&v31 - v18;
  if ((static UUID.== infix(_:_:)() & 1) == 0) {
    return 0;
  }
  uint64_t v32 = v7;
  uint64_t v20 = v5;
  uint64_t v21 = type metadata accessor for DeviceEvent.AttachmentInfo(0);
  sub_10001D074(a1 + *(int *)(v21 + 20), (uint64_t)v19, &qword_101638CF0);
  uint64_t v22 = *(int *)(v21 + 20);
  uint64_t v23 = v20;
  sub_10001D074(a2 + v22, (uint64_t)v17, &qword_101638CF0);
  uint64_t v24 = (uint64_t)&v10[*(int *)(v8 + 48)];
  sub_10001D074((uint64_t)v19, (uint64_t)v10, &qword_101638CF0);
  sub_10001D074((uint64_t)v17, v24, &qword_101638CF0);
  uint64_t v25 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v20 + 48);
  if (v25((uint64_t)v10, 1, v4) == 1)
  {
    sub_10001DAB4((uint64_t)v17, &qword_101638CF0);
    sub_10001DAB4((uint64_t)v19, &qword_101638CF0);
    if (v25(v24, 1, v4) == 1)
    {
      sub_10001DAB4((uint64_t)v10, &qword_101638CF0);
      return 1;
    }
    goto LABEL_7;
  }
  sub_10001D074((uint64_t)v10, (uint64_t)v14, &qword_101638CF0);
  if (v25(v24, 1, v4) == 1)
  {
    sub_10001DAB4((uint64_t)v17, &qword_101638CF0);
    sub_10001DAB4((uint64_t)v19, &qword_101638CF0);
    (*(void (**)(char *, uint64_t))(v20 + 8))(v14, v4);
LABEL_7:
    sub_10001DAB4((uint64_t)v10, (uint64_t *)&unk_10166EAF0);
    return 0;
  }
  uint64_t v26 = *(void (**)(char *, uint64_t, uint64_t))(v20 + 32);
  uint64_t v27 = v32;
  v26(v32, v24, v4);
  sub_100F1FFEC((unint64_t *)&qword_10163B8F0, (void (*)(uint64_t))&type metadata accessor for UUID);
  char v28 = dispatch thunk of static Equatable.== infix(_:_:)();
  char v29 = *(void (**)(char *, uint64_t))(v23 + 8);
  v29(v27, v4);
  sub_10001DAB4((uint64_t)v17, &qword_101638CF0);
  sub_10001DAB4((uint64_t)v19, &qword_101638CF0);
  v29(v14, v4);
  sub_10001DAB4((uint64_t)v10, &qword_101638CF0);
  return (v28 & 1) != 0;
}

unint64_t sub_100F23690()
{
  unint64_t result = qword_101663DC0;
  if (!qword_101663DC0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_101663DC0);
  }
  return result;
}

unint64_t sub_100F236E4()
{
  unint64_t result = qword_101663DC8;
  if (!qword_101663DC8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_101663DC8);
  }
  return result;
}

unint64_t sub_100F23738()
{
  unint64_t result = qword_101663DE8;
  if (!qword_101663DE8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_101663DE8);
  }
  return result;
}

unint64_t sub_100F2378C()
{
  unint64_t result = qword_101663E18;
  if (!qword_101663E18)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_101663E18);
  }
  return result;
}

uint64_t sub_100F237E0(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

unint64_t sub_100F23848()
{
  unint64_t result = qword_101663E30;
  if (!qword_101663E30)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_101663E30);
  }
  return result;
}

unsigned char *storeEnumTagSinglePayload for DeviceEvent.Location.CodingKeys(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 3 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 3) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFD) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFC)
  {
    unsigned int v6 = ((a2 - 253) >> 8) + 1;
    *unint64_t result = a2 + 3;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x100F23968);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 3;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for DeviceEvent.Location.CodingKeys()
{
  return &type metadata for DeviceEvent.Location.CodingKeys;
}

unsigned char *storeEnumTagSinglePayload for DeviceEvent.AttachmentInfo.CodingKeys(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFE)
  {
    unsigned int v6 = ((a2 - 255) >> 8) + 1;
    *unint64_t result = a2 + 1;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x100F23A6CLL);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 1;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for DeviceEvent.AttachmentInfo.CodingKeys()
{
  return &type metadata for DeviceEvent.AttachmentInfo.CodingKeys;
}

unsigned char *storeEnumTagSinglePayload for DeviceEvent.CodingKeys(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 6 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 6) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFA) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xF9)
  {
    unsigned int v6 = ((a2 - 250) >> 8) + 1;
    *unint64_t result = a2 + 6;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x100F23B70);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 6;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for DeviceEvent.CodingKeys()
{
  return &type metadata for DeviceEvent.CodingKeys;
}

unsigned char *storeEnumTagSinglePayload for DeviceEventSource(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 7 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 7) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xF9) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xF8)
  {
    unsigned int v6 = ((a2 - 249) >> 8) + 1;
    *unint64_t result = a2 + 7;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x100F23C74);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 7;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for DeviceEventSource()
{
  return &type metadata for DeviceEventSource;
}

unint64_t sub_100F23CB0()
{
  unint64_t result = qword_101663E40;
  if (!qword_101663E40)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_101663E40);
  }
  return result;
}

unint64_t sub_100F23D08()
{
  unint64_t result = qword_101663E48;
  if (!qword_101663E48)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_101663E48);
  }
  return result;
}

unint64_t sub_100F23D60()
{
  unint64_t result = qword_101663E50;
  if (!qword_101663E50)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_101663E50);
  }
  return result;
}

unint64_t sub_100F23DB8()
{
  unint64_t result = qword_101663E58;
  if (!qword_101663E58)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_101663E58);
  }
  return result;
}

unint64_t sub_100F23E10()
{
  unint64_t result = qword_101663E60;
  if (!qword_101663E60)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_101663E60);
  }
  return result;
}

unint64_t sub_100F23E68()
{
  unint64_t result = qword_101663E68;
  if (!qword_101663E68)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_101663E68);
  }
  return result;
}

unint64_t sub_100F23EC0()
{
  unint64_t result = qword_101663E70;
  if (!qword_101663E70)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_101663E70);
  }
  return result;
}

unint64_t sub_100F23F18()
{
  unint64_t result = qword_101663E78;
  if (!qword_101663E78)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_101663E78);
  }
  return result;
}

unint64_t sub_100F23F70()
{
  unint64_t result = qword_101663E80;
  if (!qword_101663E80)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_101663E80);
  }
  return result;
}

unint64_t sub_100F23FC8()
{
  unint64_t result = qword_101663E88;
  if (!qword_101663E88)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_101663E88);
  }
  return result;
}

uint64_t sub_100F2401C(uint64_t a1, uint64_t a2)
{
  if (a1 == 0xD000000000000010 && a2 == 0x80000001013FECF0
    || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x73736553746F6F62 && a2 == 0xEF444955556E6F69)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else
  {
    char v5 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v5) {
      return 1;
    }
    else {
      return 2;
    }
  }
}

uint64_t sub_100F24130(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 0x6449746E657665 && a2 == 0xE700000000000000;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x656372756F73 && a2 == 0xE600000000000000 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0x6D617473656D6974 && a2 == 0xE900000000000070 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else if (a1 == 0x6E6F697461636F6CLL && a2 == 0xE800000000000000 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 3;
  }
  else if (a1 == 0x656D686361747461 && a2 == 0xEE006F666E49746ELL {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 4;
  }
  else if (a1 == 0xD000000000000010 && a2 == 0x80000001013EE1B0 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 5;
  }
  else if (a1 == 0x6144657461647075 && a2 == 0xEA00000000006574)
  {
    swift_bridgeObjectRelease();
    return 6;
  }
  else
  {
    char v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v6) {
      return 6;
    }
    else {
      return 7;
    }
  }
}

unint64_t sub_100F24444()
{
  unint64_t result = qword_101663E90;
  if (!qword_101663E90)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_101663E90);
  }
  return result;
}

unint64_t sub_100F24498(char a1)
{
  unint64_t result = 0x4E6E6F6973736573;
  switch(a1)
  {
    case 1:
      unint64_t result = 0x737574617473;
      break;
    case 2:
      unint64_t result = 0x636E6F4E68747561;
      break;
    case 3:
      unint64_t result = 0x754E6C6169726573;
      break;
    case 4:
      unint64_t result = 0x6169726553746C61;
      break;
    case 5:
      unint64_t result = 0x7461747365747461;
      break;
    case 6:
      unint64_t result = 0x726F737365636361;
      break;
    case 7:
      unint64_t result = 0x7374726563;
      break;
    case 8:
      unint64_t result = 7500643;
      break;
    case 9:
      unint64_t result = 0xD000000000000011;
      break;
    case 10:
      unint64_t result = 0x69634572656E776FLL;
      break;
    case 11:
      unint64_t result = 0x69684372656E776FLL;
      break;
    case 12:
      unint64_t result = 0x7372655663657073;
      break;
    case 13:
      unint64_t result = 0x657261776D726966;
      break;
    case 14:
      unint64_t result = 0x49746375646F7270;
      break;
    case 15:
      unint64_t result = 0x6449726F646E6576;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t sub_100F246B8(void *a1)
{
  int v3 = v1;
  uint64_t v5 = sub_10000588C(&qword_101663EA8);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v8 = (char *)&v10 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10001CD44(a1, a1[3]);
  sub_100F275C4();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  long long v12 = *v3;
  char v11 = 0;
  sub_100037BB4();
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  if (!v2)
  {
    LOBYTE(v12) = 1;
    KeyedEncodingContainer.encode(_:forKey:)();
    long long v12 = *(long long *)((char *)v3 + 24);
    char v11 = 2;
    KeyedEncodingContainer.encode<A>(_:forKey:)();
    long long v12 = *(long long *)((char *)v3 + 40);
    char v11 = 3;
    KeyedEncodingContainer.encode<A>(_:forKey:)();
    long long v12 = *(long long *)((char *)v3 + 56);
    char v11 = 4;
    KeyedEncodingContainer.encode<A>(_:forKey:)();
    long long v12 = *(long long *)((char *)v3 + 72);
    char v11 = 5;
    KeyedEncodingContainer.encode<A>(_:forKey:)();
    long long v12 = *(long long *)((char *)v3 + 88);
    char v11 = 6;
    KeyedEncodingContainer.encode<A>(_:forKey:)();
    long long v12 = *(long long *)((char *)v3 + 104);
    char v11 = 7;
    KeyedEncodingContainer.encode<A>(_:forKey:)();
    long long v12 = *(long long *)((char *)v3 + 120);
    char v11 = 8;
    KeyedEncodingContainer.encode<A>(_:forKey:)();
    LOBYTE(v12) = 9;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
    LOBYTE(v12) = 10;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
    LOBYTE(v12) = 11;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
    LOBYTE(v12) = 12;
    KeyedEncodingContainer.encode(_:forKey:)();
    LOBYTE(v12) = 13;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
    LOBYTE(v12) = 14;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
    LOBYTE(v12) = 15;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
}

unint64_t sub_100F24AF0()
{
  return sub_100F24498(*v0);
}

uint64_t sub_100F24AF8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_100F27824(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_100F24B20(uint64_t a1)
{
  unint64_t v2 = sub_100F275C4();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_100F24B5C(uint64_t a1)
{
  unint64_t v2 = sub_100F275C4();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_100F24B98(void *a1)
{
  return sub_100F246B8(a1);
}

uint64_t sub_100F24C0C@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v4 = *(void *)(a1 + 64);
  uint64_t v6 = *(void *)(a1 + 80);
  unint64_t v5 = *(void *)(a1 + 88);
  unint64_t v7 = *(void *)(a1 + 104);
  uint64_t v48 = *(void *)(a1 + 96);
  uint64_t v8 = *(void *)(a1 + 112);
  unint64_t v46 = *(void *)(a1 + 72);
  unint64_t v47 = *(void *)(a1 + 120);
  uint64_t v10 = *(void *)(a1 + 48);
  unint64_t v9 = *(void *)(a1 + 56);
  unint64_t v11 = *(void *)(a1 + 152);
  uint64_t v52 = *(void *)(a1 + 160);
  uint64_t v53 = *(void *)(a1 + 144);
  unint64_t v50 = *(void *)(a1 + 168);
  uint64_t v40 = *(void *)(a1 + 32);
  uint64_t v55 = *(void *)(a1 + 40);
  uint64_t v39 = *(void *)a1;
  uint64_t v54 = *(void *)(a1 + 8);
  uint64_t v37 = *(void *)(a1 + 128);
  uint64_t v38 = *(void *)(a1 + 16);
  uint64_t v49 = *(void *)(a1 + 24);
  uint64_t v43 = *(void *)(a1 + 192);
  uint64_t v51 = *(void *)(a1 + 200);
  uint64_t v32 = *(void *)(a1 + 208);
  unint64_t v45 = *(void *)(a1 + 216);
  unint64_t v36 = *(void *)(a1 + 136);
  sub_1000361E0(v37, v36);
  sub_1000361E0(v4, v46);
  unint64_t v41 = v5;
  uint64_t v42 = v6;
  uint64_t v12 = v6;
  uint64_t v13 = v48;
  sub_1000361E0(v12, v5);
  unint64_t v44 = v7;
  sub_1000361E0(v48, v7);
  sub_1000361E0(v8, v47);
  unint64_t v33 = v9;
  uint64_t v34 = v10;
  sub_1000361E0(v10, v9);
  unint64_t v35 = v11;
  sub_1000361E0(v53, v11);
  sub_1000361E0(v52, v50);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if (v45 >> 60 == 15)
  {
    uint64_t v14 = 0;
    uint64_t v15 = 0;
    uint64_t v16 = 0;
    uint64_t v17 = 0;
  }
  else
  {
    uint64_t v18 = sub_1002AA5D4(v32, v45);
    unint64_t v20 = v19;
    uint64_t v16 = Data.hexString.getter();
    uint64_t v17 = v21;
    sub_10001CFB8(v18, v20);
    switch(v45 >> 62)
    {
      case 1uLL:
        LODWORD(v22) = HIDWORD(v32) - v32;
        if (__OFSUB__(HIDWORD(v32), v32)) {
          goto LABEL_11;
        }
        uint64_t v22 = (int)v22;
LABEL_7:
        if (v22 < -1)
        {
          __break(1u);
LABEL_11:
          __break(1u);
LABEL_12:
          __break(1u);
          JUMPOUT(0x100F24F58);
        }
LABEL_8:
        uint64_t v26 = Data.subdata(in:)();
        unint64_t v28 = v27;
        uint64_t v14 = Data.hexString.getter();
        uint64_t v15 = v29;
        sub_10001CFB8(v26, v28);
        uint64_t v13 = v48;
        break;
      case 2uLL:
        uint64_t v24 = *(void *)(v32 + 16);
        uint64_t v23 = *(void *)(v32 + 24);
        BOOL v25 = __OFSUB__(v23, v24);
        uint64_t v22 = v23 - v24;
        if (!v25) {
          goto LABEL_7;
        }
        goto LABEL_12;
      default:
        goto LABEL_8;
    }
  }
  v56[0] = *(_OWORD *)(a1 + 176);
  sub_100061E54((uint64_t)v56);
  sub_1000362FC();
  uint64_t v30 = DataProtocol.intValue.getter();
  sub_100F26E40((void *)a1);
  uint64_t result = sub_1000CE9DC((uint64_t)v56);
  *a2 = v37;
  a2[1] = v36;
  a2[2] = v30;
  a2[3] = v34;
  a2[4] = v33;
  a2[5] = v4;
  a2[6] = v46;
  a2[7] = v42;
  a2[8] = v41;
  a2[9] = v53;
  a2[10] = v35;
  a2[11] = v52;
  a2[12] = v50;
  a2[13] = v13;
  a2[14] = v44;
  a2[15] = v8;
  a2[16] = v47;
  a2[17] = v40;
  a2[18] = v55;
  a2[19] = v39;
  a2[20] = v54;
  a2[21] = v38;
  a2[22] = v49;
  a2[23] = 0x302E302E33;
  a2[24] = 0xE500000000000000;
  a2[25] = v43;
  a2[26] = v51;
  a2[27] = v16;
  a2[28] = v17;
  a2[29] = v14;
  a2[30] = v15;
  return result;
}

uint64_t sub_100F24F68(uint64_t a1, uint64_t a2)
{
  v2[134] = a2;
  v2[133] = a1;
  uint64_t v3 = type metadata accessor for HashAlgorithm();
  v2[135] = v3;
  v2[136] = *(void *)(v3 - 8);
  v2[137] = swift_task_alloc();
  uint64_t v4 = type metadata accessor for Locale();
  v2[138] = v4;
  v2[139] = *(void *)(v4 - 8);
  v2[140] = swift_task_alloc();
  uint64_t v5 = type metadata accessor for Date();
  v2[141] = v5;
  v2[142] = *(void *)(v5 - 8);
  v2[143] = swift_task_alloc();
  return _swift_task_switch(sub_100F250E4, 0, 0);
}

void sub_100F250E4()
{
  unint64_t v1 = sub_10092D8F8((uint64_t)_swiftEmptyArrayStorage);
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  sub_10016C0FC(1702195828, 0xE400000000000000, 0xD00000000000001BLL, 0x80000001013F64C0, isUniquelyReferenced_nonNull_native);
  swift_bridgeObjectRelease();
  id v3 = [self currentDevice];
  if (!v3)
  {
    __break(1u);
    goto LABEL_12;
  }
  uint64_t v4 = v3;
  id v5 = [v3 serverFriendlyDescription];

  if (!v5)
  {
LABEL_12:
    __break(1u);
    return;
  }
  uint64_t v6 = *(void *)(v0 + 1144);
  uint64_t v7 = *(void *)(v0 + 1136);
  uint64_t v8 = *(void *)(v0 + 1128);
  uint64_t v54 = *(void *)(v0 + 1120);
  uint64_t v55 = *(void *)(v0 + 1112);
  uint64_t v56 = *(void *)(v0 + 1104);
  uint64_t v9 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v11 = v10;

  char v12 = swift_isUniquelyReferenced_nonNull_native();
  sub_10016C0FC(v9, v11, 0xD000000000000011, 0x80000001013F64E0, v12);
  unint64_t v13 = v1;
  swift_bridgeObjectRelease();
  Date.init()();
  uint64_t v14 = Date.epoch.getter();
  (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v6, v8);
  *(void *)(v0 + 1040) = v14;
  uint64_t v15 = dispatch thunk of CustomStringConvertible.description.getter();
  uint64_t v17 = v16;
  char v18 = swift_isUniquelyReferenced_nonNull_native();
  sub_10016C0FC(v15, v17, 0xD000000000000015, 0x80000001013F6500, v18);
  unint64_t v19 = v13;
  swift_bridgeObjectRelease();
  *(void *)(v0 + 1032) = 1;
  uint64_t v20 = dispatch thunk of CustomStringConvertible.description.getter();
  uint64_t v22 = v21;
  char v23 = swift_isUniquelyReferenced_nonNull_native();
  sub_10016C0FC(v20, v22, 0xD000000000000013, 0x80000001013F6520, v23);
  unint64_t v24 = v19;
  uint64_t v25 = swift_bridgeObjectRelease();
  uint64_t v26 = sub_100BCABFC(v25);
  uint64_t v28 = v27;
  char v29 = swift_isUniquelyReferenced_nonNull_native();
  sub_10016C0FC(v26, v28, 0x6567412D72657355, 0xEA0000000000746ELL, v29);
  swift_bridgeObjectRelease();
  static Locale.current.getter();
  uint64_t v30 = Locale.acceptLanguageCode.getter();
  uint64_t v32 = v31;
  (*(void (**)(uint64_t, uint64_t))(v55 + 8))(v54, v56);
  char v33 = swift_isUniquelyReferenced_nonNull_native();
  sub_10016C0FC(v30, v32, 0x4C2D747065636341, 0xEF65676175676E61, v33);
  unint64_t v34 = v24;
  swift_bridgeObjectRelease();
  if (qword_101637188 != -1) {
    swift_once();
  }
  unint64_t v35 = (void *)qword_10170EE68;
  id v36 = [self sharedInstance];
  unsigned int v37 = [v36 isInternalBuild];

  if (v37)
  {
    NSString v38 = String._bridgeToObjectiveC()();
    unsigned int v39 = [v35 BOOLForKey:v38];

    if (v39)
    {
      char v40 = swift_isUniquelyReferenced_nonNull_native();
      sub_10016C0FC(0x7465722C6C616572, 0xEF302D726F727245, 0xD000000000000012, 0x80000001013F6560, v40);
      swift_bridgeObjectRelease();
    }
  }
  *(void *)(v0 + 1152) = v34;
  unint64_t v41 = *(void **)(v0 + 1064);
  sub_10098F9F4(v41);
  sub_100F24C0C((uint64_t)v41, (uint64_t *)(v0 + 16));
  type metadata accessor for JSONEncoder();
  swift_allocObject();
  JSONEncoder.init()();
  long long v42 = *(_OWORD *)(v0 + 224);
  *(_OWORD *)(v0 + 704) = *(_OWORD *)(v0 + 208);
  *(_OWORD *)(v0 + 720) = v42;
  *(_OWORD *)(v0 + 736) = *(_OWORD *)(v0 + 240);
  *(void *)(v0 + 752) = *(void *)(v0 + 256);
  long long v43 = *(_OWORD *)(v0 + 160);
  *(_OWORD *)(v0 + 640) = *(_OWORD *)(v0 + 144);
  *(_OWORD *)(v0 + 656) = v43;
  long long v44 = *(_OWORD *)(v0 + 192);
  *(_OWORD *)(v0 + 672) = *(_OWORD *)(v0 + 176);
  *(_OWORD *)(v0 + 688) = v44;
  long long v45 = *(_OWORD *)(v0 + 96);
  *(_OWORD *)(v0 + 576) = *(_OWORD *)(v0 + 80);
  *(_OWORD *)(v0 + 592) = v45;
  long long v46 = *(_OWORD *)(v0 + 128);
  *(_OWORD *)(v0 + 608) = *(_OWORD *)(v0 + 112);
  *(_OWORD *)(v0 + 624) = v46;
  long long v47 = *(_OWORD *)(v0 + 32);
  *(_OWORD *)(v0 + 512) = *(_OWORD *)(v0 + 16);
  *(_OWORD *)(v0 + 528) = v47;
  long long v48 = *(_OWORD *)(v0 + 64);
  *(_OWORD *)(v0 + 544) = *(_OWORD *)(v0 + 48);
  *(_OWORD *)(v0 + 560) = v48;
  sub_100F26B80();
  uint64_t v49 = dispatch thunk of JSONEncoder.encode<A>(_:)();
  *(void *)(v0 + 1160) = v49;
  *(void *)(v0 + 1168) = v50;
  uint64_t v51 = v49;
  unint64_t v52 = v50;
  swift_release();
  sub_1000361E0(v51, v52);
  uint64_t v57 = (void (__cdecl *)())((char *)&dword_10165AC60 + dword_10165AC60);
  uint64_t v53 = (void *)swift_task_alloc();
  *(void *)(v0 + 1176) = v53;
  *uint64_t v53 = v0;
  v53[1] = sub_100F25914;
  v57();
}

uint64_t sub_100F25914(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *v2;
  *(void *)(v3 + 1184) = a1;
  *(void *)(v3 + 1192) = a2;
  swift_task_dealloc();
  return _swift_task_switch(sub_100F25A18, 0, 0);
}

uint64_t sub_100F25A18()
{
  unint64_t v1 = v0[149];
  uint64_t v2 = v0[148];
  unint64_t v3 = v0[146];
  uint64_t v4 = v0[145];
  uint64_t v5 = v0[137];
  uint64_t v6 = v0[136];
  uint64_t v7 = v0[135];
  v0[126] = v2;
  v0[127] = v1;
  sub_1000361E0(v4, v3);
  sub_1000361E0(v2, v1);
  sub_100A42CBC(v4, v3);
  sub_10001CFB8(v4, v3);
  sub_10001CFB8(v2, v1);
  v0[150] = v0[126];
  v0[151] = v0[127];
  (*(void (**)(uint64_t, void, uint64_t))(v6 + 104))(v5, enum case for HashAlgorithm.sha256(_:), v7);
  uint64_t v8 = Data.hash(algorithm:)();
  uint64_t v10 = v9;
  v0[152] = v8;
  v0[153] = v9;
  (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v5, v7);
  uint64_t v14 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))((char *)&dword_10165AC58 + dword_10165AC58);
  uint64_t v11 = (void *)swift_task_alloc();
  v0[154] = v11;
  void *v11 = v0;
  v11[1] = sub_100F25BB4;
  uint64_t v12 = v0[134];
  return v14(v8, v10, v12);
}

uint64_t sub_100F25BB4(uint64_t a1)
{
  uint64_t v4 = *(void **)v2;
  *(void *)(*(void *)v2 + 1240) = v1;
  swift_task_dealloc();
  if (v1)
  {
    uint64_t v5 = sub_100F2639C;
  }
  else
  {
    unint64_t v6 = v4[153];
    uint64_t v7 = v4[152];
    v4[156] = a1;
    sub_10001CFB8(v7, v6);
    uint64_t v5 = sub_100F25CE4;
  }
  return _swift_task_switch(v5, 0, 0);
}

uint64_t sub_100F25CE4()
{
  uint64_t v59 = v0;
  uint64_t v1 = v0[156];
  uint64_t v2 = v0[155];
  uint64_t v3 = v0[144];
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  v58[0] = v3;
  sub_1001EE9C8(v1, (uint64_t)sub_100BD6E00, 0, isUniquelyReferenced_nonNull_native, v58);
  if (v2)
  {
    return swift_bridgeObjectRelease();
  }
  unint64_t v6 = v0[151];
  uint64_t v7 = v0[150];
  uint64_t v8 = v58[0];
  swift_bridgeObjectRelease();
  sub_10001CFB8(v7, v6);
  if (qword_101637320 == -1) {
    goto LABEL_6;
  }
  while (1)
  {
    swift_once();
LABEL_6:
    uint64_t v9 = type metadata accessor for Logger();
    sub_100010324(v9, (uint64_t)qword_10170F098);
    uint64_t v10 = Logger.logObject.getter();
    os_log_type_t v11 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v10, v11))
    {
      uint64_t v12 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v12 = 0;
      _os_log_impl((void *)&_mh_execute_header, v10, v11, "Pairing lock header:", v12, 2u);
      swift_slowDealloc();
    }
    uint64_t v53 = v0 + 2;
    uint64_t v54 = v0;
    unint64_t v52 = v0 + 33;

    uint64_t v56 = v8 + 64;
    uint64_t v13 = -1;
    uint64_t v14 = -1 << *(unsigned char *)(v8 + 32);
    if (-v14 < 64) {
      uint64_t v13 = ~(-1 << -(char)v14);
    }
    unint64_t v15 = v13 & *(void *)(v8 + 64);
    int64_t v57 = (unint64_t)(63 - v14) >> 6;
    swift_bridgeObjectRetain();
    int64_t v16 = 0;
    uint64_t v55 = v8;
    while (v15)
    {
      while (1)
      {
        unint64_t v17 = __clz(__rbit64(v15));
        v15 &= v15 - 1;
        unint64_t v18 = v17 | (v16 << 6);
LABEL_28:
        uint64_t v22 = 16 * v18;
        char v23 = (uint64_t *)(*(void *)(v8 + 48) + v22);
        uint64_t v25 = *v23;
        unint64_t v24 = v23[1];
        uint64_t v26 = (uint64_t *)(*(void *)(v8 + 56) + v22);
        uint64_t v27 = *v26;
        unint64_t v28 = v26[1];
        swift_bridgeObjectRetain_n();
        swift_bridgeObjectRetain_n();
        char v29 = Logger.logObject.getter();
        os_log_type_t v30 = static os_log_type_t.debug.getter();
        uint64_t v0 = (void *)v30;
        if (os_log_type_enabled(v29, v30)) {
          break;
        }
        swift_bridgeObjectRelease_n();
        swift_bridgeObjectRelease_n();

        if (!v15) {
          goto LABEL_14;
        }
      }
      int64_t v31 = v16;
      uint64_t v32 = swift_slowAlloc();
      v58[0] = swift_slowAlloc();
      *(_DWORD *)uint64_t v32 = 136315394;
      swift_bridgeObjectRetain();
      *(void *)(v32 + 4) = sub_1008FA0F0(v25, v24, v58);
      swift_bridgeObjectRelease_n();
      *(_WORD *)(v32 + 12) = 2080;
      swift_bridgeObjectRetain();
      *(void *)(v32 + 14) = sub_1008FA0F0(v27, v28, v58);
      swift_bridgeObjectRelease_n();
      _os_log_impl((void *)&_mh_execute_header, v29, (os_log_type_t)v0, "%s: %s", (uint8_t *)v32, 0x16u);
      swift_arrayDestroy();
      uint64_t v8 = v55;
      swift_slowDealloc();
      int64_t v16 = v31;
      swift_slowDealloc();
    }
LABEL_14:
    int64_t v19 = v16 + 1;
    if (__OFADD__(v16, 1))
    {
      __break(1u);
      goto LABEL_38;
    }
    uint64_t v0 = v54;
    if (v19 >= v57) {
      break;
    }
    unint64_t v20 = *(void *)(v56 + 8 * v19);
    ++v16;
    if (v20) {
      goto LABEL_27;
    }
    int64_t v16 = v19 + 1;
    if (v19 + 1 >= v57) {
      break;
    }
    unint64_t v20 = *(void *)(v56 + 8 * v16);
    if (v20) {
      goto LABEL_27;
    }
    int64_t v16 = v19 + 2;
    if (v19 + 2 >= v57) {
      break;
    }
    unint64_t v20 = *(void *)(v56 + 8 * v16);
    if (v20) {
      goto LABEL_27;
    }
    int64_t v21 = v19 + 3;
    if (v21 >= v57) {
      break;
    }
    unint64_t v20 = *(void *)(v56 + 8 * v21);
    if (v20)
    {
      int64_t v16 = v21;
LABEL_27:
      unint64_t v15 = (v20 - 1) & v20;
      unint64_t v18 = __clz(__rbit64(v20)) + (v16 << 6);
      goto LABEL_28;
    }
    while (1)
    {
      int64_t v16 = v21 + 1;
      if (__OFADD__(v21, 1)) {
        break;
      }
      if (v16 >= v57) {
        goto LABEL_31;
      }
      unint64_t v20 = *(void *)(v56 + 8 * v16);
      ++v21;
      if (v20) {
        goto LABEL_27;
      }
    }
LABEL_38:
    __break(1u);
  }
LABEL_31:
  swift_release();
  sub_100F26BD4(v53);
  sub_100F26BD4(v53);
  char v33 = Logger.logObject.getter();
  os_log_type_t v34 = static os_log_type_t.debug.getter();
  BOOL v35 = os_log_type_enabled(v33, v34);
  unint64_t v36 = v54[146];
  uint64_t v37 = v54[145];
  NSString v38 = (void *)v54[133];
  if (v35)
  {
    unsigned int v39 = (uint8_t *)swift_slowAlloc();
    v58[0] = swift_slowAlloc();
    *(_DWORD *)unsigned int v39 = 136315138;
    uint64_t v0 = v54;
    long long v40 = *((_OWORD *)v53 + 13);
    *((_OWORD *)v52 + 12) = *((_OWORD *)v53 + 12);
    *((_OWORD *)v52 + 13) = v40;
    *((_OWORD *)v52 + 14) = *((_OWORD *)v53 + 14);
    v52[30] = v53[30];
    long long v41 = *((_OWORD *)v53 + 9);
    *((_OWORD *)v52 + 8) = *((_OWORD *)v53 + 8);
    *((_OWORD *)v52 + 9) = v41;
    long long v42 = *((_OWORD *)v53 + 11);
    *((_OWORD *)v52 + 10) = *((_OWORD *)v53 + 10);
    *((_OWORD *)v52 + 11) = v42;
    long long v43 = *((_OWORD *)v53 + 5);
    *((_OWORD *)v52 + 4) = *((_OWORD *)v53 + 4);
    *((_OWORD *)v52 + 5) = v43;
    long long v44 = *((_OWORD *)v53 + 7);
    *((_OWORD *)v52 + 6) = *((_OWORD *)v53 + 6);
    *((_OWORD *)v52 + 7) = v44;
    long long v45 = *((_OWORD *)v53 + 1);
    *(_OWORD *)unint64_t v52 = *(_OWORD *)v53;
    *((_OWORD *)v52 + 1) = v45;
    long long v46 = *((_OWORD *)v53 + 3);
    *((_OWORD *)v52 + 2) = *((_OWORD *)v53 + 2);
    *((_OWORD *)v52 + 3) = v46;
    sub_100F26BD4(v53);
    uint64_t v47 = String.init<A>(describing:)();
    v54[131] = sub_1008FA0F0(v47, v48, v58);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    sub_100F26D0C(v53);
    sub_100F26D0C(v53);
    _os_log_impl((void *)&_mh_execute_header, v33, v34, "Pairing lock body %s", v39, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
    swift_release();
    sub_100F26E40(v38);

    sub_10001CFB8(v37, v36);
    sub_100F26D0C(v53);
  }
  else
  {
    sub_100F26D0C(v53);
    sub_10001CFB8(v37, v36);
    sub_100F26D0C(v53);
    sub_100F26D0C(v53);
    swift_release();
    sub_100F26E40(v38);
  }
  uint64_t v49 = v0[146];
  uint64_t v50 = v0[145];
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v51 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))v0[1];
  return v51(v55, v50, v49);
}

uint64_t sub_100F2639C()
{
  uint64_t v62 = v0;
  unint64_t v1 = v0[151];
  uint64_t v2 = v0[150];
  sub_10001CFB8(v0[152], v0[153]);
  sub_10001CFB8(v2, v1);
  unint64_t v3 = (unint64_t)&qword_101637000;
  if (qword_101637320 == -1) {
    goto LABEL_2;
  }
  while (1)
  {
    swift_once();
LABEL_2:
    uint64_t v4 = type metadata accessor for Logger();
    sub_100010324(v4, (uint64_t)qword_10170F098);
    swift_errorRetain();
    swift_errorRetain();
    uint64_t v5 = Logger.logObject.getter();
    os_log_type_t v6 = static os_log_type_t.error.getter();
    int64_t v57 = v0;
    if (os_log_type_enabled(v5, v6))
    {
      unint64_t v7 = v3;
      uint64_t v8 = (uint8_t *)swift_slowAlloc();
      uint64_t v9 = (void *)swift_slowAlloc();
      *(_DWORD *)uint64_t v8 = 138543362;
      swift_errorRetain();
      uint64_t v10 = _swift_stdlib_bridgeErrorToNSError();
      v57[132] = v10;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *uint64_t v9 = v10;
      swift_errorRelease();
      swift_errorRelease();
      _os_log_impl((void *)&_mh_execute_header, v5, v6, "Failed to generate attestation header: %{public}@.", v8, 0xCu);
      sub_10000588C((uint64_t *)&unk_101638EA0);
      swift_arrayDestroy();
      swift_slowDealloc();
      unint64_t v3 = v7;
      uint64_t v0 = v57;
      swift_slowDealloc();

      swift_errorRelease();
    }
    else
    {
      swift_errorRelease();
      swift_errorRelease();
      swift_errorRelease();
    }
    uint64_t v11 = v0[144];
    if (*(void *)(v3 + 800) != -1) {
      swift_once();
    }
    sub_100010324(v4, (uint64_t)qword_10170F098);
    uint64_t v12 = Logger.logObject.getter();
    os_log_type_t v13 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v12, v13))
    {
      uint64_t v14 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v14 = 0;
      _os_log_impl((void *)&_mh_execute_header, v12, v13, "Pairing lock header:", v14, 2u);
      swift_slowDealloc();
    }
    uint64_t v56 = v0 + 2;
    uint64_t v54 = v0 + 33;
    uint64_t v55 = v0 + 131;

    uint64_t v59 = v11 + 64;
    uint64_t v15 = -1;
    uint64_t v16 = -1 << *(unsigned char *)(v11 + 32);
    if (-v16 < 64) {
      uint64_t v15 = ~(-1 << -(char)v16);
    }
    unint64_t v3 = v15 & *(void *)(v11 + 64);
    int64_t v60 = (unint64_t)(63 - v16) >> 6;
    swift_bridgeObjectRetain();
    int64_t v17 = 0;
    uint64_t v58 = v11;
    while (v3)
    {
      while (1)
      {
        unint64_t v18 = __clz(__rbit64(v3));
        v3 &= v3 - 1;
        unint64_t v19 = v18 | (v17 << 6);
LABEL_29:
        uint64_t v23 = 16 * v19;
        unint64_t v24 = (uint64_t *)(*(void *)(v11 + 48) + v23);
        uint64_t v26 = *v24;
        unint64_t v25 = v24[1];
        uint64_t v27 = (uint64_t *)(*(void *)(v11 + 56) + v23);
        uint64_t v29 = *v27;
        unint64_t v28 = v27[1];
        swift_bridgeObjectRetain_n();
        swift_bridgeObjectRetain_n();
        os_log_type_t v30 = Logger.logObject.getter();
        os_log_type_t v31 = static os_log_type_t.debug.getter();
        uint64_t v0 = (void *)v31;
        if (os_log_type_enabled(v30, v31)) {
          break;
        }
        swift_bridgeObjectRelease_n();
        swift_bridgeObjectRelease_n();

        if (!v3) {
          goto LABEL_15;
        }
      }
      int64_t v32 = v17;
      uint64_t v33 = swift_slowAlloc();
      uint64_t v61 = swift_slowAlloc();
      *(_DWORD *)uint64_t v33 = 136315394;
      swift_bridgeObjectRetain();
      *(void *)(v33 + 4) = sub_1008FA0F0(v26, v25, &v61);
      swift_bridgeObjectRelease_n();
      *(_WORD *)(v33 + 12) = 2080;
      swift_bridgeObjectRetain();
      *(void *)(v33 + 14) = sub_1008FA0F0(v29, v28, &v61);
      swift_bridgeObjectRelease_n();
      _os_log_impl((void *)&_mh_execute_header, v30, (os_log_type_t)v0, "%s: %s", (uint8_t *)v33, 0x16u);
      swift_arrayDestroy();
      uint64_t v11 = v58;
      swift_slowDealloc();
      int64_t v17 = v32;
      swift_slowDealloc();
    }
LABEL_15:
    int64_t v20 = v17 + 1;
    if (__OFADD__(v17, 1))
    {
      __break(1u);
      goto LABEL_39;
    }
    unint64_t v3 = (unint64_t)v56;
    uint64_t v0 = v57;
    if (v20 >= v60) {
      break;
    }
    unint64_t v21 = *(void *)(v59 + 8 * v20);
    ++v17;
    if (v21) {
      goto LABEL_28;
    }
    int64_t v17 = v20 + 1;
    if (v20 + 1 >= v60) {
      break;
    }
    unint64_t v21 = *(void *)(v59 + 8 * v17);
    if (v21) {
      goto LABEL_28;
    }
    int64_t v17 = v20 + 2;
    if (v20 + 2 >= v60) {
      break;
    }
    unint64_t v21 = *(void *)(v59 + 8 * v17);
    if (v21) {
      goto LABEL_28;
    }
    int64_t v22 = v20 + 3;
    if (v22 >= v60) {
      break;
    }
    unint64_t v21 = *(void *)(v59 + 8 * v22);
    if (v21)
    {
      int64_t v17 = v22;
LABEL_28:
      unint64_t v3 = (v21 - 1) & v21;
      unint64_t v19 = __clz(__rbit64(v21)) + (v17 << 6);
      goto LABEL_29;
    }
    while (1)
    {
      int64_t v17 = v22 + 1;
      if (__OFADD__(v22, 1)) {
        break;
      }
      if (v17 >= v60) {
        goto LABEL_32;
      }
      unint64_t v21 = *(void *)(v59 + 8 * v17);
      ++v22;
      if (v21) {
        goto LABEL_28;
      }
    }
LABEL_39:
    __break(1u);
  }
LABEL_32:
  swift_release();
  sub_100F26BD4(v56);
  sub_100F26BD4(v56);
  os_log_type_t v34 = Logger.logObject.getter();
  os_log_type_t v35 = static os_log_type_t.debug.getter();
  BOOL v36 = os_log_type_enabled(v34, v35);
  unint64_t v37 = v57[146];
  uint64_t v38 = v57[145];
  unsigned int v39 = (void *)v57[133];
  if (v36)
  {
    long long v40 = (uint8_t *)swift_slowAlloc();
    uint64_t v61 = swift_slowAlloc();
    *(_DWORD *)long long v40 = 136315138;
    uint64_t v0 = v57;
    long long v41 = *((_OWORD *)v56 + 13);
    *((_OWORD *)v54 + 12) = *((_OWORD *)v56 + 12);
    *((_OWORD *)v54 + 13) = v41;
    *((_OWORD *)v54 + 14) = *((_OWORD *)v56 + 14);
    v54[30] = v56[30];
    long long v42 = *((_OWORD *)v56 + 9);
    *((_OWORD *)v54 + 8) = *((_OWORD *)v56 + 8);
    *((_OWORD *)v54 + 9) = v42;
    long long v43 = *((_OWORD *)v56 + 11);
    *((_OWORD *)v54 + 10) = *((_OWORD *)v56 + 10);
    *((_OWORD *)v54 + 11) = v43;
    long long v44 = *((_OWORD *)v56 + 5);
    *((_OWORD *)v54 + 4) = *((_OWORD *)v56 + 4);
    *((_OWORD *)v54 + 5) = v44;
    long long v45 = *((_OWORD *)v56 + 7);
    *((_OWORD *)v54 + 6) = *((_OWORD *)v56 + 6);
    *((_OWORD *)v54 + 7) = v45;
    long long v46 = *((_OWORD *)v56 + 1);
    *(_OWORD *)uint64_t v54 = *(_OWORD *)v56;
    *((_OWORD *)v54 + 1) = v46;
    long long v47 = *((_OWORD *)v56 + 3);
    *((_OWORD *)v54 + 2) = *((_OWORD *)v56 + 2);
    *((_OWORD *)v54 + 3) = v47;
    sub_100F26BD4(v56);
    uint64_t v48 = String.init<A>(describing:)();
    *uint64_t v55 = sub_1008FA0F0(v48, v49, &v61);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    sub_100F26D0C(v56);
    sub_100F26D0C(v56);
    _os_log_impl((void *)&_mh_execute_header, v34, v35, "Pairing lock body %s", v40, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
    swift_release();
    sub_100F26E40(v39);

    sub_10001CFB8(v38, v37);
    sub_100F26D0C(v56);
  }
  else
  {
    sub_100F26D0C(v56);
    sub_10001CFB8(v38, v37);
    sub_100F26D0C(v56);
    sub_100F26D0C(v56);
    swift_release();
    sub_100F26E40(v39);
  }
  uint64_t v50 = v0[146];
  uint64_t v51 = v0[145];
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  unint64_t v52 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))v0[1];
  return v52(v58, v51, v50);
}

unint64_t sub_100F26B80()
{
  unint64_t result = qword_101663EA0;
  if (!qword_101663EA0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_101663EA0);
  }
  return result;
}

uint64_t *sub_100F26BD4(uint64_t *a1)
{
  uint64_t v2 = a1[3];
  unint64_t v3 = a1[4];
  uint64_t v4 = a1[5];
  unint64_t v5 = a1[6];
  uint64_t v6 = a1[7];
  unint64_t v7 = a1[8];
  uint64_t v8 = a1[9];
  unint64_t v9 = a1[10];
  uint64_t v10 = a1[11];
  unint64_t v12 = a1[12];
  unint64_t v13 = a1[14];
  uint64_t v14 = a1[13];
  unint64_t v15 = a1[16];
  uint64_t v16 = a1[15];
  sub_1000361E0(*a1, a1[1]);
  sub_1000361E0(v2, v3);
  sub_1000361E0(v4, v5);
  sub_1000361E0(v6, v7);
  sub_1000361E0(v8, v9);
  sub_1000361E0(v10, v12);
  sub_1000361E0(v14, v13);
  sub_1000361E0(v16, v15);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t *sub_100F26D0C(uint64_t *a1)
{
  uint64_t v2 = a1[3];
  unint64_t v3 = a1[4];
  uint64_t v4 = a1[5];
  unint64_t v5 = a1[6];
  uint64_t v6 = a1[7];
  unint64_t v7 = a1[8];
  uint64_t v8 = a1[9];
  unint64_t v9 = a1[10];
  uint64_t v10 = a1[11];
  unint64_t v12 = a1[12];
  unint64_t v13 = a1[14];
  unint64_t v15 = a1[16];
  uint64_t v16 = a1[15];
  uint64_t v14 = a1[13];
  sub_10001CFB8(*a1, a1[1]);
  sub_10001CFB8(v2, v3);
  sub_10001CFB8(v4, v5);
  sub_10001CFB8(v6, v7);
  sub_10001CFB8(v8, v9);
  sub_10001CFB8(v10, v12);
  sub_10001CFB8(v14, v13);
  sub_10001CFB8(v16, v15);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return a1;
}

void *sub_100F26E40(void *a1)
{
  uint64_t v2 = a1[6];
  unint64_t v3 = a1[7];
  uint64_t v4 = a1[8];
  unint64_t v6 = a1[9];
  uint64_t v5 = a1[10];
  unint64_t v7 = a1[11];
  uint64_t v8 = a1[12];
  unint64_t v10 = a1[13];
  unint64_t v11 = a1[15];
  uint64_t v12 = a1[14];
  unint64_t v13 = a1[17];
  uint64_t v14 = a1[16];
  unint64_t v15 = a1[19];
  uint64_t v16 = a1[18];
  unint64_t v17 = a1[21];
  uint64_t v18 = a1[20];
  unint64_t v19 = a1[23];
  uint64_t v20 = a1[22];
  uint64_t v22 = a1[26];
  unint64_t v21 = a1[27];
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_10001CFB8(v2, v3);
  sub_10001CFB8(v4, v6);
  sub_10001CFB8(v5, v7);
  sub_10001CFB8(v8, v10);
  sub_10001CFB8(v12, v11);
  sub_10001CFB8(v14, v13);
  sub_10001CFB8(v16, v15);
  sub_10001CFB8(v18, v17);
  sub_10001CFB8(v20, v19);
  swift_bridgeObjectRelease();
  sub_100037A24(v22, v21);
  return a1;
}

uint64_t destroy for AirPodsSWPairingLockAckRequestContent(uint64_t a1)
{
  sub_10001CFB8(*(void *)a1, *(void *)(a1 + 8));
  sub_10001CFB8(*(void *)(a1 + 24), *(void *)(a1 + 32));
  sub_10001CFB8(*(void *)(a1 + 40), *(void *)(a1 + 48));
  sub_10001CFB8(*(void *)(a1 + 56), *(void *)(a1 + 64));
  sub_10001CFB8(*(void *)(a1 + 72), *(void *)(a1 + 80));
  sub_10001CFB8(*(void *)(a1 + 88), *(void *)(a1 + 96));
  sub_10001CFB8(*(void *)(a1 + 104), *(void *)(a1 + 112));
  sub_10001CFB8(*(void *)(a1 + 120), *(void *)(a1 + 128));
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return swift_bridgeObjectRelease();
}

uint64_t *initializeWithCopy for AirPodsSWPairingLockAckRequestContent(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4 = *a2;
  unint64_t v5 = a2[1];
  sub_1000361E0(*a2, v5);
  *a1 = v4;
  a1[1] = v5;
  uint64_t v6 = a2[3];
  a1[2] = a2[2];
  unint64_t v7 = a2[4];
  sub_1000361E0(v6, v7);
  a1[3] = v6;
  a1[4] = v7;
  uint64_t v8 = a2[5];
  unint64_t v9 = a2[6];
  sub_1000361E0(v8, v9);
  a1[5] = v8;
  a1[6] = v9;
  uint64_t v10 = a2[7];
  unint64_t v11 = a2[8];
  sub_1000361E0(v10, v11);
  a1[7] = v10;
  a1[8] = v11;
  uint64_t v12 = a2[9];
  unint64_t v13 = a2[10];
  sub_1000361E0(v12, v13);
  a1[9] = v12;
  a1[10] = v13;
  uint64_t v14 = a2[11];
  unint64_t v15 = a2[12];
  sub_1000361E0(v14, v15);
  a1[11] = v14;
  a1[12] = v15;
  uint64_t v16 = a2[13];
  unint64_t v17 = a2[14];
  sub_1000361E0(v16, v17);
  a1[13] = v16;
  a1[14] = v17;
  uint64_t v18 = a2[15];
  unint64_t v19 = a2[16];
  sub_1000361E0(v18, v19);
  a1[15] = v18;
  a1[16] = v19;
  uint64_t v20 = a2[18];
  a1[17] = a2[17];
  a1[18] = v20;
  uint64_t v21 = a2[20];
  a1[19] = a2[19];
  a1[20] = v21;
  uint64_t v22 = a2[22];
  a1[21] = a2[21];
  a1[22] = v22;
  uint64_t v23 = a2[24];
  a1[23] = a2[23];
  a1[24] = v23;
  uint64_t v24 = a2[26];
  a1[25] = a2[25];
  a1[26] = v24;
  uint64_t v25 = a2[28];
  a1[27] = a2[27];
  a1[28] = v25;
  uint64_t v26 = a2[29];
  uint64_t v27 = a2[30];
  a1[29] = v26;
  a1[30] = v27;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t *assignWithCopy for AirPodsSWPairingLockAckRequestContent(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4 = *a2;
  unint64_t v5 = a2[1];
  sub_1000361E0(*a2, v5);
  uint64_t v6 = *a1;
  unint64_t v7 = a1[1];
  *a1 = v4;
  a1[1] = v5;
  sub_10001CFB8(v6, v7);
  a1[2] = a2[2];
  uint64_t v8 = a2[3];
  unint64_t v9 = a2[4];
  sub_1000361E0(v8, v9);
  uint64_t v10 = a1[3];
  unint64_t v11 = a1[4];
  a1[3] = v8;
  a1[4] = v9;
  sub_10001CFB8(v10, v11);
  uint64_t v12 = a2[5];
  unint64_t v13 = a2[6];
  sub_1000361E0(v12, v13);
  uint64_t v14 = a1[5];
  unint64_t v15 = a1[6];
  a1[5] = v12;
  a1[6] = v13;
  sub_10001CFB8(v14, v15);
  uint64_t v16 = a2[7];
  unint64_t v17 = a2[8];
  sub_1000361E0(v16, v17);
  uint64_t v18 = a1[7];
  unint64_t v19 = a1[8];
  a1[7] = v16;
  a1[8] = v17;
  sub_10001CFB8(v18, v19);
  uint64_t v20 = a2[9];
  unint64_t v21 = a2[10];
  sub_1000361E0(v20, v21);
  uint64_t v22 = a1[9];
  unint64_t v23 = a1[10];
  a1[9] = v20;
  a1[10] = v21;
  sub_10001CFB8(v22, v23);
  uint64_t v24 = a2[11];
  unint64_t v25 = a2[12];
  sub_1000361E0(v24, v25);
  uint64_t v26 = a1[11];
  unint64_t v27 = a1[12];
  a1[11] = v24;
  a1[12] = v25;
  sub_10001CFB8(v26, v27);
  uint64_t v28 = a2[13];
  unint64_t v29 = a2[14];
  sub_1000361E0(v28, v29);
  uint64_t v30 = a1[13];
  unint64_t v31 = a1[14];
  a1[13] = v28;
  a1[14] = v29;
  sub_10001CFB8(v30, v31);
  uint64_t v32 = a2[15];
  unint64_t v33 = a2[16];
  sub_1000361E0(v32, v33);
  uint64_t v34 = a1[15];
  unint64_t v35 = a1[16];
  a1[15] = v32;
  a1[16] = v33;
  sub_10001CFB8(v34, v35);
  a1[17] = a2[17];
  a1[18] = a2[18];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[19] = a2[19];
  a1[20] = a2[20];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[21] = a2[21];
  a1[22] = a2[22];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[23] = a2[23];
  a1[24] = a2[24];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[25] = a2[25];
  a1[26] = a2[26];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[27] = a2[27];
  a1[28] = a2[28];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[29] = a2[29];
  a1[30] = a2[30];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

__n128 initializeWithTake for AirPodsSWPairingLockAckRequestContent(uint64_t a1, long long *a2)
{
  long long v2 = *a2;
  long long v3 = a2[1];
  long long v4 = a2[3];
  *(_OWORD *)(a1 + 32) = a2[2];
  *(_OWORD *)(a1 + 48) = v4;
  *(_OWORD *)a1 = v2;
  *(_OWORD *)(a1 + 16) = v3;
  long long v5 = a2[4];
  long long v6 = a2[5];
  long long v7 = a2[7];
  *(_OWORD *)(a1 + 96) = a2[6];
  *(_OWORD *)(a1 + 112) = v7;
  *(_OWORD *)(a1 + 64) = v5;
  *(_OWORD *)(a1 + 80) = v6;
  long long v8 = a2[8];
  long long v9 = a2[9];
  long long v10 = a2[11];
  *(_OWORD *)(a1 + 160) = a2[10];
  *(_OWORD *)(a1 + 176) = v10;
  *(_OWORD *)(a1 + 128) = v8;
  *(_OWORD *)(a1 + 144) = v9;
  __n128 result = (__n128)a2[12];
  long long v12 = a2[13];
  long long v13 = a2[14];
  *(void *)(a1 + 240) = *((void *)a2 + 30);
  *(_OWORD *)(a1 + 208) = v12;
  *(_OWORD *)(a1 + 224) = v13;
  *(__n128 *)(a1 + 192) = result;
  return result;
}

uint64_t assignWithTake for AirPodsSWPairingLockAckRequestContent(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)a1;
  unint64_t v5 = *(void *)(a1 + 8);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  sub_10001CFB8(v4, v5);
  uint64_t v6 = *(void *)(a1 + 24);
  unint64_t v7 = *(void *)(a1 + 32);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  sub_10001CFB8(v6, v7);
  uint64_t v8 = *(void *)(a1 + 40);
  unint64_t v9 = *(void *)(a1 + 48);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  sub_10001CFB8(v8, v9);
  uint64_t v10 = *(void *)(a1 + 56);
  unint64_t v11 = *(void *)(a1 + 64);
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  sub_10001CFB8(v10, v11);
  uint64_t v12 = *(void *)(a1 + 72);
  unint64_t v13 = *(void *)(a1 + 80);
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  sub_10001CFB8(v12, v13);
  uint64_t v14 = *(void *)(a1 + 88);
  unint64_t v15 = *(void *)(a1 + 96);
  *(_OWORD *)(a1 + 80) = *(_OWORD *)(a2 + 80);
  sub_10001CFB8(v14, v15);
  uint64_t v16 = *(void *)(a1 + 104);
  unint64_t v17 = *(void *)(a1 + 112);
  *(_OWORD *)(a1 + 96) = *(_OWORD *)(a2 + 96);
  sub_10001CFB8(v16, v17);
  uint64_t v18 = *(void *)(a1 + 120);
  unint64_t v19 = *(void *)(a1 + 128);
  *(_OWORD *)(a1 + 112) = *(_OWORD *)(a2 + 112);
  sub_10001CFB8(v18, v19);
  *(_OWORD *)(a1 + 128) = *(_OWORD *)(a2 + 128);
  *(void *)(a1 + 144) = *(void *)(a2 + 144);
  swift_bridgeObjectRelease();
  uint64_t v20 = *(void *)(a2 + 160);
  *(void *)(a1 + 152) = *(void *)(a2 + 152);
  *(void *)(a1 + 160) = v20;
  swift_bridgeObjectRelease();
  uint64_t v21 = *(void *)(a2 + 176);
  *(void *)(a1 + 168) = *(void *)(a2 + 168);
  *(void *)(a1 + 176) = v21;
  swift_bridgeObjectRelease();
  uint64_t v22 = *(void *)(a2 + 192);
  *(void *)(a1 + 184) = *(void *)(a2 + 184);
  *(void *)(a1 + 192) = v22;
  swift_bridgeObjectRelease();
  uint64_t v23 = *(void *)(a2 + 208);
  *(void *)(a1 + 200) = *(void *)(a2 + 200);
  *(void *)(a1 + 208) = v23;
  swift_bridgeObjectRelease();
  uint64_t v24 = *(void *)(a2 + 224);
  *(void *)(a1 + 216) = *(void *)(a2 + 216);
  *(void *)(a1 + 224) = v24;
  swift_bridgeObjectRelease();
  uint64_t v25 = *(void *)(a2 + 240);
  *(void *)(a1 + 232) = *(void *)(a2 + 232);
  *(void *)(a1 + 240) = v25;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for AirPodsSWPairingLockAckRequestContent(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 248)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 192);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for AirPodsSWPairingLockAckRequestContent(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 232) = 0u;
    *(_OWORD *)(result + 216) = 0u;
    *(_OWORD *)(result + 200) = 0u;
    *(_OWORD *)(result + 184) = 0u;
    *(_OWORD *)(result + 168) = 0u;
    *(_OWORD *)(result + 152) = 0u;
    *(_OWORD *)(result + 136) = 0u;
    *(_OWORD *)(result + 120) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)__n128 result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 248) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 192) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 248) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for AirPodsSWPairingLockAckRequestContent()
{
  return &type metadata for AirPodsSWPairingLockAckRequestContent;
}

ValueMetadata *type metadata accessor for AirPodsSWPairingLockAckRequest()
{
  return &type metadata for AirPodsSWPairingLockAckRequest;
}

unint64_t sub_100F275C4()
{
  unint64_t result = qword_101663EB0;
  if (!qword_101663EB0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_101663EB0);
  }
  return result;
}

unsigned char *storeEnumTagSinglePayload for AirPodsSWPairingLockAckRequestContent.CodingKeys(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 15 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 15) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xF1) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xF0)
  {
    unsigned int v6 = ((a2 - 241) >> 8) + 1;
    *unint64_t result = a2 + 15;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x100F276E4);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 15;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for AirPodsSWPairingLockAckRequestContent.CodingKeys()
{
  return &type metadata for AirPodsSWPairingLockAckRequestContent.CodingKeys;
}

unint64_t sub_100F27720()
{
  unint64_t result = qword_101663EB8;
  if (!qword_101663EB8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_101663EB8);
  }
  return result;
}

unint64_t sub_100F27778()
{
  unint64_t result = qword_101663EC0;
  if (!qword_101663EC0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_101663EC0);
  }
  return result;
}

unint64_t sub_100F277D0()
{
  unint64_t result = qword_101663EC8;
  if (!qword_101663EC8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_101663EC8);
  }
  return result;
}

uint64_t sub_100F27824(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 0x4E6E6F6973736573 && a2 == 0xEC00000065636E6FLL;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x737574617473 && a2 == 0xE600000000000000 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0x636E6F4E68747561 && a2 == 0xE900000000000065 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else if (a1 == 0x754E6C6169726573 && a2 == 0xEC0000007265626DLL {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 3;
  }
  else if (a1 == 0x6169726553746C61 && a2 == 0xEF7265626D754E6CLL {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 4;
  }
  else if (a1 == 0x7461747365747461 && a2 == 0xEB000000006E6F69 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 5;
  }
  else if (a1 == 0x726F737365636361 && a2 == 0xED00006E67695379 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 6;
  }
  else if (a1 == 0x7374726563 && a2 == 0xE500000000000000 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 7;
  }
  else if (a1 == 7500643 && a2 == 0xE300000000000000 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 8;
  }
  else if (a1 == 0xD000000000000011 && a2 == 0x80000001013F6580 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 9;
  }
  else if (a1 == 0x69634572656E776FLL && a2 == 0xE900000000000064 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 10;
  }
  else if (a1 == 0x69684372656E776FLL && a2 == 0xEB00000000644970 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 11;
  }
  else if (a1 == 0x7372655663657073 && a2 == 0xEB000000006E6F69 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 12;
  }
  else if (a1 == 0x657261776D726966 && a2 == 0xEF6E6F6973726556 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 13;
  }
  else if (a1 == 0x49746375646F7270 && a2 == 0xE900000000000064 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 14;
  }
  else if (a1 == 0x6449726F646E6576 && a2 == 0xE800000000000000)
  {
    swift_bridgeObjectRelease();
    return 15;
  }
  else
  {
    char v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v6) {
      return 15;
    }
    else {
      return 16;
    }
  }
}

uint64_t *sub_100F27F58(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  unsigned int v4 = a1;
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v8 = *(void *)a2;
    *unsigned int v4 = *(void *)a2;
    unsigned int v4 = (uint64_t *)(v8 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    unint64_t v7 = *(void *)(a2 + 8);
    if (v7 >> 60 == 15)
    {
      *(_OWORD *)a1 = *(_OWORD *)a2;
    }
    else
    {
      uint64_t v9 = *(void *)a2;
      sub_1000361E0(*(void *)a2, *(void *)(a2 + 8));
      *unsigned int v4 = v9;
      v4[1] = v7;
    }
    uint64_t v10 = *(int *)(a3 + 20);
    unint64_t v11 = (char *)v4 + v10;
    uint64_t v12 = (const void *)(a2 + v10);
    uint64_t v13 = type metadata accessor for UUID();
    uint64_t v14 = *(void *)(v13 - 8);
    if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v14 + 48))(v12, 1, v13))
    {
      uint64_t v15 = sub_10000588C(&qword_101638CF0);
      memcpy(v11, v12, *(void *)(*(void *)(v15 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, const void *, uint64_t))(v14 + 16))(v11, v12, v13);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v14 + 56))(v11, 0, 1, v13);
    }
  }
  return v4;
}

uint64_t sub_100F28100(uint64_t *a1, uint64_t a2)
{
  unint64_t v4 = a1[1];
  if (v4 >> 60 != 15) {
    sub_10001CFB8(*a1, v4);
  }
  int v5 = (char *)a1 + *(int *)(a2 + 20);
  uint64_t v6 = type metadata accessor for UUID();
  uint64_t v9 = *(void *)(v6 - 8);
  uint64_t result = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v9 + 48))(v5, 1, v6);
  if (!result)
  {
    uint64_t v8 = *(uint64_t (**)(char *, uint64_t))(v9 + 8);
    return v8(v5, v6);
  }
  return result;
}

uint64_t sub_100F281F4(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  unint64_t v6 = a2[1];
  if (v6 >> 60 == 15)
  {
    *(_OWORD *)a1 = *(_OWORD *)a2;
  }
  else
  {
    uint64_t v7 = *a2;
    sub_1000361E0(*a2, a2[1]);
    *(void *)a1 = v7;
    *(void *)(a1 + 8) = v6;
  }
  uint64_t v8 = *(int *)(a3 + 20);
  uint64_t v9 = (void *)(a1 + v8);
  uint64_t v10 = (char *)a2 + v8;
  uint64_t v11 = type metadata accessor for UUID();
  uint64_t v12 = *(void *)(v11 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v12 + 48))(v10, 1, v11))
  {
    uint64_t v13 = sub_10000588C(&qword_101638CF0);
    memcpy(v9, v10, *(void *)(*(void *)(v13 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, char *, uint64_t))(v12 + 16))(v9, v10, v11);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v12 + 56))(v9, 0, 1, v11);
  }
  return a1;
}

uint64_t *sub_100F2834C(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6 = *(void *)(a2 + 8);
  if ((unint64_t)a1[1] >> 60 == 15)
  {
    if (v6 >> 60 != 15)
    {
      uint64_t v7 = *(void *)a2;
      sub_1000361E0(*(void *)a2, *(void *)(a2 + 8));
      *a1 = v7;
      a1[1] = v6;
      goto LABEL_8;
    }
    goto LABEL_6;
  }
  if (v6 >> 60 == 15)
  {
    sub_1001356D0((uint64_t)a1);
LABEL_6:
    *(_OWORD *)a1 = *(_OWORD *)a2;
    goto LABEL_8;
  }
  uint64_t v8 = *(void *)a2;
  sub_1000361E0(*(void *)a2, *(void *)(a2 + 8));
  uint64_t v9 = *a1;
  unint64_t v10 = a1[1];
  *a1 = v8;
  a1[1] = v6;
  sub_10001CFB8(v9, v10);
LABEL_8:
  uint64_t v11 = *(int *)(a3 + 20);
  uint64_t v12 = (char *)a1 + v11;
  uint64_t v13 = (char *)(a2 + v11);
  uint64_t v14 = type metadata accessor for UUID();
  uint64_t v15 = *(void *)(v14 - 8);
  uint64_t v16 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v15 + 48);
  int v17 = v16(v12, 1, v14);
  int v18 = v16(v13, 1, v14);
  if (!v17)
  {
    if (!v18)
    {
      (*(void (**)(char *, char *, uint64_t))(v15 + 24))(v12, v13, v14);
      return a1;
    }
    (*(void (**)(char *, uint64_t))(v15 + 8))(v12, v14);
    goto LABEL_13;
  }
  if (v18)
  {
LABEL_13:
    uint64_t v19 = sub_10000588C(&qword_101638CF0);
    memcpy(v12, v13, *(void *)(*(void *)(v19 - 8) + 64));
    return a1;
  }
  (*(void (**)(char *, char *, uint64_t))(v15 + 16))(v12, v13, v14);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v15 + 56))(v12, 0, 1, v14);
  return a1;
}

_OWORD *sub_100F2854C(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  *a1 = *a2;
  uint64_t v4 = *(int *)(a3 + 20);
  int v5 = (char *)a1 + v4;
  unint64_t v6 = (char *)a2 + v4;
  uint64_t v7 = type metadata accessor for UUID();
  uint64_t v8 = *(void *)(v7 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v8 + 48))(v6, 1, v7))
  {
    uint64_t v9 = sub_10000588C(&qword_101638CF0);
    memcpy(v5, v6, *(void *)(*(void *)(v9 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v8 + 32))(v5, v6, v7);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v8 + 56))(v5, 0, 1, v7);
  }
  return a1;
}

uint64_t sub_100F28660(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6 = *(void *)(a1 + 8);
  if (v6 >> 60 == 15) {
    goto LABEL_4;
  }
  unint64_t v7 = *(void *)(a2 + 8);
  if (v7 >> 60 == 15)
  {
    sub_1001356D0(a1);
LABEL_4:
    *(_OWORD *)a1 = *(_OWORD *)a2;
    goto LABEL_6;
  }
  uint64_t v8 = *(void *)a1;
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v7;
  sub_10001CFB8(v8, v6);
LABEL_6:
  uint64_t v9 = *(int *)(a3 + 20);
  unint64_t v10 = (void *)(a1 + v9);
  uint64_t v11 = (void *)(a2 + v9);
  uint64_t v12 = type metadata accessor for UUID();
  uint64_t v13 = *(void *)(v12 - 8);
  uint64_t v14 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v13 + 48);
  int v15 = v14(v10, 1, v12);
  int v16 = v14(v11, 1, v12);
  if (!v15)
  {
    if (!v16)
    {
      (*(void (**)(void *, void *, uint64_t))(v13 + 40))(v10, v11, v12);
      return a1;
    }
    (*(void (**)(void *, uint64_t))(v13 + 8))(v10, v12);
    goto LABEL_11;
  }
  if (v16)
  {
LABEL_11:
    uint64_t v17 = sub_10000588C(&qword_101638CF0);
    memcpy(v10, v11, *(void *)(*(void *)(v17 - 8) + 64));
    return a1;
  }
  (*(void (**)(void *, void *, uint64_t))(v13 + 32))(v10, v11, v12);
  (*(void (**)(void *, void, uint64_t, uint64_t))(v13 + 56))(v10, 0, 1, v12);
  return a1;
}

uint64_t sub_100F28830(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_100F28844);
}

uint64_t sub_100F28844(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a2 == 11)
  {
    uint64_t v4 = *(void *)(a1 + 8) >> 60;
    BOOL v5 = ((4 * v4) & 0xC) == 0;
    unsigned int v6 = ((4 * v4) & 0xC | (v4 >> 2)) ^ 0xF;
    if (v5) {
      return 0;
    }
    else {
      return v6;
    }
  }
  else
  {
    uint64_t v10 = sub_10000588C(&qword_101638CF0);
    uint64_t v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 48);
    uint64_t v12 = v10;
    uint64_t v13 = a1 + *(int *)(a3 + 20);
    return v11(v13, a2, v12);
  }
}

uint64_t sub_100F288FC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_100F28910);
}

void *sub_100F28910(void *result, uint64_t a2, int a3, uint64_t a4)
{
  BOOL v5 = result;
  if (a3 == 11)
  {
    *uint64_t result = 0;
    result[1] = (unint64_t)((~a2 >> 2) & 3 | (4 * ~a2)) << 60;
  }
  else
  {
    uint64_t v7 = sub_10000588C(&qword_101638CF0);
    uint64_t v8 = *(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56);
    uint64_t v9 = v7;
    uint64_t v10 = (char *)v5 + *(int *)(a4 + 20);
    return (void *)v8(v10, a2, a2, v9);
  }
  return result;
}

uint64_t type metadata accessor for PencilPairingLockAckResponse()
{
  uint64_t result = qword_101663F28;
  if (!qword_101663F28) {
    return swift_getSingletonMetadata();
  }
  return result;
}

void sub_100F28A10()
{
  sub_1003426B0();
  if (v0 <= 0x3F) {
    swift_initStructMetadata();
  }
}

uint64_t sub_100F28AA8@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v17 = a2;
  uint64_t v4 = sub_10000588C(&qword_101638CF0);
  __chkstk_darwin(v4 - 8);
  unsigned int v6 = (char *)&v16 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = sub_10000588C(&qword_101663F60);
  uint64_t v18 = *(void *)(v7 - 8);
  uint64_t v19 = v7;
  __chkstk_darwin(v7);
  uint64_t v9 = (char *)&v16 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = type metadata accessor for PencilPairingLockAckResponse();
  __chkstk_darwin(v10);
  uint64_t v12 = (_OWORD *)((char *)&v16 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0));
  sub_10001CD44(a1, a1[3]);
  sub_100F28E4C();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v2) {
    return _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)a1);
  }
  uint64_t v13 = v18;
  char v21 = 0;
  sub_100037AA0();
  uint64_t v14 = v19;
  KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
  *uint64_t v12 = v20;
  type metadata accessor for UUID();
  LOBYTE(v20) = 1;
  sub_100342C5C();
  KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
  (*(void (**)(char *, uint64_t))(v13 + 8))(v9, v14);
  sub_1002729C8((uint64_t)v6, (uint64_t)v12 + *(int *)(v10 + 20));
  sub_100F28EA0((uint64_t)v12, v17);
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)a1);
  return sub_100F28F04((uint64_t)v12);
}

uint64_t sub_100F28D54()
{
  if (*v0) {
    return 0x6449616E6D66;
  }
  else {
    return 0x754E6C6169726573;
  }
}

uint64_t sub_100F28D94@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_100F2916C(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_100F28DBC(uint64_t a1)
{
  unint64_t v2 = sub_100F28E4C();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_100F28DF8(uint64_t a1)
{
  unint64_t v2 = sub_100F28E4C();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_100F28E34@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_100F28AA8(a1, a2);
}

unint64_t sub_100F28E4C()
{
  unint64_t result = qword_101663F68;
  if (!qword_101663F68)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_101663F68);
  }
  return result;
}

uint64_t sub_100F28EA0(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for PencilPairingLockAckResponse();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_100F28F04(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for PencilPairingLockAckResponse();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

unsigned char *storeEnumTagSinglePayload for PencilPairingLockAckResponse.CodingKeys(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFE)
  {
    unsigned int v6 = ((a2 - 255) >> 8) + 1;
    *unint64_t result = a2 + 1;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x100F2902CLL);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 1;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for PencilPairingLockAckResponse.CodingKeys()
{
  return &type metadata for PencilPairingLockAckResponse.CodingKeys;
}

unint64_t sub_100F29068()
{
  unint64_t result = qword_101663F70;
  if (!qword_101663F70)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_101663F70);
  }
  return result;
}

unint64_t sub_100F290C0()
{
  unint64_t result = qword_101663F78;
  if (!qword_101663F78)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_101663F78);
  }
  return result;
}

unint64_t sub_100F29118()
{
  unint64_t result = qword_101663F80;
  if (!qword_101663F80)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_101663F80);
  }
  return result;
}

uint64_t sub_100F2916C(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 0x754E6C6169726573 && a2 == 0xEC0000007265626DLL;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x6449616E6D66 && a2 == 0xE600000000000000)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else
  {
    char v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v6) {
      return 1;
    }
    else {
      return 2;
    }
  }
}

uint64_t sub_100F29270()
{
  uint64_t v1 = OBJC_IVAR____TtC12searchpartyd18FMRemoteUILauncher_alertHandle;
  BOOL v2 = *(void **)(v0 + OBJC_IVAR____TtC12searchpartyd18FMRemoteUILauncher_alertHandle);
  if (v2) {
    [v2 unregisterObserver:*(void *)(v0 + OBJC_IVAR____TtC12searchpartyd18FMRemoteUILauncher_alertHandleDelegateTrampoline)];
  }
  sub_100F2BA50(v0 + OBJC_IVAR____TtC12searchpartyd18FMRemoteUILauncher_alertType, type metadata accessor for FMRemoteUILauncher.AlertType);

  uint64_t v3 = v0 + OBJC_IVAR____TtC12searchpartyd18FMRemoteUILauncher_logger;
  uint64_t v4 = type metadata accessor for Logger();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8))(v3, v4);
  swift_defaultActor_destroy();

  return _swift_defaultActor_deallocate(v0);
}

uint64_t sub_100F29354()
{
  return type metadata accessor for FMRemoteUILauncher(0);
}

uint64_t type metadata accessor for FMRemoteUILauncher(uint64_t a1)
{
  return sub_1000F4EA4(a1, qword_101663FE8);
}

uint64_t sub_100F2937C()
{
  uint64_t result = type metadata accessor for LostModeAlertInfo();
  if (v1 <= 0x3F)
  {
    uint64_t result = type metadata accessor for Logger();
    if (v2 <= 0x3F)
    {
      uint64_t result = swift_updateClassMetadata2();
      if (!result) {
        return 0;
      }
    }
  }
  return result;
}

void sub_100F2946C()
{
  uint64_t v1 = type metadata accessor for Logger();
  __chkstk_darwin(v1);
  sub_100F29880();
  id v14 = [objc_allocWithZone((Class)SBSRemoteAlertConfigurationContext) init];
  Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  [v14 setUserInfo:isa];

  id v3 = objc_allocWithZone((Class)SBSRemoteAlertDefinition);
  NSString v4 = String._bridgeToObjectiveC()();
  NSString v5 = String._bridgeToObjectiveC()();
  id v6 = [v3 initWithServiceName:v4 viewControllerClassName:v5];

  id v7 = [self newHandleWithDefinition:v6 configurationContext:v14];
  uint64_t v8 = OBJC_IVAR____TtC12searchpartyd18FMRemoteUILauncher_alertHandle;
  uint64_t v9 = *(void **)(v0 + OBJC_IVAR____TtC12searchpartyd18FMRemoteUILauncher_alertHandle);
  *(void *)(v0 + OBJC_IVAR____TtC12searchpartyd18FMRemoteUILauncher_alertHandle) = v7;

  uint64_t v10 = *(void **)(v0 + v8);
  if (v10) {
    [v10 registerObserver:*(void *)(v0 + OBJC_IVAR____TtC12searchpartyd18FMRemoteUILauncher_alertHandleDelegateTrampoline)];
  }
  id v11 = [objc_allocWithZone((Class)SBSRemoteAlertActivationContext) init];
  uint64_t v12 = *(void **)(v0 + v8);
  if (v12)
  {
    id v13 = v12;
    id v11 = v11;
    [v13 activateWithContext:v11];
  }
  else
  {
  }
}

unint64_t sub_100F29880()
{
  uint64_t v1 = type metadata accessor for LostModeAlertInfo();
  __chkstk_darwin(v1 - 8);
  id v3 = (char *)v23 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = type metadata accessor for FMRemoteUILauncher.AlertType(0);
  __chkstk_darwin(v4 - 8);
  id v6 = (char *)v23 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  unint64_t v7 = sub_100930DC8((uint64_t)_swiftEmptyArrayStorage);
  sub_100F2B934(v0 + OBJC_IVAR____TtC12searchpartyd18FMRemoteUILauncher_alertType, (uint64_t)v6);
  sub_100F2B998((uint64_t)v6, (uint64_t)v3);
  *(void *)&long long v24 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  *((void *)&v24 + 1) = v8;
  AnyHashable.init<A>(_:)();
  uint64_t v9 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  *((void *)&v25 + 1) = &type metadata for String;
  *(void *)&long long v24 = v9;
  *((void *)&v24 + 1) = v10;
  sub_100173E4C(&v24, v23);
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  unint64_t v27 = v7;
  sub_10016BFB0(v23, (uint64_t)v26, isUniquelyReferenced_nonNull_native);
  unint64_t v12 = v27;
  swift_bridgeObjectRelease();
  sub_1004268DC((uint64_t)v26);
  *(void *)&long long v24 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  *((void *)&v24 + 1) = v13;
  AnyHashable.init<A>(_:)();
  unint64_t v14 = sub_100DC11B8();
  *((void *)&v25 + 1) = sub_10000588C((uint64_t *)&unk_101664240);
  *(void *)&long long v24 = v14;
  sub_100173E4C(&v24, v23);
  char v15 = swift_isUniquelyReferenced_nonNull_native();
  unint64_t v27 = v12;
  sub_10016BFB0(v23, (uint64_t)v26, v15);
  unint64_t v16 = v27;
  swift_bridgeObjectRelease();
  sub_1004268DC((uint64_t)v26);
  sub_100F2BA50((uint64_t)v3, (uint64_t (*)(void))type metadata accessor for LostModeAlertInfo);
  *(void *)&v23[0] = static String._unconditionallyBridgeFromObjectiveC(_:)();
  *((void *)&v23[0] + 1) = v17;
  AnyHashable.init<A>(_:)();
  if (*(void *)(v16 + 16) && (unint64_t v18 = sub_1007241B8((uint64_t)v26), (v19 & 1) != 0))
  {
    sub_10012F428(*(void *)(v16 + 56) + 32 * v18, (uint64_t)&v24);
  }
  else
  {
    long long v24 = 0u;
    long long v25 = 0u;
  }
  sub_1004268DC((uint64_t)v26);
  if (!*((void *)&v25 + 1))
  {
    sub_100498978((uint64_t)&v24);
LABEL_12:
    sub_100F2B9FC();
    swift_allocError();
    swift_willThrow();
    swift_bridgeObjectRelease();
    return v16;
  }
  if ((swift_dynamicCast() & 1) == 0) {
    goto LABEL_12;
  }
  long long v20 = v23[0];
  swift_bridgeObjectRelease();
  uint64_t v21 = HIBYTE(*((void *)&v20 + 1)) & 0xFLL;
  if ((*((void *)&v20 + 1) & 0x2000000000000000) == 0) {
    uint64_t v21 = v20 & 0xFFFFFFFFFFFFLL;
  }
  if (!v21) {
    goto LABEL_12;
  }
  return v16;
}

uint64_t sub_100F29B9C()
{
  uint64_t v0 = type metadata accessor for Logger();
  sub_10001E384(v0, qword_101663F90);
  uint64_t v1 = sub_100010324(v0, (uint64_t)qword_101663F90);
  if (qword_1016371D0 != -1) {
    swift_once();
  }
  uint64_t v2 = sub_100010324(v0, (uint64_t)qword_10170EED8);
  id v3 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v0 - 8) + 16);

  return v3(v1, v2, v0);
}

uint64_t sub_100F29C64(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  *(void *)(v4 + 16) = a1;
  *(void *)(v4 + 24) = a4;
  return _swift_task_switch(sub_100F29C84, 0, 0);
}

uint64_t sub_100F29C84()
{
  uint64_t Strong = swift_unknownObjectWeakLoadStrong();
  *(void *)(v0 + 32) = Strong;
  if (Strong)
  {
    return _swift_task_switch(sub_100F29D3C, Strong, 0);
  }
  else
  {
    **(unsigned char **)(v0 + 16) = 1;
    uint64_t v2 = *(uint64_t (**)(void))(v0 + 8);
    return v2();
  }
}

uint64_t sub_100F29D3C()
{
  if (qword_101637380 != -1) {
    swift_once();
  }
  uint64_t v1 = type metadata accessor for Logger();
  sub_100010324(v1, (uint64_t)qword_101667438);
  uint64_t v2 = Logger.logObject.getter();
  os_log_type_t v3 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v2, v3))
  {
    uint64_t v4 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v4 = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, v3, "Remote UI did activate, setting isCurrentlyPresentingAlert to true", v4, 2u);
    swift_slowDealloc();
  }
  uint64_t v5 = *(void *)(v0 + 32);

  *(unsigned char *)(v5 + 144) = 1;
  swift_unknownObjectRelease();
  return _swift_task_switch(sub_100F2BBDC, 0, 0);
}

uint64_t sub_100F29EF8(void *a1, const char *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8 = v4;
  uint64_t v10 = sub_10000588C(&qword_10164DBB0);
  __chkstk_darwin(v10 - 8);
  unint64_t v12 = (char *)&v24 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_1016371C8 != -1) {
    swift_once();
  }
  uint64_t v13 = type metadata accessor for Logger();
  sub_100010324(v13, (uint64_t)qword_101663F90);
  id v14 = a1;
  char v15 = Logger.logObject.getter();
  os_log_type_t v16 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v15, v16))
  {
    uint64_t v28 = a4;
    uint64_t v17 = swift_slowAlloc();
    uint64_t v27 = a3;
    unint64_t v18 = (uint8_t *)v17;
    long long v25 = (void *)swift_slowAlloc();
    *(_DWORD *)unint64_t v18 = 138412290;
    id v29 = v14;
    uint64_t v26 = a2;
    id v19 = v14;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    void *v25 = v14;

    a4 = v28;
    _os_log_impl((void *)&_mh_execute_header, v15, v16, v26, v18, 0xCu);
    sub_10000588C((uint64_t *)&unk_101638EA0);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
  }
  uint64_t v20 = type metadata accessor for TaskPriority();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v20 - 8) + 56))(v12, 1, 1, v20);
  uint64_t v21 = (void *)swift_allocObject();
  void v21[2] = 0;
  v21[3] = 0;
  void v21[4] = v8;
  id v22 = v8;
  sub_1008F5FF0((uint64_t)v12, a4, (uint64_t)v21);
  return swift_release();
}

uint64_t sub_100F2A180(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  *(void *)(v4 + 16) = a1;
  *(void *)(v4 + 24) = a4;
  return _swift_task_switch(sub_100F2A1A0, 0, 0);
}

uint64_t sub_100F2A1A0()
{
  uint64_t Strong = swift_unknownObjectWeakLoadStrong();
  *(void *)(v0 + 32) = Strong;
  if (Strong)
  {
    return _swift_task_switch(sub_100F2A258, Strong, 0);
  }
  else
  {
    **(unsigned char **)(v0 + 16) = 1;
    uint64_t v2 = *(uint64_t (**)(void))(v0 + 8);
    return v2();
  }
}

uint64_t sub_100F2A258()
{
  if (qword_101637380 != -1) {
    swift_once();
  }
  uint64_t v1 = type metadata accessor for Logger();
  sub_100010324(v1, (uint64_t)qword_101667438);
  uint64_t v2 = Logger.logObject.getter();
  os_log_type_t v3 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v2, v3))
  {
    uint64_t v4 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v4 = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, v3, "Remote UI did activate, setting isCurrentlyPresentingAlert to false", v4, 2u);
    swift_slowDealloc();
  }
  uint64_t v5 = *(void *)(v0 + 32);

  *(unsigned char *)(v5 + 144) = 0;
  swift_unknownObjectRelease();
  return _swift_task_switch(sub_100F2BBDC, 0, 0);
}

uint64_t sub_100F2A410(void *a1, uint64_t a2)
{
  os_log_type_t v3 = v2;
  uint64_t v6 = sub_10000588C(&qword_10164DBB0);
  __chkstk_darwin(v6 - 8);
  uint64_t v8 = (char *)&v22 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_1016371C8 != -1) {
    swift_once();
  }
  uint64_t v9 = type metadata accessor for Logger();
  sub_100010324(v9, (uint64_t)qword_101663F90);
  id v10 = a1;
  swift_errorRetain();
  id v11 = v10;
  swift_errorRetain();
  unint64_t v12 = Logger.logObject.getter();
  os_log_type_t v13 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v12, v13))
  {
    id v22 = v8;
    uint64_t v23 = v3;
    uint64_t v14 = swift_slowAlloc();
    char v15 = (void *)swift_slowAlloc();
    *(_DWORD *)uint64_t v14 = 138412546;
    uint64_t v24 = (uint64_t)v11;
    id v16 = v11;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    void *v15 = v11;

    *(_WORD *)(v14 + 12) = 2112;
    if (a2)
    {
      swift_errorRetain();
      uint64_t v17 = _swift_stdlib_bridgeErrorToNSError();
      uint64_t v24 = v17;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
    }
    else
    {
      uint64_t v24 = 0;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      uint64_t v17 = 0;
    }
    os_log_type_t v3 = v23;
    v15[1] = v17;
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl((void *)&_mh_execute_header, v12, v13, "Did invalidate handle %@ with error %@", (uint8_t *)v14, 0x16u);
    sub_10000588C((uint64_t *)&unk_101638EA0);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    uint64_t v8 = v22;
  }
  else
  {

    swift_errorRelease();
    swift_errorRelease();
  }
  uint64_t v18 = type metadata accessor for TaskPriority();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v18 - 8) + 56))(v8, 1, 1, v18);
  id v19 = (void *)swift_allocObject();
  void v19[2] = 0;
  v19[3] = 0;
  v19[4] = v3;
  id v20 = v3;
  sub_1008F5FF0((uint64_t)v8, (uint64_t)&unk_101664210, (uint64_t)v19);
  return swift_release();
}

uint64_t sub_100F2A750(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  *(void *)(v4 + 16) = a1;
  *(void *)(v4 + 24) = a4;
  return _swift_task_switch(sub_100F2A770, 0, 0);
}

uint64_t sub_100F2A770()
{
  uint64_t Strong = swift_unknownObjectWeakLoadStrong();
  *(void *)(v0 + 32) = Strong;
  if (Strong)
  {
    return _swift_task_switch(sub_100F2A828, Strong, 0);
  }
  else
  {
    **(unsigned char **)(v0 + 16) = 1;
    uint64_t v2 = *(uint64_t (**)(void))(v0 + 8);
    return v2();
  }
}

uint64_t sub_100F2A828()
{
  if (qword_101637380 != -1) {
    swift_once();
  }
  uint64_t v1 = type metadata accessor for Logger();
  sub_100010324(v1, (uint64_t)qword_101667438);
  uint64_t v2 = Logger.logObject.getter();
  os_log_type_t v3 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v2, v3))
  {
    uint64_t v4 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v4 = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, v3, "Remote UI did activate, setting isCurrentlyPresentingAlert to false", v4, 2u);
    swift_slowDealloc();
  }
  uint64_t v5 = *(void *)(v0 + 32);

  *(unsigned char *)(v5 + 144) = 0;
  swift_unknownObjectRelease();
  return _swift_task_switch(sub_100F2A954, 0, 0);
}

uint64_t sub_100F2A954()
{
  **(unsigned char **)(v0 + 16) = *(void *)(v0 + 32) == 0;
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t type metadata accessor for RemoteHandleObserverDelegateTrampoline()
{
  return self;
}

uint64_t *sub_100F2AA54(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v9 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v9 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v6 = type metadata accessor for URL();
    uint64_t v7 = *(void *)(v6 - 8);
    if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v7 + 48))(a2, 1, v6))
    {
      uint64_t v8 = sub_10000588C(&qword_101649E40);
      memcpy(a1, a2, *(void *)(*(void *)(v8 - 8) + 64));
    }
    else
    {
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v7 + 16))(a1, a2, v6);
      (*(void (**)(uint64_t *, void, uint64_t, uint64_t))(v7 + 56))(a1, 0, 1, v6);
    }
    id v10 = (int *)type metadata accessor for LostModeAlertInfo();
    uint64_t v11 = v10[5];
    unint64_t v12 = (uint64_t *)((char *)a1 + v11);
    os_log_type_t v13 = (uint64_t *)((char *)a2 + v11);
    uint64_t v15 = *v13;
    uint64_t v14 = v13[1];
    *unint64_t v12 = v15;
    v12[1] = v14;
    uint64_t v16 = v10[6];
    uint64_t v17 = (uint64_t *)((char *)a1 + v16);
    uint64_t v18 = (uint64_t *)((char *)a2 + v16);
    uint64_t v19 = v18[1];
    void *v17 = *v18;
    v17[1] = v19;
    *((unsigned char *)a1 + v10[7]) = *((unsigned char *)a2 + v10[7]);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  return a1;
}

uint64_t sub_100F2ABFC(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for URL();
  uint64_t v3 = *(void *)(v2 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v3 + 48))(a1, 1, v2)) {
    (*(void (**)(uint64_t, uint64_t))(v3 + 8))(a1, v2);
  }
  type metadata accessor for LostModeAlertInfo();
  swift_bridgeObjectRelease();

  return swift_bridgeObjectRelease();
}

char *sub_100F2ACE4(char *a1, char *a2)
{
  uint64_t v4 = type metadata accessor for URL();
  uint64_t v5 = *(void *)(v4 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v5 + 48))(a2, 1, v4))
  {
    uint64_t v6 = sub_10000588C(&qword_101649E40);
    memcpy(a1, a2, *(void *)(*(void *)(v6 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v5 + 16))(a1, a2, v4);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v5 + 56))(a1, 0, 1, v4);
  }
  uint64_t v7 = (int *)type metadata accessor for LostModeAlertInfo();
  uint64_t v8 = v7[5];
  uint64_t v9 = &a1[v8];
  id v10 = &a2[v8];
  uint64_t v12 = *(void *)v10;
  uint64_t v11 = *((void *)v10 + 1);
  *(void *)uint64_t v9 = v12;
  *((void *)v9 + 1) = v11;
  uint64_t v13 = v7[6];
  uint64_t v14 = &a1[v13];
  uint64_t v15 = &a2[v13];
  uint64_t v16 = *((void *)v15 + 1);
  *(void *)uint64_t v14 = *(void *)v15;
  *((void *)v14 + 1) = v16;
  a1[v7[7]] = a2[v7[7]];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

char *sub_100F2AE40(char *a1, char *a2)
{
  uint64_t v4 = type metadata accessor for URL();
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v5 + 48);
  int v7 = v6(a1, 1, v4);
  int v8 = v6(a2, 1, v4);
  if (!v7)
  {
    if (!v8)
    {
      (*(void (**)(char *, char *, uint64_t))(v5 + 24))(a1, a2, v4);
      goto LABEL_7;
    }
    (*(void (**)(char *, uint64_t))(v5 + 8))(a1, v4);
    goto LABEL_6;
  }
  if (v8)
  {
LABEL_6:
    uint64_t v9 = sub_10000588C(&qword_101649E40);
    memcpy(a1, a2, *(void *)(*(void *)(v9 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(v5 + 16))(a1, a2, v4);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v5 + 56))(a1, 0, 1, v4);
LABEL_7:
  id v10 = (int *)type metadata accessor for LostModeAlertInfo();
  uint64_t v11 = v10[5];
  uint64_t v12 = &a1[v11];
  uint64_t v13 = &a2[v11];
  *(void *)uint64_t v12 = *(void *)v13;
  *((void *)v12 + 1) = *((void *)v13 + 1);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v14 = v10[6];
  uint64_t v15 = &a1[v14];
  uint64_t v16 = &a2[v14];
  *(void *)uint64_t v15 = *(void *)v16;
  *((void *)v15 + 1) = *((void *)v16 + 1);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[v10[7]] = a2[v10[7]];
  return a1;
}

char *sub_100F2B02C(char *a1, char *a2)
{
  uint64_t v4 = type metadata accessor for URL();
  uint64_t v5 = *(void *)(v4 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v5 + 48))(a2, 1, v4))
  {
    uint64_t v6 = sub_10000588C(&qword_101649E40);
    memcpy(a1, a2, *(void *)(*(void *)(v6 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v5 + 32))(a1, a2, v4);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v5 + 56))(a1, 0, 1, v4);
  }
  int v7 = (int *)type metadata accessor for LostModeAlertInfo();
  *(_OWORD *)&a1[v7[5]] = *(_OWORD *)&a2[v7[5]];
  *(_OWORD *)&a1[v7[6]] = *(_OWORD *)&a2[v7[6]];
  a1[v7[7]] = a2[v7[7]];
  return a1;
}

char *sub_100F2B168(char *a1, char *a2)
{
  uint64_t v4 = type metadata accessor for URL();
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v5 + 48);
  int v7 = v6(a1, 1, v4);
  int v8 = v6(a2, 1, v4);
  if (!v7)
  {
    if (!v8)
    {
      (*(void (**)(char *, char *, uint64_t))(v5 + 40))(a1, a2, v4);
      goto LABEL_7;
    }
    (*(void (**)(char *, uint64_t))(v5 + 8))(a1, v4);
    goto LABEL_6;
  }
  if (v8)
  {
LABEL_6:
    uint64_t v9 = sub_10000588C(&qword_101649E40);
    memcpy(a1, a2, *(void *)(*(void *)(v9 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(v5 + 32))(a1, a2, v4);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v5 + 56))(a1, 0, 1, v4);
LABEL_7:
  id v10 = (int *)type metadata accessor for LostModeAlertInfo();
  uint64_t v11 = v10[5];
  uint64_t v12 = &a1[v11];
  uint64_t v13 = &a2[v11];
  uint64_t v15 = *(void *)v13;
  uint64_t v14 = *((void *)v13 + 1);
  *(void *)uint64_t v12 = v15;
  *((void *)v12 + 1) = v14;
  swift_bridgeObjectRelease();
  uint64_t v16 = v10[6];
  uint64_t v17 = &a1[v16];
  uint64_t v18 = &a2[v16];
  uint64_t v20 = *(void *)v18;
  uint64_t v19 = *((void *)v18 + 1);
  *(void *)uint64_t v17 = v20;
  *((void *)v17 + 1) = v19;
  swift_bridgeObjectRelease();
  a1[v10[7]] = a2[v10[7]];
  return a1;
}

uint64_t sub_100F2B334(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for LostModeAlertInfo();

  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, v4, sub_100F2B38C);
}

uint64_t sub_100F2B38C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = sub_10000588C(&qword_101649E40);
  uint64_t v7 = *(void *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == a2)
  {
    int v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    return v8(a1, a2, v6);
  }
  else
  {
    unint64_t v10 = *(void *)(a1 + *(int *)(a3 + 20) + 8);
    if (v10 >= 0xFFFFFFFF) {
      LODWORD(v10) = -1;
    }
    int v11 = v10 - 1;
    if (v11 < 0) {
      int v11 = -1;
    }
    return (v11 + 1);
  }
}

uint64_t sub_100F2B460(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for LostModeAlertInfo();

  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, v6, sub_100F2B4C8);
}

uint64_t sub_100F2B4C8(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result = sub_10000588C(&qword_101649E40);
  uint64_t v9 = *(void *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    unint64_t v10 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    return v10(a1, a2, a2, result);
  }
  else
  {
    *(void *)(a1 + *(int *)(a4 + 20) + 8) = a2;
  }
  return result;
}

uint64_t type metadata accessor for FMRemoteUILauncher.AlertType(uint64_t a1)
{
  return sub_1000F4EA4(a1, qword_1016641F0);
}

uint64_t sub_100F2B5AC(uint64_t a1)
{
  uint64_t result = type metadata accessor for LostModeAlertInfo();
  if (v3 <= 0x3F)
  {
    uint64_t v4 = *(void *)(result - 8);
    swift_initEnumMetadataSingleCase();
    uint64_t result = 0;
    *(_DWORD *)(*(void *)(a1 - 8) + 84) = *(_DWORD *)(v4 + 84);
  }
  return result;
}

uint64_t sub_100F2B650()
{
  uint64_t v0 = type metadata accessor for Logger();
  sub_10001E384(v0, qword_10170EED8);
  sub_100010324(v0, (uint64_t)qword_10170EED8);
  return Logger.init(subsystem:category:)();
}

uint64_t sub_100F2B6DC(uint64_t a1)
{
  uint64_t v4 = *(void *)(v1 + 32);
  uint64_t v5 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v5;
  *uint64_t v5 = v2;
  uint64_t v5[2] = a1;
  v5[3] = v4;
  v5[1] = sub_10001D2E4;
  return _swift_task_switch(sub_100F2A770, 0, 0);
}

uint64_t sub_100F2B790(uint64_t a1)
{
  uint64_t v4 = *(void *)(v1 + 32);
  uint64_t v5 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v5;
  *uint64_t v5 = v2;
  uint64_t v5[2] = a1;
  v5[3] = v4;
  v5[1] = sub_100033F68;
  return _swift_task_switch(sub_100F2A1A0, 0, 0);
}

uint64_t sub_100F2B844()
{
  swift_unknownObjectRelease();

  return _swift_deallocObject(v0, 40, 7);
}

uint64_t sub_100F2B884(uint64_t a1)
{
  uint64_t v4 = *(void *)(v1 + 32);
  uint64_t v5 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v5;
  *uint64_t v5 = v2;
  uint64_t v5[2] = a1;
  v5[3] = v4;
  v5[1] = sub_100033F68;
  return _swift_task_switch(sub_100F29C84, 0, 0);
}

uint64_t sub_100F2B934(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for FMRemoteUILauncher.AlertType(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_100F2B998(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for LostModeAlertInfo();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

unint64_t sub_100F2B9FC()
{
  unint64_t result = qword_101664250;
  if (!qword_101664250)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_101664250);
  }
  return result;
}

uint64_t sub_100F2BA50(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

unsigned char *storeEnumTagSinglePayload for FMRemoteUILauncher.RemoteUILauncherError(unsigned char *result, int a2, int a3)
{
  if ((a3 + 1) >= 0x10000) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) < 0x100) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2)
  {
    switch(v5)
    {
      case 1:
        *unint64_t result = a2;
        return result;
      case 2:
        *(_WORD *)unint64_t result = a2;
        return result;
      case 3:
        goto LABEL_19;
      case 4:
        *(_DWORD *)unint64_t result = a2;
        return result;
      default:
        return result;
    }
  }
  switch(v5)
  {
    case 1:
      *unint64_t result = 0;
      break;
    case 2:
      *(_WORD *)unint64_t result = 0;
      break;
    case 3:
LABEL_19:
      __break(1u);
      JUMPOUT(0x100F2BB4CLL);
    case 4:
      *(_DWORD *)unint64_t result = 0;
      break;
    default:
      return result;
  }
  return result;
}

ValueMetadata *type metadata accessor for FMRemoteUILauncher.RemoteUILauncherError()
{
  return &type metadata for FMRemoteUILauncher.RemoteUILauncherError;
}

unint64_t sub_100F2BB88()
{
  unint64_t result = qword_101664258;
  if (!qword_101664258)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_101664258);
  }
  return result;
}

ValueMetadata *type metadata accessor for SystemInfo()
{
  return &type metadata for SystemInfo;
}

id sub_100F2BBF0(uint64_t a1, uint64_t a2)
{
  return sub_100F2BC38(a1, a2, (uint64_t (*)(void))&_MobileGestalt_copy_productType_obj);
}

id sub_100F2BC08(uint64_t a1, uint64_t a2)
{
  return sub_100F2BC38(a1, a2, (uint64_t (*)(void))&_MobileGestalt_copy_productVersion_obj);
}

id sub_100F2BC20(uint64_t a1, uint64_t a2)
{
  return sub_100F2BC38(a1, a2, (uint64_t (*)(void))&_MobileGestalt_copy_uniqueDeviceID_obj);
}

id sub_100F2BC38(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  id result = (id)MobileGestalt_get_current_device();
  if (result)
  {
    uint64_t v5 = result;
    id v6 = (id)a3();

    if (!v6) {
      return 0;
    }
    uint64_t v7 = static String._unconditionallyBridgeFromObjectiveC(_:)();

    return (id)v7;
  }
  else
  {
    __break(1u);
  }
  return result;
}

id sub_100F2BCC0()
{
  id v0 = [self sharedInstance];
  id v1 = [v0 isInternalBuild];

  return v1;
}

id sub_100F2BD18@<X0>(uint64_t *a1@<X8>)
{
  id result = (id)MobileGestalt_get_current_device();
  if (result)
  {
    int v3 = result;
    id v4 = (id)MobileGestalt_copy_uniqueDeviceID_obj();

    if (v4)
    {
      uint64_t v5 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      unint64_t v7 = v6;
    }
    else
    {
      uint64_t v5 = 0;
      unint64_t v7 = 0xE000000000000000;
    }
    uint64_t v8 = HIBYTE(v7) & 0xF;
    if ((v7 & 0x2000000000000000) == 0) {
      uint64_t v8 = v5 & 0xFFFFFFFFFFFFLL;
    }
    if (v8)
    {
      *a1 = v5;
      a1[1] = v7;
      uint64_t v9 = type metadata accessor for StableIdentifier();
      swift_storeEnumTagMultiPayload();
      unint64_t v10 = *(uint64_t (**)(uint64_t *, uint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 56);
      int v11 = a1;
      uint64_t v12 = 0;
      uint64_t v13 = v9;
    }
    else
    {
      swift_bridgeObjectRelease();
      static os_log_type_t.error.getter();
      if (qword_101637250 != -1) {
        swift_once();
      }
      os_log(_:dso:log:_:_:)();
      uint64_t v14 = type metadata accessor for StableIdentifier();
      unint64_t v10 = *(uint64_t (**)(uint64_t *, uint64_t, uint64_t, uint64_t))(*(void *)(v14 - 8) + 56);
      uint64_t v13 = v14;
      int v11 = a1;
      uint64_t v12 = 1;
    }
    return (id)v10(v11, v12, 1, v13);
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_100F2BEB0@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = sub_10000588C(&qword_101638CF0);
  __chkstk_darwin(v2 - 8);
  id v4 = (char *)&v21 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = type metadata accessor for String.Encoding();
  __chkstk_darwin(v5 - 8);
  unint64_t v7 = (char *)&v21 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  size_t v21 = 37;
  uint64_t v8 = static Array._allocateBufferUninitialized(minimumCapacity:)();
  *(void *)(v8 + 16) = 37;
  *(_OWORD *)(v8 + 48) = 0u;
  *(void *)(v8 + 61) = 0;
  *(_OWORD *)(v8 + 32) = 0u;
  if (sysctlbyname("kern.bootsessionuuid", (void *)(v8 + 32), &v21, 0, 0))
  {
    int v13 = errno.getter();
    if (!strerror(v13)) {
      __break(1u);
    }
    goto LABEL_10;
  }
  swift_bridgeObjectRetain();
  static String.Encoding.ascii.getter();
  sub_100F2C248(v8, v7);
  if (!v9)
  {
    while (1)
    {
LABEL_9:
      _assertionFailure(_:_:file:line:flags:)();
      __break(1u);
LABEL_10:
      uint64_t v14 = String.init(utf8String:)();
      if (v15) {
        uint64_t v16 = v14;
      }
      else {
        uint64_t v16 = 0x6E776F6E6B6E55;
      }
      if (v15) {
        unint64_t v17 = v15;
      }
      else {
        unint64_t v17 = 0xE700000000000000;
      }
      static os_log_type_t.error.getter();
      sub_1003444E0();
      uint64_t v18 = (void *)static OS_os_log.default.getter();
      sub_10000588C((uint64_t *)&unk_10163AD00);
      uint64_t v19 = swift_allocObject();
      *(_OWORD *)(v19 + 16) = xmmword_101347BA0;
      *(void *)(v19 + 56) = &type metadata for String;
      *(void *)(v19 + 64) = sub_10000B4CC();
      *(void *)(v19 + 32) = v16;
      *(void *)(v19 + 40) = v17;
      int v20 = errno.getter();
      *(void *)(v19 + 96) = &type metadata for Int32;
      *(void *)(v19 + 104) = &protocol witness table for Int32;
      *(_DWORD *)(v19 + 72) = v20;
      os_log(_:dso:log:_:_:)();

      swift_bridgeObjectRelease();
    }
  }
  UUID.init(uuidString:)();
  swift_bridgeObjectRelease();
  uint64_t v10 = type metadata accessor for UUID();
  uint64_t v11 = *(void *)(v10 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v11 + 48))(v4, 1, v10) == 1)
  {
    sub_100270E18((uint64_t)v4);
    goto LABEL_9;
  }
  swift_bridgeObjectRelease();
  return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v11 + 32))(a1, v4, v10);
}

uint64_t sub_100F2C204()
{
  sub_10000588C(&qword_101664268);
  swift_allocObject();
  uint64_t result = SynchronousCache.init()();
  qword_101664260 = result;
  return result;
}

uint64_t sub_100F2C248(uint64_t a1, char *a2)
{
  uint64_t v4 = type metadata accessor for String.Encoding();
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = __chkstk_darwin(v4);
  uint64_t v8 = (char *)&v24 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  uint64_t v10 = (char *)&v24 - v9;
  static String.Encoding.utf8.getter();
  char v11 = static String.Encoding.== infix(_:_:)();
  uint64_t v12 = *(void (**)(char *, uint64_t))(v5 + 8);
  v12(v10, v4);
  (*(void (**)(char *, char *, uint64_t))(v5 + 16))(v8, a2, v4);
  if (v11)
  {
    v12(v8, v4);
    goto LABEL_4;
  }
  static String.Encoding.ascii.getter();
  char v13 = static String.Encoding.== infix(_:_:)();
  v12(v10, v4);
  v12(v8, v4);
  if (v13)
  {
LABEL_4:
    uint64_t v14 = sub_100F2C69C(0, a1);
    if ((v15 & 1) == 0)
    {
      if ((v14 & 0x8000000000000000) == 0)
      {
        swift_bridgeObjectRetain();
        uint64_t v16 = static String._tryFromUTF8(_:)();
        uint64_t v18 = v17;
        swift_unknownObjectRelease();
        if (v18)
        {
          static String.Encoding.utf8.getter();
          char v19 = static String.Encoding.== infix(_:_:)();
          v12(v10, v4);
          if (v19 & 1) != 0 || (_StringGuts._isContiguousASCII.getter())
          {
            swift_bridgeObjectRelease();
LABEL_15:
            v12(a2, v4);
            return v16;
          }
          swift_bridgeObjectRelease();
        }
        goto LABEL_11;
      }
      __break(1u);
    }
    __break(1u);
    goto LABEL_18;
  }
LABEL_11:
  uint64_t v20 = sub_100F2C69C(0, a1);
  if ((v21 & 1) == 0)
  {
    id v22 = [objc_allocWithZone((Class)NSString) initWithBytes:a1 + 32 length:v20 encoding:String.Encoding.rawValue.getter()];
    swift_bridgeObjectRelease();
    if (v22)
    {
      uint64_t v16 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    }
    else
    {
      uint64_t v16 = 0;
    }
    goto LABEL_15;
  }
LABEL_18:
  uint64_t result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

void sub_100F2C56C(char *a1@<X8>)
{
  id v2 = [self sharedInstance];
  unsigned int v3 = [v2 isInternalBuild];

  if (v3)
  {
    id v4 = [self processInfo];
    id v5 = [v4 environment];

    uint64_t v6 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)();
    if (*(void *)(v6 + 16) && (sub_100723FF4(0x45545F5245444E55, 0xEA00000000005453), (v7 & 1) != 0))
    {
      swift_bridgeObjectRetain();
      char v8 = 1;
    }
    else
    {
      char v8 = 0;
    }
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  else
  {
    char v8 = 0;
  }
  *a1 = v8;
}

uint64_t sub_100F2C69C(unsigned __int8 a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 16);
  if (!v2) {
    return 0;
  }
  if (*(unsigned __int8 *)(a2 + 32) == a1) {
    return 0;
  }
  if (v2 == 1) {
    return 0;
  }
  if (*(unsigned __int8 *)(a2 + 33) == a1) {
    return 1;
  }
  uint64_t v4 = 0;
  uint64_t v5 = v2 - 2;
  while (v5 != v4)
  {
    int v6 = *(unsigned __int8 *)(a2 + 34 + v4++);
    if (v6 == a1) {
      return v4 + 1;
    }
  }
  return 0;
}

id sub_100F2C724()
{
  id v0 = [self sharedInstance];
  id v1 = [v0 serialNumber];

  if (v1) {
    goto LABEL_4;
  }
  id result = (id)MobileGestalt_get_current_device();
  if (result)
  {
    unsigned int v3 = result;
    id v1 = (id)MobileGestalt_copy_serialNumber_obj();

    if (!v1) {
      return 0;
    }
LABEL_4:
    uint64_t v4 = static String._unconditionallyBridgeFromObjectiveC(_:)();

    return (id)v4;
  }
  __break(1u);
  return result;
}

uint64_t sub_100F2C7E4()
{
  id v0 = [self sharedInstance];
  unsigned int v1 = [v0 isInternalBuild];

  if (v1)
  {
    id v2 = [self standardUserDefaults];
    NSString v3 = String._bridgeToObjectiveC()();
    unsigned int v4 = [v2 BOOLForKey:v3];

    if (v4)
    {
      static os_log_type_t.default.getter();
      sub_1003444E0();
      uint64_t v5 = (void *)static OS_os_log.default.getter();
      os_log(_:dso:log:_:_:)();

      return 1;
    }
  }
  uint64_t result = (uint64_t)(id)MobileGestalt_get_current_device();
  if (result)
  {
    char v7 = (void *)result;
    id v8 = (id)MobileGestalt_copy_regionCode_obj();

    if (v8)
    {
      uint64_t v9 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      uint64_t v11 = v10;

      if (v9 == 18507 && v11 == 0xE200000000000000)
      {
        swift_bridgeObjectRelease();
        return 1;
      }
    }
    char v12 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    return v12 & 1;
  }
  else
  {
    __break(1u);
  }
  return result;
}

id sub_100F2C998()
{
  if (qword_1016371D8 != -1) {
    swift_once();
  }
  SynchronousCache.cachedValue<A>(key:computeBlock:)();
  swift_bridgeObjectRelease();
  if (v3) {
    return 0;
  }
  id v0 = [self locationServicesEnabled];
  return v0;
}

id sub_100F2CA84()
{
  id result = (id)MobileGestalt_get_current_device();
  if (result)
  {
    unsigned int v1 = result;
    id v2 = (id)MobileGestalt_copy_lowPowerExpressModesSupported_obj();

    if (!v2
      || (uint64_t v3 = static Array._unconditionallyBridgeFromObjectiveC(_:)(),
          v2,
          unsigned int v4 = sub_1004C736C(v3),
          swift_bridgeObjectRelease(),
          !v4))
    {
      swift_bridgeObjectRelease();
      unsigned int v4 = _swiftEmptyArrayStorage;
    }
    uint64_t v5 = sub_101158614((uint64_t)v4);
    swift_bridgeObjectRelease();
    char v6 = sub_100DC6054(0x616873696C61, 0xE600000000000000, v5);
    uint64_t v7 = v6 & 1;
    if (sub_100DC6054(0x796D2D646E6966, 0xE700000000000000, v5)) {
      uint64_t v7 = v6 & 1 | 2;
    }
    char v8 = sub_100DC6054(0x727078652D63666ELL, 0xEB00000000737365, v5);
    swift_bridgeObjectRelease();
    if (v8) {
      return (id)(v7 | 4);
    }
    else {
      return (id)v7;
    }
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_100F2CBB8()
{
  uint64_t v0 = type metadata accessor for Logger();
  sub_10001E384(v0, qword_10170EEF8);
  sub_100010324(v0, (uint64_t)qword_10170EEF8);
  return Logger.init(subsystem:category:)();
}

uint64_t SPBluetoothPowerState.description.getter(uint64_t a1)
{
  switch(a1)
  {
    case 0:
      return 6710895;
    case 2:
      return 0x7265776F50776F6CLL;
    case 1:
      return 28271;
  }
  v2._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  String.append(_:)(v2);
  swift_bridgeObjectRelease();
  return 0x286E776F6E6B6E75;
}

uint64_t sub_100F2CD00()
{
  return SPBluetoothPowerState.description.getter(*v0);
}

uint64_t sub_100F2CD08@<X0>(uint64_t *a1@<X0>, char *a2@<X8>)
{
  uint64_t v4 = sub_10000588C(&qword_101642998);
  uint64_t result = __chkstk_darwin(v4 - 8);
  uint64_t v7 = (char *)v18 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  unint64_t v8 = a1[1];
  if (v8 >> 60 != 15)
  {
    uint64_t v9 = *a1;
    uint64_t v10 = self;
    sub_1000361E0(v9, v8);
    Class isa = Data._bridgeToObjectiveC()().super.isa;
    v19[0] = 0;
    id v12 = [v10 propertyListWithData:isa options:0 format:0 error:v19];

    if (v12)
    {
      id v13 = v19[0];
      _bridgeAnyObjectToAny(_:)();
      swift_unknownObjectRelease();
      sub_10000588C((uint64_t *)&unk_101664240);
      if (swift_dynamicCast())
      {
        sub_100BFEA20(v18[1], (uint64_t)v7);
        sub_100037A24(v9, v8);
        uint64_t v14 = type metadata accessor for OfflineFindingInfo();
        char v15 = 1;
        int v16 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(void *)(v14 - 8) + 48))(v7, 1, v14);
        uint64_t result = sub_10001DAB4((uint64_t)v7, &qword_101642998);
        if (v16 != 1) {
          goto LABEL_9;
        }
      }
      else
      {
        uint64_t result = sub_100037A24(v9, v8);
      }
    }
    else
    {
      id v17 = v19[0];
      _convertNSErrorToError(_:)();

      swift_willThrow();
      sub_100037A24(v9, v8);
      uint64_t result = swift_errorRelease();
    }
  }
  char v15 = 0;
LABEL_9:
  *a2 = v15;
  return result;
}

id sub_100F2CF40()
{
  uint64_t v1 = v0;
  uint64_t v2 = sub_10000588C(&qword_1016645A0);
  uint64_t v55 = *(void *)(v2 - 8);
  uint64_t v56 = (uint8_t *)v2;
  __chkstk_darwin(v2);
  uint64_t v54 = &v48[-((v3 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v53 = type metadata accessor for OS_dispatch_queue.Attributes();
  __chkstk_darwin(v53);
  uint64_t v4 = type metadata accessor for DispatchQoS();
  __chkstk_darwin(v4 - 8);
  uint64_t v51 = type metadata accessor for OS_dispatch_queue.AutoreleaseFrequency();
  uint64_t v5 = *(void *)(v51 - 8);
  __chkstk_darwin(v51);
  uint64_t v7 = &v48[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0)];
  sub_10000588C((uint64_t *)&unk_101638CE0);
  uint64_t v8 = swift_allocObject();
  *(_DWORD *)(v8 + 16) = 0;
  *(void *)(v0 + 16) = v8;
  *(void *)(v0 + 24) = &_swiftEmptySetSingleton;
  sub_10000588C(&qword_1016552B0);
  uint64_t v9 = swift_allocObject();
  *(_OWORD *)(v9 + 16) = xmmword_101342130;
  *(void *)(v9 + 32) = static String._unconditionallyBridgeFromObjectiveC(_:)();
  *(void *)(v9 + 40) = v10;
  type metadata accessor for DarwinNotificationHelper();
  swift_allocObject();
  *(void *)(v1 + 32) = DarwinNotificationHelper.init(subscribedToNames:)();
  id v11 = objc_allocWithZone((Class)type metadata accessor for CurrentLocationMonitor());
  *(void *)(v1 + 40) = CurrentLocationMonitor.init(mode:desiredAccuracy:)(0, 0x412E848000000000, 0);
  sub_10001D4B0(0, (unint64_t *)&qword_1016376E0);
  *(_OWORD *)(v1 + 48) = 0u;
  *(_OWORD *)(v1 + 64) = 0u;
  *(void *)(v1 + 80) = 0;
  unsigned int v49 = enum case for OS_dispatch_queue.AutoreleaseFrequency.workItem(_:);
  id v12 = *(void (**)(void))(v5 + 104);
  uint64_t v50 = v5 + 104;
  unint64_t v52 = (void (*)(unsigned char *, void, uint64_t))v12;
  v12(v7);
  static DispatchQoS.unspecified.getter();
  uint64_t v59 = (uint64_t)_swiftEmptyArrayStorage;
  sub_100F3351C((unint64_t *)&qword_101638CC0, 255, (void (*)(uint64_t))&type metadata accessor for OS_dispatch_queue.Attributes);
  sub_10000588C((uint64_t *)&unk_1016376F0);
  sub_100062734((unint64_t *)&qword_101638CD0, (uint64_t *)&unk_1016376F0);
  dispatch thunk of SetAlgebra.init<A>(_:)();
  *(void *)(v1 + 88) = OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)();
  *(void *)(v1 + 96) = 0;
  v52(v7, v49, v51);
  static DispatchQoS.unspecified.getter();
  uint64_t v59 = (uint64_t)_swiftEmptyArrayStorage;
  dispatch thunk of SetAlgebra.init<A>(_:)();
  *(void *)(v1 + 104) = OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)();
  if (qword_1016373C0 != -1) {
    swift_once();
  }
  uint64_t v59 = qword_10170F148;
  swift_retain();
  sub_10000588C(&qword_1016645A8);
  sub_100062734(&qword_1016645B0, &qword_1016645A8);
  id v13 = v54;
  Publisher.map<A>(_:)();
  swift_release();
  sub_100062734(&qword_1016645B8, &qword_1016645A0);
  uint64_t v14 = v56;
  uint64_t v15 = Publisher.eraseToAnyPublisher()();
  (*(void (**)(unsigned char *, uint8_t *))(v55 + 8))(v13, v14);
  *(void *)(v1 + 120) = 0;
  *(void *)(v1 + 128) = 0;
  *(void *)(v1 + 112) = v15;
  sub_10000588C(&qword_101644840);
  swift_allocObject();
  uint64_t v16 = PassthroughSubject.init()();
  *(void *)(v1 + 136) = v16;
  *(unsigned char *)(v1 + 152) = 0;
  uint64_t v59 = v16;
  sub_100062734(&qword_10165D758, &qword_101644840);
  *(void *)(v1 + 144) = Publisher.eraseToAnyPublisher()();
  uint64_t My = type metadata accessor for Feature.FindMy();
  uint64_t v61 = My;
  uint64_t v18 = sub_100F3351C((unint64_t *)&qword_101653E00, 255, (void (*)(uint64_t))&type metadata accessor for Feature.FindMy);
  uint64_t v62 = v18;
  char v19 = sub_10001D958(&v59);
  uint64_t v20 = *(void (**)(uint64_t *, void, uint64_t))(*(void *)(My - 8) + 104);
  v20(v19, enum case for Feature.FindMy.baLPEM(_:), My);
  LOBYTE(v15) = isFeatureEnabled(_:)();
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)&v59);
  if ((v15 & 1) == 0)
  {
    uint64_t v61 = My;
    uint64_t v62 = v18;
    char v21 = sub_10001D958(&v59);
    v20(v21, enum case for Feature.FindMy.baPowerOff(_:), My);
    char v22 = isFeatureEnabled(_:)();
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)&v59);
    if ((v22 & 1) == 0) {
      return (id)v1;
    }
  }
  if (sub_100F32FE8())
  {
    if (qword_1016371E0 != -1) {
      swift_once();
    }
    uint64_t v23 = type metadata accessor for Logger();
    sub_100010324(v23, (uint64_t)qword_10170EEF8);
    uint64_t v24 = Logger.logObject.getter();
    os_log_type_t v25 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v24, v25))
    {
      uint64_t v26 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v26 = 0;
      _os_log_impl((void *)&_mh_execute_header, v24, v25, "LPEM supported.", v26, 2u);
      swift_slowDealloc();
    }

    uint64_t v27 = swift_allocObject();
    swift_weakInit();
    swift_retain();
    sub_100F2E0BC((uint64_t)sub_100F33564, v27);
    swift_release_n();
    goto LABEL_20;
  }
  if (qword_1016371E0 != -1) {
    swift_once();
  }
  uint64_t v28 = type metadata accessor for Logger();
  sub_100010324(v28, (uint64_t)qword_10170EEF8);
  id v29 = Logger.logObject.getter();
  os_log_type_t v30 = static os_log_type_t.default.getter();
  if (!os_log_type_enabled(v29, v30))
  {
LABEL_19:

LABEL_20:
    if (qword_1016371E0 != -1) {
      swift_once();
    }
    uint64_t v38 = type metadata accessor for Logger();
    sub_100010324(v38, (uint64_t)qword_10170EEF8);
    swift_retain_n();
    unsigned int v39 = Logger.logObject.getter();
    os_log_type_t v40 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v39, v40))
    {
      long long v41 = (uint8_t *)swift_slowAlloc();
      uint64_t v42 = swift_slowAlloc();
      *(_DWORD *)long long v41 = 136446210;
      uint64_t v56 = v41 + 4;
      uint64_t v57 = v1;
      uint64_t v58 = v42;
      uint64_t v59 = 60;
      unint64_t v60 = 0xE100000000000000;
      type metadata accessor for TheftDeterrenceStateManager();
      sub_100F3351C(&qword_101664508, v43, (void (*)(uint64_t))type metadata accessor for TheftDeterrenceStateManager);
      swift_retain();
      v44._countAndFlagsBits = CustomStringConvertible.typeDescription.getter();
      String.append(_:)(v44);
      swift_bridgeObjectRelease();
      v45._countAndFlagsBits = 32;
      v45._object = (void *)0xE100000000000000;
      String.append(_:)(v45);
      v46._countAndFlagsBits = CustomStringConvertible<>.addressDescription.getter();
      String.append(_:)(v46);
      swift_bridgeObjectRelease();
      v47._countAndFlagsBits = 62;
      v47._object = (void *)0xE100000000000000;
      String.append(_:)(v47);
      swift_release();
      uint64_t v59 = sub_1008FA0F0(v59, v60, &v58);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_release_n();
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v39, v40, "Created %{public}s", v41, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {

      swift_release_n();
    }
    return (id)v1;
  }
  unint64_t v31 = (uint8_t *)swift_slowAlloc();
  uint64_t v59 = swift_slowAlloc();
  *(_DWORD *)unint64_t v31 = 136315138;
  id result = (id)MobileGestalt_get_current_device();
  if (result)
  {
    unint64_t v33 = result;
    id v34 = (id)MobileGestalt_copy_hwModelStr_obj();

    if (v34)
    {
      uint64_t v35 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      unint64_t v37 = v36;
    }
    else
    {
      uint64_t v35 = 0;
      unint64_t v37 = 0xE000000000000000;
    }
    uint64_t v58 = sub_1008FA0F0(v35, v37, &v59);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v29, v30, "LPEM not supported [%s].", v31, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
    goto LABEL_19;
  }
  __break(1u);
  return result;
}

uint64_t sub_100F2DAB4()
{
  swift_beginAccess();
  uint64_t result = swift_weakLoadStrong();
  if (result)
  {
    sub_100F2EF2C();
    return swift_release();
  }
  return result;
}

uint64_t sub_100F2DB0C()
{
  if (qword_1016371E0 != -1) {
    swift_once();
  }
  uint64_t v0 = type metadata accessor for Logger();
  sub_100010324(v0, (uint64_t)qword_10170EEF8);
  swift_retain_n();
  uint64_t v1 = Logger.logObject.getter();
  os_log_type_t v2 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v1, v2))
  {
    uint64_t v3 = (uint8_t *)swift_slowAlloc();
    uint64_t v4 = swift_slowAlloc();
    *(_DWORD *)uint64_t v3 = 136315138;
    uint64_t v11 = v4;
    type metadata accessor for TheftDeterrenceStateManager();
    sub_100F3351C(&qword_101664508, v5, (void (*)(uint64_t))type metadata accessor for TheftDeterrenceStateManager);
    swift_retain();
    v6._countAndFlagsBits = CustomStringConvertible.typeDescription.getter();
    String.append(_:)(v6);
    swift_bridgeObjectRelease();
    v7._countAndFlagsBits = 32;
    v7._object = (void *)0xE100000000000000;
    String.append(_:)(v7);
    v8._countAndFlagsBits = CustomStringConvertible<>.addressDescription.getter();
    String.append(_:)(v8);
    swift_bridgeObjectRelease();
    v9._countAndFlagsBits = 62;
    v9._object = (void *)0xE100000000000000;
    String.append(_:)(v9);
    swift_release();
    sub_1008FA0F0(60, 0xE100000000000000, &v11);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release_n();
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v1, v2, "%s: firstLaunchSinceReboot()", v3, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {

    swift_release_n();
  }
  return sub_100F308D8();
}

void sub_100F2DD88(uint64_t a1)
{
  uint64_t v2 = v1;
  if (qword_1016371E0 != -1) {
    swift_once();
  }
  uint64_t v4 = type metadata accessor for Logger();
  sub_100010324(v4, (uint64_t)qword_10170EEF8);
  uint64_t v5 = Logger.logObject.getter();
  os_log_type_t v6 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v5, v6))
  {
    Swift::String v7 = (uint8_t *)swift_slowAlloc();
    uint64_t v11 = swift_slowAlloc();
    *(_DWORD *)Swift::String v7 = 136315138;
    if (a1)
    {
      if (a1 == 2)
      {
        unint64_t v8 = 0xEC00000065646F4DLL;
        uint64_t v9 = 0x7265776F50776F6CLL;
      }
      else if (a1 == 1)
      {
        unint64_t v8 = 0xE200000000000000;
        uint64_t v9 = 28271;
      }
      else
      {
        v10._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
        String.append(_:)(v10);
        swift_bridgeObjectRelease();
        uint64_t v9 = 0x286E776F6E6B6E75;
        unint64_t v8 = 0xE800000000000000;
      }
    }
    else
    {
      unint64_t v8 = 0xE300000000000000;
      uint64_t v9 = 6710895;
    }
    sub_1008FA0F0(v9, v8, &v11);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v5, v6, "Received bluetoothPowerStateUpdate: %s", v7, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }

  if (*(void *)(v2 + 48))
  {
    swift_retain();
    CurrentValueSubject.send(_:)();
    swift_release();
  }
}

uint64_t sub_100F2DFB8@<X0>(uint64_t result@<X0>, unsigned char *a2@<X8>)
{
  *a2 = *(unsigned char *)(result + 152);
  return result;
}

uint64_t sub_100F2DFC4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  Swift::String v7 = (void *)swift_allocObject();
  v7[2] = a1;
  v7[3] = a3;
  v7[4] = a4;
  swift_retain();
  swift_retain();
  swift_retain();
  sub_10000588C(&qword_10163FE78);
  sub_100062734(&qword_10163FE80, &qword_10163FE78);
  Publisher.oneshot(_:)();
  swift_release();
  return swift_release();
}

uint64_t sub_100F2E0BC(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2;
  uint64_t v6 = sub_10000588C(&qword_101656600);
  uint64_t v7 = __chkstk_darwin(v6);
  uint64_t v9 = &v23[-((v8 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __chkstk_darwin(v7);
  uint64_t v11 = &v23[-v10];
  type metadata accessor for DarwinNotificationManager();
  LOBYTE(v25) = 1;
  uint64_t v12 = static DarwinNotificationManager.currentValue(name:token:)();
  uint64_t v24 = v2[5];
  type metadata accessor for CLAuthorizationStatus(0);
  OS_dispatch_queue.sync<A>(execute:)();
  int v13 = v25;
  sub_10104D4C0(v11);
  sub_100F33110((uint64_t)v11, (uint64_t)v9);
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload == 1)
  {
    if (!*v9) {
      sub_100F32710();
    }
    uint64_t v9 = v11;
  }
  else
  {
    sub_10001DAB4((uint64_t)v11, &qword_101656600);
  }
  BOOL v15 = EnumCaseMultiPayload != 1;
  sub_10001DAB4((uint64_t)v9, &qword_101656600);
  BOOL v16 = v13 == 3;
  BOOL v17 = v12 == 1;
  id v18 = [self standardUserDefaults];
  unsigned __int8 v19 = [v18 userHasAcknowledgedFindMy];

  uint64_t v25 = v17;
  sub_10000588C(&qword_101664558);
  swift_allocObject();
  v3[6] = CurrentValueSubject.init(_:)();
  swift_release();
  LOBYTE(v25) = v16;
  sub_10000588C(&qword_101657190);
  swift_allocObject();
  v3[9] = CurrentValueSubject.init(_:)();
  swift_release();
  LOBYTE(v25) = v15;
  swift_allocObject();
  v3[10] = CurrentValueSubject.init(_:)();
  swift_release();
  LOBYTE(v25) = v19;
  swift_allocObject();
  v3[15] = CurrentValueSubject.init(_:)();
  swift_release();
  LOBYTE(v25) = 0;
  swift_allocObject();
  v3[16] = CurrentValueSubject.init(_:)();
  swift_release();
  sub_10000588C(&qword_101664590);
  swift_allocObject();
  uint64_t v25 = Future.init(_:)();
  uint64_t v20 = swift_allocObject();
  swift_weakInit();
  uint64_t v21 = swift_allocObject();
  *(void *)(v21 + 16) = v20;
  *(unsigned char *)(v21 + 24) = v17;
  *(void *)(v21 + 32) = v17;
  *(unsigned char *)(v21 + 40) = v16;
  *(unsigned char *)(v21 + 41) = v15;
  *(unsigned char *)(v21 + 42) = v19;
  *(void *)(v21 + 48) = a1;
  *(void *)(v21 + 56) = a2;
  sub_100062734(&qword_101664598, &qword_101664590);
  swift_retain();
  Publisher.oneshot(_:)();
  swift_release();
  return swift_release();
}

void sub_100F2E4C4(uint64_t a1, uint64_t a2, char a3, uint64_t a4, char a5, char a6, char a7, void (*a8)(void))
{
  uint64_t v14 = *(void **)a1;
  char v15 = *(unsigned char *)(a1 + 8);
  swift_beginAccess();
  uint64_t Strong = swift_weakLoadStrong();
  if (Strong)
  {
    uint64_t v17 = Strong;
    if (v15)
    {
      swift_errorRetain();
      if (qword_1016371E0 != -1) {
        swift_once();
      }
      uint64_t v18 = type metadata accessor for Logger();
      sub_100010324(v18, (uint64_t)qword_10170EEF8);
      swift_errorRetain();
      swift_errorRetain();
      unsigned __int8 v19 = Logger.logObject.getter();
      os_log_type_t v20 = static os_log_type_t.error.getter();
      if (!os_log_type_enabled(v19, v20))
      {
        swift_release();
        sub_100173E7C(v14, 1);
        sub_100173E7C(v14, 1);
        swift_errorRelease();

        return;
      }
      uint64_t v21 = (uint8_t *)swift_slowAlloc();
      v67[0] = swift_slowAlloc();
      *(_DWORD *)uint64_t v21 = 136315138;
      swift_getErrorValue();
      uint64_t v22 = Error.localizedDescription.getter();
      uint64_t v68 = sub_1008FA0F0(v22, v23, v67);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      sub_100173E7C(v14, 1);
      sub_100173E7C(v14, 1);
      _os_log_impl((void *)&_mh_execute_header, v19, v20, "activationLockInfoFuture error: %s", v21, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
      swift_release();

      uint64_t v24 = v14;
      char v25 = 1;
    }
    else
    {
      uint64_t v64 = a4;
      id v26 = v14;
      uint64_t v66 = a8;
      char v65 = a6;
      if ([v26 isActivationLocked])
      {
        BOOL v27 = 1;
      }
      else
      {
        id v28 = [v26 maskedAppleID];
        uint64_t v29 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        unint64_t v31 = v30;

        swift_bridgeObjectRelease();
        uint64_t v32 = HIBYTE(v31) & 0xF;
        if ((v31 & 0x2000000000000000) == 0) {
          uint64_t v32 = v29 & 0xFFFFFFFFFFFFLL;
        }
        BOOL v27 = v32 != 0;
      }
      sub_10000588C(&qword_101657190);
      swift_allocObject();
      *(void *)(v17 + 56) = CurrentValueSubject.init(_:)();
      swift_release();
      LOBYTE(v67[0]) = [v26 isOfflineFindingEnabled];
      swift_allocObject();
      *(void *)(v17 + 64) = CurrentValueSubject.init(_:)();
      swift_release();
      if (qword_1016371E0 != -1) {
        swift_once();
      }
      uint64_t v33 = type metadata accessor for Logger();
      sub_100010324(v33, (uint64_t)qword_10170EEF8);
      id v34 = Logger.logObject.getter();
      os_log_type_t v35 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v34, v35))
      {
        unint64_t v36 = (uint8_t *)swift_slowAlloc();
        *(_DWORD *)unint64_t v36 = 67109120;
        LODWORD(v67[0]) = a3 & 1;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        _os_log_impl((void *)&_mh_execute_header, v34, v35, "initialBluetoothState     : %{BOOL}d", v36, 8u);
        swift_slowDealloc();
      }

      unint64_t v37 = Logger.logObject.getter();
      os_log_type_t v38 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v37, v38))
      {
        unsigned int v39 = (uint8_t *)swift_slowAlloc();
        *(_DWORD *)unsigned int v39 = 67109120;
        LODWORD(v67[0]) = v27;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        _os_log_impl((void *)&_mh_execute_header, v37, v38, "initialFMIPState          : %{BOOL}d", v39, 8u);
        swift_slowDealloc();
      }

      id v40 = v26;
      long long v41 = Logger.logObject.getter();
      os_log_type_t v42 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v41, v42))
      {
        uint64_t v43 = (uint8_t *)swift_slowAlloc();
        *(_DWORD *)uint64_t v43 = 67109120;
        LODWORD(v67[0]) = [v40 isOfflineFindingEnabled];
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        sub_100173E7C(v14, 0);
        _os_log_impl((void *)&_mh_execute_header, v41, v42, "initialOfflineFindingState: %{BOOL}d", v43, 8u);
        swift_slowDealloc();
      }
      else
      {
        sub_100173E7C(v14, 0);
      }

      Swift::String v44 = Logger.logObject.getter();
      os_log_type_t v45 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v44, v45))
      {
        Swift::String v46 = (uint8_t *)swift_slowAlloc();
        uint64_t v68 = swift_slowAlloc();
        *(_DWORD *)Swift::String v46 = 136446210;
        if (v64)
        {
          char v47 = a5;
          if (v64 == 2)
          {
            unint64_t v48 = 0xEC00000065646F4DLL;
            uint64_t v49 = 0x7265776F50776F6CLL;
          }
          else if (v64 == 1)
          {
            unint64_t v48 = 0xE200000000000000;
            uint64_t v49 = 28271;
          }
          else
          {
            v67[1] = 0xE800000000000000;
            v50._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
            String.append(_:)(v50);
            swift_bridgeObjectRelease();
            uint64_t v49 = 0x286E776F6E6B6E75;
            unint64_t v48 = 0xE800000000000000;
          }
        }
        else
        {
          char v47 = a5;
          unint64_t v48 = 0xE300000000000000;
          uint64_t v49 = 6710895;
        }
        v67[0] = sub_1008FA0F0(v49, v48, &v68);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        _os_log_impl((void *)&_mh_execute_header, v44, v45, "initialBluetoothPowerState: %{public}s", v46, 0xCu);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();

        a5 = v47;
      }
      else
      {
      }
      swift_retain();
      uint64_t v51 = Logger.logObject.getter();
      os_log_type_t v52 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v51, v52))
      {
        uint64_t v53 = swift_slowAlloc();
        *(_DWORD *)uint64_t v53 = 67109376;
        LODWORD(v67[0]) = a5 & 1;
        uint64_t v54 = UnsafeMutableRawBufferPointer.copyMemory(from:)();
        *(_WORD *)(v53 + 8) = 1024;
        __chkstk_darwin(v54);
        type metadata accessor for CLAuthorizationStatus(0);
        OS_dispatch_queue.sync<A>(execute:)();
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_release();
        _os_log_impl((void *)&_mh_execute_header, v51, v52, "initialLocServicesState   : %{BOOL}d [%d]", (uint8_t *)v53, 0xEu);
        swift_slowDealloc();
      }
      else
      {

        swift_release();
      }
      uint64_t v55 = Logger.logObject.getter();
      os_log_type_t v56 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v55, v56))
      {
        uint64_t v57 = (uint8_t *)swift_slowAlloc();
        *(_DWORD *)uint64_t v57 = 67109120;
        LODWORD(v67[0]) = v65 & 1;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        _os_log_impl((void *)&_mh_execute_header, v55, v56, "initialNVRAMState         : %{BOOL}d", v57, 8u);
        swift_slowDealloc();
      }

      uint64_t v58 = Logger.logObject.getter();
      os_log_type_t v59 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v58, v59))
      {
        unint64_t v60 = (uint8_t *)swift_slowAlloc();
        *(_DWORD *)unint64_t v60 = 67109120;
        LODWORD(v67[0]) = a7 & 1;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        _os_log_impl((void *)&_mh_execute_header, v58, v59, "initialUserAck            : %{BOOL}d", v60, 8u);
        swift_slowDealloc();
      }

      uint64_t v61 = Logger.logObject.getter();
      os_log_type_t v62 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v61, v62))
      {
        uint64_t v63 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)uint64_t v63 = 0;
        _os_log_impl((void *)&_mh_execute_header, v61, v62, "suppressLPEM              : false", v63, 2u);
        swift_slowDealloc();
      }

      v66();
      swift_release();
      uint64_t v24 = v14;
      char v25 = 0;
    }
    sub_100173E7C(v24, v25);
  }
}

uint64_t sub_100F2EF2C()
{
  uint64_t v1 = v0;
  uint64_t v45 = sub_10000588C(&qword_101664510);
  uint64_t v43 = *(void *)(v45 - 8);
  __chkstk_darwin(v45);
  os_log_type_t v42 = (char *)&v35 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v3 = sub_10000588C(&qword_101664518);
  uint64_t v46 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  Swift::String v44 = (char *)&v35 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v51 = sub_10000588C(&qword_101664520);
  uint64_t v49 = *(void *)(v51 - 8);
  __chkstk_darwin(v51);
  uint64_t v6 = (char *)&v35 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v41 = sub_10000588C(&qword_101664528);
  uint64_t v40 = *(void *)(v41 - 8);
  __chkstk_darwin(v41);
  unsigned int v39 = (char *)&v35 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v38 = sub_10000588C(&qword_101664530);
  uint64_t v37 = *(void *)(v38 - 8);
  __chkstk_darwin(v38);
  unint64_t v36 = (char *)&v35 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v54 = v0[6];
  if (v54
    && (uint64_t v55 = v0[7]) != 0
    && (uint64_t v56 = v0[8]) != 0
    && (uint64_t v9 = v0[9]) != 0
    && (uint64_t v10 = v0[10]) != 0
    && (uint64_t v11 = v0[15]) != 0
    && (uint64_t v12 = v0[16]) != 0)
  {
    static String._unconditionallyBridgeFromObjectiveC(_:)();
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    uint64_t v13 = dispatch thunk of DarwinNotificationHelper.publisher(name:)();
    Swift::String v50 = v6;
    uint64_t v52 = v10;
    uint64_t v53 = v9;
    uint64_t v47 = v3;
    uint64_t v48 = v12;
    uint64_t v14 = v13;
    swift_bridgeObjectRelease();
    uint64_t v60 = v14;
    uint64_t v15 = swift_allocObject();
    swift_weakInit();
    BOOL v16 = (void *)swift_allocObject();
    void v16[2] = v15;
    uint64_t v17 = v56;
    v16[3] = v55;
    v16[4] = v17;
    v16[5] = v10;
    swift_retain();
    swift_retain();
    swift_retain();
    sub_10000588C(&qword_101661F80);
    sub_100062734(&qword_101661F88, &qword_101661F80);
    Publisher<>.sink(receiveValue:)();
    swift_release();
    swift_release();
    swift_beginAccess();
    AnyCancellable.store(in:)();
    swift_endAccess();
    swift_release();
    uint64_t v60 = *(void *)(v1[5] + OBJC_IVAR____TtC12searchpartyd22CurrentLocationMonitor_authorizationStatusPublisher);
    swift_retain();
    sub_10000588C(&qword_101664538);
    sub_100062734(&qword_101664540, &qword_101664538);
    uint64_t v18 = v36;
    Publisher.map<A>(_:)();
    swift_release();
    os_log_type_t v35 = &protocol conformance descriptor for Publishers.Map<A, B>;
    sub_100062734(&qword_101664548, &qword_101664530);
    uint64_t v19 = v53;
    swift_retain();
    uint64_t v20 = v38;
    Publisher<>.sink(receiveValue:)();
    uint64_t v21 = v19;
    swift_release();
    (*(void (**)(char *, uint64_t))(v37 + 8))(v18, v20);
    swift_beginAccess();
    AnyCancellable.store(in:)();
    swift_endAccess();
    swift_release();
    id v22 = [self standardUserDefaults];
    swift_getKeyPath();
    unint64_t v23 = v39;
    _KeyValueCodingAndObservingPublishing<>.publisher<A>(for:options:)();

    swift_release();
    sub_100062734(&qword_101664550, &qword_101664528);
    swift_retain();
    uint64_t v24 = v41;
    Publisher<>.sink(receiveValue:)();
    swift_release();
    (*(void (**)(char *, uint64_t))(v40 + 8))(v23, v24);
    swift_beginAccess();
    AnyCancellable.store(in:)();
    swift_endAccess();
    swift_release();
    uint64_t v60 = v1[14];
    swift_retain();
    swift_retain();
    sub_10000588C(&qword_10163FE78);
    sub_100062734(&qword_10163FE80, &qword_10163FE78);
    Publisher<>.sink(receiveValue:)();
    swift_release();
    swift_release();
    swift_beginAccess();
    AnyCancellable.store(in:)();
    swift_endAccess();
    swift_release();
    uint64_t v59 = v55;
    uint64_t v60 = v54;
    uint64_t v41 = (uint64_t)v1;
    uint64_t v25 = v10;
    uint64_t v57 = v21;
    uint64_t v58 = v56;
    sub_10000588C(&qword_101664558);
    sub_10000588C(&qword_101657190);
    sub_100062734(&qword_101664560, &qword_101664558);
    sub_100062734(&qword_101664568, &qword_101657190);
    id v26 = v42;
    Publisher.combineLatest<A, B, C>(_:_:_:)();
    uint64_t v59 = v11;
    uint64_t v60 = v25;
    uint64_t v58 = v48;
    sub_100062734(&qword_101664570, &qword_101664510);
    BOOL v27 = v44;
    uint64_t v28 = v45;
    Publisher.combineLatest<A, B, C>(_:_:_:)();
    (*(void (**)(char *, uint64_t))(v43 + 8))(v26, v28);
    sub_10000588C(&qword_101664578);
    sub_100062734(&qword_101664580, &qword_101664518);
    uint64_t v29 = v50;
    uint64_t v30 = v47;
    Publisher.map<A>(_:)();
    (*(void (**)(char *, uint64_t))(v46 + 8))(v27, v30);
    uint64_t v31 = swift_allocObject();
    swift_weakInit();
    uint64_t v32 = swift_allocObject();
    *(void *)(v32 + 16) = sub_100F33394;
    *(void *)(v32 + 24) = v31;
    sub_100062734(&qword_101664588, &qword_101664520);
    uint64_t v33 = v51;
    Publisher<>.sink(receiveValue:)();
    swift_release();
    (*(void (**)(char *, uint64_t))(v49 + 8))(v29, v33);
    swift_beginAccess();
    AnyCancellable.store(in:)();
    swift_endAccess();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    return swift_release();
  }
  else
  {
    uint64_t result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  return result;
}

uint64_t sub_100F2FC2C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v8 = sub_10000588C(&qword_101656600);
  uint64_t v9 = __chkstk_darwin(v8);
  uint64_t v11 = (char *)v24 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9);
  uint64_t v13 = (char *)v24 - v12;
  swift_beginAccess();
  uint64_t result = swift_weakLoadStrong();
  if (result)
  {
    v24[0] = result;
    v24[1] = a5;
    if (qword_1016371E0 != -1) {
      swift_once();
    }
    uint64_t v15 = type metadata accessor for Logger();
    sub_100010324(v15, (uint64_t)qword_10170EEF8);
    BOOL v16 = Logger.logObject.getter();
    os_log_type_t v17 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v16, v17))
    {
      uint64_t v18 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v18 = 0;
      _os_log_impl((void *)&_mh_execute_header, v16, v17, "Received fmdLocalActivationLockInfoChanged notification", v18, 2u);
      swift_slowDealloc();
    }

    sub_10000588C(&qword_101664590);
    swift_allocObject();
    uint64_t v25 = Future.init(_:)();
    uint64_t v19 = swift_allocObject();
    *(void *)(v19 + 16) = a3;
    *(void *)(v19 + 24) = a4;
    sub_100062734(&qword_101664598, &qword_101664590);
    swift_retain();
    swift_retain();
    Publisher.oneshot(_:)();
    swift_release();
    swift_release();
    sub_10104D4C0(v13);
    sub_100F33110((uint64_t)v13, (uint64_t)v11);
    int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    if (EnumCaseMultiPayload == 1)
    {
      if (!*v11) {
        sub_100F32710();
      }
      uint64_t v11 = v13;
    }
    else
    {
      sub_10001DAB4((uint64_t)v13, &qword_101656600);
    }
    sub_10001DAB4((uint64_t)v11, &qword_101656600);
    swift_retain();
    uint64_t v21 = Logger.logObject.getter();
    os_log_type_t v22 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v21, v22))
    {
      uint64_t v23 = swift_slowAlloc();
      *(_DWORD *)uint64_t v23 = 67109376;
      LODWORD(v25) = EnumCaseMultiPayload != 1;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v23 + 8) = 1024;
      CurrentValueSubject.value.getter();
      LODWORD(v25) = v25;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_release();
      _os_log_impl((void *)&_mh_execute_header, v21, v22, "Reloaded NVRAM state %{BOOL}d existing %{BOOL}d", (uint8_t *)v23, 0xEu);
      swift_slowDealloc();
    }
    else
    {

      swift_release();
    }
    CurrentValueSubject.value.getter();
    if ((EnumCaseMultiPayload != 1) != v25)
    {
      LOBYTE(v25) = EnumCaseMultiPayload != 1;
      CurrentValueSubject.send(_:)();
    }
    return swift_release();
  }
  return result;
}

void sub_100F3003C(uint64_t a1)
{
  uint64_t v1 = *(void **)a1;
  if ((*(unsigned char *)(a1 + 8) & 1) == 0)
  {
    id v9 = v1;
    if ([v9 isActivationLocked])
    {
      CurrentValueSubject.value.getter();
      if (v17)
      {
LABEL_16:
        CurrentValueSubject.value.getter();
        if (v17 != [v9 isOfflineFindingEnabled])
        {
          LOBYTE(v17) = [v9 isOfflineFindingEnabled];
          CurrentValueSubject.send(_:)();
        }
        uint64_t v7 = v1;
        char v8 = 0;
        goto LABEL_19;
      }
      LOBYTE(v10) = 1;
    }
    else
    {
      id v11 = [v9 maskedAppleID];
      uint64_t v12 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      unint64_t v14 = v13;

      swift_bridgeObjectRelease();
      uint64_t v15 = HIBYTE(v14) & 0xF;
      if ((v14 & 0x2000000000000000) == 0) {
        uint64_t v15 = v12 & 0xFFFFFFFFFFFFLL;
      }
      int v10 = v15 != 0;
      CurrentValueSubject.value.getter();
      if (v17 == v10) {
        goto LABEL_16;
      }
    }
    LOBYTE(v17) = v10;
    CurrentValueSubject.send(_:)();
    goto LABEL_16;
  }
  swift_errorRetain();
  if (qword_1016371E0 != -1) {
    swift_once();
  }
  uint64_t v2 = type metadata accessor for Logger();
  sub_100010324(v2, (uint64_t)qword_10170EEF8);
  swift_errorRetain();
  swift_errorRetain();
  oslog = Logger.logObject.getter();
  os_log_type_t v3 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(oslog, v3))
  {
    uint64_t v4 = (uint8_t *)swift_slowAlloc();
    uint64_t v17 = swift_slowAlloc();
    *(_DWORD *)uint64_t v4 = 136315138;
    swift_getErrorValue();
    uint64_t v5 = Error.localizedDescription.getter();
    sub_1008FA0F0(v5, v6, &v17);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    sub_100173E7C(v1, 1);
    sub_100173E7C(v1, 1);
    _os_log_impl((void *)&_mh_execute_header, oslog, v3, "activationLockInfoFuture error: %s", v4, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    uint64_t v7 = v1;
    char v8 = 1;
LABEL_19:
    sub_100173E7C(v7, v8);
    return;
  }
  sub_100173E7C(v1, 1);
  sub_100173E7C(v1, 1);
  swift_errorRelease();
}

void sub_100F30358(int *a1@<X0>, BOOL *a2@<X8>)
{
  int v3 = *a1;
  if (qword_1016371E0 != -1) {
    swift_once();
  }
  uint64_t v4 = type metadata accessor for Logger();
  sub_100010324(v4, (uint64_t)qword_10170EEF8);
  uint64_t v5 = Logger.logObject.getter();
  os_log_type_t v6 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v5, v6))
  {
    uint64_t v7 = (uint8_t *)swift_slowAlloc();
    *(_DWORD *)uint64_t v7 = 67109120;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl((void *)&_mh_execute_header, v5, v6, "LocServices authorizationStatus changed to %d", v7, 8u);
    swift_slowDealloc();
  }

  *a2 = v3 == 3;
}

uint64_t sub_100F3047C@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  char v2 = *(unsigned char *)(result + 8);
  char v3 = *(unsigned char *)(result + 9);
  char v4 = *(unsigned char *)(result + 10);
  char v5 = *(unsigned char *)(result + 11);
  char v6 = *(unsigned char *)(result + 12);
  char v7 = *(unsigned char *)(result + 13);
  *(void *)a2 = *(void *)result;
  *(unsigned char *)(a2 + 8) = v2;
  *(unsigned char *)(a2 + 9) = v3;
  *(unsigned char *)(a2 + 10) = v4;
  *(unsigned char *)(a2 + 11) = v5;
  *(unsigned char *)(a2 + 12) = v6;
  *(unsigned char *)(a2 + 13) = v7;
  return result;
}

uint64_t sub_100F304B8(uint64_t a1, char a2, char a3, char a4, char a5, char a6, char a7)
{
  swift_beginAccess();
  uint64_t result = swift_weakLoadStrong();
  if (!result) {
    return result;
  }
  if (qword_1016371E0 != -1) {
    swift_once();
  }
  uint64_t v13 = type metadata accessor for Logger();
  sub_100010324(v13, (uint64_t)qword_10170EEF8);
  unint64_t v14 = Logger.logObject.getter();
  os_log_type_t v15 = static os_log_type_t.default.getter();
  char v22 = a5;
  if (os_log_type_enabled(v14, v15))
  {
    uint64_t v16 = swift_slowAlloc();
    uint64_t v25 = swift_slowAlloc();
    *(_DWORD *)uint64_t v16 = 136447746;
    if (a1)
    {
      if (a1 == 2)
      {
        unint64_t v17 = 0xEC00000065646F4DLL;
        uint64_t v18 = 0x7265776F50776F6CLL;
      }
      else if (a1 == 1)
      {
        unint64_t v17 = 0xE200000000000000;
        uint64_t v18 = 28271;
      }
      else
      {
        v19._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
        String.append(_:)(v19);
        swift_bridgeObjectRelease();
        uint64_t v18 = 0x286E776F6E6B6E75;
        unint64_t v17 = 0xE800000000000000;
      }
    }
    else
    {
      unint64_t v17 = 0xE300000000000000;
      uint64_t v18 = 6710895;
    }
    sub_1008FA0F0(v18, v17, &v25);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    *(_WORD *)(v16 + 12) = 1024;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v16 + 18) = 1024;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v16 + 24) = 1024;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v16 + 30) = 1024;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v16 + 36) = 1024;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v16 + 42) = 1024;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl((void *)&_mh_execute_header, v14, v15, "TheftDeterrence state changed: BT: %{public}s FMIP: %{BOOL}d OF: %{BOOL}d locServices: %{BOOL}d NVRAM: %{BOOL}d userACK: %{BOOL}d suppress: %{BOOL}d", (uint8_t *)v16, 0x30u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }

  if (a1 != 1)
  {
    char v21 = 0;
    if (a1 != 2 || (a2 & 1) == 0) {
      goto LABEL_23;
    }
LABEL_18:
    if (a3)
    {
      if ((a4 & 1) != 0 || (uint64_t v20 = inPostEraseSetupAssistant(), v20)) {
        char v21 = v22 & (a7 ^ 1);
      }
      else {
        char v21 = 0;
      }
    }
    goto LABEL_23;
  }
  char v21 = 0;
  if (a2) {
    goto LABEL_18;
  }
LABEL_23:
  __chkstk_darwin(v20);
  swift_retain();
  OSAllocatedUnfairLock.callAsFunction<A>(_:)();
  swift_release();
  if (v21 & 1) != 0 && (a6) {
    sub_100F31BB4();
  }
  else {
    sub_100F31C40();
  }
  return swift_release();
}

uint64_t sub_100F308D8()
{
  id v7 = [self sharedHardwareManager];
  sub_10001D4B0(0, &qword_101664500);
  deoptionalize<A>(_:)();

  uint64_t v1 = (void *)aBlock[0];
  aBlock[4] = sub_100F33308;
  uint64_t v6 = v0;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  void aBlock[2] = sub_10001F4BC;
  aBlock[3] = &unk_1015FDB08;
  char v2 = _Block_copy(aBlock);
  swift_retain();
  swift_release();
  id v3 = [v1 startLPEMConfigSession:v2];
  _Block_release(v2);

  return swift_unknownObjectRelease();
}

void sub_100F30A08(void *a1, uint64_t a2, uint64_t a3)
{
  char v4 = a1;
  if (a2)
  {
    swift_errorRetain();
    if (qword_1016371E0 != -1) {
      swift_once();
    }
    uint64_t v5 = type metadata accessor for Logger();
    sub_100010324(v5, (uint64_t)qword_10170EEF8);
    swift_errorRetain();
    swift_retain();
    swift_errorRetain();
    swift_retain();
    uint64_t v6 = Logger.logObject.getter();
    os_log_type_t v7 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v6, v7))
    {
      uint64_t v8 = swift_slowAlloc();
      id v9 = (void *)swift_slowAlloc();
      uint64_t v72 = swift_slowAlloc();
      *(_DWORD *)uint64_t v8 = 136315394;
      unint64_t v76 = 0xE100000000000000;
      uint64_t v77 = v72;
      type metadata accessor for TheftDeterrenceStateManager();
      sub_100F3351C(&qword_101664508, v10, (void (*)(uint64_t))type metadata accessor for TheftDeterrenceStateManager);
      swift_retain();
      v11._countAndFlagsBits = CustomStringConvertible.typeDescription.getter();
      String.append(_:)(v11);
      swift_bridgeObjectRelease();
      v12._countAndFlagsBits = 32;
      v12._object = (void *)0xE100000000000000;
      String.append(_:)(v12);
      v13._countAndFlagsBits = CustomStringConvertible<>.addressDescription.getter();
      String.append(_:)(v13);
      swift_bridgeObjectRelease();
      v14._countAndFlagsBits = 62;
      v14._object = (void *)0xE100000000000000;
      String.append(_:)(v14);
      swift_release();
      sub_1008FA0F0(60, 0xE100000000000000, &v77);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_release_n();
      swift_bridgeObjectRelease();
      *(_WORD *)(v8 + 12) = 2112;
      uint64_t v75 = _convertErrorToNSError(_:)();
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *id v9 = v75;
      swift_errorRelease();
      swift_errorRelease();
      _os_log_impl((void *)&_mh_execute_header, v6, v7, "%s: startLPEMConfigSession error: %@", (uint8_t *)v8, 0x16u);
      sub_10000588C((uint64_t *)&unk_101638EA0);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      swift_errorRelease();
    }
    else
    {
      swift_errorRelease();
      swift_release_n();
      swift_errorRelease();
      swift_errorRelease();
    }
  }
  else if (a1)
  {
    uint64_t v15 = qword_1016371E0;
    id v16 = a1;
    if (v15 != -1) {
      swift_once();
    }
    uint64_t v17 = type metadata accessor for Logger();
    sub_100010324(v17, (uint64_t)qword_10170EEF8);
    swift_retain_n();
    uint64_t v18 = Logger.logObject.getter();
    os_log_type_t v19 = static os_log_type_t.default.getter();
    uint64_t v73 = v16;
    uint64_t v74 = v4;
    if (os_log_type_enabled(v18, v19))
    {
      uint64_t v20 = (uint8_t *)swift_slowAlloc();
      uint64_t v68 = swift_slowAlloc();
      *(_DWORD *)uint64_t v20 = 136315138;
      unint64_t v76 = 0xE100000000000000;
      uint64_t v77 = v68;
      type metadata accessor for TheftDeterrenceStateManager();
      sub_100F3351C(&qword_101664508, v21, (void (*)(uint64_t))type metadata accessor for TheftDeterrenceStateManager);
      swift_retain();
      v22._countAndFlagsBits = CustomStringConvertible.typeDescription.getter();
      String.append(_:)(v22);
      swift_bridgeObjectRelease();
      v23._countAndFlagsBits = 32;
      v23._object = (void *)0xE100000000000000;
      String.append(_:)(v23);
      v24._countAndFlagsBits = CustomStringConvertible<>.addressDescription.getter();
      String.append(_:)(v24);
      swift_bridgeObjectRelease();
      v25._countAndFlagsBits = 62;
      v25._object = (void *)0xE100000000000000;
      String.append(_:)(v25);
      swift_release();
      uint64_t v75 = sub_1008FA0F0(60, 0xE100000000000000, &v77);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_release_n();
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v18, v19, "%s: Start LPEMConfigSession", v20, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {

      swift_release_n();
    }
    swift_retain_n();
    unint64_t v36 = Logger.logObject.getter();
    os_log_type_t v37 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v36, v37))
    {
      uint64_t v38 = (uint8_t *)swift_slowAlloc();
      uint64_t v69 = swift_slowAlloc();
      *(_DWORD *)uint64_t v38 = 136315138;
      unint64_t v76 = 0xE100000000000000;
      uint64_t v77 = v69;
      type metadata accessor for TheftDeterrenceStateManager();
      sub_100F3351C(&qword_101664508, v39, (void (*)(uint64_t))type metadata accessor for TheftDeterrenceStateManager);
      swift_retain();
      v40._countAndFlagsBits = CustomStringConvertible.typeDescription.getter();
      String.append(_:)(v40);
      swift_bridgeObjectRelease();
      v41._countAndFlagsBits = 32;
      v41._object = (void *)0xE100000000000000;
      String.append(_:)(v41);
      v42._countAndFlagsBits = CustomStringConvertible<>.addressDescription.getter();
      String.append(_:)(v42);
      swift_bridgeObjectRelease();
      v43._countAndFlagsBits = 62;
      v43._object = (void *)0xE100000000000000;
      String.append(_:)(v43);
      swift_release();
      uint64_t v75 = sub_1008FA0F0(60, 0xE100000000000000, &v77);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_release_n();
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v36, v37, "%s: configureHardwareForLPEM()", v38, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {

      swift_release_n();
    }
    Swift::String v44 = v73;
    uint64_t v75 = 0;
    unsigned int v45 = [v73 configureHardwareForLPEMWithError:&v75];
    id v46 = (id)v75;
    if (v45)
    {
      if (*(void *)(a3 + 56))
      {
        swift_retain_n();
        id v47 = v46;
        swift_retain();
        uint64_t v48 = Logger.logObject.getter();
        os_log_type_t v49 = static os_log_type_t.default.getter();
        if (os_log_type_enabled(v48, v49))
        {
          Swift::String v50 = (uint8_t *)swift_slowAlloc();
          uint64_t v70 = swift_slowAlloc();
          *(_DWORD *)Swift::String v50 = 136315138;
          uint64_t v75 = 60;
          unint64_t v76 = 0xE100000000000000;
          uint64_t v77 = v70;
          type metadata accessor for TheftDeterrenceStateManager();
          sub_100F3351C(&qword_101664508, v51, (void (*)(uint64_t))type metadata accessor for TheftDeterrenceStateManager);
          swift_retain();
          v52._countAndFlagsBits = CustomStringConvertible.typeDescription.getter();
          String.append(_:)(v52);
          Swift::String v44 = v73;
          swift_bridgeObjectRelease();
          v53._countAndFlagsBits = 32;
          v53._object = (void *)0xE100000000000000;
          String.append(_:)(v53);
          v54._countAndFlagsBits = CustomStringConvertible<>.addressDescription.getter();
          String.append(_:)(v54);
          swift_bridgeObjectRelease();
          v55._countAndFlagsBits = 62;
          v55._object = (void *)0xE100000000000000;
          String.append(_:)(v55);
          swift_release();
          uint64_t v75 = sub_1008FA0F0(v75, v76, &v77);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_release_n();
          swift_bridgeObjectRelease();
          _os_log_impl((void *)&_mh_execute_header, v48, v49, "%s: Triggering state re-evaluation.", v50, 0xCu);
          swift_arrayDestroy();
          swift_slowDealloc();
          swift_slowDealloc();
        }
        else
        {

          swift_release_n();
        }
        CurrentValueSubject.value.getter();
        LOBYTE(v77) = v75;
        CurrentValueSubject.send(_:)();

        swift_release();
      }
      else
      {
        id v67 = (id)v75;
      }
    }
    else
    {
      id v56 = (id)v75;
      _convertNSErrorToError(_:)();

      swift_willThrow();
      swift_retain();
      swift_errorRetain();
      swift_retain();
      swift_errorRetain();
      uint64_t v57 = Logger.logObject.getter();
      os_log_type_t v58 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v57, v58))
      {
        uint64_t v59 = swift_slowAlloc();
        uint64_t v60 = (void *)swift_slowAlloc();
        uint64_t v71 = swift_slowAlloc();
        *(_DWORD *)uint64_t v59 = 136315394;
        uint64_t v75 = 60;
        unint64_t v76 = 0xE100000000000000;
        uint64_t v77 = v71;
        type metadata accessor for TheftDeterrenceStateManager();
        sub_100F3351C(&qword_101664508, v61, (void (*)(uint64_t))type metadata accessor for TheftDeterrenceStateManager);
        swift_retain();
        v62._countAndFlagsBits = CustomStringConvertible.typeDescription.getter();
        String.append(_:)(v62);
        swift_bridgeObjectRelease();
        v63._countAndFlagsBits = 32;
        v63._object = (void *)0xE100000000000000;
        String.append(_:)(v63);
        v64._countAndFlagsBits = CustomStringConvertible<>.addressDescription.getter();
        String.append(_:)(v64);
        swift_bridgeObjectRelease();
        v65._countAndFlagsBits = 62;
        v65._object = (void *)0xE100000000000000;
        String.append(_:)(v65);
        swift_release();
        uint64_t v75 = sub_1008FA0F0(v75, v76, &v77);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_release_n();
        swift_bridgeObjectRelease();
        *(_WORD *)(v59 + 12) = 2112;
        uint64_t v66 = _convertErrorToNSError(_:)();
        uint64_t v75 = v66;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        *uint64_t v60 = v66;
        char v4 = v74;
        swift_errorRelease();
        swift_errorRelease();
        _os_log_impl((void *)&_mh_execute_header, v57, v58, "%s: configureHardwareForLPEM error: %@", (uint8_t *)v59, 0x16u);
        sub_10000588C((uint64_t *)&unk_101638EA0);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();

        swift_errorRelease();
      }
      else
      {

        swift_errorRelease();
        swift_release_n();
        swift_errorRelease();
        swift_errorRelease();
      }
    }
  }
  else
  {
    if (qword_1016371E0 != -1) {
      swift_once();
    }
    uint64_t v26 = type metadata accessor for Logger();
    sub_100010324(v26, (uint64_t)qword_10170EEF8);
    swift_retain_n();
    BOOL v27 = Logger.logObject.getter();
    os_log_type_t v28 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v27, v28))
    {
      uint64_t v29 = (uint8_t *)swift_slowAlloc();
      uint64_t v30 = swift_slowAlloc();
      *(_DWORD *)uint64_t v29 = 136315138;
      unint64_t v76 = 0xE100000000000000;
      uint64_t v77 = v30;
      type metadata accessor for TheftDeterrenceStateManager();
      sub_100F3351C(&qword_101664508, v31, (void (*)(uint64_t))type metadata accessor for TheftDeterrenceStateManager);
      swift_retain();
      v32._countAndFlagsBits = CustomStringConvertible.typeDescription.getter();
      String.append(_:)(v32);
      swift_bridgeObjectRelease();
      v33._countAndFlagsBits = 32;
      v33._object = (void *)0xE100000000000000;
      String.append(_:)(v33);
      v34._countAndFlagsBits = CustomStringConvertible<>.addressDescription.getter();
      String.append(_:)(v34);
      swift_bridgeObjectRelease();
      v35._countAndFlagsBits = 62;
      v35._object = (void *)0xE100000000000000;
      String.append(_:)(v35);
      swift_release();
      uint64_t v75 = sub_1008FA0F0(60, 0xE100000000000000, &v77);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_release_n();
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v27, v28, "%s: Missing NFLPEMConfigSession!", v29, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {

      swift_release_n();
    }
    char v4 = 0;
  }
  sub_100F31930(v4);
}

void sub_100F31930(void *a1)
{
  if (a1) {
    [a1 endSession];
  }
  if (qword_1016371E0 != -1) {
    swift_once();
  }
  uint64_t v1 = type metadata accessor for Logger();
  sub_100010324(v1, (uint64_t)qword_10170EEF8);
  swift_retain_n();
  char v2 = Logger.logObject.getter();
  os_log_type_t v3 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v2, v3))
  {
    char v4 = (uint8_t *)swift_slowAlloc();
    uint64_t v5 = swift_slowAlloc();
    *(_DWORD *)char v4 = 136315138;
    uint64_t v11 = v5;
    type metadata accessor for TheftDeterrenceStateManager();
    sub_100F3351C(&qword_101664508, v6, (void (*)(uint64_t))type metadata accessor for TheftDeterrenceStateManager);
    swift_retain();
    v7._countAndFlagsBits = CustomStringConvertible.typeDescription.getter();
    String.append(_:)(v7);
    swift_bridgeObjectRelease();
    v8._countAndFlagsBits = 32;
    v8._object = (void *)0xE100000000000000;
    String.append(_:)(v8);
    v9._countAndFlagsBits = CustomStringConvertible<>.addressDescription.getter();
    String.append(_:)(v9);
    swift_bridgeObjectRelease();
    v10._countAndFlagsBits = 62;
    v10._object = (void *)0xE100000000000000;
    String.append(_:)(v10);
    swift_release();
    sub_1008FA0F0(60, 0xE100000000000000, &v11);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release_n();
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v2, v3, "%s: Stop LPEMConfigSession", v4, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {

    swift_release_n();
  }
}

uint64_t sub_100F31BB4()
{
  return sub_100F31C64();
}

void sub_100F31BD8(uint64_t a1, void *a2)
{
  os_log_type_t v3 = *(void (**)(void))(a1 + 32);
  swift_retain();
  id v4 = a2;
  v3();
  swift_release();
}

uint64_t sub_100F31C40()
{
  return sub_100F31C64();
}

uint64_t sub_100F31C64()
{
  uint64_t My = type metadata accessor for Feature.FindMy();
  uint64_t v9 = My;
  uint64_t v1 = sub_100F3351C((unint64_t *)&qword_101653E00, 255, (void (*)(uint64_t))&type metadata accessor for Feature.FindMy);
  uint64_t v10 = v1;
  char v2 = sub_10001D958(v8);
  os_log_type_t v3 = *(void (**)(uint64_t *, void, uint64_t))(*(void *)(My - 8) + 104);
  v3(v2, enum case for Feature.FindMy.baLPEM(_:), My);
  char v4 = isFeatureEnabled(_:)();
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)v8);
  if ((v4 & 1) != 0
    || (uint64_t v9 = My,
        uint64_t v10 = v1,
        uint64_t v5 = sub_10001D958(v8),
        v3(v5, enum case for Feature.FindMy.baPowerOff(_:), My),
        char v6 = isFeatureEnabled(_:)(),
        uint64_t result = _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)v8),
        (v6 & 1) != 0))
  {
    type metadata accessor for Transaction();
    return static Transaction.named<A>(_:with:)();
  }
  return result;
}

void sub_100F31DD4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v9 = self;
  uint64_t v10 = swift_allocObject();
  *(void *)(v10 + 16) = a2;
  *(void *)(v10 + 24) = a1;
  v12[4] = a4;
  v12[5] = v10;
  v12[0] = _NSConcreteStackBlock;
  v12[1] = 1107296256;
  void v12[2] = sub_100F31BD8;
  v12[3] = a5;
  uint64_t v11 = _Block_copy(v12);
  swift_retain();
  swift_retain();
  swift_release();
  [v9 sharedHardwareManager:v11];
  _Block_release(v11);
}

uint64_t sub_100F31ED4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v21 = a5;
  uint64_t v22 = a6;
  uint64_t v8 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v24 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  uint64_t v10 = (char *)&v20 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v23 = type metadata accessor for DispatchQoS();
  uint64_t v11 = *(void *)(v23 - 8);
  __chkstk_darwin(v23);
  Swift::String v13 = (char *)&v20 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  Swift::String v14 = [self sharedHardwareManager];
  uint64_t v26 = v14;
  sub_10001D4B0(0, &qword_101664500);
  deoptionalize<A>(_:)();

  uint64_t v15 = (void *)aBlock[0];
  uint64_t v20 = *(void *)(a2 + 104);
  id v16 = (void *)swift_allocObject();
  void v16[2] = a3;
  v16[3] = a2;
  v16[4] = v15;
  aBlock[4] = v21;
  void aBlock[5] = v16;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  void aBlock[2] = sub_1004B5480;
  aBlock[3] = v22;
  uint64_t v17 = _Block_copy(aBlock);
  swift_retain();
  swift_retain();
  id v18 = v15;
  static DispatchQoS.unspecified.getter();
  uint64_t v26 = _swiftEmptyArrayStorage;
  sub_100F3351C((unint64_t *)&qword_10163B7E0, 255, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
  sub_10000588C((uint64_t *)&unk_10163F350);
  sub_100062734((unint64_t *)&qword_10163B7F0, (uint64_t *)&unk_10163F350);
  dispatch thunk of SetAlgebra.init<A>(_:)();
  OS_dispatch_queue.async(group:qos:flags:execute:)();
  _Block_release(v17);

  (*(void (**)(char *, uint64_t))(v24 + 8))(v10, v8);
  (*(void (**)(char *, uint64_t))(v11 + 8))(v13, v23);
  return swift_release();
}

uint64_t sub_100F32204(uint64_t a1, uint64_t a2, void *a3, const char *a4, SEL *a5)
{
  Transaction.capture()();
  if (qword_1016371E0 != -1) {
    swift_once();
  }
  uint64_t v8 = type metadata accessor for Logger();
  sub_100010324(v8, (uint64_t)qword_10170EEF8);
  swift_retain_n();
  uint64_t v9 = Logger.logObject.getter();
  os_log_type_t v10 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v9, v10))
  {
    uint64_t v11 = (uint8_t *)swift_slowAlloc();
    uint64_t v18 = swift_slowAlloc();
    *(_DWORD *)uint64_t v11 = 136315138;
    uint64_t v19 = v18;
    type metadata accessor for TheftDeterrenceStateManager();
    sub_100F3351C(&qword_101664508, v12, (void (*)(uint64_t))type metadata accessor for TheftDeterrenceStateManager);
    swift_retain();
    v13._countAndFlagsBits = CustomStringConvertible.typeDescription.getter();
    String.append(_:)(v13);
    swift_bridgeObjectRelease();
    v14._countAndFlagsBits = 32;
    v14._object = (void *)0xE100000000000000;
    String.append(_:)(v14);
    v15._countAndFlagsBits = CustomStringConvertible<>.addressDescription.getter();
    String.append(_:)(v15);
    swift_bridgeObjectRelease();
    v16._countAndFlagsBits = 62;
    v16._object = (void *)0xE100000000000000;
    String.append(_:)(v16);
    swift_release();
    sub_1008FA0F0(60, 0xE100000000000000, &v19);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release_n();
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v9, v10, a4, v11, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {

    swift_release_n();
  }

  return PassthroughSubject.send(_:)();
}

void sub_100F324D4(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = swift_allocObject();
  *(void *)(v4 + 16) = a1;
  *(void *)(v4 + 24) = a2;
  uint64_t v5 = self;
  swift_retain();
  id v6 = [v5 sharedInstance];
  uint64_t v7 = swift_allocObject();
  *(void *)(v7 + 16) = sub_1003B4058;
  *(void *)(v7 + 24) = v4;
  v9[4] = sub_100F33484;
  v9[5] = v7;
  v9[0] = _NSConcreteStackBlock;
  v9[1] = 1107296256;
  void v9[2] = sub_100F32684;
  _DWORD v9[3] = &unk_1015FDBF8;
  uint64_t v8 = _Block_copy(v9);
  swift_release();
  [v6 activationLockInfoFromDeviceWithCompletion:v8];
  _Block_release(v8);
}

uint64_t sub_100F3260C(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  if (!a2) {
    return a3();
  }
  swift_errorRetain();
  ((void (*)(uint64_t, uint64_t))a3)(a2, 1);

  return swift_errorRelease();
}

void sub_100F32684(uint64_t a1, void *a2, void *a3)
{
  uint64_t v5 = *(void (**)(id, void *))(a1 + 32);
  swift_retain();
  id v7 = a2;
  id v6 = a3;
  v5(v7, a3);
  swift_release();
}

void sub_100F32710()
{
  uint64_t v1 = v0;
  if (*(void *)(v0 + 96))
  {
    swift_retain();
    DispatchTimer.cancel()();
    swift_release();
    *(void *)(v0 + 96) = 0;
    swift_release();
  }
  char v2 = *(void **)(v0 + 88);
  swift_allocObject();
  swift_weakInit();
  type metadata accessor for DispatchTimer();
  swift_allocObject();
  id v3 = v2;
  *(void *)(v1 + 96) = DispatchTimer.init(deadline:repeating:leeway:queue:block:)();
  swift_release();
  if (*(void *)(v1 + 96))
  {
    swift_retain();
    DispatchTimer.resume()();
    swift_release();
  }
  if (qword_1016371E0 != -1) {
    swift_once();
  }
  uint64_t v4 = type metadata accessor for Logger();
  sub_100010324(v4, (uint64_t)qword_10170EEF8);
  swift_retain_n();
  uint64_t v5 = Logger.logObject.getter();
  os_log_type_t v6 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v5, v6))
  {
    id v7 = (uint8_t *)swift_slowAlloc();
    uint64_t v10 = swift_slowAlloc();
    *(_DWORD *)id v7 = 136315138;
    swift_retain();
    sub_10000588C(&qword_1016644F0);
    uint64_t v8 = String.init<A>(describing:)();
    sub_1008FA0F0(v8, v9, &v10);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release_n();
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v5, v6, "Scheduled a retryTimer to fetch offlineFindingInfo from nvram %s", v7, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {

    swift_release_n();
  }
}

uint64_t sub_100F329A8()
{
  uint64_t v0 = sub_10000588C(&qword_101656600);
  uint64_t v1 = __chkstk_darwin(v0);
  id v3 = &v23[-((v2 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __chkstk_darwin(v1);
  uint64_t v5 = &v23[-v4];
  swift_beginAccess();
  uint64_t result = swift_weakLoadStrong();
  if (result)
  {
    sub_10104D4C0(v5);
    sub_100F33110((uint64_t)v5, (uint64_t)v3);
    int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    sub_10001DAB4((uint64_t)v5, &qword_101656600);
    if (EnumCaseMultiPayload != 1) {
      sub_10001DAB4((uint64_t)v3, &qword_101656600);
    }
    swift_release();
    if (qword_1016371E0 != -1) {
      swift_once();
    }
    uint64_t v8 = type metadata accessor for Logger();
    sub_100010324(v8, (uint64_t)qword_10170EEF8);
    swift_retain_n();
    unint64_t v9 = Logger.logObject.getter();
    os_log_type_t v10 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v9, v10))
    {
      uint64_t v11 = swift_slowAlloc();
      uint64_t v12 = swift_slowAlloc();
      v28[0] = v12;
      *(_DWORD *)uint64_t v11 = 136315650;
      swift_beginAccess();
      uint64_t Strong = swift_weakLoadStrong();
      uint64_t v25 = v12;
      if (Strong)
      {
        uint64_t v14 = *(void *)(Strong + 80);
        swift_retain();
        swift_release();
      }
      else
      {
        uint64_t v14 = 0;
      }
      int v24 = EnumCaseMultiPayload;
      uint64_t v27 = v14;
      sub_10000588C(&qword_1016644F8);
      uint64_t v15 = String.init<A>(describing:)();
      uint64_t v27 = sub_1008FA0F0(v15, v16, v28);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      char v17 = 2;
      swift_release_n();
      swift_bridgeObjectRelease();
      *(_WORD *)(v11 + 12) = 1024;
      LODWORD(v27) = EnumCaseMultiPayload != 1;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v11 + 18) = 2080;
      swift_beginAccess();
      uint64_t v18 = swift_weakLoadStrong();
      if (v18)
      {
        uint64_t v19 = *(void *)(v18 + 80);
        swift_retain();
        swift_release();
        if (v19)
        {
          CurrentValueSubject.value.getter();
          swift_release();
          char v17 = v26;
        }
      }
      int EnumCaseMultiPayload = v24;
      LOBYTE(v26) = v17;
      sub_10000588C(&qword_101649EA0);
      uint64_t v20 = String.init<A>(describing:)();
      uint64_t v26 = sub_1008FA0F0(v20, v21, v28);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_release_n();
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v9, v10, "Reloaded NVRAM state after retry timer. Subject %s. New state %{BOOL}d existing %s", (uint8_t *)v11, 0x1Cu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {

      swift_release_n();
    }
    swift_beginAccess();
    uint64_t result = swift_weakLoadStrong();
    if (result)
    {
      uint64_t v22 = *(void *)(result + 80);
      swift_retain();
      uint64_t result = swift_release();
      if (v22)
      {
        CurrentValueSubject.value.getter();
        if ((EnumCaseMultiPayload != 1) != v26)
        {
          LOBYTE(v26) = EnumCaseMultiPayload != 1;
          CurrentValueSubject.send(_:)();
        }
        return swift_release();
      }
    }
  }
  return result;
}

id *sub_100F32DF4()
{
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();

  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();

  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  return v0;
}

uint64_t sub_100F32E94()
{
  sub_100F32DF4();

  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for TheftDeterrenceStateManager()
{
  return self;
}

uint64_t sub_100F32EEC()
{
  type metadata accessor for TheftDeterrenceStateManager();
  v0._countAndFlagsBits = CustomStringConvertible.typeDescription.getter();
  String.append(_:)(v0);
  swift_bridgeObjectRelease();
  v1._countAndFlagsBits = 32;
  v1._object = (void *)0xE100000000000000;
  String.append(_:)(v1);
  v2._countAndFlagsBits = CustomStringConvertible<>.addressDescription.getter();
  String.append(_:)(v2);
  swift_bridgeObjectRelease();
  v3._countAndFlagsBits = 62;
  v3._object = (void *)0xE100000000000000;
  String.append(_:)(v3);
  return 60;
}

uint64_t sub_100F32FA8()
{
  swift_release();
  swift_release();

  return _swift_deallocObject(v0, 40, 7);
}

unint64_t sub_100F32FE8()
{
  if (qword_101637188 != -1) {
    swift_once();
  }
  uint64_t v0 = (void *)qword_10170EE68;
  id v1 = [self sharedInstance];
  unsigned int v2 = [v1 isInternalBuild];

  if (v2
    && (NSString v3 = String._bridgeToObjectiveC()(),
        unsigned __int8 v4 = [v0 BOOLForKey:v3],
        v3,
        (v4 & 1) != 0))
  {
    return 1;
  }
  else
  {
    return ((unint64_t)sub_100F2CA84() >> 1) & 1;
  }
}

uint64_t sub_100F330D0()
{
  swift_weakDestroy();

  return _swift_deallocObject(v0, 24, 7);
}

uint64_t sub_100F33108()
{
  return sub_100F329A8();
}

uint64_t sub_100F33110(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_10000588C(&qword_101656600);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

void sub_100F33178(uint64_t a1)
{
  sub_100F31DD4(a1, v1, (uint64_t)&unk_1015FD9D8, (uint64_t)sub_100F331BC, (uint64_t)&unk_1015FD9F0);
}

uint64_t sub_100F331BC(uint64_t a1)
{
  return sub_100F31ED4(a1, *(void *)(v1 + 16), *(void *)(v1 + 24), (uint64_t)&unk_1015FDA28, (uint64_t)sub_100F33218, (uint64_t)&unk_1015FDA40);
}

uint64_t sub_100F331FC(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_100F3320C()
{
  return swift_release();
}

uint64_t sub_100F33218()
{
  return sub_100F32204(*(void *)(v0 + 16), *(void *)(v0 + 24), *(void **)(v0 + 32), "%s: Disabling NFHeadlessModeFeatureFindMy", (SEL *)&selRef_disableLPEMFeature_);
}

void sub_100F3324C(uint64_t a1)
{
  sub_100F31DD4(a1, v1, (uint64_t)&unk_1015FDA78, (uint64_t)sub_100F33290, (uint64_t)&unk_1015FDA90);
}

uint64_t sub_100F33290(uint64_t a1)
{
  return sub_100F31ED4(a1, *(void *)(v1 + 16), *(void *)(v1 + 24), (uint64_t)&unk_1015FDAC8, (uint64_t)sub_100F332D4, (uint64_t)&unk_1015FDAE0);
}

uint64_t sub_100F332D4()
{
  return sub_100F32204(*(void *)(v0 + 16), *(void *)(v0 + 24), *(void **)(v0 + 32), "%s: Enabling NFHeadlessModeFeatureFindMy", (SEL *)&selRef_enableLPEMFeature_);
}

void sub_100F33308(void *a1, uint64_t a2)
{
  sub_100F30A08(a1, a2, v2);
}

const char *sub_100F33314()
{
  return "userHasAcknowledgedFindMy";
}

id sub_100F33320@<X0>(id *a1@<X0>, unsigned char *a2@<X8>)
{
  id result = [*a1 userHasAcknowledgedFindMy];
  *a2 = (_BYTE)result;
  return result;
}

id sub_100F33354(unsigned __int8 *a1, id *a2)
{
  return [*a2 setUserHasAcknowledgedFindMy:*a1];
}

uint64_t sub_100F33368()
{
  return CurrentValueSubject.send(_:)();
}

uint64_t sub_100F33394(uint64_t a1, char a2, char a3, char a4, char a5, char a6, char a7)
{
  return sub_100F304B8(a1, a2, a3, a4, a5, a6, a7);
}

uint64_t sub_100F3339C()
{
  swift_release();

  return _swift_deallocObject(v0, 32, 7);
}

uint64_t sub_100F333D4(uint64_t a1)
{
  return (*(uint64_t (**)(void, void, void, void, void, void, void))(v1 + 16))(*(void *)a1, *(unsigned __int8 *)(a1 + 8), *(unsigned __int8 *)(a1 + 9), *(unsigned __int8 *)(a1 + 10), *(unsigned __int8 *)(a1 + 11), *(unsigned __int8 *)(a1 + 12), *(unsigned __int8 *)(a1 + 13));
}

uint64_t sub_100F3341C()
{
  swift_release();
  swift_release();
  swift_release();
  swift_release();

  return _swift_deallocObject(v0, 48, 7);
}

uint64_t sub_100F3346C(uint64_t a1)
{
  return sub_100F2FC2C(a1, v1[2], v1[3], v1[4], v1[5]);
}

void sub_100F3347C(uint64_t a1)
{
}

uint64_t sub_100F33484(uint64_t a1, uint64_t a2)
{
  return sub_100F3260C(a1, a2, *(uint64_t (**)(void))(v2 + 16));
}

void sub_100F3348C()
{
  *(unsigned char *)(*(void *)(v0 + 16) + 152) = *(unsigned char *)(v0 + 24);
}

uint64_t sub_100F3349C()
{
  swift_release();
  swift_release();

  return _swift_deallocObject(v0, 64, 7);
}

void sub_100F334DC(uint64_t a1)
{
  sub_100F2E4C4(a1, *(void *)(v1 + 16), *(unsigned char *)(v1 + 24), *(void *)(v1 + 32), *(unsigned char *)(v1 + 40), *(unsigned char *)(v1 + 41), *(unsigned char *)(v1 + 42), *(void (**)(void))(v1 + 48));
}

uint64_t sub_100F3351C(unint64_t *a1, uint64_t a2, void (*a3)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a3(a2);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_100F33564()
{
  return sub_100F2DAB4();
}

uint64_t sub_100F3359C(void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v14 = a4;
  uint64_t v8 = sub_10000588C(&qword_101664698);
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  uint64_t v11 = (char *)&v13 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10001CD44(a1, a1[3]);
  sub_100F35238();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  uint64_t v15 = a2;
  char v17 = 0;
  sub_10000588C(&qword_10163BD60);
  sub_100904FC8((unint64_t *)&qword_101651F28);
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  if (!v4)
  {
    uint64_t v15 = a3;
    uint64_t v16 = v14;
    char v17 = 1;
    sub_100037BB4();
    KeyedEncodingContainer.encode<A>(_:forKey:)();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v9 + 8))(v11, v8);
}

uint64_t sub_100F33768(uint64_t a1)
{
  unint64_t v2 = sub_100F35238();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_100F337A4(uint64_t a1)
{
  unint64_t v2 = sub_100F35238();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_100F337E0@<X0>(void *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = sub_100F34FDC(a1);
  if (!v2)
  {
    *a2 = result;
    a2[1] = v5;
    a2[2] = v6;
  }
  return result;
}

uint64_t sub_100F33810(void *a1)
{
  return sub_100F3359C(a1, *v1, v1[1], v1[2]);
}

uint64_t sub_100F33830(char a1)
{
  uint64_t result = 0x646975756162;
  switch(a1)
  {
    case 1:
      uint64_t result = 1684628325;
      break;
    case 2:
      uint64_t result = 0x644970696863;
      break;
    case 3:
      uint64_t result = 0x754E6C6169726573;
      break;
    case 4:
      uint64_t result = 0x656C746974;
      break;
    case 5:
      uint64_t result = 1954047348;
      break;
    case 6:
      uint64_t result = 0x6C69616D65;
      break;
    case 7:
      uint64_t result = 0x72624E72656E776FLL;
      break;
    case 8:
      uint64_t result = 0x747865746E6F63;
      break;
    case 9:
      uint64_t result = 0x65646F4D74736F6CLL;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t sub_100F3395C(void *a1)
{
  uint64_t v3 = sub_10000588C(&qword_101664678);
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  uint64_t v6 = &v8[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)];
  sub_10001CD44(a1, a1[3]);
  sub_100F34F40();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  v8[15] = 0;
  type metadata accessor for UUID();
  sub_100F34F94(&qword_10163B040, (void (*)(uint64_t))&type metadata accessor for UUID);
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  if (!v1)
  {
    type metadata accessor for LostModeRequestContent();
    v8[14] = 1;
    KeyedEncodingContainer.encode(_:forKey:)();
    v8[13] = 2;
    KeyedEncodingContainer.encode(_:forKey:)();
    v8[12] = 3;
    KeyedEncodingContainer.encode(_:forKey:)();
    v8[11] = 4;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
    v8[10] = 5;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
    v8[9] = 6;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
    v8[8] = 7;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
    v8[7] = 8;
    KeyedEncodingContainer.encode(_:forKey:)();
    v8[6] = 9;
    KeyedEncodingContainer.encode(_:forKey:)();
  }
  return (*(uint64_t (**)(unsigned char *, uint64_t))(v4 + 8))(v6, v3);
}

uint64_t sub_100F33C94()
{
  return sub_100F33830(*v0);
}

uint64_t sub_100F33C9C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_100F356A4(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_100F33CC4(uint64_t a1)
{
  unint64_t v2 = sub_100F34F40();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_100F33D00(uint64_t a1)
{
  unint64_t v2 = sub_100F34F40();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_100F33D3C(void *a1)
{
  return sub_100F3395C(a1);
}

void sub_100F33D54(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, unsigned __int8 a16)
{
  uint64_t v83 = a6;
  uint64_t v84 = a7;
  uint64_t v81 = a4;
  uint64_t v82 = a5;
  uint64_t v79 = a2;
  uint64_t v80 = a3;
  uint64_t v85 = a1;
  char v17 = (int *)type metadata accessor for LostModeRequestContent();
  uint64_t v18 = __chkstk_darwin(v17);
  uint64_t v20 = (char *)v70 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v18);
  uint64_t v22 = (char *)v70 - v21;
  uint64_t v23 = type metadata accessor for Date();
  uint64_t v24 = *(void *)(v23 - 8);
  __chkstk_darwin(v23);
  uint64_t v26 = (char *)v70 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  unint64_t v27 = sub_10092D8F8((uint64_t)_swiftEmptyArrayStorage);
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v86 = v27;
  sub_10016C0FC(1702195828, 0xE400000000000000, 0xD00000000000001BLL, 0x80000001013F64C0, isUniquelyReferenced_nonNull_native);
  uint64_t v29 = v86;
  swift_bridgeObjectRelease();
  id v30 = [self currentDevice];
  if (v30)
  {
    uint64_t v31 = v30;
    uint64_t v78 = a8;
    v70[1] = v20;
    id v32 = [v30 serverFriendlyDescription];

    if (v32)
    {
      int v77 = a16;
      uint64_t v75 = a14;
      uint64_t v76 = a15;
      uint64_t v73 = a12;
      uint64_t v74 = a13;
      uint64_t v71 = a10;
      uint64_t v72 = a11;
      uint64_t v33 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      uint64_t v35 = v34;

      char v36 = swift_isUniquelyReferenced_nonNull_native();
      uint64_t v86 = v29;
      sub_10016C0FC(v33, v35, 0xD000000000000011, 0x80000001013F64E0, v36);
      uint64_t v37 = v86;
      swift_bridgeObjectRelease();
      Date.init()();
      uint64_t v38 = Date.epoch.getter();
      (*(void (**)(char *, uint64_t))(v24 + 8))(v26, v23);
      uint64_t v86 = v38;
      uint64_t v39 = dispatch thunk of CustomStringConvertible.description.getter();
      uint64_t v41 = v40;
      char v42 = swift_isUniquelyReferenced_nonNull_native();
      uint64_t v86 = v37;
      sub_10016C0FC(v39, v41, 0xD000000000000015, 0x80000001013F6500, v42);
      uint64_t v43 = v86;
      swift_bridgeObjectRelease();
      uint64_t v86 = 1;
      uint64_t v44 = dispatch thunk of CustomStringConvertible.description.getter();
      uint64_t v46 = v45;
      char v47 = swift_isUniquelyReferenced_nonNull_native();
      uint64_t v86 = v43;
      sub_10016C0FC(v44, v46, 0xD000000000000013, 0x80000001013F6520, v47);
      uint64_t v48 = v86;
      swift_bridgeObjectRelease();
      id v49 = sub_100903ACC();
      uint64_t v51 = v50;
      char v52 = swift_isUniquelyReferenced_nonNull_native();
      uint64_t v86 = v48;
      sub_10016C0FC((uint64_t)v49, v51, 0x6567412D72657355, 0xEA0000000000746ELL, v52);
      swift_bridgeObjectRelease();
      uint64_t v53 = type metadata accessor for UUID();
      uint64_t v54 = *(void *)(v53 - 8);
      uint64_t v55 = v85;
      (*(void (**)(char *, uint64_t, uint64_t))(v54 + 16))(v22, v85, v53);
      id v56 = &v22[v17[5]];
      uint64_t v57 = v80;
      *(void *)id v56 = v79;
      *((void *)v56 + 1) = v57;
      os_log_type_t v58 = &v22[v17[6]];
      uint64_t v59 = v82;
      *(void *)os_log_type_t v58 = v81;
      *((void *)v58 + 1) = v59;
      uint64_t v60 = &v22[v17[7]];
      uint64_t v61 = v84;
      *(void *)uint64_t v60 = v83;
      *((void *)v60 + 1) = v61;
      Swift::String v62 = &v22[v17[8]];
      *(void *)Swift::String v62 = v78;
      *((void *)v62 + 1) = a9;
      Swift::String v63 = &v22[v17[9]];
      uint64_t v64 = v72;
      *(void *)Swift::String v63 = v71;
      *((void *)v63 + 1) = v64;
      Swift::String v65 = &v22[v17[10]];
      uint64_t v66 = v74;
      *(void *)Swift::String v65 = v73;
      *((void *)v65 + 1) = v66;
      id v67 = &v22[v17[11]];
      uint64_t v68 = v76;
      *(void *)id v67 = v75;
      *((void *)v67 + 1) = v68;
      uint64_t v69 = &v22[v17[12]];
      *(void *)uint64_t v69 = 0x746C7561666564;
      *((void *)v69 + 1) = 0xE700000000000000;
      v22[v17[13]] = v77 & 1;
      type metadata accessor for JSONEncoder();
      swift_allocObject();
      JSONEncoder.init()();
      sub_100F34F94(&qword_1016645C0, (void (*)(uint64_t))type metadata accessor for LostModeRequestContent);
      dispatch thunk of JSONEncoder.encode<A>(_:)();
      swift_release();
      (*(void (**)(uint64_t, uint64_t))(v54 + 8))(v55, v53);
      sub_100F34478((uint64_t)v22);
      return;
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
}

uint64_t type metadata accessor for LostModeRequestContent()
{
  uint64_t result = qword_101664620;
  if (!qword_101664620) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t sub_100F34414(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for LostModeRequestContent();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_100F34478(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for LostModeRequestContent();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

void *sub_100F344D4(void *a1, void *a2, int *a3)
{
  int v5 = *(_DWORD *)(*((void *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v40 = *a2;
    *a1 = *a2;
    a1 = (void *)(v40 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v7 = type metadata accessor for UUID();
    (*(void (**)(void *, void *, uint64_t))(*(void *)(v7 - 8) + 16))(a1, a2, v7);
    uint64_t v8 = a3[5];
    uint64_t v9 = a3[6];
    uint64_t v10 = (void *)((char *)a1 + v8);
    uint64_t v11 = (void *)((char *)a2 + v8);
    uint64_t v12 = v11[1];
    *uint64_t v10 = *v11;
    v10[1] = v12;
    uint64_t v13 = (void *)((char *)a1 + v9);
    uint64_t v14 = (void *)((char *)a2 + v9);
    uint64_t v15 = v14[1];
    *uint64_t v13 = *v14;
    v13[1] = v15;
    uint64_t v16 = a3[7];
    uint64_t v17 = a3[8];
    uint64_t v18 = (void *)((char *)a1 + v16);
    uint64_t v19 = (void *)((char *)a2 + v16);
    uint64_t v20 = v19[1];
    *uint64_t v18 = *v19;
    v18[1] = v20;
    uint64_t v21 = (void *)((char *)a1 + v17);
    uint64_t v22 = (void *)((char *)a2 + v17);
    uint64_t v23 = v22[1];
    *uint64_t v21 = *v22;
    v21[1] = v23;
    uint64_t v24 = a3[9];
    uint64_t v25 = a3[10];
    uint64_t v26 = (void *)((char *)a1 + v24);
    unint64_t v27 = (void *)((char *)a2 + v24);
    uint64_t v28 = v27[1];
    *uint64_t v26 = *v27;
    v26[1] = v28;
    uint64_t v29 = (void *)((char *)a1 + v25);
    id v30 = (void *)((char *)a2 + v25);
    uint64_t v31 = v30[1];
    *uint64_t v29 = *v30;
    v29[1] = v31;
    uint64_t v32 = a3[11];
    uint64_t v33 = a3[12];
    uint64_t v34 = (void *)((char *)a1 + v32);
    uint64_t v35 = (void *)((char *)a2 + v32);
    uint64_t v36 = v35[1];
    *uint64_t v34 = *v35;
    v34[1] = v36;
    uint64_t v37 = (void *)((char *)a1 + v33);
    uint64_t v38 = (void *)((char *)a2 + v33);
    uint64_t v39 = v38[1];
    void *v37 = *v38;
    v37[1] = v39;
    *((unsigned char *)a1 + a3[13]) = *((unsigned char *)a2 + a3[13]);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  return a1;
}

uint64_t sub_100F34684(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return swift_bridgeObjectRelease();
}

uint64_t sub_100F3476C(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 16))(a1, a2, v6);
  uint64_t v7 = a3[5];
  uint64_t v8 = a3[6];
  uint64_t v9 = (void *)(a1 + v7);
  uint64_t v10 = (void *)(a2 + v7);
  uint64_t v11 = v10[1];
  *uint64_t v9 = *v10;
  v9[1] = v11;
  uint64_t v12 = (void *)(a1 + v8);
  uint64_t v13 = (void *)(a2 + v8);
  uint64_t v14 = v13[1];
  *uint64_t v12 = *v13;
  v12[1] = v14;
  uint64_t v15 = a3[7];
  uint64_t v16 = a3[8];
  uint64_t v17 = (void *)(a1 + v15);
  uint64_t v18 = (void *)(a2 + v15);
  uint64_t v19 = v18[1];
  void *v17 = *v18;
  v17[1] = v19;
  uint64_t v20 = (void *)(a1 + v16);
  uint64_t v21 = (void *)(a2 + v16);
  uint64_t v22 = v21[1];
  *uint64_t v20 = *v21;
  v20[1] = v22;
  uint64_t v23 = a3[9];
  uint64_t v24 = a3[10];
  uint64_t v25 = (void *)(a1 + v23);
  uint64_t v26 = (void *)(a2 + v23);
  uint64_t v27 = v26[1];
  void *v25 = *v26;
  v25[1] = v27;
  uint64_t v28 = (void *)(a1 + v24);
  uint64_t v29 = (void *)(a2 + v24);
  uint64_t v30 = v29[1];
  void *v28 = *v29;
  v28[1] = v30;
  uint64_t v31 = a3[11];
  uint64_t v32 = a3[12];
  uint64_t v33 = (void *)(a1 + v31);
  uint64_t v34 = (void *)(a2 + v31);
  uint64_t v35 = v34[1];
  *uint64_t v33 = *v34;
  v33[1] = v35;
  uint64_t v36 = (void *)(a1 + v32);
  uint64_t v37 = (void *)(a2 + v32);
  uint64_t v38 = v37[1];
  *uint64_t v36 = *v37;
  v36[1] = v38;
  *(unsigned char *)(a1 + a3[13]) = *(unsigned char *)(a2 + a3[13]);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t sub_100F348CC(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 24))(a1, a2, v6);
  uint64_t v7 = a3[5];
  uint64_t v8 = (void *)(a1 + v7);
  uint64_t v9 = (void *)(a2 + v7);
  *uint64_t v8 = *v9;
  v8[1] = v9[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v10 = a3[6];
  uint64_t v11 = (void *)(a1 + v10);
  uint64_t v12 = (void *)(a2 + v10);
  void *v11 = *v12;
  v11[1] = v12[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v13 = a3[7];
  uint64_t v14 = (void *)(a1 + v13);
  uint64_t v15 = (void *)(a2 + v13);
  *uint64_t v14 = *v15;
  v14[1] = v15[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v16 = a3[8];
  uint64_t v17 = (void *)(a1 + v16);
  uint64_t v18 = (void *)(a2 + v16);
  void *v17 = *v18;
  v17[1] = v18[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v19 = a3[9];
  uint64_t v20 = (void *)(a1 + v19);
  uint64_t v21 = (void *)(a2 + v19);
  *uint64_t v20 = *v21;
  v20[1] = v21[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v22 = a3[10];
  uint64_t v23 = (void *)(a1 + v22);
  uint64_t v24 = (void *)(a2 + v22);
  *uint64_t v23 = *v24;
  v23[1] = v24[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v25 = a3[11];
  uint64_t v26 = (void *)(a1 + v25);
  uint64_t v27 = (void *)(a2 + v25);
  *uint64_t v26 = *v27;
  v26[1] = v27[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v28 = a3[12];
  uint64_t v29 = (void *)(a1 + v28);
  uint64_t v30 = (void *)(a2 + v28);
  *uint64_t v29 = *v30;
  v29[1] = v30[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + a3[13]) = *(unsigned char *)(a2 + a3[13]);
  return a1;
}

uint64_t sub_100F34AA8(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 32))(a1, a2, v6);
  uint64_t v7 = a3[6];
  *(_OWORD *)(a1 + a3[5]) = *(_OWORD *)(a2 + a3[5]);
  *(_OWORD *)(a1 + v7) = *(_OWORD *)(a2 + v7);
  uint64_t v8 = a3[8];
  *(_OWORD *)(a1 + a3[7]) = *(_OWORD *)(a2 + a3[7]);
  *(_OWORD *)(a1 + v8) = *(_OWORD *)(a2 + v8);
  uint64_t v9 = a3[10];
  *(_OWORD *)(a1 + a3[9]) = *(_OWORD *)(a2 + a3[9]);
  *(_OWORD *)(a1 + v9) = *(_OWORD *)(a2 + v9);
  uint64_t v10 = a3[12];
  *(_OWORD *)(a1 + a3[11]) = *(_OWORD *)(a2 + a3[11]);
  *(_OWORD *)(a1 + v10) = *(_OWORD *)(a2 + v10);
  *(unsigned char *)(a1 + a3[13]) = *(unsigned char *)(a2 + a3[13]);
  return a1;
}

uint64_t sub_100F34B74(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 40))(a1, a2, v6);
  uint64_t v7 = a3[5];
  uint64_t v8 = (void *)(a1 + v7);
  uint64_t v9 = (uint64_t *)(a2 + v7);
  uint64_t v11 = *v9;
  uint64_t v10 = v9[1];
  *uint64_t v8 = v11;
  v8[1] = v10;
  swift_bridgeObjectRelease();
  uint64_t v12 = a3[6];
  uint64_t v13 = (void *)(a1 + v12);
  uint64_t v14 = (uint64_t *)(a2 + v12);
  uint64_t v16 = *v14;
  uint64_t v15 = v14[1];
  *uint64_t v13 = v16;
  v13[1] = v15;
  swift_bridgeObjectRelease();
  uint64_t v17 = a3[7];
  uint64_t v18 = (void *)(a1 + v17);
  uint64_t v19 = (uint64_t *)(a2 + v17);
  uint64_t v21 = *v19;
  uint64_t v20 = v19[1];
  *uint64_t v18 = v21;
  v18[1] = v20;
  swift_bridgeObjectRelease();
  uint64_t v22 = a3[8];
  uint64_t v23 = (void *)(a1 + v22);
  uint64_t v24 = (uint64_t *)(a2 + v22);
  uint64_t v26 = *v24;
  uint64_t v25 = v24[1];
  *uint64_t v23 = v26;
  v23[1] = v25;
  swift_bridgeObjectRelease();
  uint64_t v27 = a3[9];
  uint64_t v28 = (void *)(a1 + v27);
  uint64_t v29 = (uint64_t *)(a2 + v27);
  uint64_t v31 = *v29;
  uint64_t v30 = v29[1];
  void *v28 = v31;
  v28[1] = v30;
  swift_bridgeObjectRelease();
  uint64_t v32 = a3[10];
  uint64_t v33 = (void *)(a1 + v32);
  uint64_t v34 = (uint64_t *)(a2 + v32);
  uint64_t v36 = *v34;
  uint64_t v35 = v34[1];
  *uint64_t v33 = v36;
  v33[1] = v35;
  swift_bridgeObjectRelease();
  uint64_t v37 = a3[11];
  uint64_t v38 = (void *)(a1 + v37);
  uint64_t v39 = (uint64_t *)(a2 + v37);
  uint64_t v41 = *v39;
  uint64_t v40 = v39[1];
  *uint64_t v38 = v41;
  v38[1] = v40;
  swift_bridgeObjectRelease();
  uint64_t v42 = a3[12];
  uint64_t v43 = (void *)(a1 + v42);
  uint64_t v44 = (uint64_t *)(a2 + v42);
  uint64_t v46 = *v44;
  uint64_t v45 = v44[1];
  void *v43 = v46;
  v43[1] = v45;
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + a3[13]) = *(unsigned char *)(a2 + a3[13]);
  return a1;
}

uint64_t sub_100F34CD0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_100F34CE4);
}

uint64_t sub_100F34CE4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for UUID();
  uint64_t v7 = *(void *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == a2)
  {
    uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    return v8(a1, a2, v6);
  }
  else
  {
    unint64_t v10 = *(void *)(a1 + *(int *)(a3 + 20) + 8);
    if (v10 >= 0xFFFFFFFF) {
      LODWORD(v10) = -1;
    }
    return (v10 + 1);
  }
}

uint64_t sub_100F34DA8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_100F34DBC);
}

uint64_t sub_100F34DBC(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result = type metadata accessor for UUID();
  uint64_t v9 = *(void *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    unint64_t v10 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    return v10(a1, a2, a2, result);
  }
  else
  {
    *(void *)(a1 + *(int *)(a4 + 20) + 8) = (a2 - 1);
  }
  return result;
}

uint64_t sub_100F34E7C()
{
  uint64_t result = type metadata accessor for UUID();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

ValueMetadata *type metadata accessor for LostModeRequest()
{
  return &type metadata for LostModeRequest;
}

unint64_t sub_100F34F40()
{
  unint64_t result = qword_101664680;
  if (!qword_101664680)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_101664680);
  }
  return result;
}

uint64_t sub_100F34F94(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_100F34FDC(void *a1)
{
  uint64_t v3 = sub_10000588C(&qword_101664688);
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  uint64_t v6 = (char *)&v11 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = a1[3];
  sub_10001CD44(a1, v7);
  sub_100F35238();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v1)
  {
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)a1);
  }
  else
  {
    sub_10000588C(&qword_10163BD60);
    char v14 = 0;
    sub_100904FC8(&qword_101651F18);
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    uint64_t v7 = v12;
    char v14 = 1;
    sub_100037AA0();
    swift_bridgeObjectRetain();
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
    uint64_t v9 = v12;
    unint64_t v10 = v13;
    swift_bridgeObjectRetain();
    sub_1000361E0(v9, v10);
    swift_bridgeObjectRelease();
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)a1);
    swift_bridgeObjectRelease();
    sub_10001CFB8(v9, v10);
  }
  return v7;
}

unint64_t sub_100F35238()
{
  unint64_t result = qword_101664690;
  if (!qword_101664690)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_101664690);
  }
  return result;
}

unsigned char *storeEnumTagSinglePayload for LostModeRequest.CodingKeys(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFE)
  {
    unsigned int v6 = ((a2 - 255) >> 8) + 1;
    *unint64_t result = a2 + 1;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x100F35358);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 1;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for LostModeRequest.CodingKeys()
{
  return &type metadata for LostModeRequest.CodingKeys;
}

unsigned char *storeEnumTagSinglePayload for LostModeRequestContent.CodingKeys(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 9 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 9) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xF7) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xF6)
  {
    unsigned int v6 = ((a2 - 247) >> 8) + 1;
    *unint64_t result = a2 + 9;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x100F3545CLL);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 9;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for LostModeRequestContent.CodingKeys()
{
  return &type metadata for LostModeRequestContent.CodingKeys;
}

unint64_t sub_100F35498()
{
  unint64_t result = qword_1016646A0;
  if (!qword_1016646A0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1016646A0);
  }
  return result;
}

unint64_t sub_100F354F0()
{
  unint64_t result = qword_1016646A8;
  if (!qword_1016646A8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1016646A8);
  }
  return result;
}

unint64_t sub_100F35548()
{
  unint64_t result = qword_1016646B0;
  if (!qword_1016646B0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1016646B0);
  }
  return result;
}

unint64_t sub_100F355A0()
{
  unint64_t result = qword_1016646B8;
  if (!qword_1016646B8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1016646B8);
  }
  return result;
}

unint64_t sub_100F355F8()
{
  unint64_t result = qword_1016646C0;
  if (!qword_1016646C0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1016646C0);
  }
  return result;
}

unint64_t sub_100F35650()
{
  unint64_t result = qword_1016646C8;
  if (!qword_1016646C8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1016646C8);
  }
  return result;
}

uint64_t sub_100F356A4(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 0x646975756162 && a2 == 0xE600000000000000;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 1684628325 && a2 == 0xE400000000000000 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0x644970696863 && a2 == 0xE600000000000000 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else if (a1 == 0x754E6C6169726573 && a2 == 0xEC0000007265626DLL {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 3;
  }
  else if (a1 == 0x656C746974 && a2 == 0xE500000000000000 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 4;
  }
  else if (a1 == 1954047348 && a2 == 0xE400000000000000 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 5;
  }
  else if (a1 == 0x6C69616D65 && a2 == 0xE500000000000000 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 6;
  }
  else if (a1 == 0x72624E72656E776FLL && a2 == 0xE800000000000000 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 7;
  }
  else if (a1 == 0x747865746E6F63 && a2 == 0xE700000000000000 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 8;
  }
  else if (a1 == 0x65646F4D74736F6CLL && a2 == 0xEF64656C62616E45)
  {
    swift_bridgeObjectRelease();
    return 9;
  }
  else
  {
    char v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v6) {
      return 9;
    }
    else {
      return 10;
    }
  }
}

uint64_t sub_100F35AB4@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = enum case for FMNAccountType.pairingLock(_:);
  uint64_t v3 = type metadata accessor for FMNAccountType();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v3 - 8) + 104))(a1, v2, v3);
  type metadata accessor for UnpairEndPoint();
  URLComponents.init()();
  URLComponents.scheme.setter();
  URLComponents.path.setter();
  if (qword_101636CD8 != -1) {
    swift_once();
  }
  OS_dispatch_queue.sync<A>(execute:)();
  sub_1010ABD54(v5);
  swift_bridgeObjectRelease();
  return URLComponents.host.setter();
}

uint64_t type metadata accessor for UnpairEndPoint()
{
  uint64_t result = qword_101664728;
  if (!qword_101664728) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t sub_100F35C54(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_100F35C68);
}

uint64_t sub_100F35C68(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for FMNAccountType();
  uint64_t v7 = *(void *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == a2)
  {
    uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    return v8(a1, a2, v6);
  }
  else
  {
    uint64_t v10 = type metadata accessor for URLComponents();
    uint64_t v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 48);
    uint64_t v12 = v10;
    uint64_t v13 = a1 + *(int *)(a3 + 20);
    return v11(v13, a2, v12);
  }
}

uint64_t sub_100F35D60(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_100F35D74);
}

uint64_t sub_100F35D74(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v8 = type metadata accessor for FMNAccountType();
  uint64_t v9 = *(void *)(v8 - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    uint64_t v10 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    return v10(a1, a2, a2, v8);
  }
  else
  {
    uint64_t v12 = type metadata accessor for URLComponents();
    uint64_t v13 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v12 - 8) + 56);
    uint64_t v14 = v12;
    uint64_t v15 = a1 + *(int *)(a4 + 20);
    return v13(v15, a2, a2, v14);
  }
}

uint64_t *sub_100F35E78(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v12 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v12 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v7 = type metadata accessor for UUID();
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v7 - 8) + 16))(a1, a2, v7);
    uint64_t v8 = *(int *)(a3 + 20);
    uint64_t v9 = (char *)a1 + v8;
    uint64_t v10 = (char *)a2 + v8;
    *uint64_t v9 = *v10;
    uint64_t v11 = *((void *)v10 + 2);
    *((void *)v9 + 1) = *((void *)v10 + 1);
    *((void *)v9 + 2) = v11;
    swift_bridgeObjectRetain();
  }
  return a1;
}

uint64_t sub_100F35F58(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);

  return swift_bridgeObjectRelease();
}

uint64_t sub_100F35FD0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 16))(a1, a2, v6);
  uint64_t v7 = *(int *)(a3 + 20);
  uint64_t v8 = a1 + v7;
  uint64_t v9 = a2 + v7;
  *(unsigned char *)uint64_t v8 = *(unsigned char *)v9;
  uint64_t v10 = *(void *)(v9 + 16);
  *(void *)(v8 + 8) = *(void *)(v9 + 8);
  *(void *)(v8 + 16) = v10;
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t sub_100F36060(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 24))(a1, a2, v6);
  uint64_t v7 = *(int *)(a3 + 20);
  uint64_t v8 = a1 + v7;
  uint64_t v9 = a2 + v7;
  *(unsigned char *)uint64_t v8 = *(unsigned char *)v9;
  *(void *)(v8 + 8) = *(void *)(v9 + 8);
  *(void *)(v8 + 16) = *(void *)(v9 + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t sub_100F36104(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 32))(a1, a2, v6);
  uint64_t v7 = *(int *)(a3 + 20);
  uint64_t v8 = a1 + v7;
  uint64_t v9 = a2 + v7;
  *(_OWORD *)uint64_t v8 = *(_OWORD *)v9;
  *(void *)(v8 + 16) = *(void *)(v9 + 16);
  return a1;
}

uint64_t sub_100F36190(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 40))(a1, a2, v6);
  uint64_t v7 = *(int *)(a3 + 20);
  uint64_t v8 = a1 + v7;
  uint64_t v9 = a2 + v7;
  *(unsigned char *)uint64_t v8 = *(unsigned char *)v9;
  uint64_t v11 = *(void *)(v9 + 8);
  uint64_t v10 = *(void *)(v9 + 16);
  *(void *)(v8 + 8) = v11;
  *(void *)(v8 + 16) = v10;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t sub_100F36224(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_100F36238);
}

uint64_t sub_100F36238(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for UUID();
  uint64_t v7 = *(void *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == a2)
  {
    uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    return v8(a1, a2, v6);
  }
  else
  {
    unint64_t v10 = *(void *)(a1 + *(int *)(a3 + 20) + 16);
    if (v10 >= 0xFFFFFFFF) {
      LODWORD(v10) = -1;
    }
    return (v10 + 1);
  }
}

uint64_t sub_100F362FC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_100F36310);
}

uint64_t sub_100F36310(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result = type metadata accessor for UUID();
  uint64_t v9 = *(void *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    unint64_t v10 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    return v10(a1, a2, a2, result);
  }
  else
  {
    *(void *)(a1 + *(int *)(a4 + 20) + 16) = (a2 - 1);
  }
  return result;
}

uint64_t type metadata accessor for KeyRequestEnvelope()
{
  uint64_t result = qword_1016647B8;
  if (!qword_1016647B8) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t sub_100F3641C()
{
  uint64_t result = type metadata accessor for UUID();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t sub_100F364B0(void *a1)
{
  uint64_t v3 = v1;
  uint64_t v5 = sub_10000588C(&qword_1016647F0);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v8 = &v14[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0)];
  sub_10001CD44(a1, a1[3]);
  sub_100F36ACC();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  char v15 = 0;
  type metadata accessor for UUID();
  sub_10001035C(&qword_10163B040);
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  if (!v2)
  {
    uint64_t v9 = (char *)(v3 + *(int *)(type metadata accessor for KeyRequestEnvelope() + 20));
    char v10 = *v9;
    uint64_t v12 = *((void *)v9 + 1);
    uint64_t v11 = *((void *)v9 + 2);
    char v15 = v10;
    uint64_t v16 = v12;
    uint64_t v17 = v11;
    v14[7] = 1;
    sub_1000C7FF0();
    KeyedEncodingContainer.encode<A>(_:forKey:)();
  }
  return (*(uint64_t (**)(unsigned char *, uint64_t))(v6 + 8))(v8, v5);
}

uint64_t sub_100F36674@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v23 = a2;
  uint64_t v26 = type metadata accessor for UUID();
  uint64_t v24 = *(void *)(v26 - 8);
  __chkstk_darwin(v26);
  uint64_t v5 = (char *)&v21 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v27 = sub_10000588C(&qword_101664800);
  uint64_t v25 = *(void *)(v27 - 8);
  __chkstk_darwin(v27);
  uint64_t v7 = (char *)&v21 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for KeyRequestEnvelope();
  __chkstk_darwin(v8);
  char v10 = (char *)&v21 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10001CD44(a1, a1[3]);
  sub_100F36ACC();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v2) {
    return _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)a1);
  }
  uint64_t v11 = v10;
  uint64_t v12 = v24;
  char v28 = 0;
  sub_10001035C((unint64_t *)&qword_10163B010);
  uint64_t v13 = v26;
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  uint64_t v14 = *(void (**)(char *, char *, uint64_t))(v12 + 32);
  uint64_t v22 = (uint64_t)v11;
  v14(v11, v5, v13);
  char v31 = 1;
  sub_1000C8098();
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  (*(void (**)(char *, uint64_t))(v25 + 8))(v7, v27);
  uint64_t v15 = v29;
  uint64_t v16 = v30;
  uint64_t v18 = v22;
  uint64_t v17 = v23;
  uint64_t v19 = v22 + *(int *)(v8 + 20);
  *(unsigned char *)uint64_t v19 = v28;
  *(void *)(v19 + 8) = v15;
  *(void *)(v19 + 16) = v16;
  sub_100F36B20(v18, v17);
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)a1);
  return sub_100F36B84(v18);
}

uint64_t sub_100F369BC()
{
  if (*v0) {
    return 0x4449656C707061;
  }
  else {
    return 0xD000000000000010;
  }
}

uint64_t sub_100F369FC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_100F36DEC(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_100F36A24(uint64_t a1)
{
  unint64_t v2 = sub_100F36ACC();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_100F36A60(uint64_t a1)
{
  unint64_t v2 = sub_100F36ACC();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_100F36A9C@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_100F36674(a1, a2);
}

uint64_t sub_100F36AB4(void *a1)
{
  return sub_100F364B0(a1);
}

unint64_t sub_100F36ACC()
{
  unint64_t result = qword_1016647F8;
  if (!qword_1016647F8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1016647F8);
  }
  return result;
}

uint64_t sub_100F36B20(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for KeyRequestEnvelope();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_100F36B84(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for KeyRequestEnvelope();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

unsigned char *storeEnumTagSinglePayload for KeyRequestEnvelope.CodingKeys(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFE)
  {
    unsigned int v6 = ((a2 - 255) >> 8) + 1;
    *unint64_t result = a2 + 1;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x100F36CACLL);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 1;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for KeyRequestEnvelope.CodingKeys()
{
  return &type metadata for KeyRequestEnvelope.CodingKeys;
}

unint64_t sub_100F36CE8()
{
  unint64_t result = qword_101664808;
  if (!qword_101664808)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_101664808);
  }
  return result;
}

unint64_t sub_100F36D40()
{
  unint64_t result = qword_101664810;
  if (!qword_101664810)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_101664810);
  }
  return result;
}

unint64_t sub_100F36D98()
{
  unint64_t result = qword_101664818;
  if (!qword_101664818)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_101664818);
  }
  return result;
}

uint64_t sub_100F36DEC(uint64_t a1, uint64_t a2)
{
  if (a1 == 0xD000000000000010 && a2 == 0x80000001013EE1B0
    || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x4449656C707061 && a2 == 0xE700000000000000)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else
  {
    char v5 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v5) {
      return 1;
    }
    else {
      return 2;
    }
  }
}

uint64_t sub_100F36EE0()
{
  uint64_t v0 = type metadata accessor for OS_dispatch_queue.Attributes();
  __chkstk_darwin(v0);
  uint64_t v1 = type metadata accessor for DispatchQoS();
  __chkstk_darwin(v1 - 8);
  uint64_t v12 = type metadata accessor for OS_dispatch_queue.AutoreleaseFrequency();
  uint64_t v2 = *(void *)(v12 - 8);
  __chkstk_darwin(v12);
  unsigned int v4 = (char *)&v9 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  unint64_t v9 = sub_10000584C();
  unsigned int v11 = enum case for OS_dispatch_queue.AutoreleaseFrequency.workItem(_:);
  char v10 = *(void (**)(char *))(v2 + 104);
  v10(v4);
  static DispatchQoS.unspecified.getter();
  uint64_t v14 = _swiftEmptyArrayStorage;
  sub_100F39A40((unint64_t *)&qword_101638CC0, 255, (void (*)(uint64_t))&type metadata accessor for OS_dispatch_queue.Attributes);
  sub_10000588C((uint64_t *)&unk_1016376F0);
  sub_100062734((unint64_t *)&qword_101638CD0, (uint64_t *)&unk_1016376F0);
  dispatch thunk of SetAlgebra.init<A>(_:)();
  uint64_t v5 = OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)();
  uint64_t v6 = v12;
  uint64_t v7 = v13;
  *(void *)(v13 + 16) = v5;
  ((void (*)(char *, void, uint64_t))v10)(v4, v11, v6);
  static DispatchQoS.unspecified.getter();
  uint64_t v14 = _swiftEmptyArrayStorage;
  dispatch thunk of SetAlgebra.init<A>(_:)();
  *(void *)(v7 + 24) = OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)();
  *(void *)(v7 + 32) = &_swiftEmptySetSingleton;
  return v7;
}

uint64_t sub_100F371E4()
{
  uint64_t v0 = type metadata accessor for Logger();
  sub_10001E384(v0, qword_10170EF10);
  sub_100010324(v0, (uint64_t)qword_10170EF10);
  return Logger.init(subsystem:category:)();
}

Swift::Int sub_100F37264()
{
  return Hasher._finalize()();
}

uint64_t sub_100F372BC()
{
  return String.hash(into:)();
}

Swift::Int sub_100F372D8()
{
  return Hasher._finalize()();
}

uint64_t sub_100F3732C@<X0>(Swift::String *a1@<X0>, BOOL *a2@<X8>)
{
  Swift::Int v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_1015A55D0, *a1);
  uint64_t result = swift_bridgeObjectRelease();
  *a2 = v3 != 0;
  return result;
}

void sub_100F37380(void *a1@<X8>)
{
  *a1 = 0xD000000000000044;
  a1[1] = 0x80000001013F1140;
}

id sub_100F373A0()
{
  uint64_t v1 = *(void **)(v0 + 144);
  if (v1)
  {
    id v2 = *(id *)(v0 + 144);
  }
  else
  {
    Swift::Int v3 = (objc_class *)type metadata accessor for LocalFindableConnectionMaterialTrampoline();
    unsigned int v4 = (char *)objc_allocWithZone(v3);
    *(void *)&v4[OBJC_IVAR____TtC12searchpartyd41LocalFindableConnectionMaterialTrampoline_implementation] = v0;
    v9.receiver = v4;
    v9.super_class = v3;
    swift_retain();
    id v5 = [super init];
    uint64_t v6 = *(void **)(v0 + 144);
    *(void *)(v0 + 144) = v5;
    id v2 = v5;

    uint64_t v1 = 0;
  }
  id v7 = v1;
  return v2;
}

uint64_t sub_100F3743C()
{
  type metadata accessor for OS_dispatch_queue.Attributes();
  swift_task_alloc();
  type metadata accessor for DispatchQoS();
  swift_task_alloc();
  uint64_t v1 = type metadata accessor for OS_dispatch_queue.AutoreleaseFrequency();
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = swift_task_alloc();
  swift_defaultActor_initialize();
  v0[14] = 0xD000000000000026;
  v0[15] = 0x80000001013852E0;
  sub_10000584C();
  (*(void (**)(uint64_t, void, uint64_t))(v2 + 104))(v3, enum case for OS_dispatch_queue.AutoreleaseFrequency.workItem(_:), v1);
  static DispatchQoS.unspecified.getter();
  sub_100F39A40((unint64_t *)&qword_101638CC0, 255, (void (*)(uint64_t))&type metadata accessor for OS_dispatch_queue.Attributes);
  sub_10000588C((uint64_t *)&unk_1016376F0);
  sub_100062734((unint64_t *)&qword_101638CD0, (uint64_t *)&unk_1016376F0);
  dispatch thunk of SetAlgebra.init<A>(_:)();
  v0[16] = OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)();
  type metadata accessor for XPCSessionManager();
  swift_allocObject();
  uint64_t v4 = XPCSessionManager.init(name:)();
  v0[18] = 0;
  v0[19] = 0;
  v0[17] = v4;
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  id v5 = *(uint64_t (**)(uint64_t))(v7 + 8);
  return sub_1007E0BA4(v5, v7, (uint64_t)v0);
}

uint64_t sub_100F37718()
{
  *(void *)(v1 + 64) = v0;
  return _swift_task_switch(sub_100F37738, v0, 0);
}

uint64_t sub_100F37738()
{
  uint64_t v1 = v0[8];
  uint64_t v2 = *(NSObject **)(v1 + 128);
  uint64_t v3 = swift_allocObject();
  *(void *)(v3 + 16) = sub_100F39AF4;
  *(void *)(v3 + 24) = v1;
  v0[6] = sub_1003B7AE0;
  v0[7] = v3;
  v0[2] = _NSConcreteStackBlock;
  v0[3] = 1107296256;
  v0[4] = sub_1000A70B0;
  v0[5] = &unk_1015FE0F0;
  uint64_t v4 = _Block_copy(v0 + 2);
  swift_retain();
  swift_retain();
  swift_release();
  dispatch_sync(v2, v4);
  _Block_release(v4);
  LOBYTE(v4) = swift_isEscapingClosureAtFileLocation();
  swift_release();
  uint64_t result = swift_release();
  if (v4)
  {
    __break(1u);
  }
  else
  {
    uint64_t v6 = (uint64_t (*)(void))v0[1];
    return v6();
  }
  return result;
}

uint64_t sub_100F378A4(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for XPCServiceDescription();
  uint64_t v23 = *(void *)(v2 - 8);
  uint64_t v24 = v2;
  __chkstk_darwin(v2);
  uint64_t v4 = (char *)&v23 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = type metadata accessor for MachServiceName();
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v7 = __chkstk_darwin(v5);
  objc_super v9 = (char *)&v23 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v7);
  unsigned int v11 = (char *)&v23 - v10;
  uint64_t v12 = type metadata accessor for DispatchPredicate();
  uint64_t v13 = *(void *)(v12 - 8);
  __chkstk_darwin(v12);
  uint64_t v15 = (uint64_t *)((char *)&v23 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v16 = *(void **)(a1 + 128);
  void *v15 = v16;
  (*(void (**)(void *, void, uint64_t))(v13 + 104))(v15, enum case for DispatchPredicate.onQueue(_:), v12);
  id v17 = v16;
  LOBYTE(v16) = _dispatchPreconditionTest(_:)();
  (*(void (**)(void *, uint64_t))(v13 + 8))(v15, v12);
  if ((v16 & 1) == 0)
  {
    __break(1u);
    goto LABEL_5;
  }
  MachServiceName.init(_:)();
  (*(void (**)(char *, char *, uint64_t))(v6 + 16))(v9, v11, v5);
  sub_100F373A0();
  if (qword_1016371F0 != -1) {
LABEL_5:
  }
    swift_once();
  uint64_t v18 = (void *)qword_101664820;
  uint64_t v19 = self;
  id v20 = v18;
  id v21 = [v19 interfaceWithProtocol:&OBJC_PROTOCOL___SPLocalFindableConnectionMaterialMonitoringXPCClientProtocol];
  swift_retain_n();
  XPCServiceDescription.init(name:options:exportedObject:exportedInterface:remoteObjectInterface:shouldAccept:interruptionHandler:invalidationHandler:)();
  XPCSessionManager.register(service:)();
  (*(void (**)(char *, uint64_t))(v23 + 8))(v4, v24);
  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v11, v5);
}

id sub_100F37C40()
{
  id result = [self interfaceWithProtocol:&OBJC_PROTOCOL___SPLocalFindableConnectionMaterialMonitoringXPCProtocol];
  qword_101664820 = (uint64_t)result;
  return result;
}

uint64_t sub_100F37C90(void *a1)
{
  uint64_t v2 = v1;
  if (qword_1016371E8 != -1) {
    swift_once();
  }
  uint64_t v4 = type metadata accessor for Logger();
  sub_100010324(v4, (uint64_t)qword_10170EF10);
  id v5 = a1;
  uint64_t v6 = Logger.logObject.getter();
  os_log_type_t v7 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v6, v7))
  {
    uint64_t v8 = (uint8_t *)swift_slowAlloc();
    objc_super v9 = (void *)swift_slowAlloc();
    *(_DWORD *)uint64_t v8 = 138412290;
    v18[0] = v5;
    id v10 = v5;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *objc_super v9 = v5;

    _os_log_impl((void *)&_mh_execute_header, v6, v7, "invalidationHandler: %@", v8, 0xCu);
    sub_10000588C((uint64_t *)&unk_101638EA0);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
  }
  unsigned int v11 = *(NSObject **)(v2 + 128);
  uint64_t v12 = swift_allocObject();
  *(void *)(v12 + 16) = v2;
  *(void *)(v12 + 24) = v5;
  uint64_t v13 = swift_allocObject();
  *(void *)(v13 + 16) = sub_100F39FE4;
  *(void *)(v13 + 24) = v12;
  v18[4] = sub_1003B7AE0;
  v18[5] = v13;
  v18[0] = _NSConcreteStackBlock;
  v18[1] = 1107296256;
  v18[2] = sub_1000A70B0;
  uint64_t v18[3] = &unk_1015FE0A0;
  uint64_t v14 = _Block_copy(v18);
  id v15 = v5;
  swift_retain();
  swift_retain();
  swift_release();
  dispatch_sync(v11, v14);
  _Block_release(v14);
  char isEscapingClosureAtFileLocation = swift_isEscapingClosureAtFileLocation();
  swift_release();
  uint64_t result = swift_release();
  if (isEscapingClosureAtFileLocation) {
    __break(1u);
  }
  return result;
}

uint64_t sub_100F37F54(void *a1)
{
  uint64_t v2 = v1;
  if (qword_1016371E8 != -1) {
    swift_once();
  }
  uint64_t v4 = type metadata accessor for Logger();
  sub_100010324(v4, (uint64_t)qword_10170EF10);
  id v5 = a1;
  uint64_t v6 = Logger.logObject.getter();
  os_log_type_t v7 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v6, v7))
  {
    uint64_t v8 = (uint8_t *)swift_slowAlloc();
    objc_super v9 = (void *)swift_slowAlloc();
    *(_DWORD *)uint64_t v8 = 138412290;
    v18[0] = v5;
    id v10 = v5;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *objc_super v9 = v5;

    _os_log_impl((void *)&_mh_execute_header, v6, v7, "interruptionHandler: %@", v8, 0xCu);
    sub_10000588C((uint64_t *)&unk_101638EA0);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
  }
  unsigned int v11 = *(NSObject **)(v2 + 128);
  uint64_t v12 = swift_allocObject();
  *(void *)(v12 + 16) = v2;
  *(void *)(v12 + 24) = v5;
  uint64_t v13 = swift_allocObject();
  *(void *)(v13 + 16) = sub_100F39AA8;
  *(void *)(v13 + 24) = v12;
  v18[4] = sub_1003B7AE0;
  v18[5] = v13;
  v18[0] = _NSConcreteStackBlock;
  v18[1] = 1107296256;
  v18[2] = sub_1000A70B0;
  uint64_t v18[3] = &unk_1015FE028;
  uint64_t v14 = _Block_copy(v18);
  id v15 = v5;
  swift_retain();
  swift_retain();
  swift_release();
  dispatch_sync(v11, v14);
  _Block_release(v14);
  char isEscapingClosureAtFileLocation = swift_isEscapingClosureAtFileLocation();
  swift_release();
  uint64_t result = swift_release();
  if (isEscapingClosureAtFileLocation) {
    __break(1u);
  }
  return result;
}

uint64_t sub_100F38218(uint64_t a1, void *a2)
{
  if (!*(void *)(a1 + 152))
  {
    type metadata accessor for LocalFindableConnectionMaterialMonitoringSession();
    *(void *)(swift_allocObject() + 40) = 0;
    uint64_t v4 = sub_100F36EE0();
    if (qword_1016371E8 != -1) {
      swift_once();
    }
    uint64_t v5 = type metadata accessor for Logger();
    sub_100010324(v5, (uint64_t)qword_10170EF10);
    swift_retain_n();
    uint64_t v6 = Logger.logObject.getter();
    os_log_type_t v7 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v6, v7))
    {
      uint64_t v8 = (uint8_t *)swift_slowAlloc();
      uint64_t v14 = swift_slowAlloc();
      *(_DWORD *)uint64_t v8 = 136315138;
      uint64_t v15 = v14;
      swift_retain();
      sub_10000588C((uint64_t *)&unk_10165F620);
      sub_100062734((unint64_t *)&unk_1016649B0, (uint64_t *)&unk_10165F620);
      v9._countAndFlagsBits = CustomStringConvertible.typeDescription.getter();
      String.append(_:)(v9);
      swift_bridgeObjectRelease();
      v10._countAndFlagsBits = 8250;
      v10._object = (void *)0xE200000000000000;
      String.append(_:)(v10);
      v11._countAndFlagsBits = CustomStringConvertible<>.addressDescription.getter();
      String.append(_:)(v11);
      swift_bridgeObjectRelease();
      v12._countAndFlagsBits = 62;
      v12._object = (void *)0xE100000000000000;
      String.append(_:)(v12);
      swift_release();
      sub_1008FA0F0(60, 0xE100000000000000, &v15);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_release_n();
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v6, v7, "Created new LocalFindableConnectionMaterialSession: %s", v8, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {

      swift_release_n();
    }
    *(void *)(a1 + 152) = v4;
    swift_retain();
    swift_release();
  }
  swift_retain();
  swift_retain();
  sub_100FD0FC0(a2);
  swift_release_n();
  return swift_release();
}

uint64_t sub_100F38510(void *a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = type metadata accessor for DispatchPredicate();
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  os_log_type_t v7 = (void *)((char *)aBlock - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v8 = *(void **)(v2 + 128);
  *os_log_type_t v7 = v8;
  (*(void (**)(void *, void, uint64_t))(v5 + 104))(v7, enum case for DispatchPredicate.onQueue(_:), v4);
  id v9 = v8;
  LOBYTE(v8) = _dispatchPreconditionTest(_:)();
  uint64_t result = (*(uint64_t (**)(void *, uint64_t))(v5 + 8))(v7, v4);
  if ((v8 & 1) == 0)
  {
    __break(1u);
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }
  os_log_type_t v7 = *(void **)(v2 + 152);
  if (!v7) {
    return result;
  }
  Swift::String v11 = v7[2];
  uint64_t v12 = swift_allocObject();
  *(void *)(v12 + 16) = v7;
  *(void *)(v12 + 24) = a1;
  uint64_t v13 = swift_allocObject();
  *(void *)(v13 + 16) = sub_100F39A8C;
  *(void *)(v13 + 24) = v12;
  aBlock[4] = sub_1003B7AE0;
  void aBlock[5] = v13;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  void aBlock[2] = sub_1000A70B0;
  aBlock[3] = &unk_1015FDFB0;
  uint64_t v14 = _Block_copy(aBlock);
  swift_retain_n();
  id v15 = a1;
  swift_retain();
  swift_release();
  dispatch_sync(v11, v14);
  _Block_release(v14);
  char isEscapingClosureAtFileLocation = swift_isEscapingClosureAtFileLocation();
  swift_release();
  swift_release();
  if (isEscapingClosureAtFileLocation) {
    goto LABEL_14;
  }
  swift_retain();
  OS_dispatch_queue.sync<A>(execute:)();
  swift_release();
  if (LOBYTE(aBlock[0]) == 1)
  {
    if (qword_101636F20 == -1)
    {
LABEL_6:
      uint64_t v17 = type metadata accessor for Logger();
      sub_100010324(v17, (uint64_t)qword_10170E9A8);
      uint64_t v18 = Logger.logObject.getter();
      os_log_type_t v19 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v18, v19))
      {
        id v20 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)id v20 = 0;
        _os_log_impl((void *)&_mh_execute_header, v18, v19, "TRACE: stopMonitoring()", v20, 2u);
        swift_slowDealloc();
      }

      if (v7[5])
      {
        swift_retain();
        sub_10000588C(&qword_101638D40);
        Task.cancel()();
        swift_release();
      }
      swift_release();
      *(void *)(v2 + 152) = 0;
      return swift_release();
    }
LABEL_15:
    swift_once();
    goto LABEL_6;
  }
  return swift_release();
}

uint64_t sub_100F388BC(uint64_t a1)
{
  *(void *)(v2 + 72) = a1;
  *(void *)(v2 + 80) = v1;
  return _swift_task_switch(sub_100F388DC, v1, 0);
}

uint64_t sub_100F388DC()
{
  if (qword_1016371E8 != -1) {
    swift_once();
  }
  uint64_t v1 = type metadata accessor for Logger();
  sub_100010324(v1, (uint64_t)qword_10170EF10);
  uint64_t v2 = Logger.logObject.getter();
  os_log_type_t v3 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v2, v3))
  {
    uint64_t v4 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v4 = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, v3, "LocalFindableConnectionMaterialService.startCharacteristicsMonitoring", v4, 2u);
    swift_slowDealloc();
  }
  uint64_t v6 = (void *)v0[9];
  uint64_t v5 = v0[10];

  os_log_type_t v7 = *(NSObject **)(v5 + 128);
  uint64_t v8 = swift_allocObject();
  *(void *)(v8 + 16) = v5;
  *(void *)(v8 + 24) = v6;
  uint64_t v9 = swift_allocObject();
  *(void *)(v9 + 16) = sub_100F39A10;
  *(void *)(v9 + 24) = v8;
  v0[6] = sub_100132424;
  v0[7] = v9;
  v0[2] = _NSConcreteStackBlock;
  v0[3] = 1107296256;
  v0[4] = sub_1000A70B0;
  v0[5] = &unk_1015FDF38;
  Swift::String v10 = _Block_copy(v0 + 2);
  swift_retain();
  id v11 = v6;
  swift_retain();
  swift_release();
  dispatch_sync(v7, v10);
  _Block_release(v10);
  LOBYTE(v7) = swift_isEscapingClosureAtFileLocation();
  swift_release();
  uint64_t result = swift_release();
  if (v7)
  {
    __break(1u);
  }
  else
  {
    if (*(void *)(v0[10] + 152))
    {
      swift_retain();
      sub_100A66D7C();
      swift_release();
    }
    else
    {
      type metadata accessor for SPLocalFindableConnectionMaterialMonitoringSessionError(0);
      v0[8] = 1;
      sub_1004A0BC8((uint64_t)_swiftEmptyArrayStorage);
      sub_100F39A40((unint64_t *)&qword_101638450, 255, type metadata accessor for SPLocalFindableConnectionMaterialMonitoringSessionError);
      _BridgedStoredNSError.init(_:userInfo:)();
      swift_willThrow();
    }
    uint64_t v13 = (uint64_t (*)(void))v0[1];
    return v13();
  }
  return result;
}

uint64_t sub_100F38BE0()
{
  *(void *)(v1 + 32) = v0;
  return _swift_task_switch(sub_100F38C00, v0, 0);
}

uint64_t sub_100F38C00()
{
  if (qword_1016371E8 != -1) {
    swift_once();
  }
  uint64_t v1 = type metadata accessor for Logger();
  sub_100010324(v1, (uint64_t)qword_10170EF10);
  uint64_t v2 = Logger.logObject.getter();
  os_log_type_t v3 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v2, v3))
  {
    uint64_t v4 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v4 = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, v3, "AccessoryDiscoveryService.stopCharacteristicsMonitoring", v4, 2u);
    swift_slowDealloc();
  }
  uint64_t v5 = v0[4];

  uint64_t v6 = *(void *)(v5 + 152);
  if (v6)
  {
    uint64_t v7 = qword_101636F20;
    swift_retain();
    if (v7 != -1) {
      swift_once();
    }
    sub_100010324(v1, (uint64_t)qword_10170E9A8);
    uint64_t v8 = Logger.logObject.getter();
    os_log_type_t v9 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v8, v9))
    {
      Swift::String v10 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)Swift::String v10 = 0;
      _os_log_impl((void *)&_mh_execute_header, v8, v9, "TRACE: stopMonitoring()", v10, 2u);
      swift_slowDealloc();
    }

    if (*(void *)(v6 + 40))
    {
      swift_retain();
      sub_10000588C(&qword_101638D40);
      Task.cancel()();
      swift_release();
    }
    swift_release();
    id v11 = (uint64_t (*)(void))v0[1];
  }
  else
  {
    type metadata accessor for SPLocalFindableConnectionMaterialMonitoringSessionError(0);
    v0[3] = 1;
    sub_1004A0BC8((uint64_t)_swiftEmptyArrayStorage);
    sub_100F39A40((unint64_t *)&qword_101638450, 255, type metadata accessor for SPLocalFindableConnectionMaterialMonitoringSessionError);
    _BridgedStoredNSError.init(_:userInfo:)();
    swift_willThrow();
    id v11 = (uint64_t (*)(void))v0[1];
  }
  return v11();
}

uint64_t sub_100F38ED0(uint64_t a1)
{
  v2[17] = a1;
  v2[18] = v1;
  sub_10000588C((uint64_t *)&unk_10163B1D0);
  v2[19] = swift_task_alloc();
  uint64_t v3 = type metadata accessor for LocalFindableAccessoryRecord();
  v2[20] = v3;
  v2[21] = *(void *)(v3 - 8);
  v2[22] = swift_task_alloc();
  return _swift_task_switch(sub_100F38FC0, v1, 0);
}

uint64_t sub_100F38FC0()
{
  uint64_t v1 = qword_1016375E8;
  swift_retain();
  if (v1 != -1) {
    swift_once();
  }
  swift_beginAccess();
  uint64_t result = sub_1000977C4((uint64_t)&xmmword_10166E8F0, v0 + 56);
  if (*(void *)(v0 + 80))
  {
    sub_10001CEB0((long long *)(v0 + 56), v0 + 16);
    swift_release();
    sub_10001CD44((void *)(v0 + 16), *(void *)(v0 + 40));
    uint64_t v4 = (uint64_t (__cdecl *)())((char *)&dword_101639150 + dword_101639150);
    uint64_t v3 = (void *)swift_task_alloc();
    *(void *)(v0 + 184) = v3;
    *uint64_t v3 = v0;
    v3[1] = sub_100F39108;
    return v4();
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_100F39108(uint64_t a1)
{
  uint64_t v2 = *(void *)(*(void *)v1 + 144);
  *(void *)(*(void *)v1 + 192) = a1;
  swift_task_dealloc();
  return _swift_task_switch(sub_100F39220, v2, 0);
}

uint64_t sub_100F39220()
{
  uint64_t v1 = *(void *)(v0 + 192);
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v0 + 16);
  if (v1)
  {
    uint64_t v2 = *(void *)(v0 + 192);
    return _swift_task_switch(sub_100F39330, v2, 0);
  }
  else
  {
    sub_10001CEC8();
    uint64_t v3 = swift_allocError();
    *uint64_t v4 = 0xD000000000000013;
    v4[1] = 0x80000001014033F0;
    swift_willThrow();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t))(v0 + 8);
    return v5(v3, 1);
  }
}

uint64_t sub_100F39330()
{
  uint64_t v1 = (void *)swift_task_alloc();
  v0[25] = v1;
  *uint64_t v1 = v0;
  v1[1] = sub_100F393D0;
  uint64_t v2 = v0[19];
  uint64_t v3 = v0[17];
  return sub_100C12834(v2, v3);
}

uint64_t sub_100F393D0()
{
  uint64_t v2 = *v1;
  *(void *)(*v1 + 208) = v0;
  swift_task_dealloc();
  uint64_t v3 = *(void *)(v2 + 144);
  if (v0) {
    uint64_t v4 = sub_100F39748;
  }
  else {
    uint64_t v4 = sub_100F394FC;
  }
  return _swift_task_switch(v4, v3, 0);
}

uint64_t sub_100F394FC()
{
  uint64_t v1 = v0[19];
  int v2 = (*(uint64_t (**)(uint64_t, uint64_t, void))(v0[21] + 48))(v1, 1, v0[20]);
  if (v2 == 1)
  {
    sub_100F39948(v1);
    type metadata accessor for SPOwnerSessionError(0);
    v0[16] = 2;
    sub_1004A0BC8((uint64_t)_swiftEmptyArrayStorage);
    sub_100F39A40(&qword_101638460, 255, type metadata accessor for SPOwnerSessionError);
    _BridgedStoredNSError.init(_:userInfo:)();
    swift_release();
    id v3 = (id)v0[15];
  }
  else
  {
    uint64_t v4 = v0[22];
    sub_100F399A8(v1, v4);
    id v3 = [objc_allocWithZone((Class)SPPeripheralConnectionMaterial) init];
    type metadata accessor for PeripheralConnectionMaterial(0);
    Class isa = Data._bridgeToObjectiveC()().super.isa;
    [v3 setIrkData:isa];

    uint64_t v6 = MACAddress.data.getter();
    unint64_t v8 = v7;
    Class v9 = Data._bridgeToObjectiveC()().super.isa;
    sub_10001CFB8(v6, v8);
    [v3 setBtAddressData:v9];

    uint64_t v10 = MACAddress.bluetoothAddressWithType.getter();
    unint64_t v12 = v11;
    Class v13 = Data._bridgeToObjectiveC()().super.isa;
    sub_10001CFB8(v10, v12);
    [v3 setBtAddressWithTypeData:v13];

    swift_release();
    sub_100A68EEC(v4);
  }
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v14 = (uint64_t (*)(id, BOOL))v0[1];
  return v14(v3, v2 == 1);
}

uint64_t sub_100F39748()
{
  swift_release();
  uint64_t v1 = *(void *)(v0 + 208);
  swift_task_dealloc();
  swift_task_dealloc();
  int v2 = *(uint64_t (**)(uint64_t, uint64_t))(v0 + 8);
  return v2(v1, 1);
}

uint64_t sub_100F397CC()
{
  swift_bridgeObjectRelease();

  swift_release();
  swift_release();
  swift_defaultActor_destroy();

  return _swift_defaultActor_deallocate(v0);
}

uint64_t type metadata accessor for LocalFindableConnectionMaterialService()
{
  return self;
}

uint64_t sub_100F39848()
{
  int v2 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v2;
  *int v2 = v1;
  v2[1] = sub_10001D2E4;
  v2[8] = v0;
  return _swift_task_switch(sub_100F37738, v0, 0);
}

uint64_t sub_100F398F0(uint64_t a1, uint64_t a2)
{
  uint64_t result = sub_100F39A40((unint64_t *)&unk_1016649A0, a2, (void (*)(uint64_t))type metadata accessor for LocalFindableConnectionMaterialService);
  *(void *)(a1 + 8) = result;
  return result;
}

uint64_t sub_100F39948(uint64_t a1)
{
  uint64_t v2 = sub_10000588C((uint64_t *)&unk_10163B1D0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_100F399A8(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for LocalFindableAccessoryRecord();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_100F39A10()
{
  return sub_100F38218(*(void *)(v0 + 16), *(void **)(v0 + 24));
}

uint64_t sub_100F39A18()
{
  return _swift_deallocObject(v0, 32, 7);
}

uint64_t sub_100F39A28(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_100F39A38()
{
  return swift_release();
}

uint64_t sub_100F39A40(unint64_t *a1, uint64_t a2, void (*a3)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a3(a2);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

void sub_100F39A8C()
{
  sub_100DFFED4(*(void **)(v0 + 16), *(void **)(v0 + 24));
}

uint64_t sub_100F39A94()
{
  return _swift_deallocObject(v0, 32, 7);
}

uint64_t sub_100F39AA8()
{
  return sub_100F38510(*(void **)(v0 + 24));
}

uint64_t sub_100F39AD0()
{
  return _swift_deallocObject(v0, 32, 7);
}

uint64_t sub_100F39AE4()
{
  return _swift_deallocObject(v0, 32, 7);
}

uint64_t sub_100F39AF4()
{
  return sub_100F378A4(v0);
}

uint64_t sub_100F39AFC()
{
  return _swift_deallocObject(v0, 32, 7);
}

uint64_t sub_100F39B18(void *a1)
{
  if (qword_1016371E8 != -1) {
    swift_once();
  }
  uint64_t v2 = type metadata accessor for Logger();
  sub_100010324(v2, (uint64_t)qword_10170EF10);
  id v3 = a1;
  uint64_t v4 = Logger.logObject.getter();
  os_log_type_t v5 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v4, v5))
  {
    uint64_t v6 = (uint8_t *)swift_slowAlloc();
    unint64_t v7 = (void *)swift_slowAlloc();
    *(_DWORD *)uint64_t v6 = 138412290;
    id v8 = v3;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *unint64_t v7 = v3;

    _os_log_impl((void *)&_mh_execute_header, v4, v5, "shouldAccept: %@", v6, 0xCu);
    sub_10000588C((uint64_t *)&unk_101638EA0);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
  }
  sub_100F39DEC();
  char v9 = NSXPCConnection.hasEntitlement<A>(_:)();
  if ((v9 & 1) == 0)
  {
    uint64_t v10 = v3;
    unint64_t v11 = Logger.logObject.getter();
    os_log_type_t v12 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v11, v12))
    {
      Class v13 = (uint8_t *)swift_slowAlloc();
      uint64_t v14 = (void *)swift_slowAlloc();
      *(_DWORD *)Class v13 = 138412290;
      id v15 = v10;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *uint64_t v14 = v10;

      _os_log_impl((void *)&_mh_execute_header, v11, v12, "Missing entitlement: %@", v13, 0xCu);
      sub_10000588C((uint64_t *)&unk_101638EA0);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {

      unint64_t v11 = v10;
    }
  }
  return v9 & 1;
}

unint64_t sub_100F39DEC()
{
  unint64_t result = qword_1016649C0;
  if (!qword_1016649C0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, &qword_1016649C0);
  }
  return result;
}

unsigned char *storeEnumTagSinglePayload for LocalFindableConnectionMaterialEntitlement(unsigned char *result, int a2, int a3)
{
  if ((a3 + 1) >= 0x10000) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) < 0x100) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2)
  {
    switch(v5)
    {
      case 1:
        *unint64_t result = a2;
        return result;
      case 2:
        *(_WORD *)unint64_t result = a2;
        return result;
      case 3:
        goto LABEL_19;
      case 4:
        *(_DWORD *)unint64_t result = a2;
        return result;
      default:
        return result;
    }
  }
  switch(v5)
  {
    case 1:
      *unint64_t result = 0;
      break;
    case 2:
      *(_WORD *)unint64_t result = 0;
      break;
    case 3:
LABEL_19:
      __break(1u);
      JUMPOUT(0x100F39EDCLL);
    case 4:
      *(_DWORD *)unint64_t result = 0;
      break;
    default:
      return result;
  }
  return result;
}

ValueMetadata *type metadata accessor for LocalFindableConnectionMaterialEntitlement()
{
  return &type metadata for LocalFindableConnectionMaterialEntitlement;
}

unint64_t sub_100F39F18()
{
  unint64_t result = qword_1016649D0;
  if (!qword_1016649D0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1016649D0);
  }
  return result;
}

unint64_t sub_100F39F70()
{
  unint64_t result = qword_1016649D8;
  if (!qword_1016649D8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1016649D8);
  }
  return result;
}

uint64_t sub_100F39FE8(void *a1, char a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v16 = a5;
  uint64_t v9 = sub_10000588C(&qword_101664B38);
  uint64_t v10 = *(void *)(v9 - 8);
  __chkstk_darwin(v9);
  os_log_type_t v12 = (char *)&v15 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10001CD44(a1, a1[3]);
  sub_100F3D854();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  LOBYTE(v18) = a2;
  uint64_t v19 = a3;
  uint64_t v20 = a4;
  char v21 = 0;
  sub_100ECD1C4();
  uint64_t v13 = v17;
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  if (!v13)
  {
    uint64_t v18 = v16;
    char v21 = 1;
    sub_10000588C(&qword_101664B48);
    sub_100F3D8A8();
    KeyedEncodingContainer.encode<A>(_:forKey:)();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v10 + 8))(v12, v9);
}

uint64_t sub_100F3A194(void *a1)
{
  uint64_t v3 = v1;
  uint64_t v5 = sub_10000588C(&qword_101664BB0);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  id v8 = (char *)&v11 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10001CD44(a1, a1[3]);
  sub_100F3E224();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  LOBYTE(v11) = 0;
  type metadata accessor for UUID();
  sub_100F3E278(&qword_10163B040, (void (*)(uint64_t))&type metadata accessor for UUID);
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  if (!v2)
  {
    Iteunint64_t m = (int *)type metadata accessor for KeyDropFetchRequest.SharedFetchItem(0);
    LOBYTE(v11) = *(unsigned char *)(v3 + Item[5]);
    char v12 = 1;
    sub_100176DE8();
    KeyedEncodingContainer.encode<A>(_:forKey:)();
    long long v11 = *(_OWORD *)(v3 + Item[6]);
    char v12 = 2;
    sub_100037BB4();
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)();
    *(void *)&long long v11 = *(void *)(v3 + Item[7]);
    char v12 = 3;
    sub_10000588C((uint64_t *)&unk_10164DBD0);
    sub_100F3E3DC((unint64_t *)&qword_10163F7E0, (uint64_t *)&unk_10164DBD0, (void (*)(void))sub_100037BB4);
    KeyedEncodingContainer.encode<A>(_:forKey:)();
    *(void *)&long long v11 = *(void *)(v3 + Item[8]);
    char v12 = 4;
    sub_10000588C(&qword_101664B98);
    sub_100F3E3DC(&qword_101664BB8, &qword_101664B98, (void (*)(void))sub_100F3E448);
    KeyedEncodingContainer.encode<A>(_:forKey:)();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
}

uint64_t sub_100F3A4B8@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v17 = a2;
  uint64_t v4 = type metadata accessor for UUID();
  uint64_t v19 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v20 = (char *)&v15 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v21 = sub_10000588C(&qword_101664B88);
  uint64_t v18 = *(void *)(v21 - 8);
  __chkstk_darwin(v21);
  uint64_t v7 = (char *)&v15 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  Iteunint64_t m = (int *)type metadata accessor for KeyDropFetchRequest.SharedFetchItem(0);
  __chkstk_darwin(Item);
  uint64_t v10 = (char *)&v15 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10001CD44(a1, a1[3]);
  sub_100F3E224();
  uint64_t v22 = v7;
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v2) {
    return _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)a1);
  }
  uint64_t v16 = a1;
  uint64_t v11 = v19;
  LOBYTE(v23) = 0;
  sub_100F3E278((unint64_t *)&qword_10163B010, (void (*)(uint64_t))&type metadata accessor for UUID);
  char v12 = v20;
  uint64_t v13 = v21;
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  (*(void (**)(char *, char *, uint64_t))(v11 + 32))(v10, v12, v4);
  char v24 = 1;
  sub_1005FA260();
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  v10[Item[5]] = v23;
  char v24 = 2;
  sub_100037AA0();
  KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
  *(_OWORD *)&v10[Item[6]] = v23;
  sub_10000588C((uint64_t *)&unk_10164DBD0);
  char v24 = 3;
  sub_100F3E3DC((unint64_t *)&qword_101642B08, (uint64_t *)&unk_10164DBD0, (void (*)(void))sub_100037AA0);
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  *(void *)&v10[Item[7]] = v23;
  sub_10000588C(&qword_101664B98);
  char v24 = 4;
  sub_100F3E3DC(&qword_101664BA0, &qword_101664B98, (void (*)(void))sub_100F3E2C0);
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  (*(void (**)(char *, uint64_t))(v18 + 8))(v22, v13);
  *(void *)&v10[Item[8]] = v23;
  sub_100F3E314((uint64_t)v10, v17, type metadata accessor for KeyDropFetchRequest.SharedFetchItem);
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)v16);
  return sub_100F3E37C((uint64_t)v10, type metadata accessor for KeyDropFetchRequest.SharedFetchItem);
}

uint64_t sub_100F3AA08(void *a1)
{
  uint64_t v3 = v1;
  uint64_t v5 = sub_10000588C(&qword_101664B78);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  id v8 = (char *)&v10 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10001CD44(a1, a1[3]);
  sub_100F3E128();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  *(void *)&long long v10 = *(void *)v3;
  char v11 = 0;
  sub_100ECE824();
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  if (!v2)
  {
    *(void *)&long long v10 = *(void *)(v3 + 8);
    char v11 = 1;
    sub_100F3E1D0();
    KeyedEncodingContainer.encode<A>(_:forKey:)();
    *(void *)&long long v10 = *(void *)(v3 + 16);
    char v11 = 2;
    KeyedEncodingContainer.encode<A>(_:forKey:)();
    long long v10 = *(_OWORD *)(v3 + 24);
    char v11 = 3;
    sub_100037BB4();
    KeyedEncodingContainer.encode<A>(_:forKey:)();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
}

uint64_t sub_100F3AC18()
{
  if (*v0) {
    return 0x6546646572616873;
  }
  else {
    return 0x6F43746E65696C63;
  }
}

uint64_t sub_100F3AC68@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_100F3D94C(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_100F3AC90(uint64_t a1)
{
  unint64_t v2 = sub_100F3D854();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_100F3ACCC(uint64_t a1)
{
  unint64_t v2 = sub_100F3D854();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_100F3AD08(void *a1)
{
  return sub_100F39FE8(a1, *(unsigned char *)v1, *(void *)(v1 + 8), *(void *)(v1 + 16), *(void *)(v1 + 24));
}

uint64_t sub_100F3AD2C()
{
  uint64_t result = 0x64496572616873;
  switch(*v0)
  {
    case 1:
      uint64_t result = 1701869940;
      break;
    case 2:
      uint64_t result = 0x6F547265626D656DLL;
      break;
    case 3:
      uint64_t result = 0x76654464656E776FLL;
      break;
    case 4:
      uint64_t result = 0x6E75426572616873;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t sub_100F3ADEC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_100F3DA7C(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_100F3AE14(uint64_t a1)
{
  unint64_t v2 = sub_100F3E224();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_100F3AE50(uint64_t a1)
{
  unint64_t v2 = sub_100F3E224();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_100F3AE8C@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_100F3A4B8(a1, a2);
}

uint64_t sub_100F3AEA4(void *a1)
{
  return sub_100F3A194(a1);
}

unint64_t sub_100F3AEBC()
{
  unint64_t result = 0x6E49656C646E7562;
  switch(*v0)
  {
    case 1:
      unint64_t result = 0x646E497472617473;
      break;
    case 2:
      unint64_t result = 0x7865646E49646E65;
      break;
    case 3:
      unint64_t result = 0xD000000000000013;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t sub_100F3AF5C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_100F3DCE0(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_100F3AF84(uint64_t a1)
{
  unint64_t v2 = sub_100F3E128();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_100F3AFC0(uint64_t a1)
{
  unint64_t v2 = sub_100F3E128();

  return CodingKey.debugDescription.getter(a1, v2);
}

double sub_100F3AFFC@<D0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  sub_100F3DEBC(a1, v6);
  if (!v2)
  {
    double result = *(double *)v6;
    long long v5 = v6[1];
    *(_OWORD *)a2 = v6[0];
    *(_OWORD *)(a2 + 16) = v5;
    *(void *)(a2 + 32) = v7;
  }
  return result;
}

uint64_t sub_100F3B044(void *a1)
{
  return sub_100F3AA08(a1);
}

uint64_t sub_100F3B05C(uint64_t a1, char a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  *(void *)(v5 + 104) = a4;
  *(void *)(v5 + 112) = a5;
  *(unsigned char *)(v5 + 408) = a2;
  *(void *)(v5 + 88) = a1;
  *(void *)(v5 + 96) = a3;
  uint64_t v6 = type metadata accessor for HashAlgorithm();
  *(void *)(v5 + 120) = v6;
  *(void *)(v5 + 128) = *(void *)(v6 - 8);
  *(void *)(v5 + 136) = swift_task_alloc();
  uint64_t v7 = type metadata accessor for P256.Signing.PublicKey();
  *(void *)(v5 + 144) = v7;
  *(void *)(v5 + 152) = *(void *)(v7 - 8);
  *(void *)(v5 + 160) = swift_task_alloc();
  uint64_t v8 = type metadata accessor for P256.Signing.PrivateKey();
  *(void *)(v5 + 168) = v8;
  *(void *)(v5 + 176) = *(void *)(v8 - 8);
  *(void *)(v5 + 184) = swift_task_alloc();
  uint64_t v9 = type metadata accessor for UUID();
  *(void *)(v5 + 192) = v9;
  *(void *)(v5 + 200) = *(void *)(v9 - 8);
  *(void *)(v5 + 208) = swift_task_alloc();
  Iteunint64_t m = type metadata accessor for KeyDropFetchRequest.SharedFetchItem(0);
  *(void *)(v5 + 216) = Item;
  *(void *)(v5 + 224) = *(void *)(Item - 8);
  *(void *)(v5 + 232) = swift_task_alloc();
  uint64_t v11 = type metadata accessor for JSONEncoder.DateEncodingStrategy();
  *(void *)(v5 + 240) = v11;
  *(void *)(v5 + 248) = *(void *)(v11 - 8);
  *(void *)(v5 + 256) = swift_task_alloc();
  uint64_t v12 = type metadata accessor for KeyDropFetchItem(0);
  *(void *)(v5 + 264) = v12;
  *(void *)(v5 + 272) = *(void *)(v12 - 8);
  *(void *)(v5 + 280) = swift_task_alloc();
  return _swift_task_switch(sub_100F3B34C, 0, 0);
}

uint64_t sub_100F3B34C()
{
  uint64_t result = *(void *)(v0 + 88);
  uint64_t v62 = *(void *)(result + 16);
  if (v62)
  {
    unint64_t v2 = 0;
    uint64_t v3 = *(int **)(v0 + 264);
    id v56 = *(int **)(v0 + 216);
    uint64_t v57 = *(void *)(v0 + 224);
    uint64_t v4 = *(void *)(v0 + 200);
    uint64_t v61 = *(void *)(v0 + 272);
    unint64_t v60 = result + ((*(unsigned __int8 *)(v61 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v61 + 80));
    uint64_t v59 = (void (**)(void, uint64_t, void))(v4 + 16);
    uint64_t v54 = (void (**)(uint64_t, uint64_t))(*(void *)(v0 + 152) + 8);
    uint64_t v55 = (void (**)(uint64_t, uint64_t))(*(void *)(v0 + 176) + 8);
    uint64_t v53 = (void (**)(uint64_t, void, void))(v4 + 32);
    uint64_t v5 = _swiftEmptyArrayStorage;
    uint64_t v58 = *(void *)(v0 + 88);
    while (v2 < *(void *)(result + 16))
    {
      uint64_t v6 = *(void *)(v0 + 280);
      sub_100F3E314(v60 + *(void *)(v61 + 72) * v2, v6, type metadata accessor for KeyDropFetchItem);
      uint64_t v7 = *(void *)(v6 + v3[7]);
      int64_t v8 = *(void *)(v7 + 16);
      unint64_t v67 = (unint64_t)v5;
      unint64_t v66 = v2;
      if (v8)
      {
        swift_bridgeObjectRetain();
        sub_1000B7960(0, v8, 0);
        uint64_t v9 = (unint64_t *)(v7 + 64);
        do
        {
          long long v68 = *((_OWORD *)v9 - 2);
          uint64_t v10 = *(v9 - 2);
          uint64_t v11 = *(v9 - 1);
          unint64_t v12 = *v9;
          sub_1000361E0(v11, *v9);
          unint64_t v14 = _swiftEmptyArrayStorage[2];
          unint64_t v13 = _swiftEmptyArrayStorage[3];
          if (v14 >= v13 >> 1) {
            sub_1000B7960(v13 > 1, v14 + 1, 1);
          }
          _swiftEmptyArrayStorage[2] = v14 + 1;
          uint64_t v15 = &_swiftEmptyArrayStorage[5 * v14];
          *((_OWORD *)v15 + 2) = v68;
          v9 += 5;
          v15[6] = v10;
          v15[7] = v11;
          v15[8] = v12;
          --v8;
        }
        while (v8);
        swift_bridgeObjectRelease();
        uint64_t v3 = v64;
        uint64_t v0 = v65;
      }
      else
      {
        uint64_t v0 = v65;
      }
      uint64_t v16 = *(void *)(v0 + 280);
      (*v59)(*(void *)(v0 + 208), v16, *(void *)(v0 + 192));
      char v17 = *(unsigned char *)(v16 + v3[5]);
      uint64_t v18 = v16 + v3[8];
      uint64_t v19 = (uint64_t *)(v18 + *(int *)(type metadata accessor for KeyDropJoinToken(0) + 20));
      uint64_t v20 = *v19;
      unint64_t v21 = v19[1];
      *(void *)(v0 + 48) = *v19;
      *(void *)(v0 + 56) = v21;
      sub_1000361E0(v20, v21);
      P256.Signing.PrivateKey.init<A>(rawRepresentation:)();
      uint64_t v22 = *(void *)(v0 + 280);
      uint64_t v23 = *(void *)(v0 + 184);
      uint64_t v25 = *(void *)(v0 + 160);
      uint64_t v24 = *(void *)(v0 + 168);
      uint64_t v26 = *(void *)(v0 + 144);
      P256.Signing.PrivateKey.publicKey.getter();
      (*v55)(v23, v24);
      uint64_t v27 = P256.Signing.PublicKey.compressedRepresentation.getter();
      uint64_t v69 = v28;
      (*v54)(v25, v26);
      uint64_t v29 = *(void *)(v22 + v3[6]);
      int64_t v30 = *(void *)(v29 + 16);
      if (v30)
      {
        char v63 = v17;
        swift_bridgeObjectRetain();
        sub_1000B765C(0, v30, 0);
        char v31 = (unint64_t *)(v29 + 40);
        do
        {
          uint64_t v33 = *(v31 - 1);
          unint64_t v32 = *v31;
          sub_1000361E0(v33, *v31);
          unint64_t v35 = _swiftEmptyArrayStorage[2];
          unint64_t v34 = _swiftEmptyArrayStorage[3];
          if (v35 >= v34 >> 1) {
            sub_1000B765C(v34 > 1, v35 + 1, 1);
          }
          v31 += 2;
          _swiftEmptyArrayStorage[2] = v35 + 1;
          uint64_t v36 = &_swiftEmptyArrayStorage[2 * v35];
          v36[4] = v33;
          v36[5] = v32;
          --v30;
        }
        while (v30);
        swift_bridgeObjectRelease();
        uint64_t v0 = v65;
        char v17 = v63;
      }
      uint64_t v37 = *(void *)(v0 + 232);
      (*v53)(v37, *(void *)(v0 + 208), *(void *)(v0 + 192));
      *(unsigned char *)(v37 + v56[5]) = v17;
      uint64_t v38 = (uint64_t *)(v37 + v56[6]);
      uint64_t v5 = (void *)v67;
      *uint64_t v38 = v27;
      v38[1] = v69;
      *(void *)(v37 + v56[7]) = _swiftEmptyArrayStorage;
      *(void *)(v37 + v56[8]) = _swiftEmptyArrayStorage;
      uint64_t v3 = v64;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
        uint64_t v5 = (void *)sub_100A70078(0, *(void *)(v67 + 16) + 1, 1, v67);
      }
      unint64_t v40 = v5[2];
      unint64_t v39 = v5[3];
      if (v40 >= v39 >> 1) {
        uint64_t v5 = (void *)sub_100A70078(v39 > 1, v40 + 1, 1, (unint64_t)v5);
      }
      unint64_t v2 = v66 + 1;
      uint64_t v41 = *(void *)(v0 + 280);
      uint64_t v42 = *(void *)(v0 + 232);
      uint64_t v5[2] = v40 + 1;
      sub_100F3C2C0(v42, (uint64_t)v5+ ((*(unsigned __int8 *)(v57 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v57 + 80))+ *(void *)(v57 + 72) * v40);
      sub_100F3E37C(v41, type metadata accessor for KeyDropFetchItem);
      uint64_t result = v58;
      if (v66 + 1 == v62)
      {
        swift_bridgeObjectRelease();
        goto LABEL_24;
      }
    }
    __break(1u);
  }
  else
  {
    swift_bridgeObjectRelease();
    uint64_t v5 = _swiftEmptyArrayStorage;
LABEL_24:
    *(void *)(v0 + 288) = v5;
    uint64_t v44 = *(void *)(v0 + 248);
    uint64_t v43 = *(void **)(v0 + 256);
    uint64_t v45 = *(void *)(v0 + 240);
    uint64_t v46 = v5;
    uint64_t v48 = *(void *)(v0 + 96);
    uint64_t v47 = *(void *)(v0 + 104);
    char v49 = *(unsigned char *)(v0 + 408);
    type metadata accessor for JSONEncoder();
    swift_allocObject();
    *(void *)(v0 + 296) = JSONEncoder.init()();
    void *v43 = sub_1003B9190;
    v43[1] = 0;
    (*(void (**)(void *, void, uint64_t))(v44 + 104))(v43, enum case for JSONEncoder.DateEncodingStrategy.custom(_:), v45);
    dispatch thunk of JSONEncoder.dateEncodingStrategy.setter();
    *(unsigned char *)(v0 + 16) = v49;
    *(void *)(v0 + 24) = v48;
    *(void *)(v0 + 32) = v47;
    *(void *)(v0 + 40) = v46;
    sub_100F3C324();
    swift_bridgeObjectRetain();
    *(void *)(v0 + 304) = dispatch thunk of JSONEncoder.encode<A>(_:)();
    *(void *)(v0 + 312) = v50;
    swift_bridgeObjectRelease();
    uint64_t v51 = swift_bridgeObjectRelease();
    *(void *)(v0 + 320) = sub_1005F52D4(v51);
    uint64_t v70 = (uint64_t (*)(void))((char *)&dword_10165AB98 + dword_10165AB98);
    char v52 = (void *)swift_task_alloc();
    *(void *)(v0 + 328) = v52;
    *char v52 = v0;
    v52[1] = sub_100F3BA74;
    return v70();
  }
  return result;
}

uint64_t sub_100F3BA74(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *v2;
  *(void *)(v3 + 336) = a1;
  *(void *)(v3 + 344) = a2;
  swift_task_dealloc();
  return _swift_task_switch(sub_100F3BB74, 0, 0);
}

uint64_t sub_100F3BB74()
{
  uint64_t v2 = v0[42];
  unint64_t v1 = v0[43];
  uint64_t v4 = v0[38];
  unint64_t v3 = v0[39];
  uint64_t v6 = v0[16];
  uint64_t v5 = v0[17];
  uint64_t v7 = v0[15];
  v0[8] = v2;
  v0[9] = v1;
  sub_1000361E0(v2, v1);
  sub_1000361E0(v4, v3);
  sub_100A42CBC(v4, v3);
  sub_10001CFB8(v4, v3);
  sub_10001CFB8(v2, v1);
  uint64_t v8 = v0[9];
  v0[44] = v0[8];
  v0[45] = v8;
  (*(void (**)(uint64_t, void, uint64_t))(v6 + 104))(v5, enum case for HashAlgorithm.sha256(_:), v7);
  uint64_t v9 = Data.hash(algorithm:)();
  uint64_t v11 = v10;
  v0[46] = v9;
  v0[47] = v10;
  (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v5, v7);
  uint64_t v15 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))((char *)&dword_10165AB90 + dword_10165AB90);
  unint64_t v12 = (void *)swift_task_alloc();
  v0[48] = v12;
  *unint64_t v12 = v0;
  v12[1] = sub_100F3BCFC;
  uint64_t v13 = v0[14];
  return v15(v9, v11, v13);
}

uint64_t sub_100F3BCFC(uint64_t a1)
{
  uint64_t v4 = (void *)*v2;
  v4[49] = v1;
  swift_task_dealloc();
  unint64_t v5 = v4[47];
  uint64_t v6 = v4[46];
  if (v1)
  {
    swift_bridgeObjectRelease();
    sub_10001CFB8(v6, v5);
    uint64_t v7 = sub_100F3BFE8;
  }
  else
  {
    v4[50] = a1;
    sub_10001CFB8(v6, v5);
    uint64_t v7 = sub_100F3BE70;
  }
  return _swift_task_switch(v7, 0, 0);
}

uint64_t sub_100F3BE70()
{
  uint64_t v13 = v0;
  uint64_t v2 = v0[49];
  uint64_t v1 = v0[50];
  uint64_t v3 = v0[40];
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v12 = v3;
  sub_1001EE9C8(v1, (uint64_t)sub_100BD6E00, 0, isUniquelyReferenced_nonNull_native, &v12);
  if (v2)
  {
    return swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v7 = v0[44];
    unint64_t v6 = v0[45];
    uint64_t v8 = v12;
    swift_bridgeObjectRelease();
    sub_10001CFB8(v7, v6);
    swift_release();
    swift_release();
    swift_bridgeObjectRelease();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v9 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))v0[1];
    uint64_t v10 = v0[38];
    uint64_t v11 = v0[39];
    return v9(v8, v10, v11);
  }
}

uint64_t sub_100F3BFE8()
{
  sub_10001CFB8(v0[44], v0[45]);
  if (qword_101637628 != -1) {
    swift_once();
  }
  uint64_t v1 = type metadata accessor for Logger();
  sub_100010324(v1, (uint64_t)qword_10170F7C8);
  swift_errorRetain();
  swift_errorRetain();
  uint64_t v2 = Logger.logObject.getter();
  os_log_type_t v3 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v2, v3))
  {
    uint64_t v4 = (uint8_t *)swift_slowAlloc();
    unint64_t v5 = (void *)swift_slowAlloc();
    *(_DWORD *)uint64_t v4 = 138543362;
    swift_errorRetain();
    uint64_t v6 = _swift_stdlib_bridgeErrorToNSError();
    v0[10] = v6;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *unint64_t v5 = v6;
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl((void *)&_mh_execute_header, v2, v3, "Failed to generate keydrop fetch attestation header: %{public}@.", v4, 0xCu);
    sub_10000588C((uint64_t *)&unk_101638EA0);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
    swift_release();
    swift_release();

    swift_errorRelease();
  }
  else
  {
    swift_release();
    swift_errorRelease();
    swift_errorRelease();
    swift_errorRelease();
    swift_release();
  }
  uint64_t v7 = v0[40];
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v8 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))v0[1];
  uint64_t v9 = v0[38];
  uint64_t v10 = v0[39];
  return v8(v7, v9, v10);
}

uint64_t type metadata accessor for KeyDropFetchRequest.SharedFetchItem(uint64_t a1)
{
  return sub_1000F4EA4(a1, qword_101664AE8);
}

uint64_t type metadata accessor for KeyDropFetchItem(uint64_t a1)
{
  return sub_1000F4EA4(a1, qword_101664A48);
}

uint64_t sub_100F3C2C0(uint64_t a1, uint64_t a2)
{
  Iteunint64_t m = type metadata accessor for KeyDropFetchRequest.SharedFetchItem(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(Item - 8) + 32))(a2, a1, Item);
  return a2;
}

unint64_t sub_100F3C324()
{
  unint64_t result = qword_1016649E8;
  if (!qword_1016649E8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1016649E8);
  }
  return result;
}

uint64_t initializeWithCopy for KeyDropDecryptionRange(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  uint64_t v3 = *(void *)(a2 + 24);
  unint64_t v4 = *(void *)(a2 + 32);
  sub_1000361E0(v3, v4);
  *(void *)(a1 + 24) = v3;
  *(void *)(a1 + 32) = v4;
  return a1;
}

ValueMetadata *type metadata accessor for KeyDropDecryptionRange()
{
  return &type metadata for KeyDropDecryptionRange;
}

uint64_t destroy for KeyDropFetchRequest.BundleDecryption(uint64_t a1)
{
  return sub_10001CFB8(*(void *)(a1 + 24), *(void *)(a1 + 32));
}

uint64_t initializeWithCopy for KeyDropFetchRequest.BundleDecryption(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  uint64_t v3 = *(void *)(a2 + 24);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  unint64_t v4 = *(void *)(a2 + 32);
  sub_1000361E0(v3, v4);
  *(void *)(a1 + 24) = v3;
  *(void *)(a1 + 32) = v4;
  return a1;
}

void *_s12searchpartyd22KeyDropDecryptionRangeVwca_0(void *a1, void *a2)
{
  *a1 = *a2;
  a1[1] = a2[1];
  a1[2] = a2[2];
  uint64_t v3 = a2[3];
  unint64_t v4 = a2[4];
  sub_1000361E0(v3, v4);
  uint64_t v5 = a1[3];
  unint64_t v6 = a1[4];
  a1[3] = v3;
  a1[4] = v4;
  sub_10001CFB8(v5, v6);
  return a1;
}

uint64_t _s12searchpartyd22KeyDropDecryptionRangeVwta_0(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 32);
  uint64_t v4 = *(void *)(a1 + 24);
  unint64_t v5 = *(void *)(a1 + 32);
  long long v6 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v6;
  *(void *)(a1 + 32) = v3;
  sub_10001CFB8(v4, v5);
  return a1;
}

uint64_t _s12searchpartyd22KeyDropDecryptionRangeVwet_0(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0xD && *(unsigned char *)(a1 + 40)) {
    return (*(_DWORD *)a1 + 13);
  }
  unsigned int v3 = (((*(void *)(a1 + 32) >> 60) >> 2) & 0xFFFFFFF3 | (4 * ((*(void *)(a1 + 32) >> 60) & 3))) ^ 0xF;
  if (v3 >= 0xC) {
    unsigned int v3 = -1;
  }
  return v3 + 1;
}

uint64_t _s12searchpartyd22KeyDropDecryptionRangeVwst_0(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xC)
  {
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(void *)unint64_t result = a2 - 13;
    if (a3 >= 0xD) {
      *(unsigned char *)(result + 40) = 1;
    }
  }
  else
  {
    if (a3 >= 0xD) {
      *(unsigned char *)(result + 40) = 0;
    }
    if (a2)
    {
      *(void *)(result + 24) = 0;
      *(void *)(result + 32) = (unint64_t)(((-a2 >> 2) & 3) - 4 * a2) << 60;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for KeyDropFetchRequest.BundleDecryption()
{
  return &type metadata for KeyDropFetchRequest.BundleDecryption;
}

uint64_t initializeWithCopy for KeyDropFetchRequest.KeyDropFetchContent(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  uint64_t v3 = *(void *)(a2 + 16);
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(void *)(a1 + 16) = v3;
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for KeyDropFetchRequest.KeyDropFetchContent(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t assignWithTake for KeyDropFetchRequest.KeyDropFetchContent(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  swift_bridgeObjectRelease();
  return a1;
}

ValueMetadata *type metadata accessor for KeyDropFetchRequest.KeyDropFetchContent()
{
  return &type metadata for KeyDropFetchRequest.KeyDropFetchContent;
}

char *sub_100F3C6BC(char *a1, char *a2, int *a3)
{
  int v5 = *(_DWORD *)(*((void *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v18 = *(void *)a2;
    *(void *)a1 = *(void *)a2;
    a1 = (char *)(v18 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v7 = type metadata accessor for UUID();
    uint64_t v8 = *(void (**)(char *, char *, uint64_t))(*(void *)(v7 - 8) + 16);
    v8(a1, a2, v7);
    uint64_t v9 = a3[6];
    a1[a3[5]] = a2[a3[5]];
    *(void *)&a1[v9] = *(void *)&a2[v9];
    uint64_t v10 = a3[8];
    *(void *)&a1[a3[7]] = *(void *)&a2[a3[7]];
    uint64_t v11 = &a1[v10];
    uint64_t v12 = &a2[v10];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v8(v11, v12, v7);
    uint64_t v13 = *(int *)(type metadata accessor for KeyDropJoinToken(0) + 20);
    uint64_t v14 = (uint64_t *)&v11[v13];
    uint64_t v15 = (uint64_t *)&v12[v13];
    uint64_t v16 = *v15;
    unint64_t v17 = v15[1];
    sub_1000361E0(*v15, v17);
    *uint64_t v14 = v16;
    v14[1] = v17;
  }
  return a1;
}

uint64_t sub_100F3C804(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for UUID();
  int v5 = *(void (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8);
  v5(a1, v4);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v6 = a1 + *(int *)(a2 + 32);
  v5(v6, v4);
  uint64_t v7 = (uint64_t *)(v6 + *(int *)(type metadata accessor for KeyDropJoinToken(0) + 20));
  uint64_t v8 = *v7;
  unint64_t v9 = v7[1];

  return sub_10001CFB8(v8, v9);
}

uint64_t sub_100F3C8CC(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for UUID();
  uint64_t v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 16);
  v7(a1, a2, v6);
  uint64_t v8 = a3[6];
  *(unsigned char *)(a1 + a3[5]) = *(unsigned char *)(a2 + a3[5]);
  *(void *)(a1 + v8) = *(void *)(a2 + v8);
  uint64_t v9 = a3[8];
  *(void *)(a1 + a3[7]) = *(void *)(a2 + a3[7]);
  uint64_t v10 = a1 + v9;
  uint64_t v11 = a2 + v9;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v7(v10, v11, v6);
  uint64_t v12 = *(int *)(type metadata accessor for KeyDropJoinToken(0) + 20);
  uint64_t v13 = (uint64_t *)(v10 + v12);
  uint64_t v14 = (uint64_t *)(v11 + v12);
  uint64_t v15 = *v14;
  unint64_t v16 = v14[1];
  sub_1000361E0(*v14, v16);
  *uint64_t v13 = v15;
  v13[1] = v16;
  return a1;
}

uint64_t sub_100F3C9C4(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for UUID();
  uint64_t v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 24);
  v7(a1, a2, v6);
  *(unsigned char *)(a1 + a3[5]) = *(unsigned char *)(a2 + a3[5]);
  *(void *)(a1 + a3[6]) = *(void *)(a2 + a3[6]);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + a3[7]) = *(void *)(a2 + a3[7]);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v8 = a3[8];
  uint64_t v9 = a1 + v8;
  uint64_t v10 = a2 + v8;
  v7(a1 + v8, v10, v6);
  uint64_t v11 = *(int *)(type metadata accessor for KeyDropJoinToken(0) + 20);
  uint64_t v12 = (uint64_t *)(v9 + v11);
  uint64_t v13 = (uint64_t *)(v10 + v11);
  uint64_t v14 = *v13;
  unint64_t v15 = v13[1];
  sub_1000361E0(*v13, v15);
  uint64_t v16 = *v12;
  unint64_t v17 = v12[1];
  *uint64_t v12 = v14;
  v12[1] = v15;
  sub_10001CFB8(v16, v17);
  return a1;
}

uint64_t sub_100F3CAE0(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for UUID();
  uint64_t v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 32);
  v7(a1, a2, v6);
  uint64_t v8 = a3[6];
  *(unsigned char *)(a1 + a3[5]) = *(unsigned char *)(a2 + a3[5]);
  *(void *)(a1 + v8) = *(void *)(a2 + v8);
  uint64_t v9 = a3[8];
  *(void *)(a1 + a3[7]) = *(void *)(a2 + a3[7]);
  uint64_t v10 = a1 + v9;
  uint64_t v11 = a2 + v9;
  v7(a1 + v9, v11, v6);
  uint64_t v12 = type metadata accessor for KeyDropJoinToken(0);
  *(_OWORD *)(v10 + *(int *)(v12 + 20)) = *(_OWORD *)(v11 + *(int *)(v12 + 20));
  return a1;
}

uint64_t sub_100F3CBB0(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for UUID();
  uint64_t v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 40);
  v7(a1, a2, v6);
  uint64_t v8 = a3[6];
  *(unsigned char *)(a1 + a3[5]) = *(unsigned char *)(a2 + a3[5]);
  *(void *)(a1 + v8) = *(void *)(a2 + v8);
  swift_bridgeObjectRelease();
  *(void *)(a1 + a3[7]) = *(void *)(a2 + a3[7]);
  swift_bridgeObjectRelease();
  uint64_t v9 = a3[8];
  uint64_t v10 = a1 + v9;
  uint64_t v11 = a2 + v9;
  v7(a1 + v9, v11, v6);
  uint64_t v12 = *(int *)(type metadata accessor for KeyDropJoinToken(0) + 20);
  uint64_t v13 = *(void *)(v10 + v12);
  unint64_t v14 = *(void *)(v10 + v12 + 8);
  *(_OWORD *)(v10 + v12) = *(_OWORD *)(v11 + v12);
  sub_10001CFB8(v13, v14);
  return a1;
}

uint64_t sub_100F3CCA0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_100F3CCB4);
}

uint64_t sub_100F3CCB4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for UUID();
  uint64_t v7 = *(void *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == a2)
  {
    uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    return v8(a1, a2, v6);
  }
  else if (a2 == 0x7FFFFFFF)
  {
    unint64_t v10 = *(void *)(a1 + *(int *)(a3 + 24));
    if (v10 >= 0xFFFFFFFF) {
      LODWORD(v10) = -1;
    }
    return (v10 + 1);
  }
  else
  {
    uint64_t v11 = type metadata accessor for KeyDropJoinToken(0);
    uint64_t v12 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v11 - 8) + 48);
    uint64_t v13 = v11;
    uint64_t v14 = a1 + *(int *)(a3 + 32);
    return v12(v14, a2, v13);
  }
}

uint64_t sub_100F3CDE0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_100F3CDF4);
}

uint64_t sub_100F3CDF4(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result = type metadata accessor for UUID();
  uint64_t v9 = *(void *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    unint64_t v10 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    return v10(a1, a2, a2, result);
  }
  else if (a3 == 0x7FFFFFFF)
  {
    *(void *)(a1 + *(int *)(a4 + 24)) = (a2 - 1);
  }
  else
  {
    uint64_t v11 = type metadata accessor for KeyDropJoinToken(0);
    uint64_t v12 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v11 - 8) + 56);
    uint64_t v13 = v11;
    uint64_t v14 = a1 + *(int *)(a4 + 32);
    return v12(v14, a2, a2, v13);
  }
  return result;
}

uint64_t sub_100F3CF20()
{
  uint64_t result = type metadata accessor for UUID();
  if (v1 <= 0x3F)
  {
    uint64_t result = type metadata accessor for KeyDropJoinToken(319);
    if (v2 <= 0x3F)
    {
      swift_initStructMetadata();
      return 0;
    }
  }
  return result;
}

void *sub_100F3D000(void *a1, void *a2, int *a3)
{
  int v5 = *(_DWORD *)(*((void *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v12 = *a2;
    *a1 = *a2;
    a1 = (void *)(v12 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v7 = type metadata accessor for UUID();
    (*(void (**)(void *, void *, uint64_t))(*(void *)(v7 - 8) + 16))(a1, a2, v7);
    uint64_t v8 = a3[6];
    *((unsigned char *)a1 + a3[5]) = *((unsigned char *)a2 + a3[5]);
    uint64_t v9 = (char *)a1 + v8;
    unint64_t v10 = (void *)((char *)a2 + v8);
    unint64_t v11 = *(void *)((char *)a2 + v8 + 8);
    if (v11 >> 60 == 15)
    {
      *(_OWORD *)uint64_t v9 = *(_OWORD *)v10;
    }
    else
    {
      uint64_t v13 = *v10;
      sub_1000361E0(*v10, v11);
      *(void *)uint64_t v9 = v13;
      *((void *)v9 + 1) = v11;
    }
    uint64_t v14 = a3[8];
    *(void *)((char *)a1 + a3[7]) = *(void *)((char *)a2 + a3[7]);
    *(void *)((char *)a1 + v14) = *(void *)((char *)a2 + v14);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  return a1;
}

uint64_t sub_100F3D12C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8))(a1, v4);
  int v5 = (uint64_t *)(a1 + *(int *)(a2 + 24));
  unint64_t v6 = v5[1];
  if (v6 >> 60 != 15) {
    sub_10001CFB8(*v5, v6);
  }
  swift_bridgeObjectRelease();

  return swift_bridgeObjectRelease();
}

uint64_t sub_100F3D1CC(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 16))(a1, a2, v6);
  uint64_t v7 = a3[6];
  *(unsigned char *)(a1 + a3[5]) = *(unsigned char *)(a2 + a3[5]);
  uint64_t v8 = a1 + v7;
  uint64_t v9 = (uint64_t *)(a2 + v7);
  unint64_t v10 = *(void *)(a2 + v7 + 8);
  if (v10 >> 60 == 15)
  {
    *(_OWORD *)uint64_t v8 = *(_OWORD *)v9;
  }
  else
  {
    uint64_t v11 = *v9;
    sub_1000361E0(*v9, v10);
    *(void *)uint64_t v8 = v11;
    *(void *)(v8 + 8) = v10;
  }
  uint64_t v12 = a3[8];
  *(void *)(a1 + a3[7]) = *(void *)(a2 + a3[7]);
  *(void *)(a1 + v12) = *(void *)(a2 + v12);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t sub_100F3D2A8(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 24))(a1, a2, v6);
  *(unsigned char *)(a1 + a3[5]) = *(unsigned char *)(a2 + a3[5]);
  uint64_t v7 = a3[6];
  uint64_t v8 = (uint64_t *)(a1 + v7);
  uint64_t v9 = (uint64_t *)(a2 + v7);
  unint64_t v10 = *(void *)(a2 + v7 + 8);
  if (*(void *)(a1 + v7 + 8) >> 60 != 15)
  {
    if (v10 >> 60 != 15)
    {
      uint64_t v12 = *v9;
      sub_1000361E0(v12, v10);
      uint64_t v13 = *v8;
      unint64_t v14 = v8[1];
      *uint64_t v8 = v12;
      v8[1] = v10;
      sub_10001CFB8(v13, v14);
      goto LABEL_8;
    }
    sub_1001356D0((uint64_t)v8);
    goto LABEL_6;
  }
  if (v10 >> 60 == 15)
  {
LABEL_6:
    *(_OWORD *)uint64_t v8 = *(_OWORD *)v9;
    goto LABEL_8;
  }
  uint64_t v11 = *v9;
  sub_1000361E0(v11, v10);
  *uint64_t v8 = v11;
  v8[1] = v10;
LABEL_8:
  *(void *)(a1 + a3[7]) = *(void *)(a2 + a3[7]);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + a3[8]) = *(void *)(a2 + a3[8]);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t sub_100F3D3E4(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 32))(a1, a2, v6);
  uint64_t v7 = a3[6];
  *(unsigned char *)(a1 + a3[5]) = *(unsigned char *)(a2 + a3[5]);
  *(_OWORD *)(a1 + v7) = *(_OWORD *)(a2 + v7);
  uint64_t v8 = a3[8];
  *(void *)(a1 + a3[7]) = *(void *)(a2 + a3[7]);
  *(void *)(a1 + v8) = *(void *)(a2 + v8);
  return a1;
}

uint64_t sub_100F3D47C(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 40))(a1, a2, v6);
  uint64_t v7 = a3[6];
  *(unsigned char *)(a1 + a3[5]) = *(unsigned char *)(a2 + a3[5]);
  uint64_t v8 = (uint64_t *)(a1 + v7);
  uint64_t v9 = (uint64_t *)(a2 + v7);
  unint64_t v10 = *(void *)(a1 + v7 + 8);
  if (v10 >> 60 != 15)
  {
    unint64_t v11 = v9[1];
    if (v11 >> 60 != 15)
    {
      uint64_t v12 = *v8;
      *uint64_t v8 = *v9;
      v8[1] = v11;
      sub_10001CFB8(v12, v10);
      goto LABEL_6;
    }
    sub_1001356D0((uint64_t)v8);
  }
  *(_OWORD *)uint64_t v8 = *(_OWORD *)v9;
LABEL_6:
  *(void *)(a1 + a3[7]) = *(void *)(a2 + a3[7]);
  swift_bridgeObjectRelease();
  *(void *)(a1 + a3[8]) = *(void *)(a2 + a3[8]);
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t sub_100F3D574(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_100F3D588);
}

uint64_t sub_100F3D588(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for UUID();
  uint64_t v7 = *(void *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == a2)
  {
    uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    return v8(a1, a2, v6);
  }
  else
  {
    unint64_t v10 = *(void *)(a1 + *(int *)(a3 + 28));
    if (v10 >= 0xFFFFFFFF) {
      LODWORD(v10) = -1;
    }
    return (v10 + 1);
  }
}

uint64_t sub_100F3D648(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_100F3D65C);
}

uint64_t sub_100F3D65C(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result = type metadata accessor for UUID();
  uint64_t v9 = *(void *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    unint64_t v10 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    return v10(a1, a2, a2, result);
  }
  else
  {
    *(void *)(a1 + *(int *)(a4 + 28)) = (a2 - 1);
  }
  return result;
}

uint64_t sub_100F3D718()
{
  uint64_t result = type metadata accessor for UUID();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

ValueMetadata *type metadata accessor for KeyDropFetchRequest()
{
  return &type metadata for KeyDropFetchRequest;
}

unint64_t sub_100F3D7D8(uint64_t a1)
{
  unint64_t result = sub_100F3D800();
  *(void *)(a1 + 8) = result;
  return result;
}

unint64_t sub_100F3D800()
{
  unint64_t result = qword_101664B30;
  if (!qword_101664B30)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_101664B30);
  }
  return result;
}

unint64_t sub_100F3D854()
{
  unint64_t result = qword_101664B40;
  if (!qword_101664B40)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_101664B40);
  }
  return result;
}

unint64_t sub_100F3D8A8()
{
  unint64_t result = qword_101664B50;
  if (!qword_101664B50)
  {
    sub_10000592C(&qword_101664B48);
    sub_100F3E278(&qword_101664B58, (void (*)(uint64_t))type metadata accessor for KeyDropFetchRequest.SharedFetchItem);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_101664B50);
  }
  return result;
}

uint64_t sub_100F3D94C(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 0x6F43746E65696C63 && a2 == 0xED0000747865746ELL;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x6546646572616873 && a2 == 0xEB00000000686374)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else
  {
    char v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v6) {
      return 1;
    }
    else {
      return 2;
    }
  }
}

uint64_t sub_100F3DA7C(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 0x64496572616873 && a2 == 0xE700000000000000;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 1701869940 && a2 == 0xE400000000000000 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0x6F547265626D656DLL && a2 == 0xEB000000006E656BLL {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else if (a1 == 0x76654464656E776FLL && a2 == 0xEE00736449656369 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 3;
  }
  else if (a1 == 0x6E75426572616873 && a2 == 0xEC00000073656C64)
  {
    swift_bridgeObjectRelease();
    return 4;
  }
  else
  {
    char v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v6) {
      return 4;
    }
    else {
      return 5;
    }
  }
}

uint64_t sub_100F3DCE0(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 0x6E49656C646E7562 && a2 == 0xEB00000000786564;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x646E497472617473 && a2 == 0xEA00000000007865 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0x7865646E49646E65 && a2 == 0xE800000000000000 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else if (a1 == 0xD000000000000013 && a2 == 0x800000010141B440)
  {
    swift_bridgeObjectRelease();
    return 3;
  }
  else
  {
    char v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v6) {
      return 3;
    }
    else {
      return 4;
    }
  }
}

uint64_t sub_100F3DEBC@<X0>(void *a1@<X0>, void *a2@<X8>)
{
  uint64_t v5 = sub_10000588C(&qword_101664B60);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v8 = (char *)&v16 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10001CD44(a1, a1[3]);
  sub_100F3E128();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v2) {
    return _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)a1);
  }
  char v20 = 0;
  sub_100ECE7D0();
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  uint64_t v9 = v18;
  char v20 = 1;
  sub_100F3E17C();
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  uint64_t v17 = v9;
  uint64_t v10 = v18;
  char v20 = 2;
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  uint64_t v11 = v10;
  uint64_t v12 = v18;
  char v20 = 3;
  sub_100037AA0();
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  uint64_t v13 = v18;
  uint64_t v14 = v19;
  uint64_t result = _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)a1);
  *a2 = v17;
  a2[1] = v11;
  a2[2] = v12;
  a2[3] = v13;
  a2[4] = v14;
  return result;
}

unint64_t sub_100F3E128()
{
  unint64_t result = qword_101664B68;
  if (!qword_101664B68)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_101664B68);
  }
  return result;
}

unint64_t sub_100F3E17C()
{
  unint64_t result = qword_101664B70;
  if (!qword_101664B70)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_101664B70);
  }
  return result;
}

unint64_t sub_100F3E1D0()
{
  unint64_t result = qword_101664B80;
  if (!qword_101664B80)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_101664B80);
  }
  return result;
}

unint64_t sub_100F3E224()
{
  unint64_t result = qword_101664B90;
  if (!qword_101664B90)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_101664B90);
  }
  return result;
}

uint64_t sub_100F3E278(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

unint64_t sub_100F3E2C0()
{
  unint64_t result = qword_101664BA8;
  if (!qword_101664BA8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_101664BA8);
  }
  return result;
}

uint64_t sub_100F3E314(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

uint64_t sub_100F3E37C(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t sub_100F3E3DC(unint64_t *a1, uint64_t *a2, void (*a3)(void))
{
  uint64_t result = *a1;
  if (!result)
  {
    sub_10000592C(a2);
    a3();
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

unint64_t sub_100F3E448()
{
  unint64_t result = qword_101664BC0;
  if (!qword_101664BC0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_101664BC0);
  }
  return result;
}

unsigned char *storeEnumTagSinglePayload for KeyDropFetchRequest.SharedFetchItem.CodingKeys(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 4 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 4) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFC) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFB)
  {
    unsigned int v6 = ((a2 - 252) >> 8) + 1;
    *unint64_t result = a2 + 4;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x100F3E568);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 4;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for KeyDropFetchRequest.SharedFetchItem.CodingKeys()
{
  return &type metadata for KeyDropFetchRequest.SharedFetchItem.CodingKeys;
}

unsigned char *storeEnumTagSinglePayload for KeyDropFetchRequest.BundleDecryption.CodingKeys(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 3 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 3) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFD) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFC)
  {
    unsigned int v6 = ((a2 - 253) >> 8) + 1;
    *unint64_t result = a2 + 3;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x100F3E66CLL);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 3;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for KeyDropFetchRequest.BundleDecryption.CodingKeys()
{
  return &type metadata for KeyDropFetchRequest.BundleDecryption.CodingKeys;
}

unsigned char *storeEnumTagSinglePayload for KeyDropFetchRequest.KeyDropFetchContent.CodingKeys(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFE)
  {
    unsigned int v6 = ((a2 - 255) >> 8) + 1;
    *unint64_t result = a2 + 1;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x100F3E770);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 1;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for KeyDropFetchRequest.KeyDropFetchContent.CodingKeys()
{
  return &type metadata for KeyDropFetchRequest.KeyDropFetchContent.CodingKeys;
}

unint64_t sub_100F3E7AC()
{
  unint64_t result = qword_101664BC8;
  if (!qword_101664BC8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_101664BC8);
  }
  return result;
}

unint64_t sub_100F3E804()
{
  unint64_t result = qword_101664BD0;
  if (!qword_101664BD0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_101664BD0);
  }
  return result;
}

unint64_t sub_100F3E85C()
{
  unint64_t result = qword_101664BD8;
  if (!qword_101664BD8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_101664BD8);
  }
  return result;
}

unint64_t sub_100F3E8B4()
{
  unint64_t result = qword_101664BE0;
  if (!qword_101664BE0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_101664BE0);
  }
  return result;
}

unint64_t sub_100F3E90C()
{
  unint64_t result = qword_101664BE8;
  if (!qword_101664BE8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_101664BE8);
  }
  return result;
}

unint64_t sub_100F3E964()
{
  unint64_t result = qword_101664BF0;
  if (!qword_101664BF0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_101664BF0);
  }
  return result;
}

unint64_t sub_100F3E9BC()
{
  unint64_t result = qword_101664BF8;
  if (!qword_101664BF8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_101664BF8);
  }
  return result;
}

unint64_t sub_100F3EA14()
{
  unint64_t result = qword_101664C00;
  if (!qword_101664C00)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_101664C00);
  }
  return result;
}

unint64_t sub_100F3EA6C()
{
  unint64_t result = qword_101664C08;
  if (!qword_101664C08)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, &qword_101664C08);
  }
  return result;
}

uint64_t sub_100F3EAC4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v4[10] = a3;
  v4[11] = v3;
  v4[8] = a1;
  v4[9] = a2;
  type metadata accessor for String.Encoding();
  v4[12] = swift_task_alloc();
  return _swift_task_switch(sub_100F3EB58, v3, 0);
}

uint64_t sub_100F3EB58()
{
  unint64_t v34 = v0;
  if (qword_101637628 != -1) {
    swift_once();
  }
  uint64_t v1 = type metadata accessor for Logger();
  sub_100010324(v1, (uint64_t)qword_10170F7C8);
  uint64_t v2 = Logger.logObject.getter();
  os_log_type_t v3 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v2, v3))
  {
    unsigned int v4 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)unsigned int v4 = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, v3, "Fetch request", v4, 2u);
    swift_slowDealloc();
  }
  uint64_t v6 = v0[9];
  unint64_t v5 = v0[10];

  swift_bridgeObjectRetain();
  sub_1000361E0(v6, v5);
  swift_bridgeObjectRetain();
  sub_1000361E0(v6, v5);
  uint64_t v7 = Logger.logObject.getter();
  os_log_type_t v8 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v7, v8))
  {
    uint64_t v9 = v0[9];
    unint64_t v10 = v0[10];
    uint64_t v11 = (uint8_t *)swift_slowAlloc();
    uint64_t v33 = swift_slowAlloc();
    *(_DWORD *)uint64_t v11 = 136315138;
    swift_bridgeObjectRetain();
    sub_1000361E0(v9, v10);
    sub_1000361E0(v9, v10);
    static String.Encoding.utf8.getter();
    uint64_t v12 = String.init(data:encoding:)();
    if (v13)
    {
      uint64_t v14 = v12;
      unint64_t v15 = v13;
      uint64_t v17 = v0[9];
      unint64_t v16 = v0[10];
      sub_10001CFB8(v17, v16);
      swift_bridgeObjectRelease();
      sub_10001CFB8(v17, v16);
    }
    else
    {
      char v20 = Logger.logObject.getter();
      os_log_type_t v21 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v20, v21))
      {
        uint64_t v22 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)uint64_t v22 = 0;
        _os_log_impl((void *)&_mh_execute_header, v20, v21, "Empty description for request body.", v22, 2u);
        swift_slowDealloc();
      }
      uint64_t v24 = v0[9];
      unint64_t v23 = v0[10];

      sub_10001CFB8(v24, v23);
      swift_bridgeObjectRelease();
      sub_10001CFB8(v24, v23);
      unint64_t v15 = 0xE300000000000000;
      uint64_t v14 = 7104878;
    }
    uint64_t v26 = v0[9];
    unint64_t v25 = v0[10];
    v0[7] = sub_1008FA0F0(v14, v15, &v33);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    sub_10001CFB8(v26, v25);
    swift_bridgeObjectRelease();
    sub_10001CFB8(v26, v25);
    _os_log_impl((void *)&_mh_execute_header, v7, v8, "KeyDropFetchRequest: %s", v11, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    uint64_t v19 = v0[9];
    unint64_t v18 = v0[10];
    swift_bridgeObjectRelease();
    sub_10001CFB8(v19, v18);
    swift_bridgeObjectRelease();
    sub_10001CFB8(v19, v18);
  }

  uint64_t v27 = v0[9];
  unint64_t v28 = v0[10];
  uint64_t v29 = v0[8];
  v0[5] = &type metadata for KeyDropFetchRequest;
  v0[6] = sub_100F3F1B4();
  v0[2] = v29;
  v0[3] = v27;
  v0[4] = v28;
  swift_bridgeObjectRetain();
  sub_1000361E0(v27, v28);
  unint64_t v32 = (uint64_t (*)(uint64_t, char))((char *)&dword_101649F38 + dword_101649F38);
  int64_t v30 = (void *)swift_task_alloc();
  v0[13] = v30;
  *int64_t v30 = v0;
  v30[1] = sub_100F3EFC0;
  return v32((uint64_t)(v0 + 2), 4);
}

uint64_t sub_100F3EFC0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t v10 = (void *)*v5;
  v10[14] = v4;
  swift_task_dealloc();
  if (v4)
  {
    uint64_t v11 = v10[11];
    return _swift_task_switch(sub_100F3F144, v11, 0);
  }
  else
  {
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)(v10 + 2));
    swift_task_dealloc();
    uint64_t v12 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))v10[1];
    return v12(a1, a2, a3, a4);
  }
}

uint64_t sub_100F3F144()
{
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v0 + 16);
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

unint64_t sub_100F3F1B4()
{
  unint64_t result = qword_101664C18;
  if (!qword_101664C18)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_101664C18);
  }
  return result;
}

uint64_t sub_100F3F208(uint64_t a1, char a2, id a3)
{
  [a3 fileDescriptor];
  uint64_t v7 = sp_key_subsequence_create_from_file_descriptor();
  if (v7)
  {
    uint64_t v8 = v7;
    uint64_t v9 = v3 + OBJC_IVAR____TtC12searchpartyd20BeaconKeySubsequence_beaconIdentifier;
    uint64_t v10 = type metadata accessor for UUID();
    uint64_t v11 = *(void *)(v10 - 8);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v11 + 16))(v9, a1, v10);
    *(unsigned char *)(v3 + OBJC_IVAR____TtC12searchpartyd20BeaconKeySubsequence_sequence) = a2;
    *(void *)(v3 + OBJC_IVAR____TtC12searchpartyd20BeaconKeySubsequence_subsequenceHandle) = v8;
    *(_DWORD *)(v3 + OBJC_IVAR____TtC12searchpartyd20BeaconKeySubsequence_firstIndex) = sp_key_subsequence_map_get_first_index();
    int last_index = sp_key_subsequence_map_get_last_index();

    (*(void (**)(uint64_t, uint64_t))(v11 + 8))(a1, v10);
    *(_DWORD *)(v3 + OBJC_IVAR____TtC12searchpartyd20BeaconKeySubsequence_lastIndex) = last_index;
  }
  else
  {

    uint64_t v13 = type metadata accessor for UUID();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v13 - 8) + 8))(a1, v13);
    type metadata accessor for BeaconKeySubsequence();
    swift_deallocPartialClassInstance();
    return 0;
  }
  return v3;
}

uint64_t sub_100F3F3C4()
{
  sp_key_subsequence_destroy();
  uint64_t v1 = v0 + OBJC_IVAR____TtC12searchpartyd20BeaconKeySubsequence_beaconIdentifier;
  uint64_t v2 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(v1, v2);

  return swift_deallocClassInstance();
}

uint64_t sub_100F3F474()
{
  return type metadata accessor for BeaconKeySubsequence();
}

uint64_t type metadata accessor for BeaconKeySubsequence()
{
  uint64_t result = qword_101664C50;
  if (!qword_101664C50) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t sub_100F3F4C8()
{
  uint64_t result = type metadata accessor for UUID();
  if (v1 <= 0x3F)
  {
    uint64_t result = swift_updateClassMetadata2();
    if (!result) {
      return 0;
    }
  }
  return result;
}

uint64_t sub_100F3F580@<X0>(unsigned int a1@<W0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X8>)
{
  uint64_t v9 = type metadata accessor for CryptoError();
  uint64_t v10 = __chkstk_darwin(v9);
  __chkstk_darwin(v10);
  if (*(_DWORD *)(a2 + OBJC_IVAR____TtC12searchpartyd20BeaconKeySubsequence_firstIndex) > a1
    || *(_DWORD *)(a2 + OBJC_IVAR____TtC12searchpartyd20BeaconKeySubsequence_lastIndex) < a1)
  {
    sub_1006CACF4();
    swift_allocError();
    unsigned char *v11 = 4;
    return swift_willThrow();
  }
  uint64_t v74 = a3;
  unint64_t record_for_index = sp_key_subsequence_get_record_for_index();
  id v13 = (id)sp_key_record_copy_intermediate_key();
  if (!v13)
  {
    __break(1u);
    goto LABEL_35;
  }
  uint64_t v14 = v13;
  uint64_t v15 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
  unint64_t v17 = v16;

  sub_100434DF4(v15, v17, &v75);
  if (!v4)
  {
    uint64_t v69 = a4;
    uint64_t v19 = v75;
    unint64_t v18 = v76;
    type metadata accessor for __DataStorage();
    swift_allocObject();
    unint64_t v20 = __DataStorage.init(length:)() | 0x4000000000000000;
    sub_1000361E0(v19, v18);
    LOBYTE(v20) = _s12searchpartyd24KeyRepresentableInternalV23__derived_struct_equalsySbAC_ACtFZ_0(v19, v18, 0x2000000000, v20);
    sub_10001CFB8(v19, v18);
    swift_release();
    if (v20)
    {
      uint64_t v21 = 0;
      unint64_t v22 = 0xF000000000000000;
    }
    else
    {
      sub_1000361E0(v19, v18);
      uint64_t v21 = v19;
      unint64_t v22 = v18;
    }
    unint64_t v70 = v18;
    uint64_t v72 = v21;
    unint64_t v73 = v22;
    sub_1006CD4D8(v21, v22);
    id v23 = (id)sp_key_record_copy_public_key();
    if (v23)
    {
      uint64_t v24 = v23;
      uint64_t v25 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
      unint64_t v27 = v26;

      uint64_t v29 = sub_10043A38C(v25, v27);
      unint64_t v31 = v30;
      sub_10001CFB8(v19, v70);
      unint64_t v32 = v69;
      if (!record_for_index) {
        goto LABEL_21;
      }
      int v33 = *(unsigned __int8 *)(record_for_index + 32);
      if (v33 != 1)
      {
        if (v33 == 2)
        {
          if (v74)
          {
            uint64_t v71 = v29;
            unint64_t v67 = v31;
            sub_1000361E0(v29, v31);
            swift_retain();
            id v34 = (id)sp_key_record_copy_private_encrypted_key();
            if (v34)
            {
              uint64_t v35 = v34;
              uint64_t v36 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
              unint64_t v38 = v37;

              switch(v38 >> 62)
              {
                case 1uLL:
                  uint64_t v39 = v36 >> 32;
                  goto LABEL_32;
                case 2uLL:
                  uint64_t v39 = *(void *)(v36 + 24);
                  goto LABEL_32;
                case 3uLL:
                  goto LABEL_38;
                default:
                  uint64_t v39 = BYTE6(v38);
LABEL_32:
                  if (v39 < 57) {
                    goto LABEL_38;
                  }
                  uint64_t v58 = Data._Representation.subscript.getter();
                  unint64_t v60 = v59;
                  sub_10001CFB8(v36, v38);
                  uint64_t v61 = sub_1010EBE40();
                  unint64_t v63 = v62;
                  uint64_t v66 = v58;
                  unint64_t record_for_index = v60;
                  uint64_t v75 = v71;
                  unint64_t v76 = v67;
                  sub_1000361E0(v71, v67);
                  sub_1000361E0(v61, v63);
                  sub_100A42CBC(v61, v63);
                  uint64_t v65 = v61;
                  sub_10001CFB8(v61, v63);
                  uint64_t v48 = sub_10043A040(v75, v76);
                  unint64_t v49 = v64;
                  sub_10001CFB8(v65, v63);
                  swift_release();
                  sub_10001CFB8(v66, record_for_index);
                  unint64_t v45 = v67;
                  sub_10001CFB8(v71, v67);
                  uint64_t v40 = v71;
                  uint64_t v47 = v72;
                  unint64_t v46 = v73;
                  uint64_t result = sub_10015AF5C(v72, v73);
                  unint64_t v32 = v69;
                  break;
              }
              goto LABEL_27;
            }
LABEL_37:
            __break(1u);
LABEL_38:
            __break(1u);
            JUMPOUT(0x100F3FFE8);
          }
          goto LABEL_25;
        }
LABEL_21:
        if (v74)
        {
          sub_1000361E0(v29, v31);
          static os_log_type_t.default.getter();
          unint64_t v68 = v31;
          uint64_t v40 = v29;
          if (qword_101636DC8 != -1) {
            swift_once();
          }
          sub_10000588C((uint64_t *)&unk_10163AD00);
          uint64_t v41 = swift_allocObject();
          *(_OWORD *)(v41 + 16) = xmmword_101347BA0;
          *(void *)(v41 + 56) = &type metadata for UInt32;
          *(void *)(v41 + 64) = &protocol witness table for UInt32;
          *(_DWORD *)(v41 + 32) = a1;
          uint64_t v75 = v74;
          swift_retain();
          sub_10000588C(&qword_101664D08);
          uint64_t v42 = String.init<A>(describing:)();
          uint64_t v44 = v43;
          *(void *)(v41 + 96) = &type metadata for String;
          *(void *)(v41 + 104) = sub_10000B4CC();
          *(void *)(v41 + 72) = v42;
          *(void *)(v41 + 80) = v44;
          os_log(_:dso:log:_:_:)();
          swift_bridgeObjectRelease();
          unint64_t v45 = v68;
          sub_10001CFB8(v29, v68);
          uint64_t v47 = v72;
          unint64_t v46 = v73;
          uint64_t result = sub_10015AF5C(v72, v73);
          uint64_t v48 = 0;
          goto LABEL_26;
        }
LABEL_25:
        uint64_t v47 = v72;
        unint64_t v46 = v73;
        uint64_t result = sub_10015AF5C(v72, v73);
        uint64_t v40 = v29;
        uint64_t v48 = 0;
        unint64_t v45 = v31;
LABEL_26:
        unint64_t v49 = 0xF000000000000000;
LABEL_27:
        *unint64_t v32 = v47;
        v32[1] = v46;
        v32[2] = v40;
        void v32[3] = v45;
        v32[4] = v48;
        v32[5] = v49;
        return result;
      }
      uint64_t v50 = v29;
      unint64_t v51 = v31;
      sub_1000361E0(v29, v31);
      id v52 = (id)sp_key_record_copy_private_key();
      if (v52)
      {
        uint64_t v53 = v52;
        uint64_t v54 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
        unint64_t v56 = v55;

        uint64_t v48 = sub_10043A040(v54, v56);
        unint64_t v49 = v57;
        unint64_t v45 = v51;
        uint64_t v40 = v50;
        sub_10001CFB8(v50, v45);
        uint64_t v47 = v72;
        unint64_t v46 = v73;
        uint64_t result = sub_10015AF5C(v72, v73);
        goto LABEL_27;
      }
LABEL_36:
      __break(1u);
      goto LABEL_37;
    }
LABEL_35:
    __break(1u);
    goto LABEL_36;
  }
  static os_log_type_t.error.getter();
  if (qword_101636DC8 != -1) {
    swift_once();
  }
  sub_10000588C((uint64_t *)&unk_10163AD00);
  uint64_t v28 = swift_allocObject();
  *(_OWORD *)(v28 + 16) = xmmword_101342130;
  *(void *)(v28 + 56) = &type metadata for UInt32;
  *(void *)(v28 + 64) = &protocol witness table for UInt32;
  *(_DWORD *)(v28 + 32) = a1;
  os_log(_:dso:log:_:_:)();
  swift_bridgeObjectRelease();
  return swift_willThrow();
}

uint64_t sub_100F3FFF8()
{
  uint64_t v1 = 0xD000000000000010;
  *(_DWORD *)&unsigned char v11[8] = 0;
  _StringGuts.grow(_:)(55);
  v2._countAndFlagsBits = 0xD00000000000001DLL;
  v2._object = (void *)0x800000010141B590;
  String.append(_:)(v2);
  v3._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  String.append(_:)(v3);
  swift_bridgeObjectRelease();
  v4._countAndFlagsBits = 0x203A646E65202CLL;
  v4._object = (void *)0xE700000000000000;
  String.append(_:)(v4);
  *(void *)uint64_t v11 = *(unsigned int *)(v0 + OBJC_IVAR____TtC12searchpartyd20BeaconKeySubsequence_lastIndex);
  v5._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  String.append(_:)(v5);
  swift_bridgeObjectRelease();
  v6._countAndFlagsBits = 0x6E6575716573202CLL;
  v6._object = (void *)0xEC000000203A6563;
  String.append(_:)(v6);
  if (*(unsigned char *)(v0 + OBJC_IVAR____TtC12searchpartyd20BeaconKeySubsequence_sequence))
  {
    if (*(unsigned char *)(v0 + OBJC_IVAR____TtC12searchpartyd20BeaconKeySubsequence_sequence) == 1)
    {
      uint64_t v7 = (void *)0xEA00000000007972;
      uint64_t v1 = 0x61646E6F6365732ELL;
    }
    else
    {
      uint64_t v7 = (void *)0x80000001013F28C0;
    }
  }
  else
  {
    uint64_t v7 = (void *)0xE800000000000000;
    uint64_t v1 = 0x7972616D6972702ELL;
  }
  v8._countAndFlagsBits = v1;
  v8._object = v7;
  String.append(_:)(v8);
  swift_bridgeObjectRelease();
  v9._countAndFlagsBits = 93;
  v9._object = (void *)0xE100000000000000;
  String.append(_:)(v9);
  return *(void *)&v11[4];
}

uint64_t sub_100F401B4()
{
  return sub_100F3FFF8();
}

unint64_t sub_100F401D8()
{
  unint64_t result = qword_1016605B0;
  if (!qword_1016605B0)
  {
    type metadata accessor for CryptoError();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1016605B0);
  }
  return result;
}

uint64_t sub_100F40230(void *a1)
{
  uint64_t v3 = v1;
  uint64_t v5 = sub_10000588C(&qword_101664D80);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  Swift::String v8 = &v11[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0)];
  sub_10001CD44(a1, a1[3]);
  sub_100F4213C();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  v11[15] = 0;
  KeyedEncodingContainer.encode(_:forKey:)();
  if (!v2)
  {
    v11[14] = 1;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
    char v9 = *(unsigned char *)(v3 + 32);
    v11[13] = 2;
    unsigned char v11[12] = v9;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
    v11[11] = 3;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
    v11[9] = 4;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
    unsigned char v11[8] = 5;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
  }
  return (*(uint64_t (**)(unsigned char *, uint64_t))(v6 + 8))(v8, v5);
}

unint64_t sub_100F4044C()
{
  unint64_t result = 0x657261776D726966;
  switch(*v0)
  {
    case 1:
      unint64_t result = 0x79726F6765746163;
      break;
    case 2:
      unint64_t result = 0x696C696261706163;
      break;
    case 3:
      unint64_t result = 0x5479726574746162;
      break;
    case 4:
      unint64_t result = 0xD000000000000010;
      break;
    case 5:
      unint64_t result = 0x6D614E6C65646F6DLL;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t sub_100F40538@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_100F41BD4(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_100F40560(uint64_t a1)
{
  unint64_t v2 = sub_100F4213C();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_100F4059C(uint64_t a1)
{
  unint64_t v2 = sub_100F4213C();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_100F405D8(void *a1)
{
  return sub_100F40230(a1);
}

uint64_t sub_100F405F0(void *a1)
{
  uint64_t v3 = v1;
  uint64_t v5 = sub_10000588C(&qword_101664D38);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  Swift::String v8 = &v12[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0)];
  sub_10001CD44(a1, a1[3]);
  sub_100F41538();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  LOBYTE(v13) = 0;
  KeyedEncodingContainer.encode(_:forKey:)();
  if (!v2)
  {
    LOBYTE(v13) = 1;
    KeyedEncodingContainer.encode(_:forKey:)();
    long long v9 = *(_OWORD *)(v3 + 80);
    long long v15 = *(_OWORD *)(v3 + 64);
    long long v16 = v9;
    uint64_t v17 = *(void *)(v3 + 96);
    long long v10 = *(_OWORD *)(v3 + 48);
    long long v13 = *(_OWORD *)(v3 + 32);
    long long v14 = v10;
    v12[15] = 2;
    sub_100F4158C();
    KeyedEncodingContainer.encode<A>(_:forKey:)();
    LOBYTE(v13) = 3;
    KeyedEncodingContainer.encode(_:forKey:)();
    LOBYTE(v13) = 4;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
  }
  return (*(uint64_t (**)(unsigned char *, uint64_t))(v6 + 8))(v8, v5);
}

uint64_t sub_100F407F0(void *a1, uint64_t a2)
{
  uint64_t v4 = sub_10000588C(&qword_101664D10);
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v7 = (char *)v9 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10001CD44(a1, a1[3]);
  sub_100F4141C();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  v9[1] = a2;
  sub_10000588C(&qword_101664D20);
  sub_100F41470();
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v7, v4);
}

uint64_t sub_100F40940()
{
  uint64_t result = 0x7250796D646E6966;
  switch(*v0)
  {
    case 1:
      uint64_t result = 0x56746E6572727563;
      break;
    case 2:
      uint64_t result = 0x657261776D726966;
      break;
    case 3:
      uint64_t result = 0x747865746E6F63;
      break;
    case 4:
      uint64_t result = 0x496B726F7774656ELL;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t sub_100F40A10@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_100F41EB0(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_100F40A38(uint64_t a1)
{
  unint64_t v2 = sub_100F41538();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_100F40A74(uint64_t a1)
{
  unint64_t v2 = sub_100F41538();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_100F40AB0(void *a1)
{
  return sub_100F405F0(a1);
}

uint64_t sub_100F40AC8(uint64_t a1)
{
  unint64_t v2 = sub_100F4141C();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_100F40B04(uint64_t a1)
{
  unint64_t v2 = sub_100F4141C();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_100F40B40(void *a1)
{
  return sub_100F407F0(a1, *v1);
}

uint64_t sub_100F40B5C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = (int *)type metadata accessor for AccessoryMetadata(0);
  if (*(unsigned char *)(a1 + v4[10] + 16))
  {
    uint64_t v5 = sub_1009CD110();
    uint64_t v25 = v6;
    uint64_t v26 = v5;
  }
  else
  {
    sub_1001AB2E0();
    uint64_t v27 = CustomStringConvertible.typeDescription.getter();
    uint64_t v28 = v7;
    v8._countAndFlagsBits = 32;
    v8._object = (void *)0xE100000000000000;
    String.append(_:)(v8);
    v9._countAndFlagsBits = sub_100BBA674();
    String.append(_:)(v9);
    swift_bridgeObjectRelease();
    uint64_t v25 = v28;
    uint64_t v26 = v27;
  }
  uint64_t v10 = a1 + v4[11];
  uint64_t v11 = *(void *)v10;
  char v24 = *(unsigned char *)(v10 + 8);
  uint64_t v12 = a1 + v4[12];
  if (*(unsigned char *)(v12 + 4)) {
    int v13 = 0;
  }
  else {
    int v13 = sub_10110E9A0(*(_DWORD *)v12);
  }
  int v14 = *(unsigned __int8 *)(a1 + v4[13]);
  BOOL v15 = v14 == 4;
  if (v14 == 4) {
    char v16 = 0;
  }
  else {
    char v16 = *(unsigned char *)(a1 + v4[13]);
  }
  uint64_t v17 = v4[7];
  unint64_t v18 = (uint64_t *)(a1 + v4[6]);
  uint64_t v20 = *v18;
  uint64_t v19 = v18[1];
  uint64_t v22 = *(void *)(a1 + v17);
  uint64_t v21 = *(void *)(a1 + v17 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  uint64_t result = sub_100EFC3B4(a1);
  *(void *)a2 = v26;
  *(void *)(a2 + 8) = v25;
  *(void *)(a2 + 16) = v11;
  *(unsigned char *)(a2 + 24) = v24;
  *(_DWORD *)(a2 + 28) = v13;
  *(unsigned char *)(a2 + 32) = 0;
  *(unsigned char *)(a2 + 33) = v16;
  *(unsigned char *)(a2 + 34) = v15;
  *(void *)(a2 + 40) = v20;
  *(void *)(a2 + 48) = v19;
  *(void *)(a2 + 56) = v22;
  *(void *)(a2 + 64) = v21;
  return result;
}

uint64_t sub_100F40CE8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, char a3@<W2>, uint64_t a4@<X8>)
{
  uint64_t v8 = type metadata accessor for AccessoryMetadata(0);
  uint64_t v9 = __chkstk_darwin(v8);
  uint64_t v11 = &v48[-((v10 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __chkstk_darwin(v9);
  int v13 = &v48[-v12];
  if (qword_101637188 != -1) {
    swift_once();
  }
  int v14 = (void *)qword_10170EE68;
  id v15 = [self sharedInstance];
  unsigned int v16 = [v15 isInternalBuild];

  uint64_t v60 = a2;
  if (v16
    && (NSString v17 = String._bridgeToObjectiveC()(),
        id v18 = [v14 stringForKey:v17],
        v17,
        v18))
  {
    uint64_t v19 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v21 = v20;

    sub_100EFC350(a1, (uint64_t)v13);
    if (v21)
    {
      uint64_t v50 = v21;
      uint64_t v51 = v19;
      goto LABEL_9;
    }
  }
  else
  {
    sub_100EFC350(a1, (uint64_t)v13);
  }
  long long v63 = *(_OWORD *)&v13[*(int *)(v8 + 20)];
  sub_1001A95DC();
  uint64_t v51 = RawRepresentable<>.hexString.getter();
  uint64_t v50 = v22;
LABEL_9:
  sub_100EFC3B4((uint64_t)v13);
  id v23 = (uint64_t *)(a1 + *(int *)(v8 + 60));
  uint64_t v25 = *v23;
  uint64_t v24 = v23[1];
  uint64_t v61 = a1;
  sub_100EFC350(a1, (uint64_t)v11);
  swift_bridgeObjectRetain();
  sub_100F40B5C((uint64_t)v11, (uint64_t)&v63);
  uint64_t v26 = *((void *)&v63 + 1);
  uint64_t v27 = v63;
  uint64_t v28 = v64;
  int v29 = v66;
  int v53 = v67;
  int v54 = v65;
  int v59 = v68;
  int v52 = v69;
  uint64_t v57 = v71;
  uint64_t v58 = v70;
  uint64_t v55 = v72;
  uint64_t v56 = v73;
  if (a3 == 3)
  {
    uint64_t v30 = 0;
    uint64_t v31 = 0;
  }
  else
  {
    char v62 = a3;
    sub_10006145C();
    uint64_t v32 = FixedWidthInteger.data.getter();
    int v49 = v29;
    uint64_t v33 = v28;
    uint64_t v34 = v26;
    uint64_t v35 = v27;
    uint64_t v36 = v25;
    unint64_t v38 = v37;
    uint64_t v30 = Data.hexString.getter();
    uint64_t v31 = v39;
    unint64_t v40 = v38;
    uint64_t v25 = v36;
    uint64_t v27 = v35;
    uint64_t v26 = v34;
    uint64_t v28 = v33;
    int v29 = v49;
    sub_10001CFB8(v32, v40);
  }
  uint64_t v41 = v60;
  uint64_t result = sub_100EFC3B4(v61);
  char v43 = v54 & 1;
  char v44 = v53 & 1;
  char v45 = v52 & 1;
  *(void *)a4 = v51;
  *(void *)(a4 + 8) = v50;
  *(void *)(a4 + 16) = v25;
  *(void *)(a4 + 24) = v24;
  *(void *)(a4 + 32) = v27;
  *(void *)(a4 + 40) = v26;
  *(void *)(a4 + 48) = v28;
  *(unsigned char *)(a4 + 56) = v43;
  *(_DWORD *)(a4 + 60) = v29;
  *(unsigned char *)(a4 + 64) = v44;
  *(unsigned char *)(a4 + 65) = v59;
  *(unsigned char *)(a4 + 66) = v45;
  uint64_t v46 = v57;
  *(void *)(a4 + 72) = v58;
  *(void *)(a4 + 80) = v46;
  uint64_t v47 = v56;
  *(void *)(a4 + 88) = v55;
  *(void *)(a4 + 96) = v47;
  *(void *)(a4 + 104) = v41;
  *(void *)(a4 + 112) = v30;
  *(void *)(a4 + 120) = v31;
  return result;
}

uint64_t destroy for AccessoryInfoRequestInfo()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for AccessoryInfoRequestInfo(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v3;
  uint64_t v4 = *(void *)(a2 + 24);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = v4;
  uint64_t v5 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v5;
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(unsigned char *)(a1 + 56) = *(unsigned char *)(a2 + 56);
  int v6 = *(_DWORD *)(a2 + 60);
  *(unsigned char *)(a1 + 64) = *(unsigned char *)(a2 + 64);
  *(_DWORD *)(a1 + 60) = v6;
  *(_WORD *)(a1 + 65) = *(_WORD *)(a2 + 65);
  uint64_t v7 = *(void *)(a2 + 80);
  *(void *)(a1 + 72) = *(void *)(a2 + 72);
  *(void *)(a1 + 80) = v7;
  uint64_t v8 = *(void *)(a2 + 96);
  *(void *)(a1 + 88) = *(void *)(a2 + 88);
  *(void *)(a1 + 96) = v8;
  *(_OWORD *)(a1 + 104) = *(_OWORD *)(a2 + 104);
  *(void *)(a1 + 120) = *(void *)(a2 + 120);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for AccessoryInfoRequestInfo(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v4 = *(void *)(a2 + 48);
  *(unsigned char *)(a1 + 56) = *(unsigned char *)(a2 + 56);
  *(void *)(a1 + 48) = v4;
  LODWORD(v4) = *(_DWORD *)(a2 + 60);
  *(unsigned char *)(a1 + 64) = *(unsigned char *)(a2 + 64);
  *(_DWORD *)(a1 + 60) = v4;
  *(_WORD *)(a1 + 65) = *(_WORD *)(a2 + 65);
  *(void *)(a1 + 72) = *(void *)(a2 + 72);
  *(void *)(a1 + 80) = *(void *)(a2 + 80);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 88) = *(void *)(a2 + 88);
  *(void *)(a1 + 96) = *(void *)(a2 + 96);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 104) = *(void *)(a2 + 104);
  *(void *)(a1 + 112) = *(void *)(a2 + 112);
  *(void *)(a1 + 120) = *(void *)(a2 + 120);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t assignWithTake for AccessoryInfoRequestInfo(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v4;
  swift_bridgeObjectRelease();
  uint64_t v5 = *(void *)(a2 + 24);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = v5;
  swift_bridgeObjectRelease();
  uint64_t v6 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v6;
  swift_bridgeObjectRelease();
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(unsigned char *)(a1 + 56) = *(unsigned char *)(a2 + 56);
  *(_DWORD *)(a1 + 60) = *(_DWORD *)(a2 + 60);
  *(unsigned char *)(a1 + 64) = *(unsigned char *)(a2 + 64);
  *(_WORD *)(a1 + 65) = *(_WORD *)(a2 + 65);
  uint64_t v7 = *(void *)(a2 + 80);
  *(void *)(a1 + 72) = *(void *)(a2 + 72);
  *(void *)(a1 + 80) = v7;
  swift_bridgeObjectRelease();
  uint64_t v8 = *(void *)(a2 + 96);
  *(void *)(a1 + 88) = *(void *)(a2 + 88);
  *(void *)(a1 + 96) = v8;
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 104) = *(_OWORD *)(a2 + 104);
  *(void *)(a1 + 120) = *(void *)(a2 + 120);
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for AccessoryInfoRequestInfo(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 128)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for AccessoryInfoRequestInfo(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 120) = 0;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)uint64_t result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 128) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 8) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 128) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for AccessoryInfoRequestInfo()
{
  return &type metadata for AccessoryInfoRequestInfo;
}

ValueMetadata *type metadata accessor for AccessoryInfoRequestContent()
{
  return &type metadata for AccessoryInfoRequestContent;
}

unint64_t sub_100F4141C()
{
  unint64_t result = qword_101664D18;
  if (!qword_101664D18)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_101664D18);
  }
  return result;
}

unint64_t sub_100F41470()
{
  unint64_t result = qword_101664D28;
  if (!qword_101664D28)
  {
    sub_10000592C(&qword_101664D20);
    sub_100F414E4();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_101664D28);
  }
  return result;
}

unint64_t sub_100F414E4()
{
  unint64_t result = qword_101664D30;
  if (!qword_101664D30)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_101664D30);
  }
  return result;
}

unint64_t sub_100F41538()
{
  unint64_t result = qword_101664D40;
  if (!qword_101664D40)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_101664D40);
  }
  return result;
}

unint64_t sub_100F4158C()
{
  unint64_t result = qword_101664D48;
  if (!qword_101664D48)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_101664D48);
  }
  return result;
}

unsigned char *storeEnumTagSinglePayload for AccessoryInfoRequestInfo.CodingKeys(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 4 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 4) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFC) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFB)
  {
    unsigned int v6 = ((a2 - 252) >> 8) + 1;
    *unint64_t result = a2 + 4;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x100F416ACLL);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 4;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for AccessoryInfoRequestInfo.CodingKeys()
{
  return &type metadata for AccessoryInfoRequestInfo.CodingKeys;
}

unsigned char *storeEnumTagSinglePayload for AccessoryInfoRequestContent.CodingKeys(unsigned char *result, int a2, int a3)
{
  if ((a3 + 1) >= 0x10000) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) < 0x100) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2)
  {
    switch(v5)
    {
      case 1:
        *unint64_t result = a2;
        return result;
      case 2:
        *(_WORD *)unint64_t result = a2;
        return result;
      case 3:
        goto LABEL_19;
      case 4:
        *(_DWORD *)unint64_t result = a2;
        return result;
      default:
        return result;
    }
  }
  switch(v5)
  {
    case 1:
      *unint64_t result = 0;
      break;
    case 2:
      *(_WORD *)unint64_t result = 0;
      break;
    case 3:
LABEL_19:
      __break(1u);
      JUMPOUT(0x100F41780);
    case 4:
      *(_DWORD *)unint64_t result = 0;
      break;
    default:
      return result;
  }
  return result;
}

ValueMetadata *type metadata accessor for AccessoryInfoRequestContent.CodingKeys()
{
  return &type metadata for AccessoryInfoRequestContent.CodingKeys;
}

uint64_t destroy for AccessoryInfoRequestInfo.FirmwareData()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for AccessoryInfoRequestInfo.FirmwareData(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v3;
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(unsigned char *)(a1 + 24) = *(unsigned char *)(a2 + 24);
  *(_DWORD *)(a1 + 28) = *(_DWORD *)(a2 + 28);
  *(unsigned char *)(a1 + 32) = *(unsigned char *)(a2 + 32);
  *(_WORD *)(a1 + 33) = *(_WORD *)(a2 + 33);
  uint64_t v4 = *(void *)(a2 + 48);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  *(void *)(a1 + 48) = v4;
  uint64_t v5 = *(void *)(a2 + 64);
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  *(void *)(a1 + 64) = v5;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for AccessoryInfoRequestInfo.FirmwareData(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v4 = *(void *)(a2 + 16);
  *(unsigned char *)(a1 + 24) = *(unsigned char *)(a2 + 24);
  *(void *)(a1 + 16) = v4;
  LODWORD(v4) = *(_DWORD *)(a2 + 28);
  *(unsigned char *)(a1 + 32) = *(unsigned char *)(a2 + 32);
  *(_DWORD *)(a1 + 28) = v4;
  *(_WORD *)(a1 + 33) = *(_WORD *)(a2 + 33);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t assignWithTake for AccessoryInfoRequestInfo.FirmwareData(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v4;
  swift_bridgeObjectRelease();
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(unsigned char *)(a1 + 24) = *(unsigned char *)(a2 + 24);
  *(_DWORD *)(a1 + 28) = *(_DWORD *)(a2 + 28);
  *(unsigned char *)(a1 + 32) = *(unsigned char *)(a2 + 32);
  *(_WORD *)(a1 + 33) = *(_WORD *)(a2 + 33);
  uint64_t v5 = *(void *)(a2 + 48);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  *(void *)(a1 + 48) = v5;
  swift_bridgeObjectRelease();
  uint64_t v6 = *(void *)(a2 + 64);
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  *(void *)(a1 + 64) = v6;
  swift_bridgeObjectRelease();
  return a1;
}

ValueMetadata *type metadata accessor for AccessoryInfoRequestInfo.FirmwareData()
{
  return &type metadata for AccessoryInfoRequestInfo.FirmwareData;
}

unint64_t sub_100F419C8()
{
  unint64_t result = qword_101664D50;
  if (!qword_101664D50)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_101664D50);
  }
  return result;
}

unint64_t sub_100F41A20()
{
  unint64_t result = qword_101664D58;
  if (!qword_101664D58)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_101664D58);
  }
  return result;
}

unint64_t sub_100F41A78()
{
  unint64_t result = qword_101664D60;
  if (!qword_101664D60)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_101664D60);
  }
  return result;
}

unint64_t sub_100F41AD0()
{
  unint64_t result = qword_101664D68;
  if (!qword_101664D68)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_101664D68);
  }
  return result;
}

unint64_t sub_100F41B28()
{
  unint64_t result = qword_101664D70;
  if (!qword_101664D70)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_101664D70);
  }
  return result;
}

unint64_t sub_100F41B80()
{
  unint64_t result = qword_101664D78;
  if (!qword_101664D78)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_101664D78);
  }
  return result;
}

uint64_t sub_100F41BD4(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 0x657261776D726966 && a2 == 0xEF6E6F6973726556;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x79726F6765746163 && a2 == 0xE800000000000000 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0x696C696261706163 && a2 == 0xEC00000073656974 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else if (a1 == 0x5479726574746162 && a2 == 0xEB00000000657079 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 3;
  }
  else if (a1 == 0xD000000000000010 && a2 == 0x80000001013F45D0 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 4;
  }
  else if (a1 == 0x6D614E6C65646F6DLL && a2 == 0xE900000000000065)
  {
    swift_bridgeObjectRelease();
    return 5;
  }
  else
  {
    char v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v6) {
      return 5;
    }
    else {
      return 6;
    }
  }
}

uint64_t sub_100F41EB0(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 0x7250796D646E6966 && a2 == 0xEF6449746375646FLL;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x56746E6572727563 && a2 == 0xEE006E6F69737265 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0x657261776D726966 && a2 == 0xEC00000061746144 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else if (a1 == 0x747865746E6F63 && a2 == 0xE700000000000000 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 3;
  }
  else if (a1 == 0x496B726F7774656ELL && a2 == 0xE900000000000064)
  {
    swift_bridgeObjectRelease();
    return 4;
  }
  else
  {
    char v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v6) {
      return 4;
    }
    else {
      return 5;
    }
  }
}

unint64_t sub_100F4213C()
{
  unint64_t result = qword_101664D88;
  if (!qword_101664D88)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_101664D88);
  }
  return result;
}

unsigned char *storeEnumTagSinglePayload for AccessoryInfoRequestInfo.FirmwareData.CodingKeys(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 5 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 5) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFB) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFA)
  {
    unsigned int v6 = ((a2 - 251) >> 8) + 1;
    *unint64_t result = a2 + 5;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x100F4225CLL);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 5;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for AccessoryInfoRequestInfo.FirmwareData.CodingKeys()
{
  return &type metadata for AccessoryInfoRequestInfo.FirmwareData.CodingKeys;
}

unint64_t sub_100F42298()
{
  unint64_t result = qword_101664D90;
  if (!qword_101664D90)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_101664D90);
  }
  return result;
}

unint64_t sub_100F422F0()
{
  unint64_t result = qword_101664D98;
  if (!qword_101664D98)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_101664D98);
  }
  return result;
}

unint64_t sub_100F42348()
{
  unint64_t result = qword_101664DA0;
  if (!qword_101664DA0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_101664DA0);
  }
  return result;
}

uint64_t sub_100F4239C(void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v14 = a4;
  uint64_t v8 = sub_10000588C(&qword_101664E70);
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  uint64_t v11 = (char *)&v13 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10001CD44(a1, a1[3]);
  sub_100F43B74();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  uint64_t v15 = a2;
  char v17 = 0;
  sub_10000588C(&qword_10163BD60);
  sub_100904FC8((unint64_t *)&qword_101651F28);
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  if (!v4)
  {
    uint64_t v15 = a3;
    uint64_t v16 = v14;
    char v17 = 1;
    sub_100037BB4();
    KeyedEncodingContainer.encode<A>(_:forKey:)();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v9 + 8))(v11, v8);
}

uint64_t sub_100F42568(void *a1)
{
  uint64_t v3 = sub_10000588C(&qword_101664E50);
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  unsigned int v6 = &v8[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)];
  sub_10001CD44(a1, a1[3]);
  sub_100F4387C();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  v8[15] = 0;
  type metadata accessor for UUID();
  sub_100F438D0(&qword_10163B040, (void (*)(uint64_t))&type metadata accessor for UUID);
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  if (!v1)
  {
    type metadata accessor for AccessoryLostModeRequestContent();
    v8[14] = 1;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
    v8[13] = 2;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
    v8[12] = 3;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
    v8[11] = 4;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
    v8[10] = 5;
    KeyedEncodingContainer.encode(_:forKey:)();
  }
  return (*(uint64_t (**)(unsigned char *, uint64_t))(v4 + 8))(v6, v3);
}

uint64_t sub_100F427E0(uint64_t a1)
{
  unint64_t v2 = sub_100F43B74();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_100F4281C(uint64_t a1)
{
  unint64_t v2 = sub_100F43B74();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_100F42858@<X0>(void *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = sub_100F43918(a1);
  if (!v2)
  {
    *a2 = result;
    a2[1] = v5;
    a2[2] = v6;
  }
  return result;
}

uint64_t sub_100F42888(void *a1)
{
  return sub_100F4239C(a1, *v1, v1[1], v1[2]);
}

uint64_t sub_100F428A8()
{
  uint64_t result = 0x6449616E6D66;
  switch(*v0)
  {
    case 1:
      uint64_t result = 0x656C746974;
      break;
    case 2:
      uint64_t result = 0x6567617373656DLL;
      break;
    case 3:
      uint64_t result = 0x6C69616D65;
      break;
    case 4:
      uint64_t result = 0x6D754E72656E776FLL;
      break;
    case 5:
      uint64_t result = 0x65646F4D74736F6CLL;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t sub_100F42978@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_100F43FE0(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_100F429A0(uint64_t a1)
{
  unint64_t v2 = sub_100F4387C();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_100F429DC(uint64_t a1)
{
  unint64_t v2 = sub_100F4387C();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_100F42A18(void *a1)
{
  return sub_100F42568(a1);
}

void sub_100F42A30(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, unsigned __int8 a10)
{
  uint64_t v65 = a7;
  uint64_t v66 = a8;
  uint64_t v63 = a5;
  uint64_t v64 = a6;
  uint64_t v61 = a3;
  uint64_t v62 = a4;
  uint64_t v60 = a2;
  uint64_t v11 = (int *)type metadata accessor for AccessoryLostModeRequestContent();
  uint64_t v12 = __chkstk_darwin(v11);
  uint64_t v14 = (char *)&v57 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v12);
  uint64_t v16 = (char *)&v57 - v15;
  uint64_t v17 = type metadata accessor for Date();
  uint64_t v18 = *(void *)(v17 - 8);
  __chkstk_darwin(v17);
  uint64_t v20 = (char *)&v57 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  unint64_t v21 = sub_10092D8F8((uint64_t)_swiftEmptyArrayStorage);
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v67 = v21;
  sub_10016C0FC(1702195828, 0xE400000000000000, 0xD00000000000001BLL, 0x80000001013F64C0, isUniquelyReferenced_nonNull_native);
  uint64_t v23 = v67;
  swift_bridgeObjectRelease();
  id v24 = [self currentDevice];
  if (v24)
  {
    uint64_t v25 = v24;
    id v26 = [v24 serverFriendlyDescription:v14];

    if (v26)
    {
      int v59 = a10;
      uint64_t v58 = a9;
      uint64_t v27 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      uint64_t v29 = v28;

      char v30 = swift_isUniquelyReferenced_nonNull_native();
      uint64_t v67 = v23;
      sub_10016C0FC(v27, v29, 0xD000000000000011, 0x80000001013F64E0, v30);
      uint64_t v31 = v67;
      swift_bridgeObjectRelease();
      Date.init()();
      uint64_t v32 = Date.epoch.getter();
      (*(void (**)(char *, uint64_t))(v18 + 8))(v20, v17);
      uint64_t v67 = v32;
      uint64_t v33 = dispatch thunk of CustomStringConvertible.description.getter();
      uint64_t v35 = v34;
      char v36 = swift_isUniquelyReferenced_nonNull_native();
      uint64_t v67 = v31;
      sub_10016C0FC(v33, v35, 0xD000000000000015, 0x80000001013F6500, v36);
      uint64_t v37 = v67;
      swift_bridgeObjectRelease();
      uint64_t v67 = 1;
      uint64_t v38 = dispatch thunk of CustomStringConvertible.description.getter();
      uint64_t v40 = v39;
      char v41 = swift_isUniquelyReferenced_nonNull_native();
      uint64_t v67 = v37;
      sub_10016C0FC(v38, v40, 0xD000000000000013, 0x80000001013F6520, v41);
      uint64_t v42 = v67;
      swift_bridgeObjectRelease();
      id v43 = sub_100903ACC();
      uint64_t v45 = v44;
      char v46 = swift_isUniquelyReferenced_nonNull_native();
      uint64_t v67 = v42;
      sub_10016C0FC((uint64_t)v43, v45, 0x6567412D72657355, 0xEA0000000000746ELL, v46);
      swift_bridgeObjectRelease();
      uint64_t v47 = type metadata accessor for UUID();
      uint64_t v48 = *(void *)(v47 - 8);
      (*(void (**)(char *, uint64_t, uint64_t))(v48 + 16))(v16, a1, v47);
      int v49 = &v16[v11[5]];
      uint64_t v50 = v61;
      *(void *)int v49 = v60;
      *((void *)v49 + 1) = v50;
      uint64_t v51 = &v16[v11[6]];
      uint64_t v52 = v63;
      *(void *)uint64_t v51 = v62;
      *((void *)v51 + 1) = v52;
      int v53 = &v16[v11[7]];
      uint64_t v54 = v65;
      *(void *)int v53 = v64;
      *((void *)v53 + 1) = v54;
      uint64_t v55 = &v16[v11[8]];
      uint64_t v56 = v58;
      *(void *)uint64_t v55 = v66;
      *((void *)v55 + 1) = v56;
      v16[v11[9]] = v59 & 1;
      type metadata accessor for JSONEncoder();
      swift_allocObject();
      JSONEncoder.init()();
      sub_100F438D0(&qword_101664DA8, (void (*)(uint64_t))type metadata accessor for AccessoryLostModeRequestContent);
      dispatch thunk of JSONEncoder.encode<A>(_:)();
      swift_release();
      (*(void (**)(uint64_t, uint64_t))(v48 + 8))(a1, v47);
      sub_100F430D8((uint64_t)v16);
      return;
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
}

uint64_t type metadata accessor for AccessoryLostModeRequestContent()
{
  uint64_t result = qword_101664E08;
  if (!qword_101664E08) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t sub_100F43074(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for AccessoryLostModeRequestContent();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_100F430D8(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for AccessoryLostModeRequestContent();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

void *sub_100F43134(void *a1, void *a2, int *a3)
{
  int v5 = *(_DWORD *)(*((void *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v24 = *a2;
    *a1 = *a2;
    a1 = (void *)(v24 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v7 = type metadata accessor for UUID();
    (*(void (**)(void *, void *, uint64_t))(*(void *)(v7 - 8) + 16))(a1, a2, v7);
    uint64_t v8 = a3[5];
    uint64_t v9 = a3[6];
    uint64_t v10 = (void *)((char *)a1 + v8);
    uint64_t v11 = (void *)((char *)a2 + v8);
    uint64_t v12 = v11[1];
    *uint64_t v10 = *v11;
    v10[1] = v12;
    uint64_t v13 = (void *)((char *)a1 + v9);
    uint64_t v14 = (void *)((char *)a2 + v9);
    uint64_t v15 = v14[1];
    *uint64_t v13 = *v14;
    v13[1] = v15;
    uint64_t v16 = a3[7];
    uint64_t v17 = a3[8];
    uint64_t v18 = (void *)((char *)a1 + v16);
    uint64_t v19 = (void *)((char *)a2 + v16);
    uint64_t v20 = v19[1];
    *uint64_t v18 = *v19;
    v18[1] = v20;
    unint64_t v21 = (void *)((char *)a1 + v17);
    uint64_t v22 = (void *)((char *)a2 + v17);
    uint64_t v23 = v22[1];
    *unint64_t v21 = *v22;
    v21[1] = v23;
    *((unsigned char *)a1 + a3[9]) = *((unsigned char *)a2 + a3[9]);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  return a1;
}

uint64_t sub_100F4326C(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 16))(a1, a2, v6);
  uint64_t v7 = a3[5];
  uint64_t v8 = a3[6];
  uint64_t v9 = (void *)(a1 + v7);
  uint64_t v10 = (void *)(a2 + v7);
  uint64_t v11 = v10[1];
  *uint64_t v9 = *v10;
  v9[1] = v11;
  uint64_t v12 = (void *)(a1 + v8);
  uint64_t v13 = (void *)(a2 + v8);
  uint64_t v14 = v13[1];
  *uint64_t v12 = *v13;
  v12[1] = v14;
  uint64_t v15 = a3[7];
  uint64_t v16 = a3[8];
  uint64_t v17 = (void *)(a1 + v15);
  uint64_t v18 = (void *)(a2 + v15);
  uint64_t v19 = v18[1];
  void *v17 = *v18;
  v17[1] = v19;
  uint64_t v20 = (void *)(a1 + v16);
  unint64_t v21 = (void *)(a2 + v16);
  uint64_t v22 = v21[1];
  *uint64_t v20 = *v21;
  v20[1] = v22;
  *(unsigned char *)(a1 + a3[9]) = *(unsigned char *)(a2 + a3[9]);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t sub_100F43354(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 24))(a1, a2, v6);
  uint64_t v7 = a3[5];
  uint64_t v8 = (void *)(a1 + v7);
  uint64_t v9 = (void *)(a2 + v7);
  *uint64_t v8 = *v9;
  v8[1] = v9[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v10 = a3[6];
  uint64_t v11 = (void *)(a1 + v10);
  uint64_t v12 = (void *)(a2 + v10);
  void *v11 = *v12;
  v11[1] = v12[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v13 = a3[7];
  uint64_t v14 = (void *)(a1 + v13);
  uint64_t v15 = (void *)(a2 + v13);
  *uint64_t v14 = *v15;
  v14[1] = v15[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v16 = a3[8];
  uint64_t v17 = (void *)(a1 + v16);
  uint64_t v18 = (void *)(a2 + v16);
  void *v17 = *v18;
  v17[1] = v18[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + a3[9]) = *(unsigned char *)(a2 + a3[9]);
  return a1;
}

uint64_t sub_100F43480(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 32))(a1, a2, v6);
  uint64_t v7 = a3[6];
  *(_OWORD *)(a1 + a3[5]) = *(_OWORD *)(a2 + a3[5]);
  *(_OWORD *)(a1 + v7) = *(_OWORD *)(a2 + v7);
  uint64_t v8 = a3[8];
  *(_OWORD *)(a1 + a3[7]) = *(_OWORD *)(a2 + a3[7]);
  *(_OWORD *)(a1 + v8) = *(_OWORD *)(a2 + v8);
  *(unsigned char *)(a1 + a3[9]) = *(unsigned char *)(a2 + a3[9]);
  return a1;
}

uint64_t sub_100F43524(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 40))(a1, a2, v6);
  uint64_t v7 = a3[5];
  uint64_t v8 = (void *)(a1 + v7);
  uint64_t v9 = (uint64_t *)(a2 + v7);
  uint64_t v11 = *v9;
  uint64_t v10 = v9[1];
  *uint64_t v8 = v11;
  v8[1] = v10;
  swift_bridgeObjectRelease();
  uint64_t v12 = a3[6];
  uint64_t v13 = (void *)(a1 + v12);
  uint64_t v14 = (uint64_t *)(a2 + v12);
  uint64_t v16 = *v14;
  uint64_t v15 = v14[1];
  *uint64_t v13 = v16;
  v13[1] = v15;
  swift_bridgeObjectRelease();
  uint64_t v17 = a3[7];
  uint64_t v18 = (void *)(a1 + v17);
  uint64_t v19 = (uint64_t *)(a2 + v17);
  uint64_t v21 = *v19;
  uint64_t v20 = v19[1];
  *uint64_t v18 = v21;
  v18[1] = v20;
  swift_bridgeObjectRelease();
  uint64_t v22 = a3[8];
  uint64_t v23 = (void *)(a1 + v22);
  uint64_t v24 = (uint64_t *)(a2 + v22);
  uint64_t v26 = *v24;
  uint64_t v25 = v24[1];
  *uint64_t v23 = v26;
  v23[1] = v25;
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + a3[9]) = *(unsigned char *)(a2 + a3[9]);
  return a1;
}

uint64_t sub_100F43610(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_100F43624);
}

uint64_t sub_100F43624(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for UUID();
  uint64_t v7 = *(void *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == a2)
  {
    uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    return v8(a1, a2, v6);
  }
  else
  {
    unint64_t v10 = *(void *)(a1 + *(int *)(a3 + 20) + 8);
    if (v10 >= 0xFFFFFFFF) {
      LODWORD(v10) = -1;
    }
    int v11 = v10 - 1;
    if (v11 < 0) {
      int v11 = -1;
    }
    return (v11 + 1);
  }
}

uint64_t sub_100F436F4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_100F43708);
}

uint64_t sub_100F43708(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result = type metadata accessor for UUID();
  uint64_t v9 = *(void *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    unint64_t v10 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    return v10(a1, a2, a2, result);
  }
  else
  {
    *(void *)(a1 + *(int *)(a4 + 20) + 8) = a2;
  }
  return result;
}

uint64_t sub_100F437C8()
{
  uint64_t result = type metadata accessor for UUID();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

ValueMetadata *type metadata accessor for AccessoryLostModeRequest()
{
  return &type metadata for AccessoryLostModeRequest;
}

unint64_t sub_100F4387C()
{
  unint64_t result = qword_101664E58;
  if (!qword_101664E58)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_101664E58);
  }
  return result;
}

uint64_t sub_100F438D0(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_100F43918(void *a1)
{
  uint64_t v3 = sub_10000588C(&qword_101664E60);
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  uint64_t v6 = (char *)&v11 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = a1[3];
  sub_10001CD44(a1, v7);
  sub_100F43B74();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v1)
  {
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)a1);
  }
  else
  {
    sub_10000588C(&qword_10163BD60);
    char v14 = 0;
    sub_100904FC8(&qword_101651F18);
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    uint64_t v7 = v12;
    char v14 = 1;
    sub_100037AA0();
    swift_bridgeObjectRetain();
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
    uint64_t v9 = v12;
    unint64_t v10 = v13;
    swift_bridgeObjectRetain();
    sub_1000361E0(v9, v10);
    swift_bridgeObjectRelease();
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)a1);
    swift_bridgeObjectRelease();
    sub_10001CFB8(v9, v10);
  }
  return v7;
}

unint64_t sub_100F43B74()
{
  unint64_t result = qword_101664E68;
  if (!qword_101664E68)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_101664E68);
  }
  return result;
}

unsigned char *storeEnumTagSinglePayload for AccessoryLostModeRequest.CodingKeys(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFE)
  {
    unsigned int v6 = ((a2 - 255) >> 8) + 1;
    *unint64_t result = a2 + 1;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x100F43C94);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 1;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for AccessoryLostModeRequest.CodingKeys()
{
  return &type metadata for AccessoryLostModeRequest.CodingKeys;
}

unsigned char *storeEnumTagSinglePayload for AccessoryLostModeRequestContent.CodingKeys(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 5 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 5) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFB) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFA)
  {
    unsigned int v6 = ((a2 - 251) >> 8) + 1;
    *unint64_t result = a2 + 5;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x100F43D98);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 5;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for AccessoryLostModeRequestContent.CodingKeys()
{
  return &type metadata for AccessoryLostModeRequestContent.CodingKeys;
}

unint64_t sub_100F43DD4()
{
  unint64_t result = qword_101664E78;
  if (!qword_101664E78)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_101664E78);
  }
  return result;
}

unint64_t sub_100F43E2C()
{
  unint64_t result = qword_101664E80;
  if (!qword_101664E80)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_101664E80);
  }
  return result;
}

unint64_t sub_100F43E84()
{
  unint64_t result = qword_101664E88;
  if (!qword_101664E88)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_101664E88);
  }
  return result;
}

unint64_t sub_100F43EDC()
{
  unint64_t result = qword_101664E90;
  if (!qword_101664E90)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_101664E90);
  }
  return result;
}

unint64_t sub_100F43F34()
{
  unint64_t result = qword_101664E98;
  if (!qword_101664E98)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_101664E98);
  }
  return result;
}

unint64_t sub_100F43F8C()
{
  unint64_t result = qword_101664EA0;
  if (!qword_101664EA0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_101664EA0);
  }
  return result;
}

uint64_t sub_100F43FE0(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 0x6449616E6D66 && a2 == 0xE600000000000000;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x656C746974 && a2 == 0xE500000000000000 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0x6567617373656DLL && a2 == 0xE700000000000000 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else if (a1 == 0x6C69616D65 && a2 == 0xE500000000000000 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 3;
  }
  else if (a1 == 0x6D754E72656E776FLL && a2 == 0xEB00000000726562 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 4;
  }
  else if (a1 == 0x65646F4D74736F6CLL && a2 == 0xEF64656C62616E45)
  {
    swift_bridgeObjectRelease();
    return 5;
  }
  else
  {
    char v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v6) {
      return 5;
    }
    else {
      return 6;
    }
  }
}

uint64_t *sub_100F44288(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v23 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v23 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v7 = *a2;
    unint64_t v8 = a2[1];
    sub_1000361E0(*a2, v8);
    *a1 = v7;
    a1[1] = v8;
    uint64_t v9 = a2[2];
    unint64_t v10 = a2[3];
    sub_1000361E0(v9, v10);
    a1[2] = v9;
    a1[3] = v10;
    uint64_t v11 = a2[4];
    unint64_t v12 = a2[5];
    sub_1000361E0(v11, v12);
    a1[4] = v11;
    a1[5] = v12;
    uint64_t v13 = a2[7];
    a1[6] = a2[6];
    a1[7] = v13;
    uint64_t v14 = *(int *)(a3 + 32);
    uint64_t v15 = (char *)a1 + v14;
    uint64_t v16 = (char *)a2 + v14;
    uint64_t v17 = type metadata accessor for UUID();
    uint64_t v18 = *(void (**)(char *, char *, uint64_t))(*(void *)(v17 - 8) + 16);
    swift_bridgeObjectRetain();
    v18(v15, v16, v17);
    uint64_t v19 = *(int *)(a3 + 36);
    uint64_t v20 = (uint64_t *)((char *)a1 + v19);
    uint64_t v21 = (uint64_t *)((char *)a2 + v19);
    uint64_t v22 = v21[1];
    *uint64_t v20 = *v21;
    v20[1] = v22;
    swift_bridgeObjectRetain();
  }
  return a1;
}

uint64_t sub_100F443D4(uint64_t a1, uint64_t a2)
{
  sub_10001CFB8(*(void *)a1, *(void *)(a1 + 8));
  sub_10001CFB8(*(void *)(a1 + 16), *(void *)(a1 + 24));
  sub_10001CFB8(*(void *)(a1 + 32), *(void *)(a1 + 40));
  swift_bridgeObjectRelease();
  uint64_t v4 = a1 + *(int *)(a2 + 32);
  uint64_t v5 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8))(v4, v5);

  return swift_bridgeObjectRelease();
}

uint64_t *sub_100F44480(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6 = *a2;
  unint64_t v7 = a2[1];
  sub_1000361E0(*a2, v7);
  *a1 = v6;
  a1[1] = v7;
  uint64_t v8 = a2[2];
  unint64_t v9 = a2[3];
  sub_1000361E0(v8, v9);
  a1[2] = v8;
  a1[3] = v9;
  uint64_t v10 = a2[4];
  unint64_t v11 = a2[5];
  sub_1000361E0(v10, v11);
  a1[4] = v10;
  a1[5] = v11;
  uint64_t v12 = a2[7];
  a1[6] = a2[6];
  a1[7] = v12;
  uint64_t v13 = *(int *)(a3 + 32);
  uint64_t v14 = (char *)a1 + v13;
  uint64_t v15 = (char *)a2 + v13;
  uint64_t v16 = type metadata accessor for UUID();
  uint64_t v17 = *(void (**)(char *, char *, uint64_t))(*(void *)(v16 - 8) + 16);
  swift_bridgeObjectRetain();
  v17(v14, v15, v16);
  uint64_t v18 = *(int *)(a3 + 36);
  uint64_t v19 = (uint64_t *)((char *)a1 + v18);
  uint64_t v20 = (uint64_t *)((char *)a2 + v18);
  uint64_t v21 = v20[1];
  *uint64_t v19 = *v20;
  v19[1] = v21;
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t *sub_100F4457C(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6 = *a2;
  unint64_t v7 = a2[1];
  sub_1000361E0(*a2, v7);
  uint64_t v8 = *a1;
  unint64_t v9 = a1[1];
  *a1 = v6;
  a1[1] = v7;
  sub_10001CFB8(v8, v9);
  uint64_t v10 = a2[2];
  unint64_t v11 = a2[3];
  sub_1000361E0(v10, v11);
  uint64_t v12 = a1[2];
  unint64_t v13 = a1[3];
  a1[2] = v10;
  a1[3] = v11;
  sub_10001CFB8(v12, v13);
  uint64_t v14 = a2[4];
  unint64_t v15 = a2[5];
  sub_1000361E0(v14, v15);
  uint64_t v16 = a1[4];
  unint64_t v17 = a1[5];
  a1[4] = v14;
  a1[5] = v15;
  sub_10001CFB8(v16, v17);
  a1[6] = a2[6];
  a1[7] = a2[7];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v18 = *(int *)(a3 + 32);
  uint64_t v19 = (char *)a1 + v18;
  uint64_t v20 = (char *)a2 + v18;
  uint64_t v21 = type metadata accessor for UUID();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v21 - 8) + 24))(v19, v20, v21);
  uint64_t v22 = *(int *)(a3 + 36);
  uint64_t v23 = (uint64_t *)((char *)a1 + v22);
  uint64_t v24 = (uint64_t *)((char *)a2 + v22);
  *uint64_t v23 = *v24;
  v23[1] = v24[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

_OWORD *sub_100F446A0(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  long long v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  long long v7 = a2[3];
  a1[2] = a2[2];
  a1[3] = v7;
  uint64_t v8 = *(int *)(a3 + 32);
  unint64_t v9 = (char *)a1 + v8;
  uint64_t v10 = (char *)a2 + v8;
  uint64_t v11 = type metadata accessor for UUID();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v11 - 8) + 32))(v9, v10, v11);
  *(_OWORD *)((char *)a1 + *(int *)(a3 + 36)) = *(_OWORD *)((char *)a2 + *(int *)(a3 + 36));
  return a1;
}

uint64_t *sub_100F44740(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *a1;
  unint64_t v7 = a1[1];
  *(_OWORD *)a1 = *(_OWORD *)a2;
  sub_10001CFB8(v6, v7);
  uint64_t v8 = a1[2];
  unint64_t v9 = a1[3];
  *((_OWORD *)a1 + 1) = *(_OWORD *)(a2 + 16);
  sub_10001CFB8(v8, v9);
  uint64_t v10 = a1[4];
  unint64_t v11 = a1[5];
  *((_OWORD *)a1 + 2) = *(_OWORD *)(a2 + 32);
  sub_10001CFB8(v10, v11);
  uint64_t v12 = *(void *)(a2 + 56);
  a1[6] = *(void *)(a2 + 48);
  a1[7] = v12;
  swift_bridgeObjectRelease();
  uint64_t v13 = *(int *)(a3 + 32);
  uint64_t v14 = (char *)a1 + v13;
  uint64_t v15 = a2 + v13;
  uint64_t v16 = type metadata accessor for UUID();
  (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v16 - 8) + 40))(v14, v15, v16);
  uint64_t v17 = *(int *)(a3 + 36);
  uint64_t v18 = (uint64_t *)((char *)a1 + v17);
  uint64_t v19 = (uint64_t *)(a2 + v17);
  uint64_t v21 = *v19;
  uint64_t v20 = v19[1];
  *uint64_t v18 = v21;
  v18[1] = v20;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t sub_100F44824(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_100F44838);
}

uint64_t sub_100F44838(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a2 == 0x7FFFFFFF)
  {
    unint64_t v4 = *(void *)(a1 + 56);
    if (v4 >= 0xFFFFFFFF) {
      LODWORD(v4) = -1;
    }
    return (v4 + 1);
  }
  else
  {
    uint64_t v8 = type metadata accessor for UUID();
    unint64_t v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 48);
    uint64_t v10 = v8;
    uint64_t v11 = a1 + *(int *)(a3 + 32);
    return v9(v11, a2, v10);
  }
}

uint64_t sub_100F448E8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_100F448FC);
}

uint64_t sub_100F448FC(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(void *)(result + 56) = (a2 - 1);
  }
  else
  {
    uint64_t v7 = type metadata accessor for UUID();
    uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56);
    uint64_t v9 = v7;
    uint64_t v10 = v5 + *(int *)(a4 + 32);
    return v8(v10, a2, a2, v9);
  }
  return result;
}

uint64_t type metadata accessor for AccessoryPairingLockCheckResponse()
{
  uint64_t result = qword_101664F00;
  if (!qword_101664F00) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t sub_100F449F0()
{
  uint64_t result = type metadata accessor for UUID();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t sub_100F44A94(unsigned __int8 *a1, char *a2)
{
  return sub_10071A4FC(*a1, *a2);
}

Swift::Int sub_100F44AA0()
{
  return sub_10072C67C();
}

uint64_t sub_100F44AA8()
{
  return sub_10071F320();
}

Swift::Int sub_100F44AB0()
{
  return sub_1007209E8();
}

unint64_t sub_100F44AB8@<X0>(Swift::String *a1@<X0>, unsigned char *a2@<X8>)
{
  unint64_t result = sub_100F45568(*a1);
  *a2 = result;
  return result;
}

void sub_100F44AE8(uint64_t a1@<X8>)
{
  unint64_t v2 = 0xE500000000000000;
  uint64_t v3 = 0x5364656573;
  switch(*v1)
  {
    case 1:
      unint64_t v2 = 0xEA00000000006E67;
      uint64_t v3 = 0x6953726576726573;
      goto LABEL_3;
    case 2:
      *(void *)a1 = 0x6E656B6F74;
      *(void *)(a1 + 8) = 0xE500000000000000;
      break;
    case 3:
      *(void *)a1 = 0xD000000000000010;
      *(void *)(a1 + 8) = 0x80000001013F10B0;
      break;
    case 4:
      *(void *)a1 = 0x6449616E6D66;
      *(void *)(a1 + 8) = 0xE600000000000000;
      break;
    case 5:
      strcpy((char *)a1, "maskedAppleId");
      *(_WORD *)(a1 + 14) = -4864;
      break;
    default:
LABEL_3:
      *(void *)a1 = v3;
      *(void *)(a1 + 8) = v2;
      break;
  }
}

unint64_t sub_100F44BC8()
{
  unint64_t result = 0x5364656573;
  switch(*v0)
  {
    case 1:
      unint64_t result = 0x6953726576726573;
      break;
    case 2:
      unint64_t result = 0x6E656B6F74;
      break;
    case 3:
      unint64_t result = 0xD000000000000010;
      break;
    case 4:
      unint64_t result = 0x6449616E6D66;
      break;
    case 5:
      unint64_t result = 0x704164656B73616DLL;
      break;
    default:
      return result;
  }
  return result;
}

unint64_t sub_100F44C94@<X0>(Swift::String a1@<X1:X0>, unsigned char *a2@<X8>)
{
  unint64_t result = sub_100F45568(a1);
  *a2 = result;
  return result;
}

uint64_t sub_100F44CBC(uint64_t a1)
{
  unint64_t v2 = sub_100F45248();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_100F44CF8(uint64_t a1)
{
  unint64_t v2 = sub_100F45248();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_100F44D34@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v25 = a2;
  uint64_t v3 = type metadata accessor for UUID();
  uint64_t v26 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  uint64_t v5 = (char *)v24 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = sub_10000588C(&qword_101664F48);
  uint64_t v27 = *(void *)(v6 - 8);
  uint64_t v28 = v6;
  __chkstk_darwin(v6);
  uint64_t v8 = (char *)v24 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = type metadata accessor for AccessoryPairingLockCheckResponse();
  __chkstk_darwin(v9);
  uint64_t v11 = (char *)v24 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = a1[3];
  uint64_t v29 = a1;
  sub_10001CD44(a1, v12);
  sub_100F45248();
  uint64_t v13 = v30;
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v13) {
    return _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)v29);
  }
  char v30 = v5;
  char v32 = 0;
  sub_100037AA0();
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  uint64_t v14 = (uint64_t)v11;
  uint64_t v15 = *((void *)&v31 + 1);
  *(void *)uint64_t v11 = v31;
  *((void *)v11 + 1) = v15;
  char v32 = 1;
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  *((_OWORD *)v11 + 1) = v31;
  char v32 = 2;
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  uint64_t v16 = v27;
  *(_OWORD *)(v14 + 32) = v31;
  LOBYTE(v31) = 3;
  *(void *)(v14 + 48) = KeyedDecodingContainer.decode(_:forKey:)();
  *(void *)(v14 + 56) = v17;
  LOBYTE(v31) = 4;
  sub_100342C5C();
  uint64_t v18 = v30;
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  v24[1] = 0;
  (*(void (**)(uint64_t, char *, uint64_t))(v26 + 32))(v14 + *(int *)(v9 + 32), v18, v3);
  LOBYTE(v31) = 5;
  uint64_t v19 = KeyedDecodingContainer.decode(_:forKey:)();
  uint64_t v21 = v20;
  (*(void (**)(char *, uint64_t))(v16 + 8))(v8, v28);
  uint64_t v22 = (uint64_t *)(v14 + *(int *)(v9 + 36));
  *uint64_t v22 = v19;
  v22[1] = v21;
  sub_100F4529C(v14, v25);
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)v29);
  return sub_100F45300(v14);
}

uint64_t sub_100F45230@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_100F44D34(a1, a2);
}

unint64_t sub_100F45248()
{
  unint64_t result = qword_101664F50;
  if (!qword_101664F50)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_101664F50);
  }
  return result;
}

uint64_t sub_100F4529C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for AccessoryPairingLockCheckResponse();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_100F45300(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for AccessoryPairingLockCheckResponse();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

unsigned char *storeEnumTagSinglePayload for AccessoryPairingLockCheckResponse.CodingKeys(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 5 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 5) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFB) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFA)
  {
    unsigned int v6 = ((a2 - 251) >> 8) + 1;
    *unint64_t result = a2 + 5;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x100F45428);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 5;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for AccessoryPairingLockCheckResponse.CodingKeys()
{
  return &type metadata for AccessoryPairingLockCheckResponse.CodingKeys;
}

unint64_t sub_100F45464()
{
  unint64_t result = qword_101664F58;
  if (!qword_101664F58)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_101664F58);
  }
  return result;
}

unint64_t sub_100F454BC()
{
  unint64_t result = qword_101664F60;
  if (!qword_101664F60)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_101664F60);
  }
  return result;
}

unint64_t sub_100F45514()
{
  unint64_t result = qword_101664F68;
  if (!qword_101664F68)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_101664F68);
  }
  return result;
}

unint64_t sub_100F45568(Swift::String string)
{
  object = string._object;
  v2._countAndFlagsBits = string._countAndFlagsBits;
  v2._object = object;
  unint64_t v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_1015A51F8, v2);
  swift_bridgeObjectRelease();
  if (v3 >= 6) {
    return 6;
  }
  else {
    return v3;
  }
}

void *sub_100F455B4(void *a1)
{
  Swift::String v2 = v1;
  uint64_t v4 = sub_10000588C(&qword_101644958);
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v24 = v4;
  uint64_t v25 = v5;
  __chkstk_darwin(v4);
  uint64_t v7 = (char *)&v23 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v1[4] = 0;
  sub_10000588C(&qword_1016650A8);
  swift_allocObject();
  v1[5] = PassthroughSubject.init()();
  v1[2] = a1;
  uint64_t v8 = (objc_class *)type metadata accessor for KVOHelperNWDatagramConnection();
  uint64_t v9 = (char *)objc_allocWithZone(v8);
  *(void *)&v9[OBJC_IVAR____TtC12searchpartydP33_6037248B8C5D968AAFEBF5992F3E761329KVOHelperNWDatagramConnection_observation] = 0;
  *(void *)&v9[OBJC_IVAR____TtC12searchpartydP33_6037248B8C5D968AAFEBF5992F3E761329KVOHelperNWDatagramConnection_observee] = a1;
  id v10 = a1;
  uint64_t v11 = v9;
  id v27 = [v10 connectionState];
  sub_10000588C(&qword_1016650B0);
  swift_allocObject();
  uint64_t v12 = (void *)CurrentValueSubject.init(_:)();
  *(void *)&v11[OBJC_IVAR____TtC12searchpartydP33_6037248B8C5D968AAFEBF5992F3E761329KVOHelperNWDatagramConnection_subject] = v12;
  id v27 = v12;
  sub_100062734(&qword_1016650B8, &qword_1016650B0);
  *(void *)&v11[OBJC_IVAR____TtC12searchpartydP33_6037248B8C5D968AAFEBF5992F3E761329KVOHelperNWDatagramConnection_publisher] = Publisher.eraseToAnyPublisher()();

  v26.receiver = v11;
  v26.super_class = v8;
  uint64_t v13 = (char *)[super init];
  id v27 = *(id *)&v13[OBJC_IVAR____TtC12searchpartydP33_6037248B8C5D968AAFEBF5992F3E761329KVOHelperNWDatagramConnection_observee];
  id v14 = v27;
  swift_getKeyPath();
  swift_allocObject();
  swift_unknownObjectWeakInit();
  uint64_t v15 = v13;
  id v16 = v14;
  uint64_t v17 = _KeyValueCodingAndObserving.observe<A>(_:options:changeHandler:)();

  swift_release();
  swift_release();

  uint64_t v18 = *(void **)&v15[OBJC_IVAR____TtC12searchpartydP33_6037248B8C5D968AAFEBF5992F3E761329KVOHelperNWDatagramConnection_observation];
  *(void *)&v15[OBJC_IVAR____TtC12searchpartydP33_6037248B8C5D968AAFEBF5992F3E761329KVOHelperNWDatagramConnection_observation] = v17;

  v2[3] = v15;
  id v27 = (id)v2[5];
  sub_100062734(&qword_1016650C0, &qword_1016650A8);
  v2[7] = Publisher.eraseToAnyPublisher()();
  uint64_t v19 = *(void **)&v15[OBJC_IVAR____TtC12searchpartydP33_6037248B8C5D968AAFEBF5992F3E761329KVOHelperNWDatagramConnection_publisher];
  v2[6] = v19;
  id v27 = v19;
  swift_retain_n();
  sub_10000588C(&qword_101644960);
  sub_100062734(&qword_101644968, &qword_101644960);
  Publisher.first(where:)();
  swift_release();
  swift_allocObject();
  swift_weakInit();
  sub_100062734(&qword_101644970, &qword_101644958);
  uint64_t v20 = v24;
  uint64_t v21 = Publisher<>.sink(receiveValue:)();

  swift_release();
  (*(void (**)(char *, uint64_t))(v25 + 8))(v7, v20);
  v2[4] = v21;
  swift_release();
  return v2;
}

uint64_t sub_100F459D4()
{
  swift_beginAccess();
  uint64_t Strong = swift_weakLoadStrong();
  if (Strong)
  {
    unint64_t v1 = *(void **)(Strong + 16);
    uint64_t v2 = swift_allocObject();
    swift_weakInit();
    aBlock[4] = sub_100F46878;
    void aBlock[5] = v2;
    aBlock[0] = _NSConcreteStackBlock;
    aBlock[1] = 1107296256;
    void aBlock[2] = sub_100F45ED4;
    aBlock[3] = &unk_1015FEB10;
    unint64_t v3 = _Block_copy(aBlock);
    swift_release();
    [v1 readDatagramsWithMinimumCount:1 maximumCount:1 completionHandler:v3];
    _Block_release(v3);
    swift_release();
  }
  swift_beginAccess();
  uint64_t result = swift_weakLoadStrong();
  if (result)
  {
    *(void *)(result + 32) = 0;
    swift_release();
    return swift_release();
  }
  return result;
}

uint64_t sub_100F45B1C()
{
  unint64_t v1 = *(void **)(v0 + 16);
  [v1 cancel];

  swift_release();
  swift_release();
  swift_release();
  swift_release();

  return swift_deallocClassInstance();
}

uint64_t sub_100F45B94(void *a1, uint64_t a2)
{
  swift_beginAccess();
  uint64_t result = swift_weakLoadStrong();
  if (result)
  {
    uint64_t v5 = result;
    if (a2)
    {
      swift_errorRetain();
      swift_errorRetain();
      if (qword_1016373D8 != -1) {
        swift_once();
      }
      uint64_t v6 = type metadata accessor for Logger();
      sub_100010324(v6, (uint64_t)qword_10170F168);
      swift_errorRetain();
      swift_errorRetain();
      uint64_t v7 = Logger.logObject.getter();
      os_log_type_t v8 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v7, v8))
      {
        uint64_t v9 = (uint8_t *)swift_slowAlloc();
        id v10 = (void *)swift_slowAlloc();
        *(_DWORD *)uint64_t v9 = 138412290;
        sub_10015CEB8();
        swift_allocError();
        uint64_t *v11 = a2;
        swift_errorRetain();
        aBlocunint64_t k = _swift_stdlib_bridgeErrorToNSError();
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        *id v10 = aBlock;
        swift_errorRelease();
        swift_errorRelease();
        _os_log_impl((void *)&_mh_execute_header, v7, v8, "MessagingDatagramConnection read error: %@", v9, 0xCu);
        sub_10000588C((uint64_t *)&unk_101638EA0);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
      }
      else
      {
        swift_errorRelease();
        swift_errorRelease();
      }

      aBlocunint64_t k = a2;
      swift_errorRetain();
      PassthroughSubject.send(completion:)();
      swift_errorRelease();
      swift_errorRelease();
      swift_errorRelease();
    }
    else if (a1[2])
    {
      unint64_t v12 = a1[5];
      aBlocunint64_t k = a1[4];
      uint64_t v17 = v12;
      sub_1000361E0(aBlock, v12);
      PassthroughSubject.send(_:)();
      sub_10001CFB8(aBlock, v12);
      uint64_t v13 = *(void **)(v5 + 16);
      uint64_t v14 = swift_allocObject();
      swift_weakInit();
      uint64_t v20 = sub_100F46878;
      uint64_t v21 = v14;
      aBlocunint64_t k = (uint64_t)_NSConcreteStackBlock;
      uint64_t v17 = 1107296256;
      uint64_t v18 = sub_100F45ED4;
      uint64_t v19 = &unk_1015FEB38;
      uint64_t v15 = _Block_copy(&aBlock);
      swift_release();
      [v13 readDatagramsWithMinimumCount:1 maximumCount:1 completionHandler:v15];
      _Block_release(v15);
    }
    return swift_release();
  }
  return result;
}

void sub_100F45ED4(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v4 = *(void (**)(uint64_t, void *))(a1 + 32);
  uint64_t v5 = static Array._unconditionallyBridgeFromObjectiveC(_:)();
  swift_retain();
  id v6 = a3;
  v4(v5, a3);
  swift_release();
  swift_bridgeObjectRelease();
}

void sub_100F45F64(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unint64_t a5)
{
  uint64_t v9 = swift_allocObject();
  *(void *)(v9 + 16) = a1;
  *(void *)(v9 + 24) = a2;
  swift_beginAccess();
  uint64_t Strong = swift_weakLoadStrong();
  if (Strong)
  {
    uint64_t v11 = *(void **)(Strong + 16);
    swift_retain();
    id v12 = v11;
    swift_release();
    sub_10000588C(&qword_101657710);
    uint64_t v13 = swift_allocObject();
    *(_OWORD *)(v13 + 16) = xmmword_101342130;
    *(void *)(v13 + 32) = a4;
    *(void *)(v13 + 40) = a5;
    sub_1000361E0(a4, a5);
    Class isa = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    uint64_t v15 = swift_allocObject();
    *(void *)(v15 + 16) = sub_1003B4058;
    *(void *)(v15 + 24) = v9;
    aBlock[4] = sub_100F468D0;
    void aBlock[5] = v15;
    aBlock[0] = _NSConcreteStackBlock;
    aBlock[1] = 1107296256;
    void aBlock[2] = sub_100769474;
    aBlock[3] = &unk_1015FEBB0;
    id v16 = _Block_copy(aBlock);
    swift_release();
    [v12 writeDatagrams:isa completionHandler:v16];
    _Block_release(v16);
  }
  else
  {
    swift_retain();
    swift_release();
  }
}

uint64_t sub_100F46130(uint64_t a1, uint64_t (*a2)(uint64_t, uint64_t))
{
  if (!a1) {
    return a2(0, 0);
  }
  swift_errorRetain();
  swift_errorRetain();
  if (qword_1016373D8 != -1) {
    swift_once();
  }
  uint64_t v4 = type metadata accessor for Logger();
  sub_100010324(v4, (uint64_t)qword_10170F168);
  swift_errorRetain();
  swift_errorRetain();
  uint64_t v5 = Logger.logObject.getter();
  os_log_type_t v6 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v5, v6))
  {
    uint64_t v7 = (uint8_t *)swift_slowAlloc();
    os_log_type_t v8 = (void *)swift_slowAlloc();
    *(_DWORD *)uint64_t v7 = 138412290;
    sub_10015CEB8();
    swift_allocError();
    *uint64_t v9 = a1;
    swift_errorRetain();
    uint64_t v11 = _swift_stdlib_bridgeErrorToNSError();
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *os_log_type_t v8 = v11;
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl((void *)&_mh_execute_header, v5, v6, "MessagingDatagramConnection send error: %@", v7, 0xCu);
    sub_10000588C((uint64_t *)&unk_101638EA0);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    swift_errorRelease();
    swift_errorRelease();
  }

  swift_errorRetain();
  a2(a1, 1);
  swift_errorRelease();
  swift_errorRelease();
  return swift_errorRelease();
}

uint64_t sub_100F46368()
{
  type metadata accessor for MessagingDatagramConnection();
  v0._countAndFlagsBits = CustomStringConvertible.typeDescription.getter();
  String.append(_:)(v0);
  swift_bridgeObjectRelease();
  v1._countAndFlagsBits = 8250;
  v1._object = (void *)0xE200000000000000;
  String.append(_:)(v1);
  v2._countAndFlagsBits = CustomStringConvertible<>.addressDescription.getter();
  String.append(_:)(v2);
  swift_bridgeObjectRelease();
  v3._countAndFlagsBits = 62;
  v3._object = (void *)0xE100000000000000;
  String.append(_:)(v3);
  return 60;
}